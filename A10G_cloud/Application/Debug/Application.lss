
Application.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00026690  00012000  00012000  00002000  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     00000310  20000000  00038690  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00005424  20000310  000389a0  00030310  2**4
                  ALLOC
  3 .stack        00002004  20005734  0003ddc4  00030310  2**0
                  ALLOC
  4 .ARM.attributes 00000028  00000000  00000000  00030310  2**0
                  CONTENTS, READONLY
  5 .comment      00000059  00000000  00000000  00030338  2**0
                  CONTENTS, READONLY
  6 .debug_info   0010a54b  00000000  00000000  00030391  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000fea0  00000000  00000000  0013a8dc  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    000135f9  00000000  00000000  0014a77c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 000034d8  00000000  00000000  0015dd75  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00003160  00000000  00000000  0016124d  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  000291c0  00000000  00000000  001643ad  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   000531cc  00000000  00000000  0018d56d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    000ba649  00000000  00000000  001e0739  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  0000c730  00000000  00000000  0029ad84  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00012000 <exception_table>:
   12000:	38 77 00 20 11 97 02 00 09 98 02 00 09 98 02 00     8w. ............
	...
   1202c:	0d 88 01 00 00 00 00 00 00 00 00 00 31 89 01 00     ............1...
   1203c:	79 89 01 00 09 98 02 00 09 98 02 00 09 98 02 00     y...............
   1204c:	61 58 02 00 8d 4d 02 00 09 98 02 00 61 24 01 00     aX...M......a$..
   1205c:	09 98 02 00 a5 25 01 00 05 5f 02 00 1d 5f 02 00     .....%..._..._..
   1206c:	35 5f 02 00 4d 5f 02 00 65 5f 02 00 7d 5f 02 00     5_..M_..e_..}_..
   1207c:	59 96 02 00 6d 96 02 00 81 96 02 00 f9 64 01 00     Y...m........d..
   1208c:	0d 65 01 00 21 65 01 00 00 00 00 00 00 00 00 00     .e..!e..........
   1209c:	e9 22 01 00 09 98 02 00 25 24 01 00 09 98 02 00     ."......%$......
   120ac:	09 98 02 00 00 00 00 00                             ........

000120b4 <__do_global_dtors_aux>:
   120b4:	b510      	push	{r4, lr}
   120b6:	4c06      	ldr	r4, [pc, #24]	; (120d0 <__do_global_dtors_aux+0x1c>)
   120b8:	7823      	ldrb	r3, [r4, #0]
   120ba:	2b00      	cmp	r3, #0
   120bc:	d107      	bne.n	120ce <__do_global_dtors_aux+0x1a>
   120be:	4b05      	ldr	r3, [pc, #20]	; (120d4 <__do_global_dtors_aux+0x20>)
   120c0:	2b00      	cmp	r3, #0
   120c2:	d002      	beq.n	120ca <__do_global_dtors_aux+0x16>
   120c4:	4804      	ldr	r0, [pc, #16]	; (120d8 <__do_global_dtors_aux+0x24>)
   120c6:	e000      	b.n	120ca <__do_global_dtors_aux+0x16>
   120c8:	bf00      	nop
   120ca:	2301      	movs	r3, #1
   120cc:	7023      	strb	r3, [r4, #0]
   120ce:	bd10      	pop	{r4, pc}
   120d0:	20000310 	.word	0x20000310
   120d4:	00000000 	.word	0x00000000
   120d8:	00038690 	.word	0x00038690

000120dc <frame_dummy>:
   120dc:	4b08      	ldr	r3, [pc, #32]	; (12100 <frame_dummy+0x24>)
   120de:	b510      	push	{r4, lr}
   120e0:	2b00      	cmp	r3, #0
   120e2:	d003      	beq.n	120ec <frame_dummy+0x10>
   120e4:	4907      	ldr	r1, [pc, #28]	; (12104 <frame_dummy+0x28>)
   120e6:	4808      	ldr	r0, [pc, #32]	; (12108 <frame_dummy+0x2c>)
   120e8:	e000      	b.n	120ec <frame_dummy+0x10>
   120ea:	bf00      	nop
   120ec:	4807      	ldr	r0, [pc, #28]	; (1210c <frame_dummy+0x30>)
   120ee:	6803      	ldr	r3, [r0, #0]
   120f0:	2b00      	cmp	r3, #0
   120f2:	d100      	bne.n	120f6 <frame_dummy+0x1a>
   120f4:	bd10      	pop	{r4, pc}
   120f6:	4b06      	ldr	r3, [pc, #24]	; (12110 <frame_dummy+0x34>)
   120f8:	2b00      	cmp	r3, #0
   120fa:	d0fb      	beq.n	120f4 <frame_dummy+0x18>
   120fc:	4798      	blx	r3
   120fe:	e7f9      	b.n	120f4 <frame_dummy+0x18>
   12100:	00000000 	.word	0x00000000
   12104:	20000314 	.word	0x20000314
   12108:	00038690 	.word	0x00038690
   1210c:	00038690 	.word	0x00038690
   12110:	00000000 	.word	0x00000000

00012114 <adc_is_syncing>:
 * \retval true if the module synchronization is ongoing
 * \retval false if the module has completed synchronization
 */
static inline bool adc_is_syncing(
	struct adc_module *const module_inst)
{
   12114:	b580      	push	{r7, lr}
   12116:	b084      	sub	sp, #16
   12118:	af00      	add	r7, sp, #0
   1211a:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module_inst);

	Adc *const adc_module = module_inst->hw;
   1211c:	687b      	ldr	r3, [r7, #4]
   1211e:	681b      	ldr	r3, [r3, #0]
   12120:	60fb      	str	r3, [r7, #12]

	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
   12122:	68fb      	ldr	r3, [r7, #12]
   12124:	7e5b      	ldrb	r3, [r3, #25]
   12126:	b2db      	uxtb	r3, r3
   12128:	b25b      	sxtb	r3, r3
   1212a:	2b00      	cmp	r3, #0
   1212c:	da01      	bge.n	12132 <adc_is_syncing+0x1e>
		return true;
   1212e:	2301      	movs	r3, #1
   12130:	e000      	b.n	12134 <adc_is_syncing+0x20>
	}

	return false;
   12132:	2300      	movs	r3, #0
}
   12134:	0018      	movs	r0, r3
   12136:	46bd      	mov	sp, r7
   12138:	b004      	add	sp, #16
   1213a:	bd80      	pop	{r7, pc}

0001213c <adc_start_conversion>:
 *
 * \param[in] module_inst  Pointer to the ADC software instance struct
 */
static inline void adc_start_conversion(
		struct adc_module *const module_inst)
{
   1213c:	b580      	push	{r7, lr}
   1213e:	b084      	sub	sp, #16
   12140:	af00      	add	r7, sp, #0
   12142:	6078      	str	r0, [r7, #4]
	Assert(module_inst);
	Assert(module_inst->hw);

	Adc *const adc_module = module_inst->hw;
   12144:	687b      	ldr	r3, [r7, #4]
   12146:	681b      	ldr	r3, [r3, #0]
   12148:	60fb      	str	r3, [r7, #12]

	while (adc_is_syncing(module_inst)) {
   1214a:	46c0      	nop			; (mov r8, r8)
   1214c:	687b      	ldr	r3, [r7, #4]
   1214e:	0018      	movs	r0, r3
   12150:	4b0b      	ldr	r3, [pc, #44]	; (12180 <adc_start_conversion+0x44>)
   12152:	4798      	blx	r3
   12154:	1e03      	subs	r3, r0, #0
   12156:	d1f9      	bne.n	1214c <adc_start_conversion+0x10>
		/* Wait for synchronization */
	}

	adc_module->SWTRIG.reg |= ADC_SWTRIG_START;
   12158:	68fb      	ldr	r3, [r7, #12]
   1215a:	7b1b      	ldrb	r3, [r3, #12]
   1215c:	b2db      	uxtb	r3, r3
   1215e:	2202      	movs	r2, #2
   12160:	4313      	orrs	r3, r2
   12162:	b2da      	uxtb	r2, r3
   12164:	68fb      	ldr	r3, [r7, #12]
   12166:	731a      	strb	r2, [r3, #12]

	while (adc_is_syncing(module_inst)) {
   12168:	46c0      	nop			; (mov r8, r8)
   1216a:	687b      	ldr	r3, [r7, #4]
   1216c:	0018      	movs	r0, r3
   1216e:	4b04      	ldr	r3, [pc, #16]	; (12180 <adc_start_conversion+0x44>)
   12170:	4798      	blx	r3
   12172:	1e03      	subs	r3, r0, #0
   12174:	d1f9      	bne.n	1216a <adc_start_conversion+0x2e>
		/* Wait for synchronization */
	}
}
   12176:	46c0      	nop			; (mov r8, r8)
   12178:	46bd      	mov	sp, r7
   1217a:	b004      	add	sp, #16
   1217c:	bd80      	pop	{r7, pc}
   1217e:	46c0      	nop			; (mov r8, r8)
   12180:	00012115 	.word	0x00012115

00012184 <adc_disable_interrupt>:
 * \param[in] module_inst Pointer to the ADC software instance struct
 * \param[in] interrupt Interrupt to disable
 */
static inline void adc_disable_interrupt(struct adc_module *const module_inst,
		enum adc_interrupt_flag interrupt)
{
   12184:	b580      	push	{r7, lr}
   12186:	b084      	sub	sp, #16
   12188:	af00      	add	r7, sp, #0
   1218a:	6078      	str	r0, [r7, #4]
   1218c:	000a      	movs	r2, r1
   1218e:	1cfb      	adds	r3, r7, #3
   12190:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	Adc *const adc_module = module_inst->hw;
   12192:	687b      	ldr	r3, [r7, #4]
   12194:	681b      	ldr	r3, [r3, #0]
   12196:	60fb      	str	r3, [r7, #12]
	/* Enable interrupt */
	adc_module->INTENCLR.reg = interrupt;
   12198:	68fb      	ldr	r3, [r7, #12]
   1219a:	1cfa      	adds	r2, r7, #3
   1219c:	7812      	ldrb	r2, [r2, #0]
   1219e:	759a      	strb	r2, [r3, #22]
}
   121a0:	46c0      	nop			; (mov r8, r8)
   121a2:	46bd      	mov	sp, r7
   121a4:	b004      	add	sp, #16
   121a6:	bd80      	pop	{r7, pc}

000121a8 <_adc_interrupt_handler>:
#include "adc_callback.h"

struct adc_module *_adc_instances[ADC_INST_NUM];

static void _adc_interrupt_handler(const uint8_t instance)
{
   121a8:	b580      	push	{r7, lr}
   121aa:	b084      	sub	sp, #16
   121ac:	af00      	add	r7, sp, #0
   121ae:	0002      	movs	r2, r0
   121b0:	1dfb      	adds	r3, r7, #7
   121b2:	701a      	strb	r2, [r3, #0]
	struct adc_module *module = _adc_instances[instance];
   121b4:	1dfb      	adds	r3, r7, #7
   121b6:	781a      	ldrb	r2, [r3, #0]
   121b8:	4b47      	ldr	r3, [pc, #284]	; (122d8 <_adc_interrupt_handler+0x130>)
   121ba:	0092      	lsls	r2, r2, #2
   121bc:	58d3      	ldr	r3, [r2, r3]
   121be:	60fb      	str	r3, [r7, #12]

	/* get interrupt flags and mask out enabled callbacks */
	uint32_t flags = module->hw->INTFLAG.reg & module->hw->INTENSET.reg;
   121c0:	68fb      	ldr	r3, [r7, #12]
   121c2:	681b      	ldr	r3, [r3, #0]
   121c4:	7e1b      	ldrb	r3, [r3, #24]
   121c6:	b2da      	uxtb	r2, r3
   121c8:	68fb      	ldr	r3, [r7, #12]
   121ca:	681b      	ldr	r3, [r3, #0]
   121cc:	7ddb      	ldrb	r3, [r3, #23]
   121ce:	b2db      	uxtb	r3, r3
   121d0:	4013      	ands	r3, r2
   121d2:	b2db      	uxtb	r3, r3
   121d4:	60bb      	str	r3, [r7, #8]

	if (flags & ADC_INTFLAG_RESRDY) {
   121d6:	68bb      	ldr	r3, [r7, #8]
   121d8:	2201      	movs	r2, #1
   121da:	4013      	ands	r3, r2
   121dc:	d045      	beq.n	1226a <_adc_interrupt_handler+0xc2>
		/* clear interrupt flag */
		module->hw->INTFLAG.reg = ADC_INTFLAG_RESRDY;
   121de:	68fb      	ldr	r3, [r7, #12]
   121e0:	681b      	ldr	r3, [r3, #0]
   121e2:	2201      	movs	r2, #1
   121e4:	761a      	strb	r2, [r3, #24]

		while (adc_is_syncing(module)) {
   121e6:	46c0      	nop			; (mov r8, r8)
   121e8:	68fb      	ldr	r3, [r7, #12]
   121ea:	0018      	movs	r0, r3
   121ec:	4b3b      	ldr	r3, [pc, #236]	; (122dc <_adc_interrupt_handler+0x134>)
   121ee:	4798      	blx	r3
   121f0:	1e03      	subs	r3, r0, #0
   121f2:	d1f9      	bne.n	121e8 <_adc_interrupt_handler+0x40>
			/* Wait for synchronization */
		}

		/* store ADC result in job buffer */
		*(module->job_buffer++) = module->hw->RESULT.reg;
   121f4:	68fb      	ldr	r3, [r7, #12]
   121f6:	695b      	ldr	r3, [r3, #20]
   121f8:	1c99      	adds	r1, r3, #2
   121fa:	68fa      	ldr	r2, [r7, #12]
   121fc:	6151      	str	r1, [r2, #20]
   121fe:	68fa      	ldr	r2, [r7, #12]
   12200:	6812      	ldr	r2, [r2, #0]
   12202:	8b52      	ldrh	r2, [r2, #26]
   12204:	b292      	uxth	r2, r2
   12206:	801a      	strh	r2, [r3, #0]

		if (--module->remaining_conversions > 0) {
   12208:	68fb      	ldr	r3, [r7, #12]
   1220a:	8b1b      	ldrh	r3, [r3, #24]
   1220c:	b29b      	uxth	r3, r3
   1220e:	3b01      	subs	r3, #1
   12210:	b29b      	uxth	r3, r3
   12212:	68fa      	ldr	r2, [r7, #12]
   12214:	1c19      	adds	r1, r3, #0
   12216:	8311      	strh	r1, [r2, #24]
   12218:	2b00      	cmp	r3, #0
   1221a:	d008      	beq.n	1222e <_adc_interrupt_handler+0x86>
			if (module->software_trigger == true) {
   1221c:	68fb      	ldr	r3, [r7, #12]
   1221e:	7f5b      	ldrb	r3, [r3, #29]
   12220:	2b00      	cmp	r3, #0
   12222:	d022      	beq.n	1226a <_adc_interrupt_handler+0xc2>
				adc_start_conversion(module);
   12224:	68fb      	ldr	r3, [r7, #12]
   12226:	0018      	movs	r0, r3
   12228:	4b2d      	ldr	r3, [pc, #180]	; (122e0 <_adc_interrupt_handler+0x138>)
   1222a:	4798      	blx	r3
   1222c:	e01d      	b.n	1226a <_adc_interrupt_handler+0xc2>
			}
		} else {
			adc_disable_interrupt(module, ADC_INTERRUPT_RESULT_READY);
   1222e:	68fb      	ldr	r3, [r7, #12]
   12230:	2101      	movs	r1, #1
   12232:	0018      	movs	r0, r3
   12234:	4b2b      	ldr	r3, [pc, #172]	; (122e4 <_adc_interrupt_handler+0x13c>)
   12236:	4798      	blx	r3
			if (module->job_status == STATUS_BUSY) {
   12238:	68fb      	ldr	r3, [r7, #12]
   1223a:	7f1b      	ldrb	r3, [r3, #28]
   1223c:	b2db      	uxtb	r3, r3
   1223e:	2b05      	cmp	r3, #5
   12240:	d113      	bne.n	1226a <_adc_interrupt_handler+0xc2>
				/* job is complete. update status,disable interrupt
					*and call callback */
				module->job_status = STATUS_OK;
   12242:	68fb      	ldr	r3, [r7, #12]
   12244:	2200      	movs	r2, #0
   12246:	771a      	strb	r2, [r3, #28]

				if ((module->enabled_callback_mask &
   12248:	68fb      	ldr	r3, [r7, #12]
   1224a:	7edb      	ldrb	r3, [r3, #27]
   1224c:	001a      	movs	r2, r3
   1224e:	2301      	movs	r3, #1
   12250:	4013      	ands	r3, r2
   12252:	d00a      	beq.n	1226a <_adc_interrupt_handler+0xc2>
						(1 << ADC_CALLBACK_READ_BUFFER)) &&
					(module->registered_callback_mask &
   12254:	68fb      	ldr	r3, [r7, #12]
   12256:	7e9b      	ldrb	r3, [r3, #26]
   12258:	001a      	movs	r2, r3
   1225a:	2301      	movs	r3, #1
   1225c:	4013      	ands	r3, r2
						(1 << ADC_CALLBACK_READ_BUFFER)) &&
   1225e:	d004      	beq.n	1226a <_adc_interrupt_handler+0xc2>
						(1 << ADC_CALLBACK_READ_BUFFER))) {
					(module->callback[ADC_CALLBACK_READ_BUFFER])(module);
   12260:	68fb      	ldr	r3, [r7, #12]
   12262:	689b      	ldr	r3, [r3, #8]
   12264:	68fa      	ldr	r2, [r7, #12]
   12266:	0010      	movs	r0, r2
   12268:	4798      	blx	r3
				}
			}
		}
	}

	if (flags & ADC_INTFLAG_WINMON) {
   1226a:	68bb      	ldr	r3, [r7, #8]
   1226c:	2204      	movs	r2, #4
   1226e:	4013      	ands	r3, r2
   12270:	d014      	beq.n	1229c <_adc_interrupt_handler+0xf4>
		module->hw->INTFLAG.reg = ADC_INTFLAG_WINMON;
   12272:	68fb      	ldr	r3, [r7, #12]
   12274:	681b      	ldr	r3, [r3, #0]
   12276:	2204      	movs	r2, #4
   12278:	761a      	strb	r2, [r3, #24]
		if ((module->enabled_callback_mask & (1 << ADC_CALLBACK_WINDOW)) &&
   1227a:	68fb      	ldr	r3, [r7, #12]
   1227c:	7edb      	ldrb	r3, [r3, #27]
   1227e:	001a      	movs	r2, r3
   12280:	2302      	movs	r3, #2
   12282:	4013      	ands	r3, r2
   12284:	d00a      	beq.n	1229c <_adc_interrupt_handler+0xf4>
				(module->registered_callback_mask & (1 << ADC_CALLBACK_WINDOW))) {
   12286:	68fb      	ldr	r3, [r7, #12]
   12288:	7e9b      	ldrb	r3, [r3, #26]
   1228a:	001a      	movs	r2, r3
   1228c:	2302      	movs	r3, #2
   1228e:	4013      	ands	r3, r2
		if ((module->enabled_callback_mask & (1 << ADC_CALLBACK_WINDOW)) &&
   12290:	d004      	beq.n	1229c <_adc_interrupt_handler+0xf4>
			(module->callback[ADC_CALLBACK_WINDOW])(module);
   12292:	68fb      	ldr	r3, [r7, #12]
   12294:	68db      	ldr	r3, [r3, #12]
   12296:	68fa      	ldr	r2, [r7, #12]
   12298:	0010      	movs	r0, r2
   1229a:	4798      	blx	r3
		}

	}

	if (flags & ADC_INTFLAG_OVERRUN) {
   1229c:	68bb      	ldr	r3, [r7, #8]
   1229e:	2202      	movs	r2, #2
   122a0:	4013      	ands	r3, r2
   122a2:	d014      	beq.n	122ce <_adc_interrupt_handler+0x126>
		module->hw->INTFLAG.reg = ADC_INTFLAG_OVERRUN;
   122a4:	68fb      	ldr	r3, [r7, #12]
   122a6:	681b      	ldr	r3, [r3, #0]
   122a8:	2202      	movs	r2, #2
   122aa:	761a      	strb	r2, [r3, #24]
		if ((module->enabled_callback_mask & (1 << ADC_CALLBACK_ERROR)) &&
   122ac:	68fb      	ldr	r3, [r7, #12]
   122ae:	7edb      	ldrb	r3, [r3, #27]
   122b0:	001a      	movs	r2, r3
   122b2:	2304      	movs	r3, #4
   122b4:	4013      	ands	r3, r2
   122b6:	d00a      	beq.n	122ce <_adc_interrupt_handler+0x126>
				(module->registered_callback_mask & (1 << ADC_CALLBACK_ERROR))) {
   122b8:	68fb      	ldr	r3, [r7, #12]
   122ba:	7e9b      	ldrb	r3, [r3, #26]
   122bc:	001a      	movs	r2, r3
   122be:	2304      	movs	r3, #4
   122c0:	4013      	ands	r3, r2
		if ((module->enabled_callback_mask & (1 << ADC_CALLBACK_ERROR)) &&
   122c2:	d004      	beq.n	122ce <_adc_interrupt_handler+0x126>
			(module->callback[ADC_CALLBACK_ERROR])(module);
   122c4:	68fb      	ldr	r3, [r7, #12]
   122c6:	691b      	ldr	r3, [r3, #16]
   122c8:	68fa      	ldr	r2, [r7, #12]
   122ca:	0010      	movs	r0, r2
   122cc:	4798      	blx	r3
		}
	}
}
   122ce:	46c0      	nop			; (mov r8, r8)
   122d0:	46bd      	mov	sp, r7
   122d2:	b004      	add	sp, #16
   122d4:	bd80      	pop	{r7, pc}
   122d6:	46c0      	nop			; (mov r8, r8)
   122d8:	200041c4 	.word	0x200041c4
   122dc:	00012115 	.word	0x00012115
   122e0:	0001213d 	.word	0x0001213d
   122e4:	00012185 	.word	0x00012185

000122e8 <ADC_Handler>:

/** Interrupt handler for the ADC module. */
void ADC_Handler(void)
{
   122e8:	b580      	push	{r7, lr}
   122ea:	af00      	add	r7, sp, #0
	_adc_interrupt_handler(0);
   122ec:	2000      	movs	r0, #0
   122ee:	4b02      	ldr	r3, [pc, #8]	; (122f8 <ADC_Handler+0x10>)
   122f0:	4798      	blx	r3
}
   122f2:	46c0      	nop			; (mov r8, r8)
   122f4:	46bd      	mov	sp, r7
   122f6:	bd80      	pop	{r7, pc}
   122f8:	000121a9 	.word	0x000121a9

000122fc <system_interrupt_disable>:
 *
 * \param[in] vector  Interrupt vector to disable
 */
static inline void system_interrupt_disable(
		const enum system_interrupt_vector vector)
{
   122fc:	b580      	push	{r7, lr}
   122fe:	b082      	sub	sp, #8
   12300:	af00      	add	r7, sp, #0
   12302:	0002      	movs	r2, r0
   12304:	1dfb      	adds	r3, r7, #7
   12306:	701a      	strb	r2, [r3, #0]
	NVIC->ICER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
   12308:	4a07      	ldr	r2, [pc, #28]	; (12328 <system_interrupt_disable+0x2c>)
   1230a:	1dfb      	adds	r3, r7, #7
   1230c:	781b      	ldrb	r3, [r3, #0]
   1230e:	0019      	movs	r1, r3
   12310:	231f      	movs	r3, #31
   12312:	400b      	ands	r3, r1
   12314:	2101      	movs	r1, #1
   12316:	4099      	lsls	r1, r3
   12318:	000b      	movs	r3, r1
   1231a:	0019      	movs	r1, r3
   1231c:	2380      	movs	r3, #128	; 0x80
   1231e:	50d1      	str	r1, [r2, r3]
}
   12320:	46c0      	nop			; (mov r8, r8)
   12322:	46bd      	mov	sp, r7
   12324:	b002      	add	sp, #8
   12326:	bd80      	pop	{r7, pc}
   12328:	e000e100 	.word	0xe000e100

0001232c <_dac_interrupt_handler>:
 *  Internal handler for DAC module interrupts.
 *
 * \param[in] instance  DAC instance number
 */
static void _dac_interrupt_handler(const uint8_t instance)
{
   1232c:	b580      	push	{r7, lr}
   1232e:	b084      	sub	sp, #16
   12330:	af00      	add	r7, sp, #0
   12332:	0002      	movs	r2, r0
   12334:	1dfb      	adds	r3, r7, #7
   12336:	701a      	strb	r2, [r3, #0]
	struct dac_module *module = _dac_instances[instance];
   12338:	1dfb      	adds	r3, r7, #7
   1233a:	781a      	ldrb	r2, [r3, #0]
   1233c:	4b37      	ldr	r3, [pc, #220]	; (1241c <_dac_interrupt_handler+0xf0>)
   1233e:	0092      	lsls	r2, r2, #2
   12340:	58d3      	ldr	r3, [r2, r3]
   12342:	60fb      	str	r3, [r7, #12]
	Dac *const dac_hw = module->hw;
   12344:	68fb      	ldr	r3, [r7, #12]
   12346:	681b      	ldr	r3, [r3, #0]
   12348:	60bb      	str	r3, [r7, #8]

	if (dac_hw->INTFLAG.reg & DAC_INTFLAG_UNDERRUN) {
   1234a:	68bb      	ldr	r3, [r7, #8]
   1234c:	799b      	ldrb	r3, [r3, #6]
   1234e:	b2db      	uxtb	r3, r3
   12350:	001a      	movs	r2, r3
   12352:	2301      	movs	r3, #1
   12354:	4013      	ands	r3, r2
   12356:	d00e      	beq.n	12376 <_dac_interrupt_handler+0x4a>
		dac_hw->INTFLAG.reg = DAC_INTFLAG_UNDERRUN;
   12358:	68bb      	ldr	r3, [r7, #8]
   1235a:	2201      	movs	r2, #1
   1235c:	719a      	strb	r2, [r3, #6]

		if ((module->callback) &&
   1235e:	68fb      	ldr	r3, [r7, #12]
   12360:	3314      	adds	r3, #20
   12362:	2b00      	cmp	r3, #0
   12364:	d007      	beq.n	12376 <_dac_interrupt_handler+0x4a>
			 (module->callback_enable[DAC_CALLBACK_DATA_UNDERRUN])){
   12366:	68fb      	ldr	r3, [r7, #12]
   12368:	7c5b      	ldrb	r3, [r3, #17]
		if ((module->callback) &&
   1236a:	2b00      	cmp	r3, #0
   1236c:	d003      	beq.n	12376 <_dac_interrupt_handler+0x4a>
			module->callback[DAC_CALLBACK_DATA_UNDERRUN](0);
   1236e:	68fb      	ldr	r3, [r7, #12]
   12370:	699b      	ldr	r3, [r3, #24]
   12372:	2000      	movs	r0, #0
   12374:	4798      	blx	r3
		}
	}

	if (dac_hw->INTFLAG.reg & DAC_INTFLAG_EMPTY) {
   12376:	68bb      	ldr	r3, [r7, #8]
   12378:	799b      	ldrb	r3, [r3, #6]
   1237a:	b2db      	uxtb	r3, r3
   1237c:	001a      	movs	r2, r3
   1237e:	2302      	movs	r3, #2
   12380:	4013      	ands	r3, r2
   12382:	d047      	beq.n	12414 <_dac_interrupt_handler+0xe8>
		dac_hw->INTFLAG.reg = DAC_INTFLAG_EMPTY;
   12384:	68bb      	ldr	r3, [r7, #8]
   12386:	2202      	movs	r2, #2
   12388:	719a      	strb	r2, [r3, #6]

		/* If in a write buffer job */
		if (module->remaining_conversions) {
   1238a:	68fb      	ldr	r3, [r7, #12]
   1238c:	899b      	ldrh	r3, [r3, #12]
   1238e:	b29b      	uxth	r3, r3
   12390:	2b00      	cmp	r3, #0
   12392:	d033      	beq.n	123fc <_dac_interrupt_handler+0xd0>

			/* Fill the data buffer with next data in write buffer */
			dac_hw->DATABUF.reg =
				module->job_buffer[module->transferred_conversions++];
   12394:	68fb      	ldr	r3, [r7, #12]
   12396:	689a      	ldr	r2, [r3, #8]
   12398:	68fb      	ldr	r3, [r7, #12]
   1239a:	89db      	ldrh	r3, [r3, #14]
   1239c:	b29b      	uxth	r3, r3
   1239e:	1c59      	adds	r1, r3, #1
   123a0:	b288      	uxth	r0, r1
   123a2:	68f9      	ldr	r1, [r7, #12]
   123a4:	81c8      	strh	r0, [r1, #14]
   123a6:	005b      	lsls	r3, r3, #1
   123a8:	18d3      	adds	r3, r2, r3
   123aa:	881b      	ldrh	r3, [r3, #0]
   123ac:	b29a      	uxth	r2, r3
			dac_hw->DATABUF.reg =
   123ae:	68bb      	ldr	r3, [r7, #8]
   123b0:	819a      	strh	r2, [r3, #12]

			/* Write buffer size decrement */
			module->remaining_conversions --;
   123b2:	68fb      	ldr	r3, [r7, #12]
   123b4:	899b      	ldrh	r3, [r3, #12]
   123b6:	b29b      	uxth	r3, r3
   123b8:	3b01      	subs	r3, #1
   123ba:	b29a      	uxth	r2, r3
   123bc:	68fb      	ldr	r3, [r7, #12]
   123be:	819a      	strh	r2, [r3, #12]

			/* If in a write buffer job and all the data are converted */
			if (module->remaining_conversions == 0) {
   123c0:	68fb      	ldr	r3, [r7, #12]
   123c2:	899b      	ldrh	r3, [r3, #12]
   123c4:	b29b      	uxth	r3, r3
   123c6:	2b00      	cmp	r3, #0
   123c8:	d118      	bne.n	123fc <_dac_interrupt_handler+0xd0>
				module->job_status = STATUS_OK;
   123ca:	68fb      	ldr	r3, [r7, #12]
   123cc:	2220      	movs	r2, #32
   123ce:	2100      	movs	r1, #0
   123d0:	5499      	strb	r1, [r3, r2]

				/* Disable interrupt */
				dac_hw->INTENCLR.reg = DAC_INTENCLR_EMPTY;
   123d2:	68bb      	ldr	r3, [r7, #8]
   123d4:	2202      	movs	r2, #2
   123d6:	711a      	strb	r2, [r3, #4]
				dac_hw->INTFLAG.reg = DAC_INTFLAG_EMPTY;
   123d8:	68bb      	ldr	r3, [r7, #8]
   123da:	2202      	movs	r2, #2
   123dc:	719a      	strb	r2, [r3, #6]
				system_interrupt_disable(SYSTEM_INTERRUPT_MODULE_DAC);
   123de:	2019      	movs	r0, #25
   123e0:	4b0f      	ldr	r3, [pc, #60]	; (12420 <_dac_interrupt_handler+0xf4>)
   123e2:	4798      	blx	r3

				if ((module->callback) &&
   123e4:	68fb      	ldr	r3, [r7, #12]
   123e6:	3314      	adds	r3, #20
   123e8:	2b00      	cmp	r3, #0
   123ea:	d007      	beq.n	123fc <_dac_interrupt_handler+0xd0>
					 (module->callback_enable[DAC_CALLBACK_TRANSFER_COMPLETE])) {
   123ec:	68fb      	ldr	r3, [r7, #12]
   123ee:	7c9b      	ldrb	r3, [r3, #18]
				if ((module->callback) &&
   123f0:	2b00      	cmp	r3, #0
   123f2:	d003      	beq.n	123fc <_dac_interrupt_handler+0xd0>
					module->callback[DAC_CALLBACK_TRANSFER_COMPLETE](0);
   123f4:	68fb      	ldr	r3, [r7, #12]
   123f6:	69db      	ldr	r3, [r3, #28]
   123f8:	2000      	movs	r0, #0
   123fa:	4798      	blx	r3
				}
			}
		}

		if ((module->callback) &&
   123fc:	68fb      	ldr	r3, [r7, #12]
   123fe:	3314      	adds	r3, #20
   12400:	2b00      	cmp	r3, #0
   12402:	d007      	beq.n	12414 <_dac_interrupt_handler+0xe8>
			 (module->callback_enable[DAC_CALLBACK_DATA_EMPTY])) {
   12404:	68fb      	ldr	r3, [r7, #12]
   12406:	7c1b      	ldrb	r3, [r3, #16]
		if ((module->callback) &&
   12408:	2b00      	cmp	r3, #0
   1240a:	d003      	beq.n	12414 <_dac_interrupt_handler+0xe8>
			module->callback[DAC_CALLBACK_DATA_EMPTY](0);
   1240c:	68fb      	ldr	r3, [r7, #12]
   1240e:	695b      	ldr	r3, [r3, #20]
   12410:	2000      	movs	r0, #0
   12412:	4798      	blx	r3
		}
	}
}
   12414:	46c0      	nop			; (mov r8, r8)
   12416:	46bd      	mov	sp, r7
   12418:	b004      	add	sp, #16
   1241a:	bd80      	pop	{r7, pc}
   1241c:	200041c8 	.word	0x200041c8
   12420:	000122fd 	.word	0x000122fd

00012424 <DAC_Handler>:

/** Handler for the DAC hardware module interrupt. */
void DAC_Handler(void)
{
   12424:	b580      	push	{r7, lr}
   12426:	af00      	add	r7, sp, #0
	_dac_interrupt_handler(0);
   12428:	2000      	movs	r0, #0
   1242a:	4b02      	ldr	r3, [pc, #8]	; (12434 <DAC_Handler+0x10>)
   1242c:	4798      	blx	r3
}
   1242e:	46c0      	nop			; (mov r8, r8)
   12430:	46bd      	mov	sp, r7
   12432:	bd80      	pop	{r7, pc}
   12434:	0001232d 	.word	0x0001232d

00012438 <system_interrupt_enter_critical_section>:
{
   12438:	b580      	push	{r7, lr}
   1243a:	af00      	add	r7, sp, #0
	cpu_irq_enter_critical();
   1243c:	4b02      	ldr	r3, [pc, #8]	; (12448 <system_interrupt_enter_critical_section+0x10>)
   1243e:	4798      	blx	r3
}
   12440:	46c0      	nop			; (mov r8, r8)
   12442:	46bd      	mov	sp, r7
   12444:	bd80      	pop	{r7, pc}
   12446:	46c0      	nop			; (mov r8, r8)
   12448:	000249ed 	.word	0x000249ed

0001244c <system_interrupt_leave_critical_section>:
{
   1244c:	b580      	push	{r7, lr}
   1244e:	af00      	add	r7, sp, #0
	cpu_irq_leave_critical();
   12450:	4b02      	ldr	r3, [pc, #8]	; (1245c <system_interrupt_leave_critical_section+0x10>)
   12452:	4798      	blx	r3
}
   12454:	46c0      	nop			; (mov r8, r8)
   12456:	46bd      	mov	sp, r7
   12458:	bd80      	pop	{r7, pc}
   1245a:	46c0      	nop			; (mov r8, r8)
   1245c:	00024a41 	.word	0x00024a41

00012460 <DMAC_Handler>:
/**
 * \brief DMA interrupt service routine.
 *
 */
void DMAC_Handler( void )
{
   12460:	b580      	push	{r7, lr}
   12462:	b086      	sub	sp, #24
   12464:	af00      	add	r7, sp, #0
	struct dma_resource *resource;
	uint8_t isr;
	uint32_t write_size;
	uint32_t total_size;

	system_interrupt_enter_critical_section();
   12466:	4b49      	ldr	r3, [pc, #292]	; (1258c <DMAC_Handler+0x12c>)
   12468:	4798      	blx	r3

	/* Get Pending channel */
	active_channel =  DMAC->INTPEND.reg & DMAC_INTPEND_ID_Msk;
   1246a:	4b49      	ldr	r3, [pc, #292]	; (12590 <DMAC_Handler+0x130>)
   1246c:	8c1b      	ldrh	r3, [r3, #32]
   1246e:	b29b      	uxth	r3, r3
   12470:	b2da      	uxtb	r2, r3
   12472:	2317      	movs	r3, #23
   12474:	18fb      	adds	r3, r7, r3
   12476:	210f      	movs	r1, #15
   12478:	400a      	ands	r2, r1
   1247a:	701a      	strb	r2, [r3, #0]

	Assert(_dma_active_resource[active_channel]);

	/* Get active DMA resource based on channel */
	resource = _dma_active_resource[active_channel];
   1247c:	2317      	movs	r3, #23
   1247e:	18fb      	adds	r3, r7, r3
   12480:	781a      	ldrb	r2, [r3, #0]
   12482:	4b44      	ldr	r3, [pc, #272]	; (12594 <DMAC_Handler+0x134>)
   12484:	0092      	lsls	r2, r2, #2
   12486:	58d3      	ldr	r3, [r2, r3]
   12488:	613b      	str	r3, [r7, #16]

	/* Select the active channel */
	DMAC->CHID.reg = DMAC_CHID_ID(resource->channel_id);
   1248a:	4a41      	ldr	r2, [pc, #260]	; (12590 <DMAC_Handler+0x130>)
   1248c:	693b      	ldr	r3, [r7, #16]
   1248e:	781b      	ldrb	r3, [r3, #0]
   12490:	210f      	movs	r1, #15
   12492:	400b      	ands	r3, r1
   12494:	b2d9      	uxtb	r1, r3
   12496:	233f      	movs	r3, #63	; 0x3f
   12498:	54d1      	strb	r1, [r2, r3]
	isr = DMAC->CHINTFLAG.reg;
   1249a:	493d      	ldr	r1, [pc, #244]	; (12590 <DMAC_Handler+0x130>)
   1249c:	230f      	movs	r3, #15
   1249e:	18fb      	adds	r3, r7, r3
   124a0:	224e      	movs	r2, #78	; 0x4e
   124a2:	5c8a      	ldrb	r2, [r1, r2]
   124a4:	701a      	strb	r2, [r3, #0]

	/* Calculate block transfer size of the DMA transfer */
	total_size = descriptor_section[resource->channel_id].BTCNT.reg;
   124a6:	693b      	ldr	r3, [r7, #16]
   124a8:	781b      	ldrb	r3, [r3, #0]
   124aa:	4a3b      	ldr	r2, [pc, #236]	; (12598 <DMAC_Handler+0x138>)
   124ac:	011b      	lsls	r3, r3, #4
   124ae:	18d3      	adds	r3, r2, r3
   124b0:	3302      	adds	r3, #2
   124b2:	881b      	ldrh	r3, [r3, #0]
   124b4:	b29b      	uxth	r3, r3
   124b6:	60bb      	str	r3, [r7, #8]
	write_size = _write_back_section[resource->channel_id].BTCNT.reg;
   124b8:	693b      	ldr	r3, [r7, #16]
   124ba:	781b      	ldrb	r3, [r3, #0]
   124bc:	4a37      	ldr	r2, [pc, #220]	; (1259c <DMAC_Handler+0x13c>)
   124be:	011b      	lsls	r3, r3, #4
   124c0:	18d3      	adds	r3, r2, r3
   124c2:	3302      	adds	r3, #2
   124c4:	881b      	ldrh	r3, [r3, #0]
   124c6:	b29b      	uxth	r3, r3
   124c8:	607b      	str	r3, [r7, #4]
	resource->transfered_size = total_size - write_size;
   124ca:	68ba      	ldr	r2, [r7, #8]
   124cc:	687b      	ldr	r3, [r7, #4]
   124ce:	1ad2      	subs	r2, r2, r3
   124d0:	693b      	ldr	r3, [r7, #16]
   124d2:	615a      	str	r2, [r3, #20]

	/* DMA channel interrupt handler */
	if (isr & DMAC_CHINTENCLR_TERR) {
   124d4:	230f      	movs	r3, #15
   124d6:	18fb      	adds	r3, r7, r3
   124d8:	781b      	ldrb	r3, [r3, #0]
   124da:	2201      	movs	r2, #1
   124dc:	4013      	ands	r3, r2
   124de:	d016      	beq.n	1250e <DMAC_Handler+0xae>
		/* Clear transfer error flag */
		DMAC->CHINTFLAG.reg = DMAC_CHINTENCLR_TERR;
   124e0:	4a2b      	ldr	r2, [pc, #172]	; (12590 <DMAC_Handler+0x130>)
   124e2:	234e      	movs	r3, #78	; 0x4e
   124e4:	2101      	movs	r1, #1
   124e6:	54d1      	strb	r1, [r2, r3]

		/* Set I/O ERROR status */
		resource->job_status = STATUS_ERR_IO;
   124e8:	693b      	ldr	r3, [r7, #16]
   124ea:	2210      	movs	r2, #16
   124ec:	745a      	strb	r2, [r3, #17]

		/* Execute the callback function */
		if ((resource->callback_enable & (1<<DMA_CALLBACK_TRANSFER_ERROR)) &&
   124ee:	693b      	ldr	r3, [r7, #16]
   124f0:	7c1b      	ldrb	r3, [r3, #16]
   124f2:	001a      	movs	r2, r3
   124f4:	2301      	movs	r3, #1
   124f6:	4013      	ands	r3, r2
   124f8:	d042      	beq.n	12580 <DMAC_Handler+0x120>
				(resource->callback[DMA_CALLBACK_TRANSFER_ERROR])) {
   124fa:	693b      	ldr	r3, [r7, #16]
   124fc:	685b      	ldr	r3, [r3, #4]
		if ((resource->callback_enable & (1<<DMA_CALLBACK_TRANSFER_ERROR)) &&
   124fe:	2b00      	cmp	r3, #0
   12500:	d03e      	beq.n	12580 <DMAC_Handler+0x120>
			resource->callback[DMA_CALLBACK_TRANSFER_ERROR](resource);
   12502:	693b      	ldr	r3, [r7, #16]
   12504:	685b      	ldr	r3, [r3, #4]
   12506:	693a      	ldr	r2, [r7, #16]
   12508:	0010      	movs	r0, r2
   1250a:	4798      	blx	r3
   1250c:	e038      	b.n	12580 <DMAC_Handler+0x120>
		}
	} else if (isr & DMAC_CHINTENCLR_TCMPL) {
   1250e:	230f      	movs	r3, #15
   12510:	18fb      	adds	r3, r7, r3
   12512:	781b      	ldrb	r3, [r3, #0]
   12514:	2202      	movs	r2, #2
   12516:	4013      	ands	r3, r2
   12518:	d016      	beq.n	12548 <DMAC_Handler+0xe8>
		/* Clear the transfer complete flag */
		DMAC->CHINTFLAG.reg = DMAC_CHINTENCLR_TCMPL;
   1251a:	4a1d      	ldr	r2, [pc, #116]	; (12590 <DMAC_Handler+0x130>)
   1251c:	234e      	movs	r3, #78	; 0x4e
   1251e:	2102      	movs	r1, #2
   12520:	54d1      	strb	r1, [r2, r3]

		/* Set job status */
		resource->job_status = STATUS_OK;
   12522:	693b      	ldr	r3, [r7, #16]
   12524:	2200      	movs	r2, #0
   12526:	745a      	strb	r2, [r3, #17]

		/* Execute the callback function */
		if ((resource->callback_enable & (1 << DMA_CALLBACK_TRANSFER_DONE)) &&
   12528:	693b      	ldr	r3, [r7, #16]
   1252a:	7c1b      	ldrb	r3, [r3, #16]
   1252c:	001a      	movs	r2, r3
   1252e:	2302      	movs	r3, #2
   12530:	4013      	ands	r3, r2
   12532:	d025      	beq.n	12580 <DMAC_Handler+0x120>
				(resource->callback[DMA_CALLBACK_TRANSFER_DONE])) {
   12534:	693b      	ldr	r3, [r7, #16]
   12536:	689b      	ldr	r3, [r3, #8]
		if ((resource->callback_enable & (1 << DMA_CALLBACK_TRANSFER_DONE)) &&
   12538:	2b00      	cmp	r3, #0
   1253a:	d021      	beq.n	12580 <DMAC_Handler+0x120>
			resource->callback[DMA_CALLBACK_TRANSFER_DONE](resource);
   1253c:	693b      	ldr	r3, [r7, #16]
   1253e:	689b      	ldr	r3, [r3, #8]
   12540:	693a      	ldr	r2, [r7, #16]
   12542:	0010      	movs	r0, r2
   12544:	4798      	blx	r3
   12546:	e01b      	b.n	12580 <DMAC_Handler+0x120>
		}
	} else if (isr & DMAC_CHINTENCLR_SUSP) {
   12548:	230f      	movs	r3, #15
   1254a:	18fb      	adds	r3, r7, r3
   1254c:	781b      	ldrb	r3, [r3, #0]
   1254e:	2204      	movs	r2, #4
   12550:	4013      	ands	r3, r2
   12552:	d015      	beq.n	12580 <DMAC_Handler+0x120>
		/* Clear channel suspend flag */
		DMAC->CHINTFLAG.reg = DMAC_CHINTENCLR_SUSP;
   12554:	4a0e      	ldr	r2, [pc, #56]	; (12590 <DMAC_Handler+0x130>)
   12556:	234e      	movs	r3, #78	; 0x4e
   12558:	2104      	movs	r1, #4
   1255a:	54d1      	strb	r1, [r2, r3]

		/* Set job status */
		resource->job_status = STATUS_SUSPEND;
   1255c:	693b      	ldr	r3, [r7, #16]
   1255e:	2206      	movs	r2, #6
   12560:	745a      	strb	r2, [r3, #17]

		/* Execute the callback function */
		if ((resource->callback_enable & (1 << DMA_CALLBACK_CHANNEL_SUSPEND)) &&
   12562:	693b      	ldr	r3, [r7, #16]
   12564:	7c1b      	ldrb	r3, [r3, #16]
   12566:	001a      	movs	r2, r3
   12568:	2304      	movs	r3, #4
   1256a:	4013      	ands	r3, r2
   1256c:	d008      	beq.n	12580 <DMAC_Handler+0x120>
			(resource->callback[DMA_CALLBACK_CHANNEL_SUSPEND])){
   1256e:	693b      	ldr	r3, [r7, #16]
   12570:	68db      	ldr	r3, [r3, #12]
		if ((resource->callback_enable & (1 << DMA_CALLBACK_CHANNEL_SUSPEND)) &&
   12572:	2b00      	cmp	r3, #0
   12574:	d004      	beq.n	12580 <DMAC_Handler+0x120>
			resource->callback[DMA_CALLBACK_CHANNEL_SUSPEND](resource);
   12576:	693b      	ldr	r3, [r7, #16]
   12578:	68db      	ldr	r3, [r3, #12]
   1257a:	693a      	ldr	r2, [r7, #16]
   1257c:	0010      	movs	r0, r2
   1257e:	4798      	blx	r3
		}
	}

	system_interrupt_leave_critical_section();
   12580:	4b07      	ldr	r3, [pc, #28]	; (125a0 <DMAC_Handler+0x140>)
   12582:	4798      	blx	r3
}
   12584:	46c0      	nop			; (mov r8, r8)
   12586:	46bd      	mov	sp, r7
   12588:	b006      	add	sp, #24
   1258a:	bd80      	pop	{r7, pc}
   1258c:	00012439 	.word	0x00012439
   12590:	41004800 	.word	0x41004800
   12594:	20000380 	.word	0x20000380
   12598:	200041d0 	.word	0x200041d0
   1259c:	20000330 	.word	0x20000330
   125a0:	0001244d 	.word	0x0001244d

000125a4 <EVSYS_Handler>:

	return STATUS_OK;
}

void EVSYS_Handler(void)
{
   125a4:	b580      	push	{r7, lr}
   125a6:	b082      	sub	sp, #8
   125a8:	af00      	add	r7, sp, #0
	struct events_hook *current_hook = _events_inst.hook_list;
   125aa:	4b15      	ldr	r3, [pc, #84]	; (12600 <EVSYS_Handler+0x5c>)
   125ac:	691b      	ldr	r3, [r3, #16]
   125ae:	607b      	str	r3, [r7, #4]
	uint32_t flag;

	/* Synch the interrupt flag buffer with the hardware register */
	flag = EVSYS->INTFLAG.reg;
   125b0:	4b14      	ldr	r3, [pc, #80]	; (12604 <EVSYS_Handler+0x60>)
   125b2:	699b      	ldr	r3, [r3, #24]
   125b4:	603b      	str	r3, [r7, #0]
	_events_inst.interrupt_flag_buffer |= flag;
   125b6:	4b12      	ldr	r3, [pc, #72]	; (12600 <EVSYS_Handler+0x5c>)
   125b8:	689a      	ldr	r2, [r3, #8]
   125ba:	683b      	ldr	r3, [r7, #0]
   125bc:	431a      	orrs	r2, r3
   125be:	4b10      	ldr	r3, [pc, #64]	; (12600 <EVSYS_Handler+0x5c>)
   125c0:	609a      	str	r2, [r3, #8]
	/* Clear all hardware interrupt flags */
	EVSYS->INTFLAG.reg = _EVENTS_INTFLAGS_MASK;
   125c2:	4b10      	ldr	r3, [pc, #64]	; (12604 <EVSYS_Handler+0x60>)
   125c4:	4a10      	ldr	r2, [pc, #64]	; (12608 <EVSYS_Handler+0x64>)
   125c6:	619a      	str	r2, [r3, #24]

	/* Traverse the linked list */
	while (current_hook != NULL) {
   125c8:	e008      	b.n	125dc <EVSYS_Handler+0x38>
		current_hook->hook_func(current_hook->resource);
   125ca:	687b      	ldr	r3, [r7, #4]
   125cc:	685a      	ldr	r2, [r3, #4]
   125ce:	687b      	ldr	r3, [r7, #4]
   125d0:	681b      	ldr	r3, [r3, #0]
   125d2:	0018      	movs	r0, r3
   125d4:	4790      	blx	r2
		current_hook = current_hook->next;
   125d6:	687b      	ldr	r3, [r7, #4]
   125d8:	689b      	ldr	r3, [r3, #8]
   125da:	607b      	str	r3, [r7, #4]
	while (current_hook != NULL) {
   125dc:	687b      	ldr	r3, [r7, #4]
   125de:	2b00      	cmp	r3, #0
   125e0:	d1f3      	bne.n	125ca <EVSYS_Handler+0x26>
	}

	/* Clear acknowledged interrupt sources from the interrupt flag buffer */
	flag = _events_inst.interrupt_flag_ack_buffer;
   125e2:	4b07      	ldr	r3, [pc, #28]	; (12600 <EVSYS_Handler+0x5c>)
   125e4:	68db      	ldr	r3, [r3, #12]
   125e6:	603b      	str	r3, [r7, #0]
	_events_inst.interrupt_flag_buffer &= ~flag;
   125e8:	4b05      	ldr	r3, [pc, #20]	; (12600 <EVSYS_Handler+0x5c>)
   125ea:	689b      	ldr	r3, [r3, #8]
   125ec:	683a      	ldr	r2, [r7, #0]
   125ee:	43d2      	mvns	r2, r2
   125f0:	401a      	ands	r2, r3
   125f2:	4b03      	ldr	r3, [pc, #12]	; (12600 <EVSYS_Handler+0x5c>)
   125f4:	609a      	str	r2, [r3, #8]
}
   125f6:	46c0      	nop			; (mov r8, r8)
   125f8:	46bd      	mov	sp, r7
   125fa:	b002      	add	sp, #8
   125fc:	bd80      	pop	{r7, pc}
   125fe:	46c0      	nop			; (mov r8, r8)
   12600:	20000000 	.word	0x20000000
   12604:	42000400 	.word	0x42000400
   12608:	0f0fffff 	.word	0x0f0fffff

0001260c <system_apb_clock_set_mask>:
 * \retval STATUS_OK               The clock mask was set successfully
 */
static inline enum status_code system_apb_clock_set_mask(
		const enum system_clock_apb_bus bus,
		const uint32_t mask)
{
   1260c:	b580      	push	{r7, lr}
   1260e:	b082      	sub	sp, #8
   12610:	af00      	add	r7, sp, #0
   12612:	0002      	movs	r2, r0
   12614:	6039      	str	r1, [r7, #0]
   12616:	1dfb      	adds	r3, r7, #7
   12618:	701a      	strb	r2, [r3, #0]
	switch (bus) {
   1261a:	1dfb      	adds	r3, r7, #7
   1261c:	781b      	ldrb	r3, [r3, #0]
   1261e:	2b01      	cmp	r3, #1
   12620:	d00a      	beq.n	12638 <system_apb_clock_set_mask+0x2c>
   12622:	2b02      	cmp	r3, #2
   12624:	d00f      	beq.n	12646 <system_apb_clock_set_mask+0x3a>
   12626:	2b00      	cmp	r3, #0
   12628:	d114      	bne.n	12654 <system_apb_clock_set_mask+0x48>
		case SYSTEM_CLOCK_APB_APBA:
			PM->APBAMASK.reg |= mask;
   1262a:	4b0e      	ldr	r3, [pc, #56]	; (12664 <system_apb_clock_set_mask+0x58>)
   1262c:	4a0d      	ldr	r2, [pc, #52]	; (12664 <system_apb_clock_set_mask+0x58>)
   1262e:	6991      	ldr	r1, [r2, #24]
   12630:	683a      	ldr	r2, [r7, #0]
   12632:	430a      	orrs	r2, r1
   12634:	619a      	str	r2, [r3, #24]
			break;
   12636:	e00f      	b.n	12658 <system_apb_clock_set_mask+0x4c>

		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBMASK.reg |= mask;
   12638:	4b0a      	ldr	r3, [pc, #40]	; (12664 <system_apb_clock_set_mask+0x58>)
   1263a:	4a0a      	ldr	r2, [pc, #40]	; (12664 <system_apb_clock_set_mask+0x58>)
   1263c:	69d1      	ldr	r1, [r2, #28]
   1263e:	683a      	ldr	r2, [r7, #0]
   12640:	430a      	orrs	r2, r1
   12642:	61da      	str	r2, [r3, #28]
			break;
   12644:	e008      	b.n	12658 <system_apb_clock_set_mask+0x4c>

		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCMASK.reg |= mask;
   12646:	4b07      	ldr	r3, [pc, #28]	; (12664 <system_apb_clock_set_mask+0x58>)
   12648:	4a06      	ldr	r2, [pc, #24]	; (12664 <system_apb_clock_set_mask+0x58>)
   1264a:	6a11      	ldr	r1, [r2, #32]
   1264c:	683a      	ldr	r2, [r7, #0]
   1264e:	430a      	orrs	r2, r1
   12650:	621a      	str	r2, [r3, #32]
			break;
   12652:	e001      	b.n	12658 <system_apb_clock_set_mask+0x4c>

		default:
			Assert(false);
			return STATUS_ERR_INVALID_ARG;
   12654:	2317      	movs	r3, #23
   12656:	e000      	b.n	1265a <system_apb_clock_set_mask+0x4e>

	}

	return STATUS_OK;
   12658:	2300      	movs	r3, #0
}
   1265a:	0018      	movs	r0, r3
   1265c:	46bd      	mov	sp, r7
   1265e:	b002      	add	sp, #8
   12660:	bd80      	pop	{r7, pc}
   12662:	46c0      	nop			; (mov r8, r8)
   12664:	40000400 	.word	0x40000400

00012668 <_system_events_init>:
#if defined(__GNUC__)
#  pragma GCC diagnostic push
#  pragma GCC diagnostic ignored "-Wmissing-prototypes"
#endif
void _system_events_init(void)
{
   12668:	b580      	push	{r7, lr}
   1266a:	af00      	add	r7, sp, #0
	/* Enable EVSYS register interface */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, PM_APBCMASK_EVSYS);
   1266c:	2102      	movs	r1, #2
   1266e:	2002      	movs	r0, #2
   12670:	4b07      	ldr	r3, [pc, #28]	; (12690 <_system_events_init+0x28>)
   12672:	4798      	blx	r3

	/* Make sure the EVSYS module is properly reset */
	EVSYS->CTRL.reg = EVSYS_CTRL_SWRST;
   12674:	4b07      	ldr	r3, [pc, #28]	; (12694 <_system_events_init+0x2c>)
   12676:	2201      	movs	r2, #1
   12678:	701a      	strb	r2, [r3, #0]

	while (EVSYS->CTRL.reg & EVSYS_CTRL_SWRST) {
   1267a:	46c0      	nop			; (mov r8, r8)
   1267c:	4b05      	ldr	r3, [pc, #20]	; (12694 <_system_events_init+0x2c>)
   1267e:	781b      	ldrb	r3, [r3, #0]
   12680:	b2db      	uxtb	r3, r3
   12682:	001a      	movs	r2, r3
   12684:	2301      	movs	r3, #1
   12686:	4013      	ands	r3, r2
   12688:	d1f8      	bne.n	1267c <_system_events_init+0x14>
	}
}
   1268a:	46c0      	nop			; (mov r8, r8)
   1268c:	46bd      	mov	sp, r7
   1268e:	bd80      	pop	{r7, pc}
   12690:	0001260d 	.word	0x0001260d
   12694:	42000400 	.word	0x42000400

00012698 <i2c_master_is_syncing>:
 * \retval true   Module is busy synchronizing
 * \retval false  Module is not synchronizing
 */
static inline bool i2c_master_is_syncing (
		const struct i2c_master_module *const module)
{
   12698:	b580      	push	{r7, lr}
   1269a:	b084      	sub	sp, #16
   1269c:	af00      	add	r7, sp, #0
   1269e:	6078      	str	r0, [r7, #4]
	/* Sanity check */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_hw = &(module->hw->I2CM);
   126a0:	687b      	ldr	r3, [r7, #4]
   126a2:	681b      	ldr	r3, [r3, #0]
   126a4:	60fb      	str	r3, [r7, #12]

#if defined(FEATURE_SERCOM_SYNCBUSY_SCHEME_VERSION_1)
	return (i2c_hw->STATUS.reg & SERCOM_I2CM_STATUS_SYNCBUSY);
#elif defined(FEATURE_SERCOM_SYNCBUSY_SCHEME_VERSION_2)
	return (i2c_hw->SYNCBUSY.reg & SERCOM_I2CM_SYNCBUSY_MASK);
   126a6:	68fb      	ldr	r3, [r7, #12]
   126a8:	69db      	ldr	r3, [r3, #28]
   126aa:	2207      	movs	r2, #7
   126ac:	4013      	ands	r3, r2
   126ae:	1e5a      	subs	r2, r3, #1
   126b0:	4193      	sbcs	r3, r2
   126b2:	b2db      	uxtb	r3, r3
#else
#  error Unknown SERCOM SYNCBUSY scheme!
#endif
}
   126b4:	0018      	movs	r0, r3
   126b6:	46bd      	mov	sp, r7
   126b8:	b004      	add	sp, #16
   126ba:	bd80      	pop	{r7, pc}

000126bc <_i2c_master_wait_for_sync>:
 *
 * \param[in]  module  Pointer to software module structure
 */
static void _i2c_master_wait_for_sync(
		const struct i2c_master_module *const module)
{
   126bc:	b580      	push	{r7, lr}
   126be:	b082      	sub	sp, #8
   126c0:	af00      	add	r7, sp, #0
   126c2:	6078      	str	r0, [r7, #4]
	/* Sanity check */
	Assert(module);

	while (i2c_master_is_syncing(module)) {
   126c4:	46c0      	nop			; (mov r8, r8)
   126c6:	687b      	ldr	r3, [r7, #4]
   126c8:	0018      	movs	r0, r3
   126ca:	4b04      	ldr	r3, [pc, #16]	; (126dc <_i2c_master_wait_for_sync+0x20>)
   126cc:	4798      	blx	r3
   126ce:	1e03      	subs	r3, r0, #0
   126d0:	d1f9      	bne.n	126c6 <_i2c_master_wait_for_sync+0xa>
		/* Wait for I2C module to sync. */
	}
}
   126d2:	46c0      	nop			; (mov r8, r8)
   126d4:	46bd      	mov	sp, r7
   126d6:	b002      	add	sp, #8
   126d8:	bd80      	pop	{r7, pc}
   126da:	46c0      	nop			; (mov r8, r8)
   126dc:	00012699 	.word	0x00012699

000126e0 <_i2c_master_read>:
 *
 * \param[in,out] module  Pointer to software module structure
 */
static void _i2c_master_read(
		struct i2c_master_module *const module)
{
   126e0:	b580      	push	{r7, lr}
   126e2:	b084      	sub	sp, #16
   126e4:	af00      	add	r7, sp, #0
   126e6:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments. */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
   126e8:	687b      	ldr	r3, [r7, #4]
   126ea:	681b      	ldr	r3, [r3, #0]
   126ec:	60fb      	str	r3, [r7, #12]
	bool sclsm_flag = i2c_module->CTRLA.bit.SCLSM;
   126ee:	68fb      	ldr	r3, [r7, #12]
   126f0:	681b      	ldr	r3, [r3, #0]
   126f2:	011b      	lsls	r3, r3, #4
   126f4:	0fdb      	lsrs	r3, r3, #31
   126f6:	b2db      	uxtb	r3, r3
   126f8:	001a      	movs	r2, r3
   126fa:	230b      	movs	r3, #11
   126fc:	18fb      	adds	r3, r7, r3
   126fe:	1e51      	subs	r1, r2, #1
   12700:	418a      	sbcs	r2, r1
   12702:	701a      	strb	r2, [r3, #0]

	/* Find index to save next value in buffer */
	uint16_t buffer_index = module->buffer_length;
   12704:	2308      	movs	r3, #8
   12706:	18fb      	adds	r3, r7, r3
   12708:	687a      	ldr	r2, [r7, #4]
   1270a:	8b52      	ldrh	r2, [r2, #26]
   1270c:	801a      	strh	r2, [r3, #0]
	buffer_index -= module->buffer_remaining;
   1270e:	687b      	ldr	r3, [r7, #4]
   12710:	8b9b      	ldrh	r3, [r3, #28]
   12712:	b29a      	uxth	r2, r3
   12714:	2308      	movs	r3, #8
   12716:	18fb      	adds	r3, r7, r3
   12718:	2108      	movs	r1, #8
   1271a:	1879      	adds	r1, r7, r1
   1271c:	8809      	ldrh	r1, [r1, #0]
   1271e:	1a8a      	subs	r2, r1, r2
   12720:	801a      	strh	r2, [r3, #0]

	module->buffer_remaining--;
   12722:	687b      	ldr	r3, [r7, #4]
   12724:	8b9b      	ldrh	r3, [r3, #28]
   12726:	b29b      	uxth	r3, r3
   12728:	3b01      	subs	r3, #1
   1272a:	b29a      	uxth	r2, r3
   1272c:	687b      	ldr	r3, [r7, #4]
   1272e:	839a      	strh	r2, [r3, #28]

	if (sclsm_flag) {
   12730:	230b      	movs	r3, #11
   12732:	18fb      	adds	r3, r7, r3
   12734:	781b      	ldrb	r3, [r3, #0]
   12736:	2b00      	cmp	r3, #0
   12738:	d010      	beq.n	1275c <_i2c_master_read+0x7c>
		if (module->send_nack && module->buffer_remaining == 1) {
   1273a:	687b      	ldr	r3, [r7, #4]
   1273c:	7adb      	ldrb	r3, [r3, #11]
   1273e:	2b00      	cmp	r3, #0
   12740:	d01c      	beq.n	1277c <_i2c_master_read+0x9c>
   12742:	687b      	ldr	r3, [r7, #4]
   12744:	8b9b      	ldrh	r3, [r3, #28]
   12746:	b29b      	uxth	r3, r3
   12748:	2b01      	cmp	r3, #1
   1274a:	d117      	bne.n	1277c <_i2c_master_read+0x9c>
			/* Set action to NACK. */
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
   1274c:	68fb      	ldr	r3, [r7, #12]
   1274e:	685b      	ldr	r3, [r3, #4]
   12750:	2280      	movs	r2, #128	; 0x80
   12752:	02d2      	lsls	r2, r2, #11
   12754:	431a      	orrs	r2, r3
   12756:	68fb      	ldr	r3, [r7, #12]
   12758:	605a      	str	r2, [r3, #4]
   1275a:	e00f      	b.n	1277c <_i2c_master_read+0x9c>
		}
	} else {
		if (module->send_nack && module->buffer_remaining == 0) {
   1275c:	687b      	ldr	r3, [r7, #4]
   1275e:	7adb      	ldrb	r3, [r3, #11]
   12760:	2b00      	cmp	r3, #0
   12762:	d00b      	beq.n	1277c <_i2c_master_read+0x9c>
   12764:	687b      	ldr	r3, [r7, #4]
   12766:	8b9b      	ldrh	r3, [r3, #28]
   12768:	b29b      	uxth	r3, r3
   1276a:	2b00      	cmp	r3, #0
   1276c:	d106      	bne.n	1277c <_i2c_master_read+0x9c>
			/* Set action to NACK. */
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
   1276e:	68fb      	ldr	r3, [r7, #12]
   12770:	685b      	ldr	r3, [r3, #4]
   12772:	2280      	movs	r2, #128	; 0x80
   12774:	02d2      	lsls	r2, r2, #11
   12776:	431a      	orrs	r2, r3
   12778:	68fb      	ldr	r3, [r7, #12]
   1277a:	605a      	str	r2, [r3, #4]
		}
	}

	if (module->buffer_remaining == 0) {
   1277c:	687b      	ldr	r3, [r7, #4]
   1277e:	8b9b      	ldrh	r3, [r3, #28]
   12780:	b29b      	uxth	r3, r3
   12782:	2b00      	cmp	r3, #0
   12784:	d10e      	bne.n	127a4 <_i2c_master_read+0xc4>
		if (module->send_stop) {
   12786:	687b      	ldr	r3, [r7, #4]
   12788:	7a9b      	ldrb	r3, [r3, #10]
   1278a:	2b00      	cmp	r3, #0
   1278c:	d00a      	beq.n	127a4 <_i2c_master_read+0xc4>
			/* Send stop condition */
			_i2c_master_wait_for_sync(module);
   1278e:	687b      	ldr	r3, [r7, #4]
   12790:	0018      	movs	r0, r3
   12792:	4b0e      	ldr	r3, [pc, #56]	; (127cc <_i2c_master_read+0xec>)
   12794:	4798      	blx	r3
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
   12796:	68fb      	ldr	r3, [r7, #12]
   12798:	685b      	ldr	r3, [r3, #4]
   1279a:	22c0      	movs	r2, #192	; 0xc0
   1279c:	0292      	lsls	r2, r2, #10
   1279e:	431a      	orrs	r2, r3
   127a0:	68fb      	ldr	r3, [r7, #12]
   127a2:	605a      	str	r2, [r3, #4]
		}
	}
	
	/* Read byte from slave and put in buffer */
	_i2c_master_wait_for_sync(module);
   127a4:	687b      	ldr	r3, [r7, #4]
   127a6:	0018      	movs	r0, r3
   127a8:	4b08      	ldr	r3, [pc, #32]	; (127cc <_i2c_master_read+0xec>)
   127aa:	4798      	blx	r3
	module->buffer[buffer_index] = i2c_module->DATA.reg;
   127ac:	687b      	ldr	r3, [r7, #4]
   127ae:	6a1a      	ldr	r2, [r3, #32]
   127b0:	2308      	movs	r3, #8
   127b2:	18fb      	adds	r3, r7, r3
   127b4:	881b      	ldrh	r3, [r3, #0]
   127b6:	18d3      	adds	r3, r2, r3
   127b8:	68fa      	ldr	r2, [r7, #12]
   127ba:	2128      	movs	r1, #40	; 0x28
   127bc:	5c52      	ldrb	r2, [r2, r1]
   127be:	b2d2      	uxtb	r2, r2
   127c0:	701a      	strb	r2, [r3, #0]
}
   127c2:	46c0      	nop			; (mov r8, r8)
   127c4:	46bd      	mov	sp, r7
   127c6:	b004      	add	sp, #16
   127c8:	bd80      	pop	{r7, pc}
   127ca:	46c0      	nop			; (mov r8, r8)
   127cc:	000126bd 	.word	0x000126bd

000127d0 <_i2c_master_write>:
 * Write next data. Used by interrupt handler to send next data byte to slave.
 *
 * \param[in,out] module  Pointer to software module structure
 */
static void _i2c_master_write(struct i2c_master_module *const module)
{
   127d0:	b580      	push	{r7, lr}
   127d2:	b084      	sub	sp, #16
   127d4:	af00      	add	r7, sp, #0
   127d6:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments. */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
   127d8:	687b      	ldr	r3, [r7, #4]
   127da:	681b      	ldr	r3, [r3, #0]
   127dc:	60fb      	str	r3, [r7, #12]

	/* Check for ack from slave */
	if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_RXNACK)
   127de:	68fb      	ldr	r3, [r7, #12]
   127e0:	8b5b      	ldrh	r3, [r3, #26]
   127e2:	b29b      	uxth	r3, r3
   127e4:	001a      	movs	r2, r3
   127e6:	2304      	movs	r3, #4
   127e8:	4013      	ands	r3, r2
   127ea:	d004      	beq.n	127f6 <_i2c_master_write+0x26>
	{
		/* Set status */
		module->status = STATUS_ERR_OVERFLOW;
   127ec:	687b      	ldr	r3, [r7, #4]
   127ee:	2225      	movs	r2, #37	; 0x25
   127f0:	211e      	movs	r1, #30
   127f2:	5499      	strb	r1, [r3, r2]
		/* Do not write more data */
		return;
   127f4:	e024      	b.n	12840 <_i2c_master_write+0x70>
	}

	/* Find index to get next byte in buffer */
	uint16_t buffer_index = module->buffer_length;
   127f6:	230a      	movs	r3, #10
   127f8:	18fb      	adds	r3, r7, r3
   127fa:	687a      	ldr	r2, [r7, #4]
   127fc:	8b52      	ldrh	r2, [r2, #26]
   127fe:	801a      	strh	r2, [r3, #0]
	buffer_index -= module->buffer_remaining;
   12800:	687b      	ldr	r3, [r7, #4]
   12802:	8b9b      	ldrh	r3, [r3, #28]
   12804:	b29a      	uxth	r2, r3
   12806:	230a      	movs	r3, #10
   12808:	18fb      	adds	r3, r7, r3
   1280a:	210a      	movs	r1, #10
   1280c:	1879      	adds	r1, r7, r1
   1280e:	8809      	ldrh	r1, [r1, #0]
   12810:	1a8a      	subs	r2, r1, r2
   12812:	801a      	strh	r2, [r3, #0]

	module->buffer_remaining--;
   12814:	687b      	ldr	r3, [r7, #4]
   12816:	8b9b      	ldrh	r3, [r3, #28]
   12818:	b29b      	uxth	r3, r3
   1281a:	3b01      	subs	r3, #1
   1281c:	b29a      	uxth	r2, r3
   1281e:	687b      	ldr	r3, [r7, #4]
   12820:	839a      	strh	r2, [r3, #28]

	/* Write byte from buffer to slave */
	_i2c_master_wait_for_sync(module);
   12822:	687b      	ldr	r3, [r7, #4]
   12824:	0018      	movs	r0, r3
   12826:	4b08      	ldr	r3, [pc, #32]	; (12848 <_i2c_master_write+0x78>)
   12828:	4798      	blx	r3
	i2c_module->DATA.reg = module->buffer[buffer_index];
   1282a:	687b      	ldr	r3, [r7, #4]
   1282c:	6a1a      	ldr	r2, [r3, #32]
   1282e:	230a      	movs	r3, #10
   12830:	18fb      	adds	r3, r7, r3
   12832:	881b      	ldrh	r3, [r3, #0]
   12834:	18d3      	adds	r3, r2, r3
   12836:	781b      	ldrb	r3, [r3, #0]
   12838:	b2d9      	uxtb	r1, r3
   1283a:	68fb      	ldr	r3, [r7, #12]
   1283c:	2228      	movs	r2, #40	; 0x28
   1283e:	5499      	strb	r1, [r3, r2]
}
   12840:	46bd      	mov	sp, r7
   12842:	b004      	add	sp, #16
   12844:	bd80      	pop	{r7, pc}
   12846:	46c0      	nop			; (mov r8, r8)
   12848:	000126bd 	.word	0x000126bd

0001284c <_i2c_master_async_address_response>:
 *
 * \param[in,out] module  Pointer to software module structure
 */
static void _i2c_master_async_address_response(
		struct i2c_master_module *const module)
{
   1284c:	b580      	push	{r7, lr}
   1284e:	b084      	sub	sp, #16
   12850:	af00      	add	r7, sp, #0
   12852:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments. */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
   12854:	687b      	ldr	r3, [r7, #4]
   12856:	681b      	ldr	r3, [r3, #0]
   12858:	60fb      	str	r3, [r7, #12]

	/* Check for error. Ignore bus-error; workaround for bus state stuck in
	 * BUSY.
	 */
	if (i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB)
   1285a:	68fb      	ldr	r3, [r7, #12]
   1285c:	7e1b      	ldrb	r3, [r3, #24]
   1285e:	b2db      	uxtb	r3, r3
   12860:	001a      	movs	r2, r3
   12862:	2301      	movs	r3, #1
   12864:	4013      	ands	r3, r2
   12866:	d02b      	beq.n	128c0 <_i2c_master_async_address_response+0x74>
	{
		/* Clear write interrupt flag */
		i2c_module->INTFLAG.reg = SERCOM_I2CM_INTENCLR_MB;
   12868:	68fb      	ldr	r3, [r7, #12]
   1286a:	2201      	movs	r2, #1
   1286c:	761a      	strb	r2, [r3, #24]

		/* Check arbitration */
		if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_ARBLOST) {
   1286e:	68fb      	ldr	r3, [r7, #12]
   12870:	8b5b      	ldrh	r3, [r3, #26]
   12872:	b29b      	uxth	r3, r3
   12874:	001a      	movs	r2, r3
   12876:	2302      	movs	r3, #2
   12878:	4013      	ands	r3, r2
   1287a:	d004      	beq.n	12886 <_i2c_master_async_address_response+0x3a>
			/* Return busy */
			module->status = STATUS_ERR_PACKET_COLLISION;
   1287c:	687b      	ldr	r3, [r7, #4]
   1287e:	2225      	movs	r2, #37	; 0x25
   12880:	2141      	movs	r1, #65	; 0x41
   12882:	5499      	strb	r1, [r3, r2]
   12884:	e01c      	b.n	128c0 <_i2c_master_async_address_response+0x74>
		}
		/* No slave responds */
		else if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_RXNACK) {
   12886:	68fb      	ldr	r3, [r7, #12]
   12888:	8b5b      	ldrh	r3, [r3, #26]
   1288a:	b29b      	uxth	r3, r3
   1288c:	001a      	movs	r2, r3
   1288e:	2304      	movs	r3, #4
   12890:	4013      	ands	r3, r2
   12892:	d015      	beq.n	128c0 <_i2c_master_async_address_response+0x74>
			module->status           = STATUS_ERR_BAD_ADDRESS;
   12894:	687b      	ldr	r3, [r7, #4]
   12896:	2225      	movs	r2, #37	; 0x25
   12898:	2118      	movs	r1, #24
   1289a:	5499      	strb	r1, [r3, r2]
			module->buffer_remaining = 0;
   1289c:	687b      	ldr	r3, [r7, #4]
   1289e:	2200      	movs	r2, #0
   128a0:	839a      	strh	r2, [r3, #28]

			if (module->send_stop) {
   128a2:	687b      	ldr	r3, [r7, #4]
   128a4:	7a9b      	ldrb	r3, [r3, #10]
   128a6:	2b00      	cmp	r3, #0
   128a8:	d00a      	beq.n	128c0 <_i2c_master_async_address_response+0x74>
				/* Send stop condition */
				_i2c_master_wait_for_sync(module);
   128aa:	687b      	ldr	r3, [r7, #4]
   128ac:	0018      	movs	r0, r3
   128ae:	4b13      	ldr	r3, [pc, #76]	; (128fc <_i2c_master_async_address_response+0xb0>)
   128b0:	4798      	blx	r3
				i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
   128b2:	68fb      	ldr	r3, [r7, #12]
   128b4:	685b      	ldr	r3, [r3, #4]
   128b6:	22c0      	movs	r2, #192	; 0xc0
   128b8:	0292      	lsls	r2, r2, #10
   128ba:	431a      	orrs	r2, r3
   128bc:	68fb      	ldr	r3, [r7, #12]
   128be:	605a      	str	r2, [r3, #4]
			}
		}
	}

	module->buffer_length = module->buffer_remaining;
   128c0:	687b      	ldr	r3, [r7, #4]
   128c2:	8b9b      	ldrh	r3, [r3, #28]
   128c4:	b29a      	uxth	r2, r3
   128c6:	687b      	ldr	r3, [r7, #4]
   128c8:	835a      	strh	r2, [r3, #26]

	/* Check for status OK. */
	if (module->status == STATUS_BUSY) {
   128ca:	687b      	ldr	r3, [r7, #4]
   128cc:	2225      	movs	r2, #37	; 0x25
   128ce:	5c9b      	ldrb	r3, [r3, r2]
   128d0:	b2db      	uxtb	r3, r3
   128d2:	2b05      	cmp	r3, #5
   128d4:	d10e      	bne.n	128f4 <_i2c_master_async_address_response+0xa8>
		/* Call function based on transfer direction. */
		if (module->transfer_direction == I2C_TRANSFER_WRITE) {
   128d6:	687b      	ldr	r3, [r7, #4]
   128d8:	2224      	movs	r2, #36	; 0x24
   128da:	5c9b      	ldrb	r3, [r3, r2]
   128dc:	b2db      	uxtb	r3, r3
   128de:	2b00      	cmp	r3, #0
   128e0:	d104      	bne.n	128ec <_i2c_master_async_address_response+0xa0>
			_i2c_master_write(module);
   128e2:	687b      	ldr	r3, [r7, #4]
   128e4:	0018      	movs	r0, r3
   128e6:	4b06      	ldr	r3, [pc, #24]	; (12900 <_i2c_master_async_address_response+0xb4>)
   128e8:	4798      	blx	r3
		} else {
			_i2c_master_read(module);
		}
	}
}
   128ea:	e003      	b.n	128f4 <_i2c_master_async_address_response+0xa8>
			_i2c_master_read(module);
   128ec:	687b      	ldr	r3, [r7, #4]
   128ee:	0018      	movs	r0, r3
   128f0:	4b04      	ldr	r3, [pc, #16]	; (12904 <_i2c_master_async_address_response+0xb8>)
   128f2:	4798      	blx	r3
}
   128f4:	46c0      	nop			; (mov r8, r8)
   128f6:	46bd      	mov	sp, r7
   128f8:	b004      	add	sp, #16
   128fa:	bd80      	pop	{r7, pc}
   128fc:	000126bd 	.word	0x000126bd
   12900:	000127d1 	.word	0x000127d1
   12904:	000126e1 	.word	0x000126e1

00012908 <i2c_master_register_callback>:
 */
void i2c_master_register_callback(
		struct i2c_master_module *const module,
		const i2c_master_callback_t callback,
		enum i2c_master_callback callback_type)
{
   12908:	b580      	push	{r7, lr}
   1290a:	b084      	sub	sp, #16
   1290c:	af00      	add	r7, sp, #0
   1290e:	60f8      	str	r0, [r7, #12]
   12910:	60b9      	str	r1, [r7, #8]
   12912:	1dfb      	adds	r3, r7, #7
   12914:	701a      	strb	r2, [r3, #0]
	Assert(module);
	Assert(module->hw);
	Assert(callback);

	/* Register callback */
	module->callbacks[callback_type] = callback;
   12916:	1dfb      	adds	r3, r7, #7
   12918:	781b      	ldrb	r3, [r3, #0]
   1291a:	68fa      	ldr	r2, [r7, #12]
   1291c:	3302      	adds	r3, #2
   1291e:	009b      	lsls	r3, r3, #2
   12920:	18d3      	adds	r3, r2, r3
   12922:	3304      	adds	r3, #4
   12924:	68ba      	ldr	r2, [r7, #8]
   12926:	601a      	str	r2, [r3, #0]

	/* Set corresponding bit to set callback as registered */
	module->registered_callback |= (1 << callback_type);
   12928:	68fb      	ldr	r3, [r7, #12]
   1292a:	7e1b      	ldrb	r3, [r3, #24]
   1292c:	b2db      	uxtb	r3, r3
   1292e:	b25a      	sxtb	r2, r3
   12930:	1dfb      	adds	r3, r7, #7
   12932:	781b      	ldrb	r3, [r3, #0]
   12934:	2101      	movs	r1, #1
   12936:	4099      	lsls	r1, r3
   12938:	000b      	movs	r3, r1
   1293a:	b25b      	sxtb	r3, r3
   1293c:	4313      	orrs	r3, r2
   1293e:	b25b      	sxtb	r3, r3
   12940:	b2da      	uxtb	r2, r3
   12942:	68fb      	ldr	r3, [r7, #12]
   12944:	761a      	strb	r2, [r3, #24]
}
   12946:	46c0      	nop			; (mov r8, r8)
   12948:	46bd      	mov	sp, r7
   1294a:	b004      	add	sp, #16
   1294c:	bd80      	pop	{r7, pc}
	...

00012950 <_i2c_master_read_packet>:
 * \retval STATUS_BUSY  If module is currently busy with another transfer
 */
static enum status_code _i2c_master_read_packet(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
   12950:	b590      	push	{r4, r7, lr}
   12952:	b087      	sub	sp, #28
   12954:	af00      	add	r7, sp, #0
   12956:	6078      	str	r0, [r7, #4]
   12958:	6039      	str	r1, [r7, #0]
	/* Sanity check */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
   1295a:	687b      	ldr	r3, [r7, #4]
   1295c:	681b      	ldr	r3, [r3, #0]
   1295e:	613b      	str	r3, [r7, #16]
	enum status_code tmp_status;

	/* Save packet to software module */
	module->buffer             = packet->data;
   12960:	683b      	ldr	r3, [r7, #0]
   12962:	685a      	ldr	r2, [r3, #4]
   12964:	687b      	ldr	r3, [r7, #4]
   12966:	621a      	str	r2, [r3, #32]
	module->buffer_remaining   = packet->data_length;
   12968:	683b      	ldr	r3, [r7, #0]
   1296a:	885a      	ldrh	r2, [r3, #2]
   1296c:	687b      	ldr	r3, [r7, #4]
   1296e:	839a      	strh	r2, [r3, #28]
	module->transfer_direction = I2C_TRANSFER_READ;
   12970:	687b      	ldr	r3, [r7, #4]
   12972:	2224      	movs	r2, #36	; 0x24
   12974:	2101      	movs	r1, #1
   12976:	5499      	strb	r1, [r3, r2]
	module->status             = STATUS_BUSY;
   12978:	687b      	ldr	r3, [r7, #4]
   1297a:	2225      	movs	r2, #37	; 0x25
   1297c:	2105      	movs	r1, #5
   1297e:	5499      	strb	r1, [r3, r2]

	bool sclsm_flag = i2c_module->CTRLA.bit.SCLSM;
   12980:	693b      	ldr	r3, [r7, #16]
   12982:	681b      	ldr	r3, [r3, #0]
   12984:	011b      	lsls	r3, r3, #4
   12986:	0fdb      	lsrs	r3, r3, #31
   12988:	b2db      	uxtb	r3, r3
   1298a:	001a      	movs	r2, r3
   1298c:	230f      	movs	r3, #15
   1298e:	18fb      	adds	r3, r7, r3
   12990:	1e51      	subs	r1, r2, #1
   12992:	418a      	sbcs	r2, r1
   12994:	701a      	strb	r2, [r3, #0]

	/* Switch to high speed mode */
	if (packet->high_speed) {
   12996:	683b      	ldr	r3, [r7, #0]
   12998:	7a5b      	ldrb	r3, [r3, #9]
   1299a:	2b00      	cmp	r3, #0
   1299c:	d006      	beq.n	129ac <_i2c_master_read_packet+0x5c>
		_i2c_master_send_hs_master_code(module, packet->hs_master_code);
   1299e:	683b      	ldr	r3, [r7, #0]
   129a0:	7a9a      	ldrb	r2, [r3, #10]
   129a2:	687b      	ldr	r3, [r7, #4]
   129a4:	0011      	movs	r1, r2
   129a6:	0018      	movs	r0, r3
   129a8:	4b3b      	ldr	r3, [pc, #236]	; (12a98 <_i2c_master_read_packet+0x148>)
   129aa:	4798      	blx	r3
	}

	/* Set action to ACK or NACK. */
	if ((sclsm_flag) && (packet->data_length == 1)) {
   129ac:	230f      	movs	r3, #15
   129ae:	18fb      	adds	r3, r7, r3
   129b0:	781b      	ldrb	r3, [r3, #0]
   129b2:	2b00      	cmp	r3, #0
   129b4:	d00b      	beq.n	129ce <_i2c_master_read_packet+0x7e>
   129b6:	683b      	ldr	r3, [r7, #0]
   129b8:	885b      	ldrh	r3, [r3, #2]
   129ba:	2b01      	cmp	r3, #1
   129bc:	d107      	bne.n	129ce <_i2c_master_read_packet+0x7e>
		i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
   129be:	693b      	ldr	r3, [r7, #16]
   129c0:	685b      	ldr	r3, [r3, #4]
   129c2:	2280      	movs	r2, #128	; 0x80
   129c4:	02d2      	lsls	r2, r2, #11
   129c6:	431a      	orrs	r2, r3
   129c8:	693b      	ldr	r3, [r7, #16]
   129ca:	605a      	str	r2, [r3, #4]
   129cc:	e005      	b.n	129da <_i2c_master_read_packet+0x8a>
	} else {
		i2c_module->CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;
   129ce:	693b      	ldr	r3, [r7, #16]
   129d0:	685b      	ldr	r3, [r3, #4]
   129d2:	4a32      	ldr	r2, [pc, #200]	; (12a9c <_i2c_master_read_packet+0x14c>)
   129d4:	401a      	ands	r2, r3
   129d6:	693b      	ldr	r3, [r7, #16]
   129d8:	605a      	str	r2, [r3, #4]
	}

	if (packet->ten_bit_address) {
   129da:	683b      	ldr	r3, [r7, #0]
   129dc:	7a1b      	ldrb	r3, [r3, #8]
   129de:	2b00      	cmp	r3, #0
   129e0:	d045      	beq.n	12a6e <_i2c_master_read_packet+0x11e>
		/*
		 * Write ADDR.ADDR[10:1] with the 10-bit address. ADDR.TENBITEN must
		 * be set and read/write bit (ADDR.ADDR[0]) equal to 0.
		 */
		i2c_module->ADDR.reg = (packet->address << 1) |
   129e2:	683b      	ldr	r3, [r7, #0]
   129e4:	881b      	ldrh	r3, [r3, #0]
   129e6:	005a      	lsls	r2, r3, #1
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
   129e8:	683b      	ldr	r3, [r7, #0]
   129ea:	7a5b      	ldrb	r3, [r3, #9]
   129ec:	039b      	lsls	r3, r3, #14
		i2c_module->ADDR.reg = (packet->address << 1) |
   129ee:	4313      	orrs	r3, r2
   129f0:	001a      	movs	r2, r3
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
   129f2:	2380      	movs	r3, #128	; 0x80
   129f4:	021b      	lsls	r3, r3, #8
   129f6:	431a      	orrs	r2, r3
		i2c_module->ADDR.reg = (packet->address << 1) |
   129f8:	693b      	ldr	r3, [r7, #16]
   129fa:	625a      	str	r2, [r3, #36]	; 0x24
			SERCOM_I2CM_ADDR_TENBITEN;

		/* Wait for response on bus. */
		tmp_status = _i2c_master_wait_for_bus(module);
   129fc:	2317      	movs	r3, #23
   129fe:	18fc      	adds	r4, r7, r3
   12a00:	687b      	ldr	r3, [r7, #4]
   12a02:	0018      	movs	r0, r3
   12a04:	4b26      	ldr	r3, [pc, #152]	; (12aa0 <_i2c_master_read_packet+0x150>)
   12a06:	4798      	blx	r3
   12a08:	0003      	movs	r3, r0
   12a0a:	7023      	strb	r3, [r4, #0]

		/* Set action to ack. */
		i2c_module->CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;
   12a0c:	693b      	ldr	r3, [r7, #16]
   12a0e:	685b      	ldr	r3, [r3, #4]
   12a10:	4a22      	ldr	r2, [pc, #136]	; (12a9c <_i2c_master_read_packet+0x14c>)
   12a12:	401a      	ands	r2, r3
   12a14:	693b      	ldr	r3, [r7, #16]
   12a16:	605a      	str	r2, [r3, #4]

		/* Check for address response error unless previous error is
		 * detected. */
		if (tmp_status == STATUS_OK) {
   12a18:	2317      	movs	r3, #23
   12a1a:	18fb      	adds	r3, r7, r3
   12a1c:	781b      	ldrb	r3, [r3, #0]
   12a1e:	2b00      	cmp	r3, #0
   12a20:	d107      	bne.n	12a32 <_i2c_master_read_packet+0xe2>
			tmp_status = _i2c_master_address_response(module);
   12a22:	2317      	movs	r3, #23
   12a24:	18fc      	adds	r4, r7, r3
   12a26:	687b      	ldr	r3, [r7, #4]
   12a28:	0018      	movs	r0, r3
   12a2a:	4b1e      	ldr	r3, [pc, #120]	; (12aa4 <_i2c_master_read_packet+0x154>)
   12a2c:	4798      	blx	r3
   12a2e:	0003      	movs	r3, r0
   12a30:	7023      	strb	r3, [r4, #0]
		}

		if (tmp_status == STATUS_OK) {
   12a32:	2317      	movs	r3, #23
   12a34:	18fb      	adds	r3, r7, r3
   12a36:	781b      	ldrb	r3, [r3, #0]
   12a38:	2b00      	cmp	r3, #0
   12a3a:	d114      	bne.n	12a66 <_i2c_master_read_packet+0x116>
			/* Enable interrupts */
			i2c_module->INTENSET.reg =
   12a3c:	693b      	ldr	r3, [r7, #16]
   12a3e:	2203      	movs	r2, #3
   12a40:	759a      	strb	r2, [r3, #22]

			/*
			 * Write ADDR[7:0] register to "11110 address[9:8] 1"
			 * ADDR.TENBITEN must be cleared
			 */
			i2c_module->ADDR.reg = (((packet->address >> 8) | 0x78) << 1) |
   12a42:	683b      	ldr	r3, [r7, #0]
   12a44:	881b      	ldrh	r3, [r3, #0]
   12a46:	0a1b      	lsrs	r3, r3, #8
   12a48:	b29b      	uxth	r3, r3
   12a4a:	2278      	movs	r2, #120	; 0x78
   12a4c:	4313      	orrs	r3, r2
   12a4e:	b29b      	uxth	r3, r3
   12a50:	005a      	lsls	r2, r3, #1
				(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
   12a52:	683b      	ldr	r3, [r7, #0]
   12a54:	7a5b      	ldrb	r3, [r3, #9]
   12a56:	039b      	lsls	r3, r3, #14
			i2c_module->ADDR.reg = (((packet->address >> 8) | 0x78) << 1) |
   12a58:	4313      	orrs	r3, r2
				(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
   12a5a:	2201      	movs	r2, #1
   12a5c:	4313      	orrs	r3, r2
   12a5e:	001a      	movs	r2, r3
			i2c_module->ADDR.reg = (((packet->address >> 8) | 0x78) << 1) |
   12a60:	693b      	ldr	r3, [r7, #16]
   12a62:	625a      	str	r2, [r3, #36]	; 0x24
   12a64:	e012      	b.n	12a8c <_i2c_master_read_packet+0x13c>
				I2C_TRANSFER_READ;
		} else {
			return tmp_status;
   12a66:	2317      	movs	r3, #23
   12a68:	18fb      	adds	r3, r7, r3
   12a6a:	781b      	ldrb	r3, [r3, #0]
   12a6c:	e00f      	b.n	12a8e <_i2c_master_read_packet+0x13e>
		}
	} else {
		/* Enable interrupts */
		i2c_module->INTENSET.reg =
   12a6e:	693b      	ldr	r3, [r7, #16]
   12a70:	2203      	movs	r2, #3
   12a72:	759a      	strb	r2, [r3, #22]
			SERCOM_I2CM_INTENSET_MB | SERCOM_I2CM_INTENSET_SB;

		/* Set address and direction bit. Will send start command on bus */
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_READ |
   12a74:	683b      	ldr	r3, [r7, #0]
   12a76:	881b      	ldrh	r3, [r3, #0]
   12a78:	005b      	lsls	r3, r3, #1
   12a7a:	2201      	movs	r2, #1
   12a7c:	431a      	orrs	r2, r3
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos);
   12a7e:	683b      	ldr	r3, [r7, #0]
   12a80:	7a5b      	ldrb	r3, [r3, #9]
   12a82:	039b      	lsls	r3, r3, #14
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_READ |
   12a84:	4313      	orrs	r3, r2
   12a86:	001a      	movs	r2, r3
   12a88:	693b      	ldr	r3, [r7, #16]
   12a8a:	625a      	str	r2, [r3, #36]	; 0x24
	}

	return STATUS_OK;
   12a8c:	2300      	movs	r3, #0
}
   12a8e:	0018      	movs	r0, r3
   12a90:	46bd      	mov	sp, r7
   12a92:	b007      	add	sp, #28
   12a94:	bd90      	pop	{r4, r7, pc}
   12a96:	46c0      	nop			; (mov r8, r8)
   12a98:	000164a5 	.word	0x000164a5
   12a9c:	fffbffff 	.word	0xfffbffff
   12aa0:	00016447 	.word	0x00016447
   12aa4:	000163e9 	.word	0x000163e9

00012aa8 <i2c_master_read_packet_job>:
 * \retval STATUS_BUSY  If module is currently busy with another transfer
 */
enum status_code i2c_master_read_packet_job(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
   12aa8:	b580      	push	{r7, lr}
   12aaa:	b082      	sub	sp, #8
   12aac:	af00      	add	r7, sp, #0
   12aae:	6078      	str	r0, [r7, #4]
   12ab0:	6039      	str	r1, [r7, #0]
	Assert(module);
	Assert(module->hw);
	Assert(packet);

	/* Check if the I2C module is busy with a job */
	if (module->buffer_remaining > 0) {
   12ab2:	687b      	ldr	r3, [r7, #4]
   12ab4:	8b9b      	ldrh	r3, [r3, #28]
   12ab6:	b29b      	uxth	r3, r3
   12ab8:	2b00      	cmp	r3, #0
   12aba:	d001      	beq.n	12ac0 <i2c_master_read_packet_job+0x18>
		return STATUS_BUSY;
   12abc:	2305      	movs	r3, #5
   12abe:	e00c      	b.n	12ada <i2c_master_read_packet_job+0x32>
	}

	/* Make sure we send STOP */
	module->send_stop = true;
   12ac0:	687b      	ldr	r3, [r7, #4]
   12ac2:	2201      	movs	r2, #1
   12ac4:	729a      	strb	r2, [r3, #10]
	module->send_nack = true;
   12ac6:	687b      	ldr	r3, [r7, #4]
   12ac8:	2201      	movs	r2, #1
   12aca:	72da      	strb	r2, [r3, #11]
	/* Start reading */
	return _i2c_master_read_packet(module, packet);
   12acc:	683a      	ldr	r2, [r7, #0]
   12ace:	687b      	ldr	r3, [r7, #4]
   12ad0:	0011      	movs	r1, r2
   12ad2:	0018      	movs	r0, r3
   12ad4:	4b03      	ldr	r3, [pc, #12]	; (12ae4 <i2c_master_read_packet_job+0x3c>)
   12ad6:	4798      	blx	r3
   12ad8:	0003      	movs	r3, r0
}
   12ada:	0018      	movs	r0, r3
   12adc:	46bd      	mov	sp, r7
   12ade:	b002      	add	sp, #8
   12ae0:	bd80      	pop	{r7, pc}
   12ae2:	46c0      	nop			; (mov r8, r8)
   12ae4:	00012951 	.word	0x00012951

00012ae8 <_i2c_master_write_packet>:
 * \retval STATUS_BUSY If module is currently busy with another transfer
 */
static enum status_code _i2c_master_write_packet(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
   12ae8:	b580      	push	{r7, lr}
   12aea:	b084      	sub	sp, #16
   12aec:	af00      	add	r7, sp, #0
   12aee:	6078      	str	r0, [r7, #4]
   12af0:	6039      	str	r1, [r7, #0]
	/* Sanity check */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
   12af2:	687b      	ldr	r3, [r7, #4]
   12af4:	681b      	ldr	r3, [r3, #0]
   12af6:	60fb      	str	r3, [r7, #12]

	/* Switch to high speed mode */
	if (packet->high_speed) {
   12af8:	683b      	ldr	r3, [r7, #0]
   12afa:	7a5b      	ldrb	r3, [r3, #9]
   12afc:	2b00      	cmp	r3, #0
   12afe:	d006      	beq.n	12b0e <_i2c_master_write_packet+0x26>
		_i2c_master_send_hs_master_code(module, packet->hs_master_code);
   12b00:	683b      	ldr	r3, [r7, #0]
   12b02:	7a9a      	ldrb	r2, [r3, #10]
   12b04:	687b      	ldr	r3, [r7, #4]
   12b06:	0011      	movs	r1, r2
   12b08:	0018      	movs	r0, r3
   12b0a:	4b1e      	ldr	r3, [pc, #120]	; (12b84 <_i2c_master_write_packet+0x9c>)
   12b0c:	4798      	blx	r3
	}

	/* Set action to ACK. */
	i2c_module->CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;
   12b0e:	68fb      	ldr	r3, [r7, #12]
   12b10:	685b      	ldr	r3, [r3, #4]
   12b12:	4a1d      	ldr	r2, [pc, #116]	; (12b88 <_i2c_master_write_packet+0xa0>)
   12b14:	401a      	ands	r2, r3
   12b16:	68fb      	ldr	r3, [r7, #12]
   12b18:	605a      	str	r2, [r3, #4]

	/* Save packet to software module */
	module->buffer             = packet->data;
   12b1a:	683b      	ldr	r3, [r7, #0]
   12b1c:	685a      	ldr	r2, [r3, #4]
   12b1e:	687b      	ldr	r3, [r7, #4]
   12b20:	621a      	str	r2, [r3, #32]
	module->buffer_remaining   = packet->data_length;
   12b22:	683b      	ldr	r3, [r7, #0]
   12b24:	885a      	ldrh	r2, [r3, #2]
   12b26:	687b      	ldr	r3, [r7, #4]
   12b28:	839a      	strh	r2, [r3, #28]
	module->transfer_direction = I2C_TRANSFER_WRITE;
   12b2a:	687b      	ldr	r3, [r7, #4]
   12b2c:	2224      	movs	r2, #36	; 0x24
   12b2e:	2100      	movs	r1, #0
   12b30:	5499      	strb	r1, [r3, r2]
	module->status             = STATUS_BUSY;
   12b32:	687b      	ldr	r3, [r7, #4]
   12b34:	2225      	movs	r2, #37	; 0x25
   12b36:	2105      	movs	r1, #5
   12b38:	5499      	strb	r1, [r3, r2]

	/* Enable interrupts */
	i2c_module->INTENSET.reg =
   12b3a:	68fb      	ldr	r3, [r7, #12]
   12b3c:	2203      	movs	r2, #3
   12b3e:	759a      	strb	r2, [r3, #22]
			SERCOM_I2CM_INTENSET_MB | SERCOM_I2CM_INTENSET_SB;

	/* Set address and direction bit, will send start command on bus */
	if (packet->ten_bit_address) {
   12b40:	683b      	ldr	r3, [r7, #0]
   12b42:	7a1b      	ldrb	r3, [r3, #8]
   12b44:	2b00      	cmp	r3, #0
   12b46:	d00d      	beq.n	12b64 <_i2c_master_write_packet+0x7c>
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
   12b48:	683b      	ldr	r3, [r7, #0]
   12b4a:	881b      	ldrh	r3, [r3, #0]
   12b4c:	005a      	lsls	r2, r3, #1
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
   12b4e:	683b      	ldr	r3, [r7, #0]
   12b50:	7a5b      	ldrb	r3, [r3, #9]
   12b52:	039b      	lsls	r3, r3, #14
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
   12b54:	4313      	orrs	r3, r2
   12b56:	001a      	movs	r2, r3
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
   12b58:	2380      	movs	r3, #128	; 0x80
   12b5a:	021b      	lsls	r3, r3, #8
   12b5c:	431a      	orrs	r2, r3
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
   12b5e:	68fb      	ldr	r3, [r7, #12]
   12b60:	625a      	str	r2, [r3, #36]	; 0x24
   12b62:	e009      	b.n	12b78 <_i2c_master_write_packet+0x90>
			SERCOM_I2CM_ADDR_TENBITEN;
	} else {
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
   12b64:	683b      	ldr	r3, [r7, #0]
   12b66:	881b      	ldrh	r3, [r3, #0]
   12b68:	005a      	lsls	r2, r3, #1
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos);
   12b6a:	683b      	ldr	r3, [r7, #0]
   12b6c:	7a5b      	ldrb	r3, [r3, #9]
   12b6e:	039b      	lsls	r3, r3, #14
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
   12b70:	4313      	orrs	r3, r2
   12b72:	001a      	movs	r2, r3
   12b74:	68fb      	ldr	r3, [r7, #12]
   12b76:	625a      	str	r2, [r3, #36]	; 0x24
	}

	return STATUS_OK;
   12b78:	2300      	movs	r3, #0
}
   12b7a:	0018      	movs	r0, r3
   12b7c:	46bd      	mov	sp, r7
   12b7e:	b004      	add	sp, #16
   12b80:	bd80      	pop	{r7, pc}
   12b82:	46c0      	nop			; (mov r8, r8)
   12b84:	000164a5 	.word	0x000164a5
   12b88:	fffbffff 	.word	0xfffbffff

00012b8c <i2c_master_write_packet_job>:
 * \retval STATUS_BUSY  If module is currently busy with another transfer
 */
enum status_code i2c_master_write_packet_job(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
   12b8c:	b580      	push	{r7, lr}
   12b8e:	b082      	sub	sp, #8
   12b90:	af00      	add	r7, sp, #0
   12b92:	6078      	str	r0, [r7, #4]
   12b94:	6039      	str	r1, [r7, #0]
	Assert(module);
	Assert(module->hw);
	Assert(packet);

	/* Check if the I2C module is busy with another job. */
	if (module->buffer_remaining > 0) {
   12b96:	687b      	ldr	r3, [r7, #4]
   12b98:	8b9b      	ldrh	r3, [r3, #28]
   12b9a:	b29b      	uxth	r3, r3
   12b9c:	2b00      	cmp	r3, #0
   12b9e:	d001      	beq.n	12ba4 <i2c_master_write_packet_job+0x18>
		return STATUS_BUSY;
   12ba0:	2305      	movs	r3, #5
   12ba2:	e00c      	b.n	12bbe <i2c_master_write_packet_job+0x32>
	}

	/* Make sure we send STOP at end*/
	module->send_stop = true;
   12ba4:	687b      	ldr	r3, [r7, #4]
   12ba6:	2201      	movs	r2, #1
   12ba8:	729a      	strb	r2, [r3, #10]
	module->send_nack = true;
   12baa:	687b      	ldr	r3, [r7, #4]
   12bac:	2201      	movs	r2, #1
   12bae:	72da      	strb	r2, [r3, #11]
	/* Start write operation */
	return _i2c_master_write_packet(module, packet);
   12bb0:	683a      	ldr	r2, [r7, #0]
   12bb2:	687b      	ldr	r3, [r7, #4]
   12bb4:	0011      	movs	r1, r2
   12bb6:	0018      	movs	r0, r3
   12bb8:	4b03      	ldr	r3, [pc, #12]	; (12bc8 <i2c_master_write_packet_job+0x3c>)
   12bba:	4798      	blx	r3
   12bbc:	0003      	movs	r3, r0
}
   12bbe:	0018      	movs	r0, r3
   12bc0:	46bd      	mov	sp, r7
   12bc2:	b002      	add	sp, #8
   12bc4:	bd80      	pop	{r7, pc}
   12bc6:	46c0      	nop			; (mov r8, r8)
   12bc8:	00012ae9 	.word	0x00012ae9

00012bcc <_i2c_master_interrupt_handler>:
 *
 * \param[in] instance  SERCOM instance that triggered the interrupt
 */
void _i2c_master_interrupt_handler(
		uint8_t instance)
{
   12bcc:	b580      	push	{r7, lr}
   12bce:	b086      	sub	sp, #24
   12bd0:	af00      	add	r7, sp, #0
   12bd2:	0002      	movs	r2, r0
   12bd4:	1dfb      	adds	r3, r7, #7
   12bd6:	701a      	strb	r2, [r3, #0]
	/* Get software module for callback handling */
	struct i2c_master_module *module =
			(struct i2c_master_module*)_sercom_instances[instance];
   12bd8:	1dfb      	adds	r3, r7, #7
   12bda:	781a      	ldrb	r2, [r3, #0]
	struct i2c_master_module *module =
   12bdc:	4b93      	ldr	r3, [pc, #588]	; (12e2c <_i2c_master_interrupt_handler+0x260>)
   12bde:	0092      	lsls	r2, r2, #2
   12be0:	58d3      	ldr	r3, [r2, r3]
   12be2:	617b      	str	r3, [r7, #20]

	Assert(module);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
   12be4:	697b      	ldr	r3, [r7, #20]
   12be6:	681b      	ldr	r3, [r3, #0]
   12be8:	613b      	str	r3, [r7, #16]
	bool sclsm_flag = i2c_module->CTRLA.bit.SCLSM;
   12bea:	693b      	ldr	r3, [r7, #16]
   12bec:	681b      	ldr	r3, [r3, #0]
   12bee:	011b      	lsls	r3, r3, #4
   12bf0:	0fdb      	lsrs	r3, r3, #31
   12bf2:	b2db      	uxtb	r3, r3
   12bf4:	001a      	movs	r2, r3
   12bf6:	230f      	movs	r3, #15
   12bf8:	18fb      	adds	r3, r7, r3
   12bfa:	1e51      	subs	r1, r2, #1
   12bfc:	418a      	sbcs	r2, r1
   12bfe:	701a      	strb	r2, [r3, #0]

	/* Combine callback registered and enabled masks */
	uint8_t callback_mask = module->enabled_callback;
   12c00:	230e      	movs	r3, #14
   12c02:	18fb      	adds	r3, r7, r3
   12c04:	697a      	ldr	r2, [r7, #20]
   12c06:	7e52      	ldrb	r2, [r2, #25]
   12c08:	701a      	strb	r2, [r3, #0]
	callback_mask &= module->registered_callback;
   12c0a:	697b      	ldr	r3, [r7, #20]
   12c0c:	7e1b      	ldrb	r3, [r3, #24]
   12c0e:	b2da      	uxtb	r2, r3
   12c10:	230e      	movs	r3, #14
   12c12:	18fb      	adds	r3, r7, r3
   12c14:	210e      	movs	r1, #14
   12c16:	1879      	adds	r1, r7, r1
   12c18:	7809      	ldrb	r1, [r1, #0]
   12c1a:	400a      	ands	r2, r1
   12c1c:	701a      	strb	r2, [r3, #0]

	/* Check if the module should respond to address ack */
	if ((module->buffer_length <= 0) && (module->buffer_remaining > 0)) {
   12c1e:	697b      	ldr	r3, [r7, #20]
   12c20:	8b5b      	ldrh	r3, [r3, #26]
   12c22:	b29b      	uxth	r3, r3
   12c24:	2b00      	cmp	r3, #0
   12c26:	d109      	bne.n	12c3c <_i2c_master_interrupt_handler+0x70>
   12c28:	697b      	ldr	r3, [r7, #20]
   12c2a:	8b9b      	ldrh	r3, [r3, #28]
   12c2c:	b29b      	uxth	r3, r3
   12c2e:	2b00      	cmp	r3, #0
   12c30:	d004      	beq.n	12c3c <_i2c_master_interrupt_handler+0x70>
		/* Call function for address response */
		_i2c_master_async_address_response(module);
   12c32:	697b      	ldr	r3, [r7, #20]
   12c34:	0018      	movs	r0, r3
   12c36:	4b7e      	ldr	r3, [pc, #504]	; (12e30 <_i2c_master_interrupt_handler+0x264>)
   12c38:	4798      	blx	r3
   12c3a:	e070      	b.n	12d1e <_i2c_master_interrupt_handler+0x152>

	/* Check if buffer write is done */
	} else if ((module->buffer_length > 0) && (module->buffer_remaining <= 0) &&
   12c3c:	697b      	ldr	r3, [r7, #20]
   12c3e:	8b5b      	ldrh	r3, [r3, #26]
   12c40:	b29b      	uxth	r3, r3
   12c42:	2b00      	cmp	r3, #0
   12c44:	d039      	beq.n	12cba <_i2c_master_interrupt_handler+0xee>
   12c46:	697b      	ldr	r3, [r7, #20]
   12c48:	8b9b      	ldrh	r3, [r3, #28]
   12c4a:	b29b      	uxth	r3, r3
   12c4c:	2b00      	cmp	r3, #0
   12c4e:	d134      	bne.n	12cba <_i2c_master_interrupt_handler+0xee>
			(module->status == STATUS_BUSY) &&
   12c50:	697b      	ldr	r3, [r7, #20]
   12c52:	2225      	movs	r2, #37	; 0x25
   12c54:	5c9b      	ldrb	r3, [r3, r2]
   12c56:	b2db      	uxtb	r3, r3
	} else if ((module->buffer_length > 0) && (module->buffer_remaining <= 0) &&
   12c58:	2b05      	cmp	r3, #5
   12c5a:	d12e      	bne.n	12cba <_i2c_master_interrupt_handler+0xee>
			(module->transfer_direction == I2C_TRANSFER_WRITE)) {
   12c5c:	697b      	ldr	r3, [r7, #20]
   12c5e:	2224      	movs	r2, #36	; 0x24
   12c60:	5c9b      	ldrb	r3, [r3, r2]
   12c62:	b2db      	uxtb	r3, r3
			(module->status == STATUS_BUSY) &&
   12c64:	2b00      	cmp	r3, #0
   12c66:	d128      	bne.n	12cba <_i2c_master_interrupt_handler+0xee>
		/* Stop packet operation */
		i2c_module->INTENCLR.reg =
   12c68:	693b      	ldr	r3, [r7, #16]
   12c6a:	2203      	movs	r2, #3
   12c6c:	751a      	strb	r2, [r3, #20]
				SERCOM_I2CM_INTENCLR_MB | SERCOM_I2CM_INTENCLR_SB;

		module->buffer_length = 0;
   12c6e:	697b      	ldr	r3, [r7, #20]
   12c70:	2200      	movs	r2, #0
   12c72:	835a      	strh	r2, [r3, #26]
		module->status        = STATUS_OK;
   12c74:	697b      	ldr	r3, [r7, #20]
   12c76:	2225      	movs	r2, #37	; 0x25
   12c78:	2100      	movs	r1, #0
   12c7a:	5499      	strb	r1, [r3, r2]

		if (module->send_stop) {
   12c7c:	697b      	ldr	r3, [r7, #20]
   12c7e:	7a9b      	ldrb	r3, [r3, #10]
   12c80:	2b00      	cmp	r3, #0
   12c82:	d00b      	beq.n	12c9c <_i2c_master_interrupt_handler+0xd0>
			/* Send stop condition */
			_i2c_master_wait_for_sync(module);
   12c84:	697b      	ldr	r3, [r7, #20]
   12c86:	0018      	movs	r0, r3
   12c88:	4b6a      	ldr	r3, [pc, #424]	; (12e34 <_i2c_master_interrupt_handler+0x268>)
   12c8a:	4798      	blx	r3
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
   12c8c:	693b      	ldr	r3, [r7, #16]
   12c8e:	685b      	ldr	r3, [r3, #4]
   12c90:	22c0      	movs	r2, #192	; 0xc0
   12c92:	0292      	lsls	r2, r2, #10
   12c94:	431a      	orrs	r2, r3
   12c96:	693b      	ldr	r3, [r7, #16]
   12c98:	605a      	str	r2, [r3, #4]
   12c9a:	e002      	b.n	12ca2 <_i2c_master_interrupt_handler+0xd6>
		} else {
			/* Clear write interrupt flag */
			i2c_module->INTFLAG.reg = SERCOM_I2CM_INTFLAG_MB;
   12c9c:	693b      	ldr	r3, [r7, #16]
   12c9e:	2201      	movs	r2, #1
   12ca0:	761a      	strb	r2, [r3, #24]
		}
		
		if (callback_mask & (1 << I2C_MASTER_CALLBACK_WRITE_COMPLETE)) {
   12ca2:	230e      	movs	r3, #14
   12ca4:	18fb      	adds	r3, r7, r3
   12ca6:	781b      	ldrb	r3, [r3, #0]
   12ca8:	2201      	movs	r2, #1
   12caa:	4013      	ands	r3, r2
   12cac:	d037      	beq.n	12d1e <_i2c_master_interrupt_handler+0x152>
			module->callbacks[I2C_MASTER_CALLBACK_WRITE_COMPLETE](module);
   12cae:	697b      	ldr	r3, [r7, #20]
   12cb0:	68db      	ldr	r3, [r3, #12]
   12cb2:	697a      	ldr	r2, [r7, #20]
   12cb4:	0010      	movs	r0, r2
   12cb6:	4798      	blx	r3
		if (callback_mask & (1 << I2C_MASTER_CALLBACK_WRITE_COMPLETE)) {
   12cb8:	e031      	b.n	12d1e <_i2c_master_interrupt_handler+0x152>
		}

	/* Continue buffer write/read */
	} else if ((module->buffer_length > 0) && (module->buffer_remaining > 0)){
   12cba:	697b      	ldr	r3, [r7, #20]
   12cbc:	8b5b      	ldrh	r3, [r3, #26]
   12cbe:	b29b      	uxth	r3, r3
   12cc0:	2b00      	cmp	r3, #0
   12cc2:	d02c      	beq.n	12d1e <_i2c_master_interrupt_handler+0x152>
   12cc4:	697b      	ldr	r3, [r7, #20]
   12cc6:	8b9b      	ldrh	r3, [r3, #28]
   12cc8:	b29b      	uxth	r3, r3
   12cca:	2b00      	cmp	r3, #0
   12ccc:	d027      	beq.n	12d1e <_i2c_master_interrupt_handler+0x152>
		/* Check that bus ownership is not lost */
		if ((!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(2))) &&
   12cce:	693b      	ldr	r3, [r7, #16]
   12cd0:	8b5b      	ldrh	r3, [r3, #26]
   12cd2:	b29b      	uxth	r3, r3
   12cd4:	001a      	movs	r2, r3
   12cd6:	2320      	movs	r3, #32
   12cd8:	4013      	ands	r3, r2
   12cda:	d111      	bne.n	12d00 <_i2c_master_interrupt_handler+0x134>
				(!(sclsm_flag && (module->buffer_remaining == 1))))	{
   12cdc:	230f      	movs	r3, #15
   12cde:	18fb      	adds	r3, r7, r3
   12ce0:	781b      	ldrb	r3, [r3, #0]
   12ce2:	2201      	movs	r2, #1
   12ce4:	4053      	eors	r3, r2
   12ce6:	b2db      	uxtb	r3, r3
		if ((!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(2))) &&
   12ce8:	2b00      	cmp	r3, #0
   12cea:	d104      	bne.n	12cf6 <_i2c_master_interrupt_handler+0x12a>
				(!(sclsm_flag && (module->buffer_remaining == 1))))	{
   12cec:	697b      	ldr	r3, [r7, #20]
   12cee:	8b9b      	ldrh	r3, [r3, #28]
   12cf0:	b29b      	uxth	r3, r3
   12cf2:	2b01      	cmp	r3, #1
   12cf4:	d004      	beq.n	12d00 <_i2c_master_interrupt_handler+0x134>
			module->status = STATUS_ERR_PACKET_COLLISION;
   12cf6:	697b      	ldr	r3, [r7, #20]
   12cf8:	2225      	movs	r2, #37	; 0x25
   12cfa:	2141      	movs	r1, #65	; 0x41
   12cfc:	5499      	strb	r1, [r3, r2]
   12cfe:	e00e      	b.n	12d1e <_i2c_master_interrupt_handler+0x152>
		} else if (module->transfer_direction == I2C_TRANSFER_WRITE) {
   12d00:	697b      	ldr	r3, [r7, #20]
   12d02:	2224      	movs	r2, #36	; 0x24
   12d04:	5c9b      	ldrb	r3, [r3, r2]
   12d06:	b2db      	uxtb	r3, r3
   12d08:	2b00      	cmp	r3, #0
   12d0a:	d104      	bne.n	12d16 <_i2c_master_interrupt_handler+0x14a>
			_i2c_master_write(module);
   12d0c:	697b      	ldr	r3, [r7, #20]
   12d0e:	0018      	movs	r0, r3
   12d10:	4b49      	ldr	r3, [pc, #292]	; (12e38 <_i2c_master_interrupt_handler+0x26c>)
   12d12:	4798      	blx	r3
   12d14:	e003      	b.n	12d1e <_i2c_master_interrupt_handler+0x152>
		} else {
			_i2c_master_read(module);
   12d16:	697b      	ldr	r3, [r7, #20]
   12d18:	0018      	movs	r0, r3
   12d1a:	4b48      	ldr	r3, [pc, #288]	; (12e3c <_i2c_master_interrupt_handler+0x270>)
   12d1c:	4798      	blx	r3
		}
	}

	/* Check if read buffer transfer is complete */
	if ((module->buffer_length > 0) && (module->buffer_remaining <= 0) &&
   12d1e:	697b      	ldr	r3, [r7, #20]
   12d20:	8b5b      	ldrh	r3, [r3, #26]
   12d22:	b29b      	uxth	r3, r3
   12d24:	2b00      	cmp	r3, #0
   12d26:	d047      	beq.n	12db8 <_i2c_master_interrupt_handler+0x1ec>
   12d28:	697b      	ldr	r3, [r7, #20]
   12d2a:	8b9b      	ldrh	r3, [r3, #28]
   12d2c:	b29b      	uxth	r3, r3
   12d2e:	2b00      	cmp	r3, #0
   12d30:	d142      	bne.n	12db8 <_i2c_master_interrupt_handler+0x1ec>
			(module->status == STATUS_BUSY) &&
   12d32:	697b      	ldr	r3, [r7, #20]
   12d34:	2225      	movs	r2, #37	; 0x25
   12d36:	5c9b      	ldrb	r3, [r3, r2]
   12d38:	b2db      	uxtb	r3, r3
	if ((module->buffer_length > 0) && (module->buffer_remaining <= 0) &&
   12d3a:	2b05      	cmp	r3, #5
   12d3c:	d13c      	bne.n	12db8 <_i2c_master_interrupt_handler+0x1ec>
			(module->transfer_direction == I2C_TRANSFER_READ)) {
   12d3e:	697b      	ldr	r3, [r7, #20]
   12d40:	2224      	movs	r2, #36	; 0x24
   12d42:	5c9b      	ldrb	r3, [r3, r2]
   12d44:	b2db      	uxtb	r3, r3
			(module->status == STATUS_BUSY) &&
   12d46:	2b01      	cmp	r3, #1
   12d48:	d136      	bne.n	12db8 <_i2c_master_interrupt_handler+0x1ec>
		
		/* Clear read interrupt flag */
		if (i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB) {
   12d4a:	693b      	ldr	r3, [r7, #16]
   12d4c:	7e1b      	ldrb	r3, [r3, #24]
   12d4e:	b2db      	uxtb	r3, r3
   12d50:	001a      	movs	r2, r3
   12d52:	2302      	movs	r3, #2
   12d54:	4013      	ands	r3, r2
   12d56:	d002      	beq.n	12d5e <_i2c_master_interrupt_handler+0x192>
			i2c_module->INTFLAG.reg = SERCOM_I2CM_INTFLAG_SB;
   12d58:	693b      	ldr	r3, [r7, #16]
   12d5a:	2202      	movs	r2, #2
   12d5c:	761a      	strb	r2, [r3, #24]
		}
		/* Stop packet operation */
		i2c_module->INTENCLR.reg =
   12d5e:	693b      	ldr	r3, [r7, #16]
   12d60:	2203      	movs	r2, #3
   12d62:	751a      	strb	r2, [r3, #20]
				SERCOM_I2CM_INTENCLR_MB | SERCOM_I2CM_INTENCLR_SB;
		module->buffer_length = 0;
   12d64:	697b      	ldr	r3, [r7, #20]
   12d66:	2200      	movs	r2, #0
   12d68:	835a      	strh	r2, [r3, #26]
		module->status        = STATUS_OK;
   12d6a:	697b      	ldr	r3, [r7, #20]
   12d6c:	2225      	movs	r2, #37	; 0x25
   12d6e:	2100      	movs	r1, #0
   12d70:	5499      	strb	r1, [r3, r2]

		/* Call appropriate callback if enabled and registered */
		if ((callback_mask & (1 << I2C_MASTER_CALLBACK_READ_COMPLETE))
   12d72:	230e      	movs	r3, #14
   12d74:	18fb      	adds	r3, r7, r3
   12d76:	781b      	ldrb	r3, [r3, #0]
   12d78:	2202      	movs	r2, #2
   12d7a:	4013      	ands	r3, r2
   12d7c:	d00b      	beq.n	12d96 <_i2c_master_interrupt_handler+0x1ca>
				&& (module->transfer_direction == I2C_TRANSFER_READ)) {
   12d7e:	697b      	ldr	r3, [r7, #20]
   12d80:	2224      	movs	r2, #36	; 0x24
   12d82:	5c9b      	ldrb	r3, [r3, r2]
   12d84:	b2db      	uxtb	r3, r3
   12d86:	2b01      	cmp	r3, #1
   12d88:	d105      	bne.n	12d96 <_i2c_master_interrupt_handler+0x1ca>
			module->callbacks[I2C_MASTER_CALLBACK_READ_COMPLETE](module);
   12d8a:	697b      	ldr	r3, [r7, #20]
   12d8c:	691b      	ldr	r3, [r3, #16]
   12d8e:	697a      	ldr	r2, [r7, #20]
   12d90:	0010      	movs	r0, r2
   12d92:	4798      	blx	r3
   12d94:	e010      	b.n	12db8 <_i2c_master_interrupt_handler+0x1ec>
		} else if ((callback_mask & (1 << I2C_MASTER_CALLBACK_WRITE_COMPLETE))
   12d96:	230e      	movs	r3, #14
   12d98:	18fb      	adds	r3, r7, r3
   12d9a:	781b      	ldrb	r3, [r3, #0]
   12d9c:	2201      	movs	r2, #1
   12d9e:	4013      	ands	r3, r2
   12da0:	d00a      	beq.n	12db8 <_i2c_master_interrupt_handler+0x1ec>
				&& (module->transfer_direction == I2C_TRANSFER_WRITE)) {
   12da2:	697b      	ldr	r3, [r7, #20]
   12da4:	2224      	movs	r2, #36	; 0x24
   12da6:	5c9b      	ldrb	r3, [r3, r2]
   12da8:	b2db      	uxtb	r3, r3
   12daa:	2b00      	cmp	r3, #0
   12dac:	d104      	bne.n	12db8 <_i2c_master_interrupt_handler+0x1ec>
			module->callbacks[I2C_MASTER_CALLBACK_WRITE_COMPLETE](module);
   12dae:	697b      	ldr	r3, [r7, #20]
   12db0:	68db      	ldr	r3, [r3, #12]
   12db2:	697a      	ldr	r2, [r7, #20]
   12db4:	0010      	movs	r0, r2
   12db6:	4798      	blx	r3
		}
	}

	/* Check for error */
	if ((module->status != STATUS_BUSY) && (module->status != STATUS_OK)) {
   12db8:	697b      	ldr	r3, [r7, #20]
   12dba:	2225      	movs	r2, #37	; 0x25
   12dbc:	5c9b      	ldrb	r3, [r3, r2]
   12dbe:	b2db      	uxtb	r3, r3
   12dc0:	2b05      	cmp	r3, #5
   12dc2:	d02e      	beq.n	12e22 <_i2c_master_interrupt_handler+0x256>
   12dc4:	697b      	ldr	r3, [r7, #20]
   12dc6:	2225      	movs	r2, #37	; 0x25
   12dc8:	5c9b      	ldrb	r3, [r3, r2]
   12dca:	b2db      	uxtb	r3, r3
   12dcc:	2b00      	cmp	r3, #0
   12dce:	d028      	beq.n	12e22 <_i2c_master_interrupt_handler+0x256>
		/* Stop packet operation */
		i2c_module->INTENCLR.reg = SERCOM_I2CM_INTENCLR_MB |
   12dd0:	693b      	ldr	r3, [r7, #16]
   12dd2:	2203      	movs	r2, #3
   12dd4:	751a      	strb	r2, [r3, #20]
				SERCOM_I2CM_INTENCLR_SB;

		module->buffer_length = 0;
   12dd6:	697b      	ldr	r3, [r7, #20]
   12dd8:	2200      	movs	r2, #0
   12dda:	835a      	strh	r2, [r3, #26]
		module->buffer_remaining = 0;
   12ddc:	697b      	ldr	r3, [r7, #20]
   12dde:	2200      	movs	r2, #0
   12de0:	839a      	strh	r2, [r3, #28]

		/* Send nack and stop command unless arbitration is lost */
		if ((module->status != STATUS_ERR_PACKET_COLLISION) &&
   12de2:	697b      	ldr	r3, [r7, #20]
   12de4:	2225      	movs	r2, #37	; 0x25
   12de6:	5c9b      	ldrb	r3, [r3, r2]
   12de8:	b2db      	uxtb	r3, r3
   12dea:	2b41      	cmp	r3, #65	; 0x41
   12dec:	d00e      	beq.n	12e0c <_i2c_master_interrupt_handler+0x240>
				module->send_stop) {
   12dee:	697b      	ldr	r3, [r7, #20]
   12df0:	7a9b      	ldrb	r3, [r3, #10]
		if ((module->status != STATUS_ERR_PACKET_COLLISION) &&
   12df2:	2b00      	cmp	r3, #0
   12df4:	d00a      	beq.n	12e0c <_i2c_master_interrupt_handler+0x240>
			_i2c_master_wait_for_sync(module);
   12df6:	697b      	ldr	r3, [r7, #20]
   12df8:	0018      	movs	r0, r3
   12dfa:	4b0e      	ldr	r3, [pc, #56]	; (12e34 <_i2c_master_interrupt_handler+0x268>)
   12dfc:	4798      	blx	r3
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT |
   12dfe:	693b      	ldr	r3, [r7, #16]
   12e00:	685b      	ldr	r3, [r3, #4]
   12e02:	22e0      	movs	r2, #224	; 0xe0
   12e04:	02d2      	lsls	r2, r2, #11
   12e06:	431a      	orrs	r2, r3
   12e08:	693b      	ldr	r3, [r7, #16]
   12e0a:	605a      	str	r2, [r3, #4]
					SERCOM_I2CM_CTRLB_CMD(3);
		}

		/* Call error callback if enabled and registered */
		if (callback_mask & (1 << I2C_MASTER_CALLBACK_ERROR)) {
   12e0c:	230e      	movs	r3, #14
   12e0e:	18fb      	adds	r3, r7, r3
   12e10:	781b      	ldrb	r3, [r3, #0]
   12e12:	2204      	movs	r2, #4
   12e14:	4013      	ands	r3, r2
   12e16:	d004      	beq.n	12e22 <_i2c_master_interrupt_handler+0x256>
			module->callbacks[I2C_MASTER_CALLBACK_ERROR](module);
   12e18:	697b      	ldr	r3, [r7, #20]
   12e1a:	695b      	ldr	r3, [r3, #20]
   12e1c:	697a      	ldr	r2, [r7, #20]
   12e1e:	0010      	movs	r0, r2
   12e20:	4798      	blx	r3
		}
	}
}
   12e22:	46c0      	nop			; (mov r8, r8)
   12e24:	46bd      	mov	sp, r7
   12e26:	b006      	add	sp, #24
   12e28:	bd80      	pop	{r7, pc}
   12e2a:	46c0      	nop			; (mov r8, r8)
   12e2c:	200056a8 	.word	0x200056a8
   12e30:	0001284d 	.word	0x0001284d
   12e34:	000126bd 	.word	0x000126bd
   12e38:	000127d1 	.word	0x000127d1
   12e3c:	000126e1 	.word	0x000126e1

00012e40 <NVIC_SystemReset>:
/** \brief  System Reset

    The function initiates a system reset request to reset the MCU.
 */
__STATIC_INLINE void NVIC_SystemReset(void)
{
   12e40:	b580      	push	{r7, lr}
   12e42:	af00      	add	r7, sp, #0
    This function acts as a special kind of Data Memory Barrier.
    It completes when all explicit memory accesses before this instruction complete.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DSB(void)
{
  __ASM volatile ("dsb");
   12e44:	f3bf 8f4f 	dsb	sy
  __DSB();                                                     /* Ensure all outstanding memory accesses included
                                                                  buffered write are completed before reset */
  SCB->AIRCR  = ((0x5FA << SCB_AIRCR_VECTKEY_Pos)      |
   12e48:	4b02      	ldr	r3, [pc, #8]	; (12e54 <NVIC_SystemReset+0x14>)
   12e4a:	4a03      	ldr	r2, [pc, #12]	; (12e58 <NVIC_SystemReset+0x18>)
   12e4c:	60da      	str	r2, [r3, #12]
   12e4e:	f3bf 8f4f 	dsb	sy
                 SCB_AIRCR_SYSRESETREQ_Msk);
  __DSB();                                                     /* Ensure completion of memory access */
  while(1);                                                    /* wait until reset */
   12e52:	e7fe      	b.n	12e52 <NVIC_SystemReset+0x12>
   12e54:	e000ed00 	.word	0xe000ed00
   12e58:	05fa0004 	.word	0x05fa0004

00012e5c <system_reset>:
 * Resets the MCU and all associated peripherals and registers, except RTC, all 32KHz sources,
 * WDT (if ALWAYSON is set) and GCLK (if WRTLOCK is set).
 *
 */
static inline void system_reset(void)
{
   12e5c:	b580      	push	{r7, lr}
   12e5e:	af00      	add	r7, sp, #0
	NVIC_SystemReset();
   12e60:	4b02      	ldr	r3, [pc, #8]	; (12e6c <system_reset+0x10>)
   12e62:	4798      	blx	r3
}
   12e64:	46c0      	nop			; (mov r8, r8)
   12e66:	46bd      	mov	sp, r7
   12e68:	bd80      	pop	{r7, pc}
   12e6a:	46c0      	nop			; (mov r8, r8)
   12e6c:	00012e41 	.word	0x00012e41

00012e70 <vCommandConsoleTask>:
/******************************************************************************
 * CLI Thread
 ******************************************************************************/

void vCommandConsoleTask(void *pvParameters)
{
   12e70:	b580      	push	{r7, lr}
   12e72:	b086      	sub	sp, #24
   12e74:	af00      	add	r7, sp, #0
   12e76:	6078      	str	r0, [r7, #4]
    // REGISTER COMMANDS HERE
    FreeRTOS_CLIRegisterCommand(&xOTAUCommand);
   12e78:	4b9e      	ldr	r3, [pc, #632]	; (130f4 <vCommandConsoleTask+0x284>)
   12e7a:	0018      	movs	r0, r3
   12e7c:	4b9e      	ldr	r3, [pc, #632]	; (130f8 <vCommandConsoleTask+0x288>)
   12e7e:	4798      	blx	r3
    FreeRTOS_CLIRegisterCommand(&xClearScreen);
   12e80:	4b9e      	ldr	r3, [pc, #632]	; (130fc <vCommandConsoleTask+0x28c>)
   12e82:	0018      	movs	r0, r3
   12e84:	4b9c      	ldr	r3, [pc, #624]	; (130f8 <vCommandConsoleTask+0x288>)
   12e86:	4798      	blx	r3
    FreeRTOS_CLIRegisterCommand(&xResetCommand);
   12e88:	4b9d      	ldr	r3, [pc, #628]	; (13100 <vCommandConsoleTask+0x290>)
   12e8a:	0018      	movs	r0, r3
   12e8c:	4b9a      	ldr	r3, [pc, #616]	; (130f8 <vCommandConsoleTask+0x288>)
   12e8e:	4798      	blx	r3
    FreeRTOS_CLIRegisterCommand(&xI2cScan);
   12e90:	4b9c      	ldr	r3, [pc, #624]	; (13104 <vCommandConsoleTask+0x294>)
   12e92:	0018      	movs	r0, r3
   12e94:	4b98      	ldr	r3, [pc, #608]	; (130f8 <vCommandConsoleTask+0x288>)
   12e96:	4798      	blx	r3
	// New Command registrations for version ans ticks
	FreeRTOS_CLIRegisterCommand(&xVersionCommand);
   12e98:	4b9b      	ldr	r3, [pc, #620]	; (13108 <vCommandConsoleTask+0x298>)
   12e9a:	0018      	movs	r0, r3
   12e9c:	4b96      	ldr	r3, [pc, #600]	; (130f8 <vCommandConsoleTask+0x288>)
   12e9e:	4798      	blx	r3
	FreeRTOS_CLIRegisterCommand(&xTicksCommand);
   12ea0:	4b9a      	ldr	r3, [pc, #616]	; (1310c <vCommandConsoleTask+0x29c>)
   12ea2:	0018      	movs	r0, r3
   12ea4:	4b94      	ldr	r3, [pc, #592]	; (130f8 <vCommandConsoleTask+0x288>)
   12ea6:	4798      	blx	r3
    FreeRTOS_CLIRegisterCommand(&xGetIMUDataCommand);
   12ea8:	4b99      	ldr	r3, [pc, #612]	; (13110 <vCommandConsoleTask+0x2a0>)
   12eaa:	0018      	movs	r0, r3
   12eac:	4b92      	ldr	r3, [pc, #584]	; (130f8 <vCommandConsoleTask+0x288>)
   12eae:	4798      	blx	r3
    FreeRTOS_CLIRegisterCommand(&xGetHapticCommand);
   12eb0:	4b98      	ldr	r3, [pc, #608]	; (13114 <vCommandConsoleTask+0x2a4>)
   12eb2:	0018      	movs	r0, r3
   12eb4:	4b90      	ldr	r3, [pc, #576]	; (130f8 <vCommandConsoleTask+0x288>)
   12eb6:	4798      	blx	r3
    FreeRTOS_CLIRegisterCommand(&xSetLEDCommand);
   12eb8:	4b97      	ldr	r3, [pc, #604]	; (13118 <vCommandConsoleTask+0x2a8>)
   12eba:	0018      	movs	r0, r3
   12ebc:	4b8e      	ldr	r3, [pc, #568]	; (130f8 <vCommandConsoleTask+0x288>)
   12ebe:	4798      	blx	r3

    char cRxedChar[2];
    unsigned char cInputIndex = 0;
   12ec0:	2317      	movs	r3, #23
   12ec2:	18fb      	adds	r3, r7, r3
   12ec4:	2200      	movs	r2, #0
   12ec6:	701a      	strb	r2, [r3, #0]
    /* This code assumes the peripheral being used as the console has already
    been opened and configured, and is passed into the task as the task
    parameter.  Cast the task parameter to the correct type. */

    /* Send a welcome message to the user knows they are connected. */
    SerialConsoleWriteString((char *)pcWelcomeMessage);
   12ec8:	4b94      	ldr	r3, [pc, #592]	; (1311c <vCommandConsoleTask+0x2ac>)
   12eca:	0018      	movs	r0, r3
   12ecc:	4b94      	ldr	r3, [pc, #592]	; (13120 <vCommandConsoleTask+0x2b0>)
   12ece:	4798      	blx	r3

    // Any semaphores/mutexes/etc you needed to be initialized, you can do them here
    cliCharReadySemaphore = xSemaphoreCreateBinary();
   12ed0:	2203      	movs	r2, #3
   12ed2:	2100      	movs	r1, #0
   12ed4:	2001      	movs	r0, #1
   12ed6:	4b93      	ldr	r3, [pc, #588]	; (13124 <vCommandConsoleTask+0x2b4>)
   12ed8:	4798      	blx	r3
   12eda:	0002      	movs	r2, r0
   12edc:	4b92      	ldr	r3, [pc, #584]	; (13128 <vCommandConsoleTask+0x2b8>)
   12ede:	601a      	str	r2, [r3, #0]
    if (cliCharReadySemaphore == NULL) {
   12ee0:	4b91      	ldr	r3, [pc, #580]	; (13128 <vCommandConsoleTask+0x2b8>)
   12ee2:	681b      	ldr	r3, [r3, #0]
   12ee4:	2b00      	cmp	r3, #0
   12ee6:	d107      	bne.n	12ef8 <vCommandConsoleTask+0x88>
        LogMessage(LOG_ERROR_LVL, "Could not allocate semaphore\r\n");
   12ee8:	4b90      	ldr	r3, [pc, #576]	; (1312c <vCommandConsoleTask+0x2bc>)
   12eea:	0019      	movs	r1, r3
   12eec:	2003      	movs	r0, #3
   12eee:	4b90      	ldr	r3, [pc, #576]	; (13130 <vCommandConsoleTask+0x2c0>)
   12ef0:	4798      	blx	r3
        vTaskSuspend(NULL);
   12ef2:	2000      	movs	r0, #0
   12ef4:	4b8f      	ldr	r3, [pc, #572]	; (13134 <vCommandConsoleTask+0x2c4>)
   12ef6:	4798      	blx	r3
    }

    for (;;) {
        FreeRTOS_read(&cRxedChar[0]);
   12ef8:	230c      	movs	r3, #12
   12efa:	18fb      	adds	r3, r7, r3
   12efc:	0018      	movs	r0, r3
   12efe:	4b8e      	ldr	r3, [pc, #568]	; (13138 <vCommandConsoleTask+0x2c8>)
   12f00:	4798      	blx	r3

        if (cRxedChar[0] == '\n' || cRxedChar[0] == '\r') {
   12f02:	230c      	movs	r3, #12
   12f04:	18fb      	adds	r3, r7, r3
   12f06:	781b      	ldrb	r3, [r3, #0]
   12f08:	2b0a      	cmp	r3, #10
   12f0a:	d004      	beq.n	12f16 <vCommandConsoleTask+0xa6>
   12f0c:	230c      	movs	r3, #12
   12f0e:	18fb      	adds	r3, r7, r3
   12f10:	781b      	ldrb	r3, [r3, #0]
   12f12:	2b0d      	cmp	r3, #13
   12f14:	d137      	bne.n	12f86 <vCommandConsoleTask+0x116>
            /* A newline character was received, so the input command string is
            complete and can be processed.  Transmit a line separator, just to
            make the output easier to read. */
            SerialConsoleWriteString((char *)"\r\n");
   12f16:	4b89      	ldr	r3, [pc, #548]	; (1313c <vCommandConsoleTask+0x2cc>)
   12f18:	0018      	movs	r0, r3
   12f1a:	4b81      	ldr	r3, [pc, #516]	; (13120 <vCommandConsoleTask+0x2b0>)
   12f1c:	4798      	blx	r3
            // Copy for last command
            isEscapeCode = false;
   12f1e:	4b88      	ldr	r3, [pc, #544]	; (13140 <vCommandConsoleTask+0x2d0>)
   12f20:	2200      	movs	r2, #0
   12f22:	701a      	strb	r2, [r3, #0]
            pcEscapeCodePos = 0;
   12f24:	4b87      	ldr	r3, [pc, #540]	; (13144 <vCommandConsoleTask+0x2d4>)
   12f26:	2200      	movs	r2, #0
   12f28:	701a      	strb	r2, [r3, #0]
            strncpy(pcLastCommand, pcInputString, MAX_INPUT_LENGTH_CLI - 1);
   12f2a:	4987      	ldr	r1, [pc, #540]	; (13148 <vCommandConsoleTask+0x2d8>)
   12f2c:	4b87      	ldr	r3, [pc, #540]	; (1314c <vCommandConsoleTask+0x2dc>)
   12f2e:	2231      	movs	r2, #49	; 0x31
   12f30:	0018      	movs	r0, r3
   12f32:	4b87      	ldr	r3, [pc, #540]	; (13150 <vCommandConsoleTask+0x2e0>)
   12f34:	4798      	blx	r3
            pcLastCommand[MAX_INPUT_LENGTH_CLI - 1] = 0;  // Ensure null termination
   12f36:	4b85      	ldr	r3, [pc, #532]	; (1314c <vCommandConsoleTask+0x2dc>)
   12f38:	2231      	movs	r2, #49	; 0x31
   12f3a:	2100      	movs	r1, #0
   12f3c:	5499      	strb	r1, [r3, r2]
            explanation of why this is. */
            do {
                /* Send the command string to the command interpreter.  Any
                output generated by the command interpreter will be placed in the
                pcOutputString buffer. */
                xMoreDataToFollow = FreeRTOS_CLIProcessCommand(pcInputString,        /* The command string.*/
   12f3e:	4985      	ldr	r1, [pc, #532]	; (13154 <vCommandConsoleTask+0x2e4>)
   12f40:	4b81      	ldr	r3, [pc, #516]	; (13148 <vCommandConsoleTask+0x2d8>)
   12f42:	2264      	movs	r2, #100	; 0x64
   12f44:	0018      	movs	r0, r3
   12f46:	4b84      	ldr	r3, [pc, #528]	; (13158 <vCommandConsoleTask+0x2e8>)
   12f48:	4798      	blx	r3
   12f4a:	0003      	movs	r3, r0
   12f4c:	613b      	str	r3, [r7, #16]
                );

                /* Write the output generated by the command interpreter to the
                console. */
                // Ensure it is null terminated
                pcOutputString[MAX_OUTPUT_LENGTH_CLI - 1] = 0;
   12f4e:	4b81      	ldr	r3, [pc, #516]	; (13154 <vCommandConsoleTask+0x2e4>)
   12f50:	2263      	movs	r2, #99	; 0x63
   12f52:	2100      	movs	r1, #0
   12f54:	5499      	strb	r1, [r3, r2]
                SerialConsoleWriteString(pcOutputString);
   12f56:	4b7f      	ldr	r3, [pc, #508]	; (13154 <vCommandConsoleTask+0x2e4>)
   12f58:	0018      	movs	r0, r3
   12f5a:	4b71      	ldr	r3, [pc, #452]	; (13120 <vCommandConsoleTask+0x2b0>)
   12f5c:	4798      	blx	r3

            } while (xMoreDataToFollow != pdFALSE);
   12f5e:	693b      	ldr	r3, [r7, #16]
   12f60:	2b00      	cmp	r3, #0
   12f62:	d1ec      	bne.n	12f3e <vCommandConsoleTask+0xce>

            /* All the strings generated by the input command have been sent.
            Processing of the command is complete.  Clear the input string ready
            to receive the next command. */
            cInputIndex = 0;
   12f64:	2317      	movs	r3, #23
   12f66:	18fb      	adds	r3, r7, r3
   12f68:	2200      	movs	r2, #0
   12f6a:	701a      	strb	r2, [r3, #0]
            memset(pcInputString, 0x00, MAX_INPUT_LENGTH_CLI);
   12f6c:	4b76      	ldr	r3, [pc, #472]	; (13148 <vCommandConsoleTask+0x2d8>)
   12f6e:	2232      	movs	r2, #50	; 0x32
   12f70:	2100      	movs	r1, #0
   12f72:	0018      	movs	r0, r3
   12f74:	4b79      	ldr	r3, [pc, #484]	; (1315c <vCommandConsoleTask+0x2ec>)
   12f76:	4798      	blx	r3
            memset(pcOutputString, 0, MAX_OUTPUT_LENGTH_CLI);
   12f78:	4b76      	ldr	r3, [pc, #472]	; (13154 <vCommandConsoleTask+0x2e4>)
   12f7a:	2264      	movs	r2, #100	; 0x64
   12f7c:	2100      	movs	r1, #0
   12f7e:	0018      	movs	r0, r3
   12f80:	4b76      	ldr	r3, [pc, #472]	; (1315c <vCommandConsoleTask+0x2ec>)
   12f82:	4798      	blx	r3
   12f84:	e0b5      	b.n	130f2 <vCommandConsoleTask+0x282>
        } else {
            /* The if() clause performs the processing after a newline character
is received.  This else clause performs the processing if any other
character is received. */

            if (true == isEscapeCode) {
   12f86:	4b6e      	ldr	r3, [pc, #440]	; (13140 <vCommandConsoleTask+0x2d0>)
   12f88:	781b      	ldrb	r3, [r3, #0]
   12f8a:	2b00      	cmp	r3, #0
   12f8c:	d059      	beq.n	13042 <vCommandConsoleTask+0x1d2>
                if (pcEscapeCodePos < CLI_PC_ESCAPE_CODE_SIZE) {
   12f8e:	4b6d      	ldr	r3, [pc, #436]	; (13144 <vCommandConsoleTask+0x2d4>)
   12f90:	781b      	ldrb	r3, [r3, #0]
   12f92:	2b03      	cmp	r3, #3
   12f94:	d80c      	bhi.n	12fb0 <vCommandConsoleTask+0x140>
                    pcEscapeCodes[pcEscapeCodePos++] = cRxedChar[0];
   12f96:	4b6b      	ldr	r3, [pc, #428]	; (13144 <vCommandConsoleTask+0x2d4>)
   12f98:	781b      	ldrb	r3, [r3, #0]
   12f9a:	1c5a      	adds	r2, r3, #1
   12f9c:	b2d1      	uxtb	r1, r2
   12f9e:	4a69      	ldr	r2, [pc, #420]	; (13144 <vCommandConsoleTask+0x2d4>)
   12fa0:	7011      	strb	r1, [r2, #0]
   12fa2:	001a      	movs	r2, r3
   12fa4:	230c      	movs	r3, #12
   12fa6:	18fb      	adds	r3, r7, r3
   12fa8:	7819      	ldrb	r1, [r3, #0]
   12faa:	4b6d      	ldr	r3, [pc, #436]	; (13160 <vCommandConsoleTask+0x2f0>)
   12fac:	5499      	strb	r1, [r3, r2]
   12fae:	e005      	b.n	12fbc <vCommandConsoleTask+0x14c>
                } else {
                    isEscapeCode = false;
   12fb0:	4b63      	ldr	r3, [pc, #396]	; (13140 <vCommandConsoleTask+0x2d0>)
   12fb2:	2200      	movs	r2, #0
   12fb4:	701a      	strb	r2, [r3, #0]
                    pcEscapeCodePos = 0;
   12fb6:	4b63      	ldr	r3, [pc, #396]	; (13144 <vCommandConsoleTask+0x2d4>)
   12fb8:	2200      	movs	r2, #0
   12fba:	701a      	strb	r2, [r3, #0]
                }

                if (pcEscapeCodePos >= CLI_PC_MIN_ESCAPE_CODE_SIZE) {
   12fbc:	4b61      	ldr	r3, [pc, #388]	; (13144 <vCommandConsoleTask+0x2d4>)
   12fbe:	781b      	ldrb	r3, [r3, #0]
   12fc0:	2b01      	cmp	r3, #1
   12fc2:	d999      	bls.n	12ef8 <vCommandConsoleTask+0x88>
                    // UP ARROW SHOW LAST COMMAND
                    if (strcasecmp(pcEscapeCodes, "oa")) {
   12fc4:	4a67      	ldr	r2, [pc, #412]	; (13164 <vCommandConsoleTask+0x2f4>)
   12fc6:	4b66      	ldr	r3, [pc, #408]	; (13160 <vCommandConsoleTask+0x2f0>)
   12fc8:	0011      	movs	r1, r2
   12fca:	0018      	movs	r0, r3
   12fcc:	4b66      	ldr	r3, [pc, #408]	; (13168 <vCommandConsoleTask+0x2f8>)
   12fce:	4798      	blx	r3
   12fd0:	1e03      	subs	r3, r0, #0
   12fd2:	d02f      	beq.n	13034 <vCommandConsoleTask+0x1c4>
                        /// Delete current line and add prompt (">")
                        sprintf(pcInputString, "%c[2K\r>", 27);
   12fd4:	4965      	ldr	r1, [pc, #404]	; (1316c <vCommandConsoleTask+0x2fc>)
   12fd6:	4b5c      	ldr	r3, [pc, #368]	; (13148 <vCommandConsoleTask+0x2d8>)
   12fd8:	221b      	movs	r2, #27
   12fda:	0018      	movs	r0, r3
   12fdc:	4b64      	ldr	r3, [pc, #400]	; (13170 <vCommandConsoleTask+0x300>)
   12fde:	4798      	blx	r3
                        SerialConsoleWriteString((char *)pcInputString);
   12fe0:	4b59      	ldr	r3, [pc, #356]	; (13148 <vCommandConsoleTask+0x2d8>)
   12fe2:	0018      	movs	r0, r3
   12fe4:	4b4e      	ldr	r3, [pc, #312]	; (13120 <vCommandConsoleTask+0x2b0>)
   12fe6:	4798      	blx	r3
                        /// Clear input buffer
                        cInputIndex = 0;
   12fe8:	2317      	movs	r3, #23
   12fea:	18fb      	adds	r3, r7, r3
   12fec:	2200      	movs	r2, #0
   12fee:	701a      	strb	r2, [r3, #0]
                        memset(pcInputString, 0x00, MAX_INPUT_LENGTH_CLI);
   12ff0:	4b55      	ldr	r3, [pc, #340]	; (13148 <vCommandConsoleTask+0x2d8>)
   12ff2:	2232      	movs	r2, #50	; 0x32
   12ff4:	2100      	movs	r1, #0
   12ff6:	0018      	movs	r0, r3
   12ff8:	4b58      	ldr	r3, [pc, #352]	; (1315c <vCommandConsoleTask+0x2ec>)
   12ffa:	4798      	blx	r3
                        /// Send last command
                        strncpy(pcInputString, pcLastCommand, MAX_INPUT_LENGTH_CLI - 1);
   12ffc:	4953      	ldr	r1, [pc, #332]	; (1314c <vCommandConsoleTask+0x2dc>)
   12ffe:	4b52      	ldr	r3, [pc, #328]	; (13148 <vCommandConsoleTask+0x2d8>)
   13000:	2231      	movs	r2, #49	; 0x31
   13002:	0018      	movs	r0, r3
   13004:	4b52      	ldr	r3, [pc, #328]	; (13150 <vCommandConsoleTask+0x2e0>)
   13006:	4798      	blx	r3
                        cInputIndex = (strlen(pcInputString) < MAX_INPUT_LENGTH_CLI - 1) ? strlen(pcLastCommand) : MAX_INPUT_LENGTH_CLI - 1;
   13008:	4b4f      	ldr	r3, [pc, #316]	; (13148 <vCommandConsoleTask+0x2d8>)
   1300a:	0018      	movs	r0, r3
   1300c:	4b59      	ldr	r3, [pc, #356]	; (13174 <vCommandConsoleTask+0x304>)
   1300e:	4798      	blx	r3
   13010:	0003      	movs	r3, r0
   13012:	2b30      	cmp	r3, #48	; 0x30
   13014:	d806      	bhi.n	13024 <vCommandConsoleTask+0x1b4>
   13016:	4b4d      	ldr	r3, [pc, #308]	; (1314c <vCommandConsoleTask+0x2dc>)
   13018:	0018      	movs	r0, r3
   1301a:	4b56      	ldr	r3, [pc, #344]	; (13174 <vCommandConsoleTask+0x304>)
   1301c:	4798      	blx	r3
   1301e:	0003      	movs	r3, r0
   13020:	b2da      	uxtb	r2, r3
   13022:	e000      	b.n	13026 <vCommandConsoleTask+0x1b6>
   13024:	2231      	movs	r2, #49	; 0x31
   13026:	2317      	movs	r3, #23
   13028:	18fb      	adds	r3, r7, r3
   1302a:	701a      	strb	r2, [r3, #0]
                        SerialConsoleWriteString(pcInputString);
   1302c:	4b46      	ldr	r3, [pc, #280]	; (13148 <vCommandConsoleTask+0x2d8>)
   1302e:	0018      	movs	r0, r3
   13030:	4b3b      	ldr	r3, [pc, #236]	; (13120 <vCommandConsoleTask+0x2b0>)
   13032:	4798      	blx	r3
                    }

                    isEscapeCode = false;
   13034:	4b42      	ldr	r3, [pc, #264]	; (13140 <vCommandConsoleTask+0x2d0>)
   13036:	2200      	movs	r2, #0
   13038:	701a      	strb	r2, [r3, #0]
                    pcEscapeCodePos = 0;
   1303a:	4b42      	ldr	r3, [pc, #264]	; (13144 <vCommandConsoleTask+0x2d4>)
   1303c:	2200      	movs	r2, #0
   1303e:	701a      	strb	r2, [r3, #0]
   13040:	e75a      	b.n	12ef8 <vCommandConsoleTask+0x88>
            }
            /* The if() clause performs the processing after a newline character
            is received.  This else clause performs the processing if any other
            character is received. */

            else if (cRxedChar[0] == '\r') {
   13042:	230c      	movs	r3, #12
   13044:	18fb      	adds	r3, r7, r3
   13046:	781b      	ldrb	r3, [r3, #0]
   13048:	2b0d      	cmp	r3, #13
   1304a:	d100      	bne.n	1304e <vCommandConsoleTask+0x1de>
   1304c:	e754      	b.n	12ef8 <vCommandConsoleTask+0x88>
                /* Ignore carriage returns. */
            } else if (cRxedChar[0] == ASCII_BACKSPACE || cRxedChar[0] == ASCII_DELETE) {
   1304e:	230c      	movs	r3, #12
   13050:	18fb      	adds	r3, r7, r3
   13052:	781b      	ldrb	r3, [r3, #0]
   13054:	2b08      	cmp	r3, #8
   13056:	d004      	beq.n	13062 <vCommandConsoleTask+0x1f2>
   13058:	230c      	movs	r3, #12
   1305a:	18fb      	adds	r3, r7, r3
   1305c:	781b      	ldrb	r3, [r3, #0]
   1305e:	2b7f      	cmp	r3, #127	; 0x7f
   13060:	d11c      	bne.n	1309c <vCommandConsoleTask+0x22c>
                char erase[4] = {0x08, 0x20, 0x08, 0x00};
   13062:	2308      	movs	r3, #8
   13064:	18fb      	adds	r3, r7, r3
   13066:	4a44      	ldr	r2, [pc, #272]	; (13178 <vCommandConsoleTask+0x308>)
   13068:	6812      	ldr	r2, [r2, #0]
   1306a:	601a      	str	r2, [r3, #0]
                SerialConsoleWriteString(erase);
   1306c:	2308      	movs	r3, #8
   1306e:	18fb      	adds	r3, r7, r3
   13070:	0018      	movs	r0, r3
   13072:	4b2b      	ldr	r3, [pc, #172]	; (13120 <vCommandConsoleTask+0x2b0>)
   13074:	4798      	blx	r3
                /* Backspace was pressed.  Erase the last character in the input
                buffer - if there are any. */
                if (cInputIndex > 0) {
   13076:	2317      	movs	r3, #23
   13078:	18fb      	adds	r3, r7, r3
   1307a:	781b      	ldrb	r3, [r3, #0]
   1307c:	2b00      	cmp	r3, #0
   1307e:	d037      	beq.n	130f0 <vCommandConsoleTask+0x280>
                    cInputIndex--;
   13080:	2317      	movs	r3, #23
   13082:	18fb      	adds	r3, r7, r3
   13084:	781a      	ldrb	r2, [r3, #0]
   13086:	2317      	movs	r3, #23
   13088:	18fb      	adds	r3, r7, r3
   1308a:	3a01      	subs	r2, #1
   1308c:	701a      	strb	r2, [r3, #0]
                    pcInputString[cInputIndex] = 0;
   1308e:	2317      	movs	r3, #23
   13090:	18fb      	adds	r3, r7, r3
   13092:	781b      	ldrb	r3, [r3, #0]
   13094:	4a2c      	ldr	r2, [pc, #176]	; (13148 <vCommandConsoleTask+0x2d8>)
   13096:	2100      	movs	r1, #0
   13098:	54d1      	strb	r1, [r2, r3]
            } else if (cRxedChar[0] == ASCII_BACKSPACE || cRxedChar[0] == ASCII_DELETE) {
   1309a:	e029      	b.n	130f0 <vCommandConsoleTask+0x280>
                }
            }
            // ESC
            else if (cRxedChar[0] == ASCII_ESC) {
   1309c:	230c      	movs	r3, #12
   1309e:	18fb      	adds	r3, r7, r3
   130a0:	781b      	ldrb	r3, [r3, #0]
   130a2:	2b1b      	cmp	r3, #27
   130a4:	d106      	bne.n	130b4 <vCommandConsoleTask+0x244>
                isEscapeCode = true;  // Next characters will be code arguments
   130a6:	4b26      	ldr	r3, [pc, #152]	; (13140 <vCommandConsoleTask+0x2d0>)
   130a8:	2201      	movs	r2, #1
   130aa:	701a      	strb	r2, [r3, #0]
                pcEscapeCodePos = 0;
   130ac:	4b25      	ldr	r3, [pc, #148]	; (13144 <vCommandConsoleTask+0x2d4>)
   130ae:	2200      	movs	r2, #0
   130b0:	701a      	strb	r2, [r3, #0]
   130b2:	e721      	b.n	12ef8 <vCommandConsoleTask+0x88>
            } else {
                /* A character was entered.  It was not a new line, backspace
                or carriage return, so it is accepted as part of the input and
                placed into the input buffer.  When a n is entered the complete
                string will be passed to the command interpreter. */
                if (cInputIndex < MAX_INPUT_LENGTH_CLI) {
   130b4:	2317      	movs	r3, #23
   130b6:	18fb      	adds	r3, r7, r3
   130b8:	781b      	ldrb	r3, [r3, #0]
   130ba:	2b31      	cmp	r3, #49	; 0x31
   130bc:	d80e      	bhi.n	130dc <vCommandConsoleTask+0x26c>
                    pcInputString[cInputIndex] = cRxedChar[0];
   130be:	2317      	movs	r3, #23
   130c0:	18fb      	adds	r3, r7, r3
   130c2:	781b      	ldrb	r3, [r3, #0]
   130c4:	220c      	movs	r2, #12
   130c6:	18ba      	adds	r2, r7, r2
   130c8:	7811      	ldrb	r1, [r2, #0]
   130ca:	4a1f      	ldr	r2, [pc, #124]	; (13148 <vCommandConsoleTask+0x2d8>)
   130cc:	54d1      	strb	r1, [r2, r3]
                    cInputIndex++;
   130ce:	2317      	movs	r3, #23
   130d0:	18fb      	adds	r3, r7, r3
   130d2:	781a      	ldrb	r2, [r3, #0]
   130d4:	2317      	movs	r3, #23
   130d6:	18fb      	adds	r3, r7, r3
   130d8:	3201      	adds	r2, #1
   130da:	701a      	strb	r2, [r3, #0]
                }

                // Order Echo
                cRxedChar[1] = 0;
   130dc:	230c      	movs	r3, #12
   130de:	18fb      	adds	r3, r7, r3
   130e0:	2200      	movs	r2, #0
   130e2:	705a      	strb	r2, [r3, #1]
                SerialConsoleWriteString(&cRxedChar[0]);
   130e4:	230c      	movs	r3, #12
   130e6:	18fb      	adds	r3, r7, r3
   130e8:	0018      	movs	r0, r3
   130ea:	4b0d      	ldr	r3, [pc, #52]	; (13120 <vCommandConsoleTask+0x2b0>)
   130ec:	4798      	blx	r3
   130ee:	e703      	b.n	12ef8 <vCommandConsoleTask+0x88>
            } else if (cRxedChar[0] == ASCII_BACKSPACE || cRxedChar[0] == ASCII_DELETE) {
   130f0:	46c0      	nop			; (mov r8, r8)
        FreeRTOS_read(&cRxedChar[0]);
   130f2:	e701      	b.n	12ef8 <vCommandConsoleTask+0x88>
   130f4:	000347c4 	.word	0x000347c4
   130f8:	000165ed 	.word	0x000165ed
   130fc:	00034844 	.word	0x00034844
   13100:	000347d4 	.word	0x000347d4
   13104:	000347e4 	.word	0x000347e4
   13108:	000347f4 	.word	0x000347f4
   1310c:	00034804 	.word	0x00034804
   13110:	00034814 	.word	0x00034814
   13114:	00034824 	.word	0x00034824
   13118:	00034834 	.word	0x00034834
   1311c:	000344f4 	.word	0x000344f4
   13120:	0001c519 	.word	0x0001c519
   13124:	00018bb9 	.word	0x00018bb9
   13128:	20004220 	.word	0x20004220
   1312c:	000346c8 	.word	0x000346c8
   13130:	0001c605 	.word	0x0001c605
   13134:	0001a9a5 	.word	0x0001a9a5
   13138:	0001317d 	.word	0x0001317d
   1313c:	000346e8 	.word	0x000346e8
   13140:	200003a4 	.word	0x200003a4
   13144:	200003a5 	.word	0x200003a5
   13148:	200003dc 	.word	0x200003dc
   1314c:	200003a8 	.word	0x200003a8
   13150:	000334ff 	.word	0x000334ff
   13154:	20000410 	.word	0x20000410
   13158:	0001665d 	.word	0x0001665d
   1315c:	00033117 	.word	0x00033117
   13160:	20000474 	.word	0x20000474
   13164:	000346ec 	.word	0x000346ec
   13168:	00033419 	.word	0x00033419
   1316c:	000346f0 	.word	0x000346f0
   13170:	000333d5 	.word	0x000333d5
   13174:	000334cf 	.word	0x000334cf
   13178:	000346f8 	.word	0x000346f8

0001317c <FreeRTOS_read>:
* @details		The function waits to acquire semaphone cliCharReadySemaphore then calls SerialConsoleReadCharacter to read 
                a character, if -1 is received it repeats, if 0 is received, it will load the character into character variable
* @note         None
*****************************************************************************/
static void FreeRTOS_read(char *character)
{   
   1317c:	b580      	push	{r7, lr}
   1317e:	b084      	sub	sp, #16
   13180:	af00      	add	r7, sp, #0
   13182:	6078      	str	r0, [r7, #4]
    // SerialConsoleReadCharacter returns -1 when no characters are received
    // and 0 when it has received character
    int is_rx_char = SerialConsoleReadCharacter((uint8_t *)character);
   13184:	687b      	ldr	r3, [r7, #4]
   13186:	0018      	movs	r0, r3
   13188:	4b0d      	ldr	r3, [pc, #52]	; (131c0 <FreeRTOS_read+0x44>)
   1318a:	4798      	blx	r3
   1318c:	0003      	movs	r3, r0
   1318e:	60fb      	str	r3, [r7, #12]
    while(is_rx_char==-1){
   13190:	e00f      	b.n	131b2 <FreeRTOS_read+0x36>
        if(xSemaphoreTake(cliCharReadySemaphore,portMAX_DELAY)){
   13192:	4b0c      	ldr	r3, [pc, #48]	; (131c4 <FreeRTOS_read+0x48>)
   13194:	681a      	ldr	r2, [r3, #0]
   13196:	2301      	movs	r3, #1
   13198:	425b      	negs	r3, r3
   1319a:	0019      	movs	r1, r3
   1319c:	0010      	movs	r0, r2
   1319e:	4b0a      	ldr	r3, [pc, #40]	; (131c8 <FreeRTOS_read+0x4c>)
   131a0:	4798      	blx	r3
   131a2:	1e03      	subs	r3, r0, #0
   131a4:	d005      	beq.n	131b2 <FreeRTOS_read+0x36>
            is_rx_char = SerialConsoleReadCharacter((uint8_t *)character);
   131a6:	687b      	ldr	r3, [r7, #4]
   131a8:	0018      	movs	r0, r3
   131aa:	4b05      	ldr	r3, [pc, #20]	; (131c0 <FreeRTOS_read+0x44>)
   131ac:	4798      	blx	r3
   131ae:	0003      	movs	r3, r0
   131b0:	60fb      	str	r3, [r7, #12]
    while(is_rx_char==-1){
   131b2:	68fb      	ldr	r3, [r7, #12]
   131b4:	3301      	adds	r3, #1
   131b6:	d0ec      	beq.n	13192 <FreeRTOS_read+0x16>
        }

    }
    // vTaskSuspend(NULL);  // We suspend ourselves. Please remove this when doing your code
}
   131b8:	46c0      	nop			; (mov r8, r8)
   131ba:	46bd      	mov	sp, r7
   131bc:	b004      	add	sp, #16
   131be:	bd80      	pop	{r7, pc}
   131c0:	0001c5b5 	.word	0x0001c5b5
   131c4:	20004220 	.word	0x20004220
   131c8:	00019b71 	.word	0x00019b71

000131cc <CliCharReadySemaphoreGiveFromISR>:
 * @brief		Give cliCharReadySemaphore binary semaphore from an ISR
 * @details
 * @note
 */
void CliCharReadySemaphoreGiveFromISR(void)
{
   131cc:	b580      	push	{r7, lr}
   131ce:	af00      	add	r7, sp, #0
    static BaseType_t xHigherPriorityTaskWoken;
    xHigherPriorityTaskWoken = pdFALSE;
   131d0:	4b0a      	ldr	r3, [pc, #40]	; (131fc <CliCharReadySemaphoreGiveFromISR+0x30>)
   131d2:	2200      	movs	r2, #0
   131d4:	601a      	str	r2, [r3, #0]
    xSemaphoreGiveFromISR(cliCharReadySemaphore, &xHigherPriorityTaskWoken);
   131d6:	4b0a      	ldr	r3, [pc, #40]	; (13200 <CliCharReadySemaphoreGiveFromISR+0x34>)
   131d8:	681b      	ldr	r3, [r3, #0]
   131da:	4a08      	ldr	r2, [pc, #32]	; (131fc <CliCharReadySemaphoreGiveFromISR+0x30>)
   131dc:	0011      	movs	r1, r2
   131de:	0018      	movs	r0, r3
   131e0:	4b08      	ldr	r3, [pc, #32]	; (13204 <CliCharReadySemaphoreGiveFromISR+0x38>)
   131e2:	4798      	blx	r3
    portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
   131e4:	4b05      	ldr	r3, [pc, #20]	; (131fc <CliCharReadySemaphoreGiveFromISR+0x30>)
   131e6:	681b      	ldr	r3, [r3, #0]
   131e8:	2b00      	cmp	r3, #0
   131ea:	d003      	beq.n	131f4 <CliCharReadySemaphoreGiveFromISR+0x28>
   131ec:	4b06      	ldr	r3, [pc, #24]	; (13208 <CliCharReadySemaphoreGiveFromISR+0x3c>)
   131ee:	2280      	movs	r2, #128	; 0x80
   131f0:	0552      	lsls	r2, r2, #21
   131f2:	601a      	str	r2, [r3, #0]
}
   131f4:	46c0      	nop			; (mov r8, r8)
   131f6:	46bd      	mov	sp, r7
   131f8:	bd80      	pop	{r7, pc}
   131fa:	46c0      	nop			; (mov r8, r8)
   131fc:	20000478 	.word	0x20000478
   13200:	20004220 	.word	0x20004220
   13204:	000194e9 	.word	0x000194e9
   13208:	e000ed04 	.word	0xe000ed04

0001320c <xCliClearTerminalScreen>:
// THIS COMMAND USES vt100 TERMINAL COMMANDS TO CLEAR THE SCREEN ON A TERMINAL PROGRAM LIKE TERA TERM
// SEE http://www.csie.ntu.edu.tw/~r92094/c++/VT100.html for more info
// CLI SPECIFIC COMMANDS
static char bufCli[CLI_MSG_LEN];
BaseType_t xCliClearTerminalScreen(char *pcWriteBuffer, size_t xWriteBufferLen, const int8_t *pcCommandString)
{
   1320c:	b590      	push	{r4, r7, lr}
   1320e:	b087      	sub	sp, #28
   13210:	af00      	add	r7, sp, #0
   13212:	60f8      	str	r0, [r7, #12]
   13214:	60b9      	str	r1, [r7, #8]
   13216:	607a      	str	r2, [r7, #4]
    char clearScreen = ASCII_ESC;
   13218:	2317      	movs	r3, #23
   1321a:	18fb      	adds	r3, r7, r3
   1321c:	221b      	movs	r2, #27
   1321e:	701a      	strb	r2, [r3, #0]
    snprintf(bufCli, CLI_MSG_LEN - 1, "%c[2J", clearScreen);
   13220:	2317      	movs	r3, #23
   13222:	18fb      	adds	r3, r7, r3
   13224:	781b      	ldrb	r3, [r3, #0]
   13226:	4a08      	ldr	r2, [pc, #32]	; (13248 <xCliClearTerminalScreen+0x3c>)
   13228:	4808      	ldr	r0, [pc, #32]	; (1324c <xCliClearTerminalScreen+0x40>)
   1322a:	210f      	movs	r1, #15
   1322c:	4c08      	ldr	r4, [pc, #32]	; (13250 <xCliClearTerminalScreen+0x44>)
   1322e:	47a0      	blx	r4
    snprintf(pcWriteBuffer, xWriteBufferLen, bufCli);
   13230:	4a06      	ldr	r2, [pc, #24]	; (1324c <xCliClearTerminalScreen+0x40>)
   13232:	68b9      	ldr	r1, [r7, #8]
   13234:	68fb      	ldr	r3, [r7, #12]
   13236:	0018      	movs	r0, r3
   13238:	4b05      	ldr	r3, [pc, #20]	; (13250 <xCliClearTerminalScreen+0x44>)
   1323a:	4798      	blx	r3
    return pdFALSE;
   1323c:	2300      	movs	r3, #0
}
   1323e:	0018      	movs	r0, r3
   13240:	46bd      	mov	sp, r7
   13242:	b007      	add	sp, #28
   13244:	bd90      	pop	{r4, r7, pc}
   13246:	46c0      	nop			; (mov r8, r8)
   13248:	000346fc 	.word	0x000346fc
   1324c:	20000394 	.word	0x20000394
   13250:	00033371 	.word	0x00033371

00013254 <CLI_OTAU>:

// Example CLI Command. Reads from the IMU and returns data.
BaseType_t CLI_OTAU(int8_t *pcWriteBuffer, size_t xWriteBufferLen, const int8_t *pcCommandString)
{
   13254:	b580      	push	{r7, lr}
   13256:	b084      	sub	sp, #16
   13258:	af00      	add	r7, sp, #0
   1325a:	60f8      	str	r0, [r7, #12]
   1325c:	60b9      	str	r1, [r7, #8]
   1325e:	607a      	str	r2, [r7, #4]
    WifiHandlerSetState(WIFI_DOWNLOAD_INIT);
   13260:	2002      	movs	r0, #2
   13262:	4b06      	ldr	r3, [pc, #24]	; (1327c <CLI_OTAU+0x28>)
   13264:	4798      	blx	r3
    vTaskDelay(10000); 
   13266:	4b06      	ldr	r3, [pc, #24]	; (13280 <CLI_OTAU+0x2c>)
   13268:	0018      	movs	r0, r3
   1326a:	4b06      	ldr	r3, [pc, #24]	; (13284 <CLI_OTAU+0x30>)
   1326c:	4798      	blx	r3
    system_reset();
   1326e:	4b06      	ldr	r3, [pc, #24]	; (13288 <CLI_OTAU+0x34>)
   13270:	4798      	blx	r3
    return pdFALSE;
   13272:	2300      	movs	r3, #0
}
   13274:	0018      	movs	r0, r3
   13276:	46bd      	mov	sp, r7
   13278:	b004      	add	sp, #16
   1327a:	bd80      	pop	{r7, pc}
   1327c:	00015c55 	.word	0x00015c55
   13280:	00002710 	.word	0x00002710
   13284:	0001a8c5 	.word	0x0001a8c5
   13288:	00012e5d 	.word	0x00012e5d

0001328c <CLI_ResetDevice>:

// Example CLI Command. Resets system.
BaseType_t CLI_ResetDevice(int8_t *pcWriteBuffer, size_t xWriteBufferLen, const int8_t *pcCommandString)
{
   1328c:	b580      	push	{r7, lr}
   1328e:	b084      	sub	sp, #16
   13290:	af00      	add	r7, sp, #0
   13292:	60f8      	str	r0, [r7, #12]
   13294:	60b9      	str	r1, [r7, #8]
   13296:	607a      	str	r2, [r7, #4]
    system_reset();
   13298:	4b03      	ldr	r3, [pc, #12]	; (132a8 <CLI_ResetDevice+0x1c>)
   1329a:	4798      	blx	r3
    return pdFALSE;
   1329c:	2300      	movs	r3, #0
}
   1329e:	0018      	movs	r0, r3
   132a0:	46bd      	mov	sp, r7
   132a2:	b004      	add	sp, #16
   132a4:	bd80      	pop	{r7, pc}
   132a6:	46c0      	nop			; (mov r8, r8)
   132a8:	00012e5d 	.word	0x00012e5d

000132ac <CLI_Version>:
// Version CLI Command 
BaseType_t CLI_Version(int8_t *pcWriteBuffer, size_t xWriteBufferLen, const int8_t *pcCommandString)
{
   132ac:	b590      	push	{r4, r7, lr}
   132ae:	b085      	sub	sp, #20
   132b0:	af00      	add	r7, sp, #0
   132b2:	60f8      	str	r0, [r7, #12]
   132b4:	60b9      	str	r1, [r7, #8]
   132b6:	607a      	str	r2, [r7, #4]
	// Use snprintf to safely format the firmware version string into the provided buffer
	snprintf((char *)pcWriteBuffer, xWriteBufferLen, "Firmware Version: %s\r\n", FIRMWARE_VERSION);
   132b8:	4b05      	ldr	r3, [pc, #20]	; (132d0 <CLI_Version+0x24>)
   132ba:	4a06      	ldr	r2, [pc, #24]	; (132d4 <CLI_Version+0x28>)
   132bc:	68b9      	ldr	r1, [r7, #8]
   132be:	68f8      	ldr	r0, [r7, #12]
   132c0:	4c05      	ldr	r4, [pc, #20]	; (132d8 <CLI_Version+0x2c>)
   132c2:	47a0      	blx	r4
	return pdFALSE; // Indicates no further output is expected
   132c4:	2300      	movs	r3, #0
}
   132c6:	0018      	movs	r0, r3
   132c8:	46bd      	mov	sp, r7
   132ca:	b005      	add	sp, #20
   132cc:	bd90      	pop	{r4, r7, pc}
   132ce:	46c0      	nop			; (mov r8, r8)
   132d0:	00034704 	.word	0x00034704
   132d4:	0003470c 	.word	0x0003470c
   132d8:	00033371 	.word	0x00033371

000132dc <CLI_Ticks>:

// Ticks CLI Command 
BaseType_t CLI_Ticks(int8_t *pcWriteBuffer, size_t xWriteBufferLen, const int8_t *pcCommandString)
{
   132dc:	b590      	push	{r4, r7, lr}
   132de:	b087      	sub	sp, #28
   132e0:	af00      	add	r7, sp, #0
   132e2:	60f8      	str	r0, [r7, #12]
   132e4:	60b9      	str	r1, [r7, #8]
   132e6:	607a      	str	r2, [r7, #4]
	// Retrieve the current tick count using FreeRTOS's xTaskGetTickCount()
	const TickType_t ticks = xTaskGetTickCount();
   132e8:	4b07      	ldr	r3, [pc, #28]	; (13308 <CLI_Ticks+0x2c>)
   132ea:	4798      	blx	r3
   132ec:	0003      	movs	r3, r0
   132ee:	617b      	str	r3, [r7, #20]
	// Format the tick count into the provided buffer
	snprintf((char *)pcWriteBuffer, xWriteBufferLen, "Ticks since start: %lu\r\n", (unsigned long)ticks);
   132f0:	697b      	ldr	r3, [r7, #20]
   132f2:	4a06      	ldr	r2, [pc, #24]	; (1330c <CLI_Ticks+0x30>)
   132f4:	68b9      	ldr	r1, [r7, #8]
   132f6:	68f8      	ldr	r0, [r7, #12]
   132f8:	4c05      	ldr	r4, [pc, #20]	; (13310 <CLI_Ticks+0x34>)
   132fa:	47a0      	blx	r4
	return pdFALSE; // Indicates no further output is expected
   132fc:	2300      	movs	r3, #0
}
   132fe:	0018      	movs	r0, r3
   13300:	46bd      	mov	sp, r7
   13302:	b007      	add	sp, #28
   13304:	bd90      	pop	{r4, r7, pc}
   13306:	46c0      	nop			; (mov r8, r8)
   13308:	0001ad0d 	.word	0x0001ad0d
   1330c:	00034724 	.word	0x00034724
   13310:	00033371 	.word	0x00033371

00013314 <CLI_i2cScan>:
 * @param    p_cli
 * @param    argc
 * @param    argv
 ******************************************************************************/
BaseType_t CLI_i2cScan(int8_t *pcWriteBuffer, size_t xWriteBufferLen, const int8_t *pcCommandString)
{
   13314:	b590      	push	{r4, r7, lr}
   13316:	b08f      	sub	sp, #60	; 0x3c
   13318:	af00      	add	r7, sp, #0
   1331a:	60f8      	str	r0, [r7, #12]
   1331c:	60b9      	str	r1, [r7, #8]
   1331e:	607a      	str	r2, [r7, #4]
    I2C_Data i2cDevice;
    uint8_t address;
    // Send 0 command byte
    uint8_t dataOut[2] = {0, 0};
   13320:	2318      	movs	r3, #24
   13322:	18fb      	adds	r3, r7, r3
   13324:	2200      	movs	r2, #0
   13326:	701a      	strb	r2, [r3, #0]
   13328:	2318      	movs	r3, #24
   1332a:	18fb      	adds	r3, r7, r3
   1332c:	2200      	movs	r2, #0
   1332e:	705a      	strb	r2, [r3, #1]
    uint8_t dataIn[2];
    dataOut[0] = 0;
   13330:	2318      	movs	r3, #24
   13332:	18fb      	adds	r3, r7, r3
   13334:	2200      	movs	r2, #0
   13336:	701a      	strb	r2, [r3, #0]
    dataOut[1] = 0;
   13338:	2318      	movs	r3, #24
   1333a:	18fb      	adds	r3, r7, r3
   1333c:	2200      	movs	r2, #0
   1333e:	705a      	strb	r2, [r3, #1]
    i2cDevice.address = 0;
   13340:	231c      	movs	r3, #28
   13342:	18fb      	adds	r3, r7, r3
   13344:	2200      	movs	r2, #0
   13346:	701a      	strb	r2, [r3, #0]
    i2cDevice.msgIn = (uint8_t *)&dataIn[0];
   13348:	231c      	movs	r3, #28
   1334a:	18fb      	adds	r3, r7, r3
   1334c:	2214      	movs	r2, #20
   1334e:	18ba      	adds	r2, r7, r2
   13350:	609a      	str	r2, [r3, #8]
    i2cDevice.lenOut = 1;
   13352:	231c      	movs	r3, #28
   13354:	18fb      	adds	r3, r7, r3
   13356:	2201      	movs	r2, #1
   13358:	81da      	strh	r2, [r3, #14]
    i2cDevice.msgOut = (const uint8_t *)&dataOut[0];
   1335a:	231c      	movs	r3, #28
   1335c:	18fb      	adds	r3, r7, r3
   1335e:	2218      	movs	r2, #24
   13360:	18ba      	adds	r2, r7, r2
   13362:	605a      	str	r2, [r3, #4]
    i2cDevice.lenIn = 1;
   13364:	231c      	movs	r3, #28
   13366:	18fb      	adds	r3, r7, r3
   13368:	2201      	movs	r2, #1
   1336a:	819a      	strh	r2, [r3, #12]

    SerialConsoleWriteString("0  1  2  3  4  5  6  7  8  9  a  b  c  d  e  f\r\n");
   1336c:	4b2c      	ldr	r3, [pc, #176]	; (13420 <CLI_i2cScan+0x10c>)
   1336e:	0018      	movs	r0, r3
   13370:	4b2c      	ldr	r3, [pc, #176]	; (13424 <CLI_i2cScan+0x110>)
   13372:	4798      	blx	r3
    for (int i = 0; i < 128; i += 16) {
   13374:	2300      	movs	r3, #0
   13376:	637b      	str	r3, [r7, #52]	; 0x34
   13378:	e046      	b.n	13408 <CLI_i2cScan+0xf4>
        snprintf(bufCli, CLI_MSG_LEN - 1, "%02x: ", i);
   1337a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   1337c:	4a2a      	ldr	r2, [pc, #168]	; (13428 <CLI_i2cScan+0x114>)
   1337e:	482b      	ldr	r0, [pc, #172]	; (1342c <CLI_i2cScan+0x118>)
   13380:	210f      	movs	r1, #15
   13382:	4c2b      	ldr	r4, [pc, #172]	; (13430 <CLI_i2cScan+0x11c>)
   13384:	47a0      	blx	r4
        SerialConsoleWriteString(bufCli);
   13386:	4b29      	ldr	r3, [pc, #164]	; (1342c <CLI_i2cScan+0x118>)
   13388:	0018      	movs	r0, r3
   1338a:	4b26      	ldr	r3, [pc, #152]	; (13424 <CLI_i2cScan+0x110>)
   1338c:	4798      	blx	r3

        for (int j = 0; j < 16; j++) {
   1338e:	2300      	movs	r3, #0
   13390:	633b      	str	r3, [r7, #48]	; 0x30
   13392:	e02f      	b.n	133f4 <CLI_i2cScan+0xe0>
            i2cDevice.address = (i + j) << 1;
   13394:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   13396:	b2da      	uxtb	r2, r3
   13398:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   1339a:	b2db      	uxtb	r3, r3
   1339c:	18d3      	adds	r3, r2, r3
   1339e:	b2db      	uxtb	r3, r3
   133a0:	18db      	adds	r3, r3, r3
   133a2:	b2da      	uxtb	r2, r3
   133a4:	231c      	movs	r3, #28
   133a6:	18fb      	adds	r3, r7, r3
   133a8:	701a      	strb	r2, [r3, #0]

            int32_t ret = I2cWriteDataWait(&i2cDevice, 100);
   133aa:	231c      	movs	r3, #28
   133ac:	18fb      	adds	r3, r7, r3
   133ae:	2164      	movs	r1, #100	; 0x64
   133b0:	0018      	movs	r0, r3
   133b2:	4b20      	ldr	r3, [pc, #128]	; (13434 <CLI_i2cScan+0x120>)
   133b4:	4798      	blx	r3
   133b6:	0003      	movs	r3, r0
   133b8:	62fb      	str	r3, [r7, #44]	; 0x2c
            if (ret == 0) {
   133ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   133bc:	2b00      	cmp	r3, #0
   133be:	d10c      	bne.n	133da <CLI_i2cScan+0xc6>
                snprintf(bufCli, CLI_MSG_LEN - 1, "%02x: ", i2cDevice.address);
   133c0:	231c      	movs	r3, #28
   133c2:	18fb      	adds	r3, r7, r3
   133c4:	781b      	ldrb	r3, [r3, #0]
   133c6:	4a18      	ldr	r2, [pc, #96]	; (13428 <CLI_i2cScan+0x114>)
   133c8:	4818      	ldr	r0, [pc, #96]	; (1342c <CLI_i2cScan+0x118>)
   133ca:	210f      	movs	r1, #15
   133cc:	4c18      	ldr	r4, [pc, #96]	; (13430 <CLI_i2cScan+0x11c>)
   133ce:	47a0      	blx	r4
                SerialConsoleWriteString(bufCli);
   133d0:	4b16      	ldr	r3, [pc, #88]	; (1342c <CLI_i2cScan+0x118>)
   133d2:	0018      	movs	r0, r3
   133d4:	4b13      	ldr	r3, [pc, #76]	; (13424 <CLI_i2cScan+0x110>)
   133d6:	4798      	blx	r3
   133d8:	e009      	b.n	133ee <CLI_i2cScan+0xda>
            } else {
                snprintf(bufCli, CLI_MSG_LEN - 1, "X ");
   133da:	4b14      	ldr	r3, [pc, #80]	; (1342c <CLI_i2cScan+0x118>)
   133dc:	4a16      	ldr	r2, [pc, #88]	; (13438 <CLI_i2cScan+0x124>)
   133de:	8811      	ldrh	r1, [r2, #0]
   133e0:	8019      	strh	r1, [r3, #0]
   133e2:	7892      	ldrb	r2, [r2, #2]
   133e4:	709a      	strb	r2, [r3, #2]
                SerialConsoleWriteString(bufCli);
   133e6:	4b11      	ldr	r3, [pc, #68]	; (1342c <CLI_i2cScan+0x118>)
   133e8:	0018      	movs	r0, r3
   133ea:	4b0e      	ldr	r3, [pc, #56]	; (13424 <CLI_i2cScan+0x110>)
   133ec:	4798      	blx	r3
        for (int j = 0; j < 16; j++) {
   133ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   133f0:	3301      	adds	r3, #1
   133f2:	633b      	str	r3, [r7, #48]	; 0x30
   133f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   133f6:	2b0f      	cmp	r3, #15
   133f8:	ddcc      	ble.n	13394 <CLI_i2cScan+0x80>
            }
        }
        SerialConsoleWriteString("\r\n");
   133fa:	4b10      	ldr	r3, [pc, #64]	; (1343c <CLI_i2cScan+0x128>)
   133fc:	0018      	movs	r0, r3
   133fe:	4b09      	ldr	r3, [pc, #36]	; (13424 <CLI_i2cScan+0x110>)
   13400:	4798      	blx	r3
    for (int i = 0; i < 128; i += 16) {
   13402:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   13404:	3310      	adds	r3, #16
   13406:	637b      	str	r3, [r7, #52]	; 0x34
   13408:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   1340a:	2b7f      	cmp	r3, #127	; 0x7f
   1340c:	ddb5      	ble.n	1337a <CLI_i2cScan+0x66>
    }
    SerialConsoleWriteString("\r\n");
   1340e:	4b0b      	ldr	r3, [pc, #44]	; (1343c <CLI_i2cScan+0x128>)
   13410:	0018      	movs	r0, r3
   13412:	4b04      	ldr	r3, [pc, #16]	; (13424 <CLI_i2cScan+0x110>)
   13414:	4798      	blx	r3
    return pdFALSE;
   13416:	2300      	movs	r3, #0
}
   13418:	0018      	movs	r0, r3
   1341a:	46bd      	mov	sp, r7
   1341c:	b00f      	add	sp, #60	; 0x3c
   1341e:	bd90      	pop	{r4, r7, pc}
   13420:	00034740 	.word	0x00034740
   13424:	0001c519 	.word	0x0001c519
   13428:	00034774 	.word	0x00034774
   1342c:	20000394 	.word	0x20000394
   13430:	00033371 	.word	0x00033371
   13434:	00013d75 	.word	0x00013d75
   13438:	0003477c 	.word	0x0003477c
   1343c:	000346e8 	.word	0x000346e8

00013440 <CLI_IMU_data>:
 * @param pcWriteBuffer 
 * @param xWriteBufferLen 
 * @param pcCommandString 
 * @return BaseType_t 
 */
BaseType_t CLI_IMU_data(int8_t *pcWriteBuffer, size_t xWriteBufferLen, const int8_t *pcCommandString){
   13440:	b5b0      	push	{r4, r5, r7, lr}
   13442:	b088      	sub	sp, #32
   13444:	af02      	add	r7, sp, #8
   13446:	60f8      	str	r0, [r7, #12]
   13448:	60b9      	str	r1, [r7, #8]
   1344a:	607a      	str	r2, [r7, #4]
    static int16_t raw_acceleration_data[3];
    static float acceleration_mg[3];
    uint8_t data_ready_flag;
    stmdev_ctx_t *dev_ctx = GetImuStruct();
   1344c:	4b2c      	ldr	r3, [pc, #176]	; (13500 <CLI_IMU_data+0xc0>)
   1344e:	4798      	blx	r3
   13450:	0003      	movs	r3, r0
   13452:	617b      	str	r3, [r7, #20]
    data_ready_flag = 0;
   13454:	2313      	movs	r3, #19
   13456:	18fb      	adds	r3, r7, r3
   13458:	2200      	movs	r2, #0
   1345a:	701a      	strb	r2, [r3, #0]
    xl_flag_data_ready_get(dev_ctx, &data_ready_flag);
   1345c:	2313      	movs	r3, #19
   1345e:	18fa      	adds	r2, r7, r3
   13460:	697b      	ldr	r3, [r7, #20]
   13462:	0011      	movs	r1, r2
   13464:	0018      	movs	r0, r3
   13466:	4b27      	ldr	r3, [pc, #156]	; (13504 <CLI_IMU_data+0xc4>)
   13468:	4798      	blx	r3
    if(data_ready_flag){
   1346a:	2313      	movs	r3, #19
   1346c:	18fb      	adds	r3, r7, r3
   1346e:	781b      	ldrb	r3, [r3, #0]
   13470:	2b00      	cmp	r3, #0
   13472:	d040      	beq.n	134f6 <CLI_IMU_data+0xb6>
        memset(raw_acceleration_data, 0x00, 3 * sizeof(int16_t));
   13474:	4b24      	ldr	r3, [pc, #144]	; (13508 <CLI_IMU_data+0xc8>)
   13476:	2206      	movs	r2, #6
   13478:	2100      	movs	r1, #0
   1347a:	0018      	movs	r0, r3
   1347c:	4b23      	ldr	r3, [pc, #140]	; (1350c <CLI_IMU_data+0xcc>)
   1347e:	4798      	blx	r3
        acceleration_raw_get(dev_ctx, raw_acceleration_data);
   13480:	4a21      	ldr	r2, [pc, #132]	; (13508 <CLI_IMU_data+0xc8>)
   13482:	697b      	ldr	r3, [r7, #20]
   13484:	0011      	movs	r1, r2
   13486:	0018      	movs	r0, r3
   13488:	4b21      	ldr	r3, [pc, #132]	; (13510 <CLI_IMU_data+0xd0>)
   1348a:	4798      	blx	r3
        acceleration_mg[0] = from_fs2_to_mg(raw_acceleration_data[0]);
   1348c:	4b1e      	ldr	r3, [pc, #120]	; (13508 <CLI_IMU_data+0xc8>)
   1348e:	2200      	movs	r2, #0
   13490:	5e9b      	ldrsh	r3, [r3, r2]
   13492:	0018      	movs	r0, r3
   13494:	4b1f      	ldr	r3, [pc, #124]	; (13514 <CLI_IMU_data+0xd4>)
   13496:	4798      	blx	r3
   13498:	1c02      	adds	r2, r0, #0
   1349a:	4b1f      	ldr	r3, [pc, #124]	; (13518 <CLI_IMU_data+0xd8>)
   1349c:	601a      	str	r2, [r3, #0]
        acceleration_mg[1] = from_fs2_to_mg(raw_acceleration_data[1]);
   1349e:	4b1a      	ldr	r3, [pc, #104]	; (13508 <CLI_IMU_data+0xc8>)
   134a0:	2202      	movs	r2, #2
   134a2:	5e9b      	ldrsh	r3, [r3, r2]
   134a4:	0018      	movs	r0, r3
   134a6:	4b1b      	ldr	r3, [pc, #108]	; (13514 <CLI_IMU_data+0xd4>)
   134a8:	4798      	blx	r3
   134aa:	1c02      	adds	r2, r0, #0
   134ac:	4b1a      	ldr	r3, [pc, #104]	; (13518 <CLI_IMU_data+0xd8>)
   134ae:	605a      	str	r2, [r3, #4]
        acceleration_mg[2] = from_fs2_to_mg(raw_acceleration_data[2]);
   134b0:	4b15      	ldr	r3, [pc, #84]	; (13508 <CLI_IMU_data+0xc8>)
   134b2:	2204      	movs	r2, #4
   134b4:	5e9b      	ldrsh	r3, [r3, r2]
   134b6:	0018      	movs	r0, r3
   134b8:	4b16      	ldr	r3, [pc, #88]	; (13514 <CLI_IMU_data+0xd4>)
   134ba:	4798      	blx	r3
   134bc:	1c02      	adds	r2, r0, #0
   134be:	4b16      	ldr	r3, [pc, #88]	; (13518 <CLI_IMU_data+0xd8>)
   134c0:	609a      	str	r2, [r3, #8]
        snprintf(pcWriteBuffer, xWriteBufferLen, "Ax: %d, Ay: %d, Az: %d\r\n", (int)acceleration_mg[0], (int)acceleration_mg[1], (int)acceleration_mg[2]);
   134c2:	4b15      	ldr	r3, [pc, #84]	; (13518 <CLI_IMU_data+0xd8>)
   134c4:	681a      	ldr	r2, [r3, #0]
   134c6:	4b15      	ldr	r3, [pc, #84]	; (1351c <CLI_IMU_data+0xdc>)
   134c8:	1c10      	adds	r0, r2, #0
   134ca:	4798      	blx	r3
   134cc:	0005      	movs	r5, r0
   134ce:	4b12      	ldr	r3, [pc, #72]	; (13518 <CLI_IMU_data+0xd8>)
   134d0:	685a      	ldr	r2, [r3, #4]
   134d2:	4b12      	ldr	r3, [pc, #72]	; (1351c <CLI_IMU_data+0xdc>)
   134d4:	1c10      	adds	r0, r2, #0
   134d6:	4798      	blx	r3
   134d8:	0004      	movs	r4, r0
   134da:	4b0f      	ldr	r3, [pc, #60]	; (13518 <CLI_IMU_data+0xd8>)
   134dc:	689a      	ldr	r2, [r3, #8]
   134de:	4b0f      	ldr	r3, [pc, #60]	; (1351c <CLI_IMU_data+0xdc>)
   134e0:	1c10      	adds	r0, r2, #0
   134e2:	4798      	blx	r3
   134e4:	0003      	movs	r3, r0
   134e6:	4a0e      	ldr	r2, [pc, #56]	; (13520 <CLI_IMU_data+0xe0>)
   134e8:	68b9      	ldr	r1, [r7, #8]
   134ea:	68f8      	ldr	r0, [r7, #12]
   134ec:	9301      	str	r3, [sp, #4]
   134ee:	9400      	str	r4, [sp, #0]
   134f0:	002b      	movs	r3, r5
   134f2:	4c0c      	ldr	r4, [pc, #48]	; (13524 <CLI_IMU_data+0xe4>)
   134f4:	47a0      	blx	r4
        // SerialConsoleWriteString(bufCli);
    }
    // SerialConsoleWriteString("\r\n");
    return pdFALSE;
   134f6:	2300      	movs	r3, #0
    
}
   134f8:	0018      	movs	r0, r3
   134fa:	46bd      	mov	sp, r7
   134fc:	b006      	add	sp, #24
   134fe:	bdb0      	pop	{r4, r5, r7, pc}
   13500:	00014231 	.word	0x00014231
   13504:	00013ff1 	.word	0x00013ff1
   13508:	2000047c 	.word	0x2000047c
   1350c:	00033117 	.word	0x00033117
   13510:	0001402d 	.word	0x0001402d
   13514:	00013fb9 	.word	0x00013fb9
   13518:	20000484 	.word	0x20000484
   1351c:	000316bd 	.word	0x000316bd
   13520:	00034780 	.word	0x00034780
   13524:	00033371 	.word	0x00033371

00013528 <CLI_Haptic>:

BaseType_t CLI_Haptic(int8_t *pcWriteBuffer, size_t xWriteBufferLen, const int8_t *pcCommandString){
   13528:	b580      	push	{r7, lr}
   1352a:	b086      	sub	sp, #24
   1352c:	af00      	add	r7, sp, #0
   1352e:	60f8      	str	r0, [r7, #12]
   13530:	60b9      	str	r1, [r7, #8]
   13532:	607a      	str	r2, [r7, #4]
    hapdev_ctx_t *dev_ctx;
    dev_ctx = GetHapStruct();
   13534:	4b09      	ldr	r3, [pc, #36]	; (1355c <CLI_Haptic+0x34>)
   13536:	4798      	blx	r3
   13538:	0003      	movs	r3, r0
   1353a:	617b      	str	r3, [r7, #20]
    drv2605_go(dev_ctx);
   1353c:	697b      	ldr	r3, [r7, #20]
   1353e:	0018      	movs	r0, r3
   13540:	4b07      	ldr	r3, [pc, #28]	; (13560 <CLI_Haptic+0x38>)
   13542:	4798      	blx	r3
    snprintf(pcWriteBuffer, xWriteBufferLen, "Go Command Sent\r\n");
   13544:	4a07      	ldr	r2, [pc, #28]	; (13564 <CLI_Haptic+0x3c>)
   13546:	68b9      	ldr	r1, [r7, #8]
   13548:	68fb      	ldr	r3, [r7, #12]
   1354a:	0018      	movs	r0, r3
   1354c:	4b06      	ldr	r3, [pc, #24]	; (13568 <CLI_Haptic+0x40>)
   1354e:	4798      	blx	r3
    return pdFALSE;
   13550:	2300      	movs	r3, #0
}
   13552:	0018      	movs	r0, r3
   13554:	46bd      	mov	sp, r7
   13556:	b006      	add	sp, #24
   13558:	bd80      	pop	{r7, pc}
   1355a:	46c0      	nop			; (mov r8, r8)
   1355c:	00013771 	.word	0x00013771
   13560:	000135dd 	.word	0x000135dd
   13564:	0003479c 	.word	0x0003479c
   13568:	00033371 	.word	0x00033371

0001356c <CLI_LED>:

BaseType_t CLI_LED(int8_t *pcWriteBuffer, size_t xWriteBufferLen, const int8_t *pcCommandString){
   1356c:	b590      	push	{r4, r7, lr}
   1356e:	b087      	sub	sp, #28
   13570:	af00      	add	r7, sp, #0
   13572:	60f8      	str	r0, [r7, #12]
   13574:	60b9      	str	r1, [r7, #8]
   13576:	607a      	str	r2, [r7, #4]
    LEDdev_ctx_t *dev_ctx;
    BaseType_t *pxParameterStringLength;
    char *parameter;
    dev_ctx = GetLEDStruct();
   13578:	4b11      	ldr	r3, [pc, #68]	; (135c0 <CLI_LED+0x54>)
   1357a:	4798      	blx	r3
   1357c:	0003      	movs	r3, r0
   1357e:	617b      	str	r3, [r7, #20]
    setLEDBrightness_all(dev_ctx, 5);
   13580:	697b      	ldr	r3, [r7, #20]
   13582:	2105      	movs	r1, #5
   13584:	0018      	movs	r0, r3
   13586:	4b0f      	ldr	r3, [pc, #60]	; (135c4 <CLI_LED+0x58>)
   13588:	4798      	blx	r3
    // parameter = FreeRTOS_CLIGetParameter(pcCommandString, 1, pxParameterStringLength);
    setLEDColor_all(dev_ctx, 255, 0, 0);
   1358a:	6978      	ldr	r0, [r7, #20]
   1358c:	2300      	movs	r3, #0
   1358e:	2200      	movs	r2, #0
   13590:	21ff      	movs	r1, #255	; 0xff
   13592:	4c0d      	ldr	r4, [pc, #52]	; (135c8 <CLI_LED+0x5c>)
   13594:	47a0      	blx	r4
    vTaskDelay(pdMS_TO_TICKS(2000));
   13596:	23fa      	movs	r3, #250	; 0xfa
   13598:	00db      	lsls	r3, r3, #3
   1359a:	0018      	movs	r0, r3
   1359c:	4b0b      	ldr	r3, [pc, #44]	; (135cc <CLI_LED+0x60>)
   1359e:	4798      	blx	r3
    LEDOff(dev_ctx);
   135a0:	697b      	ldr	r3, [r7, #20]
   135a2:	0018      	movs	r0, r3
   135a4:	4b0a      	ldr	r3, [pc, #40]	; (135d0 <CLI_LED+0x64>)
   135a6:	4798      	blx	r3
    snprintf(pcWriteBuffer, xWriteBufferLen, "LED Command sent\r\n");
   135a8:	4a0a      	ldr	r2, [pc, #40]	; (135d4 <CLI_LED+0x68>)
   135aa:	68b9      	ldr	r1, [r7, #8]
   135ac:	68fb      	ldr	r3, [r7, #12]
   135ae:	0018      	movs	r0, r3
   135b0:	4b09      	ldr	r3, [pc, #36]	; (135d8 <CLI_LED+0x6c>)
   135b2:	4798      	blx	r3
    return pdFALSE;
   135b4:	2300      	movs	r3, #0
}
   135b6:	0018      	movs	r0, r3
   135b8:	46bd      	mov	sp, r7
   135ba:	b007      	add	sp, #28
   135bc:	bd90      	pop	{r4, r7, pc}
   135be:	46c0      	nop			; (mov r8, r8)
   135c0:	00014499 	.word	0x00014499
   135c4:	000142a5 	.word	0x000142a5
   135c8:	00014241 	.word	0x00014241
   135cc:	0001a8c5 	.word	0x0001a8c5
   135d0:	000142f1 	.word	0x000142f1
   135d4:	000347b0 	.word	0x000347b0
   135d8:	00033371 	.word	0x00033371

000135dc <drv2605_go>:
/**************************************************************************/
/*!
  @brief Start playback of the waveforms (start moving!).
*/
/**************************************************************************/
void drv2605_go(hapdev_ctx_t *ctx) { 
   135dc:	b590      	push	{r4, r7, lr}
   135de:	b085      	sub	sp, #20
   135e0:	af00      	add	r7, sp, #0
   135e2:	6078      	str	r0, [r7, #4]
    // writeRegister8(DRV2605_REG_GO, 1); 
    uint8_t reg = 1;
   135e4:	230f      	movs	r3, #15
   135e6:	18fb      	adds	r3, r7, r3
   135e8:	2201      	movs	r2, #1
   135ea:	701a      	strb	r2, [r3, #0]
    drv2605_write_reg(ctx, DRV2605_REG_GO, &reg, 1); 
   135ec:	230f      	movs	r3, #15
   135ee:	18fa      	adds	r2, r7, r3
   135f0:	6878      	ldr	r0, [r7, #4]
   135f2:	2301      	movs	r3, #1
   135f4:	210c      	movs	r1, #12
   135f6:	4c03      	ldr	r4, [pc, #12]	; (13604 <drv2605_go+0x28>)
   135f8:	47a0      	blx	r4
}
   135fa:	46c0      	nop			; (mov r8, r8)
   135fc:	46bd      	mov	sp, r7
   135fe:	b005      	add	sp, #20
   13600:	bd90      	pop	{r4, r7, pc}
   13602:	46c0      	nop			; (mov r8, r8)
   13604:	00013609 	.word	0x00013609

00013608 <drv2605_write_reg>:
  *
  */
int32_t drv2605_write_reg(hapdev_ctx_t *ctx, uint8_t reg,
                          uint8_t *data,
                          uint16_t len)
{
   13608:	b5b0      	push	{r4, r5, r7, lr}
   1360a:	b086      	sub	sp, #24
   1360c:	af00      	add	r7, sp, #0
   1360e:	60f8      	str	r0, [r7, #12]
   13610:	0008      	movs	r0, r1
   13612:	607a      	str	r2, [r7, #4]
   13614:	0019      	movs	r1, r3
   13616:	230b      	movs	r3, #11
   13618:	18fb      	adds	r3, r7, r3
   1361a:	1c02      	adds	r2, r0, #0
   1361c:	701a      	strb	r2, [r3, #0]
   1361e:	2308      	movs	r3, #8
   13620:	18fb      	adds	r3, r7, r3
   13622:	1c0a      	adds	r2, r1, #0
   13624:	801a      	strh	r2, [r3, #0]
    int32_t ret;

    ret = ctx->write_reg(ctx->handle, reg, data, len);
   13626:	68fb      	ldr	r3, [r7, #12]
   13628:	681c      	ldr	r4, [r3, #0]
   1362a:	68fb      	ldr	r3, [r7, #12]
   1362c:	6898      	ldr	r0, [r3, #8]
   1362e:	2308      	movs	r3, #8
   13630:	18fb      	adds	r3, r7, r3
   13632:	881d      	ldrh	r5, [r3, #0]
   13634:	687a      	ldr	r2, [r7, #4]
   13636:	230b      	movs	r3, #11
   13638:	18fb      	adds	r3, r7, r3
   1363a:	7819      	ldrb	r1, [r3, #0]
   1363c:	002b      	movs	r3, r5
   1363e:	47a0      	blx	r4
   13640:	0003      	movs	r3, r0
   13642:	617b      	str	r3, [r7, #20]

    return ret; 
   13644:	697b      	ldr	r3, [r7, #20]
}
   13646:	0018      	movs	r0, r3
   13648:	46bd      	mov	sp, r7
   1364a:	b006      	add	sp, #24
   1364c:	bdb0      	pop	{r4, r5, r7, pc}
	...

00013650 <platform_write>:
 * @param[in]   len Length of the data sent
 * @return      Returns what the function "I2cWriteDataWait" returns
 * @note        STUDENTS TO FILL  
*****************************************************************************/
static int32_t platform_write(void *handle, uint8_t reg, uint8_t *bufp, uint16_t len)
{
   13650:	b580      	push	{r7, lr}
   13652:	b086      	sub	sp, #24
   13654:	af00      	add	r7, sp, #0
   13656:	60f8      	str	r0, [r7, #12]
   13658:	0008      	movs	r0, r1
   1365a:	607a      	str	r2, [r7, #4]
   1365c:	0019      	movs	r1, r3
   1365e:	230b      	movs	r3, #11
   13660:	18fb      	adds	r3, r7, r3
   13662:	1c02      	adds	r2, r0, #0
   13664:	701a      	strb	r2, [r3, #0]
   13666:	2308      	movs	r3, #8
   13668:	18fb      	adds	r3, r7, r3
   1366a:	1c0a      	adds	r2, r1, #0
   1366c:	801a      	strh	r2, [r3, #0]
	//YOUR JOB: Fill out the structure "HapData" to send to the device
	//TIP: Use the array "msgOutHap" to copy the data to be sent. Remember that the position [0] of the array you send must be the register, and
	//starting from position [1] you can copy the data to be sent. Remember to adjust the length accordingly
  // First position reg
  msgOutHap[0] = reg;
   1366e:	4b22      	ldr	r3, [pc, #136]	; (136f8 <platform_write+0xa8>)
   13670:	220b      	movs	r2, #11
   13672:	18ba      	adds	r2, r7, r2
   13674:	7812      	ldrb	r2, [r2, #0]
   13676:	701a      	strb	r2, [r3, #0]
	for(uint16_t i=0; i < len; i++){
   13678:	2316      	movs	r3, #22
   1367a:	18fb      	adds	r3, r7, r3
   1367c:	2200      	movs	r2, #0
   1367e:	801a      	strh	r2, [r3, #0]
   13680:	e012      	b.n	136a8 <platform_write+0x58>
		msgOutHap[i+1] = bufp[i];
   13682:	2316      	movs	r3, #22
   13684:	18fb      	adds	r3, r7, r3
   13686:	881b      	ldrh	r3, [r3, #0]
   13688:	3301      	adds	r3, #1
   1368a:	2216      	movs	r2, #22
   1368c:	18ba      	adds	r2, r7, r2
   1368e:	8812      	ldrh	r2, [r2, #0]
   13690:	6879      	ldr	r1, [r7, #4]
   13692:	188a      	adds	r2, r1, r2
   13694:	7811      	ldrb	r1, [r2, #0]
   13696:	4a18      	ldr	r2, [pc, #96]	; (136f8 <platform_write+0xa8>)
   13698:	54d1      	strb	r1, [r2, r3]
	for(uint16_t i=0; i < len; i++){
   1369a:	2316      	movs	r3, #22
   1369c:	18fb      	adds	r3, r7, r3
   1369e:	881a      	ldrh	r2, [r3, #0]
   136a0:	2316      	movs	r3, #22
   136a2:	18fb      	adds	r3, r7, r3
   136a4:	3201      	adds	r2, #1
   136a6:	801a      	strh	r2, [r3, #0]
   136a8:	2316      	movs	r3, #22
   136aa:	18fa      	adds	r2, r7, r3
   136ac:	2308      	movs	r3, #8
   136ae:	18fb      	adds	r3, r7, r3
   136b0:	8812      	ldrh	r2, [r2, #0]
   136b2:	881b      	ldrh	r3, [r3, #0]
   136b4:	429a      	cmp	r2, r3
   136b6:	d3e4      	bcc.n	13682 <platform_write+0x32>
	}
	HapData.address = DRV2605_ADDR;
   136b8:	4b10      	ldr	r3, [pc, #64]	; (136fc <platform_write+0xac>)
   136ba:	225a      	movs	r2, #90	; 0x5a
   136bc:	701a      	strb	r2, [r3, #0]
	HapData.msgOut = &msgOutHap;
   136be:	4b0f      	ldr	r3, [pc, #60]	; (136fc <platform_write+0xac>)
   136c0:	4a0d      	ldr	r2, [pc, #52]	; (136f8 <platform_write+0xa8>)
   136c2:	605a      	str	r2, [r3, #4]
	HapData.lenOut = len + 1;
   136c4:	2308      	movs	r3, #8
   136c6:	18fb      	adds	r3, r7, r3
   136c8:	881b      	ldrh	r3, [r3, #0]
   136ca:	3301      	adds	r3, #1
   136cc:	b29a      	uxth	r2, r3
   136ce:	4b0b      	ldr	r3, [pc, #44]	; (136fc <platform_write+0xac>)
   136d0:	81da      	strh	r2, [r3, #14]
	HapData.lenIn = len;
   136d2:	4b0a      	ldr	r3, [pc, #40]	; (136fc <platform_write+0xac>)
   136d4:	2208      	movs	r2, #8
   136d6:	18ba      	adds	r2, r7, r2
   136d8:	8812      	ldrh	r2, [r2, #0]
   136da:	819a      	strh	r2, [r3, #12]
	HapData.msgIn = bufp;
   136dc:	4b07      	ldr	r3, [pc, #28]	; (136fc <platform_write+0xac>)
   136de:	687a      	ldr	r2, [r7, #4]
   136e0:	609a      	str	r2, [r3, #8]
  return I2cWriteDataWait(&HapData, 100);
   136e2:	4b06      	ldr	r3, [pc, #24]	; (136fc <platform_write+0xac>)
   136e4:	2164      	movs	r1, #100	; 0x64
   136e6:	0018      	movs	r0, r3
   136e8:	4b05      	ldr	r3, [pc, #20]	; (13700 <platform_write+0xb0>)
   136ea:	4798      	blx	r3
   136ec:	0003      	movs	r3, r0
}
   136ee:	0018      	movs	r0, r3
   136f0:	46bd      	mov	sp, r7
   136f2:	b006      	add	sp, #24
   136f4:	bd80      	pop	{r7, pc}
   136f6:	46c0      	nop			; (mov r8, r8)
   136f8:	20004234 	.word	0x20004234
   136fc:	20004224 	.word	0x20004224
   13700:	00013d75 	.word	0x00013d75

00013704 <platform_read>:
 * @param[in]   len Length of the data to be read
 * @return      Returns what the function "I2cReadDataWait" returns
 * @note        STUDENTS TO FILL  
*****************************************************************************/
static  int32_t platform_read(void *handle, uint8_t reg, uint8_t *bufp, uint16_t len)
{
   13704:	b580      	push	{r7, lr}
   13706:	b084      	sub	sp, #16
   13708:	af00      	add	r7, sp, #0
   1370a:	60f8      	str	r0, [r7, #12]
   1370c:	0008      	movs	r0, r1
   1370e:	607a      	str	r2, [r7, #4]
   13710:	0019      	movs	r1, r3
   13712:	230b      	movs	r3, #11
   13714:	18fb      	adds	r3, r7, r3
   13716:	1c02      	adds	r2, r0, #0
   13718:	701a      	strb	r2, [r3, #0]
   1371a:	2308      	movs	r3, #8
   1371c:	18fb      	adds	r3, r7, r3
   1371e:	1c0a      	adds	r2, r1, #0
   13720:	801a      	strh	r2, [r3, #0]
	//YOUR JOB: Fill out the structure "HapData" to send to the device
	//TIP: Check the structure "HapData" and notice that it has a msgOut and msgIn parameter. How do we fill this to our advantage?
	msgOutHap[0] = reg;
   13722:	4b10      	ldr	r3, [pc, #64]	; (13764 <platform_read+0x60>)
   13724:	220b      	movs	r2, #11
   13726:	18ba      	adds	r2, r7, r2
   13728:	7812      	ldrb	r2, [r2, #0]
   1372a:	701a      	strb	r2, [r3, #0]
	HapData.address = DRV2605_ADDR;
   1372c:	4b0e      	ldr	r3, [pc, #56]	; (13768 <platform_read+0x64>)
   1372e:	225a      	movs	r2, #90	; 0x5a
   13730:	701a      	strb	r2, [r3, #0]
	HapData.msgIn = bufp;
   13732:	4b0d      	ldr	r3, [pc, #52]	; (13768 <platform_read+0x64>)
   13734:	687a      	ldr	r2, [r7, #4]
   13736:	609a      	str	r2, [r3, #8]
	HapData.lenIn = len;
   13738:	4b0b      	ldr	r3, [pc, #44]	; (13768 <platform_read+0x64>)
   1373a:	2208      	movs	r2, #8
   1373c:	18ba      	adds	r2, r7, r2
   1373e:	8812      	ldrh	r2, [r2, #0]
   13740:	819a      	strh	r2, [r3, #12]
	HapData.lenOut = 1;
   13742:	4b09      	ldr	r3, [pc, #36]	; (13768 <platform_read+0x64>)
   13744:	2201      	movs	r2, #1
   13746:	81da      	strh	r2, [r3, #14]
	HapData.msgOut = &msgOutHap;
   13748:	4b07      	ldr	r3, [pc, #28]	; (13768 <platform_read+0x64>)
   1374a:	4a06      	ldr	r2, [pc, #24]	; (13764 <platform_read+0x60>)
   1374c:	605a      	str	r2, [r3, #4]
	
	return I2cReadDataWait(&HapData, 100, 100);
   1374e:	4b06      	ldr	r3, [pc, #24]	; (13768 <platform_read+0x64>)
   13750:	2264      	movs	r2, #100	; 0x64
   13752:	2164      	movs	r1, #100	; 0x64
   13754:	0018      	movs	r0, r3
   13756:	4b05      	ldr	r3, [pc, #20]	; (1376c <platform_read+0x68>)
   13758:	4798      	blx	r3
   1375a:	0003      	movs	r3, r0
}
   1375c:	0018      	movs	r0, r3
   1375e:	46bd      	mov	sp, r7
   13760:	b004      	add	sp, #16
   13762:	bd80      	pop	{r7, pc}
   13764:	20004234 	.word	0x20004234
   13768:	20004224 	.word	0x20004224
   1376c:	00013e4d 	.word	0x00013e4d

00013770 <GetHapStruct>:


hapdev_ctx_t * GetHapStruct(void)
{
   13770:	b580      	push	{r7, lr}
   13772:	af00      	add	r7, sp, #0
return &dev_ctx_drv2605;
   13774:	4b01      	ldr	r3, [pc, #4]	; (1377c <GetHapStruct+0xc>)
}
   13776:	0018      	movs	r0, r3
   13778:	46bd      	mov	sp, r7
   1377a:	bd80      	pop	{r7, pc}
   1377c:	20000014 	.word	0x20000014

00013780 <system_interrupt_enable>:
{
   13780:	b580      	push	{r7, lr}
   13782:	b082      	sub	sp, #8
   13784:	af00      	add	r7, sp, #0
   13786:	0002      	movs	r2, r0
   13788:	1dfb      	adds	r3, r7, #7
   1378a:	701a      	strb	r2, [r3, #0]
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
   1378c:	4b06      	ldr	r3, [pc, #24]	; (137a8 <system_interrupt_enable+0x28>)
   1378e:	1dfa      	adds	r2, r7, #7
   13790:	7812      	ldrb	r2, [r2, #0]
   13792:	0011      	movs	r1, r2
   13794:	221f      	movs	r2, #31
   13796:	400a      	ands	r2, r1
   13798:	2101      	movs	r1, #1
   1379a:	4091      	lsls	r1, r2
   1379c:	000a      	movs	r2, r1
   1379e:	601a      	str	r2, [r3, #0]
}
   137a0:	46c0      	nop			; (mov r8, r8)
   137a2:	46bd      	mov	sp, r7
   137a4:	b002      	add	sp, #8
   137a6:	bd80      	pop	{r7, pc}
   137a8:	e000e100 	.word	0xe000e100

000137ac <i2c_master_is_syncing>:
{
   137ac:	b580      	push	{r7, lr}
   137ae:	b084      	sub	sp, #16
   137b0:	af00      	add	r7, sp, #0
   137b2:	6078      	str	r0, [r7, #4]
	SercomI2cm *const i2c_hw = &(module->hw->I2CM);
   137b4:	687b      	ldr	r3, [r7, #4]
   137b6:	681b      	ldr	r3, [r3, #0]
   137b8:	60fb      	str	r3, [r7, #12]
	return (i2c_hw->SYNCBUSY.reg & SERCOM_I2CM_SYNCBUSY_MASK);
   137ba:	68fb      	ldr	r3, [r7, #12]
   137bc:	69db      	ldr	r3, [r3, #28]
   137be:	2207      	movs	r2, #7
   137c0:	4013      	ands	r3, r2
   137c2:	1e5a      	subs	r2, r3, #1
   137c4:	4193      	sbcs	r3, r2
   137c6:	b2db      	uxtb	r3, r3
}
   137c8:	0018      	movs	r0, r3
   137ca:	46bd      	mov	sp, r7
   137cc:	b004      	add	sp, #16
   137ce:	bd80      	pop	{r7, pc}

000137d0 <_i2c_master_wait_for_sync>:
{
   137d0:	b580      	push	{r7, lr}
   137d2:	b082      	sub	sp, #8
   137d4:	af00      	add	r7, sp, #0
   137d6:	6078      	str	r0, [r7, #4]
	while (i2c_master_is_syncing(module)) {
   137d8:	46c0      	nop			; (mov r8, r8)
   137da:	687b      	ldr	r3, [r7, #4]
   137dc:	0018      	movs	r0, r3
   137de:	4b04      	ldr	r3, [pc, #16]	; (137f0 <_i2c_master_wait_for_sync+0x20>)
   137e0:	4798      	blx	r3
   137e2:	1e03      	subs	r3, r0, #0
   137e4:	d1f9      	bne.n	137da <_i2c_master_wait_for_sync+0xa>
}
   137e6:	46c0      	nop			; (mov r8, r8)
   137e8:	46bd      	mov	sp, r7
   137ea:	b002      	add	sp, #8
   137ec:	bd80      	pop	{r7, pc}
   137ee:	46c0      	nop			; (mov r8, r8)
   137f0:	000137ad 	.word	0x000137ad

000137f4 <i2c_master_get_config_defaults>:
 *
 * \param[out] config  Pointer to configuration structure to be initiated
 */
static inline void i2c_master_get_config_defaults(
		struct i2c_master_config *const config)
{
   137f4:	b580      	push	{r7, lr}
   137f6:	b082      	sub	sp, #8
   137f8:	af00      	add	r7, sp, #0
   137fa:	6078      	str	r0, [r7, #4]
	/*Sanity check argument */
	Assert(config);
	config->baud_rate        = I2C_MASTER_BAUD_RATE_100KHZ;
   137fc:	687b      	ldr	r3, [r7, #4]
   137fe:	2264      	movs	r2, #100	; 0x64
   13800:	601a      	str	r2, [r3, #0]
#ifdef FEATURE_I2C_FAST_MODE_PLUS_AND_HIGH_SPEED
	config->baud_rate_high_speed = I2C_MASTER_BAUD_RATE_3400KHZ;
   13802:	687b      	ldr	r3, [r7, #4]
   13804:	4a1b      	ldr	r2, [pc, #108]	; (13874 <i2c_master_get_config_defaults+0x80>)
   13806:	605a      	str	r2, [r3, #4]
	config->transfer_speed       = I2C_MASTER_SPEED_STANDARD_AND_FAST;
   13808:	687b      	ldr	r3, [r7, #4]
   1380a:	2200      	movs	r2, #0
   1380c:	609a      	str	r2, [r3, #8]
#endif
	config->generator_source = GCLK_GENERATOR_0;
   1380e:	687b      	ldr	r3, [r7, #4]
   13810:	2200      	movs	r2, #0
   13812:	731a      	strb	r2, [r3, #12]
	config->run_in_standby   = false;
   13814:	687b      	ldr	r3, [r7, #4]
   13816:	2200      	movs	r2, #0
   13818:	761a      	strb	r2, [r3, #24]
	config->start_hold_time  = I2C_MASTER_START_HOLD_TIME_300NS_600NS;
   1381a:	687b      	ldr	r3, [r7, #4]
   1381c:	2280      	movs	r2, #128	; 0x80
   1381e:	0392      	lsls	r2, r2, #14
   13820:	611a      	str	r2, [r3, #16]
	config->buffer_timeout   = 65535;
   13822:	687b      	ldr	r3, [r7, #4]
   13824:	2201      	movs	r2, #1
   13826:	4252      	negs	r2, r2
   13828:	82da      	strh	r2, [r3, #22]
	config->unknown_bus_state_timeout = 65535;
   1382a:	687b      	ldr	r3, [r7, #4]
   1382c:	2201      	movs	r2, #1
   1382e:	4252      	negs	r2, r2
   13830:	829a      	strh	r2, [r3, #20]
	config->pinmux_pad0      = PINMUX_DEFAULT;
   13832:	687b      	ldr	r3, [r7, #4]
   13834:	2200      	movs	r2, #0
   13836:	61da      	str	r2, [r3, #28]
	config->pinmux_pad1      = PINMUX_DEFAULT;
   13838:	687b      	ldr	r3, [r7, #4]
   1383a:	2200      	movs	r2, #0
   1383c:	621a      	str	r2, [r3, #32]
	config->scl_low_timeout  = false;
   1383e:	687b      	ldr	r3, [r7, #4]
   13840:	2224      	movs	r2, #36	; 0x24
   13842:	2100      	movs	r1, #0
   13844:	5499      	strb	r1, [r3, r2]
	config->inactive_timeout = I2C_MASTER_INACTIVE_TIMEOUT_DISABLED;
   13846:	687b      	ldr	r3, [r7, #4]
   13848:	2200      	movs	r2, #0
   1384a:	629a      	str	r2, [r3, #40]	; 0x28
#ifdef FEATURE_I2C_SCL_STRETCH_MODE
	config->scl_stretch_only_after_ack_bit = false;
   1384c:	687b      	ldr	r3, [r7, #4]
   1384e:	222c      	movs	r2, #44	; 0x2c
   13850:	2100      	movs	r1, #0
   13852:	5499      	strb	r1, [r3, r2]
#endif
#ifdef FEATURE_I2C_SCL_EXTEND_TIMEOUT
	config->slave_scl_low_extend_timeout   = false;
   13854:	687b      	ldr	r3, [r7, #4]
   13856:	222d      	movs	r2, #45	; 0x2d
   13858:	2100      	movs	r1, #0
   1385a:	5499      	strb	r1, [r3, r2]
	config->master_scl_low_extend_timeout  = false;
   1385c:	687b      	ldr	r3, [r7, #4]
   1385e:	222e      	movs	r2, #46	; 0x2e
   13860:	2100      	movs	r1, #0
   13862:	5499      	strb	r1, [r3, r2]
#endif
	/* The typical value is 215ns */
	config->sda_scl_rise_time_ns = 215;
   13864:	687b      	ldr	r3, [r7, #4]
   13866:	22d7      	movs	r2, #215	; 0xd7
   13868:	861a      	strh	r2, [r3, #48]	; 0x30
}
   1386a:	46c0      	nop			; (mov r8, r8)
   1386c:	46bd      	mov	sp, r7
   1386e:	b002      	add	sp, #8
   13870:	bd80      	pop	{r7, pc}
   13872:	46c0      	nop			; (mov r8, r8)
   13874:	00000d48 	.word	0x00000d48

00013878 <i2c_master_enable>:
 *
 * \param[in]  module  Pointer to the software module struct
 */
static inline void i2c_master_enable(
		const struct i2c_master_module *const module)
{
   13878:	b580      	push	{r7, lr}
   1387a:	b084      	sub	sp, #16
   1387c:	af00      	add	r7, sp, #0
   1387e:	6078      	str	r0, [r7, #4]
	/* Sanity check of arguments */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
   13880:	687b      	ldr	r3, [r7, #4]
   13882:	681b      	ldr	r3, [r3, #0]
   13884:	60bb      	str	r3, [r7, #8]

	/* Timeout counter used to force bus state */
	uint32_t timeout_counter = 0;
   13886:	2300      	movs	r3, #0
   13888:	60fb      	str	r3, [r7, #12]

	/* Wait for module to sync */
	_i2c_master_wait_for_sync(module);
   1388a:	687b      	ldr	r3, [r7, #4]
   1388c:	0018      	movs	r0, r3
   1388e:	4b14      	ldr	r3, [pc, #80]	; (138e0 <i2c_master_enable+0x68>)
   13890:	4798      	blx	r3

	/* Enable module */
	i2c_module->CTRLA.reg |= SERCOM_I2CM_CTRLA_ENABLE;
   13892:	68bb      	ldr	r3, [r7, #8]
   13894:	681b      	ldr	r3, [r3, #0]
   13896:	2202      	movs	r2, #2
   13898:	431a      	orrs	r2, r3
   1389a:	68bb      	ldr	r3, [r7, #8]
   1389c:	601a      	str	r2, [r3, #0]

#if I2C_MASTER_CALLBACK_MODE == true
	/* Enable module interrupts */
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
   1389e:	687b      	ldr	r3, [r7, #4]
   138a0:	681b      	ldr	r3, [r3, #0]
   138a2:	0018      	movs	r0, r3
   138a4:	4b0f      	ldr	r3, [pc, #60]	; (138e4 <i2c_master_enable+0x6c>)
   138a6:	4798      	blx	r3
   138a8:	0003      	movs	r3, r0
   138aa:	0018      	movs	r0, r3
   138ac:	4b0e      	ldr	r3, [pc, #56]	; (138e8 <i2c_master_enable+0x70>)
   138ae:	4798      	blx	r3
#endif
	/* Start timeout if bus state is unknown */
	while (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(1))) {
   138b0:	e00c      	b.n	138cc <i2c_master_enable+0x54>
		timeout_counter++;
   138b2:	68fb      	ldr	r3, [r7, #12]
   138b4:	3301      	adds	r3, #1
   138b6:	60fb      	str	r3, [r7, #12]
		if(timeout_counter >= (module->unknown_bus_state_timeout)) {
   138b8:	687b      	ldr	r3, [r7, #4]
   138ba:	88db      	ldrh	r3, [r3, #6]
   138bc:	001a      	movs	r2, r3
   138be:	68fb      	ldr	r3, [r7, #12]
   138c0:	429a      	cmp	r2, r3
   138c2:	d803      	bhi.n	138cc <i2c_master_enable+0x54>
			/* Timeout, force bus state to idle */
			i2c_module->STATUS.reg = SERCOM_I2CM_STATUS_BUSSTATE(1);
   138c4:	68bb      	ldr	r3, [r7, #8]
   138c6:	2210      	movs	r2, #16
   138c8:	835a      	strh	r2, [r3, #26]
			/* Workaround #1 */
			return;
   138ca:	e006      	b.n	138da <i2c_master_enable+0x62>
	while (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(1))) {
   138cc:	68bb      	ldr	r3, [r7, #8]
   138ce:	8b5b      	ldrh	r3, [r3, #26]
   138d0:	b29b      	uxth	r3, r3
   138d2:	001a      	movs	r2, r3
   138d4:	2310      	movs	r3, #16
   138d6:	4013      	ands	r3, r2
   138d8:	d0eb      	beq.n	138b2 <i2c_master_enable+0x3a>
		}
	}
}
   138da:	46bd      	mov	sp, r7
   138dc:	b004      	add	sp, #16
   138de:	bd80      	pop	{r7, pc}
   138e0:	000137d1 	.word	0x000137d1
   138e4:	00025ec1 	.word	0x00025ec1
   138e8:	00013781 	.word	0x00013781

000138ec <i2c_master_enable_callback>:
 * \param[in]     callback_type  Callback type to enable
 */
static inline void i2c_master_enable_callback(
		struct i2c_master_module *const module,
		enum i2c_master_callback callback_type)
{
   138ec:	b580      	push	{r7, lr}
   138ee:	b082      	sub	sp, #8
   138f0:	af00      	add	r7, sp, #0
   138f2:	6078      	str	r0, [r7, #4]
   138f4:	000a      	movs	r2, r1
   138f6:	1cfb      	adds	r3, r7, #3
   138f8:	701a      	strb	r2, [r3, #0]
	/* Sanity check */
	Assert(module);
	Assert(module->hw);

	/* Mark callback as enabled */
	module->enabled_callback |= (1 << callback_type);
   138fa:	687b      	ldr	r3, [r7, #4]
   138fc:	7e5b      	ldrb	r3, [r3, #25]
   138fe:	b2db      	uxtb	r3, r3
   13900:	b25a      	sxtb	r2, r3
   13902:	1cfb      	adds	r3, r7, #3
   13904:	781b      	ldrb	r3, [r3, #0]
   13906:	2101      	movs	r1, #1
   13908:	4099      	lsls	r1, r3
   1390a:	000b      	movs	r3, r1
   1390c:	b25b      	sxtb	r3, r3
   1390e:	4313      	orrs	r3, r2
   13910:	b25b      	sxtb	r3, r3
   13912:	b2da      	uxtb	r2, r3
   13914:	687b      	ldr	r3, [r7, #4]
   13916:	765a      	strb	r2, [r3, #25]
}
   13918:	46c0      	nop			; (mov r8, r8)
   1391a:	46bd      	mov	sp, r7
   1391c:	b002      	add	sp, #8
   1391e:	bd80      	pop	{r7, pc}

00013920 <I2cDriverConfigureSensorBus>:
struct i2c_master_packet sensorPacketWrite;
/******************************************************************************
 * Forward Declarations
 ******************************************************************************/
static int32_t I2cDriverConfigureSensorBus(void)
{
   13920:	b590      	push	{r4, r7, lr}
   13922:	b091      	sub	sp, #68	; 0x44
   13924:	af00      	add	r7, sp, #0
    int32_t error = STATUS_OK;
   13926:	2300      	movs	r3, #0
   13928:	63fb      	str	r3, [r7, #60]	; 0x3c
    status_code_genare_t errCodeAsf = STATUS_OK;
   1392a:	233a      	movs	r3, #58	; 0x3a
   1392c:	18fb      	adds	r3, r7, r3
   1392e:	2200      	movs	r2, #0
   13930:	701a      	strb	r2, [r3, #0]
    /* Initialize config structure and software module */
    struct i2c_master_config config_i2c_master;
    i2c_master_get_config_defaults(&config_i2c_master);
   13932:	1d3b      	adds	r3, r7, #4
   13934:	0018      	movs	r0, r3
   13936:	4b21      	ldr	r3, [pc, #132]	; (139bc <I2cDriverConfigureSensorBus+0x9c>)
   13938:	4798      	blx	r3

    config_i2c_master.pinmux_pad0 = PINMUX_PA08C_SERCOM0_PAD0;
   1393a:	1d3b      	adds	r3, r7, #4
   1393c:	4a20      	ldr	r2, [pc, #128]	; (139c0 <I2cDriverConfigureSensorBus+0xa0>)
   1393e:	61da      	str	r2, [r3, #28]
    config_i2c_master.pinmux_pad1 = PINMUX_PA09C_SERCOM0_PAD1;
   13940:	1d3b      	adds	r3, r7, #4
   13942:	4a20      	ldr	r2, [pc, #128]	; (139c4 <I2cDriverConfigureSensorBus+0xa4>)
   13944:	621a      	str	r2, [r3, #32]
    /* Change buffer timeout to something longer */
    config_i2c_master.buffer_timeout = 1000;
   13946:	1d3b      	adds	r3, r7, #4
   13948:	22fa      	movs	r2, #250	; 0xfa
   1394a:	0092      	lsls	r2, r2, #2
   1394c:	82da      	strh	r2, [r3, #22]
    /* Initialize and enable device with config. Try three times to initialize */

    for (uint8_t i = I2C_INIT_ATTEMPTS; i != 0; i--) {
   1394e:	233b      	movs	r3, #59	; 0x3b
   13950:	18fb      	adds	r3, r7, r3
   13952:	2203      	movs	r2, #3
   13954:	701a      	strb	r2, [r3, #0]
   13956:	e01e      	b.n	13996 <I2cDriverConfigureSensorBus+0x76>
        errCodeAsf = i2c_master_init(&i2cSensorBusInstance, SERCOM0, &config_i2c_master);
   13958:	233a      	movs	r3, #58	; 0x3a
   1395a:	18fc      	adds	r4, r7, r3
   1395c:	1d3a      	adds	r2, r7, #4
   1395e:	491a      	ldr	r1, [pc, #104]	; (139c8 <I2cDriverConfigureSensorBus+0xa8>)
   13960:	4b1a      	ldr	r3, [pc, #104]	; (139cc <I2cDriverConfigureSensorBus+0xac>)
   13962:	0018      	movs	r0, r3
   13964:	4b1a      	ldr	r3, [pc, #104]	; (139d0 <I2cDriverConfigureSensorBus+0xb0>)
   13966:	4798      	blx	r3
   13968:	0003      	movs	r3, r0
   1396a:	7023      	strb	r3, [r4, #0]
        if (STATUS_OK == errCodeAsf) {
   1396c:	233a      	movs	r3, #58	; 0x3a
   1396e:	18fb      	adds	r3, r7, r3
   13970:	781b      	ldrb	r3, [r3, #0]
   13972:	2b00      	cmp	r3, #0
   13974:	d104      	bne.n	13980 <I2cDriverConfigureSensorBus+0x60>
            error = errCodeAsf;
   13976:	233a      	movs	r3, #58	; 0x3a
   13978:	18fb      	adds	r3, r7, r3
   1397a:	781b      	ldrb	r3, [r3, #0]
   1397c:	63fb      	str	r3, [r7, #60]	; 0x3c
            break;
   1397e:	e00f      	b.n	139a0 <I2cDriverConfigureSensorBus+0x80>
        } else {
            i2c_master_reset(&i2cSensorBusInstance);
   13980:	4b12      	ldr	r3, [pc, #72]	; (139cc <I2cDriverConfigureSensorBus+0xac>)
   13982:	0018      	movs	r0, r3
   13984:	4b13      	ldr	r3, [pc, #76]	; (139d4 <I2cDriverConfigureSensorBus+0xb4>)
   13986:	4798      	blx	r3
    for (uint8_t i = I2C_INIT_ATTEMPTS; i != 0; i--) {
   13988:	233b      	movs	r3, #59	; 0x3b
   1398a:	18fb      	adds	r3, r7, r3
   1398c:	781a      	ldrb	r2, [r3, #0]
   1398e:	233b      	movs	r3, #59	; 0x3b
   13990:	18fb      	adds	r3, r7, r3
   13992:	3a01      	subs	r2, #1
   13994:	701a      	strb	r2, [r3, #0]
   13996:	233b      	movs	r3, #59	; 0x3b
   13998:	18fb      	adds	r3, r7, r3
   1399a:	781b      	ldrb	r3, [r3, #0]
   1399c:	2b00      	cmp	r3, #0
   1399e:	d1db      	bne.n	13958 <I2cDriverConfigureSensorBus+0x38>
        }
    }

    if (STATUS_OK != error) goto exit;
   139a0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   139a2:	2b00      	cmp	r3, #0
   139a4:	d104      	bne.n	139b0 <I2cDriverConfigureSensorBus+0x90>

    i2c_master_enable(&i2cSensorBusInstance);
   139a6:	4b09      	ldr	r3, [pc, #36]	; (139cc <I2cDriverConfigureSensorBus+0xac>)
   139a8:	0018      	movs	r0, r3
   139aa:	4b0b      	ldr	r3, [pc, #44]	; (139d8 <I2cDriverConfigureSensorBus+0xb8>)
   139ac:	4798      	blx	r3
   139ae:	e000      	b.n	139b2 <I2cDriverConfigureSensorBus+0x92>
    if (STATUS_OK != error) goto exit;
   139b0:	46c0      	nop			; (mov r8, r8)

exit:
    return error;
   139b2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
   139b4:	0018      	movs	r0, r3
   139b6:	46bd      	mov	sp, r7
   139b8:	b011      	add	sp, #68	; 0x44
   139ba:	bd90      	pop	{r4, r7, pc}
   139bc:	000137f5 	.word	0x000137f5
   139c0:	00080002 	.word	0x00080002
   139c4:	00090002 	.word	0x00090002
   139c8:	42000800 	.word	0x42000800
   139cc:	20004278 	.word	0x20004278
   139d0:	0001624d 	.word	0x0001624d
   139d4:	00016381 	.word	0x00016381
   139d8:	00013879 	.word	0x00013879

000139dc <I2cSensorsTxComplete>:
  * @param[in]   i2c Pointer to I2C structure used inside the Atmel ASFv3  framework
  * @return      This function is a callback, and it is registered as such when we send an I2C transmission on this I2C bus.
  * @note
  */
void I2cSensorsTxComplete(struct i2c_master_module *const module)
{
   139dc:	b580      	push	{r7, lr}
   139de:	b084      	sub	sp, #16
   139e0:	af00      	add	r7, sp, #0
   139e2:	6078      	str	r0, [r7, #4]
    I2cSensorBusState.i2cState = I2C_BUS_READY;
   139e4:	4b0e      	ldr	r3, [pc, #56]	; (13a20 <I2cSensorsTxComplete+0x44>)
   139e6:	2200      	movs	r2, #0
   139e8:	701a      	strb	r2, [r3, #0]
    I2cSensorBusState.rxDoneFlag = true;
   139ea:	4b0d      	ldr	r3, [pc, #52]	; (13a20 <I2cSensorsTxComplete+0x44>)
   139ec:	2201      	movs	r2, #1
   139ee:	609a      	str	r2, [r3, #8]
    BaseType_t xHigherPriorityTaskWoken = pdFALSE;
   139f0:	2300      	movs	r3, #0
   139f2:	60fb      	str	r3, [r7, #12]

    xSemaphoreGiveFromISR(sensorI2cSemaphoreHandle, &xHigherPriorityTaskWoken);
   139f4:	4b0b      	ldr	r3, [pc, #44]	; (13a24 <I2cSensorsTxComplete+0x48>)
   139f6:	681b      	ldr	r3, [r3, #0]
   139f8:	220c      	movs	r2, #12
   139fa:	18ba      	adds	r2, r7, r2
   139fc:	0011      	movs	r1, r2
   139fe:	0018      	movs	r0, r3
   13a00:	4b09      	ldr	r3, [pc, #36]	; (13a28 <I2cSensorsTxComplete+0x4c>)
   13a02:	4798      	blx	r3
    sensorTransmitError = false;
   13a04:	4b09      	ldr	r3, [pc, #36]	; (13a2c <I2cSensorsTxComplete+0x50>)
   13a06:	2200      	movs	r2, #0
   13a08:	701a      	strb	r2, [r3, #0]
    portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
   13a0a:	68fb      	ldr	r3, [r7, #12]
   13a0c:	2b00      	cmp	r3, #0
   13a0e:	d003      	beq.n	13a18 <I2cSensorsTxComplete+0x3c>
   13a10:	4b07      	ldr	r3, [pc, #28]	; (13a30 <I2cSensorsTxComplete+0x54>)
   13a12:	2280      	movs	r2, #128	; 0x80
   13a14:	0552      	lsls	r2, r2, #21
   13a16:	601a      	str	r2, [r3, #0]
}
   13a18:	46c0      	nop			; (mov r8, r8)
   13a1a:	46bd      	mov	sp, r7
   13a1c:	b004      	add	sp, #16
   13a1e:	bd80      	pop	{r7, pc}
   13a20:	20000494 	.word	0x20000494
   13a24:	200042a0 	.word	0x200042a0
   13a28:	000194e9 	.word	0x000194e9
   13a2c:	20000490 	.word	0x20000490
   13a30:	e000ed04 	.word	0xe000ed04

00013a34 <I2cSensorsRxComplete>:
  * @param[in]		i2c Pointer to I2C structure used inside the Atmel ASFv3  framework
  * @return			This function is a callback, and it is registered as such when we send an I2C reception on this I2C bus.
  * @note
  */
void I2cSensorsRxComplete(struct i2c_master_module *const module)
{
   13a34:	b580      	push	{r7, lr}
   13a36:	b084      	sub	sp, #16
   13a38:	af00      	add	r7, sp, #0
   13a3a:	6078      	str	r0, [r7, #4]
    I2cSensorBusState.i2cState = I2C_BUS_READY;
   13a3c:	4b0e      	ldr	r3, [pc, #56]	; (13a78 <I2cSensorsRxComplete+0x44>)
   13a3e:	2200      	movs	r2, #0
   13a40:	701a      	strb	r2, [r3, #0]
    I2cSensorBusState.rxDoneFlag = true;
   13a42:	4b0d      	ldr	r3, [pc, #52]	; (13a78 <I2cSensorsRxComplete+0x44>)
   13a44:	2201      	movs	r2, #1
   13a46:	609a      	str	r2, [r3, #8]
    BaseType_t xHigherPriorityTaskWoken = pdFALSE;
   13a48:	2300      	movs	r3, #0
   13a4a:	60fb      	str	r3, [r7, #12]

    xSemaphoreGiveFromISR(sensorI2cSemaphoreHandle, &xHigherPriorityTaskWoken);
   13a4c:	4b0b      	ldr	r3, [pc, #44]	; (13a7c <I2cSensorsRxComplete+0x48>)
   13a4e:	681b      	ldr	r3, [r3, #0]
   13a50:	220c      	movs	r2, #12
   13a52:	18ba      	adds	r2, r7, r2
   13a54:	0011      	movs	r1, r2
   13a56:	0018      	movs	r0, r3
   13a58:	4b09      	ldr	r3, [pc, #36]	; (13a80 <I2cSensorsRxComplete+0x4c>)
   13a5a:	4798      	blx	r3
    sensorTransmitError = false;
   13a5c:	4b09      	ldr	r3, [pc, #36]	; (13a84 <I2cSensorsRxComplete+0x50>)
   13a5e:	2200      	movs	r2, #0
   13a60:	701a      	strb	r2, [r3, #0]
    portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
   13a62:	68fb      	ldr	r3, [r7, #12]
   13a64:	2b00      	cmp	r3, #0
   13a66:	d003      	beq.n	13a70 <I2cSensorsRxComplete+0x3c>
   13a68:	4b07      	ldr	r3, [pc, #28]	; (13a88 <I2cSensorsRxComplete+0x54>)
   13a6a:	2280      	movs	r2, #128	; 0x80
   13a6c:	0552      	lsls	r2, r2, #21
   13a6e:	601a      	str	r2, [r3, #0]
}
   13a70:	46c0      	nop			; (mov r8, r8)
   13a72:	46bd      	mov	sp, r7
   13a74:	b004      	add	sp, #16
   13a76:	bd80      	pop	{r7, pc}
   13a78:	20000494 	.word	0x20000494
   13a7c:	200042a0 	.word	0x200042a0
   13a80:	000194e9 	.word	0x000194e9
   13a84:	20000490 	.word	0x20000490
   13a88:	e000ed04 	.word	0xe000ed04

00013a8c <I2cSensorsError>:
  * @param[in]		i2c Pointer to I2C structure used inside the Atmel ASFv3  framework
  * @return			This function is a callback, and it is registered as such when we send an I2C reception on this I2C bus.
  * @note
  */
void I2cSensorsError(struct i2c_master_module *const module)
{
   13a8c:	b580      	push	{r7, lr}
   13a8e:	b084      	sub	sp, #16
   13a90:	af00      	add	r7, sp, #0
   13a92:	6078      	str	r0, [r7, #4]
    I2cSensorBusState.i2cState = I2C_BUS_READY;
   13a94:	4b0e      	ldr	r3, [pc, #56]	; (13ad0 <I2cSensorsError+0x44>)
   13a96:	2200      	movs	r2, #0
   13a98:	701a      	strb	r2, [r3, #0]
    I2cSensorBusState.txDoneFlag = true;
   13a9a:	4b0d      	ldr	r3, [pc, #52]	; (13ad0 <I2cSensorsError+0x44>)
   13a9c:	2201      	movs	r2, #1
   13a9e:	605a      	str	r2, [r3, #4]
    BaseType_t xHigherPriorityTaskWoken = pdFALSE;
   13aa0:	2300      	movs	r3, #0
   13aa2:	60fb      	str	r3, [r7, #12]

    xSemaphoreGiveFromISR(sensorI2cSemaphoreHandle, &xHigherPriorityTaskWoken);
   13aa4:	4b0b      	ldr	r3, [pc, #44]	; (13ad4 <I2cSensorsError+0x48>)
   13aa6:	681b      	ldr	r3, [r3, #0]
   13aa8:	220c      	movs	r2, #12
   13aaa:	18ba      	adds	r2, r7, r2
   13aac:	0011      	movs	r1, r2
   13aae:	0018      	movs	r0, r3
   13ab0:	4b09      	ldr	r3, [pc, #36]	; (13ad8 <I2cSensorsError+0x4c>)
   13ab2:	4798      	blx	r3
    sensorTransmitError = true;
   13ab4:	4b09      	ldr	r3, [pc, #36]	; (13adc <I2cSensorsError+0x50>)
   13ab6:	2201      	movs	r2, #1
   13ab8:	701a      	strb	r2, [r3, #0]
    portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
   13aba:	68fb      	ldr	r3, [r7, #12]
   13abc:	2b00      	cmp	r3, #0
   13abe:	d003      	beq.n	13ac8 <I2cSensorsError+0x3c>
   13ac0:	4b07      	ldr	r3, [pc, #28]	; (13ae0 <I2cSensorsError+0x54>)
   13ac2:	2280      	movs	r2, #128	; 0x80
   13ac4:	0552      	lsls	r2, r2, #21
   13ac6:	601a      	str	r2, [r3, #0]
}
   13ac8:	46c0      	nop			; (mov r8, r8)
   13aca:	46bd      	mov	sp, r7
   13acc:	b004      	add	sp, #16
   13ace:	bd80      	pop	{r7, pc}
   13ad0:	20000494 	.word	0x20000494
   13ad4:	200042a0 	.word	0x200042a0
   13ad8:	000194e9 	.word	0x000194e9
   13adc:	20000490 	.word	0x20000490
   13ae0:	e000ed04 	.word	0xe000ed04

00013ae4 <I2cDriverRegisterSensorBusCallbacks>:

void I2cDriverRegisterSensorBusCallbacks(void)
{
   13ae4:	b580      	push	{r7, lr}
   13ae6:	af00      	add	r7, sp, #0
    /* Register callback function. */
    i2c_master_register_callback(&i2cSensorBusInstance, I2cSensorsTxComplete, I2C_MASTER_CALLBACK_WRITE_COMPLETE);
   13ae8:	4911      	ldr	r1, [pc, #68]	; (13b30 <I2cDriverRegisterSensorBusCallbacks+0x4c>)
   13aea:	4b12      	ldr	r3, [pc, #72]	; (13b34 <I2cDriverRegisterSensorBusCallbacks+0x50>)
   13aec:	2200      	movs	r2, #0
   13aee:	0018      	movs	r0, r3
   13af0:	4b11      	ldr	r3, [pc, #68]	; (13b38 <I2cDriverRegisterSensorBusCallbacks+0x54>)
   13af2:	4798      	blx	r3
    i2c_master_enable_callback(&i2cSensorBusInstance, I2C_MASTER_CALLBACK_WRITE_COMPLETE);
   13af4:	4b0f      	ldr	r3, [pc, #60]	; (13b34 <I2cDriverRegisterSensorBusCallbacks+0x50>)
   13af6:	2100      	movs	r1, #0
   13af8:	0018      	movs	r0, r3
   13afa:	4b10      	ldr	r3, [pc, #64]	; (13b3c <I2cDriverRegisterSensorBusCallbacks+0x58>)
   13afc:	4798      	blx	r3

    i2c_master_register_callback(&i2cSensorBusInstance, I2cSensorsRxComplete, I2C_MASTER_CALLBACK_READ_COMPLETE);
   13afe:	4910      	ldr	r1, [pc, #64]	; (13b40 <I2cDriverRegisterSensorBusCallbacks+0x5c>)
   13b00:	4b0c      	ldr	r3, [pc, #48]	; (13b34 <I2cDriverRegisterSensorBusCallbacks+0x50>)
   13b02:	2201      	movs	r2, #1
   13b04:	0018      	movs	r0, r3
   13b06:	4b0c      	ldr	r3, [pc, #48]	; (13b38 <I2cDriverRegisterSensorBusCallbacks+0x54>)
   13b08:	4798      	blx	r3
    i2c_master_enable_callback(&i2cSensorBusInstance, I2C_MASTER_CALLBACK_READ_COMPLETE);
   13b0a:	4b0a      	ldr	r3, [pc, #40]	; (13b34 <I2cDriverRegisterSensorBusCallbacks+0x50>)
   13b0c:	2101      	movs	r1, #1
   13b0e:	0018      	movs	r0, r3
   13b10:	4b0a      	ldr	r3, [pc, #40]	; (13b3c <I2cDriverRegisterSensorBusCallbacks+0x58>)
   13b12:	4798      	blx	r3

    i2c_master_register_callback(&i2cSensorBusInstance, I2cSensorsError, I2C_MASTER_CALLBACK_ERROR);
   13b14:	490b      	ldr	r1, [pc, #44]	; (13b44 <I2cDriverRegisterSensorBusCallbacks+0x60>)
   13b16:	4b07      	ldr	r3, [pc, #28]	; (13b34 <I2cDriverRegisterSensorBusCallbacks+0x50>)
   13b18:	2202      	movs	r2, #2
   13b1a:	0018      	movs	r0, r3
   13b1c:	4b06      	ldr	r3, [pc, #24]	; (13b38 <I2cDriverRegisterSensorBusCallbacks+0x54>)
   13b1e:	4798      	blx	r3
    i2c_master_enable_callback(&i2cSensorBusInstance, I2C_MASTER_CALLBACK_ERROR);
   13b20:	4b04      	ldr	r3, [pc, #16]	; (13b34 <I2cDriverRegisterSensorBusCallbacks+0x50>)
   13b22:	2102      	movs	r1, #2
   13b24:	0018      	movs	r0, r3
   13b26:	4b05      	ldr	r3, [pc, #20]	; (13b3c <I2cDriverRegisterSensorBusCallbacks+0x58>)
   13b28:	4798      	blx	r3
}
   13b2a:	46c0      	nop			; (mov r8, r8)
   13b2c:	46bd      	mov	sp, r7
   13b2e:	bd80      	pop	{r7, pc}
   13b30:	000139dd 	.word	0x000139dd
   13b34:	20004278 	.word	0x20004278
   13b38:	00012909 	.word	0x00012909
   13b3c:	000138ed 	.word	0x000138ed
   13b40:	00013a35 	.word	0x00013a35
   13b44:	00013a8d 	.word	0x00013a8d

00013b48 <I2cInitializeDriver>:
 * @brief       Function call to initialize the I2C driver\
 * @details     This function must be called from an RTOS thread if using RTOS, and must be called before any I2C call
 * @note
 */
int32_t I2cInitializeDriver(void)
{
   13b48:	b580      	push	{r7, lr}
   13b4a:	b082      	sub	sp, #8
   13b4c:	af00      	add	r7, sp, #0
    int32_t error = STATUS_OK;
   13b4e:	2300      	movs	r3, #0
   13b50:	607b      	str	r3, [r7, #4]

    error = I2cDriverConfigureSensorBus();
   13b52:	4b14      	ldr	r3, [pc, #80]	; (13ba4 <I2cInitializeDriver+0x5c>)
   13b54:	4798      	blx	r3
   13b56:	0003      	movs	r3, r0
   13b58:	607b      	str	r3, [r7, #4]
    if (STATUS_OK != error) goto exit;
   13b5a:	687b      	ldr	r3, [r7, #4]
   13b5c:	2b00      	cmp	r3, #0
   13b5e:	d11a      	bne.n	13b96 <I2cInitializeDriver+0x4e>

    I2cDriverRegisterSensorBusCallbacks();
   13b60:	4b11      	ldr	r3, [pc, #68]	; (13ba8 <I2cInitializeDriver+0x60>)
   13b62:	4798      	blx	r3

    sensorI2cMutexHandle = xSemaphoreCreateMutex();
   13b64:	2001      	movs	r0, #1
   13b66:	4b11      	ldr	r3, [pc, #68]	; (13bac <I2cInitializeDriver+0x64>)
   13b68:	4798      	blx	r3
   13b6a:	0002      	movs	r2, r0
   13b6c:	4b10      	ldr	r3, [pc, #64]	; (13bb0 <I2cInitializeDriver+0x68>)
   13b6e:	601a      	str	r2, [r3, #0]

    sensorI2cSemaphoreHandle = xSemaphoreCreateBinary();
   13b70:	2203      	movs	r2, #3
   13b72:	2100      	movs	r1, #0
   13b74:	2001      	movs	r0, #1
   13b76:	4b0f      	ldr	r3, [pc, #60]	; (13bb4 <I2cInitializeDriver+0x6c>)
   13b78:	4798      	blx	r3
   13b7a:	0002      	movs	r2, r0
   13b7c:	4b0e      	ldr	r3, [pc, #56]	; (13bb8 <I2cInitializeDriver+0x70>)
   13b7e:	601a      	str	r2, [r3, #0]
    // xSemaphoreGive(sensorI2cSemaphoreHandle);

    if (NULL == sensorI2cMutexHandle || NULL == sensorI2cSemaphoreHandle) {
   13b80:	4b0b      	ldr	r3, [pc, #44]	; (13bb0 <I2cInitializeDriver+0x68>)
   13b82:	681b      	ldr	r3, [r3, #0]
   13b84:	2b00      	cmp	r3, #0
   13b86:	d003      	beq.n	13b90 <I2cInitializeDriver+0x48>
   13b88:	4b0b      	ldr	r3, [pc, #44]	; (13bb8 <I2cInitializeDriver+0x70>)
   13b8a:	681b      	ldr	r3, [r3, #0]
   13b8c:	2b00      	cmp	r3, #0
   13b8e:	d103      	bne.n	13b98 <I2cInitializeDriver+0x50>
        error = STATUS_SUSPEND;  // Could not initialize mutex!
   13b90:	2306      	movs	r3, #6
   13b92:	607b      	str	r3, [r7, #4]
        goto exit;
   13b94:	e000      	b.n	13b98 <I2cInitializeDriver+0x50>
    if (STATUS_OK != error) goto exit;
   13b96:	46c0      	nop			; (mov r8, r8)
    }

exit:
    return error;
   13b98:	687b      	ldr	r3, [r7, #4]
}
   13b9a:	0018      	movs	r0, r3
   13b9c:	46bd      	mov	sp, r7
   13b9e:	b002      	add	sp, #8
   13ba0:	bd80      	pop	{r7, pc}
   13ba2:	46c0      	nop			; (mov r8, r8)
   13ba4:	00013921 	.word	0x00013921
   13ba8:	00013ae5 	.word	0x00013ae5
   13bac:	00018e21 	.word	0x00018e21
   13bb0:	20004274 	.word	0x20004274
   13bb4:	00018bb9 	.word	0x00018bb9
   13bb8:	200042a0 	.word	0x200042a0

00013bbc <I2cWriteData>:
 * @return      Returns an error message in case of error. See ErrCodes.h
 * @note
 */

int32_t I2cWriteData(I2C_Data *data)
{
   13bbc:	b590      	push	{r4, r7, lr}
   13bbe:	b085      	sub	sp, #20
   13bc0:	af00      	add	r7, sp, #0
   13bc2:	6078      	str	r0, [r7, #4]
    int32_t error = ERROR_NONE;
   13bc4:	2300      	movs	r3, #0
   13bc6:	60fb      	str	r3, [r7, #12]
    enum status_code hwError;

    // Check parameters
    if (data == NULL || data->msgOut == NULL) {
   13bc8:	687b      	ldr	r3, [r7, #4]
   13bca:	2b00      	cmp	r3, #0
   13bcc:	d003      	beq.n	13bd6 <I2cWriteData+0x1a>
   13bce:	687b      	ldr	r3, [r7, #4]
   13bd0:	685b      	ldr	r3, [r3, #4]
   13bd2:	2b00      	cmp	r3, #0
   13bd4:	d103      	bne.n	13bde <I2cWriteData+0x22>
        error = ERR_INVALID_ARG;
   13bd6:	2308      	movs	r3, #8
   13bd8:	425b      	negs	r3, r3
   13bda:	60fb      	str	r3, [r7, #12]
        goto exit;
   13bdc:	e01f      	b.n	13c1e <I2cWriteData+0x62>
    }

    // Prepare to write
    sensorPacketWrite.address = data->address;
   13bde:	687b      	ldr	r3, [r7, #4]
   13be0:	781b      	ldrb	r3, [r3, #0]
   13be2:	b29a      	uxth	r2, r3
   13be4:	4b10      	ldr	r3, [pc, #64]	; (13c28 <I2cWriteData+0x6c>)
   13be6:	801a      	strh	r2, [r3, #0]
    sensorPacketWrite.data = (uint8_t *)data->msgOut;
   13be8:	687b      	ldr	r3, [r7, #4]
   13bea:	685a      	ldr	r2, [r3, #4]
   13bec:	4b0e      	ldr	r3, [pc, #56]	; (13c28 <I2cWriteData+0x6c>)
   13bee:	605a      	str	r2, [r3, #4]
    sensorPacketWrite.data_length = data->lenOut;
   13bf0:	687b      	ldr	r3, [r7, #4]
   13bf2:	89da      	ldrh	r2, [r3, #14]
   13bf4:	4b0c      	ldr	r3, [pc, #48]	; (13c28 <I2cWriteData+0x6c>)
   13bf6:	805a      	strh	r2, [r3, #2]

    // Write

    hwError = i2c_master_write_packet_job(&i2cSensorBusInstance, &sensorPacketWrite);
   13bf8:	230b      	movs	r3, #11
   13bfa:	18fc      	adds	r4, r7, r3
   13bfc:	4a0a      	ldr	r2, [pc, #40]	; (13c28 <I2cWriteData+0x6c>)
   13bfe:	4b0b      	ldr	r3, [pc, #44]	; (13c2c <I2cWriteData+0x70>)
   13c00:	0011      	movs	r1, r2
   13c02:	0018      	movs	r0, r3
   13c04:	4b0a      	ldr	r3, [pc, #40]	; (13c30 <I2cWriteData+0x74>)
   13c06:	4798      	blx	r3
   13c08:	0003      	movs	r3, r0
   13c0a:	7023      	strb	r3, [r4, #0]

    if (STATUS_OK != hwError) {
   13c0c:	230b      	movs	r3, #11
   13c0e:	18fb      	adds	r3, r7, r3
   13c10:	781b      	ldrb	r3, [r3, #0]
   13c12:	2b00      	cmp	r3, #0
   13c14:	d003      	beq.n	13c1e <I2cWriteData+0x62>
        error = ERROR_IO;
   13c16:	2306      	movs	r3, #6
   13c18:	425b      	negs	r3, r3
   13c1a:	60fb      	str	r3, [r7, #12]
        goto exit;
   13c1c:	46c0      	nop			; (mov r8, r8)
    }

exit:
    return error;
   13c1e:	68fb      	ldr	r3, [r7, #12]
}
   13c20:	0018      	movs	r0, r3
   13c22:	46bd      	mov	sp, r7
   13c24:	b005      	add	sp, #20
   13c26:	bd90      	pop	{r4, r7, pc}
   13c28:	200042a4 	.word	0x200042a4
   13c2c:	20004278 	.word	0x20004278
   13c30:	00012b8d 	.word	0x00012b8d

00013c34 <I2cReadData>:
 * @param[in]   data Pointer to I2C data structure which has all the information needed to send an I2C message
 * @return      Returns an error message in case of error. See ErrCodes.h
 * @note
 */
int32_t I2cReadData(I2C_Data *data)
{
   13c34:	b590      	push	{r4, r7, lr}
   13c36:	b085      	sub	sp, #20
   13c38:	af00      	add	r7, sp, #0
   13c3a:	6078      	str	r0, [r7, #4]
    int32_t error = ERROR_NONE;
   13c3c:	2300      	movs	r3, #0
   13c3e:	60fb      	str	r3, [r7, #12]
    enum status_code hwError;

    // Check parameters
    if (data == NULL || data->msgOut == NULL) {
   13c40:	687b      	ldr	r3, [r7, #4]
   13c42:	2b00      	cmp	r3, #0
   13c44:	d003      	beq.n	13c4e <I2cReadData+0x1a>
   13c46:	687b      	ldr	r3, [r7, #4]
   13c48:	685b      	ldr	r3, [r3, #4]
   13c4a:	2b00      	cmp	r3, #0
   13c4c:	d103      	bne.n	13c56 <I2cReadData+0x22>
        error = ERR_INVALID_ARG;
   13c4e:	2308      	movs	r3, #8
   13c50:	425b      	negs	r3, r3
   13c52:	60fb      	str	r3, [r7, #12]
        goto exit;
   13c54:	e01f      	b.n	13c96 <I2cReadData+0x62>
    }

    // Prepare to read
    sensorPacketWrite.address = data->address;
   13c56:	687b      	ldr	r3, [r7, #4]
   13c58:	781b      	ldrb	r3, [r3, #0]
   13c5a:	b29a      	uxth	r2, r3
   13c5c:	4b10      	ldr	r3, [pc, #64]	; (13ca0 <I2cReadData+0x6c>)
   13c5e:	801a      	strh	r2, [r3, #0]
    sensorPacketWrite.data = data->msgIn;
   13c60:	687b      	ldr	r3, [r7, #4]
   13c62:	689a      	ldr	r2, [r3, #8]
   13c64:	4b0e      	ldr	r3, [pc, #56]	; (13ca0 <I2cReadData+0x6c>)
   13c66:	605a      	str	r2, [r3, #4]
    sensorPacketWrite.data_length = data->lenIn;
   13c68:	687b      	ldr	r3, [r7, #4]
   13c6a:	899a      	ldrh	r2, [r3, #12]
   13c6c:	4b0c      	ldr	r3, [pc, #48]	; (13ca0 <I2cReadData+0x6c>)
   13c6e:	805a      	strh	r2, [r3, #2]

    // Read

    hwError = i2c_master_read_packet_job(&i2cSensorBusInstance, &sensorPacketWrite);
   13c70:	230b      	movs	r3, #11
   13c72:	18fc      	adds	r4, r7, r3
   13c74:	4a0a      	ldr	r2, [pc, #40]	; (13ca0 <I2cReadData+0x6c>)
   13c76:	4b0b      	ldr	r3, [pc, #44]	; (13ca4 <I2cReadData+0x70>)
   13c78:	0011      	movs	r1, r2
   13c7a:	0018      	movs	r0, r3
   13c7c:	4b0a      	ldr	r3, [pc, #40]	; (13ca8 <I2cReadData+0x74>)
   13c7e:	4798      	blx	r3
   13c80:	0003      	movs	r3, r0
   13c82:	7023      	strb	r3, [r4, #0]

    if (STATUS_OK != hwError) {
   13c84:	230b      	movs	r3, #11
   13c86:	18fb      	adds	r3, r7, r3
   13c88:	781b      	ldrb	r3, [r3, #0]
   13c8a:	2b00      	cmp	r3, #0
   13c8c:	d003      	beq.n	13c96 <I2cReadData+0x62>
        error = ERROR_IO;
   13c8e:	2306      	movs	r3, #6
   13c90:	425b      	negs	r3, r3
   13c92:	60fb      	str	r3, [r7, #12]
        goto exit;
   13c94:	46c0      	nop			; (mov r8, r8)
    }

exit:
    return error;
   13c96:	68fb      	ldr	r3, [r7, #12]
}
   13c98:	0018      	movs	r0, r3
   13c9a:	46bd      	mov	sp, r7
   13c9c:	b005      	add	sp, #20
   13c9e:	bd90      	pop	{r4, r7, pc}
   13ca0:	200042a4 	.word	0x200042a4
   13ca4:	20004278 	.word	0x20004278
   13ca8:	00012aa9 	.word	0x00012aa9

00013cac <I2cFreeMutex>:
 * @param[in]   bus Enum that represents the bus in which we are interested to free the mutex of.
 * @return      Returns (0) if the bus is ready, (1) if it is busy.
 * @note
 */
int32_t I2cFreeMutex(void)
{
   13cac:	b590      	push	{r4, r7, lr}
   13cae:	b083      	sub	sp, #12
   13cb0:	af00      	add	r7, sp, #0
    int32_t error = ERROR_NONE;
   13cb2:	2300      	movs	r3, #0
   13cb4:	607b      	str	r3, [r7, #4]

    if (xSemaphoreGive(sensorI2cMutexHandle) != pdTRUE) {
   13cb6:	4b09      	ldr	r3, [pc, #36]	; (13cdc <I2cFreeMutex+0x30>)
   13cb8:	6818      	ldr	r0, [r3, #0]
   13cba:	2300      	movs	r3, #0
   13cbc:	2200      	movs	r2, #0
   13cbe:	2100      	movs	r1, #0
   13cc0:	4c07      	ldr	r4, [pc, #28]	; (13ce0 <I2cFreeMutex+0x34>)
   13cc2:	47a0      	blx	r4
   13cc4:	0003      	movs	r3, r0
   13cc6:	2b01      	cmp	r3, #1
   13cc8:	d002      	beq.n	13cd0 <I2cFreeMutex+0x24>
        error = ERROR_NOT_INITIALIZED;  // We could not return the mutex! We must not have it!
   13cca:	2314      	movs	r3, #20
   13ccc:	425b      	negs	r3, r3
   13cce:	607b      	str	r3, [r7, #4]
    }
    return error;
   13cd0:	687b      	ldr	r3, [r7, #4]
}
   13cd2:	0018      	movs	r0, r3
   13cd4:	46bd      	mov	sp, r7
   13cd6:	b003      	add	sp, #12
   13cd8:	bd90      	pop	{r4, r7, pc}
   13cda:	46c0      	nop			; (mov r8, r8)
   13cdc:	20004274 	.word	0x20004274
   13ce0:	00018e61 	.word	0x00018e61

00013ce4 <I2cGetMutex>:
 * @param[in]   waitTime Time to wait for the mutex to be freed.
 * @return      Returns (0) if the bus is ready, (1) if it is busy.
 * @note
 */
int32_t I2cGetMutex(TickType_t waitTime)
{
   13ce4:	b580      	push	{r7, lr}
   13ce6:	b084      	sub	sp, #16
   13ce8:	af00      	add	r7, sp, #0
   13cea:	6078      	str	r0, [r7, #4]
    int32_t error = ERROR_NONE;
   13cec:	2300      	movs	r3, #0
   13cee:	60fb      	str	r3, [r7, #12]
    if (xSemaphoreTake(sensorI2cMutexHandle, waitTime) != pdTRUE) {
   13cf0:	4b08      	ldr	r3, [pc, #32]	; (13d14 <I2cGetMutex+0x30>)
   13cf2:	681b      	ldr	r3, [r3, #0]
   13cf4:	687a      	ldr	r2, [r7, #4]
   13cf6:	0011      	movs	r1, r2
   13cf8:	0018      	movs	r0, r3
   13cfa:	4b07      	ldr	r3, [pc, #28]	; (13d18 <I2cGetMutex+0x34>)
   13cfc:	4798      	blx	r3
   13cfe:	0003      	movs	r3, r0
   13d00:	2b01      	cmp	r3, #1
   13d02:	d002      	beq.n	13d0a <I2cGetMutex+0x26>
        error = ERROR_NOT_READY;
   13d04:	231d      	movs	r3, #29
   13d06:	425b      	negs	r3, r3
   13d08:	60fb      	str	r3, [r7, #12]
    }
    return error;
   13d0a:	68fb      	ldr	r3, [r7, #12]
}
   13d0c:	0018      	movs	r0, r3
   13d0e:	46bd      	mov	sp, r7
   13d10:	b004      	add	sp, #16
   13d12:	bd80      	pop	{r7, pc}
   13d14:	20004274 	.word	0x20004274
   13d18:	00019b71 	.word	0x00019b71

00013d1c <I2cGetSemaphoreHandle>:

static int32_t I2cGetSemaphoreHandle(SemaphoreHandle_t *handle)
{
   13d1c:	b580      	push	{r7, lr}
   13d1e:	b084      	sub	sp, #16
   13d20:	af00      	add	r7, sp, #0
   13d22:	6078      	str	r0, [r7, #4]
    int32_t error = ERROR_NONE;
   13d24:	2300      	movs	r3, #0
   13d26:	60fb      	str	r3, [r7, #12]
    *handle = sensorI2cSemaphoreHandle;
   13d28:	4b04      	ldr	r3, [pc, #16]	; (13d3c <I2cGetSemaphoreHandle+0x20>)
   13d2a:	681a      	ldr	r2, [r3, #0]
   13d2c:	687b      	ldr	r3, [r7, #4]
   13d2e:	601a      	str	r2, [r3, #0]
    return error;
   13d30:	68fb      	ldr	r3, [r7, #12]
}
   13d32:	0018      	movs	r0, r3
   13d34:	46bd      	mov	sp, r7
   13d36:	b004      	add	sp, #16
   13d38:	bd80      	pop	{r7, pc}
   13d3a:	46c0      	nop			; (mov r8, r8)
   13d3c:	200042a0 	.word	0x200042a0

00013d40 <I2cGetTaskErrorStatus>:
 *the I2C data structure).
 * @return      Returns an error message in case of error. See ErrCodes.h
 * @note
 */
static uint8_t I2cGetTaskErrorStatus(void)
{
   13d40:	b580      	push	{r7, lr}
   13d42:	af00      	add	r7, sp, #0
    return sensorTransmitError;
   13d44:	4b02      	ldr	r3, [pc, #8]	; (13d50 <I2cGetTaskErrorStatus+0x10>)
   13d46:	781b      	ldrb	r3, [r3, #0]
}
   13d48:	0018      	movs	r0, r3
   13d4a:	46bd      	mov	sp, r7
   13d4c:	bd80      	pop	{r7, pc}
   13d4e:	46c0      	nop			; (mov r8, r8)
   13d50:	20000490 	.word	0x20000490

00013d54 <I2cSetTaskErrorStatus>:
 * @param[in]   value Value to which to set the error flag to.
 * @return      Returns an error message in case of error. See ErrCodes.h
 * @note
 */
static void I2cSetTaskErrorStatus(uint8_t value)
{
   13d54:	b580      	push	{r7, lr}
   13d56:	b082      	sub	sp, #8
   13d58:	af00      	add	r7, sp, #0
   13d5a:	0002      	movs	r2, r0
   13d5c:	1dfb      	adds	r3, r7, #7
   13d5e:	701a      	strb	r2, [r3, #0]
    sensorTransmitError = value;
   13d60:	4b03      	ldr	r3, [pc, #12]	; (13d70 <I2cSetTaskErrorStatus+0x1c>)
   13d62:	1dfa      	adds	r2, r7, #7
   13d64:	7812      	ldrb	r2, [r2, #0]
   13d66:	701a      	strb	r2, [r3, #0]
}
   13d68:	46c0      	nop			; (mov r8, r8)
   13d6a:	46bd      	mov	sp, r7
   13d6c:	b002      	add	sp, #8
   13d6e:	bd80      	pop	{r7, pc}
   13d70:	20000490 	.word	0x20000490

00013d74 <I2cWriteDataWait>:
  * @param[in]   xMaxBlockTime Maximum time for the thread to wait until the I2C mutex is free.
  * @return      Returns an error message in case of error.
  * @note
  */
int32_t I2cWriteDataWait(I2C_Data *data, const TickType_t xMaxBlockTime)
{
   13d74:	b580      	push	{r7, lr}
   13d76:	b084      	sub	sp, #16
   13d78:	af00      	add	r7, sp, #0
   13d7a:	6078      	str	r0, [r7, #4]
   13d7c:	6039      	str	r1, [r7, #0]
    int32_t error = ERROR_NONE;
   13d7e:	2300      	movs	r3, #0
   13d80:	60fb      	str	r3, [r7, #12]
    SemaphoreHandle_t semHandle = NULL;
   13d82:	2300      	movs	r3, #0
   13d84:	60bb      	str	r3, [r7, #8]

    //---0. Get Mutex
    error = I2cGetMutex(WAIT_I2C_LINE_MS);
   13d86:	2396      	movs	r3, #150	; 0x96
   13d88:	005b      	lsls	r3, r3, #1
   13d8a:	0018      	movs	r0, r3
   13d8c:	4b28      	ldr	r3, [pc, #160]	; (13e30 <I2cWriteDataWait+0xbc>)
   13d8e:	4798      	blx	r3
   13d90:	0003      	movs	r3, r0
   13d92:	60fb      	str	r3, [r7, #12]
    if (ERROR_NONE != error) goto exit;
   13d94:	68fb      	ldr	r3, [r7, #12]
   13d96:	2b00      	cmp	r3, #0
   13d98:	d138      	bne.n	13e0c <I2cWriteDataWait+0x98>

    //---1. Get Semaphore Handle
    error = I2cGetSemaphoreHandle(&semHandle);
   13d9a:	2308      	movs	r3, #8
   13d9c:	18fb      	adds	r3, r7, r3
   13d9e:	0018      	movs	r0, r3
   13da0:	4b24      	ldr	r3, [pc, #144]	; (13e34 <I2cWriteDataWait+0xc0>)
   13da2:	4798      	blx	r3
   13da4:	0003      	movs	r3, r0
   13da6:	60fb      	str	r3, [r7, #12]
    if (ERROR_NONE != error) goto exit;
   13da8:	68fb      	ldr	r3, [r7, #12]
   13daa:	2b00      	cmp	r3, #0
   13dac:	d130      	bne.n	13e10 <I2cWriteDataWait+0x9c>

    //---2. Initiate sending data

    error = I2cWriteData(data);
   13dae:	687b      	ldr	r3, [r7, #4]
   13db0:	0018      	movs	r0, r3
   13db2:	4b21      	ldr	r3, [pc, #132]	; (13e38 <I2cWriteDataWait+0xc4>)
   13db4:	4798      	blx	r3
   13db6:	0003      	movs	r3, r0
   13db8:	60fb      	str	r3, [r7, #12]
    if (ERROR_NONE != error) {
   13dba:	68fb      	ldr	r3, [r7, #12]
   13dbc:	2b00      	cmp	r3, #0
   13dbe:	d12a      	bne.n	13e16 <I2cWriteDataWait+0xa2>
        goto exitError0;
    }

    //---2. Wait for binary semaphore to tell us that we are done!
    if (xSemaphoreTake(semHandle, xMaxBlockTime) == pdTRUE) {
   13dc0:	68bb      	ldr	r3, [r7, #8]
   13dc2:	683a      	ldr	r2, [r7, #0]
   13dc4:	0011      	movs	r1, r2
   13dc6:	0018      	movs	r0, r3
   13dc8:	4b1c      	ldr	r3, [pc, #112]	; (13e3c <I2cWriteDataWait+0xc8>)
   13dca:	4798      	blx	r3
   13dcc:	0003      	movs	r3, r0
   13dce:	2b01      	cmp	r3, #1
   13dd0:	d111      	bne.n	13df6 <I2cWriteDataWait+0x82>
        /* The transmission ended as expected. We now delay until the I2C sensor is finished */
        if (I2cGetTaskErrorStatus()) {
   13dd2:	4b1b      	ldr	r3, [pc, #108]	; (13e40 <I2cWriteDataWait+0xcc>)
   13dd4:	4798      	blx	r3
   13dd6:	1e03      	subs	r3, r0, #0
   13dd8:	d011      	beq.n	13dfe <I2cWriteDataWait+0x8a>
            I2cSetTaskErrorStatus(false);
   13dda:	2000      	movs	r0, #0
   13ddc:	4b19      	ldr	r3, [pc, #100]	; (13e44 <I2cWriteDataWait+0xd0>)
   13dde:	4798      	blx	r3
            if (error != ERROR_NONE) {
   13de0:	68fb      	ldr	r3, [r7, #12]
   13de2:	2b00      	cmp	r3, #0
   13de4:	d003      	beq.n	13dee <I2cWriteDataWait+0x7a>
                error = ERROR_I2C_HANG_RESET;
   13de6:	2321      	movs	r3, #33	; 0x21
   13de8:	425b      	negs	r3, r3
   13dea:	60fb      	str	r3, [r7, #12]
            } else {
                error = ERROR_ABORTED;
            }
            goto exitError0;
   13dec:	e014      	b.n	13e18 <I2cWriteDataWait+0xa4>
                error = ERROR_ABORTED;
   13dee:	2303      	movs	r3, #3
   13df0:	425b      	negs	r3, r3
   13df2:	60fb      	str	r3, [r7, #12]
            goto exitError0;
   13df4:	e010      	b.n	13e18 <I2cWriteDataWait+0xa4>
        }
    } else {
        /* The call to ulTaskNotifyTake() timed out. */
        error = ERR_TIMEOUT;
   13df6:	2303      	movs	r3, #3
   13df8:	425b      	negs	r3, r3
   13dfa:	60fb      	str	r3, [r7, #12]
        goto exitError0;
   13dfc:	e00c      	b.n	13e18 <I2cWriteDataWait+0xa4>
    }

    //---8. Release Mutex
    error |= I2cFreeMutex();
   13dfe:	4b12      	ldr	r3, [pc, #72]	; (13e48 <I2cWriteDataWait+0xd4>)
   13e00:	4798      	blx	r3
   13e02:	0002      	movs	r2, r0
   13e04:	68fb      	ldr	r3, [r7, #12]
   13e06:	4313      	orrs	r3, r2
   13e08:	60fb      	str	r3, [r7, #12]
   13e0a:	e002      	b.n	13e12 <I2cWriteDataWait+0x9e>
    if (ERROR_NONE != error) goto exit;
   13e0c:	46c0      	nop			; (mov r8, r8)
   13e0e:	e000      	b.n	13e12 <I2cWriteDataWait+0x9e>
    if (ERROR_NONE != error) goto exit;
   13e10:	46c0      	nop			; (mov r8, r8)
// xSemaphoreGive(semHandle);
exit:
    return error;
   13e12:	68fb      	ldr	r3, [r7, #12]
   13e14:	e007      	b.n	13e26 <I2cWriteDataWait+0xb2>
        goto exitError0;
   13e16:	46c0      	nop			; (mov r8, r8)

exitError0:
    error |= I2cFreeMutex();
   13e18:	4b0b      	ldr	r3, [pc, #44]	; (13e48 <I2cWriteDataWait+0xd4>)
   13e1a:	4798      	blx	r3
   13e1c:	0002      	movs	r2, r0
   13e1e:	68fb      	ldr	r3, [r7, #12]
   13e20:	4313      	orrs	r3, r2
   13e22:	60fb      	str	r3, [r7, #12]
    // xSemaphoreGive(semHandle);
    return error;
   13e24:	68fb      	ldr	r3, [r7, #12]
}
   13e26:	0018      	movs	r0, r3
   13e28:	46bd      	mov	sp, r7
   13e2a:	b004      	add	sp, #16
   13e2c:	bd80      	pop	{r7, pc}
   13e2e:	46c0      	nop			; (mov r8, r8)
   13e30:	00013ce5 	.word	0x00013ce5
   13e34:	00013d1d 	.word	0x00013d1d
   13e38:	00013bbd 	.word	0x00013bbd
   13e3c:	00019b71 	.word	0x00019b71
   13e40:	00013d41 	.word	0x00013d41
   13e44:	00013d55 	.word	0x00013d55
   13e48:	00013cad 	.word	0x00013cad

00013e4c <I2cReadDataWait>:
  * @param[in]   xMaxBlockTime Maximum time for the thread to wait until the I2C mutex is free.
  * @return      Returns an error message in case of error. See ErrCodes.h
  * @note        THIS IS THE FREERTOS VERSION! DO NOT Declare #define USE_FREERTOS if you wish to use the baremetal version!
  */
int32_t I2cReadDataWait(I2C_Data *data, const TickType_t delay, const TickType_t xMaxBlockTime)
{
   13e4c:	b580      	push	{r7, lr}
   13e4e:	b086      	sub	sp, #24
   13e50:	af00      	add	r7, sp, #0
   13e52:	60f8      	str	r0, [r7, #12]
   13e54:	60b9      	str	r1, [r7, #8]
   13e56:	607a      	str	r2, [r7, #4]
    int32_t error = ERROR_NONE;
   13e58:	2300      	movs	r3, #0
   13e5a:	617b      	str	r3, [r7, #20]
    SemaphoreHandle_t semHandle = NULL;
   13e5c:	2300      	movs	r3, #0
   13e5e:	613b      	str	r3, [r7, #16]

    //---0. Get Mutex
    error = I2cGetMutex(WAIT_I2C_LINE_MS);
   13e60:	2396      	movs	r3, #150	; 0x96
   13e62:	005b      	lsls	r3, r3, #1
   13e64:	0018      	movs	r0, r3
   13e66:	4b36      	ldr	r3, [pc, #216]	; (13f40 <I2cReadDataWait+0xf4>)
   13e68:	4798      	blx	r3
   13e6a:	0003      	movs	r3, r0
   13e6c:	617b      	str	r3, [r7, #20]
    if (ERROR_NONE != error) goto exit;
   13e6e:	697b      	ldr	r3, [r7, #20]
   13e70:	2b00      	cmp	r3, #0
   13e72:	d155      	bne.n	13f20 <I2cReadDataWait+0xd4>

    //---1. Get Semaphore Handle
    error = I2cGetSemaphoreHandle(&semHandle);
   13e74:	2310      	movs	r3, #16
   13e76:	18fb      	adds	r3, r7, r3
   13e78:	0018      	movs	r0, r3
   13e7a:	4b32      	ldr	r3, [pc, #200]	; (13f44 <I2cReadDataWait+0xf8>)
   13e7c:	4798      	blx	r3
   13e7e:	0003      	movs	r3, r0
   13e80:	617b      	str	r3, [r7, #20]
    if (ERROR_NONE != error) goto exit;
   13e82:	697b      	ldr	r3, [r7, #20]
   13e84:	2b00      	cmp	r3, #0
   13e86:	d14d      	bne.n	13f24 <I2cReadDataWait+0xd8>

    //---2. Initiate sending data

    error = I2cWriteData(data);
   13e88:	68fb      	ldr	r3, [r7, #12]
   13e8a:	0018      	movs	r0, r3
   13e8c:	4b2e      	ldr	r3, [pc, #184]	; (13f48 <I2cReadDataWait+0xfc>)
   13e8e:	4798      	blx	r3
   13e90:	0003      	movs	r3, r0
   13e92:	617b      	str	r3, [r7, #20]
    if (ERROR_NONE != error) {
   13e94:	697b      	ldr	r3, [r7, #20]
   13e96:	2b00      	cmp	r3, #0
   13e98:	d147      	bne.n	13f2a <I2cReadDataWait+0xde>
        goto exitError0;
    }

    //---2. Wait for binary semaphore to tell us that we are done!
    if (xSemaphoreTake(semHandle, xMaxBlockTime) == pdTRUE) {
   13e9a:	693b      	ldr	r3, [r7, #16]
   13e9c:	687a      	ldr	r2, [r7, #4]
   13e9e:	0011      	movs	r1, r2
   13ea0:	0018      	movs	r0, r3
   13ea2:	4b2a      	ldr	r3, [pc, #168]	; (13f4c <I2cReadDataWait+0x100>)
   13ea4:	4798      	blx	r3
   13ea6:	0003      	movs	r3, r0
   13ea8:	2b01      	cmp	r3, #1
   13eaa:	d118      	bne.n	13ede <I2cReadDataWait+0x92>
        /* The transmission ended as expected. We now delay until the I2C sensor is finished */
        if (I2cGetTaskErrorStatus()) {
   13eac:	4b28      	ldr	r3, [pc, #160]	; (13f50 <I2cReadDataWait+0x104>)
   13eae:	4798      	blx	r3
   13eb0:	1e03      	subs	r3, r0, #0
   13eb2:	d006      	beq.n	13ec2 <I2cReadDataWait+0x76>
            I2cSetTaskErrorStatus(false);
   13eb4:	2000      	movs	r0, #0
   13eb6:	4b27      	ldr	r3, [pc, #156]	; (13f54 <I2cReadDataWait+0x108>)
   13eb8:	4798      	blx	r3
            error = ERROR_ABORTED;
   13eba:	2303      	movs	r3, #3
   13ebc:	425b      	negs	r3, r3
   13ebe:	617b      	str	r3, [r7, #20]
            goto exitError0;
   13ec0:	e034      	b.n	13f2c <I2cReadDataWait+0xe0>
        }
        vTaskDelay(delay);
   13ec2:	68bb      	ldr	r3, [r7, #8]
   13ec4:	0018      	movs	r0, r3
   13ec6:	4b24      	ldr	r3, [pc, #144]	; (13f58 <I2cReadDataWait+0x10c>)
   13ec8:	4798      	blx	r3
        error = ERR_TIMEOUT;
        goto exitError0;
    }

    //---6. Initiate Read data
    error = I2cReadData(data);
   13eca:	68fb      	ldr	r3, [r7, #12]
   13ecc:	0018      	movs	r0, r3
   13ece:	4b23      	ldr	r3, [pc, #140]	; (13f5c <I2cReadDataWait+0x110>)
   13ed0:	4798      	blx	r3
   13ed2:	0003      	movs	r3, r0
   13ed4:	617b      	str	r3, [r7, #20]
    if (ERROR_NONE != error) {
   13ed6:	697b      	ldr	r3, [r7, #20]
   13ed8:	2b00      	cmp	r3, #0
   13eda:	d004      	beq.n	13ee6 <I2cReadDataWait+0x9a>
        goto exitError0;
   13edc:	e026      	b.n	13f2c <I2cReadDataWait+0xe0>
        error = ERR_TIMEOUT;
   13ede:	2303      	movs	r3, #3
   13ee0:	425b      	negs	r3, r3
   13ee2:	617b      	str	r3, [r7, #20]
        goto exitError0;
   13ee4:	e022      	b.n	13f2c <I2cReadDataWait+0xe0>
    }
    //---7. Wait for notification
    if (xSemaphoreTake(semHandle, xMaxBlockTime) == pdTRUE) {
   13ee6:	693b      	ldr	r3, [r7, #16]
   13ee8:	687a      	ldr	r2, [r7, #4]
   13eea:	0011      	movs	r1, r2
   13eec:	0018      	movs	r0, r3
   13eee:	4b17      	ldr	r3, [pc, #92]	; (13f4c <I2cReadDataWait+0x100>)
   13ef0:	4798      	blx	r3
   13ef2:	0003      	movs	r3, r0
   13ef4:	2b01      	cmp	r3, #1
   13ef6:	d10a      	bne.n	13f0e <I2cReadDataWait+0xc2>
        /* The transmission ended as expected. We now delay until the I2C sensor is finished */
        if (I2cGetTaskErrorStatus()) {
   13ef8:	4b15      	ldr	r3, [pc, #84]	; (13f50 <I2cReadDataWait+0x104>)
   13efa:	4798      	blx	r3
   13efc:	1e03      	subs	r3, r0, #0
   13efe:	d00a      	beq.n	13f16 <I2cReadDataWait+0xca>
            I2cSetTaskErrorStatus(false);
   13f00:	2000      	movs	r0, #0
   13f02:	4b14      	ldr	r3, [pc, #80]	; (13f54 <I2cReadDataWait+0x108>)
   13f04:	4798      	blx	r3
            error = ERROR_ABORTED;
   13f06:	2303      	movs	r3, #3
   13f08:	425b      	negs	r3, r3
   13f0a:	617b      	str	r3, [r7, #20]
            goto exitError0;
   13f0c:	e00e      	b.n	13f2c <I2cReadDataWait+0xe0>
        }
    } else {
        /* The call to ulTaskNotifyTake() timed out. */
        error = ERR_TIMEOUT;
   13f0e:	2303      	movs	r3, #3
   13f10:	425b      	negs	r3, r3
   13f12:	617b      	str	r3, [r7, #20]
        goto exitError0;
   13f14:	e00a      	b.n	13f2c <I2cReadDataWait+0xe0>
    }

    //---8. Release Mutex
    error = I2cFreeMutex();
   13f16:	4b12      	ldr	r3, [pc, #72]	; (13f60 <I2cReadDataWait+0x114>)
   13f18:	4798      	blx	r3
   13f1a:	0003      	movs	r3, r0
   13f1c:	617b      	str	r3, [r7, #20]
   13f1e:	e002      	b.n	13f26 <I2cReadDataWait+0xda>
    if (ERROR_NONE != error) goto exit;
   13f20:	46c0      	nop			; (mov r8, r8)
   13f22:	e000      	b.n	13f26 <I2cReadDataWait+0xda>
    if (ERROR_NONE != error) goto exit;
   13f24:	46c0      	nop			; (mov r8, r8)
// xSemaphoreGive(semHandle);
exit:
    return error;
   13f26:	697b      	ldr	r3, [r7, #20]
   13f28:	e005      	b.n	13f36 <I2cReadDataWait+0xea>
        goto exitError0;
   13f2a:	46c0      	nop			; (mov r8, r8)

exitError0:
    error = I2cFreeMutex();
   13f2c:	4b0c      	ldr	r3, [pc, #48]	; (13f60 <I2cReadDataWait+0x114>)
   13f2e:	4798      	blx	r3
   13f30:	0003      	movs	r3, r0
   13f32:	617b      	str	r3, [r7, #20]
    // xSemaphoreGive(semHandle);
    return error;
   13f34:	697b      	ldr	r3, [r7, #20]
}
   13f36:	0018      	movs	r0, r3
   13f38:	46bd      	mov	sp, r7
   13f3a:	b006      	add	sp, #24
   13f3c:	bd80      	pop	{r7, pc}
   13f3e:	46c0      	nop			; (mov r8, r8)
   13f40:	00013ce5 	.word	0x00013ce5
   13f44:	00013d1d 	.word	0x00013d1d
   13f48:	00013bbd 	.word	0x00013bbd
   13f4c:	00019b71 	.word	0x00019b71
   13f50:	00013d41 	.word	0x00013d41
   13f54:	00013d55 	.word	0x00013d55
   13f58:	0001a8c5 	.word	0x0001a8c5
   13f5c:	00013c35 	.word	0x00013c35
   13f60:	00013cad 	.word	0x00013cad

00013f64 <lis2dh_read_reg>:
  *
  */
int32_t __weak lis2dh_read_reg(const stmdev_ctx_t *ctx, uint8_t reg,
                               uint8_t *data,
                               uint16_t len)
{
   13f64:	b5b0      	push	{r4, r5, r7, lr}
   13f66:	b086      	sub	sp, #24
   13f68:	af00      	add	r7, sp, #0
   13f6a:	60f8      	str	r0, [r7, #12]
   13f6c:	0008      	movs	r0, r1
   13f6e:	607a      	str	r2, [r7, #4]
   13f70:	0019      	movs	r1, r3
   13f72:	230b      	movs	r3, #11
   13f74:	18fb      	adds	r3, r7, r3
   13f76:	1c02      	adds	r2, r0, #0
   13f78:	701a      	strb	r2, [r3, #0]
   13f7a:	2308      	movs	r3, #8
   13f7c:	18fb      	adds	r3, r7, r3
   13f7e:	1c0a      	adds	r2, r1, #0
   13f80:	801a      	strh	r2, [r3, #0]
  int32_t ret;

  if (ctx == NULL)
   13f82:	68fb      	ldr	r3, [r7, #12]
   13f84:	2b00      	cmp	r3, #0
   13f86:	d102      	bne.n	13f8e <lis2dh_read_reg+0x2a>
  {
    return -1;
   13f88:	2301      	movs	r3, #1
   13f8a:	425b      	negs	r3, r3
   13f8c:	e00f      	b.n	13fae <lis2dh_read_reg+0x4a>
  }

  ret = ctx->read_reg(ctx->handle, reg, data, len);
   13f8e:	68fb      	ldr	r3, [r7, #12]
   13f90:	685c      	ldr	r4, [r3, #4]
   13f92:	68fb      	ldr	r3, [r7, #12]
   13f94:	68d8      	ldr	r0, [r3, #12]
   13f96:	2308      	movs	r3, #8
   13f98:	18fb      	adds	r3, r7, r3
   13f9a:	881d      	ldrh	r5, [r3, #0]
   13f9c:	687a      	ldr	r2, [r7, #4]
   13f9e:	230b      	movs	r3, #11
   13fa0:	18fb      	adds	r3, r7, r3
   13fa2:	7819      	ldrb	r1, [r3, #0]
   13fa4:	002b      	movs	r3, r5
   13fa6:	47a0      	blx	r4
   13fa8:	0003      	movs	r3, r0
   13faa:	617b      	str	r3, [r7, #20]

  return ret;
   13fac:	697b      	ldr	r3, [r7, #20]
}
   13fae:	0018      	movs	r0, r3
   13fb0:	46bd      	mov	sp, r7
   13fb2:	b006      	add	sp, #24
   13fb4:	bdb0      	pop	{r4, r5, r7, pc}
	...

00013fb8 <lis2dh_from_fs2_hr_to_mg>:
  * @{
  *
  */

float_t lis2dh_from_fs2_hr_to_mg(int16_t lsb)
{
   13fb8:	b580      	push	{r7, lr}
   13fba:	b082      	sub	sp, #8
   13fbc:	af00      	add	r7, sp, #0
   13fbe:	0002      	movs	r2, r0
   13fc0:	1dbb      	adds	r3, r7, #6
   13fc2:	801a      	strh	r2, [r3, #0]
  return ((float_t)lsb / 16.0f) * 1.0f;
   13fc4:	1dbb      	adds	r3, r7, #6
   13fc6:	2200      	movs	r2, #0
   13fc8:	5e9a      	ldrsh	r2, [r3, r2]
   13fca:	4b07      	ldr	r3, [pc, #28]	; (13fe8 <lis2dh_from_fs2_hr_to_mg+0x30>)
   13fcc:	0010      	movs	r0, r2
   13fce:	4798      	blx	r3
   13fd0:	1c02      	adds	r2, r0, #0
   13fd2:	4b06      	ldr	r3, [pc, #24]	; (13fec <lis2dh_from_fs2_hr_to_mg+0x34>)
   13fd4:	2183      	movs	r1, #131	; 0x83
   13fd6:	05c9      	lsls	r1, r1, #23
   13fd8:	1c10      	adds	r0, r2, #0
   13fda:	4798      	blx	r3
   13fdc:	1c03      	adds	r3, r0, #0
}
   13fde:	1c18      	adds	r0, r3, #0
   13fe0:	46bd      	mov	sp, r7
   13fe2:	b002      	add	sp, #8
   13fe4:	bd80      	pop	{r7, pc}
   13fe6:	46c0      	nop			; (mov r8, r8)
   13fe8:	000316fd 	.word	0x000316fd
   13fec:	0003142d 	.word	0x0003142d

00013ff0 <lis2dh_xl_data_ready_get>:
  * @param  val      change the values of zyxda in reg STATUS_REG
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dh_xl_data_ready_get(const stmdev_ctx_t *ctx, uint8_t *val)
{
   13ff0:	b590      	push	{r4, r7, lr}
   13ff2:	b085      	sub	sp, #20
   13ff4:	af00      	add	r7, sp, #0
   13ff6:	6078      	str	r0, [r7, #4]
   13ff8:	6039      	str	r1, [r7, #0]
  lis2dh_status_reg_t status_reg;
  int32_t ret;

  ret = lis2dh_read_reg(ctx, LIS2DH_STATUS_REG,
   13ffa:	2308      	movs	r3, #8
   13ffc:	18fa      	adds	r2, r7, r3
   13ffe:	6878      	ldr	r0, [r7, #4]
   14000:	2301      	movs	r3, #1
   14002:	2127      	movs	r1, #39	; 0x27
   14004:	4c08      	ldr	r4, [pc, #32]	; (14028 <lis2dh_xl_data_ready_get+0x38>)
   14006:	47a0      	blx	r4
   14008:	0003      	movs	r3, r0
   1400a:	60fb      	str	r3, [r7, #12]
                        (uint8_t *)&status_reg, 1);
  *val = status_reg.zyxda;
   1400c:	2308      	movs	r3, #8
   1400e:	18fb      	adds	r3, r7, r3
   14010:	781b      	ldrb	r3, [r3, #0]
   14012:	071b      	lsls	r3, r3, #28
   14014:	0fdb      	lsrs	r3, r3, #31
   14016:	b2db      	uxtb	r3, r3
   14018:	001a      	movs	r2, r3
   1401a:	683b      	ldr	r3, [r7, #0]
   1401c:	701a      	strb	r2, [r3, #0]

  return ret;
   1401e:	68fb      	ldr	r3, [r7, #12]
}
   14020:	0018      	movs	r0, r3
   14022:	46bd      	mov	sp, r7
   14024:	b005      	add	sp, #20
   14026:	bd90      	pop	{r4, r7, pc}
   14028:	00013f65 	.word	0x00013f65

0001402c <lis2dh_acceleration_raw_get>:
  * @param  buff     buffer that stores data read
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dh_acceleration_raw_get(const stmdev_ctx_t *ctx, int16_t *val)
{
   1402c:	b590      	push	{r4, r7, lr}
   1402e:	b087      	sub	sp, #28
   14030:	af00      	add	r7, sp, #0
   14032:	6078      	str	r0, [r7, #4]
   14034:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  int32_t ret;

  ret = lis2dh_read_reg(ctx, LIS2DH_OUT_X_L, buff, 6);
   14036:	230c      	movs	r3, #12
   14038:	18fa      	adds	r2, r7, r3
   1403a:	6878      	ldr	r0, [r7, #4]
   1403c:	2306      	movs	r3, #6
   1403e:	2128      	movs	r1, #40	; 0x28
   14040:	4c26      	ldr	r4, [pc, #152]	; (140dc <lis2dh_acceleration_raw_get+0xb0>)
   14042:	47a0      	blx	r4
   14044:	0003      	movs	r3, r0
   14046:	617b      	str	r3, [r7, #20]
  val[0] = (int16_t)buff[1];
   14048:	230c      	movs	r3, #12
   1404a:	18fb      	adds	r3, r7, r3
   1404c:	785b      	ldrb	r3, [r3, #1]
   1404e:	b21a      	sxth	r2, r3
   14050:	683b      	ldr	r3, [r7, #0]
   14052:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
   14054:	683b      	ldr	r3, [r7, #0]
   14056:	2200      	movs	r2, #0
   14058:	5e9b      	ldrsh	r3, [r3, r2]
   1405a:	b29b      	uxth	r3, r3
   1405c:	021b      	lsls	r3, r3, #8
   1405e:	b29a      	uxth	r2, r3
   14060:	230c      	movs	r3, #12
   14062:	18fb      	adds	r3, r7, r3
   14064:	781b      	ldrb	r3, [r3, #0]
   14066:	b29b      	uxth	r3, r3
   14068:	18d3      	adds	r3, r2, r3
   1406a:	b29b      	uxth	r3, r3
   1406c:	b21a      	sxth	r2, r3
   1406e:	683b      	ldr	r3, [r7, #0]
   14070:	801a      	strh	r2, [r3, #0]
  val[1] = (int16_t)buff[3];
   14072:	683b      	ldr	r3, [r7, #0]
   14074:	3302      	adds	r3, #2
   14076:	220c      	movs	r2, #12
   14078:	18ba      	adds	r2, r7, r2
   1407a:	78d2      	ldrb	r2, [r2, #3]
   1407c:	b212      	sxth	r2, r2
   1407e:	801a      	strh	r2, [r3, #0]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
   14080:	683b      	ldr	r3, [r7, #0]
   14082:	3302      	adds	r3, #2
   14084:	683a      	ldr	r2, [r7, #0]
   14086:	3202      	adds	r2, #2
   14088:	2100      	movs	r1, #0
   1408a:	5e52      	ldrsh	r2, [r2, r1]
   1408c:	b292      	uxth	r2, r2
   1408e:	0212      	lsls	r2, r2, #8
   14090:	b291      	uxth	r1, r2
   14092:	220c      	movs	r2, #12
   14094:	18ba      	adds	r2, r7, r2
   14096:	7892      	ldrb	r2, [r2, #2]
   14098:	b292      	uxth	r2, r2
   1409a:	188a      	adds	r2, r1, r2
   1409c:	b292      	uxth	r2, r2
   1409e:	b212      	sxth	r2, r2
   140a0:	801a      	strh	r2, [r3, #0]
  val[2] = (int16_t)buff[5];
   140a2:	683b      	ldr	r3, [r7, #0]
   140a4:	3304      	adds	r3, #4
   140a6:	220c      	movs	r2, #12
   140a8:	18ba      	adds	r2, r7, r2
   140aa:	7952      	ldrb	r2, [r2, #5]
   140ac:	b212      	sxth	r2, r2
   140ae:	801a      	strh	r2, [r3, #0]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
   140b0:	683b      	ldr	r3, [r7, #0]
   140b2:	3304      	adds	r3, #4
   140b4:	683a      	ldr	r2, [r7, #0]
   140b6:	3204      	adds	r2, #4
   140b8:	2100      	movs	r1, #0
   140ba:	5e52      	ldrsh	r2, [r2, r1]
   140bc:	b292      	uxth	r2, r2
   140be:	0212      	lsls	r2, r2, #8
   140c0:	b291      	uxth	r1, r2
   140c2:	220c      	movs	r2, #12
   140c4:	18ba      	adds	r2, r7, r2
   140c6:	7912      	ldrb	r2, [r2, #4]
   140c8:	b292      	uxth	r2, r2
   140ca:	188a      	adds	r2, r1, r2
   140cc:	b292      	uxth	r2, r2
   140ce:	b212      	sxth	r2, r2
   140d0:	801a      	strh	r2, [r3, #0]

  return ret;
   140d2:	697b      	ldr	r3, [r7, #20]
}
   140d4:	0018      	movs	r0, r3
   140d6:	46bd      	mov	sp, r7
   140d8:	b007      	add	sp, #28
   140da:	bd90      	pop	{r4, r7, pc}
   140dc:	00013f65 	.word	0x00013f65

000140e0 <platform_write>:
 * @param[in]   len Length of the data sent
 * @return      Returns what the function "I2cWriteDataWait" returns
 * @note        STUDENTS TO FILL  
*****************************************************************************/
static int32_t platform_write(void *handle, uint8_t reg, uint8_t *bufp, uint16_t len)
{
   140e0:	b580      	push	{r7, lr}
   140e2:	b086      	sub	sp, #24
   140e4:	af00      	add	r7, sp, #0
   140e6:	60f8      	str	r0, [r7, #12]
   140e8:	0008      	movs	r0, r1
   140ea:	607a      	str	r2, [r7, #4]
   140ec:	0019      	movs	r1, r3
   140ee:	230b      	movs	r3, #11
   140f0:	18fb      	adds	r3, r7, r3
   140f2:	1c02      	adds	r2, r0, #0
   140f4:	701a      	strb	r2, [r3, #0]
   140f6:	2308      	movs	r3, #8
   140f8:	18fb      	adds	r3, r7, r3
   140fa:	1c0a      	adds	r2, r1, #0
   140fc:	801a      	strh	r2, [r3, #0]
	//YOUR JOB: Fill out the structure "imuData" to send to the device
	//TIP: Use the array "msgOutImu" to copy the data to be sent. Remember that the position [0] of the array you send must be the register, and
	//starting from position [1] you can copy the data to be sent. Remember to adjust the length accordingly
  // First position reg
  msgOutImu[0] = reg;
   140fe:	4b22      	ldr	r3, [pc, #136]	; (14188 <platform_write+0xa8>)
   14100:	220b      	movs	r2, #11
   14102:	18ba      	adds	r2, r7, r2
   14104:	7812      	ldrb	r2, [r2, #0]
   14106:	701a      	strb	r2, [r3, #0]
	for(uint16_t i=0; i < len; i++){
   14108:	2316      	movs	r3, #22
   1410a:	18fb      	adds	r3, r7, r3
   1410c:	2200      	movs	r2, #0
   1410e:	801a      	strh	r2, [r3, #0]
   14110:	e012      	b.n	14138 <platform_write+0x58>
		msgOutImu[i+1] = bufp[i];
   14112:	2316      	movs	r3, #22
   14114:	18fb      	adds	r3, r7, r3
   14116:	881b      	ldrh	r3, [r3, #0]
   14118:	3301      	adds	r3, #1
   1411a:	2216      	movs	r2, #22
   1411c:	18ba      	adds	r2, r7, r2
   1411e:	8812      	ldrh	r2, [r2, #0]
   14120:	6879      	ldr	r1, [r7, #4]
   14122:	188a      	adds	r2, r1, r2
   14124:	7811      	ldrb	r1, [r2, #0]
   14126:	4a18      	ldr	r2, [pc, #96]	; (14188 <platform_write+0xa8>)
   14128:	54d1      	strb	r1, [r2, r3]
	for(uint16_t i=0; i < len; i++){
   1412a:	2316      	movs	r3, #22
   1412c:	18fb      	adds	r3, r7, r3
   1412e:	881a      	ldrh	r2, [r3, #0]
   14130:	2316      	movs	r3, #22
   14132:	18fb      	adds	r3, r7, r3
   14134:	3201      	adds	r2, #1
   14136:	801a      	strh	r2, [r3, #0]
   14138:	2316      	movs	r3, #22
   1413a:	18fa      	adds	r2, r7, r3
   1413c:	2308      	movs	r3, #8
   1413e:	18fb      	adds	r3, r7, r3
   14140:	8812      	ldrh	r2, [r2, #0]
   14142:	881b      	ldrh	r3, [r3, #0]
   14144:	429a      	cmp	r2, r3
   14146:	d3e4      	bcc.n	14112 <platform_write+0x32>
	}
	imuData.address = 0x19;
   14148:	4b10      	ldr	r3, [pc, #64]	; (1418c <platform_write+0xac>)
   1414a:	2219      	movs	r2, #25
   1414c:	701a      	strb	r2, [r3, #0]
	imuData.msgOut = &msgOutImu;
   1414e:	4b0f      	ldr	r3, [pc, #60]	; (1418c <platform_write+0xac>)
   14150:	4a0d      	ldr	r2, [pc, #52]	; (14188 <platform_write+0xa8>)
   14152:	605a      	str	r2, [r3, #4]
	imuData.lenOut = len + 1;
   14154:	2308      	movs	r3, #8
   14156:	18fb      	adds	r3, r7, r3
   14158:	881b      	ldrh	r3, [r3, #0]
   1415a:	3301      	adds	r3, #1
   1415c:	b29a      	uxth	r2, r3
   1415e:	4b0b      	ldr	r3, [pc, #44]	; (1418c <platform_write+0xac>)
   14160:	81da      	strh	r2, [r3, #14]
	imuData.lenIn = len;
   14162:	4b0a      	ldr	r3, [pc, #40]	; (1418c <platform_write+0xac>)
   14164:	2208      	movs	r2, #8
   14166:	18ba      	adds	r2, r7, r2
   14168:	8812      	ldrh	r2, [r2, #0]
   1416a:	819a      	strh	r2, [r3, #12]
	imuData.msgIn = bufp;
   1416c:	4b07      	ldr	r3, [pc, #28]	; (1418c <platform_write+0xac>)
   1416e:	687a      	ldr	r2, [r7, #4]
   14170:	609a      	str	r2, [r3, #8]
  return I2cWriteDataWait(&imuData, 100);
   14172:	4b06      	ldr	r3, [pc, #24]	; (1418c <platform_write+0xac>)
   14174:	2164      	movs	r1, #100	; 0x64
   14176:	0018      	movs	r0, r3
   14178:	4b05      	ldr	r3, [pc, #20]	; (14190 <platform_write+0xb0>)
   1417a:	4798      	blx	r3
   1417c:	0003      	movs	r3, r0
}
   1417e:	0018      	movs	r0, r3
   14180:	46bd      	mov	sp, r7
   14182:	b006      	add	sp, #24
   14184:	bd80      	pop	{r7, pc}
   14186:	46c0      	nop			; (mov r8, r8)
   14188:	200042b0 	.word	0x200042b0
   1418c:	200042f0 	.word	0x200042f0
   14190:	00013d75 	.word	0x00013d75

00014194 <platform_read>:
 * @param[in]   len Length of the data to be read
 * @return      Returns what the function "I2cReadDataWait" returns
 * @note        STUDENTS TO FILL  
*****************************************************************************/
static  int32_t platform_read(void *handle, uint8_t reg, uint8_t *bufp, uint16_t len)
{
   14194:	b580      	push	{r7, lr}
   14196:	b084      	sub	sp, #16
   14198:	af00      	add	r7, sp, #0
   1419a:	60f8      	str	r0, [r7, #12]
   1419c:	0008      	movs	r0, r1
   1419e:	607a      	str	r2, [r7, #4]
   141a0:	0019      	movs	r1, r3
   141a2:	230b      	movs	r3, #11
   141a4:	18fb      	adds	r3, r7, r3
   141a6:	1c02      	adds	r2, r0, #0
   141a8:	701a      	strb	r2, [r3, #0]
   141aa:	2308      	movs	r3, #8
   141ac:	18fb      	adds	r3, r7, r3
   141ae:	1c0a      	adds	r2, r1, #0
   141b0:	801a      	strh	r2, [r3, #0]
	//YOUR JOB: Fill out the structure "imuData" to send to the device
	//TIP: Check the structure "imuData" and notice that it has a msgOut and msgIn parameter. How do we fill this to our advantage?
	msgOutImu[0] = reg;
   141b2:	4b10      	ldr	r3, [pc, #64]	; (141f4 <platform_read+0x60>)
   141b4:	220b      	movs	r2, #11
   141b6:	18ba      	adds	r2, r7, r2
   141b8:	7812      	ldrb	r2, [r2, #0]
   141ba:	701a      	strb	r2, [r3, #0]
	imuData.address = 0x19;
   141bc:	4b0e      	ldr	r3, [pc, #56]	; (141f8 <platform_read+0x64>)
   141be:	2219      	movs	r2, #25
   141c0:	701a      	strb	r2, [r3, #0]
	imuData.msgIn = bufp;
   141c2:	4b0d      	ldr	r3, [pc, #52]	; (141f8 <platform_read+0x64>)
   141c4:	687a      	ldr	r2, [r7, #4]
   141c6:	609a      	str	r2, [r3, #8]
	imuData.lenIn = len;
   141c8:	4b0b      	ldr	r3, [pc, #44]	; (141f8 <platform_read+0x64>)
   141ca:	2208      	movs	r2, #8
   141cc:	18ba      	adds	r2, r7, r2
   141ce:	8812      	ldrh	r2, [r2, #0]
   141d0:	819a      	strh	r2, [r3, #12]
	imuData.lenOut = 1;
   141d2:	4b09      	ldr	r3, [pc, #36]	; (141f8 <platform_read+0x64>)
   141d4:	2201      	movs	r2, #1
   141d6:	81da      	strh	r2, [r3, #14]
	imuData.msgOut = &msgOutImu;
   141d8:	4b07      	ldr	r3, [pc, #28]	; (141f8 <platform_read+0x64>)
   141da:	4a06      	ldr	r2, [pc, #24]	; (141f4 <platform_read+0x60>)
   141dc:	605a      	str	r2, [r3, #4]
	
	return I2cReadDataWait(&imuData, 100, 100);
   141de:	4b06      	ldr	r3, [pc, #24]	; (141f8 <platform_read+0x64>)
   141e0:	2264      	movs	r2, #100	; 0x64
   141e2:	2164      	movs	r1, #100	; 0x64
   141e4:	0018      	movs	r0, r3
   141e6:	4b05      	ldr	r3, [pc, #20]	; (141fc <platform_read+0x68>)
   141e8:	4798      	blx	r3
   141ea:	0003      	movs	r3, r0
}
   141ec:	0018      	movs	r0, r3
   141ee:	46bd      	mov	sp, r7
   141f0:	b004      	add	sp, #16
   141f2:	bd80      	pop	{r7, pc}
   141f4:	200042b0 	.word	0x200042b0
   141f8:	200042f0 	.word	0x200042f0
   141fc:	00013e4d 	.word	0x00013e4d

00014200 <platform_delay>:

static void platform_delay(uint32_t ms){
   14200:	b580      	push	{r7, lr}
   14202:	b082      	sub	sp, #8
   14204:	af00      	add	r7, sp, #0
   14206:	6078      	str	r0, [r7, #4]
  delay_ms(ms);
   14208:	687b      	ldr	r3, [r7, #4]
   1420a:	2b00      	cmp	r3, #0
   1420c:	d004      	beq.n	14218 <platform_delay+0x18>
   1420e:	687b      	ldr	r3, [r7, #4]
   14210:	0018      	movs	r0, r3
   14212:	4b05      	ldr	r3, [pc, #20]	; (14228 <platform_delay+0x28>)
   14214:	4798      	blx	r3
}
   14216:	e002      	b.n	1421e <platform_delay+0x1e>
  delay_ms(ms);
   14218:	2001      	movs	r0, #1
   1421a:	4b04      	ldr	r3, [pc, #16]	; (1422c <platform_delay+0x2c>)
   1421c:	4798      	blx	r3
}
   1421e:	46c0      	nop			; (mov r8, r8)
   14220:	46bd      	mov	sp, r7
   14222:	b002      	add	sp, #8
   14224:	bd80      	pop	{r7, pc}
   14226:	46c0      	nop			; (mov r8, r8)
   14228:	0001e901 	.word	0x0001e901
   1422c:	0001e8d1 	.word	0x0001e8d1

00014230 <GetImuStruct>:


stmdev_ctx_t * GetImuStruct(void)
{
   14230:	b580      	push	{r7, lr}
   14232:	af00      	add	r7, sp, #0
return &dev_ctx;
   14234:	4b01      	ldr	r3, [pc, #4]	; (1423c <GetImuStruct+0xc>)
}
   14236:	0018      	movs	r0, r3
   14238:	46bd      	mov	sp, r7
   1423a:	bd80      	pop	{r7, pc}
   1423c:	20000020 	.word	0x20000020

00014240 <setLEDColor_all>:
 * @param red 
 * @param green 
 * @param blue 
 * @return uint32_t 
 */
uint32_t setLEDColor_all(LEDdev_ctx_t *ctx, uint8_t red, uint8_t green, uint8_t blue) {
   14240:	b590      	push	{r4, r7, lr}
   14242:	b085      	sub	sp, #20
   14244:	af00      	add	r7, sp, #0
   14246:	6078      	str	r0, [r7, #4]
   14248:	000c      	movs	r4, r1
   1424a:	0010      	movs	r0, r2
   1424c:	0019      	movs	r1, r3
   1424e:	1cfb      	adds	r3, r7, #3
   14250:	1c22      	adds	r2, r4, #0
   14252:	701a      	strb	r2, [r3, #0]
   14254:	1cbb      	adds	r3, r7, #2
   14256:	1c02      	adds	r2, r0, #0
   14258:	701a      	strb	r2, [r3, #0]
   1425a:	1c7b      	adds	r3, r7, #1
   1425c:	1c0a      	adds	r2, r1, #0
   1425e:	701a      	strb	r2, [r3, #0]
  // First, boundary check
  uint8_t reg[3];
  uint32_t error = ERROR_NONE;
   14260:	2300      	movs	r3, #0
   14262:	60fb      	str	r3, [r7, #12]
    green = 0;
  if (blue > 255)
    blue = 255;
  if (blue < 0)
    blue = 0;
  reg[0] = red;
   14264:	2308      	movs	r3, #8
   14266:	18fb      	adds	r3, r7, r3
   14268:	1cfa      	adds	r2, r7, #3
   1426a:	7812      	ldrb	r2, [r2, #0]
   1426c:	701a      	strb	r2, [r3, #0]
  reg[1] = green;
   1426e:	2308      	movs	r3, #8
   14270:	18fb      	adds	r3, r7, r3
   14272:	1cba      	adds	r2, r7, #2
   14274:	7812      	ldrb	r2, [r2, #0]
   14276:	705a      	strb	r2, [r3, #1]
  reg[2] = blue;
   14278:	2308      	movs	r3, #8
   1427a:	18fb      	adds	r3, r7, r3
   1427c:	1c7a      	adds	r2, r7, #1
   1427e:	7812      	ldrb	r2, [r2, #0]
   14280:	709a      	strb	r2, [r3, #2]
  error = apa102c_write_reg(ctx, COMMAND_WRITE_ALL_LED_COLOR, &reg, 3);
   14282:	2308      	movs	r3, #8
   14284:	18fa      	adds	r2, r7, r3
   14286:	6878      	ldr	r0, [r7, #4]
   14288:	2303      	movs	r3, #3
   1428a:	2172      	movs	r1, #114	; 0x72
   1428c:	4c04      	ldr	r4, [pc, #16]	; (142a0 <setLEDColor_all+0x60>)
   1428e:	47a0      	blx	r4
   14290:	0003      	movs	r3, r0
   14292:	60fb      	str	r3, [r7, #12]
//   if (_i2cPort->endTransmission() != 0)
//   {
//     //Sensor did not ACK
//     return (false);
//   }
  return error;
   14294:	68fb      	ldr	r3, [r7, #12]
}
   14296:	0018      	movs	r0, r3
   14298:	46bd      	mov	sp, r7
   1429a:	b005      	add	sp, #20
   1429c:	bd90      	pop	{r4, r7, pc}
   1429e:	46c0      	nop			; (mov r8, r8)
   142a0:	00014325 	.word	0x00014325

000142a4 <setLEDBrightness_all>:
 * To turn all LEDs off but remember their previous color, set brightness to 0
 * @param[in] ctx I2C handle
 * @param[in] brightness Brightness values between 0 to 31
 * @return uint32_t If no error returns ERROR_NONE
 */
uint32_t setLEDBrightness_all(LEDdev_ctx_t *ctx, uint8_t brightness) {
   142a4:	b590      	push	{r4, r7, lr}
   142a6:	b085      	sub	sp, #20
   142a8:	af00      	add	r7, sp, #0
   142aa:	6078      	str	r0, [r7, #4]
   142ac:	000a      	movs	r2, r1
   142ae:	1cfb      	adds	r3, r7, #3
   142b0:	701a      	strb	r2, [r3, #0]
  uint8_t reg = brightness;
   142b2:	230b      	movs	r3, #11
   142b4:	18fb      	adds	r3, r7, r3
   142b6:	1cfa      	adds	r2, r7, #3
   142b8:	7812      	ldrb	r2, [r2, #0]
   142ba:	701a      	strb	r2, [r3, #0]
  uint32_t error = ERROR_NONE;
   142bc:	2300      	movs	r3, #0
   142be:	60fb      	str	r3, [r7, #12]
  // First, boundary check
  if (brightness > 31)
   142c0:	1cfb      	adds	r3, r7, #3
   142c2:	781b      	ldrb	r3, [r3, #0]
   142c4:	2b1f      	cmp	r3, #31
   142c6:	d902      	bls.n	142ce <setLEDBrightness_all+0x2a>
    brightness = 31;
   142c8:	1cfb      	adds	r3, r7, #3
   142ca:	221f      	movs	r2, #31
   142cc:	701a      	strb	r2, [r3, #0]
  if (brightness < 0)
    brightness = 0;

  error = apa102c_write_reg(ctx, COMMAND_WRITE_ALL_LED_BRIGHTNESS, &reg, 1);
   142ce:	230b      	movs	r3, #11
   142d0:	18fa      	adds	r2, r7, r3
   142d2:	6878      	ldr	r0, [r7, #4]
   142d4:	2301      	movs	r3, #1
   142d6:	2177      	movs	r1, #119	; 0x77
   142d8:	4c04      	ldr	r4, [pc, #16]	; (142ec <setLEDBrightness_all+0x48>)
   142da:	47a0      	blx	r4
   142dc:	0003      	movs	r3, r0
   142de:	60fb      	str	r3, [r7, #12]
  return error;
   142e0:	68fb      	ldr	r3, [r7, #12]
//   {
//     //Sensor did not ACK
//     return (false);
//   }
//   return (true);
}
   142e2:	0018      	movs	r0, r3
   142e4:	46bd      	mov	sp, r7
   142e6:	b005      	add	sp, #20
   142e8:	bd90      	pop	{r4, r7, pc}
   142ea:	46c0      	nop			; (mov r8, r8)
   142ec:	00014325 	.word	0x00014325

000142f0 <LEDOff>:
/**
 * @brief Turn all LEDS off by setting color to 0
 * 
 * @return uint32_t If no error returns ERROR_NONE
 */
uint32_t LEDOff(LEDdev_ctx_t *ctx) {
   142f0:	b590      	push	{r4, r7, lr}
   142f2:	b085      	sub	sp, #20
   142f4:	af00      	add	r7, sp, #0
   142f6:	6078      	str	r0, [r7, #4]
    uint8_t reg = 0;
   142f8:	230b      	movs	r3, #11
   142fa:	18fb      	adds	r3, r7, r3
   142fc:	2200      	movs	r2, #0
   142fe:	701a      	strb	r2, [r3, #0]
    uint32_t error = ERROR_NONE;
   14300:	2300      	movs	r3, #0
   14302:	60fb      	str	r3, [r7, #12]
    error = apa102c_write_reg(ctx, COMMAND_WRITE_ALL_LED_OFF, &reg, 0);
   14304:	230b      	movs	r3, #11
   14306:	18fa      	adds	r2, r7, r3
   14308:	6878      	ldr	r0, [r7, #4]
   1430a:	2300      	movs	r3, #0
   1430c:	2178      	movs	r1, #120	; 0x78
   1430e:	4c04      	ldr	r4, [pc, #16]	; (14320 <LEDOff+0x30>)
   14310:	47a0      	blx	r4
   14312:	0003      	movs	r3, r0
   14314:	60fb      	str	r3, [r7, #12]
    return error;
   14316:	68fb      	ldr	r3, [r7, #12]
//   {
//     //Sensor did not ACK
//     return (false);
//   }
//   return (true);
}
   14318:	0018      	movs	r0, r3
   1431a:	46bd      	mov	sp, r7
   1431c:	b005      	add	sp, #20
   1431e:	bd90      	pop	{r4, r7, pc}
   14320:	00014325 	.word	0x00014325

00014324 <apa102c_write_reg>:
  *
  */
static int32_t apa102c_write_reg(LEDdev_ctx_t *ctx, uint8_t reg,
                          uint8_t *data,
                          uint16_t len)
{
   14324:	b5b0      	push	{r4, r5, r7, lr}
   14326:	b086      	sub	sp, #24
   14328:	af00      	add	r7, sp, #0
   1432a:	60f8      	str	r0, [r7, #12]
   1432c:	0008      	movs	r0, r1
   1432e:	607a      	str	r2, [r7, #4]
   14330:	0019      	movs	r1, r3
   14332:	230b      	movs	r3, #11
   14334:	18fb      	adds	r3, r7, r3
   14336:	1c02      	adds	r2, r0, #0
   14338:	701a      	strb	r2, [r3, #0]
   1433a:	2308      	movs	r3, #8
   1433c:	18fb      	adds	r3, r7, r3
   1433e:	1c0a      	adds	r2, r1, #0
   14340:	801a      	strh	r2, [r3, #0]
    int32_t ret;

    ret = ctx->write_reg(ctx->handle, reg, data, len);
   14342:	68fb      	ldr	r3, [r7, #12]
   14344:	681c      	ldr	r4, [r3, #0]
   14346:	68fb      	ldr	r3, [r7, #12]
   14348:	6898      	ldr	r0, [r3, #8]
   1434a:	2308      	movs	r3, #8
   1434c:	18fb      	adds	r3, r7, r3
   1434e:	881d      	ldrh	r5, [r3, #0]
   14350:	687a      	ldr	r2, [r7, #4]
   14352:	230b      	movs	r3, #11
   14354:	18fb      	adds	r3, r7, r3
   14356:	7819      	ldrb	r1, [r3, #0]
   14358:	002b      	movs	r3, r5
   1435a:	47a0      	blx	r4
   1435c:	0003      	movs	r3, r0
   1435e:	617b      	str	r3, [r7, #20]

    return ret; 
   14360:	697b      	ldr	r3, [r7, #20]
}
   14362:	0018      	movs	r0, r3
   14364:	46bd      	mov	sp, r7
   14366:	b006      	add	sp, #24
   14368:	bdb0      	pop	{r4, r5, r7, pc}
	...

0001436c <platform_write>:
 * @param[in]   len Length of the data sent
 * @return      Returns what the function "I2cWriteDataWait" returns
 * @note        STUDENTS TO FILL  
*****************************************************************************/
static int32_t platform_write(void *handle, uint8_t reg, uint8_t *bufp, uint16_t len)
{
   1436c:	b580      	push	{r7, lr}
   1436e:	b086      	sub	sp, #24
   14370:	af00      	add	r7, sp, #0
   14372:	60f8      	str	r0, [r7, #12]
   14374:	0008      	movs	r0, r1
   14376:	607a      	str	r2, [r7, #4]
   14378:	0019      	movs	r1, r3
   1437a:	230b      	movs	r3, #11
   1437c:	18fb      	adds	r3, r7, r3
   1437e:	1c02      	adds	r2, r0, #0
   14380:	701a      	strb	r2, [r3, #0]
   14382:	2308      	movs	r3, #8
   14384:	18fb      	adds	r3, r7, r3
   14386:	1c0a      	adds	r2, r1, #0
   14388:	801a      	strh	r2, [r3, #0]
  msgOutLED[0] = reg;
   1438a:	4b22      	ldr	r3, [pc, #136]	; (14414 <platform_write+0xa8>)
   1438c:	220b      	movs	r2, #11
   1438e:	18ba      	adds	r2, r7, r2
   14390:	7812      	ldrb	r2, [r2, #0]
   14392:	701a      	strb	r2, [r3, #0]
	for(uint16_t i=0; i < len; i++){
   14394:	2316      	movs	r3, #22
   14396:	18fb      	adds	r3, r7, r3
   14398:	2200      	movs	r2, #0
   1439a:	801a      	strh	r2, [r3, #0]
   1439c:	e012      	b.n	143c4 <platform_write+0x58>
		msgOutLED[i+1] = bufp[i];
   1439e:	2316      	movs	r3, #22
   143a0:	18fb      	adds	r3, r7, r3
   143a2:	881b      	ldrh	r3, [r3, #0]
   143a4:	3301      	adds	r3, #1
   143a6:	2216      	movs	r2, #22
   143a8:	18ba      	adds	r2, r7, r2
   143aa:	8812      	ldrh	r2, [r2, #0]
   143ac:	6879      	ldr	r1, [r7, #4]
   143ae:	188a      	adds	r2, r1, r2
   143b0:	7811      	ldrb	r1, [r2, #0]
   143b2:	4a18      	ldr	r2, [pc, #96]	; (14414 <platform_write+0xa8>)
   143b4:	54d1      	strb	r1, [r2, r3]
	for(uint16_t i=0; i < len; i++){
   143b6:	2316      	movs	r3, #22
   143b8:	18fb      	adds	r3, r7, r3
   143ba:	881a      	ldrh	r2, [r3, #0]
   143bc:	2316      	movs	r3, #22
   143be:	18fb      	adds	r3, r7, r3
   143c0:	3201      	adds	r2, #1
   143c2:	801a      	strh	r2, [r3, #0]
   143c4:	2316      	movs	r3, #22
   143c6:	18fa      	adds	r2, r7, r3
   143c8:	2308      	movs	r3, #8
   143ca:	18fb      	adds	r3, r7, r3
   143cc:	8812      	ldrh	r2, [r2, #0]
   143ce:	881b      	ldrh	r3, [r3, #0]
   143d0:	429a      	cmp	r2, r3
   143d2:	d3e4      	bcc.n	1439e <platform_write+0x32>
	}
	LEDData.address = _LEDAddress;
   143d4:	4b10      	ldr	r3, [pc, #64]	; (14418 <platform_write+0xac>)
   143d6:	781a      	ldrb	r2, [r3, #0]
   143d8:	4b10      	ldr	r3, [pc, #64]	; (1441c <platform_write+0xb0>)
   143da:	701a      	strb	r2, [r3, #0]
	LEDData.msgOut = &msgOutLED;
   143dc:	4b0f      	ldr	r3, [pc, #60]	; (1441c <platform_write+0xb0>)
   143de:	4a0d      	ldr	r2, [pc, #52]	; (14414 <platform_write+0xa8>)
   143e0:	605a      	str	r2, [r3, #4]
	LEDData.lenOut = len + 1;
   143e2:	2308      	movs	r3, #8
   143e4:	18fb      	adds	r3, r7, r3
   143e6:	881b      	ldrh	r3, [r3, #0]
   143e8:	3301      	adds	r3, #1
   143ea:	b29a      	uxth	r2, r3
   143ec:	4b0b      	ldr	r3, [pc, #44]	; (1441c <platform_write+0xb0>)
   143ee:	81da      	strh	r2, [r3, #14]
	LEDData.lenIn = len;
   143f0:	4b0a      	ldr	r3, [pc, #40]	; (1441c <platform_write+0xb0>)
   143f2:	2208      	movs	r2, #8
   143f4:	18ba      	adds	r2, r7, r2
   143f6:	8812      	ldrh	r2, [r2, #0]
   143f8:	819a      	strh	r2, [r3, #12]
	LEDData.msgIn = bufp;
   143fa:	4b08      	ldr	r3, [pc, #32]	; (1441c <platform_write+0xb0>)
   143fc:	687a      	ldr	r2, [r7, #4]
   143fe:	609a      	str	r2, [r3, #8]
  return I2cWriteDataWait(&LEDData, 100);
   14400:	4b06      	ldr	r3, [pc, #24]	; (1441c <platform_write+0xb0>)
   14402:	2164      	movs	r1, #100	; 0x64
   14404:	0018      	movs	r0, r3
   14406:	4b06      	ldr	r3, [pc, #24]	; (14420 <platform_write+0xb4>)
   14408:	4798      	blx	r3
   1440a:	0003      	movs	r3, r0
}
   1440c:	0018      	movs	r0, r3
   1440e:	46bd      	mov	sp, r7
   14410:	b006      	add	sp, #24
   14412:	bd80      	pop	{r7, pc}
   14414:	20004310 	.word	0x20004310
   14418:	20000030 	.word	0x20000030
   1441c:	20004300 	.word	0x20004300
   14420:	00013d75 	.word	0x00013d75

00014424 <platform_read>:
 * @param[out]   bufp Pointer to the data to write to (write what was read)
 * @param[in]   len Length of the data to be read
 * @return      Returns If no error returns ERROR_NONE
*****************************************************************************/
static  int32_t platform_read(void *handle, uint8_t reg, uint8_t *bufp, uint16_t len)
{
   14424:	b580      	push	{r7, lr}
   14426:	b084      	sub	sp, #16
   14428:	af00      	add	r7, sp, #0
   1442a:	60f8      	str	r0, [r7, #12]
   1442c:	0008      	movs	r0, r1
   1442e:	607a      	str	r2, [r7, #4]
   14430:	0019      	movs	r1, r3
   14432:	230b      	movs	r3, #11
   14434:	18fb      	adds	r3, r7, r3
   14436:	1c02      	adds	r2, r0, #0
   14438:	701a      	strb	r2, [r3, #0]
   1443a:	2308      	movs	r3, #8
   1443c:	18fb      	adds	r3, r7, r3
   1443e:	1c0a      	adds	r2, r1, #0
   14440:	801a      	strh	r2, [r3, #0]
	//YOUR JOB: Fill out the structure "LEDData" to send to the device
	//TIP: Check the structure "LEDData" and notice that it has a msgOut and msgIn parameter. How do we fill this to our advantage?
	msgOutLED[0] = reg;
   14442:	4b11      	ldr	r3, [pc, #68]	; (14488 <platform_read+0x64>)
   14444:	220b      	movs	r2, #11
   14446:	18ba      	adds	r2, r7, r2
   14448:	7812      	ldrb	r2, [r2, #0]
   1444a:	701a      	strb	r2, [r3, #0]
	LEDData.address = _LEDAddress;
   1444c:	4b0f      	ldr	r3, [pc, #60]	; (1448c <platform_read+0x68>)
   1444e:	781a      	ldrb	r2, [r3, #0]
   14450:	4b0f      	ldr	r3, [pc, #60]	; (14490 <platform_read+0x6c>)
   14452:	701a      	strb	r2, [r3, #0]
	LEDData.msgIn = bufp;
   14454:	4b0e      	ldr	r3, [pc, #56]	; (14490 <platform_read+0x6c>)
   14456:	687a      	ldr	r2, [r7, #4]
   14458:	609a      	str	r2, [r3, #8]
	LEDData.lenIn = len;
   1445a:	4b0d      	ldr	r3, [pc, #52]	; (14490 <platform_read+0x6c>)
   1445c:	2208      	movs	r2, #8
   1445e:	18ba      	adds	r2, r7, r2
   14460:	8812      	ldrh	r2, [r2, #0]
   14462:	819a      	strh	r2, [r3, #12]
	LEDData.lenOut = 1;
   14464:	4b0a      	ldr	r3, [pc, #40]	; (14490 <platform_read+0x6c>)
   14466:	2201      	movs	r2, #1
   14468:	81da      	strh	r2, [r3, #14]
	LEDData.msgOut = &msgOutLED;
   1446a:	4b09      	ldr	r3, [pc, #36]	; (14490 <platform_read+0x6c>)
   1446c:	4a06      	ldr	r2, [pc, #24]	; (14488 <platform_read+0x64>)
   1446e:	605a      	str	r2, [r3, #4]
	
	return I2cReadDataWait(&LEDData, 100, 100);
   14470:	4b07      	ldr	r3, [pc, #28]	; (14490 <platform_read+0x6c>)
   14472:	2264      	movs	r2, #100	; 0x64
   14474:	2164      	movs	r1, #100	; 0x64
   14476:	0018      	movs	r0, r3
   14478:	4b06      	ldr	r3, [pc, #24]	; (14494 <platform_read+0x70>)
   1447a:	4798      	blx	r3
   1447c:	0003      	movs	r3, r0
}
   1447e:	0018      	movs	r0, r3
   14480:	46bd      	mov	sp, r7
   14482:	b004      	add	sp, #16
   14484:	bd80      	pop	{r7, pc}
   14486:	46c0      	nop			; (mov r8, r8)
   14488:	20004310 	.word	0x20004310
   1448c:	20000030 	.word	0x20000030
   14490:	20004300 	.word	0x20004300
   14494:	00013e4d 	.word	0x00013e4d

00014498 <GetLEDStruct>:
 * @brief Returns LED struct Object
 * 
 * @return LEDdev_ctx_t* 
 */
LEDdev_ctx_t * GetLEDStruct(void)
{
   14498:	b580      	push	{r7, lr}
   1449a:	af00      	add	r7, sp, #0
return &dev_ctx_APA102C;
   1449c:	4b01      	ldr	r3, [pc, #4]	; (144a4 <GetLEDStruct+0xc>)
}
   1449e:	0018      	movs	r0, r3
   144a0:	46bd      	mov	sp, r7
   144a2:	bd80      	pop	{r7, pc}
   144a4:	20000034 	.word	0x20000034

000144a8 <system_pinmux_get_group_from_gpio_pin>:
 *
 * \return Base address of the associated PORT module.
 */
static inline PortGroup* system_pinmux_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
   144a8:	b580      	push	{r7, lr}
   144aa:	b084      	sub	sp, #16
   144ac:	af00      	add	r7, sp, #0
   144ae:	0002      	movs	r2, r0
   144b0:	1dfb      	adds	r3, r7, #7
   144b2:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
   144b4:	230f      	movs	r3, #15
   144b6:	18fb      	adds	r3, r7, r3
   144b8:	1dfa      	adds	r2, r7, #7
   144ba:	7812      	ldrb	r2, [r2, #0]
   144bc:	09d2      	lsrs	r2, r2, #7
   144be:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
   144c0:	230e      	movs	r3, #14
   144c2:	18fb      	adds	r3, r7, r3
   144c4:	1dfa      	adds	r2, r7, #7
   144c6:	7812      	ldrb	r2, [r2, #0]
   144c8:	0952      	lsrs	r2, r2, #5
   144ca:	701a      	strb	r2, [r3, #0]

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
   144cc:	4b0d      	ldr	r3, [pc, #52]	; (14504 <system_pinmux_get_group_from_gpio_pin+0x5c>)
   144ce:	60bb      	str	r3, [r7, #8]

	if (port_index < PORT_INST_NUM) {
   144d0:	230f      	movs	r3, #15
   144d2:	18fb      	adds	r3, r7, r3
   144d4:	781b      	ldrb	r3, [r3, #0]
   144d6:	2b00      	cmp	r3, #0
   144d8:	d10f      	bne.n	144fa <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
   144da:	230f      	movs	r3, #15
   144dc:	18fb      	adds	r3, r7, r3
   144de:	781b      	ldrb	r3, [r3, #0]
   144e0:	009b      	lsls	r3, r3, #2
   144e2:	2210      	movs	r2, #16
   144e4:	4694      	mov	ip, r2
   144e6:	44bc      	add	ip, r7
   144e8:	4463      	add	r3, ip
   144ea:	3b08      	subs	r3, #8
   144ec:	681a      	ldr	r2, [r3, #0]
   144ee:	230e      	movs	r3, #14
   144f0:	18fb      	adds	r3, r7, r3
   144f2:	781b      	ldrb	r3, [r3, #0]
   144f4:	01db      	lsls	r3, r3, #7
   144f6:	18d3      	adds	r3, r2, r3
   144f8:	e000      	b.n	144fc <system_pinmux_get_group_from_gpio_pin+0x54>
	} else {
		Assert(false);
		return NULL;
   144fa:	2300      	movs	r3, #0
	}
}
   144fc:	0018      	movs	r0, r3
   144fe:	46bd      	mov	sp, r7
   14500:	b004      	add	sp, #16
   14502:	bd80      	pop	{r7, pc}
   14504:	41004400 	.word	0x41004400

00014508 <port_get_group_from_gpio_pin>:
 *
 *  \return Base address of the associated PORT module.
 */
static inline PortGroup* port_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
   14508:	b580      	push	{r7, lr}
   1450a:	b082      	sub	sp, #8
   1450c:	af00      	add	r7, sp, #0
   1450e:	0002      	movs	r2, r0
   14510:	1dfb      	adds	r3, r7, #7
   14512:	701a      	strb	r2, [r3, #0]
	return system_pinmux_get_group_from_gpio_pin(gpio_pin);
   14514:	1dfb      	adds	r3, r7, #7
   14516:	781b      	ldrb	r3, [r3, #0]
   14518:	0018      	movs	r0, r3
   1451a:	4b03      	ldr	r3, [pc, #12]	; (14528 <port_get_group_from_gpio_pin+0x20>)
   1451c:	4798      	blx	r3
   1451e:	0003      	movs	r3, r0
}
   14520:	0018      	movs	r0, r3
   14522:	46bd      	mov	sp, r7
   14524:	b002      	add	sp, #8
   14526:	bd80      	pop	{r7, pc}
   14528:	000144a9 	.word	0x000144a9

0001452c <port_pin_set_output_level>:
 *  \param[in] level     Logical level to set the given pin to
 */
static inline void port_pin_set_output_level(
		const uint8_t gpio_pin,
		const bool level)
{
   1452c:	b580      	push	{r7, lr}
   1452e:	b084      	sub	sp, #16
   14530:	af00      	add	r7, sp, #0
   14532:	0002      	movs	r2, r0
   14534:	1dfb      	adds	r3, r7, #7
   14536:	701a      	strb	r2, [r3, #0]
   14538:	1dbb      	adds	r3, r7, #6
   1453a:	1c0a      	adds	r2, r1, #0
   1453c:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
   1453e:	1dfb      	adds	r3, r7, #7
   14540:	781b      	ldrb	r3, [r3, #0]
   14542:	0018      	movs	r0, r3
   14544:	4b0d      	ldr	r3, [pc, #52]	; (1457c <port_pin_set_output_level+0x50>)
   14546:	4798      	blx	r3
   14548:	0003      	movs	r3, r0
   1454a:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
   1454c:	1dfb      	adds	r3, r7, #7
   1454e:	781b      	ldrb	r3, [r3, #0]
   14550:	221f      	movs	r2, #31
   14552:	4013      	ands	r3, r2
   14554:	2201      	movs	r2, #1
   14556:	409a      	lsls	r2, r3
   14558:	0013      	movs	r3, r2
   1455a:	60bb      	str	r3, [r7, #8]

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
   1455c:	1dbb      	adds	r3, r7, #6
   1455e:	781b      	ldrb	r3, [r3, #0]
   14560:	2b00      	cmp	r3, #0
   14562:	d003      	beq.n	1456c <port_pin_set_output_level+0x40>
		port_base->OUTSET.reg = pin_mask;
   14564:	68fb      	ldr	r3, [r7, #12]
   14566:	68ba      	ldr	r2, [r7, #8]
   14568:	619a      	str	r2, [r3, #24]
	} else {
		port_base->OUTCLR.reg = pin_mask;
	}
}
   1456a:	e002      	b.n	14572 <port_pin_set_output_level+0x46>
		port_base->OUTCLR.reg = pin_mask;
   1456c:	68fb      	ldr	r3, [r7, #12]
   1456e:	68ba      	ldr	r2, [r7, #8]
   14570:	615a      	str	r2, [r3, #20]
}
   14572:	46c0      	nop			; (mov r8, r8)
   14574:	46bd      	mov	sp, r7
   14576:	b004      	add	sp, #16
   14578:	bd80      	pop	{r7, pc}
   1457a:	46c0      	nop			; (mov r8, r8)
   1457c:	00014509 	.word	0x00014509

00014580 <port_pin_toggle_output_level>:
 *
 *  \param[in] gpio_pin  Index of the GPIO pin to toggle
 */
static inline void port_pin_toggle_output_level(
		const uint8_t gpio_pin)
{
   14580:	b580      	push	{r7, lr}
   14582:	b084      	sub	sp, #16
   14584:	af00      	add	r7, sp, #0
   14586:	0002      	movs	r2, r0
   14588:	1dfb      	adds	r3, r7, #7
   1458a:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
   1458c:	1dfb      	adds	r3, r7, #7
   1458e:	781b      	ldrb	r3, [r3, #0]
   14590:	0018      	movs	r0, r3
   14592:	4b09      	ldr	r3, [pc, #36]	; (145b8 <port_pin_toggle_output_level+0x38>)
   14594:	4798      	blx	r3
   14596:	0003      	movs	r3, r0
   14598:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
   1459a:	1dfb      	adds	r3, r7, #7
   1459c:	781b      	ldrb	r3, [r3, #0]
   1459e:	221f      	movs	r2, #31
   145a0:	4013      	ands	r3, r2
   145a2:	2201      	movs	r2, #1
   145a4:	409a      	lsls	r2, r3
   145a6:	0013      	movs	r3, r2
   145a8:	60bb      	str	r3, [r7, #8]

	/* Toggle pin output level */
	port_base->OUTTGL.reg = pin_mask;
   145aa:	68fb      	ldr	r3, [r7, #12]
   145ac:	68ba      	ldr	r2, [r7, #8]
   145ae:	61da      	str	r2, [r3, #28]
}
   145b0:	46c0      	nop			; (mov r8, r8)
   145b2:	46bd      	mov	sp, r7
   145b4:	b004      	add	sp, #16
   145b6:	bd80      	pop	{r7, pc}
   145b8:	00014509 	.word	0x00014509

000145bc <init_state>:

/**
 * \brief Initialize download state to not ready.
 */
static void init_state(void)
{
   145bc:	b580      	push	{r7, lr}
   145be:	af00      	add	r7, sp, #0
    down_state = NOT_READY;
   145c0:	4b02      	ldr	r3, [pc, #8]	; (145cc <init_state+0x10>)
   145c2:	2200      	movs	r2, #0
   145c4:	701a      	strb	r2, [r3, #0]
}
   145c6:	46c0      	nop			; (mov r8, r8)
   145c8:	46bd      	mov	sp, r7
   145ca:	bd80      	pop	{r7, pc}
   145cc:	200004bd 	.word	0x200004bd

000145d0 <clear_state>:
/**
 * \brief Clear state parameter at download processing state.
 * \param[in] mask Check download_state.
 */
static void clear_state(download_state mask)
{
   145d0:	b580      	push	{r7, lr}
   145d2:	b082      	sub	sp, #8
   145d4:	af00      	add	r7, sp, #0
   145d6:	0002      	movs	r2, r0
   145d8:	1dfb      	adds	r3, r7, #7
   145da:	701a      	strb	r2, [r3, #0]
    down_state &= ~mask;
   145dc:	1dfb      	adds	r3, r7, #7
   145de:	781b      	ldrb	r3, [r3, #0]
   145e0:	b25b      	sxtb	r3, r3
   145e2:	43db      	mvns	r3, r3
   145e4:	b25b      	sxtb	r3, r3
   145e6:	4a06      	ldr	r2, [pc, #24]	; (14600 <clear_state+0x30>)
   145e8:	7812      	ldrb	r2, [r2, #0]
   145ea:	b252      	sxtb	r2, r2
   145ec:	4013      	ands	r3, r2
   145ee:	b25b      	sxtb	r3, r3
   145f0:	b2da      	uxtb	r2, r3
   145f2:	4b03      	ldr	r3, [pc, #12]	; (14600 <clear_state+0x30>)
   145f4:	701a      	strb	r2, [r3, #0]
}
   145f6:	46c0      	nop			; (mov r8, r8)
   145f8:	46bd      	mov	sp, r7
   145fa:	b002      	add	sp, #8
   145fc:	bd80      	pop	{r7, pc}
   145fe:	46c0      	nop			; (mov r8, r8)
   14600:	200004bd 	.word	0x200004bd

00014604 <add_state>:
/**
 * \brief Add state parameter at download processing state.
 * \param[in] mask Check download_state.
 */
static void add_state(download_state mask)
{
   14604:	b580      	push	{r7, lr}
   14606:	b082      	sub	sp, #8
   14608:	af00      	add	r7, sp, #0
   1460a:	0002      	movs	r2, r0
   1460c:	1dfb      	adds	r3, r7, #7
   1460e:	701a      	strb	r2, [r3, #0]
    down_state |= mask;
   14610:	4b05      	ldr	r3, [pc, #20]	; (14628 <add_state+0x24>)
   14612:	781a      	ldrb	r2, [r3, #0]
   14614:	1dfb      	adds	r3, r7, #7
   14616:	781b      	ldrb	r3, [r3, #0]
   14618:	4313      	orrs	r3, r2
   1461a:	b2da      	uxtb	r2, r3
   1461c:	4b02      	ldr	r3, [pc, #8]	; (14628 <add_state+0x24>)
   1461e:	701a      	strb	r2, [r3, #0]
}
   14620:	46c0      	nop			; (mov r8, r8)
   14622:	46bd      	mov	sp, r7
   14624:	b002      	add	sp, #8
   14626:	bd80      	pop	{r7, pc}
   14628:	200004bd 	.word	0x200004bd

0001462c <is_state_set>:
 * \param[in] mask Check download_state.
 * \return true if this state is set, false otherwise.
 */

static inline bool is_state_set(download_state mask)
{
   1462c:	b580      	push	{r7, lr}
   1462e:	b082      	sub	sp, #8
   14630:	af00      	add	r7, sp, #0
   14632:	0002      	movs	r2, r0
   14634:	1dfb      	adds	r3, r7, #7
   14636:	701a      	strb	r2, [r3, #0]
    return ((down_state & mask) != 0);
   14638:	4b06      	ldr	r3, [pc, #24]	; (14654 <is_state_set+0x28>)
   1463a:	781b      	ldrb	r3, [r3, #0]
   1463c:	1dfa      	adds	r2, r7, #7
   1463e:	7812      	ldrb	r2, [r2, #0]
   14640:	4013      	ands	r3, r2
   14642:	b2db      	uxtb	r3, r3
   14644:	1e5a      	subs	r2, r3, #1
   14646:	4193      	sbcs	r3, r2
   14648:	b2db      	uxtb	r3, r3
}
   1464a:	0018      	movs	r0, r3
   1464c:	46bd      	mov	sp, r7
   1464e:	b002      	add	sp, #8
   14650:	bd80      	pop	{r7, pc}
   14652:	46c0      	nop			; (mov r8, r8)
   14654:	200004bd 	.word	0x200004bd

00014658 <is_exist_file>:
 * \param[in] fp The file pointer to check.
 * \param[in] file_path_name The file name to check.
 * \return true if this file name is exist, false otherwise.
 */
static bool is_exist_file(FIL *fp, const char *file_path_name)
{
   14658:	b590      	push	{r4, r7, lr}
   1465a:	b085      	sub	sp, #20
   1465c:	af00      	add	r7, sp, #0
   1465e:	6078      	str	r0, [r7, #4]
   14660:	6039      	str	r1, [r7, #0]
    if (fp == NULL || file_path_name == NULL) {
   14662:	687b      	ldr	r3, [r7, #4]
   14664:	2b00      	cmp	r3, #0
   14666:	d002      	beq.n	1466e <is_exist_file+0x16>
   14668:	683b      	ldr	r3, [r7, #0]
   1466a:	2b00      	cmp	r3, #0
   1466c:	d101      	bne.n	14672 <is_exist_file+0x1a>
        return false;
   1466e:	2300      	movs	r3, #0
   14670:	e013      	b.n	1469a <is_exist_file+0x42>
    }

    FRESULT ret = f_open(&file_object, (char const *)file_path_name, FA_OPEN_EXISTING);
   14672:	230f      	movs	r3, #15
   14674:	18fc      	adds	r4, r7, r3
   14676:	6839      	ldr	r1, [r7, #0]
   14678:	4b0a      	ldr	r3, [pc, #40]	; (146a4 <is_exist_file+0x4c>)
   1467a:	2200      	movs	r2, #0
   1467c:	0018      	movs	r0, r3
   1467e:	4b0a      	ldr	r3, [pc, #40]	; (146a8 <is_exist_file+0x50>)
   14680:	4798      	blx	r3
   14682:	0003      	movs	r3, r0
   14684:	7023      	strb	r3, [r4, #0]
    f_close(&file_object);
   14686:	4b07      	ldr	r3, [pc, #28]	; (146a4 <is_exist_file+0x4c>)
   14688:	0018      	movs	r0, r3
   1468a:	4b08      	ldr	r3, [pc, #32]	; (146ac <is_exist_file+0x54>)
   1468c:	4798      	blx	r3
    return (ret == FR_OK);
   1468e:	230f      	movs	r3, #15
   14690:	18fb      	adds	r3, r7, r3
   14692:	781b      	ldrb	r3, [r3, #0]
   14694:	425a      	negs	r2, r3
   14696:	4153      	adcs	r3, r2
   14698:	b2db      	uxtb	r3, r3
}
   1469a:	0018      	movs	r0, r3
   1469c:	46bd      	mov	sp, r7
   1469e:	b005      	add	sp, #20
   146a0:	bd90      	pop	{r4, r7, pc}
   146a2:	46c0      	nop			; (mov r8, r8)
   146a4:	200006f0 	.word	0x200006f0
   146a8:	0002c145 	.word	0x0002c145
   146ac:	0002cb45 	.word	0x0002cb45

000146b0 <rename_to_unique>:
 * \param[out] file_path_name The file name change to uniquely and changed name is returned to this buffer.
 * \param[in] max_len Maximum file name length.
 * \return true if this file name is unique, false otherwise.
 */
static bool rename_to_unique(FIL *fp, char *file_path_name, uint8_t max_len)
{
   146b0:	b580      	push	{r7, lr}
   146b2:	b09e      	sub	sp, #120	; 0x78
   146b4:	af00      	add	r7, sp, #0
   146b6:	60f8      	str	r0, [r7, #12]
   146b8:	60b9      	str	r1, [r7, #8]
   146ba:	1dfb      	adds	r3, r7, #7
   146bc:	701a      	strb	r2, [r3, #0]
#define NUMBRING_MAX (3)
#define ADDITION_SIZE (NUMBRING_MAX + 1) /* '-' character is added before the number. */
    uint16_t i = 1, name_len = 0, ext_len = 0, count = 0;
   146be:	2376      	movs	r3, #118	; 0x76
   146c0:	18fb      	adds	r3, r7, r3
   146c2:	2201      	movs	r2, #1
   146c4:	801a      	strh	r2, [r3, #0]
   146c6:	2374      	movs	r3, #116	; 0x74
   146c8:	18fb      	adds	r3, r7, r3
   146ca:	2200      	movs	r2, #0
   146cc:	801a      	strh	r2, [r3, #0]
   146ce:	236e      	movs	r3, #110	; 0x6e
   146d0:	18fb      	adds	r3, r7, r3
   146d2:	2200      	movs	r2, #0
   146d4:	801a      	strh	r2, [r3, #0]
   146d6:	2372      	movs	r3, #114	; 0x72
   146d8:	18fb      	adds	r3, r7, r3
   146da:	2200      	movs	r2, #0
   146dc:	801a      	strh	r2, [r3, #0]
    char name[MAIN_MAX_FILE_NAME_LENGTH + 1] = {0};
   146de:	2324      	movs	r3, #36	; 0x24
   146e0:	18fb      	adds	r3, r7, r3
   146e2:	0018      	movs	r0, r3
   146e4:	2341      	movs	r3, #65	; 0x41
   146e6:	001a      	movs	r2, r3
   146e8:	2100      	movs	r1, #0
   146ea:	4b92      	ldr	r3, [pc, #584]	; (14934 <rename_to_unique+0x284>)
   146ec:	4798      	blx	r3
    char ext[MAIN_MAX_FILE_EXT_LENGTH + 1] = {0};
   146ee:	2318      	movs	r3, #24
   146f0:	18fb      	adds	r3, r7, r3
   146f2:	0018      	movs	r0, r3
   146f4:	2309      	movs	r3, #9
   146f6:	001a      	movs	r2, r3
   146f8:	2100      	movs	r1, #0
   146fa:	4b8e      	ldr	r3, [pc, #568]	; (14934 <rename_to_unique+0x284>)
   146fc:	4798      	blx	r3
    char numbering[NUMBRING_MAX + 1] = {0};
   146fe:	2314      	movs	r3, #20
   14700:	18fb      	adds	r3, r7, r3
   14702:	2200      	movs	r2, #0
   14704:	601a      	str	r2, [r3, #0]
    char *p = NULL;
   14706:	2300      	movs	r3, #0
   14708:	66bb      	str	r3, [r7, #104]	; 0x68
    bool valid_ext = false;
   1470a:	2371      	movs	r3, #113	; 0x71
   1470c:	18fb      	adds	r3, r7, r3
   1470e:	2200      	movs	r2, #0
   14710:	701a      	strb	r2, [r3, #0]

    if (file_path_name == NULL) {
   14712:	68bb      	ldr	r3, [r7, #8]
   14714:	2b00      	cmp	r3, #0
   14716:	d101      	bne.n	1471c <rename_to_unique+0x6c>
        return false;
   14718:	2300      	movs	r3, #0
   1471a:	e106      	b.n	1492a <rename_to_unique+0x27a>
    }

    if (!is_exist_file(fp, file_path_name)) {
   1471c:	68ba      	ldr	r2, [r7, #8]
   1471e:	68fb      	ldr	r3, [r7, #12]
   14720:	0011      	movs	r1, r2
   14722:	0018      	movs	r0, r3
   14724:	4b84      	ldr	r3, [pc, #528]	; (14938 <rename_to_unique+0x288>)
   14726:	4798      	blx	r3
   14728:	0003      	movs	r3, r0
   1472a:	001a      	movs	r2, r3
   1472c:	2301      	movs	r3, #1
   1472e:	4053      	eors	r3, r2
   14730:	b2db      	uxtb	r3, r3
   14732:	2b00      	cmp	r3, #0
   14734:	d001      	beq.n	1473a <rename_to_unique+0x8a>
        return true;
   14736:	2301      	movs	r3, #1
   14738:	e0f7      	b.n	1492a <rename_to_unique+0x27a>
    } else if (strlen(file_path_name) > MAIN_MAX_FILE_NAME_LENGTH) {
   1473a:	68bb      	ldr	r3, [r7, #8]
   1473c:	0018      	movs	r0, r3
   1473e:	4b7f      	ldr	r3, [pc, #508]	; (1493c <rename_to_unique+0x28c>)
   14740:	4798      	blx	r3
   14742:	0003      	movs	r3, r0
   14744:	2b40      	cmp	r3, #64	; 0x40
   14746:	d901      	bls.n	1474c <rename_to_unique+0x9c>
        return false;
   14748:	2300      	movs	r3, #0
   1474a:	e0ee      	b.n	1492a <rename_to_unique+0x27a>
    }

    p = strrchr(file_path_name, '.');
   1474c:	68bb      	ldr	r3, [r7, #8]
   1474e:	212e      	movs	r1, #46	; 0x2e
   14750:	0018      	movs	r0, r3
   14752:	4b7b      	ldr	r3, [pc, #492]	; (14940 <rename_to_unique+0x290>)
   14754:	4798      	blx	r3
   14756:	0003      	movs	r3, r0
   14758:	66bb      	str	r3, [r7, #104]	; 0x68
    if (p != NULL) {
   1475a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   1475c:	2b00      	cmp	r3, #0
   1475e:	d052      	beq.n	14806 <rename_to_unique+0x156>
        ext_len = strlen(p);
   14760:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   14762:	0018      	movs	r0, r3
   14764:	4b75      	ldr	r3, [pc, #468]	; (1493c <rename_to_unique+0x28c>)
   14766:	4798      	blx	r3
   14768:	0002      	movs	r2, r0
   1476a:	236e      	movs	r3, #110	; 0x6e
   1476c:	18fb      	adds	r3, r7, r3
   1476e:	801a      	strh	r2, [r3, #0]
        if (ext_len < MAIN_MAX_FILE_EXT_LENGTH) {
   14770:	236e      	movs	r3, #110	; 0x6e
   14772:	18fb      	adds	r3, r7, r3
   14774:	881b      	ldrh	r3, [r3, #0]
   14776:	2b07      	cmp	r3, #7
   14778:	d837      	bhi.n	147ea <rename_to_unique+0x13a>
            valid_ext = true;
   1477a:	2371      	movs	r3, #113	; 0x71
   1477c:	18fb      	adds	r3, r7, r3
   1477e:	2201      	movs	r2, #1
   14780:	701a      	strb	r2, [r3, #0]
            strcpy(ext, p);
   14782:	6eba      	ldr	r2, [r7, #104]	; 0x68
   14784:	2318      	movs	r3, #24
   14786:	18fb      	adds	r3, r7, r3
   14788:	0011      	movs	r1, r2
   1478a:	0018      	movs	r0, r3
   1478c:	4b6d      	ldr	r3, [pc, #436]	; (14944 <rename_to_unique+0x294>)
   1478e:	4798      	blx	r3
            if (strlen(file_path_name) - ext_len > MAIN_MAX_FILE_NAME_LENGTH - ADDITION_SIZE) {
   14790:	68bb      	ldr	r3, [r7, #8]
   14792:	0018      	movs	r0, r3
   14794:	4b69      	ldr	r3, [pc, #420]	; (1493c <rename_to_unique+0x28c>)
   14796:	4798      	blx	r3
   14798:	0002      	movs	r2, r0
   1479a:	236e      	movs	r3, #110	; 0x6e
   1479c:	18fb      	adds	r3, r7, r3
   1479e:	881b      	ldrh	r3, [r3, #0]
   147a0:	1ad3      	subs	r3, r2, r3
   147a2:	2b3c      	cmp	r3, #60	; 0x3c
   147a4:	d911      	bls.n	147ca <rename_to_unique+0x11a>
                name_len = MAIN_MAX_FILE_NAME_LENGTH - ADDITION_SIZE - ext_len;
   147a6:	2374      	movs	r3, #116	; 0x74
   147a8:	18fb      	adds	r3, r7, r3
   147aa:	226e      	movs	r2, #110	; 0x6e
   147ac:	18ba      	adds	r2, r7, r2
   147ae:	8812      	ldrh	r2, [r2, #0]
   147b0:	213c      	movs	r1, #60	; 0x3c
   147b2:	1a8a      	subs	r2, r1, r2
   147b4:	801a      	strh	r2, [r3, #0]
                strncpy(name, file_path_name, name_len);
   147b6:	2374      	movs	r3, #116	; 0x74
   147b8:	18fb      	adds	r3, r7, r3
   147ba:	881a      	ldrh	r2, [r3, #0]
   147bc:	68b9      	ldr	r1, [r7, #8]
   147be:	2324      	movs	r3, #36	; 0x24
   147c0:	18fb      	adds	r3, r7, r3
   147c2:	0018      	movs	r0, r3
   147c4:	4b60      	ldr	r3, [pc, #384]	; (14948 <rename_to_unique+0x298>)
   147c6:	4798      	blx	r3
   147c8:	e02a      	b.n	14820 <rename_to_unique+0x170>
            } else {
                name_len = (p - file_path_name);
   147ca:	6eba      	ldr	r2, [r7, #104]	; 0x68
   147cc:	68bb      	ldr	r3, [r7, #8]
   147ce:	1ad2      	subs	r2, r2, r3
   147d0:	2374      	movs	r3, #116	; 0x74
   147d2:	18fb      	adds	r3, r7, r3
   147d4:	801a      	strh	r2, [r3, #0]
                strncpy(name, file_path_name, name_len);
   147d6:	2374      	movs	r3, #116	; 0x74
   147d8:	18fb      	adds	r3, r7, r3
   147da:	881a      	ldrh	r2, [r3, #0]
   147dc:	68b9      	ldr	r1, [r7, #8]
   147de:	2324      	movs	r3, #36	; 0x24
   147e0:	18fb      	adds	r3, r7, r3
   147e2:	0018      	movs	r0, r3
   147e4:	4b58      	ldr	r3, [pc, #352]	; (14948 <rename_to_unique+0x298>)
   147e6:	4798      	blx	r3
   147e8:	e01a      	b.n	14820 <rename_to_unique+0x170>
            }
        } else {
            name_len = MAIN_MAX_FILE_NAME_LENGTH - ADDITION_SIZE;
   147ea:	2374      	movs	r3, #116	; 0x74
   147ec:	18fb      	adds	r3, r7, r3
   147ee:	223c      	movs	r2, #60	; 0x3c
   147f0:	801a      	strh	r2, [r3, #0]
            strncpy(name, file_path_name, name_len);
   147f2:	2374      	movs	r3, #116	; 0x74
   147f4:	18fb      	adds	r3, r7, r3
   147f6:	881a      	ldrh	r2, [r3, #0]
   147f8:	68b9      	ldr	r1, [r7, #8]
   147fa:	2324      	movs	r3, #36	; 0x24
   147fc:	18fb      	adds	r3, r7, r3
   147fe:	0018      	movs	r0, r3
   14800:	4b51      	ldr	r3, [pc, #324]	; (14948 <rename_to_unique+0x298>)
   14802:	4798      	blx	r3
   14804:	e00c      	b.n	14820 <rename_to_unique+0x170>
        }
    } else {
        name_len = MAIN_MAX_FILE_NAME_LENGTH - ADDITION_SIZE;
   14806:	2374      	movs	r3, #116	; 0x74
   14808:	18fb      	adds	r3, r7, r3
   1480a:	223c      	movs	r2, #60	; 0x3c
   1480c:	801a      	strh	r2, [r3, #0]
        strncpy(name, file_path_name, name_len);
   1480e:	2374      	movs	r3, #116	; 0x74
   14810:	18fb      	adds	r3, r7, r3
   14812:	881a      	ldrh	r2, [r3, #0]
   14814:	68b9      	ldr	r1, [r7, #8]
   14816:	2324      	movs	r3, #36	; 0x24
   14818:	18fb      	adds	r3, r7, r3
   1481a:	0018      	movs	r0, r3
   1481c:	4b4a      	ldr	r3, [pc, #296]	; (14948 <rename_to_unique+0x298>)
   1481e:	4798      	blx	r3
    }

    name[name_len++] = '-';
   14820:	2374      	movs	r3, #116	; 0x74
   14822:	18fb      	adds	r3, r7, r3
   14824:	881b      	ldrh	r3, [r3, #0]
   14826:	2274      	movs	r2, #116	; 0x74
   14828:	18ba      	adds	r2, r7, r2
   1482a:	1c59      	adds	r1, r3, #1
   1482c:	8011      	strh	r1, [r2, #0]
   1482e:	001a      	movs	r2, r3
   14830:	2324      	movs	r3, #36	; 0x24
   14832:	18fb      	adds	r3, r7, r3
   14834:	212d      	movs	r1, #45	; 0x2d
   14836:	5499      	strb	r1, [r3, r2]

    for (i = 0, count = 1; i < NUMBRING_MAX; i++) {
   14838:	2376      	movs	r3, #118	; 0x76
   1483a:	18fb      	adds	r3, r7, r3
   1483c:	2200      	movs	r2, #0
   1483e:	801a      	strh	r2, [r3, #0]
   14840:	2372      	movs	r3, #114	; 0x72
   14842:	18fb      	adds	r3, r7, r3
   14844:	2201      	movs	r2, #1
   14846:	801a      	strh	r2, [r3, #0]
   14848:	e010      	b.n	1486c <rename_to_unique+0x1bc>
        count *= 10;
   1484a:	2372      	movs	r3, #114	; 0x72
   1484c:	18fa      	adds	r2, r7, r3
   1484e:	2372      	movs	r3, #114	; 0x72
   14850:	18fb      	adds	r3, r7, r3
   14852:	881b      	ldrh	r3, [r3, #0]
   14854:	1c19      	adds	r1, r3, #0
   14856:	0089      	lsls	r1, r1, #2
   14858:	18cb      	adds	r3, r1, r3
   1485a:	18db      	adds	r3, r3, r3
   1485c:	8013      	strh	r3, [r2, #0]
    for (i = 0, count = 1; i < NUMBRING_MAX; i++) {
   1485e:	2376      	movs	r3, #118	; 0x76
   14860:	18fb      	adds	r3, r7, r3
   14862:	881a      	ldrh	r2, [r3, #0]
   14864:	2376      	movs	r3, #118	; 0x76
   14866:	18fb      	adds	r3, r7, r3
   14868:	3201      	adds	r2, #1
   1486a:	801a      	strh	r2, [r3, #0]
   1486c:	2376      	movs	r3, #118	; 0x76
   1486e:	18fb      	adds	r3, r7, r3
   14870:	881b      	ldrh	r3, [r3, #0]
   14872:	2b02      	cmp	r3, #2
   14874:	d9e9      	bls.n	1484a <rename_to_unique+0x19a>
    }
    for (i = 1; i < count; i++) {
   14876:	2376      	movs	r3, #118	; 0x76
   14878:	18fb      	adds	r3, r7, r3
   1487a:	2201      	movs	r2, #1
   1487c:	801a      	strh	r2, [r3, #0]
   1487e:	e04b      	b.n	14918 <rename_to_unique+0x268>
        sprintf(numbering, MAIN_ZERO_FMT(NUMBRING_MAX), i);
   14880:	2376      	movs	r3, #118	; 0x76
   14882:	18fb      	adds	r3, r7, r3
   14884:	881a      	ldrh	r2, [r3, #0]
   14886:	4931      	ldr	r1, [pc, #196]	; (1494c <rename_to_unique+0x29c>)
   14888:	2314      	movs	r3, #20
   1488a:	18fb      	adds	r3, r7, r3
   1488c:	0018      	movs	r0, r3
   1488e:	4b30      	ldr	r3, [pc, #192]	; (14950 <rename_to_unique+0x2a0>)
   14890:	4798      	blx	r3
        strncpy(&name[name_len], numbering, NUMBRING_MAX);
   14892:	2374      	movs	r3, #116	; 0x74
   14894:	18fb      	adds	r3, r7, r3
   14896:	881b      	ldrh	r3, [r3, #0]
   14898:	2224      	movs	r2, #36	; 0x24
   1489a:	18ba      	adds	r2, r7, r2
   1489c:	18d3      	adds	r3, r2, r3
   1489e:	2214      	movs	r2, #20
   148a0:	18b9      	adds	r1, r7, r2
   148a2:	2203      	movs	r2, #3
   148a4:	0018      	movs	r0, r3
   148a6:	4b28      	ldr	r3, [pc, #160]	; (14948 <rename_to_unique+0x298>)
   148a8:	4798      	blx	r3
        if (valid_ext) {
   148aa:	2371      	movs	r3, #113	; 0x71
   148ac:	18fb      	adds	r3, r7, r3
   148ae:	781b      	ldrb	r3, [r3, #0]
   148b0:	2b00      	cmp	r3, #0
   148b2:	d00c      	beq.n	148ce <rename_to_unique+0x21e>
            strcpy(&name[name_len + NUMBRING_MAX], ext);
   148b4:	2374      	movs	r3, #116	; 0x74
   148b6:	18fb      	adds	r3, r7, r3
   148b8:	881b      	ldrh	r3, [r3, #0]
   148ba:	3303      	adds	r3, #3
   148bc:	2224      	movs	r2, #36	; 0x24
   148be:	18ba      	adds	r2, r7, r2
   148c0:	18d3      	adds	r3, r2, r3
   148c2:	2218      	movs	r2, #24
   148c4:	18ba      	adds	r2, r7, r2
   148c6:	0011      	movs	r1, r2
   148c8:	0018      	movs	r0, r3
   148ca:	4b1e      	ldr	r3, [pc, #120]	; (14944 <rename_to_unique+0x294>)
   148cc:	4798      	blx	r3
        }

        if (!is_exist_file(fp, name)) {
   148ce:	2324      	movs	r3, #36	; 0x24
   148d0:	18fa      	adds	r2, r7, r3
   148d2:	68fb      	ldr	r3, [r7, #12]
   148d4:	0011      	movs	r1, r2
   148d6:	0018      	movs	r0, r3
   148d8:	4b17      	ldr	r3, [pc, #92]	; (14938 <rename_to_unique+0x288>)
   148da:	4798      	blx	r3
   148dc:	0003      	movs	r3, r0
   148de:	001a      	movs	r2, r3
   148e0:	2301      	movs	r3, #1
   148e2:	4053      	eors	r3, r2
   148e4:	b2db      	uxtb	r3, r3
   148e6:	2b00      	cmp	r3, #0
   148e8:	d00f      	beq.n	1490a <rename_to_unique+0x25a>
            memset(file_path_name, 0, max_len);
   148ea:	1dfb      	adds	r3, r7, #7
   148ec:	781a      	ldrb	r2, [r3, #0]
   148ee:	68bb      	ldr	r3, [r7, #8]
   148f0:	2100      	movs	r1, #0
   148f2:	0018      	movs	r0, r3
   148f4:	4b0f      	ldr	r3, [pc, #60]	; (14934 <rename_to_unique+0x284>)
   148f6:	4798      	blx	r3
            strcpy(file_path_name, name);
   148f8:	2324      	movs	r3, #36	; 0x24
   148fa:	18fa      	adds	r2, r7, r3
   148fc:	68bb      	ldr	r3, [r7, #8]
   148fe:	0011      	movs	r1, r2
   14900:	0018      	movs	r0, r3
   14902:	4b10      	ldr	r3, [pc, #64]	; (14944 <rename_to_unique+0x294>)
   14904:	4798      	blx	r3
            return true;
   14906:	2301      	movs	r3, #1
   14908:	e00f      	b.n	1492a <rename_to_unique+0x27a>
    for (i = 1; i < count; i++) {
   1490a:	2376      	movs	r3, #118	; 0x76
   1490c:	18fb      	adds	r3, r7, r3
   1490e:	881a      	ldrh	r2, [r3, #0]
   14910:	2376      	movs	r3, #118	; 0x76
   14912:	18fb      	adds	r3, r7, r3
   14914:	3201      	adds	r2, #1
   14916:	801a      	strh	r2, [r3, #0]
   14918:	2376      	movs	r3, #118	; 0x76
   1491a:	18fa      	adds	r2, r7, r3
   1491c:	2372      	movs	r3, #114	; 0x72
   1491e:	18fb      	adds	r3, r7, r3
   14920:	8812      	ldrh	r2, [r2, #0]
   14922:	881b      	ldrh	r3, [r3, #0]
   14924:	429a      	cmp	r2, r3
   14926:	d3ab      	bcc.n	14880 <rename_to_unique+0x1d0>
        }
    }
    return false;
   14928:	2300      	movs	r3, #0
}
   1492a:	0018      	movs	r0, r3
   1492c:	46bd      	mov	sp, r7
   1492e:	b01e      	add	sp, #120	; 0x78
   14930:	bd80      	pop	{r7, pc}
   14932:	46c0      	nop			; (mov r8, r8)
   14934:	00033117 	.word	0x00033117
   14938:	00014659 	.word	0x00014659
   1493c:	000334cf 	.word	0x000334cf
   14940:	00033529 	.word	0x00033529
   14944:	00033483 	.word	0x00033483
   14948:	000334ff 	.word	0x000334ff
   1494c:	00034864 	.word	0x00034864
   14950:	000333d5 	.word	0x000333d5

00014954 <start_download>:

/**
 * \brief Start file download via HTTP connection.
 */
static void start_download(void)
{
   14954:	b590      	push	{r4, r7, lr}
   14956:	b085      	sub	sp, #20
   14958:	af02      	add	r7, sp, #8
    if (!is_state_set(STORAGE_READY)) {
   1495a:	2001      	movs	r0, #1
   1495c:	4b23      	ldr	r3, [pc, #140]	; (149ec <start_download+0x98>)
   1495e:	4798      	blx	r3
   14960:	0003      	movs	r3, r0
   14962:	001a      	movs	r2, r3
   14964:	2301      	movs	r3, #1
   14966:	4053      	eors	r3, r2
   14968:	b2db      	uxtb	r3, r3
   1496a:	2b00      	cmp	r3, #0
   1496c:	d005      	beq.n	1497a <start_download+0x26>
        LogMessage(LOG_DEBUG_LVL, "start_download: MMC storage not ready.\r\n");
   1496e:	4b20      	ldr	r3, [pc, #128]	; (149f0 <start_download+0x9c>)
   14970:	0019      	movs	r1, r3
   14972:	2001      	movs	r0, #1
   14974:	4b1f      	ldr	r3, [pc, #124]	; (149f4 <start_download+0xa0>)
   14976:	4798      	blx	r3
        return;
   14978:	e034      	b.n	149e4 <start_download+0x90>
    }

    if (!is_state_set(WIFI_CONNECTED)) {
   1497a:	2002      	movs	r0, #2
   1497c:	4b1b      	ldr	r3, [pc, #108]	; (149ec <start_download+0x98>)
   1497e:	4798      	blx	r3
   14980:	0003      	movs	r3, r0
   14982:	001a      	movs	r2, r3
   14984:	2301      	movs	r3, #1
   14986:	4053      	eors	r3, r2
   14988:	b2db      	uxtb	r3, r3
   1498a:	2b00      	cmp	r3, #0
   1498c:	d005      	beq.n	1499a <start_download+0x46>
        LogMessage(LOG_DEBUG_LVL, "start_download: Wi-Fi is not connected.\r\n");
   1498e:	4b1a      	ldr	r3, [pc, #104]	; (149f8 <start_download+0xa4>)
   14990:	0019      	movs	r1, r3
   14992:	2001      	movs	r0, #1
   14994:	4b17      	ldr	r3, [pc, #92]	; (149f4 <start_download+0xa0>)
   14996:	4798      	blx	r3
        return;
   14998:	e024      	b.n	149e4 <start_download+0x90>
    }

    if (is_state_set(GET_REQUESTED)) {
   1499a:	2004      	movs	r0, #4
   1499c:	4b13      	ldr	r3, [pc, #76]	; (149ec <start_download+0x98>)
   1499e:	4798      	blx	r3
   149a0:	1e03      	subs	r3, r0, #0
   149a2:	d005      	beq.n	149b0 <start_download+0x5c>
        LogMessage(LOG_DEBUG_LVL, "start_download: request is sent already.\r\n");
   149a4:	4b15      	ldr	r3, [pc, #84]	; (149fc <start_download+0xa8>)
   149a6:	0019      	movs	r1, r3
   149a8:	2001      	movs	r0, #1
   149aa:	4b12      	ldr	r3, [pc, #72]	; (149f4 <start_download+0xa0>)
   149ac:	4798      	blx	r3
        return;
   149ae:	e019      	b.n	149e4 <start_download+0x90>
    }

    if (is_state_set(DOWNLOADING)) {
   149b0:	2008      	movs	r0, #8
   149b2:	4b0e      	ldr	r3, [pc, #56]	; (149ec <start_download+0x98>)
   149b4:	4798      	blx	r3
   149b6:	1e03      	subs	r3, r0, #0
   149b8:	d005      	beq.n	149c6 <start_download+0x72>
        LogMessage(LOG_DEBUG_LVL, "start_download: running download already.\r\n");
   149ba:	4b11      	ldr	r3, [pc, #68]	; (14a00 <start_download+0xac>)
   149bc:	0019      	movs	r1, r3
   149be:	2001      	movs	r0, #1
   149c0:	4b0c      	ldr	r3, [pc, #48]	; (149f4 <start_download+0xa0>)
   149c2:	4798      	blx	r3
        return;
   149c4:	e00e      	b.n	149e4 <start_download+0x90>
    }

    /* Send the HTTP request. */
    LogMessage(LOG_DEBUG_LVL, "start_download: sending HTTP request...\r\n");
   149c6:	4b0f      	ldr	r3, [pc, #60]	; (14a04 <start_download+0xb0>)
   149c8:	0019      	movs	r1, r3
   149ca:	2001      	movs	r0, #1
   149cc:	4b09      	ldr	r3, [pc, #36]	; (149f4 <start_download+0xa0>)
   149ce:	4798      	blx	r3
    int http_req_status = http_client_send_request(&http_client_module_inst, MAIN_HTTP_FILE_URL, HTTP_METHOD_GET, NULL, NULL);
   149d0:	490d      	ldr	r1, [pc, #52]	; (14a08 <start_download+0xb4>)
   149d2:	480e      	ldr	r0, [pc, #56]	; (14a0c <start_download+0xb8>)
   149d4:	2300      	movs	r3, #0
   149d6:	9300      	str	r3, [sp, #0]
   149d8:	2300      	movs	r3, #0
   149da:	2201      	movs	r2, #1
   149dc:	4c0c      	ldr	r4, [pc, #48]	; (14a10 <start_download+0xbc>)
   149de:	47a0      	blx	r4
   149e0:	0003      	movs	r3, r0
   149e2:	607b      	str	r3, [r7, #4]
}
   149e4:	46bd      	mov	sp, r7
   149e6:	b003      	add	sp, #12
   149e8:	bd90      	pop	{r4, r7, pc}
   149ea:	46c0      	nop			; (mov r8, r8)
   149ec:	0001462d 	.word	0x0001462d
   149f0:	0003486c 	.word	0x0003486c
   149f4:	0001c605 	.word	0x0001c605
   149f8:	00034898 	.word	0x00034898
   149fc:	000348c4 	.word	0x000348c4
   14a00:	000348f0 	.word	0x000348f0
   14a04:	0003491c 	.word	0x0003491c
   14a08:	00034948 	.word	0x00034948
   14a0c:	200043a8 	.word	0x200043a8
   14a10:	0002f799 	.word	0x0002f799

00014a14 <store_file_packet>:
 * \brief Store received packet to file.
 * \param[in] data Packet data.
 * \param[in] length Packet data length.
 */
static void store_file_packet(char *data, uint32_t length)
{
   14a14:	b5b0      	push	{r4, r5, r7, lr}
   14a16:	b086      	sub	sp, #24
   14a18:	af00      	add	r7, sp, #0
   14a1a:	6078      	str	r0, [r7, #4]
   14a1c:	6039      	str	r1, [r7, #0]
    FRESULT ret;
    if ((data == NULL) || (length < 1)) {
   14a1e:	687b      	ldr	r3, [r7, #4]
   14a20:	2b00      	cmp	r3, #0
   14a22:	d002      	beq.n	14a2a <store_file_packet+0x16>
   14a24:	683b      	ldr	r3, [r7, #0]
   14a26:	2b00      	cmp	r3, #0
   14a28:	d105      	bne.n	14a36 <store_file_packet+0x22>
        LogMessage(LOG_DEBUG_LVL, "store_file_packet: empty data.\r\n");
   14a2a:	4b58      	ldr	r3, [pc, #352]	; (14b8c <store_file_packet+0x178>)
   14a2c:	0019      	movs	r1, r3
   14a2e:	2001      	movs	r0, #1
   14a30:	4b57      	ldr	r3, [pc, #348]	; (14b90 <store_file_packet+0x17c>)
   14a32:	4798      	blx	r3
        return;
   14a34:	e0a6      	b.n	14b84 <store_file_packet+0x170>
    }

    if (!is_state_set(DOWNLOADING)) {
   14a36:	2008      	movs	r0, #8
   14a38:	4b56      	ldr	r3, [pc, #344]	; (14b94 <store_file_packet+0x180>)
   14a3a:	4798      	blx	r3
   14a3c:	0003      	movs	r3, r0
   14a3e:	001a      	movs	r2, r3
   14a40:	2301      	movs	r3, #1
   14a42:	4053      	eors	r3, r2
   14a44:	b2db      	uxtb	r3, r3
   14a46:	2b00      	cmp	r3, #0
   14a48:	d055      	beq.n	14af6 <store_file_packet+0xe2>
        char *cp = NULL;
   14a4a:	2300      	movs	r3, #0
   14a4c:	617b      	str	r3, [r7, #20]
        save_file_name[0] = LUN_ID_SD_MMC_0_MEM + '0';
   14a4e:	4b52      	ldr	r3, [pc, #328]	; (14b98 <store_file_packet+0x184>)
   14a50:	2230      	movs	r2, #48	; 0x30
   14a52:	701a      	strb	r2, [r3, #0]
        save_file_name[1] = ':';
   14a54:	4b50      	ldr	r3, [pc, #320]	; (14b98 <store_file_packet+0x184>)
   14a56:	223a      	movs	r2, #58	; 0x3a
   14a58:	705a      	strb	r2, [r3, #1]
        cp = (char *)(MAIN_HTTP_FILE_URL + strlen(MAIN_HTTP_FILE_URL));
   14a5a:	4b50      	ldr	r3, [pc, #320]	; (14b9c <store_file_packet+0x188>)
   14a5c:	617b      	str	r3, [r7, #20]
        while (*cp != '/') {
   14a5e:	e002      	b.n	14a66 <store_file_packet+0x52>
            cp--;
   14a60:	697b      	ldr	r3, [r7, #20]
   14a62:	3b01      	subs	r3, #1
   14a64:	617b      	str	r3, [r7, #20]
        while (*cp != '/') {
   14a66:	697b      	ldr	r3, [r7, #20]
   14a68:	781b      	ldrb	r3, [r3, #0]
   14a6a:	2b2f      	cmp	r3, #47	; 0x2f
   14a6c:	d1f8      	bne.n	14a60 <store_file_packet+0x4c>
        }
        if (strlen(cp) > 1) {
   14a6e:	697b      	ldr	r3, [r7, #20]
   14a70:	0018      	movs	r0, r3
   14a72:	4b4b      	ldr	r3, [pc, #300]	; (14ba0 <store_file_packet+0x18c>)
   14a74:	4798      	blx	r3
   14a76:	0003      	movs	r3, r0
   14a78:	2b01      	cmp	r3, #1
   14a7a:	d924      	bls.n	14ac6 <store_file_packet+0xb2>
            cp++;
   14a7c:	697b      	ldr	r3, [r7, #20]
   14a7e:	3301      	adds	r3, #1
   14a80:	617b      	str	r3, [r7, #20]
            strcpy(&save_file_name[2], cp);
   14a82:	697a      	ldr	r2, [r7, #20]
   14a84:	4b47      	ldr	r3, [pc, #284]	; (14ba4 <store_file_packet+0x190>)
   14a86:	0011      	movs	r1, r2
   14a88:	0018      	movs	r0, r3
   14a8a:	4b47      	ldr	r3, [pc, #284]	; (14ba8 <store_file_packet+0x194>)
   14a8c:	4798      	blx	r3
            LogMessage(LOG_DEBUG_LVL, "store_file_packet: file name is invalid. Download canceled.\r\n");
            add_state(CANCELED);
            return;
        }

        rename_to_unique(&file_object, save_file_name, MAIN_MAX_FILE_NAME_LENGTH);
   14a8e:	4942      	ldr	r1, [pc, #264]	; (14b98 <store_file_packet+0x184>)
   14a90:	4b46      	ldr	r3, [pc, #280]	; (14bac <store_file_packet+0x198>)
   14a92:	2240      	movs	r2, #64	; 0x40
   14a94:	0018      	movs	r0, r3
   14a96:	4b46      	ldr	r3, [pc, #280]	; (14bb0 <store_file_packet+0x19c>)
   14a98:	4798      	blx	r3
        LogMessage(LOG_DEBUG_LVL, "store_file_packet: creating file [%s]\r\n", save_file_name);
   14a9a:	4a3f      	ldr	r2, [pc, #252]	; (14b98 <store_file_packet+0x184>)
   14a9c:	4b45      	ldr	r3, [pc, #276]	; (14bb4 <store_file_packet+0x1a0>)
   14a9e:	0019      	movs	r1, r3
   14aa0:	2001      	movs	r0, #1
   14aa2:	4b3b      	ldr	r3, [pc, #236]	; (14b90 <store_file_packet+0x17c>)
   14aa4:	4798      	blx	r3
        ret = f_open(&file_object, (char const *)save_file_name, FA_CREATE_ALWAYS | FA_WRITE);
   14aa6:	2313      	movs	r3, #19
   14aa8:	18fc      	adds	r4, r7, r3
   14aaa:	493b      	ldr	r1, [pc, #236]	; (14b98 <store_file_packet+0x184>)
   14aac:	4b3f      	ldr	r3, [pc, #252]	; (14bac <store_file_packet+0x198>)
   14aae:	220a      	movs	r2, #10
   14ab0:	0018      	movs	r0, r3
   14ab2:	4b41      	ldr	r3, [pc, #260]	; (14bb8 <store_file_packet+0x1a4>)
   14ab4:	4798      	blx	r3
   14ab6:	0003      	movs	r3, r0
   14ab8:	7023      	strb	r3, [r4, #0]
        if (ret != FR_OK) {
   14aba:	2313      	movs	r3, #19
   14abc:	18fb      	adds	r3, r7, r3
   14abe:	781b      	ldrb	r3, [r3, #0]
   14ac0:	2b00      	cmp	r3, #0
   14ac2:	d012      	beq.n	14aea <store_file_packet+0xd6>
   14ac4:	e008      	b.n	14ad8 <store_file_packet+0xc4>
            LogMessage(LOG_DEBUG_LVL, "store_file_packet: file name is invalid. Download canceled.\r\n");
   14ac6:	4b3d      	ldr	r3, [pc, #244]	; (14bbc <store_file_packet+0x1a8>)
   14ac8:	0019      	movs	r1, r3
   14aca:	2001      	movs	r0, #1
   14acc:	4b30      	ldr	r3, [pc, #192]	; (14b90 <store_file_packet+0x17c>)
   14ace:	4798      	blx	r3
            add_state(CANCELED);
   14ad0:	2020      	movs	r0, #32
   14ad2:	4b3b      	ldr	r3, [pc, #236]	; (14bc0 <store_file_packet+0x1ac>)
   14ad4:	4798      	blx	r3
            return;
   14ad6:	e055      	b.n	14b84 <store_file_packet+0x170>
            LogMessage(LOG_DEBUG_LVL, "store_file_packet: file creation error! ret:%d\r\n", ret);
   14ad8:	2313      	movs	r3, #19
   14ada:	18fb      	adds	r3, r7, r3
   14adc:	781a      	ldrb	r2, [r3, #0]
   14ade:	4b39      	ldr	r3, [pc, #228]	; (14bc4 <store_file_packet+0x1b0>)
   14ae0:	0019      	movs	r1, r3
   14ae2:	2001      	movs	r0, #1
   14ae4:	4b2a      	ldr	r3, [pc, #168]	; (14b90 <store_file_packet+0x17c>)
   14ae6:	4798      	blx	r3
            return;
   14ae8:	e04c      	b.n	14b84 <store_file_packet+0x170>
        }

        received_file_size = 0;
   14aea:	4b37      	ldr	r3, [pc, #220]	; (14bc8 <store_file_packet+0x1b4>)
   14aec:	2200      	movs	r2, #0
   14aee:	601a      	str	r2, [r3, #0]
        add_state(DOWNLOADING);
   14af0:	2008      	movs	r0, #8
   14af2:	4b33      	ldr	r3, [pc, #204]	; (14bc0 <store_file_packet+0x1ac>)
   14af4:	4798      	blx	r3
    }

    if (data != NULL) {
   14af6:	687b      	ldr	r3, [r7, #4]
   14af8:	2b00      	cmp	r3, #0
   14afa:	d043      	beq.n	14b84 <store_file_packet+0x170>
        UINT wsize = 0;
   14afc:	2300      	movs	r3, #0
   14afe:	60fb      	str	r3, [r7, #12]
        ret = f_write(&file_object, (const void *)data, length, &wsize);
   14b00:	2313      	movs	r3, #19
   14b02:	18fc      	adds	r4, r7, r3
   14b04:	230c      	movs	r3, #12
   14b06:	18fb      	adds	r3, r7, r3
   14b08:	683a      	ldr	r2, [r7, #0]
   14b0a:	6879      	ldr	r1, [r7, #4]
   14b0c:	4827      	ldr	r0, [pc, #156]	; (14bac <store_file_packet+0x198>)
   14b0e:	4d2f      	ldr	r5, [pc, #188]	; (14bcc <store_file_packet+0x1b8>)
   14b10:	47a8      	blx	r5
   14b12:	0003      	movs	r3, r0
   14b14:	7023      	strb	r3, [r4, #0]
        if (ret != FR_OK) {
   14b16:	2313      	movs	r3, #19
   14b18:	18fb      	adds	r3, r7, r3
   14b1a:	781b      	ldrb	r3, [r3, #0]
   14b1c:	2b00      	cmp	r3, #0
   14b1e:	d00c      	beq.n	14b3a <store_file_packet+0x126>
            f_close(&file_object);
   14b20:	4b22      	ldr	r3, [pc, #136]	; (14bac <store_file_packet+0x198>)
   14b22:	0018      	movs	r0, r3
   14b24:	4b2a      	ldr	r3, [pc, #168]	; (14bd0 <store_file_packet+0x1bc>)
   14b26:	4798      	blx	r3
            add_state(CANCELED);
   14b28:	2020      	movs	r0, #32
   14b2a:	4b25      	ldr	r3, [pc, #148]	; (14bc0 <store_file_packet+0x1ac>)
   14b2c:	4798      	blx	r3
            LogMessage(LOG_DEBUG_LVL, "store_file_packet: file write error, download canceled.\r\n");
   14b2e:	4b29      	ldr	r3, [pc, #164]	; (14bd4 <store_file_packet+0x1c0>)
   14b30:	0019      	movs	r1, r3
   14b32:	2001      	movs	r0, #1
   14b34:	4b16      	ldr	r3, [pc, #88]	; (14b90 <store_file_packet+0x17c>)
   14b36:	4798      	blx	r3
            return;
   14b38:	e024      	b.n	14b84 <store_file_packet+0x170>
        }

        received_file_size += wsize;
   14b3a:	4b23      	ldr	r3, [pc, #140]	; (14bc8 <store_file_packet+0x1b4>)
   14b3c:	681a      	ldr	r2, [r3, #0]
   14b3e:	68fb      	ldr	r3, [r7, #12]
   14b40:	18d2      	adds	r2, r2, r3
   14b42:	4b21      	ldr	r3, [pc, #132]	; (14bc8 <store_file_packet+0x1b4>)
   14b44:	601a      	str	r2, [r3, #0]
        LogMessage(LOG_DEBUG_LVL, "store_file_packet: received[%lu], file size[%lu]\r\n", (unsigned long)received_file_size, (unsigned long)http_file_size);
   14b46:	4b20      	ldr	r3, [pc, #128]	; (14bc8 <store_file_packet+0x1b4>)
   14b48:	681a      	ldr	r2, [r3, #0]
   14b4a:	4b23      	ldr	r3, [pc, #140]	; (14bd8 <store_file_packet+0x1c4>)
   14b4c:	681b      	ldr	r3, [r3, #0]
   14b4e:	4923      	ldr	r1, [pc, #140]	; (14bdc <store_file_packet+0x1c8>)
   14b50:	2001      	movs	r0, #1
   14b52:	4c0f      	ldr	r4, [pc, #60]	; (14b90 <store_file_packet+0x17c>)
   14b54:	47a0      	blx	r4
        if (received_file_size >= http_file_size) {
   14b56:	4b1c      	ldr	r3, [pc, #112]	; (14bc8 <store_file_packet+0x1b4>)
   14b58:	681a      	ldr	r2, [r3, #0]
   14b5a:	4b1f      	ldr	r3, [pc, #124]	; (14bd8 <store_file_packet+0x1c4>)
   14b5c:	681b      	ldr	r3, [r3, #0]
   14b5e:	429a      	cmp	r2, r3
   14b60:	d310      	bcc.n	14b84 <store_file_packet+0x170>
            f_close(&file_object);
   14b62:	4b12      	ldr	r3, [pc, #72]	; (14bac <store_file_packet+0x198>)
   14b64:	0018      	movs	r0, r3
   14b66:	4b1a      	ldr	r3, [pc, #104]	; (14bd0 <store_file_packet+0x1bc>)
   14b68:	4798      	blx	r3
            LogMessage(LOG_DEBUG_LVL, "store_file_packet: file downloaded successfully.\r\n");
   14b6a:	4b1d      	ldr	r3, [pc, #116]	; (14be0 <store_file_packet+0x1cc>)
   14b6c:	0019      	movs	r1, r3
   14b6e:	2001      	movs	r0, #1
   14b70:	4b07      	ldr	r3, [pc, #28]	; (14b90 <store_file_packet+0x17c>)
   14b72:	4798      	blx	r3
            port_pin_set_output_level(LED_0_PIN, false);
   14b74:	2100      	movs	r1, #0
   14b76:	2017      	movs	r0, #23
   14b78:	4b1a      	ldr	r3, [pc, #104]	; (14be4 <store_file_packet+0x1d0>)
   14b7a:	4798      	blx	r3
            add_state(COMPLETED);
   14b7c:	2010      	movs	r0, #16
   14b7e:	4b10      	ldr	r3, [pc, #64]	; (14bc0 <store_file_packet+0x1ac>)
   14b80:	4798      	blx	r3
            return;
   14b82:	46c0      	nop			; (mov r8, r8)
        }
    }
}
   14b84:	46bd      	mov	sp, r7
   14b86:	b006      	add	sp, #24
   14b88:	bdb0      	pop	{r4, r5, r7, pc}
   14b8a:	46c0      	nop			; (mov r8, r8)
   14b8c:	00034968 	.word	0x00034968
   14b90:	0001c605 	.word	0x0001c605
   14b94:	0001462d 	.word	0x0001462d
   14b98:	200000c4 	.word	0x200000c4
   14b9c:	00034965 	.word	0x00034965
   14ba0:	000334cf 	.word	0x000334cf
   14ba4:	200000c6 	.word	0x200000c6
   14ba8:	00033483 	.word	0x00033483
   14bac:	200006f0 	.word	0x200006f0
   14bb0:	000146b1 	.word	0x000146b1
   14bb4:	000349cc 	.word	0x000349cc
   14bb8:	0002c145 	.word	0x0002c145
   14bbc:	0003498c 	.word	0x0003498c
   14bc0:	00014605 	.word	0x00014605
   14bc4:	000349f4 	.word	0x000349f4
   14bc8:	20000718 	.word	0x20000718
   14bcc:	0002c675 	.word	0x0002c675
   14bd0:	0002cb45 	.word	0x0002cb45
   14bd4:	00034a28 	.word	0x00034a28
   14bd8:	20000714 	.word	0x20000714
   14bdc:	00034a64 	.word	0x00034a64
   14be0:	00034a98 	.word	0x00034a98
   14be4:	0001452d 	.word	0x0001452d

00014be8 <http_client_callback>:
 * \param[in]  module_inst     Module instance of HTTP client module.
 * \param[in]  type            Type of event.
 * \param[in]  data            Data structure of the event. \refer http_client_data
 */
static void http_client_callback(struct http_client_module *module_inst, int type, union http_client_data *data)
{
   14be8:	b590      	push	{r4, r7, lr}
   14bea:	b085      	sub	sp, #20
   14bec:	af00      	add	r7, sp, #0
   14bee:	60f8      	str	r0, [r7, #12]
   14bf0:	60b9      	str	r1, [r7, #8]
   14bf2:	607a      	str	r2, [r7, #4]
    switch (type) {
   14bf4:	68bb      	ldr	r3, [r7, #8]
   14bf6:	2b04      	cmp	r3, #4
   14bf8:	d900      	bls.n	14bfc <http_client_callback+0x14>
   14bfa:	e077      	b.n	14cec <http_client_callback+0x104>
   14bfc:	68bb      	ldr	r3, [r7, #8]
   14bfe:	009a      	lsls	r2, r3, #2
   14c00:	4b3c      	ldr	r3, [pc, #240]	; (14cf4 <http_client_callback+0x10c>)
   14c02:	18d3      	adds	r3, r2, r3
   14c04:	681b      	ldr	r3, [r3, #0]
   14c06:	469f      	mov	pc, r3
        case HTTP_CLIENT_CALLBACK_SOCK_CONNECTED:
            LogMessage(LOG_DEBUG_LVL, "http_client_callback: HTTP client socket connected.\r\n");
   14c08:	4b3b      	ldr	r3, [pc, #236]	; (14cf8 <http_client_callback+0x110>)
   14c0a:	0019      	movs	r1, r3
   14c0c:	2001      	movs	r0, #1
   14c0e:	4b3b      	ldr	r3, [pc, #236]	; (14cfc <http_client_callback+0x114>)
   14c10:	4798      	blx	r3
            break;
   14c12:	e06b      	b.n	14cec <http_client_callback+0x104>

        case HTTP_CLIENT_CALLBACK_REQUESTED:
            LogMessage(LOG_DEBUG_LVL, "http_client_callback: request completed.\r\n");
   14c14:	4b3a      	ldr	r3, [pc, #232]	; (14d00 <http_client_callback+0x118>)
   14c16:	0019      	movs	r1, r3
   14c18:	2001      	movs	r0, #1
   14c1a:	4b38      	ldr	r3, [pc, #224]	; (14cfc <http_client_callback+0x114>)
   14c1c:	4798      	blx	r3
            add_state(GET_REQUESTED);
   14c1e:	2004      	movs	r0, #4
   14c20:	4b38      	ldr	r3, [pc, #224]	; (14d04 <http_client_callback+0x11c>)
   14c22:	4798      	blx	r3
            break;
   14c24:	e062      	b.n	14cec <http_client_callback+0x104>

        case HTTP_CLIENT_CALLBACK_RECV_RESPONSE:
            LogMessage(LOG_DEBUG_LVL, "http_client_callback: received response %u data size %u\r\n", (unsigned int)data->recv_response.response_code, (unsigned int)data->recv_response.content_length);
   14c26:	687b      	ldr	r3, [r7, #4]
   14c28:	881b      	ldrh	r3, [r3, #0]
   14c2a:	001a      	movs	r2, r3
   14c2c:	687b      	ldr	r3, [r7, #4]
   14c2e:	685b      	ldr	r3, [r3, #4]
   14c30:	4935      	ldr	r1, [pc, #212]	; (14d08 <http_client_callback+0x120>)
   14c32:	2001      	movs	r0, #1
   14c34:	4c31      	ldr	r4, [pc, #196]	; (14cfc <http_client_callback+0x114>)
   14c36:	47a0      	blx	r4
            if ((unsigned int)data->recv_response.response_code == 200) {
   14c38:	687b      	ldr	r3, [r7, #4]
   14c3a:	881b      	ldrh	r3, [r3, #0]
   14c3c:	2bc8      	cmp	r3, #200	; 0xc8
   14c3e:	d10d      	bne.n	14c5c <http_client_callback+0x74>
                http_file_size = data->recv_response.content_length;
   14c40:	687b      	ldr	r3, [r7, #4]
   14c42:	685a      	ldr	r2, [r3, #4]
   14c44:	4b31      	ldr	r3, [pc, #196]	; (14d0c <http_client_callback+0x124>)
   14c46:	601a      	str	r2, [r3, #0]
                received_file_size = 0;
   14c48:	4b31      	ldr	r3, [pc, #196]	; (14d10 <http_client_callback+0x128>)
   14c4a:	2200      	movs	r2, #0
   14c4c:	601a      	str	r2, [r3, #0]
            } else {
                add_state(CANCELED);
                return;
            }
            if (data->recv_response.content_length <= MAIN_BUFFER_MAX_SIZE) {
   14c4e:	687b      	ldr	r3, [r7, #4]
   14c50:	685a      	ldr	r2, [r3, #4]
   14c52:	2380      	movs	r3, #128	; 0x80
   14c54:	009b      	lsls	r3, r3, #2
   14c56:	429a      	cmp	r2, r3
   14c58:	d843      	bhi.n	14ce2 <http_client_callback+0xfa>
   14c5a:	e003      	b.n	14c64 <http_client_callback+0x7c>
                add_state(CANCELED);
   14c5c:	2020      	movs	r0, #32
   14c5e:	4b29      	ldr	r3, [pc, #164]	; (14d04 <http_client_callback+0x11c>)
   14c60:	4798      	blx	r3
                return;
   14c62:	e043      	b.n	14cec <http_client_callback+0x104>
                store_file_packet(data->recv_response.content, data->recv_response.content_length);
   14c64:	687b      	ldr	r3, [r7, #4]
   14c66:	689a      	ldr	r2, [r3, #8]
   14c68:	687b      	ldr	r3, [r7, #4]
   14c6a:	685b      	ldr	r3, [r3, #4]
   14c6c:	0019      	movs	r1, r3
   14c6e:	0010      	movs	r0, r2
   14c70:	4b28      	ldr	r3, [pc, #160]	; (14d14 <http_client_callback+0x12c>)
   14c72:	4798      	blx	r3
                add_state(COMPLETED);
   14c74:	2010      	movs	r0, #16
   14c76:	4b23      	ldr	r3, [pc, #140]	; (14d04 <http_client_callback+0x11c>)
   14c78:	4798      	blx	r3
            }
            break;
   14c7a:	e032      	b.n	14ce2 <http_client_callback+0xfa>

        case HTTP_CLIENT_CALLBACK_RECV_CHUNKED_DATA:
            store_file_packet(data->recv_chunked_data.data, data->recv_chunked_data.length);
   14c7c:	687b      	ldr	r3, [r7, #4]
   14c7e:	685a      	ldr	r2, [r3, #4]
   14c80:	687b      	ldr	r3, [r7, #4]
   14c82:	681b      	ldr	r3, [r3, #0]
   14c84:	0019      	movs	r1, r3
   14c86:	0010      	movs	r0, r2
   14c88:	4b22      	ldr	r3, [pc, #136]	; (14d14 <http_client_callback+0x12c>)
   14c8a:	4798      	blx	r3
            if (data->recv_chunked_data.is_complete) {
   14c8c:	687b      	ldr	r3, [r7, #4]
   14c8e:	7a1b      	ldrb	r3, [r3, #8]
   14c90:	2b00      	cmp	r3, #0
   14c92:	d028      	beq.n	14ce6 <http_client_callback+0xfe>
                add_state(COMPLETED);
   14c94:	2010      	movs	r0, #16
   14c96:	4b1b      	ldr	r3, [pc, #108]	; (14d04 <http_client_callback+0x11c>)
   14c98:	4798      	blx	r3
            }

            break;
   14c9a:	e024      	b.n	14ce6 <http_client_callback+0xfe>

        case HTTP_CLIENT_CALLBACK_DISCONNECTED:
            LogMessage(LOG_DEBUG_LVL, "http_client_callback: disconnection reason:%d\r\n", data->disconnected.reason);
   14c9c:	687b      	ldr	r3, [r7, #4]
   14c9e:	681a      	ldr	r2, [r3, #0]
   14ca0:	4b1d      	ldr	r3, [pc, #116]	; (14d18 <http_client_callback+0x130>)
   14ca2:	0019      	movs	r1, r3
   14ca4:	2001      	movs	r0, #1
   14ca6:	4b15      	ldr	r3, [pc, #84]	; (14cfc <http_client_callback+0x114>)
   14ca8:	4798      	blx	r3

            /* If disconnect reason is equal to -ECONNRESET(-104),
             * It means the server has closed the connection (timeout).
             * This is normal operation.
             */
            if (data->disconnected.reason == -EAGAIN) {
   14caa:	687b      	ldr	r3, [r7, #4]
   14cac:	681b      	ldr	r3, [r3, #0]
   14cae:	330b      	adds	r3, #11
   14cb0:	d11b      	bne.n	14cea <http_client_callback+0x102>
                /* Server has not responded. Retry immediately. */
                if (is_state_set(DOWNLOADING)) {
   14cb2:	2008      	movs	r0, #8
   14cb4:	4b19      	ldr	r3, [pc, #100]	; (14d1c <http_client_callback+0x134>)
   14cb6:	4798      	blx	r3
   14cb8:	1e03      	subs	r3, r0, #0
   14cba:	d006      	beq.n	14cca <http_client_callback+0xe2>
                    f_close(&file_object);
   14cbc:	4b18      	ldr	r3, [pc, #96]	; (14d20 <http_client_callback+0x138>)
   14cbe:	0018      	movs	r0, r3
   14cc0:	4b18      	ldr	r3, [pc, #96]	; (14d24 <http_client_callback+0x13c>)
   14cc2:	4798      	blx	r3
                    clear_state(DOWNLOADING);
   14cc4:	2008      	movs	r0, #8
   14cc6:	4b18      	ldr	r3, [pc, #96]	; (14d28 <http_client_callback+0x140>)
   14cc8:	4798      	blx	r3
                }

                if (is_state_set(GET_REQUESTED)) {
   14cca:	2004      	movs	r0, #4
   14ccc:	4b13      	ldr	r3, [pc, #76]	; (14d1c <http_client_callback+0x134>)
   14cce:	4798      	blx	r3
   14cd0:	1e03      	subs	r3, r0, #0
   14cd2:	d002      	beq.n	14cda <http_client_callback+0xf2>
                    clear_state(GET_REQUESTED);
   14cd4:	2004      	movs	r0, #4
   14cd6:	4b14      	ldr	r3, [pc, #80]	; (14d28 <http_client_callback+0x140>)
   14cd8:	4798      	blx	r3
                }

                start_download();
   14cda:	4b14      	ldr	r3, [pc, #80]	; (14d2c <http_client_callback+0x144>)
   14cdc:	4798      	blx	r3
            }

            break;
   14cde:	46c0      	nop			; (mov r8, r8)
   14ce0:	e003      	b.n	14cea <http_client_callback+0x102>
            break;
   14ce2:	46c0      	nop			; (mov r8, r8)
   14ce4:	e002      	b.n	14cec <http_client_callback+0x104>
            break;
   14ce6:	46c0      	nop			; (mov r8, r8)
   14ce8:	e000      	b.n	14cec <http_client_callback+0x104>
            break;
   14cea:	46c0      	nop			; (mov r8, r8)
    }
}
   14cec:	46bd      	mov	sp, r7
   14cee:	b005      	add	sp, #20
   14cf0:	bd90      	pop	{r4, r7, pc}
   14cf2:	46c0      	nop			; (mov r8, r8)
   14cf4:	00035198 	.word	0x00035198
   14cf8:	00034acc 	.word	0x00034acc
   14cfc:	0001c605 	.word	0x0001c605
   14d00:	00034b04 	.word	0x00034b04
   14d04:	00014605 	.word	0x00014605
   14d08:	00034b30 	.word	0x00034b30
   14d0c:	20000714 	.word	0x20000714
   14d10:	20000718 	.word	0x20000718
   14d14:	00014a15 	.word	0x00014a15
   14d18:	00034b6c 	.word	0x00034b6c
   14d1c:	0001462d 	.word	0x0001462d
   14d20:	200006f0 	.word	0x200006f0
   14d24:	0002cb45 	.word	0x0002cb45
   14d28:	000145d1 	.word	0x000145d1
   14d2c:	00014955 	.word	0x00014955

00014d30 <socket_cb>:
 *  - tstrSocketAcceptMsg
 *  - tstrSocketConnectMsg
 *  - tstrSocketRecvMsg
 */
static void socket_cb(SOCKET sock, uint8_t u8Msg, void *pvMsg)
{
   14d30:	b580      	push	{r7, lr}
   14d32:	b082      	sub	sp, #8
   14d34:	af00      	add	r7, sp, #0
   14d36:	603a      	str	r2, [r7, #0]
   14d38:	1dfb      	adds	r3, r7, #7
   14d3a:	1c02      	adds	r2, r0, #0
   14d3c:	701a      	strb	r2, [r3, #0]
   14d3e:	1dbb      	adds	r3, r7, #6
   14d40:	1c0a      	adds	r2, r1, #0
   14d42:	701a      	strb	r2, [r3, #0]
    http_client_socket_event_handler(sock, u8Msg, pvMsg);
   14d44:	683a      	ldr	r2, [r7, #0]
   14d46:	1dbb      	adds	r3, r7, #6
   14d48:	7819      	ldrb	r1, [r3, #0]
   14d4a:	1dfb      	adds	r3, r7, #7
   14d4c:	781b      	ldrb	r3, [r3, #0]
   14d4e:	b25b      	sxtb	r3, r3
   14d50:	0018      	movs	r0, r3
   14d52:	4b03      	ldr	r3, [pc, #12]	; (14d60 <socket_cb+0x30>)
   14d54:	4798      	blx	r3
}
   14d56:	46c0      	nop			; (mov r8, r8)
   14d58:	46bd      	mov	sp, r7
   14d5a:	b002      	add	sp, #8
   14d5c:	bd80      	pop	{r7, pc}
   14d5e:	46c0      	nop			; (mov r8, r8)
   14d60:	0002f4a9 	.word	0x0002f4a9

00014d64 <resolve_cb>:
 * \brief Callback for the gethostbyname function (DNS Resolution callback).
 * \param[in] pu8DomainName Domain name of the host.
 * \param[in] u32ServerIP Server IPv4 address encoded in NW byte order format. If it is Zero, then the DNS resolution failed.
 */
static void resolve_cb(uint8_t *pu8DomainName, uint32_t u32ServerIP)
{
   14d64:	b5b0      	push	{r4, r5, r7, lr}
   14d66:	b086      	sub	sp, #24
   14d68:	af04      	add	r7, sp, #16
   14d6a:	6078      	str	r0, [r7, #4]
   14d6c:	6039      	str	r1, [r7, #0]
    LogMessage(LOG_DEBUG_LVL,
               "resolve_cb: %s IP address is %d.%d.%d.%d\r\n\r\n",
               pu8DomainName,
               (int)IPV4_BYTE(u32ServerIP, 0),
   14d6e:	683b      	ldr	r3, [r7, #0]
    LogMessage(LOG_DEBUG_LVL,
   14d70:	22ff      	movs	r2, #255	; 0xff
   14d72:	4013      	ands	r3, r2
   14d74:	001c      	movs	r4, r3
               (int)IPV4_BYTE(u32ServerIP, 1),
   14d76:	683b      	ldr	r3, [r7, #0]
   14d78:	0a1b      	lsrs	r3, r3, #8
   14d7a:	001a      	movs	r2, r3
    LogMessage(LOG_DEBUG_LVL,
   14d7c:	23ff      	movs	r3, #255	; 0xff
   14d7e:	4013      	ands	r3, r2
               (int)IPV4_BYTE(u32ServerIP, 2),
   14d80:	683a      	ldr	r2, [r7, #0]
   14d82:	0c12      	lsrs	r2, r2, #16
   14d84:	0011      	movs	r1, r2
    LogMessage(LOG_DEBUG_LVL,
   14d86:	22ff      	movs	r2, #255	; 0xff
   14d88:	400a      	ands	r2, r1
               (int)IPV4_BYTE(u32ServerIP, 3));
   14d8a:	6839      	ldr	r1, [r7, #0]
   14d8c:	0e09      	lsrs	r1, r1, #24
    LogMessage(LOG_DEBUG_LVL,
   14d8e:	000d      	movs	r5, r1
   14d90:	6878      	ldr	r0, [r7, #4]
   14d92:	4909      	ldr	r1, [pc, #36]	; (14db8 <resolve_cb+0x54>)
   14d94:	9502      	str	r5, [sp, #8]
   14d96:	9201      	str	r2, [sp, #4]
   14d98:	9300      	str	r3, [sp, #0]
   14d9a:	0023      	movs	r3, r4
   14d9c:	0002      	movs	r2, r0
   14d9e:	2001      	movs	r0, #1
   14da0:	4c06      	ldr	r4, [pc, #24]	; (14dbc <resolve_cb+0x58>)
   14da2:	47a0      	blx	r4
    http_client_socket_resolve_handler(pu8DomainName, u32ServerIP);
   14da4:	683a      	ldr	r2, [r7, #0]
   14da6:	687b      	ldr	r3, [r7, #4]
   14da8:	0011      	movs	r1, r2
   14daa:	0018      	movs	r0, r3
   14dac:	4b04      	ldr	r3, [pc, #16]	; (14dc0 <resolve_cb+0x5c>)
   14dae:	4798      	blx	r3
}
   14db0:	46c0      	nop			; (mov r8, r8)
   14db2:	46bd      	mov	sp, r7
   14db4:	b002      	add	sp, #8
   14db6:	bdb0      	pop	{r4, r5, r7, pc}
   14db8:	00034b9c 	.word	0x00034b9c
   14dbc:	0001c605 	.word	0x0001c605
   14dc0:	0002f60d 	.word	0x0002f60d

00014dc4 <wifi_cb>:
 *  - tstrM2MAPResp
 *  - tstrM2mScanDone
 *  - tstrM2mWifiscanResult
 */
static void wifi_cb(uint8_t u8MsgType, void *pvMsg)
{
   14dc4:	b590      	push	{r4, r7, lr}
   14dc6:	b087      	sub	sp, #28
   14dc8:	af02      	add	r7, sp, #8
   14dca:	0002      	movs	r2, r0
   14dcc:	6039      	str	r1, [r7, #0]
   14dce:	1dfb      	adds	r3, r7, #7
   14dd0:	701a      	strb	r2, [r3, #0]
    switch (u8MsgType) {
   14dd2:	1dfb      	adds	r3, r7, #7
   14dd4:	781b      	ldrb	r3, [r3, #0]
   14dd6:	2b2c      	cmp	r3, #44	; 0x2c
   14dd8:	d002      	beq.n	14de0 <wifi_cb+0x1c>
   14dda:	2b32      	cmp	r3, #50	; 0x32
   14ddc:	d03d      	beq.n	14e5a <wifi_cb+0x96>
                }
            }
        } break;

        default:
            break;
   14dde:	e06f      	b.n	14ec0 <wifi_cb+0xfc>
            tstrM2mWifiStateChanged *pstrWifiState = (tstrM2mWifiStateChanged *)pvMsg;
   14de0:	683b      	ldr	r3, [r7, #0]
   14de2:	60fb      	str	r3, [r7, #12]
            if (pstrWifiState->u8CurrState == M2M_WIFI_CONNECTED) {
   14de4:	68fb      	ldr	r3, [r7, #12]
   14de6:	781b      	ldrb	r3, [r3, #0]
   14de8:	2b01      	cmp	r3, #1
   14dea:	d107      	bne.n	14dfc <wifi_cb+0x38>
                LogMessage(LOG_DEBUG_LVL, "wifi_cb: M2M_WIFI_CONNECTED\r\n");
   14dec:	4b36      	ldr	r3, [pc, #216]	; (14ec8 <wifi_cb+0x104>)
   14dee:	0019      	movs	r1, r3
   14df0:	2001      	movs	r0, #1
   14df2:	4b36      	ldr	r3, [pc, #216]	; (14ecc <wifi_cb+0x108>)
   14df4:	4798      	blx	r3
                m2m_wifi_request_dhcp_client();
   14df6:	4b36      	ldr	r3, [pc, #216]	; (14ed0 <wifi_cb+0x10c>)
   14df8:	4798      	blx	r3
            break;
   14dfa:	e05e      	b.n	14eba <wifi_cb+0xf6>
            } else if (pstrWifiState->u8CurrState == M2M_WIFI_DISCONNECTED) {
   14dfc:	68fb      	ldr	r3, [r7, #12]
   14dfe:	781b      	ldrb	r3, [r3, #0]
   14e00:	2b00      	cmp	r3, #0
   14e02:	d15a      	bne.n	14eba <wifi_cb+0xf6>
                LogMessage(LOG_DEBUG_LVL, "wifi_cb: M2M_WIFI_DISCONNECTED\r\n");
   14e04:	4b33      	ldr	r3, [pc, #204]	; (14ed4 <wifi_cb+0x110>)
   14e06:	0019      	movs	r1, r3
   14e08:	2001      	movs	r0, #1
   14e0a:	4b30      	ldr	r3, [pc, #192]	; (14ecc <wifi_cb+0x108>)
   14e0c:	4798      	blx	r3
                clear_state(WIFI_CONNECTED);
   14e0e:	2002      	movs	r0, #2
   14e10:	4b31      	ldr	r3, [pc, #196]	; (14ed8 <wifi_cb+0x114>)
   14e12:	4798      	blx	r3
                if (is_state_set(DOWNLOADING)) {
   14e14:	2008      	movs	r0, #8
   14e16:	4b31      	ldr	r3, [pc, #196]	; (14edc <wifi_cb+0x118>)
   14e18:	4798      	blx	r3
   14e1a:	1e03      	subs	r3, r0, #0
   14e1c:	d006      	beq.n	14e2c <wifi_cb+0x68>
                    f_close(&file_object);
   14e1e:	4b30      	ldr	r3, [pc, #192]	; (14ee0 <wifi_cb+0x11c>)
   14e20:	0018      	movs	r0, r3
   14e22:	4b30      	ldr	r3, [pc, #192]	; (14ee4 <wifi_cb+0x120>)
   14e24:	4798      	blx	r3
                    clear_state(DOWNLOADING);
   14e26:	2008      	movs	r0, #8
   14e28:	4b2b      	ldr	r3, [pc, #172]	; (14ed8 <wifi_cb+0x114>)
   14e2a:	4798      	blx	r3
                if (is_state_set(GET_REQUESTED)) {
   14e2c:	2004      	movs	r0, #4
   14e2e:	4b2b      	ldr	r3, [pc, #172]	; (14edc <wifi_cb+0x118>)
   14e30:	4798      	blx	r3
   14e32:	1e03      	subs	r3, r0, #0
   14e34:	d002      	beq.n	14e3c <wifi_cb+0x78>
                    clear_state(GET_REQUESTED);
   14e36:	2004      	movs	r0, #4
   14e38:	4b27      	ldr	r3, [pc, #156]	; (14ed8 <wifi_cb+0x114>)
   14e3a:	4798      	blx	r3
                mqtt_disconnect(&mqtt_inst, 1);
   14e3c:	4b2a      	ldr	r3, [pc, #168]	; (14ee8 <wifi_cb+0x124>)
   14e3e:	2101      	movs	r1, #1
   14e40:	0018      	movs	r0, r3
   14e42:	4b2a      	ldr	r3, [pc, #168]	; (14eec <wifi_cb+0x128>)
   14e44:	4798      	blx	r3
                m2m_wifi_connect((char *)MAIN_WLAN_SSID, sizeof(MAIN_WLAN_SSID), MAIN_WLAN_AUTH, (char *)MAIN_WLAN_PSK, M2M_WIFI_CH_ALL);
   14e46:	4a2a      	ldr	r2, [pc, #168]	; (14ef0 <wifi_cb+0x12c>)
   14e48:	482a      	ldr	r0, [pc, #168]	; (14ef4 <wifi_cb+0x130>)
   14e4a:	23ff      	movs	r3, #255	; 0xff
   14e4c:	9300      	str	r3, [sp, #0]
   14e4e:	0013      	movs	r3, r2
   14e50:	2202      	movs	r2, #2
   14e52:	2108      	movs	r1, #8
   14e54:	4c28      	ldr	r4, [pc, #160]	; (14ef8 <wifi_cb+0x134>)
   14e56:	47a0      	blx	r4
            break;
   14e58:	e02f      	b.n	14eba <wifi_cb+0xf6>
            uint8_t *pu8IPAddress = (uint8_t *)pvMsg;
   14e5a:	683b      	ldr	r3, [r7, #0]
   14e5c:	60bb      	str	r3, [r7, #8]
            LogMessage(LOG_DEBUG_LVL, "wifi_cb: IP address is %u.%u.%u.%u\r\n", pu8IPAddress[0], pu8IPAddress[1], pu8IPAddress[2], pu8IPAddress[3]);
   14e5e:	68bb      	ldr	r3, [r7, #8]
   14e60:	781b      	ldrb	r3, [r3, #0]
   14e62:	0018      	movs	r0, r3
   14e64:	68bb      	ldr	r3, [r7, #8]
   14e66:	3301      	adds	r3, #1
   14e68:	781b      	ldrb	r3, [r3, #0]
   14e6a:	001c      	movs	r4, r3
   14e6c:	68bb      	ldr	r3, [r7, #8]
   14e6e:	3302      	adds	r3, #2
   14e70:	781b      	ldrb	r3, [r3, #0]
   14e72:	001a      	movs	r2, r3
   14e74:	68bb      	ldr	r3, [r7, #8]
   14e76:	3303      	adds	r3, #3
   14e78:	781b      	ldrb	r3, [r3, #0]
   14e7a:	4920      	ldr	r1, [pc, #128]	; (14efc <wifi_cb+0x138>)
   14e7c:	9301      	str	r3, [sp, #4]
   14e7e:	9200      	str	r2, [sp, #0]
   14e80:	0023      	movs	r3, r4
   14e82:	0002      	movs	r2, r0
   14e84:	2001      	movs	r0, #1
   14e86:	4c11      	ldr	r4, [pc, #68]	; (14ecc <wifi_cb+0x108>)
   14e88:	47a0      	blx	r4
            add_state(WIFI_CONNECTED);
   14e8a:	2002      	movs	r0, #2
   14e8c:	4b1c      	ldr	r3, [pc, #112]	; (14f00 <wifi_cb+0x13c>)
   14e8e:	4798      	blx	r3
            if (do_download_flag == 1) {
   14e90:	4b1c      	ldr	r3, [pc, #112]	; (14f04 <wifi_cb+0x140>)
   14e92:	781b      	ldrb	r3, [r3, #0]
   14e94:	2b01      	cmp	r3, #1
   14e96:	d102      	bne.n	14e9e <wifi_cb+0xda>
                start_download();
   14e98:	4b1b      	ldr	r3, [pc, #108]	; (14f08 <wifi_cb+0x144>)
   14e9a:	4798      	blx	r3
        } break;
   14e9c:	e00f      	b.n	14ebe <wifi_cb+0xfa>
                if (mqtt_connect(&mqtt_inst, main_mqtt_broker)) {
   14e9e:	4a1b      	ldr	r2, [pc, #108]	; (14f0c <wifi_cb+0x148>)
   14ea0:	4b11      	ldr	r3, [pc, #68]	; (14ee8 <wifi_cb+0x124>)
   14ea2:	0011      	movs	r1, r2
   14ea4:	0018      	movs	r0, r3
   14ea6:	4b1a      	ldr	r3, [pc, #104]	; (14f10 <wifi_cb+0x14c>)
   14ea8:	4798      	blx	r3
   14eaa:	1e03      	subs	r3, r0, #0
   14eac:	d007      	beq.n	14ebe <wifi_cb+0xfa>
                    LogMessage(LOG_DEBUG_LVL, "Error connecting to MQTT Broker!\r\n");
   14eae:	4b19      	ldr	r3, [pc, #100]	; (14f14 <wifi_cb+0x150>)
   14eb0:	0019      	movs	r1, r3
   14eb2:	2001      	movs	r0, #1
   14eb4:	4b05      	ldr	r3, [pc, #20]	; (14ecc <wifi_cb+0x108>)
   14eb6:	4798      	blx	r3
        } break;
   14eb8:	e001      	b.n	14ebe <wifi_cb+0xfa>
            break;
   14eba:	46c0      	nop			; (mov r8, r8)
   14ebc:	e000      	b.n	14ec0 <wifi_cb+0xfc>
        } break;
   14ebe:	46c0      	nop			; (mov r8, r8)
    }
}
   14ec0:	46c0      	nop			; (mov r8, r8)
   14ec2:	46bd      	mov	sp, r7
   14ec4:	b005      	add	sp, #20
   14ec6:	bd90      	pop	{r4, r7, pc}
   14ec8:	00034bcc 	.word	0x00034bcc
   14ecc:	0001c605 	.word	0x0001c605
   14ed0:	00020c79 	.word	0x00020c79
   14ed4:	00034bec 	.word	0x00034bec
   14ed8:	000145d1 	.word	0x000145d1
   14edc:	0001462d 	.word	0x0001462d
   14ee0:	200006f0 	.word	0x200006f0
   14ee4:	0002cb45 	.word	0x0002cb45
   14ee8:	2000071c 	.word	0x2000071c
   14eec:	0002e155 	.word	0x0002e155
   14ef0:	00034c10 	.word	0x00034c10
   14ef4:	00034c1c 	.word	0x00034c1c
   14ef8:	000207a5 	.word	0x000207a5
   14efc:	00034c24 	.word	0x00034c24
   14f00:	00014605 	.word	0x00014605
   14f04:	200004bc 	.word	0x200004bc
   14f08:	00014955 	.word	0x00014955
   14f0c:	00034854 	.word	0x00034854
   14f10:	0002e021 	.word	0x0002e021
   14f14:	00034c4c 	.word	0x00034c4c

00014f18 <init_storage>:

/**
 * \brief Initialize SD/MMC storage.
 */
void init_storage(void)
{
   14f18:	b590      	push	{r4, r7, lr}
   14f1a:	b083      	sub	sp, #12
   14f1c:	af00      	add	r7, sp, #0
    FRESULT res;
    Ctrl_status status;

    /* Initialize SD/MMC stack. */
    sd_mmc_init();
   14f1e:	4b29      	ldr	r3, [pc, #164]	; (14fc4 <init_storage+0xac>)
   14f20:	4798      	blx	r3
    while (true) {
        LogMessage(LOG_DEBUG_LVL, "init_storage: please plug an SD/MMC card in slot...\r\n");
   14f22:	4b29      	ldr	r3, [pc, #164]	; (14fc8 <init_storage+0xb0>)
   14f24:	0019      	movs	r1, r3
   14f26:	2001      	movs	r0, #1
   14f28:	4b28      	ldr	r3, [pc, #160]	; (14fcc <init_storage+0xb4>)
   14f2a:	4798      	blx	r3

        /* Wait card present and ready. */
        do {
            status = sd_mmc_test_unit_ready(0);
   14f2c:	1dfc      	adds	r4, r7, #7
   14f2e:	2000      	movs	r0, #0
   14f30:	4b27      	ldr	r3, [pc, #156]	; (14fd0 <init_storage+0xb8>)
   14f32:	4798      	blx	r3
   14f34:	0003      	movs	r3, r0
   14f36:	7023      	strb	r3, [r4, #0]
            if (CTRL_FAIL == status) {
   14f38:	1dfb      	adds	r3, r7, #7
   14f3a:	781b      	ldrb	r3, [r3, #0]
   14f3c:	2b01      	cmp	r3, #1
   14f3e:	d110      	bne.n	14f62 <init_storage+0x4a>
                LogMessage(LOG_DEBUG_LVL, "init_storage: SD Card install failed.\r\n");
   14f40:	4b24      	ldr	r3, [pc, #144]	; (14fd4 <init_storage+0xbc>)
   14f42:	0019      	movs	r1, r3
   14f44:	2001      	movs	r0, #1
   14f46:	4b21      	ldr	r3, [pc, #132]	; (14fcc <init_storage+0xb4>)
   14f48:	4798      	blx	r3
                LogMessage(LOG_DEBUG_LVL, "init_storage: try unplug and re-plug the card.\r\n");
   14f4a:	4b23      	ldr	r3, [pc, #140]	; (14fd8 <init_storage+0xc0>)
   14f4c:	0019      	movs	r1, r3
   14f4e:	2001      	movs	r0, #1
   14f50:	4b1e      	ldr	r3, [pc, #120]	; (14fcc <init_storage+0xb4>)
   14f52:	4798      	blx	r3
                while (CTRL_NO_PRESENT != sd_mmc_check(0)) {
   14f54:	46c0      	nop			; (mov r8, r8)
   14f56:	2000      	movs	r0, #0
   14f58:	4b20      	ldr	r3, [pc, #128]	; (14fdc <init_storage+0xc4>)
   14f5a:	4798      	blx	r3
   14f5c:	0003      	movs	r3, r0
   14f5e:	2b02      	cmp	r3, #2
   14f60:	d1f9      	bne.n	14f56 <init_storage+0x3e>
                }
            }
        } while (CTRL_GOOD != status);
   14f62:	1dfb      	adds	r3, r7, #7
   14f64:	781b      	ldrb	r3, [r3, #0]
   14f66:	2b00      	cmp	r3, #0
   14f68:	d1e0      	bne.n	14f2c <init_storage+0x14>

        LogMessage(LOG_DEBUG_LVL, "init_storage: mounting SD card...\r\n");
   14f6a:	4b1d      	ldr	r3, [pc, #116]	; (14fe0 <init_storage+0xc8>)
   14f6c:	0019      	movs	r1, r3
   14f6e:	2001      	movs	r0, #1
   14f70:	4b16      	ldr	r3, [pc, #88]	; (14fcc <init_storage+0xb4>)
   14f72:	4798      	blx	r3
        memset(&fatfs, 0, sizeof(FATFS));
   14f74:	238c      	movs	r3, #140	; 0x8c
   14f76:	009a      	lsls	r2, r3, #2
   14f78:	4b1a      	ldr	r3, [pc, #104]	; (14fe4 <init_storage+0xcc>)
   14f7a:	2100      	movs	r1, #0
   14f7c:	0018      	movs	r0, r3
   14f7e:	4b1a      	ldr	r3, [pc, #104]	; (14fe8 <init_storage+0xd0>)
   14f80:	4798      	blx	r3
        res = f_mount(LUN_ID_SD_MMC_0_MEM, &fatfs);
   14f82:	1dbc      	adds	r4, r7, #6
   14f84:	4b17      	ldr	r3, [pc, #92]	; (14fe4 <init_storage+0xcc>)
   14f86:	0019      	movs	r1, r3
   14f88:	2000      	movs	r0, #0
   14f8a:	4b18      	ldr	r3, [pc, #96]	; (14fec <init_storage+0xd4>)
   14f8c:	4798      	blx	r3
   14f8e:	0003      	movs	r3, r0
   14f90:	7023      	strb	r3, [r4, #0]
        if (FR_INVALID_DRIVE == res) {
   14f92:	1dbb      	adds	r3, r7, #6
   14f94:	781b      	ldrb	r3, [r3, #0]
   14f96:	2b0b      	cmp	r3, #11
   14f98:	d107      	bne.n	14faa <init_storage+0x92>
            LogMessage(LOG_DEBUG_LVL, "init_storage: SD card mount failed! (res %d)\r\n", res);
   14f9a:	1dbb      	adds	r3, r7, #6
   14f9c:	781a      	ldrb	r2, [r3, #0]
   14f9e:	4b14      	ldr	r3, [pc, #80]	; (14ff0 <init_storage+0xd8>)
   14fa0:	0019      	movs	r1, r3
   14fa2:	2001      	movs	r0, #1
   14fa4:	4b09      	ldr	r3, [pc, #36]	; (14fcc <init_storage+0xb4>)
   14fa6:	4798      	blx	r3
            return;
   14fa8:	e008      	b.n	14fbc <init_storage+0xa4>
        }

        LogMessage(LOG_DEBUG_LVL, "init_storage: SD card mount OK.\r\n");
   14faa:	4b12      	ldr	r3, [pc, #72]	; (14ff4 <init_storage+0xdc>)
   14fac:	0019      	movs	r1, r3
   14fae:	2001      	movs	r0, #1
   14fb0:	4b06      	ldr	r3, [pc, #24]	; (14fcc <init_storage+0xb4>)
   14fb2:	4798      	blx	r3
        add_state(STORAGE_READY);
   14fb4:	2001      	movs	r0, #1
   14fb6:	4b10      	ldr	r3, [pc, #64]	; (14ff8 <init_storage+0xe0>)
   14fb8:	4798      	blx	r3
        return;
   14fba:	46c0      	nop			; (mov r8, r8)
    }
}
   14fbc:	46bd      	mov	sp, r7
   14fbe:	b003      	add	sp, #12
   14fc0:	bd90      	pop	{r4, r7, pc}
   14fc2:	46c0      	nop			; (mov r8, r8)
   14fc4:	0001d41d 	.word	0x0001d41d
   14fc8:	00034c70 	.word	0x00034c70
   14fcc:	0001c605 	.word	0x0001c605
   14fd0:	0001d8f9 	.word	0x0001d8f9
   14fd4:	00034ca8 	.word	0x00034ca8
   14fd8:	00034cd0 	.word	0x00034cd0
   14fdc:	0001d46d 	.word	0x0001d46d
   14fe0:	00034d04 	.word	0x00034d04
   14fe4:	200004c0 	.word	0x200004c0
   14fe8:	00033117 	.word	0x00033117
   14fec:	0002c0ed 	.word	0x0002c0ed
   14ff0:	00034d28 	.word	0x00034d28
   14ff4:	00034d58 	.word	0x00034d58
   14ff8:	00014605 	.word	0x00014605

00014ffc <configure_timer>:

/**
 * \brief Configure Timer module.
 */
static void configure_timer(void)
{
   14ffc:	b580      	push	{r7, lr}
   14ffe:	b082      	sub	sp, #8
   15000:	af00      	add	r7, sp, #0
    struct sw_timer_config swt_conf;
    sw_timer_get_config_defaults(&swt_conf);
   15002:	1d3b      	adds	r3, r7, #4
   15004:	0018      	movs	r0, r3
   15006:	4b08      	ldr	r3, [pc, #32]	; (15028 <configure_timer+0x2c>)
   15008:	4798      	blx	r3

    sw_timer_init(&swt_module_inst, &swt_conf);
   1500a:	1d3a      	adds	r2, r7, #4
   1500c:	4b07      	ldr	r3, [pc, #28]	; (1502c <configure_timer+0x30>)
   1500e:	0011      	movs	r1, r2
   15010:	0018      	movs	r0, r3
   15012:	4b07      	ldr	r3, [pc, #28]	; (15030 <configure_timer+0x34>)
   15014:	4798      	blx	r3
    sw_timer_enable(&swt_module_inst);
   15016:	4b05      	ldr	r3, [pc, #20]	; (1502c <configure_timer+0x30>)
   15018:	0018      	movs	r0, r3
   1501a:	4b06      	ldr	r3, [pc, #24]	; (15034 <configure_timer+0x38>)
   1501c:	4798      	blx	r3
}
   1501e:	46c0      	nop			; (mov r8, r8)
   15020:	46bd      	mov	sp, r7
   15022:	b002      	add	sp, #8
   15024:	bd80      	pop	{r7, pc}
   15026:	46c0      	nop			; (mov r8, r8)
   15028:	00030c3d 	.word	0x00030c3d
   1502c:	20004350 	.word	0x20004350
   15030:	00030c61 	.word	0x00030c61
   15034:	00030d4d 	.word	0x00030d4d

00015038 <configure_http_client>:

/**
 * \brief Configure HTTP client module.
 */
static void configure_http_client(void)
{
   15038:	b580      	push	{r7, lr}
   1503a:	b088      	sub	sp, #32
   1503c:	af00      	add	r7, sp, #0
    struct http_client_config httpc_conf;
    int ret;

    http_client_get_config_defaults(&httpc_conf);
   1503e:	003b      	movs	r3, r7
   15040:	0018      	movs	r0, r3
   15042:	4b15      	ldr	r3, [pc, #84]	; (15098 <configure_http_client+0x60>)
   15044:	4798      	blx	r3

    httpc_conf.recv_buffer_size = MAIN_BUFFER_MAX_SIZE;
   15046:	003b      	movs	r3, r7
   15048:	2280      	movs	r2, #128	; 0x80
   1504a:	0092      	lsls	r2, r2, #2
   1504c:	611a      	str	r2, [r3, #16]
    httpc_conf.timer_inst = &swt_module_inst;
   1504e:	003b      	movs	r3, r7
   15050:	4a12      	ldr	r2, [pc, #72]	; (1509c <configure_http_client+0x64>)
   15052:	605a      	str	r2, [r3, #4]
    httpc_conf.port = 80;
   15054:	003b      	movs	r3, r7
   15056:	2250      	movs	r2, #80	; 0x50
   15058:	801a      	strh	r2, [r3, #0]
    httpc_conf.tls = 0;
   1505a:	003b      	movs	r3, r7
   1505c:	2200      	movs	r2, #0
   1505e:	709a      	strb	r2, [r3, #2]

    ret = http_client_init(&http_client_module_inst, &httpc_conf);
   15060:	003a      	movs	r2, r7
   15062:	4b0f      	ldr	r3, [pc, #60]	; (150a0 <configure_http_client+0x68>)
   15064:	0011      	movs	r1, r2
   15066:	0018      	movs	r0, r3
   15068:	4b0e      	ldr	r3, [pc, #56]	; (150a4 <configure_http_client+0x6c>)
   1506a:	4798      	blx	r3
   1506c:	0003      	movs	r3, r0
   1506e:	61fb      	str	r3, [r7, #28]
    if (ret < 0) {
   15070:	69fb      	ldr	r3, [r7, #28]
   15072:	2b00      	cmp	r3, #0
   15074:	da06      	bge.n	15084 <configure_http_client+0x4c>
        LogMessage(LOG_DEBUG_LVL, "configure_http_client: HTTP client initialization failed! (res %d)\r\n", ret);
   15076:	69fa      	ldr	r2, [r7, #28]
   15078:	4b0b      	ldr	r3, [pc, #44]	; (150a8 <configure_http_client+0x70>)
   1507a:	0019      	movs	r1, r3
   1507c:	2001      	movs	r0, #1
   1507e:	4b0b      	ldr	r3, [pc, #44]	; (150ac <configure_http_client+0x74>)
   15080:	4798      	blx	r3
        while (1) {
   15082:	e7fe      	b.n	15082 <configure_http_client+0x4a>
        } /* Loop forever. */
    }

    http_client_register_callback(&http_client_module_inst, http_client_callback);
   15084:	4a0a      	ldr	r2, [pc, #40]	; (150b0 <configure_http_client+0x78>)
   15086:	4b06      	ldr	r3, [pc, #24]	; (150a0 <configure_http_client+0x68>)
   15088:	0011      	movs	r1, r2
   1508a:	0018      	movs	r0, r3
   1508c:	4b09      	ldr	r3, [pc, #36]	; (150b4 <configure_http_client+0x7c>)
   1508e:	4798      	blx	r3
}
   15090:	46c0      	nop			; (mov r8, r8)
   15092:	46bd      	mov	sp, r7
   15094:	b008      	add	sp, #32
   15096:	bd80      	pop	{r7, pc}
   15098:	0002f2d1 	.word	0x0002f2d1
   1509c:	20004350 	.word	0x20004350
   150a0:	200043a8 	.word	0x200043a8
   150a4:	0002f31d 	.word	0x0002f31d
   150a8:	00034d7c 	.word	0x00034d7c
   150ac:	0001c605 	.word	0x0001c605
   150b0:	00014be9 	.word	0x00014be9
   150b4:	0002f409 	.word	0x0002f409

000150b8 <socket_event_handler>:
 *  - [SOCKET_MSG_SENDTO](@ref SOCKET_MSG_SENDTO)
 *  - [SOCKET_MSG_RECVFROM](@ref SOCKET_MSG_RECVFROM)
 * \param[in] msg_data A structure contains notification informations.
 */
static void socket_event_handler(SOCKET sock, uint8_t msg_type, void *msg_data)
{
   150b8:	b580      	push	{r7, lr}
   150ba:	b082      	sub	sp, #8
   150bc:	af00      	add	r7, sp, #0
   150be:	603a      	str	r2, [r7, #0]
   150c0:	1dfb      	adds	r3, r7, #7
   150c2:	1c02      	adds	r2, r0, #0
   150c4:	701a      	strb	r2, [r3, #0]
   150c6:	1dbb      	adds	r3, r7, #6
   150c8:	1c0a      	adds	r2, r1, #0
   150ca:	701a      	strb	r2, [r3, #0]
    mqtt_socket_event_handler(sock, msg_type, msg_data);
   150cc:	683a      	ldr	r2, [r7, #0]
   150ce:	1dbb      	adds	r3, r7, #6
   150d0:	7819      	ldrb	r1, [r3, #0]
   150d2:	1dfb      	adds	r3, r7, #7
   150d4:	781b      	ldrb	r3, [r3, #0]
   150d6:	b25b      	sxtb	r3, r3
   150d8:	0018      	movs	r0, r3
   150da:	4b03      	ldr	r3, [pc, #12]	; (150e8 <socket_event_handler+0x30>)
   150dc:	4798      	blx	r3
}
   150de:	46c0      	nop			; (mov r8, r8)
   150e0:	46bd      	mov	sp, r7
   150e2:	b002      	add	sp, #8
   150e4:	bd80      	pop	{r7, pc}
   150e6:	46c0      	nop			; (mov r8, r8)
   150e8:	0002dfc9 	.word	0x0002dfc9

000150ec <socket_resolve_handler>:
 *
 * \param[in] doamin_name Domain name.
 * \param[in] server_ip IP of server.
 */
static void socket_resolve_handler(uint8_t *doamin_name, uint32_t server_ip)
{
   150ec:	b580      	push	{r7, lr}
   150ee:	b082      	sub	sp, #8
   150f0:	af00      	add	r7, sp, #0
   150f2:	6078      	str	r0, [r7, #4]
   150f4:	6039      	str	r1, [r7, #0]
    mqtt_socket_resolve_handler(doamin_name, server_ip);
   150f6:	683a      	ldr	r2, [r7, #0]
   150f8:	687b      	ldr	r3, [r7, #4]
   150fa:	0011      	movs	r1, r2
   150fc:	0018      	movs	r0, r3
   150fe:	4b03      	ldr	r3, [pc, #12]	; (1510c <socket_resolve_handler+0x20>)
   15100:	4798      	blx	r3
}
   15102:	46c0      	nop			; (mov r8, r8)
   15104:	46bd      	mov	sp, r7
   15106:	b002      	add	sp, #8
   15108:	bd80      	pop	{r7, pc}
   1510a:	46c0      	nop			; (mov r8, r8)
   1510c:	0002dffd 	.word	0x0002dffd

00015110 <SubscribeHandlerLedTopic>:
 *
 * \param[in] msgData Data to be received.
 */

void SubscribeHandlerLedTopic(MessageData *msgData)
{
   15110:	b580      	push	{r7, lr}
   15112:	b082      	sub	sp, #8
   15114:	af00      	add	r7, sp, #0
   15116:	6078      	str	r0, [r7, #4]
    //         if (*p != ',') break;
    //         p++; /* skip, */
    //     }
    //     LogMessage(LOG_DEBUG_LVL, "\r\nRGB %d %d %d\r\n", rgb[0], rgb[1], rgb[2]);
    // }
    port_pin_toggle_output_level(LED_0_PIN);
   15118:	2017      	movs	r0, #23
   1511a:	4b03      	ldr	r3, [pc, #12]	; (15128 <SubscribeHandlerLedTopic+0x18>)
   1511c:	4798      	blx	r3
}
   1511e:	46c0      	nop			; (mov r8, r8)
   15120:	46bd      	mov	sp, r7
   15122:	b002      	add	sp, #8
   15124:	bd80      	pop	{r7, pc}
   15126:	46c0      	nop			; (mov r8, r8)
   15128:	00014581 	.word	0x00014581

0001512c <SubscribeHandlerGameTopic>:

void SubscribeHandlerGameTopic(MessageData *msgData)
{
   1512c:	b590      	push	{r4, r7, lr}
   1512e:	b08b      	sub	sp, #44	; 0x2c
   15130:	af00      	add	r7, sp, #0
   15132:	6078      	str	r0, [r7, #4]
    struct GameDataPacket game;
    memset(game.game, 0xff, sizeof(game.game));
   15134:	230c      	movs	r3, #12
   15136:	18fb      	adds	r3, r7, r3
   15138:	2214      	movs	r2, #20
   1513a:	21ff      	movs	r1, #255	; 0xff
   1513c:	0018      	movs	r0, r3
   1513e:	4b41      	ldr	r3, [pc, #260]	; (15244 <SubscribeHandlerGameTopic+0x118>)
   15140:	4798      	blx	r3

    // Parse input. The start string must be '{"game":['
    if (strncmp(msgData->message->payload, "{\"game\":[", 9) == 0) {
   15142:	687b      	ldr	r3, [r7, #4]
   15144:	681b      	ldr	r3, [r3, #0]
   15146:	689b      	ldr	r3, [r3, #8]
   15148:	493f      	ldr	r1, [pc, #252]	; (15248 <SubscribeHandlerGameTopic+0x11c>)
   1514a:	2209      	movs	r2, #9
   1514c:	0018      	movs	r0, r3
   1514e:	4b3f      	ldr	r3, [pc, #252]	; (1524c <SubscribeHandlerGameTopic+0x120>)
   15150:	4798      	blx	r3
   15152:	1e03      	subs	r3, r0, #0
   15154:	d159      	bne.n	1520a <SubscribeHandlerGameTopic+0xde>
        LogMessage(LOG_DEBUG_LVL, "\r\nGame message received!\r\n");
   15156:	4b3e      	ldr	r3, [pc, #248]	; (15250 <SubscribeHandlerGameTopic+0x124>)
   15158:	0019      	movs	r1, r3
   1515a:	2001      	movs	r0, #1
   1515c:	4b3d      	ldr	r3, [pc, #244]	; (15254 <SubscribeHandlerGameTopic+0x128>)
   1515e:	4798      	blx	r3
        LogMessage(LOG_DEBUG_LVL, "\r\n %.*s", msgData->topicName->lenstring.len, msgData->topicName->lenstring.data);
   15160:	687b      	ldr	r3, [r7, #4]
   15162:	685b      	ldr	r3, [r3, #4]
   15164:	685a      	ldr	r2, [r3, #4]
   15166:	687b      	ldr	r3, [r7, #4]
   15168:	685b      	ldr	r3, [r3, #4]
   1516a:	689b      	ldr	r3, [r3, #8]
   1516c:	493a      	ldr	r1, [pc, #232]	; (15258 <SubscribeHandlerGameTopic+0x12c>)
   1516e:	2001      	movs	r0, #1
   15170:	4c38      	ldr	r4, [pc, #224]	; (15254 <SubscribeHandlerGameTopic+0x128>)
   15172:	47a0      	blx	r4
        LogMessage(LOG_DEBUG_LVL, "%.*s", msgData->message->payloadlen, (char *)msgData->message->payload);
   15174:	687b      	ldr	r3, [r7, #4]
   15176:	681b      	ldr	r3, [r3, #0]
   15178:	68da      	ldr	r2, [r3, #12]
   1517a:	687b      	ldr	r3, [r7, #4]
   1517c:	681b      	ldr	r3, [r3, #0]
   1517e:	689b      	ldr	r3, [r3, #8]
   15180:	4936      	ldr	r1, [pc, #216]	; (1525c <SubscribeHandlerGameTopic+0x130>)
   15182:	2001      	movs	r0, #1
   15184:	4c33      	ldr	r4, [pc, #204]	; (15254 <SubscribeHandlerGameTopic+0x128>)
   15186:	47a0      	blx	r4

        int nb = 0;
   15188:	2300      	movs	r3, #0
   1518a:	627b      	str	r3, [r7, #36]	; 0x24
        char *p = &msgData->message->payload[9];
   1518c:	687b      	ldr	r3, [r7, #4]
   1518e:	681b      	ldr	r3, [r3, #0]
   15190:	689b      	ldr	r3, [r3, #8]
   15192:	3309      	adds	r3, #9
   15194:	60bb      	str	r3, [r7, #8]
        while (nb < GAME_SIZE && *p) {
   15196:	e015      	b.n	151c4 <SubscribeHandlerGameTopic+0x98>
            game.game[nb++] = strtol(p, &p, 10);
   15198:	6a7c      	ldr	r4, [r7, #36]	; 0x24
   1519a:	1c63      	adds	r3, r4, #1
   1519c:	627b      	str	r3, [r7, #36]	; 0x24
   1519e:	68bb      	ldr	r3, [r7, #8]
   151a0:	2208      	movs	r2, #8
   151a2:	18b9      	adds	r1, r7, r2
   151a4:	220a      	movs	r2, #10
   151a6:	0018      	movs	r0, r3
   151a8:	4b2d      	ldr	r3, [pc, #180]	; (15260 <SubscribeHandlerGameTopic+0x134>)
   151aa:	4798      	blx	r3
   151ac:	0003      	movs	r3, r0
   151ae:	b2da      	uxtb	r2, r3
   151b0:	230c      	movs	r3, #12
   151b2:	18fb      	adds	r3, r7, r3
   151b4:	551a      	strb	r2, [r3, r4]
            if (*p != ',') break;
   151b6:	68bb      	ldr	r3, [r7, #8]
   151b8:	781b      	ldrb	r3, [r3, #0]
   151ba:	2b2c      	cmp	r3, #44	; 0x2c
   151bc:	d10a      	bne.n	151d4 <SubscribeHandlerGameTopic+0xa8>
            p++; /* skip, */
   151be:	68bb      	ldr	r3, [r7, #8]
   151c0:	3301      	adds	r3, #1
   151c2:	60bb      	str	r3, [r7, #8]
        while (nb < GAME_SIZE && *p) {
   151c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   151c6:	2b13      	cmp	r3, #19
   151c8:	dc05      	bgt.n	151d6 <SubscribeHandlerGameTopic+0xaa>
   151ca:	68bb      	ldr	r3, [r7, #8]
   151cc:	781b      	ldrb	r3, [r3, #0]
   151ce:	2b00      	cmp	r3, #0
   151d0:	d1e2      	bne.n	15198 <SubscribeHandlerGameTopic+0x6c>
   151d2:	e000      	b.n	151d6 <SubscribeHandlerGameTopic+0xaa>
            if (*p != ',') break;
   151d4:	46c0      	nop			; (mov r8, r8)
        }
        LogMessage(LOG_DEBUG_LVL, "\r\nParsed Command: ");
   151d6:	4b23      	ldr	r3, [pc, #140]	; (15264 <SubscribeHandlerGameTopic+0x138>)
   151d8:	0019      	movs	r1, r3
   151da:	2001      	movs	r0, #1
   151dc:	4b1d      	ldr	r3, [pc, #116]	; (15254 <SubscribeHandlerGameTopic+0x128>)
   151de:	4798      	blx	r3
        for (int i = 0; i < GAME_SIZE; i++) {
   151e0:	2300      	movs	r3, #0
   151e2:	623b      	str	r3, [r7, #32]
   151e4:	e00d      	b.n	15202 <SubscribeHandlerGameTopic+0xd6>
            LogMessage(LOG_DEBUG_LVL, "%d,", game.game[i]);
   151e6:	230c      	movs	r3, #12
   151e8:	18fa      	adds	r2, r7, r3
   151ea:	6a3b      	ldr	r3, [r7, #32]
   151ec:	18d3      	adds	r3, r2, r3
   151ee:	781b      	ldrb	r3, [r3, #0]
   151f0:	001a      	movs	r2, r3
   151f2:	4b1d      	ldr	r3, [pc, #116]	; (15268 <SubscribeHandlerGameTopic+0x13c>)
   151f4:	0019      	movs	r1, r3
   151f6:	2001      	movs	r0, #1
   151f8:	4b16      	ldr	r3, [pc, #88]	; (15254 <SubscribeHandlerGameTopic+0x128>)
   151fa:	4798      	blx	r3
        for (int i = 0; i < GAME_SIZE; i++) {
   151fc:	6a3b      	ldr	r3, [r7, #32]
   151fe:	3301      	adds	r3, #1
   15200:	623b      	str	r3, [r7, #32]
   15202:	6a3b      	ldr	r3, [r7, #32]
   15204:	2b13      	cmp	r3, #19
   15206:	ddee      	ble.n	151e6 <SubscribeHandlerGameTopic+0xba>
    } else {
        LogMessage(LOG_DEBUG_LVL, "\r\nGame message received but not understood!\r\n");
        LogMessage(LOG_DEBUG_LVL, "\r\n %.*s", msgData->topicName->lenstring.len, msgData->topicName->lenstring.data);
        LogMessage(LOG_DEBUG_LVL, "%.*s", msgData->message->payloadlen, (char *)msgData->message->payload);
    }
}
   15208:	e018      	b.n	1523c <SubscribeHandlerGameTopic+0x110>
        LogMessage(LOG_DEBUG_LVL, "\r\nGame message received but not understood!\r\n");
   1520a:	4b18      	ldr	r3, [pc, #96]	; (1526c <SubscribeHandlerGameTopic+0x140>)
   1520c:	0019      	movs	r1, r3
   1520e:	2001      	movs	r0, #1
   15210:	4b10      	ldr	r3, [pc, #64]	; (15254 <SubscribeHandlerGameTopic+0x128>)
   15212:	4798      	blx	r3
        LogMessage(LOG_DEBUG_LVL, "\r\n %.*s", msgData->topicName->lenstring.len, msgData->topicName->lenstring.data);
   15214:	687b      	ldr	r3, [r7, #4]
   15216:	685b      	ldr	r3, [r3, #4]
   15218:	685a      	ldr	r2, [r3, #4]
   1521a:	687b      	ldr	r3, [r7, #4]
   1521c:	685b      	ldr	r3, [r3, #4]
   1521e:	689b      	ldr	r3, [r3, #8]
   15220:	490d      	ldr	r1, [pc, #52]	; (15258 <SubscribeHandlerGameTopic+0x12c>)
   15222:	2001      	movs	r0, #1
   15224:	4c0b      	ldr	r4, [pc, #44]	; (15254 <SubscribeHandlerGameTopic+0x128>)
   15226:	47a0      	blx	r4
        LogMessage(LOG_DEBUG_LVL, "%.*s", msgData->message->payloadlen, (char *)msgData->message->payload);
   15228:	687b      	ldr	r3, [r7, #4]
   1522a:	681b      	ldr	r3, [r3, #0]
   1522c:	68da      	ldr	r2, [r3, #12]
   1522e:	687b      	ldr	r3, [r7, #4]
   15230:	681b      	ldr	r3, [r3, #0]
   15232:	689b      	ldr	r3, [r3, #8]
   15234:	4909      	ldr	r1, [pc, #36]	; (1525c <SubscribeHandlerGameTopic+0x130>)
   15236:	2001      	movs	r0, #1
   15238:	4c06      	ldr	r4, [pc, #24]	; (15254 <SubscribeHandlerGameTopic+0x128>)
   1523a:	47a0      	blx	r4
}
   1523c:	46c0      	nop			; (mov r8, r8)
   1523e:	46bd      	mov	sp, r7
   15240:	b00b      	add	sp, #44	; 0x2c
   15242:	bd90      	pop	{r4, r7, pc}
   15244:	00033117 	.word	0x00033117
   15248:	00034dc4 	.word	0x00034dc4
   1524c:	000334dd 	.word	0x000334dd
   15250:	00034dd0 	.word	0x00034dd0
   15254:	0001c605 	.word	0x0001c605
   15258:	00034dec 	.word	0x00034dec
   1525c:	00034df4 	.word	0x00034df4
   15260:	00033689 	.word	0x00033689
   15264:	00034dfc 	.word	0x00034dfc
   15268:	00034e10 	.word	0x00034e10
   1526c:	00034e14 	.word	0x00034e14

00015270 <SubscribeHandlerImuTopic>:

void SubscribeHandlerImuTopic(MessageData *msgData)
{
   15270:	b590      	push	{r4, r7, lr}
   15272:	b083      	sub	sp, #12
   15274:	af00      	add	r7, sp, #0
   15276:	6078      	str	r0, [r7, #4]
    LogMessage(LOG_DEBUG_LVL, "\r\nIMU topic received!\r\n");
   15278:	4b09      	ldr	r3, [pc, #36]	; (152a0 <SubscribeHandlerImuTopic+0x30>)
   1527a:	0019      	movs	r1, r3
   1527c:	2001      	movs	r0, #1
   1527e:	4b09      	ldr	r3, [pc, #36]	; (152a4 <SubscribeHandlerImuTopic+0x34>)
   15280:	4798      	blx	r3
    LogMessage(LOG_DEBUG_LVL, "\r\n %.*s", msgData->topicName->lenstring.len, msgData->topicName->lenstring.data);
   15282:	687b      	ldr	r3, [r7, #4]
   15284:	685b      	ldr	r3, [r3, #4]
   15286:	685a      	ldr	r2, [r3, #4]
   15288:	687b      	ldr	r3, [r7, #4]
   1528a:	685b      	ldr	r3, [r3, #4]
   1528c:	689b      	ldr	r3, [r3, #8]
   1528e:	4906      	ldr	r1, [pc, #24]	; (152a8 <SubscribeHandlerImuTopic+0x38>)
   15290:	2001      	movs	r0, #1
   15292:	4c04      	ldr	r4, [pc, #16]	; (152a4 <SubscribeHandlerImuTopic+0x34>)
   15294:	47a0      	blx	r4
}
   15296:	46c0      	nop			; (mov r8, r8)
   15298:	46bd      	mov	sp, r7
   1529a:	b003      	add	sp, #12
   1529c:	bd90      	pop	{r4, r7, pc}
   1529e:	46c0      	nop			; (mov r8, r8)
   152a0:	00034e44 	.word	0x00034e44
   152a4:	0001c605 	.word	0x0001c605
   152a8:	00034dec 	.word	0x00034dec

000152ac <mqtt_callback>:
 *  - [MQTT_CALLBACK_DISCONNECTED](@ref MQTT_CALLBACK_DISCONNECTED)
 *  - [MQTT_CALLBACK_RECV_PUBLISH](@ref MQTT_CALLBACK_RECV_PUBLISH)
 * \param[in] data A structure contains notification informations. @ref mqtt_data
 */
static void mqtt_callback(struct mqtt_module *module_inst, int type, union mqtt_data *data)
{
   152ac:	b590      	push	{r4, r7, lr}
   152ae:	b08b      	sub	sp, #44	; 0x2c
   152b0:	af06      	add	r7, sp, #24
   152b2:	60f8      	str	r0, [r7, #12]
   152b4:	60b9      	str	r1, [r7, #8]
   152b6:	607a      	str	r2, [r7, #4]
    switch (type) {
   152b8:	68bb      	ldr	r3, [r7, #8]
   152ba:	2b01      	cmp	r3, #1
   152bc:	d03b      	beq.n	15336 <mqtt_callback+0x8a>
   152be:	2b05      	cmp	r3, #5
   152c0:	d05e      	beq.n	15380 <mqtt_callback+0xd4>
   152c2:	2b00      	cmp	r3, #0
   152c4:	d000      	beq.n	152c8 <mqtt_callback+0x1c>
            /* Stop timer and USART callback. */
            LogMessage(LOG_DEBUG_LVL, "MQTT disconnected\r\n");
            // usart_disable_callback(&cdc_uart_module, USART_CALLBACK_BUFFER_RECEIVED);
            break;
    }
}
   152c6:	e061      	b.n	1538c <mqtt_callback+0xe0>
            if (data->sock_connected.result >= 0) {
   152c8:	687b      	ldr	r3, [r7, #4]
   152ca:	681b      	ldr	r3, [r3, #0]
   152cc:	2b00      	cmp	r3, #0
   152ce:	db25      	blt.n	1531c <mqtt_callback+0x70>
                LogMessage(LOG_DEBUG_LVL, "\r\nConnecting to Broker...");
   152d0:	4b30      	ldr	r3, [pc, #192]	; (15394 <mqtt_callback+0xe8>)
   152d2:	0019      	movs	r1, r3
   152d4:	2001      	movs	r0, #1
   152d6:	4b30      	ldr	r3, [pc, #192]	; (15398 <mqtt_callback+0xec>)
   152d8:	4798      	blx	r3
                if (0 != mqtt_connect_broker(module_inst, 1, CLOUDMQTT_USER_ID, CLOUDMQTT_USER_PASSWORD, CLOUDMQTT_USER_ID, NULL, NULL, 0, 0, 0)) {
   152da:	4930      	ldr	r1, [pc, #192]	; (1539c <mqtt_callback+0xf0>)
   152dc:	4a30      	ldr	r2, [pc, #192]	; (153a0 <mqtt_callback+0xf4>)
   152de:	68f8      	ldr	r0, [r7, #12]
   152e0:	2300      	movs	r3, #0
   152e2:	9305      	str	r3, [sp, #20]
   152e4:	2300      	movs	r3, #0
   152e6:	9304      	str	r3, [sp, #16]
   152e8:	2300      	movs	r3, #0
   152ea:	9303      	str	r3, [sp, #12]
   152ec:	2300      	movs	r3, #0
   152ee:	9302      	str	r3, [sp, #8]
   152f0:	2300      	movs	r3, #0
   152f2:	9301      	str	r3, [sp, #4]
   152f4:	4b2a      	ldr	r3, [pc, #168]	; (153a0 <mqtt_callback+0xf4>)
   152f6:	9300      	str	r3, [sp, #0]
   152f8:	000b      	movs	r3, r1
   152fa:	2101      	movs	r1, #1
   152fc:	4c29      	ldr	r4, [pc, #164]	; (153a4 <mqtt_callback+0xf8>)
   152fe:	47a0      	blx	r4
   15300:	1e03      	subs	r3, r0, #0
   15302:	d005      	beq.n	15310 <mqtt_callback+0x64>
                    LogMessage(LOG_DEBUG_LVL, "MQTT  Error - NOT Connected to broker\r\n");
   15304:	4b28      	ldr	r3, [pc, #160]	; (153a8 <mqtt_callback+0xfc>)
   15306:	0019      	movs	r1, r3
   15308:	2001      	movs	r0, #1
   1530a:	4b23      	ldr	r3, [pc, #140]	; (15398 <mqtt_callback+0xec>)
   1530c:	4798      	blx	r3
        } break;
   1530e:	e03d      	b.n	1538c <mqtt_callback+0xe0>
                    LogMessage(LOG_DEBUG_LVL, "MQTT Connected to broker\r\n");
   15310:	4b26      	ldr	r3, [pc, #152]	; (153ac <mqtt_callback+0x100>)
   15312:	0019      	movs	r1, r3
   15314:	2001      	movs	r0, #1
   15316:	4b20      	ldr	r3, [pc, #128]	; (15398 <mqtt_callback+0xec>)
   15318:	4798      	blx	r3
        } break;
   1531a:	e037      	b.n	1538c <mqtt_callback+0xe0>
                LogMessage(LOG_DEBUG_LVL, "Connect fail to server(%s)! retry it automatically.\r\n", main_mqtt_broker);
   1531c:	4a24      	ldr	r2, [pc, #144]	; (153b0 <mqtt_callback+0x104>)
   1531e:	4b25      	ldr	r3, [pc, #148]	; (153b4 <mqtt_callback+0x108>)
   15320:	0019      	movs	r1, r3
   15322:	2001      	movs	r0, #1
   15324:	4b1c      	ldr	r3, [pc, #112]	; (15398 <mqtt_callback+0xec>)
   15326:	4798      	blx	r3
                mqtt_connect(module_inst, main_mqtt_broker); /* Retry that. */
   15328:	4a21      	ldr	r2, [pc, #132]	; (153b0 <mqtt_callback+0x104>)
   1532a:	68fb      	ldr	r3, [r7, #12]
   1532c:	0011      	movs	r1, r2
   1532e:	0018      	movs	r0, r3
   15330:	4b21      	ldr	r3, [pc, #132]	; (153b8 <mqtt_callback+0x10c>)
   15332:	4798      	blx	r3
        } break;
   15334:	e02a      	b.n	1538c <mqtt_callback+0xe0>
            if (data->connected.result == MQTT_CONN_RESULT_ACCEPT) {
   15336:	687b      	ldr	r3, [r7, #4]
   15338:	781b      	ldrb	r3, [r3, #0]
   1533a:	2b00      	cmp	r3, #0
   1533c:	d117      	bne.n	1536e <mqtt_callback+0xc2>
                mqtt_subscribe(module_inst, GAME_TOPIC_IN, 2, SubscribeHandlerGameTopic);
   1533e:	4b1f      	ldr	r3, [pc, #124]	; (153bc <mqtt_callback+0x110>)
   15340:	491f      	ldr	r1, [pc, #124]	; (153c0 <mqtt_callback+0x114>)
   15342:	68f8      	ldr	r0, [r7, #12]
   15344:	2202      	movs	r2, #2
   15346:	4c1f      	ldr	r4, [pc, #124]	; (153c4 <mqtt_callback+0x118>)
   15348:	47a0      	blx	r4
                mqtt_subscribe(module_inst, LED_TOPIC, 2, SubscribeHandlerLedTopic);
   1534a:	4b1f      	ldr	r3, [pc, #124]	; (153c8 <mqtt_callback+0x11c>)
   1534c:	491f      	ldr	r1, [pc, #124]	; (153cc <mqtt_callback+0x120>)
   1534e:	68f8      	ldr	r0, [r7, #12]
   15350:	2202      	movs	r2, #2
   15352:	4c1c      	ldr	r4, [pc, #112]	; (153c4 <mqtt_callback+0x118>)
   15354:	47a0      	blx	r4
                mqtt_subscribe(module_inst, IMU_TOPIC, 2, SubscribeHandlerImuTopic);
   15356:	4b1e      	ldr	r3, [pc, #120]	; (153d0 <mqtt_callback+0x124>)
   15358:	491e      	ldr	r1, [pc, #120]	; (153d4 <mqtt_callback+0x128>)
   1535a:	68f8      	ldr	r0, [r7, #12]
   1535c:	2202      	movs	r2, #2
   1535e:	4c19      	ldr	r4, [pc, #100]	; (153c4 <mqtt_callback+0x118>)
   15360:	47a0      	blx	r4
                LogMessage(LOG_DEBUG_LVL, "MQTT Connected\r\n");
   15362:	4b1d      	ldr	r3, [pc, #116]	; (153d8 <mqtt_callback+0x12c>)
   15364:	0019      	movs	r1, r3
   15366:	2001      	movs	r0, #1
   15368:	4b0b      	ldr	r3, [pc, #44]	; (15398 <mqtt_callback+0xec>)
   1536a:	4798      	blx	r3
            break;
   1536c:	e00e      	b.n	1538c <mqtt_callback+0xe0>
                LogMessage(LOG_DEBUG_LVL, "MQTT broker decline your access! error code %d\r\n", data->connected.result);
   1536e:	687b      	ldr	r3, [r7, #4]
   15370:	781b      	ldrb	r3, [r3, #0]
   15372:	001a      	movs	r2, r3
   15374:	4b19      	ldr	r3, [pc, #100]	; (153dc <mqtt_callback+0x130>)
   15376:	0019      	movs	r1, r3
   15378:	2001      	movs	r0, #1
   1537a:	4b07      	ldr	r3, [pc, #28]	; (15398 <mqtt_callback+0xec>)
   1537c:	4798      	blx	r3
            break;
   1537e:	e005      	b.n	1538c <mqtt_callback+0xe0>
            LogMessage(LOG_DEBUG_LVL, "MQTT disconnected\r\n");
   15380:	4b17      	ldr	r3, [pc, #92]	; (153e0 <mqtt_callback+0x134>)
   15382:	0019      	movs	r1, r3
   15384:	2001      	movs	r0, #1
   15386:	4b04      	ldr	r3, [pc, #16]	; (15398 <mqtt_callback+0xec>)
   15388:	4798      	blx	r3
            break;
   1538a:	46c0      	nop			; (mov r8, r8)
}
   1538c:	46c0      	nop			; (mov r8, r8)
   1538e:	46bd      	mov	sp, r7
   15390:	b005      	add	sp, #20
   15392:	bd90      	pop	{r4, r7, pc}
   15394:	00034ea8 	.word	0x00034ea8
   15398:	0001c605 	.word	0x0001c605
   1539c:	00034ec4 	.word	0x00034ec4
   153a0:	00034ed4 	.word	0x00034ed4
   153a4:	0002e069 	.word	0x0002e069
   153a8:	00034ee0 	.word	0x00034ee0
   153ac:	00034f08 	.word	0x00034f08
   153b0:	00034854 	.word	0x00034854
   153b4:	00034f24 	.word	0x00034f24
   153b8:	0002e021 	.word	0x0002e021
   153bc:	0001512d 	.word	0x0001512d
   153c0:	00034f5c 	.word	0x00034f5c
   153c4:	0002e209 	.word	0x0002e209
   153c8:	00015111 	.word	0x00015111
   153cc:	00034e84 	.word	0x00034e84
   153d0:	00015271 	.word	0x00015271
   153d4:	00034f70 	.word	0x00034f70
   153d8:	00034f84 	.word	0x00034f84
   153dc:	00034f98 	.word	0x00034f98
   153e0:	00034fcc 	.word	0x00034fcc

000153e4 <configure_mqtt>:

/**
 * \brief Configure MQTT service.
 */
static void configure_mqtt(void)
{
   153e4:	b580      	push	{r7, lr}
   153e6:	b088      	sub	sp, #32
   153e8:	af00      	add	r7, sp, #0
    struct mqtt_config mqtt_conf;
    int result;

    mqtt_get_config_defaults(&mqtt_conf);
   153ea:	1d3b      	adds	r3, r7, #4
   153ec:	0018      	movs	r0, r3
   153ee:	4b1f      	ldr	r3, [pc, #124]	; (1546c <configure_mqtt+0x88>)
   153f0:	4798      	blx	r3
    /* To use the MQTT service, it is necessary to always set the buffer and the timer. */
    mqtt_conf.read_buffer = mqtt_read_buffer;
   153f2:	1d3b      	adds	r3, r7, #4
   153f4:	4a1e      	ldr	r2, [pc, #120]	; (15470 <configure_mqtt+0x8c>)
   153f6:	609a      	str	r2, [r3, #8]
    mqtt_conf.read_buffer_size = MAIN_MQTT_BUFFER_SIZE;
   153f8:	1d3b      	adds	r3, r7, #4
   153fa:	2280      	movs	r2, #128	; 0x80
   153fc:	0092      	lsls	r2, r2, #2
   153fe:	60da      	str	r2, [r3, #12]
    mqtt_conf.send_buffer = mqtt_send_buffer;
   15400:	1d3b      	adds	r3, r7, #4
   15402:	4a1c      	ldr	r2, [pc, #112]	; (15474 <configure_mqtt+0x90>)
   15404:	611a      	str	r2, [r3, #16]
    mqtt_conf.send_buffer_size = MAIN_MQTT_BUFFER_SIZE;
   15406:	1d3b      	adds	r3, r7, #4
   15408:	2280      	movs	r2, #128	; 0x80
   1540a:	0092      	lsls	r2, r2, #2
   1540c:	615a      	str	r2, [r3, #20]
    mqtt_conf.port = CLOUDMQTT_PORT;
   1540e:	1d3b      	adds	r3, r7, #4
   15410:	4a19      	ldr	r2, [pc, #100]	; (15478 <configure_mqtt+0x94>)
   15412:	801a      	strh	r2, [r3, #0]
    mqtt_conf.keep_alive = 6000;
   15414:	1d3b      	adds	r3, r7, #4
   15416:	4a19      	ldr	r2, [pc, #100]	; (1547c <configure_mqtt+0x98>)
   15418:	809a      	strh	r2, [r3, #4]

    result = mqtt_init(&mqtt_inst, &mqtt_conf);
   1541a:	1d3a      	adds	r2, r7, #4
   1541c:	4b18      	ldr	r3, [pc, #96]	; (15480 <configure_mqtt+0x9c>)
   1541e:	0011      	movs	r1, r2
   15420:	0018      	movs	r0, r3
   15422:	4b18      	ldr	r3, [pc, #96]	; (15484 <configure_mqtt+0xa0>)
   15424:	4798      	blx	r3
   15426:	0003      	movs	r3, r0
   15428:	61fb      	str	r3, [r7, #28]
    if (result < 0) {
   1542a:	69fb      	ldr	r3, [r7, #28]
   1542c:	2b00      	cmp	r3, #0
   1542e:	da06      	bge.n	1543e <configure_mqtt+0x5a>
        LogMessage(LOG_DEBUG_LVL, "MQTT initialization failed. Error code is (%d)\r\n", result);
   15430:	69fa      	ldr	r2, [r7, #28]
   15432:	4b15      	ldr	r3, [pc, #84]	; (15488 <configure_mqtt+0xa4>)
   15434:	0019      	movs	r1, r3
   15436:	2001      	movs	r0, #1
   15438:	4b14      	ldr	r3, [pc, #80]	; (1548c <configure_mqtt+0xa8>)
   1543a:	4798      	blx	r3
        while (1) {
   1543c:	e7fe      	b.n	1543c <configure_mqtt+0x58>
        }
    }

    result = mqtt_register_callback(&mqtt_inst, mqtt_callback);
   1543e:	4a14      	ldr	r2, [pc, #80]	; (15490 <configure_mqtt+0xac>)
   15440:	4b0f      	ldr	r3, [pc, #60]	; (15480 <configure_mqtt+0x9c>)
   15442:	0011      	movs	r1, r2
   15444:	0018      	movs	r0, r3
   15446:	4b13      	ldr	r3, [pc, #76]	; (15494 <configure_mqtt+0xb0>)
   15448:	4798      	blx	r3
   1544a:	0003      	movs	r3, r0
   1544c:	61fb      	str	r3, [r7, #28]
    if (result < 0) {
   1544e:	69fb      	ldr	r3, [r7, #28]
   15450:	2b00      	cmp	r3, #0
   15452:	da06      	bge.n	15462 <configure_mqtt+0x7e>
        LogMessage(LOG_DEBUG_LVL, "MQTT register callback failed. Error code is (%d)\r\n", result);
   15454:	69fa      	ldr	r2, [r7, #28]
   15456:	4b10      	ldr	r3, [pc, #64]	; (15498 <configure_mqtt+0xb4>)
   15458:	0019      	movs	r1, r3
   1545a:	2001      	movs	r0, #1
   1545c:	4b0b      	ldr	r3, [pc, #44]	; (1548c <configure_mqtt+0xa8>)
   1545e:	4798      	blx	r3
        while (1) {
   15460:	e7fe      	b.n	15460 <configure_mqtt+0x7c>
        }
    }
}
   15462:	46c0      	nop			; (mov r8, r8)
   15464:	46bd      	mov	sp, r7
   15466:	b008      	add	sp, #32
   15468:	bd80      	pop	{r7, pc}
   1546a:	46c0      	nop			; (mov r8, r8)
   1546c:	0002df61 	.word	0x0002df61
   15470:	20000754 	.word	0x20000754
   15474:	20000954 	.word	0x20000954
   15478:	0000075b 	.word	0x0000075b
   1547c:	00001770 	.word	0x00001770
   15480:	2000071c 	.word	0x2000071c
   15484:	0002deb1 	.word	0x0002deb1
   15488:	00034fe0 	.word	0x00034fe0
   1548c:	0001c605 	.word	0x0001c605
   15490:	000152ad 	.word	0x000152ad
   15494:	0002dfa1 	.word	0x0002dfa1
   15498:	00035014 	.word	0x00035014

0001549c <configure_extint_channel>:

// SETUP FOR EXTERNAL BUTTON INTERRUPT -- Used to send an MQTT Message

void configure_extint_channel(void)
{
   1549c:	b580      	push	{r7, lr}
   1549e:	b084      	sub	sp, #16
   154a0:	af00      	add	r7, sp, #0
    struct extint_chan_conf config_extint_chan;
    extint_chan_get_config_defaults(&config_extint_chan);
   154a2:	1d3b      	adds	r3, r7, #4
   154a4:	0018      	movs	r0, r3
   154a6:	4b0b      	ldr	r3, [pc, #44]	; (154d4 <configure_extint_channel+0x38>)
   154a8:	4798      	blx	r3
    config_extint_chan.gpio_pin = BUTTON_0_EIC_PIN;
   154aa:	1d3b      	adds	r3, r7, #4
   154ac:	2237      	movs	r2, #55	; 0x37
   154ae:	601a      	str	r2, [r3, #0]
    config_extint_chan.gpio_pin_mux = BUTTON_0_EIC_MUX;
   154b0:	1d3b      	adds	r3, r7, #4
   154b2:	2200      	movs	r2, #0
   154b4:	605a      	str	r2, [r3, #4]
    config_extint_chan.gpio_pin_pull = EXTINT_PULL_UP;
   154b6:	1d3b      	adds	r3, r7, #4
   154b8:	2201      	movs	r2, #1
   154ba:	721a      	strb	r2, [r3, #8]
    config_extint_chan.detection_criteria = EXTINT_DETECT_FALLING;
   154bc:	1d3b      	adds	r3, r7, #4
   154be:	2202      	movs	r2, #2
   154c0:	72da      	strb	r2, [r3, #11]
    extint_chan_set_config(BUTTON_0_EIC_LINE, &config_extint_chan);
   154c2:	1d3b      	adds	r3, r7, #4
   154c4:	0019      	movs	r1, r3
   154c6:	2007      	movs	r0, #7
   154c8:	4b03      	ldr	r3, [pc, #12]	; (154d8 <configure_extint_channel+0x3c>)
   154ca:	4798      	blx	r3
}
   154cc:	46c0      	nop			; (mov r8, r8)
   154ce:	46bd      	mov	sp, r7
   154d0:	b004      	add	sp, #16
   154d2:	bd80      	pop	{r7, pc}
   154d4:	00025099 	.word	0x00025099
   154d8:	000250cd 	.word	0x000250cd

000154dc <configure_extint_callbacks>:

void extint_detection_callback(void);
void configure_extint_callbacks(void)
{
   154dc:	b580      	push	{r7, lr}
   154de:	af00      	add	r7, sp, #0
    extint_register_callback(extint_detection_callback, BUTTON_0_EIC_LINE, EXTINT_CALLBACK_TYPE_DETECT);
   154e0:	4b06      	ldr	r3, [pc, #24]	; (154fc <configure_extint_callbacks+0x20>)
   154e2:	2200      	movs	r2, #0
   154e4:	2107      	movs	r1, #7
   154e6:	0018      	movs	r0, r3
   154e8:	4b05      	ldr	r3, [pc, #20]	; (15500 <configure_extint_callbacks+0x24>)
   154ea:	4798      	blx	r3
    extint_chan_enable_callback(BUTTON_0_EIC_LINE, EXTINT_CALLBACK_TYPE_DETECT);
   154ec:	2100      	movs	r1, #0
   154ee:	2007      	movs	r0, #7
   154f0:	4b04      	ldr	r3, [pc, #16]	; (15504 <configure_extint_callbacks+0x28>)
   154f2:	4798      	blx	r3
}
   154f4:	46c0      	nop			; (mov r8, r8)
   154f6:	46bd      	mov	sp, r7
   154f8:	bd80      	pop	{r7, pc}
   154fa:	46c0      	nop			; (mov r8, r8)
   154fc:	00015509 	.word	0x00015509
   15500:	00024c99 	.word	0x00024c99
   15504:	00024cfd 	.word	0x00024cfd

00015508 <extint_detection_callback>:

volatile bool isPressed = false;
void extint_detection_callback(void)
{
   15508:	b5b0      	push	{r4, r5, r7, lr}
   1550a:	af00      	add	r7, sp, #0
    // Publish some data after a button press and release. Note: just an example! This is not the most elegant way of doing this!
    // temperature++;
    // if (temperature > 40) temperature = 1;
    // snprintf(mqtt_msg_temp, 63, "{\"d\":{\"temp\":%d}}", temperature);
    if(button_state){
   1550c:	4b16      	ldr	r3, [pc, #88]	; (15568 <extint_detection_callback+0x60>)
   1550e:	781b      	ldrb	r3, [r3, #0]
   15510:	b2db      	uxtb	r3, r3
   15512:	2b00      	cmp	r3, #0
   15514:	d009      	beq.n	1552a <extint_detection_callback+0x22>
    temperature = 1;
   15516:	4b15      	ldr	r3, [pc, #84]	; (1556c <extint_detection_callback+0x64>)
   15518:	2201      	movs	r2, #1
   1551a:	601a      	str	r2, [r3, #0]
    snprintf(mqtt_msg_temp, 63, "%d", 1);
   1551c:	4a14      	ldr	r2, [pc, #80]	; (15570 <extint_detection_callback+0x68>)
   1551e:	4815      	ldr	r0, [pc, #84]	; (15574 <extint_detection_callback+0x6c>)
   15520:	2301      	movs	r3, #1
   15522:	213f      	movs	r1, #63	; 0x3f
   15524:	4c14      	ldr	r4, [pc, #80]	; (15578 <extint_detection_callback+0x70>)
   15526:	47a0      	blx	r4
   15528:	e008      	b.n	1553c <extint_detection_callback+0x34>
    }
    else{
    temperature = 0;
   1552a:	4b10      	ldr	r3, [pc, #64]	; (1556c <extint_detection_callback+0x64>)
   1552c:	2200      	movs	r2, #0
   1552e:	601a      	str	r2, [r3, #0]
    snprintf(mqtt_msg_temp, 63, "%d", 0);
   15530:	4a0f      	ldr	r2, [pc, #60]	; (15570 <extint_detection_callback+0x68>)
   15532:	4810      	ldr	r0, [pc, #64]	; (15574 <extint_detection_callback+0x6c>)
   15534:	2300      	movs	r3, #0
   15536:	213f      	movs	r1, #63	; 0x3f
   15538:	4c0f      	ldr	r4, [pc, #60]	; (15578 <extint_detection_callback+0x70>)
   1553a:	47a0      	blx	r4
    }
    button_state = !button_state;
   1553c:	4b0a      	ldr	r3, [pc, #40]	; (15568 <extint_detection_callback+0x60>)
   1553e:	781b      	ldrb	r3, [r3, #0]
   15540:	b2db      	uxtb	r3, r3
   15542:	1e5a      	subs	r2, r3, #1
   15544:	4193      	sbcs	r3, r2
   15546:	b2db      	uxtb	r3, r3
   15548:	2201      	movs	r2, #1
   1554a:	4053      	eors	r3, r2
   1554c:	b2db      	uxtb	r3, r3
   1554e:	1c1a      	adds	r2, r3, #0
   15550:	2301      	movs	r3, #1
   15552:	4013      	ands	r3, r2
   15554:	b2da      	uxtb	r2, r3
   15556:	4b04      	ldr	r3, [pc, #16]	; (15568 <extint_detection_callback+0x60>)
   15558:	701a      	strb	r2, [r3, #0]
    
    isPressed = true;
   1555a:	4b08      	ldr	r3, [pc, #32]	; (1557c <extint_detection_callback+0x74>)
   1555c:	2201      	movs	r2, #1
   1555e:	701a      	strb	r2, [r3, #0]
    // Published in the Wifi thread main loop
}
   15560:	46c0      	nop			; (mov r8, r8)
   15562:	46bd      	mov	sp, r7
   15564:	bdb0      	pop	{r4, r5, r7, pc}
   15566:	46c0      	nop			; (mov r8, r8)
   15568:	200004a8 	.word	0x200004a8
   1556c:	200000c0 	.word	0x200000c0
   15570:	00035048 	.word	0x00035048
   15574:	20000080 	.word	0x20000080
   15578:	00033371 	.word	0x00033371
   1557c:	20000b54 	.word	0x20000b54

00015580 <HTTP_DownloadFileInit>:
 * @brief	Routine to initialize HTTP download of the OTAU file
 * @note

*/
static void HTTP_DownloadFileInit(void)
{
   15580:	b580      	push	{r7, lr}
   15582:	af00      	add	r7, sp, #0
    if (mqtt_disconnect(&mqtt_inst, main_mqtt_broker)) {
   15584:	4a15      	ldr	r2, [pc, #84]	; (155dc <HTTP_DownloadFileInit+0x5c>)
   15586:	4b16      	ldr	r3, [pc, #88]	; (155e0 <HTTP_DownloadFileInit+0x60>)
   15588:	0011      	movs	r1, r2
   1558a:	0018      	movs	r0, r3
   1558c:	4b15      	ldr	r3, [pc, #84]	; (155e4 <HTTP_DownloadFileInit+0x64>)
   1558e:	4798      	blx	r3
   15590:	1e03      	subs	r3, r0, #0
   15592:	d008      	beq.n	155a6 <HTTP_DownloadFileInit+0x26>
        LogMessage(LOG_DEBUG_LVL, "Error connecting to MQTT Broker!\r\n");
   15594:	4b14      	ldr	r3, [pc, #80]	; (155e8 <HTTP_DownloadFileInit+0x68>)
   15596:	0019      	movs	r1, r3
   15598:	2001      	movs	r0, #1
   1559a:	4b14      	ldr	r3, [pc, #80]	; (155ec <HTTP_DownloadFileInit+0x6c>)
   1559c:	4798      	blx	r3
    }
    while ((mqtt_inst.isConnected)) {
   1559e:	e002      	b.n	155a6 <HTTP_DownloadFileInit+0x26>
        m2m_wifi_handle_events(NULL);
   155a0:	2000      	movs	r0, #0
   155a2:	4b13      	ldr	r3, [pc, #76]	; (155f0 <HTTP_DownloadFileInit+0x70>)
   155a4:	4798      	blx	r3
    while ((mqtt_inst.isConnected)) {
   155a6:	4b0e      	ldr	r3, [pc, #56]	; (155e0 <HTTP_DownloadFileInit+0x60>)
   155a8:	2234      	movs	r2, #52	; 0x34
   155aa:	5c9b      	ldrb	r3, [r3, r2]
   155ac:	2b00      	cmp	r3, #0
   155ae:	d1f7      	bne.n	155a0 <HTTP_DownloadFileInit+0x20>
    }
    socketDeinit();
   155b0:	4b10      	ldr	r3, [pc, #64]	; (155f4 <HTTP_DownloadFileInit+0x74>)
   155b2:	4798      	blx	r3
    // DOWNLOAD A FILE
    do_download_flag = true;
   155b4:	4b10      	ldr	r3, [pc, #64]	; (155f8 <HTTP_DownloadFileInit+0x78>)
   155b6:	2201      	movs	r2, #1
   155b8:	701a      	strb	r2, [r3, #0]
    /* Register socket callback function. */
    registerSocketCallback(socket_cb, resolve_cb);
   155ba:	4a10      	ldr	r2, [pc, #64]	; (155fc <HTTP_DownloadFileInit+0x7c>)
   155bc:	4b10      	ldr	r3, [pc, #64]	; (15600 <HTTP_DownloadFileInit+0x80>)
   155be:	0011      	movs	r1, r2
   155c0:	0018      	movs	r0, r3
   155c2:	4b10      	ldr	r3, [pc, #64]	; (15604 <HTTP_DownloadFileInit+0x84>)
   155c4:	4798      	blx	r3
    /* Initialize socket module. */
    socketInit();
   155c6:	4b10      	ldr	r3, [pc, #64]	; (15608 <HTTP_DownloadFileInit+0x88>)
   155c8:	4798      	blx	r3

    start_download();
   155ca:	4b10      	ldr	r3, [pc, #64]	; (1560c <HTTP_DownloadFileInit+0x8c>)
   155cc:	4798      	blx	r3
    wifiStateMachine = WIFI_DOWNLOAD_HANDLE;
   155ce:	4b10      	ldr	r3, [pc, #64]	; (15610 <HTTP_DownloadFileInit+0x90>)
   155d0:	2203      	movs	r2, #3
   155d2:	701a      	strb	r2, [r3, #0]
}
   155d4:	46c0      	nop			; (mov r8, r8)
   155d6:	46bd      	mov	sp, r7
   155d8:	bd80      	pop	{r7, pc}
   155da:	46c0      	nop			; (mov r8, r8)
   155dc:	00034854 	.word	0x00034854
   155e0:	2000071c 	.word	0x2000071c
   155e4:	0002e155 	.word	0x0002e155
   155e8:	00034c4c 	.word	0x00034c4c
   155ec:	0001c605 	.word	0x0001c605
   155f0:	00020789 	.word	0x00020789
   155f4:	00023d45 	.word	0x00023d45
   155f8:	200004bc 	.word	0x200004bc
   155fc:	00014d65 	.word	0x00014d65
   15600:	00014d31 	.word	0x00014d31
   15604:	00023d8d 	.word	0x00023d8d
   15608:	00023cf5 	.word	0x00023cf5
   1560c:	00014955 	.word	0x00014955
   15610:	200004a9 	.word	0x200004a9

00015614 <HTTP_DownloadFileTransaction>:
 * @brief	Routine to handle the HTTP transaction of downloading a file
 * @note

*/
static void HTTP_DownloadFileTransaction(void)
{
   15614:	b590      	push	{r4, r7, lr}
   15616:	b085      	sub	sp, #20
   15618:	af00      	add	r7, sp, #0
    /* Connect to router. */
    while (!(is_state_set(COMPLETED) || is_state_set(CANCELED))) {
   1561a:	e009      	b.n	15630 <HTTP_DownloadFileTransaction+0x1c>
        /* Handle pending events from network controller. */
        m2m_wifi_handle_events(NULL);
   1561c:	2000      	movs	r0, #0
   1561e:	4b2a      	ldr	r3, [pc, #168]	; (156c8 <HTTP_DownloadFileTransaction+0xb4>)
   15620:	4798      	blx	r3
        /* Checks the timer timeout. */
        sw_timer_task(&swt_module_inst);
   15622:	4b2a      	ldr	r3, [pc, #168]	; (156cc <HTTP_DownloadFileTransaction+0xb8>)
   15624:	0018      	movs	r0, r3
   15626:	4b2a      	ldr	r3, [pc, #168]	; (156d0 <HTTP_DownloadFileTransaction+0xbc>)
   15628:	4798      	blx	r3
        vTaskDelay(5);
   1562a:	2005      	movs	r0, #5
   1562c:	4b29      	ldr	r3, [pc, #164]	; (156d4 <HTTP_DownloadFileTransaction+0xc0>)
   1562e:	4798      	blx	r3
    while (!(is_state_set(COMPLETED) || is_state_set(CANCELED))) {
   15630:	2010      	movs	r0, #16
   15632:	4b29      	ldr	r3, [pc, #164]	; (156d8 <HTTP_DownloadFileTransaction+0xc4>)
   15634:	4798      	blx	r3
   15636:	0003      	movs	r3, r0
   15638:	001a      	movs	r2, r3
   1563a:	2301      	movs	r3, #1
   1563c:	4053      	eors	r3, r2
   1563e:	b2db      	uxtb	r3, r3
   15640:	2b00      	cmp	r3, #0
   15642:	d009      	beq.n	15658 <HTTP_DownloadFileTransaction+0x44>
   15644:	2020      	movs	r0, #32
   15646:	4b24      	ldr	r3, [pc, #144]	; (156d8 <HTTP_DownloadFileTransaction+0xc4>)
   15648:	4798      	blx	r3
   1564a:	0003      	movs	r3, r0
   1564c:	001a      	movs	r2, r3
   1564e:	2301      	movs	r3, #1
   15650:	4053      	eors	r3, r2
   15652:	b2db      	uxtb	r3, r3
   15654:	2b00      	cmp	r3, #0
   15656:	d1e1      	bne.n	1561c <HTTP_DownloadFileTransaction+0x8>
    }

    // Disable socket for HTTP Transfer
    socketDeinit();
   15658:	4b20      	ldr	r3, [pc, #128]	; (156dc <HTTP_DownloadFileTransaction+0xc8>)
   1565a:	4798      	blx	r3
    vTaskDelay(1000);
   1565c:	23fa      	movs	r3, #250	; 0xfa
   1565e:	009b      	lsls	r3, r3, #2
   15660:	0018      	movs	r0, r3
   15662:	4b1c      	ldr	r3, [pc, #112]	; (156d4 <HTTP_DownloadFileTransaction+0xc0>)
   15664:	4798      	blx	r3
    // CONNECT TO MQTT BROKER
    do_download_flag = false;
   15666:	4b1e      	ldr	r3, [pc, #120]	; (156e0 <HTTP_DownloadFileTransaction+0xcc>)
   15668:	2200      	movs	r2, #0
   1566a:	701a      	strb	r2, [r3, #0]

    // Write Flag
    char test_file_name[] = "0:FlagA.txt";
   1566c:	003b      	movs	r3, r7
   1566e:	4a1d      	ldr	r2, [pc, #116]	; (156e4 <HTTP_DownloadFileTransaction+0xd0>)
   15670:	ca13      	ldmia	r2!, {r0, r1, r4}
   15672:	c313      	stmia	r3!, {r0, r1, r4}
    test_file_name[0] = LUN_ID_SD_MMC_0_MEM + '0';
   15674:	003b      	movs	r3, r7
   15676:	2230      	movs	r2, #48	; 0x30
   15678:	701a      	strb	r2, [r3, #0]
    FRESULT res = f_open(&file_object, (char const *)test_file_name, FA_CREATE_ALWAYS | FA_WRITE);
   1567a:	230f      	movs	r3, #15
   1567c:	18fc      	adds	r4, r7, r3
   1567e:	0039      	movs	r1, r7
   15680:	4b19      	ldr	r3, [pc, #100]	; (156e8 <HTTP_DownloadFileTransaction+0xd4>)
   15682:	220a      	movs	r2, #10
   15684:	0018      	movs	r0, r3
   15686:	4b19      	ldr	r3, [pc, #100]	; (156ec <HTTP_DownloadFileTransaction+0xd8>)
   15688:	4798      	blx	r3
   1568a:	0003      	movs	r3, r0
   1568c:	7023      	strb	r3, [r4, #0]

    if (res != FR_OK) {
   1568e:	230f      	movs	r3, #15
   15690:	18fb      	adds	r3, r7, r3
   15692:	781b      	ldrb	r3, [r3, #0]
   15694:	2b00      	cmp	r3, #0
   15696:	d008      	beq.n	156aa <HTTP_DownloadFileTransaction+0x96>
        LogMessage(LOG_INFO_LVL, "[FAIL] res %d\r\n", res);
   15698:	230f      	movs	r3, #15
   1569a:	18fb      	adds	r3, r7, r3
   1569c:	781a      	ldrb	r2, [r3, #0]
   1569e:	4b14      	ldr	r3, [pc, #80]	; (156f0 <HTTP_DownloadFileTransaction+0xdc>)
   156a0:	0019      	movs	r1, r3
   156a2:	2000      	movs	r0, #0
   156a4:	4b13      	ldr	r3, [pc, #76]	; (156f4 <HTTP_DownloadFileTransaction+0xe0>)
   156a6:	4798      	blx	r3
   156a8:	e003      	b.n	156b2 <HTTP_DownloadFileTransaction+0x9e>
    } else {
        SerialConsoleWriteString("FlagA.txt added!\r\n");
   156aa:	4b13      	ldr	r3, [pc, #76]	; (156f8 <HTTP_DownloadFileTransaction+0xe4>)
   156ac:	0018      	movs	r0, r3
   156ae:	4b13      	ldr	r3, [pc, #76]	; (156fc <HTTP_DownloadFileTransaction+0xe8>)
   156b0:	4798      	blx	r3
    }

    f_close(&file_object);
   156b2:	4b0d      	ldr	r3, [pc, #52]	; (156e8 <HTTP_DownloadFileTransaction+0xd4>)
   156b4:	0018      	movs	r0, r3
   156b6:	4b12      	ldr	r3, [pc, #72]	; (15700 <HTTP_DownloadFileTransaction+0xec>)
   156b8:	4798      	blx	r3
    wifiStateMachine = WIFI_MQTT_INIT;
   156ba:	4b12      	ldr	r3, [pc, #72]	; (15704 <HTTP_DownloadFileTransaction+0xf0>)
   156bc:	2200      	movs	r2, #0
   156be:	701a      	strb	r2, [r3, #0]
}
   156c0:	46c0      	nop			; (mov r8, r8)
   156c2:	46bd      	mov	sp, r7
   156c4:	b005      	add	sp, #20
   156c6:	bd90      	pop	{r4, r7, pc}
   156c8:	00020789 	.word	0x00020789
   156cc:	20004350 	.word	0x20004350
   156d0:	00030e7d 	.word	0x00030e7d
   156d4:	0001a8c5 	.word	0x0001a8c5
   156d8:	0001462d 	.word	0x0001462d
   156dc:	00023d45 	.word	0x00023d45
   156e0:	200004bc 	.word	0x200004bc
   156e4:	00035070 	.word	0x00035070
   156e8:	200006f0 	.word	0x200006f0
   156ec:	0002c145 	.word	0x0002c145
   156f0:	0003504c 	.word	0x0003504c
   156f4:	0001c605 	.word	0x0001c605
   156f8:	0003505c 	.word	0x0003505c
   156fc:	0001c519 	.word	0x0001c519
   15700:	0002cb45 	.word	0x0002cb45
   15704:	200004a9 	.word	0x200004a9

00015708 <MQTT_InitRoutine>:
 * @brief	Routine to initialize the MQTT socket to prepare for MQTT transactions
 * @note

*/
static void MQTT_InitRoutine(void)
{
   15708:	b580      	push	{r7, lr}
   1570a:	af00      	add	r7, sp, #0
    socketDeinit();
   1570c:	4b18      	ldr	r3, [pc, #96]	; (15770 <MQTT_InitRoutine+0x68>)
   1570e:	4798      	blx	r3
    configure_mqtt();
   15710:	4b18      	ldr	r3, [pc, #96]	; (15774 <MQTT_InitRoutine+0x6c>)
   15712:	4798      	blx	r3
    // Re-enable socket for MQTT Transfer
    registerSocketCallback(socket_event_handler, socket_resolve_handler);
   15714:	4a18      	ldr	r2, [pc, #96]	; (15778 <MQTT_InitRoutine+0x70>)
   15716:	4b19      	ldr	r3, [pc, #100]	; (1577c <MQTT_InitRoutine+0x74>)
   15718:	0011      	movs	r1, r2
   1571a:	0018      	movs	r0, r3
   1571c:	4b18      	ldr	r3, [pc, #96]	; (15780 <MQTT_InitRoutine+0x78>)
   1571e:	4798      	blx	r3
    socketInit();
   15720:	4b18      	ldr	r3, [pc, #96]	; (15784 <MQTT_InitRoutine+0x7c>)
   15722:	4798      	blx	r3
    /* Connect to router. */
    if (!(mqtt_inst.isConnected)) {
   15724:	4b18      	ldr	r3, [pc, #96]	; (15788 <MQTT_InitRoutine+0x80>)
   15726:	2234      	movs	r2, #52	; 0x34
   15728:	5c9b      	ldrb	r3, [r3, r2]
   1572a:	2201      	movs	r2, #1
   1572c:	4053      	eors	r3, r2
   1572e:	b2db      	uxtb	r3, r3
   15730:	2b00      	cmp	r3, #0
   15732:	d00c      	beq.n	1574e <MQTT_InitRoutine+0x46>
        if (mqtt_connect(&mqtt_inst, main_mqtt_broker)) {
   15734:	4a15      	ldr	r2, [pc, #84]	; (1578c <MQTT_InitRoutine+0x84>)
   15736:	4b14      	ldr	r3, [pc, #80]	; (15788 <MQTT_InitRoutine+0x80>)
   15738:	0011      	movs	r1, r2
   1573a:	0018      	movs	r0, r3
   1573c:	4b14      	ldr	r3, [pc, #80]	; (15790 <MQTT_InitRoutine+0x88>)
   1573e:	4798      	blx	r3
   15740:	1e03      	subs	r3, r0, #0
   15742:	d004      	beq.n	1574e <MQTT_InitRoutine+0x46>
            LogMessage(LOG_DEBUG_LVL, "Error connecting to MQTT Broker!\r\n");
   15744:	4b13      	ldr	r3, [pc, #76]	; (15794 <MQTT_InitRoutine+0x8c>)
   15746:	0019      	movs	r1, r3
   15748:	2001      	movs	r0, #1
   1574a:	4b13      	ldr	r3, [pc, #76]	; (15798 <MQTT_InitRoutine+0x90>)
   1574c:	4798      	blx	r3
        }
    }

    if (mqtt_inst.isConnected) {
   1574e:	4b0e      	ldr	r3, [pc, #56]	; (15788 <MQTT_InitRoutine+0x80>)
   15750:	2234      	movs	r2, #52	; 0x34
   15752:	5c9b      	ldrb	r3, [r3, r2]
   15754:	2b00      	cmp	r3, #0
   15756:	d004      	beq.n	15762 <MQTT_InitRoutine+0x5a>
        LogMessage(LOG_DEBUG_LVL, "Connected to MQTT Broker!\r\n");
   15758:	4b10      	ldr	r3, [pc, #64]	; (1579c <MQTT_InitRoutine+0x94>)
   1575a:	0019      	movs	r1, r3
   1575c:	2001      	movs	r0, #1
   1575e:	4b0e      	ldr	r3, [pc, #56]	; (15798 <MQTT_InitRoutine+0x90>)
   15760:	4798      	blx	r3
    }
    wifiStateMachine = WIFI_MQTT_HANDLE;
   15762:	4b0f      	ldr	r3, [pc, #60]	; (157a0 <MQTT_InitRoutine+0x98>)
   15764:	2201      	movs	r2, #1
   15766:	701a      	strb	r2, [r3, #0]
}
   15768:	46c0      	nop			; (mov r8, r8)
   1576a:	46bd      	mov	sp, r7
   1576c:	bd80      	pop	{r7, pc}
   1576e:	46c0      	nop			; (mov r8, r8)
   15770:	00023d45 	.word	0x00023d45
   15774:	000153e5 	.word	0x000153e5
   15778:	000150ed 	.word	0x000150ed
   1577c:	000150b9 	.word	0x000150b9
   15780:	00023d8d 	.word	0x00023d8d
   15784:	00023cf5 	.word	0x00023cf5
   15788:	2000071c 	.word	0x2000071c
   1578c:	00034854 	.word	0x00034854
   15790:	0002e021 	.word	0x0002e021
   15794:	00034c4c 	.word	0x00034c4c
   15798:	0001c605 	.word	0x0001c605
   1579c:	0003507c 	.word	0x0003507c
   157a0:	200004a9 	.word	0x200004a9

000157a4 <MQTT_HandleTransactions>:
 * @brief	Routine to handle MQTT transactions
 * @note

*/
static void MQTT_HandleTransactions(void)
{
   157a4:	b580      	push	{r7, lr}
   157a6:	af00      	add	r7, sp, #0
    /* Handle pending events from network controller. */
    m2m_wifi_handle_events(NULL);
   157a8:	2000      	movs	r0, #0
   157aa:	4b0b      	ldr	r3, [pc, #44]	; (157d8 <MQTT_HandleTransactions+0x34>)
   157ac:	4798      	blx	r3
    sw_timer_task(&swt_module_inst);
   157ae:	4b0b      	ldr	r3, [pc, #44]	; (157dc <MQTT_HandleTransactions+0x38>)
   157b0:	0018      	movs	r0, r3
   157b2:	4b0b      	ldr	r3, [pc, #44]	; (157e0 <MQTT_HandleTransactions+0x3c>)
   157b4:	4798      	blx	r3

    // Check if data has to be sent!
    MQTT_HandleGameMessages();
   157b6:	4b0b      	ldr	r3, [pc, #44]	; (157e4 <MQTT_HandleTransactions+0x40>)
   157b8:	4798      	blx	r3
    MQTT_HandleImuMessages();
   157ba:	4b0b      	ldr	r3, [pc, #44]	; (157e8 <MQTT_HandleTransactions+0x44>)
   157bc:	4798      	blx	r3

    // Handle MQTT messages
    if (mqtt_inst.isConnected) mqtt_yield(&mqtt_inst, 100);
   157be:	4b0b      	ldr	r3, [pc, #44]	; (157ec <MQTT_HandleTransactions+0x48>)
   157c0:	2234      	movs	r2, #52	; 0x34
   157c2:	5c9b      	ldrb	r3, [r3, r2]
   157c4:	2b00      	cmp	r3, #0
   157c6:	d004      	beq.n	157d2 <MQTT_HandleTransactions+0x2e>
   157c8:	4b08      	ldr	r3, [pc, #32]	; (157ec <MQTT_HandleTransactions+0x48>)
   157ca:	2164      	movs	r1, #100	; 0x64
   157cc:	0018      	movs	r0, r3
   157ce:	4b08      	ldr	r3, [pc, #32]	; (157f0 <MQTT_HandleTransactions+0x4c>)
   157d0:	4798      	blx	r3
}
   157d2:	46c0      	nop			; (mov r8, r8)
   157d4:	46bd      	mov	sp, r7
   157d6:	bd80      	pop	{r7, pc}
   157d8:	00020789 	.word	0x00020789
   157dc:	20004350 	.word	0x20004350
   157e0:	00030e7d 	.word	0x00030e7d
   157e4:	00015881 	.word	0x00015881
   157e8:	000157f5 	.word	0x000157f5
   157ec:	2000071c 	.word	0x2000071c
   157f0:	0002e251 	.word	0x0002e251

000157f4 <MQTT_HandleImuMessages>:

static void MQTT_HandleImuMessages(void)
{
   157f4:	b590      	push	{r4, r7, lr}
   157f6:	b085      	sub	sp, #20
   157f8:	af02      	add	r7, sp, #8
    struct ImuDataPacket imuDataVar;
    if (pdPASS == xQueueReceive(xQueueImuBuffer, &imuDataVar, 0)) {
   157fa:	4b18      	ldr	r3, [pc, #96]	; (1585c <MQTT_HandleImuMessages+0x68>)
   157fc:	681b      	ldr	r3, [r3, #0]
   157fe:	0039      	movs	r1, r7
   15800:	2200      	movs	r2, #0
   15802:	0018      	movs	r0, r3
   15804:	4b16      	ldr	r3, [pc, #88]	; (15860 <MQTT_HandleImuMessages+0x6c>)
   15806:	4798      	blx	r3
   15808:	0003      	movs	r3, r0
   1580a:	2b01      	cmp	r3, #1
   1580c:	d121      	bne.n	15852 <MQTT_HandleImuMessages+0x5e>
        snprintf(mqtt_msg, 63, "{\"imux\":%d, \"imuy\": %d, \"imuz\": %d}", imuDataVar.xmg, imuDataVar.ymg, imuDataVar.zmg);
   1580e:	003b      	movs	r3, r7
   15810:	2200      	movs	r2, #0
   15812:	5e9b      	ldrsh	r3, [r3, r2]
   15814:	001c      	movs	r4, r3
   15816:	003b      	movs	r3, r7
   15818:	2202      	movs	r2, #2
   1581a:	5e9b      	ldrsh	r3, [r3, r2]
   1581c:	0019      	movs	r1, r3
   1581e:	003b      	movs	r3, r7
   15820:	2204      	movs	r2, #4
   15822:	5e9b      	ldrsh	r3, [r3, r2]
   15824:	4a0f      	ldr	r2, [pc, #60]	; (15864 <MQTT_HandleImuMessages+0x70>)
   15826:	4810      	ldr	r0, [pc, #64]	; (15868 <MQTT_HandleImuMessages+0x74>)
   15828:	9301      	str	r3, [sp, #4]
   1582a:	9100      	str	r1, [sp, #0]
   1582c:	0023      	movs	r3, r4
   1582e:	213f      	movs	r1, #63	; 0x3f
   15830:	4c0e      	ldr	r4, [pc, #56]	; (1586c <MQTT_HandleImuMessages+0x78>)
   15832:	47a0      	blx	r4
        mqtt_publish(&mqtt_inst, IMU_TOPIC, mqtt_msg, strlen(mqtt_msg), 1, 0);
   15834:	4b0c      	ldr	r3, [pc, #48]	; (15868 <MQTT_HandleImuMessages+0x74>)
   15836:	0018      	movs	r0, r3
   15838:	4b0d      	ldr	r3, [pc, #52]	; (15870 <MQTT_HandleImuMessages+0x7c>)
   1583a:	4798      	blx	r3
   1583c:	0004      	movs	r4, r0
   1583e:	4a0a      	ldr	r2, [pc, #40]	; (15868 <MQTT_HandleImuMessages+0x74>)
   15840:	490c      	ldr	r1, [pc, #48]	; (15874 <MQTT_HandleImuMessages+0x80>)
   15842:	480d      	ldr	r0, [pc, #52]	; (15878 <MQTT_HandleImuMessages+0x84>)
   15844:	2300      	movs	r3, #0
   15846:	9301      	str	r3, [sp, #4]
   15848:	2301      	movs	r3, #1
   1584a:	9300      	str	r3, [sp, #0]
   1584c:	0023      	movs	r3, r4
   1584e:	4c0b      	ldr	r4, [pc, #44]	; (1587c <MQTT_HandleImuMessages+0x88>)
   15850:	47a0      	blx	r4
    }
}
   15852:	46c0      	nop			; (mov r8, r8)
   15854:	46bd      	mov	sp, r7
   15856:	b003      	add	sp, #12
   15858:	bd90      	pop	{r4, r7, pc}
   1585a:	46c0      	nop			; (mov r8, r8)
   1585c:	200004b4 	.word	0x200004b4
   15860:	00019719 	.word	0x00019719
   15864:	00035098 	.word	0x00035098
   15868:	20000040 	.word	0x20000040
   1586c:	00033371 	.word	0x00033371
   15870:	000334cf 	.word	0x000334cf
   15874:	00034f70 	.word	0x00034f70
   15878:	2000071c 	.word	0x2000071c
   1587c:	0002e19d 	.word	0x0002e19d

00015880 <MQTT_HandleGameMessages>:

static void MQTT_HandleGameMessages(void)
{
   15880:	b590      	push	{r4, r7, lr}
   15882:	b08b      	sub	sp, #44	; 0x2c
   15884:	af02      	add	r7, sp, #8
    struct GameDataPacket gamePacket;
    if (pdPASS == xQueueReceive(xQueueGameBuffer, &gamePacket, 0)) {
   15886:	4b39      	ldr	r3, [pc, #228]	; (1596c <MQTT_HandleGameMessages+0xec>)
   15888:	681b      	ldr	r3, [r3, #0]
   1588a:	2208      	movs	r2, #8
   1588c:	18b9      	adds	r1, r7, r2
   1588e:	2200      	movs	r2, #0
   15890:	0018      	movs	r0, r3
   15892:	4b37      	ldr	r3, [pc, #220]	; (15970 <MQTT_HandleGameMessages+0xf0>)
   15894:	4798      	blx	r3
   15896:	0003      	movs	r3, r0
   15898:	2b01      	cmp	r3, #1
   1589a:	d163      	bne.n	15964 <MQTT_HandleGameMessages+0xe4>
        snprintf(mqtt_msg, 63, "{\"game\":[");
   1589c:	4b35      	ldr	r3, [pc, #212]	; (15974 <MQTT_HandleGameMessages+0xf4>)
   1589e:	4a36      	ldr	r2, [pc, #216]	; (15978 <MQTT_HandleGameMessages+0xf8>)
   158a0:	ca03      	ldmia	r2!, {r0, r1}
   158a2:	c303      	stmia	r3!, {r0, r1}
   158a4:	8812      	ldrh	r2, [r2, #0]
   158a6:	801a      	strh	r2, [r3, #0]
        for (int iter = 0; iter < GAME_SIZE; iter++) {
   158a8:	2300      	movs	r3, #0
   158aa:	61fb      	str	r3, [r7, #28]
   158ac:	e02d      	b.n	1590a <MQTT_HandleGameMessages+0x8a>
            char numGame[5];
            if (gamePacket.game[iter] != 0xFF) {
   158ae:	2308      	movs	r3, #8
   158b0:	18fa      	adds	r2, r7, r3
   158b2:	69fb      	ldr	r3, [r7, #28]
   158b4:	18d3      	adds	r3, r2, r3
   158b6:	781b      	ldrb	r3, [r3, #0]
   158b8:	2bff      	cmp	r3, #255	; 0xff
   158ba:	d02a      	beq.n	15912 <MQTT_HandleGameMessages+0x92>
                snprintf(numGame, 3, "%d", gamePacket.game[iter]);
   158bc:	2308      	movs	r3, #8
   158be:	18fa      	adds	r2, r7, r3
   158c0:	69fb      	ldr	r3, [r7, #28]
   158c2:	18d3      	adds	r3, r2, r3
   158c4:	781b      	ldrb	r3, [r3, #0]
   158c6:	4a2d      	ldr	r2, [pc, #180]	; (1597c <MQTT_HandleGameMessages+0xfc>)
   158c8:	0038      	movs	r0, r7
   158ca:	2103      	movs	r1, #3
   158cc:	4c2c      	ldr	r4, [pc, #176]	; (15980 <MQTT_HandleGameMessages+0x100>)
   158ce:	47a0      	blx	r4
                strcat(mqtt_msg, numGame);
   158d0:	003a      	movs	r2, r7
   158d2:	4b28      	ldr	r3, [pc, #160]	; (15974 <MQTT_HandleGameMessages+0xf4>)
   158d4:	0011      	movs	r1, r2
   158d6:	0018      	movs	r0, r3
   158d8:	4b2a      	ldr	r3, [pc, #168]	; (15984 <MQTT_HandleGameMessages+0x104>)
   158da:	4798      	blx	r3
                if (gamePacket.game[iter + 1] != 0xFF && iter + 1 < GAME_SIZE) {
   158dc:	69fb      	ldr	r3, [r7, #28]
   158de:	3301      	adds	r3, #1
   158e0:	2208      	movs	r2, #8
   158e2:	18ba      	adds	r2, r7, r2
   158e4:	5cd3      	ldrb	r3, [r2, r3]
   158e6:	2bff      	cmp	r3, #255	; 0xff
   158e8:	d00c      	beq.n	15904 <MQTT_HandleGameMessages+0x84>
   158ea:	69fb      	ldr	r3, [r7, #28]
   158ec:	3301      	adds	r3, #1
   158ee:	2b13      	cmp	r3, #19
   158f0:	dc08      	bgt.n	15904 <MQTT_HandleGameMessages+0x84>
                    snprintf(numGame, 5, ",");
   158f2:	003b      	movs	r3, r7
   158f4:	222c      	movs	r2, #44	; 0x2c
   158f6:	801a      	strh	r2, [r3, #0]
                    strcat(mqtt_msg, numGame);
   158f8:	003a      	movs	r2, r7
   158fa:	4b1e      	ldr	r3, [pc, #120]	; (15974 <MQTT_HandleGameMessages+0xf4>)
   158fc:	0011      	movs	r1, r2
   158fe:	0018      	movs	r0, r3
   15900:	4b20      	ldr	r3, [pc, #128]	; (15984 <MQTT_HandleGameMessages+0x104>)
   15902:	4798      	blx	r3
        for (int iter = 0; iter < GAME_SIZE; iter++) {
   15904:	69fb      	ldr	r3, [r7, #28]
   15906:	3301      	adds	r3, #1
   15908:	61fb      	str	r3, [r7, #28]
   1590a:	69fb      	ldr	r3, [r7, #28]
   1590c:	2b13      	cmp	r3, #19
   1590e:	ddce      	ble.n	158ae <MQTT_HandleGameMessages+0x2e>
   15910:	e000      	b.n	15914 <MQTT_HandleGameMessages+0x94>
                }
            } else {
                break;
   15912:	46c0      	nop			; (mov r8, r8)
            }
        }
        strcat(mqtt_msg, "]}");
   15914:	4b17      	ldr	r3, [pc, #92]	; (15974 <MQTT_HandleGameMessages+0xf4>)
   15916:	0018      	movs	r0, r3
   15918:	4b1b      	ldr	r3, [pc, #108]	; (15988 <MQTT_HandleGameMessages+0x108>)
   1591a:	4798      	blx	r3
   1591c:	0003      	movs	r3, r0
   1591e:	001a      	movs	r2, r3
   15920:	4b14      	ldr	r3, [pc, #80]	; (15974 <MQTT_HandleGameMessages+0xf4>)
   15922:	18d2      	adds	r2, r2, r3
   15924:	4b19      	ldr	r3, [pc, #100]	; (1598c <MQTT_HandleGameMessages+0x10c>)
   15926:	0010      	movs	r0, r2
   15928:	0019      	movs	r1, r3
   1592a:	2303      	movs	r3, #3
   1592c:	001a      	movs	r2, r3
   1592e:	4b18      	ldr	r3, [pc, #96]	; (15990 <MQTT_HandleGameMessages+0x110>)
   15930:	4798      	blx	r3
        LogMessage(LOG_DEBUG_LVL, mqtt_msg);
   15932:	4b10      	ldr	r3, [pc, #64]	; (15974 <MQTT_HandleGameMessages+0xf4>)
   15934:	0019      	movs	r1, r3
   15936:	2001      	movs	r0, #1
   15938:	4b16      	ldr	r3, [pc, #88]	; (15994 <MQTT_HandleGameMessages+0x114>)
   1593a:	4798      	blx	r3
        LogMessage(LOG_DEBUG_LVL, "\r\n");
   1593c:	4b16      	ldr	r3, [pc, #88]	; (15998 <MQTT_HandleGameMessages+0x118>)
   1593e:	0019      	movs	r1, r3
   15940:	2001      	movs	r0, #1
   15942:	4b14      	ldr	r3, [pc, #80]	; (15994 <MQTT_HandleGameMessages+0x114>)
   15944:	4798      	blx	r3
        mqtt_publish(&mqtt_inst, GAME_TOPIC_OUT, mqtt_msg, strlen(mqtt_msg), 1, 0);
   15946:	4b0b      	ldr	r3, [pc, #44]	; (15974 <MQTT_HandleGameMessages+0xf4>)
   15948:	0018      	movs	r0, r3
   1594a:	4b0f      	ldr	r3, [pc, #60]	; (15988 <MQTT_HandleGameMessages+0x108>)
   1594c:	4798      	blx	r3
   1594e:	0004      	movs	r4, r0
   15950:	4a08      	ldr	r2, [pc, #32]	; (15974 <MQTT_HandleGameMessages+0xf4>)
   15952:	4912      	ldr	r1, [pc, #72]	; (1599c <MQTT_HandleGameMessages+0x11c>)
   15954:	4812      	ldr	r0, [pc, #72]	; (159a0 <MQTT_HandleGameMessages+0x120>)
   15956:	2300      	movs	r3, #0
   15958:	9301      	str	r3, [sp, #4]
   1595a:	2301      	movs	r3, #1
   1595c:	9300      	str	r3, [sp, #0]
   1595e:	0023      	movs	r3, r4
   15960:	4c10      	ldr	r4, [pc, #64]	; (159a4 <MQTT_HandleGameMessages+0x124>)
   15962:	47a0      	blx	r4
    }
}
   15964:	46c0      	nop			; (mov r8, r8)
   15966:	46bd      	mov	sp, r7
   15968:	b009      	add	sp, #36	; 0x24
   1596a:	bd90      	pop	{r4, r7, pc}
   1596c:	200004b0 	.word	0x200004b0
   15970:	00019719 	.word	0x00019719
   15974:	20000040 	.word	0x20000040
   15978:	00034dc4 	.word	0x00034dc4
   1597c:	00035048 	.word	0x00035048
   15980:	00033371 	.word	0x00033371
   15984:	00033455 	.word	0x00033455
   15988:	000334cf 	.word	0x000334cf
   1598c:	000350bc 	.word	0x000350bc
   15990:	000330e1 	.word	0x000330e1
   15994:	0001c605 	.word	0x0001c605
   15998:	000350c0 	.word	0x000350c0
   1599c:	000350c4 	.word	0x000350c4
   159a0:	2000071c 	.word	0x2000071c
   159a4:	0002e19d 	.word	0x0002e19d

000159a8 <vWifiTask>:
 * Application entry point.
 *
 * \return program return value.
 */
void vWifiTask(void *pvParameters)
{
   159a8:	b590      	push	{r4, r7, lr}
   159aa:	b08d      	sub	sp, #52	; 0x34
   159ac:	af02      	add	r7, sp, #8
   159ae:	6078      	str	r0, [r7, #4]
    tstrWifiInitParam param;
    int8_t ret;
    vTaskDelay(100);
   159b0:	2064      	movs	r0, #100	; 0x64
   159b2:	4b79      	ldr	r3, [pc, #484]	; (15b98 <vWifiTask+0x1f0>)
   159b4:	4798      	blx	r3
    init_state();
   159b6:	4b79      	ldr	r3, [pc, #484]	; (15b9c <vWifiTask+0x1f4>)
   159b8:	4798      	blx	r3
    // Create buffers to send data
    xQueueWifiState = xQueueCreate(5, sizeof(uint32_t));
   159ba:	2200      	movs	r2, #0
   159bc:	2104      	movs	r1, #4
   159be:	2005      	movs	r0, #5
   159c0:	4b77      	ldr	r3, [pc, #476]	; (15ba0 <vWifiTask+0x1f8>)
   159c2:	4798      	blx	r3
   159c4:	0002      	movs	r2, r0
   159c6:	4b77      	ldr	r3, [pc, #476]	; (15ba4 <vWifiTask+0x1fc>)
   159c8:	601a      	str	r2, [r3, #0]
    xQueueImuBuffer = xQueueCreate(5, sizeof(struct ImuDataPacket));
   159ca:	2200      	movs	r2, #0
   159cc:	2106      	movs	r1, #6
   159ce:	2005      	movs	r0, #5
   159d0:	4b73      	ldr	r3, [pc, #460]	; (15ba0 <vWifiTask+0x1f8>)
   159d2:	4798      	blx	r3
   159d4:	0002      	movs	r2, r0
   159d6:	4b74      	ldr	r3, [pc, #464]	; (15ba8 <vWifiTask+0x200>)
   159d8:	601a      	str	r2, [r3, #0]
    xQueueGameBuffer = xQueueCreate(2, sizeof(struct GameDataPacket));
   159da:	2200      	movs	r2, #0
   159dc:	2114      	movs	r1, #20
   159de:	2002      	movs	r0, #2
   159e0:	4b6f      	ldr	r3, [pc, #444]	; (15ba0 <vWifiTask+0x1f8>)
   159e2:	4798      	blx	r3
   159e4:	0002      	movs	r2, r0
   159e6:	4b71      	ldr	r3, [pc, #452]	; (15bac <vWifiTask+0x204>)
   159e8:	601a      	str	r2, [r3, #0]
    xQueueDistanceBuffer = xQueueCreate(5, sizeof(uint16_t));
   159ea:	2200      	movs	r2, #0
   159ec:	2102      	movs	r1, #2
   159ee:	2005      	movs	r0, #5
   159f0:	4b6b      	ldr	r3, [pc, #428]	; (15ba0 <vWifiTask+0x1f8>)
   159f2:	4798      	blx	r3
   159f4:	0002      	movs	r2, r0
   159f6:	4b6e      	ldr	r3, [pc, #440]	; (15bb0 <vWifiTask+0x208>)
   159f8:	601a      	str	r2, [r3, #0]

    if (xQueueWifiState == NULL || xQueueImuBuffer == NULL || xQueueGameBuffer == NULL || xQueueDistanceBuffer == NULL) {
   159fa:	4b6a      	ldr	r3, [pc, #424]	; (15ba4 <vWifiTask+0x1fc>)
   159fc:	681b      	ldr	r3, [r3, #0]
   159fe:	2b00      	cmp	r3, #0
   15a00:	d00b      	beq.n	15a1a <vWifiTask+0x72>
   15a02:	4b69      	ldr	r3, [pc, #420]	; (15ba8 <vWifiTask+0x200>)
   15a04:	681b      	ldr	r3, [r3, #0]
   15a06:	2b00      	cmp	r3, #0
   15a08:	d007      	beq.n	15a1a <vWifiTask+0x72>
   15a0a:	4b68      	ldr	r3, [pc, #416]	; (15bac <vWifiTask+0x204>)
   15a0c:	681b      	ldr	r3, [r3, #0]
   15a0e:	2b00      	cmp	r3, #0
   15a10:	d003      	beq.n	15a1a <vWifiTask+0x72>
   15a12:	4b67      	ldr	r3, [pc, #412]	; (15bb0 <vWifiTask+0x208>)
   15a14:	681b      	ldr	r3, [r3, #0]
   15a16:	2b00      	cmp	r3, #0
   15a18:	d103      	bne.n	15a22 <vWifiTask+0x7a>
        SerialConsoleWriteString("ERROR Initializing Wifi Data queues!\r\n");
   15a1a:	4b66      	ldr	r3, [pc, #408]	; (15bb4 <vWifiTask+0x20c>)
   15a1c:	0018      	movs	r0, r3
   15a1e:	4b66      	ldr	r3, [pc, #408]	; (15bb8 <vWifiTask+0x210>)
   15a20:	4798      	blx	r3
    }

    SerialConsoleWriteString("ESE516 - Wifi Init Code\r\n");
   15a22:	4b66      	ldr	r3, [pc, #408]	; (15bbc <vWifiTask+0x214>)
   15a24:	0018      	movs	r0, r3
   15a26:	4b64      	ldr	r3, [pc, #400]	; (15bb8 <vWifiTask+0x210>)
   15a28:	4798      	blx	r3
    /* Initialize the Timer. */
    configure_timer();
   15a2a:	4b65      	ldr	r3, [pc, #404]	; (15bc0 <vWifiTask+0x218>)
   15a2c:	4798      	blx	r3

    /* Initialize the HTTP client service. */
    configure_http_client();
   15a2e:	4b65      	ldr	r3, [pc, #404]	; (15bc4 <vWifiTask+0x21c>)
   15a30:	4798      	blx	r3

    /* Initialize the MQTT service. */
    configure_mqtt();
   15a32:	4b65      	ldr	r3, [pc, #404]	; (15bc8 <vWifiTask+0x220>)
   15a34:	4798      	blx	r3

    /* Initialize SD/MMC storage. */
    init_storage();
   15a36:	4b65      	ldr	r3, [pc, #404]	; (15bcc <vWifiTask+0x224>)
   15a38:	4798      	blx	r3

    /*Initialize BUTTON 0 as an external interrupt*/
    configure_extint_channel();
   15a3a:	4b65      	ldr	r3, [pc, #404]	; (15bd0 <vWifiTask+0x228>)
   15a3c:	4798      	blx	r3
    configure_extint_callbacks();
   15a3e:	4b65      	ldr	r3, [pc, #404]	; (15bd4 <vWifiTask+0x22c>)
   15a40:	4798      	blx	r3

    /* Initialize Wi-Fi parameters structure. */
    memset((uint8_t *)&param, 0, sizeof(tstrWifiInitParam));
   15a42:	230c      	movs	r3, #12
   15a44:	18fb      	adds	r3, r7, r3
   15a46:	2218      	movs	r2, #24
   15a48:	2100      	movs	r1, #0
   15a4a:	0018      	movs	r0, r3
   15a4c:	4b62      	ldr	r3, [pc, #392]	; (15bd8 <vWifiTask+0x230>)
   15a4e:	4798      	blx	r3

    nm_bsp_init();
   15a50:	4b62      	ldr	r3, [pc, #392]	; (15bdc <vWifiTask+0x234>)
   15a52:	4798      	blx	r3

    /* Initialize Wi-Fi driver with data and status callbacks. */
    param.pfAppWifiCb = wifi_cb;
   15a54:	230c      	movs	r3, #12
   15a56:	18fb      	adds	r3, r7, r3
   15a58:	4a61      	ldr	r2, [pc, #388]	; (15be0 <vWifiTask+0x238>)
   15a5a:	601a      	str	r2, [r3, #0]
    ret = m2m_wifi_init(&param);
   15a5c:	2327      	movs	r3, #39	; 0x27
   15a5e:	18fc      	adds	r4, r7, r3
   15a60:	230c      	movs	r3, #12
   15a62:	18fb      	adds	r3, r7, r3
   15a64:	0018      	movs	r0, r3
   15a66:	4b5f      	ldr	r3, [pc, #380]	; (15be4 <vWifiTask+0x23c>)
   15a68:	4798      	blx	r3
   15a6a:	0003      	movs	r3, r0
   15a6c:	7023      	strb	r3, [r4, #0]
    if (M2M_SUCCESS != ret) {
   15a6e:	2327      	movs	r3, #39	; 0x27
   15a70:	18fb      	adds	r3, r7, r3
   15a72:	781b      	ldrb	r3, [r3, #0]
   15a74:	b25b      	sxtb	r3, r3
   15a76:	2b00      	cmp	r3, #0
   15a78:	d009      	beq.n	15a8e <vWifiTask+0xe6>
        LogMessage(LOG_DEBUG_LVL, "main: m2m_wifi_init call error! (res %d)\r\n", ret);
   15a7a:	2327      	movs	r3, #39	; 0x27
   15a7c:	18fb      	adds	r3, r7, r3
   15a7e:	2200      	movs	r2, #0
   15a80:	569a      	ldrsb	r2, [r3, r2]
   15a82:	4b59      	ldr	r3, [pc, #356]	; (15be8 <vWifiTask+0x240>)
   15a84:	0019      	movs	r1, r3
   15a86:	2001      	movs	r0, #1
   15a88:	4b58      	ldr	r3, [pc, #352]	; (15bec <vWifiTask+0x244>)
   15a8a:	4798      	blx	r3
        while (1) {
   15a8c:	e7fe      	b.n	15a8c <vWifiTask+0xe4>
        }
    }

    LogMessage(LOG_DEBUG_LVL, "main: connecting to WiFi AP %s...\r\n", (char *)MAIN_WLAN_SSID);
   15a8e:	4a58      	ldr	r2, [pc, #352]	; (15bf0 <vWifiTask+0x248>)
   15a90:	4b58      	ldr	r3, [pc, #352]	; (15bf4 <vWifiTask+0x24c>)
   15a92:	0019      	movs	r1, r3
   15a94:	2001      	movs	r0, #1
   15a96:	4b55      	ldr	r3, [pc, #340]	; (15bec <vWifiTask+0x244>)
   15a98:	4798      	blx	r3

    // Re-enable socket for MQTT Transfer
    socketInit();
   15a9a:	4b57      	ldr	r3, [pc, #348]	; (15bf8 <vWifiTask+0x250>)
   15a9c:	4798      	blx	r3
    registerSocketCallback(socket_event_handler, socket_resolve_handler);
   15a9e:	4a57      	ldr	r2, [pc, #348]	; (15bfc <vWifiTask+0x254>)
   15aa0:	4b57      	ldr	r3, [pc, #348]	; (15c00 <vWifiTask+0x258>)
   15aa2:	0011      	movs	r1, r2
   15aa4:	0018      	movs	r0, r3
   15aa6:	4b57      	ldr	r3, [pc, #348]	; (15c04 <vWifiTask+0x25c>)
   15aa8:	4798      	blx	r3

    m2m_wifi_connect((char *)MAIN_WLAN_SSID, sizeof(MAIN_WLAN_SSID), MAIN_WLAN_AUTH, (char *)MAIN_WLAN_PSK, M2M_WIFI_CH_ALL);
   15aaa:	4a57      	ldr	r2, [pc, #348]	; (15c08 <vWifiTask+0x260>)
   15aac:	4850      	ldr	r0, [pc, #320]	; (15bf0 <vWifiTask+0x248>)
   15aae:	23ff      	movs	r3, #255	; 0xff
   15ab0:	9300      	str	r3, [sp, #0]
   15ab2:	0013      	movs	r3, r2
   15ab4:	2202      	movs	r2, #2
   15ab6:	2108      	movs	r1, #8
   15ab8:	4c54      	ldr	r4, [pc, #336]	; (15c0c <vWifiTask+0x264>)
   15aba:	47a0      	blx	r4

    while (!(is_state_set(WIFI_CONNECTED))) {
   15abc:	e006      	b.n	15acc <vWifiTask+0x124>
        /* Handle pending events from network controller. */
        m2m_wifi_handle_events(NULL);
   15abe:	2000      	movs	r0, #0
   15ac0:	4b53      	ldr	r3, [pc, #332]	; (15c10 <vWifiTask+0x268>)
   15ac2:	4798      	blx	r3
        /* Checks the timer timeout. */
        sw_timer_task(&swt_module_inst);
   15ac4:	4b53      	ldr	r3, [pc, #332]	; (15c14 <vWifiTask+0x26c>)
   15ac6:	0018      	movs	r0, r3
   15ac8:	4b53      	ldr	r3, [pc, #332]	; (15c18 <vWifiTask+0x270>)
   15aca:	4798      	blx	r3
    while (!(is_state_set(WIFI_CONNECTED))) {
   15acc:	2002      	movs	r0, #2
   15ace:	4b53      	ldr	r3, [pc, #332]	; (15c1c <vWifiTask+0x274>)
   15ad0:	4798      	blx	r3
   15ad2:	0003      	movs	r3, r0
   15ad4:	001a      	movs	r2, r3
   15ad6:	2301      	movs	r3, #1
   15ad8:	4053      	eors	r3, r2
   15ada:	b2db      	uxtb	r3, r3
   15adc:	2b00      	cmp	r3, #0
   15ade:	d1ee      	bne.n	15abe <vWifiTask+0x116>
    }

    vTaskDelay(1000);
   15ae0:	23fa      	movs	r3, #250	; 0xfa
   15ae2:	009b      	lsls	r3, r3, #2
   15ae4:	0018      	movs	r0, r3
   15ae6:	4b2c      	ldr	r3, [pc, #176]	; (15b98 <vWifiTask+0x1f0>)
   15ae8:	4798      	blx	r3

    wifiStateMachine = WIFI_MQTT_HANDLE;
   15aea:	4b4d      	ldr	r3, [pc, #308]	; (15c20 <vWifiTask+0x278>)
   15aec:	2201      	movs	r2, #1
   15aee:	701a      	strb	r2, [r3, #0]
    while (1) {
        switch (wifiStateMachine) {
   15af0:	4b4b      	ldr	r3, [pc, #300]	; (15c20 <vWifiTask+0x278>)
   15af2:	781b      	ldrb	r3, [r3, #0]
   15af4:	b25b      	sxtb	r3, r3
   15af6:	2b01      	cmp	r3, #1
   15af8:	d00b      	beq.n	15b12 <vWifiTask+0x16a>
   15afa:	dc02      	bgt.n	15b02 <vWifiTask+0x15a>
   15afc:	2b00      	cmp	r3, #0
   15afe:	d005      	beq.n	15b0c <vWifiTask+0x164>
   15b00:	e010      	b.n	15b24 <vWifiTask+0x17c>
   15b02:	2b02      	cmp	r3, #2
   15b04:	d008      	beq.n	15b18 <vWifiTask+0x170>
   15b06:	2b03      	cmp	r3, #3
   15b08:	d009      	beq.n	15b1e <vWifiTask+0x176>
   15b0a:	e00b      	b.n	15b24 <vWifiTask+0x17c>
            case (WIFI_MQTT_INIT): {
                MQTT_InitRoutine();
   15b0c:	4b45      	ldr	r3, [pc, #276]	; (15c24 <vWifiTask+0x27c>)
   15b0e:	4798      	blx	r3

                break;
   15b10:	e00c      	b.n	15b2c <vWifiTask+0x184>
            }

            case (WIFI_MQTT_HANDLE): {
                MQTT_HandleTransactions();
   15b12:	4b45      	ldr	r3, [pc, #276]	; (15c28 <vWifiTask+0x280>)
   15b14:	4798      	blx	r3
                break;
   15b16:	e009      	b.n	15b2c <vWifiTask+0x184>
            }

            case (WIFI_DOWNLOAD_INIT): {
                HTTP_DownloadFileInit();
   15b18:	4b44      	ldr	r3, [pc, #272]	; (15c2c <vWifiTask+0x284>)
   15b1a:	4798      	blx	r3
                break;
   15b1c:	e006      	b.n	15b2c <vWifiTask+0x184>
            }

            case (WIFI_DOWNLOAD_HANDLE): {
                HTTP_DownloadFileTransaction();
   15b1e:	4b44      	ldr	r3, [pc, #272]	; (15c30 <vWifiTask+0x288>)
   15b20:	4798      	blx	r3
                break;
   15b22:	e003      	b.n	15b2c <vWifiTask+0x184>
            }

            default:
                wifiStateMachine = WIFI_MQTT_INIT;
   15b24:	4b3e      	ldr	r3, [pc, #248]	; (15c20 <vWifiTask+0x278>)
   15b26:	2200      	movs	r2, #0
   15b28:	701a      	strb	r2, [r3, #0]
                break;
   15b2a:	46c0      	nop			; (mov r8, r8)
        }
        // Check if a new state was called
        uint8_t DataToReceive = 0;
   15b2c:	230b      	movs	r3, #11
   15b2e:	18fb      	adds	r3, r7, r3
   15b30:	2200      	movs	r2, #0
   15b32:	701a      	strb	r2, [r3, #0]
        if (pdPASS == xQueueReceive(xQueueWifiState, &DataToReceive, 0)) {
   15b34:	4b1b      	ldr	r3, [pc, #108]	; (15ba4 <vWifiTask+0x1fc>)
   15b36:	681b      	ldr	r3, [r3, #0]
   15b38:	220b      	movs	r2, #11
   15b3a:	18b9      	adds	r1, r7, r2
   15b3c:	2200      	movs	r2, #0
   15b3e:	0018      	movs	r0, r3
   15b40:	4b3c      	ldr	r3, [pc, #240]	; (15c34 <vWifiTask+0x28c>)
   15b42:	4798      	blx	r3
   15b44:	0003      	movs	r3, r0
   15b46:	2b01      	cmp	r3, #1
   15b48:	d105      	bne.n	15b56 <vWifiTask+0x1ae>
            wifiStateMachine = DataToReceive;  // Update new state
   15b4a:	230b      	movs	r3, #11
   15b4c:	18fb      	adds	r3, r7, r3
   15b4e:	781b      	ldrb	r3, [r3, #0]
   15b50:	b25a      	sxtb	r2, r3
   15b52:	4b33      	ldr	r3, [pc, #204]	; (15c20 <vWifiTask+0x278>)
   15b54:	701a      	strb	r2, [r3, #0]
        }

        // Check if we need to publish something. In this example, we publish the "temperature" when the button was pressed.
        if (isPressed) {
   15b56:	4b38      	ldr	r3, [pc, #224]	; (15c38 <vWifiTask+0x290>)
   15b58:	781b      	ldrb	r3, [r3, #0]
   15b5a:	b2db      	uxtb	r3, r3
   15b5c:	2b00      	cmp	r3, #0
   15b5e:	d017      	beq.n	15b90 <vWifiTask+0x1e8>
            mqtt_publish(&mqtt_inst, TEMPERATURE_TOPIC, mqtt_msg_temp, strlen(mqtt_msg_temp), 1, 0);
   15b60:	4b36      	ldr	r3, [pc, #216]	; (15c3c <vWifiTask+0x294>)
   15b62:	0018      	movs	r0, r3
   15b64:	4b36      	ldr	r3, [pc, #216]	; (15c40 <vWifiTask+0x298>)
   15b66:	4798      	blx	r3
   15b68:	0004      	movs	r4, r0
   15b6a:	4a34      	ldr	r2, [pc, #208]	; (15c3c <vWifiTask+0x294>)
   15b6c:	4935      	ldr	r1, [pc, #212]	; (15c44 <vWifiTask+0x29c>)
   15b6e:	4836      	ldr	r0, [pc, #216]	; (15c48 <vWifiTask+0x2a0>)
   15b70:	2300      	movs	r3, #0
   15b72:	9301      	str	r3, [sp, #4]
   15b74:	2301      	movs	r3, #1
   15b76:	9300      	str	r3, [sp, #0]
   15b78:	0023      	movs	r3, r4
   15b7a:	4c34      	ldr	r4, [pc, #208]	; (15c4c <vWifiTask+0x2a4>)
   15b7c:	47a0      	blx	r4
            LogMessage(LOG_DEBUG_LVL, "MQTT send %s\r\n", mqtt_msg_temp);
   15b7e:	4a2f      	ldr	r2, [pc, #188]	; (15c3c <vWifiTask+0x294>)
   15b80:	4b33      	ldr	r3, [pc, #204]	; (15c50 <vWifiTask+0x2a8>)
   15b82:	0019      	movs	r1, r3
   15b84:	2001      	movs	r0, #1
   15b86:	4b19      	ldr	r3, [pc, #100]	; (15bec <vWifiTask+0x244>)
   15b88:	4798      	blx	r3
            isPressed = false;
   15b8a:	4b2b      	ldr	r3, [pc, #172]	; (15c38 <vWifiTask+0x290>)
   15b8c:	2200      	movs	r2, #0
   15b8e:	701a      	strb	r2, [r3, #0]
        }

        vTaskDelay(100);
   15b90:	2064      	movs	r0, #100	; 0x64
   15b92:	4b01      	ldr	r3, [pc, #4]	; (15b98 <vWifiTask+0x1f0>)
   15b94:	4798      	blx	r3
    while (1) {
   15b96:	e7ab      	b.n	15af0 <vWifiTask+0x148>
   15b98:	0001a8c5 	.word	0x0001a8c5
   15b9c:	000145bd 	.word	0x000145bd
   15ba0:	00018bb9 	.word	0x00018bb9
   15ba4:	200004ac 	.word	0x200004ac
   15ba8:	200004b4 	.word	0x200004b4
   15bac:	200004b0 	.word	0x200004b0
   15bb0:	200004b8 	.word	0x200004b8
   15bb4:	000350d8 	.word	0x000350d8
   15bb8:	0001c519 	.word	0x0001c519
   15bbc:	00035100 	.word	0x00035100
   15bc0:	00014ffd 	.word	0x00014ffd
   15bc4:	00015039 	.word	0x00015039
   15bc8:	000153e5 	.word	0x000153e5
   15bcc:	00014f19 	.word	0x00014f19
   15bd0:	0001549d 	.word	0x0001549d
   15bd4:	000154dd 	.word	0x000154dd
   15bd8:	00033117 	.word	0x00033117
   15bdc:	0001eabd 	.word	0x0001eabd
   15be0:	00014dc5 	.word	0x00014dc5
   15be4:	00020595 	.word	0x00020595
   15be8:	0003511c 	.word	0x0003511c
   15bec:	0001c605 	.word	0x0001c605
   15bf0:	00034c1c 	.word	0x00034c1c
   15bf4:	00035148 	.word	0x00035148
   15bf8:	00023cf5 	.word	0x00023cf5
   15bfc:	000150ed 	.word	0x000150ed
   15c00:	000150b9 	.word	0x000150b9
   15c04:	00023d8d 	.word	0x00023d8d
   15c08:	00034c10 	.word	0x00034c10
   15c0c:	000207a5 	.word	0x000207a5
   15c10:	00020789 	.word	0x00020789
   15c14:	20004350 	.word	0x20004350
   15c18:	00030e7d 	.word	0x00030e7d
   15c1c:	0001462d 	.word	0x0001462d
   15c20:	200004a9 	.word	0x200004a9
   15c24:	00015709 	.word	0x00015709
   15c28:	000157a5 	.word	0x000157a5
   15c2c:	00015581 	.word	0x00015581
   15c30:	00015615 	.word	0x00015615
   15c34:	00019719 	.word	0x00019719
   15c38:	20000b54 	.word	0x20000b54
   15c3c:	20000080 	.word	0x20000080
   15c40:	000334cf 	.word	0x000334cf
   15c44:	0003516c 	.word	0x0003516c
   15c48:	2000071c 	.word	0x2000071c
   15c4c:	0002e19d 	.word	0x0002e19d
   15c50:	00035188 	.word	0x00035188

00015c54 <WifiHandlerSetState>:
    }
    return;
}

void WifiHandlerSetState(uint8_t state)
{
   15c54:	b590      	push	{r4, r7, lr}
   15c56:	b083      	sub	sp, #12
   15c58:	af00      	add	r7, sp, #0
   15c5a:	0002      	movs	r2, r0
   15c5c:	1dfb      	adds	r3, r7, #7
   15c5e:	701a      	strb	r2, [r3, #0]
    if (state <= WIFI_DOWNLOAD_HANDLE) {
   15c60:	1dfb      	adds	r3, r7, #7
   15c62:	781b      	ldrb	r3, [r3, #0]
   15c64:	2b03      	cmp	r3, #3
   15c66:	d806      	bhi.n	15c76 <WifiHandlerSetState+0x22>
        xQueueSend(xQueueWifiState, &state, (TickType_t)10);
   15c68:	4b05      	ldr	r3, [pc, #20]	; (15c80 <WifiHandlerSetState+0x2c>)
   15c6a:	6818      	ldr	r0, [r3, #0]
   15c6c:	1df9      	adds	r1, r7, #7
   15c6e:	2300      	movs	r3, #0
   15c70:	220a      	movs	r2, #10
   15c72:	4c04      	ldr	r4, [pc, #16]	; (15c84 <WifiHandlerSetState+0x30>)
   15c74:	47a0      	blx	r4
    }
}
   15c76:	46c0      	nop			; (mov r8, r8)
   15c78:	46bd      	mov	sp, r7
   15c7a:	b003      	add	sp, #12
   15c7c:	bd90      	pop	{r4, r7, pc}
   15c7e:	46c0      	nop			; (mov r8, r8)
   15c80:	200004ac 	.word	0x200004ac
   15c84:	00018e61 	.word	0x00018e61

00015c88 <system_gclk_chan_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void system_gclk_chan_get_config_defaults(
		struct system_gclk_chan_config *const config)
{
   15c88:	b580      	push	{r7, lr}
   15c8a:	b082      	sub	sp, #8
   15c8c:	af00      	add	r7, sp, #0
   15c8e:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->source_generator = GCLK_GENERATOR_0;
   15c90:	687b      	ldr	r3, [r7, #4]
   15c92:	2200      	movs	r2, #0
   15c94:	701a      	strb	r2, [r3, #0]
}
   15c96:	46c0      	nop			; (mov r8, r8)
   15c98:	46bd      	mov	sp, r7
   15c9a:	b002      	add	sp, #8
   15c9c:	bd80      	pop	{r7, pc}
	...

00015ca0 <system_apb_clock_set_mask>:
{
   15ca0:	b580      	push	{r7, lr}
   15ca2:	b082      	sub	sp, #8
   15ca4:	af00      	add	r7, sp, #0
   15ca6:	0002      	movs	r2, r0
   15ca8:	6039      	str	r1, [r7, #0]
   15caa:	1dfb      	adds	r3, r7, #7
   15cac:	701a      	strb	r2, [r3, #0]
	switch (bus) {
   15cae:	1dfb      	adds	r3, r7, #7
   15cb0:	781b      	ldrb	r3, [r3, #0]
   15cb2:	2b01      	cmp	r3, #1
   15cb4:	d00a      	beq.n	15ccc <system_apb_clock_set_mask+0x2c>
   15cb6:	2b02      	cmp	r3, #2
   15cb8:	d00f      	beq.n	15cda <system_apb_clock_set_mask+0x3a>
   15cba:	2b00      	cmp	r3, #0
   15cbc:	d114      	bne.n	15ce8 <system_apb_clock_set_mask+0x48>
			PM->APBAMASK.reg |= mask;
   15cbe:	4b0e      	ldr	r3, [pc, #56]	; (15cf8 <system_apb_clock_set_mask+0x58>)
   15cc0:	4a0d      	ldr	r2, [pc, #52]	; (15cf8 <system_apb_clock_set_mask+0x58>)
   15cc2:	6991      	ldr	r1, [r2, #24]
   15cc4:	683a      	ldr	r2, [r7, #0]
   15cc6:	430a      	orrs	r2, r1
   15cc8:	619a      	str	r2, [r3, #24]
			break;
   15cca:	e00f      	b.n	15cec <system_apb_clock_set_mask+0x4c>
			PM->APBBMASK.reg |= mask;
   15ccc:	4b0a      	ldr	r3, [pc, #40]	; (15cf8 <system_apb_clock_set_mask+0x58>)
   15cce:	4a0a      	ldr	r2, [pc, #40]	; (15cf8 <system_apb_clock_set_mask+0x58>)
   15cd0:	69d1      	ldr	r1, [r2, #28]
   15cd2:	683a      	ldr	r2, [r7, #0]
   15cd4:	430a      	orrs	r2, r1
   15cd6:	61da      	str	r2, [r3, #28]
			break;
   15cd8:	e008      	b.n	15cec <system_apb_clock_set_mask+0x4c>
			PM->APBCMASK.reg |= mask;
   15cda:	4b07      	ldr	r3, [pc, #28]	; (15cf8 <system_apb_clock_set_mask+0x58>)
   15cdc:	4a06      	ldr	r2, [pc, #24]	; (15cf8 <system_apb_clock_set_mask+0x58>)
   15cde:	6a11      	ldr	r1, [r2, #32]
   15ce0:	683a      	ldr	r2, [r7, #0]
   15ce2:	430a      	orrs	r2, r1
   15ce4:	621a      	str	r2, [r3, #32]
			break;
   15ce6:	e001      	b.n	15cec <system_apb_clock_set_mask+0x4c>
			return STATUS_ERR_INVALID_ARG;
   15ce8:	2317      	movs	r3, #23
   15cea:	e000      	b.n	15cee <system_apb_clock_set_mask+0x4e>
	return STATUS_OK;
   15cec:	2300      	movs	r3, #0
}
   15cee:	0018      	movs	r0, r3
   15cf0:	46bd      	mov	sp, r7
   15cf2:	b002      	add	sp, #8
   15cf4:	bd80      	pop	{r7, pc}
   15cf6:	46c0      	nop			; (mov r8, r8)
   15cf8:	40000400 	.word	0x40000400

00015cfc <system_pinmux_get_config_defaults>:
{
   15cfc:	b580      	push	{r7, lr}
   15cfe:	b082      	sub	sp, #8
   15d00:	af00      	add	r7, sp, #0
   15d02:	6078      	str	r0, [r7, #4]
	config->mux_position = SYSTEM_PINMUX_GPIO;
   15d04:	687b      	ldr	r3, [r7, #4]
   15d06:	2280      	movs	r2, #128	; 0x80
   15d08:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
   15d0a:	687b      	ldr	r3, [r7, #4]
   15d0c:	2200      	movs	r2, #0
   15d0e:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
   15d10:	687b      	ldr	r3, [r7, #4]
   15d12:	2201      	movs	r2, #1
   15d14:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
   15d16:	687b      	ldr	r3, [r7, #4]
   15d18:	2200      	movs	r2, #0
   15d1a:	70da      	strb	r2, [r3, #3]
}
   15d1c:	46c0      	nop			; (mov r8, r8)
   15d1e:	46bd      	mov	sp, r7
   15d20:	b002      	add	sp, #8
   15d22:	bd80      	pop	{r7, pc}

00015d24 <system_is_debugger_present>:
 * \retval true  Debugger is connected to the system
 * \retval false Debugger is not connected to the system
 *
 */
static inline bool system_is_debugger_present(void)
{
   15d24:	b580      	push	{r7, lr}
   15d26:	af00      	add	r7, sp, #0
	return DSU->STATUSB.reg & DSU_STATUSB_DBGPRES;
   15d28:	4b05      	ldr	r3, [pc, #20]	; (15d40 <system_is_debugger_present+0x1c>)
   15d2a:	789b      	ldrb	r3, [r3, #2]
   15d2c:	b2db      	uxtb	r3, r3
   15d2e:	001a      	movs	r2, r3
   15d30:	2302      	movs	r3, #2
   15d32:	4013      	ands	r3, r2
   15d34:	1e5a      	subs	r2, r3, #1
   15d36:	4193      	sbcs	r3, r2
   15d38:	b2db      	uxtb	r3, r3
}
   15d3a:	0018      	movs	r0, r3
   15d3c:	46bd      	mov	sp, r7
   15d3e:	bd80      	pop	{r7, pc}
   15d40:	41002000 	.word	0x41002000

00015d44 <system_interrupt_enter_critical_section>:
{
   15d44:	b580      	push	{r7, lr}
   15d46:	af00      	add	r7, sp, #0
	cpu_irq_enter_critical();
   15d48:	4b02      	ldr	r3, [pc, #8]	; (15d54 <system_interrupt_enter_critical_section+0x10>)
   15d4a:	4798      	blx	r3
}
   15d4c:	46c0      	nop			; (mov r8, r8)
   15d4e:	46bd      	mov	sp, r7
   15d50:	bd80      	pop	{r7, pc}
   15d52:	46c0      	nop			; (mov r8, r8)
   15d54:	000249ed 	.word	0x000249ed

00015d58 <system_interrupt_leave_critical_section>:
{
   15d58:	b580      	push	{r7, lr}
   15d5a:	af00      	add	r7, sp, #0
	cpu_irq_leave_critical();
   15d5c:	4b02      	ldr	r3, [pc, #8]	; (15d68 <system_interrupt_leave_critical_section+0x10>)
   15d5e:	4798      	blx	r3
}
   15d60:	46c0      	nop			; (mov r8, r8)
   15d62:	46bd      	mov	sp, r7
   15d64:	bd80      	pop	{r7, pc}
   15d66:	46c0      	nop			; (mov r8, r8)
   15d68:	00024a41 	.word	0x00024a41

00015d6c <system_interrupt_disable>:
{
   15d6c:	b580      	push	{r7, lr}
   15d6e:	b082      	sub	sp, #8
   15d70:	af00      	add	r7, sp, #0
   15d72:	0002      	movs	r2, r0
   15d74:	1dfb      	adds	r3, r7, #7
   15d76:	701a      	strb	r2, [r3, #0]
	NVIC->ICER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
   15d78:	4a07      	ldr	r2, [pc, #28]	; (15d98 <system_interrupt_disable+0x2c>)
   15d7a:	1dfb      	adds	r3, r7, #7
   15d7c:	781b      	ldrb	r3, [r3, #0]
   15d7e:	0019      	movs	r1, r3
   15d80:	231f      	movs	r3, #31
   15d82:	400b      	ands	r3, r1
   15d84:	2101      	movs	r1, #1
   15d86:	4099      	lsls	r1, r3
   15d88:	000b      	movs	r3, r1
   15d8a:	0019      	movs	r1, r3
   15d8c:	2380      	movs	r3, #128	; 0x80
   15d8e:	50d1      	str	r1, [r2, r3]
}
   15d90:	46c0      	nop			; (mov r8, r8)
   15d92:	46bd      	mov	sp, r7
   15d94:	b002      	add	sp, #8
   15d96:	bd80      	pop	{r7, pc}
   15d98:	e000e100 	.word	0xe000e100

00015d9c <i2c_master_is_syncing>:
{
   15d9c:	b580      	push	{r7, lr}
   15d9e:	b084      	sub	sp, #16
   15da0:	af00      	add	r7, sp, #0
   15da2:	6078      	str	r0, [r7, #4]
	SercomI2cm *const i2c_hw = &(module->hw->I2CM);
   15da4:	687b      	ldr	r3, [r7, #4]
   15da6:	681b      	ldr	r3, [r3, #0]
   15da8:	60fb      	str	r3, [r7, #12]
	return (i2c_hw->SYNCBUSY.reg & SERCOM_I2CM_SYNCBUSY_MASK);
   15daa:	68fb      	ldr	r3, [r7, #12]
   15dac:	69db      	ldr	r3, [r3, #28]
   15dae:	2207      	movs	r2, #7
   15db0:	4013      	ands	r3, r2
   15db2:	1e5a      	subs	r2, r3, #1
   15db4:	4193      	sbcs	r3, r2
   15db6:	b2db      	uxtb	r3, r3
}
   15db8:	0018      	movs	r0, r3
   15dba:	46bd      	mov	sp, r7
   15dbc:	b004      	add	sp, #16
   15dbe:	bd80      	pop	{r7, pc}

00015dc0 <_i2c_master_wait_for_sync>:
{
   15dc0:	b580      	push	{r7, lr}
   15dc2:	b082      	sub	sp, #8
   15dc4:	af00      	add	r7, sp, #0
   15dc6:	6078      	str	r0, [r7, #4]
	while (i2c_master_is_syncing(module)) {
   15dc8:	46c0      	nop			; (mov r8, r8)
   15dca:	687b      	ldr	r3, [r7, #4]
   15dcc:	0018      	movs	r0, r3
   15dce:	4b04      	ldr	r3, [pc, #16]	; (15de0 <_i2c_master_wait_for_sync+0x20>)
   15dd0:	4798      	blx	r3
   15dd2:	1e03      	subs	r3, r0, #0
   15dd4:	d1f9      	bne.n	15dca <_i2c_master_wait_for_sync+0xa>
}
   15dd6:	46c0      	nop			; (mov r8, r8)
   15dd8:	46bd      	mov	sp, r7
   15dda:	b002      	add	sp, #8
   15ddc:	bd80      	pop	{r7, pc}
   15dde:	46c0      	nop			; (mov r8, r8)
   15de0:	00015d9d 	.word	0x00015d9d

00015de4 <i2c_master_disable>:
 *
 * \param[in]  module  Pointer to the software module struct
 */
static inline void i2c_master_disable(
		const struct i2c_master_module *const module)
{
   15de4:	b580      	push	{r7, lr}
   15de6:	b084      	sub	sp, #16
   15de8:	af00      	add	r7, sp, #0
   15dea:	6078      	str	r0, [r7, #4]
	/* Sanity check of arguments */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
   15dec:	687b      	ldr	r3, [r7, #4]
   15dee:	681b      	ldr	r3, [r3, #0]
   15df0:	60fb      	str	r3, [r7, #12]

#if I2C_MASTER_CALLBACK_MODE == true
		/* Disable module interrupts */
		system_interrupt_disable(_sercom_get_interrupt_vector(module->hw));
   15df2:	687b      	ldr	r3, [r7, #4]
   15df4:	681b      	ldr	r3, [r3, #0]
   15df6:	0018      	movs	r0, r3
   15df8:	4b0d      	ldr	r3, [pc, #52]	; (15e30 <i2c_master_disable+0x4c>)
   15dfa:	4798      	blx	r3
   15dfc:	0003      	movs	r3, r0
   15dfe:	0018      	movs	r0, r3
   15e00:	4b0c      	ldr	r3, [pc, #48]	; (15e34 <i2c_master_disable+0x50>)
   15e02:	4798      	blx	r3
#endif

	/* Wait for module to sync */
	_i2c_master_wait_for_sync(module);
   15e04:	687b      	ldr	r3, [r7, #4]
   15e06:	0018      	movs	r0, r3
   15e08:	4b0b      	ldr	r3, [pc, #44]	; (15e38 <i2c_master_disable+0x54>)
   15e0a:	4798      	blx	r3

	/* Disbale interrupt */
	i2c_module->INTENCLR.reg = SERCOM_I2CM_INTENCLR_MASK;
   15e0c:	68fb      	ldr	r3, [r7, #12]
   15e0e:	2283      	movs	r2, #131	; 0x83
   15e10:	751a      	strb	r2, [r3, #20]
	/* Clear interrupt flag */
	i2c_module->INTFLAG.reg = SERCOM_I2CM_INTFLAG_MASK;
   15e12:	68fb      	ldr	r3, [r7, #12]
   15e14:	2283      	movs	r2, #131	; 0x83
   15e16:	761a      	strb	r2, [r3, #24]

	/* Disable module */
	i2c_module->CTRLA.reg &= ~SERCOM_I2CM_CTRLA_ENABLE;
   15e18:	68fb      	ldr	r3, [r7, #12]
   15e1a:	681b      	ldr	r3, [r3, #0]
   15e1c:	2202      	movs	r2, #2
   15e1e:	4393      	bics	r3, r2
   15e20:	001a      	movs	r2, r3
   15e22:	68fb      	ldr	r3, [r7, #12]
   15e24:	601a      	str	r2, [r3, #0]

}
   15e26:	46c0      	nop			; (mov r8, r8)
   15e28:	46bd      	mov	sp, r7
   15e2a:	b004      	add	sp, #16
   15e2c:	bd80      	pop	{r7, pc}
   15e2e:	46c0      	nop			; (mov r8, r8)
   15e30:	00025ec1 	.word	0x00025ec1
   15e34:	00015d6d 	.word	0x00015d6d
   15e38:	00015dc1 	.word	0x00015dc1

00015e3c <_i2c_master_set_config>:
 *                                          with set GCLK frequency
 */
static enum status_code _i2c_master_set_config(
		struct i2c_master_module *const module,
		const struct i2c_master_config *const config)
{
   15e3c:	b5f0      	push	{r4, r5, r6, r7, lr}
   15e3e:	b097      	sub	sp, #92	; 0x5c
   15e40:	af00      	add	r7, sp, #0
   15e42:	6178      	str	r0, [r7, #20]
   15e44:	6139      	str	r1, [r7, #16]
	Assert(module->hw);
	Assert(config);

	/* Temporary variables. */
	uint32_t tmp_ctrla;
	int32_t tmp_baud = 0;
   15e46:	2300      	movs	r3, #0
   15e48:	63fb      	str	r3, [r7, #60]	; 0x3c
	int32_t tmp_baud_hs = 0;
   15e4a:	2300      	movs	r3, #0
   15e4c:	653b      	str	r3, [r7, #80]	; 0x50
	int32_t tmp_baudlow_hs = 0;
   15e4e:	2300      	movs	r3, #0
   15e50:	64fb      	str	r3, [r7, #76]	; 0x4c
	enum status_code tmp_status_code = STATUS_OK;
   15e52:	233b      	movs	r3, #59	; 0x3b
   15e54:	2210      	movs	r2, #16
   15e56:	4694      	mov	ip, r2
   15e58:	44bc      	add	ip, r7
   15e5a:	4463      	add	r3, ip
   15e5c:	2200      	movs	r2, #0
   15e5e:	701a      	strb	r2, [r3, #0]

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
   15e60:	697b      	ldr	r3, [r7, #20]
   15e62:	681b      	ldr	r3, [r3, #0]
   15e64:	63bb      	str	r3, [r7, #56]	; 0x38
	Sercom *const sercom_hw = module->hw;
   15e66:	697b      	ldr	r3, [r7, #20]
   15e68:	681b      	ldr	r3, [r3, #0]
   15e6a:	637b      	str	r3, [r7, #52]	; 0x34

	uint8_t sercom_index = _sercom_get_sercom_inst_index(sercom_hw);
   15e6c:	2323      	movs	r3, #35	; 0x23
   15e6e:	2210      	movs	r2, #16
   15e70:	18ba      	adds	r2, r7, r2
   15e72:	18d4      	adds	r4, r2, r3
   15e74:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   15e76:	0018      	movs	r0, r3
   15e78:	4bc0      	ldr	r3, [pc, #768]	; (1617c <_i2c_master_set_config+0x340>)
   15e7a:	4798      	blx	r3
   15e7c:	0003      	movs	r3, r0
   15e7e:	7023      	strb	r3, [r4, #0]

	/* Pin configuration */
	struct system_pinmux_config pin_conf;
	system_pinmux_get_config_defaults(&pin_conf);
   15e80:	230c      	movs	r3, #12
   15e82:	2210      	movs	r2, #16
   15e84:	4694      	mov	ip, r2
   15e86:	44bc      	add	ip, r7
   15e88:	4463      	add	r3, ip
   15e8a:	0018      	movs	r0, r3
   15e8c:	4bbc      	ldr	r3, [pc, #752]	; (16180 <_i2c_master_set_config+0x344>)
   15e8e:	4798      	blx	r3

	uint32_t pad0 = config->pinmux_pad0;
   15e90:	693b      	ldr	r3, [r7, #16]
   15e92:	69db      	ldr	r3, [r3, #28]
   15e94:	647b      	str	r3, [r7, #68]	; 0x44
	uint32_t pad1 = config->pinmux_pad1;
   15e96:	693b      	ldr	r3, [r7, #16]
   15e98:	6a1b      	ldr	r3, [r3, #32]
   15e9a:	643b      	str	r3, [r7, #64]	; 0x40

	/* SERCOM PAD0 - SDA */
	if (pad0 == PINMUX_DEFAULT) {
   15e9c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   15e9e:	2b00      	cmp	r3, #0
   15ea0:	d106      	bne.n	15eb0 <_i2c_master_set_config+0x74>
		pad0 = _sercom_get_default_pad(sercom_hw, 0);
   15ea2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   15ea4:	2100      	movs	r1, #0
   15ea6:	0018      	movs	r0, r3
   15ea8:	4bb6      	ldr	r3, [pc, #728]	; (16184 <_i2c_master_set_config+0x348>)
   15eaa:	4798      	blx	r3
   15eac:	0003      	movs	r3, r0
   15eae:	647b      	str	r3, [r7, #68]	; 0x44
	}
	pin_conf.mux_position = pad0 & 0xFFFF;
   15eb0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   15eb2:	b2da      	uxtb	r2, r3
   15eb4:	230c      	movs	r3, #12
   15eb6:	2110      	movs	r1, #16
   15eb8:	468c      	mov	ip, r1
   15eba:	44bc      	add	ip, r7
   15ebc:	4463      	add	r3, ip
   15ebe:	701a      	strb	r2, [r3, #0]
	pin_conf.direction    = SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK;
   15ec0:	230c      	movs	r3, #12
   15ec2:	2210      	movs	r2, #16
   15ec4:	4694      	mov	ip, r2
   15ec6:	44bc      	add	ip, r7
   15ec8:	4463      	add	r3, ip
   15eca:	2202      	movs	r2, #2
   15ecc:	705a      	strb	r2, [r3, #1]
	system_pinmux_pin_set_config(pad0 >> 16, &pin_conf);
   15ece:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   15ed0:	0c1b      	lsrs	r3, r3, #16
   15ed2:	b2db      	uxtb	r3, r3
   15ed4:	220c      	movs	r2, #12
   15ed6:	2110      	movs	r1, #16
   15ed8:	468c      	mov	ip, r1
   15eda:	44bc      	add	ip, r7
   15edc:	4462      	add	r2, ip
   15ede:	0011      	movs	r1, r2
   15ee0:	0018      	movs	r0, r3
   15ee2:	4ba9      	ldr	r3, [pc, #676]	; (16188 <_i2c_master_set_config+0x34c>)
   15ee4:	4798      	blx	r3

	/* SERCOM PAD1 - SCL */
	if (pad1 == PINMUX_DEFAULT) {
   15ee6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   15ee8:	2b00      	cmp	r3, #0
   15eea:	d106      	bne.n	15efa <_i2c_master_set_config+0xbe>
		pad1 = _sercom_get_default_pad(sercom_hw, 1);
   15eec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   15eee:	2101      	movs	r1, #1
   15ef0:	0018      	movs	r0, r3
   15ef2:	4ba4      	ldr	r3, [pc, #656]	; (16184 <_i2c_master_set_config+0x348>)
   15ef4:	4798      	blx	r3
   15ef6:	0003      	movs	r3, r0
   15ef8:	643b      	str	r3, [r7, #64]	; 0x40
	}
	pin_conf.mux_position = pad1 & 0xFFFF;
   15efa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   15efc:	b2da      	uxtb	r2, r3
   15efe:	230c      	movs	r3, #12
   15f00:	2110      	movs	r1, #16
   15f02:	468c      	mov	ip, r1
   15f04:	44bc      	add	ip, r7
   15f06:	4463      	add	r3, ip
   15f08:	701a      	strb	r2, [r3, #0]
	pin_conf.direction    = SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK;
   15f0a:	230c      	movs	r3, #12
   15f0c:	2210      	movs	r2, #16
   15f0e:	4694      	mov	ip, r2
   15f10:	44bc      	add	ip, r7
   15f12:	4463      	add	r3, ip
   15f14:	2202      	movs	r2, #2
   15f16:	705a      	strb	r2, [r3, #1]
	system_pinmux_pin_set_config(pad1 >> 16, &pin_conf);
   15f18:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   15f1a:	0c1b      	lsrs	r3, r3, #16
   15f1c:	b2db      	uxtb	r3, r3
   15f1e:	220c      	movs	r2, #12
   15f20:	2110      	movs	r1, #16
   15f22:	468c      	mov	ip, r1
   15f24:	44bc      	add	ip, r7
   15f26:	4462      	add	r2, ip
   15f28:	0011      	movs	r1, r2
   15f2a:	0018      	movs	r0, r3
   15f2c:	4b96      	ldr	r3, [pc, #600]	; (16188 <_i2c_master_set_config+0x34c>)
   15f2e:	4798      	blx	r3

	/* Save timeout on unknown bus state in software module. */
	module->unknown_bus_state_timeout = config->unknown_bus_state_timeout;
   15f30:	693b      	ldr	r3, [r7, #16]
   15f32:	8a9a      	ldrh	r2, [r3, #20]
   15f34:	697b      	ldr	r3, [r7, #20]
   15f36:	80da      	strh	r2, [r3, #6]

	/* Save timeout on buffer write. */
	module->buffer_timeout = config->buffer_timeout;
   15f38:	693b      	ldr	r3, [r7, #16]
   15f3a:	8ada      	ldrh	r2, [r3, #22]
   15f3c:	697b      	ldr	r3, [r7, #20]
   15f3e:	811a      	strh	r2, [r3, #8]

	/* Set whether module should run in standby. */
	if (config->run_in_standby || system_is_debugger_present()) {
   15f40:	693b      	ldr	r3, [r7, #16]
   15f42:	7e1b      	ldrb	r3, [r3, #24]
   15f44:	2b00      	cmp	r3, #0
   15f46:	d103      	bne.n	15f50 <_i2c_master_set_config+0x114>
   15f48:	4b90      	ldr	r3, [pc, #576]	; (1618c <_i2c_master_set_config+0x350>)
   15f4a:	4798      	blx	r3
   15f4c:	1e03      	subs	r3, r0, #0
   15f4e:	d002      	beq.n	15f56 <_i2c_master_set_config+0x11a>
		tmp_ctrla = SERCOM_I2CM_CTRLA_RUNSTDBY;
   15f50:	2380      	movs	r3, #128	; 0x80
   15f52:	657b      	str	r3, [r7, #84]	; 0x54
   15f54:	e001      	b.n	15f5a <_i2c_master_set_config+0x11e>
	} else {
		tmp_ctrla = 0;
   15f56:	2300      	movs	r3, #0
   15f58:	657b      	str	r3, [r7, #84]	; 0x54
	}

	/* Check and set start data hold timeout. */
	if (config->start_hold_time != I2C_MASTER_START_HOLD_TIME_DISABLED) {
   15f5a:	693b      	ldr	r3, [r7, #16]
   15f5c:	691b      	ldr	r3, [r3, #16]
   15f5e:	2b00      	cmp	r3, #0
   15f60:	d004      	beq.n	15f6c <_i2c_master_set_config+0x130>
		tmp_ctrla |= config->start_hold_time;
   15f62:	693b      	ldr	r3, [r7, #16]
   15f64:	691b      	ldr	r3, [r3, #16]
   15f66:	6d7a      	ldr	r2, [r7, #84]	; 0x54
   15f68:	4313      	orrs	r3, r2
   15f6a:	657b      	str	r3, [r7, #84]	; 0x54
	}

	/* Check and set transfer speed */
	tmp_ctrla |= config->transfer_speed;
   15f6c:	693b      	ldr	r3, [r7, #16]
   15f6e:	689b      	ldr	r3, [r3, #8]
   15f70:	6d7a      	ldr	r2, [r7, #84]	; 0x54
   15f72:	4313      	orrs	r3, r2
   15f74:	657b      	str	r3, [r7, #84]	; 0x54

	/* Check and set SCL low timeout. */
	if (config->scl_low_timeout) {
   15f76:	693b      	ldr	r3, [r7, #16]
   15f78:	2224      	movs	r2, #36	; 0x24
   15f7a:	5c9b      	ldrb	r3, [r3, r2]
   15f7c:	2b00      	cmp	r3, #0
   15f7e:	d004      	beq.n	15f8a <_i2c_master_set_config+0x14e>
		tmp_ctrla |= SERCOM_I2CM_CTRLA_LOWTOUTEN;
   15f80:	6d7b      	ldr	r3, [r7, #84]	; 0x54
   15f82:	2280      	movs	r2, #128	; 0x80
   15f84:	05d2      	lsls	r2, r2, #23
   15f86:	4313      	orrs	r3, r2
   15f88:	657b      	str	r3, [r7, #84]	; 0x54
	}

	/* Check and set inactive bus timeout. */
	if (config->inactive_timeout != I2C_MASTER_INACTIVE_TIMEOUT_DISABLED) {
   15f8a:	693b      	ldr	r3, [r7, #16]
   15f8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   15f8e:	2b00      	cmp	r3, #0
   15f90:	d004      	beq.n	15f9c <_i2c_master_set_config+0x160>
		tmp_ctrla |= config->inactive_timeout;
   15f92:	693b      	ldr	r3, [r7, #16]
   15f94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   15f96:	6d7a      	ldr	r2, [r7, #84]	; 0x54
   15f98:	4313      	orrs	r3, r2
   15f9a:	657b      	str	r3, [r7, #84]	; 0x54
	}

	/* Check and set SCL clock stretch mode. */
	if (config->scl_stretch_only_after_ack_bit || (config->transfer_speed == I2C_MASTER_SPEED_HIGH_SPEED)) {
   15f9c:	693b      	ldr	r3, [r7, #16]
   15f9e:	222c      	movs	r2, #44	; 0x2c
   15fa0:	5c9b      	ldrb	r3, [r3, r2]
   15fa2:	2b00      	cmp	r3, #0
   15fa4:	d105      	bne.n	15fb2 <_i2c_master_set_config+0x176>
   15fa6:	693b      	ldr	r3, [r7, #16]
   15fa8:	689a      	ldr	r2, [r3, #8]
   15faa:	2380      	movs	r3, #128	; 0x80
   15fac:	049b      	lsls	r3, r3, #18
   15fae:	429a      	cmp	r2, r3
   15fb0:	d104      	bne.n	15fbc <_i2c_master_set_config+0x180>
		tmp_ctrla |= SERCOM_I2CM_CTRLA_SCLSM;
   15fb2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
   15fb4:	2280      	movs	r2, #128	; 0x80
   15fb6:	0512      	lsls	r2, r2, #20
   15fb8:	4313      	orrs	r3, r2
   15fba:	657b      	str	r3, [r7, #84]	; 0x54
	}

	/* Check and set slave SCL low extend timeout. */
	if (config->slave_scl_low_extend_timeout) {
   15fbc:	693b      	ldr	r3, [r7, #16]
   15fbe:	222d      	movs	r2, #45	; 0x2d
   15fc0:	5c9b      	ldrb	r3, [r3, r2]
   15fc2:	2b00      	cmp	r3, #0
   15fc4:	d004      	beq.n	15fd0 <_i2c_master_set_config+0x194>
		tmp_ctrla |= SERCOM_I2CM_CTRLA_SEXTTOEN;
   15fc6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
   15fc8:	2280      	movs	r2, #128	; 0x80
   15fca:	0412      	lsls	r2, r2, #16
   15fcc:	4313      	orrs	r3, r2
   15fce:	657b      	str	r3, [r7, #84]	; 0x54
	}

	/* Check and set master SCL low extend timeout. */
	if (config->master_scl_low_extend_timeout) {
   15fd0:	693b      	ldr	r3, [r7, #16]
   15fd2:	222e      	movs	r2, #46	; 0x2e
   15fd4:	5c9b      	ldrb	r3, [r3, r2]
   15fd6:	2b00      	cmp	r3, #0
   15fd8:	d004      	beq.n	15fe4 <_i2c_master_set_config+0x1a8>
		tmp_ctrla |= SERCOM_I2CM_CTRLA_MEXTTOEN;
   15fda:	6d7b      	ldr	r3, [r7, #84]	; 0x54
   15fdc:	2280      	movs	r2, #128	; 0x80
   15fde:	03d2      	lsls	r2, r2, #15
   15fe0:	4313      	orrs	r3, r2
   15fe2:	657b      	str	r3, [r7, #84]	; 0x54
	}

	/* Write config to register CTRLA. */
	i2c_module->CTRLA.reg |= tmp_ctrla;
   15fe4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   15fe6:	681a      	ldr	r2, [r3, #0]
   15fe8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
   15fea:	431a      	orrs	r2, r3
   15fec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   15fee:	601a      	str	r2, [r3, #0]

	/* Set configurations in CTRLB. */
	i2c_module->CTRLB.reg = SERCOM_I2CM_CTRLB_SMEN;
   15ff0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   15ff2:	2280      	movs	r2, #128	; 0x80
   15ff4:	0052      	lsls	r2, r2, #1
   15ff6:	605a      	str	r2, [r3, #4]

	/* Find and set baudrate, considering sda/scl rise time */
	uint32_t fgclk       = system_gclk_chan_get_hz(SERCOM0_GCLK_ID_CORE + sercom_index);
   15ff8:	2323      	movs	r3, #35	; 0x23
   15ffa:	2210      	movs	r2, #16
   15ffc:	4694      	mov	ip, r2
   15ffe:	44bc      	add	ip, r7
   16000:	4463      	add	r3, ip
   16002:	781b      	ldrb	r3, [r3, #0]
   16004:	3314      	adds	r3, #20
   16006:	b2db      	uxtb	r3, r3
   16008:	0018      	movs	r0, r3
   1600a:	4b61      	ldr	r3, [pc, #388]	; (16190 <_i2c_master_set_config+0x354>)
   1600c:	4798      	blx	r3
   1600e:	0003      	movs	r3, r0
   16010:	62fb      	str	r3, [r7, #44]	; 0x2c
	uint32_t fscl        = 1000 * config->baud_rate;
   16012:	693b      	ldr	r3, [r7, #16]
   16014:	681b      	ldr	r3, [r3, #0]
   16016:	22fa      	movs	r2, #250	; 0xfa
   16018:	0092      	lsls	r2, r2, #2
   1601a:	4353      	muls	r3, r2
   1601c:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t fscl_hs     = 1000 * config->baud_rate_high_speed;
   1601e:	693b      	ldr	r3, [r7, #16]
   16020:	685b      	ldr	r3, [r3, #4]
   16022:	22fa      	movs	r2, #250	; 0xfa
   16024:	0092      	lsls	r2, r2, #2
   16026:	4353      	muls	r3, r2
   16028:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t trise       = config->sda_scl_rise_time_ns;
   1602a:	693b      	ldr	r3, [r7, #16]
   1602c:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
   1602e:	623b      	str	r3, [r7, #32]
	
	tmp_baud = (int32_t)(div_ceil(
   16030:	4b58      	ldr	r3, [pc, #352]	; (16194 <_i2c_master_set_config+0x358>)
   16032:	6af8      	ldr	r0, [r7, #44]	; 0x2c
   16034:	4798      	blx	r3
   16036:	0005      	movs	r5, r0
   16038:	000e      	movs	r6, r1
   1603a:	4b56      	ldr	r3, [pc, #344]	; (16194 <_i2c_master_set_config+0x358>)
   1603c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
   1603e:	4798      	blx	r3
   16040:	60b8      	str	r0, [r7, #8]
   16042:	60f9      	str	r1, [r7, #12]
   16044:	4b53      	ldr	r3, [pc, #332]	; (16194 <_i2c_master_set_config+0x358>)
   16046:	6af8      	ldr	r0, [r7, #44]	; 0x2c
   16048:	4798      	blx	r3
   1604a:	4c53      	ldr	r4, [pc, #332]	; (16198 <_i2c_master_set_config+0x35c>)
   1604c:	4a53      	ldr	r2, [pc, #332]	; (1619c <_i2c_master_set_config+0x360>)
   1604e:	4b54      	ldr	r3, [pc, #336]	; (161a0 <_i2c_master_set_config+0x364>)
   16050:	47a0      	blx	r4
   16052:	0003      	movs	r3, r0
   16054:	000c      	movs	r4, r1
   16056:	603b      	str	r3, [r7, #0]
   16058:	607c      	str	r4, [r7, #4]
   1605a:	4b4e      	ldr	r3, [pc, #312]	; (16194 <_i2c_master_set_config+0x358>)
   1605c:	6a38      	ldr	r0, [r7, #32]
   1605e:	4798      	blx	r3
   16060:	0002      	movs	r2, r0
   16062:	000b      	movs	r3, r1
   16064:	4c4c      	ldr	r4, [pc, #304]	; (16198 <_i2c_master_set_config+0x35c>)
   16066:	6838      	ldr	r0, [r7, #0]
   16068:	6879      	ldr	r1, [r7, #4]
   1606a:	47a0      	blx	r4
   1606c:	0003      	movs	r3, r0
   1606e:	000c      	movs	r4, r1
   16070:	0018      	movs	r0, r3
   16072:	0021      	movs	r1, r4
   16074:	4c4b      	ldr	r4, [pc, #300]	; (161a4 <_i2c_master_set_config+0x368>)
   16076:	2200      	movs	r2, #0
   16078:	4b4b      	ldr	r3, [pc, #300]	; (161a8 <_i2c_master_set_config+0x36c>)
   1607a:	47a0      	blx	r4
   1607c:	0003      	movs	r3, r0
   1607e:	000c      	movs	r4, r1
   16080:	001a      	movs	r2, r3
   16082:	0023      	movs	r3, r4
   16084:	4c44      	ldr	r4, [pc, #272]	; (16198 <_i2c_master_set_config+0x35c>)
   16086:	68b8      	ldr	r0, [r7, #8]
   16088:	68f9      	ldr	r1, [r7, #12]
   1608a:	47a0      	blx	r4
   1608c:	0003      	movs	r3, r0
   1608e:	000c      	movs	r4, r1
   16090:	001a      	movs	r2, r3
   16092:	0023      	movs	r3, r4
   16094:	4c45      	ldr	r4, [pc, #276]	; (161ac <_i2c_master_set_config+0x370>)
   16096:	0028      	movs	r0, r5
   16098:	0031      	movs	r1, r6
   1609a:	47a0      	blx	r4
   1609c:	0003      	movs	r3, r0
   1609e:	000c      	movs	r4, r1
   160a0:	001d      	movs	r5, r3
   160a2:	0026      	movs	r6, r4
   160a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
   160a6:	005a      	lsls	r2, r3, #1
   160a8:	4b3a      	ldr	r3, [pc, #232]	; (16194 <_i2c_master_set_config+0x358>)
   160aa:	0010      	movs	r0, r2
   160ac:	4798      	blx	r3
   160ae:	0002      	movs	r2, r0
   160b0:	000b      	movs	r3, r1
   160b2:	4c3c      	ldr	r4, [pc, #240]	; (161a4 <_i2c_master_set_config+0x368>)
   160b4:	0028      	movs	r0, r5
   160b6:	0031      	movs	r1, r6
   160b8:	47a0      	blx	r4
   160ba:	0003      	movs	r3, r0
   160bc:	000c      	movs	r4, r1
   160be:	0018      	movs	r0, r3
   160c0:	0021      	movs	r1, r4
   160c2:	4c3a      	ldr	r4, [pc, #232]	; (161ac <_i2c_master_set_config+0x370>)
   160c4:	2200      	movs	r2, #0
   160c6:	4b3a      	ldr	r3, [pc, #232]	; (161b0 <_i2c_master_set_config+0x374>)
   160c8:	47a0      	blx	r4
   160ca:	0003      	movs	r3, r0
   160cc:	000c      	movs	r4, r1
   160ce:	001d      	movs	r5, r3
   160d0:	0026      	movs	r6, r4
   160d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
   160d4:	005a      	lsls	r2, r3, #1
   160d6:	4b2f      	ldr	r3, [pc, #188]	; (16194 <_i2c_master_set_config+0x358>)
   160d8:	0010      	movs	r0, r2
   160da:	4798      	blx	r3
   160dc:	0002      	movs	r2, r0
   160de:	000b      	movs	r3, r1
   160e0:	4c34      	ldr	r4, [pc, #208]	; (161b4 <_i2c_master_set_config+0x378>)
   160e2:	0028      	movs	r0, r5
   160e4:	0031      	movs	r1, r6
   160e6:	47a0      	blx	r4
   160e8:	0003      	movs	r3, r0
   160ea:	000c      	movs	r4, r1
   160ec:	0019      	movs	r1, r3
   160ee:	0022      	movs	r2, r4
   160f0:	4b31      	ldr	r3, [pc, #196]	; (161b8 <_i2c_master_set_config+0x37c>)
   160f2:	0008      	movs	r0, r1
   160f4:	0011      	movs	r1, r2
   160f6:	4798      	blx	r3
   160f8:	0003      	movs	r3, r0
   160fa:	63fb      	str	r3, [r7, #60]	; 0x3c
			fgclk - fscl * (10 + (fgclk * 0.000000001)* trise), 2 * fscl));
	
	/* For High speed mode, set the SCL ratio of high:low to 1:2. */
	if (config->transfer_speed == I2C_MASTER_SPEED_HIGH_SPEED) {
   160fc:	693b      	ldr	r3, [r7, #16]
   160fe:	689a      	ldr	r2, [r3, #8]
   16100:	2380      	movs	r3, #128	; 0x80
   16102:	049b      	lsls	r3, r3, #18
   16104:	429a      	cmp	r2, r3
   16106:	d16a      	bne.n	161de <_i2c_master_set_config+0x3a2>
		tmp_baudlow_hs = (int32_t)((fgclk * 2.0) / (3.0 * fscl_hs) - 1);
   16108:	4b22      	ldr	r3, [pc, #136]	; (16194 <_i2c_master_set_config+0x358>)
   1610a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
   1610c:	4798      	blx	r3
   1610e:	4c25      	ldr	r4, [pc, #148]	; (161a4 <_i2c_master_set_config+0x368>)
   16110:	0002      	movs	r2, r0
   16112:	000b      	movs	r3, r1
   16114:	47a0      	blx	r4
   16116:	0003      	movs	r3, r0
   16118:	000c      	movs	r4, r1
   1611a:	001d      	movs	r5, r3
   1611c:	0026      	movs	r6, r4
   1611e:	4b1d      	ldr	r3, [pc, #116]	; (16194 <_i2c_master_set_config+0x358>)
   16120:	6a78      	ldr	r0, [r7, #36]	; 0x24
   16122:	4798      	blx	r3
   16124:	4c1c      	ldr	r4, [pc, #112]	; (16198 <_i2c_master_set_config+0x35c>)
   16126:	2200      	movs	r2, #0
   16128:	4b24      	ldr	r3, [pc, #144]	; (161bc <_i2c_master_set_config+0x380>)
   1612a:	47a0      	blx	r4
   1612c:	0003      	movs	r3, r0
   1612e:	000c      	movs	r4, r1
   16130:	001a      	movs	r2, r3
   16132:	0023      	movs	r3, r4
   16134:	4c1f      	ldr	r4, [pc, #124]	; (161b4 <_i2c_master_set_config+0x378>)
   16136:	0028      	movs	r0, r5
   16138:	0031      	movs	r1, r6
   1613a:	47a0      	blx	r4
   1613c:	0003      	movs	r3, r0
   1613e:	000c      	movs	r4, r1
   16140:	0018      	movs	r0, r3
   16142:	0021      	movs	r1, r4
   16144:	4c19      	ldr	r4, [pc, #100]	; (161ac <_i2c_master_set_config+0x370>)
   16146:	2200      	movs	r2, #0
   16148:	4b19      	ldr	r3, [pc, #100]	; (161b0 <_i2c_master_set_config+0x374>)
   1614a:	47a0      	blx	r4
   1614c:	0003      	movs	r3, r0
   1614e:	000c      	movs	r4, r1
   16150:	0019      	movs	r1, r3
   16152:	0022      	movs	r2, r4
   16154:	4b18      	ldr	r3, [pc, #96]	; (161b8 <_i2c_master_set_config+0x37c>)
   16156:	0008      	movs	r0, r1
   16158:	0011      	movs	r1, r2
   1615a:	4798      	blx	r3
   1615c:	0003      	movs	r3, r0
   1615e:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (tmp_baudlow_hs) {
   16160:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   16162:	2b00      	cmp	r3, #0
   16164:	d02e      	beq.n	161c4 <_i2c_master_set_config+0x388>
			tmp_baud_hs = (int32_t)(fgclk / fscl_hs) - 2 - tmp_baudlow_hs;
   16166:	4b16      	ldr	r3, [pc, #88]	; (161c0 <_i2c_master_set_config+0x384>)
   16168:	6a79      	ldr	r1, [r7, #36]	; 0x24
   1616a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
   1616c:	4798      	blx	r3
   1616e:	0003      	movs	r3, r0
   16170:	1e9a      	subs	r2, r3, #2
   16172:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   16174:	1ad3      	subs	r3, r2, r3
   16176:	653b      	str	r3, [r7, #80]	; 0x50
   16178:	e031      	b.n	161de <_i2c_master_set_config+0x3a2>
   1617a:	46c0      	nop			; (mov r8, r8)
   1617c:	00025df1 	.word	0x00025df1
   16180:	00015cfd 	.word	0x00015cfd
   16184:	00025c35 	.word	0x00025c35
   16188:	000289e1 	.word	0x000289e1
   1618c:	00015d25 	.word	0x00015d25
   16190:	000287a5 	.word	0x000287a5
   16194:	00032fb9 	.word	0x00032fb9
   16198:	00032425 	.word	0x00032425
   1619c:	e826d695 	.word	0xe826d695
   161a0:	3e112e0b 	.word	0x3e112e0b
   161a4:	0003179d 	.word	0x0003179d
   161a8:	40240000 	.word	0x40240000
   161ac:	00032925 	.word	0x00032925
   161b0:	3ff00000 	.word	0x3ff00000
   161b4:	00031dbd 	.word	0x00031dbd
   161b8:	00032f51 	.word	0x00032f51
   161bc:	40080000 	.word	0x40080000
   161c0:	000310ed 	.word	0x000310ed
		} else {
			tmp_baud_hs = (int32_t)(div_ceil(fgclk, 2 * fscl_hs)) - 1;
   161c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   161c6:	005a      	lsls	r2, r3, #1
   161c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   161ca:	18d3      	adds	r3, r2, r3
   161cc:	1e5a      	subs	r2, r3, #1
   161ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   161d0:	0059      	lsls	r1, r3, #1
   161d2:	4b1d      	ldr	r3, [pc, #116]	; (16248 <_i2c_master_set_config+0x40c>)
   161d4:	0010      	movs	r0, r2
   161d6:	4798      	blx	r3
   161d8:	0003      	movs	r3, r0
   161da:	3b01      	subs	r3, #1
   161dc:	653b      	str	r3, [r7, #80]	; 0x50
		}
	}

	/* Check that baudrate is supported at current speed. */
	if (tmp_baud > 255 || tmp_baud < 0 || tmp_baud_hs > 255 || tmp_baud_hs < 0) {
   161de:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   161e0:	2bff      	cmp	r3, #255	; 0xff
   161e2:	dc08      	bgt.n	161f6 <_i2c_master_set_config+0x3ba>
   161e4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   161e6:	2b00      	cmp	r3, #0
   161e8:	db05      	blt.n	161f6 <_i2c_master_set_config+0x3ba>
   161ea:	6d3b      	ldr	r3, [r7, #80]	; 0x50
   161ec:	2bff      	cmp	r3, #255	; 0xff
   161ee:	dc02      	bgt.n	161f6 <_i2c_master_set_config+0x3ba>
   161f0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
   161f2:	2b00      	cmp	r3, #0
   161f4:	da06      	bge.n	16204 <_i2c_master_set_config+0x3c8>
		/* Baud rate not supported. */
		tmp_status_code = STATUS_ERR_BAUDRATE_UNAVAILABLE;
   161f6:	233b      	movs	r3, #59	; 0x3b
   161f8:	2210      	movs	r2, #16
   161fa:	4694      	mov	ip, r2
   161fc:	44bc      	add	ip, r7
   161fe:	4463      	add	r3, ip
   16200:	2240      	movs	r2, #64	; 0x40
   16202:	701a      	strb	r2, [r3, #0]
	}
	if (tmp_status_code != STATUS_ERR_BAUDRATE_UNAVAILABLE) {
   16204:	233b      	movs	r3, #59	; 0x3b
   16206:	2210      	movs	r2, #16
   16208:	4694      	mov	ip, r2
   1620a:	44bc      	add	ip, r7
   1620c:	4463      	add	r3, ip
   1620e:	781b      	ldrb	r3, [r3, #0]
   16210:	2b40      	cmp	r3, #64	; 0x40
   16212:	d00e      	beq.n	16232 <_i2c_master_set_config+0x3f6>
		/* Baud rate acceptable. */
		i2c_module->BAUD.reg = SERCOM_I2CM_BAUD_BAUD(tmp_baud) |
   16214:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   16216:	22ff      	movs	r2, #255	; 0xff
   16218:	401a      	ands	r2, r3
			SERCOM_I2CM_BAUD_HSBAUD(tmp_baud_hs) | SERCOM_I2CM_BAUD_HSBAUDLOW(tmp_baudlow_hs);
   1621a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
   1621c:	041b      	lsls	r3, r3, #16
   1621e:	0019      	movs	r1, r3
   16220:	23ff      	movs	r3, #255	; 0xff
   16222:	041b      	lsls	r3, r3, #16
   16224:	400b      	ands	r3, r1
		i2c_module->BAUD.reg = SERCOM_I2CM_BAUD_BAUD(tmp_baud) |
   16226:	4313      	orrs	r3, r2
			SERCOM_I2CM_BAUD_HSBAUD(tmp_baud_hs) | SERCOM_I2CM_BAUD_HSBAUDLOW(tmp_baudlow_hs);
   16228:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
   1622a:	0612      	lsls	r2, r2, #24
   1622c:	431a      	orrs	r2, r3
		i2c_module->BAUD.reg = SERCOM_I2CM_BAUD_BAUD(tmp_baud) |
   1622e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   16230:	60da      	str	r2, [r3, #12]
	}

	return tmp_status_code;
   16232:	233b      	movs	r3, #59	; 0x3b
   16234:	2210      	movs	r2, #16
   16236:	4694      	mov	ip, r2
   16238:	44bc      	add	ip, r7
   1623a:	4463      	add	r3, ip
   1623c:	781b      	ldrb	r3, [r3, #0]
}
   1623e:	0018      	movs	r0, r3
   16240:	46bd      	mov	sp, r7
   16242:	b017      	add	sp, #92	; 0x5c
   16244:	bdf0      	pop	{r4, r5, r6, r7, pc}
   16246:	46c0      	nop			; (mov r8, r8)
   16248:	000310ed 	.word	0x000310ed

0001624c <i2c_master_init>:
 */
enum status_code i2c_master_init(
		struct i2c_master_module *const module,
		Sercom *const hw,
		const struct i2c_master_config *const config)
{
   1624c:	b590      	push	{r4, r7, lr}
   1624e:	b08b      	sub	sp, #44	; 0x2c
   16250:	af00      	add	r7, sp, #0
   16252:	60f8      	str	r0, [r7, #12]
   16254:	60b9      	str	r1, [r7, #8]
   16256:	607a      	str	r2, [r7, #4]
	Assert(module);
	Assert(hw);
	Assert(config);

	/* Initialize software module */
	module->hw = hw;
   16258:	68fb      	ldr	r3, [r7, #12]
   1625a:	68ba      	ldr	r2, [r7, #8]
   1625c:	601a      	str	r2, [r3, #0]

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
   1625e:	68fb      	ldr	r3, [r7, #12]
   16260:	681b      	ldr	r3, [r3, #0]
   16262:	627b      	str	r3, [r7, #36]	; 0x24

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
   16264:	68fb      	ldr	r3, [r7, #12]
   16266:	681b      	ldr	r3, [r3, #0]
   16268:	0018      	movs	r0, r3
   1626a:	4b3b      	ldr	r3, [pc, #236]	; (16358 <i2c_master_init+0x10c>)
   1626c:	4798      	blx	r3
   1626e:	0003      	movs	r3, r0
   16270:	623b      	str	r3, [r7, #32]
		gclk_index   = SERCOM5_GCLK_ID_CORE;
	} else {
		gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
	}
#else
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
   16272:	6a3b      	ldr	r3, [r7, #32]
   16274:	3302      	adds	r3, #2
   16276:	61fb      	str	r3, [r7, #28]
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
   16278:	6a3b      	ldr	r3, [r7, #32]
   1627a:	3314      	adds	r3, #20
   1627c:	61bb      	str	r3, [r7, #24]
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBD, 1 << pm_index);
	} else {
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
	}
#else
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
   1627e:	2201      	movs	r2, #1
   16280:	69fb      	ldr	r3, [r7, #28]
   16282:	409a      	lsls	r2, r3
   16284:	0013      	movs	r3, r2
   16286:	0019      	movs	r1, r3
   16288:	2002      	movs	r0, #2
   1628a:	4b34      	ldr	r3, [pc, #208]	; (1635c <i2c_master_init+0x110>)
   1628c:	4798      	blx	r3
#endif

	/* Set up the GCLK for the module */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
   1628e:	2314      	movs	r3, #20
   16290:	18fb      	adds	r3, r7, r3
   16292:	0018      	movs	r0, r3
   16294:	4b32      	ldr	r3, [pc, #200]	; (16360 <i2c_master_init+0x114>)
   16296:	4798      	blx	r3
	gclk_chan_conf.source_generator = config->generator_source;
   16298:	687b      	ldr	r3, [r7, #4]
   1629a:	7b1a      	ldrb	r2, [r3, #12]
   1629c:	2314      	movs	r3, #20
   1629e:	18fb      	adds	r3, r7, r3
   162a0:	701a      	strb	r2, [r3, #0]
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
   162a2:	69bb      	ldr	r3, [r7, #24]
   162a4:	b2db      	uxtb	r3, r3
   162a6:	2214      	movs	r2, #20
   162a8:	18ba      	adds	r2, r7, r2
   162aa:	0011      	movs	r1, r2
   162ac:	0018      	movs	r0, r3
   162ae:	4b2d      	ldr	r3, [pc, #180]	; (16364 <i2c_master_init+0x118>)
   162b0:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
   162b2:	69bb      	ldr	r3, [r7, #24]
   162b4:	b2db      	uxtb	r3, r3
   162b6:	0018      	movs	r0, r3
   162b8:	4b2b      	ldr	r3, [pc, #172]	; (16368 <i2c_master_init+0x11c>)
   162ba:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
   162bc:	687b      	ldr	r3, [r7, #4]
   162be:	7b1b      	ldrb	r3, [r3, #12]
   162c0:	2100      	movs	r1, #0
   162c2:	0018      	movs	r0, r3
   162c4:	4b29      	ldr	r3, [pc, #164]	; (1636c <i2c_master_init+0x120>)
   162c6:	4798      	blx	r3

	/* Check if module is enabled. */
	if (i2c_module->CTRLA.reg & SERCOM_I2CM_CTRLA_ENABLE) {
   162c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   162ca:	681b      	ldr	r3, [r3, #0]
   162cc:	2202      	movs	r2, #2
   162ce:	4013      	ands	r3, r2
   162d0:	d001      	beq.n	162d6 <i2c_master_init+0x8a>
		return STATUS_ERR_DENIED;
   162d2:	231c      	movs	r3, #28
   162d4:	e03b      	b.n	1634e <i2c_master_init+0x102>
	}

	/* Check if reset is in progress. */
	if (i2c_module->CTRLA.reg & SERCOM_I2CM_CTRLA_SWRST) {
   162d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   162d8:	681b      	ldr	r3, [r3, #0]
   162da:	2201      	movs	r2, #1
   162dc:	4013      	ands	r3, r2
   162de:	d001      	beq.n	162e4 <i2c_master_init+0x98>
		return STATUS_BUSY;
   162e0:	2305      	movs	r3, #5
   162e2:	e034      	b.n	1634e <i2c_master_init+0x102>
	}

#if I2C_MASTER_CALLBACK_MODE == true
	/* Get sercom instance index and register callback. */
	uint8_t instance_index = _sercom_get_sercom_inst_index(module->hw);
   162e4:	68fb      	ldr	r3, [r7, #12]
   162e6:	681b      	ldr	r3, [r3, #0]
   162e8:	2217      	movs	r2, #23
   162ea:	18bc      	adds	r4, r7, r2
   162ec:	0018      	movs	r0, r3
   162ee:	4b1a      	ldr	r3, [pc, #104]	; (16358 <i2c_master_init+0x10c>)
   162f0:	4798      	blx	r3
   162f2:	0003      	movs	r3, r0
   162f4:	7023      	strb	r3, [r4, #0]
	_sercom_set_handler(instance_index, _i2c_master_interrupt_handler);
   162f6:	4a1e      	ldr	r2, [pc, #120]	; (16370 <i2c_master_init+0x124>)
   162f8:	2317      	movs	r3, #23
   162fa:	18fb      	adds	r3, r7, r3
   162fc:	781b      	ldrb	r3, [r3, #0]
   162fe:	0011      	movs	r1, r2
   16300:	0018      	movs	r0, r3
   16302:	4b1c      	ldr	r3, [pc, #112]	; (16374 <i2c_master_init+0x128>)
   16304:	4798      	blx	r3
	_sercom_instances[instance_index] = module;
   16306:	2317      	movs	r3, #23
   16308:	18fb      	adds	r3, r7, r3
   1630a:	781a      	ldrb	r2, [r3, #0]
   1630c:	4b1a      	ldr	r3, [pc, #104]	; (16378 <i2c_master_init+0x12c>)
   1630e:	0092      	lsls	r2, r2, #2
   16310:	68f9      	ldr	r1, [r7, #12]
   16312:	50d1      	str	r1, [r2, r3]

	/* Initialize values in module. */
	module->registered_callback = 0;
   16314:	68fb      	ldr	r3, [r7, #12]
   16316:	2200      	movs	r2, #0
   16318:	761a      	strb	r2, [r3, #24]
	module->enabled_callback = 0;
   1631a:	68fb      	ldr	r3, [r7, #12]
   1631c:	2200      	movs	r2, #0
   1631e:	765a      	strb	r2, [r3, #25]
	module->buffer_length = 0;
   16320:	68fb      	ldr	r3, [r7, #12]
   16322:	2200      	movs	r2, #0
   16324:	835a      	strh	r2, [r3, #26]
	module->buffer_remaining = 0;
   16326:	68fb      	ldr	r3, [r7, #12]
   16328:	2200      	movs	r2, #0
   1632a:	839a      	strh	r2, [r3, #28]

	module->status = STATUS_OK;
   1632c:	68fb      	ldr	r3, [r7, #12]
   1632e:	2225      	movs	r2, #37	; 0x25
   16330:	2100      	movs	r1, #0
   16332:	5499      	strb	r1, [r3, r2]
	module->buffer = NULL;
   16334:	68fb      	ldr	r3, [r7, #12]
   16336:	2200      	movs	r2, #0
   16338:	621a      	str	r2, [r3, #32]
#endif

	/* Set sercom module to operate in I2C master mode. */
	i2c_module->CTRLA.reg = SERCOM_I2CM_CTRLA_MODE(0x5);
   1633a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1633c:	2214      	movs	r2, #20
   1633e:	601a      	str	r2, [r3, #0]

	/* Set config and return status. */
	return _i2c_master_set_config(module, config);
   16340:	687a      	ldr	r2, [r7, #4]
   16342:	68fb      	ldr	r3, [r7, #12]
   16344:	0011      	movs	r1, r2
   16346:	0018      	movs	r0, r3
   16348:	4b0c      	ldr	r3, [pc, #48]	; (1637c <i2c_master_init+0x130>)
   1634a:	4798      	blx	r3
   1634c:	0003      	movs	r3, r0
}
   1634e:	0018      	movs	r0, r3
   16350:	46bd      	mov	sp, r7
   16352:	b00b      	add	sp, #44	; 0x2c
   16354:	bd90      	pop	{r4, r7, pc}
   16356:	46c0      	nop			; (mov r8, r8)
   16358:	00025df1 	.word	0x00025df1
   1635c:	00015ca1 	.word	0x00015ca1
   16360:	00015c89 	.word	0x00015c89
   16364:	00028681 	.word	0x00028681
   16368:	000286c5 	.word	0x000286c5
   1636c:	00025ba9 	.word	0x00025ba9
   16370:	00012bcd 	.word	0x00012bcd
   16374:	00025e55 	.word	0x00025e55
   16378:	200056a8 	.word	0x200056a8
   1637c:	00015e3d 	.word	0x00015e3d

00016380 <i2c_master_reset>:
 * Reset the module to hardware defaults.
 *
 * \param[in,out] module Pointer to software module structure
 */
void i2c_master_reset(struct i2c_master_module *const module)
{
   16380:	b580      	push	{r7, lr}
   16382:	b084      	sub	sp, #16
   16384:	af00      	add	r7, sp, #0
   16386:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
   16388:	687b      	ldr	r3, [r7, #4]
   1638a:	681b      	ldr	r3, [r3, #0]
   1638c:	60fb      	str	r3, [r7, #12]

	/* Wait for sync */
	_i2c_master_wait_for_sync(module);
   1638e:	687b      	ldr	r3, [r7, #4]
   16390:	0018      	movs	r0, r3
   16392:	4b0f      	ldr	r3, [pc, #60]	; (163d0 <i2c_master_reset+0x50>)
   16394:	4798      	blx	r3

	/* Disable module */
	i2c_master_disable(module);
   16396:	687b      	ldr	r3, [r7, #4]
   16398:	0018      	movs	r0, r3
   1639a:	4b0e      	ldr	r3, [pc, #56]	; (163d4 <i2c_master_reset+0x54>)
   1639c:	4798      	blx	r3

#if I2C_MASTER_CALLBACK_MODE == true
	/* Clear all pending interrupts */
	system_interrupt_enter_critical_section();
   1639e:	4b0e      	ldr	r3, [pc, #56]	; (163d8 <i2c_master_reset+0x58>)
   163a0:	4798      	blx	r3
	system_interrupt_clear_pending(_sercom_get_interrupt_vector(module->hw));
   163a2:	687b      	ldr	r3, [r7, #4]
   163a4:	681b      	ldr	r3, [r3, #0]
   163a6:	0018      	movs	r0, r3
   163a8:	4b0c      	ldr	r3, [pc, #48]	; (163dc <i2c_master_reset+0x5c>)
   163aa:	4798      	blx	r3
   163ac:	0003      	movs	r3, r0
   163ae:	0018      	movs	r0, r3
   163b0:	4b0b      	ldr	r3, [pc, #44]	; (163e0 <i2c_master_reset+0x60>)
   163b2:	4798      	blx	r3
	system_interrupt_leave_critical_section();
   163b4:	4b0b      	ldr	r3, [pc, #44]	; (163e4 <i2c_master_reset+0x64>)
   163b6:	4798      	blx	r3
#endif

	/* Wait for sync */
	_i2c_master_wait_for_sync(module);
   163b8:	687b      	ldr	r3, [r7, #4]
   163ba:	0018      	movs	r0, r3
   163bc:	4b04      	ldr	r3, [pc, #16]	; (163d0 <i2c_master_reset+0x50>)
   163be:	4798      	blx	r3

	/* Reset module */
	i2c_module->CTRLA.reg = SERCOM_I2CM_CTRLA_SWRST;
   163c0:	68fb      	ldr	r3, [r7, #12]
   163c2:	2201      	movs	r2, #1
   163c4:	601a      	str	r2, [r3, #0]
}
   163c6:	46c0      	nop			; (mov r8, r8)
   163c8:	46bd      	mov	sp, r7
   163ca:	b004      	add	sp, #16
   163cc:	bd80      	pop	{r7, pc}
   163ce:	46c0      	nop			; (mov r8, r8)
   163d0:	00015dc1 	.word	0x00015dc1
   163d4:	00015de5 	.word	0x00015de5
   163d8:	00015d45 	.word	0x00015d45
   163dc:	00025ec1 	.word	0x00025ec1
   163e0:	000287fd 	.word	0x000287fd
   163e4:	00015d59 	.word	0x00015d59

000163e8 <_i2c_master_address_response>:
 * \retval STATUS_ERR_BAD_ADDRESS       If slave is busy, or no slave
 *                                      acknowledged the address
 */
enum status_code _i2c_master_address_response(
		struct i2c_master_module *const module)
{
   163e8:	b580      	push	{r7, lr}
   163ea:	b084      	sub	sp, #16
   163ec:	af00      	add	r7, sp, #0
   163ee:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
   163f0:	687b      	ldr	r3, [r7, #4]
   163f2:	681b      	ldr	r3, [r3, #0]
   163f4:	60fb      	str	r3, [r7, #12]

	/* Check for error and ignore bus-error; workaround for BUSSTATE stuck in
	 * BUSY */
	if (i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB) {
   163f6:	68fb      	ldr	r3, [r7, #12]
   163f8:	7e1b      	ldrb	r3, [r3, #24]
   163fa:	b2db      	uxtb	r3, r3
   163fc:	001a      	movs	r2, r3
   163fe:	2302      	movs	r3, #2
   16400:	4013      	ands	r3, r2
   16402:	d00b      	beq.n	1641c <_i2c_master_address_response+0x34>

		/* Clear write interrupt flag */
		i2c_module->INTFLAG.reg = SERCOM_I2CM_INTFLAG_SB;
   16404:	68fb      	ldr	r3, [r7, #12]
   16406:	2202      	movs	r2, #2
   16408:	761a      	strb	r2, [r3, #24]

		/* Check arbitration. */
		if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_ARBLOST) {
   1640a:	68fb      	ldr	r3, [r7, #12]
   1640c:	8b5b      	ldrh	r3, [r3, #26]
   1640e:	b29b      	uxth	r3, r3
   16410:	001a      	movs	r2, r3
   16412:	2302      	movs	r3, #2
   16414:	4013      	ands	r3, r2
   16416:	d011      	beq.n	1643c <_i2c_master_address_response+0x54>
			/* Return packet collision. */
			return STATUS_ERR_PACKET_COLLISION;
   16418:	2341      	movs	r3, #65	; 0x41
   1641a:	e010      	b.n	1643e <_i2c_master_address_response+0x56>
		}
	/* Check that slave responded with ack. */
	} else if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_RXNACK) {
   1641c:	68fb      	ldr	r3, [r7, #12]
   1641e:	8b5b      	ldrh	r3, [r3, #26]
   16420:	b29b      	uxth	r3, r3
   16422:	001a      	movs	r2, r3
   16424:	2304      	movs	r3, #4
   16426:	4013      	ands	r3, r2
   16428:	d008      	beq.n	1643c <_i2c_master_address_response+0x54>
		/* Slave busy. Issue ack and stop command. */
		i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
   1642a:	68fb      	ldr	r3, [r7, #12]
   1642c:	685b      	ldr	r3, [r3, #4]
   1642e:	22c0      	movs	r2, #192	; 0xc0
   16430:	0292      	lsls	r2, r2, #10
   16432:	431a      	orrs	r2, r3
   16434:	68fb      	ldr	r3, [r7, #12]
   16436:	605a      	str	r2, [r3, #4]

		/* Return bad address value. */
		return STATUS_ERR_BAD_ADDRESS;
   16438:	2318      	movs	r3, #24
   1643a:	e000      	b.n	1643e <_i2c_master_address_response+0x56>
	}

	return STATUS_OK;
   1643c:	2300      	movs	r3, #0
}
   1643e:	0018      	movs	r0, r3
   16440:	46bd      	mov	sp, r7
   16442:	b004      	add	sp, #16
   16444:	bd80      	pop	{r7, pc}

00016446 <_i2c_master_wait_for_bus>:
 * \retval STATUS_ERR_TIMEOUT  If no response was given within specified timeout
 *                             period
 */
enum status_code _i2c_master_wait_for_bus(
		struct i2c_master_module *const module)
{
   16446:	b580      	push	{r7, lr}
   16448:	b084      	sub	sp, #16
   1644a:	af00      	add	r7, sp, #0
   1644c:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
   1644e:	687b      	ldr	r3, [r7, #4]
   16450:	681b      	ldr	r3, [r3, #0]
   16452:	60bb      	str	r3, [r7, #8]

	/* Wait for reply. */
	uint16_t timeout_counter = 0;
   16454:	230e      	movs	r3, #14
   16456:	18fb      	adds	r3, r7, r3
   16458:	2200      	movs	r2, #0
   1645a:	801a      	strh	r2, [r3, #0]
	while (!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB) &&
   1645c:	e00f      	b.n	1647e <_i2c_master_wait_for_bus+0x38>
			!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB)) {

		/* Check timeout condition. */
		if (++timeout_counter >= module->buffer_timeout) {
   1645e:	230e      	movs	r3, #14
   16460:	18fb      	adds	r3, r7, r3
   16462:	220e      	movs	r2, #14
   16464:	18ba      	adds	r2, r7, r2
   16466:	8812      	ldrh	r2, [r2, #0]
   16468:	3201      	adds	r2, #1
   1646a:	801a      	strh	r2, [r3, #0]
   1646c:	687b      	ldr	r3, [r7, #4]
   1646e:	891b      	ldrh	r3, [r3, #8]
   16470:	220e      	movs	r2, #14
   16472:	18ba      	adds	r2, r7, r2
   16474:	8812      	ldrh	r2, [r2, #0]
   16476:	429a      	cmp	r2, r3
   16478:	d301      	bcc.n	1647e <_i2c_master_wait_for_bus+0x38>
			return STATUS_ERR_TIMEOUT;
   1647a:	2312      	movs	r3, #18
   1647c:	e00e      	b.n	1649c <_i2c_master_wait_for_bus+0x56>
	while (!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB) &&
   1647e:	68bb      	ldr	r3, [r7, #8]
   16480:	7e1b      	ldrb	r3, [r3, #24]
   16482:	b2db      	uxtb	r3, r3
   16484:	001a      	movs	r2, r3
   16486:	2301      	movs	r3, #1
   16488:	4013      	ands	r3, r2
   1648a:	d106      	bne.n	1649a <_i2c_master_wait_for_bus+0x54>
			!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB)) {
   1648c:	68bb      	ldr	r3, [r7, #8]
   1648e:	7e1b      	ldrb	r3, [r3, #24]
   16490:	b2db      	uxtb	r3, r3
   16492:	001a      	movs	r2, r3
   16494:	2302      	movs	r3, #2
   16496:	4013      	ands	r3, r2
	while (!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB) &&
   16498:	d0e1      	beq.n	1645e <_i2c_master_wait_for_bus+0x18>
		}
	}
	return STATUS_OK;
   1649a:	2300      	movs	r3, #0
}
   1649c:	0018      	movs	r0, r3
   1649e:	46bd      	mov	sp, r7
   164a0:	b004      	add	sp, #16
   164a2:	bd80      	pop	{r7, pc}

000164a4 <_i2c_master_send_hs_master_code>:
 * \retval STATUS_OK           No error happen
 */
enum status_code _i2c_master_send_hs_master_code(
		struct i2c_master_module *const module,
		uint8_t hs_master_code)
{
   164a4:	b590      	push	{r4, r7, lr}
   164a6:	b085      	sub	sp, #20
   164a8:	af00      	add	r7, sp, #0
   164aa:	6078      	str	r0, [r7, #4]
   164ac:	000a      	movs	r2, r1
   164ae:	1cfb      	adds	r3, r7, #3
   164b0:	701a      	strb	r2, [r3, #0]
	SercomI2cm *const i2c_module = &(module->hw->I2CM);
   164b2:	687b      	ldr	r3, [r7, #4]
   164b4:	681b      	ldr	r3, [r3, #0]
   164b6:	60fb      	str	r3, [r7, #12]
	/* Return value. */
	enum status_code tmp_status;

	/* Set NACK for high speed code */
	i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
   164b8:	68fb      	ldr	r3, [r7, #12]
   164ba:	685b      	ldr	r3, [r3, #4]
   164bc:	2280      	movs	r2, #128	; 0x80
   164be:	02d2      	lsls	r2, r2, #11
   164c0:	431a      	orrs	r2, r3
   164c2:	68fb      	ldr	r3, [r7, #12]
   164c4:	605a      	str	r2, [r3, #4]
	/* Send high speed code */
	i2c_module->ADDR.reg = hs_master_code;
   164c6:	1cfb      	adds	r3, r7, #3
   164c8:	781a      	ldrb	r2, [r3, #0]
   164ca:	68fb      	ldr	r3, [r7, #12]
   164cc:	625a      	str	r2, [r3, #36]	; 0x24
	/* Wait for response on bus. */
	tmp_status = _i2c_master_wait_for_bus(module);
   164ce:	230b      	movs	r3, #11
   164d0:	18fc      	adds	r4, r7, r3
   164d2:	687b      	ldr	r3, [r7, #4]
   164d4:	0018      	movs	r0, r3
   164d6:	4b07      	ldr	r3, [pc, #28]	; (164f4 <_i2c_master_send_hs_master_code+0x50>)
   164d8:	4798      	blx	r3
   164da:	0003      	movs	r3, r0
   164dc:	7023      	strb	r3, [r4, #0]
	/* Clear write interrupt flag */
	i2c_module->INTFLAG.reg = SERCOM_I2CM_INTENCLR_MB;
   164de:	68fb      	ldr	r3, [r7, #12]
   164e0:	2201      	movs	r2, #1
   164e2:	761a      	strb	r2, [r3, #24]

	return tmp_status;
   164e4:	230b      	movs	r3, #11
   164e6:	18fb      	adds	r3, r7, r3
   164e8:	781b      	ldrb	r3, [r3, #0]
}
   164ea:	0018      	movs	r0, r3
   164ec:	46bd      	mov	sp, r7
   164ee:	b005      	add	sp, #20
   164f0:	bd90      	pop	{r4, r7, pc}
   164f2:	46c0      	nop			; (mov r8, r8)
   164f4:	00016447 	.word	0x00016447

000164f8 <TC3_Handler>:
#if (SAML21E) || (SAML21G) || (SAMR30E) || (SAMR30G)
	_TC_INTERRUPT_HANDLER(0,0)
	_TC_INTERRUPT_HANDLER(1,1)
	_TC_INTERRUPT_HANDLER(4,2)
#else
	MRECURSION(TC_INST_NUM, _TC_INTERRUPT_HANDLER, TC_INST_MAX_ID)
   164f8:	b580      	push	{r7, lr}
   164fa:	af00      	add	r7, sp, #0
   164fc:	2000      	movs	r0, #0
   164fe:	4b02      	ldr	r3, [pc, #8]	; (16508 <TC3_Handler+0x10>)
   16500:	4798      	blx	r3
   16502:	46c0      	nop			; (mov r8, r8)
   16504:	46bd      	mov	sp, r7
   16506:	bd80      	pop	{r7, pc}
   16508:	00016535 	.word	0x00016535

0001650c <TC4_Handler>:
   1650c:	b580      	push	{r7, lr}
   1650e:	af00      	add	r7, sp, #0
   16510:	2001      	movs	r0, #1
   16512:	4b02      	ldr	r3, [pc, #8]	; (1651c <TC4_Handler+0x10>)
   16514:	4798      	blx	r3
   16516:	46c0      	nop			; (mov r8, r8)
   16518:	46bd      	mov	sp, r7
   1651a:	bd80      	pop	{r7, pc}
   1651c:	00016535 	.word	0x00016535

00016520 <TC5_Handler>:
   16520:	b580      	push	{r7, lr}
   16522:	af00      	add	r7, sp, #0
   16524:	2002      	movs	r0, #2
   16526:	4b02      	ldr	r3, [pc, #8]	; (16530 <TC5_Handler+0x10>)
   16528:	4798      	blx	r3
   1652a:	46c0      	nop			; (mov r8, r8)
   1652c:	46bd      	mov	sp, r7
   1652e:	bd80      	pop	{r7, pc}
   16530:	00016535 	.word	0x00016535

00016534 <_tc_interrupt_handler>:
 * \param[in]  instance  ID of the TC instance calling the interrupt
 *                       handler
 */
void _tc_interrupt_handler(
		uint8_t instance)
{
   16534:	b580      	push	{r7, lr}
   16536:	b084      	sub	sp, #16
   16538:	af00      	add	r7, sp, #0
   1653a:	0002      	movs	r2, r0
   1653c:	1dfb      	adds	r3, r7, #7
   1653e:	701a      	strb	r2, [r3, #0]
	/* Temporary variable */
	uint8_t interrupt_and_callback_status_mask;

	/* Get device instance from the look-up table */
	struct tc_module *module
			= (struct tc_module *)_tc_instances[instance];
   16540:	1dfb      	adds	r3, r7, #7
   16542:	781a      	ldrb	r2, [r3, #0]
	struct tc_module *module
   16544:	4b28      	ldr	r3, [pc, #160]	; (165e8 <_tc_interrupt_handler+0xb4>)
   16546:	0092      	lsls	r2, r2, #2
   16548:	58d3      	ldr	r3, [r2, r3]
   1654a:	60fb      	str	r3, [r7, #12]

	/* Read and mask interrupt flag register */
	interrupt_and_callback_status_mask = module->hw->COUNT8.INTFLAG.reg &
   1654c:	68fb      	ldr	r3, [r7, #12]
   1654e:	681b      	ldr	r3, [r3, #0]
   16550:	7b9b      	ldrb	r3, [r3, #14]
   16552:	b2db      	uxtb	r3, r3
			module->register_callback_mask &
   16554:	68fa      	ldr	r2, [r7, #12]
   16556:	7e12      	ldrb	r2, [r2, #24]
	interrupt_and_callback_status_mask = module->hw->COUNT8.INTFLAG.reg &
   16558:	4013      	ands	r3, r2
   1655a:	b2da      	uxtb	r2, r3
			module->enable_callback_mask;
   1655c:	68fb      	ldr	r3, [r7, #12]
   1655e:	7e59      	ldrb	r1, [r3, #25]
	interrupt_and_callback_status_mask = module->hw->COUNT8.INTFLAG.reg &
   16560:	230b      	movs	r3, #11
   16562:	18fb      	adds	r3, r7, r3
   16564:	400a      	ands	r2, r1
   16566:	701a      	strb	r2, [r3, #0]

	/* Check if an Overflow interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_OVF) {
   16568:	230b      	movs	r3, #11
   1656a:	18fb      	adds	r3, r7, r3
   1656c:	781b      	ldrb	r3, [r3, #0]
   1656e:	2201      	movs	r2, #1
   16570:	4013      	ands	r3, r2
   16572:	d008      	beq.n	16586 <_tc_interrupt_handler+0x52>
		/* Invoke registered and enabled callback function */
		(module->callback[TC_CALLBACK_OVERFLOW])(module);
   16574:	68fb      	ldr	r3, [r7, #12]
   16576:	689b      	ldr	r3, [r3, #8]
   16578:	68fa      	ldr	r2, [r7, #12]
   1657a:	0010      	movs	r0, r2
   1657c:	4798      	blx	r3
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_OVF;
   1657e:	68fb      	ldr	r3, [r7, #12]
   16580:	681b      	ldr	r3, [r3, #0]
   16582:	2201      	movs	r2, #1
   16584:	739a      	strb	r2, [r3, #14]
	}

	/* Check if an Error interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_ERR) {
   16586:	230b      	movs	r3, #11
   16588:	18fb      	adds	r3, r7, r3
   1658a:	781b      	ldrb	r3, [r3, #0]
   1658c:	2202      	movs	r2, #2
   1658e:	4013      	ands	r3, r2
   16590:	d008      	beq.n	165a4 <_tc_interrupt_handler+0x70>
		/* Invoke registered and enabled callback function */
		(module->callback[TC_CALLBACK_ERROR])(module);
   16592:	68fb      	ldr	r3, [r7, #12]
   16594:	68db      	ldr	r3, [r3, #12]
   16596:	68fa      	ldr	r2, [r7, #12]
   16598:	0010      	movs	r0, r2
   1659a:	4798      	blx	r3
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_ERR;
   1659c:	68fb      	ldr	r3, [r7, #12]
   1659e:	681b      	ldr	r3, [r3, #0]
   165a0:	2202      	movs	r2, #2
   165a2:	739a      	strb	r2, [r3, #14]
	}

	/* Check if an Match/Capture Channel 0 interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_MC(1)) {
   165a4:	230b      	movs	r3, #11
   165a6:	18fb      	adds	r3, r7, r3
   165a8:	781b      	ldrb	r3, [r3, #0]
   165aa:	2210      	movs	r2, #16
   165ac:	4013      	ands	r3, r2
   165ae:	d008      	beq.n	165c2 <_tc_interrupt_handler+0x8e>
		/* Invoke registered and enabled callback function */
		(module->callback[TC_CALLBACK_CC_CHANNEL0])(module);
   165b0:	68fb      	ldr	r3, [r7, #12]
   165b2:	691b      	ldr	r3, [r3, #16]
   165b4:	68fa      	ldr	r2, [r7, #12]
   165b6:	0010      	movs	r0, r2
   165b8:	4798      	blx	r3
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_MC(1);
   165ba:	68fb      	ldr	r3, [r7, #12]
   165bc:	681b      	ldr	r3, [r3, #0]
   165be:	2210      	movs	r2, #16
   165c0:	739a      	strb	r2, [r3, #14]
	}

	/* Check if an Match/Capture Channel 1 interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_MC(2)) {
   165c2:	230b      	movs	r3, #11
   165c4:	18fb      	adds	r3, r7, r3
   165c6:	781b      	ldrb	r3, [r3, #0]
   165c8:	2220      	movs	r2, #32
   165ca:	4013      	ands	r3, r2
   165cc:	d008      	beq.n	165e0 <_tc_interrupt_handler+0xac>
		/* Invoke registered and enabled callback function */
		(module->callback[TC_CALLBACK_CC_CHANNEL1])(module);
   165ce:	68fb      	ldr	r3, [r7, #12]
   165d0:	695b      	ldr	r3, [r3, #20]
   165d2:	68fa      	ldr	r2, [r7, #12]
   165d4:	0010      	movs	r0, r2
   165d6:	4798      	blx	r3
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_MC(2);
   165d8:	68fb      	ldr	r3, [r7, #12]
   165da:	681b      	ldr	r3, [r3, #0]
   165dc:	2220      	movs	r2, #32
   165de:	739a      	strb	r2, [r3, #14]
	}
}
   165e0:	46c0      	nop			; (mov r8, r8)
   165e2:	46bd      	mov	sp, r7
   165e4:	b004      	add	sp, #16
   165e6:	bd80      	pop	{r7, pc}
   165e8:	20004490 	.word	0x20004490

000165ec <FreeRTOS_CLIRegisterCommand>:


/*-----------------------------------------------------------*/

BaseType_t FreeRTOS_CLIRegisterCommand( const CLI_Command_Definition_t * const pxCommandToRegister )
{
   165ec:	b580      	push	{r7, lr}
   165ee:	b084      	sub	sp, #16
   165f0:	af00      	add	r7, sp, #0
   165f2:	6078      	str	r0, [r7, #4]
static CLI_Definition_List_Item_t *pxLastCommandInList = &xRegisteredCommands;
CLI_Definition_List_Item_t *pxNewListItem;
BaseType_t xReturn = pdFAIL;
   165f4:	2300      	movs	r3, #0
   165f6:	60fb      	str	r3, [r7, #12]

	/* Check the parameter is not NULL. */
	configASSERT( pxCommandToRegister );
   165f8:	687b      	ldr	r3, [r7, #4]
   165fa:	2b00      	cmp	r3, #0
   165fc:	d101      	bne.n	16602 <FreeRTOS_CLIRegisterCommand+0x16>
   165fe:	b672      	cpsid	i
   16600:	e7fe      	b.n	16600 <FreeRTOS_CLIRegisterCommand+0x14>

	/* Create a new list item that will reference the command being registered. */
	pxNewListItem = ( CLI_Definition_List_Item_t * ) pvPortMalloc( sizeof( CLI_Definition_List_Item_t ) );
   16602:	2008      	movs	r0, #8
   16604:	4b11      	ldr	r3, [pc, #68]	; (1664c <FreeRTOS_CLIRegisterCommand+0x60>)
   16606:	4798      	blx	r3
   16608:	0003      	movs	r3, r0
   1660a:	60bb      	str	r3, [r7, #8]
	configASSERT( pxNewListItem );
   1660c:	68bb      	ldr	r3, [r7, #8]
   1660e:	2b00      	cmp	r3, #0
   16610:	d101      	bne.n	16616 <FreeRTOS_CLIRegisterCommand+0x2a>
   16612:	b672      	cpsid	i
   16614:	e7fe      	b.n	16614 <FreeRTOS_CLIRegisterCommand+0x28>

	if( pxNewListItem != NULL )
   16616:	68bb      	ldr	r3, [r7, #8]
   16618:	2b00      	cmp	r3, #0
   1661a:	d012      	beq.n	16642 <FreeRTOS_CLIRegisterCommand+0x56>
	{
		taskENTER_CRITICAL();
   1661c:	4b0c      	ldr	r3, [pc, #48]	; (16650 <FreeRTOS_CLIRegisterCommand+0x64>)
   1661e:	4798      	blx	r3
		{
			/* Reference the command being registered from the newly created
			list item. */
			pxNewListItem->pxCommandLineDefinition = pxCommandToRegister;
   16620:	68bb      	ldr	r3, [r7, #8]
   16622:	687a      	ldr	r2, [r7, #4]
   16624:	601a      	str	r2, [r3, #0]

			/* The new list item will get added to the end of the list, so
			pxNext has nowhere to point. */
			pxNewListItem->pxNext = NULL;
   16626:	68bb      	ldr	r3, [r7, #8]
   16628:	2200      	movs	r2, #0
   1662a:	605a      	str	r2, [r3, #4]

			/* Add the newly created list item to the end of the already existing
			list. */
			pxLastCommandInList->pxNext = pxNewListItem;
   1662c:	4b09      	ldr	r3, [pc, #36]	; (16654 <FreeRTOS_CLIRegisterCommand+0x68>)
   1662e:	681b      	ldr	r3, [r3, #0]
   16630:	68ba      	ldr	r2, [r7, #8]
   16632:	605a      	str	r2, [r3, #4]

			/* Set the end of list marker to the new list item. */
			pxLastCommandInList = pxNewListItem;
   16634:	4b07      	ldr	r3, [pc, #28]	; (16654 <FreeRTOS_CLIRegisterCommand+0x68>)
   16636:	68ba      	ldr	r2, [r7, #8]
   16638:	601a      	str	r2, [r3, #0]
		}
		taskEXIT_CRITICAL();
   1663a:	4b07      	ldr	r3, [pc, #28]	; (16658 <FreeRTOS_CLIRegisterCommand+0x6c>)
   1663c:	4798      	blx	r3

		xReturn = pdPASS;
   1663e:	2301      	movs	r3, #1
   16640:	60fb      	str	r3, [r7, #12]
	}

	return xReturn;
   16642:	68fb      	ldr	r3, [r7, #12]
}
   16644:	0018      	movs	r0, r3
   16646:	46bd      	mov	sp, r7
   16648:	b004      	add	sp, #16
   1664a:	bd80      	pop	{r7, pc}
   1664c:	00018a01 	.word	0x00018a01
   16650:	000188c9 	.word	0x000188c9
   16654:	20000110 	.word	0x20000110
   16658:	000188ed 	.word	0x000188ed

0001665c <FreeRTOS_CLIProcessCommand>:
/*-----------------------------------------------------------*/

BaseType_t FreeRTOS_CLIProcessCommand( const char * const pcCommandInput, char * pcWriteBuffer, size_t xWriteBufferLen  )
{
   1665c:	b580      	push	{r7, lr}
   1665e:	b088      	sub	sp, #32
   16660:	af00      	add	r7, sp, #0
   16662:	60f8      	str	r0, [r7, #12]
   16664:	60b9      	str	r1, [r7, #8]
   16666:	607a      	str	r2, [r7, #4]
static const CLI_Definition_List_Item_t *pxCommand = NULL;
BaseType_t xReturn = pdTRUE;
   16668:	2301      	movs	r3, #1
   1666a:	61fb      	str	r3, [r7, #28]
size_t xCommandStringLength;

	/* Note:  This function is not re-entrant.  It must not be called from more
	thank one task. */

	if( pxCommand == NULL )
   1666c:	4b3d      	ldr	r3, [pc, #244]	; (16764 <FreeRTOS_CLIProcessCommand+0x108>)
   1666e:	681b      	ldr	r3, [r3, #0]
   16670:	2b00      	cmp	r3, #0
   16672:	d144      	bne.n	166fe <FreeRTOS_CLIProcessCommand+0xa2>
	{
		/* Search for the command string in the list of registered commands. */
		for( pxCommand = &xRegisteredCommands; pxCommand != NULL; pxCommand = pxCommand->pxNext )
   16674:	4b3b      	ldr	r3, [pc, #236]	; (16764 <FreeRTOS_CLIProcessCommand+0x108>)
   16676:	4a3c      	ldr	r2, [pc, #240]	; (16768 <FreeRTOS_CLIProcessCommand+0x10c>)
   16678:	601a      	str	r2, [r3, #0]
   1667a:	e03a      	b.n	166f2 <FreeRTOS_CLIProcessCommand+0x96>
		{
			pcRegisteredCommandString = pxCommand->pxCommandLineDefinition->pcCommand;
   1667c:	4b39      	ldr	r3, [pc, #228]	; (16764 <FreeRTOS_CLIProcessCommand+0x108>)
   1667e:	681b      	ldr	r3, [r3, #0]
   16680:	681b      	ldr	r3, [r3, #0]
   16682:	681b      	ldr	r3, [r3, #0]
   16684:	61bb      	str	r3, [r7, #24]
			xCommandStringLength = strlen( pcRegisteredCommandString );
   16686:	69bb      	ldr	r3, [r7, #24]
   16688:	0018      	movs	r0, r3
   1668a:	4b38      	ldr	r3, [pc, #224]	; (1676c <FreeRTOS_CLIProcessCommand+0x110>)
   1668c:	4798      	blx	r3
   1668e:	0003      	movs	r3, r0
   16690:	617b      	str	r3, [r7, #20]

			/* To ensure the string lengths match exactly, so as not to pick up
			a sub-string of a longer command, check the byte after the expected
			end of the string is either the end of the string or a space before
			a parameter. */
			if( ( pcCommandInput[ xCommandStringLength ] == ' ' ) || ( pcCommandInput[ xCommandStringLength ] == 0x00 ) )
   16692:	68fa      	ldr	r2, [r7, #12]
   16694:	697b      	ldr	r3, [r7, #20]
   16696:	18d3      	adds	r3, r2, r3
   16698:	781b      	ldrb	r3, [r3, #0]
   1669a:	2b20      	cmp	r3, #32
   1669c:	d005      	beq.n	166aa <FreeRTOS_CLIProcessCommand+0x4e>
   1669e:	68fa      	ldr	r2, [r7, #12]
   166a0:	697b      	ldr	r3, [r7, #20]
   166a2:	18d3      	adds	r3, r2, r3
   166a4:	781b      	ldrb	r3, [r3, #0]
   166a6:	2b00      	cmp	r3, #0
   166a8:	d11e      	bne.n	166e8 <FreeRTOS_CLIProcessCommand+0x8c>
			{
				if( strncmp( pcCommandInput, pcRegisteredCommandString, xCommandStringLength ) == 0 )
   166aa:	697a      	ldr	r2, [r7, #20]
   166ac:	69b9      	ldr	r1, [r7, #24]
   166ae:	68fb      	ldr	r3, [r7, #12]
   166b0:	0018      	movs	r0, r3
   166b2:	4b2f      	ldr	r3, [pc, #188]	; (16770 <FreeRTOS_CLIProcessCommand+0x114>)
   166b4:	4798      	blx	r3
   166b6:	1e03      	subs	r3, r0, #0
   166b8:	d116      	bne.n	166e8 <FreeRTOS_CLIProcessCommand+0x8c>
				{
					/* The command has been found.  Check it has the expected
					number of parameters.  If cExpectedNumberOfParameters is -1,
					then there could be a variable number of parameters and no
					check is made. */
					if( pxCommand->pxCommandLineDefinition->cExpectedNumberOfParameters >= 0 )
   166ba:	4b2a      	ldr	r3, [pc, #168]	; (16764 <FreeRTOS_CLIProcessCommand+0x108>)
   166bc:	681b      	ldr	r3, [r3, #0]
   166be:	681b      	ldr	r3, [r3, #0]
   166c0:	7b1b      	ldrb	r3, [r3, #12]
   166c2:	b25b      	sxtb	r3, r3
   166c4:	2b00      	cmp	r3, #0
   166c6:	db19      	blt.n	166fc <FreeRTOS_CLIProcessCommand+0xa0>
					{
						if( prvGetNumberOfParameters( pcCommandInput ) != pxCommand->pxCommandLineDefinition->cExpectedNumberOfParameters )
   166c8:	68fb      	ldr	r3, [r7, #12]
   166ca:	0018      	movs	r0, r3
   166cc:	4b29      	ldr	r3, [pc, #164]	; (16774 <FreeRTOS_CLIProcessCommand+0x118>)
   166ce:	4798      	blx	r3
   166d0:	0003      	movs	r3, r0
   166d2:	001a      	movs	r2, r3
   166d4:	4b23      	ldr	r3, [pc, #140]	; (16764 <FreeRTOS_CLIProcessCommand+0x108>)
   166d6:	681b      	ldr	r3, [r3, #0]
   166d8:	681b      	ldr	r3, [r3, #0]
   166da:	7b1b      	ldrb	r3, [r3, #12]
   166dc:	b25b      	sxtb	r3, r3
   166de:	429a      	cmp	r2, r3
   166e0:	d00c      	beq.n	166fc <FreeRTOS_CLIProcessCommand+0xa0>
						{
							xReturn = pdFALSE;
   166e2:	2300      	movs	r3, #0
   166e4:	61fb      	str	r3, [r7, #28]
						}
					}

					break;
   166e6:	e009      	b.n	166fc <FreeRTOS_CLIProcessCommand+0xa0>
		for( pxCommand = &xRegisteredCommands; pxCommand != NULL; pxCommand = pxCommand->pxNext )
   166e8:	4b1e      	ldr	r3, [pc, #120]	; (16764 <FreeRTOS_CLIProcessCommand+0x108>)
   166ea:	681b      	ldr	r3, [r3, #0]
   166ec:	685a      	ldr	r2, [r3, #4]
   166ee:	4b1d      	ldr	r3, [pc, #116]	; (16764 <FreeRTOS_CLIProcessCommand+0x108>)
   166f0:	601a      	str	r2, [r3, #0]
   166f2:	4b1c      	ldr	r3, [pc, #112]	; (16764 <FreeRTOS_CLIProcessCommand+0x108>)
   166f4:	681b      	ldr	r3, [r3, #0]
   166f6:	2b00      	cmp	r3, #0
   166f8:	d1c0      	bne.n	1667c <FreeRTOS_CLIProcessCommand+0x20>
   166fa:	e000      	b.n	166fe <FreeRTOS_CLIProcessCommand+0xa2>
					break;
   166fc:	46c0      	nop			; (mov r8, r8)
				}
			}
		}
	}

	if( ( pxCommand != NULL ) && ( xReturn == pdFALSE ) )
   166fe:	4b19      	ldr	r3, [pc, #100]	; (16764 <FreeRTOS_CLIProcessCommand+0x108>)
   16700:	681b      	ldr	r3, [r3, #0]
   16702:	2b00      	cmp	r3, #0
   16704:	d00c      	beq.n	16720 <FreeRTOS_CLIProcessCommand+0xc4>
   16706:	69fb      	ldr	r3, [r7, #28]
   16708:	2b00      	cmp	r3, #0
   1670a:	d109      	bne.n	16720 <FreeRTOS_CLIProcessCommand+0xc4>
	{
		/* The command was found, but the number of parameters with the command
		was incorrect. */
		strncpy( pcWriteBuffer, "Incorrect command parameter(s).  Enter \"help\" to view a list of available commands.\r\n\r\n", xWriteBufferLen );
   1670c:	687a      	ldr	r2, [r7, #4]
   1670e:	491a      	ldr	r1, [pc, #104]	; (16778 <FreeRTOS_CLIProcessCommand+0x11c>)
   16710:	68bb      	ldr	r3, [r7, #8]
   16712:	0018      	movs	r0, r3
   16714:	4b19      	ldr	r3, [pc, #100]	; (1677c <FreeRTOS_CLIProcessCommand+0x120>)
   16716:	4798      	blx	r3
		pxCommand = NULL;
   16718:	4b12      	ldr	r3, [pc, #72]	; (16764 <FreeRTOS_CLIProcessCommand+0x108>)
   1671a:	2200      	movs	r2, #0
   1671c:	601a      	str	r2, [r3, #0]
   1671e:	e01c      	b.n	1675a <FreeRTOS_CLIProcessCommand+0xfe>
	}
	else if( pxCommand != NULL )
   16720:	4b10      	ldr	r3, [pc, #64]	; (16764 <FreeRTOS_CLIProcessCommand+0x108>)
   16722:	681b      	ldr	r3, [r3, #0]
   16724:	2b00      	cmp	r3, #0
   16726:	d010      	beq.n	1674a <FreeRTOS_CLIProcessCommand+0xee>
	{
		/* Call the callback function that is registered to this command. */
		xReturn = pxCommand->pxCommandLineDefinition->pxCommandInterpreter( pcWriteBuffer, xWriteBufferLen, pcCommandInput );
   16728:	4b0e      	ldr	r3, [pc, #56]	; (16764 <FreeRTOS_CLIProcessCommand+0x108>)
   1672a:	681b      	ldr	r3, [r3, #0]
   1672c:	681b      	ldr	r3, [r3, #0]
   1672e:	689b      	ldr	r3, [r3, #8]
   16730:	68fa      	ldr	r2, [r7, #12]
   16732:	6879      	ldr	r1, [r7, #4]
   16734:	68b8      	ldr	r0, [r7, #8]
   16736:	4798      	blx	r3
   16738:	0003      	movs	r3, r0
   1673a:	61fb      	str	r3, [r7, #28]

		/* If xReturn is pdFALSE, then no further strings will be returned
		after this one, and	pxCommand can be reset to NULL ready to search
		for the next entered command. */
		if( xReturn == pdFALSE )
   1673c:	69fb      	ldr	r3, [r7, #28]
   1673e:	2b00      	cmp	r3, #0
   16740:	d10b      	bne.n	1675a <FreeRTOS_CLIProcessCommand+0xfe>
		{
			pxCommand = NULL;
   16742:	4b08      	ldr	r3, [pc, #32]	; (16764 <FreeRTOS_CLIProcessCommand+0x108>)
   16744:	2200      	movs	r2, #0
   16746:	601a      	str	r2, [r3, #0]
   16748:	e007      	b.n	1675a <FreeRTOS_CLIProcessCommand+0xfe>
		}
	}
	else
	{
		/* pxCommand was NULL, the command was not found. */
		strncpy( pcWriteBuffer, "Command not recognised.  Enter 'help' to view a list of available commands.\r\n\r\n", xWriteBufferLen );
   1674a:	687a      	ldr	r2, [r7, #4]
   1674c:	490c      	ldr	r1, [pc, #48]	; (16780 <FreeRTOS_CLIProcessCommand+0x124>)
   1674e:	68bb      	ldr	r3, [r7, #8]
   16750:	0018      	movs	r0, r3
   16752:	4b0a      	ldr	r3, [pc, #40]	; (1677c <FreeRTOS_CLIProcessCommand+0x120>)
   16754:	4798      	blx	r3
		xReturn = pdFALSE;
   16756:	2300      	movs	r3, #0
   16758:	61fb      	str	r3, [r7, #28]
	}

	return xReturn;
   1675a:	69fb      	ldr	r3, [r7, #28]
}
   1675c:	0018      	movs	r0, r3
   1675e:	46bd      	mov	sp, r7
   16760:	b008      	add	sp, #32
   16762:	bd80      	pop	{r7, pc}
   16764:	20000b58 	.word	0x20000b58
   16768:	20000108 	.word	0x20000108
   1676c:	000334cf 	.word	0x000334cf
   16770:	000334dd 	.word	0x000334dd
   16774:	000167e5 	.word	0x000167e5
   16778:	000351e4 	.word	0x000351e4
   1677c:	000334ff 	.word	0x000334ff
   16780:	0003523c 	.word	0x0003523c

00016784 <prvHelpCommand>:
	return pcReturn;
}
/*-----------------------------------------------------------*/

static BaseType_t prvHelpCommand( char *pcWriteBuffer, size_t xWriteBufferLen, const char *pcCommandString )
{
   16784:	b580      	push	{r7, lr}
   16786:	b086      	sub	sp, #24
   16788:	af00      	add	r7, sp, #0
   1678a:	60f8      	str	r0, [r7, #12]
   1678c:	60b9      	str	r1, [r7, #8]
   1678e:	607a      	str	r2, [r7, #4]
static const CLI_Definition_List_Item_t * pxCommand = NULL;
BaseType_t xReturn;

	( void ) pcCommandString;

	if( pxCommand == NULL )
   16790:	4b11      	ldr	r3, [pc, #68]	; (167d8 <prvHelpCommand+0x54>)
   16792:	681b      	ldr	r3, [r3, #0]
   16794:	2b00      	cmp	r3, #0
   16796:	d102      	bne.n	1679e <prvHelpCommand+0x1a>
	{
		/* Reset the pxCommand pointer back to the start of the list. */
		pxCommand = &xRegisteredCommands;
   16798:	4b0f      	ldr	r3, [pc, #60]	; (167d8 <prvHelpCommand+0x54>)
   1679a:	4a10      	ldr	r2, [pc, #64]	; (167dc <prvHelpCommand+0x58>)
   1679c:	601a      	str	r2, [r3, #0]
	}

	/* Return the next command help string, before moving the pointer on to
	the next command in the list. */
	strncpy( pcWriteBuffer, pxCommand->pxCommandLineDefinition->pcHelpString, xWriteBufferLen );
   1679e:	4b0e      	ldr	r3, [pc, #56]	; (167d8 <prvHelpCommand+0x54>)
   167a0:	681b      	ldr	r3, [r3, #0]
   167a2:	681b      	ldr	r3, [r3, #0]
   167a4:	6859      	ldr	r1, [r3, #4]
   167a6:	68ba      	ldr	r2, [r7, #8]
   167a8:	68fb      	ldr	r3, [r7, #12]
   167aa:	0018      	movs	r0, r3
   167ac:	4b0c      	ldr	r3, [pc, #48]	; (167e0 <prvHelpCommand+0x5c>)
   167ae:	4798      	blx	r3
	pxCommand = pxCommand->pxNext;
   167b0:	4b09      	ldr	r3, [pc, #36]	; (167d8 <prvHelpCommand+0x54>)
   167b2:	681b      	ldr	r3, [r3, #0]
   167b4:	685a      	ldr	r2, [r3, #4]
   167b6:	4b08      	ldr	r3, [pc, #32]	; (167d8 <prvHelpCommand+0x54>)
   167b8:	601a      	str	r2, [r3, #0]

	if( pxCommand == NULL )
   167ba:	4b07      	ldr	r3, [pc, #28]	; (167d8 <prvHelpCommand+0x54>)
   167bc:	681b      	ldr	r3, [r3, #0]
   167be:	2b00      	cmp	r3, #0
   167c0:	d102      	bne.n	167c8 <prvHelpCommand+0x44>
	{
		/* There are no more commands in the list, so there will be no more
		strings to return after this one and pdFALSE should be returned. */
		xReturn = pdFALSE;
   167c2:	2300      	movs	r3, #0
   167c4:	617b      	str	r3, [r7, #20]
   167c6:	e001      	b.n	167cc <prvHelpCommand+0x48>
	}
	else
	{
		xReturn = pdTRUE;
   167c8:	2301      	movs	r3, #1
   167ca:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
   167cc:	697b      	ldr	r3, [r7, #20]
}
   167ce:	0018      	movs	r0, r3
   167d0:	46bd      	mov	sp, r7
   167d2:	b006      	add	sp, #24
   167d4:	bd80      	pop	{r7, pc}
   167d6:	46c0      	nop			; (mov r8, r8)
   167d8:	20000b5c 	.word	0x20000b5c
   167dc:	20000108 	.word	0x20000108
   167e0:	000334ff 	.word	0x000334ff

000167e4 <prvGetNumberOfParameters>:
/*-----------------------------------------------------------*/

static int8_t prvGetNumberOfParameters( const char *pcCommandString )
{
   167e4:	b580      	push	{r7, lr}
   167e6:	b084      	sub	sp, #16
   167e8:	af00      	add	r7, sp, #0
   167ea:	6078      	str	r0, [r7, #4]
int8_t cParameters = 0;
   167ec:	230f      	movs	r3, #15
   167ee:	18fb      	adds	r3, r7, r3
   167f0:	2200      	movs	r2, #0
   167f2:	701a      	strb	r2, [r3, #0]
BaseType_t xLastCharacterWasSpace = pdFALSE;
   167f4:	2300      	movs	r3, #0
   167f6:	60bb      	str	r3, [r7, #8]

	/* Count the number of space delimited words in pcCommandString. */
	while( *pcCommandString != 0x00 )
   167f8:	e018      	b.n	1682c <prvGetNumberOfParameters+0x48>
	{
		if( ( *pcCommandString ) == ' ' )
   167fa:	687b      	ldr	r3, [r7, #4]
   167fc:	781b      	ldrb	r3, [r3, #0]
   167fe:	2b20      	cmp	r3, #32
   16800:	d10f      	bne.n	16822 <prvGetNumberOfParameters+0x3e>
		{
			if( xLastCharacterWasSpace != pdTRUE )
   16802:	68bb      	ldr	r3, [r7, #8]
   16804:	2b01      	cmp	r3, #1
   16806:	d00e      	beq.n	16826 <prvGetNumberOfParameters+0x42>
			{
				cParameters++;
   16808:	230f      	movs	r3, #15
   1680a:	18fb      	adds	r3, r7, r3
   1680c:	781b      	ldrb	r3, [r3, #0]
   1680e:	b25b      	sxtb	r3, r3
   16810:	b2db      	uxtb	r3, r3
   16812:	3301      	adds	r3, #1
   16814:	b2da      	uxtb	r2, r3
   16816:	230f      	movs	r3, #15
   16818:	18fb      	adds	r3, r7, r3
   1681a:	701a      	strb	r2, [r3, #0]
				xLastCharacterWasSpace = pdTRUE;
   1681c:	2301      	movs	r3, #1
   1681e:	60bb      	str	r3, [r7, #8]
   16820:	e001      	b.n	16826 <prvGetNumberOfParameters+0x42>
			}
		}
		else
		{
			xLastCharacterWasSpace = pdFALSE;
   16822:	2300      	movs	r3, #0
   16824:	60bb      	str	r3, [r7, #8]
		}

		pcCommandString++;
   16826:	687b      	ldr	r3, [r7, #4]
   16828:	3301      	adds	r3, #1
   1682a:	607b      	str	r3, [r7, #4]
	while( *pcCommandString != 0x00 )
   1682c:	687b      	ldr	r3, [r7, #4]
   1682e:	781b      	ldrb	r3, [r3, #0]
   16830:	2b00      	cmp	r3, #0
   16832:	d1e2      	bne.n	167fa <prvGetNumberOfParameters+0x16>
	}

	/* If the command string ended with spaces, then there will have been too
	many parameters counted. */
	if( xLastCharacterWasSpace == pdTRUE )
   16834:	68bb      	ldr	r3, [r7, #8]
   16836:	2b01      	cmp	r3, #1
   16838:	d109      	bne.n	1684e <prvGetNumberOfParameters+0x6a>
	{
		cParameters--;
   1683a:	230f      	movs	r3, #15
   1683c:	18fb      	adds	r3, r7, r3
   1683e:	781b      	ldrb	r3, [r3, #0]
   16840:	b25b      	sxtb	r3, r3
   16842:	b2db      	uxtb	r3, r3
   16844:	3b01      	subs	r3, #1
   16846:	b2da      	uxtb	r2, r3
   16848:	230f      	movs	r3, #15
   1684a:	18fb      	adds	r3, r7, r3
   1684c:	701a      	strb	r2, [r3, #0]
	}

	/* The value returned is one less than the number of space delimited words,
	as the first word should be the command itself. */
	return cParameters;
   1684e:	230f      	movs	r3, #15
   16850:	18fb      	adds	r3, r7, r3
   16852:	781b      	ldrb	r3, [r3, #0]
   16854:	b25b      	sxtb	r3, r3
}
   16856:	0018      	movs	r0, r3
   16858:	46bd      	mov	sp, r7
   1685a:	b004      	add	sp, #16
   1685c:	bd80      	pop	{r7, pc}
	...

00016860 <prvTraceGetQueueNumber>:
{
	return (uint32_t)ucQueueGetQueueNumber(handle);
}
#else 
uint32_t prvTraceGetQueueNumber(void* handle)
{
   16860:	b580      	push	{r7, lr}
   16862:	b082      	sub	sp, #8
   16864:	af00      	add	r7, sp, #0
   16866:	6078      	str	r0, [r7, #4]
	return (uint32_t)uxQueueGetQueueNumber(handle);
   16868:	687b      	ldr	r3, [r7, #4]
   1686a:	0018      	movs	r0, r3
   1686c:	4b03      	ldr	r3, [pc, #12]	; (1687c <prvTraceGetQueueNumber+0x1c>)
   1686e:	4798      	blx	r3
   16870:	0003      	movs	r3, r0
}
   16872:	0018      	movs	r0, r3
   16874:	46bd      	mov	sp, r7
   16876:	b002      	add	sp, #8
   16878:	bd80      	pop	{r7, pc}
   1687a:	46c0      	nop			; (mov r8, r8)
   1687c:	0001a029 	.word	0x0001a029

00016880 <prvTraceGetQueueType>:
#endif /* (TRC_CFG_FREERTOS_VERSION < TRC_FREERTOS_VERSION_8_X) */

uint8_t prvTraceGetQueueType(void* handle)
{
   16880:	b580      	push	{r7, lr}
   16882:	b082      	sub	sp, #8
   16884:	af00      	add	r7, sp, #0
   16886:	6078      	str	r0, [r7, #4]
	// This is either declared in header file in FreeRTOS 8 and later, or as extern above
	return ucQueueGetQueueType(handle);
   16888:	687b      	ldr	r3, [r7, #4]
   1688a:	0018      	movs	r0, r3
   1688c:	4b03      	ldr	r3, [pc, #12]	; (1689c <prvTraceGetQueueType+0x1c>)
   1688e:	4798      	blx	r3
   16890:	0003      	movs	r3, r0
}
   16892:	0018      	movs	r0, r3
   16894:	46bd      	mov	sp, r7
   16896:	b002      	add	sp, #8
   16898:	bd80      	pop	{r7, pc}
   1689a:	46c0      	nop			; (mov r8, r8)
   1689c:	0001a055 	.word	0x0001a055

000168a0 <prvTraceGetTaskNumberLow16>:

/* Tasks */
uint16_t prvTraceGetTaskNumberLow16(void* handle)
{
   168a0:	b580      	push	{r7, lr}
   168a2:	b082      	sub	sp, #8
   168a4:	af00      	add	r7, sp, #0
   168a6:	6078      	str	r0, [r7, #4]
	return TRACE_GET_LOW16(uxTaskGetTaskNumber(handle));
   168a8:	687b      	ldr	r3, [r7, #4]
   168aa:	0018      	movs	r0, r3
   168ac:	4b03      	ldr	r3, [pc, #12]	; (168bc <prvTraceGetTaskNumberLow16+0x1c>)
   168ae:	4798      	blx	r3
   168b0:	0003      	movs	r3, r0
   168b2:	b29b      	uxth	r3, r3
}
   168b4:	0018      	movs	r0, r3
   168b6:	46bd      	mov	sp, r7
   168b8:	b002      	add	sp, #8
   168ba:	bd80      	pop	{r7, pc}
   168bc:	0001b385 	.word	0x0001b385

000168c0 <prvTraceGetTaskNumberHigh16>:

uint16_t prvTraceGetTaskNumberHigh16(void* handle)
{
   168c0:	b580      	push	{r7, lr}
   168c2:	b082      	sub	sp, #8
   168c4:	af00      	add	r7, sp, #0
   168c6:	6078      	str	r0, [r7, #4]
	return TRACE_GET_HIGH16(uxTaskGetTaskNumber(handle));
   168c8:	687b      	ldr	r3, [r7, #4]
   168ca:	0018      	movs	r0, r3
   168cc:	4b04      	ldr	r3, [pc, #16]	; (168e0 <prvTraceGetTaskNumberHigh16+0x20>)
   168ce:	4798      	blx	r3
   168d0:	0003      	movs	r3, r0
   168d2:	0c1b      	lsrs	r3, r3, #16
   168d4:	b29b      	uxth	r3, r3
}
   168d6:	0018      	movs	r0, r3
   168d8:	46bd      	mov	sp, r7
   168da:	b002      	add	sp, #8
   168dc:	bd80      	pop	{r7, pc}
   168de:	46c0      	nop			; (mov r8, r8)
   168e0:	0001b385 	.word	0x0001b385

000168e4 <prvTraceSetTaskNumberLow16>:

void prvTraceSetTaskNumberLow16(void* handle, uint16_t value)
{
   168e4:	b580      	push	{r7, lr}
   168e6:	b082      	sub	sp, #8
   168e8:	af00      	add	r7, sp, #0
   168ea:	6078      	str	r0, [r7, #4]
   168ec:	000a      	movs	r2, r1
   168ee:	1cbb      	adds	r3, r7, #2
   168f0:	801a      	strh	r2, [r3, #0]
	vTaskSetTaskNumber(handle, TRACE_SET_LOW16(uxTaskGetTaskNumber(handle), value));
   168f2:	687b      	ldr	r3, [r7, #4]
   168f4:	0018      	movs	r0, r3
   168f6:	4b08      	ldr	r3, [pc, #32]	; (16918 <prvTraceSetTaskNumberLow16+0x34>)
   168f8:	4798      	blx	r3
   168fa:	0003      	movs	r3, r0
   168fc:	0c1b      	lsrs	r3, r3, #16
   168fe:	041a      	lsls	r2, r3, #16
   16900:	1cbb      	adds	r3, r7, #2
   16902:	881b      	ldrh	r3, [r3, #0]
   16904:	431a      	orrs	r2, r3
   16906:	687b      	ldr	r3, [r7, #4]
   16908:	0011      	movs	r1, r2
   1690a:	0018      	movs	r0, r3
   1690c:	4b03      	ldr	r3, [pc, #12]	; (1691c <prvTraceSetTaskNumberLow16+0x38>)
   1690e:	4798      	blx	r3
}
   16910:	46c0      	nop			; (mov r8, r8)
   16912:	46bd      	mov	sp, r7
   16914:	b002      	add	sp, #8
   16916:	bd80      	pop	{r7, pc}
   16918:	0001b385 	.word	0x0001b385
   1691c:	0001b3ad 	.word	0x0001b3ad

00016920 <prvTraceSetTaskNumberHigh16>:

void prvTraceSetTaskNumberHigh16(void* handle, uint16_t value)
{
   16920:	b580      	push	{r7, lr}
   16922:	b082      	sub	sp, #8
   16924:	af00      	add	r7, sp, #0
   16926:	6078      	str	r0, [r7, #4]
   16928:	000a      	movs	r2, r1
   1692a:	1cbb      	adds	r3, r7, #2
   1692c:	801a      	strh	r2, [r3, #0]
	vTaskSetTaskNumber(handle, TRACE_SET_HIGH16(uxTaskGetTaskNumber(handle), value));
   1692e:	687b      	ldr	r3, [r7, #4]
   16930:	0018      	movs	r0, r3
   16932:	4b09      	ldr	r3, [pc, #36]	; (16958 <prvTraceSetTaskNumberHigh16+0x38>)
   16934:	4798      	blx	r3
   16936:	0003      	movs	r3, r0
   16938:	041b      	lsls	r3, r3, #16
   1693a:	0c1a      	lsrs	r2, r3, #16
   1693c:	1cbb      	adds	r3, r7, #2
   1693e:	881b      	ldrh	r3, [r3, #0]
   16940:	041b      	lsls	r3, r3, #16
   16942:	431a      	orrs	r2, r3
   16944:	687b      	ldr	r3, [r7, #4]
   16946:	0011      	movs	r1, r2
   16948:	0018      	movs	r0, r3
   1694a:	4b04      	ldr	r3, [pc, #16]	; (1695c <prvTraceSetTaskNumberHigh16+0x3c>)
   1694c:	4798      	blx	r3
}
   1694e:	46c0      	nop			; (mov r8, r8)
   16950:	46bd      	mov	sp, r7
   16952:	b002      	add	sp, #8
   16954:	bd80      	pop	{r7, pc}
   16956:	46c0      	nop			; (mov r8, r8)
   16958:	0001b385 	.word	0x0001b385
   1695c:	0001b3ad 	.word	0x0001b3ad

00016960 <prvTraceGetQueueNumberLow16>:

uint16_t prvTraceGetQueueNumberLow16(void* handle)
{
   16960:	b580      	push	{r7, lr}
   16962:	b082      	sub	sp, #8
   16964:	af00      	add	r7, sp, #0
   16966:	6078      	str	r0, [r7, #4]
	return TRACE_GET_LOW16(prvTraceGetQueueNumber(handle));
   16968:	687b      	ldr	r3, [r7, #4]
   1696a:	0018      	movs	r0, r3
   1696c:	4b03      	ldr	r3, [pc, #12]	; (1697c <prvTraceGetQueueNumberLow16+0x1c>)
   1696e:	4798      	blx	r3
   16970:	0003      	movs	r3, r0
   16972:	b29b      	uxth	r3, r3
}
   16974:	0018      	movs	r0, r3
   16976:	46bd      	mov	sp, r7
   16978:	b002      	add	sp, #8
   1697a:	bd80      	pop	{r7, pc}
   1697c:	00016861 	.word	0x00016861

00016980 <prvTraceGetQueueNumberHigh16>:

uint16_t prvTraceGetQueueNumberHigh16(void* handle)
{
   16980:	b580      	push	{r7, lr}
   16982:	b082      	sub	sp, #8
   16984:	af00      	add	r7, sp, #0
   16986:	6078      	str	r0, [r7, #4]
	return TRACE_GET_HIGH16(prvTraceGetQueueNumber(handle));
   16988:	687b      	ldr	r3, [r7, #4]
   1698a:	0018      	movs	r0, r3
   1698c:	4b04      	ldr	r3, [pc, #16]	; (169a0 <prvTraceGetQueueNumberHigh16+0x20>)
   1698e:	4798      	blx	r3
   16990:	0003      	movs	r3, r0
   16992:	0c1b      	lsrs	r3, r3, #16
   16994:	b29b      	uxth	r3, r3
}
   16996:	0018      	movs	r0, r3
   16998:	46bd      	mov	sp, r7
   1699a:	b002      	add	sp, #8
   1699c:	bd80      	pop	{r7, pc}
   1699e:	46c0      	nop			; (mov r8, r8)
   169a0:	00016861 	.word	0x00016861

000169a4 <prvTraceSetQueueNumberLow16>:

void prvTraceSetQueueNumberLow16(void* handle, uint16_t value)
{
   169a4:	b580      	push	{r7, lr}
   169a6:	b082      	sub	sp, #8
   169a8:	af00      	add	r7, sp, #0
   169aa:	6078      	str	r0, [r7, #4]
   169ac:	000a      	movs	r2, r1
   169ae:	1cbb      	adds	r3, r7, #2
   169b0:	801a      	strh	r2, [r3, #0]
	vQueueSetQueueNumber(handle, TRACE_SET_LOW16(prvTraceGetQueueNumber(handle), value));
   169b2:	687b      	ldr	r3, [r7, #4]
   169b4:	0018      	movs	r0, r3
   169b6:	4b08      	ldr	r3, [pc, #32]	; (169d8 <prvTraceSetQueueNumberLow16+0x34>)
   169b8:	4798      	blx	r3
   169ba:	0003      	movs	r3, r0
   169bc:	0c1b      	lsrs	r3, r3, #16
   169be:	041a      	lsls	r2, r3, #16
   169c0:	1cbb      	adds	r3, r7, #2
   169c2:	881b      	ldrh	r3, [r3, #0]
   169c4:	431a      	orrs	r2, r3
   169c6:	687b      	ldr	r3, [r7, #4]
   169c8:	0011      	movs	r1, r2
   169ca:	0018      	movs	r0, r3
   169cc:	4b03      	ldr	r3, [pc, #12]	; (169dc <prvTraceSetQueueNumberLow16+0x38>)
   169ce:	4798      	blx	r3
}
   169d0:	46c0      	nop			; (mov r8, r8)
   169d2:	46bd      	mov	sp, r7
   169d4:	b002      	add	sp, #8
   169d6:	bd80      	pop	{r7, pc}
   169d8:	00016861 	.word	0x00016861
   169dc:	0001a03d 	.word	0x0001a03d

000169e0 <prvTraceSetQueueNumberHigh16>:

void prvTraceSetQueueNumberHigh16(void* handle, uint16_t value)
{
   169e0:	b580      	push	{r7, lr}
   169e2:	b082      	sub	sp, #8
   169e4:	af00      	add	r7, sp, #0
   169e6:	6078      	str	r0, [r7, #4]
   169e8:	000a      	movs	r2, r1
   169ea:	1cbb      	adds	r3, r7, #2
   169ec:	801a      	strh	r2, [r3, #0]
	vQueueSetQueueNumber(handle, TRACE_SET_HIGH16(prvTraceGetQueueNumber(handle), value));
   169ee:	687b      	ldr	r3, [r7, #4]
   169f0:	0018      	movs	r0, r3
   169f2:	4b09      	ldr	r3, [pc, #36]	; (16a18 <prvTraceSetQueueNumberHigh16+0x38>)
   169f4:	4798      	blx	r3
   169f6:	0003      	movs	r3, r0
   169f8:	041b      	lsls	r3, r3, #16
   169fa:	0c1a      	lsrs	r2, r3, #16
   169fc:	1cbb      	adds	r3, r7, #2
   169fe:	881b      	ldrh	r3, [r3, #0]
   16a00:	041b      	lsls	r3, r3, #16
   16a02:	431a      	orrs	r2, r3
   16a04:	687b      	ldr	r3, [r7, #4]
   16a06:	0011      	movs	r1, r2
   16a08:	0018      	movs	r0, r3
   16a0a:	4b04      	ldr	r3, [pc, #16]	; (16a1c <prvTraceSetQueueNumberHigh16+0x3c>)
   16a0c:	4798      	blx	r3
}
   16a0e:	46c0      	nop			; (mov r8, r8)
   16a10:	46bd      	mov	sp, r7
   16a12:	b002      	add	sp, #8
   16a14:	bd80      	pop	{r7, pc}
   16a16:	46c0      	nop			; (mov r8, r8)
   16a18:	00016861 	.word	0x00016861
   16a1c:	0001a03d 	.word	0x0001a03d

00016a20 <prvAddTaskToStackMonitor>:
TaskStackMonitorEntry_t tasksInStackMonitor[TRC_CFG_STACK_MONITOR_MAX_TASKS] = { NULL };

int tasksNotIncluded = 0;

void prvAddTaskToStackMonitor(void* task)
{
   16a20:	b580      	push	{r7, lr}
   16a22:	b084      	sub	sp, #16
   16a24:	af00      	add	r7, sp, #0
   16a26:	6078      	str	r0, [r7, #4]
	int foundEmptySlot = 0;
   16a28:	2300      	movs	r3, #0
   16a2a:	60fb      	str	r3, [r7, #12]

	// find an empty slot
	for (int i = 0; i < TRC_CFG_STACK_MONITOR_MAX_TASKS; i++)
   16a2c:	2300      	movs	r3, #0
   16a2e:	60bb      	str	r3, [r7, #8]
   16a30:	e018      	b.n	16a64 <prvAddTaskToStackMonitor+0x44>
	{
		if (tasksInStackMonitor[i].tcb == NULL)
   16a32:	4b14      	ldr	r3, [pc, #80]	; (16a84 <prvAddTaskToStackMonitor+0x64>)
   16a34:	68ba      	ldr	r2, [r7, #8]
   16a36:	00d2      	lsls	r2, r2, #3
   16a38:	58d3      	ldr	r3, [r2, r3]
   16a3a:	2b00      	cmp	r3, #0
   16a3c:	d10f      	bne.n	16a5e <prvAddTaskToStackMonitor+0x3e>
		{
			tasksInStackMonitor[i].tcb = task;
   16a3e:	4b11      	ldr	r3, [pc, #68]	; (16a84 <prvAddTaskToStackMonitor+0x64>)
   16a40:	68ba      	ldr	r2, [r7, #8]
   16a42:	00d2      	lsls	r2, r2, #3
   16a44:	6879      	ldr	r1, [r7, #4]
   16a46:	50d1      	str	r1, [r2, r3]
			tasksInStackMonitor[i].uiPreviousLowMark = 0xFFFFFFFF;
   16a48:	4a0e      	ldr	r2, [pc, #56]	; (16a84 <prvAddTaskToStackMonitor+0x64>)
   16a4a:	68bb      	ldr	r3, [r7, #8]
   16a4c:	00db      	lsls	r3, r3, #3
   16a4e:	18d3      	adds	r3, r2, r3
   16a50:	3304      	adds	r3, #4
   16a52:	2201      	movs	r2, #1
   16a54:	4252      	negs	r2, r2
   16a56:	601a      	str	r2, [r3, #0]
			foundEmptySlot = 1;
   16a58:	2301      	movs	r3, #1
   16a5a:	60fb      	str	r3, [r7, #12]
			break;
   16a5c:	e005      	b.n	16a6a <prvAddTaskToStackMonitor+0x4a>
	for (int i = 0; i < TRC_CFG_STACK_MONITOR_MAX_TASKS; i++)
   16a5e:	68bb      	ldr	r3, [r7, #8]
   16a60:	3301      	adds	r3, #1
   16a62:	60bb      	str	r3, [r7, #8]
   16a64:	68bb      	ldr	r3, [r7, #8]
   16a66:	2b09      	cmp	r3, #9
   16a68:	dde3      	ble.n	16a32 <prvAddTaskToStackMonitor+0x12>
		}
	}

	if (foundEmptySlot == 0)
   16a6a:	68fb      	ldr	r3, [r7, #12]
   16a6c:	2b00      	cmp	r3, #0
   16a6e:	d104      	bne.n	16a7a <prvAddTaskToStackMonitor+0x5a>
	{
		tasksNotIncluded++;
   16a70:	4b05      	ldr	r3, [pc, #20]	; (16a88 <prvAddTaskToStackMonitor+0x68>)
   16a72:	681b      	ldr	r3, [r3, #0]
   16a74:	1c5a      	adds	r2, r3, #1
   16a76:	4b04      	ldr	r3, [pc, #16]	; (16a88 <prvAddTaskToStackMonitor+0x68>)
   16a78:	601a      	str	r2, [r3, #0]
	}
}
   16a7a:	46c0      	nop			; (mov r8, r8)
   16a7c:	46bd      	mov	sp, r7
   16a7e:	b004      	add	sp, #16
   16a80:	bd80      	pop	{r7, pc}
   16a82:	46c0      	nop			; (mov r8, r8)
   16a84:	20000b64 	.word	0x20000b64
   16a88:	20000bb4 	.word	0x20000bb4

00016a8c <prvReportStackUsage>:
		}
	}
}

void prvReportStackUsage()
{
   16a8c:	b590      	push	{r4, r7, lr}
   16a8e:	b085      	sub	sp, #20
   16a90:	af00      	add	r7, sp, #0
	static int i = 0;	/* Static index used to loop over the monitored tasks */
	int count = 0;		/* The number of generated reports */
   16a92:	2300      	movs	r3, #0
   16a94:	60fb      	str	r3, [r7, #12]
	int initial = i;	/* Used to make sure we break if we are back at the inital value */
   16a96:	4b2b      	ldr	r3, [pc, #172]	; (16b44 <prvReportStackUsage+0xb8>)
   16a98:	681b      	ldr	r3, [r3, #0]
   16a9a:	60bb      	str	r3, [r7, #8]
	
	do
	{
		/* Check the current spot */
		if (tasksInStackMonitor[i].tcb != NULL)
   16a9c:	4b29      	ldr	r3, [pc, #164]	; (16b44 <prvReportStackUsage+0xb8>)
   16a9e:	681a      	ldr	r2, [r3, #0]
   16aa0:	4b29      	ldr	r3, [pc, #164]	; (16b48 <prvReportStackUsage+0xbc>)
   16aa2:	00d2      	lsls	r2, r2, #3
   16aa4:	58d3      	ldr	r3, [r2, r3]
   16aa6:	2b00      	cmp	r3, #0
   16aa8:	d035      	beq.n	16b16 <prvReportStackUsage+0x8a>
		{
			/* Get the amount of unused stack */
			uint32_t unusedStackSpace = uxTaskGetStackHighWaterMark((TaskType)tasksInStackMonitor[i].tcb);
   16aaa:	4b26      	ldr	r3, [pc, #152]	; (16b44 <prvReportStackUsage+0xb8>)
   16aac:	681a      	ldr	r2, [r3, #0]
   16aae:	4b26      	ldr	r3, [pc, #152]	; (16b48 <prvReportStackUsage+0xbc>)
   16ab0:	00d2      	lsls	r2, r2, #3
   16ab2:	58d3      	ldr	r3, [r2, r3]
   16ab4:	0018      	movs	r0, r3
   16ab6:	4b25      	ldr	r3, [pc, #148]	; (16b4c <prvReportStackUsage+0xc0>)
   16ab8:	4798      	blx	r3
   16aba:	0003      	movs	r3, r0
   16abc:	607b      	str	r3, [r7, #4]

			/* Store for later use */
			if (tasksInStackMonitor[i].uiPreviousLowMark > unusedStackSpace)
   16abe:	4b21      	ldr	r3, [pc, #132]	; (16b44 <prvReportStackUsage+0xb8>)
   16ac0:	681b      	ldr	r3, [r3, #0]
   16ac2:	4a21      	ldr	r2, [pc, #132]	; (16b48 <prvReportStackUsage+0xbc>)
   16ac4:	00db      	lsls	r3, r3, #3
   16ac6:	18d3      	adds	r3, r2, r3
   16ac8:	3304      	adds	r3, #4
   16aca:	681a      	ldr	r2, [r3, #0]
   16acc:	687b      	ldr	r3, [r7, #4]
   16ace:	429a      	cmp	r2, r3
   16ad0:	d907      	bls.n	16ae2 <prvReportStackUsage+0x56>
				tasksInStackMonitor[i].uiPreviousLowMark = unusedStackSpace;
   16ad2:	4b1c      	ldr	r3, [pc, #112]	; (16b44 <prvReportStackUsage+0xb8>)
   16ad4:	681b      	ldr	r3, [r3, #0]
   16ad6:	4a1c      	ldr	r2, [pc, #112]	; (16b48 <prvReportStackUsage+0xbc>)
   16ad8:	00db      	lsls	r3, r3, #3
   16ada:	18d3      	adds	r3, r2, r3
   16adc:	3304      	adds	r3, #4
   16ade:	687a      	ldr	r2, [r7, #4]
   16ae0:	601a      	str	r2, [r3, #0]

#if TRC_CFG_RECORDER_MODE == TRC_RECORDER_MODE_SNAPSHOT
			prvTraceStoreKernelCallWithParam(TRACE_UNUSED_STACK, TRACE_CLASS_TASK, TRACE_GET_TASK_NUMBER(tasksInStackMonitor[i].tcb), tasksInStackMonitor[i].uiPreviousLowMark);
   16ae2:	4b18      	ldr	r3, [pc, #96]	; (16b44 <prvReportStackUsage+0xb8>)
   16ae4:	681a      	ldr	r2, [r3, #0]
   16ae6:	4b18      	ldr	r3, [pc, #96]	; (16b48 <prvReportStackUsage+0xbc>)
   16ae8:	00d2      	lsls	r2, r2, #3
   16aea:	58d3      	ldr	r3, [r2, r3]
   16aec:	0018      	movs	r0, r3
   16aee:	4b18      	ldr	r3, [pc, #96]	; (16b50 <prvReportStackUsage+0xc4>)
   16af0:	4798      	blx	r3
   16af2:	0003      	movs	r3, r0
   16af4:	b2db      	uxtb	r3, r3
   16af6:	0019      	movs	r1, r3
   16af8:	4b12      	ldr	r3, [pc, #72]	; (16b44 <prvReportStackUsage+0xb8>)
   16afa:	681b      	ldr	r3, [r3, #0]
   16afc:	4a12      	ldr	r2, [pc, #72]	; (16b48 <prvReportStackUsage+0xbc>)
   16afe:	00db      	lsls	r3, r3, #3
   16b00:	18d3      	adds	r3, r2, r3
   16b02:	3304      	adds	r3, #4
   16b04:	681b      	ldr	r3, [r3, #0]
   16b06:	000a      	movs	r2, r1
   16b08:	2103      	movs	r1, #3
   16b0a:	20ea      	movs	r0, #234	; 0xea
   16b0c:	4c11      	ldr	r4, [pc, #68]	; (16b54 <prvReportStackUsage+0xc8>)
   16b0e:	47a0      	blx	r4
#else /* TRC_CFG_RECORDER_MODE == TRC_RECORDER_MODE_SNAPSHOT */
			prvTraceStoreEvent2(PSF_EVENT_UNUSED_STACK, (uint32_t)tasksInStackMonitor[i].tcb, tasksInStackMonitor[i].uiPreviousLowMark);
#endif /* TRC_CFG_RECORDER_MODE == TRC_RECORDER_MODE_SNAPSHOT */

			count++;
   16b10:	68fb      	ldr	r3, [r7, #12]
   16b12:	3301      	adds	r3, #1
   16b14:	60fb      	str	r3, [r7, #12]
		}

		i = (i + 1) % TRC_CFG_STACK_MONITOR_MAX_TASKS; // Move i beyond this task
   16b16:	4b0b      	ldr	r3, [pc, #44]	; (16b44 <prvReportStackUsage+0xb8>)
   16b18:	681b      	ldr	r3, [r3, #0]
   16b1a:	1c5a      	adds	r2, r3, #1
   16b1c:	4b0e      	ldr	r3, [pc, #56]	; (16b58 <prvReportStackUsage+0xcc>)
   16b1e:	210a      	movs	r1, #10
   16b20:	0010      	movs	r0, r2
   16b22:	4798      	blx	r3
   16b24:	000b      	movs	r3, r1
   16b26:	001a      	movs	r2, r3
   16b28:	4b06      	ldr	r3, [pc, #24]	; (16b44 <prvReportStackUsage+0xb8>)
   16b2a:	601a      	str	r2, [r3, #0]
	} while (count < TRC_CFG_STACK_MONITOR_MAX_REPORTS && i != initial);
   16b2c:	68fb      	ldr	r3, [r7, #12]
   16b2e:	2b00      	cmp	r3, #0
   16b30:	dc04      	bgt.n	16b3c <prvReportStackUsage+0xb0>
   16b32:	4b04      	ldr	r3, [pc, #16]	; (16b44 <prvReportStackUsage+0xb8>)
   16b34:	681a      	ldr	r2, [r3, #0]
   16b36:	68bb      	ldr	r3, [r7, #8]
   16b38:	429a      	cmp	r2, r3
   16b3a:	d1af      	bne.n	16a9c <prvReportStackUsage+0x10>
}
   16b3c:	46c0      	nop			; (mov r8, r8)
   16b3e:	46bd      	mov	sp, r7
   16b40:	b005      	add	sp, #20
   16b42:	bd90      	pop	{r4, r7, pc}
   16b44:	20000bb8 	.word	0x20000bb8
   16b48:	20000b64 	.word	0x20000b64
   16b4c:	0001b525 	.word	0x0001b525
   16b50:	000168a1 	.word	0x000168a1
   16b54:	000173e9 	.word	0x000173e9
   16b58:	000313cd 	.word	0x000313cd

00016b5c <prvTraceGetCurrentTaskHandle>:
#endif /* (TRC_CFG_INCLUDE_STREAM_BUFFER_EVENTS == 1 && TRC_CFG_FREERTOS_VERSION >= TRC_FREERTOS_VERSION_10_0_0) */

#endif /* (TRC_CFG_SCHEDULING_ONLY == 0) */

void* prvTraceGetCurrentTaskHandle()
{
   16b5c:	b580      	push	{r7, lr}
   16b5e:	af00      	add	r7, sp, #0
	return xTaskGetCurrentTaskHandle();
   16b60:	4b02      	ldr	r3, [pc, #8]	; (16b6c <prvTraceGetCurrentTaskHandle+0x10>)
   16b62:	4798      	blx	r3
   16b64:	0003      	movs	r3, r0
}
   16b66:	0018      	movs	r0, r3
   16b68:	46bd      	mov	sp, r7
   16b6a:	bd80      	pop	{r7, pc}
   16b6c:	0001b5d1 	.word	0x0001b5d1

00016b70 <vTraceEnable>:
*
*
* Note: See other implementation of vTraceEnable in trcStreamingRecorder.c
******************************************************************************/
void vTraceEnable(int startOption)
{
   16b70:	b590      	push	{r4, r7, lr}
   16b72:	b085      	sub	sp, #20
   16b74:	af02      	add	r7, sp, #8
   16b76:	6078      	str	r0, [r7, #4]
	prvTraceInitTraceData();
   16b78:	4b14      	ldr	r3, [pc, #80]	; (16bcc <vTraceEnable+0x5c>)
   16b7a:	4798      	blx	r3

	if (startOption == TRC_START)
   16b7c:	687b      	ldr	r3, [r7, #4]
   16b7e:	2b01      	cmp	r3, #1
   16b80:	d102      	bne.n	16b88 <vTraceEnable+0x18>
	{
		vTraceStart();
   16b82:	4b13      	ldr	r3, [pc, #76]	; (16bd0 <vTraceEnable+0x60>)
   16b84:	4798      	blx	r3
   16b86:	e00e      	b.n	16ba6 <vTraceEnable+0x36>
	}
	else if (startOption == TRC_START_AWAIT_HOST)
   16b88:	687b      	ldr	r3, [r7, #4]
   16b8a:	2b02      	cmp	r3, #2
   16b8c:	d104      	bne.n	16b98 <vTraceEnable+0x28>
	{
		prvTraceError("vTraceEnable(TRC_START_AWAIT_HOST) not allowed in Snapshot mode");
   16b8e:	4b11      	ldr	r3, [pc, #68]	; (16bd4 <vTraceEnable+0x64>)
   16b90:	0018      	movs	r0, r3
   16b92:	4b11      	ldr	r3, [pc, #68]	; (16bd8 <vTraceEnable+0x68>)
   16b94:	4798      	blx	r3
   16b96:	e006      	b.n	16ba6 <vTraceEnable+0x36>
	}
	else if (startOption != TRC_INIT)
   16b98:	687b      	ldr	r3, [r7, #4]
   16b9a:	2b00      	cmp	r3, #0
   16b9c:	d003      	beq.n	16ba6 <vTraceEnable+0x36>
	{
		prvTraceError("Unexpected argument to vTraceEnable (snapshot mode)");
   16b9e:	4b0f      	ldr	r3, [pc, #60]	; (16bdc <vTraceEnable+0x6c>)
   16ba0:	0018      	movs	r0, r3
   16ba2:	4b0d      	ldr	r3, [pc, #52]	; (16bd8 <vTraceEnable+0x68>)
   16ba4:	4798      	blx	r3
	}

#if defined(TRC_CFG_ENABLE_STACK_MONITOR) && (TRC_CFG_ENABLE_STACK_MONITOR == 1) && (TRC_CFG_SCHEDULING_ONLY == 0)
	/* Creates the TzCtrl task - reports unsed stack */
	if (HandleTzCtrl == NULL)
   16ba6:	4b0e      	ldr	r3, [pc, #56]	; (16be0 <vTraceEnable+0x70>)
   16ba8:	681b      	ldr	r3, [r3, #0]
   16baa:	2b00      	cmp	r3, #0
   16bac:	d109      	bne.n	16bc2 <vTraceEnable+0x52>
	{
#if defined(configSUPPORT_STATIC_ALLOCATION) && (configSUPPORT_STATIC_ALLOCATION == 1)
		HandleTzCtrl = xTaskCreateStatic(TzCtrl, STRING_CAST("TzCtrl"), TRC_CFG_CTRL_TASK_STACK_SIZE, NULL, TRC_CFG_CTRL_TASK_PRIORITY, stackTzCtrl, &tcbTzCtrl);
#else /* defined(configSUPPORT_STATIC_ALLOCATION) && (configSUPPORT_STATIC_ALLOCATION == 1) */
		xTaskCreate(TzCtrl, STRING_CAST("TzCtrl"), TRC_CFG_CTRL_TASK_STACK_SIZE, NULL, TRC_CFG_CTRL_TASK_PRIORITY, &HandleTzCtrl);
   16bae:	490d      	ldr	r1, [pc, #52]	; (16be4 <vTraceEnable+0x74>)
   16bb0:	480d      	ldr	r0, [pc, #52]	; (16be8 <vTraceEnable+0x78>)
   16bb2:	4b0b      	ldr	r3, [pc, #44]	; (16be0 <vTraceEnable+0x70>)
   16bb4:	9301      	str	r3, [sp, #4]
   16bb6:	2304      	movs	r3, #4
   16bb8:	9300      	str	r3, [sp, #0]
   16bba:	2300      	movs	r3, #0
   16bbc:	22c8      	movs	r2, #200	; 0xc8
   16bbe:	4c0b      	ldr	r4, [pc, #44]	; (16bec <vTraceEnable+0x7c>)
   16bc0:	47a0      	blx	r4
#endif /* defined(configSUPPORT_STATIC_ALLOCATION) && (configSUPPORT_STATIC_ALLOCATION == 1) */
	}

#endif /* defined(TRC_CFG_ENABLE_STACK_MONITOR) && (TRC_CFG_ENABLE_STACK_MONITOR == 1) && (TRC_CFG_SCHEDULING_ONLY == 0) */
}
   16bc2:	46c0      	nop			; (mov r8, r8)
   16bc4:	46bd      	mov	sp, r7
   16bc6:	b003      	add	sp, #12
   16bc8:	bd90      	pop	{r4, r7, pc}
   16bca:	46c0      	nop			; (mov r8, r8)
   16bcc:	00017ab5 	.word	0x00017ab5
   16bd0:	0001700d 	.word	0x0001700d
   16bd4:	0003529c 	.word	0x0003529c
   16bd8:	0001815d 	.word	0x0001815d
   16bdc:	000352dc 	.word	0x000352dc
   16be0:	20000b60 	.word	0x20000b60
   16be4:	00035310 	.word	0x00035310
   16be8:	00016bf1 	.word	0x00016bf1
   16bec:	0001a529 	.word	0x0001a529

00016bf0 <TzCtrl>:
* interface (assuming TRC_STREAM_PORT_USE_INTERNAL_BUFFER == 1) and for
* receiving commands from Tracealyzer. Also does some diagnostics.
******************************************************************************/
#if defined(TRC_CFG_ENABLE_STACK_MONITOR) && (TRC_CFG_ENABLE_STACK_MONITOR == 1) && (TRC_CFG_SCHEDULING_ONLY == 0)
static portTASK_FUNCTION(TzCtrl, pvParameters)
{
   16bf0:	b580      	push	{r7, lr}
   16bf2:	b082      	sub	sp, #8
   16bf4:	af00      	add	r7, sp, #0
   16bf6:	6078      	str	r0, [r7, #4]
	(void)pvParameters;

	while (1)
	{
		if (xTraceIsRecordingEnabled())
   16bf8:	4b04      	ldr	r3, [pc, #16]	; (16c0c <TzCtrl+0x1c>)
   16bfa:	4798      	blx	r3
   16bfc:	1e03      	subs	r3, r0, #0
   16bfe:	d001      	beq.n	16c04 <TzCtrl+0x14>
		{
			prvReportStackUsage();
   16c00:	4b03      	ldr	r3, [pc, #12]	; (16c10 <TzCtrl+0x20>)
   16c02:	4798      	blx	r3
		}

		vTaskDelay(TRC_CFG_CTRL_TASK_DELAY);
   16c04:	2004      	movs	r0, #4
   16c06:	4b03      	ldr	r3, [pc, #12]	; (16c14 <TzCtrl+0x24>)
   16c08:	4798      	blx	r3
		if (xTraceIsRecordingEnabled())
   16c0a:	e7f5      	b.n	16bf8 <TzCtrl+0x8>
   16c0c:	00017051 	.word	0x00017051
   16c10:	00016a8d 	.word	0x00016a8d
   16c14:	0001a8c5 	.word	0x0001a8c5

00016c18 <vTraceInitObjectPropertyTable>:
}
#endif

/* Initialization of the object property table */
void vTraceInitObjectPropertyTable()
{
   16c18:	b580      	push	{r7, lr}
   16c1a:	af00      	add	r7, sp, #0
	RecorderDataPtr->ObjectPropertyTable.NumberOfObjectClasses = TRACE_NCLASSES;
   16c1c:	4b60      	ldr	r3, [pc, #384]	; (16da0 <vTraceInitObjectPropertyTable+0x188>)
   16c1e:	681b      	ldr	r3, [r3, #0]
   16c20:	2209      	movs	r2, #9
   16c22:	65da      	str	r2, [r3, #92]	; 0x5c
	RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[0] = TRC_CFG_NQUEUE;
   16c24:	4b5e      	ldr	r3, [pc, #376]	; (16da0 <vTraceInitObjectPropertyTable+0x188>)
   16c26:	681b      	ldr	r3, [r3, #0]
   16c28:	2264      	movs	r2, #100	; 0x64
   16c2a:	210a      	movs	r1, #10
   16c2c:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[1] = TRC_CFG_NSEMAPHORE;
   16c2e:	4b5c      	ldr	r3, [pc, #368]	; (16da0 <vTraceInitObjectPropertyTable+0x188>)
   16c30:	681b      	ldr	r3, [r3, #0]
   16c32:	2265      	movs	r2, #101	; 0x65
   16c34:	210a      	movs	r1, #10
   16c36:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[2] = TRC_CFG_NMUTEX;
   16c38:	4b59      	ldr	r3, [pc, #356]	; (16da0 <vTraceInitObjectPropertyTable+0x188>)
   16c3a:	681b      	ldr	r3, [r3, #0]
   16c3c:	2266      	movs	r2, #102	; 0x66
   16c3e:	210a      	movs	r1, #10
   16c40:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[3] = TRC_CFG_NTASK;
   16c42:	4b57      	ldr	r3, [pc, #348]	; (16da0 <vTraceInitObjectPropertyTable+0x188>)
   16c44:	681b      	ldr	r3, [r3, #0]
   16c46:	2267      	movs	r2, #103	; 0x67
   16c48:	210f      	movs	r1, #15
   16c4a:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[4] = TRC_CFG_NISR;
   16c4c:	4b54      	ldr	r3, [pc, #336]	; (16da0 <vTraceInitObjectPropertyTable+0x188>)
   16c4e:	681b      	ldr	r3, [r3, #0]
   16c50:	2268      	movs	r2, #104	; 0x68
   16c52:	2105      	movs	r1, #5
   16c54:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[5] = TRC_CFG_NTIMER;
   16c56:	4b52      	ldr	r3, [pc, #328]	; (16da0 <vTraceInitObjectPropertyTable+0x188>)
   16c58:	681b      	ldr	r3, [r3, #0]
   16c5a:	2269      	movs	r2, #105	; 0x69
   16c5c:	2105      	movs	r1, #5
   16c5e:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[6] = TRC_CFG_NEVENTGROUP;
   16c60:	4b4f      	ldr	r3, [pc, #316]	; (16da0 <vTraceInitObjectPropertyTable+0x188>)
   16c62:	681b      	ldr	r3, [r3, #0]
   16c64:	226a      	movs	r2, #106	; 0x6a
   16c66:	2105      	movs	r1, #5
   16c68:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[7] = TRC_CFG_NSTREAMBUFFER;
   16c6a:	4b4d      	ldr	r3, [pc, #308]	; (16da0 <vTraceInitObjectPropertyTable+0x188>)
   16c6c:	681b      	ldr	r3, [r3, #0]
   16c6e:	226b      	movs	r2, #107	; 0x6b
   16c70:	2105      	movs	r1, #5
   16c72:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[8] = TRC_CFG_NMESSAGEBUFFER;
   16c74:	4b4a      	ldr	r3, [pc, #296]	; (16da0 <vTraceInitObjectPropertyTable+0x188>)
   16c76:	681b      	ldr	r3, [r3, #0]
   16c78:	226c      	movs	r2, #108	; 0x6c
   16c7a:	2105      	movs	r1, #5
   16c7c:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.NameLengthPerClass[0] = TRC_CFG_NAME_LEN_QUEUE;
   16c7e:	4b48      	ldr	r3, [pc, #288]	; (16da0 <vTraceInitObjectPropertyTable+0x188>)
   16c80:	681b      	ldr	r3, [r3, #0]
   16c82:	2270      	movs	r2, #112	; 0x70
   16c84:	210f      	movs	r1, #15
   16c86:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.NameLengthPerClass[1] = TRC_CFG_NAME_LEN_SEMAPHORE;
   16c88:	4b45      	ldr	r3, [pc, #276]	; (16da0 <vTraceInitObjectPropertyTable+0x188>)
   16c8a:	681b      	ldr	r3, [r3, #0]
   16c8c:	2271      	movs	r2, #113	; 0x71
   16c8e:	210f      	movs	r1, #15
   16c90:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.NameLengthPerClass[2] = TRC_CFG_NAME_LEN_MUTEX;
   16c92:	4b43      	ldr	r3, [pc, #268]	; (16da0 <vTraceInitObjectPropertyTable+0x188>)
   16c94:	681b      	ldr	r3, [r3, #0]
   16c96:	2272      	movs	r2, #114	; 0x72
   16c98:	210f      	movs	r1, #15
   16c9a:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.NameLengthPerClass[3] = TRC_CFG_NAME_LEN_TASK;
   16c9c:	4b40      	ldr	r3, [pc, #256]	; (16da0 <vTraceInitObjectPropertyTable+0x188>)
   16c9e:	681b      	ldr	r3, [r3, #0]
   16ca0:	2273      	movs	r2, #115	; 0x73
   16ca2:	210f      	movs	r1, #15
   16ca4:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.NameLengthPerClass[4] = TRC_CFG_NAME_LEN_ISR;
   16ca6:	4b3e      	ldr	r3, [pc, #248]	; (16da0 <vTraceInitObjectPropertyTable+0x188>)
   16ca8:	681b      	ldr	r3, [r3, #0]
   16caa:	2274      	movs	r2, #116	; 0x74
   16cac:	210f      	movs	r1, #15
   16cae:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.NameLengthPerClass[5] = TRC_CFG_NAME_LEN_TIMER;
   16cb0:	4b3b      	ldr	r3, [pc, #236]	; (16da0 <vTraceInitObjectPropertyTable+0x188>)
   16cb2:	681b      	ldr	r3, [r3, #0]
   16cb4:	2275      	movs	r2, #117	; 0x75
   16cb6:	210f      	movs	r1, #15
   16cb8:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.NameLengthPerClass[6] = TRC_CFG_NAME_LEN_EVENTGROUP;
   16cba:	4b39      	ldr	r3, [pc, #228]	; (16da0 <vTraceInitObjectPropertyTable+0x188>)
   16cbc:	681b      	ldr	r3, [r3, #0]
   16cbe:	2276      	movs	r2, #118	; 0x76
   16cc0:	210f      	movs	r1, #15
   16cc2:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.NameLengthPerClass[7] = TRC_CFG_NAME_LEN_STREAMBUFFER;
   16cc4:	4b36      	ldr	r3, [pc, #216]	; (16da0 <vTraceInitObjectPropertyTable+0x188>)
   16cc6:	681b      	ldr	r3, [r3, #0]
   16cc8:	2277      	movs	r2, #119	; 0x77
   16cca:	210f      	movs	r1, #15
   16ccc:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.NameLengthPerClass[8] = TRC_CFG_NAME_LEN_MESSAGEBUFFER;
   16cce:	4b34      	ldr	r3, [pc, #208]	; (16da0 <vTraceInitObjectPropertyTable+0x188>)
   16cd0:	681b      	ldr	r3, [r3, #0]
   16cd2:	2278      	movs	r2, #120	; 0x78
   16cd4:	210f      	movs	r1, #15
   16cd6:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[0] = PropertyTableSizeQueue;
   16cd8:	4b31      	ldr	r3, [pc, #196]	; (16da0 <vTraceInitObjectPropertyTable+0x188>)
   16cda:	681b      	ldr	r3, [r3, #0]
   16cdc:	227c      	movs	r2, #124	; 0x7c
   16cde:	2110      	movs	r1, #16
   16ce0:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[1] = PropertyTableSizeSemaphore;
   16ce2:	4b2f      	ldr	r3, [pc, #188]	; (16da0 <vTraceInitObjectPropertyTable+0x188>)
   16ce4:	681b      	ldr	r3, [r3, #0]
   16ce6:	227d      	movs	r2, #125	; 0x7d
   16ce8:	2110      	movs	r1, #16
   16cea:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[2] = PropertyTableSizeMutex;
   16cec:	4b2c      	ldr	r3, [pc, #176]	; (16da0 <vTraceInitObjectPropertyTable+0x188>)
   16cee:	681b      	ldr	r3, [r3, #0]
   16cf0:	227e      	movs	r2, #126	; 0x7e
   16cf2:	2110      	movs	r1, #16
   16cf4:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[3] = PropertyTableSizeTask;
   16cf6:	4b2a      	ldr	r3, [pc, #168]	; (16da0 <vTraceInitObjectPropertyTable+0x188>)
   16cf8:	681b      	ldr	r3, [r3, #0]
   16cfa:	227f      	movs	r2, #127	; 0x7f
   16cfc:	2113      	movs	r1, #19
   16cfe:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[4] = PropertyTableSizeISR;
   16d00:	4b27      	ldr	r3, [pc, #156]	; (16da0 <vTraceInitObjectPropertyTable+0x188>)
   16d02:	681b      	ldr	r3, [r3, #0]
   16d04:	2280      	movs	r2, #128	; 0x80
   16d06:	2111      	movs	r1, #17
   16d08:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[5] = PropertyTableSizeTimer;
   16d0a:	4b25      	ldr	r3, [pc, #148]	; (16da0 <vTraceInitObjectPropertyTable+0x188>)
   16d0c:	681b      	ldr	r3, [r3, #0]
   16d0e:	2281      	movs	r2, #129	; 0x81
   16d10:	2110      	movs	r1, #16
   16d12:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[6] = PropertyTableSizeEventGroup;
   16d14:	4b22      	ldr	r3, [pc, #136]	; (16da0 <vTraceInitObjectPropertyTable+0x188>)
   16d16:	681b      	ldr	r3, [r3, #0]
   16d18:	2282      	movs	r2, #130	; 0x82
   16d1a:	2113      	movs	r1, #19
   16d1c:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[7] = PropertyTableSizeStreamBuffer;
   16d1e:	4b20      	ldr	r3, [pc, #128]	; (16da0 <vTraceInitObjectPropertyTable+0x188>)
   16d20:	681b      	ldr	r3, [r3, #0]
   16d22:	2283      	movs	r2, #131	; 0x83
   16d24:	2113      	movs	r1, #19
   16d26:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[8] = PropertyTableSizeMessageBuffer;
   16d28:	4b1d      	ldr	r3, [pc, #116]	; (16da0 <vTraceInitObjectPropertyTable+0x188>)
   16d2a:	681b      	ldr	r3, [r3, #0]
   16d2c:	2284      	movs	r2, #132	; 0x84
   16d2e:	2113      	movs	r1, #19
   16d30:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[0] = StartIndexQueue;
   16d32:	4b1b      	ldr	r3, [pc, #108]	; (16da0 <vTraceInitObjectPropertyTable+0x188>)
   16d34:	681b      	ldr	r3, [r3, #0]
   16d36:	2288      	movs	r2, #136	; 0x88
   16d38:	2100      	movs	r1, #0
   16d3a:	5299      	strh	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[1] = StartIndexSemaphore;
   16d3c:	4b18      	ldr	r3, [pc, #96]	; (16da0 <vTraceInitObjectPropertyTable+0x188>)
   16d3e:	681b      	ldr	r3, [r3, #0]
   16d40:	228a      	movs	r2, #138	; 0x8a
   16d42:	21a0      	movs	r1, #160	; 0xa0
   16d44:	5299      	strh	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[2] = StartIndexMutex;
   16d46:	4b16      	ldr	r3, [pc, #88]	; (16da0 <vTraceInitObjectPropertyTable+0x188>)
   16d48:	681b      	ldr	r3, [r3, #0]
   16d4a:	228c      	movs	r2, #140	; 0x8c
   16d4c:	21a0      	movs	r1, #160	; 0xa0
   16d4e:	0049      	lsls	r1, r1, #1
   16d50:	5299      	strh	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[3] = StartIndexTask;
   16d52:	4b13      	ldr	r3, [pc, #76]	; (16da0 <vTraceInitObjectPropertyTable+0x188>)
   16d54:	681b      	ldr	r3, [r3, #0]
   16d56:	228e      	movs	r2, #142	; 0x8e
   16d58:	21f0      	movs	r1, #240	; 0xf0
   16d5a:	0049      	lsls	r1, r1, #1
   16d5c:	5299      	strh	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[4] = StartIndexISR;
   16d5e:	4b10      	ldr	r3, [pc, #64]	; (16da0 <vTraceInitObjectPropertyTable+0x188>)
   16d60:	681b      	ldr	r3, [r3, #0]
   16d62:	2290      	movs	r2, #144	; 0x90
   16d64:	490f      	ldr	r1, [pc, #60]	; (16da4 <vTraceInitObjectPropertyTable+0x18c>)
   16d66:	5299      	strh	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[5] = StartIndexTimer;
   16d68:	4b0d      	ldr	r3, [pc, #52]	; (16da0 <vTraceInitObjectPropertyTable+0x188>)
   16d6a:	681b      	ldr	r3, [r3, #0]
   16d6c:	2292      	movs	r2, #146	; 0x92
   16d6e:	490e      	ldr	r1, [pc, #56]	; (16da8 <vTraceInitObjectPropertyTable+0x190>)
   16d70:	5299      	strh	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[6] = StartIndexEventGroup;
   16d72:	4b0b      	ldr	r3, [pc, #44]	; (16da0 <vTraceInitObjectPropertyTable+0x188>)
   16d74:	681b      	ldr	r3, [r3, #0]
   16d76:	2294      	movs	r2, #148	; 0x94
   16d78:	490c      	ldr	r1, [pc, #48]	; (16dac <vTraceInitObjectPropertyTable+0x194>)
   16d7a:	5299      	strh	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[7] = StartIndexStreamBuffer;
   16d7c:	4b08      	ldr	r3, [pc, #32]	; (16da0 <vTraceInitObjectPropertyTable+0x188>)
   16d7e:	681b      	ldr	r3, [r3, #0]
   16d80:	2296      	movs	r2, #150	; 0x96
   16d82:	490b      	ldr	r1, [pc, #44]	; (16db0 <vTraceInitObjectPropertyTable+0x198>)
   16d84:	5299      	strh	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[8] = StartIndexMessageBuffer;
   16d86:	4b06      	ldr	r3, [pc, #24]	; (16da0 <vTraceInitObjectPropertyTable+0x188>)
   16d88:	681b      	ldr	r3, [r3, #0]
   16d8a:	2298      	movs	r2, #152	; 0x98
   16d8c:	218c      	movs	r1, #140	; 0x8c
   16d8e:	00c9      	lsls	r1, r1, #3
   16d90:	5299      	strh	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.ObjectPropertyTableSizeInBytes = TRACE_OBJECT_TABLE_SIZE;
   16d92:	4b03      	ldr	r3, [pc, #12]	; (16da0 <vTraceInitObjectPropertyTable+0x188>)
   16d94:	681b      	ldr	r3, [r3, #0]
   16d96:	4a07      	ldr	r2, [pc, #28]	; (16db4 <vTraceInitObjectPropertyTable+0x19c>)
   16d98:	661a      	str	r2, [r3, #96]	; 0x60
}
   16d9a:	46c0      	nop			; (mov r8, r8)
   16d9c:	46bd      	mov	sp, r7
   16d9e:	bd80      	pop	{r7, pc}
   16da0:	20000c78 	.word	0x20000c78
   16da4:	000002fd 	.word	0x000002fd
   16da8:	00000352 	.word	0x00000352
   16dac:	000003a2 	.word	0x000003a2
   16db0:	00000401 	.word	0x00000401
   16db4:	000004bf 	.word	0x000004bf

00016db8 <vTraceInitObjectHandleStack>:

/* Initialization of the handle mechanism, see e.g, prvTraceGetObjectHandle */
void vTraceInitObjectHandleStack()
{
   16db8:	b580      	push	{r7, lr}
   16dba:	af00      	add	r7, sp, #0
	objectHandleStacks.indexOfNextAvailableHandle[0] = objectHandleStacks.lowestIndexOfClass[0] = 0;
   16dbc:	4b2e      	ldr	r3, [pc, #184]	; (16e78 <vTraceInitObjectHandleStack+0xc0>)
   16dbe:	2200      	movs	r2, #0
   16dc0:	825a      	strh	r2, [r3, #18]
   16dc2:	4b2d      	ldr	r3, [pc, #180]	; (16e78 <vTraceInitObjectHandleStack+0xc0>)
   16dc4:	8a5a      	ldrh	r2, [r3, #18]
   16dc6:	4b2c      	ldr	r3, [pc, #176]	; (16e78 <vTraceInitObjectHandleStack+0xc0>)
   16dc8:	801a      	strh	r2, [r3, #0]
	objectHandleStacks.indexOfNextAvailableHandle[1] = objectHandleStacks.lowestIndexOfClass[1] = (TRC_CFG_NQUEUE);
   16dca:	4b2b      	ldr	r3, [pc, #172]	; (16e78 <vTraceInitObjectHandleStack+0xc0>)
   16dcc:	220a      	movs	r2, #10
   16dce:	829a      	strh	r2, [r3, #20]
   16dd0:	4b29      	ldr	r3, [pc, #164]	; (16e78 <vTraceInitObjectHandleStack+0xc0>)
   16dd2:	8a9a      	ldrh	r2, [r3, #20]
   16dd4:	4b28      	ldr	r3, [pc, #160]	; (16e78 <vTraceInitObjectHandleStack+0xc0>)
   16dd6:	805a      	strh	r2, [r3, #2]
	objectHandleStacks.indexOfNextAvailableHandle[2] = objectHandleStacks.lowestIndexOfClass[2] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE);
   16dd8:	4b27      	ldr	r3, [pc, #156]	; (16e78 <vTraceInitObjectHandleStack+0xc0>)
   16dda:	2214      	movs	r2, #20
   16ddc:	82da      	strh	r2, [r3, #22]
   16dde:	4b26      	ldr	r3, [pc, #152]	; (16e78 <vTraceInitObjectHandleStack+0xc0>)
   16de0:	8ada      	ldrh	r2, [r3, #22]
   16de2:	4b25      	ldr	r3, [pc, #148]	; (16e78 <vTraceInitObjectHandleStack+0xc0>)
   16de4:	809a      	strh	r2, [r3, #4]
	objectHandleStacks.indexOfNextAvailableHandle[3] = objectHandleStacks.lowestIndexOfClass[3] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX);
   16de6:	4b24      	ldr	r3, [pc, #144]	; (16e78 <vTraceInitObjectHandleStack+0xc0>)
   16de8:	221e      	movs	r2, #30
   16dea:	831a      	strh	r2, [r3, #24]
   16dec:	4b22      	ldr	r3, [pc, #136]	; (16e78 <vTraceInitObjectHandleStack+0xc0>)
   16dee:	8b1a      	ldrh	r2, [r3, #24]
   16df0:	4b21      	ldr	r3, [pc, #132]	; (16e78 <vTraceInitObjectHandleStack+0xc0>)
   16df2:	80da      	strh	r2, [r3, #6]
	objectHandleStacks.indexOfNextAvailableHandle[4] = objectHandleStacks.lowestIndexOfClass[4] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) + (TRC_CFG_NTASK);
   16df4:	4b20      	ldr	r3, [pc, #128]	; (16e78 <vTraceInitObjectHandleStack+0xc0>)
   16df6:	222d      	movs	r2, #45	; 0x2d
   16df8:	835a      	strh	r2, [r3, #26]
   16dfa:	4b1f      	ldr	r3, [pc, #124]	; (16e78 <vTraceInitObjectHandleStack+0xc0>)
   16dfc:	8b5a      	ldrh	r2, [r3, #26]
   16dfe:	4b1e      	ldr	r3, [pc, #120]	; (16e78 <vTraceInitObjectHandleStack+0xc0>)
   16e00:	811a      	strh	r2, [r3, #8]
	objectHandleStacks.indexOfNextAvailableHandle[5] = objectHandleStacks.lowestIndexOfClass[5] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) + (TRC_CFG_NTASK) + (TRC_CFG_NISR);
   16e02:	4b1d      	ldr	r3, [pc, #116]	; (16e78 <vTraceInitObjectHandleStack+0xc0>)
   16e04:	2232      	movs	r2, #50	; 0x32
   16e06:	839a      	strh	r2, [r3, #28]
   16e08:	4b1b      	ldr	r3, [pc, #108]	; (16e78 <vTraceInitObjectHandleStack+0xc0>)
   16e0a:	8b9a      	ldrh	r2, [r3, #28]
   16e0c:	4b1a      	ldr	r3, [pc, #104]	; (16e78 <vTraceInitObjectHandleStack+0xc0>)
   16e0e:	815a      	strh	r2, [r3, #10]
	objectHandleStacks.indexOfNextAvailableHandle[6] = objectHandleStacks.lowestIndexOfClass[6] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) + (TRC_CFG_NTASK) + (TRC_CFG_NISR) + (TRC_CFG_NTIMER);
   16e10:	4b19      	ldr	r3, [pc, #100]	; (16e78 <vTraceInitObjectHandleStack+0xc0>)
   16e12:	2237      	movs	r2, #55	; 0x37
   16e14:	83da      	strh	r2, [r3, #30]
   16e16:	4b18      	ldr	r3, [pc, #96]	; (16e78 <vTraceInitObjectHandleStack+0xc0>)
   16e18:	8bda      	ldrh	r2, [r3, #30]
   16e1a:	4b17      	ldr	r3, [pc, #92]	; (16e78 <vTraceInitObjectHandleStack+0xc0>)
   16e1c:	819a      	strh	r2, [r3, #12]
	objectHandleStacks.indexOfNextAvailableHandle[7] = objectHandleStacks.lowestIndexOfClass[7] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) + (TRC_CFG_NTASK) + (TRC_CFG_NISR) + (TRC_CFG_NTIMER) + (TRC_CFG_NEVENTGROUP);
   16e1e:	4b16      	ldr	r3, [pc, #88]	; (16e78 <vTraceInitObjectHandleStack+0xc0>)
   16e20:	223c      	movs	r2, #60	; 0x3c
   16e22:	841a      	strh	r2, [r3, #32]
   16e24:	4b14      	ldr	r3, [pc, #80]	; (16e78 <vTraceInitObjectHandleStack+0xc0>)
   16e26:	8c1a      	ldrh	r2, [r3, #32]
   16e28:	4b13      	ldr	r3, [pc, #76]	; (16e78 <vTraceInitObjectHandleStack+0xc0>)
   16e2a:	81da      	strh	r2, [r3, #14]
	objectHandleStacks.indexOfNextAvailableHandle[8] = objectHandleStacks.lowestIndexOfClass[8] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) + (TRC_CFG_NTASK) + (TRC_CFG_NISR) + (TRC_CFG_NTIMER) + (TRC_CFG_NEVENTGROUP) + (TRC_CFG_NSTREAMBUFFER);
   16e2c:	4b12      	ldr	r3, [pc, #72]	; (16e78 <vTraceInitObjectHandleStack+0xc0>)
   16e2e:	2241      	movs	r2, #65	; 0x41
   16e30:	845a      	strh	r2, [r3, #34]	; 0x22
   16e32:	4b11      	ldr	r3, [pc, #68]	; (16e78 <vTraceInitObjectHandleStack+0xc0>)
   16e34:	8c5a      	ldrh	r2, [r3, #34]	; 0x22
   16e36:	4b10      	ldr	r3, [pc, #64]	; (16e78 <vTraceInitObjectHandleStack+0xc0>)
   16e38:	821a      	strh	r2, [r3, #16]

	objectHandleStacks.highestIndexOfClass[0] = (TRC_CFG_NQUEUE) - 1;
   16e3a:	4b0f      	ldr	r3, [pc, #60]	; (16e78 <vTraceInitObjectHandleStack+0xc0>)
   16e3c:	2209      	movs	r2, #9
   16e3e:	849a      	strh	r2, [r3, #36]	; 0x24
	objectHandleStacks.highestIndexOfClass[1] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) - 1;
   16e40:	4b0d      	ldr	r3, [pc, #52]	; (16e78 <vTraceInitObjectHandleStack+0xc0>)
   16e42:	2213      	movs	r2, #19
   16e44:	84da      	strh	r2, [r3, #38]	; 0x26
	objectHandleStacks.highestIndexOfClass[2] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) - 1;
   16e46:	4b0c      	ldr	r3, [pc, #48]	; (16e78 <vTraceInitObjectHandleStack+0xc0>)
   16e48:	221d      	movs	r2, #29
   16e4a:	851a      	strh	r2, [r3, #40]	; 0x28
	objectHandleStacks.highestIndexOfClass[3] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) + (TRC_CFG_NTASK) - 1;
   16e4c:	4b0a      	ldr	r3, [pc, #40]	; (16e78 <vTraceInitObjectHandleStack+0xc0>)
   16e4e:	222c      	movs	r2, #44	; 0x2c
   16e50:	855a      	strh	r2, [r3, #42]	; 0x2a
	objectHandleStacks.highestIndexOfClass[4] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) + (TRC_CFG_NTASK) + (TRC_CFG_NISR) - 1;
   16e52:	4b09      	ldr	r3, [pc, #36]	; (16e78 <vTraceInitObjectHandleStack+0xc0>)
   16e54:	2231      	movs	r2, #49	; 0x31
   16e56:	859a      	strh	r2, [r3, #44]	; 0x2c
	objectHandleStacks.highestIndexOfClass[5] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) + (TRC_CFG_NTASK) + (TRC_CFG_NISR) + (TRC_CFG_NTIMER) - 1;
   16e58:	4b07      	ldr	r3, [pc, #28]	; (16e78 <vTraceInitObjectHandleStack+0xc0>)
   16e5a:	2236      	movs	r2, #54	; 0x36
   16e5c:	85da      	strh	r2, [r3, #46]	; 0x2e
	objectHandleStacks.highestIndexOfClass[6] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) + (TRC_CFG_NTASK) + (TRC_CFG_NISR) + (TRC_CFG_NTIMER) + (TRC_CFG_NEVENTGROUP) - 1;
   16e5e:	4b06      	ldr	r3, [pc, #24]	; (16e78 <vTraceInitObjectHandleStack+0xc0>)
   16e60:	223b      	movs	r2, #59	; 0x3b
   16e62:	861a      	strh	r2, [r3, #48]	; 0x30
	objectHandleStacks.highestIndexOfClass[7] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) + (TRC_CFG_NTASK) + (TRC_CFG_NISR) + (TRC_CFG_NTIMER) + (TRC_CFG_NEVENTGROUP) + (TRC_CFG_NSTREAMBUFFER) - 1;
   16e64:	4b04      	ldr	r3, [pc, #16]	; (16e78 <vTraceInitObjectHandleStack+0xc0>)
   16e66:	2240      	movs	r2, #64	; 0x40
   16e68:	865a      	strh	r2, [r3, #50]	; 0x32
	objectHandleStacks.highestIndexOfClass[8] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) + (TRC_CFG_NTASK) + (TRC_CFG_NISR) + (TRC_CFG_NTIMER) + (TRC_CFG_NEVENTGROUP) + (TRC_CFG_NSTREAMBUFFER) + (TRC_CFG_NMESSAGEBUFFER) - 1;
   16e6a:	4b03      	ldr	r3, [pc, #12]	; (16e78 <vTraceInitObjectHandleStack+0xc0>)
   16e6c:	2245      	movs	r2, #69	; 0x45
   16e6e:	869a      	strh	r2, [r3, #52]	; 0x34
}
   16e70:	46c0      	nop			; (mov r8, r8)
   16e72:	46bd      	mov	sp, r7
   16e74:	bd80      	pop	{r7, pc}
   16e76:	46c0      	nop			; (mov r8, r8)
   16e78:	20000be8 	.word	0x20000be8

00016e7c <pszTraceGetErrorNotEnoughHandles>:

/* Returns the "Not enough handles" error message for this object class */
const char* pszTraceGetErrorNotEnoughHandles(traceObjectClass objectclass)
{
   16e7c:	b580      	push	{r7, lr}
   16e7e:	b082      	sub	sp, #8
   16e80:	af00      	add	r7, sp, #0
   16e82:	0002      	movs	r2, r0
   16e84:	1dfb      	adds	r3, r7, #7
   16e86:	701a      	strb	r2, [r3, #0]
	switch(objectclass)
   16e88:	1dfb      	adds	r3, r7, #7
   16e8a:	781b      	ldrb	r3, [r3, #0]
   16e8c:	2b08      	cmp	r3, #8
   16e8e:	d816      	bhi.n	16ebe <pszTraceGetErrorNotEnoughHandles+0x42>
   16e90:	009a      	lsls	r2, r3, #2
   16e92:	4b0d      	ldr	r3, [pc, #52]	; (16ec8 <pszTraceGetErrorNotEnoughHandles+0x4c>)
   16e94:	18d3      	adds	r3, r2, r3
   16e96:	681b      	ldr	r3, [r3, #0]
   16e98:	469f      	mov	pc, r3
	{
	case TRACE_CLASS_TASK:
		return "Not enough TASK handles - increase TRC_CFG_NTASK in trcSnapshotConfig.h";
   16e9a:	4b0c      	ldr	r3, [pc, #48]	; (16ecc <pszTraceGetErrorNotEnoughHandles+0x50>)
   16e9c:	e010      	b.n	16ec0 <pszTraceGetErrorNotEnoughHandles+0x44>
	case TRACE_CLASS_ISR:
		return "Not enough ISR handles - increase TRC_CFG_NISR in trcSnapshotConfig.h";
   16e9e:	4b0c      	ldr	r3, [pc, #48]	; (16ed0 <pszTraceGetErrorNotEnoughHandles+0x54>)
   16ea0:	e00e      	b.n	16ec0 <pszTraceGetErrorNotEnoughHandles+0x44>
	case TRACE_CLASS_SEMAPHORE:
		return "Not enough SEMAPHORE handles - increase TRC_CFG_NSEMAPHORE in trcSnapshotConfig.h";
   16ea2:	4b0c      	ldr	r3, [pc, #48]	; (16ed4 <pszTraceGetErrorNotEnoughHandles+0x58>)
   16ea4:	e00c      	b.n	16ec0 <pszTraceGetErrorNotEnoughHandles+0x44>
	case TRACE_CLASS_MUTEX:
		return "Not enough MUTEX handles - increase TRC_CFG_NMUTEX in trcSnapshotConfig.h";
   16ea6:	4b0c      	ldr	r3, [pc, #48]	; (16ed8 <pszTraceGetErrorNotEnoughHandles+0x5c>)
   16ea8:	e00a      	b.n	16ec0 <pszTraceGetErrorNotEnoughHandles+0x44>
	case TRACE_CLASS_QUEUE:
		return "Not enough QUEUE handles - increase TRC_CFG_NQUEUE in trcSnapshotConfig.h";
   16eaa:	4b0c      	ldr	r3, [pc, #48]	; (16edc <pszTraceGetErrorNotEnoughHandles+0x60>)
   16eac:	e008      	b.n	16ec0 <pszTraceGetErrorNotEnoughHandles+0x44>
	case TRACE_CLASS_TIMER:
		return "Not enough TIMER handles - increase TRC_CFG_NTIMER in trcSnapshotConfig.h";
   16eae:	4b0c      	ldr	r3, [pc, #48]	; (16ee0 <pszTraceGetErrorNotEnoughHandles+0x64>)
   16eb0:	e006      	b.n	16ec0 <pszTraceGetErrorNotEnoughHandles+0x44>
	case TRACE_CLASS_EVENTGROUP:
		return "Not enough EVENTGROUP handles - increase TRC_CFG_NEVENTGROUP in trcSnapshotConfig.h";
   16eb2:	4b0c      	ldr	r3, [pc, #48]	; (16ee4 <pszTraceGetErrorNotEnoughHandles+0x68>)
   16eb4:	e004      	b.n	16ec0 <pszTraceGetErrorNotEnoughHandles+0x44>
	case TRACE_CLASS_STREAMBUFFER:
		return "Not enough STREAMBUFFER handles - increase TRC_CFG_NSTREAMBUFFER in trcSnapshotConfig.h";
   16eb6:	4b0c      	ldr	r3, [pc, #48]	; (16ee8 <pszTraceGetErrorNotEnoughHandles+0x6c>)
   16eb8:	e002      	b.n	16ec0 <pszTraceGetErrorNotEnoughHandles+0x44>
	case TRACE_CLASS_MESSAGEBUFFER:
		return "Not enough MESSAGEBUFFER handles - increase TRC_CFG_NMESSAGEBUFFER in trcSnapshotConfig.h";
   16eba:	4b0c      	ldr	r3, [pc, #48]	; (16eec <pszTraceGetErrorNotEnoughHandles+0x70>)
   16ebc:	e000      	b.n	16ec0 <pszTraceGetErrorNotEnoughHandles+0x44>
	default:
		return "pszTraceGetErrorHandles: Invalid objectclass!";
   16ebe:	4b0c      	ldr	r3, [pc, #48]	; (16ef0 <pszTraceGetErrorNotEnoughHandles+0x74>)
	}
}
   16ec0:	0018      	movs	r0, r3
   16ec2:	46bd      	mov	sp, r7
   16ec4:	b002      	add	sp, #8
   16ec6:	bd80      	pop	{r7, pc}
   16ec8:	00035618 	.word	0x00035618
   16ecc:	00035318 	.word	0x00035318
   16ed0:	00035360 	.word	0x00035360
   16ed4:	000353a8 	.word	0x000353a8
   16ed8:	000353fc 	.word	0x000353fc
   16edc:	00035448 	.word	0x00035448
   16ee0:	00035494 	.word	0x00035494
   16ee4:	000354e0 	.word	0x000354e0
   16ee8:	00035534 	.word	0x00035534
   16eec:	0003558c 	.word	0x0003558c
   16ef0:	000355e8 	.word	0x000355e8

00016ef4 <uiTraceStart>:
 *
 * This function is obsolete, but has been saved for backwards compatibility.
 * We recommend using vTraceEnable instead.
 ******************************************************************************/
uint32_t uiTraceStart(void)
{
   16ef4:	b590      	push	{r4, r7, lr}
   16ef6:	b087      	sub	sp, #28
   16ef8:	af00      	add	r7, sp, #0
	traceHandle handle;
	TRACE_ALLOC_CRITICAL_SECTION();

	handle = 0;
   16efa:	2317      	movs	r3, #23
   16efc:	18fb      	adds	r3, r7, r3
   16efe:	2200      	movs	r2, #0
   16f00:	701a      	strb	r2, [r3, #0]

	if (RecorderDataPtr == NULL)
   16f02:	4b36      	ldr	r3, [pc, #216]	; (16fdc <uiTraceStart+0xe8>)
   16f04:	681b      	ldr	r3, [r3, #0]
   16f06:	2b00      	cmp	r3, #0
   16f08:	d10b      	bne.n	16f22 <uiTraceStart+0x2e>
	{
		TRACE_ASSERT(RecorderDataPtr != NULL, "Recorder not initialized. Use vTraceEnable() instead!", 0);
   16f0a:	4b34      	ldr	r3, [pc, #208]	; (16fdc <uiTraceStart+0xe8>)
   16f0c:	681b      	ldr	r3, [r3, #0]
   16f0e:	2b00      	cmp	r3, #0
   16f10:	d105      	bne.n	16f1e <uiTraceStart+0x2a>
   16f12:	4b33      	ldr	r3, [pc, #204]	; (16fe0 <uiTraceStart+0xec>)
   16f14:	0018      	movs	r0, r3
   16f16:	4b33      	ldr	r3, [pc, #204]	; (16fe4 <uiTraceStart+0xf0>)
   16f18:	4798      	blx	r3
   16f1a:	2300      	movs	r3, #0
   16f1c:	e059      	b.n	16fd2 <uiTraceStart+0xde>
		return 0;
   16f1e:	2300      	movs	r3, #0
   16f20:	e057      	b.n	16fd2 <uiTraceStart+0xde>
	}
	
	if (RecorderDataPtr->recorderActive == 1)
   16f22:	4b2e      	ldr	r3, [pc, #184]	; (16fdc <uiTraceStart+0xe8>)
   16f24:	681b      	ldr	r3, [r3, #0]
   16f26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   16f28:	2b01      	cmp	r3, #1
   16f2a:	d101      	bne.n	16f30 <uiTraceStart+0x3c>
		return 1; /* Already running */
   16f2c:	2301      	movs	r3, #1
   16f2e:	e050      	b.n	16fd2 <uiTraceStart+0xde>

	if (traceErrorMessage == NULL)
   16f30:	4b2d      	ldr	r3, [pc, #180]	; (16fe8 <uiTraceStart+0xf4>)
   16f32:	681b      	ldr	r3, [r3, #0]
   16f34:	2b00      	cmp	r3, #0
   16f36:	d149      	bne.n	16fcc <uiTraceStart+0xd8>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   16f38:	f3ef 8310 	mrs	r3, PRIMASK
   16f3c:	60bb      	str	r3, [r7, #8]
  return(result);
   16f3e:	68bb      	ldr	r3, [r7, #8]
	{
		trcCRITICAL_SECTION_BEGIN();
   16f40:	613b      	str	r3, [r7, #16]
   16f42:	2301      	movs	r3, #1
   16f44:	60fb      	str	r3, [r7, #12]

    \param [in]    priMask  Priority Mask
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
   16f46:	68fb      	ldr	r3, [r7, #12]
   16f48:	f383 8810 	msr	PRIMASK, r3
   16f4c:	4b27      	ldr	r3, [pc, #156]	; (16fec <uiTraceStart+0xf8>)
   16f4e:	681b      	ldr	r3, [r3, #0]
   16f50:	1c5a      	adds	r2, r3, #1
   16f52:	4b26      	ldr	r3, [pc, #152]	; (16fec <uiTraceStart+0xf8>)
   16f54:	601a      	str	r2, [r3, #0]
		RecorderDataPtr->recorderActive = 1;
   16f56:	4b21      	ldr	r3, [pc, #132]	; (16fdc <uiTraceStart+0xe8>)
   16f58:	681b      	ldr	r3, [r3, #0]
   16f5a:	2201      	movs	r2, #1
   16f5c:	631a      	str	r2, [r3, #48]	; 0x30

		handle = TRACE_GET_TASK_NUMBER(TRACE_GET_CURRENT_TASK());
   16f5e:	4b24      	ldr	r3, [pc, #144]	; (16ff0 <uiTraceStart+0xfc>)
   16f60:	4798      	blx	r3
   16f62:	0003      	movs	r3, r0
   16f64:	0018      	movs	r0, r3
   16f66:	4b23      	ldr	r3, [pc, #140]	; (16ff4 <uiTraceStart+0x100>)
   16f68:	4798      	blx	r3
   16f6a:	0003      	movs	r3, r0
   16f6c:	001a      	movs	r2, r3
   16f6e:	2317      	movs	r3, #23
   16f70:	18fb      	adds	r3, r7, r3
   16f72:	701a      	strb	r2, [r3, #0]
		if (handle == 0)
   16f74:	2317      	movs	r3, #23
   16f76:	18fb      	adds	r3, r7, r3
   16f78:	781b      	ldrb	r3, [r3, #0]
   16f7a:	2b00      	cmp	r3, #0
   16f7c:	d116      	bne.n	16fac <uiTraceStart+0xb8>
		{
			/* This occurs if the scheduler is not yet started.
			This creates a dummy "(startup)" task entry internally in the
			recorder */
			handle = prvTraceGetObjectHandle(TRACE_CLASS_TASK);
   16f7e:	2317      	movs	r3, #23
   16f80:	18fc      	adds	r4, r7, r3
   16f82:	2003      	movs	r0, #3
   16f84:	4b1c      	ldr	r3, [pc, #112]	; (16ff8 <uiTraceStart+0x104>)
   16f86:	4798      	blx	r3
   16f88:	0003      	movs	r3, r0
   16f8a:	7023      	strb	r3, [r4, #0]
			prvTraceSetObjectName(TRACE_CLASS_TASK, handle, "(startup)");
   16f8c:	4a1b      	ldr	r2, [pc, #108]	; (16ffc <uiTraceStart+0x108>)
   16f8e:	2317      	movs	r3, #23
   16f90:	18fb      	adds	r3, r7, r3
   16f92:	781b      	ldrb	r3, [r3, #0]
   16f94:	0019      	movs	r1, r3
   16f96:	2003      	movs	r0, #3
   16f98:	4b19      	ldr	r3, [pc, #100]	; (17000 <uiTraceStart+0x10c>)
   16f9a:	4798      	blx	r3

			prvTraceSetPriorityProperty(TRACE_CLASS_TASK, handle, 0);
   16f9c:	2317      	movs	r3, #23
   16f9e:	18fb      	adds	r3, r7, r3
   16fa0:	781b      	ldrb	r3, [r3, #0]
   16fa2:	2200      	movs	r2, #0
   16fa4:	0019      	movs	r1, r3
   16fa6:	2003      	movs	r0, #3
   16fa8:	4b16      	ldr	r3, [pc, #88]	; (17004 <uiTraceStart+0x110>)
   16faa:	4798      	blx	r3
		}

		prvTraceStoreTaskswitch(handle); /* Register the currently running task */
   16fac:	2317      	movs	r3, #23
   16fae:	18fb      	adds	r3, r7, r3
   16fb0:	781b      	ldrb	r3, [r3, #0]
   16fb2:	0018      	movs	r0, r3
   16fb4:	4b14      	ldr	r3, [pc, #80]	; (17008 <uiTraceStart+0x114>)
   16fb6:	4798      	blx	r3
		trcCRITICAL_SECTION_END();
   16fb8:	4b0c      	ldr	r3, [pc, #48]	; (16fec <uiTraceStart+0xf8>)
   16fba:	681b      	ldr	r3, [r3, #0]
   16fbc:	1e5a      	subs	r2, r3, #1
   16fbe:	4b0b      	ldr	r3, [pc, #44]	; (16fec <uiTraceStart+0xf8>)
   16fc0:	601a      	str	r2, [r3, #0]
   16fc2:	693b      	ldr	r3, [r7, #16]
   16fc4:	607b      	str	r3, [r7, #4]
   16fc6:	687b      	ldr	r3, [r7, #4]
   16fc8:	f383 8810 	msr	PRIMASK, r3
	}

	return RecorderDataPtr->recorderActive;
   16fcc:	4b03      	ldr	r3, [pc, #12]	; (16fdc <uiTraceStart+0xe8>)
   16fce:	681b      	ldr	r3, [r3, #0]
   16fd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
}
   16fd2:	0018      	movs	r0, r3
   16fd4:	46bd      	mov	sp, r7
   16fd6:	b007      	add	sp, #28
   16fd8:	bd90      	pop	{r4, r7, pc}
   16fda:	46c0      	nop			; (mov r8, r8)
   16fdc:	20000c78 	.word	0x20000c78
   16fe0:	0003563c 	.word	0x0003563c
   16fe4:	0001815d 	.word	0x0001815d
   16fe8:	20000bd8 	.word	0x20000bd8
   16fec:	20000bd0 	.word	0x20000bd0
   16ff0:	00016b5d 	.word	0x00016b5d
   16ff4:	000168a1 	.word	0x000168a1
   16ff8:	00017e41 	.word	0x00017e41
   16ffc:	00035680 	.word	0x00035680
   17000:	00018071 	.word	0x00018071
   17004:	000177d5 	.word	0x000177d5
   17008:	000176bd 	.word	0x000176bd

0001700c <vTraceStart>:
 *
 * This function is obsolete, but has been saved for backwards compatibility.
 * We recommend using vTraceEnable instead.
 ******************************************************************************/
void vTraceStart(void)
{
   1700c:	b580      	push	{r7, lr}
   1700e:	af00      	add	r7, sp, #0
	(void)uiTraceStart();
   17010:	4b02      	ldr	r3, [pc, #8]	; (1701c <vTraceStart+0x10>)
   17012:	4798      	blx	r3
}
   17014:	46c0      	nop			; (mov r8, r8)
   17016:	46bd      	mov	sp, r7
   17018:	bd80      	pop	{r7, pc}
   1701a:	46c0      	nop			; (mov r8, r8)
   1701c:	00016ef5 	.word	0x00016ef5

00017020 <vTraceStop>:
 *
 * Stops the recorder. The recording can be resumed by calling vTraceStart.
 * This does not reset the recorder. Use vTraceClear if that is desired.
 ******************************************************************************/
void vTraceStop(void)
{
   17020:	b580      	push	{r7, lr}
   17022:	af00      	add	r7, sp, #0
	if (RecorderDataPtr != NULL)
   17024:	4b08      	ldr	r3, [pc, #32]	; (17048 <vTraceStop+0x28>)
   17026:	681b      	ldr	r3, [r3, #0]
   17028:	2b00      	cmp	r3, #0
   1702a:	d003      	beq.n	17034 <vTraceStop+0x14>
	{
		RecorderDataPtr->recorderActive = 0;
   1702c:	4b06      	ldr	r3, [pc, #24]	; (17048 <vTraceStop+0x28>)
   1702e:	681b      	ldr	r3, [r3, #0]
   17030:	2200      	movs	r2, #0
   17032:	631a      	str	r2, [r3, #48]	; 0x30
	}

	if (vTraceStopHookPtr != (TRACE_STOP_HOOK)0)
   17034:	4b05      	ldr	r3, [pc, #20]	; (1704c <vTraceStop+0x2c>)
   17036:	681b      	ldr	r3, [r3, #0]
   17038:	2b00      	cmp	r3, #0
   1703a:	d002      	beq.n	17042 <vTraceStop+0x22>
	{
		(*vTraceStopHookPtr)();			/* An application call-back function. */
   1703c:	4b03      	ldr	r3, [pc, #12]	; (1704c <vTraceStop+0x2c>)
   1703e:	681b      	ldr	r3, [r3, #0]
   17040:	4798      	blx	r3
	}
}
   17042:	46c0      	nop			; (mov r8, r8)
   17044:	46bd      	mov	sp, r7
   17046:	bd80      	pop	{r7, pc}
   17048:	20000c78 	.word	0x20000c78
   1704c:	20000be0 	.word	0x20000be0

00017050 <xTraceIsRecordingEnabled>:
/*******************************************************************************
* xTraceIsRecordingEnabled
* Returns true (1) if the recorder is enabled (i.e. is recording), otherwise 0.
******************************************************************************/
int xTraceIsRecordingEnabled(void)
{
   17050:	b580      	push	{r7, lr}
   17052:	af00      	add	r7, sp, #0
	if (RecorderDataPtr != NULL)
   17054:	4b05      	ldr	r3, [pc, #20]	; (1706c <xTraceIsRecordingEnabled+0x1c>)
   17056:	681b      	ldr	r3, [r3, #0]
   17058:	2b00      	cmp	r3, #0
   1705a:	d003      	beq.n	17064 <xTraceIsRecordingEnabled+0x14>
	{
		return (int)RecorderDataPtr->recorderActive;
   1705c:	4b03      	ldr	r3, [pc, #12]	; (1706c <xTraceIsRecordingEnabled+0x1c>)
   1705e:	681b      	ldr	r3, [r3, #0]
   17060:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   17062:	e000      	b.n	17066 <xTraceIsRecordingEnabled+0x16>
	}
	else
	{
		return 0;
   17064:	2300      	movs	r3, #0
	}
}
   17066:	0018      	movs	r0, r3
   17068:	46bd      	mov	sp, r7
   1706a:	bd80      	pop	{r7, pc}
   1706c:	20000c78 	.word	0x20000c78

00017070 <prvTraceStoreTaskReady>:
 * prvTraceStoreTaskReady
 *
 * This function stores a ready state for the task handle sent in as parameter.
 ******************************************************************************/
void prvTraceStoreTaskReady(traceHandle handle) 
{
   17070:	b590      	push	{r4, r7, lr}
   17072:	b089      	sub	sp, #36	; 0x24
   17074:	af00      	add	r7, sp, #0
   17076:	0002      	movs	r2, r0
   17078:	1dfb      	adds	r3, r7, #7
   1707a:	701a      	strb	r2, [r3, #0]
	TREvent* tr;
	uint8_t hnd8;

	TRACE_ALLOC_CRITICAL_SECTION();

	if (handle == 0)
   1707c:	1dfb      	adds	r3, r7, #7
   1707e:	781b      	ldrb	r3, [r3, #0]
   17080:	2b00      	cmp	r3, #0
   17082:	d057      	beq.n	17134 <prvTraceStoreTaskReady+0xc4>
		/*  On FreeRTOS v7.3.0, this occurs when creating tasks due to a bad
		placement of the trace macro. In that case, the events are ignored. */
		return;
	}
	
	if (! readyEventsEnabled)
   17084:	4b2e      	ldr	r3, [pc, #184]	; (17140 <prvTraceStoreTaskReady+0xd0>)
   17086:	681b      	ldr	r3, [r3, #0]
   17088:	2b00      	cmp	r3, #0
   1708a:	d055      	beq.n	17138 <prvTraceStoreTaskReady+0xc8>
		a "hidden" (not traced) task, we must therefore disable recording 
		of ready events to avoid an undesired ready event... */
		return;
	}

	TRACE_ASSERT(handle <= (TRC_CFG_NTASK), "prvTraceStoreTaskReady: Invalid value for handle", TRC_UNUSED);
   1708c:	1dfb      	adds	r3, r7, #7
   1708e:	781b      	ldrb	r3, [r3, #0]
   17090:	2b0f      	cmp	r3, #15
   17092:	d904      	bls.n	1709e <prvTraceStoreTaskReady+0x2e>
   17094:	4b2b      	ldr	r3, [pc, #172]	; (17144 <prvTraceStoreTaskReady+0xd4>)
   17096:	0018      	movs	r0, r3
   17098:	4b2b      	ldr	r3, [pc, #172]	; (17148 <prvTraceStoreTaskReady+0xd8>)
   1709a:	4798      	blx	r3
   1709c:	e04d      	b.n	1713a <prvTraceStoreTaskReady+0xca>

	if (recorder_busy)
   1709e:	4b2b      	ldr	r3, [pc, #172]	; (1714c <prvTraceStoreTaskReady+0xdc>)
   170a0:	681b      	ldr	r3, [r3, #0]
   170a2:	2b00      	cmp	r3, #0
   170a4:	d004      	beq.n	170b0 <prvTraceStoreTaskReady+0x40>
		* TRACE_EXIT_CRITICAL_SECTION). They must disable the RTOS tick interrupt
		* and any other ISRs that calls the trace recorder directly or via
		* traced kernel functions. The ARM port disables all interrupts using the
		* PRIMASK register to avoid this issue.
		*************************************************************************/
		prvTraceError("Recorder busy - high priority ISR using syscall? (1)");
   170a6:	4b2a      	ldr	r3, [pc, #168]	; (17150 <prvTraceStoreTaskReady+0xe0>)
   170a8:	0018      	movs	r0, r3
   170aa:	4b27      	ldr	r3, [pc, #156]	; (17148 <prvTraceStoreTaskReady+0xd8>)
   170ac:	4798      	blx	r3
		return;
   170ae:	e044      	b.n	1713a <prvTraceStoreTaskReady+0xca>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   170b0:	f3ef 8310 	mrs	r3, PRIMASK
   170b4:	60fb      	str	r3, [r7, #12]
  return(result);
   170b6:	68fb      	ldr	r3, [r7, #12]
	}

	trcCRITICAL_SECTION_BEGIN();
   170b8:	61fb      	str	r3, [r7, #28]
   170ba:	2301      	movs	r3, #1
   170bc:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
   170be:	693b      	ldr	r3, [r7, #16]
   170c0:	f383 8810 	msr	PRIMASK, r3
   170c4:	4b21      	ldr	r3, [pc, #132]	; (1714c <prvTraceStoreTaskReady+0xdc>)
   170c6:	681b      	ldr	r3, [r3, #0]
   170c8:	1c5a      	adds	r2, r3, #1
   170ca:	4b20      	ldr	r3, [pc, #128]	; (1714c <prvTraceStoreTaskReady+0xdc>)
   170cc:	601a      	str	r2, [r3, #0]
	if (RecorderDataPtr->recorderActive) /* Need to repeat this check! */
   170ce:	4b21      	ldr	r3, [pc, #132]	; (17154 <prvTraceStoreTaskReady+0xe4>)
   170d0:	681b      	ldr	r3, [r3, #0]
   170d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   170d4:	2b00      	cmp	r3, #0
   170d6:	d022      	beq.n	1711e <prvTraceStoreTaskReady+0xae>
	{
		dts3 = (uint16_t)prvTraceGetDTS(0xFFFF);
   170d8:	231a      	movs	r3, #26
   170da:	18fc      	adds	r4, r7, r3
   170dc:	4b1e      	ldr	r3, [pc, #120]	; (17158 <prvTraceStoreTaskReady+0xe8>)
   170de:	0018      	movs	r0, r3
   170e0:	4b1e      	ldr	r3, [pc, #120]	; (1715c <prvTraceStoreTaskReady+0xec>)
   170e2:	4798      	blx	r3
   170e4:	0003      	movs	r3, r0
   170e6:	8023      	strh	r3, [r4, #0]
		hnd8 = prvTraceGet8BitHandle(handle);
   170e8:	2319      	movs	r3, #25
   170ea:	18fb      	adds	r3, r7, r3
   170ec:	1dfa      	adds	r2, r7, #7
   170ee:	7812      	ldrb	r2, [r2, #0]
   170f0:	701a      	strb	r2, [r3, #0]
		tr = (TREvent*)prvTraceNextFreeEventBufferSlot();
   170f2:	4b1b      	ldr	r3, [pc, #108]	; (17160 <prvTraceStoreTaskReady+0xf0>)
   170f4:	4798      	blx	r3
   170f6:	0003      	movs	r3, r0
   170f8:	617b      	str	r3, [r7, #20]
		if (tr != NULL)
   170fa:	697b      	ldr	r3, [r7, #20]
   170fc:	2b00      	cmp	r3, #0
   170fe:	d00e      	beq.n	1711e <prvTraceStoreTaskReady+0xae>
		{
			tr->type = DIV_TASK_READY;
   17100:	697b      	ldr	r3, [r7, #20]
   17102:	2202      	movs	r2, #2
   17104:	701a      	strb	r2, [r3, #0]
			tr->dts = dts3;
   17106:	697b      	ldr	r3, [r7, #20]
   17108:	221a      	movs	r2, #26
   1710a:	18ba      	adds	r2, r7, r2
   1710c:	8812      	ldrh	r2, [r2, #0]
   1710e:	805a      	strh	r2, [r3, #2]
			tr->objHandle = hnd8;
   17110:	697b      	ldr	r3, [r7, #20]
   17112:	2219      	movs	r2, #25
   17114:	18ba      	adds	r2, r7, r2
   17116:	7812      	ldrb	r2, [r2, #0]
   17118:	705a      	strb	r2, [r3, #1]
			prvTraceUpdateCounters();
   1711a:	4b12      	ldr	r3, [pc, #72]	; (17164 <prvTraceStoreTaskReady+0xf4>)
   1711c:	4798      	blx	r3
		}
	}
	trcCRITICAL_SECTION_END();
   1711e:	4b0b      	ldr	r3, [pc, #44]	; (1714c <prvTraceStoreTaskReady+0xdc>)
   17120:	681b      	ldr	r3, [r3, #0]
   17122:	1e5a      	subs	r2, r3, #1
   17124:	4b09      	ldr	r3, [pc, #36]	; (1714c <prvTraceStoreTaskReady+0xdc>)
   17126:	601a      	str	r2, [r3, #0]
   17128:	69fb      	ldr	r3, [r7, #28]
   1712a:	60bb      	str	r3, [r7, #8]
   1712c:	68bb      	ldr	r3, [r7, #8]
   1712e:	f383 8810 	msr	PRIMASK, r3
   17132:	e002      	b.n	1713a <prvTraceStoreTaskReady+0xca>
		return;
   17134:	46c0      	nop			; (mov r8, r8)
   17136:	e000      	b.n	1713a <prvTraceStoreTaskReady+0xca>
		return;
   17138:	46c0      	nop			; (mov r8, r8)
}
   1713a:	46bd      	mov	sp, r7
   1713c:	b009      	add	sp, #36	; 0x24
   1713e:	bd90      	pop	{r4, r7, pc}
   17140:	2000011c 	.word	0x2000011c
   17144:	000359e8 	.word	0x000359e8
   17148:	0001815d 	.word	0x0001815d
   1714c:	20000bd0 	.word	0x20000bd0
   17150:	00035a28 	.word	0x00035a28
   17154:	20000c78 	.word	0x20000c78
   17158:	0000ffff 	.word	0x0000ffff
   1715c:	00018371 	.word	0x00018371
   17160:	00017d15 	.word	0x00017d15
   17164:	00018319 	.word	0x00018319

00017168 <vTraceStoreMemMangEvent>:
 * Note: On "free" calls, the signed_size parameter should be negative.
 ******************************************************************************/
#if (TRC_CFG_INCLUDE_MEMMANG_EVENTS == 1)
#if (TRC_CFG_SCHEDULING_ONLY == 0)
void vTraceStoreMemMangEvent(uint32_t ecode, uint32_t address, int32_t signed_size)
{
   17168:	b580      	push	{r7, lr}
   1716a:	b08e      	sub	sp, #56	; 0x38
   1716c:	af00      	add	r7, sp, #0
   1716e:	60f8      	str	r0, [r7, #12]
   17170:	60b9      	str	r1, [r7, #8]
   17172:	607a      	str	r2, [r7, #4]
	uint16_t addr_low;
	uint8_t addr_high;
	uint32_t size;
	TRACE_ALLOC_CRITICAL_SECTION();

	if (RecorderDataPtr == NULL)
   17174:	4b48      	ldr	r3, [pc, #288]	; (17298 <vTraceStoreMemMangEvent+0x130>)
   17176:	681b      	ldr	r3, [r3, #0]
   17178:	2b00      	cmp	r3, #0
   1717a:	d100      	bne.n	1717e <vTraceStoreMemMangEvent+0x16>
   1717c:	e088      	b.n	17290 <vTraceStoreMemMangEvent+0x128>
	{
		/* Occurs in vTraceInitTraceData, if using dynamic allocation. */
		return;
	}
	
	if (signed_size < 0)
   1717e:	687b      	ldr	r3, [r7, #4]
   17180:	2b00      	cmp	r3, #0
   17182:	da03      	bge.n	1718c <vTraceStoreMemMangEvent+0x24>
		size = (uint32_t)(- signed_size);
   17184:	687b      	ldr	r3, [r7, #4]
   17186:	425b      	negs	r3, r3
   17188:	637b      	str	r3, [r7, #52]	; 0x34
   1718a:	e001      	b.n	17190 <vTraceStoreMemMangEvent+0x28>
	else
		size = (uint32_t)(signed_size);
   1718c:	687b      	ldr	r3, [r7, #4]
   1718e:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   17190:	f3ef 8310 	mrs	r3, PRIMASK
   17194:	61bb      	str	r3, [r7, #24]
  return(result);
   17196:	69bb      	ldr	r3, [r7, #24]

	trcCRITICAL_SECTION_BEGIN();
   17198:	633b      	str	r3, [r7, #48]	; 0x30
   1719a:	2301      	movs	r3, #1
   1719c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
   1719e:	69fb      	ldr	r3, [r7, #28]
   171a0:	f383 8810 	msr	PRIMASK, r3
   171a4:	4b3d      	ldr	r3, [pc, #244]	; (1729c <vTraceStoreMemMangEvent+0x134>)
   171a6:	681b      	ldr	r3, [r3, #0]
   171a8:	1c5a      	adds	r2, r3, #1
   171aa:	4b3c      	ldr	r3, [pc, #240]	; (1729c <vTraceStoreMemMangEvent+0x134>)
   171ac:	601a      	str	r2, [r3, #0]
	
	/* Only update heapMemUsage if we have a valid address */
	if (address != 0)
   171ae:	68bb      	ldr	r3, [r7, #8]
   171b0:	2b00      	cmp	r3, #0
   171b2:	d005      	beq.n	171c0 <vTraceStoreMemMangEvent+0x58>
		heapMemUsage += (uint32_t)signed_size;
   171b4:	4b3a      	ldr	r3, [pc, #232]	; (172a0 <vTraceStoreMemMangEvent+0x138>)
   171b6:	681a      	ldr	r2, [r3, #0]
   171b8:	687b      	ldr	r3, [r7, #4]
   171ba:	18d2      	adds	r2, r2, r3
   171bc:	4b38      	ldr	r3, [pc, #224]	; (172a0 <vTraceStoreMemMangEvent+0x138>)
   171be:	601a      	str	r2, [r3, #0]
	
	if (RecorderDataPtr->recorderActive)
   171c0:	4b35      	ldr	r3, [pc, #212]	; (17298 <vTraceStoreMemMangEvent+0x130>)
   171c2:	681b      	ldr	r3, [r3, #0]
   171c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   171c6:	2b00      	cmp	r3, #0
   171c8:	d057      	beq.n	1727a <vTraceStoreMemMangEvent+0x112>
	{
		dts1 = (uint8_t)prvTraceGetDTS(0xFF);
   171ca:	20ff      	movs	r0, #255	; 0xff
   171cc:	4b35      	ldr	r3, [pc, #212]	; (172a4 <vTraceStoreMemMangEvent+0x13c>)
   171ce:	4798      	blx	r3
   171d0:	0003      	movs	r3, r0
   171d2:	001a      	movs	r2, r3
   171d4:	232f      	movs	r3, #47	; 0x2f
   171d6:	18fb      	adds	r3, r7, r3
   171d8:	701a      	strb	r2, [r3, #0]
		size_low = (uint16_t)prvTraceGetParam(0xFFFF, size);
   171da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   171dc:	4a32      	ldr	r2, [pc, #200]	; (172a8 <vTraceStoreMemMangEvent+0x140>)
   171de:	0019      	movs	r1, r3
   171e0:	0010      	movs	r0, r2
   171e2:	4b32      	ldr	r3, [pc, #200]	; (172ac <vTraceStoreMemMangEvent+0x144>)
   171e4:	4798      	blx	r3
   171e6:	0002      	movs	r2, r0
   171e8:	232c      	movs	r3, #44	; 0x2c
   171ea:	18fb      	adds	r3, r7, r3
   171ec:	801a      	strh	r2, [r3, #0]
		ms = (MemEventSize *)prvTraceNextFreeEventBufferSlot();
   171ee:	4b30      	ldr	r3, [pc, #192]	; (172b0 <vTraceStoreMemMangEvent+0x148>)
   171f0:	4798      	blx	r3
   171f2:	0003      	movs	r3, r0
   171f4:	62bb      	str	r3, [r7, #40]	; 0x28

		if (ms != NULL)
   171f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
   171f8:	2b00      	cmp	r3, #0
   171fa:	d03e      	beq.n	1727a <vTraceStoreMemMangEvent+0x112>
		{
			ms->dts = dts1;
   171fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
   171fe:	222f      	movs	r2, #47	; 0x2f
   17200:	18ba      	adds	r2, r7, r2
   17202:	7812      	ldrb	r2, [r2, #0]
   17204:	705a      	strb	r2, [r3, #1]
			ms->type = NULL_EVENT; /* Updated when all events are written */
   17206:	6abb      	ldr	r3, [r7, #40]	; 0x28
   17208:	2200      	movs	r2, #0
   1720a:	701a      	strb	r2, [r3, #0]
			ms->size = size_low;
   1720c:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1720e:	222c      	movs	r2, #44	; 0x2c
   17210:	18ba      	adds	r2, r7, r2
   17212:	8812      	ldrh	r2, [r2, #0]
   17214:	805a      	strh	r2, [r3, #2]
			prvTraceUpdateCounters();
   17216:	4b27      	ldr	r3, [pc, #156]	; (172b4 <vTraceStoreMemMangEvent+0x14c>)
   17218:	4798      	blx	r3
				addr_low = address & 0xFFFF;          
				addr_high = (address >> 16) & 0xFF;
			#else
				/* The whole 32 bit address is stored using a second event record
				for the upper 16 bit */
				addr_low = (uint16_t)prvTraceGetParam(0xFFFF, address);
   1721a:	68bb      	ldr	r3, [r7, #8]
   1721c:	4a22      	ldr	r2, [pc, #136]	; (172a8 <vTraceStoreMemMangEvent+0x140>)
   1721e:	0019      	movs	r1, r3
   17220:	0010      	movs	r0, r2
   17222:	4b22      	ldr	r3, [pc, #136]	; (172ac <vTraceStoreMemMangEvent+0x144>)
   17224:	4798      	blx	r3
   17226:	0002      	movs	r2, r0
   17228:	2326      	movs	r3, #38	; 0x26
   1722a:	18fb      	adds	r3, r7, r3
   1722c:	801a      	strh	r2, [r3, #0]
				addr_high = 0;
   1722e:	2325      	movs	r3, #37	; 0x25
   17230:	18fb      	adds	r3, r7, r3
   17232:	2200      	movs	r2, #0
   17234:	701a      	strb	r2, [r3, #0]
			#endif

			ma = (MemEventAddr *) prvTraceNextFreeEventBufferSlot();
   17236:	4b1e      	ldr	r3, [pc, #120]	; (172b0 <vTraceStoreMemMangEvent+0x148>)
   17238:	4798      	blx	r3
   1723a:	0003      	movs	r3, r0
   1723c:	623b      	str	r3, [r7, #32]
			if (ma != NULL)
   1723e:	6a3b      	ldr	r3, [r7, #32]
   17240:	2b00      	cmp	r3, #0
   17242:	d01a      	beq.n	1727a <vTraceStoreMemMangEvent+0x112>
			{
				ma->addr_low = addr_low;
   17244:	6a3b      	ldr	r3, [r7, #32]
   17246:	2226      	movs	r2, #38	; 0x26
   17248:	18ba      	adds	r2, r7, r2
   1724a:	8812      	ldrh	r2, [r2, #0]
   1724c:	805a      	strh	r2, [r3, #2]
				ma->addr_high = addr_high;
   1724e:	6a3b      	ldr	r3, [r7, #32]
   17250:	2225      	movs	r2, #37	; 0x25
   17252:	18ba      	adds	r2, r7, r2
   17254:	7812      	ldrb	r2, [r2, #0]
   17256:	705a      	strb	r2, [r3, #1]
				ma->type = (uint8_t) (ecode  + 1); /* Note this! */
   17258:	68fb      	ldr	r3, [r7, #12]
   1725a:	b2db      	uxtb	r3, r3
   1725c:	3301      	adds	r3, #1
   1725e:	b2da      	uxtb	r2, r3
   17260:	6a3b      	ldr	r3, [r7, #32]
   17262:	701a      	strb	r2, [r3, #0]
				ms->type = (uint8_t) ecode;
   17264:	68fb      	ldr	r3, [r7, #12]
   17266:	b2da      	uxtb	r2, r3
   17268:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1726a:	701a      	strb	r2, [r3, #0]
				prvTraceUpdateCounters();					
   1726c:	4b11      	ldr	r3, [pc, #68]	; (172b4 <vTraceStoreMemMangEvent+0x14c>)
   1726e:	4798      	blx	r3
				RecorderDataPtr->heapMemUsage = heapMemUsage;
   17270:	4b09      	ldr	r3, [pc, #36]	; (17298 <vTraceStoreMemMangEvent+0x130>)
   17272:	681b      	ldr	r3, [r3, #0]
   17274:	4a0a      	ldr	r2, [pc, #40]	; (172a0 <vTraceStoreMemMangEvent+0x138>)
   17276:	6812      	ldr	r2, [r2, #0]
   17278:	651a      	str	r2, [r3, #80]	; 0x50
			}
		}
	}
	trcCRITICAL_SECTION_END();
   1727a:	4b08      	ldr	r3, [pc, #32]	; (1729c <vTraceStoreMemMangEvent+0x134>)
   1727c:	681b      	ldr	r3, [r3, #0]
   1727e:	1e5a      	subs	r2, r3, #1
   17280:	4b06      	ldr	r3, [pc, #24]	; (1729c <vTraceStoreMemMangEvent+0x134>)
   17282:	601a      	str	r2, [r3, #0]
   17284:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   17286:	617b      	str	r3, [r7, #20]
   17288:	697b      	ldr	r3, [r7, #20]
   1728a:	f383 8810 	msr	PRIMASK, r3
   1728e:	e000      	b.n	17292 <vTraceStoreMemMangEvent+0x12a>
		return;
   17290:	46c0      	nop			; (mov r8, r8)
}
   17292:	46bd      	mov	sp, r7
   17294:	b00e      	add	sp, #56	; 0x38
   17296:	bd80      	pop	{r7, pc}
   17298:	20000c78 	.word	0x20000c78
   1729c:	20000bd0 	.word	0x20000bd0
   172a0:	20000be4 	.word	0x20000be4
   172a4:	00018371 	.word	0x00018371
   172a8:	0000ffff 	.word	0x0000ffff
   172ac:	00017535 	.word	0x00017535
   172b0:	00017d15 	.word	0x00017d15
   172b4:	00018319 	.word	0x00018319

000172b8 <prvTraceStoreKernelCall>:
 * This is the main integration point for storing kernel calls, and
 * is called by the hooks in trcKernelHooks.h (see trcKernelPort.h for event codes).
 ******************************************************************************/
#if (TRC_CFG_SCHEDULING_ONLY == 0)
void prvTraceStoreKernelCall(uint32_t ecode, traceObjectClass objectClass, uint32_t objectNumber)
{
   172b8:	b590      	push	{r4, r7, lr}
   172ba:	b08b      	sub	sp, #44	; 0x2c
   172bc:	af00      	add	r7, sp, #0
   172be:	60f8      	str	r0, [r7, #12]
   172c0:	607a      	str	r2, [r7, #4]
   172c2:	230b      	movs	r3, #11
   172c4:	18fb      	adds	r3, r7, r3
   172c6:	1c0a      	adds	r2, r1, #0
   172c8:	701a      	strb	r2, [r3, #0]
	KernelCall * kse;
	uint16_t dts1;
	uint8_t hnd8;
	TRACE_ALLOC_CRITICAL_SECTION();

	TRACE_ASSERT(ecode < 0xFF, "prvTraceStoreKernelCall: ecode >= 0xFF", TRC_UNUSED);
   172ca:	68fb      	ldr	r3, [r7, #12]
   172cc:	2bfe      	cmp	r3, #254	; 0xfe
   172ce:	d904      	bls.n	172da <prvTraceStoreKernelCall+0x22>
   172d0:	4b39      	ldr	r3, [pc, #228]	; (173b8 <prvTraceStoreKernelCall+0x100>)
   172d2:	0018      	movs	r0, r3
   172d4:	4b39      	ldr	r3, [pc, #228]	; (173bc <prvTraceStoreKernelCall+0x104>)
   172d6:	4798      	blx	r3
   172d8:	e06b      	b.n	173b2 <prvTraceStoreKernelCall+0xfa>
	TRACE_ASSERT(objectClass < TRACE_NCLASSES, "prvTraceStoreKernelCall: objectClass >= TRACE_NCLASSES", TRC_UNUSED);
   172da:	230b      	movs	r3, #11
   172dc:	18fb      	adds	r3, r7, r3
   172de:	781b      	ldrb	r3, [r3, #0]
   172e0:	2b08      	cmp	r3, #8
   172e2:	d904      	bls.n	172ee <prvTraceStoreKernelCall+0x36>
   172e4:	4b36      	ldr	r3, [pc, #216]	; (173c0 <prvTraceStoreKernelCall+0x108>)
   172e6:	0018      	movs	r0, r3
   172e8:	4b34      	ldr	r3, [pc, #208]	; (173bc <prvTraceStoreKernelCall+0x104>)
   172ea:	4798      	blx	r3
   172ec:	e061      	b.n	173b2 <prvTraceStoreKernelCall+0xfa>
	TRACE_ASSERT(objectNumber <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[objectClass], "prvTraceStoreKernelCall: Invalid value for objectNumber", TRC_UNUSED);
   172ee:	4b35      	ldr	r3, [pc, #212]	; (173c4 <prvTraceStoreKernelCall+0x10c>)
   172f0:	681a      	ldr	r2, [r3, #0]
   172f2:	230b      	movs	r3, #11
   172f4:	18fb      	adds	r3, r7, r3
   172f6:	781b      	ldrb	r3, [r3, #0]
   172f8:	2164      	movs	r1, #100	; 0x64
   172fa:	18d3      	adds	r3, r2, r3
   172fc:	185b      	adds	r3, r3, r1
   172fe:	781b      	ldrb	r3, [r3, #0]
   17300:	001a      	movs	r2, r3
   17302:	687b      	ldr	r3, [r7, #4]
   17304:	429a      	cmp	r2, r3
   17306:	d204      	bcs.n	17312 <prvTraceStoreKernelCall+0x5a>
   17308:	4b2f      	ldr	r3, [pc, #188]	; (173c8 <prvTraceStoreKernelCall+0x110>)
   1730a:	0018      	movs	r0, r3
   1730c:	4b2b      	ldr	r3, [pc, #172]	; (173bc <prvTraceStoreKernelCall+0x104>)
   1730e:	4798      	blx	r3
   17310:	e04f      	b.n	173b2 <prvTraceStoreKernelCall+0xfa>

	if (recorder_busy)
   17312:	4b2e      	ldr	r3, [pc, #184]	; (173cc <prvTraceStoreKernelCall+0x114>)
   17314:	681b      	ldr	r3, [r3, #0]
   17316:	2b00      	cmp	r3, #0
   17318:	d004      	beq.n	17324 <prvTraceStoreKernelCall+0x6c>
		* TRACE_EXIT_CRITICAL_SECTION). They must disable the RTOS tick interrupt
		* and any other ISRs that calls the trace recorder directly or via
		* traced kernel functions. The ARM port disables all interrupts using the
		* PRIMASK register to avoid this issue.
		*************************************************************************/
		prvTraceError("Recorder busy - high priority ISR using syscall? (2)");
   1731a:	4b2d      	ldr	r3, [pc, #180]	; (173d0 <prvTraceStoreKernelCall+0x118>)
   1731c:	0018      	movs	r0, r3
   1731e:	4b27      	ldr	r3, [pc, #156]	; (173bc <prvTraceStoreKernelCall+0x104>)
   17320:	4798      	blx	r3
		return;
   17322:	e046      	b.n	173b2 <prvTraceStoreKernelCall+0xfa>
	}

	if (handle_of_last_logged_task == 0)
   17324:	4b2b      	ldr	r3, [pc, #172]	; (173d4 <prvTraceStoreKernelCall+0x11c>)
   17326:	781b      	ldrb	r3, [r3, #0]
   17328:	2b00      	cmp	r3, #0
   1732a:	d041      	beq.n	173b0 <prvTraceStoreKernelCall+0xf8>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   1732c:	f3ef 8310 	mrs	r3, PRIMASK
   17330:	617b      	str	r3, [r7, #20]
  return(result);
   17332:	697b      	ldr	r3, [r7, #20]
	{
		return;
	}

	trcCRITICAL_SECTION_BEGIN();
   17334:	627b      	str	r3, [r7, #36]	; 0x24
   17336:	2301      	movs	r3, #1
   17338:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
   1733a:	69bb      	ldr	r3, [r7, #24]
   1733c:	f383 8810 	msr	PRIMASK, r3
   17340:	4b22      	ldr	r3, [pc, #136]	; (173cc <prvTraceStoreKernelCall+0x114>)
   17342:	681b      	ldr	r3, [r3, #0]
   17344:	1c5a      	adds	r2, r3, #1
   17346:	4b21      	ldr	r3, [pc, #132]	; (173cc <prvTraceStoreKernelCall+0x114>)
   17348:	601a      	str	r2, [r3, #0]
	if (RecorderDataPtr->recorderActive)
   1734a:	4b1e      	ldr	r3, [pc, #120]	; (173c4 <prvTraceStoreKernelCall+0x10c>)
   1734c:	681b      	ldr	r3, [r3, #0]
   1734e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   17350:	2b00      	cmp	r3, #0
   17352:	d022      	beq.n	1739a <prvTraceStoreKernelCall+0xe2>
	{
		dts1 = (uint16_t)prvTraceGetDTS(0xFFFF);
   17354:	2322      	movs	r3, #34	; 0x22
   17356:	18fc      	adds	r4, r7, r3
   17358:	4b1f      	ldr	r3, [pc, #124]	; (173d8 <prvTraceStoreKernelCall+0x120>)
   1735a:	0018      	movs	r0, r3
   1735c:	4b1f      	ldr	r3, [pc, #124]	; (173dc <prvTraceStoreKernelCall+0x124>)
   1735e:	4798      	blx	r3
   17360:	0003      	movs	r3, r0
   17362:	8023      	strh	r3, [r4, #0]
		hnd8 = prvTraceGet8BitHandle((traceHandle)objectNumber);
   17364:	2321      	movs	r3, #33	; 0x21
   17366:	18fb      	adds	r3, r7, r3
   17368:	687a      	ldr	r2, [r7, #4]
   1736a:	701a      	strb	r2, [r3, #0]
		kse = (KernelCall*) prvTraceNextFreeEventBufferSlot();
   1736c:	4b1c      	ldr	r3, [pc, #112]	; (173e0 <prvTraceStoreKernelCall+0x128>)
   1736e:	4798      	blx	r3
   17370:	0003      	movs	r3, r0
   17372:	61fb      	str	r3, [r7, #28]
		if (kse != NULL)
   17374:	69fb      	ldr	r3, [r7, #28]
   17376:	2b00      	cmp	r3, #0
   17378:	d00f      	beq.n	1739a <prvTraceStoreKernelCall+0xe2>
		{
			kse->dts = dts1;
   1737a:	69fb      	ldr	r3, [r7, #28]
   1737c:	2222      	movs	r2, #34	; 0x22
   1737e:	18ba      	adds	r2, r7, r2
   17380:	8812      	ldrh	r2, [r2, #0]
   17382:	805a      	strh	r2, [r3, #2]
			kse->type = (uint8_t)ecode;
   17384:	68fb      	ldr	r3, [r7, #12]
   17386:	b2da      	uxtb	r2, r3
   17388:	69fb      	ldr	r3, [r7, #28]
   1738a:	701a      	strb	r2, [r3, #0]
			kse->objHandle = hnd8;
   1738c:	69fb      	ldr	r3, [r7, #28]
   1738e:	2221      	movs	r2, #33	; 0x21
   17390:	18ba      	adds	r2, r7, r2
   17392:	7812      	ldrb	r2, [r2, #0]
   17394:	705a      	strb	r2, [r3, #1]
			prvTraceUpdateCounters();
   17396:	4b13      	ldr	r3, [pc, #76]	; (173e4 <prvTraceStoreKernelCall+0x12c>)
   17398:	4798      	blx	r3
		}
	}
	trcCRITICAL_SECTION_END();
   1739a:	4b0c      	ldr	r3, [pc, #48]	; (173cc <prvTraceStoreKernelCall+0x114>)
   1739c:	681b      	ldr	r3, [r3, #0]
   1739e:	1e5a      	subs	r2, r3, #1
   173a0:	4b0a      	ldr	r3, [pc, #40]	; (173cc <prvTraceStoreKernelCall+0x114>)
   173a2:	601a      	str	r2, [r3, #0]
   173a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   173a6:	613b      	str	r3, [r7, #16]
   173a8:	693b      	ldr	r3, [r7, #16]
   173aa:	f383 8810 	msr	PRIMASK, r3
   173ae:	e000      	b.n	173b2 <prvTraceStoreKernelCall+0xfa>
		return;
   173b0:	46c0      	nop			; (mov r8, r8)
}
   173b2:	46bd      	mov	sp, r7
   173b4:	b00b      	add	sp, #44	; 0x2c
   173b6:	bd90      	pop	{r4, r7, pc}
   173b8:	00035a98 	.word	0x00035a98
   173bc:	0001815d 	.word	0x0001815d
   173c0:	00035ad0 	.word	0x00035ad0
   173c4:	20000c78 	.word	0x20000c78
   173c8:	00035b18 	.word	0x00035b18
   173cc:	20000bd0 	.word	0x20000bd0
   173d0:	00035b60 	.word	0x00035b60
   173d4:	20000bdc 	.word	0x20000bdc
   173d8:	0000ffff 	.word	0x0000ffff
   173dc:	00018371 	.word	0x00018371
   173e0:	00017d15 	.word	0x00017d15
   173e4:	00018319 	.word	0x00018319

000173e8 <prvTraceStoreKernelCallWithParam>:
#if (TRC_CFG_SCHEDULING_ONLY == 0)
void prvTraceStoreKernelCallWithParam(uint32_t evtcode,
									traceObjectClass objectClass,
									uint32_t objectNumber,
									uint32_t param)
{
   173e8:	b580      	push	{r7, lr}
   173ea:	b08a      	sub	sp, #40	; 0x28
   173ec:	af00      	add	r7, sp, #0
   173ee:	60f8      	str	r0, [r7, #12]
   173f0:	607a      	str	r2, [r7, #4]
   173f2:	603b      	str	r3, [r7, #0]
   173f4:	230b      	movs	r3, #11
   173f6:	18fb      	adds	r3, r7, r3
   173f8:	1c0a      	adds	r2, r1, #0
   173fa:	701a      	strb	r2, [r3, #0]
	uint8_t dts2;
	uint8_t hnd8;
	uint8_t p8;
	TRACE_ALLOC_CRITICAL_SECTION();

	TRACE_ASSERT(evtcode < 0xFF, "prvTraceStoreKernelCallWithParam: evtcode >= 0xFF", TRC_UNUSED);
   173fc:	68fb      	ldr	r3, [r7, #12]
   173fe:	2bfe      	cmp	r3, #254	; 0xfe
   17400:	d904      	bls.n	1740c <prvTraceStoreKernelCallWithParam+0x24>
   17402:	4b40      	ldr	r3, [pc, #256]	; (17504 <prvTraceStoreKernelCallWithParam+0x11c>)
   17404:	0018      	movs	r0, r3
   17406:	4b40      	ldr	r3, [pc, #256]	; (17508 <prvTraceStoreKernelCallWithParam+0x120>)
   17408:	4798      	blx	r3
   1740a:	e077      	b.n	174fc <prvTraceStoreKernelCallWithParam+0x114>
	TRACE_ASSERT(objectClass < TRACE_NCLASSES, "prvTraceStoreKernelCallWithParam: objectClass >= TRACE_NCLASSES", TRC_UNUSED);
   1740c:	230b      	movs	r3, #11
   1740e:	18fb      	adds	r3, r7, r3
   17410:	781b      	ldrb	r3, [r3, #0]
   17412:	2b08      	cmp	r3, #8
   17414:	d904      	bls.n	17420 <prvTraceStoreKernelCallWithParam+0x38>
   17416:	4b3d      	ldr	r3, [pc, #244]	; (1750c <prvTraceStoreKernelCallWithParam+0x124>)
   17418:	0018      	movs	r0, r3
   1741a:	4b3b      	ldr	r3, [pc, #236]	; (17508 <prvTraceStoreKernelCallWithParam+0x120>)
   1741c:	4798      	blx	r3
   1741e:	e06d      	b.n	174fc <prvTraceStoreKernelCallWithParam+0x114>
	TRACE_ASSERT(objectNumber <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[objectClass], "prvTraceStoreKernelCallWithParam: Invalid value for objectNumber", TRC_UNUSED);
   17420:	4b3b      	ldr	r3, [pc, #236]	; (17510 <prvTraceStoreKernelCallWithParam+0x128>)
   17422:	681a      	ldr	r2, [r3, #0]
   17424:	230b      	movs	r3, #11
   17426:	18fb      	adds	r3, r7, r3
   17428:	781b      	ldrb	r3, [r3, #0]
   1742a:	2164      	movs	r1, #100	; 0x64
   1742c:	18d3      	adds	r3, r2, r3
   1742e:	185b      	adds	r3, r3, r1
   17430:	781b      	ldrb	r3, [r3, #0]
   17432:	001a      	movs	r2, r3
   17434:	687b      	ldr	r3, [r7, #4]
   17436:	429a      	cmp	r2, r3
   17438:	d204      	bcs.n	17444 <prvTraceStoreKernelCallWithParam+0x5c>
   1743a:	4b36      	ldr	r3, [pc, #216]	; (17514 <prvTraceStoreKernelCallWithParam+0x12c>)
   1743c:	0018      	movs	r0, r3
   1743e:	4b32      	ldr	r3, [pc, #200]	; (17508 <prvTraceStoreKernelCallWithParam+0x120>)
   17440:	4798      	blx	r3
   17442:	e05b      	b.n	174fc <prvTraceStoreKernelCallWithParam+0x114>

	if (recorder_busy)
   17444:	4b34      	ldr	r3, [pc, #208]	; (17518 <prvTraceStoreKernelCallWithParam+0x130>)
   17446:	681b      	ldr	r3, [r3, #0]
   17448:	2b00      	cmp	r3, #0
   1744a:	d004      	beq.n	17456 <prvTraceStoreKernelCallWithParam+0x6e>
		* TRACE_EXIT_CRITICAL_SECTION). They must disable the RTOS tick interrupt
		* and any other ISRs that calls the trace recorder directly or via
		* traced kernel functions. The ARM port disables all interrupts using the
		* PRIMASK register to avoid this issue.
		*************************************************************************/
		prvTraceError("Recorder busy - high priority ISR using syscall? (3)");
   1744c:	4b33      	ldr	r3, [pc, #204]	; (1751c <prvTraceStoreKernelCallWithParam+0x134>)
   1744e:	0018      	movs	r0, r3
   17450:	4b2d      	ldr	r3, [pc, #180]	; (17508 <prvTraceStoreKernelCallWithParam+0x120>)
   17452:	4798      	blx	r3
		return;
   17454:	e052      	b.n	174fc <prvTraceStoreKernelCallWithParam+0x114>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   17456:	f3ef 8310 	mrs	r3, PRIMASK
   1745a:	617b      	str	r3, [r7, #20]
  return(result);
   1745c:	697b      	ldr	r3, [r7, #20]
	}

	trcCRITICAL_SECTION_BEGIN();
   1745e:	627b      	str	r3, [r7, #36]	; 0x24
   17460:	2301      	movs	r3, #1
   17462:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
   17464:	69bb      	ldr	r3, [r7, #24]
   17466:	f383 8810 	msr	PRIMASK, r3
   1746a:	4b2b      	ldr	r3, [pc, #172]	; (17518 <prvTraceStoreKernelCallWithParam+0x130>)
   1746c:	681b      	ldr	r3, [r3, #0]
   1746e:	1c5a      	adds	r2, r3, #1
   17470:	4b29      	ldr	r3, [pc, #164]	; (17518 <prvTraceStoreKernelCallWithParam+0x130>)
   17472:	601a      	str	r2, [r3, #0]
	if (RecorderDataPtr->recorderActive && handle_of_last_logged_task)
   17474:	4b26      	ldr	r3, [pc, #152]	; (17510 <prvTraceStoreKernelCallWithParam+0x128>)
   17476:	681b      	ldr	r3, [r3, #0]
   17478:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   1747a:	2b00      	cmp	r3, #0
   1747c:	d034      	beq.n	174e8 <prvTraceStoreKernelCallWithParam+0x100>
   1747e:	4b28      	ldr	r3, [pc, #160]	; (17520 <prvTraceStoreKernelCallWithParam+0x138>)
   17480:	781b      	ldrb	r3, [r3, #0]
   17482:	2b00      	cmp	r3, #0
   17484:	d030      	beq.n	174e8 <prvTraceStoreKernelCallWithParam+0x100>
	{
		dts2 = (uint8_t)prvTraceGetDTS(0xFF);
   17486:	20ff      	movs	r0, #255	; 0xff
   17488:	4b26      	ldr	r3, [pc, #152]	; (17524 <prvTraceStoreKernelCallWithParam+0x13c>)
   1748a:	4798      	blx	r3
   1748c:	0003      	movs	r3, r0
   1748e:	001a      	movs	r2, r3
   17490:	2323      	movs	r3, #35	; 0x23
   17492:	18fb      	adds	r3, r7, r3
   17494:	701a      	strb	r2, [r3, #0]
		p8 = (uint8_t) prvTraceGetParam(0xFF, param);
   17496:	683b      	ldr	r3, [r7, #0]
   17498:	0019      	movs	r1, r3
   1749a:	20ff      	movs	r0, #255	; 0xff
   1749c:	4b22      	ldr	r3, [pc, #136]	; (17528 <prvTraceStoreKernelCallWithParam+0x140>)
   1749e:	4798      	blx	r3
   174a0:	0002      	movs	r2, r0
   174a2:	2322      	movs	r3, #34	; 0x22
   174a4:	18fb      	adds	r3, r7, r3
   174a6:	701a      	strb	r2, [r3, #0]
		hnd8 = prvTraceGet8BitHandle((traceHandle)objectNumber);
   174a8:	2321      	movs	r3, #33	; 0x21
   174aa:	18fb      	adds	r3, r7, r3
   174ac:	687a      	ldr	r2, [r7, #4]
   174ae:	701a      	strb	r2, [r3, #0]
		kse = (KernelCallWithParamAndHandle*) prvTraceNextFreeEventBufferSlot();
   174b0:	4b1e      	ldr	r3, [pc, #120]	; (1752c <prvTraceStoreKernelCallWithParam+0x144>)
   174b2:	4798      	blx	r3
   174b4:	0003      	movs	r3, r0
   174b6:	61fb      	str	r3, [r7, #28]
		if (kse != NULL)
   174b8:	69fb      	ldr	r3, [r7, #28]
   174ba:	2b00      	cmp	r3, #0
   174bc:	d014      	beq.n	174e8 <prvTraceStoreKernelCallWithParam+0x100>
		{
			kse->dts = dts2;
   174be:	69fb      	ldr	r3, [r7, #28]
   174c0:	2223      	movs	r2, #35	; 0x23
   174c2:	18ba      	adds	r2, r7, r2
   174c4:	7812      	ldrb	r2, [r2, #0]
   174c6:	70da      	strb	r2, [r3, #3]
			kse->type = (uint8_t)evtcode;
   174c8:	68fb      	ldr	r3, [r7, #12]
   174ca:	b2da      	uxtb	r2, r3
   174cc:	69fb      	ldr	r3, [r7, #28]
   174ce:	701a      	strb	r2, [r3, #0]
			kse->objHandle = hnd8;
   174d0:	69fb      	ldr	r3, [r7, #28]
   174d2:	2221      	movs	r2, #33	; 0x21
   174d4:	18ba      	adds	r2, r7, r2
   174d6:	7812      	ldrb	r2, [r2, #0]
   174d8:	705a      	strb	r2, [r3, #1]
			kse->param = p8;
   174da:	69fb      	ldr	r3, [r7, #28]
   174dc:	2222      	movs	r2, #34	; 0x22
   174de:	18ba      	adds	r2, r7, r2
   174e0:	7812      	ldrb	r2, [r2, #0]
   174e2:	709a      	strb	r2, [r3, #2]
			prvTraceUpdateCounters();
   174e4:	4b12      	ldr	r3, [pc, #72]	; (17530 <prvTraceStoreKernelCallWithParam+0x148>)
   174e6:	4798      	blx	r3
		}
	}
	trcCRITICAL_SECTION_END();
   174e8:	4b0b      	ldr	r3, [pc, #44]	; (17518 <prvTraceStoreKernelCallWithParam+0x130>)
   174ea:	681b      	ldr	r3, [r3, #0]
   174ec:	1e5a      	subs	r2, r3, #1
   174ee:	4b0a      	ldr	r3, [pc, #40]	; (17518 <prvTraceStoreKernelCallWithParam+0x130>)
   174f0:	601a      	str	r2, [r3, #0]
   174f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   174f4:	613b      	str	r3, [r7, #16]
   174f6:	693b      	ldr	r3, [r7, #16]
   174f8:	f383 8810 	msr	PRIMASK, r3
}
   174fc:	46bd      	mov	sp, r7
   174fe:	b00a      	add	sp, #40	; 0x28
   17500:	bd80      	pop	{r7, pc}
   17502:	46c0      	nop			; (mov r8, r8)
   17504:	00035b98 	.word	0x00035b98
   17508:	0001815d 	.word	0x0001815d
   1750c:	00035bd8 	.word	0x00035bd8
   17510:	20000c78 	.word	0x20000c78
   17514:	00035c28 	.word	0x00035c28
   17518:	20000bd0 	.word	0x20000bd0
   1751c:	00035c78 	.word	0x00035c78
   17520:	20000bdc 	.word	0x20000bdc
   17524:	00018371 	.word	0x00018371
   17528:	00017535 	.word	0x00017535
   1752c:	00017d15 	.word	0x00017d15
   17530:	00018319 	.word	0x00018319

00017534 <prvTraceGetParam>:
 *
 * May only be called within a critical section!
 ******************************************************************************/
#if (TRC_CFG_SCHEDULING_ONLY == 0)
static uint32_t prvTraceGetParam(uint32_t param_max, uint32_t param)
{
   17534:	b580      	push	{r7, lr}
   17536:	b084      	sub	sp, #16
   17538:	af00      	add	r7, sp, #0
   1753a:	6078      	str	r0, [r7, #4]
   1753c:	6039      	str	r1, [r7, #0]
	XPSEvent* xps;

	TRACE_ASSERT(param_max == 0xFF || param_max == 0xFFFF,
   1753e:	687b      	ldr	r3, [r7, #4]
   17540:	2bff      	cmp	r3, #255	; 0xff
   17542:	d009      	beq.n	17558 <prvTraceGetParam+0x24>
   17544:	687b      	ldr	r3, [r7, #4]
   17546:	4a19      	ldr	r2, [pc, #100]	; (175ac <prvTraceGetParam+0x78>)
   17548:	4293      	cmp	r3, r2
   1754a:	d005      	beq.n	17558 <prvTraceGetParam+0x24>
   1754c:	4b18      	ldr	r3, [pc, #96]	; (175b0 <prvTraceGetParam+0x7c>)
   1754e:	0018      	movs	r0, r3
   17550:	4b18      	ldr	r3, [pc, #96]	; (175b4 <prvTraceGetParam+0x80>)
   17552:	4798      	blx	r3
   17554:	683b      	ldr	r3, [r7, #0]
   17556:	e024      	b.n	175a2 <prvTraceGetParam+0x6e>
		"prvTraceGetParam: Invalid value for param_max", param);

	if (param <= param_max)
   17558:	683a      	ldr	r2, [r7, #0]
   1755a:	687b      	ldr	r3, [r7, #4]
   1755c:	429a      	cmp	r2, r3
   1755e:	d801      	bhi.n	17564 <prvTraceGetParam+0x30>
	{
		return param;
   17560:	683b      	ldr	r3, [r7, #0]
   17562:	e01e      	b.n	175a2 <prvTraceGetParam+0x6e>
	}
	else
	{
		xps = (XPSEvent*) prvTraceNextFreeEventBufferSlot();
   17564:	4b14      	ldr	r3, [pc, #80]	; (175b8 <prvTraceGetParam+0x84>)
   17566:	4798      	blx	r3
   17568:	0003      	movs	r3, r0
   1756a:	60fb      	str	r3, [r7, #12]
		if (xps != NULL)
   1756c:	68fb      	ldr	r3, [r7, #12]
   1756e:	2b00      	cmp	r3, #0
   17570:	d014      	beq.n	1759c <prvTraceGetParam+0x68>
		{
			xps->type = DIV_XPS;
   17572:	68fb      	ldr	r3, [r7, #12]
   17574:	2201      	movs	r2, #1
   17576:	701a      	strb	r2, [r3, #0]
			xps->xps_8 = (uint8_t)((param & (0xFF00 & ~param_max)) >> 8);
   17578:	687b      	ldr	r3, [r7, #4]
   1757a:	43db      	mvns	r3, r3
   1757c:	683a      	ldr	r2, [r7, #0]
   1757e:	4013      	ands	r3, r2
   17580:	0a1b      	lsrs	r3, r3, #8
   17582:	b2da      	uxtb	r2, r3
   17584:	68fb      	ldr	r3, [r7, #12]
   17586:	705a      	strb	r2, [r3, #1]
			xps->xps_16 = (uint16_t)((param & (0xFFFF0000 & ~param_max)) >> 16);
   17588:	687b      	ldr	r3, [r7, #4]
   1758a:	43db      	mvns	r3, r3
   1758c:	683a      	ldr	r2, [r7, #0]
   1758e:	4013      	ands	r3, r2
   17590:	0c1b      	lsrs	r3, r3, #16
   17592:	b29a      	uxth	r2, r3
   17594:	68fb      	ldr	r3, [r7, #12]
   17596:	805a      	strh	r2, [r3, #2]
			prvTraceUpdateCounters();
   17598:	4b08      	ldr	r3, [pc, #32]	; (175bc <prvTraceGetParam+0x88>)
   1759a:	4798      	blx	r3
		}

		return param & param_max;
   1759c:	683b      	ldr	r3, [r7, #0]
   1759e:	687a      	ldr	r2, [r7, #4]
   175a0:	4013      	ands	r3, r2
	}
}
   175a2:	0018      	movs	r0, r3
   175a4:	46bd      	mov	sp, r7
   175a6:	b004      	add	sp, #16
   175a8:	bd80      	pop	{r7, pc}
   175aa:	46c0      	nop			; (mov r8, r8)
   175ac:	0000ffff 	.word	0x0000ffff
   175b0:	00035cb0 	.word	0x00035cb0
   175b4:	0001815d 	.word	0x0001815d
   175b8:	00017d15 	.word	0x00017d15
   175bc:	00018319 	.word	0x00018319

000175c0 <prvTraceStoreKernelCallWithNumericParamOnly>:
 * Used for storing kernel calls with numeric parameters only. This is
 * only used for traceTASK_DELAY and traceDELAY_UNTIL at the moment.
 ******************************************************************************/
#if (TRC_CFG_SCHEDULING_ONLY == 0)
void prvTraceStoreKernelCallWithNumericParamOnly(uint32_t evtcode, uint32_t param)
{
   175c0:	b580      	push	{r7, lr}
   175c2:	b08a      	sub	sp, #40	; 0x28
   175c4:	af00      	add	r7, sp, #0
   175c6:	6078      	str	r0, [r7, #4]
   175c8:	6039      	str	r1, [r7, #0]
	KernelCallWithParam16 * kse;
	uint8_t dts6;
	uint16_t restParam;
	TRACE_ALLOC_CRITICAL_SECTION();

	restParam = 0;
   175ca:	2326      	movs	r3, #38	; 0x26
   175cc:	18fb      	adds	r3, r7, r3
   175ce:	2200      	movs	r2, #0
   175d0:	801a      	strh	r2, [r3, #0]

	TRACE_ASSERT(evtcode < 0xFF, "prvTraceStoreKernelCallWithNumericParamOnly: Invalid value for evtcode", TRC_UNUSED);
   175d2:	687b      	ldr	r3, [r7, #4]
   175d4:	2bfe      	cmp	r3, #254	; 0xfe
   175d6:	d904      	bls.n	175e2 <prvTraceStoreKernelCallWithNumericParamOnly+0x22>
   175d8:	4b2d      	ldr	r3, [pc, #180]	; (17690 <prvTraceStoreKernelCallWithNumericParamOnly+0xd0>)
   175da:	0018      	movs	r0, r3
   175dc:	4b2d      	ldr	r3, [pc, #180]	; (17694 <prvTraceStoreKernelCallWithNumericParamOnly+0xd4>)
   175de:	4798      	blx	r3
   175e0:	e053      	b.n	1768a <prvTraceStoreKernelCallWithNumericParamOnly+0xca>

	if (recorder_busy)
   175e2:	4b2d      	ldr	r3, [pc, #180]	; (17698 <prvTraceStoreKernelCallWithNumericParamOnly+0xd8>)
   175e4:	681b      	ldr	r3, [r3, #0]
   175e6:	2b00      	cmp	r3, #0
   175e8:	d004      	beq.n	175f4 <prvTraceStoreKernelCallWithNumericParamOnly+0x34>
		* TRACE_EXIT_CRITICAL_SECTION). They must disable the RTOS tick interrupt
		* and any other ISRs that calls the trace recorder directly or via
		* traced kernel functions. The ARM port disables all interrupts using the
		* PRIMASK register to avoid this issue.
		*************************************************************************/
		prvTraceError("Recorder busy - high priority ISR using syscall? (4)");
   175ea:	4b2c      	ldr	r3, [pc, #176]	; (1769c <prvTraceStoreKernelCallWithNumericParamOnly+0xdc>)
   175ec:	0018      	movs	r0, r3
   175ee:	4b29      	ldr	r3, [pc, #164]	; (17694 <prvTraceStoreKernelCallWithNumericParamOnly+0xd4>)
   175f0:	4798      	blx	r3
		return;
   175f2:	e04a      	b.n	1768a <prvTraceStoreKernelCallWithNumericParamOnly+0xca>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   175f4:	f3ef 8310 	mrs	r3, PRIMASK
   175f8:	613b      	str	r3, [r7, #16]
  return(result);
   175fa:	693b      	ldr	r3, [r7, #16]
	}

	trcCRITICAL_SECTION_BEGIN();
   175fc:	623b      	str	r3, [r7, #32]
   175fe:	2301      	movs	r3, #1
   17600:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
   17602:	697b      	ldr	r3, [r7, #20]
   17604:	f383 8810 	msr	PRIMASK, r3
   17608:	4b23      	ldr	r3, [pc, #140]	; (17698 <prvTraceStoreKernelCallWithNumericParamOnly+0xd8>)
   1760a:	681b      	ldr	r3, [r3, #0]
   1760c:	1c5a      	adds	r2, r3, #1
   1760e:	4b22      	ldr	r3, [pc, #136]	; (17698 <prvTraceStoreKernelCallWithNumericParamOnly+0xd8>)
   17610:	601a      	str	r2, [r3, #0]
	if (RecorderDataPtr->recorderActive && handle_of_last_logged_task)
   17612:	4b23      	ldr	r3, [pc, #140]	; (176a0 <prvTraceStoreKernelCallWithNumericParamOnly+0xe0>)
   17614:	681b      	ldr	r3, [r3, #0]
   17616:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   17618:	2b00      	cmp	r3, #0
   1761a:	d02c      	beq.n	17676 <prvTraceStoreKernelCallWithNumericParamOnly+0xb6>
   1761c:	4b21      	ldr	r3, [pc, #132]	; (176a4 <prvTraceStoreKernelCallWithNumericParamOnly+0xe4>)
   1761e:	781b      	ldrb	r3, [r3, #0]
   17620:	2b00      	cmp	r3, #0
   17622:	d028      	beq.n	17676 <prvTraceStoreKernelCallWithNumericParamOnly+0xb6>
	{
		dts6 = (uint8_t)prvTraceGetDTS(0xFF);
   17624:	20ff      	movs	r0, #255	; 0xff
   17626:	4b20      	ldr	r3, [pc, #128]	; (176a8 <prvTraceStoreKernelCallWithNumericParamOnly+0xe8>)
   17628:	4798      	blx	r3
   1762a:	0003      	movs	r3, r0
   1762c:	001a      	movs	r2, r3
   1762e:	231f      	movs	r3, #31
   17630:	18fb      	adds	r3, r7, r3
   17632:	701a      	strb	r2, [r3, #0]
		restParam = (uint16_t)prvTraceGetParam(0xFFFF, param);
   17634:	683b      	ldr	r3, [r7, #0]
   17636:	4a1d      	ldr	r2, [pc, #116]	; (176ac <prvTraceStoreKernelCallWithNumericParamOnly+0xec>)
   17638:	0019      	movs	r1, r3
   1763a:	0010      	movs	r0, r2
   1763c:	4b1c      	ldr	r3, [pc, #112]	; (176b0 <prvTraceStoreKernelCallWithNumericParamOnly+0xf0>)
   1763e:	4798      	blx	r3
   17640:	0002      	movs	r2, r0
   17642:	2326      	movs	r3, #38	; 0x26
   17644:	18fb      	adds	r3, r7, r3
   17646:	801a      	strh	r2, [r3, #0]
		kse = (KernelCallWithParam16*) prvTraceNextFreeEventBufferSlot();
   17648:	4b1a      	ldr	r3, [pc, #104]	; (176b4 <prvTraceStoreKernelCallWithNumericParamOnly+0xf4>)
   1764a:	4798      	blx	r3
   1764c:	0003      	movs	r3, r0
   1764e:	61bb      	str	r3, [r7, #24]
		if (kse != NULL)
   17650:	69bb      	ldr	r3, [r7, #24]
   17652:	2b00      	cmp	r3, #0
   17654:	d00f      	beq.n	17676 <prvTraceStoreKernelCallWithNumericParamOnly+0xb6>
		{
			kse->dts = dts6;
   17656:	69bb      	ldr	r3, [r7, #24]
   17658:	221f      	movs	r2, #31
   1765a:	18ba      	adds	r2, r7, r2
   1765c:	7812      	ldrb	r2, [r2, #0]
   1765e:	705a      	strb	r2, [r3, #1]
			kse->type = (uint8_t)evtcode;
   17660:	687b      	ldr	r3, [r7, #4]
   17662:	b2da      	uxtb	r2, r3
   17664:	69bb      	ldr	r3, [r7, #24]
   17666:	701a      	strb	r2, [r3, #0]
			kse->param = restParam;
   17668:	69bb      	ldr	r3, [r7, #24]
   1766a:	2226      	movs	r2, #38	; 0x26
   1766c:	18ba      	adds	r2, r7, r2
   1766e:	8812      	ldrh	r2, [r2, #0]
   17670:	805a      	strh	r2, [r3, #2]
			prvTraceUpdateCounters();
   17672:	4b11      	ldr	r3, [pc, #68]	; (176b8 <prvTraceStoreKernelCallWithNumericParamOnly+0xf8>)
   17674:	4798      	blx	r3
		}
	}
	trcCRITICAL_SECTION_END();
   17676:	4b08      	ldr	r3, [pc, #32]	; (17698 <prvTraceStoreKernelCallWithNumericParamOnly+0xd8>)
   17678:	681b      	ldr	r3, [r3, #0]
   1767a:	1e5a      	subs	r2, r3, #1
   1767c:	4b06      	ldr	r3, [pc, #24]	; (17698 <prvTraceStoreKernelCallWithNumericParamOnly+0xd8>)
   1767e:	601a      	str	r2, [r3, #0]
   17680:	6a3b      	ldr	r3, [r7, #32]
   17682:	60fb      	str	r3, [r7, #12]
   17684:	68fb      	ldr	r3, [r7, #12]
   17686:	f383 8810 	msr	PRIMASK, r3
}
   1768a:	46bd      	mov	sp, r7
   1768c:	b00a      	add	sp, #40	; 0x28
   1768e:	bd80      	pop	{r7, pc}
   17690:	00035cec 	.word	0x00035cec
   17694:	0001815d 	.word	0x0001815d
   17698:	20000bd0 	.word	0x20000bd0
   1769c:	00035d44 	.word	0x00035d44
   176a0:	20000c78 	.word	0x20000c78
   176a4:	20000bdc 	.word	0x20000bdc
   176a8:	00018371 	.word	0x00018371
   176ac:	0000ffff 	.word	0x0000ffff
   176b0:	00017535 	.word	0x00017535
   176b4:	00017d15 	.word	0x00017d15
   176b8:	00018319 	.word	0x00018319

000176bc <prvTraceStoreTaskswitch>:
 * prvTraceStoreTaskswitch
 * Called by the scheduler from the SWITCHED_OUT hook, and by uiTraceStart.
 * At this point interrupts are assumed to be disabled!
 ******************************************************************************/
void prvTraceStoreTaskswitch(traceHandle task_handle)
{
   176bc:	b590      	push	{r4, r7, lr}
   176be:	b089      	sub	sp, #36	; 0x24
   176c0:	af00      	add	r7, sp, #0
   176c2:	0002      	movs	r2, r0
   176c4:	1dfb      	adds	r3, r7, #7
   176c6:	701a      	strb	r2, [r3, #0]
#if (TRC_CFG_INCLUDE_ISR_TRACING == 1)
	extern int32_t isPendingContextSwitch;
#endif
	trcSR_ALLOC_CRITICAL_SECTION_ON_CORTEX_M_ONLY();

	TRACE_ASSERT(task_handle <= (TRC_CFG_NTASK),
   176c8:	1dfb      	adds	r3, r7, #7
   176ca:	781b      	ldrb	r3, [r3, #0]
   176cc:	2b0f      	cmp	r3, #15
   176ce:	d904      	bls.n	176da <prvTraceStoreTaskswitch+0x1e>
   176d0:	4b34      	ldr	r3, [pc, #208]	; (177a4 <prvTraceStoreTaskswitch+0xe8>)
   176d2:	0018      	movs	r0, r3
   176d4:	4b34      	ldr	r3, [pc, #208]	; (177a8 <prvTraceStoreTaskswitch+0xec>)
   176d6:	4798      	blx	r3
   176d8:	e061      	b.n	1779e <prvTraceStoreTaskswitch+0xe2>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   176da:	f3ef 8310 	mrs	r3, PRIMASK
   176de:	60fb      	str	r3, [r7, #12]
  return(result);
   176e0:	68fb      	ldr	r3, [r7, #12]
		"prvTraceStoreTaskswitch: Invalid value for task_handle", TRC_UNUSED);

	trcCRITICAL_SECTION_BEGIN_ON_CORTEX_M_ONLY();
   176e2:	61fb      	str	r3, [r7, #28]
   176e4:	2301      	movs	r3, #1
   176e6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
   176e8:	693b      	ldr	r3, [r7, #16]
   176ea:	f383 8810 	msr	PRIMASK, r3
   176ee:	4b2f      	ldr	r3, [pc, #188]	; (177ac <prvTraceStoreTaskswitch+0xf0>)
   176f0:	681b      	ldr	r3, [r3, #0]
   176f2:	1c5a      	adds	r2, r3, #1
   176f4:	4b2d      	ldr	r3, [pc, #180]	; (177ac <prvTraceStoreTaskswitch+0xf0>)
   176f6:	601a      	str	r2, [r3, #0]

	if ((task_handle != handle_of_last_logged_task) && (RecorderDataPtr->recorderActive))
   176f8:	4b2d      	ldr	r3, [pc, #180]	; (177b0 <prvTraceStoreTaskswitch+0xf4>)
   176fa:	781b      	ldrb	r3, [r3, #0]
   176fc:	1dfa      	adds	r2, r7, #7
   176fe:	7812      	ldrb	r2, [r2, #0]
   17700:	429a      	cmp	r2, r3
   17702:	d042      	beq.n	1778a <prvTraceStoreTaskswitch+0xce>
   17704:	4b2b      	ldr	r3, [pc, #172]	; (177b4 <prvTraceStoreTaskswitch+0xf8>)
   17706:	681b      	ldr	r3, [r3, #0]
   17708:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   1770a:	2b00      	cmp	r3, #0
   1770c:	d03d      	beq.n	1778a <prvTraceStoreTaskswitch+0xce>
	{
#if (TRC_CFG_INCLUDE_ISR_TRACING == 1)
		isPendingContextSwitch = 0;
   1770e:	4b2a      	ldr	r3, [pc, #168]	; (177b8 <prvTraceStoreTaskswitch+0xfc>)
   17710:	2200      	movs	r2, #0
   17712:	601a      	str	r2, [r3, #0]
#endif

		dts3 = (uint16_t)prvTraceGetDTS(0xFFFF);
   17714:	231a      	movs	r3, #26
   17716:	18fc      	adds	r4, r7, r3
   17718:	4b28      	ldr	r3, [pc, #160]	; (177bc <prvTraceStoreTaskswitch+0x100>)
   1771a:	0018      	movs	r0, r3
   1771c:	4b28      	ldr	r3, [pc, #160]	; (177c0 <prvTraceStoreTaskswitch+0x104>)
   1771e:	4798      	blx	r3
   17720:	0003      	movs	r3, r0
   17722:	8023      	strh	r3, [r4, #0]
		handle_of_last_logged_task = task_handle;
   17724:	4b22      	ldr	r3, [pc, #136]	; (177b0 <prvTraceStoreTaskswitch+0xf4>)
   17726:	1dfa      	adds	r2, r7, #7
   17728:	7812      	ldrb	r2, [r2, #0]
   1772a:	701a      	strb	r2, [r3, #0]
		hnd8 = prvTraceGet8BitHandle(handle_of_last_logged_task);
   1772c:	2319      	movs	r3, #25
   1772e:	18fb      	adds	r3, r7, r3
   17730:	4a1f      	ldr	r2, [pc, #124]	; (177b0 <prvTraceStoreTaskswitch+0xf4>)
   17732:	7812      	ldrb	r2, [r2, #0]
   17734:	701a      	strb	r2, [r3, #0]
		ts = (TSEvent*)prvTraceNextFreeEventBufferSlot();
   17736:	4b23      	ldr	r3, [pc, #140]	; (177c4 <prvTraceStoreTaskswitch+0x108>)
   17738:	4798      	blx	r3
   1773a:	0003      	movs	r3, r0
   1773c:	617b      	str	r3, [r7, #20]

		if (ts != NULL)
   1773e:	697b      	ldr	r3, [r7, #20]
   17740:	2b00      	cmp	r3, #0
   17742:	d022      	beq.n	1778a <prvTraceStoreTaskswitch+0xce>
		{
			if (prvTraceGetObjectState(TRACE_CLASS_TASK,
   17744:	4b1a      	ldr	r3, [pc, #104]	; (177b0 <prvTraceStoreTaskswitch+0xf4>)
   17746:	781b      	ldrb	r3, [r3, #0]
   17748:	0019      	movs	r1, r3
   1774a:	2003      	movs	r0, #3
   1774c:	4b1e      	ldr	r3, [pc, #120]	; (177c8 <prvTraceStoreTaskswitch+0x10c>)
   1774e:	4798      	blx	r3
   17750:	0003      	movs	r3, r0
   17752:	2b01      	cmp	r3, #1
   17754:	d103      	bne.n	1775e <prvTraceStoreTaskswitch+0xa2>
				handle_of_last_logged_task) == TASK_STATE_INSTANCE_ACTIVE)
			{
				ts->type = TS_TASK_RESUME;
   17756:	697b      	ldr	r3, [r7, #20]
   17758:	2207      	movs	r2, #7
   1775a:	701a      	strb	r2, [r3, #0]
   1775c:	e002      	b.n	17764 <prvTraceStoreTaskswitch+0xa8>
			}
			else
			{
				ts->type = TS_TASK_BEGIN;
   1775e:	697b      	ldr	r3, [r7, #20]
   17760:	2206      	movs	r2, #6
   17762:	701a      	strb	r2, [r3, #0]
			}

			ts->dts = dts3;
   17764:	697b      	ldr	r3, [r7, #20]
   17766:	221a      	movs	r2, #26
   17768:	18ba      	adds	r2, r7, r2
   1776a:	8812      	ldrh	r2, [r2, #0]
   1776c:	805a      	strh	r2, [r3, #2]
			ts->objHandle = hnd8;
   1776e:	697b      	ldr	r3, [r7, #20]
   17770:	2219      	movs	r2, #25
   17772:	18ba      	adds	r2, r7, r2
   17774:	7812      	ldrb	r2, [r2, #0]
   17776:	705a      	strb	r2, [r3, #1]

			prvTraceSetObjectState(TRACE_CLASS_TASK,
   17778:	4b0d      	ldr	r3, [pc, #52]	; (177b0 <prvTraceStoreTaskswitch+0xf4>)
   1777a:	781b      	ldrb	r3, [r3, #0]
   1777c:	2201      	movs	r2, #1
   1777e:	0019      	movs	r1, r3
   17780:	2003      	movs	r0, #3
   17782:	4b12      	ldr	r3, [pc, #72]	; (177cc <prvTraceStoreTaskswitch+0x110>)
   17784:	4798      	blx	r3
									handle_of_last_logged_task,
									TASK_STATE_INSTANCE_ACTIVE);

			prvTraceUpdateCounters();
   17786:	4b12      	ldr	r3, [pc, #72]	; (177d0 <prvTraceStoreTaskswitch+0x114>)
   17788:	4798      	blx	r3
		}
	}

	trcCRITICAL_SECTION_END_ON_CORTEX_M_ONLY();
   1778a:	4b08      	ldr	r3, [pc, #32]	; (177ac <prvTraceStoreTaskswitch+0xf0>)
   1778c:	681b      	ldr	r3, [r3, #0]
   1778e:	1e5a      	subs	r2, r3, #1
   17790:	4b06      	ldr	r3, [pc, #24]	; (177ac <prvTraceStoreTaskswitch+0xf0>)
   17792:	601a      	str	r2, [r3, #0]
   17794:	69fb      	ldr	r3, [r7, #28]
   17796:	60bb      	str	r3, [r7, #8]
   17798:	68bb      	ldr	r3, [r7, #8]
   1779a:	f383 8810 	msr	PRIMASK, r3
}
   1779e:	46bd      	mov	sp, r7
   177a0:	b009      	add	sp, #36	; 0x24
   177a2:	bd90      	pop	{r4, r7, pc}
   177a4:	00035d7c 	.word	0x00035d7c
   177a8:	0001815d 	.word	0x0001815d
   177ac:	20000bd0 	.word	0x20000bd0
   177b0:	20000bdc 	.word	0x20000bdc
   177b4:	20000c78 	.word	0x20000c78
   177b8:	20000bbc 	.word	0x20000bbc
   177bc:	0000ffff 	.word	0x0000ffff
   177c0:	00018371 	.word	0x00018371
   177c4:	00017d15 	.word	0x00017d15
   177c8:	000179b9 	.word	0x000179b9
   177cc:	00017915 	.word	0x00017915
   177d0:	00018319 	.word	0x00018319

000177d4 <prvTraceSetPriorityProperty>:
		}
	}
}

void prvTraceSetPriorityProperty(uint8_t objectclass, traceHandle id, uint8_t value)
{
   177d4:	b590      	push	{r4, r7, lr}
   177d6:	b083      	sub	sp, #12
   177d8:	af00      	add	r7, sp, #0
   177da:	0004      	movs	r4, r0
   177dc:	0008      	movs	r0, r1
   177de:	0011      	movs	r1, r2
   177e0:	1dfb      	adds	r3, r7, #7
   177e2:	1c22      	adds	r2, r4, #0
   177e4:	701a      	strb	r2, [r3, #0]
   177e6:	1dbb      	adds	r3, r7, #6
   177e8:	1c02      	adds	r2, r0, #0
   177ea:	701a      	strb	r2, [r3, #0]
   177ec:	1d7b      	adds	r3, r7, #5
   177ee:	1c0a      	adds	r2, r1, #0
   177f0:	701a      	strb	r2, [r3, #0]
	TRACE_ASSERT(objectclass < TRACE_NCLASSES,
   177f2:	1dfb      	adds	r3, r7, #7
   177f4:	781b      	ldrb	r3, [r3, #0]
   177f6:	2b08      	cmp	r3, #8
   177f8:	d904      	bls.n	17804 <prvTraceSetPriorityProperty+0x30>
   177fa:	4b1a      	ldr	r3, [pc, #104]	; (17864 <prvTraceSetPriorityProperty+0x90>)
   177fc:	0018      	movs	r0, r3
   177fe:	4b1a      	ldr	r3, [pc, #104]	; (17868 <prvTraceSetPriorityProperty+0x94>)
   17800:	4798      	blx	r3
   17802:	e02c      	b.n	1785e <prvTraceSetPriorityProperty+0x8a>
		"prvTraceSetPriorityProperty: objectclass >= TRACE_NCLASSES", TRC_UNUSED);
	TRACE_ASSERT(id <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[objectclass],
   17804:	4b19      	ldr	r3, [pc, #100]	; (1786c <prvTraceSetPriorityProperty+0x98>)
   17806:	681a      	ldr	r2, [r3, #0]
   17808:	1dfb      	adds	r3, r7, #7
   1780a:	781b      	ldrb	r3, [r3, #0]
   1780c:	2164      	movs	r1, #100	; 0x64
   1780e:	18d3      	adds	r3, r2, r3
   17810:	185b      	adds	r3, r3, r1
   17812:	781b      	ldrb	r3, [r3, #0]
   17814:	1dba      	adds	r2, r7, #6
   17816:	7812      	ldrb	r2, [r2, #0]
   17818:	429a      	cmp	r2, r3
   1781a:	d904      	bls.n	17826 <prvTraceSetPriorityProperty+0x52>
   1781c:	4b14      	ldr	r3, [pc, #80]	; (17870 <prvTraceSetPriorityProperty+0x9c>)
   1781e:	0018      	movs	r0, r3
   17820:	4b11      	ldr	r3, [pc, #68]	; (17868 <prvTraceSetPriorityProperty+0x94>)
   17822:	4798      	blx	r3
   17824:	e01b      	b.n	1785e <prvTraceSetPriorityProperty+0x8a>
		"prvTraceSetPriorityProperty: Invalid value for id", TRC_UNUSED);

	TRACE_PROPERTY_ACTOR_PRIORITY(objectclass, id) = value;
   17826:	4b11      	ldr	r3, [pc, #68]	; (1786c <prvTraceSetPriorityProperty+0x98>)
   17828:	681c      	ldr	r4, [r3, #0]
   1782a:	1dfb      	adds	r3, r7, #7
   1782c:	781a      	ldrb	r2, [r3, #0]
   1782e:	1dbb      	adds	r3, r7, #6
   17830:	781b      	ldrb	r3, [r3, #0]
   17832:	0011      	movs	r1, r2
   17834:	0018      	movs	r0, r3
   17836:	4b0f      	ldr	r3, [pc, #60]	; (17874 <prvTraceSetPriorityProperty+0xa0>)
   17838:	4798      	blx	r3
   1783a:	0003      	movs	r3, r0
   1783c:	0018      	movs	r0, r3
   1783e:	4b0b      	ldr	r3, [pc, #44]	; (1786c <prvTraceSetPriorityProperty+0x98>)
   17840:	681a      	ldr	r2, [r3, #0]
   17842:	1dfb      	adds	r3, r7, #7
   17844:	781b      	ldrb	r3, [r3, #0]
   17846:	2170      	movs	r1, #112	; 0x70
   17848:	18d3      	adds	r3, r2, r3
   1784a:	185b      	adds	r3, r3, r1
   1784c:	781b      	ldrb	r3, [r3, #0]
   1784e:	18c3      	adds	r3, r0, r3
   17850:	3301      	adds	r3, #1
   17852:	229c      	movs	r2, #156	; 0x9c
   17854:	18e3      	adds	r3, r4, r3
   17856:	189b      	adds	r3, r3, r2
   17858:	1d7a      	adds	r2, r7, #5
   1785a:	7812      	ldrb	r2, [r2, #0]
   1785c:	701a      	strb	r2, [r3, #0]
}
   1785e:	46bd      	mov	sp, r7
   17860:	b003      	add	sp, #12
   17862:	bd90      	pop	{r4, r7, pc}
   17864:	00035f10 	.word	0x00035f10
   17868:	0001815d 	.word	0x0001815d
   1786c:	20000c78 	.word	0x20000c78
   17870:	00035f5c 	.word	0x00035f5c
   17874:	00017d69 	.word	0x00017d69

00017878 <prvTraceGetPriorityProperty>:

uint8_t prvTraceGetPriorityProperty(uint8_t objectclass, traceHandle id)
{
   17878:	b590      	push	{r4, r7, lr}
   1787a:	b083      	sub	sp, #12
   1787c:	af00      	add	r7, sp, #0
   1787e:	0002      	movs	r2, r0
   17880:	1dfb      	adds	r3, r7, #7
   17882:	701a      	strb	r2, [r3, #0]
   17884:	1dbb      	adds	r3, r7, #6
   17886:	1c0a      	adds	r2, r1, #0
   17888:	701a      	strb	r2, [r3, #0]
	TRACE_ASSERT(objectclass < TRACE_NCLASSES,
   1788a:	1dfb      	adds	r3, r7, #7
   1788c:	781b      	ldrb	r3, [r3, #0]
   1788e:	2b08      	cmp	r3, #8
   17890:	d905      	bls.n	1789e <prvTraceGetPriorityProperty+0x26>
   17892:	4b1b      	ldr	r3, [pc, #108]	; (17900 <prvTraceGetPriorityProperty+0x88>)
   17894:	0018      	movs	r0, r3
   17896:	4b1b      	ldr	r3, [pc, #108]	; (17904 <prvTraceGetPriorityProperty+0x8c>)
   17898:	4798      	blx	r3
   1789a:	2300      	movs	r3, #0
   1789c:	e02b      	b.n	178f6 <prvTraceGetPriorityProperty+0x7e>
		"prvTraceGetPriorityProperty: objectclass >= TRACE_NCLASSES", 0);
	TRACE_ASSERT(id <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[objectclass],
   1789e:	4b1a      	ldr	r3, [pc, #104]	; (17908 <prvTraceGetPriorityProperty+0x90>)
   178a0:	681a      	ldr	r2, [r3, #0]
   178a2:	1dfb      	adds	r3, r7, #7
   178a4:	781b      	ldrb	r3, [r3, #0]
   178a6:	2164      	movs	r1, #100	; 0x64
   178a8:	18d3      	adds	r3, r2, r3
   178aa:	185b      	adds	r3, r3, r1
   178ac:	781b      	ldrb	r3, [r3, #0]
   178ae:	1dba      	adds	r2, r7, #6
   178b0:	7812      	ldrb	r2, [r2, #0]
   178b2:	429a      	cmp	r2, r3
   178b4:	d905      	bls.n	178c2 <prvTraceGetPriorityProperty+0x4a>
   178b6:	4b15      	ldr	r3, [pc, #84]	; (1790c <prvTraceGetPriorityProperty+0x94>)
   178b8:	0018      	movs	r0, r3
   178ba:	4b12      	ldr	r3, [pc, #72]	; (17904 <prvTraceGetPriorityProperty+0x8c>)
   178bc:	4798      	blx	r3
   178be:	2300      	movs	r3, #0
   178c0:	e019      	b.n	178f6 <prvTraceGetPriorityProperty+0x7e>
		"prvTraceGetPriorityProperty: Invalid value for id", 0);

	return TRACE_PROPERTY_ACTOR_PRIORITY(objectclass, id);
   178c2:	4b11      	ldr	r3, [pc, #68]	; (17908 <prvTraceGetPriorityProperty+0x90>)
   178c4:	681c      	ldr	r4, [r3, #0]
   178c6:	1dfb      	adds	r3, r7, #7
   178c8:	781a      	ldrb	r2, [r3, #0]
   178ca:	1dbb      	adds	r3, r7, #6
   178cc:	781b      	ldrb	r3, [r3, #0]
   178ce:	0011      	movs	r1, r2
   178d0:	0018      	movs	r0, r3
   178d2:	4b0f      	ldr	r3, [pc, #60]	; (17910 <prvTraceGetPriorityProperty+0x98>)
   178d4:	4798      	blx	r3
   178d6:	0003      	movs	r3, r0
   178d8:	0018      	movs	r0, r3
   178da:	4b0b      	ldr	r3, [pc, #44]	; (17908 <prvTraceGetPriorityProperty+0x90>)
   178dc:	681a      	ldr	r2, [r3, #0]
   178de:	1dfb      	adds	r3, r7, #7
   178e0:	781b      	ldrb	r3, [r3, #0]
   178e2:	2170      	movs	r1, #112	; 0x70
   178e4:	18d3      	adds	r3, r2, r3
   178e6:	185b      	adds	r3, r3, r1
   178e8:	781b      	ldrb	r3, [r3, #0]
   178ea:	18c3      	adds	r3, r0, r3
   178ec:	3301      	adds	r3, #1
   178ee:	229c      	movs	r2, #156	; 0x9c
   178f0:	18e3      	adds	r3, r4, r3
   178f2:	189b      	adds	r3, r3, r2
   178f4:	781b      	ldrb	r3, [r3, #0]
}
   178f6:	0018      	movs	r0, r3
   178f8:	46bd      	mov	sp, r7
   178fa:	b003      	add	sp, #12
   178fc:	bd90      	pop	{r4, r7, pc}
   178fe:	46c0      	nop			; (mov r8, r8)
   17900:	00035f9c 	.word	0x00035f9c
   17904:	0001815d 	.word	0x0001815d
   17908:	20000c78 	.word	0x20000c78
   1790c:	00035fe8 	.word	0x00035fe8
   17910:	00017d69 	.word	0x00017d69

00017914 <prvTraceSetObjectState>:

void prvTraceSetObjectState(uint8_t objectclass, traceHandle id, uint8_t value)
{
   17914:	b590      	push	{r4, r7, lr}
   17916:	b083      	sub	sp, #12
   17918:	af00      	add	r7, sp, #0
   1791a:	0004      	movs	r4, r0
   1791c:	0008      	movs	r0, r1
   1791e:	0011      	movs	r1, r2
   17920:	1dfb      	adds	r3, r7, #7
   17922:	1c22      	adds	r2, r4, #0
   17924:	701a      	strb	r2, [r3, #0]
   17926:	1dbb      	adds	r3, r7, #6
   17928:	1c02      	adds	r2, r0, #0
   1792a:	701a      	strb	r2, [r3, #0]
   1792c:	1d7b      	adds	r3, r7, #5
   1792e:	1c0a      	adds	r2, r1, #0
   17930:	701a      	strb	r2, [r3, #0]
	TRACE_ASSERT(objectclass < TRACE_NCLASSES,
   17932:	1dfb      	adds	r3, r7, #7
   17934:	781b      	ldrb	r3, [r3, #0]
   17936:	2b08      	cmp	r3, #8
   17938:	d904      	bls.n	17944 <prvTraceSetObjectState+0x30>
   1793a:	4b1a      	ldr	r3, [pc, #104]	; (179a4 <prvTraceSetObjectState+0x90>)
   1793c:	0018      	movs	r0, r3
   1793e:	4b1a      	ldr	r3, [pc, #104]	; (179a8 <prvTraceSetObjectState+0x94>)
   17940:	4798      	blx	r3
   17942:	e02b      	b.n	1799c <prvTraceSetObjectState+0x88>
		"prvTraceSetObjectState: objectclass >= TRACE_NCLASSES", TRC_UNUSED);
	TRACE_ASSERT(id <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[objectclass],
   17944:	4b19      	ldr	r3, [pc, #100]	; (179ac <prvTraceSetObjectState+0x98>)
   17946:	681a      	ldr	r2, [r3, #0]
   17948:	1dfb      	adds	r3, r7, #7
   1794a:	781b      	ldrb	r3, [r3, #0]
   1794c:	2164      	movs	r1, #100	; 0x64
   1794e:	18d3      	adds	r3, r2, r3
   17950:	185b      	adds	r3, r3, r1
   17952:	781b      	ldrb	r3, [r3, #0]
   17954:	1dba      	adds	r2, r7, #6
   17956:	7812      	ldrb	r2, [r2, #0]
   17958:	429a      	cmp	r2, r3
   1795a:	d904      	bls.n	17966 <prvTraceSetObjectState+0x52>
   1795c:	4b14      	ldr	r3, [pc, #80]	; (179b0 <prvTraceSetObjectState+0x9c>)
   1795e:	0018      	movs	r0, r3
   17960:	4b11      	ldr	r3, [pc, #68]	; (179a8 <prvTraceSetObjectState+0x94>)
   17962:	4798      	blx	r3
   17964:	e01a      	b.n	1799c <prvTraceSetObjectState+0x88>
		"prvTraceSetObjectState: Invalid value for id", TRC_UNUSED);

	TRACE_PROPERTY_OBJECT_STATE(objectclass, id) = value;
   17966:	4b11      	ldr	r3, [pc, #68]	; (179ac <prvTraceSetObjectState+0x98>)
   17968:	681c      	ldr	r4, [r3, #0]
   1796a:	1dfb      	adds	r3, r7, #7
   1796c:	781a      	ldrb	r2, [r3, #0]
   1796e:	1dbb      	adds	r3, r7, #6
   17970:	781b      	ldrb	r3, [r3, #0]
   17972:	0011      	movs	r1, r2
   17974:	0018      	movs	r0, r3
   17976:	4b0f      	ldr	r3, [pc, #60]	; (179b4 <prvTraceSetObjectState+0xa0>)
   17978:	4798      	blx	r3
   1797a:	0003      	movs	r3, r0
   1797c:	0018      	movs	r0, r3
   1797e:	4b0b      	ldr	r3, [pc, #44]	; (179ac <prvTraceSetObjectState+0x98>)
   17980:	681a      	ldr	r2, [r3, #0]
   17982:	1dfb      	adds	r3, r7, #7
   17984:	781b      	ldrb	r3, [r3, #0]
   17986:	2170      	movs	r1, #112	; 0x70
   17988:	18d3      	adds	r3, r2, r3
   1798a:	185b      	adds	r3, r3, r1
   1798c:	781b      	ldrb	r3, [r3, #0]
   1798e:	18c3      	adds	r3, r0, r3
   17990:	229c      	movs	r2, #156	; 0x9c
   17992:	18e3      	adds	r3, r4, r3
   17994:	189b      	adds	r3, r3, r2
   17996:	1d7a      	adds	r2, r7, #5
   17998:	7812      	ldrb	r2, [r2, #0]
   1799a:	701a      	strb	r2, [r3, #0]
}
   1799c:	46bd      	mov	sp, r7
   1799e:	b003      	add	sp, #12
   179a0:	bd90      	pop	{r4, r7, pc}
   179a2:	46c0      	nop			; (mov r8, r8)
   179a4:	00036028 	.word	0x00036028
   179a8:	0001815d 	.word	0x0001815d
   179ac:	20000c78 	.word	0x20000c78
   179b0:	0003606c 	.word	0x0003606c
   179b4:	00017d69 	.word	0x00017d69

000179b8 <prvTraceGetObjectState>:

uint8_t prvTraceGetObjectState(uint8_t objectclass, traceHandle id)
{
   179b8:	b590      	push	{r4, r7, lr}
   179ba:	b083      	sub	sp, #12
   179bc:	af00      	add	r7, sp, #0
   179be:	0002      	movs	r2, r0
   179c0:	1dfb      	adds	r3, r7, #7
   179c2:	701a      	strb	r2, [r3, #0]
   179c4:	1dbb      	adds	r3, r7, #6
   179c6:	1c0a      	adds	r2, r1, #0
   179c8:	701a      	strb	r2, [r3, #0]
	TRACE_ASSERT(objectclass < TRACE_NCLASSES,
   179ca:	1dfb      	adds	r3, r7, #7
   179cc:	781b      	ldrb	r3, [r3, #0]
   179ce:	2b08      	cmp	r3, #8
   179d0:	d905      	bls.n	179de <prvTraceGetObjectState+0x26>
   179d2:	4b1a      	ldr	r3, [pc, #104]	; (17a3c <prvTraceGetObjectState+0x84>)
   179d4:	0018      	movs	r0, r3
   179d6:	4b1a      	ldr	r3, [pc, #104]	; (17a40 <prvTraceGetObjectState+0x88>)
   179d8:	4798      	blx	r3
   179da:	2300      	movs	r3, #0
   179dc:	e02a      	b.n	17a34 <prvTraceGetObjectState+0x7c>
		"prvTraceGetObjectState: objectclass >= TRACE_NCLASSES", 0);
	TRACE_ASSERT(id <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[objectclass],
   179de:	4b19      	ldr	r3, [pc, #100]	; (17a44 <prvTraceGetObjectState+0x8c>)
   179e0:	681a      	ldr	r2, [r3, #0]
   179e2:	1dfb      	adds	r3, r7, #7
   179e4:	781b      	ldrb	r3, [r3, #0]
   179e6:	2164      	movs	r1, #100	; 0x64
   179e8:	18d3      	adds	r3, r2, r3
   179ea:	185b      	adds	r3, r3, r1
   179ec:	781b      	ldrb	r3, [r3, #0]
   179ee:	1dba      	adds	r2, r7, #6
   179f0:	7812      	ldrb	r2, [r2, #0]
   179f2:	429a      	cmp	r2, r3
   179f4:	d905      	bls.n	17a02 <prvTraceGetObjectState+0x4a>
   179f6:	4b14      	ldr	r3, [pc, #80]	; (17a48 <prvTraceGetObjectState+0x90>)
   179f8:	0018      	movs	r0, r3
   179fa:	4b11      	ldr	r3, [pc, #68]	; (17a40 <prvTraceGetObjectState+0x88>)
   179fc:	4798      	blx	r3
   179fe:	2300      	movs	r3, #0
   17a00:	e018      	b.n	17a34 <prvTraceGetObjectState+0x7c>
		"prvTraceGetObjectState: Invalid value for id", 0);

	return TRACE_PROPERTY_OBJECT_STATE(objectclass, id);
   17a02:	4b10      	ldr	r3, [pc, #64]	; (17a44 <prvTraceGetObjectState+0x8c>)
   17a04:	681c      	ldr	r4, [r3, #0]
   17a06:	1dfb      	adds	r3, r7, #7
   17a08:	781a      	ldrb	r2, [r3, #0]
   17a0a:	1dbb      	adds	r3, r7, #6
   17a0c:	781b      	ldrb	r3, [r3, #0]
   17a0e:	0011      	movs	r1, r2
   17a10:	0018      	movs	r0, r3
   17a12:	4b0e      	ldr	r3, [pc, #56]	; (17a4c <prvTraceGetObjectState+0x94>)
   17a14:	4798      	blx	r3
   17a16:	0003      	movs	r3, r0
   17a18:	0018      	movs	r0, r3
   17a1a:	4b0a      	ldr	r3, [pc, #40]	; (17a44 <prvTraceGetObjectState+0x8c>)
   17a1c:	681a      	ldr	r2, [r3, #0]
   17a1e:	1dfb      	adds	r3, r7, #7
   17a20:	781b      	ldrb	r3, [r3, #0]
   17a22:	2170      	movs	r1, #112	; 0x70
   17a24:	18d3      	adds	r3, r2, r3
   17a26:	185b      	adds	r3, r3, r1
   17a28:	781b      	ldrb	r3, [r3, #0]
   17a2a:	18c3      	adds	r3, r0, r3
   17a2c:	229c      	movs	r2, #156	; 0x9c
   17a2e:	18e3      	adds	r3, r4, r3
   17a30:	189b      	adds	r3, r3, r2
   17a32:	781b      	ldrb	r3, [r3, #0]
}
   17a34:	0018      	movs	r0, r3
   17a36:	46bd      	mov	sp, r7
   17a38:	b003      	add	sp, #12
   17a3a:	bd90      	pop	{r4, r7, pc}
   17a3c:	000360a8 	.word	0x000360a8
   17a40:	0001815d 	.word	0x0001815d
   17a44:	20000c78 	.word	0x20000c78
   17a48:	000360ec 	.word	0x000360ec
   17a4c:	00017d69 	.word	0x00017d69

00017a50 <prvTraceSetTaskInstanceFinished>:

void prvTraceSetTaskInstanceFinished(traceHandle handle)
{
   17a50:	b590      	push	{r4, r7, lr}
   17a52:	b083      	sub	sp, #12
   17a54:	af00      	add	r7, sp, #0
   17a56:	0002      	movs	r2, r0
   17a58:	1dfb      	adds	r3, r7, #7
   17a5a:	701a      	strb	r2, [r3, #0]
	TRACE_ASSERT(handle <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[TRACE_CLASS_TASK],
   17a5c:	4b11      	ldr	r3, [pc, #68]	; (17aa4 <prvTraceSetTaskInstanceFinished+0x54>)
   17a5e:	681b      	ldr	r3, [r3, #0]
   17a60:	2267      	movs	r2, #103	; 0x67
   17a62:	5c9b      	ldrb	r3, [r3, r2]
   17a64:	1dfa      	adds	r2, r7, #7
   17a66:	7812      	ldrb	r2, [r2, #0]
   17a68:	429a      	cmp	r2, r3
   17a6a:	d904      	bls.n	17a76 <prvTraceSetTaskInstanceFinished+0x26>
   17a6c:	4b0e      	ldr	r3, [pc, #56]	; (17aa8 <prvTraceSetTaskInstanceFinished+0x58>)
   17a6e:	0018      	movs	r0, r3
   17a70:	4b0e      	ldr	r3, [pc, #56]	; (17aac <prvTraceSetTaskInstanceFinished+0x5c>)
   17a72:	4798      	blx	r3
   17a74:	e013      	b.n	17a9e <prvTraceSetTaskInstanceFinished+0x4e>
		"prvTraceSetTaskInstanceFinished: Invalid value for handle", TRC_UNUSED);

#if (TRC_CFG_USE_IMPLICIT_IFE_RULES == 1)
	TRACE_PROPERTY_OBJECT_STATE(TRACE_CLASS_TASK, handle) = 0;
   17a76:	4b0b      	ldr	r3, [pc, #44]	; (17aa4 <prvTraceSetTaskInstanceFinished+0x54>)
   17a78:	681c      	ldr	r4, [r3, #0]
   17a7a:	1dfb      	adds	r3, r7, #7
   17a7c:	781b      	ldrb	r3, [r3, #0]
   17a7e:	2103      	movs	r1, #3
   17a80:	0018      	movs	r0, r3
   17a82:	4b0b      	ldr	r3, [pc, #44]	; (17ab0 <prvTraceSetTaskInstanceFinished+0x60>)
   17a84:	4798      	blx	r3
   17a86:	0003      	movs	r3, r0
   17a88:	0019      	movs	r1, r3
   17a8a:	4b06      	ldr	r3, [pc, #24]	; (17aa4 <prvTraceSetTaskInstanceFinished+0x54>)
   17a8c:	681b      	ldr	r3, [r3, #0]
   17a8e:	2273      	movs	r2, #115	; 0x73
   17a90:	5c9b      	ldrb	r3, [r3, r2]
   17a92:	18cb      	adds	r3, r1, r3
   17a94:	229c      	movs	r2, #156	; 0x9c
   17a96:	18e3      	adds	r3, r4, r3
   17a98:	189b      	adds	r3, r3, r2
   17a9a:	2200      	movs	r2, #0
   17a9c:	701a      	strb	r2, [r3, #0]
#endif
}
   17a9e:	46bd      	mov	sp, r7
   17aa0:	b003      	add	sp, #12
   17aa2:	bd90      	pop	{r4, r7, pc}
   17aa4:	20000c78 	.word	0x20000c78
   17aa8:	00036128 	.word	0x00036128
   17aac:	0001815d 	.word	0x0001815d
   17ab0:	00017d69 	.word	0x00017d69

00017ab4 <prvTraceInitTraceData>:
 ******************************************************************************/
RecorderDataType* RecorderDataPtr = NULL;

/* This version of the function dynamically allocates the trace data */
void prvTraceInitTraceData()
{	
   17ab4:	b580      	push	{r7, lr}
   17ab6:	af00      	add	r7, sp, #0
	
	if (RecorderDataPtr == NULL)
   17ab8:	4b75      	ldr	r3, [pc, #468]	; (17c90 <prvTraceInitTraceData+0x1dc>)
   17aba:	681b      	ldr	r3, [r3, #0]
   17abc:	2b00      	cmp	r3, #0
   17abe:	d103      	bne.n	17ac8 <prvTraceInitTraceData+0x14>
	{
#if (TRC_CFG_RECORDER_BUFFER_ALLOCATION == TRC_RECORDER_BUFFER_ALLOCATION_STATIC)
	RecorderDataPtr = &RecorderData;
   17ac0:	4b73      	ldr	r3, [pc, #460]	; (17c90 <prvTraceInitTraceData+0x1dc>)
   17ac2:	4a74      	ldr	r2, [pc, #464]	; (17c94 <prvTraceInitTraceData+0x1e0>)
   17ac4:	601a      	str	r2, [r3, #0]
   17ac6:	e006      	b.n	17ad6 <prvTraceInitTraceData+0x22>
		}
#endif
	}
	else
	{
		if (RecorderDataPtr->startmarker0 == 1)
   17ac8:	4b71      	ldr	r3, [pc, #452]	; (17c90 <prvTraceInitTraceData+0x1dc>)
   17aca:	681b      	ldr	r3, [r3, #0]
   17acc:	781b      	ldrb	r3, [r3, #0]
   17ace:	b2db      	uxtb	r3, r3
   17ad0:	2b01      	cmp	r3, #1
   17ad2:	d100      	bne.n	17ad6 <prvTraceInitTraceData+0x22>
   17ad4:	e0d8      	b.n	17c88 <prvTraceInitTraceData+0x1d4>
			/* Already initialized */
			return;
		}
	}
	
	init_hwtc_count = TRC_HWTC_COUNT;
   17ad6:	4b70      	ldr	r3, [pc, #448]	; (17c98 <prvTraceInitTraceData+0x1e4>)
   17ad8:	681a      	ldr	r2, [r3, #0]
   17ada:	4b70      	ldr	r3, [pc, #448]	; (17c9c <prvTraceInitTraceData+0x1e8>)
   17adc:	601a      	str	r2, [r3, #0]
		
	(void)memset(RecorderDataPtr, 0, sizeof(RecorderDataType));
   17ade:	4b6c      	ldr	r3, [pc, #432]	; (17c90 <prvTraceInitTraceData+0x1dc>)
   17ae0:	6818      	ldr	r0, [r3, #0]
   17ae2:	23bd      	movs	r3, #189	; 0xbd
   17ae4:	011b      	lsls	r3, r3, #4
   17ae6:	001a      	movs	r2, r3
   17ae8:	2100      	movs	r1, #0
   17aea:	4b6d      	ldr	r3, [pc, #436]	; (17ca0 <prvTraceInitTraceData+0x1ec>)
   17aec:	4798      	blx	r3
	
	RecorderDataPtr->version = TRACE_KERNEL_VERSION;
   17aee:	4b68      	ldr	r3, [pc, #416]	; (17c90 <prvTraceInitTraceData+0x1dc>)
   17af0:	681b      	ldr	r3, [r3, #0]
   17af2:	4a6c      	ldr	r2, [pc, #432]	; (17ca4 <prvTraceInitTraceData+0x1f0>)
   17af4:	819a      	strh	r2, [r3, #12]
	RecorderDataPtr->minor_version = TRACE_MINOR_VERSION;
   17af6:	4b66      	ldr	r3, [pc, #408]	; (17c90 <prvTraceInitTraceData+0x1dc>)
   17af8:	681b      	ldr	r3, [r3, #0]
   17afa:	2205      	movs	r2, #5
   17afc:	739a      	strb	r2, [r3, #14]
	RecorderDataPtr->irq_priority_order = TRC_IRQ_PRIORITY_ORDER;
   17afe:	4b64      	ldr	r3, [pc, #400]	; (17c90 <prvTraceInitTraceData+0x1dc>)
   17b00:	681b      	ldr	r3, [r3, #0]
   17b02:	2200      	movs	r2, #0
   17b04:	73da      	strb	r2, [r3, #15]
	RecorderDataPtr->filesize = sizeof(RecorderDataType);
   17b06:	4b62      	ldr	r3, [pc, #392]	; (17c90 <prvTraceInitTraceData+0x1dc>)
   17b08:	681b      	ldr	r3, [r3, #0]
   17b0a:	22bd      	movs	r2, #189	; 0xbd
   17b0c:	0112      	lsls	r2, r2, #4
   17b0e:	611a      	str	r2, [r3, #16]
	RecorderDataPtr->maxEvents = (TRC_CFG_EVENT_BUFFER_SIZE);
   17b10:	4b5f      	ldr	r3, [pc, #380]	; (17c90 <prvTraceInitTraceData+0x1dc>)
   17b12:	681b      	ldr	r3, [r3, #0]
   17b14:	2296      	movs	r2, #150	; 0x96
   17b16:	0052      	lsls	r2, r2, #1
   17b18:	619a      	str	r2, [r3, #24]
	RecorderDataPtr->debugMarker0 = (int32_t) 0xF0F0F0F0;
   17b1a:	4b5d      	ldr	r3, [pc, #372]	; (17c90 <prvTraceInitTraceData+0x1dc>)
   17b1c:	681b      	ldr	r3, [r3, #0]
   17b1e:	4a62      	ldr	r2, [pc, #392]	; (17ca8 <prvTraceInitTraceData+0x1f4>)
   17b20:	655a      	str	r2, [r3, #84]	; 0x54
	RecorderDataPtr->isUsing16bitHandles = TRC_CFG_USE_16BIT_OBJECT_HANDLES;
   17b22:	4b5b      	ldr	r3, [pc, #364]	; (17c90 <prvTraceInitTraceData+0x1dc>)
   17b24:	681b      	ldr	r3, [r3, #0]
   17b26:	2200      	movs	r2, #0
   17b28:	659a      	str	r2, [r3, #88]	; 0x58
	RecorderDataPtr->isrTailchainingThreshold = TRC_CFG_ISR_TAILCHAINING_THRESHOLD;
   17b2a:	4b59      	ldr	r3, [pc, #356]	; (17c90 <prvTraceInitTraceData+0x1dc>)
   17b2c:	681b      	ldr	r3, [r3, #0]
   17b2e:	2200      	movs	r2, #0
   17b30:	635a      	str	r2, [r3, #52]	; 0x34

	/* This function is kernel specific */
	vTraceInitObjectPropertyTable();
   17b32:	4b5e      	ldr	r3, [pc, #376]	; (17cac <prvTraceInitTraceData+0x1f8>)
   17b34:	4798      	blx	r3

	RecorderDataPtr->debugMarker1 = (int32_t)0xF1F1F1F1;
   17b36:	4b56      	ldr	r3, [pc, #344]	; (17c90 <prvTraceInitTraceData+0x1dc>)
   17b38:	681b      	ldr	r3, [r3, #0]
   17b3a:	4a5d      	ldr	r2, [pc, #372]	; (17cb0 <prvTraceInitTraceData+0x1fc>)
   17b3c:	495d      	ldr	r1, [pc, #372]	; (17cb4 <prvTraceInitTraceData+0x200>)
   17b3e:	5099      	str	r1, [r3, r2]
	RecorderDataPtr->SymbolTable.symTableSize = (TRC_CFG_SYMBOL_TABLE_SIZE);
   17b40:	4b53      	ldr	r3, [pc, #332]	; (17c90 <prvTraceInitTraceData+0x1dc>)
   17b42:	681a      	ldr	r2, [r3, #0]
   17b44:	23ac      	movs	r3, #172	; 0xac
   17b46:	00db      	lsls	r3, r3, #3
   17b48:	21c8      	movs	r1, #200	; 0xc8
   17b4a:	50d1      	str	r1, [r2, r3]
	RecorderDataPtr->SymbolTable.nextFreeSymbolIndex = 1;
   17b4c:	4b50      	ldr	r3, [pc, #320]	; (17c90 <prvTraceInitTraceData+0x1dc>)
   17b4e:	681b      	ldr	r3, [r3, #0]
   17b50:	4a59      	ldr	r2, [pc, #356]	; (17cb8 <prvTraceInitTraceData+0x204>)
   17b52:	2101      	movs	r1, #1
   17b54:	5099      	str	r1, [r3, r2]
#if (TRC_CFG_INCLUDE_FLOAT_SUPPORT == 1)
	RecorderDataPtr->exampleFloatEncoding = 1.0f; /* otherwise already zero */
#endif
	RecorderDataPtr->debugMarker2 = (int32_t)0xF2F2F2F2;
   17b56:	4b4e      	ldr	r3, [pc, #312]	; (17c90 <prvTraceInitTraceData+0x1dc>)
   17b58:	681a      	ldr	r2, [r3, #0]
   17b5a:	23d7      	movs	r3, #215	; 0xd7
   17b5c:	00db      	lsls	r3, r3, #3
   17b5e:	4957      	ldr	r1, [pc, #348]	; (17cbc <prvTraceInitTraceData+0x208>)
   17b60:	50d1      	str	r1, [r2, r3]
	prvStrncpy(RecorderDataPtr->systemInfo, "Trace Recorder Demo", 80);
   17b62:	4b4b      	ldr	r3, [pc, #300]	; (17c90 <prvTraceInitTraceData+0x1dc>)
   17b64:	681b      	ldr	r3, [r3, #0]
   17b66:	4a56      	ldr	r2, [pc, #344]	; (17cc0 <prvTraceInitTraceData+0x20c>)
   17b68:	4694      	mov	ip, r2
   17b6a:	4463      	add	r3, ip
   17b6c:	4955      	ldr	r1, [pc, #340]	; (17cc4 <prvTraceInitTraceData+0x210>)
   17b6e:	2250      	movs	r2, #80	; 0x50
   17b70:	0018      	movs	r0, r3
   17b72:	4b55      	ldr	r3, [pc, #340]	; (17cc8 <prvTraceInitTraceData+0x214>)
   17b74:	4798      	blx	r3
	RecorderDataPtr->debugMarker3 = (int32_t)0xF3F3F3F3;
   17b76:	4b46      	ldr	r3, [pc, #280]	; (17c90 <prvTraceInitTraceData+0x1dc>)
   17b78:	681b      	ldr	r3, [r3, #0]
   17b7a:	4a54      	ldr	r2, [pc, #336]	; (17ccc <prvTraceInitTraceData+0x218>)
   17b7c:	4954      	ldr	r1, [pc, #336]	; (17cd0 <prvTraceInitTraceData+0x21c>)
   17b7e:	5099      	str	r1, [r3, r2]
	RecorderDataPtr->endmarker0 = 0x0A;
   17b80:	4b43      	ldr	r3, [pc, #268]	; (17c90 <prvTraceInitTraceData+0x1dc>)
   17b82:	681b      	ldr	r3, [r3, #0]
   17b84:	4a53      	ldr	r2, [pc, #332]	; (17cd4 <prvTraceInitTraceData+0x220>)
   17b86:	210a      	movs	r1, #10
   17b88:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->endmarker1 = 0x0B;
   17b8a:	4b41      	ldr	r3, [pc, #260]	; (17c90 <prvTraceInitTraceData+0x1dc>)
   17b8c:	681b      	ldr	r3, [r3, #0]
   17b8e:	4a52      	ldr	r2, [pc, #328]	; (17cd8 <prvTraceInitTraceData+0x224>)
   17b90:	210b      	movs	r1, #11
   17b92:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->endmarker2 = 0x0C;
   17b94:	4b3e      	ldr	r3, [pc, #248]	; (17c90 <prvTraceInitTraceData+0x1dc>)
   17b96:	681b      	ldr	r3, [r3, #0]
   17b98:	4a50      	ldr	r2, [pc, #320]	; (17cdc <prvTraceInitTraceData+0x228>)
   17b9a:	210c      	movs	r1, #12
   17b9c:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->endmarker3 = 0x0D;
   17b9e:	4b3c      	ldr	r3, [pc, #240]	; (17c90 <prvTraceInitTraceData+0x1dc>)
   17ba0:	681b      	ldr	r3, [r3, #0]
   17ba2:	4a4f      	ldr	r2, [pc, #316]	; (17ce0 <prvTraceInitTraceData+0x22c>)
   17ba4:	210d      	movs	r1, #13
   17ba6:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->endmarker4 = 0x71;
   17ba8:	4b39      	ldr	r3, [pc, #228]	; (17c90 <prvTraceInitTraceData+0x1dc>)
   17baa:	681b      	ldr	r3, [r3, #0]
   17bac:	4a4d      	ldr	r2, [pc, #308]	; (17ce4 <prvTraceInitTraceData+0x230>)
   17bae:	2171      	movs	r1, #113	; 0x71
   17bb0:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->endmarker5 = 0x72;
   17bb2:	4b37      	ldr	r3, [pc, #220]	; (17c90 <prvTraceInitTraceData+0x1dc>)
   17bb4:	681b      	ldr	r3, [r3, #0]
   17bb6:	4a4c      	ldr	r2, [pc, #304]	; (17ce8 <prvTraceInitTraceData+0x234>)
   17bb8:	2172      	movs	r1, #114	; 0x72
   17bba:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->endmarker6 = 0x73;
   17bbc:	4b34      	ldr	r3, [pc, #208]	; (17c90 <prvTraceInitTraceData+0x1dc>)
   17bbe:	681b      	ldr	r3, [r3, #0]
   17bc0:	4a4a      	ldr	r2, [pc, #296]	; (17cec <prvTraceInitTraceData+0x238>)
   17bc2:	2173      	movs	r1, #115	; 0x73
   17bc4:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->endmarker7 = 0x74;
   17bc6:	4b32      	ldr	r3, [pc, #200]	; (17c90 <prvTraceInitTraceData+0x1dc>)
   17bc8:	681b      	ldr	r3, [r3, #0]
   17bca:	4a49      	ldr	r2, [pc, #292]	; (17cf0 <prvTraceInitTraceData+0x23c>)
   17bcc:	2174      	movs	r1, #116	; 0x74
   17bce:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->endmarker8 = 0xF1;
   17bd0:	4b2f      	ldr	r3, [pc, #188]	; (17c90 <prvTraceInitTraceData+0x1dc>)
   17bd2:	681b      	ldr	r3, [r3, #0]
   17bd4:	4a47      	ldr	r2, [pc, #284]	; (17cf4 <prvTraceInitTraceData+0x240>)
   17bd6:	21f1      	movs	r1, #241	; 0xf1
   17bd8:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->endmarker9 = 0xF2;
   17bda:	4b2d      	ldr	r3, [pc, #180]	; (17c90 <prvTraceInitTraceData+0x1dc>)
   17bdc:	681b      	ldr	r3, [r3, #0]
   17bde:	4a46      	ldr	r2, [pc, #280]	; (17cf8 <prvTraceInitTraceData+0x244>)
   17be0:	21f2      	movs	r1, #242	; 0xf2
   17be2:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->endmarker10 = 0xF3;
   17be4:	4b2a      	ldr	r3, [pc, #168]	; (17c90 <prvTraceInitTraceData+0x1dc>)
   17be6:	681b      	ldr	r3, [r3, #0]
   17be8:	4a44      	ldr	r2, [pc, #272]	; (17cfc <prvTraceInitTraceData+0x248>)
   17bea:	21f3      	movs	r1, #243	; 0xf3
   17bec:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->endmarker11 = 0xF4;
   17bee:	4b28      	ldr	r3, [pc, #160]	; (17c90 <prvTraceInitTraceData+0x1dc>)
   17bf0:	681b      	ldr	r3, [r3, #0]
   17bf2:	4a43      	ldr	r2, [pc, #268]	; (17d00 <prvTraceInitTraceData+0x24c>)
   17bf4:	21f4      	movs	r1, #244	; 0xf4
   17bf6:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->userEventBuffer.numberOfSlots = (TRC_CFG_SEPARATE_USER_EVENT_BUFFER_SIZE);
	RecorderDataPtr->userEventBuffer.numberOfChannels = (TRC_CFG_UB_CHANNELS) + 1;
#endif

	/* Kernel specific initialization of the objectHandleStacks variable */
	vTraceInitObjectHandleStack();
   17bf8:	4b42      	ldr	r3, [pc, #264]	; (17d04 <prvTraceInitTraceData+0x250>)
   17bfa:	4798      	blx	r3
	and the fields are volatile to ensure this assignment order. This to avoid any 
	chance of accidental duplicates of this elsewhere in memory.
	
	Moreover, the fields are set byte-by-byte to avoid endian issues.*/
	
	RecorderDataPtr->startmarker11 = 0xF4;
   17bfc:	4b24      	ldr	r3, [pc, #144]	; (17c90 <prvTraceInitTraceData+0x1dc>)
   17bfe:	681b      	ldr	r3, [r3, #0]
   17c00:	22f4      	movs	r2, #244	; 0xf4
   17c02:	72da      	strb	r2, [r3, #11]
	RecorderDataPtr->startmarker10 = 0xF3;
   17c04:	4b22      	ldr	r3, [pc, #136]	; (17c90 <prvTraceInitTraceData+0x1dc>)
   17c06:	681b      	ldr	r3, [r3, #0]
   17c08:	22f3      	movs	r2, #243	; 0xf3
   17c0a:	729a      	strb	r2, [r3, #10]
	RecorderDataPtr->startmarker9 = 0xF2;
   17c0c:	4b20      	ldr	r3, [pc, #128]	; (17c90 <prvTraceInitTraceData+0x1dc>)
   17c0e:	681b      	ldr	r3, [r3, #0]
   17c10:	22f2      	movs	r2, #242	; 0xf2
   17c12:	725a      	strb	r2, [r3, #9]
	RecorderDataPtr->startmarker8 = 0xF1;
   17c14:	4b1e      	ldr	r3, [pc, #120]	; (17c90 <prvTraceInitTraceData+0x1dc>)
   17c16:	681b      	ldr	r3, [r3, #0]
   17c18:	22f1      	movs	r2, #241	; 0xf1
   17c1a:	721a      	strb	r2, [r3, #8]
	RecorderDataPtr->startmarker7 = 0x74;
   17c1c:	4b1c      	ldr	r3, [pc, #112]	; (17c90 <prvTraceInitTraceData+0x1dc>)
   17c1e:	681b      	ldr	r3, [r3, #0]
   17c20:	2274      	movs	r2, #116	; 0x74
   17c22:	71da      	strb	r2, [r3, #7]
	RecorderDataPtr->startmarker6 = 0x73;
   17c24:	4b1a      	ldr	r3, [pc, #104]	; (17c90 <prvTraceInitTraceData+0x1dc>)
   17c26:	681b      	ldr	r3, [r3, #0]
   17c28:	2273      	movs	r2, #115	; 0x73
   17c2a:	719a      	strb	r2, [r3, #6]
	RecorderDataPtr->startmarker5 = 0x72;
   17c2c:	4b18      	ldr	r3, [pc, #96]	; (17c90 <prvTraceInitTraceData+0x1dc>)
   17c2e:	681b      	ldr	r3, [r3, #0]
   17c30:	2272      	movs	r2, #114	; 0x72
   17c32:	715a      	strb	r2, [r3, #5]
	RecorderDataPtr->startmarker4 = 0x71;
   17c34:	4b16      	ldr	r3, [pc, #88]	; (17c90 <prvTraceInitTraceData+0x1dc>)
   17c36:	681b      	ldr	r3, [r3, #0]
   17c38:	2271      	movs	r2, #113	; 0x71
   17c3a:	711a      	strb	r2, [r3, #4]
	RecorderDataPtr->startmarker3 = 0x04;
   17c3c:	4b14      	ldr	r3, [pc, #80]	; (17c90 <prvTraceInitTraceData+0x1dc>)
   17c3e:	681b      	ldr	r3, [r3, #0]
   17c40:	2204      	movs	r2, #4
   17c42:	70da      	strb	r2, [r3, #3]
	RecorderDataPtr->startmarker2 = 0x03;
   17c44:	4b12      	ldr	r3, [pc, #72]	; (17c90 <prvTraceInitTraceData+0x1dc>)
   17c46:	681b      	ldr	r3, [r3, #0]
   17c48:	2203      	movs	r2, #3
   17c4a:	709a      	strb	r2, [r3, #2]
	RecorderDataPtr->startmarker1 = 0x02;	
   17c4c:	4b10      	ldr	r3, [pc, #64]	; (17c90 <prvTraceInitTraceData+0x1dc>)
   17c4e:	681b      	ldr	r3, [r3, #0]
   17c50:	2202      	movs	r2, #2
   17c52:	705a      	strb	r2, [r3, #1]
	RecorderDataPtr->startmarker0 = 0x01; 
   17c54:	4b0e      	ldr	r3, [pc, #56]	; (17c90 <prvTraceInitTraceData+0x1dc>)
   17c56:	681b      	ldr	r3, [r3, #0]
   17c58:	2201      	movs	r2, #1
   17c5a:	701a      	strb	r2, [r3, #0]

	if (traceErrorMessage != NULL)
   17c5c:	4b2a      	ldr	r3, [pc, #168]	; (17d08 <prvTraceInitTraceData+0x254>)
   17c5e:	681b      	ldr	r3, [r3, #0]
   17c60:	2b00      	cmp	r3, #0
   17c62:	d012      	beq.n	17c8a <prvTraceInitTraceData+0x1d6>
	{
		// An error was detected before vTraceEnable was called, make sure this is stored in the trace data.
		prvStrncpy(RecorderDataPtr->systemInfo, traceErrorMessage, 80);
   17c64:	4b0a      	ldr	r3, [pc, #40]	; (17c90 <prvTraceInitTraceData+0x1dc>)
   17c66:	681b      	ldr	r3, [r3, #0]
   17c68:	4a15      	ldr	r2, [pc, #84]	; (17cc0 <prvTraceInitTraceData+0x20c>)
   17c6a:	1898      	adds	r0, r3, r2
   17c6c:	4b26      	ldr	r3, [pc, #152]	; (17d08 <prvTraceInitTraceData+0x254>)
   17c6e:	681b      	ldr	r3, [r3, #0]
   17c70:	2250      	movs	r2, #80	; 0x50
   17c72:	0019      	movs	r1, r3
   17c74:	4b14      	ldr	r3, [pc, #80]	; (17cc8 <prvTraceInitTraceData+0x214>)
   17c76:	4798      	blx	r3
		RecorderDataPtr->internalErrorOccured = 1;
   17c78:	4b05      	ldr	r3, [pc, #20]	; (17c90 <prvTraceInitTraceData+0x1dc>)
   17c7a:	681b      	ldr	r3, [r3, #0]
   17c7c:	4a23      	ldr	r2, [pc, #140]	; (17d0c <prvTraceInitTraceData+0x258>)
   17c7e:	2101      	movs	r1, #1
   17c80:	5099      	str	r1, [r3, r2]
		vTraceStop();
   17c82:	4b23      	ldr	r3, [pc, #140]	; (17d10 <prvTraceInitTraceData+0x25c>)
   17c84:	4798      	blx	r3
   17c86:	e000      	b.n	17c8a <prvTraceInitTraceData+0x1d6>
			return;
   17c88:	46c0      	nop			; (mov r8, r8)

	
#ifdef TRC_PORT_SPECIFIC_INIT
	TRC_PORT_SPECIFIC_INIT();
#endif
}
   17c8a:	46bd      	mov	sp, r7
   17c8c:	bd80      	pop	{r7, pc}
   17c8e:	46c0      	nop			; (mov r8, r8)
   17c90:	20000c78 	.word	0x20000c78
   17c94:	2000449c 	.word	0x2000449c
   17c98:	e000e018 	.word	0xe000e018
   17c9c:	2000506c 	.word	0x2000506c
   17ca0:	00033117 	.word	0x00033117
   17ca4:	00001aa1 	.word	0x00001aa1
   17ca8:	f0f0f0f0 	.word	0xf0f0f0f0
   17cac:	00016c19 	.word	0x00016c19
   17cb0:	0000055c 	.word	0x0000055c
   17cb4:	f1f1f1f1 	.word	0xf1f1f1f1
   17cb8:	00000564 	.word	0x00000564
   17cbc:	f2f2f2f2 	.word	0xf2f2f2f2
   17cc0:	000006bc 	.word	0x000006bc
   17cc4:	00036170 	.word	0x00036170
   17cc8:	00018029 	.word	0x00018029
   17ccc:	0000070c 	.word	0x0000070c
   17cd0:	f3f3f3f3 	.word	0xf3f3f3f3
   17cd4:	00000bc4 	.word	0x00000bc4
   17cd8:	00000bc5 	.word	0x00000bc5
   17cdc:	00000bc6 	.word	0x00000bc6
   17ce0:	00000bc7 	.word	0x00000bc7
   17ce4:	00000bc8 	.word	0x00000bc8
   17ce8:	00000bc9 	.word	0x00000bc9
   17cec:	00000bca 	.word	0x00000bca
   17cf0:	00000bcb 	.word	0x00000bcb
   17cf4:	00000bcc 	.word	0x00000bcc
   17cf8:	00000bcd 	.word	0x00000bcd
   17cfc:	00000bce 	.word	0x00000bce
   17d00:	00000bcf 	.word	0x00000bcf
   17d04:	00016db9 	.word	0x00016db9
   17d08:	20000bd8 	.word	0x20000bd8
   17d0c:	000006b4 	.word	0x000006b4
   17d10:	00017021 	.word	0x00017021

00017d14 <prvTraceNextFreeEventBufferSlot>:


void* prvTraceNextFreeEventBufferSlot(void)
{
   17d14:	b580      	push	{r7, lr}
   17d16:	af00      	add	r7, sp, #0
	if (! RecorderDataPtr->recorderActive)
   17d18:	4b10      	ldr	r3, [pc, #64]	; (17d5c <prvTraceNextFreeEventBufferSlot+0x48>)
   17d1a:	681b      	ldr	r3, [r3, #0]
   17d1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   17d1e:	2b00      	cmp	r3, #0
   17d20:	d101      	bne.n	17d26 <prvTraceNextFreeEventBufferSlot+0x12>
	{
		/* If an XTS or XPS event prior to the main event has filled the buffer
		before saving the main event, and store mode is "stop when full". */
		return NULL;
   17d22:	2300      	movs	r3, #0
   17d24:	e017      	b.n	17d56 <prvTraceNextFreeEventBufferSlot+0x42>
	}

	if (RecorderDataPtr->nextFreeIndex >= (TRC_CFG_EVENT_BUFFER_SIZE))
   17d26:	4b0d      	ldr	r3, [pc, #52]	; (17d5c <prvTraceNextFreeEventBufferSlot+0x48>)
   17d28:	681b      	ldr	r3, [r3, #0]
   17d2a:	69da      	ldr	r2, [r3, #28]
   17d2c:	232c      	movs	r3, #44	; 0x2c
   17d2e:	33ff      	adds	r3, #255	; 0xff
   17d30:	429a      	cmp	r2, r3
   17d32:	d905      	bls.n	17d40 <prvTraceNextFreeEventBufferSlot+0x2c>
	{
		prvTraceError("Attempt to index outside event buffer!");
   17d34:	4b0a      	ldr	r3, [pc, #40]	; (17d60 <prvTraceNextFreeEventBufferSlot+0x4c>)
   17d36:	0018      	movs	r0, r3
   17d38:	4b0a      	ldr	r3, [pc, #40]	; (17d64 <prvTraceNextFreeEventBufferSlot+0x50>)
   17d3a:	4798      	blx	r3
		return NULL;
   17d3c:	2300      	movs	r3, #0
   17d3e:	e00a      	b.n	17d56 <prvTraceNextFreeEventBufferSlot+0x42>
	}
	return (void*)(&RecorderDataPtr->eventData[RecorderDataPtr->nextFreeIndex*4]);
   17d40:	4b06      	ldr	r3, [pc, #24]	; (17d5c <prvTraceNextFreeEventBufferSlot+0x48>)
   17d42:	681a      	ldr	r2, [r3, #0]
   17d44:	4b05      	ldr	r3, [pc, #20]	; (17d5c <prvTraceNextFreeEventBufferSlot+0x48>)
   17d46:	681b      	ldr	r3, [r3, #0]
   17d48:	69db      	ldr	r3, [r3, #28]
   17d4a:	009b      	lsls	r3, r3, #2
   17d4c:	21e2      	movs	r1, #226	; 0xe2
   17d4e:	00c9      	lsls	r1, r1, #3
   17d50:	468c      	mov	ip, r1
   17d52:	4463      	add	r3, ip
   17d54:	18d3      	adds	r3, r2, r3
}
   17d56:	0018      	movs	r0, r3
   17d58:	46bd      	mov	sp, r7
   17d5a:	bd80      	pop	{r7, pc}
   17d5c:	20000c78 	.word	0x20000c78
   17d60:	00036184 	.word	0x00036184
   17d64:	0001815d 	.word	0x0001815d

00017d68 <uiIndexOfObject>:

uint16_t uiIndexOfObject(traceHandle objecthandle, uint8_t objectclass)
{
   17d68:	b580      	push	{r7, lr}
   17d6a:	b082      	sub	sp, #8
   17d6c:	af00      	add	r7, sp, #0
   17d6e:	0002      	movs	r2, r0
   17d70:	1dfb      	adds	r3, r7, #7
   17d72:	701a      	strb	r2, [r3, #0]
   17d74:	1dbb      	adds	r3, r7, #6
   17d76:	1c0a      	adds	r2, r1, #0
   17d78:	701a      	strb	r2, [r3, #0]
	TRACE_ASSERT(objectclass < TRACE_NCLASSES, 
   17d7a:	1dbb      	adds	r3, r7, #6
   17d7c:	781b      	ldrb	r3, [r3, #0]
   17d7e:	2b08      	cmp	r3, #8
   17d80:	d905      	bls.n	17d8e <uiIndexOfObject+0x26>
   17d82:	4b2a      	ldr	r3, [pc, #168]	; (17e2c <uiIndexOfObject+0xc4>)
   17d84:	0018      	movs	r0, r3
   17d86:	4b2a      	ldr	r3, [pc, #168]	; (17e30 <uiIndexOfObject+0xc8>)
   17d88:	4798      	blx	r3
   17d8a:	2300      	movs	r3, #0
   17d8c:	e049      	b.n	17e22 <uiIndexOfObject+0xba>
		"uiIndexOfObject: Invalid value for objectclass", 0);
	TRACE_ASSERT(objecthandle > 0 && objecthandle <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[objectclass], 
   17d8e:	1dfb      	adds	r3, r7, #7
   17d90:	781b      	ldrb	r3, [r3, #0]
   17d92:	2b00      	cmp	r3, #0
   17d94:	d00b      	beq.n	17dae <uiIndexOfObject+0x46>
   17d96:	4b27      	ldr	r3, [pc, #156]	; (17e34 <uiIndexOfObject+0xcc>)
   17d98:	681a      	ldr	r2, [r3, #0]
   17d9a:	1dbb      	adds	r3, r7, #6
   17d9c:	781b      	ldrb	r3, [r3, #0]
   17d9e:	2164      	movs	r1, #100	; 0x64
   17da0:	18d3      	adds	r3, r2, r3
   17da2:	185b      	adds	r3, r3, r1
   17da4:	781b      	ldrb	r3, [r3, #0]
   17da6:	1dfa      	adds	r2, r7, #7
   17da8:	7812      	ldrb	r2, [r2, #0]
   17daa:	429a      	cmp	r2, r3
   17dac:	d905      	bls.n	17dba <uiIndexOfObject+0x52>
   17dae:	4b22      	ldr	r3, [pc, #136]	; (17e38 <uiIndexOfObject+0xd0>)
   17db0:	0018      	movs	r0, r3
   17db2:	4b1f      	ldr	r3, [pc, #124]	; (17e30 <uiIndexOfObject+0xc8>)
   17db4:	4798      	blx	r3
   17db6:	2300      	movs	r3, #0
   17db8:	e033      	b.n	17e22 <uiIndexOfObject+0xba>
		"uiIndexOfObject: Invalid value for objecthandle", 0);

	if ((objectclass < TRACE_NCLASSES) && (objecthandle > 0) && 
   17dba:	1dbb      	adds	r3, r7, #6
   17dbc:	781b      	ldrb	r3, [r3, #0]
   17dbe:	2b08      	cmp	r3, #8
   17dc0:	d82a      	bhi.n	17e18 <uiIndexOfObject+0xb0>
   17dc2:	1dfb      	adds	r3, r7, #7
   17dc4:	781b      	ldrb	r3, [r3, #0]
   17dc6:	2b00      	cmp	r3, #0
   17dc8:	d026      	beq.n	17e18 <uiIndexOfObject+0xb0>
		(objecthandle <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[objectclass]))
   17dca:	4b1a      	ldr	r3, [pc, #104]	; (17e34 <uiIndexOfObject+0xcc>)
   17dcc:	681a      	ldr	r2, [r3, #0]
   17dce:	1dbb      	adds	r3, r7, #6
   17dd0:	781b      	ldrb	r3, [r3, #0]
   17dd2:	2164      	movs	r1, #100	; 0x64
   17dd4:	18d3      	adds	r3, r2, r3
   17dd6:	185b      	adds	r3, r3, r1
   17dd8:	781b      	ldrb	r3, [r3, #0]
	if ((objectclass < TRACE_NCLASSES) && (objecthandle > 0) && 
   17dda:	1dfa      	adds	r2, r7, #7
   17ddc:	7812      	ldrb	r2, [r2, #0]
   17dde:	429a      	cmp	r2, r3
   17de0:	d81a      	bhi.n	17e18 <uiIndexOfObject+0xb0>
	{
		return (uint16_t)(RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[objectclass] + 
   17de2:	4b14      	ldr	r3, [pc, #80]	; (17e34 <uiIndexOfObject+0xcc>)
   17de4:	681a      	ldr	r2, [r3, #0]
   17de6:	1dbb      	adds	r3, r7, #6
   17de8:	781b      	ldrb	r3, [r3, #0]
   17dea:	3340      	adds	r3, #64	; 0x40
   17dec:	005b      	lsls	r3, r3, #1
   17dee:	18d3      	adds	r3, r2, r3
   17df0:	3308      	adds	r3, #8
   17df2:	881a      	ldrh	r2, [r3, #0]
			(RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[objectclass] * (objecthandle-1)));
   17df4:	4b0f      	ldr	r3, [pc, #60]	; (17e34 <uiIndexOfObject+0xcc>)
   17df6:	6819      	ldr	r1, [r3, #0]
   17df8:	1dbb      	adds	r3, r7, #6
   17dfa:	781b      	ldrb	r3, [r3, #0]
   17dfc:	207c      	movs	r0, #124	; 0x7c
   17dfe:	18cb      	adds	r3, r1, r3
   17e00:	181b      	adds	r3, r3, r0
   17e02:	781b      	ldrb	r3, [r3, #0]
		return (uint16_t)(RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[objectclass] + 
   17e04:	b29b      	uxth	r3, r3
			(RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[objectclass] * (objecthandle-1)));
   17e06:	1df9      	adds	r1, r7, #7
   17e08:	7809      	ldrb	r1, [r1, #0]
   17e0a:	3901      	subs	r1, #1
		return (uint16_t)(RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[objectclass] + 
   17e0c:	b289      	uxth	r1, r1
   17e0e:	434b      	muls	r3, r1
   17e10:	b29b      	uxth	r3, r3
   17e12:	18d3      	adds	r3, r2, r3
   17e14:	b29b      	uxth	r3, r3
   17e16:	e004      	b.n	17e22 <uiIndexOfObject+0xba>
	}

	prvTraceError("Object table lookup with invalid object handle or object class!");
   17e18:	4b08      	ldr	r3, [pc, #32]	; (17e3c <uiIndexOfObject+0xd4>)
   17e1a:	0018      	movs	r0, r3
   17e1c:	4b04      	ldr	r3, [pc, #16]	; (17e30 <uiIndexOfObject+0xc8>)
   17e1e:	4798      	blx	r3
	return 0;
   17e20:	2300      	movs	r3, #0
}
   17e22:	0018      	movs	r0, r3
   17e24:	46bd      	mov	sp, r7
   17e26:	b002      	add	sp, #8
   17e28:	bd80      	pop	{r7, pc}
   17e2a:	46c0      	nop			; (mov r8, r8)
   17e2c:	000361ac 	.word	0x000361ac
   17e30:	0001815d 	.word	0x0001815d
   17e34:	20000c78 	.word	0x20000c78
   17e38:	000361ec 	.word	0x000361ec
   17e3c:	0003622c 	.word	0x0003622c

00017e40 <prvTraceGetObjectHandle>:

traceHandle prvTraceGetObjectHandle(traceObjectClass objectclass)
{
   17e40:	b580      	push	{r7, lr}
   17e42:	b088      	sub	sp, #32
   17e44:	af00      	add	r7, sp, #0
   17e46:	0002      	movs	r2, r0
   17e48:	1dfb      	adds	r3, r7, #7
   17e4a:	701a      	strb	r2, [r3, #0]
	traceHandle handle;
	static int indexOfHandle;

	TRACE_ALLOC_CRITICAL_SECTION();

	TRACE_ASSERT(RecorderDataPtr != NULL, "Recorder not initialized, call vTraceEnable() first!", (traceHandle)0);
   17e4c:	4b5a      	ldr	r3, [pc, #360]	; (17fb8 <prvTraceGetObjectHandle+0x178>)
   17e4e:	681b      	ldr	r3, [r3, #0]
   17e50:	2b00      	cmp	r3, #0
   17e52:	d105      	bne.n	17e60 <prvTraceGetObjectHandle+0x20>
   17e54:	4b59      	ldr	r3, [pc, #356]	; (17fbc <prvTraceGetObjectHandle+0x17c>)
   17e56:	0018      	movs	r0, r3
   17e58:	4b59      	ldr	r3, [pc, #356]	; (17fc0 <prvTraceGetObjectHandle+0x180>)
   17e5a:	4798      	blx	r3
   17e5c:	2300      	movs	r3, #0
   17e5e:	e0a7      	b.n	17fb0 <prvTraceGetObjectHandle+0x170>
	
	TRACE_ASSERT(objectclass < TRACE_NCLASSES, 
   17e60:	1dfb      	adds	r3, r7, #7
   17e62:	781b      	ldrb	r3, [r3, #0]
   17e64:	2b08      	cmp	r3, #8
   17e66:	d905      	bls.n	17e74 <prvTraceGetObjectHandle+0x34>
   17e68:	4b56      	ldr	r3, [pc, #344]	; (17fc4 <prvTraceGetObjectHandle+0x184>)
   17e6a:	0018      	movs	r0, r3
   17e6c:	4b54      	ldr	r3, [pc, #336]	; (17fc0 <prvTraceGetObjectHandle+0x180>)
   17e6e:	4798      	blx	r3
   17e70:	2300      	movs	r3, #0
   17e72:	e09d      	b.n	17fb0 <prvTraceGetObjectHandle+0x170>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   17e74:	f3ef 8310 	mrs	r3, PRIMASK
   17e78:	60fb      	str	r3, [r7, #12]
  return(result);
   17e7a:	68fb      	ldr	r3, [r7, #12]
		"prvTraceGetObjectHandle: Invalid value for objectclass", (traceHandle)0);

	trcCRITICAL_SECTION_BEGIN();
   17e7c:	61bb      	str	r3, [r7, #24]
   17e7e:	2301      	movs	r3, #1
   17e80:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
   17e82:	693b      	ldr	r3, [r7, #16]
   17e84:	f383 8810 	msr	PRIMASK, r3
   17e88:	4b4f      	ldr	r3, [pc, #316]	; (17fc8 <prvTraceGetObjectHandle+0x188>)
   17e8a:	681b      	ldr	r3, [r3, #0]
   17e8c:	1c5a      	adds	r2, r3, #1
   17e8e:	4b4e      	ldr	r3, [pc, #312]	; (17fc8 <prvTraceGetObjectHandle+0x188>)
   17e90:	601a      	str	r2, [r3, #0]
	indexOfHandle = objectHandleStacks.indexOfNextAvailableHandle[objectclass];
   17e92:	1dfb      	adds	r3, r7, #7
   17e94:	781a      	ldrb	r2, [r3, #0]
   17e96:	4b4d      	ldr	r3, [pc, #308]	; (17fcc <prvTraceGetObjectHandle+0x18c>)
   17e98:	0052      	lsls	r2, r2, #1
   17e9a:	5ad3      	ldrh	r3, [r2, r3]
   17e9c:	001a      	movs	r2, r3
   17e9e:	4b4c      	ldr	r3, [pc, #304]	; (17fd0 <prvTraceGetObjectHandle+0x190>)
   17ea0:	601a      	str	r2, [r3, #0]
	if (objectHandleStacks.objectHandles[indexOfHandle] == 0)
   17ea2:	4b4b      	ldr	r3, [pc, #300]	; (17fd0 <prvTraceGetObjectHandle+0x190>)
   17ea4:	681b      	ldr	r3, [r3, #0]
   17ea6:	4a49      	ldr	r2, [pc, #292]	; (17fcc <prvTraceGetObjectHandle+0x18c>)
   17ea8:	2148      	movs	r1, #72	; 0x48
   17eaa:	18d3      	adds	r3, r2, r3
   17eac:	185b      	adds	r3, r3, r1
   17eae:	781b      	ldrb	r3, [r3, #0]
   17eb0:	2b00      	cmp	r3, #0
   17eb2:	d117      	bne.n	17ee4 <prvTraceGetObjectHandle+0xa4>
	{
		/* Zero is used to indicate a never before used handle, i.e.,
			new slots in the handle stack. The handle slot needs to
			be initialized here (starts at 1). */
		objectHandleStacks.objectHandles[indexOfHandle] =
   17eb4:	4b46      	ldr	r3, [pc, #280]	; (17fd0 <prvTraceGetObjectHandle+0x190>)
   17eb6:	681a      	ldr	r2, [r3, #0]
			(traceHandle)(1 + indexOfHandle -
   17eb8:	4b45      	ldr	r3, [pc, #276]	; (17fd0 <prvTraceGetObjectHandle+0x190>)
   17eba:	681b      	ldr	r3, [r3, #0]
   17ebc:	b2d9      	uxtb	r1, r3
			objectHandleStacks.lowestIndexOfClass[objectclass]);
   17ebe:	1dfb      	adds	r3, r7, #7
   17ec0:	781b      	ldrb	r3, [r3, #0]
   17ec2:	4842      	ldr	r0, [pc, #264]	; (17fcc <prvTraceGetObjectHandle+0x18c>)
   17ec4:	3308      	adds	r3, #8
   17ec6:	005b      	lsls	r3, r3, #1
   17ec8:	18c3      	adds	r3, r0, r3
   17eca:	3302      	adds	r3, #2
   17ecc:	881b      	ldrh	r3, [r3, #0]
			(traceHandle)(1 + indexOfHandle -
   17ece:	b2db      	uxtb	r3, r3
   17ed0:	1acb      	subs	r3, r1, r3
   17ed2:	b2db      	uxtb	r3, r3
   17ed4:	3301      	adds	r3, #1
   17ed6:	b2d8      	uxtb	r0, r3
		objectHandleStacks.objectHandles[indexOfHandle] =
   17ed8:	4b3c      	ldr	r3, [pc, #240]	; (17fcc <prvTraceGetObjectHandle+0x18c>)
   17eda:	2148      	movs	r1, #72	; 0x48
   17edc:	189b      	adds	r3, r3, r2
   17ede:	185b      	adds	r3, r3, r1
   17ee0:	1c02      	adds	r2, r0, #0
   17ee2:	701a      	strb	r2, [r3, #0]
	}

	handle = objectHandleStacks.objectHandles[indexOfHandle];
   17ee4:	4b3a      	ldr	r3, [pc, #232]	; (17fd0 <prvTraceGetObjectHandle+0x190>)
   17ee6:	681a      	ldr	r2, [r3, #0]
   17ee8:	231f      	movs	r3, #31
   17eea:	18fb      	adds	r3, r7, r3
   17eec:	4937      	ldr	r1, [pc, #220]	; (17fcc <prvTraceGetObjectHandle+0x18c>)
   17eee:	2048      	movs	r0, #72	; 0x48
   17ef0:	188a      	adds	r2, r1, r2
   17ef2:	1812      	adds	r2, r2, r0
   17ef4:	7812      	ldrb	r2, [r2, #0]
   17ef6:	701a      	strb	r2, [r3, #0]

	if (objectHandleStacks.indexOfNextAvailableHandle[objectclass]
   17ef8:	1dfb      	adds	r3, r7, #7
   17efa:	781a      	ldrb	r2, [r3, #0]
   17efc:	4b33      	ldr	r3, [pc, #204]	; (17fcc <prvTraceGetObjectHandle+0x18c>)
   17efe:	0052      	lsls	r2, r2, #1
   17f00:	5ad2      	ldrh	r2, [r2, r3]
		> objectHandleStacks.highestIndexOfClass[objectclass])
   17f02:	1dfb      	adds	r3, r7, #7
   17f04:	781b      	ldrb	r3, [r3, #0]
   17f06:	4931      	ldr	r1, [pc, #196]	; (17fcc <prvTraceGetObjectHandle+0x18c>)
   17f08:	3310      	adds	r3, #16
   17f0a:	005b      	lsls	r3, r3, #1
   17f0c:	18cb      	adds	r3, r1, r3
   17f0e:	3304      	adds	r3, #4
   17f10:	881b      	ldrh	r3, [r3, #0]
	if (objectHandleStacks.indexOfNextAvailableHandle[objectclass]
   17f12:	429a      	cmp	r2, r3
   17f14:	d90d      	bls.n	17f32 <prvTraceGetObjectHandle+0xf2>
	{
		prvTraceError(pszTraceGetErrorNotEnoughHandles(objectclass));
   17f16:	1dfb      	adds	r3, r7, #7
   17f18:	781b      	ldrb	r3, [r3, #0]
   17f1a:	0018      	movs	r0, r3
   17f1c:	4b2d      	ldr	r3, [pc, #180]	; (17fd4 <prvTraceGetObjectHandle+0x194>)
   17f1e:	4798      	blx	r3
   17f20:	0003      	movs	r3, r0
   17f22:	0018      	movs	r0, r3
   17f24:	4b26      	ldr	r3, [pc, #152]	; (17fc0 <prvTraceGetObjectHandle+0x180>)
   17f26:	4798      	blx	r3
		handle = 0;
   17f28:	231f      	movs	r3, #31
   17f2a:	18fb      	adds	r3, r7, r3
   17f2c:	2200      	movs	r2, #0
   17f2e:	701a      	strb	r2, [r3, #0]
   17f30:	e031      	b.n	17f96 <prvTraceGetObjectHandle+0x156>
	}
	else
	{
		int hndCount;
		objectHandleStacks.indexOfNextAvailableHandle[objectclass]++;
   17f32:	1dfb      	adds	r3, r7, #7
   17f34:	781b      	ldrb	r3, [r3, #0]
   17f36:	4a25      	ldr	r2, [pc, #148]	; (17fcc <prvTraceGetObjectHandle+0x18c>)
   17f38:	0059      	lsls	r1, r3, #1
   17f3a:	5a8a      	ldrh	r2, [r1, r2]
   17f3c:	3201      	adds	r2, #1
   17f3e:	b291      	uxth	r1, r2
   17f40:	4a22      	ldr	r2, [pc, #136]	; (17fcc <prvTraceGetObjectHandle+0x18c>)
   17f42:	005b      	lsls	r3, r3, #1
   17f44:	5299      	strh	r1, [r3, r2]

		hndCount = objectHandleStacks.indexOfNextAvailableHandle[objectclass] -
   17f46:	1dfb      	adds	r3, r7, #7
   17f48:	781a      	ldrb	r2, [r3, #0]
   17f4a:	4b20      	ldr	r3, [pc, #128]	; (17fcc <prvTraceGetObjectHandle+0x18c>)
   17f4c:	0052      	lsls	r2, r2, #1
   17f4e:	5ad3      	ldrh	r3, [r2, r3]
   17f50:	0019      	movs	r1, r3
			objectHandleStacks.lowestIndexOfClass[objectclass];
   17f52:	1dfb      	adds	r3, r7, #7
   17f54:	781b      	ldrb	r3, [r3, #0]
   17f56:	4a1d      	ldr	r2, [pc, #116]	; (17fcc <prvTraceGetObjectHandle+0x18c>)
   17f58:	3308      	adds	r3, #8
   17f5a:	005b      	lsls	r3, r3, #1
   17f5c:	18d3      	adds	r3, r2, r3
   17f5e:	3302      	adds	r3, #2
   17f60:	881b      	ldrh	r3, [r3, #0]
		hndCount = objectHandleStacks.indexOfNextAvailableHandle[objectclass] -
   17f62:	1acb      	subs	r3, r1, r3
   17f64:	617b      	str	r3, [r7, #20]

		if (hndCount >
			objectHandleStacks.handleCountWaterMarksOfClass[objectclass])
   17f66:	1dfb      	adds	r3, r7, #7
   17f68:	781b      	ldrb	r3, [r3, #0]
   17f6a:	4a18      	ldr	r2, [pc, #96]	; (17fcc <prvTraceGetObjectHandle+0x18c>)
   17f6c:	3318      	adds	r3, #24
   17f6e:	005b      	lsls	r3, r3, #1
   17f70:	18d3      	adds	r3, r2, r3
   17f72:	3306      	adds	r3, #6
   17f74:	881b      	ldrh	r3, [r3, #0]
   17f76:	001a      	movs	r2, r3
		if (hndCount >
   17f78:	697b      	ldr	r3, [r7, #20]
   17f7a:	429a      	cmp	r2, r3
   17f7c:	da0b      	bge.n	17f96 <prvTraceGetObjectHandle+0x156>
		{
			objectHandleStacks.handleCountWaterMarksOfClass[objectclass] =
   17f7e:	1dfb      	adds	r3, r7, #7
   17f80:	781b      	ldrb	r3, [r3, #0]
				(traceHandle)hndCount;
   17f82:	697a      	ldr	r2, [r7, #20]
   17f84:	b2d2      	uxtb	r2, r2
   17f86:	b291      	uxth	r1, r2
			objectHandleStacks.handleCountWaterMarksOfClass[objectclass] =
   17f88:	4a10      	ldr	r2, [pc, #64]	; (17fcc <prvTraceGetObjectHandle+0x18c>)
   17f8a:	3318      	adds	r3, #24
   17f8c:	005b      	lsls	r3, r3, #1
   17f8e:	18d3      	adds	r3, r2, r3
   17f90:	3306      	adds	r3, #6
   17f92:	1c0a      	adds	r2, r1, #0
   17f94:	801a      	strh	r2, [r3, #0]
		}
	}
	trcCRITICAL_SECTION_END();
   17f96:	4b0c      	ldr	r3, [pc, #48]	; (17fc8 <prvTraceGetObjectHandle+0x188>)
   17f98:	681b      	ldr	r3, [r3, #0]
   17f9a:	1e5a      	subs	r2, r3, #1
   17f9c:	4b0a      	ldr	r3, [pc, #40]	; (17fc8 <prvTraceGetObjectHandle+0x188>)
   17f9e:	601a      	str	r2, [r3, #0]
   17fa0:	69bb      	ldr	r3, [r7, #24]
   17fa2:	60bb      	str	r3, [r7, #8]
   17fa4:	68bb      	ldr	r3, [r7, #8]
   17fa6:	f383 8810 	msr	PRIMASK, r3

	return handle;
   17faa:	231f      	movs	r3, #31
   17fac:	18fb      	adds	r3, r7, r3
   17fae:	781b      	ldrb	r3, [r3, #0]
}
   17fb0:	0018      	movs	r0, r3
   17fb2:	46bd      	mov	sp, r7
   17fb4:	b008      	add	sp, #32
   17fb6:	bd80      	pop	{r7, pc}
   17fb8:	20000c78 	.word	0x20000c78
   17fbc:	0003568c 	.word	0x0003568c
   17fc0:	0001815d 	.word	0x0001815d
   17fc4:	0003626c 	.word	0x0003626c
   17fc8:	20000bd0 	.word	0x20000bd0
   17fcc:	20000be8 	.word	0x20000be8
   17fd0:	20000c7c 	.word	0x20000c7c
   17fd4:	00016e7d 	.word	0x00016e7d

00017fd8 <prvMarkObjectAsUsed>:
 * Sets an "is used flag" on object creation, using the first byte of the name
 * field. This allows for counting the number of used Object Table slots, even
 * if no names have been set.
 ******************************************************************************/
void prvMarkObjectAsUsed(traceObjectClass objectclass, traceHandle handle)
{
   17fd8:	b590      	push	{r4, r7, lr}
   17fda:	b085      	sub	sp, #20
   17fdc:	af00      	add	r7, sp, #0
   17fde:	0002      	movs	r2, r0
   17fe0:	1dfb      	adds	r3, r7, #7
   17fe2:	701a      	strb	r2, [r3, #0]
   17fe4:	1dbb      	adds	r3, r7, #6
   17fe6:	1c0a      	adds	r2, r1, #0
   17fe8:	701a      	strb	r2, [r3, #0]
	uint16_t idx = uiIndexOfObject(handle, objectclass);
   17fea:	230e      	movs	r3, #14
   17fec:	18fc      	adds	r4, r7, r3
   17fee:	1dfb      	adds	r3, r7, #7
   17ff0:	781a      	ldrb	r2, [r3, #0]
   17ff2:	1dbb      	adds	r3, r7, #6
   17ff4:	781b      	ldrb	r3, [r3, #0]
   17ff6:	0011      	movs	r1, r2
   17ff8:	0018      	movs	r0, r3
   17ffa:	4b09      	ldr	r3, [pc, #36]	; (18020 <prvMarkObjectAsUsed+0x48>)
   17ffc:	4798      	blx	r3
   17ffe:	0003      	movs	r3, r0
   18000:	8023      	strh	r3, [r4, #0]
	RecorderDataPtr->ObjectPropertyTable.objbytes[idx] = 1;
   18002:	4b08      	ldr	r3, [pc, #32]	; (18024 <prvMarkObjectAsUsed+0x4c>)
   18004:	681a      	ldr	r2, [r3, #0]
   18006:	230e      	movs	r3, #14
   18008:	18fb      	adds	r3, r7, r3
   1800a:	881b      	ldrh	r3, [r3, #0]
   1800c:	219c      	movs	r1, #156	; 0x9c
   1800e:	18d3      	adds	r3, r2, r3
   18010:	185b      	adds	r3, r3, r1
   18012:	2201      	movs	r2, #1
   18014:	701a      	strb	r2, [r3, #0]
}
   18016:	46c0      	nop			; (mov r8, r8)
   18018:	46bd      	mov	sp, r7
   1801a:	b005      	add	sp, #20
   1801c:	bd90      	pop	{r4, r7, pc}
   1801e:	46c0      	nop			; (mov r8, r8)
   18020:	00017d69 	.word	0x00017d69
   18024:	20000c78 	.word	0x20000c78

00018028 <prvStrncpy>:
 * prvStrncpy
 *
 * Private string copy function, to improve portability between compilers.
 ******************************************************************************/
static void prvStrncpy(char* dst, const char* src, uint32_t maxLength)
{
   18028:	b580      	push	{r7, lr}
   1802a:	b086      	sub	sp, #24
   1802c:	af00      	add	r7, sp, #0
   1802e:	60f8      	str	r0, [r7, #12]
   18030:	60b9      	str	r1, [r7, #8]
   18032:	607a      	str	r2, [r7, #4]
	uint32_t i;
	for (i = 0; i < maxLength; i++)
   18034:	2300      	movs	r3, #0
   18036:	617b      	str	r3, [r7, #20]
   18038:	e010      	b.n	1805c <prvStrncpy+0x34>
	{
		dst[i] = src[i];
   1803a:	68fa      	ldr	r2, [r7, #12]
   1803c:	697b      	ldr	r3, [r7, #20]
   1803e:	18d3      	adds	r3, r2, r3
   18040:	68b9      	ldr	r1, [r7, #8]
   18042:	697a      	ldr	r2, [r7, #20]
   18044:	188a      	adds	r2, r1, r2
   18046:	7812      	ldrb	r2, [r2, #0]
   18048:	701a      	strb	r2, [r3, #0]
		if (src[i] == 0)
   1804a:	68ba      	ldr	r2, [r7, #8]
   1804c:	697b      	ldr	r3, [r7, #20]
   1804e:	18d3      	adds	r3, r2, r3
   18050:	781b      	ldrb	r3, [r3, #0]
   18052:	2b00      	cmp	r3, #0
   18054:	d007      	beq.n	18066 <prvStrncpy+0x3e>
	for (i = 0; i < maxLength; i++)
   18056:	697b      	ldr	r3, [r7, #20]
   18058:	3301      	adds	r3, #1
   1805a:	617b      	str	r3, [r7, #20]
   1805c:	697a      	ldr	r2, [r7, #20]
   1805e:	687b      	ldr	r3, [r7, #4]
   18060:	429a      	cmp	r2, r3
   18062:	d3ea      	bcc.n	1803a <prvStrncpy+0x12>
			break;
	}
}
   18064:	e000      	b.n	18068 <prvStrncpy+0x40>
			break;
   18066:	46c0      	nop			; (mov r8, r8)
}
   18068:	46c0      	nop			; (mov r8, r8)
   1806a:	46bd      	mov	sp, r7
   1806c:	b006      	add	sp, #24
   1806e:	bd80      	pop	{r7, pc}

00018070 <prvTraceSetObjectName>:
 * recorder's Object Property Table, at the given handle and object class.
 ******************************************************************************/
void prvTraceSetObjectName(traceObjectClass objectclass,
						 traceHandle handle,
						 const char* name)
{
   18070:	b580      	push	{r7, lr}
   18072:	b082      	sub	sp, #8
   18074:	af00      	add	r7, sp, #0
   18076:	603a      	str	r2, [r7, #0]
   18078:	1dfb      	adds	r3, r7, #7
   1807a:	1c02      	adds	r2, r0, #0
   1807c:	701a      	strb	r2, [r3, #0]
   1807e:	1dbb      	adds	r3, r7, #6
   18080:	1c0a      	adds	r2, r1, #0
   18082:	701a      	strb	r2, [r3, #0]
	static uint16_t idx;

	TRACE_ASSERT(name != NULL, "prvTraceSetObjectName: name == NULL", TRC_UNUSED);
   18084:	683b      	ldr	r3, [r7, #0]
   18086:	2b00      	cmp	r3, #0
   18088:	d104      	bne.n	18094 <prvTraceSetObjectName+0x24>
   1808a:	4b2a      	ldr	r3, [pc, #168]	; (18134 <prvTraceSetObjectName+0xc4>)
   1808c:	0018      	movs	r0, r3
   1808e:	4b2a      	ldr	r3, [pc, #168]	; (18138 <prvTraceSetObjectName+0xc8>)
   18090:	4798      	blx	r3
   18092:	e04b      	b.n	1812c <prvTraceSetObjectName+0xbc>

	if (objectclass >= TRACE_NCLASSES)
   18094:	1dfb      	adds	r3, r7, #7
   18096:	781b      	ldrb	r3, [r3, #0]
   18098:	2b08      	cmp	r3, #8
   1809a:	d904      	bls.n	180a6 <prvTraceSetObjectName+0x36>
	{
		prvTraceError("Illegal object class in prvTraceSetObjectName");
   1809c:	4b27      	ldr	r3, [pc, #156]	; (1813c <prvTraceSetObjectName+0xcc>)
   1809e:	0018      	movs	r0, r3
   180a0:	4b25      	ldr	r3, [pc, #148]	; (18138 <prvTraceSetObjectName+0xc8>)
   180a2:	4798      	blx	r3
		return;
   180a4:	e042      	b.n	1812c <prvTraceSetObjectName+0xbc>
	}

	if (handle == 0)
   180a6:	1dbb      	adds	r3, r7, #6
   180a8:	781b      	ldrb	r3, [r3, #0]
   180aa:	2b00      	cmp	r3, #0
   180ac:	d104      	bne.n	180b8 <prvTraceSetObjectName+0x48>
	{
		prvTraceError("Illegal handle (0) in prvTraceSetObjectName.");
   180ae:	4b24      	ldr	r3, [pc, #144]	; (18140 <prvTraceSetObjectName+0xd0>)
   180b0:	0018      	movs	r0, r3
   180b2:	4b21      	ldr	r3, [pc, #132]	; (18138 <prvTraceSetObjectName+0xc8>)
   180b4:	4798      	blx	r3
		return;
   180b6:	e039      	b.n	1812c <prvTraceSetObjectName+0xbc>
	}

	if (handle > RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[objectclass])
   180b8:	4b22      	ldr	r3, [pc, #136]	; (18144 <prvTraceSetObjectName+0xd4>)
   180ba:	681a      	ldr	r2, [r3, #0]
   180bc:	1dfb      	adds	r3, r7, #7
   180be:	781b      	ldrb	r3, [r3, #0]
   180c0:	2164      	movs	r1, #100	; 0x64
   180c2:	18d3      	adds	r3, r2, r3
   180c4:	185b      	adds	r3, r3, r1
   180c6:	781b      	ldrb	r3, [r3, #0]
   180c8:	1dba      	adds	r2, r7, #6
   180ca:	7812      	ldrb	r2, [r2, #0]
   180cc:	429a      	cmp	r2, r3
   180ce:	d909      	bls.n	180e4 <prvTraceSetObjectName+0x74>
	{
		/* ERROR */
		prvTraceError(pszTraceGetErrorNotEnoughHandles(objectclass));
   180d0:	1dfb      	adds	r3, r7, #7
   180d2:	781b      	ldrb	r3, [r3, #0]
   180d4:	0018      	movs	r0, r3
   180d6:	4b1c      	ldr	r3, [pc, #112]	; (18148 <prvTraceSetObjectName+0xd8>)
   180d8:	4798      	blx	r3
   180da:	0003      	movs	r3, r0
   180dc:	0018      	movs	r0, r3
   180de:	4b16      	ldr	r3, [pc, #88]	; (18138 <prvTraceSetObjectName+0xc8>)
   180e0:	4798      	blx	r3
   180e2:	e023      	b.n	1812c <prvTraceSetObjectName+0xbc>
	}
	else
	{
		idx = uiIndexOfObject(handle, objectclass);
   180e4:	1dfb      	adds	r3, r7, #7
   180e6:	781a      	ldrb	r2, [r3, #0]
   180e8:	1dbb      	adds	r3, r7, #6
   180ea:	781b      	ldrb	r3, [r3, #0]
   180ec:	0011      	movs	r1, r2
   180ee:	0018      	movs	r0, r3
   180f0:	4b16      	ldr	r3, [pc, #88]	; (1814c <prvTraceSetObjectName+0xdc>)
   180f2:	4798      	blx	r3
   180f4:	0003      	movs	r3, r0
   180f6:	001a      	movs	r2, r3
   180f8:	4b15      	ldr	r3, [pc, #84]	; (18150 <prvTraceSetObjectName+0xe0>)
   180fa:	801a      	strh	r2, [r3, #0]

		if (traceErrorMessage == NULL)
   180fc:	4b15      	ldr	r3, [pc, #84]	; (18154 <prvTraceSetObjectName+0xe4>)
   180fe:	681b      	ldr	r3, [r3, #0]
   18100:	2b00      	cmp	r3, #0
   18102:	d113      	bne.n	1812c <prvTraceSetObjectName+0xbc>
		{
			prvStrncpy((char*)&(RecorderDataPtr->ObjectPropertyTable.objbytes[idx]),
   18104:	4b0f      	ldr	r3, [pc, #60]	; (18144 <prvTraceSetObjectName+0xd4>)
   18106:	681a      	ldr	r2, [r3, #0]
   18108:	4b11      	ldr	r3, [pc, #68]	; (18150 <prvTraceSetObjectName+0xe0>)
   1810a:	881b      	ldrh	r3, [r3, #0]
   1810c:	3398      	adds	r3, #152	; 0x98
   1810e:	18d3      	adds	r3, r2, r3
   18110:	1d18      	adds	r0, r3, #4
				name,
				RecorderDataPtr->ObjectPropertyTable.NameLengthPerClass[ objectclass ]);
   18112:	4b0c      	ldr	r3, [pc, #48]	; (18144 <prvTraceSetObjectName+0xd4>)
   18114:	681a      	ldr	r2, [r3, #0]
   18116:	1dfb      	adds	r3, r7, #7
   18118:	781b      	ldrb	r3, [r3, #0]
   1811a:	2170      	movs	r1, #112	; 0x70
   1811c:	18d3      	adds	r3, r2, r3
   1811e:	185b      	adds	r3, r3, r1
   18120:	781b      	ldrb	r3, [r3, #0]
			prvStrncpy((char*)&(RecorderDataPtr->ObjectPropertyTable.objbytes[idx]),
   18122:	001a      	movs	r2, r3
   18124:	683b      	ldr	r3, [r7, #0]
   18126:	0019      	movs	r1, r3
   18128:	4b0b      	ldr	r3, [pc, #44]	; (18158 <prvTraceSetObjectName+0xe8>)
   1812a:	4798      	blx	r3
		}
	}
}
   1812c:	46bd      	mov	sp, r7
   1812e:	b002      	add	sp, #8
   18130:	bd80      	pop	{r7, pc}
   18132:	46c0      	nop			; (mov r8, r8)
   18134:	00036370 	.word	0x00036370
   18138:	0001815d 	.word	0x0001815d
   1813c:	000363a4 	.word	0x000363a4
   18140:	000363d4 	.word	0x000363d4
   18144:	20000c78 	.word	0x20000c78
   18148:	00016e7d 	.word	0x00016e7d
   1814c:	00017d69 	.word	0x00017d69
   18150:	20000c80 	.word	0x20000c80
   18154:	20000bd8 	.word	0x20000bd8
   18158:	00018029 	.word	0x00018029

0001815c <prvTraceError>:
 * Note: If a recorder error is registered before vTraceStart is called, the
 * trace start will be aborted. This can occur if any of the Nxxxx constants
 * (e.g., TRC_CFG_NTASK) in trcConfig.h is too small.
 ******************************************************************************/
void prvTraceError(const char* msg)
{
   1815c:	b580      	push	{r7, lr}
   1815e:	b082      	sub	sp, #8
   18160:	af00      	add	r7, sp, #0
   18162:	6078      	str	r0, [r7, #4]
	/* Stop the recorder */
	if (RecorderDataPtr != NULL)
   18164:	4b11      	ldr	r3, [pc, #68]	; (181ac <prvTraceError+0x50>)
   18166:	681b      	ldr	r3, [r3, #0]
   18168:	2b00      	cmp	r3, #0
   1816a:	d001      	beq.n	18170 <prvTraceError+0x14>
	{
		vTraceStop();
   1816c:	4b10      	ldr	r3, [pc, #64]	; (181b0 <prvTraceError+0x54>)
   1816e:	4798      	blx	r3
	}

	/* If first error only... */
	if (traceErrorMessage == NULL)
   18170:	4b10      	ldr	r3, [pc, #64]	; (181b4 <prvTraceError+0x58>)
   18172:	681b      	ldr	r3, [r3, #0]
   18174:	2b00      	cmp	r3, #0
   18176:	d115      	bne.n	181a4 <prvTraceError+0x48>
	{
		traceErrorMessage = (char*)(intptr_t) msg;
   18178:	4b0e      	ldr	r3, [pc, #56]	; (181b4 <prvTraceError+0x58>)
   1817a:	687a      	ldr	r2, [r7, #4]
   1817c:	601a      	str	r2, [r3, #0]
		if (RecorderDataPtr != NULL)
   1817e:	4b0b      	ldr	r3, [pc, #44]	; (181ac <prvTraceError+0x50>)
   18180:	681b      	ldr	r3, [r3, #0]
   18182:	2b00      	cmp	r3, #0
   18184:	d00e      	beq.n	181a4 <prvTraceError+0x48>
		{
			prvStrncpy(RecorderDataPtr->systemInfo, traceErrorMessage, 80);
   18186:	4b09      	ldr	r3, [pc, #36]	; (181ac <prvTraceError+0x50>)
   18188:	681b      	ldr	r3, [r3, #0]
   1818a:	4a0b      	ldr	r2, [pc, #44]	; (181b8 <prvTraceError+0x5c>)
   1818c:	1898      	adds	r0, r3, r2
   1818e:	4b09      	ldr	r3, [pc, #36]	; (181b4 <prvTraceError+0x58>)
   18190:	681b      	ldr	r3, [r3, #0]
   18192:	2250      	movs	r2, #80	; 0x50
   18194:	0019      	movs	r1, r3
   18196:	4b09      	ldr	r3, [pc, #36]	; (181bc <prvTraceError+0x60>)
   18198:	4798      	blx	r3
			RecorderDataPtr->internalErrorOccured = 1;
   1819a:	4b04      	ldr	r3, [pc, #16]	; (181ac <prvTraceError+0x50>)
   1819c:	681b      	ldr	r3, [r3, #0]
   1819e:	4a08      	ldr	r2, [pc, #32]	; (181c0 <prvTraceError+0x64>)
   181a0:	2101      	movs	r1, #1
   181a2:	5099      	str	r1, [r3, r2]
		}
	}
}
   181a4:	46c0      	nop			; (mov r8, r8)
   181a6:	46bd      	mov	sp, r7
   181a8:	b002      	add	sp, #8
   181aa:	bd80      	pop	{r7, pc}
   181ac:	20000c78 	.word	0x20000c78
   181b0:	00017021 	.word	0x00017021
   181b4:	20000bd8 	.word	0x20000bd8
   181b8:	000006bc 	.word	0x000006bc
   181bc:	00018029 	.word	0x00018029
   181c0:	000006b4 	.word	0x000006b4

000181c4 <prvCheckDataToBeOverwrittenForMultiEntryEvents>:
 * This is assumed to execute within a critical section...
 *****************************************************************************/

#if (TRC_CFG_SNAPSHOT_MODE == TRC_SNAPSHOT_MODE_RING_BUFFER)
void prvCheckDataToBeOverwrittenForMultiEntryEvents(uint8_t nofEntriesToCheck)
{
   181c4:	b580      	push	{r7, lr}
   181c6:	b086      	sub	sp, #24
   181c8:	af00      	add	r7, sp, #0
   181ca:	0002      	movs	r2, r0
   181cc:	1dfb      	adds	r3, r7, #7
   181ce:	701a      	strb	r2, [r3, #0]
	/* Generic "int" type is desired - should be 16 bit variable on 16 bit HW */
	unsigned int i = 0;
   181d0:	2300      	movs	r3, #0
   181d2:	617b      	str	r3, [r7, #20]
	unsigned int e = 0;
   181d4:	2300      	movs	r3, #0
   181d6:	613b      	str	r3, [r7, #16]

	TRACE_ASSERT(nofEntriesToCheck != 0, 
   181d8:	1dfb      	adds	r3, r7, #7
   181da:	781b      	ldrb	r3, [r3, #0]
   181dc:	2b00      	cmp	r3, #0
   181de:	d000      	beq.n	181e2 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x1e>
   181e0:	e089      	b.n	182f6 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x132>
   181e2:	4b49      	ldr	r3, [pc, #292]	; (18308 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x144>)
   181e4:	0018      	movs	r0, r3
   181e6:	4b49      	ldr	r3, [pc, #292]	; (1830c <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x148>)
   181e8:	4798      	blx	r3
   181ea:	e08a      	b.n	18302 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x13e>
		"prvCheckDataToBeOverwrittenForMultiEntryEvents: nofEntriesToCheck == 0", TRC_UNUSED);

	while (i < nofEntriesToCheck)
	{
		e = RecorderDataPtr->nextFreeIndex + i;
   181ec:	4b48      	ldr	r3, [pc, #288]	; (18310 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x14c>)
   181ee:	681b      	ldr	r3, [r3, #0]
   181f0:	69da      	ldr	r2, [r3, #28]
   181f2:	697b      	ldr	r3, [r7, #20]
   181f4:	18d3      	adds	r3, r2, r3
   181f6:	613b      	str	r3, [r7, #16]
		if ((RecorderDataPtr->eventData[e*4] > USER_EVENT) &&
   181f8:	4b45      	ldr	r3, [pc, #276]	; (18310 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x14c>)
   181fa:	6819      	ldr	r1, [r3, #0]
   181fc:	693b      	ldr	r3, [r7, #16]
   181fe:	009a      	lsls	r2, r3, #2
   18200:	23e2      	movs	r3, #226	; 0xe2
   18202:	00db      	lsls	r3, r3, #3
   18204:	188a      	adds	r2, r1, r2
   18206:	18d3      	adds	r3, r2, r3
   18208:	781b      	ldrb	r3, [r3, #0]
   1820a:	2b98      	cmp	r3, #152	; 0x98
   1820c:	d934      	bls.n	18278 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0xb4>
			(RecorderDataPtr->eventData[e*4] < USER_EVENT + 16))
   1820e:	4b40      	ldr	r3, [pc, #256]	; (18310 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x14c>)
   18210:	6819      	ldr	r1, [r3, #0]
   18212:	693b      	ldr	r3, [r7, #16]
   18214:	009a      	lsls	r2, r3, #2
   18216:	23e2      	movs	r3, #226	; 0xe2
   18218:	00db      	lsls	r3, r3, #3
   1821a:	188a      	adds	r2, r1, r2
   1821c:	18d3      	adds	r3, r2, r3
   1821e:	781b      	ldrb	r3, [r3, #0]
		if ((RecorderDataPtr->eventData[e*4] > USER_EVENT) &&
   18220:	2ba7      	cmp	r3, #167	; 0xa7
   18222:	d829      	bhi.n	18278 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0xb4>
		{
			uint8_t nDataEvents = (uint8_t)(RecorderDataPtr->eventData[e*4] - USER_EVENT);
   18224:	4b3a      	ldr	r3, [pc, #232]	; (18310 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x14c>)
   18226:	6819      	ldr	r1, [r3, #0]
   18228:	693b      	ldr	r3, [r7, #16]
   1822a:	009a      	lsls	r2, r3, #2
   1822c:	23e2      	movs	r3, #226	; 0xe2
   1822e:	00db      	lsls	r3, r3, #3
   18230:	188a      	adds	r2, r1, r2
   18232:	18d3      	adds	r3, r2, r3
   18234:	781a      	ldrb	r2, [r3, #0]
   18236:	230f      	movs	r3, #15
   18238:	18fb      	adds	r3, r7, r3
   1823a:	3268      	adds	r2, #104	; 0x68
   1823c:	701a      	strb	r2, [r3, #0]
			if ((e + nDataEvents) < RecorderDataPtr->maxEvents)
   1823e:	230f      	movs	r3, #15
   18240:	18fb      	adds	r3, r7, r3
   18242:	781a      	ldrb	r2, [r3, #0]
   18244:	693b      	ldr	r3, [r7, #16]
   18246:	18d2      	adds	r2, r2, r3
   18248:	4b31      	ldr	r3, [pc, #196]	; (18310 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x14c>)
   1824a:	681b      	ldr	r3, [r3, #0]
   1824c:	699b      	ldr	r3, [r3, #24]
   1824e:	429a      	cmp	r2, r3
   18250:	d24d      	bcs.n	182ee <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x12a>
			{
				(void)memset(& RecorderDataPtr->eventData[e*4], 0, (size_t) (4 + 4 * nDataEvents));
   18252:	4b2f      	ldr	r3, [pc, #188]	; (18310 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x14c>)
   18254:	681a      	ldr	r2, [r3, #0]
   18256:	693b      	ldr	r3, [r7, #16]
   18258:	009b      	lsls	r3, r3, #2
   1825a:	21e2      	movs	r1, #226	; 0xe2
   1825c:	00c9      	lsls	r1, r1, #3
   1825e:	468c      	mov	ip, r1
   18260:	4463      	add	r3, ip
   18262:	18d0      	adds	r0, r2, r3
   18264:	230f      	movs	r3, #15
   18266:	18fb      	adds	r3, r7, r3
   18268:	781b      	ldrb	r3, [r3, #0]
   1826a:	3301      	adds	r3, #1
   1826c:	009b      	lsls	r3, r3, #2
   1826e:	001a      	movs	r2, r3
   18270:	2100      	movs	r1, #0
   18272:	4b28      	ldr	r3, [pc, #160]	; (18314 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x150>)
   18274:	4798      	blx	r3
		{
   18276:	e03a      	b.n	182ee <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x12a>
			}
		}
		else if (RecorderDataPtr->eventData[e*4] == DIV_XPS)
   18278:	4b25      	ldr	r3, [pc, #148]	; (18310 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x14c>)
   1827a:	6819      	ldr	r1, [r3, #0]
   1827c:	693b      	ldr	r3, [r7, #16]
   1827e:	009a      	lsls	r2, r3, #2
   18280:	23e2      	movs	r3, #226	; 0xe2
   18282:	00db      	lsls	r3, r3, #3
   18284:	188a      	adds	r2, r1, r2
   18286:	18d3      	adds	r3, r2, r3
   18288:	781b      	ldrb	r3, [r3, #0]
   1828a:	2b01      	cmp	r3, #1
   1828c:	d130      	bne.n	182f0 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x12c>
		{
			if ((e + 1) < RecorderDataPtr->maxEvents)
   1828e:	693b      	ldr	r3, [r7, #16]
   18290:	1c5a      	adds	r2, r3, #1
   18292:	4b1f      	ldr	r3, [pc, #124]	; (18310 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x14c>)
   18294:	681b      	ldr	r3, [r3, #0]
   18296:	699b      	ldr	r3, [r3, #24]
   18298:	429a      	cmp	r2, r3
   1829a:	d20e      	bcs.n	182ba <prvCheckDataToBeOverwrittenForMultiEntryEvents+0xf6>
			{
				/* Clear 8 bytes */
				(void)memset(& RecorderDataPtr->eventData[e*4], 0, 4 + 4);
   1829c:	4b1c      	ldr	r3, [pc, #112]	; (18310 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x14c>)
   1829e:	681a      	ldr	r2, [r3, #0]
   182a0:	693b      	ldr	r3, [r7, #16]
   182a2:	009b      	lsls	r3, r3, #2
   182a4:	21e2      	movs	r1, #226	; 0xe2
   182a6:	00c9      	lsls	r1, r1, #3
   182a8:	468c      	mov	ip, r1
   182aa:	4463      	add	r3, ip
   182ac:	18d3      	adds	r3, r2, r3
   182ae:	2208      	movs	r2, #8
   182b0:	2100      	movs	r1, #0
   182b2:	0018      	movs	r0, r3
   182b4:	4b17      	ldr	r3, [pc, #92]	; (18314 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x150>)
   182b6:	4798      	blx	r3
   182b8:	e01a      	b.n	182f0 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x12c>
			}
			else
			{
				/* Clear 8 bytes, 4 first and 4 last */
				(void)memset(& RecorderDataPtr->eventData[0], 0, 4);
   182ba:	4b15      	ldr	r3, [pc, #84]	; (18310 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x14c>)
   182bc:	681b      	ldr	r3, [r3, #0]
   182be:	22e2      	movs	r2, #226	; 0xe2
   182c0:	00d2      	lsls	r2, r2, #3
   182c2:	4694      	mov	ip, r2
   182c4:	4463      	add	r3, ip
   182c6:	2204      	movs	r2, #4
   182c8:	2100      	movs	r1, #0
   182ca:	0018      	movs	r0, r3
   182cc:	4b11      	ldr	r3, [pc, #68]	; (18314 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x150>)
   182ce:	4798      	blx	r3
				(void)memset(& RecorderDataPtr->eventData[e*4], 0, 4);
   182d0:	4b0f      	ldr	r3, [pc, #60]	; (18310 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x14c>)
   182d2:	681a      	ldr	r2, [r3, #0]
   182d4:	693b      	ldr	r3, [r7, #16]
   182d6:	009b      	lsls	r3, r3, #2
   182d8:	21e2      	movs	r1, #226	; 0xe2
   182da:	00c9      	lsls	r1, r1, #3
   182dc:	468c      	mov	ip, r1
   182de:	4463      	add	r3, ip
   182e0:	18d3      	adds	r3, r2, r3
   182e2:	2204      	movs	r2, #4
   182e4:	2100      	movs	r1, #0
   182e6:	0018      	movs	r0, r3
   182e8:	4b0a      	ldr	r3, [pc, #40]	; (18314 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x150>)
   182ea:	4798      	blx	r3
   182ec:	e000      	b.n	182f0 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x12c>
		{
   182ee:	46c0      	nop			; (mov r8, r8)
			}
		}
		i++;
   182f0:	697b      	ldr	r3, [r7, #20]
   182f2:	3301      	adds	r3, #1
   182f4:	617b      	str	r3, [r7, #20]
	while (i < nofEntriesToCheck)
   182f6:	1dfb      	adds	r3, r7, #7
   182f8:	781a      	ldrb	r2, [r3, #0]
   182fa:	697b      	ldr	r3, [r7, #20]
   182fc:	429a      	cmp	r2, r3
   182fe:	d900      	bls.n	18302 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x13e>
   18300:	e774      	b.n	181ec <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x28>
	}
}
   18302:	46bd      	mov	sp, r7
   18304:	b006      	add	sp, #24
   18306:	bd80      	pop	{r7, pc}
   18308:	00036434 	.word	0x00036434
   1830c:	0001815d 	.word	0x0001815d
   18310:	20000c78 	.word	0x20000c78
   18314:	00033117 	.word	0x00033117

00018318 <prvTraceUpdateCounters>:
 * prvTraceUpdateCounters
 *
 * Updates the index of the event buffer.
 ******************************************************************************/
void prvTraceUpdateCounters(void)
{	
   18318:	b580      	push	{r7, lr}
   1831a:	af00      	add	r7, sp, #0
	if (RecorderDataPtr->recorderActive == 0)
   1831c:	4b12      	ldr	r3, [pc, #72]	; (18368 <prvTraceUpdateCounters+0x50>)
   1831e:	681b      	ldr	r3, [r3, #0]
   18320:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   18322:	2b00      	cmp	r3, #0
   18324:	d01c      	beq.n	18360 <prvTraceUpdateCounters+0x48>
	{
		return;
	}
	
	RecorderDataPtr->numEvents++;
   18326:	4b10      	ldr	r3, [pc, #64]	; (18368 <prvTraceUpdateCounters+0x50>)
   18328:	681b      	ldr	r3, [r3, #0]
   1832a:	695a      	ldr	r2, [r3, #20]
   1832c:	3201      	adds	r2, #1
   1832e:	615a      	str	r2, [r3, #20]

	RecorderDataPtr->nextFreeIndex++;
   18330:	4b0d      	ldr	r3, [pc, #52]	; (18368 <prvTraceUpdateCounters+0x50>)
   18332:	681b      	ldr	r3, [r3, #0]
   18334:	69da      	ldr	r2, [r3, #28]
   18336:	3201      	adds	r2, #1
   18338:	61da      	str	r2, [r3, #28]

	if (RecorderDataPtr->nextFreeIndex >= (TRC_CFG_EVENT_BUFFER_SIZE))
   1833a:	4b0b      	ldr	r3, [pc, #44]	; (18368 <prvTraceUpdateCounters+0x50>)
   1833c:	681b      	ldr	r3, [r3, #0]
   1833e:	69da      	ldr	r2, [r3, #28]
   18340:	232c      	movs	r3, #44	; 0x2c
   18342:	33ff      	adds	r3, #255	; 0xff
   18344:	429a      	cmp	r2, r3
   18346:	d907      	bls.n	18358 <prvTraceUpdateCounters+0x40>
	{
#if (TRC_CFG_SNAPSHOT_MODE == TRC_SNAPSHOT_MODE_RING_BUFFER)
		RecorderDataPtr->bufferIsFull = 1;
   18348:	4b07      	ldr	r3, [pc, #28]	; (18368 <prvTraceUpdateCounters+0x50>)
   1834a:	681b      	ldr	r3, [r3, #0]
   1834c:	2201      	movs	r2, #1
   1834e:	621a      	str	r2, [r3, #32]
		RecorderDataPtr->nextFreeIndex = 0;
   18350:	4b05      	ldr	r3, [pc, #20]	; (18368 <prvTraceUpdateCounters+0x50>)
   18352:	681b      	ldr	r3, [r3, #0]
   18354:	2200      	movs	r2, #0
   18356:	61da      	str	r2, [r3, #28]
		vTraceStop();
#endif
	}

#if (TRC_CFG_SNAPSHOT_MODE == TRC_SNAPSHOT_MODE_RING_BUFFER)
	prvCheckDataToBeOverwrittenForMultiEntryEvents(1);
   18358:	2001      	movs	r0, #1
   1835a:	4b04      	ldr	r3, [pc, #16]	; (1836c <prvTraceUpdateCounters+0x54>)
   1835c:	4798      	blx	r3
   1835e:	e000      	b.n	18362 <prvTraceUpdateCounters+0x4a>
		return;
   18360:	46c0      	nop			; (mov r8, r8)
#endif
}
   18362:	46bd      	mov	sp, r7
   18364:	bd80      	pop	{r7, pc}
   18366:	46c0      	nop			; (mov r8, r8)
   18368:	20000c78 	.word	0x20000c78
   1836c:	000181c5 	.word	0x000181c5

00018370 <prvTraceGetDTS>:
 *
 * The parameter param_maxDTS should be 0xFF for 8-bit dts or 0xFFFF for
 * events with 16-bit dts fields.
 *****************************************************************************/
uint16_t prvTraceGetDTS(uint16_t param_maxDTS)
{
   18370:	b5b0      	push	{r4, r5, r7, lr}
   18372:	b086      	sub	sp, #24
   18374:	af00      	add	r7, sp, #0
   18376:	0002      	movs	r2, r0
   18378:	1dbb      	adds	r3, r7, #6
   1837a:	801a      	strh	r2, [r3, #0]
	static uint32_t old_timestamp = 0;
	XTSEvent* xts = 0;
   1837c:	2300      	movs	r3, #0
   1837e:	617b      	str	r3, [r7, #20]
	uint32_t dts = 0;
   18380:	2300      	movs	r3, #0
   18382:	613b      	str	r3, [r7, #16]
	uint32_t timestamp = 0;
   18384:	2300      	movs	r3, #0
   18386:	60fb      	str	r3, [r7, #12]

	TRACE_ASSERT(param_maxDTS == 0xFF || param_maxDTS == 0xFFFF, "prvTraceGetDTS: Invalid value for param_maxDTS", 0);
   18388:	1dbb      	adds	r3, r7, #6
   1838a:	881b      	ldrh	r3, [r3, #0]
   1838c:	2bff      	cmp	r3, #255	; 0xff
   1838e:	d00a      	beq.n	183a6 <prvTraceGetDTS+0x36>
   18390:	1dbb      	adds	r3, r7, #6
   18392:	881b      	ldrh	r3, [r3, #0]
   18394:	4a60      	ldr	r2, [pc, #384]	; (18518 <prvTraceGetDTS+0x1a8>)
   18396:	4293      	cmp	r3, r2
   18398:	d005      	beq.n	183a6 <prvTraceGetDTS+0x36>
   1839a:	4b60      	ldr	r3, [pc, #384]	; (1851c <prvTraceGetDTS+0x1ac>)
   1839c:	0018      	movs	r0, r3
   1839e:	4b60      	ldr	r3, [pc, #384]	; (18520 <prvTraceGetDTS+0x1b0>)
   183a0:	4798      	blx	r3
   183a2:	2300      	movs	r3, #0
   183a4:	e0b3      	b.n	1850e <prvTraceGetDTS+0x19e>

	
	if (RecorderDataPtr->frequency == 0)
   183a6:	4b5f      	ldr	r3, [pc, #380]	; (18524 <prvTraceGetDTS+0x1b4>)
   183a8:	681b      	ldr	r3, [r3, #0]
   183aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   183ac:	2b00      	cmp	r3, #0
   183ae:	d118      	bne.n	183e2 <prvTraceGetDTS+0x72>
	{	
		if (timestampFrequency != 0)
   183b0:	4b5d      	ldr	r3, [pc, #372]	; (18528 <prvTraceGetDTS+0x1b8>)
   183b2:	681b      	ldr	r3, [r3, #0]
   183b4:	2b00      	cmp	r3, #0
   183b6:	d006      	beq.n	183c6 <prvTraceGetDTS+0x56>
		{
			/* If to override default TRC_HWTC_FREQ_HZ value with value set by vTraceSetFrequency */
			RecorderDataPtr->frequency = timestampFrequency / (TRC_HWTC_DIVISOR);
   183b8:	4b5a      	ldr	r3, [pc, #360]	; (18524 <prvTraceGetDTS+0x1b4>)
   183ba:	681b      	ldr	r3, [r3, #0]
   183bc:	4a5a      	ldr	r2, [pc, #360]	; (18528 <prvTraceGetDTS+0x1b8>)
   183be:	6812      	ldr	r2, [r2, #0]
   183c0:	0892      	lsrs	r2, r2, #2
   183c2:	625a      	str	r2, [r3, #36]	; 0x24
   183c4:	e00d      	b.n	183e2 <prvTraceGetDTS+0x72>
		} 
		else if (init_hwtc_count != (TRC_HWTC_COUNT))
   183c6:	4b59      	ldr	r3, [pc, #356]	; (1852c <prvTraceGetDTS+0x1bc>)
   183c8:	681a      	ldr	r2, [r3, #0]
   183ca:	4b59      	ldr	r3, [pc, #356]	; (18530 <prvTraceGetDTS+0x1c0>)
   183cc:	681b      	ldr	r3, [r3, #0]
   183ce:	429a      	cmp	r2, r3
   183d0:	d007      	beq.n	183e2 <prvTraceGetDTS+0x72>
			/* If using default value and timer has been started. 
			Note: If the default frequency value set here would be incorrect, e.g.,
			if the timer has actually not been configured yet, override this 
			with vTraceSetFrequency.
			*/
			RecorderDataPtr->frequency = (TRC_HWTC_FREQ_HZ) / (TRC_HWTC_DIVISOR);		
   183d2:	4b54      	ldr	r3, [pc, #336]	; (18524 <prvTraceGetDTS+0x1b4>)
   183d4:	681c      	ldr	r4, [r3, #0]
   183d6:	2000      	movs	r0, #0
   183d8:	4b56      	ldr	r3, [pc, #344]	; (18534 <prvTraceGetDTS+0x1c4>)
   183da:	4798      	blx	r3
   183dc:	0003      	movs	r3, r0
   183de:	089b      	lsrs	r3, r3, #2
   183e0:	6263      	str	r3, [r4, #36]	; 0x24
	* The below statements read the timestamp from the timer port module.
	* If necessary, whole seconds are extracted using division while the rest
	* comes from the modulo operation.
	**************************************************************************/
	
	prvTracePortGetTimeStamp(&timestamp);	
   183e2:	230c      	movs	r3, #12
   183e4:	18fb      	adds	r3, r7, r3
   183e6:	0018      	movs	r0, r3
   183e8:	4b53      	ldr	r3, [pc, #332]	; (18538 <prvTraceGetDTS+0x1c8>)
   183ea:	4798      	blx	r3
	
	/***************************************************************************
	* Since dts is unsigned the result will be correct even if timestamp has
	* wrapped around.
	***************************************************************************/
	dts = timestamp - old_timestamp;
   183ec:	68fa      	ldr	r2, [r7, #12]
   183ee:	4b53      	ldr	r3, [pc, #332]	; (1853c <prvTraceGetDTS+0x1cc>)
   183f0:	681b      	ldr	r3, [r3, #0]
   183f2:	1ad3      	subs	r3, r2, r3
   183f4:	613b      	str	r3, [r7, #16]
	old_timestamp = timestamp;
   183f6:	68fa      	ldr	r2, [r7, #12]
   183f8:	4b50      	ldr	r3, [pc, #320]	; (1853c <prvTraceGetDTS+0x1cc>)
   183fa:	601a      	str	r2, [r3, #0]

	if (RecorderDataPtr->frequency > 0)
   183fc:	4b49      	ldr	r3, [pc, #292]	; (18524 <prvTraceGetDTS+0x1b4>)
   183fe:	681b      	ldr	r3, [r3, #0]
   18400:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   18402:	2b00      	cmp	r3, #0
   18404:	d044      	beq.n	18490 <prvTraceGetDTS+0x120>
	{
		/* Check if dts > 1 second */
		if (dts > RecorderDataPtr->frequency)
   18406:	4b47      	ldr	r3, [pc, #284]	; (18524 <prvTraceGetDTS+0x1b4>)
   18408:	681b      	ldr	r3, [r3, #0]
   1840a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
   1840c:	693b      	ldr	r3, [r7, #16]
   1840e:	429a      	cmp	r2, r3
   18410:	d21e      	bcs.n	18450 <prvTraceGetDTS+0xe0>
		{
			/* More than 1 second has passed */
			RecorderDataPtr->absTimeLastEventSecond += dts / RecorderDataPtr->frequency;
   18412:	4b44      	ldr	r3, [pc, #272]	; (18524 <prvTraceGetDTS+0x1b4>)
   18414:	681c      	ldr	r4, [r3, #0]
   18416:	4b43      	ldr	r3, [pc, #268]	; (18524 <prvTraceGetDTS+0x1b4>)
   18418:	681b      	ldr	r3, [r3, #0]
   1841a:	6add      	ldr	r5, [r3, #44]	; 0x2c
   1841c:	4b41      	ldr	r3, [pc, #260]	; (18524 <prvTraceGetDTS+0x1b4>)
   1841e:	681b      	ldr	r3, [r3, #0]
   18420:	6a5a      	ldr	r2, [r3, #36]	; 0x24
   18422:	4b47      	ldr	r3, [pc, #284]	; (18540 <prvTraceGetDTS+0x1d0>)
   18424:	0011      	movs	r1, r2
   18426:	6938      	ldr	r0, [r7, #16]
   18428:	4798      	blx	r3
   1842a:	0003      	movs	r3, r0
   1842c:	18eb      	adds	r3, r5, r3
   1842e:	62e3      	str	r3, [r4, #44]	; 0x2c
			/* The part that is not an entire second is added to absTimeLastEvent */
			RecorderDataPtr->absTimeLastEvent += dts % RecorderDataPtr->frequency;
   18430:	4b3c      	ldr	r3, [pc, #240]	; (18524 <prvTraceGetDTS+0x1b4>)
   18432:	681c      	ldr	r4, [r3, #0]
   18434:	4b3b      	ldr	r3, [pc, #236]	; (18524 <prvTraceGetDTS+0x1b4>)
   18436:	681b      	ldr	r3, [r3, #0]
   18438:	6a9d      	ldr	r5, [r3, #40]	; 0x28
   1843a:	4b3a      	ldr	r3, [pc, #232]	; (18524 <prvTraceGetDTS+0x1b4>)
   1843c:	681b      	ldr	r3, [r3, #0]
   1843e:	6a59      	ldr	r1, [r3, #36]	; 0x24
   18440:	693a      	ldr	r2, [r7, #16]
   18442:	4b40      	ldr	r3, [pc, #256]	; (18544 <prvTraceGetDTS+0x1d4>)
   18444:	0010      	movs	r0, r2
   18446:	4798      	blx	r3
   18448:	000b      	movs	r3, r1
   1844a:	18eb      	adds	r3, r5, r3
   1844c:	62a3      	str	r3, [r4, #40]	; 0x28
   1844e:	e007      	b.n	18460 <prvTraceGetDTS+0xf0>
		}
		else
		{
			RecorderDataPtr->absTimeLastEvent += dts;
   18450:	4b34      	ldr	r3, [pc, #208]	; (18524 <prvTraceGetDTS+0x1b4>)
   18452:	681b      	ldr	r3, [r3, #0]
   18454:	4a33      	ldr	r2, [pc, #204]	; (18524 <prvTraceGetDTS+0x1b4>)
   18456:	6812      	ldr	r2, [r2, #0]
   18458:	6a91      	ldr	r1, [r2, #40]	; 0x28
   1845a:	693a      	ldr	r2, [r7, #16]
   1845c:	188a      	adds	r2, r1, r2
   1845e:	629a      	str	r2, [r3, #40]	; 0x28
		}

		/* Check if absTimeLastEvent >= 1 second */
		if (RecorderDataPtr->absTimeLastEvent >= RecorderDataPtr->frequency)
   18460:	4b30      	ldr	r3, [pc, #192]	; (18524 <prvTraceGetDTS+0x1b4>)
   18462:	681b      	ldr	r3, [r3, #0]
   18464:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   18466:	4b2f      	ldr	r3, [pc, #188]	; (18524 <prvTraceGetDTS+0x1b4>)
   18468:	681b      	ldr	r3, [r3, #0]
   1846a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   1846c:	429a      	cmp	r2, r3
   1846e:	d313      	bcc.n	18498 <prvTraceGetDTS+0x128>
		{
			/* RecorderDataPtr->absTimeLastEvent is more than or equal to 1 second, but always less than 2 seconds */
			RecorderDataPtr->absTimeLastEventSecond++;
   18470:	4b2c      	ldr	r3, [pc, #176]	; (18524 <prvTraceGetDTS+0x1b4>)
   18472:	681b      	ldr	r3, [r3, #0]
   18474:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   18476:	3201      	adds	r2, #1
   18478:	62da      	str	r2, [r3, #44]	; 0x2c
			RecorderDataPtr->absTimeLastEvent -= RecorderDataPtr->frequency;
   1847a:	4b2a      	ldr	r3, [pc, #168]	; (18524 <prvTraceGetDTS+0x1b4>)
   1847c:	681b      	ldr	r3, [r3, #0]
   1847e:	4a29      	ldr	r2, [pc, #164]	; (18524 <prvTraceGetDTS+0x1b4>)
   18480:	6812      	ldr	r2, [r2, #0]
   18482:	6a91      	ldr	r1, [r2, #40]	; 0x28
   18484:	4a27      	ldr	r2, [pc, #156]	; (18524 <prvTraceGetDTS+0x1b4>)
   18486:	6812      	ldr	r2, [r2, #0]
   18488:	6a52      	ldr	r2, [r2, #36]	; 0x24
   1848a:	1a8a      	subs	r2, r1, r2
   1848c:	629a      	str	r2, [r3, #40]	; 0x28
   1848e:	e003      	b.n	18498 <prvTraceGetDTS+0x128>
		}
	}
	else
	{
		/* Special case if the recorder has not yet started (frequency may be uninitialized, i.e., zero) */
		RecorderDataPtr->absTimeLastEvent = timestamp;
   18490:	4b24      	ldr	r3, [pc, #144]	; (18524 <prvTraceGetDTS+0x1b4>)
   18492:	681b      	ldr	r3, [r3, #0]
   18494:	68fa      	ldr	r2, [r7, #12]
   18496:	629a      	str	r2, [r3, #40]	; 0x28
	}

	/* If the dts (time since last event) does not fit in event->dts (only 8 or 16 bits) */
	if (dts > param_maxDTS)
   18498:	1dbb      	adds	r3, r7, #6
   1849a:	881a      	ldrh	r2, [r3, #0]
   1849c:	693b      	ldr	r3, [r7, #16]
   1849e:	429a      	cmp	r2, r3
   184a0:	d22f      	bcs.n	18502 <prvTraceGetDTS+0x192>
	{
		/* Create an XTS event (eXtended TimeStamp) containing the higher dts bits*/
		xts = (XTSEvent*) prvTraceNextFreeEventBufferSlot();
   184a2:	4b29      	ldr	r3, [pc, #164]	; (18548 <prvTraceGetDTS+0x1d8>)
   184a4:	4798      	blx	r3
   184a6:	0003      	movs	r3, r0
   184a8:	617b      	str	r3, [r7, #20]

		if (xts != NULL)
   184aa:	697b      	ldr	r3, [r7, #20]
   184ac:	2b00      	cmp	r3, #0
   184ae:	d028      	beq.n	18502 <prvTraceGetDTS+0x192>
		{
			if (param_maxDTS == 0xFFFF)
   184b0:	1dbb      	adds	r3, r7, #6
   184b2:	881b      	ldrh	r3, [r3, #0]
   184b4:	4a18      	ldr	r2, [pc, #96]	; (18518 <prvTraceGetDTS+0x1a8>)
   184b6:	4293      	cmp	r3, r2
   184b8:	d10b      	bne.n	184d2 <prvTraceGetDTS+0x162>
			{
				xts->type = XTS16;
   184ba:	697b      	ldr	r3, [r7, #20]
   184bc:	22a9      	movs	r2, #169	; 0xa9
   184be:	701a      	strb	r2, [r3, #0]
				xts->xts_16 = (uint16_t)((dts / 0x10000) & 0xFFFF);
   184c0:	693b      	ldr	r3, [r7, #16]
   184c2:	0c1b      	lsrs	r3, r3, #16
   184c4:	b29a      	uxth	r2, r3
   184c6:	697b      	ldr	r3, [r7, #20]
   184c8:	805a      	strh	r2, [r3, #2]
				xts->xts_8 = 0;
   184ca:	697b      	ldr	r3, [r7, #20]
   184cc:	2200      	movs	r2, #0
   184ce:	705a      	strb	r2, [r3, #1]
   184d0:	e015      	b.n	184fe <prvTraceGetDTS+0x18e>
			}
			else if (param_maxDTS == 0xFF)
   184d2:	1dbb      	adds	r3, r7, #6
   184d4:	881b      	ldrh	r3, [r3, #0]
   184d6:	2bff      	cmp	r3, #255	; 0xff
   184d8:	d10d      	bne.n	184f6 <prvTraceGetDTS+0x186>
			{
				xts->type = XTS8;
   184da:	697b      	ldr	r3, [r7, #20]
   184dc:	22a8      	movs	r2, #168	; 0xa8
   184de:	701a      	strb	r2, [r3, #0]
				xts->xts_16 = (uint16_t)((dts / 0x100) & 0xFFFF);
   184e0:	693b      	ldr	r3, [r7, #16]
   184e2:	0a1b      	lsrs	r3, r3, #8
   184e4:	b29a      	uxth	r2, r3
   184e6:	697b      	ldr	r3, [r7, #20]
   184e8:	805a      	strh	r2, [r3, #2]
				xts->xts_8 = (uint8_t)((dts / 0x1000000) & 0xFF);
   184ea:	693b      	ldr	r3, [r7, #16]
   184ec:	0e1b      	lsrs	r3, r3, #24
   184ee:	b2da      	uxtb	r2, r3
   184f0:	697b      	ldr	r3, [r7, #20]
   184f2:	705a      	strb	r2, [r3, #1]
   184f4:	e003      	b.n	184fe <prvTraceGetDTS+0x18e>
			}
			else
			{
				prvTraceError("Bad param_maxDTS in prvTraceGetDTS");
   184f6:	4b15      	ldr	r3, [pc, #84]	; (1854c <prvTraceGetDTS+0x1dc>)
   184f8:	0018      	movs	r0, r3
   184fa:	4b09      	ldr	r3, [pc, #36]	; (18520 <prvTraceGetDTS+0x1b0>)
   184fc:	4798      	blx	r3
			}
			prvTraceUpdateCounters();
   184fe:	4b14      	ldr	r3, [pc, #80]	; (18550 <prvTraceGetDTS+0x1e0>)
   18500:	4798      	blx	r3
		}
	}

	return (uint16_t)dts & param_maxDTS;
   18502:	693b      	ldr	r3, [r7, #16]
   18504:	b29b      	uxth	r3, r3
   18506:	1dba      	adds	r2, r7, #6
   18508:	8812      	ldrh	r2, [r2, #0]
   1850a:	4013      	ands	r3, r2
   1850c:	b29b      	uxth	r3, r3
}
   1850e:	0018      	movs	r0, r3
   18510:	46bd      	mov	sp, r7
   18512:	b006      	add	sp, #24
   18514:	bdb0      	pop	{r4, r5, r7, pc}
   18516:	46c0      	nop			; (mov r8, r8)
   18518:	0000ffff 	.word	0x0000ffff
   1851c:	0003648c 	.word	0x0003648c
   18520:	0001815d 	.word	0x0001815d
   18524:	20000c78 	.word	0x20000c78
   18528:	20000bd4 	.word	0x20000bd4
   1852c:	e000e018 	.word	0xe000e018
   18530:	2000506c 	.word	0x2000506c
   18534:	000285a9 	.word	0x000285a9
   18538:	00018555 	.word	0x00018555
   1853c:	20000c84 	.word	0x20000c84
   18540:	000310ed 	.word	0x000310ed
   18544:	000311f9 	.word	0x000311f9
   18548:	00017d15 	.word	0x00017d15
   1854c:	000364cc 	.word	0x000364cc
   18550:	00018319 	.word	0x00018319

00018554 <prvTracePortGetTimeStamp>:
 * or the trace recorder library. Typically you should not need to change
 * the code of prvTracePortGetTimeStamp if using the HWTC macros.
 *
 ******************************************************************************/
void prvTracePortGetTimeStamp(uint32_t *pTimestamp)
{
   18554:	b580      	push	{r7, lr}
   18556:	b084      	sub	sp, #16
   18558:	af00      	add	r7, sp, #0
   1855a:	6078      	str	r0, [r7, #4]
	static uint32_t last_hwtc_count = 0;
	uint32_t hwtc_count = 0;
   1855c:	2300      	movs	r3, #0
   1855e:	60bb      	str	r3, [r7, #8]

#if TRC_HWTC_TYPE == TRC_OS_TIMER_INCR || TRC_HWTC_TYPE == TRC_OS_TIMER_DECR
	/* systick based timer */
	static uint32_t last_traceTickCount = 0;
	uint32_t traceTickCount = 0;
   18560:	2300      	movs	r3, #0
   18562:	60fb      	str	r3, [r7, #12]
	static uint32_t last_hwtc_rest = 0;
	uint32_t diff = 0;
	uint32_t diff_scaled = 0;
#endif /*TRC_HWTC_TYPE == TRC_OS_TIMER_INCR || TRC_HWTC_TYPE == TRC_OS_TIMER_DECR*/

	if (trace_disable_timestamp == 1)
   18564:	4b2d      	ldr	r3, [pc, #180]	; (1861c <prvTracePortGetTimeStamp+0xc8>)
   18566:	681b      	ldr	r3, [r3, #0]
   18568:	2b01      	cmp	r3, #1
   1856a:	d107      	bne.n	1857c <prvTracePortGetTimeStamp+0x28>
	{
		if (pTimestamp)
   1856c:	687b      	ldr	r3, [r7, #4]
   1856e:	2b00      	cmp	r3, #0
   18570:	d04f      	beq.n	18612 <prvTracePortGetTimeStamp+0xbe>
			*pTimestamp = last_timestamp;
   18572:	4b2b      	ldr	r3, [pc, #172]	; (18620 <prvTracePortGetTimeStamp+0xcc>)
   18574:	681a      	ldr	r2, [r3, #0]
   18576:	687b      	ldr	r3, [r7, #4]
   18578:	601a      	str	r2, [r3, #0]
		return;
   1857a:	e04a      	b.n	18612 <prvTracePortGetTimeStamp+0xbe>
#if (TRC_HWTC_TYPE == TRC_OS_TIMER_INCR || TRC_HWTC_TYPE == TRC_FREE_RUNNING_32BIT_INCR)
	/* Get the increasing tick count */
	hwtc_count = (TRC_HWTC_COUNT);
#elif (TRC_HWTC_TYPE == TRC_OS_TIMER_DECR || TRC_HWTC_TYPE == TRC_FREE_RUNNING_32BIT_DECR)
	/* Convert decreasing tick count into increasing tick count */
	hwtc_count = (TRC_HWTC_PERIOD) - (TRC_HWTC_COUNT);
   1857c:	4b29      	ldr	r3, [pc, #164]	; (18624 <prvTracePortGetTimeStamp+0xd0>)
   1857e:	681a      	ldr	r2, [r3, #0]
   18580:	4b29      	ldr	r3, [pc, #164]	; (18628 <prvTracePortGetTimeStamp+0xd4>)
   18582:	681b      	ldr	r3, [r3, #0]
   18584:	1ad3      	subs	r3, r2, r3
   18586:	3301      	adds	r3, #1
   18588:	60bb      	str	r3, [r7, #8]
	}
#endif

#if (TRC_HWTC_TYPE == TRC_OS_TIMER_INCR || TRC_HWTC_TYPE == TRC_OS_TIMER_DECR)
	/* Timestamping is based on a timer that wraps at TRC_HWTC_PERIOD */
	if (last_traceTickCount - uiTraceTickCount - 1 < 0x80000000)
   1858a:	4b28      	ldr	r3, [pc, #160]	; (1862c <prvTracePortGetTimeStamp+0xd8>)
   1858c:	681a      	ldr	r2, [r3, #0]
   1858e:	4b28      	ldr	r3, [pc, #160]	; (18630 <prvTracePortGetTimeStamp+0xdc>)
   18590:	681b      	ldr	r3, [r3, #0]
   18592:	1ad3      	subs	r3, r2, r3
   18594:	3b01      	subs	r3, #1
   18596:	2b00      	cmp	r3, #0
   18598:	db03      	blt.n	185a2 <prvTracePortGetTimeStamp+0x4e>
	{
		/* This means last_traceTickCount is higher than uiTraceTickCount,
		so we have previously compensated for a missed tick.
		Therefore we use the last stored value because that is more accurate. */
		traceTickCount = last_traceTickCount;
   1859a:	4b24      	ldr	r3, [pc, #144]	; (1862c <prvTracePortGetTimeStamp+0xd8>)
   1859c:	681b      	ldr	r3, [r3, #0]
   1859e:	60fb      	str	r3, [r7, #12]
   185a0:	e002      	b.n	185a8 <prvTracePortGetTimeStamp+0x54>
	}
	else
	{
		/* Business as usual */
		traceTickCount = uiTraceTickCount;
   185a2:	4b23      	ldr	r3, [pc, #140]	; (18630 <prvTracePortGetTimeStamp+0xdc>)
   185a4:	681b      	ldr	r3, [r3, #0]
   185a6:	60fb      	str	r3, [r7, #12]
	}

	/* Check for overflow. May occur if the update of uiTraceTickCount has been
	delayed due to disabled interrupts. */
	if (traceTickCount == last_traceTickCount && hwtc_count < last_hwtc_count)
   185a8:	4b20      	ldr	r3, [pc, #128]	; (1862c <prvTracePortGetTimeStamp+0xd8>)
   185aa:	681b      	ldr	r3, [r3, #0]
   185ac:	68fa      	ldr	r2, [r7, #12]
   185ae:	429a      	cmp	r2, r3
   185b0:	d107      	bne.n	185c2 <prvTracePortGetTimeStamp+0x6e>
   185b2:	4b20      	ldr	r3, [pc, #128]	; (18634 <prvTracePortGetTimeStamp+0xe0>)
   185b4:	681b      	ldr	r3, [r3, #0]
   185b6:	68ba      	ldr	r2, [r7, #8]
   185b8:	429a      	cmp	r2, r3
   185ba:	d202      	bcs.n	185c2 <prvTracePortGetTimeStamp+0x6e>
	{
		/* A trace tick has occurred but not been executed by the kernel, so we compensate manually. */
		traceTickCount++;
   185bc:	68fb      	ldr	r3, [r7, #12]
   185be:	3301      	adds	r3, #1
   185c0:	60fb      	str	r3, [r7, #12]
	}

	/* Check if the return address is OK, then we perform the calculation. */
	if (pTimestamp)
   185c2:	687b      	ldr	r3, [r7, #4]
   185c4:	2b00      	cmp	r3, #0
   185c6:	d016      	beq.n	185f6 <prvTracePortGetTimeStamp+0xa2>
	{
		/* Get timestamp from trace ticks. Scale down the period to avoid unwanted overflows. */
		last_timestamp = traceTickCount * ((TRC_HWTC_PERIOD) / (TRC_HWTC_DIVISOR));
   185c8:	4b16      	ldr	r3, [pc, #88]	; (18624 <prvTracePortGetTimeStamp+0xd0>)
   185ca:	681b      	ldr	r3, [r3, #0]
   185cc:	3301      	adds	r3, #1
   185ce:	089b      	lsrs	r3, r3, #2
   185d0:	68fa      	ldr	r2, [r7, #12]
   185d2:	435a      	muls	r2, r3
   185d4:	4b12      	ldr	r3, [pc, #72]	; (18620 <prvTracePortGetTimeStamp+0xcc>)
   185d6:	601a      	str	r2, [r3, #0]
		/* Increase timestamp by (hwtc_count + "lost hardware ticks from scaling down period") / TRC_HWTC_DIVISOR. */
		last_timestamp += (hwtc_count + traceTickCount * ((TRC_HWTC_PERIOD) % (TRC_HWTC_DIVISOR))) / (TRC_HWTC_DIVISOR);
   185d8:	4b12      	ldr	r3, [pc, #72]	; (18624 <prvTracePortGetTimeStamp+0xd0>)
   185da:	681b      	ldr	r3, [r3, #0]
   185dc:	3301      	adds	r3, #1
   185de:	2203      	movs	r2, #3
   185e0:	4013      	ands	r3, r2
   185e2:	68fa      	ldr	r2, [r7, #12]
   185e4:	435a      	muls	r2, r3
   185e6:	68bb      	ldr	r3, [r7, #8]
   185e8:	18d3      	adds	r3, r2, r3
   185ea:	089a      	lsrs	r2, r3, #2
   185ec:	4b0c      	ldr	r3, [pc, #48]	; (18620 <prvTracePortGetTimeStamp+0xcc>)
   185ee:	681b      	ldr	r3, [r3, #0]
   185f0:	18d2      	adds	r2, r2, r3
   185f2:	4b0b      	ldr	r3, [pc, #44]	; (18620 <prvTracePortGetTimeStamp+0xcc>)
   185f4:	601a      	str	r2, [r3, #0]
	}
	/* Store the previous value */
	last_traceTickCount = traceTickCount;
   185f6:	4b0d      	ldr	r3, [pc, #52]	; (1862c <prvTracePortGetTimeStamp+0xd8>)
   185f8:	68fa      	ldr	r2, [r7, #12]
   185fa:	601a      	str	r2, [r3, #0]
	/* We increase the scaled timestamp by the scaled amount */
	last_timestamp += diff_scaled;
#endif /*(TRC_HWTC_TYPE == TRC_OS_TIMER_INCR || TRC_HWTC_TYPE == TRC_OS_TIMER_DECR)*/

	/* Is anyone interested in the results? */
	if (pTimestamp)
   185fc:	687b      	ldr	r3, [r7, #4]
   185fe:	2b00      	cmp	r3, #0
   18600:	d003      	beq.n	1860a <prvTracePortGetTimeStamp+0xb6>
		*pTimestamp = last_timestamp;
   18602:	4b07      	ldr	r3, [pc, #28]	; (18620 <prvTracePortGetTimeStamp+0xcc>)
   18604:	681a      	ldr	r2, [r3, #0]
   18606:	687b      	ldr	r3, [r7, #4]
   18608:	601a      	str	r2, [r3, #0]

	/* Store the previous value */
	last_hwtc_count = hwtc_count;
   1860a:	4b0a      	ldr	r3, [pc, #40]	; (18634 <prvTracePortGetTimeStamp+0xe0>)
   1860c:	68ba      	ldr	r2, [r7, #8]
   1860e:	601a      	str	r2, [r3, #0]
   18610:	e000      	b.n	18614 <prvTracePortGetTimeStamp+0xc0>
		return;
   18612:	46c0      	nop			; (mov r8, r8)
}
   18614:	46bd      	mov	sp, r7
   18616:	b004      	add	sp, #16
   18618:	bd80      	pop	{r7, pc}
   1861a:	46c0      	nop			; (mov r8, r8)
   1861c:	20000bc4 	.word	0x20000bc4
   18620:	20000bc8 	.word	0x20000bc8
   18624:	e000e014 	.word	0xe000e014
   18628:	e000e018 	.word	0xe000e018
   1862c:	20000c88 	.word	0x20000c88
   18630:	20000bc0 	.word	0x20000bc0
   18634:	20000c8c 	.word	0x20000c8c

00018638 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
   18638:	b580      	push	{r7, lr}
   1863a:	b082      	sub	sp, #8
   1863c:	af00      	add	r7, sp, #0
   1863e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
   18640:	687b      	ldr	r3, [r7, #4]
   18642:	3308      	adds	r3, #8
   18644:	001a      	movs	r2, r3
   18646:	687b      	ldr	r3, [r7, #4]
   18648:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
   1864a:	687b      	ldr	r3, [r7, #4]
   1864c:	2201      	movs	r2, #1
   1864e:	4252      	negs	r2, r2
   18650:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
   18652:	687b      	ldr	r3, [r7, #4]
   18654:	3308      	adds	r3, #8
   18656:	001a      	movs	r2, r3
   18658:	687b      	ldr	r3, [r7, #4]
   1865a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
   1865c:	687b      	ldr	r3, [r7, #4]
   1865e:	3308      	adds	r3, #8
   18660:	001a      	movs	r2, r3
   18662:	687b      	ldr	r3, [r7, #4]
   18664:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
   18666:	687b      	ldr	r3, [r7, #4]
   18668:	2200      	movs	r2, #0
   1866a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
   1866c:	46c0      	nop			; (mov r8, r8)
   1866e:	46bd      	mov	sp, r7
   18670:	b002      	add	sp, #8
   18672:	bd80      	pop	{r7, pc}

00018674 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
   18674:	b580      	push	{r7, lr}
   18676:	b082      	sub	sp, #8
   18678:	af00      	add	r7, sp, #0
   1867a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
   1867c:	687b      	ldr	r3, [r7, #4]
   1867e:	2200      	movs	r2, #0
   18680:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
   18682:	46c0      	nop			; (mov r8, r8)
   18684:	46bd      	mov	sp, r7
   18686:	b002      	add	sp, #8
   18688:	bd80      	pop	{r7, pc}

0001868a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
   1868a:	b580      	push	{r7, lr}
   1868c:	b084      	sub	sp, #16
   1868e:	af00      	add	r7, sp, #0
   18690:	6078      	str	r0, [r7, #4]
   18692:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
   18694:	687b      	ldr	r3, [r7, #4]
   18696:	685b      	ldr	r3, [r3, #4]
   18698:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
   1869a:	683b      	ldr	r3, [r7, #0]
   1869c:	68fa      	ldr	r2, [r7, #12]
   1869e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
   186a0:	68fb      	ldr	r3, [r7, #12]
   186a2:	689a      	ldr	r2, [r3, #8]
   186a4:	683b      	ldr	r3, [r7, #0]
   186a6:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
   186a8:	68fb      	ldr	r3, [r7, #12]
   186aa:	689b      	ldr	r3, [r3, #8]
   186ac:	683a      	ldr	r2, [r7, #0]
   186ae:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
   186b0:	68fb      	ldr	r3, [r7, #12]
   186b2:	683a      	ldr	r2, [r7, #0]
   186b4:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
   186b6:	683b      	ldr	r3, [r7, #0]
   186b8:	687a      	ldr	r2, [r7, #4]
   186ba:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
   186bc:	687b      	ldr	r3, [r7, #4]
   186be:	681b      	ldr	r3, [r3, #0]
   186c0:	1c5a      	adds	r2, r3, #1
   186c2:	687b      	ldr	r3, [r7, #4]
   186c4:	601a      	str	r2, [r3, #0]
}
   186c6:	46c0      	nop			; (mov r8, r8)
   186c8:	46bd      	mov	sp, r7
   186ca:	b004      	add	sp, #16
   186cc:	bd80      	pop	{r7, pc}

000186ce <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
   186ce:	b580      	push	{r7, lr}
   186d0:	b084      	sub	sp, #16
   186d2:	af00      	add	r7, sp, #0
   186d4:	6078      	str	r0, [r7, #4]
   186d6:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
   186d8:	683b      	ldr	r3, [r7, #0]
   186da:	681b      	ldr	r3, [r3, #0]
   186dc:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
   186de:	68bb      	ldr	r3, [r7, #8]
   186e0:	3301      	adds	r3, #1
   186e2:	d103      	bne.n	186ec <vListInsert+0x1e>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
   186e4:	687b      	ldr	r3, [r7, #4]
   186e6:	691b      	ldr	r3, [r3, #16]
   186e8:	60fb      	str	r3, [r7, #12]
   186ea:	e00c      	b.n	18706 <vListInsert+0x38>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
   186ec:	687b      	ldr	r3, [r7, #4]
   186ee:	3308      	adds	r3, #8
   186f0:	60fb      	str	r3, [r7, #12]
   186f2:	e002      	b.n	186fa <vListInsert+0x2c>
   186f4:	68fb      	ldr	r3, [r7, #12]
   186f6:	685b      	ldr	r3, [r3, #4]
   186f8:	60fb      	str	r3, [r7, #12]
   186fa:	68fb      	ldr	r3, [r7, #12]
   186fc:	685b      	ldr	r3, [r3, #4]
   186fe:	681a      	ldr	r2, [r3, #0]
   18700:	68bb      	ldr	r3, [r7, #8]
   18702:	429a      	cmp	r2, r3
   18704:	d9f6      	bls.n	186f4 <vListInsert+0x26>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
   18706:	68fb      	ldr	r3, [r7, #12]
   18708:	685a      	ldr	r2, [r3, #4]
   1870a:	683b      	ldr	r3, [r7, #0]
   1870c:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
   1870e:	683b      	ldr	r3, [r7, #0]
   18710:	685b      	ldr	r3, [r3, #4]
   18712:	683a      	ldr	r2, [r7, #0]
   18714:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
   18716:	683b      	ldr	r3, [r7, #0]
   18718:	68fa      	ldr	r2, [r7, #12]
   1871a:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
   1871c:	68fb      	ldr	r3, [r7, #12]
   1871e:	683a      	ldr	r2, [r7, #0]
   18720:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
   18722:	683b      	ldr	r3, [r7, #0]
   18724:	687a      	ldr	r2, [r7, #4]
   18726:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
   18728:	687b      	ldr	r3, [r7, #4]
   1872a:	681b      	ldr	r3, [r3, #0]
   1872c:	1c5a      	adds	r2, r3, #1
   1872e:	687b      	ldr	r3, [r7, #4]
   18730:	601a      	str	r2, [r3, #0]
}
   18732:	46c0      	nop			; (mov r8, r8)
   18734:	46bd      	mov	sp, r7
   18736:	b004      	add	sp, #16
   18738:	bd80      	pop	{r7, pc}

0001873a <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
   1873a:	b580      	push	{r7, lr}
   1873c:	b084      	sub	sp, #16
   1873e:	af00      	add	r7, sp, #0
   18740:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
   18742:	687b      	ldr	r3, [r7, #4]
   18744:	691b      	ldr	r3, [r3, #16]
   18746:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
   18748:	687b      	ldr	r3, [r7, #4]
   1874a:	685b      	ldr	r3, [r3, #4]
   1874c:	687a      	ldr	r2, [r7, #4]
   1874e:	6892      	ldr	r2, [r2, #8]
   18750:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
   18752:	687b      	ldr	r3, [r7, #4]
   18754:	689b      	ldr	r3, [r3, #8]
   18756:	687a      	ldr	r2, [r7, #4]
   18758:	6852      	ldr	r2, [r2, #4]
   1875a:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
   1875c:	68fb      	ldr	r3, [r7, #12]
   1875e:	685a      	ldr	r2, [r3, #4]
   18760:	687b      	ldr	r3, [r7, #4]
   18762:	429a      	cmp	r2, r3
   18764:	d103      	bne.n	1876e <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
   18766:	687b      	ldr	r3, [r7, #4]
   18768:	689a      	ldr	r2, [r3, #8]
   1876a:	68fb      	ldr	r3, [r7, #12]
   1876c:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
   1876e:	687b      	ldr	r3, [r7, #4]
   18770:	2200      	movs	r2, #0
   18772:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
   18774:	68fb      	ldr	r3, [r7, #12]
   18776:	681b      	ldr	r3, [r3, #0]
   18778:	1e5a      	subs	r2, r3, #1
   1877a:	68fb      	ldr	r3, [r7, #12]
   1877c:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
   1877e:	68fb      	ldr	r3, [r7, #12]
   18780:	681b      	ldr	r3, [r3, #0]
}
   18782:	0018      	movs	r0, r3
   18784:	46bd      	mov	sp, r7
   18786:	b004      	add	sp, #16
   18788:	bd80      	pop	{r7, pc}
	...

0001878c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
   1878c:	b580      	push	{r7, lr}
   1878e:	b084      	sub	sp, #16
   18790:	af00      	add	r7, sp, #0
   18792:	60f8      	str	r0, [r7, #12]
   18794:	60b9      	str	r1, [r7, #8]
   18796:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
   18798:	68fb      	ldr	r3, [r7, #12]
   1879a:	3b04      	subs	r3, #4
   1879c:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
   1879e:	68fb      	ldr	r3, [r7, #12]
   187a0:	2280      	movs	r2, #128	; 0x80
   187a2:	0452      	lsls	r2, r2, #17
   187a4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
   187a6:	68fb      	ldr	r3, [r7, #12]
   187a8:	3b04      	subs	r3, #4
   187aa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pxCode;	/* PC */
   187ac:	68ba      	ldr	r2, [r7, #8]
   187ae:	68fb      	ldr	r3, [r7, #12]
   187b0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
   187b2:	68fb      	ldr	r3, [r7, #12]
   187b4:	3b04      	subs	r3, #4
   187b6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
   187b8:	4a08      	ldr	r2, [pc, #32]	; (187dc <pxPortInitialiseStack+0x50>)
   187ba:	68fb      	ldr	r3, [r7, #12]
   187bc:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
   187be:	68fb      	ldr	r3, [r7, #12]
   187c0:	3b14      	subs	r3, #20
   187c2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
   187c4:	687a      	ldr	r2, [r7, #4]
   187c6:	68fb      	ldr	r3, [r7, #12]
   187c8:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8; /* R11..R4. */
   187ca:	68fb      	ldr	r3, [r7, #12]
   187cc:	3b20      	subs	r3, #32
   187ce:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
   187d0:	68fb      	ldr	r3, [r7, #12]
}
   187d2:	0018      	movs	r0, r3
   187d4:	46bd      	mov	sp, r7
   187d6:	b004      	add	sp, #16
   187d8:	bd80      	pop	{r7, pc}
   187da:	46c0      	nop			; (mov r8, r8)
   187dc:	000187e1 	.word	0x000187e1

000187e0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
   187e0:	b580      	push	{r7, lr}
   187e2:	b082      	sub	sp, #8
   187e4:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
   187e6:	2300      	movs	r3, #0
   187e8:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
   187ea:	4b07      	ldr	r3, [pc, #28]	; (18808 <prvTaskExitError+0x28>)
   187ec:	681b      	ldr	r3, [r3, #0]
   187ee:	3301      	adds	r3, #1
   187f0:	d001      	beq.n	187f6 <prvTaskExitError+0x16>
   187f2:	b672      	cpsid	i
   187f4:	e7fe      	b.n	187f4 <prvTaskExitError+0x14>
	portDISABLE_INTERRUPTS();
   187f6:	b672      	cpsid	i
	while( ulDummy == 0 )
   187f8:	46c0      	nop			; (mov r8, r8)
   187fa:	687b      	ldr	r3, [r7, #4]
   187fc:	2b00      	cmp	r3, #0
   187fe:	d0fc      	beq.n	187fa <prvTaskExitError+0x1a>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
   18800:	46c0      	nop			; (mov r8, r8)
   18802:	46bd      	mov	sp, r7
   18804:	b002      	add	sp, #8
   18806:	bd80      	pop	{r7, pc}
   18808:	20000124 	.word	0x20000124

0001880c <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
   1880c:	b580      	push	{r7, lr}
   1880e:	af00      	add	r7, sp, #0
	/* This function is no longer used, but retained for backward
	compatibility. */
}
   18810:	46c0      	nop			; (mov r8, r8)
   18812:	46bd      	mov	sp, r7
   18814:	bd80      	pop	{r7, pc}
	...

00018820 <vPortStartFirstTask>:
void vPortStartFirstTask( void )
{
	/* The MSP stack is not reset as, unlike on M3/4 parts, there is no vector
	table offset register that can be used to locate the initial stack value.
	Not all M0 parts have the application vector table at address 0. */
	__asm volatile(
   18820:	4a0b      	ldr	r2, [pc, #44]	; (18850 <pxCurrentTCBConst2>)
   18822:	6813      	ldr	r3, [r2, #0]
   18824:	6818      	ldr	r0, [r3, #0]
   18826:	3020      	adds	r0, #32
   18828:	f380 8809 	msr	PSP, r0
   1882c:	2002      	movs	r0, #2
   1882e:	f380 8814 	msr	CONTROL, r0
   18832:	f3bf 8f6f 	isb	sy
   18836:	bc3f      	pop	{r0, r1, r2, r3, r4, r5}
   18838:	46ae      	mov	lr, r5
   1883a:	bc08      	pop	{r3}
   1883c:	bc04      	pop	{r2}
   1883e:	b662      	cpsie	i
   18840:	4718      	bx	r3
   18842:	46c0      	nop			; (mov r8, r8)
   18844:	46c0      	nop			; (mov r8, r8)
   18846:	46c0      	nop			; (mov r8, r8)
   18848:	46c0      	nop			; (mov r8, r8)
   1884a:	46c0      	nop			; (mov r8, r8)
   1884c:	46c0      	nop			; (mov r8, r8)
   1884e:	46c0      	nop			; (mov r8, r8)

00018850 <pxCurrentTCBConst2>:
   18850:	20003b78 	.word	0x20003b78
	"	bx   r3						\n" /* Finally, jump to the user defined task code. */
	"								\n"
	"	.align 4					\n"
	"pxCurrentTCBConst2: .word pxCurrentTCB	  "
				  );
}
   18854:	46c0      	nop			; (mov r8, r8)
   18856:	46c0      	nop			; (mov r8, r8)

00018858 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
   18858:	b580      	push	{r7, lr}
   1885a:	af00      	add	r7, sp, #0
	/* Make PendSV, CallSV and SysTick the same priroity as the kernel. */
	*(portNVIC_SYSPRI2) |= portNVIC_PENDSV_PRI;
   1885c:	4b0e      	ldr	r3, [pc, #56]	; (18898 <xPortStartScheduler+0x40>)
   1885e:	4a0e      	ldr	r2, [pc, #56]	; (18898 <xPortStartScheduler+0x40>)
   18860:	6812      	ldr	r2, [r2, #0]
   18862:	21ff      	movs	r1, #255	; 0xff
   18864:	0409      	lsls	r1, r1, #16
   18866:	430a      	orrs	r2, r1
   18868:	601a      	str	r2, [r3, #0]
	*(portNVIC_SYSPRI2) |= portNVIC_SYSTICK_PRI;
   1886a:	4b0b      	ldr	r3, [pc, #44]	; (18898 <xPortStartScheduler+0x40>)
   1886c:	4a0a      	ldr	r2, [pc, #40]	; (18898 <xPortStartScheduler+0x40>)
   1886e:	6812      	ldr	r2, [r2, #0]
   18870:	21ff      	movs	r1, #255	; 0xff
   18872:	0609      	lsls	r1, r1, #24
   18874:	430a      	orrs	r2, r1
   18876:	601a      	str	r2, [r3, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	prvSetupTimerInterrupt();
   18878:	4b08      	ldr	r3, [pc, #32]	; (1889c <xPortStartScheduler+0x44>)
   1887a:	4798      	blx	r3

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
   1887c:	4b08      	ldr	r3, [pc, #32]	; (188a0 <xPortStartScheduler+0x48>)
   1887e:	2200      	movs	r2, #0
   18880:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	vPortStartFirstTask();
   18882:	4b08      	ldr	r3, [pc, #32]	; (188a4 <xPortStartScheduler+0x4c>)
   18884:	4798      	blx	r3
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
   18886:	4b08      	ldr	r3, [pc, #32]	; (188a8 <xPortStartScheduler+0x50>)
   18888:	4798      	blx	r3
	prvTaskExitError();
   1888a:	4b08      	ldr	r3, [pc, #32]	; (188ac <xPortStartScheduler+0x54>)
   1888c:	4798      	blx	r3

	/* Should not get here! */
	return 0;
   1888e:	2300      	movs	r3, #0
}
   18890:	0018      	movs	r0, r3
   18892:	46bd      	mov	sp, r7
   18894:	bd80      	pop	{r7, pc}
   18896:	46c0      	nop			; (mov r8, r8)
   18898:	e000ed20 	.word	0xe000ed20
   1889c:	000189b9 	.word	0x000189b9
   188a0:	20000124 	.word	0x20000124
   188a4:	00018821 	.word	0x00018821
   188a8:	0001af19 	.word	0x0001af19
   188ac:	000187e1 	.word	0x000187e1

000188b0 <vPortYield>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortYield( void )
{
   188b0:	b580      	push	{r7, lr}
   188b2:	af00      	add	r7, sp, #0
	/* Set a PendSV to request a context switch. */
	*( portNVIC_INT_CTRL ) = portNVIC_PENDSVSET;
   188b4:	4b03      	ldr	r3, [pc, #12]	; (188c4 <vPortYield+0x14>)
   188b6:	2280      	movs	r2, #128	; 0x80
   188b8:	0552      	lsls	r2, r2, #21
   188ba:	601a      	str	r2, [r3, #0]

	/* Barriers are normally not required but do ensure the code is completely
	within the specified behaviour for the architecture. */
	//__asm volatile( "dsb" ::: "memory" );
	//__asm volatile( "isb" );
}
   188bc:	46c0      	nop			; (mov r8, r8)
   188be:	46bd      	mov	sp, r7
   188c0:	bd80      	pop	{r7, pc}
   188c2:	46c0      	nop			; (mov r8, r8)
   188c4:	e000ed04 	.word	0xe000ed04

000188c8 <vPortEnterCritical>:
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
   188c8:	b580      	push	{r7, lr}
   188ca:	af00      	add	r7, sp, #0
    portDISABLE_INTERRUPTS();
   188cc:	b672      	cpsid	i
    uxCriticalNesting++;
   188ce:	4b06      	ldr	r3, [pc, #24]	; (188e8 <vPortEnterCritical+0x20>)
   188d0:	681b      	ldr	r3, [r3, #0]
   188d2:	1c5a      	adds	r2, r3, #1
   188d4:	4b04      	ldr	r3, [pc, #16]	; (188e8 <vPortEnterCritical+0x20>)
   188d6:	601a      	str	r2, [r3, #0]
	__asm volatile( "dsb" ::: "memory" );
   188d8:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
   188dc:	f3bf 8f6f 	isb	sy
}
   188e0:	46c0      	nop			; (mov r8, r8)
   188e2:	46bd      	mov	sp, r7
   188e4:	bd80      	pop	{r7, pc}
   188e6:	46c0      	nop			; (mov r8, r8)
   188e8:	20000124 	.word	0x20000124

000188ec <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
   188ec:	b580      	push	{r7, lr}
   188ee:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
   188f0:	4b09      	ldr	r3, [pc, #36]	; (18918 <vPortExitCritical+0x2c>)
   188f2:	681b      	ldr	r3, [r3, #0]
   188f4:	2b00      	cmp	r3, #0
   188f6:	d101      	bne.n	188fc <vPortExitCritical+0x10>
   188f8:	b672      	cpsid	i
   188fa:	e7fe      	b.n	188fa <vPortExitCritical+0xe>
    uxCriticalNesting--;
   188fc:	4b06      	ldr	r3, [pc, #24]	; (18918 <vPortExitCritical+0x2c>)
   188fe:	681b      	ldr	r3, [r3, #0]
   18900:	1e5a      	subs	r2, r3, #1
   18902:	4b05      	ldr	r3, [pc, #20]	; (18918 <vPortExitCritical+0x2c>)
   18904:	601a      	str	r2, [r3, #0]
    if( uxCriticalNesting == 0 )
   18906:	4b04      	ldr	r3, [pc, #16]	; (18918 <vPortExitCritical+0x2c>)
   18908:	681b      	ldr	r3, [r3, #0]
   1890a:	2b00      	cmp	r3, #0
   1890c:	d100      	bne.n	18910 <vPortExitCritical+0x24>
    {
        portENABLE_INTERRUPTS();
   1890e:	b662      	cpsie	i
    }
}
   18910:	46c0      	nop			; (mov r8, r8)
   18912:	46bd      	mov	sp, r7
   18914:	bd80      	pop	{r7, pc}
   18916:	46c0      	nop			; (mov r8, r8)
   18918:	20000124 	.word	0x20000124

0001891c <ulSetInterruptMaskFromISR>:
/*-----------------------------------------------------------*/

uint32_t ulSetInterruptMaskFromISR( void )
{
	__asm volatile(
   1891c:	f3ef 8010 	mrs	r0, PRIMASK
   18920:	b672      	cpsid	i
   18922:	4770      	bx	lr
	/* To avoid compiler warnings.  The return statement will nevere be reached,
	but some compilers warn if it is not included, while others won't compile if
	it is. */
	return 0;
#endif
}
   18924:	46c0      	nop			; (mov r8, r8)
   18926:	0018      	movs	r0, r3

00018928 <vClearInterruptMaskFromISR>:
/*-----------------------------------------------------------*/

void vClearInterruptMaskFromISR( __attribute__( ( unused ) ) uint32_t ulMask )
{
	__asm volatile(
   18928:	f380 8810 	msr	PRIMASK, r0
   1892c:	4770      	bx	lr
	/* Just to avoid compiler warning.  ulMask is used from the asm code but
	the compiler can't see that.  Some compilers generate warnings without the
	following line, while others generate warnings if the line is included. */
	( void ) ulMask;
#endif
}
   1892e:	46c0      	nop			; (mov r8, r8)

00018930 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
   18930:	f3ef 8009 	mrs	r0, PSP
   18934:	4b0e      	ldr	r3, [pc, #56]	; (18970 <pxCurrentTCBConst>)
   18936:	681a      	ldr	r2, [r3, #0]
   18938:	3820      	subs	r0, #32
   1893a:	6010      	str	r0, [r2, #0]
   1893c:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
   1893e:	4644      	mov	r4, r8
   18940:	464d      	mov	r5, r9
   18942:	4656      	mov	r6, sl
   18944:	465f      	mov	r7, fp
   18946:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
   18948:	b508      	push	{r3, lr}
   1894a:	b672      	cpsid	i
   1894c:	f002 fae4 	bl	1af18 <vTaskSwitchContext>
   18950:	b662      	cpsie	i
   18952:	bc0c      	pop	{r2, r3}
   18954:	6811      	ldr	r1, [r2, #0]
   18956:	6808      	ldr	r0, [r1, #0]
   18958:	3010      	adds	r0, #16
   1895a:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
   1895c:	46a0      	mov	r8, r4
   1895e:	46a9      	mov	r9, r5
   18960:	46b2      	mov	sl, r6
   18962:	46bb      	mov	fp, r7
   18964:	f380 8809 	msr	PSP, r0
   18968:	3820      	subs	r0, #32
   1896a:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
   1896c:	4718      	bx	r3
   1896e:	46c0      	nop			; (mov r8, r8)

00018970 <pxCurrentTCBConst>:
   18970:	20003b78 	.word	0x20003b78
	"	bx r3								\n"
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	  "
	);
}
   18974:	46c0      	nop			; (mov r8, r8)
   18976:	46c0      	nop			; (mov r8, r8)

00018978 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
   18978:	b580      	push	{r7, lr}
   1897a:	b082      	sub	sp, #8
   1897c:	af00      	add	r7, sp, #0
uint32_t ulPreviousMask;

	ulPreviousMask = portSET_INTERRUPT_MASK_FROM_ISR();
   1897e:	4b0a      	ldr	r3, [pc, #40]	; (189a8 <SysTick_Handler+0x30>)
   18980:	4798      	blx	r3
   18982:	0003      	movs	r3, r0
   18984:	607b      	str	r3, [r7, #4]
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
   18986:	4b09      	ldr	r3, [pc, #36]	; (189ac <SysTick_Handler+0x34>)
   18988:	4798      	blx	r3
   1898a:	1e03      	subs	r3, r0, #0
   1898c:	d003      	beq.n	18996 <SysTick_Handler+0x1e>
		{
			/* Pend a context switch. */
			*(portNVIC_INT_CTRL) = portNVIC_PENDSVSET;
   1898e:	4b08      	ldr	r3, [pc, #32]	; (189b0 <SysTick_Handler+0x38>)
   18990:	2280      	movs	r2, #128	; 0x80
   18992:	0552      	lsls	r2, r2, #21
   18994:	601a      	str	r2, [r3, #0]
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( ulPreviousMask );
   18996:	687b      	ldr	r3, [r7, #4]
   18998:	0018      	movs	r0, r3
   1899a:	4b06      	ldr	r3, [pc, #24]	; (189b4 <SysTick_Handler+0x3c>)
   1899c:	4798      	blx	r3
}
   1899e:	46c0      	nop			; (mov r8, r8)
   189a0:	46bd      	mov	sp, r7
   189a2:	b002      	add	sp, #8
   189a4:	bd80      	pop	{r7, pc}
   189a6:	46c0      	nop			; (mov r8, r8)
   189a8:	0001891d 	.word	0x0001891d
   189ac:	0001ad29 	.word	0x0001ad29
   189b0:	e000ed04 	.word	0xe000ed04
   189b4:	00018929 	.word	0x00018929

000189b8 <prvSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
void prvSetupTimerInterrupt( void )
{
   189b8:	b5b0      	push	{r4, r5, r7, lr}
   189ba:	af00      	add	r7, sp, #0
	/* Stop and reset the SysTick. */
	*(portNVIC_SYSTICK_CTRL) = 0UL;
   189bc:	4b0b      	ldr	r3, [pc, #44]	; (189ec <prvSetupTimerInterrupt+0x34>)
   189be:	2200      	movs	r2, #0
   189c0:	601a      	str	r2, [r3, #0]
	*(portNVIC_SYSTICK_CURRENT_VALUE) = 0UL;
   189c2:	4b0b      	ldr	r3, [pc, #44]	; (189f0 <prvSetupTimerInterrupt+0x38>)
   189c4:	2200      	movs	r2, #0
   189c6:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	*(portNVIC_SYSTICK_LOAD) = ( configCPU_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
   189c8:	4c0a      	ldr	r4, [pc, #40]	; (189f4 <prvSetupTimerInterrupt+0x3c>)
   189ca:	2000      	movs	r0, #0
   189cc:	4b0a      	ldr	r3, [pc, #40]	; (189f8 <prvSetupTimerInterrupt+0x40>)
   189ce:	4798      	blx	r3
   189d0:	4b0a      	ldr	r3, [pc, #40]	; (189fc <prvSetupTimerInterrupt+0x44>)
   189d2:	22fa      	movs	r2, #250	; 0xfa
   189d4:	0091      	lsls	r1, r2, #2
   189d6:	4798      	blx	r3
   189d8:	0003      	movs	r3, r0
   189da:	3b01      	subs	r3, #1
   189dc:	6023      	str	r3, [r4, #0]
	*(portNVIC_SYSTICK_CTRL) = portNVIC_SYSTICK_CLK | portNVIC_SYSTICK_INT | portNVIC_SYSTICK_ENABLE;
   189de:	4b03      	ldr	r3, [pc, #12]	; (189ec <prvSetupTimerInterrupt+0x34>)
   189e0:	2207      	movs	r2, #7
   189e2:	601a      	str	r2, [r3, #0]
}
   189e4:	46c0      	nop			; (mov r8, r8)
   189e6:	46bd      	mov	sp, r7
   189e8:	bdb0      	pop	{r4, r5, r7, pc}
   189ea:	46c0      	nop			; (mov r8, r8)
   189ec:	e000e010 	.word	0xe000e010
   189f0:	e000e018 	.word	0xe000e018
   189f4:	e000e014 	.word	0xe000e014
   189f8:	000285a9 	.word	0x000285a9
   189fc:	000310ed 	.word	0x000310ed

00018a00 <pvPortMalloc>:
static size_t xNextFreeByte = ( size_t ) 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
   18a00:	b580      	push	{r7, lr}
   18a02:	b084      	sub	sp, #16
   18a04:	af00      	add	r7, sp, #0
   18a06:	6078      	str	r0, [r7, #4]
void *pvReturn = NULL;
   18a08:	2300      	movs	r3, #0
   18a0a:	60fb      	str	r3, [r7, #12]
static uint8_t *pucAlignedHeap = NULL;

	/* Ensure that blocks are always aligned to the required number of bytes. */
	#if( portBYTE_ALIGNMENT != 1 )
	{
		if( xWantedSize & portBYTE_ALIGNMENT_MASK )
   18a0c:	687b      	ldr	r3, [r7, #4]
   18a0e:	2207      	movs	r2, #7
   18a10:	4013      	ands	r3, r2
   18a12:	d004      	beq.n	18a1e <pvPortMalloc+0x1e>
		{
			/* Byte alignment required. */
			xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
   18a14:	687b      	ldr	r3, [r7, #4]
   18a16:	2207      	movs	r2, #7
   18a18:	4393      	bics	r3, r2
   18a1a:	3308      	adds	r3, #8
   18a1c:	607b      	str	r3, [r7, #4]
		}
	}
	#endif

	vTaskSuspendAll();
   18a1e:	4b21      	ldr	r3, [pc, #132]	; (18aa4 <pvPortMalloc+0xa4>)
   18a20:	4798      	blx	r3
	{
		if( pucAlignedHeap == NULL )
   18a22:	4b21      	ldr	r3, [pc, #132]	; (18aa8 <pvPortMalloc+0xa8>)
   18a24:	681b      	ldr	r3, [r3, #0]
   18a26:	2b00      	cmp	r3, #0
   18a28:	d105      	bne.n	18a36 <pvPortMalloc+0x36>
		{
			/* Ensure the heap starts on a correctly aligned boundary. */
			pucAlignedHeap = ( uint8_t * ) ( ( ( portPOINTER_SIZE_TYPE ) &ucHeap[ portBYTE_ALIGNMENT ] ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );
   18a2a:	4b20      	ldr	r3, [pc, #128]	; (18aac <pvPortMalloc+0xac>)
   18a2c:	2207      	movs	r2, #7
   18a2e:	4393      	bics	r3, r2
   18a30:	001a      	movs	r2, r3
   18a32:	4b1d      	ldr	r3, [pc, #116]	; (18aa8 <pvPortMalloc+0xa8>)
   18a34:	601a      	str	r2, [r3, #0]
		}

		/* Check there is enough room left for the allocation. */
		if( ( ( xNextFreeByte + xWantedSize ) < configADJUSTED_HEAP_SIZE ) &&
   18a36:	4b1e      	ldr	r3, [pc, #120]	; (18ab0 <pvPortMalloc+0xb0>)
   18a38:	681a      	ldr	r2, [r3, #0]
   18a3a:	687b      	ldr	r3, [r7, #4]
   18a3c:	18d3      	adds	r3, r2, r3
   18a3e:	4a1d      	ldr	r2, [pc, #116]	; (18ab4 <pvPortMalloc+0xb4>)
   18a40:	4293      	cmp	r3, r2
   18a42:	d813      	bhi.n	18a6c <pvPortMalloc+0x6c>
			( ( xNextFreeByte + xWantedSize ) > xNextFreeByte )	)/* Check for overflow. */
   18a44:	4b1a      	ldr	r3, [pc, #104]	; (18ab0 <pvPortMalloc+0xb0>)
   18a46:	681a      	ldr	r2, [r3, #0]
   18a48:	687b      	ldr	r3, [r7, #4]
   18a4a:	18d2      	adds	r2, r2, r3
   18a4c:	4b18      	ldr	r3, [pc, #96]	; (18ab0 <pvPortMalloc+0xb0>)
   18a4e:	681b      	ldr	r3, [r3, #0]
		if( ( ( xNextFreeByte + xWantedSize ) < configADJUSTED_HEAP_SIZE ) &&
   18a50:	429a      	cmp	r2, r3
   18a52:	d90b      	bls.n	18a6c <pvPortMalloc+0x6c>
		{
			/* Return the next free byte then increment the index past this
			block. */
			pvReturn = pucAlignedHeap + xNextFreeByte;
   18a54:	4b14      	ldr	r3, [pc, #80]	; (18aa8 <pvPortMalloc+0xa8>)
   18a56:	681a      	ldr	r2, [r3, #0]
   18a58:	4b15      	ldr	r3, [pc, #84]	; (18ab0 <pvPortMalloc+0xb0>)
   18a5a:	681b      	ldr	r3, [r3, #0]
   18a5c:	18d3      	adds	r3, r2, r3
   18a5e:	60fb      	str	r3, [r7, #12]
			xNextFreeByte += xWantedSize;
   18a60:	4b13      	ldr	r3, [pc, #76]	; (18ab0 <pvPortMalloc+0xb0>)
   18a62:	681a      	ldr	r2, [r3, #0]
   18a64:	687b      	ldr	r3, [r7, #4]
   18a66:	18d2      	adds	r2, r2, r3
   18a68:	4b11      	ldr	r3, [pc, #68]	; (18ab0 <pvPortMalloc+0xb0>)
   18a6a:	601a      	str	r2, [r3, #0]
		}

		traceMALLOC( pvReturn, xWantedSize );
   18a6c:	68fb      	ldr	r3, [r7, #12]
   18a6e:	2b00      	cmp	r3, #0
   18a70:	d006      	beq.n	18a80 <pvPortMalloc+0x80>
   18a72:	68fb      	ldr	r3, [r7, #12]
   18a74:	687a      	ldr	r2, [r7, #4]
   18a76:	0019      	movs	r1, r3
   18a78:	2094      	movs	r0, #148	; 0x94
   18a7a:	4b0f      	ldr	r3, [pc, #60]	; (18ab8 <pvPortMalloc+0xb8>)
   18a7c:	4798      	blx	r3
   18a7e:	e005      	b.n	18a8c <pvPortMalloc+0x8c>
   18a80:	68fb      	ldr	r3, [r7, #12]
   18a82:	687a      	ldr	r2, [r7, #4]
   18a84:	0019      	movs	r1, r3
   18a86:	20e8      	movs	r0, #232	; 0xe8
   18a88:	4b0b      	ldr	r3, [pc, #44]	; (18ab8 <pvPortMalloc+0xb8>)
   18a8a:	4798      	blx	r3
	}
	( void ) xTaskResumeAll();
   18a8c:	4b0b      	ldr	r3, [pc, #44]	; (18abc <pvPortMalloc+0xbc>)
   18a8e:	4798      	blx	r3

	#if( configUSE_MALLOC_FAILED_HOOK == 1 )
	{
		if( pvReturn == NULL )
   18a90:	68fb      	ldr	r3, [r7, #12]
   18a92:	2b00      	cmp	r3, #0
   18a94:	d101      	bne.n	18a9a <pvPortMalloc+0x9a>
		{
			extern void vApplicationMallocFailedHook( void );
			vApplicationMallocFailedHook();
   18a96:	4b0a      	ldr	r3, [pc, #40]	; (18ac0 <pvPortMalloc+0xc0>)
   18a98:	4798      	blx	r3
		}
	}
	#endif

	return pvReturn;
   18a9a:	68fb      	ldr	r3, [r7, #12]
}
   18a9c:	0018      	movs	r0, r3
   18a9e:	46bd      	mov	sp, r7
   18aa0:	b004      	add	sp, #16
   18aa2:	bd80      	pop	{r7, pc}
   18aa4:	0001ab85 	.word	0x0001ab85
   18aa8:	20003b74 	.word	0x20003b74
   18aac:	20000c98 	.word	0x20000c98
   18ab0:	20003b70 	.word	0x20003b70
   18ab4:	00002ed7 	.word	0x00002ed7
   18ab8:	00017169 	.word	0x00017169
   18abc:	0001ab9d 	.word	0x0001ab9d
   18ac0:	000310bd 	.word	0x000310bd

00018ac4 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
   18ac4:	b580      	push	{r7, lr}
   18ac6:	b082      	sub	sp, #8
   18ac8:	af00      	add	r7, sp, #0
   18aca:	6078      	str	r0, [r7, #4]
	heap_4.c for alternative implementations, and the memory management pages of
	http://www.FreeRTOS.org for more information. */
	( void ) pv;

	/* Force an assert as it is invalid to call this function. */
	configASSERT( pv == NULL );
   18acc:	687b      	ldr	r3, [r7, #4]
   18ace:	2b00      	cmp	r3, #0
   18ad0:	d001      	beq.n	18ad6 <vPortFree+0x12>
   18ad2:	b672      	cpsid	i
   18ad4:	e7fe      	b.n	18ad4 <vPortFree+0x10>
}
   18ad6:	46c0      	nop			; (mov r8, r8)
   18ad8:	46bd      	mov	sp, r7
   18ada:	b002      	add	sp, #8
   18adc:	bd80      	pop	{r7, pc}
	...

00018ae0 <xPortGetFreeHeapSize>:
	xNextFreeByte = ( size_t ) 0;
}
/*-----------------------------------------------------------*/

size_t xPortGetFreeHeapSize( void )
{
   18ae0:	b580      	push	{r7, lr}
   18ae2:	af00      	add	r7, sp, #0
	return ( configADJUSTED_HEAP_SIZE - xNextFreeByte );
   18ae4:	4b03      	ldr	r3, [pc, #12]	; (18af4 <xPortGetFreeHeapSize+0x14>)
   18ae6:	681b      	ldr	r3, [r3, #0]
   18ae8:	4a03      	ldr	r2, [pc, #12]	; (18af8 <xPortGetFreeHeapSize+0x18>)
   18aea:	1ad3      	subs	r3, r2, r3
}
   18aec:	0018      	movs	r0, r3
   18aee:	46bd      	mov	sp, r7
   18af0:	bd80      	pop	{r7, pc}
   18af2:	46c0      	nop			; (mov r8, r8)
   18af4:	20003b70 	.word	0x20003b70
   18af8:	00002ed8 	.word	0x00002ed8

00018afc <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
   18afc:	b580      	push	{r7, lr}
   18afe:	b084      	sub	sp, #16
   18b00:	af00      	add	r7, sp, #0
   18b02:	6078      	str	r0, [r7, #4]
   18b04:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
   18b06:	687b      	ldr	r3, [r7, #4]
   18b08:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
   18b0a:	68fb      	ldr	r3, [r7, #12]
   18b0c:	2b00      	cmp	r3, #0
   18b0e:	d101      	bne.n	18b14 <xQueueGenericReset+0x18>
   18b10:	b672      	cpsid	i
   18b12:	e7fe      	b.n	18b12 <xQueueGenericReset+0x16>

	taskENTER_CRITICAL();
   18b14:	4b23      	ldr	r3, [pc, #140]	; (18ba4 <xQueueGenericReset+0xa8>)
   18b16:	4798      	blx	r3
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
   18b18:	68fb      	ldr	r3, [r7, #12]
   18b1a:	681a      	ldr	r2, [r3, #0]
   18b1c:	68fb      	ldr	r3, [r7, #12]
   18b1e:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
   18b20:	68fb      	ldr	r3, [r7, #12]
   18b22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   18b24:	434b      	muls	r3, r1
   18b26:	18d2      	adds	r2, r2, r3
   18b28:	68fb      	ldr	r3, [r7, #12]
   18b2a:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
   18b2c:	68fb      	ldr	r3, [r7, #12]
   18b2e:	2200      	movs	r2, #0
   18b30:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
   18b32:	68fb      	ldr	r3, [r7, #12]
   18b34:	681a      	ldr	r2, [r3, #0]
   18b36:	68fb      	ldr	r3, [r7, #12]
   18b38:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
   18b3a:	68fb      	ldr	r3, [r7, #12]
   18b3c:	681a      	ldr	r2, [r3, #0]
   18b3e:	68fb      	ldr	r3, [r7, #12]
   18b40:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   18b42:	1e59      	subs	r1, r3, #1
   18b44:	68fb      	ldr	r3, [r7, #12]
   18b46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   18b48:	434b      	muls	r3, r1
   18b4a:	18d2      	adds	r2, r2, r3
   18b4c:	68fb      	ldr	r3, [r7, #12]
   18b4e:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
   18b50:	68fb      	ldr	r3, [r7, #12]
   18b52:	2244      	movs	r2, #68	; 0x44
   18b54:	21ff      	movs	r1, #255	; 0xff
   18b56:	5499      	strb	r1, [r3, r2]
		pxQueue->cTxLock = queueUNLOCKED;
   18b58:	68fb      	ldr	r3, [r7, #12]
   18b5a:	2245      	movs	r2, #69	; 0x45
   18b5c:	21ff      	movs	r1, #255	; 0xff
   18b5e:	5499      	strb	r1, [r3, r2]

		if( xNewQueue == pdFALSE )
   18b60:	683b      	ldr	r3, [r7, #0]
   18b62:	2b00      	cmp	r3, #0
   18b64:	d10d      	bne.n	18b82 <xQueueGenericReset+0x86>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
   18b66:	68fb      	ldr	r3, [r7, #12]
   18b68:	691b      	ldr	r3, [r3, #16]
   18b6a:	2b00      	cmp	r3, #0
   18b6c:	d013      	beq.n	18b96 <xQueueGenericReset+0x9a>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
   18b6e:	68fb      	ldr	r3, [r7, #12]
   18b70:	3310      	adds	r3, #16
   18b72:	0018      	movs	r0, r3
   18b74:	4b0c      	ldr	r3, [pc, #48]	; (18ba8 <xQueueGenericReset+0xac>)
   18b76:	4798      	blx	r3
   18b78:	1e03      	subs	r3, r0, #0
   18b7a:	d00c      	beq.n	18b96 <xQueueGenericReset+0x9a>
				{
					queueYIELD_IF_USING_PREEMPTION();
   18b7c:	4b0b      	ldr	r3, [pc, #44]	; (18bac <xQueueGenericReset+0xb0>)
   18b7e:	4798      	blx	r3
   18b80:	e009      	b.n	18b96 <xQueueGenericReset+0x9a>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
   18b82:	68fb      	ldr	r3, [r7, #12]
   18b84:	3310      	adds	r3, #16
   18b86:	0018      	movs	r0, r3
   18b88:	4b09      	ldr	r3, [pc, #36]	; (18bb0 <xQueueGenericReset+0xb4>)
   18b8a:	4798      	blx	r3
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
   18b8c:	68fb      	ldr	r3, [r7, #12]
   18b8e:	3324      	adds	r3, #36	; 0x24
   18b90:	0018      	movs	r0, r3
   18b92:	4b07      	ldr	r3, [pc, #28]	; (18bb0 <xQueueGenericReset+0xb4>)
   18b94:	4798      	blx	r3
		}
	}
	taskEXIT_CRITICAL();
   18b96:	4b07      	ldr	r3, [pc, #28]	; (18bb4 <xQueueGenericReset+0xb8>)
   18b98:	4798      	blx	r3

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
   18b9a:	2301      	movs	r3, #1
}
   18b9c:	0018      	movs	r0, r3
   18b9e:	46bd      	mov	sp, r7
   18ba0:	b004      	add	sp, #16
   18ba2:	bd80      	pop	{r7, pc}
   18ba4:	000188c9 	.word	0x000188c9
   18ba8:	0001b15d 	.word	0x0001b15d
   18bac:	000188b1 	.word	0x000188b1
   18bb0:	00018639 	.word	0x00018639
   18bb4:	000188ed 	.word	0x000188ed

00018bb8 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
   18bb8:	b590      	push	{r4, r7, lr}
   18bba:	b08b      	sub	sp, #44	; 0x2c
   18bbc:	af02      	add	r7, sp, #8
   18bbe:	60f8      	str	r0, [r7, #12]
   18bc0:	60b9      	str	r1, [r7, #8]
   18bc2:	1dfb      	adds	r3, r7, #7
   18bc4:	701a      	strb	r2, [r3, #0]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
   18bc6:	68fb      	ldr	r3, [r7, #12]
   18bc8:	2b00      	cmp	r3, #0
   18bca:	d101      	bne.n	18bd0 <xQueueGenericCreate+0x18>
   18bcc:	b672      	cpsid	i
   18bce:	e7fe      	b.n	18bce <xQueueGenericCreate+0x16>

		if( uxItemSize == ( UBaseType_t ) 0 )
   18bd0:	68bb      	ldr	r3, [r7, #8]
   18bd2:	2b00      	cmp	r3, #0
   18bd4:	d102      	bne.n	18bdc <xQueueGenericCreate+0x24>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
   18bd6:	2300      	movs	r3, #0
   18bd8:	61fb      	str	r3, [r7, #28]
   18bda:	e003      	b.n	18be4 <xQueueGenericCreate+0x2c>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
   18bdc:	68fb      	ldr	r3, [r7, #12]
   18bde:	68ba      	ldr	r2, [r7, #8]
   18be0:	4353      	muls	r3, r2
   18be2:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
   18be4:	69fb      	ldr	r3, [r7, #28]
   18be6:	3354      	adds	r3, #84	; 0x54
   18be8:	0018      	movs	r0, r3
   18bea:	4b19      	ldr	r3, [pc, #100]	; (18c50 <xQueueGenericCreate+0x98>)
   18bec:	4798      	blx	r3
   18bee:	0003      	movs	r3, r0
   18bf0:	61bb      	str	r3, [r7, #24]

		if( pxNewQueue != NULL )
   18bf2:	69bb      	ldr	r3, [r7, #24]
   18bf4:	2b00      	cmp	r3, #0
   18bf6:	d00d      	beq.n	18c14 <xQueueGenericCreate+0x5c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
   18bf8:	69bb      	ldr	r3, [r7, #24]
   18bfa:	3354      	adds	r3, #84	; 0x54
   18bfc:	617b      	str	r3, [r7, #20]
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
   18bfe:	1dfb      	adds	r3, r7, #7
   18c00:	781c      	ldrb	r4, [r3, #0]
   18c02:	697a      	ldr	r2, [r7, #20]
   18c04:	68b9      	ldr	r1, [r7, #8]
   18c06:	68f8      	ldr	r0, [r7, #12]
   18c08:	69bb      	ldr	r3, [r7, #24]
   18c0a:	9300      	str	r3, [sp, #0]
   18c0c:	0023      	movs	r3, r4
   18c0e:	4c11      	ldr	r4, [pc, #68]	; (18c54 <xQueueGenericCreate+0x9c>)
   18c10:	47a0      	blx	r4
   18c12:	e017      	b.n	18c44 <xQueueGenericCreate+0x8c>
		}
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
   18c14:	4b10      	ldr	r3, [pc, #64]	; (18c58 <xQueueGenericCreate+0xa0>)
   18c16:	4798      	blx	r3
   18c18:	0003      	movs	r3, r0
   18c1a:	0018      	movs	r0, r3
   18c1c:	4b0f      	ldr	r3, [pc, #60]	; (18c5c <xQueueGenericCreate+0xa4>)
   18c1e:	4798      	blx	r3
   18c20:	0003      	movs	r3, r0
   18c22:	001a      	movs	r2, r3
   18c24:	4b0e      	ldr	r3, [pc, #56]	; (18c60 <xQueueGenericCreate+0xa8>)
   18c26:	881b      	ldrh	r3, [r3, #0]
   18c28:	4013      	ands	r3, r2
   18c2a:	b29b      	uxth	r3, r3
   18c2c:	2b00      	cmp	r3, #0
   18c2e:	d009      	beq.n	18c44 <xQueueGenericCreate+0x8c>
   18c30:	1dfb      	adds	r3, r7, #7
   18c32:	781b      	ldrb	r3, [r3, #0]
   18c34:	4a0b      	ldr	r2, [pc, #44]	; (18c64 <xQueueGenericCreate+0xac>)
   18c36:	5cd3      	ldrb	r3, [r2, r3]
   18c38:	3340      	adds	r3, #64	; 0x40
   18c3a:	b2db      	uxtb	r3, r3
   18c3c:	2100      	movs	r1, #0
   18c3e:	0018      	movs	r0, r3
   18c40:	4b09      	ldr	r3, [pc, #36]	; (18c68 <xQueueGenericCreate+0xb0>)
   18c42:	4798      	blx	r3
		}

		return pxNewQueue;
   18c44:	69bb      	ldr	r3, [r7, #24]
	}
   18c46:	0018      	movs	r0, r3
   18c48:	46bd      	mov	sp, r7
   18c4a:	b009      	add	sp, #36	; 0x24
   18c4c:	bd90      	pop	{r4, r7, pc}
   18c4e:	46c0      	nop			; (mov r8, r8)
   18c50:	00018a01 	.word	0x00018a01
   18c54:	00018c6d 	.word	0x00018c6d
   18c58:	00016b5d 	.word	0x00016b5d
   18c5c:	000168c1 	.word	0x000168c1
   18c60:	20000120 	.word	0x20000120
   18c64:	20000114 	.word	0x20000114
   18c68:	000175c1 	.word	0x000175c1

00018c6c <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
   18c6c:	b5b0      	push	{r4, r5, r7, lr}
   18c6e:	b084      	sub	sp, #16
   18c70:	af00      	add	r7, sp, #0
   18c72:	60f8      	str	r0, [r7, #12]
   18c74:	60b9      	str	r1, [r7, #8]
   18c76:	607a      	str	r2, [r7, #4]
   18c78:	001a      	movs	r2, r3
   18c7a:	1cfb      	adds	r3, r7, #3
   18c7c:	701a      	strb	r2, [r3, #0]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
   18c7e:	68bb      	ldr	r3, [r7, #8]
   18c80:	2b00      	cmp	r3, #0
   18c82:	d103      	bne.n	18c8c <prvInitialiseNewQueue+0x20>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
   18c84:	6a3b      	ldr	r3, [r7, #32]
   18c86:	6a3a      	ldr	r2, [r7, #32]
   18c88:	601a      	str	r2, [r3, #0]
   18c8a:	e002      	b.n	18c92 <prvInitialiseNewQueue+0x26>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
   18c8c:	6a3b      	ldr	r3, [r7, #32]
   18c8e:	687a      	ldr	r2, [r7, #4]
   18c90:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
   18c92:	6a3b      	ldr	r3, [r7, #32]
   18c94:	68fa      	ldr	r2, [r7, #12]
   18c96:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
   18c98:	6a3b      	ldr	r3, [r7, #32]
   18c9a:	68ba      	ldr	r2, [r7, #8]
   18c9c:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
   18c9e:	6a3b      	ldr	r3, [r7, #32]
   18ca0:	2101      	movs	r1, #1
   18ca2:	0018      	movs	r0, r3
   18ca4:	4b41      	ldr	r3, [pc, #260]	; (18dac <prvInitialiseNewQueue+0x140>)
   18ca6:	4798      	blx	r3

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
   18ca8:	6a3b      	ldr	r3, [r7, #32]
   18caa:	1cfa      	adds	r2, r7, #3
   18cac:	2150      	movs	r1, #80	; 0x50
   18cae:	7812      	ldrb	r2, [r2, #0]
   18cb0:	545a      	strb	r2, [r3, r1]
	}
	#endif /* configUSE_TRACE_FACILITY */

	#if( configUSE_QUEUE_SETS == 1 )
	{
		pxNewQueue->pxQueueSetContainer = NULL;
   18cb2:	6a3b      	ldr	r3, [r7, #32]
   18cb4:	2200      	movs	r2, #0
   18cb6:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
   18cb8:	6a3b      	ldr	r3, [r7, #32]
   18cba:	0018      	movs	r0, r3
   18cbc:	4b3c      	ldr	r3, [pc, #240]	; (18db0 <prvInitialiseNewQueue+0x144>)
   18cbe:	4798      	blx	r3
   18cc0:	0003      	movs	r3, r0
   18cc2:	001a      	movs	r2, r3
   18cc4:	4b3b      	ldr	r3, [pc, #236]	; (18db4 <prvInitialiseNewQueue+0x148>)
   18cc6:	5c9b      	ldrb	r3, [r3, r2]
   18cc8:	0018      	movs	r0, r3
   18cca:	4b3b      	ldr	r3, [pc, #236]	; (18db8 <prvInitialiseNewQueue+0x14c>)
   18ccc:	4798      	blx	r3
   18cce:	0003      	movs	r3, r0
   18cd0:	b29a      	uxth	r2, r3
   18cd2:	6a3b      	ldr	r3, [r7, #32]
   18cd4:	0011      	movs	r1, r2
   18cd6:	0018      	movs	r0, r3
   18cd8:	4b38      	ldr	r3, [pc, #224]	; (18dbc <prvInitialiseNewQueue+0x150>)
   18cda:	4798      	blx	r3
   18cdc:	4b38      	ldr	r3, [pc, #224]	; (18dc0 <prvInitialiseNewQueue+0x154>)
   18cde:	881a      	ldrh	r2, [r3, #0]
   18ce0:	6a3b      	ldr	r3, [r7, #32]
   18ce2:	0011      	movs	r1, r2
   18ce4:	0018      	movs	r0, r3
   18ce6:	4b37      	ldr	r3, [pc, #220]	; (18dc4 <prvInitialiseNewQueue+0x158>)
   18ce8:	4798      	blx	r3
   18cea:	6a3b      	ldr	r3, [r7, #32]
   18cec:	0018      	movs	r0, r3
   18cee:	4b30      	ldr	r3, [pc, #192]	; (18db0 <prvInitialiseNewQueue+0x144>)
   18cf0:	4798      	blx	r3
   18cf2:	0003      	movs	r3, r0
   18cf4:	001a      	movs	r2, r3
   18cf6:	4b2f      	ldr	r3, [pc, #188]	; (18db4 <prvInitialiseNewQueue+0x148>)
   18cf8:	5c9c      	ldrb	r4, [r3, r2]
   18cfa:	6a3b      	ldr	r3, [r7, #32]
   18cfc:	0018      	movs	r0, r3
   18cfe:	4b32      	ldr	r3, [pc, #200]	; (18dc8 <prvInitialiseNewQueue+0x15c>)
   18d00:	4798      	blx	r3
   18d02:	0003      	movs	r3, r0
   18d04:	b2db      	uxtb	r3, r3
   18d06:	0019      	movs	r1, r3
   18d08:	0020      	movs	r0, r4
   18d0a:	4b30      	ldr	r3, [pc, #192]	; (18dcc <prvInitialiseNewQueue+0x160>)
   18d0c:	4798      	blx	r3
   18d0e:	4b30      	ldr	r3, [pc, #192]	; (18dd0 <prvInitialiseNewQueue+0x164>)
   18d10:	4798      	blx	r3
   18d12:	0003      	movs	r3, r0
   18d14:	0018      	movs	r0, r3
   18d16:	4b2f      	ldr	r3, [pc, #188]	; (18dd4 <prvInitialiseNewQueue+0x168>)
   18d18:	4798      	blx	r3
   18d1a:	0003      	movs	r3, r0
   18d1c:	001a      	movs	r2, r3
   18d1e:	4b2e      	ldr	r3, [pc, #184]	; (18dd8 <prvInitialiseNewQueue+0x16c>)
   18d20:	881b      	ldrh	r3, [r3, #0]
   18d22:	4013      	ands	r3, r2
   18d24:	b29b      	uxth	r3, r3
   18d26:	2b00      	cmp	r3, #0
   18d28:	d029      	beq.n	18d7e <prvInitialiseNewQueue+0x112>
   18d2a:	6a3b      	ldr	r3, [r7, #32]
   18d2c:	0018      	movs	r0, r3
   18d2e:	4b2b      	ldr	r3, [pc, #172]	; (18ddc <prvInitialiseNewQueue+0x170>)
   18d30:	4798      	blx	r3
   18d32:	0003      	movs	r3, r0
   18d34:	001a      	movs	r2, r3
   18d36:	4b28      	ldr	r3, [pc, #160]	; (18dd8 <prvInitialiseNewQueue+0x16c>)
   18d38:	881b      	ldrh	r3, [r3, #0]
   18d3a:	4013      	ands	r3, r2
   18d3c:	b29b      	uxth	r3, r3
   18d3e:	2b00      	cmp	r3, #0
   18d40:	d01d      	beq.n	18d7e <prvInitialiseNewQueue+0x112>
   18d42:	6a3b      	ldr	r3, [r7, #32]
   18d44:	0018      	movs	r0, r3
   18d46:	4b1a      	ldr	r3, [pc, #104]	; (18db0 <prvInitialiseNewQueue+0x144>)
   18d48:	4798      	blx	r3
   18d4a:	0003      	movs	r3, r0
   18d4c:	001a      	movs	r2, r3
   18d4e:	4b19      	ldr	r3, [pc, #100]	; (18db4 <prvInitialiseNewQueue+0x148>)
   18d50:	5c9b      	ldrb	r3, [r3, r2]
   18d52:	3318      	adds	r3, #24
   18d54:	b2db      	uxtb	r3, r3
   18d56:	001d      	movs	r5, r3
   18d58:	6a3b      	ldr	r3, [r7, #32]
   18d5a:	0018      	movs	r0, r3
   18d5c:	4b14      	ldr	r3, [pc, #80]	; (18db0 <prvInitialiseNewQueue+0x144>)
   18d5e:	4798      	blx	r3
   18d60:	0003      	movs	r3, r0
   18d62:	001a      	movs	r2, r3
   18d64:	4b13      	ldr	r3, [pc, #76]	; (18db4 <prvInitialiseNewQueue+0x148>)
   18d66:	5c9c      	ldrb	r4, [r3, r2]
   18d68:	6a3b      	ldr	r3, [r7, #32]
   18d6a:	0018      	movs	r0, r3
   18d6c:	4b16      	ldr	r3, [pc, #88]	; (18dc8 <prvInitialiseNewQueue+0x15c>)
   18d6e:	4798      	blx	r3
   18d70:	0003      	movs	r3, r0
   18d72:	b2db      	uxtb	r3, r3
   18d74:	001a      	movs	r2, r3
   18d76:	0021      	movs	r1, r4
   18d78:	0028      	movs	r0, r5
   18d7a:	4b19      	ldr	r3, [pc, #100]	; (18de0 <prvInitialiseNewQueue+0x174>)
   18d7c:	4798      	blx	r3
   18d7e:	6a3b      	ldr	r3, [r7, #32]
   18d80:	0018      	movs	r0, r3
   18d82:	4b0b      	ldr	r3, [pc, #44]	; (18db0 <prvInitialiseNewQueue+0x144>)
   18d84:	4798      	blx	r3
   18d86:	0003      	movs	r3, r0
   18d88:	001a      	movs	r2, r3
   18d8a:	4b0a      	ldr	r3, [pc, #40]	; (18db4 <prvInitialiseNewQueue+0x148>)
   18d8c:	5c9c      	ldrb	r4, [r3, r2]
   18d8e:	6a3b      	ldr	r3, [r7, #32]
   18d90:	0018      	movs	r0, r3
   18d92:	4b0d      	ldr	r3, [pc, #52]	; (18dc8 <prvInitialiseNewQueue+0x15c>)
   18d94:	4798      	blx	r3
   18d96:	0003      	movs	r3, r0
   18d98:	b2db      	uxtb	r3, r3
   18d9a:	2200      	movs	r2, #0
   18d9c:	0019      	movs	r1, r3
   18d9e:	0020      	movs	r0, r4
   18da0:	4b10      	ldr	r3, [pc, #64]	; (18de4 <prvInitialiseNewQueue+0x178>)
   18da2:	4798      	blx	r3
}
   18da4:	46c0      	nop			; (mov r8, r8)
   18da6:	46bd      	mov	sp, r7
   18da8:	b004      	add	sp, #16
   18daa:	bdb0      	pop	{r4, r5, r7, pc}
   18dac:	00018afd 	.word	0x00018afd
   18db0:	00016881 	.word	0x00016881
   18db4:	20000114 	.word	0x20000114
   18db8:	00017e41 	.word	0x00017e41
   18dbc:	000169a5 	.word	0x000169a5
   18dc0:	20000122 	.word	0x20000122
   18dc4:	000169e1 	.word	0x000169e1
   18dc8:	00016961 	.word	0x00016961
   18dcc:	00017fd9 	.word	0x00017fd9
   18dd0:	00016b5d 	.word	0x00016b5d
   18dd4:	000168c1 	.word	0x000168c1
   18dd8:	20000120 	.word	0x20000120
   18ddc:	00016981 	.word	0x00016981
   18de0:	000172b9 	.word	0x000172b9
   18de4:	00017915 	.word	0x00017915

00018de8 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
   18de8:	b590      	push	{r4, r7, lr}
   18dea:	b083      	sub	sp, #12
   18dec:	af00      	add	r7, sp, #0
   18dee:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
   18df0:	687b      	ldr	r3, [r7, #4]
   18df2:	2b00      	cmp	r3, #0
   18df4:	d00e      	beq.n	18e14 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->pxMutexHolder = NULL;
   18df6:	687b      	ldr	r3, [r7, #4]
   18df8:	2200      	movs	r2, #0
   18dfa:	605a      	str	r2, [r3, #4]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
   18dfc:	687b      	ldr	r3, [r7, #4]
   18dfe:	2200      	movs	r2, #0
   18e00:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.uxRecursiveCallCount = 0;
   18e02:	687b      	ldr	r3, [r7, #4]
   18e04:	2200      	movs	r2, #0
   18e06:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
   18e08:	6878      	ldr	r0, [r7, #4]
   18e0a:	2300      	movs	r3, #0
   18e0c:	2200      	movs	r2, #0
   18e0e:	2100      	movs	r1, #0
   18e10:	4c02      	ldr	r4, [pc, #8]	; (18e1c <prvInitialiseMutex+0x34>)
   18e12:	47a0      	blx	r4
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
   18e14:	46c0      	nop			; (mov r8, r8)
   18e16:	46bd      	mov	sp, r7
   18e18:	b003      	add	sp, #12
   18e1a:	bd90      	pop	{r4, r7, pc}
   18e1c:	00018e61 	.word	0x00018e61

00018e20 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
   18e20:	b580      	push	{r7, lr}
   18e22:	b086      	sub	sp, #24
   18e24:	af00      	add	r7, sp, #0
   18e26:	0002      	movs	r2, r0
   18e28:	1dfb      	adds	r3, r7, #7
   18e2a:	701a      	strb	r2, [r3, #0]
	Queue_t *pxNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
   18e2c:	2301      	movs	r3, #1
   18e2e:	617b      	str	r3, [r7, #20]
   18e30:	2300      	movs	r3, #0
   18e32:	613b      	str	r3, [r7, #16]

		pxNewQueue = ( Queue_t * ) xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
   18e34:	1dfb      	adds	r3, r7, #7
   18e36:	781a      	ldrb	r2, [r3, #0]
   18e38:	6939      	ldr	r1, [r7, #16]
   18e3a:	697b      	ldr	r3, [r7, #20]
   18e3c:	0018      	movs	r0, r3
   18e3e:	4b06      	ldr	r3, [pc, #24]	; (18e58 <xQueueCreateMutex+0x38>)
   18e40:	4798      	blx	r3
   18e42:	0003      	movs	r3, r0
   18e44:	60fb      	str	r3, [r7, #12]
		prvInitialiseMutex( pxNewQueue );
   18e46:	68fb      	ldr	r3, [r7, #12]
   18e48:	0018      	movs	r0, r3
   18e4a:	4b04      	ldr	r3, [pc, #16]	; (18e5c <xQueueCreateMutex+0x3c>)
   18e4c:	4798      	blx	r3

		return pxNewQueue;
   18e4e:	68fb      	ldr	r3, [r7, #12]
	}
   18e50:	0018      	movs	r0, r3
   18e52:	46bd      	mov	sp, r7
   18e54:	b006      	add	sp, #24
   18e56:	bd80      	pop	{r7, pc}
   18e58:	00018bb9 	.word	0x00018bb9
   18e5c:	00018de9 	.word	0x00018de9

00018e60 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
   18e60:	b5b0      	push	{r4, r5, r7, lr}
   18e62:	b08a      	sub	sp, #40	; 0x28
   18e64:	af00      	add	r7, sp, #0
   18e66:	60f8      	str	r0, [r7, #12]
   18e68:	60b9      	str	r1, [r7, #8]
   18e6a:	607a      	str	r2, [r7, #4]
   18e6c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
   18e6e:	2300      	movs	r3, #0
   18e70:	627b      	str	r3, [r7, #36]	; 0x24
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
   18e72:	68fb      	ldr	r3, [r7, #12]
   18e74:	623b      	str	r3, [r7, #32]

	configASSERT( pxQueue );
   18e76:	6a3b      	ldr	r3, [r7, #32]
   18e78:	2b00      	cmp	r3, #0
   18e7a:	d101      	bne.n	18e80 <xQueueGenericSend+0x20>
   18e7c:	b672      	cpsid	i
   18e7e:	e7fe      	b.n	18e7e <xQueueGenericSend+0x1e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
   18e80:	68bb      	ldr	r3, [r7, #8]
   18e82:	2b00      	cmp	r3, #0
   18e84:	d103      	bne.n	18e8e <xQueueGenericSend+0x2e>
   18e86:	6a3b      	ldr	r3, [r7, #32]
   18e88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   18e8a:	2b00      	cmp	r3, #0
   18e8c:	d101      	bne.n	18e92 <xQueueGenericSend+0x32>
   18e8e:	2301      	movs	r3, #1
   18e90:	e000      	b.n	18e94 <xQueueGenericSend+0x34>
   18e92:	2300      	movs	r3, #0
   18e94:	2b00      	cmp	r3, #0
   18e96:	d101      	bne.n	18e9c <xQueueGenericSend+0x3c>
   18e98:	b672      	cpsid	i
   18e9a:	e7fe      	b.n	18e9a <xQueueGenericSend+0x3a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
   18e9c:	683b      	ldr	r3, [r7, #0]
   18e9e:	2b02      	cmp	r3, #2
   18ea0:	d103      	bne.n	18eaa <xQueueGenericSend+0x4a>
   18ea2:	6a3b      	ldr	r3, [r7, #32]
   18ea4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   18ea6:	2b01      	cmp	r3, #1
   18ea8:	d101      	bne.n	18eae <xQueueGenericSend+0x4e>
   18eaa:	2301      	movs	r3, #1
   18eac:	e000      	b.n	18eb0 <xQueueGenericSend+0x50>
   18eae:	2300      	movs	r3, #0
   18eb0:	2b00      	cmp	r3, #0
   18eb2:	d101      	bne.n	18eb8 <xQueueGenericSend+0x58>
   18eb4:	b672      	cpsid	i
   18eb6:	e7fe      	b.n	18eb6 <xQueueGenericSend+0x56>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
   18eb8:	4bbc      	ldr	r3, [pc, #752]	; (191ac <xQueueGenericSend+0x34c>)
   18eba:	4798      	blx	r3
   18ebc:	1e03      	subs	r3, r0, #0
   18ebe:	d102      	bne.n	18ec6 <xQueueGenericSend+0x66>
   18ec0:	687b      	ldr	r3, [r7, #4]
   18ec2:	2b00      	cmp	r3, #0
   18ec4:	d101      	bne.n	18eca <xQueueGenericSend+0x6a>
   18ec6:	2301      	movs	r3, #1
   18ec8:	e000      	b.n	18ecc <xQueueGenericSend+0x6c>
   18eca:	2300      	movs	r3, #0
   18ecc:	2b00      	cmp	r3, #0
   18ece:	d101      	bne.n	18ed4 <xQueueGenericSend+0x74>
   18ed0:	b672      	cpsid	i
   18ed2:	e7fe      	b.n	18ed2 <xQueueGenericSend+0x72>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
   18ed4:	4bb6      	ldr	r3, [pc, #728]	; (191b0 <xQueueGenericSend+0x350>)
   18ed6:	4798      	blx	r3
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
   18ed8:	6a3b      	ldr	r3, [r7, #32]
   18eda:	6b9a      	ldr	r2, [r3, #56]	; 0x38
   18edc:	6a3b      	ldr	r3, [r7, #32]
   18ede:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   18ee0:	429a      	cmp	r2, r3
   18ee2:	d303      	bcc.n	18eec <xQueueGenericSend+0x8c>
   18ee4:	683b      	ldr	r3, [r7, #0]
   18ee6:	2b02      	cmp	r3, #2
   18ee8:	d000      	beq.n	18eec <xQueueGenericSend+0x8c>
   18eea:	e08e      	b.n	1900a <xQueueGenericSend+0x1aa>
			{
				traceQUEUE_SEND( pxQueue );
   18eec:	4bb1      	ldr	r3, [pc, #708]	; (191b4 <xQueueGenericSend+0x354>)
   18eee:	4798      	blx	r3
   18ef0:	0003      	movs	r3, r0
   18ef2:	0018      	movs	r0, r3
   18ef4:	4bb0      	ldr	r3, [pc, #704]	; (191b8 <xQueueGenericSend+0x358>)
   18ef6:	4798      	blx	r3
   18ef8:	0003      	movs	r3, r0
   18efa:	001a      	movs	r2, r3
   18efc:	4baf      	ldr	r3, [pc, #700]	; (191bc <xQueueGenericSend+0x35c>)
   18efe:	881b      	ldrh	r3, [r3, #0]
   18f00:	4013      	ands	r3, r2
   18f02:	b29b      	uxth	r3, r3
   18f04:	2b00      	cmp	r3, #0
   18f06:	d02e      	beq.n	18f66 <xQueueGenericSend+0x106>
   18f08:	6a3b      	ldr	r3, [r7, #32]
   18f0a:	0018      	movs	r0, r3
   18f0c:	4bac      	ldr	r3, [pc, #688]	; (191c0 <xQueueGenericSend+0x360>)
   18f0e:	4798      	blx	r3
   18f10:	0003      	movs	r3, r0
   18f12:	001a      	movs	r2, r3
   18f14:	4ba9      	ldr	r3, [pc, #676]	; (191bc <xQueueGenericSend+0x35c>)
   18f16:	881b      	ldrh	r3, [r3, #0]
   18f18:	4013      	ands	r3, r2
   18f1a:	b29b      	uxth	r3, r3
   18f1c:	2b00      	cmp	r3, #0
   18f1e:	d022      	beq.n	18f66 <xQueueGenericSend+0x106>
   18f20:	683b      	ldr	r3, [r7, #0]
   18f22:	2b00      	cmp	r3, #0
   18f24:	d10b      	bne.n	18f3e <xQueueGenericSend+0xde>
   18f26:	6a3b      	ldr	r3, [r7, #32]
   18f28:	0018      	movs	r0, r3
   18f2a:	4ba6      	ldr	r3, [pc, #664]	; (191c4 <xQueueGenericSend+0x364>)
   18f2c:	4798      	blx	r3
   18f2e:	0003      	movs	r3, r0
   18f30:	001a      	movs	r2, r3
   18f32:	4ba5      	ldr	r3, [pc, #660]	; (191c8 <xQueueGenericSend+0x368>)
   18f34:	5c9b      	ldrb	r3, [r3, r2]
   18f36:	3320      	adds	r3, #32
   18f38:	b2db      	uxtb	r3, r3
   18f3a:	001d      	movs	r5, r3
   18f3c:	e000      	b.n	18f40 <xQueueGenericSend+0xe0>
   18f3e:	2525      	movs	r5, #37	; 0x25
   18f40:	6a3b      	ldr	r3, [r7, #32]
   18f42:	0018      	movs	r0, r3
   18f44:	4b9f      	ldr	r3, [pc, #636]	; (191c4 <xQueueGenericSend+0x364>)
   18f46:	4798      	blx	r3
   18f48:	0003      	movs	r3, r0
   18f4a:	001a      	movs	r2, r3
   18f4c:	4b9e      	ldr	r3, [pc, #632]	; (191c8 <xQueueGenericSend+0x368>)
   18f4e:	5c9c      	ldrb	r4, [r3, r2]
   18f50:	6a3b      	ldr	r3, [r7, #32]
   18f52:	0018      	movs	r0, r3
   18f54:	4b9d      	ldr	r3, [pc, #628]	; (191cc <xQueueGenericSend+0x36c>)
   18f56:	4798      	blx	r3
   18f58:	0003      	movs	r3, r0
   18f5a:	b2db      	uxtb	r3, r3
   18f5c:	001a      	movs	r2, r3
   18f5e:	0021      	movs	r1, r4
   18f60:	0028      	movs	r0, r5
   18f62:	4b9b      	ldr	r3, [pc, #620]	; (191d0 <xQueueGenericSend+0x370>)
   18f64:	4798      	blx	r3
   18f66:	6a3b      	ldr	r3, [r7, #32]
   18f68:	0018      	movs	r0, r3
   18f6a:	4b96      	ldr	r3, [pc, #600]	; (191c4 <xQueueGenericSend+0x364>)
   18f6c:	4798      	blx	r3
   18f6e:	0003      	movs	r3, r0
   18f70:	001a      	movs	r2, r3
   18f72:	4b95      	ldr	r3, [pc, #596]	; (191c8 <xQueueGenericSend+0x368>)
   18f74:	5c9c      	ldrb	r4, [r3, r2]
   18f76:	6a3b      	ldr	r3, [r7, #32]
   18f78:	0018      	movs	r0, r3
   18f7a:	4b94      	ldr	r3, [pc, #592]	; (191cc <xQueueGenericSend+0x36c>)
   18f7c:	4798      	blx	r3
   18f7e:	0003      	movs	r3, r0
   18f80:	b2dd      	uxtb	r5, r3
   18f82:	6a3b      	ldr	r3, [r7, #32]
   18f84:	0018      	movs	r0, r3
   18f86:	4b8f      	ldr	r3, [pc, #572]	; (191c4 <xQueueGenericSend+0x364>)
   18f88:	4798      	blx	r3
   18f8a:	0003      	movs	r3, r0
   18f8c:	001a      	movs	r2, r3
   18f8e:	4b8e      	ldr	r3, [pc, #568]	; (191c8 <xQueueGenericSend+0x368>)
   18f90:	5c9b      	ldrb	r3, [r3, r2]
   18f92:	2b02      	cmp	r3, #2
   18f94:	d005      	beq.n	18fa2 <xQueueGenericSend+0x142>
   18f96:	6a3b      	ldr	r3, [r7, #32]
   18f98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   18f9a:	b2db      	uxtb	r3, r3
   18f9c:	3301      	adds	r3, #1
   18f9e:	b2db      	uxtb	r3, r3
   18fa0:	e000      	b.n	18fa4 <xQueueGenericSend+0x144>
   18fa2:	2300      	movs	r3, #0
   18fa4:	001a      	movs	r2, r3
   18fa6:	0029      	movs	r1, r5
   18fa8:	0020      	movs	r0, r4
   18faa:	4b8a      	ldr	r3, [pc, #552]	; (191d4 <xQueueGenericSend+0x374>)
   18fac:	4798      	blx	r3
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
   18fae:	683a      	ldr	r2, [r7, #0]
   18fb0:	68b9      	ldr	r1, [r7, #8]
   18fb2:	6a3b      	ldr	r3, [r7, #32]
   18fb4:	0018      	movs	r0, r3
   18fb6:	4b88      	ldr	r3, [pc, #544]	; (191d8 <xQueueGenericSend+0x378>)
   18fb8:	4798      	blx	r3
   18fba:	0003      	movs	r3, r0
   18fbc:	61fb      	str	r3, [r7, #28]

				#if ( configUSE_QUEUE_SETS == 1 )
				{
					if( pxQueue->pxQueueSetContainer != NULL )
   18fbe:	6a3b      	ldr	r3, [r7, #32]
   18fc0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   18fc2:	2b00      	cmp	r3, #0
   18fc4:	d00a      	beq.n	18fdc <xQueueGenericSend+0x17c>
					{
						if( prvNotifyQueueSetContainer( pxQueue, xCopyPosition ) != pdFALSE )
   18fc6:	683a      	ldr	r2, [r7, #0]
   18fc8:	6a3b      	ldr	r3, [r7, #32]
   18fca:	0011      	movs	r1, r2
   18fcc:	0018      	movs	r0, r3
   18fce:	4b83      	ldr	r3, [pc, #524]	; (191dc <xQueueGenericSend+0x37c>)
   18fd0:	4798      	blx	r3
   18fd2:	1e03      	subs	r3, r0, #0
   18fd4:	d015      	beq.n	19002 <xQueueGenericSend+0x1a2>
						{
							/* The queue is a member of a queue set, and posting
							to the queue set caused a higher priority task to
							unblock. A context switch is required. */
							queueYIELD_IF_USING_PREEMPTION();
   18fd6:	4b82      	ldr	r3, [pc, #520]	; (191e0 <xQueueGenericSend+0x380>)
   18fd8:	4798      	blx	r3
   18fda:	e012      	b.n	19002 <xQueueGenericSend+0x1a2>
					}
					else
					{
						/* If there was a task waiting for data to arrive on the
						queue then unblock it now. */
						if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
   18fdc:	6a3b      	ldr	r3, [r7, #32]
   18fde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   18fe0:	2b00      	cmp	r3, #0
   18fe2:	d009      	beq.n	18ff8 <xQueueGenericSend+0x198>
						{
							if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
   18fe4:	6a3b      	ldr	r3, [r7, #32]
   18fe6:	3324      	adds	r3, #36	; 0x24
   18fe8:	0018      	movs	r0, r3
   18fea:	4b7e      	ldr	r3, [pc, #504]	; (191e4 <xQueueGenericSend+0x384>)
   18fec:	4798      	blx	r3
   18fee:	1e03      	subs	r3, r0, #0
   18ff0:	d007      	beq.n	19002 <xQueueGenericSend+0x1a2>
							{
								/* The unblocked task has a priority higher than
								our own so yield immediately.  Yes it is ok to
								do this from within the critical section - the
								kernel takes care of that. */
								queueYIELD_IF_USING_PREEMPTION();
   18ff2:	4b7b      	ldr	r3, [pc, #492]	; (191e0 <xQueueGenericSend+0x380>)
   18ff4:	4798      	blx	r3
   18ff6:	e004      	b.n	19002 <xQueueGenericSend+0x1a2>
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
						}
						else if( xYieldRequired != pdFALSE )
   18ff8:	69fb      	ldr	r3, [r7, #28]
   18ffa:	2b00      	cmp	r3, #0
   18ffc:	d001      	beq.n	19002 <xQueueGenericSend+0x1a2>
						{
							/* This path is a special case that will only get
							executed if the task was holding multiple mutexes
							and the mutexes were given back in an order that is
							different to that in which they were taken. */
							queueYIELD_IF_USING_PREEMPTION();
   18ffe:	4b78      	ldr	r3, [pc, #480]	; (191e0 <xQueueGenericSend+0x380>)
   19000:	4798      	blx	r3
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
   19002:	4b79      	ldr	r3, [pc, #484]	; (191e8 <xQueueGenericSend+0x388>)
   19004:	4798      	blx	r3
				return pdPASS;
   19006:	2301      	movs	r3, #1
   19008:	e142      	b.n	19290 <xQueueGenericSend+0x430>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
   1900a:	687b      	ldr	r3, [r7, #4]
   1900c:	2b00      	cmp	r3, #0
   1900e:	d140      	bne.n	19092 <xQueueGenericSend+0x232>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
   19010:	4b75      	ldr	r3, [pc, #468]	; (191e8 <xQueueGenericSend+0x388>)
   19012:	4798      	blx	r3

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
   19014:	4b67      	ldr	r3, [pc, #412]	; (191b4 <xQueueGenericSend+0x354>)
   19016:	4798      	blx	r3
   19018:	0003      	movs	r3, r0
   1901a:	0018      	movs	r0, r3
   1901c:	4b66      	ldr	r3, [pc, #408]	; (191b8 <xQueueGenericSend+0x358>)
   1901e:	4798      	blx	r3
   19020:	0003      	movs	r3, r0
   19022:	001a      	movs	r2, r3
   19024:	4b65      	ldr	r3, [pc, #404]	; (191bc <xQueueGenericSend+0x35c>)
   19026:	881b      	ldrh	r3, [r3, #0]
   19028:	4013      	ands	r3, r2
   1902a:	b29b      	uxth	r3, r3
   1902c:	2b00      	cmp	r3, #0
   1902e:	d02e      	beq.n	1908e <xQueueGenericSend+0x22e>
   19030:	6a3b      	ldr	r3, [r7, #32]
   19032:	0018      	movs	r0, r3
   19034:	4b62      	ldr	r3, [pc, #392]	; (191c0 <xQueueGenericSend+0x360>)
   19036:	4798      	blx	r3
   19038:	0003      	movs	r3, r0
   1903a:	001a      	movs	r2, r3
   1903c:	4b5f      	ldr	r3, [pc, #380]	; (191bc <xQueueGenericSend+0x35c>)
   1903e:	881b      	ldrh	r3, [r3, #0]
   19040:	4013      	ands	r3, r2
   19042:	b29b      	uxth	r3, r3
   19044:	2b00      	cmp	r3, #0
   19046:	d022      	beq.n	1908e <xQueueGenericSend+0x22e>
   19048:	683b      	ldr	r3, [r7, #0]
   1904a:	2b00      	cmp	r3, #0
   1904c:	d10b      	bne.n	19066 <xQueueGenericSend+0x206>
   1904e:	6a3b      	ldr	r3, [r7, #32]
   19050:	0018      	movs	r0, r3
   19052:	4b5c      	ldr	r3, [pc, #368]	; (191c4 <xQueueGenericSend+0x364>)
   19054:	4798      	blx	r3
   19056:	0003      	movs	r3, r0
   19058:	001a      	movs	r2, r3
   1905a:	4b5b      	ldr	r3, [pc, #364]	; (191c8 <xQueueGenericSend+0x368>)
   1905c:	5c9b      	ldrb	r3, [r3, r2]
   1905e:	3348      	adds	r3, #72	; 0x48
   19060:	b2db      	uxtb	r3, r3
   19062:	001d      	movs	r5, r3
   19064:	e000      	b.n	19068 <xQueueGenericSend+0x208>
   19066:	254d      	movs	r5, #77	; 0x4d
   19068:	6a3b      	ldr	r3, [r7, #32]
   1906a:	0018      	movs	r0, r3
   1906c:	4b55      	ldr	r3, [pc, #340]	; (191c4 <xQueueGenericSend+0x364>)
   1906e:	4798      	blx	r3
   19070:	0003      	movs	r3, r0
   19072:	001a      	movs	r2, r3
   19074:	4b54      	ldr	r3, [pc, #336]	; (191c8 <xQueueGenericSend+0x368>)
   19076:	5c9c      	ldrb	r4, [r3, r2]
   19078:	6a3b      	ldr	r3, [r7, #32]
   1907a:	0018      	movs	r0, r3
   1907c:	4b53      	ldr	r3, [pc, #332]	; (191cc <xQueueGenericSend+0x36c>)
   1907e:	4798      	blx	r3
   19080:	0003      	movs	r3, r0
   19082:	b2db      	uxtb	r3, r3
   19084:	001a      	movs	r2, r3
   19086:	0021      	movs	r1, r4
   19088:	0028      	movs	r0, r5
   1908a:	4b51      	ldr	r3, [pc, #324]	; (191d0 <xQueueGenericSend+0x370>)
   1908c:	4798      	blx	r3
					return errQUEUE_FULL;
   1908e:	2300      	movs	r3, #0
   19090:	e0fe      	b.n	19290 <xQueueGenericSend+0x430>
				}
				else if( xEntryTimeSet == pdFALSE )
   19092:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   19094:	2b00      	cmp	r3, #0
   19096:	d106      	bne.n	190a6 <xQueueGenericSend+0x246>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
   19098:	2314      	movs	r3, #20
   1909a:	18fb      	adds	r3, r7, r3
   1909c:	0018      	movs	r0, r3
   1909e:	4b53      	ldr	r3, [pc, #332]	; (191ec <xQueueGenericSend+0x38c>)
   190a0:	4798      	blx	r3
					xEntryTimeSet = pdTRUE;
   190a2:	2301      	movs	r3, #1
   190a4:	627b      	str	r3, [r7, #36]	; 0x24
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
   190a6:	4b50      	ldr	r3, [pc, #320]	; (191e8 <xQueueGenericSend+0x388>)
   190a8:	4798      	blx	r3

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
   190aa:	4b51      	ldr	r3, [pc, #324]	; (191f0 <xQueueGenericSend+0x390>)
   190ac:	4798      	blx	r3
		prvLockQueue( pxQueue );
   190ae:	4b40      	ldr	r3, [pc, #256]	; (191b0 <xQueueGenericSend+0x350>)
   190b0:	4798      	blx	r3
   190b2:	6a3b      	ldr	r3, [r7, #32]
   190b4:	2244      	movs	r2, #68	; 0x44
   190b6:	5c9b      	ldrb	r3, [r3, r2]
   190b8:	b25b      	sxtb	r3, r3
   190ba:	3301      	adds	r3, #1
   190bc:	d103      	bne.n	190c6 <xQueueGenericSend+0x266>
   190be:	6a3b      	ldr	r3, [r7, #32]
   190c0:	2244      	movs	r2, #68	; 0x44
   190c2:	2100      	movs	r1, #0
   190c4:	5499      	strb	r1, [r3, r2]
   190c6:	6a3b      	ldr	r3, [r7, #32]
   190c8:	2245      	movs	r2, #69	; 0x45
   190ca:	5c9b      	ldrb	r3, [r3, r2]
   190cc:	b25b      	sxtb	r3, r3
   190ce:	3301      	adds	r3, #1
   190d0:	d103      	bne.n	190da <xQueueGenericSend+0x27a>
   190d2:	6a3b      	ldr	r3, [r7, #32]
   190d4:	2245      	movs	r2, #69	; 0x45
   190d6:	2100      	movs	r1, #0
   190d8:	5499      	strb	r1, [r3, r2]
   190da:	4b43      	ldr	r3, [pc, #268]	; (191e8 <xQueueGenericSend+0x388>)
   190dc:	4798      	blx	r3

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
   190de:	1d3a      	adds	r2, r7, #4
   190e0:	2314      	movs	r3, #20
   190e2:	18fb      	adds	r3, r7, r3
   190e4:	0011      	movs	r1, r2
   190e6:	0018      	movs	r0, r3
   190e8:	4b42      	ldr	r3, [pc, #264]	; (191f4 <xQueueGenericSend+0x394>)
   190ea:	4798      	blx	r3
   190ec:	1e03      	subs	r3, r0, #0
   190ee:	d000      	beq.n	190f2 <xQueueGenericSend+0x292>
   190f0:	e08a      	b.n	19208 <xQueueGenericSend+0x3a8>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
   190f2:	6a3b      	ldr	r3, [r7, #32]
   190f4:	0018      	movs	r0, r3
   190f6:	4b40      	ldr	r3, [pc, #256]	; (191f8 <xQueueGenericSend+0x398>)
   190f8:	4798      	blx	r3
   190fa:	1e03      	subs	r3, r0, #0
   190fc:	d04f      	beq.n	1919e <xQueueGenericSend+0x33e>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
   190fe:	4b2d      	ldr	r3, [pc, #180]	; (191b4 <xQueueGenericSend+0x354>)
   19100:	4798      	blx	r3
   19102:	0003      	movs	r3, r0
   19104:	0018      	movs	r0, r3
   19106:	4b2c      	ldr	r3, [pc, #176]	; (191b8 <xQueueGenericSend+0x358>)
   19108:	4798      	blx	r3
   1910a:	0003      	movs	r3, r0
   1910c:	001a      	movs	r2, r3
   1910e:	4b2b      	ldr	r3, [pc, #172]	; (191bc <xQueueGenericSend+0x35c>)
   19110:	881b      	ldrh	r3, [r3, #0]
   19112:	4013      	ands	r3, r2
   19114:	b29b      	uxth	r3, r3
   19116:	2b00      	cmp	r3, #0
   19118:	d02e      	beq.n	19178 <xQueueGenericSend+0x318>
   1911a:	6a3b      	ldr	r3, [r7, #32]
   1911c:	0018      	movs	r0, r3
   1911e:	4b28      	ldr	r3, [pc, #160]	; (191c0 <xQueueGenericSend+0x360>)
   19120:	4798      	blx	r3
   19122:	0003      	movs	r3, r0
   19124:	001a      	movs	r2, r3
   19126:	4b25      	ldr	r3, [pc, #148]	; (191bc <xQueueGenericSend+0x35c>)
   19128:	881b      	ldrh	r3, [r3, #0]
   1912a:	4013      	ands	r3, r2
   1912c:	b29b      	uxth	r3, r3
   1912e:	2b00      	cmp	r3, #0
   19130:	d022      	beq.n	19178 <xQueueGenericSend+0x318>
   19132:	683b      	ldr	r3, [r7, #0]
   19134:	2b00      	cmp	r3, #0
   19136:	d10b      	bne.n	19150 <xQueueGenericSend+0x2f0>
   19138:	6a3b      	ldr	r3, [r7, #32]
   1913a:	0018      	movs	r0, r3
   1913c:	4b21      	ldr	r3, [pc, #132]	; (191c4 <xQueueGenericSend+0x364>)
   1913e:	4798      	blx	r3
   19140:	0003      	movs	r3, r0
   19142:	001a      	movs	r2, r3
   19144:	4b20      	ldr	r3, [pc, #128]	; (191c8 <xQueueGenericSend+0x368>)
   19146:	5c9b      	ldrb	r3, [r3, r2]
   19148:	3370      	adds	r3, #112	; 0x70
   1914a:	b2db      	uxtb	r3, r3
   1914c:	001d      	movs	r5, r3
   1914e:	e000      	b.n	19152 <xQueueGenericSend+0x2f2>
   19150:	2575      	movs	r5, #117	; 0x75
   19152:	6a3b      	ldr	r3, [r7, #32]
   19154:	0018      	movs	r0, r3
   19156:	4b1b      	ldr	r3, [pc, #108]	; (191c4 <xQueueGenericSend+0x364>)
   19158:	4798      	blx	r3
   1915a:	0003      	movs	r3, r0
   1915c:	001a      	movs	r2, r3
   1915e:	4b1a      	ldr	r3, [pc, #104]	; (191c8 <xQueueGenericSend+0x368>)
   19160:	5c9c      	ldrb	r4, [r3, r2]
   19162:	6a3b      	ldr	r3, [r7, #32]
   19164:	0018      	movs	r0, r3
   19166:	4b19      	ldr	r3, [pc, #100]	; (191cc <xQueueGenericSend+0x36c>)
   19168:	4798      	blx	r3
   1916a:	0003      	movs	r3, r0
   1916c:	b2db      	uxtb	r3, r3
   1916e:	001a      	movs	r2, r3
   19170:	0021      	movs	r1, r4
   19172:	0028      	movs	r0, r5
   19174:	4b16      	ldr	r3, [pc, #88]	; (191d0 <xQueueGenericSend+0x370>)
   19176:	4798      	blx	r3
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
   19178:	6a3b      	ldr	r3, [r7, #32]
   1917a:	3310      	adds	r3, #16
   1917c:	687a      	ldr	r2, [r7, #4]
   1917e:	0011      	movs	r1, r2
   19180:	0018      	movs	r0, r3
   19182:	4b1e      	ldr	r3, [pc, #120]	; (191fc <xQueueGenericSend+0x39c>)
   19184:	4798      	blx	r3
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
   19186:	6a3b      	ldr	r3, [r7, #32]
   19188:	0018      	movs	r0, r3
   1918a:	4b1d      	ldr	r3, [pc, #116]	; (19200 <xQueueGenericSend+0x3a0>)
   1918c:	4798      	blx	r3
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
   1918e:	4b1d      	ldr	r3, [pc, #116]	; (19204 <xQueueGenericSend+0x3a4>)
   19190:	4798      	blx	r3
   19192:	1e03      	subs	r3, r0, #0
   19194:	d000      	beq.n	19198 <xQueueGenericSend+0x338>
   19196:	e69d      	b.n	18ed4 <xQueueGenericSend+0x74>
				{
					portYIELD_WITHIN_API();
   19198:	4b11      	ldr	r3, [pc, #68]	; (191e0 <xQueueGenericSend+0x380>)
   1919a:	4798      	blx	r3
   1919c:	e69a      	b.n	18ed4 <xQueueGenericSend+0x74>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
   1919e:	6a3b      	ldr	r3, [r7, #32]
   191a0:	0018      	movs	r0, r3
   191a2:	4b17      	ldr	r3, [pc, #92]	; (19200 <xQueueGenericSend+0x3a0>)
   191a4:	4798      	blx	r3
				( void ) xTaskResumeAll();
   191a6:	4b17      	ldr	r3, [pc, #92]	; (19204 <xQueueGenericSend+0x3a4>)
   191a8:	4798      	blx	r3
   191aa:	e693      	b.n	18ed4 <xQueueGenericSend+0x74>
   191ac:	0001b5ed 	.word	0x0001b5ed
   191b0:	000188c9 	.word	0x000188c9
   191b4:	00016b5d 	.word	0x00016b5d
   191b8:	000168c1 	.word	0x000168c1
   191bc:	20000120 	.word	0x20000120
   191c0:	00016981 	.word	0x00016981
   191c4:	00016881 	.word	0x00016881
   191c8:	20000114 	.word	0x20000114
   191cc:	00016961 	.word	0x00016961
   191d0:	000172b9 	.word	0x000172b9
   191d4:	00017915 	.word	0x00017915
   191d8:	0001a099 	.word	0x0001a099
   191dc:	0001a39d 	.word	0x0001a39d
   191e0:	000188b1 	.word	0x000188b1
   191e4:	0001b15d 	.word	0x0001b15d
   191e8:	000188ed 	.word	0x000188ed
   191ec:	0001b29d 	.word	0x0001b29d
   191f0:	0001ab85 	.word	0x0001ab85
   191f4:	0001b2c5 	.word	0x0001b2c5
   191f8:	0001a2ed 	.word	0x0001a2ed
   191fc:	0001b039 	.word	0x0001b039
   19200:	0001a1c9 	.word	0x0001a1c9
   19204:	0001ab9d 	.word	0x0001ab9d
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
   19208:	6a3b      	ldr	r3, [r7, #32]
   1920a:	0018      	movs	r0, r3
   1920c:	4b22      	ldr	r3, [pc, #136]	; (19298 <xQueueGenericSend+0x438>)
   1920e:	4798      	blx	r3
			( void ) xTaskResumeAll();
   19210:	4b22      	ldr	r3, [pc, #136]	; (1929c <xQueueGenericSend+0x43c>)
   19212:	4798      	blx	r3

			traceQUEUE_SEND_FAILED( pxQueue );
   19214:	4b22      	ldr	r3, [pc, #136]	; (192a0 <xQueueGenericSend+0x440>)
   19216:	4798      	blx	r3
   19218:	0003      	movs	r3, r0
   1921a:	0018      	movs	r0, r3
   1921c:	4b21      	ldr	r3, [pc, #132]	; (192a4 <xQueueGenericSend+0x444>)
   1921e:	4798      	blx	r3
   19220:	0003      	movs	r3, r0
   19222:	001a      	movs	r2, r3
   19224:	4b20      	ldr	r3, [pc, #128]	; (192a8 <xQueueGenericSend+0x448>)
   19226:	881b      	ldrh	r3, [r3, #0]
   19228:	4013      	ands	r3, r2
   1922a:	b29b      	uxth	r3, r3
   1922c:	2b00      	cmp	r3, #0
   1922e:	d02e      	beq.n	1928e <xQueueGenericSend+0x42e>
   19230:	6a3b      	ldr	r3, [r7, #32]
   19232:	0018      	movs	r0, r3
   19234:	4b1d      	ldr	r3, [pc, #116]	; (192ac <xQueueGenericSend+0x44c>)
   19236:	4798      	blx	r3
   19238:	0003      	movs	r3, r0
   1923a:	001a      	movs	r2, r3
   1923c:	4b1a      	ldr	r3, [pc, #104]	; (192a8 <xQueueGenericSend+0x448>)
   1923e:	881b      	ldrh	r3, [r3, #0]
   19240:	4013      	ands	r3, r2
   19242:	b29b      	uxth	r3, r3
   19244:	2b00      	cmp	r3, #0
   19246:	d022      	beq.n	1928e <xQueueGenericSend+0x42e>
   19248:	683b      	ldr	r3, [r7, #0]
   1924a:	2b00      	cmp	r3, #0
   1924c:	d10b      	bne.n	19266 <xQueueGenericSend+0x406>
   1924e:	6a3b      	ldr	r3, [r7, #32]
   19250:	0018      	movs	r0, r3
   19252:	4b17      	ldr	r3, [pc, #92]	; (192b0 <xQueueGenericSend+0x450>)
   19254:	4798      	blx	r3
   19256:	0003      	movs	r3, r0
   19258:	001a      	movs	r2, r3
   1925a:	4b16      	ldr	r3, [pc, #88]	; (192b4 <xQueueGenericSend+0x454>)
   1925c:	5c9b      	ldrb	r3, [r3, r2]
   1925e:	3348      	adds	r3, #72	; 0x48
   19260:	b2db      	uxtb	r3, r3
   19262:	001d      	movs	r5, r3
   19264:	e000      	b.n	19268 <xQueueGenericSend+0x408>
   19266:	254d      	movs	r5, #77	; 0x4d
   19268:	6a3b      	ldr	r3, [r7, #32]
   1926a:	0018      	movs	r0, r3
   1926c:	4b10      	ldr	r3, [pc, #64]	; (192b0 <xQueueGenericSend+0x450>)
   1926e:	4798      	blx	r3
   19270:	0003      	movs	r3, r0
   19272:	001a      	movs	r2, r3
   19274:	4b0f      	ldr	r3, [pc, #60]	; (192b4 <xQueueGenericSend+0x454>)
   19276:	5c9c      	ldrb	r4, [r3, r2]
   19278:	6a3b      	ldr	r3, [r7, #32]
   1927a:	0018      	movs	r0, r3
   1927c:	4b0e      	ldr	r3, [pc, #56]	; (192b8 <xQueueGenericSend+0x458>)
   1927e:	4798      	blx	r3
   19280:	0003      	movs	r3, r0
   19282:	b2db      	uxtb	r3, r3
   19284:	001a      	movs	r2, r3
   19286:	0021      	movs	r1, r4
   19288:	0028      	movs	r0, r5
   1928a:	4b0c      	ldr	r3, [pc, #48]	; (192bc <xQueueGenericSend+0x45c>)
   1928c:	4798      	blx	r3
			return errQUEUE_FULL;
   1928e:	2300      	movs	r3, #0
		}
	}
}
   19290:	0018      	movs	r0, r3
   19292:	46bd      	mov	sp, r7
   19294:	b00a      	add	sp, #40	; 0x28
   19296:	bdb0      	pop	{r4, r5, r7, pc}
   19298:	0001a1c9 	.word	0x0001a1c9
   1929c:	0001ab9d 	.word	0x0001ab9d
   192a0:	00016b5d 	.word	0x00016b5d
   192a4:	000168c1 	.word	0x000168c1
   192a8:	20000120 	.word	0x20000120
   192ac:	00016981 	.word	0x00016981
   192b0:	00016881 	.word	0x00016881
   192b4:	20000114 	.word	0x20000114
   192b8:	00016961 	.word	0x00016961
   192bc:	000172b9 	.word	0x000172b9

000192c0 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
   192c0:	b5b0      	push	{r4, r5, r7, lr}
   192c2:	b088      	sub	sp, #32
   192c4:	af00      	add	r7, sp, #0
   192c6:	60f8      	str	r0, [r7, #12]
   192c8:	60b9      	str	r1, [r7, #8]
   192ca:	607a      	str	r2, [r7, #4]
   192cc:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
   192ce:	68fb      	ldr	r3, [r7, #12]
   192d0:	61bb      	str	r3, [r7, #24]

	configASSERT( pxQueue );
   192d2:	69bb      	ldr	r3, [r7, #24]
   192d4:	2b00      	cmp	r3, #0
   192d6:	d101      	bne.n	192dc <xQueueGenericSendFromISR+0x1c>
   192d8:	b672      	cpsid	i
   192da:	e7fe      	b.n	192da <xQueueGenericSendFromISR+0x1a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
   192dc:	68bb      	ldr	r3, [r7, #8]
   192de:	2b00      	cmp	r3, #0
   192e0:	d103      	bne.n	192ea <xQueueGenericSendFromISR+0x2a>
   192e2:	69bb      	ldr	r3, [r7, #24]
   192e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   192e6:	2b00      	cmp	r3, #0
   192e8:	d101      	bne.n	192ee <xQueueGenericSendFromISR+0x2e>
   192ea:	2301      	movs	r3, #1
   192ec:	e000      	b.n	192f0 <xQueueGenericSendFromISR+0x30>
   192ee:	2300      	movs	r3, #0
   192f0:	2b00      	cmp	r3, #0
   192f2:	d101      	bne.n	192f8 <xQueueGenericSendFromISR+0x38>
   192f4:	b672      	cpsid	i
   192f6:	e7fe      	b.n	192f6 <xQueueGenericSendFromISR+0x36>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
   192f8:	683b      	ldr	r3, [r7, #0]
   192fa:	2b02      	cmp	r3, #2
   192fc:	d103      	bne.n	19306 <xQueueGenericSendFromISR+0x46>
   192fe:	69bb      	ldr	r3, [r7, #24]
   19300:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   19302:	2b01      	cmp	r3, #1
   19304:	d101      	bne.n	1930a <xQueueGenericSendFromISR+0x4a>
   19306:	2301      	movs	r3, #1
   19308:	e000      	b.n	1930c <xQueueGenericSendFromISR+0x4c>
   1930a:	2300      	movs	r3, #0
   1930c:	2b00      	cmp	r3, #0
   1930e:	d101      	bne.n	19314 <xQueueGenericSendFromISR+0x54>
   19310:	b672      	cpsid	i
   19312:	e7fe      	b.n	19312 <xQueueGenericSendFromISR+0x52>
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
   19314:	4b68      	ldr	r3, [pc, #416]	; (194b8 <xQueueGenericSendFromISR+0x1f8>)
   19316:	4798      	blx	r3
   19318:	0003      	movs	r3, r0
   1931a:	617b      	str	r3, [r7, #20]
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
   1931c:	69bb      	ldr	r3, [r7, #24]
   1931e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
   19320:	69bb      	ldr	r3, [r7, #24]
   19322:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   19324:	429a      	cmp	r2, r3
   19326:	d303      	bcc.n	19330 <xQueueGenericSendFromISR+0x70>
   19328:	683b      	ldr	r3, [r7, #0]
   1932a:	2b02      	cmp	r3, #2
   1932c:	d000      	beq.n	19330 <xQueueGenericSendFromISR+0x70>
   1932e:	e088      	b.n	19442 <xQueueGenericSendFromISR+0x182>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
   19330:	2313      	movs	r3, #19
   19332:	18fb      	adds	r3, r7, r3
   19334:	69ba      	ldr	r2, [r7, #24]
   19336:	2145      	movs	r1, #69	; 0x45
   19338:	5c52      	ldrb	r2, [r2, r1]
   1933a:	701a      	strb	r2, [r3, #0]

			traceQUEUE_SEND_FROM_ISR( pxQueue );
   1933c:	69bb      	ldr	r3, [r7, #24]
   1933e:	0018      	movs	r0, r3
   19340:	4b5e      	ldr	r3, [pc, #376]	; (194bc <xQueueGenericSendFromISR+0x1fc>)
   19342:	4798      	blx	r3
   19344:	0003      	movs	r3, r0
   19346:	001a      	movs	r2, r3
   19348:	4b5d      	ldr	r3, [pc, #372]	; (194c0 <xQueueGenericSendFromISR+0x200>)
   1934a:	881b      	ldrh	r3, [r3, #0]
   1934c:	4013      	ands	r3, r2
   1934e:	b29b      	uxth	r3, r3
   19350:	2b00      	cmp	r3, #0
   19352:	d022      	beq.n	1939a <xQueueGenericSendFromISR+0xda>
   19354:	683b      	ldr	r3, [r7, #0]
   19356:	2b00      	cmp	r3, #0
   19358:	d10b      	bne.n	19372 <xQueueGenericSendFromISR+0xb2>
   1935a:	69bb      	ldr	r3, [r7, #24]
   1935c:	0018      	movs	r0, r3
   1935e:	4b59      	ldr	r3, [pc, #356]	; (194c4 <xQueueGenericSendFromISR+0x204>)
   19360:	4798      	blx	r3
   19362:	0003      	movs	r3, r0
   19364:	001a      	movs	r2, r3
   19366:	4b58      	ldr	r3, [pc, #352]	; (194c8 <xQueueGenericSendFromISR+0x208>)
   19368:	5c9b      	ldrb	r3, [r3, r2]
   1936a:	3330      	adds	r3, #48	; 0x30
   1936c:	b2db      	uxtb	r3, r3
   1936e:	001d      	movs	r5, r3
   19370:	e000      	b.n	19374 <xQueueGenericSendFromISR+0xb4>
   19372:	2535      	movs	r5, #53	; 0x35
   19374:	69bb      	ldr	r3, [r7, #24]
   19376:	0018      	movs	r0, r3
   19378:	4b52      	ldr	r3, [pc, #328]	; (194c4 <xQueueGenericSendFromISR+0x204>)
   1937a:	4798      	blx	r3
   1937c:	0003      	movs	r3, r0
   1937e:	001a      	movs	r2, r3
   19380:	4b51      	ldr	r3, [pc, #324]	; (194c8 <xQueueGenericSendFromISR+0x208>)
   19382:	5c9c      	ldrb	r4, [r3, r2]
   19384:	69bb      	ldr	r3, [r7, #24]
   19386:	0018      	movs	r0, r3
   19388:	4b50      	ldr	r3, [pc, #320]	; (194cc <xQueueGenericSendFromISR+0x20c>)
   1938a:	4798      	blx	r3
   1938c:	0003      	movs	r3, r0
   1938e:	b2db      	uxtb	r3, r3
   19390:	001a      	movs	r2, r3
   19392:	0021      	movs	r1, r4
   19394:	0028      	movs	r0, r5
   19396:	4b4e      	ldr	r3, [pc, #312]	; (194d0 <xQueueGenericSendFromISR+0x210>)
   19398:	4798      	blx	r3
   1939a:	69bb      	ldr	r3, [r7, #24]
   1939c:	0018      	movs	r0, r3
   1939e:	4b49      	ldr	r3, [pc, #292]	; (194c4 <xQueueGenericSendFromISR+0x204>)
   193a0:	4798      	blx	r3
   193a2:	0003      	movs	r3, r0
   193a4:	001a      	movs	r2, r3
   193a6:	4b48      	ldr	r3, [pc, #288]	; (194c8 <xQueueGenericSendFromISR+0x208>)
   193a8:	5c9c      	ldrb	r4, [r3, r2]
   193aa:	69bb      	ldr	r3, [r7, #24]
   193ac:	0018      	movs	r0, r3
   193ae:	4b47      	ldr	r3, [pc, #284]	; (194cc <xQueueGenericSendFromISR+0x20c>)
   193b0:	4798      	blx	r3
   193b2:	0003      	movs	r3, r0
   193b4:	b2d9      	uxtb	r1, r3
   193b6:	69bb      	ldr	r3, [r7, #24]
   193b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   193ba:	b2db      	uxtb	r3, r3
   193bc:	3301      	adds	r3, #1
   193be:	b2db      	uxtb	r3, r3
   193c0:	001a      	movs	r2, r3
   193c2:	0020      	movs	r0, r4
   193c4:	4b43      	ldr	r3, [pc, #268]	; (194d4 <xQueueGenericSendFromISR+0x214>)
   193c6:	4798      	blx	r3
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
   193c8:	683a      	ldr	r2, [r7, #0]
   193ca:	68b9      	ldr	r1, [r7, #8]
   193cc:	69bb      	ldr	r3, [r7, #24]
   193ce:	0018      	movs	r0, r3
   193d0:	4b41      	ldr	r3, [pc, #260]	; (194d8 <xQueueGenericSendFromISR+0x218>)
   193d2:	4798      	blx	r3

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
   193d4:	2313      	movs	r3, #19
   193d6:	18fb      	adds	r3, r7, r3
   193d8:	781b      	ldrb	r3, [r3, #0]
   193da:	b25b      	sxtb	r3, r3
   193dc:	3301      	adds	r3, #1
   193de:	d124      	bne.n	1942a <xQueueGenericSendFromISR+0x16a>
			{
				#if ( configUSE_QUEUE_SETS == 1 )
				{
					if( pxQueue->pxQueueSetContainer != NULL )
   193e0:	69bb      	ldr	r3, [r7, #24]
   193e2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   193e4:	2b00      	cmp	r3, #0
   193e6:	d00e      	beq.n	19406 <xQueueGenericSendFromISR+0x146>
					{
						if( prvNotifyQueueSetContainer( pxQueue, xCopyPosition ) != pdFALSE )
   193e8:	683a      	ldr	r2, [r7, #0]
   193ea:	69bb      	ldr	r3, [r7, #24]
   193ec:	0011      	movs	r1, r2
   193ee:	0018      	movs	r0, r3
   193f0:	4b3a      	ldr	r3, [pc, #232]	; (194dc <xQueueGenericSendFromISR+0x21c>)
   193f2:	4798      	blx	r3
   193f4:	1e03      	subs	r3, r0, #0
   193f6:	d021      	beq.n	1943c <xQueueGenericSendFromISR+0x17c>
						{
							/* The queue is a member of a queue set, and posting
							to the queue set caused a higher priority task to
							unblock.  A context switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
   193f8:	687b      	ldr	r3, [r7, #4]
   193fa:	2b00      	cmp	r3, #0
   193fc:	d01e      	beq.n	1943c <xQueueGenericSendFromISR+0x17c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
   193fe:	687b      	ldr	r3, [r7, #4]
   19400:	2201      	movs	r2, #1
   19402:	601a      	str	r2, [r3, #0]
   19404:	e01a      	b.n	1943c <xQueueGenericSendFromISR+0x17c>
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else
					{
						if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
   19406:	69bb      	ldr	r3, [r7, #24]
   19408:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   1940a:	2b00      	cmp	r3, #0
   1940c:	d016      	beq.n	1943c <xQueueGenericSendFromISR+0x17c>
						{
							if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
   1940e:	69bb      	ldr	r3, [r7, #24]
   19410:	3324      	adds	r3, #36	; 0x24
   19412:	0018      	movs	r0, r3
   19414:	4b32      	ldr	r3, [pc, #200]	; (194e0 <xQueueGenericSendFromISR+0x220>)
   19416:	4798      	blx	r3
   19418:	1e03      	subs	r3, r0, #0
   1941a:	d00f      	beq.n	1943c <xQueueGenericSendFromISR+0x17c>
							{
								/* The task waiting has a higher priority so
								record that a context switch is required. */
								if( pxHigherPriorityTaskWoken != NULL )
   1941c:	687b      	ldr	r3, [r7, #4]
   1941e:	2b00      	cmp	r3, #0
   19420:	d00c      	beq.n	1943c <xQueueGenericSendFromISR+0x17c>
								{
									*pxHigherPriorityTaskWoken = pdTRUE;
   19422:	687b      	ldr	r3, [r7, #4]
   19424:	2201      	movs	r2, #1
   19426:	601a      	str	r2, [r3, #0]
   19428:	e008      	b.n	1943c <xQueueGenericSendFromISR+0x17c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
   1942a:	2313      	movs	r3, #19
   1942c:	18fb      	adds	r3, r7, r3
   1942e:	781b      	ldrb	r3, [r3, #0]
   19430:	3301      	adds	r3, #1
   19432:	b2db      	uxtb	r3, r3
   19434:	b259      	sxtb	r1, r3
   19436:	69bb      	ldr	r3, [r7, #24]
   19438:	2245      	movs	r2, #69	; 0x45
   1943a:	5499      	strb	r1, [r3, r2]
			}

			xReturn = pdPASS;
   1943c:	2301      	movs	r3, #1
   1943e:	61fb      	str	r3, [r7, #28]
		{
   19440:	e030      	b.n	194a4 <xQueueGenericSendFromISR+0x1e4>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
   19442:	69bb      	ldr	r3, [r7, #24]
   19444:	0018      	movs	r0, r3
   19446:	4b1d      	ldr	r3, [pc, #116]	; (194bc <xQueueGenericSendFromISR+0x1fc>)
   19448:	4798      	blx	r3
   1944a:	0003      	movs	r3, r0
   1944c:	001a      	movs	r2, r3
   1944e:	4b1c      	ldr	r3, [pc, #112]	; (194c0 <xQueueGenericSendFromISR+0x200>)
   19450:	881b      	ldrh	r3, [r3, #0]
   19452:	4013      	ands	r3, r2
   19454:	b29b      	uxth	r3, r3
   19456:	2b00      	cmp	r3, #0
   19458:	d022      	beq.n	194a0 <xQueueGenericSendFromISR+0x1e0>
   1945a:	683b      	ldr	r3, [r7, #0]
   1945c:	2b00      	cmp	r3, #0
   1945e:	d10b      	bne.n	19478 <xQueueGenericSendFromISR+0x1b8>
   19460:	69bb      	ldr	r3, [r7, #24]
   19462:	0018      	movs	r0, r3
   19464:	4b17      	ldr	r3, [pc, #92]	; (194c4 <xQueueGenericSendFromISR+0x204>)
   19466:	4798      	blx	r3
   19468:	0003      	movs	r3, r0
   1946a:	001a      	movs	r2, r3
   1946c:	4b16      	ldr	r3, [pc, #88]	; (194c8 <xQueueGenericSendFromISR+0x208>)
   1946e:	5c9b      	ldrb	r3, [r3, r2]
   19470:	3358      	adds	r3, #88	; 0x58
   19472:	b2db      	uxtb	r3, r3
   19474:	001d      	movs	r5, r3
   19476:	e000      	b.n	1947a <xQueueGenericSendFromISR+0x1ba>
   19478:	255d      	movs	r5, #93	; 0x5d
   1947a:	69bb      	ldr	r3, [r7, #24]
   1947c:	0018      	movs	r0, r3
   1947e:	4b11      	ldr	r3, [pc, #68]	; (194c4 <xQueueGenericSendFromISR+0x204>)
   19480:	4798      	blx	r3
   19482:	0003      	movs	r3, r0
   19484:	001a      	movs	r2, r3
   19486:	4b10      	ldr	r3, [pc, #64]	; (194c8 <xQueueGenericSendFromISR+0x208>)
   19488:	5c9c      	ldrb	r4, [r3, r2]
   1948a:	69bb      	ldr	r3, [r7, #24]
   1948c:	0018      	movs	r0, r3
   1948e:	4b0f      	ldr	r3, [pc, #60]	; (194cc <xQueueGenericSendFromISR+0x20c>)
   19490:	4798      	blx	r3
   19492:	0003      	movs	r3, r0
   19494:	b2db      	uxtb	r3, r3
   19496:	001a      	movs	r2, r3
   19498:	0021      	movs	r1, r4
   1949a:	0028      	movs	r0, r5
   1949c:	4b0c      	ldr	r3, [pc, #48]	; (194d0 <xQueueGenericSendFromISR+0x210>)
   1949e:	4798      	blx	r3
			xReturn = errQUEUE_FULL;
   194a0:	2300      	movs	r3, #0
   194a2:	61fb      	str	r3, [r7, #28]
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
   194a4:	697b      	ldr	r3, [r7, #20]
   194a6:	0018      	movs	r0, r3
   194a8:	4b0e      	ldr	r3, [pc, #56]	; (194e4 <xQueueGenericSendFromISR+0x224>)
   194aa:	4798      	blx	r3

	return xReturn;
   194ac:	69fb      	ldr	r3, [r7, #28]
}
   194ae:	0018      	movs	r0, r3
   194b0:	46bd      	mov	sp, r7
   194b2:	b008      	add	sp, #32
   194b4:	bdb0      	pop	{r4, r5, r7, pc}
   194b6:	46c0      	nop			; (mov r8, r8)
   194b8:	0001891d 	.word	0x0001891d
   194bc:	00016981 	.word	0x00016981
   194c0:	20000120 	.word	0x20000120
   194c4:	00016881 	.word	0x00016881
   194c8:	20000114 	.word	0x20000114
   194cc:	00016961 	.word	0x00016961
   194d0:	000172b9 	.word	0x000172b9
   194d4:	00017915 	.word	0x00017915
   194d8:	0001a099 	.word	0x0001a099
   194dc:	0001a39d 	.word	0x0001a39d
   194e0:	0001b15d 	.word	0x0001b15d
   194e4:	00018929 	.word	0x00018929

000194e8 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
   194e8:	b580      	push	{r7, lr}
   194ea:	b082      	sub	sp, #8
   194ec:	af00      	add	r7, sp, #0
   194ee:	6078      	str	r0, [r7, #4]
   194f0:	6039      	str	r1, [r7, #0]
   194f2:	6839      	ldr	r1, [r7, #0]
   194f4:	687b      	ldr	r3, [r7, #4]
   194f6:	2200      	movs	r2, #0
   194f8:	0018      	movs	r0, r3
   194fa:	4b03      	ldr	r3, [pc, #12]	; (19508 <xQueueGiveFromISR+0x20>)
   194fc:	4798      	blx	r3
   194fe:	0003      	movs	r3, r0
   19500:	0018      	movs	r0, r3
   19502:	46bd      	mov	sp, r7
   19504:	b002      	add	sp, #8
   19506:	bd80      	pop	{r7, pc}
   19508:	0001950d 	.word	0x0001950d

0001950c <MyWrapper>:
{
   1950c:	b5b0      	push	{r4, r5, r7, lr}
   1950e:	b08a      	sub	sp, #40	; 0x28
   19510:	af00      	add	r7, sp, #0
   19512:	60f8      	str	r0, [r7, #12]
   19514:	60b9      	str	r1, [r7, #8]
   19516:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
   19518:	68fb      	ldr	r3, [r7, #12]
   1951a:	623b      	str	r3, [r7, #32]
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
   1951c:	6a3b      	ldr	r3, [r7, #32]
   1951e:	2b00      	cmp	r3, #0
   19520:	d101      	bne.n	19526 <MyWrapper+0x1a>
   19522:	b672      	cpsid	i
   19524:	e7fe      	b.n	19524 <MyWrapper+0x18>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
   19526:	6a3b      	ldr	r3, [r7, #32]
   19528:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   1952a:	2b00      	cmp	r3, #0
   1952c:	d001      	beq.n	19532 <MyWrapper+0x26>
   1952e:	b672      	cpsid	i
   19530:	e7fe      	b.n	19530 <MyWrapper+0x24>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->pxMutexHolder != NULL ) ) );
   19532:	6a3b      	ldr	r3, [r7, #32]
   19534:	681b      	ldr	r3, [r3, #0]
   19536:	2b00      	cmp	r3, #0
   19538:	d103      	bne.n	19542 <MyWrapper+0x36>
   1953a:	6a3b      	ldr	r3, [r7, #32]
   1953c:	685b      	ldr	r3, [r3, #4]
   1953e:	2b00      	cmp	r3, #0
   19540:	d101      	bne.n	19546 <MyWrapper+0x3a>
   19542:	2301      	movs	r3, #1
   19544:	e000      	b.n	19548 <MyWrapper+0x3c>
   19546:	2300      	movs	r3, #0
   19548:	2b00      	cmp	r3, #0
   1954a:	d101      	bne.n	19550 <MyWrapper+0x44>
   1954c:	b672      	cpsid	i
   1954e:	e7fe      	b.n	1954e <MyWrapper+0x42>
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
   19550:	4b66      	ldr	r3, [pc, #408]	; (196ec <MyWrapper+0x1e0>)
   19552:	4798      	blx	r3
   19554:	0003      	movs	r3, r0
   19556:	61fb      	str	r3, [r7, #28]
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
   19558:	6a3b      	ldr	r3, [r7, #32]
   1955a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   1955c:	61bb      	str	r3, [r7, #24]

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
   1955e:	6a3b      	ldr	r3, [r7, #32]
   19560:	6bda      	ldr	r2, [r3, #60]	; 0x3c
   19562:	69bb      	ldr	r3, [r7, #24]
   19564:	429a      	cmp	r2, r3
   19566:	d800      	bhi.n	1956a <MyWrapper+0x5e>
   19568:	e085      	b.n	19676 <MyWrapper+0x16a>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
   1956a:	2317      	movs	r3, #23
   1956c:	18fb      	adds	r3, r7, r3
   1956e:	6a3a      	ldr	r2, [r7, #32]
   19570:	2145      	movs	r1, #69	; 0x45
   19572:	5c52      	ldrb	r2, [r2, r1]
   19574:	701a      	strb	r2, [r3, #0]

			traceQUEUE_SEND_FROM_ISR( pxQueue );
   19576:	6a3b      	ldr	r3, [r7, #32]
   19578:	0018      	movs	r0, r3
   1957a:	4b5d      	ldr	r3, [pc, #372]	; (196f0 <MyWrapper+0x1e4>)
   1957c:	4798      	blx	r3
   1957e:	0003      	movs	r3, r0
   19580:	001a      	movs	r2, r3
   19582:	4b5c      	ldr	r3, [pc, #368]	; (196f4 <MyWrapper+0x1e8>)
   19584:	881b      	ldrh	r3, [r3, #0]
   19586:	4013      	ands	r3, r2
   19588:	b29b      	uxth	r3, r3
   1958a:	2b00      	cmp	r3, #0
   1958c:	d022      	beq.n	195d4 <MyWrapper+0xc8>
   1958e:	687b      	ldr	r3, [r7, #4]
   19590:	2b00      	cmp	r3, #0
   19592:	d10b      	bne.n	195ac <MyWrapper+0xa0>
   19594:	6a3b      	ldr	r3, [r7, #32]
   19596:	0018      	movs	r0, r3
   19598:	4b57      	ldr	r3, [pc, #348]	; (196f8 <MyWrapper+0x1ec>)
   1959a:	4798      	blx	r3
   1959c:	0003      	movs	r3, r0
   1959e:	001a      	movs	r2, r3
   195a0:	4b56      	ldr	r3, [pc, #344]	; (196fc <MyWrapper+0x1f0>)
   195a2:	5c9b      	ldrb	r3, [r3, r2]
   195a4:	3330      	adds	r3, #48	; 0x30
   195a6:	b2db      	uxtb	r3, r3
   195a8:	001d      	movs	r5, r3
   195aa:	e000      	b.n	195ae <MyWrapper+0xa2>
   195ac:	2535      	movs	r5, #53	; 0x35
   195ae:	6a3b      	ldr	r3, [r7, #32]
   195b0:	0018      	movs	r0, r3
   195b2:	4b51      	ldr	r3, [pc, #324]	; (196f8 <MyWrapper+0x1ec>)
   195b4:	4798      	blx	r3
   195b6:	0003      	movs	r3, r0
   195b8:	001a      	movs	r2, r3
   195ba:	4b50      	ldr	r3, [pc, #320]	; (196fc <MyWrapper+0x1f0>)
   195bc:	5c9c      	ldrb	r4, [r3, r2]
   195be:	6a3b      	ldr	r3, [r7, #32]
   195c0:	0018      	movs	r0, r3
   195c2:	4b4f      	ldr	r3, [pc, #316]	; (19700 <MyWrapper+0x1f4>)
   195c4:	4798      	blx	r3
   195c6:	0003      	movs	r3, r0
   195c8:	b2db      	uxtb	r3, r3
   195ca:	001a      	movs	r2, r3
   195cc:	0021      	movs	r1, r4
   195ce:	0028      	movs	r0, r5
   195d0:	4b4c      	ldr	r3, [pc, #304]	; (19704 <MyWrapper+0x1f8>)
   195d2:	4798      	blx	r3
   195d4:	6a3b      	ldr	r3, [r7, #32]
   195d6:	0018      	movs	r0, r3
   195d8:	4b47      	ldr	r3, [pc, #284]	; (196f8 <MyWrapper+0x1ec>)
   195da:	4798      	blx	r3
   195dc:	0003      	movs	r3, r0
   195de:	001a      	movs	r2, r3
   195e0:	4b46      	ldr	r3, [pc, #280]	; (196fc <MyWrapper+0x1f0>)
   195e2:	5c9c      	ldrb	r4, [r3, r2]
   195e4:	6a3b      	ldr	r3, [r7, #32]
   195e6:	0018      	movs	r0, r3
   195e8:	4b45      	ldr	r3, [pc, #276]	; (19700 <MyWrapper+0x1f4>)
   195ea:	4798      	blx	r3
   195ec:	0003      	movs	r3, r0
   195ee:	b2d9      	uxtb	r1, r3
   195f0:	6a3b      	ldr	r3, [r7, #32]
   195f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   195f4:	b2db      	uxtb	r3, r3
   195f6:	3301      	adds	r3, #1
   195f8:	b2db      	uxtb	r3, r3
   195fa:	001a      	movs	r2, r3
   195fc:	0020      	movs	r0, r4
   195fe:	4b42      	ldr	r3, [pc, #264]	; (19708 <MyWrapper+0x1fc>)
   19600:	4798      	blx	r3
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
   19602:	69bb      	ldr	r3, [r7, #24]
   19604:	1c5a      	adds	r2, r3, #1
   19606:	6a3b      	ldr	r3, [r7, #32]
   19608:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
   1960a:	2317      	movs	r3, #23
   1960c:	18fb      	adds	r3, r7, r3
   1960e:	781b      	ldrb	r3, [r3, #0]
   19610:	b25b      	sxtb	r3, r3
   19612:	3301      	adds	r3, #1
   19614:	d123      	bne.n	1965e <MyWrapper+0x152>
			{
				#if ( configUSE_QUEUE_SETS == 1 )
				{
					if( pxQueue->pxQueueSetContainer != NULL )
   19616:	6a3b      	ldr	r3, [r7, #32]
   19618:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   1961a:	2b00      	cmp	r3, #0
   1961c:	d00d      	beq.n	1963a <MyWrapper+0x12e>
					{
						if( prvNotifyQueueSetContainer( pxQueue, queueSEND_TO_BACK ) != pdFALSE )
   1961e:	6a3b      	ldr	r3, [r7, #32]
   19620:	2100      	movs	r1, #0
   19622:	0018      	movs	r0, r3
   19624:	4b39      	ldr	r3, [pc, #228]	; (1970c <MyWrapper+0x200>)
   19626:	4798      	blx	r3
   19628:	1e03      	subs	r3, r0, #0
   1962a:	d021      	beq.n	19670 <MyWrapper+0x164>
						{
							/* The semaphore is a member of a queue set, and
							posting	to the queue set caused a higher priority
							task to	unblock.  A context switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
   1962c:	68bb      	ldr	r3, [r7, #8]
   1962e:	2b00      	cmp	r3, #0
   19630:	d01e      	beq.n	19670 <MyWrapper+0x164>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
   19632:	68bb      	ldr	r3, [r7, #8]
   19634:	2201      	movs	r2, #1
   19636:	601a      	str	r2, [r3, #0]
   19638:	e01a      	b.n	19670 <MyWrapper+0x164>
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else
					{
						if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
   1963a:	6a3b      	ldr	r3, [r7, #32]
   1963c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   1963e:	2b00      	cmp	r3, #0
   19640:	d016      	beq.n	19670 <MyWrapper+0x164>
						{
							if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
   19642:	6a3b      	ldr	r3, [r7, #32]
   19644:	3324      	adds	r3, #36	; 0x24
   19646:	0018      	movs	r0, r3
   19648:	4b31      	ldr	r3, [pc, #196]	; (19710 <MyWrapper+0x204>)
   1964a:	4798      	blx	r3
   1964c:	1e03      	subs	r3, r0, #0
   1964e:	d00f      	beq.n	19670 <MyWrapper+0x164>
							{
								/* The task waiting has a higher priority so
								record that a context switch is required. */
								if( pxHigherPriorityTaskWoken != NULL )
   19650:	68bb      	ldr	r3, [r7, #8]
   19652:	2b00      	cmp	r3, #0
   19654:	d00c      	beq.n	19670 <MyWrapper+0x164>
								{
									*pxHigherPriorityTaskWoken = pdTRUE;
   19656:	68bb      	ldr	r3, [r7, #8]
   19658:	2201      	movs	r2, #1
   1965a:	601a      	str	r2, [r3, #0]
   1965c:	e008      	b.n	19670 <MyWrapper+0x164>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
   1965e:	2317      	movs	r3, #23
   19660:	18fb      	adds	r3, r7, r3
   19662:	781b      	ldrb	r3, [r3, #0]
   19664:	3301      	adds	r3, #1
   19666:	b2db      	uxtb	r3, r3
   19668:	b259      	sxtb	r1, r3
   1966a:	6a3b      	ldr	r3, [r7, #32]
   1966c:	2245      	movs	r2, #69	; 0x45
   1966e:	5499      	strb	r1, [r3, r2]
			}

			xReturn = pdPASS;
   19670:	2301      	movs	r3, #1
   19672:	627b      	str	r3, [r7, #36]	; 0x24
   19674:	e030      	b.n	196d8 <MyWrapper+0x1cc>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
   19676:	6a3b      	ldr	r3, [r7, #32]
   19678:	0018      	movs	r0, r3
   1967a:	4b1d      	ldr	r3, [pc, #116]	; (196f0 <MyWrapper+0x1e4>)
   1967c:	4798      	blx	r3
   1967e:	0003      	movs	r3, r0
   19680:	001a      	movs	r2, r3
   19682:	4b1c      	ldr	r3, [pc, #112]	; (196f4 <MyWrapper+0x1e8>)
   19684:	881b      	ldrh	r3, [r3, #0]
   19686:	4013      	ands	r3, r2
   19688:	b29b      	uxth	r3, r3
   1968a:	2b00      	cmp	r3, #0
   1968c:	d022      	beq.n	196d4 <MyWrapper+0x1c8>
   1968e:	687b      	ldr	r3, [r7, #4]
   19690:	2b00      	cmp	r3, #0
   19692:	d10b      	bne.n	196ac <MyWrapper+0x1a0>
   19694:	6a3b      	ldr	r3, [r7, #32]
   19696:	0018      	movs	r0, r3
   19698:	4b17      	ldr	r3, [pc, #92]	; (196f8 <MyWrapper+0x1ec>)
   1969a:	4798      	blx	r3
   1969c:	0003      	movs	r3, r0
   1969e:	001a      	movs	r2, r3
   196a0:	4b16      	ldr	r3, [pc, #88]	; (196fc <MyWrapper+0x1f0>)
   196a2:	5c9b      	ldrb	r3, [r3, r2]
   196a4:	3358      	adds	r3, #88	; 0x58
   196a6:	b2db      	uxtb	r3, r3
   196a8:	001d      	movs	r5, r3
   196aa:	e000      	b.n	196ae <MyWrapper+0x1a2>
   196ac:	255d      	movs	r5, #93	; 0x5d
   196ae:	6a3b      	ldr	r3, [r7, #32]
   196b0:	0018      	movs	r0, r3
   196b2:	4b11      	ldr	r3, [pc, #68]	; (196f8 <MyWrapper+0x1ec>)
   196b4:	4798      	blx	r3
   196b6:	0003      	movs	r3, r0
   196b8:	001a      	movs	r2, r3
   196ba:	4b10      	ldr	r3, [pc, #64]	; (196fc <MyWrapper+0x1f0>)
   196bc:	5c9c      	ldrb	r4, [r3, r2]
   196be:	6a3b      	ldr	r3, [r7, #32]
   196c0:	0018      	movs	r0, r3
   196c2:	4b0f      	ldr	r3, [pc, #60]	; (19700 <MyWrapper+0x1f4>)
   196c4:	4798      	blx	r3
   196c6:	0003      	movs	r3, r0
   196c8:	b2db      	uxtb	r3, r3
   196ca:	001a      	movs	r2, r3
   196cc:	0021      	movs	r1, r4
   196ce:	0028      	movs	r0, r5
   196d0:	4b0c      	ldr	r3, [pc, #48]	; (19704 <MyWrapper+0x1f8>)
   196d2:	4798      	blx	r3
			xReturn = errQUEUE_FULL;
   196d4:	2300      	movs	r3, #0
   196d6:	627b      	str	r3, [r7, #36]	; 0x24
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
   196d8:	69fb      	ldr	r3, [r7, #28]
   196da:	0018      	movs	r0, r3
   196dc:	4b0d      	ldr	r3, [pc, #52]	; (19714 <MyWrapper+0x208>)
   196de:	4798      	blx	r3

	return xReturn;
   196e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
   196e2:	0018      	movs	r0, r3
   196e4:	46bd      	mov	sp, r7
   196e6:	b00a      	add	sp, #40	; 0x28
   196e8:	bdb0      	pop	{r4, r5, r7, pc}
   196ea:	46c0      	nop			; (mov r8, r8)
   196ec:	0001891d 	.word	0x0001891d
   196f0:	00016981 	.word	0x00016981
   196f4:	20000120 	.word	0x20000120
   196f8:	00016881 	.word	0x00016881
   196fc:	20000114 	.word	0x20000114
   19700:	00016961 	.word	0x00016961
   19704:	000172b9 	.word	0x000172b9
   19708:	00017915 	.word	0x00017915
   1970c:	0001a39d 	.word	0x0001a39d
   19710:	0001b15d 	.word	0x0001b15d
   19714:	00018929 	.word	0x00018929

00019718 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
   19718:	b5b0      	push	{r4, r5, r7, lr}
   1971a:	b08a      	sub	sp, #40	; 0x28
   1971c:	af00      	add	r7, sp, #0
   1971e:	60f8      	str	r0, [r7, #12]
   19720:	60b9      	str	r1, [r7, #8]
   19722:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
   19724:	2300      	movs	r3, #0
   19726:	627b      	str	r3, [r7, #36]	; 0x24
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
   19728:	68fb      	ldr	r3, [r7, #12]
   1972a:	623b      	str	r3, [r7, #32]

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
   1972c:	6a3b      	ldr	r3, [r7, #32]
   1972e:	2b00      	cmp	r3, #0
   19730:	d101      	bne.n	19736 <xQueueReceive+0x1e>
   19732:	b672      	cpsid	i
   19734:	e7fe      	b.n	19734 <xQueueReceive+0x1c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
   19736:	68bb      	ldr	r3, [r7, #8]
   19738:	2b00      	cmp	r3, #0
   1973a:	d103      	bne.n	19744 <xQueueReceive+0x2c>
   1973c:	6a3b      	ldr	r3, [r7, #32]
   1973e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   19740:	2b00      	cmp	r3, #0
   19742:	d101      	bne.n	19748 <xQueueReceive+0x30>
   19744:	2301      	movs	r3, #1
   19746:	e000      	b.n	1974a <xQueueReceive+0x32>
   19748:	2300      	movs	r3, #0
   1974a:	2b00      	cmp	r3, #0
   1974c:	d101      	bne.n	19752 <xQueueReceive+0x3a>
   1974e:	b672      	cpsid	i
   19750:	e7fe      	b.n	19750 <xQueueReceive+0x38>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
   19752:	4bbf      	ldr	r3, [pc, #764]	; (19a50 <xQueueReceive+0x338>)
   19754:	4798      	blx	r3
   19756:	1e03      	subs	r3, r0, #0
   19758:	d102      	bne.n	19760 <xQueueReceive+0x48>
   1975a:	687b      	ldr	r3, [r7, #4]
   1975c:	2b00      	cmp	r3, #0
   1975e:	d101      	bne.n	19764 <xQueueReceive+0x4c>
   19760:	2301      	movs	r3, #1
   19762:	e000      	b.n	19766 <xQueueReceive+0x4e>
   19764:	2300      	movs	r3, #0
   19766:	2b00      	cmp	r3, #0
   19768:	d101      	bne.n	1976e <xQueueReceive+0x56>
   1976a:	b672      	cpsid	i
   1976c:	e7fe      	b.n	1976c <xQueueReceive+0x54>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
   1976e:	4bb9      	ldr	r3, [pc, #740]	; (19a54 <xQueueReceive+0x33c>)
   19770:	4798      	blx	r3
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
   19772:	6a3b      	ldr	r3, [r7, #32]
   19774:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   19776:	61fb      	str	r3, [r7, #28]

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
   19778:	69fb      	ldr	r3, [r7, #28]
   1977a:	2b00      	cmp	r3, #0
   1977c:	d100      	bne.n	19780 <xQueueReceive+0x68>
   1977e:	e07d      	b.n	1987c <xQueueReceive+0x164>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
   19780:	68ba      	ldr	r2, [r7, #8]
   19782:	6a3b      	ldr	r3, [r7, #32]
   19784:	0011      	movs	r1, r2
   19786:	0018      	movs	r0, r3
   19788:	4bb3      	ldr	r3, [pc, #716]	; (19a58 <xQueueReceive+0x340>)
   1978a:	4798      	blx	r3
				traceQUEUE_RECEIVE( pxQueue );
   1978c:	4bb3      	ldr	r3, [pc, #716]	; (19a5c <xQueueReceive+0x344>)
   1978e:	4798      	blx	r3
   19790:	0003      	movs	r3, r0
   19792:	0018      	movs	r0, r3
   19794:	4bb2      	ldr	r3, [pc, #712]	; (19a60 <xQueueReceive+0x348>)
   19796:	4798      	blx	r3
   19798:	0003      	movs	r3, r0
   1979a:	001a      	movs	r2, r3
   1979c:	4bb1      	ldr	r3, [pc, #708]	; (19a64 <xQueueReceive+0x34c>)
   1979e:	881b      	ldrh	r3, [r3, #0]
   197a0:	4013      	ands	r3, r2
   197a2:	b29b      	uxth	r3, r3
   197a4:	2b00      	cmp	r3, #0
   197a6:	d029      	beq.n	197fc <xQueueReceive+0xe4>
   197a8:	6a3b      	ldr	r3, [r7, #32]
   197aa:	0018      	movs	r0, r3
   197ac:	4bae      	ldr	r3, [pc, #696]	; (19a68 <xQueueReceive+0x350>)
   197ae:	4798      	blx	r3
   197b0:	0003      	movs	r3, r0
   197b2:	001a      	movs	r2, r3
   197b4:	4bab      	ldr	r3, [pc, #684]	; (19a64 <xQueueReceive+0x34c>)
   197b6:	881b      	ldrh	r3, [r3, #0]
   197b8:	4013      	ands	r3, r2
   197ba:	b29b      	uxth	r3, r3
   197bc:	2b00      	cmp	r3, #0
   197be:	d01d      	beq.n	197fc <xQueueReceive+0xe4>
   197c0:	6a3b      	ldr	r3, [r7, #32]
   197c2:	0018      	movs	r0, r3
   197c4:	4ba9      	ldr	r3, [pc, #676]	; (19a6c <xQueueReceive+0x354>)
   197c6:	4798      	blx	r3
   197c8:	0003      	movs	r3, r0
   197ca:	001a      	movs	r2, r3
   197cc:	4ba8      	ldr	r3, [pc, #672]	; (19a70 <xQueueReceive+0x358>)
   197ce:	5c9b      	ldrb	r3, [r3, r2]
   197d0:	3328      	adds	r3, #40	; 0x28
   197d2:	b2db      	uxtb	r3, r3
   197d4:	001d      	movs	r5, r3
   197d6:	6a3b      	ldr	r3, [r7, #32]
   197d8:	0018      	movs	r0, r3
   197da:	4ba4      	ldr	r3, [pc, #656]	; (19a6c <xQueueReceive+0x354>)
   197dc:	4798      	blx	r3
   197de:	0003      	movs	r3, r0
   197e0:	001a      	movs	r2, r3
   197e2:	4ba3      	ldr	r3, [pc, #652]	; (19a70 <xQueueReceive+0x358>)
   197e4:	5c9c      	ldrb	r4, [r3, r2]
   197e6:	6a3b      	ldr	r3, [r7, #32]
   197e8:	0018      	movs	r0, r3
   197ea:	4ba2      	ldr	r3, [pc, #648]	; (19a74 <xQueueReceive+0x35c>)
   197ec:	4798      	blx	r3
   197ee:	0003      	movs	r3, r0
   197f0:	b2db      	uxtb	r3, r3
   197f2:	001a      	movs	r2, r3
   197f4:	0021      	movs	r1, r4
   197f6:	0028      	movs	r0, r5
   197f8:	4b9f      	ldr	r3, [pc, #636]	; (19a78 <xQueueReceive+0x360>)
   197fa:	4798      	blx	r3
   197fc:	6a3b      	ldr	r3, [r7, #32]
   197fe:	0018      	movs	r0, r3
   19800:	4b9a      	ldr	r3, [pc, #616]	; (19a6c <xQueueReceive+0x354>)
   19802:	4798      	blx	r3
   19804:	0003      	movs	r3, r0
   19806:	001a      	movs	r2, r3
   19808:	4b99      	ldr	r3, [pc, #612]	; (19a70 <xQueueReceive+0x358>)
   1980a:	5c9c      	ldrb	r4, [r3, r2]
   1980c:	6a3b      	ldr	r3, [r7, #32]
   1980e:	0018      	movs	r0, r3
   19810:	4b98      	ldr	r3, [pc, #608]	; (19a74 <xQueueReceive+0x35c>)
   19812:	4798      	blx	r3
   19814:	0003      	movs	r3, r0
   19816:	b2dd      	uxtb	r5, r3
   19818:	6a3b      	ldr	r3, [r7, #32]
   1981a:	0018      	movs	r0, r3
   1981c:	4b93      	ldr	r3, [pc, #588]	; (19a6c <xQueueReceive+0x354>)
   1981e:	4798      	blx	r3
   19820:	0003      	movs	r3, r0
   19822:	001a      	movs	r2, r3
   19824:	4b92      	ldr	r3, [pc, #584]	; (19a70 <xQueueReceive+0x358>)
   19826:	5c9b      	ldrb	r3, [r3, r2]
   19828:	2b02      	cmp	r3, #2
   1982a:	d108      	bne.n	1983e <xQueueReceive+0x126>
   1982c:	4b8b      	ldr	r3, [pc, #556]	; (19a5c <xQueueReceive+0x344>)
   1982e:	4798      	blx	r3
   19830:	0003      	movs	r3, r0
   19832:	0018      	movs	r0, r3
   19834:	4b91      	ldr	r3, [pc, #580]	; (19a7c <xQueueReceive+0x364>)
   19836:	4798      	blx	r3
   19838:	0003      	movs	r3, r0
   1983a:	b2db      	uxtb	r3, r3
   1983c:	e004      	b.n	19848 <xQueueReceive+0x130>
   1983e:	6a3b      	ldr	r3, [r7, #32]
   19840:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   19842:	b2db      	uxtb	r3, r3
   19844:	3b01      	subs	r3, #1
   19846:	b2db      	uxtb	r3, r3
   19848:	001a      	movs	r2, r3
   1984a:	0029      	movs	r1, r5
   1984c:	0020      	movs	r0, r4
   1984e:	4b8c      	ldr	r3, [pc, #560]	; (19a80 <xQueueReceive+0x368>)
   19850:	4798      	blx	r3
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
   19852:	69fb      	ldr	r3, [r7, #28]
   19854:	1e5a      	subs	r2, r3, #1
   19856:	6a3b      	ldr	r3, [r7, #32]
   19858:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
   1985a:	6a3b      	ldr	r3, [r7, #32]
   1985c:	691b      	ldr	r3, [r3, #16]
   1985e:	2b00      	cmp	r3, #0
   19860:	d008      	beq.n	19874 <xQueueReceive+0x15c>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
   19862:	6a3b      	ldr	r3, [r7, #32]
   19864:	3310      	adds	r3, #16
   19866:	0018      	movs	r0, r3
   19868:	4b86      	ldr	r3, [pc, #536]	; (19a84 <xQueueReceive+0x36c>)
   1986a:	4798      	blx	r3
   1986c:	1e03      	subs	r3, r0, #0
   1986e:	d001      	beq.n	19874 <xQueueReceive+0x15c>
					{
						queueYIELD_IF_USING_PREEMPTION();
   19870:	4b85      	ldr	r3, [pc, #532]	; (19a88 <xQueueReceive+0x370>)
   19872:	4798      	blx	r3
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
   19874:	4b85      	ldr	r3, [pc, #532]	; (19a8c <xQueueReceive+0x374>)
   19876:	4798      	blx	r3
				return pdPASS;
   19878:	2301      	movs	r3, #1
   1987a:	e15f      	b.n	19b3c <xQueueReceive+0x424>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
   1987c:	687b      	ldr	r3, [r7, #4]
   1987e:	2b00      	cmp	r3, #0
   19880:	d13b      	bne.n	198fa <xQueueReceive+0x1e2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
   19882:	4b82      	ldr	r3, [pc, #520]	; (19a8c <xQueueReceive+0x374>)
   19884:	4798      	blx	r3
					traceQUEUE_RECEIVE_FAILED( pxQueue );
   19886:	4b75      	ldr	r3, [pc, #468]	; (19a5c <xQueueReceive+0x344>)
   19888:	4798      	blx	r3
   1988a:	0003      	movs	r3, r0
   1988c:	0018      	movs	r0, r3
   1988e:	4b74      	ldr	r3, [pc, #464]	; (19a60 <xQueueReceive+0x348>)
   19890:	4798      	blx	r3
   19892:	0003      	movs	r3, r0
   19894:	001a      	movs	r2, r3
   19896:	4b73      	ldr	r3, [pc, #460]	; (19a64 <xQueueReceive+0x34c>)
   19898:	881b      	ldrh	r3, [r3, #0]
   1989a:	4013      	ands	r3, r2
   1989c:	b29b      	uxth	r3, r3
   1989e:	2b00      	cmp	r3, #0
   198a0:	d029      	beq.n	198f6 <xQueueReceive+0x1de>
   198a2:	6a3b      	ldr	r3, [r7, #32]
   198a4:	0018      	movs	r0, r3
   198a6:	4b70      	ldr	r3, [pc, #448]	; (19a68 <xQueueReceive+0x350>)
   198a8:	4798      	blx	r3
   198aa:	0003      	movs	r3, r0
   198ac:	001a      	movs	r2, r3
   198ae:	4b6d      	ldr	r3, [pc, #436]	; (19a64 <xQueueReceive+0x34c>)
   198b0:	881b      	ldrh	r3, [r3, #0]
   198b2:	4013      	ands	r3, r2
   198b4:	b29b      	uxth	r3, r3
   198b6:	2b00      	cmp	r3, #0
   198b8:	d01d      	beq.n	198f6 <xQueueReceive+0x1de>
   198ba:	6a3b      	ldr	r3, [r7, #32]
   198bc:	0018      	movs	r0, r3
   198be:	4b6b      	ldr	r3, [pc, #428]	; (19a6c <xQueueReceive+0x354>)
   198c0:	4798      	blx	r3
   198c2:	0003      	movs	r3, r0
   198c4:	001a      	movs	r2, r3
   198c6:	4b6a      	ldr	r3, [pc, #424]	; (19a70 <xQueueReceive+0x358>)
   198c8:	5c9b      	ldrb	r3, [r3, r2]
   198ca:	3350      	adds	r3, #80	; 0x50
   198cc:	b2db      	uxtb	r3, r3
   198ce:	001d      	movs	r5, r3
   198d0:	6a3b      	ldr	r3, [r7, #32]
   198d2:	0018      	movs	r0, r3
   198d4:	4b65      	ldr	r3, [pc, #404]	; (19a6c <xQueueReceive+0x354>)
   198d6:	4798      	blx	r3
   198d8:	0003      	movs	r3, r0
   198da:	001a      	movs	r2, r3
   198dc:	4b64      	ldr	r3, [pc, #400]	; (19a70 <xQueueReceive+0x358>)
   198de:	5c9c      	ldrb	r4, [r3, r2]
   198e0:	6a3b      	ldr	r3, [r7, #32]
   198e2:	0018      	movs	r0, r3
   198e4:	4b63      	ldr	r3, [pc, #396]	; (19a74 <xQueueReceive+0x35c>)
   198e6:	4798      	blx	r3
   198e8:	0003      	movs	r3, r0
   198ea:	b2db      	uxtb	r3, r3
   198ec:	001a      	movs	r2, r3
   198ee:	0021      	movs	r1, r4
   198f0:	0028      	movs	r0, r5
   198f2:	4b61      	ldr	r3, [pc, #388]	; (19a78 <xQueueReceive+0x360>)
   198f4:	4798      	blx	r3
					return errQUEUE_EMPTY;
   198f6:	2300      	movs	r3, #0
   198f8:	e120      	b.n	19b3c <xQueueReceive+0x424>
				}
				else if( xEntryTimeSet == pdFALSE )
   198fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   198fc:	2b00      	cmp	r3, #0
   198fe:	d106      	bne.n	1990e <xQueueReceive+0x1f6>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
   19900:	2314      	movs	r3, #20
   19902:	18fb      	adds	r3, r7, r3
   19904:	0018      	movs	r0, r3
   19906:	4b62      	ldr	r3, [pc, #392]	; (19a90 <xQueueReceive+0x378>)
   19908:	4798      	blx	r3
					xEntryTimeSet = pdTRUE;
   1990a:	2301      	movs	r3, #1
   1990c:	627b      	str	r3, [r7, #36]	; 0x24
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
   1990e:	4b5f      	ldr	r3, [pc, #380]	; (19a8c <xQueueReceive+0x374>)
   19910:	4798      	blx	r3

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
   19912:	4b60      	ldr	r3, [pc, #384]	; (19a94 <xQueueReceive+0x37c>)
   19914:	4798      	blx	r3
		prvLockQueue( pxQueue );
   19916:	4b4f      	ldr	r3, [pc, #316]	; (19a54 <xQueueReceive+0x33c>)
   19918:	4798      	blx	r3
   1991a:	6a3b      	ldr	r3, [r7, #32]
   1991c:	2244      	movs	r2, #68	; 0x44
   1991e:	5c9b      	ldrb	r3, [r3, r2]
   19920:	b25b      	sxtb	r3, r3
   19922:	3301      	adds	r3, #1
   19924:	d103      	bne.n	1992e <xQueueReceive+0x216>
   19926:	6a3b      	ldr	r3, [r7, #32]
   19928:	2244      	movs	r2, #68	; 0x44
   1992a:	2100      	movs	r1, #0
   1992c:	5499      	strb	r1, [r3, r2]
   1992e:	6a3b      	ldr	r3, [r7, #32]
   19930:	2245      	movs	r2, #69	; 0x45
   19932:	5c9b      	ldrb	r3, [r3, r2]
   19934:	b25b      	sxtb	r3, r3
   19936:	3301      	adds	r3, #1
   19938:	d103      	bne.n	19942 <xQueueReceive+0x22a>
   1993a:	6a3b      	ldr	r3, [r7, #32]
   1993c:	2245      	movs	r2, #69	; 0x45
   1993e:	2100      	movs	r1, #0
   19940:	5499      	strb	r1, [r3, r2]
   19942:	4b52      	ldr	r3, [pc, #328]	; (19a8c <xQueueReceive+0x374>)
   19944:	4798      	blx	r3

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
   19946:	1d3a      	adds	r2, r7, #4
   19948:	2314      	movs	r3, #20
   1994a:	18fb      	adds	r3, r7, r3
   1994c:	0011      	movs	r1, r2
   1994e:	0018      	movs	r0, r3
   19950:	4b51      	ldr	r3, [pc, #324]	; (19a98 <xQueueReceive+0x380>)
   19952:	4798      	blx	r3
   19954:	1e03      	subs	r3, r0, #0
   19956:	d000      	beq.n	1995a <xQueueReceive+0x242>
   19958:	e0aa      	b.n	19ab0 <xQueueReceive+0x398>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
   1995a:	6a3b      	ldr	r3, [r7, #32]
   1995c:	0018      	movs	r0, r3
   1995e:	4b4f      	ldr	r3, [pc, #316]	; (19a9c <xQueueReceive+0x384>)
   19960:	4798      	blx	r3
   19962:	1e03      	subs	r3, r0, #0
   19964:	d06d      	beq.n	19a42 <xQueueReceive+0x32a>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
   19966:	4b3d      	ldr	r3, [pc, #244]	; (19a5c <xQueueReceive+0x344>)
   19968:	4798      	blx	r3
   1996a:	0003      	movs	r3, r0
   1996c:	0018      	movs	r0, r3
   1996e:	4b3c      	ldr	r3, [pc, #240]	; (19a60 <xQueueReceive+0x348>)
   19970:	4798      	blx	r3
   19972:	0003      	movs	r3, r0
   19974:	001a      	movs	r2, r3
   19976:	4b3b      	ldr	r3, [pc, #236]	; (19a64 <xQueueReceive+0x34c>)
   19978:	881b      	ldrh	r3, [r3, #0]
   1997a:	4013      	ands	r3, r2
   1997c:	b29b      	uxth	r3, r3
   1997e:	2b00      	cmp	r3, #0
   19980:	d029      	beq.n	199d6 <xQueueReceive+0x2be>
   19982:	6a3b      	ldr	r3, [r7, #32]
   19984:	0018      	movs	r0, r3
   19986:	4b38      	ldr	r3, [pc, #224]	; (19a68 <xQueueReceive+0x350>)
   19988:	4798      	blx	r3
   1998a:	0003      	movs	r3, r0
   1998c:	001a      	movs	r2, r3
   1998e:	4b35      	ldr	r3, [pc, #212]	; (19a64 <xQueueReceive+0x34c>)
   19990:	881b      	ldrh	r3, [r3, #0]
   19992:	4013      	ands	r3, r2
   19994:	b29b      	uxth	r3, r3
   19996:	2b00      	cmp	r3, #0
   19998:	d01d      	beq.n	199d6 <xQueueReceive+0x2be>
   1999a:	6a3b      	ldr	r3, [r7, #32]
   1999c:	0018      	movs	r0, r3
   1999e:	4b33      	ldr	r3, [pc, #204]	; (19a6c <xQueueReceive+0x354>)
   199a0:	4798      	blx	r3
   199a2:	0003      	movs	r3, r0
   199a4:	001a      	movs	r2, r3
   199a6:	4b32      	ldr	r3, [pc, #200]	; (19a70 <xQueueReceive+0x358>)
   199a8:	5c9b      	ldrb	r3, [r3, r2]
   199aa:	3368      	adds	r3, #104	; 0x68
   199ac:	b2db      	uxtb	r3, r3
   199ae:	001d      	movs	r5, r3
   199b0:	6a3b      	ldr	r3, [r7, #32]
   199b2:	0018      	movs	r0, r3
   199b4:	4b2d      	ldr	r3, [pc, #180]	; (19a6c <xQueueReceive+0x354>)
   199b6:	4798      	blx	r3
   199b8:	0003      	movs	r3, r0
   199ba:	001a      	movs	r2, r3
   199bc:	4b2c      	ldr	r3, [pc, #176]	; (19a70 <xQueueReceive+0x358>)
   199be:	5c9c      	ldrb	r4, [r3, r2]
   199c0:	6a3b      	ldr	r3, [r7, #32]
   199c2:	0018      	movs	r0, r3
   199c4:	4b2b      	ldr	r3, [pc, #172]	; (19a74 <xQueueReceive+0x35c>)
   199c6:	4798      	blx	r3
   199c8:	0003      	movs	r3, r0
   199ca:	b2db      	uxtb	r3, r3
   199cc:	001a      	movs	r2, r3
   199ce:	0021      	movs	r1, r4
   199d0:	0028      	movs	r0, r5
   199d2:	4b29      	ldr	r3, [pc, #164]	; (19a78 <xQueueReceive+0x360>)
   199d4:	4798      	blx	r3
   199d6:	6a3b      	ldr	r3, [r7, #32]
   199d8:	0018      	movs	r0, r3
   199da:	4b24      	ldr	r3, [pc, #144]	; (19a6c <xQueueReceive+0x354>)
   199dc:	4798      	blx	r3
   199de:	0003      	movs	r3, r0
   199e0:	001a      	movs	r2, r3
   199e2:	4b23      	ldr	r3, [pc, #140]	; (19a70 <xQueueReceive+0x358>)
   199e4:	5c9b      	ldrb	r3, [r3, r2]
   199e6:	2b02      	cmp	r3, #2
   199e8:	d018      	beq.n	19a1c <xQueueReceive+0x304>
   199ea:	4b1c      	ldr	r3, [pc, #112]	; (19a5c <xQueueReceive+0x344>)
   199ec:	4798      	blx	r3
   199ee:	0003      	movs	r3, r0
   199f0:	0018      	movs	r0, r3
   199f2:	4b1b      	ldr	r3, [pc, #108]	; (19a60 <xQueueReceive+0x348>)
   199f4:	4798      	blx	r3
   199f6:	0003      	movs	r3, r0
   199f8:	001a      	movs	r2, r3
   199fa:	4b1a      	ldr	r3, [pc, #104]	; (19a64 <xQueueReceive+0x34c>)
   199fc:	881b      	ldrh	r3, [r3, #0]
   199fe:	4013      	ands	r3, r2
   19a00:	b29b      	uxth	r3, r3
   19a02:	2b00      	cmp	r3, #0
   19a04:	d00a      	beq.n	19a1c <xQueueReceive+0x304>
   19a06:	4b15      	ldr	r3, [pc, #84]	; (19a5c <xQueueReceive+0x344>)
   19a08:	4798      	blx	r3
   19a0a:	0003      	movs	r3, r0
   19a0c:	0018      	movs	r0, r3
   19a0e:	4b1b      	ldr	r3, [pc, #108]	; (19a7c <xQueueReceive+0x364>)
   19a10:	4798      	blx	r3
   19a12:	0003      	movs	r3, r0
   19a14:	b2db      	uxtb	r3, r3
   19a16:	0018      	movs	r0, r3
   19a18:	4b21      	ldr	r3, [pc, #132]	; (19aa0 <xQueueReceive+0x388>)
   19a1a:	4798      	blx	r3
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
   19a1c:	6a3b      	ldr	r3, [r7, #32]
   19a1e:	3324      	adds	r3, #36	; 0x24
   19a20:	687a      	ldr	r2, [r7, #4]
   19a22:	0011      	movs	r1, r2
   19a24:	0018      	movs	r0, r3
   19a26:	4b1f      	ldr	r3, [pc, #124]	; (19aa4 <xQueueReceive+0x38c>)
   19a28:	4798      	blx	r3
				prvUnlockQueue( pxQueue );
   19a2a:	6a3b      	ldr	r3, [r7, #32]
   19a2c:	0018      	movs	r0, r3
   19a2e:	4b1e      	ldr	r3, [pc, #120]	; (19aa8 <xQueueReceive+0x390>)
   19a30:	4798      	blx	r3
				if( xTaskResumeAll() == pdFALSE )
   19a32:	4b1e      	ldr	r3, [pc, #120]	; (19aac <xQueueReceive+0x394>)
   19a34:	4798      	blx	r3
   19a36:	1e03      	subs	r3, r0, #0
   19a38:	d000      	beq.n	19a3c <xQueueReceive+0x324>
   19a3a:	e698      	b.n	1976e <xQueueReceive+0x56>
				{
					portYIELD_WITHIN_API();
   19a3c:	4b12      	ldr	r3, [pc, #72]	; (19a88 <xQueueReceive+0x370>)
   19a3e:	4798      	blx	r3
   19a40:	e695      	b.n	1976e <xQueueReceive+0x56>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
   19a42:	6a3b      	ldr	r3, [r7, #32]
   19a44:	0018      	movs	r0, r3
   19a46:	4b18      	ldr	r3, [pc, #96]	; (19aa8 <xQueueReceive+0x390>)
   19a48:	4798      	blx	r3
				( void ) xTaskResumeAll();
   19a4a:	4b18      	ldr	r3, [pc, #96]	; (19aac <xQueueReceive+0x394>)
   19a4c:	4798      	blx	r3
   19a4e:	e68e      	b.n	1976e <xQueueReceive+0x56>
   19a50:	0001b5ed 	.word	0x0001b5ed
   19a54:	000188c9 	.word	0x000188c9
   19a58:	0001a179 	.word	0x0001a179
   19a5c:	00016b5d 	.word	0x00016b5d
   19a60:	000168c1 	.word	0x000168c1
   19a64:	20000120 	.word	0x20000120
   19a68:	00016981 	.word	0x00016981
   19a6c:	00016881 	.word	0x00016881
   19a70:	20000114 	.word	0x20000114
   19a74:	00016961 	.word	0x00016961
   19a78:	000172b9 	.word	0x000172b9
   19a7c:	000168a1 	.word	0x000168a1
   19a80:	00017915 	.word	0x00017915
   19a84:	0001b15d 	.word	0x0001b15d
   19a88:	000188b1 	.word	0x000188b1
   19a8c:	000188ed 	.word	0x000188ed
   19a90:	0001b29d 	.word	0x0001b29d
   19a94:	0001ab85 	.word	0x0001ab85
   19a98:	0001b2c5 	.word	0x0001b2c5
   19a9c:	0001a2b9 	.word	0x0001a2b9
   19aa0:	00017a51 	.word	0x00017a51
   19aa4:	0001b039 	.word	0x0001b039
   19aa8:	0001a1c9 	.word	0x0001a1c9
   19aac:	0001ab9d 	.word	0x0001ab9d
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
   19ab0:	6a3b      	ldr	r3, [r7, #32]
   19ab2:	0018      	movs	r0, r3
   19ab4:	4b23      	ldr	r3, [pc, #140]	; (19b44 <xQueueReceive+0x42c>)
   19ab6:	4798      	blx	r3
			( void ) xTaskResumeAll();
   19ab8:	4b23      	ldr	r3, [pc, #140]	; (19b48 <xQueueReceive+0x430>)
   19aba:	4798      	blx	r3

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
   19abc:	6a3b      	ldr	r3, [r7, #32]
   19abe:	0018      	movs	r0, r3
   19ac0:	4b22      	ldr	r3, [pc, #136]	; (19b4c <xQueueReceive+0x434>)
   19ac2:	4798      	blx	r3
   19ac4:	1e03      	subs	r3, r0, #0
   19ac6:	d100      	bne.n	19aca <xQueueReceive+0x3b2>
   19ac8:	e651      	b.n	1976e <xQueueReceive+0x56>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
   19aca:	4b21      	ldr	r3, [pc, #132]	; (19b50 <xQueueReceive+0x438>)
   19acc:	4798      	blx	r3
   19ace:	0003      	movs	r3, r0
   19ad0:	0018      	movs	r0, r3
   19ad2:	4b20      	ldr	r3, [pc, #128]	; (19b54 <xQueueReceive+0x43c>)
   19ad4:	4798      	blx	r3
   19ad6:	0003      	movs	r3, r0
   19ad8:	001a      	movs	r2, r3
   19ada:	4b1f      	ldr	r3, [pc, #124]	; (19b58 <xQueueReceive+0x440>)
   19adc:	881b      	ldrh	r3, [r3, #0]
   19ade:	4013      	ands	r3, r2
   19ae0:	b29b      	uxth	r3, r3
   19ae2:	2b00      	cmp	r3, #0
   19ae4:	d029      	beq.n	19b3a <xQueueReceive+0x422>
   19ae6:	6a3b      	ldr	r3, [r7, #32]
   19ae8:	0018      	movs	r0, r3
   19aea:	4b1c      	ldr	r3, [pc, #112]	; (19b5c <xQueueReceive+0x444>)
   19aec:	4798      	blx	r3
   19aee:	0003      	movs	r3, r0
   19af0:	001a      	movs	r2, r3
   19af2:	4b19      	ldr	r3, [pc, #100]	; (19b58 <xQueueReceive+0x440>)
   19af4:	881b      	ldrh	r3, [r3, #0]
   19af6:	4013      	ands	r3, r2
   19af8:	b29b      	uxth	r3, r3
   19afa:	2b00      	cmp	r3, #0
   19afc:	d01d      	beq.n	19b3a <xQueueReceive+0x422>
   19afe:	6a3b      	ldr	r3, [r7, #32]
   19b00:	0018      	movs	r0, r3
   19b02:	4b17      	ldr	r3, [pc, #92]	; (19b60 <xQueueReceive+0x448>)
   19b04:	4798      	blx	r3
   19b06:	0003      	movs	r3, r0
   19b08:	001a      	movs	r2, r3
   19b0a:	4b16      	ldr	r3, [pc, #88]	; (19b64 <xQueueReceive+0x44c>)
   19b0c:	5c9b      	ldrb	r3, [r3, r2]
   19b0e:	3350      	adds	r3, #80	; 0x50
   19b10:	b2db      	uxtb	r3, r3
   19b12:	001d      	movs	r5, r3
   19b14:	6a3b      	ldr	r3, [r7, #32]
   19b16:	0018      	movs	r0, r3
   19b18:	4b11      	ldr	r3, [pc, #68]	; (19b60 <xQueueReceive+0x448>)
   19b1a:	4798      	blx	r3
   19b1c:	0003      	movs	r3, r0
   19b1e:	001a      	movs	r2, r3
   19b20:	4b10      	ldr	r3, [pc, #64]	; (19b64 <xQueueReceive+0x44c>)
   19b22:	5c9c      	ldrb	r4, [r3, r2]
   19b24:	6a3b      	ldr	r3, [r7, #32]
   19b26:	0018      	movs	r0, r3
   19b28:	4b0f      	ldr	r3, [pc, #60]	; (19b68 <xQueueReceive+0x450>)
   19b2a:	4798      	blx	r3
   19b2c:	0003      	movs	r3, r0
   19b2e:	b2db      	uxtb	r3, r3
   19b30:	001a      	movs	r2, r3
   19b32:	0021      	movs	r1, r4
   19b34:	0028      	movs	r0, r5
   19b36:	4b0d      	ldr	r3, [pc, #52]	; (19b6c <xQueueReceive+0x454>)
   19b38:	4798      	blx	r3
				return errQUEUE_EMPTY;
   19b3a:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
   19b3c:	0018      	movs	r0, r3
   19b3e:	46bd      	mov	sp, r7
   19b40:	b00a      	add	sp, #40	; 0x28
   19b42:	bdb0      	pop	{r4, r5, r7, pc}
   19b44:	0001a1c9 	.word	0x0001a1c9
   19b48:	0001ab9d 	.word	0x0001ab9d
   19b4c:	0001a2b9 	.word	0x0001a2b9
   19b50:	00016b5d 	.word	0x00016b5d
   19b54:	000168c1 	.word	0x000168c1
   19b58:	20000120 	.word	0x20000120
   19b5c:	00016981 	.word	0x00016981
   19b60:	00016881 	.word	0x00016881
   19b64:	20000114 	.word	0x20000114
   19b68:	00016961 	.word	0x00016961
   19b6c:	000172b9 	.word	0x000172b9

00019b70 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
   19b70:	b5b0      	push	{r4, r5, r7, lr}
   19b72:	b08a      	sub	sp, #40	; 0x28
   19b74:	af00      	add	r7, sp, #0
   19b76:	6078      	str	r0, [r7, #4]
   19b78:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
   19b7a:	2300      	movs	r3, #0
   19b7c:	627b      	str	r3, [r7, #36]	; 0x24
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
   19b7e:	687b      	ldr	r3, [r7, #4]
   19b80:	61fb      	str	r3, [r7, #28]

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
   19b82:	2300      	movs	r3, #0
   19b84:	623b      	str	r3, [r7, #32]
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
   19b86:	69fb      	ldr	r3, [r7, #28]
   19b88:	2b00      	cmp	r3, #0
   19b8a:	d101      	bne.n	19b90 <xQueueSemaphoreTake+0x20>
   19b8c:	b672      	cpsid	i
   19b8e:	e7fe      	b.n	19b8e <xQueueSemaphoreTake+0x1e>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
   19b90:	69fb      	ldr	r3, [r7, #28]
   19b92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   19b94:	2b00      	cmp	r3, #0
   19b96:	d001      	beq.n	19b9c <xQueueSemaphoreTake+0x2c>
   19b98:	b672      	cpsid	i
   19b9a:	e7fe      	b.n	19b9a <xQueueSemaphoreTake+0x2a>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
   19b9c:	4bcb      	ldr	r3, [pc, #812]	; (19ecc <xQueueSemaphoreTake+0x35c>)
   19b9e:	4798      	blx	r3
   19ba0:	1e03      	subs	r3, r0, #0
   19ba2:	d102      	bne.n	19baa <xQueueSemaphoreTake+0x3a>
   19ba4:	683b      	ldr	r3, [r7, #0]
   19ba6:	2b00      	cmp	r3, #0
   19ba8:	d101      	bne.n	19bae <xQueueSemaphoreTake+0x3e>
   19baa:	2301      	movs	r3, #1
   19bac:	e000      	b.n	19bb0 <xQueueSemaphoreTake+0x40>
   19bae:	2300      	movs	r3, #0
   19bb0:	2b00      	cmp	r3, #0
   19bb2:	d101      	bne.n	19bb8 <xQueueSemaphoreTake+0x48>
   19bb4:	b672      	cpsid	i
   19bb6:	e7fe      	b.n	19bb6 <xQueueSemaphoreTake+0x46>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
   19bb8:	4bc5      	ldr	r3, [pc, #788]	; (19ed0 <xQueueSemaphoreTake+0x360>)
   19bba:	4798      	blx	r3
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
   19bbc:	69fb      	ldr	r3, [r7, #28]
   19bbe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   19bc0:	61bb      	str	r3, [r7, #24]

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
   19bc2:	69bb      	ldr	r3, [r7, #24]
   19bc4:	2b00      	cmp	r3, #0
   19bc6:	d100      	bne.n	19bca <xQueueSemaphoreTake+0x5a>
   19bc8:	e080      	b.n	19ccc <xQueueSemaphoreTake+0x15c>
			{
				traceQUEUE_RECEIVE( pxQueue );
   19bca:	4bc2      	ldr	r3, [pc, #776]	; (19ed4 <xQueueSemaphoreTake+0x364>)
   19bcc:	4798      	blx	r3
   19bce:	0003      	movs	r3, r0
   19bd0:	0018      	movs	r0, r3
   19bd2:	4bc1      	ldr	r3, [pc, #772]	; (19ed8 <xQueueSemaphoreTake+0x368>)
   19bd4:	4798      	blx	r3
   19bd6:	0003      	movs	r3, r0
   19bd8:	001a      	movs	r2, r3
   19bda:	4bc0      	ldr	r3, [pc, #768]	; (19edc <xQueueSemaphoreTake+0x36c>)
   19bdc:	881b      	ldrh	r3, [r3, #0]
   19bde:	4013      	ands	r3, r2
   19be0:	b29b      	uxth	r3, r3
   19be2:	2b00      	cmp	r3, #0
   19be4:	d029      	beq.n	19c3a <xQueueSemaphoreTake+0xca>
   19be6:	69fb      	ldr	r3, [r7, #28]
   19be8:	0018      	movs	r0, r3
   19bea:	4bbd      	ldr	r3, [pc, #756]	; (19ee0 <xQueueSemaphoreTake+0x370>)
   19bec:	4798      	blx	r3
   19bee:	0003      	movs	r3, r0
   19bf0:	001a      	movs	r2, r3
   19bf2:	4bba      	ldr	r3, [pc, #744]	; (19edc <xQueueSemaphoreTake+0x36c>)
   19bf4:	881b      	ldrh	r3, [r3, #0]
   19bf6:	4013      	ands	r3, r2
   19bf8:	b29b      	uxth	r3, r3
   19bfa:	2b00      	cmp	r3, #0
   19bfc:	d01d      	beq.n	19c3a <xQueueSemaphoreTake+0xca>
   19bfe:	69fb      	ldr	r3, [r7, #28]
   19c00:	0018      	movs	r0, r3
   19c02:	4bb8      	ldr	r3, [pc, #736]	; (19ee4 <xQueueSemaphoreTake+0x374>)
   19c04:	4798      	blx	r3
   19c06:	0003      	movs	r3, r0
   19c08:	001a      	movs	r2, r3
   19c0a:	4bb7      	ldr	r3, [pc, #732]	; (19ee8 <xQueueSemaphoreTake+0x378>)
   19c0c:	5c9b      	ldrb	r3, [r3, r2]
   19c0e:	3328      	adds	r3, #40	; 0x28
   19c10:	b2db      	uxtb	r3, r3
   19c12:	001d      	movs	r5, r3
   19c14:	69fb      	ldr	r3, [r7, #28]
   19c16:	0018      	movs	r0, r3
   19c18:	4bb2      	ldr	r3, [pc, #712]	; (19ee4 <xQueueSemaphoreTake+0x374>)
   19c1a:	4798      	blx	r3
   19c1c:	0003      	movs	r3, r0
   19c1e:	001a      	movs	r2, r3
   19c20:	4bb1      	ldr	r3, [pc, #708]	; (19ee8 <xQueueSemaphoreTake+0x378>)
   19c22:	5c9c      	ldrb	r4, [r3, r2]
   19c24:	69fb      	ldr	r3, [r7, #28]
   19c26:	0018      	movs	r0, r3
   19c28:	4bb0      	ldr	r3, [pc, #704]	; (19eec <xQueueSemaphoreTake+0x37c>)
   19c2a:	4798      	blx	r3
   19c2c:	0003      	movs	r3, r0
   19c2e:	b2db      	uxtb	r3, r3
   19c30:	001a      	movs	r2, r3
   19c32:	0021      	movs	r1, r4
   19c34:	0028      	movs	r0, r5
   19c36:	4bae      	ldr	r3, [pc, #696]	; (19ef0 <xQueueSemaphoreTake+0x380>)
   19c38:	4798      	blx	r3
   19c3a:	69fb      	ldr	r3, [r7, #28]
   19c3c:	0018      	movs	r0, r3
   19c3e:	4ba9      	ldr	r3, [pc, #676]	; (19ee4 <xQueueSemaphoreTake+0x374>)
   19c40:	4798      	blx	r3
   19c42:	0003      	movs	r3, r0
   19c44:	001a      	movs	r2, r3
   19c46:	4ba8      	ldr	r3, [pc, #672]	; (19ee8 <xQueueSemaphoreTake+0x378>)
   19c48:	5c9c      	ldrb	r4, [r3, r2]
   19c4a:	69fb      	ldr	r3, [r7, #28]
   19c4c:	0018      	movs	r0, r3
   19c4e:	4ba7      	ldr	r3, [pc, #668]	; (19eec <xQueueSemaphoreTake+0x37c>)
   19c50:	4798      	blx	r3
   19c52:	0003      	movs	r3, r0
   19c54:	b2dd      	uxtb	r5, r3
   19c56:	69fb      	ldr	r3, [r7, #28]
   19c58:	0018      	movs	r0, r3
   19c5a:	4ba2      	ldr	r3, [pc, #648]	; (19ee4 <xQueueSemaphoreTake+0x374>)
   19c5c:	4798      	blx	r3
   19c5e:	0003      	movs	r3, r0
   19c60:	001a      	movs	r2, r3
   19c62:	4ba1      	ldr	r3, [pc, #644]	; (19ee8 <xQueueSemaphoreTake+0x378>)
   19c64:	5c9b      	ldrb	r3, [r3, r2]
   19c66:	2b02      	cmp	r3, #2
   19c68:	d108      	bne.n	19c7c <xQueueSemaphoreTake+0x10c>
   19c6a:	4b9a      	ldr	r3, [pc, #616]	; (19ed4 <xQueueSemaphoreTake+0x364>)
   19c6c:	4798      	blx	r3
   19c6e:	0003      	movs	r3, r0
   19c70:	0018      	movs	r0, r3
   19c72:	4ba0      	ldr	r3, [pc, #640]	; (19ef4 <xQueueSemaphoreTake+0x384>)
   19c74:	4798      	blx	r3
   19c76:	0003      	movs	r3, r0
   19c78:	b2db      	uxtb	r3, r3
   19c7a:	e004      	b.n	19c86 <xQueueSemaphoreTake+0x116>
   19c7c:	69fb      	ldr	r3, [r7, #28]
   19c7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   19c80:	b2db      	uxtb	r3, r3
   19c82:	3b01      	subs	r3, #1
   19c84:	b2db      	uxtb	r3, r3
   19c86:	001a      	movs	r2, r3
   19c88:	0029      	movs	r1, r5
   19c8a:	0020      	movs	r0, r4
   19c8c:	4b9a      	ldr	r3, [pc, #616]	; (19ef8 <xQueueSemaphoreTake+0x388>)
   19c8e:	4798      	blx	r3

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
   19c90:	69bb      	ldr	r3, [r7, #24]
   19c92:	1e5a      	subs	r2, r3, #1
   19c94:	69fb      	ldr	r3, [r7, #28]
   19c96:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
   19c98:	69fb      	ldr	r3, [r7, #28]
   19c9a:	681b      	ldr	r3, [r3, #0]
   19c9c:	2b00      	cmp	r3, #0
   19c9e:	d104      	bne.n	19caa <xQueueSemaphoreTake+0x13a>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
   19ca0:	4b96      	ldr	r3, [pc, #600]	; (19efc <xQueueSemaphoreTake+0x38c>)
   19ca2:	4798      	blx	r3
   19ca4:	0002      	movs	r2, r0
   19ca6:	69fb      	ldr	r3, [r7, #28]
   19ca8:	605a      	str	r2, [r3, #4]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
   19caa:	69fb      	ldr	r3, [r7, #28]
   19cac:	691b      	ldr	r3, [r3, #16]
   19cae:	2b00      	cmp	r3, #0
   19cb0:	d008      	beq.n	19cc4 <xQueueSemaphoreTake+0x154>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
   19cb2:	69fb      	ldr	r3, [r7, #28]
   19cb4:	3310      	adds	r3, #16
   19cb6:	0018      	movs	r0, r3
   19cb8:	4b91      	ldr	r3, [pc, #580]	; (19f00 <xQueueSemaphoreTake+0x390>)
   19cba:	4798      	blx	r3
   19cbc:	1e03      	subs	r3, r0, #0
   19cbe:	d001      	beq.n	19cc4 <xQueueSemaphoreTake+0x154>
					{
						queueYIELD_IF_USING_PREEMPTION();
   19cc0:	4b90      	ldr	r3, [pc, #576]	; (19f04 <xQueueSemaphoreTake+0x394>)
   19cc2:	4798      	blx	r3
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
   19cc4:	4b90      	ldr	r3, [pc, #576]	; (19f08 <xQueueSemaphoreTake+0x398>)
   19cc6:	4798      	blx	r3
				return pdPASS;
   19cc8:	2301      	movs	r3, #1
   19cca:	e18b      	b.n	19fe4 <xQueueSemaphoreTake+0x474>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
   19ccc:	683b      	ldr	r3, [r7, #0]
   19cce:	2b00      	cmp	r3, #0
   19cd0:	d140      	bne.n	19d54 <xQueueSemaphoreTake+0x1e4>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
   19cd2:	6a3b      	ldr	r3, [r7, #32]
   19cd4:	2b00      	cmp	r3, #0
   19cd6:	d001      	beq.n	19cdc <xQueueSemaphoreTake+0x16c>
   19cd8:	b672      	cpsid	i
   19cda:	e7fe      	b.n	19cda <xQueueSemaphoreTake+0x16a>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
   19cdc:	4b8a      	ldr	r3, [pc, #552]	; (19f08 <xQueueSemaphoreTake+0x398>)
   19cde:	4798      	blx	r3
					traceQUEUE_RECEIVE_FAILED( pxQueue );
   19ce0:	4b7c      	ldr	r3, [pc, #496]	; (19ed4 <xQueueSemaphoreTake+0x364>)
   19ce2:	4798      	blx	r3
   19ce4:	0003      	movs	r3, r0
   19ce6:	0018      	movs	r0, r3
   19ce8:	4b7b      	ldr	r3, [pc, #492]	; (19ed8 <xQueueSemaphoreTake+0x368>)
   19cea:	4798      	blx	r3
   19cec:	0003      	movs	r3, r0
   19cee:	001a      	movs	r2, r3
   19cf0:	4b7a      	ldr	r3, [pc, #488]	; (19edc <xQueueSemaphoreTake+0x36c>)
   19cf2:	881b      	ldrh	r3, [r3, #0]
   19cf4:	4013      	ands	r3, r2
   19cf6:	b29b      	uxth	r3, r3
   19cf8:	2b00      	cmp	r3, #0
   19cfa:	d029      	beq.n	19d50 <xQueueSemaphoreTake+0x1e0>
   19cfc:	69fb      	ldr	r3, [r7, #28]
   19cfe:	0018      	movs	r0, r3
   19d00:	4b77      	ldr	r3, [pc, #476]	; (19ee0 <xQueueSemaphoreTake+0x370>)
   19d02:	4798      	blx	r3
   19d04:	0003      	movs	r3, r0
   19d06:	001a      	movs	r2, r3
   19d08:	4b74      	ldr	r3, [pc, #464]	; (19edc <xQueueSemaphoreTake+0x36c>)
   19d0a:	881b      	ldrh	r3, [r3, #0]
   19d0c:	4013      	ands	r3, r2
   19d0e:	b29b      	uxth	r3, r3
   19d10:	2b00      	cmp	r3, #0
   19d12:	d01d      	beq.n	19d50 <xQueueSemaphoreTake+0x1e0>
   19d14:	69fb      	ldr	r3, [r7, #28]
   19d16:	0018      	movs	r0, r3
   19d18:	4b72      	ldr	r3, [pc, #456]	; (19ee4 <xQueueSemaphoreTake+0x374>)
   19d1a:	4798      	blx	r3
   19d1c:	0003      	movs	r3, r0
   19d1e:	001a      	movs	r2, r3
   19d20:	4b71      	ldr	r3, [pc, #452]	; (19ee8 <xQueueSemaphoreTake+0x378>)
   19d22:	5c9b      	ldrb	r3, [r3, r2]
   19d24:	3350      	adds	r3, #80	; 0x50
   19d26:	b2db      	uxtb	r3, r3
   19d28:	001d      	movs	r5, r3
   19d2a:	69fb      	ldr	r3, [r7, #28]
   19d2c:	0018      	movs	r0, r3
   19d2e:	4b6d      	ldr	r3, [pc, #436]	; (19ee4 <xQueueSemaphoreTake+0x374>)
   19d30:	4798      	blx	r3
   19d32:	0003      	movs	r3, r0
   19d34:	001a      	movs	r2, r3
   19d36:	4b6c      	ldr	r3, [pc, #432]	; (19ee8 <xQueueSemaphoreTake+0x378>)
   19d38:	5c9c      	ldrb	r4, [r3, r2]
   19d3a:	69fb      	ldr	r3, [r7, #28]
   19d3c:	0018      	movs	r0, r3
   19d3e:	4b6b      	ldr	r3, [pc, #428]	; (19eec <xQueueSemaphoreTake+0x37c>)
   19d40:	4798      	blx	r3
   19d42:	0003      	movs	r3, r0
   19d44:	b2db      	uxtb	r3, r3
   19d46:	001a      	movs	r2, r3
   19d48:	0021      	movs	r1, r4
   19d4a:	0028      	movs	r0, r5
   19d4c:	4b68      	ldr	r3, [pc, #416]	; (19ef0 <xQueueSemaphoreTake+0x380>)
   19d4e:	4798      	blx	r3
					return errQUEUE_EMPTY;
   19d50:	2300      	movs	r3, #0
   19d52:	e147      	b.n	19fe4 <xQueueSemaphoreTake+0x474>
				}
				else if( xEntryTimeSet == pdFALSE )
   19d54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   19d56:	2b00      	cmp	r3, #0
   19d58:	d106      	bne.n	19d68 <xQueueSemaphoreTake+0x1f8>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
   19d5a:	230c      	movs	r3, #12
   19d5c:	18fb      	adds	r3, r7, r3
   19d5e:	0018      	movs	r0, r3
   19d60:	4b6a      	ldr	r3, [pc, #424]	; (19f0c <xQueueSemaphoreTake+0x39c>)
   19d62:	4798      	blx	r3
					xEntryTimeSet = pdTRUE;
   19d64:	2301      	movs	r3, #1
   19d66:	627b      	str	r3, [r7, #36]	; 0x24
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
   19d68:	4b67      	ldr	r3, [pc, #412]	; (19f08 <xQueueSemaphoreTake+0x398>)
   19d6a:	4798      	blx	r3

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
   19d6c:	4b68      	ldr	r3, [pc, #416]	; (19f10 <xQueueSemaphoreTake+0x3a0>)
   19d6e:	4798      	blx	r3
		prvLockQueue( pxQueue );
   19d70:	4b57      	ldr	r3, [pc, #348]	; (19ed0 <xQueueSemaphoreTake+0x360>)
   19d72:	4798      	blx	r3
   19d74:	69fb      	ldr	r3, [r7, #28]
   19d76:	2244      	movs	r2, #68	; 0x44
   19d78:	5c9b      	ldrb	r3, [r3, r2]
   19d7a:	b25b      	sxtb	r3, r3
   19d7c:	3301      	adds	r3, #1
   19d7e:	d103      	bne.n	19d88 <xQueueSemaphoreTake+0x218>
   19d80:	69fb      	ldr	r3, [r7, #28]
   19d82:	2244      	movs	r2, #68	; 0x44
   19d84:	2100      	movs	r1, #0
   19d86:	5499      	strb	r1, [r3, r2]
   19d88:	69fb      	ldr	r3, [r7, #28]
   19d8a:	2245      	movs	r2, #69	; 0x45
   19d8c:	5c9b      	ldrb	r3, [r3, r2]
   19d8e:	b25b      	sxtb	r3, r3
   19d90:	3301      	adds	r3, #1
   19d92:	d103      	bne.n	19d9c <xQueueSemaphoreTake+0x22c>
   19d94:	69fb      	ldr	r3, [r7, #28]
   19d96:	2245      	movs	r2, #69	; 0x45
   19d98:	2100      	movs	r1, #0
   19d9a:	5499      	strb	r1, [r3, r2]
   19d9c:	4b5a      	ldr	r3, [pc, #360]	; (19f08 <xQueueSemaphoreTake+0x398>)
   19d9e:	4798      	blx	r3

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
   19da0:	003a      	movs	r2, r7
   19da2:	230c      	movs	r3, #12
   19da4:	18fb      	adds	r3, r7, r3
   19da6:	0011      	movs	r1, r2
   19da8:	0018      	movs	r0, r3
   19daa:	4b5a      	ldr	r3, [pc, #360]	; (19f14 <xQueueSemaphoreTake+0x3a4>)
   19dac:	4798      	blx	r3
   19dae:	1e03      	subs	r3, r0, #0
   19db0:	d000      	beq.n	19db4 <xQueueSemaphoreTake+0x244>
   19db2:	e0bd      	b.n	19f30 <xQueueSemaphoreTake+0x3c0>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
   19db4:	69fb      	ldr	r3, [r7, #28]
   19db6:	0018      	movs	r0, r3
   19db8:	4b57      	ldr	r3, [pc, #348]	; (19f18 <xQueueSemaphoreTake+0x3a8>)
   19dba:	4798      	blx	r3
   19dbc:	1e03      	subs	r3, r0, #0
   19dbe:	d100      	bne.n	19dc2 <xQueueSemaphoreTake+0x252>
   19dc0:	e07c      	b.n	19ebc <xQueueSemaphoreTake+0x34c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
   19dc2:	4b44      	ldr	r3, [pc, #272]	; (19ed4 <xQueueSemaphoreTake+0x364>)
   19dc4:	4798      	blx	r3
   19dc6:	0003      	movs	r3, r0
   19dc8:	0018      	movs	r0, r3
   19dca:	4b43      	ldr	r3, [pc, #268]	; (19ed8 <xQueueSemaphoreTake+0x368>)
   19dcc:	4798      	blx	r3
   19dce:	0003      	movs	r3, r0
   19dd0:	001a      	movs	r2, r3
   19dd2:	4b42      	ldr	r3, [pc, #264]	; (19edc <xQueueSemaphoreTake+0x36c>)
   19dd4:	881b      	ldrh	r3, [r3, #0]
   19dd6:	4013      	ands	r3, r2
   19dd8:	b29b      	uxth	r3, r3
   19dda:	2b00      	cmp	r3, #0
   19ddc:	d029      	beq.n	19e32 <xQueueSemaphoreTake+0x2c2>
   19dde:	69fb      	ldr	r3, [r7, #28]
   19de0:	0018      	movs	r0, r3
   19de2:	4b3f      	ldr	r3, [pc, #252]	; (19ee0 <xQueueSemaphoreTake+0x370>)
   19de4:	4798      	blx	r3
   19de6:	0003      	movs	r3, r0
   19de8:	001a      	movs	r2, r3
   19dea:	4b3c      	ldr	r3, [pc, #240]	; (19edc <xQueueSemaphoreTake+0x36c>)
   19dec:	881b      	ldrh	r3, [r3, #0]
   19dee:	4013      	ands	r3, r2
   19df0:	b29b      	uxth	r3, r3
   19df2:	2b00      	cmp	r3, #0
   19df4:	d01d      	beq.n	19e32 <xQueueSemaphoreTake+0x2c2>
   19df6:	69fb      	ldr	r3, [r7, #28]
   19df8:	0018      	movs	r0, r3
   19dfa:	4b3a      	ldr	r3, [pc, #232]	; (19ee4 <xQueueSemaphoreTake+0x374>)
   19dfc:	4798      	blx	r3
   19dfe:	0003      	movs	r3, r0
   19e00:	001a      	movs	r2, r3
   19e02:	4b39      	ldr	r3, [pc, #228]	; (19ee8 <xQueueSemaphoreTake+0x378>)
   19e04:	5c9b      	ldrb	r3, [r3, r2]
   19e06:	3368      	adds	r3, #104	; 0x68
   19e08:	b2db      	uxtb	r3, r3
   19e0a:	001d      	movs	r5, r3
   19e0c:	69fb      	ldr	r3, [r7, #28]
   19e0e:	0018      	movs	r0, r3
   19e10:	4b34      	ldr	r3, [pc, #208]	; (19ee4 <xQueueSemaphoreTake+0x374>)
   19e12:	4798      	blx	r3
   19e14:	0003      	movs	r3, r0
   19e16:	001a      	movs	r2, r3
   19e18:	4b33      	ldr	r3, [pc, #204]	; (19ee8 <xQueueSemaphoreTake+0x378>)
   19e1a:	5c9c      	ldrb	r4, [r3, r2]
   19e1c:	69fb      	ldr	r3, [r7, #28]
   19e1e:	0018      	movs	r0, r3
   19e20:	4b32      	ldr	r3, [pc, #200]	; (19eec <xQueueSemaphoreTake+0x37c>)
   19e22:	4798      	blx	r3
   19e24:	0003      	movs	r3, r0
   19e26:	b2db      	uxtb	r3, r3
   19e28:	001a      	movs	r2, r3
   19e2a:	0021      	movs	r1, r4
   19e2c:	0028      	movs	r0, r5
   19e2e:	4b30      	ldr	r3, [pc, #192]	; (19ef0 <xQueueSemaphoreTake+0x380>)
   19e30:	4798      	blx	r3
   19e32:	69fb      	ldr	r3, [r7, #28]
   19e34:	0018      	movs	r0, r3
   19e36:	4b2b      	ldr	r3, [pc, #172]	; (19ee4 <xQueueSemaphoreTake+0x374>)
   19e38:	4798      	blx	r3
   19e3a:	0003      	movs	r3, r0
   19e3c:	001a      	movs	r2, r3
   19e3e:	4b2a      	ldr	r3, [pc, #168]	; (19ee8 <xQueueSemaphoreTake+0x378>)
   19e40:	5c9b      	ldrb	r3, [r3, r2]
   19e42:	2b02      	cmp	r3, #2
   19e44:	d018      	beq.n	19e78 <xQueueSemaphoreTake+0x308>
   19e46:	4b23      	ldr	r3, [pc, #140]	; (19ed4 <xQueueSemaphoreTake+0x364>)
   19e48:	4798      	blx	r3
   19e4a:	0003      	movs	r3, r0
   19e4c:	0018      	movs	r0, r3
   19e4e:	4b22      	ldr	r3, [pc, #136]	; (19ed8 <xQueueSemaphoreTake+0x368>)
   19e50:	4798      	blx	r3
   19e52:	0003      	movs	r3, r0
   19e54:	001a      	movs	r2, r3
   19e56:	4b21      	ldr	r3, [pc, #132]	; (19edc <xQueueSemaphoreTake+0x36c>)
   19e58:	881b      	ldrh	r3, [r3, #0]
   19e5a:	4013      	ands	r3, r2
   19e5c:	b29b      	uxth	r3, r3
   19e5e:	2b00      	cmp	r3, #0
   19e60:	d00a      	beq.n	19e78 <xQueueSemaphoreTake+0x308>
   19e62:	4b1c      	ldr	r3, [pc, #112]	; (19ed4 <xQueueSemaphoreTake+0x364>)
   19e64:	4798      	blx	r3
   19e66:	0003      	movs	r3, r0
   19e68:	0018      	movs	r0, r3
   19e6a:	4b22      	ldr	r3, [pc, #136]	; (19ef4 <xQueueSemaphoreTake+0x384>)
   19e6c:	4798      	blx	r3
   19e6e:	0003      	movs	r3, r0
   19e70:	b2db      	uxtb	r3, r3
   19e72:	0018      	movs	r0, r3
   19e74:	4b29      	ldr	r3, [pc, #164]	; (19f1c <xQueueSemaphoreTake+0x3ac>)
   19e76:	4798      	blx	r3

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
   19e78:	69fb      	ldr	r3, [r7, #28]
   19e7a:	681b      	ldr	r3, [r3, #0]
   19e7c:	2b00      	cmp	r3, #0
   19e7e:	d10a      	bne.n	19e96 <xQueueSemaphoreTake+0x326>
					{
						taskENTER_CRITICAL();
   19e80:	4b13      	ldr	r3, [pc, #76]	; (19ed0 <xQueueSemaphoreTake+0x360>)
   19e82:	4798      	blx	r3
						{
							xInheritanceOccurred = xTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
   19e84:	69fb      	ldr	r3, [r7, #28]
   19e86:	685b      	ldr	r3, [r3, #4]
   19e88:	0018      	movs	r0, r3
   19e8a:	4b25      	ldr	r3, [pc, #148]	; (19f20 <xQueueSemaphoreTake+0x3b0>)
   19e8c:	4798      	blx	r3
   19e8e:	0003      	movs	r3, r0
   19e90:	623b      	str	r3, [r7, #32]
						}
						taskEXIT_CRITICAL();
   19e92:	4b1d      	ldr	r3, [pc, #116]	; (19f08 <xQueueSemaphoreTake+0x398>)
   19e94:	4798      	blx	r3
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
   19e96:	69fb      	ldr	r3, [r7, #28]
   19e98:	3324      	adds	r3, #36	; 0x24
   19e9a:	683a      	ldr	r2, [r7, #0]
   19e9c:	0011      	movs	r1, r2
   19e9e:	0018      	movs	r0, r3
   19ea0:	4b20      	ldr	r3, [pc, #128]	; (19f24 <xQueueSemaphoreTake+0x3b4>)
   19ea2:	4798      	blx	r3
				prvUnlockQueue( pxQueue );
   19ea4:	69fb      	ldr	r3, [r7, #28]
   19ea6:	0018      	movs	r0, r3
   19ea8:	4b1f      	ldr	r3, [pc, #124]	; (19f28 <xQueueSemaphoreTake+0x3b8>)
   19eaa:	4798      	blx	r3
				if( xTaskResumeAll() == pdFALSE )
   19eac:	4b1f      	ldr	r3, [pc, #124]	; (19f2c <xQueueSemaphoreTake+0x3bc>)
   19eae:	4798      	blx	r3
   19eb0:	1e03      	subs	r3, r0, #0
   19eb2:	d000      	beq.n	19eb6 <xQueueSemaphoreTake+0x346>
   19eb4:	e680      	b.n	19bb8 <xQueueSemaphoreTake+0x48>
				{
					portYIELD_WITHIN_API();
   19eb6:	4b13      	ldr	r3, [pc, #76]	; (19f04 <xQueueSemaphoreTake+0x394>)
   19eb8:	4798      	blx	r3
   19eba:	e67d      	b.n	19bb8 <xQueueSemaphoreTake+0x48>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
   19ebc:	69fb      	ldr	r3, [r7, #28]
   19ebe:	0018      	movs	r0, r3
   19ec0:	4b19      	ldr	r3, [pc, #100]	; (19f28 <xQueueSemaphoreTake+0x3b8>)
   19ec2:	4798      	blx	r3
				( void ) xTaskResumeAll();
   19ec4:	4b19      	ldr	r3, [pc, #100]	; (19f2c <xQueueSemaphoreTake+0x3bc>)
   19ec6:	4798      	blx	r3
   19ec8:	e676      	b.n	19bb8 <xQueueSemaphoreTake+0x48>
   19eca:	46c0      	nop			; (mov r8, r8)
   19ecc:	0001b5ed 	.word	0x0001b5ed
   19ed0:	000188c9 	.word	0x000188c9
   19ed4:	00016b5d 	.word	0x00016b5d
   19ed8:	000168c1 	.word	0x000168c1
   19edc:	20000120 	.word	0x20000120
   19ee0:	00016981 	.word	0x00016981
   19ee4:	00016881 	.word	0x00016881
   19ee8:	20000114 	.word	0x20000114
   19eec:	00016961 	.word	0x00016961
   19ef0:	000172b9 	.word	0x000172b9
   19ef4:	000168a1 	.word	0x000168a1
   19ef8:	00017915 	.word	0x00017915
   19efc:	0001bab9 	.word	0x0001bab9
   19f00:	0001b15d 	.word	0x0001b15d
   19f04:	000188b1 	.word	0x000188b1
   19f08:	000188ed 	.word	0x000188ed
   19f0c:	0001b29d 	.word	0x0001b29d
   19f10:	0001ab85 	.word	0x0001ab85
   19f14:	0001b2c5 	.word	0x0001b2c5
   19f18:	0001a2b9 	.word	0x0001a2b9
   19f1c:	00017a51 	.word	0x00017a51
   19f20:	0001b625 	.word	0x0001b625
   19f24:	0001b039 	.word	0x0001b039
   19f28:	0001a1c9 	.word	0x0001a1c9
   19f2c:	0001ab9d 	.word	0x0001ab9d
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
   19f30:	69fb      	ldr	r3, [r7, #28]
   19f32:	0018      	movs	r0, r3
   19f34:	4b2d      	ldr	r3, [pc, #180]	; (19fec <xQueueSemaphoreTake+0x47c>)
   19f36:	4798      	blx	r3
			( void ) xTaskResumeAll();
   19f38:	4b2d      	ldr	r3, [pc, #180]	; (19ff0 <xQueueSemaphoreTake+0x480>)
   19f3a:	4798      	blx	r3

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
   19f3c:	69fb      	ldr	r3, [r7, #28]
   19f3e:	0018      	movs	r0, r3
   19f40:	4b2c      	ldr	r3, [pc, #176]	; (19ff4 <xQueueSemaphoreTake+0x484>)
   19f42:	4798      	blx	r3
   19f44:	1e03      	subs	r3, r0, #0
   19f46:	d100      	bne.n	19f4a <xQueueSemaphoreTake+0x3da>
   19f48:	e636      	b.n	19bb8 <xQueueSemaphoreTake+0x48>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
   19f4a:	6a3b      	ldr	r3, [r7, #32]
   19f4c:	2b00      	cmp	r3, #0
   19f4e:	d010      	beq.n	19f72 <xQueueSemaphoreTake+0x402>
					{
						taskENTER_CRITICAL();
   19f50:	4b29      	ldr	r3, [pc, #164]	; (19ff8 <xQueueSemaphoreTake+0x488>)
   19f52:	4798      	blx	r3
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
   19f54:	69fb      	ldr	r3, [r7, #28]
   19f56:	0018      	movs	r0, r3
   19f58:	4b28      	ldr	r3, [pc, #160]	; (19ffc <xQueueSemaphoreTake+0x48c>)
   19f5a:	4798      	blx	r3
   19f5c:	0003      	movs	r3, r0
   19f5e:	617b      	str	r3, [r7, #20]
							vTaskPriorityDisinheritAfterTimeout( ( void * ) pxQueue->pxMutexHolder, uxHighestWaitingPriority );
   19f60:	69fb      	ldr	r3, [r7, #28]
   19f62:	685b      	ldr	r3, [r3, #4]
   19f64:	697a      	ldr	r2, [r7, #20]
   19f66:	0011      	movs	r1, r2
   19f68:	0018      	movs	r0, r3
   19f6a:	4b25      	ldr	r3, [pc, #148]	; (1a000 <xQueueSemaphoreTake+0x490>)
   19f6c:	4798      	blx	r3
						}
						taskEXIT_CRITICAL();
   19f6e:	4b25      	ldr	r3, [pc, #148]	; (1a004 <xQueueSemaphoreTake+0x494>)
   19f70:	4798      	blx	r3
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
   19f72:	4b25      	ldr	r3, [pc, #148]	; (1a008 <xQueueSemaphoreTake+0x498>)
   19f74:	4798      	blx	r3
   19f76:	0003      	movs	r3, r0
   19f78:	0018      	movs	r0, r3
   19f7a:	4b24      	ldr	r3, [pc, #144]	; (1a00c <xQueueSemaphoreTake+0x49c>)
   19f7c:	4798      	blx	r3
   19f7e:	0003      	movs	r3, r0
   19f80:	001a      	movs	r2, r3
   19f82:	4b23      	ldr	r3, [pc, #140]	; (1a010 <xQueueSemaphoreTake+0x4a0>)
   19f84:	881b      	ldrh	r3, [r3, #0]
   19f86:	4013      	ands	r3, r2
   19f88:	b29b      	uxth	r3, r3
   19f8a:	2b00      	cmp	r3, #0
   19f8c:	d029      	beq.n	19fe2 <xQueueSemaphoreTake+0x472>
   19f8e:	69fb      	ldr	r3, [r7, #28]
   19f90:	0018      	movs	r0, r3
   19f92:	4b20      	ldr	r3, [pc, #128]	; (1a014 <xQueueSemaphoreTake+0x4a4>)
   19f94:	4798      	blx	r3
   19f96:	0003      	movs	r3, r0
   19f98:	001a      	movs	r2, r3
   19f9a:	4b1d      	ldr	r3, [pc, #116]	; (1a010 <xQueueSemaphoreTake+0x4a0>)
   19f9c:	881b      	ldrh	r3, [r3, #0]
   19f9e:	4013      	ands	r3, r2
   19fa0:	b29b      	uxth	r3, r3
   19fa2:	2b00      	cmp	r3, #0
   19fa4:	d01d      	beq.n	19fe2 <xQueueSemaphoreTake+0x472>
   19fa6:	69fb      	ldr	r3, [r7, #28]
   19fa8:	0018      	movs	r0, r3
   19faa:	4b1b      	ldr	r3, [pc, #108]	; (1a018 <xQueueSemaphoreTake+0x4a8>)
   19fac:	4798      	blx	r3
   19fae:	0003      	movs	r3, r0
   19fb0:	001a      	movs	r2, r3
   19fb2:	4b1a      	ldr	r3, [pc, #104]	; (1a01c <xQueueSemaphoreTake+0x4ac>)
   19fb4:	5c9b      	ldrb	r3, [r3, r2]
   19fb6:	3350      	adds	r3, #80	; 0x50
   19fb8:	b2db      	uxtb	r3, r3
   19fba:	001d      	movs	r5, r3
   19fbc:	69fb      	ldr	r3, [r7, #28]
   19fbe:	0018      	movs	r0, r3
   19fc0:	4b15      	ldr	r3, [pc, #84]	; (1a018 <xQueueSemaphoreTake+0x4a8>)
   19fc2:	4798      	blx	r3
   19fc4:	0003      	movs	r3, r0
   19fc6:	001a      	movs	r2, r3
   19fc8:	4b14      	ldr	r3, [pc, #80]	; (1a01c <xQueueSemaphoreTake+0x4ac>)
   19fca:	5c9c      	ldrb	r4, [r3, r2]
   19fcc:	69fb      	ldr	r3, [r7, #28]
   19fce:	0018      	movs	r0, r3
   19fd0:	4b13      	ldr	r3, [pc, #76]	; (1a020 <xQueueSemaphoreTake+0x4b0>)
   19fd2:	4798      	blx	r3
   19fd4:	0003      	movs	r3, r0
   19fd6:	b2db      	uxtb	r3, r3
   19fd8:	001a      	movs	r2, r3
   19fda:	0021      	movs	r1, r4
   19fdc:	0028      	movs	r0, r5
   19fde:	4b11      	ldr	r3, [pc, #68]	; (1a024 <xQueueSemaphoreTake+0x4b4>)
   19fe0:	4798      	blx	r3
				return errQUEUE_EMPTY;
   19fe2:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
   19fe4:	0018      	movs	r0, r3
   19fe6:	46bd      	mov	sp, r7
   19fe8:	b00a      	add	sp, #40	; 0x28
   19fea:	bdb0      	pop	{r4, r5, r7, pc}
   19fec:	0001a1c9 	.word	0x0001a1c9
   19ff0:	0001ab9d 	.word	0x0001ab9d
   19ff4:	0001a2b9 	.word	0x0001a2b9
   19ff8:	000188c9 	.word	0x000188c9
   19ffc:	0001a06b 	.word	0x0001a06b
   1a000:	0001b91d 	.word	0x0001b91d
   1a004:	000188ed 	.word	0x000188ed
   1a008:	00016b5d 	.word	0x00016b5d
   1a00c:	000168c1 	.word	0x000168c1
   1a010:	20000120 	.word	0x20000120
   1a014:	00016981 	.word	0x00016981
   1a018:	00016881 	.word	0x00016881
   1a01c:	20000114 	.word	0x20000114
   1a020:	00016961 	.word	0x00016961
   1a024:	000172b9 	.word	0x000172b9

0001a028 <uxQueueGetQueueNumber>:
/*-----------------------------------------------------------*/

#if ( configUSE_TRACE_FACILITY == 1 )

	UBaseType_t uxQueueGetQueueNumber( QueueHandle_t xQueue )
	{
   1a028:	b580      	push	{r7, lr}
   1a02a:	b082      	sub	sp, #8
   1a02c:	af00      	add	r7, sp, #0
   1a02e:	6078      	str	r0, [r7, #4]
		return ( ( Queue_t * ) xQueue )->uxQueueNumber;
   1a030:	687b      	ldr	r3, [r7, #4]
   1a032:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
	}
   1a034:	0018      	movs	r0, r3
   1a036:	46bd      	mov	sp, r7
   1a038:	b002      	add	sp, #8
   1a03a:	bd80      	pop	{r7, pc}

0001a03c <vQueueSetQueueNumber>:
/*-----------------------------------------------------------*/

#if ( configUSE_TRACE_FACILITY == 1 )

	void vQueueSetQueueNumber( QueueHandle_t xQueue, UBaseType_t uxQueueNumber )
	{
   1a03c:	b580      	push	{r7, lr}
   1a03e:	b082      	sub	sp, #8
   1a040:	af00      	add	r7, sp, #0
   1a042:	6078      	str	r0, [r7, #4]
   1a044:	6039      	str	r1, [r7, #0]
		( ( Queue_t * ) xQueue )->uxQueueNumber = uxQueueNumber;
   1a046:	687b      	ldr	r3, [r7, #4]
   1a048:	683a      	ldr	r2, [r7, #0]
   1a04a:	64da      	str	r2, [r3, #76]	; 0x4c
	}
   1a04c:	46c0      	nop			; (mov r8, r8)
   1a04e:	46bd      	mov	sp, r7
   1a050:	b002      	add	sp, #8
   1a052:	bd80      	pop	{r7, pc}

0001a054 <ucQueueGetQueueType>:
/*-----------------------------------------------------------*/

#if ( configUSE_TRACE_FACILITY == 1 )

	uint8_t ucQueueGetQueueType( QueueHandle_t xQueue )
	{
   1a054:	b580      	push	{r7, lr}
   1a056:	b082      	sub	sp, #8
   1a058:	af00      	add	r7, sp, #0
   1a05a:	6078      	str	r0, [r7, #4]
		return ( ( Queue_t * ) xQueue )->ucQueueType;
   1a05c:	687b      	ldr	r3, [r7, #4]
   1a05e:	2250      	movs	r2, #80	; 0x50
   1a060:	5c9b      	ldrb	r3, [r3, r2]
	}
   1a062:	0018      	movs	r0, r3
   1a064:	46bd      	mov	sp, r7
   1a066:	b002      	add	sp, #8
   1a068:	bd80      	pop	{r7, pc}

0001a06a <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
   1a06a:	b580      	push	{r7, lr}
   1a06c:	b084      	sub	sp, #16
   1a06e:	af00      	add	r7, sp, #0
   1a070:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0 )
   1a072:	687b      	ldr	r3, [r7, #4]
   1a074:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   1a076:	2b00      	cmp	r3, #0
   1a078:	d006      	beq.n	1a088 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = configMAX_PRIORITIES - listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
   1a07a:	687b      	ldr	r3, [r7, #4]
   1a07c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   1a07e:	681b      	ldr	r3, [r3, #0]
   1a080:	2205      	movs	r2, #5
   1a082:	1ad3      	subs	r3, r2, r3
   1a084:	60fb      	str	r3, [r7, #12]
   1a086:	e001      	b.n	1a08c <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
   1a088:	2300      	movs	r3, #0
   1a08a:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
   1a08c:	68fb      	ldr	r3, [r7, #12]
	}
   1a08e:	0018      	movs	r0, r3
   1a090:	46bd      	mov	sp, r7
   1a092:	b004      	add	sp, #16
   1a094:	bd80      	pop	{r7, pc}
	...

0001a098 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
   1a098:	b580      	push	{r7, lr}
   1a09a:	b086      	sub	sp, #24
   1a09c:	af00      	add	r7, sp, #0
   1a09e:	60f8      	str	r0, [r7, #12]
   1a0a0:	60b9      	str	r1, [r7, #8]
   1a0a2:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
   1a0a4:	2300      	movs	r3, #0
   1a0a6:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
   1a0a8:	68fb      	ldr	r3, [r7, #12]
   1a0aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   1a0ac:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
   1a0ae:	68fb      	ldr	r3, [r7, #12]
   1a0b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   1a0b2:	2b00      	cmp	r3, #0
   1a0b4:	d10e      	bne.n	1a0d4 <prvCopyDataToQueue+0x3c>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
   1a0b6:	68fb      	ldr	r3, [r7, #12]
   1a0b8:	681b      	ldr	r3, [r3, #0]
   1a0ba:	2b00      	cmp	r3, #0
   1a0bc:	d14e      	bne.n	1a15c <prvCopyDataToQueue+0xc4>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
   1a0be:	68fb      	ldr	r3, [r7, #12]
   1a0c0:	685b      	ldr	r3, [r3, #4]
   1a0c2:	0018      	movs	r0, r3
   1a0c4:	4b2a      	ldr	r3, [pc, #168]	; (1a170 <prvCopyDataToQueue+0xd8>)
   1a0c6:	4798      	blx	r3
   1a0c8:	0003      	movs	r3, r0
   1a0ca:	617b      	str	r3, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
   1a0cc:	68fb      	ldr	r3, [r7, #12]
   1a0ce:	2200      	movs	r2, #0
   1a0d0:	605a      	str	r2, [r3, #4]
   1a0d2:	e043      	b.n	1a15c <prvCopyDataToQueue+0xc4>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
   1a0d4:	687b      	ldr	r3, [r7, #4]
   1a0d6:	2b00      	cmp	r3, #0
   1a0d8:	d119      	bne.n	1a10e <prvCopyDataToQueue+0x76>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
   1a0da:	68fb      	ldr	r3, [r7, #12]
   1a0dc:	6898      	ldr	r0, [r3, #8]
   1a0de:	68fb      	ldr	r3, [r7, #12]
   1a0e0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
   1a0e2:	68bb      	ldr	r3, [r7, #8]
   1a0e4:	0019      	movs	r1, r3
   1a0e6:	4b23      	ldr	r3, [pc, #140]	; (1a174 <prvCopyDataToQueue+0xdc>)
   1a0e8:	4798      	blx	r3
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
   1a0ea:	68fb      	ldr	r3, [r7, #12]
   1a0ec:	689a      	ldr	r2, [r3, #8]
   1a0ee:	68fb      	ldr	r3, [r7, #12]
   1a0f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   1a0f2:	18d2      	adds	r2, r2, r3
   1a0f4:	68fb      	ldr	r3, [r7, #12]
   1a0f6:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
   1a0f8:	68fb      	ldr	r3, [r7, #12]
   1a0fa:	689a      	ldr	r2, [r3, #8]
   1a0fc:	68fb      	ldr	r3, [r7, #12]
   1a0fe:	685b      	ldr	r3, [r3, #4]
   1a100:	429a      	cmp	r2, r3
   1a102:	d32b      	bcc.n	1a15c <prvCopyDataToQueue+0xc4>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
   1a104:	68fb      	ldr	r3, [r7, #12]
   1a106:	681a      	ldr	r2, [r3, #0]
   1a108:	68fb      	ldr	r3, [r7, #12]
   1a10a:	609a      	str	r2, [r3, #8]
   1a10c:	e026      	b.n	1a15c <prvCopyDataToQueue+0xc4>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
   1a10e:	68fb      	ldr	r3, [r7, #12]
   1a110:	68d8      	ldr	r0, [r3, #12]
   1a112:	68fb      	ldr	r3, [r7, #12]
   1a114:	6c1a      	ldr	r2, [r3, #64]	; 0x40
   1a116:	68bb      	ldr	r3, [r7, #8]
   1a118:	0019      	movs	r1, r3
   1a11a:	4b16      	ldr	r3, [pc, #88]	; (1a174 <prvCopyDataToQueue+0xdc>)
   1a11c:	4798      	blx	r3
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
   1a11e:	68fb      	ldr	r3, [r7, #12]
   1a120:	68da      	ldr	r2, [r3, #12]
   1a122:	68fb      	ldr	r3, [r7, #12]
   1a124:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   1a126:	425b      	negs	r3, r3
   1a128:	18d2      	adds	r2, r2, r3
   1a12a:	68fb      	ldr	r3, [r7, #12]
   1a12c:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
   1a12e:	68fb      	ldr	r3, [r7, #12]
   1a130:	68da      	ldr	r2, [r3, #12]
   1a132:	68fb      	ldr	r3, [r7, #12]
   1a134:	681b      	ldr	r3, [r3, #0]
   1a136:	429a      	cmp	r2, r3
   1a138:	d207      	bcs.n	1a14a <prvCopyDataToQueue+0xb2>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
   1a13a:	68fb      	ldr	r3, [r7, #12]
   1a13c:	685a      	ldr	r2, [r3, #4]
   1a13e:	68fb      	ldr	r3, [r7, #12]
   1a140:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   1a142:	425b      	negs	r3, r3
   1a144:	18d2      	adds	r2, r2, r3
   1a146:	68fb      	ldr	r3, [r7, #12]
   1a148:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
   1a14a:	687b      	ldr	r3, [r7, #4]
   1a14c:	2b02      	cmp	r3, #2
   1a14e:	d105      	bne.n	1a15c <prvCopyDataToQueue+0xc4>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
   1a150:	693b      	ldr	r3, [r7, #16]
   1a152:	2b00      	cmp	r3, #0
   1a154:	d002      	beq.n	1a15c <prvCopyDataToQueue+0xc4>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
   1a156:	693b      	ldr	r3, [r7, #16]
   1a158:	3b01      	subs	r3, #1
   1a15a:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
   1a15c:	693b      	ldr	r3, [r7, #16]
   1a15e:	1c5a      	adds	r2, r3, #1
   1a160:	68fb      	ldr	r3, [r7, #12]
   1a162:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
   1a164:	697b      	ldr	r3, [r7, #20]
}
   1a166:	0018      	movs	r0, r3
   1a168:	46bd      	mov	sp, r7
   1a16a:	b006      	add	sp, #24
   1a16c:	bd80      	pop	{r7, pc}
   1a16e:	46c0      	nop			; (mov r8, r8)
   1a170:	0001b7b5 	.word	0x0001b7b5
   1a174:	000330e1 	.word	0x000330e1

0001a178 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
   1a178:	b580      	push	{r7, lr}
   1a17a:	b082      	sub	sp, #8
   1a17c:	af00      	add	r7, sp, #0
   1a17e:	6078      	str	r0, [r7, #4]
   1a180:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
   1a182:	687b      	ldr	r3, [r7, #4]
   1a184:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   1a186:	2b00      	cmp	r3, #0
   1a188:	d018      	beq.n	1a1bc <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
   1a18a:	687b      	ldr	r3, [r7, #4]
   1a18c:	68da      	ldr	r2, [r3, #12]
   1a18e:	687b      	ldr	r3, [r7, #4]
   1a190:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   1a192:	18d2      	adds	r2, r2, r3
   1a194:	687b      	ldr	r3, [r7, #4]
   1a196:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
   1a198:	687b      	ldr	r3, [r7, #4]
   1a19a:	68da      	ldr	r2, [r3, #12]
   1a19c:	687b      	ldr	r3, [r7, #4]
   1a19e:	685b      	ldr	r3, [r3, #4]
   1a1a0:	429a      	cmp	r2, r3
   1a1a2:	d303      	bcc.n	1a1ac <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
   1a1a4:	687b      	ldr	r3, [r7, #4]
   1a1a6:	681a      	ldr	r2, [r3, #0]
   1a1a8:	687b      	ldr	r3, [r7, #4]
   1a1aa:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
   1a1ac:	687b      	ldr	r3, [r7, #4]
   1a1ae:	68d9      	ldr	r1, [r3, #12]
   1a1b0:	687b      	ldr	r3, [r7, #4]
   1a1b2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
   1a1b4:	683b      	ldr	r3, [r7, #0]
   1a1b6:	0018      	movs	r0, r3
   1a1b8:	4b02      	ldr	r3, [pc, #8]	; (1a1c4 <prvCopyDataFromQueue+0x4c>)
   1a1ba:	4798      	blx	r3
	}
}
   1a1bc:	46c0      	nop			; (mov r8, r8)
   1a1be:	46bd      	mov	sp, r7
   1a1c0:	b002      	add	sp, #8
   1a1c2:	bd80      	pop	{r7, pc}
   1a1c4:	000330e1 	.word	0x000330e1

0001a1c8 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
   1a1c8:	b580      	push	{r7, lr}
   1a1ca:	b084      	sub	sp, #16
   1a1cc:	af00      	add	r7, sp, #0
   1a1ce:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
   1a1d0:	4b34      	ldr	r3, [pc, #208]	; (1a2a4 <prvUnlockQueue+0xdc>)
   1a1d2:	4798      	blx	r3
	{
		int8_t cTxLock = pxQueue->cTxLock;
   1a1d4:	230f      	movs	r3, #15
   1a1d6:	18fb      	adds	r3, r7, r3
   1a1d8:	687a      	ldr	r2, [r7, #4]
   1a1da:	2145      	movs	r1, #69	; 0x45
   1a1dc:	5c52      	ldrb	r2, [r2, r1]
   1a1de:	701a      	strb	r2, [r3, #0]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
   1a1e0:	e022      	b.n	1a228 <prvUnlockQueue+0x60>
		{
			/* Data was posted while the queue was locked.  Are any tasks
			blocked waiting for data to become available? */
			#if ( configUSE_QUEUE_SETS == 1 )
			{
				if( pxQueue->pxQueueSetContainer != NULL )
   1a1e2:	687b      	ldr	r3, [r7, #4]
   1a1e4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   1a1e6:	2b00      	cmp	r3, #0
   1a1e8:	d009      	beq.n	1a1fe <prvUnlockQueue+0x36>
				{
					if( prvNotifyQueueSetContainer( pxQueue, queueSEND_TO_BACK ) != pdFALSE )
   1a1ea:	687b      	ldr	r3, [r7, #4]
   1a1ec:	2100      	movs	r1, #0
   1a1ee:	0018      	movs	r0, r3
   1a1f0:	4b2d      	ldr	r3, [pc, #180]	; (1a2a8 <prvUnlockQueue+0xe0>)
   1a1f2:	4798      	blx	r3
   1a1f4:	1e03      	subs	r3, r0, #0
   1a1f6:	d00f      	beq.n	1a218 <prvUnlockQueue+0x50>
					{
						/* The queue is a member of a queue set, and posting to
						the queue set caused a higher priority task to unblock.
						A context switch is required. */
						vTaskMissedYield();
   1a1f8:	4b2c      	ldr	r3, [pc, #176]	; (1a2ac <prvUnlockQueue+0xe4>)
   1a1fa:	4798      	blx	r3
   1a1fc:	e00c      	b.n	1a218 <prvUnlockQueue+0x50>
				else
				{
					/* Tasks that are removed from the event list will get
					added to the pending ready list as the scheduler is still
					suspended. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
   1a1fe:	687b      	ldr	r3, [r7, #4]
   1a200:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   1a202:	2b00      	cmp	r3, #0
   1a204:	d017      	beq.n	1a236 <prvUnlockQueue+0x6e>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
   1a206:	687b      	ldr	r3, [r7, #4]
   1a208:	3324      	adds	r3, #36	; 0x24
   1a20a:	0018      	movs	r0, r3
   1a20c:	4b28      	ldr	r3, [pc, #160]	; (1a2b0 <prvUnlockQueue+0xe8>)
   1a20e:	4798      	blx	r3
   1a210:	1e03      	subs	r3, r0, #0
   1a212:	d001      	beq.n	1a218 <prvUnlockQueue+0x50>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							vTaskMissedYield();
   1a214:	4b25      	ldr	r3, [pc, #148]	; (1a2ac <prvUnlockQueue+0xe4>)
   1a216:	4798      	blx	r3
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
   1a218:	230f      	movs	r3, #15
   1a21a:	18fb      	adds	r3, r7, r3
   1a21c:	781b      	ldrb	r3, [r3, #0]
   1a21e:	3b01      	subs	r3, #1
   1a220:	b2da      	uxtb	r2, r3
   1a222:	230f      	movs	r3, #15
   1a224:	18fb      	adds	r3, r7, r3
   1a226:	701a      	strb	r2, [r3, #0]
		while( cTxLock > queueLOCKED_UNMODIFIED )
   1a228:	230f      	movs	r3, #15
   1a22a:	18fb      	adds	r3, r7, r3
   1a22c:	781b      	ldrb	r3, [r3, #0]
   1a22e:	b25b      	sxtb	r3, r3
   1a230:	2b00      	cmp	r3, #0
   1a232:	dcd6      	bgt.n	1a1e2 <prvUnlockQueue+0x1a>
   1a234:	e000      	b.n	1a238 <prvUnlockQueue+0x70>
						break;
   1a236:	46c0      	nop			; (mov r8, r8)
		}

		pxQueue->cTxLock = queueUNLOCKED;
   1a238:	687b      	ldr	r3, [r7, #4]
   1a23a:	2245      	movs	r2, #69	; 0x45
   1a23c:	21ff      	movs	r1, #255	; 0xff
   1a23e:	5499      	strb	r1, [r3, r2]
	}
	taskEXIT_CRITICAL();
   1a240:	4b1c      	ldr	r3, [pc, #112]	; (1a2b4 <prvUnlockQueue+0xec>)
   1a242:	4798      	blx	r3

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
   1a244:	4b17      	ldr	r3, [pc, #92]	; (1a2a4 <prvUnlockQueue+0xdc>)
   1a246:	4798      	blx	r3
	{
		int8_t cRxLock = pxQueue->cRxLock;
   1a248:	230e      	movs	r3, #14
   1a24a:	18fb      	adds	r3, r7, r3
   1a24c:	687a      	ldr	r2, [r7, #4]
   1a24e:	2144      	movs	r1, #68	; 0x44
   1a250:	5c52      	ldrb	r2, [r2, r1]
   1a252:	701a      	strb	r2, [r3, #0]

		while( cRxLock > queueLOCKED_UNMODIFIED )
   1a254:	e014      	b.n	1a280 <prvUnlockQueue+0xb8>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
   1a256:	687b      	ldr	r3, [r7, #4]
   1a258:	691b      	ldr	r3, [r3, #16]
   1a25a:	2b00      	cmp	r3, #0
   1a25c:	d017      	beq.n	1a28e <prvUnlockQueue+0xc6>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
   1a25e:	687b      	ldr	r3, [r7, #4]
   1a260:	3310      	adds	r3, #16
   1a262:	0018      	movs	r0, r3
   1a264:	4b12      	ldr	r3, [pc, #72]	; (1a2b0 <prvUnlockQueue+0xe8>)
   1a266:	4798      	blx	r3
   1a268:	1e03      	subs	r3, r0, #0
   1a26a:	d001      	beq.n	1a270 <prvUnlockQueue+0xa8>
				{
					vTaskMissedYield();
   1a26c:	4b0f      	ldr	r3, [pc, #60]	; (1a2ac <prvUnlockQueue+0xe4>)
   1a26e:	4798      	blx	r3
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
   1a270:	230e      	movs	r3, #14
   1a272:	18fb      	adds	r3, r7, r3
   1a274:	781b      	ldrb	r3, [r3, #0]
   1a276:	3b01      	subs	r3, #1
   1a278:	b2da      	uxtb	r2, r3
   1a27a:	230e      	movs	r3, #14
   1a27c:	18fb      	adds	r3, r7, r3
   1a27e:	701a      	strb	r2, [r3, #0]
		while( cRxLock > queueLOCKED_UNMODIFIED )
   1a280:	230e      	movs	r3, #14
   1a282:	18fb      	adds	r3, r7, r3
   1a284:	781b      	ldrb	r3, [r3, #0]
   1a286:	b25b      	sxtb	r3, r3
   1a288:	2b00      	cmp	r3, #0
   1a28a:	dce4      	bgt.n	1a256 <prvUnlockQueue+0x8e>
   1a28c:	e000      	b.n	1a290 <prvUnlockQueue+0xc8>
			}
			else
			{
				break;
   1a28e:	46c0      	nop			; (mov r8, r8)
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
   1a290:	687b      	ldr	r3, [r7, #4]
   1a292:	2244      	movs	r2, #68	; 0x44
   1a294:	21ff      	movs	r1, #255	; 0xff
   1a296:	5499      	strb	r1, [r3, r2]
	}
	taskEXIT_CRITICAL();
   1a298:	4b06      	ldr	r3, [pc, #24]	; (1a2b4 <prvUnlockQueue+0xec>)
   1a29a:	4798      	blx	r3
}
   1a29c:	46c0      	nop			; (mov r8, r8)
   1a29e:	46bd      	mov	sp, r7
   1a2a0:	b004      	add	sp, #16
   1a2a2:	bd80      	pop	{r7, pc}
   1a2a4:	000188c9 	.word	0x000188c9
   1a2a8:	0001a39d 	.word	0x0001a39d
   1a2ac:	0001b371 	.word	0x0001b371
   1a2b0:	0001b15d 	.word	0x0001b15d
   1a2b4:	000188ed 	.word	0x000188ed

0001a2b8 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
   1a2b8:	b580      	push	{r7, lr}
   1a2ba:	b084      	sub	sp, #16
   1a2bc:	af00      	add	r7, sp, #0
   1a2be:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
   1a2c0:	4b08      	ldr	r3, [pc, #32]	; (1a2e4 <prvIsQueueEmpty+0x2c>)
   1a2c2:	4798      	blx	r3
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
   1a2c4:	687b      	ldr	r3, [r7, #4]
   1a2c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   1a2c8:	2b00      	cmp	r3, #0
   1a2ca:	d102      	bne.n	1a2d2 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
   1a2cc:	2301      	movs	r3, #1
   1a2ce:	60fb      	str	r3, [r7, #12]
   1a2d0:	e001      	b.n	1a2d6 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
   1a2d2:	2300      	movs	r3, #0
   1a2d4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
   1a2d6:	4b04      	ldr	r3, [pc, #16]	; (1a2e8 <prvIsQueueEmpty+0x30>)
   1a2d8:	4798      	blx	r3

	return xReturn;
   1a2da:	68fb      	ldr	r3, [r7, #12]
}
   1a2dc:	0018      	movs	r0, r3
   1a2de:	46bd      	mov	sp, r7
   1a2e0:	b004      	add	sp, #16
   1a2e2:	bd80      	pop	{r7, pc}
   1a2e4:	000188c9 	.word	0x000188c9
   1a2e8:	000188ed 	.word	0x000188ed

0001a2ec <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
   1a2ec:	b580      	push	{r7, lr}
   1a2ee:	b084      	sub	sp, #16
   1a2f0:	af00      	add	r7, sp, #0
   1a2f2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
   1a2f4:	4b09      	ldr	r3, [pc, #36]	; (1a31c <prvIsQueueFull+0x30>)
   1a2f6:	4798      	blx	r3
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
   1a2f8:	687b      	ldr	r3, [r7, #4]
   1a2fa:	6b9a      	ldr	r2, [r3, #56]	; 0x38
   1a2fc:	687b      	ldr	r3, [r7, #4]
   1a2fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   1a300:	429a      	cmp	r2, r3
   1a302:	d102      	bne.n	1a30a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
   1a304:	2301      	movs	r3, #1
   1a306:	60fb      	str	r3, [r7, #12]
   1a308:	e001      	b.n	1a30e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
   1a30a:	2300      	movs	r3, #0
   1a30c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
   1a30e:	4b04      	ldr	r3, [pc, #16]	; (1a320 <prvIsQueueFull+0x34>)
   1a310:	4798      	blx	r3

	return xReturn;
   1a312:	68fb      	ldr	r3, [r7, #12]
}
   1a314:	0018      	movs	r0, r3
   1a316:	46bd      	mov	sp, r7
   1a318:	b004      	add	sp, #16
   1a31a:	bd80      	pop	{r7, pc}
   1a31c:	000188c9 	.word	0x000188c9
   1a320:	000188ed 	.word	0x000188ed

0001a324 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
   1a324:	b580      	push	{r7, lr}
   1a326:	b086      	sub	sp, #24
   1a328:	af00      	add	r7, sp, #0
   1a32a:	60f8      	str	r0, [r7, #12]
   1a32c:	60b9      	str	r1, [r7, #8]
   1a32e:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
   1a330:	68fb      	ldr	r3, [r7, #12]
   1a332:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
   1a334:	4b15      	ldr	r3, [pc, #84]	; (1a38c <vQueueWaitForMessageRestricted+0x68>)
   1a336:	4798      	blx	r3
   1a338:	697b      	ldr	r3, [r7, #20]
   1a33a:	2244      	movs	r2, #68	; 0x44
   1a33c:	5c9b      	ldrb	r3, [r3, r2]
   1a33e:	b25b      	sxtb	r3, r3
   1a340:	3301      	adds	r3, #1
   1a342:	d103      	bne.n	1a34c <vQueueWaitForMessageRestricted+0x28>
   1a344:	697b      	ldr	r3, [r7, #20]
   1a346:	2244      	movs	r2, #68	; 0x44
   1a348:	2100      	movs	r1, #0
   1a34a:	5499      	strb	r1, [r3, r2]
   1a34c:	697b      	ldr	r3, [r7, #20]
   1a34e:	2245      	movs	r2, #69	; 0x45
   1a350:	5c9b      	ldrb	r3, [r3, r2]
   1a352:	b25b      	sxtb	r3, r3
   1a354:	3301      	adds	r3, #1
   1a356:	d103      	bne.n	1a360 <vQueueWaitForMessageRestricted+0x3c>
   1a358:	697b      	ldr	r3, [r7, #20]
   1a35a:	2245      	movs	r2, #69	; 0x45
   1a35c:	2100      	movs	r1, #0
   1a35e:	5499      	strb	r1, [r3, r2]
   1a360:	4b0b      	ldr	r3, [pc, #44]	; (1a390 <vQueueWaitForMessageRestricted+0x6c>)
   1a362:	4798      	blx	r3
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
   1a364:	697b      	ldr	r3, [r7, #20]
   1a366:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   1a368:	2b00      	cmp	r3, #0
   1a36a:	d106      	bne.n	1a37a <vQueueWaitForMessageRestricted+0x56>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
   1a36c:	697b      	ldr	r3, [r7, #20]
   1a36e:	3324      	adds	r3, #36	; 0x24
   1a370:	687a      	ldr	r2, [r7, #4]
   1a372:	68b9      	ldr	r1, [r7, #8]
   1a374:	0018      	movs	r0, r3
   1a376:	4b07      	ldr	r3, [pc, #28]	; (1a394 <vQueueWaitForMessageRestricted+0x70>)
   1a378:	4798      	blx	r3
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
   1a37a:	697b      	ldr	r3, [r7, #20]
   1a37c:	0018      	movs	r0, r3
   1a37e:	4b06      	ldr	r3, [pc, #24]	; (1a398 <vQueueWaitForMessageRestricted+0x74>)
   1a380:	4798      	blx	r3
	}
   1a382:	46c0      	nop			; (mov r8, r8)
   1a384:	46bd      	mov	sp, r7
   1a386:	b006      	add	sp, #24
   1a388:	bd80      	pop	{r7, pc}
   1a38a:	46c0      	nop			; (mov r8, r8)
   1a38c:	000188c9 	.word	0x000188c9
   1a390:	000188ed 	.word	0x000188ed
   1a394:	0001b07d 	.word	0x0001b07d
   1a398:	0001a1c9 	.word	0x0001a1c9

0001a39c <prvNotifyQueueSetContainer>:
/*-----------------------------------------------------------*/

#if ( configUSE_QUEUE_SETS == 1 )

	static BaseType_t prvNotifyQueueSetContainer( const Queue_t * const pxQueue, const BaseType_t xCopyPosition )
	{
   1a39c:	b5b0      	push	{r4, r5, r7, lr}
   1a39e:	b086      	sub	sp, #24
   1a3a0:	af00      	add	r7, sp, #0
   1a3a2:	6078      	str	r0, [r7, #4]
   1a3a4:	6039      	str	r1, [r7, #0]
	Queue_t *pxQueueSetContainer = pxQueue->pxQueueSetContainer;
   1a3a6:	687b      	ldr	r3, [r7, #4]
   1a3a8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   1a3aa:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
   1a3ac:	2300      	movs	r3, #0
   1a3ae:	617b      	str	r3, [r7, #20]

		/* This function must be called form a critical section. */

		configASSERT( pxQueueSetContainer );
   1a3b0:	693b      	ldr	r3, [r7, #16]
   1a3b2:	2b00      	cmp	r3, #0
   1a3b4:	d101      	bne.n	1a3ba <prvNotifyQueueSetContainer+0x1e>
   1a3b6:	b672      	cpsid	i
   1a3b8:	e7fe      	b.n	1a3b8 <prvNotifyQueueSetContainer+0x1c>
		configASSERT( pxQueueSetContainer->uxMessagesWaiting < pxQueueSetContainer->uxLength );
   1a3ba:	693b      	ldr	r3, [r7, #16]
   1a3bc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
   1a3be:	693b      	ldr	r3, [r7, #16]
   1a3c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   1a3c2:	429a      	cmp	r2, r3
   1a3c4:	d301      	bcc.n	1a3ca <prvNotifyQueueSetContainer+0x2e>
   1a3c6:	b672      	cpsid	i
   1a3c8:	e7fe      	b.n	1a3c8 <prvNotifyQueueSetContainer+0x2c>

		if( pxQueueSetContainer->uxMessagesWaiting < pxQueueSetContainer->uxLength )
   1a3ca:	693b      	ldr	r3, [r7, #16]
   1a3cc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
   1a3ce:	693b      	ldr	r3, [r7, #16]
   1a3d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   1a3d2:	429a      	cmp	r2, r3
   1a3d4:	d300      	bcc.n	1a3d8 <prvNotifyQueueSetContainer+0x3c>
   1a3d6:	e08b      	b.n	1a4f0 <prvNotifyQueueSetContainer+0x154>
		{
			const int8_t cTxLock = pxQueueSetContainer->cTxLock;
   1a3d8:	230f      	movs	r3, #15
   1a3da:	18fb      	adds	r3, r7, r3
   1a3dc:	693a      	ldr	r2, [r7, #16]
   1a3de:	2145      	movs	r1, #69	; 0x45
   1a3e0:	5c52      	ldrb	r2, [r2, r1]
   1a3e2:	701a      	strb	r2, [r3, #0]

			traceQUEUE_SEND( pxQueueSetContainer );
   1a3e4:	4b45      	ldr	r3, [pc, #276]	; (1a4fc <prvNotifyQueueSetContainer+0x160>)
   1a3e6:	4798      	blx	r3
   1a3e8:	0003      	movs	r3, r0
   1a3ea:	0018      	movs	r0, r3
   1a3ec:	4b44      	ldr	r3, [pc, #272]	; (1a500 <prvNotifyQueueSetContainer+0x164>)
   1a3ee:	4798      	blx	r3
   1a3f0:	0003      	movs	r3, r0
   1a3f2:	001a      	movs	r2, r3
   1a3f4:	4b43      	ldr	r3, [pc, #268]	; (1a504 <prvNotifyQueueSetContainer+0x168>)
   1a3f6:	881b      	ldrh	r3, [r3, #0]
   1a3f8:	4013      	ands	r3, r2
   1a3fa:	b29b      	uxth	r3, r3
   1a3fc:	2b00      	cmp	r3, #0
   1a3fe:	d02e      	beq.n	1a45e <prvNotifyQueueSetContainer+0xc2>
   1a400:	693b      	ldr	r3, [r7, #16]
   1a402:	0018      	movs	r0, r3
   1a404:	4b40      	ldr	r3, [pc, #256]	; (1a508 <prvNotifyQueueSetContainer+0x16c>)
   1a406:	4798      	blx	r3
   1a408:	0003      	movs	r3, r0
   1a40a:	001a      	movs	r2, r3
   1a40c:	4b3d      	ldr	r3, [pc, #244]	; (1a504 <prvNotifyQueueSetContainer+0x168>)
   1a40e:	881b      	ldrh	r3, [r3, #0]
   1a410:	4013      	ands	r3, r2
   1a412:	b29b      	uxth	r3, r3
   1a414:	2b00      	cmp	r3, #0
   1a416:	d022      	beq.n	1a45e <prvNotifyQueueSetContainer+0xc2>
   1a418:	683b      	ldr	r3, [r7, #0]
   1a41a:	2b00      	cmp	r3, #0
   1a41c:	d10b      	bne.n	1a436 <prvNotifyQueueSetContainer+0x9a>
   1a41e:	693b      	ldr	r3, [r7, #16]
   1a420:	0018      	movs	r0, r3
   1a422:	4b3a      	ldr	r3, [pc, #232]	; (1a50c <prvNotifyQueueSetContainer+0x170>)
   1a424:	4798      	blx	r3
   1a426:	0003      	movs	r3, r0
   1a428:	001a      	movs	r2, r3
   1a42a:	4b39      	ldr	r3, [pc, #228]	; (1a510 <prvNotifyQueueSetContainer+0x174>)
   1a42c:	5c9b      	ldrb	r3, [r3, r2]
   1a42e:	3320      	adds	r3, #32
   1a430:	b2db      	uxtb	r3, r3
   1a432:	001d      	movs	r5, r3
   1a434:	e000      	b.n	1a438 <prvNotifyQueueSetContainer+0x9c>
   1a436:	2525      	movs	r5, #37	; 0x25
   1a438:	693b      	ldr	r3, [r7, #16]
   1a43a:	0018      	movs	r0, r3
   1a43c:	4b33      	ldr	r3, [pc, #204]	; (1a50c <prvNotifyQueueSetContainer+0x170>)
   1a43e:	4798      	blx	r3
   1a440:	0003      	movs	r3, r0
   1a442:	001a      	movs	r2, r3
   1a444:	4b32      	ldr	r3, [pc, #200]	; (1a510 <prvNotifyQueueSetContainer+0x174>)
   1a446:	5c9c      	ldrb	r4, [r3, r2]
   1a448:	693b      	ldr	r3, [r7, #16]
   1a44a:	0018      	movs	r0, r3
   1a44c:	4b31      	ldr	r3, [pc, #196]	; (1a514 <prvNotifyQueueSetContainer+0x178>)
   1a44e:	4798      	blx	r3
   1a450:	0003      	movs	r3, r0
   1a452:	b2db      	uxtb	r3, r3
   1a454:	001a      	movs	r2, r3
   1a456:	0021      	movs	r1, r4
   1a458:	0028      	movs	r0, r5
   1a45a:	4b2f      	ldr	r3, [pc, #188]	; (1a518 <prvNotifyQueueSetContainer+0x17c>)
   1a45c:	4798      	blx	r3
   1a45e:	693b      	ldr	r3, [r7, #16]
   1a460:	0018      	movs	r0, r3
   1a462:	4b2a      	ldr	r3, [pc, #168]	; (1a50c <prvNotifyQueueSetContainer+0x170>)
   1a464:	4798      	blx	r3
   1a466:	0003      	movs	r3, r0
   1a468:	001a      	movs	r2, r3
   1a46a:	4b29      	ldr	r3, [pc, #164]	; (1a510 <prvNotifyQueueSetContainer+0x174>)
   1a46c:	5c9c      	ldrb	r4, [r3, r2]
   1a46e:	693b      	ldr	r3, [r7, #16]
   1a470:	0018      	movs	r0, r3
   1a472:	4b28      	ldr	r3, [pc, #160]	; (1a514 <prvNotifyQueueSetContainer+0x178>)
   1a474:	4798      	blx	r3
   1a476:	0003      	movs	r3, r0
   1a478:	b2dd      	uxtb	r5, r3
   1a47a:	693b      	ldr	r3, [r7, #16]
   1a47c:	0018      	movs	r0, r3
   1a47e:	4b23      	ldr	r3, [pc, #140]	; (1a50c <prvNotifyQueueSetContainer+0x170>)
   1a480:	4798      	blx	r3
   1a482:	0003      	movs	r3, r0
   1a484:	001a      	movs	r2, r3
   1a486:	4b22      	ldr	r3, [pc, #136]	; (1a510 <prvNotifyQueueSetContainer+0x174>)
   1a488:	5c9b      	ldrb	r3, [r3, r2]
   1a48a:	2b02      	cmp	r3, #2
   1a48c:	d005      	beq.n	1a49a <prvNotifyQueueSetContainer+0xfe>
   1a48e:	693b      	ldr	r3, [r7, #16]
   1a490:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   1a492:	b2db      	uxtb	r3, r3
   1a494:	3301      	adds	r3, #1
   1a496:	b2db      	uxtb	r3, r3
   1a498:	e000      	b.n	1a49c <prvNotifyQueueSetContainer+0x100>
   1a49a:	2300      	movs	r3, #0
   1a49c:	001a      	movs	r2, r3
   1a49e:	0029      	movs	r1, r5
   1a4a0:	0020      	movs	r0, r4
   1a4a2:	4b1e      	ldr	r3, [pc, #120]	; (1a51c <prvNotifyQueueSetContainer+0x180>)
   1a4a4:	4798      	blx	r3

			/* The data copied is the handle of the queue that contains data. */
			xReturn = prvCopyDataToQueue( pxQueueSetContainer, &pxQueue, xCopyPosition );
   1a4a6:	683a      	ldr	r2, [r7, #0]
   1a4a8:	1d39      	adds	r1, r7, #4
   1a4aa:	693b      	ldr	r3, [r7, #16]
   1a4ac:	0018      	movs	r0, r3
   1a4ae:	4b1c      	ldr	r3, [pc, #112]	; (1a520 <prvNotifyQueueSetContainer+0x184>)
   1a4b0:	4798      	blx	r3
   1a4b2:	0003      	movs	r3, r0
   1a4b4:	617b      	str	r3, [r7, #20]

			if( cTxLock == queueUNLOCKED )
   1a4b6:	230f      	movs	r3, #15
   1a4b8:	18fb      	adds	r3, r7, r3
   1a4ba:	781b      	ldrb	r3, [r3, #0]
   1a4bc:	b25b      	sxtb	r3, r3
   1a4be:	3301      	adds	r3, #1
   1a4c0:	d10d      	bne.n	1a4de <prvNotifyQueueSetContainer+0x142>
			{
				if( listLIST_IS_EMPTY( &( pxQueueSetContainer->xTasksWaitingToReceive ) ) == pdFALSE )
   1a4c2:	693b      	ldr	r3, [r7, #16]
   1a4c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   1a4c6:	2b00      	cmp	r3, #0
   1a4c8:	d012      	beq.n	1a4f0 <prvNotifyQueueSetContainer+0x154>
				{
					if( xTaskRemoveFromEventList( &( pxQueueSetContainer->xTasksWaitingToReceive ) ) != pdFALSE )
   1a4ca:	693b      	ldr	r3, [r7, #16]
   1a4cc:	3324      	adds	r3, #36	; 0x24
   1a4ce:	0018      	movs	r0, r3
   1a4d0:	4b14      	ldr	r3, [pc, #80]	; (1a524 <prvNotifyQueueSetContainer+0x188>)
   1a4d2:	4798      	blx	r3
   1a4d4:	1e03      	subs	r3, r0, #0
   1a4d6:	d00b      	beq.n	1a4f0 <prvNotifyQueueSetContainer+0x154>
					{
						/* The task waiting has a higher priority. */
						xReturn = pdTRUE;
   1a4d8:	2301      	movs	r3, #1
   1a4da:	617b      	str	r3, [r7, #20]
   1a4dc:	e008      	b.n	1a4f0 <prvNotifyQueueSetContainer+0x154>
					mtCOVERAGE_TEST_MARKER();
				}
			}
			else
			{
				pxQueueSetContainer->cTxLock = ( int8_t ) ( cTxLock + 1 );
   1a4de:	230f      	movs	r3, #15
   1a4e0:	18fb      	adds	r3, r7, r3
   1a4e2:	781b      	ldrb	r3, [r3, #0]
   1a4e4:	3301      	adds	r3, #1
   1a4e6:	b2db      	uxtb	r3, r3
   1a4e8:	b259      	sxtb	r1, r3
   1a4ea:	693b      	ldr	r3, [r7, #16]
   1a4ec:	2245      	movs	r2, #69	; 0x45
   1a4ee:	5499      	strb	r1, [r3, r2]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
   1a4f0:	697b      	ldr	r3, [r7, #20]
	}
   1a4f2:	0018      	movs	r0, r3
   1a4f4:	46bd      	mov	sp, r7
   1a4f6:	b006      	add	sp, #24
   1a4f8:	bdb0      	pop	{r4, r5, r7, pc}
   1a4fa:	46c0      	nop			; (mov r8, r8)
   1a4fc:	00016b5d 	.word	0x00016b5d
   1a500:	000168c1 	.word	0x000168c1
   1a504:	20000120 	.word	0x20000120
   1a508:	00016981 	.word	0x00016981
   1a50c:	00016881 	.word	0x00016881
   1a510:	20000114 	.word	0x20000114
   1a514:	00016961 	.word	0x00016961
   1a518:	000172b9 	.word	0x000172b9
   1a51c:	00017915 	.word	0x00017915
   1a520:	0001a099 	.word	0x0001a099
   1a524:	0001b15d 	.word	0x0001b15d

0001a528 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
   1a528:	b590      	push	{r4, r7, lr}
   1a52a:	b08d      	sub	sp, #52	; 0x34
   1a52c:	af04      	add	r7, sp, #16
   1a52e:	60f8      	str	r0, [r7, #12]
   1a530:	60b9      	str	r1, [r7, #8]
   1a532:	603b      	str	r3, [r7, #0]
   1a534:	1dbb      	adds	r3, r7, #6
   1a536:	801a      	strh	r2, [r3, #0]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
   1a538:	1dbb      	adds	r3, r7, #6
   1a53a:	881b      	ldrh	r3, [r3, #0]
   1a53c:	009b      	lsls	r3, r3, #2
   1a53e:	0018      	movs	r0, r3
   1a540:	4b1d      	ldr	r3, [pc, #116]	; (1a5b8 <xTaskCreate+0x90>)
   1a542:	4798      	blx	r3
   1a544:	0003      	movs	r3, r0
   1a546:	617b      	str	r3, [r7, #20]

			if( pxStack != NULL )
   1a548:	697b      	ldr	r3, [r7, #20]
   1a54a:	2b00      	cmp	r3, #0
   1a54c:	d010      	beq.n	1a570 <xTaskCreate+0x48>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
   1a54e:	2054      	movs	r0, #84	; 0x54
   1a550:	4b19      	ldr	r3, [pc, #100]	; (1a5b8 <xTaskCreate+0x90>)
   1a552:	4798      	blx	r3
   1a554:	0003      	movs	r3, r0
   1a556:	61fb      	str	r3, [r7, #28]

				if( pxNewTCB != NULL )
   1a558:	69fb      	ldr	r3, [r7, #28]
   1a55a:	2b00      	cmp	r3, #0
   1a55c:	d003      	beq.n	1a566 <xTaskCreate+0x3e>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
   1a55e:	69fb      	ldr	r3, [r7, #28]
   1a560:	697a      	ldr	r2, [r7, #20]
   1a562:	631a      	str	r2, [r3, #48]	; 0x30
   1a564:	e006      	b.n	1a574 <xTaskCreate+0x4c>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
   1a566:	697b      	ldr	r3, [r7, #20]
   1a568:	0018      	movs	r0, r3
   1a56a:	4b14      	ldr	r3, [pc, #80]	; (1a5bc <xTaskCreate+0x94>)
   1a56c:	4798      	blx	r3
   1a56e:	e001      	b.n	1a574 <xTaskCreate+0x4c>
				}
			}
			else
			{
				pxNewTCB = NULL;
   1a570:	2300      	movs	r3, #0
   1a572:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
   1a574:	69fb      	ldr	r3, [r7, #28]
   1a576:	2b00      	cmp	r3, #0
   1a578:	d016      	beq.n	1a5a8 <xTaskCreate+0x80>
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
   1a57a:	1dbb      	adds	r3, r7, #6
   1a57c:	881a      	ldrh	r2, [r3, #0]
   1a57e:	683c      	ldr	r4, [r7, #0]
   1a580:	68b9      	ldr	r1, [r7, #8]
   1a582:	68f8      	ldr	r0, [r7, #12]
   1a584:	2300      	movs	r3, #0
   1a586:	9303      	str	r3, [sp, #12]
   1a588:	69fb      	ldr	r3, [r7, #28]
   1a58a:	9302      	str	r3, [sp, #8]
   1a58c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   1a58e:	9301      	str	r3, [sp, #4]
   1a590:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   1a592:	9300      	str	r3, [sp, #0]
   1a594:	0023      	movs	r3, r4
   1a596:	4c0a      	ldr	r4, [pc, #40]	; (1a5c0 <xTaskCreate+0x98>)
   1a598:	47a0      	blx	r4
			prvAddNewTaskToReadyList( pxNewTCB );
   1a59a:	69fb      	ldr	r3, [r7, #28]
   1a59c:	0018      	movs	r0, r3
   1a59e:	4b09      	ldr	r3, [pc, #36]	; (1a5c4 <xTaskCreate+0x9c>)
   1a5a0:	4798      	blx	r3
			xReturn = pdPASS;
   1a5a2:	2301      	movs	r3, #1
   1a5a4:	61bb      	str	r3, [r7, #24]
   1a5a6:	e002      	b.n	1a5ae <xTaskCreate+0x86>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
   1a5a8:	2301      	movs	r3, #1
   1a5aa:	425b      	negs	r3, r3
   1a5ac:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
   1a5ae:	69bb      	ldr	r3, [r7, #24]
	}
   1a5b0:	0018      	movs	r0, r3
   1a5b2:	46bd      	mov	sp, r7
   1a5b4:	b009      	add	sp, #36	; 0x24
   1a5b6:	bd90      	pop	{r4, r7, pc}
   1a5b8:	00018a01 	.word	0x00018a01
   1a5bc:	00018ac5 	.word	0x00018ac5
   1a5c0:	0001a5c9 	.word	0x0001a5c9
   1a5c4:	0001a6d9 	.word	0x0001a6d9

0001a5c8 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
   1a5c8:	b580      	push	{r7, lr}
   1a5ca:	b086      	sub	sp, #24
   1a5cc:	af00      	add	r7, sp, #0
   1a5ce:	60f8      	str	r0, [r7, #12]
   1a5d0:	60b9      	str	r1, [r7, #8]
   1a5d2:	607a      	str	r2, [r7, #4]
   1a5d4:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
   1a5d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1a5d8:	6b18      	ldr	r0, [r3, #48]	; 0x30
   1a5da:	687b      	ldr	r3, [r7, #4]
   1a5dc:	009b      	lsls	r3, r3, #2
   1a5de:	001a      	movs	r2, r3
   1a5e0:	21a5      	movs	r1, #165	; 0xa5
   1a5e2:	4b39      	ldr	r3, [pc, #228]	; (1a6c8 <prvInitialiseNewTask+0x100>)
   1a5e4:	4798      	blx	r3
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
   1a5e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1a5e8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
   1a5ea:	687b      	ldr	r3, [r7, #4]
   1a5ec:	4937      	ldr	r1, [pc, #220]	; (1a6cc <prvInitialiseNewTask+0x104>)
   1a5ee:	468c      	mov	ip, r1
   1a5f0:	4463      	add	r3, ip
   1a5f2:	009b      	lsls	r3, r3, #2
   1a5f4:	18d3      	adds	r3, r2, r3
   1a5f6:	613b      	str	r3, [r7, #16]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
   1a5f8:	693b      	ldr	r3, [r7, #16]
   1a5fa:	2207      	movs	r2, #7
   1a5fc:	4393      	bics	r3, r2
   1a5fe:	613b      	str	r3, [r7, #16]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
   1a600:	693b      	ldr	r3, [r7, #16]
   1a602:	2207      	movs	r2, #7
   1a604:	4013      	ands	r3, r2
   1a606:	d001      	beq.n	1a60c <prvInitialiseNewTask+0x44>
   1a608:	b672      	cpsid	i
   1a60a:	e7fe      	b.n	1a60a <prvInitialiseNewTask+0x42>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
   1a60c:	2300      	movs	r3, #0
   1a60e:	617b      	str	r3, [r7, #20]
   1a610:	e013      	b.n	1a63a <prvInitialiseNewTask+0x72>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
   1a612:	68ba      	ldr	r2, [r7, #8]
   1a614:	697b      	ldr	r3, [r7, #20]
   1a616:	18d3      	adds	r3, r2, r3
   1a618:	7818      	ldrb	r0, [r3, #0]
   1a61a:	6aba      	ldr	r2, [r7, #40]	; 0x28
   1a61c:	2134      	movs	r1, #52	; 0x34
   1a61e:	697b      	ldr	r3, [r7, #20]
   1a620:	18d3      	adds	r3, r2, r3
   1a622:	185b      	adds	r3, r3, r1
   1a624:	1c02      	adds	r2, r0, #0
   1a626:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
   1a628:	68ba      	ldr	r2, [r7, #8]
   1a62a:	697b      	ldr	r3, [r7, #20]
   1a62c:	18d3      	adds	r3, r2, r3
   1a62e:	781b      	ldrb	r3, [r3, #0]
   1a630:	2b00      	cmp	r3, #0
   1a632:	d006      	beq.n	1a642 <prvInitialiseNewTask+0x7a>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
   1a634:	697b      	ldr	r3, [r7, #20]
   1a636:	3301      	adds	r3, #1
   1a638:	617b      	str	r3, [r7, #20]
   1a63a:	697b      	ldr	r3, [r7, #20]
   1a63c:	2b07      	cmp	r3, #7
   1a63e:	d9e8      	bls.n	1a612 <prvInitialiseNewTask+0x4a>
   1a640:	e000      	b.n	1a644 <prvInitialiseNewTask+0x7c>
		{
			break;
   1a642:	46c0      	nop			; (mov r8, r8)
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
   1a644:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1a646:	223b      	movs	r2, #59	; 0x3b
   1a648:	2100      	movs	r1, #0
   1a64a:	5499      	strb	r1, [r3, r2]

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
   1a64c:	6a3b      	ldr	r3, [r7, #32]
   1a64e:	2b04      	cmp	r3, #4
   1a650:	d901      	bls.n	1a656 <prvInitialiseNewTask+0x8e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
   1a652:	2304      	movs	r3, #4
   1a654:	623b      	str	r3, [r7, #32]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
   1a656:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1a658:	6a3a      	ldr	r2, [r7, #32]
   1a65a:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
   1a65c:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1a65e:	6a3a      	ldr	r2, [r7, #32]
   1a660:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
   1a662:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1a664:	2200      	movs	r2, #0
   1a666:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
   1a668:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1a66a:	3304      	adds	r3, #4
   1a66c:	0018      	movs	r0, r3
   1a66e:	4b18      	ldr	r3, [pc, #96]	; (1a6d0 <prvInitialiseNewTask+0x108>)
   1a670:	4798      	blx	r3
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
   1a672:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1a674:	3318      	adds	r3, #24
   1a676:	0018      	movs	r0, r3
   1a678:	4b15      	ldr	r3, [pc, #84]	; (1a6d0 <prvInitialiseNewTask+0x108>)
   1a67a:	4798      	blx	r3

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
   1a67c:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1a67e:	6aba      	ldr	r2, [r7, #40]	; 0x28
   1a680:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
   1a682:	6a3b      	ldr	r3, [r7, #32]
   1a684:	2205      	movs	r2, #5
   1a686:	1ad2      	subs	r2, r2, r3
   1a688:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1a68a:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
   1a68c:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1a68e:	6aba      	ldr	r2, [r7, #40]	; 0x28
   1a690:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
   1a692:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1a694:	2200      	movs	r2, #0
   1a696:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
   1a698:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1a69a:	2250      	movs	r2, #80	; 0x50
   1a69c:	2100      	movs	r1, #0
   1a69e:	5499      	strb	r1, [r3, r2]
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
   1a6a0:	683a      	ldr	r2, [r7, #0]
   1a6a2:	68f9      	ldr	r1, [r7, #12]
   1a6a4:	693b      	ldr	r3, [r7, #16]
   1a6a6:	0018      	movs	r0, r3
   1a6a8:	4b0a      	ldr	r3, [pc, #40]	; (1a6d4 <prvInitialiseNewTask+0x10c>)
   1a6aa:	4798      	blx	r3
   1a6ac:	0002      	movs	r2, r0
   1a6ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1a6b0:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
   1a6b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1a6b4:	2b00      	cmp	r3, #0
   1a6b6:	d002      	beq.n	1a6be <prvInitialiseNewTask+0xf6>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
   1a6b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1a6ba:	6aba      	ldr	r2, [r7, #40]	; 0x28
   1a6bc:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
   1a6be:	46c0      	nop			; (mov r8, r8)
   1a6c0:	46bd      	mov	sp, r7
   1a6c2:	b006      	add	sp, #24
   1a6c4:	bd80      	pop	{r7, pc}
   1a6c6:	46c0      	nop			; (mov r8, r8)
   1a6c8:	00033117 	.word	0x00033117
   1a6cc:	3fffffff 	.word	0x3fffffff
   1a6d0:	00018675 	.word	0x00018675
   1a6d4:	0001878d 	.word	0x0001878d

0001a6d8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
   1a6d8:	b580      	push	{r7, lr}
   1a6da:	b082      	sub	sp, #8
   1a6dc:	af00      	add	r7, sp, #0
   1a6de:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
   1a6e0:	4b60      	ldr	r3, [pc, #384]	; (1a864 <prvAddNewTaskToReadyList+0x18c>)
   1a6e2:	4798      	blx	r3
	{
		uxCurrentNumberOfTasks++;
   1a6e4:	4b60      	ldr	r3, [pc, #384]	; (1a868 <prvAddNewTaskToReadyList+0x190>)
   1a6e6:	681b      	ldr	r3, [r3, #0]
   1a6e8:	1c5a      	adds	r2, r3, #1
   1a6ea:	4b5f      	ldr	r3, [pc, #380]	; (1a868 <prvAddNewTaskToReadyList+0x190>)
   1a6ec:	601a      	str	r2, [r3, #0]
		if( pxCurrentTCB == NULL )
   1a6ee:	4b5f      	ldr	r3, [pc, #380]	; (1a86c <prvAddNewTaskToReadyList+0x194>)
   1a6f0:	681b      	ldr	r3, [r3, #0]
   1a6f2:	2b00      	cmp	r3, #0
   1a6f4:	d109      	bne.n	1a70a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
   1a6f6:	4b5d      	ldr	r3, [pc, #372]	; (1a86c <prvAddNewTaskToReadyList+0x194>)
   1a6f8:	687a      	ldr	r2, [r7, #4]
   1a6fa:	601a      	str	r2, [r3, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
   1a6fc:	4b5a      	ldr	r3, [pc, #360]	; (1a868 <prvAddNewTaskToReadyList+0x190>)
   1a6fe:	681b      	ldr	r3, [r3, #0]
   1a700:	2b01      	cmp	r3, #1
   1a702:	d110      	bne.n	1a726 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
   1a704:	4b5a      	ldr	r3, [pc, #360]	; (1a870 <prvAddNewTaskToReadyList+0x198>)
   1a706:	4798      	blx	r3
   1a708:	e00d      	b.n	1a726 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
   1a70a:	4b5a      	ldr	r3, [pc, #360]	; (1a874 <prvAddNewTaskToReadyList+0x19c>)
   1a70c:	681b      	ldr	r3, [r3, #0]
   1a70e:	2b00      	cmp	r3, #0
   1a710:	d109      	bne.n	1a726 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
   1a712:	4b56      	ldr	r3, [pc, #344]	; (1a86c <prvAddNewTaskToReadyList+0x194>)
   1a714:	681b      	ldr	r3, [r3, #0]
   1a716:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1a718:	687b      	ldr	r3, [r7, #4]
   1a71a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   1a71c:	429a      	cmp	r2, r3
   1a71e:	d802      	bhi.n	1a726 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
   1a720:	4b52      	ldr	r3, [pc, #328]	; (1a86c <prvAddNewTaskToReadyList+0x194>)
   1a722:	687a      	ldr	r2, [r7, #4]
   1a724:	601a      	str	r2, [r3, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
   1a726:	4b54      	ldr	r3, [pc, #336]	; (1a878 <prvAddNewTaskToReadyList+0x1a0>)
   1a728:	681b      	ldr	r3, [r3, #0]
   1a72a:	1c5a      	adds	r2, r3, #1
   1a72c:	4b52      	ldr	r3, [pc, #328]	; (1a878 <prvAddNewTaskToReadyList+0x1a0>)
   1a72e:	601a      	str	r2, [r3, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
   1a730:	4b51      	ldr	r3, [pc, #324]	; (1a878 <prvAddNewTaskToReadyList+0x1a0>)
   1a732:	681a      	ldr	r2, [r3, #0]
   1a734:	687b      	ldr	r3, [r7, #4]
   1a736:	63da      	str	r2, [r3, #60]	; 0x3c
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );
   1a738:	687b      	ldr	r3, [r7, #4]
   1a73a:	2b00      	cmp	r3, #0
   1a73c:	d052      	beq.n	1a7e4 <prvAddNewTaskToReadyList+0x10c>
   1a73e:	2003      	movs	r0, #3
   1a740:	4b4e      	ldr	r3, [pc, #312]	; (1a87c <prvAddNewTaskToReadyList+0x1a4>)
   1a742:	4798      	blx	r3
   1a744:	0003      	movs	r3, r0
   1a746:	b29a      	uxth	r2, r3
   1a748:	687b      	ldr	r3, [r7, #4]
   1a74a:	0011      	movs	r1, r2
   1a74c:	0018      	movs	r0, r3
   1a74e:	4b4c      	ldr	r3, [pc, #304]	; (1a880 <prvAddNewTaskToReadyList+0x1a8>)
   1a750:	4798      	blx	r3
   1a752:	4b4c      	ldr	r3, [pc, #304]	; (1a884 <prvAddNewTaskToReadyList+0x1ac>)
   1a754:	881a      	ldrh	r2, [r3, #0]
   1a756:	687b      	ldr	r3, [r7, #4]
   1a758:	0011      	movs	r1, r2
   1a75a:	0018      	movs	r0, r3
   1a75c:	4b4a      	ldr	r3, [pc, #296]	; (1a888 <prvAddNewTaskToReadyList+0x1b0>)
   1a75e:	4798      	blx	r3
   1a760:	687b      	ldr	r3, [r7, #4]
   1a762:	0018      	movs	r0, r3
   1a764:	4b49      	ldr	r3, [pc, #292]	; (1a88c <prvAddNewTaskToReadyList+0x1b4>)
   1a766:	4798      	blx	r3
   1a768:	0003      	movs	r3, r0
   1a76a:	b2d9      	uxtb	r1, r3
   1a76c:	687b      	ldr	r3, [r7, #4]
   1a76e:	3334      	adds	r3, #52	; 0x34
   1a770:	001a      	movs	r2, r3
   1a772:	2003      	movs	r0, #3
   1a774:	4b46      	ldr	r3, [pc, #280]	; (1a890 <prvAddNewTaskToReadyList+0x1b8>)
   1a776:	4798      	blx	r3
   1a778:	687b      	ldr	r3, [r7, #4]
   1a77a:	0018      	movs	r0, r3
   1a77c:	4b43      	ldr	r3, [pc, #268]	; (1a88c <prvAddNewTaskToReadyList+0x1b4>)
   1a77e:	4798      	blx	r3
   1a780:	0003      	movs	r3, r0
   1a782:	b2d9      	uxtb	r1, r3
   1a784:	687b      	ldr	r3, [r7, #4]
   1a786:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   1a788:	b2db      	uxtb	r3, r3
   1a78a:	001a      	movs	r2, r3
   1a78c:	2003      	movs	r0, #3
   1a78e:	4b41      	ldr	r3, [pc, #260]	; (1a894 <prvAddNewTaskToReadyList+0x1bc>)
   1a790:	4798      	blx	r3
   1a792:	4b41      	ldr	r3, [pc, #260]	; (1a898 <prvAddNewTaskToReadyList+0x1c0>)
   1a794:	4798      	blx	r3
   1a796:	0003      	movs	r3, r0
   1a798:	0018      	movs	r0, r3
   1a79a:	4b40      	ldr	r3, [pc, #256]	; (1a89c <prvAddNewTaskToReadyList+0x1c4>)
   1a79c:	4798      	blx	r3
   1a79e:	0003      	movs	r3, r0
   1a7a0:	001a      	movs	r2, r3
   1a7a2:	4b3f      	ldr	r3, [pc, #252]	; (1a8a0 <prvAddNewTaskToReadyList+0x1c8>)
   1a7a4:	881b      	ldrh	r3, [r3, #0]
   1a7a6:	4013      	ands	r3, r2
   1a7a8:	b29b      	uxth	r3, r3
   1a7aa:	2b00      	cmp	r3, #0
   1a7ac:	d016      	beq.n	1a7dc <prvAddNewTaskToReadyList+0x104>
   1a7ae:	687b      	ldr	r3, [r7, #4]
   1a7b0:	0018      	movs	r0, r3
   1a7b2:	4b3a      	ldr	r3, [pc, #232]	; (1a89c <prvAddNewTaskToReadyList+0x1c4>)
   1a7b4:	4798      	blx	r3
   1a7b6:	0003      	movs	r3, r0
   1a7b8:	001a      	movs	r2, r3
   1a7ba:	4b39      	ldr	r3, [pc, #228]	; (1a8a0 <prvAddNewTaskToReadyList+0x1c8>)
   1a7bc:	881b      	ldrh	r3, [r3, #0]
   1a7be:	4013      	ands	r3, r2
   1a7c0:	b29b      	uxth	r3, r3
   1a7c2:	2b00      	cmp	r3, #0
   1a7c4:	d00a      	beq.n	1a7dc <prvAddNewTaskToReadyList+0x104>
   1a7c6:	687b      	ldr	r3, [r7, #4]
   1a7c8:	0018      	movs	r0, r3
   1a7ca:	4b30      	ldr	r3, [pc, #192]	; (1a88c <prvAddNewTaskToReadyList+0x1b4>)
   1a7cc:	4798      	blx	r3
   1a7ce:	0003      	movs	r3, r0
   1a7d0:	b2db      	uxtb	r3, r3
   1a7d2:	001a      	movs	r2, r3
   1a7d4:	2103      	movs	r1, #3
   1a7d6:	201b      	movs	r0, #27
   1a7d8:	4b32      	ldr	r3, [pc, #200]	; (1a8a4 <prvAddNewTaskToReadyList+0x1cc>)
   1a7da:	4798      	blx	r3
   1a7dc:	687b      	ldr	r3, [r7, #4]
   1a7de:	0018      	movs	r0, r3
   1a7e0:	4b31      	ldr	r3, [pc, #196]	; (1a8a8 <prvAddNewTaskToReadyList+0x1d0>)
   1a7e2:	4798      	blx	r3

		prvAddTaskToReadyList( pxNewTCB );
   1a7e4:	687b      	ldr	r3, [r7, #4]
   1a7e6:	0018      	movs	r0, r3
   1a7e8:	4b2c      	ldr	r3, [pc, #176]	; (1a89c <prvAddNewTaskToReadyList+0x1c4>)
   1a7ea:	4798      	blx	r3
   1a7ec:	0003      	movs	r3, r0
   1a7ee:	001a      	movs	r2, r3
   1a7f0:	4b2b      	ldr	r3, [pc, #172]	; (1a8a0 <prvAddNewTaskToReadyList+0x1c8>)
   1a7f2:	881b      	ldrh	r3, [r3, #0]
   1a7f4:	4013      	ands	r3, r2
   1a7f6:	b29b      	uxth	r3, r3
   1a7f8:	2b00      	cmp	r3, #0
   1a7fa:	d008      	beq.n	1a80e <prvAddNewTaskToReadyList+0x136>
   1a7fc:	687b      	ldr	r3, [r7, #4]
   1a7fe:	0018      	movs	r0, r3
   1a800:	4b22      	ldr	r3, [pc, #136]	; (1a88c <prvAddNewTaskToReadyList+0x1b4>)
   1a802:	4798      	blx	r3
   1a804:	0003      	movs	r3, r0
   1a806:	b2db      	uxtb	r3, r3
   1a808:	0018      	movs	r0, r3
   1a80a:	4b28      	ldr	r3, [pc, #160]	; (1a8ac <prvAddNewTaskToReadyList+0x1d4>)
   1a80c:	4798      	blx	r3
   1a80e:	687b      	ldr	r3, [r7, #4]
   1a810:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1a812:	4b27      	ldr	r3, [pc, #156]	; (1a8b0 <prvAddNewTaskToReadyList+0x1d8>)
   1a814:	681b      	ldr	r3, [r3, #0]
   1a816:	429a      	cmp	r2, r3
   1a818:	d903      	bls.n	1a822 <prvAddNewTaskToReadyList+0x14a>
   1a81a:	687b      	ldr	r3, [r7, #4]
   1a81c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1a81e:	4b24      	ldr	r3, [pc, #144]	; (1a8b0 <prvAddNewTaskToReadyList+0x1d8>)
   1a820:	601a      	str	r2, [r3, #0]
   1a822:	687b      	ldr	r3, [r7, #4]
   1a824:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1a826:	0013      	movs	r3, r2
   1a828:	009b      	lsls	r3, r3, #2
   1a82a:	189b      	adds	r3, r3, r2
   1a82c:	009b      	lsls	r3, r3, #2
   1a82e:	4a21      	ldr	r2, [pc, #132]	; (1a8b4 <prvAddNewTaskToReadyList+0x1dc>)
   1a830:	189a      	adds	r2, r3, r2
   1a832:	687b      	ldr	r3, [r7, #4]
   1a834:	3304      	adds	r3, #4
   1a836:	0019      	movs	r1, r3
   1a838:	0010      	movs	r0, r2
   1a83a:	4b1f      	ldr	r3, [pc, #124]	; (1a8b8 <prvAddNewTaskToReadyList+0x1e0>)
   1a83c:	4798      	blx	r3

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
   1a83e:	4b1f      	ldr	r3, [pc, #124]	; (1a8bc <prvAddNewTaskToReadyList+0x1e4>)
   1a840:	4798      	blx	r3

	if( xSchedulerRunning != pdFALSE )
   1a842:	4b0c      	ldr	r3, [pc, #48]	; (1a874 <prvAddNewTaskToReadyList+0x19c>)
   1a844:	681b      	ldr	r3, [r3, #0]
   1a846:	2b00      	cmp	r3, #0
   1a848:	d008      	beq.n	1a85c <prvAddNewTaskToReadyList+0x184>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
   1a84a:	4b08      	ldr	r3, [pc, #32]	; (1a86c <prvAddNewTaskToReadyList+0x194>)
   1a84c:	681b      	ldr	r3, [r3, #0]
   1a84e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1a850:	687b      	ldr	r3, [r7, #4]
   1a852:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   1a854:	429a      	cmp	r2, r3
   1a856:	d201      	bcs.n	1a85c <prvAddNewTaskToReadyList+0x184>
		{
			taskYIELD_IF_USING_PREEMPTION();
   1a858:	4b19      	ldr	r3, [pc, #100]	; (1a8c0 <prvAddNewTaskToReadyList+0x1e8>)
   1a85a:	4798      	blx	r3
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
   1a85c:	46c0      	nop			; (mov r8, r8)
   1a85e:	46bd      	mov	sp, r7
   1a860:	b002      	add	sp, #8
   1a862:	bd80      	pop	{r7, pc}
   1a864:	000188c9 	.word	0x000188c9
   1a868:	20003c50 	.word	0x20003c50
   1a86c:	20003b78 	.word	0x20003b78
   1a870:	0001b3f9 	.word	0x0001b3f9
   1a874:	20003c5c 	.word	0x20003c5c
   1a878:	20003c6c 	.word	0x20003c6c
   1a87c:	00017e41 	.word	0x00017e41
   1a880:	000168e5 	.word	0x000168e5
   1a884:	20000122 	.word	0x20000122
   1a888:	00016921 	.word	0x00016921
   1a88c:	000168a1 	.word	0x000168a1
   1a890:	00018071 	.word	0x00018071
   1a894:	000177d5 	.word	0x000177d5
   1a898:	00016b5d 	.word	0x00016b5d
   1a89c:	000168c1 	.word	0x000168c1
   1a8a0:	20000120 	.word	0x20000120
   1a8a4:	000172b9 	.word	0x000172b9
   1a8a8:	00016a21 	.word	0x00016a21
   1a8ac:	00017071 	.word	0x00017071
   1a8b0:	20003c58 	.word	0x20003c58
   1a8b4:	20003b7c 	.word	0x20003b7c
   1a8b8:	0001868b 	.word	0x0001868b
   1a8bc:	000188ed 	.word	0x000188ed
   1a8c0:	000188b1 	.word	0x000188b1

0001a8c4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
   1a8c4:	b580      	push	{r7, lr}
   1a8c6:	b084      	sub	sp, #16
   1a8c8:	af00      	add	r7, sp, #0
   1a8ca:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
   1a8cc:	2300      	movs	r3, #0
   1a8ce:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
   1a8d0:	687b      	ldr	r3, [r7, #4]
   1a8d2:	2b00      	cmp	r3, #0
   1a8d4:	d045      	beq.n	1a962 <vTaskDelay+0x9e>
		{
			configASSERT( uxSchedulerSuspended == 0 );
   1a8d6:	4b27      	ldr	r3, [pc, #156]	; (1a974 <vTaskDelay+0xb0>)
   1a8d8:	681b      	ldr	r3, [r3, #0]
   1a8da:	2b00      	cmp	r3, #0
   1a8dc:	d001      	beq.n	1a8e2 <vTaskDelay+0x1e>
   1a8de:	b672      	cpsid	i
   1a8e0:	e7fe      	b.n	1a8e0 <vTaskDelay+0x1c>
			vTaskSuspendAll();
   1a8e2:	4b25      	ldr	r3, [pc, #148]	; (1a978 <vTaskDelay+0xb4>)
   1a8e4:	4798      	blx	r3
			{
				traceTASK_DELAY();
   1a8e6:	4b25      	ldr	r3, [pc, #148]	; (1a97c <vTaskDelay+0xb8>)
   1a8e8:	681b      	ldr	r3, [r3, #0]
   1a8ea:	0018      	movs	r0, r3
   1a8ec:	4b24      	ldr	r3, [pc, #144]	; (1a980 <vTaskDelay+0xbc>)
   1a8ee:	4798      	blx	r3
   1a8f0:	0003      	movs	r3, r0
   1a8f2:	001a      	movs	r2, r3
   1a8f4:	4b23      	ldr	r3, [pc, #140]	; (1a984 <vTaskDelay+0xc0>)
   1a8f6:	881b      	ldrh	r3, [r3, #0]
   1a8f8:	4013      	ands	r3, r2
   1a8fa:	b29b      	uxth	r3, r3
   1a8fc:	2b00      	cmp	r3, #0
   1a8fe:	d00e      	beq.n	1a91e <vTaskDelay+0x5a>
   1a900:	687b      	ldr	r3, [r7, #4]
   1a902:	0019      	movs	r1, r3
   1a904:	2089      	movs	r0, #137	; 0x89
   1a906:	4b20      	ldr	r3, [pc, #128]	; (1a988 <vTaskDelay+0xc4>)
   1a908:	4798      	blx	r3
   1a90a:	4b1c      	ldr	r3, [pc, #112]	; (1a97c <vTaskDelay+0xb8>)
   1a90c:	681b      	ldr	r3, [r3, #0]
   1a90e:	0018      	movs	r0, r3
   1a910:	4b1e      	ldr	r3, [pc, #120]	; (1a98c <vTaskDelay+0xc8>)
   1a912:	4798      	blx	r3
   1a914:	0003      	movs	r3, r0
   1a916:	b2db      	uxtb	r3, r3
   1a918:	0018      	movs	r0, r3
   1a91a:	4b1d      	ldr	r3, [pc, #116]	; (1a990 <vTaskDelay+0xcc>)
   1a91c:	4798      	blx	r3
   1a91e:	4b1d      	ldr	r3, [pc, #116]	; (1a994 <vTaskDelay+0xd0>)
   1a920:	4798      	blx	r3
   1a922:	0003      	movs	r3, r0
   1a924:	0018      	movs	r0, r3
   1a926:	4b16      	ldr	r3, [pc, #88]	; (1a980 <vTaskDelay+0xbc>)
   1a928:	4798      	blx	r3
   1a92a:	0003      	movs	r3, r0
   1a92c:	001a      	movs	r2, r3
   1a92e:	4b15      	ldr	r3, [pc, #84]	; (1a984 <vTaskDelay+0xc0>)
   1a930:	881b      	ldrh	r3, [r3, #0]
   1a932:	4013      	ands	r3, r2
   1a934:	b29b      	uxth	r3, r3
   1a936:	2b00      	cmp	r3, #0
   1a938:	d00a      	beq.n	1a950 <vTaskDelay+0x8c>
   1a93a:	4b16      	ldr	r3, [pc, #88]	; (1a994 <vTaskDelay+0xd0>)
   1a93c:	4798      	blx	r3
   1a93e:	0003      	movs	r3, r0
   1a940:	0018      	movs	r0, r3
   1a942:	4b12      	ldr	r3, [pc, #72]	; (1a98c <vTaskDelay+0xc8>)
   1a944:	4798      	blx	r3
   1a946:	0003      	movs	r3, r0
   1a948:	b2db      	uxtb	r3, r3
   1a94a:	0018      	movs	r0, r3
   1a94c:	4b10      	ldr	r3, [pc, #64]	; (1a990 <vTaskDelay+0xcc>)
   1a94e:	4798      	blx	r3
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
   1a950:	687b      	ldr	r3, [r7, #4]
   1a952:	2100      	movs	r1, #0
   1a954:	0018      	movs	r0, r3
   1a956:	4b10      	ldr	r3, [pc, #64]	; (1a998 <vTaskDelay+0xd4>)
   1a958:	4798      	blx	r3
			}
			xAlreadyYielded = xTaskResumeAll();
   1a95a:	4b10      	ldr	r3, [pc, #64]	; (1a99c <vTaskDelay+0xd8>)
   1a95c:	4798      	blx	r3
   1a95e:	0003      	movs	r3, r0
   1a960:	60fb      	str	r3, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
   1a962:	68fb      	ldr	r3, [r7, #12]
   1a964:	2b00      	cmp	r3, #0
   1a966:	d101      	bne.n	1a96c <vTaskDelay+0xa8>
		{
			portYIELD_WITHIN_API();
   1a968:	4b0d      	ldr	r3, [pc, #52]	; (1a9a0 <vTaskDelay+0xdc>)
   1a96a:	4798      	blx	r3
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
   1a96c:	46c0      	nop			; (mov r8, r8)
   1a96e:	46bd      	mov	sp, r7
   1a970:	b004      	add	sp, #16
   1a972:	bd80      	pop	{r7, pc}
   1a974:	20003c78 	.word	0x20003c78
   1a978:	0001ab85 	.word	0x0001ab85
   1a97c:	20003b78 	.word	0x20003b78
   1a980:	000168c1 	.word	0x000168c1
   1a984:	20000120 	.word	0x20000120
   1a988:	000175c1 	.word	0x000175c1
   1a98c:	000168a1 	.word	0x000168a1
   1a990:	00017a51 	.word	0x00017a51
   1a994:	00016b5d 	.word	0x00016b5d
   1a998:	0001badd 	.word	0x0001badd
   1a99c:	0001ab9d 	.word	0x0001ab9d
   1a9a0:	000188b1 	.word	0x000188b1

0001a9a4 <vTaskSuspend>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskSuspend( TaskHandle_t xTaskToSuspend )
	{
   1a9a4:	b580      	push	{r7, lr}
   1a9a6:	b084      	sub	sp, #16
   1a9a8:	af00      	add	r7, sp, #0
   1a9aa:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
   1a9ac:	4b42      	ldr	r3, [pc, #264]	; (1aab8 <vTaskSuspend+0x114>)
   1a9ae:	4798      	blx	r3
		{
			/* If null is passed in here then it is the running task that is
			being suspended. */
			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
   1a9b0:	687b      	ldr	r3, [r7, #4]
   1a9b2:	2b00      	cmp	r3, #0
   1a9b4:	d102      	bne.n	1a9bc <vTaskSuspend+0x18>
   1a9b6:	4b41      	ldr	r3, [pc, #260]	; (1aabc <vTaskSuspend+0x118>)
   1a9b8:	681b      	ldr	r3, [r3, #0]
   1a9ba:	e000      	b.n	1a9be <vTaskSuspend+0x1a>
   1a9bc:	687b      	ldr	r3, [r7, #4]
   1a9be:	60fb      	str	r3, [r7, #12]

			traceTASK_SUSPEND( pxTCB );
   1a9c0:	4b3f      	ldr	r3, [pc, #252]	; (1aac0 <vTaskSuspend+0x11c>)
   1a9c2:	4798      	blx	r3
   1a9c4:	0003      	movs	r3, r0
   1a9c6:	0018      	movs	r0, r3
   1a9c8:	4b3e      	ldr	r3, [pc, #248]	; (1aac4 <vTaskSuspend+0x120>)
   1a9ca:	4798      	blx	r3
   1a9cc:	0003      	movs	r3, r0
   1a9ce:	001a      	movs	r2, r3
   1a9d0:	4b3d      	ldr	r3, [pc, #244]	; (1aac8 <vTaskSuspend+0x124>)
   1a9d2:	881b      	ldrh	r3, [r3, #0]
   1a9d4:	4013      	ands	r3, r2
   1a9d6:	b29b      	uxth	r3, r3
   1a9d8:	2b00      	cmp	r3, #0
   1a9da:	d016      	beq.n	1aa0a <vTaskSuspend+0x66>
   1a9dc:	68fb      	ldr	r3, [r7, #12]
   1a9de:	0018      	movs	r0, r3
   1a9e0:	4b38      	ldr	r3, [pc, #224]	; (1aac4 <vTaskSuspend+0x120>)
   1a9e2:	4798      	blx	r3
   1a9e4:	0003      	movs	r3, r0
   1a9e6:	001a      	movs	r2, r3
   1a9e8:	4b37      	ldr	r3, [pc, #220]	; (1aac8 <vTaskSuspend+0x124>)
   1a9ea:	881b      	ldrh	r3, [r3, #0]
   1a9ec:	4013      	ands	r3, r2
   1a9ee:	b29b      	uxth	r3, r3
   1a9f0:	2b00      	cmp	r3, #0
   1a9f2:	d00a      	beq.n	1aa0a <vTaskSuspend+0x66>
   1a9f4:	68fb      	ldr	r3, [r7, #12]
   1a9f6:	0018      	movs	r0, r3
   1a9f8:	4b34      	ldr	r3, [pc, #208]	; (1aacc <vTaskSuspend+0x128>)
   1a9fa:	4798      	blx	r3
   1a9fc:	0003      	movs	r3, r0
   1a9fe:	b2db      	uxtb	r3, r3
   1aa00:	001a      	movs	r2, r3
   1aa02:	2103      	movs	r1, #3
   1aa04:	208a      	movs	r0, #138	; 0x8a
   1aa06:	4b32      	ldr	r3, [pc, #200]	; (1aad0 <vTaskSuspend+0x12c>)
   1aa08:	4798      	blx	r3
   1aa0a:	68fb      	ldr	r3, [r7, #12]
   1aa0c:	0018      	movs	r0, r3
   1aa0e:	4b2f      	ldr	r3, [pc, #188]	; (1aacc <vTaskSuspend+0x128>)
   1aa10:	4798      	blx	r3
   1aa12:	0003      	movs	r3, r0
   1aa14:	b2db      	uxtb	r3, r3
   1aa16:	0018      	movs	r0, r3
   1aa18:	4b2e      	ldr	r3, [pc, #184]	; (1aad4 <vTaskSuspend+0x130>)
   1aa1a:	4798      	blx	r3

			/* Remove task from the ready/delayed list and place in the
			suspended list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
   1aa1c:	68fb      	ldr	r3, [r7, #12]
   1aa1e:	3304      	adds	r3, #4
   1aa20:	0018      	movs	r0, r3
   1aa22:	4b2d      	ldr	r3, [pc, #180]	; (1aad8 <vTaskSuspend+0x134>)
   1aa24:	4798      	blx	r3
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
   1aa26:	68fb      	ldr	r3, [r7, #12]
   1aa28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   1aa2a:	2b00      	cmp	r3, #0
   1aa2c:	d004      	beq.n	1aa38 <vTaskSuspend+0x94>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
   1aa2e:	68fb      	ldr	r3, [r7, #12]
   1aa30:	3318      	adds	r3, #24
   1aa32:	0018      	movs	r0, r3
   1aa34:	4b28      	ldr	r3, [pc, #160]	; (1aad8 <vTaskSuspend+0x134>)
   1aa36:	4798      	blx	r3
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
   1aa38:	68fb      	ldr	r3, [r7, #12]
   1aa3a:	1d1a      	adds	r2, r3, #4
   1aa3c:	4b27      	ldr	r3, [pc, #156]	; (1aadc <vTaskSuspend+0x138>)
   1aa3e:	0011      	movs	r1, r2
   1aa40:	0018      	movs	r0, r3
   1aa42:	4b27      	ldr	r3, [pc, #156]	; (1aae0 <vTaskSuspend+0x13c>)
   1aa44:	4798      	blx	r3

			#if( configUSE_TASK_NOTIFICATIONS == 1 )
			{
				if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
   1aa46:	68fb      	ldr	r3, [r7, #12]
   1aa48:	2250      	movs	r2, #80	; 0x50
   1aa4a:	5c9b      	ldrb	r3, [r3, r2]
   1aa4c:	b2db      	uxtb	r3, r3
   1aa4e:	2b01      	cmp	r3, #1
   1aa50:	d103      	bne.n	1aa5a <vTaskSuspend+0xb6>
				{
					/* The task was blocked to wait for a notification, but is
					now suspended, so no notification was received. */
					pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
   1aa52:	68fb      	ldr	r3, [r7, #12]
   1aa54:	2250      	movs	r2, #80	; 0x50
   1aa56:	2100      	movs	r1, #0
   1aa58:	5499      	strb	r1, [r3, r2]
				}
			}
			#endif
		}
		taskEXIT_CRITICAL();
   1aa5a:	4b22      	ldr	r3, [pc, #136]	; (1aae4 <vTaskSuspend+0x140>)
   1aa5c:	4798      	blx	r3

		if( xSchedulerRunning != pdFALSE )
   1aa5e:	4b22      	ldr	r3, [pc, #136]	; (1aae8 <vTaskSuspend+0x144>)
   1aa60:	681b      	ldr	r3, [r3, #0]
   1aa62:	2b00      	cmp	r3, #0
   1aa64:	d005      	beq.n	1aa72 <vTaskSuspend+0xce>
		{
			/* Reset the next expected unblock time in case it referred to the
			task that is now in the Suspended state. */
			taskENTER_CRITICAL();
   1aa66:	4b14      	ldr	r3, [pc, #80]	; (1aab8 <vTaskSuspend+0x114>)
   1aa68:	4798      	blx	r3
			{
				prvResetNextTaskUnblockTime();
   1aa6a:	4b20      	ldr	r3, [pc, #128]	; (1aaec <vTaskSuspend+0x148>)
   1aa6c:	4798      	blx	r3
			}
			taskEXIT_CRITICAL();
   1aa6e:	4b1d      	ldr	r3, [pc, #116]	; (1aae4 <vTaskSuspend+0x140>)
   1aa70:	4798      	blx	r3
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( pxTCB == pxCurrentTCB )
   1aa72:	4b12      	ldr	r3, [pc, #72]	; (1aabc <vTaskSuspend+0x118>)
   1aa74:	681b      	ldr	r3, [r3, #0]
   1aa76:	68fa      	ldr	r2, [r7, #12]
   1aa78:	429a      	cmp	r2, r3
   1aa7a:	d118      	bne.n	1aaae <vTaskSuspend+0x10a>
		{
			if( xSchedulerRunning != pdFALSE )
   1aa7c:	4b1a      	ldr	r3, [pc, #104]	; (1aae8 <vTaskSuspend+0x144>)
   1aa7e:	681b      	ldr	r3, [r3, #0]
   1aa80:	2b00      	cmp	r3, #0
   1aa82:	d008      	beq.n	1aa96 <vTaskSuspend+0xf2>
			{
				/* The current task has just been suspended. */
				configASSERT( uxSchedulerSuspended == 0 );
   1aa84:	4b1a      	ldr	r3, [pc, #104]	; (1aaf0 <vTaskSuspend+0x14c>)
   1aa86:	681b      	ldr	r3, [r3, #0]
   1aa88:	2b00      	cmp	r3, #0
   1aa8a:	d001      	beq.n	1aa90 <vTaskSuspend+0xec>
   1aa8c:	b672      	cpsid	i
   1aa8e:	e7fe      	b.n	1aa8e <vTaskSuspend+0xea>
				portYIELD_WITHIN_API();
   1aa90:	4b18      	ldr	r3, [pc, #96]	; (1aaf4 <vTaskSuspend+0x150>)
   1aa92:	4798      	blx	r3
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
   1aa94:	e00b      	b.n	1aaae <vTaskSuspend+0x10a>
				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks )
   1aa96:	4b11      	ldr	r3, [pc, #68]	; (1aadc <vTaskSuspend+0x138>)
   1aa98:	681a      	ldr	r2, [r3, #0]
   1aa9a:	4b17      	ldr	r3, [pc, #92]	; (1aaf8 <vTaskSuspend+0x154>)
   1aa9c:	681b      	ldr	r3, [r3, #0]
   1aa9e:	429a      	cmp	r2, r3
   1aaa0:	d103      	bne.n	1aaaa <vTaskSuspend+0x106>
					pxCurrentTCB = NULL;
   1aaa2:	4b06      	ldr	r3, [pc, #24]	; (1aabc <vTaskSuspend+0x118>)
   1aaa4:	2200      	movs	r2, #0
   1aaa6:	601a      	str	r2, [r3, #0]
	}
   1aaa8:	e001      	b.n	1aaae <vTaskSuspend+0x10a>
					vTaskSwitchContext();
   1aaaa:	4b14      	ldr	r3, [pc, #80]	; (1aafc <vTaskSuspend+0x158>)
   1aaac:	4798      	blx	r3
	}
   1aaae:	46c0      	nop			; (mov r8, r8)
   1aab0:	46bd      	mov	sp, r7
   1aab2:	b004      	add	sp, #16
   1aab4:	bd80      	pop	{r7, pc}
   1aab6:	46c0      	nop			; (mov r8, r8)
   1aab8:	000188c9 	.word	0x000188c9
   1aabc:	20003b78 	.word	0x20003b78
   1aac0:	00016b5d 	.word	0x00016b5d
   1aac4:	000168c1 	.word	0x000168c1
   1aac8:	20000120 	.word	0x20000120
   1aacc:	000168a1 	.word	0x000168a1
   1aad0:	000172b9 	.word	0x000172b9
   1aad4:	00017a51 	.word	0x00017a51
   1aad8:	0001873b 	.word	0x0001873b
   1aadc:	20003c3c 	.word	0x20003c3c
   1aae0:	0001868b 	.word	0x0001868b
   1aae4:	000188ed 	.word	0x000188ed
   1aae8:	20003c5c 	.word	0x20003c5c
   1aaec:	0001b589 	.word	0x0001b589
   1aaf0:	20003c78 	.word	0x20003c78
   1aaf4:	000188b1 	.word	0x000188b1
   1aaf8:	20003c50 	.word	0x20003c50
   1aafc:	0001af19 	.word	0x0001af19

0001ab00 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
   1ab00:	b590      	push	{r4, r7, lr}
   1ab02:	b085      	sub	sp, #20
   1ab04:	af02      	add	r7, sp, #8
		}
	}
	#else
	{
		/* The Idle task is being created using dynamically allocated RAM. */
		xReturn = xTaskCreate(	prvIdleTask,
   1ab06:	4916      	ldr	r1, [pc, #88]	; (1ab60 <vTaskStartScheduler+0x60>)
   1ab08:	4816      	ldr	r0, [pc, #88]	; (1ab64 <vTaskStartScheduler+0x64>)
   1ab0a:	4b17      	ldr	r3, [pc, #92]	; (1ab68 <vTaskStartScheduler+0x68>)
   1ab0c:	9301      	str	r3, [sp, #4]
   1ab0e:	2300      	movs	r3, #0
   1ab10:	9300      	str	r3, [sp, #0]
   1ab12:	2300      	movs	r3, #0
   1ab14:	2264      	movs	r2, #100	; 0x64
   1ab16:	4c15      	ldr	r4, [pc, #84]	; (1ab6c <vTaskStartScheduler+0x6c>)
   1ab18:	47a0      	blx	r4
   1ab1a:	0003      	movs	r3, r0
   1ab1c:	607b      	str	r3, [r7, #4]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
   1ab1e:	687b      	ldr	r3, [r7, #4]
   1ab20:	2b01      	cmp	r3, #1
   1ab22:	d103      	bne.n	1ab2c <vTaskStartScheduler+0x2c>
		{
			xReturn = xTimerCreateTimerTask();
   1ab24:	4b12      	ldr	r3, [pc, #72]	; (1ab70 <vTaskStartScheduler+0x70>)
   1ab26:	4798      	blx	r3
   1ab28:	0003      	movs	r3, r0
   1ab2a:	607b      	str	r3, [r7, #4]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
   1ab2c:	687b      	ldr	r3, [r7, #4]
   1ab2e:	2b01      	cmp	r3, #1
   1ab30:	d10d      	bne.n	1ab4e <vTaskStartScheduler+0x4e>
		/* Interrupts are turned off here, to ensure a tick does not occur
		before or during the call to xPortStartScheduler().  The stacks of
		the created tasks contain a status word with interrupts switched on
		so interrupts will automatically get re-enabled when the first task
		starts to run. */
		portDISABLE_INTERRUPTS();
   1ab32:	b672      	cpsid	i
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
   1ab34:	4b0f      	ldr	r3, [pc, #60]	; (1ab74 <vTaskStartScheduler+0x74>)
   1ab36:	2201      	movs	r2, #1
   1ab38:	4252      	negs	r2, r2
   1ab3a:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
   1ab3c:	4b0e      	ldr	r3, [pc, #56]	; (1ab78 <vTaskStartScheduler+0x78>)
   1ab3e:	2201      	movs	r2, #1
   1ab40:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
   1ab42:	4b0e      	ldr	r3, [pc, #56]	; (1ab7c <vTaskStartScheduler+0x7c>)
   1ab44:	2200      	movs	r2, #0
   1ab46:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
   1ab48:	4b0d      	ldr	r3, [pc, #52]	; (1ab80 <vTaskStartScheduler+0x80>)
   1ab4a:	4798      	blx	r3
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
   1ab4c:	e004      	b.n	1ab58 <vTaskStartScheduler+0x58>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
   1ab4e:	687b      	ldr	r3, [r7, #4]
   1ab50:	3301      	adds	r3, #1
   1ab52:	d101      	bne.n	1ab58 <vTaskStartScheduler+0x58>
   1ab54:	b672      	cpsid	i
   1ab56:	e7fe      	b.n	1ab56 <vTaskStartScheduler+0x56>
}
   1ab58:	46c0      	nop			; (mov r8, r8)
   1ab5a:	46bd      	mov	sp, r7
   1ab5c:	b003      	add	sp, #12
   1ab5e:	bd90      	pop	{r4, r7, pc}
   1ab60:	000366b8 	.word	0x000366b8
   1ab64:	0001b3d1 	.word	0x0001b3d1
   1ab68:	20003c74 	.word	0x20003c74
   1ab6c:	0001a529 	.word	0x0001a529
   1ab70:	0001bb91 	.word	0x0001bb91
   1ab74:	20003c70 	.word	0x20003c70
   1ab78:	20003c5c 	.word	0x20003c5c
   1ab7c:	20003c54 	.word	0x20003c54
   1ab80:	00018859 	.word	0x00018859

0001ab84 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
   1ab84:	b580      	push	{r7, lr}
   1ab86:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
   1ab88:	4b03      	ldr	r3, [pc, #12]	; (1ab98 <vTaskSuspendAll+0x14>)
   1ab8a:	681b      	ldr	r3, [r3, #0]
   1ab8c:	1c5a      	adds	r2, r3, #1
   1ab8e:	4b02      	ldr	r3, [pc, #8]	; (1ab98 <vTaskSuspendAll+0x14>)
   1ab90:	601a      	str	r2, [r3, #0]
}
   1ab92:	46c0      	nop			; (mov r8, r8)
   1ab94:	46bd      	mov	sp, r7
   1ab96:	bd80      	pop	{r7, pc}
   1ab98:	20003c78 	.word	0x20003c78

0001ab9c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
   1ab9c:	b580      	push	{r7, lr}
   1ab9e:	b084      	sub	sp, #16
   1aba0:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
   1aba2:	2300      	movs	r3, #0
   1aba4:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
   1aba6:	2300      	movs	r3, #0
   1aba8:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
   1abaa:	4b45      	ldr	r3, [pc, #276]	; (1acc0 <xTaskResumeAll+0x124>)
   1abac:	681b      	ldr	r3, [r3, #0]
   1abae:	2b00      	cmp	r3, #0
   1abb0:	d101      	bne.n	1abb6 <xTaskResumeAll+0x1a>
   1abb2:	b672      	cpsid	i
   1abb4:	e7fe      	b.n	1abb4 <xTaskResumeAll+0x18>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
   1abb6:	4b43      	ldr	r3, [pc, #268]	; (1acc4 <xTaskResumeAll+0x128>)
   1abb8:	4798      	blx	r3
	{
		--uxSchedulerSuspended;
   1abba:	4b41      	ldr	r3, [pc, #260]	; (1acc0 <xTaskResumeAll+0x124>)
   1abbc:	681b      	ldr	r3, [r3, #0]
   1abbe:	1e5a      	subs	r2, r3, #1
   1abc0:	4b3f      	ldr	r3, [pc, #252]	; (1acc0 <xTaskResumeAll+0x124>)
   1abc2:	601a      	str	r2, [r3, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
   1abc4:	4b3e      	ldr	r3, [pc, #248]	; (1acc0 <xTaskResumeAll+0x124>)
   1abc6:	681b      	ldr	r3, [r3, #0]
   1abc8:	2b00      	cmp	r3, #0
   1abca:	d000      	beq.n	1abce <xTaskResumeAll+0x32>
   1abcc:	e071      	b.n	1acb2 <xTaskResumeAll+0x116>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
   1abce:	4b3e      	ldr	r3, [pc, #248]	; (1acc8 <xTaskResumeAll+0x12c>)
   1abd0:	681b      	ldr	r3, [r3, #0]
   1abd2:	2b00      	cmp	r3, #0
   1abd4:	d100      	bne.n	1abd8 <xTaskResumeAll+0x3c>
   1abd6:	e06c      	b.n	1acb2 <xTaskResumeAll+0x116>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
   1abd8:	e044      	b.n	1ac64 <xTaskResumeAll+0xc8>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
   1abda:	4b3c      	ldr	r3, [pc, #240]	; (1accc <xTaskResumeAll+0x130>)
   1abdc:	68db      	ldr	r3, [r3, #12]
   1abde:	68db      	ldr	r3, [r3, #12]
   1abe0:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
   1abe2:	68fb      	ldr	r3, [r7, #12]
   1abe4:	3318      	adds	r3, #24
   1abe6:	0018      	movs	r0, r3
   1abe8:	4b39      	ldr	r3, [pc, #228]	; (1acd0 <xTaskResumeAll+0x134>)
   1abea:	4798      	blx	r3
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
   1abec:	68fb      	ldr	r3, [r7, #12]
   1abee:	3304      	adds	r3, #4
   1abf0:	0018      	movs	r0, r3
   1abf2:	4b37      	ldr	r3, [pc, #220]	; (1acd0 <xTaskResumeAll+0x134>)
   1abf4:	4798      	blx	r3
					prvAddTaskToReadyList( pxTCB );
   1abf6:	68fb      	ldr	r3, [r7, #12]
   1abf8:	0018      	movs	r0, r3
   1abfa:	4b36      	ldr	r3, [pc, #216]	; (1acd4 <xTaskResumeAll+0x138>)
   1abfc:	4798      	blx	r3
   1abfe:	0003      	movs	r3, r0
   1ac00:	001a      	movs	r2, r3
   1ac02:	4b35      	ldr	r3, [pc, #212]	; (1acd8 <xTaskResumeAll+0x13c>)
   1ac04:	881b      	ldrh	r3, [r3, #0]
   1ac06:	4013      	ands	r3, r2
   1ac08:	b29b      	uxth	r3, r3
   1ac0a:	2b00      	cmp	r3, #0
   1ac0c:	d008      	beq.n	1ac20 <xTaskResumeAll+0x84>
   1ac0e:	68fb      	ldr	r3, [r7, #12]
   1ac10:	0018      	movs	r0, r3
   1ac12:	4b32      	ldr	r3, [pc, #200]	; (1acdc <xTaskResumeAll+0x140>)
   1ac14:	4798      	blx	r3
   1ac16:	0003      	movs	r3, r0
   1ac18:	b2db      	uxtb	r3, r3
   1ac1a:	0018      	movs	r0, r3
   1ac1c:	4b30      	ldr	r3, [pc, #192]	; (1ace0 <xTaskResumeAll+0x144>)
   1ac1e:	4798      	blx	r3
   1ac20:	68fb      	ldr	r3, [r7, #12]
   1ac22:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1ac24:	4b2f      	ldr	r3, [pc, #188]	; (1ace4 <xTaskResumeAll+0x148>)
   1ac26:	681b      	ldr	r3, [r3, #0]
   1ac28:	429a      	cmp	r2, r3
   1ac2a:	d903      	bls.n	1ac34 <xTaskResumeAll+0x98>
   1ac2c:	68fb      	ldr	r3, [r7, #12]
   1ac2e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1ac30:	4b2c      	ldr	r3, [pc, #176]	; (1ace4 <xTaskResumeAll+0x148>)
   1ac32:	601a      	str	r2, [r3, #0]
   1ac34:	68fb      	ldr	r3, [r7, #12]
   1ac36:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1ac38:	0013      	movs	r3, r2
   1ac3a:	009b      	lsls	r3, r3, #2
   1ac3c:	189b      	adds	r3, r3, r2
   1ac3e:	009b      	lsls	r3, r3, #2
   1ac40:	4a29      	ldr	r2, [pc, #164]	; (1ace8 <xTaskResumeAll+0x14c>)
   1ac42:	189a      	adds	r2, r3, r2
   1ac44:	68fb      	ldr	r3, [r7, #12]
   1ac46:	3304      	adds	r3, #4
   1ac48:	0019      	movs	r1, r3
   1ac4a:	0010      	movs	r0, r2
   1ac4c:	4b27      	ldr	r3, [pc, #156]	; (1acec <xTaskResumeAll+0x150>)
   1ac4e:	4798      	blx	r3

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
   1ac50:	68fb      	ldr	r3, [r7, #12]
   1ac52:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1ac54:	4b26      	ldr	r3, [pc, #152]	; (1acf0 <xTaskResumeAll+0x154>)
   1ac56:	681b      	ldr	r3, [r3, #0]
   1ac58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   1ac5a:	429a      	cmp	r2, r3
   1ac5c:	d302      	bcc.n	1ac64 <xTaskResumeAll+0xc8>
					{
						xYieldPending = pdTRUE;
   1ac5e:	4b25      	ldr	r3, [pc, #148]	; (1acf4 <xTaskResumeAll+0x158>)
   1ac60:	2201      	movs	r2, #1
   1ac62:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
   1ac64:	4b19      	ldr	r3, [pc, #100]	; (1accc <xTaskResumeAll+0x130>)
   1ac66:	681b      	ldr	r3, [r3, #0]
   1ac68:	2b00      	cmp	r3, #0
   1ac6a:	d1b6      	bne.n	1abda <xTaskResumeAll+0x3e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
   1ac6c:	68fb      	ldr	r3, [r7, #12]
   1ac6e:	2b00      	cmp	r3, #0
   1ac70:	d001      	beq.n	1ac76 <xTaskResumeAll+0xda>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
   1ac72:	4b21      	ldr	r3, [pc, #132]	; (1acf8 <xTaskResumeAll+0x15c>)
   1ac74:	4798      	blx	r3
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
   1ac76:	4b21      	ldr	r3, [pc, #132]	; (1acfc <xTaskResumeAll+0x160>)
   1ac78:	681b      	ldr	r3, [r3, #0]
   1ac7a:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
   1ac7c:	687b      	ldr	r3, [r7, #4]
   1ac7e:	2b00      	cmp	r3, #0
   1ac80:	d00f      	beq.n	1aca2 <xTaskResumeAll+0x106>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
   1ac82:	4b1f      	ldr	r3, [pc, #124]	; (1ad00 <xTaskResumeAll+0x164>)
   1ac84:	4798      	blx	r3
   1ac86:	1e03      	subs	r3, r0, #0
   1ac88:	d002      	beq.n	1ac90 <xTaskResumeAll+0xf4>
							{
								xYieldPending = pdTRUE;
   1ac8a:	4b1a      	ldr	r3, [pc, #104]	; (1acf4 <xTaskResumeAll+0x158>)
   1ac8c:	2201      	movs	r2, #1
   1ac8e:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
   1ac90:	687b      	ldr	r3, [r7, #4]
   1ac92:	3b01      	subs	r3, #1
   1ac94:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
   1ac96:	687b      	ldr	r3, [r7, #4]
   1ac98:	2b00      	cmp	r3, #0
   1ac9a:	d1f2      	bne.n	1ac82 <xTaskResumeAll+0xe6>

						uxPendedTicks = 0;
   1ac9c:	4b17      	ldr	r3, [pc, #92]	; (1acfc <xTaskResumeAll+0x160>)
   1ac9e:	2200      	movs	r2, #0
   1aca0:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
   1aca2:	4b14      	ldr	r3, [pc, #80]	; (1acf4 <xTaskResumeAll+0x158>)
   1aca4:	681b      	ldr	r3, [r3, #0]
   1aca6:	2b00      	cmp	r3, #0
   1aca8:	d003      	beq.n	1acb2 <xTaskResumeAll+0x116>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
   1acaa:	2301      	movs	r3, #1
   1acac:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
   1acae:	4b15      	ldr	r3, [pc, #84]	; (1ad04 <xTaskResumeAll+0x168>)
   1acb0:	4798      	blx	r3
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
   1acb2:	4b15      	ldr	r3, [pc, #84]	; (1ad08 <xTaskResumeAll+0x16c>)
   1acb4:	4798      	blx	r3

	return xAlreadyYielded;
   1acb6:	68bb      	ldr	r3, [r7, #8]
}
   1acb8:	0018      	movs	r0, r3
   1acba:	46bd      	mov	sp, r7
   1acbc:	b004      	add	sp, #16
   1acbe:	bd80      	pop	{r7, pc}
   1acc0:	20003c78 	.word	0x20003c78
   1acc4:	000188c9 	.word	0x000188c9
   1acc8:	20003c50 	.word	0x20003c50
   1accc:	20003c10 	.word	0x20003c10
   1acd0:	0001873b 	.word	0x0001873b
   1acd4:	000168c1 	.word	0x000168c1
   1acd8:	20000120 	.word	0x20000120
   1acdc:	000168a1 	.word	0x000168a1
   1ace0:	00017071 	.word	0x00017071
   1ace4:	20003c58 	.word	0x20003c58
   1ace8:	20003b7c 	.word	0x20003b7c
   1acec:	0001868b 	.word	0x0001868b
   1acf0:	20003b78 	.word	0x20003b78
   1acf4:	20003c64 	.word	0x20003c64
   1acf8:	0001b589 	.word	0x0001b589
   1acfc:	20003c60 	.word	0x20003c60
   1ad00:	0001ad29 	.word	0x0001ad29
   1ad04:	000188b1 	.word	0x000188b1
   1ad08:	000188ed 	.word	0x000188ed

0001ad0c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
   1ad0c:	b580      	push	{r7, lr}
   1ad0e:	b082      	sub	sp, #8
   1ad10:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
   1ad12:	4b04      	ldr	r3, [pc, #16]	; (1ad24 <xTaskGetTickCount+0x18>)
   1ad14:	681b      	ldr	r3, [r3, #0]
   1ad16:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
   1ad18:	687b      	ldr	r3, [r7, #4]
}
   1ad1a:	0018      	movs	r0, r3
   1ad1c:	46bd      	mov	sp, r7
   1ad1e:	b002      	add	sp, #8
   1ad20:	bd80      	pop	{r7, pc}
   1ad22:	46c0      	nop			; (mov r8, r8)
   1ad24:	20003c54 	.word	0x20003c54

0001ad28 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
   1ad28:	b580      	push	{r7, lr}
   1ad2a:	b086      	sub	sp, #24
   1ad2c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
   1ad2e:	2300      	movs	r3, #0
   1ad30:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
   1ad32:	4b64      	ldr	r3, [pc, #400]	; (1aec4 <xTaskIncrementTick+0x19c>)
   1ad34:	681b      	ldr	r3, [r3, #0]
   1ad36:	2b01      	cmp	r3, #1
   1ad38:	d003      	beq.n	1ad42 <xTaskIncrementTick+0x1a>
   1ad3a:	4b63      	ldr	r3, [pc, #396]	; (1aec8 <xTaskIncrementTick+0x1a0>)
   1ad3c:	681b      	ldr	r3, [r3, #0]
   1ad3e:	2b00      	cmp	r3, #0
   1ad40:	d107      	bne.n	1ad52 <xTaskIncrementTick+0x2a>
   1ad42:	4b62      	ldr	r3, [pc, #392]	; (1aecc <xTaskIncrementTick+0x1a4>)
   1ad44:	681b      	ldr	r3, [r3, #0]
   1ad46:	1c5a      	adds	r2, r3, #1
   1ad48:	4b60      	ldr	r3, [pc, #384]	; (1aecc <xTaskIncrementTick+0x1a4>)
   1ad4a:	601a      	str	r2, [r3, #0]
   1ad4c:	2000      	movs	r0, #0
   1ad4e:	4b60      	ldr	r3, [pc, #384]	; (1aed0 <xTaskIncrementTick+0x1a8>)
   1ad50:	4798      	blx	r3
   1ad52:	4b5c      	ldr	r3, [pc, #368]	; (1aec4 <xTaskIncrementTick+0x19c>)
   1ad54:	681b      	ldr	r3, [r3, #0]
   1ad56:	2b00      	cmp	r3, #0
   1ad58:	d106      	bne.n	1ad68 <xTaskIncrementTick+0x40>
   1ad5a:	4b5e      	ldr	r3, [pc, #376]	; (1aed4 <xTaskIncrementTick+0x1ac>)
   1ad5c:	681b      	ldr	r3, [r3, #0]
   1ad5e:	3301      	adds	r3, #1
   1ad60:	0019      	movs	r1, r3
   1ad62:	2003      	movs	r0, #3
   1ad64:	4b5c      	ldr	r3, [pc, #368]	; (1aed8 <xTaskIncrementTick+0x1b0>)
   1ad66:	4798      	blx	r3
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
   1ad68:	4b56      	ldr	r3, [pc, #344]	; (1aec4 <xTaskIncrementTick+0x19c>)
   1ad6a:	681b      	ldr	r3, [r3, #0]
   1ad6c:	2b00      	cmp	r3, #0
   1ad6e:	d000      	beq.n	1ad72 <xTaskIncrementTick+0x4a>
   1ad70:	e098      	b.n	1aea4 <xTaskIncrementTick+0x17c>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
   1ad72:	4b58      	ldr	r3, [pc, #352]	; (1aed4 <xTaskIncrementTick+0x1ac>)
   1ad74:	681b      	ldr	r3, [r3, #0]
   1ad76:	3301      	adds	r3, #1
   1ad78:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
   1ad7a:	4b56      	ldr	r3, [pc, #344]	; (1aed4 <xTaskIncrementTick+0x1ac>)
   1ad7c:	693a      	ldr	r2, [r7, #16]
   1ad7e:	601a      	str	r2, [r3, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
   1ad80:	693b      	ldr	r3, [r7, #16]
   1ad82:	2b00      	cmp	r3, #0
   1ad84:	d117      	bne.n	1adb6 <xTaskIncrementTick+0x8e>
		{
			taskSWITCH_DELAYED_LISTS();
   1ad86:	4b55      	ldr	r3, [pc, #340]	; (1aedc <xTaskIncrementTick+0x1b4>)
   1ad88:	681b      	ldr	r3, [r3, #0]
   1ad8a:	681b      	ldr	r3, [r3, #0]
   1ad8c:	2b00      	cmp	r3, #0
   1ad8e:	d001      	beq.n	1ad94 <xTaskIncrementTick+0x6c>
   1ad90:	b672      	cpsid	i
   1ad92:	e7fe      	b.n	1ad92 <xTaskIncrementTick+0x6a>
   1ad94:	4b51      	ldr	r3, [pc, #324]	; (1aedc <xTaskIncrementTick+0x1b4>)
   1ad96:	681b      	ldr	r3, [r3, #0]
   1ad98:	60fb      	str	r3, [r7, #12]
   1ad9a:	4b51      	ldr	r3, [pc, #324]	; (1aee0 <xTaskIncrementTick+0x1b8>)
   1ad9c:	681a      	ldr	r2, [r3, #0]
   1ad9e:	4b4f      	ldr	r3, [pc, #316]	; (1aedc <xTaskIncrementTick+0x1b4>)
   1ada0:	601a      	str	r2, [r3, #0]
   1ada2:	4b4f      	ldr	r3, [pc, #316]	; (1aee0 <xTaskIncrementTick+0x1b8>)
   1ada4:	68fa      	ldr	r2, [r7, #12]
   1ada6:	601a      	str	r2, [r3, #0]
   1ada8:	4b4e      	ldr	r3, [pc, #312]	; (1aee4 <xTaskIncrementTick+0x1bc>)
   1adaa:	681b      	ldr	r3, [r3, #0]
   1adac:	1c5a      	adds	r2, r3, #1
   1adae:	4b4d      	ldr	r3, [pc, #308]	; (1aee4 <xTaskIncrementTick+0x1bc>)
   1adb0:	601a      	str	r2, [r3, #0]
   1adb2:	4b4d      	ldr	r3, [pc, #308]	; (1aee8 <xTaskIncrementTick+0x1c0>)
   1adb4:	4798      	blx	r3

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
   1adb6:	4b4d      	ldr	r3, [pc, #308]	; (1aeec <xTaskIncrementTick+0x1c4>)
   1adb8:	681b      	ldr	r3, [r3, #0]
   1adba:	693a      	ldr	r2, [r7, #16]
   1adbc:	429a      	cmp	r2, r3
   1adbe:	d363      	bcc.n	1ae88 <xTaskIncrementTick+0x160>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
   1adc0:	4b46      	ldr	r3, [pc, #280]	; (1aedc <xTaskIncrementTick+0x1b4>)
   1adc2:	681b      	ldr	r3, [r3, #0]
   1adc4:	681b      	ldr	r3, [r3, #0]
   1adc6:	2b00      	cmp	r3, #0
   1adc8:	d101      	bne.n	1adce <xTaskIncrementTick+0xa6>
   1adca:	2301      	movs	r3, #1
   1adcc:	e000      	b.n	1add0 <xTaskIncrementTick+0xa8>
   1adce:	2300      	movs	r3, #0
   1add0:	2b00      	cmp	r3, #0
   1add2:	d004      	beq.n	1adde <xTaskIncrementTick+0xb6>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
   1add4:	4b45      	ldr	r3, [pc, #276]	; (1aeec <xTaskIncrementTick+0x1c4>)
   1add6:	2201      	movs	r2, #1
   1add8:	4252      	negs	r2, r2
   1adda:	601a      	str	r2, [r3, #0]
					break;
   1addc:	e054      	b.n	1ae88 <xTaskIncrementTick+0x160>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
   1adde:	4b3f      	ldr	r3, [pc, #252]	; (1aedc <xTaskIncrementTick+0x1b4>)
   1ade0:	681b      	ldr	r3, [r3, #0]
   1ade2:	68db      	ldr	r3, [r3, #12]
   1ade4:	68db      	ldr	r3, [r3, #12]
   1ade6:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
   1ade8:	68bb      	ldr	r3, [r7, #8]
   1adea:	685b      	ldr	r3, [r3, #4]
   1adec:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
   1adee:	693a      	ldr	r2, [r7, #16]
   1adf0:	687b      	ldr	r3, [r7, #4]
   1adf2:	429a      	cmp	r2, r3
   1adf4:	d203      	bcs.n	1adfe <xTaskIncrementTick+0xd6>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
   1adf6:	4b3d      	ldr	r3, [pc, #244]	; (1aeec <xTaskIncrementTick+0x1c4>)
   1adf8:	687a      	ldr	r2, [r7, #4]
   1adfa:	601a      	str	r2, [r3, #0]
						break;
   1adfc:	e044      	b.n	1ae88 <xTaskIncrementTick+0x160>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
   1adfe:	68bb      	ldr	r3, [r7, #8]
   1ae00:	3304      	adds	r3, #4
   1ae02:	0018      	movs	r0, r3
   1ae04:	4b3a      	ldr	r3, [pc, #232]	; (1aef0 <xTaskIncrementTick+0x1c8>)
   1ae06:	4798      	blx	r3

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
   1ae08:	68bb      	ldr	r3, [r7, #8]
   1ae0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   1ae0c:	2b00      	cmp	r3, #0
   1ae0e:	d004      	beq.n	1ae1a <xTaskIncrementTick+0xf2>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
   1ae10:	68bb      	ldr	r3, [r7, #8]
   1ae12:	3318      	adds	r3, #24
   1ae14:	0018      	movs	r0, r3
   1ae16:	4b36      	ldr	r3, [pc, #216]	; (1aef0 <xTaskIncrementTick+0x1c8>)
   1ae18:	4798      	blx	r3
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
   1ae1a:	68bb      	ldr	r3, [r7, #8]
   1ae1c:	0018      	movs	r0, r3
   1ae1e:	4b35      	ldr	r3, [pc, #212]	; (1aef4 <xTaskIncrementTick+0x1cc>)
   1ae20:	4798      	blx	r3
   1ae22:	0003      	movs	r3, r0
   1ae24:	001a      	movs	r2, r3
   1ae26:	4b34      	ldr	r3, [pc, #208]	; (1aef8 <xTaskIncrementTick+0x1d0>)
   1ae28:	881b      	ldrh	r3, [r3, #0]
   1ae2a:	4013      	ands	r3, r2
   1ae2c:	b29b      	uxth	r3, r3
   1ae2e:	2b00      	cmp	r3, #0
   1ae30:	d008      	beq.n	1ae44 <xTaskIncrementTick+0x11c>
   1ae32:	68bb      	ldr	r3, [r7, #8]
   1ae34:	0018      	movs	r0, r3
   1ae36:	4b31      	ldr	r3, [pc, #196]	; (1aefc <xTaskIncrementTick+0x1d4>)
   1ae38:	4798      	blx	r3
   1ae3a:	0003      	movs	r3, r0
   1ae3c:	b2db      	uxtb	r3, r3
   1ae3e:	0018      	movs	r0, r3
   1ae40:	4b2f      	ldr	r3, [pc, #188]	; (1af00 <xTaskIncrementTick+0x1d8>)
   1ae42:	4798      	blx	r3
   1ae44:	68bb      	ldr	r3, [r7, #8]
   1ae46:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1ae48:	4b2e      	ldr	r3, [pc, #184]	; (1af04 <xTaskIncrementTick+0x1dc>)
   1ae4a:	681b      	ldr	r3, [r3, #0]
   1ae4c:	429a      	cmp	r2, r3
   1ae4e:	d903      	bls.n	1ae58 <xTaskIncrementTick+0x130>
   1ae50:	68bb      	ldr	r3, [r7, #8]
   1ae52:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1ae54:	4b2b      	ldr	r3, [pc, #172]	; (1af04 <xTaskIncrementTick+0x1dc>)
   1ae56:	601a      	str	r2, [r3, #0]
   1ae58:	68bb      	ldr	r3, [r7, #8]
   1ae5a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1ae5c:	0013      	movs	r3, r2
   1ae5e:	009b      	lsls	r3, r3, #2
   1ae60:	189b      	adds	r3, r3, r2
   1ae62:	009b      	lsls	r3, r3, #2
   1ae64:	4a28      	ldr	r2, [pc, #160]	; (1af08 <xTaskIncrementTick+0x1e0>)
   1ae66:	189a      	adds	r2, r3, r2
   1ae68:	68bb      	ldr	r3, [r7, #8]
   1ae6a:	3304      	adds	r3, #4
   1ae6c:	0019      	movs	r1, r3
   1ae6e:	0010      	movs	r0, r2
   1ae70:	4b26      	ldr	r3, [pc, #152]	; (1af0c <xTaskIncrementTick+0x1e4>)
   1ae72:	4798      	blx	r3
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
   1ae74:	68bb      	ldr	r3, [r7, #8]
   1ae76:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1ae78:	4b25      	ldr	r3, [pc, #148]	; (1af10 <xTaskIncrementTick+0x1e8>)
   1ae7a:	681b      	ldr	r3, [r3, #0]
   1ae7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   1ae7e:	429a      	cmp	r2, r3
   1ae80:	d39e      	bcc.n	1adc0 <xTaskIncrementTick+0x98>
						{
							xSwitchRequired = pdTRUE;
   1ae82:	2301      	movs	r3, #1
   1ae84:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
   1ae86:	e79b      	b.n	1adc0 <xTaskIncrementTick+0x98>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
   1ae88:	4b21      	ldr	r3, [pc, #132]	; (1af10 <xTaskIncrementTick+0x1e8>)
   1ae8a:	681b      	ldr	r3, [r3, #0]
   1ae8c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1ae8e:	491e      	ldr	r1, [pc, #120]	; (1af08 <xTaskIncrementTick+0x1e0>)
   1ae90:	0013      	movs	r3, r2
   1ae92:	009b      	lsls	r3, r3, #2
   1ae94:	189b      	adds	r3, r3, r2
   1ae96:	009b      	lsls	r3, r3, #2
   1ae98:	585b      	ldr	r3, [r3, r1]
   1ae9a:	2b01      	cmp	r3, #1
   1ae9c:	d907      	bls.n	1aeae <xTaskIncrementTick+0x186>
			{
				xSwitchRequired = pdTRUE;
   1ae9e:	2301      	movs	r3, #1
   1aea0:	617b      	str	r3, [r7, #20]
   1aea2:	e004      	b.n	1aeae <xTaskIncrementTick+0x186>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
   1aea4:	4b08      	ldr	r3, [pc, #32]	; (1aec8 <xTaskIncrementTick+0x1a0>)
   1aea6:	681b      	ldr	r3, [r3, #0]
   1aea8:	1c5a      	adds	r2, r3, #1
   1aeaa:	4b07      	ldr	r3, [pc, #28]	; (1aec8 <xTaskIncrementTick+0x1a0>)
   1aeac:	601a      	str	r2, [r3, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
   1aeae:	4b19      	ldr	r3, [pc, #100]	; (1af14 <xTaskIncrementTick+0x1ec>)
   1aeb0:	681b      	ldr	r3, [r3, #0]
   1aeb2:	2b00      	cmp	r3, #0
   1aeb4:	d001      	beq.n	1aeba <xTaskIncrementTick+0x192>
		{
			xSwitchRequired = pdTRUE;
   1aeb6:	2301      	movs	r3, #1
   1aeb8:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
   1aeba:	697b      	ldr	r3, [r7, #20]
}
   1aebc:	0018      	movs	r0, r3
   1aebe:	46bd      	mov	sp, r7
   1aec0:	b006      	add	sp, #24
   1aec2:	bd80      	pop	{r7, pc}
   1aec4:	20003c78 	.word	0x20003c78
   1aec8:	20003c60 	.word	0x20003c60
   1aecc:	20000bc0 	.word	0x20000bc0
   1aed0:	00018555 	.word	0x00018555
   1aed4:	20003c54 	.word	0x20003c54
   1aed8:	000175c1 	.word	0x000175c1
   1aedc:	20003c08 	.word	0x20003c08
   1aee0:	20003c0c 	.word	0x20003c0c
   1aee4:	20003c68 	.word	0x20003c68
   1aee8:	0001b589 	.word	0x0001b589
   1aeec:	20003c70 	.word	0x20003c70
   1aef0:	0001873b 	.word	0x0001873b
   1aef4:	000168c1 	.word	0x000168c1
   1aef8:	20000120 	.word	0x20000120
   1aefc:	000168a1 	.word	0x000168a1
   1af00:	00017071 	.word	0x00017071
   1af04:	20003c58 	.word	0x20003c58
   1af08:	20003b7c 	.word	0x20003b7c
   1af0c:	0001868b 	.word	0x0001868b
   1af10:	20003b78 	.word	0x20003b78
   1af14:	20003c64 	.word	0x20003c64

0001af18 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
   1af18:	b580      	push	{r7, lr}
   1af1a:	b082      	sub	sp, #8
   1af1c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
   1af1e:	4b3a      	ldr	r3, [pc, #232]	; (1b008 <vTaskSwitchContext+0xf0>)
   1af20:	681b      	ldr	r3, [r3, #0]
   1af22:	2b00      	cmp	r3, #0
   1af24:	d003      	beq.n	1af2e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
   1af26:	4b39      	ldr	r3, [pc, #228]	; (1b00c <vTaskSwitchContext+0xf4>)
   1af28:	2201      	movs	r2, #1
   1af2a:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
   1af2c:	e067      	b.n	1affe <vTaskSwitchContext+0xe6>
		xYieldPending = pdFALSE;
   1af2e:	4b37      	ldr	r3, [pc, #220]	; (1b00c <vTaskSwitchContext+0xf4>)
   1af30:	2200      	movs	r2, #0
   1af32:	601a      	str	r2, [r3, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
   1af34:	4b36      	ldr	r3, [pc, #216]	; (1b010 <vTaskSwitchContext+0xf8>)
   1af36:	681b      	ldr	r3, [r3, #0]
   1af38:	681a      	ldr	r2, [r3, #0]
   1af3a:	4b35      	ldr	r3, [pc, #212]	; (1b010 <vTaskSwitchContext+0xf8>)
   1af3c:	681b      	ldr	r3, [r3, #0]
   1af3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   1af40:	429a      	cmp	r2, r3
   1af42:	d808      	bhi.n	1af56 <vTaskSwitchContext+0x3e>
   1af44:	4b32      	ldr	r3, [pc, #200]	; (1b010 <vTaskSwitchContext+0xf8>)
   1af46:	681a      	ldr	r2, [r3, #0]
   1af48:	4b31      	ldr	r3, [pc, #196]	; (1b010 <vTaskSwitchContext+0xf8>)
   1af4a:	681b      	ldr	r3, [r3, #0]
   1af4c:	3334      	adds	r3, #52	; 0x34
   1af4e:	0019      	movs	r1, r3
   1af50:	0010      	movs	r0, r2
   1af52:	4b30      	ldr	r3, [pc, #192]	; (1b014 <vTaskSwitchContext+0xfc>)
   1af54:	4798      	blx	r3
		taskSELECT_HIGHEST_PRIORITY_TASK();
   1af56:	4b30      	ldr	r3, [pc, #192]	; (1b018 <vTaskSwitchContext+0x100>)
   1af58:	681b      	ldr	r3, [r3, #0]
   1af5a:	607b      	str	r3, [r7, #4]
   1af5c:	e007      	b.n	1af6e <vTaskSwitchContext+0x56>
   1af5e:	687b      	ldr	r3, [r7, #4]
   1af60:	2b00      	cmp	r3, #0
   1af62:	d101      	bne.n	1af68 <vTaskSwitchContext+0x50>
   1af64:	b672      	cpsid	i
   1af66:	e7fe      	b.n	1af66 <vTaskSwitchContext+0x4e>
   1af68:	687b      	ldr	r3, [r7, #4]
   1af6a:	3b01      	subs	r3, #1
   1af6c:	607b      	str	r3, [r7, #4]
   1af6e:	492b      	ldr	r1, [pc, #172]	; (1b01c <vTaskSwitchContext+0x104>)
   1af70:	687a      	ldr	r2, [r7, #4]
   1af72:	0013      	movs	r3, r2
   1af74:	009b      	lsls	r3, r3, #2
   1af76:	189b      	adds	r3, r3, r2
   1af78:	009b      	lsls	r3, r3, #2
   1af7a:	585b      	ldr	r3, [r3, r1]
   1af7c:	2b00      	cmp	r3, #0
   1af7e:	d0ee      	beq.n	1af5e <vTaskSwitchContext+0x46>
   1af80:	687a      	ldr	r2, [r7, #4]
   1af82:	0013      	movs	r3, r2
   1af84:	009b      	lsls	r3, r3, #2
   1af86:	189b      	adds	r3, r3, r2
   1af88:	009b      	lsls	r3, r3, #2
   1af8a:	4a24      	ldr	r2, [pc, #144]	; (1b01c <vTaskSwitchContext+0x104>)
   1af8c:	189b      	adds	r3, r3, r2
   1af8e:	603b      	str	r3, [r7, #0]
   1af90:	683b      	ldr	r3, [r7, #0]
   1af92:	685b      	ldr	r3, [r3, #4]
   1af94:	685a      	ldr	r2, [r3, #4]
   1af96:	683b      	ldr	r3, [r7, #0]
   1af98:	605a      	str	r2, [r3, #4]
   1af9a:	683b      	ldr	r3, [r7, #0]
   1af9c:	685a      	ldr	r2, [r3, #4]
   1af9e:	683b      	ldr	r3, [r7, #0]
   1afa0:	3308      	adds	r3, #8
   1afa2:	429a      	cmp	r2, r3
   1afa4:	d104      	bne.n	1afb0 <vTaskSwitchContext+0x98>
   1afa6:	683b      	ldr	r3, [r7, #0]
   1afa8:	685b      	ldr	r3, [r3, #4]
   1afaa:	685a      	ldr	r2, [r3, #4]
   1afac:	683b      	ldr	r3, [r7, #0]
   1afae:	605a      	str	r2, [r3, #4]
   1afb0:	683b      	ldr	r3, [r7, #0]
   1afb2:	685b      	ldr	r3, [r3, #4]
   1afb4:	68da      	ldr	r2, [r3, #12]
   1afb6:	4b16      	ldr	r3, [pc, #88]	; (1b010 <vTaskSwitchContext+0xf8>)
   1afb8:	601a      	str	r2, [r3, #0]
   1afba:	4b17      	ldr	r3, [pc, #92]	; (1b018 <vTaskSwitchContext+0x100>)
   1afbc:	687a      	ldr	r2, [r7, #4]
   1afbe:	601a      	str	r2, [r3, #0]
		traceTASK_SWITCHED_IN();
   1afc0:	4b17      	ldr	r3, [pc, #92]	; (1b020 <vTaskSwitchContext+0x108>)
   1afc2:	2201      	movs	r2, #1
   1afc4:	601a      	str	r2, [r3, #0]
   1afc6:	4b17      	ldr	r3, [pc, #92]	; (1b024 <vTaskSwitchContext+0x10c>)
   1afc8:	4798      	blx	r3
   1afca:	0003      	movs	r3, r0
   1afcc:	0018      	movs	r0, r3
   1afce:	4b16      	ldr	r3, [pc, #88]	; (1b028 <vTaskSwitchContext+0x110>)
   1afd0:	4798      	blx	r3
   1afd2:	0003      	movs	r3, r0
   1afd4:	001a      	movs	r2, r3
   1afd6:	4b15      	ldr	r3, [pc, #84]	; (1b02c <vTaskSwitchContext+0x114>)
   1afd8:	881b      	ldrh	r3, [r3, #0]
   1afda:	4013      	ands	r3, r2
   1afdc:	b29b      	uxth	r3, r3
   1afde:	2b00      	cmp	r3, #0
   1afe0:	d00a      	beq.n	1aff8 <vTaskSwitchContext+0xe0>
   1afe2:	4b10      	ldr	r3, [pc, #64]	; (1b024 <vTaskSwitchContext+0x10c>)
   1afe4:	4798      	blx	r3
   1afe6:	0003      	movs	r3, r0
   1afe8:	0018      	movs	r0, r3
   1afea:	4b11      	ldr	r3, [pc, #68]	; (1b030 <vTaskSwitchContext+0x118>)
   1afec:	4798      	blx	r3
   1afee:	0003      	movs	r3, r0
   1aff0:	b2db      	uxtb	r3, r3
   1aff2:	0018      	movs	r0, r3
   1aff4:	4b0f      	ldr	r3, [pc, #60]	; (1b034 <vTaskSwitchContext+0x11c>)
   1aff6:	4798      	blx	r3
   1aff8:	4b09      	ldr	r3, [pc, #36]	; (1b020 <vTaskSwitchContext+0x108>)
   1affa:	2202      	movs	r2, #2
   1affc:	601a      	str	r2, [r3, #0]
}
   1affe:	46c0      	nop			; (mov r8, r8)
   1b000:	46bd      	mov	sp, r7
   1b002:	b002      	add	sp, #8
   1b004:	bd80      	pop	{r7, pc}
   1b006:	46c0      	nop			; (mov r8, r8)
   1b008:	20003c78 	.word	0x20003c78
   1b00c:	20003c64 	.word	0x20003c64
   1b010:	20003b78 	.word	0x20003b78
   1b014:	000310d5 	.word	0x000310d5
   1b018:	20003c58 	.word	0x20003c58
   1b01c:	20003b7c 	.word	0x20003b7c
   1b020:	20000bcc 	.word	0x20000bcc
   1b024:	00016b5d 	.word	0x00016b5d
   1b028:	000168c1 	.word	0x000168c1
   1b02c:	20000120 	.word	0x20000120
   1b030:	000168a1 	.word	0x000168a1
   1b034:	000176bd 	.word	0x000176bd

0001b038 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
   1b038:	b580      	push	{r7, lr}
   1b03a:	b082      	sub	sp, #8
   1b03c:	af00      	add	r7, sp, #0
   1b03e:	6078      	str	r0, [r7, #4]
   1b040:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
   1b042:	687b      	ldr	r3, [r7, #4]
   1b044:	2b00      	cmp	r3, #0
   1b046:	d101      	bne.n	1b04c <vTaskPlaceOnEventList+0x14>
   1b048:	b672      	cpsid	i
   1b04a:	e7fe      	b.n	1b04a <vTaskPlaceOnEventList+0x12>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
   1b04c:	4b08      	ldr	r3, [pc, #32]	; (1b070 <vTaskPlaceOnEventList+0x38>)
   1b04e:	681b      	ldr	r3, [r3, #0]
   1b050:	3318      	adds	r3, #24
   1b052:	001a      	movs	r2, r3
   1b054:	687b      	ldr	r3, [r7, #4]
   1b056:	0011      	movs	r1, r2
   1b058:	0018      	movs	r0, r3
   1b05a:	4b06      	ldr	r3, [pc, #24]	; (1b074 <vTaskPlaceOnEventList+0x3c>)
   1b05c:	4798      	blx	r3

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
   1b05e:	683b      	ldr	r3, [r7, #0]
   1b060:	2101      	movs	r1, #1
   1b062:	0018      	movs	r0, r3
   1b064:	4b04      	ldr	r3, [pc, #16]	; (1b078 <vTaskPlaceOnEventList+0x40>)
   1b066:	4798      	blx	r3
}
   1b068:	46c0      	nop			; (mov r8, r8)
   1b06a:	46bd      	mov	sp, r7
   1b06c:	b002      	add	sp, #8
   1b06e:	bd80      	pop	{r7, pc}
   1b070:	20003b78 	.word	0x20003b78
   1b074:	000186cf 	.word	0x000186cf
   1b078:	0001badd 	.word	0x0001badd

0001b07c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
   1b07c:	b580      	push	{r7, lr}
   1b07e:	b084      	sub	sp, #16
   1b080:	af00      	add	r7, sp, #0
   1b082:	60f8      	str	r0, [r7, #12]
   1b084:	60b9      	str	r1, [r7, #8]
   1b086:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
   1b088:	68fb      	ldr	r3, [r7, #12]
   1b08a:	2b00      	cmp	r3, #0
   1b08c:	d101      	bne.n	1b092 <vTaskPlaceOnEventListRestricted+0x16>
   1b08e:	b672      	cpsid	i
   1b090:	e7fe      	b.n	1b090 <vTaskPlaceOnEventListRestricted+0x14>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
   1b092:	4b28      	ldr	r3, [pc, #160]	; (1b134 <vTaskPlaceOnEventListRestricted+0xb8>)
   1b094:	681b      	ldr	r3, [r3, #0]
   1b096:	3318      	adds	r3, #24
   1b098:	001a      	movs	r2, r3
   1b09a:	68fb      	ldr	r3, [r7, #12]
   1b09c:	0011      	movs	r1, r2
   1b09e:	0018      	movs	r0, r3
   1b0a0:	4b25      	ldr	r3, [pc, #148]	; (1b138 <vTaskPlaceOnEventListRestricted+0xbc>)
   1b0a2:	4798      	blx	r3

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
   1b0a4:	687b      	ldr	r3, [r7, #4]
   1b0a6:	2b00      	cmp	r3, #0
   1b0a8:	d002      	beq.n	1b0b0 <vTaskPlaceOnEventListRestricted+0x34>
		{
			xTicksToWait = portMAX_DELAY;
   1b0aa:	2301      	movs	r3, #1
   1b0ac:	425b      	negs	r3, r3
   1b0ae:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
   1b0b0:	4b20      	ldr	r3, [pc, #128]	; (1b134 <vTaskPlaceOnEventListRestricted+0xb8>)
   1b0b2:	681b      	ldr	r3, [r3, #0]
   1b0b4:	0018      	movs	r0, r3
   1b0b6:	4b21      	ldr	r3, [pc, #132]	; (1b13c <vTaskPlaceOnEventListRestricted+0xc0>)
   1b0b8:	4798      	blx	r3
   1b0ba:	0003      	movs	r3, r0
   1b0bc:	001a      	movs	r2, r3
   1b0be:	4b20      	ldr	r3, [pc, #128]	; (1b140 <vTaskPlaceOnEventListRestricted+0xc4>)
   1b0c0:	881b      	ldrh	r3, [r3, #0]
   1b0c2:	4013      	ands	r3, r2
   1b0c4:	b29b      	uxth	r3, r3
   1b0c6:	2b00      	cmp	r3, #0
   1b0c8:	d011      	beq.n	1b0ee <vTaskPlaceOnEventListRestricted+0x72>
   1b0ca:	4b1e      	ldr	r3, [pc, #120]	; (1b144 <vTaskPlaceOnEventListRestricted+0xc8>)
   1b0cc:	681a      	ldr	r2, [r3, #0]
   1b0ce:	68bb      	ldr	r3, [r7, #8]
   1b0d0:	18d3      	adds	r3, r2, r3
   1b0d2:	0019      	movs	r1, r3
   1b0d4:	2088      	movs	r0, #136	; 0x88
   1b0d6:	4b1c      	ldr	r3, [pc, #112]	; (1b148 <vTaskPlaceOnEventListRestricted+0xcc>)
   1b0d8:	4798      	blx	r3
   1b0da:	4b16      	ldr	r3, [pc, #88]	; (1b134 <vTaskPlaceOnEventListRestricted+0xb8>)
   1b0dc:	681b      	ldr	r3, [r3, #0]
   1b0de:	0018      	movs	r0, r3
   1b0e0:	4b1a      	ldr	r3, [pc, #104]	; (1b14c <vTaskPlaceOnEventListRestricted+0xd0>)
   1b0e2:	4798      	blx	r3
   1b0e4:	0003      	movs	r3, r0
   1b0e6:	b2db      	uxtb	r3, r3
   1b0e8:	0018      	movs	r0, r3
   1b0ea:	4b19      	ldr	r3, [pc, #100]	; (1b150 <vTaskPlaceOnEventListRestricted+0xd4>)
   1b0ec:	4798      	blx	r3
   1b0ee:	4b19      	ldr	r3, [pc, #100]	; (1b154 <vTaskPlaceOnEventListRestricted+0xd8>)
   1b0f0:	4798      	blx	r3
   1b0f2:	0003      	movs	r3, r0
   1b0f4:	0018      	movs	r0, r3
   1b0f6:	4b11      	ldr	r3, [pc, #68]	; (1b13c <vTaskPlaceOnEventListRestricted+0xc0>)
   1b0f8:	4798      	blx	r3
   1b0fa:	0003      	movs	r3, r0
   1b0fc:	001a      	movs	r2, r3
   1b0fe:	4b10      	ldr	r3, [pc, #64]	; (1b140 <vTaskPlaceOnEventListRestricted+0xc4>)
   1b100:	881b      	ldrh	r3, [r3, #0]
   1b102:	4013      	ands	r3, r2
   1b104:	b29b      	uxth	r3, r3
   1b106:	2b00      	cmp	r3, #0
   1b108:	d00a      	beq.n	1b120 <vTaskPlaceOnEventListRestricted+0xa4>
   1b10a:	4b12      	ldr	r3, [pc, #72]	; (1b154 <vTaskPlaceOnEventListRestricted+0xd8>)
   1b10c:	4798      	blx	r3
   1b10e:	0003      	movs	r3, r0
   1b110:	0018      	movs	r0, r3
   1b112:	4b0e      	ldr	r3, [pc, #56]	; (1b14c <vTaskPlaceOnEventListRestricted+0xd0>)
   1b114:	4798      	blx	r3
   1b116:	0003      	movs	r3, r0
   1b118:	b2db      	uxtb	r3, r3
   1b11a:	0018      	movs	r0, r3
   1b11c:	4b0c      	ldr	r3, [pc, #48]	; (1b150 <vTaskPlaceOnEventListRestricted+0xd4>)
   1b11e:	4798      	blx	r3
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
   1b120:	687a      	ldr	r2, [r7, #4]
   1b122:	68bb      	ldr	r3, [r7, #8]
   1b124:	0011      	movs	r1, r2
   1b126:	0018      	movs	r0, r3
   1b128:	4b0b      	ldr	r3, [pc, #44]	; (1b158 <vTaskPlaceOnEventListRestricted+0xdc>)
   1b12a:	4798      	blx	r3
	}
   1b12c:	46c0      	nop			; (mov r8, r8)
   1b12e:	46bd      	mov	sp, r7
   1b130:	b004      	add	sp, #16
   1b132:	bd80      	pop	{r7, pc}
   1b134:	20003b78 	.word	0x20003b78
   1b138:	0001868b 	.word	0x0001868b
   1b13c:	000168c1 	.word	0x000168c1
   1b140:	20000120 	.word	0x20000120
   1b144:	20003c54 	.word	0x20003c54
   1b148:	000175c1 	.word	0x000175c1
   1b14c:	000168a1 	.word	0x000168a1
   1b150:	00017a51 	.word	0x00017a51
   1b154:	00016b5d 	.word	0x00016b5d
   1b158:	0001badd 	.word	0x0001badd

0001b15c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
   1b15c:	b580      	push	{r7, lr}
   1b15e:	b084      	sub	sp, #16
   1b160:	af00      	add	r7, sp, #0
   1b162:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
   1b164:	687b      	ldr	r3, [r7, #4]
   1b166:	68db      	ldr	r3, [r3, #12]
   1b168:	68db      	ldr	r3, [r3, #12]
   1b16a:	60bb      	str	r3, [r7, #8]
	configASSERT( pxUnblockedTCB );
   1b16c:	68bb      	ldr	r3, [r7, #8]
   1b16e:	2b00      	cmp	r3, #0
   1b170:	d101      	bne.n	1b176 <xTaskRemoveFromEventList+0x1a>
   1b172:	b672      	cpsid	i
   1b174:	e7fe      	b.n	1b174 <xTaskRemoveFromEventList+0x18>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
   1b176:	68bb      	ldr	r3, [r7, #8]
   1b178:	3318      	adds	r3, #24
   1b17a:	0018      	movs	r0, r3
   1b17c:	4b2a      	ldr	r3, [pc, #168]	; (1b228 <xTaskRemoveFromEventList+0xcc>)
   1b17e:	4798      	blx	r3

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
   1b180:	4b2a      	ldr	r3, [pc, #168]	; (1b22c <xTaskRemoveFromEventList+0xd0>)
   1b182:	681b      	ldr	r3, [r3, #0]
   1b184:	2b00      	cmp	r3, #0
   1b186:	d132      	bne.n	1b1ee <xTaskRemoveFromEventList+0x92>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
   1b188:	68bb      	ldr	r3, [r7, #8]
   1b18a:	3304      	adds	r3, #4
   1b18c:	0018      	movs	r0, r3
   1b18e:	4b26      	ldr	r3, [pc, #152]	; (1b228 <xTaskRemoveFromEventList+0xcc>)
   1b190:	4798      	blx	r3
		prvAddTaskToReadyList( pxUnblockedTCB );
   1b192:	68bb      	ldr	r3, [r7, #8]
   1b194:	0018      	movs	r0, r3
   1b196:	4b26      	ldr	r3, [pc, #152]	; (1b230 <xTaskRemoveFromEventList+0xd4>)
   1b198:	4798      	blx	r3
   1b19a:	0003      	movs	r3, r0
   1b19c:	001a      	movs	r2, r3
   1b19e:	4b25      	ldr	r3, [pc, #148]	; (1b234 <xTaskRemoveFromEventList+0xd8>)
   1b1a0:	881b      	ldrh	r3, [r3, #0]
   1b1a2:	4013      	ands	r3, r2
   1b1a4:	b29b      	uxth	r3, r3
   1b1a6:	2b00      	cmp	r3, #0
   1b1a8:	d008      	beq.n	1b1bc <xTaskRemoveFromEventList+0x60>
   1b1aa:	68bb      	ldr	r3, [r7, #8]
   1b1ac:	0018      	movs	r0, r3
   1b1ae:	4b22      	ldr	r3, [pc, #136]	; (1b238 <xTaskRemoveFromEventList+0xdc>)
   1b1b0:	4798      	blx	r3
   1b1b2:	0003      	movs	r3, r0
   1b1b4:	b2db      	uxtb	r3, r3
   1b1b6:	0018      	movs	r0, r3
   1b1b8:	4b20      	ldr	r3, [pc, #128]	; (1b23c <xTaskRemoveFromEventList+0xe0>)
   1b1ba:	4798      	blx	r3
   1b1bc:	68bb      	ldr	r3, [r7, #8]
   1b1be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1b1c0:	4b1f      	ldr	r3, [pc, #124]	; (1b240 <xTaskRemoveFromEventList+0xe4>)
   1b1c2:	681b      	ldr	r3, [r3, #0]
   1b1c4:	429a      	cmp	r2, r3
   1b1c6:	d903      	bls.n	1b1d0 <xTaskRemoveFromEventList+0x74>
   1b1c8:	68bb      	ldr	r3, [r7, #8]
   1b1ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1b1cc:	4b1c      	ldr	r3, [pc, #112]	; (1b240 <xTaskRemoveFromEventList+0xe4>)
   1b1ce:	601a      	str	r2, [r3, #0]
   1b1d0:	68bb      	ldr	r3, [r7, #8]
   1b1d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1b1d4:	0013      	movs	r3, r2
   1b1d6:	009b      	lsls	r3, r3, #2
   1b1d8:	189b      	adds	r3, r3, r2
   1b1da:	009b      	lsls	r3, r3, #2
   1b1dc:	4a19      	ldr	r2, [pc, #100]	; (1b244 <xTaskRemoveFromEventList+0xe8>)
   1b1de:	189a      	adds	r2, r3, r2
   1b1e0:	68bb      	ldr	r3, [r7, #8]
   1b1e2:	3304      	adds	r3, #4
   1b1e4:	0019      	movs	r1, r3
   1b1e6:	0010      	movs	r0, r2
   1b1e8:	4b17      	ldr	r3, [pc, #92]	; (1b248 <xTaskRemoveFromEventList+0xec>)
   1b1ea:	4798      	blx	r3
   1b1ec:	e007      	b.n	1b1fe <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
   1b1ee:	68bb      	ldr	r3, [r7, #8]
   1b1f0:	3318      	adds	r3, #24
   1b1f2:	001a      	movs	r2, r3
   1b1f4:	4b15      	ldr	r3, [pc, #84]	; (1b24c <xTaskRemoveFromEventList+0xf0>)
   1b1f6:	0011      	movs	r1, r2
   1b1f8:	0018      	movs	r0, r3
   1b1fa:	4b13      	ldr	r3, [pc, #76]	; (1b248 <xTaskRemoveFromEventList+0xec>)
   1b1fc:	4798      	blx	r3
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
   1b1fe:	68bb      	ldr	r3, [r7, #8]
   1b200:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1b202:	4b13      	ldr	r3, [pc, #76]	; (1b250 <xTaskRemoveFromEventList+0xf4>)
   1b204:	681b      	ldr	r3, [r3, #0]
   1b206:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   1b208:	429a      	cmp	r2, r3
   1b20a:	d905      	bls.n	1b218 <xTaskRemoveFromEventList+0xbc>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
   1b20c:	2301      	movs	r3, #1
   1b20e:	60fb      	str	r3, [r7, #12]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
   1b210:	4b10      	ldr	r3, [pc, #64]	; (1b254 <xTaskRemoveFromEventList+0xf8>)
   1b212:	2201      	movs	r2, #1
   1b214:	601a      	str	r2, [r3, #0]
   1b216:	e001      	b.n	1b21c <xTaskRemoveFromEventList+0xc0>
	}
	else
	{
		xReturn = pdFALSE;
   1b218:	2300      	movs	r3, #0
   1b21a:	60fb      	str	r3, [r7, #12]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
   1b21c:	68fb      	ldr	r3, [r7, #12]
}
   1b21e:	0018      	movs	r0, r3
   1b220:	46bd      	mov	sp, r7
   1b222:	b004      	add	sp, #16
   1b224:	bd80      	pop	{r7, pc}
   1b226:	46c0      	nop			; (mov r8, r8)
   1b228:	0001873b 	.word	0x0001873b
   1b22c:	20003c78 	.word	0x20003c78
   1b230:	000168c1 	.word	0x000168c1
   1b234:	20000120 	.word	0x20000120
   1b238:	000168a1 	.word	0x000168a1
   1b23c:	00017071 	.word	0x00017071
   1b240:	20003c58 	.word	0x20003c58
   1b244:	20003b7c 	.word	0x20003b7c
   1b248:	0001868b 	.word	0x0001868b
   1b24c:	20003c10 	.word	0x20003c10
   1b250:	20003b78 	.word	0x20003b78
   1b254:	20003c64 	.word	0x20003c64

0001b258 <vTaskSetTimeOutState>:
	}
}
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( TimeOut_t * const pxTimeOut )
{
   1b258:	b580      	push	{r7, lr}
   1b25a:	b082      	sub	sp, #8
   1b25c:	af00      	add	r7, sp, #0
   1b25e:	6078      	str	r0, [r7, #4]
	configASSERT( pxTimeOut );
   1b260:	687b      	ldr	r3, [r7, #4]
   1b262:	2b00      	cmp	r3, #0
   1b264:	d101      	bne.n	1b26a <vTaskSetTimeOutState+0x12>
   1b266:	b672      	cpsid	i
   1b268:	e7fe      	b.n	1b268 <vTaskSetTimeOutState+0x10>
	taskENTER_CRITICAL();
   1b26a:	4b08      	ldr	r3, [pc, #32]	; (1b28c <vTaskSetTimeOutState+0x34>)
   1b26c:	4798      	blx	r3
	{
		pxTimeOut->xOverflowCount = xNumOfOverflows;
   1b26e:	4b08      	ldr	r3, [pc, #32]	; (1b290 <vTaskSetTimeOutState+0x38>)
   1b270:	681a      	ldr	r2, [r3, #0]
   1b272:	687b      	ldr	r3, [r7, #4]
   1b274:	601a      	str	r2, [r3, #0]
		pxTimeOut->xTimeOnEntering = xTickCount;
   1b276:	4b07      	ldr	r3, [pc, #28]	; (1b294 <vTaskSetTimeOutState+0x3c>)
   1b278:	681a      	ldr	r2, [r3, #0]
   1b27a:	687b      	ldr	r3, [r7, #4]
   1b27c:	605a      	str	r2, [r3, #4]
	}
	taskEXIT_CRITICAL();
   1b27e:	4b06      	ldr	r3, [pc, #24]	; (1b298 <vTaskSetTimeOutState+0x40>)
   1b280:	4798      	blx	r3
}
   1b282:	46c0      	nop			; (mov r8, r8)
   1b284:	46bd      	mov	sp, r7
   1b286:	b002      	add	sp, #8
   1b288:	bd80      	pop	{r7, pc}
   1b28a:	46c0      	nop			; (mov r8, r8)
   1b28c:	000188c9 	.word	0x000188c9
   1b290:	20003c68 	.word	0x20003c68
   1b294:	20003c54 	.word	0x20003c54
   1b298:	000188ed 	.word	0x000188ed

0001b29c <vTaskInternalSetTimeOutState>:
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
   1b29c:	b580      	push	{r7, lr}
   1b29e:	b082      	sub	sp, #8
   1b2a0:	af00      	add	r7, sp, #0
   1b2a2:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
   1b2a4:	4b05      	ldr	r3, [pc, #20]	; (1b2bc <vTaskInternalSetTimeOutState+0x20>)
   1b2a6:	681a      	ldr	r2, [r3, #0]
   1b2a8:	687b      	ldr	r3, [r7, #4]
   1b2aa:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
   1b2ac:	4b04      	ldr	r3, [pc, #16]	; (1b2c0 <vTaskInternalSetTimeOutState+0x24>)
   1b2ae:	681a      	ldr	r2, [r3, #0]
   1b2b0:	687b      	ldr	r3, [r7, #4]
   1b2b2:	605a      	str	r2, [r3, #4]
}
   1b2b4:	46c0      	nop			; (mov r8, r8)
   1b2b6:	46bd      	mov	sp, r7
   1b2b8:	b002      	add	sp, #8
   1b2ba:	bd80      	pop	{r7, pc}
   1b2bc:	20003c68 	.word	0x20003c68
   1b2c0:	20003c54 	.word	0x20003c54

0001b2c4 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
   1b2c4:	b580      	push	{r7, lr}
   1b2c6:	b086      	sub	sp, #24
   1b2c8:	af00      	add	r7, sp, #0
   1b2ca:	6078      	str	r0, [r7, #4]
   1b2cc:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
   1b2ce:	687b      	ldr	r3, [r7, #4]
   1b2d0:	2b00      	cmp	r3, #0
   1b2d2:	d101      	bne.n	1b2d8 <xTaskCheckForTimeOut+0x14>
   1b2d4:	b672      	cpsid	i
   1b2d6:	e7fe      	b.n	1b2d6 <xTaskCheckForTimeOut+0x12>
	configASSERT( pxTicksToWait );
   1b2d8:	683b      	ldr	r3, [r7, #0]
   1b2da:	2b00      	cmp	r3, #0
   1b2dc:	d101      	bne.n	1b2e2 <xTaskCheckForTimeOut+0x1e>
   1b2de:	b672      	cpsid	i
   1b2e0:	e7fe      	b.n	1b2e0 <xTaskCheckForTimeOut+0x1c>

	taskENTER_CRITICAL();
   1b2e2:	4b1e      	ldr	r3, [pc, #120]	; (1b35c <xTaskCheckForTimeOut+0x98>)
   1b2e4:	4798      	blx	r3
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
   1b2e6:	4b1e      	ldr	r3, [pc, #120]	; (1b360 <xTaskCheckForTimeOut+0x9c>)
   1b2e8:	681b      	ldr	r3, [r3, #0]
   1b2ea:	613b      	str	r3, [r7, #16]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
   1b2ec:	687b      	ldr	r3, [r7, #4]
   1b2ee:	685b      	ldr	r3, [r3, #4]
   1b2f0:	693a      	ldr	r2, [r7, #16]
   1b2f2:	1ad3      	subs	r3, r2, r3
   1b2f4:	60fb      	str	r3, [r7, #12]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
   1b2f6:	683b      	ldr	r3, [r7, #0]
   1b2f8:	681b      	ldr	r3, [r3, #0]
   1b2fa:	3301      	adds	r3, #1
   1b2fc:	d102      	bne.n	1b304 <xTaskCheckForTimeOut+0x40>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
   1b2fe:	2300      	movs	r3, #0
   1b300:	617b      	str	r3, [r7, #20]
   1b302:	e024      	b.n	1b34e <xTaskCheckForTimeOut+0x8a>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
   1b304:	687b      	ldr	r3, [r7, #4]
   1b306:	681a      	ldr	r2, [r3, #0]
   1b308:	4b16      	ldr	r3, [pc, #88]	; (1b364 <xTaskCheckForTimeOut+0xa0>)
   1b30a:	681b      	ldr	r3, [r3, #0]
   1b30c:	429a      	cmp	r2, r3
   1b30e:	d007      	beq.n	1b320 <xTaskCheckForTimeOut+0x5c>
   1b310:	687b      	ldr	r3, [r7, #4]
   1b312:	685a      	ldr	r2, [r3, #4]
   1b314:	693b      	ldr	r3, [r7, #16]
   1b316:	429a      	cmp	r2, r3
   1b318:	d802      	bhi.n	1b320 <xTaskCheckForTimeOut+0x5c>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
   1b31a:	2301      	movs	r3, #1
   1b31c:	617b      	str	r3, [r7, #20]
   1b31e:	e016      	b.n	1b34e <xTaskCheckForTimeOut+0x8a>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
   1b320:	683b      	ldr	r3, [r7, #0]
   1b322:	681a      	ldr	r2, [r3, #0]
   1b324:	68fb      	ldr	r3, [r7, #12]
   1b326:	429a      	cmp	r2, r3
   1b328:	d90c      	bls.n	1b344 <xTaskCheckForTimeOut+0x80>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
   1b32a:	683b      	ldr	r3, [r7, #0]
   1b32c:	681a      	ldr	r2, [r3, #0]
   1b32e:	68fb      	ldr	r3, [r7, #12]
   1b330:	1ad2      	subs	r2, r2, r3
   1b332:	683b      	ldr	r3, [r7, #0]
   1b334:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
   1b336:	687b      	ldr	r3, [r7, #4]
   1b338:	0018      	movs	r0, r3
   1b33a:	4b0b      	ldr	r3, [pc, #44]	; (1b368 <xTaskCheckForTimeOut+0xa4>)
   1b33c:	4798      	blx	r3
			xReturn = pdFALSE;
   1b33e:	2300      	movs	r3, #0
   1b340:	617b      	str	r3, [r7, #20]
   1b342:	e004      	b.n	1b34e <xTaskCheckForTimeOut+0x8a>
		}
		else
		{
			*pxTicksToWait = 0;
   1b344:	683b      	ldr	r3, [r7, #0]
   1b346:	2200      	movs	r2, #0
   1b348:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
   1b34a:	2301      	movs	r3, #1
   1b34c:	617b      	str	r3, [r7, #20]
		}
	}
	taskEXIT_CRITICAL();
   1b34e:	4b07      	ldr	r3, [pc, #28]	; (1b36c <xTaskCheckForTimeOut+0xa8>)
   1b350:	4798      	blx	r3

	return xReturn;
   1b352:	697b      	ldr	r3, [r7, #20]
}
   1b354:	0018      	movs	r0, r3
   1b356:	46bd      	mov	sp, r7
   1b358:	b006      	add	sp, #24
   1b35a:	bd80      	pop	{r7, pc}
   1b35c:	000188c9 	.word	0x000188c9
   1b360:	20003c54 	.word	0x20003c54
   1b364:	20003c68 	.word	0x20003c68
   1b368:	0001b29d 	.word	0x0001b29d
   1b36c:	000188ed 	.word	0x000188ed

0001b370 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
   1b370:	b580      	push	{r7, lr}
   1b372:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
   1b374:	4b02      	ldr	r3, [pc, #8]	; (1b380 <vTaskMissedYield+0x10>)
   1b376:	2201      	movs	r2, #1
   1b378:	601a      	str	r2, [r3, #0]
}
   1b37a:	46c0      	nop			; (mov r8, r8)
   1b37c:	46bd      	mov	sp, r7
   1b37e:	bd80      	pop	{r7, pc}
   1b380:	20003c64 	.word	0x20003c64

0001b384 <uxTaskGetTaskNumber>:
/*-----------------------------------------------------------*/

#if ( configUSE_TRACE_FACILITY == 1 )

	UBaseType_t uxTaskGetTaskNumber( TaskHandle_t xTask )
	{
   1b384:	b580      	push	{r7, lr}
   1b386:	b084      	sub	sp, #16
   1b388:	af00      	add	r7, sp, #0
   1b38a:	6078      	str	r0, [r7, #4]
	UBaseType_t uxReturn;
	TCB_t *pxTCB;

		if( xTask != NULL )
   1b38c:	687b      	ldr	r3, [r7, #4]
   1b38e:	2b00      	cmp	r3, #0
   1b390:	d005      	beq.n	1b39e <uxTaskGetTaskNumber+0x1a>
		{
			pxTCB = ( TCB_t * ) xTask;
   1b392:	687b      	ldr	r3, [r7, #4]
   1b394:	60bb      	str	r3, [r7, #8]
			uxReturn = pxTCB->uxTaskNumber;
   1b396:	68bb      	ldr	r3, [r7, #8]
   1b398:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   1b39a:	60fb      	str	r3, [r7, #12]
   1b39c:	e001      	b.n	1b3a2 <uxTaskGetTaskNumber+0x1e>
		}
		else
		{
			uxReturn = 0U;
   1b39e:	2300      	movs	r3, #0
   1b3a0:	60fb      	str	r3, [r7, #12]
		}

		return uxReturn;
   1b3a2:	68fb      	ldr	r3, [r7, #12]
	}
   1b3a4:	0018      	movs	r0, r3
   1b3a6:	46bd      	mov	sp, r7
   1b3a8:	b004      	add	sp, #16
   1b3aa:	bd80      	pop	{r7, pc}

0001b3ac <vTaskSetTaskNumber>:
/*-----------------------------------------------------------*/

#if ( configUSE_TRACE_FACILITY == 1 )

	void vTaskSetTaskNumber( TaskHandle_t xTask, const UBaseType_t uxHandle )
	{
   1b3ac:	b580      	push	{r7, lr}
   1b3ae:	b084      	sub	sp, #16
   1b3b0:	af00      	add	r7, sp, #0
   1b3b2:	6078      	str	r0, [r7, #4]
   1b3b4:	6039      	str	r1, [r7, #0]
	TCB_t *pxTCB;

		if( xTask != NULL )
   1b3b6:	687b      	ldr	r3, [r7, #4]
   1b3b8:	2b00      	cmp	r3, #0
   1b3ba:	d004      	beq.n	1b3c6 <vTaskSetTaskNumber+0x1a>
		{
			pxTCB = ( TCB_t * ) xTask;
   1b3bc:	687b      	ldr	r3, [r7, #4]
   1b3be:	60fb      	str	r3, [r7, #12]
			pxTCB->uxTaskNumber = uxHandle;
   1b3c0:	68fb      	ldr	r3, [r7, #12]
   1b3c2:	683a      	ldr	r2, [r7, #0]
   1b3c4:	641a      	str	r2, [r3, #64]	; 0x40
		}
	}
   1b3c6:	46c0      	nop			; (mov r8, r8)
   1b3c8:	46bd      	mov	sp, r7
   1b3ca:	b004      	add	sp, #16
   1b3cc:	bd80      	pop	{r7, pc}
	...

0001b3d0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
   1b3d0:	b580      	push	{r7, lr}
   1b3d2:	b082      	sub	sp, #8
   1b3d4:	af00      	add	r7, sp, #0
   1b3d6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
   1b3d8:	4b04      	ldr	r3, [pc, #16]	; (1b3ec <prvIdleTask+0x1c>)
   1b3da:	4798      	blx	r3

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
   1b3dc:	4b04      	ldr	r3, [pc, #16]	; (1b3f0 <prvIdleTask+0x20>)
   1b3de:	681b      	ldr	r3, [r3, #0]
   1b3e0:	2b01      	cmp	r3, #1
   1b3e2:	d9f9      	bls.n	1b3d8 <prvIdleTask+0x8>
			{
				taskYIELD();
   1b3e4:	4b03      	ldr	r3, [pc, #12]	; (1b3f4 <prvIdleTask+0x24>)
   1b3e6:	4798      	blx	r3
		prvCheckTasksWaitingTermination();
   1b3e8:	e7f6      	b.n	1b3d8 <prvIdleTask+0x8>
   1b3ea:	46c0      	nop			; (mov r8, r8)
   1b3ec:	0001b485 	.word	0x0001b485
   1b3f0:	20003b7c 	.word	0x20003b7c
   1b3f4:	000188b1 	.word	0x000188b1

0001b3f8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
   1b3f8:	b580      	push	{r7, lr}
   1b3fa:	b082      	sub	sp, #8
   1b3fc:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
   1b3fe:	2300      	movs	r3, #0
   1b400:	607b      	str	r3, [r7, #4]
   1b402:	e00c      	b.n	1b41e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
   1b404:	687a      	ldr	r2, [r7, #4]
   1b406:	0013      	movs	r3, r2
   1b408:	009b      	lsls	r3, r3, #2
   1b40a:	189b      	adds	r3, r3, r2
   1b40c:	009b      	lsls	r3, r3, #2
   1b40e:	4a14      	ldr	r2, [pc, #80]	; (1b460 <prvInitialiseTaskLists+0x68>)
   1b410:	189b      	adds	r3, r3, r2
   1b412:	0018      	movs	r0, r3
   1b414:	4b13      	ldr	r3, [pc, #76]	; (1b464 <prvInitialiseTaskLists+0x6c>)
   1b416:	4798      	blx	r3
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
   1b418:	687b      	ldr	r3, [r7, #4]
   1b41a:	3301      	adds	r3, #1
   1b41c:	607b      	str	r3, [r7, #4]
   1b41e:	687b      	ldr	r3, [r7, #4]
   1b420:	2b04      	cmp	r3, #4
   1b422:	d9ef      	bls.n	1b404 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
   1b424:	4b10      	ldr	r3, [pc, #64]	; (1b468 <prvInitialiseTaskLists+0x70>)
   1b426:	0018      	movs	r0, r3
   1b428:	4b0e      	ldr	r3, [pc, #56]	; (1b464 <prvInitialiseTaskLists+0x6c>)
   1b42a:	4798      	blx	r3
	vListInitialise( &xDelayedTaskList2 );
   1b42c:	4b0f      	ldr	r3, [pc, #60]	; (1b46c <prvInitialiseTaskLists+0x74>)
   1b42e:	0018      	movs	r0, r3
   1b430:	4b0c      	ldr	r3, [pc, #48]	; (1b464 <prvInitialiseTaskLists+0x6c>)
   1b432:	4798      	blx	r3
	vListInitialise( &xPendingReadyList );
   1b434:	4b0e      	ldr	r3, [pc, #56]	; (1b470 <prvInitialiseTaskLists+0x78>)
   1b436:	0018      	movs	r0, r3
   1b438:	4b0a      	ldr	r3, [pc, #40]	; (1b464 <prvInitialiseTaskLists+0x6c>)
   1b43a:	4798      	blx	r3

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
   1b43c:	4b0d      	ldr	r3, [pc, #52]	; (1b474 <prvInitialiseTaskLists+0x7c>)
   1b43e:	0018      	movs	r0, r3
   1b440:	4b08      	ldr	r3, [pc, #32]	; (1b464 <prvInitialiseTaskLists+0x6c>)
   1b442:	4798      	blx	r3
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
   1b444:	4b0c      	ldr	r3, [pc, #48]	; (1b478 <prvInitialiseTaskLists+0x80>)
   1b446:	0018      	movs	r0, r3
   1b448:	4b06      	ldr	r3, [pc, #24]	; (1b464 <prvInitialiseTaskLists+0x6c>)
   1b44a:	4798      	blx	r3
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
   1b44c:	4b0b      	ldr	r3, [pc, #44]	; (1b47c <prvInitialiseTaskLists+0x84>)
   1b44e:	4a06      	ldr	r2, [pc, #24]	; (1b468 <prvInitialiseTaskLists+0x70>)
   1b450:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
   1b452:	4b0b      	ldr	r3, [pc, #44]	; (1b480 <prvInitialiseTaskLists+0x88>)
   1b454:	4a05      	ldr	r2, [pc, #20]	; (1b46c <prvInitialiseTaskLists+0x74>)
   1b456:	601a      	str	r2, [r3, #0]
}
   1b458:	46c0      	nop			; (mov r8, r8)
   1b45a:	46bd      	mov	sp, r7
   1b45c:	b002      	add	sp, #8
   1b45e:	bd80      	pop	{r7, pc}
   1b460:	20003b7c 	.word	0x20003b7c
   1b464:	00018639 	.word	0x00018639
   1b468:	20003be0 	.word	0x20003be0
   1b46c:	20003bf4 	.word	0x20003bf4
   1b470:	20003c10 	.word	0x20003c10
   1b474:	20003c24 	.word	0x20003c24
   1b478:	20003c3c 	.word	0x20003c3c
   1b47c:	20003c08 	.word	0x20003c08
   1b480:	20003c0c 	.word	0x20003c0c

0001b484 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
   1b484:	b580      	push	{r7, lr}
   1b486:	b082      	sub	sp, #8
   1b488:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
   1b48a:	e01a      	b.n	1b4c2 <prvCheckTasksWaitingTermination+0x3e>
		{
			taskENTER_CRITICAL();
   1b48c:	4b11      	ldr	r3, [pc, #68]	; (1b4d4 <prvCheckTasksWaitingTermination+0x50>)
   1b48e:	4798      	blx	r3
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
   1b490:	4b11      	ldr	r3, [pc, #68]	; (1b4d8 <prvCheckTasksWaitingTermination+0x54>)
   1b492:	68db      	ldr	r3, [r3, #12]
   1b494:	68db      	ldr	r3, [r3, #12]
   1b496:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
   1b498:	687b      	ldr	r3, [r7, #4]
   1b49a:	3304      	adds	r3, #4
   1b49c:	0018      	movs	r0, r3
   1b49e:	4b0f      	ldr	r3, [pc, #60]	; (1b4dc <prvCheckTasksWaitingTermination+0x58>)
   1b4a0:	4798      	blx	r3
				--uxCurrentNumberOfTasks;
   1b4a2:	4b0f      	ldr	r3, [pc, #60]	; (1b4e0 <prvCheckTasksWaitingTermination+0x5c>)
   1b4a4:	681b      	ldr	r3, [r3, #0]
   1b4a6:	1e5a      	subs	r2, r3, #1
   1b4a8:	4b0d      	ldr	r3, [pc, #52]	; (1b4e0 <prvCheckTasksWaitingTermination+0x5c>)
   1b4aa:	601a      	str	r2, [r3, #0]
				--uxDeletedTasksWaitingCleanUp;
   1b4ac:	4b0d      	ldr	r3, [pc, #52]	; (1b4e4 <prvCheckTasksWaitingTermination+0x60>)
   1b4ae:	681b      	ldr	r3, [r3, #0]
   1b4b0:	1e5a      	subs	r2, r3, #1
   1b4b2:	4b0c      	ldr	r3, [pc, #48]	; (1b4e4 <prvCheckTasksWaitingTermination+0x60>)
   1b4b4:	601a      	str	r2, [r3, #0]
			}
			taskEXIT_CRITICAL();
   1b4b6:	4b0c      	ldr	r3, [pc, #48]	; (1b4e8 <prvCheckTasksWaitingTermination+0x64>)
   1b4b8:	4798      	blx	r3

			prvDeleteTCB( pxTCB );
   1b4ba:	687b      	ldr	r3, [r7, #4]
   1b4bc:	0018      	movs	r0, r3
   1b4be:	4b0b      	ldr	r3, [pc, #44]	; (1b4ec <prvCheckTasksWaitingTermination+0x68>)
   1b4c0:	4798      	blx	r3
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
   1b4c2:	4b08      	ldr	r3, [pc, #32]	; (1b4e4 <prvCheckTasksWaitingTermination+0x60>)
   1b4c4:	681b      	ldr	r3, [r3, #0]
   1b4c6:	2b00      	cmp	r3, #0
   1b4c8:	d1e0      	bne.n	1b48c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
   1b4ca:	46c0      	nop			; (mov r8, r8)
   1b4cc:	46bd      	mov	sp, r7
   1b4ce:	b002      	add	sp, #8
   1b4d0:	bd80      	pop	{r7, pc}
   1b4d2:	46c0      	nop			; (mov r8, r8)
   1b4d4:	000188c9 	.word	0x000188c9
   1b4d8:	20003c24 	.word	0x20003c24
   1b4dc:	0001873b 	.word	0x0001873b
   1b4e0:	20003c50 	.word	0x20003c50
   1b4e4:	20003c38 	.word	0x20003c38
   1b4e8:	000188ed 	.word	0x000188ed
   1b4ec:	0001b561 	.word	0x0001b561

0001b4f0 <prvTaskCheckFreeStackSpace>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) )

	static uint16_t prvTaskCheckFreeStackSpace( const uint8_t * pucStackByte )
	{
   1b4f0:	b580      	push	{r7, lr}
   1b4f2:	b084      	sub	sp, #16
   1b4f4:	af00      	add	r7, sp, #0
   1b4f6:	6078      	str	r0, [r7, #4]
	uint32_t ulCount = 0U;
   1b4f8:	2300      	movs	r3, #0
   1b4fa:	60fb      	str	r3, [r7, #12]

		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
   1b4fc:	e005      	b.n	1b50a <prvTaskCheckFreeStackSpace+0x1a>
		{
			pucStackByte -= portSTACK_GROWTH;
   1b4fe:	687b      	ldr	r3, [r7, #4]
   1b500:	3301      	adds	r3, #1
   1b502:	607b      	str	r3, [r7, #4]
			ulCount++;
   1b504:	68fb      	ldr	r3, [r7, #12]
   1b506:	3301      	adds	r3, #1
   1b508:	60fb      	str	r3, [r7, #12]
		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
   1b50a:	687b      	ldr	r3, [r7, #4]
   1b50c:	781b      	ldrb	r3, [r3, #0]
   1b50e:	2ba5      	cmp	r3, #165	; 0xa5
   1b510:	d0f5      	beq.n	1b4fe <prvTaskCheckFreeStackSpace+0xe>
		}

		ulCount /= ( uint32_t ) sizeof( StackType_t ); /*lint !e961 Casting is not redundant on smaller architectures. */
   1b512:	68fb      	ldr	r3, [r7, #12]
   1b514:	089b      	lsrs	r3, r3, #2
   1b516:	60fb      	str	r3, [r7, #12]

		return ( uint16_t ) ulCount;
   1b518:	68fb      	ldr	r3, [r7, #12]
   1b51a:	b29b      	uxth	r3, r3
	}
   1b51c:	0018      	movs	r0, r3
   1b51e:	46bd      	mov	sp, r7
   1b520:	b004      	add	sp, #16
   1b522:	bd80      	pop	{r7, pc}

0001b524 <uxTaskGetStackHighWaterMark>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_uxTaskGetStackHighWaterMark == 1 )

	UBaseType_t uxTaskGetStackHighWaterMark( TaskHandle_t xTask )
	{
   1b524:	b580      	push	{r7, lr}
   1b526:	b086      	sub	sp, #24
   1b528:	af00      	add	r7, sp, #0
   1b52a:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;
	uint8_t *pucEndOfStack;
	UBaseType_t uxReturn;

		pxTCB = prvGetTCBFromHandle( xTask );
   1b52c:	687b      	ldr	r3, [r7, #4]
   1b52e:	2b00      	cmp	r3, #0
   1b530:	d102      	bne.n	1b538 <uxTaskGetStackHighWaterMark+0x14>
   1b532:	4b09      	ldr	r3, [pc, #36]	; (1b558 <uxTaskGetStackHighWaterMark+0x34>)
   1b534:	681b      	ldr	r3, [r3, #0]
   1b536:	e000      	b.n	1b53a <uxTaskGetStackHighWaterMark+0x16>
   1b538:	687b      	ldr	r3, [r7, #4]
   1b53a:	617b      	str	r3, [r7, #20]

		#if portSTACK_GROWTH < 0
		{
			pucEndOfStack = ( uint8_t * ) pxTCB->pxStack;
   1b53c:	697b      	ldr	r3, [r7, #20]
   1b53e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   1b540:	613b      	str	r3, [r7, #16]
		{
			pucEndOfStack = ( uint8_t * ) pxTCB->pxEndOfStack;
		}
		#endif

		uxReturn = ( UBaseType_t ) prvTaskCheckFreeStackSpace( pucEndOfStack );
   1b542:	693b      	ldr	r3, [r7, #16]
   1b544:	0018      	movs	r0, r3
   1b546:	4b05      	ldr	r3, [pc, #20]	; (1b55c <uxTaskGetStackHighWaterMark+0x38>)
   1b548:	4798      	blx	r3
   1b54a:	0003      	movs	r3, r0
   1b54c:	60fb      	str	r3, [r7, #12]

		return uxReturn;
   1b54e:	68fb      	ldr	r3, [r7, #12]
	}
   1b550:	0018      	movs	r0, r3
   1b552:	46bd      	mov	sp, r7
   1b554:	b006      	add	sp, #24
   1b556:	bd80      	pop	{r7, pc}
   1b558:	20003b78 	.word	0x20003b78
   1b55c:	0001b4f1 	.word	0x0001b4f1

0001b560 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
   1b560:	b580      	push	{r7, lr}
   1b562:	b082      	sub	sp, #8
   1b564:	af00      	add	r7, sp, #0
   1b566:	6078      	str	r0, [r7, #4]

		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
		{
			/* The task can only have been allocated dynamically - free both
			the stack and TCB. */
			vPortFree( pxTCB->pxStack );
   1b568:	687b      	ldr	r3, [r7, #4]
   1b56a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   1b56c:	0018      	movs	r0, r3
   1b56e:	4b05      	ldr	r3, [pc, #20]	; (1b584 <prvDeleteTCB+0x24>)
   1b570:	4798      	blx	r3
			vPortFree( pxTCB );
   1b572:	687b      	ldr	r3, [r7, #4]
   1b574:	0018      	movs	r0, r3
   1b576:	4b03      	ldr	r3, [pc, #12]	; (1b584 <prvDeleteTCB+0x24>)
   1b578:	4798      	blx	r3
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
   1b57a:	46c0      	nop			; (mov r8, r8)
   1b57c:	46bd      	mov	sp, r7
   1b57e:	b002      	add	sp, #8
   1b580:	bd80      	pop	{r7, pc}
   1b582:	46c0      	nop			; (mov r8, r8)
   1b584:	00018ac5 	.word	0x00018ac5

0001b588 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
   1b588:	b580      	push	{r7, lr}
   1b58a:	b082      	sub	sp, #8
   1b58c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
   1b58e:	4b0e      	ldr	r3, [pc, #56]	; (1b5c8 <prvResetNextTaskUnblockTime+0x40>)
   1b590:	681b      	ldr	r3, [r3, #0]
   1b592:	681b      	ldr	r3, [r3, #0]
   1b594:	2b00      	cmp	r3, #0
   1b596:	d101      	bne.n	1b59c <prvResetNextTaskUnblockTime+0x14>
   1b598:	2301      	movs	r3, #1
   1b59a:	e000      	b.n	1b59e <prvResetNextTaskUnblockTime+0x16>
   1b59c:	2300      	movs	r3, #0
   1b59e:	2b00      	cmp	r3, #0
   1b5a0:	d004      	beq.n	1b5ac <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
   1b5a2:	4b0a      	ldr	r3, [pc, #40]	; (1b5cc <prvResetNextTaskUnblockTime+0x44>)
   1b5a4:	2201      	movs	r2, #1
   1b5a6:	4252      	negs	r2, r2
   1b5a8:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
   1b5aa:	e008      	b.n	1b5be <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
   1b5ac:	4b06      	ldr	r3, [pc, #24]	; (1b5c8 <prvResetNextTaskUnblockTime+0x40>)
   1b5ae:	681b      	ldr	r3, [r3, #0]
   1b5b0:	68db      	ldr	r3, [r3, #12]
   1b5b2:	68db      	ldr	r3, [r3, #12]
   1b5b4:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
   1b5b6:	687b      	ldr	r3, [r7, #4]
   1b5b8:	685a      	ldr	r2, [r3, #4]
   1b5ba:	4b04      	ldr	r3, [pc, #16]	; (1b5cc <prvResetNextTaskUnblockTime+0x44>)
   1b5bc:	601a      	str	r2, [r3, #0]
}
   1b5be:	46c0      	nop			; (mov r8, r8)
   1b5c0:	46bd      	mov	sp, r7
   1b5c2:	b002      	add	sp, #8
   1b5c4:	bd80      	pop	{r7, pc}
   1b5c6:	46c0      	nop			; (mov r8, r8)
   1b5c8:	20003c08 	.word	0x20003c08
   1b5cc:	20003c70 	.word	0x20003c70

0001b5d0 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
   1b5d0:	b580      	push	{r7, lr}
   1b5d2:	b082      	sub	sp, #8
   1b5d4:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
   1b5d6:	4b04      	ldr	r3, [pc, #16]	; (1b5e8 <xTaskGetCurrentTaskHandle+0x18>)
   1b5d8:	681b      	ldr	r3, [r3, #0]
   1b5da:	607b      	str	r3, [r7, #4]

		return xReturn;
   1b5dc:	687b      	ldr	r3, [r7, #4]
	}
   1b5de:	0018      	movs	r0, r3
   1b5e0:	46bd      	mov	sp, r7
   1b5e2:	b002      	add	sp, #8
   1b5e4:	bd80      	pop	{r7, pc}
   1b5e6:	46c0      	nop			; (mov r8, r8)
   1b5e8:	20003b78 	.word	0x20003b78

0001b5ec <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
   1b5ec:	b580      	push	{r7, lr}
   1b5ee:	b082      	sub	sp, #8
   1b5f0:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
   1b5f2:	4b0a      	ldr	r3, [pc, #40]	; (1b61c <xTaskGetSchedulerState+0x30>)
   1b5f4:	681b      	ldr	r3, [r3, #0]
   1b5f6:	2b00      	cmp	r3, #0
   1b5f8:	d102      	bne.n	1b600 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
   1b5fa:	2301      	movs	r3, #1
   1b5fc:	607b      	str	r3, [r7, #4]
   1b5fe:	e008      	b.n	1b612 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
   1b600:	4b07      	ldr	r3, [pc, #28]	; (1b620 <xTaskGetSchedulerState+0x34>)
   1b602:	681b      	ldr	r3, [r3, #0]
   1b604:	2b00      	cmp	r3, #0
   1b606:	d102      	bne.n	1b60e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
   1b608:	2302      	movs	r3, #2
   1b60a:	607b      	str	r3, [r7, #4]
   1b60c:	e001      	b.n	1b612 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
   1b60e:	2300      	movs	r3, #0
   1b610:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
   1b612:	687b      	ldr	r3, [r7, #4]
	}
   1b614:	0018      	movs	r0, r3
   1b616:	46bd      	mov	sp, r7
   1b618:	b002      	add	sp, #8
   1b61a:	bd80      	pop	{r7, pc}
   1b61c:	20003c5c 	.word	0x20003c5c
   1b620:	20003c78 	.word	0x20003c78

0001b624 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
   1b624:	b590      	push	{r4, r7, lr}
   1b626:	b085      	sub	sp, #20
   1b628:	af00      	add	r7, sp, #0
   1b62a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = ( TCB_t * ) pxMutexHolder;
   1b62c:	687b      	ldr	r3, [r7, #4]
   1b62e:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
   1b630:	2300      	movs	r3, #0
   1b632:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
   1b634:	687b      	ldr	r3, [r7, #4]
   1b636:	2b00      	cmp	r3, #0
   1b638:	d100      	bne.n	1b63c <xTaskPriorityInherit+0x18>
   1b63a:	e09d      	b.n	1b778 <xTaskPriorityInherit+0x154>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
   1b63c:	68bb      	ldr	r3, [r7, #8]
   1b63e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1b640:	4b50      	ldr	r3, [pc, #320]	; (1b784 <xTaskPriorityInherit+0x160>)
   1b642:	681b      	ldr	r3, [r3, #0]
   1b644:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   1b646:	429a      	cmp	r2, r3
   1b648:	d300      	bcc.n	1b64c <xTaskPriorityInherit+0x28>
   1b64a:	e08c      	b.n	1b766 <xTaskPriorityInherit+0x142>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
   1b64c:	68bb      	ldr	r3, [r7, #8]
   1b64e:	699b      	ldr	r3, [r3, #24]
   1b650:	2b00      	cmp	r3, #0
   1b652:	db06      	blt.n	1b662 <xTaskPriorityInherit+0x3e>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
   1b654:	4b4b      	ldr	r3, [pc, #300]	; (1b784 <xTaskPriorityInherit+0x160>)
   1b656:	681b      	ldr	r3, [r3, #0]
   1b658:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   1b65a:	2205      	movs	r2, #5
   1b65c:	1ad2      	subs	r2, r2, r3
   1b65e:	68bb      	ldr	r3, [r7, #8]
   1b660:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
   1b662:	68bb      	ldr	r3, [r7, #8]
   1b664:	6959      	ldr	r1, [r3, #20]
   1b666:	68bb      	ldr	r3, [r7, #8]
   1b668:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1b66a:	0013      	movs	r3, r2
   1b66c:	009b      	lsls	r3, r3, #2
   1b66e:	189b      	adds	r3, r3, r2
   1b670:	009b      	lsls	r3, r3, #2
   1b672:	4a45      	ldr	r2, [pc, #276]	; (1b788 <xTaskPriorityInherit+0x164>)
   1b674:	189b      	adds	r3, r3, r2
   1b676:	4299      	cmp	r1, r3
   1b678:	d101      	bne.n	1b67e <xTaskPriorityInherit+0x5a>
   1b67a:	2301      	movs	r3, #1
   1b67c:	e000      	b.n	1b680 <xTaskPriorityInherit+0x5c>
   1b67e:	2300      	movs	r3, #0
   1b680:	2b00      	cmp	r3, #0
   1b682:	d037      	beq.n	1b6f4 <xTaskPriorityInherit+0xd0>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
   1b684:	68bb      	ldr	r3, [r7, #8]
   1b686:	3304      	adds	r3, #4
   1b688:	0018      	movs	r0, r3
   1b68a:	4b40      	ldr	r3, [pc, #256]	; (1b78c <xTaskPriorityInherit+0x168>)
   1b68c:	4798      	blx	r3
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
   1b68e:	4b3d      	ldr	r3, [pc, #244]	; (1b784 <xTaskPriorityInherit+0x160>)
   1b690:	681b      	ldr	r3, [r3, #0]
   1b692:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1b694:	68bb      	ldr	r3, [r7, #8]
   1b696:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
   1b698:	68bb      	ldr	r3, [r7, #8]
   1b69a:	0018      	movs	r0, r3
   1b69c:	4b3c      	ldr	r3, [pc, #240]	; (1b790 <xTaskPriorityInherit+0x16c>)
   1b69e:	4798      	blx	r3
   1b6a0:	0003      	movs	r3, r0
   1b6a2:	001a      	movs	r2, r3
   1b6a4:	4b3b      	ldr	r3, [pc, #236]	; (1b794 <xTaskPriorityInherit+0x170>)
   1b6a6:	881b      	ldrh	r3, [r3, #0]
   1b6a8:	4013      	ands	r3, r2
   1b6aa:	b29b      	uxth	r3, r3
   1b6ac:	2b00      	cmp	r3, #0
   1b6ae:	d008      	beq.n	1b6c2 <xTaskPriorityInherit+0x9e>
   1b6b0:	68bb      	ldr	r3, [r7, #8]
   1b6b2:	0018      	movs	r0, r3
   1b6b4:	4b38      	ldr	r3, [pc, #224]	; (1b798 <xTaskPriorityInherit+0x174>)
   1b6b6:	4798      	blx	r3
   1b6b8:	0003      	movs	r3, r0
   1b6ba:	b2db      	uxtb	r3, r3
   1b6bc:	0018      	movs	r0, r3
   1b6be:	4b37      	ldr	r3, [pc, #220]	; (1b79c <xTaskPriorityInherit+0x178>)
   1b6c0:	4798      	blx	r3
   1b6c2:	68bb      	ldr	r3, [r7, #8]
   1b6c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1b6c6:	4b36      	ldr	r3, [pc, #216]	; (1b7a0 <xTaskPriorityInherit+0x17c>)
   1b6c8:	681b      	ldr	r3, [r3, #0]
   1b6ca:	429a      	cmp	r2, r3
   1b6cc:	d903      	bls.n	1b6d6 <xTaskPriorityInherit+0xb2>
   1b6ce:	68bb      	ldr	r3, [r7, #8]
   1b6d0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1b6d2:	4b33      	ldr	r3, [pc, #204]	; (1b7a0 <xTaskPriorityInherit+0x17c>)
   1b6d4:	601a      	str	r2, [r3, #0]
   1b6d6:	68bb      	ldr	r3, [r7, #8]
   1b6d8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1b6da:	0013      	movs	r3, r2
   1b6dc:	009b      	lsls	r3, r3, #2
   1b6de:	189b      	adds	r3, r3, r2
   1b6e0:	009b      	lsls	r3, r3, #2
   1b6e2:	4a29      	ldr	r2, [pc, #164]	; (1b788 <xTaskPriorityInherit+0x164>)
   1b6e4:	189a      	adds	r2, r3, r2
   1b6e6:	68bb      	ldr	r3, [r7, #8]
   1b6e8:	3304      	adds	r3, #4
   1b6ea:	0019      	movs	r1, r3
   1b6ec:	0010      	movs	r0, r2
   1b6ee:	4b2d      	ldr	r3, [pc, #180]	; (1b7a4 <xTaskPriorityInherit+0x180>)
   1b6f0:	4798      	blx	r3
   1b6f2:	e004      	b.n	1b6fe <xTaskPriorityInherit+0xda>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
   1b6f4:	4b23      	ldr	r3, [pc, #140]	; (1b784 <xTaskPriorityInherit+0x160>)
   1b6f6:	681b      	ldr	r3, [r3, #0]
   1b6f8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1b6fa:	68bb      	ldr	r3, [r7, #8]
   1b6fc:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );
   1b6fe:	68bb      	ldr	r3, [r7, #8]
   1b700:	0018      	movs	r0, r3
   1b702:	4b23      	ldr	r3, [pc, #140]	; (1b790 <xTaskPriorityInherit+0x16c>)
   1b704:	4798      	blx	r3
   1b706:	0003      	movs	r3, r0
   1b708:	001a      	movs	r2, r3
   1b70a:	4b22      	ldr	r3, [pc, #136]	; (1b794 <xTaskPriorityInherit+0x170>)
   1b70c:	881b      	ldrh	r3, [r3, #0]
   1b70e:	4013      	ands	r3, r2
   1b710:	b29b      	uxth	r3, r3
   1b712:	2b00      	cmp	r3, #0
   1b714:	d024      	beq.n	1b760 <xTaskPriorityInherit+0x13c>
   1b716:	68bb      	ldr	r3, [r7, #8]
   1b718:	0018      	movs	r0, r3
   1b71a:	4b1f      	ldr	r3, [pc, #124]	; (1b798 <xTaskPriorityInherit+0x174>)
   1b71c:	4798      	blx	r3
   1b71e:	0003      	movs	r3, r0
   1b720:	b2db      	uxtb	r3, r3
   1b722:	001c      	movs	r4, r3
   1b724:	68bb      	ldr	r3, [r7, #8]
   1b726:	0018      	movs	r0, r3
   1b728:	4b1b      	ldr	r3, [pc, #108]	; (1b798 <xTaskPriorityInherit+0x174>)
   1b72a:	4798      	blx	r3
   1b72c:	0003      	movs	r3, r0
   1b72e:	b2db      	uxtb	r3, r3
   1b730:	0019      	movs	r1, r3
   1b732:	2003      	movs	r0, #3
   1b734:	4b1c      	ldr	r3, [pc, #112]	; (1b7a8 <xTaskPriorityInherit+0x184>)
   1b736:	4798      	blx	r3
   1b738:	0003      	movs	r3, r0
   1b73a:	0022      	movs	r2, r4
   1b73c:	2103      	movs	r1, #3
   1b73e:	208e      	movs	r0, #142	; 0x8e
   1b740:	4c1a      	ldr	r4, [pc, #104]	; (1b7ac <xTaskPriorityInherit+0x188>)
   1b742:	47a0      	blx	r4
   1b744:	68bb      	ldr	r3, [r7, #8]
   1b746:	0018      	movs	r0, r3
   1b748:	4b13      	ldr	r3, [pc, #76]	; (1b798 <xTaskPriorityInherit+0x174>)
   1b74a:	4798      	blx	r3
   1b74c:	0003      	movs	r3, r0
   1b74e:	b2d9      	uxtb	r1, r3
   1b750:	4b0c      	ldr	r3, [pc, #48]	; (1b784 <xTaskPriorityInherit+0x160>)
   1b752:	681b      	ldr	r3, [r3, #0]
   1b754:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   1b756:	b2db      	uxtb	r3, r3
   1b758:	001a      	movs	r2, r3
   1b75a:	2003      	movs	r0, #3
   1b75c:	4b14      	ldr	r3, [pc, #80]	; (1b7b0 <xTaskPriorityInherit+0x18c>)
   1b75e:	4798      	blx	r3

				/* Inheritance occurred. */
				xReturn = pdTRUE;
   1b760:	2301      	movs	r3, #1
   1b762:	60fb      	str	r3, [r7, #12]
   1b764:	e008      	b.n	1b778 <xTaskPriorityInherit+0x154>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
   1b766:	68bb      	ldr	r3, [r7, #8]
   1b768:	6c5a      	ldr	r2, [r3, #68]	; 0x44
   1b76a:	4b06      	ldr	r3, [pc, #24]	; (1b784 <xTaskPriorityInherit+0x160>)
   1b76c:	681b      	ldr	r3, [r3, #0]
   1b76e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   1b770:	429a      	cmp	r2, r3
   1b772:	d201      	bcs.n	1b778 <xTaskPriorityInherit+0x154>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
   1b774:	2301      	movs	r3, #1
   1b776:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
   1b778:	68fb      	ldr	r3, [r7, #12]
	}
   1b77a:	0018      	movs	r0, r3
   1b77c:	46bd      	mov	sp, r7
   1b77e:	b005      	add	sp, #20
   1b780:	bd90      	pop	{r4, r7, pc}
   1b782:	46c0      	nop			; (mov r8, r8)
   1b784:	20003b78 	.word	0x20003b78
   1b788:	20003b7c 	.word	0x20003b7c
   1b78c:	0001873b 	.word	0x0001873b
   1b790:	000168c1 	.word	0x000168c1
   1b794:	20000120 	.word	0x20000120
   1b798:	000168a1 	.word	0x000168a1
   1b79c:	00017071 	.word	0x00017071
   1b7a0:	20003c58 	.word	0x20003c58
   1b7a4:	0001868b 	.word	0x0001868b
   1b7a8:	00017879 	.word	0x00017879
   1b7ac:	000173e9 	.word	0x000173e9
   1b7b0:	000177d5 	.word	0x000177d5

0001b7b4 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
   1b7b4:	b590      	push	{r4, r7, lr}
   1b7b6:	b085      	sub	sp, #20
   1b7b8:	af00      	add	r7, sp, #0
   1b7ba:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
   1b7bc:	687b      	ldr	r3, [r7, #4]
   1b7be:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
   1b7c0:	2300      	movs	r3, #0
   1b7c2:	60fb      	str	r3, [r7, #12]

		if( pxMutexHolder != NULL )
   1b7c4:	687b      	ldr	r3, [r7, #4]
   1b7c6:	2b00      	cmp	r3, #0
   1b7c8:	d100      	bne.n	1b7cc <xTaskPriorityDisinherit+0x18>
   1b7ca:	e089      	b.n	1b8e0 <xTaskPriorityDisinherit+0x12c>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
   1b7cc:	4b47      	ldr	r3, [pc, #284]	; (1b8ec <xTaskPriorityDisinherit+0x138>)
   1b7ce:	681b      	ldr	r3, [r3, #0]
   1b7d0:	68ba      	ldr	r2, [r7, #8]
   1b7d2:	429a      	cmp	r2, r3
   1b7d4:	d001      	beq.n	1b7da <xTaskPriorityDisinherit+0x26>
   1b7d6:	b672      	cpsid	i
   1b7d8:	e7fe      	b.n	1b7d8 <xTaskPriorityDisinherit+0x24>
			configASSERT( pxTCB->uxMutexesHeld );
   1b7da:	68bb      	ldr	r3, [r7, #8]
   1b7dc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   1b7de:	2b00      	cmp	r3, #0
   1b7e0:	d101      	bne.n	1b7e6 <xTaskPriorityDisinherit+0x32>
   1b7e2:	b672      	cpsid	i
   1b7e4:	e7fe      	b.n	1b7e4 <xTaskPriorityDisinherit+0x30>
			( pxTCB->uxMutexesHeld )--;
   1b7e6:	68bb      	ldr	r3, [r7, #8]
   1b7e8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   1b7ea:	1e5a      	subs	r2, r3, #1
   1b7ec:	68bb      	ldr	r3, [r7, #8]
   1b7ee:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
   1b7f0:	68bb      	ldr	r3, [r7, #8]
   1b7f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1b7f4:	68bb      	ldr	r3, [r7, #8]
   1b7f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   1b7f8:	429a      	cmp	r2, r3
   1b7fa:	d071      	beq.n	1b8e0 <xTaskPriorityDisinherit+0x12c>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
   1b7fc:	68bb      	ldr	r3, [r7, #8]
   1b7fe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   1b800:	2b00      	cmp	r3, #0
   1b802:	d16d      	bne.n	1b8e0 <xTaskPriorityDisinherit+0x12c>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
   1b804:	68bb      	ldr	r3, [r7, #8]
   1b806:	3304      	adds	r3, #4
   1b808:	0018      	movs	r0, r3
   1b80a:	4b39      	ldr	r3, [pc, #228]	; (1b8f0 <xTaskPriorityDisinherit+0x13c>)
   1b80c:	4798      	blx	r3
						mtCOVERAGE_TEST_MARKER();
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
   1b80e:	68bb      	ldr	r3, [r7, #8]
   1b810:	0018      	movs	r0, r3
   1b812:	4b38      	ldr	r3, [pc, #224]	; (1b8f4 <xTaskPriorityDisinherit+0x140>)
   1b814:	4798      	blx	r3
   1b816:	0003      	movs	r3, r0
   1b818:	001a      	movs	r2, r3
   1b81a:	4b37      	ldr	r3, [pc, #220]	; (1b8f8 <xTaskPriorityDisinherit+0x144>)
   1b81c:	881b      	ldrh	r3, [r3, #0]
   1b81e:	4013      	ands	r3, r2
   1b820:	b29b      	uxth	r3, r3
   1b822:	2b00      	cmp	r3, #0
   1b824:	d023      	beq.n	1b86e <xTaskPriorityDisinherit+0xba>
   1b826:	68bb      	ldr	r3, [r7, #8]
   1b828:	0018      	movs	r0, r3
   1b82a:	4b34      	ldr	r3, [pc, #208]	; (1b8fc <xTaskPriorityDisinherit+0x148>)
   1b82c:	4798      	blx	r3
   1b82e:	0003      	movs	r3, r0
   1b830:	b2db      	uxtb	r3, r3
   1b832:	001c      	movs	r4, r3
   1b834:	68bb      	ldr	r3, [r7, #8]
   1b836:	0018      	movs	r0, r3
   1b838:	4b30      	ldr	r3, [pc, #192]	; (1b8fc <xTaskPriorityDisinherit+0x148>)
   1b83a:	4798      	blx	r3
   1b83c:	0003      	movs	r3, r0
   1b83e:	b2db      	uxtb	r3, r3
   1b840:	0019      	movs	r1, r3
   1b842:	2003      	movs	r0, #3
   1b844:	4b2e      	ldr	r3, [pc, #184]	; (1b900 <xTaskPriorityDisinherit+0x14c>)
   1b846:	4798      	blx	r3
   1b848:	0003      	movs	r3, r0
   1b84a:	0022      	movs	r2, r4
   1b84c:	2103      	movs	r1, #3
   1b84e:	208f      	movs	r0, #143	; 0x8f
   1b850:	4c2c      	ldr	r4, [pc, #176]	; (1b904 <xTaskPriorityDisinherit+0x150>)
   1b852:	47a0      	blx	r4
   1b854:	68bb      	ldr	r3, [r7, #8]
   1b856:	0018      	movs	r0, r3
   1b858:	4b28      	ldr	r3, [pc, #160]	; (1b8fc <xTaskPriorityDisinherit+0x148>)
   1b85a:	4798      	blx	r3
   1b85c:	0003      	movs	r3, r0
   1b85e:	b2d9      	uxtb	r1, r3
   1b860:	68bb      	ldr	r3, [r7, #8]
   1b862:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   1b864:	b2db      	uxtb	r3, r3
   1b866:	001a      	movs	r2, r3
   1b868:	2003      	movs	r0, #3
   1b86a:	4b27      	ldr	r3, [pc, #156]	; (1b908 <xTaskPriorityDisinherit+0x154>)
   1b86c:	4798      	blx	r3
					pxTCB->uxPriority = pxTCB->uxBasePriority;
   1b86e:	68bb      	ldr	r3, [r7, #8]
   1b870:	6c5a      	ldr	r2, [r3, #68]	; 0x44
   1b872:	68bb      	ldr	r3, [r7, #8]
   1b874:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
   1b876:	68bb      	ldr	r3, [r7, #8]
   1b878:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   1b87a:	2205      	movs	r2, #5
   1b87c:	1ad2      	subs	r2, r2, r3
   1b87e:	68bb      	ldr	r3, [r7, #8]
   1b880:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
   1b882:	68bb      	ldr	r3, [r7, #8]
   1b884:	0018      	movs	r0, r3
   1b886:	4b1b      	ldr	r3, [pc, #108]	; (1b8f4 <xTaskPriorityDisinherit+0x140>)
   1b888:	4798      	blx	r3
   1b88a:	0003      	movs	r3, r0
   1b88c:	001a      	movs	r2, r3
   1b88e:	4b1a      	ldr	r3, [pc, #104]	; (1b8f8 <xTaskPriorityDisinherit+0x144>)
   1b890:	881b      	ldrh	r3, [r3, #0]
   1b892:	4013      	ands	r3, r2
   1b894:	b29b      	uxth	r3, r3
   1b896:	2b00      	cmp	r3, #0
   1b898:	d008      	beq.n	1b8ac <xTaskPriorityDisinherit+0xf8>
   1b89a:	68bb      	ldr	r3, [r7, #8]
   1b89c:	0018      	movs	r0, r3
   1b89e:	4b17      	ldr	r3, [pc, #92]	; (1b8fc <xTaskPriorityDisinherit+0x148>)
   1b8a0:	4798      	blx	r3
   1b8a2:	0003      	movs	r3, r0
   1b8a4:	b2db      	uxtb	r3, r3
   1b8a6:	0018      	movs	r0, r3
   1b8a8:	4b18      	ldr	r3, [pc, #96]	; (1b90c <xTaskPriorityDisinherit+0x158>)
   1b8aa:	4798      	blx	r3
   1b8ac:	68bb      	ldr	r3, [r7, #8]
   1b8ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1b8b0:	4b17      	ldr	r3, [pc, #92]	; (1b910 <xTaskPriorityDisinherit+0x15c>)
   1b8b2:	681b      	ldr	r3, [r3, #0]
   1b8b4:	429a      	cmp	r2, r3
   1b8b6:	d903      	bls.n	1b8c0 <xTaskPriorityDisinherit+0x10c>
   1b8b8:	68bb      	ldr	r3, [r7, #8]
   1b8ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1b8bc:	4b14      	ldr	r3, [pc, #80]	; (1b910 <xTaskPriorityDisinherit+0x15c>)
   1b8be:	601a      	str	r2, [r3, #0]
   1b8c0:	68bb      	ldr	r3, [r7, #8]
   1b8c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1b8c4:	0013      	movs	r3, r2
   1b8c6:	009b      	lsls	r3, r3, #2
   1b8c8:	189b      	adds	r3, r3, r2
   1b8ca:	009b      	lsls	r3, r3, #2
   1b8cc:	4a11      	ldr	r2, [pc, #68]	; (1b914 <xTaskPriorityDisinherit+0x160>)
   1b8ce:	189a      	adds	r2, r3, r2
   1b8d0:	68bb      	ldr	r3, [r7, #8]
   1b8d2:	3304      	adds	r3, #4
   1b8d4:	0019      	movs	r1, r3
   1b8d6:	0010      	movs	r0, r2
   1b8d8:	4b0f      	ldr	r3, [pc, #60]	; (1b918 <xTaskPriorityDisinherit+0x164>)
   1b8da:	4798      	blx	r3
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
   1b8dc:	2301      	movs	r3, #1
   1b8de:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
   1b8e0:	68fb      	ldr	r3, [r7, #12]
	}
   1b8e2:	0018      	movs	r0, r3
   1b8e4:	46bd      	mov	sp, r7
   1b8e6:	b005      	add	sp, #20
   1b8e8:	bd90      	pop	{r4, r7, pc}
   1b8ea:	46c0      	nop			; (mov r8, r8)
   1b8ec:	20003b78 	.word	0x20003b78
   1b8f0:	0001873b 	.word	0x0001873b
   1b8f4:	000168c1 	.word	0x000168c1
   1b8f8:	20000120 	.word	0x20000120
   1b8fc:	000168a1 	.word	0x000168a1
   1b900:	00017879 	.word	0x00017879
   1b904:	000173e9 	.word	0x000173e9
   1b908:	000177d5 	.word	0x000177d5
   1b90c:	00017071 	.word	0x00017071
   1b910:	20003c58 	.word	0x20003c58
   1b914:	20003b7c 	.word	0x20003b7c
   1b918:	0001868b 	.word	0x0001868b

0001b91c <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
   1b91c:	b590      	push	{r4, r7, lr}
   1b91e:	b087      	sub	sp, #28
   1b920:	af00      	add	r7, sp, #0
   1b922:	6078      	str	r0, [r7, #4]
   1b924:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
   1b926:	687b      	ldr	r3, [r7, #4]
   1b928:	613b      	str	r3, [r7, #16]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
   1b92a:	2301      	movs	r3, #1
   1b92c:	60fb      	str	r3, [r7, #12]

		if( pxMutexHolder != NULL )
   1b92e:	687b      	ldr	r3, [r7, #4]
   1b930:	2b00      	cmp	r3, #0
   1b932:	d100      	bne.n	1b936 <vTaskPriorityDisinheritAfterTimeout+0x1a>
   1b934:	e0a4      	b.n	1ba80 <vTaskPriorityDisinheritAfterTimeout+0x164>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
   1b936:	693b      	ldr	r3, [r7, #16]
   1b938:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   1b93a:	2b00      	cmp	r3, #0
   1b93c:	d101      	bne.n	1b942 <vTaskPriorityDisinheritAfterTimeout+0x26>
   1b93e:	b672      	cpsid	i
   1b940:	e7fe      	b.n	1b940 <vTaskPriorityDisinheritAfterTimeout+0x24>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
   1b942:	693b      	ldr	r3, [r7, #16]
   1b944:	6c5a      	ldr	r2, [r3, #68]	; 0x44
   1b946:	683b      	ldr	r3, [r7, #0]
   1b948:	429a      	cmp	r2, r3
   1b94a:	d202      	bcs.n	1b952 <vTaskPriorityDisinheritAfterTimeout+0x36>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
   1b94c:	683b      	ldr	r3, [r7, #0]
   1b94e:	617b      	str	r3, [r7, #20]
   1b950:	e002      	b.n	1b958 <vTaskPriorityDisinheritAfterTimeout+0x3c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
   1b952:	693b      	ldr	r3, [r7, #16]
   1b954:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   1b956:	617b      	str	r3, [r7, #20]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
   1b958:	693b      	ldr	r3, [r7, #16]
   1b95a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1b95c:	697b      	ldr	r3, [r7, #20]
   1b95e:	429a      	cmp	r2, r3
   1b960:	d100      	bne.n	1b964 <vTaskPriorityDisinheritAfterTimeout+0x48>
   1b962:	e08d      	b.n	1ba80 <vTaskPriorityDisinheritAfterTimeout+0x164>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
   1b964:	693b      	ldr	r3, [r7, #16]
   1b966:	6c9a      	ldr	r2, [r3, #72]	; 0x48
   1b968:	68fb      	ldr	r3, [r7, #12]
   1b96a:	429a      	cmp	r2, r3
   1b96c:	d000      	beq.n	1b970 <vTaskPriorityDisinheritAfterTimeout+0x54>
   1b96e:	e087      	b.n	1ba80 <vTaskPriorityDisinheritAfterTimeout+0x164>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
   1b970:	4b45      	ldr	r3, [pc, #276]	; (1ba88 <vTaskPriorityDisinheritAfterTimeout+0x16c>)
   1b972:	681b      	ldr	r3, [r3, #0]
   1b974:	693a      	ldr	r2, [r7, #16]
   1b976:	429a      	cmp	r2, r3
   1b978:	d101      	bne.n	1b97e <vTaskPriorityDisinheritAfterTimeout+0x62>
   1b97a:	b672      	cpsid	i
   1b97c:	e7fe      	b.n	1b97c <vTaskPriorityDisinheritAfterTimeout+0x60>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
   1b97e:	693b      	ldr	r3, [r7, #16]
   1b980:	0018      	movs	r0, r3
   1b982:	4b42      	ldr	r3, [pc, #264]	; (1ba8c <vTaskPriorityDisinheritAfterTimeout+0x170>)
   1b984:	4798      	blx	r3
   1b986:	0003      	movs	r3, r0
   1b988:	001a      	movs	r2, r3
   1b98a:	4b41      	ldr	r3, [pc, #260]	; (1ba90 <vTaskPriorityDisinheritAfterTimeout+0x174>)
   1b98c:	881b      	ldrh	r3, [r3, #0]
   1b98e:	4013      	ands	r3, r2
   1b990:	b29b      	uxth	r3, r3
   1b992:	2b00      	cmp	r3, #0
   1b994:	d023      	beq.n	1b9de <vTaskPriorityDisinheritAfterTimeout+0xc2>
   1b996:	693b      	ldr	r3, [r7, #16]
   1b998:	0018      	movs	r0, r3
   1b99a:	4b3e      	ldr	r3, [pc, #248]	; (1ba94 <vTaskPriorityDisinheritAfterTimeout+0x178>)
   1b99c:	4798      	blx	r3
   1b99e:	0003      	movs	r3, r0
   1b9a0:	b2db      	uxtb	r3, r3
   1b9a2:	001c      	movs	r4, r3
   1b9a4:	693b      	ldr	r3, [r7, #16]
   1b9a6:	0018      	movs	r0, r3
   1b9a8:	4b3a      	ldr	r3, [pc, #232]	; (1ba94 <vTaskPriorityDisinheritAfterTimeout+0x178>)
   1b9aa:	4798      	blx	r3
   1b9ac:	0003      	movs	r3, r0
   1b9ae:	b2db      	uxtb	r3, r3
   1b9b0:	0019      	movs	r1, r3
   1b9b2:	2003      	movs	r0, #3
   1b9b4:	4b38      	ldr	r3, [pc, #224]	; (1ba98 <vTaskPriorityDisinheritAfterTimeout+0x17c>)
   1b9b6:	4798      	blx	r3
   1b9b8:	0003      	movs	r3, r0
   1b9ba:	0022      	movs	r2, r4
   1b9bc:	2103      	movs	r1, #3
   1b9be:	208f      	movs	r0, #143	; 0x8f
   1b9c0:	4c36      	ldr	r4, [pc, #216]	; (1ba9c <vTaskPriorityDisinheritAfterTimeout+0x180>)
   1b9c2:	47a0      	blx	r4
   1b9c4:	693b      	ldr	r3, [r7, #16]
   1b9c6:	0018      	movs	r0, r3
   1b9c8:	4b32      	ldr	r3, [pc, #200]	; (1ba94 <vTaskPriorityDisinheritAfterTimeout+0x178>)
   1b9ca:	4798      	blx	r3
   1b9cc:	0003      	movs	r3, r0
   1b9ce:	b2d9      	uxtb	r1, r3
   1b9d0:	693b      	ldr	r3, [r7, #16]
   1b9d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   1b9d4:	b2db      	uxtb	r3, r3
   1b9d6:	001a      	movs	r2, r3
   1b9d8:	2003      	movs	r0, #3
   1b9da:	4b31      	ldr	r3, [pc, #196]	; (1baa0 <vTaskPriorityDisinheritAfterTimeout+0x184>)
   1b9dc:	4798      	blx	r3
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
   1b9de:	693b      	ldr	r3, [r7, #16]
   1b9e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   1b9e2:	60bb      	str	r3, [r7, #8]
					pxTCB->uxPriority = uxPriorityToUse;
   1b9e4:	693b      	ldr	r3, [r7, #16]
   1b9e6:	697a      	ldr	r2, [r7, #20]
   1b9e8:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
   1b9ea:	693b      	ldr	r3, [r7, #16]
   1b9ec:	699b      	ldr	r3, [r3, #24]
   1b9ee:	2b00      	cmp	r3, #0
   1b9f0:	db04      	blt.n	1b9fc <vTaskPriorityDisinheritAfterTimeout+0xe0>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
   1b9f2:	697b      	ldr	r3, [r7, #20]
   1b9f4:	2205      	movs	r2, #5
   1b9f6:	1ad2      	subs	r2, r2, r3
   1b9f8:	693b      	ldr	r3, [r7, #16]
   1b9fa:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
   1b9fc:	693b      	ldr	r3, [r7, #16]
   1b9fe:	6959      	ldr	r1, [r3, #20]
   1ba00:	68ba      	ldr	r2, [r7, #8]
   1ba02:	0013      	movs	r3, r2
   1ba04:	009b      	lsls	r3, r3, #2
   1ba06:	189b      	adds	r3, r3, r2
   1ba08:	009b      	lsls	r3, r3, #2
   1ba0a:	4a26      	ldr	r2, [pc, #152]	; (1baa4 <vTaskPriorityDisinheritAfterTimeout+0x188>)
   1ba0c:	189b      	adds	r3, r3, r2
   1ba0e:	4299      	cmp	r1, r3
   1ba10:	d101      	bne.n	1ba16 <vTaskPriorityDisinheritAfterTimeout+0xfa>
   1ba12:	2301      	movs	r3, #1
   1ba14:	e000      	b.n	1ba18 <vTaskPriorityDisinheritAfterTimeout+0xfc>
   1ba16:	2300      	movs	r3, #0
   1ba18:	2b00      	cmp	r3, #0
   1ba1a:	d031      	beq.n	1ba80 <vTaskPriorityDisinheritAfterTimeout+0x164>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
   1ba1c:	693b      	ldr	r3, [r7, #16]
   1ba1e:	3304      	adds	r3, #4
   1ba20:	0018      	movs	r0, r3
   1ba22:	4b21      	ldr	r3, [pc, #132]	; (1baa8 <vTaskPriorityDisinheritAfterTimeout+0x18c>)
   1ba24:	4798      	blx	r3
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
   1ba26:	693b      	ldr	r3, [r7, #16]
   1ba28:	0018      	movs	r0, r3
   1ba2a:	4b18      	ldr	r3, [pc, #96]	; (1ba8c <vTaskPriorityDisinheritAfterTimeout+0x170>)
   1ba2c:	4798      	blx	r3
   1ba2e:	0003      	movs	r3, r0
   1ba30:	001a      	movs	r2, r3
   1ba32:	4b17      	ldr	r3, [pc, #92]	; (1ba90 <vTaskPriorityDisinheritAfterTimeout+0x174>)
   1ba34:	881b      	ldrh	r3, [r3, #0]
   1ba36:	4013      	ands	r3, r2
   1ba38:	b29b      	uxth	r3, r3
   1ba3a:	2b00      	cmp	r3, #0
   1ba3c:	d008      	beq.n	1ba50 <vTaskPriorityDisinheritAfterTimeout+0x134>
   1ba3e:	693b      	ldr	r3, [r7, #16]
   1ba40:	0018      	movs	r0, r3
   1ba42:	4b14      	ldr	r3, [pc, #80]	; (1ba94 <vTaskPriorityDisinheritAfterTimeout+0x178>)
   1ba44:	4798      	blx	r3
   1ba46:	0003      	movs	r3, r0
   1ba48:	b2db      	uxtb	r3, r3
   1ba4a:	0018      	movs	r0, r3
   1ba4c:	4b17      	ldr	r3, [pc, #92]	; (1baac <vTaskPriorityDisinheritAfterTimeout+0x190>)
   1ba4e:	4798      	blx	r3
   1ba50:	693b      	ldr	r3, [r7, #16]
   1ba52:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1ba54:	4b16      	ldr	r3, [pc, #88]	; (1bab0 <vTaskPriorityDisinheritAfterTimeout+0x194>)
   1ba56:	681b      	ldr	r3, [r3, #0]
   1ba58:	429a      	cmp	r2, r3
   1ba5a:	d903      	bls.n	1ba64 <vTaskPriorityDisinheritAfterTimeout+0x148>
   1ba5c:	693b      	ldr	r3, [r7, #16]
   1ba5e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1ba60:	4b13      	ldr	r3, [pc, #76]	; (1bab0 <vTaskPriorityDisinheritAfterTimeout+0x194>)
   1ba62:	601a      	str	r2, [r3, #0]
   1ba64:	693b      	ldr	r3, [r7, #16]
   1ba66:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1ba68:	0013      	movs	r3, r2
   1ba6a:	009b      	lsls	r3, r3, #2
   1ba6c:	189b      	adds	r3, r3, r2
   1ba6e:	009b      	lsls	r3, r3, #2
   1ba70:	4a0c      	ldr	r2, [pc, #48]	; (1baa4 <vTaskPriorityDisinheritAfterTimeout+0x188>)
   1ba72:	189a      	adds	r2, r3, r2
   1ba74:	693b      	ldr	r3, [r7, #16]
   1ba76:	3304      	adds	r3, #4
   1ba78:	0019      	movs	r1, r3
   1ba7a:	0010      	movs	r0, r2
   1ba7c:	4b0d      	ldr	r3, [pc, #52]	; (1bab4 <vTaskPriorityDisinheritAfterTimeout+0x198>)
   1ba7e:	4798      	blx	r3
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
   1ba80:	46c0      	nop			; (mov r8, r8)
   1ba82:	46bd      	mov	sp, r7
   1ba84:	b007      	add	sp, #28
   1ba86:	bd90      	pop	{r4, r7, pc}
   1ba88:	20003b78 	.word	0x20003b78
   1ba8c:	000168c1 	.word	0x000168c1
   1ba90:	20000120 	.word	0x20000120
   1ba94:	000168a1 	.word	0x000168a1
   1ba98:	00017879 	.word	0x00017879
   1ba9c:	000173e9 	.word	0x000173e9
   1baa0:	000177d5 	.word	0x000177d5
   1baa4:	20003b7c 	.word	0x20003b7c
   1baa8:	0001873b 	.word	0x0001873b
   1baac:	00017071 	.word	0x00017071
   1bab0:	20003c58 	.word	0x20003c58
   1bab4:	0001868b 	.word	0x0001868b

0001bab8 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void *pvTaskIncrementMutexHeldCount( void )
	{
   1bab8:	b580      	push	{r7, lr}
   1baba:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
   1babc:	4b06      	ldr	r3, [pc, #24]	; (1bad8 <pvTaskIncrementMutexHeldCount+0x20>)
   1babe:	681b      	ldr	r3, [r3, #0]
   1bac0:	2b00      	cmp	r3, #0
   1bac2:	d004      	beq.n	1bace <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
   1bac4:	4b04      	ldr	r3, [pc, #16]	; (1bad8 <pvTaskIncrementMutexHeldCount+0x20>)
   1bac6:	681b      	ldr	r3, [r3, #0]
   1bac8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
   1baca:	3201      	adds	r2, #1
   1bacc:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
   1bace:	4b02      	ldr	r3, [pc, #8]	; (1bad8 <pvTaskIncrementMutexHeldCount+0x20>)
   1bad0:	681b      	ldr	r3, [r3, #0]
	}
   1bad2:	0018      	movs	r0, r3
   1bad4:	46bd      	mov	sp, r7
   1bad6:	bd80      	pop	{r7, pc}
   1bad8:	20003b78 	.word	0x20003b78

0001badc <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
   1badc:	b580      	push	{r7, lr}
   1bade:	b084      	sub	sp, #16
   1bae0:	af00      	add	r7, sp, #0
   1bae2:	6078      	str	r0, [r7, #4]
   1bae4:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
   1bae6:	4b21      	ldr	r3, [pc, #132]	; (1bb6c <prvAddCurrentTaskToDelayedList+0x90>)
   1bae8:	681b      	ldr	r3, [r3, #0]
   1baea:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
   1baec:	4b20      	ldr	r3, [pc, #128]	; (1bb70 <prvAddCurrentTaskToDelayedList+0x94>)
   1baee:	681b      	ldr	r3, [r3, #0]
   1baf0:	3304      	adds	r3, #4
   1baf2:	0018      	movs	r0, r3
   1baf4:	4b1f      	ldr	r3, [pc, #124]	; (1bb74 <prvAddCurrentTaskToDelayedList+0x98>)
   1baf6:	4798      	blx	r3
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
   1baf8:	687b      	ldr	r3, [r7, #4]
   1bafa:	3301      	adds	r3, #1
   1bafc:	d10b      	bne.n	1bb16 <prvAddCurrentTaskToDelayedList+0x3a>
   1bafe:	683b      	ldr	r3, [r7, #0]
   1bb00:	2b00      	cmp	r3, #0
   1bb02:	d008      	beq.n	1bb16 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
   1bb04:	4b1a      	ldr	r3, [pc, #104]	; (1bb70 <prvAddCurrentTaskToDelayedList+0x94>)
   1bb06:	681b      	ldr	r3, [r3, #0]
   1bb08:	1d1a      	adds	r2, r3, #4
   1bb0a:	4b1b      	ldr	r3, [pc, #108]	; (1bb78 <prvAddCurrentTaskToDelayedList+0x9c>)
   1bb0c:	0011      	movs	r1, r2
   1bb0e:	0018      	movs	r0, r3
   1bb10:	4b1a      	ldr	r3, [pc, #104]	; (1bb7c <prvAddCurrentTaskToDelayedList+0xa0>)
   1bb12:	4798      	blx	r3

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
   1bb14:	e026      	b.n	1bb64 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
   1bb16:	68fa      	ldr	r2, [r7, #12]
   1bb18:	687b      	ldr	r3, [r7, #4]
   1bb1a:	18d3      	adds	r3, r2, r3
   1bb1c:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
   1bb1e:	4b14      	ldr	r3, [pc, #80]	; (1bb70 <prvAddCurrentTaskToDelayedList+0x94>)
   1bb20:	681b      	ldr	r3, [r3, #0]
   1bb22:	68ba      	ldr	r2, [r7, #8]
   1bb24:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
   1bb26:	68ba      	ldr	r2, [r7, #8]
   1bb28:	68fb      	ldr	r3, [r7, #12]
   1bb2a:	429a      	cmp	r2, r3
   1bb2c:	d209      	bcs.n	1bb42 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
   1bb2e:	4b14      	ldr	r3, [pc, #80]	; (1bb80 <prvAddCurrentTaskToDelayedList+0xa4>)
   1bb30:	681a      	ldr	r2, [r3, #0]
   1bb32:	4b0f      	ldr	r3, [pc, #60]	; (1bb70 <prvAddCurrentTaskToDelayedList+0x94>)
   1bb34:	681b      	ldr	r3, [r3, #0]
   1bb36:	3304      	adds	r3, #4
   1bb38:	0019      	movs	r1, r3
   1bb3a:	0010      	movs	r0, r2
   1bb3c:	4b11      	ldr	r3, [pc, #68]	; (1bb84 <prvAddCurrentTaskToDelayedList+0xa8>)
   1bb3e:	4798      	blx	r3
}
   1bb40:	e010      	b.n	1bb64 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
   1bb42:	4b11      	ldr	r3, [pc, #68]	; (1bb88 <prvAddCurrentTaskToDelayedList+0xac>)
   1bb44:	681a      	ldr	r2, [r3, #0]
   1bb46:	4b0a      	ldr	r3, [pc, #40]	; (1bb70 <prvAddCurrentTaskToDelayedList+0x94>)
   1bb48:	681b      	ldr	r3, [r3, #0]
   1bb4a:	3304      	adds	r3, #4
   1bb4c:	0019      	movs	r1, r3
   1bb4e:	0010      	movs	r0, r2
   1bb50:	4b0c      	ldr	r3, [pc, #48]	; (1bb84 <prvAddCurrentTaskToDelayedList+0xa8>)
   1bb52:	4798      	blx	r3
				if( xTimeToWake < xNextTaskUnblockTime )
   1bb54:	4b0d      	ldr	r3, [pc, #52]	; (1bb8c <prvAddCurrentTaskToDelayedList+0xb0>)
   1bb56:	681b      	ldr	r3, [r3, #0]
   1bb58:	68ba      	ldr	r2, [r7, #8]
   1bb5a:	429a      	cmp	r2, r3
   1bb5c:	d202      	bcs.n	1bb64 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
   1bb5e:	4b0b      	ldr	r3, [pc, #44]	; (1bb8c <prvAddCurrentTaskToDelayedList+0xb0>)
   1bb60:	68ba      	ldr	r2, [r7, #8]
   1bb62:	601a      	str	r2, [r3, #0]
}
   1bb64:	46c0      	nop			; (mov r8, r8)
   1bb66:	46bd      	mov	sp, r7
   1bb68:	b004      	add	sp, #16
   1bb6a:	bd80      	pop	{r7, pc}
   1bb6c:	20003c54 	.word	0x20003c54
   1bb70:	20003b78 	.word	0x20003b78
   1bb74:	0001873b 	.word	0x0001873b
   1bb78:	20003c3c 	.word	0x20003c3c
   1bb7c:	0001868b 	.word	0x0001868b
   1bb80:	20003c0c 	.word	0x20003c0c
   1bb84:	000186cf 	.word	0x000186cf
   1bb88:	20003c08 	.word	0x20003c08
   1bb8c:	20003c70 	.word	0x20003c70

0001bb90 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
   1bb90:	b590      	push	{r4, r7, lr}
   1bb92:	b085      	sub	sp, #20
   1bb94:	af02      	add	r7, sp, #8
BaseType_t xReturn = pdFAIL;
   1bb96:	2300      	movs	r3, #0
   1bb98:	607b      	str	r3, [r7, #4]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
   1bb9a:	4b0e      	ldr	r3, [pc, #56]	; (1bbd4 <xTimerCreateTimerTask+0x44>)
   1bb9c:	4798      	blx	r3

	if( xTimerQueue != NULL )
   1bb9e:	4b0e      	ldr	r3, [pc, #56]	; (1bbd8 <xTimerCreateTimerTask+0x48>)
   1bba0:	681b      	ldr	r3, [r3, #0]
   1bba2:	2b00      	cmp	r3, #0
   1bba4:	d00b      	beq.n	1bbbe <xTimerCreateTimerTask+0x2e>
				xReturn = pdPASS;
			}
		}
		#else
		{
			xReturn = xTaskCreate(	prvTimerTask,
   1bba6:	490d      	ldr	r1, [pc, #52]	; (1bbdc <xTimerCreateTimerTask+0x4c>)
   1bba8:	480d      	ldr	r0, [pc, #52]	; (1bbe0 <xTimerCreateTimerTask+0x50>)
   1bbaa:	4b0e      	ldr	r3, [pc, #56]	; (1bbe4 <xTimerCreateTimerTask+0x54>)
   1bbac:	9301      	str	r3, [sp, #4]
   1bbae:	2302      	movs	r3, #2
   1bbb0:	9300      	str	r3, [sp, #0]
   1bbb2:	2300      	movs	r3, #0
   1bbb4:	2280      	movs	r2, #128	; 0x80
   1bbb6:	4c0c      	ldr	r4, [pc, #48]	; (1bbe8 <xTimerCreateTimerTask+0x58>)
   1bbb8:	47a0      	blx	r4
   1bbba:	0003      	movs	r3, r0
   1bbbc:	607b      	str	r3, [r7, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
   1bbbe:	687b      	ldr	r3, [r7, #4]
   1bbc0:	2b00      	cmp	r3, #0
   1bbc2:	d101      	bne.n	1bbc8 <xTimerCreateTimerTask+0x38>
   1bbc4:	b672      	cpsid	i
   1bbc6:	e7fe      	b.n	1bbc6 <xTimerCreateTimerTask+0x36>
	return xReturn;
   1bbc8:	687b      	ldr	r3, [r7, #4]
}
   1bbca:	0018      	movs	r0, r3
   1bbcc:	46bd      	mov	sp, r7
   1bbce:	b003      	add	sp, #12
   1bbd0:	bd90      	pop	{r4, r7, pc}
   1bbd2:	46c0      	nop			; (mov r8, r8)
   1bbd4:	0001c0d9 	.word	0x0001c0d9
   1bbd8:	20003cac 	.word	0x20003cac
   1bbdc:	000366c0 	.word	0x000366c0
   1bbe0:	0001bd11 	.word	0x0001bd11
   1bbe4:	20003cb0 	.word	0x20003cb0
   1bbe8:	0001a529 	.word	0x0001a529

0001bbec <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
   1bbec:	b590      	push	{r4, r7, lr}
   1bbee:	b089      	sub	sp, #36	; 0x24
   1bbf0:	af00      	add	r7, sp, #0
   1bbf2:	60f8      	str	r0, [r7, #12]
   1bbf4:	60b9      	str	r1, [r7, #8]
   1bbf6:	607a      	str	r2, [r7, #4]
   1bbf8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
   1bbfa:	2300      	movs	r3, #0
   1bbfc:	61fb      	str	r3, [r7, #28]
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
   1bbfe:	68fb      	ldr	r3, [r7, #12]
   1bc00:	2b00      	cmp	r3, #0
   1bc02:	d101      	bne.n	1bc08 <xTimerGenericCommand+0x1c>
   1bc04:	b672      	cpsid	i
   1bc06:	e7fe      	b.n	1bc06 <xTimerGenericCommand+0x1a>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
   1bc08:	4b1e      	ldr	r3, [pc, #120]	; (1bc84 <xTimerGenericCommand+0x98>)
   1bc0a:	681b      	ldr	r3, [r3, #0]
   1bc0c:	2b00      	cmp	r3, #0
   1bc0e:	d033      	beq.n	1bc78 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
   1bc10:	2310      	movs	r3, #16
   1bc12:	18fb      	adds	r3, r7, r3
   1bc14:	68ba      	ldr	r2, [r7, #8]
   1bc16:	601a      	str	r2, [r3, #0]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
   1bc18:	2310      	movs	r3, #16
   1bc1a:	18fb      	adds	r3, r7, r3
   1bc1c:	687a      	ldr	r2, [r7, #4]
   1bc1e:	605a      	str	r2, [r3, #4]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
   1bc20:	2310      	movs	r3, #16
   1bc22:	18fb      	adds	r3, r7, r3
   1bc24:	68fa      	ldr	r2, [r7, #12]
   1bc26:	609a      	str	r2, [r3, #8]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
   1bc28:	68bb      	ldr	r3, [r7, #8]
   1bc2a:	2b05      	cmp	r3, #5
   1bc2c:	dc1a      	bgt.n	1bc64 <xTimerGenericCommand+0x78>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
   1bc2e:	4b16      	ldr	r3, [pc, #88]	; (1bc88 <xTimerGenericCommand+0x9c>)
   1bc30:	4798      	blx	r3
   1bc32:	0003      	movs	r3, r0
   1bc34:	2b02      	cmp	r3, #2
   1bc36:	d10a      	bne.n	1bc4e <xTimerGenericCommand+0x62>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
   1bc38:	4b12      	ldr	r3, [pc, #72]	; (1bc84 <xTimerGenericCommand+0x98>)
   1bc3a:	6818      	ldr	r0, [r3, #0]
   1bc3c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
   1bc3e:	2310      	movs	r3, #16
   1bc40:	18f9      	adds	r1, r7, r3
   1bc42:	2300      	movs	r3, #0
   1bc44:	4c11      	ldr	r4, [pc, #68]	; (1bc8c <xTimerGenericCommand+0xa0>)
   1bc46:	47a0      	blx	r4
   1bc48:	0003      	movs	r3, r0
   1bc4a:	61fb      	str	r3, [r7, #28]
   1bc4c:	e014      	b.n	1bc78 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
   1bc4e:	4b0d      	ldr	r3, [pc, #52]	; (1bc84 <xTimerGenericCommand+0x98>)
   1bc50:	6818      	ldr	r0, [r3, #0]
   1bc52:	2310      	movs	r3, #16
   1bc54:	18f9      	adds	r1, r7, r3
   1bc56:	2300      	movs	r3, #0
   1bc58:	2200      	movs	r2, #0
   1bc5a:	4c0c      	ldr	r4, [pc, #48]	; (1bc8c <xTimerGenericCommand+0xa0>)
   1bc5c:	47a0      	blx	r4
   1bc5e:	0003      	movs	r3, r0
   1bc60:	61fb      	str	r3, [r7, #28]
   1bc62:	e009      	b.n	1bc78 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
   1bc64:	4b07      	ldr	r3, [pc, #28]	; (1bc84 <xTimerGenericCommand+0x98>)
   1bc66:	6818      	ldr	r0, [r3, #0]
   1bc68:	683a      	ldr	r2, [r7, #0]
   1bc6a:	2310      	movs	r3, #16
   1bc6c:	18f9      	adds	r1, r7, r3
   1bc6e:	2300      	movs	r3, #0
   1bc70:	4c07      	ldr	r4, [pc, #28]	; (1bc90 <xTimerGenericCommand+0xa4>)
   1bc72:	47a0      	blx	r4
   1bc74:	0003      	movs	r3, r0
   1bc76:	61fb      	str	r3, [r7, #28]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
   1bc78:	69fb      	ldr	r3, [r7, #28]
}
   1bc7a:	0018      	movs	r0, r3
   1bc7c:	46bd      	mov	sp, r7
   1bc7e:	b009      	add	sp, #36	; 0x24
   1bc80:	bd90      	pop	{r4, r7, pc}
   1bc82:	46c0      	nop			; (mov r8, r8)
   1bc84:	20003cac 	.word	0x20003cac
   1bc88:	0001b5ed 	.word	0x0001b5ed
   1bc8c:	00018e61 	.word	0x00018e61
   1bc90:	000192c1 	.word	0x000192c1

0001bc94 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
   1bc94:	b590      	push	{r4, r7, lr}
   1bc96:	b087      	sub	sp, #28
   1bc98:	af02      	add	r7, sp, #8
   1bc9a:	6078      	str	r0, [r7, #4]
   1bc9c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
   1bc9e:	4b18      	ldr	r3, [pc, #96]	; (1bd00 <prvProcessExpiredTimer+0x6c>)
   1bca0:	681b      	ldr	r3, [r3, #0]
   1bca2:	68db      	ldr	r3, [r3, #12]
   1bca4:	68db      	ldr	r3, [r3, #12]
   1bca6:	60fb      	str	r3, [r7, #12]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
   1bca8:	68fb      	ldr	r3, [r7, #12]
   1bcaa:	3304      	adds	r3, #4
   1bcac:	0018      	movs	r0, r3
   1bcae:	4b15      	ldr	r3, [pc, #84]	; (1bd04 <prvProcessExpiredTimer+0x70>)
   1bcb0:	4798      	blx	r3
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
   1bcb2:	68fb      	ldr	r3, [r7, #12]
   1bcb4:	69db      	ldr	r3, [r3, #28]
   1bcb6:	2b01      	cmp	r3, #1
   1bcb8:	d119      	bne.n	1bcee <prvProcessExpiredTimer+0x5a>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
   1bcba:	68fb      	ldr	r3, [r7, #12]
   1bcbc:	699a      	ldr	r2, [r3, #24]
   1bcbe:	687b      	ldr	r3, [r7, #4]
   1bcc0:	18d1      	adds	r1, r2, r3
   1bcc2:	687b      	ldr	r3, [r7, #4]
   1bcc4:	683a      	ldr	r2, [r7, #0]
   1bcc6:	68f8      	ldr	r0, [r7, #12]
   1bcc8:	4c0f      	ldr	r4, [pc, #60]	; (1bd08 <prvProcessExpiredTimer+0x74>)
   1bcca:	47a0      	blx	r4
   1bccc:	1e03      	subs	r3, r0, #0
   1bcce:	d00e      	beq.n	1bcee <prvProcessExpiredTimer+0x5a>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
   1bcd0:	687a      	ldr	r2, [r7, #4]
   1bcd2:	68f8      	ldr	r0, [r7, #12]
   1bcd4:	2300      	movs	r3, #0
   1bcd6:	9300      	str	r3, [sp, #0]
   1bcd8:	2300      	movs	r3, #0
   1bcda:	2100      	movs	r1, #0
   1bcdc:	4c0b      	ldr	r4, [pc, #44]	; (1bd0c <prvProcessExpiredTimer+0x78>)
   1bcde:	47a0      	blx	r4
   1bce0:	0003      	movs	r3, r0
   1bce2:	60bb      	str	r3, [r7, #8]
			configASSERT( xResult );
   1bce4:	68bb      	ldr	r3, [r7, #8]
   1bce6:	2b00      	cmp	r3, #0
   1bce8:	d101      	bne.n	1bcee <prvProcessExpiredTimer+0x5a>
   1bcea:	b672      	cpsid	i
   1bcec:	e7fe      	b.n	1bcec <prvProcessExpiredTimer+0x58>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
   1bcee:	68fb      	ldr	r3, [r7, #12]
   1bcf0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   1bcf2:	68fa      	ldr	r2, [r7, #12]
   1bcf4:	0010      	movs	r0, r2
   1bcf6:	4798      	blx	r3
}
   1bcf8:	46c0      	nop			; (mov r8, r8)
   1bcfa:	46bd      	mov	sp, r7
   1bcfc:	b005      	add	sp, #20
   1bcfe:	bd90      	pop	{r4, r7, pc}
   1bd00:	20003ca4 	.word	0x20003ca4
   1bd04:	0001873b 	.word	0x0001873b
   1bd08:	0001be79 	.word	0x0001be79
   1bd0c:	0001bbed 	.word	0x0001bbed

0001bd10 <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
   1bd10:	b580      	push	{r7, lr}
   1bd12:	b084      	sub	sp, #16
   1bd14:	af00      	add	r7, sp, #0
   1bd16:	6078      	str	r0, [r7, #4]

		/* Allow the application writer to execute some code in the context of
		this task at the point the task starts executing.  This is useful if the
		application includes initialisation code that would benefit from
		executing after the scheduler has been started. */
		vApplicationDaemonTaskStartupHook();
   1bd18:	4b08      	ldr	r3, [pc, #32]	; (1bd3c <prvTimerTask+0x2c>)
   1bd1a:	4798      	blx	r3

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
   1bd1c:	2308      	movs	r3, #8
   1bd1e:	18fb      	adds	r3, r7, r3
   1bd20:	0018      	movs	r0, r3
   1bd22:	4b07      	ldr	r3, [pc, #28]	; (1bd40 <prvTimerTask+0x30>)
   1bd24:	4798      	blx	r3
   1bd26:	0003      	movs	r3, r0
   1bd28:	60fb      	str	r3, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
   1bd2a:	68ba      	ldr	r2, [r7, #8]
   1bd2c:	68fb      	ldr	r3, [r7, #12]
   1bd2e:	0011      	movs	r1, r2
   1bd30:	0018      	movs	r0, r3
   1bd32:	4b04      	ldr	r3, [pc, #16]	; (1bd44 <prvTimerTask+0x34>)
   1bd34:	4798      	blx	r3

		/* Empty the command queue. */
		prvProcessReceivedCommands();
   1bd36:	4b04      	ldr	r3, [pc, #16]	; (1bd48 <prvTimerTask+0x38>)
   1bd38:	4798      	blx	r3
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
   1bd3a:	e7ef      	b.n	1bd1c <prvTimerTask+0xc>
   1bd3c:	00030f75 	.word	0x00030f75
   1bd40:	0001bdf1 	.word	0x0001bdf1
   1bd44:	0001bd4d 	.word	0x0001bd4d
   1bd48:	0001bf01 	.word	0x0001bf01

0001bd4c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
   1bd4c:	b580      	push	{r7, lr}
   1bd4e:	b084      	sub	sp, #16
   1bd50:	af00      	add	r7, sp, #0
   1bd52:	6078      	str	r0, [r7, #4]
   1bd54:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
   1bd56:	4b1e      	ldr	r3, [pc, #120]	; (1bdd0 <prvProcessTimerOrBlockTask+0x84>)
   1bd58:	4798      	blx	r3
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
   1bd5a:	2308      	movs	r3, #8
   1bd5c:	18fb      	adds	r3, r7, r3
   1bd5e:	0018      	movs	r0, r3
   1bd60:	4b1c      	ldr	r3, [pc, #112]	; (1bdd4 <prvProcessTimerOrBlockTask+0x88>)
   1bd62:	4798      	blx	r3
   1bd64:	0003      	movs	r3, r0
   1bd66:	60fb      	str	r3, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
   1bd68:	68bb      	ldr	r3, [r7, #8]
   1bd6a:	2b00      	cmp	r3, #0
   1bd6c:	d129      	bne.n	1bdc2 <prvProcessTimerOrBlockTask+0x76>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
   1bd6e:	683b      	ldr	r3, [r7, #0]
   1bd70:	2b00      	cmp	r3, #0
   1bd72:	d10c      	bne.n	1bd8e <prvProcessTimerOrBlockTask+0x42>
   1bd74:	687a      	ldr	r2, [r7, #4]
   1bd76:	68fb      	ldr	r3, [r7, #12]
   1bd78:	429a      	cmp	r2, r3
   1bd7a:	d808      	bhi.n	1bd8e <prvProcessTimerOrBlockTask+0x42>
			{
				( void ) xTaskResumeAll();
   1bd7c:	4b16      	ldr	r3, [pc, #88]	; (1bdd8 <prvProcessTimerOrBlockTask+0x8c>)
   1bd7e:	4798      	blx	r3
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
   1bd80:	68fa      	ldr	r2, [r7, #12]
   1bd82:	687b      	ldr	r3, [r7, #4]
   1bd84:	0011      	movs	r1, r2
   1bd86:	0018      	movs	r0, r3
   1bd88:	4b14      	ldr	r3, [pc, #80]	; (1bddc <prvProcessTimerOrBlockTask+0x90>)
   1bd8a:	4798      	blx	r3
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
   1bd8c:	e01b      	b.n	1bdc6 <prvProcessTimerOrBlockTask+0x7a>
				if( xListWasEmpty != pdFALSE )
   1bd8e:	683b      	ldr	r3, [r7, #0]
   1bd90:	2b00      	cmp	r3, #0
   1bd92:	d006      	beq.n	1bda2 <prvProcessTimerOrBlockTask+0x56>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
   1bd94:	4b12      	ldr	r3, [pc, #72]	; (1bde0 <prvProcessTimerOrBlockTask+0x94>)
   1bd96:	681b      	ldr	r3, [r3, #0]
   1bd98:	681b      	ldr	r3, [r3, #0]
   1bd9a:	425a      	negs	r2, r3
   1bd9c:	4153      	adcs	r3, r2
   1bd9e:	b2db      	uxtb	r3, r3
   1bda0:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
   1bda2:	4b10      	ldr	r3, [pc, #64]	; (1bde4 <prvProcessTimerOrBlockTask+0x98>)
   1bda4:	6818      	ldr	r0, [r3, #0]
   1bda6:	687a      	ldr	r2, [r7, #4]
   1bda8:	68fb      	ldr	r3, [r7, #12]
   1bdaa:	1ad3      	subs	r3, r2, r3
   1bdac:	683a      	ldr	r2, [r7, #0]
   1bdae:	0019      	movs	r1, r3
   1bdb0:	4b0d      	ldr	r3, [pc, #52]	; (1bde8 <prvProcessTimerOrBlockTask+0x9c>)
   1bdb2:	4798      	blx	r3
				if( xTaskResumeAll() == pdFALSE )
   1bdb4:	4b08      	ldr	r3, [pc, #32]	; (1bdd8 <prvProcessTimerOrBlockTask+0x8c>)
   1bdb6:	4798      	blx	r3
   1bdb8:	1e03      	subs	r3, r0, #0
   1bdba:	d104      	bne.n	1bdc6 <prvProcessTimerOrBlockTask+0x7a>
					portYIELD_WITHIN_API();
   1bdbc:	4b0b      	ldr	r3, [pc, #44]	; (1bdec <prvProcessTimerOrBlockTask+0xa0>)
   1bdbe:	4798      	blx	r3
}
   1bdc0:	e001      	b.n	1bdc6 <prvProcessTimerOrBlockTask+0x7a>
			( void ) xTaskResumeAll();
   1bdc2:	4b05      	ldr	r3, [pc, #20]	; (1bdd8 <prvProcessTimerOrBlockTask+0x8c>)
   1bdc4:	4798      	blx	r3
}
   1bdc6:	46c0      	nop			; (mov r8, r8)
   1bdc8:	46bd      	mov	sp, r7
   1bdca:	b004      	add	sp, #16
   1bdcc:	bd80      	pop	{r7, pc}
   1bdce:	46c0      	nop			; (mov r8, r8)
   1bdd0:	0001ab85 	.word	0x0001ab85
   1bdd4:	0001be31 	.word	0x0001be31
   1bdd8:	0001ab9d 	.word	0x0001ab9d
   1bddc:	0001bc95 	.word	0x0001bc95
   1bde0:	20003ca8 	.word	0x20003ca8
   1bde4:	20003cac 	.word	0x20003cac
   1bde8:	0001a325 	.word	0x0001a325
   1bdec:	000188b1 	.word	0x000188b1

0001bdf0 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
   1bdf0:	b580      	push	{r7, lr}
   1bdf2:	b084      	sub	sp, #16
   1bdf4:	af00      	add	r7, sp, #0
   1bdf6:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
   1bdf8:	4b0c      	ldr	r3, [pc, #48]	; (1be2c <prvGetNextExpireTime+0x3c>)
   1bdfa:	681b      	ldr	r3, [r3, #0]
   1bdfc:	681b      	ldr	r3, [r3, #0]
   1bdfe:	425a      	negs	r2, r3
   1be00:	4153      	adcs	r3, r2
   1be02:	b2db      	uxtb	r3, r3
   1be04:	001a      	movs	r2, r3
   1be06:	687b      	ldr	r3, [r7, #4]
   1be08:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
   1be0a:	687b      	ldr	r3, [r7, #4]
   1be0c:	681b      	ldr	r3, [r3, #0]
   1be0e:	2b00      	cmp	r3, #0
   1be10:	d105      	bne.n	1be1e <prvGetNextExpireTime+0x2e>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
   1be12:	4b06      	ldr	r3, [pc, #24]	; (1be2c <prvGetNextExpireTime+0x3c>)
   1be14:	681b      	ldr	r3, [r3, #0]
   1be16:	68db      	ldr	r3, [r3, #12]
   1be18:	681b      	ldr	r3, [r3, #0]
   1be1a:	60fb      	str	r3, [r7, #12]
   1be1c:	e001      	b.n	1be22 <prvGetNextExpireTime+0x32>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
   1be1e:	2300      	movs	r3, #0
   1be20:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
   1be22:	68fb      	ldr	r3, [r7, #12]
}
   1be24:	0018      	movs	r0, r3
   1be26:	46bd      	mov	sp, r7
   1be28:	b004      	add	sp, #16
   1be2a:	bd80      	pop	{r7, pc}
   1be2c:	20003ca4 	.word	0x20003ca4

0001be30 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
   1be30:	b580      	push	{r7, lr}
   1be32:	b084      	sub	sp, #16
   1be34:	af00      	add	r7, sp, #0
   1be36:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
   1be38:	4b0c      	ldr	r3, [pc, #48]	; (1be6c <prvSampleTimeNow+0x3c>)
   1be3a:	4798      	blx	r3
   1be3c:	0003      	movs	r3, r0
   1be3e:	60fb      	str	r3, [r7, #12]

	if( xTimeNow < xLastTime )
   1be40:	4b0b      	ldr	r3, [pc, #44]	; (1be70 <prvSampleTimeNow+0x40>)
   1be42:	681b      	ldr	r3, [r3, #0]
   1be44:	68fa      	ldr	r2, [r7, #12]
   1be46:	429a      	cmp	r2, r3
   1be48:	d205      	bcs.n	1be56 <prvSampleTimeNow+0x26>
	{
		prvSwitchTimerLists();
   1be4a:	4b0a      	ldr	r3, [pc, #40]	; (1be74 <prvSampleTimeNow+0x44>)
   1be4c:	4798      	blx	r3
		*pxTimerListsWereSwitched = pdTRUE;
   1be4e:	687b      	ldr	r3, [r7, #4]
   1be50:	2201      	movs	r2, #1
   1be52:	601a      	str	r2, [r3, #0]
   1be54:	e002      	b.n	1be5c <prvSampleTimeNow+0x2c>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
   1be56:	687b      	ldr	r3, [r7, #4]
   1be58:	2200      	movs	r2, #0
   1be5a:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
   1be5c:	4b04      	ldr	r3, [pc, #16]	; (1be70 <prvSampleTimeNow+0x40>)
   1be5e:	68fa      	ldr	r2, [r7, #12]
   1be60:	601a      	str	r2, [r3, #0]

	return xTimeNow;
   1be62:	68fb      	ldr	r3, [r7, #12]
}
   1be64:	0018      	movs	r0, r3
   1be66:	46bd      	mov	sp, r7
   1be68:	b004      	add	sp, #16
   1be6a:	bd80      	pop	{r7, pc}
   1be6c:	0001ad0d 	.word	0x0001ad0d
   1be70:	20003cb4 	.word	0x20003cb4
   1be74:	0001c019 	.word	0x0001c019

0001be78 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
   1be78:	b580      	push	{r7, lr}
   1be7a:	b086      	sub	sp, #24
   1be7c:	af00      	add	r7, sp, #0
   1be7e:	60f8      	str	r0, [r7, #12]
   1be80:	60b9      	str	r1, [r7, #8]
   1be82:	607a      	str	r2, [r7, #4]
   1be84:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
   1be86:	2300      	movs	r3, #0
   1be88:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
   1be8a:	68fb      	ldr	r3, [r7, #12]
   1be8c:	68ba      	ldr	r2, [r7, #8]
   1be8e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
   1be90:	68fb      	ldr	r3, [r7, #12]
   1be92:	68fa      	ldr	r2, [r7, #12]
   1be94:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
   1be96:	68ba      	ldr	r2, [r7, #8]
   1be98:	687b      	ldr	r3, [r7, #4]
   1be9a:	429a      	cmp	r2, r3
   1be9c:	d812      	bhi.n	1bec4 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
   1be9e:	687a      	ldr	r2, [r7, #4]
   1bea0:	683b      	ldr	r3, [r7, #0]
   1bea2:	1ad2      	subs	r2, r2, r3
   1bea4:	68fb      	ldr	r3, [r7, #12]
   1bea6:	699b      	ldr	r3, [r3, #24]
   1bea8:	429a      	cmp	r2, r3
   1beaa:	d302      	bcc.n	1beb2 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
   1beac:	2301      	movs	r3, #1
   1beae:	617b      	str	r3, [r7, #20]
   1beb0:	e01b      	b.n	1beea <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
   1beb2:	4b10      	ldr	r3, [pc, #64]	; (1bef4 <prvInsertTimerInActiveList+0x7c>)
   1beb4:	681a      	ldr	r2, [r3, #0]
   1beb6:	68fb      	ldr	r3, [r7, #12]
   1beb8:	3304      	adds	r3, #4
   1beba:	0019      	movs	r1, r3
   1bebc:	0010      	movs	r0, r2
   1bebe:	4b0e      	ldr	r3, [pc, #56]	; (1bef8 <prvInsertTimerInActiveList+0x80>)
   1bec0:	4798      	blx	r3
   1bec2:	e012      	b.n	1beea <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
   1bec4:	687a      	ldr	r2, [r7, #4]
   1bec6:	683b      	ldr	r3, [r7, #0]
   1bec8:	429a      	cmp	r2, r3
   1beca:	d206      	bcs.n	1beda <prvInsertTimerInActiveList+0x62>
   1becc:	68ba      	ldr	r2, [r7, #8]
   1bece:	683b      	ldr	r3, [r7, #0]
   1bed0:	429a      	cmp	r2, r3
   1bed2:	d302      	bcc.n	1beda <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
   1bed4:	2301      	movs	r3, #1
   1bed6:	617b      	str	r3, [r7, #20]
   1bed8:	e007      	b.n	1beea <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
   1beda:	4b08      	ldr	r3, [pc, #32]	; (1befc <prvInsertTimerInActiveList+0x84>)
   1bedc:	681a      	ldr	r2, [r3, #0]
   1bede:	68fb      	ldr	r3, [r7, #12]
   1bee0:	3304      	adds	r3, #4
   1bee2:	0019      	movs	r1, r3
   1bee4:	0010      	movs	r0, r2
   1bee6:	4b04      	ldr	r3, [pc, #16]	; (1bef8 <prvInsertTimerInActiveList+0x80>)
   1bee8:	4798      	blx	r3
		}
	}

	return xProcessTimerNow;
   1beea:	697b      	ldr	r3, [r7, #20]
}
   1beec:	0018      	movs	r0, r3
   1beee:	46bd      	mov	sp, r7
   1bef0:	b006      	add	sp, #24
   1bef2:	bd80      	pop	{r7, pc}
   1bef4:	20003ca8 	.word	0x20003ca8
   1bef8:	000186cf 	.word	0x000186cf
   1befc:	20003ca4 	.word	0x20003ca4

0001bf00 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
   1bf00:	b590      	push	{r4, r7, lr}
   1bf02:	b08b      	sub	sp, #44	; 0x2c
   1bf04:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
   1bf06:	e068      	b.n	1bfda <prvProcessReceivedCommands+0xda>
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
   1bf08:	2308      	movs	r3, #8
   1bf0a:	18fb      	adds	r3, r7, r3
   1bf0c:	681b      	ldr	r3, [r3, #0]
   1bf0e:	2b00      	cmp	r3, #0
   1bf10:	db63      	blt.n	1bfda <prvProcessReceivedCommands+0xda>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
   1bf12:	2308      	movs	r3, #8
   1bf14:	18fb      	adds	r3, r7, r3
   1bf16:	689b      	ldr	r3, [r3, #8]
   1bf18:	61fb      	str	r3, [r7, #28]

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
   1bf1a:	69fb      	ldr	r3, [r7, #28]
   1bf1c:	695b      	ldr	r3, [r3, #20]
   1bf1e:	2b00      	cmp	r3, #0
   1bf20:	d004      	beq.n	1bf2c <prvProcessReceivedCommands+0x2c>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
   1bf22:	69fb      	ldr	r3, [r7, #28]
   1bf24:	3304      	adds	r3, #4
   1bf26:	0018      	movs	r0, r3
   1bf28:	4b33      	ldr	r3, [pc, #204]	; (1bff8 <prvProcessReceivedCommands+0xf8>)
   1bf2a:	4798      	blx	r3
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
   1bf2c:	1d3b      	adds	r3, r7, #4
   1bf2e:	0018      	movs	r0, r3
   1bf30:	4b32      	ldr	r3, [pc, #200]	; (1bffc <prvProcessReceivedCommands+0xfc>)
   1bf32:	4798      	blx	r3
   1bf34:	0003      	movs	r3, r0
   1bf36:	61bb      	str	r3, [r7, #24]

			switch( xMessage.xMessageID )
   1bf38:	2308      	movs	r3, #8
   1bf3a:	18fb      	adds	r3, r7, r3
   1bf3c:	681b      	ldr	r3, [r3, #0]
   1bf3e:	2b09      	cmp	r3, #9
   1bf40:	d84a      	bhi.n	1bfd8 <prvProcessReceivedCommands+0xd8>
   1bf42:	009a      	lsls	r2, r3, #2
   1bf44:	4b2e      	ldr	r3, [pc, #184]	; (1c000 <prvProcessReceivedCommands+0x100>)
   1bf46:	18d3      	adds	r3, r2, r3
   1bf48:	681b      	ldr	r3, [r3, #0]
   1bf4a:	469f      	mov	pc, r3
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
   1bf4c:	2308      	movs	r3, #8
   1bf4e:	18fb      	adds	r3, r7, r3
   1bf50:	685a      	ldr	r2, [r3, #4]
   1bf52:	69fb      	ldr	r3, [r7, #28]
   1bf54:	699b      	ldr	r3, [r3, #24]
   1bf56:	18d1      	adds	r1, r2, r3
   1bf58:	2308      	movs	r3, #8
   1bf5a:	18fb      	adds	r3, r7, r3
   1bf5c:	685b      	ldr	r3, [r3, #4]
   1bf5e:	69ba      	ldr	r2, [r7, #24]
   1bf60:	69f8      	ldr	r0, [r7, #28]
   1bf62:	4c28      	ldr	r4, [pc, #160]	; (1c004 <prvProcessReceivedCommands+0x104>)
   1bf64:	47a0      	blx	r4
   1bf66:	1e03      	subs	r3, r0, #0
   1bf68:	d037      	beq.n	1bfda <prvProcessReceivedCommands+0xda>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
   1bf6a:	69fb      	ldr	r3, [r7, #28]
   1bf6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   1bf6e:	69fa      	ldr	r2, [r7, #28]
   1bf70:	0010      	movs	r0, r2
   1bf72:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
   1bf74:	69fb      	ldr	r3, [r7, #28]
   1bf76:	69db      	ldr	r3, [r3, #28]
   1bf78:	2b01      	cmp	r3, #1
   1bf7a:	d12e      	bne.n	1bfda <prvProcessReceivedCommands+0xda>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
   1bf7c:	2308      	movs	r3, #8
   1bf7e:	18fb      	adds	r3, r7, r3
   1bf80:	685a      	ldr	r2, [r3, #4]
   1bf82:	69fb      	ldr	r3, [r7, #28]
   1bf84:	699b      	ldr	r3, [r3, #24]
   1bf86:	18d2      	adds	r2, r2, r3
   1bf88:	69f8      	ldr	r0, [r7, #28]
   1bf8a:	2300      	movs	r3, #0
   1bf8c:	9300      	str	r3, [sp, #0]
   1bf8e:	2300      	movs	r3, #0
   1bf90:	2100      	movs	r1, #0
   1bf92:	4c1d      	ldr	r4, [pc, #116]	; (1c008 <prvProcessReceivedCommands+0x108>)
   1bf94:	47a0      	blx	r4
   1bf96:	0003      	movs	r3, r0
   1bf98:	617b      	str	r3, [r7, #20]
							configASSERT( xResult );
   1bf9a:	697b      	ldr	r3, [r7, #20]
   1bf9c:	2b00      	cmp	r3, #0
   1bf9e:	d11c      	bne.n	1bfda <prvProcessReceivedCommands+0xda>
   1bfa0:	b672      	cpsid	i
   1bfa2:	e7fe      	b.n	1bfa2 <prvProcessReceivedCommands+0xa2>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
   1bfa4:	2308      	movs	r3, #8
   1bfa6:	18fb      	adds	r3, r7, r3
   1bfa8:	685a      	ldr	r2, [r3, #4]
   1bfaa:	69fb      	ldr	r3, [r7, #28]
   1bfac:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
   1bfae:	69fb      	ldr	r3, [r7, #28]
   1bfb0:	699b      	ldr	r3, [r3, #24]
   1bfb2:	2b00      	cmp	r3, #0
   1bfb4:	d101      	bne.n	1bfba <prvProcessReceivedCommands+0xba>
   1bfb6:	b672      	cpsid	i
   1bfb8:	e7fe      	b.n	1bfb8 <prvProcessReceivedCommands+0xb8>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
   1bfba:	69fb      	ldr	r3, [r7, #28]
   1bfbc:	699a      	ldr	r2, [r3, #24]
   1bfbe:	69bb      	ldr	r3, [r7, #24]
   1bfc0:	18d1      	adds	r1, r2, r3
   1bfc2:	69bb      	ldr	r3, [r7, #24]
   1bfc4:	69ba      	ldr	r2, [r7, #24]
   1bfc6:	69f8      	ldr	r0, [r7, #28]
   1bfc8:	4c0e      	ldr	r4, [pc, #56]	; (1c004 <prvProcessReceivedCommands+0x104>)
   1bfca:	47a0      	blx	r4
					break;
   1bfcc:	e005      	b.n	1bfda <prvProcessReceivedCommands+0xda>
					allocated. */
					#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) )
					{
						/* The timer can only have been allocated dynamically -
						free it again. */
						vPortFree( pxTimer );
   1bfce:	69fb      	ldr	r3, [r7, #28]
   1bfd0:	0018      	movs	r0, r3
   1bfd2:	4b0e      	ldr	r3, [pc, #56]	; (1c00c <prvProcessReceivedCommands+0x10c>)
   1bfd4:	4798      	blx	r3
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
   1bfd6:	e000      	b.n	1bfda <prvProcessReceivedCommands+0xda>

				default	:
					/* Don't expect to get here. */
					break;
   1bfd8:	46c0      	nop			; (mov r8, r8)
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
   1bfda:	4b0d      	ldr	r3, [pc, #52]	; (1c010 <prvProcessReceivedCommands+0x110>)
   1bfdc:	681b      	ldr	r3, [r3, #0]
   1bfde:	2208      	movs	r2, #8
   1bfe0:	18b9      	adds	r1, r7, r2
   1bfe2:	2200      	movs	r2, #0
   1bfe4:	0018      	movs	r0, r3
   1bfe6:	4b0b      	ldr	r3, [pc, #44]	; (1c014 <prvProcessReceivedCommands+0x114>)
   1bfe8:	4798      	blx	r3
   1bfea:	1e03      	subs	r3, r0, #0
   1bfec:	d18c      	bne.n	1bf08 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
   1bfee:	46c0      	nop			; (mov r8, r8)
   1bff0:	46bd      	mov	sp, r7
   1bff2:	b009      	add	sp, #36	; 0x24
   1bff4:	bd90      	pop	{r4, r7, pc}
   1bff6:	46c0      	nop			; (mov r8, r8)
   1bff8:	0001873b 	.word	0x0001873b
   1bffc:	0001be31 	.word	0x0001be31
   1c000:	000366c8 	.word	0x000366c8
   1c004:	0001be79 	.word	0x0001be79
   1c008:	0001bbed 	.word	0x0001bbed
   1c00c:	00018ac5 	.word	0x00018ac5
   1c010:	20003cac 	.word	0x20003cac
   1c014:	00019719 	.word	0x00019719

0001c018 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
   1c018:	b590      	push	{r4, r7, lr}
   1c01a:	b089      	sub	sp, #36	; 0x24
   1c01c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
   1c01e:	e03e      	b.n	1c09e <prvSwitchTimerLists+0x86>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
   1c020:	4b28      	ldr	r3, [pc, #160]	; (1c0c4 <prvSwitchTimerLists+0xac>)
   1c022:	681b      	ldr	r3, [r3, #0]
   1c024:	68db      	ldr	r3, [r3, #12]
   1c026:	681b      	ldr	r3, [r3, #0]
   1c028:	617b      	str	r3, [r7, #20]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
   1c02a:	4b26      	ldr	r3, [pc, #152]	; (1c0c4 <prvSwitchTimerLists+0xac>)
   1c02c:	681b      	ldr	r3, [r3, #0]
   1c02e:	68db      	ldr	r3, [r3, #12]
   1c030:	68db      	ldr	r3, [r3, #12]
   1c032:	613b      	str	r3, [r7, #16]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
   1c034:	693b      	ldr	r3, [r7, #16]
   1c036:	3304      	adds	r3, #4
   1c038:	0018      	movs	r0, r3
   1c03a:	4b23      	ldr	r3, [pc, #140]	; (1c0c8 <prvSwitchTimerLists+0xb0>)
   1c03c:	4798      	blx	r3
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
   1c03e:	693b      	ldr	r3, [r7, #16]
   1c040:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   1c042:	693a      	ldr	r2, [r7, #16]
   1c044:	0010      	movs	r0, r2
   1c046:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
   1c048:	693b      	ldr	r3, [r7, #16]
   1c04a:	69db      	ldr	r3, [r3, #28]
   1c04c:	2b01      	cmp	r3, #1
   1c04e:	d126      	bne.n	1c09e <prvSwitchTimerLists+0x86>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
   1c050:	693b      	ldr	r3, [r7, #16]
   1c052:	699a      	ldr	r2, [r3, #24]
   1c054:	697b      	ldr	r3, [r7, #20]
   1c056:	18d3      	adds	r3, r2, r3
   1c058:	60fb      	str	r3, [r7, #12]
			if( xReloadTime > xNextExpireTime )
   1c05a:	68fa      	ldr	r2, [r7, #12]
   1c05c:	697b      	ldr	r3, [r7, #20]
   1c05e:	429a      	cmp	r2, r3
   1c060:	d90e      	bls.n	1c080 <prvSwitchTimerLists+0x68>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
   1c062:	693b      	ldr	r3, [r7, #16]
   1c064:	68fa      	ldr	r2, [r7, #12]
   1c066:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
   1c068:	693b      	ldr	r3, [r7, #16]
   1c06a:	693a      	ldr	r2, [r7, #16]
   1c06c:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
   1c06e:	4b15      	ldr	r3, [pc, #84]	; (1c0c4 <prvSwitchTimerLists+0xac>)
   1c070:	681a      	ldr	r2, [r3, #0]
   1c072:	693b      	ldr	r3, [r7, #16]
   1c074:	3304      	adds	r3, #4
   1c076:	0019      	movs	r1, r3
   1c078:	0010      	movs	r0, r2
   1c07a:	4b14      	ldr	r3, [pc, #80]	; (1c0cc <prvSwitchTimerLists+0xb4>)
   1c07c:	4798      	blx	r3
   1c07e:	e00e      	b.n	1c09e <prvSwitchTimerLists+0x86>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
   1c080:	697a      	ldr	r2, [r7, #20]
   1c082:	6938      	ldr	r0, [r7, #16]
   1c084:	2300      	movs	r3, #0
   1c086:	9300      	str	r3, [sp, #0]
   1c088:	2300      	movs	r3, #0
   1c08a:	2100      	movs	r1, #0
   1c08c:	4c10      	ldr	r4, [pc, #64]	; (1c0d0 <prvSwitchTimerLists+0xb8>)
   1c08e:	47a0      	blx	r4
   1c090:	0003      	movs	r3, r0
   1c092:	60bb      	str	r3, [r7, #8]
				configASSERT( xResult );
   1c094:	68bb      	ldr	r3, [r7, #8]
   1c096:	2b00      	cmp	r3, #0
   1c098:	d101      	bne.n	1c09e <prvSwitchTimerLists+0x86>
   1c09a:	b672      	cpsid	i
   1c09c:	e7fe      	b.n	1c09c <prvSwitchTimerLists+0x84>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
   1c09e:	4b09      	ldr	r3, [pc, #36]	; (1c0c4 <prvSwitchTimerLists+0xac>)
   1c0a0:	681b      	ldr	r3, [r3, #0]
   1c0a2:	681b      	ldr	r3, [r3, #0]
   1c0a4:	2b00      	cmp	r3, #0
   1c0a6:	d1bb      	bne.n	1c020 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
   1c0a8:	4b06      	ldr	r3, [pc, #24]	; (1c0c4 <prvSwitchTimerLists+0xac>)
   1c0aa:	681b      	ldr	r3, [r3, #0]
   1c0ac:	607b      	str	r3, [r7, #4]
	pxCurrentTimerList = pxOverflowTimerList;
   1c0ae:	4b09      	ldr	r3, [pc, #36]	; (1c0d4 <prvSwitchTimerLists+0xbc>)
   1c0b0:	681a      	ldr	r2, [r3, #0]
   1c0b2:	4b04      	ldr	r3, [pc, #16]	; (1c0c4 <prvSwitchTimerLists+0xac>)
   1c0b4:	601a      	str	r2, [r3, #0]
	pxOverflowTimerList = pxTemp;
   1c0b6:	4b07      	ldr	r3, [pc, #28]	; (1c0d4 <prvSwitchTimerLists+0xbc>)
   1c0b8:	687a      	ldr	r2, [r7, #4]
   1c0ba:	601a      	str	r2, [r3, #0]
}
   1c0bc:	46c0      	nop			; (mov r8, r8)
   1c0be:	46bd      	mov	sp, r7
   1c0c0:	b007      	add	sp, #28
   1c0c2:	bd90      	pop	{r4, r7, pc}
   1c0c4:	20003ca4 	.word	0x20003ca4
   1c0c8:	0001873b 	.word	0x0001873b
   1c0cc:	000186cf 	.word	0x000186cf
   1c0d0:	0001bbed 	.word	0x0001bbed
   1c0d4:	20003ca8 	.word	0x20003ca8

0001c0d8 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
   1c0d8:	b580      	push	{r7, lr}
   1c0da:	af00      	add	r7, sp, #0
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
   1c0dc:	4b10      	ldr	r3, [pc, #64]	; (1c120 <prvCheckForValidListAndQueue+0x48>)
   1c0de:	4798      	blx	r3
	{
		if( xTimerQueue == NULL )
   1c0e0:	4b10      	ldr	r3, [pc, #64]	; (1c124 <prvCheckForValidListAndQueue+0x4c>)
   1c0e2:	681b      	ldr	r3, [r3, #0]
   1c0e4:	2b00      	cmp	r3, #0
   1c0e6:	d115      	bne.n	1c114 <prvCheckForValidListAndQueue+0x3c>
		{
			vListInitialise( &xActiveTimerList1 );
   1c0e8:	4b0f      	ldr	r3, [pc, #60]	; (1c128 <prvCheckForValidListAndQueue+0x50>)
   1c0ea:	0018      	movs	r0, r3
   1c0ec:	4b0f      	ldr	r3, [pc, #60]	; (1c12c <prvCheckForValidListAndQueue+0x54>)
   1c0ee:	4798      	blx	r3
			vListInitialise( &xActiveTimerList2 );
   1c0f0:	4b0f      	ldr	r3, [pc, #60]	; (1c130 <prvCheckForValidListAndQueue+0x58>)
   1c0f2:	0018      	movs	r0, r3
   1c0f4:	4b0d      	ldr	r3, [pc, #52]	; (1c12c <prvCheckForValidListAndQueue+0x54>)
   1c0f6:	4798      	blx	r3
			pxCurrentTimerList = &xActiveTimerList1;
   1c0f8:	4b0e      	ldr	r3, [pc, #56]	; (1c134 <prvCheckForValidListAndQueue+0x5c>)
   1c0fa:	4a0b      	ldr	r2, [pc, #44]	; (1c128 <prvCheckForValidListAndQueue+0x50>)
   1c0fc:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
   1c0fe:	4b0e      	ldr	r3, [pc, #56]	; (1c138 <prvCheckForValidListAndQueue+0x60>)
   1c100:	4a0b      	ldr	r2, [pc, #44]	; (1c130 <prvCheckForValidListAndQueue+0x58>)
   1c102:	601a      	str	r2, [r3, #0]

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
			}
			#else
			{
				xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
   1c104:	2200      	movs	r2, #0
   1c106:	210c      	movs	r1, #12
   1c108:	2005      	movs	r0, #5
   1c10a:	4b0c      	ldr	r3, [pc, #48]	; (1c13c <prvCheckForValidListAndQueue+0x64>)
   1c10c:	4798      	blx	r3
   1c10e:	0002      	movs	r2, r0
   1c110:	4b04      	ldr	r3, [pc, #16]	; (1c124 <prvCheckForValidListAndQueue+0x4c>)
   1c112:	601a      	str	r2, [r3, #0]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
   1c114:	4b0a      	ldr	r3, [pc, #40]	; (1c140 <prvCheckForValidListAndQueue+0x68>)
   1c116:	4798      	blx	r3
}
   1c118:	46c0      	nop			; (mov r8, r8)
   1c11a:	46bd      	mov	sp, r7
   1c11c:	bd80      	pop	{r7, pc}
   1c11e:	46c0      	nop			; (mov r8, r8)
   1c120:	000188c9 	.word	0x000188c9
   1c124:	20003cac 	.word	0x20003cac
   1c128:	20003c7c 	.word	0x20003c7c
   1c12c:	00018639 	.word	0x00018639
   1c130:	20003c90 	.word	0x20003c90
   1c134:	20003ca4 	.word	0x20003ca4
   1c138:	20003ca8 	.word	0x20003ca8
   1c13c:	00018bb9 	.word	0x00018bb9
   1c140:	000188ed 	.word	0x000188ed

0001c144 <advance_pointer>:
 };

 #pragma mark - Private Functions -

 static void advance_pointer(cbuf_handle_t cbuf)
 {
   1c144:	b580      	push	{r7, lr}
   1c146:	b082      	sub	sp, #8
   1c148:	af00      	add	r7, sp, #0
   1c14a:	6078      	str	r0, [r7, #4]
	 //assert(cbuf);

	 if(cbuf->full)
   1c14c:	687b      	ldr	r3, [r7, #4]
   1c14e:	7c1b      	ldrb	r3, [r3, #16]
   1c150:	2b00      	cmp	r3, #0
   1c152:	d00b      	beq.n	1c16c <advance_pointer+0x28>
	 {
		 cbuf->tail = (cbuf->tail + 1) % cbuf->max;
   1c154:	687b      	ldr	r3, [r7, #4]
   1c156:	689b      	ldr	r3, [r3, #8]
   1c158:	1c5a      	adds	r2, r3, #1
   1c15a:	687b      	ldr	r3, [r7, #4]
   1c15c:	68d9      	ldr	r1, [r3, #12]
   1c15e:	4b10      	ldr	r3, [pc, #64]	; (1c1a0 <advance_pointer+0x5c>)
   1c160:	0010      	movs	r0, r2
   1c162:	4798      	blx	r3
   1c164:	000b      	movs	r3, r1
   1c166:	001a      	movs	r2, r3
   1c168:	687b      	ldr	r3, [r7, #4]
   1c16a:	609a      	str	r2, [r3, #8]
	 }

	 cbuf->head = (cbuf->head + 1) % cbuf->max;
   1c16c:	687b      	ldr	r3, [r7, #4]
   1c16e:	685b      	ldr	r3, [r3, #4]
   1c170:	1c5a      	adds	r2, r3, #1
   1c172:	687b      	ldr	r3, [r7, #4]
   1c174:	68d9      	ldr	r1, [r3, #12]
   1c176:	4b0a      	ldr	r3, [pc, #40]	; (1c1a0 <advance_pointer+0x5c>)
   1c178:	0010      	movs	r0, r2
   1c17a:	4798      	blx	r3
   1c17c:	000b      	movs	r3, r1
   1c17e:	001a      	movs	r2, r3
   1c180:	687b      	ldr	r3, [r7, #4]
   1c182:	605a      	str	r2, [r3, #4]

	 // We mark full because we will advance tail on the next time around
	 cbuf->full = (cbuf->head == cbuf->tail);
   1c184:	687b      	ldr	r3, [r7, #4]
   1c186:	685a      	ldr	r2, [r3, #4]
   1c188:	687b      	ldr	r3, [r7, #4]
   1c18a:	689b      	ldr	r3, [r3, #8]
   1c18c:	1ad3      	subs	r3, r2, r3
   1c18e:	425a      	negs	r2, r3
   1c190:	4153      	adcs	r3, r2
   1c192:	b2da      	uxtb	r2, r3
   1c194:	687b      	ldr	r3, [r7, #4]
   1c196:	741a      	strb	r2, [r3, #16]
 }
   1c198:	46c0      	nop			; (mov r8, r8)
   1c19a:	46bd      	mov	sp, r7
   1c19c:	b002      	add	sp, #8
   1c19e:	bd80      	pop	{r7, pc}
   1c1a0:	000311f9 	.word	0x000311f9

0001c1a4 <retreat_pointer>:

 static void retreat_pointer(cbuf_handle_t cbuf)
 {
   1c1a4:	b580      	push	{r7, lr}
   1c1a6:	b082      	sub	sp, #8
   1c1a8:	af00      	add	r7, sp, #0
   1c1aa:	6078      	str	r0, [r7, #4]
	 //assert(cbuf);

	 cbuf->full = false;
   1c1ac:	687b      	ldr	r3, [r7, #4]
   1c1ae:	2200      	movs	r2, #0
   1c1b0:	741a      	strb	r2, [r3, #16]
	 cbuf->tail = (cbuf->tail + 1) % cbuf->max;
   1c1b2:	687b      	ldr	r3, [r7, #4]
   1c1b4:	689b      	ldr	r3, [r3, #8]
   1c1b6:	1c5a      	adds	r2, r3, #1
   1c1b8:	687b      	ldr	r3, [r7, #4]
   1c1ba:	68d9      	ldr	r1, [r3, #12]
   1c1bc:	4b05      	ldr	r3, [pc, #20]	; (1c1d4 <retreat_pointer+0x30>)
   1c1be:	0010      	movs	r0, r2
   1c1c0:	4798      	blx	r3
   1c1c2:	000b      	movs	r3, r1
   1c1c4:	001a      	movs	r2, r3
   1c1c6:	687b      	ldr	r3, [r7, #4]
   1c1c8:	609a      	str	r2, [r3, #8]
 }
   1c1ca:	46c0      	nop			; (mov r8, r8)
   1c1cc:	46bd      	mov	sp, r7
   1c1ce:	b002      	add	sp, #8
   1c1d0:	bd80      	pop	{r7, pc}
   1c1d2:	46c0      	nop			; (mov r8, r8)
   1c1d4:	000311f9 	.word	0x000311f9

0001c1d8 <circular_buf_init>:

 #pragma mark - APIs -

 cbuf_handle_t circular_buf_init(uint8_t* buffer, size_t size)
 {
   1c1d8:	b580      	push	{r7, lr}
   1c1da:	b084      	sub	sp, #16
   1c1dc:	af00      	add	r7, sp, #0
   1c1de:	6078      	str	r0, [r7, #4]
   1c1e0:	6039      	str	r1, [r7, #0]
	// assert(buffer && size);

	 cbuf_handle_t cbuf = malloc(sizeof(circular_buf_t));
   1c1e2:	2014      	movs	r0, #20
   1c1e4:	4b09      	ldr	r3, [pc, #36]	; (1c20c <circular_buf_init+0x34>)
   1c1e6:	4798      	blx	r3
   1c1e8:	0003      	movs	r3, r0
   1c1ea:	60fb      	str	r3, [r7, #12]
	 //assert(cbuf);

	 cbuf->buffer = buffer;
   1c1ec:	68fb      	ldr	r3, [r7, #12]
   1c1ee:	687a      	ldr	r2, [r7, #4]
   1c1f0:	601a      	str	r2, [r3, #0]
	 cbuf->max = size;
   1c1f2:	68fb      	ldr	r3, [r7, #12]
   1c1f4:	683a      	ldr	r2, [r7, #0]
   1c1f6:	60da      	str	r2, [r3, #12]
	 circular_buf_reset(cbuf);
   1c1f8:	68fb      	ldr	r3, [r7, #12]
   1c1fa:	0018      	movs	r0, r3
   1c1fc:	4b04      	ldr	r3, [pc, #16]	; (1c210 <circular_buf_init+0x38>)
   1c1fe:	4798      	blx	r3

	// assert(circular_buf_empty(cbuf));

	 return cbuf;
   1c200:	68fb      	ldr	r3, [r7, #12]
 }
   1c202:	0018      	movs	r0, r3
   1c204:	46bd      	mov	sp, r7
   1c206:	b004      	add	sp, #16
   1c208:	bd80      	pop	{r7, pc}
   1c20a:	46c0      	nop			; (mov r8, r8)
   1c20c:	000330b9 	.word	0x000330b9
   1c210:	0001c215 	.word	0x0001c215

0001c214 <circular_buf_reset>:
	// assert(cbuf);
	 free(cbuf);
 }

 void circular_buf_reset(cbuf_handle_t cbuf)
 {
   1c214:	b580      	push	{r7, lr}
   1c216:	b082      	sub	sp, #8
   1c218:	af00      	add	r7, sp, #0
   1c21a:	6078      	str	r0, [r7, #4]
	// assert(cbuf);

	 cbuf->head = 0;
   1c21c:	687b      	ldr	r3, [r7, #4]
   1c21e:	2200      	movs	r2, #0
   1c220:	605a      	str	r2, [r3, #4]
	 cbuf->tail = 0;
   1c222:	687b      	ldr	r3, [r7, #4]
   1c224:	2200      	movs	r2, #0
   1c226:	609a      	str	r2, [r3, #8]
	 cbuf->full = false;
   1c228:	687b      	ldr	r3, [r7, #4]
   1c22a:	2200      	movs	r2, #0
   1c22c:	741a      	strb	r2, [r3, #16]
 }
   1c22e:	46c0      	nop			; (mov r8, r8)
   1c230:	46bd      	mov	sp, r7
   1c232:	b002      	add	sp, #8
   1c234:	bd80      	pop	{r7, pc}
	...

0001c238 <circular_buf_put>:

	 return cbuf->max;
 }

 void circular_buf_put(cbuf_handle_t cbuf, uint8_t data)
 {
   1c238:	b580      	push	{r7, lr}
   1c23a:	b082      	sub	sp, #8
   1c23c:	af00      	add	r7, sp, #0
   1c23e:	6078      	str	r0, [r7, #4]
   1c240:	000a      	movs	r2, r1
   1c242:	1cfb      	adds	r3, r7, #3
   1c244:	701a      	strb	r2, [r3, #0]
	 //assert(cbuf && cbuf->buffer);

	 cbuf->buffer[cbuf->head] = data;
   1c246:	687b      	ldr	r3, [r7, #4]
   1c248:	681a      	ldr	r2, [r3, #0]
   1c24a:	687b      	ldr	r3, [r7, #4]
   1c24c:	685b      	ldr	r3, [r3, #4]
   1c24e:	18d3      	adds	r3, r2, r3
   1c250:	1cfa      	adds	r2, r7, #3
   1c252:	7812      	ldrb	r2, [r2, #0]
   1c254:	701a      	strb	r2, [r3, #0]

	 advance_pointer(cbuf);
   1c256:	687b      	ldr	r3, [r7, #4]
   1c258:	0018      	movs	r0, r3
   1c25a:	4b03      	ldr	r3, [pc, #12]	; (1c268 <circular_buf_put+0x30>)
   1c25c:	4798      	blx	r3
 }
   1c25e:	46c0      	nop			; (mov r8, r8)
   1c260:	46bd      	mov	sp, r7
   1c262:	b002      	add	sp, #8
   1c264:	bd80      	pop	{r7, pc}
   1c266:	46c0      	nop			; (mov r8, r8)
   1c268:	0001c145 	.word	0x0001c145

0001c26c <circular_buf_get>:

	 return r;
 }

 int circular_buf_get(cbuf_handle_t cbuf, uint8_t * data)
 {
   1c26c:	b580      	push	{r7, lr}
   1c26e:	b084      	sub	sp, #16
   1c270:	af00      	add	r7, sp, #0
   1c272:	6078      	str	r0, [r7, #4]
   1c274:	6039      	str	r1, [r7, #0]
	 //assert(cbuf && data && cbuf->buffer);
	 
	 int r = -1;
   1c276:	2301      	movs	r3, #1
   1c278:	425b      	negs	r3, r3
   1c27a:	60fb      	str	r3, [r7, #12]

	 if(!circular_buf_empty(cbuf))
   1c27c:	687b      	ldr	r3, [r7, #4]
   1c27e:	0018      	movs	r0, r3
   1c280:	4b0d      	ldr	r3, [pc, #52]	; (1c2b8 <circular_buf_get+0x4c>)
   1c282:	4798      	blx	r3
   1c284:	0003      	movs	r3, r0
   1c286:	001a      	movs	r2, r3
   1c288:	2301      	movs	r3, #1
   1c28a:	4053      	eors	r3, r2
   1c28c:	b2db      	uxtb	r3, r3
   1c28e:	2b00      	cmp	r3, #0
   1c290:	d00d      	beq.n	1c2ae <circular_buf_get+0x42>
	 {
		 *data = cbuf->buffer[cbuf->tail];
   1c292:	687b      	ldr	r3, [r7, #4]
   1c294:	681a      	ldr	r2, [r3, #0]
   1c296:	687b      	ldr	r3, [r7, #4]
   1c298:	689b      	ldr	r3, [r3, #8]
   1c29a:	18d3      	adds	r3, r2, r3
   1c29c:	781a      	ldrb	r2, [r3, #0]
   1c29e:	683b      	ldr	r3, [r7, #0]
   1c2a0:	701a      	strb	r2, [r3, #0]
		 retreat_pointer(cbuf);
   1c2a2:	687b      	ldr	r3, [r7, #4]
   1c2a4:	0018      	movs	r0, r3
   1c2a6:	4b05      	ldr	r3, [pc, #20]	; (1c2bc <circular_buf_get+0x50>)
   1c2a8:	4798      	blx	r3

		 r = 0;
   1c2aa:	2300      	movs	r3, #0
   1c2ac:	60fb      	str	r3, [r7, #12]
	 }

	 return r;
   1c2ae:	68fb      	ldr	r3, [r7, #12]
 }
   1c2b0:	0018      	movs	r0, r3
   1c2b2:	46bd      	mov	sp, r7
   1c2b4:	b004      	add	sp, #16
   1c2b6:	bd80      	pop	{r7, pc}
   1c2b8:	0001c2c1 	.word	0x0001c2c1
   1c2bc:	0001c1a5 	.word	0x0001c1a5

0001c2c0 <circular_buf_empty>:

 bool circular_buf_empty(cbuf_handle_t cbuf)
 {
   1c2c0:	b580      	push	{r7, lr}
   1c2c2:	b082      	sub	sp, #8
   1c2c4:	af00      	add	r7, sp, #0
   1c2c6:	6078      	str	r0, [r7, #4]
	 //assert(cbuf);

	 return (!cbuf->full && (cbuf->head == cbuf->tail));
   1c2c8:	687b      	ldr	r3, [r7, #4]
   1c2ca:	7c1b      	ldrb	r3, [r3, #16]
   1c2cc:	2201      	movs	r2, #1
   1c2ce:	4053      	eors	r3, r2
   1c2d0:	b2db      	uxtb	r3, r3
   1c2d2:	2b00      	cmp	r3, #0
   1c2d4:	d007      	beq.n	1c2e6 <circular_buf_empty+0x26>
   1c2d6:	687b      	ldr	r3, [r7, #4]
   1c2d8:	685a      	ldr	r2, [r3, #4]
   1c2da:	687b      	ldr	r3, [r7, #4]
   1c2dc:	689b      	ldr	r3, [r3, #8]
   1c2de:	429a      	cmp	r2, r3
   1c2e0:	d101      	bne.n	1c2e6 <circular_buf_empty+0x26>
   1c2e2:	2301      	movs	r3, #1
   1c2e4:	e000      	b.n	1c2e8 <circular_buf_empty+0x28>
   1c2e6:	2300      	movs	r3, #0
   1c2e8:	1c1a      	adds	r2, r3, #0
   1c2ea:	2301      	movs	r3, #1
   1c2ec:	4013      	ands	r3, r2
   1c2ee:	b2db      	uxtb	r3, r3
 }
   1c2f0:	0018      	movs	r0, r3
   1c2f2:	46bd      	mov	sp, r7
   1c2f4:	b002      	add	sp, #8
   1c2f6:	bd80      	pop	{r7, pc}

0001c2f8 <system_interrupt_enable>:
{
   1c2f8:	b580      	push	{r7, lr}
   1c2fa:	b082      	sub	sp, #8
   1c2fc:	af00      	add	r7, sp, #0
   1c2fe:	0002      	movs	r2, r0
   1c300:	1dfb      	adds	r3, r7, #7
   1c302:	701a      	strb	r2, [r3, #0]
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
   1c304:	4b06      	ldr	r3, [pc, #24]	; (1c320 <system_interrupt_enable+0x28>)
   1c306:	1dfa      	adds	r2, r7, #7
   1c308:	7812      	ldrb	r2, [r2, #0]
   1c30a:	0011      	movs	r1, r2
   1c30c:	221f      	movs	r2, #31
   1c30e:	400a      	ands	r2, r1
   1c310:	2101      	movs	r1, #1
   1c312:	4091      	lsls	r1, r2
   1c314:	000a      	movs	r2, r1
   1c316:	601a      	str	r2, [r3, #0]
}
   1c318:	46c0      	nop			; (mov r8, r8)
   1c31a:	46bd      	mov	sp, r7
   1c31c:	b002      	add	sp, #8
   1c31e:	bd80      	pop	{r7, pc}
   1c320:	e000e100 	.word	0xe000e100

0001c324 <usart_is_syncing>:
 * \retval false  Peripheral is not busy syncing and can be read/written without
 *                stalling the bus
 */
static inline bool usart_is_syncing(
		const struct usart_module *const module)
{
   1c324:	b580      	push	{r7, lr}
   1c326:	b084      	sub	sp, #16
   1c328:	af00      	add	r7, sp, #0
   1c32a:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);
   1c32c:	687b      	ldr	r3, [r7, #4]
   1c32e:	681b      	ldr	r3, [r3, #0]
   1c330:	60fb      	str	r3, [r7, #12]

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
   1c332:	68fb      	ldr	r3, [r7, #12]
   1c334:	69db      	ldr	r3, [r3, #28]
   1c336:	1e5a      	subs	r2, r3, #1
   1c338:	4193      	sbcs	r3, r2
   1c33a:	b2db      	uxtb	r3, r3
#else
	return (usart_hw->STATUS.reg & SERCOM_USART_STATUS_SYNCBUSY);
#endif
}
   1c33c:	0018      	movs	r0, r3
   1c33e:	46bd      	mov	sp, r7
   1c340:	b004      	add	sp, #16
   1c342:	bd80      	pop	{r7, pc}

0001c344 <_usart_wait_for_sync>:
 * \internal
 * Waits until synchronization is complete
 */
static inline void _usart_wait_for_sync(
		const struct usart_module *const module)
{
   1c344:	b580      	push	{r7, lr}
   1c346:	b082      	sub	sp, #8
   1c348:	af00      	add	r7, sp, #0
   1c34a:	6078      	str	r0, [r7, #4]
	/* Sanity check */
	Assert(module);

	while (usart_is_syncing(module)) {
   1c34c:	46c0      	nop			; (mov r8, r8)
   1c34e:	687b      	ldr	r3, [r7, #4]
   1c350:	0018      	movs	r0, r3
   1c352:	4b04      	ldr	r3, [pc, #16]	; (1c364 <_usart_wait_for_sync+0x20>)
   1c354:	4798      	blx	r3
   1c356:	1e03      	subs	r3, r0, #0
   1c358:	d1f9      	bne.n	1c34e <_usart_wait_for_sync+0xa>
		/* Wait until the synchronization is complete */
	}
}
   1c35a:	46c0      	nop			; (mov r8, r8)
   1c35c:	46bd      	mov	sp, r7
   1c35e:	b002      	add	sp, #8
   1c360:	bd80      	pop	{r7, pc}
   1c362:	46c0      	nop			; (mov r8, r8)
   1c364:	0001c325 	.word	0x0001c325

0001c368 <usart_get_config_defaults>:
 *
 * \param[in,out] config  Pointer to configuration struct
 */
static inline void usart_get_config_defaults(
		struct usart_config *const config)
{
   1c368:	b580      	push	{r7, lr}
   1c36a:	b082      	sub	sp, #8
   1c36c:	af00      	add	r7, sp, #0
   1c36e:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Set default config in the config struct */
	config->data_order       = USART_DATAORDER_LSB;
   1c370:	687b      	ldr	r3, [r7, #4]
   1c372:	2280      	movs	r2, #128	; 0x80
   1c374:	05d2      	lsls	r2, r2, #23
   1c376:	601a      	str	r2, [r3, #0]
	config->transfer_mode    = USART_TRANSFER_ASYNCHRONOUSLY;
   1c378:	687b      	ldr	r3, [r7, #4]
   1c37a:	2200      	movs	r2, #0
   1c37c:	605a      	str	r2, [r3, #4]
	config->parity           = USART_PARITY_NONE;
   1c37e:	687b      	ldr	r3, [r7, #4]
   1c380:	22ff      	movs	r2, #255	; 0xff
   1c382:	811a      	strh	r2, [r3, #8]
	config->stopbits         = USART_STOPBITS_1;
   1c384:	687b      	ldr	r3, [r7, #4]
   1c386:	2200      	movs	r2, #0
   1c388:	729a      	strb	r2, [r3, #10]
	config->character_size   = USART_CHARACTER_SIZE_8BIT;
   1c38a:	687b      	ldr	r3, [r7, #4]
   1c38c:	2200      	movs	r2, #0
   1c38e:	72da      	strb	r2, [r3, #11]
	config->baudrate         = 9600;
   1c390:	687b      	ldr	r3, [r7, #4]
   1c392:	2296      	movs	r2, #150	; 0x96
   1c394:	0192      	lsls	r2, r2, #6
   1c396:	621a      	str	r2, [r3, #32]
	config->receiver_enable  = true;
   1c398:	687b      	ldr	r3, [r7, #4]
   1c39a:	2224      	movs	r2, #36	; 0x24
   1c39c:	2101      	movs	r1, #1
   1c39e:	5499      	strb	r1, [r3, r2]
	config->transmitter_enable = true;
   1c3a0:	687b      	ldr	r3, [r7, #4]
   1c3a2:	2225      	movs	r2, #37	; 0x25
   1c3a4:	2101      	movs	r1, #1
   1c3a6:	5499      	strb	r1, [r3, r2]
	config->clock_polarity_inverted = false;
   1c3a8:	687b      	ldr	r3, [r7, #4]
   1c3aa:	2226      	movs	r2, #38	; 0x26
   1c3ac:	2100      	movs	r1, #0
   1c3ae:	5499      	strb	r1, [r3, r2]
	config->use_external_clock = false;
   1c3b0:	687b      	ldr	r3, [r7, #4]
   1c3b2:	2227      	movs	r2, #39	; 0x27
   1c3b4:	2100      	movs	r1, #0
   1c3b6:	5499      	strb	r1, [r3, r2]
	config->ext_clock_freq   = 0;
   1c3b8:	687b      	ldr	r3, [r7, #4]
   1c3ba:	2200      	movs	r2, #0
   1c3bc:	629a      	str	r2, [r3, #40]	; 0x28
	config->mux_setting      = USART_RX_1_TX_2_XCK_3;
   1c3be:	687b      	ldr	r3, [r7, #4]
   1c3c0:	2288      	movs	r2, #136	; 0x88
   1c3c2:	0352      	lsls	r2, r2, #13
   1c3c4:	60da      	str	r2, [r3, #12]
	config->run_in_standby   = false;
   1c3c6:	687b      	ldr	r3, [r7, #4]
   1c3c8:	222c      	movs	r2, #44	; 0x2c
   1c3ca:	2100      	movs	r1, #0
   1c3cc:	5499      	strb	r1, [r3, r2]
	config->generator_source = GCLK_GENERATOR_0;
   1c3ce:	687b      	ldr	r3, [r7, #4]
   1c3d0:	222d      	movs	r2, #45	; 0x2d
   1c3d2:	2100      	movs	r1, #0
   1c3d4:	5499      	strb	r1, [r3, r2]
	config->pinmux_pad0      = PINMUX_DEFAULT;
   1c3d6:	687b      	ldr	r3, [r7, #4]
   1c3d8:	2200      	movs	r2, #0
   1c3da:	631a      	str	r2, [r3, #48]	; 0x30
	config->pinmux_pad1      = PINMUX_DEFAULT;
   1c3dc:	687b      	ldr	r3, [r7, #4]
   1c3de:	2200      	movs	r2, #0
   1c3e0:	635a      	str	r2, [r3, #52]	; 0x34
	config->pinmux_pad2      = PINMUX_DEFAULT;
   1c3e2:	687b      	ldr	r3, [r7, #4]
   1c3e4:	2200      	movs	r2, #0
   1c3e6:	639a      	str	r2, [r3, #56]	; 0x38
	config->pinmux_pad3      = PINMUX_DEFAULT;
   1c3e8:	687b      	ldr	r3, [r7, #4]
   1c3ea:	2200      	movs	r2, #0
   1c3ec:	63da      	str	r2, [r3, #60]	; 0x3c
#ifdef FEATURE_USART_OVER_SAMPLE
	config->sample_adjustment     = USART_SAMPLE_ADJUSTMENT_7_8_9;
   1c3ee:	687b      	ldr	r3, [r7, #4]
   1c3f0:	2200      	movs	r2, #0
   1c3f2:	615a      	str	r2, [r3, #20]
	config->sample_rate           = USART_SAMPLE_RATE_16X_ARITHMETIC;
   1c3f4:	687b      	ldr	r3, [r7, #4]
   1c3f6:	2200      	movs	r2, #0
   1c3f8:	821a      	strh	r2, [r3, #16]
#endif
#ifdef FEATURE_USART_LIN_SLAVE
	config->lin_slave_enable      = false;
   1c3fa:	687b      	ldr	r3, [r7, #4]
   1c3fc:	2200      	movs	r2, #0
   1c3fe:	76da      	strb	r2, [r3, #27]
	config->lin_header_delay = LIN_MASTER_HEADER_DELAY_0;
	config->lin_break_length = LIN_MASTER_BREAK_LENGTH_13_BIT;
#endif

#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
	config->immediate_buffer_overflow_notification  = false;
   1c400:	687b      	ldr	r3, [r7, #4]
   1c402:	2200      	movs	r2, #0
   1c404:	761a      	strb	r2, [r3, #24]
#endif
#ifdef FEATURE_USART_START_FRAME_DECTION
	config->start_frame_detection_enable            = false;
   1c406:	687b      	ldr	r3, [r7, #4]
   1c408:	2200      	movs	r2, #0
   1c40a:	771a      	strb	r2, [r3, #28]
#endif
#ifdef FEATURE_USART_IRDA
	config->encoding_format_enable                  = false;
   1c40c:	687b      	ldr	r3, [r7, #4]
   1c40e:	2200      	movs	r2, #0
   1c410:	765a      	strb	r2, [r3, #25]
	config->receive_pulse_length                    = 19;
   1c412:	687b      	ldr	r3, [r7, #4]
   1c414:	2213      	movs	r2, #19
   1c416:	769a      	strb	r2, [r3, #26]
	config->iso7816_config.inhibit_nack             = ISO7816_INHIBIT_NACK_DISABLE;
	config->iso7816_config.successive_recv_nack     = ISO7816_SUCCESSIVE_RECV_NACK_DISABLE;
	config->iso7816_config.max_iterations           = 7;
#endif
#ifdef FEATURE_USART_COLLISION_DECTION
	config->collision_detection_enable              = false;
   1c418:	687b      	ldr	r3, [r7, #4]
   1c41a:	2200      	movs	r2, #0
   1c41c:	775a      	strb	r2, [r3, #29]
#endif
#ifdef FEATURE_USART_RS485
	config->rs485_guard_time = RS485_GUARD_TIME_0_BIT;
#endif
}
   1c41e:	46c0      	nop			; (mov r8, r8)
   1c420:	46bd      	mov	sp, r7
   1c422:	b002      	add	sp, #8
   1c424:	bd80      	pop	{r7, pc}
	...

0001c428 <usart_enable>:
 *
 * \param[in]  module  Pointer to USART software instance struct
 */
static inline void usart_enable(
		const struct usart_module *const module)
{
   1c428:	b580      	push	{r7, lr}
   1c42a:	b084      	sub	sp, #16
   1c42c:	af00      	add	r7, sp, #0
   1c42e:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
   1c430:	687b      	ldr	r3, [r7, #4]
   1c432:	681b      	ldr	r3, [r3, #0]
   1c434:	60fb      	str	r3, [r7, #12]

#if USART_CALLBACK_MODE == true
	/* Enable Global interrupt for module */
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
   1c436:	687b      	ldr	r3, [r7, #4]
   1c438:	681b      	ldr	r3, [r3, #0]
   1c43a:	0018      	movs	r0, r3
   1c43c:	4b09      	ldr	r3, [pc, #36]	; (1c464 <usart_enable+0x3c>)
   1c43e:	4798      	blx	r3
   1c440:	0003      	movs	r3, r0
   1c442:	0018      	movs	r0, r3
   1c444:	4b08      	ldr	r3, [pc, #32]	; (1c468 <usart_enable+0x40>)
   1c446:	4798      	blx	r3
#endif

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);
   1c448:	687b      	ldr	r3, [r7, #4]
   1c44a:	0018      	movs	r0, r3
   1c44c:	4b07      	ldr	r3, [pc, #28]	; (1c46c <usart_enable+0x44>)
   1c44e:	4798      	blx	r3

	/* Enable USART module */
	usart_hw->CTRLA.reg |= SERCOM_USART_CTRLA_ENABLE;
   1c450:	68fb      	ldr	r3, [r7, #12]
   1c452:	681b      	ldr	r3, [r3, #0]
   1c454:	2202      	movs	r2, #2
   1c456:	431a      	orrs	r2, r3
   1c458:	68fb      	ldr	r3, [r7, #12]
   1c45a:	601a      	str	r2, [r3, #0]
}
   1c45c:	46c0      	nop			; (mov r8, r8)
   1c45e:	46bd      	mov	sp, r7
   1c460:	b004      	add	sp, #16
   1c462:	bd80      	pop	{r7, pc}
   1c464:	00025ec1 	.word	0x00025ec1
   1c468:	0001c2f9 	.word	0x0001c2f9
   1c46c:	0001c345 	.word	0x0001c345

0001c470 <usart_enable_callback>:
 * \param[in]  callback_type  Callback type given by an enum
 */
static inline void usart_enable_callback(
		struct usart_module *const module,
		enum usart_callback callback_type)
{
   1c470:	b580      	push	{r7, lr}
   1c472:	b082      	sub	sp, #8
   1c474:	af00      	add	r7, sp, #0
   1c476:	6078      	str	r0, [r7, #4]
   1c478:	000a      	movs	r2, r1
   1c47a:	1cfb      	adds	r3, r7, #3
   1c47c:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);

	/* Enable callback */
	module->callback_enable_mask |= (1 << callback_type);
   1c47e:	687b      	ldr	r3, [r7, #4]
   1c480:	2231      	movs	r2, #49	; 0x31
   1c482:	5c9b      	ldrb	r3, [r3, r2]
   1c484:	b25a      	sxtb	r2, r3
   1c486:	1cfb      	adds	r3, r7, #3
   1c488:	781b      	ldrb	r3, [r3, #0]
   1c48a:	2101      	movs	r1, #1
   1c48c:	4099      	lsls	r1, r3
   1c48e:	000b      	movs	r3, r1
   1c490:	b25b      	sxtb	r3, r3
   1c492:	4313      	orrs	r3, r2
   1c494:	b25b      	sxtb	r3, r3
   1c496:	b2d9      	uxtb	r1, r3
   1c498:	687b      	ldr	r3, [r7, #4]
   1c49a:	2231      	movs	r2, #49	; 0x31
   1c49c:	5499      	strb	r1, [r3, r2]

}
   1c49e:	46c0      	nop			; (mov r8, r8)
   1c4a0:	46bd      	mov	sp, r7
   1c4a2:	b002      	add	sp, #8
   1c4a4:	bd80      	pop	{r7, pc}
	...

0001c4a8 <InitializeSerialConsole>:
 *				asynchronous reads and writes.
 * @note			Call from main once to initialize Hardware.
 */

void InitializeSerialConsole(void)
{
   1c4a8:	b580      	push	{r7, lr}
   1c4aa:	af00      	add	r7, sp, #0
    // Initialize circular buffers for RX and TX
    cbufRx = circular_buf_init((uint8_t *)rxCharacterBuffer, RX_BUFFER_SIZE);
   1c4ac:	2380      	movs	r3, #128	; 0x80
   1c4ae:	009a      	lsls	r2, r3, #2
   1c4b0:	4b0f      	ldr	r3, [pc, #60]	; (1c4f0 <InitializeSerialConsole+0x48>)
   1c4b2:	0011      	movs	r1, r2
   1c4b4:	0018      	movs	r0, r3
   1c4b6:	4b0f      	ldr	r3, [pc, #60]	; (1c4f4 <InitializeSerialConsole+0x4c>)
   1c4b8:	4798      	blx	r3
   1c4ba:	0002      	movs	r2, r0
   1c4bc:	4b0e      	ldr	r3, [pc, #56]	; (1c4f8 <InitializeSerialConsole+0x50>)
   1c4be:	601a      	str	r2, [r3, #0]
    cbufTx = circular_buf_init((uint8_t *)txCharacterBuffer, RX_BUFFER_SIZE);
   1c4c0:	2380      	movs	r3, #128	; 0x80
   1c4c2:	009a      	lsls	r2, r3, #2
   1c4c4:	4b0d      	ldr	r3, [pc, #52]	; (1c4fc <InitializeSerialConsole+0x54>)
   1c4c6:	0011      	movs	r1, r2
   1c4c8:	0018      	movs	r0, r3
   1c4ca:	4b0a      	ldr	r3, [pc, #40]	; (1c4f4 <InitializeSerialConsole+0x4c>)
   1c4cc:	4798      	blx	r3
   1c4ce:	0002      	movs	r2, r0
   1c4d0:	4b0b      	ldr	r3, [pc, #44]	; (1c500 <InitializeSerialConsole+0x58>)
   1c4d2:	601a      	str	r2, [r3, #0]

    // Configure USART and Callbacks
    configure_usart();
   1c4d4:	4b0b      	ldr	r3, [pc, #44]	; (1c504 <InitializeSerialConsole+0x5c>)
   1c4d6:	4798      	blx	r3
    configure_usart_callbacks();
   1c4d8:	4b0b      	ldr	r3, [pc, #44]	; (1c508 <InitializeSerialConsole+0x60>)
   1c4da:	4798      	blx	r3

    usart_read_buffer_job(&usart_instance, (uint8_t *)&latestRx, 1);  // Kicks off constant reading of characters
   1c4dc:	490b      	ldr	r1, [pc, #44]	; (1c50c <InitializeSerialConsole+0x64>)
   1c4de:	4b0c      	ldr	r3, [pc, #48]	; (1c510 <InitializeSerialConsole+0x68>)
   1c4e0:	2201      	movs	r2, #1
   1c4e2:	0018      	movs	r0, r3
   1c4e4:	4b0b      	ldr	r3, [pc, #44]	; (1c514 <InitializeSerialConsole+0x6c>)
   1c4e6:	4798      	blx	r3

    // Add any other calls you need to do to initialize your Serial Console
}
   1c4e8:	46c0      	nop			; (mov r8, r8)
   1c4ea:	46bd      	mov	sp, r7
   1c4ec:	bd80      	pop	{r7, pc}
   1c4ee:	46c0      	nop			; (mov r8, r8)
   1c4f0:	2000532c 	.word	0x2000532c
   1c4f4:	0001c1d9 	.word	0x0001c1d9
   1c4f8:	20005124 	.word	0x20005124
   1c4fc:	2000512c 	.word	0x2000512c
   1c500:	20005530 	.word	0x20005530
   1c504:	0001c67d 	.word	0x0001c67d
   1c508:	0001c6f5 	.word	0x0001c6f5
   1c50c:	20005128 	.word	0x20005128
   1c510:	200050f0 	.word	0x200050f0
   1c514:	00027769 	.word	0x00027769

0001c518 <SerialConsoleWriteString>:
 * @details		Uses the ringbuffer 'cbufTx', which in turn uses the array 'txCharacterBuffer'. Modified to be
 *thread safe.
 * @note			Use to send a string of characters to the user via UART
 */
void SerialConsoleWriteString(const char *string)
{
   1c518:	b580      	push	{r7, lr}
   1c51a:	b084      	sub	sp, #16
   1c51c:	af00      	add	r7, sp, #0
   1c51e:	6078      	str	r0, [r7, #4]
    vTaskSuspendAll();
   1c520:	4b1a      	ldr	r3, [pc, #104]	; (1c58c <SerialConsoleWriteString+0x74>)
   1c522:	4798      	blx	r3
    if (string != NULL) {
   1c524:	687b      	ldr	r3, [r7, #4]
   1c526:	2b00      	cmp	r3, #0
   1c528:	d02a      	beq.n	1c580 <SerialConsoleWriteString+0x68>
        for (size_t iter = 0; iter < strlen(string); iter++) {
   1c52a:	2300      	movs	r3, #0
   1c52c:	60fb      	str	r3, [r7, #12]
   1c52e:	e00b      	b.n	1c548 <SerialConsoleWriteString+0x30>
            circular_buf_put(cbufTx, string[iter]);
   1c530:	4b17      	ldr	r3, [pc, #92]	; (1c590 <SerialConsoleWriteString+0x78>)
   1c532:	6818      	ldr	r0, [r3, #0]
   1c534:	687a      	ldr	r2, [r7, #4]
   1c536:	68fb      	ldr	r3, [r7, #12]
   1c538:	18d3      	adds	r3, r2, r3
   1c53a:	781b      	ldrb	r3, [r3, #0]
   1c53c:	0019      	movs	r1, r3
   1c53e:	4b15      	ldr	r3, [pc, #84]	; (1c594 <SerialConsoleWriteString+0x7c>)
   1c540:	4798      	blx	r3
        for (size_t iter = 0; iter < strlen(string); iter++) {
   1c542:	68fb      	ldr	r3, [r7, #12]
   1c544:	3301      	adds	r3, #1
   1c546:	60fb      	str	r3, [r7, #12]
   1c548:	687b      	ldr	r3, [r7, #4]
   1c54a:	0018      	movs	r0, r3
   1c54c:	4b12      	ldr	r3, [pc, #72]	; (1c598 <SerialConsoleWriteString+0x80>)
   1c54e:	4798      	blx	r3
   1c550:	0002      	movs	r2, r0
   1c552:	68fb      	ldr	r3, [r7, #12]
   1c554:	429a      	cmp	r2, r3
   1c556:	d8eb      	bhi.n	1c530 <SerialConsoleWriteString+0x18>
        }

        if (usart_get_job_status(&usart_instance, USART_TRANSCEIVER_TX) == STATUS_OK) {
   1c558:	4b10      	ldr	r3, [pc, #64]	; (1c59c <SerialConsoleWriteString+0x84>)
   1c55a:	2101      	movs	r1, #1
   1c55c:	0018      	movs	r0, r3
   1c55e:	4b10      	ldr	r3, [pc, #64]	; (1c5a0 <SerialConsoleWriteString+0x88>)
   1c560:	4798      	blx	r3
   1c562:	1e03      	subs	r3, r0, #0
   1c564:	d10c      	bne.n	1c580 <SerialConsoleWriteString+0x68>
            circular_buf_get(cbufTx, (uint8_t *)&latestTx);  // Perform only if the SERCOM TX is free (not busy)
   1c566:	4b0a      	ldr	r3, [pc, #40]	; (1c590 <SerialConsoleWriteString+0x78>)
   1c568:	681b      	ldr	r3, [r3, #0]
   1c56a:	4a0e      	ldr	r2, [pc, #56]	; (1c5a4 <SerialConsoleWriteString+0x8c>)
   1c56c:	0011      	movs	r1, r2
   1c56e:	0018      	movs	r0, r3
   1c570:	4b0d      	ldr	r3, [pc, #52]	; (1c5a8 <SerialConsoleWriteString+0x90>)
   1c572:	4798      	blx	r3
            usart_write_buffer_job(&usart_instance, (uint8_t *)&latestTx, 1);
   1c574:	490b      	ldr	r1, [pc, #44]	; (1c5a4 <SerialConsoleWriteString+0x8c>)
   1c576:	4b09      	ldr	r3, [pc, #36]	; (1c59c <SerialConsoleWriteString+0x84>)
   1c578:	2201      	movs	r2, #1
   1c57a:	0018      	movs	r0, r3
   1c57c:	4b0b      	ldr	r3, [pc, #44]	; (1c5ac <SerialConsoleWriteString+0x94>)
   1c57e:	4798      	blx	r3
        }
    }
    xTaskResumeAll();
   1c580:	4b0b      	ldr	r3, [pc, #44]	; (1c5b0 <SerialConsoleWriteString+0x98>)
   1c582:	4798      	blx	r3
}
   1c584:	46c0      	nop			; (mov r8, r8)
   1c586:	46bd      	mov	sp, r7
   1c588:	b004      	add	sp, #16
   1c58a:	bd80      	pop	{r7, pc}
   1c58c:	0001ab85 	.word	0x0001ab85
   1c590:	20005530 	.word	0x20005530
   1c594:	0001c239 	.word	0x0001c239
   1c598:	000334cf 	.word	0x000334cf
   1c59c:	200050f0 	.word	0x200050f0
   1c5a0:	000277b1 	.word	0x000277b1
   1c5a4:	2000552c 	.word	0x2000552c
   1c5a8:	0001c26d 	.word	0x0001c26d
   1c5ac:	00027721 	.word	0x00027721
   1c5b0:	0001ab9d 	.word	0x0001ab9d

0001c5b4 <SerialConsoleReadCharacter>:
 * @param[in]	Pointer to a character. This function will return the character from the RX buffer into this pointer
 * @return		Returns -1 if there are no characters in the buffer
 * @note			Use to receive characters from the RX buffer (FIFO)
 */
int SerialConsoleReadCharacter(uint8_t *rxChar)
{
   1c5b4:	b580      	push	{r7, lr}
   1c5b6:	b084      	sub	sp, #16
   1c5b8:	af00      	add	r7, sp, #0
   1c5ba:	6078      	str	r0, [r7, #4]
    vTaskSuspendAll();
   1c5bc:	4b08      	ldr	r3, [pc, #32]	; (1c5e0 <SerialConsoleReadCharacter+0x2c>)
   1c5be:	4798      	blx	r3
    int a = circular_buf_get(cbufRx, (uint8_t *)rxChar);
   1c5c0:	4b08      	ldr	r3, [pc, #32]	; (1c5e4 <SerialConsoleReadCharacter+0x30>)
   1c5c2:	681b      	ldr	r3, [r3, #0]
   1c5c4:	687a      	ldr	r2, [r7, #4]
   1c5c6:	0011      	movs	r1, r2
   1c5c8:	0018      	movs	r0, r3
   1c5ca:	4b07      	ldr	r3, [pc, #28]	; (1c5e8 <SerialConsoleReadCharacter+0x34>)
   1c5cc:	4798      	blx	r3
   1c5ce:	0003      	movs	r3, r0
   1c5d0:	60fb      	str	r3, [r7, #12]
    xTaskResumeAll();
   1c5d2:	4b06      	ldr	r3, [pc, #24]	; (1c5ec <SerialConsoleReadCharacter+0x38>)
   1c5d4:	4798      	blx	r3
    return a;
   1c5d6:	68fb      	ldr	r3, [r7, #12]
}
   1c5d8:	0018      	movs	r0, r3
   1c5da:	46bd      	mov	sp, r7
   1c5dc:	b004      	add	sp, #16
   1c5de:	bd80      	pop	{r7, pc}
   1c5e0:	0001ab85 	.word	0x0001ab85
   1c5e4:	20005124 	.word	0x20005124
   1c5e8:	0001c26d 	.word	0x0001c26d
   1c5ec:	0001ab9d 	.word	0x0001ab9d

0001c5f0 <getLogLevel>:
 * @return		Returns the current debug level of the system.
 * @note
 */

enum eDebugLogLevels getLogLevel(void)
{
   1c5f0:	b580      	push	{r7, lr}
   1c5f2:	af00      	add	r7, sp, #0
    return currentDebugLevel;
   1c5f4:	4b02      	ldr	r3, [pc, #8]	; (1c600 <getLogLevel+0x10>)
   1c5f6:	781b      	ldrb	r3, [r3, #0]
}
   1c5f8:	0018      	movs	r0, r3
   1c5fa:	46bd      	mov	sp, r7
   1c5fc:	bd80      	pop	{r7, pc}
   1c5fe:	46c0      	nop			; (mov r8, r8)
   1c600:	20003cb8 	.word	0x20003cb8

0001c604 <LogMessage>:
 * @fn			LogMessage (Students to fill out this)
 * @brief
 * @note
 */
void LogMessage(enum eDebugLogLevels level, const char *format, ...)
{
   1c604:	b40e      	push	{r1, r2, r3}
   1c606:	b590      	push	{r4, r7, lr}
   1c608:	b084      	sub	sp, #16
   1c60a:	af00      	add	r7, sp, #0
   1c60c:	0002      	movs	r2, r0
   1c60e:	1dfb      	adds	r3, r7, #7
   1c610:	701a      	strb	r2, [r3, #0]
    if (getLogLevel() <= level) {
   1c612:	4b0e      	ldr	r3, [pc, #56]	; (1c64c <LogMessage+0x48>)
   1c614:	4798      	blx	r3
   1c616:	0003      	movs	r3, r0
   1c618:	001a      	movs	r2, r3
   1c61a:	1dfb      	adds	r3, r7, #7
   1c61c:	781b      	ldrb	r3, [r3, #0]
   1c61e:	4293      	cmp	r3, r2
   1c620:	d30c      	bcc.n	1c63c <LogMessage+0x38>
        va_list ap;
        va_start(ap, format);
   1c622:	2320      	movs	r3, #32
   1c624:	18fb      	adds	r3, r7, r3
   1c626:	60fb      	str	r3, [r7, #12]
        vsnprintf(debugBuffer, 127, format, ap);
   1c628:	68fb      	ldr	r3, [r7, #12]
   1c62a:	69fa      	ldr	r2, [r7, #28]
   1c62c:	4808      	ldr	r0, [pc, #32]	; (1c650 <LogMessage+0x4c>)
   1c62e:	217f      	movs	r1, #127	; 0x7f
   1c630:	4c08      	ldr	r4, [pc, #32]	; (1c654 <LogMessage+0x50>)
   1c632:	47a0      	blx	r4
        SerialConsoleWriteString(debugBuffer);
   1c634:	4b06      	ldr	r3, [pc, #24]	; (1c650 <LogMessage+0x4c>)
   1c636:	0018      	movs	r0, r3
   1c638:	4b07      	ldr	r3, [pc, #28]	; (1c658 <LogMessage+0x54>)
   1c63a:	4798      	blx	r3
        va_end(ap);
    }
};
   1c63c:	46c0      	nop			; (mov r8, r8)
   1c63e:	46bd      	mov	sp, r7
   1c640:	b004      	add	sp, #16
   1c642:	bc90      	pop	{r4, r7}
   1c644:	bc08      	pop	{r3}
   1c646:	b003      	add	sp, #12
   1c648:	4718      	bx	r3
   1c64a:	46c0      	nop			; (mov r8, r8)
   1c64c:	0001c5f1 	.word	0x0001c5f1
   1c650:	20005070 	.word	0x20005070
   1c654:	00033709 	.word	0x00033709
   1c658:	0001c519 	.word	0x0001c519

0001c65c <LogMessageDebug>:
 * @fn			LogMessage Debug
 * @brief
 * @note
 */
void LogMessageDebug(const char *format, ...)
{
   1c65c:	b40f      	push	{r0, r1, r2, r3}
   1c65e:	b580      	push	{r7, lr}
   1c660:	af00      	add	r7, sp, #0
    LogMessage(LOG_DEBUG_LVL, format);
   1c662:	68bb      	ldr	r3, [r7, #8]
   1c664:	0019      	movs	r1, r3
   1c666:	2001      	movs	r0, #1
   1c668:	4b03      	ldr	r3, [pc, #12]	; (1c678 <LogMessageDebug+0x1c>)
   1c66a:	4798      	blx	r3
};
   1c66c:	46c0      	nop			; (mov r8, r8)
   1c66e:	46bd      	mov	sp, r7
   1c670:	bc80      	pop	{r7}
   1c672:	bc08      	pop	{r3}
   1c674:	b004      	add	sp, #16
   1c676:	4718      	bx	r3
   1c678:	0001c605 	.word	0x0001c605

0001c67c <configure_usart>:
 * @fn			static void configure_usart(void)
 * @brief		Code to configure the SERCOM "EDBG_CDC_MODULE" to be a UART channel running at 115200 8N1
 * @note
 */
static void configure_usart(void)
{
   1c67c:	b580      	push	{r7, lr}
   1c67e:	b090      	sub	sp, #64	; 0x40
   1c680:	af00      	add	r7, sp, #0
    struct usart_config config_usart;
    usart_get_config_defaults(&config_usart);
   1c682:	003b      	movs	r3, r7
   1c684:	0018      	movs	r0, r3
   1c686:	4b14      	ldr	r3, [pc, #80]	; (1c6d8 <configure_usart+0x5c>)
   1c688:	4798      	blx	r3

    config_usart.baudrate = 115200;
   1c68a:	003b      	movs	r3, r7
   1c68c:	22e1      	movs	r2, #225	; 0xe1
   1c68e:	0252      	lsls	r2, r2, #9
   1c690:	621a      	str	r2, [r3, #32]
    config_usart.mux_setting = EDBG_CDC_SERCOM_MUX_SETTING;
   1c692:	003b      	movs	r3, r7
   1c694:	22c4      	movs	r2, #196	; 0xc4
   1c696:	0392      	lsls	r2, r2, #14
   1c698:	60da      	str	r2, [r3, #12]
    config_usart.pinmux_pad0 = EDBG_CDC_SERCOM_PINMUX_PAD0;
   1c69a:	003b      	movs	r3, r7
   1c69c:	2201      	movs	r2, #1
   1c69e:	4252      	negs	r2, r2
   1c6a0:	631a      	str	r2, [r3, #48]	; 0x30
    config_usart.pinmux_pad1 = EDBG_CDC_SERCOM_PINMUX_PAD1;
   1c6a2:	003b      	movs	r3, r7
   1c6a4:	2201      	movs	r2, #1
   1c6a6:	4252      	negs	r2, r2
   1c6a8:	635a      	str	r2, [r3, #52]	; 0x34
    config_usart.pinmux_pad2 = EDBG_CDC_SERCOM_PINMUX_PAD2;
   1c6aa:	003b      	movs	r3, r7
   1c6ac:	4a0b      	ldr	r2, [pc, #44]	; (1c6dc <configure_usart+0x60>)
   1c6ae:	639a      	str	r2, [r3, #56]	; 0x38
    config_usart.pinmux_pad3 = EDBG_CDC_SERCOM_PINMUX_PAD3;
   1c6b0:	003b      	movs	r3, r7
   1c6b2:	4a0b      	ldr	r2, [pc, #44]	; (1c6e0 <configure_usart+0x64>)
   1c6b4:	63da      	str	r2, [r3, #60]	; 0x3c
    while (usart_init(&usart_instance, EDBG_CDC_MODULE, &config_usart) != STATUS_OK) {
   1c6b6:	46c0      	nop			; (mov r8, r8)
   1c6b8:	003a      	movs	r2, r7
   1c6ba:	490a      	ldr	r1, [pc, #40]	; (1c6e4 <configure_usart+0x68>)
   1c6bc:	4b0a      	ldr	r3, [pc, #40]	; (1c6e8 <configure_usart+0x6c>)
   1c6be:	0018      	movs	r0, r3
   1c6c0:	4b0a      	ldr	r3, [pc, #40]	; (1c6ec <configure_usart+0x70>)
   1c6c2:	4798      	blx	r3
   1c6c4:	1e03      	subs	r3, r0, #0
   1c6c6:	d1f7      	bne.n	1c6b8 <configure_usart+0x3c>
    }

    usart_enable(&usart_instance);
   1c6c8:	4b07      	ldr	r3, [pc, #28]	; (1c6e8 <configure_usart+0x6c>)
   1c6ca:	0018      	movs	r0, r3
   1c6cc:	4b08      	ldr	r3, [pc, #32]	; (1c6f0 <configure_usart+0x74>)
   1c6ce:	4798      	blx	r3
}
   1c6d0:	46c0      	nop			; (mov r8, r8)
   1c6d2:	46bd      	mov	sp, r7
   1c6d4:	b010      	add	sp, #64	; 0x40
   1c6d6:	bd80      	pop	{r7, pc}
   1c6d8:	0001c369 	.word	0x0001c369
   1c6dc:	002a0003 	.word	0x002a0003
   1c6e0:	002b0003 	.word	0x002b0003
   1c6e4:	42001800 	.word	0x42001800
   1c6e8:	200050f0 	.word	0x200050f0
   1c6ec:	00027325 	.word	0x00027325
   1c6f0:	0001c429 	.word	0x0001c429

0001c6f4 <configure_usart_callbacks>:
 * @fn			static void configure_usart_callbacks(void)
 * @brief		Code to register callbacks
 * @note
 */
static void configure_usart_callbacks(void)
{
   1c6f4:	b580      	push	{r7, lr}
   1c6f6:	af00      	add	r7, sp, #0
    usart_register_callback(&usart_instance, usart_write_callback, USART_CALLBACK_BUFFER_TRANSMITTED);
   1c6f8:	490c      	ldr	r1, [pc, #48]	; (1c72c <configure_usart_callbacks+0x38>)
   1c6fa:	4b0d      	ldr	r3, [pc, #52]	; (1c730 <configure_usart_callbacks+0x3c>)
   1c6fc:	2200      	movs	r2, #0
   1c6fe:	0018      	movs	r0, r3
   1c700:	4b0c      	ldr	r3, [pc, #48]	; (1c734 <configure_usart_callbacks+0x40>)
   1c702:	4798      	blx	r3
    usart_register_callback(&usart_instance, usart_read_callback, USART_CALLBACK_BUFFER_RECEIVED);
   1c704:	490c      	ldr	r1, [pc, #48]	; (1c738 <configure_usart_callbacks+0x44>)
   1c706:	4b0a      	ldr	r3, [pc, #40]	; (1c730 <configure_usart_callbacks+0x3c>)
   1c708:	2201      	movs	r2, #1
   1c70a:	0018      	movs	r0, r3
   1c70c:	4b09      	ldr	r3, [pc, #36]	; (1c734 <configure_usart_callbacks+0x40>)
   1c70e:	4798      	blx	r3
    usart_enable_callback(&usart_instance, USART_CALLBACK_BUFFER_TRANSMITTED);
   1c710:	4b07      	ldr	r3, [pc, #28]	; (1c730 <configure_usart_callbacks+0x3c>)
   1c712:	2100      	movs	r1, #0
   1c714:	0018      	movs	r0, r3
   1c716:	4b09      	ldr	r3, [pc, #36]	; (1c73c <configure_usart_callbacks+0x48>)
   1c718:	4798      	blx	r3
    usart_enable_callback(&usart_instance, USART_CALLBACK_BUFFER_RECEIVED);
   1c71a:	4b05      	ldr	r3, [pc, #20]	; (1c730 <configure_usart_callbacks+0x3c>)
   1c71c:	2101      	movs	r1, #1
   1c71e:	0018      	movs	r0, r3
   1c720:	4b06      	ldr	r3, [pc, #24]	; (1c73c <configure_usart_callbacks+0x48>)
   1c722:	4798      	blx	r3
}
   1c724:	46c0      	nop			; (mov r8, r8)
   1c726:	46bd      	mov	sp, r7
   1c728:	bd80      	pop	{r7, pc}
   1c72a:	46c0      	nop			; (mov r8, r8)
   1c72c:	0001c789 	.word	0x0001c789
   1c730:	200050f0 	.word	0x200050f0
   1c734:	000276d9 	.word	0x000276d9
   1c738:	0001c741 	.word	0x0001c741
   1c73c:	0001c471 	.word	0x0001c471

0001c740 <usart_read_callback>:
 * @fn			void usart_read_callback(struct usart_module *const usart_module)
 * @brief		Callback called when the system finishes receives all the bytes requested from a UART read job
 * @note
 */
void usart_read_callback(struct usart_module *const usart_module)
{
   1c740:	b580      	push	{r7, lr}
   1c742:	b082      	sub	sp, #8
   1c744:	af00      	add	r7, sp, #0
   1c746:	6078      	str	r0, [r7, #4]
    circular_buf_put(cbufRx, (uint8_t)latestRx);                      // Add the latest read character into the RX circular Buffer
   1c748:	4b09      	ldr	r3, [pc, #36]	; (1c770 <usart_read_callback+0x30>)
   1c74a:	681a      	ldr	r2, [r3, #0]
   1c74c:	4b09      	ldr	r3, [pc, #36]	; (1c774 <usart_read_callback+0x34>)
   1c74e:	781b      	ldrb	r3, [r3, #0]
   1c750:	0019      	movs	r1, r3
   1c752:	0010      	movs	r0, r2
   1c754:	4b08      	ldr	r3, [pc, #32]	; (1c778 <usart_read_callback+0x38>)
   1c756:	4798      	blx	r3
    usart_read_buffer_job(&usart_instance, (uint8_t *)&latestRx, 1);  // Order the MCU to keep reading
   1c758:	4906      	ldr	r1, [pc, #24]	; (1c774 <usart_read_callback+0x34>)
   1c75a:	4b08      	ldr	r3, [pc, #32]	; (1c77c <usart_read_callback+0x3c>)
   1c75c:	2201      	movs	r2, #1
   1c75e:	0018      	movs	r0, r3
   1c760:	4b07      	ldr	r3, [pc, #28]	; (1c780 <usart_read_callback+0x40>)
   1c762:	4798      	blx	r3
    CliCharReadySemaphoreGiveFromISR();                               // Give binary semaphore
   1c764:	4b07      	ldr	r3, [pc, #28]	; (1c784 <usart_read_callback+0x44>)
   1c766:	4798      	blx	r3
}
   1c768:	46c0      	nop			; (mov r8, r8)
   1c76a:	46bd      	mov	sp, r7
   1c76c:	b002      	add	sp, #8
   1c76e:	bd80      	pop	{r7, pc}
   1c770:	20005124 	.word	0x20005124
   1c774:	20005128 	.word	0x20005128
   1c778:	0001c239 	.word	0x0001c239
   1c77c:	200050f0 	.word	0x200050f0
   1c780:	00027769 	.word	0x00027769
   1c784:	000131cd 	.word	0x000131cd

0001c788 <usart_write_callback>:
 * @fn			void usart_write_callback(struct usart_module *const usart_module)
 * @brief		Callback called when the system finishes sending all the bytes requested from a UART read job
 * @note
 */
void usart_write_callback(struct usart_module *const usart_module)
{
   1c788:	b580      	push	{r7, lr}
   1c78a:	b082      	sub	sp, #8
   1c78c:	af00      	add	r7, sp, #0
   1c78e:	6078      	str	r0, [r7, #4]
    if (circular_buf_get(cbufTx, (uint8_t *)&latestTx) != -1)  // Only continue if there are more characters to send
   1c790:	4b09      	ldr	r3, [pc, #36]	; (1c7b8 <usart_write_callback+0x30>)
   1c792:	681b      	ldr	r3, [r3, #0]
   1c794:	4a09      	ldr	r2, [pc, #36]	; (1c7bc <usart_write_callback+0x34>)
   1c796:	0011      	movs	r1, r2
   1c798:	0018      	movs	r0, r3
   1c79a:	4b09      	ldr	r3, [pc, #36]	; (1c7c0 <usart_write_callback+0x38>)
   1c79c:	4798      	blx	r3
   1c79e:	0003      	movs	r3, r0
   1c7a0:	3301      	adds	r3, #1
   1c7a2:	d005      	beq.n	1c7b0 <usart_write_callback+0x28>
    {
        usart_write_buffer_job(&usart_instance, (uint8_t *)&latestTx, 1);
   1c7a4:	4905      	ldr	r1, [pc, #20]	; (1c7bc <usart_write_callback+0x34>)
   1c7a6:	4b07      	ldr	r3, [pc, #28]	; (1c7c4 <usart_write_callback+0x3c>)
   1c7a8:	2201      	movs	r2, #1
   1c7aa:	0018      	movs	r0, r3
   1c7ac:	4b06      	ldr	r3, [pc, #24]	; (1c7c8 <usart_write_callback+0x40>)
   1c7ae:	4798      	blx	r3
    }
}
   1c7b0:	46c0      	nop			; (mov r8, r8)
   1c7b2:	46bd      	mov	sp, r7
   1c7b4:	b002      	add	sp, #8
   1c7b6:	bd80      	pop	{r7, pc}
   1c7b8:	20005530 	.word	0x20005530
   1c7bc:	2000552c 	.word	0x2000552c
   1c7c0:	0001c26d 	.word	0x0001c26d
   1c7c4:	200050f0 	.word	0x200050f0
   1c7c8:	00027721 	.word	0x00027721

0001c7cc <SDMMC_UNSTUFF_BITS>:
 * \brief Macro function to extract a bits field from a large SD MMC register
 * Used by : CSD, SCR, Switch status
 */
static inline uint32_t SDMMC_UNSTUFF_BITS(uint8_t *reg, uint16_t reg_size,
		uint16_t pos, uint8_t size)
{
   1c7cc:	b590      	push	{r4, r7, lr}
   1c7ce:	b087      	sub	sp, #28
   1c7d0:	af00      	add	r7, sp, #0
   1c7d2:	60f8      	str	r0, [r7, #12]
   1c7d4:	000c      	movs	r4, r1
   1c7d6:	0010      	movs	r0, r2
   1c7d8:	0019      	movs	r1, r3
   1c7da:	230a      	movs	r3, #10
   1c7dc:	18fb      	adds	r3, r7, r3
   1c7de:	1c22      	adds	r2, r4, #0
   1c7e0:	801a      	strh	r2, [r3, #0]
   1c7e2:	2308      	movs	r3, #8
   1c7e4:	18fb      	adds	r3, r7, r3
   1c7e6:	1c02      	adds	r2, r0, #0
   1c7e8:	801a      	strh	r2, [r3, #0]
   1c7ea:	1dfb      	adds	r3, r7, #7
   1c7ec:	1c0a      	adds	r2, r1, #0
   1c7ee:	701a      	strb	r2, [r3, #0]
	uint32_t value;
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
   1c7f0:	230a      	movs	r3, #10
   1c7f2:	18fb      	adds	r3, r7, r3
   1c7f4:	881a      	ldrh	r2, [r3, #0]
   1c7f6:	2308      	movs	r3, #8
   1c7f8:	18fb      	adds	r3, r7, r3
   1c7fa:	881b      	ldrh	r3, [r3, #0]
   1c7fc:	1ad3      	subs	r3, r2, r3
   1c7fe:	3307      	adds	r3, #7
   1c800:	2b00      	cmp	r3, #0
   1c802:	da00      	bge.n	1c806 <SDMMC_UNSTUFF_BITS+0x3a>
   1c804:	3307      	adds	r3, #7
   1c806:	10db      	asrs	r3, r3, #3
   1c808:	3b01      	subs	r3, #1
   1c80a:	68fa      	ldr	r2, [r7, #12]
   1c80c:	18d3      	adds	r3, r2, r3
   1c80e:	781b      	ldrb	r3, [r3, #0]
   1c810:	0019      	movs	r1, r3
   1c812:	2308      	movs	r3, #8
   1c814:	18fb      	adds	r3, r7, r3
   1c816:	881b      	ldrh	r3, [r3, #0]
   1c818:	2207      	movs	r2, #7
   1c81a:	4013      	ands	r3, r2
   1c81c:	4119      	asrs	r1, r3
   1c81e:	000b      	movs	r3, r1
   1c820:	617b      	str	r3, [r7, #20]
	if (((pos % 8) + size) > 8) {
   1c822:	2308      	movs	r3, #8
   1c824:	18fb      	adds	r3, r7, r3
   1c826:	881b      	ldrh	r3, [r3, #0]
   1c828:	2207      	movs	r2, #7
   1c82a:	401a      	ands	r2, r3
   1c82c:	1dfb      	adds	r3, r7, #7
   1c82e:	781b      	ldrb	r3, [r3, #0]
   1c830:	18d3      	adds	r3, r2, r3
   1c832:	2b08      	cmp	r3, #8
   1c834:	dd1c      	ble.n	1c870 <SDMMC_UNSTUFF_BITS+0xa4>
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 2] << (8 - (pos % 8));
   1c836:	230a      	movs	r3, #10
   1c838:	18fb      	adds	r3, r7, r3
   1c83a:	881a      	ldrh	r2, [r3, #0]
   1c83c:	2308      	movs	r3, #8
   1c83e:	18fb      	adds	r3, r7, r3
   1c840:	881b      	ldrh	r3, [r3, #0]
   1c842:	1ad3      	subs	r3, r2, r3
   1c844:	3307      	adds	r3, #7
   1c846:	2b00      	cmp	r3, #0
   1c848:	da00      	bge.n	1c84c <SDMMC_UNSTUFF_BITS+0x80>
   1c84a:	3307      	adds	r3, #7
   1c84c:	10db      	asrs	r3, r3, #3
   1c84e:	3b02      	subs	r3, #2
   1c850:	68fa      	ldr	r2, [r7, #12]
   1c852:	18d3      	adds	r3, r2, r3
   1c854:	781b      	ldrb	r3, [r3, #0]
   1c856:	0019      	movs	r1, r3
   1c858:	2308      	movs	r3, #8
   1c85a:	18fb      	adds	r3, r7, r3
   1c85c:	881b      	ldrh	r3, [r3, #0]
   1c85e:	2207      	movs	r2, #7
   1c860:	4013      	ands	r3, r2
   1c862:	2208      	movs	r2, #8
   1c864:	1ad3      	subs	r3, r2, r3
   1c866:	4099      	lsls	r1, r3
   1c868:	000b      	movs	r3, r1
   1c86a:	697a      	ldr	r2, [r7, #20]
   1c86c:	4313      	orrs	r3, r2
   1c86e:	617b      	str	r3, [r7, #20]
	}
	if (((pos % 8) + size) > 16) {
   1c870:	2308      	movs	r3, #8
   1c872:	18fb      	adds	r3, r7, r3
   1c874:	881b      	ldrh	r3, [r3, #0]
   1c876:	2207      	movs	r2, #7
   1c878:	401a      	ands	r2, r3
   1c87a:	1dfb      	adds	r3, r7, #7
   1c87c:	781b      	ldrb	r3, [r3, #0]
   1c87e:	18d3      	adds	r3, r2, r3
   1c880:	2b10      	cmp	r3, #16
   1c882:	dd1c      	ble.n	1c8be <SDMMC_UNSTUFF_BITS+0xf2>
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
   1c884:	230a      	movs	r3, #10
   1c886:	18fb      	adds	r3, r7, r3
   1c888:	881a      	ldrh	r2, [r3, #0]
   1c88a:	2308      	movs	r3, #8
   1c88c:	18fb      	adds	r3, r7, r3
   1c88e:	881b      	ldrh	r3, [r3, #0]
   1c890:	1ad3      	subs	r3, r2, r3
   1c892:	3307      	adds	r3, #7
   1c894:	2b00      	cmp	r3, #0
   1c896:	da00      	bge.n	1c89a <SDMMC_UNSTUFF_BITS+0xce>
   1c898:	3307      	adds	r3, #7
   1c89a:	10db      	asrs	r3, r3, #3
   1c89c:	3b03      	subs	r3, #3
   1c89e:	68fa      	ldr	r2, [r7, #12]
   1c8a0:	18d3      	adds	r3, r2, r3
   1c8a2:	781b      	ldrb	r3, [r3, #0]
   1c8a4:	0019      	movs	r1, r3
   1c8a6:	2308      	movs	r3, #8
   1c8a8:	18fb      	adds	r3, r7, r3
   1c8aa:	881b      	ldrh	r3, [r3, #0]
   1c8ac:	2207      	movs	r2, #7
   1c8ae:	4013      	ands	r3, r2
   1c8b0:	2210      	movs	r2, #16
   1c8b2:	1ad3      	subs	r3, r2, r3
   1c8b4:	4099      	lsls	r1, r3
   1c8b6:	000b      	movs	r3, r1
   1c8b8:	697a      	ldr	r2, [r7, #20]
   1c8ba:	4313      	orrs	r3, r2
   1c8bc:	617b      	str	r3, [r7, #20]
	}
	if (((pos % 8) + size) > 16) {
   1c8be:	2308      	movs	r3, #8
   1c8c0:	18fb      	adds	r3, r7, r3
   1c8c2:	881b      	ldrh	r3, [r3, #0]
   1c8c4:	2207      	movs	r2, #7
   1c8c6:	401a      	ands	r2, r3
   1c8c8:	1dfb      	adds	r3, r7, #7
   1c8ca:	781b      	ldrb	r3, [r3, #0]
   1c8cc:	18d3      	adds	r3, r2, r3
   1c8ce:	2b10      	cmp	r3, #16
   1c8d0:	dd1c      	ble.n	1c90c <SDMMC_UNSTUFF_BITS+0x140>
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
   1c8d2:	230a      	movs	r3, #10
   1c8d4:	18fb      	adds	r3, r7, r3
   1c8d6:	881a      	ldrh	r2, [r3, #0]
   1c8d8:	2308      	movs	r3, #8
   1c8da:	18fb      	adds	r3, r7, r3
   1c8dc:	881b      	ldrh	r3, [r3, #0]
   1c8de:	1ad3      	subs	r3, r2, r3
   1c8e0:	3307      	adds	r3, #7
   1c8e2:	2b00      	cmp	r3, #0
   1c8e4:	da00      	bge.n	1c8e8 <SDMMC_UNSTUFF_BITS+0x11c>
   1c8e6:	3307      	adds	r3, #7
   1c8e8:	10db      	asrs	r3, r3, #3
   1c8ea:	3b03      	subs	r3, #3
   1c8ec:	68fa      	ldr	r2, [r7, #12]
   1c8ee:	18d3      	adds	r3, r2, r3
   1c8f0:	781b      	ldrb	r3, [r3, #0]
   1c8f2:	0019      	movs	r1, r3
   1c8f4:	2308      	movs	r3, #8
   1c8f6:	18fb      	adds	r3, r7, r3
   1c8f8:	881b      	ldrh	r3, [r3, #0]
   1c8fa:	2207      	movs	r2, #7
   1c8fc:	4013      	ands	r3, r2
   1c8fe:	2210      	movs	r2, #16
   1c900:	1ad3      	subs	r3, r2, r3
   1c902:	4099      	lsls	r1, r3
   1c904:	000b      	movs	r3, r1
   1c906:	697a      	ldr	r2, [r7, #20]
   1c908:	4313      	orrs	r3, r2
   1c90a:	617b      	str	r3, [r7, #20]
	}
	value &=  ((uint32_t)1 << size) - 1;
   1c90c:	1dfb      	adds	r3, r7, #7
   1c90e:	781b      	ldrb	r3, [r3, #0]
   1c910:	2201      	movs	r2, #1
   1c912:	409a      	lsls	r2, r3
   1c914:	0013      	movs	r3, r2
   1c916:	1e5a      	subs	r2, r3, #1
   1c918:	697b      	ldr	r3, [r7, #20]
   1c91a:	4013      	ands	r3, r2
   1c91c:	617b      	str	r3, [r7, #20]
	return value;
   1c91e:	697b      	ldr	r3, [r7, #20]
}
   1c920:	0018      	movs	r0, r3
   1c922:	46bd      	mov	sp, r7
   1c924:	b007      	add	sp, #28
   1c926:	bd90      	pop	{r4, r7, pc}

0001c928 <mmc_spi_op_cond>:
 * - CMD58 reads OCR
 *
 * \return true if success, otherwise false
 */
static bool mmc_spi_op_cond(void)
{
   1c928:	b580      	push	{r7, lr}
   1c92a:	b082      	sub	sp, #8
   1c92c:	af00      	add	r7, sp, #0
	/*
	 * Timeout 1s = 400KHz / ((6+1)*8) cylces = 7150 retry
	 * 6 = cmd byte size
	 * 1 = response byte size
	 */
	retry = 7150;
   1c92e:	4b23      	ldr	r3, [pc, #140]	; (1c9bc <mmc_spi_op_cond+0x94>)
   1c930:	607b      	str	r3, [r7, #4]
	do {
		if (!driver_send_cmd(MMC_SPI_CMD1_SEND_OP_COND, 0)) {
   1c932:	4b23      	ldr	r3, [pc, #140]	; (1c9c0 <mmc_spi_op_cond+0x98>)
   1c934:	2100      	movs	r1, #0
   1c936:	0018      	movs	r0, r3
   1c938:	4b22      	ldr	r3, [pc, #136]	; (1c9c4 <mmc_spi_op_cond+0x9c>)
   1c93a:	4798      	blx	r3
   1c93c:	0003      	movs	r3, r0
   1c93e:	001a      	movs	r2, r3
   1c940:	2301      	movs	r3, #1
   1c942:	4053      	eors	r3, r2
   1c944:	b2db      	uxtb	r3, r3
   1c946:	2b00      	cmp	r3, #0
   1c948:	d001      	beq.n	1c94e <mmc_spi_op_cond+0x26>
			sd_mmc_debug("%s: CMD1 SPI Fail - Busy retry %d\n\r",
					__func__, (int)(7150 - retry));
			return false;
   1c94a:	2300      	movs	r3, #0
   1c94c:	e031      	b.n	1c9b2 <mmc_spi_op_cond+0x8a>
		}
		// Check busy flag
		resp = driver_get_response();
   1c94e:	4b1e      	ldr	r3, [pc, #120]	; (1c9c8 <mmc_spi_op_cond+0xa0>)
   1c950:	4798      	blx	r3
   1c952:	0003      	movs	r3, r0
   1c954:	603b      	str	r3, [r7, #0]
		if (!(resp & R1_SPI_IDLE)) {
   1c956:	683b      	ldr	r3, [r7, #0]
   1c958:	2201      	movs	r2, #1
   1c95a:	4013      	ands	r3, r2
   1c95c:	d006      	beq.n	1c96c <mmc_spi_op_cond+0x44>
			break;
		}
		if (retry-- == 0) {
   1c95e:	687b      	ldr	r3, [r7, #4]
   1c960:	1e5a      	subs	r2, r3, #1
   1c962:	607a      	str	r2, [r7, #4]
   1c964:	2b00      	cmp	r3, #0
   1c966:	d1e4      	bne.n	1c932 <mmc_spi_op_cond+0xa>
			sd_mmc_debug("%s: CMD1 Timeout on busy\n\r", __func__);
			return false;
   1c968:	2300      	movs	r3, #0
   1c96a:	e022      	b.n	1c9b2 <mmc_spi_op_cond+0x8a>
			break;
   1c96c:	46c0      	nop			; (mov r8, r8)
		}
	} while (1);

	// Read OCR for SPI mode
	if (!driver_send_cmd(SDMMC_SPI_CMD58_READ_OCR, 0)) {
   1c96e:	4b17      	ldr	r3, [pc, #92]	; (1c9cc <mmc_spi_op_cond+0xa4>)
   1c970:	2100      	movs	r1, #0
   1c972:	0018      	movs	r0, r3
   1c974:	4b13      	ldr	r3, [pc, #76]	; (1c9c4 <mmc_spi_op_cond+0x9c>)
   1c976:	4798      	blx	r3
   1c978:	0003      	movs	r3, r0
   1c97a:	001a      	movs	r2, r3
   1c97c:	2301      	movs	r3, #1
   1c97e:	4053      	eors	r3, r2
   1c980:	b2db      	uxtb	r3, r3
   1c982:	2b00      	cmp	r3, #0
   1c984:	d001      	beq.n	1c98a <mmc_spi_op_cond+0x62>
		sd_mmc_debug("%s: CMD58 Fail\n\r", __func__);
		return false;
   1c986:	2300      	movs	r3, #0
   1c988:	e013      	b.n	1c9b2 <mmc_spi_op_cond+0x8a>
	}
	// Check OCR value
	if ((driver_get_response() & OCR_ACCESS_MODE_MASK)
   1c98a:	4b0f      	ldr	r3, [pc, #60]	; (1c9c8 <mmc_spi_op_cond+0xa0>)
   1c98c:	4798      	blx	r3
   1c98e:	0002      	movs	r2, r0
   1c990:	23c0      	movs	r3, #192	; 0xc0
   1c992:	05db      	lsls	r3, r3, #23
   1c994:	401a      	ands	r2, r3
   1c996:	2380      	movs	r3, #128	; 0x80
   1c998:	05db      	lsls	r3, r3, #23
   1c99a:	429a      	cmp	r2, r3
   1c99c:	d108      	bne.n	1c9b0 <mmc_spi_op_cond+0x88>
			== OCR_ACCESS_MODE_SECTOR) {
		sd_mmc_card->type |= CARD_TYPE_HC;
   1c99e:	4b0c      	ldr	r3, [pc, #48]	; (1c9d0 <mmc_spi_op_cond+0xa8>)
   1c9a0:	681a      	ldr	r2, [r3, #0]
   1c9a2:	4b0b      	ldr	r3, [pc, #44]	; (1c9d0 <mmc_spi_op_cond+0xa8>)
   1c9a4:	681b      	ldr	r3, [r3, #0]
   1c9a6:	7adb      	ldrb	r3, [r3, #11]
   1c9a8:	2108      	movs	r1, #8
   1c9aa:	430b      	orrs	r3, r1
   1c9ac:	b2db      	uxtb	r3, r3
   1c9ae:	72d3      	strb	r3, [r2, #11]
	}
	return true;
   1c9b0:	2301      	movs	r3, #1
}
   1c9b2:	0018      	movs	r0, r3
   1c9b4:	46bd      	mov	sp, r7
   1c9b6:	b002      	add	sp, #8
   1c9b8:	bd80      	pop	{r7, pc}
   1c9ba:	46c0      	nop			; (mov r8, r8)
   1c9bc:	00001bee 	.word	0x00001bee
   1c9c0:	00001101 	.word	0x00001101
   1c9c4:	0001e3a5 	.word	0x0001e3a5
   1c9c8:	0001e5e5 	.word	0x0001e5e5
   1c9cc:	0000053a 	.word	0x0000053a
   1c9d0:	20003ce0 	.word	0x20003ce0

0001c9d4 <sd_spi_op_cond>:
 * \param v2   Shall be 1 if it is a SD card V2
 *
 * \return true if success, otherwise false
 */
static bool sd_spi_op_cond(uint8_t v2)
{
   1c9d4:	b580      	push	{r7, lr}
   1c9d6:	b086      	sub	sp, #24
   1c9d8:	af00      	add	r7, sp, #0
   1c9da:	0002      	movs	r2, r0
   1c9dc:	1dfb      	adds	r3, r7, #7
   1c9de:	701a      	strb	r2, [r3, #0]
	/*
	 * Timeout 1s = 400KHz / ((6+1)*8) cylces = 7150 retry
	 * 6 = cmd byte size
	 * 1 = response byte size
	 */
	retry = 7150;
   1c9e0:	4b2e      	ldr	r3, [pc, #184]	; (1ca9c <sd_spi_op_cond+0xc8>)
   1c9e2:	613b      	str	r3, [r7, #16]
	do {
		// CMD55 - Indicate to the card that the next command is an
		// application specific command rather than a standard command.
		if (!driver_send_cmd(SDMMC_CMD55_APP_CMD, 0)) {
   1c9e4:	4b2e      	ldr	r3, [pc, #184]	; (1caa0 <sd_spi_op_cond+0xcc>)
   1c9e6:	2100      	movs	r1, #0
   1c9e8:	0018      	movs	r0, r3
   1c9ea:	4b2e      	ldr	r3, [pc, #184]	; (1caa4 <sd_spi_op_cond+0xd0>)
   1c9ec:	4798      	blx	r3
   1c9ee:	0003      	movs	r3, r0
   1c9f0:	001a      	movs	r2, r3
   1c9f2:	2301      	movs	r3, #1
   1c9f4:	4053      	eors	r3, r2
   1c9f6:	b2db      	uxtb	r3, r3
   1c9f8:	2b00      	cmp	r3, #0
   1c9fa:	d001      	beq.n	1ca00 <sd_spi_op_cond+0x2c>
			sd_mmc_debug("%s: CMD55 Fail\n\r", __func__);
			return false;
   1c9fc:	2300      	movs	r3, #0
   1c9fe:	e048      	b.n	1ca92 <sd_spi_op_cond+0xbe>
		}

		// (ACMD41) Sends host OCR register
		arg = 0;
   1ca00:	2300      	movs	r3, #0
   1ca02:	617b      	str	r3, [r7, #20]
		if (v2) {
   1ca04:	1dfb      	adds	r3, r7, #7
   1ca06:	781b      	ldrb	r3, [r3, #0]
   1ca08:	2b00      	cmp	r3, #0
   1ca0a:	d004      	beq.n	1ca16 <sd_spi_op_cond+0x42>
			arg |= SD_ACMD41_HCS;
   1ca0c:	697b      	ldr	r3, [r7, #20]
   1ca0e:	2280      	movs	r2, #128	; 0x80
   1ca10:	05d2      	lsls	r2, r2, #23
   1ca12:	4313      	orrs	r3, r2
   1ca14:	617b      	str	r3, [r7, #20]
		}
		// Check response
		if (!driver_send_cmd(SD_SPI_ACMD41_SD_SEND_OP_COND, arg)) {
   1ca16:	697b      	ldr	r3, [r7, #20]
   1ca18:	4a23      	ldr	r2, [pc, #140]	; (1caa8 <sd_spi_op_cond+0xd4>)
   1ca1a:	0019      	movs	r1, r3
   1ca1c:	0010      	movs	r0, r2
   1ca1e:	4b21      	ldr	r3, [pc, #132]	; (1caa4 <sd_spi_op_cond+0xd0>)
   1ca20:	4798      	blx	r3
   1ca22:	0003      	movs	r3, r0
   1ca24:	001a      	movs	r2, r3
   1ca26:	2301      	movs	r3, #1
   1ca28:	4053      	eors	r3, r2
   1ca2a:	b2db      	uxtb	r3, r3
   1ca2c:	2b00      	cmp	r3, #0
   1ca2e:	d001      	beq.n	1ca34 <sd_spi_op_cond+0x60>
			sd_mmc_debug("%s: ACMD41 Fail\n\r", __func__);
			return false;
   1ca30:	2300      	movs	r3, #0
   1ca32:	e02e      	b.n	1ca92 <sd_spi_op_cond+0xbe>
		}
		resp = driver_get_response();
   1ca34:	4b1d      	ldr	r3, [pc, #116]	; (1caac <sd_spi_op_cond+0xd8>)
   1ca36:	4798      	blx	r3
   1ca38:	0003      	movs	r3, r0
   1ca3a:	60fb      	str	r3, [r7, #12]
		if (!(resp & R1_SPI_IDLE)) {
   1ca3c:	68fb      	ldr	r3, [r7, #12]
   1ca3e:	2201      	movs	r2, #1
   1ca40:	4013      	ands	r3, r2
   1ca42:	d006      	beq.n	1ca52 <sd_spi_op_cond+0x7e>
			// Card is ready
			break;
		}
		if (retry-- == 0) {
   1ca44:	693b      	ldr	r3, [r7, #16]
   1ca46:	1e5a      	subs	r2, r3, #1
   1ca48:	613a      	str	r2, [r7, #16]
   1ca4a:	2b00      	cmp	r3, #0
   1ca4c:	d1ca      	bne.n	1c9e4 <sd_spi_op_cond+0x10>
			sd_mmc_debug("%s: ACMD41 Timeout on busy, resp32 0x%08x \n\r",
					__func__, resp);
			return false;
   1ca4e:	2300      	movs	r3, #0
   1ca50:	e01f      	b.n	1ca92 <sd_spi_op_cond+0xbe>
			break;
   1ca52:	46c0      	nop			; (mov r8, r8)
		}
	} while (1);

	// Read OCR for SPI mode
	if (!driver_send_cmd(SDMMC_SPI_CMD58_READ_OCR, 0)) {
   1ca54:	4b16      	ldr	r3, [pc, #88]	; (1cab0 <sd_spi_op_cond+0xdc>)
   1ca56:	2100      	movs	r1, #0
   1ca58:	0018      	movs	r0, r3
   1ca5a:	4b12      	ldr	r3, [pc, #72]	; (1caa4 <sd_spi_op_cond+0xd0>)
   1ca5c:	4798      	blx	r3
   1ca5e:	0003      	movs	r3, r0
   1ca60:	001a      	movs	r2, r3
   1ca62:	2301      	movs	r3, #1
   1ca64:	4053      	eors	r3, r2
   1ca66:	b2db      	uxtb	r3, r3
   1ca68:	2b00      	cmp	r3, #0
   1ca6a:	d001      	beq.n	1ca70 <sd_spi_op_cond+0x9c>
		sd_mmc_debug("%s: CMD58 Fail\n\r", __func__);
		return false;
   1ca6c:	2300      	movs	r3, #0
   1ca6e:	e010      	b.n	1ca92 <sd_spi_op_cond+0xbe>
	}
	if ((driver_get_response() & OCR_CCS) != 0) {
   1ca70:	4b0e      	ldr	r3, [pc, #56]	; (1caac <sd_spi_op_cond+0xd8>)
   1ca72:	4798      	blx	r3
   1ca74:	0002      	movs	r2, r0
   1ca76:	2380      	movs	r3, #128	; 0x80
   1ca78:	05db      	lsls	r3, r3, #23
   1ca7a:	4013      	ands	r3, r2
   1ca7c:	d008      	beq.n	1ca90 <sd_spi_op_cond+0xbc>
		sd_mmc_card->type |= CARD_TYPE_HC;
   1ca7e:	4b0d      	ldr	r3, [pc, #52]	; (1cab4 <sd_spi_op_cond+0xe0>)
   1ca80:	681a      	ldr	r2, [r3, #0]
   1ca82:	4b0c      	ldr	r3, [pc, #48]	; (1cab4 <sd_spi_op_cond+0xe0>)
   1ca84:	681b      	ldr	r3, [r3, #0]
   1ca86:	7adb      	ldrb	r3, [r3, #11]
   1ca88:	2108      	movs	r1, #8
   1ca8a:	430b      	orrs	r3, r1
   1ca8c:	b2db      	uxtb	r3, r3
   1ca8e:	72d3      	strb	r3, [r2, #11]
	}
	return true;
   1ca90:	2301      	movs	r3, #1
}
   1ca92:	0018      	movs	r0, r3
   1ca94:	46bd      	mov	sp, r7
   1ca96:	b006      	add	sp, #24
   1ca98:	bd80      	pop	{r7, pc}
   1ca9a:	46c0      	nop			; (mov r8, r8)
   1ca9c:	00001bee 	.word	0x00001bee
   1caa0:	00001137 	.word	0x00001137
   1caa4:	0001e3a5 	.word	0x0001e3a5
   1caa8:	00001129 	.word	0x00001129
   1caac:	0001e5e5 	.word	0x0001e5e5
   1cab0:	0000053a 	.word	0x0000053a
   1cab4:	20003ce0 	.word	0x20003ce0

0001cab8 <sdio_op_cond>:
	return true;
}

#else
static bool sdio_op_cond(void)
{
   1cab8:	b580      	push	{r7, lr}
   1caba:	af00      	add	r7, sp, #0
	return true; // No error but card type not updated
   1cabc:	2301      	movs	r3, #1
}
   1cabe:	0018      	movs	r0, r3
   1cac0:	46bd      	mov	sp, r7
   1cac2:	bd80      	pop	{r7, pc}

0001cac4 <sd_cmd8>:
 *
 * \return true if success, otherwise false
 *         with a update of \ref sd_mmc_err.
 */
static bool sd_cmd8(uint8_t * v2)
{
   1cac4:	b580      	push	{r7, lr}
   1cac6:	b084      	sub	sp, #16
   1cac8:	af00      	add	r7, sp, #0
   1caca:	6078      	str	r0, [r7, #4]
	uint32_t resp;

	*v2 = 0;
   1cacc:	687b      	ldr	r3, [r7, #4]
   1cace:	2200      	movs	r2, #0
   1cad0:	701a      	strb	r2, [r3, #0]
	// Test for SD version 2
	if (!driver_send_cmd(SD_CMD8_SEND_IF_COND,
   1cad2:	23d5      	movs	r3, #213	; 0xd5
   1cad4:	005b      	lsls	r3, r3, #1
   1cad6:	4a14      	ldr	r2, [pc, #80]	; (1cb28 <sd_cmd8+0x64>)
   1cad8:	0019      	movs	r1, r3
   1cada:	0010      	movs	r0, r2
   1cadc:	4b13      	ldr	r3, [pc, #76]	; (1cb2c <sd_cmd8+0x68>)
   1cade:	4798      	blx	r3
   1cae0:	0003      	movs	r3, r0
   1cae2:	001a      	movs	r2, r3
   1cae4:	2301      	movs	r3, #1
   1cae6:	4053      	eors	r3, r2
   1cae8:	b2db      	uxtb	r3, r3
   1caea:	2b00      	cmp	r3, #0
   1caec:	d001      	beq.n	1caf2 <sd_cmd8+0x2e>
			SD_CMD8_PATTERN | SD_CMD8_HIGH_VOLTAGE)) {
		return true; // It is not a V2
   1caee:	2301      	movs	r3, #1
   1caf0:	e015      	b.n	1cb1e <sd_cmd8+0x5a>
	}
	// Check R7 response
	resp = driver_get_response();
   1caf2:	4b0f      	ldr	r3, [pc, #60]	; (1cb30 <sd_cmd8+0x6c>)
   1caf4:	4798      	blx	r3
   1caf6:	0003      	movs	r3, r0
   1caf8:	60fb      	str	r3, [r7, #12]
	if (resp == 0xFFFFFFFF) {
   1cafa:	68fb      	ldr	r3, [r7, #12]
   1cafc:	3301      	adds	r3, #1
   1cafe:	d101      	bne.n	1cb04 <sd_cmd8+0x40>
		// No compliance R7 value
		return true; // It is not a V2
   1cb00:	2301      	movs	r3, #1
   1cb02:	e00c      	b.n	1cb1e <sd_cmd8+0x5a>
	}
	if ((resp & (SD_CMD8_MASK_PATTERN | SD_CMD8_MASK_VOLTAGE))
   1cb04:	68fb      	ldr	r3, [r7, #12]
   1cb06:	051b      	lsls	r3, r3, #20
   1cb08:	0d1a      	lsrs	r2, r3, #20
   1cb0a:	23d5      	movs	r3, #213	; 0xd5
   1cb0c:	005b      	lsls	r3, r3, #1
   1cb0e:	429a      	cmp	r2, r3
   1cb10:	d001      	beq.n	1cb16 <sd_cmd8+0x52>
				!= (SD_CMD8_PATTERN | SD_CMD8_HIGH_VOLTAGE)) {
		sd_mmc_debug("%s: CMD8 resp32 0x%08x UNUSABLE CARD\n\r",
				__func__, resp);
		return false;
   1cb12:	2300      	movs	r3, #0
   1cb14:	e003      	b.n	1cb1e <sd_cmd8+0x5a>
	}
	sd_mmc_debug("SD card V2\n\r");
	*v2 = 1;
   1cb16:	687b      	ldr	r3, [r7, #4]
   1cb18:	2201      	movs	r2, #1
   1cb1a:	701a      	strb	r2, [r3, #0]
	return true;
   1cb1c:	2301      	movs	r3, #1
}
   1cb1e:	0018      	movs	r0, r3
   1cb20:	46bd      	mov	sp, r7
   1cb22:	b004      	add	sp, #16
   1cb24:	bd80      	pop	{r7, pc}
   1cb26:	46c0      	nop			; (mov r8, r8)
   1cb28:	00005508 	.word	0x00005508
   1cb2c:	0001e3a5 	.word	0x0001e3a5
   1cb30:	0001e5e5 	.word	0x0001e5e5

0001cb34 <mmc_cmd8>:
 * support information
 *
 * \return true if success, otherwise false
 */
static bool mmc_cmd8(uint8_t *b_authorize_high_speed)
{
   1cb34:	b590      	push	{r4, r7, lr}
   1cb36:	b089      	sub	sp, #36	; 0x24
   1cb38:	af02      	add	r7, sp, #8
   1cb3a:	6078      	str	r0, [r7, #4]
	uint16_t i;
	uint32_t ext_csd;
	uint32_t sec_count;

	if (!driver_adtc_start(MMC_CMD8_SEND_EXT_CSD, 0,
   1cb3c:	2380      	movs	r3, #128	; 0x80
   1cb3e:	009a      	lsls	r2, r3, #2
   1cb40:	4841      	ldr	r0, [pc, #260]	; (1cc48 <mmc_cmd8+0x114>)
   1cb42:	2300      	movs	r3, #0
   1cb44:	9300      	str	r3, [sp, #0]
   1cb46:	2301      	movs	r3, #1
   1cb48:	2100      	movs	r1, #0
   1cb4a:	4c40      	ldr	r4, [pc, #256]	; (1cc4c <mmc_cmd8+0x118>)
   1cb4c:	47a0      	blx	r4
   1cb4e:	0003      	movs	r3, r0
   1cb50:	001a      	movs	r2, r3
   1cb52:	2301      	movs	r3, #1
   1cb54:	4053      	eors	r3, r2
   1cb56:	b2db      	uxtb	r3, r3
   1cb58:	2b00      	cmp	r3, #0
   1cb5a:	d001      	beq.n	1cb60 <mmc_cmd8+0x2c>
			EXT_CSD_BSIZE, 1, false)) {
		return false;
   1cb5c:	2300      	movs	r3, #0
   1cb5e:	e06e      	b.n	1cc3e <mmc_cmd8+0x10a>
	//** Read and decode Extended Extended CSD
	// Note: The read access is done in byte to avoid a buffer
	// of EXT_CSD_BSIZE Byte in stack.

	// Read card type
	for (i = 0; i < (EXT_CSD_CARD_TYPE_INDEX + 4) / 4; i++) {
   1cb60:	2316      	movs	r3, #22
   1cb62:	18fb      	adds	r3, r7, r3
   1cb64:	2200      	movs	r2, #0
   1cb66:	801a      	strh	r2, [r3, #0]
   1cb68:	e014      	b.n	1cb94 <mmc_cmd8+0x60>
		if (!driver_read_word(&ext_csd)) {
   1cb6a:	2310      	movs	r3, #16
   1cb6c:	18fb      	adds	r3, r7, r3
   1cb6e:	0018      	movs	r0, r3
   1cb70:	4b37      	ldr	r3, [pc, #220]	; (1cc50 <mmc_cmd8+0x11c>)
   1cb72:	4798      	blx	r3
   1cb74:	0003      	movs	r3, r0
   1cb76:	001a      	movs	r2, r3
   1cb78:	2301      	movs	r3, #1
   1cb7a:	4053      	eors	r3, r2
   1cb7c:	b2db      	uxtb	r3, r3
   1cb7e:	2b00      	cmp	r3, #0
   1cb80:	d001      	beq.n	1cb86 <mmc_cmd8+0x52>
			return false;
   1cb82:	2300      	movs	r3, #0
   1cb84:	e05b      	b.n	1cc3e <mmc_cmd8+0x10a>
	for (i = 0; i < (EXT_CSD_CARD_TYPE_INDEX + 4) / 4; i++) {
   1cb86:	2316      	movs	r3, #22
   1cb88:	18fb      	adds	r3, r7, r3
   1cb8a:	881a      	ldrh	r2, [r3, #0]
   1cb8c:	2316      	movs	r3, #22
   1cb8e:	18fb      	adds	r3, r7, r3
   1cb90:	3201      	adds	r2, #1
   1cb92:	801a      	strh	r2, [r3, #0]
   1cb94:	2316      	movs	r3, #22
   1cb96:	18fb      	adds	r3, r7, r3
   1cb98:	881b      	ldrh	r3, [r3, #0]
   1cb9a:	2b31      	cmp	r3, #49	; 0x31
   1cb9c:	d9e5      	bls.n	1cb6a <mmc_cmd8+0x36>
		}
	}
	*b_authorize_high_speed = (ext_csd >> ((EXT_CSD_CARD_TYPE_INDEX % 4) * 8))
			& MMC_CTYPE_52MHZ;
   1cb9e:	693b      	ldr	r3, [r7, #16]
   1cba0:	b2db      	uxtb	r3, r3
   1cba2:	2202      	movs	r2, #2
   1cba4:	4013      	ands	r3, r2
   1cba6:	b2da      	uxtb	r2, r3
	*b_authorize_high_speed = (ext_csd >> ((EXT_CSD_CARD_TYPE_INDEX % 4) * 8))
   1cba8:	687b      	ldr	r3, [r7, #4]
   1cbaa:	701a      	strb	r2, [r3, #0]

	if (MMC_CSD_C_SIZE(sd_mmc_card->csd) == 0xFFF) {
   1cbac:	4b29      	ldr	r3, [pc, #164]	; (1cc54 <mmc_cmd8+0x120>)
   1cbae:	681b      	ldr	r3, [r3, #0]
   1cbb0:	330e      	adds	r3, #14
   1cbb2:	0018      	movs	r0, r3
   1cbb4:	230c      	movs	r3, #12
   1cbb6:	223e      	movs	r2, #62	; 0x3e
   1cbb8:	2180      	movs	r1, #128	; 0x80
   1cbba:	4c27      	ldr	r4, [pc, #156]	; (1cc58 <mmc_cmd8+0x124>)
   1cbbc:	47a0      	blx	r4
   1cbbe:	0002      	movs	r2, r0
   1cbc0:	4b26      	ldr	r3, [pc, #152]	; (1cc5c <mmc_cmd8+0x128>)
   1cbc2:	429a      	cmp	r2, r3
   1cbc4:	d135      	bne.n	1cc32 <mmc_cmd8+0xfe>
		// For high capacity SD/MMC card,
		// memory capacity = SEC_COUNT * 512 byte
		for (; i <(EXT_CSD_SEC_COUNT_INDEX + 4) / 4; i++) {
   1cbc6:	e014      	b.n	1cbf2 <mmc_cmd8+0xbe>
			if (!driver_read_word(&sec_count)) {
   1cbc8:	230c      	movs	r3, #12
   1cbca:	18fb      	adds	r3, r7, r3
   1cbcc:	0018      	movs	r0, r3
   1cbce:	4b20      	ldr	r3, [pc, #128]	; (1cc50 <mmc_cmd8+0x11c>)
   1cbd0:	4798      	blx	r3
   1cbd2:	0003      	movs	r3, r0
   1cbd4:	001a      	movs	r2, r3
   1cbd6:	2301      	movs	r3, #1
   1cbd8:	4053      	eors	r3, r2
   1cbda:	b2db      	uxtb	r3, r3
   1cbdc:	2b00      	cmp	r3, #0
   1cbde:	d001      	beq.n	1cbe4 <mmc_cmd8+0xb0>
				return false;
   1cbe0:	2300      	movs	r3, #0
   1cbe2:	e02c      	b.n	1cc3e <mmc_cmd8+0x10a>
		for (; i <(EXT_CSD_SEC_COUNT_INDEX + 4) / 4; i++) {
   1cbe4:	2316      	movs	r3, #22
   1cbe6:	18fb      	adds	r3, r7, r3
   1cbe8:	881a      	ldrh	r2, [r3, #0]
   1cbea:	2316      	movs	r3, #22
   1cbec:	18fb      	adds	r3, r7, r3
   1cbee:	3201      	adds	r2, #1
   1cbf0:	801a      	strh	r2, [r3, #0]
   1cbf2:	2316      	movs	r3, #22
   1cbf4:	18fb      	adds	r3, r7, r3
   1cbf6:	881b      	ldrh	r3, [r3, #0]
   1cbf8:	2b35      	cmp	r3, #53	; 0x35
   1cbfa:	d9e5      	bls.n	1cbc8 <mmc_cmd8+0x94>
			}
		}
		sd_mmc_card->capacity = sec_count / 2;
   1cbfc:	4b15      	ldr	r3, [pc, #84]	; (1cc54 <mmc_cmd8+0x120>)
   1cbfe:	681b      	ldr	r3, [r3, #0]
   1cc00:	68fa      	ldr	r2, [r7, #12]
   1cc02:	0852      	lsrs	r2, r2, #1
   1cc04:	605a      	str	r2, [r3, #4]
	}
	for (; i < EXT_CSD_BSIZE / 4; i++) {
   1cc06:	e014      	b.n	1cc32 <mmc_cmd8+0xfe>
		if (!driver_read_word(&sec_count)) {
   1cc08:	230c      	movs	r3, #12
   1cc0a:	18fb      	adds	r3, r7, r3
   1cc0c:	0018      	movs	r0, r3
   1cc0e:	4b10      	ldr	r3, [pc, #64]	; (1cc50 <mmc_cmd8+0x11c>)
   1cc10:	4798      	blx	r3
   1cc12:	0003      	movs	r3, r0
   1cc14:	001a      	movs	r2, r3
   1cc16:	2301      	movs	r3, #1
   1cc18:	4053      	eors	r3, r2
   1cc1a:	b2db      	uxtb	r3, r3
   1cc1c:	2b00      	cmp	r3, #0
   1cc1e:	d001      	beq.n	1cc24 <mmc_cmd8+0xf0>
			return false;
   1cc20:	2300      	movs	r3, #0
   1cc22:	e00c      	b.n	1cc3e <mmc_cmd8+0x10a>
	for (; i < EXT_CSD_BSIZE / 4; i++) {
   1cc24:	2316      	movs	r3, #22
   1cc26:	18fb      	adds	r3, r7, r3
   1cc28:	881a      	ldrh	r2, [r3, #0]
   1cc2a:	2316      	movs	r3, #22
   1cc2c:	18fb      	adds	r3, r7, r3
   1cc2e:	3201      	adds	r2, #1
   1cc30:	801a      	strh	r2, [r3, #0]
   1cc32:	2316      	movs	r3, #22
   1cc34:	18fb      	adds	r3, r7, r3
   1cc36:	881b      	ldrh	r3, [r3, #0]
   1cc38:	2b7f      	cmp	r3, #127	; 0x7f
   1cc3a:	d9e5      	bls.n	1cc08 <mmc_cmd8+0xd4>
		}
	}
	return true;
   1cc3c:	2301      	movs	r3, #1
}
   1cc3e:	0018      	movs	r0, r3
   1cc40:	46bd      	mov	sp, r7
   1cc42:	b007      	add	sp, #28
   1cc44:	bd90      	pop	{r4, r7, pc}
   1cc46:	46c0      	nop			; (mov r8, r8)
   1cc48:	00081108 	.word	0x00081108
   1cc4c:	0001e3cd 	.word	0x0001e3cd
   1cc50:	0001e5f9 	.word	0x0001e5f9
   1cc54:	20003ce0 	.word	0x20003ce0
   1cc58:	0001c7cd 	.word	0x0001c7cd
   1cc5c:	00000fff 	.word	0x00000fff

0001cc60 <sd_mmc_cmd9_spi>:
 * data (CSD) on the CMD line spi.
 *
 * \return true if success, otherwise false
 */
static bool sd_mmc_cmd9_spi(void)
{
   1cc60:	b590      	push	{r4, r7, lr}
   1cc62:	b083      	sub	sp, #12
   1cc64:	af02      	add	r7, sp, #8
	if (!driver_adtc_start(SDMMC_SPI_CMD9_SEND_CSD, (uint32_t)sd_mmc_card->rca << 16,
   1cc66:	4b15      	ldr	r3, [pc, #84]	; (1ccbc <sd_mmc_cmd9_spi+0x5c>)
   1cc68:	681b      	ldr	r3, [r3, #0]
   1cc6a:	891b      	ldrh	r3, [r3, #8]
   1cc6c:	0419      	lsls	r1, r3, #16
   1cc6e:	4814      	ldr	r0, [pc, #80]	; (1ccc0 <sd_mmc_cmd9_spi+0x60>)
   1cc70:	2301      	movs	r3, #1
   1cc72:	9300      	str	r3, [sp, #0]
   1cc74:	2301      	movs	r3, #1
   1cc76:	2210      	movs	r2, #16
   1cc78:	4c12      	ldr	r4, [pc, #72]	; (1ccc4 <sd_mmc_cmd9_spi+0x64>)
   1cc7a:	47a0      	blx	r4
   1cc7c:	0003      	movs	r3, r0
   1cc7e:	001a      	movs	r2, r3
   1cc80:	2301      	movs	r3, #1
   1cc82:	4053      	eors	r3, r2
   1cc84:	b2db      	uxtb	r3, r3
   1cc86:	2b00      	cmp	r3, #0
   1cc88:	d001      	beq.n	1cc8e <sd_mmc_cmd9_spi+0x2e>
			CSD_REG_BSIZE, 1, true)) {
		return false;
   1cc8a:	2300      	movs	r3, #0
   1cc8c:	e012      	b.n	1ccb4 <sd_mmc_cmd9_spi+0x54>
	}
	if (!driver_start_read_blocks(sd_mmc_card->csd, 1)) {
   1cc8e:	4b0b      	ldr	r3, [pc, #44]	; (1ccbc <sd_mmc_cmd9_spi+0x5c>)
   1cc90:	681b      	ldr	r3, [r3, #0]
   1cc92:	330e      	adds	r3, #14
   1cc94:	2101      	movs	r1, #1
   1cc96:	0018      	movs	r0, r3
   1cc98:	4b0b      	ldr	r3, [pc, #44]	; (1ccc8 <sd_mmc_cmd9_spi+0x68>)
   1cc9a:	4798      	blx	r3
   1cc9c:	0003      	movs	r3, r0
   1cc9e:	001a      	movs	r2, r3
   1cca0:	2301      	movs	r3, #1
   1cca2:	4053      	eors	r3, r2
   1cca4:	b2db      	uxtb	r3, r3
   1cca6:	2b00      	cmp	r3, #0
   1cca8:	d001      	beq.n	1ccae <sd_mmc_cmd9_spi+0x4e>
		return false;
   1ccaa:	2300      	movs	r3, #0
   1ccac:	e002      	b.n	1ccb4 <sd_mmc_cmd9_spi+0x54>
	}
	return driver_wait_end_of_read_blocks();
   1ccae:	4b07      	ldr	r3, [pc, #28]	; (1cccc <sd_mmc_cmd9_spi+0x6c>)
   1ccb0:	4798      	blx	r3
   1ccb2:	0003      	movs	r3, r0
}
   1ccb4:	0018      	movs	r0, r3
   1ccb6:	46bd      	mov	sp, r7
   1ccb8:	b001      	add	sp, #4
   1ccba:	bd90      	pop	{r4, r7, pc}
   1ccbc:	20003ce0 	.word	0x20003ce0
   1ccc0:	00081109 	.word	0x00081109
   1ccc4:	0001e3cd 	.word	0x0001e3cd
   1ccc8:	0001e69d 	.word	0x0001e69d
   1cccc:	0001e741 	.word	0x0001e741

0001ccd0 <mmc_decode_csd>:

/**
 * \brief Decodes MMC CSD register
 */
static void mmc_decode_csd(void)
{
   1ccd0:	b5b0      	push	{r4, r5, r7, lr}
   1ccd2:	b084      	sub	sp, #16
   1ccd4:	af00      	add	r7, sp, #0
 	uint32_t unit;
	uint32_t mul;
	uint32_t tran_speed;

	// Get MMC System Specification version supported by the card
	switch (MMC_CSD_SPEC_VERS(sd_mmc_card->csd)) {
   1ccd6:	4b45      	ldr	r3, [pc, #276]	; (1cdec <mmc_decode_csd+0x11c>)
   1ccd8:	681b      	ldr	r3, [r3, #0]
   1ccda:	330e      	adds	r3, #14
   1ccdc:	0018      	movs	r0, r3
   1ccde:	2304      	movs	r3, #4
   1cce0:	227a      	movs	r2, #122	; 0x7a
   1cce2:	2180      	movs	r1, #128	; 0x80
   1cce4:	4c42      	ldr	r4, [pc, #264]	; (1cdf0 <mmc_decode_csd+0x120>)
   1cce6:	47a0      	blx	r4
   1cce8:	0003      	movs	r3, r0
   1ccea:	2b02      	cmp	r3, #2
   1ccec:	d011      	beq.n	1cd12 <mmc_decode_csd+0x42>
   1ccee:	d802      	bhi.n	1ccf6 <mmc_decode_csd+0x26>
   1ccf0:	2b01      	cmp	r3, #1
   1ccf2:	d009      	beq.n	1cd08 <mmc_decode_csd+0x38>
   1ccf4:	e003      	b.n	1ccfe <mmc_decode_csd+0x2e>
   1ccf6:	2b03      	cmp	r3, #3
   1ccf8:	d010      	beq.n	1cd1c <mmc_decode_csd+0x4c>
   1ccfa:	2b04      	cmp	r3, #4
   1ccfc:	d013      	beq.n	1cd26 <mmc_decode_csd+0x56>
	default:
	case 0:
		sd_mmc_card->version = CARD_VER_MMC_1_2;
   1ccfe:	4b3b      	ldr	r3, [pc, #236]	; (1cdec <mmc_decode_csd+0x11c>)
   1cd00:	681b      	ldr	r3, [r3, #0]
   1cd02:	2212      	movs	r2, #18
   1cd04:	731a      	strb	r2, [r3, #12]
		break;
   1cd06:	e013      	b.n	1cd30 <mmc_decode_csd+0x60>

	case 1:
		sd_mmc_card->version = CARD_VER_MMC_1_4;
   1cd08:	4b38      	ldr	r3, [pc, #224]	; (1cdec <mmc_decode_csd+0x11c>)
   1cd0a:	681b      	ldr	r3, [r3, #0]
   1cd0c:	2214      	movs	r2, #20
   1cd0e:	731a      	strb	r2, [r3, #12]
		break;
   1cd10:	e00e      	b.n	1cd30 <mmc_decode_csd+0x60>

	case 2:
		sd_mmc_card->version = CARD_VER_MMC_2_2;
   1cd12:	4b36      	ldr	r3, [pc, #216]	; (1cdec <mmc_decode_csd+0x11c>)
   1cd14:	681b      	ldr	r3, [r3, #0]
   1cd16:	2222      	movs	r2, #34	; 0x22
   1cd18:	731a      	strb	r2, [r3, #12]
		break;
   1cd1a:	e009      	b.n	1cd30 <mmc_decode_csd+0x60>

	case 3:
		sd_mmc_card->version = CARD_VER_MMC_3;
   1cd1c:	4b33      	ldr	r3, [pc, #204]	; (1cdec <mmc_decode_csd+0x11c>)
   1cd1e:	681b      	ldr	r3, [r3, #0]
   1cd20:	2230      	movs	r2, #48	; 0x30
   1cd22:	731a      	strb	r2, [r3, #12]
		break;
   1cd24:	e004      	b.n	1cd30 <mmc_decode_csd+0x60>

	case 4:
		sd_mmc_card->version = CARD_VER_MMC_4;
   1cd26:	4b31      	ldr	r3, [pc, #196]	; (1cdec <mmc_decode_csd+0x11c>)
   1cd28:	681b      	ldr	r3, [r3, #0]
   1cd2a:	2240      	movs	r2, #64	; 0x40
   1cd2c:	731a      	strb	r2, [r3, #12]
		break;
   1cd2e:	46c0      	nop			; (mov r8, r8)
	}

	// Get MMC memory max transfer speed in Hz.
	tran_speed = CSD_TRAN_SPEED(sd_mmc_card->csd);
   1cd30:	4b2e      	ldr	r3, [pc, #184]	; (1cdec <mmc_decode_csd+0x11c>)
   1cd32:	681b      	ldr	r3, [r3, #0]
   1cd34:	330e      	adds	r3, #14
   1cd36:	0018      	movs	r0, r3
   1cd38:	2308      	movs	r3, #8
   1cd3a:	2260      	movs	r2, #96	; 0x60
   1cd3c:	2180      	movs	r1, #128	; 0x80
   1cd3e:	4c2c      	ldr	r4, [pc, #176]	; (1cdf0 <mmc_decode_csd+0x120>)
   1cd40:	47a0      	blx	r4
   1cd42:	0003      	movs	r3, r0
   1cd44:	60fb      	str	r3, [r7, #12]
	unit = sd_mmc_trans_units[tran_speed & 0x7];
   1cd46:	68fb      	ldr	r3, [r7, #12]
   1cd48:	2207      	movs	r2, #7
   1cd4a:	401a      	ands	r2, r3
   1cd4c:	4b29      	ldr	r3, [pc, #164]	; (1cdf4 <mmc_decode_csd+0x124>)
   1cd4e:	0092      	lsls	r2, r2, #2
   1cd50:	58d3      	ldr	r3, [r2, r3]
   1cd52:	60bb      	str	r3, [r7, #8]
	mul = mmc_trans_multipliers[(tran_speed >> 3) & 0xF];
   1cd54:	68fb      	ldr	r3, [r7, #12]
   1cd56:	08db      	lsrs	r3, r3, #3
   1cd58:	220f      	movs	r2, #15
   1cd5a:	401a      	ands	r2, r3
   1cd5c:	4b26      	ldr	r3, [pc, #152]	; (1cdf8 <mmc_decode_csd+0x128>)
   1cd5e:	0092      	lsls	r2, r2, #2
   1cd60:	58d3      	ldr	r3, [r2, r3]
   1cd62:	607b      	str	r3, [r7, #4]
	sd_mmc_card->clock = unit * mul * 1000;
   1cd64:	4b21      	ldr	r3, [pc, #132]	; (1cdec <mmc_decode_csd+0x11c>)
   1cd66:	681b      	ldr	r3, [r3, #0]
   1cd68:	68ba      	ldr	r2, [r7, #8]
   1cd6a:	6879      	ldr	r1, [r7, #4]
   1cd6c:	434a      	muls	r2, r1
   1cd6e:	21fa      	movs	r1, #250	; 0xfa
   1cd70:	0089      	lsls	r1, r1, #2
   1cd72:	434a      	muls	r2, r1
   1cd74:	601a      	str	r2, [r3, #0]
	 * BLOCK_LEN = 2 ^ READ_BL_LEN      (READ_BL_LEN < 12)
	 * ----------------------------------------------------
	 * For high capacity SD/MMC card:
	 * memory capacity = SEC_COUNT * 512 byte
	 */
	if (MMC_CSD_C_SIZE(sd_mmc_card->csd) != 0xFFF) {
   1cd76:	4b1d      	ldr	r3, [pc, #116]	; (1cdec <mmc_decode_csd+0x11c>)
   1cd78:	681b      	ldr	r3, [r3, #0]
   1cd7a:	330e      	adds	r3, #14
   1cd7c:	0018      	movs	r0, r3
   1cd7e:	230c      	movs	r3, #12
   1cd80:	223e      	movs	r2, #62	; 0x3e
   1cd82:	2180      	movs	r1, #128	; 0x80
   1cd84:	4c1a      	ldr	r4, [pc, #104]	; (1cdf0 <mmc_decode_csd+0x120>)
   1cd86:	47a0      	blx	r4
   1cd88:	0002      	movs	r2, r0
   1cd8a:	4b1c      	ldr	r3, [pc, #112]	; (1cdfc <mmc_decode_csd+0x12c>)
   1cd8c:	429a      	cmp	r2, r3
   1cd8e:	d028      	beq.n	1cde2 <mmc_decode_csd+0x112>
		uint32_t blocknr = ((MMC_CSD_C_SIZE(sd_mmc_card->csd) + 1) *
   1cd90:	4b16      	ldr	r3, [pc, #88]	; (1cdec <mmc_decode_csd+0x11c>)
   1cd92:	681b      	ldr	r3, [r3, #0]
   1cd94:	330e      	adds	r3, #14
   1cd96:	0018      	movs	r0, r3
   1cd98:	230c      	movs	r3, #12
   1cd9a:	223e      	movs	r2, #62	; 0x3e
   1cd9c:	2180      	movs	r1, #128	; 0x80
   1cd9e:	4c14      	ldr	r4, [pc, #80]	; (1cdf0 <mmc_decode_csd+0x120>)
   1cda0:	47a0      	blx	r4
   1cda2:	0003      	movs	r3, r0
   1cda4:	1c5c      	adds	r4, r3, #1
			(1 << (MMC_CSD_C_SIZE_MULT(sd_mmc_card->csd) + 2)));
   1cda6:	4b11      	ldr	r3, [pc, #68]	; (1cdec <mmc_decode_csd+0x11c>)
   1cda8:	681b      	ldr	r3, [r3, #0]
   1cdaa:	330e      	adds	r3, #14
   1cdac:	0018      	movs	r0, r3
   1cdae:	2303      	movs	r3, #3
   1cdb0:	222f      	movs	r2, #47	; 0x2f
   1cdb2:	2180      	movs	r1, #128	; 0x80
   1cdb4:	4d0e      	ldr	r5, [pc, #56]	; (1cdf0 <mmc_decode_csd+0x120>)
   1cdb6:	47a8      	blx	r5
   1cdb8:	0003      	movs	r3, r0
   1cdba:	3302      	adds	r3, #2
		uint32_t blocknr = ((MMC_CSD_C_SIZE(sd_mmc_card->csd) + 1) *
   1cdbc:	409c      	lsls	r4, r3
   1cdbe:	0023      	movs	r3, r4
   1cdc0:	603b      	str	r3, [r7, #0]
		sd_mmc_card->capacity = blocknr *
   1cdc2:	4b0a      	ldr	r3, [pc, #40]	; (1cdec <mmc_decode_csd+0x11c>)
   1cdc4:	681c      	ldr	r4, [r3, #0]
			(1 << MMC_CSD_READ_BL_LEN(sd_mmc_card->csd)) / 1024;
   1cdc6:	4b09      	ldr	r3, [pc, #36]	; (1cdec <mmc_decode_csd+0x11c>)
   1cdc8:	681b      	ldr	r3, [r3, #0]
   1cdca:	330e      	adds	r3, #14
   1cdcc:	0018      	movs	r0, r3
   1cdce:	2304      	movs	r3, #4
   1cdd0:	2250      	movs	r2, #80	; 0x50
   1cdd2:	2180      	movs	r1, #128	; 0x80
   1cdd4:	4d06      	ldr	r5, [pc, #24]	; (1cdf0 <mmc_decode_csd+0x120>)
   1cdd6:	47a8      	blx	r5
   1cdd8:	0002      	movs	r2, r0
		sd_mmc_card->capacity = blocknr *
   1cdda:	683b      	ldr	r3, [r7, #0]
   1cddc:	4093      	lsls	r3, r2
			(1 << MMC_CSD_READ_BL_LEN(sd_mmc_card->csd)) / 1024;
   1cdde:	0a9b      	lsrs	r3, r3, #10
		sd_mmc_card->capacity = blocknr *
   1cde0:	6063      	str	r3, [r4, #4]
	}
}
   1cde2:	46c0      	nop			; (mov r8, r8)
   1cde4:	46bd      	mov	sp, r7
   1cde6:	b004      	add	sp, #16
   1cde8:	bdb0      	pop	{r4, r5, r7, pc}
   1cdea:	46c0      	nop			; (mov r8, r8)
   1cdec:	20003ce0 	.word	0x20003ce0
   1cdf0:	0001c7cd 	.word	0x0001c7cd
   1cdf4:	000366f0 	.word	0x000366f0
   1cdf8:	0003674c 	.word	0x0003674c
   1cdfc:	00000fff 	.word	0x00000fff

0001ce00 <sd_decode_csd>:

/**
 * \brief Decodes SD CSD register
 */
static void sd_decode_csd(void)
{
   1ce00:	b5b0      	push	{r4, r5, r7, lr}
   1ce02:	b084      	sub	sp, #16
   1ce04:	af00      	add	r7, sp, #0
 	uint32_t unit;
	uint32_t mul;
	uint32_t tran_speed;

	// Get SD memory maximum transfer speed in Hz.
	tran_speed = CSD_TRAN_SPEED(sd_mmc_card->csd);
   1ce06:	4b35      	ldr	r3, [pc, #212]	; (1cedc <sd_decode_csd+0xdc>)
   1ce08:	681b      	ldr	r3, [r3, #0]
   1ce0a:	330e      	adds	r3, #14
   1ce0c:	0018      	movs	r0, r3
   1ce0e:	2308      	movs	r3, #8
   1ce10:	2260      	movs	r2, #96	; 0x60
   1ce12:	2180      	movs	r1, #128	; 0x80
   1ce14:	4c32      	ldr	r4, [pc, #200]	; (1cee0 <sd_decode_csd+0xe0>)
   1ce16:	47a0      	blx	r4
   1ce18:	0003      	movs	r3, r0
   1ce1a:	60fb      	str	r3, [r7, #12]
	unit = sd_mmc_trans_units[tran_speed & 0x7];
   1ce1c:	68fb      	ldr	r3, [r7, #12]
   1ce1e:	2207      	movs	r2, #7
   1ce20:	401a      	ands	r2, r3
   1ce22:	4b30      	ldr	r3, [pc, #192]	; (1cee4 <sd_decode_csd+0xe4>)
   1ce24:	0092      	lsls	r2, r2, #2
   1ce26:	58d3      	ldr	r3, [r2, r3]
   1ce28:	60bb      	str	r3, [r7, #8]
	mul = sd_trans_multipliers[(tran_speed >> 3) & 0xF];
   1ce2a:	68fb      	ldr	r3, [r7, #12]
   1ce2c:	08db      	lsrs	r3, r3, #3
   1ce2e:	220f      	movs	r2, #15
   1ce30:	401a      	ands	r2, r3
   1ce32:	4b2d      	ldr	r3, [pc, #180]	; (1cee8 <sd_decode_csd+0xe8>)
   1ce34:	0092      	lsls	r2, r2, #2
   1ce36:	58d3      	ldr	r3, [r2, r3]
   1ce38:	607b      	str	r3, [r7, #4]
	sd_mmc_card->clock = unit * mul * 1000;
   1ce3a:	4b28      	ldr	r3, [pc, #160]	; (1cedc <sd_decode_csd+0xdc>)
   1ce3c:	681b      	ldr	r3, [r3, #0]
   1ce3e:	68ba      	ldr	r2, [r7, #8]
   1ce40:	6879      	ldr	r1, [r7, #4]
   1ce42:	434a      	muls	r2, r1
   1ce44:	21fa      	movs	r1, #250	; 0xfa
   1ce46:	0089      	lsls	r1, r1, #2
   1ce48:	434a      	muls	r2, r1
   1ce4a:	601a      	str	r2, [r3, #0]
	 * BLOCK_LEN = 2 ^ READ_BL_LEN      (READ_BL_LEN < 12)
	 * ----------------------------------------------------
	 * For high capacity SD card:
	 * memory capacity = (C_SIZE+1) * 512K byte
	 */
	if (CSD_STRUCTURE_VERSION(sd_mmc_card->csd) >= SD_CSD_VER_2_0) {
   1ce4c:	4b23      	ldr	r3, [pc, #140]	; (1cedc <sd_decode_csd+0xdc>)
   1ce4e:	681b      	ldr	r3, [r3, #0]
   1ce50:	330e      	adds	r3, #14
   1ce52:	0018      	movs	r0, r3
   1ce54:	2302      	movs	r3, #2
   1ce56:	227e      	movs	r2, #126	; 0x7e
   1ce58:	2180      	movs	r1, #128	; 0x80
   1ce5a:	4c21      	ldr	r4, [pc, #132]	; (1cee0 <sd_decode_csd+0xe0>)
   1ce5c:	47a0      	blx	r4
   1ce5e:	1e03      	subs	r3, r0, #0
   1ce60:	d00f      	beq.n	1ce82 <sd_decode_csd+0x82>
		sd_mmc_card->capacity =
   1ce62:	4b1e      	ldr	r3, [pc, #120]	; (1cedc <sd_decode_csd+0xdc>)
   1ce64:	681c      	ldr	r4, [r3, #0]
				(SD_CSD_2_0_C_SIZE(sd_mmc_card->csd) + 1)
   1ce66:	4b1d      	ldr	r3, [pc, #116]	; (1cedc <sd_decode_csd+0xdc>)
   1ce68:	681b      	ldr	r3, [r3, #0]
   1ce6a:	330e      	adds	r3, #14
   1ce6c:	0018      	movs	r0, r3
   1ce6e:	2316      	movs	r3, #22
   1ce70:	2230      	movs	r2, #48	; 0x30
   1ce72:	2180      	movs	r1, #128	; 0x80
   1ce74:	4d1a      	ldr	r5, [pc, #104]	; (1cee0 <sd_decode_csd+0xe0>)
   1ce76:	47a8      	blx	r5
   1ce78:	0003      	movs	r3, r0
				* 512;
   1ce7a:	3301      	adds	r3, #1
   1ce7c:	025b      	lsls	r3, r3, #9
		sd_mmc_card->capacity =
   1ce7e:	6063      	str	r3, [r4, #4]
				(1 << (SD_CSD_1_0_C_SIZE_MULT(sd_mmc_card->csd) + 2)));
		sd_mmc_card->capacity = blocknr *
				(1 << SD_CSD_1_0_READ_BL_LEN(sd_mmc_card->csd))
				/ 1024;
	}
}
   1ce80:	e028      	b.n	1ced4 <sd_decode_csd+0xd4>
		uint32_t blocknr = ((SD_CSD_1_0_C_SIZE(sd_mmc_card->csd) + 1) *
   1ce82:	4b16      	ldr	r3, [pc, #88]	; (1cedc <sd_decode_csd+0xdc>)
   1ce84:	681b      	ldr	r3, [r3, #0]
   1ce86:	330e      	adds	r3, #14
   1ce88:	0018      	movs	r0, r3
   1ce8a:	230c      	movs	r3, #12
   1ce8c:	223e      	movs	r2, #62	; 0x3e
   1ce8e:	2180      	movs	r1, #128	; 0x80
   1ce90:	4c13      	ldr	r4, [pc, #76]	; (1cee0 <sd_decode_csd+0xe0>)
   1ce92:	47a0      	blx	r4
   1ce94:	0003      	movs	r3, r0
   1ce96:	1c5c      	adds	r4, r3, #1
				(1 << (SD_CSD_1_0_C_SIZE_MULT(sd_mmc_card->csd) + 2)));
   1ce98:	4b10      	ldr	r3, [pc, #64]	; (1cedc <sd_decode_csd+0xdc>)
   1ce9a:	681b      	ldr	r3, [r3, #0]
   1ce9c:	330e      	adds	r3, #14
   1ce9e:	0018      	movs	r0, r3
   1cea0:	2303      	movs	r3, #3
   1cea2:	222f      	movs	r2, #47	; 0x2f
   1cea4:	2180      	movs	r1, #128	; 0x80
   1cea6:	4d0e      	ldr	r5, [pc, #56]	; (1cee0 <sd_decode_csd+0xe0>)
   1cea8:	47a8      	blx	r5
   1ceaa:	0003      	movs	r3, r0
   1ceac:	3302      	adds	r3, #2
		uint32_t blocknr = ((SD_CSD_1_0_C_SIZE(sd_mmc_card->csd) + 1) *
   1ceae:	409c      	lsls	r4, r3
   1ceb0:	0023      	movs	r3, r4
   1ceb2:	603b      	str	r3, [r7, #0]
		sd_mmc_card->capacity = blocknr *
   1ceb4:	4b09      	ldr	r3, [pc, #36]	; (1cedc <sd_decode_csd+0xdc>)
   1ceb6:	681c      	ldr	r4, [r3, #0]
				(1 << SD_CSD_1_0_READ_BL_LEN(sd_mmc_card->csd))
   1ceb8:	4b08      	ldr	r3, [pc, #32]	; (1cedc <sd_decode_csd+0xdc>)
   1ceba:	681b      	ldr	r3, [r3, #0]
   1cebc:	330e      	adds	r3, #14
   1cebe:	0018      	movs	r0, r3
   1cec0:	2304      	movs	r3, #4
   1cec2:	2250      	movs	r2, #80	; 0x50
   1cec4:	2180      	movs	r1, #128	; 0x80
   1cec6:	4d06      	ldr	r5, [pc, #24]	; (1cee0 <sd_decode_csd+0xe0>)
   1cec8:	47a8      	blx	r5
   1ceca:	0002      	movs	r2, r0
		sd_mmc_card->capacity = blocknr *
   1cecc:	683b      	ldr	r3, [r7, #0]
   1cece:	4093      	lsls	r3, r2
				/ 1024;
   1ced0:	0a9b      	lsrs	r3, r3, #10
		sd_mmc_card->capacity = blocknr *
   1ced2:	6063      	str	r3, [r4, #4]
}
   1ced4:	46c0      	nop			; (mov r8, r8)
   1ced6:	46bd      	mov	sp, r7
   1ced8:	b004      	add	sp, #16
   1ceda:	bdb0      	pop	{r4, r5, r7, pc}
   1cedc:	20003ce0 	.word	0x20003ce0
   1cee0:	0001c7cd 	.word	0x0001c7cd
   1cee4:	000366f0 	.word	0x000366f0
   1cee8:	0003670c 	.word	0x0003670c

0001ceec <sd_mmc_cmd13>:
 * This function waits the clear of the busy flag
 *
 * \return true if success, otherwise false
 */
static bool sd_mmc_cmd13(void)
{
   1ceec:	b580      	push	{r7, lr}
   1ceee:	b082      	sub	sp, #8
   1cef0:	af00      	add	r7, sp, #0
	/* Wait for data ready status.
	 * Nec timing: 0 to unlimited
	 * However a timeout is used.
	 * 200 000 * 8 cycles
	 */
	nec_timeout = 200000;
   1cef2:	4b11      	ldr	r3, [pc, #68]	; (1cf38 <sd_mmc_cmd13+0x4c>)
   1cef4:	607b      	str	r3, [r7, #4]
	do {
		if (sd_mmc_is_spi()) {
			if (!driver_send_cmd(SDMMC_SPI_CMD13_SEND_STATUS, 0)) {
   1cef6:	4b11      	ldr	r3, [pc, #68]	; (1cf3c <sd_mmc_cmd13+0x50>)
   1cef8:	2100      	movs	r1, #0
   1cefa:	0018      	movs	r0, r3
   1cefc:	4b10      	ldr	r3, [pc, #64]	; (1cf40 <sd_mmc_cmd13+0x54>)
   1cefe:	4798      	blx	r3
   1cf00:	0003      	movs	r3, r0
   1cf02:	001a      	movs	r2, r3
   1cf04:	2301      	movs	r3, #1
   1cf06:	4053      	eors	r3, r2
   1cf08:	b2db      	uxtb	r3, r3
   1cf0a:	2b00      	cmp	r3, #0
   1cf0c:	d001      	beq.n	1cf12 <sd_mmc_cmd13+0x26>
				return false;
   1cf0e:	2300      	movs	r3, #0
   1cf10:	e00e      	b.n	1cf30 <sd_mmc_cmd13+0x44>
			}
			// Check busy flag
			if (!(driver_get_response() & 0xFF)) {
   1cf12:	4b0c      	ldr	r3, [pc, #48]	; (1cf44 <sd_mmc_cmd13+0x58>)
   1cf14:	4798      	blx	r3
   1cf16:	0002      	movs	r2, r0
   1cf18:	23ff      	movs	r3, #255	; 0xff
   1cf1a:	4013      	ands	r3, r2
   1cf1c:	d006      	beq.n	1cf2c <sd_mmc_cmd13+0x40>
			// Check busy flag
			if (driver_get_response() & CARD_STATUS_READY_FOR_DATA) {
				break;
			}
		}
		if (nec_timeout-- == 0) {
   1cf1e:	687b      	ldr	r3, [r7, #4]
   1cf20:	1e5a      	subs	r2, r3, #1
   1cf22:	607a      	str	r2, [r7, #4]
   1cf24:	2b00      	cmp	r3, #0
   1cf26:	d1e6      	bne.n	1cef6 <sd_mmc_cmd13+0xa>
			sd_mmc_debug("%s: CMD13 Busy timeout\n\r", __func__);
			return false;
   1cf28:	2300      	movs	r3, #0
   1cf2a:	e001      	b.n	1cf30 <sd_mmc_cmd13+0x44>
				break;
   1cf2c:	46c0      	nop			; (mov r8, r8)
		}
	} while (1);

	return true;
   1cf2e:	2301      	movs	r3, #1
}
   1cf30:	0018      	movs	r0, r3
   1cf32:	46bd      	mov	sp, r7
   1cf34:	b002      	add	sp, #8
   1cf36:	bd80      	pop	{r7, pc}
   1cf38:	00030d40 	.word	0x00030d40
   1cf3c:	00001b0d 	.word	0x00001b0d
   1cf40:	0001e3a5 	.word	0x0001e3a5
   1cf44:	0001e5e5 	.word	0x0001e5e5

0001cf48 <sd_acmd51>:
 *
 *
 * \return true if success, otherwise false
 */
static bool sd_acmd51(void)
{
   1cf48:	b590      	push	{r4, r7, lr}
   1cf4a:	b085      	sub	sp, #20
   1cf4c:	af02      	add	r7, sp, #8
	uint8_t scr[SD_SCR_REG_BSIZE];

	// CMD55 - Indicate to the card that the next command is an
	// application specific command rather than a standard command.
	if (!driver_send_cmd(SDMMC_CMD55_APP_CMD, (uint32_t)sd_mmc_card->rca << 16)) {
   1cf4e:	4b38      	ldr	r3, [pc, #224]	; (1d030 <sd_acmd51+0xe8>)
   1cf50:	681b      	ldr	r3, [r3, #0]
   1cf52:	891b      	ldrh	r3, [r3, #8]
   1cf54:	041b      	lsls	r3, r3, #16
   1cf56:	4a37      	ldr	r2, [pc, #220]	; (1d034 <sd_acmd51+0xec>)
   1cf58:	0019      	movs	r1, r3
   1cf5a:	0010      	movs	r0, r2
   1cf5c:	4b36      	ldr	r3, [pc, #216]	; (1d038 <sd_acmd51+0xf0>)
   1cf5e:	4798      	blx	r3
   1cf60:	0003      	movs	r3, r0
   1cf62:	001a      	movs	r2, r3
   1cf64:	2301      	movs	r3, #1
   1cf66:	4053      	eors	r3, r2
   1cf68:	b2db      	uxtb	r3, r3
   1cf6a:	2b00      	cmp	r3, #0
   1cf6c:	d001      	beq.n	1cf72 <sd_acmd51+0x2a>
		return false;
   1cf6e:	2300      	movs	r3, #0
   1cf70:	e059      	b.n	1d026 <sd_acmd51+0xde>
	}
	if (!driver_adtc_start(SD_ACMD51_SEND_SCR, 0,
   1cf72:	4832      	ldr	r0, [pc, #200]	; (1d03c <sd_acmd51+0xf4>)
   1cf74:	2301      	movs	r3, #1
   1cf76:	9300      	str	r3, [sp, #0]
   1cf78:	2301      	movs	r3, #1
   1cf7a:	2208      	movs	r2, #8
   1cf7c:	2100      	movs	r1, #0
   1cf7e:	4c30      	ldr	r4, [pc, #192]	; (1d040 <sd_acmd51+0xf8>)
   1cf80:	47a0      	blx	r4
   1cf82:	0003      	movs	r3, r0
   1cf84:	001a      	movs	r2, r3
   1cf86:	2301      	movs	r3, #1
   1cf88:	4053      	eors	r3, r2
   1cf8a:	b2db      	uxtb	r3, r3
   1cf8c:	2b00      	cmp	r3, #0
   1cf8e:	d001      	beq.n	1cf94 <sd_acmd51+0x4c>
			SD_SCR_REG_BSIZE, 1, true)) {
		return false;
   1cf90:	2300      	movs	r3, #0
   1cf92:	e048      	b.n	1d026 <sd_acmd51+0xde>
	}
	if (!driver_start_read_blocks(scr, 1)) {
   1cf94:	003b      	movs	r3, r7
   1cf96:	2101      	movs	r1, #1
   1cf98:	0018      	movs	r0, r3
   1cf9a:	4b2a      	ldr	r3, [pc, #168]	; (1d044 <sd_acmd51+0xfc>)
   1cf9c:	4798      	blx	r3
   1cf9e:	0003      	movs	r3, r0
   1cfa0:	001a      	movs	r2, r3
   1cfa2:	2301      	movs	r3, #1
   1cfa4:	4053      	eors	r3, r2
   1cfa6:	b2db      	uxtb	r3, r3
   1cfa8:	2b00      	cmp	r3, #0
   1cfaa:	d001      	beq.n	1cfb0 <sd_acmd51+0x68>
		return false;
   1cfac:	2300      	movs	r3, #0
   1cfae:	e03a      	b.n	1d026 <sd_acmd51+0xde>
	}
	if (!driver_wait_end_of_read_blocks()) {
   1cfb0:	4b25      	ldr	r3, [pc, #148]	; (1d048 <sd_acmd51+0x100>)
   1cfb2:	4798      	blx	r3
   1cfb4:	0003      	movs	r3, r0
   1cfb6:	001a      	movs	r2, r3
   1cfb8:	2301      	movs	r3, #1
   1cfba:	4053      	eors	r3, r2
   1cfbc:	b2db      	uxtb	r3, r3
   1cfbe:	2b00      	cmp	r3, #0
   1cfc0:	d001      	beq.n	1cfc6 <sd_acmd51+0x7e>
		return false;
   1cfc2:	2300      	movs	r3, #0
   1cfc4:	e02f      	b.n	1d026 <sd_acmd51+0xde>
	}

	// Get SD Memory Card - Spec. Version
	switch (SD_SCR_SD_SPEC(scr)) {
   1cfc6:	0038      	movs	r0, r7
   1cfc8:	2304      	movs	r3, #4
   1cfca:	2238      	movs	r2, #56	; 0x38
   1cfcc:	2140      	movs	r1, #64	; 0x40
   1cfce:	4c1f      	ldr	r4, [pc, #124]	; (1d04c <sd_acmd51+0x104>)
   1cfd0:	47a0      	blx	r4
   1cfd2:	0003      	movs	r3, r0
   1cfd4:	2b01      	cmp	r3, #1
   1cfd6:	d008      	beq.n	1cfea <sd_acmd51+0xa2>
   1cfd8:	d302      	bcc.n	1cfe0 <sd_acmd51+0x98>
   1cfda:	2b02      	cmp	r3, #2
   1cfdc:	d00a      	beq.n	1cff4 <sd_acmd51+0xac>
   1cfde:	e01c      	b.n	1d01a <sd_acmd51+0xd2>
	case SD_SCR_SD_SPEC_1_0_01:
		sd_mmc_card->version = CARD_VER_SD_1_0;
   1cfe0:	4b13      	ldr	r3, [pc, #76]	; (1d030 <sd_acmd51+0xe8>)
   1cfe2:	681b      	ldr	r3, [r3, #0]
   1cfe4:	2210      	movs	r2, #16
   1cfe6:	731a      	strb	r2, [r3, #12]
		break;
   1cfe8:	e01c      	b.n	1d024 <sd_acmd51+0xdc>

	case SD_SCR_SD_SPEC_1_10:
		sd_mmc_card->version = CARD_VER_SD_1_10;
   1cfea:	4b11      	ldr	r3, [pc, #68]	; (1d030 <sd_acmd51+0xe8>)
   1cfec:	681b      	ldr	r3, [r3, #0]
   1cfee:	221a      	movs	r2, #26
   1cff0:	731a      	strb	r2, [r3, #12]
		break;
   1cff2:	e017      	b.n	1d024 <sd_acmd51+0xdc>

	case SD_SCR_SD_SPEC_2_00:
		if (SD_SCR_SD_SPEC3(scr) == SD_SCR_SD_SPEC_3_00) {
   1cff4:	0038      	movs	r0, r7
   1cff6:	2301      	movs	r3, #1
   1cff8:	222f      	movs	r2, #47	; 0x2f
   1cffa:	2140      	movs	r1, #64	; 0x40
   1cffc:	4c13      	ldr	r4, [pc, #76]	; (1d04c <sd_acmd51+0x104>)
   1cffe:	47a0      	blx	r4
   1d000:	0003      	movs	r3, r0
   1d002:	2b01      	cmp	r3, #1
   1d004:	d104      	bne.n	1d010 <sd_acmd51+0xc8>
			sd_mmc_card->version = CARD_VER_SD_3_0;
   1d006:	4b0a      	ldr	r3, [pc, #40]	; (1d030 <sd_acmd51+0xe8>)
   1d008:	681b      	ldr	r3, [r3, #0]
   1d00a:	2230      	movs	r2, #48	; 0x30
   1d00c:	731a      	strb	r2, [r3, #12]
		} else {
			sd_mmc_card->version = CARD_VER_SD_2_0;
		}
		break;
   1d00e:	e009      	b.n	1d024 <sd_acmd51+0xdc>
			sd_mmc_card->version = CARD_VER_SD_2_0;
   1d010:	4b07      	ldr	r3, [pc, #28]	; (1d030 <sd_acmd51+0xe8>)
   1d012:	681b      	ldr	r3, [r3, #0]
   1d014:	2220      	movs	r2, #32
   1d016:	731a      	strb	r2, [r3, #12]
		break;
   1d018:	e004      	b.n	1d024 <sd_acmd51+0xdc>

	default:
		sd_mmc_card->version = CARD_VER_SD_1_0;
   1d01a:	4b05      	ldr	r3, [pc, #20]	; (1d030 <sd_acmd51+0xe8>)
   1d01c:	681b      	ldr	r3, [r3, #0]
   1d01e:	2210      	movs	r2, #16
   1d020:	731a      	strb	r2, [r3, #12]
		break;
   1d022:	46c0      	nop			; (mov r8, r8)
	}
	return true;
   1d024:	2301      	movs	r3, #1
}
   1d026:	0018      	movs	r0, r3
   1d028:	46bd      	mov	sp, r7
   1d02a:	b003      	add	sp, #12
   1d02c:	bd90      	pop	{r4, r7, pc}
   1d02e:	46c0      	nop			; (mov r8, r8)
   1d030:	20003ce0 	.word	0x20003ce0
   1d034:	00001137 	.word	0x00001137
   1d038:	0001e3a5 	.word	0x0001e3a5
   1d03c:	00081133 	.word	0x00081133
   1d040:	0001e3cd 	.word	0x0001e3cd
   1d044:	0001e69d 	.word	0x0001e69d
   1d048:	0001e741 	.word	0x0001e741
   1d04c:	0001c7cd 	.word	0x0001c7cd

0001d050 <sd_mmc_select_slot>:
 * \retval SD_MMC_ERR_UNUSABLE Unusable card
 * \retval SD_MMC_INIT_ONGOING Card initialization requested
 * \retval SD_MMC_OK           Card present
 */
static sd_mmc_err_t sd_mmc_select_slot(uint8_t slot)
{
   1d050:	b580      	push	{r7, lr}
   1d052:	b082      	sub	sp, #8
   1d054:	af00      	add	r7, sp, #0
   1d056:	0002      	movs	r2, r0
   1d058:	1dfb      	adds	r3, r7, #7
   1d05a:	701a      	strb	r2, [r3, #0]
	if (slot >= SD_MMC_MEM_CNT) {
   1d05c:	1dfb      	adds	r3, r7, #7
   1d05e:	781b      	ldrb	r3, [r3, #0]
   1d060:	2b00      	cmp	r3, #0
   1d062:	d001      	beq.n	1d068 <sd_mmc_select_slot+0x18>
		return SD_MMC_ERR_SLOT;
   1d064:	2304      	movs	r3, #4
   1d066:	e047      	b.n	1d0f8 <sd_mmc_select_slot+0xa8>
	if (sd_mmc_cards[slot].state == SD_MMC_CARD_STATE_UNUSABLE) {
		return SD_MMC_ERR_UNUSABLE;
	}
#else
	// No pin card detection, then always try to install it
	if ((sd_mmc_cards[slot].state == SD_MMC_CARD_STATE_NO_CARD)
   1d068:	1dfb      	adds	r3, r7, #7
   1d06a:	781b      	ldrb	r3, [r3, #0]
   1d06c:	4a24      	ldr	r2, [pc, #144]	; (1d100 <sd_mmc_select_slot+0xb0>)
   1d06e:	015b      	lsls	r3, r3, #5
   1d070:	18d3      	adds	r3, r2, r3
   1d072:	330a      	adds	r3, #10
   1d074:	781b      	ldrb	r3, [r3, #0]
   1d076:	2b04      	cmp	r3, #4
   1d078:	d008      	beq.n	1d08c <sd_mmc_select_slot+0x3c>
			|| (sd_mmc_cards[slot].state == SD_MMC_CARD_STATE_UNUSABLE)) {
   1d07a:	1dfb      	adds	r3, r7, #7
   1d07c:	781b      	ldrb	r3, [r3, #0]
   1d07e:	4a20      	ldr	r2, [pc, #128]	; (1d100 <sd_mmc_select_slot+0xb0>)
   1d080:	015b      	lsls	r3, r3, #5
   1d082:	18d3      	adds	r3, r2, r3
   1d084:	330a      	adds	r3, #10
   1d086:	781b      	ldrb	r3, [r3, #0]
   1d088:	2b03      	cmp	r3, #3
   1d08a:	d11d      	bne.n	1d0c8 <sd_mmc_select_slot+0x78>
		// Card is not initialized
		sd_mmc_cards[slot].state = SD_MMC_CARD_STATE_INIT;
   1d08c:	1dfb      	adds	r3, r7, #7
   1d08e:	781b      	ldrb	r3, [r3, #0]
   1d090:	4a1b      	ldr	r2, [pc, #108]	; (1d100 <sd_mmc_select_slot+0xb0>)
   1d092:	015b      	lsls	r3, r3, #5
   1d094:	18d3      	adds	r3, r2, r3
   1d096:	330a      	adds	r3, #10
   1d098:	2202      	movs	r2, #2
   1d09a:	701a      	strb	r2, [r3, #0]
		// Set 1-bit bus width and low clock for initialization
		sd_mmc_cards[slot].clock = SDMMC_CLOCK_INIT;
   1d09c:	1dfb      	adds	r3, r7, #7
   1d09e:	781a      	ldrb	r2, [r3, #0]
   1d0a0:	4b17      	ldr	r3, [pc, #92]	; (1d100 <sd_mmc_select_slot+0xb0>)
   1d0a2:	0152      	lsls	r2, r2, #5
   1d0a4:	4917      	ldr	r1, [pc, #92]	; (1d104 <sd_mmc_select_slot+0xb4>)
   1d0a6:	50d1      	str	r1, [r2, r3]
		sd_mmc_cards[slot].bus_width = 1;
   1d0a8:	1dfb      	adds	r3, r7, #7
   1d0aa:	781b      	ldrb	r3, [r3, #0]
   1d0ac:	4a14      	ldr	r2, [pc, #80]	; (1d100 <sd_mmc_select_slot+0xb0>)
   1d0ae:	015b      	lsls	r3, r3, #5
   1d0b0:	18d3      	adds	r3, r2, r3
   1d0b2:	330d      	adds	r3, #13
   1d0b4:	2201      	movs	r2, #1
   1d0b6:	701a      	strb	r2, [r3, #0]
		sd_mmc_cards[slot].high_speed = 0;
   1d0b8:	1dfb      	adds	r3, r7, #7
   1d0ba:	781b      	ldrb	r3, [r3, #0]
   1d0bc:	4a10      	ldr	r2, [pc, #64]	; (1d100 <sd_mmc_select_slot+0xb0>)
   1d0be:	015b      	lsls	r3, r3, #5
   1d0c0:	18d3      	adds	r3, r2, r3
   1d0c2:	331e      	adds	r3, #30
   1d0c4:	2200      	movs	r2, #0
   1d0c6:	701a      	strb	r2, [r3, #0]
	}
#endif

	// Initialize interface
	sd_mmc_slot_sel = slot;
   1d0c8:	4b0f      	ldr	r3, [pc, #60]	; (1d108 <sd_mmc_select_slot+0xb8>)
   1d0ca:	1dfa      	adds	r2, r7, #7
   1d0cc:	7812      	ldrb	r2, [r2, #0]
   1d0ce:	701a      	strb	r2, [r3, #0]
	sd_mmc_card = &sd_mmc_cards[slot];
   1d0d0:	1dfb      	adds	r3, r7, #7
   1d0d2:	781b      	ldrb	r3, [r3, #0]
   1d0d4:	015a      	lsls	r2, r3, #5
   1d0d6:	4b0a      	ldr	r3, [pc, #40]	; (1d100 <sd_mmc_select_slot+0xb0>)
   1d0d8:	18d2      	adds	r2, r2, r3
   1d0da:	4b0c      	ldr	r3, [pc, #48]	; (1d10c <sd_mmc_select_slot+0xbc>)
   1d0dc:	601a      	str	r2, [r3, #0]
	sd_mmc_configure_slot();
   1d0de:	4b0c      	ldr	r3, [pc, #48]	; (1d110 <sd_mmc_select_slot+0xc0>)
   1d0e0:	4798      	blx	r3
	return (sd_mmc_cards[slot].state == SD_MMC_CARD_STATE_INIT) ?
   1d0e2:	1dfb      	adds	r3, r7, #7
   1d0e4:	781b      	ldrb	r3, [r3, #0]
   1d0e6:	4a06      	ldr	r2, [pc, #24]	; (1d100 <sd_mmc_select_slot+0xb0>)
   1d0e8:	015b      	lsls	r3, r3, #5
   1d0ea:	18d3      	adds	r3, r2, r3
   1d0ec:	330a      	adds	r3, #10
   1d0ee:	781b      	ldrb	r3, [r3, #0]
			SD_MMC_INIT_ONGOING : SD_MMC_OK;
   1d0f0:	3b02      	subs	r3, #2
   1d0f2:	425a      	negs	r2, r3
   1d0f4:	4153      	adcs	r3, r2
   1d0f6:	b2db      	uxtb	r3, r3
}
   1d0f8:	0018      	movs	r0, r3
   1d0fa:	46bd      	mov	sp, r7
   1d0fc:	b002      	add	sp, #8
   1d0fe:	bd80      	pop	{r7, pc}
   1d100:	20003cbc 	.word	0x20003cbc
   1d104:	00061a80 	.word	0x00061a80
   1d108:	20003cdc 	.word	0x20003cdc
   1d10c:	20003ce0 	.word	0x20003ce0
   1d110:	0001d115 	.word	0x0001d115

0001d114 <sd_mmc_configure_slot>:

/**
 * \brief Configures the driver with the selected card configuration
 */
static void sd_mmc_configure_slot(void)
{
   1d114:	b5b0      	push	{r4, r5, r7, lr}
   1d116:	af00      	add	r7, sp, #0
	driver_select_device(sd_mmc_slot_sel, sd_mmc_card->clock,
   1d118:	4b09      	ldr	r3, [pc, #36]	; (1d140 <sd_mmc_configure_slot+0x2c>)
   1d11a:	7818      	ldrb	r0, [r3, #0]
   1d11c:	4b09      	ldr	r3, [pc, #36]	; (1d144 <sd_mmc_configure_slot+0x30>)
   1d11e:	681b      	ldr	r3, [r3, #0]
   1d120:	6819      	ldr	r1, [r3, #0]
			sd_mmc_card->bus_width, sd_mmc_card->high_speed);
   1d122:	4b08      	ldr	r3, [pc, #32]	; (1d144 <sd_mmc_configure_slot+0x30>)
   1d124:	681b      	ldr	r3, [r3, #0]
	driver_select_device(sd_mmc_slot_sel, sd_mmc_card->clock,
   1d126:	7b5a      	ldrb	r2, [r3, #13]
			sd_mmc_card->bus_width, sd_mmc_card->high_speed);
   1d128:	4b06      	ldr	r3, [pc, #24]	; (1d144 <sd_mmc_configure_slot+0x30>)
   1d12a:	681b      	ldr	r3, [r3, #0]
   1d12c:	7f9b      	ldrb	r3, [r3, #30]
	driver_select_device(sd_mmc_slot_sel, sd_mmc_card->clock,
   1d12e:	1e5c      	subs	r4, r3, #1
   1d130:	41a3      	sbcs	r3, r4
   1d132:	b2db      	uxtb	r3, r3
   1d134:	4c04      	ldr	r4, [pc, #16]	; (1d148 <sd_mmc_configure_slot+0x34>)
   1d136:	47a0      	blx	r4
}
   1d138:	46c0      	nop			; (mov r8, r8)
   1d13a:	46bd      	mov	sp, r7
   1d13c:	bdb0      	pop	{r4, r5, r7, pc}
   1d13e:	46c0      	nop			; (mov r8, r8)
   1d140:	20003cdc 	.word	0x20003cdc
   1d144:	20003ce0 	.word	0x20003ce0
   1d148:	0001e28d 	.word	0x0001e28d

0001d14c <sd_mmc_deselect_slot>:

/**
 * \brief Deselect the current card slot
 */
static void sd_mmc_deselect_slot(void)
{
   1d14c:	b580      	push	{r7, lr}
   1d14e:	af00      	add	r7, sp, #0
	if (sd_mmc_slot_sel < SD_MMC_MEM_CNT) {
   1d150:	4b05      	ldr	r3, [pc, #20]	; (1d168 <sd_mmc_deselect_slot+0x1c>)
   1d152:	781b      	ldrb	r3, [r3, #0]
   1d154:	2b00      	cmp	r3, #0
   1d156:	d104      	bne.n	1d162 <sd_mmc_deselect_slot+0x16>
		driver_deselect_device(sd_mmc_slot_sel);
   1d158:	4b03      	ldr	r3, [pc, #12]	; (1d168 <sd_mmc_deselect_slot+0x1c>)
   1d15a:	781b      	ldrb	r3, [r3, #0]
   1d15c:	0018      	movs	r0, r3
   1d15e:	4b03      	ldr	r3, [pc, #12]	; (1d16c <sd_mmc_deselect_slot+0x20>)
   1d160:	4798      	blx	r3
	}
}
   1d162:	46c0      	nop			; (mov r8, r8)
   1d164:	46bd      	mov	sp, r7
   1d166:	bd80      	pop	{r7, pc}
   1d168:	20003cdc 	.word	0x20003cdc
   1d16c:	0001e315 	.word	0x0001e315

0001d170 <sd_mmc_spi_card_init>:
 * At last, it will automaticly enable maximum bus width and transfer speed.
 *
 * \return true if success, otherwise false
 */
static bool sd_mmc_spi_card_init(void)
{
   1d170:	b580      	push	{r7, lr}
   1d172:	b082      	sub	sp, #8
   1d174:	af00      	add	r7, sp, #0
	uint8_t v2 = 0;
   1d176:	1dfb      	adds	r3, r7, #7
   1d178:	2200      	movs	r2, #0
   1d17a:	701a      	strb	r2, [r3, #0]

	// In first, try to install SD/SDIO card
	sd_mmc_card->type = CARD_TYPE_SD;
   1d17c:	4b59      	ldr	r3, [pc, #356]	; (1d2e4 <sd_mmc_spi_card_init+0x174>)
   1d17e:	681b      	ldr	r3, [r3, #0]
   1d180:	2201      	movs	r2, #1
   1d182:	72da      	strb	r2, [r3, #11]
	sd_mmc_card->version = CARD_VER_UNKNOWN;
   1d184:	4b57      	ldr	r3, [pc, #348]	; (1d2e4 <sd_mmc_spi_card_init+0x174>)
   1d186:	681b      	ldr	r3, [r3, #0]
   1d188:	2200      	movs	r2, #0
   1d18a:	731a      	strb	r2, [r3, #12]
	sd_mmc_card->rca = 0;
   1d18c:	4b55      	ldr	r3, [pc, #340]	; (1d2e4 <sd_mmc_spi_card_init+0x174>)
   1d18e:	681b      	ldr	r3, [r3, #0]
   1d190:	2200      	movs	r2, #0
   1d192:	811a      	strh	r2, [r3, #8]
	sd_mmc_debug("Start SD card install\n\r");

	// Card need of 74 cycles clock minimum to start
	driver_send_clock();
   1d194:	4b54      	ldr	r3, [pc, #336]	; (1d2e8 <sd_mmc_spi_card_init+0x178>)
   1d196:	4798      	blx	r3

	// CMD0 - Reset all cards to idle state.
	if (!driver_send_cmd(SDMMC_SPI_CMD0_GO_IDLE_STATE, 0)) {
   1d198:	2388      	movs	r3, #136	; 0x88
   1d19a:	015b      	lsls	r3, r3, #5
   1d19c:	2100      	movs	r1, #0
   1d19e:	0018      	movs	r0, r3
   1d1a0:	4b52      	ldr	r3, [pc, #328]	; (1d2ec <sd_mmc_spi_card_init+0x17c>)
   1d1a2:	4798      	blx	r3
   1d1a4:	0003      	movs	r3, r0
   1d1a6:	001a      	movs	r2, r3
   1d1a8:	2301      	movs	r3, #1
   1d1aa:	4053      	eors	r3, r2
   1d1ac:	b2db      	uxtb	r3, r3
   1d1ae:	2b00      	cmp	r3, #0
   1d1b0:	d001      	beq.n	1d1b6 <sd_mmc_spi_card_init+0x46>
		return false;
   1d1b2:	2300      	movs	r3, #0
   1d1b4:	e092      	b.n	1d2dc <sd_mmc_spi_card_init+0x16c>
	}
	if (!sd_cmd8(&v2)) {
   1d1b6:	1dfb      	adds	r3, r7, #7
   1d1b8:	0018      	movs	r0, r3
   1d1ba:	4b4d      	ldr	r3, [pc, #308]	; (1d2f0 <sd_mmc_spi_card_init+0x180>)
   1d1bc:	4798      	blx	r3
   1d1be:	0003      	movs	r3, r0
   1d1c0:	001a      	movs	r2, r3
   1d1c2:	2301      	movs	r3, #1
   1d1c4:	4053      	eors	r3, r2
   1d1c6:	b2db      	uxtb	r3, r3
   1d1c8:	2b00      	cmp	r3, #0
   1d1ca:	d001      	beq.n	1d1d0 <sd_mmc_spi_card_init+0x60>
		return false;
   1d1cc:	2300      	movs	r3, #0
   1d1ce:	e085      	b.n	1d2dc <sd_mmc_spi_card_init+0x16c>
	}
	// Try to get the SDIO card's operating condition
	if (!sdio_op_cond()) {
   1d1d0:	4b48      	ldr	r3, [pc, #288]	; (1d2f4 <sd_mmc_spi_card_init+0x184>)
   1d1d2:	4798      	blx	r3
   1d1d4:	0003      	movs	r3, r0
   1d1d6:	001a      	movs	r2, r3
   1d1d8:	2301      	movs	r3, #1
   1d1da:	4053      	eors	r3, r2
   1d1dc:	b2db      	uxtb	r3, r3
   1d1de:	2b00      	cmp	r3, #0
   1d1e0:	d001      	beq.n	1d1e6 <sd_mmc_spi_card_init+0x76>
		return false;
   1d1e2:	2300      	movs	r3, #0
   1d1e4:	e07a      	b.n	1d2dc <sd_mmc_spi_card_init+0x16c>
	}

	if (sd_mmc_card->type & CARD_TYPE_SD) {
   1d1e6:	4b3f      	ldr	r3, [pc, #252]	; (1d2e4 <sd_mmc_spi_card_init+0x174>)
   1d1e8:	681b      	ldr	r3, [r3, #0]
   1d1ea:	7adb      	ldrb	r3, [r3, #11]
   1d1ec:	001a      	movs	r2, r3
   1d1ee:	2301      	movs	r3, #1
   1d1f0:	4013      	ands	r3, r2
   1d1f2:	d021      	beq.n	1d238 <sd_mmc_spi_card_init+0xc8>
		// Try to get the SD card's operating condition
		if (!sd_spi_op_cond(v2)) {
   1d1f4:	1dfb      	adds	r3, r7, #7
   1d1f6:	781b      	ldrb	r3, [r3, #0]
   1d1f8:	0018      	movs	r0, r3
   1d1fa:	4b3f      	ldr	r3, [pc, #252]	; (1d2f8 <sd_mmc_spi_card_init+0x188>)
   1d1fc:	4798      	blx	r3
   1d1fe:	0003      	movs	r3, r0
   1d200:	001a      	movs	r2, r3
   1d202:	2301      	movs	r3, #1
   1d204:	4053      	eors	r3, r2
   1d206:	b2db      	uxtb	r3, r3
   1d208:	2b00      	cmp	r3, #0
   1d20a:	d007      	beq.n	1d21c <sd_mmc_spi_card_init+0xac>
			// It is not a SD card
			sd_mmc_debug("Start MMC Install\n\r");
			sd_mmc_card->type = CARD_TYPE_MMC;
   1d20c:	4b35      	ldr	r3, [pc, #212]	; (1d2e4 <sd_mmc_spi_card_init+0x174>)
   1d20e:	681b      	ldr	r3, [r3, #0]
   1d210:	2202      	movs	r2, #2
   1d212:	72da      	strb	r2, [r3, #11]
			return sd_mmc_spi_install_mmc();
   1d214:	4b39      	ldr	r3, [pc, #228]	; (1d2fc <sd_mmc_spi_card_init+0x18c>)
   1d216:	4798      	blx	r3
   1d218:	0003      	movs	r3, r0
   1d21a:	e05f      	b.n	1d2dc <sd_mmc_spi_card_init+0x16c>
		 * However, to be sure, the CRC OFF command is send.
		 * Unfortunately, specific SDIO card does not support it
		 * (H&D wireless card - HDG104 WiFi SIP)
		 * and the command is send only on SD card.
		 */
		if (!driver_send_cmd(SDMMC_SPI_CMD59_CRC_ON_OFF, 0)) {
   1d21c:	4b38      	ldr	r3, [pc, #224]	; (1d300 <sd_mmc_spi_card_init+0x190>)
   1d21e:	2100      	movs	r1, #0
   1d220:	0018      	movs	r0, r3
   1d222:	4b32      	ldr	r3, [pc, #200]	; (1d2ec <sd_mmc_spi_card_init+0x17c>)
   1d224:	4798      	blx	r3
   1d226:	0003      	movs	r3, r0
   1d228:	001a      	movs	r2, r3
   1d22a:	2301      	movs	r3, #1
   1d22c:	4053      	eors	r3, r2
   1d22e:	b2db      	uxtb	r3, r3
   1d230:	2b00      	cmp	r3, #0
   1d232:	d001      	beq.n	1d238 <sd_mmc_spi_card_init+0xc8>
			return false;
   1d234:	2300      	movs	r3, #0
   1d236:	e051      	b.n	1d2dc <sd_mmc_spi_card_init+0x16c>
		}
	}
	// SD MEMORY
	if (sd_mmc_card->type & CARD_TYPE_SD) {
   1d238:	4b2a      	ldr	r3, [pc, #168]	; (1d2e4 <sd_mmc_spi_card_init+0x174>)
   1d23a:	681b      	ldr	r3, [r3, #0]
   1d23c:	7adb      	ldrb	r3, [r3, #11]
   1d23e:	001a      	movs	r2, r3
   1d240:	2301      	movs	r3, #1
   1d242:	4013      	ands	r3, r2
   1d244:	d017      	beq.n	1d276 <sd_mmc_spi_card_init+0x106>
		// Get the Card-Specific Data
		if (!sd_mmc_cmd9_spi()) {
   1d246:	4b2f      	ldr	r3, [pc, #188]	; (1d304 <sd_mmc_spi_card_init+0x194>)
   1d248:	4798      	blx	r3
   1d24a:	0003      	movs	r3, r0
   1d24c:	001a      	movs	r2, r3
   1d24e:	2301      	movs	r3, #1
   1d250:	4053      	eors	r3, r2
   1d252:	b2db      	uxtb	r3, r3
   1d254:	2b00      	cmp	r3, #0
   1d256:	d001      	beq.n	1d25c <sd_mmc_spi_card_init+0xec>
			return false;
   1d258:	2300      	movs	r3, #0
   1d25a:	e03f      	b.n	1d2dc <sd_mmc_spi_card_init+0x16c>
		}
		sd_decode_csd();
   1d25c:	4b2a      	ldr	r3, [pc, #168]	; (1d308 <sd_mmc_spi_card_init+0x198>)
   1d25e:	4798      	blx	r3
		// Read the SCR to get card version
		if (!sd_acmd51()) {
   1d260:	4b2a      	ldr	r3, [pc, #168]	; (1d30c <sd_mmc_spi_card_init+0x19c>)
   1d262:	4798      	blx	r3
   1d264:	0003      	movs	r3, r0
   1d266:	001a      	movs	r2, r3
   1d268:	2301      	movs	r3, #1
   1d26a:	4053      	eors	r3, r2
   1d26c:	b2db      	uxtb	r3, r3
   1d26e:	2b00      	cmp	r3, #0
   1d270:	d001      	beq.n	1d276 <sd_mmc_spi_card_init+0x106>
			return false;
   1d272:	2300      	movs	r3, #0
   1d274:	e032      	b.n	1d2dc <sd_mmc_spi_card_init+0x16c>
		if (!sdio_get_max_speed()) {
			return false;
		}
	}
	// SD MEMORY not HC, Set default block size
	if ((sd_mmc_card->type & CARD_TYPE_SD) &&
   1d276:	4b1b      	ldr	r3, [pc, #108]	; (1d2e4 <sd_mmc_spi_card_init+0x174>)
   1d278:	681b      	ldr	r3, [r3, #0]
   1d27a:	7adb      	ldrb	r3, [r3, #11]
   1d27c:	001a      	movs	r2, r3
   1d27e:	2301      	movs	r3, #1
   1d280:	4013      	ands	r3, r2
   1d282:	d016      	beq.n	1d2b2 <sd_mmc_spi_card_init+0x142>
			(0 == (sd_mmc_card->type & CARD_TYPE_HC))) {
   1d284:	4b17      	ldr	r3, [pc, #92]	; (1d2e4 <sd_mmc_spi_card_init+0x174>)
   1d286:	681b      	ldr	r3, [r3, #0]
   1d288:	7adb      	ldrb	r3, [r3, #11]
   1d28a:	001a      	movs	r2, r3
   1d28c:	2308      	movs	r3, #8
   1d28e:	4013      	ands	r3, r2
	if ((sd_mmc_card->type & CARD_TYPE_SD) &&
   1d290:	d10f      	bne.n	1d2b2 <sd_mmc_spi_card_init+0x142>
		if (!driver_send_cmd(SDMMC_CMD16_SET_BLOCKLEN, SD_MMC_BLOCK_SIZE)) {
   1d292:	2380      	movs	r3, #128	; 0x80
   1d294:	009b      	lsls	r3, r3, #2
   1d296:	4a1e      	ldr	r2, [pc, #120]	; (1d310 <sd_mmc_spi_card_init+0x1a0>)
   1d298:	0019      	movs	r1, r3
   1d29a:	0010      	movs	r0, r2
   1d29c:	4b13      	ldr	r3, [pc, #76]	; (1d2ec <sd_mmc_spi_card_init+0x17c>)
   1d29e:	4798      	blx	r3
   1d2a0:	0003      	movs	r3, r0
   1d2a2:	001a      	movs	r2, r3
   1d2a4:	2301      	movs	r3, #1
   1d2a6:	4053      	eors	r3, r2
   1d2a8:	b2db      	uxtb	r3, r3
   1d2aa:	2b00      	cmp	r3, #0
   1d2ac:	d001      	beq.n	1d2b2 <sd_mmc_spi_card_init+0x142>
			return false;
   1d2ae:	2300      	movs	r3, #0
   1d2b0:	e014      	b.n	1d2dc <sd_mmc_spi_card_init+0x16c>
		}
	}
	// Check communication
	if (sd_mmc_card->type & CARD_TYPE_SD) {
   1d2b2:	4b0c      	ldr	r3, [pc, #48]	; (1d2e4 <sd_mmc_spi_card_init+0x174>)
   1d2b4:	681b      	ldr	r3, [r3, #0]
   1d2b6:	7adb      	ldrb	r3, [r3, #11]
   1d2b8:	001a      	movs	r2, r3
   1d2ba:	2301      	movs	r3, #1
   1d2bc:	4013      	ands	r3, r2
   1d2be:	d00a      	beq.n	1d2d6 <sd_mmc_spi_card_init+0x166>
		if (!sd_mmc_cmd13()) {
   1d2c0:	4b14      	ldr	r3, [pc, #80]	; (1d314 <sd_mmc_spi_card_init+0x1a4>)
   1d2c2:	4798      	blx	r3
   1d2c4:	0003      	movs	r3, r0
   1d2c6:	001a      	movs	r2, r3
   1d2c8:	2301      	movs	r3, #1
   1d2ca:	4053      	eors	r3, r2
   1d2cc:	b2db      	uxtb	r3, r3
   1d2ce:	2b00      	cmp	r3, #0
   1d2d0:	d001      	beq.n	1d2d6 <sd_mmc_spi_card_init+0x166>
			return false;
   1d2d2:	2300      	movs	r3, #0
   1d2d4:	e002      	b.n	1d2dc <sd_mmc_spi_card_init+0x16c>
		}
	}
	// Reinitialize the slot with the new speed
	sd_mmc_configure_slot();
   1d2d6:	4b10      	ldr	r3, [pc, #64]	; (1d318 <sd_mmc_spi_card_init+0x1a8>)
   1d2d8:	4798      	blx	r3
	return true;
   1d2da:	2301      	movs	r3, #1
}
   1d2dc:	0018      	movs	r0, r3
   1d2de:	46bd      	mov	sp, r7
   1d2e0:	b002      	add	sp, #8
   1d2e2:	bd80      	pop	{r7, pc}
   1d2e4:	20003ce0 	.word	0x20003ce0
   1d2e8:	0001e359 	.word	0x0001e359
   1d2ec:	0001e3a5 	.word	0x0001e3a5
   1d2f0:	0001cac5 	.word	0x0001cac5
   1d2f4:	0001cab9 	.word	0x0001cab9
   1d2f8:	0001c9d5 	.word	0x0001c9d5
   1d2fc:	0001d31d 	.word	0x0001d31d
   1d300:	0000113b 	.word	0x0000113b
   1d304:	0001cc61 	.word	0x0001cc61
   1d308:	0001ce01 	.word	0x0001ce01
   1d30c:	0001cf49 	.word	0x0001cf49
   1d310:	00001110 	.word	0x00001110
   1d314:	0001ceed 	.word	0x0001ceed
   1d318:	0001d115 	.word	0x0001d115

0001d31c <sd_mmc_spi_install_mmc>:
 * At last, it will automaticly enable maximum bus width and transfer speed.
 *
 * \return true if success, otherwise false
 */
static bool sd_mmc_spi_install_mmc(void)
{
   1d31c:	b580      	push	{r7, lr}
   1d31e:	b082      	sub	sp, #8
   1d320:	af00      	add	r7, sp, #0
	uint8_t b_authorize_high_speed;

	// CMD0 - Reset all cards to idle state.
	if (!driver_send_cmd(SDMMC_SPI_CMD0_GO_IDLE_STATE, 0)) {
   1d322:	2388      	movs	r3, #136	; 0x88
   1d324:	015b      	lsls	r3, r3, #5
   1d326:	2100      	movs	r1, #0
   1d328:	0018      	movs	r0, r3
   1d32a:	4b32      	ldr	r3, [pc, #200]	; (1d3f4 <sd_mmc_spi_install_mmc+0xd8>)
   1d32c:	4798      	blx	r3
   1d32e:	0003      	movs	r3, r0
   1d330:	001a      	movs	r2, r3
   1d332:	2301      	movs	r3, #1
   1d334:	4053      	eors	r3, r2
   1d336:	b2db      	uxtb	r3, r3
   1d338:	2b00      	cmp	r3, #0
   1d33a:	d001      	beq.n	1d340 <sd_mmc_spi_install_mmc+0x24>
		return false;
   1d33c:	2300      	movs	r3, #0
   1d33e:	e055      	b.n	1d3ec <sd_mmc_spi_install_mmc+0xd0>
	}

	if (!mmc_spi_op_cond()) {
   1d340:	4b2d      	ldr	r3, [pc, #180]	; (1d3f8 <sd_mmc_spi_install_mmc+0xdc>)
   1d342:	4798      	blx	r3
   1d344:	0003      	movs	r3, r0
   1d346:	001a      	movs	r2, r3
   1d348:	2301      	movs	r3, #1
   1d34a:	4053      	eors	r3, r2
   1d34c:	b2db      	uxtb	r3, r3
   1d34e:	2b00      	cmp	r3, #0
   1d350:	d001      	beq.n	1d356 <sd_mmc_spi_install_mmc+0x3a>
		return false;
   1d352:	2300      	movs	r3, #0
   1d354:	e04a      	b.n	1d3ec <sd_mmc_spi_install_mmc+0xd0>
	}

	// Disable CRC check for SPI mode
	if (!driver_send_cmd(SDMMC_SPI_CMD59_CRC_ON_OFF, 0)) {
   1d356:	4b29      	ldr	r3, [pc, #164]	; (1d3fc <sd_mmc_spi_install_mmc+0xe0>)
   1d358:	2100      	movs	r1, #0
   1d35a:	0018      	movs	r0, r3
   1d35c:	4b25      	ldr	r3, [pc, #148]	; (1d3f4 <sd_mmc_spi_install_mmc+0xd8>)
   1d35e:	4798      	blx	r3
   1d360:	0003      	movs	r3, r0
   1d362:	001a      	movs	r2, r3
   1d364:	2301      	movs	r3, #1
   1d366:	4053      	eors	r3, r2
   1d368:	b2db      	uxtb	r3, r3
   1d36a:	2b00      	cmp	r3, #0
   1d36c:	d001      	beq.n	1d372 <sd_mmc_spi_install_mmc+0x56>
		return false;
   1d36e:	2300      	movs	r3, #0
   1d370:	e03c      	b.n	1d3ec <sd_mmc_spi_install_mmc+0xd0>
	}
	// Get the Card-Specific Data
	if (!sd_mmc_cmd9_spi()) {
   1d372:	4b23      	ldr	r3, [pc, #140]	; (1d400 <sd_mmc_spi_install_mmc+0xe4>)
   1d374:	4798      	blx	r3
   1d376:	0003      	movs	r3, r0
   1d378:	001a      	movs	r2, r3
   1d37a:	2301      	movs	r3, #1
   1d37c:	4053      	eors	r3, r2
   1d37e:	b2db      	uxtb	r3, r3
   1d380:	2b00      	cmp	r3, #0
   1d382:	d001      	beq.n	1d388 <sd_mmc_spi_install_mmc+0x6c>
		return false;
   1d384:	2300      	movs	r3, #0
   1d386:	e031      	b.n	1d3ec <sd_mmc_spi_install_mmc+0xd0>
	}
	mmc_decode_csd();
   1d388:	4b1e      	ldr	r3, [pc, #120]	; (1d404 <sd_mmc_spi_install_mmc+0xe8>)
   1d38a:	4798      	blx	r3
	// For MMC 4.0 Higher version
	if (sd_mmc_card->version >= CARD_VER_MMC_4) {
   1d38c:	4b1e      	ldr	r3, [pc, #120]	; (1d408 <sd_mmc_spi_install_mmc+0xec>)
   1d38e:	681b      	ldr	r3, [r3, #0]
   1d390:	7b1b      	ldrb	r3, [r3, #12]
   1d392:	2b3f      	cmp	r3, #63	; 0x3f
   1d394:	d90c      	bls.n	1d3b0 <sd_mmc_spi_install_mmc+0x94>
		// Get EXT_CSD
		if (!mmc_cmd8(&b_authorize_high_speed)) {
   1d396:	1dfb      	adds	r3, r7, #7
   1d398:	0018      	movs	r0, r3
   1d39a:	4b1c      	ldr	r3, [pc, #112]	; (1d40c <sd_mmc_spi_install_mmc+0xf0>)
   1d39c:	4798      	blx	r3
   1d39e:	0003      	movs	r3, r0
   1d3a0:	001a      	movs	r2, r3
   1d3a2:	2301      	movs	r3, #1
   1d3a4:	4053      	eors	r3, r2
   1d3a6:	b2db      	uxtb	r3, r3
   1d3a8:	2b00      	cmp	r3, #0
   1d3aa:	d001      	beq.n	1d3b0 <sd_mmc_spi_install_mmc+0x94>
			return false;
   1d3ac:	2300      	movs	r3, #0
   1d3ae:	e01d      	b.n	1d3ec <sd_mmc_spi_install_mmc+0xd0>
		}
	}
	// Set default block size
	if (!driver_send_cmd(SDMMC_CMD16_SET_BLOCKLEN, SD_MMC_BLOCK_SIZE)) {
   1d3b0:	2380      	movs	r3, #128	; 0x80
   1d3b2:	009b      	lsls	r3, r3, #2
   1d3b4:	4a16      	ldr	r2, [pc, #88]	; (1d410 <sd_mmc_spi_install_mmc+0xf4>)
   1d3b6:	0019      	movs	r1, r3
   1d3b8:	0010      	movs	r0, r2
   1d3ba:	4b0e      	ldr	r3, [pc, #56]	; (1d3f4 <sd_mmc_spi_install_mmc+0xd8>)
   1d3bc:	4798      	blx	r3
   1d3be:	0003      	movs	r3, r0
   1d3c0:	001a      	movs	r2, r3
   1d3c2:	2301      	movs	r3, #1
   1d3c4:	4053      	eors	r3, r2
   1d3c6:	b2db      	uxtb	r3, r3
   1d3c8:	2b00      	cmp	r3, #0
   1d3ca:	d001      	beq.n	1d3d0 <sd_mmc_spi_install_mmc+0xb4>
		return false;
   1d3cc:	2300      	movs	r3, #0
   1d3ce:	e00d      	b.n	1d3ec <sd_mmc_spi_install_mmc+0xd0>
	}
	// Check communication
	if (!sd_mmc_cmd13()) {
   1d3d0:	4b10      	ldr	r3, [pc, #64]	; (1d414 <sd_mmc_spi_install_mmc+0xf8>)
   1d3d2:	4798      	blx	r3
   1d3d4:	0003      	movs	r3, r0
   1d3d6:	001a      	movs	r2, r3
   1d3d8:	2301      	movs	r3, #1
   1d3da:	4053      	eors	r3, r2
   1d3dc:	b2db      	uxtb	r3, r3
   1d3de:	2b00      	cmp	r3, #0
   1d3e0:	d001      	beq.n	1d3e6 <sd_mmc_spi_install_mmc+0xca>
		return false;
   1d3e2:	2300      	movs	r3, #0
   1d3e4:	e002      	b.n	1d3ec <sd_mmc_spi_install_mmc+0xd0>
	}
	// Reinitialize the slot with the new speed
	sd_mmc_configure_slot();
   1d3e6:	4b0c      	ldr	r3, [pc, #48]	; (1d418 <sd_mmc_spi_install_mmc+0xfc>)
   1d3e8:	4798      	blx	r3
	return true;
   1d3ea:	2301      	movs	r3, #1
}
   1d3ec:	0018      	movs	r0, r3
   1d3ee:	46bd      	mov	sp, r7
   1d3f0:	b002      	add	sp, #8
   1d3f2:	bd80      	pop	{r7, pc}
   1d3f4:	0001e3a5 	.word	0x0001e3a5
   1d3f8:	0001c929 	.word	0x0001c929
   1d3fc:	0000113b 	.word	0x0000113b
   1d400:	0001cc61 	.word	0x0001cc61
   1d404:	0001ccd1 	.word	0x0001ccd1
   1d408:	20003ce0 	.word	0x20003ce0
   1d40c:	0001cb35 	.word	0x0001cb35
   1d410:	00001110 	.word	0x00001110
   1d414:	0001ceed 	.word	0x0001ceed
   1d418:	0001d115 	.word	0x0001d115

0001d41c <sd_mmc_init>:

//-------------------------------------------------------------------
//--------------------- PUBLIC FUNCTIONS ----------------------------

void sd_mmc_init(void)
{
   1d41c:	b580      	push	{r7, lr}
   1d41e:	b082      	sub	sp, #8
   1d420:	af00      	add	r7, sp, #0
# define SD_MMC_ENABLE_WP_PIN(slot, unused) \
	pmc_enable_periph_clk(SD_MMC_##slot##_WP_PIO_ID);
	MREPEAT(SD_MMC_MEM_CNT, SD_MMC_ENABLE_WP_PIN, ~)
# undef SD_MMC_ENABLE_WP_PIN
#endif
	for (uint8_t slot = 0; slot < SD_MMC_MEM_CNT; slot++) {
   1d422:	1dfb      	adds	r3, r7, #7
   1d424:	2200      	movs	r2, #0
   1d426:	701a      	strb	r2, [r3, #0]
   1d428:	e00c      	b.n	1d444 <sd_mmc_init+0x28>
		sd_mmc_cards[slot].state = SD_MMC_CARD_STATE_NO_CARD;
   1d42a:	1dfb      	adds	r3, r7, #7
   1d42c:	781b      	ldrb	r3, [r3, #0]
   1d42e:	4a0c      	ldr	r2, [pc, #48]	; (1d460 <sd_mmc_init+0x44>)
   1d430:	015b      	lsls	r3, r3, #5
   1d432:	18d3      	adds	r3, r2, r3
   1d434:	330a      	adds	r3, #10
   1d436:	2204      	movs	r2, #4
   1d438:	701a      	strb	r2, [r3, #0]
	for (uint8_t slot = 0; slot < SD_MMC_MEM_CNT; slot++) {
   1d43a:	1dfb      	adds	r3, r7, #7
   1d43c:	781a      	ldrb	r2, [r3, #0]
   1d43e:	1dfb      	adds	r3, r7, #7
   1d440:	3201      	adds	r2, #1
   1d442:	701a      	strb	r2, [r3, #0]
   1d444:	1dfb      	adds	r3, r7, #7
   1d446:	781b      	ldrb	r3, [r3, #0]
   1d448:	2b00      	cmp	r3, #0
   1d44a:	d0ee      	beq.n	1d42a <sd_mmc_init+0xe>
	}
	sd_mmc_slot_sel = 0xFF; // No slot configurated
   1d44c:	4b05      	ldr	r3, [pc, #20]	; (1d464 <sd_mmc_init+0x48>)
   1d44e:	22ff      	movs	r2, #255	; 0xff
   1d450:	701a      	strb	r2, [r3, #0]
	driver_init();
   1d452:	4b05      	ldr	r3, [pc, #20]	; (1d468 <sd_mmc_init+0x4c>)
   1d454:	4798      	blx	r3
}
   1d456:	46c0      	nop			; (mov r8, r8)
   1d458:	46bd      	mov	sp, r7
   1d45a:	b002      	add	sp, #8
   1d45c:	bd80      	pop	{r7, pc}
   1d45e:	46c0      	nop			; (mov r8, r8)
   1d460:	20003cbc 	.word	0x20003cbc
   1d464:	20003cdc 	.word	0x20003cdc
   1d468:	0001e1c5 	.word	0x0001e1c5

0001d46c <sd_mmc_check>:
{
	return SD_MMC_MEM_CNT;
}

sd_mmc_err_t sd_mmc_check(uint8_t slot)
{
   1d46c:	b590      	push	{r4, r7, lr}
   1d46e:	b085      	sub	sp, #20
   1d470:	af00      	add	r7, sp, #0
   1d472:	0002      	movs	r2, r0
   1d474:	1dfb      	adds	r3, r7, #7
   1d476:	701a      	strb	r2, [r3, #0]
	sd_mmc_err_t sd_mmc_err;

	sd_mmc_err = sd_mmc_select_slot(slot);
   1d478:	230f      	movs	r3, #15
   1d47a:	18fc      	adds	r4, r7, r3
   1d47c:	1dfb      	adds	r3, r7, #7
   1d47e:	781b      	ldrb	r3, [r3, #0]
   1d480:	0018      	movs	r0, r3
   1d482:	4b13      	ldr	r3, [pc, #76]	; (1d4d0 <sd_mmc_check+0x64>)
   1d484:	4798      	blx	r3
   1d486:	0003      	movs	r3, r0
   1d488:	7023      	strb	r3, [r4, #0]
	if (sd_mmc_err != SD_MMC_INIT_ONGOING) {
   1d48a:	230f      	movs	r3, #15
   1d48c:	18fb      	adds	r3, r7, r3
   1d48e:	781b      	ldrb	r3, [r3, #0]
   1d490:	2b01      	cmp	r3, #1
   1d492:	d005      	beq.n	1d4a0 <sd_mmc_check+0x34>
		sd_mmc_deselect_slot();
   1d494:	4b0f      	ldr	r3, [pc, #60]	; (1d4d4 <sd_mmc_check+0x68>)
   1d496:	4798      	blx	r3
		return sd_mmc_err;
   1d498:	230f      	movs	r3, #15
   1d49a:	18fb      	adds	r3, r7, r3
   1d49c:	781b      	ldrb	r3, [r3, #0]
   1d49e:	e012      	b.n	1d4c6 <sd_mmc_check+0x5a>
	}

	// Initialization of the card requested
	if (sd_mmc_is_spi()? sd_mmc_spi_card_init()
   1d4a0:	4b0d      	ldr	r3, [pc, #52]	; (1d4d8 <sd_mmc_check+0x6c>)
   1d4a2:	4798      	blx	r3
   1d4a4:	1e03      	subs	r3, r0, #0
   1d4a6:	d007      	beq.n	1d4b8 <sd_mmc_check+0x4c>
			: sd_mmc_mci_card_init()) {
		sd_mmc_debug("SD/MMC card ready\n\r");
		sd_mmc_card->state = SD_MMC_CARD_STATE_READY;
   1d4a8:	4b0c      	ldr	r3, [pc, #48]	; (1d4dc <sd_mmc_check+0x70>)
   1d4aa:	681b      	ldr	r3, [r3, #0]
   1d4ac:	2200      	movs	r2, #0
   1d4ae:	729a      	strb	r2, [r3, #10]
		sd_mmc_deselect_slot();
   1d4b0:	4b08      	ldr	r3, [pc, #32]	; (1d4d4 <sd_mmc_check+0x68>)
   1d4b2:	4798      	blx	r3
		// To notify that the card has been just initialized
		// It is necessary for USB Device MSC
		return SD_MMC_INIT_ONGOING;
   1d4b4:	2301      	movs	r3, #1
   1d4b6:	e006      	b.n	1d4c6 <sd_mmc_check+0x5a>
	}
	sd_mmc_debug("SD/MMC card initialization failed\n\r");
	sd_mmc_card->state = SD_MMC_CARD_STATE_UNUSABLE;
   1d4b8:	4b08      	ldr	r3, [pc, #32]	; (1d4dc <sd_mmc_check+0x70>)
   1d4ba:	681b      	ldr	r3, [r3, #0]
   1d4bc:	2203      	movs	r2, #3
   1d4be:	729a      	strb	r2, [r3, #10]
	sd_mmc_deselect_slot();
   1d4c0:	4b04      	ldr	r3, [pc, #16]	; (1d4d4 <sd_mmc_check+0x68>)
   1d4c2:	4798      	blx	r3
	return SD_MMC_ERR_UNUSABLE;
   1d4c4:	2303      	movs	r3, #3
}
   1d4c6:	0018      	movs	r0, r3
   1d4c8:	46bd      	mov	sp, r7
   1d4ca:	b005      	add	sp, #20
   1d4cc:	bd90      	pop	{r4, r7, pc}
   1d4ce:	46c0      	nop			; (mov r8, r8)
   1d4d0:	0001d051 	.word	0x0001d051
   1d4d4:	0001d14d 	.word	0x0001d14d
   1d4d8:	0001d171 	.word	0x0001d171
   1d4dc:	20003ce0 	.word	0x20003ce0

0001d4e0 <sd_mmc_get_type>:

card_type_t sd_mmc_get_type(uint8_t slot)
{
   1d4e0:	b580      	push	{r7, lr}
   1d4e2:	b082      	sub	sp, #8
   1d4e4:	af00      	add	r7, sp, #0
   1d4e6:	0002      	movs	r2, r0
   1d4e8:	1dfb      	adds	r3, r7, #7
   1d4ea:	701a      	strb	r2, [r3, #0]
	if (SD_MMC_OK != sd_mmc_select_slot(slot)) {
   1d4ec:	1dfb      	adds	r3, r7, #7
   1d4ee:	781b      	ldrb	r3, [r3, #0]
   1d4f0:	0018      	movs	r0, r3
   1d4f2:	4b07      	ldr	r3, [pc, #28]	; (1d510 <sd_mmc_get_type+0x30>)
   1d4f4:	4798      	blx	r3
   1d4f6:	1e03      	subs	r3, r0, #0
   1d4f8:	d001      	beq.n	1d4fe <sd_mmc_get_type+0x1e>
		return CARD_TYPE_UNKNOWN;
   1d4fa:	2300      	movs	r3, #0
   1d4fc:	e004      	b.n	1d508 <sd_mmc_get_type+0x28>
	}
	sd_mmc_deselect_slot();
   1d4fe:	4b05      	ldr	r3, [pc, #20]	; (1d514 <sd_mmc_get_type+0x34>)
   1d500:	4798      	blx	r3
	return sd_mmc_card->type;
   1d502:	4b05      	ldr	r3, [pc, #20]	; (1d518 <sd_mmc_get_type+0x38>)
   1d504:	681b      	ldr	r3, [r3, #0]
   1d506:	7adb      	ldrb	r3, [r3, #11]
}
   1d508:	0018      	movs	r0, r3
   1d50a:	46bd      	mov	sp, r7
   1d50c:	b002      	add	sp, #8
   1d50e:	bd80      	pop	{r7, pc}
   1d510:	0001d051 	.word	0x0001d051
   1d514:	0001d14d 	.word	0x0001d14d
   1d518:	20003ce0 	.word	0x20003ce0

0001d51c <sd_mmc_get_capacity>:
	sd_mmc_deselect_slot();
	return sd_mmc_card->version;
}

uint32_t sd_mmc_get_capacity(uint8_t slot)
{
   1d51c:	b580      	push	{r7, lr}
   1d51e:	b082      	sub	sp, #8
   1d520:	af00      	add	r7, sp, #0
   1d522:	0002      	movs	r2, r0
   1d524:	1dfb      	adds	r3, r7, #7
   1d526:	701a      	strb	r2, [r3, #0]
	if (SD_MMC_OK != sd_mmc_select_slot(slot)) {
   1d528:	1dfb      	adds	r3, r7, #7
   1d52a:	781b      	ldrb	r3, [r3, #0]
   1d52c:	0018      	movs	r0, r3
   1d52e:	4b07      	ldr	r3, [pc, #28]	; (1d54c <sd_mmc_get_capacity+0x30>)
   1d530:	4798      	blx	r3
   1d532:	1e03      	subs	r3, r0, #0
   1d534:	d001      	beq.n	1d53a <sd_mmc_get_capacity+0x1e>
		return 0;
   1d536:	2300      	movs	r3, #0
   1d538:	e004      	b.n	1d544 <sd_mmc_get_capacity+0x28>
	}
	sd_mmc_deselect_slot();
   1d53a:	4b05      	ldr	r3, [pc, #20]	; (1d550 <sd_mmc_get_capacity+0x34>)
   1d53c:	4798      	blx	r3
	return sd_mmc_card->capacity;
   1d53e:	4b05      	ldr	r3, [pc, #20]	; (1d554 <sd_mmc_get_capacity+0x38>)
   1d540:	681b      	ldr	r3, [r3, #0]
   1d542:	685b      	ldr	r3, [r3, #4]
}
   1d544:	0018      	movs	r0, r3
   1d546:	46bd      	mov	sp, r7
   1d548:	b002      	add	sp, #8
   1d54a:	bd80      	pop	{r7, pc}
   1d54c:	0001d051 	.word	0x0001d051
   1d550:	0001d14d 	.word	0x0001d14d
   1d554:	20003ce0 	.word	0x20003ce0

0001d558 <sd_mmc_is_write_protected>:

bool sd_mmc_is_write_protected(uint8_t slot)
{
   1d558:	b580      	push	{r7, lr}
   1d55a:	b082      	sub	sp, #8
   1d55c:	af00      	add	r7, sp, #0
   1d55e:	0002      	movs	r2, r0
   1d560:	1dfb      	adds	r3, r7, #7
   1d562:	701a      	strb	r2, [r3, #0]
	if (port_pin_get_input_level(sd_mmc_cards[slot].wp_gpio)
			== SD_MMC_0_WP_DETECT_VALUE) {
		return true;
	}
#endif
	return false;
   1d564:	2300      	movs	r3, #0
}
   1d566:	0018      	movs	r0, r3
   1d568:	46bd      	mov	sp, r7
   1d56a:	b002      	add	sp, #8
   1d56c:	bd80      	pop	{r7, pc}
	...

0001d570 <sd_mmc_init_read_blocks>:

sd_mmc_err_t sd_mmc_init_read_blocks(uint8_t slot, uint32_t start,
		uint16_t nb_block)
{
   1d570:	b590      	push	{r4, r7, lr}
   1d572:	b089      	sub	sp, #36	; 0x24
   1d574:	af02      	add	r7, sp, #8
   1d576:	6039      	str	r1, [r7, #0]
   1d578:	0011      	movs	r1, r2
   1d57a:	1dfb      	adds	r3, r7, #7
   1d57c:	1c02      	adds	r2, r0, #0
   1d57e:	701a      	strb	r2, [r3, #0]
   1d580:	1d3b      	adds	r3, r7, #4
   1d582:	1c0a      	adds	r2, r1, #0
   1d584:	801a      	strh	r2, [r3, #0]
	sd_mmc_err_t sd_mmc_err;
	uint32_t cmd, arg, resp;

	sd_mmc_err = sd_mmc_select_slot(slot);
   1d586:	230f      	movs	r3, #15
   1d588:	18fc      	adds	r4, r7, r3
   1d58a:	1dfb      	adds	r3, r7, #7
   1d58c:	781b      	ldrb	r3, [r3, #0]
   1d58e:	0018      	movs	r0, r3
   1d590:	4b29      	ldr	r3, [pc, #164]	; (1d638 <sd_mmc_init_read_blocks+0xc8>)
   1d592:	4798      	blx	r3
   1d594:	0003      	movs	r3, r0
   1d596:	7023      	strb	r3, [r4, #0]
	if (sd_mmc_err != SD_MMC_OK) {
   1d598:	230f      	movs	r3, #15
   1d59a:	18fb      	adds	r3, r7, r3
   1d59c:	781b      	ldrb	r3, [r3, #0]
   1d59e:	2b00      	cmp	r3, #0
   1d5a0:	d003      	beq.n	1d5aa <sd_mmc_init_read_blocks+0x3a>
		return sd_mmc_err;
   1d5a2:	230f      	movs	r3, #15
   1d5a4:	18fb      	adds	r3, r7, r3
   1d5a6:	781b      	ldrb	r3, [r3, #0]
   1d5a8:	e041      	b.n	1d62e <sd_mmc_init_read_blocks+0xbe>
	}

	// Wait for data ready status
	if (!sd_mmc_cmd13()) {
   1d5aa:	4b24      	ldr	r3, [pc, #144]	; (1d63c <sd_mmc_init_read_blocks+0xcc>)
   1d5ac:	4798      	blx	r3
   1d5ae:	0003      	movs	r3, r0
   1d5b0:	001a      	movs	r2, r3
   1d5b2:	2301      	movs	r3, #1
   1d5b4:	4053      	eors	r3, r2
   1d5b6:	b2db      	uxtb	r3, r3
   1d5b8:	2b00      	cmp	r3, #0
   1d5ba:	d003      	beq.n	1d5c4 <sd_mmc_init_read_blocks+0x54>
		sd_mmc_deselect_slot();
   1d5bc:	4b20      	ldr	r3, [pc, #128]	; (1d640 <sd_mmc_init_read_blocks+0xd0>)
   1d5be:	4798      	blx	r3
		return SD_MMC_ERR_COMM;
   1d5c0:	2305      	movs	r3, #5
   1d5c2:	e034      	b.n	1d62e <sd_mmc_init_read_blocks+0xbe>
	}

	if (nb_block > 1) {
   1d5c4:	1d3b      	adds	r3, r7, #4
   1d5c6:	881b      	ldrh	r3, [r3, #0]
   1d5c8:	2b01      	cmp	r3, #1
   1d5ca:	d902      	bls.n	1d5d2 <sd_mmc_init_read_blocks+0x62>
		cmd = SDMMC_CMD18_READ_MULTIPLE_BLOCK;
   1d5cc:	4b1d      	ldr	r3, [pc, #116]	; (1d644 <sd_mmc_init_read_blocks+0xd4>)
   1d5ce:	617b      	str	r3, [r7, #20]
   1d5d0:	e001      	b.n	1d5d6 <sd_mmc_init_read_blocks+0x66>
	} else {
		cmd = SDMMC_CMD17_READ_SINGLE_BLOCK;
   1d5d2:	4b1d      	ldr	r3, [pc, #116]	; (1d648 <sd_mmc_init_read_blocks+0xd8>)
   1d5d4:	617b      	str	r3, [r7, #20]
	}
	/*
	 * SDSC Card (CCS=0) uses byte unit address,
	 * SDHC and SDXC Cards (CCS=1) use block unit address (512 Bytes unit).
	 */
	if (sd_mmc_card->type & CARD_TYPE_HC) {
   1d5d6:	4b1d      	ldr	r3, [pc, #116]	; (1d64c <sd_mmc_init_read_blocks+0xdc>)
   1d5d8:	681b      	ldr	r3, [r3, #0]
   1d5da:	7adb      	ldrb	r3, [r3, #11]
   1d5dc:	001a      	movs	r2, r3
   1d5de:	2308      	movs	r3, #8
   1d5e0:	4013      	ands	r3, r2
   1d5e2:	d002      	beq.n	1d5ea <sd_mmc_init_read_blocks+0x7a>
		arg = start;
   1d5e4:	683b      	ldr	r3, [r7, #0]
   1d5e6:	613b      	str	r3, [r7, #16]
   1d5e8:	e002      	b.n	1d5f0 <sd_mmc_init_read_blocks+0x80>
	} else {
		arg = (start * SD_MMC_BLOCK_SIZE);
   1d5ea:	683b      	ldr	r3, [r7, #0]
   1d5ec:	025b      	lsls	r3, r3, #9
   1d5ee:	613b      	str	r3, [r7, #16]
	}

	if (!driver_adtc_start(cmd, arg, SD_MMC_BLOCK_SIZE, nb_block, true)) {
   1d5f0:	1d3b      	adds	r3, r7, #4
   1d5f2:	881c      	ldrh	r4, [r3, #0]
   1d5f4:	2380      	movs	r3, #128	; 0x80
   1d5f6:	009a      	lsls	r2, r3, #2
   1d5f8:	6939      	ldr	r1, [r7, #16]
   1d5fa:	6978      	ldr	r0, [r7, #20]
   1d5fc:	2301      	movs	r3, #1
   1d5fe:	9300      	str	r3, [sp, #0]
   1d600:	0023      	movs	r3, r4
   1d602:	4c13      	ldr	r4, [pc, #76]	; (1d650 <sd_mmc_init_read_blocks+0xe0>)
   1d604:	47a0      	blx	r4
   1d606:	0003      	movs	r3, r0
   1d608:	001a      	movs	r2, r3
   1d60a:	2301      	movs	r3, #1
   1d60c:	4053      	eors	r3, r2
   1d60e:	b2db      	uxtb	r3, r3
   1d610:	2b00      	cmp	r3, #0
   1d612:	d003      	beq.n	1d61c <sd_mmc_init_read_blocks+0xac>
		sd_mmc_deselect_slot();
   1d614:	4b0a      	ldr	r3, [pc, #40]	; (1d640 <sd_mmc_init_read_blocks+0xd0>)
   1d616:	4798      	blx	r3
		return SD_MMC_ERR_COMM;
   1d618:	2305      	movs	r3, #5
   1d61a:	e008      	b.n	1d62e <sd_mmc_init_read_blocks+0xbe>
					__func__, (int)SDMMC_CMD_GET_INDEX(cmd), resp);
			sd_mmc_deselect_slot();
			return SD_MMC_ERR_COMM;
		}
	}
	sd_mmc_nb_block_remaining = nb_block;
   1d61c:	4b0d      	ldr	r3, [pc, #52]	; (1d654 <sd_mmc_init_read_blocks+0xe4>)
   1d61e:	1d3a      	adds	r2, r7, #4
   1d620:	8812      	ldrh	r2, [r2, #0]
   1d622:	801a      	strh	r2, [r3, #0]
	sd_mmc_nb_block_to_tranfer = nb_block;
   1d624:	4b0c      	ldr	r3, [pc, #48]	; (1d658 <sd_mmc_init_read_blocks+0xe8>)
   1d626:	1d3a      	adds	r2, r7, #4
   1d628:	8812      	ldrh	r2, [r2, #0]
   1d62a:	801a      	strh	r2, [r3, #0]
	return SD_MMC_OK;
   1d62c:	2300      	movs	r3, #0
}
   1d62e:	0018      	movs	r0, r3
   1d630:	46bd      	mov	sp, r7
   1d632:	b007      	add	sp, #28
   1d634:	bd90      	pop	{r4, r7, pc}
   1d636:	46c0      	nop			; (mov r8, r8)
   1d638:	0001d051 	.word	0x0001d051
   1d63c:	0001ceed 	.word	0x0001ceed
   1d640:	0001d14d 	.word	0x0001d14d
   1d644:	00101112 	.word	0x00101112
   1d648:	00081111 	.word	0x00081111
   1d64c:	20003ce0 	.word	0x20003ce0
   1d650:	0001e3cd 	.word	0x0001e3cd
   1d654:	20003ce6 	.word	0x20003ce6
   1d658:	20003ce4 	.word	0x20003ce4

0001d65c <sd_mmc_start_read_blocks>:

sd_mmc_err_t sd_mmc_start_read_blocks(void *dest, uint16_t nb_block)
{
   1d65c:	b580      	push	{r7, lr}
   1d65e:	b082      	sub	sp, #8
   1d660:	af00      	add	r7, sp, #0
   1d662:	6078      	str	r0, [r7, #4]
   1d664:	000a      	movs	r2, r1
   1d666:	1cbb      	adds	r3, r7, #2
   1d668:	801a      	strh	r2, [r3, #0]
	Assert(sd_mmc_nb_block_remaining >= nb_block);

	if (!driver_start_read_blocks(dest, nb_block)) {
   1d66a:	1cbb      	adds	r3, r7, #2
   1d66c:	881a      	ldrh	r2, [r3, #0]
   1d66e:	687b      	ldr	r3, [r7, #4]
   1d670:	0011      	movs	r1, r2
   1d672:	0018      	movs	r0, r3
   1d674:	4b0d      	ldr	r3, [pc, #52]	; (1d6ac <sd_mmc_start_read_blocks+0x50>)
   1d676:	4798      	blx	r3
   1d678:	0003      	movs	r3, r0
   1d67a:	001a      	movs	r2, r3
   1d67c:	2301      	movs	r3, #1
   1d67e:	4053      	eors	r3, r2
   1d680:	b2db      	uxtb	r3, r3
   1d682:	2b00      	cmp	r3, #0
   1d684:	d004      	beq.n	1d690 <sd_mmc_start_read_blocks+0x34>
		sd_mmc_nb_block_remaining = 0;
   1d686:	4b0a      	ldr	r3, [pc, #40]	; (1d6b0 <sd_mmc_start_read_blocks+0x54>)
   1d688:	2200      	movs	r2, #0
   1d68a:	801a      	strh	r2, [r3, #0]
		return SD_MMC_ERR_COMM;
   1d68c:	2305      	movs	r3, #5
   1d68e:	e008      	b.n	1d6a2 <sd_mmc_start_read_blocks+0x46>
	}
	sd_mmc_nb_block_remaining -= nb_block;
   1d690:	4b07      	ldr	r3, [pc, #28]	; (1d6b0 <sd_mmc_start_read_blocks+0x54>)
   1d692:	881a      	ldrh	r2, [r3, #0]
   1d694:	1cbb      	adds	r3, r7, #2
   1d696:	881b      	ldrh	r3, [r3, #0]
   1d698:	1ad3      	subs	r3, r2, r3
   1d69a:	b29a      	uxth	r2, r3
   1d69c:	4b04      	ldr	r3, [pc, #16]	; (1d6b0 <sd_mmc_start_read_blocks+0x54>)
   1d69e:	801a      	strh	r2, [r3, #0]
	return SD_MMC_OK;
   1d6a0:	2300      	movs	r3, #0
}
   1d6a2:	0018      	movs	r0, r3
   1d6a4:	46bd      	mov	sp, r7
   1d6a6:	b002      	add	sp, #8
   1d6a8:	bd80      	pop	{r7, pc}
   1d6aa:	46c0      	nop			; (mov r8, r8)
   1d6ac:	0001e69d 	.word	0x0001e69d
   1d6b0:	20003ce6 	.word	0x20003ce6

0001d6b4 <sd_mmc_wait_end_of_read_blocks>:

sd_mmc_err_t sd_mmc_wait_end_of_read_blocks(bool abort)
{
   1d6b4:	b580      	push	{r7, lr}
   1d6b6:	b082      	sub	sp, #8
   1d6b8:	af00      	add	r7, sp, #0
   1d6ba:	0002      	movs	r2, r0
   1d6bc:	1dfb      	adds	r3, r7, #7
   1d6be:	701a      	strb	r2, [r3, #0]
	if (!driver_wait_end_of_read_blocks()) {
   1d6c0:	4b1c      	ldr	r3, [pc, #112]	; (1d734 <sd_mmc_wait_end_of_read_blocks+0x80>)
   1d6c2:	4798      	blx	r3
   1d6c4:	0003      	movs	r3, r0
   1d6c6:	001a      	movs	r2, r3
   1d6c8:	2301      	movs	r3, #1
   1d6ca:	4053      	eors	r3, r2
   1d6cc:	b2db      	uxtb	r3, r3
   1d6ce:	2b00      	cmp	r3, #0
   1d6d0:	d001      	beq.n	1d6d6 <sd_mmc_wait_end_of_read_blocks+0x22>
		return SD_MMC_ERR_COMM;
   1d6d2:	2305      	movs	r3, #5
   1d6d4:	e029      	b.n	1d72a <sd_mmc_wait_end_of_read_blocks+0x76>
	}
	if (abort) {
   1d6d6:	1dfb      	adds	r3, r7, #7
   1d6d8:	781b      	ldrb	r3, [r3, #0]
   1d6da:	2b00      	cmp	r3, #0
   1d6dc:	d003      	beq.n	1d6e6 <sd_mmc_wait_end_of_read_blocks+0x32>
		sd_mmc_nb_block_remaining = 0;
   1d6de:	4b16      	ldr	r3, [pc, #88]	; (1d738 <sd_mmc_wait_end_of_read_blocks+0x84>)
   1d6e0:	2200      	movs	r2, #0
   1d6e2:	801a      	strh	r2, [r3, #0]
   1d6e4:	e005      	b.n	1d6f2 <sd_mmc_wait_end_of_read_blocks+0x3e>
	} else if (sd_mmc_nb_block_remaining) {
   1d6e6:	4b14      	ldr	r3, [pc, #80]	; (1d738 <sd_mmc_wait_end_of_read_blocks+0x84>)
   1d6e8:	881b      	ldrh	r3, [r3, #0]
   1d6ea:	2b00      	cmp	r3, #0
   1d6ec:	d001      	beq.n	1d6f2 <sd_mmc_wait_end_of_read_blocks+0x3e>
		return SD_MMC_OK;
   1d6ee:	2300      	movs	r3, #0
   1d6f0:	e01b      	b.n	1d72a <sd_mmc_wait_end_of_read_blocks+0x76>
	}

	// All blocks are transfered then stop read operation
	if (sd_mmc_nb_block_to_tranfer == 1) {
   1d6f2:	4b12      	ldr	r3, [pc, #72]	; (1d73c <sd_mmc_wait_end_of_read_blocks+0x88>)
   1d6f4:	881b      	ldrh	r3, [r3, #0]
   1d6f6:	2b01      	cmp	r3, #1
   1d6f8:	d103      	bne.n	1d702 <sd_mmc_wait_end_of_read_blocks+0x4e>
		// Single block transfer, then nothing to do
		sd_mmc_deselect_slot();
   1d6fa:	4b11      	ldr	r3, [pc, #68]	; (1d740 <sd_mmc_wait_end_of_read_blocks+0x8c>)
   1d6fc:	4798      	blx	r3
		return SD_MMC_OK;
   1d6fe:	2300      	movs	r3, #0
   1d700:	e013      	b.n	1d72a <sd_mmc_wait_end_of_read_blocks+0x76>
	}
	// WORKAROUND for no compliance card (Atmel Internal ref. !MMC7 !SD19):
	// The errors on this command must be ignored
	// and one retry can be necessary in SPI mode for no compliance card.
	if (!driver_adtc_stop(SDMMC_CMD12_STOP_TRANSMISSION, 0)) {
   1d702:	4b10      	ldr	r3, [pc, #64]	; (1d744 <sd_mmc_wait_end_of_read_blocks+0x90>)
   1d704:	2100      	movs	r1, #0
   1d706:	0018      	movs	r0, r3
   1d708:	4b0f      	ldr	r3, [pc, #60]	; (1d748 <sd_mmc_wait_end_of_read_blocks+0x94>)
   1d70a:	4798      	blx	r3
   1d70c:	0003      	movs	r3, r0
   1d70e:	001a      	movs	r2, r3
   1d710:	2301      	movs	r3, #1
   1d712:	4053      	eors	r3, r2
   1d714:	b2db      	uxtb	r3, r3
   1d716:	2b00      	cmp	r3, #0
   1d718:	d004      	beq.n	1d724 <sd_mmc_wait_end_of_read_blocks+0x70>
		driver_adtc_stop(SDMMC_CMD12_STOP_TRANSMISSION, 0);
   1d71a:	4b0a      	ldr	r3, [pc, #40]	; (1d744 <sd_mmc_wait_end_of_read_blocks+0x90>)
   1d71c:	2100      	movs	r1, #0
   1d71e:	0018      	movs	r0, r3
   1d720:	4b09      	ldr	r3, [pc, #36]	; (1d748 <sd_mmc_wait_end_of_read_blocks+0x94>)
   1d722:	4798      	blx	r3
	}
	sd_mmc_deselect_slot();
   1d724:	4b06      	ldr	r3, [pc, #24]	; (1d740 <sd_mmc_wait_end_of_read_blocks+0x8c>)
   1d726:	4798      	blx	r3
	return SD_MMC_OK;
   1d728:	2300      	movs	r3, #0
}
   1d72a:	0018      	movs	r0, r3
   1d72c:	46bd      	mov	sp, r7
   1d72e:	b002      	add	sp, #8
   1d730:	bd80      	pop	{r7, pc}
   1d732:	46c0      	nop			; (mov r8, r8)
   1d734:	0001e741 	.word	0x0001e741
   1d738:	20003ce6 	.word	0x20003ce6
   1d73c:	20003ce4 	.word	0x20003ce4
   1d740:	0001d14d 	.word	0x0001d14d
   1d744:	0000310c 	.word	0x0000310c
   1d748:	0001e3a5 	.word	0x0001e3a5

0001d74c <sd_mmc_init_write_blocks>:

sd_mmc_err_t sd_mmc_init_write_blocks(uint8_t slot, uint32_t start,
		uint16_t nb_block)
{
   1d74c:	b590      	push	{r4, r7, lr}
   1d74e:	b089      	sub	sp, #36	; 0x24
   1d750:	af02      	add	r7, sp, #8
   1d752:	6039      	str	r1, [r7, #0]
   1d754:	0011      	movs	r1, r2
   1d756:	1dfb      	adds	r3, r7, #7
   1d758:	1c02      	adds	r2, r0, #0
   1d75a:	701a      	strb	r2, [r3, #0]
   1d75c:	1d3b      	adds	r3, r7, #4
   1d75e:	1c0a      	adds	r2, r1, #0
   1d760:	801a      	strh	r2, [r3, #0]
	sd_mmc_err_t sd_mmc_err;
	uint32_t cmd, arg, resp;

	sd_mmc_err = sd_mmc_select_slot(slot);
   1d762:	230f      	movs	r3, #15
   1d764:	18fc      	adds	r4, r7, r3
   1d766:	1dfb      	adds	r3, r7, #7
   1d768:	781b      	ldrb	r3, [r3, #0]
   1d76a:	0018      	movs	r0, r3
   1d76c:	4b28      	ldr	r3, [pc, #160]	; (1d810 <sd_mmc_init_write_blocks+0xc4>)
   1d76e:	4798      	blx	r3
   1d770:	0003      	movs	r3, r0
   1d772:	7023      	strb	r3, [r4, #0]
	if (sd_mmc_err != SD_MMC_OK) {
   1d774:	230f      	movs	r3, #15
   1d776:	18fb      	adds	r3, r7, r3
   1d778:	781b      	ldrb	r3, [r3, #0]
   1d77a:	2b00      	cmp	r3, #0
   1d77c:	d003      	beq.n	1d786 <sd_mmc_init_write_blocks+0x3a>
		return sd_mmc_err;
   1d77e:	230f      	movs	r3, #15
   1d780:	18fb      	adds	r3, r7, r3
   1d782:	781b      	ldrb	r3, [r3, #0]
   1d784:	e03f      	b.n	1d806 <sd_mmc_init_write_blocks+0xba>
	}
	if (sd_mmc_is_write_protected(slot)) {
   1d786:	1dfb      	adds	r3, r7, #7
   1d788:	781b      	ldrb	r3, [r3, #0]
   1d78a:	0018      	movs	r0, r3
   1d78c:	4b21      	ldr	r3, [pc, #132]	; (1d814 <sd_mmc_init_write_blocks+0xc8>)
   1d78e:	4798      	blx	r3
   1d790:	1e03      	subs	r3, r0, #0
   1d792:	d003      	beq.n	1d79c <sd_mmc_init_write_blocks+0x50>
		sd_mmc_deselect_slot();
   1d794:	4b20      	ldr	r3, [pc, #128]	; (1d818 <sd_mmc_init_write_blocks+0xcc>)
   1d796:	4798      	blx	r3
		return SD_MMC_ERR_WP;
   1d798:	2307      	movs	r3, #7
   1d79a:	e034      	b.n	1d806 <sd_mmc_init_write_blocks+0xba>
	}

	if (nb_block > 1) {
   1d79c:	1d3b      	adds	r3, r7, #4
   1d79e:	881b      	ldrh	r3, [r3, #0]
   1d7a0:	2b01      	cmp	r3, #1
   1d7a2:	d902      	bls.n	1d7aa <sd_mmc_init_write_blocks+0x5e>
		cmd = SDMMC_CMD25_WRITE_MULTIPLE_BLOCK;
   1d7a4:	4b1d      	ldr	r3, [pc, #116]	; (1d81c <sd_mmc_init_write_blocks+0xd0>)
   1d7a6:	617b      	str	r3, [r7, #20]
   1d7a8:	e001      	b.n	1d7ae <sd_mmc_init_write_blocks+0x62>
	} else {
		cmd = SDMMC_CMD24_WRITE_BLOCK;
   1d7aa:	4b1d      	ldr	r3, [pc, #116]	; (1d820 <sd_mmc_init_write_blocks+0xd4>)
   1d7ac:	617b      	str	r3, [r7, #20]
	}
	/*
	 * SDSC Card (CCS=0) uses byte unit address,
	 * SDHC and SDXC Cards (CCS=1) use block unit address (512 Bytes unit).
	 */
	if (sd_mmc_card->type & CARD_TYPE_HC) {
   1d7ae:	4b1d      	ldr	r3, [pc, #116]	; (1d824 <sd_mmc_init_write_blocks+0xd8>)
   1d7b0:	681b      	ldr	r3, [r3, #0]
   1d7b2:	7adb      	ldrb	r3, [r3, #11]
   1d7b4:	001a      	movs	r2, r3
   1d7b6:	2308      	movs	r3, #8
   1d7b8:	4013      	ands	r3, r2
   1d7ba:	d002      	beq.n	1d7c2 <sd_mmc_init_write_blocks+0x76>
		arg = start;
   1d7bc:	683b      	ldr	r3, [r7, #0]
   1d7be:	613b      	str	r3, [r7, #16]
   1d7c0:	e002      	b.n	1d7c8 <sd_mmc_init_write_blocks+0x7c>
	} else {
		arg = (start * SD_MMC_BLOCK_SIZE);
   1d7c2:	683b      	ldr	r3, [r7, #0]
   1d7c4:	025b      	lsls	r3, r3, #9
   1d7c6:	613b      	str	r3, [r7, #16]
	}
	if (!driver_adtc_start(cmd, arg, SD_MMC_BLOCK_SIZE, nb_block, true)) {
   1d7c8:	1d3b      	adds	r3, r7, #4
   1d7ca:	881c      	ldrh	r4, [r3, #0]
   1d7cc:	2380      	movs	r3, #128	; 0x80
   1d7ce:	009a      	lsls	r2, r3, #2
   1d7d0:	6939      	ldr	r1, [r7, #16]
   1d7d2:	6978      	ldr	r0, [r7, #20]
   1d7d4:	2301      	movs	r3, #1
   1d7d6:	9300      	str	r3, [sp, #0]
   1d7d8:	0023      	movs	r3, r4
   1d7da:	4c13      	ldr	r4, [pc, #76]	; (1d828 <sd_mmc_init_write_blocks+0xdc>)
   1d7dc:	47a0      	blx	r4
   1d7de:	0003      	movs	r3, r0
   1d7e0:	001a      	movs	r2, r3
   1d7e2:	2301      	movs	r3, #1
   1d7e4:	4053      	eors	r3, r2
   1d7e6:	b2db      	uxtb	r3, r3
   1d7e8:	2b00      	cmp	r3, #0
   1d7ea:	d003      	beq.n	1d7f4 <sd_mmc_init_write_blocks+0xa8>
		sd_mmc_deselect_slot();
   1d7ec:	4b0a      	ldr	r3, [pc, #40]	; (1d818 <sd_mmc_init_write_blocks+0xcc>)
   1d7ee:	4798      	blx	r3
		return SD_MMC_ERR_COMM;
   1d7f0:	2305      	movs	r3, #5
   1d7f2:	e008      	b.n	1d806 <sd_mmc_init_write_blocks+0xba>
					__func__, (int)SDMMC_CMD_GET_INDEX(cmd), resp);
			sd_mmc_deselect_slot();
			return SD_MMC_ERR_COMM;
		}
	}
	sd_mmc_nb_block_remaining = nb_block;
   1d7f4:	4b0d      	ldr	r3, [pc, #52]	; (1d82c <sd_mmc_init_write_blocks+0xe0>)
   1d7f6:	1d3a      	adds	r2, r7, #4
   1d7f8:	8812      	ldrh	r2, [r2, #0]
   1d7fa:	801a      	strh	r2, [r3, #0]
	sd_mmc_nb_block_to_tranfer = nb_block;
   1d7fc:	4b0c      	ldr	r3, [pc, #48]	; (1d830 <sd_mmc_init_write_blocks+0xe4>)
   1d7fe:	1d3a      	adds	r2, r7, #4
   1d800:	8812      	ldrh	r2, [r2, #0]
   1d802:	801a      	strh	r2, [r3, #0]
	return SD_MMC_OK;
   1d804:	2300      	movs	r3, #0
}
   1d806:	0018      	movs	r0, r3
   1d808:	46bd      	mov	sp, r7
   1d80a:	b007      	add	sp, #28
   1d80c:	bd90      	pop	{r4, r7, pc}
   1d80e:	46c0      	nop			; (mov r8, r8)
   1d810:	0001d051 	.word	0x0001d051
   1d814:	0001d559 	.word	0x0001d559
   1d818:	0001d14d 	.word	0x0001d14d
   1d81c:	00109119 	.word	0x00109119
   1d820:	00089118 	.word	0x00089118
   1d824:	20003ce0 	.word	0x20003ce0
   1d828:	0001e3cd 	.word	0x0001e3cd
   1d82c:	20003ce6 	.word	0x20003ce6
   1d830:	20003ce4 	.word	0x20003ce4

0001d834 <sd_mmc_start_write_blocks>:

sd_mmc_err_t sd_mmc_start_write_blocks(const void *src, uint16_t nb_block)
{
   1d834:	b580      	push	{r7, lr}
   1d836:	b082      	sub	sp, #8
   1d838:	af00      	add	r7, sp, #0
   1d83a:	6078      	str	r0, [r7, #4]
   1d83c:	000a      	movs	r2, r1
   1d83e:	1cbb      	adds	r3, r7, #2
   1d840:	801a      	strh	r2, [r3, #0]
	Assert(sd_mmc_nb_block_remaining >= nb_block);
	if (!driver_start_write_blocks(src, nb_block)) {
   1d842:	1cbb      	adds	r3, r7, #2
   1d844:	881a      	ldrh	r2, [r3, #0]
   1d846:	687b      	ldr	r3, [r7, #4]
   1d848:	0011      	movs	r1, r2
   1d84a:	0018      	movs	r0, r3
   1d84c:	4b0d      	ldr	r3, [pc, #52]	; (1d884 <sd_mmc_start_write_blocks+0x50>)
   1d84e:	4798      	blx	r3
   1d850:	0003      	movs	r3, r0
   1d852:	001a      	movs	r2, r3
   1d854:	2301      	movs	r3, #1
   1d856:	4053      	eors	r3, r2
   1d858:	b2db      	uxtb	r3, r3
   1d85a:	2b00      	cmp	r3, #0
   1d85c:	d004      	beq.n	1d868 <sd_mmc_start_write_blocks+0x34>
		sd_mmc_nb_block_remaining = 0;
   1d85e:	4b0a      	ldr	r3, [pc, #40]	; (1d888 <sd_mmc_start_write_blocks+0x54>)
   1d860:	2200      	movs	r2, #0
   1d862:	801a      	strh	r2, [r3, #0]
		return SD_MMC_ERR_COMM;
   1d864:	2305      	movs	r3, #5
   1d866:	e008      	b.n	1d87a <sd_mmc_start_write_blocks+0x46>
	}
	sd_mmc_nb_block_remaining -= nb_block;
   1d868:	4b07      	ldr	r3, [pc, #28]	; (1d888 <sd_mmc_start_write_blocks+0x54>)
   1d86a:	881a      	ldrh	r2, [r3, #0]
   1d86c:	1cbb      	adds	r3, r7, #2
   1d86e:	881b      	ldrh	r3, [r3, #0]
   1d870:	1ad3      	subs	r3, r2, r3
   1d872:	b29a      	uxth	r2, r3
   1d874:	4b04      	ldr	r3, [pc, #16]	; (1d888 <sd_mmc_start_write_blocks+0x54>)
   1d876:	801a      	strh	r2, [r3, #0]
	return SD_MMC_OK;
   1d878:	2300      	movs	r3, #0
}
   1d87a:	0018      	movs	r0, r3
   1d87c:	46bd      	mov	sp, r7
   1d87e:	b002      	add	sp, #8
   1d880:	bd80      	pop	{r7, pc}
   1d882:	46c0      	nop			; (mov r8, r8)
   1d884:	0001e74d 	.word	0x0001e74d
   1d888:	20003ce6 	.word	0x20003ce6

0001d88c <sd_mmc_wait_end_of_write_blocks>:

sd_mmc_err_t sd_mmc_wait_end_of_write_blocks(bool abort)
{
   1d88c:	b580      	push	{r7, lr}
   1d88e:	b082      	sub	sp, #8
   1d890:	af00      	add	r7, sp, #0
   1d892:	0002      	movs	r2, r0
   1d894:	1dfb      	adds	r3, r7, #7
   1d896:	701a      	strb	r2, [r3, #0]
	if (!driver_wait_end_of_write_blocks()) {
   1d898:	4b13      	ldr	r3, [pc, #76]	; (1d8e8 <sd_mmc_wait_end_of_write_blocks+0x5c>)
   1d89a:	4798      	blx	r3
   1d89c:	0003      	movs	r3, r0
   1d89e:	001a      	movs	r2, r3
   1d8a0:	2301      	movs	r3, #1
   1d8a2:	4053      	eors	r3, r2
   1d8a4:	b2db      	uxtb	r3, r3
   1d8a6:	2b00      	cmp	r3, #0
   1d8a8:	d001      	beq.n	1d8ae <sd_mmc_wait_end_of_write_blocks+0x22>
		return SD_MMC_ERR_COMM;
   1d8aa:	2305      	movs	r3, #5
   1d8ac:	e018      	b.n	1d8e0 <sd_mmc_wait_end_of_write_blocks+0x54>
	}
	if (abort) {
   1d8ae:	1dfb      	adds	r3, r7, #7
   1d8b0:	781b      	ldrb	r3, [r3, #0]
   1d8b2:	2b00      	cmp	r3, #0
   1d8b4:	d003      	beq.n	1d8be <sd_mmc_wait_end_of_write_blocks+0x32>
		sd_mmc_nb_block_remaining = 0;
   1d8b6:	4b0d      	ldr	r3, [pc, #52]	; (1d8ec <sd_mmc_wait_end_of_write_blocks+0x60>)
   1d8b8:	2200      	movs	r2, #0
   1d8ba:	801a      	strh	r2, [r3, #0]
   1d8bc:	e005      	b.n	1d8ca <sd_mmc_wait_end_of_write_blocks+0x3e>
	} else if (sd_mmc_nb_block_remaining) {
   1d8be:	4b0b      	ldr	r3, [pc, #44]	; (1d8ec <sd_mmc_wait_end_of_write_blocks+0x60>)
   1d8c0:	881b      	ldrh	r3, [r3, #0]
   1d8c2:	2b00      	cmp	r3, #0
   1d8c4:	d001      	beq.n	1d8ca <sd_mmc_wait_end_of_write_blocks+0x3e>
		return SD_MMC_OK;
   1d8c6:	2300      	movs	r3, #0
   1d8c8:	e00a      	b.n	1d8e0 <sd_mmc_wait_end_of_write_blocks+0x54>
	}

	// All blocks are transfered then stop write operation
	if (sd_mmc_nb_block_to_tranfer == 1) {
   1d8ca:	4b09      	ldr	r3, [pc, #36]	; (1d8f0 <sd_mmc_wait_end_of_write_blocks+0x64>)
   1d8cc:	881b      	ldrh	r3, [r3, #0]
   1d8ce:	2b01      	cmp	r3, #1
   1d8d0:	d103      	bne.n	1d8da <sd_mmc_wait_end_of_write_blocks+0x4e>
		// Single block transfer, then nothing to do
		sd_mmc_deselect_slot();
   1d8d2:	4b08      	ldr	r3, [pc, #32]	; (1d8f4 <sd_mmc_wait_end_of_write_blocks+0x68>)
   1d8d4:	4798      	blx	r3
		return SD_MMC_OK;
   1d8d6:	2300      	movs	r3, #0
   1d8d8:	e002      	b.n	1d8e0 <sd_mmc_wait_end_of_write_blocks+0x54>
		if (!driver_adtc_stop(SDMMC_CMD12_STOP_TRANSMISSION, 0)) {
			sd_mmc_deselect_slot();
			return SD_MMC_ERR_COMM;
		}
	}
	sd_mmc_deselect_slot();
   1d8da:	4b06      	ldr	r3, [pc, #24]	; (1d8f4 <sd_mmc_wait_end_of_write_blocks+0x68>)
   1d8dc:	4798      	blx	r3
	return SD_MMC_OK;
   1d8de:	2300      	movs	r3, #0
}
   1d8e0:	0018      	movs	r0, r3
   1d8e2:	46bd      	mov	sp, r7
   1d8e4:	b002      	add	sp, #8
   1d8e6:	bd80      	pop	{r7, pc}
   1d8e8:	0001e80d 	.word	0x0001e80d
   1d8ec:	20003ce6 	.word	0x20003ce6
   1d8f0:	20003ce4 	.word	0x20003ce4
   1d8f4:	0001d14d 	.word	0x0001d14d

0001d8f8 <sd_mmc_test_unit_ready>:
 */

static bool sd_mmc_ejected[2] = {false, false};

Ctrl_status sd_mmc_test_unit_ready(uint8_t slot)
{
   1d8f8:	b580      	push	{r7, lr}
   1d8fa:	b082      	sub	sp, #8
   1d8fc:	af00      	add	r7, sp, #0
   1d8fe:	0002      	movs	r2, r0
   1d900:	1dfb      	adds	r3, r7, #7
   1d902:	701a      	strb	r2, [r3, #0]
	switch (sd_mmc_check(slot))
   1d904:	1dfb      	adds	r3, r7, #7
   1d906:	781b      	ldrb	r3, [r3, #0]
   1d908:	0018      	movs	r0, r3
   1d90a:	4b16      	ldr	r3, [pc, #88]	; (1d964 <sd_mmc_test_unit_ready+0x6c>)
   1d90c:	4798      	blx	r3
   1d90e:	0003      	movs	r3, r0
   1d910:	2b01      	cmp	r3, #1
   1d912:	d019      	beq.n	1d948 <sd_mmc_test_unit_ready+0x50>
   1d914:	2b02      	cmp	r3, #2
   1d916:	d019      	beq.n	1d94c <sd_mmc_test_unit_ready+0x54>
   1d918:	2b00      	cmp	r3, #0
   1d91a:	d11e      	bne.n	1d95a <sd_mmc_test_unit_ready+0x62>
	{
	case SD_MMC_OK:
		if (sd_mmc_ejected[slot]) {
   1d91c:	1dfb      	adds	r3, r7, #7
   1d91e:	781b      	ldrb	r3, [r3, #0]
   1d920:	4a11      	ldr	r2, [pc, #68]	; (1d968 <sd_mmc_test_unit_ready+0x70>)
   1d922:	5cd3      	ldrb	r3, [r2, r3]
   1d924:	2b00      	cmp	r3, #0
   1d926:	d001      	beq.n	1d92c <sd_mmc_test_unit_ready+0x34>
			return CTRL_NO_PRESENT;
   1d928:	2302      	movs	r3, #2
   1d92a:	e017      	b.n	1d95c <sd_mmc_test_unit_ready+0x64>
		}
		if (sd_mmc_get_type(slot) & (CARD_TYPE_SD | CARD_TYPE_MMC)) {
   1d92c:	1dfb      	adds	r3, r7, #7
   1d92e:	781b      	ldrb	r3, [r3, #0]
   1d930:	0018      	movs	r0, r3
   1d932:	4b0e      	ldr	r3, [pc, #56]	; (1d96c <sd_mmc_test_unit_ready+0x74>)
   1d934:	4798      	blx	r3
   1d936:	0003      	movs	r3, r0
   1d938:	001a      	movs	r2, r3
   1d93a:	2303      	movs	r3, #3
   1d93c:	4013      	ands	r3, r2
   1d93e:	d001      	beq.n	1d944 <sd_mmc_test_unit_ready+0x4c>
			return CTRL_GOOD;
   1d940:	2300      	movs	r3, #0
   1d942:	e00b      	b.n	1d95c <sd_mmc_test_unit_ready+0x64>
		}
		// It is not a memory card
		return CTRL_NO_PRESENT;
   1d944:	2302      	movs	r3, #2
   1d946:	e009      	b.n	1d95c <sd_mmc_test_unit_ready+0x64>

	case SD_MMC_INIT_ONGOING:
		return CTRL_BUSY;
   1d948:	2303      	movs	r3, #3
   1d94a:	e007      	b.n	1d95c <sd_mmc_test_unit_ready+0x64>

	case SD_MMC_ERR_NO_CARD:
		sd_mmc_ejected[slot] = false;
   1d94c:	1dfb      	adds	r3, r7, #7
   1d94e:	781b      	ldrb	r3, [r3, #0]
   1d950:	4a05      	ldr	r2, [pc, #20]	; (1d968 <sd_mmc_test_unit_ready+0x70>)
   1d952:	2100      	movs	r1, #0
   1d954:	54d1      	strb	r1, [r2, r3]
		return CTRL_NO_PRESENT;
   1d956:	2302      	movs	r3, #2
   1d958:	e000      	b.n	1d95c <sd_mmc_test_unit_ready+0x64>

	default:
		return CTRL_FAIL;
   1d95a:	2301      	movs	r3, #1
	}
}
   1d95c:	0018      	movs	r0, r3
   1d95e:	46bd      	mov	sp, r7
   1d960:	b002      	add	sp, #8
   1d962:	bd80      	pop	{r7, pc}
   1d964:	0001d46d 	.word	0x0001d46d
   1d968:	20003ce8 	.word	0x20003ce8
   1d96c:	0001d4e1 	.word	0x0001d4e1

0001d970 <sd_mmc_test_unit_ready_0>:

Ctrl_status sd_mmc_test_unit_ready_0(void)
{
   1d970:	b580      	push	{r7, lr}
   1d972:	af00      	add	r7, sp, #0
	return sd_mmc_test_unit_ready(0);
   1d974:	2000      	movs	r0, #0
   1d976:	4b03      	ldr	r3, [pc, #12]	; (1d984 <sd_mmc_test_unit_ready_0+0x14>)
   1d978:	4798      	blx	r3
   1d97a:	0003      	movs	r3, r0
}
   1d97c:	0018      	movs	r0, r3
   1d97e:	46bd      	mov	sp, r7
   1d980:	bd80      	pop	{r7, pc}
   1d982:	46c0      	nop			; (mov r8, r8)
   1d984:	0001d8f9 	.word	0x0001d8f9

0001d988 <sd_mmc_read_capacity>:
{
	return sd_mmc_test_unit_ready(1);
}

Ctrl_status sd_mmc_read_capacity(uint8_t slot, uint32_t *nb_sector)
{
   1d988:	b580      	push	{r7, lr}
   1d98a:	b082      	sub	sp, #8
   1d98c:	af00      	add	r7, sp, #0
   1d98e:	0002      	movs	r2, r0
   1d990:	6039      	str	r1, [r7, #0]
   1d992:	1dfb      	adds	r3, r7, #7
   1d994:	701a      	strb	r2, [r3, #0]
	// Return last sector address (-1)
	*nb_sector = (sd_mmc_get_capacity(slot) * 2) - 1;
   1d996:	1dfb      	adds	r3, r7, #7
   1d998:	781b      	ldrb	r3, [r3, #0]
   1d99a:	0018      	movs	r0, r3
   1d99c:	4b08      	ldr	r3, [pc, #32]	; (1d9c0 <sd_mmc_read_capacity+0x38>)
   1d99e:	4798      	blx	r3
   1d9a0:	0003      	movs	r3, r0
   1d9a2:	005b      	lsls	r3, r3, #1
   1d9a4:	1e5a      	subs	r2, r3, #1
   1d9a6:	683b      	ldr	r3, [r7, #0]
   1d9a8:	601a      	str	r2, [r3, #0]
	return sd_mmc_test_unit_ready(slot);
   1d9aa:	1dfb      	adds	r3, r7, #7
   1d9ac:	781b      	ldrb	r3, [r3, #0]
   1d9ae:	0018      	movs	r0, r3
   1d9b0:	4b04      	ldr	r3, [pc, #16]	; (1d9c4 <sd_mmc_read_capacity+0x3c>)
   1d9b2:	4798      	blx	r3
   1d9b4:	0003      	movs	r3, r0
}
   1d9b6:	0018      	movs	r0, r3
   1d9b8:	46bd      	mov	sp, r7
   1d9ba:	b002      	add	sp, #8
   1d9bc:	bd80      	pop	{r7, pc}
   1d9be:	46c0      	nop			; (mov r8, r8)
   1d9c0:	0001d51d 	.word	0x0001d51d
   1d9c4:	0001d8f9 	.word	0x0001d8f9

0001d9c8 <sd_mmc_read_capacity_0>:

Ctrl_status sd_mmc_read_capacity_0(uint32_t *nb_sector)
{
   1d9c8:	b580      	push	{r7, lr}
   1d9ca:	b082      	sub	sp, #8
   1d9cc:	af00      	add	r7, sp, #0
   1d9ce:	6078      	str	r0, [r7, #4]
	return sd_mmc_read_capacity(0, nb_sector);
   1d9d0:	687b      	ldr	r3, [r7, #4]
   1d9d2:	0019      	movs	r1, r3
   1d9d4:	2000      	movs	r0, #0
   1d9d6:	4b03      	ldr	r3, [pc, #12]	; (1d9e4 <sd_mmc_read_capacity_0+0x1c>)
   1d9d8:	4798      	blx	r3
   1d9da:	0003      	movs	r3, r0
}
   1d9dc:	0018      	movs	r0, r3
   1d9de:	46bd      	mov	sp, r7
   1d9e0:	b002      	add	sp, #8
   1d9e2:	bd80      	pop	{r7, pc}
   1d9e4:	0001d989 	.word	0x0001d989

0001d9e8 <sd_mmc_unload>:
{
	return sd_mmc_read_capacity(1, nb_sector);
}

bool sd_mmc_unload(uint8_t slot, bool unload)
{
   1d9e8:	b580      	push	{r7, lr}
   1d9ea:	b082      	sub	sp, #8
   1d9ec:	af00      	add	r7, sp, #0
   1d9ee:	0002      	movs	r2, r0
   1d9f0:	1dfb      	adds	r3, r7, #7
   1d9f2:	701a      	strb	r2, [r3, #0]
   1d9f4:	1dbb      	adds	r3, r7, #6
   1d9f6:	1c0a      	adds	r2, r1, #0
   1d9f8:	701a      	strb	r2, [r3, #0]
	sd_mmc_ejected[slot] = unload;
   1d9fa:	1dfb      	adds	r3, r7, #7
   1d9fc:	781b      	ldrb	r3, [r3, #0]
   1d9fe:	4a04      	ldr	r2, [pc, #16]	; (1da10 <sd_mmc_unload+0x28>)
   1da00:	1db9      	adds	r1, r7, #6
   1da02:	7809      	ldrb	r1, [r1, #0]
   1da04:	54d1      	strb	r1, [r2, r3]
	return true;
   1da06:	2301      	movs	r3, #1
}
   1da08:	0018      	movs	r0, r3
   1da0a:	46bd      	mov	sp, r7
   1da0c:	b002      	add	sp, #8
   1da0e:	bd80      	pop	{r7, pc}
   1da10:	20003ce8 	.word	0x20003ce8

0001da14 <sd_mmc_unload_0>:

bool sd_mmc_unload_0(bool unload)
{
   1da14:	b580      	push	{r7, lr}
   1da16:	b082      	sub	sp, #8
   1da18:	af00      	add	r7, sp, #0
   1da1a:	0002      	movs	r2, r0
   1da1c:	1dfb      	adds	r3, r7, #7
   1da1e:	701a      	strb	r2, [r3, #0]
	return sd_mmc_unload(0, unload);
   1da20:	1dfb      	adds	r3, r7, #7
   1da22:	781b      	ldrb	r3, [r3, #0]
   1da24:	0019      	movs	r1, r3
   1da26:	2000      	movs	r0, #0
   1da28:	4b03      	ldr	r3, [pc, #12]	; (1da38 <sd_mmc_unload_0+0x24>)
   1da2a:	4798      	blx	r3
   1da2c:	0003      	movs	r3, r0
}
   1da2e:	0018      	movs	r0, r3
   1da30:	46bd      	mov	sp, r7
   1da32:	b002      	add	sp, #8
   1da34:	bd80      	pop	{r7, pc}
   1da36:	46c0      	nop			; (mov r8, r8)
   1da38:	0001d9e9 	.word	0x0001d9e9

0001da3c <sd_mmc_wr_protect>:
{
	return sd_mmc_unload(1, unload);
}

bool sd_mmc_wr_protect(uint8_t slot)
{
   1da3c:	b580      	push	{r7, lr}
   1da3e:	b082      	sub	sp, #8
   1da40:	af00      	add	r7, sp, #0
   1da42:	0002      	movs	r2, r0
   1da44:	1dfb      	adds	r3, r7, #7
   1da46:	701a      	strb	r2, [r3, #0]
	return sd_mmc_is_write_protected(slot);
   1da48:	1dfb      	adds	r3, r7, #7
   1da4a:	781b      	ldrb	r3, [r3, #0]
   1da4c:	0018      	movs	r0, r3
   1da4e:	4b03      	ldr	r3, [pc, #12]	; (1da5c <sd_mmc_wr_protect+0x20>)
   1da50:	4798      	blx	r3
   1da52:	0003      	movs	r3, r0
}
   1da54:	0018      	movs	r0, r3
   1da56:	46bd      	mov	sp, r7
   1da58:	b002      	add	sp, #8
   1da5a:	bd80      	pop	{r7, pc}
   1da5c:	0001d559 	.word	0x0001d559

0001da60 <sd_mmc_wr_protect_0>:

bool sd_mmc_wr_protect_0(void)
{
   1da60:	b580      	push	{r7, lr}
   1da62:	af00      	add	r7, sp, #0
	return sd_mmc_wr_protect(0);
   1da64:	2000      	movs	r0, #0
   1da66:	4b03      	ldr	r3, [pc, #12]	; (1da74 <sd_mmc_wr_protect_0+0x14>)
   1da68:	4798      	blx	r3
   1da6a:	0003      	movs	r3, r0
}
   1da6c:	0018      	movs	r0, r3
   1da6e:	46bd      	mov	sp, r7
   1da70:	bd80      	pop	{r7, pc}
   1da72:	46c0      	nop			; (mov r8, r8)
   1da74:	0001da3d 	.word	0x0001da3d

0001da78 <sd_mmc_removal>:
{
	return sd_mmc_wr_protect(1);
}

bool sd_mmc_removal(uint8_t slot)
{
   1da78:	b580      	push	{r7, lr}
   1da7a:	b082      	sub	sp, #8
   1da7c:	af00      	add	r7, sp, #0
   1da7e:	0002      	movs	r2, r0
   1da80:	1dfb      	adds	r3, r7, #7
   1da82:	701a      	strb	r2, [r3, #0]
	UNUSED(slot);
	return true;
   1da84:	2301      	movs	r3, #1
}
   1da86:	0018      	movs	r0, r3
   1da88:	46bd      	mov	sp, r7
   1da8a:	b002      	add	sp, #8
   1da8c:	bd80      	pop	{r7, pc}
	...

0001da90 <sd_mmc_removal_0>:

bool sd_mmc_removal_0(void)
{
   1da90:	b580      	push	{r7, lr}
   1da92:	af00      	add	r7, sp, #0
	return sd_mmc_removal(0);
   1da94:	2000      	movs	r0, #0
   1da96:	4b03      	ldr	r3, [pc, #12]	; (1daa4 <sd_mmc_removal_0+0x14>)
   1da98:	4798      	blx	r3
   1da9a:	0003      	movs	r3, r0
}
   1da9c:	0018      	movs	r0, r3
   1da9e:	46bd      	mov	sp, r7
   1daa0:	bd80      	pop	{r7, pc}
   1daa2:	46c0      	nop			; (mov r8, r8)
   1daa4:	0001da79 	.word	0x0001da79

0001daa8 <sd_mmc_mem_2_ram>:
/**
 * \name MEM <-> RAM Interface
 * @{
 */
Ctrl_status sd_mmc_mem_2_ram(uint8_t slot, uint32_t addr, void *ram)
{
   1daa8:	b580      	push	{r7, lr}
   1daaa:	b084      	sub	sp, #16
   1daac:	af00      	add	r7, sp, #0
   1daae:	60b9      	str	r1, [r7, #8]
   1dab0:	607a      	str	r2, [r7, #4]
   1dab2:	230f      	movs	r3, #15
   1dab4:	18fb      	adds	r3, r7, r3
   1dab6:	1c02      	adds	r2, r0, #0
   1dab8:	701a      	strb	r2, [r3, #0]
	switch (sd_mmc_init_read_blocks(slot, addr, 1)) {
   1daba:	68b9      	ldr	r1, [r7, #8]
   1dabc:	230f      	movs	r3, #15
   1dabe:	18fb      	adds	r3, r7, r3
   1dac0:	781b      	ldrb	r3, [r3, #0]
   1dac2:	2201      	movs	r2, #1
   1dac4:	0018      	movs	r0, r3
   1dac6:	4b10      	ldr	r3, [pc, #64]	; (1db08 <sd_mmc_mem_2_ram+0x60>)
   1dac8:	4798      	blx	r3
   1daca:	1e03      	subs	r3, r0, #0
   1dacc:	d005      	beq.n	1dada <sd_mmc_mem_2_ram+0x32>
   1dace:	2b02      	cmp	r3, #2
   1dad0:	d101      	bne.n	1dad6 <sd_mmc_mem_2_ram+0x2e>
	case SD_MMC_OK:
		break;
	case SD_MMC_ERR_NO_CARD:
		return CTRL_NO_PRESENT;
   1dad2:	2302      	movs	r3, #2
   1dad4:	e013      	b.n	1dafe <sd_mmc_mem_2_ram+0x56>
	default:
		return CTRL_FAIL;
   1dad6:	2301      	movs	r3, #1
   1dad8:	e011      	b.n	1dafe <sd_mmc_mem_2_ram+0x56>
		break;
   1dada:	46c0      	nop			; (mov r8, r8)
	}
	if (SD_MMC_OK != sd_mmc_start_read_blocks(ram, 1)) {
   1dadc:	687b      	ldr	r3, [r7, #4]
   1dade:	2101      	movs	r1, #1
   1dae0:	0018      	movs	r0, r3
   1dae2:	4b0a      	ldr	r3, [pc, #40]	; (1db0c <sd_mmc_mem_2_ram+0x64>)
   1dae4:	4798      	blx	r3
   1dae6:	1e03      	subs	r3, r0, #0
   1dae8:	d001      	beq.n	1daee <sd_mmc_mem_2_ram+0x46>
		return CTRL_FAIL;
   1daea:	2301      	movs	r3, #1
   1daec:	e007      	b.n	1dafe <sd_mmc_mem_2_ram+0x56>
	}
	if (SD_MMC_OK != sd_mmc_wait_end_of_read_blocks(false)) {
   1daee:	2000      	movs	r0, #0
   1daf0:	4b07      	ldr	r3, [pc, #28]	; (1db10 <sd_mmc_mem_2_ram+0x68>)
   1daf2:	4798      	blx	r3
   1daf4:	1e03      	subs	r3, r0, #0
   1daf6:	d001      	beq.n	1dafc <sd_mmc_mem_2_ram+0x54>
		return CTRL_FAIL;
   1daf8:	2301      	movs	r3, #1
   1dafa:	e000      	b.n	1dafe <sd_mmc_mem_2_ram+0x56>
	}
	return CTRL_GOOD;
   1dafc:	2300      	movs	r3, #0
}
   1dafe:	0018      	movs	r0, r3
   1db00:	46bd      	mov	sp, r7
   1db02:	b004      	add	sp, #16
   1db04:	bd80      	pop	{r7, pc}
   1db06:	46c0      	nop			; (mov r8, r8)
   1db08:	0001d571 	.word	0x0001d571
   1db0c:	0001d65d 	.word	0x0001d65d
   1db10:	0001d6b5 	.word	0x0001d6b5

0001db14 <sd_mmc_mem_2_ram_0>:

Ctrl_status sd_mmc_mem_2_ram_0(uint32_t addr, void *ram)
{
   1db14:	b580      	push	{r7, lr}
   1db16:	b082      	sub	sp, #8
   1db18:	af00      	add	r7, sp, #0
   1db1a:	6078      	str	r0, [r7, #4]
   1db1c:	6039      	str	r1, [r7, #0]
	return sd_mmc_mem_2_ram(0, addr, ram);
   1db1e:	683a      	ldr	r2, [r7, #0]
   1db20:	687b      	ldr	r3, [r7, #4]
   1db22:	0019      	movs	r1, r3
   1db24:	2000      	movs	r0, #0
   1db26:	4b03      	ldr	r3, [pc, #12]	; (1db34 <sd_mmc_mem_2_ram_0+0x20>)
   1db28:	4798      	blx	r3
   1db2a:	0003      	movs	r3, r0
}
   1db2c:	0018      	movs	r0, r3
   1db2e:	46bd      	mov	sp, r7
   1db30:	b002      	add	sp, #8
   1db32:	bd80      	pop	{r7, pc}
   1db34:	0001daa9 	.word	0x0001daa9

0001db38 <sd_mmc_ram_2_mem>:
{
	return sd_mmc_mem_2_ram(1, addr, ram);
}

Ctrl_status sd_mmc_ram_2_mem(uint8_t slot, uint32_t addr, const void *ram)
{
   1db38:	b580      	push	{r7, lr}
   1db3a:	b084      	sub	sp, #16
   1db3c:	af00      	add	r7, sp, #0
   1db3e:	60b9      	str	r1, [r7, #8]
   1db40:	607a      	str	r2, [r7, #4]
   1db42:	230f      	movs	r3, #15
   1db44:	18fb      	adds	r3, r7, r3
   1db46:	1c02      	adds	r2, r0, #0
   1db48:	701a      	strb	r2, [r3, #0]
	switch (sd_mmc_init_write_blocks(slot, addr, 1)) {
   1db4a:	68b9      	ldr	r1, [r7, #8]
   1db4c:	230f      	movs	r3, #15
   1db4e:	18fb      	adds	r3, r7, r3
   1db50:	781b      	ldrb	r3, [r3, #0]
   1db52:	2201      	movs	r2, #1
   1db54:	0018      	movs	r0, r3
   1db56:	4b10      	ldr	r3, [pc, #64]	; (1db98 <sd_mmc_ram_2_mem+0x60>)
   1db58:	4798      	blx	r3
   1db5a:	1e03      	subs	r3, r0, #0
   1db5c:	d005      	beq.n	1db6a <sd_mmc_ram_2_mem+0x32>
   1db5e:	2b02      	cmp	r3, #2
   1db60:	d101      	bne.n	1db66 <sd_mmc_ram_2_mem+0x2e>
	case SD_MMC_OK:
		break;
	case SD_MMC_ERR_NO_CARD:
		return CTRL_NO_PRESENT;
   1db62:	2302      	movs	r3, #2
   1db64:	e013      	b.n	1db8e <sd_mmc_ram_2_mem+0x56>
	default:
		return CTRL_FAIL;
   1db66:	2301      	movs	r3, #1
   1db68:	e011      	b.n	1db8e <sd_mmc_ram_2_mem+0x56>
		break;
   1db6a:	46c0      	nop			; (mov r8, r8)
	}
	if (SD_MMC_OK != sd_mmc_start_write_blocks(ram, 1)) {
   1db6c:	687b      	ldr	r3, [r7, #4]
   1db6e:	2101      	movs	r1, #1
   1db70:	0018      	movs	r0, r3
   1db72:	4b0a      	ldr	r3, [pc, #40]	; (1db9c <sd_mmc_ram_2_mem+0x64>)
   1db74:	4798      	blx	r3
   1db76:	1e03      	subs	r3, r0, #0
   1db78:	d001      	beq.n	1db7e <sd_mmc_ram_2_mem+0x46>
		return CTRL_FAIL;
   1db7a:	2301      	movs	r3, #1
   1db7c:	e007      	b.n	1db8e <sd_mmc_ram_2_mem+0x56>
	}
	if (SD_MMC_OK != sd_mmc_wait_end_of_write_blocks(false)) {
   1db7e:	2000      	movs	r0, #0
   1db80:	4b07      	ldr	r3, [pc, #28]	; (1dba0 <sd_mmc_ram_2_mem+0x68>)
   1db82:	4798      	blx	r3
   1db84:	1e03      	subs	r3, r0, #0
   1db86:	d001      	beq.n	1db8c <sd_mmc_ram_2_mem+0x54>
		return CTRL_FAIL;
   1db88:	2301      	movs	r3, #1
   1db8a:	e000      	b.n	1db8e <sd_mmc_ram_2_mem+0x56>
	}
	return CTRL_GOOD;
   1db8c:	2300      	movs	r3, #0
}
   1db8e:	0018      	movs	r0, r3
   1db90:	46bd      	mov	sp, r7
   1db92:	b004      	add	sp, #16
   1db94:	bd80      	pop	{r7, pc}
   1db96:	46c0      	nop			; (mov r8, r8)
   1db98:	0001d74d 	.word	0x0001d74d
   1db9c:	0001d835 	.word	0x0001d835
   1dba0:	0001d88d 	.word	0x0001d88d

0001dba4 <sd_mmc_ram_2_mem_0>:

Ctrl_status sd_mmc_ram_2_mem_0(uint32_t addr, const void *ram)
{
   1dba4:	b580      	push	{r7, lr}
   1dba6:	b082      	sub	sp, #8
   1dba8:	af00      	add	r7, sp, #0
   1dbaa:	6078      	str	r0, [r7, #4]
   1dbac:	6039      	str	r1, [r7, #0]
	return sd_mmc_ram_2_mem(0, addr, ram);
   1dbae:	683a      	ldr	r2, [r7, #0]
   1dbb0:	687b      	ldr	r3, [r7, #4]
   1dbb2:	0019      	movs	r1, r3
   1dbb4:	2000      	movs	r0, #0
   1dbb6:	4b03      	ldr	r3, [pc, #12]	; (1dbc4 <sd_mmc_ram_2_mem_0+0x20>)
   1dbb8:	4798      	blx	r3
   1dbba:	0003      	movs	r3, r0
}
   1dbbc:	0018      	movs	r0, r3
   1dbbe:	46bd      	mov	sp, r7
   1dbc0:	b002      	add	sp, #8
   1dbc2:	bd80      	pop	{r7, pc}
   1dbc4:	0001db39 	.word	0x0001db39

0001dbc8 <system_pinmux_get_group_from_gpio_pin>:
{
   1dbc8:	b580      	push	{r7, lr}
   1dbca:	b084      	sub	sp, #16
   1dbcc:	af00      	add	r7, sp, #0
   1dbce:	0002      	movs	r2, r0
   1dbd0:	1dfb      	adds	r3, r7, #7
   1dbd2:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
   1dbd4:	230f      	movs	r3, #15
   1dbd6:	18fb      	adds	r3, r7, r3
   1dbd8:	1dfa      	adds	r2, r7, #7
   1dbda:	7812      	ldrb	r2, [r2, #0]
   1dbdc:	09d2      	lsrs	r2, r2, #7
   1dbde:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
   1dbe0:	230e      	movs	r3, #14
   1dbe2:	18fb      	adds	r3, r7, r3
   1dbe4:	1dfa      	adds	r2, r7, #7
   1dbe6:	7812      	ldrb	r2, [r2, #0]
   1dbe8:	0952      	lsrs	r2, r2, #5
   1dbea:	701a      	strb	r2, [r3, #0]
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
   1dbec:	4b0d      	ldr	r3, [pc, #52]	; (1dc24 <system_pinmux_get_group_from_gpio_pin+0x5c>)
   1dbee:	60bb      	str	r3, [r7, #8]
	if (port_index < PORT_INST_NUM) {
   1dbf0:	230f      	movs	r3, #15
   1dbf2:	18fb      	adds	r3, r7, r3
   1dbf4:	781b      	ldrb	r3, [r3, #0]
   1dbf6:	2b00      	cmp	r3, #0
   1dbf8:	d10f      	bne.n	1dc1a <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
   1dbfa:	230f      	movs	r3, #15
   1dbfc:	18fb      	adds	r3, r7, r3
   1dbfe:	781b      	ldrb	r3, [r3, #0]
   1dc00:	009b      	lsls	r3, r3, #2
   1dc02:	2210      	movs	r2, #16
   1dc04:	4694      	mov	ip, r2
   1dc06:	44bc      	add	ip, r7
   1dc08:	4463      	add	r3, ip
   1dc0a:	3b08      	subs	r3, #8
   1dc0c:	681a      	ldr	r2, [r3, #0]
   1dc0e:	230e      	movs	r3, #14
   1dc10:	18fb      	adds	r3, r7, r3
   1dc12:	781b      	ldrb	r3, [r3, #0]
   1dc14:	01db      	lsls	r3, r3, #7
   1dc16:	18d3      	adds	r3, r2, r3
   1dc18:	e000      	b.n	1dc1c <system_pinmux_get_group_from_gpio_pin+0x54>
		return NULL;
   1dc1a:	2300      	movs	r3, #0
}
   1dc1c:	0018      	movs	r0, r3
   1dc1e:	46bd      	mov	sp, r7
   1dc20:	b004      	add	sp, #16
   1dc22:	bd80      	pop	{r7, pc}
   1dc24:	41004400 	.word	0x41004400

0001dc28 <system_interrupt_enable>:
{
   1dc28:	b580      	push	{r7, lr}
   1dc2a:	b082      	sub	sp, #8
   1dc2c:	af00      	add	r7, sp, #0
   1dc2e:	0002      	movs	r2, r0
   1dc30:	1dfb      	adds	r3, r7, #7
   1dc32:	701a      	strb	r2, [r3, #0]
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
   1dc34:	4b06      	ldr	r3, [pc, #24]	; (1dc50 <system_interrupt_enable+0x28>)
   1dc36:	1dfa      	adds	r2, r7, #7
   1dc38:	7812      	ldrb	r2, [r2, #0]
   1dc3a:	0011      	movs	r1, r2
   1dc3c:	221f      	movs	r2, #31
   1dc3e:	400a      	ands	r2, r1
   1dc40:	2101      	movs	r1, #1
   1dc42:	4091      	lsls	r1, r2
   1dc44:	000a      	movs	r2, r1
   1dc46:	601a      	str	r2, [r3, #0]
}
   1dc48:	46c0      	nop			; (mov r8, r8)
   1dc4a:	46bd      	mov	sp, r7
   1dc4c:	b002      	add	sp, #8
   1dc4e:	bd80      	pop	{r7, pc}
   1dc50:	e000e100 	.word	0xe000e100

0001dc54 <port_get_group_from_gpio_pin>:
{
   1dc54:	b580      	push	{r7, lr}
   1dc56:	b082      	sub	sp, #8
   1dc58:	af00      	add	r7, sp, #0
   1dc5a:	0002      	movs	r2, r0
   1dc5c:	1dfb      	adds	r3, r7, #7
   1dc5e:	701a      	strb	r2, [r3, #0]
	return system_pinmux_get_group_from_gpio_pin(gpio_pin);
   1dc60:	1dfb      	adds	r3, r7, #7
   1dc62:	781b      	ldrb	r3, [r3, #0]
   1dc64:	0018      	movs	r0, r3
   1dc66:	4b03      	ldr	r3, [pc, #12]	; (1dc74 <port_get_group_from_gpio_pin+0x20>)
   1dc68:	4798      	blx	r3
   1dc6a:	0003      	movs	r3, r0
}
   1dc6c:	0018      	movs	r0, r3
   1dc6e:	46bd      	mov	sp, r7
   1dc70:	b002      	add	sp, #8
   1dc72:	bd80      	pop	{r7, pc}
   1dc74:	0001dbc9 	.word	0x0001dbc9

0001dc78 <port_get_config_defaults>:
{
   1dc78:	b580      	push	{r7, lr}
   1dc7a:	b082      	sub	sp, #8
   1dc7c:	af00      	add	r7, sp, #0
   1dc7e:	6078      	str	r0, [r7, #4]
	config->direction  = PORT_PIN_DIR_INPUT;
   1dc80:	687b      	ldr	r3, [r7, #4]
   1dc82:	2200      	movs	r2, #0
   1dc84:	701a      	strb	r2, [r3, #0]
	config->input_pull = PORT_PIN_PULL_UP;
   1dc86:	687b      	ldr	r3, [r7, #4]
   1dc88:	2201      	movs	r2, #1
   1dc8a:	705a      	strb	r2, [r3, #1]
	config->powersave  = false;
   1dc8c:	687b      	ldr	r3, [r7, #4]
   1dc8e:	2200      	movs	r2, #0
   1dc90:	709a      	strb	r2, [r3, #2]
}
   1dc92:	46c0      	nop			; (mov r8, r8)
   1dc94:	46bd      	mov	sp, r7
   1dc96:	b002      	add	sp, #8
   1dc98:	bd80      	pop	{r7, pc}
	...

0001dc9c <port_pin_set_output_level>:
{
   1dc9c:	b580      	push	{r7, lr}
   1dc9e:	b084      	sub	sp, #16
   1dca0:	af00      	add	r7, sp, #0
   1dca2:	0002      	movs	r2, r0
   1dca4:	1dfb      	adds	r3, r7, #7
   1dca6:	701a      	strb	r2, [r3, #0]
   1dca8:	1dbb      	adds	r3, r7, #6
   1dcaa:	1c0a      	adds	r2, r1, #0
   1dcac:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
   1dcae:	1dfb      	adds	r3, r7, #7
   1dcb0:	781b      	ldrb	r3, [r3, #0]
   1dcb2:	0018      	movs	r0, r3
   1dcb4:	4b0d      	ldr	r3, [pc, #52]	; (1dcec <port_pin_set_output_level+0x50>)
   1dcb6:	4798      	blx	r3
   1dcb8:	0003      	movs	r3, r0
   1dcba:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
   1dcbc:	1dfb      	adds	r3, r7, #7
   1dcbe:	781b      	ldrb	r3, [r3, #0]
   1dcc0:	221f      	movs	r2, #31
   1dcc2:	4013      	ands	r3, r2
   1dcc4:	2201      	movs	r2, #1
   1dcc6:	409a      	lsls	r2, r3
   1dcc8:	0013      	movs	r3, r2
   1dcca:	60bb      	str	r3, [r7, #8]
	if (level) {
   1dccc:	1dbb      	adds	r3, r7, #6
   1dcce:	781b      	ldrb	r3, [r3, #0]
   1dcd0:	2b00      	cmp	r3, #0
   1dcd2:	d003      	beq.n	1dcdc <port_pin_set_output_level+0x40>
		port_base->OUTSET.reg = pin_mask;
   1dcd4:	68fb      	ldr	r3, [r7, #12]
   1dcd6:	68ba      	ldr	r2, [r7, #8]
   1dcd8:	619a      	str	r2, [r3, #24]
}
   1dcda:	e002      	b.n	1dce2 <port_pin_set_output_level+0x46>
		port_base->OUTCLR.reg = pin_mask;
   1dcdc:	68fb      	ldr	r3, [r7, #12]
   1dcde:	68ba      	ldr	r2, [r7, #8]
   1dce0:	615a      	str	r2, [r3, #20]
}
   1dce2:	46c0      	nop			; (mov r8, r8)
   1dce4:	46bd      	mov	sp, r7
   1dce6:	b004      	add	sp, #16
   1dce8:	bd80      	pop	{r7, pc}
   1dcea:	46c0      	nop			; (mov r8, r8)
   1dcec:	0001dc55 	.word	0x0001dc55

0001dcf0 <spi_is_syncing>:
 * \retval false  Module synchronization is not ongoing
 *
 */
static inline bool spi_is_syncing(
		struct spi_module *const module)
{
   1dcf0:	b580      	push	{r7, lr}
   1dcf2:	b084      	sub	sp, #16
   1dcf4:	af00      	add	r7, sp, #0
   1dcf6:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
   1dcf8:	687b      	ldr	r3, [r7, #4]
   1dcfa:	681b      	ldr	r3, [r3, #0]
   1dcfc:	60fb      	str	r3, [r7, #12]

#  ifdef FEATURE_SPI_SYNC_SCHEME_VERSION_2
	/* Return synchronization status */
	return (spi_module->SYNCBUSY.reg);
   1dcfe:	68fb      	ldr	r3, [r7, #12]
   1dd00:	69db      	ldr	r3, [r3, #28]
   1dd02:	1e5a      	subs	r2, r3, #1
   1dd04:	4193      	sbcs	r3, r2
   1dd06:	b2db      	uxtb	r3, r3
#  else
	/* Return synchronization status */
	return (spi_module->STATUS.reg & SERCOM_SPI_STATUS_SYNCBUSY);
#  endif
}
   1dd08:	0018      	movs	r0, r3
   1dd0a:	46bd      	mov	sp, r7
   1dd0c:	b004      	add	sp, #16
   1dd0e:	bd80      	pop	{r7, pc}

0001dd10 <spi_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void spi_get_config_defaults(
		struct spi_config *const config)
{
   1dd10:	b580      	push	{r7, lr}
   1dd12:	b082      	sub	sp, #8
   1dd14:	af00      	add	r7, sp, #0
   1dd16:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mode             = SPI_MODE_MASTER;
   1dd18:	687b      	ldr	r3, [r7, #4]
   1dd1a:	2201      	movs	r2, #1
   1dd1c:	701a      	strb	r2, [r3, #0]
	config->data_order       = SPI_DATA_ORDER_MSB;
   1dd1e:	687b      	ldr	r3, [r7, #4]
   1dd20:	2200      	movs	r2, #0
   1dd22:	605a      	str	r2, [r3, #4]
	config->transfer_mode    = SPI_TRANSFER_MODE_0;
   1dd24:	687b      	ldr	r3, [r7, #4]
   1dd26:	2200      	movs	r2, #0
   1dd28:	609a      	str	r2, [r3, #8]
	config->mux_setting      = SPI_SIGNAL_MUX_SETTING_D;
   1dd2a:	687b      	ldr	r3, [r7, #4]
   1dd2c:	22c0      	movs	r2, #192	; 0xc0
   1dd2e:	0392      	lsls	r2, r2, #14
   1dd30:	60da      	str	r2, [r3, #12]
	config->character_size   = SPI_CHARACTER_SIZE_8BIT;
   1dd32:	687b      	ldr	r3, [r7, #4]
   1dd34:	2200      	movs	r2, #0
   1dd36:	741a      	strb	r2, [r3, #16]
	config->run_in_standby   = false;
   1dd38:	687b      	ldr	r3, [r7, #4]
   1dd3a:	2200      	movs	r2, #0
   1dd3c:	745a      	strb	r2, [r3, #17]
	config->receiver_enable  = true;
   1dd3e:	687b      	ldr	r3, [r7, #4]
   1dd40:	2201      	movs	r2, #1
   1dd42:	749a      	strb	r2, [r3, #18]
#  ifdef FEATURE_SPI_SLAVE_SELECT_LOW_DETECT
	config->select_slave_low_detect_enable= true;
   1dd44:	687b      	ldr	r3, [r7, #4]
   1dd46:	2201      	movs	r2, #1
   1dd48:	74da      	strb	r2, [r3, #19]
#  endif
#  ifdef FEATURE_SPI_HARDWARE_SLAVE_SELECT
	config->master_slave_select_enable= false;
   1dd4a:	687b      	ldr	r3, [r7, #4]
   1dd4c:	2200      	movs	r2, #0
   1dd4e:	751a      	strb	r2, [r3, #20]
#  endif
	config->generator_source = GCLK_GENERATOR_0;
   1dd50:	687b      	ldr	r3, [r7, #4]
   1dd52:	2224      	movs	r2, #36	; 0x24
   1dd54:	2100      	movs	r1, #0
   1dd56:	5499      	strb	r1, [r3, r2]

	/* Clear mode specific config */
	memset(&(config->mode_specific), 0, sizeof(config->mode_specific));
   1dd58:	687b      	ldr	r3, [r7, #4]
   1dd5a:	3318      	adds	r3, #24
   1dd5c:	220c      	movs	r2, #12
   1dd5e:	2100      	movs	r1, #0
   1dd60:	0018      	movs	r0, r3
   1dd62:	4b0a      	ldr	r3, [pc, #40]	; (1dd8c <spi_get_config_defaults+0x7c>)
   1dd64:	4798      	blx	r3

	/* Master config defaults */
	config->mode_specific.master.baudrate = 100000;
   1dd66:	687b      	ldr	r3, [r7, #4]
   1dd68:	4a09      	ldr	r2, [pc, #36]	; (1dd90 <spi_get_config_defaults+0x80>)
   1dd6a:	619a      	str	r2, [r3, #24]

	/* pinmux config defaults */
	config->pinmux_pad0 = PINMUX_DEFAULT;
   1dd6c:	687b      	ldr	r3, [r7, #4]
   1dd6e:	2200      	movs	r2, #0
   1dd70:	629a      	str	r2, [r3, #40]	; 0x28
	config->pinmux_pad1 = PINMUX_DEFAULT;
   1dd72:	687b      	ldr	r3, [r7, #4]
   1dd74:	2200      	movs	r2, #0
   1dd76:	62da      	str	r2, [r3, #44]	; 0x2c
	config->pinmux_pad2 = PINMUX_DEFAULT;
   1dd78:	687b      	ldr	r3, [r7, #4]
   1dd7a:	2200      	movs	r2, #0
   1dd7c:	631a      	str	r2, [r3, #48]	; 0x30
	config->pinmux_pad3 = PINMUX_DEFAULT;
   1dd7e:	687b      	ldr	r3, [r7, #4]
   1dd80:	2200      	movs	r2, #0
   1dd82:	635a      	str	r2, [r3, #52]	; 0x34

};
   1dd84:	46c0      	nop			; (mov r8, r8)
   1dd86:	46bd      	mov	sp, r7
   1dd88:	b002      	add	sp, #8
   1dd8a:	bd80      	pop	{r7, pc}
   1dd8c:	00033117 	.word	0x00033117
   1dd90:	000186a0 	.word	0x000186a0

0001dd94 <spi_slave_inst_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void spi_slave_inst_get_config_defaults(
		struct spi_slave_inst_config *const config)
{
   1dd94:	b580      	push	{r7, lr}
   1dd96:	b082      	sub	sp, #8
   1dd98:	af00      	add	r7, sp, #0
   1dd9a:	6078      	str	r0, [r7, #4]
	Assert(config);

	config->ss_pin          = 10;
   1dd9c:	687b      	ldr	r3, [r7, #4]
   1dd9e:	220a      	movs	r2, #10
   1dda0:	701a      	strb	r2, [r3, #0]
	config->address_enabled = false;
   1dda2:	687b      	ldr	r3, [r7, #4]
   1dda4:	2200      	movs	r2, #0
   1dda6:	705a      	strb	r2, [r3, #1]
	config->address         = 0;
   1dda8:	687b      	ldr	r3, [r7, #4]
   1ddaa:	2200      	movs	r2, #0
   1ddac:	709a      	strb	r2, [r3, #2]
}
   1ddae:	46c0      	nop			; (mov r8, r8)
   1ddb0:	46bd      	mov	sp, r7
   1ddb2:	b002      	add	sp, #8
   1ddb4:	bd80      	pop	{r7, pc}
	...

0001ddb8 <spi_attach_slave>:
 *
 */
static inline void spi_attach_slave(
		struct spi_slave_inst *const slave,
		const struct spi_slave_inst_config *const config)
{
   1ddb8:	b580      	push	{r7, lr}
   1ddba:	b084      	sub	sp, #16
   1ddbc:	af00      	add	r7, sp, #0
   1ddbe:	6078      	str	r0, [r7, #4]
   1ddc0:	6039      	str	r1, [r7, #0]
	Assert(slave);
	Assert(config);

	slave->ss_pin          = config->ss_pin;
   1ddc2:	683b      	ldr	r3, [r7, #0]
   1ddc4:	781a      	ldrb	r2, [r3, #0]
   1ddc6:	687b      	ldr	r3, [r7, #4]
   1ddc8:	701a      	strb	r2, [r3, #0]
	slave->address_enabled = config->address_enabled;
   1ddca:	683b      	ldr	r3, [r7, #0]
   1ddcc:	785a      	ldrb	r2, [r3, #1]
   1ddce:	687b      	ldr	r3, [r7, #4]
   1ddd0:	705a      	strb	r2, [r3, #1]
	slave->address         = config->address;
   1ddd2:	683b      	ldr	r3, [r7, #0]
   1ddd4:	789a      	ldrb	r2, [r3, #2]
   1ddd6:	687b      	ldr	r3, [r7, #4]
   1ddd8:	709a      	strb	r2, [r3, #2]

	/* Get default config for pin */
	struct port_config pin_conf;
	port_get_config_defaults(&pin_conf);
   1ddda:	230c      	movs	r3, #12
   1dddc:	18fb      	adds	r3, r7, r3
   1ddde:	0018      	movs	r0, r3
   1dde0:	4b0b      	ldr	r3, [pc, #44]	; (1de10 <spi_attach_slave+0x58>)
   1dde2:	4798      	blx	r3

	/* Edit config to set the pin as output */
	pin_conf.direction = PORT_PIN_DIR_OUTPUT;
   1dde4:	230c      	movs	r3, #12
   1dde6:	18fb      	adds	r3, r7, r3
   1dde8:	2201      	movs	r2, #1
   1ddea:	701a      	strb	r2, [r3, #0]

	/* Set config on Slave Select pin */
	port_pin_set_config(slave->ss_pin, &pin_conf);
   1ddec:	687b      	ldr	r3, [r7, #4]
   1ddee:	781b      	ldrb	r3, [r3, #0]
   1ddf0:	220c      	movs	r2, #12
   1ddf2:	18ba      	adds	r2, r7, r2
   1ddf4:	0011      	movs	r1, r2
   1ddf6:	0018      	movs	r0, r3
   1ddf8:	4b06      	ldr	r3, [pc, #24]	; (1de14 <spi_attach_slave+0x5c>)
   1ddfa:	4798      	blx	r3
	port_pin_set_output_level(slave->ss_pin, true);
   1ddfc:	687b      	ldr	r3, [r7, #4]
   1ddfe:	781b      	ldrb	r3, [r3, #0]
   1de00:	2101      	movs	r1, #1
   1de02:	0018      	movs	r0, r3
   1de04:	4b04      	ldr	r3, [pc, #16]	; (1de18 <spi_attach_slave+0x60>)
   1de06:	4798      	blx	r3
}
   1de08:	46c0      	nop			; (mov r8, r8)
   1de0a:	46bd      	mov	sp, r7
   1de0c:	b004      	add	sp, #16
   1de0e:	bd80      	pop	{r7, pc}
   1de10:	0001dc79 	.word	0x0001dc79
   1de14:	000251f1 	.word	0x000251f1
   1de18:	0001dc9d 	.word	0x0001dc9d

0001de1c <spi_enable>:
 *
 * \param[in,out] module  Pointer to the software instance struct
 */
static inline void spi_enable(
		struct spi_module *const module)
{
   1de1c:	b580      	push	{r7, lr}
   1de1e:	b084      	sub	sp, #16
   1de20:	af00      	add	r7, sp, #0
   1de22:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
   1de24:	687b      	ldr	r3, [r7, #4]
   1de26:	681b      	ldr	r3, [r3, #0]
   1de28:	60fb      	str	r3, [r7, #12]

#  if SPI_CALLBACK_MODE == true
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
   1de2a:	687b      	ldr	r3, [r7, #4]
   1de2c:	681b      	ldr	r3, [r3, #0]
   1de2e:	0018      	movs	r0, r3
   1de30:	4b0b      	ldr	r3, [pc, #44]	; (1de60 <spi_enable+0x44>)
   1de32:	4798      	blx	r3
   1de34:	0003      	movs	r3, r0
   1de36:	0018      	movs	r0, r3
   1de38:	4b0a      	ldr	r3, [pc, #40]	; (1de64 <spi_enable+0x48>)
   1de3a:	4798      	blx	r3
#  endif

	while (spi_is_syncing(module)) {
   1de3c:	46c0      	nop			; (mov r8, r8)
   1de3e:	687b      	ldr	r3, [r7, #4]
   1de40:	0018      	movs	r0, r3
   1de42:	4b09      	ldr	r3, [pc, #36]	; (1de68 <spi_enable+0x4c>)
   1de44:	4798      	blx	r3
   1de46:	1e03      	subs	r3, r0, #0
   1de48:	d1f9      	bne.n	1de3e <spi_enable+0x22>
		/* Wait until the synchronization is complete */
	}

	/* Enable SPI */
	spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_ENABLE;
   1de4a:	68fb      	ldr	r3, [r7, #12]
   1de4c:	681b      	ldr	r3, [r3, #0]
   1de4e:	2202      	movs	r2, #2
   1de50:	431a      	orrs	r2, r3
   1de52:	68fb      	ldr	r3, [r7, #12]
   1de54:	601a      	str	r2, [r3, #0]
}
   1de56:	46c0      	nop			; (mov r8, r8)
   1de58:	46bd      	mov	sp, r7
   1de5a:	b004      	add	sp, #16
   1de5c:	bd80      	pop	{r7, pc}
   1de5e:	46c0      	nop			; (mov r8, r8)
   1de60:	00025ec1 	.word	0x00025ec1
   1de64:	0001dc29 	.word	0x0001dc29
   1de68:	0001dcf1 	.word	0x0001dcf1

0001de6c <sd_mmc_spi_crc7>:
 * \param size    Size of buffer data
 *
 * \return CRC7 computed
 */
static uint8_t sd_mmc_spi_crc7(uint8_t * buf, uint8_t size)
{
   1de6c:	b580      	push	{r7, lr}
   1de6e:	b084      	sub	sp, #16
   1de70:	af00      	add	r7, sp, #0
   1de72:	6078      	str	r0, [r7, #4]
   1de74:	000a      	movs	r2, r1
   1de76:	1cfb      	adds	r3, r7, #3
   1de78:	701a      	strb	r2, [r3, #0]
	uint8_t crc, value, i;

	crc = 0;
   1de7a:	230f      	movs	r3, #15
   1de7c:	18fb      	adds	r3, r7, r3
   1de7e:	2200      	movs	r2, #0
   1de80:	701a      	strb	r2, [r3, #0]
	while (size--) {
   1de82:	e038      	b.n	1def6 <sd_mmc_spi_crc7+0x8a>
		value = *buf++;
   1de84:	687b      	ldr	r3, [r7, #4]
   1de86:	1c5a      	adds	r2, r3, #1
   1de88:	607a      	str	r2, [r7, #4]
   1de8a:	220e      	movs	r2, #14
   1de8c:	18ba      	adds	r2, r7, r2
   1de8e:	781b      	ldrb	r3, [r3, #0]
   1de90:	7013      	strb	r3, [r2, #0]
		for (i = 0; i < 8; i++) {
   1de92:	230d      	movs	r3, #13
   1de94:	18fb      	adds	r3, r7, r3
   1de96:	2200      	movs	r2, #0
   1de98:	701a      	strb	r2, [r3, #0]
   1de9a:	e027      	b.n	1deec <sd_mmc_spi_crc7+0x80>
			crc <<= 1;
   1de9c:	230f      	movs	r3, #15
   1de9e:	18fa      	adds	r2, r7, r3
   1dea0:	230f      	movs	r3, #15
   1dea2:	18fb      	adds	r3, r7, r3
   1dea4:	781b      	ldrb	r3, [r3, #0]
   1dea6:	18db      	adds	r3, r3, r3
   1dea8:	7013      	strb	r3, [r2, #0]
			if ((value & 0x80) ^ (crc & 0x80)) {
   1deaa:	230e      	movs	r3, #14
   1deac:	18fa      	adds	r2, r7, r3
   1deae:	230f      	movs	r3, #15
   1deb0:	18fb      	adds	r3, r7, r3
   1deb2:	7812      	ldrb	r2, [r2, #0]
   1deb4:	781b      	ldrb	r3, [r3, #0]
   1deb6:	4053      	eors	r3, r2
   1deb8:	b2db      	uxtb	r3, r3
   1deba:	b25b      	sxtb	r3, r3
   1debc:	2b00      	cmp	r3, #0
   1debe:	da07      	bge.n	1ded0 <sd_mmc_spi_crc7+0x64>
				crc ^= 0x09;
   1dec0:	230f      	movs	r3, #15
   1dec2:	18fb      	adds	r3, r7, r3
   1dec4:	220f      	movs	r2, #15
   1dec6:	18ba      	adds	r2, r7, r2
   1dec8:	7812      	ldrb	r2, [r2, #0]
   1deca:	2109      	movs	r1, #9
   1decc:	404a      	eors	r2, r1
   1dece:	701a      	strb	r2, [r3, #0]
			}
			value <<= 1;
   1ded0:	230e      	movs	r3, #14
   1ded2:	18fa      	adds	r2, r7, r3
   1ded4:	230e      	movs	r3, #14
   1ded6:	18fb      	adds	r3, r7, r3
   1ded8:	781b      	ldrb	r3, [r3, #0]
   1deda:	18db      	adds	r3, r3, r3
   1dedc:	7013      	strb	r3, [r2, #0]
		for (i = 0; i < 8; i++) {
   1dede:	230d      	movs	r3, #13
   1dee0:	18fb      	adds	r3, r7, r3
   1dee2:	781a      	ldrb	r2, [r3, #0]
   1dee4:	230d      	movs	r3, #13
   1dee6:	18fb      	adds	r3, r7, r3
   1dee8:	3201      	adds	r2, #1
   1deea:	701a      	strb	r2, [r3, #0]
   1deec:	230d      	movs	r3, #13
   1deee:	18fb      	adds	r3, r7, r3
   1def0:	781b      	ldrb	r3, [r3, #0]
   1def2:	2b07      	cmp	r3, #7
   1def4:	d9d2      	bls.n	1de9c <sd_mmc_spi_crc7+0x30>
	while (size--) {
   1def6:	1cfb      	adds	r3, r7, #3
   1def8:	781b      	ldrb	r3, [r3, #0]
   1defa:	1cfa      	adds	r2, r7, #3
   1defc:	1e59      	subs	r1, r3, #1
   1defe:	7011      	strb	r1, [r2, #0]
   1df00:	2b00      	cmp	r3, #0
   1df02:	d1bf      	bne.n	1de84 <sd_mmc_spi_crc7+0x18>
		}
	}
	crc = (crc << 1) | 1;
   1df04:	230f      	movs	r3, #15
   1df06:	18fb      	adds	r3, r7, r3
   1df08:	781b      	ldrb	r3, [r3, #0]
   1df0a:	005b      	lsls	r3, r3, #1
   1df0c:	b25b      	sxtb	r3, r3
   1df0e:	2201      	movs	r2, #1
   1df10:	4313      	orrs	r3, r2
   1df12:	b25a      	sxtb	r2, r3
   1df14:	230f      	movs	r3, #15
   1df16:	18fb      	adds	r3, r7, r3
   1df18:	701a      	strb	r2, [r3, #0]
	return crc;
   1df1a:	230f      	movs	r3, #15
   1df1c:	18fb      	adds	r3, r7, r3
   1df1e:	781b      	ldrb	r3, [r3, #0]
}
   1df20:	0018      	movs	r0, r3
   1df22:	46bd      	mov	sp, r7
   1df24:	b004      	add	sp, #16
   1df26:	bd80      	pop	{r7, pc}

0001df28 <sd_mmc_spi_wait_busy>:
 * \brief Wait the end of busy on DAT0 line
 *
 * \return true if success, otherwise false
 */
static bool sd_mmc_spi_wait_busy(void)
{
   1df28:	b590      	push	{r4, r7, lr}
   1df2a:	b083      	sub	sp, #12
   1df2c:	af00      	add	r7, sp, #0
	uint8_t line = 0xFF;
   1df2e:	1c7b      	adds	r3, r7, #1
   1df30:	22ff      	movs	r2, #255	; 0xff
   1df32:	701a      	strb	r2, [r3, #0]
	uint16_t dummy = 0xFF;
   1df34:	1cbb      	adds	r3, r7, #2
   1df36:	22ff      	movs	r2, #255	; 0xff
   1df38:	801a      	strh	r2, [r3, #0]

	/* Delay before check busy
	 * Nbr timing minimum = 8 cylces
	 */
	spi_read_buffer_wait(&sd_mmc_master, &line, 1,
   1df3a:	1cbb      	adds	r3, r7, #2
   1df3c:	881b      	ldrh	r3, [r3, #0]
   1df3e:	1c79      	adds	r1, r7, #1
   1df40:	4811      	ldr	r0, [pc, #68]	; (1df88 <sd_mmc_spi_wait_busy+0x60>)
   1df42:	2201      	movs	r2, #1
   1df44:	4c11      	ldr	r4, [pc, #68]	; (1df8c <sd_mmc_spi_wait_busy+0x64>)
   1df46:	47a0      	blx	r4
	/* Wait end of busy signal
	 * Nec timing: 0 to unlimited
	 * However a timeout is used.
	 * 200 000 * 8 cycles
	 */
	uint32_t nec_timeout = 200000;
   1df48:	4b11      	ldr	r3, [pc, #68]	; (1df90 <sd_mmc_spi_wait_busy+0x68>)
   1df4a:	607b      	str	r3, [r7, #4]
	spi_read_buffer_wait(&sd_mmc_master, &line, 1,
   1df4c:	1cbb      	adds	r3, r7, #2
   1df4e:	881b      	ldrh	r3, [r3, #0]
   1df50:	1c79      	adds	r1, r7, #1
   1df52:	480d      	ldr	r0, [pc, #52]	; (1df88 <sd_mmc_spi_wait_busy+0x60>)
   1df54:	2201      	movs	r2, #1
   1df56:	4c0d      	ldr	r4, [pc, #52]	; (1df8c <sd_mmc_spi_wait_busy+0x64>)
   1df58:	47a0      	blx	r4
			dummy);
	do {
		spi_read_buffer_wait(&sd_mmc_master, &line, 1,
   1df5a:	1cbb      	adds	r3, r7, #2
   1df5c:	881b      	ldrh	r3, [r3, #0]
   1df5e:	1c79      	adds	r1, r7, #1
   1df60:	4809      	ldr	r0, [pc, #36]	; (1df88 <sd_mmc_spi_wait_busy+0x60>)
   1df62:	2201      	movs	r2, #1
   1df64:	4c09      	ldr	r4, [pc, #36]	; (1df8c <sd_mmc_spi_wait_busy+0x64>)
   1df66:	47a0      	blx	r4
			dummy);
		if (!(nec_timeout--)) {
   1df68:	687b      	ldr	r3, [r7, #4]
   1df6a:	1e5a      	subs	r2, r3, #1
   1df6c:	607a      	str	r2, [r7, #4]
   1df6e:	2b00      	cmp	r3, #0
   1df70:	d101      	bne.n	1df76 <sd_mmc_spi_wait_busy+0x4e>
			return false;
   1df72:	2300      	movs	r3, #0
   1df74:	e004      	b.n	1df80 <sd_mmc_spi_wait_busy+0x58>
		}
	} while (line != 0xFF);
   1df76:	1c7b      	adds	r3, r7, #1
   1df78:	781b      	ldrb	r3, [r3, #0]
   1df7a:	2bff      	cmp	r3, #255	; 0xff
   1df7c:	d1ed      	bne.n	1df5a <sd_mmc_spi_wait_busy+0x32>
	return true;
   1df7e:	2301      	movs	r3, #1
}
   1df80:	0018      	movs	r0, r3
   1df82:	46bd      	mov	sp, r7
   1df84:	b003      	add	sp, #12
   1df86:	bd90      	pop	{r4, r7, pc}
   1df88:	20003cec 	.word	0x20003cec
   1df8c:	00026801 	.word	0x00026801
   1df90:	00030d40 	.word	0x00030d40

0001df94 <sd_mmc_spi_start_read_block>:
 *
 * \return true if success, otherwise false
 *         with a update of \ref sd_mmc_spi_err.
 */
static bool sd_mmc_spi_start_read_block(void)
{
   1df94:	b590      	push	{r4, r7, lr}
   1df96:	b083      	sub	sp, #12
   1df98:	af00      	add	r7, sp, #0
	uint32_t i;
	uint8_t token;
	uint16_t dummy = 0xFF;
   1df9a:	1cbb      	adds	r3, r7, #2
   1df9c:	22ff      	movs	r2, #255	; 0xff
   1df9e:	801a      	strh	r2, [r3, #0]
	 * Compute the maximum timeout:
	 * Frequency maximum = 25MHz
	 * 1 byte = 8 cycles
	 * 100ms = 312500 x spi_read_buffer_wait() maximum
	 */
	token = 0;
   1dfa0:	1c7b      	adds	r3, r7, #1
   1dfa2:	2200      	movs	r2, #0
   1dfa4:	701a      	strb	r2, [r3, #0]
	i = 500000;
   1dfa6:	4b18      	ldr	r3, [pc, #96]	; (1e008 <sd_mmc_spi_start_read_block+0x74>)
   1dfa8:	607b      	str	r3, [r7, #4]
	do {
		if (i-- == 0) {
   1dfaa:	687b      	ldr	r3, [r7, #4]
   1dfac:	1e5a      	subs	r2, r3, #1
   1dfae:	607a      	str	r2, [r7, #4]
   1dfb0:	2b00      	cmp	r3, #0
   1dfb2:	d104      	bne.n	1dfbe <sd_mmc_spi_start_read_block+0x2a>
			sd_mmc_spi_err = SD_MMC_SPI_ERR_READ_TIMEOUT;
   1dfb4:	4b15      	ldr	r3, [pc, #84]	; (1e00c <sd_mmc_spi_start_read_block+0x78>)
   1dfb6:	2204      	movs	r2, #4
   1dfb8:	701a      	strb	r2, [r3, #0]
			sd_mmc_spi_debug("%s: Read blocks timeout\n\r", __func__);
			return false;
   1dfba:	2300      	movs	r3, #0
   1dfbc:	e020      	b.n	1e000 <sd_mmc_spi_start_read_block+0x6c>
		}
		spi_read_buffer_wait(&sd_mmc_master, &token, 1,
   1dfbe:	1cbb      	adds	r3, r7, #2
   1dfc0:	881b      	ldrh	r3, [r3, #0]
   1dfc2:	1c79      	adds	r1, r7, #1
   1dfc4:	4812      	ldr	r0, [pc, #72]	; (1e010 <sd_mmc_spi_start_read_block+0x7c>)
   1dfc6:	2201      	movs	r2, #1
   1dfc8:	4c12      	ldr	r4, [pc, #72]	; (1e014 <sd_mmc_spi_start_read_block+0x80>)
   1dfca:	47a0      	blx	r4
			dummy);
		if (SPI_TOKEN_DATA_ERROR_VALID(token)) {
   1dfcc:	1c7b      	adds	r3, r7, #1
   1dfce:	781b      	ldrb	r3, [r3, #0]
   1dfd0:	001a      	movs	r2, r3
   1dfd2:	23f0      	movs	r3, #240	; 0xf0
   1dfd4:	4013      	ands	r3, r2
   1dfd6:	d10e      	bne.n	1dff6 <sd_mmc_spi_start_read_block+0x62>
			Assert(SPI_TOKEN_DATA_ERROR_ERRORS & token);
			if (token & (SPI_TOKEN_DATA_ERROR_ERROR
   1dfd8:	1c7b      	adds	r3, r7, #1
   1dfda:	781b      	ldrb	r3, [r3, #0]
   1dfdc:	001a      	movs	r2, r3
   1dfde:	2307      	movs	r3, #7
   1dfe0:	4013      	ands	r3, r2
   1dfe2:	d003      	beq.n	1dfec <sd_mmc_spi_start_read_block+0x58>
					| SPI_TOKEN_DATA_ERROR_ECC_ERROR
					| SPI_TOKEN_DATA_ERROR_CC_ERROR)) {
				sd_mmc_spi_debug("%s: CRC data error token\n\r", __func__);
				sd_mmc_spi_err = SD_MMC_SPI_ERR_READ_CRC;
   1dfe4:	4b09      	ldr	r3, [pc, #36]	; (1e00c <sd_mmc_spi_start_read_block+0x78>)
   1dfe6:	2207      	movs	r2, #7
   1dfe8:	701a      	strb	r2, [r3, #0]
   1dfea:	e002      	b.n	1dff2 <sd_mmc_spi_start_read_block+0x5e>
			} else {
				sd_mmc_spi_debug("%s: Out of range data error token\n\r", __func__);
				sd_mmc_spi_err = SD_MMC_SPI_ERR_OUT_OF_RANGE;
   1dfec:	4b07      	ldr	r3, [pc, #28]	; (1e00c <sd_mmc_spi_start_read_block+0x78>)
   1dfee:	220b      	movs	r2, #11
   1dff0:	701a      	strb	r2, [r3, #0]
			}
			return false;
   1dff2:	2300      	movs	r3, #0
   1dff4:	e004      	b.n	1e000 <sd_mmc_spi_start_read_block+0x6c>
		}
	} while (token != SPI_TOKEN_SINGLE_MULTI_READ);
   1dff6:	1c7b      	adds	r3, r7, #1
   1dff8:	781b      	ldrb	r3, [r3, #0]
   1dffa:	2bfe      	cmp	r3, #254	; 0xfe
   1dffc:	d1d5      	bne.n	1dfaa <sd_mmc_spi_start_read_block+0x16>

	return true;
   1dffe:	2301      	movs	r3, #1
}
   1e000:	0018      	movs	r0, r3
   1e002:	46bd      	mov	sp, r7
   1e004:	b003      	add	sp, #12
   1e006:	bd90      	pop	{r4, r7, pc}
   1e008:	0007a120 	.word	0x0007a120
   1e00c:	20003d2f 	.word	0x20003d2f
   1e010:	20003cec 	.word	0x20003cec
   1e014:	00026801 	.word	0x00026801

0001e018 <sd_mmc_spi_stop_read_block>:

/**
 * \brief Executed the end of a read block transfer
 */
static void sd_mmc_spi_stop_read_block(void)
{
   1e018:	b590      	push	{r4, r7, lr}
   1e01a:	b083      	sub	sp, #12
   1e01c:	af00      	add	r7, sp, #0
	uint8_t crc[2];
	uint16_t dummy = 0xFF;
   1e01e:	1dbb      	adds	r3, r7, #6
   1e020:	22ff      	movs	r2, #255	; 0xff
   1e022:	801a      	strh	r2, [r3, #0]
	// Read 16-bit CRC (not cheked)
	spi_read_buffer_wait(&sd_mmc_master, crc, 2,
   1e024:	1dbb      	adds	r3, r7, #6
   1e026:	881b      	ldrh	r3, [r3, #0]
   1e028:	1d39      	adds	r1, r7, #4
   1e02a:	4804      	ldr	r0, [pc, #16]	; (1e03c <sd_mmc_spi_stop_read_block+0x24>)
   1e02c:	2202      	movs	r2, #2
   1e02e:	4c04      	ldr	r4, [pc, #16]	; (1e040 <sd_mmc_spi_stop_read_block+0x28>)
   1e030:	47a0      	blx	r4
			dummy);
}
   1e032:	46c0      	nop			; (mov r8, r8)
   1e034:	46bd      	mov	sp, r7
   1e036:	b003      	add	sp, #12
   1e038:	bd90      	pop	{r4, r7, pc}
   1e03a:	46c0      	nop			; (mov r8, r8)
   1e03c:	20003cec 	.word	0x20003cec
   1e040:	00026801 	.word	0x00026801

0001e044 <sd_mmc_spi_start_write_block>:

/**
 * \brief Sends the correct TOKEN on the line to start a write block transfer
 */
static void sd_mmc_spi_start_write_block(void)
{
   1e044:	b580      	push	{r7, lr}
   1e046:	b082      	sub	sp, #8
   1e048:	af00      	add	r7, sp, #0
	uint8_t dummy = 0xFF;
   1e04a:	1dfb      	adds	r3, r7, #7
   1e04c:	22ff      	movs	r2, #255	; 0xff
   1e04e:	701a      	strb	r2, [r3, #0]
	Assert(!(sd_mmc_spi_transfert_pos % sd_mmc_spi_block_size));
	// Delay before start write block:
	// Nwr timing minimum = 8 cylces
	spi_write_buffer_wait(&sd_mmc_master,&dummy, 1);
   1e050:	1df9      	adds	r1, r7, #7
   1e052:	4b0d      	ldr	r3, [pc, #52]	; (1e088 <sd_mmc_spi_start_write_block+0x44>)
   1e054:	2201      	movs	r2, #1
   1e056:	0018      	movs	r0, r3
   1e058:	4b0c      	ldr	r3, [pc, #48]	; (1e08c <sd_mmc_spi_start_write_block+0x48>)
   1e05a:	4798      	blx	r3
	// Send start token
	uint8_t token;
	if (1 == sd_mmc_spi_nb_block) {
   1e05c:	4b0c      	ldr	r3, [pc, #48]	; (1e090 <sd_mmc_spi_start_write_block+0x4c>)
   1e05e:	881b      	ldrh	r3, [r3, #0]
   1e060:	2b01      	cmp	r3, #1
   1e062:	d103      	bne.n	1e06c <sd_mmc_spi_start_write_block+0x28>
		token = SPI_TOKEN_SINGLE_WRITE;
   1e064:	1dbb      	adds	r3, r7, #6
   1e066:	22fe      	movs	r2, #254	; 0xfe
   1e068:	701a      	strb	r2, [r3, #0]
   1e06a:	e002      	b.n	1e072 <sd_mmc_spi_start_write_block+0x2e>
	} else {
		token = SPI_TOKEN_MULTI_WRITE;
   1e06c:	1dbb      	adds	r3, r7, #6
   1e06e:	22fc      	movs	r2, #252	; 0xfc
   1e070:	701a      	strb	r2, [r3, #0]
	}
	spi_write_buffer_wait(&sd_mmc_master,&token, 1);
   1e072:	1db9      	adds	r1, r7, #6
   1e074:	4b04      	ldr	r3, [pc, #16]	; (1e088 <sd_mmc_spi_start_write_block+0x44>)
   1e076:	2201      	movs	r2, #1
   1e078:	0018      	movs	r0, r3
   1e07a:	4b04      	ldr	r3, [pc, #16]	; (1e08c <sd_mmc_spi_start_write_block+0x48>)
   1e07c:	4798      	blx	r3
}
   1e07e:	46c0      	nop			; (mov r8, r8)
   1e080:	46bd      	mov	sp, r7
   1e082:	b002      	add	sp, #8
   1e084:	bd80      	pop	{r7, pc}
   1e086:	46c0      	nop			; (mov r8, r8)
   1e088:	20003cec 	.word	0x20003cec
   1e08c:	00026a25 	.word	0x00026a25
   1e090:	20003d3a 	.word	0x20003d3a

0001e094 <sd_mmc_spi_stop_write_block>:
 *
 * \return true if success, otherwise false
 *         with a update of \ref sd_mmc_spi_err.
 */
static bool sd_mmc_spi_stop_write_block(void)
{
   1e094:	b590      	push	{r4, r7, lr}
   1e096:	b083      	sub	sp, #12
   1e098:	af00      	add	r7, sp, #0
	uint8_t resp;
	uint16_t crc;
	uint16_t dummy = 0xFF;
   1e09a:	1dbb      	adds	r3, r7, #6
   1e09c:	22ff      	movs	r2, #255	; 0xff
   1e09e:	801a      	strh	r2, [r3, #0]

	// Send CRC
	crc = 0xFFFF; /// CRC is disabled in SPI mode
   1e0a0:	1cbb      	adds	r3, r7, #2
   1e0a2:	2201      	movs	r2, #1
   1e0a4:	4252      	negs	r2, r2
   1e0a6:	801a      	strh	r2, [r3, #0]
	spi_write_buffer_wait(&sd_mmc_master, (uint8_t *)&crc, 2);
   1e0a8:	1cb9      	adds	r1, r7, #2
   1e0aa:	4b1b      	ldr	r3, [pc, #108]	; (1e118 <sd_mmc_spi_stop_write_block+0x84>)
   1e0ac:	2202      	movs	r2, #2
   1e0ae:	0018      	movs	r0, r3
   1e0b0:	4b1a      	ldr	r3, [pc, #104]	; (1e11c <sd_mmc_spi_stop_write_block+0x88>)
   1e0b2:	4798      	blx	r3
	// Receiv data response token
	spi_read_buffer_wait(&sd_mmc_master, &resp, 1,
   1e0b4:	1dbb      	adds	r3, r7, #6
   1e0b6:	881b      	ldrh	r3, [r3, #0]
   1e0b8:	1d79      	adds	r1, r7, #5
   1e0ba:	4817      	ldr	r0, [pc, #92]	; (1e118 <sd_mmc_spi_stop_write_block+0x84>)
   1e0bc:	2201      	movs	r2, #1
   1e0be:	4c18      	ldr	r4, [pc, #96]	; (1e120 <sd_mmc_spi_stop_write_block+0x8c>)
   1e0c0:	47a0      	blx	r4
			dummy);
	if (!SPI_TOKEN_DATA_RESP_VALID(resp)) {
   1e0c2:	1d7b      	adds	r3, r7, #5
   1e0c4:	781b      	ldrb	r3, [r3, #0]
   1e0c6:	001a      	movs	r2, r3
   1e0c8:	2310      	movs	r3, #16
   1e0ca:	4013      	ands	r3, r2
   1e0cc:	d105      	bne.n	1e0da <sd_mmc_spi_stop_write_block+0x46>
   1e0ce:	1d7b      	adds	r3, r7, #5
   1e0d0:	781b      	ldrb	r3, [r3, #0]
   1e0d2:	001a      	movs	r2, r3
   1e0d4:	2301      	movs	r3, #1
   1e0d6:	4013      	ands	r3, r2
   1e0d8:	d104      	bne.n	1e0e4 <sd_mmc_spi_stop_write_block+0x50>
		sd_mmc_spi_err = SD_MMC_SPI_ERR;
   1e0da:	4b12      	ldr	r3, [pc, #72]	; (1e124 <sd_mmc_spi_stop_write_block+0x90>)
   1e0dc:	2201      	movs	r2, #1
   1e0de:	701a      	strb	r2, [r3, #0]
		sd_mmc_spi_debug("%s: Invalid Data Response Token 0x%x\n\r", __func__, resp);
		return false;
   1e0e0:	2300      	movs	r3, #0
   1e0e2:	e014      	b.n	1e10e <sd_mmc_spi_stop_write_block+0x7a>
	}
	// Check data response
	switch (SPI_TOKEN_DATA_RESP_CODE(resp)) {
   1e0e4:	1d7b      	adds	r3, r7, #5
   1e0e6:	781b      	ldrb	r3, [r3, #0]
   1e0e8:	001a      	movs	r2, r3
   1e0ea:	231e      	movs	r3, #30
   1e0ec:	4013      	ands	r3, r2
   1e0ee:	2b04      	cmp	r3, #4
   1e0f0:	d00b      	beq.n	1e10a <sd_mmc_spi_stop_write_block+0x76>
   1e0f2:	2b0a      	cmp	r3, #10
   1e0f4:	d104      	bne.n	1e100 <sd_mmc_spi_stop_write_block+0x6c>
	case SPI_TOKEN_DATA_RESP_ACCEPTED:
		break;
	case SPI_TOKEN_DATA_RESP_CRC_ERR:
		sd_mmc_spi_err = SD_MMC_SPI_ERR_WRITE_CRC;
   1e0f6:	4b0b      	ldr	r3, [pc, #44]	; (1e124 <sd_mmc_spi_stop_write_block+0x90>)
   1e0f8:	2208      	movs	r2, #8
   1e0fa:	701a      	strb	r2, [r3, #0]
		sd_mmc_spi_debug("%s: Write blocks, SD_MMC_SPI_ERR_CRC, resp 0x%x\n\r",
				__func__, resp);
		return false;
   1e0fc:	2300      	movs	r3, #0
   1e0fe:	e006      	b.n	1e10e <sd_mmc_spi_stop_write_block+0x7a>
	case SPI_TOKEN_DATA_RESP_WRITE_ERR:
	default:
		sd_mmc_spi_err = SD_MMC_SPI_ERR_WRITE;
   1e100:	4b08      	ldr	r3, [pc, #32]	; (1e124 <sd_mmc_spi_stop_write_block+0x90>)
   1e102:	220a      	movs	r2, #10
   1e104:	701a      	strb	r2, [r3, #0]
		sd_mmc_spi_debug("%s: Write blocks SD_MMC_SPI_ERR_WR, resp 0x%x\n\r",
				__func__, resp);
		return false;
   1e106:	2300      	movs	r3, #0
   1e108:	e001      	b.n	1e10e <sd_mmc_spi_stop_write_block+0x7a>
		break;
   1e10a:	46c0      	nop			; (mov r8, r8)
	}
	return true;
   1e10c:	2301      	movs	r3, #1
}
   1e10e:	0018      	movs	r0, r3
   1e110:	46bd      	mov	sp, r7
   1e112:	b003      	add	sp, #12
   1e114:	bd90      	pop	{r4, r7, pc}
   1e116:	46c0      	nop			; (mov r8, r8)
   1e118:	20003cec 	.word	0x20003cec
   1e11c:	00026a25 	.word	0x00026a25
   1e120:	00026801 	.word	0x00026801
   1e124:	20003d2f 	.word	0x20003d2f

0001e128 <sd_mmc_spi_stop_multiwrite_block>:
 *
 * \return true if success, otherwise false
 *         with a update of \ref sd_mmc_spi_err.
 */
static bool sd_mmc_spi_stop_multiwrite_block(void)
{
   1e128:	b590      	push	{r4, r7, lr}
   1e12a:	b083      	sub	sp, #12
   1e12c:	af00      	add	r7, sp, #0
	uint8_t value;

	if (1 == sd_mmc_spi_nb_block) {
   1e12e:	4b1d      	ldr	r3, [pc, #116]	; (1e1a4 <sd_mmc_spi_stop_multiwrite_block+0x7c>)
   1e130:	881b      	ldrh	r3, [r3, #0]
   1e132:	2b01      	cmp	r3, #1
   1e134:	d101      	bne.n	1e13a <sd_mmc_spi_stop_multiwrite_block+0x12>
		return true; // Single block write
   1e136:	2301      	movs	r3, #1
   1e138:	e030      	b.n	1e19c <sd_mmc_spi_stop_multiwrite_block+0x74>
	}
	if (sd_mmc_spi_nb_block >
   1e13a:	4b1a      	ldr	r3, [pc, #104]	; (1e1a4 <sd_mmc_spi_stop_multiwrite_block+0x7c>)
   1e13c:	881b      	ldrh	r3, [r3, #0]
   1e13e:	001c      	movs	r4, r3
		(sd_mmc_spi_transfert_pos / sd_mmc_spi_block_size)) {
   1e140:	4b19      	ldr	r3, [pc, #100]	; (1e1a8 <sd_mmc_spi_stop_multiwrite_block+0x80>)
   1e142:	681a      	ldr	r2, [r3, #0]
   1e144:	4b19      	ldr	r3, [pc, #100]	; (1e1ac <sd_mmc_spi_stop_multiwrite_block+0x84>)
   1e146:	881b      	ldrh	r3, [r3, #0]
   1e148:	0019      	movs	r1, r3
   1e14a:	4b19      	ldr	r3, [pc, #100]	; (1e1b0 <sd_mmc_spi_stop_multiwrite_block+0x88>)
   1e14c:	0010      	movs	r0, r2
   1e14e:	4798      	blx	r3
   1e150:	0003      	movs	r3, r0
	if (sd_mmc_spi_nb_block >
   1e152:	429c      	cmp	r4, r3
   1e154:	d901      	bls.n	1e15a <sd_mmc_spi_stop_multiwrite_block+0x32>
		return true; // It is not the End of multi write
   1e156:	2301      	movs	r3, #1
   1e158:	e020      	b.n	1e19c <sd_mmc_spi_stop_multiwrite_block+0x74>
	}

	// Delay before start write block:
	// Nwr timing minimum = 8 cylces
	value = 0xFF;
   1e15a:	1dfb      	adds	r3, r7, #7
   1e15c:	22ff      	movs	r2, #255	; 0xff
   1e15e:	701a      	strb	r2, [r3, #0]
	spi_write_buffer_wait(&sd_mmc_master, &value, 1);
   1e160:	1df9      	adds	r1, r7, #7
   1e162:	4b14      	ldr	r3, [pc, #80]	; (1e1b4 <sd_mmc_spi_stop_multiwrite_block+0x8c>)
   1e164:	2201      	movs	r2, #1
   1e166:	0018      	movs	r0, r3
   1e168:	4b13      	ldr	r3, [pc, #76]	; (1e1b8 <sd_mmc_spi_stop_multiwrite_block+0x90>)
   1e16a:	4798      	blx	r3
	// Send stop token
	value = SPI_TOKEN_STOP_TRAN;
   1e16c:	1dfb      	adds	r3, r7, #7
   1e16e:	22fd      	movs	r2, #253	; 0xfd
   1e170:	701a      	strb	r2, [r3, #0]
	spi_write_buffer_wait(&sd_mmc_master, &value, 1);
   1e172:	1df9      	adds	r1, r7, #7
   1e174:	4b0f      	ldr	r3, [pc, #60]	; (1e1b4 <sd_mmc_spi_stop_multiwrite_block+0x8c>)
   1e176:	2201      	movs	r2, #1
   1e178:	0018      	movs	r0, r3
   1e17a:	4b0f      	ldr	r3, [pc, #60]	; (1e1b8 <sd_mmc_spi_stop_multiwrite_block+0x90>)
   1e17c:	4798      	blx	r3
	// Wait busy
	if (!sd_mmc_spi_wait_busy()) {
   1e17e:	4b0f      	ldr	r3, [pc, #60]	; (1e1bc <sd_mmc_spi_stop_multiwrite_block+0x94>)
   1e180:	4798      	blx	r3
   1e182:	0003      	movs	r3, r0
   1e184:	001a      	movs	r2, r3
   1e186:	2301      	movs	r3, #1
   1e188:	4053      	eors	r3, r2
   1e18a:	b2db      	uxtb	r3, r3
   1e18c:	2b00      	cmp	r3, #0
   1e18e:	d004      	beq.n	1e19a <sd_mmc_spi_stop_multiwrite_block+0x72>
		sd_mmc_spi_err = SD_MMC_SPI_ERR_WRITE_TIMEOUT;
   1e190:	4b0b      	ldr	r3, [pc, #44]	; (1e1c0 <sd_mmc_spi_stop_multiwrite_block+0x98>)
   1e192:	2205      	movs	r2, #5
   1e194:	701a      	strb	r2, [r3, #0]
		sd_mmc_spi_debug("%s: Stop write blocks timeout\n\r",
				__func__);
		return false;
   1e196:	2300      	movs	r3, #0
   1e198:	e000      	b.n	1e19c <sd_mmc_spi_stop_multiwrite_block+0x74>
	}
	return true;
   1e19a:	2301      	movs	r3, #1
}
   1e19c:	0018      	movs	r0, r3
   1e19e:	46bd      	mov	sp, r7
   1e1a0:	b003      	add	sp, #12
   1e1a2:	bd90      	pop	{r4, r7, pc}
   1e1a4:	20003d3a 	.word	0x20003d3a
   1e1a8:	20003d34 	.word	0x20003d34
   1e1ac:	20003d38 	.word	0x20003d38
   1e1b0:	000310ed 	.word	0x000310ed
   1e1b4:	20003cec 	.word	0x20003cec
   1e1b8:	00026a25 	.word	0x00026a25
   1e1bc:	0001df29 	.word	0x0001df29
   1e1c0:	20003d2f 	.word	0x20003d2f

0001e1c4 <sd_mmc_spi_init>:
{
	return sd_mmc_spi_err;
}

void sd_mmc_spi_init(void)
{
   1e1c4:	b580      	push	{r7, lr}
   1e1c6:	b090      	sub	sp, #64	; 0x40
   1e1c8:	af00      	add	r7, sp, #0
	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
   1e1ca:	4b1f      	ldr	r3, [pc, #124]	; (1e248 <sd_mmc_spi_init+0x84>)
   1e1cc:	2200      	movs	r2, #0
   1e1ce:	701a      	strb	r2, [r3, #0]

	// Initialize card detect pin
	struct port_config pin_conf;
	port_get_config_defaults(&pin_conf);
   1e1d0:	233c      	movs	r3, #60	; 0x3c
   1e1d2:	18fb      	adds	r3, r7, r3
   1e1d4:	0018      	movs	r0, r3
   1e1d6:	4b1d      	ldr	r3, [pc, #116]	; (1e24c <sd_mmc_spi_init+0x88>)
   1e1d8:	4798      	blx	r3
	port_pin_set_config(SD_MMC_0_CD_GPIO, &pin_conf);
	#endif

	// Initialize SPI interface and enable it
	struct spi_config config;
	spi_get_config_defaults(&config);
   1e1da:	1d3b      	adds	r3, r7, #4
   1e1dc:	0018      	movs	r0, r3
   1e1de:	4b1c      	ldr	r3, [pc, #112]	; (1e250 <sd_mmc_spi_init+0x8c>)
   1e1e0:	4798      	blx	r3

	config.mux_setting = SD_MMC_SPI_PINMUX_SETTING;
   1e1e2:	1d3b      	adds	r3, r7, #4
   1e1e4:	2280      	movs	r2, #128	; 0x80
   1e1e6:	0252      	lsls	r2, r2, #9
   1e1e8:	60da      	str	r2, [r3, #12]
	config.pinmux_pad0 = SD_MMC_SPI_PINMUX_PAD0;
   1e1ea:	1d3b      	adds	r3, r7, #4
   1e1ec:	4a19      	ldr	r2, [pc, #100]	; (1e254 <sd_mmc_spi_init+0x90>)
   1e1ee:	629a      	str	r2, [r3, #40]	; 0x28
	config.pinmux_pad1 = SD_MMC_SPI_PINMUX_PAD1;
   1e1f0:	1d3b      	adds	r3, r7, #4
   1e1f2:	4a19      	ldr	r2, [pc, #100]	; (1e258 <sd_mmc_spi_init+0x94>)
   1e1f4:	62da      	str	r2, [r3, #44]	; 0x2c
	config.pinmux_pad2 = SD_MMC_SPI_PINMUX_PAD2;
   1e1f6:	1d3b      	adds	r3, r7, #4
   1e1f8:	4a18      	ldr	r2, [pc, #96]	; (1e25c <sd_mmc_spi_init+0x98>)
   1e1fa:	631a      	str	r2, [r3, #48]	; 0x30
	config.pinmux_pad3 = SD_MMC_SPI_PINMUX_PAD3;
   1e1fc:	1d3b      	adds	r3, r7, #4
   1e1fe:	4a18      	ldr	r2, [pc, #96]	; (1e260 <sd_mmc_spi_init+0x9c>)
   1e200:	635a      	str	r2, [r3, #52]	; 0x34
	config.generator_source = SD_MMC_SPI_SOURCE_CLOCK;
   1e202:	1d3b      	adds	r3, r7, #4
   1e204:	2224      	movs	r2, #36	; 0x24
   1e206:	2100      	movs	r1, #0
   1e208:	5499      	strb	r1, [r3, r2]
	config.mode_specific.master.baudrate = SDMMC_CLOCK_INIT;
   1e20a:	1d3b      	adds	r3, r7, #4
   1e20c:	4a15      	ldr	r2, [pc, #84]	; (1e264 <sd_mmc_spi_init+0xa0>)
   1e20e:	619a      	str	r2, [r3, #24]

	spi_init(&sd_mmc_master, SD_MMC_SPI, &config);
   1e210:	1d3a      	adds	r2, r7, #4
   1e212:	4915      	ldr	r1, [pc, #84]	; (1e268 <sd_mmc_spi_init+0xa4>)
   1e214:	4b15      	ldr	r3, [pc, #84]	; (1e26c <sd_mmc_spi_init+0xa8>)
   1e216:	0018      	movs	r0, r3
   1e218:	4b15      	ldr	r3, [pc, #84]	; (1e270 <sd_mmc_spi_init+0xac>)
   1e21a:	4798      	blx	r3
	spi_enable(&sd_mmc_master);
   1e21c:	4b13      	ldr	r3, [pc, #76]	; (1e26c <sd_mmc_spi_init+0xa8>)
   1e21e:	0018      	movs	r0, r3
   1e220:	4b14      	ldr	r3, [pc, #80]	; (1e274 <sd_mmc_spi_init+0xb0>)
   1e222:	4798      	blx	r3

	spi_slave_inst_get_config_defaults(&slave_configs[0]);
   1e224:	4b14      	ldr	r3, [pc, #80]	; (1e278 <sd_mmc_spi_init+0xb4>)
   1e226:	0018      	movs	r0, r3
   1e228:	4b14      	ldr	r3, [pc, #80]	; (1e27c <sd_mmc_spi_init+0xb8>)
   1e22a:	4798      	blx	r3
	slave_configs[0].ss_pin = ss_pins[0];
   1e22c:	4b14      	ldr	r3, [pc, #80]	; (1e280 <sd_mmc_spi_init+0xbc>)
   1e22e:	781a      	ldrb	r2, [r3, #0]
   1e230:	4b11      	ldr	r3, [pc, #68]	; (1e278 <sd_mmc_spi_init+0xb4>)
   1e232:	701a      	strb	r2, [r3, #0]
	spi_attach_slave(&sd_mmc_spi_devices[0], &slave_configs[0]);
   1e234:	4a10      	ldr	r2, [pc, #64]	; (1e278 <sd_mmc_spi_init+0xb4>)
   1e236:	4b13      	ldr	r3, [pc, #76]	; (1e284 <sd_mmc_spi_init+0xc0>)
   1e238:	0011      	movs	r1, r2
   1e23a:	0018      	movs	r0, r3
   1e23c:	4b12      	ldr	r3, [pc, #72]	; (1e288 <sd_mmc_spi_init+0xc4>)
   1e23e:	4798      	blx	r3
}
   1e240:	46c0      	nop			; (mov r8, r8)
   1e242:	46bd      	mov	sp, r7
   1e244:	b010      	add	sp, #64	; 0x40
   1e246:	bd80      	pop	{r7, pc}
   1e248:	20003d2f 	.word	0x20003d2f
   1e24c:	0001dc79 	.word	0x0001dc79
   1e250:	0001dd11 	.word	0x0001dd11
   1e254:	00100002 	.word	0x00100002
   1e258:	00110002 	.word	0x00110002
   1e25c:	00120002 	.word	0x00120002
   1e260:	00130002 	.word	0x00130002
   1e264:	00061a80 	.word	0x00061a80
   1e268:	42000c00 	.word	0x42000c00
   1e26c:	20003cec 	.word	0x20003cec
   1e270:	00026671 	.word	0x00026671
   1e274:	0001de1d 	.word	0x0001de1d
   1e278:	20003d2c 	.word	0x20003d2c
   1e27c:	0001dd95 	.word	0x0001dd95
   1e280:	20000128 	.word	0x20000128
   1e284:	20003d28 	.word	0x20003d28
   1e288:	0001ddb9 	.word	0x0001ddb9

0001e28c <sd_mmc_spi_select_device>:

void sd_mmc_spi_select_device(uint8_t slot, uint32_t clock, uint8_t bus_width,
		bool high_speed)
{
   1e28c:	b590      	push	{r4, r7, lr}
   1e28e:	b083      	sub	sp, #12
   1e290:	af00      	add	r7, sp, #0
   1e292:	0004      	movs	r4, r0
   1e294:	6039      	str	r1, [r7, #0]
   1e296:	0010      	movs	r0, r2
   1e298:	0019      	movs	r1, r3
   1e29a:	1dfb      	adds	r3, r7, #7
   1e29c:	1c22      	adds	r2, r4, #0
   1e29e:	701a      	strb	r2, [r3, #0]
   1e2a0:	1dbb      	adds	r3, r7, #6
   1e2a2:	1c02      	adds	r2, r0, #0
   1e2a4:	701a      	strb	r2, [r3, #0]
   1e2a6:	1d7b      	adds	r3, r7, #5
   1e2a8:	1c0a      	adds	r2, r1, #0
   1e2aa:	701a      	strb	r2, [r3, #0]
	UNUSED(bus_width);
	UNUSED(high_speed);
	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
   1e2ac:	4b13      	ldr	r3, [pc, #76]	; (1e2fc <sd_mmc_spi_select_device+0x70>)
   1e2ae:	2200      	movs	r2, #0
   1e2b0:	701a      	strb	r2, [r3, #0]

#ifdef SD_MMC_SPI_MAX_CLOCK
	if (clock > SD_MMC_SPI_MAX_CLOCK) {
   1e2b2:	683b      	ldr	r3, [r7, #0]
   1e2b4:	4a12      	ldr	r2, [pc, #72]	; (1e300 <sd_mmc_spi_select_device+0x74>)
   1e2b6:	4293      	cmp	r3, r2
   1e2b8:	d907      	bls.n	1e2ca <sd_mmc_spi_select_device+0x3e>
		clock = SD_MMC_SPI_MAX_CLOCK;
   1e2ba:	4b11      	ldr	r3, [pc, #68]	; (1e300 <sd_mmc_spi_select_device+0x74>)
   1e2bc:	603b      	str	r3, [r7, #0]
	}
#endif
	while (STATUS_ERR_INVALID_ARG == spi_set_baudrate(&sd_mmc_master, clock)) {
   1e2be:	e004      	b.n	1e2ca <sd_mmc_spi_select_device+0x3e>
		clock -= clock / 8;
   1e2c0:	683b      	ldr	r3, [r7, #0]
   1e2c2:	08db      	lsrs	r3, r3, #3
   1e2c4:	683a      	ldr	r2, [r7, #0]
   1e2c6:	1ad3      	subs	r3, r2, r3
   1e2c8:	603b      	str	r3, [r7, #0]
	while (STATUS_ERR_INVALID_ARG == spi_set_baudrate(&sd_mmc_master, clock)) {
   1e2ca:	683a      	ldr	r2, [r7, #0]
   1e2cc:	4b0d      	ldr	r3, [pc, #52]	; (1e304 <sd_mmc_spi_select_device+0x78>)
   1e2ce:	0011      	movs	r1, r2
   1e2d0:	0018      	movs	r0, r3
   1e2d2:	4b0d      	ldr	r3, [pc, #52]	; (1e308 <sd_mmc_spi_select_device+0x7c>)
   1e2d4:	4798      	blx	r3
   1e2d6:	0003      	movs	r3, r0
   1e2d8:	2b17      	cmp	r3, #23
   1e2da:	d0f1      	beq.n	1e2c0 <sd_mmc_spi_select_device+0x34>
	}
	spi_select_slave(&sd_mmc_master, &sd_mmc_spi_devices[slot], true);
   1e2dc:	1dfb      	adds	r3, r7, #7
   1e2de:	781a      	ldrb	r2, [r3, #0]
   1e2e0:	0013      	movs	r3, r2
   1e2e2:	005b      	lsls	r3, r3, #1
   1e2e4:	189b      	adds	r3, r3, r2
   1e2e6:	4a09      	ldr	r2, [pc, #36]	; (1e30c <sd_mmc_spi_select_device+0x80>)
   1e2e8:	1899      	adds	r1, r3, r2
   1e2ea:	4b06      	ldr	r3, [pc, #24]	; (1e304 <sd_mmc_spi_select_device+0x78>)
   1e2ec:	2201      	movs	r2, #1
   1e2ee:	0018      	movs	r0, r3
   1e2f0:	4b07      	ldr	r3, [pc, #28]	; (1e310 <sd_mmc_spi_select_device+0x84>)
   1e2f2:	4798      	blx	r3
}
   1e2f4:	46c0      	nop			; (mov r8, r8)
   1e2f6:	46bd      	mov	sp, r7
   1e2f8:	b003      	add	sp, #12
   1e2fa:	bd90      	pop	{r4, r7, pc}
   1e2fc:	20003d2f 	.word	0x20003d2f
   1e300:	00989680 	.word	0x00989680
   1e304:	20003cec 	.word	0x20003cec
   1e308:	00026399 	.word	0x00026399
   1e30c:	20003d28 	.word	0x20003d28
   1e310:	00026935 	.word	0x00026935

0001e314 <sd_mmc_spi_deselect_device>:

void sd_mmc_spi_deselect_device(uint8_t slot)
{
   1e314:	b580      	push	{r7, lr}
   1e316:	b082      	sub	sp, #8
   1e318:	af00      	add	r7, sp, #0
   1e31a:	0002      	movs	r2, r0
   1e31c:	1dfb      	adds	r3, r7, #7
   1e31e:	701a      	strb	r2, [r3, #0]
	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
   1e320:	4b09      	ldr	r3, [pc, #36]	; (1e348 <sd_mmc_spi_deselect_device+0x34>)
   1e322:	2200      	movs	r2, #0
   1e324:	701a      	strb	r2, [r3, #0]
	spi_select_slave(&sd_mmc_master, &sd_mmc_spi_devices[slot], false);
   1e326:	1dfb      	adds	r3, r7, #7
   1e328:	781a      	ldrb	r2, [r3, #0]
   1e32a:	0013      	movs	r3, r2
   1e32c:	005b      	lsls	r3, r3, #1
   1e32e:	189b      	adds	r3, r3, r2
   1e330:	4a06      	ldr	r2, [pc, #24]	; (1e34c <sd_mmc_spi_deselect_device+0x38>)
   1e332:	1899      	adds	r1, r3, r2
   1e334:	4b06      	ldr	r3, [pc, #24]	; (1e350 <sd_mmc_spi_deselect_device+0x3c>)
   1e336:	2200      	movs	r2, #0
   1e338:	0018      	movs	r0, r3
   1e33a:	4b06      	ldr	r3, [pc, #24]	; (1e354 <sd_mmc_spi_deselect_device+0x40>)
   1e33c:	4798      	blx	r3
}
   1e33e:	46c0      	nop			; (mov r8, r8)
   1e340:	46bd      	mov	sp, r7
   1e342:	b002      	add	sp, #8
   1e344:	bd80      	pop	{r7, pc}
   1e346:	46c0      	nop			; (mov r8, r8)
   1e348:	20003d2f 	.word	0x20003d2f
   1e34c:	20003d28 	.word	0x20003d28
   1e350:	20003cec 	.word	0x20003cec
   1e354:	00026935 	.word	0x00026935

0001e358 <sd_mmc_spi_send_clock>:

void sd_mmc_spi_send_clock(void)
{
   1e358:	b580      	push	{r7, lr}
   1e35a:	b082      	sub	sp, #8
   1e35c:	af00      	add	r7, sp, #0
	uint8_t i;
	uint8_t dummy = 0xFF;
   1e35e:	1dbb      	adds	r3, r7, #6
   1e360:	22ff      	movs	r2, #255	; 0xff
   1e362:	701a      	strb	r2, [r3, #0]

	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
   1e364:	4b0c      	ldr	r3, [pc, #48]	; (1e398 <sd_mmc_spi_send_clock+0x40>)
   1e366:	2200      	movs	r2, #0
   1e368:	701a      	strb	r2, [r3, #0]
	//! Send 80 cycles
	for (i = 0; i < 10; i++) {
   1e36a:	1dfb      	adds	r3, r7, #7
   1e36c:	2200      	movs	r2, #0
   1e36e:	701a      	strb	r2, [r3, #0]
   1e370:	e00a      	b.n	1e388 <sd_mmc_spi_send_clock+0x30>
		spi_write_buffer_wait(&sd_mmc_master, &dummy, 1); // 8 cycles
   1e372:	1db9      	adds	r1, r7, #6
   1e374:	4b09      	ldr	r3, [pc, #36]	; (1e39c <sd_mmc_spi_send_clock+0x44>)
   1e376:	2201      	movs	r2, #1
   1e378:	0018      	movs	r0, r3
   1e37a:	4b09      	ldr	r3, [pc, #36]	; (1e3a0 <sd_mmc_spi_send_clock+0x48>)
   1e37c:	4798      	blx	r3
	for (i = 0; i < 10; i++) {
   1e37e:	1dfb      	adds	r3, r7, #7
   1e380:	781a      	ldrb	r2, [r3, #0]
   1e382:	1dfb      	adds	r3, r7, #7
   1e384:	3201      	adds	r2, #1
   1e386:	701a      	strb	r2, [r3, #0]
   1e388:	1dfb      	adds	r3, r7, #7
   1e38a:	781b      	ldrb	r3, [r3, #0]
   1e38c:	2b09      	cmp	r3, #9
   1e38e:	d9f0      	bls.n	1e372 <sd_mmc_spi_send_clock+0x1a>
	}
}
   1e390:	46c0      	nop			; (mov r8, r8)
   1e392:	46bd      	mov	sp, r7
   1e394:	b002      	add	sp, #8
   1e396:	bd80      	pop	{r7, pc}
   1e398:	20003d2f 	.word	0x20003d2f
   1e39c:	20003cec 	.word	0x20003cec
   1e3a0:	00026a25 	.word	0x00026a25

0001e3a4 <sd_mmc_spi_send_cmd>:

bool sd_mmc_spi_send_cmd(sdmmc_cmd_def_t cmd, uint32_t arg)
{
   1e3a4:	b590      	push	{r4, r7, lr}
   1e3a6:	b085      	sub	sp, #20
   1e3a8:	af02      	add	r7, sp, #8
   1e3aa:	6078      	str	r0, [r7, #4]
   1e3ac:	6039      	str	r1, [r7, #0]
	return sd_mmc_spi_adtc_start(cmd, arg, 0, 0, false);
   1e3ae:	6839      	ldr	r1, [r7, #0]
   1e3b0:	6878      	ldr	r0, [r7, #4]
   1e3b2:	2300      	movs	r3, #0
   1e3b4:	9300      	str	r3, [sp, #0]
   1e3b6:	2300      	movs	r3, #0
   1e3b8:	2200      	movs	r2, #0
   1e3ba:	4c03      	ldr	r4, [pc, #12]	; (1e3c8 <sd_mmc_spi_send_cmd+0x24>)
   1e3bc:	47a0      	blx	r4
   1e3be:	0003      	movs	r3, r0
}
   1e3c0:	0018      	movs	r0, r3
   1e3c2:	46bd      	mov	sp, r7
   1e3c4:	b003      	add	sp, #12
   1e3c6:	bd90      	pop	{r4, r7, pc}
   1e3c8:	0001e3cd 	.word	0x0001e3cd

0001e3cc <sd_mmc_spi_adtc_start>:

bool sd_mmc_spi_adtc_start(sdmmc_cmd_def_t cmd, uint32_t arg,
		uint16_t block_size, uint16_t nb_block, bool access_block)
{
   1e3cc:	b590      	push	{r4, r7, lr}
   1e3ce:	b089      	sub	sp, #36	; 0x24
   1e3d0:	af00      	add	r7, sp, #0
   1e3d2:	60f8      	str	r0, [r7, #12]
   1e3d4:	60b9      	str	r1, [r7, #8]
   1e3d6:	0019      	movs	r1, r3
   1e3d8:	1dbb      	adds	r3, r7, #6
   1e3da:	801a      	strh	r2, [r3, #0]
   1e3dc:	1d3b      	adds	r3, r7, #4
   1e3de:	1c0a      	adds	r2, r1, #0
   1e3e0:	801a      	strh	r2, [r3, #0]
	uint8_t dummy = 0xFF;
   1e3e2:	231b      	movs	r3, #27
   1e3e4:	18fb      	adds	r3, r7, r3
   1e3e6:	22ff      	movs	r2, #255	; 0xff
   1e3e8:	701a      	strb	r2, [r3, #0]
	uint8_t cmd_token[6];
	uint8_t ncr_timeout;
	uint8_t r1; //! R1 response
	uint16_t dummy2 = 0xFF;
   1e3ea:	231c      	movs	r3, #28
   1e3ec:	18fb      	adds	r3, r7, r3
   1e3ee:	22ff      	movs	r2, #255	; 0xff
   1e3f0:	801a      	strh	r2, [r3, #0]

	UNUSED(access_block);
	Assert(cmd & SDMMC_RESP_PRESENT); // Always a response in SPI mode
	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
   1e3f2:	4b72      	ldr	r3, [pc, #456]	; (1e5bc <sd_mmc_spi_adtc_start+0x1f0>)
   1e3f4:	2200      	movs	r2, #0
   1e3f6:	701a      	strb	r2, [r3, #0]

	// Encode SPI command
	cmd_token[0] = SPI_CMD_ENCODE(SDMMC_CMD_GET_INDEX(cmd));
   1e3f8:	68fb      	ldr	r3, [r7, #12]
   1e3fa:	b2db      	uxtb	r3, r3
   1e3fc:	223f      	movs	r2, #63	; 0x3f
   1e3fe:	4013      	ands	r3, r2
   1e400:	b2db      	uxtb	r3, r3
   1e402:	2240      	movs	r2, #64	; 0x40
   1e404:	4313      	orrs	r3, r2
   1e406:	b2da      	uxtb	r2, r3
   1e408:	2314      	movs	r3, #20
   1e40a:	18fb      	adds	r3, r7, r3
   1e40c:	701a      	strb	r2, [r3, #0]
	cmd_token[1] = arg >> 24;
   1e40e:	68bb      	ldr	r3, [r7, #8]
   1e410:	0e1b      	lsrs	r3, r3, #24
   1e412:	b2da      	uxtb	r2, r3
   1e414:	2314      	movs	r3, #20
   1e416:	18fb      	adds	r3, r7, r3
   1e418:	705a      	strb	r2, [r3, #1]
	cmd_token[2] = arg >> 16;
   1e41a:	68bb      	ldr	r3, [r7, #8]
   1e41c:	0c1b      	lsrs	r3, r3, #16
   1e41e:	b2da      	uxtb	r2, r3
   1e420:	2314      	movs	r3, #20
   1e422:	18fb      	adds	r3, r7, r3
   1e424:	709a      	strb	r2, [r3, #2]
	cmd_token[3] = arg >> 8;
   1e426:	68bb      	ldr	r3, [r7, #8]
   1e428:	0a1b      	lsrs	r3, r3, #8
   1e42a:	b2da      	uxtb	r2, r3
   1e42c:	2314      	movs	r3, #20
   1e42e:	18fb      	adds	r3, r7, r3
   1e430:	70da      	strb	r2, [r3, #3]
	cmd_token[4] = arg;
   1e432:	68bb      	ldr	r3, [r7, #8]
   1e434:	b2da      	uxtb	r2, r3
   1e436:	2314      	movs	r3, #20
   1e438:	18fb      	adds	r3, r7, r3
   1e43a:	711a      	strb	r2, [r3, #4]
	cmd_token[5] = sd_mmc_spi_crc7(cmd_token, 5);
   1e43c:	2314      	movs	r3, #20
   1e43e:	18fb      	adds	r3, r7, r3
   1e440:	2105      	movs	r1, #5
   1e442:	0018      	movs	r0, r3
   1e444:	4b5e      	ldr	r3, [pc, #376]	; (1e5c0 <sd_mmc_spi_adtc_start+0x1f4>)
   1e446:	4798      	blx	r3
   1e448:	0003      	movs	r3, r0
   1e44a:	001a      	movs	r2, r3
   1e44c:	2314      	movs	r3, #20
   1e44e:	18fb      	adds	r3, r7, r3
   1e450:	715a      	strb	r2, [r3, #5]

	// 8 cycles to respect Ncs timing
	// Note: This byte does not include start bit "0",
	// thus it is ignored by card.
	spi_write_buffer_wait(&sd_mmc_master, &dummy, 1);
   1e452:	231b      	movs	r3, #27
   1e454:	18f9      	adds	r1, r7, r3
   1e456:	4b5b      	ldr	r3, [pc, #364]	; (1e5c4 <sd_mmc_spi_adtc_start+0x1f8>)
   1e458:	2201      	movs	r2, #1
   1e45a:	0018      	movs	r0, r3
   1e45c:	4b5a      	ldr	r3, [pc, #360]	; (1e5c8 <sd_mmc_spi_adtc_start+0x1fc>)
   1e45e:	4798      	blx	r3
	// Send command
	spi_write_buffer_wait(&sd_mmc_master, cmd_token, sizeof(cmd_token));
   1e460:	2314      	movs	r3, #20
   1e462:	18f9      	adds	r1, r7, r3
   1e464:	4b57      	ldr	r3, [pc, #348]	; (1e5c4 <sd_mmc_spi_adtc_start+0x1f8>)
   1e466:	2206      	movs	r2, #6
   1e468:	0018      	movs	r0, r3
   1e46a:	4b57      	ldr	r3, [pc, #348]	; (1e5c8 <sd_mmc_spi_adtc_start+0x1fc>)
   1e46c:	4798      	blx	r3

	// Wait for response
	// Two retry will be done to manage the Ncr timing between command and reponse
	// Ncr: Min. 1x8 clock  cycle, Max. 8x8 clock cycles
	// WORKAROUND for no compliance card (Atmel Internal ref. SD13):
	r1 = 0xFF;
   1e46e:	2313      	movs	r3, #19
   1e470:	18fb      	adds	r3, r7, r3
   1e472:	22ff      	movs	r2, #255	; 0xff
   1e474:	701a      	strb	r2, [r3, #0]
	// Ignore first byte because Ncr min. = 8 clock cylces
	spi_read_buffer_wait(&sd_mmc_master, &r1, 1,
   1e476:	231c      	movs	r3, #28
   1e478:	18fb      	adds	r3, r7, r3
   1e47a:	881b      	ldrh	r3, [r3, #0]
   1e47c:	2213      	movs	r2, #19
   1e47e:	18b9      	adds	r1, r7, r2
   1e480:	4850      	ldr	r0, [pc, #320]	; (1e5c4 <sd_mmc_spi_adtc_start+0x1f8>)
   1e482:	2201      	movs	r2, #1
   1e484:	4c51      	ldr	r4, [pc, #324]	; (1e5cc <sd_mmc_spi_adtc_start+0x200>)
   1e486:	47a0      	blx	r4
			dummy2);
	ncr_timeout = 7;
   1e488:	231f      	movs	r3, #31
   1e48a:	18fb      	adds	r3, r7, r3
   1e48c:	2207      	movs	r2, #7
   1e48e:	701a      	strb	r2, [r3, #0]
	while (1) {
		spi_read_buffer_wait(&sd_mmc_master, &r1, 1,
   1e490:	231c      	movs	r3, #28
   1e492:	18fb      	adds	r3, r7, r3
   1e494:	881b      	ldrh	r3, [r3, #0]
   1e496:	2213      	movs	r2, #19
   1e498:	18b9      	adds	r1, r7, r2
   1e49a:	484a      	ldr	r0, [pc, #296]	; (1e5c4 <sd_mmc_spi_adtc_start+0x1f8>)
   1e49c:	2201      	movs	r2, #1
   1e49e:	4c4b      	ldr	r4, [pc, #300]	; (1e5cc <sd_mmc_spi_adtc_start+0x200>)
   1e4a0:	47a0      	blx	r4
			dummy2); // 8 cycles
		if ((r1 & R1_SPI_ERROR) == 0) {
   1e4a2:	2313      	movs	r3, #19
   1e4a4:	18fb      	adds	r3, r7, r3
   1e4a6:	781b      	ldrb	r3, [r3, #0]
   1e4a8:	b25b      	sxtb	r3, r3
   1e4aa:	2b00      	cmp	r3, #0
   1e4ac:	da10      	bge.n	1e4d0 <sd_mmc_spi_adtc_start+0x104>
			// Valid R1 response
			break;
		}
		if (--ncr_timeout == 0) {
   1e4ae:	231f      	movs	r3, #31
   1e4b0:	18fb      	adds	r3, r7, r3
   1e4b2:	221f      	movs	r2, #31
   1e4b4:	18ba      	adds	r2, r7, r2
   1e4b6:	7812      	ldrb	r2, [r2, #0]
   1e4b8:	3a01      	subs	r2, #1
   1e4ba:	701a      	strb	r2, [r3, #0]
   1e4bc:	231f      	movs	r3, #31
   1e4be:	18fb      	adds	r3, r7, r3
   1e4c0:	781b      	ldrb	r3, [r3, #0]
   1e4c2:	2b00      	cmp	r3, #0
   1e4c4:	d1e4      	bne.n	1e490 <sd_mmc_spi_adtc_start+0xc4>
			// Here Valid R1 response received
			sd_mmc_spi_debug("%s: cmd %02d, arg 0x%08lX, R1 timeout\n\r",
					__func__, (int)SDMMC_CMD_GET_INDEX(cmd), arg);
			sd_mmc_spi_err = SD_MMC_SPI_ERR_RESP_TIMEOUT;
   1e4c6:	4b3d      	ldr	r3, [pc, #244]	; (1e5bc <sd_mmc_spi_adtc_start+0x1f0>)
   1e4c8:	2202      	movs	r2, #2
   1e4ca:	701a      	strb	r2, [r3, #0]
			return false;
   1e4cc:	2300      	movs	r3, #0
   1e4ce:	e070      	b.n	1e5b2 <sd_mmc_spi_adtc_start+0x1e6>
			break;
   1e4d0:	46c0      	nop			; (mov r8, r8)
		}
	}

	// Save R1 (Specific to SPI interface) in 32 bit response
	// The R1_SPI_IDLE bit can be checked by high level
	sd_mmc_spi_response_32 = r1;
   1e4d2:	2313      	movs	r3, #19
   1e4d4:	18fb      	adds	r3, r7, r3
   1e4d6:	781b      	ldrb	r3, [r3, #0]
   1e4d8:	001a      	movs	r2, r3
   1e4da:	4b3d      	ldr	r3, [pc, #244]	; (1e5d0 <sd_mmc_spi_adtc_start+0x204>)
   1e4dc:	601a      	str	r2, [r3, #0]

	// Manage error in R1
	if (r1 & R1_SPI_COM_CRC) {
   1e4de:	2313      	movs	r3, #19
   1e4e0:	18fb      	adds	r3, r7, r3
   1e4e2:	781b      	ldrb	r3, [r3, #0]
   1e4e4:	001a      	movs	r2, r3
   1e4e6:	2308      	movs	r3, #8
   1e4e8:	4013      	ands	r3, r2
   1e4ea:	d004      	beq.n	1e4f6 <sd_mmc_spi_adtc_start+0x12a>
		sd_mmc_spi_debug("%s: cmd %02d, arg 0x%08lx, r1 0x%02x, R1_SPI_COM_CRC\n\r",
				__func__, (int)SDMMC_CMD_GET_INDEX(cmd), arg, r1);
		sd_mmc_spi_err = SD_MMC_SPI_ERR_RESP_CRC;
   1e4ec:	4b33      	ldr	r3, [pc, #204]	; (1e5bc <sd_mmc_spi_adtc_start+0x1f0>)
   1e4ee:	2206      	movs	r2, #6
   1e4f0:	701a      	strb	r2, [r3, #0]
		return false;
   1e4f2:	2300      	movs	r3, #0
   1e4f4:	e05d      	b.n	1e5b2 <sd_mmc_spi_adtc_start+0x1e6>
	}
	if (r1 & R1_SPI_ILLEGAL_COMMAND) {
   1e4f6:	2313      	movs	r3, #19
   1e4f8:	18fb      	adds	r3, r7, r3
   1e4fa:	781b      	ldrb	r3, [r3, #0]
   1e4fc:	001a      	movs	r2, r3
   1e4fe:	2304      	movs	r3, #4
   1e500:	4013      	ands	r3, r2
   1e502:	d004      	beq.n	1e50e <sd_mmc_spi_adtc_start+0x142>
		sd_mmc_spi_debug("%s: cmd %02d, arg 0x%08lx, r1 0x%x, R1 ILLEGAL_COMMAND\n\r",
				__func__, (int)SDMMC_CMD_GET_INDEX(cmd), arg, r1);
		sd_mmc_spi_err = SD_MMC_SPI_ERR_ILLEGAL_COMMAND;
   1e504:	4b2d      	ldr	r3, [pc, #180]	; (1e5bc <sd_mmc_spi_adtc_start+0x1f0>)
   1e506:	2209      	movs	r2, #9
   1e508:	701a      	strb	r2, [r3, #0]
		return false;
   1e50a:	2300      	movs	r3, #0
   1e50c:	e051      	b.n	1e5b2 <sd_mmc_spi_adtc_start+0x1e6>
	}
	if (r1 & ~R1_SPI_IDLE) {
   1e50e:	2313      	movs	r3, #19
   1e510:	18fb      	adds	r3, r7, r3
   1e512:	781b      	ldrb	r3, [r3, #0]
   1e514:	001a      	movs	r2, r3
   1e516:	2301      	movs	r3, #1
   1e518:	439a      	bics	r2, r3
   1e51a:	1e13      	subs	r3, r2, #0
   1e51c:	d004      	beq.n	1e528 <sd_mmc_spi_adtc_start+0x15c>
		// Other error
		sd_mmc_spi_debug("%s: cmd %02d, arg 0x%08lx, r1 0x%x, R1 error\n\r",
				__func__, (int)SDMMC_CMD_GET_INDEX(cmd), arg, r1);
		sd_mmc_spi_err = SD_MMC_SPI_ERR;
   1e51e:	4b27      	ldr	r3, [pc, #156]	; (1e5bc <sd_mmc_spi_adtc_start+0x1f0>)
   1e520:	2201      	movs	r2, #1
   1e522:	701a      	strb	r2, [r3, #0]
		return false;
   1e524:	2300      	movs	r3, #0
   1e526:	e044      	b.n	1e5b2 <sd_mmc_spi_adtc_start+0x1e6>
	}

	// Manage other responses
	if (cmd & SDMMC_RESP_BUSY) {
   1e528:	68fa      	ldr	r2, [r7, #12]
   1e52a:	2380      	movs	r3, #128	; 0x80
   1e52c:	019b      	lsls	r3, r3, #6
   1e52e:	4013      	ands	r3, r2
   1e530:	d00d      	beq.n	1e54e <sd_mmc_spi_adtc_start+0x182>
		if (!sd_mmc_spi_wait_busy()) {
   1e532:	4b28      	ldr	r3, [pc, #160]	; (1e5d4 <sd_mmc_spi_adtc_start+0x208>)
   1e534:	4798      	blx	r3
   1e536:	0003      	movs	r3, r0
   1e538:	001a      	movs	r2, r3
   1e53a:	2301      	movs	r3, #1
   1e53c:	4053      	eors	r3, r2
   1e53e:	b2db      	uxtb	r3, r3
   1e540:	2b00      	cmp	r3, #0
   1e542:	d004      	beq.n	1e54e <sd_mmc_spi_adtc_start+0x182>
			sd_mmc_spi_err = SD_MMC_SPI_ERR_RESP_BUSY_TIMEOUT;
   1e544:	4b1d      	ldr	r3, [pc, #116]	; (1e5bc <sd_mmc_spi_adtc_start+0x1f0>)
   1e546:	2203      	movs	r2, #3
   1e548:	701a      	strb	r2, [r3, #0]
			sd_mmc_spi_debug("%s: cmd %02d, arg 0x%08lx, Busy signal always high\n\r",
					__func__, (int)SDMMC_CMD_GET_INDEX(cmd), arg);
			return false;
   1e54a:	2300      	movs	r3, #0
   1e54c:	e031      	b.n	1e5b2 <sd_mmc_spi_adtc_start+0x1e6>
		}
	}
	if (cmd & SDMMC_RESP_8) {
   1e54e:	68fa      	ldr	r2, [r7, #12]
   1e550:	2380      	movs	r3, #128	; 0x80
   1e552:	009b      	lsls	r3, r3, #2
   1e554:	4013      	ands	r3, r2
   1e556:	d00e      	beq.n	1e576 <sd_mmc_spi_adtc_start+0x1aa>
		sd_mmc_spi_response_32 = 0;
   1e558:	4b1d      	ldr	r3, [pc, #116]	; (1e5d0 <sd_mmc_spi_adtc_start+0x204>)
   1e55a:	2200      	movs	r2, #0
   1e55c:	601a      	str	r2, [r3, #0]
		spi_read_buffer_wait(&sd_mmc_master, (uint8_t *)&sd_mmc_spi_response_32, 1,
   1e55e:	231c      	movs	r3, #28
   1e560:	18fb      	adds	r3, r7, r3
   1e562:	881b      	ldrh	r3, [r3, #0]
   1e564:	491a      	ldr	r1, [pc, #104]	; (1e5d0 <sd_mmc_spi_adtc_start+0x204>)
   1e566:	4817      	ldr	r0, [pc, #92]	; (1e5c4 <sd_mmc_spi_adtc_start+0x1f8>)
   1e568:	2201      	movs	r2, #1
   1e56a:	4c18      	ldr	r4, [pc, #96]	; (1e5cc <sd_mmc_spi_adtc_start+0x200>)
   1e56c:	47a0      	blx	r4
			dummy2);
		sd_mmc_spi_response_32 = le32_to_cpu(sd_mmc_spi_response_32);
   1e56e:	4b18      	ldr	r3, [pc, #96]	; (1e5d0 <sd_mmc_spi_adtc_start+0x204>)
   1e570:	681a      	ldr	r2, [r3, #0]
   1e572:	4b17      	ldr	r3, [pc, #92]	; (1e5d0 <sd_mmc_spi_adtc_start+0x204>)
   1e574:	601a      	str	r2, [r3, #0]
	}
	if (cmd & SDMMC_RESP_32) {
   1e576:	68fa      	ldr	r2, [r7, #12]
   1e578:	2380      	movs	r3, #128	; 0x80
   1e57a:	00db      	lsls	r3, r3, #3
   1e57c:	4013      	ands	r3, r2
   1e57e:	d00c      	beq.n	1e59a <sd_mmc_spi_adtc_start+0x1ce>
		spi_read_buffer_wait(&sd_mmc_master, (uint8_t *)&sd_mmc_spi_response_32, 4,
   1e580:	231c      	movs	r3, #28
   1e582:	18fb      	adds	r3, r7, r3
   1e584:	881b      	ldrh	r3, [r3, #0]
   1e586:	4912      	ldr	r1, [pc, #72]	; (1e5d0 <sd_mmc_spi_adtc_start+0x204>)
   1e588:	480e      	ldr	r0, [pc, #56]	; (1e5c4 <sd_mmc_spi_adtc_start+0x1f8>)
   1e58a:	2204      	movs	r2, #4
   1e58c:	4c0f      	ldr	r4, [pc, #60]	; (1e5cc <sd_mmc_spi_adtc_start+0x200>)
   1e58e:	47a0      	blx	r4
			dummy2);
		sd_mmc_spi_response_32 = be32_to_cpu(sd_mmc_spi_response_32);
   1e590:	4b0f      	ldr	r3, [pc, #60]	; (1e5d0 <sd_mmc_spi_adtc_start+0x204>)
   1e592:	681b      	ldr	r3, [r3, #0]
   1e594:	ba1a      	rev	r2, r3
   1e596:	4b0e      	ldr	r3, [pc, #56]	; (1e5d0 <sd_mmc_spi_adtc_start+0x204>)
   1e598:	601a      	str	r2, [r3, #0]
	}

	sd_mmc_spi_block_size = block_size;
   1e59a:	4b0f      	ldr	r3, [pc, #60]	; (1e5d8 <sd_mmc_spi_adtc_start+0x20c>)
   1e59c:	1dba      	adds	r2, r7, #6
   1e59e:	8812      	ldrh	r2, [r2, #0]
   1e5a0:	801a      	strh	r2, [r3, #0]
	sd_mmc_spi_nb_block = nb_block;
   1e5a2:	4b0e      	ldr	r3, [pc, #56]	; (1e5dc <sd_mmc_spi_adtc_start+0x210>)
   1e5a4:	1d3a      	adds	r2, r7, #4
   1e5a6:	8812      	ldrh	r2, [r2, #0]
   1e5a8:	801a      	strh	r2, [r3, #0]
	sd_mmc_spi_transfert_pos = 0;
   1e5aa:	4b0d      	ldr	r3, [pc, #52]	; (1e5e0 <sd_mmc_spi_adtc_start+0x214>)
   1e5ac:	2200      	movs	r2, #0
   1e5ae:	601a      	str	r2, [r3, #0]
	return true; // Command complete
   1e5b0:	2301      	movs	r3, #1
}
   1e5b2:	0018      	movs	r0, r3
   1e5b4:	46bd      	mov	sp, r7
   1e5b6:	b009      	add	sp, #36	; 0x24
   1e5b8:	bd90      	pop	{r4, r7, pc}
   1e5ba:	46c0      	nop			; (mov r8, r8)
   1e5bc:	20003d2f 	.word	0x20003d2f
   1e5c0:	0001de6d 	.word	0x0001de6d
   1e5c4:	20003cec 	.word	0x20003cec
   1e5c8:	00026a25 	.word	0x00026a25
   1e5cc:	00026801 	.word	0x00026801
   1e5d0:	20003d30 	.word	0x20003d30
   1e5d4:	0001df29 	.word	0x0001df29
   1e5d8:	20003d38 	.word	0x20003d38
   1e5dc:	20003d3a 	.word	0x20003d3a
   1e5e0:	20003d34 	.word	0x20003d34

0001e5e4 <sd_mmc_spi_get_response>:

uint32_t sd_mmc_spi_get_response(void)
{
   1e5e4:	b580      	push	{r7, lr}
   1e5e6:	af00      	add	r7, sp, #0
	return sd_mmc_spi_response_32;
   1e5e8:	4b02      	ldr	r3, [pc, #8]	; (1e5f4 <sd_mmc_spi_get_response+0x10>)
   1e5ea:	681b      	ldr	r3, [r3, #0]
}
   1e5ec:	0018      	movs	r0, r3
   1e5ee:	46bd      	mov	sp, r7
   1e5f0:	bd80      	pop	{r7, pc}
   1e5f2:	46c0      	nop			; (mov r8, r8)
   1e5f4:	20003d30 	.word	0x20003d30

0001e5f8 <sd_mmc_spi_read_word>:

bool sd_mmc_spi_read_word(uint32_t* value)
{
   1e5f8:	b590      	push	{r4, r7, lr}
   1e5fa:	b085      	sub	sp, #20
   1e5fc:	af00      	add	r7, sp, #0
   1e5fe:	6078      	str	r0, [r7, #4]
	uint16_t dummy = 0xFF;
   1e600:	230e      	movs	r3, #14
   1e602:	18fb      	adds	r3, r7, r3
   1e604:	22ff      	movs	r2, #255	; 0xff
   1e606:	801a      	strh	r2, [r3, #0]

	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
   1e608:	4b1c      	ldr	r3, [pc, #112]	; (1e67c <sd_mmc_spi_read_word+0x84>)
   1e60a:	2200      	movs	r2, #0
   1e60c:	701a      	strb	r2, [r3, #0]
	Assert(sd_mmc_spi_nb_block >
			(sd_mmc_spi_transfert_pos / sd_mmc_spi_block_size));

	if (!(sd_mmc_spi_transfert_pos % sd_mmc_spi_block_size)) {
   1e60e:	4b1c      	ldr	r3, [pc, #112]	; (1e680 <sd_mmc_spi_read_word+0x88>)
   1e610:	681a      	ldr	r2, [r3, #0]
   1e612:	4b1c      	ldr	r3, [pc, #112]	; (1e684 <sd_mmc_spi_read_word+0x8c>)
   1e614:	881b      	ldrh	r3, [r3, #0]
   1e616:	0019      	movs	r1, r3
   1e618:	4b1b      	ldr	r3, [pc, #108]	; (1e688 <sd_mmc_spi_read_word+0x90>)
   1e61a:	0010      	movs	r0, r2
   1e61c:	4798      	blx	r3
   1e61e:	1e0b      	subs	r3, r1, #0
   1e620:	d10a      	bne.n	1e638 <sd_mmc_spi_read_word+0x40>
		// New block
		if (!sd_mmc_spi_start_read_block()) {
   1e622:	4b1a      	ldr	r3, [pc, #104]	; (1e68c <sd_mmc_spi_read_word+0x94>)
   1e624:	4798      	blx	r3
   1e626:	0003      	movs	r3, r0
   1e628:	001a      	movs	r2, r3
   1e62a:	2301      	movs	r3, #1
   1e62c:	4053      	eors	r3, r2
   1e62e:	b2db      	uxtb	r3, r3
   1e630:	2b00      	cmp	r3, #0
   1e632:	d001      	beq.n	1e638 <sd_mmc_spi_read_word+0x40>
			return false;
   1e634:	2300      	movs	r3, #0
   1e636:	e01d      	b.n	1e674 <sd_mmc_spi_read_word+0x7c>
		}
	}
	// Read data
	spi_read_buffer_wait(&sd_mmc_master, (uint8_t *)&value, 4,
   1e638:	230e      	movs	r3, #14
   1e63a:	18fb      	adds	r3, r7, r3
   1e63c:	881b      	ldrh	r3, [r3, #0]
   1e63e:	1d39      	adds	r1, r7, #4
   1e640:	4813      	ldr	r0, [pc, #76]	; (1e690 <sd_mmc_spi_read_word+0x98>)
   1e642:	2204      	movs	r2, #4
   1e644:	4c13      	ldr	r4, [pc, #76]	; (1e694 <sd_mmc_spi_read_word+0x9c>)
   1e646:	47a0      	blx	r4
			dummy);
	*value = le32_to_cpu(*value);
   1e648:	687b      	ldr	r3, [r7, #4]
   1e64a:	687a      	ldr	r2, [r7, #4]
   1e64c:	6812      	ldr	r2, [r2, #0]
   1e64e:	601a      	str	r2, [r3, #0]
	sd_mmc_spi_transfert_pos += 4;
   1e650:	4b0b      	ldr	r3, [pc, #44]	; (1e680 <sd_mmc_spi_read_word+0x88>)
   1e652:	681b      	ldr	r3, [r3, #0]
   1e654:	1d1a      	adds	r2, r3, #4
   1e656:	4b0a      	ldr	r3, [pc, #40]	; (1e680 <sd_mmc_spi_read_word+0x88>)
   1e658:	601a      	str	r2, [r3, #0]

	if (!(sd_mmc_spi_transfert_pos % sd_mmc_spi_block_size)) {
   1e65a:	4b09      	ldr	r3, [pc, #36]	; (1e680 <sd_mmc_spi_read_word+0x88>)
   1e65c:	681a      	ldr	r2, [r3, #0]
   1e65e:	4b09      	ldr	r3, [pc, #36]	; (1e684 <sd_mmc_spi_read_word+0x8c>)
   1e660:	881b      	ldrh	r3, [r3, #0]
   1e662:	0019      	movs	r1, r3
   1e664:	4b08      	ldr	r3, [pc, #32]	; (1e688 <sd_mmc_spi_read_word+0x90>)
   1e666:	0010      	movs	r0, r2
   1e668:	4798      	blx	r3
   1e66a:	1e0b      	subs	r3, r1, #0
   1e66c:	d101      	bne.n	1e672 <sd_mmc_spi_read_word+0x7a>
		// End of block
		sd_mmc_spi_stop_read_block();
   1e66e:	4b0a      	ldr	r3, [pc, #40]	; (1e698 <sd_mmc_spi_read_word+0xa0>)
   1e670:	4798      	blx	r3
	}
	return true;
   1e672:	2301      	movs	r3, #1
}
   1e674:	0018      	movs	r0, r3
   1e676:	46bd      	mov	sp, r7
   1e678:	b005      	add	sp, #20
   1e67a:	bd90      	pop	{r4, r7, pc}
   1e67c:	20003d2f 	.word	0x20003d2f
   1e680:	20003d34 	.word	0x20003d34
   1e684:	20003d38 	.word	0x20003d38
   1e688:	000311f9 	.word	0x000311f9
   1e68c:	0001df95 	.word	0x0001df95
   1e690:	20003cec 	.word	0x20003cec
   1e694:	00026801 	.word	0x00026801
   1e698:	0001e019 	.word	0x0001e019

0001e69c <sd_mmc_spi_start_read_blocks>:
	}
	return sd_mmc_spi_stop_multiwrite_block();
}

bool sd_mmc_spi_start_read_blocks(void *dest, uint16_t nb_block)
{
   1e69c:	b590      	push	{r4, r7, lr}
   1e69e:	b085      	sub	sp, #20
   1e6a0:	af00      	add	r7, sp, #0
   1e6a2:	6078      	str	r0, [r7, #4]
   1e6a4:	000a      	movs	r2, r1
   1e6a6:	1cbb      	adds	r3, r7, #2
   1e6a8:	801a      	strh	r2, [r3, #0]
	uint32_t pos;
	uint16_t dummy = 0xFF;
   1e6aa:	230a      	movs	r3, #10
   1e6ac:	18fb      	adds	r3, r7, r3
   1e6ae:	22ff      	movs	r2, #255	; 0xff
   1e6b0:	801a      	strh	r2, [r3, #0]

	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
   1e6b2:	4b1c      	ldr	r3, [pc, #112]	; (1e724 <sd_mmc_spi_start_read_blocks+0x88>)
   1e6b4:	2200      	movs	r2, #0
   1e6b6:	701a      	strb	r2, [r3, #0]
	pos = 0;
   1e6b8:	2300      	movs	r3, #0
   1e6ba:	60fb      	str	r3, [r7, #12]
	while (nb_block--) {
   1e6bc:	e025      	b.n	1e70a <sd_mmc_spi_start_read_blocks+0x6e>
		Assert(sd_mmc_spi_nb_block >
				(sd_mmc_spi_transfert_pos / sd_mmc_spi_block_size));
		if (!sd_mmc_spi_start_read_block()) {
   1e6be:	4b1a      	ldr	r3, [pc, #104]	; (1e728 <sd_mmc_spi_start_read_blocks+0x8c>)
   1e6c0:	4798      	blx	r3
   1e6c2:	0003      	movs	r3, r0
   1e6c4:	001a      	movs	r2, r3
   1e6c6:	2301      	movs	r3, #1
   1e6c8:	4053      	eors	r3, r2
   1e6ca:	b2db      	uxtb	r3, r3
   1e6cc:	2b00      	cmp	r3, #0
   1e6ce:	d001      	beq.n	1e6d4 <sd_mmc_spi_start_read_blocks+0x38>
			return false;
   1e6d0:	2300      	movs	r3, #0
   1e6d2:	e022      	b.n	1e71a <sd_mmc_spi_start_read_blocks+0x7e>
		}

		// Read block
		spi_read_buffer_wait(&sd_mmc_master, &((uint8_t*)dest)[pos],
   1e6d4:	687a      	ldr	r2, [r7, #4]
   1e6d6:	68fb      	ldr	r3, [r7, #12]
   1e6d8:	18d1      	adds	r1, r2, r3
   1e6da:	4b14      	ldr	r3, [pc, #80]	; (1e72c <sd_mmc_spi_start_read_blocks+0x90>)
   1e6dc:	881a      	ldrh	r2, [r3, #0]
   1e6de:	230a      	movs	r3, #10
   1e6e0:	18fb      	adds	r3, r7, r3
   1e6e2:	881b      	ldrh	r3, [r3, #0]
   1e6e4:	4812      	ldr	r0, [pc, #72]	; (1e730 <sd_mmc_spi_start_read_blocks+0x94>)
   1e6e6:	4c13      	ldr	r4, [pc, #76]	; (1e734 <sd_mmc_spi_start_read_blocks+0x98>)
   1e6e8:	47a0      	blx	r4
			sd_mmc_spi_block_size, dummy);
		pos += sd_mmc_spi_block_size;
   1e6ea:	4b10      	ldr	r3, [pc, #64]	; (1e72c <sd_mmc_spi_start_read_blocks+0x90>)
   1e6ec:	881b      	ldrh	r3, [r3, #0]
   1e6ee:	001a      	movs	r2, r3
   1e6f0:	68fb      	ldr	r3, [r7, #12]
   1e6f2:	189b      	adds	r3, r3, r2
   1e6f4:	60fb      	str	r3, [r7, #12]
		sd_mmc_spi_transfert_pos += sd_mmc_spi_block_size;
   1e6f6:	4b0d      	ldr	r3, [pc, #52]	; (1e72c <sd_mmc_spi_start_read_blocks+0x90>)
   1e6f8:	881b      	ldrh	r3, [r3, #0]
   1e6fa:	001a      	movs	r2, r3
   1e6fc:	4b0e      	ldr	r3, [pc, #56]	; (1e738 <sd_mmc_spi_start_read_blocks+0x9c>)
   1e6fe:	681b      	ldr	r3, [r3, #0]
   1e700:	18d2      	adds	r2, r2, r3
   1e702:	4b0d      	ldr	r3, [pc, #52]	; (1e738 <sd_mmc_spi_start_read_blocks+0x9c>)
   1e704:	601a      	str	r2, [r3, #0]

		sd_mmc_spi_stop_read_block();
   1e706:	4b0d      	ldr	r3, [pc, #52]	; (1e73c <sd_mmc_spi_start_read_blocks+0xa0>)
   1e708:	4798      	blx	r3
	while (nb_block--) {
   1e70a:	1cbb      	adds	r3, r7, #2
   1e70c:	881b      	ldrh	r3, [r3, #0]
   1e70e:	1cba      	adds	r2, r7, #2
   1e710:	1e59      	subs	r1, r3, #1
   1e712:	8011      	strh	r1, [r2, #0]
   1e714:	2b00      	cmp	r3, #0
   1e716:	d1d2      	bne.n	1e6be <sd_mmc_spi_start_read_blocks+0x22>
	}
	return true;
   1e718:	2301      	movs	r3, #1
}
   1e71a:	0018      	movs	r0, r3
   1e71c:	46bd      	mov	sp, r7
   1e71e:	b005      	add	sp, #20
   1e720:	bd90      	pop	{r4, r7, pc}
   1e722:	46c0      	nop			; (mov r8, r8)
   1e724:	20003d2f 	.word	0x20003d2f
   1e728:	0001df95 	.word	0x0001df95
   1e72c:	20003d38 	.word	0x20003d38
   1e730:	20003cec 	.word	0x20003cec
   1e734:	00026801 	.word	0x00026801
   1e738:	20003d34 	.word	0x20003d34
   1e73c:	0001e019 	.word	0x0001e019

0001e740 <sd_mmc_spi_wait_end_of_read_blocks>:

bool sd_mmc_spi_wait_end_of_read_blocks(void)
{
   1e740:	b580      	push	{r7, lr}
   1e742:	af00      	add	r7, sp, #0
	return true;
   1e744:	2301      	movs	r3, #1
}
   1e746:	0018      	movs	r0, r3
   1e748:	46bd      	mov	sp, r7
   1e74a:	bd80      	pop	{r7, pc}

0001e74c <sd_mmc_spi_start_write_blocks>:

bool sd_mmc_spi_start_write_blocks(const void *src, uint16_t nb_block)
{
   1e74c:	b580      	push	{r7, lr}
   1e74e:	b084      	sub	sp, #16
   1e750:	af00      	add	r7, sp, #0
   1e752:	6078      	str	r0, [r7, #4]
   1e754:	000a      	movs	r2, r1
   1e756:	1cbb      	adds	r3, r7, #2
   1e758:	801a      	strh	r2, [r3, #0]
	uint32_t pos;

	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
   1e75a:	4b24      	ldr	r3, [pc, #144]	; (1e7ec <sd_mmc_spi_start_write_blocks+0xa0>)
   1e75c:	2200      	movs	r2, #0
   1e75e:	701a      	strb	r2, [r3, #0]
	pos = 0;
   1e760:	2300      	movs	r3, #0
   1e762:	60fb      	str	r3, [r7, #12]
	while (nb_block--) {
   1e764:	e035      	b.n	1e7d2 <sd_mmc_spi_start_write_blocks+0x86>
		Assert(sd_mmc_spi_nb_block >
				(sd_mmc_spi_transfert_pos / sd_mmc_spi_block_size));
		sd_mmc_spi_start_write_block();
   1e766:	4b22      	ldr	r3, [pc, #136]	; (1e7f0 <sd_mmc_spi_start_write_blocks+0xa4>)
   1e768:	4798      	blx	r3

		// Write block
		spi_write_buffer_wait(&sd_mmc_master, &((uint8_t*)src)[pos],
   1e76a:	687a      	ldr	r2, [r7, #4]
   1e76c:	68fb      	ldr	r3, [r7, #12]
   1e76e:	18d1      	adds	r1, r2, r3
   1e770:	4b20      	ldr	r3, [pc, #128]	; (1e7f4 <sd_mmc_spi_start_write_blocks+0xa8>)
   1e772:	881a      	ldrh	r2, [r3, #0]
   1e774:	4b20      	ldr	r3, [pc, #128]	; (1e7f8 <sd_mmc_spi_start_write_blocks+0xac>)
   1e776:	0018      	movs	r0, r3
   1e778:	4b20      	ldr	r3, [pc, #128]	; (1e7fc <sd_mmc_spi_start_write_blocks+0xb0>)
   1e77a:	4798      	blx	r3
				sd_mmc_spi_block_size);
		pos += sd_mmc_spi_block_size;
   1e77c:	4b1d      	ldr	r3, [pc, #116]	; (1e7f4 <sd_mmc_spi_start_write_blocks+0xa8>)
   1e77e:	881b      	ldrh	r3, [r3, #0]
   1e780:	001a      	movs	r2, r3
   1e782:	68fb      	ldr	r3, [r7, #12]
   1e784:	189b      	adds	r3, r3, r2
   1e786:	60fb      	str	r3, [r7, #12]
		sd_mmc_spi_transfert_pos += sd_mmc_spi_block_size;
   1e788:	4b1a      	ldr	r3, [pc, #104]	; (1e7f4 <sd_mmc_spi_start_write_blocks+0xa8>)
   1e78a:	881b      	ldrh	r3, [r3, #0]
   1e78c:	001a      	movs	r2, r3
   1e78e:	4b1c      	ldr	r3, [pc, #112]	; (1e800 <sd_mmc_spi_start_write_blocks+0xb4>)
   1e790:	681b      	ldr	r3, [r3, #0]
   1e792:	18d2      	adds	r2, r2, r3
   1e794:	4b1a      	ldr	r3, [pc, #104]	; (1e800 <sd_mmc_spi_start_write_blocks+0xb4>)
   1e796:	601a      	str	r2, [r3, #0]

		if (!sd_mmc_spi_stop_write_block()) {
   1e798:	4b1a      	ldr	r3, [pc, #104]	; (1e804 <sd_mmc_spi_start_write_blocks+0xb8>)
   1e79a:	4798      	blx	r3
   1e79c:	0003      	movs	r3, r0
   1e79e:	001a      	movs	r2, r3
   1e7a0:	2301      	movs	r3, #1
   1e7a2:	4053      	eors	r3, r2
   1e7a4:	b2db      	uxtb	r3, r3
   1e7a6:	2b00      	cmp	r3, #0
   1e7a8:	d001      	beq.n	1e7ae <sd_mmc_spi_start_write_blocks+0x62>
			return false;
   1e7aa:	2300      	movs	r3, #0
   1e7ac:	e019      	b.n	1e7e2 <sd_mmc_spi_start_write_blocks+0x96>
		}
		// Do not check busy of last block
		// but delay it to mci_wait_end_of_write_blocks()
		if (nb_block) {
   1e7ae:	1cbb      	adds	r3, r7, #2
   1e7b0:	881b      	ldrh	r3, [r3, #0]
   1e7b2:	2b00      	cmp	r3, #0
   1e7b4:	d00d      	beq.n	1e7d2 <sd_mmc_spi_start_write_blocks+0x86>
			// Wait busy due to data programmation
			if (!sd_mmc_spi_wait_busy()) {
   1e7b6:	4b14      	ldr	r3, [pc, #80]	; (1e808 <sd_mmc_spi_start_write_blocks+0xbc>)
   1e7b8:	4798      	blx	r3
   1e7ba:	0003      	movs	r3, r0
   1e7bc:	001a      	movs	r2, r3
   1e7be:	2301      	movs	r3, #1
   1e7c0:	4053      	eors	r3, r2
   1e7c2:	b2db      	uxtb	r3, r3
   1e7c4:	2b00      	cmp	r3, #0
   1e7c6:	d004      	beq.n	1e7d2 <sd_mmc_spi_start_write_blocks+0x86>
				sd_mmc_spi_err = SD_MMC_SPI_ERR_WRITE_TIMEOUT;
   1e7c8:	4b08      	ldr	r3, [pc, #32]	; (1e7ec <sd_mmc_spi_start_write_blocks+0xa0>)
   1e7ca:	2205      	movs	r2, #5
   1e7cc:	701a      	strb	r2, [r3, #0]
				sd_mmc_spi_debug("%s: Write blocks timeout\n\r", __func__);
				return false;
   1e7ce:	2300      	movs	r3, #0
   1e7d0:	e007      	b.n	1e7e2 <sd_mmc_spi_start_write_blocks+0x96>
	while (nb_block--) {
   1e7d2:	1cbb      	adds	r3, r7, #2
   1e7d4:	881b      	ldrh	r3, [r3, #0]
   1e7d6:	1cba      	adds	r2, r7, #2
   1e7d8:	1e59      	subs	r1, r3, #1
   1e7da:	8011      	strh	r1, [r2, #0]
   1e7dc:	2b00      	cmp	r3, #0
   1e7de:	d1c2      	bne.n	1e766 <sd_mmc_spi_start_write_blocks+0x1a>
			}
		}
	}
	return true;
   1e7e0:	2301      	movs	r3, #1
}
   1e7e2:	0018      	movs	r0, r3
   1e7e4:	46bd      	mov	sp, r7
   1e7e6:	b004      	add	sp, #16
   1e7e8:	bd80      	pop	{r7, pc}
   1e7ea:	46c0      	nop			; (mov r8, r8)
   1e7ec:	20003d2f 	.word	0x20003d2f
   1e7f0:	0001e045 	.word	0x0001e045
   1e7f4:	20003d38 	.word	0x20003d38
   1e7f8:	20003cec 	.word	0x20003cec
   1e7fc:	00026a25 	.word	0x00026a25
   1e800:	20003d34 	.word	0x20003d34
   1e804:	0001e095 	.word	0x0001e095
   1e808:	0001df29 	.word	0x0001df29

0001e80c <sd_mmc_spi_wait_end_of_write_blocks>:

bool sd_mmc_spi_wait_end_of_write_blocks(void)
{
   1e80c:	b580      	push	{r7, lr}
   1e80e:	af00      	add	r7, sp, #0
	// Wait busy due to data programmation of last block writed
	if (!sd_mmc_spi_wait_busy()) {
   1e810:	4b09      	ldr	r3, [pc, #36]	; (1e838 <sd_mmc_spi_wait_end_of_write_blocks+0x2c>)
   1e812:	4798      	blx	r3
   1e814:	0003      	movs	r3, r0
   1e816:	001a      	movs	r2, r3
   1e818:	2301      	movs	r3, #1
   1e81a:	4053      	eors	r3, r2
   1e81c:	b2db      	uxtb	r3, r3
   1e81e:	2b00      	cmp	r3, #0
   1e820:	d004      	beq.n	1e82c <sd_mmc_spi_wait_end_of_write_blocks+0x20>
		sd_mmc_spi_err = SD_MMC_SPI_ERR_WRITE_TIMEOUT;
   1e822:	4b06      	ldr	r3, [pc, #24]	; (1e83c <sd_mmc_spi_wait_end_of_write_blocks+0x30>)
   1e824:	2205      	movs	r2, #5
   1e826:	701a      	strb	r2, [r3, #0]
		sd_mmc_spi_debug("%s: Write blocks timeout\n\r", __func__);
		return false;
   1e828:	2300      	movs	r3, #0
   1e82a:	e002      	b.n	1e832 <sd_mmc_spi_wait_end_of_write_blocks+0x26>
	}
	return sd_mmc_spi_stop_multiwrite_block();
   1e82c:	4b04      	ldr	r3, [pc, #16]	; (1e840 <sd_mmc_spi_wait_end_of_write_blocks+0x34>)
   1e82e:	4798      	blx	r3
   1e830:	0003      	movs	r3, r0
}
   1e832:	0018      	movs	r0, r3
   1e834:	46bd      	mov	sp, r7
   1e836:	bd80      	pop	{r7, pc}
   1e838:	0001df29 	.word	0x0001df29
   1e83c:	20003d2f 	.word	0x20003d2f
   1e840:	0001e129 	.word	0x0001e129

0001e844 <delay_cycles>:
 *
 * \param n  Number of cycles to delay
 */
static inline void delay_cycles(
		const uint32_t n)
{
   1e844:	b580      	push	{r7, lr}
   1e846:	b082      	sub	sp, #8
   1e848:	af00      	add	r7, sp, #0
   1e84a:	6078      	str	r0, [r7, #4]
	if (n > 0) {
   1e84c:	687b      	ldr	r3, [r7, #4]
   1e84e:	2b00      	cmp	r3, #0
   1e850:	d00c      	beq.n	1e86c <delay_cycles+0x28>
		SysTick->LOAD = n;
   1e852:	4b08      	ldr	r3, [pc, #32]	; (1e874 <delay_cycles+0x30>)
   1e854:	687a      	ldr	r2, [r7, #4]
   1e856:	605a      	str	r2, [r3, #4]
		SysTick->VAL = 0;
   1e858:	4b06      	ldr	r3, [pc, #24]	; (1e874 <delay_cycles+0x30>)
   1e85a:	2200      	movs	r2, #0
   1e85c:	609a      	str	r2, [r3, #8]

		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
   1e85e:	46c0      	nop			; (mov r8, r8)
   1e860:	4b04      	ldr	r3, [pc, #16]	; (1e874 <delay_cycles+0x30>)
   1e862:	681a      	ldr	r2, [r3, #0]
   1e864:	2380      	movs	r3, #128	; 0x80
   1e866:	025b      	lsls	r3, r3, #9
   1e868:	4013      	ands	r3, r2
   1e86a:	d0f9      	beq.n	1e860 <delay_cycles+0x1c>
		};
	}
}
   1e86c:	46c0      	nop			; (mov r8, r8)
   1e86e:	46bd      	mov	sp, r7
   1e870:	b002      	add	sp, #8
   1e872:	bd80      	pop	{r7, pc}
   1e874:	e000e010 	.word	0xe000e010

0001e878 <delay_init>:
 *
 * This must be called during start up to initialize the delay routine with
 * the current used main clock. It must run any time the main CPU clock is changed.
 */
void delay_init(void)
{
   1e878:	b580      	push	{r7, lr}
   1e87a:	af00      	add	r7, sp, #0
	cycles_per_ms = system_gclk_gen_get_hz(0);
   1e87c:	2000      	movs	r0, #0
   1e87e:	4b0f      	ldr	r3, [pc, #60]	; (1e8bc <delay_init+0x44>)
   1e880:	4798      	blx	r3
   1e882:	0002      	movs	r2, r0
   1e884:	4b0e      	ldr	r3, [pc, #56]	; (1e8c0 <delay_init+0x48>)
   1e886:	601a      	str	r2, [r3, #0]
	cycles_per_ms /= 1000;
   1e888:	4b0d      	ldr	r3, [pc, #52]	; (1e8c0 <delay_init+0x48>)
   1e88a:	6818      	ldr	r0, [r3, #0]
   1e88c:	4b0d      	ldr	r3, [pc, #52]	; (1e8c4 <delay_init+0x4c>)
   1e88e:	22fa      	movs	r2, #250	; 0xfa
   1e890:	0091      	lsls	r1, r2, #2
   1e892:	4798      	blx	r3
   1e894:	0003      	movs	r3, r0
   1e896:	001a      	movs	r2, r3
   1e898:	4b09      	ldr	r3, [pc, #36]	; (1e8c0 <delay_init+0x48>)
   1e89a:	601a      	str	r2, [r3, #0]
	cycles_per_us = cycles_per_ms / 1000;
   1e89c:	4b08      	ldr	r3, [pc, #32]	; (1e8c0 <delay_init+0x48>)
   1e89e:	6818      	ldr	r0, [r3, #0]
   1e8a0:	4b08      	ldr	r3, [pc, #32]	; (1e8c4 <delay_init+0x4c>)
   1e8a2:	22fa      	movs	r2, #250	; 0xfa
   1e8a4:	0091      	lsls	r1, r2, #2
   1e8a6:	4798      	blx	r3
   1e8a8:	0003      	movs	r3, r0
   1e8aa:	001a      	movs	r2, r3
   1e8ac:	4b06      	ldr	r3, [pc, #24]	; (1e8c8 <delay_init+0x50>)
   1e8ae:	601a      	str	r2, [r3, #0]

	SysTick->CTRL = SysTick_CTRL_CLKSOURCE_Msk | SysTick_CTRL_ENABLE_Msk;
   1e8b0:	4b06      	ldr	r3, [pc, #24]	; (1e8cc <delay_init+0x54>)
   1e8b2:	2205      	movs	r2, #5
   1e8b4:	601a      	str	r2, [r3, #0]
}
   1e8b6:	46c0      	nop			; (mov r8, r8)
   1e8b8:	46bd      	mov	sp, r7
   1e8ba:	bd80      	pop	{r7, pc}
   1e8bc:	000285a9 	.word	0x000285a9
   1e8c0:	2000012c 	.word	0x2000012c
   1e8c4:	000310ed 	.word	0x000310ed
   1e8c8:	20000130 	.word	0x20000130
   1e8cc:	e000e010 	.word	0xe000e010

0001e8d0 <delay_cycles_us>:
 *
 * \param n  Number of microseconds to wait
 */
void delay_cycles_us(
		uint32_t n)
{
   1e8d0:	b580      	push	{r7, lr}
   1e8d2:	b082      	sub	sp, #8
   1e8d4:	af00      	add	r7, sp, #0
   1e8d6:	6078      	str	r0, [r7, #4]
	while (n--) {
   1e8d8:	e004      	b.n	1e8e4 <delay_cycles_us+0x14>
		/* Devide up to blocks of 10u */
		delay_cycles(cycles_per_us);
   1e8da:	4b07      	ldr	r3, [pc, #28]	; (1e8f8 <delay_cycles_us+0x28>)
   1e8dc:	681b      	ldr	r3, [r3, #0]
   1e8de:	0018      	movs	r0, r3
   1e8e0:	4b06      	ldr	r3, [pc, #24]	; (1e8fc <delay_cycles_us+0x2c>)
   1e8e2:	4798      	blx	r3
	while (n--) {
   1e8e4:	687b      	ldr	r3, [r7, #4]
   1e8e6:	1e5a      	subs	r2, r3, #1
   1e8e8:	607a      	str	r2, [r7, #4]
   1e8ea:	2b00      	cmp	r3, #0
   1e8ec:	d1f5      	bne.n	1e8da <delay_cycles_us+0xa>
	}
}
   1e8ee:	46c0      	nop			; (mov r8, r8)
   1e8f0:	46bd      	mov	sp, r7
   1e8f2:	b002      	add	sp, #8
   1e8f4:	bd80      	pop	{r7, pc}
   1e8f6:	46c0      	nop			; (mov r8, r8)
   1e8f8:	20000130 	.word	0x20000130
   1e8fc:	0001e845 	.word	0x0001e845

0001e900 <delay_cycles_ms>:
 *
 * \param n  Number of milliseconds to wait
 */
void delay_cycles_ms(
		uint32_t n)
{
   1e900:	b580      	push	{r7, lr}
   1e902:	b082      	sub	sp, #8
   1e904:	af00      	add	r7, sp, #0
   1e906:	6078      	str	r0, [r7, #4]
	while (n--) {
   1e908:	e004      	b.n	1e914 <delay_cycles_ms+0x14>
		/* Devide up to blocks of 1ms */
		delay_cycles(cycles_per_ms);
   1e90a:	4b07      	ldr	r3, [pc, #28]	; (1e928 <delay_cycles_ms+0x28>)
   1e90c:	681b      	ldr	r3, [r3, #0]
   1e90e:	0018      	movs	r0, r3
   1e910:	4b06      	ldr	r3, [pc, #24]	; (1e92c <delay_cycles_ms+0x2c>)
   1e912:	4798      	blx	r3
	while (n--) {
   1e914:	687b      	ldr	r3, [r7, #4]
   1e916:	1e5a      	subs	r2, r3, #1
   1e918:	607a      	str	r2, [r7, #4]
   1e91a:	2b00      	cmp	r3, #0
   1e91c:	d1f5      	bne.n	1e90a <delay_cycles_ms+0xa>
	}
}
   1e91e:	46c0      	nop			; (mov r8, r8)
   1e920:	46bd      	mov	sp, r7
   1e922:	b002      	add	sp, #8
   1e924:	bd80      	pop	{r7, pc}
   1e926:	46c0      	nop			; (mov r8, r8)
   1e928:	2000012c 	.word	0x2000012c
   1e92c:	0001e845 	.word	0x0001e845

0001e930 <system_pinmux_get_group_from_gpio_pin>:
{
   1e930:	b580      	push	{r7, lr}
   1e932:	b084      	sub	sp, #16
   1e934:	af00      	add	r7, sp, #0
   1e936:	0002      	movs	r2, r0
   1e938:	1dfb      	adds	r3, r7, #7
   1e93a:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
   1e93c:	230f      	movs	r3, #15
   1e93e:	18fb      	adds	r3, r7, r3
   1e940:	1dfa      	adds	r2, r7, #7
   1e942:	7812      	ldrb	r2, [r2, #0]
   1e944:	09d2      	lsrs	r2, r2, #7
   1e946:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
   1e948:	230e      	movs	r3, #14
   1e94a:	18fb      	adds	r3, r7, r3
   1e94c:	1dfa      	adds	r2, r7, #7
   1e94e:	7812      	ldrb	r2, [r2, #0]
   1e950:	0952      	lsrs	r2, r2, #5
   1e952:	701a      	strb	r2, [r3, #0]
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
   1e954:	4b0d      	ldr	r3, [pc, #52]	; (1e98c <system_pinmux_get_group_from_gpio_pin+0x5c>)
   1e956:	60bb      	str	r3, [r7, #8]
	if (port_index < PORT_INST_NUM) {
   1e958:	230f      	movs	r3, #15
   1e95a:	18fb      	adds	r3, r7, r3
   1e95c:	781b      	ldrb	r3, [r3, #0]
   1e95e:	2b00      	cmp	r3, #0
   1e960:	d10f      	bne.n	1e982 <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
   1e962:	230f      	movs	r3, #15
   1e964:	18fb      	adds	r3, r7, r3
   1e966:	781b      	ldrb	r3, [r3, #0]
   1e968:	009b      	lsls	r3, r3, #2
   1e96a:	2210      	movs	r2, #16
   1e96c:	4694      	mov	ip, r2
   1e96e:	44bc      	add	ip, r7
   1e970:	4463      	add	r3, ip
   1e972:	3b08      	subs	r3, #8
   1e974:	681a      	ldr	r2, [r3, #0]
   1e976:	230e      	movs	r3, #14
   1e978:	18fb      	adds	r3, r7, r3
   1e97a:	781b      	ldrb	r3, [r3, #0]
   1e97c:	01db      	lsls	r3, r3, #7
   1e97e:	18d3      	adds	r3, r2, r3
   1e980:	e000      	b.n	1e984 <system_pinmux_get_group_from_gpio_pin+0x54>
		return NULL;
   1e982:	2300      	movs	r3, #0
}
   1e984:	0018      	movs	r0, r3
   1e986:	46bd      	mov	sp, r7
   1e988:	b004      	add	sp, #16
   1e98a:	bd80      	pop	{r7, pc}
   1e98c:	41004400 	.word	0x41004400

0001e990 <system_interrupt_enable_global>:
{
   1e990:	b580      	push	{r7, lr}
   1e992:	af00      	add	r7, sp, #0
	cpu_irq_enable();
   1e994:	4b04      	ldr	r3, [pc, #16]	; (1e9a8 <system_interrupt_enable_global+0x18>)
   1e996:	2201      	movs	r2, #1
   1e998:	701a      	strb	r2, [r3, #0]
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
   1e99a:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
   1e99e:	b662      	cpsie	i
}
   1e9a0:	46c0      	nop			; (mov r8, r8)
   1e9a2:	46bd      	mov	sp, r7
   1e9a4:	bd80      	pop	{r7, pc}
   1e9a6:	46c0      	nop			; (mov r8, r8)
   1e9a8:	20000136 	.word	0x20000136

0001e9ac <port_get_group_from_gpio_pin>:
{
   1e9ac:	b580      	push	{r7, lr}
   1e9ae:	b082      	sub	sp, #8
   1e9b0:	af00      	add	r7, sp, #0
   1e9b2:	0002      	movs	r2, r0
   1e9b4:	1dfb      	adds	r3, r7, #7
   1e9b6:	701a      	strb	r2, [r3, #0]
	return system_pinmux_get_group_from_gpio_pin(gpio_pin);
   1e9b8:	1dfb      	adds	r3, r7, #7
   1e9ba:	781b      	ldrb	r3, [r3, #0]
   1e9bc:	0018      	movs	r0, r3
   1e9be:	4b03      	ldr	r3, [pc, #12]	; (1e9cc <port_get_group_from_gpio_pin+0x20>)
   1e9c0:	4798      	blx	r3
   1e9c2:	0003      	movs	r3, r0
}
   1e9c4:	0018      	movs	r0, r3
   1e9c6:	46bd      	mov	sp, r7
   1e9c8:	b002      	add	sp, #8
   1e9ca:	bd80      	pop	{r7, pc}
   1e9cc:	0001e931 	.word	0x0001e931

0001e9d0 <port_get_config_defaults>:
{
   1e9d0:	b580      	push	{r7, lr}
   1e9d2:	b082      	sub	sp, #8
   1e9d4:	af00      	add	r7, sp, #0
   1e9d6:	6078      	str	r0, [r7, #4]
	config->direction  = PORT_PIN_DIR_INPUT;
   1e9d8:	687b      	ldr	r3, [r7, #4]
   1e9da:	2200      	movs	r2, #0
   1e9dc:	701a      	strb	r2, [r3, #0]
	config->input_pull = PORT_PIN_PULL_UP;
   1e9de:	687b      	ldr	r3, [r7, #4]
   1e9e0:	2201      	movs	r2, #1
   1e9e2:	705a      	strb	r2, [r3, #1]
	config->powersave  = false;
   1e9e4:	687b      	ldr	r3, [r7, #4]
   1e9e6:	2200      	movs	r2, #0
   1e9e8:	709a      	strb	r2, [r3, #2]
}
   1e9ea:	46c0      	nop			; (mov r8, r8)
   1e9ec:	46bd      	mov	sp, r7
   1e9ee:	b002      	add	sp, #8
   1e9f0:	bd80      	pop	{r7, pc}
	...

0001e9f4 <port_pin_set_output_level>:
{
   1e9f4:	b580      	push	{r7, lr}
   1e9f6:	b084      	sub	sp, #16
   1e9f8:	af00      	add	r7, sp, #0
   1e9fa:	0002      	movs	r2, r0
   1e9fc:	1dfb      	adds	r3, r7, #7
   1e9fe:	701a      	strb	r2, [r3, #0]
   1ea00:	1dbb      	adds	r3, r7, #6
   1ea02:	1c0a      	adds	r2, r1, #0
   1ea04:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
   1ea06:	1dfb      	adds	r3, r7, #7
   1ea08:	781b      	ldrb	r3, [r3, #0]
   1ea0a:	0018      	movs	r0, r3
   1ea0c:	4b0d      	ldr	r3, [pc, #52]	; (1ea44 <port_pin_set_output_level+0x50>)
   1ea0e:	4798      	blx	r3
   1ea10:	0003      	movs	r3, r0
   1ea12:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
   1ea14:	1dfb      	adds	r3, r7, #7
   1ea16:	781b      	ldrb	r3, [r3, #0]
   1ea18:	221f      	movs	r2, #31
   1ea1a:	4013      	ands	r3, r2
   1ea1c:	2201      	movs	r2, #1
   1ea1e:	409a      	lsls	r2, r3
   1ea20:	0013      	movs	r3, r2
   1ea22:	60bb      	str	r3, [r7, #8]
	if (level) {
   1ea24:	1dbb      	adds	r3, r7, #6
   1ea26:	781b      	ldrb	r3, [r3, #0]
   1ea28:	2b00      	cmp	r3, #0
   1ea2a:	d003      	beq.n	1ea34 <port_pin_set_output_level+0x40>
		port_base->OUTSET.reg = pin_mask;
   1ea2c:	68fb      	ldr	r3, [r7, #12]
   1ea2e:	68ba      	ldr	r2, [r7, #8]
   1ea30:	619a      	str	r2, [r3, #24]
}
   1ea32:	e002      	b.n	1ea3a <port_pin_set_output_level+0x46>
		port_base->OUTCLR.reg = pin_mask;
   1ea34:	68fb      	ldr	r3, [r7, #12]
   1ea36:	68ba      	ldr	r2, [r7, #8]
   1ea38:	615a      	str	r2, [r3, #20]
}
   1ea3a:	46c0      	nop			; (mov r8, r8)
   1ea3c:	46bd      	mov	sp, r7
   1ea3e:	b004      	add	sp, #16
   1ea40:	bd80      	pop	{r7, pc}
   1ea42:	46c0      	nop			; (mov r8, r8)
   1ea44:	0001e9ad 	.word	0x0001e9ad

0001ea48 <chip_isr>:
#include "conf_winc.h"

static tpfNmBspIsr gpfIsr;

static void chip_isr(void)
{
   1ea48:	b580      	push	{r7, lr}
   1ea4a:	af00      	add	r7, sp, #0
	if (gpfIsr) {
   1ea4c:	4b04      	ldr	r3, [pc, #16]	; (1ea60 <chip_isr+0x18>)
   1ea4e:	681b      	ldr	r3, [r3, #0]
   1ea50:	2b00      	cmp	r3, #0
   1ea52:	d002      	beq.n	1ea5a <chip_isr+0x12>
		gpfIsr();
   1ea54:	4b02      	ldr	r3, [pc, #8]	; (1ea60 <chip_isr+0x18>)
   1ea56:	681b      	ldr	r3, [r3, #0]
   1ea58:	4798      	blx	r3
	}
}
   1ea5a:	46c0      	nop			; (mov r8, r8)
   1ea5c:	46bd      	mov	sp, r7
   1ea5e:	bd80      	pop	{r7, pc}
   1ea60:	20003d3c 	.word	0x20003d3c

0001ea64 <init_chip_pins>:
/*
 *	@fn		init_chip_pins
 *	@brief	Initialize reset, chip enable and wake pin
 */
static void init_chip_pins(void)
{
   1ea64:	b580      	push	{r7, lr}
   1ea66:	b082      	sub	sp, #8
   1ea68:	af00      	add	r7, sp, #0
	struct port_config pin_conf;

	port_get_config_defaults(&pin_conf);
   1ea6a:	1d3b      	adds	r3, r7, #4
   1ea6c:	0018      	movs	r0, r3
   1ea6e:	4b10      	ldr	r3, [pc, #64]	; (1eab0 <init_chip_pins+0x4c>)
   1ea70:	4798      	blx	r3

	/* Configure control pins as output. */
	pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
   1ea72:	1d3b      	adds	r3, r7, #4
   1ea74:	2201      	movs	r2, #1
   1ea76:	701a      	strb	r2, [r3, #0]
	port_pin_set_config(CONF_WINC_PIN_RESET, &pin_conf);
   1ea78:	1d3b      	adds	r3, r7, #4
   1ea7a:	0019      	movs	r1, r3
   1ea7c:	201b      	movs	r0, #27
   1ea7e:	4b0d      	ldr	r3, [pc, #52]	; (1eab4 <init_chip_pins+0x50>)
   1ea80:	4798      	blx	r3
	port_pin_set_config(CONF_WINC_PIN_CHIP_ENABLE, &pin_conf);
   1ea82:	1d3b      	adds	r3, r7, #4
   1ea84:	0019      	movs	r1, r3
   1ea86:	201c      	movs	r0, #28
   1ea88:	4b0a      	ldr	r3, [pc, #40]	; (1eab4 <init_chip_pins+0x50>)
   1ea8a:	4798      	blx	r3
	port_pin_set_config(CONF_WINC_PIN_WAKE, &pin_conf);
   1ea8c:	1d3b      	adds	r3, r7, #4
   1ea8e:	0019      	movs	r1, r3
   1ea90:	2028      	movs	r0, #40	; 0x28
   1ea92:	4b08      	ldr	r3, [pc, #32]	; (1eab4 <init_chip_pins+0x50>)
   1ea94:	4798      	blx	r3
	port_pin_set_output_level(CONF_WINC_PIN_CHIP_ENABLE, false);
   1ea96:	2100      	movs	r1, #0
   1ea98:	201c      	movs	r0, #28
   1ea9a:	4b07      	ldr	r3, [pc, #28]	; (1eab8 <init_chip_pins+0x54>)
   1ea9c:	4798      	blx	r3
	port_pin_set_output_level(CONF_WINC_PIN_RESET, false);
   1ea9e:	2100      	movs	r1, #0
   1eaa0:	201b      	movs	r0, #27
   1eaa2:	4b05      	ldr	r3, [pc, #20]	; (1eab8 <init_chip_pins+0x54>)
   1eaa4:	4798      	blx	r3
}
   1eaa6:	46c0      	nop			; (mov r8, r8)
   1eaa8:	46bd      	mov	sp, r7
   1eaaa:	b002      	add	sp, #8
   1eaac:	bd80      	pop	{r7, pc}
   1eaae:	46c0      	nop			; (mov r8, r8)
   1eab0:	0001e9d1 	.word	0x0001e9d1
   1eab4:	000251f1 	.word	0x000251f1
   1eab8:	0001e9f5 	.word	0x0001e9f5

0001eabc <nm_bsp_init>:
 *	@fn		nm_bsp_init
 *	@brief	Initialize BSP
 *	@return	0 in case of success and -1 in case of failure
 */
sint8 nm_bsp_init(void)
{
   1eabc:	b580      	push	{r7, lr}
   1eabe:	af00      	add	r7, sp, #0
	gpfIsr = NULL;
   1eac0:	4b0b      	ldr	r3, [pc, #44]	; (1eaf0 <nm_bsp_init+0x34>)
   1eac2:	2200      	movs	r2, #0
   1eac4:	601a      	str	r2, [r3, #0]

	/* Initialize chip IOs. */
	init_chip_pins();
   1eac6:	4b0b      	ldr	r3, [pc, #44]	; (1eaf4 <nm_bsp_init+0x38>)
   1eac8:	4798      	blx	r3

    /* Make sure a 1ms Systick is configured. */
    if (!(SysTick->CTRL & SysTick_CTRL_ENABLE_Msk && SysTick->CTRL & SysTick_CTRL_TICKINT_Msk)) {
   1eaca:	4b0b      	ldr	r3, [pc, #44]	; (1eaf8 <nm_bsp_init+0x3c>)
   1eacc:	681b      	ldr	r3, [r3, #0]
   1eace:	2201      	movs	r2, #1
   1ead0:	4013      	ands	r3, r2
   1ead2:	d004      	beq.n	1eade <nm_bsp_init+0x22>
   1ead4:	4b08      	ldr	r3, [pc, #32]	; (1eaf8 <nm_bsp_init+0x3c>)
   1ead6:	681b      	ldr	r3, [r3, #0]
   1ead8:	2202      	movs	r2, #2
   1eada:	4013      	ands	r3, r2
   1eadc:	d101      	bne.n	1eae2 <nm_bsp_init+0x26>
	    delay_init();
   1eade:	4b07      	ldr	r3, [pc, #28]	; (1eafc <nm_bsp_init+0x40>)
   1eae0:	4798      	blx	r3
    }

	system_interrupt_enable_global();
   1eae2:	4b07      	ldr	r3, [pc, #28]	; (1eb00 <nm_bsp_init+0x44>)
   1eae4:	4798      	blx	r3

	return M2M_SUCCESS;
   1eae6:	2300      	movs	r3, #0
}
   1eae8:	0018      	movs	r0, r3
   1eaea:	46bd      	mov	sp, r7
   1eaec:	bd80      	pop	{r7, pc}
   1eaee:	46c0      	nop			; (mov r8, r8)
   1eaf0:	20003d3c 	.word	0x20003d3c
   1eaf4:	0001ea65 	.word	0x0001ea65
   1eaf8:	e000e010 	.word	0xe000e010
   1eafc:	0001e879 	.word	0x0001e879
   1eb00:	0001e991 	.word	0x0001e991

0001eb04 <nm_bsp_reset>:
 *	@fn		nm_bsp_reset
 *	@brief	Reset NMC1500 SoC by setting CHIP_EN and RESET_N signals low,
 *           CHIP_EN high then RESET_N high
 */
void nm_bsp_reset(void)
{
   1eb04:	b580      	push	{r7, lr}
   1eb06:	af00      	add	r7, sp, #0
	port_pin_set_output_level(CONF_WINC_PIN_CHIP_ENABLE, false);
   1eb08:	2100      	movs	r1, #0
   1eb0a:	201c      	movs	r0, #28
   1eb0c:	4b0b      	ldr	r3, [pc, #44]	; (1eb3c <nm_bsp_reset+0x38>)
   1eb0e:	4798      	blx	r3
	port_pin_set_output_level(CONF_WINC_PIN_RESET, false);
   1eb10:	2100      	movs	r1, #0
   1eb12:	201b      	movs	r0, #27
   1eb14:	4b09      	ldr	r3, [pc, #36]	; (1eb3c <nm_bsp_reset+0x38>)
   1eb16:	4798      	blx	r3
	nm_bsp_sleep(1);
   1eb18:	2001      	movs	r0, #1
   1eb1a:	4b09      	ldr	r3, [pc, #36]	; (1eb40 <nm_bsp_reset+0x3c>)
   1eb1c:	4798      	blx	r3
	port_pin_set_output_level(CONF_WINC_PIN_CHIP_ENABLE, true);
   1eb1e:	2101      	movs	r1, #1
   1eb20:	201c      	movs	r0, #28
   1eb22:	4b06      	ldr	r3, [pc, #24]	; (1eb3c <nm_bsp_reset+0x38>)
   1eb24:	4798      	blx	r3
	nm_bsp_sleep(10);
   1eb26:	200a      	movs	r0, #10
   1eb28:	4b05      	ldr	r3, [pc, #20]	; (1eb40 <nm_bsp_reset+0x3c>)
   1eb2a:	4798      	blx	r3
	port_pin_set_output_level(CONF_WINC_PIN_RESET, true);
   1eb2c:	2101      	movs	r1, #1
   1eb2e:	201b      	movs	r0, #27
   1eb30:	4b02      	ldr	r3, [pc, #8]	; (1eb3c <nm_bsp_reset+0x38>)
   1eb32:	4798      	blx	r3
}
   1eb34:	46c0      	nop			; (mov r8, r8)
   1eb36:	46bd      	mov	sp, r7
   1eb38:	bd80      	pop	{r7, pc}
   1eb3a:	46c0      	nop			; (mov r8, r8)
   1eb3c:	0001e9f5 	.word	0x0001e9f5
   1eb40:	0001eb45 	.word	0x0001eb45

0001eb44 <nm_bsp_sleep>:
 *	@brief	Sleep in units of mSec
 *	@param[IN]	u32TimeMsec
 *				Time in milliseconds
 */
void nm_bsp_sleep(uint32 u32TimeMsec)
{
   1eb44:	b580      	push	{r7, lr}
   1eb46:	b082      	sub	sp, #8
   1eb48:	af00      	add	r7, sp, #0
   1eb4a:	6078      	str	r0, [r7, #4]
#ifdef __FREERTOS__
	vTaskDelay(u32TimeMsec);
   1eb4c:	687b      	ldr	r3, [r7, #4]
   1eb4e:	0018      	movs	r0, r3
   1eb50:	4b02      	ldr	r3, [pc, #8]	; (1eb5c <nm_bsp_sleep+0x18>)
   1eb52:	4798      	blx	r3
	while (u32TimeMsec--) {
		delay_ms(1);
	}
	
#endif
}
   1eb54:	46c0      	nop			; (mov r8, r8)
   1eb56:	46bd      	mov	sp, r7
   1eb58:	b002      	add	sp, #8
   1eb5a:	bd80      	pop	{r7, pc}
   1eb5c:	0001a8c5 	.word	0x0001a8c5

0001eb60 <nm_bsp_register_isr>:
 *	@brief	Register interrupt service routine
 *	@param[IN]	pfIsr
 *				Pointer to ISR handler
 */
void nm_bsp_register_isr(tpfNmBspIsr pfIsr)
{
   1eb60:	b580      	push	{r7, lr}
   1eb62:	b086      	sub	sp, #24
   1eb64:	af00      	add	r7, sp, #0
   1eb66:	6078      	str	r0, [r7, #4]
	struct extint_chan_conf config_extint_chan;

	gpfIsr = pfIsr;
   1eb68:	4b15      	ldr	r3, [pc, #84]	; (1ebc0 <nm_bsp_register_isr+0x60>)
   1eb6a:	687a      	ldr	r2, [r7, #4]
   1eb6c:	601a      	str	r2, [r3, #0]

	extint_chan_get_config_defaults(&config_extint_chan);
   1eb6e:	230c      	movs	r3, #12
   1eb70:	18fb      	adds	r3, r7, r3
   1eb72:	0018      	movs	r0, r3
   1eb74:	4b13      	ldr	r3, [pc, #76]	; (1ebc4 <nm_bsp_register_isr+0x64>)
   1eb76:	4798      	blx	r3
	config_extint_chan.gpio_pin = CONF_WINC_SPI_INT_PIN;
   1eb78:	230c      	movs	r3, #12
   1eb7a:	18fb      	adds	r3, r7, r3
   1eb7c:	2229      	movs	r2, #41	; 0x29
   1eb7e:	601a      	str	r2, [r3, #0]
	config_extint_chan.gpio_pin_mux = CONF_WINC_SPI_INT_MUX;
   1eb80:	230c      	movs	r3, #12
   1eb82:	18fb      	adds	r3, r7, r3
   1eb84:	2200      	movs	r2, #0
   1eb86:	605a      	str	r2, [r3, #4]
	config_extint_chan.gpio_pin_pull = EXTINT_PULL_UP;
   1eb88:	230c      	movs	r3, #12
   1eb8a:	18fb      	adds	r3, r7, r3
   1eb8c:	2201      	movs	r2, #1
   1eb8e:	721a      	strb	r2, [r3, #8]
	config_extint_chan.detection_criteria = EXTINT_DETECT_FALLING;
   1eb90:	230c      	movs	r3, #12
   1eb92:	18fb      	adds	r3, r7, r3
   1eb94:	2202      	movs	r2, #2
   1eb96:	72da      	strb	r2, [r3, #11]

	extint_chan_set_config(CONF_WINC_SPI_INT_EIC, &config_extint_chan);
   1eb98:	230c      	movs	r3, #12
   1eb9a:	18fb      	adds	r3, r7, r3
   1eb9c:	0019      	movs	r1, r3
   1eb9e:	2009      	movs	r0, #9
   1eba0:	4b09      	ldr	r3, [pc, #36]	; (1ebc8 <nm_bsp_register_isr+0x68>)
   1eba2:	4798      	blx	r3
	extint_register_callback(chip_isr, CONF_WINC_SPI_INT_EIC,
   1eba4:	4b09      	ldr	r3, [pc, #36]	; (1ebcc <nm_bsp_register_isr+0x6c>)
   1eba6:	2200      	movs	r2, #0
   1eba8:	2109      	movs	r1, #9
   1ebaa:	0018      	movs	r0, r3
   1ebac:	4b08      	ldr	r3, [pc, #32]	; (1ebd0 <nm_bsp_register_isr+0x70>)
   1ebae:	4798      	blx	r3
			EXTINT_CALLBACK_TYPE_DETECT);
	extint_chan_enable_callback(CONF_WINC_SPI_INT_EIC,
   1ebb0:	2100      	movs	r1, #0
   1ebb2:	2009      	movs	r0, #9
   1ebb4:	4b07      	ldr	r3, [pc, #28]	; (1ebd4 <nm_bsp_register_isr+0x74>)
   1ebb6:	4798      	blx	r3
			EXTINT_CALLBACK_TYPE_DETECT);
}
   1ebb8:	46c0      	nop			; (mov r8, r8)
   1ebba:	46bd      	mov	sp, r7
   1ebbc:	b006      	add	sp, #24
   1ebbe:	bd80      	pop	{r7, pc}
   1ebc0:	20003d3c 	.word	0x20003d3c
   1ebc4:	00025099 	.word	0x00025099
   1ebc8:	000250cd 	.word	0x000250cd
   1ebcc:	0001ea49 	.word	0x0001ea49
   1ebd0:	00024c99 	.word	0x00024c99
   1ebd4:	00024cfd 	.word	0x00024cfd

0001ebd8 <nm_bsp_interrupt_ctrl>:
 *	@brief	Enable/Disable interrupts
 *	@param[IN]	u8Enable
 *				'0' disable interrupts. '1' enable interrupts
 */
void nm_bsp_interrupt_ctrl(uint8 u8Enable)
{
   1ebd8:	b580      	push	{r7, lr}
   1ebda:	b082      	sub	sp, #8
   1ebdc:	af00      	add	r7, sp, #0
   1ebde:	0002      	movs	r2, r0
   1ebe0:	1dfb      	adds	r3, r7, #7
   1ebe2:	701a      	strb	r2, [r3, #0]
	if (u8Enable) {
   1ebe4:	1dfb      	adds	r3, r7, #7
   1ebe6:	781b      	ldrb	r3, [r3, #0]
   1ebe8:	2b00      	cmp	r3, #0
   1ebea:	d004      	beq.n	1ebf6 <nm_bsp_interrupt_ctrl+0x1e>
		extint_chan_enable_callback(CONF_WINC_SPI_INT_EIC,
   1ebec:	2100      	movs	r1, #0
   1ebee:	2009      	movs	r0, #9
   1ebf0:	4b05      	ldr	r3, [pc, #20]	; (1ec08 <nm_bsp_interrupt_ctrl+0x30>)
   1ebf2:	4798      	blx	r3
				EXTINT_CALLBACK_TYPE_DETECT);
	} else {
		extint_chan_disable_callback(CONF_WINC_SPI_INT_EIC,
				EXTINT_CALLBACK_TYPE_DETECT);
	}
}
   1ebf4:	e003      	b.n	1ebfe <nm_bsp_interrupt_ctrl+0x26>
		extint_chan_disable_callback(CONF_WINC_SPI_INT_EIC,
   1ebf6:	2100      	movs	r1, #0
   1ebf8:	2009      	movs	r0, #9
   1ebfa:	4b04      	ldr	r3, [pc, #16]	; (1ec0c <nm_bsp_interrupt_ctrl+0x34>)
   1ebfc:	4798      	blx	r3
}
   1ebfe:	46c0      	nop			; (mov r8, r8)
   1ec00:	46bd      	mov	sp, r7
   1ec02:	b002      	add	sp, #8
   1ec04:	bd80      	pop	{r7, pc}
   1ec06:	46c0      	nop			; (mov r8, r8)
   1ec08:	00024cfd 	.word	0x00024cfd
   1ec0c:	00024d45 	.word	0x00024d45

0001ec10 <system_pinmux_get_group_from_gpio_pin>:
{
   1ec10:	b580      	push	{r7, lr}
   1ec12:	b084      	sub	sp, #16
   1ec14:	af00      	add	r7, sp, #0
   1ec16:	0002      	movs	r2, r0
   1ec18:	1dfb      	adds	r3, r7, #7
   1ec1a:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
   1ec1c:	230f      	movs	r3, #15
   1ec1e:	18fb      	adds	r3, r7, r3
   1ec20:	1dfa      	adds	r2, r7, #7
   1ec22:	7812      	ldrb	r2, [r2, #0]
   1ec24:	09d2      	lsrs	r2, r2, #7
   1ec26:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
   1ec28:	230e      	movs	r3, #14
   1ec2a:	18fb      	adds	r3, r7, r3
   1ec2c:	1dfa      	adds	r2, r7, #7
   1ec2e:	7812      	ldrb	r2, [r2, #0]
   1ec30:	0952      	lsrs	r2, r2, #5
   1ec32:	701a      	strb	r2, [r3, #0]
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
   1ec34:	4b0d      	ldr	r3, [pc, #52]	; (1ec6c <system_pinmux_get_group_from_gpio_pin+0x5c>)
   1ec36:	60bb      	str	r3, [r7, #8]
	if (port_index < PORT_INST_NUM) {
   1ec38:	230f      	movs	r3, #15
   1ec3a:	18fb      	adds	r3, r7, r3
   1ec3c:	781b      	ldrb	r3, [r3, #0]
   1ec3e:	2b00      	cmp	r3, #0
   1ec40:	d10f      	bne.n	1ec62 <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
   1ec42:	230f      	movs	r3, #15
   1ec44:	18fb      	adds	r3, r7, r3
   1ec46:	781b      	ldrb	r3, [r3, #0]
   1ec48:	009b      	lsls	r3, r3, #2
   1ec4a:	2210      	movs	r2, #16
   1ec4c:	4694      	mov	ip, r2
   1ec4e:	44bc      	add	ip, r7
   1ec50:	4463      	add	r3, ip
   1ec52:	3b08      	subs	r3, #8
   1ec54:	681a      	ldr	r2, [r3, #0]
   1ec56:	230e      	movs	r3, #14
   1ec58:	18fb      	adds	r3, r7, r3
   1ec5a:	781b      	ldrb	r3, [r3, #0]
   1ec5c:	01db      	lsls	r3, r3, #7
   1ec5e:	18d3      	adds	r3, r2, r3
   1ec60:	e000      	b.n	1ec64 <system_pinmux_get_group_from_gpio_pin+0x54>
		return NULL;
   1ec62:	2300      	movs	r3, #0
}
   1ec64:	0018      	movs	r0, r3
   1ec66:	46bd      	mov	sp, r7
   1ec68:	b004      	add	sp, #16
   1ec6a:	bd80      	pop	{r7, pc}
   1ec6c:	41004400 	.word	0x41004400

0001ec70 <system_interrupt_enable>:
{
   1ec70:	b580      	push	{r7, lr}
   1ec72:	b082      	sub	sp, #8
   1ec74:	af00      	add	r7, sp, #0
   1ec76:	0002      	movs	r2, r0
   1ec78:	1dfb      	adds	r3, r7, #7
   1ec7a:	701a      	strb	r2, [r3, #0]
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
   1ec7c:	4b06      	ldr	r3, [pc, #24]	; (1ec98 <system_interrupt_enable+0x28>)
   1ec7e:	1dfa      	adds	r2, r7, #7
   1ec80:	7812      	ldrb	r2, [r2, #0]
   1ec82:	0011      	movs	r1, r2
   1ec84:	221f      	movs	r2, #31
   1ec86:	400a      	ands	r2, r1
   1ec88:	2101      	movs	r1, #1
   1ec8a:	4091      	lsls	r1, r2
   1ec8c:	000a      	movs	r2, r1
   1ec8e:	601a      	str	r2, [r3, #0]
}
   1ec90:	46c0      	nop			; (mov r8, r8)
   1ec92:	46bd      	mov	sp, r7
   1ec94:	b002      	add	sp, #8
   1ec96:	bd80      	pop	{r7, pc}
   1ec98:	e000e100 	.word	0xe000e100

0001ec9c <system_interrupt_disable>:
{
   1ec9c:	b580      	push	{r7, lr}
   1ec9e:	b082      	sub	sp, #8
   1eca0:	af00      	add	r7, sp, #0
   1eca2:	0002      	movs	r2, r0
   1eca4:	1dfb      	adds	r3, r7, #7
   1eca6:	701a      	strb	r2, [r3, #0]
	NVIC->ICER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
   1eca8:	4a07      	ldr	r2, [pc, #28]	; (1ecc8 <system_interrupt_disable+0x2c>)
   1ecaa:	1dfb      	adds	r3, r7, #7
   1ecac:	781b      	ldrb	r3, [r3, #0]
   1ecae:	0019      	movs	r1, r3
   1ecb0:	231f      	movs	r3, #31
   1ecb2:	400b      	ands	r3, r1
   1ecb4:	2101      	movs	r1, #1
   1ecb6:	4099      	lsls	r1, r3
   1ecb8:	000b      	movs	r3, r1
   1ecba:	0019      	movs	r1, r3
   1ecbc:	2380      	movs	r3, #128	; 0x80
   1ecbe:	50d1      	str	r1, [r2, r3]
}
   1ecc0:	46c0      	nop			; (mov r8, r8)
   1ecc2:	46bd      	mov	sp, r7
   1ecc4:	b002      	add	sp, #8
   1ecc6:	bd80      	pop	{r7, pc}
   1ecc8:	e000e100 	.word	0xe000e100

0001eccc <port_get_group_from_gpio_pin>:
{
   1eccc:	b580      	push	{r7, lr}
   1ecce:	b082      	sub	sp, #8
   1ecd0:	af00      	add	r7, sp, #0
   1ecd2:	0002      	movs	r2, r0
   1ecd4:	1dfb      	adds	r3, r7, #7
   1ecd6:	701a      	strb	r2, [r3, #0]
	return system_pinmux_get_group_from_gpio_pin(gpio_pin);
   1ecd8:	1dfb      	adds	r3, r7, #7
   1ecda:	781b      	ldrb	r3, [r3, #0]
   1ecdc:	0018      	movs	r0, r3
   1ecde:	4b03      	ldr	r3, [pc, #12]	; (1ecec <port_get_group_from_gpio_pin+0x20>)
   1ece0:	4798      	blx	r3
   1ece2:	0003      	movs	r3, r0
}
   1ece4:	0018      	movs	r0, r3
   1ece6:	46bd      	mov	sp, r7
   1ece8:	b002      	add	sp, #8
   1ecea:	bd80      	pop	{r7, pc}
   1ecec:	0001ec11 	.word	0x0001ec11

0001ecf0 <port_get_config_defaults>:
{
   1ecf0:	b580      	push	{r7, lr}
   1ecf2:	b082      	sub	sp, #8
   1ecf4:	af00      	add	r7, sp, #0
   1ecf6:	6078      	str	r0, [r7, #4]
	config->direction  = PORT_PIN_DIR_INPUT;
   1ecf8:	687b      	ldr	r3, [r7, #4]
   1ecfa:	2200      	movs	r2, #0
   1ecfc:	701a      	strb	r2, [r3, #0]
	config->input_pull = PORT_PIN_PULL_UP;
   1ecfe:	687b      	ldr	r3, [r7, #4]
   1ed00:	2201      	movs	r2, #1
   1ed02:	705a      	strb	r2, [r3, #1]
	config->powersave  = false;
   1ed04:	687b      	ldr	r3, [r7, #4]
   1ed06:	2200      	movs	r2, #0
   1ed08:	709a      	strb	r2, [r3, #2]
}
   1ed0a:	46c0      	nop			; (mov r8, r8)
   1ed0c:	46bd      	mov	sp, r7
   1ed0e:	b002      	add	sp, #8
   1ed10:	bd80      	pop	{r7, pc}
	...

0001ed14 <port_pin_set_output_level>:
{
   1ed14:	b580      	push	{r7, lr}
   1ed16:	b084      	sub	sp, #16
   1ed18:	af00      	add	r7, sp, #0
   1ed1a:	0002      	movs	r2, r0
   1ed1c:	1dfb      	adds	r3, r7, #7
   1ed1e:	701a      	strb	r2, [r3, #0]
   1ed20:	1dbb      	adds	r3, r7, #6
   1ed22:	1c0a      	adds	r2, r1, #0
   1ed24:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
   1ed26:	1dfb      	adds	r3, r7, #7
   1ed28:	781b      	ldrb	r3, [r3, #0]
   1ed2a:	0018      	movs	r0, r3
   1ed2c:	4b0d      	ldr	r3, [pc, #52]	; (1ed64 <port_pin_set_output_level+0x50>)
   1ed2e:	4798      	blx	r3
   1ed30:	0003      	movs	r3, r0
   1ed32:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
   1ed34:	1dfb      	adds	r3, r7, #7
   1ed36:	781b      	ldrb	r3, [r3, #0]
   1ed38:	221f      	movs	r2, #31
   1ed3a:	4013      	ands	r3, r2
   1ed3c:	2201      	movs	r2, #1
   1ed3e:	409a      	lsls	r2, r3
   1ed40:	0013      	movs	r3, r2
   1ed42:	60bb      	str	r3, [r7, #8]
	if (level) {
   1ed44:	1dbb      	adds	r3, r7, #6
   1ed46:	781b      	ldrb	r3, [r3, #0]
   1ed48:	2b00      	cmp	r3, #0
   1ed4a:	d003      	beq.n	1ed54 <port_pin_set_output_level+0x40>
		port_base->OUTSET.reg = pin_mask;
   1ed4c:	68fb      	ldr	r3, [r7, #12]
   1ed4e:	68ba      	ldr	r2, [r7, #8]
   1ed50:	619a      	str	r2, [r3, #24]
}
   1ed52:	e002      	b.n	1ed5a <port_pin_set_output_level+0x46>
		port_base->OUTCLR.reg = pin_mask;
   1ed54:	68fb      	ldr	r3, [r7, #12]
   1ed56:	68ba      	ldr	r2, [r7, #8]
   1ed58:	615a      	str	r2, [r3, #20]
}
   1ed5a:	46c0      	nop			; (mov r8, r8)
   1ed5c:	46bd      	mov	sp, r7
   1ed5e:	b004      	add	sp, #16
   1ed60:	bd80      	pop	{r7, pc}
   1ed62:	46c0      	nop			; (mov r8, r8)
   1ed64:	0001eccd 	.word	0x0001eccd

0001ed68 <spi_is_syncing>:
{
   1ed68:	b580      	push	{r7, lr}
   1ed6a:	b084      	sub	sp, #16
   1ed6c:	af00      	add	r7, sp, #0
   1ed6e:	6078      	str	r0, [r7, #4]
	SercomSpi *const spi_module = &(module->hw->SPI);
   1ed70:	687b      	ldr	r3, [r7, #4]
   1ed72:	681b      	ldr	r3, [r3, #0]
   1ed74:	60fb      	str	r3, [r7, #12]
	return (spi_module->SYNCBUSY.reg);
   1ed76:	68fb      	ldr	r3, [r7, #12]
   1ed78:	69db      	ldr	r3, [r3, #28]
   1ed7a:	1e5a      	subs	r2, r3, #1
   1ed7c:	4193      	sbcs	r3, r2
   1ed7e:	b2db      	uxtb	r3, r3
}
   1ed80:	0018      	movs	r0, r3
   1ed82:	46bd      	mov	sp, r7
   1ed84:	b004      	add	sp, #16
   1ed86:	bd80      	pop	{r7, pc}

0001ed88 <spi_get_config_defaults>:
{
   1ed88:	b580      	push	{r7, lr}
   1ed8a:	b082      	sub	sp, #8
   1ed8c:	af00      	add	r7, sp, #0
   1ed8e:	6078      	str	r0, [r7, #4]
	config->mode             = SPI_MODE_MASTER;
   1ed90:	687b      	ldr	r3, [r7, #4]
   1ed92:	2201      	movs	r2, #1
   1ed94:	701a      	strb	r2, [r3, #0]
	config->data_order       = SPI_DATA_ORDER_MSB;
   1ed96:	687b      	ldr	r3, [r7, #4]
   1ed98:	2200      	movs	r2, #0
   1ed9a:	605a      	str	r2, [r3, #4]
	config->transfer_mode    = SPI_TRANSFER_MODE_0;
   1ed9c:	687b      	ldr	r3, [r7, #4]
   1ed9e:	2200      	movs	r2, #0
   1eda0:	609a      	str	r2, [r3, #8]
	config->mux_setting      = SPI_SIGNAL_MUX_SETTING_D;
   1eda2:	687b      	ldr	r3, [r7, #4]
   1eda4:	22c0      	movs	r2, #192	; 0xc0
   1eda6:	0392      	lsls	r2, r2, #14
   1eda8:	60da      	str	r2, [r3, #12]
	config->character_size   = SPI_CHARACTER_SIZE_8BIT;
   1edaa:	687b      	ldr	r3, [r7, #4]
   1edac:	2200      	movs	r2, #0
   1edae:	741a      	strb	r2, [r3, #16]
	config->run_in_standby   = false;
   1edb0:	687b      	ldr	r3, [r7, #4]
   1edb2:	2200      	movs	r2, #0
   1edb4:	745a      	strb	r2, [r3, #17]
	config->receiver_enable  = true;
   1edb6:	687b      	ldr	r3, [r7, #4]
   1edb8:	2201      	movs	r2, #1
   1edba:	749a      	strb	r2, [r3, #18]
	config->select_slave_low_detect_enable= true;
   1edbc:	687b      	ldr	r3, [r7, #4]
   1edbe:	2201      	movs	r2, #1
   1edc0:	74da      	strb	r2, [r3, #19]
	config->master_slave_select_enable= false;
   1edc2:	687b      	ldr	r3, [r7, #4]
   1edc4:	2200      	movs	r2, #0
   1edc6:	751a      	strb	r2, [r3, #20]
	config->generator_source = GCLK_GENERATOR_0;
   1edc8:	687b      	ldr	r3, [r7, #4]
   1edca:	2224      	movs	r2, #36	; 0x24
   1edcc:	2100      	movs	r1, #0
   1edce:	5499      	strb	r1, [r3, r2]
	memset(&(config->mode_specific), 0, sizeof(config->mode_specific));
   1edd0:	687b      	ldr	r3, [r7, #4]
   1edd2:	3318      	adds	r3, #24
   1edd4:	220c      	movs	r2, #12
   1edd6:	2100      	movs	r1, #0
   1edd8:	0018      	movs	r0, r3
   1edda:	4b0a      	ldr	r3, [pc, #40]	; (1ee04 <spi_get_config_defaults+0x7c>)
   1eddc:	4798      	blx	r3
	config->mode_specific.master.baudrate = 100000;
   1edde:	687b      	ldr	r3, [r7, #4]
   1ede0:	4a09      	ldr	r2, [pc, #36]	; (1ee08 <spi_get_config_defaults+0x80>)
   1ede2:	619a      	str	r2, [r3, #24]
	config->pinmux_pad0 = PINMUX_DEFAULT;
   1ede4:	687b      	ldr	r3, [r7, #4]
   1ede6:	2200      	movs	r2, #0
   1ede8:	629a      	str	r2, [r3, #40]	; 0x28
	config->pinmux_pad1 = PINMUX_DEFAULT;
   1edea:	687b      	ldr	r3, [r7, #4]
   1edec:	2200      	movs	r2, #0
   1edee:	62da      	str	r2, [r3, #44]	; 0x2c
	config->pinmux_pad2 = PINMUX_DEFAULT;
   1edf0:	687b      	ldr	r3, [r7, #4]
   1edf2:	2200      	movs	r2, #0
   1edf4:	631a      	str	r2, [r3, #48]	; 0x30
	config->pinmux_pad3 = PINMUX_DEFAULT;
   1edf6:	687b      	ldr	r3, [r7, #4]
   1edf8:	2200      	movs	r2, #0
   1edfa:	635a      	str	r2, [r3, #52]	; 0x34
};
   1edfc:	46c0      	nop			; (mov r8, r8)
   1edfe:	46bd      	mov	sp, r7
   1ee00:	b002      	add	sp, #8
   1ee02:	bd80      	pop	{r7, pc}
   1ee04:	00033117 	.word	0x00033117
   1ee08:	000186a0 	.word	0x000186a0

0001ee0c <spi_slave_inst_get_config_defaults>:
{
   1ee0c:	b580      	push	{r7, lr}
   1ee0e:	b082      	sub	sp, #8
   1ee10:	af00      	add	r7, sp, #0
   1ee12:	6078      	str	r0, [r7, #4]
	config->ss_pin          = 10;
   1ee14:	687b      	ldr	r3, [r7, #4]
   1ee16:	220a      	movs	r2, #10
   1ee18:	701a      	strb	r2, [r3, #0]
	config->address_enabled = false;
   1ee1a:	687b      	ldr	r3, [r7, #4]
   1ee1c:	2200      	movs	r2, #0
   1ee1e:	705a      	strb	r2, [r3, #1]
	config->address         = 0;
   1ee20:	687b      	ldr	r3, [r7, #4]
   1ee22:	2200      	movs	r2, #0
   1ee24:	709a      	strb	r2, [r3, #2]
}
   1ee26:	46c0      	nop			; (mov r8, r8)
   1ee28:	46bd      	mov	sp, r7
   1ee2a:	b002      	add	sp, #8
   1ee2c:	bd80      	pop	{r7, pc}
	...

0001ee30 <spi_attach_slave>:
{
   1ee30:	b580      	push	{r7, lr}
   1ee32:	b084      	sub	sp, #16
   1ee34:	af00      	add	r7, sp, #0
   1ee36:	6078      	str	r0, [r7, #4]
   1ee38:	6039      	str	r1, [r7, #0]
	slave->ss_pin          = config->ss_pin;
   1ee3a:	683b      	ldr	r3, [r7, #0]
   1ee3c:	781a      	ldrb	r2, [r3, #0]
   1ee3e:	687b      	ldr	r3, [r7, #4]
   1ee40:	701a      	strb	r2, [r3, #0]
	slave->address_enabled = config->address_enabled;
   1ee42:	683b      	ldr	r3, [r7, #0]
   1ee44:	785a      	ldrb	r2, [r3, #1]
   1ee46:	687b      	ldr	r3, [r7, #4]
   1ee48:	705a      	strb	r2, [r3, #1]
	slave->address         = config->address;
   1ee4a:	683b      	ldr	r3, [r7, #0]
   1ee4c:	789a      	ldrb	r2, [r3, #2]
   1ee4e:	687b      	ldr	r3, [r7, #4]
   1ee50:	709a      	strb	r2, [r3, #2]
	port_get_config_defaults(&pin_conf);
   1ee52:	230c      	movs	r3, #12
   1ee54:	18fb      	adds	r3, r7, r3
   1ee56:	0018      	movs	r0, r3
   1ee58:	4b0b      	ldr	r3, [pc, #44]	; (1ee88 <spi_attach_slave+0x58>)
   1ee5a:	4798      	blx	r3
	pin_conf.direction = PORT_PIN_DIR_OUTPUT;
   1ee5c:	230c      	movs	r3, #12
   1ee5e:	18fb      	adds	r3, r7, r3
   1ee60:	2201      	movs	r2, #1
   1ee62:	701a      	strb	r2, [r3, #0]
	port_pin_set_config(slave->ss_pin, &pin_conf);
   1ee64:	687b      	ldr	r3, [r7, #4]
   1ee66:	781b      	ldrb	r3, [r3, #0]
   1ee68:	220c      	movs	r2, #12
   1ee6a:	18ba      	adds	r2, r7, r2
   1ee6c:	0011      	movs	r1, r2
   1ee6e:	0018      	movs	r0, r3
   1ee70:	4b06      	ldr	r3, [pc, #24]	; (1ee8c <spi_attach_slave+0x5c>)
   1ee72:	4798      	blx	r3
	port_pin_set_output_level(slave->ss_pin, true);
   1ee74:	687b      	ldr	r3, [r7, #4]
   1ee76:	781b      	ldrb	r3, [r3, #0]
   1ee78:	2101      	movs	r1, #1
   1ee7a:	0018      	movs	r0, r3
   1ee7c:	4b04      	ldr	r3, [pc, #16]	; (1ee90 <spi_attach_slave+0x60>)
   1ee7e:	4798      	blx	r3
}
   1ee80:	46c0      	nop			; (mov r8, r8)
   1ee82:	46bd      	mov	sp, r7
   1ee84:	b004      	add	sp, #16
   1ee86:	bd80      	pop	{r7, pc}
   1ee88:	0001ecf1 	.word	0x0001ecf1
   1ee8c:	000251f1 	.word	0x000251f1
   1ee90:	0001ed15 	.word	0x0001ed15

0001ee94 <spi_enable>:
{
   1ee94:	b580      	push	{r7, lr}
   1ee96:	b084      	sub	sp, #16
   1ee98:	af00      	add	r7, sp, #0
   1ee9a:	6078      	str	r0, [r7, #4]
	SercomSpi *const spi_module = &(module->hw->SPI);
   1ee9c:	687b      	ldr	r3, [r7, #4]
   1ee9e:	681b      	ldr	r3, [r3, #0]
   1eea0:	60fb      	str	r3, [r7, #12]
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
   1eea2:	687b      	ldr	r3, [r7, #4]
   1eea4:	681b      	ldr	r3, [r3, #0]
   1eea6:	0018      	movs	r0, r3
   1eea8:	4b0b      	ldr	r3, [pc, #44]	; (1eed8 <spi_enable+0x44>)
   1eeaa:	4798      	blx	r3
   1eeac:	0003      	movs	r3, r0
   1eeae:	0018      	movs	r0, r3
   1eeb0:	4b0a      	ldr	r3, [pc, #40]	; (1eedc <spi_enable+0x48>)
   1eeb2:	4798      	blx	r3
	while (spi_is_syncing(module)) {
   1eeb4:	46c0      	nop			; (mov r8, r8)
   1eeb6:	687b      	ldr	r3, [r7, #4]
   1eeb8:	0018      	movs	r0, r3
   1eeba:	4b09      	ldr	r3, [pc, #36]	; (1eee0 <spi_enable+0x4c>)
   1eebc:	4798      	blx	r3
   1eebe:	1e03      	subs	r3, r0, #0
   1eec0:	d1f9      	bne.n	1eeb6 <spi_enable+0x22>
	spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_ENABLE;
   1eec2:	68fb      	ldr	r3, [r7, #12]
   1eec4:	681b      	ldr	r3, [r3, #0]
   1eec6:	2202      	movs	r2, #2
   1eec8:	431a      	orrs	r2, r3
   1eeca:	68fb      	ldr	r3, [r7, #12]
   1eecc:	601a      	str	r2, [r3, #0]
}
   1eece:	46c0      	nop			; (mov r8, r8)
   1eed0:	46bd      	mov	sp, r7
   1eed2:	b004      	add	sp, #16
   1eed4:	bd80      	pop	{r7, pc}
   1eed6:	46c0      	nop			; (mov r8, r8)
   1eed8:	00025ec1 	.word	0x00025ec1
   1eedc:	0001ec71 	.word	0x0001ec71
   1eee0:	0001ed69 	.word	0x0001ed69

0001eee4 <spi_disable>:
 *
 * \param[in,out] module  Pointer to the software instance struct
 */
static inline void spi_disable(
		struct spi_module *const module)
{
   1eee4:	b580      	push	{r7, lr}
   1eee6:	b084      	sub	sp, #16
   1eee8:	af00      	add	r7, sp, #0
   1eeea:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
   1eeec:	687b      	ldr	r3, [r7, #4]
   1eeee:	681b      	ldr	r3, [r3, #0]
   1eef0:	60fb      	str	r3, [r7, #12]

#  if SPI_CALLBACK_MODE == true
	system_interrupt_disable(_sercom_get_interrupt_vector(module->hw));
   1eef2:	687b      	ldr	r3, [r7, #4]
   1eef4:	681b      	ldr	r3, [r3, #0]
   1eef6:	0018      	movs	r0, r3
   1eef8:	4b0e      	ldr	r3, [pc, #56]	; (1ef34 <spi_disable+0x50>)
   1eefa:	4798      	blx	r3
   1eefc:	0003      	movs	r3, r0
   1eefe:	0018      	movs	r0, r3
   1ef00:	4b0d      	ldr	r3, [pc, #52]	; (1ef38 <spi_disable+0x54>)
   1ef02:	4798      	blx	r3
#  endif

	while (spi_is_syncing(module)) {
   1ef04:	46c0      	nop			; (mov r8, r8)
   1ef06:	687b      	ldr	r3, [r7, #4]
   1ef08:	0018      	movs	r0, r3
   1ef0a:	4b0c      	ldr	r3, [pc, #48]	; (1ef3c <spi_disable+0x58>)
   1ef0c:	4798      	blx	r3
   1ef0e:	1e03      	subs	r3, r0, #0
   1ef10:	d1f9      	bne.n	1ef06 <spi_disable+0x22>
		/* Wait until the synchronization is complete */
	}

	/* Disbale interrupt */
	spi_module->INTENCLR.reg = SERCOM_SPI_INTENCLR_MASK;
   1ef12:	68fb      	ldr	r3, [r7, #12]
   1ef14:	228f      	movs	r2, #143	; 0x8f
   1ef16:	751a      	strb	r2, [r3, #20]
	/* Clear interrupt flag */
	spi_module->INTFLAG.reg = SERCOM_SPI_INTFLAG_MASK;
   1ef18:	68fb      	ldr	r3, [r7, #12]
   1ef1a:	228f      	movs	r2, #143	; 0x8f
   1ef1c:	761a      	strb	r2, [r3, #24]

	/* Disable SPI */
	spi_module->CTRLA.reg &= ~SERCOM_SPI_CTRLA_ENABLE;
   1ef1e:	68fb      	ldr	r3, [r7, #12]
   1ef20:	681b      	ldr	r3, [r3, #0]
   1ef22:	2202      	movs	r2, #2
   1ef24:	4393      	bics	r3, r2
   1ef26:	001a      	movs	r2, r3
   1ef28:	68fb      	ldr	r3, [r7, #12]
   1ef2a:	601a      	str	r2, [r3, #0]
}
   1ef2c:	46c0      	nop			; (mov r8, r8)
   1ef2e:	46bd      	mov	sp, r7
   1ef30:	b004      	add	sp, #16
   1ef32:	bd80      	pop	{r7, pc}
   1ef34:	00025ec1 	.word	0x00025ec1
   1ef38:	0001ec9d 	.word	0x0001ec9d
   1ef3c:	0001ed69 	.word	0x0001ed69

0001ef40 <spi_is_write_complete>:
 *                has been drawn high for SPI slave
 * \retval false  If the SPI master module has not shifted out data
 */
static inline bool spi_is_write_complete(
		struct spi_module *const module)
{
   1ef40:	b580      	push	{r7, lr}
   1ef42:	b084      	sub	sp, #16
   1ef44:	af00      	add	r7, sp, #0
   1ef46:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
   1ef48:	687b      	ldr	r3, [r7, #4]
   1ef4a:	681b      	ldr	r3, [r3, #0]
   1ef4c:	60fb      	str	r3, [r7, #12]

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
   1ef4e:	68fb      	ldr	r3, [r7, #12]
   1ef50:	7e1b      	ldrb	r3, [r3, #24]
   1ef52:	b2db      	uxtb	r3, r3
   1ef54:	001a      	movs	r2, r3
   1ef56:	2302      	movs	r3, #2
   1ef58:	4013      	ands	r3, r2
   1ef5a:	1e5a      	subs	r2, r3, #1
   1ef5c:	4193      	sbcs	r3, r2
   1ef5e:	b2db      	uxtb	r3, r3
}
   1ef60:	0018      	movs	r0, r3
   1ef62:	46bd      	mov	sp, r7
   1ef64:	b004      	add	sp, #16
   1ef66:	bd80      	pop	{r7, pc}

0001ef68 <spi_is_ready_to_write>:
 * \retval true   If the SPI module is ready to write data
 * \retval false  If the SPI module is not ready to write data
 */
static inline bool spi_is_ready_to_write(
		struct spi_module *const module)
{
   1ef68:	b580      	push	{r7, lr}
   1ef6a:	b084      	sub	sp, #16
   1ef6c:	af00      	add	r7, sp, #0
   1ef6e:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
   1ef70:	687b      	ldr	r3, [r7, #4]
   1ef72:	681b      	ldr	r3, [r3, #0]
   1ef74:	60fb      	str	r3, [r7, #12]

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
   1ef76:	68fb      	ldr	r3, [r7, #12]
   1ef78:	7e1b      	ldrb	r3, [r3, #24]
   1ef7a:	b2db      	uxtb	r3, r3
   1ef7c:	001a      	movs	r2, r3
   1ef7e:	2301      	movs	r3, #1
   1ef80:	4013      	ands	r3, r2
   1ef82:	1e5a      	subs	r2, r3, #1
   1ef84:	4193      	sbcs	r3, r2
   1ef86:	b2db      	uxtb	r3, r3
}
   1ef88:	0018      	movs	r0, r3
   1ef8a:	46bd      	mov	sp, r7
   1ef8c:	b004      	add	sp, #16
   1ef8e:	bd80      	pop	{r7, pc}

0001ef90 <spi_is_ready_to_read>:
 * \retval true   If the SPI module is ready to read data
 * \retval false  If the SPI module is not ready to read data
 */
static inline bool spi_is_ready_to_read(
		struct spi_module *const module)
{
   1ef90:	b580      	push	{r7, lr}
   1ef92:	b084      	sub	sp, #16
   1ef94:	af00      	add	r7, sp, #0
   1ef96:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
   1ef98:	687b      	ldr	r3, [r7, #4]
   1ef9a:	681b      	ldr	r3, [r3, #0]
   1ef9c:	60fb      	str	r3, [r7, #12]

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
   1ef9e:	68fb      	ldr	r3, [r7, #12]
   1efa0:	7e1b      	ldrb	r3, [r3, #24]
   1efa2:	b2db      	uxtb	r3, r3
   1efa4:	001a      	movs	r2, r3
   1efa6:	2304      	movs	r3, #4
   1efa8:	4013      	ands	r3, r2
   1efaa:	1e5a      	subs	r2, r3, #1
   1efac:	4193      	sbcs	r3, r2
   1efae:	b2db      	uxtb	r3, r3
}
   1efb0:	0018      	movs	r0, r3
   1efb2:	46bd      	mov	sp, r7
   1efb4:	b004      	add	sp, #16
   1efb6:	bd80      	pop	{r7, pc}

0001efb8 <spi_write>:
 * \retval STATUS_BUSY  If the last write was not completed
 */
static inline enum status_code spi_write(
		struct spi_module *module,
		uint16_t tx_data)
{
   1efb8:	b580      	push	{r7, lr}
   1efba:	b084      	sub	sp, #16
   1efbc:	af00      	add	r7, sp, #0
   1efbe:	6078      	str	r0, [r7, #4]
   1efc0:	000a      	movs	r2, r1
   1efc2:	1cbb      	adds	r3, r7, #2
   1efc4:	801a      	strh	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
   1efc6:	687b      	ldr	r3, [r7, #4]
   1efc8:	681b      	ldr	r3, [r3, #0]
   1efca:	60fb      	str	r3, [r7, #12]

	/* Check if the data register has been copied to the shift register */
	if (!spi_is_ready_to_write(module)) {
   1efcc:	687b      	ldr	r3, [r7, #4]
   1efce:	0018      	movs	r0, r3
   1efd0:	4b0a      	ldr	r3, [pc, #40]	; (1effc <spi_write+0x44>)
   1efd2:	4798      	blx	r3
   1efd4:	0003      	movs	r3, r0
   1efd6:	001a      	movs	r2, r3
   1efd8:	2301      	movs	r3, #1
   1efda:	4053      	eors	r3, r2
   1efdc:	b2db      	uxtb	r3, r3
   1efde:	2b00      	cmp	r3, #0
   1efe0:	d001      	beq.n	1efe6 <spi_write+0x2e>
		/* Data register has not been copied to the shift register, return */
		return STATUS_BUSY;
   1efe2:	2305      	movs	r3, #5
   1efe4:	e006      	b.n	1eff4 <spi_write+0x3c>
	}

	/* Write the character to the DATA register */
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
   1efe6:	1cbb      	adds	r3, r7, #2
   1efe8:	881b      	ldrh	r3, [r3, #0]
   1efea:	05db      	lsls	r3, r3, #23
   1efec:	0dda      	lsrs	r2, r3, #23
   1efee:	68fb      	ldr	r3, [r7, #12]
   1eff0:	629a      	str	r2, [r3, #40]	; 0x28

	return STATUS_OK;
   1eff2:	2300      	movs	r3, #0
}
   1eff4:	0018      	movs	r0, r3
   1eff6:	46bd      	mov	sp, r7
   1eff8:	b004      	add	sp, #16
   1effa:	bd80      	pop	{r7, pc}
   1effc:	0001ef69 	.word	0x0001ef69

0001f000 <spi_read>:
 * \retval STATUS_ERR_OVERFLOW  If the data is overflown
 */
static inline enum status_code spi_read(
		struct spi_module *const module,
		uint16_t *rx_data)
{
   1f000:	b580      	push	{r7, lr}
   1f002:	b084      	sub	sp, #16
   1f004:	af00      	add	r7, sp, #0
   1f006:	6078      	str	r0, [r7, #4]
   1f008:	6039      	str	r1, [r7, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
   1f00a:	687b      	ldr	r3, [r7, #4]
   1f00c:	681b      	ldr	r3, [r3, #0]
   1f00e:	60bb      	str	r3, [r7, #8]

	/* Check if data is ready to be read */
	if (!spi_is_ready_to_read(module)) {
   1f010:	687b      	ldr	r3, [r7, #4]
   1f012:	0018      	movs	r0, r3
   1f014:	4b1b      	ldr	r3, [pc, #108]	; (1f084 <spi_read+0x84>)
   1f016:	4798      	blx	r3
   1f018:	0003      	movs	r3, r0
   1f01a:	001a      	movs	r2, r3
   1f01c:	2301      	movs	r3, #1
   1f01e:	4053      	eors	r3, r2
   1f020:	b2db      	uxtb	r3, r3
   1f022:	2b00      	cmp	r3, #0
   1f024:	d001      	beq.n	1f02a <spi_read+0x2a>
		/* No data has been received, return */
		return STATUS_ERR_IO;
   1f026:	2310      	movs	r3, #16
   1f028:	e027      	b.n	1f07a <spi_read+0x7a>
	}

	/* Return value */
	enum status_code retval = STATUS_OK;
   1f02a:	230f      	movs	r3, #15
   1f02c:	18fb      	adds	r3, r7, r3
   1f02e:	2200      	movs	r2, #0
   1f030:	701a      	strb	r2, [r3, #0]

	/* Check if data is overflown */
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
   1f032:	68bb      	ldr	r3, [r7, #8]
   1f034:	8b5b      	ldrh	r3, [r3, #26]
   1f036:	b29b      	uxth	r3, r3
   1f038:	001a      	movs	r2, r3
   1f03a:	2304      	movs	r3, #4
   1f03c:	4013      	ands	r3, r2
   1f03e:	d006      	beq.n	1f04e <spi_read+0x4e>
		retval = STATUS_ERR_OVERFLOW;
   1f040:	230f      	movs	r3, #15
   1f042:	18fb      	adds	r3, r7, r3
   1f044:	221e      	movs	r2, #30
   1f046:	701a      	strb	r2, [r3, #0]
		/* Clear overflow flag */
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
   1f048:	68bb      	ldr	r3, [r7, #8]
   1f04a:	2204      	movs	r2, #4
   1f04c:	835a      	strh	r2, [r3, #26]
	}

	/* Read the character from the DATA register */
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
   1f04e:	687b      	ldr	r3, [r7, #4]
   1f050:	799b      	ldrb	r3, [r3, #6]
   1f052:	2b01      	cmp	r3, #1
   1f054:	d108      	bne.n	1f068 <spi_read+0x68>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
   1f056:	68bb      	ldr	r3, [r7, #8]
   1f058:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   1f05a:	b29b      	uxth	r3, r3
   1f05c:	05db      	lsls	r3, r3, #23
   1f05e:	0ddb      	lsrs	r3, r3, #23
   1f060:	b29a      	uxth	r2, r3
   1f062:	683b      	ldr	r3, [r7, #0]
   1f064:	801a      	strh	r2, [r3, #0]
   1f066:	e005      	b.n	1f074 <spi_read+0x74>
	} else {
		*rx_data = (uint8_t)spi_module->DATA.reg;
   1f068:	68bb      	ldr	r3, [r7, #8]
   1f06a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   1f06c:	b2db      	uxtb	r3, r3
   1f06e:	b29a      	uxth	r2, r3
   1f070:	683b      	ldr	r3, [r7, #0]
   1f072:	801a      	strh	r2, [r3, #0]
	}

	return retval;
   1f074:	230f      	movs	r3, #15
   1f076:	18fb      	adds	r3, r7, r3
   1f078:	781b      	ldrb	r3, [r3, #0]
}
   1f07a:	0018      	movs	r0, r3
   1f07c:	46bd      	mov	sp, r7
   1f07e:	b004      	add	sp, #16
   1f080:	bd80      	pop	{r7, pc}
   1f082:	46c0      	nop			; (mov r8, r8)
   1f084:	0001ef91 	.word	0x0001ef91

0001f088 <spi_rw>:

struct spi_module master;
struct spi_slave_inst slave_inst;

static sint8 spi_rw(uint8* pu8Mosi, uint8* pu8Miso, uint16 u16Sz)
{
   1f088:	b580      	push	{r7, lr}
   1f08a:	b086      	sub	sp, #24
   1f08c:	af00      	add	r7, sp, #0
   1f08e:	60f8      	str	r0, [r7, #12]
   1f090:	60b9      	str	r1, [r7, #8]
   1f092:	1dbb      	adds	r3, r7, #6
   1f094:	801a      	strh	r2, [r3, #0]
	uint8 u8Dummy = 0xFF;
   1f096:	2313      	movs	r3, #19
   1f098:	18fb      	adds	r3, r7, r3
   1f09a:	22ff      	movs	r2, #255	; 0xff
   1f09c:	701a      	strb	r2, [r3, #0]
	uint8 u8SkipMosi = 0, u8SkipMiso = 0;
   1f09e:	2317      	movs	r3, #23
   1f0a0:	18fb      	adds	r3, r7, r3
   1f0a2:	2200      	movs	r2, #0
   1f0a4:	701a      	strb	r2, [r3, #0]
   1f0a6:	2316      	movs	r3, #22
   1f0a8:	18fb      	adds	r3, r7, r3
   1f0aa:	2200      	movs	r2, #0
   1f0ac:	701a      	strb	r2, [r3, #0]
	uint16_t txd_data = 0;
   1f0ae:	2314      	movs	r3, #20
   1f0b0:	18fb      	adds	r3, r7, r3
   1f0b2:	2200      	movs	r2, #0
   1f0b4:	801a      	strh	r2, [r3, #0]
	uint16_t rxd_data = 0;
   1f0b6:	2310      	movs	r3, #16
   1f0b8:	18fb      	adds	r3, r7, r3
   1f0ba:	2200      	movs	r2, #0
   1f0bc:	801a      	strh	r2, [r3, #0]

	if(((pu8Miso == NULL) && (pu8Mosi == NULL)) ||(u16Sz == 0)) {
   1f0be:	68bb      	ldr	r3, [r7, #8]
   1f0c0:	2b00      	cmp	r3, #0
   1f0c2:	d102      	bne.n	1f0ca <spi_rw+0x42>
   1f0c4:	68fb      	ldr	r3, [r7, #12]
   1f0c6:	2b00      	cmp	r3, #0
   1f0c8:	d003      	beq.n	1f0d2 <spi_rw+0x4a>
   1f0ca:	1dbb      	adds	r3, r7, #6
   1f0cc:	881b      	ldrh	r3, [r3, #0]
   1f0ce:	2b00      	cmp	r3, #0
   1f0d0:	d102      	bne.n	1f0d8 <spi_rw+0x50>
		return M2M_ERR_INVALID_ARG;
   1f0d2:	230f      	movs	r3, #15
   1f0d4:	425b      	negs	r3, r3
   1f0d6:	e07e      	b.n	1f1d6 <spi_rw+0x14e>
	}

	if (pu8Mosi == NULL) {
   1f0d8:	68fb      	ldr	r3, [r7, #12]
   1f0da:	2b00      	cmp	r3, #0
   1f0dc:	d106      	bne.n	1f0ec <spi_rw+0x64>
		pu8Mosi = &u8Dummy;
   1f0de:	2313      	movs	r3, #19
   1f0e0:	18fb      	adds	r3, r7, r3
   1f0e2:	60fb      	str	r3, [r7, #12]
		u8SkipMosi = 1;
   1f0e4:	2317      	movs	r3, #23
   1f0e6:	18fb      	adds	r3, r7, r3
   1f0e8:	2201      	movs	r2, #1
   1f0ea:	701a      	strb	r2, [r3, #0]
	}
	if(pu8Miso == NULL) {
   1f0ec:	68bb      	ldr	r3, [r7, #8]
   1f0ee:	2b00      	cmp	r3, #0
   1f0f0:	d106      	bne.n	1f100 <spi_rw+0x78>
		pu8Miso = &u8Dummy;
   1f0f2:	2313      	movs	r3, #19
   1f0f4:	18fb      	adds	r3, r7, r3
   1f0f6:	60bb      	str	r3, [r7, #8]
		u8SkipMiso = 1;
   1f0f8:	2316      	movs	r3, #22
   1f0fa:	18fb      	adds	r3, r7, r3
   1f0fc:	2201      	movs	r2, #1
   1f0fe:	701a      	strb	r2, [r3, #0]
	}

	spi_select_slave(&master, &slave_inst, true);
   1f100:	4937      	ldr	r1, [pc, #220]	; (1f1e0 <spi_rw+0x158>)
   1f102:	4b38      	ldr	r3, [pc, #224]	; (1f1e4 <spi_rw+0x15c>)
   1f104:	2201      	movs	r2, #1
   1f106:	0018      	movs	r0, r3
   1f108:	4b37      	ldr	r3, [pc, #220]	; (1f1e8 <spi_rw+0x160>)
   1f10a:	4798      	blx	r3

	while (u16Sz) {
   1f10c:	e04c      	b.n	1f1a8 <spi_rw+0x120>
		txd_data = *pu8Mosi;
   1f10e:	68fb      	ldr	r3, [r7, #12]
   1f110:	781a      	ldrb	r2, [r3, #0]
   1f112:	2314      	movs	r3, #20
   1f114:	18fb      	adds	r3, r7, r3
   1f116:	801a      	strh	r2, [r3, #0]
		while (!spi_is_ready_to_write(&master))
   1f118:	46c0      	nop			; (mov r8, r8)
   1f11a:	4b32      	ldr	r3, [pc, #200]	; (1f1e4 <spi_rw+0x15c>)
   1f11c:	0018      	movs	r0, r3
   1f11e:	4b33      	ldr	r3, [pc, #204]	; (1f1ec <spi_rw+0x164>)
   1f120:	4798      	blx	r3
   1f122:	0003      	movs	r3, r0
   1f124:	001a      	movs	r2, r3
   1f126:	2301      	movs	r3, #1
   1f128:	4053      	eors	r3, r2
   1f12a:	b2db      	uxtb	r3, r3
   1f12c:	2b00      	cmp	r3, #0
   1f12e:	d1f4      	bne.n	1f11a <spi_rw+0x92>
			;
		while(spi_write(&master, txd_data) != STATUS_OK)
   1f130:	46c0      	nop			; (mov r8, r8)
   1f132:	2314      	movs	r3, #20
   1f134:	18fb      	adds	r3, r7, r3
   1f136:	881a      	ldrh	r2, [r3, #0]
   1f138:	4b2a      	ldr	r3, [pc, #168]	; (1f1e4 <spi_rw+0x15c>)
   1f13a:	0011      	movs	r1, r2
   1f13c:	0018      	movs	r0, r3
   1f13e:	4b2c      	ldr	r3, [pc, #176]	; (1f1f0 <spi_rw+0x168>)
   1f140:	4798      	blx	r3
   1f142:	1e03      	subs	r3, r0, #0
   1f144:	d1f5      	bne.n	1f132 <spi_rw+0xaa>
			;

		/* Read SPI master data register. */
		while (!spi_is_ready_to_read(&master))
   1f146:	46c0      	nop			; (mov r8, r8)
   1f148:	4b26      	ldr	r3, [pc, #152]	; (1f1e4 <spi_rw+0x15c>)
   1f14a:	0018      	movs	r0, r3
   1f14c:	4b29      	ldr	r3, [pc, #164]	; (1f1f4 <spi_rw+0x16c>)
   1f14e:	4798      	blx	r3
   1f150:	0003      	movs	r3, r0
   1f152:	001a      	movs	r2, r3
   1f154:	2301      	movs	r3, #1
   1f156:	4053      	eors	r3, r2
   1f158:	b2db      	uxtb	r3, r3
   1f15a:	2b00      	cmp	r3, #0
   1f15c:	d1f4      	bne.n	1f148 <spi_rw+0xc0>
			;
		while (spi_read(&master, &rxd_data) != STATUS_OK)
   1f15e:	46c0      	nop			; (mov r8, r8)
   1f160:	2310      	movs	r3, #16
   1f162:	18fa      	adds	r2, r7, r3
   1f164:	4b1f      	ldr	r3, [pc, #124]	; (1f1e4 <spi_rw+0x15c>)
   1f166:	0011      	movs	r1, r2
   1f168:	0018      	movs	r0, r3
   1f16a:	4b23      	ldr	r3, [pc, #140]	; (1f1f8 <spi_rw+0x170>)
   1f16c:	4798      	blx	r3
   1f16e:	1e03      	subs	r3, r0, #0
   1f170:	d1f6      	bne.n	1f160 <spi_rw+0xd8>
			;
		*pu8Miso = rxd_data;
   1f172:	2310      	movs	r3, #16
   1f174:	18fb      	adds	r3, r7, r3
   1f176:	881b      	ldrh	r3, [r3, #0]
   1f178:	b2da      	uxtb	r2, r3
   1f17a:	68bb      	ldr	r3, [r7, #8]
   1f17c:	701a      	strb	r2, [r3, #0]
			
		u16Sz--;
   1f17e:	1dbb      	adds	r3, r7, #6
   1f180:	881a      	ldrh	r2, [r3, #0]
   1f182:	1dbb      	adds	r3, r7, #6
   1f184:	3a01      	subs	r2, #1
   1f186:	801a      	strh	r2, [r3, #0]
		if (!u8SkipMiso)
   1f188:	2316      	movs	r3, #22
   1f18a:	18fb      	adds	r3, r7, r3
   1f18c:	781b      	ldrb	r3, [r3, #0]
   1f18e:	2b00      	cmp	r3, #0
   1f190:	d102      	bne.n	1f198 <spi_rw+0x110>
			pu8Miso++;
   1f192:	68bb      	ldr	r3, [r7, #8]
   1f194:	3301      	adds	r3, #1
   1f196:	60bb      	str	r3, [r7, #8]
		if (!u8SkipMosi)
   1f198:	2317      	movs	r3, #23
   1f19a:	18fb      	adds	r3, r7, r3
   1f19c:	781b      	ldrb	r3, [r3, #0]
   1f19e:	2b00      	cmp	r3, #0
   1f1a0:	d102      	bne.n	1f1a8 <spi_rw+0x120>
			pu8Mosi++;
   1f1a2:	68fb      	ldr	r3, [r7, #12]
   1f1a4:	3301      	adds	r3, #1
   1f1a6:	60fb      	str	r3, [r7, #12]
	while (u16Sz) {
   1f1a8:	1dbb      	adds	r3, r7, #6
   1f1aa:	881b      	ldrh	r3, [r3, #0]
   1f1ac:	2b00      	cmp	r3, #0
   1f1ae:	d1ae      	bne.n	1f10e <spi_rw+0x86>
	}

	while (!spi_is_write_complete(&master))
   1f1b0:	46c0      	nop			; (mov r8, r8)
   1f1b2:	4b0c      	ldr	r3, [pc, #48]	; (1f1e4 <spi_rw+0x15c>)
   1f1b4:	0018      	movs	r0, r3
   1f1b6:	4b11      	ldr	r3, [pc, #68]	; (1f1fc <spi_rw+0x174>)
   1f1b8:	4798      	blx	r3
   1f1ba:	0003      	movs	r3, r0
   1f1bc:	001a      	movs	r2, r3
   1f1be:	2301      	movs	r3, #1
   1f1c0:	4053      	eors	r3, r2
   1f1c2:	b2db      	uxtb	r3, r3
   1f1c4:	2b00      	cmp	r3, #0
   1f1c6:	d1f4      	bne.n	1f1b2 <spi_rw+0x12a>
		;

	spi_select_slave(&master, &slave_inst, false);
   1f1c8:	4905      	ldr	r1, [pc, #20]	; (1f1e0 <spi_rw+0x158>)
   1f1ca:	4b06      	ldr	r3, [pc, #24]	; (1f1e4 <spi_rw+0x15c>)
   1f1cc:	2200      	movs	r2, #0
   1f1ce:	0018      	movs	r0, r3
   1f1d0:	4b05      	ldr	r3, [pc, #20]	; (1f1e8 <spi_rw+0x160>)
   1f1d2:	4798      	blx	r3

	return M2M_SUCCESS;
   1f1d4:	2300      	movs	r3, #0
}
   1f1d6:	0018      	movs	r0, r3
   1f1d8:	46bd      	mov	sp, r7
   1f1da:	b006      	add	sp, #24
   1f1dc:	bd80      	pop	{r7, pc}
   1f1de:	46c0      	nop			; (mov r8, r8)
   1f1e0:	20005534 	.word	0x20005534
   1f1e4:	20005538 	.word	0x20005538
   1f1e8:	00026935 	.word	0x00026935
   1f1ec:	0001ef69 	.word	0x0001ef69
   1f1f0:	0001efb9 	.word	0x0001efb9
   1f1f4:	0001ef91 	.word	0x0001ef91
   1f1f8:	0001f001 	.word	0x0001f001
   1f1fc:	0001ef41 	.word	0x0001ef41

0001f200 <nm_bus_init>:
*	@fn		nm_bus_init
*	@brief	Initialize the bus wrapper
*	@return	M2M_SUCCESS in case of success and M2M_ERR_BUS_FAIL in case of failure
*/
sint8 nm_bus_init(void *pvinit)
{
   1f200:	b580      	push	{r7, lr}
   1f202:	b092      	sub	sp, #72	; 0x48
   1f204:	af00      	add	r7, sp, #0
   1f206:	6078      	str	r0, [r7, #4]
	sint8 result = M2M_SUCCESS;
   1f208:	2347      	movs	r3, #71	; 0x47
   1f20a:	18fb      	adds	r3, r7, r3
   1f20c:	2200      	movs	r2, #0
   1f20e:	701a      	strb	r2, [r3, #0]
	struct spi_config config;
	struct spi_slave_inst_config slave_config;

	/* Select SPI slave CS pin. */
	/* This step will set the CS high */
	spi_slave_inst_get_config_defaults(&slave_config);
   1f210:	2308      	movs	r3, #8
   1f212:	18fb      	adds	r3, r7, r3
   1f214:	0018      	movs	r0, r3
   1f216:	4b26      	ldr	r3, [pc, #152]	; (1f2b0 <nm_bus_init+0xb0>)
   1f218:	4798      	blx	r3
	slave_config.ss_pin = CONF_WINC_SPI_CS_PIN;
   1f21a:	2308      	movs	r3, #8
   1f21c:	18fb      	adds	r3, r7, r3
   1f21e:	220e      	movs	r2, #14
   1f220:	701a      	strb	r2, [r3, #0]
	spi_attach_slave(&slave_inst, &slave_config);
   1f222:	2308      	movs	r3, #8
   1f224:	18fa      	adds	r2, r7, r3
   1f226:	4b23      	ldr	r3, [pc, #140]	; (1f2b4 <nm_bus_init+0xb4>)
   1f228:	0011      	movs	r1, r2
   1f22a:	0018      	movs	r0, r3
   1f22c:	4b22      	ldr	r3, [pc, #136]	; (1f2b8 <nm_bus_init+0xb8>)
   1f22e:	4798      	blx	r3

	/* Configure the SPI master. */
	spi_get_config_defaults(&config);
   1f230:	230c      	movs	r3, #12
   1f232:	18fb      	adds	r3, r7, r3
   1f234:	0018      	movs	r0, r3
   1f236:	4b21      	ldr	r3, [pc, #132]	; (1f2bc <nm_bus_init+0xbc>)
   1f238:	4798      	blx	r3
	config.mux_setting = CONF_WINC_SPI_SERCOM_MUX;
   1f23a:	230c      	movs	r3, #12
   1f23c:	18fb      	adds	r3, r7, r3
   1f23e:	22c0      	movs	r2, #192	; 0xc0
   1f240:	0392      	lsls	r2, r2, #14
   1f242:	60da      	str	r2, [r3, #12]
	config.pinmux_pad0 = CONF_WINC_SPI_PINMUX_PAD0;
   1f244:	230c      	movs	r3, #12
   1f246:	18fb      	adds	r3, r7, r3
   1f248:	4a1d      	ldr	r2, [pc, #116]	; (1f2c0 <nm_bus_init+0xc0>)
   1f24a:	629a      	str	r2, [r3, #40]	; 0x28
	config.pinmux_pad1 = CONF_WINC_SPI_PINMUX_PAD1;
   1f24c:	230c      	movs	r3, #12
   1f24e:	18fb      	adds	r3, r7, r3
   1f250:	4a1c      	ldr	r2, [pc, #112]	; (1f2c4 <nm_bus_init+0xc4>)
   1f252:	62da      	str	r2, [r3, #44]	; 0x2c
	config.pinmux_pad2 = CONF_WINC_SPI_PINMUX_PAD2;
   1f254:	230c      	movs	r3, #12
   1f256:	18fb      	adds	r3, r7, r3
   1f258:	2201      	movs	r2, #1
   1f25a:	4252      	negs	r2, r2
   1f25c:	631a      	str	r2, [r3, #48]	; 0x30
	config.pinmux_pad3 = CONF_WINC_SPI_PINMUX_PAD3;
   1f25e:	230c      	movs	r3, #12
   1f260:	18fb      	adds	r3, r7, r3
   1f262:	4a19      	ldr	r2, [pc, #100]	; (1f2c8 <nm_bus_init+0xc8>)
   1f264:	635a      	str	r2, [r3, #52]	; 0x34
	config.master_slave_select_enable = false;
   1f266:	230c      	movs	r3, #12
   1f268:	18fb      	adds	r3, r7, r3
   1f26a:	2200      	movs	r2, #0
   1f26c:	751a      	strb	r2, [r3, #20]
	
	config.mode_specific.master.baudrate = CONF_WINC_SPI_CLOCK;
   1f26e:	230c      	movs	r3, #12
   1f270:	18fb      	adds	r3, r7, r3
   1f272:	4a16      	ldr	r2, [pc, #88]	; (1f2cc <nm_bus_init+0xcc>)
   1f274:	619a      	str	r2, [r3, #24]
	if (spi_init(&master, CONF_WINC_SPI_MODULE, &config) != STATUS_OK) {
   1f276:	230c      	movs	r3, #12
   1f278:	18fa      	adds	r2, r7, r3
   1f27a:	4915      	ldr	r1, [pc, #84]	; (1f2d0 <nm_bus_init+0xd0>)
   1f27c:	4b15      	ldr	r3, [pc, #84]	; (1f2d4 <nm_bus_init+0xd4>)
   1f27e:	0018      	movs	r0, r3
   1f280:	4b15      	ldr	r3, [pc, #84]	; (1f2d8 <nm_bus_init+0xd8>)
   1f282:	4798      	blx	r3
   1f284:	1e03      	subs	r3, r0, #0
   1f286:	d002      	beq.n	1f28e <nm_bus_init+0x8e>
		return M2M_ERR_BUS_FAIL;
   1f288:	2306      	movs	r3, #6
   1f28a:	425b      	negs	r3, r3
   1f28c:	e00c      	b.n	1f2a8 <nm_bus_init+0xa8>
	}

	/* Enable the SPI master. */
	spi_enable(&master);
   1f28e:	4b11      	ldr	r3, [pc, #68]	; (1f2d4 <nm_bus_init+0xd4>)
   1f290:	0018      	movs	r0, r3
   1f292:	4b12      	ldr	r3, [pc, #72]	; (1f2dc <nm_bus_init+0xdc>)
   1f294:	4798      	blx	r3

	nm_bsp_reset();
   1f296:	4b12      	ldr	r3, [pc, #72]	; (1f2e0 <nm_bus_init+0xe0>)
   1f298:	4798      	blx	r3
	nm_bsp_sleep(1);
   1f29a:	2001      	movs	r0, #1
   1f29c:	4b11      	ldr	r3, [pc, #68]	; (1f2e4 <nm_bus_init+0xe4>)
   1f29e:	4798      	blx	r3
#endif
	return result;
   1f2a0:	2347      	movs	r3, #71	; 0x47
   1f2a2:	18fb      	adds	r3, r7, r3
   1f2a4:	781b      	ldrb	r3, [r3, #0]
   1f2a6:	b25b      	sxtb	r3, r3
}
   1f2a8:	0018      	movs	r0, r3
   1f2aa:	46bd      	mov	sp, r7
   1f2ac:	b012      	add	sp, #72	; 0x48
   1f2ae:	bd80      	pop	{r7, pc}
   1f2b0:	0001ee0d 	.word	0x0001ee0d
   1f2b4:	20005534 	.word	0x20005534
   1f2b8:	0001ee31 	.word	0x0001ee31
   1f2bc:	0001ed89 	.word	0x0001ed89
   1f2c0:	000c0002 	.word	0x000c0002
   1f2c4:	000d0002 	.word	0x000d0002
   1f2c8:	000f0002 	.word	0x000f0002
   1f2cc:	00124f80 	.word	0x00124f80
   1f2d0:	42001000 	.word	0x42001000
   1f2d4:	20005538 	.word	0x20005538
   1f2d8:	00026671 	.word	0x00026671
   1f2dc:	0001ee95 	.word	0x0001ee95
   1f2e0:	0001eb05 	.word	0x0001eb05
   1f2e4:	0001eb45 	.word	0x0001eb45

0001f2e8 <nm_bus_ioctl>:
*					Arbitrary parameter depenging on IOCTL
*	@return	M2M_SUCCESS in case of success and M2M_ERR_BUS_FAIL in case of failure
*	@note	For SPI only, it's important to be able to send/receive at the same time
*/
sint8 nm_bus_ioctl(uint8 u8Cmd, void* pvParameter)
{
   1f2e8:	b590      	push	{r4, r7, lr}
   1f2ea:	b085      	sub	sp, #20
   1f2ec:	af00      	add	r7, sp, #0
   1f2ee:	0002      	movs	r2, r0
   1f2f0:	6039      	str	r1, [r7, #0]
   1f2f2:	1dfb      	adds	r3, r7, #7
   1f2f4:	701a      	strb	r2, [r3, #0]
	sint8 s8Ret = 0;
   1f2f6:	230f      	movs	r3, #15
   1f2f8:	18fb      	adds	r3, r7, r3
   1f2fa:	2200      	movs	r2, #0
   1f2fc:	701a      	strb	r2, [r3, #0]
	switch(u8Cmd)
   1f2fe:	1dfb      	adds	r3, r7, #7
   1f300:	781b      	ldrb	r3, [r3, #0]
   1f302:	2b03      	cmp	r3, #3
   1f304:	d10f      	bne.n	1f326 <nm_bus_ioctl+0x3e>
			s8Ret = nm_i2c_write_special(pstrParam->pu8Buf1, pstrParam->u16Sz1, pstrParam->pu8Buf2, pstrParam->u16Sz2);
		}
		break;
#elif defined CONF_WINC_USE_SPI
		case NM_BUS_IOCTL_RW: {
			tstrNmSpiRw *pstrParam = (tstrNmSpiRw *)pvParameter;
   1f306:	683b      	ldr	r3, [r7, #0]
   1f308:	60bb      	str	r3, [r7, #8]
			s8Ret = spi_rw(pstrParam->pu8InBuf, pstrParam->pu8OutBuf, pstrParam->u16Sz);
   1f30a:	68bb      	ldr	r3, [r7, #8]
   1f30c:	6818      	ldr	r0, [r3, #0]
   1f30e:	68bb      	ldr	r3, [r7, #8]
   1f310:	6859      	ldr	r1, [r3, #4]
   1f312:	68bb      	ldr	r3, [r7, #8]
   1f314:	891b      	ldrh	r3, [r3, #8]
   1f316:	220f      	movs	r2, #15
   1f318:	18bc      	adds	r4, r7, r2
   1f31a:	001a      	movs	r2, r3
   1f31c:	4b10      	ldr	r3, [pc, #64]	; (1f360 <nm_bus_ioctl+0x78>)
   1f31e:	4798      	blx	r3
   1f320:	0003      	movs	r3, r0
   1f322:	7023      	strb	r3, [r4, #0]
		}
		break;
   1f324:	e013      	b.n	1f34e <nm_bus_ioctl+0x66>
#endif
		default:
			s8Ret = -1;
   1f326:	230f      	movs	r3, #15
   1f328:	18fb      	adds	r3, r7, r3
   1f32a:	22ff      	movs	r2, #255	; 0xff
   1f32c:	701a      	strb	r2, [r3, #0]
			M2M_ERR("invalide ioclt cmd\n");
   1f32e:	2383      	movs	r3, #131	; 0x83
   1f330:	005a      	lsls	r2, r3, #1
   1f332:	490c      	ldr	r1, [pc, #48]	; (1f364 <nm_bus_ioctl+0x7c>)
   1f334:	4b0c      	ldr	r3, [pc, #48]	; (1f368 <nm_bus_ioctl+0x80>)
   1f336:	0018      	movs	r0, r3
   1f338:	4b0c      	ldr	r3, [pc, #48]	; (1f36c <nm_bus_ioctl+0x84>)
   1f33a:	4798      	blx	r3
   1f33c:	4b0c      	ldr	r3, [pc, #48]	; (1f370 <nm_bus_ioctl+0x88>)
   1f33e:	0018      	movs	r0, r3
   1f340:	4b0a      	ldr	r3, [pc, #40]	; (1f36c <nm_bus_ioctl+0x84>)
   1f342:	4798      	blx	r3
   1f344:	4b0b      	ldr	r3, [pc, #44]	; (1f374 <nm_bus_ioctl+0x8c>)
   1f346:	0018      	movs	r0, r3
   1f348:	4b08      	ldr	r3, [pc, #32]	; (1f36c <nm_bus_ioctl+0x84>)
   1f34a:	4798      	blx	r3
			break;
   1f34c:	46c0      	nop			; (mov r8, r8)
	}

	return s8Ret;
   1f34e:	230f      	movs	r3, #15
   1f350:	18fb      	adds	r3, r7, r3
   1f352:	781b      	ldrb	r3, [r3, #0]
   1f354:	b25b      	sxtb	r3, r3
}
   1f356:	0018      	movs	r0, r3
   1f358:	46bd      	mov	sp, r7
   1f35a:	b005      	add	sp, #20
   1f35c:	bd90      	pop	{r4, r7, pc}
   1f35e:	46c0      	nop			; (mov r8, r8)
   1f360:	0001f089 	.word	0x0001f089
   1f364:	000367b8 	.word	0x000367b8
   1f368:	0003678c 	.word	0x0003678c
   1f36c:	0001c65d 	.word	0x0001c65d
   1f370:	000367a0 	.word	0x000367a0
   1f374:	000367b4 	.word	0x000367b4

0001f378 <nm_bus_deinit>:
/*
*	@fn		nm_bus_deinit
*	@brief	De-initialize the bus wrapper
*/
sint8 nm_bus_deinit(void)
{
   1f378:	b580      	push	{r7, lr}
   1f37a:	b082      	sub	sp, #8
   1f37c:	af00      	add	r7, sp, #0
	sint8 result = M2M_SUCCESS;
   1f37e:	1dfb      	adds	r3, r7, #7
   1f380:	2200      	movs	r2, #0
   1f382:	701a      	strb	r2, [r3, #0]
	struct port_config pin_conf;
		
	port_get_config_defaults(&pin_conf);
   1f384:	1d3b      	adds	r3, r7, #4
   1f386:	0018      	movs	r0, r3
   1f388:	4b13      	ldr	r3, [pc, #76]	; (1f3d8 <nm_bus_deinit+0x60>)
   1f38a:	4798      	blx	r3
	/* Configure control pins as input no pull up. */
	pin_conf.direction  = PORT_PIN_DIR_INPUT;
   1f38c:	1d3b      	adds	r3, r7, #4
   1f38e:	2200      	movs	r2, #0
   1f390:	701a      	strb	r2, [r3, #0]
	pin_conf.input_pull = PORT_PIN_PULL_NONE;
   1f392:	1d3b      	adds	r3, r7, #4
   1f394:	2200      	movs	r2, #0
   1f396:	705a      	strb	r2, [r3, #1]
	i2c_master_disable(&i2c_master_instance);
	port_pin_set_config(CONF_WINC_I2C_SCL, &pin_conf);
	port_pin_set_config(CONF_WINC_I2C_SDA, &pin_conf);
#endif /* CONF_WINC_USE_I2C */
#ifdef CONF_WINC_USE_SPI
	spi_disable(&master);
   1f398:	4b10      	ldr	r3, [pc, #64]	; (1f3dc <nm_bus_deinit+0x64>)
   1f39a:	0018      	movs	r0, r3
   1f39c:	4b10      	ldr	r3, [pc, #64]	; (1f3e0 <nm_bus_deinit+0x68>)
   1f39e:	4798      	blx	r3
	port_pin_set_config(CONF_WINC_SPI_MOSI, &pin_conf);
   1f3a0:	1d3b      	adds	r3, r7, #4
   1f3a2:	0019      	movs	r1, r3
   1f3a4:	200c      	movs	r0, #12
   1f3a6:	4b0f      	ldr	r3, [pc, #60]	; (1f3e4 <nm_bus_deinit+0x6c>)
   1f3a8:	4798      	blx	r3
	port_pin_set_config(CONF_WINC_SPI_MISO, &pin_conf);
   1f3aa:	1d3b      	adds	r3, r7, #4
   1f3ac:	0019      	movs	r1, r3
   1f3ae:	200f      	movs	r0, #15
   1f3b0:	4b0c      	ldr	r3, [pc, #48]	; (1f3e4 <nm_bus_deinit+0x6c>)
   1f3b2:	4798      	blx	r3
	port_pin_set_config(CONF_WINC_SPI_SCK,  &pin_conf);
   1f3b4:	1d3b      	adds	r3, r7, #4
   1f3b6:	0019      	movs	r1, r3
   1f3b8:	200d      	movs	r0, #13
   1f3ba:	4b0a      	ldr	r3, [pc, #40]	; (1f3e4 <nm_bus_deinit+0x6c>)
   1f3bc:	4798      	blx	r3
	port_pin_set_config(CONF_WINC_SPI_SS,   &pin_conf);
   1f3be:	1d3b      	adds	r3, r7, #4
   1f3c0:	0019      	movs	r1, r3
   1f3c2:	200e      	movs	r0, #14
   1f3c4:	4b07      	ldr	r3, [pc, #28]	; (1f3e4 <nm_bus_deinit+0x6c>)
   1f3c6:	4798      	blx	r3
	//port_pin_set_output_level(CONF_WINC_SPI_MOSI, false);
	//port_pin_set_output_level(CONF_WINC_SPI_MISO, false);
	//port_pin_set_output_level(CONF_WINC_SPI_SCK,  false);
	//port_pin_set_output_level(CONF_WINC_SPI_SS,   false);
#endif /* CONF_WINC_USE_SPI */
	return result;
   1f3c8:	1dfb      	adds	r3, r7, #7
   1f3ca:	781b      	ldrb	r3, [r3, #0]
   1f3cc:	b25b      	sxtb	r3, r3
}
   1f3ce:	0018      	movs	r0, r3
   1f3d0:	46bd      	mov	sp, r7
   1f3d2:	b002      	add	sp, #8
   1f3d4:	bd80      	pop	{r7, pc}
   1f3d6:	46c0      	nop			; (mov r8, r8)
   1f3d8:	0001ecf1 	.word	0x0001ecf1
   1f3dc:	20005538 	.word	0x20005538
   1f3e0:	0001eee5 	.word	0x0001eee5
   1f3e4:	000251f1 	.word	0x000251f1

0001f3e8 <m2m_memcpy>:
 *
 */
#include "common/include/nm_common.h"

void m2m_memcpy(uint8* pDst,uint8* pSrc,uint32 sz)
{
   1f3e8:	b580      	push	{r7, lr}
   1f3ea:	b084      	sub	sp, #16
   1f3ec:	af00      	add	r7, sp, #0
   1f3ee:	60f8      	str	r0, [r7, #12]
   1f3f0:	60b9      	str	r1, [r7, #8]
   1f3f2:	607a      	str	r2, [r7, #4]
	if(sz == 0) return;
   1f3f4:	687b      	ldr	r3, [r7, #4]
   1f3f6:	2b00      	cmp	r3, #0
   1f3f8:	d010      	beq.n	1f41c <m2m_memcpy+0x34>
	do
	{
		*pDst = *pSrc;
   1f3fa:	68bb      	ldr	r3, [r7, #8]
   1f3fc:	781a      	ldrb	r2, [r3, #0]
   1f3fe:	68fb      	ldr	r3, [r7, #12]
   1f400:	701a      	strb	r2, [r3, #0]
		pDst++;
   1f402:	68fb      	ldr	r3, [r7, #12]
   1f404:	3301      	adds	r3, #1
   1f406:	60fb      	str	r3, [r7, #12]
		pSrc++;
   1f408:	68bb      	ldr	r3, [r7, #8]
   1f40a:	3301      	adds	r3, #1
   1f40c:	60bb      	str	r3, [r7, #8]
	}while(--sz);
   1f40e:	687b      	ldr	r3, [r7, #4]
   1f410:	3b01      	subs	r3, #1
   1f412:	607b      	str	r3, [r7, #4]
   1f414:	687b      	ldr	r3, [r7, #4]
   1f416:	2b00      	cmp	r3, #0
   1f418:	d1ef      	bne.n	1f3fa <m2m_memcpy+0x12>
   1f41a:	e000      	b.n	1f41e <m2m_memcpy+0x36>
	if(sz == 0) return;
   1f41c:	46c0      	nop			; (mov r8, r8)
}
   1f41e:	46bd      	mov	sp, r7
   1f420:	b004      	add	sp, #16
   1f422:	bd80      	pop	{r7, pc}

0001f424 <m2m_memset>:

	return cs;
}

void m2m_memset(uint8* pBuf,uint8 val,uint32 sz)
{
   1f424:	b580      	push	{r7, lr}
   1f426:	b084      	sub	sp, #16
   1f428:	af00      	add	r7, sp, #0
   1f42a:	60f8      	str	r0, [r7, #12]
   1f42c:	607a      	str	r2, [r7, #4]
   1f42e:	230b      	movs	r3, #11
   1f430:	18fb      	adds	r3, r7, r3
   1f432:	1c0a      	adds	r2, r1, #0
   1f434:	701a      	strb	r2, [r3, #0]
	if(sz == 0) return;
   1f436:	687b      	ldr	r3, [r7, #4]
   1f438:	2b00      	cmp	r3, #0
   1f43a:	d00e      	beq.n	1f45a <m2m_memset+0x36>
	do
	{
		*pBuf = val;
   1f43c:	68fb      	ldr	r3, [r7, #12]
   1f43e:	220b      	movs	r2, #11
   1f440:	18ba      	adds	r2, r7, r2
   1f442:	7812      	ldrb	r2, [r2, #0]
   1f444:	701a      	strb	r2, [r3, #0]
		pBuf++;
   1f446:	68fb      	ldr	r3, [r7, #12]
   1f448:	3301      	adds	r3, #1
   1f44a:	60fb      	str	r3, [r7, #12]
	}while(--sz);
   1f44c:	687b      	ldr	r3, [r7, #4]
   1f44e:	3b01      	subs	r3, #1
   1f450:	607b      	str	r3, [r7, #4]
   1f452:	687b      	ldr	r3, [r7, #4]
   1f454:	2b00      	cmp	r3, #0
   1f456:	d1f1      	bne.n	1f43c <m2m_memset+0x18>
   1f458:	e000      	b.n	1f45c <m2m_memset+0x38>
	if(sz == 0) return;
   1f45a:	46c0      	nop			; (mov r8, r8)
}
   1f45c:	46bd      	mov	sp, r7
   1f45e:	b004      	add	sp, #16
   1f460:	bd80      	pop	{r7, pc}

0001f462 <m2m_strlen>:

uint16 m2m_strlen(uint8 * pcStr)
{
   1f462:	b580      	push	{r7, lr}
   1f464:	b084      	sub	sp, #16
   1f466:	af00      	add	r7, sp, #0
   1f468:	6078      	str	r0, [r7, #4]
	uint16	u16StrLen = 0;
   1f46a:	230e      	movs	r3, #14
   1f46c:	18fb      	adds	r3, r7, r3
   1f46e:	2200      	movs	r2, #0
   1f470:	801a      	strh	r2, [r3, #0]
	while(*pcStr)
   1f472:	e009      	b.n	1f488 <m2m_strlen+0x26>
	{
		u16StrLen ++;
   1f474:	230e      	movs	r3, #14
   1f476:	18fb      	adds	r3, r7, r3
   1f478:	881a      	ldrh	r2, [r3, #0]
   1f47a:	230e      	movs	r3, #14
   1f47c:	18fb      	adds	r3, r7, r3
   1f47e:	3201      	adds	r2, #1
   1f480:	801a      	strh	r2, [r3, #0]
		pcStr++;
   1f482:	687b      	ldr	r3, [r7, #4]
   1f484:	3301      	adds	r3, #1
   1f486:	607b      	str	r3, [r7, #4]
	while(*pcStr)
   1f488:	687b      	ldr	r3, [r7, #4]
   1f48a:	781b      	ldrb	r3, [r3, #0]
   1f48c:	2b00      	cmp	r3, #0
   1f48e:	d1f1      	bne.n	1f474 <m2m_strlen+0x12>
	}
	return u16StrLen;
   1f490:	230e      	movs	r3, #14
   1f492:	18fb      	adds	r3, r7, r3
   1f494:	881b      	ldrh	r3, [r3, #0]
}
   1f496:	0018      	movs	r0, r3
   1f498:	46bd      	mov	sp, r7
   1f49a:	b004      	add	sp, #16
   1f49c:	bd80      	pop	{r7, pc}
	...

0001f4a0 <isr>:
#ifdef ETH_MODE
extern void os_hook_isr(void);
#endif

static void isr(void)
{
   1f4a0:	b580      	push	{r7, lr}
   1f4a2:	af00      	add	r7, sp, #0
	gstrHifCxt.u8Interrupt++;
   1f4a4:	4b04      	ldr	r3, [pc, #16]	; (1f4b8 <isr+0x18>)
   1f4a6:	78db      	ldrb	r3, [r3, #3]
   1f4a8:	b2db      	uxtb	r3, r3
   1f4aa:	3301      	adds	r3, #1
   1f4ac:	b2da      	uxtb	r2, r3
   1f4ae:	4b02      	ldr	r3, [pc, #8]	; (1f4b8 <isr+0x18>)
   1f4b0:	70da      	strb	r2, [r3, #3]
	nm_bsp_interrupt_ctrl(0);
#endif
#ifdef ETH_MODE
	os_hook_isr();
#endif
}
   1f4b2:	46c0      	nop			; (mov r8, r8)
   1f4b4:	46bd      	mov	sp, r7
   1f4b6:	bd80      	pop	{r7, pc}
   1f4b8:	20005574 	.word	0x20005574

0001f4bc <hif_set_rx_done>:
static sint8 hif_set_rx_done(void)
{
   1f4bc:	b590      	push	{r4, r7, lr}
   1f4be:	b083      	sub	sp, #12
   1f4c0:	af00      	add	r7, sp, #0
	uint32 reg;
	sint8 ret = M2M_SUCCESS;
   1f4c2:	1dfb      	adds	r3, r7, #7
   1f4c4:	2200      	movs	r2, #0
   1f4c6:	701a      	strb	r2, [r3, #0]

	gstrHifCxt.u8HifRXDone = 0;
   1f4c8:	4b14      	ldr	r3, [pc, #80]	; (1f51c <hif_set_rx_done+0x60>)
   1f4ca:	2200      	movs	r2, #0
   1f4cc:	709a      	strb	r2, [r3, #2]
#ifdef NM_EDGE_INTERRUPT
	nm_bsp_interrupt_ctrl(1);
   1f4ce:	2001      	movs	r0, #1
   1f4d0:	4b13      	ldr	r3, [pc, #76]	; (1f520 <hif_set_rx_done+0x64>)
   1f4d2:	4798      	blx	r3
#endif
	ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_0,&reg);
   1f4d4:	1dfc      	adds	r4, r7, #7
   1f4d6:	003b      	movs	r3, r7
   1f4d8:	4a12      	ldr	r2, [pc, #72]	; (1f524 <hif_set_rx_done+0x68>)
   1f4da:	0019      	movs	r1, r3
   1f4dc:	0010      	movs	r0, r2
   1f4de:	4b12      	ldr	r3, [pc, #72]	; (1f528 <hif_set_rx_done+0x6c>)
   1f4e0:	4798      	blx	r3
   1f4e2:	0003      	movs	r3, r0
   1f4e4:	7023      	strb	r3, [r4, #0]
	if(ret != M2M_SUCCESS)goto ERR1;
   1f4e6:	1dfb      	adds	r3, r7, #7
   1f4e8:	781b      	ldrb	r3, [r3, #0]
   1f4ea:	b25b      	sxtb	r3, r3
   1f4ec:	2b00      	cmp	r3, #0
   1f4ee:	d10d      	bne.n	1f50c <hif_set_rx_done+0x50>
	/* Set RX Done */
	reg |= NBIT1;
   1f4f0:	683b      	ldr	r3, [r7, #0]
   1f4f2:	2202      	movs	r2, #2
   1f4f4:	4313      	orrs	r3, r2
   1f4f6:	603b      	str	r3, [r7, #0]
	ret = nm_write_reg(WIFI_HOST_RCV_CTRL_0,reg);
   1f4f8:	683b      	ldr	r3, [r7, #0]
   1f4fa:	1dfc      	adds	r4, r7, #7
   1f4fc:	4a09      	ldr	r2, [pc, #36]	; (1f524 <hif_set_rx_done+0x68>)
   1f4fe:	0019      	movs	r1, r3
   1f500:	0010      	movs	r0, r2
   1f502:	4b0a      	ldr	r3, [pc, #40]	; (1f52c <hif_set_rx_done+0x70>)
   1f504:	4798      	blx	r3
   1f506:	0003      	movs	r3, r0
   1f508:	7023      	strb	r3, [r4, #0]
   1f50a:	e000      	b.n	1f50e <hif_set_rx_done+0x52>
	if(ret != M2M_SUCCESS)goto ERR1;
   1f50c:	46c0      	nop			; (mov r8, r8)
	if(ret != M2M_SUCCESS)goto ERR1;
#ifdef NM_LEVEL_INTERRUPT
	nm_bsp_interrupt_ctrl(1);
#endif
ERR1:
	return ret;
   1f50e:	1dfb      	adds	r3, r7, #7
   1f510:	781b      	ldrb	r3, [r3, #0]
   1f512:	b25b      	sxtb	r3, r3

}
   1f514:	0018      	movs	r0, r3
   1f516:	46bd      	mov	sp, r7
   1f518:	b003      	add	sp, #12
   1f51a:	bd90      	pop	{r4, r7, pc}
   1f51c:	20005574 	.word	0x20005574
   1f520:	0001ebd9 	.word	0x0001ebd9
   1f524:	00001070 	.word	0x00001070
   1f528:	000214b5 	.word	0x000214b5
   1f52c:	000214d9 	.word	0x000214d9

0001f530 <m2m_hif_cb>:
*	@author
*	@date
*	@version	1.0
*/
static void m2m_hif_cb(uint8 u8OpCode, uint16 u16DataSize, uint32 u32Addr)
{
   1f530:	b580      	push	{r7, lr}
   1f532:	b082      	sub	sp, #8
   1f534:	af00      	add	r7, sp, #0
   1f536:	603a      	str	r2, [r7, #0]
   1f538:	1dfb      	adds	r3, r7, #7
   1f53a:	1c02      	adds	r2, r0, #0
   1f53c:	701a      	strb	r2, [r3, #0]
   1f53e:	1d3b      	adds	r3, r7, #4
   1f540:	1c0a      	adds	r2, r1, #0
   1f542:	801a      	strh	r2, [r3, #0]


}
   1f544:	46c0      	nop			; (mov r8, r8)
   1f546:	46bd      	mov	sp, r7
   1f548:	b002      	add	sp, #8
   1f54a:	bd80      	pop	{r7, pc}

0001f54c <hif_chip_wake>:
*	@brief	To Wakeup the chip.
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_chip_wake(void)
{
   1f54c:	b590      	push	{r4, r7, lr}
   1f54e:	b083      	sub	sp, #12
   1f550:	af00      	add	r7, sp, #0
	sint8 ret = M2M_SUCCESS;
   1f552:	1dfb      	adds	r3, r7, #7
   1f554:	2200      	movs	r2, #0
   1f556:	701a      	strb	r2, [r3, #0]
	if(gstrHifCxt.u8HifRXDone)
   1f558:	4b16      	ldr	r3, [pc, #88]	; (1f5b4 <hif_chip_wake+0x68>)
   1f55a:	789b      	ldrb	r3, [r3, #2]
   1f55c:	b2db      	uxtb	r3, r3
   1f55e:	2b00      	cmp	r3, #0
   1f560:	d003      	beq.n	1f56a <hif_chip_wake+0x1e>
	{
		/*chip already wake for the rx not done no need to send wake request*/
		return ret;
   1f562:	1dfb      	adds	r3, r7, #7
   1f564:	781b      	ldrb	r3, [r3, #0]
   1f566:	b25b      	sxtb	r3, r3
   1f568:	e01f      	b.n	1f5aa <hif_chip_wake+0x5e>
	}
	if(gstrHifCxt.u8ChipSleep == 0)
   1f56a:	4b12      	ldr	r3, [pc, #72]	; (1f5b4 <hif_chip_wake+0x68>)
   1f56c:	785b      	ldrb	r3, [r3, #1]
   1f56e:	b2db      	uxtb	r3, r3
   1f570:	2b00      	cmp	r3, #0
   1f572:	d10e      	bne.n	1f592 <hif_chip_wake+0x46>
	{
		if(gstrHifCxt.u8ChipMode != M2M_NO_PS)
   1f574:	4b0f      	ldr	r3, [pc, #60]	; (1f5b4 <hif_chip_wake+0x68>)
   1f576:	781b      	ldrb	r3, [r3, #0]
   1f578:	b2db      	uxtb	r3, r3
   1f57a:	2b00      	cmp	r3, #0
   1f57c:	d009      	beq.n	1f592 <hif_chip_wake+0x46>
		{
			ret = chip_wake();
   1f57e:	1dfc      	adds	r4, r7, #7
   1f580:	4b0d      	ldr	r3, [pc, #52]	; (1f5b8 <hif_chip_wake+0x6c>)
   1f582:	4798      	blx	r3
   1f584:	0003      	movs	r3, r0
   1f586:	7023      	strb	r3, [r4, #0]
			if(ret != M2M_SUCCESS)goto ERR1;
   1f588:	1dfb      	adds	r3, r7, #7
   1f58a:	781b      	ldrb	r3, [r3, #0]
   1f58c:	b25b      	sxtb	r3, r3
   1f58e:	2b00      	cmp	r3, #0
   1f590:	d107      	bne.n	1f5a2 <hif_chip_wake+0x56>
		}
		else
		{
		}
	}
	gstrHifCxt.u8ChipSleep++;
   1f592:	4b08      	ldr	r3, [pc, #32]	; (1f5b4 <hif_chip_wake+0x68>)
   1f594:	785b      	ldrb	r3, [r3, #1]
   1f596:	b2db      	uxtb	r3, r3
   1f598:	3301      	adds	r3, #1
   1f59a:	b2da      	uxtb	r2, r3
   1f59c:	4b05      	ldr	r3, [pc, #20]	; (1f5b4 <hif_chip_wake+0x68>)
   1f59e:	705a      	strb	r2, [r3, #1]
   1f5a0:	e000      	b.n	1f5a4 <hif_chip_wake+0x58>
			if(ret != M2M_SUCCESS)goto ERR1;
   1f5a2:	46c0      	nop			; (mov r8, r8)
ERR1:
	return ret;
   1f5a4:	1dfb      	adds	r3, r7, #7
   1f5a6:	781b      	ldrb	r3, [r3, #0]
   1f5a8:	b25b      	sxtb	r3, r3
}
   1f5aa:	0018      	movs	r0, r3
   1f5ac:	46bd      	mov	sp, r7
   1f5ae:	b003      	add	sp, #12
   1f5b0:	bd90      	pop	{r4, r7, pc}
   1f5b2:	46c0      	nop			; (mov r8, r8)
   1f5b4:	20005574 	.word	0x20005574
   1f5b8:	00020f85 	.word	0x00020f85

0001f5bc <hif_chip_sleep_sc>:
*	@brief	To clear the chip sleep but keep the chip sleep
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_chip_sleep_sc(void)
{
   1f5bc:	b580      	push	{r7, lr}
   1f5be:	af00      	add	r7, sp, #0
	if(gstrHifCxt.u8ChipSleep >= 1)
   1f5c0:	4b07      	ldr	r3, [pc, #28]	; (1f5e0 <hif_chip_sleep_sc+0x24>)
   1f5c2:	785b      	ldrb	r3, [r3, #1]
   1f5c4:	b2db      	uxtb	r3, r3
   1f5c6:	2b00      	cmp	r3, #0
   1f5c8:	d006      	beq.n	1f5d8 <hif_chip_sleep_sc+0x1c>
	{
		gstrHifCxt.u8ChipSleep--;
   1f5ca:	4b05      	ldr	r3, [pc, #20]	; (1f5e0 <hif_chip_sleep_sc+0x24>)
   1f5cc:	785b      	ldrb	r3, [r3, #1]
   1f5ce:	b2db      	uxtb	r3, r3
   1f5d0:	3b01      	subs	r3, #1
   1f5d2:	b2da      	uxtb	r2, r3
   1f5d4:	4b02      	ldr	r3, [pc, #8]	; (1f5e0 <hif_chip_sleep_sc+0x24>)
   1f5d6:	705a      	strb	r2, [r3, #1]
	}
	return M2M_SUCCESS;
   1f5d8:	2300      	movs	r3, #0
}
   1f5da:	0018      	movs	r0, r3
   1f5dc:	46bd      	mov	sp, r7
   1f5de:	bd80      	pop	{r7, pc}
   1f5e0:	20005574 	.word	0x20005574

0001f5e4 <hif_chip_sleep>:
*	@brief	To make the chip sleep.
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_chip_sleep(void)
{
   1f5e4:	b590      	push	{r4, r7, lr}
   1f5e6:	b083      	sub	sp, #12
   1f5e8:	af00      	add	r7, sp, #0
	sint8 ret = M2M_SUCCESS;
   1f5ea:	1dfb      	adds	r3, r7, #7
   1f5ec:	2200      	movs	r2, #0
   1f5ee:	701a      	strb	r2, [r3, #0]

	if(gstrHifCxt.u8ChipSleep >= 1)
   1f5f0:	4b10      	ldr	r3, [pc, #64]	; (1f634 <hif_chip_sleep+0x50>)
   1f5f2:	785b      	ldrb	r3, [r3, #1]
   1f5f4:	b2db      	uxtb	r3, r3
   1f5f6:	2b00      	cmp	r3, #0
   1f5f8:	d006      	beq.n	1f608 <hif_chip_sleep+0x24>
	{
		gstrHifCxt.u8ChipSleep--;
   1f5fa:	4b0e      	ldr	r3, [pc, #56]	; (1f634 <hif_chip_sleep+0x50>)
   1f5fc:	785b      	ldrb	r3, [r3, #1]
   1f5fe:	b2db      	uxtb	r3, r3
   1f600:	3b01      	subs	r3, #1
   1f602:	b2da      	uxtb	r2, r3
   1f604:	4b0b      	ldr	r3, [pc, #44]	; (1f634 <hif_chip_sleep+0x50>)
   1f606:	705a      	strb	r2, [r3, #1]
	}
	
	if(gstrHifCxt.u8ChipSleep == 0)
   1f608:	4b0a      	ldr	r3, [pc, #40]	; (1f634 <hif_chip_sleep+0x50>)
   1f60a:	785b      	ldrb	r3, [r3, #1]
   1f60c:	b2db      	uxtb	r3, r3
   1f60e:	2b00      	cmp	r3, #0
   1f610:	d109      	bne.n	1f626 <hif_chip_sleep+0x42>
	{
		if(gstrHifCxt.u8ChipMode != M2M_NO_PS)
   1f612:	4b08      	ldr	r3, [pc, #32]	; (1f634 <hif_chip_sleep+0x50>)
   1f614:	781b      	ldrb	r3, [r3, #0]
   1f616:	b2db      	uxtb	r3, r3
   1f618:	2b00      	cmp	r3, #0
   1f61a:	d004      	beq.n	1f626 <hif_chip_sleep+0x42>
		{
			ret = chip_sleep();
   1f61c:	1dfc      	adds	r4, r7, #7
   1f61e:	4b06      	ldr	r3, [pc, #24]	; (1f638 <hif_chip_sleep+0x54>)
   1f620:	4798      	blx	r3
   1f622:	0003      	movs	r3, r0
   1f624:	7023      	strb	r3, [r4, #0]
		else
		{
		}
	}
ERR1:
	return ret;
   1f626:	1dfb      	adds	r3, r7, #7
   1f628:	781b      	ldrb	r3, [r3, #0]
   1f62a:	b25b      	sxtb	r3, r3
}
   1f62c:	0018      	movs	r0, r3
   1f62e:	46bd      	mov	sp, r7
   1f630:	b003      	add	sp, #12
   1f632:	bd90      	pop	{r4, r7, pc}
   1f634:	20005574 	.word	0x20005574
   1f638:	00020ead 	.word	0x00020ead

0001f63c <hif_init>:
*				Pointer to the arguments.
*   @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_init(void * arg)
{
   1f63c:	b580      	push	{r7, lr}
   1f63e:	b082      	sub	sp, #8
   1f640:	af00      	add	r7, sp, #0
   1f642:	6078      	str	r0, [r7, #4]
	m2m_memset((uint8*)&gstrHifCxt,0,sizeof(tstrHifContext));
   1f644:	4b09      	ldr	r3, [pc, #36]	; (1f66c <hif_init+0x30>)
   1f646:	222c      	movs	r2, #44	; 0x2c
   1f648:	2100      	movs	r1, #0
   1f64a:	0018      	movs	r0, r3
   1f64c:	4b08      	ldr	r3, [pc, #32]	; (1f670 <hif_init+0x34>)
   1f64e:	4798      	blx	r3
	nm_bsp_register_isr(isr);
   1f650:	4b08      	ldr	r3, [pc, #32]	; (1f674 <hif_init+0x38>)
   1f652:	0018      	movs	r0, r3
   1f654:	4b08      	ldr	r3, [pc, #32]	; (1f678 <hif_init+0x3c>)
   1f656:	4798      	blx	r3
	hif_register_cb(M2M_REQ_GROUP_HIF,m2m_hif_cb);
   1f658:	4b08      	ldr	r3, [pc, #32]	; (1f67c <hif_init+0x40>)
   1f65a:	0019      	movs	r1, r3
   1f65c:	2003      	movs	r0, #3
   1f65e:	4b08      	ldr	r3, [pc, #32]	; (1f680 <hif_init+0x44>)
   1f660:	4798      	blx	r3
	return M2M_SUCCESS;
   1f662:	2300      	movs	r3, #0
}
   1f664:	0018      	movs	r0, r3
   1f666:	46bd      	mov	sp, r7
   1f668:	b002      	add	sp, #8
   1f66a:	bd80      	pop	{r7, pc}
   1f66c:	20005574 	.word	0x20005574
   1f670:	0001f425 	.word	0x0001f425
   1f674:	0001f4a1 	.word	0x0001f4a1
   1f678:	0001eb61 	.word	0x0001eb61
   1f67c:	0001f531 	.word	0x0001f531
   1f680:	00020121 	.word	0x00020121

0001f684 <hif_send>:
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_send(uint8 u8Gid,uint8 u8Opcode,uint8 *pu8CtrlBuf,uint16 u16CtrlBufSize,
			   uint8 *pu8DataBuf,uint16 u16DataSize, uint16 u16DataOffset)
{
   1f684:	b590      	push	{r4, r7, lr}
   1f686:	b089      	sub	sp, #36	; 0x24
   1f688:	af00      	add	r7, sp, #0
   1f68a:	0004      	movs	r4, r0
   1f68c:	0008      	movs	r0, r1
   1f68e:	603a      	str	r2, [r7, #0]
   1f690:	0019      	movs	r1, r3
   1f692:	1dfb      	adds	r3, r7, #7
   1f694:	1c22      	adds	r2, r4, #0
   1f696:	701a      	strb	r2, [r3, #0]
   1f698:	1dbb      	adds	r3, r7, #6
   1f69a:	1c02      	adds	r2, r0, #0
   1f69c:	701a      	strb	r2, [r3, #0]
   1f69e:	1d3b      	adds	r3, r7, #4
   1f6a0:	1c0a      	adds	r2, r1, #0
   1f6a2:	801a      	strh	r2, [r3, #0]
	sint8		ret = M2M_ERR_SEND;
   1f6a4:	231f      	movs	r3, #31
   1f6a6:	18fb      	adds	r3, r7, r3
   1f6a8:	22ff      	movs	r2, #255	; 0xff
   1f6aa:	701a      	strb	r2, [r3, #0]
	volatile tstrHifHdr	strHif;

	strHif.u8Opcode		= u8Opcode&(~NBIT7);
   1f6ac:	1dbb      	adds	r3, r7, #6
   1f6ae:	781b      	ldrb	r3, [r3, #0]
   1f6b0:	227f      	movs	r2, #127	; 0x7f
   1f6b2:	4013      	ands	r3, r2
   1f6b4:	b2da      	uxtb	r2, r3
   1f6b6:	2318      	movs	r3, #24
   1f6b8:	18fb      	adds	r3, r7, r3
   1f6ba:	705a      	strb	r2, [r3, #1]
	strHif.u8Gid		= u8Gid;
   1f6bc:	2318      	movs	r3, #24
   1f6be:	18fb      	adds	r3, r7, r3
   1f6c0:	1dfa      	adds	r2, r7, #7
   1f6c2:	7812      	ldrb	r2, [r2, #0]
   1f6c4:	701a      	strb	r2, [r3, #0]
	strHif.u16Length	= M2M_HIF_HDR_OFFSET;
   1f6c6:	2318      	movs	r3, #24
   1f6c8:	18fb      	adds	r3, r7, r3
   1f6ca:	2208      	movs	r2, #8
   1f6cc:	805a      	strh	r2, [r3, #2]
	if(pu8DataBuf != NULL)
   1f6ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   1f6d0:	2b00      	cmp	r3, #0
   1f6d2:	d011      	beq.n	1f6f8 <hif_send+0x74>
	{
		strHif.u16Length += u16DataOffset + u16DataSize;
   1f6d4:	2318      	movs	r3, #24
   1f6d6:	18fb      	adds	r3, r7, r3
   1f6d8:	885b      	ldrh	r3, [r3, #2]
   1f6da:	b29a      	uxth	r2, r3
   1f6dc:	2338      	movs	r3, #56	; 0x38
   1f6de:	18f9      	adds	r1, r7, r3
   1f6e0:	2334      	movs	r3, #52	; 0x34
   1f6e2:	18fb      	adds	r3, r7, r3
   1f6e4:	8809      	ldrh	r1, [r1, #0]
   1f6e6:	881b      	ldrh	r3, [r3, #0]
   1f6e8:	18cb      	adds	r3, r1, r3
   1f6ea:	b29b      	uxth	r3, r3
   1f6ec:	18d3      	adds	r3, r2, r3
   1f6ee:	b29a      	uxth	r2, r3
   1f6f0:	2318      	movs	r3, #24
   1f6f2:	18fb      	adds	r3, r7, r3
   1f6f4:	805a      	strh	r2, [r3, #2]
   1f6f6:	e00a      	b.n	1f70e <hif_send+0x8a>
	}
	else
	{
		strHif.u16Length += u16CtrlBufSize;
   1f6f8:	2318      	movs	r3, #24
   1f6fa:	18fb      	adds	r3, r7, r3
   1f6fc:	885b      	ldrh	r3, [r3, #2]
   1f6fe:	b29a      	uxth	r2, r3
   1f700:	1d3b      	adds	r3, r7, #4
   1f702:	881b      	ldrh	r3, [r3, #0]
   1f704:	18d3      	adds	r3, r2, r3
   1f706:	b29a      	uxth	r2, r3
   1f708:	2318      	movs	r3, #24
   1f70a:	18fb      	adds	r3, r7, r3
   1f70c:	805a      	strh	r2, [r3, #2]
	}
	ret = hif_chip_wake();
   1f70e:	231f      	movs	r3, #31
   1f710:	18fc      	adds	r4, r7, r3
   1f712:	4bb2      	ldr	r3, [pc, #712]	; (1f9dc <hif_send+0x358>)
   1f714:	4798      	blx	r3
   1f716:	0003      	movs	r3, r0
   1f718:	7023      	strb	r3, [r4, #0]
	if(ret == M2M_SUCCESS)
   1f71a:	231f      	movs	r3, #31
   1f71c:	18fb      	adds	r3, r7, r3
   1f71e:	781b      	ldrb	r3, [r3, #0]
   1f720:	b25b      	sxtb	r3, r3
   1f722:	2b00      	cmp	r3, #0
   1f724:	d000      	beq.n	1f728 <hif_send+0xa4>
   1f726:	e129      	b.n	1f97c <hif_send+0x2f8>
	{
		volatile uint32 reg, dma_addr = 0;
   1f728:	2300      	movs	r3, #0
   1f72a:	613b      	str	r3, [r7, #16]
		volatile uint16 cnt = 0;
   1f72c:	230e      	movs	r3, #14
   1f72e:	18fb      	adds	r3, r7, r3
   1f730:	2200      	movs	r2, #0
   1f732:	801a      	strh	r2, [r3, #0]
//#define OPTIMIZE_BUS 
/*please define in firmware also*/
#ifndef OPTIMIZE_BUS
		reg = 0UL;
   1f734:	2300      	movs	r3, #0
   1f736:	617b      	str	r3, [r7, #20]
		reg |= (uint32)u8Gid;
   1f738:	1dfb      	adds	r3, r7, #7
   1f73a:	781a      	ldrb	r2, [r3, #0]
   1f73c:	697b      	ldr	r3, [r7, #20]
   1f73e:	4313      	orrs	r3, r2
   1f740:	617b      	str	r3, [r7, #20]
		reg |= ((uint32)u8Opcode<<8);
   1f742:	1dbb      	adds	r3, r7, #6
   1f744:	781b      	ldrb	r3, [r3, #0]
   1f746:	021a      	lsls	r2, r3, #8
   1f748:	697b      	ldr	r3, [r7, #20]
   1f74a:	4313      	orrs	r3, r2
   1f74c:	617b      	str	r3, [r7, #20]
		reg |= ((uint32)strHif.u16Length<<16);
   1f74e:	2318      	movs	r3, #24
   1f750:	18fb      	adds	r3, r7, r3
   1f752:	885b      	ldrh	r3, [r3, #2]
   1f754:	b29b      	uxth	r3, r3
   1f756:	041a      	lsls	r2, r3, #16
   1f758:	697b      	ldr	r3, [r7, #20]
   1f75a:	4313      	orrs	r3, r2
   1f75c:	617b      	str	r3, [r7, #20]
		ret = nm_write_reg(NMI_STATE_REG,reg);
   1f75e:	697b      	ldr	r3, [r7, #20]
   1f760:	221f      	movs	r2, #31
   1f762:	18bc      	adds	r4, r7, r2
   1f764:	4a9e      	ldr	r2, [pc, #632]	; (1f9e0 <hif_send+0x35c>)
   1f766:	0019      	movs	r1, r3
   1f768:	0010      	movs	r0, r2
   1f76a:	4b9e      	ldr	r3, [pc, #632]	; (1f9e4 <hif_send+0x360>)
   1f76c:	4798      	blx	r3
   1f76e:	0003      	movs	r3, r0
   1f770:	7023      	strb	r3, [r4, #0]
		if(M2M_SUCCESS != ret) goto ERR1;
   1f772:	231f      	movs	r3, #31
   1f774:	18fb      	adds	r3, r7, r3
   1f776:	781b      	ldrb	r3, [r3, #0]
   1f778:	b25b      	sxtb	r3, r3
   1f77a:	2b00      	cmp	r3, #0
   1f77c:	d000      	beq.n	1f780 <hif_send+0xfc>
   1f77e:	e119      	b.n	1f9b4 <hif_send+0x330>

		reg = 0UL;
   1f780:	2300      	movs	r3, #0
   1f782:	617b      	str	r3, [r7, #20]
		reg |= NBIT1;
   1f784:	697b      	ldr	r3, [r7, #20]
   1f786:	2202      	movs	r2, #2
   1f788:	4313      	orrs	r3, r2
   1f78a:	617b      	str	r3, [r7, #20]
		ret = nm_write_reg(WIFI_HOST_RCV_CTRL_2, reg);
   1f78c:	697b      	ldr	r3, [r7, #20]
   1f78e:	221f      	movs	r2, #31
   1f790:	18bc      	adds	r4, r7, r2
   1f792:	4a95      	ldr	r2, [pc, #596]	; (1f9e8 <hif_send+0x364>)
   1f794:	0019      	movs	r1, r3
   1f796:	0010      	movs	r0, r2
   1f798:	4b92      	ldr	r3, [pc, #584]	; (1f9e4 <hif_send+0x360>)
   1f79a:	4798      	blx	r3
   1f79c:	0003      	movs	r3, r0
   1f79e:	7023      	strb	r3, [r4, #0]
		if(M2M_SUCCESS != ret) goto ERR1;
   1f7a0:	231f      	movs	r3, #31
   1f7a2:	18fb      	adds	r3, r7, r3
   1f7a4:	781b      	ldrb	r3, [r3, #0]
   1f7a6:	b25b      	sxtb	r3, r3
   1f7a8:	2b00      	cmp	r3, #0
   1f7aa:	d000      	beq.n	1f7ae <hif_send+0x12a>
   1f7ac:	e104      	b.n	1f9b8 <hif_send+0x334>
		reg |= (u8Gid == M2M_REQ_GROUP_IP) ? (NBIT3):(0); /*IP = 1 or non IP*/
		reg |= ((uint32)strHif.u16Length << 4); /*length of pkt max = 4096*/
		ret = nm_write_reg(WIFI_HOST_RCV_CTRL_2, reg);
		if(M2M_SUCCESS != ret) goto ERR1;
#endif
		dma_addr = 0;
   1f7ae:	2300      	movs	r3, #0
   1f7b0:	613b      	str	r3, [r7, #16]
		
		for(cnt = 0; cnt < 1000; cnt ++)
   1f7b2:	230e      	movs	r3, #14
   1f7b4:	18fb      	adds	r3, r7, r3
   1f7b6:	2200      	movs	r2, #0
   1f7b8:	801a      	strh	r2, [r3, #0]
   1f7ba:	e050      	b.n	1f85e <hif_send+0x1da>
		{
			ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_2,(uint32 *)&reg);
   1f7bc:	231f      	movs	r3, #31
   1f7be:	18fc      	adds	r4, r7, r3
   1f7c0:	2314      	movs	r3, #20
   1f7c2:	18fb      	adds	r3, r7, r3
   1f7c4:	4a88      	ldr	r2, [pc, #544]	; (1f9e8 <hif_send+0x364>)
   1f7c6:	0019      	movs	r1, r3
   1f7c8:	0010      	movs	r0, r2
   1f7ca:	4b88      	ldr	r3, [pc, #544]	; (1f9ec <hif_send+0x368>)
   1f7cc:	4798      	blx	r3
   1f7ce:	0003      	movs	r3, r0
   1f7d0:	7023      	strb	r3, [r4, #0]
			if(ret != M2M_SUCCESS) break;
   1f7d2:	231f      	movs	r3, #31
   1f7d4:	18fb      	adds	r3, r7, r3
   1f7d6:	781b      	ldrb	r3, [r3, #0]
   1f7d8:	b25b      	sxtb	r3, r3
   1f7da:	2b00      	cmp	r3, #0
   1f7dc:	d147      	bne.n	1f86e <hif_send+0x1ea>
			/*
			 * If it takes too long to get a response, the slow down to 
			 * avoid back-to-back register read operations.
			 */
			if(cnt >= 500) {
   1f7de:	230e      	movs	r3, #14
   1f7e0:	18fb      	adds	r3, r7, r3
   1f7e2:	881b      	ldrh	r3, [r3, #0]
   1f7e4:	b29a      	uxth	r2, r3
   1f7e6:	23f4      	movs	r3, #244	; 0xf4
   1f7e8:	33ff      	adds	r3, #255	; 0xff
   1f7ea:	429a      	cmp	r2, r3
   1f7ec:	d916      	bls.n	1f81c <hif_send+0x198>
				if(cnt < 501) {
   1f7ee:	230e      	movs	r3, #14
   1f7f0:	18fb      	adds	r3, r7, r3
   1f7f2:	881b      	ldrh	r3, [r3, #0]
   1f7f4:	b29a      	uxth	r2, r3
   1f7f6:	23fa      	movs	r3, #250	; 0xfa
   1f7f8:	005b      	lsls	r3, r3, #1
   1f7fa:	429a      	cmp	r2, r3
   1f7fc:	d80b      	bhi.n	1f816 <hif_send+0x192>
					M2M_INFO("Slowing down...\n");
   1f7fe:	4b7c      	ldr	r3, [pc, #496]	; (1f9f0 <hif_send+0x36c>)
   1f800:	0018      	movs	r0, r3
   1f802:	4b7c      	ldr	r3, [pc, #496]	; (1f9f4 <hif_send+0x370>)
   1f804:	4798      	blx	r3
   1f806:	4b7c      	ldr	r3, [pc, #496]	; (1f9f8 <hif_send+0x374>)
   1f808:	0018      	movs	r0, r3
   1f80a:	4b7a      	ldr	r3, [pc, #488]	; (1f9f4 <hif_send+0x370>)
   1f80c:	4798      	blx	r3
   1f80e:	4b7b      	ldr	r3, [pc, #492]	; (1f9fc <hif_send+0x378>)
   1f810:	0018      	movs	r0, r3
   1f812:	4b78      	ldr	r3, [pc, #480]	; (1f9f4 <hif_send+0x370>)
   1f814:	4798      	blx	r3
				}
				nm_bsp_sleep(1);
   1f816:	2001      	movs	r0, #1
   1f818:	4b79      	ldr	r3, [pc, #484]	; (1fa00 <hif_send+0x37c>)
   1f81a:	4798      	blx	r3
			}
			if (!(reg & NBIT1))
   1f81c:	697b      	ldr	r3, [r7, #20]
   1f81e:	2202      	movs	r2, #2
   1f820:	4013      	ands	r3, r2
   1f822:	d113      	bne.n	1f84c <hif_send+0x1c8>
			{
				ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_4,(uint32 *)&dma_addr);
   1f824:	231f      	movs	r3, #31
   1f826:	18fc      	adds	r4, r7, r3
   1f828:	2310      	movs	r3, #16
   1f82a:	18fb      	adds	r3, r7, r3
   1f82c:	4a75      	ldr	r2, [pc, #468]	; (1fa04 <hif_send+0x380>)
   1f82e:	0019      	movs	r1, r3
   1f830:	0010      	movs	r0, r2
   1f832:	4b6e      	ldr	r3, [pc, #440]	; (1f9ec <hif_send+0x368>)
   1f834:	4798      	blx	r3
   1f836:	0003      	movs	r3, r0
   1f838:	7023      	strb	r3, [r4, #0]
				if(ret != M2M_SUCCESS) {
   1f83a:	231f      	movs	r3, #31
   1f83c:	18fb      	adds	r3, r7, r3
   1f83e:	781b      	ldrb	r3, [r3, #0]
   1f840:	b25b      	sxtb	r3, r3
   1f842:	2b00      	cmp	r3, #0
   1f844:	d015      	beq.n	1f872 <hif_send+0x1ee>
					/*in case of read error clear the DMA address and return error*/
					dma_addr = 0;
   1f846:	2300      	movs	r3, #0
   1f848:	613b      	str	r3, [r7, #16]
					goto ERR1;
   1f84a:	e0bc      	b.n	1f9c6 <hif_send+0x342>
		for(cnt = 0; cnt < 1000; cnt ++)
   1f84c:	230e      	movs	r3, #14
   1f84e:	18fb      	adds	r3, r7, r3
   1f850:	881b      	ldrh	r3, [r3, #0]
   1f852:	b29b      	uxth	r3, r3
   1f854:	3301      	adds	r3, #1
   1f856:	b29a      	uxth	r2, r3
   1f858:	230e      	movs	r3, #14
   1f85a:	18fb      	adds	r3, r7, r3
   1f85c:	801a      	strh	r2, [r3, #0]
   1f85e:	230e      	movs	r3, #14
   1f860:	18fb      	adds	r3, r7, r3
   1f862:	881b      	ldrh	r3, [r3, #0]
   1f864:	b29b      	uxth	r3, r3
   1f866:	4a68      	ldr	r2, [pc, #416]	; (1fa08 <hif_send+0x384>)
   1f868:	4293      	cmp	r3, r2
   1f86a:	d9a7      	bls.n	1f7bc <hif_send+0x138>
   1f86c:	e002      	b.n	1f874 <hif_send+0x1f0>
			if(ret != M2M_SUCCESS) break;
   1f86e:	46c0      	nop			; (mov r8, r8)
   1f870:	e000      	b.n	1f874 <hif_send+0x1f0>
				}
				/*in case of success break */
				break;
   1f872:	46c0      	nop			; (mov r8, r8)
			}
		}

		if (dma_addr != 0)
   1f874:	693b      	ldr	r3, [r7, #16]
   1f876:	2b00      	cmp	r3, #0
   1f878:	d100      	bne.n	1f87c <hif_send+0x1f8>
   1f87a:	e074      	b.n	1f966 <hif_send+0x2e2>
		{
			volatile uint32	u32CurrAddr;
			u32CurrAddr = dma_addr;
   1f87c:	693b      	ldr	r3, [r7, #16]
   1f87e:	60bb      	str	r3, [r7, #8]
			strHif.u16Length=NM_BSP_B_L_16(strHif.u16Length);
   1f880:	2318      	movs	r3, #24
   1f882:	18fb      	adds	r3, r7, r3
   1f884:	885b      	ldrh	r3, [r3, #2]
   1f886:	b29a      	uxth	r2, r3
   1f888:	2318      	movs	r3, #24
   1f88a:	18fb      	adds	r3, r7, r3
   1f88c:	805a      	strh	r2, [r3, #2]
			ret = nm_write_block(u32CurrAddr, (uint8*)&strHif, M2M_HIF_HDR_OFFSET);
   1f88e:	68bb      	ldr	r3, [r7, #8]
   1f890:	221f      	movs	r2, #31
   1f892:	18bc      	adds	r4, r7, r2
   1f894:	2218      	movs	r2, #24
   1f896:	18b9      	adds	r1, r7, r2
   1f898:	2208      	movs	r2, #8
   1f89a:	0018      	movs	r0, r3
   1f89c:	4b5b      	ldr	r3, [pc, #364]	; (1fa0c <hif_send+0x388>)
   1f89e:	4798      	blx	r3
   1f8a0:	0003      	movs	r3, r0
   1f8a2:	7023      	strb	r3, [r4, #0]
			if(M2M_SUCCESS != ret) goto ERR1;
   1f8a4:	231f      	movs	r3, #31
   1f8a6:	18fb      	adds	r3, r7, r3
   1f8a8:	781b      	ldrb	r3, [r3, #0]
   1f8aa:	b25b      	sxtb	r3, r3
   1f8ac:	2b00      	cmp	r3, #0
   1f8ae:	d000      	beq.n	1f8b2 <hif_send+0x22e>
   1f8b0:	e084      	b.n	1f9bc <hif_send+0x338>
			u32CurrAddr += M2M_HIF_HDR_OFFSET;
   1f8b2:	68bb      	ldr	r3, [r7, #8]
   1f8b4:	3308      	adds	r3, #8
   1f8b6:	60bb      	str	r3, [r7, #8]
			if(pu8CtrlBuf != NULL)
   1f8b8:	683b      	ldr	r3, [r7, #0]
   1f8ba:	2b00      	cmp	r3, #0
   1f8bc:	d016      	beq.n	1f8ec <hif_send+0x268>
			{
				ret = nm_write_block(u32CurrAddr, pu8CtrlBuf, u16CtrlBufSize);
   1f8be:	68b8      	ldr	r0, [r7, #8]
   1f8c0:	1d3b      	adds	r3, r7, #4
   1f8c2:	881a      	ldrh	r2, [r3, #0]
   1f8c4:	231f      	movs	r3, #31
   1f8c6:	18fc      	adds	r4, r7, r3
   1f8c8:	683b      	ldr	r3, [r7, #0]
   1f8ca:	0019      	movs	r1, r3
   1f8cc:	4b4f      	ldr	r3, [pc, #316]	; (1fa0c <hif_send+0x388>)
   1f8ce:	4798      	blx	r3
   1f8d0:	0003      	movs	r3, r0
   1f8d2:	7023      	strb	r3, [r4, #0]
				if(M2M_SUCCESS != ret) goto ERR1;
   1f8d4:	231f      	movs	r3, #31
   1f8d6:	18fb      	adds	r3, r7, r3
   1f8d8:	781b      	ldrb	r3, [r3, #0]
   1f8da:	b25b      	sxtb	r3, r3
   1f8dc:	2b00      	cmp	r3, #0
   1f8de:	d000      	beq.n	1f8e2 <hif_send+0x25e>
   1f8e0:	e06e      	b.n	1f9c0 <hif_send+0x33c>
				u32CurrAddr += u16CtrlBufSize;
   1f8e2:	1d3b      	adds	r3, r7, #4
   1f8e4:	881a      	ldrh	r2, [r3, #0]
   1f8e6:	68bb      	ldr	r3, [r7, #8]
   1f8e8:	18d3      	adds	r3, r2, r3
   1f8ea:	60bb      	str	r3, [r7, #8]
			}
			if(pu8DataBuf != NULL)
   1f8ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   1f8ee:	2b00      	cmp	r3, #0
   1f8f0:	d021      	beq.n	1f936 <hif_send+0x2b2>
			{
				u32CurrAddr += (u16DataOffset - u16CtrlBufSize);
   1f8f2:	2338      	movs	r3, #56	; 0x38
   1f8f4:	18fb      	adds	r3, r7, r3
   1f8f6:	881a      	ldrh	r2, [r3, #0]
   1f8f8:	1d3b      	adds	r3, r7, #4
   1f8fa:	881b      	ldrh	r3, [r3, #0]
   1f8fc:	1ad3      	subs	r3, r2, r3
   1f8fe:	001a      	movs	r2, r3
   1f900:	68bb      	ldr	r3, [r7, #8]
   1f902:	18d3      	adds	r3, r2, r3
   1f904:	60bb      	str	r3, [r7, #8]
				ret = nm_write_block(u32CurrAddr, pu8DataBuf, u16DataSize);
   1f906:	68b8      	ldr	r0, [r7, #8]
   1f908:	2334      	movs	r3, #52	; 0x34
   1f90a:	18fb      	adds	r3, r7, r3
   1f90c:	881a      	ldrh	r2, [r3, #0]
   1f90e:	231f      	movs	r3, #31
   1f910:	18fc      	adds	r4, r7, r3
   1f912:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   1f914:	0019      	movs	r1, r3
   1f916:	4b3d      	ldr	r3, [pc, #244]	; (1fa0c <hif_send+0x388>)
   1f918:	4798      	blx	r3
   1f91a:	0003      	movs	r3, r0
   1f91c:	7023      	strb	r3, [r4, #0]
				if(M2M_SUCCESS != ret) goto ERR1;
   1f91e:	231f      	movs	r3, #31
   1f920:	18fb      	adds	r3, r7, r3
   1f922:	781b      	ldrb	r3, [r3, #0]
   1f924:	b25b      	sxtb	r3, r3
   1f926:	2b00      	cmp	r3, #0
   1f928:	d14c      	bne.n	1f9c4 <hif_send+0x340>
				u32CurrAddr += u16DataSize;
   1f92a:	2334      	movs	r3, #52	; 0x34
   1f92c:	18fb      	adds	r3, r7, r3
   1f92e:	881a      	ldrh	r2, [r3, #0]
   1f930:	68bb      	ldr	r3, [r7, #8]
   1f932:	18d3      	adds	r3, r2, r3
   1f934:	60bb      	str	r3, [r7, #8]
			}

			reg = dma_addr << 2;
   1f936:	693b      	ldr	r3, [r7, #16]
   1f938:	009b      	lsls	r3, r3, #2
   1f93a:	617b      	str	r3, [r7, #20]
			reg |= NBIT1;
   1f93c:	697b      	ldr	r3, [r7, #20]
   1f93e:	2202      	movs	r2, #2
   1f940:	4313      	orrs	r3, r2
   1f942:	617b      	str	r3, [r7, #20]
			ret = nm_write_reg(WIFI_HOST_RCV_CTRL_3, reg);
   1f944:	697b      	ldr	r3, [r7, #20]
   1f946:	221f      	movs	r2, #31
   1f948:	18bc      	adds	r4, r7, r2
   1f94a:	4a31      	ldr	r2, [pc, #196]	; (1fa10 <hif_send+0x38c>)
   1f94c:	0019      	movs	r1, r3
   1f94e:	0010      	movs	r0, r2
   1f950:	4b24      	ldr	r3, [pc, #144]	; (1f9e4 <hif_send+0x360>)
   1f952:	4798      	blx	r3
   1f954:	0003      	movs	r3, r0
   1f956:	7023      	strb	r3, [r4, #0]
			if(M2M_SUCCESS != ret) goto ERR1;
   1f958:	231f      	movs	r3, #31
   1f95a:	18fb      	adds	r3, r7, r3
   1f95c:	781b      	ldrb	r3, [r3, #0]
   1f95e:	b25b      	sxtb	r3, r3
   1f960:	2b00      	cmp	r3, #0
   1f962:	d01c      	beq.n	1f99e <hif_send+0x31a>
   1f964:	e02f      	b.n	1f9c6 <hif_send+0x342>
		}
		else
		{
			ret = hif_chip_sleep();
   1f966:	231f      	movs	r3, #31
   1f968:	18fc      	adds	r4, r7, r3
   1f96a:	4b2a      	ldr	r3, [pc, #168]	; (1fa14 <hif_send+0x390>)
   1f96c:	4798      	blx	r3
   1f96e:	0003      	movs	r3, r0
   1f970:	7023      	strb	r3, [r4, #0]
			M2M_DBG("Failed to alloc rx size %d\r",ret);
			ret = M2M_ERR_MEM_ALLOC;
   1f972:	231f      	movs	r3, #31
   1f974:	18fb      	adds	r3, r7, r3
   1f976:	22fd      	movs	r2, #253	; 0xfd
   1f978:	701a      	strb	r2, [r3, #0]
			goto ERR2;
   1f97a:	e026      	b.n	1f9ca <hif_send+0x346>
		}

	}
	else
	{
		M2M_ERR("(HIF)Fail to wakup the chip\n");
   1f97c:	2398      	movs	r3, #152	; 0x98
   1f97e:	33ff      	adds	r3, #255	; 0xff
   1f980:	001a      	movs	r2, r3
   1f982:	4925      	ldr	r1, [pc, #148]	; (1fa18 <hif_send+0x394>)
   1f984:	4b25      	ldr	r3, [pc, #148]	; (1fa1c <hif_send+0x398>)
   1f986:	0018      	movs	r0, r3
   1f988:	4b1a      	ldr	r3, [pc, #104]	; (1f9f4 <hif_send+0x370>)
   1f98a:	4798      	blx	r3
   1f98c:	4b24      	ldr	r3, [pc, #144]	; (1fa20 <hif_send+0x39c>)
   1f98e:	0018      	movs	r0, r3
   1f990:	4b18      	ldr	r3, [pc, #96]	; (1f9f4 <hif_send+0x370>)
   1f992:	4798      	blx	r3
   1f994:	4b19      	ldr	r3, [pc, #100]	; (1f9fc <hif_send+0x378>)
   1f996:	0018      	movs	r0, r3
   1f998:	4b16      	ldr	r3, [pc, #88]	; (1f9f4 <hif_send+0x370>)
   1f99a:	4798      	blx	r3
		goto ERR2;
   1f99c:	e015      	b.n	1f9ca <hif_send+0x346>
	}
	/*actual sleep ret = M2M_SUCCESS*/
 	ret = hif_chip_sleep();
   1f99e:	231f      	movs	r3, #31
   1f9a0:	18fc      	adds	r4, r7, r3
   1f9a2:	4b1c      	ldr	r3, [pc, #112]	; (1fa14 <hif_send+0x390>)
   1f9a4:	4798      	blx	r3
   1f9a6:	0003      	movs	r3, r0
   1f9a8:	7023      	strb	r3, [r4, #0]
	return ret;
   1f9aa:	231f      	movs	r3, #31
   1f9ac:	18fb      	adds	r3, r7, r3
   1f9ae:	781b      	ldrb	r3, [r3, #0]
   1f9b0:	b25b      	sxtb	r3, r3
   1f9b2:	e00e      	b.n	1f9d2 <hif_send+0x34e>
		if(M2M_SUCCESS != ret) goto ERR1;
   1f9b4:	46c0      	nop			; (mov r8, r8)
   1f9b6:	e006      	b.n	1f9c6 <hif_send+0x342>
		if(M2M_SUCCESS != ret) goto ERR1;
   1f9b8:	46c0      	nop			; (mov r8, r8)
   1f9ba:	e004      	b.n	1f9c6 <hif_send+0x342>
			if(M2M_SUCCESS != ret) goto ERR1;
   1f9bc:	46c0      	nop			; (mov r8, r8)
   1f9be:	e002      	b.n	1f9c6 <hif_send+0x342>
				if(M2M_SUCCESS != ret) goto ERR1;
   1f9c0:	46c0      	nop			; (mov r8, r8)
   1f9c2:	e000      	b.n	1f9c6 <hif_send+0x342>
				if(M2M_SUCCESS != ret) goto ERR1;
   1f9c4:	46c0      	nop			; (mov r8, r8)
ERR1:
	/*reset the count but no actual sleep as it already bus error*/
	hif_chip_sleep_sc();
   1f9c6:	4b17      	ldr	r3, [pc, #92]	; (1fa24 <hif_send+0x3a0>)
   1f9c8:	4798      	blx	r3
ERR2:
	/*logical error*/
	return ret;
   1f9ca:	231f      	movs	r3, #31
   1f9cc:	18fb      	adds	r3, r7, r3
   1f9ce:	781b      	ldrb	r3, [r3, #0]
   1f9d0:	b25b      	sxtb	r3, r3
}
   1f9d2:	0018      	movs	r0, r3
   1f9d4:	46bd      	mov	sp, r7
   1f9d6:	b009      	add	sp, #36	; 0x24
   1f9d8:	bd90      	pop	{r4, r7, pc}
   1f9da:	46c0      	nop			; (mov r8, r8)
   1f9dc:	0001f54d 	.word	0x0001f54d
   1f9e0:	0000108c 	.word	0x0000108c
   1f9e4:	000214d9 	.word	0x000214d9
   1f9e8:	00001078 	.word	0x00001078
   1f9ec:	000214b5 	.word	0x000214b5
   1f9f0:	000367c8 	.word	0x000367c8
   1f9f4:	0001c65d 	.word	0x0001c65d
   1f9f8:	000367d4 	.word	0x000367d4
   1f9fc:	000367e8 	.word	0x000367e8
   1fa00:	0001eb45 	.word	0x0001eb45
   1fa04:	00150400 	.word	0x00150400
   1fa08:	000003e7 	.word	0x000003e7
   1fa0c:	00021621 	.word	0x00021621
   1fa10:	0000106c 	.word	0x0000106c
   1fa14:	0001f5e5 	.word	0x0001f5e5
   1fa18:	00036af0 	.word	0x00036af0
   1fa1c:	000367ec 	.word	0x000367ec
   1fa20:	00036800 	.word	0x00036800
   1fa24:	0001f5bd 	.word	0x0001f5bd

0001fa28 <hif_isr>:
*	@date	15 July 2012
*	@return	1 in case of interrupt received else 0 will be returned
*	@version	1.0
*/
static sint8 hif_isr(void)
{
   1fa28:	b590      	push	{r4, r7, lr}
   1fa2a:	b087      	sub	sp, #28
   1fa2c:	af02      	add	r7, sp, #8
	sint8 ret = M2M_SUCCESS;
   1fa2e:	230f      	movs	r3, #15
   1fa30:	18fb      	adds	r3, r7, r3
   1fa32:	2200      	movs	r2, #0
   1fa34:	701a      	strb	r2, [r3, #0]
	uint32 reg;
	volatile tstrHifHdr strHif;

	ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_0, &reg);
   1fa36:	230f      	movs	r3, #15
   1fa38:	18fc      	adds	r4, r7, r3
   1fa3a:	2308      	movs	r3, #8
   1fa3c:	18fb      	adds	r3, r7, r3
   1fa3e:	4adc      	ldr	r2, [pc, #880]	; (1fdb0 <hif_isr+0x388>)
   1fa40:	0019      	movs	r1, r3
   1fa42:	0010      	movs	r0, r2
   1fa44:	4bdb      	ldr	r3, [pc, #876]	; (1fdb4 <hif_isr+0x38c>)
   1fa46:	4798      	blx	r3
   1fa48:	0003      	movs	r3, r0
   1fa4a:	7023      	strb	r3, [r4, #0]
	if(M2M_SUCCESS == ret)
   1fa4c:	230f      	movs	r3, #15
   1fa4e:	18fb      	adds	r3, r7, r3
   1fa50:	781b      	ldrb	r3, [r3, #0]
   1fa52:	b25b      	sxtb	r3, r3
   1fa54:	2b00      	cmp	r3, #0
   1fa56:	d000      	beq.n	1fa5a <hif_isr+0x32>
   1fa58:	e21e      	b.n	1fe98 <hif_isr+0x470>
	{
		if(reg & 0x1)	/* New interrupt has been received */
   1fa5a:	68bb      	ldr	r3, [r7, #8]
   1fa5c:	2201      	movs	r2, #1
   1fa5e:	4013      	ands	r3, r2
   1fa60:	d100      	bne.n	1fa64 <hif_isr+0x3c>
   1fa62:	e204      	b.n	1fe6e <hif_isr+0x446>
		{
			uint16 size;

			nm_bsp_interrupt_ctrl(0);
   1fa64:	2000      	movs	r0, #0
   1fa66:	4bd4      	ldr	r3, [pc, #848]	; (1fdb8 <hif_isr+0x390>)
   1fa68:	4798      	blx	r3
			/*Clearing RX interrupt*/
			reg &= ~NBIT0;
   1fa6a:	68bb      	ldr	r3, [r7, #8]
   1fa6c:	2201      	movs	r2, #1
   1fa6e:	4393      	bics	r3, r2
   1fa70:	60bb      	str	r3, [r7, #8]
			ret = nm_write_reg(WIFI_HOST_RCV_CTRL_0,reg);
   1fa72:	68bb      	ldr	r3, [r7, #8]
   1fa74:	220f      	movs	r2, #15
   1fa76:	18bc      	adds	r4, r7, r2
   1fa78:	4acd      	ldr	r2, [pc, #820]	; (1fdb0 <hif_isr+0x388>)
   1fa7a:	0019      	movs	r1, r3
   1fa7c:	0010      	movs	r0, r2
   1fa7e:	4bcf      	ldr	r3, [pc, #828]	; (1fdbc <hif_isr+0x394>)
   1fa80:	4798      	blx	r3
   1fa82:	0003      	movs	r3, r0
   1fa84:	7023      	strb	r3, [r4, #0]
			if(ret != M2M_SUCCESS)goto ERR1;
   1fa86:	230f      	movs	r3, #15
   1fa88:	18fb      	adds	r3, r7, r3
   1fa8a:	781b      	ldrb	r3, [r3, #0]
   1fa8c:	b25b      	sxtb	r3, r3
   1fa8e:	2b00      	cmp	r3, #0
   1fa90:	d000      	beq.n	1fa94 <hif_isr+0x6c>
   1fa92:	e210      	b.n	1feb6 <hif_isr+0x48e>
			gstrHifCxt.u8HifRXDone = 1;
   1fa94:	4bca      	ldr	r3, [pc, #808]	; (1fdc0 <hif_isr+0x398>)
   1fa96:	2201      	movs	r2, #1
   1fa98:	709a      	strb	r2, [r3, #2]
			size = (uint16)((reg >> 2) & 0xfff);
   1fa9a:	68bb      	ldr	r3, [r7, #8]
   1fa9c:	089b      	lsrs	r3, r3, #2
   1fa9e:	b29a      	uxth	r2, r3
   1faa0:	230c      	movs	r3, #12
   1faa2:	18fb      	adds	r3, r7, r3
   1faa4:	0512      	lsls	r2, r2, #20
   1faa6:	0d12      	lsrs	r2, r2, #20
   1faa8:	801a      	strh	r2, [r3, #0]
			if (size > 0) {
   1faaa:	230c      	movs	r3, #12
   1faac:	18fb      	adds	r3, r7, r3
   1faae:	881b      	ldrh	r3, [r3, #0]
   1fab0:	2b00      	cmp	r3, #0
   1fab2:	d100      	bne.n	1fab6 <hif_isr+0x8e>
   1fab4:	e1c8      	b.n	1fe48 <hif_isr+0x420>
				uint32 address = 0;
   1fab6:	2300      	movs	r3, #0
   1fab8:	603b      	str	r3, [r7, #0]
				/**
				start bus transfer
				**/
				ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_1, &address);
   1faba:	230f      	movs	r3, #15
   1fabc:	18fc      	adds	r4, r7, r3
   1fabe:	003b      	movs	r3, r7
   1fac0:	4ac0      	ldr	r2, [pc, #768]	; (1fdc4 <hif_isr+0x39c>)
   1fac2:	0019      	movs	r1, r3
   1fac4:	0010      	movs	r0, r2
   1fac6:	4bbb      	ldr	r3, [pc, #748]	; (1fdb4 <hif_isr+0x38c>)
   1fac8:	4798      	blx	r3
   1faca:	0003      	movs	r3, r0
   1facc:	7023      	strb	r3, [r4, #0]
				if(M2M_SUCCESS != ret)
   1face:	230f      	movs	r3, #15
   1fad0:	18fb      	adds	r3, r7, r3
   1fad2:	781b      	ldrb	r3, [r3, #0]
   1fad4:	b25b      	sxtb	r3, r3
   1fad6:	2b00      	cmp	r3, #0
   1fad8:	d012      	beq.n	1fb00 <hif_isr+0xd8>
				{
					M2M_ERR("(hif) WIFI_HOST_RCV_CTRL_1 bus fail\n");
   1fada:	23e4      	movs	r3, #228	; 0xe4
   1fadc:	005a      	lsls	r2, r3, #1
   1fade:	49ba      	ldr	r1, [pc, #744]	; (1fdc8 <hif_isr+0x3a0>)
   1fae0:	4bba      	ldr	r3, [pc, #744]	; (1fdcc <hif_isr+0x3a4>)
   1fae2:	0018      	movs	r0, r3
   1fae4:	4bba      	ldr	r3, [pc, #744]	; (1fdd0 <hif_isr+0x3a8>)
   1fae6:	4798      	blx	r3
   1fae8:	4bba      	ldr	r3, [pc, #744]	; (1fdd4 <hif_isr+0x3ac>)
   1faea:	0018      	movs	r0, r3
   1faec:	4bb8      	ldr	r3, [pc, #736]	; (1fdd0 <hif_isr+0x3a8>)
   1faee:	4798      	blx	r3
   1faf0:	4bb9      	ldr	r3, [pc, #740]	; (1fdd8 <hif_isr+0x3b0>)
   1faf2:	0018      	movs	r0, r3
   1faf4:	4bb6      	ldr	r3, [pc, #728]	; (1fdd0 <hif_isr+0x3a8>)
   1faf6:	4798      	blx	r3
					nm_bsp_interrupt_ctrl(1);
   1faf8:	2001      	movs	r0, #1
   1fafa:	4baf      	ldr	r3, [pc, #700]	; (1fdb8 <hif_isr+0x390>)
   1fafc:	4798      	blx	r3
					goto ERR1;
   1fafe:	e1db      	b.n	1feb8 <hif_isr+0x490>
				}
				gstrHifCxt.u32RxAddr = address;
   1fb00:	683a      	ldr	r2, [r7, #0]
   1fb02:	4baf      	ldr	r3, [pc, #700]	; (1fdc0 <hif_isr+0x398>)
   1fb04:	609a      	str	r2, [r3, #8]
				gstrHifCxt.u32RxSize = size;
   1fb06:	230c      	movs	r3, #12
   1fb08:	18fb      	adds	r3, r7, r3
   1fb0a:	881a      	ldrh	r2, [r3, #0]
   1fb0c:	4bac      	ldr	r3, [pc, #688]	; (1fdc0 <hif_isr+0x398>)
   1fb0e:	60da      	str	r2, [r3, #12]
				ret = nm_read_block(address, (uint8*)&strHif, sizeof(tstrHifHdr));
   1fb10:	683b      	ldr	r3, [r7, #0]
   1fb12:	220f      	movs	r2, #15
   1fb14:	18bc      	adds	r4, r7, r2
   1fb16:	1d39      	adds	r1, r7, #4
   1fb18:	2204      	movs	r2, #4
   1fb1a:	0018      	movs	r0, r3
   1fb1c:	4baf      	ldr	r3, [pc, #700]	; (1fddc <hif_isr+0x3b4>)
   1fb1e:	4798      	blx	r3
   1fb20:	0003      	movs	r3, r0
   1fb22:	7023      	strb	r3, [r4, #0]
				strHif.u16Length = NM_BSP_B_L_16(strHif.u16Length);
   1fb24:	1d3b      	adds	r3, r7, #4
   1fb26:	885b      	ldrh	r3, [r3, #2]
   1fb28:	b29a      	uxth	r2, r3
   1fb2a:	1d3b      	adds	r3, r7, #4
   1fb2c:	805a      	strh	r2, [r3, #2]
				if(M2M_SUCCESS != ret)
   1fb2e:	230f      	movs	r3, #15
   1fb30:	18fb      	adds	r3, r7, r3
   1fb32:	781b      	ldrb	r3, [r3, #0]
   1fb34:	b25b      	sxtb	r3, r3
   1fb36:	2b00      	cmp	r3, #0
   1fb38:	d012      	beq.n	1fb60 <hif_isr+0x138>
				{
					M2M_ERR("(hif) address bus fail\n");
   1fb3a:	23e9      	movs	r3, #233	; 0xe9
   1fb3c:	005a      	lsls	r2, r3, #1
   1fb3e:	49a2      	ldr	r1, [pc, #648]	; (1fdc8 <hif_isr+0x3a0>)
   1fb40:	4ba2      	ldr	r3, [pc, #648]	; (1fdcc <hif_isr+0x3a4>)
   1fb42:	0018      	movs	r0, r3
   1fb44:	4ba2      	ldr	r3, [pc, #648]	; (1fdd0 <hif_isr+0x3a8>)
   1fb46:	4798      	blx	r3
   1fb48:	4ba5      	ldr	r3, [pc, #660]	; (1fde0 <hif_isr+0x3b8>)
   1fb4a:	0018      	movs	r0, r3
   1fb4c:	4ba0      	ldr	r3, [pc, #640]	; (1fdd0 <hif_isr+0x3a8>)
   1fb4e:	4798      	blx	r3
   1fb50:	4ba1      	ldr	r3, [pc, #644]	; (1fdd8 <hif_isr+0x3b0>)
   1fb52:	0018      	movs	r0, r3
   1fb54:	4b9e      	ldr	r3, [pc, #632]	; (1fdd0 <hif_isr+0x3a8>)
   1fb56:	4798      	blx	r3
					nm_bsp_interrupt_ctrl(1);
   1fb58:	2001      	movs	r0, #1
   1fb5a:	4b97      	ldr	r3, [pc, #604]	; (1fdb8 <hif_isr+0x390>)
   1fb5c:	4798      	blx	r3
					goto ERR1;
   1fb5e:	e1ab      	b.n	1feb8 <hif_isr+0x490>
				}
				if(strHif.u16Length != size)
   1fb60:	1d3b      	adds	r3, r7, #4
   1fb62:	885b      	ldrh	r3, [r3, #2]
   1fb64:	b29b      	uxth	r3, r3
   1fb66:	220c      	movs	r2, #12
   1fb68:	18ba      	adds	r2, r7, r2
   1fb6a:	8812      	ldrh	r2, [r2, #0]
   1fb6c:	429a      	cmp	r2, r3
   1fb6e:	d02f      	beq.n	1fbd0 <hif_isr+0x1a8>
				{
					if((size - strHif.u16Length) > 4)
   1fb70:	230c      	movs	r3, #12
   1fb72:	18fb      	adds	r3, r7, r3
   1fb74:	881b      	ldrh	r3, [r3, #0]
   1fb76:	1d3a      	adds	r2, r7, #4
   1fb78:	8852      	ldrh	r2, [r2, #2]
   1fb7a:	b292      	uxth	r2, r2
   1fb7c:	1a9b      	subs	r3, r3, r2
   1fb7e:	2b04      	cmp	r3, #4
   1fb80:	dd26      	ble.n	1fbd0 <hif_isr+0x1a8>
					{
						M2M_ERR("(hif) Corrupted packet Size = %u <L = %u, G = %u, OP = %02X>\n",
   1fb82:	23dc      	movs	r3, #220	; 0xdc
   1fb84:	33ff      	adds	r3, #255	; 0xff
   1fb86:	001a      	movs	r2, r3
   1fb88:	498f      	ldr	r1, [pc, #572]	; (1fdc8 <hif_isr+0x3a0>)
   1fb8a:	4b90      	ldr	r3, [pc, #576]	; (1fdcc <hif_isr+0x3a4>)
   1fb8c:	0018      	movs	r0, r3
   1fb8e:	4b90      	ldr	r3, [pc, #576]	; (1fdd0 <hif_isr+0x3a8>)
   1fb90:	4798      	blx	r3
   1fb92:	230c      	movs	r3, #12
   1fb94:	18fb      	adds	r3, r7, r3
   1fb96:	8819      	ldrh	r1, [r3, #0]
   1fb98:	1d3b      	adds	r3, r7, #4
   1fb9a:	885b      	ldrh	r3, [r3, #2]
   1fb9c:	b29b      	uxth	r3, r3
   1fb9e:	001a      	movs	r2, r3
   1fba0:	1d3b      	adds	r3, r7, #4
   1fba2:	781b      	ldrb	r3, [r3, #0]
   1fba4:	b2db      	uxtb	r3, r3
   1fba6:	001c      	movs	r4, r3
   1fba8:	1d3b      	adds	r3, r7, #4
   1fbaa:	785b      	ldrb	r3, [r3, #1]
   1fbac:	b2db      	uxtb	r3, r3
   1fbae:	488d      	ldr	r0, [pc, #564]	; (1fde4 <hif_isr+0x3bc>)
   1fbb0:	9300      	str	r3, [sp, #0]
   1fbb2:	0023      	movs	r3, r4
   1fbb4:	4c86      	ldr	r4, [pc, #536]	; (1fdd0 <hif_isr+0x3a8>)
   1fbb6:	47a0      	blx	r4
   1fbb8:	4b87      	ldr	r3, [pc, #540]	; (1fdd8 <hif_isr+0x3b0>)
   1fbba:	0018      	movs	r0, r3
   1fbbc:	4b84      	ldr	r3, [pc, #528]	; (1fdd0 <hif_isr+0x3a8>)
   1fbbe:	4798      	blx	r3
							size, strHif.u16Length, strHif.u8Gid, strHif.u8Opcode);
						nm_bsp_interrupt_ctrl(1);
   1fbc0:	2001      	movs	r0, #1
   1fbc2:	4b7d      	ldr	r3, [pc, #500]	; (1fdb8 <hif_isr+0x390>)
   1fbc4:	4798      	blx	r3
						ret = M2M_ERR_BUS_FAIL;
   1fbc6:	230f      	movs	r3, #15
   1fbc8:	18fb      	adds	r3, r7, r3
   1fbca:	22fa      	movs	r2, #250	; 0xfa
   1fbcc:	701a      	strb	r2, [r3, #0]
						goto ERR1;
   1fbce:	e173      	b.n	1feb8 <hif_isr+0x490>
					}
				}

				if(M2M_REQ_GROUP_WIFI == strHif.u8Gid)
   1fbd0:	1d3b      	adds	r3, r7, #4
   1fbd2:	781b      	ldrb	r3, [r3, #0]
   1fbd4:	b2db      	uxtb	r3, r3
   1fbd6:	2b01      	cmp	r3, #1
   1fbd8:	d122      	bne.n	1fc20 <hif_isr+0x1f8>
				{
					if(gstrHifCxt.pfWifiCb)
   1fbda:	4b79      	ldr	r3, [pc, #484]	; (1fdc0 <hif_isr+0x398>)
   1fbdc:	691b      	ldr	r3, [r3, #16]
   1fbde:	2b00      	cmp	r3, #0
   1fbe0:	d00d      	beq.n	1fbfe <hif_isr+0x1d6>
						gstrHifCxt.pfWifiCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
   1fbe2:	4b77      	ldr	r3, [pc, #476]	; (1fdc0 <hif_isr+0x398>)
   1fbe4:	691b      	ldr	r3, [r3, #16]
   1fbe6:	1d3a      	adds	r2, r7, #4
   1fbe8:	7852      	ldrb	r2, [r2, #1]
   1fbea:	b2d0      	uxtb	r0, r2
   1fbec:	1d3a      	adds	r2, r7, #4
   1fbee:	8852      	ldrh	r2, [r2, #2]
   1fbf0:	b292      	uxth	r2, r2
   1fbf2:	3a08      	subs	r2, #8
   1fbf4:	b291      	uxth	r1, r2
   1fbf6:	683a      	ldr	r2, [r7, #0]
   1fbf8:	3208      	adds	r2, #8
   1fbfa:	4798      	blx	r3
   1fbfc:	e102      	b.n	1fe04 <hif_isr+0x3dc>
					else
						M2M_ERR("WIFI callback is not registered\n");
   1fbfe:	23e8      	movs	r3, #232	; 0xe8
   1fc00:	33ff      	adds	r3, #255	; 0xff
   1fc02:	001a      	movs	r2, r3
   1fc04:	4970      	ldr	r1, [pc, #448]	; (1fdc8 <hif_isr+0x3a0>)
   1fc06:	4b71      	ldr	r3, [pc, #452]	; (1fdcc <hif_isr+0x3a4>)
   1fc08:	0018      	movs	r0, r3
   1fc0a:	4b71      	ldr	r3, [pc, #452]	; (1fdd0 <hif_isr+0x3a8>)
   1fc0c:	4798      	blx	r3
   1fc0e:	4b76      	ldr	r3, [pc, #472]	; (1fde8 <hif_isr+0x3c0>)
   1fc10:	0018      	movs	r0, r3
   1fc12:	4b6f      	ldr	r3, [pc, #444]	; (1fdd0 <hif_isr+0x3a8>)
   1fc14:	4798      	blx	r3
   1fc16:	4b70      	ldr	r3, [pc, #448]	; (1fdd8 <hif_isr+0x3b0>)
   1fc18:	0018      	movs	r0, r3
   1fc1a:	4b6d      	ldr	r3, [pc, #436]	; (1fdd0 <hif_isr+0x3a8>)
   1fc1c:	4798      	blx	r3
   1fc1e:	e0f1      	b.n	1fe04 <hif_isr+0x3dc>

				}
				else if(M2M_REQ_GROUP_IP == strHif.u8Gid)
   1fc20:	1d3b      	adds	r3, r7, #4
   1fc22:	781b      	ldrb	r3, [r3, #0]
   1fc24:	b2db      	uxtb	r3, r3
   1fc26:	2b02      	cmp	r3, #2
   1fc28:	d122      	bne.n	1fc70 <hif_isr+0x248>
				{
					if(gstrHifCxt.pfIpCb)
   1fc2a:	4b65      	ldr	r3, [pc, #404]	; (1fdc0 <hif_isr+0x398>)
   1fc2c:	695b      	ldr	r3, [r3, #20]
   1fc2e:	2b00      	cmp	r3, #0
   1fc30:	d00d      	beq.n	1fc4e <hif_isr+0x226>
						gstrHifCxt.pfIpCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
   1fc32:	4b63      	ldr	r3, [pc, #396]	; (1fdc0 <hif_isr+0x398>)
   1fc34:	695b      	ldr	r3, [r3, #20]
   1fc36:	1d3a      	adds	r2, r7, #4
   1fc38:	7852      	ldrb	r2, [r2, #1]
   1fc3a:	b2d0      	uxtb	r0, r2
   1fc3c:	1d3a      	adds	r2, r7, #4
   1fc3e:	8852      	ldrh	r2, [r2, #2]
   1fc40:	b292      	uxth	r2, r2
   1fc42:	3a08      	subs	r2, #8
   1fc44:	b291      	uxth	r1, r2
   1fc46:	683a      	ldr	r2, [r7, #0]
   1fc48:	3208      	adds	r2, #8
   1fc4a:	4798      	blx	r3
   1fc4c:	e0da      	b.n	1fe04 <hif_isr+0x3dc>
					else
						M2M_ERR("Scoket callback is not registered\n");
   1fc4e:	23f0      	movs	r3, #240	; 0xf0
   1fc50:	33ff      	adds	r3, #255	; 0xff
   1fc52:	001a      	movs	r2, r3
   1fc54:	495c      	ldr	r1, [pc, #368]	; (1fdc8 <hif_isr+0x3a0>)
   1fc56:	4b5d      	ldr	r3, [pc, #372]	; (1fdcc <hif_isr+0x3a4>)
   1fc58:	0018      	movs	r0, r3
   1fc5a:	4b5d      	ldr	r3, [pc, #372]	; (1fdd0 <hif_isr+0x3a8>)
   1fc5c:	4798      	blx	r3
   1fc5e:	4b63      	ldr	r3, [pc, #396]	; (1fdec <hif_isr+0x3c4>)
   1fc60:	0018      	movs	r0, r3
   1fc62:	4b5b      	ldr	r3, [pc, #364]	; (1fdd0 <hif_isr+0x3a8>)
   1fc64:	4798      	blx	r3
   1fc66:	4b5c      	ldr	r3, [pc, #368]	; (1fdd8 <hif_isr+0x3b0>)
   1fc68:	0018      	movs	r0, r3
   1fc6a:	4b59      	ldr	r3, [pc, #356]	; (1fdd0 <hif_isr+0x3a8>)
   1fc6c:	4798      	blx	r3
   1fc6e:	e0c9      	b.n	1fe04 <hif_isr+0x3dc>

				}
				else if(M2M_REQ_GROUP_OTA == strHif.u8Gid)
   1fc70:	1d3b      	adds	r3, r7, #4
   1fc72:	781b      	ldrb	r3, [r3, #0]
   1fc74:	b2db      	uxtb	r3, r3
   1fc76:	2b04      	cmp	r3, #4
   1fc78:	d122      	bne.n	1fcc0 <hif_isr+0x298>
				{
					if(gstrHifCxt.pfOtaCb)
   1fc7a:	4b51      	ldr	r3, [pc, #324]	; (1fdc0 <hif_isr+0x398>)
   1fc7c:	699b      	ldr	r3, [r3, #24]
   1fc7e:	2b00      	cmp	r3, #0
   1fc80:	d00d      	beq.n	1fc9e <hif_isr+0x276>
						gstrHifCxt.pfOtaCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
   1fc82:	4b4f      	ldr	r3, [pc, #316]	; (1fdc0 <hif_isr+0x398>)
   1fc84:	699b      	ldr	r3, [r3, #24]
   1fc86:	1d3a      	adds	r2, r7, #4
   1fc88:	7852      	ldrb	r2, [r2, #1]
   1fc8a:	b2d0      	uxtb	r0, r2
   1fc8c:	1d3a      	adds	r2, r7, #4
   1fc8e:	8852      	ldrh	r2, [r2, #2]
   1fc90:	b292      	uxth	r2, r2
   1fc92:	3a08      	subs	r2, #8
   1fc94:	b291      	uxth	r1, r2
   1fc96:	683a      	ldr	r2, [r7, #0]
   1fc98:	3208      	adds	r2, #8
   1fc9a:	4798      	blx	r3
   1fc9c:	e0b2      	b.n	1fe04 <hif_isr+0x3dc>
					else
						M2M_ERR("Ota callback is not registered\n");
   1fc9e:	23f8      	movs	r3, #248	; 0xf8
   1fca0:	33ff      	adds	r3, #255	; 0xff
   1fca2:	001a      	movs	r2, r3
   1fca4:	4948      	ldr	r1, [pc, #288]	; (1fdc8 <hif_isr+0x3a0>)
   1fca6:	4b49      	ldr	r3, [pc, #292]	; (1fdcc <hif_isr+0x3a4>)
   1fca8:	0018      	movs	r0, r3
   1fcaa:	4b49      	ldr	r3, [pc, #292]	; (1fdd0 <hif_isr+0x3a8>)
   1fcac:	4798      	blx	r3
   1fcae:	4b50      	ldr	r3, [pc, #320]	; (1fdf0 <hif_isr+0x3c8>)
   1fcb0:	0018      	movs	r0, r3
   1fcb2:	4b47      	ldr	r3, [pc, #284]	; (1fdd0 <hif_isr+0x3a8>)
   1fcb4:	4798      	blx	r3
   1fcb6:	4b48      	ldr	r3, [pc, #288]	; (1fdd8 <hif_isr+0x3b0>)
   1fcb8:	0018      	movs	r0, r3
   1fcba:	4b45      	ldr	r3, [pc, #276]	; (1fdd0 <hif_isr+0x3a8>)
   1fcbc:	4798      	blx	r3
   1fcbe:	e0a1      	b.n	1fe04 <hif_isr+0x3dc>

				}
				else if(M2M_REQ_GROUP_CRYPTO == strHif.u8Gid)
   1fcc0:	1d3b      	adds	r3, r7, #4
   1fcc2:	781b      	ldrb	r3, [r3, #0]
   1fcc4:	b2db      	uxtb	r3, r3
   1fcc6:	2b06      	cmp	r3, #6
   1fcc8:	d121      	bne.n	1fd0e <hif_isr+0x2e6>
				{
					if(gstrHifCxt.pfCryptoCb)
   1fcca:	4b3d      	ldr	r3, [pc, #244]	; (1fdc0 <hif_isr+0x398>)
   1fccc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   1fcce:	2b00      	cmp	r3, #0
   1fcd0:	d00d      	beq.n	1fcee <hif_isr+0x2c6>
						gstrHifCxt.pfCryptoCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
   1fcd2:	4b3b      	ldr	r3, [pc, #236]	; (1fdc0 <hif_isr+0x398>)
   1fcd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   1fcd6:	1d3a      	adds	r2, r7, #4
   1fcd8:	7852      	ldrb	r2, [r2, #1]
   1fcda:	b2d0      	uxtb	r0, r2
   1fcdc:	1d3a      	adds	r2, r7, #4
   1fcde:	8852      	ldrh	r2, [r2, #2]
   1fce0:	b292      	uxth	r2, r2
   1fce2:	3a08      	subs	r2, #8
   1fce4:	b291      	uxth	r1, r2
   1fce6:	683a      	ldr	r2, [r7, #0]
   1fce8:	3208      	adds	r2, #8
   1fcea:	4798      	blx	r3
   1fcec:	e08a      	b.n	1fe04 <hif_isr+0x3dc>

					else
						M2M_ERR("Crypto callback is not registered\n");
   1fcee:	2380      	movs	r3, #128	; 0x80
   1fcf0:	009a      	lsls	r2, r3, #2
   1fcf2:	4935      	ldr	r1, [pc, #212]	; (1fdc8 <hif_isr+0x3a0>)
   1fcf4:	4b35      	ldr	r3, [pc, #212]	; (1fdcc <hif_isr+0x3a4>)
   1fcf6:	0018      	movs	r0, r3
   1fcf8:	4b35      	ldr	r3, [pc, #212]	; (1fdd0 <hif_isr+0x3a8>)
   1fcfa:	4798      	blx	r3
   1fcfc:	4b3d      	ldr	r3, [pc, #244]	; (1fdf4 <hif_isr+0x3cc>)
   1fcfe:	0018      	movs	r0, r3
   1fd00:	4b33      	ldr	r3, [pc, #204]	; (1fdd0 <hif_isr+0x3a8>)
   1fd02:	4798      	blx	r3
   1fd04:	4b34      	ldr	r3, [pc, #208]	; (1fdd8 <hif_isr+0x3b0>)
   1fd06:	0018      	movs	r0, r3
   1fd08:	4b31      	ldr	r3, [pc, #196]	; (1fdd0 <hif_isr+0x3a8>)
   1fd0a:	4798      	blx	r3
   1fd0c:	e07a      	b.n	1fe04 <hif_isr+0x3dc>
				}
				else if(M2M_REQ_GROUP_SIGMA == strHif.u8Gid)
   1fd0e:	1d3b      	adds	r3, r7, #4
   1fd10:	781b      	ldrb	r3, [r3, #0]
   1fd12:	b2db      	uxtb	r3, r3
   1fd14:	2b07      	cmp	r3, #7
   1fd16:	d120      	bne.n	1fd5a <hif_isr+0x332>
				{
					if(gstrHifCxt.pfSigmaCb)
   1fd18:	4b29      	ldr	r3, [pc, #164]	; (1fdc0 <hif_isr+0x398>)
   1fd1a:	69db      	ldr	r3, [r3, #28]
   1fd1c:	2b00      	cmp	r3, #0
   1fd1e:	d00d      	beq.n	1fd3c <hif_isr+0x314>
						gstrHifCxt.pfSigmaCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
   1fd20:	4b27      	ldr	r3, [pc, #156]	; (1fdc0 <hif_isr+0x398>)
   1fd22:	69db      	ldr	r3, [r3, #28]
   1fd24:	1d3a      	adds	r2, r7, #4
   1fd26:	7852      	ldrb	r2, [r2, #1]
   1fd28:	b2d0      	uxtb	r0, r2
   1fd2a:	1d3a      	adds	r2, r7, #4
   1fd2c:	8852      	ldrh	r2, [r2, #2]
   1fd2e:	b292      	uxth	r2, r2
   1fd30:	3a08      	subs	r2, #8
   1fd32:	b291      	uxth	r1, r2
   1fd34:	683a      	ldr	r2, [r7, #0]
   1fd36:	3208      	adds	r2, #8
   1fd38:	4798      	blx	r3
   1fd3a:	e063      	b.n	1fe04 <hif_isr+0x3dc>
					else
						M2M_ERR("Sigma callback is not registered\n");
   1fd3c:	4a2e      	ldr	r2, [pc, #184]	; (1fdf8 <hif_isr+0x3d0>)
   1fd3e:	4922      	ldr	r1, [pc, #136]	; (1fdc8 <hif_isr+0x3a0>)
   1fd40:	4b22      	ldr	r3, [pc, #136]	; (1fdcc <hif_isr+0x3a4>)
   1fd42:	0018      	movs	r0, r3
   1fd44:	4b22      	ldr	r3, [pc, #136]	; (1fdd0 <hif_isr+0x3a8>)
   1fd46:	4798      	blx	r3
   1fd48:	4b2c      	ldr	r3, [pc, #176]	; (1fdfc <hif_isr+0x3d4>)
   1fd4a:	0018      	movs	r0, r3
   1fd4c:	4b20      	ldr	r3, [pc, #128]	; (1fdd0 <hif_isr+0x3a8>)
   1fd4e:	4798      	blx	r3
   1fd50:	4b21      	ldr	r3, [pc, #132]	; (1fdd8 <hif_isr+0x3b0>)
   1fd52:	0018      	movs	r0, r3
   1fd54:	4b1e      	ldr	r3, [pc, #120]	; (1fdd0 <hif_isr+0x3a8>)
   1fd56:	4798      	blx	r3
   1fd58:	e054      	b.n	1fe04 <hif_isr+0x3dc>
				}
				else if(M2M_REQ_GROUP_SSL == strHif.u8Gid)
   1fd5a:	1d3b      	adds	r3, r7, #4
   1fd5c:	781b      	ldrb	r3, [r3, #0]
   1fd5e:	b2db      	uxtb	r3, r3
   1fd60:	2b05      	cmp	r3, #5
   1fd62:	d111      	bne.n	1fd88 <hif_isr+0x360>
				{
				    if(gstrHifCxt.pfSslCb)
   1fd64:	4b16      	ldr	r3, [pc, #88]	; (1fdc0 <hif_isr+0x398>)
   1fd66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   1fd68:	2b00      	cmp	r3, #0
   1fd6a:	d04b      	beq.n	1fe04 <hif_isr+0x3dc>
						gstrHifCxt.pfSslCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
   1fd6c:	4b14      	ldr	r3, [pc, #80]	; (1fdc0 <hif_isr+0x398>)
   1fd6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   1fd70:	1d3a      	adds	r2, r7, #4
   1fd72:	7852      	ldrb	r2, [r2, #1]
   1fd74:	b2d0      	uxtb	r0, r2
   1fd76:	1d3a      	adds	r2, r7, #4
   1fd78:	8852      	ldrh	r2, [r2, #2]
   1fd7a:	b292      	uxth	r2, r2
   1fd7c:	3a08      	subs	r2, #8
   1fd7e:	b291      	uxth	r1, r2
   1fd80:	683a      	ldr	r2, [r7, #0]
   1fd82:	3208      	adds	r2, #8
   1fd84:	4798      	blx	r3
   1fd86:	e03d      	b.n	1fe04 <hif_isr+0x3dc>
				}
				else
				{
					M2M_ERR("(hif) invalid group ID\n");
   1fd88:	2384      	movs	r3, #132	; 0x84
   1fd8a:	009a      	lsls	r2, r3, #2
   1fd8c:	490e      	ldr	r1, [pc, #56]	; (1fdc8 <hif_isr+0x3a0>)
   1fd8e:	4b0f      	ldr	r3, [pc, #60]	; (1fdcc <hif_isr+0x3a4>)
   1fd90:	0018      	movs	r0, r3
   1fd92:	4b0f      	ldr	r3, [pc, #60]	; (1fdd0 <hif_isr+0x3a8>)
   1fd94:	4798      	blx	r3
   1fd96:	4b1a      	ldr	r3, [pc, #104]	; (1fe00 <hif_isr+0x3d8>)
   1fd98:	0018      	movs	r0, r3
   1fd9a:	4b0d      	ldr	r3, [pc, #52]	; (1fdd0 <hif_isr+0x3a8>)
   1fd9c:	4798      	blx	r3
   1fd9e:	4b0e      	ldr	r3, [pc, #56]	; (1fdd8 <hif_isr+0x3b0>)
   1fda0:	0018      	movs	r0, r3
   1fda2:	4b0b      	ldr	r3, [pc, #44]	; (1fdd0 <hif_isr+0x3a8>)
   1fda4:	4798      	blx	r3
					ret = M2M_ERR_BUS_FAIL;
   1fda6:	230f      	movs	r3, #15
   1fda8:	18fb      	adds	r3, r7, r3
   1fdaa:	22fa      	movs	r2, #250	; 0xfa
   1fdac:	701a      	strb	r2, [r3, #0]
					goto ERR1;
   1fdae:	e083      	b.n	1feb8 <hif_isr+0x490>
   1fdb0:	00001070 	.word	0x00001070
   1fdb4:	000214b5 	.word	0x000214b5
   1fdb8:	0001ebd9 	.word	0x0001ebd9
   1fdbc:	000214d9 	.word	0x000214d9
   1fdc0:	20005574 	.word	0x20005574
   1fdc4:	00001084 	.word	0x00001084
   1fdc8:	00036afc 	.word	0x00036afc
   1fdcc:	000367ec 	.word	0x000367ec
   1fdd0:	0001c65d 	.word	0x0001c65d
   1fdd4:	00036820 	.word	0x00036820
   1fdd8:	000367e8 	.word	0x000367e8
   1fddc:	00021529 	.word	0x00021529
   1fde0:	00036848 	.word	0x00036848
   1fde4:	00036860 	.word	0x00036860
   1fde8:	000368a0 	.word	0x000368a0
   1fdec:	000368c4 	.word	0x000368c4
   1fdf0:	000368e8 	.word	0x000368e8
   1fdf4:	00036908 	.word	0x00036908
   1fdf8:	00000207 	.word	0x00000207
   1fdfc:	0003692c 	.word	0x0003692c
   1fe00:	00036950 	.word	0x00036950
				}
				if(gstrHifCxt.u8HifRXDone)
   1fe04:	4b30      	ldr	r3, [pc, #192]	; (1fec8 <hif_isr+0x4a0>)
   1fe06:	789b      	ldrb	r3, [r3, #2]
   1fe08:	b2db      	uxtb	r3, r3
   1fe0a:	2b00      	cmp	r3, #0
   1fe0c:	d054      	beq.n	1feb8 <hif_isr+0x490>
				{
					M2M_ERR("(hif) host app didn't set RX Done <%u><%X>\n", strHif.u8Gid, strHif.u8Opcode);
   1fe0e:	4a2f      	ldr	r2, [pc, #188]	; (1fecc <hif_isr+0x4a4>)
   1fe10:	492f      	ldr	r1, [pc, #188]	; (1fed0 <hif_isr+0x4a8>)
   1fe12:	4b30      	ldr	r3, [pc, #192]	; (1fed4 <hif_isr+0x4ac>)
   1fe14:	0018      	movs	r0, r3
   1fe16:	4b30      	ldr	r3, [pc, #192]	; (1fed8 <hif_isr+0x4b0>)
   1fe18:	4798      	blx	r3
   1fe1a:	1d3b      	adds	r3, r7, #4
   1fe1c:	781b      	ldrb	r3, [r3, #0]
   1fe1e:	b2db      	uxtb	r3, r3
   1fe20:	0019      	movs	r1, r3
   1fe22:	1d3b      	adds	r3, r7, #4
   1fe24:	785b      	ldrb	r3, [r3, #1]
   1fe26:	b2db      	uxtb	r3, r3
   1fe28:	001a      	movs	r2, r3
   1fe2a:	4b2c      	ldr	r3, [pc, #176]	; (1fedc <hif_isr+0x4b4>)
   1fe2c:	0018      	movs	r0, r3
   1fe2e:	4b2a      	ldr	r3, [pc, #168]	; (1fed8 <hif_isr+0x4b0>)
   1fe30:	4798      	blx	r3
   1fe32:	4b2b      	ldr	r3, [pc, #172]	; (1fee0 <hif_isr+0x4b8>)
   1fe34:	0018      	movs	r0, r3
   1fe36:	4b28      	ldr	r3, [pc, #160]	; (1fed8 <hif_isr+0x4b0>)
   1fe38:	4798      	blx	r3
					ret = hif_set_rx_done();
   1fe3a:	230f      	movs	r3, #15
   1fe3c:	18fc      	adds	r4, r7, r3
   1fe3e:	4b29      	ldr	r3, [pc, #164]	; (1fee4 <hif_isr+0x4bc>)
   1fe40:	4798      	blx	r3
   1fe42:	0003      	movs	r3, r0
   1fe44:	7023      	strb	r3, [r4, #0]
   1fe46:	e037      	b.n	1feb8 <hif_isr+0x490>
					if(ret != M2M_SUCCESS) goto ERR1;
				}
			}
			else
			{
				M2M_ERR("(hif) Wrong Size\n");
   1fe48:	4a27      	ldr	r2, [pc, #156]	; (1fee8 <hif_isr+0x4c0>)
   1fe4a:	4921      	ldr	r1, [pc, #132]	; (1fed0 <hif_isr+0x4a8>)
   1fe4c:	4b21      	ldr	r3, [pc, #132]	; (1fed4 <hif_isr+0x4ac>)
   1fe4e:	0018      	movs	r0, r3
   1fe50:	4b21      	ldr	r3, [pc, #132]	; (1fed8 <hif_isr+0x4b0>)
   1fe52:	4798      	blx	r3
   1fe54:	4b25      	ldr	r3, [pc, #148]	; (1feec <hif_isr+0x4c4>)
   1fe56:	0018      	movs	r0, r3
   1fe58:	4b1f      	ldr	r3, [pc, #124]	; (1fed8 <hif_isr+0x4b0>)
   1fe5a:	4798      	blx	r3
   1fe5c:	4b20      	ldr	r3, [pc, #128]	; (1fee0 <hif_isr+0x4b8>)
   1fe5e:	0018      	movs	r0, r3
   1fe60:	4b1d      	ldr	r3, [pc, #116]	; (1fed8 <hif_isr+0x4b0>)
   1fe62:	4798      	blx	r3
				ret = M2M_ERR_RCV;
   1fe64:	230f      	movs	r3, #15
   1fe66:	18fb      	adds	r3, r7, r3
   1fe68:	22fe      	movs	r2, #254	; 0xfe
   1fe6a:	701a      	strb	r2, [r3, #0]
				goto ERR1;
   1fe6c:	e024      	b.n	1feb8 <hif_isr+0x490>
			}
		}
		else
		{
#ifndef WIN32
			M2M_ERR("(hif) False interrupt %lx",reg);
   1fe6e:	4a20      	ldr	r2, [pc, #128]	; (1fef0 <hif_isr+0x4c8>)
   1fe70:	4917      	ldr	r1, [pc, #92]	; (1fed0 <hif_isr+0x4a8>)
   1fe72:	4b18      	ldr	r3, [pc, #96]	; (1fed4 <hif_isr+0x4ac>)
   1fe74:	0018      	movs	r0, r3
   1fe76:	4b18      	ldr	r3, [pc, #96]	; (1fed8 <hif_isr+0x4b0>)
   1fe78:	4798      	blx	r3
   1fe7a:	68ba      	ldr	r2, [r7, #8]
   1fe7c:	4b1d      	ldr	r3, [pc, #116]	; (1fef4 <hif_isr+0x4cc>)
   1fe7e:	0011      	movs	r1, r2
   1fe80:	0018      	movs	r0, r3
   1fe82:	4b15      	ldr	r3, [pc, #84]	; (1fed8 <hif_isr+0x4b0>)
   1fe84:	4798      	blx	r3
   1fe86:	4b16      	ldr	r3, [pc, #88]	; (1fee0 <hif_isr+0x4b8>)
   1fe88:	0018      	movs	r0, r3
   1fe8a:	4b13      	ldr	r3, [pc, #76]	; (1fed8 <hif_isr+0x4b0>)
   1fe8c:	4798      	blx	r3
			ret = M2M_ERR_FAIL;
   1fe8e:	230f      	movs	r3, #15
   1fe90:	18fb      	adds	r3, r7, r3
   1fe92:	22f4      	movs	r2, #244	; 0xf4
   1fe94:	701a      	strb	r2, [r3, #0]
			goto ERR1;
   1fe96:	e00f      	b.n	1feb8 <hif_isr+0x490>
#endif
		}
	}
	else
	{
		M2M_ERR("(hif) Fail to Read interrupt reg\n");
   1fe98:	4a17      	ldr	r2, [pc, #92]	; (1fef8 <hif_isr+0x4d0>)
   1fe9a:	490d      	ldr	r1, [pc, #52]	; (1fed0 <hif_isr+0x4a8>)
   1fe9c:	4b0d      	ldr	r3, [pc, #52]	; (1fed4 <hif_isr+0x4ac>)
   1fe9e:	0018      	movs	r0, r3
   1fea0:	4b0d      	ldr	r3, [pc, #52]	; (1fed8 <hif_isr+0x4b0>)
   1fea2:	4798      	blx	r3
   1fea4:	4b15      	ldr	r3, [pc, #84]	; (1fefc <hif_isr+0x4d4>)
   1fea6:	0018      	movs	r0, r3
   1fea8:	4b0b      	ldr	r3, [pc, #44]	; (1fed8 <hif_isr+0x4b0>)
   1feaa:	4798      	blx	r3
   1feac:	4b0c      	ldr	r3, [pc, #48]	; (1fee0 <hif_isr+0x4b8>)
   1feae:	0018      	movs	r0, r3
   1feb0:	4b09      	ldr	r3, [pc, #36]	; (1fed8 <hif_isr+0x4b0>)
   1feb2:	4798      	blx	r3
		goto ERR1;
   1feb4:	e000      	b.n	1feb8 <hif_isr+0x490>
			if(ret != M2M_SUCCESS)goto ERR1;
   1feb6:	46c0      	nop			; (mov r8, r8)
	}

ERR1:
	return ret;
   1feb8:	230f      	movs	r3, #15
   1feba:	18fb      	adds	r3, r7, r3
   1febc:	781b      	ldrb	r3, [r3, #0]
   1febe:	b25b      	sxtb	r3, r3
}
   1fec0:	0018      	movs	r0, r3
   1fec2:	46bd      	mov	sp, r7
   1fec4:	b005      	add	sp, #20
   1fec6:	bd90      	pop	{r4, r7, pc}
   1fec8:	20005574 	.word	0x20005574
   1fecc:	00000216 	.word	0x00000216
   1fed0:	00036afc 	.word	0x00036afc
   1fed4:	000367ec 	.word	0x000367ec
   1fed8:	0001c65d 	.word	0x0001c65d
   1fedc:	00036968 	.word	0x00036968
   1fee0:	000367e8 	.word	0x000367e8
   1fee4:	0001f4bd 	.word	0x0001f4bd
   1fee8:	0000021d 	.word	0x0000021d
   1feec:	00036994 	.word	0x00036994
   1fef0:	00000225 	.word	0x00000225
   1fef4:	000369a8 	.word	0x000369a8
   1fef8:	0000022e 	.word	0x0000022e
   1fefc:	000369c4 	.word	0x000369c4

0001ff00 <hif_handle_isr>:
*	@brief	Handle interrupt received from NMC1500 firmware.
*   @return     The function SHALL return 0 for success and a negative value otherwise.
*/

sint8 hif_handle_isr(void)
{
   1ff00:	b590      	push	{r4, r7, lr}
   1ff02:	b083      	sub	sp, #12
   1ff04:	af00      	add	r7, sp, #0
	sint8 ret = M2M_SUCCESS;	
   1ff06:	1dfb      	adds	r3, r7, #7
   1ff08:	2200      	movs	r2, #0
   1ff0a:	701a      	strb	r2, [r3, #0]
	
	gstrHifCxt.u8Yield = 0;
   1ff0c:	4b1c      	ldr	r3, [pc, #112]	; (1ff80 <hif_handle_isr+0x80>)
   1ff0e:	2200      	movs	r2, #0
   1ff10:	711a      	strb	r2, [r3, #4]
	while (gstrHifCxt.u8Interrupt && !gstrHifCxt.u8Yield) {
   1ff12:	e024      	b.n	1ff5e <hif_handle_isr+0x5e>
		/*must be at that place because of the race of interrupt increment and that decrement*/
		/*when the interrupt enabled*/
		gstrHifCxt.u8Interrupt--;
   1ff14:	4b1a      	ldr	r3, [pc, #104]	; (1ff80 <hif_handle_isr+0x80>)
   1ff16:	78db      	ldrb	r3, [r3, #3]
   1ff18:	b2db      	uxtb	r3, r3
   1ff1a:	3b01      	subs	r3, #1
   1ff1c:	b2da      	uxtb	r2, r3
   1ff1e:	4b18      	ldr	r3, [pc, #96]	; (1ff80 <hif_handle_isr+0x80>)
   1ff20:	70da      	strb	r2, [r3, #3]
		while(1)
		{
			ret = hif_isr();
   1ff22:	1dfc      	adds	r4, r7, #7
   1ff24:	4b17      	ldr	r3, [pc, #92]	; (1ff84 <hif_handle_isr+0x84>)
   1ff26:	4798      	blx	r3
   1ff28:	0003      	movs	r3, r0
   1ff2a:	7023      	strb	r3, [r4, #0]
			if(ret == M2M_SUCCESS) {
   1ff2c:	1dfb      	adds	r3, r7, #7
   1ff2e:	781b      	ldrb	r3, [r3, #0]
   1ff30:	b25b      	sxtb	r3, r3
   1ff32:	2b00      	cmp	r3, #0
   1ff34:	d100      	bne.n	1ff38 <hif_handle_isr+0x38>
				/*we will try forever untill we get that interrupt*/
				/*Fail return errors here due to bus errors (reading expected values)*/
				break;
   1ff36:	e012      	b.n	1ff5e <hif_handle_isr+0x5e>
			} else {
				M2M_ERR("(HIF) Fail to handle interrupt %d try Again..\n",ret);
   1ff38:	4a13      	ldr	r2, [pc, #76]	; (1ff88 <hif_handle_isr+0x88>)
   1ff3a:	4914      	ldr	r1, [pc, #80]	; (1ff8c <hif_handle_isr+0x8c>)
   1ff3c:	4b14      	ldr	r3, [pc, #80]	; (1ff90 <hif_handle_isr+0x90>)
   1ff3e:	0018      	movs	r0, r3
   1ff40:	4b14      	ldr	r3, [pc, #80]	; (1ff94 <hif_handle_isr+0x94>)
   1ff42:	4798      	blx	r3
   1ff44:	1dfb      	adds	r3, r7, #7
   1ff46:	2200      	movs	r2, #0
   1ff48:	569a      	ldrsb	r2, [r3, r2]
   1ff4a:	4b13      	ldr	r3, [pc, #76]	; (1ff98 <hif_handle_isr+0x98>)
   1ff4c:	0011      	movs	r1, r2
   1ff4e:	0018      	movs	r0, r3
   1ff50:	4b10      	ldr	r3, [pc, #64]	; (1ff94 <hif_handle_isr+0x94>)
   1ff52:	4798      	blx	r3
   1ff54:	4b11      	ldr	r3, [pc, #68]	; (1ff9c <hif_handle_isr+0x9c>)
   1ff56:	0018      	movs	r0, r3
   1ff58:	4b0e      	ldr	r3, [pc, #56]	; (1ff94 <hif_handle_isr+0x94>)
   1ff5a:	4798      	blx	r3
			ret = hif_isr();
   1ff5c:	e7e1      	b.n	1ff22 <hif_handle_isr+0x22>
	while (gstrHifCxt.u8Interrupt && !gstrHifCxt.u8Yield) {
   1ff5e:	4b08      	ldr	r3, [pc, #32]	; (1ff80 <hif_handle_isr+0x80>)
   1ff60:	78db      	ldrb	r3, [r3, #3]
   1ff62:	b2db      	uxtb	r3, r3
   1ff64:	2b00      	cmp	r3, #0
   1ff66:	d004      	beq.n	1ff72 <hif_handle_isr+0x72>
   1ff68:	4b05      	ldr	r3, [pc, #20]	; (1ff80 <hif_handle_isr+0x80>)
   1ff6a:	791b      	ldrb	r3, [r3, #4]
   1ff6c:	b2db      	uxtb	r3, r3
   1ff6e:	2b00      	cmp	r3, #0
   1ff70:	d0d0      	beq.n	1ff14 <hif_handle_isr+0x14>
			}
		}
	}

	return ret;
   1ff72:	1dfb      	adds	r3, r7, #7
   1ff74:	781b      	ldrb	r3, [r3, #0]
   1ff76:	b25b      	sxtb	r3, r3
}
   1ff78:	0018      	movs	r0, r3
   1ff7a:	46bd      	mov	sp, r7
   1ff7c:	b003      	add	sp, #12
   1ff7e:	bd90      	pop	{r4, r7, pc}
   1ff80:	20005574 	.word	0x20005574
   1ff84:	0001fa29 	.word	0x0001fa29
   1ff88:	00000257 	.word	0x00000257
   1ff8c:	00036b04 	.word	0x00036b04
   1ff90:	000367ec 	.word	0x000367ec
   1ff94:	0001c65d 	.word	0x0001c65d
   1ff98:	000369e8 	.word	0x000369e8
   1ff9c:	000367e8 	.word	0x000367e8

0001ffa0 <hif_receive>:
*	@param [in]	isDone
*				If you don't need any more packets send True otherwise send false
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/
sint8 hif_receive(uint32 u32Addr, uint8 *pu8Buf, uint16 u16Sz, uint8 isDone)
{
   1ffa0:	b590      	push	{r4, r7, lr}
   1ffa2:	b087      	sub	sp, #28
   1ffa4:	af00      	add	r7, sp, #0
   1ffa6:	60f8      	str	r0, [r7, #12]
   1ffa8:	60b9      	str	r1, [r7, #8]
   1ffaa:	0019      	movs	r1, r3
   1ffac:	1dbb      	adds	r3, r7, #6
   1ffae:	801a      	strh	r2, [r3, #0]
   1ffb0:	1d7b      	adds	r3, r7, #5
   1ffb2:	1c0a      	adds	r2, r1, #0
   1ffb4:	701a      	strb	r2, [r3, #0]
	sint8 ret = M2M_SUCCESS;
   1ffb6:	2317      	movs	r3, #23
   1ffb8:	18fb      	adds	r3, r7, r3
   1ffba:	2200      	movs	r2, #0
   1ffbc:	701a      	strb	r2, [r3, #0]
	if((u32Addr == 0)||(pu8Buf == NULL) || (u16Sz == 0))
   1ffbe:	68fb      	ldr	r3, [r7, #12]
   1ffc0:	2b00      	cmp	r3, #0
   1ffc2:	d006      	beq.n	1ffd2 <hif_receive+0x32>
   1ffc4:	68bb      	ldr	r3, [r7, #8]
   1ffc6:	2b00      	cmp	r3, #0
   1ffc8:	d003      	beq.n	1ffd2 <hif_receive+0x32>
   1ffca:	1dbb      	adds	r3, r7, #6
   1ffcc:	881b      	ldrh	r3, [r3, #0]
   1ffce:	2b00      	cmp	r3, #0
   1ffd0:	d11e      	bne.n	20010 <hif_receive+0x70>
	{
		if(isDone)
   1ffd2:	1d7b      	adds	r3, r7, #5
   1ffd4:	781b      	ldrb	r3, [r3, #0]
   1ffd6:	2b00      	cmp	r3, #0
   1ffd8:	d006      	beq.n	1ffe8 <hif_receive+0x48>
		{			
			/* set RX done */
			ret = hif_set_rx_done();
   1ffda:	2317      	movs	r3, #23
   1ffdc:	18fc      	adds	r4, r7, r3
   1ffde:	4b45      	ldr	r3, [pc, #276]	; (200f4 <hif_receive+0x154>)
   1ffe0:	4798      	blx	r3
   1ffe2:	0003      	movs	r3, r0
   1ffe4:	7023      	strb	r3, [r4, #0]
		else
		{
			ret = M2M_ERR_FAIL;
			M2M_ERR(" hif_receive: Invalid argument\n");
		}
		goto ERR1;
   1ffe6:	e07c      	b.n	200e2 <hif_receive+0x142>
			ret = M2M_ERR_FAIL;
   1ffe8:	2317      	movs	r3, #23
   1ffea:	18fb      	adds	r3, r7, r3
   1ffec:	22f4      	movs	r2, #244	; 0xf4
   1ffee:	701a      	strb	r2, [r3, #0]
			M2M_ERR(" hif_receive: Invalid argument\n");
   1fff0:	239e      	movs	r3, #158	; 0x9e
   1fff2:	009a      	lsls	r2, r3, #2
   1fff4:	4940      	ldr	r1, [pc, #256]	; (200f8 <hif_receive+0x158>)
   1fff6:	4b41      	ldr	r3, [pc, #260]	; (200fc <hif_receive+0x15c>)
   1fff8:	0018      	movs	r0, r3
   1fffa:	4b41      	ldr	r3, [pc, #260]	; (20100 <hif_receive+0x160>)
   1fffc:	4798      	blx	r3
   1fffe:	4b41      	ldr	r3, [pc, #260]	; (20104 <hif_receive+0x164>)
   20000:	0018      	movs	r0, r3
   20002:	4b3f      	ldr	r3, [pc, #252]	; (20100 <hif_receive+0x160>)
   20004:	4798      	blx	r3
   20006:	4b40      	ldr	r3, [pc, #256]	; (20108 <hif_receive+0x168>)
   20008:	0018      	movs	r0, r3
   2000a:	4b3d      	ldr	r3, [pc, #244]	; (20100 <hif_receive+0x160>)
   2000c:	4798      	blx	r3
		goto ERR1;
   2000e:	e068      	b.n	200e2 <hif_receive+0x142>
	}

	if(u16Sz > gstrHifCxt.u32RxSize)
   20010:	1dbb      	adds	r3, r7, #6
   20012:	881a      	ldrh	r2, [r3, #0]
   20014:	4b3d      	ldr	r3, [pc, #244]	; (2010c <hif_receive+0x16c>)
   20016:	68db      	ldr	r3, [r3, #12]
   20018:	429a      	cmp	r2, r3
   2001a:	d917      	bls.n	2004c <hif_receive+0xac>
	{
		ret = M2M_ERR_FAIL;
   2001c:	2317      	movs	r3, #23
   2001e:	18fb      	adds	r3, r7, r3
   20020:	22f4      	movs	r2, #244	; 0xf4
   20022:	701a      	strb	r2, [r3, #0]
		M2M_ERR("APP Requested Size is larger than the recived buffer size <%u><%lu>\n",u16Sz, gstrHifCxt.u32RxSize);
   20024:	23a0      	movs	r3, #160	; 0xa0
   20026:	009a      	lsls	r2, r3, #2
   20028:	4933      	ldr	r1, [pc, #204]	; (200f8 <hif_receive+0x158>)
   2002a:	4b34      	ldr	r3, [pc, #208]	; (200fc <hif_receive+0x15c>)
   2002c:	0018      	movs	r0, r3
   2002e:	4b34      	ldr	r3, [pc, #208]	; (20100 <hif_receive+0x160>)
   20030:	4798      	blx	r3
   20032:	1dbb      	adds	r3, r7, #6
   20034:	8819      	ldrh	r1, [r3, #0]
   20036:	4b35      	ldr	r3, [pc, #212]	; (2010c <hif_receive+0x16c>)
   20038:	68da      	ldr	r2, [r3, #12]
   2003a:	4b35      	ldr	r3, [pc, #212]	; (20110 <hif_receive+0x170>)
   2003c:	0018      	movs	r0, r3
   2003e:	4b30      	ldr	r3, [pc, #192]	; (20100 <hif_receive+0x160>)
   20040:	4798      	blx	r3
   20042:	4b31      	ldr	r3, [pc, #196]	; (20108 <hif_receive+0x168>)
   20044:	0018      	movs	r0, r3
   20046:	4b2e      	ldr	r3, [pc, #184]	; (20100 <hif_receive+0x160>)
   20048:	4798      	blx	r3
		goto ERR1;
   2004a:	e04a      	b.n	200e2 <hif_receive+0x142>
	}
	if((u32Addr < gstrHifCxt.u32RxAddr)||((u32Addr + u16Sz)>(gstrHifCxt.u32RxAddr + gstrHifCxt.u32RxSize)))
   2004c:	4b2f      	ldr	r3, [pc, #188]	; (2010c <hif_receive+0x16c>)
   2004e:	689a      	ldr	r2, [r3, #8]
   20050:	68fb      	ldr	r3, [r7, #12]
   20052:	429a      	cmp	r2, r3
   20054:	d80a      	bhi.n	2006c <hif_receive+0xcc>
   20056:	1dbb      	adds	r3, r7, #6
   20058:	881a      	ldrh	r2, [r3, #0]
   2005a:	68fb      	ldr	r3, [r7, #12]
   2005c:	18d2      	adds	r2, r2, r3
   2005e:	4b2b      	ldr	r3, [pc, #172]	; (2010c <hif_receive+0x16c>)
   20060:	6899      	ldr	r1, [r3, #8]
   20062:	4b2a      	ldr	r3, [pc, #168]	; (2010c <hif_receive+0x16c>)
   20064:	68db      	ldr	r3, [r3, #12]
   20066:	18cb      	adds	r3, r1, r3
   20068:	429a      	cmp	r2, r3
   2006a:	d912      	bls.n	20092 <hif_receive+0xf2>
	{
		ret = M2M_ERR_FAIL;
   2006c:	2317      	movs	r3, #23
   2006e:	18fb      	adds	r3, r7, r3
   20070:	22f4      	movs	r2, #244	; 0xf4
   20072:	701a      	strb	r2, [r3, #0]
		M2M_ERR("APP Requested Address beyond the recived buffer address and length\n");
   20074:	4a27      	ldr	r2, [pc, #156]	; (20114 <hif_receive+0x174>)
   20076:	4920      	ldr	r1, [pc, #128]	; (200f8 <hif_receive+0x158>)
   20078:	4b20      	ldr	r3, [pc, #128]	; (200fc <hif_receive+0x15c>)
   2007a:	0018      	movs	r0, r3
   2007c:	4b20      	ldr	r3, [pc, #128]	; (20100 <hif_receive+0x160>)
   2007e:	4798      	blx	r3
   20080:	4b25      	ldr	r3, [pc, #148]	; (20118 <hif_receive+0x178>)
   20082:	0018      	movs	r0, r3
   20084:	4b1e      	ldr	r3, [pc, #120]	; (20100 <hif_receive+0x160>)
   20086:	4798      	blx	r3
   20088:	4b1f      	ldr	r3, [pc, #124]	; (20108 <hif_receive+0x168>)
   2008a:	0018      	movs	r0, r3
   2008c:	4b1c      	ldr	r3, [pc, #112]	; (20100 <hif_receive+0x160>)
   2008e:	4798      	blx	r3
		goto ERR1;
   20090:	e027      	b.n	200e2 <hif_receive+0x142>
	}
	
	/* Receive the payload */
	ret = nm_read_block(u32Addr, pu8Buf, u16Sz);
   20092:	1dbb      	adds	r3, r7, #6
   20094:	881a      	ldrh	r2, [r3, #0]
   20096:	2317      	movs	r3, #23
   20098:	18fc      	adds	r4, r7, r3
   2009a:	68b9      	ldr	r1, [r7, #8]
   2009c:	68fb      	ldr	r3, [r7, #12]
   2009e:	0018      	movs	r0, r3
   200a0:	4b1e      	ldr	r3, [pc, #120]	; (2011c <hif_receive+0x17c>)
   200a2:	4798      	blx	r3
   200a4:	0003      	movs	r3, r0
   200a6:	7023      	strb	r3, [r4, #0]
	if(ret != M2M_SUCCESS)goto ERR1;
   200a8:	2317      	movs	r3, #23
   200aa:	18fb      	adds	r3, r7, r3
   200ac:	781b      	ldrb	r3, [r3, #0]
   200ae:	b25b      	sxtb	r3, r3
   200b0:	2b00      	cmp	r3, #0
   200b2:	d115      	bne.n	200e0 <hif_receive+0x140>

	/* check if this is the last packet */
	if((((gstrHifCxt.u32RxAddr + gstrHifCxt.u32RxSize) - (u32Addr + u16Sz)) <= 0) || isDone)
   200b4:	4b15      	ldr	r3, [pc, #84]	; (2010c <hif_receive+0x16c>)
   200b6:	689a      	ldr	r2, [r3, #8]
   200b8:	4b14      	ldr	r3, [pc, #80]	; (2010c <hif_receive+0x16c>)
   200ba:	68db      	ldr	r3, [r3, #12]
   200bc:	18d2      	adds	r2, r2, r3
   200be:	1dbb      	adds	r3, r7, #6
   200c0:	8819      	ldrh	r1, [r3, #0]
   200c2:	68fb      	ldr	r3, [r7, #12]
   200c4:	18cb      	adds	r3, r1, r3
   200c6:	429a      	cmp	r2, r3
   200c8:	d003      	beq.n	200d2 <hif_receive+0x132>
   200ca:	1d7b      	adds	r3, r7, #5
   200cc:	781b      	ldrb	r3, [r3, #0]
   200ce:	2b00      	cmp	r3, #0
   200d0:	d007      	beq.n	200e2 <hif_receive+0x142>
	{
		/* set RX done */
		ret = hif_set_rx_done();
   200d2:	2317      	movs	r3, #23
   200d4:	18fc      	adds	r4, r7, r3
   200d6:	4b07      	ldr	r3, [pc, #28]	; (200f4 <hif_receive+0x154>)
   200d8:	4798      	blx	r3
   200da:	0003      	movs	r3, r0
   200dc:	7023      	strb	r3, [r4, #0]
   200de:	e000      	b.n	200e2 <hif_receive+0x142>
	if(ret != M2M_SUCCESS)goto ERR1;
   200e0:	46c0      	nop			; (mov r8, r8)
	}

ERR1:
	return ret;
   200e2:	2317      	movs	r3, #23
   200e4:	18fb      	adds	r3, r7, r3
   200e6:	781b      	ldrb	r3, [r3, #0]
   200e8:	b25b      	sxtb	r3, r3
}
   200ea:	0018      	movs	r0, r3
   200ec:	46bd      	mov	sp, r7
   200ee:	b007      	add	sp, #28
   200f0:	bd90      	pop	{r4, r7, pc}
   200f2:	46c0      	nop			; (mov r8, r8)
   200f4:	0001f4bd 	.word	0x0001f4bd
   200f8:	00036b14 	.word	0x00036b14
   200fc:	000367ec 	.word	0x000367ec
   20100:	0001c65d 	.word	0x0001c65d
   20104:	00036a18 	.word	0x00036a18
   20108:	000367e8 	.word	0x000367e8
   2010c:	20005574 	.word	0x20005574
   20110:	00036a38 	.word	0x00036a38
   20114:	00000286 	.word	0x00000286
   20118:	00036a80 	.word	0x00036a80
   2011c:	00021529 	.word	0x00021529

00020120 <hif_register_cb>:
*				function to be set
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_register_cb(uint8 u8Grp,tpfHifCallBack fn)
{
   20120:	b580      	push	{r7, lr}
   20122:	b084      	sub	sp, #16
   20124:	af00      	add	r7, sp, #0
   20126:	0002      	movs	r2, r0
   20128:	6039      	str	r1, [r7, #0]
   2012a:	1dfb      	adds	r3, r7, #7
   2012c:	701a      	strb	r2, [r3, #0]
	sint8 ret = M2M_SUCCESS;
   2012e:	230f      	movs	r3, #15
   20130:	18fb      	adds	r3, r7, r3
   20132:	2200      	movs	r2, #0
   20134:	701a      	strb	r2, [r3, #0]
	switch(u8Grp)
   20136:	1dfb      	adds	r3, r7, #7
   20138:	781b      	ldrb	r3, [r3, #0]
   2013a:	2b07      	cmp	r3, #7
   2013c:	d820      	bhi.n	20180 <hif_register_cb+0x60>
   2013e:	009a      	lsls	r2, r3, #2
   20140:	4b1e      	ldr	r3, [pc, #120]	; (201bc <hif_register_cb+0x9c>)
   20142:	18d3      	adds	r3, r2, r3
   20144:	681b      	ldr	r3, [r3, #0]
   20146:	469f      	mov	pc, r3
	{
		case M2M_REQ_GROUP_IP:
			gstrHifCxt.pfIpCb = fn;
   20148:	4b1d      	ldr	r3, [pc, #116]	; (201c0 <hif_register_cb+0xa0>)
   2014a:	683a      	ldr	r2, [r7, #0]
   2014c:	615a      	str	r2, [r3, #20]
			break;
   2014e:	e02d      	b.n	201ac <hif_register_cb+0x8c>
		case M2M_REQ_GROUP_WIFI:
			gstrHifCxt.pfWifiCb = fn;
   20150:	4b1b      	ldr	r3, [pc, #108]	; (201c0 <hif_register_cb+0xa0>)
   20152:	683a      	ldr	r2, [r7, #0]
   20154:	611a      	str	r2, [r3, #16]
			break;
   20156:	e029      	b.n	201ac <hif_register_cb+0x8c>
		case M2M_REQ_GROUP_OTA:
			gstrHifCxt.pfOtaCb = fn;
   20158:	4b19      	ldr	r3, [pc, #100]	; (201c0 <hif_register_cb+0xa0>)
   2015a:	683a      	ldr	r2, [r7, #0]
   2015c:	619a      	str	r2, [r3, #24]
			break;
   2015e:	e025      	b.n	201ac <hif_register_cb+0x8c>
		case M2M_REQ_GROUP_HIF:
			gstrHifCxt.pfHifCb = fn;
   20160:	4b17      	ldr	r3, [pc, #92]	; (201c0 <hif_register_cb+0xa0>)
   20162:	683a      	ldr	r2, [r7, #0]
   20164:	621a      	str	r2, [r3, #32]
			break;
   20166:	e021      	b.n	201ac <hif_register_cb+0x8c>
		case M2M_REQ_GROUP_CRYPTO:
			gstrHifCxt.pfCryptoCb = fn;
   20168:	4b15      	ldr	r3, [pc, #84]	; (201c0 <hif_register_cb+0xa0>)
   2016a:	683a      	ldr	r2, [r7, #0]
   2016c:	625a      	str	r2, [r3, #36]	; 0x24
			break;
   2016e:	e01d      	b.n	201ac <hif_register_cb+0x8c>
		case M2M_REQ_GROUP_SIGMA:
			gstrHifCxt.pfSigmaCb = fn;
   20170:	4b13      	ldr	r3, [pc, #76]	; (201c0 <hif_register_cb+0xa0>)
   20172:	683a      	ldr	r2, [r7, #0]
   20174:	61da      	str	r2, [r3, #28]
			break;
   20176:	e019      	b.n	201ac <hif_register_cb+0x8c>
		case M2M_REQ_GROUP_SSL:
			gstrHifCxt.pfSslCb = fn;
   20178:	4b11      	ldr	r3, [pc, #68]	; (201c0 <hif_register_cb+0xa0>)
   2017a:	683a      	ldr	r2, [r7, #0]
   2017c:	629a      	str	r2, [r3, #40]	; 0x28
			break;
   2017e:	e015      	b.n	201ac <hif_register_cb+0x8c>
		default:
			M2M_ERR("GRp ? %d\n",u8Grp);
   20180:	4a10      	ldr	r2, [pc, #64]	; (201c4 <hif_register_cb+0xa4>)
   20182:	4911      	ldr	r1, [pc, #68]	; (201c8 <hif_register_cb+0xa8>)
   20184:	4b11      	ldr	r3, [pc, #68]	; (201cc <hif_register_cb+0xac>)
   20186:	0018      	movs	r0, r3
   20188:	4b11      	ldr	r3, [pc, #68]	; (201d0 <hif_register_cb+0xb0>)
   2018a:	4798      	blx	r3
   2018c:	1dfb      	adds	r3, r7, #7
   2018e:	781a      	ldrb	r2, [r3, #0]
   20190:	4b10      	ldr	r3, [pc, #64]	; (201d4 <hif_register_cb+0xb4>)
   20192:	0011      	movs	r1, r2
   20194:	0018      	movs	r0, r3
   20196:	4b0e      	ldr	r3, [pc, #56]	; (201d0 <hif_register_cb+0xb0>)
   20198:	4798      	blx	r3
   2019a:	4b0f      	ldr	r3, [pc, #60]	; (201d8 <hif_register_cb+0xb8>)
   2019c:	0018      	movs	r0, r3
   2019e:	4b0c      	ldr	r3, [pc, #48]	; (201d0 <hif_register_cb+0xb0>)
   201a0:	4798      	blx	r3
			ret = M2M_ERR_FAIL;
   201a2:	230f      	movs	r3, #15
   201a4:	18fb      	adds	r3, r7, r3
   201a6:	22f4      	movs	r2, #244	; 0xf4
   201a8:	701a      	strb	r2, [r3, #0]
			break;
   201aa:	46c0      	nop			; (mov r8, r8)
	}
	return ret;
   201ac:	230f      	movs	r3, #15
   201ae:	18fb      	adds	r3, r7, r3
   201b0:	781b      	ldrb	r3, [r3, #0]
   201b2:	b25b      	sxtb	r3, r3
}
   201b4:	0018      	movs	r0, r3
   201b6:	46bd      	mov	sp, r7
   201b8:	b004      	add	sp, #16
   201ba:	bd80      	pop	{r7, pc}
   201bc:	00036ad0 	.word	0x00036ad0
   201c0:	20005574 	.word	0x20005574
   201c4:	000002be 	.word	0x000002be
   201c8:	00036b20 	.word	0x00036b20
   201cc:	000367ec 	.word	0x000367ec
   201d0:	0001c65d 	.word	0x0001c65d
   201d4:	00036ac4 	.word	0x00036ac4
   201d8:	000367e8 	.word	0x000367e8

000201dc <m2m_wifi_cb>:
*	@author
*	@date
*	@version	1.0
*/
static void m2m_wifi_cb(uint8 u8OpCode, uint16 u16DataSize, uint32 u32Addr)
{
   201dc:	b590      	push	{r4, r7, lr}
   201de:	b0af      	sub	sp, #188	; 0xbc
   201e0:	af02      	add	r7, sp, #8
   201e2:	603a      	str	r2, [r7, #0]
   201e4:	1dfb      	adds	r3, r7, #7
   201e6:	1c02      	adds	r2, r0, #0
   201e8:	701a      	strb	r2, [r3, #0]
   201ea:	1d3b      	adds	r3, r7, #4
   201ec:	1c0a      	adds	r2, r1, #0
   201ee:	801a      	strh	r2, [r3, #0]
	uint8 rx_buf[8];
	if (u8OpCode == M2M_WIFI_RESP_CON_STATE_CHANGED)
   201f0:	1dfb      	adds	r3, r7, #7
   201f2:	781b      	ldrb	r3, [r3, #0]
   201f4:	2b2c      	cmp	r3, #44	; 0x2c
   201f6:	d116      	bne.n	20226 <m2m_wifi_cb+0x4a>
	{
		tstrM2mWifiStateChanged strState;
		if (hif_receive(u32Addr, (uint8*) &strState,sizeof(tstrM2mWifiStateChanged), 0) == M2M_SUCCESS)
   201f8:	23a4      	movs	r3, #164	; 0xa4
   201fa:	18f9      	adds	r1, r7, r3
   201fc:	6838      	ldr	r0, [r7, #0]
   201fe:	2300      	movs	r3, #0
   20200:	2204      	movs	r2, #4
   20202:	4cca      	ldr	r4, [pc, #808]	; (2052c <m2m_wifi_cb+0x350>)
   20204:	47a0      	blx	r4
   20206:	1e03      	subs	r3, r0, #0
   20208:	d000      	beq.n	2020c <m2m_wifi_cb+0x30>
   2020a:	e1b4      	b.n	20576 <m2m_wifi_cb+0x39a>
		{
			if (gpfAppWifiCb)
   2020c:	4bc8      	ldr	r3, [pc, #800]	; (20530 <m2m_wifi_cb+0x354>)
   2020e:	681b      	ldr	r3, [r3, #0]
   20210:	2b00      	cmp	r3, #0
   20212:	d100      	bne.n	20216 <m2m_wifi_cb+0x3a>
   20214:	e1af      	b.n	20576 <m2m_wifi_cb+0x39a>
				gpfAppWifiCb(M2M_WIFI_RESP_CON_STATE_CHANGED, &strState);
   20216:	4bc6      	ldr	r3, [pc, #792]	; (20530 <m2m_wifi_cb+0x354>)
   20218:	681b      	ldr	r3, [r3, #0]
   2021a:	22a4      	movs	r2, #164	; 0xa4
   2021c:	18ba      	adds	r2, r7, r2
   2021e:	0011      	movs	r1, r2
   20220:	202c      	movs	r0, #44	; 0x2c
   20222:	4798      	blx	r3
#endif
	else
	{
		M2M_ERR("REQ Not defined %d\n",u8OpCode);
	}
}
   20224:	e1a7      	b.n	20576 <m2m_wifi_cb+0x39a>
	else if (u8OpCode == M2M_WIFI_RESP_GET_SYS_TIME)
   20226:	1dfb      	adds	r3, r7, #7
   20228:	781b      	ldrb	r3, [r3, #0]
   2022a:	2b1b      	cmp	r3, #27
   2022c:	d116      	bne.n	2025c <m2m_wifi_cb+0x80>
		if (hif_receive(u32Addr, (uint8*) &strSysTime,sizeof(tstrSystemTime), 0) == M2M_SUCCESS)
   2022e:	239c      	movs	r3, #156	; 0x9c
   20230:	18f9      	adds	r1, r7, r3
   20232:	6838      	ldr	r0, [r7, #0]
   20234:	2300      	movs	r3, #0
   20236:	2208      	movs	r2, #8
   20238:	4cbc      	ldr	r4, [pc, #752]	; (2052c <m2m_wifi_cb+0x350>)
   2023a:	47a0      	blx	r4
   2023c:	1e03      	subs	r3, r0, #0
   2023e:	d000      	beq.n	20242 <m2m_wifi_cb+0x66>
   20240:	e199      	b.n	20576 <m2m_wifi_cb+0x39a>
			if (gpfAppWifiCb)
   20242:	4bbb      	ldr	r3, [pc, #748]	; (20530 <m2m_wifi_cb+0x354>)
   20244:	681b      	ldr	r3, [r3, #0]
   20246:	2b00      	cmp	r3, #0
   20248:	d100      	bne.n	2024c <m2m_wifi_cb+0x70>
   2024a:	e194      	b.n	20576 <m2m_wifi_cb+0x39a>
				gpfAppWifiCb(M2M_WIFI_RESP_GET_SYS_TIME, &strSysTime);
   2024c:	4bb8      	ldr	r3, [pc, #736]	; (20530 <m2m_wifi_cb+0x354>)
   2024e:	681b      	ldr	r3, [r3, #0]
   20250:	229c      	movs	r2, #156	; 0x9c
   20252:	18ba      	adds	r2, r7, r2
   20254:	0011      	movs	r1, r2
   20256:	201b      	movs	r0, #27
   20258:	4798      	blx	r3
}
   2025a:	e18c      	b.n	20576 <m2m_wifi_cb+0x39a>
	else if(u8OpCode == M2M_WIFI_RESP_CONN_INFO)
   2025c:	1dfb      	adds	r3, r7, #7
   2025e:	781b      	ldrb	r3, [r3, #0]
   20260:	2b06      	cmp	r3, #6
   20262:	d116      	bne.n	20292 <m2m_wifi_cb+0xb6>
		if(hif_receive(u32Addr, (uint8*)&strConnInfo, sizeof(tstrM2MConnInfo), 1) == M2M_SUCCESS)
   20264:	230c      	movs	r3, #12
   20266:	18f9      	adds	r1, r7, r3
   20268:	6838      	ldr	r0, [r7, #0]
   2026a:	2301      	movs	r3, #1
   2026c:	2230      	movs	r2, #48	; 0x30
   2026e:	4caf      	ldr	r4, [pc, #700]	; (2052c <m2m_wifi_cb+0x350>)
   20270:	47a0      	blx	r4
   20272:	1e03      	subs	r3, r0, #0
   20274:	d000      	beq.n	20278 <m2m_wifi_cb+0x9c>
   20276:	e17e      	b.n	20576 <m2m_wifi_cb+0x39a>
			if(gpfAppWifiCb)
   20278:	4bad      	ldr	r3, [pc, #692]	; (20530 <m2m_wifi_cb+0x354>)
   2027a:	681b      	ldr	r3, [r3, #0]
   2027c:	2b00      	cmp	r3, #0
   2027e:	d100      	bne.n	20282 <m2m_wifi_cb+0xa6>
   20280:	e179      	b.n	20576 <m2m_wifi_cb+0x39a>
				gpfAppWifiCb(M2M_WIFI_RESP_CONN_INFO, &strConnInfo);
   20282:	4bab      	ldr	r3, [pc, #684]	; (20530 <m2m_wifi_cb+0x354>)
   20284:	681b      	ldr	r3, [r3, #0]
   20286:	220c      	movs	r2, #12
   20288:	18ba      	adds	r2, r7, r2
   2028a:	0011      	movs	r1, r2
   2028c:	2006      	movs	r0, #6
   2028e:	4798      	blx	r3
}
   20290:	e171      	b.n	20576 <m2m_wifi_cb+0x39a>
	else if (u8OpCode == M2M_WIFI_RESP_MEMORY_RECOVER)
   20292:	1dfb      	adds	r3, r7, #7
   20294:	781b      	ldrb	r3, [r3, #0]
   20296:	2b0e      	cmp	r3, #14
   20298:	d100      	bne.n	2029c <m2m_wifi_cb+0xc0>
   2029a:	e16c      	b.n	20576 <m2m_wifi_cb+0x39a>
	else if (u8OpCode == M2M_WIFI_REQ_DHCP_CONF)
   2029c:	1dfb      	adds	r3, r7, #7
   2029e:	781b      	ldrb	r3, [r3, #0]
   202a0:	2b32      	cmp	r3, #50	; 0x32
   202a2:	d116      	bne.n	202d2 <m2m_wifi_cb+0xf6>
		if (hif_receive(u32Addr, (uint8 *)&strIpConfig, sizeof(tstrM2MIPConfig), 0) == M2M_SUCCESS)
   202a4:	2384      	movs	r3, #132	; 0x84
   202a6:	18f9      	adds	r1, r7, r3
   202a8:	6838      	ldr	r0, [r7, #0]
   202aa:	2300      	movs	r3, #0
   202ac:	2218      	movs	r2, #24
   202ae:	4c9f      	ldr	r4, [pc, #636]	; (2052c <m2m_wifi_cb+0x350>)
   202b0:	47a0      	blx	r4
   202b2:	1e03      	subs	r3, r0, #0
   202b4:	d000      	beq.n	202b8 <m2m_wifi_cb+0xdc>
   202b6:	e15e      	b.n	20576 <m2m_wifi_cb+0x39a>
			if (gpfAppWifiCb)
   202b8:	4b9d      	ldr	r3, [pc, #628]	; (20530 <m2m_wifi_cb+0x354>)
   202ba:	681b      	ldr	r3, [r3, #0]
   202bc:	2b00      	cmp	r3, #0
   202be:	d100      	bne.n	202c2 <m2m_wifi_cb+0xe6>
   202c0:	e159      	b.n	20576 <m2m_wifi_cb+0x39a>
				gpfAppWifiCb(M2M_WIFI_REQ_DHCP_CONF, (uint8 *)&strIpConfig);
   202c2:	4b9b      	ldr	r3, [pc, #620]	; (20530 <m2m_wifi_cb+0x354>)
   202c4:	681b      	ldr	r3, [r3, #0]
   202c6:	2284      	movs	r2, #132	; 0x84
   202c8:	18ba      	adds	r2, r7, r2
   202ca:	0011      	movs	r1, r2
   202cc:	2032      	movs	r0, #50	; 0x32
   202ce:	4798      	blx	r3
}
   202d0:	e151      	b.n	20576 <m2m_wifi_cb+0x39a>
	else if (u8OpCode == M2M_WIFI_REQ_WPS)
   202d2:	1dfb      	adds	r3, r7, #7
   202d4:	781b      	ldrb	r3, [r3, #0]
   202d6:	2b2f      	cmp	r3, #47	; 0x2f
   202d8:	d11d      	bne.n	20316 <m2m_wifi_cb+0x13a>
		m2m_memset((uint8*)&strWps,0,sizeof(tstrM2MWPSInfo));
   202da:	230c      	movs	r3, #12
   202dc:	18fb      	adds	r3, r7, r3
   202de:	2264      	movs	r2, #100	; 0x64
   202e0:	2100      	movs	r1, #0
   202e2:	0018      	movs	r0, r3
   202e4:	4b93      	ldr	r3, [pc, #588]	; (20534 <m2m_wifi_cb+0x358>)
   202e6:	4798      	blx	r3
		if(hif_receive(u32Addr, (uint8*)&strWps, sizeof(tstrM2MWPSInfo), 0) == M2M_SUCCESS)
   202e8:	230c      	movs	r3, #12
   202ea:	18f9      	adds	r1, r7, r3
   202ec:	6838      	ldr	r0, [r7, #0]
   202ee:	2300      	movs	r3, #0
   202f0:	2264      	movs	r2, #100	; 0x64
   202f2:	4c8e      	ldr	r4, [pc, #568]	; (2052c <m2m_wifi_cb+0x350>)
   202f4:	47a0      	blx	r4
   202f6:	1e03      	subs	r3, r0, #0
   202f8:	d000      	beq.n	202fc <m2m_wifi_cb+0x120>
   202fa:	e13c      	b.n	20576 <m2m_wifi_cb+0x39a>
			if (gpfAppWifiCb)
   202fc:	4b8c      	ldr	r3, [pc, #560]	; (20530 <m2m_wifi_cb+0x354>)
   202fe:	681b      	ldr	r3, [r3, #0]
   20300:	2b00      	cmp	r3, #0
   20302:	d100      	bne.n	20306 <m2m_wifi_cb+0x12a>
   20304:	e137      	b.n	20576 <m2m_wifi_cb+0x39a>
				gpfAppWifiCb(M2M_WIFI_REQ_WPS, &strWps);
   20306:	4b8a      	ldr	r3, [pc, #552]	; (20530 <m2m_wifi_cb+0x354>)
   20308:	681b      	ldr	r3, [r3, #0]
   2030a:	220c      	movs	r2, #12
   2030c:	18ba      	adds	r2, r7, r2
   2030e:	0011      	movs	r1, r2
   20310:	202f      	movs	r0, #47	; 0x2f
   20312:	4798      	blx	r3
}
   20314:	e12f      	b.n	20576 <m2m_wifi_cb+0x39a>
	else if (u8OpCode == M2M_WIFI_RESP_IP_CONFLICT)
   20316:	1dfb      	adds	r3, r7, #7
   20318:	781b      	ldrb	r3, [r3, #0]
   2031a:	2b34      	cmp	r3, #52	; 0x34
   2031c:	d137      	bne.n	2038e <m2m_wifi_cb+0x1b2>
		if(hif_receive(u32Addr, (uint8 *)&u32ConflictedIP, sizeof(u32ConflictedIP), 0) == M2M_SUCCESS)
   2031e:	2380      	movs	r3, #128	; 0x80
   20320:	18f9      	adds	r1, r7, r3
   20322:	6838      	ldr	r0, [r7, #0]
   20324:	2300      	movs	r3, #0
   20326:	2204      	movs	r2, #4
   20328:	4c80      	ldr	r4, [pc, #512]	; (2052c <m2m_wifi_cb+0x350>)
   2032a:	47a0      	blx	r4
   2032c:	1e03      	subs	r3, r0, #0
   2032e:	d000      	beq.n	20332 <m2m_wifi_cb+0x156>
   20330:	e121      	b.n	20576 <m2m_wifi_cb+0x39a>
			M2M_INFO("Conflicted IP \" %u.%u.%u.%u \" \n", 
   20332:	4b81      	ldr	r3, [pc, #516]	; (20538 <m2m_wifi_cb+0x35c>)
   20334:	0018      	movs	r0, r3
   20336:	4b81      	ldr	r3, [pc, #516]	; (2053c <m2m_wifi_cb+0x360>)
   20338:	4798      	blx	r3
   2033a:	2380      	movs	r3, #128	; 0x80
   2033c:	18fb      	adds	r3, r7, r3
   2033e:	681b      	ldr	r3, [r3, #0]
   20340:	0e1b      	lsrs	r3, r3, #24
   20342:	b2db      	uxtb	r3, r3
   20344:	0019      	movs	r1, r3
   20346:	2380      	movs	r3, #128	; 0x80
   20348:	18fb      	adds	r3, r7, r3
   2034a:	681b      	ldr	r3, [r3, #0]
   2034c:	0c1b      	lsrs	r3, r3, #16
   2034e:	b2db      	uxtb	r3, r3
   20350:	001a      	movs	r2, r3
   20352:	2380      	movs	r3, #128	; 0x80
   20354:	18fb      	adds	r3, r7, r3
   20356:	681b      	ldr	r3, [r3, #0]
   20358:	0a1b      	lsrs	r3, r3, #8
   2035a:	b2db      	uxtb	r3, r3
   2035c:	001c      	movs	r4, r3
   2035e:	2380      	movs	r3, #128	; 0x80
   20360:	18fb      	adds	r3, r7, r3
   20362:	681b      	ldr	r3, [r3, #0]
   20364:	b2db      	uxtb	r3, r3
   20366:	4876      	ldr	r0, [pc, #472]	; (20540 <m2m_wifi_cb+0x364>)
   20368:	9300      	str	r3, [sp, #0]
   2036a:	0023      	movs	r3, r4
   2036c:	4c73      	ldr	r4, [pc, #460]	; (2053c <m2m_wifi_cb+0x360>)
   2036e:	47a0      	blx	r4
   20370:	4b74      	ldr	r3, [pc, #464]	; (20544 <m2m_wifi_cb+0x368>)
   20372:	0018      	movs	r0, r3
   20374:	4b71      	ldr	r3, [pc, #452]	; (2053c <m2m_wifi_cb+0x360>)
   20376:	4798      	blx	r3
			if (gpfAppWifiCb)
   20378:	4b6d      	ldr	r3, [pc, #436]	; (20530 <m2m_wifi_cb+0x354>)
   2037a:	681b      	ldr	r3, [r3, #0]
   2037c:	2b00      	cmp	r3, #0
   2037e:	d100      	bne.n	20382 <m2m_wifi_cb+0x1a6>
   20380:	e0f9      	b.n	20576 <m2m_wifi_cb+0x39a>
				gpfAppWifiCb(M2M_WIFI_RESP_IP_CONFLICT, NULL);
   20382:	4b6b      	ldr	r3, [pc, #428]	; (20530 <m2m_wifi_cb+0x354>)
   20384:	681b      	ldr	r3, [r3, #0]
   20386:	2100      	movs	r1, #0
   20388:	2034      	movs	r0, #52	; 0x34
   2038a:	4798      	blx	r3
}
   2038c:	e0f3      	b.n	20576 <m2m_wifi_cb+0x39a>
	else if (u8OpCode == M2M_WIFI_RESP_SCAN_DONE)
   2038e:	1dfb      	adds	r3, r7, #7
   20390:	781b      	ldrb	r3, [r3, #0]
   20392:	2b11      	cmp	r3, #17
   20394:	d11e      	bne.n	203d4 <m2m_wifi_cb+0x1f8>
		gu8scanInProgress = 0;
   20396:	4b6c      	ldr	r3, [pc, #432]	; (20548 <m2m_wifi_cb+0x36c>)
   20398:	2200      	movs	r2, #0
   2039a:	701a      	strb	r2, [r3, #0]
		if(hif_receive(u32Addr, (uint8*)&strState, sizeof(tstrM2mScanDone), 0) == M2M_SUCCESS)
   2039c:	237c      	movs	r3, #124	; 0x7c
   2039e:	18f9      	adds	r1, r7, r3
   203a0:	6838      	ldr	r0, [r7, #0]
   203a2:	2300      	movs	r3, #0
   203a4:	2204      	movs	r2, #4
   203a6:	4c61      	ldr	r4, [pc, #388]	; (2052c <m2m_wifi_cb+0x350>)
   203a8:	47a0      	blx	r4
   203aa:	1e03      	subs	r3, r0, #0
   203ac:	d000      	beq.n	203b0 <m2m_wifi_cb+0x1d4>
   203ae:	e0e2      	b.n	20576 <m2m_wifi_cb+0x39a>
			gu8ChNum = strState.u8NumofCh;
   203b0:	237c      	movs	r3, #124	; 0x7c
   203b2:	18fb      	adds	r3, r7, r3
   203b4:	781a      	ldrb	r2, [r3, #0]
   203b6:	4b65      	ldr	r3, [pc, #404]	; (2054c <m2m_wifi_cb+0x370>)
   203b8:	701a      	strb	r2, [r3, #0]
			if (gpfAppWifiCb)
   203ba:	4b5d      	ldr	r3, [pc, #372]	; (20530 <m2m_wifi_cb+0x354>)
   203bc:	681b      	ldr	r3, [r3, #0]
   203be:	2b00      	cmp	r3, #0
   203c0:	d100      	bne.n	203c4 <m2m_wifi_cb+0x1e8>
   203c2:	e0d8      	b.n	20576 <m2m_wifi_cb+0x39a>
				gpfAppWifiCb(M2M_WIFI_RESP_SCAN_DONE, &strState);
   203c4:	4b5a      	ldr	r3, [pc, #360]	; (20530 <m2m_wifi_cb+0x354>)
   203c6:	681b      	ldr	r3, [r3, #0]
   203c8:	227c      	movs	r2, #124	; 0x7c
   203ca:	18ba      	adds	r2, r7, r2
   203cc:	0011      	movs	r1, r2
   203ce:	2011      	movs	r0, #17
   203d0:	4798      	blx	r3
}
   203d2:	e0d0      	b.n	20576 <m2m_wifi_cb+0x39a>
	else if (u8OpCode == M2M_WIFI_RESP_SCAN_RESULT)
   203d4:	1dfb      	adds	r3, r7, #7
   203d6:	781b      	ldrb	r3, [r3, #0]
   203d8:	2b13      	cmp	r3, #19
   203da:	d116      	bne.n	2040a <m2m_wifi_cb+0x22e>
		if(hif_receive(u32Addr, (uint8*)&strScanResult, sizeof(tstrM2mWifiscanResult), 0) == M2M_SUCCESS)
   203dc:	230c      	movs	r3, #12
   203de:	18f9      	adds	r1, r7, r3
   203e0:	6838      	ldr	r0, [r7, #0]
   203e2:	2300      	movs	r3, #0
   203e4:	222c      	movs	r2, #44	; 0x2c
   203e6:	4c51      	ldr	r4, [pc, #324]	; (2052c <m2m_wifi_cb+0x350>)
   203e8:	47a0      	blx	r4
   203ea:	1e03      	subs	r3, r0, #0
   203ec:	d000      	beq.n	203f0 <m2m_wifi_cb+0x214>
   203ee:	e0c2      	b.n	20576 <m2m_wifi_cb+0x39a>
			if (gpfAppWifiCb)
   203f0:	4b4f      	ldr	r3, [pc, #316]	; (20530 <m2m_wifi_cb+0x354>)
   203f2:	681b      	ldr	r3, [r3, #0]
   203f4:	2b00      	cmp	r3, #0
   203f6:	d100      	bne.n	203fa <m2m_wifi_cb+0x21e>
   203f8:	e0bd      	b.n	20576 <m2m_wifi_cb+0x39a>
				gpfAppWifiCb(M2M_WIFI_RESP_SCAN_RESULT, &strScanResult);
   203fa:	4b4d      	ldr	r3, [pc, #308]	; (20530 <m2m_wifi_cb+0x354>)
   203fc:	681b      	ldr	r3, [r3, #0]
   203fe:	220c      	movs	r2, #12
   20400:	18ba      	adds	r2, r7, r2
   20402:	0011      	movs	r1, r2
   20404:	2013      	movs	r0, #19
   20406:	4798      	blx	r3
}
   20408:	e0b5      	b.n	20576 <m2m_wifi_cb+0x39a>
	else if (u8OpCode == M2M_WIFI_RESP_CURRENT_RSSI)
   2040a:	1dfb      	adds	r3, r7, #7
   2040c:	781b      	ldrb	r3, [r3, #0]
   2040e:	2b04      	cmp	r3, #4
   20410:	d116      	bne.n	20440 <m2m_wifi_cb+0x264>
		if (hif_receive(u32Addr, rx_buf, 4, 0) == M2M_SUCCESS)
   20412:	23a8      	movs	r3, #168	; 0xa8
   20414:	18f9      	adds	r1, r7, r3
   20416:	6838      	ldr	r0, [r7, #0]
   20418:	2300      	movs	r3, #0
   2041a:	2204      	movs	r2, #4
   2041c:	4c43      	ldr	r4, [pc, #268]	; (2052c <m2m_wifi_cb+0x350>)
   2041e:	47a0      	blx	r4
   20420:	1e03      	subs	r3, r0, #0
   20422:	d000      	beq.n	20426 <m2m_wifi_cb+0x24a>
   20424:	e0a7      	b.n	20576 <m2m_wifi_cb+0x39a>
			if (gpfAppWifiCb)
   20426:	4b42      	ldr	r3, [pc, #264]	; (20530 <m2m_wifi_cb+0x354>)
   20428:	681b      	ldr	r3, [r3, #0]
   2042a:	2b00      	cmp	r3, #0
   2042c:	d100      	bne.n	20430 <m2m_wifi_cb+0x254>
   2042e:	e0a2      	b.n	20576 <m2m_wifi_cb+0x39a>
				gpfAppWifiCb(M2M_WIFI_RESP_CURRENT_RSSI, rx_buf);
   20430:	4b3f      	ldr	r3, [pc, #252]	; (20530 <m2m_wifi_cb+0x354>)
   20432:	681b      	ldr	r3, [r3, #0]
   20434:	22a8      	movs	r2, #168	; 0xa8
   20436:	18ba      	adds	r2, r7, r2
   20438:	0011      	movs	r1, r2
   2043a:	2004      	movs	r0, #4
   2043c:	4798      	blx	r3
}
   2043e:	e09a      	b.n	20576 <m2m_wifi_cb+0x39a>
	else if (u8OpCode == M2M_WIFI_RESP_CLIENT_INFO)
   20440:	1dfb      	adds	r3, r7, #7
   20442:	781b      	ldrb	r3, [r3, #0]
   20444:	2b65      	cmp	r3, #101	; 0x65
   20446:	d116      	bne.n	20476 <m2m_wifi_cb+0x29a>
		if (hif_receive(u32Addr, rx_buf, 4, 0) == M2M_SUCCESS)
   20448:	23a8      	movs	r3, #168	; 0xa8
   2044a:	18f9      	adds	r1, r7, r3
   2044c:	6838      	ldr	r0, [r7, #0]
   2044e:	2300      	movs	r3, #0
   20450:	2204      	movs	r2, #4
   20452:	4c36      	ldr	r4, [pc, #216]	; (2052c <m2m_wifi_cb+0x350>)
   20454:	47a0      	blx	r4
   20456:	1e03      	subs	r3, r0, #0
   20458:	d000      	beq.n	2045c <m2m_wifi_cb+0x280>
   2045a:	e08c      	b.n	20576 <m2m_wifi_cb+0x39a>
			if (gpfAppWifiCb)
   2045c:	4b34      	ldr	r3, [pc, #208]	; (20530 <m2m_wifi_cb+0x354>)
   2045e:	681b      	ldr	r3, [r3, #0]
   20460:	2b00      	cmp	r3, #0
   20462:	d100      	bne.n	20466 <m2m_wifi_cb+0x28a>
   20464:	e087      	b.n	20576 <m2m_wifi_cb+0x39a>
				gpfAppWifiCb(M2M_WIFI_RESP_CLIENT_INFO, rx_buf);
   20466:	4b32      	ldr	r3, [pc, #200]	; (20530 <m2m_wifi_cb+0x354>)
   20468:	681b      	ldr	r3, [r3, #0]
   2046a:	22a8      	movs	r2, #168	; 0xa8
   2046c:	18ba      	adds	r2, r7, r2
   2046e:	0011      	movs	r1, r2
   20470:	2065      	movs	r0, #101	; 0x65
   20472:	4798      	blx	r3
}
   20474:	e07f      	b.n	20576 <m2m_wifi_cb+0x39a>
	else if(u8OpCode == M2M_WIFI_RESP_PROVISION_INFO)
   20476:	1dfb      	adds	r3, r7, #7
   20478:	781b      	ldrb	r3, [r3, #0]
   2047a:	2b09      	cmp	r3, #9
   2047c:	d116      	bne.n	204ac <m2m_wifi_cb+0x2d0>
		if(hif_receive(u32Addr, (uint8*)&strProvInfo, sizeof(tstrM2MProvisionInfo), 1) == M2M_SUCCESS)
   2047e:	230c      	movs	r3, #12
   20480:	18f9      	adds	r1, r7, r3
   20482:	6838      	ldr	r0, [r7, #0]
   20484:	2301      	movs	r3, #1
   20486:	2264      	movs	r2, #100	; 0x64
   20488:	4c28      	ldr	r4, [pc, #160]	; (2052c <m2m_wifi_cb+0x350>)
   2048a:	47a0      	blx	r4
   2048c:	1e03      	subs	r3, r0, #0
   2048e:	d000      	beq.n	20492 <m2m_wifi_cb+0x2b6>
   20490:	e071      	b.n	20576 <m2m_wifi_cb+0x39a>
			if(gpfAppWifiCb)
   20492:	4b27      	ldr	r3, [pc, #156]	; (20530 <m2m_wifi_cb+0x354>)
   20494:	681b      	ldr	r3, [r3, #0]
   20496:	2b00      	cmp	r3, #0
   20498:	d100      	bne.n	2049c <m2m_wifi_cb+0x2c0>
   2049a:	e06c      	b.n	20576 <m2m_wifi_cb+0x39a>
				gpfAppWifiCb(M2M_WIFI_RESP_PROVISION_INFO, &strProvInfo);
   2049c:	4b24      	ldr	r3, [pc, #144]	; (20530 <m2m_wifi_cb+0x354>)
   2049e:	681b      	ldr	r3, [r3, #0]
   204a0:	220c      	movs	r2, #12
   204a2:	18ba      	adds	r2, r7, r2
   204a4:	0011      	movs	r1, r2
   204a6:	2009      	movs	r0, #9
   204a8:	4798      	blx	r3
}
   204aa:	e064      	b.n	20576 <m2m_wifi_cb+0x39a>
	else if(u8OpCode == M2M_WIFI_RESP_DEFAULT_CONNECT)
   204ac:	1dfb      	adds	r3, r7, #7
   204ae:	781b      	ldrb	r3, [r3, #0]
   204b0:	2b2a      	cmp	r3, #42	; 0x2a
   204b2:	d114      	bne.n	204de <m2m_wifi_cb+0x302>
		if(hif_receive(u32Addr, (uint8*)&strResp, sizeof(tstrM2MDefaultConnResp), 1) == M2M_SUCCESS)
   204b4:	2378      	movs	r3, #120	; 0x78
   204b6:	18f9      	adds	r1, r7, r3
   204b8:	6838      	ldr	r0, [r7, #0]
   204ba:	2301      	movs	r3, #1
   204bc:	2204      	movs	r2, #4
   204be:	4c1b      	ldr	r4, [pc, #108]	; (2052c <m2m_wifi_cb+0x350>)
   204c0:	47a0      	blx	r4
   204c2:	1e03      	subs	r3, r0, #0
   204c4:	d157      	bne.n	20576 <m2m_wifi_cb+0x39a>
			if(gpfAppWifiCb)
   204c6:	4b1a      	ldr	r3, [pc, #104]	; (20530 <m2m_wifi_cb+0x354>)
   204c8:	681b      	ldr	r3, [r3, #0]
   204ca:	2b00      	cmp	r3, #0
   204cc:	d053      	beq.n	20576 <m2m_wifi_cb+0x39a>
				gpfAppWifiCb(M2M_WIFI_RESP_DEFAULT_CONNECT, &strResp);
   204ce:	4b18      	ldr	r3, [pc, #96]	; (20530 <m2m_wifi_cb+0x354>)
   204d0:	681b      	ldr	r3, [r3, #0]
   204d2:	2278      	movs	r2, #120	; 0x78
   204d4:	18ba      	adds	r2, r7, r2
   204d6:	0011      	movs	r1, r2
   204d8:	202a      	movs	r0, #42	; 0x2a
   204da:	4798      	blx	r3
}
   204dc:	e04b      	b.n	20576 <m2m_wifi_cb+0x39a>
	else if(u8OpCode == M2M_WIFI_RESP_GET_PRNG)
   204de:	1dfb      	adds	r3, r7, #7
   204e0:	781b      	ldrb	r3, [r3, #0]
   204e2:	2b20      	cmp	r3, #32
   204e4:	d134      	bne.n	20550 <m2m_wifi_cb+0x374>
		if(hif_receive(u32Addr, (uint8*)&strPrng,sizeof(tstrPrng), 0) == M2M_SUCCESS)
   204e6:	2370      	movs	r3, #112	; 0x70
   204e8:	18f9      	adds	r1, r7, r3
   204ea:	6838      	ldr	r0, [r7, #0]
   204ec:	2300      	movs	r3, #0
   204ee:	2208      	movs	r2, #8
   204f0:	4c0e      	ldr	r4, [pc, #56]	; (2052c <m2m_wifi_cb+0x350>)
   204f2:	47a0      	blx	r4
   204f4:	1e03      	subs	r3, r0, #0
   204f6:	d13e      	bne.n	20576 <m2m_wifi_cb+0x39a>
			if(hif_receive(u32Addr + sizeof(tstrPrng),strPrng.pu8RngBuff,strPrng.u16PrngSize, 1) == M2M_SUCCESS)
   204f8:	683b      	ldr	r3, [r7, #0]
   204fa:	3308      	adds	r3, #8
   204fc:	0018      	movs	r0, r3
   204fe:	2370      	movs	r3, #112	; 0x70
   20500:	18fb      	adds	r3, r7, r3
   20502:	6819      	ldr	r1, [r3, #0]
   20504:	2370      	movs	r3, #112	; 0x70
   20506:	18fb      	adds	r3, r7, r3
   20508:	889a      	ldrh	r2, [r3, #4]
   2050a:	2301      	movs	r3, #1
   2050c:	4c07      	ldr	r4, [pc, #28]	; (2052c <m2m_wifi_cb+0x350>)
   2050e:	47a0      	blx	r4
   20510:	1e03      	subs	r3, r0, #0
   20512:	d130      	bne.n	20576 <m2m_wifi_cb+0x39a>
				if(gpfAppWifiCb)
   20514:	4b06      	ldr	r3, [pc, #24]	; (20530 <m2m_wifi_cb+0x354>)
   20516:	681b      	ldr	r3, [r3, #0]
   20518:	2b00      	cmp	r3, #0
   2051a:	d02c      	beq.n	20576 <m2m_wifi_cb+0x39a>
					gpfAppWifiCb(M2M_WIFI_RESP_GET_PRNG,&strPrng);
   2051c:	4b04      	ldr	r3, [pc, #16]	; (20530 <m2m_wifi_cb+0x354>)
   2051e:	681b      	ldr	r3, [r3, #0]
   20520:	2270      	movs	r2, #112	; 0x70
   20522:	18ba      	adds	r2, r7, r2
   20524:	0011      	movs	r1, r2
   20526:	2020      	movs	r0, #32
   20528:	4798      	blx	r3
}
   2052a:	e024      	b.n	20576 <m2m_wifi_cb+0x39a>
   2052c:	0001ffa1 	.word	0x0001ffa1
   20530:	20003d44 	.word	0x20003d44
   20534:	0001f425 	.word	0x0001f425
   20538:	00036b30 	.word	0x00036b30
   2053c:	0001c65d 	.word	0x0001c65d
   20540:	00036b3c 	.word	0x00036b3c
   20544:	00036b5c 	.word	0x00036b5c
   20548:	20003d41 	.word	0x20003d41
   2054c:	20003d40 	.word	0x20003d40
		M2M_ERR("REQ Not defined %d\n",u8OpCode);
   20550:	2324      	movs	r3, #36	; 0x24
   20552:	33ff      	adds	r3, #255	; 0xff
   20554:	001a      	movs	r2, r3
   20556:	490a      	ldr	r1, [pc, #40]	; (20580 <m2m_wifi_cb+0x3a4>)
   20558:	4b0a      	ldr	r3, [pc, #40]	; (20584 <m2m_wifi_cb+0x3a8>)
   2055a:	0018      	movs	r0, r3
   2055c:	4b0a      	ldr	r3, [pc, #40]	; (20588 <m2m_wifi_cb+0x3ac>)
   2055e:	4798      	blx	r3
   20560:	1dfb      	adds	r3, r7, #7
   20562:	781a      	ldrb	r2, [r3, #0]
   20564:	4b09      	ldr	r3, [pc, #36]	; (2058c <m2m_wifi_cb+0x3b0>)
   20566:	0011      	movs	r1, r2
   20568:	0018      	movs	r0, r3
   2056a:	4b07      	ldr	r3, [pc, #28]	; (20588 <m2m_wifi_cb+0x3ac>)
   2056c:	4798      	blx	r3
   2056e:	4b08      	ldr	r3, [pc, #32]	; (20590 <m2m_wifi_cb+0x3b4>)
   20570:	0018      	movs	r0, r3
   20572:	4b05      	ldr	r3, [pc, #20]	; (20588 <m2m_wifi_cb+0x3ac>)
   20574:	4798      	blx	r3
}
   20576:	46c0      	nop			; (mov r8, r8)
   20578:	46bd      	mov	sp, r7
   2057a:	b02d      	add	sp, #180	; 0xb4
   2057c:	bd90      	pop	{r4, r7, pc}
   2057e:	46c0      	nop			; (mov r8, r8)
   20580:	00036efc 	.word	0x00036efc
   20584:	00036b60 	.word	0x00036b60
   20588:	0001c65d 	.word	0x0001c65d
   2058c:	00036b74 	.word	0x00036b74
   20590:	00036b5c 	.word	0x00036b5c

00020594 <m2m_wifi_init>:
	s8Ret = hif_send(M2M_REQ_GROUP_SSL, M2M_SSL_IND_CRL|M2M_REQ_DATA_PKT, NULL, 0, (uint8*)pCRL, sizeof(tstrTlsCrlInfo), 0);
	return s8Ret;
}

sint8 m2m_wifi_init(tstrWifiInitParam * param)
{
   20594:	b590      	push	{r4, r7, lr}
   20596:	b091      	sub	sp, #68	; 0x44
   20598:	af02      	add	r7, sp, #8
   2059a:	6078      	str	r0, [r7, #4]
	tstrM2mRev strtmp;
	sint8 ret = M2M_SUCCESS;
   2059c:	2337      	movs	r3, #55	; 0x37
   2059e:	18fb      	adds	r3, r7, r3
   205a0:	2200      	movs	r2, #0
   205a2:	701a      	strb	r2, [r3, #0]
	uint8 u8WifiMode = M2M_WIFI_MODE_NORMAL;
   205a4:	230b      	movs	r3, #11
   205a6:	18fb      	adds	r3, r7, r3
   205a8:	2201      	movs	r2, #1
   205aa:	701a      	strb	r2, [r3, #0]
	
	if(param == NULL) {
   205ac:	687b      	ldr	r3, [r7, #4]
   205ae:	2b00      	cmp	r3, #0
   205b0:	d104      	bne.n	205bc <m2m_wifi_init+0x28>
		ret = M2M_ERR_FAIL;
   205b2:	2337      	movs	r3, #55	; 0x37
   205b4:	18fb      	adds	r3, r7, r3
   205b6:	22f4      	movs	r2, #244	; 0xf4
   205b8:	701a      	strb	r2, [r3, #0]
		goto _EXIT0;
   205ba:	e0b3      	b.n	20724 <m2m_wifi_init+0x190>
	}
	
	gpfAppWifiCb = param->pfAppWifiCb;
   205bc:	687b      	ldr	r3, [r7, #4]
   205be:	681a      	ldr	r2, [r3, #0]
   205c0:	4b5c      	ldr	r3, [pc, #368]	; (20734 <m2m_wifi_init+0x1a0>)
   205c2:	601a      	str	r2, [r3, #0]
#endif /* ETH_MODE */

#ifdef CONF_MGMT
	gpfAppMonCb  = param->pfAppMonCb;
#endif
	gu8scanInProgress = 0;
   205c4:	4b5c      	ldr	r3, [pc, #368]	; (20738 <m2m_wifi_init+0x1a4>)
   205c6:	2200      	movs	r2, #0
   205c8:	701a      	strb	r2, [r3, #0]
	/* Apply device specific initialization. */
	ret = nm_drv_init(&u8WifiMode);
   205ca:	2337      	movs	r3, #55	; 0x37
   205cc:	18fc      	adds	r4, r7, r3
   205ce:	230b      	movs	r3, #11
   205d0:	18fb      	adds	r3, r7, r3
   205d2:	0018      	movs	r0, r3
   205d4:	4b59      	ldr	r3, [pc, #356]	; (2073c <m2m_wifi_init+0x1a8>)
   205d6:	4798      	blx	r3
   205d8:	0003      	movs	r3, r0
   205da:	7023      	strb	r3, [r4, #0]
	if(ret != M2M_SUCCESS) 	goto _EXIT0;
   205dc:	2337      	movs	r3, #55	; 0x37
   205de:	18fb      	adds	r3, r7, r3
   205e0:	781b      	ldrb	r3, [r3, #0]
   205e2:	b25b      	sxtb	r3, r3
   205e4:	2b00      	cmp	r3, #0
   205e6:	d000      	beq.n	205ea <m2m_wifi_init+0x56>
   205e8:	e099      	b.n	2071e <m2m_wifi_init+0x18a>
	/* Initialize host interface module */
	ret = hif_init(NULL);
   205ea:	2337      	movs	r3, #55	; 0x37
   205ec:	18fc      	adds	r4, r7, r3
   205ee:	2000      	movs	r0, #0
   205f0:	4b53      	ldr	r3, [pc, #332]	; (20740 <m2m_wifi_init+0x1ac>)
   205f2:	4798      	blx	r3
   205f4:	0003      	movs	r3, r0
   205f6:	7023      	strb	r3, [r4, #0]
	if(ret != M2M_SUCCESS) 	goto _EXIT1;
   205f8:	2337      	movs	r3, #55	; 0x37
   205fa:	18fb      	adds	r3, r7, r3
   205fc:	781b      	ldrb	r3, [r3, #0]
   205fe:	b25b      	sxtb	r3, r3
   20600:	2b00      	cmp	r3, #0
   20602:	d000      	beq.n	20606 <m2m_wifi_init+0x72>
   20604:	e086      	b.n	20714 <m2m_wifi_init+0x180>

	hif_register_cb(M2M_REQ_GROUP_WIFI,m2m_wifi_cb);
   20606:	4b4f      	ldr	r3, [pc, #316]	; (20744 <m2m_wifi_init+0x1b0>)
   20608:	0019      	movs	r1, r3
   2060a:	2001      	movs	r0, #1
   2060c:	4b4e      	ldr	r3, [pc, #312]	; (20748 <m2m_wifi_init+0x1b4>)
   2060e:	4798      	blx	r3

	ret = nm_get_firmware_full_info(&strtmp);
   20610:	2337      	movs	r3, #55	; 0x37
   20612:	18fc      	adds	r4, r7, r3
   20614:	230c      	movs	r3, #12
   20616:	18fb      	adds	r3, r7, r3
   20618:	0018      	movs	r0, r3
   2061a:	4b4c      	ldr	r3, [pc, #304]	; (2074c <m2m_wifi_init+0x1b8>)
   2061c:	4798      	blx	r3
   2061e:	0003      	movs	r3, r0
   20620:	7023      	strb	r3, [r4, #0]

	M2M_INFO("Firmware ver   : %u.%u.%u Svnrev %u\n", strtmp.u8FirmwareMajor, strtmp.u8FirmwareMinor, strtmp.u8FirmwarePatch,strtmp.u16FirmwareSvnNum);
   20622:	4b4b      	ldr	r3, [pc, #300]	; (20750 <m2m_wifi_init+0x1bc>)
   20624:	0018      	movs	r0, r3
   20626:	4b4b      	ldr	r3, [pc, #300]	; (20754 <m2m_wifi_init+0x1c0>)
   20628:	4798      	blx	r3
   2062a:	230c      	movs	r3, #12
   2062c:	18fb      	adds	r3, r7, r3
   2062e:	791b      	ldrb	r3, [r3, #4]
   20630:	0019      	movs	r1, r3
   20632:	230c      	movs	r3, #12
   20634:	18fb      	adds	r3, r7, r3
   20636:	795b      	ldrb	r3, [r3, #5]
   20638:	001a      	movs	r2, r3
   2063a:	230c      	movs	r3, #12
   2063c:	18fb      	adds	r3, r7, r3
   2063e:	799b      	ldrb	r3, [r3, #6]
   20640:	001c      	movs	r4, r3
   20642:	230c      	movs	r3, #12
   20644:	18fb      	adds	r3, r7, r3
   20646:	8c1b      	ldrh	r3, [r3, #32]
   20648:	4843      	ldr	r0, [pc, #268]	; (20758 <m2m_wifi_init+0x1c4>)
   2064a:	9300      	str	r3, [sp, #0]
   2064c:	0023      	movs	r3, r4
   2064e:	4c41      	ldr	r4, [pc, #260]	; (20754 <m2m_wifi_init+0x1c0>)
   20650:	47a0      	blx	r4
   20652:	4b42      	ldr	r3, [pc, #264]	; (2075c <m2m_wifi_init+0x1c8>)
   20654:	0018      	movs	r0, r3
   20656:	4b3f      	ldr	r3, [pc, #252]	; (20754 <m2m_wifi_init+0x1c0>)
   20658:	4798      	blx	r3
	M2M_INFO("Firmware Build %s Time %s\n",strtmp.BuildDate,strtmp.BuildTime);
   2065a:	4b3d      	ldr	r3, [pc, #244]	; (20750 <m2m_wifi_init+0x1bc>)
   2065c:	0018      	movs	r0, r3
   2065e:	4b3d      	ldr	r3, [pc, #244]	; (20754 <m2m_wifi_init+0x1c0>)
   20660:	4798      	blx	r3
   20662:	230c      	movs	r3, #12
   20664:	18fb      	adds	r3, r7, r3
   20666:	3316      	adds	r3, #22
   20668:	001a      	movs	r2, r3
   2066a:	230c      	movs	r3, #12
   2066c:	18fb      	adds	r3, r7, r3
   2066e:	330a      	adds	r3, #10
   20670:	0019      	movs	r1, r3
   20672:	4b3b      	ldr	r3, [pc, #236]	; (20760 <m2m_wifi_init+0x1cc>)
   20674:	0018      	movs	r0, r3
   20676:	4b37      	ldr	r3, [pc, #220]	; (20754 <m2m_wifi_init+0x1c0>)
   20678:	4798      	blx	r3
   2067a:	4b38      	ldr	r3, [pc, #224]	; (2075c <m2m_wifi_init+0x1c8>)
   2067c:	0018      	movs	r0, r3
   2067e:	4b35      	ldr	r3, [pc, #212]	; (20754 <m2m_wifi_init+0x1c0>)
   20680:	4798      	blx	r3
	M2M_INFO("Firmware Min driver ver : %u.%u.%u\n", strtmp.u8DriverMajor, strtmp.u8DriverMinor, strtmp.u8DriverPatch);
   20682:	4b33      	ldr	r3, [pc, #204]	; (20750 <m2m_wifi_init+0x1bc>)
   20684:	0018      	movs	r0, r3
   20686:	4b33      	ldr	r3, [pc, #204]	; (20754 <m2m_wifi_init+0x1c0>)
   20688:	4798      	blx	r3
   2068a:	230c      	movs	r3, #12
   2068c:	18fb      	adds	r3, r7, r3
   2068e:	79db      	ldrb	r3, [r3, #7]
   20690:	0019      	movs	r1, r3
   20692:	230c      	movs	r3, #12
   20694:	18fb      	adds	r3, r7, r3
   20696:	7a1b      	ldrb	r3, [r3, #8]
   20698:	001a      	movs	r2, r3
   2069a:	230c      	movs	r3, #12
   2069c:	18fb      	adds	r3, r7, r3
   2069e:	7a5b      	ldrb	r3, [r3, #9]
   206a0:	4830      	ldr	r0, [pc, #192]	; (20764 <m2m_wifi_init+0x1d0>)
   206a2:	4c2c      	ldr	r4, [pc, #176]	; (20754 <m2m_wifi_init+0x1c0>)
   206a4:	47a0      	blx	r4
   206a6:	4b2d      	ldr	r3, [pc, #180]	; (2075c <m2m_wifi_init+0x1c8>)
   206a8:	0018      	movs	r0, r3
   206aa:	4b2a      	ldr	r3, [pc, #168]	; (20754 <m2m_wifi_init+0x1c0>)
   206ac:	4798      	blx	r3
	M2M_INFO("Driver ver: %u.%u.%u\n", M2M_RELEASE_VERSION_MAJOR_NO, M2M_RELEASE_VERSION_MINOR_NO, M2M_RELEASE_VERSION_PATCH_NO);
   206ae:	4b28      	ldr	r3, [pc, #160]	; (20750 <m2m_wifi_init+0x1bc>)
   206b0:	0018      	movs	r0, r3
   206b2:	4b28      	ldr	r3, [pc, #160]	; (20754 <m2m_wifi_init+0x1c0>)
   206b4:	4798      	blx	r3
   206b6:	482c      	ldr	r0, [pc, #176]	; (20768 <m2m_wifi_init+0x1d4>)
   206b8:	2304      	movs	r3, #4
   206ba:	2205      	movs	r2, #5
   206bc:	2113      	movs	r1, #19
   206be:	4c25      	ldr	r4, [pc, #148]	; (20754 <m2m_wifi_init+0x1c0>)
   206c0:	47a0      	blx	r4
   206c2:	4b26      	ldr	r3, [pc, #152]	; (2075c <m2m_wifi_init+0x1c8>)
   206c4:	0018      	movs	r0, r3
   206c6:	4b23      	ldr	r3, [pc, #140]	; (20754 <m2m_wifi_init+0x1c0>)
   206c8:	4798      	blx	r3
	M2M_INFO("Driver built at %s\t%s\n",__DATE__,__TIME__);
   206ca:	4b21      	ldr	r3, [pc, #132]	; (20750 <m2m_wifi_init+0x1bc>)
   206cc:	0018      	movs	r0, r3
   206ce:	4b21      	ldr	r3, [pc, #132]	; (20754 <m2m_wifi_init+0x1c0>)
   206d0:	4798      	blx	r3
   206d2:	4a26      	ldr	r2, [pc, #152]	; (2076c <m2m_wifi_init+0x1d8>)
   206d4:	4926      	ldr	r1, [pc, #152]	; (20770 <m2m_wifi_init+0x1dc>)
   206d6:	4b27      	ldr	r3, [pc, #156]	; (20774 <m2m_wifi_init+0x1e0>)
   206d8:	0018      	movs	r0, r3
   206da:	4b1e      	ldr	r3, [pc, #120]	; (20754 <m2m_wifi_init+0x1c0>)
   206dc:	4798      	blx	r3
   206de:	4b1f      	ldr	r3, [pc, #124]	; (2075c <m2m_wifi_init+0x1c8>)
   206e0:	0018      	movs	r0, r3
   206e2:	4b1c      	ldr	r3, [pc, #112]	; (20754 <m2m_wifi_init+0x1c0>)
   206e4:	4798      	blx	r3
	if(M2M_ERR_FW_VER_MISMATCH == ret)
   206e6:	2337      	movs	r3, #55	; 0x37
   206e8:	18fb      	adds	r3, r7, r3
   206ea:	781b      	ldrb	r3, [r3, #0]
   206ec:	b25b      	sxtb	r3, r3
   206ee:	330d      	adds	r3, #13
   206f0:	d117      	bne.n	20722 <m2m_wifi_init+0x18e>
	{
		M2M_ERR("Mismatch Firmawre Version\n");
   206f2:	23e8      	movs	r3, #232	; 0xe8
   206f4:	33ff      	adds	r3, #255	; 0xff
   206f6:	001a      	movs	r2, r3
   206f8:	491f      	ldr	r1, [pc, #124]	; (20778 <m2m_wifi_init+0x1e4>)
   206fa:	4b20      	ldr	r3, [pc, #128]	; (2077c <m2m_wifi_init+0x1e8>)
   206fc:	0018      	movs	r0, r3
   206fe:	4b15      	ldr	r3, [pc, #84]	; (20754 <m2m_wifi_init+0x1c0>)
   20700:	4798      	blx	r3
   20702:	4b1f      	ldr	r3, [pc, #124]	; (20780 <m2m_wifi_init+0x1ec>)
   20704:	0018      	movs	r0, r3
   20706:	4b13      	ldr	r3, [pc, #76]	; (20754 <m2m_wifi_init+0x1c0>)
   20708:	4798      	blx	r3
   2070a:	4b14      	ldr	r3, [pc, #80]	; (2075c <m2m_wifi_init+0x1c8>)
   2070c:	0018      	movs	r0, r3
   2070e:	4b11      	ldr	r3, [pc, #68]	; (20754 <m2m_wifi_init+0x1c0>)
   20710:	4798      	blx	r3
	}

	goto _EXIT0;
   20712:	e006      	b.n	20722 <m2m_wifi_init+0x18e>
	if(ret != M2M_SUCCESS) 	goto _EXIT1;
   20714:	46c0      	nop			; (mov r8, r8)

_EXIT1:
	nm_drv_deinit(NULL);
   20716:	2000      	movs	r0, #0
   20718:	4b1a      	ldr	r3, [pc, #104]	; (20784 <m2m_wifi_init+0x1f0>)
   2071a:	4798      	blx	r3
   2071c:	e002      	b.n	20724 <m2m_wifi_init+0x190>
	if(ret != M2M_SUCCESS) 	goto _EXIT0;
   2071e:	46c0      	nop			; (mov r8, r8)
   20720:	e000      	b.n	20724 <m2m_wifi_init+0x190>
	goto _EXIT0;
   20722:	46c0      	nop			; (mov r8, r8)
_EXIT0:
	return ret;
   20724:	2337      	movs	r3, #55	; 0x37
   20726:	18fb      	adds	r3, r7, r3
   20728:	781b      	ldrb	r3, [r3, #0]
   2072a:	b25b      	sxtb	r3, r3
}
   2072c:	0018      	movs	r0, r3
   2072e:	46bd      	mov	sp, r7
   20730:	b00f      	add	sp, #60	; 0x3c
   20732:	bd90      	pop	{r4, r7, pc}
   20734:	20003d44 	.word	0x20003d44
   20738:	20003d41 	.word	0x20003d41
   2073c:	000218b9 	.word	0x000218b9
   20740:	0001f63d 	.word	0x0001f63d
   20744:	000201dd 	.word	0x000201dd
   20748:	00020121 	.word	0x00020121
   2074c:	000216ed 	.word	0x000216ed
   20750:	00036b30 	.word	0x00036b30
   20754:	0001c65d 	.word	0x0001c65d
   20758:	00036cd4 	.word	0x00036cd4
   2075c:	00036b5c 	.word	0x00036b5c
   20760:	00036cfc 	.word	0x00036cfc
   20764:	00036d18 	.word	0x00036d18
   20768:	00036d3c 	.word	0x00036d3c
   2076c:	00036d54 	.word	0x00036d54
   20770:	00036d60 	.word	0x00036d60
   20774:	00036d6c 	.word	0x00036d6c
   20778:	00036f08 	.word	0x00036f08
   2077c:	00036b60 	.word	0x00036b60
   20780:	00036d84 	.word	0x00036d84
   20784:	00021a49 	.word	0x00021a49

00020788 <m2m_wifi_handle_events>:
{
	hif_yield();
}

sint8 m2m_wifi_handle_events(void * arg)
{
   20788:	b580      	push	{r7, lr}
   2078a:	b082      	sub	sp, #8
   2078c:	af00      	add	r7, sp, #0
   2078e:	6078      	str	r0, [r7, #4]
	return hif_handle_isr();
   20790:	4b03      	ldr	r3, [pc, #12]	; (207a0 <m2m_wifi_handle_events+0x18>)
   20792:	4798      	blx	r3
   20794:	0003      	movs	r3, r0
}
   20796:	0018      	movs	r0, r3
   20798:	46bd      	mov	sp, r7
   2079a:	b002      	add	sp, #8
   2079c:	bd80      	pop	{r7, pc}
   2079e:	46c0      	nop			; (mov r8, r8)
   207a0:	0001ff01 	.word	0x0001ff01

000207a4 <m2m_wifi_connect>:
{
	return hif_send(M2M_REQ_GROUP_WIFI, M2M_WIFI_REQ_DEFAULT_CONNECT, NULL, 0,NULL, 0,0);
}

sint8 m2m_wifi_connect(char *pcSsid, uint8 u8SsidLen, uint8 u8SecType, void *pvAuthInfo, uint16 u16Ch)
{
   207a4:	b590      	push	{r4, r7, lr}
   207a6:	b087      	sub	sp, #28
   207a8:	af02      	add	r7, sp, #8
   207aa:	60f8      	str	r0, [r7, #12]
   207ac:	0008      	movs	r0, r1
   207ae:	0011      	movs	r1, r2
   207b0:	607b      	str	r3, [r7, #4]
   207b2:	230b      	movs	r3, #11
   207b4:	18fb      	adds	r3, r7, r3
   207b6:	1c02      	adds	r2, r0, #0
   207b8:	701a      	strb	r2, [r3, #0]
   207ba:	230a      	movs	r3, #10
   207bc:	18fb      	adds	r3, r7, r3
   207be:	1c0a      	adds	r2, r1, #0
   207c0:	701a      	strb	r2, [r3, #0]
	return m2m_wifi_connect_sc(pcSsid, u8SsidLen, u8SecType, pvAuthInfo,  u16Ch,0);
   207c2:	687c      	ldr	r4, [r7, #4]
   207c4:	230a      	movs	r3, #10
   207c6:	18fb      	adds	r3, r7, r3
   207c8:	781a      	ldrb	r2, [r3, #0]
   207ca:	230b      	movs	r3, #11
   207cc:	18fb      	adds	r3, r7, r3
   207ce:	7819      	ldrb	r1, [r3, #0]
   207d0:	68f8      	ldr	r0, [r7, #12]
   207d2:	2300      	movs	r3, #0
   207d4:	9301      	str	r3, [sp, #4]
   207d6:	2320      	movs	r3, #32
   207d8:	18fb      	adds	r3, r7, r3
   207da:	881b      	ldrh	r3, [r3, #0]
   207dc:	9300      	str	r3, [sp, #0]
   207de:	0023      	movs	r3, r4
   207e0:	4c03      	ldr	r4, [pc, #12]	; (207f0 <m2m_wifi_connect+0x4c>)
   207e2:	47a0      	blx	r4
   207e4:	0003      	movs	r3, r0
}
   207e6:	0018      	movs	r0, r3
   207e8:	46bd      	mov	sp, r7
   207ea:	b005      	add	sp, #20
   207ec:	bd90      	pop	{r4, r7, pc}
   207ee:	46c0      	nop			; (mov r8, r8)
   207f0:	000207f5 	.word	0x000207f5

000207f4 <m2m_wifi_connect_sc>:
sint8 m2m_wifi_connect_sc(char *pcSsid, uint8 u8SsidLen, uint8 u8SecType, void *pvAuthInfo, uint16 u16Ch, uint8 u8NoSaveCred)
{
   207f4:	b5b0      	push	{r4, r5, r7, lr}
   207f6:	b0aa      	sub	sp, #168	; 0xa8
   207f8:	af04      	add	r7, sp, #16
   207fa:	60f8      	str	r0, [r7, #12]
   207fc:	0008      	movs	r0, r1
   207fe:	0011      	movs	r1, r2
   20800:	607b      	str	r3, [r7, #4]
   20802:	230b      	movs	r3, #11
   20804:	18fb      	adds	r3, r7, r3
   20806:	1c02      	adds	r2, r0, #0
   20808:	701a      	strb	r2, [r3, #0]
   2080a:	230a      	movs	r3, #10
   2080c:	18fb      	adds	r3, r7, r3
   2080e:	1c0a      	adds	r2, r1, #0
   20810:	701a      	strb	r2, [r3, #0]
	sint8				ret = M2M_SUCCESS;
   20812:	2397      	movs	r3, #151	; 0x97
   20814:	18fb      	adds	r3, r7, r3
   20816:	2200      	movs	r2, #0
   20818:	701a      	strb	r2, [r3, #0]
	tstrM2mWifiConnect	strConnect;
	tstrM2MWifiSecInfo	*pstrAuthInfo;

	if(u8SecType != M2M_WIFI_SEC_OPEN)
   2081a:	230a      	movs	r3, #10
   2081c:	18fb      	adds	r3, r7, r3
   2081e:	781b      	ldrb	r3, [r3, #0]
   20820:	2b01      	cmp	r3, #1
   20822:	d100      	bne.n	20826 <m2m_wifi_connect_sc+0x32>
   20824:	e085      	b.n	20932 <m2m_wifi_connect_sc+0x13e>
	{
		if(pvAuthInfo == NULL)
   20826:	687b      	ldr	r3, [r7, #4]
   20828:	2b00      	cmp	r3, #0
   2082a:	d112      	bne.n	20852 <m2m_wifi_connect_sc+0x5e>
		{
			M2M_ERR("Key is not valid\n");
   2082c:	4ad8      	ldr	r2, [pc, #864]	; (20b90 <m2m_wifi_connect_sc+0x39c>)
   2082e:	49d9      	ldr	r1, [pc, #868]	; (20b94 <m2m_wifi_connect_sc+0x3a0>)
   20830:	4bd9      	ldr	r3, [pc, #868]	; (20b98 <m2m_wifi_connect_sc+0x3a4>)
   20832:	0018      	movs	r0, r3
   20834:	4bd9      	ldr	r3, [pc, #868]	; (20b9c <m2m_wifi_connect_sc+0x3a8>)
   20836:	4798      	blx	r3
   20838:	4bd9      	ldr	r3, [pc, #868]	; (20ba0 <m2m_wifi_connect_sc+0x3ac>)
   2083a:	0018      	movs	r0, r3
   2083c:	4bd7      	ldr	r3, [pc, #860]	; (20b9c <m2m_wifi_connect_sc+0x3a8>)
   2083e:	4798      	blx	r3
   20840:	4bd8      	ldr	r3, [pc, #864]	; (20ba4 <m2m_wifi_connect_sc+0x3b0>)
   20842:	0018      	movs	r0, r3
   20844:	4bd5      	ldr	r3, [pc, #852]	; (20b9c <m2m_wifi_connect_sc+0x3a8>)
   20846:	4798      	blx	r3
			ret = M2M_ERR_FAIL;
   20848:	2397      	movs	r3, #151	; 0x97
   2084a:	18fb      	adds	r3, r7, r3
   2084c:	22f4      	movs	r2, #244	; 0xf4
   2084e:	701a      	strb	r2, [r3, #0]
			goto ERR1;
   20850:	e1f9      	b.n	20c46 <m2m_wifi_connect_sc+0x452>
		}
		if((u8SecType == M2M_WIFI_SEC_WPA_PSK) && (m2m_strlen(pvAuthInfo) == (M2M_MAX_PSK_LEN-1)))
   20852:	230a      	movs	r3, #10
   20854:	18fb      	adds	r3, r7, r3
   20856:	781b      	ldrb	r3, [r3, #0]
   20858:	2b02      	cmp	r3, #2
   2085a:	d16a      	bne.n	20932 <m2m_wifi_connect_sc+0x13e>
   2085c:	687b      	ldr	r3, [r7, #4]
   2085e:	0018      	movs	r0, r3
   20860:	4bd1      	ldr	r3, [pc, #836]	; (20ba8 <m2m_wifi_connect_sc+0x3b4>)
   20862:	4798      	blx	r3
   20864:	0003      	movs	r3, r0
   20866:	2b40      	cmp	r3, #64	; 0x40
   20868:	d163      	bne.n	20932 <m2m_wifi_connect_sc+0x13e>
		{
			uint8 i = 0;
   2086a:	2396      	movs	r3, #150	; 0x96
   2086c:	18fb      	adds	r3, r7, r3
   2086e:	2200      	movs	r2, #0
   20870:	701a      	strb	r2, [r3, #0]
			uint8* pu8Psk = (uint8*)pvAuthInfo;
   20872:	687b      	ldr	r3, [r7, #4]
   20874:	2290      	movs	r2, #144	; 0x90
   20876:	18ba      	adds	r2, r7, r2
   20878:	6013      	str	r3, [r2, #0]
			while(i < (M2M_MAX_PSK_LEN-1))
   2087a:	e055      	b.n	20928 <m2m_wifi_connect_sc+0x134>
			{
				if(pu8Psk[i]<'0' || (pu8Psk[i]>'9' && pu8Psk[i] < 'A')|| (pu8Psk[i]>'F' && pu8Psk[i] < 'a') || pu8Psk[i] > 'f')
   2087c:	2396      	movs	r3, #150	; 0x96
   2087e:	18fb      	adds	r3, r7, r3
   20880:	781b      	ldrb	r3, [r3, #0]
   20882:	2290      	movs	r2, #144	; 0x90
   20884:	18ba      	adds	r2, r7, r2
   20886:	6812      	ldr	r2, [r2, #0]
   20888:	18d3      	adds	r3, r2, r3
   2088a:	781b      	ldrb	r3, [r3, #0]
   2088c:	2b2f      	cmp	r3, #47	; 0x2f
   2088e:	d931      	bls.n	208f4 <m2m_wifi_connect_sc+0x100>
   20890:	2396      	movs	r3, #150	; 0x96
   20892:	18fb      	adds	r3, r7, r3
   20894:	781b      	ldrb	r3, [r3, #0]
   20896:	2290      	movs	r2, #144	; 0x90
   20898:	18ba      	adds	r2, r7, r2
   2089a:	6812      	ldr	r2, [r2, #0]
   2089c:	18d3      	adds	r3, r2, r3
   2089e:	781b      	ldrb	r3, [r3, #0]
   208a0:	2b39      	cmp	r3, #57	; 0x39
   208a2:	d909      	bls.n	208b8 <m2m_wifi_connect_sc+0xc4>
   208a4:	2396      	movs	r3, #150	; 0x96
   208a6:	18fb      	adds	r3, r7, r3
   208a8:	781b      	ldrb	r3, [r3, #0]
   208aa:	2290      	movs	r2, #144	; 0x90
   208ac:	18ba      	adds	r2, r7, r2
   208ae:	6812      	ldr	r2, [r2, #0]
   208b0:	18d3      	adds	r3, r2, r3
   208b2:	781b      	ldrb	r3, [r3, #0]
   208b4:	2b40      	cmp	r3, #64	; 0x40
   208b6:	d91d      	bls.n	208f4 <m2m_wifi_connect_sc+0x100>
   208b8:	2396      	movs	r3, #150	; 0x96
   208ba:	18fb      	adds	r3, r7, r3
   208bc:	781b      	ldrb	r3, [r3, #0]
   208be:	2290      	movs	r2, #144	; 0x90
   208c0:	18ba      	adds	r2, r7, r2
   208c2:	6812      	ldr	r2, [r2, #0]
   208c4:	18d3      	adds	r3, r2, r3
   208c6:	781b      	ldrb	r3, [r3, #0]
   208c8:	2b46      	cmp	r3, #70	; 0x46
   208ca:	d909      	bls.n	208e0 <m2m_wifi_connect_sc+0xec>
   208cc:	2396      	movs	r3, #150	; 0x96
   208ce:	18fb      	adds	r3, r7, r3
   208d0:	781b      	ldrb	r3, [r3, #0]
   208d2:	2290      	movs	r2, #144	; 0x90
   208d4:	18ba      	adds	r2, r7, r2
   208d6:	6812      	ldr	r2, [r2, #0]
   208d8:	18d3      	adds	r3, r2, r3
   208da:	781b      	ldrb	r3, [r3, #0]
   208dc:	2b60      	cmp	r3, #96	; 0x60
   208de:	d909      	bls.n	208f4 <m2m_wifi_connect_sc+0x100>
   208e0:	2396      	movs	r3, #150	; 0x96
   208e2:	18fb      	adds	r3, r7, r3
   208e4:	781b      	ldrb	r3, [r3, #0]
   208e6:	2290      	movs	r2, #144	; 0x90
   208e8:	18ba      	adds	r2, r7, r2
   208ea:	6812      	ldr	r2, [r2, #0]
   208ec:	18d3      	adds	r3, r2, r3
   208ee:	781b      	ldrb	r3, [r3, #0]
   208f0:	2b66      	cmp	r3, #102	; 0x66
   208f2:	d912      	bls.n	2091a <m2m_wifi_connect_sc+0x126>
				{
					M2M_ERR("Invalid Key\n");
   208f4:	4aad      	ldr	r2, [pc, #692]	; (20bac <m2m_wifi_connect_sc+0x3b8>)
   208f6:	49a7      	ldr	r1, [pc, #668]	; (20b94 <m2m_wifi_connect_sc+0x3a0>)
   208f8:	4ba7      	ldr	r3, [pc, #668]	; (20b98 <m2m_wifi_connect_sc+0x3a4>)
   208fa:	0018      	movs	r0, r3
   208fc:	4ba7      	ldr	r3, [pc, #668]	; (20b9c <m2m_wifi_connect_sc+0x3a8>)
   208fe:	4798      	blx	r3
   20900:	4bab      	ldr	r3, [pc, #684]	; (20bb0 <m2m_wifi_connect_sc+0x3bc>)
   20902:	0018      	movs	r0, r3
   20904:	4ba5      	ldr	r3, [pc, #660]	; (20b9c <m2m_wifi_connect_sc+0x3a8>)
   20906:	4798      	blx	r3
   20908:	4ba6      	ldr	r3, [pc, #664]	; (20ba4 <m2m_wifi_connect_sc+0x3b0>)
   2090a:	0018      	movs	r0, r3
   2090c:	4ba3      	ldr	r3, [pc, #652]	; (20b9c <m2m_wifi_connect_sc+0x3a8>)
   2090e:	4798      	blx	r3
					ret = M2M_ERR_FAIL;
   20910:	2397      	movs	r3, #151	; 0x97
   20912:	18fb      	adds	r3, r7, r3
   20914:	22f4      	movs	r2, #244	; 0xf4
   20916:	701a      	strb	r2, [r3, #0]
					goto ERR1;
   20918:	e195      	b.n	20c46 <m2m_wifi_connect_sc+0x452>
				}
				i++;
   2091a:	2396      	movs	r3, #150	; 0x96
   2091c:	18fb      	adds	r3, r7, r3
   2091e:	781a      	ldrb	r2, [r3, #0]
   20920:	2396      	movs	r3, #150	; 0x96
   20922:	18fb      	adds	r3, r7, r3
   20924:	3201      	adds	r2, #1
   20926:	701a      	strb	r2, [r3, #0]
			while(i < (M2M_MAX_PSK_LEN-1))
   20928:	2396      	movs	r3, #150	; 0x96
   2092a:	18fb      	adds	r3, r7, r3
   2092c:	781b      	ldrb	r3, [r3, #0]
   2092e:	2b3f      	cmp	r3, #63	; 0x3f
   20930:	d9a4      	bls.n	2087c <m2m_wifi_connect_sc+0x88>
			}
		}
	}
	if((u8SsidLen<=0)||(u8SsidLen>=M2M_MAX_SSID_LEN))
   20932:	230b      	movs	r3, #11
   20934:	18fb      	adds	r3, r7, r3
   20936:	781b      	ldrb	r3, [r3, #0]
   20938:	2b00      	cmp	r3, #0
   2093a:	d004      	beq.n	20946 <m2m_wifi_connect_sc+0x152>
   2093c:	230b      	movs	r3, #11
   2093e:	18fb      	adds	r3, r7, r3
   20940:	781b      	ldrb	r3, [r3, #0]
   20942:	2b20      	cmp	r3, #32
   20944:	d913      	bls.n	2096e <m2m_wifi_connect_sc+0x17a>
	{
		M2M_ERR("SSID LEN INVALID\n");
   20946:	238c      	movs	r3, #140	; 0x8c
   20948:	009a      	lsls	r2, r3, #2
   2094a:	4992      	ldr	r1, [pc, #584]	; (20b94 <m2m_wifi_connect_sc+0x3a0>)
   2094c:	4b92      	ldr	r3, [pc, #584]	; (20b98 <m2m_wifi_connect_sc+0x3a4>)
   2094e:	0018      	movs	r0, r3
   20950:	4b92      	ldr	r3, [pc, #584]	; (20b9c <m2m_wifi_connect_sc+0x3a8>)
   20952:	4798      	blx	r3
   20954:	4b97      	ldr	r3, [pc, #604]	; (20bb4 <m2m_wifi_connect_sc+0x3c0>)
   20956:	0018      	movs	r0, r3
   20958:	4b90      	ldr	r3, [pc, #576]	; (20b9c <m2m_wifi_connect_sc+0x3a8>)
   2095a:	4798      	blx	r3
   2095c:	4b91      	ldr	r3, [pc, #580]	; (20ba4 <m2m_wifi_connect_sc+0x3b0>)
   2095e:	0018      	movs	r0, r3
   20960:	4b8e      	ldr	r3, [pc, #568]	; (20b9c <m2m_wifi_connect_sc+0x3a8>)
   20962:	4798      	blx	r3
		ret = M2M_ERR_FAIL;
   20964:	2397      	movs	r3, #151	; 0x97
   20966:	18fb      	adds	r3, r7, r3
   20968:	22f4      	movs	r2, #244	; 0xf4
   2096a:	701a      	strb	r2, [r3, #0]
		goto ERR1;
   2096c:	e16b      	b.n	20c46 <m2m_wifi_connect_sc+0x452>
	}

	if(u16Ch < M2M_WIFI_CH_1|| u16Ch > M2M_WIFI_CH_14)
   2096e:	23a8      	movs	r3, #168	; 0xa8
   20970:	18fb      	adds	r3, r7, r3
   20972:	881b      	ldrh	r3, [r3, #0]
   20974:	2b00      	cmp	r3, #0
   20976:	d004      	beq.n	20982 <m2m_wifi_connect_sc+0x18e>
   20978:	23a8      	movs	r3, #168	; 0xa8
   2097a:	18fb      	adds	r3, r7, r3
   2097c:	881b      	ldrh	r3, [r3, #0]
   2097e:	2b0e      	cmp	r3, #14
   20980:	d917      	bls.n	209b2 <m2m_wifi_connect_sc+0x1be>
	{
		if(u16Ch!=M2M_WIFI_CH_ALL)
   20982:	23a8      	movs	r3, #168	; 0xa8
   20984:	18fb      	adds	r3, r7, r3
   20986:	881b      	ldrh	r3, [r3, #0]
   20988:	2bff      	cmp	r3, #255	; 0xff
   2098a:	d012      	beq.n	209b2 <m2m_wifi_connect_sc+0x1be>
		{
			M2M_ERR("CH INVALID\n");
   2098c:	4a8a      	ldr	r2, [pc, #552]	; (20bb8 <m2m_wifi_connect_sc+0x3c4>)
   2098e:	4981      	ldr	r1, [pc, #516]	; (20b94 <m2m_wifi_connect_sc+0x3a0>)
   20990:	4b81      	ldr	r3, [pc, #516]	; (20b98 <m2m_wifi_connect_sc+0x3a4>)
   20992:	0018      	movs	r0, r3
   20994:	4b81      	ldr	r3, [pc, #516]	; (20b9c <m2m_wifi_connect_sc+0x3a8>)
   20996:	4798      	blx	r3
   20998:	4b88      	ldr	r3, [pc, #544]	; (20bbc <m2m_wifi_connect_sc+0x3c8>)
   2099a:	0018      	movs	r0, r3
   2099c:	4b7f      	ldr	r3, [pc, #508]	; (20b9c <m2m_wifi_connect_sc+0x3a8>)
   2099e:	4798      	blx	r3
   209a0:	4b80      	ldr	r3, [pc, #512]	; (20ba4 <m2m_wifi_connect_sc+0x3b0>)
   209a2:	0018      	movs	r0, r3
   209a4:	4b7d      	ldr	r3, [pc, #500]	; (20b9c <m2m_wifi_connect_sc+0x3a8>)
   209a6:	4798      	blx	r3
			ret = M2M_ERR_FAIL;
   209a8:	2397      	movs	r3, #151	; 0x97
   209aa:	18fb      	adds	r3, r7, r3
   209ac:	22f4      	movs	r2, #244	; 0xf4
   209ae:	701a      	strb	r2, [r3, #0]
			goto ERR1;
   209b0:	e149      	b.n	20c46 <m2m_wifi_connect_sc+0x452>
		}
	}


	m2m_memcpy(strConnect.au8SSID, (uint8*)pcSsid, u8SsidLen);
   209b2:	230b      	movs	r3, #11
   209b4:	18fb      	adds	r3, r7, r3
   209b6:	781a      	ldrb	r2, [r3, #0]
   209b8:	68f9      	ldr	r1, [r7, #12]
   209ba:	2314      	movs	r3, #20
   209bc:	18fb      	adds	r3, r7, r3
   209be:	3346      	adds	r3, #70	; 0x46
   209c0:	0018      	movs	r0, r3
   209c2:	4b7f      	ldr	r3, [pc, #508]	; (20bc0 <m2m_wifi_connect_sc+0x3cc>)
   209c4:	4798      	blx	r3
	strConnect.au8SSID[u8SsidLen]	= 0;
   209c6:	230b      	movs	r3, #11
   209c8:	18fb      	adds	r3, r7, r3
   209ca:	781b      	ldrb	r3, [r3, #0]
   209cc:	2214      	movs	r2, #20
   209ce:	18ba      	adds	r2, r7, r2
   209d0:	2146      	movs	r1, #70	; 0x46
   209d2:	18d3      	adds	r3, r2, r3
   209d4:	185b      	adds	r3, r3, r1
   209d6:	2200      	movs	r2, #0
   209d8:	701a      	strb	r2, [r3, #0]
	strConnect.u16Ch				= NM_BSP_B_L_16(u16Ch);
   209da:	2314      	movs	r3, #20
   209dc:	18fb      	adds	r3, r7, r3
   209de:	22a8      	movs	r2, #168	; 0xa8
   209e0:	18ba      	adds	r2, r7, r2
   209e2:	2144      	movs	r1, #68	; 0x44
   209e4:	8812      	ldrh	r2, [r2, #0]
   209e6:	525a      	strh	r2, [r3, r1]
	/* Credentials will be Not be saved if u8NoSaveCred is set */ 
	strConnect.u8NoSaveCred 			= u8NoSaveCred ? 1:0;
   209e8:	23ac      	movs	r3, #172	; 0xac
   209ea:	18fb      	adds	r3, r7, r3
   209ec:	781b      	ldrb	r3, [r3, #0]
   209ee:	1e5a      	subs	r2, r3, #1
   209f0:	4193      	sbcs	r3, r2
   209f2:	b2db      	uxtb	r3, r3
   209f4:	0019      	movs	r1, r3
   209f6:	2314      	movs	r3, #20
   209f8:	18fb      	adds	r3, r7, r3
   209fa:	2267      	movs	r2, #103	; 0x67
   209fc:	5499      	strb	r1, [r3, r2]
	pstrAuthInfo = &strConnect.strSec;
   209fe:	2314      	movs	r3, #20
   20a00:	18fb      	adds	r3, r7, r3
   20a02:	228c      	movs	r2, #140	; 0x8c
   20a04:	18ba      	adds	r2, r7, r2
   20a06:	6013      	str	r3, [r2, #0]
	pstrAuthInfo->u8SecType		= u8SecType;
   20a08:	238c      	movs	r3, #140	; 0x8c
   20a0a:	18fb      	adds	r3, r7, r3
   20a0c:	681b      	ldr	r3, [r3, #0]
   20a0e:	220a      	movs	r2, #10
   20a10:	18ba      	adds	r2, r7, r2
   20a12:	2141      	movs	r1, #65	; 0x41
   20a14:	7812      	ldrb	r2, [r2, #0]
   20a16:	545a      	strb	r2, [r3, r1]

	if(u8SecType == M2M_WIFI_SEC_WEP)
   20a18:	230a      	movs	r3, #10
   20a1a:	18fb      	adds	r3, r7, r3
   20a1c:	781b      	ldrb	r3, [r3, #0]
   20a1e:	2b03      	cmp	r3, #3
   20a20:	d000      	beq.n	20a24 <m2m_wifi_connect_sc+0x230>
   20a22:	e07d      	b.n	20b20 <m2m_wifi_connect_sc+0x32c>
	{
		tstrM2mWifiWepParams	* pstrWepParams = (tstrM2mWifiWepParams*)pvAuthInfo;
   20a24:	687b      	ldr	r3, [r7, #4]
   20a26:	2288      	movs	r2, #136	; 0x88
   20a28:	18ba      	adds	r2, r7, r2
   20a2a:	6013      	str	r3, [r2, #0]
		tstrM2mWifiWepParams	*pstrWep = &pstrAuthInfo->uniAuth.strWepInfo;
   20a2c:	238c      	movs	r3, #140	; 0x8c
   20a2e:	18fb      	adds	r3, r7, r3
   20a30:	681b      	ldr	r3, [r3, #0]
   20a32:	2284      	movs	r2, #132	; 0x84
   20a34:	18ba      	adds	r2, r7, r2
   20a36:	6013      	str	r3, [r2, #0]
		pstrWep->u8KeyIndx =pstrWepParams->u8KeyIndx-1;
   20a38:	2388      	movs	r3, #136	; 0x88
   20a3a:	18fb      	adds	r3, r7, r3
   20a3c:	681b      	ldr	r3, [r3, #0]
   20a3e:	781b      	ldrb	r3, [r3, #0]
   20a40:	3b01      	subs	r3, #1
   20a42:	b2da      	uxtb	r2, r3
   20a44:	2384      	movs	r3, #132	; 0x84
   20a46:	18fb      	adds	r3, r7, r3
   20a48:	681b      	ldr	r3, [r3, #0]
   20a4a:	701a      	strb	r2, [r3, #0]

		if(pstrWep->u8KeyIndx >= WEP_KEY_MAX_INDEX)
   20a4c:	2384      	movs	r3, #132	; 0x84
   20a4e:	18fb      	adds	r3, r7, r3
   20a50:	681b      	ldr	r3, [r3, #0]
   20a52:	781b      	ldrb	r3, [r3, #0]
   20a54:	2b03      	cmp	r3, #3
   20a56:	d919      	bls.n	20a8c <m2m_wifi_connect_sc+0x298>
		{
			M2M_ERR("Invalid Wep key index %d\n", pstrWep->u8KeyIndx);
   20a58:	2394      	movs	r3, #148	; 0x94
   20a5a:	009a      	lsls	r2, r3, #2
   20a5c:	494d      	ldr	r1, [pc, #308]	; (20b94 <m2m_wifi_connect_sc+0x3a0>)
   20a5e:	4b4e      	ldr	r3, [pc, #312]	; (20b98 <m2m_wifi_connect_sc+0x3a4>)
   20a60:	0018      	movs	r0, r3
   20a62:	4b4e      	ldr	r3, [pc, #312]	; (20b9c <m2m_wifi_connect_sc+0x3a8>)
   20a64:	4798      	blx	r3
   20a66:	2384      	movs	r3, #132	; 0x84
   20a68:	18fb      	adds	r3, r7, r3
   20a6a:	681b      	ldr	r3, [r3, #0]
   20a6c:	781b      	ldrb	r3, [r3, #0]
   20a6e:	001a      	movs	r2, r3
   20a70:	4b54      	ldr	r3, [pc, #336]	; (20bc4 <m2m_wifi_connect_sc+0x3d0>)
   20a72:	0011      	movs	r1, r2
   20a74:	0018      	movs	r0, r3
   20a76:	4b49      	ldr	r3, [pc, #292]	; (20b9c <m2m_wifi_connect_sc+0x3a8>)
   20a78:	4798      	blx	r3
   20a7a:	4b4a      	ldr	r3, [pc, #296]	; (20ba4 <m2m_wifi_connect_sc+0x3b0>)
   20a7c:	0018      	movs	r0, r3
   20a7e:	4b47      	ldr	r3, [pc, #284]	; (20b9c <m2m_wifi_connect_sc+0x3a8>)
   20a80:	4798      	blx	r3
			ret = M2M_ERR_FAIL;
   20a82:	2397      	movs	r3, #151	; 0x97
   20a84:	18fb      	adds	r3, r7, r3
   20a86:	22f4      	movs	r2, #244	; 0xf4
   20a88:	701a      	strb	r2, [r3, #0]
			goto ERR1;
   20a8a:	e0dc      	b.n	20c46 <m2m_wifi_connect_sc+0x452>
		}
		pstrWep->u8KeySz = pstrWepParams->u8KeySz-1;
   20a8c:	2388      	movs	r3, #136	; 0x88
   20a8e:	18fb      	adds	r3, r7, r3
   20a90:	681b      	ldr	r3, [r3, #0]
   20a92:	785b      	ldrb	r3, [r3, #1]
   20a94:	3b01      	subs	r3, #1
   20a96:	b2da      	uxtb	r2, r3
   20a98:	2384      	movs	r3, #132	; 0x84
   20a9a:	18fb      	adds	r3, r7, r3
   20a9c:	681b      	ldr	r3, [r3, #0]
   20a9e:	705a      	strb	r2, [r3, #1]
		if ((pstrWep->u8KeySz != WEP_40_KEY_STRING_SIZE)&& (pstrWep->u8KeySz != WEP_104_KEY_STRING_SIZE))
   20aa0:	2384      	movs	r3, #132	; 0x84
   20aa2:	18fb      	adds	r3, r7, r3
   20aa4:	681b      	ldr	r3, [r3, #0]
   20aa6:	785b      	ldrb	r3, [r3, #1]
   20aa8:	2b0a      	cmp	r3, #10
   20aaa:	d01e      	beq.n	20aea <m2m_wifi_connect_sc+0x2f6>
   20aac:	2384      	movs	r3, #132	; 0x84
   20aae:	18fb      	adds	r3, r7, r3
   20ab0:	681b      	ldr	r3, [r3, #0]
   20ab2:	785b      	ldrb	r3, [r3, #1]
   20ab4:	2b1a      	cmp	r3, #26
   20ab6:	d018      	beq.n	20aea <m2m_wifi_connect_sc+0x2f6>
		{
			M2M_ERR("Invalid Wep key length %d\n", pstrWep->u8KeySz);
   20ab8:	4a43      	ldr	r2, [pc, #268]	; (20bc8 <m2m_wifi_connect_sc+0x3d4>)
   20aba:	4936      	ldr	r1, [pc, #216]	; (20b94 <m2m_wifi_connect_sc+0x3a0>)
   20abc:	4b36      	ldr	r3, [pc, #216]	; (20b98 <m2m_wifi_connect_sc+0x3a4>)
   20abe:	0018      	movs	r0, r3
   20ac0:	4b36      	ldr	r3, [pc, #216]	; (20b9c <m2m_wifi_connect_sc+0x3a8>)
   20ac2:	4798      	blx	r3
   20ac4:	2384      	movs	r3, #132	; 0x84
   20ac6:	18fb      	adds	r3, r7, r3
   20ac8:	681b      	ldr	r3, [r3, #0]
   20aca:	785b      	ldrb	r3, [r3, #1]
   20acc:	001a      	movs	r2, r3
   20ace:	4b3f      	ldr	r3, [pc, #252]	; (20bcc <m2m_wifi_connect_sc+0x3d8>)
   20ad0:	0011      	movs	r1, r2
   20ad2:	0018      	movs	r0, r3
   20ad4:	4b31      	ldr	r3, [pc, #196]	; (20b9c <m2m_wifi_connect_sc+0x3a8>)
   20ad6:	4798      	blx	r3
   20ad8:	4b32      	ldr	r3, [pc, #200]	; (20ba4 <m2m_wifi_connect_sc+0x3b0>)
   20ada:	0018      	movs	r0, r3
   20adc:	4b2f      	ldr	r3, [pc, #188]	; (20b9c <m2m_wifi_connect_sc+0x3a8>)
   20ade:	4798      	blx	r3
			ret = M2M_ERR_FAIL;
   20ae0:	2397      	movs	r3, #151	; 0x97
   20ae2:	18fb      	adds	r3, r7, r3
   20ae4:	22f4      	movs	r2, #244	; 0xf4
   20ae6:	701a      	strb	r2, [r3, #0]
			goto ERR1;
   20ae8:	e0ad      	b.n	20c46 <m2m_wifi_connect_sc+0x452>
		}
		m2m_memcpy((uint8*)pstrWep->au8WepKey,(uint8*)pstrWepParams->au8WepKey, pstrWepParams->u8KeySz);
   20aea:	2384      	movs	r3, #132	; 0x84
   20aec:	18fb      	adds	r3, r7, r3
   20aee:	681b      	ldr	r3, [r3, #0]
   20af0:	1c98      	adds	r0, r3, #2
   20af2:	2388      	movs	r3, #136	; 0x88
   20af4:	18fb      	adds	r3, r7, r3
   20af6:	681b      	ldr	r3, [r3, #0]
   20af8:	1c99      	adds	r1, r3, #2
   20afa:	2388      	movs	r3, #136	; 0x88
   20afc:	18fb      	adds	r3, r7, r3
   20afe:	681b      	ldr	r3, [r3, #0]
   20b00:	785b      	ldrb	r3, [r3, #1]
   20b02:	001a      	movs	r2, r3
   20b04:	4b2e      	ldr	r3, [pc, #184]	; (20bc0 <m2m_wifi_connect_sc+0x3cc>)
   20b06:	4798      	blx	r3
		pstrWep->au8WepKey[pstrWepParams->u8KeySz] = 0;
   20b08:	2388      	movs	r3, #136	; 0x88
   20b0a:	18fb      	adds	r3, r7, r3
   20b0c:	681b      	ldr	r3, [r3, #0]
   20b0e:	785b      	ldrb	r3, [r3, #1]
   20b10:	001a      	movs	r2, r3
   20b12:	2384      	movs	r3, #132	; 0x84
   20b14:	18fb      	adds	r3, r7, r3
   20b16:	681b      	ldr	r3, [r3, #0]
   20b18:	189b      	adds	r3, r3, r2
   20b1a:	2200      	movs	r2, #0
   20b1c:	709a      	strb	r2, [r3, #2]
   20b1e:	e081      	b.n	20c24 <m2m_wifi_connect_sc+0x430>

	}


	else if(u8SecType == M2M_WIFI_SEC_WPA_PSK)
   20b20:	230a      	movs	r3, #10
   20b22:	18fb      	adds	r3, r7, r3
   20b24:	781b      	ldrb	r3, [r3, #0]
   20b26:	2b02      	cmp	r3, #2
   20b28:	d156      	bne.n	20bd8 <m2m_wifi_connect_sc+0x3e4>
	{
		uint16	u16KeyLen = m2m_strlen((uint8*)pvAuthInfo);
   20b2a:	2382      	movs	r3, #130	; 0x82
   20b2c:	18fc      	adds	r4, r7, r3
   20b2e:	687b      	ldr	r3, [r7, #4]
   20b30:	0018      	movs	r0, r3
   20b32:	4b1d      	ldr	r3, [pc, #116]	; (20ba8 <m2m_wifi_connect_sc+0x3b4>)
   20b34:	4798      	blx	r3
   20b36:	0003      	movs	r3, r0
   20b38:	8023      	strh	r3, [r4, #0]
		if((u16KeyLen <= 0)||(u16KeyLen >= M2M_MAX_PSK_LEN))
   20b3a:	2382      	movs	r3, #130	; 0x82
   20b3c:	18fb      	adds	r3, r7, r3
   20b3e:	881b      	ldrh	r3, [r3, #0]
   20b40:	2b00      	cmp	r3, #0
   20b42:	d004      	beq.n	20b4e <m2m_wifi_connect_sc+0x35a>
   20b44:	2382      	movs	r3, #130	; 0x82
   20b46:	18fb      	adds	r3, r7, r3
   20b48:	881b      	ldrh	r3, [r3, #0]
   20b4a:	2b40      	cmp	r3, #64	; 0x40
   20b4c:	d912      	bls.n	20b74 <m2m_wifi_connect_sc+0x380>
		{
			M2M_ERR("Incorrect PSK key length\n");
   20b4e:	4a20      	ldr	r2, [pc, #128]	; (20bd0 <m2m_wifi_connect_sc+0x3dc>)
   20b50:	4910      	ldr	r1, [pc, #64]	; (20b94 <m2m_wifi_connect_sc+0x3a0>)
   20b52:	4b11      	ldr	r3, [pc, #68]	; (20b98 <m2m_wifi_connect_sc+0x3a4>)
   20b54:	0018      	movs	r0, r3
   20b56:	4b11      	ldr	r3, [pc, #68]	; (20b9c <m2m_wifi_connect_sc+0x3a8>)
   20b58:	4798      	blx	r3
   20b5a:	4b1e      	ldr	r3, [pc, #120]	; (20bd4 <m2m_wifi_connect_sc+0x3e0>)
   20b5c:	0018      	movs	r0, r3
   20b5e:	4b0f      	ldr	r3, [pc, #60]	; (20b9c <m2m_wifi_connect_sc+0x3a8>)
   20b60:	4798      	blx	r3
   20b62:	4b10      	ldr	r3, [pc, #64]	; (20ba4 <m2m_wifi_connect_sc+0x3b0>)
   20b64:	0018      	movs	r0, r3
   20b66:	4b0d      	ldr	r3, [pc, #52]	; (20b9c <m2m_wifi_connect_sc+0x3a8>)
   20b68:	4798      	blx	r3
			ret = M2M_ERR_FAIL;
   20b6a:	2397      	movs	r3, #151	; 0x97
   20b6c:	18fb      	adds	r3, r7, r3
   20b6e:	22f4      	movs	r2, #244	; 0xf4
   20b70:	701a      	strb	r2, [r3, #0]
			goto ERR1;
   20b72:	e068      	b.n	20c46 <m2m_wifi_connect_sc+0x452>
		}
		m2m_memcpy(pstrAuthInfo->uniAuth.au8PSK, (uint8*)pvAuthInfo, u16KeyLen + 1);
   20b74:	238c      	movs	r3, #140	; 0x8c
   20b76:	18fb      	adds	r3, r7, r3
   20b78:	6818      	ldr	r0, [r3, #0]
   20b7a:	2382      	movs	r3, #130	; 0x82
   20b7c:	18fb      	adds	r3, r7, r3
   20b7e:	881b      	ldrh	r3, [r3, #0]
   20b80:	3301      	adds	r3, #1
   20b82:	001a      	movs	r2, r3
   20b84:	687b      	ldr	r3, [r7, #4]
   20b86:	0019      	movs	r1, r3
   20b88:	4b0d      	ldr	r3, [pc, #52]	; (20bc0 <m2m_wifi_connect_sc+0x3cc>)
   20b8a:	4798      	blx	r3
   20b8c:	e04a      	b.n	20c24 <m2m_wifi_connect_sc+0x430>
   20b8e:	46c0      	nop			; (mov r8, r8)
   20b90:	0000021a 	.word	0x0000021a
   20b94:	00036f18 	.word	0x00036f18
   20b98:	00036b60 	.word	0x00036b60
   20b9c:	0001c65d 	.word	0x0001c65d
   20ba0:	00036da0 	.word	0x00036da0
   20ba4:	00036b5c 	.word	0x00036b5c
   20ba8:	0001f463 	.word	0x0001f463
   20bac:	00000226 	.word	0x00000226
   20bb0:	00036db4 	.word	0x00036db4
   20bb4:	00036dc4 	.word	0x00036dc4
   20bb8:	00000239 	.word	0x00000239
   20bbc:	00036dd8 	.word	0x00036dd8
   20bc0:	0001f3e9 	.word	0x0001f3e9
   20bc4:	00036de4 	.word	0x00036de4
   20bc8:	00000257 	.word	0x00000257
   20bcc:	00036e00 	.word	0x00036e00
   20bd0:	00000266 	.word	0x00000266
   20bd4:	00036e1c 	.word	0x00036e1c
	}
	else if(u8SecType == M2M_WIFI_SEC_802_1X)
   20bd8:	230a      	movs	r3, #10
   20bda:	18fb      	adds	r3, r7, r3
   20bdc:	781b      	ldrb	r3, [r3, #0]
   20bde:	2b04      	cmp	r3, #4
   20be0:	d108      	bne.n	20bf4 <m2m_wifi_connect_sc+0x400>
	{
		m2m_memcpy((uint8*)&pstrAuthInfo->uniAuth.strCred1x, (uint8*)pvAuthInfo, sizeof(tstr1xAuthCredentials));
   20be2:	238c      	movs	r3, #140	; 0x8c
   20be4:	18fb      	adds	r3, r7, r3
   20be6:	681b      	ldr	r3, [r3, #0]
   20be8:	6879      	ldr	r1, [r7, #4]
   20bea:	223e      	movs	r2, #62	; 0x3e
   20bec:	0018      	movs	r0, r3
   20bee:	4b1a      	ldr	r3, [pc, #104]	; (20c58 <m2m_wifi_connect_sc+0x464>)
   20bf0:	4798      	blx	r3
   20bf2:	e017      	b.n	20c24 <m2m_wifi_connect_sc+0x430>
	}
	else if(u8SecType == M2M_WIFI_SEC_OPEN)
   20bf4:	230a      	movs	r3, #10
   20bf6:	18fb      	adds	r3, r7, r3
   20bf8:	781b      	ldrb	r3, [r3, #0]
   20bfa:	2b01      	cmp	r3, #1
   20bfc:	d012      	beq.n	20c24 <m2m_wifi_connect_sc+0x430>
	{

	}
	else
	{
		M2M_ERR("undefined sec type\n");
   20bfe:	4a17      	ldr	r2, [pc, #92]	; (20c5c <m2m_wifi_connect_sc+0x468>)
   20c00:	4917      	ldr	r1, [pc, #92]	; (20c60 <m2m_wifi_connect_sc+0x46c>)
   20c02:	4b18      	ldr	r3, [pc, #96]	; (20c64 <m2m_wifi_connect_sc+0x470>)
   20c04:	0018      	movs	r0, r3
   20c06:	4b18      	ldr	r3, [pc, #96]	; (20c68 <m2m_wifi_connect_sc+0x474>)
   20c08:	4798      	blx	r3
   20c0a:	4b18      	ldr	r3, [pc, #96]	; (20c6c <m2m_wifi_connect_sc+0x478>)
   20c0c:	0018      	movs	r0, r3
   20c0e:	4b16      	ldr	r3, [pc, #88]	; (20c68 <m2m_wifi_connect_sc+0x474>)
   20c10:	4798      	blx	r3
   20c12:	4b17      	ldr	r3, [pc, #92]	; (20c70 <m2m_wifi_connect_sc+0x47c>)
   20c14:	0018      	movs	r0, r3
   20c16:	4b14      	ldr	r3, [pc, #80]	; (20c68 <m2m_wifi_connect_sc+0x474>)
   20c18:	4798      	blx	r3
		ret = M2M_ERR_FAIL;
   20c1a:	2397      	movs	r3, #151	; 0x97
   20c1c:	18fb      	adds	r3, r7, r3
   20c1e:	22f4      	movs	r2, #244	; 0xf4
   20c20:	701a      	strb	r2, [r3, #0]
		goto ERR1;
   20c22:	e010      	b.n	20c46 <m2m_wifi_connect_sc+0x452>
	}

	ret = hif_send(M2M_REQ_GROUP_WIFI, M2M_WIFI_REQ_CONNECT, (uint8*)&strConnect, sizeof(tstrM2mWifiConnect),NULL, 0,0);
   20c24:	2397      	movs	r3, #151	; 0x97
   20c26:	18fc      	adds	r4, r7, r3
   20c28:	2314      	movs	r3, #20
   20c2a:	18fa      	adds	r2, r7, r3
   20c2c:	2300      	movs	r3, #0
   20c2e:	9302      	str	r3, [sp, #8]
   20c30:	2300      	movs	r3, #0
   20c32:	9301      	str	r3, [sp, #4]
   20c34:	2300      	movs	r3, #0
   20c36:	9300      	str	r3, [sp, #0]
   20c38:	236c      	movs	r3, #108	; 0x6c
   20c3a:	2128      	movs	r1, #40	; 0x28
   20c3c:	2001      	movs	r0, #1
   20c3e:	4d0d      	ldr	r5, [pc, #52]	; (20c74 <m2m_wifi_connect_sc+0x480>)
   20c40:	47a8      	blx	r5
   20c42:	0003      	movs	r3, r0
   20c44:	7023      	strb	r3, [r4, #0]

ERR1:
	return ret;
   20c46:	2397      	movs	r3, #151	; 0x97
   20c48:	18fb      	adds	r3, r7, r3
   20c4a:	781b      	ldrb	r3, [r3, #0]
   20c4c:	b25b      	sxtb	r3, r3
}
   20c4e:	0018      	movs	r0, r3
   20c50:	46bd      	mov	sp, r7
   20c52:	b026      	add	sp, #152	; 0x98
   20c54:	bdb0      	pop	{r4, r5, r7, pc}
   20c56:	46c0      	nop			; (mov r8, r8)
   20c58:	0001f3e9 	.word	0x0001f3e9
   20c5c:	00000276 	.word	0x00000276
   20c60:	00036f18 	.word	0x00036f18
   20c64:	00036b60 	.word	0x00036b60
   20c68:	0001c65d 	.word	0x0001c65d
   20c6c:	00036e38 	.word	0x00036e38
   20c70:	00036b5c 	.word	0x00036b5c
   20c74:	0001f685 	.word	0x0001f685

00020c78 <m2m_wifi_request_dhcp_client>:
	return hif_send(M2M_REQ_GROUP_IP, M2M_IP_REQ_STATIC_IP_CONF,
		(uint8*) pstrStaticIPConf, sizeof(tstrM2MIPConfig), NULL, 0,0);
}

sint8 m2m_wifi_request_dhcp_client(void)
{
   20c78:	b580      	push	{r7, lr}
   20c7a:	af00      	add	r7, sp, #0
	/*legacy API should be removed */
	return 0;
   20c7c:	2300      	movs	r3, #0
}
   20c7e:	0018      	movs	r0, r3
   20c80:	46bd      	mov	sp, r7
   20c82:	bd80      	pop	{r7, pc}

00020c84 <chip_apply_conf>:

#define TIMEOUT						(0xfffffffful)
#define WAKUP_TRAILS_TIMEOUT		(4)

sint8 chip_apply_conf(uint32 u32Conf)
{
   20c84:	b590      	push	{r4, r7, lr}
   20c86:	b087      	sub	sp, #28
   20c88:	af00      	add	r7, sp, #0
   20c8a:	6078      	str	r0, [r7, #4]
	sint8 ret = M2M_SUCCESS;
   20c8c:	2317      	movs	r3, #23
   20c8e:	18fb      	adds	r3, r7, r3
   20c90:	2200      	movs	r2, #0
   20c92:	701a      	strb	r2, [r3, #0]
	uint32 val32 = u32Conf;
   20c94:	687b      	ldr	r3, [r7, #4]
   20c96:	613b      	str	r3, [r7, #16]
#endif
#if defined CONF_WINC_XO_XTALGM2_DIS
	val32 |= rHAVE_XO_XTALGM2_DIS_BIT;
#endif

	val32 |= rHAVE_RESERVED1_BIT;
   20c98:	693b      	ldr	r3, [r7, #16]
   20c9a:	2280      	movs	r2, #128	; 0x80
   20c9c:	0052      	lsls	r2, r2, #1
   20c9e:	4313      	orrs	r3, r2
   20ca0:	613b      	str	r3, [r7, #16]
	do  {
		nm_write_reg(rNMI_GP_REG_1, val32);
   20ca2:	693a      	ldr	r2, [r7, #16]
   20ca4:	23a5      	movs	r3, #165	; 0xa5
   20ca6:	015b      	lsls	r3, r3, #5
   20ca8:	0011      	movs	r1, r2
   20caa:	0018      	movs	r0, r3
   20cac:	4b12      	ldr	r3, [pc, #72]	; (20cf8 <chip_apply_conf+0x74>)
   20cae:	4798      	blx	r3
		if(val32 != 0) {		
   20cb0:	693b      	ldr	r3, [r7, #16]
   20cb2:	2b00      	cmp	r3, #0
   20cb4:	d018      	beq.n	20ce8 <chip_apply_conf+0x64>
			uint32 reg = 0;
   20cb6:	2300      	movs	r3, #0
   20cb8:	60fb      	str	r3, [r7, #12]
			ret = nm_read_reg_with_ret(rNMI_GP_REG_1, &reg);
   20cba:	2317      	movs	r3, #23
   20cbc:	18fc      	adds	r4, r7, r3
   20cbe:	230c      	movs	r3, #12
   20cc0:	18fa      	adds	r2, r7, r3
   20cc2:	23a5      	movs	r3, #165	; 0xa5
   20cc4:	015b      	lsls	r3, r3, #5
   20cc6:	0011      	movs	r1, r2
   20cc8:	0018      	movs	r0, r3
   20cca:	4b0c      	ldr	r3, [pc, #48]	; (20cfc <chip_apply_conf+0x78>)
   20ccc:	4798      	blx	r3
   20cce:	0003      	movs	r3, r0
   20cd0:	7023      	strb	r3, [r4, #0]
			if(ret == M2M_SUCCESS) {
   20cd2:	2317      	movs	r3, #23
   20cd4:	18fb      	adds	r3, r7, r3
   20cd6:	781b      	ldrb	r3, [r3, #0]
   20cd8:	b25b      	sxtb	r3, r3
   20cda:	2b00      	cmp	r3, #0
   20cdc:	d1e1      	bne.n	20ca2 <chip_apply_conf+0x1e>
				if(reg == val32)
   20cde:	68fa      	ldr	r2, [r7, #12]
   20ce0:	693b      	ldr	r3, [r7, #16]
   20ce2:	429a      	cmp	r2, r3
   20ce4:	d002      	beq.n	20cec <chip_apply_conf+0x68>
		nm_write_reg(rNMI_GP_REG_1, val32);
   20ce6:	e7dc      	b.n	20ca2 <chip_apply_conf+0x1e>
					break;
			}
		} else {
			break;
   20ce8:	46c0      	nop			; (mov r8, r8)
   20cea:	e000      	b.n	20cee <chip_apply_conf+0x6a>
					break;
   20cec:	46c0      	nop			; (mov r8, r8)
		}
	} while(1);

	return M2M_SUCCESS;
   20cee:	2300      	movs	r3, #0
}
   20cf0:	0018      	movs	r0, r3
   20cf2:	46bd      	mov	sp, r7
   20cf4:	b007      	add	sp, #28
   20cf6:	bd90      	pop	{r4, r7, pc}
   20cf8:	000214d9 	.word	0x000214d9
   20cfc:	000214b5 	.word	0x000214b5

00020d00 <enable_interrupts>:
		nm_write_reg(WAKE_CLK_REG, reg);
	}
}

sint8 enable_interrupts(void)
{
   20d00:	b590      	push	{r4, r7, lr}
   20d02:	b083      	sub	sp, #12
   20d04:	af00      	add	r7, sp, #0
	uint32 reg = 0;
   20d06:	2300      	movs	r3, #0
   20d08:	603b      	str	r3, [r7, #0]
	sint8 ret = M2M_SUCCESS;
   20d0a:	1dfb      	adds	r3, r7, #7
   20d0c:	2200      	movs	r2, #0
   20d0e:	701a      	strb	r2, [r3, #0]
	/**
	interrupt pin mux select
	**/
	ret = nm_read_reg_with_ret(NMI_PIN_MUX_0, &reg);
   20d10:	1dfc      	adds	r4, r7, #7
   20d12:	003b      	movs	r3, r7
   20d14:	4a24      	ldr	r2, [pc, #144]	; (20da8 <enable_interrupts+0xa8>)
   20d16:	0019      	movs	r1, r3
   20d18:	0010      	movs	r0, r2
   20d1a:	4b24      	ldr	r3, [pc, #144]	; (20dac <enable_interrupts+0xac>)
   20d1c:	4798      	blx	r3
   20d1e:	0003      	movs	r3, r0
   20d20:	7023      	strb	r3, [r4, #0]
	if (M2M_SUCCESS != ret) goto ERR1;
   20d22:	1dfb      	adds	r3, r7, #7
   20d24:	781b      	ldrb	r3, [r3, #0]
   20d26:	b25b      	sxtb	r3, r3
   20d28:	2b00      	cmp	r3, #0
   20d2a:	d131      	bne.n	20d90 <enable_interrupts+0x90>
	
	reg |= ((uint32) 1 << 8);
   20d2c:	683b      	ldr	r3, [r7, #0]
   20d2e:	2280      	movs	r2, #128	; 0x80
   20d30:	0052      	lsls	r2, r2, #1
   20d32:	4313      	orrs	r3, r2
   20d34:	603b      	str	r3, [r7, #0]
	ret = nm_write_reg(NMI_PIN_MUX_0, reg);
   20d36:	683b      	ldr	r3, [r7, #0]
   20d38:	1dfc      	adds	r4, r7, #7
   20d3a:	4a1b      	ldr	r2, [pc, #108]	; (20da8 <enable_interrupts+0xa8>)
   20d3c:	0019      	movs	r1, r3
   20d3e:	0010      	movs	r0, r2
   20d40:	4b1b      	ldr	r3, [pc, #108]	; (20db0 <enable_interrupts+0xb0>)
   20d42:	4798      	blx	r3
   20d44:	0003      	movs	r3, r0
   20d46:	7023      	strb	r3, [r4, #0]
	if (M2M_SUCCESS != ret) goto ERR1;
   20d48:	1dfb      	adds	r3, r7, #7
   20d4a:	781b      	ldrb	r3, [r3, #0]
   20d4c:	b25b      	sxtb	r3, r3
   20d4e:	2b00      	cmp	r3, #0
   20d50:	d120      	bne.n	20d94 <enable_interrupts+0x94>
	
	/**
	interrupt enable
	**/
	ret = nm_read_reg_with_ret(NMI_INTR_ENABLE, &reg);
   20d52:	1dfc      	adds	r4, r7, #7
   20d54:	003a      	movs	r2, r7
   20d56:	23d0      	movs	r3, #208	; 0xd0
   20d58:	015b      	lsls	r3, r3, #5
   20d5a:	0011      	movs	r1, r2
   20d5c:	0018      	movs	r0, r3
   20d5e:	4b13      	ldr	r3, [pc, #76]	; (20dac <enable_interrupts+0xac>)
   20d60:	4798      	blx	r3
   20d62:	0003      	movs	r3, r0
   20d64:	7023      	strb	r3, [r4, #0]
	if (M2M_SUCCESS != ret) goto ERR1;
   20d66:	1dfb      	adds	r3, r7, #7
   20d68:	781b      	ldrb	r3, [r3, #0]
   20d6a:	b25b      	sxtb	r3, r3
   20d6c:	2b00      	cmp	r3, #0
   20d6e:	d113      	bne.n	20d98 <enable_interrupts+0x98>
	
	reg |= ((uint32) 1 << 16);
   20d70:	683b      	ldr	r3, [r7, #0]
   20d72:	2280      	movs	r2, #128	; 0x80
   20d74:	0252      	lsls	r2, r2, #9
   20d76:	4313      	orrs	r3, r2
   20d78:	603b      	str	r3, [r7, #0]
	ret = nm_write_reg(NMI_INTR_ENABLE, reg);
   20d7a:	683a      	ldr	r2, [r7, #0]
   20d7c:	1dfc      	adds	r4, r7, #7
   20d7e:	23d0      	movs	r3, #208	; 0xd0
   20d80:	015b      	lsls	r3, r3, #5
   20d82:	0011      	movs	r1, r2
   20d84:	0018      	movs	r0, r3
   20d86:	4b0a      	ldr	r3, [pc, #40]	; (20db0 <enable_interrupts+0xb0>)
   20d88:	4798      	blx	r3
   20d8a:	0003      	movs	r3, r0
   20d8c:	7023      	strb	r3, [r4, #0]
   20d8e:	e004      	b.n	20d9a <enable_interrupts+0x9a>
	if (M2M_SUCCESS != ret) goto ERR1;
   20d90:	46c0      	nop			; (mov r8, r8)
   20d92:	e002      	b.n	20d9a <enable_interrupts+0x9a>
	if (M2M_SUCCESS != ret) goto ERR1;
   20d94:	46c0      	nop			; (mov r8, r8)
   20d96:	e000      	b.n	20d9a <enable_interrupts+0x9a>
	if (M2M_SUCCESS != ret) goto ERR1;
   20d98:	46c0      	nop			; (mov r8, r8)
	if (M2M_SUCCESS != ret) goto ERR1;
ERR1:	
	return ret;
   20d9a:	1dfb      	adds	r3, r7, #7
   20d9c:	781b      	ldrb	r3, [r3, #0]
   20d9e:	b25b      	sxtb	r3, r3
}
   20da0:	0018      	movs	r0, r3
   20da2:	46bd      	mov	sp, r7
   20da4:	b003      	add	sp, #12
   20da6:	bd90      	pop	{r4, r7, pc}
   20da8:	00001408 	.word	0x00001408
   20dac:	000214b5 	.word	0x000214b5
   20db0:	000214d9 	.word	0x000214d9

00020db4 <nmi_get_chipid>:
	nm_bsp_sleep(1);
	return ret;
}

uint32 nmi_get_chipid(void)
{
   20db4:	b580      	push	{r7, lr}
   20db6:	b082      	sub	sp, #8
   20db8:	af00      	add	r7, sp, #0
	static uint32 chipid = 0;

	if (chipid == 0) {
   20dba:	4b32      	ldr	r3, [pc, #200]	; (20e84 <nmi_get_chipid+0xd0>)
   20dbc:	681b      	ldr	r3, [r3, #0]
   20dbe:	2b00      	cmp	r3, #0
   20dc0:	d159      	bne.n	20e76 <nmi_get_chipid+0xc2>
		uint32 rfrevid;
		
		if((nm_read_reg_with_ret(0x1000, &chipid)) != M2M_SUCCESS) {
   20dc2:	4a30      	ldr	r2, [pc, #192]	; (20e84 <nmi_get_chipid+0xd0>)
   20dc4:	2380      	movs	r3, #128	; 0x80
   20dc6:	015b      	lsls	r3, r3, #5
   20dc8:	0011      	movs	r1, r2
   20dca:	0018      	movs	r0, r3
   20dcc:	4b2e      	ldr	r3, [pc, #184]	; (20e88 <nmi_get_chipid+0xd4>)
   20dce:	4798      	blx	r3
   20dd0:	1e03      	subs	r3, r0, #0
   20dd2:	d004      	beq.n	20dde <nmi_get_chipid+0x2a>
			chipid = 0;
   20dd4:	4b2b      	ldr	r3, [pc, #172]	; (20e84 <nmi_get_chipid+0xd0>)
   20dd6:	2200      	movs	r2, #0
   20dd8:	601a      	str	r2, [r3, #0]
			return 0;
   20dda:	2300      	movs	r3, #0
   20ddc:	e04d      	b.n	20e7a <nmi_get_chipid+0xc6>
		}
		//if((ret = nm_read_reg_with_ret(0x11fc, &revid)) != M2M_SUCCESS) {
		//	return 0;
		//}
		if((nm_read_reg_with_ret(0x13f4, &rfrevid)) != M2M_SUCCESS) {
   20dde:	1d3b      	adds	r3, r7, #4
   20de0:	4a2a      	ldr	r2, [pc, #168]	; (20e8c <nmi_get_chipid+0xd8>)
   20de2:	0019      	movs	r1, r3
   20de4:	0010      	movs	r0, r2
   20de6:	4b28      	ldr	r3, [pc, #160]	; (20e88 <nmi_get_chipid+0xd4>)
   20de8:	4798      	blx	r3
   20dea:	1e03      	subs	r3, r0, #0
   20dec:	d004      	beq.n	20df8 <nmi_get_chipid+0x44>
			chipid = 0;
   20dee:	4b25      	ldr	r3, [pc, #148]	; (20e84 <nmi_get_chipid+0xd0>)
   20df0:	2200      	movs	r2, #0
   20df2:	601a      	str	r2, [r3, #0]
			return 0;
   20df4:	2300      	movs	r3, #0
   20df6:	e040      	b.n	20e7a <nmi_get_chipid+0xc6>
		}

		if (chipid == 0x1002a0)  {
   20df8:	4b22      	ldr	r3, [pc, #136]	; (20e84 <nmi_get_chipid+0xd0>)
   20dfa:	681b      	ldr	r3, [r3, #0]
   20dfc:	4a24      	ldr	r2, [pc, #144]	; (20e90 <nmi_get_chipid+0xdc>)
   20dfe:	4293      	cmp	r3, r2
   20e00:	d106      	bne.n	20e10 <nmi_get_chipid+0x5c>
			if (rfrevid == 0x1) { /* 1002A0 */
   20e02:	687b      	ldr	r3, [r7, #4]
   20e04:	2b01      	cmp	r3, #1
   20e06:	d029      	beq.n	20e5c <nmi_get_chipid+0xa8>
			} else /* if (rfrevid == 0x2) */ { /* 1002A1 */
				chipid = 0x1002a1;
   20e08:	4b1e      	ldr	r3, [pc, #120]	; (20e84 <nmi_get_chipid+0xd0>)
   20e0a:	4a22      	ldr	r2, [pc, #136]	; (20e94 <nmi_get_chipid+0xe0>)
   20e0c:	601a      	str	r2, [r3, #0]
   20e0e:	e025      	b.n	20e5c <nmi_get_chipid+0xa8>
			}
		} else if(chipid == 0x1002b0) {
   20e10:	4b1c      	ldr	r3, [pc, #112]	; (20e84 <nmi_get_chipid+0xd0>)
   20e12:	681b      	ldr	r3, [r3, #0]
   20e14:	4a20      	ldr	r2, [pc, #128]	; (20e98 <nmi_get_chipid+0xe4>)
   20e16:	4293      	cmp	r3, r2
   20e18:	d10d      	bne.n	20e36 <nmi_get_chipid+0x82>
			if(rfrevid == 3) { /* 1002B0 */
   20e1a:	687b      	ldr	r3, [r7, #4]
   20e1c:	2b03      	cmp	r3, #3
   20e1e:	d01d      	beq.n	20e5c <nmi_get_chipid+0xa8>
			} else if(rfrevid == 4) { /* 1002B1 */
   20e20:	687b      	ldr	r3, [r7, #4]
   20e22:	2b04      	cmp	r3, #4
   20e24:	d103      	bne.n	20e2e <nmi_get_chipid+0x7a>
				chipid = 0x1002b1;
   20e26:	4b17      	ldr	r3, [pc, #92]	; (20e84 <nmi_get_chipid+0xd0>)
   20e28:	4a1c      	ldr	r2, [pc, #112]	; (20e9c <nmi_get_chipid+0xe8>)
   20e2a:	601a      	str	r2, [r3, #0]
   20e2c:	e016      	b.n	20e5c <nmi_get_chipid+0xa8>
			} else /* if(rfrevid == 5) */ { /* 1002B2 */
				chipid = 0x1002b2;
   20e2e:	4b15      	ldr	r3, [pc, #84]	; (20e84 <nmi_get_chipid+0xd0>)
   20e30:	4a1b      	ldr	r2, [pc, #108]	; (20ea0 <nmi_get_chipid+0xec>)
   20e32:	601a      	str	r2, [r3, #0]
   20e34:	e012      	b.n	20e5c <nmi_get_chipid+0xa8>
			}
		}else if(chipid == 0x1000F0) { 
   20e36:	4b13      	ldr	r3, [pc, #76]	; (20e84 <nmi_get_chipid+0xd0>)
   20e38:	681b      	ldr	r3, [r3, #0]
   20e3a:	4a1a      	ldr	r2, [pc, #104]	; (20ea4 <nmi_get_chipid+0xf0>)
   20e3c:	4293      	cmp	r3, r2
   20e3e:	d10d      	bne.n	20e5c <nmi_get_chipid+0xa8>
			if((nm_read_reg_with_ret(0x3B0000, &chipid)) != M2M_SUCCESS) {
   20e40:	4a10      	ldr	r2, [pc, #64]	; (20e84 <nmi_get_chipid+0xd0>)
   20e42:	23ec      	movs	r3, #236	; 0xec
   20e44:	039b      	lsls	r3, r3, #14
   20e46:	0011      	movs	r1, r2
   20e48:	0018      	movs	r0, r3
   20e4a:	4b0f      	ldr	r3, [pc, #60]	; (20e88 <nmi_get_chipid+0xd4>)
   20e4c:	4798      	blx	r3
   20e4e:	1e03      	subs	r3, r0, #0
   20e50:	d004      	beq.n	20e5c <nmi_get_chipid+0xa8>
			chipid = 0;
   20e52:	4b0c      	ldr	r3, [pc, #48]	; (20e84 <nmi_get_chipid+0xd0>)
   20e54:	2200      	movs	r2, #0
   20e56:	601a      	str	r2, [r3, #0]
			return 0;
   20e58:	2300      	movs	r3, #0
   20e5a:	e00e      	b.n	20e7a <nmi_get_chipid+0xc6>
				chipid |= 0x050000;
			}
		}
#else
		/*M2M is by default have SPI flash*/
		chipid &= ~(0x0f0000);
   20e5c:	4b09      	ldr	r3, [pc, #36]	; (20e84 <nmi_get_chipid+0xd0>)
   20e5e:	681b      	ldr	r3, [r3, #0]
   20e60:	4a11      	ldr	r2, [pc, #68]	; (20ea8 <nmi_get_chipid+0xf4>)
   20e62:	401a      	ands	r2, r3
   20e64:	4b07      	ldr	r3, [pc, #28]	; (20e84 <nmi_get_chipid+0xd0>)
   20e66:	601a      	str	r2, [r3, #0]
		chipid |= 0x050000;
   20e68:	4b06      	ldr	r3, [pc, #24]	; (20e84 <nmi_get_chipid+0xd0>)
   20e6a:	681b      	ldr	r3, [r3, #0]
   20e6c:	22a0      	movs	r2, #160	; 0xa0
   20e6e:	02d2      	lsls	r2, r2, #11
   20e70:	431a      	orrs	r2, r3
   20e72:	4b04      	ldr	r3, [pc, #16]	; (20e84 <nmi_get_chipid+0xd0>)
   20e74:	601a      	str	r2, [r3, #0]
#endif /* PROBE_FLASH */
	}
	return chipid;
   20e76:	4b03      	ldr	r3, [pc, #12]	; (20e84 <nmi_get_chipid+0xd0>)
   20e78:	681b      	ldr	r3, [r3, #0]
}
   20e7a:	0018      	movs	r0, r3
   20e7c:	46bd      	mov	sp, r7
   20e7e:	b002      	add	sp, #8
   20e80:	bd80      	pop	{r7, pc}
   20e82:	46c0      	nop			; (mov r8, r8)
   20e84:	20003d48 	.word	0x20003d48
   20e88:	000214b5 	.word	0x000214b5
   20e8c:	000013f4 	.word	0x000013f4
   20e90:	001002a0 	.word	0x001002a0
   20e94:	001002a1 	.word	0x001002a1
   20e98:	001002b0 	.word	0x001002b0
   20e9c:	001002b1 	.word	0x001002b1
   20ea0:	001002b2 	.word	0x001002b2
   20ea4:	001000f0 	.word	0x001000f0
   20ea8:	fff0ffff 	.word	0xfff0ffff

00020eac <chip_sleep>:

	/* Do PLL update */
	nmi_update_pll();
}
sint8 chip_sleep(void)
{
   20eac:	b590      	push	{r4, r7, lr}
   20eae:	b083      	sub	sp, #12
   20eb0:	af00      	add	r7, sp, #0
	uint32 reg;
	sint8 ret = M2M_SUCCESS;
   20eb2:	1dfb      	adds	r3, r7, #7
   20eb4:	2200      	movs	r2, #0
   20eb6:	701a      	strb	r2, [r3, #0]
	
	while(1)
	{
		ret = nm_read_reg_with_ret(CORT_HOST_COMM,&reg);
   20eb8:	1dfc      	adds	r4, r7, #7
   20eba:	003b      	movs	r3, r7
   20ebc:	0019      	movs	r1, r3
   20ebe:	2010      	movs	r0, #16
   20ec0:	4b2e      	ldr	r3, [pc, #184]	; (20f7c <chip_sleep+0xd0>)
   20ec2:	4798      	blx	r3
   20ec4:	0003      	movs	r3, r0
   20ec6:	7023      	strb	r3, [r4, #0]
		if(ret != M2M_SUCCESS) goto ERR1;
   20ec8:	1dfb      	adds	r3, r7, #7
   20eca:	781b      	ldrb	r3, [r3, #0]
   20ecc:	b25b      	sxtb	r3, r3
   20ece:	2b00      	cmp	r3, #0
   20ed0:	d145      	bne.n	20f5e <chip_sleep+0xb2>
		if((reg & NBIT0) == 0) break;
   20ed2:	683b      	ldr	r3, [r7, #0]
   20ed4:	2201      	movs	r2, #1
   20ed6:	4013      	ands	r3, r2
   20ed8:	d000      	beq.n	20edc <chip_sleep+0x30>
		ret = nm_read_reg_with_ret(CORT_HOST_COMM,&reg);
   20eda:	e7ed      	b.n	20eb8 <chip_sleep+0xc>
		if((reg & NBIT0) == 0) break;
   20edc:	46c0      	nop			; (mov r8, r8)
	}
	
	/* Clear bit 1 */
	ret = nm_read_reg_with_ret(WAKE_CLK_REG, &reg);
   20ede:	1dfc      	adds	r4, r7, #7
   20ee0:	003b      	movs	r3, r7
   20ee2:	0019      	movs	r1, r3
   20ee4:	2001      	movs	r0, #1
   20ee6:	4b25      	ldr	r3, [pc, #148]	; (20f7c <chip_sleep+0xd0>)
   20ee8:	4798      	blx	r3
   20eea:	0003      	movs	r3, r0
   20eec:	7023      	strb	r3, [r4, #0]
	if(ret != M2M_SUCCESS)goto ERR1;
   20eee:	1dfb      	adds	r3, r7, #7
   20ef0:	781b      	ldrb	r3, [r3, #0]
   20ef2:	b25b      	sxtb	r3, r3
   20ef4:	2b00      	cmp	r3, #0
   20ef6:	d134      	bne.n	20f62 <chip_sleep+0xb6>
	if(reg & NBIT1)
   20ef8:	683b      	ldr	r3, [r7, #0]
   20efa:	2202      	movs	r2, #2
   20efc:	4013      	ands	r3, r2
   20efe:	d010      	beq.n	20f22 <chip_sleep+0x76>
	{
		reg &=~NBIT1;
   20f00:	683b      	ldr	r3, [r7, #0]
   20f02:	2202      	movs	r2, #2
   20f04:	4393      	bics	r3, r2
   20f06:	603b      	str	r3, [r7, #0]
		ret = nm_write_reg(WAKE_CLK_REG, reg);
   20f08:	683b      	ldr	r3, [r7, #0]
   20f0a:	1dfc      	adds	r4, r7, #7
   20f0c:	0019      	movs	r1, r3
   20f0e:	2001      	movs	r0, #1
   20f10:	4b1b      	ldr	r3, [pc, #108]	; (20f80 <chip_sleep+0xd4>)
   20f12:	4798      	blx	r3
   20f14:	0003      	movs	r3, r0
   20f16:	7023      	strb	r3, [r4, #0]
		if(ret != M2M_SUCCESS)goto ERR1;
   20f18:	1dfb      	adds	r3, r7, #7
   20f1a:	781b      	ldrb	r3, [r3, #0]
   20f1c:	b25b      	sxtb	r3, r3
   20f1e:	2b00      	cmp	r3, #0
   20f20:	d121      	bne.n	20f66 <chip_sleep+0xba>
	}
	
	ret = nm_read_reg_with_ret(HOST_CORT_COMM, &reg);
   20f22:	1dfc      	adds	r4, r7, #7
   20f24:	003b      	movs	r3, r7
   20f26:	0019      	movs	r1, r3
   20f28:	200b      	movs	r0, #11
   20f2a:	4b14      	ldr	r3, [pc, #80]	; (20f7c <chip_sleep+0xd0>)
   20f2c:	4798      	blx	r3
   20f2e:	0003      	movs	r3, r0
   20f30:	7023      	strb	r3, [r4, #0]
	if(ret != M2M_SUCCESS)goto ERR1;
   20f32:	1dfb      	adds	r3, r7, #7
   20f34:	781b      	ldrb	r3, [r3, #0]
   20f36:	b25b      	sxtb	r3, r3
   20f38:	2b00      	cmp	r3, #0
   20f3a:	d116      	bne.n	20f6a <chip_sleep+0xbe>
	if(reg & NBIT0)
   20f3c:	683b      	ldr	r3, [r7, #0]
   20f3e:	2201      	movs	r2, #1
   20f40:	4013      	ands	r3, r2
   20f42:	d013      	beq.n	20f6c <chip_sleep+0xc0>
	{
		reg &= ~NBIT0;
   20f44:	683b      	ldr	r3, [r7, #0]
   20f46:	2201      	movs	r2, #1
   20f48:	4393      	bics	r3, r2
   20f4a:	603b      	str	r3, [r7, #0]
		ret = nm_write_reg(HOST_CORT_COMM, reg);
   20f4c:	683b      	ldr	r3, [r7, #0]
   20f4e:	1dfc      	adds	r4, r7, #7
   20f50:	0019      	movs	r1, r3
   20f52:	200b      	movs	r0, #11
   20f54:	4b0a      	ldr	r3, [pc, #40]	; (20f80 <chip_sleep+0xd4>)
   20f56:	4798      	blx	r3
   20f58:	0003      	movs	r3, r0
   20f5a:	7023      	strb	r3, [r4, #0]
   20f5c:	e006      	b.n	20f6c <chip_sleep+0xc0>
		if(ret != M2M_SUCCESS) goto ERR1;
   20f5e:	46c0      	nop			; (mov r8, r8)
   20f60:	e004      	b.n	20f6c <chip_sleep+0xc0>
	if(ret != M2M_SUCCESS)goto ERR1;
   20f62:	46c0      	nop			; (mov r8, r8)
   20f64:	e002      	b.n	20f6c <chip_sleep+0xc0>
		if(ret != M2M_SUCCESS)goto ERR1;
   20f66:	46c0      	nop			; (mov r8, r8)
   20f68:	e000      	b.n	20f6c <chip_sleep+0xc0>
	if(ret != M2M_SUCCESS)goto ERR1;
   20f6a:	46c0      	nop			; (mov r8, r8)
		if(ret != M2M_SUCCESS)goto ERR1;
	}

ERR1:
	return ret;
   20f6c:	1dfb      	adds	r3, r7, #7
   20f6e:	781b      	ldrb	r3, [r3, #0]
   20f70:	b25b      	sxtb	r3, r3
}
   20f72:	0018      	movs	r0, r3
   20f74:	46bd      	mov	sp, r7
   20f76:	b003      	add	sp, #12
   20f78:	bd90      	pop	{r4, r7, pc}
   20f7a:	46c0      	nop			; (mov r8, r8)
   20f7c:	000214b5 	.word	0x000214b5
   20f80:	000214d9 	.word	0x000214d9

00020f84 <chip_wake>:
sint8 chip_wake(void)
{
   20f84:	b590      	push	{r4, r7, lr}
   20f86:	b085      	sub	sp, #20
   20f88:	af00      	add	r7, sp, #0
	sint8 ret = M2M_SUCCESS;
   20f8a:	230f      	movs	r3, #15
   20f8c:	18fb      	adds	r3, r7, r3
   20f8e:	2200      	movs	r2, #0
   20f90:	701a      	strb	r2, [r3, #0]
	uint32 reg = 0, clk_status_reg = 0,trials = 0;
   20f92:	2300      	movs	r3, #0
   20f94:	607b      	str	r3, [r7, #4]
   20f96:	2300      	movs	r3, #0
   20f98:	603b      	str	r3, [r7, #0]
   20f9a:	2300      	movs	r3, #0
   20f9c:	60bb      	str	r3, [r7, #8]

	ret = nm_read_reg_with_ret(HOST_CORT_COMM, &reg);
   20f9e:	230f      	movs	r3, #15
   20fa0:	18fc      	adds	r4, r7, r3
   20fa2:	1d3b      	adds	r3, r7, #4
   20fa4:	0019      	movs	r1, r3
   20fa6:	200b      	movs	r0, #11
   20fa8:	4b4e      	ldr	r3, [pc, #312]	; (210e4 <chip_wake+0x160>)
   20faa:	4798      	blx	r3
   20fac:	0003      	movs	r3, r0
   20fae:	7023      	strb	r3, [r4, #0]
	if(ret != M2M_SUCCESS)goto _WAKE_EXIT;
   20fb0:	230f      	movs	r3, #15
   20fb2:	18fb      	adds	r3, r7, r3
   20fb4:	781b      	ldrb	r3, [r3, #0]
   20fb6:	b25b      	sxtb	r3, r3
   20fb8:	2b00      	cmp	r3, #0
   20fba:	d000      	beq.n	20fbe <chip_wake+0x3a>
   20fbc:	e082      	b.n	210c4 <chip_wake+0x140>
	
	if(!(reg & NBIT0))
   20fbe:	687b      	ldr	r3, [r7, #4]
   20fc0:	2201      	movs	r2, #1
   20fc2:	4013      	ands	r3, r2
   20fc4:	d111      	bne.n	20fea <chip_wake+0x66>
	{
		/*USE bit 0 to indicate host wakeup*/
		ret = nm_write_reg(HOST_CORT_COMM, reg|NBIT0);
   20fc6:	687b      	ldr	r3, [r7, #4]
   20fc8:	2201      	movs	r2, #1
   20fca:	4313      	orrs	r3, r2
   20fcc:	220f      	movs	r2, #15
   20fce:	18bc      	adds	r4, r7, r2
   20fd0:	0019      	movs	r1, r3
   20fd2:	200b      	movs	r0, #11
   20fd4:	4b44      	ldr	r3, [pc, #272]	; (210e8 <chip_wake+0x164>)
   20fd6:	4798      	blx	r3
   20fd8:	0003      	movs	r3, r0
   20fda:	7023      	strb	r3, [r4, #0]
		if(ret != M2M_SUCCESS)goto _WAKE_EXIT;
   20fdc:	230f      	movs	r3, #15
   20fde:	18fb      	adds	r3, r7, r3
   20fe0:	781b      	ldrb	r3, [r3, #0]
   20fe2:	b25b      	sxtb	r3, r3
   20fe4:	2b00      	cmp	r3, #0
   20fe6:	d000      	beq.n	20fea <chip_wake+0x66>
   20fe8:	e06e      	b.n	210c8 <chip_wake+0x144>
	}
		
	ret = nm_read_reg_with_ret(WAKE_CLK_REG, &reg);
   20fea:	230f      	movs	r3, #15
   20fec:	18fc      	adds	r4, r7, r3
   20fee:	1d3b      	adds	r3, r7, #4
   20ff0:	0019      	movs	r1, r3
   20ff2:	2001      	movs	r0, #1
   20ff4:	4b3b      	ldr	r3, [pc, #236]	; (210e4 <chip_wake+0x160>)
   20ff6:	4798      	blx	r3
   20ff8:	0003      	movs	r3, r0
   20ffa:	7023      	strb	r3, [r4, #0]
	if(ret != M2M_SUCCESS)goto _WAKE_EXIT;
   20ffc:	230f      	movs	r3, #15
   20ffe:	18fb      	adds	r3, r7, r3
   21000:	781b      	ldrb	r3, [r3, #0]
   21002:	b25b      	sxtb	r3, r3
   21004:	2b00      	cmp	r3, #0
   21006:	d161      	bne.n	210cc <chip_wake+0x148>
	/* Set bit 1 */
	if(!(reg & NBIT1))
   21008:	687b      	ldr	r3, [r7, #4]
   2100a:	2202      	movs	r2, #2
   2100c:	4013      	ands	r3, r2
   2100e:	d110      	bne.n	21032 <chip_wake+0xae>
	{
		ret = nm_write_reg(WAKE_CLK_REG, reg | NBIT1);
   21010:	687b      	ldr	r3, [r7, #4]
   21012:	2202      	movs	r2, #2
   21014:	4313      	orrs	r3, r2
   21016:	220f      	movs	r2, #15
   21018:	18bc      	adds	r4, r7, r2
   2101a:	0019      	movs	r1, r3
   2101c:	2001      	movs	r0, #1
   2101e:	4b32      	ldr	r3, [pc, #200]	; (210e8 <chip_wake+0x164>)
   21020:	4798      	blx	r3
   21022:	0003      	movs	r3, r0
   21024:	7023      	strb	r3, [r4, #0]
		if(ret != M2M_SUCCESS) goto _WAKE_EXIT;	
   21026:	230f      	movs	r3, #15
   21028:	18fb      	adds	r3, r7, r3
   2102a:	781b      	ldrb	r3, [r3, #0]
   2102c:	b25b      	sxtb	r3, r3
   2102e:	2b00      	cmp	r3, #0
   21030:	d14e      	bne.n	210d0 <chip_wake+0x14c>
	}

	do
	{
		ret = nm_read_reg_with_ret(CLOCKS_EN_REG, &clk_status_reg);
   21032:	230f      	movs	r3, #15
   21034:	18fc      	adds	r4, r7, r3
   21036:	003b      	movs	r3, r7
   21038:	0019      	movs	r1, r3
   2103a:	200f      	movs	r0, #15
   2103c:	4b29      	ldr	r3, [pc, #164]	; (210e4 <chip_wake+0x160>)
   2103e:	4798      	blx	r3
   21040:	0003      	movs	r3, r0
   21042:	7023      	strb	r3, [r4, #0]
		if(ret != M2M_SUCCESS) {
   21044:	230f      	movs	r3, #15
   21046:	18fb      	adds	r3, r7, r3
   21048:	781b      	ldrb	r3, [r3, #0]
   2104a:	b25b      	sxtb	r3, r3
   2104c:	2b00      	cmp	r3, #0
   2104e:	d014      	beq.n	2107a <chip_wake+0xf6>
			M2M_ERR("Bus error (5).%d %lx\n",ret,clk_status_reg);
   21050:	23a8      	movs	r3, #168	; 0xa8
   21052:	005a      	lsls	r2, r3, #1
   21054:	4925      	ldr	r1, [pc, #148]	; (210ec <chip_wake+0x168>)
   21056:	4b26      	ldr	r3, [pc, #152]	; (210f0 <chip_wake+0x16c>)
   21058:	0018      	movs	r0, r3
   2105a:	4b26      	ldr	r3, [pc, #152]	; (210f4 <chip_wake+0x170>)
   2105c:	4798      	blx	r3
   2105e:	230f      	movs	r3, #15
   21060:	18fb      	adds	r3, r7, r3
   21062:	2100      	movs	r1, #0
   21064:	5659      	ldrsb	r1, [r3, r1]
   21066:	683a      	ldr	r2, [r7, #0]
   21068:	4b23      	ldr	r3, [pc, #140]	; (210f8 <chip_wake+0x174>)
   2106a:	0018      	movs	r0, r3
   2106c:	4b21      	ldr	r3, [pc, #132]	; (210f4 <chip_wake+0x170>)
   2106e:	4798      	blx	r3
   21070:	4b22      	ldr	r3, [pc, #136]	; (210fc <chip_wake+0x178>)
   21072:	0018      	movs	r0, r3
   21074:	4b1f      	ldr	r3, [pc, #124]	; (210f4 <chip_wake+0x170>)
   21076:	4798      	blx	r3
			goto _WAKE_EXIT;
   21078:	e02b      	b.n	210d2 <chip_wake+0x14e>
		}
		if(clk_status_reg & NBIT2) {
   2107a:	683b      	ldr	r3, [r7, #0]
   2107c:	2204      	movs	r2, #4
   2107e:	4013      	ands	r3, r2
   21080:	d11c      	bne.n	210bc <chip_wake+0x138>
			break;
		}
		nm_bsp_sleep(2);
   21082:	2002      	movs	r0, #2
   21084:	4b1e      	ldr	r3, [pc, #120]	; (21100 <chip_wake+0x17c>)
   21086:	4798      	blx	r3
		trials++;
   21088:	68bb      	ldr	r3, [r7, #8]
   2108a:	3301      	adds	r3, #1
   2108c:	60bb      	str	r3, [r7, #8]
		if(trials > WAKUP_TRAILS_TIMEOUT)
   2108e:	68bb      	ldr	r3, [r7, #8]
   21090:	2b04      	cmp	r3, #4
   21092:	d9ce      	bls.n	21032 <chip_wake+0xae>
		{
			M2M_ERR("Failed to wakup the chip\n");
   21094:	23ad      	movs	r3, #173	; 0xad
   21096:	005a      	lsls	r2, r3, #1
   21098:	4914      	ldr	r1, [pc, #80]	; (210ec <chip_wake+0x168>)
   2109a:	4b15      	ldr	r3, [pc, #84]	; (210f0 <chip_wake+0x16c>)
   2109c:	0018      	movs	r0, r3
   2109e:	4b15      	ldr	r3, [pc, #84]	; (210f4 <chip_wake+0x170>)
   210a0:	4798      	blx	r3
   210a2:	4b18      	ldr	r3, [pc, #96]	; (21104 <chip_wake+0x180>)
   210a4:	0018      	movs	r0, r3
   210a6:	4b13      	ldr	r3, [pc, #76]	; (210f4 <chip_wake+0x170>)
   210a8:	4798      	blx	r3
   210aa:	4b14      	ldr	r3, [pc, #80]	; (210fc <chip_wake+0x178>)
   210ac:	0018      	movs	r0, r3
   210ae:	4b11      	ldr	r3, [pc, #68]	; (210f4 <chip_wake+0x170>)
   210b0:	4798      	blx	r3
			ret = M2M_ERR_TIME_OUT;
   210b2:	230f      	movs	r3, #15
   210b4:	18fb      	adds	r3, r7, r3
   210b6:	22fc      	movs	r2, #252	; 0xfc
   210b8:	701a      	strb	r2, [r3, #0]
			goto _WAKE_EXIT;
   210ba:	e00a      	b.n	210d2 <chip_wake+0x14e>
			break;
   210bc:	46c0      	nop			; (mov r8, r8)
		}
	}while(1);
	
	/*workaround sometimes spi fail to read clock regs after reading/writing clockless registers*/
	nm_bus_reset();
   210be:	4b12      	ldr	r3, [pc, #72]	; (21108 <chip_wake+0x184>)
   210c0:	4798      	blx	r3
   210c2:	e006      	b.n	210d2 <chip_wake+0x14e>
	if(ret != M2M_SUCCESS)goto _WAKE_EXIT;
   210c4:	46c0      	nop			; (mov r8, r8)
   210c6:	e004      	b.n	210d2 <chip_wake+0x14e>
		if(ret != M2M_SUCCESS)goto _WAKE_EXIT;
   210c8:	46c0      	nop			; (mov r8, r8)
   210ca:	e002      	b.n	210d2 <chip_wake+0x14e>
	if(ret != M2M_SUCCESS)goto _WAKE_EXIT;
   210cc:	46c0      	nop			; (mov r8, r8)
   210ce:	e000      	b.n	210d2 <chip_wake+0x14e>
		if(ret != M2M_SUCCESS) goto _WAKE_EXIT;	
   210d0:	46c0      	nop			; (mov r8, r8)
	
_WAKE_EXIT:
	return ret;
   210d2:	230f      	movs	r3, #15
   210d4:	18fb      	adds	r3, r7, r3
   210d6:	781b      	ldrb	r3, [r3, #0]
   210d8:	b25b      	sxtb	r3, r3
}
   210da:	0018      	movs	r0, r3
   210dc:	46bd      	mov	sp, r7
   210de:	b005      	add	sp, #20
   210e0:	bd90      	pop	{r4, r7, pc}
   210e2:	46c0      	nop			; (mov r8, r8)
   210e4:	000214b5 	.word	0x000214b5
   210e8:	000214d9 	.word	0x000214d9
   210ec:	00036fb8 	.word	0x00036fb8
   210f0:	00036f2c 	.word	0x00036f2c
   210f4:	0001c65d 	.word	0x0001c65d
   210f8:	00036f40 	.word	0x00036f40
   210fc:	00036f58 	.word	0x00036f58
   21100:	0001eb45 	.word	0x0001eb45
   21104:	00036f5c 	.word	0x00036f5c
   21108:	00021475 	.word	0x00021475

0002110c <wait_for_bootrom>:
	nm_bsp_sleep(50);
	return ret;
}

sint8 wait_for_bootrom(uint8 arg)
{
   2110c:	b580      	push	{r7, lr}
   2110e:	b088      	sub	sp, #32
   21110:	af00      	add	r7, sp, #0
   21112:	0002      	movs	r2, r0
   21114:	1dfb      	adds	r3, r7, #7
   21116:	701a      	strb	r2, [r3, #0]
	sint8 ret = M2M_SUCCESS;
   21118:	2313      	movs	r3, #19
   2111a:	18fb      	adds	r3, r7, r3
   2111c:	2200      	movs	r2, #0
   2111e:	701a      	strb	r2, [r3, #0]
	uint32 reg = 0, cnt = 0;
   21120:	2300      	movs	r3, #0
   21122:	61fb      	str	r3, [r7, #28]
   21124:	2300      	movs	r3, #0
   21126:	61bb      	str	r3, [r7, #24]
	uint32 u32GpReg1 = 0;
   21128:	2300      	movs	r3, #0
   2112a:	617b      	str	r3, [r7, #20]
	uint32 u32DriverVerInfo = M2M_MAKE_VERSION_INFO(M2M_RELEASE_VERSION_MAJOR_NO,\
   2112c:	4b4a      	ldr	r3, [pc, #296]	; (21258 <wait_for_bootrom+0x14c>)
   2112e:	60fb      	str	r3, [r7, #12]
				M2M_RELEASE_VERSION_MINOR_NO, M2M_RELEASE_VERSION_PATCH_NO,\
				M2M_MIN_REQ_DRV_VERSION_MAJOR_NO, M2M_MIN_REQ_DRV_VERSION_MINOR_NO,\
				M2M_MIN_REQ_DRV_VERSION_PATCH_NO);


	reg = 0;
   21130:	2300      	movs	r3, #0
   21132:	61fb      	str	r3, [r7, #28]
	while(1) {
		reg = nm_read_reg(0x1014);	/* wait for efuse loading done */
   21134:	4b49      	ldr	r3, [pc, #292]	; (2125c <wait_for_bootrom+0x150>)
   21136:	0018      	movs	r0, r3
   21138:	4b49      	ldr	r3, [pc, #292]	; (21260 <wait_for_bootrom+0x154>)
   2113a:	4798      	blx	r3
   2113c:	0003      	movs	r3, r0
   2113e:	61fb      	str	r3, [r7, #28]
		if (reg & 0x80000000) {
   21140:	69fb      	ldr	r3, [r7, #28]
   21142:	2b00      	cmp	r3, #0
   21144:	db03      	blt.n	2114e <wait_for_bootrom+0x42>
			break;
		}
		nm_bsp_sleep(1); /* TODO: Why bus error if this delay is not here. */
   21146:	2001      	movs	r0, #1
   21148:	4b46      	ldr	r3, [pc, #280]	; (21264 <wait_for_bootrom+0x158>)
   2114a:	4798      	blx	r3
		reg = nm_read_reg(0x1014);	/* wait for efuse loading done */
   2114c:	e7f2      	b.n	21134 <wait_for_bootrom+0x28>
			break;
   2114e:	46c0      	nop			; (mov r8, r8)
	}
	reg = nm_read_reg(M2M_WAIT_FOR_HOST_REG);
   21150:	4b45      	ldr	r3, [pc, #276]	; (21268 <wait_for_bootrom+0x15c>)
   21152:	0018      	movs	r0, r3
   21154:	4b42      	ldr	r3, [pc, #264]	; (21260 <wait_for_bootrom+0x154>)
   21156:	4798      	blx	r3
   21158:	0003      	movs	r3, r0
   2115a:	61fb      	str	r3, [r7, #28]
	reg &= 0x1;
   2115c:	69fb      	ldr	r3, [r7, #28]
   2115e:	2201      	movs	r2, #1
   21160:	4013      	ands	r3, r2
   21162:	61fb      	str	r3, [r7, #28]

	/* check if waiting for the host will be skipped or not */
	if(reg == 0)
   21164:	69fb      	ldr	r3, [r7, #28]
   21166:	2b00      	cmp	r3, #0
   21168:	d112      	bne.n	21190 <wait_for_bootrom+0x84>
	{
		reg = 0;
   2116a:	2300      	movs	r3, #0
   2116c:	61fb      	str	r3, [r7, #28]
		while(reg != M2M_FINISH_BOOT_ROM)
   2116e:	e00b      	b.n	21188 <wait_for_bootrom+0x7c>
		{
			nm_bsp_sleep(1);
   21170:	2001      	movs	r0, #1
   21172:	4b3c      	ldr	r3, [pc, #240]	; (21264 <wait_for_bootrom+0x158>)
   21174:	4798      	blx	r3
			reg = nm_read_reg(BOOTROM_REG);
   21176:	4b3d      	ldr	r3, [pc, #244]	; (2126c <wait_for_bootrom+0x160>)
   21178:	0018      	movs	r0, r3
   2117a:	4b39      	ldr	r3, [pc, #228]	; (21260 <wait_for_bootrom+0x154>)
   2117c:	4798      	blx	r3
   2117e:	0003      	movs	r3, r0
   21180:	61fb      	str	r3, [r7, #28]

			if(++cnt > TIMEOUT)
   21182:	69bb      	ldr	r3, [r7, #24]
   21184:	3301      	adds	r3, #1
   21186:	61bb      	str	r3, [r7, #24]
		while(reg != M2M_FINISH_BOOT_ROM)
   21188:	69fb      	ldr	r3, [r7, #28]
   2118a:	4a39      	ldr	r2, [pc, #228]	; (21270 <wait_for_bootrom+0x164>)
   2118c:	4293      	cmp	r3, r2
   2118e:	d1ef      	bne.n	21170 <wait_for_bootrom+0x64>
				goto ERR2;
			}
		}
	}
	
	if(M2M_WIFI_MODE_ATE_HIGH == arg) {
   21190:	1dfb      	adds	r3, r7, #7
   21192:	781b      	ldrb	r3, [r3, #0]
   21194:	2b02      	cmp	r3, #2
   21196:	d10d      	bne.n	211b4 <wait_for_bootrom+0xa8>
		nm_write_reg(NMI_REV_REG, M2M_ATE_FW_START_VALUE);
   21198:	4a36      	ldr	r2, [pc, #216]	; (21274 <wait_for_bootrom+0x168>)
   2119a:	4b37      	ldr	r3, [pc, #220]	; (21278 <wait_for_bootrom+0x16c>)
   2119c:	0011      	movs	r1, r2
   2119e:	0018      	movs	r0, r3
   211a0:	4b36      	ldr	r3, [pc, #216]	; (2127c <wait_for_bootrom+0x170>)
   211a2:	4798      	blx	r3
		nm_write_reg(NMI_STATE_REG, NBIT20);
   211a4:	2380      	movs	r3, #128	; 0x80
   211a6:	035b      	lsls	r3, r3, #13
   211a8:	4a35      	ldr	r2, [pc, #212]	; (21280 <wait_for_bootrom+0x174>)
   211aa:	0019      	movs	r1, r3
   211ac:	0010      	movs	r0, r2
   211ae:	4b33      	ldr	r3, [pc, #204]	; (2127c <wait_for_bootrom+0x170>)
   211b0:	4798      	blx	r3
   211b2:	e022      	b.n	211fa <wait_for_bootrom+0xee>
	}else if(M2M_WIFI_MODE_ATE_LOW == arg) {
   211b4:	1dfb      	adds	r3, r7, #7
   211b6:	781b      	ldrb	r3, [r3, #0]
   211b8:	2b03      	cmp	r3, #3
   211ba:	d10b      	bne.n	211d4 <wait_for_bootrom+0xc8>
		nm_write_reg(NMI_REV_REG, M2M_ATE_FW_START_VALUE);
   211bc:	4a2d      	ldr	r2, [pc, #180]	; (21274 <wait_for_bootrom+0x168>)
   211be:	4b2e      	ldr	r3, [pc, #184]	; (21278 <wait_for_bootrom+0x16c>)
   211c0:	0011      	movs	r1, r2
   211c2:	0018      	movs	r0, r3
   211c4:	4b2d      	ldr	r3, [pc, #180]	; (2127c <wait_for_bootrom+0x170>)
   211c6:	4798      	blx	r3
		nm_write_reg(NMI_STATE_REG, 0);
   211c8:	4b2d      	ldr	r3, [pc, #180]	; (21280 <wait_for_bootrom+0x174>)
   211ca:	2100      	movs	r1, #0
   211cc:	0018      	movs	r0, r3
   211ce:	4b2b      	ldr	r3, [pc, #172]	; (2127c <wait_for_bootrom+0x170>)
   211d0:	4798      	blx	r3
   211d2:	e012      	b.n	211fa <wait_for_bootrom+0xee>
	}else if(M2M_WIFI_MODE_ETHERNET == arg){
   211d4:	1dfb      	adds	r3, r7, #7
   211d6:	781b      	ldrb	r3, [r3, #0]
   211d8:	2b04      	cmp	r3, #4
   211da:	d108      	bne.n	211ee <wait_for_bootrom+0xe2>
		u32GpReg1 = rHAVE_ETHERNET_MODE_BIT;
   211dc:	2380      	movs	r3, #128	; 0x80
   211de:	617b      	str	r3, [r7, #20]
		nm_write_reg(NMI_STATE_REG, u32DriverVerInfo);
   211e0:	68fb      	ldr	r3, [r7, #12]
   211e2:	4a27      	ldr	r2, [pc, #156]	; (21280 <wait_for_bootrom+0x174>)
   211e4:	0019      	movs	r1, r3
   211e6:	0010      	movs	r0, r2
   211e8:	4b24      	ldr	r3, [pc, #144]	; (2127c <wait_for_bootrom+0x170>)
   211ea:	4798      	blx	r3
   211ec:	e005      	b.n	211fa <wait_for_bootrom+0xee>
	} else {
		/*bypass this step*/
		nm_write_reg(NMI_STATE_REG, u32DriverVerInfo);
   211ee:	68fb      	ldr	r3, [r7, #12]
   211f0:	4a23      	ldr	r2, [pc, #140]	; (21280 <wait_for_bootrom+0x174>)
   211f2:	0019      	movs	r1, r3
   211f4:	0010      	movs	r0, r2
   211f6:	4b21      	ldr	r3, [pc, #132]	; (2127c <wait_for_bootrom+0x170>)
   211f8:	4798      	blx	r3
	}

	if(REV(nmi_get_chipid()) >= REV_3A0){
   211fa:	4b22      	ldr	r3, [pc, #136]	; (21284 <wait_for_bootrom+0x178>)
   211fc:	4798      	blx	r3
   211fe:	0003      	movs	r3, r0
   21200:	051b      	lsls	r3, r3, #20
   21202:	0d1b      	lsrs	r3, r3, #20
   21204:	4a20      	ldr	r2, [pc, #128]	; (21288 <wait_for_bootrom+0x17c>)
   21206:	4293      	cmp	r3, r2
   21208:	d906      	bls.n	21218 <wait_for_bootrom+0x10c>
		chip_apply_conf(u32GpReg1 | rHAVE_USE_PMU_BIT);
   2120a:	697b      	ldr	r3, [r7, #20]
   2120c:	2202      	movs	r2, #2
   2120e:	4313      	orrs	r3, r2
   21210:	0018      	movs	r0, r3
   21212:	4b1e      	ldr	r3, [pc, #120]	; (2128c <wait_for_bootrom+0x180>)
   21214:	4798      	blx	r3
   21216:	e003      	b.n	21220 <wait_for_bootrom+0x114>
	} else {
		chip_apply_conf(u32GpReg1);
   21218:	697b      	ldr	r3, [r7, #20]
   2121a:	0018      	movs	r0, r3
   2121c:	4b1b      	ldr	r3, [pc, #108]	; (2128c <wait_for_bootrom+0x180>)
   2121e:	4798      	blx	r3
	}
	M2M_INFO("DriverVerInfo: 0x%08lx\n",u32DriverVerInfo);
   21220:	4b1b      	ldr	r3, [pc, #108]	; (21290 <wait_for_bootrom+0x184>)
   21222:	0018      	movs	r0, r3
   21224:	4b1b      	ldr	r3, [pc, #108]	; (21294 <wait_for_bootrom+0x188>)
   21226:	4798      	blx	r3
   21228:	68fa      	ldr	r2, [r7, #12]
   2122a:	4b1b      	ldr	r3, [pc, #108]	; (21298 <wait_for_bootrom+0x18c>)
   2122c:	0011      	movs	r1, r2
   2122e:	0018      	movs	r0, r3
   21230:	4b18      	ldr	r3, [pc, #96]	; (21294 <wait_for_bootrom+0x188>)
   21232:	4798      	blx	r3
   21234:	4b19      	ldr	r3, [pc, #100]	; (2129c <wait_for_bootrom+0x190>)
   21236:	0018      	movs	r0, r3
   21238:	4b16      	ldr	r3, [pc, #88]	; (21294 <wait_for_bootrom+0x188>)
   2123a:	4798      	blx	r3

	nm_write_reg(BOOTROM_REG,M2M_START_FIRMWARE);
   2123c:	4a18      	ldr	r2, [pc, #96]	; (212a0 <wait_for_bootrom+0x194>)
   2123e:	4b0b      	ldr	r3, [pc, #44]	; (2126c <wait_for_bootrom+0x160>)
   21240:	0011      	movs	r1, r2
   21242:	0018      	movs	r0, r3
   21244:	4b0d      	ldr	r3, [pc, #52]	; (2127c <wait_for_bootrom+0x170>)
   21246:	4798      	blx	r3
#ifdef __ROM_TEST__
	rom_test();
#endif /* __ROM_TEST__ */

ERR2:
	return ret;
   21248:	2313      	movs	r3, #19
   2124a:	18fb      	adds	r3, r7, r3
   2124c:	781b      	ldrb	r3, [r3, #0]
   2124e:	b25b      	sxtb	r3, r3
}
   21250:	0018      	movs	r0, r3
   21252:	46bd      	mov	sp, r7
   21254:	b008      	add	sp, #32
   21256:	bd80      	pop	{r7, pc}
   21258:	13301354 	.word	0x13301354
   2125c:	00001014 	.word	0x00001014
   21260:	00021495 	.word	0x00021495
   21264:	0001eb45 	.word	0x0001eb45
   21268:	000207bc 	.word	0x000207bc
   2126c:	000c000c 	.word	0x000c000c
   21270:	10add09e 	.word	0x10add09e
   21274:	3c1cd57d 	.word	0x3c1cd57d
   21278:	000207ac 	.word	0x000207ac
   2127c:	000214d9 	.word	0x000214d9
   21280:	0000108c 	.word	0x0000108c
   21284:	00020db5 	.word	0x00020db5
   21288:	0000039f 	.word	0x0000039f
   2128c:	00020c85 	.word	0x00020c85
   21290:	00036f78 	.word	0x00036f78
   21294:	0001c65d 	.word	0x0001c65d
   21298:	00036f84 	.word	0x00036f84
   2129c:	00036f58 	.word	0x00036f58
   212a0:	ef522f61 	.word	0xef522f61

000212a4 <wait_for_firmware_start>:

sint8 wait_for_firmware_start(uint8 arg)
{
   212a4:	b580      	push	{r7, lr}
   212a6:	b088      	sub	sp, #32
   212a8:	af00      	add	r7, sp, #0
   212aa:	0002      	movs	r2, r0
   212ac:	1dfb      	adds	r3, r7, #7
   212ae:	701a      	strb	r2, [r3, #0]
	sint8 ret = M2M_SUCCESS;
   212b0:	231f      	movs	r3, #31
   212b2:	18fb      	adds	r3, r7, r3
   212b4:	2200      	movs	r2, #0
   212b6:	701a      	strb	r2, [r3, #0]
	uint32 reg = 0, cnt = 0;
   212b8:	2300      	movs	r3, #0
   212ba:	61bb      	str	r3, [r7, #24]
   212bc:	2300      	movs	r3, #0
   212be:	617b      	str	r3, [r7, #20]
	uint32 u32Timeout = TIMEOUT;
   212c0:	2301      	movs	r3, #1
   212c2:	425b      	negs	r3, r3
   212c4:	613b      	str	r3, [r7, #16]
	volatile uint32 regAddress = NMI_STATE_REG;
   212c6:	4b1d      	ldr	r3, [pc, #116]	; (2133c <wait_for_firmware_start+0x98>)
   212c8:	60fb      	str	r3, [r7, #12]
	volatile uint32 checkValue = M2M_FINISH_INIT_STATE;
   212ca:	4b1d      	ldr	r3, [pc, #116]	; (21340 <wait_for_firmware_start+0x9c>)
   212cc:	60bb      	str	r3, [r7, #8]
	
	if((M2M_WIFI_MODE_ATE_HIGH == arg)||(M2M_WIFI_MODE_ATE_LOW == arg)) {
   212ce:	1dfb      	adds	r3, r7, #7
   212d0:	781b      	ldrb	r3, [r3, #0]
   212d2:	2b02      	cmp	r3, #2
   212d4:	d003      	beq.n	212de <wait_for_firmware_start+0x3a>
   212d6:	1dfb      	adds	r3, r7, #7
   212d8:	781b      	ldrb	r3, [r3, #0]
   212da:	2b03      	cmp	r3, #3
   212dc:	d119      	bne.n	21312 <wait_for_firmware_start+0x6e>
		regAddress = NMI_REV_REG;
   212de:	4b19      	ldr	r3, [pc, #100]	; (21344 <wait_for_firmware_start+0xa0>)
   212e0:	60fb      	str	r3, [r7, #12]
		checkValue = M2M_ATE_FW_IS_UP_VALUE;
   212e2:	4b19      	ldr	r3, [pc, #100]	; (21348 <wait_for_firmware_start+0xa4>)
   212e4:	60bb      	str	r3, [r7, #8]
	} else {
		/*bypass this step*/
	}
	
	
	while (checkValue != reg)
   212e6:	e014      	b.n	21312 <wait_for_firmware_start+0x6e>
	{
		nm_bsp_sleep(2); /* TODO: Why bus error if this delay is not here. */
   212e8:	2002      	movs	r0, #2
   212ea:	4b18      	ldr	r3, [pc, #96]	; (2134c <wait_for_firmware_start+0xa8>)
   212ec:	4798      	blx	r3
		M2M_DBG("%x %x %x\n",(unsigned int)nm_read_reg(0x108c),(unsigned int)nm_read_reg(0x108c),(unsigned int)nm_read_reg(0x14A0));
		reg = nm_read_reg(regAddress);
   212ee:	68fb      	ldr	r3, [r7, #12]
   212f0:	0018      	movs	r0, r3
   212f2:	4b17      	ldr	r3, [pc, #92]	; (21350 <wait_for_firmware_start+0xac>)
   212f4:	4798      	blx	r3
   212f6:	0003      	movs	r3, r0
   212f8:	61bb      	str	r3, [r7, #24]
		if(++cnt >= u32Timeout)
   212fa:	697b      	ldr	r3, [r7, #20]
   212fc:	3301      	adds	r3, #1
   212fe:	617b      	str	r3, [r7, #20]
   21300:	697a      	ldr	r2, [r7, #20]
   21302:	693b      	ldr	r3, [r7, #16]
   21304:	429a      	cmp	r2, r3
   21306:	d304      	bcc.n	21312 <wait_for_firmware_start+0x6e>
		{
			M2M_DBG("Time out for wait firmware Run\n");
			ret = M2M_ERR_INIT;
   21308:	231f      	movs	r3, #31
   2130a:	18fb      	adds	r3, r7, r3
   2130c:	22fb      	movs	r2, #251	; 0xfb
   2130e:	701a      	strb	r2, [r3, #0]
			goto ERR;
   21310:	e00c      	b.n	2132c <wait_for_firmware_start+0x88>
	while (checkValue != reg)
   21312:	68ba      	ldr	r2, [r7, #8]
   21314:	69bb      	ldr	r3, [r7, #24]
   21316:	429a      	cmp	r2, r3
   21318:	d1e6      	bne.n	212e8 <wait_for_firmware_start+0x44>
		}
	}
	if(M2M_FINISH_INIT_STATE == checkValue)
   2131a:	68bb      	ldr	r3, [r7, #8]
   2131c:	4a08      	ldr	r2, [pc, #32]	; (21340 <wait_for_firmware_start+0x9c>)
   2131e:	4293      	cmp	r3, r2
   21320:	d104      	bne.n	2132c <wait_for_firmware_start+0x88>
	{
		nm_write_reg(NMI_STATE_REG, 0);
   21322:	4b06      	ldr	r3, [pc, #24]	; (2133c <wait_for_firmware_start+0x98>)
   21324:	2100      	movs	r1, #0
   21326:	0018      	movs	r0, r3
   21328:	4b0a      	ldr	r3, [pc, #40]	; (21354 <wait_for_firmware_start+0xb0>)
   2132a:	4798      	blx	r3
	}
ERR:
	return ret;
   2132c:	231f      	movs	r3, #31
   2132e:	18fb      	adds	r3, r7, r3
   21330:	781b      	ldrb	r3, [r3, #0]
   21332:	b25b      	sxtb	r3, r3
}
   21334:	0018      	movs	r0, r3
   21336:	46bd      	mov	sp, r7
   21338:	b008      	add	sp, #32
   2133a:	bd80      	pop	{r7, pc}
   2133c:	0000108c 	.word	0x0000108c
   21340:	02532636 	.word	0x02532636
   21344:	000207ac 	.word	0x000207ac
   21348:	d75dc1c3 	.word	0xd75dc1c3
   2134c:	0001eb45 	.word	0x0001eb45
   21350:	00021495 	.word	0x00021495
   21354:	000214d9 	.word	0x000214d9

00021358 <chip_deinit>:

sint8 chip_deinit(void)
{
   21358:	b590      	push	{r4, r7, lr}
   2135a:	b083      	sub	sp, #12
   2135c:	af00      	add	r7, sp, #0
	uint32 reg = 0;
   2135e:	2300      	movs	r3, #0
   21360:	603b      	str	r3, [r7, #0]
	sint8 ret;

	/**
	stop the firmware, need a re-download
	**/
	ret = nm_read_reg_with_ret(NMI_GLB_RESET_0, &reg);
   21362:	1dfc      	adds	r4, r7, #7
   21364:	003a      	movs	r2, r7
   21366:	23a0      	movs	r3, #160	; 0xa0
   21368:	015b      	lsls	r3, r3, #5
   2136a:	0011      	movs	r1, r2
   2136c:	0018      	movs	r0, r3
   2136e:	4b20      	ldr	r3, [pc, #128]	; (213f0 <chip_deinit+0x98>)
   21370:	4798      	blx	r3
   21372:	0003      	movs	r3, r0
   21374:	7023      	strb	r3, [r4, #0]
	if (ret != M2M_SUCCESS) {
   21376:	1dfb      	adds	r3, r7, #7
   21378:	781b      	ldrb	r3, [r3, #0]
   2137a:	b25b      	sxtb	r3, r3
   2137c:	2b00      	cmp	r3, #0
   2137e:	d00e      	beq.n	2139e <chip_deinit+0x46>
		M2M_ERR("failed to de-initialize\n");
   21380:	4a1c      	ldr	r2, [pc, #112]	; (213f4 <chip_deinit+0x9c>)
   21382:	491d      	ldr	r1, [pc, #116]	; (213f8 <chip_deinit+0xa0>)
   21384:	4b1d      	ldr	r3, [pc, #116]	; (213fc <chip_deinit+0xa4>)
   21386:	0018      	movs	r0, r3
   21388:	4b1d      	ldr	r3, [pc, #116]	; (21400 <chip_deinit+0xa8>)
   2138a:	4798      	blx	r3
   2138c:	4b1d      	ldr	r3, [pc, #116]	; (21404 <chip_deinit+0xac>)
   2138e:	0018      	movs	r0, r3
   21390:	4b1b      	ldr	r3, [pc, #108]	; (21400 <chip_deinit+0xa8>)
   21392:	4798      	blx	r3
   21394:	4b1c      	ldr	r3, [pc, #112]	; (21408 <chip_deinit+0xb0>)
   21396:	0018      	movs	r0, r3
   21398:	4b19      	ldr	r3, [pc, #100]	; (21400 <chip_deinit+0xa8>)
   2139a:	4798      	blx	r3
		goto ERR1;
   2139c:	e021      	b.n	213e2 <chip_deinit+0x8a>
	}
	reg &= ~(1 << 10);
   2139e:	683b      	ldr	r3, [r7, #0]
   213a0:	4a1a      	ldr	r2, [pc, #104]	; (2140c <chip_deinit+0xb4>)
   213a2:	4013      	ands	r3, r2
   213a4:	603b      	str	r3, [r7, #0]
	ret = nm_write_reg(NMI_GLB_RESET_0, reg);
   213a6:	683a      	ldr	r2, [r7, #0]
   213a8:	1dfc      	adds	r4, r7, #7
   213aa:	23a0      	movs	r3, #160	; 0xa0
   213ac:	015b      	lsls	r3, r3, #5
   213ae:	0011      	movs	r1, r2
   213b0:	0018      	movs	r0, r3
   213b2:	4b17      	ldr	r3, [pc, #92]	; (21410 <chip_deinit+0xb8>)
   213b4:	4798      	blx	r3
   213b6:	0003      	movs	r3, r0
   213b8:	7023      	strb	r3, [r4, #0]
	if (ret != M2M_SUCCESS) {
   213ba:	1dfb      	adds	r3, r7, #7
   213bc:	781b      	ldrb	r3, [r3, #0]
   213be:	b25b      	sxtb	r3, r3
   213c0:	2b00      	cmp	r3, #0
   213c2:	d00e      	beq.n	213e2 <chip_deinit+0x8a>
		M2M_ERR("failed to de-initialize\n");
   213c4:	4a13      	ldr	r2, [pc, #76]	; (21414 <chip_deinit+0xbc>)
   213c6:	490c      	ldr	r1, [pc, #48]	; (213f8 <chip_deinit+0xa0>)
   213c8:	4b0c      	ldr	r3, [pc, #48]	; (213fc <chip_deinit+0xa4>)
   213ca:	0018      	movs	r0, r3
   213cc:	4b0c      	ldr	r3, [pc, #48]	; (21400 <chip_deinit+0xa8>)
   213ce:	4798      	blx	r3
   213d0:	4b0c      	ldr	r3, [pc, #48]	; (21404 <chip_deinit+0xac>)
   213d2:	0018      	movs	r0, r3
   213d4:	4b0a      	ldr	r3, [pc, #40]	; (21400 <chip_deinit+0xa8>)
   213d6:	4798      	blx	r3
   213d8:	4b0b      	ldr	r3, [pc, #44]	; (21408 <chip_deinit+0xb0>)
   213da:	0018      	movs	r0, r3
   213dc:	4b08      	ldr	r3, [pc, #32]	; (21400 <chip_deinit+0xa8>)
   213de:	4798      	blx	r3
		goto ERR1;
   213e0:	46c0      	nop			; (mov r8, r8)
	}

ERR1:
	return ret;
   213e2:	1dfb      	adds	r3, r7, #7
   213e4:	781b      	ldrb	r3, [r3, #0]
   213e6:	b25b      	sxtb	r3, r3
}
   213e8:	0018      	movs	r0, r3
   213ea:	46bd      	mov	sp, r7
   213ec:	b003      	add	sp, #12
   213ee:	bd90      	pop	{r4, r7, pc}
   213f0:	000214b5 	.word	0x000214b5
   213f4:	00000201 	.word	0x00000201
   213f8:	00036fc4 	.word	0x00036fc4
   213fc:	00036f2c 	.word	0x00036f2c
   21400:	0001c65d 	.word	0x0001c65d
   21404:	00036f9c 	.word	0x00036f9c
   21408:	00036f58 	.word	0x00036f58
   2140c:	fffffbff 	.word	0xfffffbff
   21410:	000214d9 	.word	0x000214d9
   21414:	00000207 	.word	0x00000207

00021418 <nm_bus_iface_init>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_bus_iface_init(void *pvInitVal)
{
   21418:	b590      	push	{r4, r7, lr}
   2141a:	b085      	sub	sp, #20
   2141c:	af00      	add	r7, sp, #0
   2141e:	6078      	str	r0, [r7, #4]
	sint8 ret = M2M_SUCCESS;
   21420:	230f      	movs	r3, #15
   21422:	18fb      	adds	r3, r7, r3
   21424:	2200      	movs	r2, #0
   21426:	701a      	strb	r2, [r3, #0]
	ret = nm_bus_init(pvInitVal);
   21428:	230f      	movs	r3, #15
   2142a:	18fc      	adds	r4, r7, r3
   2142c:	687b      	ldr	r3, [r7, #4]
   2142e:	0018      	movs	r0, r3
   21430:	4b05      	ldr	r3, [pc, #20]	; (21448 <nm_bus_iface_init+0x30>)
   21432:	4798      	blx	r3
   21434:	0003      	movs	r3, r0
   21436:	7023      	strb	r3, [r4, #0]
	return ret;
   21438:	230f      	movs	r3, #15
   2143a:	18fb      	adds	r3, r7, r3
   2143c:	781b      	ldrb	r3, [r3, #0]
   2143e:	b25b      	sxtb	r3, r3
}
   21440:	0018      	movs	r0, r3
   21442:	46bd      	mov	sp, r7
   21444:	b005      	add	sp, #20
   21446:	bd90      	pop	{r4, r7, pc}
   21448:	0001f201 	.word	0x0001f201

0002144c <nm_bus_iface_deinit>:
*	@author	Samer Sarhan
*	@date	07 April 2014
*	@version	1.0
*/
sint8 nm_bus_iface_deinit(void)
{
   2144c:	b590      	push	{r4, r7, lr}
   2144e:	b083      	sub	sp, #12
   21450:	af00      	add	r7, sp, #0
	sint8 ret = M2M_SUCCESS;
   21452:	1dfb      	adds	r3, r7, #7
   21454:	2200      	movs	r2, #0
   21456:	701a      	strb	r2, [r3, #0]
	ret = nm_bus_deinit();
   21458:	1dfc      	adds	r4, r7, #7
   2145a:	4b05      	ldr	r3, [pc, #20]	; (21470 <nm_bus_iface_deinit+0x24>)
   2145c:	4798      	blx	r3
   2145e:	0003      	movs	r3, r0
   21460:	7023      	strb	r3, [r4, #0]

	return ret;
   21462:	1dfb      	adds	r3, r7, #7
   21464:	781b      	ldrb	r3, [r3, #0]
   21466:	b25b      	sxtb	r3, r3
}
   21468:	0018      	movs	r0, r3
   2146a:	46bd      	mov	sp, r7
   2146c:	b003      	add	sp, #12
   2146e:	bd90      	pop	{r4, r7, pc}
   21470:	0001f379 	.word	0x0001f379

00021474 <nm_bus_reset>:
*	@brief	reset bus interface
*	@return	M2M_SUCCESS in case of success and M2M_ERR_BUS_FAIL in case of failure
*	@version	1.0
*/
sint8 nm_bus_reset(void)
{
   21474:	b580      	push	{r7, lr}
   21476:	b082      	sub	sp, #8
   21478:	af00      	add	r7, sp, #0
	sint8 ret = M2M_SUCCESS;
   2147a:	1dfb      	adds	r3, r7, #7
   2147c:	2200      	movs	r2, #0
   2147e:	701a      	strb	r2, [r3, #0]
#ifdef CONF_WINC_USE_UART
#elif defined (CONF_WINC_USE_SPI)
	return nm_spi_reset();
   21480:	4b03      	ldr	r3, [pc, #12]	; (21490 <nm_bus_reset+0x1c>)
   21482:	4798      	blx	r3
   21484:	0003      	movs	r3, r0
#else
#error "Plesae define bus usage"
#endif

	return ret;
}
   21486:	0018      	movs	r0, r3
   21488:	46bd      	mov	sp, r7
   2148a:	b002      	add	sp, #8
   2148c:	bd80      	pop	{r7, pc}
   2148e:	46c0      	nop			; (mov r8, r8)
   21490:	000232a1 	.word	0x000232a1

00021494 <nm_read_reg>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
uint32 nm_read_reg(uint32 u32Addr)
{
   21494:	b580      	push	{r7, lr}
   21496:	b082      	sub	sp, #8
   21498:	af00      	add	r7, sp, #0
   2149a:	6078      	str	r0, [r7, #4]
#ifdef CONF_WINC_USE_UART
	return nm_uart_read_reg(u32Addr);
#elif defined (CONF_WINC_USE_SPI)
	return nm_spi_read_reg(u32Addr);
   2149c:	687b      	ldr	r3, [r7, #4]
   2149e:	0018      	movs	r0, r3
   214a0:	4b03      	ldr	r3, [pc, #12]	; (214b0 <nm_read_reg+0x1c>)
   214a2:	4798      	blx	r3
   214a4:	0003      	movs	r3, r0
	return nm_i2c_read_reg(u32Addr);
#else
#error "Plesae define bus usage"
#endif

}
   214a6:	0018      	movs	r0, r3
   214a8:	46bd      	mov	sp, r7
   214aa:	b002      	add	sp, #8
   214ac:	bd80      	pop	{r7, pc}
   214ae:	46c0      	nop			; (mov r8, r8)
   214b0:	00023435 	.word	0x00023435

000214b4 <nm_read_reg_with_ret>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_read_reg_with_ret(uint32 u32Addr, uint32* pu32RetVal)
{
   214b4:	b580      	push	{r7, lr}
   214b6:	b082      	sub	sp, #8
   214b8:	af00      	add	r7, sp, #0
   214ba:	6078      	str	r0, [r7, #4]
   214bc:	6039      	str	r1, [r7, #0]
#ifdef CONF_WINC_USE_UART
	return nm_uart_read_reg_with_ret(u32Addr,pu32RetVal);
#elif defined (CONF_WINC_USE_SPI)
	return nm_spi_read_reg_with_ret(u32Addr,pu32RetVal);
   214be:	683a      	ldr	r2, [r7, #0]
   214c0:	687b      	ldr	r3, [r7, #4]
   214c2:	0011      	movs	r1, r2
   214c4:	0018      	movs	r0, r3
   214c6:	4b03      	ldr	r3, [pc, #12]	; (214d4 <nm_read_reg_with_ret+0x20>)
   214c8:	4798      	blx	r3
   214ca:	0003      	movs	r3, r0
#elif defined (CONF_WINC_USE_I2C)
	return nm_i2c_read_reg_with_ret(u32Addr,pu32RetVal);
#else
#error "Plesae define bus usage"
#endif
}
   214cc:	0018      	movs	r0, r3
   214ce:	46bd      	mov	sp, r7
   214d0:	b002      	add	sp, #8
   214d2:	bd80      	pop	{r7, pc}
   214d4:	00023459 	.word	0x00023459

000214d8 <nm_write_reg>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_write_reg(uint32 u32Addr, uint32 u32Val)
{
   214d8:	b580      	push	{r7, lr}
   214da:	b082      	sub	sp, #8
   214dc:	af00      	add	r7, sp, #0
   214de:	6078      	str	r0, [r7, #4]
   214e0:	6039      	str	r1, [r7, #0]
#ifdef CONF_WINC_USE_UART
	return nm_uart_write_reg(u32Addr,u32Val);
#elif defined (CONF_WINC_USE_SPI)
	return nm_spi_write_reg(u32Addr,u32Val);
   214e2:	683a      	ldr	r2, [r7, #0]
   214e4:	687b      	ldr	r3, [r7, #4]
   214e6:	0011      	movs	r1, r2
   214e8:	0018      	movs	r0, r3
   214ea:	4b03      	ldr	r3, [pc, #12]	; (214f8 <nm_write_reg+0x20>)
   214ec:	4798      	blx	r3
   214ee:	0003      	movs	r3, r0
#elif defined (CONF_WINC_USE_I2C)
	return nm_i2c_write_reg(u32Addr,u32Val);
#else
#error "Plesae define bus usage"
#endif
}
   214f0:	0018      	movs	r0, r3
   214f2:	46bd      	mov	sp, r7
   214f4:	b002      	add	sp, #8
   214f6:	bd80      	pop	{r7, pc}
   214f8:	000234a9 	.word	0x000234a9

000214fc <p_nm_read_block>:

static sint8 p_nm_read_block(uint32 u32Addr, uint8 *puBuf, uint16 u16Sz)
{
   214fc:	b580      	push	{r7, lr}
   214fe:	b084      	sub	sp, #16
   21500:	af00      	add	r7, sp, #0
   21502:	60f8      	str	r0, [r7, #12]
   21504:	60b9      	str	r1, [r7, #8]
   21506:	1dbb      	adds	r3, r7, #6
   21508:	801a      	strh	r2, [r3, #0]
#ifdef CONF_WINC_USE_UART
	return nm_uart_read_block(u32Addr,puBuf,u16Sz);
#elif defined (CONF_WINC_USE_SPI)
	return nm_spi_read_block(u32Addr,puBuf,u16Sz);
   2150a:	1dbb      	adds	r3, r7, #6
   2150c:	881a      	ldrh	r2, [r3, #0]
   2150e:	68b9      	ldr	r1, [r7, #8]
   21510:	68fb      	ldr	r3, [r7, #12]
   21512:	0018      	movs	r0, r3
   21514:	4b03      	ldr	r3, [pc, #12]	; (21524 <p_nm_read_block+0x28>)
   21516:	4798      	blx	r3
   21518:	0003      	movs	r3, r0
	return nm_i2c_read_block(u32Addr,puBuf,u16Sz);
#else
#error "Plesae define bus usage"
#endif

}
   2151a:	0018      	movs	r0, r3
   2151c:	46bd      	mov	sp, r7
   2151e:	b004      	add	sp, #16
   21520:	bd80      	pop	{r7, pc}
   21522:	46c0      	nop			; (mov r8, r8)
   21524:	000234f9 	.word	0x000234f9

00021528 <nm_read_block>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/ 
sint8 nm_read_block(uint32 u32Addr, uint8 *puBuf, uint32 u32Sz)
{
   21528:	b580      	push	{r7, lr}
   2152a:	b086      	sub	sp, #24
   2152c:	af00      	add	r7, sp, #0
   2152e:	60f8      	str	r0, [r7, #12]
   21530:	60b9      	str	r1, [r7, #8]
   21532:	607a      	str	r2, [r7, #4]
	uint16 u16MaxTrxSz = egstrNmBusCapabilities.u16MaxTrxSz - MAX_TRX_CFG_SZ;
   21534:	4b2d      	ldr	r3, [pc, #180]	; (215ec <nm_read_block+0xc4>)
   21536:	881a      	ldrh	r2, [r3, #0]
   21538:	2310      	movs	r3, #16
   2153a:	18fb      	adds	r3, r7, r3
   2153c:	3a08      	subs	r2, #8
   2153e:	801a      	strh	r2, [r3, #0]
	uint32 off = 0;
   21540:	2300      	movs	r3, #0
   21542:	617b      	str	r3, [r7, #20]
	sint8 s8Ret = M2M_SUCCESS;
   21544:	2313      	movs	r3, #19
   21546:	18fb      	adds	r3, r7, r3
   21548:	2200      	movs	r2, #0
   2154a:	701a      	strb	r2, [r3, #0]

	for(;;)
	{
		if(u32Sz <= u16MaxTrxSz)
   2154c:	2310      	movs	r3, #16
   2154e:	18fb      	adds	r3, r7, r3
   21550:	881a      	ldrh	r2, [r3, #0]
   21552:	687b      	ldr	r3, [r7, #4]
   21554:	429a      	cmp	r2, r3
   21556:	d313      	bcc.n	21580 <nm_read_block+0x58>
		{
			s8Ret += p_nm_read_block(u32Addr, &puBuf[off], (uint16)u32Sz);	
   21558:	68ba      	ldr	r2, [r7, #8]
   2155a:	697b      	ldr	r3, [r7, #20]
   2155c:	18d1      	adds	r1, r2, r3
   2155e:	687b      	ldr	r3, [r7, #4]
   21560:	b29a      	uxth	r2, r3
   21562:	68fb      	ldr	r3, [r7, #12]
   21564:	0018      	movs	r0, r3
   21566:	4b22      	ldr	r3, [pc, #136]	; (215f0 <nm_read_block+0xc8>)
   21568:	4798      	blx	r3
   2156a:	0003      	movs	r3, r0
   2156c:	b2da      	uxtb	r2, r3
   2156e:	2313      	movs	r3, #19
   21570:	18fb      	adds	r3, r7, r3
   21572:	781b      	ldrb	r3, [r3, #0]
   21574:	18d3      	adds	r3, r2, r3
   21576:	b2da      	uxtb	r2, r3
   21578:	2313      	movs	r3, #19
   2157a:	18fb      	adds	r3, r7, r3
   2157c:	701a      	strb	r2, [r3, #0]
			break;
   2157e:	e02d      	b.n	215dc <nm_read_block+0xb4>
		}
		else
		{
			s8Ret += p_nm_read_block(u32Addr, &puBuf[off], u16MaxTrxSz);
   21580:	68ba      	ldr	r2, [r7, #8]
   21582:	697b      	ldr	r3, [r7, #20]
   21584:	18d1      	adds	r1, r2, r3
   21586:	2310      	movs	r3, #16
   21588:	18fb      	adds	r3, r7, r3
   2158a:	881a      	ldrh	r2, [r3, #0]
   2158c:	68fb      	ldr	r3, [r7, #12]
   2158e:	0018      	movs	r0, r3
   21590:	4b17      	ldr	r3, [pc, #92]	; (215f0 <nm_read_block+0xc8>)
   21592:	4798      	blx	r3
   21594:	0003      	movs	r3, r0
   21596:	b2da      	uxtb	r2, r3
   21598:	2313      	movs	r3, #19
   2159a:	18fb      	adds	r3, r7, r3
   2159c:	781b      	ldrb	r3, [r3, #0]
   2159e:	18d3      	adds	r3, r2, r3
   215a0:	b2da      	uxtb	r2, r3
   215a2:	2313      	movs	r3, #19
   215a4:	18fb      	adds	r3, r7, r3
   215a6:	701a      	strb	r2, [r3, #0]
			if(M2M_SUCCESS != s8Ret) break;
   215a8:	2313      	movs	r3, #19
   215aa:	18fb      	adds	r3, r7, r3
   215ac:	781b      	ldrb	r3, [r3, #0]
   215ae:	b25b      	sxtb	r3, r3
   215b0:	2b00      	cmp	r3, #0
   215b2:	d112      	bne.n	215da <nm_read_block+0xb2>
			u32Sz -= u16MaxTrxSz;
   215b4:	2310      	movs	r3, #16
   215b6:	18fb      	adds	r3, r7, r3
   215b8:	881b      	ldrh	r3, [r3, #0]
   215ba:	687a      	ldr	r2, [r7, #4]
   215bc:	1ad3      	subs	r3, r2, r3
   215be:	607b      	str	r3, [r7, #4]
			off += u16MaxTrxSz;
   215c0:	2310      	movs	r3, #16
   215c2:	18fb      	adds	r3, r7, r3
   215c4:	881b      	ldrh	r3, [r3, #0]
   215c6:	697a      	ldr	r2, [r7, #20]
   215c8:	18d3      	adds	r3, r2, r3
   215ca:	617b      	str	r3, [r7, #20]
			u32Addr += u16MaxTrxSz;
   215cc:	2310      	movs	r3, #16
   215ce:	18fb      	adds	r3, r7, r3
   215d0:	881b      	ldrh	r3, [r3, #0]
   215d2:	68fa      	ldr	r2, [r7, #12]
   215d4:	18d3      	adds	r3, r2, r3
   215d6:	60fb      	str	r3, [r7, #12]
		if(u32Sz <= u16MaxTrxSz)
   215d8:	e7b8      	b.n	2154c <nm_read_block+0x24>
			if(M2M_SUCCESS != s8Ret) break;
   215da:	46c0      	nop			; (mov r8, r8)
		}
	}

	return s8Ret;
   215dc:	2313      	movs	r3, #19
   215de:	18fb      	adds	r3, r7, r3
   215e0:	781b      	ldrb	r3, [r3, #0]
   215e2:	b25b      	sxtb	r3, r3
}
   215e4:	0018      	movs	r0, r3
   215e6:	46bd      	mov	sp, r7
   215e8:	b006      	add	sp, #24
   215ea:	bd80      	pop	{r7, pc}
   215ec:	20000134 	.word	0x20000134
   215f0:	000214fd 	.word	0x000214fd

000215f4 <p_nm_write_block>:

static sint8 p_nm_write_block(uint32 u32Addr, uint8 *puBuf, uint16 u16Sz)
{
   215f4:	b580      	push	{r7, lr}
   215f6:	b084      	sub	sp, #16
   215f8:	af00      	add	r7, sp, #0
   215fa:	60f8      	str	r0, [r7, #12]
   215fc:	60b9      	str	r1, [r7, #8]
   215fe:	1dbb      	adds	r3, r7, #6
   21600:	801a      	strh	r2, [r3, #0]
#ifdef CONF_WINC_USE_UART
	return nm_uart_write_block(u32Addr,puBuf,u16Sz);
#elif defined (CONF_WINC_USE_SPI)
	return nm_spi_write_block(u32Addr,puBuf,u16Sz);
   21602:	1dbb      	adds	r3, r7, #6
   21604:	881a      	ldrh	r2, [r3, #0]
   21606:	68b9      	ldr	r1, [r7, #8]
   21608:	68fb      	ldr	r3, [r7, #12]
   2160a:	0018      	movs	r0, r3
   2160c:	4b03      	ldr	r3, [pc, #12]	; (2161c <p_nm_write_block+0x28>)
   2160e:	4798      	blx	r3
   21610:	0003      	movs	r3, r0
	return nm_i2c_write_block(u32Addr,puBuf,u16Sz);
#else
#error "Plesae define bus usage"
#endif

}
   21612:	0018      	movs	r0, r3
   21614:	46bd      	mov	sp, r7
   21616:	b004      	add	sp, #16
   21618:	bd80      	pop	{r7, pc}
   2161a:	46c0      	nop			; (mov r8, r8)
   2161c:	00023551 	.word	0x00023551

00021620 <nm_write_block>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/ 
sint8 nm_write_block(uint32 u32Addr, uint8 *puBuf, uint32 u32Sz)
{
   21620:	b580      	push	{r7, lr}
   21622:	b086      	sub	sp, #24
   21624:	af00      	add	r7, sp, #0
   21626:	60f8      	str	r0, [r7, #12]
   21628:	60b9      	str	r1, [r7, #8]
   2162a:	607a      	str	r2, [r7, #4]
	uint16 u16MaxTrxSz = egstrNmBusCapabilities.u16MaxTrxSz - MAX_TRX_CFG_SZ;
   2162c:	4b2d      	ldr	r3, [pc, #180]	; (216e4 <nm_write_block+0xc4>)
   2162e:	881a      	ldrh	r2, [r3, #0]
   21630:	2310      	movs	r3, #16
   21632:	18fb      	adds	r3, r7, r3
   21634:	3a08      	subs	r2, #8
   21636:	801a      	strh	r2, [r3, #0]
	uint32 off = 0;
   21638:	2300      	movs	r3, #0
   2163a:	617b      	str	r3, [r7, #20]
	sint8 s8Ret = M2M_SUCCESS;
   2163c:	2313      	movs	r3, #19
   2163e:	18fb      	adds	r3, r7, r3
   21640:	2200      	movs	r2, #0
   21642:	701a      	strb	r2, [r3, #0]

	for(;;)
	{
		if(u32Sz <= u16MaxTrxSz)
   21644:	2310      	movs	r3, #16
   21646:	18fb      	adds	r3, r7, r3
   21648:	881a      	ldrh	r2, [r3, #0]
   2164a:	687b      	ldr	r3, [r7, #4]
   2164c:	429a      	cmp	r2, r3
   2164e:	d313      	bcc.n	21678 <nm_write_block+0x58>
		{
			s8Ret += p_nm_write_block(u32Addr, &puBuf[off], (uint16)u32Sz);	
   21650:	68ba      	ldr	r2, [r7, #8]
   21652:	697b      	ldr	r3, [r7, #20]
   21654:	18d1      	adds	r1, r2, r3
   21656:	687b      	ldr	r3, [r7, #4]
   21658:	b29a      	uxth	r2, r3
   2165a:	68fb      	ldr	r3, [r7, #12]
   2165c:	0018      	movs	r0, r3
   2165e:	4b22      	ldr	r3, [pc, #136]	; (216e8 <nm_write_block+0xc8>)
   21660:	4798      	blx	r3
   21662:	0003      	movs	r3, r0
   21664:	b2da      	uxtb	r2, r3
   21666:	2313      	movs	r3, #19
   21668:	18fb      	adds	r3, r7, r3
   2166a:	781b      	ldrb	r3, [r3, #0]
   2166c:	18d3      	adds	r3, r2, r3
   2166e:	b2da      	uxtb	r2, r3
   21670:	2313      	movs	r3, #19
   21672:	18fb      	adds	r3, r7, r3
   21674:	701a      	strb	r2, [r3, #0]
			break;
   21676:	e02d      	b.n	216d4 <nm_write_block+0xb4>
		}
		else
		{
			s8Ret += p_nm_write_block(u32Addr, &puBuf[off], u16MaxTrxSz);
   21678:	68ba      	ldr	r2, [r7, #8]
   2167a:	697b      	ldr	r3, [r7, #20]
   2167c:	18d1      	adds	r1, r2, r3
   2167e:	2310      	movs	r3, #16
   21680:	18fb      	adds	r3, r7, r3
   21682:	881a      	ldrh	r2, [r3, #0]
   21684:	68fb      	ldr	r3, [r7, #12]
   21686:	0018      	movs	r0, r3
   21688:	4b17      	ldr	r3, [pc, #92]	; (216e8 <nm_write_block+0xc8>)
   2168a:	4798      	blx	r3
   2168c:	0003      	movs	r3, r0
   2168e:	b2da      	uxtb	r2, r3
   21690:	2313      	movs	r3, #19
   21692:	18fb      	adds	r3, r7, r3
   21694:	781b      	ldrb	r3, [r3, #0]
   21696:	18d3      	adds	r3, r2, r3
   21698:	b2da      	uxtb	r2, r3
   2169a:	2313      	movs	r3, #19
   2169c:	18fb      	adds	r3, r7, r3
   2169e:	701a      	strb	r2, [r3, #0]
			if(M2M_SUCCESS != s8Ret) break;
   216a0:	2313      	movs	r3, #19
   216a2:	18fb      	adds	r3, r7, r3
   216a4:	781b      	ldrb	r3, [r3, #0]
   216a6:	b25b      	sxtb	r3, r3
   216a8:	2b00      	cmp	r3, #0
   216aa:	d112      	bne.n	216d2 <nm_write_block+0xb2>
			u32Sz -= u16MaxTrxSz;
   216ac:	2310      	movs	r3, #16
   216ae:	18fb      	adds	r3, r7, r3
   216b0:	881b      	ldrh	r3, [r3, #0]
   216b2:	687a      	ldr	r2, [r7, #4]
   216b4:	1ad3      	subs	r3, r2, r3
   216b6:	607b      	str	r3, [r7, #4]
			off += u16MaxTrxSz;
   216b8:	2310      	movs	r3, #16
   216ba:	18fb      	adds	r3, r7, r3
   216bc:	881b      	ldrh	r3, [r3, #0]
   216be:	697a      	ldr	r2, [r7, #20]
   216c0:	18d3      	adds	r3, r2, r3
   216c2:	617b      	str	r3, [r7, #20]
			u32Addr += u16MaxTrxSz;
   216c4:	2310      	movs	r3, #16
   216c6:	18fb      	adds	r3, r7, r3
   216c8:	881b      	ldrh	r3, [r3, #0]
   216ca:	68fa      	ldr	r2, [r7, #12]
   216cc:	18d3      	adds	r3, r2, r3
   216ce:	60fb      	str	r3, [r7, #12]
		if(u32Sz <= u16MaxTrxSz)
   216d0:	e7b8      	b.n	21644 <nm_write_block+0x24>
			if(M2M_SUCCESS != s8Ret) break;
   216d2:	46c0      	nop			; (mov r8, r8)
		}
	}

	return s8Ret;
   216d4:	2313      	movs	r3, #19
   216d6:	18fb      	adds	r3, r7, r3
   216d8:	781b      	ldrb	r3, [r3, #0]
   216da:	b25b      	sxtb	r3, r3
}
   216dc:	0018      	movs	r0, r3
   216de:	46bd      	mov	sp, r7
   216e0:	b006      	add	sp, #24
   216e2:	bd80      	pop	{r7, pc}
   216e4:	20000134 	.word	0x20000134
   216e8:	000215f5 	.word	0x000215f5

000216ec <nm_get_firmware_full_info>:
*	@param [out]	M2mRev
*			    pointer holds address of structure "tstrM2mRev" that contains the firmware version parameters
*	@version	1.0
*/
sint8 nm_get_firmware_full_info(tstrM2mRev* pstrRev)
{
   216ec:	b590      	push	{r4, r7, lr}
   216ee:	b089      	sub	sp, #36	; 0x24
   216f0:	af00      	add	r7, sp, #0
   216f2:	6078      	str	r0, [r7, #4]
	uint16  curr_drv_ver, min_req_drv_ver,curr_firm_ver;
	uint32	reg = 0;
   216f4:	2300      	movs	r3, #0
   216f6:	617b      	str	r3, [r7, #20]
	sint8	ret = M2M_SUCCESS;
   216f8:	231f      	movs	r3, #31
   216fa:	18fb      	adds	r3, r7, r3
   216fc:	2200      	movs	r2, #0
   216fe:	701a      	strb	r2, [r3, #0]
	tstrGpRegs strgp = {0};
   21700:	230c      	movs	r3, #12
   21702:	18fb      	adds	r3, r7, r3
   21704:	0018      	movs	r0, r3
   21706:	2308      	movs	r3, #8
   21708:	001a      	movs	r2, r3
   2170a:	2100      	movs	r1, #0
   2170c:	4b64      	ldr	r3, [pc, #400]	; (218a0 <nm_get_firmware_full_info+0x1b4>)
   2170e:	4798      	blx	r3
	if (pstrRev != NULL)
   21710:	687b      	ldr	r3, [r7, #4]
   21712:	2b00      	cmp	r3, #0
   21714:	d100      	bne.n	21718 <nm_get_firmware_full_info+0x2c>
   21716:	e0ba      	b.n	2188e <nm_get_firmware_full_info+0x1a2>
	{
		m2m_memset((uint8*)pstrRev,0,sizeof(tstrM2mRev));
   21718:	687b      	ldr	r3, [r7, #4]
   2171a:	2228      	movs	r2, #40	; 0x28
   2171c:	2100      	movs	r1, #0
   2171e:	0018      	movs	r0, r3
   21720:	4b60      	ldr	r3, [pc, #384]	; (218a4 <nm_get_firmware_full_info+0x1b8>)
   21722:	4798      	blx	r3
		ret = nm_read_reg_with_ret(rNMI_GP_REG_2, &reg);
   21724:	231f      	movs	r3, #31
   21726:	18fc      	adds	r4, r7, r3
   21728:	2314      	movs	r3, #20
   2172a:	18fb      	adds	r3, r7, r3
   2172c:	4a5e      	ldr	r2, [pc, #376]	; (218a8 <nm_get_firmware_full_info+0x1bc>)
   2172e:	0019      	movs	r1, r3
   21730:	0010      	movs	r0, r2
   21732:	4b5e      	ldr	r3, [pc, #376]	; (218ac <nm_get_firmware_full_info+0x1c0>)
   21734:	4798      	blx	r3
   21736:	0003      	movs	r3, r0
   21738:	7023      	strb	r3, [r4, #0]
		if(ret == M2M_SUCCESS)
   2173a:	231f      	movs	r3, #31
   2173c:	18fb      	adds	r3, r7, r3
   2173e:	781b      	ldrb	r3, [r3, #0]
   21740:	b25b      	sxtb	r3, r3
   21742:	2b00      	cmp	r3, #0
   21744:	d000      	beq.n	21748 <nm_get_firmware_full_info+0x5c>
   21746:	e0a2      	b.n	2188e <nm_get_firmware_full_info+0x1a2>
		{
			if(reg != 0)
   21748:	697b      	ldr	r3, [r7, #20]
   2174a:	2b00      	cmp	r3, #0
   2174c:	d100      	bne.n	21750 <nm_get_firmware_full_info+0x64>
   2174e:	e09a      	b.n	21886 <nm_get_firmware_full_info+0x19a>
			{
				ret = nm_read_block(reg|0x30000,(uint8*)&strgp,sizeof(tstrGpRegs));
   21750:	697b      	ldr	r3, [r7, #20]
   21752:	22c0      	movs	r2, #192	; 0xc0
   21754:	0292      	lsls	r2, r2, #10
   21756:	4313      	orrs	r3, r2
   21758:	221f      	movs	r2, #31
   2175a:	18bc      	adds	r4, r7, r2
   2175c:	220c      	movs	r2, #12
   2175e:	18b9      	adds	r1, r7, r2
   21760:	2208      	movs	r2, #8
   21762:	0018      	movs	r0, r3
   21764:	4b52      	ldr	r3, [pc, #328]	; (218b0 <nm_get_firmware_full_info+0x1c4>)
   21766:	4798      	blx	r3
   21768:	0003      	movs	r3, r0
   2176a:	7023      	strb	r3, [r4, #0]
				if(ret == M2M_SUCCESS)
   2176c:	231f      	movs	r3, #31
   2176e:	18fb      	adds	r3, r7, r3
   21770:	781b      	ldrb	r3, [r3, #0]
   21772:	b25b      	sxtb	r3, r3
   21774:	2b00      	cmp	r3, #0
   21776:	d000      	beq.n	2177a <nm_get_firmware_full_info+0x8e>
   21778:	e089      	b.n	2188e <nm_get_firmware_full_info+0x1a2>
				{
					reg = strgp.u32Firmware_Ota_rev;
   2177a:	230c      	movs	r3, #12
   2177c:	18fb      	adds	r3, r7, r3
   2177e:	685b      	ldr	r3, [r3, #4]
   21780:	617b      	str	r3, [r7, #20]
					reg &= 0x0000ffff;
   21782:	697b      	ldr	r3, [r7, #20]
   21784:	041b      	lsls	r3, r3, #16
   21786:	0c1b      	lsrs	r3, r3, #16
   21788:	617b      	str	r3, [r7, #20]
					if(reg != 0)
   2178a:	697b      	ldr	r3, [r7, #20]
   2178c:	2b00      	cmp	r3, #0
   2178e:	d100      	bne.n	21792 <nm_get_firmware_full_info+0xa6>
   21790:	e074      	b.n	2187c <nm_get_firmware_full_info+0x190>
					{
						ret = nm_read_block(reg|0x30000,(uint8*)pstrRev,sizeof(tstrM2mRev));
   21792:	697b      	ldr	r3, [r7, #20]
   21794:	22c0      	movs	r2, #192	; 0xc0
   21796:	0292      	lsls	r2, r2, #10
   21798:	4313      	orrs	r3, r2
   2179a:	221f      	movs	r2, #31
   2179c:	18bc      	adds	r4, r7, r2
   2179e:	6879      	ldr	r1, [r7, #4]
   217a0:	2228      	movs	r2, #40	; 0x28
   217a2:	0018      	movs	r0, r3
   217a4:	4b42      	ldr	r3, [pc, #264]	; (218b0 <nm_get_firmware_full_info+0x1c4>)
   217a6:	4798      	blx	r3
   217a8:	0003      	movs	r3, r0
   217aa:	7023      	strb	r3, [r4, #0]
						if(ret == M2M_SUCCESS)
   217ac:	231f      	movs	r3, #31
   217ae:	18fb      	adds	r3, r7, r3
   217b0:	781b      	ldrb	r3, [r3, #0]
   217b2:	b25b      	sxtb	r3, r3
   217b4:	2b00      	cmp	r3, #0
   217b6:	d16a      	bne.n	2188e <nm_get_firmware_full_info+0x1a2>
						{
							curr_firm_ver   = M2M_MAKE_VERSION(pstrRev->u8FirmwareMajor, pstrRev->u8FirmwareMinor,pstrRev->u8FirmwarePatch);
   217b8:	687b      	ldr	r3, [r7, #4]
   217ba:	791b      	ldrb	r3, [r3, #4]
   217bc:	021b      	lsls	r3, r3, #8
   217be:	b21a      	sxth	r2, r3
   217c0:	687b      	ldr	r3, [r7, #4]
   217c2:	795b      	ldrb	r3, [r3, #5]
   217c4:	011b      	lsls	r3, r3, #4
   217c6:	b21b      	sxth	r3, r3
   217c8:	21ff      	movs	r1, #255	; 0xff
   217ca:	400b      	ands	r3, r1
   217cc:	b21b      	sxth	r3, r3
   217ce:	4313      	orrs	r3, r2
   217d0:	b21a      	sxth	r2, r3
   217d2:	687b      	ldr	r3, [r7, #4]
   217d4:	799b      	ldrb	r3, [r3, #6]
   217d6:	b21b      	sxth	r3, r3
   217d8:	210f      	movs	r1, #15
   217da:	400b      	ands	r3, r1
   217dc:	b21b      	sxth	r3, r3
   217de:	4313      	orrs	r3, r2
   217e0:	b21a      	sxth	r2, r3
   217e2:	231c      	movs	r3, #28
   217e4:	18fb      	adds	r3, r7, r3
   217e6:	801a      	strh	r2, [r3, #0]
							curr_drv_ver    = M2M_MAKE_VERSION(M2M_RELEASE_VERSION_MAJOR_NO, M2M_RELEASE_VERSION_MINOR_NO, M2M_RELEASE_VERSION_PATCH_NO);
   217e8:	231a      	movs	r3, #26
   217ea:	18fb      	adds	r3, r7, r3
   217ec:	4a31      	ldr	r2, [pc, #196]	; (218b4 <nm_get_firmware_full_info+0x1c8>)
   217ee:	801a      	strh	r2, [r3, #0]
							min_req_drv_ver = M2M_MAKE_VERSION(pstrRev->u8DriverMajor, pstrRev->u8DriverMinor,pstrRev->u8DriverPatch);
   217f0:	687b      	ldr	r3, [r7, #4]
   217f2:	79db      	ldrb	r3, [r3, #7]
   217f4:	021b      	lsls	r3, r3, #8
   217f6:	b21a      	sxth	r2, r3
   217f8:	687b      	ldr	r3, [r7, #4]
   217fa:	7a1b      	ldrb	r3, [r3, #8]
   217fc:	011b      	lsls	r3, r3, #4
   217fe:	b21b      	sxth	r3, r3
   21800:	21ff      	movs	r1, #255	; 0xff
   21802:	400b      	ands	r3, r1
   21804:	b21b      	sxth	r3, r3
   21806:	4313      	orrs	r3, r2
   21808:	b21a      	sxth	r2, r3
   2180a:	687b      	ldr	r3, [r7, #4]
   2180c:	7a5b      	ldrb	r3, [r3, #9]
   2180e:	b21b      	sxth	r3, r3
   21810:	210f      	movs	r1, #15
   21812:	400b      	ands	r3, r1
   21814:	b21b      	sxth	r3, r3
   21816:	4313      	orrs	r3, r2
   21818:	b21a      	sxth	r2, r3
   2181a:	2318      	movs	r3, #24
   2181c:	18fb      	adds	r3, r7, r3
   2181e:	801a      	strh	r2, [r3, #0]
							if((curr_firm_ver == 0)||(min_req_drv_ver == 0)||(min_req_drv_ver == 0)){
   21820:	231c      	movs	r3, #28
   21822:	18fb      	adds	r3, r7, r3
   21824:	881b      	ldrh	r3, [r3, #0]
   21826:	2b00      	cmp	r3, #0
   21828:	d009      	beq.n	2183e <nm_get_firmware_full_info+0x152>
   2182a:	2318      	movs	r3, #24
   2182c:	18fb      	adds	r3, r7, r3
   2182e:	881b      	ldrh	r3, [r3, #0]
   21830:	2b00      	cmp	r3, #0
   21832:	d004      	beq.n	2183e <nm_get_firmware_full_info+0x152>
   21834:	2318      	movs	r3, #24
   21836:	18fb      	adds	r3, r7, r3
   21838:	881b      	ldrh	r3, [r3, #0]
   2183a:	2b00      	cmp	r3, #0
   2183c:	d104      	bne.n	21848 <nm_get_firmware_full_info+0x15c>
								ret = M2M_ERR_FAIL;
   2183e:	231f      	movs	r3, #31
   21840:	18fb      	adds	r3, r7, r3
   21842:	22f4      	movs	r2, #244	; 0xf4
   21844:	701a      	strb	r2, [r3, #0]
								goto EXIT;
   21846:	e022      	b.n	2188e <nm_get_firmware_full_info+0x1a2>
							}
							if(curr_drv_ver <  min_req_drv_ver) {
   21848:	231a      	movs	r3, #26
   2184a:	18fa      	adds	r2, r7, r3
   2184c:	2318      	movs	r3, #24
   2184e:	18fb      	adds	r3, r7, r3
   21850:	8812      	ldrh	r2, [r2, #0]
   21852:	881b      	ldrh	r3, [r3, #0]
   21854:	429a      	cmp	r2, r3
   21856:	d204      	bcs.n	21862 <nm_get_firmware_full_info+0x176>
								/*The current driver version should be larger or equal 
								than the min driver that the current firmware support  */
								ret = M2M_ERR_FW_VER_MISMATCH;
   21858:	231f      	movs	r3, #31
   2185a:	18fb      	adds	r3, r7, r3
   2185c:	22f3      	movs	r2, #243	; 0xf3
   2185e:	701a      	strb	r2, [r3, #0]
								goto EXIT;
   21860:	e015      	b.n	2188e <nm_get_firmware_full_info+0x1a2>
							}
							if(curr_drv_ver >  curr_firm_ver) {
   21862:	231a      	movs	r3, #26
   21864:	18fa      	adds	r2, r7, r3
   21866:	231c      	movs	r3, #28
   21868:	18fb      	adds	r3, r7, r3
   2186a:	8812      	ldrh	r2, [r2, #0]
   2186c:	881b      	ldrh	r3, [r3, #0]
   2186e:	429a      	cmp	r2, r3
   21870:	d90d      	bls.n	2188e <nm_get_firmware_full_info+0x1a2>
								/*The current driver should be equal or less than the firmware version*/
								ret = M2M_ERR_FW_VER_MISMATCH;
   21872:	231f      	movs	r3, #31
   21874:	18fb      	adds	r3, r7, r3
   21876:	22f3      	movs	r2, #243	; 0xf3
   21878:	701a      	strb	r2, [r3, #0]
								goto EXIT;
   2187a:	e008      	b.n	2188e <nm_get_firmware_full_info+0x1a2>
							}
						}
					}else {
						ret = M2M_ERR_FAIL;
   2187c:	231f      	movs	r3, #31
   2187e:	18fb      	adds	r3, r7, r3
   21880:	22f4      	movs	r2, #244	; 0xf4
   21882:	701a      	strb	r2, [r3, #0]
   21884:	e003      	b.n	2188e <nm_get_firmware_full_info+0x1a2>
					}
				}
			}else{
				ret = M2M_ERR_FAIL;
   21886:	231f      	movs	r3, #31
   21888:	18fb      	adds	r3, r7, r3
   2188a:	22f4      	movs	r2, #244	; 0xf4
   2188c:	701a      	strb	r2, [r3, #0]
			}
		}
	}
EXIT:
	return ret;
   2188e:	231f      	movs	r3, #31
   21890:	18fb      	adds	r3, r7, r3
   21892:	781b      	ldrb	r3, [r3, #0]
   21894:	b25b      	sxtb	r3, r3
}
   21896:	0018      	movs	r0, r3
   21898:	46bd      	mov	sp, r7
   2189a:	b009      	add	sp, #36	; 0x24
   2189c:	bd90      	pop	{r4, r7, pc}
   2189e:	46c0      	nop			; (mov r8, r8)
   218a0:	00033117 	.word	0x00033117
   218a4:	0001f425 	.word	0x0001f425
   218a8:	000c0008 	.word	0x000c0008
   218ac:	000214b5 	.word	0x000214b5
   218b0:	00021529 	.word	0x00021529
   218b4:	00001354 	.word	0x00001354

000218b8 <nm_drv_init>:
*	@author	M. Abdelmawla
*	@date	15 July 2012
*	@version	1.0
*/
sint8 nm_drv_init(void * arg)
{
   218b8:	b590      	push	{r4, r7, lr}
   218ba:	b085      	sub	sp, #20
   218bc:	af00      	add	r7, sp, #0
   218be:	6078      	str	r0, [r7, #4]
	sint8 ret = M2M_SUCCESS;
   218c0:	230f      	movs	r3, #15
   218c2:	18fb      	adds	r3, r7, r3
   218c4:	2200      	movs	r2, #0
   218c6:	701a      	strb	r2, [r3, #0]
	uint8 u8Mode;
	
	if(NULL != arg) {
   218c8:	687b      	ldr	r3, [r7, #4]
   218ca:	2b00      	cmp	r3, #0
   218cc:	d013      	beq.n	218f6 <nm_drv_init+0x3e>
		u8Mode = *((uint8 *)arg);
   218ce:	230e      	movs	r3, #14
   218d0:	18fb      	adds	r3, r7, r3
   218d2:	687a      	ldr	r2, [r7, #4]
   218d4:	7812      	ldrb	r2, [r2, #0]
   218d6:	701a      	strb	r2, [r3, #0]
		if((u8Mode < M2M_WIFI_MODE_NORMAL)||(u8Mode >= M2M_WIFI_MODE_MAX)) {
   218d8:	230e      	movs	r3, #14
   218da:	18fb      	adds	r3, r7, r3
   218dc:	781b      	ldrb	r3, [r3, #0]
   218de:	2b00      	cmp	r3, #0
   218e0:	d004      	beq.n	218ec <nm_drv_init+0x34>
   218e2:	230e      	movs	r3, #14
   218e4:	18fb      	adds	r3, r7, r3
   218e6:	781b      	ldrb	r3, [r3, #0]
   218e8:	2b04      	cmp	r3, #4
   218ea:	d908      	bls.n	218fe <nm_drv_init+0x46>
			u8Mode = M2M_WIFI_MODE_NORMAL;
   218ec:	230e      	movs	r3, #14
   218ee:	18fb      	adds	r3, r7, r3
   218f0:	2201      	movs	r2, #1
   218f2:	701a      	strb	r2, [r3, #0]
   218f4:	e003      	b.n	218fe <nm_drv_init+0x46>
		}
	} else {
		u8Mode = M2M_WIFI_MODE_NORMAL;
   218f6:	230e      	movs	r3, #14
   218f8:	18fb      	adds	r3, r7, r3
   218fa:	2201      	movs	r2, #1
   218fc:	701a      	strb	r2, [r3, #0]
	}
	
	ret = nm_bus_iface_init(NULL);
   218fe:	230f      	movs	r3, #15
   21900:	18fc      	adds	r4, r7, r3
   21902:	2000      	movs	r0, #0
   21904:	4b41      	ldr	r3, [pc, #260]	; (21a0c <nm_drv_init+0x154>)
   21906:	4798      	blx	r3
   21908:	0003      	movs	r3, r0
   2190a:	7023      	strb	r3, [r4, #0]
	if (M2M_SUCCESS != ret) {
   2190c:	230f      	movs	r3, #15
   2190e:	18fb      	adds	r3, r7, r3
   21910:	781b      	ldrb	r3, [r3, #0]
   21912:	b25b      	sxtb	r3, r3
   21914:	2b00      	cmp	r3, #0
   21916:	d00f      	beq.n	21938 <nm_drv_init+0x80>
		M2M_ERR("[nmi start]: fail init bus\n");
   21918:	2390      	movs	r3, #144	; 0x90
   2191a:	005a      	lsls	r2, r3, #1
   2191c:	493c      	ldr	r1, [pc, #240]	; (21a10 <nm_drv_init+0x158>)
   2191e:	4b3d      	ldr	r3, [pc, #244]	; (21a14 <nm_drv_init+0x15c>)
   21920:	0018      	movs	r0, r3
   21922:	4b3d      	ldr	r3, [pc, #244]	; (21a18 <nm_drv_init+0x160>)
   21924:	4798      	blx	r3
   21926:	4b3d      	ldr	r3, [pc, #244]	; (21a1c <nm_drv_init+0x164>)
   21928:	0018      	movs	r0, r3
   2192a:	4b3b      	ldr	r3, [pc, #236]	; (21a18 <nm_drv_init+0x160>)
   2192c:	4798      	blx	r3
   2192e:	4b3c      	ldr	r3, [pc, #240]	; (21a20 <nm_drv_init+0x168>)
   21930:	0018      	movs	r0, r3
   21932:	4b39      	ldr	r3, [pc, #228]	; (21a18 <nm_drv_init+0x160>)
   21934:	4798      	blx	r3
		goto ERR1;
   21936:	e061      	b.n	219fc <nm_drv_init+0x144>
	ret = chip_reset();
	if (M2M_SUCCESS != ret) {
		goto ERR2;
	}
#endif
	M2M_INFO("Chip ID %lx\n", nmi_get_chipid());
   21938:	4b3a      	ldr	r3, [pc, #232]	; (21a24 <nm_drv_init+0x16c>)
   2193a:	0018      	movs	r0, r3
   2193c:	4b36      	ldr	r3, [pc, #216]	; (21a18 <nm_drv_init+0x160>)
   2193e:	4798      	blx	r3
   21940:	4b39      	ldr	r3, [pc, #228]	; (21a28 <nm_drv_init+0x170>)
   21942:	4798      	blx	r3
   21944:	0002      	movs	r2, r0
   21946:	4b39      	ldr	r3, [pc, #228]	; (21a2c <nm_drv_init+0x174>)
   21948:	0011      	movs	r1, r2
   2194a:	0018      	movs	r0, r3
   2194c:	4b32      	ldr	r3, [pc, #200]	; (21a18 <nm_drv_init+0x160>)
   2194e:	4798      	blx	r3
   21950:	4b33      	ldr	r3, [pc, #204]	; (21a20 <nm_drv_init+0x168>)
   21952:	0018      	movs	r0, r3
   21954:	4b30      	ldr	r3, [pc, #192]	; (21a18 <nm_drv_init+0x160>)
   21956:	4798      	blx	r3
#ifdef CONF_WINC_USE_SPI
	/* Must do this after global reset to set SPI data packet size. */
	nm_spi_init();
   21958:	4b35      	ldr	r3, [pc, #212]	; (21a30 <nm_drv_init+0x178>)
   2195a:	4798      	blx	r3
#endif
	ret = wait_for_bootrom(u8Mode);
   2195c:	230f      	movs	r3, #15
   2195e:	18fc      	adds	r4, r7, r3
   21960:	230e      	movs	r3, #14
   21962:	18fb      	adds	r3, r7, r3
   21964:	781b      	ldrb	r3, [r3, #0]
   21966:	0018      	movs	r0, r3
   21968:	4b32      	ldr	r3, [pc, #200]	; (21a34 <nm_drv_init+0x17c>)
   2196a:	4798      	blx	r3
   2196c:	0003      	movs	r3, r0
   2196e:	7023      	strb	r3, [r4, #0]
	if (M2M_SUCCESS != ret) {
   21970:	230f      	movs	r3, #15
   21972:	18fb      	adds	r3, r7, r3
   21974:	781b      	ldrb	r3, [r3, #0]
   21976:	b25b      	sxtb	r3, r3
   21978:	2b00      	cmp	r3, #0
   2197a:	d13a      	bne.n	219f2 <nm_drv_init+0x13a>
		goto ERR2;
	}
		
	ret = wait_for_firmware_start(u8Mode);
   2197c:	230f      	movs	r3, #15
   2197e:	18fc      	adds	r4, r7, r3
   21980:	230e      	movs	r3, #14
   21982:	18fb      	adds	r3, r7, r3
   21984:	781b      	ldrb	r3, [r3, #0]
   21986:	0018      	movs	r0, r3
   21988:	4b2b      	ldr	r3, [pc, #172]	; (21a38 <nm_drv_init+0x180>)
   2198a:	4798      	blx	r3
   2198c:	0003      	movs	r3, r0
   2198e:	7023      	strb	r3, [r4, #0]
	if (M2M_SUCCESS != ret) {
   21990:	230f      	movs	r3, #15
   21992:	18fb      	adds	r3, r7, r3
   21994:	781b      	ldrb	r3, [r3, #0]
   21996:	b25b      	sxtb	r3, r3
   21998:	2b00      	cmp	r3, #0
   2199a:	d12c      	bne.n	219f6 <nm_drv_init+0x13e>
		goto ERR2;
	}
	
	if((M2M_WIFI_MODE_ATE_HIGH == u8Mode)||(M2M_WIFI_MODE_ATE_LOW == u8Mode)) {
   2199c:	230e      	movs	r3, #14
   2199e:	18fb      	adds	r3, r7, r3
   219a0:	781b      	ldrb	r3, [r3, #0]
   219a2:	2b02      	cmp	r3, #2
   219a4:	d02a      	beq.n	219fc <nm_drv_init+0x144>
   219a6:	230e      	movs	r3, #14
   219a8:	18fb      	adds	r3, r7, r3
   219aa:	781b      	ldrb	r3, [r3, #0]
   219ac:	2b03      	cmp	r3, #3
   219ae:	d025      	beq.n	219fc <nm_drv_init+0x144>
		goto ERR1;
	} else {
		/*continue running*/
	}
	
	ret = enable_interrupts();
   219b0:	230f      	movs	r3, #15
   219b2:	18fc      	adds	r4, r7, r3
   219b4:	4b21      	ldr	r3, [pc, #132]	; (21a3c <nm_drv_init+0x184>)
   219b6:	4798      	blx	r3
   219b8:	0003      	movs	r3, r0
   219ba:	7023      	strb	r3, [r4, #0]
	if (M2M_SUCCESS != ret) {
   219bc:	230f      	movs	r3, #15
   219be:	18fb      	adds	r3, r7, r3
   219c0:	781b      	ldrb	r3, [r3, #0]
   219c2:	b25b      	sxtb	r3, r3
   219c4:	2b00      	cmp	r3, #0
   219c6:	d00f      	beq.n	219e8 <nm_drv_init+0x130>
		M2M_ERR("failed to enable interrupts..\n");
   219c8:	23a7      	movs	r3, #167	; 0xa7
   219ca:	005a      	lsls	r2, r3, #1
   219cc:	4910      	ldr	r1, [pc, #64]	; (21a10 <nm_drv_init+0x158>)
   219ce:	4b11      	ldr	r3, [pc, #68]	; (21a14 <nm_drv_init+0x15c>)
   219d0:	0018      	movs	r0, r3
   219d2:	4b11      	ldr	r3, [pc, #68]	; (21a18 <nm_drv_init+0x160>)
   219d4:	4798      	blx	r3
   219d6:	4b1a      	ldr	r3, [pc, #104]	; (21a40 <nm_drv_init+0x188>)
   219d8:	0018      	movs	r0, r3
   219da:	4b0f      	ldr	r3, [pc, #60]	; (21a18 <nm_drv_init+0x160>)
   219dc:	4798      	blx	r3
   219de:	4b10      	ldr	r3, [pc, #64]	; (21a20 <nm_drv_init+0x168>)
   219e0:	0018      	movs	r0, r3
   219e2:	4b0d      	ldr	r3, [pc, #52]	; (21a18 <nm_drv_init+0x160>)
   219e4:	4798      	blx	r3
		goto ERR2;
   219e6:	e007      	b.n	219f8 <nm_drv_init+0x140>
	}
	return ret;
   219e8:	230f      	movs	r3, #15
   219ea:	18fb      	adds	r3, r7, r3
   219ec:	781b      	ldrb	r3, [r3, #0]
   219ee:	b25b      	sxtb	r3, r3
   219f0:	e008      	b.n	21a04 <nm_drv_init+0x14c>
		goto ERR2;
   219f2:	46c0      	nop			; (mov r8, r8)
   219f4:	e000      	b.n	219f8 <nm_drv_init+0x140>
		goto ERR2;
   219f6:	46c0      	nop			; (mov r8, r8)
ERR2:
	nm_bus_iface_deinit();
   219f8:	4b12      	ldr	r3, [pc, #72]	; (21a44 <nm_drv_init+0x18c>)
   219fa:	4798      	blx	r3
ERR1:
	return ret;
   219fc:	230f      	movs	r3, #15
   219fe:	18fb      	adds	r3, r7, r3
   21a00:	781b      	ldrb	r3, [r3, #0]
   21a02:	b25b      	sxtb	r3, r3
}
   21a04:	0018      	movs	r0, r3
   21a06:	46bd      	mov	sp, r7
   21a08:	b005      	add	sp, #20
   21a0a:	bd90      	pop	{r4, r7, pc}
   21a0c:	00021419 	.word	0x00021419
   21a10:	000370a0 	.word	0x000370a0
   21a14:	00036fd0 	.word	0x00036fd0
   21a18:	0001c65d 	.word	0x0001c65d
   21a1c:	00036fe4 	.word	0x00036fe4
   21a20:	00037000 	.word	0x00037000
   21a24:	00037004 	.word	0x00037004
   21a28:	00020db5 	.word	0x00020db5
   21a2c:	00037010 	.word	0x00037010
   21a30:	000232d1 	.word	0x000232d1
   21a34:	0002110d 	.word	0x0002110d
   21a38:	000212a5 	.word	0x000212a5
   21a3c:	00020d01 	.word	0x00020d01
   21a40:	00037020 	.word	0x00037020
   21a44:	0002144d 	.word	0x0002144d

00021a48 <nm_drv_deinit>:
*	@author	M. Abdelmawla
*	@date	17 July 2012
*	@version	1.0
*/
sint8 nm_drv_deinit(void * arg)
{
   21a48:	b590      	push	{r4, r7, lr}
   21a4a:	b085      	sub	sp, #20
   21a4c:	af00      	add	r7, sp, #0
   21a4e:	6078      	str	r0, [r7, #4]
	sint8 ret;

	ret = chip_deinit();
   21a50:	230f      	movs	r3, #15
   21a52:	18fc      	adds	r4, r7, r3
   21a54:	4b2e      	ldr	r3, [pc, #184]	; (21b10 <nm_drv_deinit+0xc8>)
   21a56:	4798      	blx	r3
   21a58:	0003      	movs	r3, r0
   21a5a:	7023      	strb	r3, [r4, #0]
	if (M2M_SUCCESS != ret) {
   21a5c:	230f      	movs	r3, #15
   21a5e:	18fb      	adds	r3, r7, r3
   21a60:	781b      	ldrb	r3, [r3, #0]
   21a62:	b25b      	sxtb	r3, r3
   21a64:	2b00      	cmp	r3, #0
   21a66:	d010      	beq.n	21a8a <nm_drv_deinit+0x42>
		M2M_ERR("[nmi stop]: chip_deinit fail\n");
   21a68:	2366      	movs	r3, #102	; 0x66
   21a6a:	33ff      	adds	r3, #255	; 0xff
   21a6c:	001a      	movs	r2, r3
   21a6e:	4929      	ldr	r1, [pc, #164]	; (21b14 <nm_drv_deinit+0xcc>)
   21a70:	4b29      	ldr	r3, [pc, #164]	; (21b18 <nm_drv_deinit+0xd0>)
   21a72:	0018      	movs	r0, r3
   21a74:	4b29      	ldr	r3, [pc, #164]	; (21b1c <nm_drv_deinit+0xd4>)
   21a76:	4798      	blx	r3
   21a78:	4b29      	ldr	r3, [pc, #164]	; (21b20 <nm_drv_deinit+0xd8>)
   21a7a:	0018      	movs	r0, r3
   21a7c:	4b27      	ldr	r3, [pc, #156]	; (21b1c <nm_drv_deinit+0xd4>)
   21a7e:	4798      	blx	r3
   21a80:	4b28      	ldr	r3, [pc, #160]	; (21b24 <nm_drv_deinit+0xdc>)
   21a82:	0018      	movs	r0, r3
   21a84:	4b25      	ldr	r3, [pc, #148]	; (21b1c <nm_drv_deinit+0xd4>)
   21a86:	4798      	blx	r3
		goto ERR1;
   21a88:	e03a      	b.n	21b00 <nm_drv_deinit+0xb8>
	}
	
	/* Disable SPI flash to save power when the chip is off */
	ret = spi_flash_enable(0);
   21a8a:	230f      	movs	r3, #15
   21a8c:	18fc      	adds	r4, r7, r3
   21a8e:	2000      	movs	r0, #0
   21a90:	4b25      	ldr	r3, [pc, #148]	; (21b28 <nm_drv_deinit+0xe0>)
   21a92:	4798      	blx	r3
   21a94:	0003      	movs	r3, r0
   21a96:	7023      	strb	r3, [r4, #0]
	if (M2M_SUCCESS != ret) {
   21a98:	230f      	movs	r3, #15
   21a9a:	18fb      	adds	r3, r7, r3
   21a9c:	781b      	ldrb	r3, [r3, #0]
   21a9e:	b25b      	sxtb	r3, r3
   21aa0:	2b00      	cmp	r3, #0
   21aa2:	d00f      	beq.n	21ac4 <nm_drv_deinit+0x7c>
		M2M_ERR("[nmi stop]: SPI flash disable fail\n");
   21aa4:	23b6      	movs	r3, #182	; 0xb6
   21aa6:	005a      	lsls	r2, r3, #1
   21aa8:	491a      	ldr	r1, [pc, #104]	; (21b14 <nm_drv_deinit+0xcc>)
   21aaa:	4b1b      	ldr	r3, [pc, #108]	; (21b18 <nm_drv_deinit+0xd0>)
   21aac:	0018      	movs	r0, r3
   21aae:	4b1b      	ldr	r3, [pc, #108]	; (21b1c <nm_drv_deinit+0xd4>)
   21ab0:	4798      	blx	r3
   21ab2:	4b1e      	ldr	r3, [pc, #120]	; (21b2c <nm_drv_deinit+0xe4>)
   21ab4:	0018      	movs	r0, r3
   21ab6:	4b19      	ldr	r3, [pc, #100]	; (21b1c <nm_drv_deinit+0xd4>)
   21ab8:	4798      	blx	r3
   21aba:	4b1a      	ldr	r3, [pc, #104]	; (21b24 <nm_drv_deinit+0xdc>)
   21abc:	0018      	movs	r0, r3
   21abe:	4b17      	ldr	r3, [pc, #92]	; (21b1c <nm_drv_deinit+0xd4>)
   21ac0:	4798      	blx	r3
		goto ERR1;
   21ac2:	e01d      	b.n	21b00 <nm_drv_deinit+0xb8>
	}

	ret = nm_bus_iface_deinit();
   21ac4:	230f      	movs	r3, #15
   21ac6:	18fc      	adds	r4, r7, r3
   21ac8:	4b19      	ldr	r3, [pc, #100]	; (21b30 <nm_drv_deinit+0xe8>)
   21aca:	4798      	blx	r3
   21acc:	0003      	movs	r3, r0
   21ace:	7023      	strb	r3, [r4, #0]
	if (M2M_SUCCESS != ret) {
   21ad0:	230f      	movs	r3, #15
   21ad2:	18fb      	adds	r3, r7, r3
   21ad4:	781b      	ldrb	r3, [r3, #0]
   21ad6:	b25b      	sxtb	r3, r3
   21ad8:	2b00      	cmp	r3, #0
   21ada:	d00f      	beq.n	21afc <nm_drv_deinit+0xb4>
		M2M_ERR("[nmi stop]: fail init bus\n");
   21adc:	23b9      	movs	r3, #185	; 0xb9
   21ade:	005a      	lsls	r2, r3, #1
   21ae0:	490c      	ldr	r1, [pc, #48]	; (21b14 <nm_drv_deinit+0xcc>)
   21ae2:	4b0d      	ldr	r3, [pc, #52]	; (21b18 <nm_drv_deinit+0xd0>)
   21ae4:	0018      	movs	r0, r3
   21ae6:	4b0d      	ldr	r3, [pc, #52]	; (21b1c <nm_drv_deinit+0xd4>)
   21ae8:	4798      	blx	r3
   21aea:	4b12      	ldr	r3, [pc, #72]	; (21b34 <nm_drv_deinit+0xec>)
   21aec:	0018      	movs	r0, r3
   21aee:	4b0b      	ldr	r3, [pc, #44]	; (21b1c <nm_drv_deinit+0xd4>)
   21af0:	4798      	blx	r3
   21af2:	4b0c      	ldr	r3, [pc, #48]	; (21b24 <nm_drv_deinit+0xdc>)
   21af4:	0018      	movs	r0, r3
   21af6:	4b09      	ldr	r3, [pc, #36]	; (21b1c <nm_drv_deinit+0xd4>)
   21af8:	4798      	blx	r3
		goto ERR1;
   21afa:	e001      	b.n	21b00 <nm_drv_deinit+0xb8>
	}
#ifdef CONF_WINC_USE_SPI
	/* Must do this after global reset to set SPI data packet size. */
	nm_spi_deinit();
   21afc:	4b0e      	ldr	r3, [pc, #56]	; (21b38 <nm_drv_deinit+0xf0>)
   21afe:	4798      	blx	r3
#endif

ERR1:
	return ret;
   21b00:	230f      	movs	r3, #15
   21b02:	18fb      	adds	r3, r7, r3
   21b04:	781b      	ldrb	r3, [r3, #0]
   21b06:	b25b      	sxtb	r3, r3
}
   21b08:	0018      	movs	r0, r3
   21b0a:	46bd      	mov	sp, r7
   21b0c:	b005      	add	sp, #20
   21b0e:	bd90      	pop	{r4, r7, pc}
   21b10:	00021359 	.word	0x00021359
   21b14:	000370ac 	.word	0x000370ac
   21b18:	00036fd0 	.word	0x00036fd0
   21b1c:	0001c65d 	.word	0x0001c65d
   21b20:	00037040 	.word	0x00037040
   21b24:	00037000 	.word	0x00037000
   21b28:	00024779 	.word	0x00024779
   21b2c:	00037060 	.word	0x00037060
   21b30:	0002144d 	.word	0x0002144d
   21b34:	00037084 	.word	0x00037084
   21b38:	0002341d 	.word	0x0002341d

00021b3c <nmi_spi_read>:
#define DATA_PKT_SZ				DATA_PKT_SZ_8K

static uint8 	gu8Crc_off	=   0;

static sint8 nmi_spi_read(uint8* b, uint16 sz)
{
   21b3c:	b580      	push	{r7, lr}
   21b3e:	b086      	sub	sp, #24
   21b40:	af00      	add	r7, sp, #0
   21b42:	6078      	str	r0, [r7, #4]
   21b44:	000a      	movs	r2, r1
   21b46:	1cbb      	adds	r3, r7, #2
   21b48:	801a      	strh	r2, [r3, #0]
	tstrNmSpiRw spi;
	spi.pu8InBuf = NULL;
   21b4a:	230c      	movs	r3, #12
   21b4c:	18fb      	adds	r3, r7, r3
   21b4e:	2200      	movs	r2, #0
   21b50:	601a      	str	r2, [r3, #0]
	spi.pu8OutBuf = b;
   21b52:	230c      	movs	r3, #12
   21b54:	18fb      	adds	r3, r7, r3
   21b56:	687a      	ldr	r2, [r7, #4]
   21b58:	605a      	str	r2, [r3, #4]
	spi.u16Sz = sz;
   21b5a:	230c      	movs	r3, #12
   21b5c:	18fb      	adds	r3, r7, r3
   21b5e:	1cba      	adds	r2, r7, #2
   21b60:	8812      	ldrh	r2, [r2, #0]
   21b62:	811a      	strh	r2, [r3, #8]
	return nm_bus_ioctl(NM_BUS_IOCTL_RW, &spi);
   21b64:	230c      	movs	r3, #12
   21b66:	18fb      	adds	r3, r7, r3
   21b68:	0019      	movs	r1, r3
   21b6a:	2003      	movs	r0, #3
   21b6c:	4b03      	ldr	r3, [pc, #12]	; (21b7c <nmi_spi_read+0x40>)
   21b6e:	4798      	blx	r3
   21b70:	0003      	movs	r3, r0
}
   21b72:	0018      	movs	r0, r3
   21b74:	46bd      	mov	sp, r7
   21b76:	b006      	add	sp, #24
   21b78:	bd80      	pop	{r7, pc}
   21b7a:	46c0      	nop			; (mov r8, r8)
   21b7c:	0001f2e9 	.word	0x0001f2e9

00021b80 <nmi_spi_write>:

static sint8 nmi_spi_write(uint8* b, uint16 sz)
{
   21b80:	b580      	push	{r7, lr}
   21b82:	b086      	sub	sp, #24
   21b84:	af00      	add	r7, sp, #0
   21b86:	6078      	str	r0, [r7, #4]
   21b88:	000a      	movs	r2, r1
   21b8a:	1cbb      	adds	r3, r7, #2
   21b8c:	801a      	strh	r2, [r3, #0]
	tstrNmSpiRw spi;
	spi.pu8InBuf = b;
   21b8e:	230c      	movs	r3, #12
   21b90:	18fb      	adds	r3, r7, r3
   21b92:	687a      	ldr	r2, [r7, #4]
   21b94:	601a      	str	r2, [r3, #0]
	spi.pu8OutBuf = NULL;
   21b96:	230c      	movs	r3, #12
   21b98:	18fb      	adds	r3, r7, r3
   21b9a:	2200      	movs	r2, #0
   21b9c:	605a      	str	r2, [r3, #4]
	spi.u16Sz = sz;
   21b9e:	230c      	movs	r3, #12
   21ba0:	18fb      	adds	r3, r7, r3
   21ba2:	1cba      	adds	r2, r7, #2
   21ba4:	8812      	ldrh	r2, [r2, #0]
   21ba6:	811a      	strh	r2, [r3, #8]
	return nm_bus_ioctl(NM_BUS_IOCTL_RW, &spi);
   21ba8:	230c      	movs	r3, #12
   21baa:	18fb      	adds	r3, r7, r3
   21bac:	0019      	movs	r1, r3
   21bae:	2003      	movs	r0, #3
   21bb0:	4b03      	ldr	r3, [pc, #12]	; (21bc0 <nmi_spi_write+0x40>)
   21bb2:	4798      	blx	r3
   21bb4:	0003      	movs	r3, r0
}
   21bb6:	0018      	movs	r0, r3
   21bb8:	46bd      	mov	sp, r7
   21bba:	b006      	add	sp, #24
   21bbc:	bd80      	pop	{r7, pc}
   21bbe:	46c0      	nop			; (mov r8, r8)
   21bc0:	0001f2e9 	.word	0x0001f2e9

00021bc4 <nmi_spi_rw>:
#ifndef USE_OLD_SPI_SW
static sint8 nmi_spi_rw(uint8 *bin,uint8* bout,uint16 sz)
{
   21bc4:	b580      	push	{r7, lr}
   21bc6:	b088      	sub	sp, #32
   21bc8:	af00      	add	r7, sp, #0
   21bca:	60f8      	str	r0, [r7, #12]
   21bcc:	60b9      	str	r1, [r7, #8]
   21bce:	1dbb      	adds	r3, r7, #6
   21bd0:	801a      	strh	r2, [r3, #0]
	tstrNmSpiRw spi;
	spi.pu8InBuf = bin;
   21bd2:	2314      	movs	r3, #20
   21bd4:	18fb      	adds	r3, r7, r3
   21bd6:	68fa      	ldr	r2, [r7, #12]
   21bd8:	601a      	str	r2, [r3, #0]
	spi.pu8OutBuf = bout;
   21bda:	2314      	movs	r3, #20
   21bdc:	18fb      	adds	r3, r7, r3
   21bde:	68ba      	ldr	r2, [r7, #8]
   21be0:	605a      	str	r2, [r3, #4]
	spi.u16Sz = sz;
   21be2:	2314      	movs	r3, #20
   21be4:	18fb      	adds	r3, r7, r3
   21be6:	1dba      	adds	r2, r7, #6
   21be8:	8812      	ldrh	r2, [r2, #0]
   21bea:	811a      	strh	r2, [r3, #8]
	return nm_bus_ioctl(NM_BUS_IOCTL_RW, &spi);	
   21bec:	2314      	movs	r3, #20
   21bee:	18fb      	adds	r3, r7, r3
   21bf0:	0019      	movs	r1, r3
   21bf2:	2003      	movs	r0, #3
   21bf4:	4b03      	ldr	r3, [pc, #12]	; (21c04 <nmi_spi_rw+0x40>)
   21bf6:	4798      	blx	r3
   21bf8:	0003      	movs	r3, r0
}
   21bfa:	0018      	movs	r0, r3
   21bfc:	46bd      	mov	sp, r7
   21bfe:	b008      	add	sp, #32
   21c00:	bd80      	pop	{r7, pc}
   21c02:	46c0      	nop			; (mov r8, r8)
   21c04:	0001f2e9 	.word	0x0001f2e9

00021c08 <crc7_byte>:
	0x46, 0x4f, 0x54, 0x5d, 0x62, 0x6b, 0x70, 0x79
};


static uint8 crc7_byte(uint8 crc, uint8 data)
{
   21c08:	b580      	push	{r7, lr}
   21c0a:	b082      	sub	sp, #8
   21c0c:	af00      	add	r7, sp, #0
   21c0e:	0002      	movs	r2, r0
   21c10:	1dfb      	adds	r3, r7, #7
   21c12:	701a      	strb	r2, [r3, #0]
   21c14:	1dbb      	adds	r3, r7, #6
   21c16:	1c0a      	adds	r2, r1, #0
   21c18:	701a      	strb	r2, [r3, #0]
	return crc7_syndrome_table[(crc << 1) ^ data];
   21c1a:	1dfb      	adds	r3, r7, #7
   21c1c:	781b      	ldrb	r3, [r3, #0]
   21c1e:	005a      	lsls	r2, r3, #1
   21c20:	1dbb      	adds	r3, r7, #6
   21c22:	781b      	ldrb	r3, [r3, #0]
   21c24:	4053      	eors	r3, r2
   21c26:	4a03      	ldr	r2, [pc, #12]	; (21c34 <crc7_byte+0x2c>)
   21c28:	5cd3      	ldrb	r3, [r2, r3]
}
   21c2a:	0018      	movs	r0, r3
   21c2c:	46bd      	mov	sp, r7
   21c2e:	b002      	add	sp, #8
   21c30:	bd80      	pop	{r7, pc}
   21c32:	46c0      	nop			; (mov r8, r8)
   21c34:	000370bc 	.word	0x000370bc

00021c38 <crc7>:

static uint8 crc7(uint8 crc, const uint8 *buffer, uint32 len)
{
   21c38:	b590      	push	{r4, r7, lr}
   21c3a:	b085      	sub	sp, #20
   21c3c:	af00      	add	r7, sp, #0
   21c3e:	60b9      	str	r1, [r7, #8]
   21c40:	607a      	str	r2, [r7, #4]
   21c42:	230f      	movs	r3, #15
   21c44:	18fb      	adds	r3, r7, r3
   21c46:	1c02      	adds	r2, r0, #0
   21c48:	701a      	strb	r2, [r3, #0]
	while (len--)
   21c4a:	e00e      	b.n	21c6a <crc7+0x32>
		crc = crc7_byte(crc, *buffer++);
   21c4c:	68bb      	ldr	r3, [r7, #8]
   21c4e:	1c5a      	adds	r2, r3, #1
   21c50:	60ba      	str	r2, [r7, #8]
   21c52:	781a      	ldrb	r2, [r3, #0]
   21c54:	230f      	movs	r3, #15
   21c56:	18fc      	adds	r4, r7, r3
   21c58:	230f      	movs	r3, #15
   21c5a:	18fb      	adds	r3, r7, r3
   21c5c:	781b      	ldrb	r3, [r3, #0]
   21c5e:	0011      	movs	r1, r2
   21c60:	0018      	movs	r0, r3
   21c62:	4b08      	ldr	r3, [pc, #32]	; (21c84 <crc7+0x4c>)
   21c64:	4798      	blx	r3
   21c66:	0003      	movs	r3, r0
   21c68:	7023      	strb	r3, [r4, #0]
	while (len--)
   21c6a:	687b      	ldr	r3, [r7, #4]
   21c6c:	1e5a      	subs	r2, r3, #1
   21c6e:	607a      	str	r2, [r7, #4]
   21c70:	2b00      	cmp	r3, #0
   21c72:	d1eb      	bne.n	21c4c <crc7+0x14>
	return crc;
   21c74:	230f      	movs	r3, #15
   21c76:	18fb      	adds	r3, r7, r3
   21c78:	781b      	ldrb	r3, [r3, #0]
}
   21c7a:	0018      	movs	r0, r3
   21c7c:	46bd      	mov	sp, r7
   21c7e:	b005      	add	sp, #20
   21c80:	bd90      	pop	{r4, r7, pc}
   21c82:	46c0      	nop			; (mov r8, r8)
   21c84:	00021c09 	.word	0x00021c09

00021c88 <spi_cmd>:
#define DATA_PKT_SZ_4K			(4 * 1024)
#define DATA_PKT_SZ_8K			(8 * 1024)
#define DATA_PKT_SZ				DATA_PKT_SZ_8K

static sint8 spi_cmd(uint8 cmd, uint32 adr, uint32 u32data, uint32 sz,uint8 clockless)
{
   21c88:	b590      	push	{r4, r7, lr}
   21c8a:	b089      	sub	sp, #36	; 0x24
   21c8c:	af00      	add	r7, sp, #0
   21c8e:	60b9      	str	r1, [r7, #8]
   21c90:	607a      	str	r2, [r7, #4]
   21c92:	603b      	str	r3, [r7, #0]
   21c94:	230f      	movs	r3, #15
   21c96:	18fb      	adds	r3, r7, r3
   21c98:	1c02      	adds	r2, r0, #0
   21c9a:	701a      	strb	r2, [r3, #0]
	uint8 bc[9];
	uint8 len = 5;
   21c9c:	231f      	movs	r3, #31
   21c9e:	18fb      	adds	r3, r7, r3
   21ca0:	2205      	movs	r2, #5
   21ca2:	701a      	strb	r2, [r3, #0]
	sint8 result = N_OK;
   21ca4:	231e      	movs	r3, #30
   21ca6:	18fb      	adds	r3, r7, r3
   21ca8:	2201      	movs	r2, #1
   21caa:	701a      	strb	r2, [r3, #0]

	bc[0] = cmd;
   21cac:	2314      	movs	r3, #20
   21cae:	18fb      	adds	r3, r7, r3
   21cb0:	220f      	movs	r2, #15
   21cb2:	18ba      	adds	r2, r7, r2
   21cb4:	7812      	ldrb	r2, [r2, #0]
   21cb6:	701a      	strb	r2, [r3, #0]
	switch (cmd) {
   21cb8:	230f      	movs	r3, #15
   21cba:	18fb      	adds	r3, r7, r3
   21cbc:	781b      	ldrb	r3, [r3, #0]
   21cbe:	3bc1      	subs	r3, #193	; 0xc1
   21cc0:	2b0e      	cmp	r3, #14
   21cc2:	d900      	bls.n	21cc6 <spi_cmd+0x3e>
   21cc4:	e11b      	b.n	21efe <spi_cmd+0x276>
   21cc6:	009a      	lsls	r2, r3, #2
   21cc8:	4bb6      	ldr	r3, [pc, #728]	; (21fa4 <spi_cmd+0x31c>)
   21cca:	18d3      	adds	r3, r2, r3
   21ccc:	681b      	ldr	r3, [r3, #0]
   21cce:	469f      	mov	pc, r3
	case CMD_SINGLE_READ:				/* single word (4 bytes) read */
		bc[1] = (uint8)(adr >> 16);
   21cd0:	68bb      	ldr	r3, [r7, #8]
   21cd2:	0c1b      	lsrs	r3, r3, #16
   21cd4:	b2da      	uxtb	r2, r3
   21cd6:	2314      	movs	r3, #20
   21cd8:	18fb      	adds	r3, r7, r3
   21cda:	705a      	strb	r2, [r3, #1]
		bc[2] = (uint8)(adr >> 8);
   21cdc:	68bb      	ldr	r3, [r7, #8]
   21cde:	0a1b      	lsrs	r3, r3, #8
   21ce0:	b2da      	uxtb	r2, r3
   21ce2:	2314      	movs	r3, #20
   21ce4:	18fb      	adds	r3, r7, r3
   21ce6:	709a      	strb	r2, [r3, #2]
		bc[3] = (uint8)adr;
   21ce8:	68bb      	ldr	r3, [r7, #8]
   21cea:	b2da      	uxtb	r2, r3
   21cec:	2314      	movs	r3, #20
   21cee:	18fb      	adds	r3, r7, r3
   21cf0:	70da      	strb	r2, [r3, #3]
		len = 5;
   21cf2:	231f      	movs	r3, #31
   21cf4:	18fb      	adds	r3, r7, r3
   21cf6:	2205      	movs	r2, #5
   21cf8:	701a      	strb	r2, [r3, #0]
		break;
   21cfa:	e105      	b.n	21f08 <spi_cmd+0x280>
	case CMD_INTERNAL_READ:			/* internal register read */
		bc[1] = (uint8)(adr >> 8);
   21cfc:	68bb      	ldr	r3, [r7, #8]
   21cfe:	0a1b      	lsrs	r3, r3, #8
   21d00:	b2da      	uxtb	r2, r3
   21d02:	2314      	movs	r3, #20
   21d04:	18fb      	adds	r3, r7, r3
   21d06:	705a      	strb	r2, [r3, #1]
		if(clockless)  bc[1] |= (1 << 7);
   21d08:	2330      	movs	r3, #48	; 0x30
   21d0a:	18fb      	adds	r3, r7, r3
   21d0c:	781b      	ldrb	r3, [r3, #0]
   21d0e:	2b00      	cmp	r3, #0
   21d10:	d009      	beq.n	21d26 <spi_cmd+0x9e>
   21d12:	2314      	movs	r3, #20
   21d14:	18fb      	adds	r3, r7, r3
   21d16:	785b      	ldrb	r3, [r3, #1]
   21d18:	2280      	movs	r2, #128	; 0x80
   21d1a:	4252      	negs	r2, r2
   21d1c:	4313      	orrs	r3, r2
   21d1e:	b2da      	uxtb	r2, r3
   21d20:	2314      	movs	r3, #20
   21d22:	18fb      	adds	r3, r7, r3
   21d24:	705a      	strb	r2, [r3, #1]
		bc[2] = (uint8)adr;
   21d26:	68bb      	ldr	r3, [r7, #8]
   21d28:	b2da      	uxtb	r2, r3
   21d2a:	2314      	movs	r3, #20
   21d2c:	18fb      	adds	r3, r7, r3
   21d2e:	709a      	strb	r2, [r3, #2]
		bc[3] = 0x00;
   21d30:	2314      	movs	r3, #20
   21d32:	18fb      	adds	r3, r7, r3
   21d34:	2200      	movs	r2, #0
   21d36:	70da      	strb	r2, [r3, #3]
		len = 5;
   21d38:	231f      	movs	r3, #31
   21d3a:	18fb      	adds	r3, r7, r3
   21d3c:	2205      	movs	r2, #5
   21d3e:	701a      	strb	r2, [r3, #0]
		break;
   21d40:	e0e2      	b.n	21f08 <spi_cmd+0x280>
	case CMD_TERMINATE:					/* termination */
		bc[1] = 0x00;
   21d42:	2314      	movs	r3, #20
   21d44:	18fb      	adds	r3, r7, r3
   21d46:	2200      	movs	r2, #0
   21d48:	705a      	strb	r2, [r3, #1]
		bc[2] = 0x00;
   21d4a:	2314      	movs	r3, #20
   21d4c:	18fb      	adds	r3, r7, r3
   21d4e:	2200      	movs	r2, #0
   21d50:	709a      	strb	r2, [r3, #2]
		bc[3] = 0x00;
   21d52:	2314      	movs	r3, #20
   21d54:	18fb      	adds	r3, r7, r3
   21d56:	2200      	movs	r2, #0
   21d58:	70da      	strb	r2, [r3, #3]
		len = 5;
   21d5a:	231f      	movs	r3, #31
   21d5c:	18fb      	adds	r3, r7, r3
   21d5e:	2205      	movs	r2, #5
   21d60:	701a      	strb	r2, [r3, #0]
		break;
   21d62:	e0d1      	b.n	21f08 <spi_cmd+0x280>
	case CMD_REPEAT:						/* repeat */
		bc[1] = 0x00;
   21d64:	2314      	movs	r3, #20
   21d66:	18fb      	adds	r3, r7, r3
   21d68:	2200      	movs	r2, #0
   21d6a:	705a      	strb	r2, [r3, #1]
		bc[2] = 0x00;
   21d6c:	2314      	movs	r3, #20
   21d6e:	18fb      	adds	r3, r7, r3
   21d70:	2200      	movs	r2, #0
   21d72:	709a      	strb	r2, [r3, #2]
		bc[3] = 0x00;
   21d74:	2314      	movs	r3, #20
   21d76:	18fb      	adds	r3, r7, r3
   21d78:	2200      	movs	r2, #0
   21d7a:	70da      	strb	r2, [r3, #3]
		len = 5;
   21d7c:	231f      	movs	r3, #31
   21d7e:	18fb      	adds	r3, r7, r3
   21d80:	2205      	movs	r2, #5
   21d82:	701a      	strb	r2, [r3, #0]
		break;
   21d84:	e0c0      	b.n	21f08 <spi_cmd+0x280>
	case CMD_RESET:							/* reset */
		bc[1] = 0xff;
   21d86:	2314      	movs	r3, #20
   21d88:	18fb      	adds	r3, r7, r3
   21d8a:	22ff      	movs	r2, #255	; 0xff
   21d8c:	705a      	strb	r2, [r3, #1]
		bc[2] = 0xff;
   21d8e:	2314      	movs	r3, #20
   21d90:	18fb      	adds	r3, r7, r3
   21d92:	22ff      	movs	r2, #255	; 0xff
   21d94:	709a      	strb	r2, [r3, #2]
		bc[3] = 0xff;
   21d96:	2314      	movs	r3, #20
   21d98:	18fb      	adds	r3, r7, r3
   21d9a:	22ff      	movs	r2, #255	; 0xff
   21d9c:	70da      	strb	r2, [r3, #3]
		len = 5;
   21d9e:	231f      	movs	r3, #31
   21da0:	18fb      	adds	r3, r7, r3
   21da2:	2205      	movs	r2, #5
   21da4:	701a      	strb	r2, [r3, #0]
		break;
   21da6:	e0af      	b.n	21f08 <spi_cmd+0x280>
	case CMD_DMA_WRITE:					/* dma write */
	case CMD_DMA_READ:					/* dma read */
		bc[1] = (uint8)(adr >> 16);
   21da8:	68bb      	ldr	r3, [r7, #8]
   21daa:	0c1b      	lsrs	r3, r3, #16
   21dac:	b2da      	uxtb	r2, r3
   21dae:	2314      	movs	r3, #20
   21db0:	18fb      	adds	r3, r7, r3
   21db2:	705a      	strb	r2, [r3, #1]
		bc[2] = (uint8)(adr >> 8);
   21db4:	68bb      	ldr	r3, [r7, #8]
   21db6:	0a1b      	lsrs	r3, r3, #8
   21db8:	b2da      	uxtb	r2, r3
   21dba:	2314      	movs	r3, #20
   21dbc:	18fb      	adds	r3, r7, r3
   21dbe:	709a      	strb	r2, [r3, #2]
		bc[3] = (uint8)adr;
   21dc0:	68bb      	ldr	r3, [r7, #8]
   21dc2:	b2da      	uxtb	r2, r3
   21dc4:	2314      	movs	r3, #20
   21dc6:	18fb      	adds	r3, r7, r3
   21dc8:	70da      	strb	r2, [r3, #3]
		bc[4] = (uint8)(sz >> 8);
   21dca:	683b      	ldr	r3, [r7, #0]
   21dcc:	0a1b      	lsrs	r3, r3, #8
   21dce:	b2da      	uxtb	r2, r3
   21dd0:	2314      	movs	r3, #20
   21dd2:	18fb      	adds	r3, r7, r3
   21dd4:	711a      	strb	r2, [r3, #4]
		bc[5] = (uint8)(sz);
   21dd6:	683b      	ldr	r3, [r7, #0]
   21dd8:	b2da      	uxtb	r2, r3
   21dda:	2314      	movs	r3, #20
   21ddc:	18fb      	adds	r3, r7, r3
   21dde:	715a      	strb	r2, [r3, #5]
		len = 7;
   21de0:	231f      	movs	r3, #31
   21de2:	18fb      	adds	r3, r7, r3
   21de4:	2207      	movs	r2, #7
   21de6:	701a      	strb	r2, [r3, #0]
		break;
   21de8:	e08e      	b.n	21f08 <spi_cmd+0x280>
	case CMD_DMA_EXT_WRITE:		/* dma extended write */
	case CMD_DMA_EXT_READ:			/* dma extended read */
		bc[1] = (uint8)(adr >> 16);
   21dea:	68bb      	ldr	r3, [r7, #8]
   21dec:	0c1b      	lsrs	r3, r3, #16
   21dee:	b2da      	uxtb	r2, r3
   21df0:	2314      	movs	r3, #20
   21df2:	18fb      	adds	r3, r7, r3
   21df4:	705a      	strb	r2, [r3, #1]
		bc[2] = (uint8)(adr >> 8);
   21df6:	68bb      	ldr	r3, [r7, #8]
   21df8:	0a1b      	lsrs	r3, r3, #8
   21dfa:	b2da      	uxtb	r2, r3
   21dfc:	2314      	movs	r3, #20
   21dfe:	18fb      	adds	r3, r7, r3
   21e00:	709a      	strb	r2, [r3, #2]
		bc[3] = (uint8)adr;
   21e02:	68bb      	ldr	r3, [r7, #8]
   21e04:	b2da      	uxtb	r2, r3
   21e06:	2314      	movs	r3, #20
   21e08:	18fb      	adds	r3, r7, r3
   21e0a:	70da      	strb	r2, [r3, #3]
		bc[4] = (uint8)(sz >> 16);
   21e0c:	683b      	ldr	r3, [r7, #0]
   21e0e:	0c1b      	lsrs	r3, r3, #16
   21e10:	b2da      	uxtb	r2, r3
   21e12:	2314      	movs	r3, #20
   21e14:	18fb      	adds	r3, r7, r3
   21e16:	711a      	strb	r2, [r3, #4]
		bc[5] = (uint8)(sz >> 8);
   21e18:	683b      	ldr	r3, [r7, #0]
   21e1a:	0a1b      	lsrs	r3, r3, #8
   21e1c:	b2da      	uxtb	r2, r3
   21e1e:	2314      	movs	r3, #20
   21e20:	18fb      	adds	r3, r7, r3
   21e22:	715a      	strb	r2, [r3, #5]
		bc[6] = (uint8)(sz);
   21e24:	683b      	ldr	r3, [r7, #0]
   21e26:	b2da      	uxtb	r2, r3
   21e28:	2314      	movs	r3, #20
   21e2a:	18fb      	adds	r3, r7, r3
   21e2c:	719a      	strb	r2, [r3, #6]
		len = 8;
   21e2e:	231f      	movs	r3, #31
   21e30:	18fb      	adds	r3, r7, r3
   21e32:	2208      	movs	r2, #8
   21e34:	701a      	strb	r2, [r3, #0]
		break;
   21e36:	e067      	b.n	21f08 <spi_cmd+0x280>
	case CMD_INTERNAL_WRITE:		/* internal register write */
		bc[1] = (uint8)(adr >> 8);
   21e38:	68bb      	ldr	r3, [r7, #8]
   21e3a:	0a1b      	lsrs	r3, r3, #8
   21e3c:	b2da      	uxtb	r2, r3
   21e3e:	2314      	movs	r3, #20
   21e40:	18fb      	adds	r3, r7, r3
   21e42:	705a      	strb	r2, [r3, #1]
		if(clockless)  bc[1] |= (1 << 7);
   21e44:	2330      	movs	r3, #48	; 0x30
   21e46:	18fb      	adds	r3, r7, r3
   21e48:	781b      	ldrb	r3, [r3, #0]
   21e4a:	2b00      	cmp	r3, #0
   21e4c:	d009      	beq.n	21e62 <spi_cmd+0x1da>
   21e4e:	2314      	movs	r3, #20
   21e50:	18fb      	adds	r3, r7, r3
   21e52:	785b      	ldrb	r3, [r3, #1]
   21e54:	2280      	movs	r2, #128	; 0x80
   21e56:	4252      	negs	r2, r2
   21e58:	4313      	orrs	r3, r2
   21e5a:	b2da      	uxtb	r2, r3
   21e5c:	2314      	movs	r3, #20
   21e5e:	18fb      	adds	r3, r7, r3
   21e60:	705a      	strb	r2, [r3, #1]
		bc[2] = (uint8)(adr);
   21e62:	68bb      	ldr	r3, [r7, #8]
   21e64:	b2da      	uxtb	r2, r3
   21e66:	2314      	movs	r3, #20
   21e68:	18fb      	adds	r3, r7, r3
   21e6a:	709a      	strb	r2, [r3, #2]
		bc[3] = (uint8)(u32data >> 24);
   21e6c:	687b      	ldr	r3, [r7, #4]
   21e6e:	0e1b      	lsrs	r3, r3, #24
   21e70:	b2da      	uxtb	r2, r3
   21e72:	2314      	movs	r3, #20
   21e74:	18fb      	adds	r3, r7, r3
   21e76:	70da      	strb	r2, [r3, #3]
		bc[4] = (uint8)(u32data >> 16);
   21e78:	687b      	ldr	r3, [r7, #4]
   21e7a:	0c1b      	lsrs	r3, r3, #16
   21e7c:	b2da      	uxtb	r2, r3
   21e7e:	2314      	movs	r3, #20
   21e80:	18fb      	adds	r3, r7, r3
   21e82:	711a      	strb	r2, [r3, #4]
		bc[5] = (uint8)(u32data >> 8);
   21e84:	687b      	ldr	r3, [r7, #4]
   21e86:	0a1b      	lsrs	r3, r3, #8
   21e88:	b2da      	uxtb	r2, r3
   21e8a:	2314      	movs	r3, #20
   21e8c:	18fb      	adds	r3, r7, r3
   21e8e:	715a      	strb	r2, [r3, #5]
		bc[6] = (uint8)(u32data);
   21e90:	687b      	ldr	r3, [r7, #4]
   21e92:	b2da      	uxtb	r2, r3
   21e94:	2314      	movs	r3, #20
   21e96:	18fb      	adds	r3, r7, r3
   21e98:	719a      	strb	r2, [r3, #6]
		len = 8;
   21e9a:	231f      	movs	r3, #31
   21e9c:	18fb      	adds	r3, r7, r3
   21e9e:	2208      	movs	r2, #8
   21ea0:	701a      	strb	r2, [r3, #0]
		break;
   21ea2:	e031      	b.n	21f08 <spi_cmd+0x280>
	case CMD_SINGLE_WRITE:			/* single word write */
		bc[1] = (uint8)(adr >> 16);
   21ea4:	68bb      	ldr	r3, [r7, #8]
   21ea6:	0c1b      	lsrs	r3, r3, #16
   21ea8:	b2da      	uxtb	r2, r3
   21eaa:	2314      	movs	r3, #20
   21eac:	18fb      	adds	r3, r7, r3
   21eae:	705a      	strb	r2, [r3, #1]
		bc[2] = (uint8)(adr >> 8);
   21eb0:	68bb      	ldr	r3, [r7, #8]
   21eb2:	0a1b      	lsrs	r3, r3, #8
   21eb4:	b2da      	uxtb	r2, r3
   21eb6:	2314      	movs	r3, #20
   21eb8:	18fb      	adds	r3, r7, r3
   21eba:	709a      	strb	r2, [r3, #2]
		bc[3] = (uint8)(adr);
   21ebc:	68bb      	ldr	r3, [r7, #8]
   21ebe:	b2da      	uxtb	r2, r3
   21ec0:	2314      	movs	r3, #20
   21ec2:	18fb      	adds	r3, r7, r3
   21ec4:	70da      	strb	r2, [r3, #3]
		bc[4] = (uint8)(u32data >> 24);
   21ec6:	687b      	ldr	r3, [r7, #4]
   21ec8:	0e1b      	lsrs	r3, r3, #24
   21eca:	b2da      	uxtb	r2, r3
   21ecc:	2314      	movs	r3, #20
   21ece:	18fb      	adds	r3, r7, r3
   21ed0:	711a      	strb	r2, [r3, #4]
		bc[5] = (uint8)(u32data >> 16);
   21ed2:	687b      	ldr	r3, [r7, #4]
   21ed4:	0c1b      	lsrs	r3, r3, #16
   21ed6:	b2da      	uxtb	r2, r3
   21ed8:	2314      	movs	r3, #20
   21eda:	18fb      	adds	r3, r7, r3
   21edc:	715a      	strb	r2, [r3, #5]
		bc[6] = (uint8)(u32data >> 8);
   21ede:	687b      	ldr	r3, [r7, #4]
   21ee0:	0a1b      	lsrs	r3, r3, #8
   21ee2:	b2da      	uxtb	r2, r3
   21ee4:	2314      	movs	r3, #20
   21ee6:	18fb      	adds	r3, r7, r3
   21ee8:	719a      	strb	r2, [r3, #6]
		bc[7] = (uint8)(u32data);
   21eea:	687b      	ldr	r3, [r7, #4]
   21eec:	b2da      	uxtb	r2, r3
   21eee:	2314      	movs	r3, #20
   21ef0:	18fb      	adds	r3, r7, r3
   21ef2:	71da      	strb	r2, [r3, #7]
		len = 9;
   21ef4:	231f      	movs	r3, #31
   21ef6:	18fb      	adds	r3, r7, r3
   21ef8:	2209      	movs	r2, #9
   21efa:	701a      	strb	r2, [r3, #0]
		break;
   21efc:	e004      	b.n	21f08 <spi_cmd+0x280>
	default:
		result = N_FAIL;
   21efe:	231e      	movs	r3, #30
   21f00:	18fb      	adds	r3, r7, r3
   21f02:	2200      	movs	r2, #0
   21f04:	701a      	strb	r2, [r3, #0]
		break;
   21f06:	46c0      	nop			; (mov r8, r8)
	}

	if (result) {
   21f08:	231e      	movs	r3, #30
   21f0a:	18fb      	adds	r3, r7, r3
   21f0c:	781b      	ldrb	r3, [r3, #0]
   21f0e:	b25b      	sxtb	r3, r3
   21f10:	2b00      	cmp	r3, #0
   21f12:	d03f      	beq.n	21f94 <spi_cmd+0x30c>
		if (!gu8Crc_off)
   21f14:	4b24      	ldr	r3, [pc, #144]	; (21fa8 <spi_cmd+0x320>)
   21f16:	781b      	ldrb	r3, [r3, #0]
   21f18:	2b00      	cmp	r3, #0
   21f1a:	d115      	bne.n	21f48 <spi_cmd+0x2c0>
			bc[len-1] = (crc7(0x7f, (const uint8 *)&bc[0], len-1)) << 1;
   21f1c:	231f      	movs	r3, #31
   21f1e:	18fb      	adds	r3, r7, r3
   21f20:	781b      	ldrb	r3, [r3, #0]
   21f22:	1e5c      	subs	r4, r3, #1
   21f24:	231f      	movs	r3, #31
   21f26:	18fb      	adds	r3, r7, r3
   21f28:	781b      	ldrb	r3, [r3, #0]
   21f2a:	3b01      	subs	r3, #1
   21f2c:	001a      	movs	r2, r3
   21f2e:	2314      	movs	r3, #20
   21f30:	18fb      	adds	r3, r7, r3
   21f32:	0019      	movs	r1, r3
   21f34:	207f      	movs	r0, #127	; 0x7f
   21f36:	4b1d      	ldr	r3, [pc, #116]	; (21fac <spi_cmd+0x324>)
   21f38:	4798      	blx	r3
   21f3a:	0003      	movs	r3, r0
   21f3c:	18db      	adds	r3, r3, r3
   21f3e:	b2da      	uxtb	r2, r3
   21f40:	2314      	movs	r3, #20
   21f42:	18fb      	adds	r3, r7, r3
   21f44:	551a      	strb	r2, [r3, r4]
   21f46:	e006      	b.n	21f56 <spi_cmd+0x2ce>
		else
			len-=1;
   21f48:	231f      	movs	r3, #31
   21f4a:	18fb      	adds	r3, r7, r3
   21f4c:	221f      	movs	r2, #31
   21f4e:	18ba      	adds	r2, r7, r2
   21f50:	7812      	ldrb	r2, [r2, #0]
   21f52:	3a01      	subs	r2, #1
   21f54:	701a      	strb	r2, [r3, #0]

		if (M2M_SUCCESS != nmi_spi_write(bc, len)) {
   21f56:	231f      	movs	r3, #31
   21f58:	18fb      	adds	r3, r7, r3
   21f5a:	781b      	ldrb	r3, [r3, #0]
   21f5c:	b29a      	uxth	r2, r3
   21f5e:	2314      	movs	r3, #20
   21f60:	18fb      	adds	r3, r7, r3
   21f62:	0011      	movs	r1, r2
   21f64:	0018      	movs	r0, r3
   21f66:	4b12      	ldr	r3, [pc, #72]	; (21fb0 <spi_cmd+0x328>)
   21f68:	4798      	blx	r3
   21f6a:	1e03      	subs	r3, r0, #0
   21f6c:	d012      	beq.n	21f94 <spi_cmd+0x30c>
			M2M_ERR("[nmi spi]: Failed cmd write, bus error...\n");
   21f6e:	2390      	movs	r3, #144	; 0x90
   21f70:	005a      	lsls	r2, r3, #1
   21f72:	4910      	ldr	r1, [pc, #64]	; (21fb4 <spi_cmd+0x32c>)
   21f74:	4b10      	ldr	r3, [pc, #64]	; (21fb8 <spi_cmd+0x330>)
   21f76:	0018      	movs	r0, r3
   21f78:	4b10      	ldr	r3, [pc, #64]	; (21fbc <spi_cmd+0x334>)
   21f7a:	4798      	blx	r3
   21f7c:	4b10      	ldr	r3, [pc, #64]	; (21fc0 <spi_cmd+0x338>)
   21f7e:	0018      	movs	r0, r3
   21f80:	4b0e      	ldr	r3, [pc, #56]	; (21fbc <spi_cmd+0x334>)
   21f82:	4798      	blx	r3
   21f84:	4b0f      	ldr	r3, [pc, #60]	; (21fc4 <spi_cmd+0x33c>)
   21f86:	0018      	movs	r0, r3
   21f88:	4b0c      	ldr	r3, [pc, #48]	; (21fbc <spi_cmd+0x334>)
   21f8a:	4798      	blx	r3
			result = N_FAIL;
   21f8c:	231e      	movs	r3, #30
   21f8e:	18fb      	adds	r3, r7, r3
   21f90:	2200      	movs	r2, #0
   21f92:	701a      	strb	r2, [r3, #0]
		}
	}

	return result;
   21f94:	231e      	movs	r3, #30
   21f96:	18fb      	adds	r3, r7, r3
   21f98:	781b      	ldrb	r3, [r3, #0]
   21f9a:	b25b      	sxtb	r3, r3
}
   21f9c:	0018      	movs	r0, r3
   21f9e:	46bd      	mov	sp, r7
   21fa0:	b009      	add	sp, #36	; 0x24
   21fa2:	bd90      	pop	{r4, r7, pc}
   21fa4:	00037734 	.word	0x00037734
   21fa8:	20003d4c 	.word	0x20003d4c
   21fac:	00021c39 	.word	0x00021c39
   21fb0:	00021b81 	.word	0x00021b81
   21fb4:	000377ac 	.word	0x000377ac
   21fb8:	000371bc 	.word	0x000371bc
   21fbc:	0001c65d 	.word	0x0001c65d
   21fc0:	000371d0 	.word	0x000371d0
   21fc4:	000371fc 	.word	0x000371fc

00021fc8 <spi_data_rsp>:

static sint8 spi_data_rsp(uint8 cmd)
{
   21fc8:	b590      	push	{r4, r7, lr}
   21fca:	b085      	sub	sp, #20
   21fcc:	af00      	add	r7, sp, #0
   21fce:	0002      	movs	r2, r0
   21fd0:	1dfb      	adds	r3, r7, #7
   21fd2:	701a      	strb	r2, [r3, #0]
	uint8 len;
	uint8 rsp[3];
	sint8 result = N_OK;
   21fd4:	230e      	movs	r3, #14
   21fd6:	18fb      	adds	r3, r7, r3
   21fd8:	2201      	movs	r2, #1
   21fda:	701a      	strb	r2, [r3, #0]

    if (!gu8Crc_off)
   21fdc:	4b32      	ldr	r3, [pc, #200]	; (220a8 <spi_data_rsp+0xe0>)
   21fde:	781b      	ldrb	r3, [r3, #0]
   21fe0:	2b00      	cmp	r3, #0
   21fe2:	d104      	bne.n	21fee <spi_data_rsp+0x26>
		len = 2;
   21fe4:	230f      	movs	r3, #15
   21fe6:	18fb      	adds	r3, r7, r3
   21fe8:	2202      	movs	r2, #2
   21fea:	701a      	strb	r2, [r3, #0]
   21fec:	e003      	b.n	21ff6 <spi_data_rsp+0x2e>
	else
		len = 3;
   21fee:	230f      	movs	r3, #15
   21ff0:	18fb      	adds	r3, r7, r3
   21ff2:	2203      	movs	r2, #3
   21ff4:	701a      	strb	r2, [r3, #0]

	if (M2M_SUCCESS != nmi_spi_read(&rsp[0], len)) {
   21ff6:	230f      	movs	r3, #15
   21ff8:	18fb      	adds	r3, r7, r3
   21ffa:	781b      	ldrb	r3, [r3, #0]
   21ffc:	b29a      	uxth	r2, r3
   21ffe:	2308      	movs	r3, #8
   22000:	18fb      	adds	r3, r7, r3
   22002:	0011      	movs	r1, r2
   22004:	0018      	movs	r0, r3
   22006:	4b29      	ldr	r3, [pc, #164]	; (220ac <spi_data_rsp+0xe4>)
   22008:	4798      	blx	r3
   2200a:	1e03      	subs	r3, r0, #0
   2200c:	d013      	beq.n	22036 <spi_data_rsp+0x6e>
		M2M_ERR("[nmi spi]: Failed bus error...\n");
   2200e:	239a      	movs	r3, #154	; 0x9a
   22010:	005a      	lsls	r2, r3, #1
   22012:	4927      	ldr	r1, [pc, #156]	; (220b0 <spi_data_rsp+0xe8>)
   22014:	4b27      	ldr	r3, [pc, #156]	; (220b4 <spi_data_rsp+0xec>)
   22016:	0018      	movs	r0, r3
   22018:	4b27      	ldr	r3, [pc, #156]	; (220b8 <spi_data_rsp+0xf0>)
   2201a:	4798      	blx	r3
   2201c:	4b27      	ldr	r3, [pc, #156]	; (220bc <spi_data_rsp+0xf4>)
   2201e:	0018      	movs	r0, r3
   22020:	4b25      	ldr	r3, [pc, #148]	; (220b8 <spi_data_rsp+0xf0>)
   22022:	4798      	blx	r3
   22024:	4b26      	ldr	r3, [pc, #152]	; (220c0 <spi_data_rsp+0xf8>)
   22026:	0018      	movs	r0, r3
   22028:	4b23      	ldr	r3, [pc, #140]	; (220b8 <spi_data_rsp+0xf0>)
   2202a:	4798      	blx	r3
		result = N_FAIL;
   2202c:	230e      	movs	r3, #14
   2202e:	18fb      	adds	r3, r7, r3
   22030:	2200      	movs	r2, #0
   22032:	701a      	strb	r2, [r3, #0]
		goto _fail_;
   22034:	e030      	b.n	22098 <spi_data_rsp+0xd0>
	}
		
	if((rsp[len-1] != 0)||(rsp[len-2] != 0xC3))
   22036:	230f      	movs	r3, #15
   22038:	18fb      	adds	r3, r7, r3
   2203a:	781b      	ldrb	r3, [r3, #0]
   2203c:	3b01      	subs	r3, #1
   2203e:	2208      	movs	r2, #8
   22040:	18ba      	adds	r2, r7, r2
   22042:	5cd3      	ldrb	r3, [r2, r3]
   22044:	2b00      	cmp	r3, #0
   22046:	d108      	bne.n	2205a <spi_data_rsp+0x92>
   22048:	230f      	movs	r3, #15
   2204a:	18fb      	adds	r3, r7, r3
   2204c:	781b      	ldrb	r3, [r3, #0]
   2204e:	3b02      	subs	r3, #2
   22050:	2208      	movs	r2, #8
   22052:	18ba      	adds	r2, r7, r2
   22054:	5cd3      	ldrb	r3, [r2, r3]
   22056:	2bc3      	cmp	r3, #195	; 0xc3
   22058:	d01e      	beq.n	22098 <spi_data_rsp+0xd0>
	{
		M2M_ERR("[nmi spi]: Failed data response read, %x %x %x\n",rsp[0],rsp[1],rsp[2]);
   2205a:	233c      	movs	r3, #60	; 0x3c
   2205c:	33ff      	adds	r3, #255	; 0xff
   2205e:	001a      	movs	r2, r3
   22060:	4913      	ldr	r1, [pc, #76]	; (220b0 <spi_data_rsp+0xe8>)
   22062:	4b14      	ldr	r3, [pc, #80]	; (220b4 <spi_data_rsp+0xec>)
   22064:	0018      	movs	r0, r3
   22066:	4b14      	ldr	r3, [pc, #80]	; (220b8 <spi_data_rsp+0xf0>)
   22068:	4798      	blx	r3
   2206a:	2308      	movs	r3, #8
   2206c:	18fb      	adds	r3, r7, r3
   2206e:	781b      	ldrb	r3, [r3, #0]
   22070:	0019      	movs	r1, r3
   22072:	2308      	movs	r3, #8
   22074:	18fb      	adds	r3, r7, r3
   22076:	785b      	ldrb	r3, [r3, #1]
   22078:	001a      	movs	r2, r3
   2207a:	2308      	movs	r3, #8
   2207c:	18fb      	adds	r3, r7, r3
   2207e:	789b      	ldrb	r3, [r3, #2]
   22080:	4810      	ldr	r0, [pc, #64]	; (220c4 <spi_data_rsp+0xfc>)
   22082:	4c0d      	ldr	r4, [pc, #52]	; (220b8 <spi_data_rsp+0xf0>)
   22084:	47a0      	blx	r4
   22086:	4b0e      	ldr	r3, [pc, #56]	; (220c0 <spi_data_rsp+0xf8>)
   22088:	0018      	movs	r0, r3
   2208a:	4b0b      	ldr	r3, [pc, #44]	; (220b8 <spi_data_rsp+0xf0>)
   2208c:	4798      	blx	r3
		result = N_FAIL;
   2208e:	230e      	movs	r3, #14
   22090:	18fb      	adds	r3, r7, r3
   22092:	2200      	movs	r2, #0
   22094:	701a      	strb	r2, [r3, #0]
		goto _fail_;
   22096:	46c0      	nop			; (mov r8, r8)
	}
_fail_:

	return result;
   22098:	230e      	movs	r3, #14
   2209a:	18fb      	adds	r3, r7, r3
   2209c:	781b      	ldrb	r3, [r3, #0]
   2209e:	b25b      	sxtb	r3, r3
}
   220a0:	0018      	movs	r0, r3
   220a2:	46bd      	mov	sp, r7
   220a4:	b005      	add	sp, #20
   220a6:	bd90      	pop	{r4, r7, pc}
   220a8:	20003d4c 	.word	0x20003d4c
   220ac:	00021b3d 	.word	0x00021b3d
   220b0:	000377b4 	.word	0x000377b4
   220b4:	000371bc 	.word	0x000371bc
   220b8:	0001c65d 	.word	0x0001c65d
   220bc:	00037200 	.word	0x00037200
   220c0:	000371fc 	.word	0x000371fc
   220c4:	00037220 	.word	0x00037220

000220c8 <spi_cmd_rsp>:

static sint8 spi_cmd_rsp(uint8 cmd)
{
   220c8:	b580      	push	{r7, lr}
   220ca:	b084      	sub	sp, #16
   220cc:	af00      	add	r7, sp, #0
   220ce:	0002      	movs	r2, r0
   220d0:	1dfb      	adds	r3, r7, #7
   220d2:	701a      	strb	r2, [r3, #0]
	uint8 rsp;
	sint8 result = N_OK;
   220d4:	230f      	movs	r3, #15
   220d6:	18fb      	adds	r3, r7, r3
   220d8:	2201      	movs	r2, #1
   220da:	701a      	strb	r2, [r3, #0]
	sint8 s8RetryCnt;

	/**
		Command/Control response
	**/
	if ((cmd == CMD_RESET) ||
   220dc:	1dfb      	adds	r3, r7, #7
   220de:	781b      	ldrb	r3, [r3, #0]
   220e0:	2bcf      	cmp	r3, #207	; 0xcf
   220e2:	d007      	beq.n	220f4 <spi_cmd_rsp+0x2c>
   220e4:	1dfb      	adds	r3, r7, #7
   220e6:	781b      	ldrb	r3, [r3, #0]
   220e8:	2bc5      	cmp	r3, #197	; 0xc5
   220ea:	d003      	beq.n	220f4 <spi_cmd_rsp+0x2c>
		 (cmd == CMD_TERMINATE) ||
   220ec:	1dfb      	adds	r3, r7, #7
   220ee:	781b      	ldrb	r3, [r3, #0]
   220f0:	2bc6      	cmp	r3, #198	; 0xc6
   220f2:	d10c      	bne.n	2210e <spi_cmd_rsp+0x46>
		 (cmd == CMD_REPEAT)) {
		if (M2M_SUCCESS != nmi_spi_read(&rsp, 1)) {
   220f4:	230d      	movs	r3, #13
   220f6:	18fb      	adds	r3, r7, r3
   220f8:	2101      	movs	r1, #1
   220fa:	0018      	movs	r0, r3
   220fc:	4b3b      	ldr	r3, [pc, #236]	; (221ec <spi_cmd_rsp+0x124>)
   220fe:	4798      	blx	r3
   22100:	1e03      	subs	r3, r0, #0
   22102:	d004      	beq.n	2210e <spi_cmd_rsp+0x46>
			result = N_FAIL;
   22104:	230f      	movs	r3, #15
   22106:	18fb      	adds	r3, r7, r3
   22108:	2200      	movs	r2, #0
   2210a:	701a      	strb	r2, [r3, #0]
			goto _fail_;
   2210c:	e065      	b.n	221da <spi_cmd_rsp+0x112>
		}
	}

	/* wait for response */
	s8RetryCnt = SPI_RESP_RETRY_COUNT;
   2210e:	230e      	movs	r3, #14
   22110:	18fb      	adds	r3, r7, r3
   22112:	220a      	movs	r2, #10
   22114:	701a      	strb	r2, [r3, #0]
	do
	{
		if (M2M_SUCCESS != nmi_spi_read(&rsp, 1)) {
   22116:	230d      	movs	r3, #13
   22118:	18fb      	adds	r3, r7, r3
   2211a:	2101      	movs	r1, #1
   2211c:	0018      	movs	r0, r3
   2211e:	4b33      	ldr	r3, [pc, #204]	; (221ec <spi_cmd_rsp+0x124>)
   22120:	4798      	blx	r3
   22122:	1e03      	subs	r3, r0, #0
   22124:	d014      	beq.n	22150 <spi_cmd_rsp+0x88>
			M2M_ERR("[nmi spi]: Failed cmd response read, bus error...\n");
   22126:	235c      	movs	r3, #92	; 0x5c
   22128:	33ff      	adds	r3, #255	; 0xff
   2212a:	001a      	movs	r2, r3
   2212c:	4930      	ldr	r1, [pc, #192]	; (221f0 <spi_cmd_rsp+0x128>)
   2212e:	4b31      	ldr	r3, [pc, #196]	; (221f4 <spi_cmd_rsp+0x12c>)
   22130:	0018      	movs	r0, r3
   22132:	4b31      	ldr	r3, [pc, #196]	; (221f8 <spi_cmd_rsp+0x130>)
   22134:	4798      	blx	r3
   22136:	4b31      	ldr	r3, [pc, #196]	; (221fc <spi_cmd_rsp+0x134>)
   22138:	0018      	movs	r0, r3
   2213a:	4b2f      	ldr	r3, [pc, #188]	; (221f8 <spi_cmd_rsp+0x130>)
   2213c:	4798      	blx	r3
   2213e:	4b30      	ldr	r3, [pc, #192]	; (22200 <spi_cmd_rsp+0x138>)
   22140:	0018      	movs	r0, r3
   22142:	4b2d      	ldr	r3, [pc, #180]	; (221f8 <spi_cmd_rsp+0x130>)
   22144:	4798      	blx	r3
			result = N_FAIL;
   22146:	230f      	movs	r3, #15
   22148:	18fb      	adds	r3, r7, r3
   2214a:	2200      	movs	r2, #0
   2214c:	701a      	strb	r2, [r3, #0]
			goto _fail_;
   2214e:	e044      	b.n	221da <spi_cmd_rsp+0x112>
		}
	} while((rsp != cmd) && (s8RetryCnt-- >0));
   22150:	230d      	movs	r3, #13
   22152:	18fb      	adds	r3, r7, r3
   22154:	781b      	ldrb	r3, [r3, #0]
   22156:	1dfa      	adds	r2, r7, #7
   22158:	7812      	ldrb	r2, [r2, #0]
   2215a:	429a      	cmp	r2, r3
   2215c:	d00b      	beq.n	22176 <spi_cmd_rsp+0xae>
   2215e:	230e      	movs	r3, #14
   22160:	18fb      	adds	r3, r7, r3
   22162:	781b      	ldrb	r3, [r3, #0]
   22164:	b25b      	sxtb	r3, r3
   22166:	b2da      	uxtb	r2, r3
   22168:	3a01      	subs	r2, #1
   2216a:	b2d1      	uxtb	r1, r2
   2216c:	220e      	movs	r2, #14
   2216e:	18ba      	adds	r2, r7, r2
   22170:	7011      	strb	r1, [r2, #0]
   22172:	2b00      	cmp	r3, #0
   22174:	dccf      	bgt.n	22116 <spi_cmd_rsp+0x4e>

	/**
		State response
	**/
	/* wait for response */
	s8RetryCnt = SPI_RESP_RETRY_COUNT;
   22176:	230e      	movs	r3, #14
   22178:	18fb      	adds	r3, r7, r3
   2217a:	220a      	movs	r2, #10
   2217c:	701a      	strb	r2, [r3, #0]
	do
	{
		if (M2M_SUCCESS != nmi_spi_read(&rsp, 1)) {
   2217e:	230d      	movs	r3, #13
   22180:	18fb      	adds	r3, r7, r3
   22182:	2101      	movs	r1, #1
   22184:	0018      	movs	r0, r3
   22186:	4b19      	ldr	r3, [pc, #100]	; (221ec <spi_cmd_rsp+0x124>)
   22188:	4798      	blx	r3
   2218a:	1e03      	subs	r3, r0, #0
   2218c:	d014      	beq.n	221b8 <spi_cmd_rsp+0xf0>
			M2M_ERR("[nmi spi]: Failed cmd response read, bus error...\n");
   2218e:	236a      	movs	r3, #106	; 0x6a
   22190:	33ff      	adds	r3, #255	; 0xff
   22192:	001a      	movs	r2, r3
   22194:	4916      	ldr	r1, [pc, #88]	; (221f0 <spi_cmd_rsp+0x128>)
   22196:	4b17      	ldr	r3, [pc, #92]	; (221f4 <spi_cmd_rsp+0x12c>)
   22198:	0018      	movs	r0, r3
   2219a:	4b17      	ldr	r3, [pc, #92]	; (221f8 <spi_cmd_rsp+0x130>)
   2219c:	4798      	blx	r3
   2219e:	4b17      	ldr	r3, [pc, #92]	; (221fc <spi_cmd_rsp+0x134>)
   221a0:	0018      	movs	r0, r3
   221a2:	4b15      	ldr	r3, [pc, #84]	; (221f8 <spi_cmd_rsp+0x130>)
   221a4:	4798      	blx	r3
   221a6:	4b16      	ldr	r3, [pc, #88]	; (22200 <spi_cmd_rsp+0x138>)
   221a8:	0018      	movs	r0, r3
   221aa:	4b13      	ldr	r3, [pc, #76]	; (221f8 <spi_cmd_rsp+0x130>)
   221ac:	4798      	blx	r3
			result = N_FAIL;
   221ae:	230f      	movs	r3, #15
   221b0:	18fb      	adds	r3, r7, r3
   221b2:	2200      	movs	r2, #0
   221b4:	701a      	strb	r2, [r3, #0]
			goto _fail_;
   221b6:	e010      	b.n	221da <spi_cmd_rsp+0x112>
		}
	} while((rsp != 0x00) && (s8RetryCnt-- >0));
   221b8:	230d      	movs	r3, #13
   221ba:	18fb      	adds	r3, r7, r3
   221bc:	781b      	ldrb	r3, [r3, #0]
   221be:	2b00      	cmp	r3, #0
   221c0:	d00b      	beq.n	221da <spi_cmd_rsp+0x112>
   221c2:	230e      	movs	r3, #14
   221c4:	18fb      	adds	r3, r7, r3
   221c6:	781b      	ldrb	r3, [r3, #0]
   221c8:	b25b      	sxtb	r3, r3
   221ca:	b2da      	uxtb	r2, r3
   221cc:	3a01      	subs	r2, #1
   221ce:	b2d1      	uxtb	r1, r2
   221d0:	220e      	movs	r2, #14
   221d2:	18ba      	adds	r2, r7, r2
   221d4:	7011      	strb	r1, [r2, #0]
   221d6:	2b00      	cmp	r3, #0
   221d8:	dcd1      	bgt.n	2217e <spi_cmd_rsp+0xb6>

_fail_:

	return result;
   221da:	230f      	movs	r3, #15
   221dc:	18fb      	adds	r3, r7, r3
   221de:	781b      	ldrb	r3, [r3, #0]
   221e0:	b25b      	sxtb	r3, r3
}
   221e2:	0018      	movs	r0, r3
   221e4:	46bd      	mov	sp, r7
   221e6:	b004      	add	sp, #16
   221e8:	bd80      	pop	{r7, pc}
   221ea:	46c0      	nop			; (mov r8, r8)
   221ec:	00021b3d 	.word	0x00021b3d
   221f0:	000377c4 	.word	0x000377c4
   221f4:	000371bc 	.word	0x000371bc
   221f8:	0001c65d 	.word	0x0001c65d
   221fc:	00037250 	.word	0x00037250
   22200:	000371fc 	.word	0x000371fc

00022204 <spi_cmd_complete>:
#ifndef USE_OLD_SPI_SW
static int spi_cmd_complete(uint8_t cmd, uint32_t adr, uint8_t *b, uint32_t sz, uint8_t clockless)
{
   22204:	b590      	push	{r4, r7, lr}
   22206:	b09f      	sub	sp, #124	; 0x7c
   22208:	af00      	add	r7, sp, #0
   2220a:	60b9      	str	r1, [r7, #8]
   2220c:	607a      	str	r2, [r7, #4]
   2220e:	603b      	str	r3, [r7, #0]
   22210:	230f      	movs	r3, #15
   22212:	18fb      	adds	r3, r7, r3
   22214:	1c02      	adds	r2, r0, #0
   22216:	701a      	strb	r2, [r3, #0]
	uint8_t wb[32], rb[32];
	uint8_t wix, rix;
	uint32_t len2;
	uint8_t rsp;
	int len = 0;
   22218:	2300      	movs	r3, #0
   2221a:	66fb      	str	r3, [r7, #108]	; 0x6c
	int result = N_OK;
   2221c:	2301      	movs	r3, #1
   2221e:	66bb      	str	r3, [r7, #104]	; 0x68

	wb[0] = cmd;
   22220:	2338      	movs	r3, #56	; 0x38
   22222:	18fb      	adds	r3, r7, r3
   22224:	220f      	movs	r2, #15
   22226:	18ba      	adds	r2, r7, r2
   22228:	7812      	ldrb	r2, [r2, #0]
   2222a:	701a      	strb	r2, [r3, #0]
	switch (cmd) {
   2222c:	230f      	movs	r3, #15
   2222e:	18fb      	adds	r3, r7, r3
   22230:	781b      	ldrb	r3, [r3, #0]
   22232:	3bc1      	subs	r3, #193	; 0xc1
   22234:	2b0e      	cmp	r3, #14
   22236:	d900      	bls.n	2223a <spi_cmd_complete+0x36>
   22238:	e103      	b.n	22442 <spi_cmd_complete+0x23e>
   2223a:	009a      	lsls	r2, r3, #2
   2223c:	4bd1      	ldr	r3, [pc, #836]	; (22584 <spi_cmd_complete+0x380>)
   2223e:	18d3      	adds	r3, r2, r3
   22240:	681b      	ldr	r3, [r3, #0]
   22242:	469f      	mov	pc, r3
	case CMD_SINGLE_READ:				/* single word (4 bytes) read */
		wb[1] = (uint8_t)(adr >> 16);
   22244:	68bb      	ldr	r3, [r7, #8]
   22246:	0c1b      	lsrs	r3, r3, #16
   22248:	b2da      	uxtb	r2, r3
   2224a:	2338      	movs	r3, #56	; 0x38
   2224c:	18fb      	adds	r3, r7, r3
   2224e:	705a      	strb	r2, [r3, #1]
		wb[2] = (uint8_t)(adr >> 8);
   22250:	68bb      	ldr	r3, [r7, #8]
   22252:	0a1b      	lsrs	r3, r3, #8
   22254:	b2da      	uxtb	r2, r3
   22256:	2338      	movs	r3, #56	; 0x38
   22258:	18fb      	adds	r3, r7, r3
   2225a:	709a      	strb	r2, [r3, #2]
		wb[3] = (uint8_t)adr;
   2225c:	68bb      	ldr	r3, [r7, #8]
   2225e:	b2da      	uxtb	r2, r3
   22260:	2338      	movs	r3, #56	; 0x38
   22262:	18fb      	adds	r3, r7, r3
   22264:	70da      	strb	r2, [r3, #3]
		len = 5;
   22266:	2305      	movs	r3, #5
   22268:	66fb      	str	r3, [r7, #108]	; 0x6c
		break; 
   2226a:	e0ed      	b.n	22448 <spi_cmd_complete+0x244>
	case CMD_INTERNAL_READ:			/* internal register read */ 
		wb[1] = (uint8_t)(adr >> 8);
   2226c:	68bb      	ldr	r3, [r7, #8]
   2226e:	0a1b      	lsrs	r3, r3, #8
   22270:	b2da      	uxtb	r2, r3
   22272:	2338      	movs	r3, #56	; 0x38
   22274:	18fb      	adds	r3, r7, r3
   22276:	705a      	strb	r2, [r3, #1]
		if(clockless == 1)  wb[1] |= (1 << 7);
   22278:	2388      	movs	r3, #136	; 0x88
   2227a:	18fb      	adds	r3, r7, r3
   2227c:	781b      	ldrb	r3, [r3, #0]
   2227e:	2b01      	cmp	r3, #1
   22280:	d109      	bne.n	22296 <spi_cmd_complete+0x92>
   22282:	2338      	movs	r3, #56	; 0x38
   22284:	18fb      	adds	r3, r7, r3
   22286:	785b      	ldrb	r3, [r3, #1]
   22288:	2280      	movs	r2, #128	; 0x80
   2228a:	4252      	negs	r2, r2
   2228c:	4313      	orrs	r3, r2
   2228e:	b2da      	uxtb	r2, r3
   22290:	2338      	movs	r3, #56	; 0x38
   22292:	18fb      	adds	r3, r7, r3
   22294:	705a      	strb	r2, [r3, #1]
		wb[2] = (uint8_t)adr;
   22296:	68bb      	ldr	r3, [r7, #8]
   22298:	b2da      	uxtb	r2, r3
   2229a:	2338      	movs	r3, #56	; 0x38
   2229c:	18fb      	adds	r3, r7, r3
   2229e:	709a      	strb	r2, [r3, #2]
		wb[3] = 0x00;
   222a0:	2338      	movs	r3, #56	; 0x38
   222a2:	18fb      	adds	r3, r7, r3
   222a4:	2200      	movs	r2, #0
   222a6:	70da      	strb	r2, [r3, #3]
		len = 5;
   222a8:	2305      	movs	r3, #5
   222aa:	66fb      	str	r3, [r7, #108]	; 0x6c
		break;
   222ac:	e0cc      	b.n	22448 <spi_cmd_complete+0x244>
	case CMD_TERMINATE:					/* termination */
		wb[1] = 0x00;
   222ae:	2338      	movs	r3, #56	; 0x38
   222b0:	18fb      	adds	r3, r7, r3
   222b2:	2200      	movs	r2, #0
   222b4:	705a      	strb	r2, [r3, #1]
		wb[2] = 0x00;
   222b6:	2338      	movs	r3, #56	; 0x38
   222b8:	18fb      	adds	r3, r7, r3
   222ba:	2200      	movs	r2, #0
   222bc:	709a      	strb	r2, [r3, #2]
		wb[3] = 0x00;
   222be:	2338      	movs	r3, #56	; 0x38
   222c0:	18fb      	adds	r3, r7, r3
   222c2:	2200      	movs	r2, #0
   222c4:	70da      	strb	r2, [r3, #3]
		len = 5;
   222c6:	2305      	movs	r3, #5
   222c8:	66fb      	str	r3, [r7, #108]	; 0x6c
		break;
   222ca:	e0bd      	b.n	22448 <spi_cmd_complete+0x244>
	case CMD_REPEAT:						/* repeat */
		wb[1] = 0x00;
   222cc:	2338      	movs	r3, #56	; 0x38
   222ce:	18fb      	adds	r3, r7, r3
   222d0:	2200      	movs	r2, #0
   222d2:	705a      	strb	r2, [r3, #1]
		wb[2] = 0x00;
   222d4:	2338      	movs	r3, #56	; 0x38
   222d6:	18fb      	adds	r3, r7, r3
   222d8:	2200      	movs	r2, #0
   222da:	709a      	strb	r2, [r3, #2]
		wb[3] = 0x00;
   222dc:	2338      	movs	r3, #56	; 0x38
   222de:	18fb      	adds	r3, r7, r3
   222e0:	2200      	movs	r2, #0
   222e2:	70da      	strb	r2, [r3, #3]
		len = 5;
   222e4:	2305      	movs	r3, #5
   222e6:	66fb      	str	r3, [r7, #108]	; 0x6c
		break;
   222e8:	e0ae      	b.n	22448 <spi_cmd_complete+0x244>
	case CMD_RESET:							/* reset */
		wb[1] = 0xff;
   222ea:	2338      	movs	r3, #56	; 0x38
   222ec:	18fb      	adds	r3, r7, r3
   222ee:	22ff      	movs	r2, #255	; 0xff
   222f0:	705a      	strb	r2, [r3, #1]
		wb[2] = 0xff;
   222f2:	2338      	movs	r3, #56	; 0x38
   222f4:	18fb      	adds	r3, r7, r3
   222f6:	22ff      	movs	r2, #255	; 0xff
   222f8:	709a      	strb	r2, [r3, #2]
		wb[3] = 0xff;
   222fa:	2338      	movs	r3, #56	; 0x38
   222fc:	18fb      	adds	r3, r7, r3
   222fe:	22ff      	movs	r2, #255	; 0xff
   22300:	70da      	strb	r2, [r3, #3]
		len = 5;
   22302:	2305      	movs	r3, #5
   22304:	66fb      	str	r3, [r7, #108]	; 0x6c
		break;
   22306:	e09f      	b.n	22448 <spi_cmd_complete+0x244>
	case CMD_DMA_WRITE:					/* dma write */
	case CMD_DMA_READ:					/* dma read */
		wb[1] = (uint8_t)(adr >> 16);
   22308:	68bb      	ldr	r3, [r7, #8]
   2230a:	0c1b      	lsrs	r3, r3, #16
   2230c:	b2da      	uxtb	r2, r3
   2230e:	2338      	movs	r3, #56	; 0x38
   22310:	18fb      	adds	r3, r7, r3
   22312:	705a      	strb	r2, [r3, #1]
		wb[2] = (uint8_t)(adr >> 8);
   22314:	68bb      	ldr	r3, [r7, #8]
   22316:	0a1b      	lsrs	r3, r3, #8
   22318:	b2da      	uxtb	r2, r3
   2231a:	2338      	movs	r3, #56	; 0x38
   2231c:	18fb      	adds	r3, r7, r3
   2231e:	709a      	strb	r2, [r3, #2]
		wb[3] = (uint8_t)adr;
   22320:	68bb      	ldr	r3, [r7, #8]
   22322:	b2da      	uxtb	r2, r3
   22324:	2338      	movs	r3, #56	; 0x38
   22326:	18fb      	adds	r3, r7, r3
   22328:	70da      	strb	r2, [r3, #3]
		wb[4] = (uint8_t)(sz >> 8);
   2232a:	683b      	ldr	r3, [r7, #0]
   2232c:	0a1b      	lsrs	r3, r3, #8
   2232e:	b2da      	uxtb	r2, r3
   22330:	2338      	movs	r3, #56	; 0x38
   22332:	18fb      	adds	r3, r7, r3
   22334:	711a      	strb	r2, [r3, #4]
		wb[5] = (uint8_t)(sz);
   22336:	683b      	ldr	r3, [r7, #0]
   22338:	b2da      	uxtb	r2, r3
   2233a:	2338      	movs	r3, #56	; 0x38
   2233c:	18fb      	adds	r3, r7, r3
   2233e:	715a      	strb	r2, [r3, #5]
		len = 7;
   22340:	2307      	movs	r3, #7
   22342:	66fb      	str	r3, [r7, #108]	; 0x6c
		break;
   22344:	e080      	b.n	22448 <spi_cmd_complete+0x244>
	case CMD_DMA_EXT_WRITE:		/* dma extended write */
	case CMD_DMA_EXT_READ:			/* dma extended read */
		wb[1] = (uint8_t)(adr >> 16);
   22346:	68bb      	ldr	r3, [r7, #8]
   22348:	0c1b      	lsrs	r3, r3, #16
   2234a:	b2da      	uxtb	r2, r3
   2234c:	2338      	movs	r3, #56	; 0x38
   2234e:	18fb      	adds	r3, r7, r3
   22350:	705a      	strb	r2, [r3, #1]
		wb[2] = (uint8_t)(adr >> 8);
   22352:	68bb      	ldr	r3, [r7, #8]
   22354:	0a1b      	lsrs	r3, r3, #8
   22356:	b2da      	uxtb	r2, r3
   22358:	2338      	movs	r3, #56	; 0x38
   2235a:	18fb      	adds	r3, r7, r3
   2235c:	709a      	strb	r2, [r3, #2]
		wb[3] = (uint8_t)adr;
   2235e:	68bb      	ldr	r3, [r7, #8]
   22360:	b2da      	uxtb	r2, r3
   22362:	2338      	movs	r3, #56	; 0x38
   22364:	18fb      	adds	r3, r7, r3
   22366:	70da      	strb	r2, [r3, #3]
		wb[4] = (uint8_t)(sz >> 16);
   22368:	683b      	ldr	r3, [r7, #0]
   2236a:	0c1b      	lsrs	r3, r3, #16
   2236c:	b2da      	uxtb	r2, r3
   2236e:	2338      	movs	r3, #56	; 0x38
   22370:	18fb      	adds	r3, r7, r3
   22372:	711a      	strb	r2, [r3, #4]
		wb[5] = (uint8_t)(sz >> 8);
   22374:	683b      	ldr	r3, [r7, #0]
   22376:	0a1b      	lsrs	r3, r3, #8
   22378:	b2da      	uxtb	r2, r3
   2237a:	2338      	movs	r3, #56	; 0x38
   2237c:	18fb      	adds	r3, r7, r3
   2237e:	715a      	strb	r2, [r3, #5]
		wb[6] = (uint8_t)(sz);
   22380:	683b      	ldr	r3, [r7, #0]
   22382:	b2da      	uxtb	r2, r3
   22384:	2338      	movs	r3, #56	; 0x38
   22386:	18fb      	adds	r3, r7, r3
   22388:	719a      	strb	r2, [r3, #6]
		len = 8;
   2238a:	2308      	movs	r3, #8
   2238c:	66fb      	str	r3, [r7, #108]	; 0x6c
		break;
   2238e:	e05b      	b.n	22448 <spi_cmd_complete+0x244>
	case CMD_INTERNAL_WRITE:		/* internal register write */
		wb[1] = (uint8_t)(adr >> 8);
   22390:	68bb      	ldr	r3, [r7, #8]
   22392:	0a1b      	lsrs	r3, r3, #8
   22394:	b2da      	uxtb	r2, r3
   22396:	2338      	movs	r3, #56	; 0x38
   22398:	18fb      	adds	r3, r7, r3
   2239a:	705a      	strb	r2, [r3, #1]
		if(clockless == 1)  wb[1] |= (1 << 7);
   2239c:	2388      	movs	r3, #136	; 0x88
   2239e:	18fb      	adds	r3, r7, r3
   223a0:	781b      	ldrb	r3, [r3, #0]
   223a2:	2b01      	cmp	r3, #1
   223a4:	d109      	bne.n	223ba <spi_cmd_complete+0x1b6>
   223a6:	2338      	movs	r3, #56	; 0x38
   223a8:	18fb      	adds	r3, r7, r3
   223aa:	785b      	ldrb	r3, [r3, #1]
   223ac:	2280      	movs	r2, #128	; 0x80
   223ae:	4252      	negs	r2, r2
   223b0:	4313      	orrs	r3, r2
   223b2:	b2da      	uxtb	r2, r3
   223b4:	2338      	movs	r3, #56	; 0x38
   223b6:	18fb      	adds	r3, r7, r3
   223b8:	705a      	strb	r2, [r3, #1]
		wb[2] = (uint8_t)(adr);
   223ba:	68bb      	ldr	r3, [r7, #8]
   223bc:	b2da      	uxtb	r2, r3
   223be:	2338      	movs	r3, #56	; 0x38
   223c0:	18fb      	adds	r3, r7, r3
   223c2:	709a      	strb	r2, [r3, #2]
		wb[3] = b[3];
   223c4:	687b      	ldr	r3, [r7, #4]
   223c6:	78da      	ldrb	r2, [r3, #3]
   223c8:	2338      	movs	r3, #56	; 0x38
   223ca:	18fb      	adds	r3, r7, r3
   223cc:	70da      	strb	r2, [r3, #3]
		wb[4] = b[2];
   223ce:	687b      	ldr	r3, [r7, #4]
   223d0:	789a      	ldrb	r2, [r3, #2]
   223d2:	2338      	movs	r3, #56	; 0x38
   223d4:	18fb      	adds	r3, r7, r3
   223d6:	711a      	strb	r2, [r3, #4]
		wb[5] = b[1];
   223d8:	687b      	ldr	r3, [r7, #4]
   223da:	785a      	ldrb	r2, [r3, #1]
   223dc:	2338      	movs	r3, #56	; 0x38
   223de:	18fb      	adds	r3, r7, r3
   223e0:	715a      	strb	r2, [r3, #5]
		wb[6] = b[0];
   223e2:	687b      	ldr	r3, [r7, #4]
   223e4:	781a      	ldrb	r2, [r3, #0]
   223e6:	2338      	movs	r3, #56	; 0x38
   223e8:	18fb      	adds	r3, r7, r3
   223ea:	719a      	strb	r2, [r3, #6]
		len = 8;
   223ec:	2308      	movs	r3, #8
   223ee:	66fb      	str	r3, [r7, #108]	; 0x6c
		break;
   223f0:	e02a      	b.n	22448 <spi_cmd_complete+0x244>
	case CMD_SINGLE_WRITE:			/* single word write */
		wb[1] = (uint8_t)(adr >> 16);
   223f2:	68bb      	ldr	r3, [r7, #8]
   223f4:	0c1b      	lsrs	r3, r3, #16
   223f6:	b2da      	uxtb	r2, r3
   223f8:	2338      	movs	r3, #56	; 0x38
   223fa:	18fb      	adds	r3, r7, r3
   223fc:	705a      	strb	r2, [r3, #1]
		wb[2] = (uint8_t)(adr >> 8);
   223fe:	68bb      	ldr	r3, [r7, #8]
   22400:	0a1b      	lsrs	r3, r3, #8
   22402:	b2da      	uxtb	r2, r3
   22404:	2338      	movs	r3, #56	; 0x38
   22406:	18fb      	adds	r3, r7, r3
   22408:	709a      	strb	r2, [r3, #2]
		wb[3] = (uint8_t)(adr);
   2240a:	68bb      	ldr	r3, [r7, #8]
   2240c:	b2da      	uxtb	r2, r3
   2240e:	2338      	movs	r3, #56	; 0x38
   22410:	18fb      	adds	r3, r7, r3
   22412:	70da      	strb	r2, [r3, #3]
		wb[4] = b[3];
   22414:	687b      	ldr	r3, [r7, #4]
   22416:	78da      	ldrb	r2, [r3, #3]
   22418:	2338      	movs	r3, #56	; 0x38
   2241a:	18fb      	adds	r3, r7, r3
   2241c:	711a      	strb	r2, [r3, #4]
		wb[5] = b[2];
   2241e:	687b      	ldr	r3, [r7, #4]
   22420:	789a      	ldrb	r2, [r3, #2]
   22422:	2338      	movs	r3, #56	; 0x38
   22424:	18fb      	adds	r3, r7, r3
   22426:	715a      	strb	r2, [r3, #5]
		wb[6] = b[1];
   22428:	687b      	ldr	r3, [r7, #4]
   2242a:	785a      	ldrb	r2, [r3, #1]
   2242c:	2338      	movs	r3, #56	; 0x38
   2242e:	18fb      	adds	r3, r7, r3
   22430:	719a      	strb	r2, [r3, #6]
		wb[7] = b[0];
   22432:	687b      	ldr	r3, [r7, #4]
   22434:	781a      	ldrb	r2, [r3, #0]
   22436:	2338      	movs	r3, #56	; 0x38
   22438:	18fb      	adds	r3, r7, r3
   2243a:	71da      	strb	r2, [r3, #7]
		len = 9;
   2243c:	2309      	movs	r3, #9
   2243e:	66fb      	str	r3, [r7, #108]	; 0x6c
		break;
   22440:	e002      	b.n	22448 <spi_cmd_complete+0x244>
	default:
		result = N_FAIL;
   22442:	2300      	movs	r3, #0
   22444:	66bb      	str	r3, [r7, #104]	; 0x68
		break;
   22446:	46c0      	nop			; (mov r8, r8)
	}

	if (result != N_OK) {
   22448:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   2244a:	2b01      	cmp	r3, #1
   2244c:	d001      	beq.n	22452 <spi_cmd_complete+0x24e>
		return result;
   2244e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   22450:	e33a      	b.n	22ac8 <spi_cmd_complete+0x8c4>
	}

	if (!gu8Crc_off) {
   22452:	4b4d      	ldr	r3, [pc, #308]	; (22588 <spi_cmd_complete+0x384>)
   22454:	781b      	ldrb	r3, [r3, #0]
   22456:	2b00      	cmp	r3, #0
   22458:	d111      	bne.n	2247e <spi_cmd_complete+0x27a>
		wb[len-1] = (crc7(0x7f, (const uint8_t *)&wb[0], len-1)) << 1;
   2245a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
   2245c:	1e5c      	subs	r4, r3, #1
   2245e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
   22460:	3b01      	subs	r3, #1
   22462:	001a      	movs	r2, r3
   22464:	2338      	movs	r3, #56	; 0x38
   22466:	18fb      	adds	r3, r7, r3
   22468:	0019      	movs	r1, r3
   2246a:	207f      	movs	r0, #127	; 0x7f
   2246c:	4b47      	ldr	r3, [pc, #284]	; (2258c <spi_cmd_complete+0x388>)
   2246e:	4798      	blx	r3
   22470:	0003      	movs	r3, r0
   22472:	18db      	adds	r3, r3, r3
   22474:	b2da      	uxtb	r2, r3
   22476:	2338      	movs	r3, #56	; 0x38
   22478:	18fb      	adds	r3, r7, r3
   2247a:	551a      	strb	r2, [r3, r4]
   2247c:	e002      	b.n	22484 <spi_cmd_complete+0x280>
	} else {
		len -=1;
   2247e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
   22480:	3b01      	subs	r3, #1
   22482:	66fb      	str	r3, [r7, #108]	; 0x6c
#define NUM_DATA_HDR_BYTES (1)
#define NUM_DATA_BYTES (4)
#define NUM_CRC_BYTES (2)
#define NUM_DUMMY_BYTES (3)

	if ((cmd == CMD_RESET) ||
   22484:	230f      	movs	r3, #15
   22486:	18fb      	adds	r3, r7, r3
   22488:	781b      	ldrb	r3, [r3, #0]
   2248a:	2bcf      	cmp	r3, #207	; 0xcf
   2248c:	d009      	beq.n	224a2 <spi_cmd_complete+0x29e>
   2248e:	230f      	movs	r3, #15
   22490:	18fb      	adds	r3, r7, r3
   22492:	781b      	ldrb	r3, [r3, #0]
   22494:	2bc5      	cmp	r3, #197	; 0xc5
   22496:	d004      	beq.n	224a2 <spi_cmd_complete+0x29e>
		(cmd == CMD_TERMINATE) ||
   22498:	230f      	movs	r3, #15
   2249a:	18fb      	adds	r3, r7, r3
   2249c:	781b      	ldrb	r3, [r3, #0]
   2249e:	2bc6      	cmp	r3, #198	; 0xc6
   224a0:	d103      	bne.n	224aa <spi_cmd_complete+0x2a6>
		(cmd == CMD_REPEAT)) {
			len2 = len + (NUM_SKIP_BYTES + NUM_RSP_BYTES + NUM_DUMMY_BYTES);
   224a2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
   224a4:	3306      	adds	r3, #6
   224a6:	673b      	str	r3, [r7, #112]	; 0x70
   224a8:	e018      	b.n	224dc <spi_cmd_complete+0x2d8>
	} else if ((cmd == CMD_INTERNAL_READ) || (cmd == CMD_SINGLE_READ)) {
   224aa:	230f      	movs	r3, #15
   224ac:	18fb      	adds	r3, r7, r3
   224ae:	781b      	ldrb	r3, [r3, #0]
   224b0:	2bc4      	cmp	r3, #196	; 0xc4
   224b2:	d004      	beq.n	224be <spi_cmd_complete+0x2ba>
   224b4:	230f      	movs	r3, #15
   224b6:	18fb      	adds	r3, r7, r3
   224b8:	781b      	ldrb	r3, [r3, #0]
   224ba:	2bca      	cmp	r3, #202	; 0xca
   224bc:	d10b      	bne.n	224d6 <spi_cmd_complete+0x2d2>
		if (!gu8Crc_off) {
   224be:	4b32      	ldr	r3, [pc, #200]	; (22588 <spi_cmd_complete+0x384>)
   224c0:	781b      	ldrb	r3, [r3, #0]
   224c2:	2b00      	cmp	r3, #0
   224c4:	d103      	bne.n	224ce <spi_cmd_complete+0x2ca>
			len2 = len + (NUM_RSP_BYTES + NUM_DATA_HDR_BYTES + NUM_DATA_BYTES 
   224c6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
   224c8:	330c      	adds	r3, #12
   224ca:	673b      	str	r3, [r7, #112]	; 0x70
		if (!gu8Crc_off) {
   224cc:	e006      	b.n	224dc <spi_cmd_complete+0x2d8>
			+ NUM_CRC_BYTES + NUM_DUMMY_BYTES);	
		} else {
			len2 = len + (NUM_RSP_BYTES + NUM_DATA_HDR_BYTES + NUM_DATA_BYTES 
   224ce:	6efb      	ldr	r3, [r7, #108]	; 0x6c
   224d0:	330a      	adds	r3, #10
   224d2:	673b      	str	r3, [r7, #112]	; 0x70
		if (!gu8Crc_off) {
   224d4:	e002      	b.n	224dc <spi_cmd_complete+0x2d8>
			+ NUM_DUMMY_BYTES);
		}
	} else {
		len2 = len + (NUM_RSP_BYTES + NUM_DUMMY_BYTES);
   224d6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
   224d8:	3305      	adds	r3, #5
   224da:	673b      	str	r3, [r7, #112]	; 0x70
	}
#undef NUM_DUMMY_BYTES

	if(len2 > (sizeof(wb)/sizeof(wb[0]))) {
   224dc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
   224de:	2b20      	cmp	r3, #32
   224e0:	d914      	bls.n	2250c <spi_cmd_complete+0x308>
		M2M_ERR("[nmi spi]: spi buffer size too small (%d) (%d)\n",
   224e2:	23f7      	movs	r3, #247	; 0xf7
   224e4:	005a      	lsls	r2, r3, #1
   224e6:	492a      	ldr	r1, [pc, #168]	; (22590 <spi_cmd_complete+0x38c>)
   224e8:	4b2a      	ldr	r3, [pc, #168]	; (22594 <spi_cmd_complete+0x390>)
   224ea:	0018      	movs	r0, r3
   224ec:	4b2a      	ldr	r3, [pc, #168]	; (22598 <spi_cmd_complete+0x394>)
   224ee:	4798      	blx	r3
   224f0:	6f39      	ldr	r1, [r7, #112]	; 0x70
   224f2:	4b2a      	ldr	r3, [pc, #168]	; (2259c <spi_cmd_complete+0x398>)
   224f4:	2220      	movs	r2, #32
   224f6:	0018      	movs	r0, r3
   224f8:	4b27      	ldr	r3, [pc, #156]	; (22598 <spi_cmd_complete+0x394>)
   224fa:	4798      	blx	r3
   224fc:	4b28      	ldr	r3, [pc, #160]	; (225a0 <spi_cmd_complete+0x39c>)
   224fe:	0018      	movs	r0, r3
   22500:	4b25      	ldr	r3, [pc, #148]	; (22598 <spi_cmd_complete+0x394>)
   22502:	4798      	blx	r3
			len2, (sizeof(wb)/sizeof(wb[0])));
		result = N_FAIL;
   22504:	2300      	movs	r3, #0
   22506:	66bb      	str	r3, [r7, #104]	; 0x68
		return result;
   22508:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   2250a:	e2dd      	b.n	22ac8 <spi_cmd_complete+0x8c4>
	}
	/* zero spi write buffers. */
	for(wix = len; wix< len2; wix++) {
   2250c:	2377      	movs	r3, #119	; 0x77
   2250e:	18fb      	adds	r3, r7, r3
   22510:	6efa      	ldr	r2, [r7, #108]	; 0x6c
   22512:	701a      	strb	r2, [r3, #0]
   22514:	e00d      	b.n	22532 <spi_cmd_complete+0x32e>
		wb[wix] = 0;
   22516:	2377      	movs	r3, #119	; 0x77
   22518:	18fb      	adds	r3, r7, r3
   2251a:	781b      	ldrb	r3, [r3, #0]
   2251c:	2238      	movs	r2, #56	; 0x38
   2251e:	18ba      	adds	r2, r7, r2
   22520:	2100      	movs	r1, #0
   22522:	54d1      	strb	r1, [r2, r3]
	for(wix = len; wix< len2; wix++) {
   22524:	2377      	movs	r3, #119	; 0x77
   22526:	18fb      	adds	r3, r7, r3
   22528:	781a      	ldrb	r2, [r3, #0]
   2252a:	2377      	movs	r3, #119	; 0x77
   2252c:	18fb      	adds	r3, r7, r3
   2252e:	3201      	adds	r2, #1
   22530:	701a      	strb	r2, [r3, #0]
   22532:	2377      	movs	r3, #119	; 0x77
   22534:	18fb      	adds	r3, r7, r3
   22536:	781a      	ldrb	r2, [r3, #0]
   22538:	6f3b      	ldr	r3, [r7, #112]	; 0x70
   2253a:	429a      	cmp	r2, r3
   2253c:	d3eb      	bcc.n	22516 <spi_cmd_complete+0x312>
	}
	rix = len;
   2253e:	2376      	movs	r3, #118	; 0x76
   22540:	18fb      	adds	r3, r7, r3
   22542:	6efa      	ldr	r2, [r7, #108]	; 0x6c
   22544:	701a      	strb	r2, [r3, #0]

	if (nmi_spi_rw(wb, rb, len2) != M2M_SUCCESS) {
   22546:	6f3b      	ldr	r3, [r7, #112]	; 0x70
   22548:	b29a      	uxth	r2, r3
   2254a:	2318      	movs	r3, #24
   2254c:	18f9      	adds	r1, r7, r3
   2254e:	2338      	movs	r3, #56	; 0x38
   22550:	18fb      	adds	r3, r7, r3
   22552:	0018      	movs	r0, r3
   22554:	4b13      	ldr	r3, [pc, #76]	; (225a4 <spi_cmd_complete+0x3a0>)
   22556:	4798      	blx	r3
   22558:	1e03      	subs	r3, r0, #0
   2255a:	d027      	beq.n	225ac <spi_cmd_complete+0x3a8>
		M2M_ERR("[nmi spi]: Failed cmd write, bus error...\n");
   2255c:	23fa      	movs	r3, #250	; 0xfa
   2255e:	33ff      	adds	r3, #255	; 0xff
   22560:	001a      	movs	r2, r3
   22562:	490b      	ldr	r1, [pc, #44]	; (22590 <spi_cmd_complete+0x38c>)
   22564:	4b0b      	ldr	r3, [pc, #44]	; (22594 <spi_cmd_complete+0x390>)
   22566:	0018      	movs	r0, r3
   22568:	4b0b      	ldr	r3, [pc, #44]	; (22598 <spi_cmd_complete+0x394>)
   2256a:	4798      	blx	r3
   2256c:	4b0e      	ldr	r3, [pc, #56]	; (225a8 <spi_cmd_complete+0x3a4>)
   2256e:	0018      	movs	r0, r3
   22570:	4b09      	ldr	r3, [pc, #36]	; (22598 <spi_cmd_complete+0x394>)
   22572:	4798      	blx	r3
   22574:	4b0a      	ldr	r3, [pc, #40]	; (225a0 <spi_cmd_complete+0x39c>)
   22576:	0018      	movs	r0, r3
   22578:	4b07      	ldr	r3, [pc, #28]	; (22598 <spi_cmd_complete+0x394>)
   2257a:	4798      	blx	r3
		result = N_FAIL;
   2257c:	2300      	movs	r3, #0
   2257e:	66bb      	str	r3, [r7, #104]	; 0x68
		return result;
   22580:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   22582:	e2a1      	b.n	22ac8 <spi_cmd_complete+0x8c4>
   22584:	00037770 	.word	0x00037770
   22588:	20003d4c 	.word	0x20003d4c
   2258c:	00021c39 	.word	0x00021c39
   22590:	000377d0 	.word	0x000377d0
   22594:	000371bc 	.word	0x000371bc
   22598:	0001c65d 	.word	0x0001c65d
   2259c:	00037284 	.word	0x00037284
   225a0:	000371fc 	.word	0x000371fc
   225a4:	00021bc5 	.word	0x00021bc5
   225a8:	000371d0 	.word	0x000371d0
#endif

	/**
	Command/Control response
	**/
	if ((cmd == CMD_RESET) ||
   225ac:	230f      	movs	r3, #15
   225ae:	18fb      	adds	r3, r7, r3
   225b0:	781b      	ldrb	r3, [r3, #0]
   225b2:	2bcf      	cmp	r3, #207	; 0xcf
   225b4:	d009      	beq.n	225ca <spi_cmd_complete+0x3c6>
   225b6:	230f      	movs	r3, #15
   225b8:	18fb      	adds	r3, r7, r3
   225ba:	781b      	ldrb	r3, [r3, #0]
   225bc:	2bc5      	cmp	r3, #197	; 0xc5
   225be:	d004      	beq.n	225ca <spi_cmd_complete+0x3c6>
		(cmd == CMD_TERMINATE) ||
   225c0:	230f      	movs	r3, #15
   225c2:	18fb      	adds	r3, r7, r3
   225c4:	781b      	ldrb	r3, [r3, #0]
   225c6:	2bc6      	cmp	r3, #198	; 0xc6
   225c8:	d106      	bne.n	225d8 <spi_cmd_complete+0x3d4>
		(cmd == CMD_REPEAT)) {
			rix++; /* skip 1 byte */
   225ca:	2376      	movs	r3, #118	; 0x76
   225cc:	18fb      	adds	r3, r7, r3
   225ce:	781a      	ldrb	r2, [r3, #0]
   225d0:	2376      	movs	r3, #118	; 0x76
   225d2:	18fb      	adds	r3, r7, r3
   225d4:	3201      	adds	r2, #1
   225d6:	701a      	strb	r2, [r3, #0]
	}

	rsp = rb[rix++];
   225d8:	2376      	movs	r3, #118	; 0x76
   225da:	18fb      	adds	r3, r7, r3
   225dc:	781b      	ldrb	r3, [r3, #0]
   225de:	2276      	movs	r2, #118	; 0x76
   225e0:	18ba      	adds	r2, r7, r2
   225e2:	1c59      	adds	r1, r3, #1
   225e4:	7011      	strb	r1, [r2, #0]
   225e6:	001a      	movs	r2, r3
   225e8:	2318      	movs	r3, #24
   225ea:	18fb      	adds	r3, r7, r3
   225ec:	5c9a      	ldrb	r2, [r3, r2]
   225ee:	2317      	movs	r3, #23
   225f0:	18fb      	adds	r3, r7, r3
   225f2:	701a      	strb	r2, [r3, #0]


	if (rsp != cmd) {
   225f4:	2317      	movs	r3, #23
   225f6:	18fb      	adds	r3, r7, r3
   225f8:	781b      	ldrb	r3, [r3, #0]
   225fa:	220f      	movs	r2, #15
   225fc:	18ba      	adds	r2, r7, r2
   225fe:	7812      	ldrb	r2, [r2, #0]
   22600:	429a      	cmp	r2, r3
   22602:	d018      	beq.n	22636 <spi_cmd_complete+0x432>
		M2M_ERR("[nmi spi]: Failed cmd response, cmd (%02x), resp (%02x)\n", cmd, rsp);
   22604:	4add      	ldr	r2, [pc, #884]	; (2297c <spi_cmd_complete+0x778>)
   22606:	49de      	ldr	r1, [pc, #888]	; (22980 <spi_cmd_complete+0x77c>)
   22608:	4bde      	ldr	r3, [pc, #888]	; (22984 <spi_cmd_complete+0x780>)
   2260a:	0018      	movs	r0, r3
   2260c:	4bde      	ldr	r3, [pc, #888]	; (22988 <spi_cmd_complete+0x784>)
   2260e:	4798      	blx	r3
   22610:	230f      	movs	r3, #15
   22612:	18fb      	adds	r3, r7, r3
   22614:	7819      	ldrb	r1, [r3, #0]
   22616:	2317      	movs	r3, #23
   22618:	18fb      	adds	r3, r7, r3
   2261a:	781b      	ldrb	r3, [r3, #0]
   2261c:	001a      	movs	r2, r3
   2261e:	4bdb      	ldr	r3, [pc, #876]	; (2298c <spi_cmd_complete+0x788>)
   22620:	0018      	movs	r0, r3
   22622:	4bd9      	ldr	r3, [pc, #868]	; (22988 <spi_cmd_complete+0x784>)
   22624:	4798      	blx	r3
   22626:	4bda      	ldr	r3, [pc, #872]	; (22990 <spi_cmd_complete+0x78c>)
   22628:	0018      	movs	r0, r3
   2262a:	4bd7      	ldr	r3, [pc, #860]	; (22988 <spi_cmd_complete+0x784>)
   2262c:	4798      	blx	r3
		result = N_FAIL;
   2262e:	2300      	movs	r3, #0
   22630:	66bb      	str	r3, [r7, #104]	; 0x68
		return result;
   22632:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   22634:	e248      	b.n	22ac8 <spi_cmd_complete+0x8c4>
	}

	/**
	State response
	**/
	rsp = rb[rix++];
   22636:	2376      	movs	r3, #118	; 0x76
   22638:	18fb      	adds	r3, r7, r3
   2263a:	781b      	ldrb	r3, [r3, #0]
   2263c:	2276      	movs	r2, #118	; 0x76
   2263e:	18ba      	adds	r2, r7, r2
   22640:	1c59      	adds	r1, r3, #1
   22642:	7011      	strb	r1, [r2, #0]
   22644:	001a      	movs	r2, r3
   22646:	2318      	movs	r3, #24
   22648:	18fb      	adds	r3, r7, r3
   2264a:	5c9a      	ldrb	r2, [r3, r2]
   2264c:	2317      	movs	r3, #23
   2264e:	18fb      	adds	r3, r7, r3
   22650:	701a      	strb	r2, [r3, #0]
	if (rsp != 0x00) {
   22652:	2317      	movs	r3, #23
   22654:	18fb      	adds	r3, r7, r3
   22656:	781b      	ldrb	r3, [r3, #0]
   22658:	2b00      	cmp	r3, #0
   2265a:	d016      	beq.n	2268a <spi_cmd_complete+0x486>
		M2M_ERR("[nmi spi]: Failed cmd state response state (%02x)\n", rsp);
   2265c:	4acd      	ldr	r2, [pc, #820]	; (22994 <spi_cmd_complete+0x790>)
   2265e:	49c8      	ldr	r1, [pc, #800]	; (22980 <spi_cmd_complete+0x77c>)
   22660:	4bc8      	ldr	r3, [pc, #800]	; (22984 <spi_cmd_complete+0x780>)
   22662:	0018      	movs	r0, r3
   22664:	4bc8      	ldr	r3, [pc, #800]	; (22988 <spi_cmd_complete+0x784>)
   22666:	4798      	blx	r3
   22668:	2317      	movs	r3, #23
   2266a:	18fb      	adds	r3, r7, r3
   2266c:	781b      	ldrb	r3, [r3, #0]
   2266e:	001a      	movs	r2, r3
   22670:	4bc9      	ldr	r3, [pc, #804]	; (22998 <spi_cmd_complete+0x794>)
   22672:	0011      	movs	r1, r2
   22674:	0018      	movs	r0, r3
   22676:	4bc4      	ldr	r3, [pc, #784]	; (22988 <spi_cmd_complete+0x784>)
   22678:	4798      	blx	r3
   2267a:	4bc5      	ldr	r3, [pc, #788]	; (22990 <spi_cmd_complete+0x78c>)
   2267c:	0018      	movs	r0, r3
   2267e:	4bc2      	ldr	r3, [pc, #776]	; (22988 <spi_cmd_complete+0x784>)
   22680:	4798      	blx	r3
		result = N_FAIL;
   22682:	2300      	movs	r3, #0
   22684:	66bb      	str	r3, [r7, #104]	; 0x68
		return result;
   22686:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   22688:	e21e      	b.n	22ac8 <spi_cmd_complete+0x8c4>
	}

	if ((cmd == CMD_INTERNAL_READ) || (cmd == CMD_SINGLE_READ)
   2268a:	230f      	movs	r3, #15
   2268c:	18fb      	adds	r3, r7, r3
   2268e:	781b      	ldrb	r3, [r3, #0]
   22690:	2bc4      	cmp	r3, #196	; 0xc4
   22692:	d00f      	beq.n	226b4 <spi_cmd_complete+0x4b0>
   22694:	230f      	movs	r3, #15
   22696:	18fb      	adds	r3, r7, r3
   22698:	781b      	ldrb	r3, [r3, #0]
   2269a:	2bca      	cmp	r3, #202	; 0xca
   2269c:	d00a      	beq.n	226b4 <spi_cmd_complete+0x4b0>
		|| (cmd == CMD_DMA_READ) || (cmd == CMD_DMA_EXT_READ)) {
   2269e:	230f      	movs	r3, #15
   226a0:	18fb      	adds	r3, r7, r3
   226a2:	781b      	ldrb	r3, [r3, #0]
   226a4:	2bc2      	cmp	r3, #194	; 0xc2
   226a6:	d005      	beq.n	226b4 <spi_cmd_complete+0x4b0>
   226a8:	230f      	movs	r3, #15
   226aa:	18fb      	adds	r3, r7, r3
   226ac:	781b      	ldrb	r3, [r3, #0]
   226ae:	2bc8      	cmp	r3, #200	; 0xc8
   226b0:	d000      	beq.n	226b4 <spi_cmd_complete+0x4b0>
   226b2:	e208      	b.n	22ac6 <spi_cmd_complete+0x8c2>
			//uint16_t crc1, crc2;
			uint8_t crc[2];
			/**
			Data Respnose header
			**/
			retry = SPI_RESP_RETRY_COUNT;
   226b4:	230a      	movs	r3, #10
   226b6:	667b      	str	r3, [r7, #100]	; 0x64
			do {
				/* ensure there is room in buffer later to read data and crc */
				if(rix < len2) { 
   226b8:	2376      	movs	r3, #118	; 0x76
   226ba:	18fb      	adds	r3, r7, r3
   226bc:	781a      	ldrb	r2, [r3, #0]
   226be:	6f3b      	ldr	r3, [r7, #112]	; 0x70
   226c0:	429a      	cmp	r2, r3
   226c2:	d218      	bcs.n	226f6 <spi_cmd_complete+0x4f2>
					rsp = rb[rix++];
   226c4:	2376      	movs	r3, #118	; 0x76
   226c6:	18fb      	adds	r3, r7, r3
   226c8:	781b      	ldrb	r3, [r3, #0]
   226ca:	2276      	movs	r2, #118	; 0x76
   226cc:	18ba      	adds	r2, r7, r2
   226ce:	1c59      	adds	r1, r3, #1
   226d0:	7011      	strb	r1, [r2, #0]
   226d2:	001a      	movs	r2, r3
   226d4:	2318      	movs	r3, #24
   226d6:	18fb      	adds	r3, r7, r3
   226d8:	5c9a      	ldrb	r2, [r3, r2]
   226da:	2317      	movs	r3, #23
   226dc:	18fb      	adds	r3, r7, r3
   226de:	701a      	strb	r2, [r3, #0]
				} else {
					retry = 0;
					break;
				}
				if (((rsp >> 4) & 0xf) == 0xf)
   226e0:	2317      	movs	r3, #23
   226e2:	18fb      	adds	r3, r7, r3
   226e4:	781b      	ldrb	r3, [r3, #0]
   226e6:	091b      	lsrs	r3, r3, #4
   226e8:	b2db      	uxtb	r3, r3
   226ea:	001a      	movs	r2, r3
   226ec:	230f      	movs	r3, #15
   226ee:	4013      	ands	r3, r2
   226f0:	2b0f      	cmp	r3, #15
   226f2:	d103      	bne.n	226fc <spi_cmd_complete+0x4f8>
					break;
   226f4:	e007      	b.n	22706 <spi_cmd_complete+0x502>
					retry = 0;
   226f6:	2300      	movs	r3, #0
   226f8:	667b      	str	r3, [r7, #100]	; 0x64
					break;
   226fa:	e004      	b.n	22706 <spi_cmd_complete+0x502>
			} while (retry--);
   226fc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   226fe:	1e5a      	subs	r2, r3, #1
   22700:	667a      	str	r2, [r7, #100]	; 0x64
   22702:	2b00      	cmp	r3, #0
   22704:	d1d8      	bne.n	226b8 <spi_cmd_complete+0x4b4>

			if (retry <= 0) {
   22706:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   22708:	2b00      	cmp	r3, #0
   2270a:	dc18      	bgt.n	2273e <spi_cmd_complete+0x53a>
				M2M_ERR("[nmi spi]: Error, data read response (%02x)\n", rsp);
   2270c:	2395      	movs	r3, #149	; 0x95
   2270e:	009a      	lsls	r2, r3, #2
   22710:	499b      	ldr	r1, [pc, #620]	; (22980 <spi_cmd_complete+0x77c>)
   22712:	4b9c      	ldr	r3, [pc, #624]	; (22984 <spi_cmd_complete+0x780>)
   22714:	0018      	movs	r0, r3
   22716:	4b9c      	ldr	r3, [pc, #624]	; (22988 <spi_cmd_complete+0x784>)
   22718:	4798      	blx	r3
   2271a:	2317      	movs	r3, #23
   2271c:	18fb      	adds	r3, r7, r3
   2271e:	781b      	ldrb	r3, [r3, #0]
   22720:	001a      	movs	r2, r3
   22722:	4b9e      	ldr	r3, [pc, #632]	; (2299c <spi_cmd_complete+0x798>)
   22724:	0011      	movs	r1, r2
   22726:	0018      	movs	r0, r3
   22728:	4b97      	ldr	r3, [pc, #604]	; (22988 <spi_cmd_complete+0x784>)
   2272a:	4798      	blx	r3
   2272c:	4b98      	ldr	r3, [pc, #608]	; (22990 <spi_cmd_complete+0x78c>)
   2272e:	0018      	movs	r0, r3
   22730:	4b95      	ldr	r3, [pc, #596]	; (22988 <spi_cmd_complete+0x784>)
   22732:	4798      	blx	r3
				result = N_RESET;
   22734:	2301      	movs	r3, #1
   22736:	425b      	negs	r3, r3
   22738:	66bb      	str	r3, [r7, #104]	; 0x68
				return result;
   2273a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   2273c:	e1c4      	b.n	22ac8 <spi_cmd_complete+0x8c4>
			}

			if ((cmd == CMD_INTERNAL_READ) || (cmd == CMD_SINGLE_READ)) {
   2273e:	230f      	movs	r3, #15
   22740:	18fb      	adds	r3, r7, r3
   22742:	781b      	ldrb	r3, [r3, #0]
   22744:	2bc4      	cmp	r3, #196	; 0xc4
   22746:	d005      	beq.n	22754 <spi_cmd_complete+0x550>
   22748:	230f      	movs	r3, #15
   2274a:	18fb      	adds	r3, r7, r3
   2274c:	781b      	ldrb	r3, [r3, #0]
   2274e:	2bca      	cmp	r3, #202	; 0xca
   22750:	d000      	beq.n	22754 <spi_cmd_complete+0x550>
   22752:	e08e      	b.n	22872 <spi_cmd_complete+0x66e>
				/**
				Read bytes
				**/
				if((rix+3) < len2) { 
   22754:	2376      	movs	r3, #118	; 0x76
   22756:	18fb      	adds	r3, r7, r3
   22758:	781b      	ldrb	r3, [r3, #0]
   2275a:	3303      	adds	r3, #3
   2275c:	001a      	movs	r2, r3
   2275e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
   22760:	429a      	cmp	r2, r3
   22762:	d23c      	bcs.n	227de <spi_cmd_complete+0x5da>
					b[0] = rb[rix++];
   22764:	2376      	movs	r3, #118	; 0x76
   22766:	18fb      	adds	r3, r7, r3
   22768:	781b      	ldrb	r3, [r3, #0]
   2276a:	2276      	movs	r2, #118	; 0x76
   2276c:	18ba      	adds	r2, r7, r2
   2276e:	1c59      	adds	r1, r3, #1
   22770:	7011      	strb	r1, [r2, #0]
   22772:	001a      	movs	r2, r3
   22774:	2318      	movs	r3, #24
   22776:	18fb      	adds	r3, r7, r3
   22778:	5c9a      	ldrb	r2, [r3, r2]
   2277a:	687b      	ldr	r3, [r7, #4]
   2277c:	701a      	strb	r2, [r3, #0]
					b[1] = rb[rix++];
   2277e:	687b      	ldr	r3, [r7, #4]
   22780:	1c5a      	adds	r2, r3, #1
   22782:	2376      	movs	r3, #118	; 0x76
   22784:	18fb      	adds	r3, r7, r3
   22786:	781b      	ldrb	r3, [r3, #0]
   22788:	2176      	movs	r1, #118	; 0x76
   2278a:	1879      	adds	r1, r7, r1
   2278c:	1c58      	adds	r0, r3, #1
   2278e:	7008      	strb	r0, [r1, #0]
   22790:	0019      	movs	r1, r3
   22792:	2318      	movs	r3, #24
   22794:	18fb      	adds	r3, r7, r3
   22796:	5c5b      	ldrb	r3, [r3, r1]
   22798:	7013      	strb	r3, [r2, #0]
					b[2] = rb[rix++];
   2279a:	687b      	ldr	r3, [r7, #4]
   2279c:	1c9a      	adds	r2, r3, #2
   2279e:	2376      	movs	r3, #118	; 0x76
   227a0:	18fb      	adds	r3, r7, r3
   227a2:	781b      	ldrb	r3, [r3, #0]
   227a4:	2176      	movs	r1, #118	; 0x76
   227a6:	1879      	adds	r1, r7, r1
   227a8:	1c58      	adds	r0, r3, #1
   227aa:	7008      	strb	r0, [r1, #0]
   227ac:	0019      	movs	r1, r3
   227ae:	2318      	movs	r3, #24
   227b0:	18fb      	adds	r3, r7, r3
   227b2:	5c5b      	ldrb	r3, [r3, r1]
   227b4:	7013      	strb	r3, [r2, #0]
					b[3] = rb[rix++];
   227b6:	687b      	ldr	r3, [r7, #4]
   227b8:	1cda      	adds	r2, r3, #3
   227ba:	2376      	movs	r3, #118	; 0x76
   227bc:	18fb      	adds	r3, r7, r3
   227be:	781b      	ldrb	r3, [r3, #0]
   227c0:	2176      	movs	r1, #118	; 0x76
   227c2:	1879      	adds	r1, r7, r1
   227c4:	1c58      	adds	r0, r3, #1
   227c6:	7008      	strb	r0, [r1, #0]
   227c8:	0019      	movs	r1, r3
   227ca:	2318      	movs	r3, #24
   227cc:	18fb      	adds	r3, r7, r3
   227ce:	5c5b      	ldrb	r3, [r3, r1]
   227d0:	7013      	strb	r3, [r2, #0]
					M2M_ERR("[nmi spi]: buffer overrun when reading data.\n");
					result = N_FAIL;
					return result;
				}

				if (!gu8Crc_off) {						
   227d2:	4b73      	ldr	r3, [pc, #460]	; (229a0 <spi_cmd_complete+0x79c>)
   227d4:	781b      	ldrb	r3, [r3, #0]
   227d6:	2b00      	cmp	r3, #0
   227d8:	d000      	beq.n	227dc <spi_cmd_complete+0x5d8>
   227da:	e174      	b.n	22ac6 <spi_cmd_complete+0x8c2>
   227dc:	e011      	b.n	22802 <spi_cmd_complete+0x5fe>
					M2M_ERR("[nmi spi]: buffer overrun when reading data.\n");
   227de:	4a71      	ldr	r2, [pc, #452]	; (229a4 <spi_cmd_complete+0x7a0>)
   227e0:	4967      	ldr	r1, [pc, #412]	; (22980 <spi_cmd_complete+0x77c>)
   227e2:	4b68      	ldr	r3, [pc, #416]	; (22984 <spi_cmd_complete+0x780>)
   227e4:	0018      	movs	r0, r3
   227e6:	4b68      	ldr	r3, [pc, #416]	; (22988 <spi_cmd_complete+0x784>)
   227e8:	4798      	blx	r3
   227ea:	4b6f      	ldr	r3, [pc, #444]	; (229a8 <spi_cmd_complete+0x7a4>)
   227ec:	0018      	movs	r0, r3
   227ee:	4b66      	ldr	r3, [pc, #408]	; (22988 <spi_cmd_complete+0x784>)
   227f0:	4798      	blx	r3
   227f2:	4b67      	ldr	r3, [pc, #412]	; (22990 <spi_cmd_complete+0x78c>)
   227f4:	0018      	movs	r0, r3
   227f6:	4b64      	ldr	r3, [pc, #400]	; (22988 <spi_cmd_complete+0x784>)
   227f8:	4798      	blx	r3
					result = N_FAIL;
   227fa:	2300      	movs	r3, #0
   227fc:	66bb      	str	r3, [r7, #104]	; 0x68
					return result;
   227fe:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   22800:	e162      	b.n	22ac8 <spi_cmd_complete+0x8c4>
					/**
					Read Crc
					**/
					if((rix+1) < len2) { 
   22802:	2376      	movs	r3, #118	; 0x76
   22804:	18fb      	adds	r3, r7, r3
   22806:	781b      	ldrb	r3, [r3, #0]
   22808:	3301      	adds	r3, #1
   2280a:	001a      	movs	r2, r3
   2280c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
   2280e:	429a      	cmp	r2, r3
   22810:	d21c      	bcs.n	2284c <spi_cmd_complete+0x648>
						crc[0] = rb[rix++];
   22812:	2376      	movs	r3, #118	; 0x76
   22814:	18fb      	adds	r3, r7, r3
   22816:	781b      	ldrb	r3, [r3, #0]
   22818:	2276      	movs	r2, #118	; 0x76
   2281a:	18ba      	adds	r2, r7, r2
   2281c:	1c59      	adds	r1, r3, #1
   2281e:	7011      	strb	r1, [r2, #0]
   22820:	001a      	movs	r2, r3
   22822:	2318      	movs	r3, #24
   22824:	18fb      	adds	r3, r7, r3
   22826:	5c9a      	ldrb	r2, [r3, r2]
   22828:	2314      	movs	r3, #20
   2282a:	18fb      	adds	r3, r7, r3
   2282c:	701a      	strb	r2, [r3, #0]
						crc[1] = rb[rix++];
   2282e:	2376      	movs	r3, #118	; 0x76
   22830:	18fb      	adds	r3, r7, r3
   22832:	781b      	ldrb	r3, [r3, #0]
   22834:	2276      	movs	r2, #118	; 0x76
   22836:	18ba      	adds	r2, r7, r2
   22838:	1c59      	adds	r1, r3, #1
   2283a:	7011      	strb	r1, [r2, #0]
   2283c:	001a      	movs	r2, r3
   2283e:	2318      	movs	r3, #24
   22840:	18fb      	adds	r3, r7, r3
   22842:	5c9a      	ldrb	r2, [r3, r2]
   22844:	2314      	movs	r3, #20
   22846:	18fb      	adds	r3, r7, r3
   22848:	705a      	strb	r2, [r3, #1]
				if (!gu8Crc_off) {						
   2284a:	e13c      	b.n	22ac6 <spi_cmd_complete+0x8c2>
					} else {
						M2M_ERR("[nmi spi]: buffer overrun when reading crc.\n");
   2284c:	239c      	movs	r3, #156	; 0x9c
   2284e:	009a      	lsls	r2, r3, #2
   22850:	494b      	ldr	r1, [pc, #300]	; (22980 <spi_cmd_complete+0x77c>)
   22852:	4b4c      	ldr	r3, [pc, #304]	; (22984 <spi_cmd_complete+0x780>)
   22854:	0018      	movs	r0, r3
   22856:	4b4c      	ldr	r3, [pc, #304]	; (22988 <spi_cmd_complete+0x784>)
   22858:	4798      	blx	r3
   2285a:	4b54      	ldr	r3, [pc, #336]	; (229ac <spi_cmd_complete+0x7a8>)
   2285c:	0018      	movs	r0, r3
   2285e:	4b4a      	ldr	r3, [pc, #296]	; (22988 <spi_cmd_complete+0x784>)
   22860:	4798      	blx	r3
   22862:	4b4b      	ldr	r3, [pc, #300]	; (22990 <spi_cmd_complete+0x78c>)
   22864:	0018      	movs	r0, r3
   22866:	4b48      	ldr	r3, [pc, #288]	; (22988 <spi_cmd_complete+0x784>)
   22868:	4798      	blx	r3
						result = N_FAIL;
   2286a:	2300      	movs	r3, #0
   2286c:	66bb      	str	r3, [r7, #104]	; 0x68
						return result;
   2286e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   22870:	e12a      	b.n	22ac8 <spi_cmd_complete+0x8c4>
					}
				}
			} else if((cmd == CMD_DMA_READ) || (cmd == CMD_DMA_EXT_READ)) {
   22872:	230f      	movs	r3, #15
   22874:	18fb      	adds	r3, r7, r3
   22876:	781b      	ldrb	r3, [r3, #0]
   22878:	2bc2      	cmp	r3, #194	; 0xc2
   2287a:	d005      	beq.n	22888 <spi_cmd_complete+0x684>
   2287c:	230f      	movs	r3, #15
   2287e:	18fb      	adds	r3, r7, r3
   22880:	781b      	ldrb	r3, [r3, #0]
   22882:	2bc8      	cmp	r3, #200	; 0xc8
   22884:	d000      	beq.n	22888 <spi_cmd_complete+0x684>
   22886:	e11e      	b.n	22ac6 <spi_cmd_complete+0x8c2>
				int ix;

				/* some data may be read in response to dummy bytes. */
				for(ix=0; (rix < len2) && (ix < sz);) {
   22888:	2300      	movs	r3, #0
   2288a:	663b      	str	r3, [r7, #96]	; 0x60
   2288c:	e011      	b.n	228b2 <spi_cmd_complete+0x6ae>
					b[ix++] = rb[rix++];				
   2288e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
   22890:	1c5a      	adds	r2, r3, #1
   22892:	663a      	str	r2, [r7, #96]	; 0x60
   22894:	001a      	movs	r2, r3
   22896:	687b      	ldr	r3, [r7, #4]
   22898:	189a      	adds	r2, r3, r2
   2289a:	2376      	movs	r3, #118	; 0x76
   2289c:	18fb      	adds	r3, r7, r3
   2289e:	781b      	ldrb	r3, [r3, #0]
   228a0:	2176      	movs	r1, #118	; 0x76
   228a2:	1879      	adds	r1, r7, r1
   228a4:	1c58      	adds	r0, r3, #1
   228a6:	7008      	strb	r0, [r1, #0]
   228a8:	0019      	movs	r1, r3
   228aa:	2318      	movs	r3, #24
   228ac:	18fb      	adds	r3, r7, r3
   228ae:	5c5b      	ldrb	r3, [r3, r1]
   228b0:	7013      	strb	r3, [r2, #0]
				for(ix=0; (rix < len2) && (ix < sz);) {
   228b2:	2376      	movs	r3, #118	; 0x76
   228b4:	18fb      	adds	r3, r7, r3
   228b6:	781a      	ldrb	r2, [r3, #0]
   228b8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
   228ba:	429a      	cmp	r2, r3
   228bc:	d203      	bcs.n	228c6 <spi_cmd_complete+0x6c2>
   228be:	6e3a      	ldr	r2, [r7, #96]	; 0x60
   228c0:	683b      	ldr	r3, [r7, #0]
   228c2:	429a      	cmp	r2, r3
   228c4:	d3e3      	bcc.n	2288e <spi_cmd_complete+0x68a>
				}
#if 0
				if(ix) M2M_INFO("ttt %d %d\n", sz, ix);
#endif
				sz -= ix;
   228c6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
   228c8:	683a      	ldr	r2, [r7, #0]
   228ca:	1ad3      	subs	r3, r2, r3
   228cc:	603b      	str	r3, [r7, #0]

				if(sz > 0) {
   228ce:	683b      	ldr	r3, [r7, #0]
   228d0:	2b00      	cmp	r3, #0
   228d2:	d100      	bne.n	228d6 <spi_cmd_complete+0x6d2>
   228d4:	e0f1      	b.n	22aba <spi_cmd_complete+0x8b6>
					int nbytes;
					
					if (sz <= (DATA_PKT_SZ-ix)) {
   228d6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
   228d8:	2280      	movs	r2, #128	; 0x80
   228da:	0192      	lsls	r2, r2, #6
   228dc:	1ad3      	subs	r3, r2, r3
   228de:	001a      	movs	r2, r3
   228e0:	683b      	ldr	r3, [r7, #0]
   228e2:	429a      	cmp	r2, r3
   228e4:	d302      	bcc.n	228ec <spi_cmd_complete+0x6e8>
						nbytes = sz;
   228e6:	683b      	ldr	r3, [r7, #0]
   228e8:	65fb      	str	r3, [r7, #92]	; 0x5c
   228ea:	e004      	b.n	228f6 <spi_cmd_complete+0x6f2>
					} else {
						nbytes = DATA_PKT_SZ-ix;
   228ec:	6e3b      	ldr	r3, [r7, #96]	; 0x60
   228ee:	2280      	movs	r2, #128	; 0x80
   228f0:	0192      	lsls	r2, r2, #6
   228f2:	1ad3      	subs	r3, r2, r3
   228f4:	65fb      	str	r3, [r7, #92]	; 0x5c
					}

					/**
					Read bytes
					**/
					if (nmi_spi_read(&b[ix], nbytes) != M2M_SUCCESS) {
   228f6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
   228f8:	687a      	ldr	r2, [r7, #4]
   228fa:	18d3      	adds	r3, r2, r3
   228fc:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
   228fe:	b292      	uxth	r2, r2
   22900:	0011      	movs	r1, r2
   22902:	0018      	movs	r0, r3
   22904:	4b2a      	ldr	r3, [pc, #168]	; (229b0 <spi_cmd_complete+0x7ac>)
   22906:	4798      	blx	r3
   22908:	1e03      	subs	r3, r0, #0
   2290a:	d010      	beq.n	2292e <spi_cmd_complete+0x72a>
						M2M_ERR("[nmi spi]: Failed data block read, bus error...\n");
   2290c:	4a29      	ldr	r2, [pc, #164]	; (229b4 <spi_cmd_complete+0x7b0>)
   2290e:	491c      	ldr	r1, [pc, #112]	; (22980 <spi_cmd_complete+0x77c>)
   22910:	4b1c      	ldr	r3, [pc, #112]	; (22984 <spi_cmd_complete+0x780>)
   22912:	0018      	movs	r0, r3
   22914:	4b1c      	ldr	r3, [pc, #112]	; (22988 <spi_cmd_complete+0x784>)
   22916:	4798      	blx	r3
   22918:	4b27      	ldr	r3, [pc, #156]	; (229b8 <spi_cmd_complete+0x7b4>)
   2291a:	0018      	movs	r0, r3
   2291c:	4b1a      	ldr	r3, [pc, #104]	; (22988 <spi_cmd_complete+0x784>)
   2291e:	4798      	blx	r3
   22920:	4b1b      	ldr	r3, [pc, #108]	; (22990 <spi_cmd_complete+0x78c>)
   22922:	0018      	movs	r0, r3
   22924:	4b18      	ldr	r3, [pc, #96]	; (22988 <spi_cmd_complete+0x784>)
   22926:	4798      	blx	r3
						result = N_FAIL;
   22928:	2300      	movs	r3, #0
   2292a:	66bb      	str	r3, [r7, #104]	; 0x68
						goto _error_;
   2292c:	e0cb      	b.n	22ac6 <spi_cmd_complete+0x8c2>
					}

					/**
					Read Crc
					**/
					if (!gu8Crc_off) {
   2292e:	4b1c      	ldr	r3, [pc, #112]	; (229a0 <spi_cmd_complete+0x79c>)
   22930:	781b      	ldrb	r3, [r3, #0]
   22932:	2b00      	cmp	r3, #0
   22934:	d119      	bne.n	2296a <spi_cmd_complete+0x766>
						if (nmi_spi_read(crc, 2) != M2M_SUCCESS) {
   22936:	2314      	movs	r3, #20
   22938:	18fb      	adds	r3, r7, r3
   2293a:	2102      	movs	r1, #2
   2293c:	0018      	movs	r0, r3
   2293e:	4b1c      	ldr	r3, [pc, #112]	; (229b0 <spi_cmd_complete+0x7ac>)
   22940:	4798      	blx	r3
   22942:	1e03      	subs	r3, r0, #0
   22944:	d011      	beq.n	2296a <spi_cmd_complete+0x766>
							M2M_ERR("[nmi spi]: Failed data block crc read, bus error...\n");
   22946:	23a6      	movs	r3, #166	; 0xa6
   22948:	009a      	lsls	r2, r3, #2
   2294a:	490d      	ldr	r1, [pc, #52]	; (22980 <spi_cmd_complete+0x77c>)
   2294c:	4b0d      	ldr	r3, [pc, #52]	; (22984 <spi_cmd_complete+0x780>)
   2294e:	0018      	movs	r0, r3
   22950:	4b0d      	ldr	r3, [pc, #52]	; (22988 <spi_cmd_complete+0x784>)
   22952:	4798      	blx	r3
   22954:	4b19      	ldr	r3, [pc, #100]	; (229bc <spi_cmd_complete+0x7b8>)
   22956:	0018      	movs	r0, r3
   22958:	4b0b      	ldr	r3, [pc, #44]	; (22988 <spi_cmd_complete+0x784>)
   2295a:	4798      	blx	r3
   2295c:	4b0c      	ldr	r3, [pc, #48]	; (22990 <spi_cmd_complete+0x78c>)
   2295e:	0018      	movs	r0, r3
   22960:	4b09      	ldr	r3, [pc, #36]	; (22988 <spi_cmd_complete+0x784>)
   22962:	4798      	blx	r3
							result = N_FAIL;
   22964:	2300      	movs	r3, #0
   22966:	66bb      	str	r3, [r7, #104]	; 0x68
							goto _error_;
   22968:	e0ad      	b.n	22ac6 <spi_cmd_complete+0x8c2>
						}
					}

					
					ix += nbytes;
   2296a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
   2296c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
   2296e:	18d3      	adds	r3, r2, r3
   22970:	663b      	str	r3, [r7, #96]	; 0x60
					sz -= nbytes;
   22972:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
   22974:	683a      	ldr	r2, [r7, #0]
   22976:	1ad3      	subs	r3, r2, r3
   22978:	603b      	str	r3, [r7, #0]
				}

				/*  if any data in left unread, then read the rest using normal DMA code.*/	
				while(sz > 0) {
   2297a:	e09e      	b.n	22aba <spi_cmd_complete+0x8b6>
   2297c:	0000022f 	.word	0x0000022f
   22980:	000377d0 	.word	0x000377d0
   22984:	000371bc 	.word	0x000371bc
   22988:	0001c65d 	.word	0x0001c65d
   2298c:	000372b4 	.word	0x000372b4
   22990:	000371fc 	.word	0x000371fc
   22994:	00000239 	.word	0x00000239
   22998:	000372f0 	.word	0x000372f0
   2299c:	00037324 	.word	0x00037324
   229a0:	20003d4c 	.word	0x20003d4c
   229a4:	00000263 	.word	0x00000263
   229a8:	00037354 	.word	0x00037354
   229ac:	00037384 	.word	0x00037384
   229b0:	00021b3d 	.word	0x00021b3d
   229b4:	0000028e 	.word	0x0000028e
   229b8:	000373b4 	.word	0x000373b4
   229bc:	000373e8 	.word	0x000373e8
					int nbytes;
			
					if (sz <= DATA_PKT_SZ) {
   229c0:	683a      	ldr	r2, [r7, #0]
   229c2:	2380      	movs	r3, #128	; 0x80
   229c4:	019b      	lsls	r3, r3, #6
   229c6:	429a      	cmp	r2, r3
   229c8:	d802      	bhi.n	229d0 <spi_cmd_complete+0x7cc>
						nbytes = sz;
   229ca:	683b      	ldr	r3, [r7, #0]
   229cc:	65bb      	str	r3, [r7, #88]	; 0x58
   229ce:	e002      	b.n	229d6 <spi_cmd_complete+0x7d2>
					} else {
						nbytes = DATA_PKT_SZ;
   229d0:	2380      	movs	r3, #128	; 0x80
   229d2:	019b      	lsls	r3, r3, #6
   229d4:	65bb      	str	r3, [r7, #88]	; 0x58
					handled above for the first DMA.
					**/
					/**
					Data Respnose header
					**/
					retry = SPI_RESP_RETRY_COUNT;
   229d6:	230a      	movs	r3, #10
   229d8:	667b      	str	r3, [r7, #100]	; 0x64
					do {
						if (nmi_spi_read(&rsp, 1) != M2M_SUCCESS) {
   229da:	2317      	movs	r3, #23
   229dc:	18fb      	adds	r3, r7, r3
   229de:	2101      	movs	r1, #1
   229e0:	0018      	movs	r0, r3
   229e2:	4b3b      	ldr	r3, [pc, #236]	; (22ad0 <spi_cmd_complete+0x8cc>)
   229e4:	4798      	blx	r3
   229e6:	1e03      	subs	r3, r0, #0
   229e8:	d011      	beq.n	22a0e <spi_cmd_complete+0x80a>
							M2M_ERR("[nmi spi]: Failed data response read, bus error...\n");
   229ea:	23ae      	movs	r3, #174	; 0xae
   229ec:	009a      	lsls	r2, r3, #2
   229ee:	4939      	ldr	r1, [pc, #228]	; (22ad4 <spi_cmd_complete+0x8d0>)
   229f0:	4b39      	ldr	r3, [pc, #228]	; (22ad8 <spi_cmd_complete+0x8d4>)
   229f2:	0018      	movs	r0, r3
   229f4:	4b39      	ldr	r3, [pc, #228]	; (22adc <spi_cmd_complete+0x8d8>)
   229f6:	4798      	blx	r3
   229f8:	4b39      	ldr	r3, [pc, #228]	; (22ae0 <spi_cmd_complete+0x8dc>)
   229fa:	0018      	movs	r0, r3
   229fc:	4b37      	ldr	r3, [pc, #220]	; (22adc <spi_cmd_complete+0x8d8>)
   229fe:	4798      	blx	r3
   22a00:	4b38      	ldr	r3, [pc, #224]	; (22ae4 <spi_cmd_complete+0x8e0>)
   22a02:	0018      	movs	r0, r3
   22a04:	4b35      	ldr	r3, [pc, #212]	; (22adc <spi_cmd_complete+0x8d8>)
   22a06:	4798      	blx	r3
							result = N_FAIL;
   22a08:	2300      	movs	r3, #0
   22a0a:	66bb      	str	r3, [r7, #104]	; 0x68
							break;
   22a0c:	e010      	b.n	22a30 <spi_cmd_complete+0x82c>
						}
						if (((rsp >> 4) & 0xf) == 0xf)
   22a0e:	2317      	movs	r3, #23
   22a10:	18fb      	adds	r3, r7, r3
   22a12:	781b      	ldrb	r3, [r3, #0]
   22a14:	091b      	lsrs	r3, r3, #4
   22a16:	b2db      	uxtb	r3, r3
   22a18:	001a      	movs	r2, r3
   22a1a:	230f      	movs	r3, #15
   22a1c:	4013      	ands	r3, r2
   22a1e:	2b0f      	cmp	r3, #15
   22a20:	d005      	beq.n	22a2e <spi_cmd_complete+0x82a>
							break;
					} while (retry--);
   22a22:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   22a24:	1e5a      	subs	r2, r3, #1
   22a26:	667a      	str	r2, [r7, #100]	; 0x64
   22a28:	2b00      	cmp	r3, #0
   22a2a:	d1d6      	bne.n	229da <spi_cmd_complete+0x7d6>
   22a2c:	e000      	b.n	22a30 <spi_cmd_complete+0x82c>
							break;
   22a2e:	46c0      	nop			; (mov r8, r8)

					if (result == N_FAIL)
   22a30:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   22a32:	2b00      	cmp	r3, #0
   22a34:	d046      	beq.n	22ac4 <spi_cmd_complete+0x8c0>


					/**
					Read bytes
					**/
					if (nmi_spi_read(&b[ix], nbytes) != M2M_SUCCESS) {
   22a36:	6e3b      	ldr	r3, [r7, #96]	; 0x60
   22a38:	687a      	ldr	r2, [r7, #4]
   22a3a:	18d3      	adds	r3, r2, r3
   22a3c:	6dba      	ldr	r2, [r7, #88]	; 0x58
   22a3e:	b292      	uxth	r2, r2
   22a40:	0011      	movs	r1, r2
   22a42:	0018      	movs	r0, r3
   22a44:	4b22      	ldr	r3, [pc, #136]	; (22ad0 <spi_cmd_complete+0x8cc>)
   22a46:	4798      	blx	r3
   22a48:	1e03      	subs	r3, r0, #0
   22a4a:	d011      	beq.n	22a70 <spi_cmd_complete+0x86c>
						M2M_ERR("[nmi spi]: Failed data block read, bus error...\n");
   22a4c:	23b2      	movs	r3, #178	; 0xb2
   22a4e:	009a      	lsls	r2, r3, #2
   22a50:	4920      	ldr	r1, [pc, #128]	; (22ad4 <spi_cmd_complete+0x8d0>)
   22a52:	4b21      	ldr	r3, [pc, #132]	; (22ad8 <spi_cmd_complete+0x8d4>)
   22a54:	0018      	movs	r0, r3
   22a56:	4b21      	ldr	r3, [pc, #132]	; (22adc <spi_cmd_complete+0x8d8>)
   22a58:	4798      	blx	r3
   22a5a:	4b23      	ldr	r3, [pc, #140]	; (22ae8 <spi_cmd_complete+0x8e4>)
   22a5c:	0018      	movs	r0, r3
   22a5e:	4b1f      	ldr	r3, [pc, #124]	; (22adc <spi_cmd_complete+0x8d8>)
   22a60:	4798      	blx	r3
   22a62:	4b20      	ldr	r3, [pc, #128]	; (22ae4 <spi_cmd_complete+0x8e0>)
   22a64:	0018      	movs	r0, r3
   22a66:	4b1d      	ldr	r3, [pc, #116]	; (22adc <spi_cmd_complete+0x8d8>)
   22a68:	4798      	blx	r3
						result = N_FAIL;
   22a6a:	2300      	movs	r3, #0
   22a6c:	66bb      	str	r3, [r7, #104]	; 0x68
						break;
   22a6e:	e02a      	b.n	22ac6 <spi_cmd_complete+0x8c2>
					}

					/**
					Read Crc
					**/
					if (!gu8Crc_off) {
   22a70:	4b1e      	ldr	r3, [pc, #120]	; (22aec <spi_cmd_complete+0x8e8>)
   22a72:	781b      	ldrb	r3, [r3, #0]
   22a74:	2b00      	cmp	r3, #0
   22a76:	d118      	bne.n	22aaa <spi_cmd_complete+0x8a6>
						if (nmi_spi_read(crc, 2) != M2M_SUCCESS) {
   22a78:	2314      	movs	r3, #20
   22a7a:	18fb      	adds	r3, r7, r3
   22a7c:	2102      	movs	r1, #2
   22a7e:	0018      	movs	r0, r3
   22a80:	4b13      	ldr	r3, [pc, #76]	; (22ad0 <spi_cmd_complete+0x8cc>)
   22a82:	4798      	blx	r3
   22a84:	1e03      	subs	r3, r0, #0
   22a86:	d010      	beq.n	22aaa <spi_cmd_complete+0x8a6>
							M2M_ERR("[nmi spi]: Failed data block crc read, bus error...\n");
   22a88:	4a19      	ldr	r2, [pc, #100]	; (22af0 <spi_cmd_complete+0x8ec>)
   22a8a:	4912      	ldr	r1, [pc, #72]	; (22ad4 <spi_cmd_complete+0x8d0>)
   22a8c:	4b12      	ldr	r3, [pc, #72]	; (22ad8 <spi_cmd_complete+0x8d4>)
   22a8e:	0018      	movs	r0, r3
   22a90:	4b12      	ldr	r3, [pc, #72]	; (22adc <spi_cmd_complete+0x8d8>)
   22a92:	4798      	blx	r3
   22a94:	4b17      	ldr	r3, [pc, #92]	; (22af4 <spi_cmd_complete+0x8f0>)
   22a96:	0018      	movs	r0, r3
   22a98:	4b10      	ldr	r3, [pc, #64]	; (22adc <spi_cmd_complete+0x8d8>)
   22a9a:	4798      	blx	r3
   22a9c:	4b11      	ldr	r3, [pc, #68]	; (22ae4 <spi_cmd_complete+0x8e0>)
   22a9e:	0018      	movs	r0, r3
   22aa0:	4b0e      	ldr	r3, [pc, #56]	; (22adc <spi_cmd_complete+0x8d8>)
   22aa2:	4798      	blx	r3
							result = N_FAIL;
   22aa4:	2300      	movs	r3, #0
   22aa6:	66bb      	str	r3, [r7, #104]	; 0x68
							break;
   22aa8:	e00d      	b.n	22ac6 <spi_cmd_complete+0x8c2>
						}
					}

					ix += nbytes;
   22aaa:	6e3a      	ldr	r2, [r7, #96]	; 0x60
   22aac:	6dbb      	ldr	r3, [r7, #88]	; 0x58
   22aae:	18d3      	adds	r3, r2, r3
   22ab0:	663b      	str	r3, [r7, #96]	; 0x60
					sz -= nbytes;
   22ab2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
   22ab4:	683a      	ldr	r2, [r7, #0]
   22ab6:	1ad3      	subs	r3, r2, r3
   22ab8:	603b      	str	r3, [r7, #0]
				while(sz > 0) {
   22aba:	683b      	ldr	r3, [r7, #0]
   22abc:	2b00      	cmp	r3, #0
   22abe:	d000      	beq.n	22ac2 <spi_cmd_complete+0x8be>
   22ac0:	e77e      	b.n	229c0 <spi_cmd_complete+0x7bc>
   22ac2:	e000      	b.n	22ac6 <spi_cmd_complete+0x8c2>
						break;
   22ac4:	46c0      	nop			; (mov r8, r8)
				}
			}
	}
_error_:
	return result;
   22ac6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
}
   22ac8:	0018      	movs	r0, r3
   22aca:	46bd      	mov	sp, r7
   22acc:	b01f      	add	sp, #124	; 0x7c
   22ace:	bd90      	pop	{r4, r7, pc}
   22ad0:	00021b3d 	.word	0x00021b3d
   22ad4:	000377d0 	.word	0x000377d0
   22ad8:	000371bc 	.word	0x000371bc
   22adc:	0001c65d 	.word	0x0001c65d
   22ae0:	00037420 	.word	0x00037420
   22ae4:	000371fc 	.word	0x000371fc
   22ae8:	000373b4 	.word	0x000373b4
   22aec:	20003d4c 	.word	0x20003d4c
   22af0:	000002d2 	.word	0x000002d2
   22af4:	000373e8 	.word	0x000373e8

00022af8 <spi_data_write>:

	return result;
}

static sint8 spi_data_write(uint8 *b, uint16 sz)
{
   22af8:	b580      	push	{r7, lr}
   22afa:	b086      	sub	sp, #24
   22afc:	af00      	add	r7, sp, #0
   22afe:	6078      	str	r0, [r7, #4]
   22b00:	000a      	movs	r2, r1
   22b02:	1cbb      	adds	r3, r7, #2
   22b04:	801a      	strh	r2, [r3, #0]
	sint16 ix;
	uint16 nbytes;
	sint8 result = 1;
   22b06:	2313      	movs	r3, #19
   22b08:	18fb      	adds	r3, r7, r3
   22b0a:	2201      	movs	r2, #1
   22b0c:	701a      	strb	r2, [r3, #0]
	uint8 cmd, order, crc[2] = {0};
   22b0e:	230c      	movs	r3, #12
   22b10:	18fb      	adds	r3, r7, r3
   22b12:	2200      	movs	r2, #0
   22b14:	801a      	strh	r2, [r3, #0]
	//uint8 rsp;

	/**
		Data
	**/
	ix = 0;
   22b16:	2316      	movs	r3, #22
   22b18:	18fb      	adds	r3, r7, r3
   22b1a:	2200      	movs	r2, #0
   22b1c:	801a      	strh	r2, [r3, #0]
	do {
		if (sz <= DATA_PKT_SZ)
   22b1e:	1cbb      	adds	r3, r7, #2
   22b20:	881a      	ldrh	r2, [r3, #0]
   22b22:	2380      	movs	r3, #128	; 0x80
   22b24:	019b      	lsls	r3, r3, #6
   22b26:	429a      	cmp	r2, r3
   22b28:	d805      	bhi.n	22b36 <spi_data_write+0x3e>
			nbytes = sz;
   22b2a:	2314      	movs	r3, #20
   22b2c:	18fb      	adds	r3, r7, r3
   22b2e:	1cba      	adds	r2, r7, #2
   22b30:	8812      	ldrh	r2, [r2, #0]
   22b32:	801a      	strh	r2, [r3, #0]
   22b34:	e004      	b.n	22b40 <spi_data_write+0x48>
		else
			nbytes = DATA_PKT_SZ;
   22b36:	2314      	movs	r3, #20
   22b38:	18fb      	adds	r3, r7, r3
   22b3a:	2280      	movs	r2, #128	; 0x80
   22b3c:	0192      	lsls	r2, r2, #6
   22b3e:	801a      	strh	r2, [r3, #0]

		/**
			Write command
		**/
		cmd = 0xf0;
   22b40:	2311      	movs	r3, #17
   22b42:	18fb      	adds	r3, r7, r3
   22b44:	22f0      	movs	r2, #240	; 0xf0
   22b46:	701a      	strb	r2, [r3, #0]
		if (ix == 0)  {
   22b48:	2316      	movs	r3, #22
   22b4a:	18fb      	adds	r3, r7, r3
   22b4c:	2200      	movs	r2, #0
   22b4e:	5e9b      	ldrsh	r3, [r3, r2]
   22b50:	2b00      	cmp	r3, #0
   22b52:	d10f      	bne.n	22b74 <spi_data_write+0x7c>
			if (sz <= DATA_PKT_SZ)
   22b54:	1cbb      	adds	r3, r7, #2
   22b56:	881a      	ldrh	r2, [r3, #0]
   22b58:	2380      	movs	r3, #128	; 0x80
   22b5a:	019b      	lsls	r3, r3, #6
   22b5c:	429a      	cmp	r2, r3
   22b5e:	d804      	bhi.n	22b6a <spi_data_write+0x72>
				order = 0x3;
   22b60:	2312      	movs	r3, #18
   22b62:	18fb      	adds	r3, r7, r3
   22b64:	2203      	movs	r2, #3
   22b66:	701a      	strb	r2, [r3, #0]
   22b68:	e013      	b.n	22b92 <spi_data_write+0x9a>
			else
				order = 0x1;
   22b6a:	2312      	movs	r3, #18
   22b6c:	18fb      	adds	r3, r7, r3
   22b6e:	2201      	movs	r2, #1
   22b70:	701a      	strb	r2, [r3, #0]
   22b72:	e00e      	b.n	22b92 <spi_data_write+0x9a>
		} else {
			if (sz <= DATA_PKT_SZ)
   22b74:	1cbb      	adds	r3, r7, #2
   22b76:	881a      	ldrh	r2, [r3, #0]
   22b78:	2380      	movs	r3, #128	; 0x80
   22b7a:	019b      	lsls	r3, r3, #6
   22b7c:	429a      	cmp	r2, r3
   22b7e:	d804      	bhi.n	22b8a <spi_data_write+0x92>
				order = 0x3;
   22b80:	2312      	movs	r3, #18
   22b82:	18fb      	adds	r3, r7, r3
   22b84:	2203      	movs	r2, #3
   22b86:	701a      	strb	r2, [r3, #0]
   22b88:	e003      	b.n	22b92 <spi_data_write+0x9a>
			else
				order = 0x2;
   22b8a:	2312      	movs	r3, #18
   22b8c:	18fb      	adds	r3, r7, r3
   22b8e:	2202      	movs	r2, #2
   22b90:	701a      	strb	r2, [r3, #0]
		}
		cmd |= order;
   22b92:	2311      	movs	r3, #17
   22b94:	18fb      	adds	r3, r7, r3
   22b96:	781a      	ldrb	r2, [r3, #0]
   22b98:	2312      	movs	r3, #18
   22b9a:	18fb      	adds	r3, r7, r3
   22b9c:	781b      	ldrb	r3, [r3, #0]
   22b9e:	4313      	orrs	r3, r2
   22ba0:	b2da      	uxtb	r2, r3
   22ba2:	2311      	movs	r3, #17
   22ba4:	18fb      	adds	r3, r7, r3
   22ba6:	701a      	strb	r2, [r3, #0]
		if (M2M_SUCCESS != nmi_spi_write(&cmd, 1)) {
   22ba8:	2311      	movs	r3, #17
   22baa:	18fb      	adds	r3, r7, r3
   22bac:	2101      	movs	r1, #1
   22bae:	0018      	movs	r0, r3
   22bb0:	4b3c      	ldr	r3, [pc, #240]	; (22ca4 <spi_data_write+0x1ac>)
   22bb2:	4798      	blx	r3
   22bb4:	1e03      	subs	r3, r0, #0
   22bb6:	d012      	beq.n	22bde <spi_data_write+0xe6>
			M2M_ERR("[nmi spi]: Failed data block cmd write, bus error...\n");
   22bb8:	4a3b      	ldr	r2, [pc, #236]	; (22ca8 <spi_data_write+0x1b0>)
   22bba:	493c      	ldr	r1, [pc, #240]	; (22cac <spi_data_write+0x1b4>)
   22bbc:	4b3c      	ldr	r3, [pc, #240]	; (22cb0 <spi_data_write+0x1b8>)
   22bbe:	0018      	movs	r0, r3
   22bc0:	4b3c      	ldr	r3, [pc, #240]	; (22cb4 <spi_data_write+0x1bc>)
   22bc2:	4798      	blx	r3
   22bc4:	4b3c      	ldr	r3, [pc, #240]	; (22cb8 <spi_data_write+0x1c0>)
   22bc6:	0018      	movs	r0, r3
   22bc8:	4b3a      	ldr	r3, [pc, #232]	; (22cb4 <spi_data_write+0x1bc>)
   22bca:	4798      	blx	r3
   22bcc:	4b3b      	ldr	r3, [pc, #236]	; (22cbc <spi_data_write+0x1c4>)
   22bce:	0018      	movs	r0, r3
   22bd0:	4b38      	ldr	r3, [pc, #224]	; (22cb4 <spi_data_write+0x1bc>)
   22bd2:	4798      	blx	r3
			result = N_FAIL;
   22bd4:	2313      	movs	r3, #19
   22bd6:	18fb      	adds	r3, r7, r3
   22bd8:	2200      	movs	r2, #0
   22bda:	701a      	strb	r2, [r3, #0]
			break;
   22bdc:	e059      	b.n	22c92 <spi_data_write+0x19a>
		}

		/**
			Write data
		**/
		if (M2M_SUCCESS != nmi_spi_write(&b[ix], nbytes)) {
   22bde:	2316      	movs	r3, #22
   22be0:	18fb      	adds	r3, r7, r3
   22be2:	2200      	movs	r2, #0
   22be4:	5e9b      	ldrsh	r3, [r3, r2]
   22be6:	687a      	ldr	r2, [r7, #4]
   22be8:	18d2      	adds	r2, r2, r3
   22bea:	2314      	movs	r3, #20
   22bec:	18fb      	adds	r3, r7, r3
   22bee:	881b      	ldrh	r3, [r3, #0]
   22bf0:	0019      	movs	r1, r3
   22bf2:	0010      	movs	r0, r2
   22bf4:	4b2b      	ldr	r3, [pc, #172]	; (22ca4 <spi_data_write+0x1ac>)
   22bf6:	4798      	blx	r3
   22bf8:	1e03      	subs	r3, r0, #0
   22bfa:	d012      	beq.n	22c22 <spi_data_write+0x12a>
			M2M_ERR("[nmi spi]: Failed data block write, bus error...\n");
   22bfc:	4a30      	ldr	r2, [pc, #192]	; (22cc0 <spi_data_write+0x1c8>)
   22bfe:	492b      	ldr	r1, [pc, #172]	; (22cac <spi_data_write+0x1b4>)
   22c00:	4b2b      	ldr	r3, [pc, #172]	; (22cb0 <spi_data_write+0x1b8>)
   22c02:	0018      	movs	r0, r3
   22c04:	4b2b      	ldr	r3, [pc, #172]	; (22cb4 <spi_data_write+0x1bc>)
   22c06:	4798      	blx	r3
   22c08:	4b2e      	ldr	r3, [pc, #184]	; (22cc4 <spi_data_write+0x1cc>)
   22c0a:	0018      	movs	r0, r3
   22c0c:	4b29      	ldr	r3, [pc, #164]	; (22cb4 <spi_data_write+0x1bc>)
   22c0e:	4798      	blx	r3
   22c10:	4b2a      	ldr	r3, [pc, #168]	; (22cbc <spi_data_write+0x1c4>)
   22c12:	0018      	movs	r0, r3
   22c14:	4b27      	ldr	r3, [pc, #156]	; (22cb4 <spi_data_write+0x1bc>)
   22c16:	4798      	blx	r3
			result = N_FAIL;
   22c18:	2313      	movs	r3, #19
   22c1a:	18fb      	adds	r3, r7, r3
   22c1c:	2200      	movs	r2, #0
   22c1e:	701a      	strb	r2, [r3, #0]
			break;
   22c20:	e037      	b.n	22c92 <spi_data_write+0x19a>
		}

		/**
			Write Crc
		**/
		if (!gu8Crc_off) {
   22c22:	4b29      	ldr	r3, [pc, #164]	; (22cc8 <spi_data_write+0x1d0>)
   22c24:	781b      	ldrb	r3, [r3, #0]
   22c26:	2b00      	cmp	r3, #0
   22c28:	d11b      	bne.n	22c62 <spi_data_write+0x16a>
			if (M2M_SUCCESS != nmi_spi_write(crc, 2)) {
   22c2a:	230c      	movs	r3, #12
   22c2c:	18fb      	adds	r3, r7, r3
   22c2e:	2102      	movs	r1, #2
   22c30:	0018      	movs	r0, r3
   22c32:	4b1c      	ldr	r3, [pc, #112]	; (22ca4 <spi_data_write+0x1ac>)
   22c34:	4798      	blx	r3
   22c36:	1e03      	subs	r3, r0, #0
   22c38:	d013      	beq.n	22c62 <spi_data_write+0x16a>
				M2M_ERR("[nmi spi]: Failed data block crc write, bus error...\n");
   22c3a:	23d7      	movs	r3, #215	; 0xd7
   22c3c:	009a      	lsls	r2, r3, #2
   22c3e:	491b      	ldr	r1, [pc, #108]	; (22cac <spi_data_write+0x1b4>)
   22c40:	4b1b      	ldr	r3, [pc, #108]	; (22cb0 <spi_data_write+0x1b8>)
   22c42:	0018      	movs	r0, r3
   22c44:	4b1b      	ldr	r3, [pc, #108]	; (22cb4 <spi_data_write+0x1bc>)
   22c46:	4798      	blx	r3
   22c48:	4b20      	ldr	r3, [pc, #128]	; (22ccc <spi_data_write+0x1d4>)
   22c4a:	0018      	movs	r0, r3
   22c4c:	4b19      	ldr	r3, [pc, #100]	; (22cb4 <spi_data_write+0x1bc>)
   22c4e:	4798      	blx	r3
   22c50:	4b1a      	ldr	r3, [pc, #104]	; (22cbc <spi_data_write+0x1c4>)
   22c52:	0018      	movs	r0, r3
   22c54:	4b17      	ldr	r3, [pc, #92]	; (22cb4 <spi_data_write+0x1bc>)
   22c56:	4798      	blx	r3
				result = N_FAIL;
   22c58:	2313      	movs	r3, #19
   22c5a:	18fb      	adds	r3, r7, r3
   22c5c:	2200      	movs	r2, #0
   22c5e:	701a      	strb	r2, [r3, #0]
				break;
   22c60:	e017      	b.n	22c92 <spi_data_write+0x19a>
			}
		}

		ix += nbytes;
   22c62:	2316      	movs	r3, #22
   22c64:	18fb      	adds	r3, r7, r3
   22c66:	881a      	ldrh	r2, [r3, #0]
   22c68:	2314      	movs	r3, #20
   22c6a:	18fb      	adds	r3, r7, r3
   22c6c:	881b      	ldrh	r3, [r3, #0]
   22c6e:	18d3      	adds	r3, r2, r3
   22c70:	b29a      	uxth	r2, r3
   22c72:	2316      	movs	r3, #22
   22c74:	18fb      	adds	r3, r7, r3
   22c76:	801a      	strh	r2, [r3, #0]
		sz -= nbytes;
   22c78:	1cbb      	adds	r3, r7, #2
   22c7a:	1cb9      	adds	r1, r7, #2
   22c7c:	2214      	movs	r2, #20
   22c7e:	18ba      	adds	r2, r7, r2
   22c80:	8809      	ldrh	r1, [r1, #0]
   22c82:	8812      	ldrh	r2, [r2, #0]
   22c84:	1a8a      	subs	r2, r1, r2
   22c86:	801a      	strh	r2, [r3, #0]
	} while (sz);
   22c88:	1cbb      	adds	r3, r7, #2
   22c8a:	881b      	ldrh	r3, [r3, #0]
   22c8c:	2b00      	cmp	r3, #0
   22c8e:	d000      	beq.n	22c92 <spi_data_write+0x19a>
   22c90:	e745      	b.n	22b1e <spi_data_write+0x26>


	return result;
   22c92:	2313      	movs	r3, #19
   22c94:	18fb      	adds	r3, r7, r3
   22c96:	781b      	ldrb	r3, [r3, #0]
   22c98:	b25b      	sxtb	r3, r3
}
   22c9a:	0018      	movs	r0, r3
   22c9c:	46bd      	mov	sp, r7
   22c9e:	b006      	add	sp, #24
   22ca0:	bd80      	pop	{r7, pc}
   22ca2:	46c0      	nop			; (mov r8, r8)
   22ca4:	00021b81 	.word	0x00021b81
   22ca8:	00000349 	.word	0x00000349
   22cac:	000377e4 	.word	0x000377e4
   22cb0:	000371bc 	.word	0x000371bc
   22cb4:	0001c65d 	.word	0x0001c65d
   22cb8:	00037484 	.word	0x00037484
   22cbc:	000371fc 	.word	0x000371fc
   22cc0:	00000352 	.word	0x00000352
   22cc4:	000374bc 	.word	0x000374bc
   22cc8:	20003d4c 	.word	0x20003d4c
   22ccc:	000374f0 	.word	0x000374f0

00022cd0 <spi_write_reg>:
	Spi interfaces

********************************************/

static sint8 spi_write_reg(uint32 addr, uint32 u32data)
{
   22cd0:	b590      	push	{r4, r7, lr}
   22cd2:	b087      	sub	sp, #28
   22cd4:	af02      	add	r7, sp, #8
   22cd6:	6078      	str	r0, [r7, #4]
   22cd8:	6039      	str	r1, [r7, #0]
	uint8 retry = SPI_RETRY_COUNT;
   22cda:	230f      	movs	r3, #15
   22cdc:	18fb      	adds	r3, r7, r3
   22cde:	220a      	movs	r2, #10
   22ce0:	701a      	strb	r2, [r3, #0]
	sint8 result = N_OK;
   22ce2:	230c      	movs	r3, #12
   22ce4:	18fb      	adds	r3, r7, r3
   22ce6:	2201      	movs	r2, #1
   22ce8:	701a      	strb	r2, [r3, #0]
	uint8 cmd = CMD_SINGLE_WRITE;
   22cea:	230e      	movs	r3, #14
   22cec:	18fb      	adds	r3, r7, r3
   22cee:	22c9      	movs	r2, #201	; 0xc9
   22cf0:	701a      	strb	r2, [r3, #0]
	uint8 clockless = 0;
   22cf2:	230d      	movs	r3, #13
   22cf4:	18fb      	adds	r3, r7, r3
   22cf6:	2200      	movs	r2, #0
   22cf8:	701a      	strb	r2, [r3, #0]
	
_RETRY_:	
	if (addr <= 0x30)
   22cfa:	687b      	ldr	r3, [r7, #4]
   22cfc:	2b30      	cmp	r3, #48	; 0x30
   22cfe:	d808      	bhi.n	22d12 <spi_write_reg+0x42>
	{
		/**
		NMC1000 clockless registers.
		**/
		cmd = CMD_INTERNAL_WRITE;
   22d00:	230e      	movs	r3, #14
   22d02:	18fb      	adds	r3, r7, r3
   22d04:	22c3      	movs	r2, #195	; 0xc3
   22d06:	701a      	strb	r2, [r3, #0]
		clockless = 1;
   22d08:	230d      	movs	r3, #13
   22d0a:	18fb      	adds	r3, r7, r3
   22d0c:	2201      	movs	r2, #1
   22d0e:	701a      	strb	r2, [r3, #0]
   22d10:	e007      	b.n	22d22 <spi_write_reg+0x52>
	}
	else
	{
		cmd = CMD_SINGLE_WRITE;
   22d12:	230e      	movs	r3, #14
   22d14:	18fb      	adds	r3, r7, r3
   22d16:	22c9      	movs	r2, #201	; 0xc9
   22d18:	701a      	strb	r2, [r3, #0]
		clockless = 0;
   22d1a:	230d      	movs	r3, #13
   22d1c:	18fb      	adds	r3, r7, r3
   22d1e:	2200      	movs	r2, #0
   22d20:	701a      	strb	r2, [r3, #0]
		goto _FAIL_;
	}

#else

	result = spi_cmd_complete(cmd, addr, (uint8*)&u32data, 4, clockless);
   22d22:	003a      	movs	r2, r7
   22d24:	6879      	ldr	r1, [r7, #4]
   22d26:	230e      	movs	r3, #14
   22d28:	18fb      	adds	r3, r7, r3
   22d2a:	7818      	ldrb	r0, [r3, #0]
   22d2c:	230d      	movs	r3, #13
   22d2e:	18fb      	adds	r3, r7, r3
   22d30:	781b      	ldrb	r3, [r3, #0]
   22d32:	9300      	str	r3, [sp, #0]
   22d34:	2304      	movs	r3, #4
   22d36:	4c2e      	ldr	r4, [pc, #184]	; (22df0 <spi_write_reg+0x120>)
   22d38:	47a0      	blx	r4
   22d3a:	0002      	movs	r2, r0
   22d3c:	230c      	movs	r3, #12
   22d3e:	18fb      	adds	r3, r7, r3
   22d40:	701a      	strb	r2, [r3, #0]
	if (result != N_OK) {
   22d42:	230c      	movs	r3, #12
   22d44:	18fb      	adds	r3, r7, r3
   22d46:	781b      	ldrb	r3, [r3, #0]
   22d48:	b25b      	sxtb	r3, r3
   22d4a:	2b01      	cmp	r3, #1
   22d4c:	d010      	beq.n	22d70 <spi_write_reg+0xa0>
		M2M_ERR( "[nmi spi]: Failed cmd, write reg (%08x)...\n", addr);
   22d4e:	4a29      	ldr	r2, [pc, #164]	; (22df4 <spi_write_reg+0x124>)
   22d50:	4929      	ldr	r1, [pc, #164]	; (22df8 <spi_write_reg+0x128>)
   22d52:	4b2a      	ldr	r3, [pc, #168]	; (22dfc <spi_write_reg+0x12c>)
   22d54:	0018      	movs	r0, r3
   22d56:	4b2a      	ldr	r3, [pc, #168]	; (22e00 <spi_write_reg+0x130>)
   22d58:	4798      	blx	r3
   22d5a:	687a      	ldr	r2, [r7, #4]
   22d5c:	4b29      	ldr	r3, [pc, #164]	; (22e04 <spi_write_reg+0x134>)
   22d5e:	0011      	movs	r1, r2
   22d60:	0018      	movs	r0, r3
   22d62:	4b27      	ldr	r3, [pc, #156]	; (22e00 <spi_write_reg+0x130>)
   22d64:	4798      	blx	r3
   22d66:	4b28      	ldr	r3, [pc, #160]	; (22e08 <spi_write_reg+0x138>)
   22d68:	0018      	movs	r0, r3
   22d6a:	4b25      	ldr	r3, [pc, #148]	; (22e00 <spi_write_reg+0x130>)
   22d6c:	4798      	blx	r3
		goto _FAIL_;
   22d6e:	46c0      	nop			; (mov r8, r8)
	}

#endif
_FAIL_:
	if(result != N_OK)
   22d70:	230c      	movs	r3, #12
   22d72:	18fb      	adds	r3, r7, r3
   22d74:	781b      	ldrb	r3, [r3, #0]
   22d76:	b25b      	sxtb	r3, r3
   22d78:	2b01      	cmp	r3, #1
   22d7a:	d030      	beq.n	22dde <spi_write_reg+0x10e>
	{
		nm_bsp_sleep(1);
   22d7c:	2001      	movs	r0, #1
   22d7e:	4b23      	ldr	r3, [pc, #140]	; (22e0c <spi_write_reg+0x13c>)
   22d80:	4798      	blx	r3
		spi_cmd(CMD_RESET, 0, 0, 0, 0);
   22d82:	2300      	movs	r3, #0
   22d84:	9300      	str	r3, [sp, #0]
   22d86:	2300      	movs	r3, #0
   22d88:	2200      	movs	r2, #0
   22d8a:	2100      	movs	r1, #0
   22d8c:	20cf      	movs	r0, #207	; 0xcf
   22d8e:	4c20      	ldr	r4, [pc, #128]	; (22e10 <spi_write_reg+0x140>)
   22d90:	47a0      	blx	r4
		spi_cmd_rsp(CMD_RESET);
   22d92:	20cf      	movs	r0, #207	; 0xcf
   22d94:	4b1f      	ldr	r3, [pc, #124]	; (22e14 <spi_write_reg+0x144>)
   22d96:	4798      	blx	r3
		M2M_ERR("Reset and retry %d %lx %lx\n",retry,addr,u32data);
   22d98:	23ea      	movs	r3, #234	; 0xea
   22d9a:	009a      	lsls	r2, r3, #2
   22d9c:	4916      	ldr	r1, [pc, #88]	; (22df8 <spi_write_reg+0x128>)
   22d9e:	4b17      	ldr	r3, [pc, #92]	; (22dfc <spi_write_reg+0x12c>)
   22da0:	0018      	movs	r0, r3
   22da2:	4b17      	ldr	r3, [pc, #92]	; (22e00 <spi_write_reg+0x130>)
   22da4:	4798      	blx	r3
   22da6:	230f      	movs	r3, #15
   22da8:	18fb      	adds	r3, r7, r3
   22daa:	7819      	ldrb	r1, [r3, #0]
   22dac:	683b      	ldr	r3, [r7, #0]
   22dae:	687a      	ldr	r2, [r7, #4]
   22db0:	4819      	ldr	r0, [pc, #100]	; (22e18 <spi_write_reg+0x148>)
   22db2:	4c13      	ldr	r4, [pc, #76]	; (22e00 <spi_write_reg+0x130>)
   22db4:	47a0      	blx	r4
   22db6:	4b14      	ldr	r3, [pc, #80]	; (22e08 <spi_write_reg+0x138>)
   22db8:	0018      	movs	r0, r3
   22dba:	4b11      	ldr	r3, [pc, #68]	; (22e00 <spi_write_reg+0x130>)
   22dbc:	4798      	blx	r3
		nm_bsp_sleep(1);
   22dbe:	2001      	movs	r0, #1
   22dc0:	4b12      	ldr	r3, [pc, #72]	; (22e0c <spi_write_reg+0x13c>)
   22dc2:	4798      	blx	r3
		retry--;
   22dc4:	230f      	movs	r3, #15
   22dc6:	18fb      	adds	r3, r7, r3
   22dc8:	781a      	ldrb	r2, [r3, #0]
   22dca:	230f      	movs	r3, #15
   22dcc:	18fb      	adds	r3, r7, r3
   22dce:	3a01      	subs	r2, #1
   22dd0:	701a      	strb	r2, [r3, #0]
		if(retry) goto _RETRY_;
   22dd2:	230f      	movs	r3, #15
   22dd4:	18fb      	adds	r3, r7, r3
   22dd6:	781b      	ldrb	r3, [r3, #0]
   22dd8:	2b00      	cmp	r3, #0
   22dda:	d000      	beq.n	22dde <spi_write_reg+0x10e>
   22ddc:	e78d      	b.n	22cfa <spi_write_reg+0x2a>
	}

	return result;
   22dde:	230c      	movs	r3, #12
   22de0:	18fb      	adds	r3, r7, r3
   22de2:	781b      	ldrb	r3, [r3, #0]
   22de4:	b25b      	sxtb	r3, r3
}
   22de6:	0018      	movs	r0, r3
   22de8:	46bd      	mov	sp, r7
   22dea:	b005      	add	sp, #20
   22dec:	bd90      	pop	{r4, r7, pc}
   22dee:	46c0      	nop			; (mov r8, r8)
   22df0:	00022205 	.word	0x00022205
   22df4:	0000039d 	.word	0x0000039d
   22df8:	000377f4 	.word	0x000377f4
   22dfc:	000371bc 	.word	0x000371bc
   22e00:	0001c65d 	.word	0x0001c65d
   22e04:	00037528 	.word	0x00037528
   22e08:	000371fc 	.word	0x000371fc
   22e0c:	0001eb45 	.word	0x0001eb45
   22e10:	00021c89 	.word	0x00021c89
   22e14:	000220c9 	.word	0x000220c9
   22e18:	00037554 	.word	0x00037554

00022e1c <nm_spi_write>:

static sint8 nm_spi_write(uint32 addr, uint8 *buf, uint16 size)
{
   22e1c:	b590      	push	{r4, r7, lr}
   22e1e:	b089      	sub	sp, #36	; 0x24
   22e20:	af02      	add	r7, sp, #8
   22e22:	60f8      	str	r0, [r7, #12]
   22e24:	60b9      	str	r1, [r7, #8]
   22e26:	1dbb      	adds	r3, r7, #6
   22e28:	801a      	strh	r2, [r3, #0]
	sint8 result;
	uint8 retry = SPI_RETRY_COUNT;
   22e2a:	2316      	movs	r3, #22
   22e2c:	18fb      	adds	r3, r7, r3
   22e2e:	220a      	movs	r2, #10
   22e30:	701a      	strb	r2, [r3, #0]
	uint8 cmd = CMD_DMA_EXT_WRITE;
   22e32:	2315      	movs	r3, #21
   22e34:	18fb      	adds	r3, r7, r3
   22e36:	22c7      	movs	r2, #199	; 0xc7
   22e38:	701a      	strb	r2, [r3, #0]
	if (result != N_OK) {
		M2M_ERR("[nmi spi ]: Failed cmd response, write block (%08x)...\n", (unsigned int)addr);
		goto _FAIL_;
	}
#else
	result = spi_cmd_complete(cmd, addr, NULL, size, 0);
   22e3a:	1dbb      	adds	r3, r7, #6
   22e3c:	881a      	ldrh	r2, [r3, #0]
   22e3e:	68f9      	ldr	r1, [r7, #12]
   22e40:	2315      	movs	r3, #21
   22e42:	18fb      	adds	r3, r7, r3
   22e44:	7818      	ldrb	r0, [r3, #0]
   22e46:	2300      	movs	r3, #0
   22e48:	9300      	str	r3, [sp, #0]
   22e4a:	0013      	movs	r3, r2
   22e4c:	2200      	movs	r2, #0
   22e4e:	4c4d      	ldr	r4, [pc, #308]	; (22f84 <nm_spi_write+0x168>)
   22e50:	47a0      	blx	r4
   22e52:	0002      	movs	r2, r0
   22e54:	2317      	movs	r3, #23
   22e56:	18fb      	adds	r3, r7, r3
   22e58:	701a      	strb	r2, [r3, #0]
	if (result != N_OK) {
   22e5a:	2317      	movs	r3, #23
   22e5c:	18fb      	adds	r3, r7, r3
   22e5e:	781b      	ldrb	r3, [r3, #0]
   22e60:	b25b      	sxtb	r3, r3
   22e62:	2b01      	cmp	r3, #1
   22e64:	d010      	beq.n	22e88 <nm_spi_write+0x6c>
		M2M_ERR( "[nmi spi]: Failed cmd, write block (%08x)...\n", addr);
   22e66:	4a48      	ldr	r2, [pc, #288]	; (22f88 <nm_spi_write+0x16c>)
   22e68:	4948      	ldr	r1, [pc, #288]	; (22f8c <nm_spi_write+0x170>)
   22e6a:	4b49      	ldr	r3, [pc, #292]	; (22f90 <nm_spi_write+0x174>)
   22e6c:	0018      	movs	r0, r3
   22e6e:	4b49      	ldr	r3, [pc, #292]	; (22f94 <nm_spi_write+0x178>)
   22e70:	4798      	blx	r3
   22e72:	68fa      	ldr	r2, [r7, #12]
   22e74:	4b48      	ldr	r3, [pc, #288]	; (22f98 <nm_spi_write+0x17c>)
   22e76:	0011      	movs	r1, r2
   22e78:	0018      	movs	r0, r3
   22e7a:	4b46      	ldr	r3, [pc, #280]	; (22f94 <nm_spi_write+0x178>)
   22e7c:	4798      	blx	r3
   22e7e:	4b47      	ldr	r3, [pc, #284]	; (22f9c <nm_spi_write+0x180>)
   22e80:	0018      	movs	r0, r3
   22e82:	4b44      	ldr	r3, [pc, #272]	; (22f94 <nm_spi_write+0x178>)
   22e84:	4798      	blx	r3
		goto _FAIL_;
   22e86:	e03e      	b.n	22f06 <nm_spi_write+0xea>
#endif

	/**
		Data
	**/
	result = spi_data_write(buf, size);
   22e88:	2317      	movs	r3, #23
   22e8a:	18fc      	adds	r4, r7, r3
   22e8c:	1dbb      	adds	r3, r7, #6
   22e8e:	881a      	ldrh	r2, [r3, #0]
   22e90:	68bb      	ldr	r3, [r7, #8]
   22e92:	0011      	movs	r1, r2
   22e94:	0018      	movs	r0, r3
   22e96:	4b42      	ldr	r3, [pc, #264]	; (22fa0 <nm_spi_write+0x184>)
   22e98:	4798      	blx	r3
   22e9a:	0003      	movs	r3, r0
   22e9c:	7023      	strb	r3, [r4, #0]
	if (result != N_OK) {
   22e9e:	2317      	movs	r3, #23
   22ea0:	18fb      	adds	r3, r7, r3
   22ea2:	781b      	ldrb	r3, [r3, #0]
   22ea4:	b25b      	sxtb	r3, r3
   22ea6:	2b01      	cmp	r3, #1
   22ea8:	d00e      	beq.n	22ec8 <nm_spi_write+0xac>
		M2M_ERR("[nmi spi]: Failed block data write...\n");
   22eaa:	4a3e      	ldr	r2, [pc, #248]	; (22fa4 <nm_spi_write+0x188>)
   22eac:	4937      	ldr	r1, [pc, #220]	; (22f8c <nm_spi_write+0x170>)
   22eae:	4b38      	ldr	r3, [pc, #224]	; (22f90 <nm_spi_write+0x174>)
   22eb0:	0018      	movs	r0, r3
   22eb2:	4b38      	ldr	r3, [pc, #224]	; (22f94 <nm_spi_write+0x178>)
   22eb4:	4798      	blx	r3
   22eb6:	4b3c      	ldr	r3, [pc, #240]	; (22fa8 <nm_spi_write+0x18c>)
   22eb8:	0018      	movs	r0, r3
   22eba:	4b36      	ldr	r3, [pc, #216]	; (22f94 <nm_spi_write+0x178>)
   22ebc:	4798      	blx	r3
   22ebe:	4b37      	ldr	r3, [pc, #220]	; (22f9c <nm_spi_write+0x180>)
   22ec0:	0018      	movs	r0, r3
   22ec2:	4b34      	ldr	r3, [pc, #208]	; (22f94 <nm_spi_write+0x178>)
   22ec4:	4798      	blx	r3
		goto _FAIL_;
   22ec6:	e01e      	b.n	22f06 <nm_spi_write+0xea>
	}
	/**
		Data RESP
	**/
	result = spi_data_rsp(cmd);
   22ec8:	2317      	movs	r3, #23
   22eca:	18fc      	adds	r4, r7, r3
   22ecc:	2315      	movs	r3, #21
   22ece:	18fb      	adds	r3, r7, r3
   22ed0:	781b      	ldrb	r3, [r3, #0]
   22ed2:	0018      	movs	r0, r3
   22ed4:	4b35      	ldr	r3, [pc, #212]	; (22fac <nm_spi_write+0x190>)
   22ed6:	4798      	blx	r3
   22ed8:	0003      	movs	r3, r0
   22eda:	7023      	strb	r3, [r4, #0]
	if (result != N_OK) {
   22edc:	2317      	movs	r3, #23
   22ede:	18fb      	adds	r3, r7, r3
   22ee0:	781b      	ldrb	r3, [r3, #0]
   22ee2:	b25b      	sxtb	r3, r3
   22ee4:	2b01      	cmp	r3, #1
   22ee6:	d00e      	beq.n	22f06 <nm_spi_write+0xea>
		M2M_ERR("[nmi spi]: Failed block data write...\n");
   22ee8:	4a31      	ldr	r2, [pc, #196]	; (22fb0 <nm_spi_write+0x194>)
   22eea:	4928      	ldr	r1, [pc, #160]	; (22f8c <nm_spi_write+0x170>)
   22eec:	4b28      	ldr	r3, [pc, #160]	; (22f90 <nm_spi_write+0x174>)
   22eee:	0018      	movs	r0, r3
   22ef0:	4b28      	ldr	r3, [pc, #160]	; (22f94 <nm_spi_write+0x178>)
   22ef2:	4798      	blx	r3
   22ef4:	4b2c      	ldr	r3, [pc, #176]	; (22fa8 <nm_spi_write+0x18c>)
   22ef6:	0018      	movs	r0, r3
   22ef8:	4b26      	ldr	r3, [pc, #152]	; (22f94 <nm_spi_write+0x178>)
   22efa:	4798      	blx	r3
   22efc:	4b27      	ldr	r3, [pc, #156]	; (22f9c <nm_spi_write+0x180>)
   22efe:	0018      	movs	r0, r3
   22f00:	4b24      	ldr	r3, [pc, #144]	; (22f94 <nm_spi_write+0x178>)
   22f02:	4798      	blx	r3
		goto _FAIL_;
   22f04:	46c0      	nop			; (mov r8, r8)
	}
	
_FAIL_:
	if(result != N_OK)
   22f06:	2317      	movs	r3, #23
   22f08:	18fb      	adds	r3, r7, r3
   22f0a:	781b      	ldrb	r3, [r3, #0]
   22f0c:	b25b      	sxtb	r3, r3
   22f0e:	2b01      	cmp	r3, #1
   22f10:	d030      	beq.n	22f74 <nm_spi_write+0x158>
	{
		nm_bsp_sleep(1);
   22f12:	2001      	movs	r0, #1
   22f14:	4b27      	ldr	r3, [pc, #156]	; (22fb4 <nm_spi_write+0x198>)
   22f16:	4798      	blx	r3
		spi_cmd(CMD_RESET, 0, 0, 0, 0);
   22f18:	2300      	movs	r3, #0
   22f1a:	9300      	str	r3, [sp, #0]
   22f1c:	2300      	movs	r3, #0
   22f1e:	2200      	movs	r2, #0
   22f20:	2100      	movs	r1, #0
   22f22:	20cf      	movs	r0, #207	; 0xcf
   22f24:	4c24      	ldr	r4, [pc, #144]	; (22fb8 <nm_spi_write+0x19c>)
   22f26:	47a0      	blx	r4
		spi_cmd_rsp(CMD_RESET);
   22f28:	20cf      	movs	r0, #207	; 0xcf
   22f2a:	4b24      	ldr	r3, [pc, #144]	; (22fbc <nm_spi_write+0x1a0>)
   22f2c:	4798      	blx	r3
		M2M_ERR("Reset and retry %d %lx %d\n",retry,addr,size);
   22f2e:	4a24      	ldr	r2, [pc, #144]	; (22fc0 <nm_spi_write+0x1a4>)
   22f30:	4916      	ldr	r1, [pc, #88]	; (22f8c <nm_spi_write+0x170>)
   22f32:	4b17      	ldr	r3, [pc, #92]	; (22f90 <nm_spi_write+0x174>)
   22f34:	0018      	movs	r0, r3
   22f36:	4b17      	ldr	r3, [pc, #92]	; (22f94 <nm_spi_write+0x178>)
   22f38:	4798      	blx	r3
   22f3a:	2316      	movs	r3, #22
   22f3c:	18fb      	adds	r3, r7, r3
   22f3e:	7819      	ldrb	r1, [r3, #0]
   22f40:	1dbb      	adds	r3, r7, #6
   22f42:	881b      	ldrh	r3, [r3, #0]
   22f44:	68fa      	ldr	r2, [r7, #12]
   22f46:	481f      	ldr	r0, [pc, #124]	; (22fc4 <nm_spi_write+0x1a8>)
   22f48:	4c12      	ldr	r4, [pc, #72]	; (22f94 <nm_spi_write+0x178>)
   22f4a:	47a0      	blx	r4
   22f4c:	4b13      	ldr	r3, [pc, #76]	; (22f9c <nm_spi_write+0x180>)
   22f4e:	0018      	movs	r0, r3
   22f50:	4b10      	ldr	r3, [pc, #64]	; (22f94 <nm_spi_write+0x178>)
   22f52:	4798      	blx	r3
		nm_bsp_sleep(1);
   22f54:	2001      	movs	r0, #1
   22f56:	4b17      	ldr	r3, [pc, #92]	; (22fb4 <nm_spi_write+0x198>)
   22f58:	4798      	blx	r3
		retry--;
   22f5a:	2316      	movs	r3, #22
   22f5c:	18fb      	adds	r3, r7, r3
   22f5e:	781a      	ldrb	r2, [r3, #0]
   22f60:	2316      	movs	r3, #22
   22f62:	18fb      	adds	r3, r7, r3
   22f64:	3a01      	subs	r2, #1
   22f66:	701a      	strb	r2, [r3, #0]
		if(retry) goto _RETRY_;
   22f68:	2316      	movs	r3, #22
   22f6a:	18fb      	adds	r3, r7, r3
   22f6c:	781b      	ldrb	r3, [r3, #0]
   22f6e:	2b00      	cmp	r3, #0
   22f70:	d000      	beq.n	22f74 <nm_spi_write+0x158>
   22f72:	e762      	b.n	22e3a <nm_spi_write+0x1e>
	}


	return result;
   22f74:	2317      	movs	r3, #23
   22f76:	18fb      	adds	r3, r7, r3
   22f78:	781b      	ldrb	r3, [r3, #0]
   22f7a:	b25b      	sxtb	r3, r3
}
   22f7c:	0018      	movs	r0, r3
   22f7e:	46bd      	mov	sp, r7
   22f80:	b007      	add	sp, #28
   22f82:	bd90      	pop	{r4, r7, pc}
   22f84:	00022205 	.word	0x00022205
   22f88:	000003cf 	.word	0x000003cf
   22f8c:	00037804 	.word	0x00037804
   22f90:	000371bc 	.word	0x000371bc
   22f94:	0001c65d 	.word	0x0001c65d
   22f98:	00037570 	.word	0x00037570
   22f9c:	000371fc 	.word	0x000371fc
   22fa0:	00022af9 	.word	0x00022af9
   22fa4:	000003d9 	.word	0x000003d9
   22fa8:	000375a0 	.word	0x000375a0
   22fac:	00021fc9 	.word	0x00021fc9
   22fb0:	000003e1 	.word	0x000003e1
   22fb4:	0001eb45 	.word	0x0001eb45
   22fb8:	00021c89 	.word	0x00021c89
   22fbc:	000220c9 	.word	0x000220c9
   22fc0:	000003eb 	.word	0x000003eb
   22fc4:	000375c8 	.word	0x000375c8

00022fc8 <spi_read_reg>:

static sint8 spi_read_reg(uint32 addr, uint32 *u32data)
{
   22fc8:	b590      	push	{r4, r7, lr}
   22fca:	b087      	sub	sp, #28
   22fcc:	af02      	add	r7, sp, #8
   22fce:	6078      	str	r0, [r7, #4]
   22fd0:	6039      	str	r1, [r7, #0]
	uint8 retry = SPI_RETRY_COUNT;
   22fd2:	230f      	movs	r3, #15
   22fd4:	18fb      	adds	r3, r7, r3
   22fd6:	220a      	movs	r2, #10
   22fd8:	701a      	strb	r2, [r3, #0]
	sint8 result = N_OK;
   22fda:	230c      	movs	r3, #12
   22fdc:	18fb      	adds	r3, r7, r3
   22fde:	2201      	movs	r2, #1
   22fe0:	701a      	strb	r2, [r3, #0]
	uint8 cmd = CMD_SINGLE_READ;
   22fe2:	230e      	movs	r3, #14
   22fe4:	18fb      	adds	r3, r7, r3
   22fe6:	22ca      	movs	r2, #202	; 0xca
   22fe8:	701a      	strb	r2, [r3, #0]
	uint8 tmp[4];
	uint8 clockless = 0;
   22fea:	230d      	movs	r3, #13
   22fec:	18fb      	adds	r3, r7, r3
   22fee:	2200      	movs	r2, #0
   22ff0:	701a      	strb	r2, [r3, #0]

_RETRY_:

	if (addr <= 0xff)
   22ff2:	687b      	ldr	r3, [r7, #4]
   22ff4:	2bff      	cmp	r3, #255	; 0xff
   22ff6:	d808      	bhi.n	2300a <spi_read_reg+0x42>
	{
		/**
		NMC1000 clockless registers.
		**/
		cmd = CMD_INTERNAL_READ;
   22ff8:	230e      	movs	r3, #14
   22ffa:	18fb      	adds	r3, r7, r3
   22ffc:	22c4      	movs	r2, #196	; 0xc4
   22ffe:	701a      	strb	r2, [r3, #0]
		clockless = 1;
   23000:	230d      	movs	r3, #13
   23002:	18fb      	adds	r3, r7, r3
   23004:	2201      	movs	r2, #1
   23006:	701a      	strb	r2, [r3, #0]
   23008:	e007      	b.n	2301a <spi_read_reg+0x52>
	}
	else
	{
		cmd = CMD_SINGLE_READ;
   2300a:	230e      	movs	r3, #14
   2300c:	18fb      	adds	r3, r7, r3
   2300e:	22ca      	movs	r2, #202	; 0xca
   23010:	701a      	strb	r2, [r3, #0]
		clockless = 0;
   23012:	230d      	movs	r3, #13
   23014:	18fb      	adds	r3, r7, r3
   23016:	2200      	movs	r2, #0
   23018:	701a      	strb	r2, [r3, #0]
	if (result != N_OK) {
		M2M_ERR("[nmi spi]: Failed data read...\n");
		goto _FAIL_;
	}
#else
	result = spi_cmd_complete(cmd, addr, (uint8*)&tmp[0], 4, clockless);
   2301a:	2308      	movs	r3, #8
   2301c:	18fa      	adds	r2, r7, r3
   2301e:	6879      	ldr	r1, [r7, #4]
   23020:	230e      	movs	r3, #14
   23022:	18fb      	adds	r3, r7, r3
   23024:	7818      	ldrb	r0, [r3, #0]
   23026:	230d      	movs	r3, #13
   23028:	18fb      	adds	r3, r7, r3
   2302a:	781b      	ldrb	r3, [r3, #0]
   2302c:	9300      	str	r3, [sp, #0]
   2302e:	2304      	movs	r3, #4
   23030:	4c37      	ldr	r4, [pc, #220]	; (23110 <spi_read_reg+0x148>)
   23032:	47a0      	blx	r4
   23034:	0002      	movs	r2, r0
   23036:	230c      	movs	r3, #12
   23038:	18fb      	adds	r3, r7, r3
   2303a:	701a      	strb	r2, [r3, #0]
	if (result != N_OK) {
   2303c:	230c      	movs	r3, #12
   2303e:	18fb      	adds	r3, r7, r3
   23040:	781b      	ldrb	r3, [r3, #0]
   23042:	b25b      	sxtb	r3, r3
   23044:	2b01      	cmp	r3, #1
   23046:	d010      	beq.n	2306a <spi_read_reg+0xa2>
		M2M_ERR( "[nmi spi]: Failed cmd, read reg (%08x)...\n", addr);
   23048:	4a32      	ldr	r2, [pc, #200]	; (23114 <spi_read_reg+0x14c>)
   2304a:	4933      	ldr	r1, [pc, #204]	; (23118 <spi_read_reg+0x150>)
   2304c:	4b33      	ldr	r3, [pc, #204]	; (2311c <spi_read_reg+0x154>)
   2304e:	0018      	movs	r0, r3
   23050:	4b33      	ldr	r3, [pc, #204]	; (23120 <spi_read_reg+0x158>)
   23052:	4798      	blx	r3
   23054:	687a      	ldr	r2, [r7, #4]
   23056:	4b33      	ldr	r3, [pc, #204]	; (23124 <spi_read_reg+0x15c>)
   23058:	0011      	movs	r1, r2
   2305a:	0018      	movs	r0, r3
   2305c:	4b30      	ldr	r3, [pc, #192]	; (23120 <spi_read_reg+0x158>)
   2305e:	4798      	blx	r3
   23060:	4b31      	ldr	r3, [pc, #196]	; (23128 <spi_read_reg+0x160>)
   23062:	0018      	movs	r0, r3
   23064:	4b2e      	ldr	r3, [pc, #184]	; (23120 <spi_read_reg+0x158>)
   23066:	4798      	blx	r3
		goto _FAIL_;
   23068:	e014      	b.n	23094 <spi_read_reg+0xcc>
	}

#endif

	*u32data = tmp[0] |
   2306a:	2308      	movs	r3, #8
   2306c:	18fb      	adds	r3, r7, r3
   2306e:	781b      	ldrb	r3, [r3, #0]
   23070:	001a      	movs	r2, r3
		((uint32)tmp[1] << 8) |
   23072:	2308      	movs	r3, #8
   23074:	18fb      	adds	r3, r7, r3
   23076:	785b      	ldrb	r3, [r3, #1]
   23078:	021b      	lsls	r3, r3, #8
	*u32data = tmp[0] |
   2307a:	431a      	orrs	r2, r3
		((uint32)tmp[2] << 16) |
   2307c:	2308      	movs	r3, #8
   2307e:	18fb      	adds	r3, r7, r3
   23080:	789b      	ldrb	r3, [r3, #2]
   23082:	041b      	lsls	r3, r3, #16
		((uint32)tmp[1] << 8) |
   23084:	431a      	orrs	r2, r3
		((uint32)tmp[3] << 24);
   23086:	2308      	movs	r3, #8
   23088:	18fb      	adds	r3, r7, r3
   2308a:	78db      	ldrb	r3, [r3, #3]
   2308c:	061b      	lsls	r3, r3, #24
		((uint32)tmp[2] << 16) |
   2308e:	431a      	orrs	r2, r3
	*u32data = tmp[0] |
   23090:	683b      	ldr	r3, [r7, #0]
   23092:	601a      	str	r2, [r3, #0]
		
_FAIL_:
	if(result != N_OK)
   23094:	230c      	movs	r3, #12
   23096:	18fb      	adds	r3, r7, r3
   23098:	781b      	ldrb	r3, [r3, #0]
   2309a:	b25b      	sxtb	r3, r3
   2309c:	2b01      	cmp	r3, #1
   2309e:	d02f      	beq.n	23100 <spi_read_reg+0x138>
	{
		
		nm_bsp_sleep(1);
   230a0:	2001      	movs	r0, #1
   230a2:	4b22      	ldr	r3, [pc, #136]	; (2312c <spi_read_reg+0x164>)
   230a4:	4798      	blx	r3
		spi_cmd(CMD_RESET, 0, 0, 0, 0);
   230a6:	2300      	movs	r3, #0
   230a8:	9300      	str	r3, [sp, #0]
   230aa:	2300      	movs	r3, #0
   230ac:	2200      	movs	r2, #0
   230ae:	2100      	movs	r1, #0
   230b0:	20cf      	movs	r0, #207	; 0xcf
   230b2:	4c1f      	ldr	r4, [pc, #124]	; (23130 <spi_read_reg+0x168>)
   230b4:	47a0      	blx	r4
		spi_cmd_rsp(CMD_RESET);
   230b6:	20cf      	movs	r0, #207	; 0xcf
   230b8:	4b1e      	ldr	r3, [pc, #120]	; (23134 <spi_read_reg+0x16c>)
   230ba:	4798      	blx	r3
		M2M_ERR("Reset and retry %d %lx\n",retry,addr);
   230bc:	4a1e      	ldr	r2, [pc, #120]	; (23138 <spi_read_reg+0x170>)
   230be:	4916      	ldr	r1, [pc, #88]	; (23118 <spi_read_reg+0x150>)
   230c0:	4b16      	ldr	r3, [pc, #88]	; (2311c <spi_read_reg+0x154>)
   230c2:	0018      	movs	r0, r3
   230c4:	4b16      	ldr	r3, [pc, #88]	; (23120 <spi_read_reg+0x158>)
   230c6:	4798      	blx	r3
   230c8:	230f      	movs	r3, #15
   230ca:	18fb      	adds	r3, r7, r3
   230cc:	7819      	ldrb	r1, [r3, #0]
   230ce:	687a      	ldr	r2, [r7, #4]
   230d0:	4b1a      	ldr	r3, [pc, #104]	; (2313c <spi_read_reg+0x174>)
   230d2:	0018      	movs	r0, r3
   230d4:	4b12      	ldr	r3, [pc, #72]	; (23120 <spi_read_reg+0x158>)
   230d6:	4798      	blx	r3
   230d8:	4b13      	ldr	r3, [pc, #76]	; (23128 <spi_read_reg+0x160>)
   230da:	0018      	movs	r0, r3
   230dc:	4b10      	ldr	r3, [pc, #64]	; (23120 <spi_read_reg+0x158>)
   230de:	4798      	blx	r3
		nm_bsp_sleep(1);
   230e0:	2001      	movs	r0, #1
   230e2:	4b12      	ldr	r3, [pc, #72]	; (2312c <spi_read_reg+0x164>)
   230e4:	4798      	blx	r3
		retry--;
   230e6:	230f      	movs	r3, #15
   230e8:	18fb      	adds	r3, r7, r3
   230ea:	781a      	ldrb	r2, [r3, #0]
   230ec:	230f      	movs	r3, #15
   230ee:	18fb      	adds	r3, r7, r3
   230f0:	3a01      	subs	r2, #1
   230f2:	701a      	strb	r2, [r3, #0]
		if(retry) goto _RETRY_;
   230f4:	230f      	movs	r3, #15
   230f6:	18fb      	adds	r3, r7, r3
   230f8:	781b      	ldrb	r3, [r3, #0]
   230fa:	2b00      	cmp	r3, #0
   230fc:	d000      	beq.n	23100 <spi_read_reg+0x138>
   230fe:	e778      	b.n	22ff2 <spi_read_reg+0x2a>
	}
		
	return result;
   23100:	230c      	movs	r3, #12
   23102:	18fb      	adds	r3, r7, r3
   23104:	781b      	ldrb	r3, [r3, #0]
   23106:	b25b      	sxtb	r3, r3
}
   23108:	0018      	movs	r0, r3
   2310a:	46bd      	mov	sp, r7
   2310c:	b005      	add	sp, #20
   2310e:	bd90      	pop	{r4, r7, pc}
   23110:	00022205 	.word	0x00022205
   23114:	00000423 	.word	0x00000423
   23118:	00037814 	.word	0x00037814
   2311c:	000371bc 	.word	0x000371bc
   23120:	0001c65d 	.word	0x0001c65d
   23124:	000375e4 	.word	0x000375e4
   23128:	000371fc 	.word	0x000371fc
   2312c:	0001eb45 	.word	0x0001eb45
   23130:	00021c89 	.word	0x00021c89
   23134:	000220c9 	.word	0x000220c9
   23138:	00000435 	.word	0x00000435
   2313c:	00037610 	.word	0x00037610

00023140 <nm_spi_read>:

static sint8 nm_spi_read(uint32 addr, uint8 *buf, uint16 size)
{
   23140:	b590      	push	{r4, r7, lr}
   23142:	b089      	sub	sp, #36	; 0x24
   23144:	af02      	add	r7, sp, #8
   23146:	60f8      	str	r0, [r7, #12]
   23148:	60b9      	str	r1, [r7, #8]
   2314a:	1dbb      	adds	r3, r7, #6
   2314c:	801a      	strh	r2, [r3, #0]
	uint8 cmd = CMD_DMA_EXT_READ;
   2314e:	2316      	movs	r3, #22
   23150:	18fb      	adds	r3, r7, r3
   23152:	22c8      	movs	r2, #200	; 0xc8
   23154:	701a      	strb	r2, [r3, #0]
	sint8 result;
	uint8 retry = SPI_RETRY_COUNT;
   23156:	2317      	movs	r3, #23
   23158:	18fb      	adds	r3, r7, r3
   2315a:	220a      	movs	r2, #10
   2315c:	701a      	strb	r2, [r3, #0]
	if (result != N_OK) {
		M2M_ERR("[nmi spi]: Failed block data read...\n");
		goto _FAIL_;
	}
#else
	result = spi_cmd_complete(cmd, addr, buf, size, 0);
   2315e:	1dbb      	adds	r3, r7, #6
   23160:	881c      	ldrh	r4, [r3, #0]
   23162:	68ba      	ldr	r2, [r7, #8]
   23164:	68f9      	ldr	r1, [r7, #12]
   23166:	2316      	movs	r3, #22
   23168:	18fb      	adds	r3, r7, r3
   2316a:	7818      	ldrb	r0, [r3, #0]
   2316c:	2300      	movs	r3, #0
   2316e:	9300      	str	r3, [sp, #0]
   23170:	0023      	movs	r3, r4
   23172:	4c2e      	ldr	r4, [pc, #184]	; (2322c <nm_spi_read+0xec>)
   23174:	47a0      	blx	r4
   23176:	0002      	movs	r2, r0
   23178:	2315      	movs	r3, #21
   2317a:	18fb      	adds	r3, r7, r3
   2317c:	701a      	strb	r2, [r3, #0]
	if (result != N_OK) {
   2317e:	2315      	movs	r3, #21
   23180:	18fb      	adds	r3, r7, r3
   23182:	781b      	ldrb	r3, [r3, #0]
   23184:	b25b      	sxtb	r3, r3
   23186:	2b01      	cmp	r3, #1
   23188:	d010      	beq.n	231ac <nm_spi_read+0x6c>
		M2M_ERR("[nmi spi]: Failed cmd, read block (%08x)...\n", addr);
   2318a:	4a29      	ldr	r2, [pc, #164]	; (23230 <nm_spi_read+0xf0>)
   2318c:	4929      	ldr	r1, [pc, #164]	; (23234 <nm_spi_read+0xf4>)
   2318e:	4b2a      	ldr	r3, [pc, #168]	; (23238 <nm_spi_read+0xf8>)
   23190:	0018      	movs	r0, r3
   23192:	4b2a      	ldr	r3, [pc, #168]	; (2323c <nm_spi_read+0xfc>)
   23194:	4798      	blx	r3
   23196:	68fa      	ldr	r2, [r7, #12]
   23198:	4b29      	ldr	r3, [pc, #164]	; (23240 <nm_spi_read+0x100>)
   2319a:	0011      	movs	r1, r2
   2319c:	0018      	movs	r0, r3
   2319e:	4b27      	ldr	r3, [pc, #156]	; (2323c <nm_spi_read+0xfc>)
   231a0:	4798      	blx	r3
   231a2:	4b28      	ldr	r3, [pc, #160]	; (23244 <nm_spi_read+0x104>)
   231a4:	0018      	movs	r0, r3
   231a6:	4b25      	ldr	r3, [pc, #148]	; (2323c <nm_spi_read+0xfc>)
   231a8:	4798      	blx	r3
		goto _FAIL_;
   231aa:	46c0      	nop			; (mov r8, r8)
	}
#endif

_FAIL_:
	if(result != N_OK)
   231ac:	2315      	movs	r3, #21
   231ae:	18fb      	adds	r3, r7, r3
   231b0:	781b      	ldrb	r3, [r3, #0]
   231b2:	b25b      	sxtb	r3, r3
   231b4:	2b01      	cmp	r3, #1
   231b6:	d030      	beq.n	2321a <nm_spi_read+0xda>
	{
		nm_bsp_sleep(1);
   231b8:	2001      	movs	r0, #1
   231ba:	4b23      	ldr	r3, [pc, #140]	; (23248 <nm_spi_read+0x108>)
   231bc:	4798      	blx	r3
		spi_cmd(CMD_RESET, 0, 0, 0, 0);
   231be:	2300      	movs	r3, #0
   231c0:	9300      	str	r3, [sp, #0]
   231c2:	2300      	movs	r3, #0
   231c4:	2200      	movs	r2, #0
   231c6:	2100      	movs	r1, #0
   231c8:	20cf      	movs	r0, #207	; 0xcf
   231ca:	4c20      	ldr	r4, [pc, #128]	; (2324c <nm_spi_read+0x10c>)
   231cc:	47a0      	blx	r4
		spi_cmd_rsp(CMD_RESET);
   231ce:	20cf      	movs	r0, #207	; 0xcf
   231d0:	4b1f      	ldr	r3, [pc, #124]	; (23250 <nm_spi_read+0x110>)
   231d2:	4798      	blx	r3
		M2M_ERR("Reset and retry %d %lx %d\n",retry,addr,size);
   231d4:	4a1f      	ldr	r2, [pc, #124]	; (23254 <nm_spi_read+0x114>)
   231d6:	4917      	ldr	r1, [pc, #92]	; (23234 <nm_spi_read+0xf4>)
   231d8:	4b17      	ldr	r3, [pc, #92]	; (23238 <nm_spi_read+0xf8>)
   231da:	0018      	movs	r0, r3
   231dc:	4b17      	ldr	r3, [pc, #92]	; (2323c <nm_spi_read+0xfc>)
   231de:	4798      	blx	r3
   231e0:	2317      	movs	r3, #23
   231e2:	18fb      	adds	r3, r7, r3
   231e4:	7819      	ldrb	r1, [r3, #0]
   231e6:	1dbb      	adds	r3, r7, #6
   231e8:	881b      	ldrh	r3, [r3, #0]
   231ea:	68fa      	ldr	r2, [r7, #12]
   231ec:	481a      	ldr	r0, [pc, #104]	; (23258 <nm_spi_read+0x118>)
   231ee:	4c13      	ldr	r4, [pc, #76]	; (2323c <nm_spi_read+0xfc>)
   231f0:	47a0      	blx	r4
   231f2:	4b14      	ldr	r3, [pc, #80]	; (23244 <nm_spi_read+0x104>)
   231f4:	0018      	movs	r0, r3
   231f6:	4b11      	ldr	r3, [pc, #68]	; (2323c <nm_spi_read+0xfc>)
   231f8:	4798      	blx	r3
		nm_bsp_sleep(1);
   231fa:	2001      	movs	r0, #1
   231fc:	4b12      	ldr	r3, [pc, #72]	; (23248 <nm_spi_read+0x108>)
   231fe:	4798      	blx	r3
		retry--;
   23200:	2317      	movs	r3, #23
   23202:	18fb      	adds	r3, r7, r3
   23204:	781a      	ldrb	r2, [r3, #0]
   23206:	2317      	movs	r3, #23
   23208:	18fb      	adds	r3, r7, r3
   2320a:	3a01      	subs	r2, #1
   2320c:	701a      	strb	r2, [r3, #0]
		if(retry) goto _RETRY_;
   2320e:	2317      	movs	r3, #23
   23210:	18fb      	adds	r3, r7, r3
   23212:	781b      	ldrb	r3, [r3, #0]
   23214:	2b00      	cmp	r3, #0
   23216:	d000      	beq.n	2321a <nm_spi_read+0xda>
   23218:	e7a1      	b.n	2315e <nm_spi_read+0x1e>
	}

	return result;
   2321a:	2315      	movs	r3, #21
   2321c:	18fb      	adds	r3, r7, r3
   2321e:	781b      	ldrb	r3, [r3, #0]
   23220:	b25b      	sxtb	r3, r3
}
   23222:	0018      	movs	r0, r3
   23224:	46bd      	mov	sp, r7
   23226:	b007      	add	sp, #28
   23228:	bd90      	pop	{r4, r7, pc}
   2322a:	46c0      	nop			; (mov r8, r8)
   2322c:	00022205 	.word	0x00022205
   23230:	00000472 	.word	0x00000472
   23234:	00037824 	.word	0x00037824
   23238:	000371bc 	.word	0x000371bc
   2323c:	0001c65d 	.word	0x0001c65d
   23240:	00037628 	.word	0x00037628
   23244:	000371fc 	.word	0x000371fc
   23248:	0001eb45 	.word	0x0001eb45
   2324c:	00021c89 	.word	0x00021c89
   23250:	000220c9 	.word	0x000220c9
   23254:	0000047d 	.word	0x0000047d
   23258:	000375c8 	.word	0x000375c8

0002325c <spi_init_pkt_sz>:
	Bus interfaces

********************************************/

static void spi_init_pkt_sz(void)
{
   2325c:	b580      	push	{r7, lr}
   2325e:	b082      	sub	sp, #8
   23260:	af00      	add	r7, sp, #0
	uint32 val32;

	/* Make sure SPI max. packet size fits the defined DATA_PKT_SZ.  */
	val32 = nm_spi_read_reg(SPI_BASE+0x24);
   23262:	4b0c      	ldr	r3, [pc, #48]	; (23294 <spi_init_pkt_sz+0x38>)
   23264:	0018      	movs	r0, r3
   23266:	4b0c      	ldr	r3, [pc, #48]	; (23298 <spi_init_pkt_sz+0x3c>)
   23268:	4798      	blx	r3
   2326a:	0003      	movs	r3, r0
   2326c:	607b      	str	r3, [r7, #4]
	val32 &= ~(0x7 << 4);
   2326e:	687b      	ldr	r3, [r7, #4]
   23270:	2270      	movs	r2, #112	; 0x70
   23272:	4393      	bics	r3, r2
   23274:	607b      	str	r3, [r7, #4]
	case 256:  val32 |= (0 << 4); break;
	case 512:  val32 |= (1 << 4); break;
	case 1024: val32 |= (2 << 4); break;
	case 2048: val32 |= (3 << 4); break;
	case 4096: val32 |= (4 << 4); break;
	case 8192: val32 |= (5 << 4); break;
   23276:	687b      	ldr	r3, [r7, #4]
   23278:	2250      	movs	r2, #80	; 0x50
   2327a:	4313      	orrs	r3, r2
   2327c:	607b      	str	r3, [r7, #4]
   2327e:	46c0      	nop			; (mov r8, r8)

	}
	nm_spi_write_reg(SPI_BASE+0x24, val32);
   23280:	687b      	ldr	r3, [r7, #4]
   23282:	4a04      	ldr	r2, [pc, #16]	; (23294 <spi_init_pkt_sz+0x38>)
   23284:	0019      	movs	r1, r3
   23286:	0010      	movs	r0, r2
   23288:	4b04      	ldr	r3, [pc, #16]	; (2329c <spi_init_pkt_sz+0x40>)
   2328a:	4798      	blx	r3
}
   2328c:	46c0      	nop			; (mov r8, r8)
   2328e:	46bd      	mov	sp, r7
   23290:	b002      	add	sp, #8
   23292:	bd80      	pop	{r7, pc}
   23294:	0000e824 	.word	0x0000e824
   23298:	00023435 	.word	0x00023435
   2329c:	000234a9 	.word	0x000234a9

000232a0 <nm_spi_reset>:

sint8 nm_spi_reset(void)
{
   232a0:	b590      	push	{r4, r7, lr}
   232a2:	b083      	sub	sp, #12
   232a4:	af02      	add	r7, sp, #8
	spi_cmd(CMD_RESET, 0, 0, 0, 0);
   232a6:	2300      	movs	r3, #0
   232a8:	9300      	str	r3, [sp, #0]
   232aa:	2300      	movs	r3, #0
   232ac:	2200      	movs	r2, #0
   232ae:	2100      	movs	r1, #0
   232b0:	20cf      	movs	r0, #207	; 0xcf
   232b2:	4c05      	ldr	r4, [pc, #20]	; (232c8 <nm_spi_reset+0x28>)
   232b4:	47a0      	blx	r4
	spi_cmd_rsp(CMD_RESET);
   232b6:	20cf      	movs	r0, #207	; 0xcf
   232b8:	4b04      	ldr	r3, [pc, #16]	; (232cc <nm_spi_reset+0x2c>)
   232ba:	4798      	blx	r3
	return M2M_SUCCESS;
   232bc:	2300      	movs	r3, #0
}
   232be:	0018      	movs	r0, r3
   232c0:	46bd      	mov	sp, r7
   232c2:	b001      	add	sp, #4
   232c4:	bd90      	pop	{r4, r7, pc}
   232c6:	46c0      	nop			; (mov r8, r8)
   232c8:	00021c89 	.word	0x00021c89
   232cc:	000220c9 	.word	0x000220c9

000232d0 <nm_spi_init>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_spi_init(void)
{
   232d0:	b580      	push	{r7, lr}
   232d2:	b082      	sub	sp, #8
   232d4:	af00      	add	r7, sp, #0
	uint32 chipid;
	uint32 reg = 0;
   232d6:	2300      	movs	r3, #0
   232d8:	603b      	str	r3, [r7, #0]
	

	/**
		configure protocol
	**/
	gu8Crc_off = 0;
   232da:	4b40      	ldr	r3, [pc, #256]	; (233dc <nm_spi_init+0x10c>)
   232dc:	2200      	movs	r2, #0
   232de:	701a      	strb	r2, [r3, #0]

	// TODO: We can remove the CRC trials if there is a definite way to reset
	// the SPI to it's initial value.
	if (!spi_read_reg(NMI_SPI_PROTOCOL_CONFIG, &reg)) {
   232e0:	003b      	movs	r3, r7
   232e2:	4a3f      	ldr	r2, [pc, #252]	; (233e0 <nm_spi_init+0x110>)
   232e4:	0019      	movs	r1, r3
   232e6:	0010      	movs	r0, r2
   232e8:	4b3e      	ldr	r3, [pc, #248]	; (233e4 <nm_spi_init+0x114>)
   232ea:	4798      	blx	r3
   232ec:	1e03      	subs	r3, r0, #0
   232ee:	d129      	bne.n	23344 <nm_spi_init+0x74>
		/* Read failed. Try with CRC off. This might happen when module
		is removed but chip isn't reset*/
		gu8Crc_off = 1;
   232f0:	4b3a      	ldr	r3, [pc, #232]	; (233dc <nm_spi_init+0x10c>)
   232f2:	2201      	movs	r2, #1
   232f4:	701a      	strb	r2, [r3, #0]
		M2M_ERR("[nmi spi]: Failed internal read protocol with CRC on, retyring with CRC off...\n");
   232f6:	2398      	movs	r3, #152	; 0x98
   232f8:	00da      	lsls	r2, r3, #3
   232fa:	493b      	ldr	r1, [pc, #236]	; (233e8 <nm_spi_init+0x118>)
   232fc:	4b3b      	ldr	r3, [pc, #236]	; (233ec <nm_spi_init+0x11c>)
   232fe:	0018      	movs	r0, r3
   23300:	4b3b      	ldr	r3, [pc, #236]	; (233f0 <nm_spi_init+0x120>)
   23302:	4798      	blx	r3
   23304:	4b3b      	ldr	r3, [pc, #236]	; (233f4 <nm_spi_init+0x124>)
   23306:	0018      	movs	r0, r3
   23308:	4b39      	ldr	r3, [pc, #228]	; (233f0 <nm_spi_init+0x120>)
   2330a:	4798      	blx	r3
   2330c:	4b3a      	ldr	r3, [pc, #232]	; (233f8 <nm_spi_init+0x128>)
   2330e:	0018      	movs	r0, r3
   23310:	4b37      	ldr	r3, [pc, #220]	; (233f0 <nm_spi_init+0x120>)
   23312:	4798      	blx	r3
		if (!spi_read_reg(NMI_SPI_PROTOCOL_CONFIG, &reg)){
   23314:	003b      	movs	r3, r7
   23316:	4a32      	ldr	r2, [pc, #200]	; (233e0 <nm_spi_init+0x110>)
   23318:	0019      	movs	r1, r3
   2331a:	0010      	movs	r0, r2
   2331c:	4b31      	ldr	r3, [pc, #196]	; (233e4 <nm_spi_init+0x114>)
   2331e:	4798      	blx	r3
   23320:	1e03      	subs	r3, r0, #0
   23322:	d10f      	bne.n	23344 <nm_spi_init+0x74>
			// Reaad failed with both CRC on and off, something went bad
			M2M_ERR( "[nmi spi]: Failed internal read protocol...\n");
   23324:	4a35      	ldr	r2, [pc, #212]	; (233fc <nm_spi_init+0x12c>)
   23326:	4930      	ldr	r1, [pc, #192]	; (233e8 <nm_spi_init+0x118>)
   23328:	4b30      	ldr	r3, [pc, #192]	; (233ec <nm_spi_init+0x11c>)
   2332a:	0018      	movs	r0, r3
   2332c:	4b30      	ldr	r3, [pc, #192]	; (233f0 <nm_spi_init+0x120>)
   2332e:	4798      	blx	r3
   23330:	4b33      	ldr	r3, [pc, #204]	; (23400 <nm_spi_init+0x130>)
   23332:	0018      	movs	r0, r3
   23334:	4b2e      	ldr	r3, [pc, #184]	; (233f0 <nm_spi_init+0x120>)
   23336:	4798      	blx	r3
   23338:	4b2f      	ldr	r3, [pc, #188]	; (233f8 <nm_spi_init+0x128>)
   2333a:	0018      	movs	r0, r3
   2333c:	4b2c      	ldr	r3, [pc, #176]	; (233f0 <nm_spi_init+0x120>)
   2333e:	4798      	blx	r3
			return 0;
   23340:	2300      	movs	r3, #0
   23342:	e047      	b.n	233d4 <nm_spi_init+0x104>
		}
	}
	if(gu8Crc_off == 0)
   23344:	4b25      	ldr	r3, [pc, #148]	; (233dc <nm_spi_init+0x10c>)
   23346:	781b      	ldrb	r3, [r3, #0]
   23348:	2b00      	cmp	r3, #0
   2334a:	d126      	bne.n	2339a <nm_spi_init+0xca>
	{
		reg &= ~0xc;	/* disable crc checking */
   2334c:	683b      	ldr	r3, [r7, #0]
   2334e:	220c      	movs	r2, #12
   23350:	4393      	bics	r3, r2
   23352:	603b      	str	r3, [r7, #0]
		reg &= ~0x70;
   23354:	683b      	ldr	r3, [r7, #0]
   23356:	2270      	movs	r2, #112	; 0x70
   23358:	4393      	bics	r3, r2
   2335a:	603b      	str	r3, [r7, #0]
		reg |= (0x5 << 4);
   2335c:	683b      	ldr	r3, [r7, #0]
   2335e:	2250      	movs	r2, #80	; 0x50
   23360:	4313      	orrs	r3, r2
   23362:	603b      	str	r3, [r7, #0]
		if (!spi_write_reg(NMI_SPI_PROTOCOL_CONFIG, reg)) {
   23364:	683b      	ldr	r3, [r7, #0]
   23366:	4a1e      	ldr	r2, [pc, #120]	; (233e0 <nm_spi_init+0x110>)
   23368:	0019      	movs	r1, r3
   2336a:	0010      	movs	r0, r2
   2336c:	4b25      	ldr	r3, [pc, #148]	; (23404 <nm_spi_init+0x134>)
   2336e:	4798      	blx	r3
   23370:	1e03      	subs	r3, r0, #0
   23372:	d10f      	bne.n	23394 <nm_spi_init+0xc4>
			M2M_ERR( "[nmi spi]: Failed internal write protocol reg...\n");
   23374:	4a24      	ldr	r2, [pc, #144]	; (23408 <nm_spi_init+0x138>)
   23376:	491c      	ldr	r1, [pc, #112]	; (233e8 <nm_spi_init+0x118>)
   23378:	4b1c      	ldr	r3, [pc, #112]	; (233ec <nm_spi_init+0x11c>)
   2337a:	0018      	movs	r0, r3
   2337c:	4b1c      	ldr	r3, [pc, #112]	; (233f0 <nm_spi_init+0x120>)
   2337e:	4798      	blx	r3
   23380:	4b22      	ldr	r3, [pc, #136]	; (2340c <nm_spi_init+0x13c>)
   23382:	0018      	movs	r0, r3
   23384:	4b1a      	ldr	r3, [pc, #104]	; (233f0 <nm_spi_init+0x120>)
   23386:	4798      	blx	r3
   23388:	4b1b      	ldr	r3, [pc, #108]	; (233f8 <nm_spi_init+0x128>)
   2338a:	0018      	movs	r0, r3
   2338c:	4b18      	ldr	r3, [pc, #96]	; (233f0 <nm_spi_init+0x120>)
   2338e:	4798      	blx	r3
			return 0;
   23390:	2300      	movs	r3, #0
   23392:	e01f      	b.n	233d4 <nm_spi_init+0x104>
		}
		gu8Crc_off = 1;
   23394:	4b11      	ldr	r3, [pc, #68]	; (233dc <nm_spi_init+0x10c>)
   23396:	2201      	movs	r2, #1
   23398:	701a      	strb	r2, [r3, #0]
	}

	/**
		make sure can read back chip id correctly
	**/
	if (!spi_read_reg(0x1000, &chipid)) {
   2339a:	1d3a      	adds	r2, r7, #4
   2339c:	2380      	movs	r3, #128	; 0x80
   2339e:	015b      	lsls	r3, r3, #5
   233a0:	0011      	movs	r1, r2
   233a2:	0018      	movs	r0, r3
   233a4:	4b0f      	ldr	r3, [pc, #60]	; (233e4 <nm_spi_init+0x114>)
   233a6:	4798      	blx	r3
   233a8:	1e03      	subs	r3, r0, #0
   233aa:	d110      	bne.n	233ce <nm_spi_init+0xfe>
		M2M_ERR("[nmi spi]: Fail cmd read chip id...\n");
   233ac:	4a18      	ldr	r2, [pc, #96]	; (23410 <nm_spi_init+0x140>)
   233ae:	490e      	ldr	r1, [pc, #56]	; (233e8 <nm_spi_init+0x118>)
   233b0:	4b0e      	ldr	r3, [pc, #56]	; (233ec <nm_spi_init+0x11c>)
   233b2:	0018      	movs	r0, r3
   233b4:	4b0e      	ldr	r3, [pc, #56]	; (233f0 <nm_spi_init+0x120>)
   233b6:	4798      	blx	r3
   233b8:	4b16      	ldr	r3, [pc, #88]	; (23414 <nm_spi_init+0x144>)
   233ba:	0018      	movs	r0, r3
   233bc:	4b0c      	ldr	r3, [pc, #48]	; (233f0 <nm_spi_init+0x120>)
   233be:	4798      	blx	r3
   233c0:	4b0d      	ldr	r3, [pc, #52]	; (233f8 <nm_spi_init+0x128>)
   233c2:	0018      	movs	r0, r3
   233c4:	4b0a      	ldr	r3, [pc, #40]	; (233f0 <nm_spi_init+0x120>)
   233c6:	4798      	blx	r3
		return M2M_ERR_BUS_FAIL;
   233c8:	2306      	movs	r3, #6
   233ca:	425b      	negs	r3, r3
   233cc:	e002      	b.n	233d4 <nm_spi_init+0x104>
	}

	M2M_DBG("[nmi spi]: chipid (%08x)\n", (unsigned int)chipid);
	spi_init_pkt_sz();
   233ce:	4b12      	ldr	r3, [pc, #72]	; (23418 <nm_spi_init+0x148>)
   233d0:	4798      	blx	r3


	return M2M_SUCCESS;
   233d2:	2300      	movs	r3, #0
}
   233d4:	0018      	movs	r0, r3
   233d6:	46bd      	mov	sp, r7
   233d8:	b002      	add	sp, #8
   233da:	bd80      	pop	{r7, pc}
   233dc:	20003d4c 	.word	0x20003d4c
   233e0:	0000e824 	.word	0x0000e824
   233e4:	00022fc9 	.word	0x00022fc9
   233e8:	00037830 	.word	0x00037830
   233ec:	000371bc 	.word	0x000371bc
   233f0:	0001c65d 	.word	0x0001c65d
   233f4:	00037658 	.word	0x00037658
   233f8:	000371fc 	.word	0x000371fc
   233fc:	000004c3 	.word	0x000004c3
   23400:	000376a8 	.word	0x000376a8
   23404:	00022cd1 	.word	0x00022cd1
   23408:	000004cd 	.word	0x000004cd
   2340c:	000376d8 	.word	0x000376d8
   23410:	000004d7 	.word	0x000004d7
   23414:	0003770c 	.word	0x0003770c
   23418:	0002325d 	.word	0x0002325d

0002341c <nm_spi_deinit>:
*	@author	Samer Sarhan
*	@date	27 Feb 2015
*	@version	1.0
*/ 
sint8 nm_spi_deinit(void)
{
   2341c:	b580      	push	{r7, lr}
   2341e:	af00      	add	r7, sp, #0
	gu8Crc_off = 0;
   23420:	4b03      	ldr	r3, [pc, #12]	; (23430 <nm_spi_deinit+0x14>)
   23422:	2200      	movs	r2, #0
   23424:	701a      	strb	r2, [r3, #0]
	return M2M_SUCCESS;
   23426:	2300      	movs	r3, #0
}
   23428:	0018      	movs	r0, r3
   2342a:	46bd      	mov	sp, r7
   2342c:	bd80      	pop	{r7, pc}
   2342e:	46c0      	nop			; (mov r8, r8)
   23430:	20003d4c 	.word	0x20003d4c

00023434 <nm_spi_read_reg>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
uint32 nm_spi_read_reg(uint32 u32Addr)
{
   23434:	b580      	push	{r7, lr}
   23436:	b084      	sub	sp, #16
   23438:	af00      	add	r7, sp, #0
   2343a:	6078      	str	r0, [r7, #4]
	uint32 u32Val;

	spi_read_reg(u32Addr, &u32Val);
   2343c:	230c      	movs	r3, #12
   2343e:	18fa      	adds	r2, r7, r3
   23440:	687b      	ldr	r3, [r7, #4]
   23442:	0011      	movs	r1, r2
   23444:	0018      	movs	r0, r3
   23446:	4b03      	ldr	r3, [pc, #12]	; (23454 <nm_spi_read_reg+0x20>)
   23448:	4798      	blx	r3

	return u32Val;
   2344a:	68fb      	ldr	r3, [r7, #12]
}
   2344c:	0018      	movs	r0, r3
   2344e:	46bd      	mov	sp, r7
   23450:	b004      	add	sp, #16
   23452:	bd80      	pop	{r7, pc}
   23454:	00022fc9 	.word	0x00022fc9

00023458 <nm_spi_read_reg_with_ret>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_spi_read_reg_with_ret(uint32 u32Addr, uint32* pu32RetVal)
{
   23458:	b590      	push	{r4, r7, lr}
   2345a:	b085      	sub	sp, #20
   2345c:	af00      	add	r7, sp, #0
   2345e:	6078      	str	r0, [r7, #4]
   23460:	6039      	str	r1, [r7, #0]
	sint8 s8Ret;

	s8Ret = spi_read_reg(u32Addr,pu32RetVal);
   23462:	230f      	movs	r3, #15
   23464:	18fc      	adds	r4, r7, r3
   23466:	683a      	ldr	r2, [r7, #0]
   23468:	687b      	ldr	r3, [r7, #4]
   2346a:	0011      	movs	r1, r2
   2346c:	0018      	movs	r0, r3
   2346e:	4b0d      	ldr	r3, [pc, #52]	; (234a4 <nm_spi_read_reg_with_ret+0x4c>)
   23470:	4798      	blx	r3
   23472:	0003      	movs	r3, r0
   23474:	7023      	strb	r3, [r4, #0]

	if(N_OK == s8Ret) s8Ret = M2M_SUCCESS;
   23476:	230f      	movs	r3, #15
   23478:	18fb      	adds	r3, r7, r3
   2347a:	781b      	ldrb	r3, [r3, #0]
   2347c:	b25b      	sxtb	r3, r3
   2347e:	2b01      	cmp	r3, #1
   23480:	d104      	bne.n	2348c <nm_spi_read_reg_with_ret+0x34>
   23482:	230f      	movs	r3, #15
   23484:	18fb      	adds	r3, r7, r3
   23486:	2200      	movs	r2, #0
   23488:	701a      	strb	r2, [r3, #0]
   2348a:	e003      	b.n	23494 <nm_spi_read_reg_with_ret+0x3c>
	else s8Ret = M2M_ERR_BUS_FAIL;
   2348c:	230f      	movs	r3, #15
   2348e:	18fb      	adds	r3, r7, r3
   23490:	22fa      	movs	r2, #250	; 0xfa
   23492:	701a      	strb	r2, [r3, #0]

	return s8Ret;
   23494:	230f      	movs	r3, #15
   23496:	18fb      	adds	r3, r7, r3
   23498:	781b      	ldrb	r3, [r3, #0]
   2349a:	b25b      	sxtb	r3, r3
}
   2349c:	0018      	movs	r0, r3
   2349e:	46bd      	mov	sp, r7
   234a0:	b005      	add	sp, #20
   234a2:	bd90      	pop	{r4, r7, pc}
   234a4:	00022fc9 	.word	0x00022fc9

000234a8 <nm_spi_write_reg>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_spi_write_reg(uint32 u32Addr, uint32 u32Val)
{
   234a8:	b590      	push	{r4, r7, lr}
   234aa:	b085      	sub	sp, #20
   234ac:	af00      	add	r7, sp, #0
   234ae:	6078      	str	r0, [r7, #4]
   234b0:	6039      	str	r1, [r7, #0]
	sint8 s8Ret;

	s8Ret = spi_write_reg(u32Addr, u32Val);
   234b2:	230f      	movs	r3, #15
   234b4:	18fc      	adds	r4, r7, r3
   234b6:	683a      	ldr	r2, [r7, #0]
   234b8:	687b      	ldr	r3, [r7, #4]
   234ba:	0011      	movs	r1, r2
   234bc:	0018      	movs	r0, r3
   234be:	4b0d      	ldr	r3, [pc, #52]	; (234f4 <nm_spi_write_reg+0x4c>)
   234c0:	4798      	blx	r3
   234c2:	0003      	movs	r3, r0
   234c4:	7023      	strb	r3, [r4, #0]

	if(N_OK == s8Ret) s8Ret = M2M_SUCCESS;
   234c6:	230f      	movs	r3, #15
   234c8:	18fb      	adds	r3, r7, r3
   234ca:	781b      	ldrb	r3, [r3, #0]
   234cc:	b25b      	sxtb	r3, r3
   234ce:	2b01      	cmp	r3, #1
   234d0:	d104      	bne.n	234dc <nm_spi_write_reg+0x34>
   234d2:	230f      	movs	r3, #15
   234d4:	18fb      	adds	r3, r7, r3
   234d6:	2200      	movs	r2, #0
   234d8:	701a      	strb	r2, [r3, #0]
   234da:	e003      	b.n	234e4 <nm_spi_write_reg+0x3c>
	else s8Ret = M2M_ERR_BUS_FAIL;
   234dc:	230f      	movs	r3, #15
   234de:	18fb      	adds	r3, r7, r3
   234e0:	22fa      	movs	r2, #250	; 0xfa
   234e2:	701a      	strb	r2, [r3, #0]

	return s8Ret;
   234e4:	230f      	movs	r3, #15
   234e6:	18fb      	adds	r3, r7, r3
   234e8:	781b      	ldrb	r3, [r3, #0]
   234ea:	b25b      	sxtb	r3, r3
}
   234ec:	0018      	movs	r0, r3
   234ee:	46bd      	mov	sp, r7
   234f0:	b005      	add	sp, #20
   234f2:	bd90      	pop	{r4, r7, pc}
   234f4:	00022cd1 	.word	0x00022cd1

000234f8 <nm_spi_read_block>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_spi_read_block(uint32 u32Addr, uint8 *puBuf, uint16 u16Sz)
{
   234f8:	b590      	push	{r4, r7, lr}
   234fa:	b087      	sub	sp, #28
   234fc:	af00      	add	r7, sp, #0
   234fe:	60f8      	str	r0, [r7, #12]
   23500:	60b9      	str	r1, [r7, #8]
   23502:	1dbb      	adds	r3, r7, #6
   23504:	801a      	strh	r2, [r3, #0]
	sint8 s8Ret;

	s8Ret = nm_spi_read(u32Addr, puBuf, u16Sz);
   23506:	2317      	movs	r3, #23
   23508:	18fc      	adds	r4, r7, r3
   2350a:	1dbb      	adds	r3, r7, #6
   2350c:	881a      	ldrh	r2, [r3, #0]
   2350e:	68b9      	ldr	r1, [r7, #8]
   23510:	68fb      	ldr	r3, [r7, #12]
   23512:	0018      	movs	r0, r3
   23514:	4b0d      	ldr	r3, [pc, #52]	; (2354c <nm_spi_read_block+0x54>)
   23516:	4798      	blx	r3
   23518:	0003      	movs	r3, r0
   2351a:	7023      	strb	r3, [r4, #0]

	if(N_OK == s8Ret) s8Ret = M2M_SUCCESS;
   2351c:	2317      	movs	r3, #23
   2351e:	18fb      	adds	r3, r7, r3
   23520:	781b      	ldrb	r3, [r3, #0]
   23522:	b25b      	sxtb	r3, r3
   23524:	2b01      	cmp	r3, #1
   23526:	d104      	bne.n	23532 <nm_spi_read_block+0x3a>
   23528:	2317      	movs	r3, #23
   2352a:	18fb      	adds	r3, r7, r3
   2352c:	2200      	movs	r2, #0
   2352e:	701a      	strb	r2, [r3, #0]
   23530:	e003      	b.n	2353a <nm_spi_read_block+0x42>
	else s8Ret = M2M_ERR_BUS_FAIL;
   23532:	2317      	movs	r3, #23
   23534:	18fb      	adds	r3, r7, r3
   23536:	22fa      	movs	r2, #250	; 0xfa
   23538:	701a      	strb	r2, [r3, #0]

	return s8Ret;
   2353a:	2317      	movs	r3, #23
   2353c:	18fb      	adds	r3, r7, r3
   2353e:	781b      	ldrb	r3, [r3, #0]
   23540:	b25b      	sxtb	r3, r3
}
   23542:	0018      	movs	r0, r3
   23544:	46bd      	mov	sp, r7
   23546:	b007      	add	sp, #28
   23548:	bd90      	pop	{r4, r7, pc}
   2354a:	46c0      	nop			; (mov r8, r8)
   2354c:	00023141 	.word	0x00023141

00023550 <nm_spi_write_block>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_spi_write_block(uint32 u32Addr, uint8 *puBuf, uint16 u16Sz)
{
   23550:	b590      	push	{r4, r7, lr}
   23552:	b087      	sub	sp, #28
   23554:	af00      	add	r7, sp, #0
   23556:	60f8      	str	r0, [r7, #12]
   23558:	60b9      	str	r1, [r7, #8]
   2355a:	1dbb      	adds	r3, r7, #6
   2355c:	801a      	strh	r2, [r3, #0]
	sint8 s8Ret;

	s8Ret = nm_spi_write(u32Addr, puBuf, u16Sz);
   2355e:	2317      	movs	r3, #23
   23560:	18fc      	adds	r4, r7, r3
   23562:	1dbb      	adds	r3, r7, #6
   23564:	881a      	ldrh	r2, [r3, #0]
   23566:	68b9      	ldr	r1, [r7, #8]
   23568:	68fb      	ldr	r3, [r7, #12]
   2356a:	0018      	movs	r0, r3
   2356c:	4b0d      	ldr	r3, [pc, #52]	; (235a4 <nm_spi_write_block+0x54>)
   2356e:	4798      	blx	r3
   23570:	0003      	movs	r3, r0
   23572:	7023      	strb	r3, [r4, #0]

	if(N_OK == s8Ret) s8Ret = M2M_SUCCESS;
   23574:	2317      	movs	r3, #23
   23576:	18fb      	adds	r3, r7, r3
   23578:	781b      	ldrb	r3, [r3, #0]
   2357a:	b25b      	sxtb	r3, r3
   2357c:	2b01      	cmp	r3, #1
   2357e:	d104      	bne.n	2358a <nm_spi_write_block+0x3a>
   23580:	2317      	movs	r3, #23
   23582:	18fb      	adds	r3, r7, r3
   23584:	2200      	movs	r2, #0
   23586:	701a      	strb	r2, [r3, #0]
   23588:	e003      	b.n	23592 <nm_spi_write_block+0x42>
	else s8Ret = M2M_ERR_BUS_FAIL;
   2358a:	2317      	movs	r3, #23
   2358c:	18fb      	adds	r3, r7, r3
   2358e:	22fa      	movs	r2, #250	; 0xfa
   23590:	701a      	strb	r2, [r3, #0]

	return s8Ret;
   23592:	2317      	movs	r3, #23
   23594:	18fb      	adds	r3, r7, r3
   23596:	781b      	ldrb	r3, [r3, #0]
   23598:	b25b      	sxtb	r3, r3
}
   2359a:	0018      	movs	r0, r3
   2359c:	46bd      	mov	sp, r7
   2359e:	b007      	add	sp, #28
   235a0:	bd90      	pop	{r4, r7, pc}
   235a2:	46c0      	nop			; (mov r8, r8)
   235a4:	00022e1d 	.word	0x00022e1d

000235a8 <Socket_ReadSocketData>:
Date
		17 July 2012
*********************************************************************/
NMI_API void Socket_ReadSocketData(SOCKET sock, tstrSocketRecvMsg *pstrRecv,uint8 u8SocketMsg,
								  uint32 u32StartAddress,uint16 u16ReadCount)
{
   235a8:	b590      	push	{r4, r7, lr}
   235aa:	b089      	sub	sp, #36	; 0x24
   235ac:	af00      	add	r7, sp, #0
   235ae:	60b9      	str	r1, [r7, #8]
   235b0:	0011      	movs	r1, r2
   235b2:	607b      	str	r3, [r7, #4]
   235b4:	230f      	movs	r3, #15
   235b6:	18fb      	adds	r3, r7, r3
   235b8:	1c02      	adds	r2, r0, #0
   235ba:	701a      	strb	r2, [r3, #0]
   235bc:	230e      	movs	r3, #14
   235be:	18fb      	adds	r3, r7, r3
   235c0:	1c0a      	adds	r2, r1, #0
   235c2:	701a      	strb	r2, [r3, #0]
	if((u16ReadCount > 0) && (gastrSockets[sock].pu8UserBuffer != NULL) && (gastrSockets[sock].u16UserBufferSize > 0) && (gastrSockets[sock].bIsUsed == 1))
   235c4:	2330      	movs	r3, #48	; 0x30
   235c6:	18fb      	adds	r3, r7, r3
   235c8:	881b      	ldrh	r3, [r3, #0]
   235ca:	2b00      	cmp	r3, #0
   235cc:	d100      	bne.n	235d0 <Socket_ReadSocketData+0x28>
   235ce:	e0d7      	b.n	23780 <Socket_ReadSocketData+0x1d8>
   235d0:	230f      	movs	r3, #15
   235d2:	18fb      	adds	r3, r7, r3
   235d4:	2200      	movs	r2, #0
   235d6:	569a      	ldrsb	r2, [r3, r2]
   235d8:	4b6b      	ldr	r3, [pc, #428]	; (23788 <Socket_ReadSocketData+0x1e0>)
   235da:	0112      	lsls	r2, r2, #4
   235dc:	58d3      	ldr	r3, [r2, r3]
   235de:	2b00      	cmp	r3, #0
   235e0:	d100      	bne.n	235e4 <Socket_ReadSocketData+0x3c>
   235e2:	e0cd      	b.n	23780 <Socket_ReadSocketData+0x1d8>
   235e4:	230f      	movs	r3, #15
   235e6:	18fb      	adds	r3, r7, r3
   235e8:	781b      	ldrb	r3, [r3, #0]
   235ea:	b25b      	sxtb	r3, r3
   235ec:	4a66      	ldr	r2, [pc, #408]	; (23788 <Socket_ReadSocketData+0x1e0>)
   235ee:	011b      	lsls	r3, r3, #4
   235f0:	18d3      	adds	r3, r2, r3
   235f2:	3304      	adds	r3, #4
   235f4:	881b      	ldrh	r3, [r3, #0]
   235f6:	b29b      	uxth	r3, r3
   235f8:	2b00      	cmp	r3, #0
   235fa:	d100      	bne.n	235fe <Socket_ReadSocketData+0x56>
   235fc:	e0c0      	b.n	23780 <Socket_ReadSocketData+0x1d8>
   235fe:	230f      	movs	r3, #15
   23600:	18fb      	adds	r3, r7, r3
   23602:	781b      	ldrb	r3, [r3, #0]
   23604:	b25b      	sxtb	r3, r3
   23606:	4a60      	ldr	r2, [pc, #384]	; (23788 <Socket_ReadSocketData+0x1e0>)
   23608:	011b      	lsls	r3, r3, #4
   2360a:	18d3      	adds	r3, r2, r3
   2360c:	330a      	adds	r3, #10
   2360e:	781b      	ldrb	r3, [r3, #0]
   23610:	b2db      	uxtb	r3, r3
   23612:	2b01      	cmp	r3, #1
   23614:	d000      	beq.n	23618 <Socket_ReadSocketData+0x70>
   23616:	e0b3      	b.n	23780 <Socket_ReadSocketData+0x1d8>
	{
		uint32	u32Address = u32StartAddress;
   23618:	687b      	ldr	r3, [r7, #4]
   2361a:	61fb      	str	r3, [r7, #28]
		uint16	u16Read;
		sint16	s16Diff;
		uint8	u8SetRxDone;

		pstrRecv->u16RemainingSize = u16ReadCount;
   2361c:	68bb      	ldr	r3, [r7, #8]
   2361e:	2230      	movs	r2, #48	; 0x30
   23620:	18ba      	adds	r2, r7, r2
   23622:	8812      	ldrh	r2, [r2, #0]
   23624:	80da      	strh	r2, [r3, #6]
		do
		{
			u8SetRxDone = 1;
   23626:	2319      	movs	r3, #25
   23628:	18fb      	adds	r3, r7, r3
   2362a:	2201      	movs	r2, #1
   2362c:	701a      	strb	r2, [r3, #0]
			u16Read = u16ReadCount;
   2362e:	231a      	movs	r3, #26
   23630:	18fb      	adds	r3, r7, r3
   23632:	2230      	movs	r2, #48	; 0x30
   23634:	18ba      	adds	r2, r7, r2
   23636:	8812      	ldrh	r2, [r2, #0]
   23638:	801a      	strh	r2, [r3, #0]
			s16Diff	= u16Read - gastrSockets[sock].u16UserBufferSize;
   2363a:	230f      	movs	r3, #15
   2363c:	18fb      	adds	r3, r7, r3
   2363e:	781b      	ldrb	r3, [r3, #0]
   23640:	b25b      	sxtb	r3, r3
   23642:	4a51      	ldr	r2, [pc, #324]	; (23788 <Socket_ReadSocketData+0x1e0>)
   23644:	011b      	lsls	r3, r3, #4
   23646:	18d3      	adds	r3, r2, r3
   23648:	3304      	adds	r3, #4
   2364a:	881b      	ldrh	r3, [r3, #0]
   2364c:	b29b      	uxth	r3, r3
   2364e:	221a      	movs	r2, #26
   23650:	18ba      	adds	r2, r7, r2
   23652:	8812      	ldrh	r2, [r2, #0]
   23654:	1ad3      	subs	r3, r2, r3
   23656:	b29a      	uxth	r2, r3
   23658:	2316      	movs	r3, #22
   2365a:	18fb      	adds	r3, r7, r3
   2365c:	801a      	strh	r2, [r3, #0]
			if(s16Diff > 0)
   2365e:	2316      	movs	r3, #22
   23660:	18fb      	adds	r3, r7, r3
   23662:	2200      	movs	r2, #0
   23664:	5e9b      	ldrsh	r3, [r3, r2]
   23666:	2b00      	cmp	r3, #0
   23668:	dd0f      	ble.n	2368a <Socket_ReadSocketData+0xe2>
			{
				u8SetRxDone = 0;
   2366a:	2319      	movs	r3, #25
   2366c:	18fb      	adds	r3, r7, r3
   2366e:	2200      	movs	r2, #0
   23670:	701a      	strb	r2, [r3, #0]
				u16Read		= gastrSockets[sock].u16UserBufferSize;
   23672:	230f      	movs	r3, #15
   23674:	18fb      	adds	r3, r7, r3
   23676:	2200      	movs	r2, #0
   23678:	569a      	ldrsb	r2, [r3, r2]
   2367a:	231a      	movs	r3, #26
   2367c:	18fb      	adds	r3, r7, r3
   2367e:	4942      	ldr	r1, [pc, #264]	; (23788 <Socket_ReadSocketData+0x1e0>)
   23680:	0112      	lsls	r2, r2, #4
   23682:	188a      	adds	r2, r1, r2
   23684:	3204      	adds	r2, #4
   23686:	8812      	ldrh	r2, [r2, #0]
   23688:	801a      	strh	r2, [r3, #0]
			}
			
			if(hif_receive(u32Address, gastrSockets[sock].pu8UserBuffer, u16Read, u8SetRxDone) == M2M_SUCCESS)
   2368a:	230f      	movs	r3, #15
   2368c:	18fb      	adds	r3, r7, r3
   2368e:	2200      	movs	r2, #0
   23690:	569a      	ldrsb	r2, [r3, r2]
   23692:	4b3d      	ldr	r3, [pc, #244]	; (23788 <Socket_ReadSocketData+0x1e0>)
   23694:	0112      	lsls	r2, r2, #4
   23696:	58d1      	ldr	r1, [r2, r3]
   23698:	2319      	movs	r3, #25
   2369a:	18fb      	adds	r3, r7, r3
   2369c:	781c      	ldrb	r4, [r3, #0]
   2369e:	231a      	movs	r3, #26
   236a0:	18fb      	adds	r3, r7, r3
   236a2:	881a      	ldrh	r2, [r3, #0]
   236a4:	69f8      	ldr	r0, [r7, #28]
   236a6:	0023      	movs	r3, r4
   236a8:	4c38      	ldr	r4, [pc, #224]	; (2378c <Socket_ReadSocketData+0x1e4>)
   236aa:	47a0      	blx	r4
   236ac:	1e03      	subs	r3, r0, #0
   236ae:	d14f      	bne.n	23750 <Socket_ReadSocketData+0x1a8>
			{
				pstrRecv->pu8Buffer			= gastrSockets[sock].pu8UserBuffer;
   236b0:	230f      	movs	r3, #15
   236b2:	18fb      	adds	r3, r7, r3
   236b4:	2200      	movs	r2, #0
   236b6:	569a      	ldrsb	r2, [r3, r2]
   236b8:	4b33      	ldr	r3, [pc, #204]	; (23788 <Socket_ReadSocketData+0x1e0>)
   236ba:	0112      	lsls	r2, r2, #4
   236bc:	58d2      	ldr	r2, [r2, r3]
   236be:	68bb      	ldr	r3, [r7, #8]
   236c0:	601a      	str	r2, [r3, #0]
				pstrRecv->s16BufferSize		= u16Read;
   236c2:	231a      	movs	r3, #26
   236c4:	18fb      	adds	r3, r7, r3
   236c6:	2200      	movs	r2, #0
   236c8:	5e9a      	ldrsh	r2, [r3, r2]
   236ca:	68bb      	ldr	r3, [r7, #8]
   236cc:	809a      	strh	r2, [r3, #4]
				pstrRecv->u16RemainingSize	-= u16Read;
   236ce:	68bb      	ldr	r3, [r7, #8]
   236d0:	88da      	ldrh	r2, [r3, #6]
   236d2:	231a      	movs	r3, #26
   236d4:	18fb      	adds	r3, r7, r3
   236d6:	881b      	ldrh	r3, [r3, #0]
   236d8:	1ad3      	subs	r3, r2, r3
   236da:	b29a      	uxth	r2, r3
   236dc:	68bb      	ldr	r3, [r7, #8]
   236de:	80da      	strh	r2, [r3, #6]

				if (gpfAppSocketCb)
   236e0:	4b2b      	ldr	r3, [pc, #172]	; (23790 <Socket_ReadSocketData+0x1e8>)
   236e2:	681b      	ldr	r3, [r3, #0]
   236e4:	2b00      	cmp	r3, #0
   236e6:	d00b      	beq.n	23700 <Socket_ReadSocketData+0x158>
					gpfAppSocketCb(sock,u8SocketMsg, pstrRecv);
   236e8:	4b29      	ldr	r3, [pc, #164]	; (23790 <Socket_ReadSocketData+0x1e8>)
   236ea:	681b      	ldr	r3, [r3, #0]
   236ec:	68bc      	ldr	r4, [r7, #8]
   236ee:	220e      	movs	r2, #14
   236f0:	18ba      	adds	r2, r7, r2
   236f2:	7811      	ldrb	r1, [r2, #0]
   236f4:	220f      	movs	r2, #15
   236f6:	18ba      	adds	r2, r7, r2
   236f8:	2000      	movs	r0, #0
   236fa:	5610      	ldrsb	r0, [r2, r0]
   236fc:	0022      	movs	r2, r4
   236fe:	4798      	blx	r3

				u16ReadCount -= u16Read;
   23700:	2330      	movs	r3, #48	; 0x30
   23702:	18f9      	adds	r1, r7, r3
   23704:	2330      	movs	r3, #48	; 0x30
   23706:	18fa      	adds	r2, r7, r3
   23708:	231a      	movs	r3, #26
   2370a:	18fb      	adds	r3, r7, r3
   2370c:	8812      	ldrh	r2, [r2, #0]
   2370e:	881b      	ldrh	r3, [r3, #0]
   23710:	1ad3      	subs	r3, r2, r3
   23712:	800b      	strh	r3, [r1, #0]
				u32Address += u16Read;
   23714:	231a      	movs	r3, #26
   23716:	18fb      	adds	r3, r7, r3
   23718:	881b      	ldrh	r3, [r3, #0]
   2371a:	69fa      	ldr	r2, [r7, #28]
   2371c:	18d3      	adds	r3, r2, r3
   2371e:	61fb      	str	r3, [r7, #28]

				if((!gastrSockets[sock].bIsUsed) && (u16ReadCount))
   23720:	230f      	movs	r3, #15
   23722:	18fb      	adds	r3, r7, r3
   23724:	781b      	ldrb	r3, [r3, #0]
   23726:	b25b      	sxtb	r3, r3
   23728:	4a17      	ldr	r2, [pc, #92]	; (23788 <Socket_ReadSocketData+0x1e0>)
   2372a:	011b      	lsls	r3, r3, #4
   2372c:	18d3      	adds	r3, r2, r3
   2372e:	330a      	adds	r3, #10
   23730:	781b      	ldrb	r3, [r3, #0]
   23732:	b2db      	uxtb	r3, r3
   23734:	2b00      	cmp	r3, #0
   23736:	d11c      	bne.n	23772 <Socket_ReadSocketData+0x1ca>
   23738:	2330      	movs	r3, #48	; 0x30
   2373a:	18fb      	adds	r3, r7, r3
   2373c:	881b      	ldrh	r3, [r3, #0]
   2373e:	2b00      	cmp	r3, #0
   23740:	d017      	beq.n	23772 <Socket_ReadSocketData+0x1ca>
				{
					M2M_DBG("Application Closed Socket While Rx Is not Complete\n");
					if(hif_receive(0, NULL, 0, 1) == M2M_SUCCESS)
   23742:	2301      	movs	r3, #1
   23744:	2200      	movs	r2, #0
   23746:	2100      	movs	r1, #0
   23748:	2000      	movs	r0, #0
   2374a:	4c10      	ldr	r4, [pc, #64]	; (2378c <Socket_ReadSocketData+0x1e4>)
   2374c:	47a0      	blx	r4
						M2M_DBG("hif_receive Success\n");
					else
						M2M_DBG("hif_receive Fail\n");
					break;
   2374e:	e017      	b.n	23780 <Socket_ReadSocketData+0x1d8>
				}
			}
			else
			{
				M2M_INFO("(ERRR)Current <%d>\n", u16ReadCount);
   23750:	4b10      	ldr	r3, [pc, #64]	; (23794 <Socket_ReadSocketData+0x1ec>)
   23752:	0018      	movs	r0, r3
   23754:	4b10      	ldr	r3, [pc, #64]	; (23798 <Socket_ReadSocketData+0x1f0>)
   23756:	4798      	blx	r3
   23758:	2330      	movs	r3, #48	; 0x30
   2375a:	18fb      	adds	r3, r7, r3
   2375c:	881a      	ldrh	r2, [r3, #0]
   2375e:	4b0f      	ldr	r3, [pc, #60]	; (2379c <Socket_ReadSocketData+0x1f4>)
   23760:	0011      	movs	r1, r2
   23762:	0018      	movs	r0, r3
   23764:	4b0c      	ldr	r3, [pc, #48]	; (23798 <Socket_ReadSocketData+0x1f0>)
   23766:	4798      	blx	r3
   23768:	4b0d      	ldr	r3, [pc, #52]	; (237a0 <Socket_ReadSocketData+0x1f8>)
   2376a:	0018      	movs	r0, r3
   2376c:	4b0a      	ldr	r3, [pc, #40]	; (23798 <Socket_ReadSocketData+0x1f0>)
   2376e:	4798      	blx	r3
				break;
   23770:	e006      	b.n	23780 <Socket_ReadSocketData+0x1d8>
			}
		}while(u16ReadCount != 0);
   23772:	2330      	movs	r3, #48	; 0x30
   23774:	18fb      	adds	r3, r7, r3
   23776:	881b      	ldrh	r3, [r3, #0]
   23778:	2b00      	cmp	r3, #0
   2377a:	d000      	beq.n	2377e <Socket_ReadSocketData+0x1d6>
   2377c:	e753      	b.n	23626 <Socket_ReadSocketData+0x7e>
	}
}
   2377e:	e7ff      	b.n	23780 <Socket_ReadSocketData+0x1d8>
   23780:	46c0      	nop			; (mov r8, r8)
   23782:	46bd      	mov	sp, r7
   23784:	b009      	add	sp, #36	; 0x24
   23786:	bd90      	pop	{r4, r7, pc}
   23788:	200055a4 	.word	0x200055a4
   2378c:	0001ffa1 	.word	0x0001ffa1
   23790:	20005654 	.word	0x20005654
   23794:	0003783c 	.word	0x0003783c
   23798:	0001c65d 	.word	0x0001c65d
   2379c:	00037848 	.word	0x00037848
   237a0:	0003785c 	.word	0x0003785c

000237a4 <m2m_ip_cb>:

Date
		17 July 2012
*********************************************************************/
static void m2m_ip_cb(uint8 u8OpCode, uint16 u16BufferSize,uint32 u32Address)
{	
   237a4:	b590      	push	{r4, r7, lr}
   237a6:	b0bb      	sub	sp, #236	; 0xec
   237a8:	af02      	add	r7, sp, #8
   237aa:	603a      	str	r2, [r7, #0]
   237ac:	1dfb      	adds	r3, r7, #7
   237ae:	1c02      	adds	r2, r0, #0
   237b0:	701a      	strb	r2, [r3, #0]
   237b2:	1d3b      	adds	r3, r7, #4
   237b4:	1c0a      	adds	r2, r1, #0
   237b6:	801a      	strh	r2, [r3, #0]
	if((u8OpCode == SOCKET_CMD_BIND) || (u8OpCode == SOCKET_CMD_SSL_BIND))
   237b8:	1dfb      	adds	r3, r7, #7
   237ba:	781b      	ldrb	r3, [r3, #0]
   237bc:	2b41      	cmp	r3, #65	; 0x41
   237be:	d003      	beq.n	237c8 <m2m_ip_cb+0x24>
   237c0:	1dfb      	adds	r3, r7, #7
   237c2:	781b      	ldrb	r3, [r3, #0]
   237c4:	2b54      	cmp	r3, #84	; 0x54
   237c6:	d120      	bne.n	2380a <m2m_ip_cb+0x66>
	{
		tstrBindReply		strBindReply;
		tstrSocketBindMsg	strBind;

		if(hif_receive(u32Address, (uint8*)&strBindReply, sizeof(tstrBindReply), 0) == M2M_SUCCESS)
   237c8:	23cc      	movs	r3, #204	; 0xcc
   237ca:	18f9      	adds	r1, r7, r3
   237cc:	6838      	ldr	r0, [r7, #0]
   237ce:	2300      	movs	r3, #0
   237d0:	2204      	movs	r2, #4
   237d2:	4c98      	ldr	r4, [pc, #608]	; (23a34 <m2m_ip_cb+0x290>)
   237d4:	47a0      	blx	r4
   237d6:	1e03      	subs	r3, r0, #0
   237d8:	d000      	beq.n	237dc <m2m_ip_cb+0x38>
   237da:	e275      	b.n	23cc8 <m2m_ip_cb+0x524>
		{
			strBind.status = strBindReply.s8Status;
   237dc:	23cc      	movs	r3, #204	; 0xcc
   237de:	18fb      	adds	r3, r7, r3
   237e0:	2201      	movs	r2, #1
   237e2:	569a      	ldrsb	r2, [r3, r2]
   237e4:	23c8      	movs	r3, #200	; 0xc8
   237e6:	18fb      	adds	r3, r7, r3
   237e8:	701a      	strb	r2, [r3, #0]
			if(gpfAppSocketCb)
   237ea:	4b93      	ldr	r3, [pc, #588]	; (23a38 <m2m_ip_cb+0x294>)
   237ec:	681b      	ldr	r3, [r3, #0]
   237ee:	2b00      	cmp	r3, #0
   237f0:	d100      	bne.n	237f4 <m2m_ip_cb+0x50>
   237f2:	e269      	b.n	23cc8 <m2m_ip_cb+0x524>
				gpfAppSocketCb(strBindReply.sock,SOCKET_MSG_BIND,&strBind);
   237f4:	4b90      	ldr	r3, [pc, #576]	; (23a38 <m2m_ip_cb+0x294>)
   237f6:	681b      	ldr	r3, [r3, #0]
   237f8:	22cc      	movs	r2, #204	; 0xcc
   237fa:	18ba      	adds	r2, r7, r2
   237fc:	2000      	movs	r0, #0
   237fe:	5610      	ldrsb	r0, [r2, r0]
   23800:	22c8      	movs	r2, #200	; 0xc8
   23802:	18ba      	adds	r2, r7, r2
   23804:	2101      	movs	r1, #1
   23806:	4798      	blx	r3
	{
   23808:	e25e      	b.n	23cc8 <m2m_ip_cb+0x524>
		}
	}
	else if(u8OpCode == SOCKET_CMD_LISTEN)
   2380a:	1dfb      	adds	r3, r7, #7
   2380c:	781b      	ldrb	r3, [r3, #0]
   2380e:	2b42      	cmp	r3, #66	; 0x42
   23810:	d120      	bne.n	23854 <m2m_ip_cb+0xb0>
	{
		tstrListenReply			strListenReply;
		tstrSocketListenMsg		strListen;
		if(hif_receive(u32Address, (uint8*)&strListenReply, sizeof(tstrListenReply), 0) == M2M_SUCCESS)
   23812:	23c4      	movs	r3, #196	; 0xc4
   23814:	18f9      	adds	r1, r7, r3
   23816:	6838      	ldr	r0, [r7, #0]
   23818:	2300      	movs	r3, #0
   2381a:	2204      	movs	r2, #4
   2381c:	4c85      	ldr	r4, [pc, #532]	; (23a34 <m2m_ip_cb+0x290>)
   2381e:	47a0      	blx	r4
   23820:	1e03      	subs	r3, r0, #0
   23822:	d000      	beq.n	23826 <m2m_ip_cb+0x82>
   23824:	e257      	b.n	23cd6 <m2m_ip_cb+0x532>
		{
			strListen.status = strListenReply.s8Status;
   23826:	23c4      	movs	r3, #196	; 0xc4
   23828:	18fb      	adds	r3, r7, r3
   2382a:	2201      	movs	r2, #1
   2382c:	569a      	ldrsb	r2, [r3, r2]
   2382e:	23c0      	movs	r3, #192	; 0xc0
   23830:	18fb      	adds	r3, r7, r3
   23832:	701a      	strb	r2, [r3, #0]
			if(gpfAppSocketCb)
   23834:	4b80      	ldr	r3, [pc, #512]	; (23a38 <m2m_ip_cb+0x294>)
   23836:	681b      	ldr	r3, [r3, #0]
   23838:	2b00      	cmp	r3, #0
   2383a:	d100      	bne.n	2383e <m2m_ip_cb+0x9a>
   2383c:	e24b      	b.n	23cd6 <m2m_ip_cb+0x532>
				gpfAppSocketCb(strListenReply.sock,SOCKET_MSG_LISTEN, &strListen);
   2383e:	4b7e      	ldr	r3, [pc, #504]	; (23a38 <m2m_ip_cb+0x294>)
   23840:	681b      	ldr	r3, [r3, #0]
   23842:	22c4      	movs	r2, #196	; 0xc4
   23844:	18ba      	adds	r2, r7, r2
   23846:	2000      	movs	r0, #0
   23848:	5610      	ldrsb	r0, [r2, r0]
   2384a:	22c0      	movs	r2, #192	; 0xc0
   2384c:	18ba      	adds	r2, r7, r2
   2384e:	2102      	movs	r1, #2
   23850:	4798      	blx	r3
			{
				gfpPingCb(strPingReply.u32IPAddr, strPingReply.u32RTT, strPingReply.u8ErrorCode);
			}
		}
	}
}
   23852:	e240      	b.n	23cd6 <m2m_ip_cb+0x532>
	else if(u8OpCode == SOCKET_CMD_ACCEPT)
   23854:	1dfb      	adds	r3, r7, #7
   23856:	781b      	ldrb	r3, [r3, #0]
   23858:	2b43      	cmp	r3, #67	; 0x43
   2385a:	d000      	beq.n	2385e <m2m_ip_cb+0xba>
   2385c:	e086      	b.n	2396c <m2m_ip_cb+0x1c8>
		if(hif_receive(u32Address, (uint8*)&strAcceptReply, sizeof(tstrAcceptReply), 0) == M2M_SUCCESS)
   2385e:	23b4      	movs	r3, #180	; 0xb4
   23860:	18f9      	adds	r1, r7, r3
   23862:	6838      	ldr	r0, [r7, #0]
   23864:	2300      	movs	r3, #0
   23866:	220c      	movs	r2, #12
   23868:	4c72      	ldr	r4, [pc, #456]	; (23a34 <m2m_ip_cb+0x290>)
   2386a:	47a0      	blx	r4
   2386c:	1e03      	subs	r3, r0, #0
   2386e:	d000      	beq.n	23872 <m2m_ip_cb+0xce>
   23870:	e231      	b.n	23cd6 <m2m_ip_cb+0x532>
			if(strAcceptReply.sConnectedSock >= 0)
   23872:	23b4      	movs	r3, #180	; 0xb4
   23874:	18fb      	adds	r3, r7, r3
   23876:	7a5b      	ldrb	r3, [r3, #9]
   23878:	b25b      	sxtb	r3, r3
   2387a:	2b00      	cmp	r3, #0
   2387c:	db4f      	blt.n	2391e <m2m_ip_cb+0x17a>
				gastrSockets[strAcceptReply.sConnectedSock].u8SSLFlags 		= gastrSockets[strAcceptReply.sListenSock].u8SSLFlags;
   2387e:	23b4      	movs	r3, #180	; 0xb4
   23880:	18fb      	adds	r3, r7, r3
   23882:	7a5b      	ldrb	r3, [r3, #9]
   23884:	b25b      	sxtb	r3, r3
   23886:	0018      	movs	r0, r3
   23888:	23b4      	movs	r3, #180	; 0xb4
   2388a:	18fb      	adds	r3, r7, r3
   2388c:	7a1b      	ldrb	r3, [r3, #8]
   2388e:	b25b      	sxtb	r3, r3
   23890:	4a6a      	ldr	r2, [pc, #424]	; (23a3c <m2m_ip_cb+0x298>)
   23892:	011b      	lsls	r3, r3, #4
   23894:	18d3      	adds	r3, r2, r3
   23896:	330b      	adds	r3, #11
   23898:	781b      	ldrb	r3, [r3, #0]
   2389a:	b2d9      	uxtb	r1, r3
   2389c:	4a67      	ldr	r2, [pc, #412]	; (23a3c <m2m_ip_cb+0x298>)
   2389e:	0103      	lsls	r3, r0, #4
   238a0:	18d3      	adds	r3, r2, r3
   238a2:	330b      	adds	r3, #11
   238a4:	1c0a      	adds	r2, r1, #0
   238a6:	701a      	strb	r2, [r3, #0]
				gastrSockets[strAcceptReply.sConnectedSock].bIsUsed 		= 1;
   238a8:	23b4      	movs	r3, #180	; 0xb4
   238aa:	18fb      	adds	r3, r7, r3
   238ac:	7a5b      	ldrb	r3, [r3, #9]
   238ae:	b25b      	sxtb	r3, r3
   238b0:	4a62      	ldr	r2, [pc, #392]	; (23a3c <m2m_ip_cb+0x298>)
   238b2:	011b      	lsls	r3, r3, #4
   238b4:	18d3      	adds	r3, r2, r3
   238b6:	330a      	adds	r3, #10
   238b8:	2201      	movs	r2, #1
   238ba:	701a      	strb	r2, [r3, #0]
				gastrSockets[strAcceptReply.sConnectedSock].u16DataOffset 	= strAcceptReply.u16AppDataOffset - M2M_HIF_HDR_OFFSET;
   238bc:	23b4      	movs	r3, #180	; 0xb4
   238be:	18fb      	adds	r3, r7, r3
   238c0:	7a5b      	ldrb	r3, [r3, #9]
   238c2:	b25b      	sxtb	r3, r3
   238c4:	0018      	movs	r0, r3
   238c6:	23b4      	movs	r3, #180	; 0xb4
   238c8:	18fb      	adds	r3, r7, r3
   238ca:	895b      	ldrh	r3, [r3, #10]
   238cc:	3b08      	subs	r3, #8
   238ce:	b299      	uxth	r1, r3
   238d0:	4a5a      	ldr	r2, [pc, #360]	; (23a3c <m2m_ip_cb+0x298>)
   238d2:	0103      	lsls	r3, r0, #4
   238d4:	18d3      	adds	r3, r2, r3
   238d6:	3308      	adds	r3, #8
   238d8:	1c0a      	adds	r2, r1, #0
   238da:	801a      	strh	r2, [r3, #0]
				++gu16SessionID;
   238dc:	4b58      	ldr	r3, [pc, #352]	; (23a40 <m2m_ip_cb+0x29c>)
   238de:	881b      	ldrh	r3, [r3, #0]
   238e0:	b29b      	uxth	r3, r3
   238e2:	3301      	adds	r3, #1
   238e4:	b29a      	uxth	r2, r3
   238e6:	4b56      	ldr	r3, [pc, #344]	; (23a40 <m2m_ip_cb+0x29c>)
   238e8:	801a      	strh	r2, [r3, #0]
				if(gu16SessionID == 0)
   238ea:	4b55      	ldr	r3, [pc, #340]	; (23a40 <m2m_ip_cb+0x29c>)
   238ec:	881b      	ldrh	r3, [r3, #0]
   238ee:	b29b      	uxth	r3, r3
   238f0:	2b00      	cmp	r3, #0
   238f2:	d106      	bne.n	23902 <m2m_ip_cb+0x15e>
					++gu16SessionID;
   238f4:	4b52      	ldr	r3, [pc, #328]	; (23a40 <m2m_ip_cb+0x29c>)
   238f6:	881b      	ldrh	r3, [r3, #0]
   238f8:	b29b      	uxth	r3, r3
   238fa:	3301      	adds	r3, #1
   238fc:	b29a      	uxth	r2, r3
   238fe:	4b50      	ldr	r3, [pc, #320]	; (23a40 <m2m_ip_cb+0x29c>)
   23900:	801a      	strh	r2, [r3, #0]
				gastrSockets[strAcceptReply.sConnectedSock].u16SessionID = gu16SessionID;
   23902:	23b4      	movs	r3, #180	; 0xb4
   23904:	18fb      	adds	r3, r7, r3
   23906:	7a5b      	ldrb	r3, [r3, #9]
   23908:	b25b      	sxtb	r3, r3
   2390a:	0018      	movs	r0, r3
   2390c:	4b4c      	ldr	r3, [pc, #304]	; (23a40 <m2m_ip_cb+0x29c>)
   2390e:	881b      	ldrh	r3, [r3, #0]
   23910:	b299      	uxth	r1, r3
   23912:	4a4a      	ldr	r2, [pc, #296]	; (23a3c <m2m_ip_cb+0x298>)
   23914:	0103      	lsls	r3, r0, #4
   23916:	18d3      	adds	r3, r2, r3
   23918:	3306      	adds	r3, #6
   2391a:	1c0a      	adds	r2, r1, #0
   2391c:	801a      	strh	r2, [r3, #0]
			strAccept.sock = strAcceptReply.sConnectedSock;
   2391e:	23b4      	movs	r3, #180	; 0xb4
   23920:	18fb      	adds	r3, r7, r3
   23922:	2209      	movs	r2, #9
   23924:	569a      	ldrsb	r2, [r3, r2]
   23926:	23a0      	movs	r3, #160	; 0xa0
   23928:	18fb      	adds	r3, r7, r3
   2392a:	701a      	strb	r2, [r3, #0]
			strAccept.strAddr.sin_family		= AF_INET;
   2392c:	23a0      	movs	r3, #160	; 0xa0
   2392e:	18fb      	adds	r3, r7, r3
   23930:	2202      	movs	r2, #2
   23932:	809a      	strh	r2, [r3, #4]
			strAccept.strAddr.sin_port = strAcceptReply.strAddr.u16Port;
   23934:	23b4      	movs	r3, #180	; 0xb4
   23936:	18fb      	adds	r3, r7, r3
   23938:	885a      	ldrh	r2, [r3, #2]
   2393a:	23a0      	movs	r3, #160	; 0xa0
   2393c:	18fb      	adds	r3, r7, r3
   2393e:	80da      	strh	r2, [r3, #6]
			strAccept.strAddr.sin_addr.s_addr = strAcceptReply.strAddr.u32IPAddr;
   23940:	23b4      	movs	r3, #180	; 0xb4
   23942:	18fb      	adds	r3, r7, r3
   23944:	685a      	ldr	r2, [r3, #4]
   23946:	23a0      	movs	r3, #160	; 0xa0
   23948:	18fb      	adds	r3, r7, r3
   2394a:	609a      	str	r2, [r3, #8]
			if(gpfAppSocketCb)
   2394c:	4b3a      	ldr	r3, [pc, #232]	; (23a38 <m2m_ip_cb+0x294>)
   2394e:	681b      	ldr	r3, [r3, #0]
   23950:	2b00      	cmp	r3, #0
   23952:	d100      	bne.n	23956 <m2m_ip_cb+0x1b2>
   23954:	e1bf      	b.n	23cd6 <m2m_ip_cb+0x532>
				gpfAppSocketCb(strAcceptReply.sListenSock, SOCKET_MSG_ACCEPT, &strAccept);
   23956:	4b38      	ldr	r3, [pc, #224]	; (23a38 <m2m_ip_cb+0x294>)
   23958:	681b      	ldr	r3, [r3, #0]
   2395a:	22b4      	movs	r2, #180	; 0xb4
   2395c:	18ba      	adds	r2, r7, r2
   2395e:	2008      	movs	r0, #8
   23960:	5610      	ldrsb	r0, [r2, r0]
   23962:	22a0      	movs	r2, #160	; 0xa0
   23964:	18ba      	adds	r2, r7, r2
   23966:	2104      	movs	r1, #4
   23968:	4798      	blx	r3
}
   2396a:	e1b4      	b.n	23cd6 <m2m_ip_cb+0x532>
	else if((u8OpCode == SOCKET_CMD_CONNECT) || (u8OpCode == SOCKET_CMD_SSL_CONNECT))
   2396c:	1dfb      	adds	r3, r7, #7
   2396e:	781b      	ldrb	r3, [r3, #0]
   23970:	2b44      	cmp	r3, #68	; 0x44
   23972:	d003      	beq.n	2397c <m2m_ip_cb+0x1d8>
   23974:	1dfb      	adds	r3, r7, #7
   23976:	781b      	ldrb	r3, [r3, #0]
   23978:	2b4b      	cmp	r3, #75	; 0x4b
   2397a:	d13d      	bne.n	239f8 <m2m_ip_cb+0x254>
		if(hif_receive(u32Address, (uint8*)&strConnectReply, sizeof(tstrConnectReply), 0) == M2M_SUCCESS)
   2397c:	239c      	movs	r3, #156	; 0x9c
   2397e:	18f9      	adds	r1, r7, r3
   23980:	6838      	ldr	r0, [r7, #0]
   23982:	2300      	movs	r3, #0
   23984:	2204      	movs	r2, #4
   23986:	4c2b      	ldr	r4, [pc, #172]	; (23a34 <m2m_ip_cb+0x290>)
   23988:	47a0      	blx	r4
   2398a:	1e03      	subs	r3, r0, #0
   2398c:	d000      	beq.n	23990 <m2m_ip_cb+0x1ec>
   2398e:	e19d      	b.n	23ccc <m2m_ip_cb+0x528>
			strConnMsg.sock		= strConnectReply.sock;
   23990:	239c      	movs	r3, #156	; 0x9c
   23992:	18fb      	adds	r3, r7, r3
   23994:	2200      	movs	r2, #0
   23996:	569a      	ldrsb	r2, [r3, r2]
   23998:	2398      	movs	r3, #152	; 0x98
   2399a:	18fb      	adds	r3, r7, r3
   2399c:	701a      	strb	r2, [r3, #0]
			strConnMsg.s8Error	= strConnectReply.s8Error;
   2399e:	239c      	movs	r3, #156	; 0x9c
   239a0:	18fb      	adds	r3, r7, r3
   239a2:	2201      	movs	r2, #1
   239a4:	569a      	ldrsb	r2, [r3, r2]
   239a6:	2398      	movs	r3, #152	; 0x98
   239a8:	18fb      	adds	r3, r7, r3
   239aa:	705a      	strb	r2, [r3, #1]
			if(strConnectReply.s8Error == SOCK_ERR_NO_ERROR)
   239ac:	239c      	movs	r3, #156	; 0x9c
   239ae:	18fb      	adds	r3, r7, r3
   239b0:	785b      	ldrb	r3, [r3, #1]
   239b2:	b25b      	sxtb	r3, r3
   239b4:	2b00      	cmp	r3, #0
   239b6:	d10f      	bne.n	239d8 <m2m_ip_cb+0x234>
				gastrSockets[strConnectReply.sock].u16DataOffset = strConnectReply.u16AppDataOffset - M2M_HIF_HDR_OFFSET;
   239b8:	239c      	movs	r3, #156	; 0x9c
   239ba:	18fb      	adds	r3, r7, r3
   239bc:	781b      	ldrb	r3, [r3, #0]
   239be:	b25b      	sxtb	r3, r3
   239c0:	0018      	movs	r0, r3
   239c2:	239c      	movs	r3, #156	; 0x9c
   239c4:	18fb      	adds	r3, r7, r3
   239c6:	885b      	ldrh	r3, [r3, #2]
   239c8:	3b08      	subs	r3, #8
   239ca:	b299      	uxth	r1, r3
   239cc:	4a1b      	ldr	r2, [pc, #108]	; (23a3c <m2m_ip_cb+0x298>)
   239ce:	0103      	lsls	r3, r0, #4
   239d0:	18d3      	adds	r3, r2, r3
   239d2:	3308      	adds	r3, #8
   239d4:	1c0a      	adds	r2, r1, #0
   239d6:	801a      	strh	r2, [r3, #0]
			if(gpfAppSocketCb)
   239d8:	4b17      	ldr	r3, [pc, #92]	; (23a38 <m2m_ip_cb+0x294>)
   239da:	681b      	ldr	r3, [r3, #0]
   239dc:	2b00      	cmp	r3, #0
   239de:	d100      	bne.n	239e2 <m2m_ip_cb+0x23e>
   239e0:	e174      	b.n	23ccc <m2m_ip_cb+0x528>
				gpfAppSocketCb(strConnectReply.sock,SOCKET_MSG_CONNECT, &strConnMsg);
   239e2:	4b15      	ldr	r3, [pc, #84]	; (23a38 <m2m_ip_cb+0x294>)
   239e4:	681b      	ldr	r3, [r3, #0]
   239e6:	229c      	movs	r2, #156	; 0x9c
   239e8:	18ba      	adds	r2, r7, r2
   239ea:	2000      	movs	r0, #0
   239ec:	5610      	ldrsb	r0, [r2, r0]
   239ee:	2298      	movs	r2, #152	; 0x98
   239f0:	18ba      	adds	r2, r7, r2
   239f2:	2105      	movs	r1, #5
   239f4:	4798      	blx	r3
	{
   239f6:	e169      	b.n	23ccc <m2m_ip_cb+0x528>
	else if(u8OpCode == SOCKET_CMD_DNS_RESOLVE)
   239f8:	1dfb      	adds	r3, r7, #7
   239fa:	781b      	ldrb	r3, [r3, #0]
   239fc:	2b4a      	cmp	r3, #74	; 0x4a
   239fe:	d123      	bne.n	23a48 <m2m_ip_cb+0x2a4>
		if(hif_receive(u32Address, (uint8*)&strDnsReply, sizeof(tstrDnsReply), 0) == M2M_SUCCESS)
   23a00:	230c      	movs	r3, #12
   23a02:	18f9      	adds	r1, r7, r3
   23a04:	6838      	ldr	r0, [r7, #0]
   23a06:	2300      	movs	r3, #0
   23a08:	2244      	movs	r2, #68	; 0x44
   23a0a:	4c0a      	ldr	r4, [pc, #40]	; (23a34 <m2m_ip_cb+0x290>)
   23a0c:	47a0      	blx	r4
   23a0e:	1e03      	subs	r3, r0, #0
   23a10:	d000      	beq.n	23a14 <m2m_ip_cb+0x270>
   23a12:	e160      	b.n	23cd6 <m2m_ip_cb+0x532>
			if(gpfAppResolveCb)
   23a14:	4b0b      	ldr	r3, [pc, #44]	; (23a44 <m2m_ip_cb+0x2a0>)
   23a16:	681b      	ldr	r3, [r3, #0]
   23a18:	2b00      	cmp	r3, #0
   23a1a:	d100      	bne.n	23a1e <m2m_ip_cb+0x27a>
   23a1c:	e15b      	b.n	23cd6 <m2m_ip_cb+0x532>
				gpfAppResolveCb((uint8*)strDnsReply.acHostName, strDnsReply.u32HostIP);
   23a1e:	4b09      	ldr	r3, [pc, #36]	; (23a44 <m2m_ip_cb+0x2a0>)
   23a20:	681a      	ldr	r2, [r3, #0]
   23a22:	230c      	movs	r3, #12
   23a24:	18fb      	adds	r3, r7, r3
   23a26:	6c19      	ldr	r1, [r3, #64]	; 0x40
   23a28:	230c      	movs	r3, #12
   23a2a:	18fb      	adds	r3, r7, r3
   23a2c:	0018      	movs	r0, r3
   23a2e:	4790      	blx	r2
}
   23a30:	e151      	b.n	23cd6 <m2m_ip_cb+0x532>
   23a32:	46c0      	nop			; (mov r8, r8)
   23a34:	0001ffa1 	.word	0x0001ffa1
   23a38:	20005654 	.word	0x20005654
   23a3c:	200055a4 	.word	0x200055a4
   23a40:	20003d4e 	.word	0x20003d4e
   23a44:	2000565c 	.word	0x2000565c
	else if((u8OpCode == SOCKET_CMD_RECV) || (u8OpCode == SOCKET_CMD_RECVFROM) || (u8OpCode == SOCKET_CMD_SSL_RECV))
   23a48:	1dfb      	adds	r3, r7, #7
   23a4a:	781b      	ldrb	r3, [r3, #0]
   23a4c:	2b46      	cmp	r3, #70	; 0x46
   23a4e:	d008      	beq.n	23a62 <m2m_ip_cb+0x2be>
   23a50:	1dfb      	adds	r3, r7, #7
   23a52:	781b      	ldrb	r3, [r3, #0]
   23a54:	2b48      	cmp	r3, #72	; 0x48
   23a56:	d004      	beq.n	23a62 <m2m_ip_cb+0x2be>
   23a58:	1dfb      	adds	r3, r7, #7
   23a5a:	781b      	ldrb	r3, [r3, #0]
   23a5c:	2b4d      	cmp	r3, #77	; 0x4d
   23a5e:	d000      	beq.n	23a62 <m2m_ip_cb+0x2be>
   23a60:	e0b4      	b.n	23bcc <m2m_ip_cb+0x428>
		uint8				u8CallbackMsgID = SOCKET_MSG_RECV;
   23a62:	23df      	movs	r3, #223	; 0xdf
   23a64:	18fb      	adds	r3, r7, r3
   23a66:	2206      	movs	r2, #6
   23a68:	701a      	strb	r2, [r3, #0]
		if(u8OpCode == SOCKET_CMD_RECVFROM)
   23a6a:	1dfb      	adds	r3, r7, #7
   23a6c:	781b      	ldrb	r3, [r3, #0]
   23a6e:	2b48      	cmp	r3, #72	; 0x48
   23a70:	d103      	bne.n	23a7a <m2m_ip_cb+0x2d6>
			u8CallbackMsgID = SOCKET_MSG_RECVFROM;
   23a72:	23df      	movs	r3, #223	; 0xdf
   23a74:	18fb      	adds	r3, r7, r3
   23a76:	2209      	movs	r2, #9
   23a78:	701a      	strb	r2, [r3, #0]
		u16ReadSize = sizeof(tstrRecvReply);
   23a7a:	23d8      	movs	r3, #216	; 0xd8
   23a7c:	18fb      	adds	r3, r7, r3
   23a7e:	2210      	movs	r2, #16
   23a80:	801a      	strh	r2, [r3, #0]
		if(hif_receive(u32Address, (uint8*)&strRecvReply, u16ReadSize, 0) == M2M_SUCCESS)
   23a82:	23d8      	movs	r3, #216	; 0xd8
   23a84:	18fb      	adds	r3, r7, r3
   23a86:	881a      	ldrh	r2, [r3, #0]
   23a88:	2388      	movs	r3, #136	; 0x88
   23a8a:	18f9      	adds	r1, r7, r3
   23a8c:	6838      	ldr	r0, [r7, #0]
   23a8e:	2300      	movs	r3, #0
   23a90:	4c93      	ldr	r4, [pc, #588]	; (23ce0 <m2m_ip_cb+0x53c>)
   23a92:	47a0      	blx	r4
   23a94:	1e03      	subs	r3, r0, #0
   23a96:	d000      	beq.n	23a9a <m2m_ip_cb+0x2f6>
   23a98:	e11a      	b.n	23cd0 <m2m_ip_cb+0x52c>
			uint16 u16SessionID = 0;
   23a9a:	23d6      	movs	r3, #214	; 0xd6
   23a9c:	18fb      	adds	r3, r7, r3
   23a9e:	2200      	movs	r2, #0
   23aa0:	801a      	strh	r2, [r3, #0]
			sock			= strRecvReply.sock;
   23aa2:	23d5      	movs	r3, #213	; 0xd5
   23aa4:	18fb      	adds	r3, r7, r3
   23aa6:	2288      	movs	r2, #136	; 0x88
   23aa8:	18ba      	adds	r2, r7, r2
   23aaa:	7b12      	ldrb	r2, [r2, #12]
   23aac:	701a      	strb	r2, [r3, #0]
			u16SessionID = strRecvReply.u16SessionID;
   23aae:	23d6      	movs	r3, #214	; 0xd6
   23ab0:	18fb      	adds	r3, r7, r3
   23ab2:	2288      	movs	r2, #136	; 0x88
   23ab4:	18ba      	adds	r2, r7, r2
   23ab6:	89d2      	ldrh	r2, [r2, #14]
   23ab8:	801a      	strh	r2, [r3, #0]
			gastrSockets[sock].bIsRecvPending = 0;
   23aba:	23d5      	movs	r3, #213	; 0xd5
   23abc:	18fb      	adds	r3, r7, r3
   23abe:	781b      	ldrb	r3, [r3, #0]
   23ac0:	b25b      	sxtb	r3, r3
   23ac2:	4a88      	ldr	r2, [pc, #544]	; (23ce4 <m2m_ip_cb+0x540>)
   23ac4:	011b      	lsls	r3, r3, #4
   23ac6:	18d3      	adds	r3, r2, r3
   23ac8:	330c      	adds	r3, #12
   23aca:	2200      	movs	r2, #0
   23acc:	701a      	strb	r2, [r3, #0]
			s16RecvStatus	= NM_BSP_B_L_16(strRecvReply.s16RecvStatus);
   23ace:	23d2      	movs	r3, #210	; 0xd2
   23ad0:	18fb      	adds	r3, r7, r3
   23ad2:	2288      	movs	r2, #136	; 0x88
   23ad4:	18ba      	adds	r2, r7, r2
   23ad6:	8912      	ldrh	r2, [r2, #8]
   23ad8:	801a      	strh	r2, [r3, #0]
			u16DataOffset	= NM_BSP_B_L_16(strRecvReply.u16DataOffset);
   23ada:	23d0      	movs	r3, #208	; 0xd0
   23adc:	18fb      	adds	r3, r7, r3
   23ade:	2288      	movs	r2, #136	; 0x88
   23ae0:	18ba      	adds	r2, r7, r2
   23ae2:	8952      	ldrh	r2, [r2, #10]
   23ae4:	801a      	strh	r2, [r3, #0]
			strRecvMsg.strRemoteAddr.sin_port 			= strRecvReply.strRemoteAddr.u16Port;
   23ae6:	2388      	movs	r3, #136	; 0x88
   23ae8:	18fb      	adds	r3, r7, r3
   23aea:	885a      	ldrh	r2, [r3, #2]
   23aec:	2370      	movs	r3, #112	; 0x70
   23aee:	18fb      	adds	r3, r7, r3
   23af0:	815a      	strh	r2, [r3, #10]
			strRecvMsg.strRemoteAddr.sin_addr.s_addr 	= strRecvReply.strRemoteAddr.u32IPAddr;
   23af2:	2388      	movs	r3, #136	; 0x88
   23af4:	18fb      	adds	r3, r7, r3
   23af6:	685a      	ldr	r2, [r3, #4]
   23af8:	2370      	movs	r3, #112	; 0x70
   23afa:	18fb      	adds	r3, r7, r3
   23afc:	60da      	str	r2, [r3, #12]
			if(u16SessionID == gastrSockets[sock].u16SessionID)
   23afe:	23d5      	movs	r3, #213	; 0xd5
   23b00:	18fb      	adds	r3, r7, r3
   23b02:	781b      	ldrb	r3, [r3, #0]
   23b04:	b25b      	sxtb	r3, r3
   23b06:	4a77      	ldr	r2, [pc, #476]	; (23ce4 <m2m_ip_cb+0x540>)
   23b08:	011b      	lsls	r3, r3, #4
   23b0a:	18d3      	adds	r3, r2, r3
   23b0c:	3306      	adds	r3, #6
   23b0e:	881b      	ldrh	r3, [r3, #0]
   23b10:	b29b      	uxth	r3, r3
   23b12:	22d6      	movs	r2, #214	; 0xd6
   23b14:	18ba      	adds	r2, r7, r2
   23b16:	8812      	ldrh	r2, [r2, #0]
   23b18:	429a      	cmp	r2, r3
   23b1a:	d148      	bne.n	23bae <m2m_ip_cb+0x40a>
				if((s16RecvStatus > 0) && (s16RecvStatus < u16BufferSize))
   23b1c:	23d2      	movs	r3, #210	; 0xd2
   23b1e:	18fb      	adds	r3, r7, r3
   23b20:	2200      	movs	r2, #0
   23b22:	5e9b      	ldrsh	r3, [r3, r2]
   23b24:	2b00      	cmp	r3, #0
   23b26:	dd25      	ble.n	23b74 <m2m_ip_cb+0x3d0>
   23b28:	23d2      	movs	r3, #210	; 0xd2
   23b2a:	18fb      	adds	r3, r7, r3
   23b2c:	2200      	movs	r2, #0
   23b2e:	5e9a      	ldrsh	r2, [r3, r2]
   23b30:	1d3b      	adds	r3, r7, #4
   23b32:	881b      	ldrh	r3, [r3, #0]
   23b34:	429a      	cmp	r2, r3
   23b36:	da1d      	bge.n	23b74 <m2m_ip_cb+0x3d0>
					u32Address += u16DataOffset;
   23b38:	23d0      	movs	r3, #208	; 0xd0
   23b3a:	18fb      	adds	r3, r7, r3
   23b3c:	881b      	ldrh	r3, [r3, #0]
   23b3e:	683a      	ldr	r2, [r7, #0]
   23b40:	18d3      	adds	r3, r2, r3
   23b42:	603b      	str	r3, [r7, #0]
					u16ReadSize = (uint16)s16RecvStatus;
   23b44:	23d8      	movs	r3, #216	; 0xd8
   23b46:	18fb      	adds	r3, r7, r3
   23b48:	22d2      	movs	r2, #210	; 0xd2
   23b4a:	18ba      	adds	r2, r7, r2
   23b4c:	8812      	ldrh	r2, [r2, #0]
   23b4e:	801a      	strh	r2, [r3, #0]
					Socket_ReadSocketData(sock, &strRecvMsg, u8CallbackMsgID, u32Address, u16ReadSize);
   23b50:	683c      	ldr	r4, [r7, #0]
   23b52:	23df      	movs	r3, #223	; 0xdf
   23b54:	18fb      	adds	r3, r7, r3
   23b56:	781a      	ldrb	r2, [r3, #0]
   23b58:	2370      	movs	r3, #112	; 0x70
   23b5a:	18f9      	adds	r1, r7, r3
   23b5c:	23d5      	movs	r3, #213	; 0xd5
   23b5e:	18fb      	adds	r3, r7, r3
   23b60:	2000      	movs	r0, #0
   23b62:	5618      	ldrsb	r0, [r3, r0]
   23b64:	23d8      	movs	r3, #216	; 0xd8
   23b66:	18fb      	adds	r3, r7, r3
   23b68:	881b      	ldrh	r3, [r3, #0]
   23b6a:	9300      	str	r3, [sp, #0]
   23b6c:	0023      	movs	r3, r4
   23b6e:	4c5e      	ldr	r4, [pc, #376]	; (23ce8 <m2m_ip_cb+0x544>)
   23b70:	47a0      	blx	r4
	{
   23b72:	e0ad      	b.n	23cd0 <m2m_ip_cb+0x52c>
					strRecvMsg.s16BufferSize	= s16RecvStatus;
   23b74:	2370      	movs	r3, #112	; 0x70
   23b76:	18fb      	adds	r3, r7, r3
   23b78:	22d2      	movs	r2, #210	; 0xd2
   23b7a:	18ba      	adds	r2, r7, r2
   23b7c:	8812      	ldrh	r2, [r2, #0]
   23b7e:	809a      	strh	r2, [r3, #4]
					strRecvMsg.pu8Buffer		= NULL;
   23b80:	2370      	movs	r3, #112	; 0x70
   23b82:	18fb      	adds	r3, r7, r3
   23b84:	2200      	movs	r2, #0
   23b86:	601a      	str	r2, [r3, #0]
					if(gpfAppSocketCb)
   23b88:	4b58      	ldr	r3, [pc, #352]	; (23cec <m2m_ip_cb+0x548>)
   23b8a:	681b      	ldr	r3, [r3, #0]
   23b8c:	2b00      	cmp	r3, #0
   23b8e:	d100      	bne.n	23b92 <m2m_ip_cb+0x3ee>
   23b90:	e09e      	b.n	23cd0 <m2m_ip_cb+0x52c>
						gpfAppSocketCb(sock,u8CallbackMsgID, &strRecvMsg);
   23b92:	4b56      	ldr	r3, [pc, #344]	; (23cec <m2m_ip_cb+0x548>)
   23b94:	681b      	ldr	r3, [r3, #0]
   23b96:	2270      	movs	r2, #112	; 0x70
   23b98:	18bc      	adds	r4, r7, r2
   23b9a:	22df      	movs	r2, #223	; 0xdf
   23b9c:	18ba      	adds	r2, r7, r2
   23b9e:	7811      	ldrb	r1, [r2, #0]
   23ba0:	22d5      	movs	r2, #213	; 0xd5
   23ba2:	18ba      	adds	r2, r7, r2
   23ba4:	2000      	movs	r0, #0
   23ba6:	5610      	ldrsb	r0, [r2, r0]
   23ba8:	0022      	movs	r2, r4
   23baa:	4798      	blx	r3
	{
   23bac:	e090      	b.n	23cd0 <m2m_ip_cb+0x52c>
				if(u16ReadSize < u16BufferSize)
   23bae:	23d8      	movs	r3, #216	; 0xd8
   23bb0:	18fa      	adds	r2, r7, r3
   23bb2:	1d3b      	adds	r3, r7, #4
   23bb4:	8812      	ldrh	r2, [r2, #0]
   23bb6:	881b      	ldrh	r3, [r3, #0]
   23bb8:	429a      	cmp	r2, r3
   23bba:	d300      	bcc.n	23bbe <m2m_ip_cb+0x41a>
   23bbc:	e088      	b.n	23cd0 <m2m_ip_cb+0x52c>
					if(hif_receive(0, NULL, 0, 1) == M2M_SUCCESS)
   23bbe:	2301      	movs	r3, #1
   23bc0:	2200      	movs	r2, #0
   23bc2:	2100      	movs	r1, #0
   23bc4:	2000      	movs	r0, #0
   23bc6:	4c46      	ldr	r4, [pc, #280]	; (23ce0 <m2m_ip_cb+0x53c>)
   23bc8:	47a0      	blx	r4
	{
   23bca:	e081      	b.n	23cd0 <m2m_ip_cb+0x52c>
	else if((u8OpCode == SOCKET_CMD_SEND) || (u8OpCode == SOCKET_CMD_SENDTO) || (u8OpCode == SOCKET_CMD_SSL_SEND))
   23bcc:	1dfb      	adds	r3, r7, #7
   23bce:	781b      	ldrb	r3, [r3, #0]
   23bd0:	2b45      	cmp	r3, #69	; 0x45
   23bd2:	d007      	beq.n	23be4 <m2m_ip_cb+0x440>
   23bd4:	1dfb      	adds	r3, r7, #7
   23bd6:	781b      	ldrb	r3, [r3, #0]
   23bd8:	2b47      	cmp	r3, #71	; 0x47
   23bda:	d003      	beq.n	23be4 <m2m_ip_cb+0x440>
   23bdc:	1dfb      	adds	r3, r7, #7
   23bde:	781b      	ldrb	r3, [r3, #0]
   23be0:	2b4c      	cmp	r3, #76	; 0x4c
   23be2:	d14c      	bne.n	23c7e <m2m_ip_cb+0x4da>
		uint8			u8CallbackMsgID = SOCKET_MSG_SEND;
   23be4:	23de      	movs	r3, #222	; 0xde
   23be6:	18fb      	adds	r3, r7, r3
   23be8:	2207      	movs	r2, #7
   23bea:	701a      	strb	r2, [r3, #0]
		if(u8OpCode == SOCKET_CMD_SENDTO)
   23bec:	1dfb      	adds	r3, r7, #7
   23bee:	781b      	ldrb	r3, [r3, #0]
   23bf0:	2b47      	cmp	r3, #71	; 0x47
   23bf2:	d103      	bne.n	23bfc <m2m_ip_cb+0x458>
			u8CallbackMsgID = SOCKET_MSG_SENDTO;
   23bf4:	23de      	movs	r3, #222	; 0xde
   23bf6:	18fb      	adds	r3, r7, r3
   23bf8:	2208      	movs	r2, #8
   23bfa:	701a      	strb	r2, [r3, #0]
		if(hif_receive(u32Address, (uint8*)&strReply, sizeof(tstrSendReply), 0) == M2M_SUCCESS)
   23bfc:	2364      	movs	r3, #100	; 0x64
   23bfe:	18f9      	adds	r1, r7, r3
   23c00:	6838      	ldr	r0, [r7, #0]
   23c02:	2300      	movs	r3, #0
   23c04:	2208      	movs	r2, #8
   23c06:	4c36      	ldr	r4, [pc, #216]	; (23ce0 <m2m_ip_cb+0x53c>)
   23c08:	47a0      	blx	r4
   23c0a:	1e03      	subs	r3, r0, #0
   23c0c:	d162      	bne.n	23cd4 <m2m_ip_cb+0x530>
			uint16 u16SessionID = 0;
   23c0e:	23dc      	movs	r3, #220	; 0xdc
   23c10:	18fb      	adds	r3, r7, r3
   23c12:	2200      	movs	r2, #0
   23c14:	801a      	strh	r2, [r3, #0]
			sock = strReply.sock;
   23c16:	23db      	movs	r3, #219	; 0xdb
   23c18:	18fb      	adds	r3, r7, r3
   23c1a:	2264      	movs	r2, #100	; 0x64
   23c1c:	18ba      	adds	r2, r7, r2
   23c1e:	7812      	ldrb	r2, [r2, #0]
   23c20:	701a      	strb	r2, [r3, #0]
			u16SessionID = strReply.u16SessionID;
   23c22:	23dc      	movs	r3, #220	; 0xdc
   23c24:	18fb      	adds	r3, r7, r3
   23c26:	2264      	movs	r2, #100	; 0x64
   23c28:	18ba      	adds	r2, r7, r2
   23c2a:	8892      	ldrh	r2, [r2, #4]
   23c2c:	801a      	strh	r2, [r3, #0]
			s16Rcvd = NM_BSP_B_L_16(strReply.s16SentBytes);
   23c2e:	2364      	movs	r3, #100	; 0x64
   23c30:	18fb      	adds	r3, r7, r3
   23c32:	2202      	movs	r2, #2
   23c34:	5e9a      	ldrsh	r2, [r3, r2]
   23c36:	236e      	movs	r3, #110	; 0x6e
   23c38:	18fb      	adds	r3, r7, r3
   23c3a:	801a      	strh	r2, [r3, #0]
			if(u16SessionID == gastrSockets[sock].u16SessionID)
   23c3c:	23db      	movs	r3, #219	; 0xdb
   23c3e:	18fb      	adds	r3, r7, r3
   23c40:	781b      	ldrb	r3, [r3, #0]
   23c42:	b25b      	sxtb	r3, r3
   23c44:	4a27      	ldr	r2, [pc, #156]	; (23ce4 <m2m_ip_cb+0x540>)
   23c46:	011b      	lsls	r3, r3, #4
   23c48:	18d3      	adds	r3, r2, r3
   23c4a:	3306      	adds	r3, #6
   23c4c:	881b      	ldrh	r3, [r3, #0]
   23c4e:	b29b      	uxth	r3, r3
   23c50:	22dc      	movs	r2, #220	; 0xdc
   23c52:	18ba      	adds	r2, r7, r2
   23c54:	8812      	ldrh	r2, [r2, #0]
   23c56:	429a      	cmp	r2, r3
   23c58:	d13c      	bne.n	23cd4 <m2m_ip_cb+0x530>
				if(gpfAppSocketCb)
   23c5a:	4b24      	ldr	r3, [pc, #144]	; (23cec <m2m_ip_cb+0x548>)
   23c5c:	681b      	ldr	r3, [r3, #0]
   23c5e:	2b00      	cmp	r3, #0
   23c60:	d038      	beq.n	23cd4 <m2m_ip_cb+0x530>
					gpfAppSocketCb(sock,u8CallbackMsgID, &s16Rcvd);
   23c62:	4b22      	ldr	r3, [pc, #136]	; (23cec <m2m_ip_cb+0x548>)
   23c64:	681b      	ldr	r3, [r3, #0]
   23c66:	226e      	movs	r2, #110	; 0x6e
   23c68:	18bc      	adds	r4, r7, r2
   23c6a:	22de      	movs	r2, #222	; 0xde
   23c6c:	18ba      	adds	r2, r7, r2
   23c6e:	7811      	ldrb	r1, [r2, #0]
   23c70:	22db      	movs	r2, #219	; 0xdb
   23c72:	18ba      	adds	r2, r7, r2
   23c74:	2000      	movs	r0, #0
   23c76:	5610      	ldrsb	r0, [r2, r0]
   23c78:	0022      	movs	r2, r4
   23c7a:	4798      	blx	r3
	{
   23c7c:	e02a      	b.n	23cd4 <m2m_ip_cb+0x530>
	else if(u8OpCode == SOCKET_CMD_PING)
   23c7e:	1dfb      	adds	r3, r7, #7
   23c80:	781b      	ldrb	r3, [r3, #0]
   23c82:	2b52      	cmp	r3, #82	; 0x52
   23c84:	d127      	bne.n	23cd6 <m2m_ip_cb+0x532>
		if(hif_receive(u32Address, (uint8*)&strPingReply, sizeof(tstrPingReply), 1) == M2M_SUCCESS)
   23c86:	2350      	movs	r3, #80	; 0x50
   23c88:	18f9      	adds	r1, r7, r3
   23c8a:	6838      	ldr	r0, [r7, #0]
   23c8c:	2301      	movs	r3, #1
   23c8e:	2214      	movs	r2, #20
   23c90:	4c13      	ldr	r4, [pc, #76]	; (23ce0 <m2m_ip_cb+0x53c>)
   23c92:	47a0      	blx	r4
   23c94:	1e03      	subs	r3, r0, #0
   23c96:	d11e      	bne.n	23cd6 <m2m_ip_cb+0x532>
			gfpPingCb = (void (*)(uint32 , uint32 , uint8))strPingReply.u32CmdPrivate;
   23c98:	2350      	movs	r3, #80	; 0x50
   23c9a:	18fb      	adds	r3, r7, r3
   23c9c:	685b      	ldr	r3, [r3, #4]
   23c9e:	001a      	movs	r2, r3
   23ca0:	4b13      	ldr	r3, [pc, #76]	; (23cf0 <m2m_ip_cb+0x54c>)
   23ca2:	601a      	str	r2, [r3, #0]
			if(gfpPingCb != NULL)
   23ca4:	4b12      	ldr	r3, [pc, #72]	; (23cf0 <m2m_ip_cb+0x54c>)
   23ca6:	681b      	ldr	r3, [r3, #0]
   23ca8:	2b00      	cmp	r3, #0
   23caa:	d014      	beq.n	23cd6 <m2m_ip_cb+0x532>
				gfpPingCb(strPingReply.u32IPAddr, strPingReply.u32RTT, strPingReply.u8ErrorCode);
   23cac:	4b10      	ldr	r3, [pc, #64]	; (23cf0 <m2m_ip_cb+0x54c>)
   23cae:	681c      	ldr	r4, [r3, #0]
   23cb0:	2350      	movs	r3, #80	; 0x50
   23cb2:	18fb      	adds	r3, r7, r3
   23cb4:	6818      	ldr	r0, [r3, #0]
   23cb6:	2350      	movs	r3, #80	; 0x50
   23cb8:	18fb      	adds	r3, r7, r3
   23cba:	6899      	ldr	r1, [r3, #8]
   23cbc:	2350      	movs	r3, #80	; 0x50
   23cbe:	18fb      	adds	r3, r7, r3
   23cc0:	7c1b      	ldrb	r3, [r3, #16]
   23cc2:	001a      	movs	r2, r3
   23cc4:	47a0      	blx	r4
}
   23cc6:	e006      	b.n	23cd6 <m2m_ip_cb+0x532>
	{
   23cc8:	46c0      	nop			; (mov r8, r8)
   23cca:	e004      	b.n	23cd6 <m2m_ip_cb+0x532>
	{
   23ccc:	46c0      	nop			; (mov r8, r8)
   23cce:	e002      	b.n	23cd6 <m2m_ip_cb+0x532>
	{
   23cd0:	46c0      	nop			; (mov r8, r8)
   23cd2:	e000      	b.n	23cd6 <m2m_ip_cb+0x532>
	{
   23cd4:	46c0      	nop			; (mov r8, r8)
}
   23cd6:	46c0      	nop			; (mov r8, r8)
   23cd8:	46bd      	mov	sp, r7
   23cda:	b039      	add	sp, #228	; 0xe4
   23cdc:	bd90      	pop	{r4, r7, pc}
   23cde:	46c0      	nop			; (mov r8, r8)
   23ce0:	0001ffa1 	.word	0x0001ffa1
   23ce4:	200055a4 	.word	0x200055a4
   23ce8:	000235a9 	.word	0x000235a9
   23cec:	20005654 	.word	0x20005654
   23cf0:	20005658 	.word	0x20005658

00023cf4 <socketInit>:

Date
		4 June 2012
*********************************************************************/
void socketInit(void)
{
   23cf4:	b580      	push	{r7, lr}
   23cf6:	af00      	add	r7, sp, #0
	if(gbSocketInit == 0)
   23cf8:	4b0c      	ldr	r3, [pc, #48]	; (23d2c <socketInit+0x38>)
   23cfa:	781b      	ldrb	r3, [r3, #0]
   23cfc:	b2db      	uxtb	r3, r3
   23cfe:	2b00      	cmp	r3, #0
   23d00:	d110      	bne.n	23d24 <socketInit+0x30>
	{
		m2m_memset((uint8*)gastrSockets, 0, MAX_SOCKET * sizeof(tstrSocket));
   23d02:	4b0b      	ldr	r3, [pc, #44]	; (23d30 <socketInit+0x3c>)
   23d04:	22b0      	movs	r2, #176	; 0xb0
   23d06:	2100      	movs	r1, #0
   23d08:	0018      	movs	r0, r3
   23d0a:	4b0a      	ldr	r3, [pc, #40]	; (23d34 <socketInit+0x40>)
   23d0c:	4798      	blx	r3
		hif_register_cb(M2M_REQ_GROUP_IP,m2m_ip_cb);
   23d0e:	4b0a      	ldr	r3, [pc, #40]	; (23d38 <socketInit+0x44>)
   23d10:	0019      	movs	r1, r3
   23d12:	2002      	movs	r0, #2
   23d14:	4b09      	ldr	r3, [pc, #36]	; (23d3c <socketInit+0x48>)
   23d16:	4798      	blx	r3
		gbSocketInit	= 1;
   23d18:	4b04      	ldr	r3, [pc, #16]	; (23d2c <socketInit+0x38>)
   23d1a:	2201      	movs	r2, #1
   23d1c:	701a      	strb	r2, [r3, #0]
		gu16SessionID	= 0;
   23d1e:	4b08      	ldr	r3, [pc, #32]	; (23d40 <socketInit+0x4c>)
   23d20:	2200      	movs	r2, #0
   23d22:	801a      	strh	r2, [r3, #0]
	}
}
   23d24:	46c0      	nop			; (mov r8, r8)
   23d26:	46bd      	mov	sp, r7
   23d28:	bd80      	pop	{r7, pc}
   23d2a:	46c0      	nop			; (mov r8, r8)
   23d2c:	20003d50 	.word	0x20003d50
   23d30:	200055a4 	.word	0x200055a4
   23d34:	0001f425 	.word	0x0001f425
   23d38:	000237a5 	.word	0x000237a5
   23d3c:	00020121 	.word	0x00020121
   23d40:	20003d4e 	.word	0x20003d4e

00023d44 <socketDeinit>:

Date
		27 Feb 2015
*********************************************************************/
void socketDeinit(void)
{	
   23d44:	b580      	push	{r7, lr}
   23d46:	af00      	add	r7, sp, #0
	m2m_memset((uint8*)gastrSockets, 0, MAX_SOCKET * sizeof(tstrSocket));
   23d48:	4b0a      	ldr	r3, [pc, #40]	; (23d74 <socketDeinit+0x30>)
   23d4a:	22b0      	movs	r2, #176	; 0xb0
   23d4c:	2100      	movs	r1, #0
   23d4e:	0018      	movs	r0, r3
   23d50:	4b09      	ldr	r3, [pc, #36]	; (23d78 <socketDeinit+0x34>)
   23d52:	4798      	blx	r3
	hif_register_cb(M2M_REQ_GROUP_IP, NULL);
   23d54:	2100      	movs	r1, #0
   23d56:	2002      	movs	r0, #2
   23d58:	4b08      	ldr	r3, [pc, #32]	; (23d7c <socketDeinit+0x38>)
   23d5a:	4798      	blx	r3
	gpfAppSocketCb	= NULL;
   23d5c:	4b08      	ldr	r3, [pc, #32]	; (23d80 <socketDeinit+0x3c>)
   23d5e:	2200      	movs	r2, #0
   23d60:	601a      	str	r2, [r3, #0]
	gpfAppResolveCb	= NULL;
   23d62:	4b08      	ldr	r3, [pc, #32]	; (23d84 <socketDeinit+0x40>)
   23d64:	2200      	movs	r2, #0
   23d66:	601a      	str	r2, [r3, #0]
	gbSocketInit	= 0;
   23d68:	4b07      	ldr	r3, [pc, #28]	; (23d88 <socketDeinit+0x44>)
   23d6a:	2200      	movs	r2, #0
   23d6c:	701a      	strb	r2, [r3, #0]
}
   23d6e:	46c0      	nop			; (mov r8, r8)
   23d70:	46bd      	mov	sp, r7
   23d72:	bd80      	pop	{r7, pc}
   23d74:	200055a4 	.word	0x200055a4
   23d78:	0001f425 	.word	0x0001f425
   23d7c:	00020121 	.word	0x00020121
   23d80:	20005654 	.word	0x20005654
   23d84:	2000565c 	.word	0x2000565c
   23d88:	20003d50 	.word	0x20003d50

00023d8c <registerSocketCallback>:

Date
		4 June 2012
*********************************************************************/
void registerSocketCallback(tpfAppSocketCb pfAppSocketCb, tpfAppResolveCb pfAppResolveCb)
{
   23d8c:	b580      	push	{r7, lr}
   23d8e:	b082      	sub	sp, #8
   23d90:	af00      	add	r7, sp, #0
   23d92:	6078      	str	r0, [r7, #4]
   23d94:	6039      	str	r1, [r7, #0]
	gpfAppSocketCb = pfAppSocketCb;
   23d96:	4b05      	ldr	r3, [pc, #20]	; (23dac <registerSocketCallback+0x20>)
   23d98:	687a      	ldr	r2, [r7, #4]
   23d9a:	601a      	str	r2, [r3, #0]
	gpfAppResolveCb = pfAppResolveCb;
   23d9c:	4b04      	ldr	r3, [pc, #16]	; (23db0 <registerSocketCallback+0x24>)
   23d9e:	683a      	ldr	r2, [r7, #0]
   23da0:	601a      	str	r2, [r3, #0]
}
   23da2:	46c0      	nop			; (mov r8, r8)
   23da4:	46bd      	mov	sp, r7
   23da6:	b002      	add	sp, #8
   23da8:	bd80      	pop	{r7, pc}
   23daa:	46c0      	nop			; (mov r8, r8)
   23dac:	20005654 	.word	0x20005654
   23db0:	2000565c 	.word	0x2000565c

00023db4 <socket>:

Date
		4 June 2012
*********************************************************************/
SOCKET socket(uint16 u16Domain, uint8 u8Type, uint8 u8Flags)
{
   23db4:	b590      	push	{r4, r7, lr}
   23db6:	b08d      	sub	sp, #52	; 0x34
   23db8:	af04      	add	r7, sp, #16
   23dba:	0004      	movs	r4, r0
   23dbc:	0008      	movs	r0, r1
   23dbe:	0011      	movs	r1, r2
   23dc0:	1dbb      	adds	r3, r7, #6
   23dc2:	1c22      	adds	r2, r4, #0
   23dc4:	801a      	strh	r2, [r3, #0]
   23dc6:	1d7b      	adds	r3, r7, #5
   23dc8:	1c02      	adds	r2, r0, #0
   23dca:	701a      	strb	r2, [r3, #0]
   23dcc:	1d3b      	adds	r3, r7, #4
   23dce:	1c0a      	adds	r2, r1, #0
   23dd0:	701a      	strb	r2, [r3, #0]
	SOCKET					sock = -1;
   23dd2:	231f      	movs	r3, #31
   23dd4:	18fb      	adds	r3, r7, r3
   23dd6:	22ff      	movs	r2, #255	; 0xff
   23dd8:	701a      	strb	r2, [r3, #0]
	volatile tstrSocket		*pstrSock;
	static volatile uint8	u8NextTcpSock	= 0;
	static volatile uint8	u8NextUdpSock	= 0;

	/* The only supported family is the AF_INET for UDP and TCP transport layer protocols. */
	if(u16Domain == AF_INET)
   23dda:	1dbb      	adds	r3, r7, #6
   23ddc:	881b      	ldrh	r3, [r3, #0]
   23dde:	2b02      	cmp	r3, #2
   23de0:	d000      	beq.n	23de4 <socket+0x30>
   23de2:	e0ce      	b.n	23f82 <socket+0x1ce>
	{
		if(u8Type == SOCK_STREAM)
   23de4:	1d7b      	adds	r3, r7, #5
   23de6:	781b      	ldrb	r3, [r3, #0]
   23de8:	2b01      	cmp	r3, #1
   23dea:	d135      	bne.n	23e58 <socket+0xa4>
		{
			for(u8Count = 0; u8Count < TCP_SOCK_MAX; u8Count ++)
   23dec:	231e      	movs	r3, #30
   23dee:	18fb      	adds	r3, r7, r3
   23df0:	2200      	movs	r2, #0
   23df2:	701a      	strb	r2, [r3, #0]
   23df4:	e02a      	b.n	23e4c <socket+0x98>
			{
				u8SockID	= u8NextTcpSock;
   23df6:	2317      	movs	r3, #23
   23df8:	18fb      	adds	r3, r7, r3
   23dfa:	4a66      	ldr	r2, [pc, #408]	; (23f94 <socket+0x1e0>)
   23dfc:	7812      	ldrb	r2, [r2, #0]
   23dfe:	701a      	strb	r2, [r3, #0]
				pstrSock	= &gastrSockets[u8NextTcpSock];
   23e00:	4b64      	ldr	r3, [pc, #400]	; (23f94 <socket+0x1e0>)
   23e02:	781b      	ldrb	r3, [r3, #0]
   23e04:	b2db      	uxtb	r3, r3
   23e06:	011a      	lsls	r2, r3, #4
   23e08:	4b63      	ldr	r3, [pc, #396]	; (23f98 <socket+0x1e4>)
   23e0a:	18d3      	adds	r3, r2, r3
   23e0c:	61bb      	str	r3, [r7, #24]
				u8NextTcpSock = (u8NextTcpSock + 1) % TCP_SOCK_MAX;
   23e0e:	4b61      	ldr	r3, [pc, #388]	; (23f94 <socket+0x1e0>)
   23e10:	781b      	ldrb	r3, [r3, #0]
   23e12:	b2db      	uxtb	r3, r3
   23e14:	1c5a      	adds	r2, r3, #1
   23e16:	4b61      	ldr	r3, [pc, #388]	; (23f9c <socket+0x1e8>)
   23e18:	2107      	movs	r1, #7
   23e1a:	0010      	movs	r0, r2
   23e1c:	4798      	blx	r3
   23e1e:	000b      	movs	r3, r1
   23e20:	b2da      	uxtb	r2, r3
   23e22:	4b5c      	ldr	r3, [pc, #368]	; (23f94 <socket+0x1e0>)
   23e24:	701a      	strb	r2, [r3, #0]
				if(!pstrSock->bIsUsed)
   23e26:	69bb      	ldr	r3, [r7, #24]
   23e28:	7a9b      	ldrb	r3, [r3, #10]
   23e2a:	b2db      	uxtb	r3, r3
   23e2c:	2b00      	cmp	r3, #0
   23e2e:	d106      	bne.n	23e3e <socket+0x8a>
				{
					sock = (SOCKET)u8SockID;
   23e30:	231f      	movs	r3, #31
   23e32:	18fb      	adds	r3, r7, r3
   23e34:	2217      	movs	r2, #23
   23e36:	18ba      	adds	r2, r7, r2
   23e38:	7812      	ldrb	r2, [r2, #0]
   23e3a:	701a      	strb	r2, [r3, #0]
					break;
   23e3c:	e04c      	b.n	23ed8 <socket+0x124>
			for(u8Count = 0; u8Count < TCP_SOCK_MAX; u8Count ++)
   23e3e:	231e      	movs	r3, #30
   23e40:	18fb      	adds	r3, r7, r3
   23e42:	781a      	ldrb	r2, [r3, #0]
   23e44:	231e      	movs	r3, #30
   23e46:	18fb      	adds	r3, r7, r3
   23e48:	3201      	adds	r2, #1
   23e4a:	701a      	strb	r2, [r3, #0]
   23e4c:	231e      	movs	r3, #30
   23e4e:	18fb      	adds	r3, r7, r3
   23e50:	781b      	ldrb	r3, [r3, #0]
   23e52:	2b06      	cmp	r3, #6
   23e54:	d9cf      	bls.n	23df6 <socket+0x42>
   23e56:	e03f      	b.n	23ed8 <socket+0x124>
				}
			}
		}
		else if(u8Type == SOCK_DGRAM)
   23e58:	1d7b      	adds	r3, r7, #5
   23e5a:	781b      	ldrb	r3, [r3, #0]
   23e5c:	2b02      	cmp	r3, #2
   23e5e:	d13b      	bne.n	23ed8 <socket+0x124>
		{
			volatile tstrSocket	*pastrUDPSockets = &gastrSockets[TCP_SOCK_MAX];
   23e60:	4b4f      	ldr	r3, [pc, #316]	; (23fa0 <socket+0x1ec>)
   23e62:	613b      	str	r3, [r7, #16]
			for(u8Count = 0; u8Count < UDP_SOCK_MAX; u8Count ++)
   23e64:	231e      	movs	r3, #30
   23e66:	18fb      	adds	r3, r7, r3
   23e68:	2200      	movs	r2, #0
   23e6a:	701a      	strb	r2, [r3, #0]
   23e6c:	e02f      	b.n	23ece <socket+0x11a>
			{
				u8SockID		= u8NextUdpSock;
   23e6e:	2317      	movs	r3, #23
   23e70:	18fb      	adds	r3, r7, r3
   23e72:	4a4c      	ldr	r2, [pc, #304]	; (23fa4 <socket+0x1f0>)
   23e74:	7812      	ldrb	r2, [r2, #0]
   23e76:	701a      	strb	r2, [r3, #0]
				pstrSock		= &pastrUDPSockets[u8NextUdpSock];
   23e78:	4b4a      	ldr	r3, [pc, #296]	; (23fa4 <socket+0x1f0>)
   23e7a:	781b      	ldrb	r3, [r3, #0]
   23e7c:	b2db      	uxtb	r3, r3
   23e7e:	011b      	lsls	r3, r3, #4
   23e80:	693a      	ldr	r2, [r7, #16]
   23e82:	18d3      	adds	r3, r2, r3
   23e84:	61bb      	str	r3, [r7, #24]
				u8NextUdpSock	= (u8NextUdpSock + 1) % UDP_SOCK_MAX;
   23e86:	4b47      	ldr	r3, [pc, #284]	; (23fa4 <socket+0x1f0>)
   23e88:	781b      	ldrb	r3, [r3, #0]
   23e8a:	b2db      	uxtb	r3, r3
   23e8c:	3301      	adds	r3, #1
   23e8e:	4a46      	ldr	r2, [pc, #280]	; (23fa8 <socket+0x1f4>)
   23e90:	4013      	ands	r3, r2
   23e92:	d504      	bpl.n	23e9e <socket+0xea>
   23e94:	3b01      	subs	r3, #1
   23e96:	2204      	movs	r2, #4
   23e98:	4252      	negs	r2, r2
   23e9a:	4313      	orrs	r3, r2
   23e9c:	3301      	adds	r3, #1
   23e9e:	b2da      	uxtb	r2, r3
   23ea0:	4b40      	ldr	r3, [pc, #256]	; (23fa4 <socket+0x1f0>)
   23ea2:	701a      	strb	r2, [r3, #0]
				if(!pstrSock->bIsUsed)
   23ea4:	69bb      	ldr	r3, [r7, #24]
   23ea6:	7a9b      	ldrb	r3, [r3, #10]
   23ea8:	b2db      	uxtb	r3, r3
   23eaa:	2b00      	cmp	r3, #0
   23eac:	d108      	bne.n	23ec0 <socket+0x10c>
				{
					sock = (SOCKET)(u8SockID + TCP_SOCK_MAX);
   23eae:	2317      	movs	r3, #23
   23eb0:	18fb      	adds	r3, r7, r3
   23eb2:	781b      	ldrb	r3, [r3, #0]
   23eb4:	3307      	adds	r3, #7
   23eb6:	b2da      	uxtb	r2, r3
   23eb8:	231f      	movs	r3, #31
   23eba:	18fb      	adds	r3, r7, r3
   23ebc:	701a      	strb	r2, [r3, #0]
					break;
   23ebe:	e00b      	b.n	23ed8 <socket+0x124>
			for(u8Count = 0; u8Count < UDP_SOCK_MAX; u8Count ++)
   23ec0:	231e      	movs	r3, #30
   23ec2:	18fb      	adds	r3, r7, r3
   23ec4:	781a      	ldrb	r2, [r3, #0]
   23ec6:	231e      	movs	r3, #30
   23ec8:	18fb      	adds	r3, r7, r3
   23eca:	3201      	adds	r2, #1
   23ecc:	701a      	strb	r2, [r3, #0]
   23ece:	231e      	movs	r3, #30
   23ed0:	18fb      	adds	r3, r7, r3
   23ed2:	781b      	ldrb	r3, [r3, #0]
   23ed4:	2b03      	cmp	r3, #3
   23ed6:	d9ca      	bls.n	23e6e <socket+0xba>
				}
			}
		}

		if(sock >= 0)
   23ed8:	231f      	movs	r3, #31
   23eda:	18fb      	adds	r3, r7, r3
   23edc:	781b      	ldrb	r3, [r3, #0]
   23ede:	2b7f      	cmp	r3, #127	; 0x7f
   23ee0:	d84f      	bhi.n	23f82 <socket+0x1ce>
		{
			m2m_memset((uint8*)pstrSock, 0, sizeof(tstrSocket));
   23ee2:	69bb      	ldr	r3, [r7, #24]
   23ee4:	2210      	movs	r2, #16
   23ee6:	2100      	movs	r1, #0
   23ee8:	0018      	movs	r0, r3
   23eea:	4b30      	ldr	r3, [pc, #192]	; (23fac <socket+0x1f8>)
   23eec:	4798      	blx	r3
			pstrSock->bIsUsed = 1;
   23eee:	69bb      	ldr	r3, [r7, #24]
   23ef0:	2201      	movs	r2, #1
   23ef2:	729a      	strb	r2, [r3, #10]

			/* The session ID is used to distinguish different socket connections
				by comparing the assigned session ID to the one reported by the firmware*/
			++gu16SessionID;
   23ef4:	4b2e      	ldr	r3, [pc, #184]	; (23fb0 <socket+0x1fc>)
   23ef6:	881b      	ldrh	r3, [r3, #0]
   23ef8:	b29b      	uxth	r3, r3
   23efa:	3301      	adds	r3, #1
   23efc:	b29a      	uxth	r2, r3
   23efe:	4b2c      	ldr	r3, [pc, #176]	; (23fb0 <socket+0x1fc>)
   23f00:	801a      	strh	r2, [r3, #0]
			if(gu16SessionID == 0)
   23f02:	4b2b      	ldr	r3, [pc, #172]	; (23fb0 <socket+0x1fc>)
   23f04:	881b      	ldrh	r3, [r3, #0]
   23f06:	b29b      	uxth	r3, r3
   23f08:	2b00      	cmp	r3, #0
   23f0a:	d106      	bne.n	23f1a <socket+0x166>
				++gu16SessionID;
   23f0c:	4b28      	ldr	r3, [pc, #160]	; (23fb0 <socket+0x1fc>)
   23f0e:	881b      	ldrh	r3, [r3, #0]
   23f10:	b29b      	uxth	r3, r3
   23f12:	3301      	adds	r3, #1
   23f14:	b29a      	uxth	r2, r3
   23f16:	4b26      	ldr	r3, [pc, #152]	; (23fb0 <socket+0x1fc>)
   23f18:	801a      	strh	r2, [r3, #0]
				
			pstrSock->u16SessionID = gu16SessionID;
   23f1a:	4b25      	ldr	r3, [pc, #148]	; (23fb0 <socket+0x1fc>)
   23f1c:	881b      	ldrh	r3, [r3, #0]
   23f1e:	b29a      	uxth	r2, r3
   23f20:	69bb      	ldr	r3, [r7, #24]
   23f22:	80da      	strh	r2, [r3, #6]
            M2M_INFO("Socket %d session ID = %d\r\n",sock, gu16SessionID );
   23f24:	4b23      	ldr	r3, [pc, #140]	; (23fb4 <socket+0x200>)
   23f26:	0018      	movs	r0, r3
   23f28:	4b23      	ldr	r3, [pc, #140]	; (23fb8 <socket+0x204>)
   23f2a:	4798      	blx	r3
   23f2c:	231f      	movs	r3, #31
   23f2e:	18fb      	adds	r3, r7, r3
   23f30:	2100      	movs	r1, #0
   23f32:	5659      	ldrsb	r1, [r3, r1]
   23f34:	4b1e      	ldr	r3, [pc, #120]	; (23fb0 <socket+0x1fc>)
   23f36:	881b      	ldrh	r3, [r3, #0]
   23f38:	b29b      	uxth	r3, r3
   23f3a:	001a      	movs	r2, r3
   23f3c:	4b1f      	ldr	r3, [pc, #124]	; (23fbc <socket+0x208>)
   23f3e:	0018      	movs	r0, r3
   23f40:	4b1d      	ldr	r3, [pc, #116]	; (23fb8 <socket+0x204>)
   23f42:	4798      	blx	r3
   23f44:	4b1e      	ldr	r3, [pc, #120]	; (23fc0 <socket+0x20c>)
   23f46:	0018      	movs	r0, r3
   23f48:	4b1b      	ldr	r3, [pc, #108]	; (23fb8 <socket+0x204>)
   23f4a:	4798      	blx	r3

			if(u8Flags & SOCKET_FLAGS_SSL)
   23f4c:	1d3b      	adds	r3, r7, #4
   23f4e:	781b      	ldrb	r3, [r3, #0]
   23f50:	2201      	movs	r2, #1
   23f52:	4013      	ands	r3, r2
   23f54:	d015      	beq.n	23f82 <socket+0x1ce>
			{
				tstrSSLSocketCreateCmd	strSSLCreate;
				strSSLCreate.sslSock = sock;
   23f56:	230c      	movs	r3, #12
   23f58:	18fb      	adds	r3, r7, r3
   23f5a:	221f      	movs	r2, #31
   23f5c:	18ba      	adds	r2, r7, r2
   23f5e:	7812      	ldrb	r2, [r2, #0]
   23f60:	701a      	strb	r2, [r3, #0]
				pstrSock->u8SSLFlags = SSL_FLAGS_ACTIVE | SSL_FLAGS_NO_TX_COPY;
   23f62:	69bb      	ldr	r3, [r7, #24]
   23f64:	2221      	movs	r2, #33	; 0x21
   23f66:	72da      	strb	r2, [r3, #11]
				SOCKET_REQUEST(SOCKET_CMD_SSL_CREATE, (uint8*)&strSSLCreate, sizeof(tstrSSLSocketCreateCmd), 0, 0, 0);
   23f68:	230c      	movs	r3, #12
   23f6a:	18fa      	adds	r2, r7, r3
   23f6c:	2300      	movs	r3, #0
   23f6e:	9302      	str	r3, [sp, #8]
   23f70:	2300      	movs	r3, #0
   23f72:	9301      	str	r3, [sp, #4]
   23f74:	2300      	movs	r3, #0
   23f76:	9300      	str	r3, [sp, #0]
   23f78:	2304      	movs	r3, #4
   23f7a:	2150      	movs	r1, #80	; 0x50
   23f7c:	2002      	movs	r0, #2
   23f7e:	4c11      	ldr	r4, [pc, #68]	; (23fc4 <socket+0x210>)
   23f80:	47a0      	blx	r4
			}
		}
	}
	return sock;
   23f82:	231f      	movs	r3, #31
   23f84:	18fb      	adds	r3, r7, r3
   23f86:	781b      	ldrb	r3, [r3, #0]
   23f88:	b25b      	sxtb	r3, r3
}
   23f8a:	0018      	movs	r0, r3
   23f8c:	46bd      	mov	sp, r7
   23f8e:	b009      	add	sp, #36	; 0x24
   23f90:	bd90      	pop	{r4, r7, pc}
   23f92:	46c0      	nop			; (mov r8, r8)
   23f94:	20003d51 	.word	0x20003d51
   23f98:	200055a4 	.word	0x200055a4
   23f9c:	000313cd 	.word	0x000313cd
   23fa0:	20005614 	.word	0x20005614
   23fa4:	20003d52 	.word	0x20003d52
   23fa8:	80000003 	.word	0x80000003
   23fac:	0001f425 	.word	0x0001f425
   23fb0:	20003d4e 	.word	0x20003d4e
   23fb4:	0003783c 	.word	0x0003783c
   23fb8:	0001c65d 	.word	0x0001c65d
   23fbc:	00037860 	.word	0x00037860
   23fc0:	0003785c 	.word	0x0003785c
   23fc4:	0001f685 	.word	0x0001f685

00023fc8 <connect>:

Date
		5 June 2012
*********************************************************************/
sint8 connect(SOCKET sock, struct sockaddr *pstrAddr, uint8 u8AddrLen)
{
   23fc8:	b5b0      	push	{r4, r5, r7, lr}
   23fca:	b08a      	sub	sp, #40	; 0x28
   23fcc:	af04      	add	r7, sp, #16
   23fce:	6039      	str	r1, [r7, #0]
   23fd0:	0011      	movs	r1, r2
   23fd2:	1dfb      	adds	r3, r7, #7
   23fd4:	1c02      	adds	r2, r0, #0
   23fd6:	701a      	strb	r2, [r3, #0]
   23fd8:	1dbb      	adds	r3, r7, #6
   23fda:	1c0a      	adds	r2, r1, #0
   23fdc:	701a      	strb	r2, [r3, #0]
	sint8	s8Ret = SOCK_ERR_INVALID_ARG;
   23fde:	2317      	movs	r3, #23
   23fe0:	18fb      	adds	r3, r7, r3
   23fe2:	22fa      	movs	r2, #250	; 0xfa
   23fe4:	701a      	strb	r2, [r3, #0]
	if((sock >= 0) && (pstrAddr != NULL) && (gastrSockets[sock].bIsUsed == 1) && (u8AddrLen != 0))
   23fe6:	1dfb      	adds	r3, r7, #7
   23fe8:	781b      	ldrb	r3, [r3, #0]
   23fea:	2b7f      	cmp	r3, #127	; 0x7f
   23fec:	d867      	bhi.n	240be <connect+0xf6>
   23fee:	683b      	ldr	r3, [r7, #0]
   23ff0:	2b00      	cmp	r3, #0
   23ff2:	d064      	beq.n	240be <connect+0xf6>
   23ff4:	1dfb      	adds	r3, r7, #7
   23ff6:	781b      	ldrb	r3, [r3, #0]
   23ff8:	b25b      	sxtb	r3, r3
   23ffa:	4a35      	ldr	r2, [pc, #212]	; (240d0 <connect+0x108>)
   23ffc:	011b      	lsls	r3, r3, #4
   23ffe:	18d3      	adds	r3, r2, r3
   24000:	330a      	adds	r3, #10
   24002:	781b      	ldrb	r3, [r3, #0]
   24004:	b2db      	uxtb	r3, r3
   24006:	2b01      	cmp	r3, #1
   24008:	d159      	bne.n	240be <connect+0xf6>
   2400a:	1dbb      	adds	r3, r7, #6
   2400c:	781b      	ldrb	r3, [r3, #0]
   2400e:	2b00      	cmp	r3, #0
   24010:	d055      	beq.n	240be <connect+0xf6>
	{
		tstrConnectCmd	strConnect;
		uint8			u8Cmd = SOCKET_CMD_CONNECT;
   24012:	2316      	movs	r3, #22
   24014:	18fb      	adds	r3, r7, r3
   24016:	2244      	movs	r2, #68	; 0x44
   24018:	701a      	strb	r2, [r3, #0]
		if((gastrSockets[sock].u8SSLFlags) & SSL_FLAGS_ACTIVE)
   2401a:	1dfb      	adds	r3, r7, #7
   2401c:	781b      	ldrb	r3, [r3, #0]
   2401e:	b25b      	sxtb	r3, r3
   24020:	4a2b      	ldr	r2, [pc, #172]	; (240d0 <connect+0x108>)
   24022:	011b      	lsls	r3, r3, #4
   24024:	18d3      	adds	r3, r2, r3
   24026:	330b      	adds	r3, #11
   24028:	781b      	ldrb	r3, [r3, #0]
   2402a:	b2db      	uxtb	r3, r3
   2402c:	001a      	movs	r2, r3
   2402e:	2301      	movs	r3, #1
   24030:	4013      	ands	r3, r2
   24032:	d00f      	beq.n	24054 <connect+0x8c>
		{
			u8Cmd = SOCKET_CMD_SSL_CONNECT;
   24034:	2316      	movs	r3, #22
   24036:	18fb      	adds	r3, r7, r3
   24038:	224b      	movs	r2, #75	; 0x4b
   2403a:	701a      	strb	r2, [r3, #0]
			strConnect.u8SslFlags = gastrSockets[sock].u8SSLFlags;
   2403c:	1dfb      	adds	r3, r7, #7
   2403e:	781b      	ldrb	r3, [r3, #0]
   24040:	b25b      	sxtb	r3, r3
   24042:	4a23      	ldr	r2, [pc, #140]	; (240d0 <connect+0x108>)
   24044:	011b      	lsls	r3, r3, #4
   24046:	18d3      	adds	r3, r2, r3
   24048:	330b      	adds	r3, #11
   2404a:	781b      	ldrb	r3, [r3, #0]
   2404c:	b2da      	uxtb	r2, r3
   2404e:	2308      	movs	r3, #8
   24050:	18fb      	adds	r3, r7, r3
   24052:	725a      	strb	r2, [r3, #9]
		}
		strConnect.sock = sock;
   24054:	2308      	movs	r3, #8
   24056:	18fb      	adds	r3, r7, r3
   24058:	1dfa      	adds	r2, r7, #7
   2405a:	7812      	ldrb	r2, [r2, #0]
   2405c:	721a      	strb	r2, [r3, #8]
		m2m_memcpy((uint8 *)&strConnect.strAddr, (uint8 *)pstrAddr, sizeof(tstrSockAddr));
   2405e:	6839      	ldr	r1, [r7, #0]
   24060:	2308      	movs	r3, #8
   24062:	18fb      	adds	r3, r7, r3
   24064:	2208      	movs	r2, #8
   24066:	0018      	movs	r0, r3
   24068:	4b1a      	ldr	r3, [pc, #104]	; (240d4 <connect+0x10c>)
   2406a:	4798      	blx	r3

		strConnect.u16SessionID		= gastrSockets[sock].u16SessionID;
   2406c:	1dfb      	adds	r3, r7, #7
   2406e:	781b      	ldrb	r3, [r3, #0]
   24070:	b25b      	sxtb	r3, r3
   24072:	4a17      	ldr	r2, [pc, #92]	; (240d0 <connect+0x108>)
   24074:	011b      	lsls	r3, r3, #4
   24076:	18d3      	adds	r3, r2, r3
   24078:	3306      	adds	r3, #6
   2407a:	881b      	ldrh	r3, [r3, #0]
   2407c:	b29a      	uxth	r2, r3
   2407e:	2308      	movs	r3, #8
   24080:	18fb      	adds	r3, r7, r3
   24082:	815a      	strh	r2, [r3, #10]
		s8Ret = SOCKET_REQUEST(u8Cmd, (uint8*)&strConnect,sizeof(tstrConnectCmd), NULL, 0, 0);
   24084:	2317      	movs	r3, #23
   24086:	18fc      	adds	r4, r7, r3
   24088:	2308      	movs	r3, #8
   2408a:	18fa      	adds	r2, r7, r3
   2408c:	2316      	movs	r3, #22
   2408e:	18fb      	adds	r3, r7, r3
   24090:	7819      	ldrb	r1, [r3, #0]
   24092:	2300      	movs	r3, #0
   24094:	9302      	str	r3, [sp, #8]
   24096:	2300      	movs	r3, #0
   24098:	9301      	str	r3, [sp, #4]
   2409a:	2300      	movs	r3, #0
   2409c:	9300      	str	r3, [sp, #0]
   2409e:	230c      	movs	r3, #12
   240a0:	2002      	movs	r0, #2
   240a2:	4d0d      	ldr	r5, [pc, #52]	; (240d8 <connect+0x110>)
   240a4:	47a8      	blx	r5
   240a6:	0003      	movs	r3, r0
   240a8:	7023      	strb	r3, [r4, #0]
		if(s8Ret != SOCK_ERR_NO_ERROR)
   240aa:	2317      	movs	r3, #23
   240ac:	18fb      	adds	r3, r7, r3
   240ae:	781b      	ldrb	r3, [r3, #0]
   240b0:	b25b      	sxtb	r3, r3
   240b2:	2b00      	cmp	r3, #0
   240b4:	d003      	beq.n	240be <connect+0xf6>
		{
			s8Ret = SOCK_ERR_INVALID;
   240b6:	2317      	movs	r3, #23
   240b8:	18fb      	adds	r3, r7, r3
   240ba:	22f7      	movs	r2, #247	; 0xf7
   240bc:	701a      	strb	r2, [r3, #0]
		}
	}
	return s8Ret;
   240be:	2317      	movs	r3, #23
   240c0:	18fb      	adds	r3, r7, r3
   240c2:	781b      	ldrb	r3, [r3, #0]
   240c4:	b25b      	sxtb	r3, r3
}
   240c6:	0018      	movs	r0, r3
   240c8:	46bd      	mov	sp, r7
   240ca:	b006      	add	sp, #24
   240cc:	bdb0      	pop	{r4, r5, r7, pc}
   240ce:	46c0      	nop			; (mov r8, r8)
   240d0:	200055a4 	.word	0x200055a4
   240d4:	0001f3e9 	.word	0x0001f3e9
   240d8:	0001f685 	.word	0x0001f685

000240dc <send>:

Date
		5 June 2012
*********************************************************************/
sint16 send(SOCKET sock, void *pvSendBuffer, uint16 u16SendLength, uint16 flags)
{
   240dc:	b590      	push	{r4, r7, lr}
   240de:	b08f      	sub	sp, #60	; 0x3c
   240e0:	af04      	add	r7, sp, #16
   240e2:	0004      	movs	r4, r0
   240e4:	60b9      	str	r1, [r7, #8]
   240e6:	0010      	movs	r0, r2
   240e8:	0019      	movs	r1, r3
   240ea:	230f      	movs	r3, #15
   240ec:	18fb      	adds	r3, r7, r3
   240ee:	1c22      	adds	r2, r4, #0
   240f0:	701a      	strb	r2, [r3, #0]
   240f2:	230c      	movs	r3, #12
   240f4:	18fb      	adds	r3, r7, r3
   240f6:	1c02      	adds	r2, r0, #0
   240f8:	801a      	strh	r2, [r3, #0]
   240fa:	1dbb      	adds	r3, r7, #6
   240fc:	1c0a      	adds	r2, r1, #0
   240fe:	801a      	strh	r2, [r3, #0]
	sint16	s16Ret = SOCK_ERR_INVALID_ARG;
   24100:	2326      	movs	r3, #38	; 0x26
   24102:	18fb      	adds	r3, r7, r3
   24104:	2206      	movs	r2, #6
   24106:	4252      	negs	r2, r2
   24108:	801a      	strh	r2, [r3, #0]
	
	if((sock >= 0) && (pvSendBuffer != NULL) && (u16SendLength <= SOCKET_BUFFER_MAX_LENGTH) && (gastrSockets[sock].bIsUsed == 1))
   2410a:	230f      	movs	r3, #15
   2410c:	18fb      	adds	r3, r7, r3
   2410e:	781b      	ldrb	r3, [r3, #0]
   24110:	2b7f      	cmp	r3, #127	; 0x7f
   24112:	d900      	bls.n	24116 <send+0x3a>
   24114:	e087      	b.n	24226 <send+0x14a>
   24116:	68bb      	ldr	r3, [r7, #8]
   24118:	2b00      	cmp	r3, #0
   2411a:	d100      	bne.n	2411e <send+0x42>
   2411c:	e083      	b.n	24226 <send+0x14a>
   2411e:	230c      	movs	r3, #12
   24120:	18fb      	adds	r3, r7, r3
   24122:	881a      	ldrh	r2, [r3, #0]
   24124:	23af      	movs	r3, #175	; 0xaf
   24126:	00db      	lsls	r3, r3, #3
   24128:	429a      	cmp	r2, r3
   2412a:	d900      	bls.n	2412e <send+0x52>
   2412c:	e07b      	b.n	24226 <send+0x14a>
   2412e:	230f      	movs	r3, #15
   24130:	18fb      	adds	r3, r7, r3
   24132:	781b      	ldrb	r3, [r3, #0]
   24134:	b25b      	sxtb	r3, r3
   24136:	4a40      	ldr	r2, [pc, #256]	; (24238 <send+0x15c>)
   24138:	011b      	lsls	r3, r3, #4
   2413a:	18d3      	adds	r3, r2, r3
   2413c:	330a      	adds	r3, #10
   2413e:	781b      	ldrb	r3, [r3, #0]
   24140:	b2db      	uxtb	r3, r3
   24142:	2b01      	cmp	r3, #1
   24144:	d16f      	bne.n	24226 <send+0x14a>
	{
		uint16			u16DataOffset;
		tstrSendCmd		strSend;
		uint8			u8Cmd;

		u8Cmd			= SOCKET_CMD_SEND;
   24146:	2323      	movs	r3, #35	; 0x23
   24148:	18fb      	adds	r3, r7, r3
   2414a:	2245      	movs	r2, #69	; 0x45
   2414c:	701a      	strb	r2, [r3, #0]
		u16DataOffset	= TCP_TX_PACKET_OFFSET;
   2414e:	2324      	movs	r3, #36	; 0x24
   24150:	18fb      	adds	r3, r7, r3
   24152:	2250      	movs	r2, #80	; 0x50
   24154:	801a      	strh	r2, [r3, #0]

		strSend.sock			= sock;
   24156:	2310      	movs	r3, #16
   24158:	18fb      	adds	r3, r7, r3
   2415a:	220f      	movs	r2, #15
   2415c:	18ba      	adds	r2, r7, r2
   2415e:	7812      	ldrb	r2, [r2, #0]
   24160:	701a      	strb	r2, [r3, #0]
		strSend.u16DataSize		= NM_BSP_B_L_16(u16SendLength);
   24162:	2310      	movs	r3, #16
   24164:	18fb      	adds	r3, r7, r3
   24166:	220c      	movs	r2, #12
   24168:	18ba      	adds	r2, r7, r2
   2416a:	8812      	ldrh	r2, [r2, #0]
   2416c:	805a      	strh	r2, [r3, #2]
		strSend.u16SessionID	= gastrSockets[sock].u16SessionID;
   2416e:	230f      	movs	r3, #15
   24170:	18fb      	adds	r3, r7, r3
   24172:	781b      	ldrb	r3, [r3, #0]
   24174:	b25b      	sxtb	r3, r3
   24176:	4a30      	ldr	r2, [pc, #192]	; (24238 <send+0x15c>)
   24178:	011b      	lsls	r3, r3, #4
   2417a:	18d3      	adds	r3, r2, r3
   2417c:	3306      	adds	r3, #6
   2417e:	881b      	ldrh	r3, [r3, #0]
   24180:	b29a      	uxth	r2, r3
   24182:	2310      	movs	r3, #16
   24184:	18fb      	adds	r3, r7, r3
   24186:	819a      	strh	r2, [r3, #12]

		if(sock >= TCP_SOCK_MAX)
   24188:	230f      	movs	r3, #15
   2418a:	18fb      	adds	r3, r7, r3
   2418c:	781b      	ldrb	r3, [r3, #0]
   2418e:	b25b      	sxtb	r3, r3
   24190:	2b06      	cmp	r3, #6
   24192:	dd03      	ble.n	2419c <send+0xc0>
		{
			u16DataOffset = UDP_TX_PACKET_OFFSET;
   24194:	2324      	movs	r3, #36	; 0x24
   24196:	18fb      	adds	r3, r7, r3
   24198:	2244      	movs	r2, #68	; 0x44
   2419a:	801a      	strh	r2, [r3, #0]
		}
		if(gastrSockets[sock].u8SSLFlags & SSL_FLAGS_ACTIVE)
   2419c:	230f      	movs	r3, #15
   2419e:	18fb      	adds	r3, r7, r3
   241a0:	781b      	ldrb	r3, [r3, #0]
   241a2:	b25b      	sxtb	r3, r3
   241a4:	4a24      	ldr	r2, [pc, #144]	; (24238 <send+0x15c>)
   241a6:	011b      	lsls	r3, r3, #4
   241a8:	18d3      	adds	r3, r2, r3
   241aa:	330b      	adds	r3, #11
   241ac:	781b      	ldrb	r3, [r3, #0]
   241ae:	b2db      	uxtb	r3, r3
   241b0:	001a      	movs	r2, r3
   241b2:	2301      	movs	r3, #1
   241b4:	4013      	ands	r3, r2
   241b6:	d00f      	beq.n	241d8 <send+0xfc>
		{
			u8Cmd			= SOCKET_CMD_SSL_SEND;
   241b8:	2323      	movs	r3, #35	; 0x23
   241ba:	18fb      	adds	r3, r7, r3
   241bc:	224c      	movs	r2, #76	; 0x4c
   241be:	701a      	strb	r2, [r3, #0]
			u16DataOffset	= gastrSockets[sock].u16DataOffset;
   241c0:	230f      	movs	r3, #15
   241c2:	18fb      	adds	r3, r7, r3
   241c4:	2200      	movs	r2, #0
   241c6:	569a      	ldrsb	r2, [r3, r2]
   241c8:	2324      	movs	r3, #36	; 0x24
   241ca:	18fb      	adds	r3, r7, r3
   241cc:	491a      	ldr	r1, [pc, #104]	; (24238 <send+0x15c>)
   241ce:	0112      	lsls	r2, r2, #4
   241d0:	188a      	adds	r2, r1, r2
   241d2:	3208      	adds	r2, #8
   241d4:	8812      	ldrh	r2, [r2, #0]
   241d6:	801a      	strh	r2, [r3, #0]
		}

		s16Ret =  SOCKET_REQUEST(u8Cmd|M2M_REQ_DATA_PKT, (uint8*)&strSend, sizeof(tstrSendCmd), pvSendBuffer, u16SendLength, u16DataOffset);
   241d8:	2323      	movs	r3, #35	; 0x23
   241da:	18fb      	adds	r3, r7, r3
   241dc:	781b      	ldrb	r3, [r3, #0]
   241de:	2280      	movs	r2, #128	; 0x80
   241e0:	4252      	negs	r2, r2
   241e2:	4313      	orrs	r3, r2
   241e4:	b2d9      	uxtb	r1, r3
   241e6:	2310      	movs	r3, #16
   241e8:	18fa      	adds	r2, r7, r3
   241ea:	2324      	movs	r3, #36	; 0x24
   241ec:	18fb      	adds	r3, r7, r3
   241ee:	881b      	ldrh	r3, [r3, #0]
   241f0:	9302      	str	r3, [sp, #8]
   241f2:	230c      	movs	r3, #12
   241f4:	18fb      	adds	r3, r7, r3
   241f6:	881b      	ldrh	r3, [r3, #0]
   241f8:	9301      	str	r3, [sp, #4]
   241fa:	68bb      	ldr	r3, [r7, #8]
   241fc:	9300      	str	r3, [sp, #0]
   241fe:	2310      	movs	r3, #16
   24200:	2002      	movs	r0, #2
   24202:	4c0e      	ldr	r4, [pc, #56]	; (2423c <send+0x160>)
   24204:	47a0      	blx	r4
   24206:	0003      	movs	r3, r0
   24208:	001a      	movs	r2, r3
   2420a:	2326      	movs	r3, #38	; 0x26
   2420c:	18fb      	adds	r3, r7, r3
   2420e:	801a      	strh	r2, [r3, #0]
		if(s16Ret != SOCK_ERR_NO_ERROR)
   24210:	2326      	movs	r3, #38	; 0x26
   24212:	18fb      	adds	r3, r7, r3
   24214:	2200      	movs	r2, #0
   24216:	5e9b      	ldrsh	r3, [r3, r2]
   24218:	2b00      	cmp	r3, #0
   2421a:	d004      	beq.n	24226 <send+0x14a>
		{
			s16Ret = SOCK_ERR_BUFFER_FULL;
   2421c:	2326      	movs	r3, #38	; 0x26
   2421e:	18fb      	adds	r3, r7, r3
   24220:	220e      	movs	r2, #14
   24222:	4252      	negs	r2, r2
   24224:	801a      	strh	r2, [r3, #0]
		}
	}
	return s16Ret;
   24226:	2326      	movs	r3, #38	; 0x26
   24228:	18fb      	adds	r3, r7, r3
   2422a:	2200      	movs	r2, #0
   2422c:	5e9b      	ldrsh	r3, [r3, r2]
}
   2422e:	0018      	movs	r0, r3
   24230:	46bd      	mov	sp, r7
   24232:	b00b      	add	sp, #44	; 0x2c
   24234:	bd90      	pop	{r4, r7, pc}
   24236:	46c0      	nop			; (mov r8, r8)
   24238:	200055a4 	.word	0x200055a4
   2423c:	0001f685 	.word	0x0001f685

00024240 <recv>:

Date
		5 June 2012
*********************************************************************/
sint16 recv(SOCKET sock, void *pvRecvBuf, uint16 u16BufLen, uint32 u32Timeoutmsec)
{
   24240:	b590      	push	{r4, r7, lr}
   24242:	b08d      	sub	sp, #52	; 0x34
   24244:	af04      	add	r7, sp, #16
   24246:	60b9      	str	r1, [r7, #8]
   24248:	0011      	movs	r1, r2
   2424a:	607b      	str	r3, [r7, #4]
   2424c:	230f      	movs	r3, #15
   2424e:	18fb      	adds	r3, r7, r3
   24250:	1c02      	adds	r2, r0, #0
   24252:	701a      	strb	r2, [r3, #0]
   24254:	230c      	movs	r3, #12
   24256:	18fb      	adds	r3, r7, r3
   24258:	1c0a      	adds	r2, r1, #0
   2425a:	801a      	strh	r2, [r3, #0]
	sint16	s16Ret = SOCK_ERR_INVALID_ARG;
   2425c:	231e      	movs	r3, #30
   2425e:	18fb      	adds	r3, r7, r3
   24260:	2206      	movs	r2, #6
   24262:	4252      	negs	r2, r2
   24264:	801a      	strh	r2, [r3, #0]
	
	if((sock >= 0) && (pvRecvBuf != NULL) && (u16BufLen != 0) && (gastrSockets[sock].bIsUsed == 1))
   24266:	230f      	movs	r3, #15
   24268:	18fb      	adds	r3, r7, r3
   2426a:	781b      	ldrb	r3, [r3, #0]
   2426c:	2b7f      	cmp	r3, #127	; 0x7f
   2426e:	d900      	bls.n	24272 <recv+0x32>
   24270:	e099      	b.n	243a6 <recv+0x166>
   24272:	68bb      	ldr	r3, [r7, #8]
   24274:	2b00      	cmp	r3, #0
   24276:	d100      	bne.n	2427a <recv+0x3a>
   24278:	e095      	b.n	243a6 <recv+0x166>
   2427a:	230c      	movs	r3, #12
   2427c:	18fb      	adds	r3, r7, r3
   2427e:	881b      	ldrh	r3, [r3, #0]
   24280:	2b00      	cmp	r3, #0
   24282:	d100      	bne.n	24286 <recv+0x46>
   24284:	e08f      	b.n	243a6 <recv+0x166>
   24286:	230f      	movs	r3, #15
   24288:	18fb      	adds	r3, r7, r3
   2428a:	781b      	ldrb	r3, [r3, #0]
   2428c:	b25b      	sxtb	r3, r3
   2428e:	4a4a      	ldr	r2, [pc, #296]	; (243b8 <recv+0x178>)
   24290:	011b      	lsls	r3, r3, #4
   24292:	18d3      	adds	r3, r2, r3
   24294:	330a      	adds	r3, #10
   24296:	781b      	ldrb	r3, [r3, #0]
   24298:	b2db      	uxtb	r3, r3
   2429a:	2b01      	cmp	r3, #1
   2429c:	d000      	beq.n	242a0 <recv+0x60>
   2429e:	e082      	b.n	243a6 <recv+0x166>
	{
		s16Ret = SOCK_ERR_NO_ERROR;
   242a0:	231e      	movs	r3, #30
   242a2:	18fb      	adds	r3, r7, r3
   242a4:	2200      	movs	r2, #0
   242a6:	801a      	strh	r2, [r3, #0]
		gastrSockets[sock].pu8UserBuffer 		= (uint8*)pvRecvBuf;
   242a8:	230f      	movs	r3, #15
   242aa:	18fb      	adds	r3, r7, r3
   242ac:	2200      	movs	r2, #0
   242ae:	569a      	ldrsb	r2, [r3, r2]
   242b0:	4b41      	ldr	r3, [pc, #260]	; (243b8 <recv+0x178>)
   242b2:	0112      	lsls	r2, r2, #4
   242b4:	68b9      	ldr	r1, [r7, #8]
   242b6:	50d1      	str	r1, [r2, r3]
		gastrSockets[sock].u16UserBufferSize 	= u16BufLen;
   242b8:	230f      	movs	r3, #15
   242ba:	18fb      	adds	r3, r7, r3
   242bc:	781b      	ldrb	r3, [r3, #0]
   242be:	b25b      	sxtb	r3, r3
   242c0:	4a3d      	ldr	r2, [pc, #244]	; (243b8 <recv+0x178>)
   242c2:	011b      	lsls	r3, r3, #4
   242c4:	18d3      	adds	r3, r2, r3
   242c6:	3304      	adds	r3, #4
   242c8:	220c      	movs	r2, #12
   242ca:	18ba      	adds	r2, r7, r2
   242cc:	8812      	ldrh	r2, [r2, #0]
   242ce:	801a      	strh	r2, [r3, #0]

		if(!gastrSockets[sock].bIsRecvPending)
   242d0:	230f      	movs	r3, #15
   242d2:	18fb      	adds	r3, r7, r3
   242d4:	781b      	ldrb	r3, [r3, #0]
   242d6:	b25b      	sxtb	r3, r3
   242d8:	4a37      	ldr	r2, [pc, #220]	; (243b8 <recv+0x178>)
   242da:	011b      	lsls	r3, r3, #4
   242dc:	18d3      	adds	r3, r2, r3
   242de:	330c      	adds	r3, #12
   242e0:	781b      	ldrb	r3, [r3, #0]
   242e2:	b2db      	uxtb	r3, r3
   242e4:	2b00      	cmp	r3, #0
   242e6:	d15e      	bne.n	243a6 <recv+0x166>
		{
			tstrRecvCmd	strRecv;
			uint8		u8Cmd = SOCKET_CMD_RECV;
   242e8:	231d      	movs	r3, #29
   242ea:	18fb      	adds	r3, r7, r3
   242ec:	2246      	movs	r2, #70	; 0x46
   242ee:	701a      	strb	r2, [r3, #0]

			gastrSockets[sock].bIsRecvPending = 1;
   242f0:	230f      	movs	r3, #15
   242f2:	18fb      	adds	r3, r7, r3
   242f4:	781b      	ldrb	r3, [r3, #0]
   242f6:	b25b      	sxtb	r3, r3
   242f8:	4a2f      	ldr	r2, [pc, #188]	; (243b8 <recv+0x178>)
   242fa:	011b      	lsls	r3, r3, #4
   242fc:	18d3      	adds	r3, r2, r3
   242fe:	330c      	adds	r3, #12
   24300:	2201      	movs	r2, #1
   24302:	701a      	strb	r2, [r3, #0]
			if(gastrSockets[sock].u8SSLFlags & SSL_FLAGS_ACTIVE)
   24304:	230f      	movs	r3, #15
   24306:	18fb      	adds	r3, r7, r3
   24308:	781b      	ldrb	r3, [r3, #0]
   2430a:	b25b      	sxtb	r3, r3
   2430c:	4a2a      	ldr	r2, [pc, #168]	; (243b8 <recv+0x178>)
   2430e:	011b      	lsls	r3, r3, #4
   24310:	18d3      	adds	r3, r2, r3
   24312:	330b      	adds	r3, #11
   24314:	781b      	ldrb	r3, [r3, #0]
   24316:	b2db      	uxtb	r3, r3
   24318:	001a      	movs	r2, r3
   2431a:	2301      	movs	r3, #1
   2431c:	4013      	ands	r3, r2
   2431e:	d003      	beq.n	24328 <recv+0xe8>
			{
				u8Cmd = SOCKET_CMD_SSL_RECV;
   24320:	231d      	movs	r3, #29
   24322:	18fb      	adds	r3, r7, r3
   24324:	224d      	movs	r2, #77	; 0x4d
   24326:	701a      	strb	r2, [r3, #0]
			}

			/* Check the timeout value. */
			if(u32Timeoutmsec == 0)
   24328:	687b      	ldr	r3, [r7, #4]
   2432a:	2b00      	cmp	r3, #0
   2432c:	d105      	bne.n	2433a <recv+0xfa>
				strRecv.u32Timeoutmsec = 0xFFFFFFFF;
   2432e:	2314      	movs	r3, #20
   24330:	18fb      	adds	r3, r7, r3
   24332:	2201      	movs	r2, #1
   24334:	4252      	negs	r2, r2
   24336:	601a      	str	r2, [r3, #0]
   24338:	e003      	b.n	24342 <recv+0x102>
			else
				strRecv.u32Timeoutmsec = NM_BSP_B_L_32(u32Timeoutmsec);
   2433a:	2314      	movs	r3, #20
   2433c:	18fb      	adds	r3, r7, r3
   2433e:	687a      	ldr	r2, [r7, #4]
   24340:	601a      	str	r2, [r3, #0]
			strRecv.sock = sock;
   24342:	2314      	movs	r3, #20
   24344:	18fb      	adds	r3, r7, r3
   24346:	220f      	movs	r2, #15
   24348:	18ba      	adds	r2, r7, r2
   2434a:	7812      	ldrb	r2, [r2, #0]
   2434c:	711a      	strb	r2, [r3, #4]
			strRecv.u16SessionID		= gastrSockets[sock].u16SessionID;
   2434e:	230f      	movs	r3, #15
   24350:	18fb      	adds	r3, r7, r3
   24352:	781b      	ldrb	r3, [r3, #0]
   24354:	b25b      	sxtb	r3, r3
   24356:	4a18      	ldr	r2, [pc, #96]	; (243b8 <recv+0x178>)
   24358:	011b      	lsls	r3, r3, #4
   2435a:	18d3      	adds	r3, r2, r3
   2435c:	3306      	adds	r3, #6
   2435e:	881b      	ldrh	r3, [r3, #0]
   24360:	b29a      	uxth	r2, r3
   24362:	2314      	movs	r3, #20
   24364:	18fb      	adds	r3, r7, r3
   24366:	80da      	strh	r2, [r3, #6]
		
			s16Ret = SOCKET_REQUEST(u8Cmd, (uint8*)&strRecv, sizeof(tstrRecvCmd), NULL , 0, 0);
   24368:	2314      	movs	r3, #20
   2436a:	18fa      	adds	r2, r7, r3
   2436c:	231d      	movs	r3, #29
   2436e:	18fb      	adds	r3, r7, r3
   24370:	7819      	ldrb	r1, [r3, #0]
   24372:	2300      	movs	r3, #0
   24374:	9302      	str	r3, [sp, #8]
   24376:	2300      	movs	r3, #0
   24378:	9301      	str	r3, [sp, #4]
   2437a:	2300      	movs	r3, #0
   2437c:	9300      	str	r3, [sp, #0]
   2437e:	2308      	movs	r3, #8
   24380:	2002      	movs	r0, #2
   24382:	4c0e      	ldr	r4, [pc, #56]	; (243bc <recv+0x17c>)
   24384:	47a0      	blx	r4
   24386:	0003      	movs	r3, r0
   24388:	001a      	movs	r2, r3
   2438a:	231e      	movs	r3, #30
   2438c:	18fb      	adds	r3, r7, r3
   2438e:	801a      	strh	r2, [r3, #0]
			if(s16Ret != SOCK_ERR_NO_ERROR)
   24390:	231e      	movs	r3, #30
   24392:	18fb      	adds	r3, r7, r3
   24394:	2200      	movs	r2, #0
   24396:	5e9b      	ldrsh	r3, [r3, r2]
   24398:	2b00      	cmp	r3, #0
   2439a:	d004      	beq.n	243a6 <recv+0x166>
			{
				s16Ret = SOCK_ERR_BUFFER_FULL;
   2439c:	231e      	movs	r3, #30
   2439e:	18fb      	adds	r3, r7, r3
   243a0:	220e      	movs	r2, #14
   243a2:	4252      	negs	r2, r2
   243a4:	801a      	strh	r2, [r3, #0]
			}
		}
	}
	return s16Ret;
   243a6:	231e      	movs	r3, #30
   243a8:	18fb      	adds	r3, r7, r3
   243aa:	2200      	movs	r2, #0
   243ac:	5e9b      	ldrsh	r3, [r3, r2]
}
   243ae:	0018      	movs	r0, r3
   243b0:	46bd      	mov	sp, r7
   243b2:	b009      	add	sp, #36	; 0x24
   243b4:	bd90      	pop	{r4, r7, pc}
   243b6:	46c0      	nop			; (mov r8, r8)
   243b8:	200055a4 	.word	0x200055a4
   243bc:	0001f685 	.word	0x0001f685

000243c0 <close>:

Date
		4 June 2012
*********************************************************************/
sint8 close(SOCKET sock)
{
   243c0:	b5b0      	push	{r4, r5, r7, lr}
   243c2:	b088      	sub	sp, #32
   243c4:	af04      	add	r7, sp, #16
   243c6:	0002      	movs	r2, r0
   243c8:	1dfb      	adds	r3, r7, #7
   243ca:	701a      	strb	r2, [r3, #0]
	sint8	s8Ret = SOCK_ERR_INVALID_ARG;
   243cc:	230f      	movs	r3, #15
   243ce:	18fb      	adds	r3, r7, r3
   243d0:	22fa      	movs	r2, #250	; 0xfa
   243d2:	701a      	strb	r2, [r3, #0]
    M2M_INFO("Sock to delete <%d>\n", sock);
   243d4:	4b43      	ldr	r3, [pc, #268]	; (244e4 <close+0x124>)
   243d6:	0018      	movs	r0, r3
   243d8:	4b43      	ldr	r3, [pc, #268]	; (244e8 <close+0x128>)
   243da:	4798      	blx	r3
   243dc:	1dfb      	adds	r3, r7, #7
   243de:	2200      	movs	r2, #0
   243e0:	569a      	ldrsb	r2, [r3, r2]
   243e2:	4b42      	ldr	r3, [pc, #264]	; (244ec <close+0x12c>)
   243e4:	0011      	movs	r1, r2
   243e6:	0018      	movs	r0, r3
   243e8:	4b3f      	ldr	r3, [pc, #252]	; (244e8 <close+0x128>)
   243ea:	4798      	blx	r3
   243ec:	4b40      	ldr	r3, [pc, #256]	; (244f0 <close+0x130>)
   243ee:	0018      	movs	r0, r3
   243f0:	4b3d      	ldr	r3, [pc, #244]	; (244e8 <close+0x128>)
   243f2:	4798      	blx	r3
	if(sock >= 0 && (gastrSockets[sock].bIsUsed == 1))
   243f4:	1dfb      	adds	r3, r7, #7
   243f6:	781b      	ldrb	r3, [r3, #0]
   243f8:	2b7f      	cmp	r3, #127	; 0x7f
   243fa:	d86a      	bhi.n	244d2 <close+0x112>
   243fc:	1dfb      	adds	r3, r7, #7
   243fe:	781b      	ldrb	r3, [r3, #0]
   24400:	b25b      	sxtb	r3, r3
   24402:	4a3c      	ldr	r2, [pc, #240]	; (244f4 <close+0x134>)
   24404:	011b      	lsls	r3, r3, #4
   24406:	18d3      	adds	r3, r2, r3
   24408:	330a      	adds	r3, #10
   2440a:	781b      	ldrb	r3, [r3, #0]
   2440c:	b2db      	uxtb	r3, r3
   2440e:	2b01      	cmp	r3, #1
   24410:	d15f      	bne.n	244d2 <close+0x112>
	{
		uint8	u8Cmd = SOCKET_CMD_CLOSE;
   24412:	230e      	movs	r3, #14
   24414:	18fb      	adds	r3, r7, r3
   24416:	2249      	movs	r2, #73	; 0x49
   24418:	701a      	strb	r2, [r3, #0]
		tstrCloseCmd strclose;
		strclose.sock = sock; 
   2441a:	2308      	movs	r3, #8
   2441c:	18fb      	adds	r3, r7, r3
   2441e:	1dfa      	adds	r2, r7, #7
   24420:	7812      	ldrb	r2, [r2, #0]
   24422:	701a      	strb	r2, [r3, #0]
		strclose.u16SessionID		= gastrSockets[sock].u16SessionID;
   24424:	1dfb      	adds	r3, r7, #7
   24426:	781b      	ldrb	r3, [r3, #0]
   24428:	b25b      	sxtb	r3, r3
   2442a:	4a32      	ldr	r2, [pc, #200]	; (244f4 <close+0x134>)
   2442c:	011b      	lsls	r3, r3, #4
   2442e:	18d3      	adds	r3, r2, r3
   24430:	3306      	adds	r3, #6
   24432:	881b      	ldrh	r3, [r3, #0]
   24434:	b29a      	uxth	r2, r3
   24436:	2308      	movs	r3, #8
   24438:	18fb      	adds	r3, r7, r3
   2443a:	805a      	strh	r2, [r3, #2]
		
		gastrSockets[sock].bIsUsed = 0;
   2443c:	1dfb      	adds	r3, r7, #7
   2443e:	781b      	ldrb	r3, [r3, #0]
   24440:	b25b      	sxtb	r3, r3
   24442:	4a2c      	ldr	r2, [pc, #176]	; (244f4 <close+0x134>)
   24444:	011b      	lsls	r3, r3, #4
   24446:	18d3      	adds	r3, r2, r3
   24448:	330a      	adds	r3, #10
   2444a:	2200      	movs	r2, #0
   2444c:	701a      	strb	r2, [r3, #0]
		gastrSockets[sock].u16SessionID =0;
   2444e:	1dfb      	adds	r3, r7, #7
   24450:	781b      	ldrb	r3, [r3, #0]
   24452:	b25b      	sxtb	r3, r3
   24454:	4a27      	ldr	r2, [pc, #156]	; (244f4 <close+0x134>)
   24456:	011b      	lsls	r3, r3, #4
   24458:	18d3      	adds	r3, r2, r3
   2445a:	3306      	adds	r3, #6
   2445c:	2200      	movs	r2, #0
   2445e:	801a      	strh	r2, [r3, #0]
		
		if(gastrSockets[sock].u8SSLFlags & SSL_FLAGS_ACTIVE)
   24460:	1dfb      	adds	r3, r7, #7
   24462:	781b      	ldrb	r3, [r3, #0]
   24464:	b25b      	sxtb	r3, r3
   24466:	4a23      	ldr	r2, [pc, #140]	; (244f4 <close+0x134>)
   24468:	011b      	lsls	r3, r3, #4
   2446a:	18d3      	adds	r3, r2, r3
   2446c:	330b      	adds	r3, #11
   2446e:	781b      	ldrb	r3, [r3, #0]
   24470:	b2db      	uxtb	r3, r3
   24472:	001a      	movs	r2, r3
   24474:	2301      	movs	r3, #1
   24476:	4013      	ands	r3, r2
   24478:	d003      	beq.n	24482 <close+0xc2>
		{
			u8Cmd = SOCKET_CMD_SSL_CLOSE;
   2447a:	230e      	movs	r3, #14
   2447c:	18fb      	adds	r3, r7, r3
   2447e:	224e      	movs	r2, #78	; 0x4e
   24480:	701a      	strb	r2, [r3, #0]
		}
		s8Ret = SOCKET_REQUEST(u8Cmd, (uint8*)&strclose, sizeof(tstrCloseCmd), NULL,0, 0);
   24482:	230f      	movs	r3, #15
   24484:	18fc      	adds	r4, r7, r3
   24486:	2308      	movs	r3, #8
   24488:	18fa      	adds	r2, r7, r3
   2448a:	230e      	movs	r3, #14
   2448c:	18fb      	adds	r3, r7, r3
   2448e:	7819      	ldrb	r1, [r3, #0]
   24490:	2300      	movs	r3, #0
   24492:	9302      	str	r3, [sp, #8]
   24494:	2300      	movs	r3, #0
   24496:	9301      	str	r3, [sp, #4]
   24498:	2300      	movs	r3, #0
   2449a:	9300      	str	r3, [sp, #0]
   2449c:	2304      	movs	r3, #4
   2449e:	2002      	movs	r0, #2
   244a0:	4d15      	ldr	r5, [pc, #84]	; (244f8 <close+0x138>)
   244a2:	47a8      	blx	r5
   244a4:	0003      	movs	r3, r0
   244a6:	7023      	strb	r3, [r4, #0]
		if(s8Ret != SOCK_ERR_NO_ERROR)
   244a8:	230f      	movs	r3, #15
   244aa:	18fb      	adds	r3, r7, r3
   244ac:	781b      	ldrb	r3, [r3, #0]
   244ae:	b25b      	sxtb	r3, r3
   244b0:	2b00      	cmp	r3, #0
   244b2:	d003      	beq.n	244bc <close+0xfc>
		{
			s8Ret = SOCK_ERR_INVALID;
   244b4:	230f      	movs	r3, #15
   244b6:	18fb      	adds	r3, r7, r3
   244b8:	22f7      	movs	r2, #247	; 0xf7
   244ba:	701a      	strb	r2, [r3, #0]
		}
		m2m_memset((uint8*)&gastrSockets[sock], 0, sizeof(tstrSocket));
   244bc:	1dfb      	adds	r3, r7, #7
   244be:	781b      	ldrb	r3, [r3, #0]
   244c0:	b25b      	sxtb	r3, r3
   244c2:	011a      	lsls	r2, r3, #4
   244c4:	4b0b      	ldr	r3, [pc, #44]	; (244f4 <close+0x134>)
   244c6:	18d3      	adds	r3, r2, r3
   244c8:	2210      	movs	r2, #16
   244ca:	2100      	movs	r1, #0
   244cc:	0018      	movs	r0, r3
   244ce:	4b0b      	ldr	r3, [pc, #44]	; (244fc <close+0x13c>)
   244d0:	4798      	blx	r3
	}
	return s8Ret;
   244d2:	230f      	movs	r3, #15
   244d4:	18fb      	adds	r3, r7, r3
   244d6:	781b      	ldrb	r3, [r3, #0]
   244d8:	b25b      	sxtb	r3, r3
}
   244da:	0018      	movs	r0, r3
   244dc:	46bd      	mov	sp, r7
   244de:	b004      	add	sp, #16
   244e0:	bdb0      	pop	{r4, r5, r7, pc}
   244e2:	46c0      	nop			; (mov r8, r8)
   244e4:	0003783c 	.word	0x0003783c
   244e8:	0001c65d 	.word	0x0001c65d
   244ec:	0003787c 	.word	0x0003787c
   244f0:	0003785c 	.word	0x0003785c
   244f4:	200055a4 	.word	0x200055a4
   244f8:	0001f685 	.word	0x0001f685
   244fc:	0001f425 	.word	0x0001f425

00024500 <nmi_inet_addr>:

Date
		4 June 2012
*********************************************************************/
uint32 nmi_inet_addr(char *pcIpAddr)
{
   24500:	b580      	push	{r7, lr}
   24502:	b086      	sub	sp, #24
   24504:	af00      	add	r7, sp, #0
   24506:	6078      	str	r0, [r7, #4]
	uint8	tmp;
	uint32	u32IP = 0;
   24508:	2300      	movs	r3, #0
   2450a:	613b      	str	r3, [r7, #16]
	uint8	au8IP[4];
	uint8 	c;
	uint8	i, j;

	tmp = 0;
   2450c:	2317      	movs	r3, #23
   2450e:	18fb      	adds	r3, r7, r3
   24510:	2200      	movs	r2, #0
   24512:	701a      	strb	r2, [r3, #0]

	for(i = 0; i < 4; ++i)
   24514:	2316      	movs	r3, #22
   24516:	18fb      	adds	r3, r7, r3
   24518:	2200      	movs	r2, #0
   2451a:	701a      	strb	r2, [r3, #0]
   2451c:	e060      	b.n	245e0 <nmi_inet_addr+0xe0>
	{
		j = 0;
   2451e:	2315      	movs	r3, #21
   24520:	18fb      	adds	r3, r7, r3
   24522:	2200      	movs	r2, #0
   24524:	701a      	strb	r2, [r3, #0]
		do
		{
			c = *pcIpAddr;
   24526:	2314      	movs	r3, #20
   24528:	18fb      	adds	r3, r7, r3
   2452a:	687a      	ldr	r2, [r7, #4]
   2452c:	7812      	ldrb	r2, [r2, #0]
   2452e:	701a      	strb	r2, [r3, #0]
			++j;
   24530:	2315      	movs	r3, #21
   24532:	18fb      	adds	r3, r7, r3
   24534:	2215      	movs	r2, #21
   24536:	18ba      	adds	r2, r7, r2
   24538:	7812      	ldrb	r2, [r2, #0]
   2453a:	3201      	adds	r2, #1
   2453c:	701a      	strb	r2, [r3, #0]
			if(j > 4)
   2453e:	2315      	movs	r3, #21
   24540:	18fb      	adds	r3, r7, r3
   24542:	781b      	ldrb	r3, [r3, #0]
   24544:	2b04      	cmp	r3, #4
   24546:	d901      	bls.n	2454c <nmi_inet_addr+0x4c>
			{
				return 0;
   24548:	2300      	movs	r3, #0
   2454a:	e057      	b.n	245fc <nmi_inet_addr+0xfc>
			}
			if(c == '.' || c == 0)
   2454c:	2314      	movs	r3, #20
   2454e:	18fb      	adds	r3, r7, r3
   24550:	781b      	ldrb	r3, [r3, #0]
   24552:	2b2e      	cmp	r3, #46	; 0x2e
   24554:	d004      	beq.n	24560 <nmi_inet_addr+0x60>
   24556:	2314      	movs	r3, #20
   24558:	18fb      	adds	r3, r7, r3
   2455a:	781b      	ldrb	r3, [r3, #0]
   2455c:	2b00      	cmp	r3, #0
   2455e:	d10d      	bne.n	2457c <nmi_inet_addr+0x7c>
			{
				au8IP[i] = tmp;
   24560:	2316      	movs	r3, #22
   24562:	18fb      	adds	r3, r7, r3
   24564:	781b      	ldrb	r3, [r3, #0]
   24566:	220c      	movs	r2, #12
   24568:	18ba      	adds	r2, r7, r2
   2456a:	2117      	movs	r1, #23
   2456c:	1879      	adds	r1, r7, r1
   2456e:	7809      	ldrb	r1, [r1, #0]
   24570:	54d1      	strb	r1, [r2, r3]
				tmp = 0;
   24572:	2317      	movs	r3, #23
   24574:	18fb      	adds	r3, r7, r3
   24576:	2200      	movs	r2, #0
   24578:	701a      	strb	r2, [r3, #0]
   2457a:	e01d      	b.n	245b8 <nmi_inet_addr+0xb8>
			}
			else if(c >= '0' && c <= '9')
   2457c:	2314      	movs	r3, #20
   2457e:	18fb      	adds	r3, r7, r3
   24580:	781b      	ldrb	r3, [r3, #0]
   24582:	2b2f      	cmp	r3, #47	; 0x2f
   24584:	d916      	bls.n	245b4 <nmi_inet_addr+0xb4>
   24586:	2314      	movs	r3, #20
   24588:	18fb      	adds	r3, r7, r3
   2458a:	781b      	ldrb	r3, [r3, #0]
   2458c:	2b39      	cmp	r3, #57	; 0x39
   2458e:	d811      	bhi.n	245b4 <nmi_inet_addr+0xb4>
			{
				tmp = (tmp * 10) + (c - '0');
   24590:	2317      	movs	r3, #23
   24592:	18fb      	adds	r3, r7, r3
   24594:	781b      	ldrb	r3, [r3, #0]
   24596:	1c1a      	adds	r2, r3, #0
   24598:	0092      	lsls	r2, r2, #2
   2459a:	18d3      	adds	r3, r2, r3
   2459c:	18db      	adds	r3, r3, r3
   2459e:	b2da      	uxtb	r2, r3
   245a0:	2314      	movs	r3, #20
   245a2:	18fb      	adds	r3, r7, r3
   245a4:	781b      	ldrb	r3, [r3, #0]
   245a6:	18d3      	adds	r3, r2, r3
   245a8:	b2da      	uxtb	r2, r3
   245aa:	2317      	movs	r3, #23
   245ac:	18fb      	adds	r3, r7, r3
   245ae:	3a30      	subs	r2, #48	; 0x30
   245b0:	701a      	strb	r2, [r3, #0]
   245b2:	e001      	b.n	245b8 <nmi_inet_addr+0xb8>
			}
			else
			{
				return 0;
   245b4:	2300      	movs	r3, #0
   245b6:	e021      	b.n	245fc <nmi_inet_addr+0xfc>
			}
			++pcIpAddr;
   245b8:	687b      	ldr	r3, [r7, #4]
   245ba:	3301      	adds	r3, #1
   245bc:	607b      	str	r3, [r7, #4]
		} while(c != '.' && c != 0);
   245be:	2314      	movs	r3, #20
   245c0:	18fb      	adds	r3, r7, r3
   245c2:	781b      	ldrb	r3, [r3, #0]
   245c4:	2b2e      	cmp	r3, #46	; 0x2e
   245c6:	d004      	beq.n	245d2 <nmi_inet_addr+0xd2>
   245c8:	2314      	movs	r3, #20
   245ca:	18fb      	adds	r3, r7, r3
   245cc:	781b      	ldrb	r3, [r3, #0]
   245ce:	2b00      	cmp	r3, #0
   245d0:	d1a9      	bne.n	24526 <nmi_inet_addr+0x26>
	for(i = 0; i < 4; ++i)
   245d2:	2316      	movs	r3, #22
   245d4:	18fb      	adds	r3, r7, r3
   245d6:	2216      	movs	r2, #22
   245d8:	18ba      	adds	r2, r7, r2
   245da:	7812      	ldrb	r2, [r2, #0]
   245dc:	3201      	adds	r2, #1
   245de:	701a      	strb	r2, [r3, #0]
   245e0:	2316      	movs	r3, #22
   245e2:	18fb      	adds	r3, r7, r3
   245e4:	781b      	ldrb	r3, [r3, #0]
   245e6:	2b03      	cmp	r3, #3
   245e8:	d999      	bls.n	2451e <nmi_inet_addr+0x1e>
	}
	m2m_memcpy((uint8*)&u32IP, au8IP, 4);
   245ea:	230c      	movs	r3, #12
   245ec:	18f9      	adds	r1, r7, r3
   245ee:	2310      	movs	r3, #16
   245f0:	18fb      	adds	r3, r7, r3
   245f2:	2204      	movs	r2, #4
   245f4:	0018      	movs	r0, r3
   245f6:	4b03      	ldr	r3, [pc, #12]	; (24604 <nmi_inet_addr+0x104>)
   245f8:	4798      	blx	r3
	return u32IP;
   245fa:	693b      	ldr	r3, [r7, #16]
}
   245fc:	0018      	movs	r0, r3
   245fe:	46bd      	mov	sp, r7
   24600:	b006      	add	sp, #24
   24602:	bd80      	pop	{r7, pc}
   24604:	0001f3e9 	.word	0x0001f3e9

00024608 <gethostbyname>:

Date
		4 June 2012
*********************************************************************/
sint8 gethostbyname(uint8 * pcHostName)
{
   24608:	b5b0      	push	{r4, r5, r7, lr}
   2460a:	b088      	sub	sp, #32
   2460c:	af04      	add	r7, sp, #16
   2460e:	6078      	str	r0, [r7, #4]
	sint8	s8Err = SOCK_ERR_INVALID_ARG;
   24610:	230f      	movs	r3, #15
   24612:	18fb      	adds	r3, r7, r3
   24614:	22fa      	movs	r2, #250	; 0xfa
   24616:	701a      	strb	r2, [r3, #0]
	uint8	u8HostNameSize = (uint8)m2m_strlen(pcHostName);
   24618:	687b      	ldr	r3, [r7, #4]
   2461a:	0018      	movs	r0, r3
   2461c:	4b14      	ldr	r3, [pc, #80]	; (24670 <gethostbyname+0x68>)
   2461e:	4798      	blx	r3
   24620:	0003      	movs	r3, r0
   24622:	001a      	movs	r2, r3
   24624:	230e      	movs	r3, #14
   24626:	18fb      	adds	r3, r7, r3
   24628:	701a      	strb	r2, [r3, #0]
	if(u8HostNameSize <= HOSTNAME_MAX_SIZE)
   2462a:	230e      	movs	r3, #14
   2462c:	18fb      	adds	r3, r7, r3
   2462e:	781b      	ldrb	r3, [r3, #0]
   24630:	2b40      	cmp	r3, #64	; 0x40
   24632:	d815      	bhi.n	24660 <gethostbyname+0x58>
	{
		s8Err = SOCKET_REQUEST(SOCKET_CMD_DNS_RESOLVE, (uint8*)pcHostName, u8HostNameSize + 1, NULL,0, 0);
   24634:	230e      	movs	r3, #14
   24636:	18fb      	adds	r3, r7, r3
   24638:	781b      	ldrb	r3, [r3, #0]
   2463a:	b29b      	uxth	r3, r3
   2463c:	3301      	adds	r3, #1
   2463e:	b299      	uxth	r1, r3
   24640:	230f      	movs	r3, #15
   24642:	18fc      	adds	r4, r7, r3
   24644:	687a      	ldr	r2, [r7, #4]
   24646:	2300      	movs	r3, #0
   24648:	9302      	str	r3, [sp, #8]
   2464a:	2300      	movs	r3, #0
   2464c:	9301      	str	r3, [sp, #4]
   2464e:	2300      	movs	r3, #0
   24650:	9300      	str	r3, [sp, #0]
   24652:	000b      	movs	r3, r1
   24654:	214a      	movs	r1, #74	; 0x4a
   24656:	2002      	movs	r0, #2
   24658:	4d06      	ldr	r5, [pc, #24]	; (24674 <gethostbyname+0x6c>)
   2465a:	47a8      	blx	r5
   2465c:	0003      	movs	r3, r0
   2465e:	7023      	strb	r3, [r4, #0]
	}
	return s8Err;
   24660:	230f      	movs	r3, #15
   24662:	18fb      	adds	r3, r7, r3
   24664:	781b      	ldrb	r3, [r3, #0]
   24666:	b25b      	sxtb	r3, r3
}
   24668:	0018      	movs	r0, r3
   2466a:	46bd      	mov	sp, r7
   2466c:	b004      	add	sp, #16
   2466e:	bdb0      	pop	{r4, r5, r7, pc}
   24670:	0001f463 	.word	0x0001f463
   24674:	0001f685 	.word	0x0001f685

00024678 <spi_flash_enter_low_power_mode>:
		spi_flash_write_enable();
		spi_flash_gang_unblock();
	}
}
#endif
static void spi_flash_enter_low_power_mode(void) {
   24678:	b580      	push	{r7, lr}
   2467a:	b082      	sub	sp, #8
   2467c:	af00      	add	r7, sp, #0
	volatile unsigned long tmp;
	unsigned char* cmd = (unsigned char*) &tmp;
   2467e:	003b      	movs	r3, r7
   24680:	607b      	str	r3, [r7, #4]

	cmd[0] = 0xb9;
   24682:	687b      	ldr	r3, [r7, #4]
   24684:	22b9      	movs	r2, #185	; 0xb9
   24686:	701a      	strb	r2, [r3, #0]

	nm_write_reg(SPI_FLASH_DATA_CNT, 0);
   24688:	4b13      	ldr	r3, [pc, #76]	; (246d8 <spi_flash_enter_low_power_mode+0x60>)
   2468a:	2100      	movs	r1, #0
   2468c:	0018      	movs	r0, r3
   2468e:	4b13      	ldr	r3, [pc, #76]	; (246dc <spi_flash_enter_low_power_mode+0x64>)
   24690:	4798      	blx	r3
	nm_write_reg(SPI_FLASH_BUF1, cmd[0]);
   24692:	687b      	ldr	r3, [r7, #4]
   24694:	781b      	ldrb	r3, [r3, #0]
   24696:	001a      	movs	r2, r3
   24698:	4b11      	ldr	r3, [pc, #68]	; (246e0 <spi_flash_enter_low_power_mode+0x68>)
   2469a:	0011      	movs	r1, r2
   2469c:	0018      	movs	r0, r3
   2469e:	4b0f      	ldr	r3, [pc, #60]	; (246dc <spi_flash_enter_low_power_mode+0x64>)
   246a0:	4798      	blx	r3
	nm_write_reg(SPI_FLASH_BUF_DIR, 0x1);
   246a2:	4b10      	ldr	r3, [pc, #64]	; (246e4 <spi_flash_enter_low_power_mode+0x6c>)
   246a4:	2101      	movs	r1, #1
   246a6:	0018      	movs	r0, r3
   246a8:	4b0c      	ldr	r3, [pc, #48]	; (246dc <spi_flash_enter_low_power_mode+0x64>)
   246aa:	4798      	blx	r3
	nm_write_reg(SPI_FLASH_DMA_ADDR, 0);
   246ac:	4b0e      	ldr	r3, [pc, #56]	; (246e8 <spi_flash_enter_low_power_mode+0x70>)
   246ae:	2100      	movs	r1, #0
   246b0:	0018      	movs	r0, r3
   246b2:	4b0a      	ldr	r3, [pc, #40]	; (246dc <spi_flash_enter_low_power_mode+0x64>)
   246b4:	4798      	blx	r3
	nm_write_reg(SPI_FLASH_CMD_CNT, 1 | (1 << 7));
   246b6:	4b0d      	ldr	r3, [pc, #52]	; (246ec <spi_flash_enter_low_power_mode+0x74>)
   246b8:	2181      	movs	r1, #129	; 0x81
   246ba:	0018      	movs	r0, r3
   246bc:	4b07      	ldr	r3, [pc, #28]	; (246dc <spi_flash_enter_low_power_mode+0x64>)
   246be:	4798      	blx	r3
	while(nm_read_reg(SPI_FLASH_TR_DONE) != 1);
   246c0:	46c0      	nop			; (mov r8, r8)
   246c2:	4b0b      	ldr	r3, [pc, #44]	; (246f0 <spi_flash_enter_low_power_mode+0x78>)
   246c4:	0018      	movs	r0, r3
   246c6:	4b0b      	ldr	r3, [pc, #44]	; (246f4 <spi_flash_enter_low_power_mode+0x7c>)
   246c8:	4798      	blx	r3
   246ca:	0003      	movs	r3, r0
   246cc:	2b01      	cmp	r3, #1
   246ce:	d1f8      	bne.n	246c2 <spi_flash_enter_low_power_mode+0x4a>
}
   246d0:	46c0      	nop			; (mov r8, r8)
   246d2:	46bd      	mov	sp, r7
   246d4:	b002      	add	sp, #8
   246d6:	bd80      	pop	{r7, pc}
   246d8:	00010208 	.word	0x00010208
   246dc:	000214d9 	.word	0x000214d9
   246e0:	0001020c 	.word	0x0001020c
   246e4:	00010214 	.word	0x00010214
   246e8:	0001021c 	.word	0x0001021c
   246ec:	00010204 	.word	0x00010204
   246f0:	00010218 	.word	0x00010218
   246f4:	00021495 	.word	0x00021495

000246f8 <spi_flash_leave_low_power_mode>:


static void spi_flash_leave_low_power_mode(void) {
   246f8:	b580      	push	{r7, lr}
   246fa:	b082      	sub	sp, #8
   246fc:	af00      	add	r7, sp, #0
	volatile unsigned long tmp;
	unsigned char* cmd = (unsigned char*) &tmp;
   246fe:	003b      	movs	r3, r7
   24700:	607b      	str	r3, [r7, #4]

	cmd[0] = 0xab;
   24702:	687b      	ldr	r3, [r7, #4]
   24704:	22ab      	movs	r2, #171	; 0xab
   24706:	701a      	strb	r2, [r3, #0]

	nm_write_reg(SPI_FLASH_DATA_CNT, 0);
   24708:	4b13      	ldr	r3, [pc, #76]	; (24758 <spi_flash_leave_low_power_mode+0x60>)
   2470a:	2100      	movs	r1, #0
   2470c:	0018      	movs	r0, r3
   2470e:	4b13      	ldr	r3, [pc, #76]	; (2475c <spi_flash_leave_low_power_mode+0x64>)
   24710:	4798      	blx	r3
	nm_write_reg(SPI_FLASH_BUF1, cmd[0]);
   24712:	687b      	ldr	r3, [r7, #4]
   24714:	781b      	ldrb	r3, [r3, #0]
   24716:	001a      	movs	r2, r3
   24718:	4b11      	ldr	r3, [pc, #68]	; (24760 <spi_flash_leave_low_power_mode+0x68>)
   2471a:	0011      	movs	r1, r2
   2471c:	0018      	movs	r0, r3
   2471e:	4b0f      	ldr	r3, [pc, #60]	; (2475c <spi_flash_leave_low_power_mode+0x64>)
   24720:	4798      	blx	r3
	nm_write_reg(SPI_FLASH_BUF_DIR, 0x1);
   24722:	4b10      	ldr	r3, [pc, #64]	; (24764 <spi_flash_leave_low_power_mode+0x6c>)
   24724:	2101      	movs	r1, #1
   24726:	0018      	movs	r0, r3
   24728:	4b0c      	ldr	r3, [pc, #48]	; (2475c <spi_flash_leave_low_power_mode+0x64>)
   2472a:	4798      	blx	r3
	nm_write_reg(SPI_FLASH_DMA_ADDR, 0);
   2472c:	4b0e      	ldr	r3, [pc, #56]	; (24768 <spi_flash_leave_low_power_mode+0x70>)
   2472e:	2100      	movs	r1, #0
   24730:	0018      	movs	r0, r3
   24732:	4b0a      	ldr	r3, [pc, #40]	; (2475c <spi_flash_leave_low_power_mode+0x64>)
   24734:	4798      	blx	r3
	nm_write_reg(SPI_FLASH_CMD_CNT,  1 | (1 << 7));
   24736:	4b0d      	ldr	r3, [pc, #52]	; (2476c <spi_flash_leave_low_power_mode+0x74>)
   24738:	2181      	movs	r1, #129	; 0x81
   2473a:	0018      	movs	r0, r3
   2473c:	4b07      	ldr	r3, [pc, #28]	; (2475c <spi_flash_leave_low_power_mode+0x64>)
   2473e:	4798      	blx	r3
	while(nm_read_reg(SPI_FLASH_TR_DONE) != 1);
   24740:	46c0      	nop			; (mov r8, r8)
   24742:	4b0b      	ldr	r3, [pc, #44]	; (24770 <spi_flash_leave_low_power_mode+0x78>)
   24744:	0018      	movs	r0, r3
   24746:	4b0b      	ldr	r3, [pc, #44]	; (24774 <spi_flash_leave_low_power_mode+0x7c>)
   24748:	4798      	blx	r3
   2474a:	0003      	movs	r3, r0
   2474c:	2b01      	cmp	r3, #1
   2474e:	d1f8      	bne.n	24742 <spi_flash_leave_low_power_mode+0x4a>
}
   24750:	46c0      	nop			; (mov r8, r8)
   24752:	46bd      	mov	sp, r7
   24754:	b002      	add	sp, #8
   24756:	bd80      	pop	{r7, pc}
   24758:	00010208 	.word	0x00010208
   2475c:	000214d9 	.word	0x000214d9
   24760:	0001020c 	.word	0x0001020c
   24764:	00010214 	.word	0x00010214
   24768:	0001021c 	.word	0x0001021c
   2476c:	00010204 	.word	0x00010204
   24770:	00010218 	.word	0x00010218
   24774:	00021495 	.word	0x00021495

00024778 <spi_flash_enable>:
 *	@brief	Enable spi flash operations
 *	@author	M. Abdelmawla
 *	@version	1.0
 */
sint8 spi_flash_enable(uint8 enable)
{
   24778:	b590      	push	{r4, r7, lr}
   2477a:	b085      	sub	sp, #20
   2477c:	af00      	add	r7, sp, #0
   2477e:	0002      	movs	r2, r0
   24780:	1dfb      	adds	r3, r7, #7
   24782:	701a      	strb	r2, [r3, #0]
	sint8 s8Ret = M2M_SUCCESS;
   24784:	230f      	movs	r3, #15
   24786:	18fb      	adds	r3, r7, r3
   24788:	2200      	movs	r2, #0
   2478a:	701a      	strb	r2, [r3, #0]
	if(REV(nmi_get_chipid()) >= REV_3A0) {		
   2478c:	4b24      	ldr	r3, [pc, #144]	; (24820 <spi_flash_enable+0xa8>)
   2478e:	4798      	blx	r3
   24790:	0003      	movs	r3, r0
   24792:	051b      	lsls	r3, r3, #20
   24794:	0d1b      	lsrs	r3, r3, #20
   24796:	4a23      	ldr	r2, [pc, #140]	; (24824 <spi_flash_enable+0xac>)
   24798:	4293      	cmp	r3, r2
   2479a:	d938      	bls.n	2480e <spi_flash_enable+0x96>
		uint32 u32Val;
		
		/* Enable pinmux to SPI flash. */
		s8Ret = nm_read_reg_with_ret(0x1410, &u32Val);
   2479c:	230f      	movs	r3, #15
   2479e:	18fc      	adds	r4, r7, r3
   247a0:	2308      	movs	r3, #8
   247a2:	18fb      	adds	r3, r7, r3
   247a4:	4a20      	ldr	r2, [pc, #128]	; (24828 <spi_flash_enable+0xb0>)
   247a6:	0019      	movs	r1, r3
   247a8:	0010      	movs	r0, r2
   247aa:	4b20      	ldr	r3, [pc, #128]	; (2482c <spi_flash_enable+0xb4>)
   247ac:	4798      	blx	r3
   247ae:	0003      	movs	r3, r0
   247b0:	7023      	strb	r3, [r4, #0]
		if(s8Ret != M2M_SUCCESS) {
   247b2:	230f      	movs	r3, #15
   247b4:	18fb      	adds	r3, r7, r3
   247b6:	781b      	ldrb	r3, [r3, #0]
   247b8:	b25b      	sxtb	r3, r3
   247ba:	2b00      	cmp	r3, #0
   247bc:	d126      	bne.n	2480c <spi_flash_enable+0x94>
			goto ERR1;
		}
		/* GPIO15/16/17/18 */
		u32Val &= ~((0x7777ul) << 12);
   247be:	68bb      	ldr	r3, [r7, #8]
   247c0:	4a1b      	ldr	r2, [pc, #108]	; (24830 <spi_flash_enable+0xb8>)
   247c2:	4013      	ands	r3, r2
   247c4:	60bb      	str	r3, [r7, #8]
		u32Val |= ((0x1111ul) << 12);
   247c6:	68bb      	ldr	r3, [r7, #8]
   247c8:	4a1a      	ldr	r2, [pc, #104]	; (24834 <spi_flash_enable+0xbc>)
   247ca:	4313      	orrs	r3, r2
   247cc:	60bb      	str	r3, [r7, #8]
		nm_write_reg(0x1410, u32Val);
   247ce:	68bb      	ldr	r3, [r7, #8]
   247d0:	4a15      	ldr	r2, [pc, #84]	; (24828 <spi_flash_enable+0xb0>)
   247d2:	0019      	movs	r1, r3
   247d4:	0010      	movs	r0, r2
   247d6:	4b18      	ldr	r3, [pc, #96]	; (24838 <spi_flash_enable+0xc0>)
   247d8:	4798      	blx	r3
		if(enable) {
   247da:	1dfb      	adds	r3, r7, #7
   247dc:	781b      	ldrb	r3, [r3, #0]
   247de:	2b00      	cmp	r3, #0
   247e0:	d002      	beq.n	247e8 <spi_flash_enable+0x70>
			spi_flash_leave_low_power_mode();
   247e2:	4b16      	ldr	r3, [pc, #88]	; (2483c <spi_flash_enable+0xc4>)
   247e4:	4798      	blx	r3
   247e6:	e001      	b.n	247ec <spi_flash_enable+0x74>
		} else {
			spi_flash_enter_low_power_mode();
   247e8:	4b15      	ldr	r3, [pc, #84]	; (24840 <spi_flash_enable+0xc8>)
   247ea:	4798      	blx	r3
		}
		/* Disable pinmux to SPI flash to minimize leakage. */
		u32Val &= ~((0x7777ul) << 12);
   247ec:	68bb      	ldr	r3, [r7, #8]
   247ee:	4a10      	ldr	r2, [pc, #64]	; (24830 <spi_flash_enable+0xb8>)
   247f0:	4013      	ands	r3, r2
   247f2:	60bb      	str	r3, [r7, #8]
		u32Val |= ((0x0010ul) << 12);
   247f4:	68bb      	ldr	r3, [r7, #8]
   247f6:	2280      	movs	r2, #128	; 0x80
   247f8:	0252      	lsls	r2, r2, #9
   247fa:	4313      	orrs	r3, r2
   247fc:	60bb      	str	r3, [r7, #8]
		nm_write_reg(0x1410, u32Val);
   247fe:	68bb      	ldr	r3, [r7, #8]
   24800:	4a09      	ldr	r2, [pc, #36]	; (24828 <spi_flash_enable+0xb0>)
   24802:	0019      	movs	r1, r3
   24804:	0010      	movs	r0, r2
   24806:	4b0c      	ldr	r3, [pc, #48]	; (24838 <spi_flash_enable+0xc0>)
   24808:	4798      	blx	r3
   2480a:	e000      	b.n	2480e <spi_flash_enable+0x96>
			goto ERR1;
   2480c:	46c0      	nop			; (mov r8, r8)
	}
ERR1:
	return s8Ret;
   2480e:	230f      	movs	r3, #15
   24810:	18fb      	adds	r3, r7, r3
   24812:	781b      	ldrb	r3, [r3, #0]
   24814:	b25b      	sxtb	r3, r3
}
   24816:	0018      	movs	r0, r3
   24818:	46bd      	mov	sp, r7
   2481a:	b005      	add	sp, #20
   2481c:	bd90      	pop	{r4, r7, pc}
   2481e:	46c0      	nop			; (mov r8, r8)
   24820:	00020db5 	.word	0x00020db5
   24824:	0000039f 	.word	0x0000039f
   24828:	00001410 	.word	0x00001410
   2482c:	000214b5 	.word	0x000214b5
   24830:	f8888fff 	.word	0xf8888fff
   24834:	01111000 	.word	0x01111000
   24838:	000214d9 	.word	0x000214d9
   2483c:	000246f9 	.word	0x000246f9
   24840:	00024679 	.word	0x00024679

00024844 <mem_test_unit_ready>:
  return LUN_ID_0;
}


Ctrl_status mem_test_unit_ready(U8 lun)
{
   24844:	b580      	push	{r7, lr}
   24846:	b084      	sub	sp, #16
   24848:	af00      	add	r7, sp, #0
   2484a:	0002      	movs	r2, r0
   2484c:	1dfb      	adds	r3, r7, #7
   2484e:	701a      	strb	r2, [r3, #0]

  if (!Ctrl_access_lock()) return CTRL_FAIL;

  status =
#if MAX_LUN
         (lun < MAX_LUN) ? lun_desc[lun].test_unit_ready() :
   24850:	1dfb      	adds	r3, r7, #7
   24852:	781b      	ldrb	r3, [r3, #0]
   24854:	2b00      	cmp	r3, #0
   24856:	d108      	bne.n	2486a <mem_test_unit_ready+0x26>
   24858:	1dfb      	adds	r3, r7, #7
   2485a:	781a      	ldrb	r2, [r3, #0]
   2485c:	4b08      	ldr	r3, [pc, #32]	; (24880 <mem_test_unit_ready+0x3c>)
   2485e:	0152      	lsls	r2, r2, #5
   24860:	58d3      	ldr	r3, [r2, r3]
   24862:	4798      	blx	r3
   24864:	0003      	movs	r3, r0
   24866:	001a      	movs	r2, r3
   24868:	e000      	b.n	2486c <mem_test_unit_ready+0x28>
   2486a:	2201      	movs	r2, #1
  status =
   2486c:	230f      	movs	r3, #15
   2486e:	18fb      	adds	r3, r7, r3
   24870:	701a      	strb	r2, [r3, #0]
                             CTRL_FAIL;
#endif

  Ctrl_access_unlock();

  return status;
   24872:	230f      	movs	r3, #15
   24874:	18fb      	adds	r3, r7, r3
   24876:	781b      	ldrb	r3, [r3, #0]
}
   24878:	0018      	movs	r0, r3
   2487a:	46bd      	mov	sp, r7
   2487c:	b004      	add	sp, #16
   2487e:	bd80      	pop	{r7, pc}
   24880:	00037908 	.word	0x00037908

00024884 <mem_read_capacity>:


Ctrl_status mem_read_capacity(U8 lun, U32 *u32_nb_sector)
{
   24884:	b580      	push	{r7, lr}
   24886:	b084      	sub	sp, #16
   24888:	af00      	add	r7, sp, #0
   2488a:	0002      	movs	r2, r0
   2488c:	6039      	str	r1, [r7, #0]
   2488e:	1dfb      	adds	r3, r7, #7
   24890:	701a      	strb	r2, [r3, #0]

  if (!Ctrl_access_lock()) return CTRL_FAIL;

  status =
#if MAX_LUN
         (lun < MAX_LUN) ? lun_desc[lun].read_capacity(u32_nb_sector) :
   24892:	1dfb      	adds	r3, r7, #7
   24894:	781b      	ldrb	r3, [r3, #0]
   24896:	2b00      	cmp	r3, #0
   24898:	d10c      	bne.n	248b4 <mem_read_capacity+0x30>
   2489a:	1dfb      	adds	r3, r7, #7
   2489c:	781b      	ldrb	r3, [r3, #0]
   2489e:	4a0b      	ldr	r2, [pc, #44]	; (248cc <mem_read_capacity+0x48>)
   248a0:	015b      	lsls	r3, r3, #5
   248a2:	18d3      	adds	r3, r2, r3
   248a4:	3304      	adds	r3, #4
   248a6:	681b      	ldr	r3, [r3, #0]
   248a8:	683a      	ldr	r2, [r7, #0]
   248aa:	0010      	movs	r0, r2
   248ac:	4798      	blx	r3
   248ae:	0003      	movs	r3, r0
   248b0:	001a      	movs	r2, r3
   248b2:	e000      	b.n	248b6 <mem_read_capacity+0x32>
   248b4:	2201      	movs	r2, #1
  status =
   248b6:	230f      	movs	r3, #15
   248b8:	18fb      	adds	r3, r7, r3
   248ba:	701a      	strb	r2, [r3, #0]
                             CTRL_FAIL;
#endif

  Ctrl_access_unlock();

  return status;
   248bc:	230f      	movs	r3, #15
   248be:	18fb      	adds	r3, r7, r3
   248c0:	781b      	ldrb	r3, [r3, #0]
}
   248c2:	0018      	movs	r0, r3
   248c4:	46bd      	mov	sp, r7
   248c6:	b004      	add	sp, #16
   248c8:	bd80      	pop	{r7, pc}
   248ca:	46c0      	nop			; (mov r8, r8)
   248cc:	00037908 	.word	0x00037908

000248d0 <mem_sector_size>:


U8 mem_sector_size(U8 lun)
{
   248d0:	b580      	push	{r7, lr}
   248d2:	b084      	sub	sp, #16
   248d4:	af00      	add	r7, sp, #0
   248d6:	0002      	movs	r2, r0
   248d8:	1dfb      	adds	r3, r7, #7
   248da:	701a      	strb	r2, [r3, #0]

  if (!Ctrl_access_lock()) return 0;

  sector_size =
#if MAX_LUN
              (lun < MAX_LUN) ? 1 :
   248dc:	1dfb      	adds	r3, r7, #7
   248de:	781b      	ldrb	r3, [r3, #0]
   248e0:	425a      	negs	r2, r3
   248e2:	4153      	adcs	r3, r2
   248e4:	b2da      	uxtb	r2, r3
  sector_size =
   248e6:	230f      	movs	r3, #15
   248e8:	18fb      	adds	r3, r7, r3
   248ea:	701a      	strb	r2, [r3, #0]
                                  0;
#endif

  Ctrl_access_unlock();

  return sector_size;
   248ec:	230f      	movs	r3, #15
   248ee:	18fb      	adds	r3, r7, r3
   248f0:	781b      	ldrb	r3, [r3, #0]
}
   248f2:	0018      	movs	r0, r3
   248f4:	46bd      	mov	sp, r7
   248f6:	b004      	add	sp, #16
   248f8:	bd80      	pop	{r7, pc}
	...

000248fc <mem_wr_protect>:

  return unloaded;
}

bool mem_wr_protect(U8 lun)
{
   248fc:	b580      	push	{r7, lr}
   248fe:	b084      	sub	sp, #16
   24900:	af00      	add	r7, sp, #0
   24902:	0002      	movs	r2, r0
   24904:	1dfb      	adds	r3, r7, #7
   24906:	701a      	strb	r2, [r3, #0]

  if (!Ctrl_access_lock()) return true;

  wr_protect =
#if MAX_LUN
             (lun < MAX_LUN) ? lun_desc[lun].wr_protect() :
   24908:	1dfb      	adds	r3, r7, #7
   2490a:	781b      	ldrb	r3, [r3, #0]
   2490c:	2b00      	cmp	r3, #0
   2490e:	d109      	bne.n	24924 <mem_wr_protect+0x28>
   24910:	1dfb      	adds	r3, r7, #7
   24912:	781b      	ldrb	r3, [r3, #0]
   24914:	4a0a      	ldr	r2, [pc, #40]	; (24940 <mem_wr_protect+0x44>)
   24916:	015b      	lsls	r3, r3, #5
   24918:	18d3      	adds	r3, r2, r3
   2491a:	330c      	adds	r3, #12
   2491c:	681b      	ldr	r3, [r3, #0]
   2491e:	4798      	blx	r3
   24920:	1e03      	subs	r3, r0, #0
   24922:	d001      	beq.n	24928 <mem_wr_protect+0x2c>
   24924:	2201      	movs	r2, #1
   24926:	e000      	b.n	2492a <mem_wr_protect+0x2e>
   24928:	2200      	movs	r2, #0
  wr_protect =
   2492a:	230f      	movs	r3, #15
   2492c:	18fb      	adds	r3, r7, r3
   2492e:	701a      	strb	r2, [r3, #0]
                                 true;
#endif

  Ctrl_access_unlock();

  return wr_protect;
   24930:	230f      	movs	r3, #15
   24932:	18fb      	adds	r3, r7, r3
   24934:	781b      	ldrb	r3, [r3, #0]
}
   24936:	0018      	movs	r0, r3
   24938:	46bd      	mov	sp, r7
   2493a:	b004      	add	sp, #16
   2493c:	bd80      	pop	{r7, pc}
   2493e:	46c0      	nop			; (mov r8, r8)
   24940:	00037908 	.word	0x00037908

00024944 <memory_2_ram>:
 */
//! @{


Ctrl_status memory_2_ram(U8 lun, U32 addr, void *ram)
{
   24944:	b580      	push	{r7, lr}
   24946:	b086      	sub	sp, #24
   24948:	af00      	add	r7, sp, #0
   2494a:	60b9      	str	r1, [r7, #8]
   2494c:	607a      	str	r2, [r7, #4]
   2494e:	230f      	movs	r3, #15
   24950:	18fb      	adds	r3, r7, r3
   24952:	1c02      	adds	r2, r0, #0
   24954:	701a      	strb	r2, [r3, #0]
  if (!Ctrl_access_lock()) return CTRL_FAIL;

  memory_start_read_action(1);
  status =
#if MAX_LUN
           (lun < MAX_LUN) ? lun_desc[lun].mem_2_ram(addr, ram) :
   24956:	230f      	movs	r3, #15
   24958:	18fb      	adds	r3, r7, r3
   2495a:	781b      	ldrb	r3, [r3, #0]
   2495c:	2b00      	cmp	r3, #0
   2495e:	d10e      	bne.n	2497e <memory_2_ram+0x3a>
   24960:	230f      	movs	r3, #15
   24962:	18fb      	adds	r3, r7, r3
   24964:	781b      	ldrb	r3, [r3, #0]
   24966:	4a0b      	ldr	r2, [pc, #44]	; (24994 <memory_2_ram+0x50>)
   24968:	015b      	lsls	r3, r3, #5
   2496a:	18d3      	adds	r3, r2, r3
   2496c:	3314      	adds	r3, #20
   2496e:	681b      	ldr	r3, [r3, #0]
   24970:	6879      	ldr	r1, [r7, #4]
   24972:	68ba      	ldr	r2, [r7, #8]
   24974:	0010      	movs	r0, r2
   24976:	4798      	blx	r3
   24978:	0003      	movs	r3, r0
   2497a:	001a      	movs	r2, r3
   2497c:	e000      	b.n	24980 <memory_2_ram+0x3c>
   2497e:	2201      	movs	r2, #1
  status =
   24980:	2317      	movs	r3, #23
   24982:	18fb      	adds	r3, r7, r3
   24984:	701a      	strb	r2, [r3, #0]
#endif
  memory_stop_read_action();

  Ctrl_access_unlock();

  return status;
   24986:	2317      	movs	r3, #23
   24988:	18fb      	adds	r3, r7, r3
   2498a:	781b      	ldrb	r3, [r3, #0]
}
   2498c:	0018      	movs	r0, r3
   2498e:	46bd      	mov	sp, r7
   24990:	b006      	add	sp, #24
   24992:	bd80      	pop	{r7, pc}
   24994:	00037908 	.word	0x00037908

00024998 <ram_2_memory>:


Ctrl_status ram_2_memory(U8 lun, U32 addr, const void *ram)
{
   24998:	b580      	push	{r7, lr}
   2499a:	b086      	sub	sp, #24
   2499c:	af00      	add	r7, sp, #0
   2499e:	60b9      	str	r1, [r7, #8]
   249a0:	607a      	str	r2, [r7, #4]
   249a2:	230f      	movs	r3, #15
   249a4:	18fb      	adds	r3, r7, r3
   249a6:	1c02      	adds	r2, r0, #0
   249a8:	701a      	strb	r2, [r3, #0]
  if (!Ctrl_access_lock()) return CTRL_FAIL;

  memory_start_write_action(1);
  status =
#if MAX_LUN
           (lun < MAX_LUN) ? lun_desc[lun].ram_2_mem(addr, ram) :
   249aa:	230f      	movs	r3, #15
   249ac:	18fb      	adds	r3, r7, r3
   249ae:	781b      	ldrb	r3, [r3, #0]
   249b0:	2b00      	cmp	r3, #0
   249b2:	d10e      	bne.n	249d2 <ram_2_memory+0x3a>
   249b4:	230f      	movs	r3, #15
   249b6:	18fb      	adds	r3, r7, r3
   249b8:	781b      	ldrb	r3, [r3, #0]
   249ba:	4a0b      	ldr	r2, [pc, #44]	; (249e8 <ram_2_memory+0x50>)
   249bc:	015b      	lsls	r3, r3, #5
   249be:	18d3      	adds	r3, r2, r3
   249c0:	3318      	adds	r3, #24
   249c2:	681b      	ldr	r3, [r3, #0]
   249c4:	6879      	ldr	r1, [r7, #4]
   249c6:	68ba      	ldr	r2, [r7, #8]
   249c8:	0010      	movs	r0, r2
   249ca:	4798      	blx	r3
   249cc:	0003      	movs	r3, r0
   249ce:	001a      	movs	r2, r3
   249d0:	e000      	b.n	249d4 <ram_2_memory+0x3c>
   249d2:	2201      	movs	r2, #1
  status =
   249d4:	2317      	movs	r3, #23
   249d6:	18fb      	adds	r3, r7, r3
   249d8:	701a      	strb	r2, [r3, #0]
#endif
  memory_stop_write_action();

  Ctrl_access_unlock();

  return status;
   249da:	2317      	movs	r3, #23
   249dc:	18fb      	adds	r3, r7, r3
   249de:	781b      	ldrb	r3, [r3, #0]
}
   249e0:	0018      	movs	r0, r3
   249e2:	46bd      	mov	sp, r7
   249e4:	b006      	add	sp, #24
   249e6:	bd80      	pop	{r7, pc}
   249e8:	00037908 	.word	0x00037908

000249ec <cpu_irq_enter_critical>:
 */
volatile bool g_interrupt_enabled = true;
#endif

void cpu_irq_enter_critical(void)
{
   249ec:	b580      	push	{r7, lr}
   249ee:	b082      	sub	sp, #8
   249f0:	af00      	add	r7, sp, #0
	if (cpu_irq_critical_section_counter == 0) {
   249f2:	4b10      	ldr	r3, [pc, #64]	; (24a34 <cpu_irq_enter_critical+0x48>)
   249f4:	681b      	ldr	r3, [r3, #0]
   249f6:	2b00      	cmp	r3, #0
   249f8:	d112      	bne.n	24a20 <cpu_irq_enter_critical+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   249fa:	f3ef 8310 	mrs	r3, PRIMASK
   249fe:	607b      	str	r3, [r7, #4]
  return(result);
   24a00:	687b      	ldr	r3, [r7, #4]
		if (cpu_irq_is_enabled()) {
   24a02:	2b00      	cmp	r3, #0
   24a04:	d109      	bne.n	24a1a <cpu_irq_enter_critical+0x2e>
  __ASM volatile ("cpsid i" : : : "memory");
   24a06:	b672      	cpsid	i
   24a08:	f3bf 8f5f 	dmb	sy
			cpu_irq_disable();
   24a0c:	4b0a      	ldr	r3, [pc, #40]	; (24a38 <cpu_irq_enter_critical+0x4c>)
   24a0e:	2200      	movs	r2, #0
   24a10:	701a      	strb	r2, [r3, #0]
			cpu_irq_prev_interrupt_state = true;
   24a12:	4b0a      	ldr	r3, [pc, #40]	; (24a3c <cpu_irq_enter_critical+0x50>)
   24a14:	2201      	movs	r2, #1
   24a16:	701a      	strb	r2, [r3, #0]
   24a18:	e002      	b.n	24a20 <cpu_irq_enter_critical+0x34>
		} else {
			/* Make sure the to save the prev state as false */
			cpu_irq_prev_interrupt_state = false;
   24a1a:	4b08      	ldr	r3, [pc, #32]	; (24a3c <cpu_irq_enter_critical+0x50>)
   24a1c:	2200      	movs	r2, #0
   24a1e:	701a      	strb	r2, [r3, #0]
		}

	}

	cpu_irq_critical_section_counter++;
   24a20:	4b04      	ldr	r3, [pc, #16]	; (24a34 <cpu_irq_enter_critical+0x48>)
   24a22:	681b      	ldr	r3, [r3, #0]
   24a24:	1c5a      	adds	r2, r3, #1
   24a26:	4b03      	ldr	r3, [pc, #12]	; (24a34 <cpu_irq_enter_critical+0x48>)
   24a28:	601a      	str	r2, [r3, #0]
}
   24a2a:	46c0      	nop			; (mov r8, r8)
   24a2c:	46bd      	mov	sp, r7
   24a2e:	b002      	add	sp, #8
   24a30:	bd80      	pop	{r7, pc}
   24a32:	46c0      	nop			; (mov r8, r8)
   24a34:	20003d54 	.word	0x20003d54
   24a38:	20000136 	.word	0x20000136
   24a3c:	20003d58 	.word	0x20003d58

00024a40 <cpu_irq_leave_critical>:

void cpu_irq_leave_critical(void)
{
   24a40:	b580      	push	{r7, lr}
   24a42:	af00      	add	r7, sp, #0
	/* Check if the user is trying to leave a critical section when not in a critical section */
	Assert(cpu_irq_critical_section_counter > 0);

	cpu_irq_critical_section_counter--;
   24a44:	4b0b      	ldr	r3, [pc, #44]	; (24a74 <cpu_irq_leave_critical+0x34>)
   24a46:	681b      	ldr	r3, [r3, #0]
   24a48:	1e5a      	subs	r2, r3, #1
   24a4a:	4b0a      	ldr	r3, [pc, #40]	; (24a74 <cpu_irq_leave_critical+0x34>)
   24a4c:	601a      	str	r2, [r3, #0]

	/* Only enable global interrupts when the counter reaches 0 and the state of the global interrupt flag
	   was enabled when entering critical state */
	if ((cpu_irq_critical_section_counter == 0) && (cpu_irq_prev_interrupt_state)) {
   24a4e:	4b09      	ldr	r3, [pc, #36]	; (24a74 <cpu_irq_leave_critical+0x34>)
   24a50:	681b      	ldr	r3, [r3, #0]
   24a52:	2b00      	cmp	r3, #0
   24a54:	d10a      	bne.n	24a6c <cpu_irq_leave_critical+0x2c>
   24a56:	4b08      	ldr	r3, [pc, #32]	; (24a78 <cpu_irq_leave_critical+0x38>)
   24a58:	781b      	ldrb	r3, [r3, #0]
   24a5a:	b2db      	uxtb	r3, r3
   24a5c:	2b00      	cmp	r3, #0
   24a5e:	d005      	beq.n	24a6c <cpu_irq_leave_critical+0x2c>
		cpu_irq_enable();
   24a60:	4b06      	ldr	r3, [pc, #24]	; (24a7c <cpu_irq_leave_critical+0x3c>)
   24a62:	2201      	movs	r2, #1
   24a64:	701a      	strb	r2, [r3, #0]
   24a66:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
   24a6a:	b662      	cpsie	i
	}
}
   24a6c:	46c0      	nop			; (mov r8, r8)
   24a6e:	46bd      	mov	sp, r7
   24a70:	bd80      	pop	{r7, pc}
   24a72:	46c0      	nop			; (mov r8, r8)
   24a74:	20003d54 	.word	0x20003d54
   24a78:	20003d58 	.word	0x20003d58
   24a7c:	20000136 	.word	0x20000136

00024a80 <system_pinmux_get_group_from_gpio_pin>:
{
   24a80:	b580      	push	{r7, lr}
   24a82:	b084      	sub	sp, #16
   24a84:	af00      	add	r7, sp, #0
   24a86:	0002      	movs	r2, r0
   24a88:	1dfb      	adds	r3, r7, #7
   24a8a:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
   24a8c:	230f      	movs	r3, #15
   24a8e:	18fb      	adds	r3, r7, r3
   24a90:	1dfa      	adds	r2, r7, #7
   24a92:	7812      	ldrb	r2, [r2, #0]
   24a94:	09d2      	lsrs	r2, r2, #7
   24a96:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
   24a98:	230e      	movs	r3, #14
   24a9a:	18fb      	adds	r3, r7, r3
   24a9c:	1dfa      	adds	r2, r7, #7
   24a9e:	7812      	ldrb	r2, [r2, #0]
   24aa0:	0952      	lsrs	r2, r2, #5
   24aa2:	701a      	strb	r2, [r3, #0]
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
   24aa4:	4b0d      	ldr	r3, [pc, #52]	; (24adc <system_pinmux_get_group_from_gpio_pin+0x5c>)
   24aa6:	60bb      	str	r3, [r7, #8]
	if (port_index < PORT_INST_NUM) {
   24aa8:	230f      	movs	r3, #15
   24aaa:	18fb      	adds	r3, r7, r3
   24aac:	781b      	ldrb	r3, [r3, #0]
   24aae:	2b00      	cmp	r3, #0
   24ab0:	d10f      	bne.n	24ad2 <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
   24ab2:	230f      	movs	r3, #15
   24ab4:	18fb      	adds	r3, r7, r3
   24ab6:	781b      	ldrb	r3, [r3, #0]
   24ab8:	009b      	lsls	r3, r3, #2
   24aba:	2210      	movs	r2, #16
   24abc:	4694      	mov	ip, r2
   24abe:	44bc      	add	ip, r7
   24ac0:	4463      	add	r3, ip
   24ac2:	3b08      	subs	r3, #8
   24ac4:	681a      	ldr	r2, [r3, #0]
   24ac6:	230e      	movs	r3, #14
   24ac8:	18fb      	adds	r3, r7, r3
   24aca:	781b      	ldrb	r3, [r3, #0]
   24acc:	01db      	lsls	r3, r3, #7
   24ace:	18d3      	adds	r3, r2, r3
   24ad0:	e000      	b.n	24ad4 <system_pinmux_get_group_from_gpio_pin+0x54>
		return NULL;
   24ad2:	2300      	movs	r3, #0
}
   24ad4:	0018      	movs	r0, r3
   24ad6:	46bd      	mov	sp, r7
   24ad8:	b004      	add	sp, #16
   24ada:	bd80      	pop	{r7, pc}
   24adc:	41004400 	.word	0x41004400

00024ae0 <port_get_group_from_gpio_pin>:
{
   24ae0:	b580      	push	{r7, lr}
   24ae2:	b082      	sub	sp, #8
   24ae4:	af00      	add	r7, sp, #0
   24ae6:	0002      	movs	r2, r0
   24ae8:	1dfb      	adds	r3, r7, #7
   24aea:	701a      	strb	r2, [r3, #0]
	return system_pinmux_get_group_from_gpio_pin(gpio_pin);
   24aec:	1dfb      	adds	r3, r7, #7
   24aee:	781b      	ldrb	r3, [r3, #0]
   24af0:	0018      	movs	r0, r3
   24af2:	4b03      	ldr	r3, [pc, #12]	; (24b00 <port_get_group_from_gpio_pin+0x20>)
   24af4:	4798      	blx	r3
   24af6:	0003      	movs	r3, r0
}
   24af8:	0018      	movs	r0, r3
   24afa:	46bd      	mov	sp, r7
   24afc:	b002      	add	sp, #8
   24afe:	bd80      	pop	{r7, pc}
   24b00:	00024a81 	.word	0x00024a81

00024b04 <port_get_config_defaults>:
{
   24b04:	b580      	push	{r7, lr}
   24b06:	b082      	sub	sp, #8
   24b08:	af00      	add	r7, sp, #0
   24b0a:	6078      	str	r0, [r7, #4]
	config->direction  = PORT_PIN_DIR_INPUT;
   24b0c:	687b      	ldr	r3, [r7, #4]
   24b0e:	2200      	movs	r2, #0
   24b10:	701a      	strb	r2, [r3, #0]
	config->input_pull = PORT_PIN_PULL_UP;
   24b12:	687b      	ldr	r3, [r7, #4]
   24b14:	2201      	movs	r2, #1
   24b16:	705a      	strb	r2, [r3, #1]
	config->powersave  = false;
   24b18:	687b      	ldr	r3, [r7, #4]
   24b1a:	2200      	movs	r2, #0
   24b1c:	709a      	strb	r2, [r3, #2]
}
   24b1e:	46c0      	nop			; (mov r8, r8)
   24b20:	46bd      	mov	sp, r7
   24b22:	b002      	add	sp, #8
   24b24:	bd80      	pop	{r7, pc}
	...

00024b28 <port_pin_set_output_level>:
{
   24b28:	b580      	push	{r7, lr}
   24b2a:	b084      	sub	sp, #16
   24b2c:	af00      	add	r7, sp, #0
   24b2e:	0002      	movs	r2, r0
   24b30:	1dfb      	adds	r3, r7, #7
   24b32:	701a      	strb	r2, [r3, #0]
   24b34:	1dbb      	adds	r3, r7, #6
   24b36:	1c0a      	adds	r2, r1, #0
   24b38:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
   24b3a:	1dfb      	adds	r3, r7, #7
   24b3c:	781b      	ldrb	r3, [r3, #0]
   24b3e:	0018      	movs	r0, r3
   24b40:	4b0d      	ldr	r3, [pc, #52]	; (24b78 <port_pin_set_output_level+0x50>)
   24b42:	4798      	blx	r3
   24b44:	0003      	movs	r3, r0
   24b46:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
   24b48:	1dfb      	adds	r3, r7, #7
   24b4a:	781b      	ldrb	r3, [r3, #0]
   24b4c:	221f      	movs	r2, #31
   24b4e:	4013      	ands	r3, r2
   24b50:	2201      	movs	r2, #1
   24b52:	409a      	lsls	r2, r3
   24b54:	0013      	movs	r3, r2
   24b56:	60bb      	str	r3, [r7, #8]
	if (level) {
   24b58:	1dbb      	adds	r3, r7, #6
   24b5a:	781b      	ldrb	r3, [r3, #0]
   24b5c:	2b00      	cmp	r3, #0
   24b5e:	d003      	beq.n	24b68 <port_pin_set_output_level+0x40>
		port_base->OUTSET.reg = pin_mask;
   24b60:	68fb      	ldr	r3, [r7, #12]
   24b62:	68ba      	ldr	r2, [r7, #8]
   24b64:	619a      	str	r2, [r3, #24]
}
   24b66:	e002      	b.n	24b6e <port_pin_set_output_level+0x46>
		port_base->OUTCLR.reg = pin_mask;
   24b68:	68fb      	ldr	r3, [r7, #12]
   24b6a:	68ba      	ldr	r2, [r7, #8]
   24b6c:	615a      	str	r2, [r3, #20]
}
   24b6e:	46c0      	nop			; (mov r8, r8)
   24b70:	46bd      	mov	sp, r7
   24b72:	b004      	add	sp, #16
   24b74:	bd80      	pop	{r7, pc}
   24b76:	46c0      	nop			; (mov r8, r8)
   24b78:	00024ae1 	.word	0x00024ae1

00024b7c <system_board_init>:
void board_init(void);
#  pragma weak board_init=system_board_init
#endif

void system_board_init(void)
{
   24b7c:	b580      	push	{r7, lr}
   24b7e:	b082      	sub	sp, #8
   24b80:	af00      	add	r7, sp, #0
	struct port_config pin_conf;
	port_get_config_defaults(&pin_conf);
   24b82:	1d3b      	adds	r3, r7, #4
   24b84:	0018      	movs	r0, r3
   24b86:	4b0e      	ldr	r3, [pc, #56]	; (24bc0 <system_board_init+0x44>)
   24b88:	4798      	blx	r3

	/* Configure LEDs as outputs, turn them off */
	pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
   24b8a:	1d3b      	adds	r3, r7, #4
   24b8c:	2201      	movs	r2, #1
   24b8e:	701a      	strb	r2, [r3, #0]
	port_pin_set_config(LED_0_PIN, &pin_conf);
   24b90:	1d3b      	adds	r3, r7, #4
   24b92:	0019      	movs	r1, r3
   24b94:	2017      	movs	r0, #23
   24b96:	4b0b      	ldr	r3, [pc, #44]	; (24bc4 <system_board_init+0x48>)
   24b98:	4798      	blx	r3
	port_pin_set_output_level(LED_0_PIN, LED_0_INACTIVE);
   24b9a:	2101      	movs	r1, #1
   24b9c:	2017      	movs	r0, #23
   24b9e:	4b0a      	ldr	r3, [pc, #40]	; (24bc8 <system_board_init+0x4c>)
   24ba0:	4798      	blx	r3
	
	/* Set buttons as inputs */
	pin_conf.direction  = PORT_PIN_DIR_INPUT;
   24ba2:	1d3b      	adds	r3, r7, #4
   24ba4:	2200      	movs	r2, #0
   24ba6:	701a      	strb	r2, [r3, #0]
	pin_conf.input_pull = PORT_PIN_PULL_UP;
   24ba8:	1d3b      	adds	r3, r7, #4
   24baa:	2201      	movs	r2, #1
   24bac:	705a      	strb	r2, [r3, #1]
	port_pin_set_config(BUTTON_0_PIN, &pin_conf);
   24bae:	1d3b      	adds	r3, r7, #4
   24bb0:	0019      	movs	r1, r3
   24bb2:	2037      	movs	r0, #55	; 0x37
   24bb4:	4b03      	ldr	r3, [pc, #12]	; (24bc4 <system_board_init+0x48>)
   24bb6:	4798      	blx	r3
}
   24bb8:	46c0      	nop			; (mov r8, r8)
   24bba:	46bd      	mov	sp, r7
   24bbc:	b002      	add	sp, #8
   24bbe:	bd80      	pop	{r7, pc}
   24bc0:	00024b05 	.word	0x00024b05
   24bc4:	000251f1 	.word	0x000251f1
   24bc8:	00024b29 	.word	0x00024b29

00024bcc <_extint_get_eic_from_channel>:
 *
 * \return Base address of the associated EIC module.
 */
static inline Eic * _extint_get_eic_from_channel(
		const uint8_t channel)
{
   24bcc:	b580      	push	{r7, lr}
   24bce:	b084      	sub	sp, #16
   24bd0:	af00      	add	r7, sp, #0
   24bd2:	0002      	movs	r2, r0
   24bd4:	1dfb      	adds	r3, r7, #7
   24bd6:	701a      	strb	r2, [r3, #0]
	uint8_t eic_index = (channel / 32);
   24bd8:	230f      	movs	r3, #15
   24bda:	18fb      	adds	r3, r7, r3
   24bdc:	1dfa      	adds	r2, r7, #7
   24bde:	7812      	ldrb	r2, [r2, #0]
   24be0:	0952      	lsrs	r2, r2, #5
   24be2:	701a      	strb	r2, [r3, #0]

	if (eic_index < EIC_INST_NUM) {
   24be4:	230f      	movs	r3, #15
   24be6:	18fb      	adds	r3, r7, r3
   24be8:	781b      	ldrb	r3, [r3, #0]
   24bea:	2b00      	cmp	r3, #0
   24bec:	d10c      	bne.n	24c08 <_extint_get_eic_from_channel+0x3c>
		/* Array of available EICs */
		Eic *const eics[EIC_INST_NUM] = EIC_INSTS;
   24bee:	4b09      	ldr	r3, [pc, #36]	; (24c14 <_extint_get_eic_from_channel+0x48>)
   24bf0:	60bb      	str	r3, [r7, #8]

		return eics[eic_index];
   24bf2:	230f      	movs	r3, #15
   24bf4:	18fb      	adds	r3, r7, r3
   24bf6:	781b      	ldrb	r3, [r3, #0]
   24bf8:	009b      	lsls	r3, r3, #2
   24bfa:	2210      	movs	r2, #16
   24bfc:	4694      	mov	ip, r2
   24bfe:	44bc      	add	ip, r7
   24c00:	4463      	add	r3, ip
   24c02:	3b08      	subs	r3, #8
   24c04:	681b      	ldr	r3, [r3, #0]
   24c06:	e000      	b.n	24c0a <_extint_get_eic_from_channel+0x3e>
	} else {
		Assert(false);
		return NULL;
   24c08:	2300      	movs	r3, #0
	}
}
   24c0a:	0018      	movs	r0, r3
   24c0c:	46bd      	mov	sp, r7
   24c0e:	b004      	add	sp, #16
   24c10:	bd80      	pop	{r7, pc}
   24c12:	46c0      	nop			; (mov r8, r8)
   24c14:	40001800 	.word	0x40001800

00024c18 <extint_chan_is_detected>:
 *  \retval true   If the channel's edge/level detection criteria was met
 *  \retval false  If the channel has not detected its configured criteria
 */
static inline bool extint_chan_is_detected(
		const uint8_t channel)
{
   24c18:	b580      	push	{r7, lr}
   24c1a:	b084      	sub	sp, #16
   24c1c:	af00      	add	r7, sp, #0
   24c1e:	0002      	movs	r2, r0
   24c20:	1dfb      	adds	r3, r7, #7
   24c22:	701a      	strb	r2, [r3, #0]
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
   24c24:	1dfb      	adds	r3, r7, #7
   24c26:	781b      	ldrb	r3, [r3, #0]
   24c28:	0018      	movs	r0, r3
   24c2a:	4b0b      	ldr	r3, [pc, #44]	; (24c58 <extint_chan_is_detected+0x40>)
   24c2c:	4798      	blx	r3
   24c2e:	0003      	movs	r3, r0
   24c30:	60fb      	str	r3, [r7, #12]
	uint32_t eic_mask   = (1UL << (channel % 32));
   24c32:	1dfb      	adds	r3, r7, #7
   24c34:	781b      	ldrb	r3, [r3, #0]
   24c36:	221f      	movs	r2, #31
   24c38:	4013      	ands	r3, r2
   24c3a:	2201      	movs	r2, #1
   24c3c:	409a      	lsls	r2, r3
   24c3e:	0013      	movs	r3, r2
   24c40:	60bb      	str	r3, [r7, #8]

	return (eic_module->INTFLAG.reg & eic_mask);
   24c42:	68fb      	ldr	r3, [r7, #12]
   24c44:	691b      	ldr	r3, [r3, #16]
   24c46:	68ba      	ldr	r2, [r7, #8]
   24c48:	4013      	ands	r3, r2
   24c4a:	1e5a      	subs	r2, r3, #1
   24c4c:	4193      	sbcs	r3, r2
   24c4e:	b2db      	uxtb	r3, r3
}
   24c50:	0018      	movs	r0, r3
   24c52:	46bd      	mov	sp, r7
   24c54:	b004      	add	sp, #16
   24c56:	bd80      	pop	{r7, pc}
   24c58:	00024bcd 	.word	0x00024bcd

00024c5c <extint_chan_clear_detected>:
 *
 *  \param[in] channel  External Interrupt channel index to check
 */
static inline void extint_chan_clear_detected(
		const uint8_t channel)
{
   24c5c:	b580      	push	{r7, lr}
   24c5e:	b084      	sub	sp, #16
   24c60:	af00      	add	r7, sp, #0
   24c62:	0002      	movs	r2, r0
   24c64:	1dfb      	adds	r3, r7, #7
   24c66:	701a      	strb	r2, [r3, #0]
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
   24c68:	1dfb      	adds	r3, r7, #7
   24c6a:	781b      	ldrb	r3, [r3, #0]
   24c6c:	0018      	movs	r0, r3
   24c6e:	4b09      	ldr	r3, [pc, #36]	; (24c94 <extint_chan_clear_detected+0x38>)
   24c70:	4798      	blx	r3
   24c72:	0003      	movs	r3, r0
   24c74:	60fb      	str	r3, [r7, #12]
	uint32_t eic_mask   = (1UL << (channel % 32));
   24c76:	1dfb      	adds	r3, r7, #7
   24c78:	781b      	ldrb	r3, [r3, #0]
   24c7a:	221f      	movs	r2, #31
   24c7c:	4013      	ands	r3, r2
   24c7e:	2201      	movs	r2, #1
   24c80:	409a      	lsls	r2, r3
   24c82:	0013      	movs	r3, r2
   24c84:	60bb      	str	r3, [r7, #8]

	eic_module->INTFLAG.reg = eic_mask;
   24c86:	68fb      	ldr	r3, [r7, #12]
   24c88:	68ba      	ldr	r2, [r7, #8]
   24c8a:	611a      	str	r2, [r3, #16]
}
   24c8c:	46c0      	nop			; (mov r8, r8)
   24c8e:	46bd      	mov	sp, r7
   24c90:	b004      	add	sp, #16
   24c92:	bd80      	pop	{r7, pc}
   24c94:	00024bcd 	.word	0x00024bcd

00024c98 <extint_register_callback>:
 */
enum status_code extint_register_callback(
	const extint_callback_t callback,
	const uint8_t channel,
	const enum extint_callback_type type)
{
   24c98:	b580      	push	{r7, lr}
   24c9a:	b082      	sub	sp, #8
   24c9c:	af00      	add	r7, sp, #0
   24c9e:	6078      	str	r0, [r7, #4]
   24ca0:	0008      	movs	r0, r1
   24ca2:	0011      	movs	r1, r2
   24ca4:	1cfb      	adds	r3, r7, #3
   24ca6:	1c02      	adds	r2, r0, #0
   24ca8:	701a      	strb	r2, [r3, #0]
   24caa:	1cbb      	adds	r3, r7, #2
   24cac:	1c0a      	adds	r2, r1, #0
   24cae:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(callback);

	if (type != EXTINT_CALLBACK_TYPE_DETECT) {
   24cb0:	1cbb      	adds	r3, r7, #2
   24cb2:	781b      	ldrb	r3, [r3, #0]
   24cb4:	2b00      	cmp	r3, #0
   24cb6:	d001      	beq.n	24cbc <extint_register_callback+0x24>
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
   24cb8:	2317      	movs	r3, #23
   24cba:	e019      	b.n	24cf0 <extint_register_callback+0x58>
	}

	if (_extint_dev.callbacks[channel] == NULL) {
   24cbc:	1cfb      	adds	r3, r7, #3
   24cbe:	781a      	ldrb	r2, [r3, #0]
   24cc0:	4b0d      	ldr	r3, [pc, #52]	; (24cf8 <extint_register_callback+0x60>)
   24cc2:	0092      	lsls	r2, r2, #2
   24cc4:	58d3      	ldr	r3, [r2, r3]
   24cc6:	2b00      	cmp	r3, #0
   24cc8:	d107      	bne.n	24cda <extint_register_callback+0x42>
		_extint_dev.callbacks[channel] = callback;
   24cca:	1cfb      	adds	r3, r7, #3
   24ccc:	781a      	ldrb	r2, [r3, #0]
   24cce:	4b0a      	ldr	r3, [pc, #40]	; (24cf8 <extint_register_callback+0x60>)
   24cd0:	0092      	lsls	r2, r2, #2
   24cd2:	6879      	ldr	r1, [r7, #4]
   24cd4:	50d1      	str	r1, [r2, r3]
		return STATUS_OK;
   24cd6:	2300      	movs	r3, #0
   24cd8:	e00a      	b.n	24cf0 <extint_register_callback+0x58>
	} else if (_extint_dev.callbacks[channel] == callback) {
   24cda:	1cfb      	adds	r3, r7, #3
   24cdc:	781a      	ldrb	r2, [r3, #0]
   24cde:	4b06      	ldr	r3, [pc, #24]	; (24cf8 <extint_register_callback+0x60>)
   24ce0:	0092      	lsls	r2, r2, #2
   24ce2:	58d2      	ldr	r2, [r2, r3]
   24ce4:	687b      	ldr	r3, [r7, #4]
   24ce6:	429a      	cmp	r2, r3
   24ce8:	d101      	bne.n	24cee <extint_register_callback+0x56>
		return STATUS_OK;
   24cea:	2300      	movs	r3, #0
   24cec:	e000      	b.n	24cf0 <extint_register_callback+0x58>
	}

	return STATUS_ERR_ALREADY_INITIALIZED;
   24cee:	231d      	movs	r3, #29
}
   24cf0:	0018      	movs	r0, r3
   24cf2:	46bd      	mov	sp, r7
   24cf4:	b002      	add	sp, #8
   24cf6:	bd80      	pop	{r7, pc}
   24cf8:	20005664 	.word	0x20005664

00024cfc <extint_chan_enable_callback>:
 * \retval STATUS_ERR_INVALID_ARG  If an invalid callback type was supplied
 */
enum status_code extint_chan_enable_callback(
	const uint8_t channel,
	const enum extint_callback_type type)
{
   24cfc:	b580      	push	{r7, lr}
   24cfe:	b084      	sub	sp, #16
   24d00:	af00      	add	r7, sp, #0
   24d02:	0002      	movs	r2, r0
   24d04:	1dfb      	adds	r3, r7, #7
   24d06:	701a      	strb	r2, [r3, #0]
   24d08:	1dbb      	adds	r3, r7, #6
   24d0a:	1c0a      	adds	r2, r1, #0
   24d0c:	701a      	strb	r2, [r3, #0]
	if (type == EXTINT_CALLBACK_TYPE_DETECT) {
   24d0e:	1dbb      	adds	r3, r7, #6
   24d10:	781b      	ldrb	r3, [r3, #0]
   24d12:	2b00      	cmp	r3, #0
   24d14:	d10e      	bne.n	24d34 <extint_chan_enable_callback+0x38>
		Eic *const eic = _extint_get_eic_from_channel(channel);
   24d16:	1dfb      	adds	r3, r7, #7
   24d18:	781b      	ldrb	r3, [r3, #0]
   24d1a:	0018      	movs	r0, r3
   24d1c:	4b08      	ldr	r3, [pc, #32]	; (24d40 <extint_chan_enable_callback+0x44>)
   24d1e:	4798      	blx	r3
   24d20:	0003      	movs	r3, r0
   24d22:	60fb      	str	r3, [r7, #12]

		eic->INTENSET.reg = (1UL << channel);
   24d24:	1dfb      	adds	r3, r7, #7
   24d26:	781b      	ldrb	r3, [r3, #0]
   24d28:	2201      	movs	r2, #1
   24d2a:	409a      	lsls	r2, r3
   24d2c:	68fb      	ldr	r3, [r7, #12]
   24d2e:	60da      	str	r2, [r3, #12]
	else {
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
   24d30:	2300      	movs	r3, #0
   24d32:	e000      	b.n	24d36 <extint_chan_enable_callback+0x3a>
		return STATUS_ERR_INVALID_ARG;
   24d34:	2317      	movs	r3, #23
}
   24d36:	0018      	movs	r0, r3
   24d38:	46bd      	mov	sp, r7
   24d3a:	b004      	add	sp, #16
   24d3c:	bd80      	pop	{r7, pc}
   24d3e:	46c0      	nop			; (mov r8, r8)
   24d40:	00024bcd 	.word	0x00024bcd

00024d44 <extint_chan_disable_callback>:
 * \retval STATUS_ERR_INVALID_ARG  If an invalid callback type was supplied
 */
enum status_code extint_chan_disable_callback(
	const uint8_t channel,
	const enum extint_callback_type type)
{
   24d44:	b580      	push	{r7, lr}
   24d46:	b084      	sub	sp, #16
   24d48:	af00      	add	r7, sp, #0
   24d4a:	0002      	movs	r2, r0
   24d4c:	1dfb      	adds	r3, r7, #7
   24d4e:	701a      	strb	r2, [r3, #0]
   24d50:	1dbb      	adds	r3, r7, #6
   24d52:	1c0a      	adds	r2, r1, #0
   24d54:	701a      	strb	r2, [r3, #0]
	if (type == EXTINT_CALLBACK_TYPE_DETECT) {
   24d56:	1dbb      	adds	r3, r7, #6
   24d58:	781b      	ldrb	r3, [r3, #0]
   24d5a:	2b00      	cmp	r3, #0
   24d5c:	d10e      	bne.n	24d7c <extint_chan_disable_callback+0x38>
		Eic *const eic = _extint_get_eic_from_channel(channel);
   24d5e:	1dfb      	adds	r3, r7, #7
   24d60:	781b      	ldrb	r3, [r3, #0]
   24d62:	0018      	movs	r0, r3
   24d64:	4b08      	ldr	r3, [pc, #32]	; (24d88 <extint_chan_disable_callback+0x44>)
   24d66:	4798      	blx	r3
   24d68:	0003      	movs	r3, r0
   24d6a:	60fb      	str	r3, [r7, #12]

		eic->INTENCLR.reg = (1UL << channel);
   24d6c:	1dfb      	adds	r3, r7, #7
   24d6e:	781b      	ldrb	r3, [r3, #0]
   24d70:	2201      	movs	r2, #1
   24d72:	409a      	lsls	r2, r3
   24d74:	68fb      	ldr	r3, [r7, #12]
   24d76:	609a      	str	r2, [r3, #8]
	else {
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
   24d78:	2300      	movs	r3, #0
   24d7a:	e000      	b.n	24d7e <extint_chan_disable_callback+0x3a>
		return STATUS_ERR_INVALID_ARG;
   24d7c:	2317      	movs	r3, #23
}
   24d7e:	0018      	movs	r0, r3
   24d80:	46bd      	mov	sp, r7
   24d82:	b004      	add	sp, #16
   24d84:	bd80      	pop	{r7, pc}
   24d86:	46c0      	nop			; (mov r8, r8)
   24d88:	00024bcd 	.word	0x00024bcd

00024d8c <EIC_Handler>:
	return _current_channel;
}

/** Handler for the EXTINT hardware module interrupt. */
void EIC_Handler(void)
{
   24d8c:	b580      	push	{r7, lr}
   24d8e:	af00      	add	r7, sp, #0
	/* Find any triggered channels, run associated callback handlers */
	for (_current_channel = 0; _current_channel < EIC_NUMBER_OF_INTERRUPTS ; _current_channel++) {
   24d90:	4b15      	ldr	r3, [pc, #84]	; (24de8 <EIC_Handler+0x5c>)
   24d92:	2200      	movs	r2, #0
   24d94:	701a      	strb	r2, [r3, #0]
   24d96:	e020      	b.n	24dda <EIC_Handler+0x4e>
		if (extint_chan_is_detected(_current_channel)) {
   24d98:	4b13      	ldr	r3, [pc, #76]	; (24de8 <EIC_Handler+0x5c>)
   24d9a:	781b      	ldrb	r3, [r3, #0]
   24d9c:	0018      	movs	r0, r3
   24d9e:	4b13      	ldr	r3, [pc, #76]	; (24dec <EIC_Handler+0x60>)
   24da0:	4798      	blx	r3
   24da2:	1e03      	subs	r3, r0, #0
   24da4:	d013      	beq.n	24dce <EIC_Handler+0x42>
			/* Clear flag */
			extint_chan_clear_detected(_current_channel);
   24da6:	4b10      	ldr	r3, [pc, #64]	; (24de8 <EIC_Handler+0x5c>)
   24da8:	781b      	ldrb	r3, [r3, #0]
   24daa:	0018      	movs	r0, r3
   24dac:	4b10      	ldr	r3, [pc, #64]	; (24df0 <EIC_Handler+0x64>)
   24dae:	4798      	blx	r3
			/* Find any associated callback entries in the callback table */
			if (_extint_dev.callbacks[_current_channel] != NULL) {
   24db0:	4b0d      	ldr	r3, [pc, #52]	; (24de8 <EIC_Handler+0x5c>)
   24db2:	781b      	ldrb	r3, [r3, #0]
   24db4:	001a      	movs	r2, r3
   24db6:	4b0f      	ldr	r3, [pc, #60]	; (24df4 <EIC_Handler+0x68>)
   24db8:	0092      	lsls	r2, r2, #2
   24dba:	58d3      	ldr	r3, [r2, r3]
   24dbc:	2b00      	cmp	r3, #0
   24dbe:	d006      	beq.n	24dce <EIC_Handler+0x42>
				/* Run the registered callback */
				_extint_dev.callbacks[_current_channel]();
   24dc0:	4b09      	ldr	r3, [pc, #36]	; (24de8 <EIC_Handler+0x5c>)
   24dc2:	781b      	ldrb	r3, [r3, #0]
   24dc4:	001a      	movs	r2, r3
   24dc6:	4b0b      	ldr	r3, [pc, #44]	; (24df4 <EIC_Handler+0x68>)
   24dc8:	0092      	lsls	r2, r2, #2
   24dca:	58d3      	ldr	r3, [r2, r3]
   24dcc:	4798      	blx	r3
	for (_current_channel = 0; _current_channel < EIC_NUMBER_OF_INTERRUPTS ; _current_channel++) {
   24dce:	4b06      	ldr	r3, [pc, #24]	; (24de8 <EIC_Handler+0x5c>)
   24dd0:	781b      	ldrb	r3, [r3, #0]
   24dd2:	3301      	adds	r3, #1
   24dd4:	b2da      	uxtb	r2, r3
   24dd6:	4b04      	ldr	r3, [pc, #16]	; (24de8 <EIC_Handler+0x5c>)
   24dd8:	701a      	strb	r2, [r3, #0]
   24dda:	4b03      	ldr	r3, [pc, #12]	; (24de8 <EIC_Handler+0x5c>)
   24ddc:	781b      	ldrb	r3, [r3, #0]
   24dde:	2b0f      	cmp	r3, #15
   24de0:	d9da      	bls.n	24d98 <EIC_Handler+0xc>
			}
		}
	}
}
   24de2:	46c0      	nop			; (mov r8, r8)
   24de4:	46bd      	mov	sp, r7
   24de6:	bd80      	pop	{r7, pc}
   24de8:	20005660 	.word	0x20005660
   24dec:	00024c19 	.word	0x00024c19
   24df0:	00024c5d 	.word	0x00024c5d
   24df4:	20005664 	.word	0x20005664

00024df8 <system_gclk_chan_get_config_defaults>:
{
   24df8:	b580      	push	{r7, lr}
   24dfa:	b082      	sub	sp, #8
   24dfc:	af00      	add	r7, sp, #0
   24dfe:	6078      	str	r0, [r7, #4]
	config->source_generator = GCLK_GENERATOR_0;
   24e00:	687b      	ldr	r3, [r7, #4]
   24e02:	2200      	movs	r2, #0
   24e04:	701a      	strb	r2, [r3, #0]
}
   24e06:	46c0      	nop			; (mov r8, r8)
   24e08:	46bd      	mov	sp, r7
   24e0a:	b002      	add	sp, #8
   24e0c:	bd80      	pop	{r7, pc}
	...

00024e10 <system_apb_clock_set_mask>:
{
   24e10:	b580      	push	{r7, lr}
   24e12:	b082      	sub	sp, #8
   24e14:	af00      	add	r7, sp, #0
   24e16:	0002      	movs	r2, r0
   24e18:	6039      	str	r1, [r7, #0]
   24e1a:	1dfb      	adds	r3, r7, #7
   24e1c:	701a      	strb	r2, [r3, #0]
	switch (bus) {
   24e1e:	1dfb      	adds	r3, r7, #7
   24e20:	781b      	ldrb	r3, [r3, #0]
   24e22:	2b01      	cmp	r3, #1
   24e24:	d00a      	beq.n	24e3c <system_apb_clock_set_mask+0x2c>
   24e26:	2b02      	cmp	r3, #2
   24e28:	d00f      	beq.n	24e4a <system_apb_clock_set_mask+0x3a>
   24e2a:	2b00      	cmp	r3, #0
   24e2c:	d114      	bne.n	24e58 <system_apb_clock_set_mask+0x48>
			PM->APBAMASK.reg |= mask;
   24e2e:	4b0e      	ldr	r3, [pc, #56]	; (24e68 <system_apb_clock_set_mask+0x58>)
   24e30:	4a0d      	ldr	r2, [pc, #52]	; (24e68 <system_apb_clock_set_mask+0x58>)
   24e32:	6991      	ldr	r1, [r2, #24]
   24e34:	683a      	ldr	r2, [r7, #0]
   24e36:	430a      	orrs	r2, r1
   24e38:	619a      	str	r2, [r3, #24]
			break;
   24e3a:	e00f      	b.n	24e5c <system_apb_clock_set_mask+0x4c>
			PM->APBBMASK.reg |= mask;
   24e3c:	4b0a      	ldr	r3, [pc, #40]	; (24e68 <system_apb_clock_set_mask+0x58>)
   24e3e:	4a0a      	ldr	r2, [pc, #40]	; (24e68 <system_apb_clock_set_mask+0x58>)
   24e40:	69d1      	ldr	r1, [r2, #28]
   24e42:	683a      	ldr	r2, [r7, #0]
   24e44:	430a      	orrs	r2, r1
   24e46:	61da      	str	r2, [r3, #28]
			break;
   24e48:	e008      	b.n	24e5c <system_apb_clock_set_mask+0x4c>
			PM->APBCMASK.reg |= mask;
   24e4a:	4b07      	ldr	r3, [pc, #28]	; (24e68 <system_apb_clock_set_mask+0x58>)
   24e4c:	4a06      	ldr	r2, [pc, #24]	; (24e68 <system_apb_clock_set_mask+0x58>)
   24e4e:	6a11      	ldr	r1, [r2, #32]
   24e50:	683a      	ldr	r2, [r7, #0]
   24e52:	430a      	orrs	r2, r1
   24e54:	621a      	str	r2, [r3, #32]
			break;
   24e56:	e001      	b.n	24e5c <system_apb_clock_set_mask+0x4c>
			return STATUS_ERR_INVALID_ARG;
   24e58:	2317      	movs	r3, #23
   24e5a:	e000      	b.n	24e5e <system_apb_clock_set_mask+0x4e>
	return STATUS_OK;
   24e5c:	2300      	movs	r3, #0
}
   24e5e:	0018      	movs	r0, r3
   24e60:	46bd      	mov	sp, r7
   24e62:	b002      	add	sp, #8
   24e64:	bd80      	pop	{r7, pc}
   24e66:	46c0      	nop			; (mov r8, r8)
   24e68:	40000400 	.word	0x40000400

00024e6c <system_pinmux_get_config_defaults>:
{
   24e6c:	b580      	push	{r7, lr}
   24e6e:	b082      	sub	sp, #8
   24e70:	af00      	add	r7, sp, #0
   24e72:	6078      	str	r0, [r7, #4]
	config->mux_position = SYSTEM_PINMUX_GPIO;
   24e74:	687b      	ldr	r3, [r7, #4]
   24e76:	2280      	movs	r2, #128	; 0x80
   24e78:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
   24e7a:	687b      	ldr	r3, [r7, #4]
   24e7c:	2200      	movs	r2, #0
   24e7e:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
   24e80:	687b      	ldr	r3, [r7, #4]
   24e82:	2201      	movs	r2, #1
   24e84:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
   24e86:	687b      	ldr	r3, [r7, #4]
   24e88:	2200      	movs	r2, #0
   24e8a:	70da      	strb	r2, [r3, #3]
}
   24e8c:	46c0      	nop			; (mov r8, r8)
   24e8e:	46bd      	mov	sp, r7
   24e90:	b002      	add	sp, #8
   24e92:	bd80      	pop	{r7, pc}

00024e94 <system_interrupt_enable>:
{
   24e94:	b580      	push	{r7, lr}
   24e96:	b082      	sub	sp, #8
   24e98:	af00      	add	r7, sp, #0
   24e9a:	0002      	movs	r2, r0
   24e9c:	1dfb      	adds	r3, r7, #7
   24e9e:	701a      	strb	r2, [r3, #0]
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
   24ea0:	4b06      	ldr	r3, [pc, #24]	; (24ebc <system_interrupt_enable+0x28>)
   24ea2:	1dfa      	adds	r2, r7, #7
   24ea4:	7812      	ldrb	r2, [r2, #0]
   24ea6:	0011      	movs	r1, r2
   24ea8:	221f      	movs	r2, #31
   24eaa:	400a      	ands	r2, r1
   24eac:	2101      	movs	r1, #1
   24eae:	4091      	lsls	r1, r2
   24eb0:	000a      	movs	r2, r1
   24eb2:	601a      	str	r2, [r3, #0]
}
   24eb4:	46c0      	nop			; (mov r8, r8)
   24eb6:	46bd      	mov	sp, r7
   24eb8:	b002      	add	sp, #8
   24eba:	bd80      	pop	{r7, pc}
   24ebc:	e000e100 	.word	0xe000e100

00024ec0 <_extint_get_eic_from_channel>:
{
   24ec0:	b580      	push	{r7, lr}
   24ec2:	b084      	sub	sp, #16
   24ec4:	af00      	add	r7, sp, #0
   24ec6:	0002      	movs	r2, r0
   24ec8:	1dfb      	adds	r3, r7, #7
   24eca:	701a      	strb	r2, [r3, #0]
	uint8_t eic_index = (channel / 32);
   24ecc:	230f      	movs	r3, #15
   24ece:	18fb      	adds	r3, r7, r3
   24ed0:	1dfa      	adds	r2, r7, #7
   24ed2:	7812      	ldrb	r2, [r2, #0]
   24ed4:	0952      	lsrs	r2, r2, #5
   24ed6:	701a      	strb	r2, [r3, #0]
	if (eic_index < EIC_INST_NUM) {
   24ed8:	230f      	movs	r3, #15
   24eda:	18fb      	adds	r3, r7, r3
   24edc:	781b      	ldrb	r3, [r3, #0]
   24ede:	2b00      	cmp	r3, #0
   24ee0:	d10c      	bne.n	24efc <_extint_get_eic_from_channel+0x3c>
		Eic *const eics[EIC_INST_NUM] = EIC_INSTS;
   24ee2:	4b09      	ldr	r3, [pc, #36]	; (24f08 <_extint_get_eic_from_channel+0x48>)
   24ee4:	60bb      	str	r3, [r7, #8]
		return eics[eic_index];
   24ee6:	230f      	movs	r3, #15
   24ee8:	18fb      	adds	r3, r7, r3
   24eea:	781b      	ldrb	r3, [r3, #0]
   24eec:	009b      	lsls	r3, r3, #2
   24eee:	2210      	movs	r2, #16
   24ef0:	4694      	mov	ip, r2
   24ef2:	44bc      	add	ip, r7
   24ef4:	4463      	add	r3, ip
   24ef6:	3b08      	subs	r3, #8
   24ef8:	681b      	ldr	r3, [r3, #0]
   24efa:	e000      	b.n	24efe <_extint_get_eic_from_channel+0x3e>
		return NULL;
   24efc:	2300      	movs	r3, #0
}
   24efe:	0018      	movs	r0, r3
   24f00:	46bd      	mov	sp, r7
   24f02:	b004      	add	sp, #16
   24f04:	bd80      	pop	{r7, pc}
   24f06:	46c0      	nop			; (mov r8, r8)
   24f08:	40001800 	.word	0x40001800

00024f0c <extint_is_syncing>:
 *
 * \retval true  If the module synchronization is ongoing
 * \retval false If the module has completed synchronization
 */
static inline bool extint_is_syncing(void)
{
   24f0c:	b580      	push	{r7, lr}
   24f0e:	b082      	sub	sp, #8
   24f10:	af00      	add	r7, sp, #0
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;
   24f12:	4b0f      	ldr	r3, [pc, #60]	; (24f50 <extint_is_syncing+0x44>)
   24f14:	603b      	str	r3, [r7, #0]

	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
   24f16:	2300      	movs	r3, #0
   24f18:	607b      	str	r3, [r7, #4]
   24f1a:	e011      	b.n	24f40 <extint_is_syncing+0x34>
		if (eics[i]->STATUS.reg & EIC_STATUS_SYNCBUSY) {
   24f1c:	687b      	ldr	r3, [r7, #4]
   24f1e:	009b      	lsls	r3, r3, #2
   24f20:	2208      	movs	r2, #8
   24f22:	4694      	mov	ip, r2
   24f24:	44bc      	add	ip, r7
   24f26:	4463      	add	r3, ip
   24f28:	3b08      	subs	r3, #8
   24f2a:	681b      	ldr	r3, [r3, #0]
   24f2c:	785b      	ldrb	r3, [r3, #1]
   24f2e:	b2db      	uxtb	r3, r3
   24f30:	b25b      	sxtb	r3, r3
   24f32:	2b00      	cmp	r3, #0
   24f34:	da01      	bge.n	24f3a <extint_is_syncing+0x2e>
			return true;
   24f36:	2301      	movs	r3, #1
   24f38:	e006      	b.n	24f48 <extint_is_syncing+0x3c>
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
   24f3a:	687b      	ldr	r3, [r7, #4]
   24f3c:	3301      	adds	r3, #1
   24f3e:	607b      	str	r3, [r7, #4]
   24f40:	687b      	ldr	r3, [r7, #4]
   24f42:	2b00      	cmp	r3, #0
   24f44:	d0ea      	beq.n	24f1c <extint_is_syncing+0x10>
		}
	}
	return false;
   24f46:	2300      	movs	r3, #0
}
   24f48:	0018      	movs	r0, r3
   24f4a:	46bd      	mov	sp, r7
   24f4c:	b002      	add	sp, #8
   24f4e:	bd80      	pop	{r7, pc}
   24f50:	40001800 	.word	0x40001800

00024f54 <_system_extint_init>:
 * \note When SYSTEM module is used, this function will be invoked by
 * \ref system_init() automatically if the module is included.
 */
void _system_extint_init(void);
void _system_extint_init(void)
{
   24f54:	b580      	push	{r7, lr}
   24f56:	b084      	sub	sp, #16
   24f58:	af00      	add	r7, sp, #0
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;
   24f5a:	4b2d      	ldr	r3, [pc, #180]	; (25010 <_system_extint_init+0xbc>)
   24f5c:	607b      	str	r3, [r7, #4]

	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, PM_APBAMASK_EIC);
   24f5e:	2140      	movs	r1, #64	; 0x40
   24f60:	2000      	movs	r0, #0
   24f62:	4b2c      	ldr	r3, [pc, #176]	; (25014 <_system_extint_init+0xc0>)
   24f64:	4798      	blx	r3

	/* Configure the generic clock for the module and enable it */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
   24f66:	003b      	movs	r3, r7
   24f68:	0018      	movs	r0, r3
   24f6a:	4b2b      	ldr	r3, [pc, #172]	; (25018 <_system_extint_init+0xc4>)
   24f6c:	4798      	blx	r3
	gclk_chan_conf.source_generator = EXTINT_CLOCK_SOURCE;
   24f6e:	003b      	movs	r3, r7
   24f70:	2200      	movs	r2, #0
   24f72:	701a      	strb	r2, [r3, #0]
	system_gclk_chan_set_config(EIC_GCLK_ID, &gclk_chan_conf);
   24f74:	003b      	movs	r3, r7
   24f76:	0019      	movs	r1, r3
   24f78:	2005      	movs	r0, #5
   24f7a:	4b28      	ldr	r3, [pc, #160]	; (2501c <_system_extint_init+0xc8>)
   24f7c:	4798      	blx	r3

	/* Enable the clock anyway, since when needed it will be requested
	 * by External Interrupt driver */
	system_gclk_chan_enable(EIC_GCLK_ID);
   24f7e:	2005      	movs	r0, #5
   24f80:	4b27      	ldr	r3, [pc, #156]	; (25020 <_system_extint_init+0xcc>)
   24f82:	4798      	blx	r3

	/* Reset all EIC hardware modules. */
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
   24f84:	2300      	movs	r3, #0
   24f86:	60fb      	str	r3, [r7, #12]
   24f88:	e018      	b.n	24fbc <_system_extint_init+0x68>
		eics[i]->CTRL.reg |= EIC_CTRL_SWRST;
   24f8a:	68fb      	ldr	r3, [r7, #12]
   24f8c:	009b      	lsls	r3, r3, #2
   24f8e:	2210      	movs	r2, #16
   24f90:	4694      	mov	ip, r2
   24f92:	44bc      	add	ip, r7
   24f94:	4463      	add	r3, ip
   24f96:	3b0c      	subs	r3, #12
   24f98:	681a      	ldr	r2, [r3, #0]
   24f9a:	68fb      	ldr	r3, [r7, #12]
   24f9c:	009b      	lsls	r3, r3, #2
   24f9e:	2110      	movs	r1, #16
   24fa0:	468c      	mov	ip, r1
   24fa2:	44bc      	add	ip, r7
   24fa4:	4463      	add	r3, ip
   24fa6:	3b0c      	subs	r3, #12
   24fa8:	681b      	ldr	r3, [r3, #0]
   24faa:	781b      	ldrb	r3, [r3, #0]
   24fac:	b2db      	uxtb	r3, r3
   24fae:	2101      	movs	r1, #1
   24fb0:	430b      	orrs	r3, r1
   24fb2:	b2db      	uxtb	r3, r3
   24fb4:	7013      	strb	r3, [r2, #0]
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
   24fb6:	68fb      	ldr	r3, [r7, #12]
   24fb8:	3301      	adds	r3, #1
   24fba:	60fb      	str	r3, [r7, #12]
   24fbc:	68fb      	ldr	r3, [r7, #12]
   24fbe:	2b00      	cmp	r3, #0
   24fc0:	d0e3      	beq.n	24f8a <_system_extint_init+0x36>
	}

	while (extint_is_syncing()) {
   24fc2:	46c0      	nop			; (mov r8, r8)
   24fc4:	4b17      	ldr	r3, [pc, #92]	; (25024 <_system_extint_init+0xd0>)
   24fc6:	4798      	blx	r3
   24fc8:	1e03      	subs	r3, r0, #0
   24fca:	d1fb      	bne.n	24fc4 <_system_extint_init+0x70>
	}

	/* Reset the software module */
#if EXTINT_CALLBACK_MODE == true
	/* Clear callback registration table */
	for (uint8_t j = 0; j < EIC_NUMBER_OF_INTERRUPTS; j++) {
   24fcc:	230b      	movs	r3, #11
   24fce:	18fb      	adds	r3, r7, r3
   24fd0:	2200      	movs	r2, #0
   24fd2:	701a      	strb	r2, [r3, #0]
   24fd4:	e00d      	b.n	24ff2 <_system_extint_init+0x9e>
		_extint_dev.callbacks[j] = NULL;
   24fd6:	230b      	movs	r3, #11
   24fd8:	18fb      	adds	r3, r7, r3
   24fda:	781a      	ldrb	r2, [r3, #0]
   24fdc:	4b12      	ldr	r3, [pc, #72]	; (25028 <_system_extint_init+0xd4>)
   24fde:	0092      	lsls	r2, r2, #2
   24fe0:	2100      	movs	r1, #0
   24fe2:	50d1      	str	r1, [r2, r3]
	for (uint8_t j = 0; j < EIC_NUMBER_OF_INTERRUPTS; j++) {
   24fe4:	230b      	movs	r3, #11
   24fe6:	18fb      	adds	r3, r7, r3
   24fe8:	781a      	ldrb	r2, [r3, #0]
   24fea:	230b      	movs	r3, #11
   24fec:	18fb      	adds	r3, r7, r3
   24fee:	3201      	adds	r2, #1
   24ff0:	701a      	strb	r2, [r3, #0]
   24ff2:	230b      	movs	r3, #11
   24ff4:	18fb      	adds	r3, r7, r3
   24ff6:	781b      	ldrb	r3, [r3, #0]
   24ff8:	2b0f      	cmp	r3, #15
   24ffa:	d9ec      	bls.n	24fd6 <_system_extint_init+0x82>
	}
	system_interrupt_enable(SYSTEM_INTERRUPT_MODULE_EIC);
   24ffc:	2004      	movs	r0, #4
   24ffe:	4b0b      	ldr	r3, [pc, #44]	; (2502c <_system_extint_init+0xd8>)
   25000:	4798      	blx	r3
#endif

	/* Enables the driver for further use */
	_extint_enable();
   25002:	4b0b      	ldr	r3, [pc, #44]	; (25030 <_system_extint_init+0xdc>)
   25004:	4798      	blx	r3
}
   25006:	46c0      	nop			; (mov r8, r8)
   25008:	46bd      	mov	sp, r7
   2500a:	b004      	add	sp, #16
   2500c:	bd80      	pop	{r7, pc}
   2500e:	46c0      	nop			; (mov r8, r8)
   25010:	40001800 	.word	0x40001800
   25014:	00024e11 	.word	0x00024e11
   25018:	00024df9 	.word	0x00024df9
   2501c:	00028681 	.word	0x00028681
   25020:	000286c5 	.word	0x000286c5
   25024:	00024f0d 	.word	0x00024f0d
   25028:	20005664 	.word	0x20005664
   2502c:	00024e95 	.word	0x00024e95
   25030:	00025035 	.word	0x00025035

00025034 <_extint_enable>:
 *
 * Enables EIC modules.
 * Registered callback list will not be affected if callback mode is used.
 */
void _extint_enable(void)
{
   25034:	b580      	push	{r7, lr}
   25036:	b082      	sub	sp, #8
   25038:	af00      	add	r7, sp, #0
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;
   2503a:	4b15      	ldr	r3, [pc, #84]	; (25090 <_extint_enable+0x5c>)
   2503c:	603b      	str	r3, [r7, #0]

	/* Enable all EIC hardware modules. */
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
   2503e:	2300      	movs	r3, #0
   25040:	607b      	str	r3, [r7, #4]
   25042:	e018      	b.n	25076 <_extint_enable+0x42>
		eics[i]->CTRL.reg |= EIC_CTRL_ENABLE;
   25044:	687b      	ldr	r3, [r7, #4]
   25046:	009b      	lsls	r3, r3, #2
   25048:	2208      	movs	r2, #8
   2504a:	4694      	mov	ip, r2
   2504c:	44bc      	add	ip, r7
   2504e:	4463      	add	r3, ip
   25050:	3b08      	subs	r3, #8
   25052:	681a      	ldr	r2, [r3, #0]
   25054:	687b      	ldr	r3, [r7, #4]
   25056:	009b      	lsls	r3, r3, #2
   25058:	2108      	movs	r1, #8
   2505a:	468c      	mov	ip, r1
   2505c:	44bc      	add	ip, r7
   2505e:	4463      	add	r3, ip
   25060:	3b08      	subs	r3, #8
   25062:	681b      	ldr	r3, [r3, #0]
   25064:	781b      	ldrb	r3, [r3, #0]
   25066:	b2db      	uxtb	r3, r3
   25068:	2102      	movs	r1, #2
   2506a:	430b      	orrs	r3, r1
   2506c:	b2db      	uxtb	r3, r3
   2506e:	7013      	strb	r3, [r2, #0]
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
   25070:	687b      	ldr	r3, [r7, #4]
   25072:	3301      	adds	r3, #1
   25074:	607b      	str	r3, [r7, #4]
   25076:	687b      	ldr	r3, [r7, #4]
   25078:	2b00      	cmp	r3, #0
   2507a:	d0e3      	beq.n	25044 <_extint_enable+0x10>
	}

	while (extint_is_syncing()) {
   2507c:	46c0      	nop			; (mov r8, r8)
   2507e:	4b05      	ldr	r3, [pc, #20]	; (25094 <_extint_enable+0x60>)
   25080:	4798      	blx	r3
   25082:	1e03      	subs	r3, r0, #0
   25084:	d1fb      	bne.n	2507e <_extint_enable+0x4a>
		/* Wait for all hardware modules to complete synchronization */
	}
}
   25086:	46c0      	nop			; (mov r8, r8)
   25088:	46bd      	mov	sp, r7
   2508a:	b002      	add	sp, #8
   2508c:	bd80      	pop	{r7, pc}
   2508e:	46c0      	nop			; (mov r8, r8)
   25090:	40001800 	.word	0x40001800
   25094:	00024f0d 	.word	0x00024f0d

00025098 <extint_chan_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
void extint_chan_get_config_defaults(
		struct extint_chan_conf *const config)
{
   25098:	b580      	push	{r7, lr}
   2509a:	b082      	sub	sp, #8
   2509c:	af00      	add	r7, sp, #0
   2509e:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->gpio_pin            = 0;
   250a0:	687b      	ldr	r3, [r7, #4]
   250a2:	2200      	movs	r2, #0
   250a4:	601a      	str	r2, [r3, #0]
	config->gpio_pin_mux        = 0;
   250a6:	687b      	ldr	r3, [r7, #4]
   250a8:	2200      	movs	r2, #0
   250aa:	605a      	str	r2, [r3, #4]
	config->gpio_pin_pull       = EXTINT_PULL_UP;
   250ac:	687b      	ldr	r3, [r7, #4]
   250ae:	2201      	movs	r2, #1
   250b0:	721a      	strb	r2, [r3, #8]
	config->wake_if_sleeping    = true;
   250b2:	687b      	ldr	r3, [r7, #4]
   250b4:	2201      	movs	r2, #1
   250b6:	725a      	strb	r2, [r3, #9]
	config->filter_input_signal = false;
   250b8:	687b      	ldr	r3, [r7, #4]
   250ba:	2200      	movs	r2, #0
   250bc:	729a      	strb	r2, [r3, #10]
	config->detection_criteria  = EXTINT_DETECT_FALLING;
   250be:	687b      	ldr	r3, [r7, #4]
   250c0:	2202      	movs	r2, #2
   250c2:	72da      	strb	r2, [r3, #11]
}
   250c4:	46c0      	nop			; (mov r8, r8)
   250c6:	46bd      	mov	sp, r7
   250c8:	b002      	add	sp, #8
   250ca:	bd80      	pop	{r7, pc}

000250cc <extint_chan_set_config>:

 */
void extint_chan_set_config(
		const uint8_t channel,
		const struct extint_chan_conf *const config)
{
   250cc:	b580      	push	{r7, lr}
   250ce:	b086      	sub	sp, #24
   250d0:	af00      	add	r7, sp, #0
   250d2:	0002      	movs	r2, r0
   250d4:	6039      	str	r1, [r7, #0]
   250d6:	1dfb      	adds	r3, r7, #7
   250d8:	701a      	strb	r2, [r3, #0]
	Assert(!(!system_gclk_gen_is_enabled(EXTINT_CLOCK_SOURCE) &&
		_extint_is_gclk_required(config->filter_input_signal,
			config->detection_criteria)));

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);
   250da:	2308      	movs	r3, #8
   250dc:	18fb      	adds	r3, r7, r3
   250de:	0018      	movs	r0, r3
   250e0:	4b36      	ldr	r3, [pc, #216]	; (251bc <extint_chan_set_config+0xf0>)
   250e2:	4798      	blx	r3

	pinmux_config.mux_position = config->gpio_pin_mux;
   250e4:	683b      	ldr	r3, [r7, #0]
   250e6:	685b      	ldr	r3, [r3, #4]
   250e8:	b2da      	uxtb	r2, r3
   250ea:	2308      	movs	r3, #8
   250ec:	18fb      	adds	r3, r7, r3
   250ee:	701a      	strb	r2, [r3, #0]
	pinmux_config.direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
   250f0:	2308      	movs	r3, #8
   250f2:	18fb      	adds	r3, r7, r3
   250f4:	2200      	movs	r2, #0
   250f6:	705a      	strb	r2, [r3, #1]
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->gpio_pin_pull;
   250f8:	683b      	ldr	r3, [r7, #0]
   250fa:	7a1a      	ldrb	r2, [r3, #8]
   250fc:	2308      	movs	r3, #8
   250fe:	18fb      	adds	r3, r7, r3
   25100:	709a      	strb	r2, [r3, #2]
	system_pinmux_pin_set_config(config->gpio_pin, &pinmux_config);
   25102:	683b      	ldr	r3, [r7, #0]
   25104:	681b      	ldr	r3, [r3, #0]
   25106:	b2db      	uxtb	r3, r3
   25108:	2208      	movs	r2, #8
   2510a:	18ba      	adds	r2, r7, r2
   2510c:	0011      	movs	r1, r2
   2510e:	0018      	movs	r0, r3
   25110:	4b2b      	ldr	r3, [pc, #172]	; (251c0 <extint_chan_set_config+0xf4>)
   25112:	4798      	blx	r3

	/* Get a pointer to the module hardware instance */
	Eic *const EIC_module = _extint_get_eic_from_channel(channel);
   25114:	1dfb      	adds	r3, r7, #7
   25116:	781b      	ldrb	r3, [r3, #0]
   25118:	0018      	movs	r0, r3
   2511a:	4b2a      	ldr	r3, [pc, #168]	; (251c4 <extint_chan_set_config+0xf8>)
   2511c:	4798      	blx	r3
   2511e:	0003      	movs	r3, r0
   25120:	613b      	str	r3, [r7, #16]

	uint32_t config_pos = (4 * (channel % 8));
   25122:	1dfb      	adds	r3, r7, #7
   25124:	781b      	ldrb	r3, [r3, #0]
   25126:	2207      	movs	r2, #7
   25128:	4013      	ands	r3, r2
   2512a:	009b      	lsls	r3, r3, #2
   2512c:	60fb      	str	r3, [r7, #12]
	uint32_t new_config;

	/* Determine the channel's new edge detection configuration */
	new_config = (config->detection_criteria << EIC_CONFIG_SENSE0_Pos);
   2512e:	683b      	ldr	r3, [r7, #0]
   25130:	7adb      	ldrb	r3, [r3, #11]
   25132:	617b      	str	r3, [r7, #20]

	/* Enable the hardware signal filter if requested in the config */
	if (config->filter_input_signal) {
   25134:	683b      	ldr	r3, [r7, #0]
   25136:	7a9b      	ldrb	r3, [r3, #10]
   25138:	2b00      	cmp	r3, #0
   2513a:	d003      	beq.n	25144 <extint_chan_set_config+0x78>
		new_config |= EIC_CONFIG_FILTEN0;
   2513c:	697b      	ldr	r3, [r7, #20]
   2513e:	2208      	movs	r2, #8
   25140:	4313      	orrs	r3, r2
   25142:	617b      	str	r3, [r7, #20]
	}

	/* Clear the existing and set the new channel configuration */
	EIC_module->CONFIG[channel / 8].reg
   25144:	1dfb      	adds	r3, r7, #7
   25146:	781b      	ldrb	r3, [r3, #0]
   25148:	08db      	lsrs	r3, r3, #3
   2514a:	b2db      	uxtb	r3, r3
   2514c:	0018      	movs	r0, r3
		= (EIC_module->CONFIG[channel / 8].reg &
   2514e:	1dfb      	adds	r3, r7, #7
   25150:	781b      	ldrb	r3, [r3, #0]
   25152:	08db      	lsrs	r3, r3, #3
   25154:	b2db      	uxtb	r3, r3
   25156:	001a      	movs	r2, r3
   25158:	693b      	ldr	r3, [r7, #16]
   2515a:	3206      	adds	r2, #6
   2515c:	0092      	lsls	r2, r2, #2
   2515e:	58d3      	ldr	r3, [r2, r3]
			~((EIC_CONFIG_SENSE0_Msk | EIC_CONFIG_FILTEN0) << config_pos)) |
   25160:	210f      	movs	r1, #15
   25162:	68fa      	ldr	r2, [r7, #12]
   25164:	4091      	lsls	r1, r2
   25166:	000a      	movs	r2, r1
   25168:	43d2      	mvns	r2, r2
		= (EIC_module->CONFIG[channel / 8].reg &
   2516a:	401a      	ands	r2, r3
			(new_config << config_pos);
   2516c:	6979      	ldr	r1, [r7, #20]
   2516e:	68fb      	ldr	r3, [r7, #12]
   25170:	4099      	lsls	r1, r3
   25172:	000b      	movs	r3, r1
			~((EIC_CONFIG_SENSE0_Msk | EIC_CONFIG_FILTEN0) << config_pos)) |
   25174:	431a      	orrs	r2, r3
   25176:	0011      	movs	r1, r2
		= (EIC_module->CONFIG[channel / 8].reg &
   25178:	693b      	ldr	r3, [r7, #16]
   2517a:	1d82      	adds	r2, r0, #6
   2517c:	0092      	lsls	r2, r2, #2
   2517e:	50d1      	str	r1, [r2, r3]

	/* Set the channel's new wake up mode setting */
	if (config->wake_if_sleeping) {
   25180:	683b      	ldr	r3, [r7, #0]
   25182:	7a5b      	ldrb	r3, [r3, #9]
   25184:	2b00      	cmp	r3, #0
   25186:	d00a      	beq.n	2519e <extint_chan_set_config+0xd2>
		EIC_module->WAKEUP.reg |=  (1UL << channel);
   25188:	693b      	ldr	r3, [r7, #16]
   2518a:	695a      	ldr	r2, [r3, #20]
   2518c:	1dfb      	adds	r3, r7, #7
   2518e:	781b      	ldrb	r3, [r3, #0]
   25190:	2101      	movs	r1, #1
   25192:	4099      	lsls	r1, r3
   25194:	000b      	movs	r3, r1
   25196:	431a      	orrs	r2, r3
   25198:	693b      	ldr	r3, [r7, #16]
   2519a:	615a      	str	r2, [r3, #20]
	} else {
		EIC_module->WAKEUP.reg &= ~(1UL << channel);
	}
}
   2519c:	e00a      	b.n	251b4 <extint_chan_set_config+0xe8>
		EIC_module->WAKEUP.reg &= ~(1UL << channel);
   2519e:	693b      	ldr	r3, [r7, #16]
   251a0:	695b      	ldr	r3, [r3, #20]
   251a2:	1dfa      	adds	r2, r7, #7
   251a4:	7812      	ldrb	r2, [r2, #0]
   251a6:	2101      	movs	r1, #1
   251a8:	4091      	lsls	r1, r2
   251aa:	000a      	movs	r2, r1
   251ac:	43d2      	mvns	r2, r2
   251ae:	401a      	ands	r2, r3
   251b0:	693b      	ldr	r3, [r7, #16]
   251b2:	615a      	str	r2, [r3, #20]
}
   251b4:	46c0      	nop			; (mov r8, r8)
   251b6:	46bd      	mov	sp, r7
   251b8:	b006      	add	sp, #24
   251ba:	bd80      	pop	{r7, pc}
   251bc:	00024e6d 	.word	0x00024e6d
   251c0:	000289e1 	.word	0x000289e1
   251c4:	00024ec1 	.word	0x00024ec1

000251c8 <system_pinmux_get_config_defaults>:
{
   251c8:	b580      	push	{r7, lr}
   251ca:	b082      	sub	sp, #8
   251cc:	af00      	add	r7, sp, #0
   251ce:	6078      	str	r0, [r7, #4]
	config->mux_position = SYSTEM_PINMUX_GPIO;
   251d0:	687b      	ldr	r3, [r7, #4]
   251d2:	2280      	movs	r2, #128	; 0x80
   251d4:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
   251d6:	687b      	ldr	r3, [r7, #4]
   251d8:	2200      	movs	r2, #0
   251da:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
   251dc:	687b      	ldr	r3, [r7, #4]
   251de:	2201      	movs	r2, #1
   251e0:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
   251e2:	687b      	ldr	r3, [r7, #4]
   251e4:	2200      	movs	r2, #0
   251e6:	70da      	strb	r2, [r3, #3]
}
   251e8:	46c0      	nop			; (mov r8, r8)
   251ea:	46bd      	mov	sp, r7
   251ec:	b002      	add	sp, #8
   251ee:	bd80      	pop	{r7, pc}

000251f0 <port_pin_set_config>:
 *  \param[in] config    Configuration settings for the pin
 */
void port_pin_set_config(
		const uint8_t gpio_pin,
		const struct port_config *const config)
{
   251f0:	b580      	push	{r7, lr}
   251f2:	b084      	sub	sp, #16
   251f4:	af00      	add	r7, sp, #0
   251f6:	0002      	movs	r2, r0
   251f8:	6039      	str	r1, [r7, #0]
   251fa:	1dfb      	adds	r3, r7, #7
   251fc:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(config);

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);
   251fe:	230c      	movs	r3, #12
   25200:	18fb      	adds	r3, r7, r3
   25202:	0018      	movs	r0, r3
   25204:	4b10      	ldr	r3, [pc, #64]	; (25248 <port_pin_set_config+0x58>)
   25206:	4798      	blx	r3

	pinmux_config.mux_position = SYSTEM_PINMUX_GPIO;
   25208:	230c      	movs	r3, #12
   2520a:	18fb      	adds	r3, r7, r3
   2520c:	2280      	movs	r2, #128	; 0x80
   2520e:	701a      	strb	r2, [r3, #0]
	pinmux_config.direction    = (enum system_pinmux_pin_dir)config->direction;
   25210:	683b      	ldr	r3, [r7, #0]
   25212:	781a      	ldrb	r2, [r3, #0]
   25214:	230c      	movs	r3, #12
   25216:	18fb      	adds	r3, r7, r3
   25218:	705a      	strb	r2, [r3, #1]
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->input_pull;
   2521a:	683b      	ldr	r3, [r7, #0]
   2521c:	785a      	ldrb	r2, [r3, #1]
   2521e:	230c      	movs	r3, #12
   25220:	18fb      	adds	r3, r7, r3
   25222:	709a      	strb	r2, [r3, #2]
	pinmux_config.powersave    = config->powersave;
   25224:	683b      	ldr	r3, [r7, #0]
   25226:	789a      	ldrb	r2, [r3, #2]
   25228:	230c      	movs	r3, #12
   2522a:	18fb      	adds	r3, r7, r3
   2522c:	70da      	strb	r2, [r3, #3]

	system_pinmux_pin_set_config(gpio_pin, &pinmux_config);
   2522e:	230c      	movs	r3, #12
   25230:	18fa      	adds	r2, r7, r3
   25232:	1dfb      	adds	r3, r7, #7
   25234:	781b      	ldrb	r3, [r3, #0]
   25236:	0011      	movs	r1, r2
   25238:	0018      	movs	r0, r3
   2523a:	4b04      	ldr	r3, [pc, #16]	; (2524c <port_pin_set_config+0x5c>)
   2523c:	4798      	blx	r3
}
   2523e:	46c0      	nop			; (mov r8, r8)
   25240:	46bd      	mov	sp, r7
   25242:	b004      	add	sp, #16
   25244:	bd80      	pop	{r7, pc}
   25246:	46c0      	nop			; (mov r8, r8)
   25248:	000251c9 	.word	0x000251c9
   2524c:	000289e1 	.word	0x000289e1

00025250 <system_gclk_chan_get_config_defaults>:
{
   25250:	b580      	push	{r7, lr}
   25252:	b082      	sub	sp, #8
   25254:	af00      	add	r7, sp, #0
   25256:	6078      	str	r0, [r7, #4]
	config->source_generator = GCLK_GENERATOR_0;
   25258:	687b      	ldr	r3, [r7, #4]
   2525a:	2200      	movs	r2, #0
   2525c:	701a      	strb	r2, [r3, #0]
}
   2525e:	46c0      	nop			; (mov r8, r8)
   25260:	46bd      	mov	sp, r7
   25262:	b002      	add	sp, #8
   25264:	bd80      	pop	{r7, pc}
	...

00025268 <system_apb_clock_set_mask>:
{
   25268:	b580      	push	{r7, lr}
   2526a:	b082      	sub	sp, #8
   2526c:	af00      	add	r7, sp, #0
   2526e:	0002      	movs	r2, r0
   25270:	6039      	str	r1, [r7, #0]
   25272:	1dfb      	adds	r3, r7, #7
   25274:	701a      	strb	r2, [r3, #0]
	switch (bus) {
   25276:	1dfb      	adds	r3, r7, #7
   25278:	781b      	ldrb	r3, [r3, #0]
   2527a:	2b01      	cmp	r3, #1
   2527c:	d00a      	beq.n	25294 <system_apb_clock_set_mask+0x2c>
   2527e:	2b02      	cmp	r3, #2
   25280:	d00f      	beq.n	252a2 <system_apb_clock_set_mask+0x3a>
   25282:	2b00      	cmp	r3, #0
   25284:	d114      	bne.n	252b0 <system_apb_clock_set_mask+0x48>
			PM->APBAMASK.reg |= mask;
   25286:	4b0e      	ldr	r3, [pc, #56]	; (252c0 <system_apb_clock_set_mask+0x58>)
   25288:	4a0d      	ldr	r2, [pc, #52]	; (252c0 <system_apb_clock_set_mask+0x58>)
   2528a:	6991      	ldr	r1, [r2, #24]
   2528c:	683a      	ldr	r2, [r7, #0]
   2528e:	430a      	orrs	r2, r1
   25290:	619a      	str	r2, [r3, #24]
			break;
   25292:	e00f      	b.n	252b4 <system_apb_clock_set_mask+0x4c>
			PM->APBBMASK.reg |= mask;
   25294:	4b0a      	ldr	r3, [pc, #40]	; (252c0 <system_apb_clock_set_mask+0x58>)
   25296:	4a0a      	ldr	r2, [pc, #40]	; (252c0 <system_apb_clock_set_mask+0x58>)
   25298:	69d1      	ldr	r1, [r2, #28]
   2529a:	683a      	ldr	r2, [r7, #0]
   2529c:	430a      	orrs	r2, r1
   2529e:	61da      	str	r2, [r3, #28]
			break;
   252a0:	e008      	b.n	252b4 <system_apb_clock_set_mask+0x4c>
			PM->APBCMASK.reg |= mask;
   252a2:	4b07      	ldr	r3, [pc, #28]	; (252c0 <system_apb_clock_set_mask+0x58>)
   252a4:	4a06      	ldr	r2, [pc, #24]	; (252c0 <system_apb_clock_set_mask+0x58>)
   252a6:	6a11      	ldr	r1, [r2, #32]
   252a8:	683a      	ldr	r2, [r7, #0]
   252aa:	430a      	orrs	r2, r1
   252ac:	621a      	str	r2, [r3, #32]
			break;
   252ae:	e001      	b.n	252b4 <system_apb_clock_set_mask+0x4c>
			return STATUS_ERR_INVALID_ARG;
   252b0:	2317      	movs	r3, #23
   252b2:	e000      	b.n	252b6 <system_apb_clock_set_mask+0x4e>
	return STATUS_OK;
   252b4:	2300      	movs	r3, #0
}
   252b6:	0018      	movs	r0, r3
   252b8:	46bd      	mov	sp, r7
   252ba:	b002      	add	sp, #8
   252bc:	bd80      	pop	{r7, pc}
   252be:	46c0      	nop			; (mov r8, r8)
   252c0:	40000400 	.word	0x40000400

000252c4 <system_interrupt_enable>:
{
   252c4:	b580      	push	{r7, lr}
   252c6:	b082      	sub	sp, #8
   252c8:	af00      	add	r7, sp, #0
   252ca:	0002      	movs	r2, r0
   252cc:	1dfb      	adds	r3, r7, #7
   252ce:	701a      	strb	r2, [r3, #0]
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
   252d0:	4b06      	ldr	r3, [pc, #24]	; (252ec <system_interrupt_enable+0x28>)
   252d2:	1dfa      	adds	r2, r7, #7
   252d4:	7812      	ldrb	r2, [r2, #0]
   252d6:	0011      	movs	r1, r2
   252d8:	221f      	movs	r2, #31
   252da:	400a      	ands	r2, r1
   252dc:	2101      	movs	r1, #1
   252de:	4091      	lsls	r1, r2
   252e0:	000a      	movs	r2, r1
   252e2:	601a      	str	r2, [r3, #0]
}
   252e4:	46c0      	nop			; (mov r8, r8)
   252e6:	46bd      	mov	sp, r7
   252e8:	b002      	add	sp, #8
   252ea:	bd80      	pop	{r7, pc}
   252ec:	e000e100 	.word	0xe000e100

000252f0 <system_interrupt_disable>:
{
   252f0:	b580      	push	{r7, lr}
   252f2:	b082      	sub	sp, #8
   252f4:	af00      	add	r7, sp, #0
   252f6:	0002      	movs	r2, r0
   252f8:	1dfb      	adds	r3, r7, #7
   252fa:	701a      	strb	r2, [r3, #0]
	NVIC->ICER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
   252fc:	4a07      	ldr	r2, [pc, #28]	; (2531c <system_interrupt_disable+0x2c>)
   252fe:	1dfb      	adds	r3, r7, #7
   25300:	781b      	ldrb	r3, [r3, #0]
   25302:	0019      	movs	r1, r3
   25304:	231f      	movs	r3, #31
   25306:	400b      	ands	r3, r1
   25308:	2101      	movs	r1, #1
   2530a:	4099      	lsls	r1, r3
   2530c:	000b      	movs	r3, r1
   2530e:	0019      	movs	r1, r3
   25310:	2380      	movs	r3, #128	; 0x80
   25312:	50d1      	str	r1, [r2, r3]
}
   25314:	46c0      	nop			; (mov r8, r8)
   25316:	46bd      	mov	sp, r7
   25318:	b002      	add	sp, #8
   2531a:	bd80      	pop	{r7, pc}
   2531c:	e000e100 	.word	0xe000e100

00025320 <rtc_calendar_is_syncing>:
 *
 * \retval false If the module has completed synchronization
 * \retval true If the module synchronization is ongoing
 */
static inline bool rtc_calendar_is_syncing(struct rtc_module *const module)
{
   25320:	b580      	push	{r7, lr}
   25322:	b084      	sub	sp, #16
   25324:	af00      	add	r7, sp, #0
   25326:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
   25328:	687b      	ldr	r3, [r7, #4]
   2532a:	681b      	ldr	r3, [r3, #0]
   2532c:	60fb      	str	r3, [r7, #12]

        if (rtc_module->MODE2.STATUS.reg & RTC_STATUS_SYNCBUSY) {
   2532e:	68fb      	ldr	r3, [r7, #12]
   25330:	7a9b      	ldrb	r3, [r3, #10]
   25332:	b2db      	uxtb	r3, r3
   25334:	b25b      	sxtb	r3, r3
   25336:	2b00      	cmp	r3, #0
   25338:	da01      	bge.n	2533e <rtc_calendar_is_syncing+0x1e>
                return true;
   2533a:	2301      	movs	r3, #1
   2533c:	e000      	b.n	25340 <rtc_calendar_is_syncing+0x20>
        }

        return false;
   2533e:	2300      	movs	r3, #0
}
   25340:	0018      	movs	r0, r3
   25342:	46bd      	mov	sp, r7
   25344:	b004      	add	sp, #16
   25346:	bd80      	pop	{r7, pc}

00025348 <rtc_calendar_enable>:
 * module configuration parameters cannot be altered while the module is enabled.
 *
 * \param[in,out] module  Pointer to the software instance struct
 */
void rtc_calendar_enable(struct rtc_module *const module)
{
   25348:	b580      	push	{r7, lr}
   2534a:	b084      	sub	sp, #16
   2534c:	af00      	add	r7, sp, #0
   2534e:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
   25350:	687b      	ldr	r3, [r7, #4]
   25352:	681b      	ldr	r3, [r3, #0]
   25354:	60fb      	str	r3, [r7, #12]

#if RTC_CALENDAR_ASYNC == true
	system_interrupt_enable(SYSTEM_INTERRUPT_MODULE_RTC);
   25356:	2003      	movs	r0, #3
   25358:	4b0a      	ldr	r3, [pc, #40]	; (25384 <rtc_calendar_enable+0x3c>)
   2535a:	4798      	blx	r3
#endif

	while (rtc_calendar_is_syncing(module)) {
   2535c:	46c0      	nop			; (mov r8, r8)
   2535e:	687b      	ldr	r3, [r7, #4]
   25360:	0018      	movs	r0, r3
   25362:	4b09      	ldr	r3, [pc, #36]	; (25388 <rtc_calendar_enable+0x40>)
   25364:	4798      	blx	r3
   25366:	1e03      	subs	r3, r0, #0
   25368:	d1f9      	bne.n	2535e <rtc_calendar_enable+0x16>
		/* Wait for synchronization */
	}

	/* Enable RTC module. */
	rtc_module->MODE2.CTRL.reg |= RTC_MODE2_CTRL_ENABLE;
   2536a:	68fb      	ldr	r3, [r7, #12]
   2536c:	881b      	ldrh	r3, [r3, #0]
   2536e:	b29b      	uxth	r3, r3
   25370:	2202      	movs	r2, #2
   25372:	4313      	orrs	r3, r2
   25374:	b29a      	uxth	r2, r3
   25376:	68fb      	ldr	r3, [r7, #12]
   25378:	801a      	strh	r2, [r3, #0]
}
   2537a:	46c0      	nop			; (mov r8, r8)
   2537c:	46bd      	mov	sp, r7
   2537e:	b004      	add	sp, #16
   25380:	bd80      	pop	{r7, pc}
   25382:	46c0      	nop			; (mov r8, r8)
   25384:	000252c5 	.word	0x000252c5
   25388:	00025321 	.word	0x00025321

0002538c <rtc_calendar_disable>:
 * Disables the RTC module.
 *
 * \param[in,out] module  Pointer to the software instance struct
 */
void rtc_calendar_disable(struct rtc_module *const module)
{
   2538c:	b580      	push	{r7, lr}
   2538e:	b084      	sub	sp, #16
   25390:	af00      	add	r7, sp, #0
   25392:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
   25394:	687b      	ldr	r3, [r7, #4]
   25396:	681b      	ldr	r3, [r3, #0]
   25398:	60fb      	str	r3, [r7, #12]

#if RTC_CALENDAR_ASYNC == true
	system_interrupt_disable(SYSTEM_INTERRUPT_MODULE_RTC);
   2539a:	2003      	movs	r0, #3
   2539c:	4b0d      	ldr	r3, [pc, #52]	; (253d4 <rtc_calendar_disable+0x48>)
   2539e:	4798      	blx	r3
#endif

	while (rtc_calendar_is_syncing(module)) {
   253a0:	46c0      	nop			; (mov r8, r8)
   253a2:	687b      	ldr	r3, [r7, #4]
   253a4:	0018      	movs	r0, r3
   253a6:	4b0c      	ldr	r3, [pc, #48]	; (253d8 <rtc_calendar_disable+0x4c>)
   253a8:	4798      	blx	r3
   253aa:	1e03      	subs	r3, r0, #0
   253ac:	d1f9      	bne.n	253a2 <rtc_calendar_disable+0x16>
		/* Wait for synchronization */
	}

	/* Disbale interrupt */
	rtc_module->MODE2.INTENCLR.reg = RTC_MODE2_INTENCLR_MASK;
   253ae:	68fb      	ldr	r3, [r7, #12]
   253b0:	22c1      	movs	r2, #193	; 0xc1
   253b2:	719a      	strb	r2, [r3, #6]
	/* Clear interrupt flag */
	rtc_module->MODE2.INTFLAG.reg = RTC_MODE2_INTFLAG_MASK;
   253b4:	68fb      	ldr	r3, [r7, #12]
   253b6:	22c1      	movs	r2, #193	; 0xc1
   253b8:	721a      	strb	r2, [r3, #8]

	/* Disable RTC module. */
	rtc_module->MODE2.CTRL.reg &= ~RTC_MODE2_CTRL_ENABLE;
   253ba:	68fb      	ldr	r3, [r7, #12]
   253bc:	881b      	ldrh	r3, [r3, #0]
   253be:	b29b      	uxth	r3, r3
   253c0:	2202      	movs	r2, #2
   253c2:	4393      	bics	r3, r2
   253c4:	b29a      	uxth	r2, r3
   253c6:	68fb      	ldr	r3, [r7, #12]
   253c8:	801a      	strh	r2, [r3, #0]
}
   253ca:	46c0      	nop			; (mov r8, r8)
   253cc:	46bd      	mov	sp, r7
   253ce:	b004      	add	sp, #16
   253d0:	bd80      	pop	{r7, pc}
   253d2:	46c0      	nop			; (mov r8, r8)
   253d4:	000252f1 	.word	0x000252f1
   253d8:	00025321 	.word	0x00025321

000253dc <rtc_calendar_reset>:
 * Resets the RTC module to hardware defaults.
 *
 * \param[in,out] module  Pointer to the software instance struct
 */
void rtc_calendar_reset(struct rtc_module *const module)
{
   253dc:	b580      	push	{r7, lr}
   253de:	b084      	sub	sp, #16
   253e0:	af00      	add	r7, sp, #0
   253e2:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
   253e4:	687b      	ldr	r3, [r7, #4]
   253e6:	681b      	ldr	r3, [r3, #0]
   253e8:	60fb      	str	r3, [r7, #12]

	/* Disable module before reset. */
	rtc_calendar_disable(module);
   253ea:	687b      	ldr	r3, [r7, #4]
   253ec:	0018      	movs	r0, r3
   253ee:	4b0d      	ldr	r3, [pc, #52]	; (25424 <rtc_calendar_reset+0x48>)
   253f0:	4798      	blx	r3

#if RTC_CALENDAR_ASYNC == true
	module->registered_callback = 0;
   253f2:	687b      	ldr	r3, [r7, #4]
   253f4:	2200      	movs	r2, #0
   253f6:	821a      	strh	r2, [r3, #16]
	module->enabled_callback    = 0;
   253f8:	687b      	ldr	r3, [r7, #4]
   253fa:	2200      	movs	r2, #0
   253fc:	825a      	strh	r2, [r3, #18]
#endif

	while (rtc_calendar_is_syncing(module)) {
   253fe:	46c0      	nop			; (mov r8, r8)
   25400:	687b      	ldr	r3, [r7, #4]
   25402:	0018      	movs	r0, r3
   25404:	4b08      	ldr	r3, [pc, #32]	; (25428 <rtc_calendar_reset+0x4c>)
   25406:	4798      	blx	r3
   25408:	1e03      	subs	r3, r0, #0
   2540a:	d1f9      	bne.n	25400 <rtc_calendar_reset+0x24>
		/* Wait for synchronization */
	}

	/* Initiate software reset. */
	rtc_module->MODE2.CTRL.reg |= RTC_MODE2_CTRL_SWRST;
   2540c:	68fb      	ldr	r3, [r7, #12]
   2540e:	881b      	ldrh	r3, [r3, #0]
   25410:	b29b      	uxth	r3, r3
   25412:	2201      	movs	r2, #1
   25414:	4313      	orrs	r3, r2
   25416:	b29a      	uxth	r2, r3
   25418:	68fb      	ldr	r3, [r7, #12]
   2541a:	801a      	strh	r2, [r3, #0]
}
   2541c:	46c0      	nop			; (mov r8, r8)
   2541e:	46bd      	mov	sp, r7
   25420:	b004      	add	sp, #16
   25422:	bd80      	pop	{r7, pc}
   25424:	0002538d 	.word	0x0002538d
   25428:	00025321 	.word	0x00025321

0002542c <rtc_calendar_time_to_register_value>:
 * \return 32-bit value.
 */
uint32_t rtc_calendar_time_to_register_value(
		struct rtc_module *const module,
		const struct rtc_calendar_time *const time)
{
   2542c:	b580      	push	{r7, lr}
   2542e:	b084      	sub	sp, #16
   25430:	af00      	add	r7, sp, #0
   25432:	6078      	str	r0, [r7, #4]
   25434:	6039      	str	r1, [r7, #0]
	/* Initialize return value. */
	uint32_t register_value;

	/* Set year value into register_value minus initial year. */
	register_value = (time->year - module->year_init_value) <<
   25436:	683b      	ldr	r3, [r7, #0]
   25438:	88db      	ldrh	r3, [r3, #6]
   2543a:	001a      	movs	r2, r3
   2543c:	687b      	ldr	r3, [r7, #4]
   2543e:	88db      	ldrh	r3, [r3, #6]
   25440:	1ad3      	subs	r3, r2, r3
   25442:	069b      	lsls	r3, r3, #26
   25444:	60fb      	str	r3, [r7, #12]
			RTC_MODE2_CLOCK_YEAR_Pos;

	/* Set month value into register_value. */
	register_value |= (time->month << RTC_MODE2_CLOCK_MONTH_Pos);
   25446:	683b      	ldr	r3, [r7, #0]
   25448:	795b      	ldrb	r3, [r3, #5]
   2544a:	059b      	lsls	r3, r3, #22
   2544c:	001a      	movs	r2, r3
   2544e:	68fb      	ldr	r3, [r7, #12]
   25450:	4313      	orrs	r3, r2
   25452:	60fb      	str	r3, [r7, #12]

	/* Set day value into register_value. */
	register_value |= (time->day << RTC_MODE2_CLOCK_DAY_Pos);
   25454:	683b      	ldr	r3, [r7, #0]
   25456:	791b      	ldrb	r3, [r3, #4]
   25458:	045b      	lsls	r3, r3, #17
   2545a:	001a      	movs	r2, r3
   2545c:	68fb      	ldr	r3, [r7, #12]
   2545e:	4313      	orrs	r3, r2
   25460:	60fb      	str	r3, [r7, #12]

	/* Set 24 hour value into register_value. */
	register_value |= (time->hour << RTC_MODE2_CLOCK_HOUR_Pos);
   25462:	683b      	ldr	r3, [r7, #0]
   25464:	789b      	ldrb	r3, [r3, #2]
   25466:	031b      	lsls	r3, r3, #12
   25468:	001a      	movs	r2, r3
   2546a:	68fb      	ldr	r3, [r7, #12]
   2546c:	4313      	orrs	r3, r2
   2546e:	60fb      	str	r3, [r7, #12]

	/* Check if 24 h clock and set pm flag. */
	if (!(module->clock_24h) && (time->pm)) {
   25470:	687b      	ldr	r3, [r7, #4]
   25472:	791b      	ldrb	r3, [r3, #4]
   25474:	2201      	movs	r2, #1
   25476:	4053      	eors	r3, r2
   25478:	b2db      	uxtb	r3, r3
   2547a:	2b00      	cmp	r3, #0
   2547c:	d008      	beq.n	25490 <rtc_calendar_time_to_register_value+0x64>
   2547e:	683b      	ldr	r3, [r7, #0]
   25480:	78db      	ldrb	r3, [r3, #3]
   25482:	2b00      	cmp	r3, #0
   25484:	d004      	beq.n	25490 <rtc_calendar_time_to_register_value+0x64>
		/* Set pm flag. */
		register_value |= RTC_MODE2_CLOCK_HOUR_PM;
   25486:	68fb      	ldr	r3, [r7, #12]
   25488:	2280      	movs	r2, #128	; 0x80
   2548a:	0252      	lsls	r2, r2, #9
   2548c:	4313      	orrs	r3, r2
   2548e:	60fb      	str	r3, [r7, #12]
	}

	/* Set minute value into register_value. */
	register_value |= (time->minute << RTC_MODE2_CLOCK_MINUTE_Pos);
   25490:	683b      	ldr	r3, [r7, #0]
   25492:	785b      	ldrb	r3, [r3, #1]
   25494:	019b      	lsls	r3, r3, #6
   25496:	001a      	movs	r2, r3
   25498:	68fb      	ldr	r3, [r7, #12]
   2549a:	4313      	orrs	r3, r2
   2549c:	60fb      	str	r3, [r7, #12]

	/* Set second value into register_value. */
	register_value |= (time->second << RTC_MODE2_CLOCK_SECOND_Pos);
   2549e:	683b      	ldr	r3, [r7, #0]
   254a0:	781b      	ldrb	r3, [r3, #0]
   254a2:	001a      	movs	r2, r3
   254a4:	68fb      	ldr	r3, [r7, #12]
   254a6:	4313      	orrs	r3, r2
   254a8:	60fb      	str	r3, [r7, #12]

	return register_value;
   254aa:	68fb      	ldr	r3, [r7, #12]
}
   254ac:	0018      	movs	r0, r3
   254ae:	46bd      	mov	sp, r7
   254b0:	b004      	add	sp, #16
   254b2:	bd80      	pop	{r7, pc}

000254b4 <rtc_calendar_register_value_to_time>:
 */
void rtc_calendar_register_value_to_time(
		struct rtc_module *const module,
		const uint32_t register_value,
		struct rtc_calendar_time *const time)
{
   254b4:	b580      	push	{r7, lr}
   254b6:	b084      	sub	sp, #16
   254b8:	af00      	add	r7, sp, #0
   254ba:	60f8      	str	r0, [r7, #12]
   254bc:	60b9      	str	r1, [r7, #8]
   254be:	607a      	str	r2, [r7, #4]
	/* Set year plus value of initial year. */
	time->year = ((register_value & RTC_MODE2_CLOCK_YEAR_Msk) >>
   254c0:	68bb      	ldr	r3, [r7, #8]
   254c2:	0e9b      	lsrs	r3, r3, #26
			RTC_MODE2_CLOCK_YEAR_Pos) + module->year_init_value;
   254c4:	b29a      	uxth	r2, r3
   254c6:	68fb      	ldr	r3, [r7, #12]
   254c8:	88db      	ldrh	r3, [r3, #6]
   254ca:	18d3      	adds	r3, r2, r3
   254cc:	b29a      	uxth	r2, r3
	time->year = ((register_value & RTC_MODE2_CLOCK_YEAR_Msk) >>
   254ce:	687b      	ldr	r3, [r7, #4]
   254d0:	80da      	strh	r2, [r3, #6]

	/* Set month value into time struct. */
	time->month = ((register_value & RTC_MODE2_CLOCK_MONTH_Msk) >>
   254d2:	68bb      	ldr	r3, [r7, #8]
   254d4:	0d9b      	lsrs	r3, r3, #22
   254d6:	b2db      	uxtb	r3, r3
   254d8:	220f      	movs	r2, #15
   254da:	4013      	ands	r3, r2
   254dc:	b2da      	uxtb	r2, r3
   254de:	687b      	ldr	r3, [r7, #4]
   254e0:	715a      	strb	r2, [r3, #5]
			RTC_MODE2_CLOCK_MONTH_Pos);

	/* Set day value into time struct. */
	time->day = ((register_value & RTC_MODE2_CLOCK_DAY_Msk) >>
   254e2:	68bb      	ldr	r3, [r7, #8]
   254e4:	0c5b      	lsrs	r3, r3, #17
   254e6:	b2db      	uxtb	r3, r3
   254e8:	221f      	movs	r2, #31
   254ea:	4013      	ands	r3, r2
   254ec:	b2da      	uxtb	r2, r3
   254ee:	687b      	ldr	r3, [r7, #4]
   254f0:	711a      	strb	r2, [r3, #4]
			RTC_MODE2_CLOCK_DAY_Pos);

	if (module->clock_24h) {
   254f2:	68fb      	ldr	r3, [r7, #12]
   254f4:	791b      	ldrb	r3, [r3, #4]
   254f6:	2b00      	cmp	r3, #0
   254f8:	d008      	beq.n	2550c <rtc_calendar_register_value_to_time+0x58>
		/* Set hour in 24h mode. */
		time->hour = ((register_value & RTC_MODE2_CLOCK_HOUR_Msk) >>
   254fa:	68bb      	ldr	r3, [r7, #8]
   254fc:	0b1b      	lsrs	r3, r3, #12
   254fe:	b2db      	uxtb	r3, r3
   25500:	221f      	movs	r2, #31
   25502:	4013      	ands	r3, r2
   25504:	b2da      	uxtb	r2, r3
   25506:	687b      	ldr	r3, [r7, #4]
   25508:	709a      	strb	r2, [r3, #2]
   2550a:	e010      	b.n	2552e <rtc_calendar_register_value_to_time+0x7a>
				RTC_MODE2_CLOCK_HOUR_Pos);
	} else {
		/* Set hour in 12h mode. */
		time->hour = ((register_value &
				(RTC_MODE2_CLOCK_HOUR_Msk & ~RTC_MODE2_CLOCK_HOUR_PM)) >>
   2550c:	68bb      	ldr	r3, [r7, #8]
   2550e:	0b1b      	lsrs	r3, r3, #12
   25510:	b2db      	uxtb	r3, r3
   25512:	220f      	movs	r2, #15
   25514:	4013      	ands	r3, r2
   25516:	b2da      	uxtb	r2, r3
		time->hour = ((register_value &
   25518:	687b      	ldr	r3, [r7, #4]
   2551a:	709a      	strb	r2, [r3, #2]
				RTC_MODE2_CLOCK_HOUR_Pos);

		/* Set pm flag */
		time->pm = ((register_value & RTC_MODE2_CLOCK_HOUR_PM) != 0);
   2551c:	68ba      	ldr	r2, [r7, #8]
   2551e:	2380      	movs	r3, #128	; 0x80
   25520:	025b      	lsls	r3, r3, #9
   25522:	4013      	ands	r3, r2
   25524:	1e5a      	subs	r2, r3, #1
   25526:	4193      	sbcs	r3, r2
   25528:	b2da      	uxtb	r2, r3
   2552a:	687b      	ldr	r3, [r7, #4]
   2552c:	70da      	strb	r2, [r3, #3]
	}

	/* Set minute value into time struct. */
	time->minute = ((register_value & RTC_MODE2_CLOCK_MINUTE_Msk) >>
   2552e:	68bb      	ldr	r3, [r7, #8]
   25530:	099b      	lsrs	r3, r3, #6
   25532:	b2db      	uxtb	r3, r3
   25534:	223f      	movs	r2, #63	; 0x3f
   25536:	4013      	ands	r3, r2
   25538:	b2da      	uxtb	r2, r3
   2553a:	687b      	ldr	r3, [r7, #4]
   2553c:	705a      	strb	r2, [r3, #1]
			RTC_MODE2_CLOCK_MINUTE_Pos);

	/* Set second value into time struct. */
	time->second = ((register_value & RTC_MODE2_CLOCK_SECOND_Msk) >>
   2553e:	68bb      	ldr	r3, [r7, #8]
   25540:	b2db      	uxtb	r3, r3
   25542:	223f      	movs	r2, #63	; 0x3f
   25544:	4013      	ands	r3, r2
   25546:	b2da      	uxtb	r2, r3
   25548:	687b      	ldr	r3, [r7, #4]
   2554a:	701a      	strb	r2, [r3, #0]
			RTC_MODE2_CLOCK_SECOND_Pos);
}
   2554c:	46c0      	nop			; (mov r8, r8)
   2554e:	46bd      	mov	sp, r7
   25550:	b004      	add	sp, #16
   25552:	bd80      	pop	{r7, pc}

00025554 <_rtc_calendar_set_config>:
 * \param[in] config  Pointer to the configuration structure.
 */
static void _rtc_calendar_set_config(
		struct rtc_module *const module,
		const struct rtc_calendar_config *const config)
{
   25554:	b580      	push	{r7, lr}
   25556:	b084      	sub	sp, #16
   25558:	af00      	add	r7, sp, #0
   2555a:	6078      	str	r0, [r7, #4]
   2555c:	6039      	str	r1, [r7, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
   2555e:	687b      	ldr	r3, [r7, #4]
   25560:	681b      	ldr	r3, [r3, #0]
   25562:	60bb      	str	r3, [r7, #8]

	/* Set up temporary register value. */
	uint16_t tmp_reg;

	/* Set to calendar mode and set the prescaler. */
	tmp_reg = RTC_MODE2_CTRL_MODE(2) | config->prescaler;
   25564:	683b      	ldr	r3, [r7, #0]
   25566:	881a      	ldrh	r2, [r3, #0]
   25568:	230e      	movs	r3, #14
   2556a:	18fb      	adds	r3, r7, r3
   2556c:	2108      	movs	r1, #8
   2556e:	430a      	orrs	r2, r1
   25570:	801a      	strh	r2, [r3, #0]

	/* Check clock mode. */
	if (!(config->clock_24h)) {
   25572:	683b      	ldr	r3, [r7, #0]
   25574:	791b      	ldrb	r3, [r3, #4]
   25576:	2201      	movs	r2, #1
   25578:	4053      	eors	r3, r2
   2557a:	b2db      	uxtb	r3, r3
   2557c:	2b00      	cmp	r3, #0
   2557e:	d007      	beq.n	25590 <_rtc_calendar_set_config+0x3c>
		/* Set clock mode 12h. */
		tmp_reg |= RTC_MODE2_CTRL_CLKREP;
   25580:	230e      	movs	r3, #14
   25582:	18fb      	adds	r3, r7, r3
   25584:	220e      	movs	r2, #14
   25586:	18ba      	adds	r2, r7, r2
   25588:	8812      	ldrh	r2, [r2, #0]
   2558a:	2140      	movs	r1, #64	; 0x40
   2558c:	430a      	orrs	r2, r1
   2558e:	801a      	strh	r2, [r3, #0]
	}

	/* Check for clear on compare match. */
	if (config->clear_on_match) {
   25590:	683b      	ldr	r3, [r7, #0]
   25592:	789b      	ldrb	r3, [r3, #2]
   25594:	2b00      	cmp	r3, #0
   25596:	d007      	beq.n	255a8 <_rtc_calendar_set_config+0x54>
		/* Set clear on compare match. */
		tmp_reg |= RTC_MODE2_CTRL_MATCHCLR;
   25598:	230e      	movs	r3, #14
   2559a:	18fb      	adds	r3, r7, r3
   2559c:	220e      	movs	r2, #14
   2559e:	18ba      	adds	r2, r7, r2
   255a0:	8812      	ldrh	r2, [r2, #0]
   255a2:	2180      	movs	r1, #128	; 0x80
   255a4:	430a      	orrs	r2, r1
   255a6:	801a      	strh	r2, [r3, #0]
	}

	/* Set temporary value to register. */
	rtc_module->MODE2.CTRL.reg = tmp_reg;
   255a8:	68bb      	ldr	r3, [r7, #8]
   255aa:	220e      	movs	r2, #14
   255ac:	18ba      	adds	r2, r7, r2
   255ae:	8812      	ldrh	r2, [r2, #0]
   255b0:	801a      	strh	r2, [r3, #0]

	/* Check to set continuously clock read update mode. */
	if (config->continuously_update) {
   255b2:	683b      	ldr	r3, [r7, #0]
   255b4:	78db      	ldrb	r3, [r3, #3]
   255b6:	2b00      	cmp	r3, #0
   255b8:	d008      	beq.n	255cc <_rtc_calendar_set_config+0x78>
		/* Set continuously mode. */
		rtc_module->MODE2.READREQ.reg |= RTC_READREQ_RCONT;
   255ba:	68bb      	ldr	r3, [r7, #8]
   255bc:	885b      	ldrh	r3, [r3, #2]
   255be:	b29b      	uxth	r3, r3
   255c0:	2280      	movs	r2, #128	; 0x80
   255c2:	01d2      	lsls	r2, r2, #7
   255c4:	4313      	orrs	r3, r2
   255c6:	b29a      	uxth	r2, r3
   255c8:	68bb      	ldr	r3, [r7, #8]
   255ca:	805a      	strh	r2, [r3, #2]
	}

	/* Set alarm time registers. */
	for (uint8_t i = 0; i < RTC_NUM_OF_ALARMS; i++) {
   255cc:	230d      	movs	r3, #13
   255ce:	18fb      	adds	r3, r7, r3
   255d0:	2200      	movs	r2, #0
   255d2:	701a      	strb	r2, [r3, #0]
   255d4:	e017      	b.n	25606 <_rtc_calendar_set_config+0xb2>
		rtc_calendar_set_alarm(module, &(config->alarm[i]), (enum rtc_calendar_alarm)i);
   255d6:	230d      	movs	r3, #13
   255d8:	18fb      	adds	r3, r7, r3
   255da:	781a      	ldrb	r2, [r3, #0]
   255dc:	0013      	movs	r3, r2
   255de:	009b      	lsls	r3, r3, #2
   255e0:	189b      	adds	r3, r3, r2
   255e2:	005b      	lsls	r3, r3, #1
   255e4:	3308      	adds	r3, #8
   255e6:	683a      	ldr	r2, [r7, #0]
   255e8:	18d1      	adds	r1, r2, r3
   255ea:	230d      	movs	r3, #13
   255ec:	18fb      	adds	r3, r7, r3
   255ee:	781a      	ldrb	r2, [r3, #0]
   255f0:	687b      	ldr	r3, [r7, #4]
   255f2:	0018      	movs	r0, r3
   255f4:	4b08      	ldr	r3, [pc, #32]	; (25618 <_rtc_calendar_set_config+0xc4>)
   255f6:	4798      	blx	r3
	for (uint8_t i = 0; i < RTC_NUM_OF_ALARMS; i++) {
   255f8:	230d      	movs	r3, #13
   255fa:	18fb      	adds	r3, r7, r3
   255fc:	781a      	ldrb	r2, [r3, #0]
   255fe:	230d      	movs	r3, #13
   25600:	18fb      	adds	r3, r7, r3
   25602:	3201      	adds	r2, #1
   25604:	701a      	strb	r2, [r3, #0]
   25606:	230d      	movs	r3, #13
   25608:	18fb      	adds	r3, r7, r3
   2560a:	781b      	ldrb	r3, [r3, #0]
   2560c:	2b00      	cmp	r3, #0
   2560e:	d0e2      	beq.n	255d6 <_rtc_calendar_set_config+0x82>
	}
}
   25610:	46c0      	nop			; (mov r8, r8)
   25612:	46bd      	mov	sp, r7
   25614:	b004      	add	sp, #16
   25616:	bd80      	pop	{r7, pc}
   25618:	0002573d 	.word	0x0002573d

0002561c <rtc_calendar_init>:
 */
void rtc_calendar_init(
		struct rtc_module *const module,
		Rtc *const hw,
		const struct rtc_calendar_config *const config)
{
   2561c:	b580      	push	{r7, lr}
   2561e:	b086      	sub	sp, #24
   25620:	af00      	add	r7, sp, #0
   25622:	60f8      	str	r0, [r7, #12]
   25624:	60b9      	str	r1, [r7, #8]
   25626:	607a      	str	r2, [r7, #4]
	Assert(module);
	Assert(hw);
	Assert(config);

	/* Initialize device instance */
	module->hw = hw;
   25628:	68fb      	ldr	r3, [r7, #12]
   2562a:	68ba      	ldr	r2, [r7, #8]
   2562c:	601a      	str	r2, [r3, #0]

	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, PM_APBAMASK_RTC);
   2562e:	2120      	movs	r1, #32
   25630:	2000      	movs	r0, #0
   25632:	4b18      	ldr	r3, [pc, #96]	; (25694 <rtc_calendar_init+0x78>)
   25634:	4798      	blx	r3

	/* Set up GCLK */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
   25636:	2314      	movs	r3, #20
   25638:	18fb      	adds	r3, r7, r3
   2563a:	0018      	movs	r0, r3
   2563c:	4b16      	ldr	r3, [pc, #88]	; (25698 <rtc_calendar_init+0x7c>)
   2563e:	4798      	blx	r3
	gclk_chan_conf.source_generator = GCLK_GENERATOR_2;
   25640:	2314      	movs	r3, #20
   25642:	18fb      	adds	r3, r7, r3
   25644:	2202      	movs	r2, #2
   25646:	701a      	strb	r2, [r3, #0]
	system_gclk_chan_set_config(RTC_GCLK_ID, &gclk_chan_conf);
   25648:	2314      	movs	r3, #20
   2564a:	18fb      	adds	r3, r7, r3
   2564c:	0019      	movs	r1, r3
   2564e:	2004      	movs	r0, #4
   25650:	4b12      	ldr	r3, [pc, #72]	; (2569c <rtc_calendar_init+0x80>)
   25652:	4798      	blx	r3
	system_gclk_chan_enable(RTC_GCLK_ID);
   25654:	2004      	movs	r0, #4
   25656:	4b12      	ldr	r3, [pc, #72]	; (256a0 <rtc_calendar_init+0x84>)
   25658:	4798      	blx	r3

	/* Reset module to hardware defaults. */
	rtc_calendar_reset(module);
   2565a:	68fb      	ldr	r3, [r7, #12]
   2565c:	0018      	movs	r0, r3
   2565e:	4b11      	ldr	r3, [pc, #68]	; (256a4 <rtc_calendar_init+0x88>)
   25660:	4798      	blx	r3

	/* Save conf_struct internally for continued use. */
	module->clock_24h           = config->clock_24h;
   25662:	687b      	ldr	r3, [r7, #4]
   25664:	791a      	ldrb	r2, [r3, #4]
   25666:	68fb      	ldr	r3, [r7, #12]
   25668:	711a      	strb	r2, [r3, #4]
	module->continuously_update = config->continuously_update;
   2566a:	687b      	ldr	r3, [r7, #4]
   2566c:	78da      	ldrb	r2, [r3, #3]
   2566e:	68fb      	ldr	r3, [r7, #12]
   25670:	715a      	strb	r2, [r3, #5]
	module->year_init_value     = config->year_init_value;
   25672:	687b      	ldr	r3, [r7, #4]
   25674:	88da      	ldrh	r2, [r3, #6]
   25676:	68fb      	ldr	r3, [r7, #12]
   25678:	80da      	strh	r2, [r3, #6]

#if (RTC_INST_NUM == 1)
	_rtc_instance[0] = module;
   2567a:	4b0b      	ldr	r3, [pc, #44]	; (256a8 <rtc_calendar_init+0x8c>)
   2567c:	68fa      	ldr	r2, [r7, #12]
   2567e:	601a      	str	r2, [r3, #0]
	/* Register this instance for callbacks*/
	_rtc_instance[_rtc_get_inst_index(hw)] = module;
#endif

	/* Set config. */
	_rtc_calendar_set_config(module, config);
   25680:	687a      	ldr	r2, [r7, #4]
   25682:	68fb      	ldr	r3, [r7, #12]
   25684:	0011      	movs	r1, r2
   25686:	0018      	movs	r0, r3
   25688:	4b08      	ldr	r3, [pc, #32]	; (256ac <rtc_calendar_init+0x90>)
   2568a:	4798      	blx	r3
}
   2568c:	46c0      	nop			; (mov r8, r8)
   2568e:	46bd      	mov	sp, r7
   25690:	b006      	add	sp, #24
   25692:	bd80      	pop	{r7, pc}
   25694:	00025269 	.word	0x00025269
   25698:	00025251 	.word	0x00025251
   2569c:	00028681 	.word	0x00028681
   256a0:	000286c5 	.word	0x000286c5
   256a4:	000253dd 	.word	0x000253dd
   256a8:	200056a4 	.word	0x200056a4
   256ac:	00025555 	.word	0x00025555

000256b0 <rtc_calendar_get_time>:
 * \param[out] time  Pointer to value that will be filled with current time
 */
void rtc_calendar_get_time(
		struct rtc_module *const module,
		struct rtc_calendar_time *const time)
{
   256b0:	b580      	push	{r7, lr}
   256b2:	b084      	sub	sp, #16
   256b4:	af00      	add	r7, sp, #0
   256b6:	6078      	str	r0, [r7, #4]
   256b8:	6039      	str	r1, [r7, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
   256ba:	687b      	ldr	r3, [r7, #4]
   256bc:	681b      	ldr	r3, [r3, #0]
   256be:	60fb      	str	r3, [r7, #12]

	/* Change of read method based on value of continuously_update value in
	 * the configuration structure. */
	if (!(module->continuously_update)) {
   256c0:	687b      	ldr	r3, [r7, #4]
   256c2:	795b      	ldrb	r3, [r3, #5]
   256c4:	2201      	movs	r2, #1
   256c6:	4053      	eors	r3, r2
   256c8:	b2db      	uxtb	r3, r3
   256ca:	2b00      	cmp	r3, #0
   256cc:	d00a      	beq.n	256e4 <rtc_calendar_get_time+0x34>
		/* Request read on CLOCK register. */
		rtc_module->MODE2.READREQ.reg = RTC_READREQ_RREQ;
   256ce:	68fb      	ldr	r3, [r7, #12]
   256d0:	4a16      	ldr	r2, [pc, #88]	; (2572c <rtc_calendar_get_time+0x7c>)
   256d2:	805a      	strh	r2, [r3, #2]

		while (rtc_calendar_is_syncing(module)) {
   256d4:	46c0      	nop			; (mov r8, r8)
   256d6:	687b      	ldr	r3, [r7, #4]
   256d8:	0018      	movs	r0, r3
   256da:	4b15      	ldr	r3, [pc, #84]	; (25730 <rtc_calendar_get_time+0x80>)
   256dc:	4798      	blx	r3
   256de:	1e03      	subs	r3, r0, #0
   256e0:	d1f9      	bne.n	256d6 <rtc_calendar_get_time+0x26>
   256e2:	e016      	b.n	25712 <rtc_calendar_get_time+0x62>
			/* Wait for synchronization */
		}
	} else if (!(rtc_module->MODE2.READREQ.reg & RTC_READREQ_RCONT)){
   256e4:	68fb      	ldr	r3, [r7, #12]
   256e6:	885b      	ldrh	r3, [r3, #2]
   256e8:	b29b      	uxth	r3, r3
   256ea:	001a      	movs	r2, r3
   256ec:	2380      	movs	r3, #128	; 0x80
   256ee:	01db      	lsls	r3, r3, #7
   256f0:	4013      	ands	r3, r2
   256f2:	d10e      	bne.n	25712 <rtc_calendar_get_time+0x62>
		rtc_module->MODE2.READREQ.reg |= RTC_READREQ_RCONT | RTC_READREQ_RREQ;
   256f4:	68fb      	ldr	r3, [r7, #12]
   256f6:	885b      	ldrh	r3, [r3, #2]
   256f8:	b29b      	uxth	r3, r3
   256fa:	4a0e      	ldr	r2, [pc, #56]	; (25734 <rtc_calendar_get_time+0x84>)
   256fc:	4313      	orrs	r3, r2
   256fe:	b29a      	uxth	r2, r3
   25700:	68fb      	ldr	r3, [r7, #12]
   25702:	805a      	strh	r2, [r3, #2]
		 /* wait that the first Read request finishes */
		while (rtc_calendar_is_syncing(module)) {
   25704:	46c0      	nop			; (mov r8, r8)
   25706:	687b      	ldr	r3, [r7, #4]
   25708:	0018      	movs	r0, r3
   2570a:	4b09      	ldr	r3, [pc, #36]	; (25730 <rtc_calendar_get_time+0x80>)
   2570c:	4798      	blx	r3
   2570e:	1e03      	subs	r3, r0, #0
   25710:	d1f9      	bne.n	25706 <rtc_calendar_get_time+0x56>
			/* Wait for synchronization */
		}
	}

	/* Read value. */
	uint32_t register_value = rtc_module->MODE2.CLOCK.reg;
   25712:	68fb      	ldr	r3, [r7, #12]
   25714:	691b      	ldr	r3, [r3, #16]
   25716:	60bb      	str	r3, [r7, #8]

	/* Convert value to time structure. */
	rtc_calendar_register_value_to_time(module, register_value, time);
   25718:	683a      	ldr	r2, [r7, #0]
   2571a:	68b9      	ldr	r1, [r7, #8]
   2571c:	687b      	ldr	r3, [r7, #4]
   2571e:	0018      	movs	r0, r3
   25720:	4b05      	ldr	r3, [pc, #20]	; (25738 <rtc_calendar_get_time+0x88>)
   25722:	4798      	blx	r3
}
   25724:	46c0      	nop			; (mov r8, r8)
   25726:	46bd      	mov	sp, r7
   25728:	b004      	add	sp, #16
   2572a:	bd80      	pop	{r7, pc}
   2572c:	ffff8000 	.word	0xffff8000
   25730:	00025321 	.word	0x00025321
   25734:	ffffc000 	.word	0xffffc000
   25738:	000254b5 	.word	0x000254b5

0002573c <rtc_calendar_set_alarm>:
 */
enum status_code rtc_calendar_set_alarm(
		struct rtc_module *const module,
		const struct rtc_calendar_alarm_time *const alarm,
		const enum rtc_calendar_alarm alarm_index)
{
   2573c:	b580      	push	{r7, lr}
   2573e:	b086      	sub	sp, #24
   25740:	af00      	add	r7, sp, #0
   25742:	60f8      	str	r0, [r7, #12]
   25744:	60b9      	str	r1, [r7, #8]
   25746:	1dfb      	adds	r3, r7, #7
   25748:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
   2574a:	68fb      	ldr	r3, [r7, #12]
   2574c:	681b      	ldr	r3, [r3, #0]
   2574e:	617b      	str	r3, [r7, #20]

	/* Sanity check. */
	if ((uint32_t)alarm_index > RTC_NUM_OF_ALARMS) {
   25750:	1dfb      	adds	r3, r7, #7
   25752:	781b      	ldrb	r3, [r3, #0]
   25754:	2b01      	cmp	r3, #1
   25756:	d901      	bls.n	2575c <rtc_calendar_set_alarm+0x20>
		return STATUS_ERR_INVALID_ARG;
   25758:	2317      	movs	r3, #23
   2575a:	e021      	b.n	257a0 <rtc_calendar_set_alarm+0x64>
	}

	/* Get register_value from time. */
	uint32_t register_value = rtc_calendar_time_to_register_value(module, &(alarm->time));
   2575c:	68ba      	ldr	r2, [r7, #8]
   2575e:	68fb      	ldr	r3, [r7, #12]
   25760:	0011      	movs	r1, r2
   25762:	0018      	movs	r0, r3
   25764:	4b10      	ldr	r3, [pc, #64]	; (257a8 <rtc_calendar_set_alarm+0x6c>)
   25766:	4798      	blx	r3
   25768:	0003      	movs	r3, r0
   2576a:	613b      	str	r3, [r7, #16]

	while (rtc_calendar_is_syncing(module)) {
   2576c:	46c0      	nop			; (mov r8, r8)
   2576e:	68fb      	ldr	r3, [r7, #12]
   25770:	0018      	movs	r0, r3
   25772:	4b0e      	ldr	r3, [pc, #56]	; (257ac <rtc_calendar_set_alarm+0x70>)
   25774:	4798      	blx	r3
   25776:	1e03      	subs	r3, r0, #0
   25778:	d1f9      	bne.n	2576e <rtc_calendar_set_alarm+0x32>
		/* Wait for synchronization */
	}

	/* Set alarm value. */
	rtc_module->MODE2.Mode2Alarm[alarm_index].ALARM.reg = register_value;
   2577a:	1dfb      	adds	r3, r7, #7
   2577c:	781a      	ldrb	r2, [r3, #0]
   2577e:	697b      	ldr	r3, [r7, #20]
   25780:	3203      	adds	r2, #3
   25782:	00d2      	lsls	r2, r2, #3
   25784:	6939      	ldr	r1, [r7, #16]
   25786:	50d1      	str	r1, [r2, r3]

	/* Set alarm mask */
	rtc_module->MODE2.Mode2Alarm[alarm_index].MASK.reg = alarm->mask;
   25788:	1dfb      	adds	r3, r7, #7
   2578a:	781b      	ldrb	r3, [r3, #0]
   2578c:	68ba      	ldr	r2, [r7, #8]
   2578e:	7a11      	ldrb	r1, [r2, #8]
   25790:	697a      	ldr	r2, [r7, #20]
   25792:	3303      	adds	r3, #3
   25794:	00db      	lsls	r3, r3, #3
   25796:	18d3      	adds	r3, r2, r3
   25798:	3304      	adds	r3, #4
   2579a:	1c0a      	adds	r2, r1, #0
   2579c:	701a      	strb	r2, [r3, #0]

	return STATUS_OK;
   2579e:	2300      	movs	r3, #0
}
   257a0:	0018      	movs	r0, r3
   257a2:	46bd      	mov	sp, r7
   257a4:	b006      	add	sp, #24
   257a6:	bd80      	pop	{r7, pc}
   257a8:	0002542d 	.word	0x0002542d
   257ac:	00025321 	.word	0x00025321

000257b0 <_rtc_interrupt_handler>:
 * \internal Interrupt handler for RTC
 *
 * \param [in] instance_index  Default value 0
 */
static void _rtc_interrupt_handler(const uint32_t instance_index)
{
   257b0:	b580      	push	{r7, lr}
   257b2:	b086      	sub	sp, #24
   257b4:	af00      	add	r7, sp, #0
   257b6:	6078      	str	r0, [r7, #4]
	struct rtc_module *module = _rtc_instance[instance_index];
   257b8:	4b28      	ldr	r3, [pc, #160]	; (2585c <_rtc_interrupt_handler+0xac>)
   257ba:	687a      	ldr	r2, [r7, #4]
   257bc:	0092      	lsls	r2, r2, #2
   257be:	58d3      	ldr	r3, [r2, r3]
   257c0:	617b      	str	r3, [r7, #20]

	Rtc *const rtc_module = module->hw;
   257c2:	697b      	ldr	r3, [r7, #20]
   257c4:	681b      	ldr	r3, [r3, #0]
   257c6:	613b      	str	r3, [r7, #16]

	/* Combine callback registered and enabled masks */
	uint16_t callback_mask = module->enabled_callback;
   257c8:	230e      	movs	r3, #14
   257ca:	18fb      	adds	r3, r7, r3
   257cc:	697a      	ldr	r2, [r7, #20]
   257ce:	8a52      	ldrh	r2, [r2, #18]
   257d0:	801a      	strh	r2, [r3, #0]
	callback_mask &= module->registered_callback;
   257d2:	697b      	ldr	r3, [r7, #20]
   257d4:	8a1b      	ldrh	r3, [r3, #16]
   257d6:	b29a      	uxth	r2, r3
   257d8:	230e      	movs	r3, #14
   257da:	18fb      	adds	r3, r7, r3
   257dc:	210e      	movs	r1, #14
   257de:	1879      	adds	r1, r7, r1
   257e0:	8809      	ldrh	r1, [r1, #0]
   257e2:	400a      	ands	r2, r1
   257e4:	801a      	strh	r2, [r3, #0]

	/* Read and mask interrupt flag register */
	uint16_t interrupt_status = rtc_module->MODE2.INTFLAG.reg;
   257e6:	693b      	ldr	r3, [r7, #16]
   257e8:	7a1b      	ldrb	r3, [r3, #8]
   257ea:	b2da      	uxtb	r2, r3
   257ec:	230c      	movs	r3, #12
   257ee:	18fb      	adds	r3, r7, r3
   257f0:	801a      	strh	r2, [r3, #0]
	interrupt_status &= rtc_module->MODE2.INTENSET.reg;
   257f2:	693b      	ldr	r3, [r7, #16]
   257f4:	79db      	ldrb	r3, [r3, #7]
   257f6:	b2db      	uxtb	r3, r3
   257f8:	b29a      	uxth	r2, r3
   257fa:	230c      	movs	r3, #12
   257fc:	18fb      	adds	r3, r7, r3
   257fe:	210c      	movs	r1, #12
   25800:	1879      	adds	r1, r7, r1
   25802:	8809      	ldrh	r1, [r1, #0]
   25804:	400a      	ands	r2, r1
   25806:	801a      	strh	r2, [r3, #0]

	if (interrupt_status & RTC_MODE2_INTFLAG_OVF) {
   25808:	230c      	movs	r3, #12
   2580a:	18fb      	adds	r3, r7, r3
   2580c:	881b      	ldrh	r3, [r3, #0]
   2580e:	2280      	movs	r2, #128	; 0x80
   25810:	4013      	ands	r3, r2
   25812:	d00c      	beq.n	2582e <_rtc_interrupt_handler+0x7e>
		/* Overflow interrupt */
		if (callback_mask & (1 << RTC_CALENDAR_CALLBACK_OVERFLOW)) {
   25814:	230e      	movs	r3, #14
   25816:	18fb      	adds	r3, r7, r3
   25818:	881b      	ldrh	r3, [r3, #0]
   2581a:	2202      	movs	r2, #2
   2581c:	4013      	ands	r3, r2
   2581e:	d002      	beq.n	25826 <_rtc_interrupt_handler+0x76>
			module->callbacks[RTC_CALENDAR_CALLBACK_OVERFLOW]();
   25820:	697b      	ldr	r3, [r7, #20]
   25822:	68db      	ldr	r3, [r3, #12]
   25824:	4798      	blx	r3
		}

		/* Clear interrupt flag */
		rtc_module->MODE2.INTFLAG.reg = RTC_MODE2_INTFLAG_OVF;
   25826:	693b      	ldr	r3, [r7, #16]
   25828:	2280      	movs	r2, #128	; 0x80
   2582a:	721a      	strb	r2, [r3, #8]
		}
		/* Clear interrupt flag */
		rtc_module->MODE2.INTFLAG.reg = RTC_MODE2_INTFLAG_ALARM(1 << 3);
		#endif
	}
}
   2582c:	e011      	b.n	25852 <_rtc_interrupt_handler+0xa2>
	} else if (interrupt_status & RTC_MODE2_INTFLAG_ALARM(1 << 0)) {
   2582e:	230c      	movs	r3, #12
   25830:	18fb      	adds	r3, r7, r3
   25832:	881b      	ldrh	r3, [r3, #0]
   25834:	2201      	movs	r2, #1
   25836:	4013      	ands	r3, r2
   25838:	d00b      	beq.n	25852 <_rtc_interrupt_handler+0xa2>
		if (callback_mask & (1 << RTC_CALENDAR_CALLBACK_ALARM_0)) {
   2583a:	230e      	movs	r3, #14
   2583c:	18fb      	adds	r3, r7, r3
   2583e:	881b      	ldrh	r3, [r3, #0]
   25840:	2201      	movs	r2, #1
   25842:	4013      	ands	r3, r2
   25844:	d002      	beq.n	2584c <_rtc_interrupt_handler+0x9c>
			module->callbacks[RTC_CALENDAR_CALLBACK_ALARM_0]();
   25846:	697b      	ldr	r3, [r7, #20]
   25848:	689b      	ldr	r3, [r3, #8]
   2584a:	4798      	blx	r3
		rtc_module->MODE2.INTFLAG.reg = RTC_MODE2_INTFLAG_ALARM(1 << 0);
   2584c:	693b      	ldr	r3, [r7, #16]
   2584e:	2201      	movs	r2, #1
   25850:	721a      	strb	r2, [r3, #8]
}
   25852:	46c0      	nop			; (mov r8, r8)
   25854:	46bd      	mov	sp, r7
   25856:	b006      	add	sp, #24
   25858:	bd80      	pop	{r7, pc}
   2585a:	46c0      	nop			; (mov r8, r8)
   2585c:	200056a4 	.word	0x200056a4

00025860 <RTC_Handler>:
/**
 * \internal ISR handler for RTC
 */
#if (RTC_INST_NUM == 1)
void RTC_Handler(void)
{
   25860:	b580      	push	{r7, lr}
   25862:	af00      	add	r7, sp, #0
	_rtc_interrupt_handler(0);
   25864:	2000      	movs	r0, #0
   25866:	4b02      	ldr	r3, [pc, #8]	; (25870 <RTC_Handler+0x10>)
   25868:	4798      	blx	r3
}
   2586a:	46c0      	nop			; (mov r8, r8)
   2586c:	46bd      	mov	sp, r7
   2586e:	bd80      	pop	{r7, pc}
   25870:	000257b1 	.word	0x000257b1

00025874 <system_gclk_chan_get_config_defaults>:
{
   25874:	b580      	push	{r7, lr}
   25876:	b082      	sub	sp, #8
   25878:	af00      	add	r7, sp, #0
   2587a:	6078      	str	r0, [r7, #4]
	config->source_generator = GCLK_GENERATOR_0;
   2587c:	687b      	ldr	r3, [r7, #4]
   2587e:	2200      	movs	r2, #0
   25880:	701a      	strb	r2, [r3, #0]
}
   25882:	46c0      	nop			; (mov r8, r8)
   25884:	46bd      	mov	sp, r7
   25886:	b002      	add	sp, #8
   25888:	bd80      	pop	{r7, pc}

0002588a <long_division>:
/**
 * \internal Calculate 64 bit division, ref can be found in
 * http://en.wikipedia.org/wiki/Division_algorithm#Long_division
 */
static uint64_t long_division(uint64_t n, uint64_t d)
{
   2588a:	b5f0      	push	{r4, r5, r6, r7, lr}
   2588c:	b08d      	sub	sp, #52	; 0x34
   2588e:	af00      	add	r7, sp, #0
   25890:	60b8      	str	r0, [r7, #8]
   25892:	60f9      	str	r1, [r7, #12]
   25894:	603a      	str	r2, [r7, #0]
   25896:	607b      	str	r3, [r7, #4]
	int32_t i;
	uint64_t q = 0, r = 0, bit_shift;
   25898:	2300      	movs	r3, #0
   2589a:	2400      	movs	r4, #0
   2589c:	623b      	str	r3, [r7, #32]
   2589e:	627c      	str	r4, [r7, #36]	; 0x24
   258a0:	2300      	movs	r3, #0
   258a2:	2400      	movs	r4, #0
   258a4:	61bb      	str	r3, [r7, #24]
   258a6:	61fc      	str	r4, [r7, #28]
	for (i = 63; i >= 0; i--) {
   258a8:	233f      	movs	r3, #63	; 0x3f
   258aa:	62fb      	str	r3, [r7, #44]	; 0x2c
   258ac:	e053      	b.n	25956 <long_division+0xcc>
		bit_shift = (uint64_t)1 << i;
   258ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   258b0:	3b20      	subs	r3, #32
   258b2:	2b00      	cmp	r3, #0
   258b4:	db04      	blt.n	258c0 <long_division+0x36>
   258b6:	2201      	movs	r2, #1
   258b8:	409a      	lsls	r2, r3
   258ba:	0013      	movs	r3, r2
   258bc:	617b      	str	r3, [r7, #20]
   258be:	e00b      	b.n	258d8 <long_division+0x4e>
   258c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   258c2:	2220      	movs	r2, #32
   258c4:	1ad3      	subs	r3, r2, r3
   258c6:	2201      	movs	r2, #1
   258c8:	40da      	lsrs	r2, r3
   258ca:	0013      	movs	r3, r2
   258cc:	2100      	movs	r1, #0
   258ce:	6afa      	ldr	r2, [r7, #44]	; 0x2c
   258d0:	4091      	lsls	r1, r2
   258d2:	000a      	movs	r2, r1
   258d4:	4313      	orrs	r3, r2
   258d6:	617b      	str	r3, [r7, #20]
   258d8:	2201      	movs	r2, #1
   258da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   258dc:	409a      	lsls	r2, r3
   258de:	0013      	movs	r3, r2
   258e0:	613b      	str	r3, [r7, #16]

		r = r << 1;
   258e2:	69bb      	ldr	r3, [r7, #24]
   258e4:	69fc      	ldr	r4, [r7, #28]
   258e6:	18db      	adds	r3, r3, r3
   258e8:	4164      	adcs	r4, r4
   258ea:	61bb      	str	r3, [r7, #24]
   258ec:	61fc      	str	r4, [r7, #28]

		if (n & bit_shift) {
   258ee:	68bb      	ldr	r3, [r7, #8]
   258f0:	693a      	ldr	r2, [r7, #16]
   258f2:	401a      	ands	r2, r3
   258f4:	0015      	movs	r5, r2
   258f6:	68fb      	ldr	r3, [r7, #12]
   258f8:	697a      	ldr	r2, [r7, #20]
   258fa:	401a      	ands	r2, r3
   258fc:	0016      	movs	r6, r2
   258fe:	002b      	movs	r3, r5
   25900:	4333      	orrs	r3, r6
   25902:	d007      	beq.n	25914 <long_division+0x8a>
			r |= 0x01;
   25904:	69bb      	ldr	r3, [r7, #24]
   25906:	2201      	movs	r2, #1
   25908:	4313      	orrs	r3, r2
   2590a:	61bb      	str	r3, [r7, #24]
   2590c:	69fb      	ldr	r3, [r7, #28]
   2590e:	2200      	movs	r2, #0
   25910:	4313      	orrs	r3, r2
   25912:	61fb      	str	r3, [r7, #28]
		}

		if (r >= d) {
   25914:	687a      	ldr	r2, [r7, #4]
   25916:	69fb      	ldr	r3, [r7, #28]
   25918:	429a      	cmp	r2, r3
   2591a:	d819      	bhi.n	25950 <long_division+0xc6>
   2591c:	687a      	ldr	r2, [r7, #4]
   2591e:	69fb      	ldr	r3, [r7, #28]
   25920:	429a      	cmp	r2, r3
   25922:	d103      	bne.n	2592c <long_division+0xa2>
   25924:	683a      	ldr	r2, [r7, #0]
   25926:	69bb      	ldr	r3, [r7, #24]
   25928:	429a      	cmp	r2, r3
   2592a:	d811      	bhi.n	25950 <long_division+0xc6>
			r = r - d;
   2592c:	69b9      	ldr	r1, [r7, #24]
   2592e:	69fa      	ldr	r2, [r7, #28]
   25930:	683b      	ldr	r3, [r7, #0]
   25932:	687c      	ldr	r4, [r7, #4]
   25934:	1ac9      	subs	r1, r1, r3
   25936:	41a2      	sbcs	r2, r4
   25938:	000b      	movs	r3, r1
   2593a:	0014      	movs	r4, r2
   2593c:	61bb      	str	r3, [r7, #24]
   2593e:	61fc      	str	r4, [r7, #28]
			q |= bit_shift;
   25940:	6a3a      	ldr	r2, [r7, #32]
   25942:	693b      	ldr	r3, [r7, #16]
   25944:	4313      	orrs	r3, r2
   25946:	623b      	str	r3, [r7, #32]
   25948:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   2594a:	697b      	ldr	r3, [r7, #20]
   2594c:	4313      	orrs	r3, r2
   2594e:	627b      	str	r3, [r7, #36]	; 0x24
	for (i = 63; i >= 0; i--) {
   25950:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   25952:	3b01      	subs	r3, #1
   25954:	62fb      	str	r3, [r7, #44]	; 0x2c
   25956:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   25958:	2b00      	cmp	r3, #0
   2595a:	daa8      	bge.n	258ae <long_division+0x24>
		}
	}

	return q;
   2595c:	6a3b      	ldr	r3, [r7, #32]
   2595e:	6a7c      	ldr	r4, [r7, #36]	; 0x24
}
   25960:	0018      	movs	r0, r3
   25962:	0021      	movs	r1, r4
   25964:	46bd      	mov	sp, r7
   25966:	b00d      	add	sp, #52	; 0x34
   25968:	bdf0      	pop	{r4, r5, r6, r7, pc}

0002596a <_sercom_get_sync_baud_val>:
 */
enum status_code _sercom_get_sync_baud_val(
		const uint32_t baudrate,
		const uint32_t external_clock,
		uint16_t *const baudvalue)
{
   2596a:	b580      	push	{r7, lr}
   2596c:	b086      	sub	sp, #24
   2596e:	af00      	add	r7, sp, #0
   25970:	60f8      	str	r0, [r7, #12]
   25972:	60b9      	str	r1, [r7, #8]
   25974:	607a      	str	r2, [r7, #4]
	/* Baud value variable */
	uint16_t baud_calculated = 0;
   25976:	2316      	movs	r3, #22
   25978:	18fb      	adds	r3, r7, r3
   2597a:	2200      	movs	r2, #0
   2597c:	801a      	strh	r2, [r3, #0]
	uint32_t clock_value = external_clock;
   2597e:	68bb      	ldr	r3, [r7, #8]
   25980:	613b      	str	r3, [r7, #16]


	/* Check if baudrate is outside of valid range */
	if (baudrate > (external_clock / 2)) {
   25982:	68bb      	ldr	r3, [r7, #8]
   25984:	085a      	lsrs	r2, r3, #1
   25986:	68fb      	ldr	r3, [r7, #12]
   25988:	429a      	cmp	r2, r3
   2598a:	d201      	bcs.n	25990 <_sercom_get_sync_baud_val+0x26>
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
   2598c:	2340      	movs	r3, #64	; 0x40
   2598e:	e026      	b.n	259de <_sercom_get_sync_baud_val+0x74>
	}

	/* Calculate BAUD value from clock frequency and baudrate */
	clock_value = external_clock / 2;
   25990:	68bb      	ldr	r3, [r7, #8]
   25992:	085b      	lsrs	r3, r3, #1
   25994:	613b      	str	r3, [r7, #16]
	while (clock_value >= baudrate) {
   25996:	e00a      	b.n	259ae <_sercom_get_sync_baud_val+0x44>
		clock_value = clock_value - baudrate;
   25998:	693a      	ldr	r2, [r7, #16]
   2599a:	68fb      	ldr	r3, [r7, #12]
   2599c:	1ad3      	subs	r3, r2, r3
   2599e:	613b      	str	r3, [r7, #16]
		baud_calculated++;
   259a0:	2316      	movs	r3, #22
   259a2:	18fb      	adds	r3, r7, r3
   259a4:	881a      	ldrh	r2, [r3, #0]
   259a6:	2316      	movs	r3, #22
   259a8:	18fb      	adds	r3, r7, r3
   259aa:	3201      	adds	r2, #1
   259ac:	801a      	strh	r2, [r3, #0]
	while (clock_value >= baudrate) {
   259ae:	693a      	ldr	r2, [r7, #16]
   259b0:	68fb      	ldr	r3, [r7, #12]
   259b2:	429a      	cmp	r2, r3
   259b4:	d2f0      	bcs.n	25998 <_sercom_get_sync_baud_val+0x2e>
	}
	baud_calculated = baud_calculated - 1;
   259b6:	2316      	movs	r3, #22
   259b8:	18fb      	adds	r3, r7, r3
   259ba:	2216      	movs	r2, #22
   259bc:	18ba      	adds	r2, r7, r2
   259be:	8812      	ldrh	r2, [r2, #0]
   259c0:	3a01      	subs	r2, #1
   259c2:	801a      	strh	r2, [r3, #0]

	/* Check if BAUD value is more than 255, which is maximum
	 * for synchronous mode */
	if (baud_calculated > 0xFF) {
   259c4:	2316      	movs	r3, #22
   259c6:	18fb      	adds	r3, r7, r3
   259c8:	881b      	ldrh	r3, [r3, #0]
   259ca:	2bff      	cmp	r3, #255	; 0xff
   259cc:	d901      	bls.n	259d2 <_sercom_get_sync_baud_val+0x68>
		/* Return with an error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
   259ce:	2340      	movs	r3, #64	; 0x40
   259d0:	e005      	b.n	259de <_sercom_get_sync_baud_val+0x74>
	} else {
		*baudvalue = baud_calculated;
   259d2:	687b      	ldr	r3, [r7, #4]
   259d4:	2216      	movs	r2, #22
   259d6:	18ba      	adds	r2, r7, r2
   259d8:	8812      	ldrh	r2, [r2, #0]
   259da:	801a      	strh	r2, [r3, #0]
		return STATUS_OK;
   259dc:	2300      	movs	r3, #0
	}
}
   259de:	0018      	movs	r0, r3
   259e0:	46bd      	mov	sp, r7
   259e2:	b006      	add	sp, #24
   259e4:	bd80      	pop	{r7, pc}
	...

000259e8 <_sercom_get_async_baud_val>:
		const uint32_t baudrate,
		const uint32_t peripheral_clock,
		uint16_t *const baudval,
		enum sercom_asynchronous_operation_mode mode,
		enum sercom_asynchronous_sample_num sample_num)
{
   259e8:	b5f0      	push	{r4, r5, r6, r7, lr}
   259ea:	b0a1      	sub	sp, #132	; 0x84
   259ec:	af00      	add	r7, sp, #0
   259ee:	64f8      	str	r0, [r7, #76]	; 0x4c
   259f0:	64b9      	str	r1, [r7, #72]	; 0x48
   259f2:	647a      	str	r2, [r7, #68]	; 0x44
   259f4:	2243      	movs	r2, #67	; 0x43
   259f6:	18ba      	adds	r2, r7, r2
   259f8:	7013      	strb	r3, [r2, #0]
	/* Temporary variables  */
	uint64_t ratio = 0;
   259fa:	2300      	movs	r3, #0
   259fc:	2400      	movs	r4, #0
   259fe:	673b      	str	r3, [r7, #112]	; 0x70
   25a00:	677c      	str	r4, [r7, #116]	; 0x74
	uint64_t scale = 0;
   25a02:	2300      	movs	r3, #0
   25a04:	2400      	movs	r4, #0
   25a06:	66bb      	str	r3, [r7, #104]	; 0x68
   25a08:	66fc      	str	r4, [r7, #108]	; 0x6c
	uint64_t baud_calculated = 0;
   25a0a:	2300      	movs	r3, #0
   25a0c:	2400      	movs	r4, #0
   25a0e:	67bb      	str	r3, [r7, #120]	; 0x78
   25a10:	67fc      	str	r4, [r7, #124]	; 0x7c
	uint8_t baud_fp;
	uint32_t baud_int = 0;
   25a12:	2300      	movs	r3, #0
   25a14:	667b      	str	r3, [r7, #100]	; 0x64
	uint64_t temp1;

	/* Check if the baudrate is outside of valid range */
	if ((baudrate * sample_num) > peripheral_clock) {
   25a16:	2358      	movs	r3, #88	; 0x58
   25a18:	2240      	movs	r2, #64	; 0x40
   25a1a:	4694      	mov	ip, r2
   25a1c:	44bc      	add	ip, r7
   25a1e:	4463      	add	r3, ip
   25a20:	781a      	ldrb	r2, [r3, #0]
   25a22:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   25a24:	435a      	muls	r2, r3
   25a26:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   25a28:	429a      	cmp	r2, r3
   25a2a:	d901      	bls.n	25a30 <_sercom_get_async_baud_val+0x48>
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
   25a2c:	2340      	movs	r3, #64	; 0x40
   25a2e:	e0b3      	b.n	25b98 <_sercom_get_async_baud_val+0x1b0>
	}

	if(mode == SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC) {
   25a30:	2343      	movs	r3, #67	; 0x43
   25a32:	18fb      	adds	r3, r7, r3
   25a34:	781b      	ldrb	r3, [r3, #0]
   25a36:	2b00      	cmp	r3, #0
   25a38:	d13d      	bne.n	25ab6 <_sercom_get_async_baud_val+0xce>
		/* Calculate the BAUD value */
		temp1 = ((sample_num * (uint64_t)baudrate) << SHIFT);
   25a3a:	2358      	movs	r3, #88	; 0x58
   25a3c:	2240      	movs	r2, #64	; 0x40
   25a3e:	4694      	mov	ip, r2
   25a40:	44bc      	add	ip, r7
   25a42:	4463      	add	r3, ip
   25a44:	781b      	ldrb	r3, [r3, #0]
   25a46:	b2db      	uxtb	r3, r3
   25a48:	613b      	str	r3, [r7, #16]
   25a4a:	2300      	movs	r3, #0
   25a4c:	617b      	str	r3, [r7, #20]
   25a4e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   25a50:	60bb      	str	r3, [r7, #8]
   25a52:	2300      	movs	r3, #0
   25a54:	60fb      	str	r3, [r7, #12]
   25a56:	4c52      	ldr	r4, [pc, #328]	; (25ba0 <_sercom_get_async_baud_val+0x1b8>)
   25a58:	68ba      	ldr	r2, [r7, #8]
   25a5a:	68fb      	ldr	r3, [r7, #12]
   25a5c:	6938      	ldr	r0, [r7, #16]
   25a5e:	6979      	ldr	r1, [r7, #20]
   25a60:	47a0      	blx	r4
   25a62:	0003      	movs	r3, r0
   25a64:	000c      	movs	r4, r1
   25a66:	001b      	movs	r3, r3
   25a68:	65fb      	str	r3, [r7, #92]	; 0x5c
   25a6a:	2300      	movs	r3, #0
   25a6c:	65bb      	str	r3, [r7, #88]	; 0x58
		ratio = long_division(temp1, peripheral_clock);
   25a6e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   25a70:	603b      	str	r3, [r7, #0]
   25a72:	2300      	movs	r3, #0
   25a74:	607b      	str	r3, [r7, #4]
   25a76:	6db8      	ldr	r0, [r7, #88]	; 0x58
   25a78:	6df9      	ldr	r1, [r7, #92]	; 0x5c
   25a7a:	683a      	ldr	r2, [r7, #0]
   25a7c:	687b      	ldr	r3, [r7, #4]
   25a7e:	4c49      	ldr	r4, [pc, #292]	; (25ba4 <_sercom_get_async_baud_val+0x1bc>)
   25a80:	47a0      	blx	r4
   25a82:	0003      	movs	r3, r0
   25a84:	000c      	movs	r4, r1
   25a86:	673b      	str	r3, [r7, #112]	; 0x70
   25a88:	677c      	str	r4, [r7, #116]	; 0x74
		scale = ((uint64_t)1 << SHIFT) - ratio;
   25a8a:	2100      	movs	r1, #0
   25a8c:	2201      	movs	r2, #1
   25a8e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
   25a90:	6f7c      	ldr	r4, [r7, #116]	; 0x74
   25a92:	1ac9      	subs	r1, r1, r3
   25a94:	41a2      	sbcs	r2, r4
   25a96:	000b      	movs	r3, r1
   25a98:	0014      	movs	r4, r2
   25a9a:	66bb      	str	r3, [r7, #104]	; 0x68
   25a9c:	66fc      	str	r4, [r7, #108]	; 0x6c
		baud_calculated = (65536 * scale) >> SHIFT;
   25a9e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   25aa0:	0c1b      	lsrs	r3, r3, #16
   25aa2:	6efa      	ldr	r2, [r7, #108]	; 0x6c
   25aa4:	0416      	lsls	r6, r2, #16
   25aa6:	431e      	orrs	r6, r3
   25aa8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   25aaa:	041d      	lsls	r5, r3, #16
   25aac:	0033      	movs	r3, r6
   25aae:	67bb      	str	r3, [r7, #120]	; 0x78
   25ab0:	2300      	movs	r3, #0
   25ab2:	67fb      	str	r3, [r7, #124]	; 0x7c
   25ab4:	e06a      	b.n	25b8c <_sercom_get_async_baud_val+0x1a4>
	} else if(mode == SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL) {
   25ab6:	2343      	movs	r3, #67	; 0x43
   25ab8:	18fb      	adds	r3, r7, r3
   25aba:	781b      	ldrb	r3, [r3, #0]
   25abc:	2b01      	cmp	r3, #1
   25abe:	d165      	bne.n	25b8c <_sercom_get_async_baud_val+0x1a4>
		temp1 = ((uint64_t)baudrate * sample_num);
   25ac0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   25ac2:	633b      	str	r3, [r7, #48]	; 0x30
   25ac4:	2300      	movs	r3, #0
   25ac6:	637b      	str	r3, [r7, #52]	; 0x34
   25ac8:	2358      	movs	r3, #88	; 0x58
   25aca:	2240      	movs	r2, #64	; 0x40
   25acc:	4694      	mov	ip, r2
   25ace:	44bc      	add	ip, r7
   25ad0:	4463      	add	r3, ip
   25ad2:	781b      	ldrb	r3, [r3, #0]
   25ad4:	b2db      	uxtb	r3, r3
   25ad6:	62bb      	str	r3, [r7, #40]	; 0x28
   25ad8:	2300      	movs	r3, #0
   25ada:	62fb      	str	r3, [r7, #44]	; 0x2c
   25adc:	4c30      	ldr	r4, [pc, #192]	; (25ba0 <_sercom_get_async_baud_val+0x1b8>)
   25ade:	6aba      	ldr	r2, [r7, #40]	; 0x28
   25ae0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   25ae2:	6b38      	ldr	r0, [r7, #48]	; 0x30
   25ae4:	6b79      	ldr	r1, [r7, #52]	; 0x34
   25ae6:	47a0      	blx	r4
   25ae8:	0003      	movs	r3, r0
   25aea:	000c      	movs	r4, r1
   25aec:	65bb      	str	r3, [r7, #88]	; 0x58
   25aee:	65fc      	str	r4, [r7, #92]	; 0x5c
		baud_int = long_division( peripheral_clock, temp1);
   25af0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   25af2:	623b      	str	r3, [r7, #32]
   25af4:	2300      	movs	r3, #0
   25af6:	627b      	str	r3, [r7, #36]	; 0x24
   25af8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
   25afa:	6dfc      	ldr	r4, [r7, #92]	; 0x5c
   25afc:	001a      	movs	r2, r3
   25afe:	0023      	movs	r3, r4
   25b00:	6a38      	ldr	r0, [r7, #32]
   25b02:	6a79      	ldr	r1, [r7, #36]	; 0x24
   25b04:	4c27      	ldr	r4, [pc, #156]	; (25ba4 <_sercom_get_async_baud_val+0x1bc>)
   25b06:	47a0      	blx	r4
   25b08:	0003      	movs	r3, r0
   25b0a:	000c      	movs	r4, r1
   25b0c:	667b      	str	r3, [r7, #100]	; 0x64
		if(baud_int > BAUD_INT_MAX) {
   25b0e:	6e7a      	ldr	r2, [r7, #100]	; 0x64
   25b10:	2380      	movs	r3, #128	; 0x80
   25b12:	019b      	lsls	r3, r3, #6
   25b14:	429a      	cmp	r2, r3
   25b16:	d901      	bls.n	25b1c <_sercom_get_async_baud_val+0x134>
				return STATUS_ERR_BAUDRATE_UNAVAILABLE;
   25b18:	2340      	movs	r3, #64	; 0x40
   25b1a:	e03d      	b.n	25b98 <_sercom_get_async_baud_val+0x1b0>
		}
		temp1 = long_division( 8 * (uint64_t)peripheral_clock, temp1);
   25b1c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   25b1e:	61bb      	str	r3, [r7, #24]
   25b20:	2300      	movs	r3, #0
   25b22:	61fb      	str	r3, [r7, #28]
   25b24:	69b9      	ldr	r1, [r7, #24]
   25b26:	69fa      	ldr	r2, [r7, #28]
   25b28:	000b      	movs	r3, r1
   25b2a:	0f5b      	lsrs	r3, r3, #29
   25b2c:	0010      	movs	r0, r2
   25b2e:	00c0      	lsls	r0, r0, #3
   25b30:	63f8      	str	r0, [r7, #60]	; 0x3c
   25b32:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
   25b34:	4318      	orrs	r0, r3
   25b36:	63f8      	str	r0, [r7, #60]	; 0x3c
   25b38:	000b      	movs	r3, r1
   25b3a:	00db      	lsls	r3, r3, #3
   25b3c:	63bb      	str	r3, [r7, #56]	; 0x38
   25b3e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
   25b40:	6dfc      	ldr	r4, [r7, #92]	; 0x5c
   25b42:	001a      	movs	r2, r3
   25b44:	0023      	movs	r3, r4
   25b46:	6bb8      	ldr	r0, [r7, #56]	; 0x38
   25b48:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
   25b4a:	4c16      	ldr	r4, [pc, #88]	; (25ba4 <_sercom_get_async_baud_val+0x1bc>)
   25b4c:	47a0      	blx	r4
   25b4e:	0003      	movs	r3, r0
   25b50:	000c      	movs	r4, r1
   25b52:	65bb      	str	r3, [r7, #88]	; 0x58
   25b54:	65fc      	str	r4, [r7, #92]	; 0x5c
		baud_fp = temp1 - 8 * baud_int;
   25b56:	6dbb      	ldr	r3, [r7, #88]	; 0x58
   25b58:	6dfc      	ldr	r4, [r7, #92]	; 0x5c
   25b5a:	b2d9      	uxtb	r1, r3
   25b5c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   25b5e:	b2db      	uxtb	r3, r3
   25b60:	00db      	lsls	r3, r3, #3
   25b62:	b2da      	uxtb	r2, r3
   25b64:	2317      	movs	r3, #23
   25b66:	2040      	movs	r0, #64	; 0x40
   25b68:	4684      	mov	ip, r0
   25b6a:	44bc      	add	ip, r7
   25b6c:	4463      	add	r3, ip
   25b6e:	1a8a      	subs	r2, r1, r2
   25b70:	701a      	strb	r2, [r3, #0]
		baud_calculated = baud_int | (baud_fp << 13);
   25b72:	2317      	movs	r3, #23
   25b74:	2240      	movs	r2, #64	; 0x40
   25b76:	4694      	mov	ip, r2
   25b78:	44bc      	add	ip, r7
   25b7a:	4463      	add	r3, ip
   25b7c:	781b      	ldrb	r3, [r3, #0]
   25b7e:	035b      	lsls	r3, r3, #13
   25b80:	001a      	movs	r2, r3
   25b82:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   25b84:	4313      	orrs	r3, r2
   25b86:	67bb      	str	r3, [r7, #120]	; 0x78
   25b88:	2300      	movs	r3, #0
   25b8a:	67fb      	str	r3, [r7, #124]	; 0x7c
	}

	*baudval = baud_calculated;
   25b8c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
   25b8e:	6ffc      	ldr	r4, [r7, #124]	; 0x7c
   25b90:	b29a      	uxth	r2, r3
   25b92:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   25b94:	801a      	strh	r2, [r3, #0]
	return STATUS_OK;
   25b96:	2300      	movs	r3, #0
}
   25b98:	0018      	movs	r0, r3
   25b9a:	46bd      	mov	sp, r7
   25b9c:	b021      	add	sp, #132	; 0x84
   25b9e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   25ba0:	000313d9 	.word	0x000313d9
   25ba4:	0002588b 	.word	0x0002588b

00025ba8 <sercom_set_gclk_generator>:
 *                                         forced.
 */
enum status_code sercom_set_gclk_generator(
		const enum gclk_generator generator_source,
		const bool force_change)
{
   25ba8:	b580      	push	{r7, lr}
   25baa:	b084      	sub	sp, #16
   25bac:	af00      	add	r7, sp, #0
   25bae:	0002      	movs	r2, r0
   25bb0:	1dfb      	adds	r3, r7, #7
   25bb2:	701a      	strb	r2, [r3, #0]
   25bb4:	1dbb      	adds	r3, r7, #6
   25bb6:	1c0a      	adds	r2, r1, #0
   25bb8:	701a      	strb	r2, [r3, #0]
	/* Check if valid option */
	if (!_sercom_config.generator_is_set || force_change) {
   25bba:	4b1a      	ldr	r3, [pc, #104]	; (25c24 <sercom_set_gclk_generator+0x7c>)
   25bbc:	781b      	ldrb	r3, [r3, #0]
   25bbe:	2201      	movs	r2, #1
   25bc0:	4053      	eors	r3, r2
   25bc2:	b2db      	uxtb	r3, r3
   25bc4:	2b00      	cmp	r3, #0
   25bc6:	d103      	bne.n	25bd0 <sercom_set_gclk_generator+0x28>
   25bc8:	1dbb      	adds	r3, r7, #6
   25bca:	781b      	ldrb	r3, [r3, #0]
   25bcc:	2b00      	cmp	r3, #0
   25bce:	d01b      	beq.n	25c08 <sercom_set_gclk_generator+0x60>
		/* Create and fill a GCLK configuration structure for the new config */
		struct system_gclk_chan_config gclk_chan_conf;
		system_gclk_chan_get_config_defaults(&gclk_chan_conf);
   25bd0:	230c      	movs	r3, #12
   25bd2:	18fb      	adds	r3, r7, r3
   25bd4:	0018      	movs	r0, r3
   25bd6:	4b14      	ldr	r3, [pc, #80]	; (25c28 <sercom_set_gclk_generator+0x80>)
   25bd8:	4798      	blx	r3
		gclk_chan_conf.source_generator = generator_source;
   25bda:	230c      	movs	r3, #12
   25bdc:	18fb      	adds	r3, r7, r3
   25bde:	1dfa      	adds	r2, r7, #7
   25be0:	7812      	ldrb	r2, [r2, #0]
   25be2:	701a      	strb	r2, [r3, #0]
		system_gclk_chan_set_config(SERCOM_GCLK_ID, &gclk_chan_conf);
   25be4:	230c      	movs	r3, #12
   25be6:	18fb      	adds	r3, r7, r3
   25be8:	0019      	movs	r1, r3
   25bea:	2013      	movs	r0, #19
   25bec:	4b0f      	ldr	r3, [pc, #60]	; (25c2c <sercom_set_gclk_generator+0x84>)
   25bee:	4798      	blx	r3
		system_gclk_chan_enable(SERCOM_GCLK_ID);
   25bf0:	2013      	movs	r0, #19
   25bf2:	4b0f      	ldr	r3, [pc, #60]	; (25c30 <sercom_set_gclk_generator+0x88>)
   25bf4:	4798      	blx	r3

		/* Save config */
		_sercom_config.generator_source = generator_source;
   25bf6:	4b0b      	ldr	r3, [pc, #44]	; (25c24 <sercom_set_gclk_generator+0x7c>)
   25bf8:	1dfa      	adds	r2, r7, #7
   25bfa:	7812      	ldrb	r2, [r2, #0]
   25bfc:	705a      	strb	r2, [r3, #1]
		_sercom_config.generator_is_set = true;
   25bfe:	4b09      	ldr	r3, [pc, #36]	; (25c24 <sercom_set_gclk_generator+0x7c>)
   25c00:	2201      	movs	r2, #1
   25c02:	701a      	strb	r2, [r3, #0]

		return STATUS_OK;
   25c04:	2300      	movs	r3, #0
   25c06:	e008      	b.n	25c1a <sercom_set_gclk_generator+0x72>
	} else if (generator_source == _sercom_config.generator_source) {
   25c08:	4b06      	ldr	r3, [pc, #24]	; (25c24 <sercom_set_gclk_generator+0x7c>)
   25c0a:	785b      	ldrb	r3, [r3, #1]
   25c0c:	1dfa      	adds	r2, r7, #7
   25c0e:	7812      	ldrb	r2, [r2, #0]
   25c10:	429a      	cmp	r2, r3
   25c12:	d101      	bne.n	25c18 <sercom_set_gclk_generator+0x70>
		/* Return status OK if same config */
		return STATUS_OK;
   25c14:	2300      	movs	r3, #0
   25c16:	e000      	b.n	25c1a <sercom_set_gclk_generator+0x72>
	}

	/* Return invalid config to already initialized GCLK */
	return STATUS_ERR_ALREADY_INITIALIZED;
   25c18:	231d      	movs	r3, #29
}
   25c1a:	0018      	movs	r0, r3
   25c1c:	46bd      	mov	sp, r7
   25c1e:	b004      	add	sp, #16
   25c20:	bd80      	pop	{r7, pc}
   25c22:	46c0      	nop			; (mov r8, r8)
   25c24:	20003d5c 	.word	0x20003d5c
   25c28:	00025875 	.word	0x00025875
   25c2c:	00028681 	.word	0x00028681
   25c30:	000286c5 	.word	0x000286c5

00025c34 <_sercom_get_default_pad>:
 *
 */
uint32_t _sercom_get_default_pad(
		Sercom *const sercom_module,
		const uint8_t pad)
{
   25c34:	b580      	push	{r7, lr}
   25c36:	b082      	sub	sp, #8
   25c38:	af00      	add	r7, sp, #0
   25c3a:	6078      	str	r0, [r7, #4]
   25c3c:	000a      	movs	r2, r1
   25c3e:	1cfb      	adds	r3, r7, #3
   25c40:	701a      	strb	r2, [r3, #0]
	switch ((uintptr_t)sercom_module) {
   25c42:	687b      	ldr	r3, [r7, #4]
   25c44:	4a4d      	ldr	r2, [pc, #308]	; (25d7c <_sercom_get_default_pad+0x148>)
   25c46:	4293      	cmp	r3, r2
   25c48:	d03f      	beq.n	25cca <_sercom_get_default_pad+0x96>
   25c4a:	4a4c      	ldr	r2, [pc, #304]	; (25d7c <_sercom_get_default_pad+0x148>)
   25c4c:	4293      	cmp	r3, r2
   25c4e:	d806      	bhi.n	25c5e <_sercom_get_default_pad+0x2a>
   25c50:	4a4b      	ldr	r2, [pc, #300]	; (25d80 <_sercom_get_default_pad+0x14c>)
   25c52:	4293      	cmp	r3, r2
   25c54:	d00f      	beq.n	25c76 <_sercom_get_default_pad+0x42>
   25c56:	4a4b      	ldr	r2, [pc, #300]	; (25d84 <_sercom_get_default_pad+0x150>)
   25c58:	4293      	cmp	r3, r2
   25c5a:	d021      	beq.n	25ca0 <_sercom_get_default_pad+0x6c>
   25c5c:	e089      	b.n	25d72 <_sercom_get_default_pad+0x13e>
   25c5e:	4a4a      	ldr	r2, [pc, #296]	; (25d88 <_sercom_get_default_pad+0x154>)
   25c60:	4293      	cmp	r3, r2
   25c62:	d100      	bne.n	25c66 <_sercom_get_default_pad+0x32>
   25c64:	e05b      	b.n	25d1e <_sercom_get_default_pad+0xea>
   25c66:	4a49      	ldr	r2, [pc, #292]	; (25d8c <_sercom_get_default_pad+0x158>)
   25c68:	4293      	cmp	r3, r2
   25c6a:	d100      	bne.n	25c6e <_sercom_get_default_pad+0x3a>
   25c6c:	e06c      	b.n	25d48 <_sercom_get_default_pad+0x114>
   25c6e:	4a48      	ldr	r2, [pc, #288]	; (25d90 <_sercom_get_default_pad+0x15c>)
   25c70:	4293      	cmp	r3, r2
   25c72:	d03f      	beq.n	25cf4 <_sercom_get_default_pad+0xc0>
   25c74:	e07d      	b.n	25d72 <_sercom_get_default_pad+0x13e>
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
   25c76:	1cfb      	adds	r3, r7, #3
   25c78:	781b      	ldrb	r3, [r3, #0]
   25c7a:	2b01      	cmp	r3, #1
   25c7c:	d00a      	beq.n	25c94 <_sercom_get_default_pad+0x60>
   25c7e:	dc02      	bgt.n	25c86 <_sercom_get_default_pad+0x52>
   25c80:	2b00      	cmp	r3, #0
   25c82:	d005      	beq.n	25c90 <_sercom_get_default_pad+0x5c>
   25c84:	e075      	b.n	25d72 <_sercom_get_default_pad+0x13e>
   25c86:	2b02      	cmp	r3, #2
   25c88:	d006      	beq.n	25c98 <_sercom_get_default_pad+0x64>
   25c8a:	2b03      	cmp	r3, #3
   25c8c:	d006      	beq.n	25c9c <_sercom_get_default_pad+0x68>
   25c8e:	e070      	b.n	25d72 <_sercom_get_default_pad+0x13e>
   25c90:	4b40      	ldr	r3, [pc, #256]	; (25d94 <_sercom_get_default_pad+0x160>)
   25c92:	e06f      	b.n	25d74 <_sercom_get_default_pad+0x140>
   25c94:	4b40      	ldr	r3, [pc, #256]	; (25d98 <_sercom_get_default_pad+0x164>)
   25c96:	e06d      	b.n	25d74 <_sercom_get_default_pad+0x140>
   25c98:	4b40      	ldr	r3, [pc, #256]	; (25d9c <_sercom_get_default_pad+0x168>)
   25c9a:	e06b      	b.n	25d74 <_sercom_get_default_pad+0x140>
   25c9c:	4b40      	ldr	r3, [pc, #256]	; (25da0 <_sercom_get_default_pad+0x16c>)
   25c9e:	e069      	b.n	25d74 <_sercom_get_default_pad+0x140>
   25ca0:	1cfb      	adds	r3, r7, #3
   25ca2:	781b      	ldrb	r3, [r3, #0]
   25ca4:	2b01      	cmp	r3, #1
   25ca6:	d00a      	beq.n	25cbe <_sercom_get_default_pad+0x8a>
   25ca8:	dc02      	bgt.n	25cb0 <_sercom_get_default_pad+0x7c>
   25caa:	2b00      	cmp	r3, #0
   25cac:	d005      	beq.n	25cba <_sercom_get_default_pad+0x86>
   25cae:	e060      	b.n	25d72 <_sercom_get_default_pad+0x13e>
   25cb0:	2b02      	cmp	r3, #2
   25cb2:	d006      	beq.n	25cc2 <_sercom_get_default_pad+0x8e>
   25cb4:	2b03      	cmp	r3, #3
   25cb6:	d006      	beq.n	25cc6 <_sercom_get_default_pad+0x92>
   25cb8:	e05b      	b.n	25d72 <_sercom_get_default_pad+0x13e>
   25cba:	2303      	movs	r3, #3
   25cbc:	e05a      	b.n	25d74 <_sercom_get_default_pad+0x140>
   25cbe:	4b39      	ldr	r3, [pc, #228]	; (25da4 <_sercom_get_default_pad+0x170>)
   25cc0:	e058      	b.n	25d74 <_sercom_get_default_pad+0x140>
   25cc2:	4b39      	ldr	r3, [pc, #228]	; (25da8 <_sercom_get_default_pad+0x174>)
   25cc4:	e056      	b.n	25d74 <_sercom_get_default_pad+0x140>
   25cc6:	4b39      	ldr	r3, [pc, #228]	; (25dac <_sercom_get_default_pad+0x178>)
   25cc8:	e054      	b.n	25d74 <_sercom_get_default_pad+0x140>
   25cca:	1cfb      	adds	r3, r7, #3
   25ccc:	781b      	ldrb	r3, [r3, #0]
   25cce:	2b01      	cmp	r3, #1
   25cd0:	d00a      	beq.n	25ce8 <_sercom_get_default_pad+0xb4>
   25cd2:	dc02      	bgt.n	25cda <_sercom_get_default_pad+0xa6>
   25cd4:	2b00      	cmp	r3, #0
   25cd6:	d005      	beq.n	25ce4 <_sercom_get_default_pad+0xb0>
   25cd8:	e04b      	b.n	25d72 <_sercom_get_default_pad+0x13e>
   25cda:	2b02      	cmp	r3, #2
   25cdc:	d006      	beq.n	25cec <_sercom_get_default_pad+0xb8>
   25cde:	2b03      	cmp	r3, #3
   25ce0:	d006      	beq.n	25cf0 <_sercom_get_default_pad+0xbc>
   25ce2:	e046      	b.n	25d72 <_sercom_get_default_pad+0x13e>
   25ce4:	4b32      	ldr	r3, [pc, #200]	; (25db0 <_sercom_get_default_pad+0x17c>)
   25ce6:	e045      	b.n	25d74 <_sercom_get_default_pad+0x140>
   25ce8:	4b32      	ldr	r3, [pc, #200]	; (25db4 <_sercom_get_default_pad+0x180>)
   25cea:	e043      	b.n	25d74 <_sercom_get_default_pad+0x140>
   25cec:	4b32      	ldr	r3, [pc, #200]	; (25db8 <_sercom_get_default_pad+0x184>)
   25cee:	e041      	b.n	25d74 <_sercom_get_default_pad+0x140>
   25cf0:	4b32      	ldr	r3, [pc, #200]	; (25dbc <_sercom_get_default_pad+0x188>)
   25cf2:	e03f      	b.n	25d74 <_sercom_get_default_pad+0x140>
   25cf4:	1cfb      	adds	r3, r7, #3
   25cf6:	781b      	ldrb	r3, [r3, #0]
   25cf8:	2b01      	cmp	r3, #1
   25cfa:	d00a      	beq.n	25d12 <_sercom_get_default_pad+0xde>
   25cfc:	dc02      	bgt.n	25d04 <_sercom_get_default_pad+0xd0>
   25cfe:	2b00      	cmp	r3, #0
   25d00:	d005      	beq.n	25d0e <_sercom_get_default_pad+0xda>
   25d02:	e036      	b.n	25d72 <_sercom_get_default_pad+0x13e>
   25d04:	2b02      	cmp	r3, #2
   25d06:	d006      	beq.n	25d16 <_sercom_get_default_pad+0xe2>
   25d08:	2b03      	cmp	r3, #3
   25d0a:	d006      	beq.n	25d1a <_sercom_get_default_pad+0xe6>
   25d0c:	e031      	b.n	25d72 <_sercom_get_default_pad+0x13e>
   25d0e:	4b2c      	ldr	r3, [pc, #176]	; (25dc0 <_sercom_get_default_pad+0x18c>)
   25d10:	e030      	b.n	25d74 <_sercom_get_default_pad+0x140>
   25d12:	4b2c      	ldr	r3, [pc, #176]	; (25dc4 <_sercom_get_default_pad+0x190>)
   25d14:	e02e      	b.n	25d74 <_sercom_get_default_pad+0x140>
   25d16:	4b2c      	ldr	r3, [pc, #176]	; (25dc8 <_sercom_get_default_pad+0x194>)
   25d18:	e02c      	b.n	25d74 <_sercom_get_default_pad+0x140>
   25d1a:	4b2c      	ldr	r3, [pc, #176]	; (25dcc <_sercom_get_default_pad+0x198>)
   25d1c:	e02a      	b.n	25d74 <_sercom_get_default_pad+0x140>
   25d1e:	1cfb      	adds	r3, r7, #3
   25d20:	781b      	ldrb	r3, [r3, #0]
   25d22:	2b01      	cmp	r3, #1
   25d24:	d00a      	beq.n	25d3c <_sercom_get_default_pad+0x108>
   25d26:	dc02      	bgt.n	25d2e <_sercom_get_default_pad+0xfa>
   25d28:	2b00      	cmp	r3, #0
   25d2a:	d005      	beq.n	25d38 <_sercom_get_default_pad+0x104>
   25d2c:	e021      	b.n	25d72 <_sercom_get_default_pad+0x13e>
   25d2e:	2b02      	cmp	r3, #2
   25d30:	d006      	beq.n	25d40 <_sercom_get_default_pad+0x10c>
   25d32:	2b03      	cmp	r3, #3
   25d34:	d006      	beq.n	25d44 <_sercom_get_default_pad+0x110>
   25d36:	e01c      	b.n	25d72 <_sercom_get_default_pad+0x13e>
   25d38:	4b25      	ldr	r3, [pc, #148]	; (25dd0 <_sercom_get_default_pad+0x19c>)
   25d3a:	e01b      	b.n	25d74 <_sercom_get_default_pad+0x140>
   25d3c:	4b25      	ldr	r3, [pc, #148]	; (25dd4 <_sercom_get_default_pad+0x1a0>)
   25d3e:	e019      	b.n	25d74 <_sercom_get_default_pad+0x140>
   25d40:	4b25      	ldr	r3, [pc, #148]	; (25dd8 <_sercom_get_default_pad+0x1a4>)
   25d42:	e017      	b.n	25d74 <_sercom_get_default_pad+0x140>
   25d44:	4b25      	ldr	r3, [pc, #148]	; (25ddc <_sercom_get_default_pad+0x1a8>)
   25d46:	e015      	b.n	25d74 <_sercom_get_default_pad+0x140>
   25d48:	1cfb      	adds	r3, r7, #3
   25d4a:	781b      	ldrb	r3, [r3, #0]
   25d4c:	2b01      	cmp	r3, #1
   25d4e:	d00a      	beq.n	25d66 <_sercom_get_default_pad+0x132>
   25d50:	dc02      	bgt.n	25d58 <_sercom_get_default_pad+0x124>
   25d52:	2b00      	cmp	r3, #0
   25d54:	d005      	beq.n	25d62 <_sercom_get_default_pad+0x12e>
   25d56:	e00c      	b.n	25d72 <_sercom_get_default_pad+0x13e>
   25d58:	2b02      	cmp	r3, #2
   25d5a:	d006      	beq.n	25d6a <_sercom_get_default_pad+0x136>
   25d5c:	2b03      	cmp	r3, #3
   25d5e:	d006      	beq.n	25d6e <_sercom_get_default_pad+0x13a>
   25d60:	e007      	b.n	25d72 <_sercom_get_default_pad+0x13e>
   25d62:	4b1f      	ldr	r3, [pc, #124]	; (25de0 <_sercom_get_default_pad+0x1ac>)
   25d64:	e006      	b.n	25d74 <_sercom_get_default_pad+0x140>
   25d66:	4b1f      	ldr	r3, [pc, #124]	; (25de4 <_sercom_get_default_pad+0x1b0>)
   25d68:	e004      	b.n	25d74 <_sercom_get_default_pad+0x140>
   25d6a:	4b1f      	ldr	r3, [pc, #124]	; (25de8 <_sercom_get_default_pad+0x1b4>)
   25d6c:	e002      	b.n	25d74 <_sercom_get_default_pad+0x140>
   25d6e:	4b1f      	ldr	r3, [pc, #124]	; (25dec <_sercom_get_default_pad+0x1b8>)
   25d70:	e000      	b.n	25d74 <_sercom_get_default_pad+0x140>
	}

	Assert(false);
	return 0;
   25d72:	2300      	movs	r3, #0
}
   25d74:	0018      	movs	r0, r3
   25d76:	46bd      	mov	sp, r7
   25d78:	b002      	add	sp, #8
   25d7a:	bd80      	pop	{r7, pc}
   25d7c:	42001000 	.word	0x42001000
   25d80:	42000800 	.word	0x42000800
   25d84:	42000c00 	.word	0x42000c00
   25d88:	42001800 	.word	0x42001800
   25d8c:	42001c00 	.word	0x42001c00
   25d90:	42001400 	.word	0x42001400
   25d94:	00040003 	.word	0x00040003
   25d98:	00050003 	.word	0x00050003
   25d9c:	00060003 	.word	0x00060003
   25da0:	00070003 	.word	0x00070003
   25da4:	00010003 	.word	0x00010003
   25da8:	001e0003 	.word	0x001e0003
   25dac:	001f0003 	.word	0x001f0003
   25db0:	00080003 	.word	0x00080003
   25db4:	00090003 	.word	0x00090003
   25db8:	000a0003 	.word	0x000a0003
   25dbc:	000b0003 	.word	0x000b0003
   25dc0:	00100003 	.word	0x00100003
   25dc4:	00110003 	.word	0x00110003
   25dc8:	00120003 	.word	0x00120003
   25dcc:	00130003 	.word	0x00130003
   25dd0:	000c0003 	.word	0x000c0003
   25dd4:	000d0003 	.word	0x000d0003
   25dd8:	000e0003 	.word	0x000e0003
   25ddc:	000f0003 	.word	0x000f0003
   25de0:	00160003 	.word	0x00160003
   25de4:	00170003 	.word	0x00170003
   25de8:	00180003 	.word	0x00180003
   25dec:	00190003 	.word	0x00190003

00025df0 <_sercom_get_sercom_inst_index>:
 *
 * \return Index of given instance.
 */
uint8_t _sercom_get_sercom_inst_index(
		Sercom *const sercom_instance)
{
   25df0:	b590      	push	{r4, r7, lr}
   25df2:	b08b      	sub	sp, #44	; 0x2c
   25df4:	af00      	add	r7, sp, #0
   25df6:	6078      	str	r0, [r7, #4]
	/* Save all available SERCOM instances for compare */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;
   25df8:	230c      	movs	r3, #12
   25dfa:	18fb      	adds	r3, r7, r3
   25dfc:	4a0f      	ldr	r2, [pc, #60]	; (25e3c <_sercom_get_sercom_inst_index+0x4c>)
   25dfe:	ca13      	ldmia	r2!, {r0, r1, r4}
   25e00:	c313      	stmia	r3!, {r0, r1, r4}
   25e02:	ca13      	ldmia	r2!, {r0, r1, r4}
   25e04:	c313      	stmia	r3!, {r0, r1, r4}

	/* Find index for sercom instance */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
   25e06:	2300      	movs	r3, #0
   25e08:	627b      	str	r3, [r7, #36]	; 0x24
   25e0a:	e00e      	b.n	25e2a <_sercom_get_sercom_inst_index+0x3a>
		if ((uintptr_t)sercom_instance == (uintptr_t)sercom_instances[i]) {
   25e0c:	230c      	movs	r3, #12
   25e0e:	18fb      	adds	r3, r7, r3
   25e10:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   25e12:	0092      	lsls	r2, r2, #2
   25e14:	58d3      	ldr	r3, [r2, r3]
   25e16:	001a      	movs	r2, r3
   25e18:	687b      	ldr	r3, [r7, #4]
   25e1a:	429a      	cmp	r2, r3
   25e1c:	d102      	bne.n	25e24 <_sercom_get_sercom_inst_index+0x34>
			return i;
   25e1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   25e20:	b2db      	uxtb	r3, r3
   25e22:	e006      	b.n	25e32 <_sercom_get_sercom_inst_index+0x42>
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
   25e24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   25e26:	3301      	adds	r3, #1
   25e28:	627b      	str	r3, [r7, #36]	; 0x24
   25e2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   25e2c:	2b05      	cmp	r3, #5
   25e2e:	d9ed      	bls.n	25e0c <_sercom_get_sercom_inst_index+0x1c>
		}
	}

	/* Invalid data given */
	Assert(false);
	return 0;
   25e30:	2300      	movs	r3, #0
}
   25e32:	0018      	movs	r0, r3
   25e34:	46bd      	mov	sp, r7
   25e36:	b00b      	add	sp, #44	; 0x2c
   25e38:	bd90      	pop	{r4, r7, pc}
   25e3a:	46c0      	nop			; (mov r8, r8)
   25e3c:	00037928 	.word	0x00037928

00025e40 <_sercom_default_handler>:
 *
 * \param[in] instance SERCOM instance used.
 */
static void _sercom_default_handler(
		const uint8_t instance)
{
   25e40:	b580      	push	{r7, lr}
   25e42:	b082      	sub	sp, #8
   25e44:	af00      	add	r7, sp, #0
   25e46:	0002      	movs	r2, r0
   25e48:	1dfb      	adds	r3, r7, #7
   25e4a:	701a      	strb	r2, [r3, #0]
	Assert(false);
}
   25e4c:	46c0      	nop			; (mov r8, r8)
   25e4e:	46bd      	mov	sp, r7
   25e50:	b002      	add	sp, #8
   25e52:	bd80      	pop	{r7, pc}

00025e54 <_sercom_set_handler>:
 * \param[in]  interrupt_handler  Pointer to instance callback handler.
 */
void _sercom_set_handler(
		const uint8_t instance,
		const sercom_handler_t interrupt_handler)
{
   25e54:	b580      	push	{r7, lr}
   25e56:	b084      	sub	sp, #16
   25e58:	af00      	add	r7, sp, #0
   25e5a:	0002      	movs	r2, r0
   25e5c:	6039      	str	r1, [r7, #0]
   25e5e:	1dfb      	adds	r3, r7, #7
   25e60:	701a      	strb	r2, [r3, #0]
	/* Initialize handlers with default handler and device instances with 0 */
	if (_handler_table_initialized == false) {
   25e62:	4b13      	ldr	r3, [pc, #76]	; (25eb0 <_sercom_set_handler+0x5c>)
   25e64:	781b      	ldrb	r3, [r3, #0]
   25e66:	2201      	movs	r2, #1
   25e68:	4053      	eors	r3, r2
   25e6a:	b2db      	uxtb	r3, r3
   25e6c:	2b00      	cmp	r3, #0
   25e6e:	d015      	beq.n	25e9c <_sercom_set_handler+0x48>
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
   25e70:	2300      	movs	r3, #0
   25e72:	60fb      	str	r3, [r7, #12]
   25e74:	e00c      	b.n	25e90 <_sercom_set_handler+0x3c>
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
   25e76:	4b0f      	ldr	r3, [pc, #60]	; (25eb4 <_sercom_set_handler+0x60>)
   25e78:	68fa      	ldr	r2, [r7, #12]
   25e7a:	0092      	lsls	r2, r2, #2
   25e7c:	490e      	ldr	r1, [pc, #56]	; (25eb8 <_sercom_set_handler+0x64>)
   25e7e:	50d1      	str	r1, [r2, r3]
			_sercom_instances[i] = NULL;
   25e80:	4b0e      	ldr	r3, [pc, #56]	; (25ebc <_sercom_set_handler+0x68>)
   25e82:	68fa      	ldr	r2, [r7, #12]
   25e84:	0092      	lsls	r2, r2, #2
   25e86:	2100      	movs	r1, #0
   25e88:	50d1      	str	r1, [r2, r3]
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
   25e8a:	68fb      	ldr	r3, [r7, #12]
   25e8c:	3301      	adds	r3, #1
   25e8e:	60fb      	str	r3, [r7, #12]
   25e90:	68fb      	ldr	r3, [r7, #12]
   25e92:	2b05      	cmp	r3, #5
   25e94:	d9ef      	bls.n	25e76 <_sercom_set_handler+0x22>
		}

		_handler_table_initialized = true;
   25e96:	4b06      	ldr	r3, [pc, #24]	; (25eb0 <_sercom_set_handler+0x5c>)
   25e98:	2201      	movs	r2, #1
   25e9a:	701a      	strb	r2, [r3, #0]
	}

	/* Save interrupt handler */
	_sercom_interrupt_handlers[instance] = interrupt_handler;
   25e9c:	1dfb      	adds	r3, r7, #7
   25e9e:	781a      	ldrb	r2, [r3, #0]
   25ea0:	4b04      	ldr	r3, [pc, #16]	; (25eb4 <_sercom_set_handler+0x60>)
   25ea2:	0092      	lsls	r2, r2, #2
   25ea4:	6839      	ldr	r1, [r7, #0]
   25ea6:	50d1      	str	r1, [r2, r3]
}
   25ea8:	46c0      	nop			; (mov r8, r8)
   25eaa:	46bd      	mov	sp, r7
   25eac:	b004      	add	sp, #16
   25eae:	bd80      	pop	{r7, pc}
   25eb0:	20003d5e 	.word	0x20003d5e
   25eb4:	20003d60 	.word	0x20003d60
   25eb8:	00025e41 	.word	0x00025e41
   25ebc:	200056a8 	.word	0x200056a8

00025ec0 <_sercom_get_interrupt_vector>:
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM6
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM7
 */
enum system_interrupt_vector _sercom_get_interrupt_vector(
		Sercom *const sercom_instance)
{
   25ec0:	b590      	push	{r4, r7, lr}
   25ec2:	b085      	sub	sp, #20
   25ec4:	af00      	add	r7, sp, #0
   25ec6:	6078      	str	r0, [r7, #4]
	const uint8_t sercom_int_vectors[SERCOM_INST_NUM] =
   25ec8:	2308      	movs	r3, #8
   25eca:	18fb      	adds	r3, r7, r3
   25ecc:	4a0b      	ldr	r2, [pc, #44]	; (25efc <_sercom_get_interrupt_vector+0x3c>)
   25ece:	6811      	ldr	r1, [r2, #0]
   25ed0:	6019      	str	r1, [r3, #0]
   25ed2:	8892      	ldrh	r2, [r2, #4]
   25ed4:	809a      	strh	r2, [r3, #4]
		{
			MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_VECT_NUM, ~)
		};

	/* Retrieve the index of the SERCOM being requested */
	uint8_t instance_index = _sercom_get_sercom_inst_index(sercom_instance);
   25ed6:	230f      	movs	r3, #15
   25ed8:	18fc      	adds	r4, r7, r3
   25eda:	687b      	ldr	r3, [r7, #4]
   25edc:	0018      	movs	r0, r3
   25ede:	4b08      	ldr	r3, [pc, #32]	; (25f00 <_sercom_get_interrupt_vector+0x40>)
   25ee0:	4798      	blx	r3
   25ee2:	0003      	movs	r3, r0
   25ee4:	7023      	strb	r3, [r4, #0]

	/* Get the vector number from the lookup table for the requested SERCOM */
	return (enum system_interrupt_vector)sercom_int_vectors[instance_index];
   25ee6:	230f      	movs	r3, #15
   25ee8:	18fb      	adds	r3, r7, r3
   25eea:	781b      	ldrb	r3, [r3, #0]
   25eec:	2208      	movs	r2, #8
   25eee:	18ba      	adds	r2, r7, r2
   25ef0:	5cd3      	ldrb	r3, [r2, r3]
   25ef2:	b25b      	sxtb	r3, r3
}
   25ef4:	0018      	movs	r0, r3
   25ef6:	46bd      	mov	sp, r7
   25ef8:	b005      	add	sp, #20
   25efa:	bd90      	pop	{r4, r7, pc}
   25efc:	00037940 	.word	0x00037940
   25f00:	00025df1 	.word	0x00025df1

00025f04 <SERCOM0_Handler>:

/** Auto-generate a set of interrupt handlers for each SERCOM in the device */
MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_HANDLER, ~)
   25f04:	b580      	push	{r7, lr}
   25f06:	af00      	add	r7, sp, #0
   25f08:	4b03      	ldr	r3, [pc, #12]	; (25f18 <SERCOM0_Handler+0x14>)
   25f0a:	681b      	ldr	r3, [r3, #0]
   25f0c:	2000      	movs	r0, #0
   25f0e:	4798      	blx	r3
   25f10:	46c0      	nop			; (mov r8, r8)
   25f12:	46bd      	mov	sp, r7
   25f14:	bd80      	pop	{r7, pc}
   25f16:	46c0      	nop			; (mov r8, r8)
   25f18:	20003d60 	.word	0x20003d60

00025f1c <SERCOM1_Handler>:
   25f1c:	b580      	push	{r7, lr}
   25f1e:	af00      	add	r7, sp, #0
   25f20:	4b03      	ldr	r3, [pc, #12]	; (25f30 <SERCOM1_Handler+0x14>)
   25f22:	685b      	ldr	r3, [r3, #4]
   25f24:	2001      	movs	r0, #1
   25f26:	4798      	blx	r3
   25f28:	46c0      	nop			; (mov r8, r8)
   25f2a:	46bd      	mov	sp, r7
   25f2c:	bd80      	pop	{r7, pc}
   25f2e:	46c0      	nop			; (mov r8, r8)
   25f30:	20003d60 	.word	0x20003d60

00025f34 <SERCOM2_Handler>:
   25f34:	b580      	push	{r7, lr}
   25f36:	af00      	add	r7, sp, #0
   25f38:	4b03      	ldr	r3, [pc, #12]	; (25f48 <SERCOM2_Handler+0x14>)
   25f3a:	689b      	ldr	r3, [r3, #8]
   25f3c:	2002      	movs	r0, #2
   25f3e:	4798      	blx	r3
   25f40:	46c0      	nop			; (mov r8, r8)
   25f42:	46bd      	mov	sp, r7
   25f44:	bd80      	pop	{r7, pc}
   25f46:	46c0      	nop			; (mov r8, r8)
   25f48:	20003d60 	.word	0x20003d60

00025f4c <SERCOM3_Handler>:
   25f4c:	b580      	push	{r7, lr}
   25f4e:	af00      	add	r7, sp, #0
   25f50:	4b03      	ldr	r3, [pc, #12]	; (25f60 <SERCOM3_Handler+0x14>)
   25f52:	68db      	ldr	r3, [r3, #12]
   25f54:	2003      	movs	r0, #3
   25f56:	4798      	blx	r3
   25f58:	46c0      	nop			; (mov r8, r8)
   25f5a:	46bd      	mov	sp, r7
   25f5c:	bd80      	pop	{r7, pc}
   25f5e:	46c0      	nop			; (mov r8, r8)
   25f60:	20003d60 	.word	0x20003d60

00025f64 <SERCOM4_Handler>:
   25f64:	b580      	push	{r7, lr}
   25f66:	af00      	add	r7, sp, #0
   25f68:	4b03      	ldr	r3, [pc, #12]	; (25f78 <SERCOM4_Handler+0x14>)
   25f6a:	691b      	ldr	r3, [r3, #16]
   25f6c:	2004      	movs	r0, #4
   25f6e:	4798      	blx	r3
   25f70:	46c0      	nop			; (mov r8, r8)
   25f72:	46bd      	mov	sp, r7
   25f74:	bd80      	pop	{r7, pc}
   25f76:	46c0      	nop			; (mov r8, r8)
   25f78:	20003d60 	.word	0x20003d60

00025f7c <SERCOM5_Handler>:
   25f7c:	b580      	push	{r7, lr}
   25f7e:	af00      	add	r7, sp, #0
   25f80:	4b03      	ldr	r3, [pc, #12]	; (25f90 <SERCOM5_Handler+0x14>)
   25f82:	695b      	ldr	r3, [r3, #20]
   25f84:	2005      	movs	r0, #5
   25f86:	4798      	blx	r3
   25f88:	46c0      	nop			; (mov r8, r8)
   25f8a:	46bd      	mov	sp, r7
   25f8c:	bd80      	pop	{r7, pc}
   25f8e:	46c0      	nop			; (mov r8, r8)
   25f90:	20003d60 	.word	0x20003d60

00025f94 <system_pinmux_get_config_defaults>:
{
   25f94:	b580      	push	{r7, lr}
   25f96:	b082      	sub	sp, #8
   25f98:	af00      	add	r7, sp, #0
   25f9a:	6078      	str	r0, [r7, #4]
	config->mux_position = SYSTEM_PINMUX_GPIO;
   25f9c:	687b      	ldr	r3, [r7, #4]
   25f9e:	2280      	movs	r2, #128	; 0x80
   25fa0:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
   25fa2:	687b      	ldr	r3, [r7, #4]
   25fa4:	2200      	movs	r2, #0
   25fa6:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
   25fa8:	687b      	ldr	r3, [r7, #4]
   25faa:	2201      	movs	r2, #1
   25fac:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
   25fae:	687b      	ldr	r3, [r7, #4]
   25fb0:	2200      	movs	r2, #0
   25fb2:	70da      	strb	r2, [r3, #3]
}
   25fb4:	46c0      	nop			; (mov r8, r8)
   25fb6:	46bd      	mov	sp, r7
   25fb8:	b002      	add	sp, #8
   25fba:	bd80      	pop	{r7, pc}

00025fbc <system_pinmux_get_group_from_gpio_pin>:
{
   25fbc:	b580      	push	{r7, lr}
   25fbe:	b084      	sub	sp, #16
   25fc0:	af00      	add	r7, sp, #0
   25fc2:	0002      	movs	r2, r0
   25fc4:	1dfb      	adds	r3, r7, #7
   25fc6:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
   25fc8:	230f      	movs	r3, #15
   25fca:	18fb      	adds	r3, r7, r3
   25fcc:	1dfa      	adds	r2, r7, #7
   25fce:	7812      	ldrb	r2, [r2, #0]
   25fd0:	09d2      	lsrs	r2, r2, #7
   25fd2:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
   25fd4:	230e      	movs	r3, #14
   25fd6:	18fb      	adds	r3, r7, r3
   25fd8:	1dfa      	adds	r2, r7, #7
   25fda:	7812      	ldrb	r2, [r2, #0]
   25fdc:	0952      	lsrs	r2, r2, #5
   25fde:	701a      	strb	r2, [r3, #0]
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
   25fe0:	4b0d      	ldr	r3, [pc, #52]	; (26018 <system_pinmux_get_group_from_gpio_pin+0x5c>)
   25fe2:	60bb      	str	r3, [r7, #8]
	if (port_index < PORT_INST_NUM) {
   25fe4:	230f      	movs	r3, #15
   25fe6:	18fb      	adds	r3, r7, r3
   25fe8:	781b      	ldrb	r3, [r3, #0]
   25fea:	2b00      	cmp	r3, #0
   25fec:	d10f      	bne.n	2600e <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
   25fee:	230f      	movs	r3, #15
   25ff0:	18fb      	adds	r3, r7, r3
   25ff2:	781b      	ldrb	r3, [r3, #0]
   25ff4:	009b      	lsls	r3, r3, #2
   25ff6:	2210      	movs	r2, #16
   25ff8:	4694      	mov	ip, r2
   25ffa:	44bc      	add	ip, r7
   25ffc:	4463      	add	r3, ip
   25ffe:	3b08      	subs	r3, #8
   26000:	681a      	ldr	r2, [r3, #0]
   26002:	230e      	movs	r3, #14
   26004:	18fb      	adds	r3, r7, r3
   26006:	781b      	ldrb	r3, [r3, #0]
   26008:	01db      	lsls	r3, r3, #7
   2600a:	18d3      	adds	r3, r2, r3
   2600c:	e000      	b.n	26010 <system_pinmux_get_group_from_gpio_pin+0x54>
		return NULL;
   2600e:	2300      	movs	r3, #0
}
   26010:	0018      	movs	r0, r3
   26012:	46bd      	mov	sp, r7
   26014:	b004      	add	sp, #16
   26016:	bd80      	pop	{r7, pc}
   26018:	41004400 	.word	0x41004400

0002601c <port_get_group_from_gpio_pin>:
{
   2601c:	b580      	push	{r7, lr}
   2601e:	b082      	sub	sp, #8
   26020:	af00      	add	r7, sp, #0
   26022:	0002      	movs	r2, r0
   26024:	1dfb      	adds	r3, r7, #7
   26026:	701a      	strb	r2, [r3, #0]
	return system_pinmux_get_group_from_gpio_pin(gpio_pin);
   26028:	1dfb      	adds	r3, r7, #7
   2602a:	781b      	ldrb	r3, [r3, #0]
   2602c:	0018      	movs	r0, r3
   2602e:	4b03      	ldr	r3, [pc, #12]	; (2603c <port_get_group_from_gpio_pin+0x20>)
   26030:	4798      	blx	r3
   26032:	0003      	movs	r3, r0
}
   26034:	0018      	movs	r0, r3
   26036:	46bd      	mov	sp, r7
   26038:	b002      	add	sp, #8
   2603a:	bd80      	pop	{r7, pc}
   2603c:	00025fbd 	.word	0x00025fbd

00026040 <port_pin_set_output_level>:
{
   26040:	b580      	push	{r7, lr}
   26042:	b084      	sub	sp, #16
   26044:	af00      	add	r7, sp, #0
   26046:	0002      	movs	r2, r0
   26048:	1dfb      	adds	r3, r7, #7
   2604a:	701a      	strb	r2, [r3, #0]
   2604c:	1dbb      	adds	r3, r7, #6
   2604e:	1c0a      	adds	r2, r1, #0
   26050:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
   26052:	1dfb      	adds	r3, r7, #7
   26054:	781b      	ldrb	r3, [r3, #0]
   26056:	0018      	movs	r0, r3
   26058:	4b0d      	ldr	r3, [pc, #52]	; (26090 <port_pin_set_output_level+0x50>)
   2605a:	4798      	blx	r3
   2605c:	0003      	movs	r3, r0
   2605e:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
   26060:	1dfb      	adds	r3, r7, #7
   26062:	781b      	ldrb	r3, [r3, #0]
   26064:	221f      	movs	r2, #31
   26066:	4013      	ands	r3, r2
   26068:	2201      	movs	r2, #1
   2606a:	409a      	lsls	r2, r3
   2606c:	0013      	movs	r3, r2
   2606e:	60bb      	str	r3, [r7, #8]
	if (level) {
   26070:	1dbb      	adds	r3, r7, #6
   26072:	781b      	ldrb	r3, [r3, #0]
   26074:	2b00      	cmp	r3, #0
   26076:	d003      	beq.n	26080 <port_pin_set_output_level+0x40>
		port_base->OUTSET.reg = pin_mask;
   26078:	68fb      	ldr	r3, [r7, #12]
   2607a:	68ba      	ldr	r2, [r7, #8]
   2607c:	619a      	str	r2, [r3, #24]
}
   2607e:	e002      	b.n	26086 <port_pin_set_output_level+0x46>
		port_base->OUTCLR.reg = pin_mask;
   26080:	68fb      	ldr	r3, [r7, #12]
   26082:	68ba      	ldr	r2, [r7, #8]
   26084:	615a      	str	r2, [r3, #20]
}
   26086:	46c0      	nop			; (mov r8, r8)
   26088:	46bd      	mov	sp, r7
   2608a:	b004      	add	sp, #16
   2608c:	bd80      	pop	{r7, pc}
   2608e:	46c0      	nop			; (mov r8, r8)
   26090:	0002601d 	.word	0x0002601d

00026094 <system_gclk_chan_get_config_defaults>:
{
   26094:	b580      	push	{r7, lr}
   26096:	b082      	sub	sp, #8
   26098:	af00      	add	r7, sp, #0
   2609a:	6078      	str	r0, [r7, #4]
	config->source_generator = GCLK_GENERATOR_0;
   2609c:	687b      	ldr	r3, [r7, #4]
   2609e:	2200      	movs	r2, #0
   260a0:	701a      	strb	r2, [r3, #0]
}
   260a2:	46c0      	nop			; (mov r8, r8)
   260a4:	46bd      	mov	sp, r7
   260a6:	b002      	add	sp, #8
   260a8:	bd80      	pop	{r7, pc}
	...

000260ac <system_apb_clock_set_mask>:
{
   260ac:	b580      	push	{r7, lr}
   260ae:	b082      	sub	sp, #8
   260b0:	af00      	add	r7, sp, #0
   260b2:	0002      	movs	r2, r0
   260b4:	6039      	str	r1, [r7, #0]
   260b6:	1dfb      	adds	r3, r7, #7
   260b8:	701a      	strb	r2, [r3, #0]
	switch (bus) {
   260ba:	1dfb      	adds	r3, r7, #7
   260bc:	781b      	ldrb	r3, [r3, #0]
   260be:	2b01      	cmp	r3, #1
   260c0:	d00a      	beq.n	260d8 <system_apb_clock_set_mask+0x2c>
   260c2:	2b02      	cmp	r3, #2
   260c4:	d00f      	beq.n	260e6 <system_apb_clock_set_mask+0x3a>
   260c6:	2b00      	cmp	r3, #0
   260c8:	d114      	bne.n	260f4 <system_apb_clock_set_mask+0x48>
			PM->APBAMASK.reg |= mask;
   260ca:	4b0e      	ldr	r3, [pc, #56]	; (26104 <system_apb_clock_set_mask+0x58>)
   260cc:	4a0d      	ldr	r2, [pc, #52]	; (26104 <system_apb_clock_set_mask+0x58>)
   260ce:	6991      	ldr	r1, [r2, #24]
   260d0:	683a      	ldr	r2, [r7, #0]
   260d2:	430a      	orrs	r2, r1
   260d4:	619a      	str	r2, [r3, #24]
			break;
   260d6:	e00f      	b.n	260f8 <system_apb_clock_set_mask+0x4c>
			PM->APBBMASK.reg |= mask;
   260d8:	4b0a      	ldr	r3, [pc, #40]	; (26104 <system_apb_clock_set_mask+0x58>)
   260da:	4a0a      	ldr	r2, [pc, #40]	; (26104 <system_apb_clock_set_mask+0x58>)
   260dc:	69d1      	ldr	r1, [r2, #28]
   260de:	683a      	ldr	r2, [r7, #0]
   260e0:	430a      	orrs	r2, r1
   260e2:	61da      	str	r2, [r3, #28]
			break;
   260e4:	e008      	b.n	260f8 <system_apb_clock_set_mask+0x4c>
			PM->APBCMASK.reg |= mask;
   260e6:	4b07      	ldr	r3, [pc, #28]	; (26104 <system_apb_clock_set_mask+0x58>)
   260e8:	4a06      	ldr	r2, [pc, #24]	; (26104 <system_apb_clock_set_mask+0x58>)
   260ea:	6a11      	ldr	r1, [r2, #32]
   260ec:	683a      	ldr	r2, [r7, #0]
   260ee:	430a      	orrs	r2, r1
   260f0:	621a      	str	r2, [r3, #32]
			break;
   260f2:	e001      	b.n	260f8 <system_apb_clock_set_mask+0x4c>
			return STATUS_ERR_INVALID_ARG;
   260f4:	2317      	movs	r3, #23
   260f6:	e000      	b.n	260fa <system_apb_clock_set_mask+0x4e>
	return STATUS_OK;
   260f8:	2300      	movs	r3, #0
}
   260fa:	0018      	movs	r0, r3
   260fc:	46bd      	mov	sp, r7
   260fe:	b002      	add	sp, #8
   26100:	bd80      	pop	{r7, pc}
   26102:	46c0      	nop			; (mov r8, r8)
   26104:	40000400 	.word	0x40000400

00026108 <system_is_debugger_present>:
{
   26108:	b580      	push	{r7, lr}
   2610a:	af00      	add	r7, sp, #0
	return DSU->STATUSB.reg & DSU_STATUSB_DBGPRES;
   2610c:	4b05      	ldr	r3, [pc, #20]	; (26124 <system_is_debugger_present+0x1c>)
   2610e:	789b      	ldrb	r3, [r3, #2]
   26110:	b2db      	uxtb	r3, r3
   26112:	001a      	movs	r2, r3
   26114:	2302      	movs	r3, #2
   26116:	4013      	ands	r3, r2
   26118:	1e5a      	subs	r2, r3, #1
   2611a:	4193      	sbcs	r3, r2
   2611c:	b2db      	uxtb	r3, r3
}
   2611e:	0018      	movs	r0, r3
   26120:	46bd      	mov	sp, r7
   26122:	bd80      	pop	{r7, pc}
   26124:	41002000 	.word	0x41002000

00026128 <system_interrupt_enable>:
{
   26128:	b580      	push	{r7, lr}
   2612a:	b082      	sub	sp, #8
   2612c:	af00      	add	r7, sp, #0
   2612e:	0002      	movs	r2, r0
   26130:	1dfb      	adds	r3, r7, #7
   26132:	701a      	strb	r2, [r3, #0]
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
   26134:	4b06      	ldr	r3, [pc, #24]	; (26150 <system_interrupt_enable+0x28>)
   26136:	1dfa      	adds	r2, r7, #7
   26138:	7812      	ldrb	r2, [r2, #0]
   2613a:	0011      	movs	r1, r2
   2613c:	221f      	movs	r2, #31
   2613e:	400a      	ands	r2, r1
   26140:	2101      	movs	r1, #1
   26142:	4091      	lsls	r1, r2
   26144:	000a      	movs	r2, r1
   26146:	601a      	str	r2, [r3, #0]
}
   26148:	46c0      	nop			; (mov r8, r8)
   2614a:	46bd      	mov	sp, r7
   2614c:	b002      	add	sp, #8
   2614e:	bd80      	pop	{r7, pc}
   26150:	e000e100 	.word	0xe000e100

00026154 <system_interrupt_disable>:
{
   26154:	b580      	push	{r7, lr}
   26156:	b082      	sub	sp, #8
   26158:	af00      	add	r7, sp, #0
   2615a:	0002      	movs	r2, r0
   2615c:	1dfb      	adds	r3, r7, #7
   2615e:	701a      	strb	r2, [r3, #0]
	NVIC->ICER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
   26160:	4a07      	ldr	r2, [pc, #28]	; (26180 <system_interrupt_disable+0x2c>)
   26162:	1dfb      	adds	r3, r7, #7
   26164:	781b      	ldrb	r3, [r3, #0]
   26166:	0019      	movs	r1, r3
   26168:	231f      	movs	r3, #31
   2616a:	400b      	ands	r3, r1
   2616c:	2101      	movs	r1, #1
   2616e:	4099      	lsls	r1, r3
   26170:	000b      	movs	r3, r1
   26172:	0019      	movs	r1, r3
   26174:	2380      	movs	r3, #128	; 0x80
   26176:	50d1      	str	r1, [r2, r3]
}
   26178:	46c0      	nop			; (mov r8, r8)
   2617a:	46bd      	mov	sp, r7
   2617c:	b002      	add	sp, #8
   2617e:	bd80      	pop	{r7, pc}
   26180:	e000e100 	.word	0xe000e100

00026184 <spi_is_syncing>:
{
   26184:	b580      	push	{r7, lr}
   26186:	b084      	sub	sp, #16
   26188:	af00      	add	r7, sp, #0
   2618a:	6078      	str	r0, [r7, #4]
	SercomSpi *const spi_module = &(module->hw->SPI);
   2618c:	687b      	ldr	r3, [r7, #4]
   2618e:	681b      	ldr	r3, [r3, #0]
   26190:	60fb      	str	r3, [r7, #12]
	return (spi_module->SYNCBUSY.reg);
   26192:	68fb      	ldr	r3, [r7, #12]
   26194:	69db      	ldr	r3, [r3, #28]
   26196:	1e5a      	subs	r2, r3, #1
   26198:	4193      	sbcs	r3, r2
   2619a:	b2db      	uxtb	r3, r3
}
   2619c:	0018      	movs	r0, r3
   2619e:	46bd      	mov	sp, r7
   261a0:	b004      	add	sp, #16
   261a2:	bd80      	pop	{r7, pc}

000261a4 <spi_enable>:
{
   261a4:	b580      	push	{r7, lr}
   261a6:	b084      	sub	sp, #16
   261a8:	af00      	add	r7, sp, #0
   261aa:	6078      	str	r0, [r7, #4]
	SercomSpi *const spi_module = &(module->hw->SPI);
   261ac:	687b      	ldr	r3, [r7, #4]
   261ae:	681b      	ldr	r3, [r3, #0]
   261b0:	60fb      	str	r3, [r7, #12]
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
   261b2:	687b      	ldr	r3, [r7, #4]
   261b4:	681b      	ldr	r3, [r3, #0]
   261b6:	0018      	movs	r0, r3
   261b8:	4b0b      	ldr	r3, [pc, #44]	; (261e8 <spi_enable+0x44>)
   261ba:	4798      	blx	r3
   261bc:	0003      	movs	r3, r0
   261be:	0018      	movs	r0, r3
   261c0:	4b0a      	ldr	r3, [pc, #40]	; (261ec <spi_enable+0x48>)
   261c2:	4798      	blx	r3
	while (spi_is_syncing(module)) {
   261c4:	46c0      	nop			; (mov r8, r8)
   261c6:	687b      	ldr	r3, [r7, #4]
   261c8:	0018      	movs	r0, r3
   261ca:	4b09      	ldr	r3, [pc, #36]	; (261f0 <spi_enable+0x4c>)
   261cc:	4798      	blx	r3
   261ce:	1e03      	subs	r3, r0, #0
   261d0:	d1f9      	bne.n	261c6 <spi_enable+0x22>
	spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_ENABLE;
   261d2:	68fb      	ldr	r3, [r7, #12]
   261d4:	681b      	ldr	r3, [r3, #0]
   261d6:	2202      	movs	r2, #2
   261d8:	431a      	orrs	r2, r3
   261da:	68fb      	ldr	r3, [r7, #12]
   261dc:	601a      	str	r2, [r3, #0]
}
   261de:	46c0      	nop			; (mov r8, r8)
   261e0:	46bd      	mov	sp, r7
   261e2:	b004      	add	sp, #16
   261e4:	bd80      	pop	{r7, pc}
   261e6:	46c0      	nop			; (mov r8, r8)
   261e8:	00025ec1 	.word	0x00025ec1
   261ec:	00026129 	.word	0x00026129
   261f0:	00026185 	.word	0x00026185

000261f4 <spi_disable>:
{
   261f4:	b580      	push	{r7, lr}
   261f6:	b084      	sub	sp, #16
   261f8:	af00      	add	r7, sp, #0
   261fa:	6078      	str	r0, [r7, #4]
	SercomSpi *const spi_module = &(module->hw->SPI);
   261fc:	687b      	ldr	r3, [r7, #4]
   261fe:	681b      	ldr	r3, [r3, #0]
   26200:	60fb      	str	r3, [r7, #12]
	system_interrupt_disable(_sercom_get_interrupt_vector(module->hw));
   26202:	687b      	ldr	r3, [r7, #4]
   26204:	681b      	ldr	r3, [r3, #0]
   26206:	0018      	movs	r0, r3
   26208:	4b0e      	ldr	r3, [pc, #56]	; (26244 <spi_disable+0x50>)
   2620a:	4798      	blx	r3
   2620c:	0003      	movs	r3, r0
   2620e:	0018      	movs	r0, r3
   26210:	4b0d      	ldr	r3, [pc, #52]	; (26248 <spi_disable+0x54>)
   26212:	4798      	blx	r3
	while (spi_is_syncing(module)) {
   26214:	46c0      	nop			; (mov r8, r8)
   26216:	687b      	ldr	r3, [r7, #4]
   26218:	0018      	movs	r0, r3
   2621a:	4b0c      	ldr	r3, [pc, #48]	; (2624c <spi_disable+0x58>)
   2621c:	4798      	blx	r3
   2621e:	1e03      	subs	r3, r0, #0
   26220:	d1f9      	bne.n	26216 <spi_disable+0x22>
	spi_module->INTENCLR.reg = SERCOM_SPI_INTENCLR_MASK;
   26222:	68fb      	ldr	r3, [r7, #12]
   26224:	228f      	movs	r2, #143	; 0x8f
   26226:	751a      	strb	r2, [r3, #20]
	spi_module->INTFLAG.reg = SERCOM_SPI_INTFLAG_MASK;
   26228:	68fb      	ldr	r3, [r7, #12]
   2622a:	228f      	movs	r2, #143	; 0x8f
   2622c:	761a      	strb	r2, [r3, #24]
	spi_module->CTRLA.reg &= ~SERCOM_SPI_CTRLA_ENABLE;
   2622e:	68fb      	ldr	r3, [r7, #12]
   26230:	681b      	ldr	r3, [r3, #0]
   26232:	2202      	movs	r2, #2
   26234:	4393      	bics	r3, r2
   26236:	001a      	movs	r2, r3
   26238:	68fb      	ldr	r3, [r7, #12]
   2623a:	601a      	str	r2, [r3, #0]
}
   2623c:	46c0      	nop			; (mov r8, r8)
   2623e:	46bd      	mov	sp, r7
   26240:	b004      	add	sp, #16
   26242:	bd80      	pop	{r7, pc}
   26244:	00025ec1 	.word	0x00025ec1
   26248:	00026155 	.word	0x00026155
   2624c:	00026185 	.word	0x00026185

00026250 <spi_is_write_complete>:
{
   26250:	b580      	push	{r7, lr}
   26252:	b084      	sub	sp, #16
   26254:	af00      	add	r7, sp, #0
   26256:	6078      	str	r0, [r7, #4]
	SercomSpi *const spi_module = &(module->hw->SPI);
   26258:	687b      	ldr	r3, [r7, #4]
   2625a:	681b      	ldr	r3, [r3, #0]
   2625c:	60fb      	str	r3, [r7, #12]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
   2625e:	68fb      	ldr	r3, [r7, #12]
   26260:	7e1b      	ldrb	r3, [r3, #24]
   26262:	b2db      	uxtb	r3, r3
   26264:	001a      	movs	r2, r3
   26266:	2302      	movs	r3, #2
   26268:	4013      	ands	r3, r2
   2626a:	1e5a      	subs	r2, r3, #1
   2626c:	4193      	sbcs	r3, r2
   2626e:	b2db      	uxtb	r3, r3
}
   26270:	0018      	movs	r0, r3
   26272:	46bd      	mov	sp, r7
   26274:	b004      	add	sp, #16
   26276:	bd80      	pop	{r7, pc}

00026278 <spi_is_ready_to_write>:
{
   26278:	b580      	push	{r7, lr}
   2627a:	b084      	sub	sp, #16
   2627c:	af00      	add	r7, sp, #0
   2627e:	6078      	str	r0, [r7, #4]
	SercomSpi *const spi_module = &(module->hw->SPI);
   26280:	687b      	ldr	r3, [r7, #4]
   26282:	681b      	ldr	r3, [r3, #0]
   26284:	60fb      	str	r3, [r7, #12]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
   26286:	68fb      	ldr	r3, [r7, #12]
   26288:	7e1b      	ldrb	r3, [r3, #24]
   2628a:	b2db      	uxtb	r3, r3
   2628c:	001a      	movs	r2, r3
   2628e:	2301      	movs	r3, #1
   26290:	4013      	ands	r3, r2
   26292:	1e5a      	subs	r2, r3, #1
   26294:	4193      	sbcs	r3, r2
   26296:	b2db      	uxtb	r3, r3
}
   26298:	0018      	movs	r0, r3
   2629a:	46bd      	mov	sp, r7
   2629c:	b004      	add	sp, #16
   2629e:	bd80      	pop	{r7, pc}

000262a0 <spi_is_ready_to_read>:
{
   262a0:	b580      	push	{r7, lr}
   262a2:	b084      	sub	sp, #16
   262a4:	af00      	add	r7, sp, #0
   262a6:	6078      	str	r0, [r7, #4]
	SercomSpi *const spi_module = &(module->hw->SPI);
   262a8:	687b      	ldr	r3, [r7, #4]
   262aa:	681b      	ldr	r3, [r3, #0]
   262ac:	60fb      	str	r3, [r7, #12]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
   262ae:	68fb      	ldr	r3, [r7, #12]
   262b0:	7e1b      	ldrb	r3, [r3, #24]
   262b2:	b2db      	uxtb	r3, r3
   262b4:	001a      	movs	r2, r3
   262b6:	2304      	movs	r3, #4
   262b8:	4013      	ands	r3, r2
   262ba:	1e5a      	subs	r2, r3, #1
   262bc:	4193      	sbcs	r3, r2
   262be:	b2db      	uxtb	r3, r3
}
   262c0:	0018      	movs	r0, r3
   262c2:	46bd      	mov	sp, r7
   262c4:	b004      	add	sp, #16
   262c6:	bd80      	pop	{r7, pc}

000262c8 <spi_write>:
{
   262c8:	b580      	push	{r7, lr}
   262ca:	b084      	sub	sp, #16
   262cc:	af00      	add	r7, sp, #0
   262ce:	6078      	str	r0, [r7, #4]
   262d0:	000a      	movs	r2, r1
   262d2:	1cbb      	adds	r3, r7, #2
   262d4:	801a      	strh	r2, [r3, #0]
	SercomSpi *const spi_module = &(module->hw->SPI);
   262d6:	687b      	ldr	r3, [r7, #4]
   262d8:	681b      	ldr	r3, [r3, #0]
   262da:	60fb      	str	r3, [r7, #12]
	if (!spi_is_ready_to_write(module)) {
   262dc:	687b      	ldr	r3, [r7, #4]
   262de:	0018      	movs	r0, r3
   262e0:	4b0a      	ldr	r3, [pc, #40]	; (2630c <spi_write+0x44>)
   262e2:	4798      	blx	r3
   262e4:	0003      	movs	r3, r0
   262e6:	001a      	movs	r2, r3
   262e8:	2301      	movs	r3, #1
   262ea:	4053      	eors	r3, r2
   262ec:	b2db      	uxtb	r3, r3
   262ee:	2b00      	cmp	r3, #0
   262f0:	d001      	beq.n	262f6 <spi_write+0x2e>
		return STATUS_BUSY;
   262f2:	2305      	movs	r3, #5
   262f4:	e006      	b.n	26304 <spi_write+0x3c>
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
   262f6:	1cbb      	adds	r3, r7, #2
   262f8:	881b      	ldrh	r3, [r3, #0]
   262fa:	05db      	lsls	r3, r3, #23
   262fc:	0dda      	lsrs	r2, r3, #23
   262fe:	68fb      	ldr	r3, [r7, #12]
   26300:	629a      	str	r2, [r3, #40]	; 0x28
	return STATUS_OK;
   26302:	2300      	movs	r3, #0
}
   26304:	0018      	movs	r0, r3
   26306:	46bd      	mov	sp, r7
   26308:	b004      	add	sp, #16
   2630a:	bd80      	pop	{r7, pc}
   2630c:	00026279 	.word	0x00026279

00026310 <spi_read>:
{
   26310:	b580      	push	{r7, lr}
   26312:	b084      	sub	sp, #16
   26314:	af00      	add	r7, sp, #0
   26316:	6078      	str	r0, [r7, #4]
   26318:	6039      	str	r1, [r7, #0]
	SercomSpi *const spi_module = &(module->hw->SPI);
   2631a:	687b      	ldr	r3, [r7, #4]
   2631c:	681b      	ldr	r3, [r3, #0]
   2631e:	60bb      	str	r3, [r7, #8]
	if (!spi_is_ready_to_read(module)) {
   26320:	687b      	ldr	r3, [r7, #4]
   26322:	0018      	movs	r0, r3
   26324:	4b1b      	ldr	r3, [pc, #108]	; (26394 <spi_read+0x84>)
   26326:	4798      	blx	r3
   26328:	0003      	movs	r3, r0
   2632a:	001a      	movs	r2, r3
   2632c:	2301      	movs	r3, #1
   2632e:	4053      	eors	r3, r2
   26330:	b2db      	uxtb	r3, r3
   26332:	2b00      	cmp	r3, #0
   26334:	d001      	beq.n	2633a <spi_read+0x2a>
		return STATUS_ERR_IO;
   26336:	2310      	movs	r3, #16
   26338:	e027      	b.n	2638a <spi_read+0x7a>
	enum status_code retval = STATUS_OK;
   2633a:	230f      	movs	r3, #15
   2633c:	18fb      	adds	r3, r7, r3
   2633e:	2200      	movs	r2, #0
   26340:	701a      	strb	r2, [r3, #0]
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
   26342:	68bb      	ldr	r3, [r7, #8]
   26344:	8b5b      	ldrh	r3, [r3, #26]
   26346:	b29b      	uxth	r3, r3
   26348:	001a      	movs	r2, r3
   2634a:	2304      	movs	r3, #4
   2634c:	4013      	ands	r3, r2
   2634e:	d006      	beq.n	2635e <spi_read+0x4e>
		retval = STATUS_ERR_OVERFLOW;
   26350:	230f      	movs	r3, #15
   26352:	18fb      	adds	r3, r7, r3
   26354:	221e      	movs	r2, #30
   26356:	701a      	strb	r2, [r3, #0]
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
   26358:	68bb      	ldr	r3, [r7, #8]
   2635a:	2204      	movs	r2, #4
   2635c:	835a      	strh	r2, [r3, #26]
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
   2635e:	687b      	ldr	r3, [r7, #4]
   26360:	799b      	ldrb	r3, [r3, #6]
   26362:	2b01      	cmp	r3, #1
   26364:	d108      	bne.n	26378 <spi_read+0x68>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
   26366:	68bb      	ldr	r3, [r7, #8]
   26368:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   2636a:	b29b      	uxth	r3, r3
   2636c:	05db      	lsls	r3, r3, #23
   2636e:	0ddb      	lsrs	r3, r3, #23
   26370:	b29a      	uxth	r2, r3
   26372:	683b      	ldr	r3, [r7, #0]
   26374:	801a      	strh	r2, [r3, #0]
   26376:	e005      	b.n	26384 <spi_read+0x74>
		*rx_data = (uint8_t)spi_module->DATA.reg;
   26378:	68bb      	ldr	r3, [r7, #8]
   2637a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   2637c:	b2db      	uxtb	r3, r3
   2637e:	b29a      	uxth	r2, r3
   26380:	683b      	ldr	r3, [r7, #0]
   26382:	801a      	strh	r2, [r3, #0]
	return retval;
   26384:	230f      	movs	r3, #15
   26386:	18fb      	adds	r3, r7, r3
   26388:	781b      	ldrb	r3, [r3, #0]
}
   2638a:	0018      	movs	r0, r3
   2638c:	46bd      	mov	sp, r7
   2638e:	b004      	add	sp, #16
   26390:	bd80      	pop	{r7, pc}
   26392:	46c0      	nop			; (mov r8, r8)
   26394:	000262a1 	.word	0x000262a1

00026398 <spi_set_baudrate>:
 * \retval STATUS_OK               If the configuration was written
 */
enum status_code spi_set_baudrate(
		struct spi_module *const module,
		uint32_t baudrate)
{
   26398:	b590      	push	{r4, r7, lr}
   2639a:	b089      	sub	sp, #36	; 0x24
   2639c:	af00      	add	r7, sp, #0
   2639e:	6078      	str	r0, [r7, #4]
   263a0:	6039      	str	r1, [r7, #0]
	Assert(module);
	Assert(baudrate);
	Assert(module->hw);

	/* Value to write to BAUD register */
	uint16_t baud = 0;
   263a2:	230c      	movs	r3, #12
   263a4:	18fb      	adds	r3, r7, r3
   263a6:	2200      	movs	r2, #0
   263a8:	801a      	strh	r2, [r3, #0]

	SercomSpi *const spi_module = &(module->hw->SPI);
   263aa:	687b      	ldr	r3, [r7, #4]
   263ac:	681b      	ldr	r3, [r3, #0]
   263ae:	61fb      	str	r3, [r7, #28]

	/* Disable the module */
	spi_disable(module);
   263b0:	687b      	ldr	r3, [r7, #4]
   263b2:	0018      	movs	r0, r3
   263b4:	4b24      	ldr	r3, [pc, #144]	; (26448 <spi_set_baudrate+0xb0>)
   263b6:	4798      	blx	r3

	while (spi_is_syncing(module)) {
   263b8:	46c0      	nop			; (mov r8, r8)
   263ba:	687b      	ldr	r3, [r7, #4]
   263bc:	0018      	movs	r0, r3
   263be:	4b23      	ldr	r3, [pc, #140]	; (2644c <spi_set_baudrate+0xb4>)
   263c0:	4798      	blx	r3
   263c2:	1e03      	subs	r3, r0, #0
   263c4:	d1f9      	bne.n	263ba <spi_set_baudrate+0x22>
		/* Wait until the synchronization is complete */
	}

	/* Find frequency of the internal SERCOMi_GCLK_ID_CORE */
	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
   263c6:	687b      	ldr	r3, [r7, #4]
   263c8:	681b      	ldr	r3, [r3, #0]
   263ca:	0018      	movs	r0, r3
   263cc:	4b20      	ldr	r3, [pc, #128]	; (26450 <spi_set_baudrate+0xb8>)
   263ce:	4798      	blx	r3
   263d0:	0003      	movs	r3, r0
   263d2:	61bb      	str	r3, [r7, #24]
	uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
   263d4:	69bb      	ldr	r3, [r7, #24]
   263d6:	3314      	adds	r3, #20
   263d8:	617b      	str	r3, [r7, #20]
	uint32_t internal_clock = system_gclk_chan_get_hz(gclk_index);
   263da:	697b      	ldr	r3, [r7, #20]
   263dc:	b2db      	uxtb	r3, r3
   263de:	0018      	movs	r0, r3
   263e0:	4b1c      	ldr	r3, [pc, #112]	; (26454 <spi_set_baudrate+0xbc>)
   263e2:	4798      	blx	r3
   263e4:	0003      	movs	r3, r0
   263e6:	613b      	str	r3, [r7, #16]

	/* Get baud value, based on baudrate and the internal clock frequency */
	enum status_code error_code = _sercom_get_sync_baud_val(
   263e8:	230f      	movs	r3, #15
   263ea:	18fc      	adds	r4, r7, r3
   263ec:	230c      	movs	r3, #12
   263ee:	18fa      	adds	r2, r7, r3
   263f0:	6939      	ldr	r1, [r7, #16]
   263f2:	683b      	ldr	r3, [r7, #0]
   263f4:	0018      	movs	r0, r3
   263f6:	4b18      	ldr	r3, [pc, #96]	; (26458 <spi_set_baudrate+0xc0>)
   263f8:	4798      	blx	r3
   263fa:	0003      	movs	r3, r0
   263fc:	7023      	strb	r3, [r4, #0]
			baudrate, internal_clock, &baud);

	if (error_code != STATUS_OK) {
   263fe:	230f      	movs	r3, #15
   26400:	18fb      	adds	r3, r7, r3
   26402:	781b      	ldrb	r3, [r3, #0]
   26404:	2b00      	cmp	r3, #0
   26406:	d001      	beq.n	2640c <spi_set_baudrate+0x74>
		/* Baud rate calculation error, return status code */
		return STATUS_ERR_INVALID_ARG;
   26408:	2317      	movs	r3, #23
   2640a:	e018      	b.n	2643e <spi_set_baudrate+0xa6>
	}

	spi_module->BAUD.reg = (uint8_t)baud;
   2640c:	230c      	movs	r3, #12
   2640e:	18fb      	adds	r3, r7, r3
   26410:	881b      	ldrh	r3, [r3, #0]
   26412:	b2da      	uxtb	r2, r3
   26414:	69fb      	ldr	r3, [r7, #28]
   26416:	731a      	strb	r2, [r3, #12]

	while (spi_is_syncing(module)) {
   26418:	46c0      	nop			; (mov r8, r8)
   2641a:	687b      	ldr	r3, [r7, #4]
   2641c:	0018      	movs	r0, r3
   2641e:	4b0b      	ldr	r3, [pc, #44]	; (2644c <spi_set_baudrate+0xb4>)
   26420:	4798      	blx	r3
   26422:	1e03      	subs	r3, r0, #0
   26424:	d1f9      	bne.n	2641a <spi_set_baudrate+0x82>
		/* Wait until the synchronization is complete */
	}

	/* Enable the module */
	spi_enable(module);
   26426:	687b      	ldr	r3, [r7, #4]
   26428:	0018      	movs	r0, r3
   2642a:	4b0c      	ldr	r3, [pc, #48]	; (2645c <spi_set_baudrate+0xc4>)
   2642c:	4798      	blx	r3

	while (spi_is_syncing(module)) {
   2642e:	46c0      	nop			; (mov r8, r8)
   26430:	687b      	ldr	r3, [r7, #4]
   26432:	0018      	movs	r0, r3
   26434:	4b05      	ldr	r3, [pc, #20]	; (2644c <spi_set_baudrate+0xb4>)
   26436:	4798      	blx	r3
   26438:	1e03      	subs	r3, r0, #0
   2643a:	d1f9      	bne.n	26430 <spi_set_baudrate+0x98>
		/* Wait until the synchronization is complete */
	}

	return STATUS_OK;
   2643c:	2300      	movs	r3, #0
}
   2643e:	0018      	movs	r0, r3
   26440:	46bd      	mov	sp, r7
   26442:	b009      	add	sp, #36	; 0x24
   26444:	bd90      	pop	{r4, r7, pc}
   26446:	46c0      	nop			; (mov r8, r8)
   26448:	000261f5 	.word	0x000261f5
   2644c:	00026185 	.word	0x00026185
   26450:	00025df1 	.word	0x00025df1
   26454:	000287a5 	.word	0x000287a5
   26458:	0002596b 	.word	0x0002596b
   2645c:	000261a5 	.word	0x000261a5

00026460 <_spi_set_config>:
 * \retval STATUS_OK               If the configuration was written
 */
static enum status_code _spi_set_config(
		struct spi_module *const module,
		const struct spi_config *const config)
{
   26460:	b590      	push	{r4, r7, lr}
   26462:	b093      	sub	sp, #76	; 0x4c
   26464:	af00      	add	r7, sp, #0
   26466:	6078      	str	r0, [r7, #4]
   26468:	6039      	str	r1, [r7, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(config);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
   2646a:	687b      	ldr	r3, [r7, #4]
   2646c:	681b      	ldr	r3, [r3, #0]
   2646e:	637b      	str	r3, [r7, #52]	; 0x34
	Sercom *const hw = module->hw;
   26470:	687b      	ldr	r3, [r7, #4]
   26472:	681b      	ldr	r3, [r3, #0]
   26474:	633b      	str	r3, [r7, #48]	; 0x30

	struct system_pinmux_config pin_conf;
	system_pinmux_get_config_defaults(&pin_conf);
   26476:	231c      	movs	r3, #28
   26478:	18fb      	adds	r3, r7, r3
   2647a:	0018      	movs	r0, r3
   2647c:	4b75      	ldr	r3, [pc, #468]	; (26654 <_spi_set_config+0x1f4>)
   2647e:	4798      	blx	r3
	pin_conf.direction = SYSTEM_PINMUX_PIN_DIR_INPUT;
   26480:	231c      	movs	r3, #28
   26482:	18fb      	adds	r3, r7, r3
   26484:	2200      	movs	r2, #0
   26486:	705a      	strb	r2, [r3, #1]
	if(config->mode == SPI_MODE_SLAVE) {
   26488:	683b      	ldr	r3, [r7, #0]
   2648a:	781b      	ldrb	r3, [r3, #0]
   2648c:	2b00      	cmp	r3, #0
   2648e:	d103      	bne.n	26498 <_spi_set_config+0x38>
		pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
   26490:	231c      	movs	r3, #28
   26492:	18fb      	adds	r3, r7, r3
   26494:	2200      	movs	r2, #0
   26496:	709a      	strb	r2, [r3, #2]
	}

	uint32_t pad_pinmuxes[] = {
			config->pinmux_pad0, config->pinmux_pad1,
   26498:	683b      	ldr	r3, [r7, #0]
   2649a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	uint32_t pad_pinmuxes[] = {
   2649c:	230c      	movs	r3, #12
   2649e:	18fb      	adds	r3, r7, r3
   264a0:	601a      	str	r2, [r3, #0]
			config->pinmux_pad0, config->pinmux_pad1,
   264a2:	683b      	ldr	r3, [r7, #0]
   264a4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
	uint32_t pad_pinmuxes[] = {
   264a6:	230c      	movs	r3, #12
   264a8:	18fb      	adds	r3, r7, r3
   264aa:	605a      	str	r2, [r3, #4]
			config->pinmux_pad2, config->pinmux_pad3
   264ac:	683b      	ldr	r3, [r7, #0]
   264ae:	6b1a      	ldr	r2, [r3, #48]	; 0x30
	uint32_t pad_pinmuxes[] = {
   264b0:	230c      	movs	r3, #12
   264b2:	18fb      	adds	r3, r7, r3
   264b4:	609a      	str	r2, [r3, #8]
			config->pinmux_pad2, config->pinmux_pad3
   264b6:	683b      	ldr	r3, [r7, #0]
   264b8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
	uint32_t pad_pinmuxes[] = {
   264ba:	230c      	movs	r3, #12
   264bc:	18fb      	adds	r3, r7, r3
   264be:	60da      	str	r2, [r3, #12]
		};

	/* Configure the SERCOM pins according to the user configuration */
	for (uint8_t pad = 0; pad < 4; pad++) {
   264c0:	2347      	movs	r3, #71	; 0x47
   264c2:	18fb      	adds	r3, r7, r3
   264c4:	2200      	movs	r2, #0
   264c6:	701a      	strb	r2, [r3, #0]
   264c8:	e02c      	b.n	26524 <_spi_set_config+0xc4>
		uint32_t current_pinmux = pad_pinmuxes[pad];
   264ca:	2347      	movs	r3, #71	; 0x47
   264cc:	18fb      	adds	r3, r7, r3
   264ce:	781a      	ldrb	r2, [r3, #0]
   264d0:	230c      	movs	r3, #12
   264d2:	18fb      	adds	r3, r7, r3
   264d4:	0092      	lsls	r2, r2, #2
   264d6:	58d3      	ldr	r3, [r2, r3]
   264d8:	643b      	str	r3, [r7, #64]	; 0x40

		if (current_pinmux == PINMUX_DEFAULT) {
   264da:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   264dc:	2b00      	cmp	r3, #0
   264de:	d109      	bne.n	264f4 <_spi_set_config+0x94>
			current_pinmux = _sercom_get_default_pad(hw, pad);
   264e0:	2347      	movs	r3, #71	; 0x47
   264e2:	18fb      	adds	r3, r7, r3
   264e4:	781a      	ldrb	r2, [r3, #0]
   264e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   264e8:	0011      	movs	r1, r2
   264ea:	0018      	movs	r0, r3
   264ec:	4b5a      	ldr	r3, [pc, #360]	; (26658 <_spi_set_config+0x1f8>)
   264ee:	4798      	blx	r3
   264f0:	0003      	movs	r3, r0
   264f2:	643b      	str	r3, [r7, #64]	; 0x40
		}

		if (current_pinmux != PINMUX_UNUSED) {
   264f4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   264f6:	3301      	adds	r3, #1
   264f8:	d00d      	beq.n	26516 <_spi_set_config+0xb6>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
   264fa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   264fc:	b2da      	uxtb	r2, r3
   264fe:	231c      	movs	r3, #28
   26500:	18fb      	adds	r3, r7, r3
   26502:	701a      	strb	r2, [r3, #0]
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
   26504:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   26506:	0c1b      	lsrs	r3, r3, #16
   26508:	b2db      	uxtb	r3, r3
   2650a:	221c      	movs	r2, #28
   2650c:	18ba      	adds	r2, r7, r2
   2650e:	0011      	movs	r1, r2
   26510:	0018      	movs	r0, r3
   26512:	4b52      	ldr	r3, [pc, #328]	; (2665c <_spi_set_config+0x1fc>)
   26514:	4798      	blx	r3
	for (uint8_t pad = 0; pad < 4; pad++) {
   26516:	2347      	movs	r3, #71	; 0x47
   26518:	18fb      	adds	r3, r7, r3
   2651a:	781a      	ldrb	r2, [r3, #0]
   2651c:	2347      	movs	r3, #71	; 0x47
   2651e:	18fb      	adds	r3, r7, r3
   26520:	3201      	adds	r2, #1
   26522:	701a      	strb	r2, [r3, #0]
   26524:	2347      	movs	r3, #71	; 0x47
   26526:	18fb      	adds	r3, r7, r3
   26528:	781b      	ldrb	r3, [r3, #0]
   2652a:	2b03      	cmp	r3, #3
   2652c:	d9cd      	bls.n	264ca <_spi_set_config+0x6a>
		}
	}

	module->mode             = config->mode;
   2652e:	683b      	ldr	r3, [r7, #0]
   26530:	781a      	ldrb	r2, [r3, #0]
   26532:	687b      	ldr	r3, [r7, #4]
   26534:	715a      	strb	r2, [r3, #5]
	module->character_size   = config->character_size;
   26536:	683b      	ldr	r3, [r7, #0]
   26538:	7c1a      	ldrb	r2, [r3, #16]
   2653a:	687b      	ldr	r3, [r7, #4]
   2653c:	719a      	strb	r2, [r3, #6]
	module->receiver_enabled = config->receiver_enable;
   2653e:	683b      	ldr	r3, [r7, #0]
   26540:	7c9a      	ldrb	r2, [r3, #18]
   26542:	687b      	ldr	r3, [r7, #4]
   26544:	71da      	strb	r2, [r3, #7]
#  ifdef FEATURE_SPI_HARDWARE_SLAVE_SELECT
	module->master_slave_select_enable = config->master_slave_select_enable;
   26546:	683b      	ldr	r3, [r7, #0]
   26548:	7d1a      	ldrb	r2, [r3, #20]
   2654a:	687b      	ldr	r3, [r7, #4]
   2654c:	721a      	strb	r2, [r3, #8]
#  endif

#  if CONF_SPI_MASTER_ENABLE == true
	/* Value to write to BAUD register */
	uint16_t baud = 0;
   2654e:	230a      	movs	r3, #10
   26550:	18fb      	adds	r3, r7, r3
   26552:	2200      	movs	r2, #0
   26554:	801a      	strh	r2, [r3, #0]
#  endif
	/* Value to write to CTRLA register */
	uint32_t ctrla = 0;
   26556:	2300      	movs	r3, #0
   26558:	63fb      	str	r3, [r7, #60]	; 0x3c
	/* Value to write to CTRLB register */
	uint32_t ctrlb = 0;
   2655a:	2300      	movs	r3, #0
   2655c:	63bb      	str	r3, [r7, #56]	; 0x38

# if CONF_SPI_MASTER_ENABLE == true
	/* Find baud value and write it */
	if (config->mode == SPI_MODE_MASTER) {
   2655e:	683b      	ldr	r3, [r7, #0]
   26560:	781b      	ldrb	r3, [r3, #0]
   26562:	2b01      	cmp	r3, #1
   26564:	d129      	bne.n	265ba <_spi_set_config+0x15a>
		/* Find frequency of the internal SERCOMi_GCLK_ID_CORE */
		uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
   26566:	687b      	ldr	r3, [r7, #4]
   26568:	681b      	ldr	r3, [r3, #0]
   2656a:	0018      	movs	r0, r3
   2656c:	4b3c      	ldr	r3, [pc, #240]	; (26660 <_spi_set_config+0x200>)
   2656e:	4798      	blx	r3
   26570:	0003      	movs	r3, r0
   26572:	62fb      	str	r3, [r7, #44]	; 0x2c
		uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
   26574:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   26576:	3314      	adds	r3, #20
   26578:	62bb      	str	r3, [r7, #40]	; 0x28
		uint32_t internal_clock = system_gclk_chan_get_hz(gclk_index);
   2657a:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2657c:	b2db      	uxtb	r3, r3
   2657e:	0018      	movs	r0, r3
   26580:	4b38      	ldr	r3, [pc, #224]	; (26664 <_spi_set_config+0x204>)
   26582:	4798      	blx	r3
   26584:	0003      	movs	r3, r0
   26586:	627b      	str	r3, [r7, #36]	; 0x24

		/* Get baud value, based on baudrate and the internal clock frequency */
		enum status_code error_code = _sercom_get_sync_baud_val(
   26588:	683b      	ldr	r3, [r7, #0]
   2658a:	699b      	ldr	r3, [r3, #24]
   2658c:	2223      	movs	r2, #35	; 0x23
   2658e:	18bc      	adds	r4, r7, r2
   26590:	220a      	movs	r2, #10
   26592:	18ba      	adds	r2, r7, r2
   26594:	6a79      	ldr	r1, [r7, #36]	; 0x24
   26596:	0018      	movs	r0, r3
   26598:	4b33      	ldr	r3, [pc, #204]	; (26668 <_spi_set_config+0x208>)
   2659a:	4798      	blx	r3
   2659c:	0003      	movs	r3, r0
   2659e:	7023      	strb	r3, [r4, #0]
				config->mode_specific.master.baudrate,
				internal_clock, &baud);

		if (error_code != STATUS_OK) {
   265a0:	2323      	movs	r3, #35	; 0x23
   265a2:	18fb      	adds	r3, r7, r3
   265a4:	781b      	ldrb	r3, [r3, #0]
   265a6:	2b00      	cmp	r3, #0
   265a8:	d001      	beq.n	265ae <_spi_set_config+0x14e>
			/* Baud rate calculation error, return status code */
			return STATUS_ERR_INVALID_ARG;
   265aa:	2317      	movs	r3, #23
   265ac:	e04e      	b.n	2664c <_spi_set_config+0x1ec>
		}

		spi_module->BAUD.reg = (uint8_t)baud;
   265ae:	230a      	movs	r3, #10
   265b0:	18fb      	adds	r3, r7, r3
   265b2:	881b      	ldrh	r3, [r3, #0]
   265b4:	b2da      	uxtb	r2, r3
   265b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   265b8:	731a      	strb	r2, [r3, #12]
			ctrlb |= SERCOM_SPI_CTRLB_PLOADEN;
		}
	}
# endif
	/* Set data order */
	ctrla |= config->data_order;
   265ba:	683b      	ldr	r3, [r7, #0]
   265bc:	685b      	ldr	r3, [r3, #4]
   265be:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
   265c0:	4313      	orrs	r3, r2
   265c2:	63fb      	str	r3, [r7, #60]	; 0x3c

	/* Set clock polarity and clock phase */
	ctrla |= config->transfer_mode;
   265c4:	683b      	ldr	r3, [r7, #0]
   265c6:	689b      	ldr	r3, [r3, #8]
   265c8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
   265ca:	4313      	orrs	r3, r2
   265cc:	63fb      	str	r3, [r7, #60]	; 0x3c

	/* Set MUX setting */
	ctrla |= config->mux_setting;
   265ce:	683b      	ldr	r3, [r7, #0]
   265d0:	68db      	ldr	r3, [r3, #12]
   265d2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
   265d4:	4313      	orrs	r3, r2
   265d6:	63fb      	str	r3, [r7, #60]	; 0x3c

	/* Set SPI character size */
	ctrlb |= config->character_size;
   265d8:	683b      	ldr	r3, [r7, #0]
   265da:	7c1b      	ldrb	r3, [r3, #16]
   265dc:	001a      	movs	r2, r3
   265de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   265e0:	4313      	orrs	r3, r2
   265e2:	63bb      	str	r3, [r7, #56]	; 0x38

	/* Set whether module should run in standby. */
	if (config->run_in_standby || system_is_debugger_present()) {
   265e4:	683b      	ldr	r3, [r7, #0]
   265e6:	7c5b      	ldrb	r3, [r3, #17]
   265e8:	2b00      	cmp	r3, #0
   265ea:	d103      	bne.n	265f4 <_spi_set_config+0x194>
   265ec:	4b1f      	ldr	r3, [pc, #124]	; (2666c <_spi_set_config+0x20c>)
   265ee:	4798      	blx	r3
   265f0:	1e03      	subs	r3, r0, #0
   265f2:	d003      	beq.n	265fc <_spi_set_config+0x19c>
		ctrla |= SERCOM_SPI_CTRLA_RUNSTDBY;
   265f4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   265f6:	2280      	movs	r2, #128	; 0x80
   265f8:	4313      	orrs	r3, r2
   265fa:	63fb      	str	r3, [r7, #60]	; 0x3c
	}

	if (config->receiver_enable) {
   265fc:	683b      	ldr	r3, [r7, #0]
   265fe:	7c9b      	ldrb	r3, [r3, #18]
   26600:	2b00      	cmp	r3, #0
   26602:	d004      	beq.n	2660e <_spi_set_config+0x1ae>
		/* Enable receiver */
		ctrlb |= SERCOM_SPI_CTRLB_RXEN;
   26604:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   26606:	2280      	movs	r2, #128	; 0x80
   26608:	0292      	lsls	r2, r2, #10
   2660a:	4313      	orrs	r3, r2
   2660c:	63bb      	str	r3, [r7, #56]	; 0x38
	}
#  ifdef FEATURE_SPI_SLAVE_SELECT_LOW_DETECT
	if (config->select_slave_low_detect_enable) {
   2660e:	683b      	ldr	r3, [r7, #0]
   26610:	7cdb      	ldrb	r3, [r3, #19]
   26612:	2b00      	cmp	r3, #0
   26614:	d004      	beq.n	26620 <_spi_set_config+0x1c0>
		/* Enable Slave Select Low Detect */
		ctrlb |= SERCOM_SPI_CTRLB_SSDE;
   26616:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   26618:	2280      	movs	r2, #128	; 0x80
   2661a:	0092      	lsls	r2, r2, #2
   2661c:	4313      	orrs	r3, r2
   2661e:	63bb      	str	r3, [r7, #56]	; 0x38
	}
#  endif
#  ifdef FEATURE_SPI_HARDWARE_SLAVE_SELECT
	if (config->master_slave_select_enable) {
   26620:	683b      	ldr	r3, [r7, #0]
   26622:	7d1b      	ldrb	r3, [r3, #20]
   26624:	2b00      	cmp	r3, #0
   26626:	d004      	beq.n	26632 <_spi_set_config+0x1d2>
		/* Enable Master Slave Select */
		ctrlb |= SERCOM_SPI_CTRLB_MSSEN;
   26628:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   2662a:	2280      	movs	r2, #128	; 0x80
   2662c:	0192      	lsls	r2, r2, #6
   2662e:	4313      	orrs	r3, r2
   26630:	63bb      	str	r3, [r7, #56]	; 0x38
	}
#  endif
	/* Write CTRLA register */
	spi_module->CTRLA.reg |= ctrla;
   26632:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   26634:	681a      	ldr	r2, [r3, #0]
   26636:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   26638:	431a      	orrs	r2, r3
   2663a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   2663c:	601a      	str	r2, [r3, #0]

	/* Write CTRLB register */
	spi_module->CTRLB.reg |= ctrlb;
   2663e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   26640:	685a      	ldr	r2, [r3, #4]
   26642:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   26644:	431a      	orrs	r2, r3
   26646:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   26648:	605a      	str	r2, [r3, #4]

	return STATUS_OK;
   2664a:	2300      	movs	r3, #0
}
   2664c:	0018      	movs	r0, r3
   2664e:	46bd      	mov	sp, r7
   26650:	b013      	add	sp, #76	; 0x4c
   26652:	bd90      	pop	{r4, r7, pc}
   26654:	00025f95 	.word	0x00025f95
   26658:	00025c35 	.word	0x00025c35
   2665c:	000289e1 	.word	0x000289e1
   26660:	00025df1 	.word	0x00025df1
   26664:	000287a5 	.word	0x000287a5
   26668:	0002596b 	.word	0x0002596b
   2666c:	00026109 	.word	0x00026109

00026670 <spi_init>:
 */
enum status_code spi_init(
		struct spi_module *const module,
		Sercom *const hw,
		const struct spi_config *const config)
{
   26670:	b590      	push	{r4, r7, lr}
   26672:	b08b      	sub	sp, #44	; 0x2c
   26674:	af00      	add	r7, sp, #0
   26676:	60f8      	str	r0, [r7, #12]
   26678:	60b9      	str	r1, [r7, #8]
   2667a:	607a      	str	r2, [r7, #4]
	Assert(module);
	Assert(hw);
	Assert(config);

	/* Initialize device instance */
	module->hw = hw;
   2667c:	68fb      	ldr	r3, [r7, #12]
   2667e:	68ba      	ldr	r2, [r7, #8]
   26680:	601a      	str	r2, [r3, #0]

	SercomSpi *const spi_module = &(module->hw->SPI);
   26682:	68fb      	ldr	r3, [r7, #12]
   26684:	681b      	ldr	r3, [r3, #0]
   26686:	623b      	str	r3, [r7, #32]

	/* Check if module is enabled. */
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_ENABLE) {
   26688:	6a3b      	ldr	r3, [r7, #32]
   2668a:	681b      	ldr	r3, [r3, #0]
   2668c:	2202      	movs	r2, #2
   2668e:	4013      	ands	r3, r2
   26690:	d001      	beq.n	26696 <spi_init+0x26>
#  if SPI_CALLBACK_MODE == false
		/* Check if config is valid */
		return _spi_check_config(module, config);
#  else
		return STATUS_ERR_DENIED;
   26692:	231c      	movs	r3, #28
   26694:	e09c      	b.n	267d0 <spi_init+0x160>
#  endif
	}

	/* Check if reset is in progress. */
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_SWRST){
   26696:	6a3b      	ldr	r3, [r7, #32]
   26698:	681b      	ldr	r3, [r3, #0]
   2669a:	2201      	movs	r2, #1
   2669c:	4013      	ands	r3, r2
   2669e:	d001      	beq.n	266a4 <spi_init+0x34>
		return STATUS_BUSY;
   266a0:	2305      	movs	r3, #5
   266a2:	e095      	b.n	267d0 <spi_init+0x160>
	}

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
   266a4:	68fb      	ldr	r3, [r7, #12]
   266a6:	681b      	ldr	r3, [r3, #0]
   266a8:	0018      	movs	r0, r3
   266aa:	4b4b      	ldr	r3, [pc, #300]	; (267d8 <spi_init+0x168>)
   266ac:	4798      	blx	r3
   266ae:	0003      	movs	r3, r0
   266b0:	61fb      	str	r3, [r7, #28]
	}
#elif (SAMC20) || (SAML22)
	pm_index     = sercom_index + MCLK_APBCMASK_SERCOM0_Pos;
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
#else
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
   266b2:	69fb      	ldr	r3, [r7, #28]
   266b4:	3302      	adds	r3, #2
   266b6:	61bb      	str	r3, [r7, #24]
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
   266b8:	69fb      	ldr	r3, [r7, #28]
   266ba:	3314      	adds	r3, #20
   266bc:	617b      	str	r3, [r7, #20]
#  endif
	} else {
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
	}
#else
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
   266be:	2201      	movs	r2, #1
   266c0:	69bb      	ldr	r3, [r7, #24]
   266c2:	409a      	lsls	r2, r3
   266c4:	0013      	movs	r3, r2
   266c6:	0019      	movs	r1, r3
   266c8:	2002      	movs	r0, #2
   266ca:	4b44      	ldr	r3, [pc, #272]	; (267dc <spi_init+0x16c>)
   266cc:	4798      	blx	r3
#endif

	/* Set up the GCLK for the module */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
   266ce:	2310      	movs	r3, #16
   266d0:	18fb      	adds	r3, r7, r3
   266d2:	0018      	movs	r0, r3
   266d4:	4b42      	ldr	r3, [pc, #264]	; (267e0 <spi_init+0x170>)
   266d6:	4798      	blx	r3
	gclk_chan_conf.source_generator = config->generator_source;
   266d8:	687b      	ldr	r3, [r7, #4]
   266da:	2224      	movs	r2, #36	; 0x24
   266dc:	5c9a      	ldrb	r2, [r3, r2]
   266de:	2310      	movs	r3, #16
   266e0:	18fb      	adds	r3, r7, r3
   266e2:	701a      	strb	r2, [r3, #0]
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
   266e4:	697b      	ldr	r3, [r7, #20]
   266e6:	b2db      	uxtb	r3, r3
   266e8:	2210      	movs	r2, #16
   266ea:	18ba      	adds	r2, r7, r2
   266ec:	0011      	movs	r1, r2
   266ee:	0018      	movs	r0, r3
   266f0:	4b3c      	ldr	r3, [pc, #240]	; (267e4 <spi_init+0x174>)
   266f2:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
   266f4:	697b      	ldr	r3, [r7, #20]
   266f6:	b2db      	uxtb	r3, r3
   266f8:	0018      	movs	r0, r3
   266fa:	4b3b      	ldr	r3, [pc, #236]	; (267e8 <spi_init+0x178>)
   266fc:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
   266fe:	687b      	ldr	r3, [r7, #4]
   26700:	2224      	movs	r2, #36	; 0x24
   26702:	5c9b      	ldrb	r3, [r3, r2]
   26704:	2100      	movs	r1, #0
   26706:	0018      	movs	r0, r3
   26708:	4b38      	ldr	r3, [pc, #224]	; (267ec <spi_init+0x17c>)
   2670a:	4798      	blx	r3

#  if CONF_SPI_MASTER_ENABLE == true
	if (config->mode == SPI_MODE_MASTER) {
   2670c:	687b      	ldr	r3, [r7, #4]
   2670e:	781b      	ldrb	r3, [r3, #0]
   26710:	2b01      	cmp	r3, #1
   26712:	d105      	bne.n	26720 <spi_init+0xb0>
		/* Set the SERCOM in SPI master mode */
		spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_MODE(0x3);
   26714:	6a3b      	ldr	r3, [r7, #32]
   26716:	681b      	ldr	r3, [r3, #0]
   26718:	220c      	movs	r2, #12
   2671a:	431a      	orrs	r2, r3
   2671c:	6a3b      	ldr	r3, [r7, #32]
   2671e:	601a      	str	r2, [r3, #0]
	/* Temporary variables */
	uint8_t i;
	uint8_t instance_index;

	/* Initialize parameters */
	for (i = 0; i < SPI_CALLBACK_N; i++) {
   26720:	2327      	movs	r3, #39	; 0x27
   26722:	18fb      	adds	r3, r7, r3
   26724:	2200      	movs	r2, #0
   26726:	701a      	strb	r2, [r3, #0]
   26728:	e010      	b.n	2674c <spi_init+0xdc>
		module->callback[i]        = NULL;
   2672a:	2327      	movs	r3, #39	; 0x27
   2672c:	18fb      	adds	r3, r7, r3
   2672e:	781b      	ldrb	r3, [r3, #0]
   26730:	68fa      	ldr	r2, [r7, #12]
   26732:	3302      	adds	r3, #2
   26734:	009b      	lsls	r3, r3, #2
   26736:	18d3      	adds	r3, r2, r3
   26738:	3304      	adds	r3, #4
   2673a:	2200      	movs	r2, #0
   2673c:	601a      	str	r2, [r3, #0]
	for (i = 0; i < SPI_CALLBACK_N; i++) {
   2673e:	2327      	movs	r3, #39	; 0x27
   26740:	18fb      	adds	r3, r7, r3
   26742:	781a      	ldrb	r2, [r3, #0]
   26744:	2327      	movs	r3, #39	; 0x27
   26746:	18fb      	adds	r3, r7, r3
   26748:	3201      	adds	r2, #1
   2674a:	701a      	strb	r2, [r3, #0]
   2674c:	2327      	movs	r3, #39	; 0x27
   2674e:	18fb      	adds	r3, r7, r3
   26750:	781b      	ldrb	r3, [r3, #0]
   26752:	2b06      	cmp	r3, #6
   26754:	d9e9      	bls.n	2672a <spi_init+0xba>
	}
	module->tx_buffer_ptr              = NULL;
   26756:	68fb      	ldr	r3, [r7, #12]
   26758:	2200      	movs	r2, #0
   2675a:	62da      	str	r2, [r3, #44]	; 0x2c
	module->rx_buffer_ptr              = NULL;
   2675c:	68fb      	ldr	r3, [r7, #12]
   2675e:	2200      	movs	r2, #0
   26760:	629a      	str	r2, [r3, #40]	; 0x28
	module->remaining_tx_buffer_length = 0x0000;
   26762:	68fb      	ldr	r3, [r7, #12]
   26764:	2200      	movs	r2, #0
   26766:	869a      	strh	r2, [r3, #52]	; 0x34
	module->remaining_rx_buffer_length = 0x0000;
   26768:	68fb      	ldr	r3, [r7, #12]
   2676a:	2200      	movs	r2, #0
   2676c:	861a      	strh	r2, [r3, #48]	; 0x30
	module->registered_callback        = 0x00;
   2676e:	68fb      	ldr	r3, [r7, #12]
   26770:	2236      	movs	r2, #54	; 0x36
   26772:	2100      	movs	r1, #0
   26774:	5499      	strb	r1, [r3, r2]
	module->enabled_callback           = 0x00;
   26776:	68fb      	ldr	r3, [r7, #12]
   26778:	2237      	movs	r2, #55	; 0x37
   2677a:	2100      	movs	r1, #0
   2677c:	5499      	strb	r1, [r3, r2]
	module->status                     = STATUS_OK;
   2677e:	68fb      	ldr	r3, [r7, #12]
   26780:	2238      	movs	r2, #56	; 0x38
   26782:	2100      	movs	r1, #0
   26784:	5499      	strb	r1, [r3, r2]
	module->dir                        = SPI_DIRECTION_IDLE;
   26786:	68fb      	ldr	r3, [r7, #12]
   26788:	2203      	movs	r2, #3
   2678a:	725a      	strb	r2, [r3, #9]
	module->locked                     = false;
   2678c:	68fb      	ldr	r3, [r7, #12]
   2678e:	2200      	movs	r2, #0
   26790:	711a      	strb	r2, [r3, #4]
	/*
	 * Set interrupt handler and register SPI software module struct in
	 * look-up table
	 */
	instance_index = _sercom_get_sercom_inst_index(module->hw);
   26792:	68fb      	ldr	r3, [r7, #12]
   26794:	681b      	ldr	r3, [r3, #0]
   26796:	2213      	movs	r2, #19
   26798:	18bc      	adds	r4, r7, r2
   2679a:	0018      	movs	r0, r3
   2679c:	4b0e      	ldr	r3, [pc, #56]	; (267d8 <spi_init+0x168>)
   2679e:	4798      	blx	r3
   267a0:	0003      	movs	r3, r0
   267a2:	7023      	strb	r3, [r4, #0]
	_sercom_set_handler(instance_index, _spi_interrupt_handler);
   267a4:	4a12      	ldr	r2, [pc, #72]	; (267f0 <spi_init+0x180>)
   267a6:	2313      	movs	r3, #19
   267a8:	18fb      	adds	r3, r7, r3
   267aa:	781b      	ldrb	r3, [r3, #0]
   267ac:	0011      	movs	r1, r2
   267ae:	0018      	movs	r0, r3
   267b0:	4b10      	ldr	r3, [pc, #64]	; (267f4 <spi_init+0x184>)
   267b2:	4798      	blx	r3
	_sercom_instances[instance_index] = module;
   267b4:	2313      	movs	r3, #19
   267b6:	18fb      	adds	r3, r7, r3
   267b8:	781a      	ldrb	r2, [r3, #0]
   267ba:	4b0f      	ldr	r3, [pc, #60]	; (267f8 <spi_init+0x188>)
   267bc:	0092      	lsls	r2, r2, #2
   267be:	68f9      	ldr	r1, [r7, #12]
   267c0:	50d1      	str	r1, [r2, r3]
#endif

	/* Write configuration to module and return status code */
	return _spi_set_config(module, config);
   267c2:	687a      	ldr	r2, [r7, #4]
   267c4:	68fb      	ldr	r3, [r7, #12]
   267c6:	0011      	movs	r1, r2
   267c8:	0018      	movs	r0, r3
   267ca:	4b0c      	ldr	r3, [pc, #48]	; (267fc <spi_init+0x18c>)
   267cc:	4798      	blx	r3
   267ce:	0003      	movs	r3, r0
}
   267d0:	0018      	movs	r0, r3
   267d2:	46bd      	mov	sp, r7
   267d4:	b00b      	add	sp, #44	; 0x2c
   267d6:	bd90      	pop	{r4, r7, pc}
   267d8:	00025df1 	.word	0x00025df1
   267dc:	000260ad 	.word	0x000260ad
   267e0:	00026095 	.word	0x00026095
   267e4:	00028681 	.word	0x00028681
   267e8:	000286c5 	.word	0x000286c5
   267ec:	00025ba9 	.word	0x00025ba9
   267f0:	00026cc9 	.word	0x00026cc9
   267f4:	00025e55 	.word	0x00025e55
   267f8:	200056a8 	.word	0x200056a8
   267fc:	00026461 	.word	0x00026461

00026800 <spi_read_buffer_wait>:
enum status_code spi_read_buffer_wait(
		struct spi_module *const module,
		uint8_t *rx_data,
		uint16_t length,
		uint16_t dummy)
{
   26800:	b590      	push	{r4, r7, lr}
   26802:	b087      	sub	sp, #28
   26804:	af00      	add	r7, sp, #0
   26806:	60f8      	str	r0, [r7, #12]
   26808:	60b9      	str	r1, [r7, #8]
   2680a:	0019      	movs	r1, r3
   2680c:	1dbb      	adds	r3, r7, #6
   2680e:	801a      	strh	r2, [r3, #0]
   26810:	1d3b      	adds	r3, r7, #4
   26812:	1c0a      	adds	r2, r1, #0
   26814:	801a      	strh	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

#  if SPI_CALLBACK_MODE == true
	if (module->status == STATUS_BUSY) {
   26816:	68fb      	ldr	r3, [r7, #12]
   26818:	2238      	movs	r2, #56	; 0x38
   2681a:	5c9b      	ldrb	r3, [r3, r2]
   2681c:	b2db      	uxtb	r3, r3
   2681e:	2b05      	cmp	r3, #5
   26820:	d101      	bne.n	26826 <spi_read_buffer_wait+0x26>
		/* Check if the SPI module is busy with a job */
		return STATUS_BUSY;
   26822:	2305      	movs	r3, #5
   26824:	e07a      	b.n	2691c <spi_read_buffer_wait+0x11c>
	}
#  endif

	/* Sanity check arguments */
	if (length == 0) {
   26826:	1dbb      	adds	r3, r7, #6
   26828:	881b      	ldrh	r3, [r3, #0]
   2682a:	2b00      	cmp	r3, #0
   2682c:	d101      	bne.n	26832 <spi_read_buffer_wait+0x32>
		return STATUS_ERR_INVALID_ARG;
   2682e:	2317      	movs	r3, #23
   26830:	e074      	b.n	2691c <spi_read_buffer_wait+0x11c>
	}

	if (!(module->receiver_enabled)) {
   26832:	68fb      	ldr	r3, [r7, #12]
   26834:	79db      	ldrb	r3, [r3, #7]
   26836:	2201      	movs	r2, #1
   26838:	4053      	eors	r3, r2
   2683a:	b2db      	uxtb	r3, r3
   2683c:	2b00      	cmp	r3, #0
   2683e:	d001      	beq.n	26844 <spi_read_buffer_wait+0x44>
		return STATUS_ERR_DENIED;
   26840:	231c      	movs	r3, #28
   26842:	e06b      	b.n	2691c <spi_read_buffer_wait+0x11c>
	if ((module->mode == SPI_MODE_SLAVE) && (spi_is_write_complete(module))) {
		/* Clear TX complete flag */
		_spi_clear_tx_complete_flag(module);
	}
#  endif
	uint16_t rx_pos = 0;
   26844:	2316      	movs	r3, #22
   26846:	18fb      	adds	r3, r7, r3
   26848:	2200      	movs	r2, #0
   2684a:	801a      	strh	r2, [r3, #0]

	while (length--) {
   2684c:	e05e      	b.n	2690c <spi_read_buffer_wait+0x10c>
#  if CONF_SPI_MASTER_ENABLE == true
		if (module->mode == SPI_MODE_MASTER) {
   2684e:	68fb      	ldr	r3, [r7, #12]
   26850:	795b      	ldrb	r3, [r3, #5]
   26852:	2b01      	cmp	r3, #1
   26854:	d112      	bne.n	2687c <spi_read_buffer_wait+0x7c>
			/* Wait until the module is ready to write a character */
			while (!spi_is_ready_to_write(module)) {
   26856:	46c0      	nop			; (mov r8, r8)
   26858:	68fb      	ldr	r3, [r7, #12]
   2685a:	0018      	movs	r0, r3
   2685c:	4b31      	ldr	r3, [pc, #196]	; (26924 <spi_read_buffer_wait+0x124>)
   2685e:	4798      	blx	r3
   26860:	0003      	movs	r3, r0
   26862:	001a      	movs	r2, r3
   26864:	2301      	movs	r3, #1
   26866:	4053      	eors	r3, r2
   26868:	b2db      	uxtb	r3, r3
   2686a:	2b00      	cmp	r3, #0
   2686c:	d1f4      	bne.n	26858 <spi_read_buffer_wait+0x58>
			}

			/* Send dummy SPI character to read in master mode */
			spi_write(module, dummy);
   2686e:	1d3b      	adds	r3, r7, #4
   26870:	881a      	ldrh	r2, [r3, #0]
   26872:	68fb      	ldr	r3, [r7, #12]
   26874:	0011      	movs	r1, r2
   26876:	0018      	movs	r0, r3
   26878:	4b2b      	ldr	r3, [pc, #172]	; (26928 <spi_read_buffer_wait+0x128>)
   2687a:	4798      	blx	r3
			}
		}
#  endif

		/* Wait until the module is ready to read a character */
		while (!spi_is_ready_to_read(module)) {
   2687c:	46c0      	nop			; (mov r8, r8)
   2687e:	68fb      	ldr	r3, [r7, #12]
   26880:	0018      	movs	r0, r3
   26882:	4b2a      	ldr	r3, [pc, #168]	; (2692c <spi_read_buffer_wait+0x12c>)
   26884:	4798      	blx	r3
   26886:	0003      	movs	r3, r0
   26888:	001a      	movs	r2, r3
   2688a:	2301      	movs	r3, #1
   2688c:	4053      	eors	r3, r2
   2688e:	b2db      	uxtb	r3, r3
   26890:	2b00      	cmp	r3, #0
   26892:	d1f4      	bne.n	2687e <spi_read_buffer_wait+0x7e>
		}

		uint16_t received_data = 0;
   26894:	2312      	movs	r3, #18
   26896:	18fb      	adds	r3, r7, r3
   26898:	2200      	movs	r2, #0
   2689a:	801a      	strh	r2, [r3, #0]
		enum status_code retval = spi_read(module, &received_data);
   2689c:	2315      	movs	r3, #21
   2689e:	18fc      	adds	r4, r7, r3
   268a0:	2312      	movs	r3, #18
   268a2:	18fa      	adds	r2, r7, r3
   268a4:	68fb      	ldr	r3, [r7, #12]
   268a6:	0011      	movs	r1, r2
   268a8:	0018      	movs	r0, r3
   268aa:	4b21      	ldr	r3, [pc, #132]	; (26930 <spi_read_buffer_wait+0x130>)
   268ac:	4798      	blx	r3
   268ae:	0003      	movs	r3, r0
   268b0:	7023      	strb	r3, [r4, #0]

		if (retval != STATUS_OK) {
   268b2:	2315      	movs	r3, #21
   268b4:	18fb      	adds	r3, r7, r3
   268b6:	781b      	ldrb	r3, [r3, #0]
   268b8:	2b00      	cmp	r3, #0
   268ba:	d003      	beq.n	268c4 <spi_read_buffer_wait+0xc4>
			/* Overflow, abort */
			return retval;
   268bc:	2315      	movs	r3, #21
   268be:	18fb      	adds	r3, r7, r3
   268c0:	781b      	ldrb	r3, [r3, #0]
   268c2:	e02b      	b.n	2691c <spi_read_buffer_wait+0x11c>
		}

		/* Read value will be at least 8-bits long */
		rx_data[rx_pos++] = received_data;
   268c4:	2316      	movs	r3, #22
   268c6:	18fb      	adds	r3, r7, r3
   268c8:	881b      	ldrh	r3, [r3, #0]
   268ca:	2216      	movs	r2, #22
   268cc:	18ba      	adds	r2, r7, r2
   268ce:	1c59      	adds	r1, r3, #1
   268d0:	8011      	strh	r1, [r2, #0]
   268d2:	001a      	movs	r2, r3
   268d4:	68bb      	ldr	r3, [r7, #8]
   268d6:	189b      	adds	r3, r3, r2
   268d8:	2212      	movs	r2, #18
   268da:	18ba      	adds	r2, r7, r2
   268dc:	8812      	ldrh	r2, [r2, #0]
   268de:	b2d2      	uxtb	r2, r2
   268e0:	701a      	strb	r2, [r3, #0]

		/* If 9-bit data, write next received byte to the buffer */
		if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
   268e2:	68fb      	ldr	r3, [r7, #12]
   268e4:	799b      	ldrb	r3, [r3, #6]
   268e6:	2b01      	cmp	r3, #1
   268e8:	d110      	bne.n	2690c <spi_read_buffer_wait+0x10c>
			rx_data[rx_pos++] = (received_data >> 8);
   268ea:	2316      	movs	r3, #22
   268ec:	18fb      	adds	r3, r7, r3
   268ee:	881b      	ldrh	r3, [r3, #0]
   268f0:	2216      	movs	r2, #22
   268f2:	18ba      	adds	r2, r7, r2
   268f4:	1c59      	adds	r1, r3, #1
   268f6:	8011      	strh	r1, [r2, #0]
   268f8:	001a      	movs	r2, r3
   268fa:	68bb      	ldr	r3, [r7, #8]
   268fc:	189b      	adds	r3, r3, r2
   268fe:	2212      	movs	r2, #18
   26900:	18ba      	adds	r2, r7, r2
   26902:	8812      	ldrh	r2, [r2, #0]
   26904:	0a12      	lsrs	r2, r2, #8
   26906:	b292      	uxth	r2, r2
   26908:	b2d2      	uxtb	r2, r2
   2690a:	701a      	strb	r2, [r3, #0]
	while (length--) {
   2690c:	1dbb      	adds	r3, r7, #6
   2690e:	881b      	ldrh	r3, [r3, #0]
   26910:	1dba      	adds	r2, r7, #6
   26912:	1e59      	subs	r1, r3, #1
   26914:	8011      	strh	r1, [r2, #0]
   26916:	2b00      	cmp	r3, #0
   26918:	d199      	bne.n	2684e <spi_read_buffer_wait+0x4e>
		}
	}

	return STATUS_OK;
   2691a:	2300      	movs	r3, #0
}
   2691c:	0018      	movs	r0, r3
   2691e:	46bd      	mov	sp, r7
   26920:	b007      	add	sp, #28
   26922:	bd90      	pop	{r4, r7, pc}
   26924:	00026279 	.word	0x00026279
   26928:	000262c9 	.word	0x000262c9
   2692c:	000262a1 	.word	0x000262a1
   26930:	00026311 	.word	0x00026311

00026934 <spi_select_slave>:
 */
enum status_code spi_select_slave(
		struct spi_module *const module,
		struct spi_slave_inst *const slave,
		const bool select)
{
   26934:	b580      	push	{r7, lr}
   26936:	b086      	sub	sp, #24
   26938:	af00      	add	r7, sp, #0
   2693a:	60f8      	str	r0, [r7, #12]
   2693c:	60b9      	str	r1, [r7, #8]
   2693e:	1dfb      	adds	r3, r7, #7
   26940:	701a      	strb	r2, [r3, #0]
	Assert(module);
	Assert(module->hw);
	Assert(slave);

	/* Check that the SPI module is operating in master mode */
	if (module->mode != SPI_MODE_MASTER) {
   26942:	68fb      	ldr	r3, [r7, #12]
   26944:	795b      	ldrb	r3, [r3, #5]
   26946:	2b01      	cmp	r3, #1
   26948:	d001      	beq.n	2694e <spi_select_slave+0x1a>
		return STATUS_ERR_UNSUPPORTED_DEV;
   2694a:	2315      	movs	r3, #21
   2694c:	e05c      	b.n	26a08 <spi_select_slave+0xd4>
	}
#  ifdef FEATURE_SPI_HARDWARE_SLAVE_SELECT
	if(!(module->master_slave_select_enable))
   2694e:	68fb      	ldr	r3, [r7, #12]
   26950:	7a1b      	ldrb	r3, [r3, #8]
   26952:	2201      	movs	r2, #1
   26954:	4053      	eors	r3, r2
   26956:	b2db      	uxtb	r3, r3
   26958:	2b00      	cmp	r3, #0
   2695a:	d054      	beq.n	26a06 <spi_select_slave+0xd2>
#  endif
	{
		if (select) {
   2695c:	1dfb      	adds	r3, r7, #7
   2695e:	781b      	ldrb	r3, [r3, #0]
   26960:	2b00      	cmp	r3, #0
   26962:	d04a      	beq.n	269fa <spi_select_slave+0xc6>
			/* Check if address recognition is enabled */
			if (slave->address_enabled) {
   26964:	68bb      	ldr	r3, [r7, #8]
   26966:	785b      	ldrb	r3, [r3, #1]
   26968:	2b00      	cmp	r3, #0
   2696a:	d03f      	beq.n	269ec <spi_select_slave+0xb8>
				/* Check if the module is ready to write the address */
				if (!spi_is_ready_to_write(module)) {
   2696c:	68fb      	ldr	r3, [r7, #12]
   2696e:	0018      	movs	r0, r3
   26970:	4b27      	ldr	r3, [pc, #156]	; (26a10 <spi_select_slave+0xdc>)
   26972:	4798      	blx	r3
   26974:	0003      	movs	r3, r0
   26976:	001a      	movs	r2, r3
   26978:	2301      	movs	r3, #1
   2697a:	4053      	eors	r3, r2
   2697c:	b2db      	uxtb	r3, r3
   2697e:	2b00      	cmp	r3, #0
   26980:	d007      	beq.n	26992 <spi_select_slave+0x5e>
					/* Not ready, do not select slave and return */
					port_pin_set_output_level(slave->ss_pin, true);
   26982:	68bb      	ldr	r3, [r7, #8]
   26984:	781b      	ldrb	r3, [r3, #0]
   26986:	2101      	movs	r1, #1
   26988:	0018      	movs	r0, r3
   2698a:	4b22      	ldr	r3, [pc, #136]	; (26a14 <spi_select_slave+0xe0>)
   2698c:	4798      	blx	r3
					return STATUS_BUSY;
   2698e:	2305      	movs	r3, #5
   26990:	e03a      	b.n	26a08 <spi_select_slave+0xd4>
				}

				/* Drive Slave Select low */
				port_pin_set_output_level(slave->ss_pin, false);
   26992:	68bb      	ldr	r3, [r7, #8]
   26994:	781b      	ldrb	r3, [r3, #0]
   26996:	2100      	movs	r1, #0
   26998:	0018      	movs	r0, r3
   2699a:	4b1e      	ldr	r3, [pc, #120]	; (26a14 <spi_select_slave+0xe0>)
   2699c:	4798      	blx	r3

				/* Write address to slave */
				spi_write(module, slave->address);
   2699e:	68bb      	ldr	r3, [r7, #8]
   269a0:	789b      	ldrb	r3, [r3, #2]
   269a2:	b29a      	uxth	r2, r3
   269a4:	68fb      	ldr	r3, [r7, #12]
   269a6:	0011      	movs	r1, r2
   269a8:	0018      	movs	r0, r3
   269aa:	4b1b      	ldr	r3, [pc, #108]	; (26a18 <spi_select_slave+0xe4>)
   269ac:	4798      	blx	r3

				if (!(module->receiver_enabled)) {
   269ae:	68fb      	ldr	r3, [r7, #12]
   269b0:	79db      	ldrb	r3, [r3, #7]
   269b2:	2201      	movs	r2, #1
   269b4:	4053      	eors	r3, r2
   269b6:	b2db      	uxtb	r3, r3
   269b8:	2b00      	cmp	r3, #0
   269ba:	d024      	beq.n	26a06 <spi_select_slave+0xd2>
					/* Flush contents of shift register shifted back from slave */
					while (!spi_is_ready_to_read(module)) {
   269bc:	46c0      	nop			; (mov r8, r8)
   269be:	68fb      	ldr	r3, [r7, #12]
   269c0:	0018      	movs	r0, r3
   269c2:	4b16      	ldr	r3, [pc, #88]	; (26a1c <spi_select_slave+0xe8>)
   269c4:	4798      	blx	r3
   269c6:	0003      	movs	r3, r0
   269c8:	001a      	movs	r2, r3
   269ca:	2301      	movs	r3, #1
   269cc:	4053      	eors	r3, r2
   269ce:	b2db      	uxtb	r3, r3
   269d0:	2b00      	cmp	r3, #0
   269d2:	d1f4      	bne.n	269be <spi_select_slave+0x8a>
					}
					uint16_t flush = 0;
   269d4:	2316      	movs	r3, #22
   269d6:	18fb      	adds	r3, r7, r3
   269d8:	2200      	movs	r2, #0
   269da:	801a      	strh	r2, [r3, #0]
					spi_read(module, &flush);
   269dc:	2316      	movs	r3, #22
   269de:	18fa      	adds	r2, r7, r3
   269e0:	68fb      	ldr	r3, [r7, #12]
   269e2:	0011      	movs	r1, r2
   269e4:	0018      	movs	r0, r3
   269e6:	4b0e      	ldr	r3, [pc, #56]	; (26a20 <spi_select_slave+0xec>)
   269e8:	4798      	blx	r3
   269ea:	e00c      	b.n	26a06 <spi_select_slave+0xd2>
				}
			} else {
				/* Drive Slave Select low */
				port_pin_set_output_level(slave->ss_pin, false);
   269ec:	68bb      	ldr	r3, [r7, #8]
   269ee:	781b      	ldrb	r3, [r3, #0]
   269f0:	2100      	movs	r1, #0
   269f2:	0018      	movs	r0, r3
   269f4:	4b07      	ldr	r3, [pc, #28]	; (26a14 <spi_select_slave+0xe0>)
   269f6:	4798      	blx	r3
   269f8:	e005      	b.n	26a06 <spi_select_slave+0xd2>
			}
		} else {
			/* Drive Slave Select high */
			port_pin_set_output_level(slave->ss_pin, true);
   269fa:	68bb      	ldr	r3, [r7, #8]
   269fc:	781b      	ldrb	r3, [r3, #0]
   269fe:	2101      	movs	r1, #1
   26a00:	0018      	movs	r0, r3
   26a02:	4b04      	ldr	r3, [pc, #16]	; (26a14 <spi_select_slave+0xe0>)
   26a04:	4798      	blx	r3
		}
	}
	return STATUS_OK;
   26a06:	2300      	movs	r3, #0
}
   26a08:	0018      	movs	r0, r3
   26a0a:	46bd      	mov	sp, r7
   26a0c:	b006      	add	sp, #24
   26a0e:	bd80      	pop	{r7, pc}
   26a10:	00026279 	.word	0x00026279
   26a14:	00026041 	.word	0x00026041
   26a18:	000262c9 	.word	0x000262c9
   26a1c:	000262a1 	.word	0x000262a1
   26a20:	00026311 	.word	0x00026311

00026a24 <spi_write_buffer_wait>:
 */
enum status_code spi_write_buffer_wait(
		struct spi_module *const module,
		const uint8_t *tx_data,
		uint16_t length)
{
   26a24:	b580      	push	{r7, lr}
   26a26:	b086      	sub	sp, #24
   26a28:	af00      	add	r7, sp, #0
   26a2a:	60f8      	str	r0, [r7, #12]
   26a2c:	60b9      	str	r1, [r7, #8]
   26a2e:	1dbb      	adds	r3, r7, #6
   26a30:	801a      	strh	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);

#  if SPI_CALLBACK_MODE == true
	if (module->status == STATUS_BUSY) {
   26a32:	68fb      	ldr	r3, [r7, #12]
   26a34:	2238      	movs	r2, #56	; 0x38
   26a36:	5c9b      	ldrb	r3, [r3, r2]
   26a38:	b2db      	uxtb	r3, r3
   26a3a:	2b05      	cmp	r3, #5
   26a3c:	d101      	bne.n	26a42 <spi_write_buffer_wait+0x1e>
		/* Check if the SPI module is busy with a job */
		return STATUS_BUSY;
   26a3e:	2305      	movs	r3, #5
   26a40:	e087      	b.n	26b52 <spi_write_buffer_wait+0x12e>
	}
#  endif

	if (length == 0) {
   26a42:	1dbb      	adds	r3, r7, #6
   26a44:	881b      	ldrh	r3, [r3, #0]
   26a46:	2b00      	cmp	r3, #0
   26a48:	d101      	bne.n	26a4e <spi_write_buffer_wait+0x2a>
		return STATUS_ERR_INVALID_ARG;
   26a4a:	2317      	movs	r3, #23
   26a4c:	e081      	b.n	26b52 <spi_write_buffer_wait+0x12e>
		/* Clear TX complete flag */
		_spi_clear_tx_complete_flag(module);
	}
#  endif

	uint16_t tx_pos = 0;
   26a4e:	2316      	movs	r3, #22
   26a50:	18fb      	adds	r3, r7, r3
   26a52:	2200      	movs	r2, #0
   26a54:	801a      	strh	r2, [r3, #0]
	uint16_t flush_length = length;
   26a56:	2314      	movs	r3, #20
   26a58:	18fb      	adds	r3, r7, r3
   26a5a:	1dba      	adds	r2, r7, #6
   26a5c:	8812      	ldrh	r2, [r2, #0]
   26a5e:	801a      	strh	r2, [r3, #0]

	/* Write block */
	while (length--) {
   26a60:	e05f      	b.n	26b22 <spi_write_buffer_wait+0xfe>
			}
		}
#  endif

		/* Wait until the module is ready to write a character */
		while (!spi_is_ready_to_write(module)) {
   26a62:	46c0      	nop			; (mov r8, r8)
   26a64:	68fb      	ldr	r3, [r7, #12]
   26a66:	0018      	movs	r0, r3
   26a68:	4b3c      	ldr	r3, [pc, #240]	; (26b5c <spi_write_buffer_wait+0x138>)
   26a6a:	4798      	blx	r3
   26a6c:	0003      	movs	r3, r0
   26a6e:	001a      	movs	r2, r3
   26a70:	2301      	movs	r3, #1
   26a72:	4053      	eors	r3, r2
   26a74:	b2db      	uxtb	r3, r3
   26a76:	2b00      	cmp	r3, #0
   26a78:	d1f4      	bne.n	26a64 <spi_write_buffer_wait+0x40>
		}

		/* Write value will be at least 8-bits long */
		uint16_t data_to_send = tx_data[tx_pos++];
   26a7a:	2316      	movs	r3, #22
   26a7c:	18fb      	adds	r3, r7, r3
   26a7e:	881b      	ldrh	r3, [r3, #0]
   26a80:	2216      	movs	r2, #22
   26a82:	18ba      	adds	r2, r7, r2
   26a84:	1c59      	adds	r1, r3, #1
   26a86:	8011      	strh	r1, [r2, #0]
   26a88:	001a      	movs	r2, r3
   26a8a:	68bb      	ldr	r3, [r7, #8]
   26a8c:	189b      	adds	r3, r3, r2
   26a8e:	781a      	ldrb	r2, [r3, #0]
   26a90:	2312      	movs	r3, #18
   26a92:	18fb      	adds	r3, r7, r3
   26a94:	801a      	strh	r2, [r3, #0]

		/* If 9-bit data, get next byte to send from the buffer */
		if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
   26a96:	68fb      	ldr	r3, [r7, #12]
   26a98:	799b      	ldrb	r3, [r3, #6]
   26a9a:	2b01      	cmp	r3, #1
   26a9c:	d115      	bne.n	26aca <spi_write_buffer_wait+0xa6>
			data_to_send |= (tx_data[tx_pos++] << 8);
   26a9e:	2316      	movs	r3, #22
   26aa0:	18fb      	adds	r3, r7, r3
   26aa2:	881b      	ldrh	r3, [r3, #0]
   26aa4:	2216      	movs	r2, #22
   26aa6:	18ba      	adds	r2, r7, r2
   26aa8:	1c59      	adds	r1, r3, #1
   26aaa:	8011      	strh	r1, [r2, #0]
   26aac:	001a      	movs	r2, r3
   26aae:	68bb      	ldr	r3, [r7, #8]
   26ab0:	189b      	adds	r3, r3, r2
   26ab2:	781b      	ldrb	r3, [r3, #0]
   26ab4:	021b      	lsls	r3, r3, #8
   26ab6:	b21a      	sxth	r2, r3
   26ab8:	2312      	movs	r3, #18
   26aba:	18fb      	adds	r3, r7, r3
   26abc:	2100      	movs	r1, #0
   26abe:	5e5b      	ldrsh	r3, [r3, r1]
   26ac0:	4313      	orrs	r3, r2
   26ac2:	b21a      	sxth	r2, r3
   26ac4:	2312      	movs	r3, #18
   26ac6:	18fb      	adds	r3, r7, r3
   26ac8:	801a      	strh	r2, [r3, #0]
		}

		/* Write the data to send */
		spi_write(module, data_to_send);
   26aca:	2312      	movs	r3, #18
   26acc:	18fb      	adds	r3, r7, r3
   26ace:	881a      	ldrh	r2, [r3, #0]
   26ad0:	68fb      	ldr	r3, [r7, #12]
   26ad2:	0011      	movs	r1, r2
   26ad4:	0018      	movs	r0, r3
   26ad6:	4b22      	ldr	r3, [pc, #136]	; (26b60 <spi_write_buffer_wait+0x13c>)
   26ad8:	4798      	blx	r3

		if (module->receiver_enabled) {
   26ada:	68fb      	ldr	r3, [r7, #12]
   26adc:	79db      	ldrb	r3, [r3, #7]
   26ade:	2214      	movs	r2, #20
   26ae0:	18ba      	adds	r2, r7, r2
   26ae2:	2114      	movs	r1, #20
   26ae4:	1879      	adds	r1, r7, r1
   26ae6:	8809      	ldrh	r1, [r1, #0]
   26ae8:	8011      	strh	r1, [r2, #0]
   26aea:	2b00      	cmp	r3, #0
   26aec:	d019      	beq.n	26b22 <spi_write_buffer_wait+0xfe>
					return STATUS_ERR_TIMEOUT;
				}
			}
#  endif

			while (!spi_is_ready_to_read(module)) {
   26aee:	46c0      	nop			; (mov r8, r8)
   26af0:	68fb      	ldr	r3, [r7, #12]
   26af2:	0018      	movs	r0, r3
   26af4:	4b1b      	ldr	r3, [pc, #108]	; (26b64 <spi_write_buffer_wait+0x140>)
   26af6:	4798      	blx	r3
   26af8:	0003      	movs	r3, r0
   26afa:	001a      	movs	r2, r3
   26afc:	2301      	movs	r3, #1
   26afe:	4053      	eors	r3, r2
   26b00:	b2db      	uxtb	r3, r3
   26b02:	2b00      	cmp	r3, #0
   26b04:	d1f4      	bne.n	26af0 <spi_write_buffer_wait+0xcc>
			}

			/* Flush read buffer */
			uint16_t flush;
			spi_read(module, &flush);
   26b06:	2310      	movs	r3, #16
   26b08:	18fa      	adds	r2, r7, r3
   26b0a:	68fb      	ldr	r3, [r7, #12]
   26b0c:	0011      	movs	r1, r2
   26b0e:	0018      	movs	r0, r3
   26b10:	4b15      	ldr	r3, [pc, #84]	; (26b68 <spi_write_buffer_wait+0x144>)
   26b12:	4798      	blx	r3
			flush_length--;
   26b14:	2314      	movs	r3, #20
   26b16:	18fb      	adds	r3, r7, r3
   26b18:	881a      	ldrh	r2, [r3, #0]
   26b1a:	2314      	movs	r3, #20
   26b1c:	18fb      	adds	r3, r7, r3
   26b1e:	3a01      	subs	r2, #1
   26b20:	801a      	strh	r2, [r3, #0]
	while (length--) {
   26b22:	1dbb      	adds	r3, r7, #6
   26b24:	881b      	ldrh	r3, [r3, #0]
   26b26:	1dba      	adds	r2, r7, #6
   26b28:	1e59      	subs	r1, r3, #1
   26b2a:	8011      	strh	r1, [r2, #0]
   26b2c:	2b00      	cmp	r3, #0
   26b2e:	d198      	bne.n	26a62 <spi_write_buffer_wait+0x3e>
		}
	}

#  if CONF_SPI_MASTER_ENABLE == true
	if (module->mode == SPI_MODE_MASTER) {
   26b30:	68fb      	ldr	r3, [r7, #12]
   26b32:	795b      	ldrb	r3, [r3, #5]
   26b34:	2b01      	cmp	r3, #1
   26b36:	d10b      	bne.n	26b50 <spi_write_buffer_wait+0x12c>
		/* Wait for last byte to be transferred */
		while (!spi_is_write_complete(module)) {
   26b38:	46c0      	nop			; (mov r8, r8)
   26b3a:	68fb      	ldr	r3, [r7, #12]
   26b3c:	0018      	movs	r0, r3
   26b3e:	4b0b      	ldr	r3, [pc, #44]	; (26b6c <spi_write_buffer_wait+0x148>)
   26b40:	4798      	blx	r3
   26b42:	0003      	movs	r3, r0
   26b44:	001a      	movs	r2, r3
   26b46:	2301      	movs	r3, #1
   26b48:	4053      	eors	r3, r2
   26b4a:	b2db      	uxtb	r3, r3
   26b4c:	2b00      	cmp	r3, #0
   26b4e:	d1f4      	bne.n	26b3a <spi_write_buffer_wait+0x116>
				flush_length--;
			}
		}
	}
#  endif
	return STATUS_OK;
   26b50:	2300      	movs	r3, #0
}
   26b52:	0018      	movs	r0, r3
   26b54:	46bd      	mov	sp, r7
   26b56:	b006      	add	sp, #24
   26b58:	bd80      	pop	{r7, pc}
   26b5a:	46c0      	nop			; (mov r8, r8)
   26b5c:	00026279 	.word	0x00026279
   26b60:	000262c9 	.word	0x000262c9
   26b64:	000262a1 	.word	0x000262a1
   26b68:	00026311 	.word	0x00026311
   26b6c:	00026251 	.word	0x00026251

00026b70 <_spi_write>:
 *
 * \param[in,out]  module  Pointer to SPI software instance struct
 */
static void _spi_write(
		struct spi_module *const module)
{
   26b70:	b580      	push	{r7, lr}
   26b72:	b084      	sub	sp, #16
   26b74:	af00      	add	r7, sp, #0
   26b76:	6078      	str	r0, [r7, #4]
	/* Pointer to the hardware module instance */
	SercomSpi *const spi_hw = &(module->hw->SPI);
   26b78:	687b      	ldr	r3, [r7, #4]
   26b7a:	681b      	ldr	r3, [r3, #0]
   26b7c:	60bb      	str	r3, [r7, #8]

	/* Write value will be at least 8-bits long */
	uint16_t data_to_send = *(module->tx_buffer_ptr);
   26b7e:	687b      	ldr	r3, [r7, #4]
   26b80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   26b82:	781b      	ldrb	r3, [r3, #0]
   26b84:	b2da      	uxtb	r2, r3
   26b86:	230e      	movs	r3, #14
   26b88:	18fb      	adds	r3, r7, r3
   26b8a:	801a      	strh	r2, [r3, #0]
	/* Increment 8-bit pointer */
	(module->tx_buffer_ptr)++;
   26b8c:	687b      	ldr	r3, [r7, #4]
   26b8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   26b90:	1c5a      	adds	r2, r3, #1
   26b92:	687b      	ldr	r3, [r7, #4]
   26b94:	62da      	str	r2, [r3, #44]	; 0x2c

	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
   26b96:	687b      	ldr	r3, [r7, #4]
   26b98:	799b      	ldrb	r3, [r3, #6]
   26b9a:	2b01      	cmp	r3, #1
   26b9c:	d113      	bne.n	26bc6 <_spi_write+0x56>
		data_to_send |= ((*(module->tx_buffer_ptr)) << 8);
   26b9e:	687b      	ldr	r3, [r7, #4]
   26ba0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   26ba2:	781b      	ldrb	r3, [r3, #0]
   26ba4:	b2db      	uxtb	r3, r3
   26ba6:	021b      	lsls	r3, r3, #8
   26ba8:	b21a      	sxth	r2, r3
   26baa:	230e      	movs	r3, #14
   26bac:	18fb      	adds	r3, r7, r3
   26bae:	2100      	movs	r1, #0
   26bb0:	5e5b      	ldrsh	r3, [r3, r1]
   26bb2:	4313      	orrs	r3, r2
   26bb4:	b21a      	sxth	r2, r3
   26bb6:	230e      	movs	r3, #14
   26bb8:	18fb      	adds	r3, r7, r3
   26bba:	801a      	strh	r2, [r3, #0]
		/* Increment 8-bit pointer */
		(module->tx_buffer_ptr)++;
   26bbc:	687b      	ldr	r3, [r7, #4]
   26bbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   26bc0:	1c5a      	adds	r2, r3, #1
   26bc2:	687b      	ldr	r3, [r7, #4]
   26bc4:	62da      	str	r2, [r3, #44]	; 0x2c
	}

	/* Write the data to send*/
	spi_hw->DATA.reg = data_to_send & SERCOM_SPI_DATA_MASK;
   26bc6:	230e      	movs	r3, #14
   26bc8:	18fb      	adds	r3, r7, r3
   26bca:	881b      	ldrh	r3, [r3, #0]
   26bcc:	05db      	lsls	r3, r3, #23
   26bce:	0dda      	lsrs	r2, r3, #23
   26bd0:	68bb      	ldr	r3, [r7, #8]
   26bd2:	629a      	str	r2, [r3, #40]	; 0x28

	/* Decrement remaining buffer length */
	(module->remaining_tx_buffer_length)--;
   26bd4:	687b      	ldr	r3, [r7, #4]
   26bd6:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
   26bd8:	b29b      	uxth	r3, r3
   26bda:	3b01      	subs	r3, #1
   26bdc:	b29a      	uxth	r2, r3
   26bde:	687b      	ldr	r3, [r7, #4]
   26be0:	869a      	strh	r2, [r3, #52]	; 0x34
}
   26be2:	46c0      	nop			; (mov r8, r8)
   26be4:	46bd      	mov	sp, r7
   26be6:	b004      	add	sp, #16
   26be8:	bd80      	pop	{r7, pc}
	...

00026bec <_spi_write_dummy>:
 *
 * \param[in,out]  module  Pointer to SPI software instance struct
 */
static void _spi_write_dummy(
		struct spi_module *const module)
{
   26bec:	b580      	push	{r7, lr}
   26bee:	b084      	sub	sp, #16
   26bf0:	af00      	add	r7, sp, #0
   26bf2:	6078      	str	r0, [r7, #4]
	/* Pointer to the hardware module instance */
	SercomSpi *const spi_hw = &(module->hw->SPI);
   26bf4:	687b      	ldr	r3, [r7, #4]
   26bf6:	681b      	ldr	r3, [r3, #0]
   26bf8:	60fb      	str	r3, [r7, #12]

	/* Write dummy byte */
	spi_hw->DATA.reg = dummy_write;
   26bfa:	4b08      	ldr	r3, [pc, #32]	; (26c1c <_spi_write_dummy+0x30>)
   26bfc:	881b      	ldrh	r3, [r3, #0]
   26bfe:	001a      	movs	r2, r3
   26c00:	68fb      	ldr	r3, [r7, #12]
   26c02:	629a      	str	r2, [r3, #40]	; 0x28

	/* Decrement remaining dummy buffer length */
	module->remaining_dummy_buffer_length--;
   26c04:	687b      	ldr	r3, [r7, #4]
   26c06:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
   26c08:	b29b      	uxth	r3, r3
   26c0a:	3b01      	subs	r3, #1
   26c0c:	b29a      	uxth	r2, r3
   26c0e:	687b      	ldr	r3, [r7, #4]
   26c10:	865a      	strh	r2, [r3, #50]	; 0x32
}
   26c12:	46c0      	nop			; (mov r8, r8)
   26c14:	46bd      	mov	sp, r7
   26c16:	b004      	add	sp, #16
   26c18:	bd80      	pop	{r7, pc}
   26c1a:	46c0      	nop			; (mov r8, r8)
   26c1c:	200056c0 	.word	0x200056c0

00026c20 <_spi_read_dummy>:
 *
 * \param[in,out]  module  Pointer to SPI software instance struct
 */
static void _spi_read_dummy(
		struct spi_module *const module)
{
   26c20:	b580      	push	{r7, lr}
   26c22:	b084      	sub	sp, #16
   26c24:	af00      	add	r7, sp, #0
   26c26:	6078      	str	r0, [r7, #4]
	/* Pointer to the hardware module instance */
	SercomSpi *const spi_hw = &(module->hw->SPI);
   26c28:	687b      	ldr	r3, [r7, #4]
   26c2a:	681b      	ldr	r3, [r3, #0]
   26c2c:	60fb      	str	r3, [r7, #12]
	uint16_t flush = 0;
   26c2e:	230a      	movs	r3, #10
   26c30:	18fb      	adds	r3, r7, r3
   26c32:	2200      	movs	r2, #0
   26c34:	801a      	strh	r2, [r3, #0]

	/* Read dummy byte */
	flush = spi_hw->DATA.reg;
   26c36:	68fb      	ldr	r3, [r7, #12]
   26c38:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   26c3a:	230a      	movs	r3, #10
   26c3c:	18fb      	adds	r3, r7, r3
   26c3e:	801a      	strh	r2, [r3, #0]
	UNUSED(flush);

	/* Decrement remaining dummy buffer length */
	module->remaining_dummy_buffer_length--;
   26c40:	687b      	ldr	r3, [r7, #4]
   26c42:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
   26c44:	b29b      	uxth	r3, r3
   26c46:	3b01      	subs	r3, #1
   26c48:	b29a      	uxth	r2, r3
   26c4a:	687b      	ldr	r3, [r7, #4]
   26c4c:	865a      	strh	r2, [r3, #50]	; 0x32
}
   26c4e:	46c0      	nop			; (mov r8, r8)
   26c50:	46bd      	mov	sp, r7
   26c52:	b004      	add	sp, #16
   26c54:	bd80      	pop	{r7, pc}

00026c56 <_spi_read>:
 *
 * \param[in,out]  module  Pointer to SPI software instance struct
 */
static void _spi_read(
		struct spi_module *const module)
{
   26c56:	b580      	push	{r7, lr}
   26c58:	b084      	sub	sp, #16
   26c5a:	af00      	add	r7, sp, #0
   26c5c:	6078      	str	r0, [r7, #4]
	/* Pointer to the hardware module instance */
	SercomSpi *const spi_hw = &(module->hw->SPI);
   26c5e:	687b      	ldr	r3, [r7, #4]
   26c60:	681b      	ldr	r3, [r3, #0]
   26c62:	60fb      	str	r3, [r7, #12]

	uint16_t received_data = (spi_hw->DATA.reg & SERCOM_SPI_DATA_MASK);
   26c64:	68fb      	ldr	r3, [r7, #12]
   26c66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   26c68:	b29a      	uxth	r2, r3
   26c6a:	230a      	movs	r3, #10
   26c6c:	18fb      	adds	r3, r7, r3
   26c6e:	05d2      	lsls	r2, r2, #23
   26c70:	0dd2      	lsrs	r2, r2, #23
   26c72:	801a      	strh	r2, [r3, #0]

	/* Read value will be at least 8-bits long */
	*(module->rx_buffer_ptr) = received_data;
   26c74:	687b      	ldr	r3, [r7, #4]
   26c76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   26c78:	220a      	movs	r2, #10
   26c7a:	18ba      	adds	r2, r7, r2
   26c7c:	8812      	ldrh	r2, [r2, #0]
   26c7e:	b2d2      	uxtb	r2, r2
   26c80:	701a      	strb	r2, [r3, #0]
	/* Increment 8-bit pointer */
	module->rx_buffer_ptr += 1;
   26c82:	687b      	ldr	r3, [r7, #4]
   26c84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   26c86:	1c5a      	adds	r2, r3, #1
   26c88:	687b      	ldr	r3, [r7, #4]
   26c8a:	629a      	str	r2, [r3, #40]	; 0x28

	if(module->character_size == SPI_CHARACTER_SIZE_9BIT) {
   26c8c:	687b      	ldr	r3, [r7, #4]
   26c8e:	799b      	ldrb	r3, [r3, #6]
   26c90:	2b01      	cmp	r3, #1
   26c92:	d10d      	bne.n	26cb0 <_spi_read+0x5a>
		/* 9-bit data, write next received byte to the buffer */
		*(module->rx_buffer_ptr) = (received_data >> 8);
   26c94:	687b      	ldr	r3, [r7, #4]
   26c96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   26c98:	220a      	movs	r2, #10
   26c9a:	18ba      	adds	r2, r7, r2
   26c9c:	8812      	ldrh	r2, [r2, #0]
   26c9e:	0a12      	lsrs	r2, r2, #8
   26ca0:	b292      	uxth	r2, r2
   26ca2:	b2d2      	uxtb	r2, r2
   26ca4:	701a      	strb	r2, [r3, #0]
		/* Increment 8-bit pointer */
		module->rx_buffer_ptr += 1;
   26ca6:	687b      	ldr	r3, [r7, #4]
   26ca8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   26caa:	1c5a      	adds	r2, r3, #1
   26cac:	687b      	ldr	r3, [r7, #4]
   26cae:	629a      	str	r2, [r3, #40]	; 0x28
	}

	/* Decrement length of the remaining buffer */
	module->remaining_rx_buffer_length--;
   26cb0:	687b      	ldr	r3, [r7, #4]
   26cb2:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
   26cb4:	b29b      	uxth	r3, r3
   26cb6:	3b01      	subs	r3, #1
   26cb8:	b29a      	uxth	r2, r3
   26cba:	687b      	ldr	r3, [r7, #4]
   26cbc:	861a      	strh	r2, [r3, #48]	; 0x30
}
   26cbe:	46c0      	nop			; (mov r8, r8)
   26cc0:	46bd      	mov	sp, r7
   26cc2:	b004      	add	sp, #16
   26cc4:	bd80      	pop	{r7, pc}
	...

00026cc8 <_spi_interrupt_handler>:
 * \param[in]  instance  ID of the SERCOM instance calling the interrupt
 *                       handler.
 */
void _spi_interrupt_handler(
		uint8_t instance)
{
   26cc8:	b580      	push	{r7, lr}
   26cca:	b086      	sub	sp, #24
   26ccc:	af00      	add	r7, sp, #0
   26cce:	0002      	movs	r2, r0
   26cd0:	1dfb      	adds	r3, r7, #7
   26cd2:	701a      	strb	r2, [r3, #0]
	/* Get device instance from the look-up table */
	struct spi_module *module
		= (struct spi_module *)_sercom_instances[instance];
   26cd4:	1dfb      	adds	r3, r7, #7
   26cd6:	781a      	ldrb	r2, [r3, #0]
	struct spi_module *module
   26cd8:	4b96      	ldr	r3, [pc, #600]	; (26f34 <_spi_interrupt_handler+0x26c>)
   26cda:	0092      	lsls	r2, r2, #2
   26cdc:	58d3      	ldr	r3, [r2, r3]
   26cde:	617b      	str	r3, [r7, #20]

	/* Pointer to the hardware module instance */
	SercomSpi *const spi_hw = &(module->hw->SPI);
   26ce0:	697b      	ldr	r3, [r7, #20]
   26ce2:	681b      	ldr	r3, [r3, #0]
   26ce4:	613b      	str	r3, [r7, #16]

	/* Combine callback registered and enabled masks. */
	uint8_t callback_mask =
			module->enabled_callback & module->registered_callback;
   26ce6:	697b      	ldr	r3, [r7, #20]
   26ce8:	2237      	movs	r2, #55	; 0x37
   26cea:	5c9a      	ldrb	r2, [r3, r2]
   26cec:	697b      	ldr	r3, [r7, #20]
   26cee:	2136      	movs	r1, #54	; 0x36
   26cf0:	5c59      	ldrb	r1, [r3, r1]
	uint8_t callback_mask =
   26cf2:	230f      	movs	r3, #15
   26cf4:	18fb      	adds	r3, r7, r3
   26cf6:	400a      	ands	r2, r1
   26cf8:	701a      	strb	r2, [r3, #0]

	/* Read and mask interrupt flag register */
	uint16_t interrupt_status = spi_hw->INTFLAG.reg;
   26cfa:	693b      	ldr	r3, [r7, #16]
   26cfc:	7e1b      	ldrb	r3, [r3, #24]
   26cfe:	b2da      	uxtb	r2, r3
   26d00:	230c      	movs	r3, #12
   26d02:	18fb      	adds	r3, r7, r3
   26d04:	801a      	strh	r2, [r3, #0]
	interrupt_status &= spi_hw->INTENSET.reg;
   26d06:	693b      	ldr	r3, [r7, #16]
   26d08:	7d9b      	ldrb	r3, [r3, #22]
   26d0a:	b2db      	uxtb	r3, r3
   26d0c:	b29a      	uxth	r2, r3
   26d0e:	230c      	movs	r3, #12
   26d10:	18fb      	adds	r3, r7, r3
   26d12:	210c      	movs	r1, #12
   26d14:	1879      	adds	r1, r7, r1
   26d16:	8809      	ldrh	r1, [r1, #0]
   26d18:	400a      	ands	r2, r1
   26d1a:	801a      	strh	r2, [r3, #0]

	/* Data register empty interrupt */
	if (interrupt_status & SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY) {
   26d1c:	230c      	movs	r3, #12
   26d1e:	18fb      	adds	r3, r7, r3
   26d20:	881b      	ldrh	r3, [r3, #0]
   26d22:	2201      	movs	r2, #1
   26d24:	4013      	ands	r3, r2
   26d26:	d038      	beq.n	26d9a <_spi_interrupt_handler+0xd2>
#  if CONF_SPI_MASTER_ENABLE == true
		if ((module->mode == SPI_MODE_MASTER) &&
   26d28:	697b      	ldr	r3, [r7, #20]
   26d2a:	795b      	ldrb	r3, [r3, #5]
   26d2c:	2b01      	cmp	r3, #1
   26d2e:	d110      	bne.n	26d52 <_spi_interrupt_handler+0x8a>
			(module->dir == SPI_DIRECTION_READ)) {
   26d30:	697b      	ldr	r3, [r7, #20]
   26d32:	7a5b      	ldrb	r3, [r3, #9]
   26d34:	b2db      	uxtb	r3, r3
		if ((module->mode == SPI_MODE_MASTER) &&
   26d36:	2b00      	cmp	r3, #0
   26d38:	d10b      	bne.n	26d52 <_spi_interrupt_handler+0x8a>
			/* Send dummy byte when reading in master mode */
			_spi_write_dummy(module);
   26d3a:	697b      	ldr	r3, [r7, #20]
   26d3c:	0018      	movs	r0, r3
   26d3e:	4b7e      	ldr	r3, [pc, #504]	; (26f38 <_spi_interrupt_handler+0x270>)
   26d40:	4798      	blx	r3
			if (module->remaining_dummy_buffer_length == 0) {
   26d42:	697b      	ldr	r3, [r7, #20]
   26d44:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
   26d46:	b29b      	uxth	r3, r3
   26d48:	2b00      	cmp	r3, #0
   26d4a:	d102      	bne.n	26d52 <_spi_interrupt_handler+0x8a>
				/* Disable the Data Register Empty Interrupt */
				spi_hw->INTENCLR.reg
						= SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY;
   26d4c:	693b      	ldr	r3, [r7, #16]
   26d4e:	2201      	movs	r2, #1
   26d50:	751a      	strb	r2, [r3, #20]
		}
#  endif

		if (0
#  if CONF_SPI_MASTER_ENABLE == true
		|| ((module->mode == SPI_MODE_MASTER) &&
   26d52:	697b      	ldr	r3, [r7, #20]
   26d54:	795b      	ldrb	r3, [r3, #5]
		if (0
   26d56:	2b01      	cmp	r3, #1
   26d58:	d11f      	bne.n	26d9a <_spi_interrupt_handler+0xd2>
			(module->dir != SPI_DIRECTION_READ))
   26d5a:	697b      	ldr	r3, [r7, #20]
   26d5c:	7a5b      	ldrb	r3, [r3, #9]
   26d5e:	b2db      	uxtb	r3, r3
		|| ((module->mode == SPI_MODE_MASTER) &&
   26d60:	2b00      	cmp	r3, #0
   26d62:	d01a      	beq.n	26d9a <_spi_interrupt_handler+0xd2>
		|| ((module->mode == SPI_MODE_SLAVE) &&
			(module->dir != SPI_DIRECTION_READ))
#  endif
		) {
			/* Write next byte from buffer */
			_spi_write(module);
   26d64:	697b      	ldr	r3, [r7, #20]
   26d66:	0018      	movs	r0, r3
   26d68:	4b74      	ldr	r3, [pc, #464]	; (26f3c <_spi_interrupt_handler+0x274>)
   26d6a:	4798      	blx	r3
			if (module->remaining_tx_buffer_length == 0) {
   26d6c:	697b      	ldr	r3, [r7, #20]
   26d6e:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
   26d70:	b29b      	uxth	r3, r3
   26d72:	2b00      	cmp	r3, #0
   26d74:	d111      	bne.n	26d9a <_spi_interrupt_handler+0xd2>
				/* Disable the Data Register Empty Interrupt */
				spi_hw->INTENCLR.reg
						= SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY;
   26d76:	693b      	ldr	r3, [r7, #16]
   26d78:	2201      	movs	r2, #1
   26d7a:	751a      	strb	r2, [r3, #20]

				if (module->dir == SPI_DIRECTION_WRITE &&
   26d7c:	697b      	ldr	r3, [r7, #20]
   26d7e:	7a5b      	ldrb	r3, [r3, #9]
   26d80:	b2db      	uxtb	r3, r3
   26d82:	2b01      	cmp	r3, #1
   26d84:	d109      	bne.n	26d9a <_spi_interrupt_handler+0xd2>
						!(module->receiver_enabled)) {
   26d86:	697b      	ldr	r3, [r7, #20]
   26d88:	79db      	ldrb	r3, [r3, #7]
   26d8a:	2201      	movs	r2, #1
   26d8c:	4053      	eors	r3, r2
   26d8e:	b2db      	uxtb	r3, r3
				if (module->dir == SPI_DIRECTION_WRITE &&
   26d90:	2b00      	cmp	r3, #0
   26d92:	d002      	beq.n	26d9a <_spi_interrupt_handler+0xd2>
					/* Enable the Data Register transmit complete Interrupt */
					spi_hw->INTENSET.reg = SPI_INTERRUPT_FLAG_TX_COMPLETE;
   26d94:	693b      	ldr	r3, [r7, #16]
   26d96:	2202      	movs	r2, #2
   26d98:	759a      	strb	r2, [r3, #22]
			}
		}
	}

	/* Receive complete interrupt*/
	if (interrupt_status & SPI_INTERRUPT_FLAG_RX_COMPLETE) {
   26d9a:	230c      	movs	r3, #12
   26d9c:	18fb      	adds	r3, r7, r3
   26d9e:	881b      	ldrh	r3, [r3, #0]
   26da0:	2204      	movs	r2, #4
   26da2:	4013      	ands	r3, r2
   26da4:	d100      	bne.n	26da8 <_spi_interrupt_handler+0xe0>
   26da6:	e07e      	b.n	26ea6 <_spi_interrupt_handler+0x1de>
		/* Check for overflow */
		if (spi_hw->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
   26da8:	693b      	ldr	r3, [r7, #16]
   26daa:	8b5b      	ldrh	r3, [r3, #26]
   26dac:	b29b      	uxth	r3, r3
   26dae:	001a      	movs	r2, r3
   26db0:	2304      	movs	r3, #4
   26db2:	4013      	ands	r3, r2
   26db4:	d022      	beq.n	26dfc <_spi_interrupt_handler+0x134>
			if (module->dir != SPI_DIRECTION_WRITE) {
   26db6:	697b      	ldr	r3, [r7, #20]
   26db8:	7a5b      	ldrb	r3, [r3, #9]
   26dba:	b2db      	uxtb	r3, r3
   26dbc:	2b01      	cmp	r3, #1
   26dbe:	d014      	beq.n	26dea <_spi_interrupt_handler+0x122>
				/* Store the error code */
				module->status = STATUS_ERR_OVERFLOW;
   26dc0:	697b      	ldr	r3, [r7, #20]
   26dc2:	2238      	movs	r2, #56	; 0x38
   26dc4:	211e      	movs	r1, #30
   26dc6:	5499      	strb	r1, [r3, r2]

				/* End transaction */
				module->dir = SPI_DIRECTION_IDLE;
   26dc8:	697b      	ldr	r3, [r7, #20]
   26dca:	2203      	movs	r2, #3
   26dcc:	725a      	strb	r2, [r3, #9]

				spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_RX_COMPLETE |
   26dce:	693b      	ldr	r3, [r7, #16]
   26dd0:	2205      	movs	r2, #5
   26dd2:	751a      	strb	r2, [r3, #20]
						SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY;
				/* Run callback if registered and enabled */
				if (callback_mask & (1 << SPI_CALLBACK_ERROR)) {
   26dd4:	230f      	movs	r3, #15
   26dd6:	18fb      	adds	r3, r7, r3
   26dd8:	781b      	ldrb	r3, [r3, #0]
   26dda:	2208      	movs	r2, #8
   26ddc:	4013      	ands	r3, r2
   26dde:	d004      	beq.n	26dea <_spi_interrupt_handler+0x122>
					(module->callback[SPI_CALLBACK_ERROR])(module);
   26de0:	697b      	ldr	r3, [r7, #20]
   26de2:	699b      	ldr	r3, [r3, #24]
   26de4:	697a      	ldr	r2, [r7, #20]
   26de6:	0010      	movs	r0, r2
   26de8:	4798      	blx	r3
				}
			}
			/* Flush */
			uint16_t flush = spi_hw->DATA.reg;
   26dea:	693b      	ldr	r3, [r7, #16]
   26dec:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   26dee:	230a      	movs	r3, #10
   26df0:	18fb      	adds	r3, r7, r3
   26df2:	801a      	strh	r2, [r3, #0]
			UNUSED(flush);
			/* Clear overflow flag */
			spi_hw->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
   26df4:	693b      	ldr	r3, [r7, #16]
   26df6:	2204      	movs	r2, #4
   26df8:	835a      	strh	r2, [r3, #26]
   26dfa:	e054      	b.n	26ea6 <_spi_interrupt_handler+0x1de>
		} else {
			if (module->dir == SPI_DIRECTION_WRITE) {
   26dfc:	697b      	ldr	r3, [r7, #20]
   26dfe:	7a5b      	ldrb	r3, [r3, #9]
   26e00:	b2db      	uxtb	r3, r3
   26e02:	2b01      	cmp	r3, #1
   26e04:	d11e      	bne.n	26e44 <_spi_interrupt_handler+0x17c>
				/* Flush receive buffer when writing */
				_spi_read_dummy(module);
   26e06:	697b      	ldr	r3, [r7, #20]
   26e08:	0018      	movs	r0, r3
   26e0a:	4b4d      	ldr	r3, [pc, #308]	; (26f40 <_spi_interrupt_handler+0x278>)
   26e0c:	4798      	blx	r3
				if (module->remaining_dummy_buffer_length == 0) {
   26e0e:	697b      	ldr	r3, [r7, #20]
   26e10:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
   26e12:	b29b      	uxth	r3, r3
   26e14:	2b00      	cmp	r3, #0
   26e16:	d146      	bne.n	26ea6 <_spi_interrupt_handler+0x1de>
					spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_RX_COMPLETE;
   26e18:	693b      	ldr	r3, [r7, #16]
   26e1a:	2204      	movs	r2, #4
   26e1c:	751a      	strb	r2, [r3, #20]
					module->status = STATUS_OK;
   26e1e:	697b      	ldr	r3, [r7, #20]
   26e20:	2238      	movs	r2, #56	; 0x38
   26e22:	2100      	movs	r1, #0
   26e24:	5499      	strb	r1, [r3, r2]
					module->dir = SPI_DIRECTION_IDLE;
   26e26:	697b      	ldr	r3, [r7, #20]
   26e28:	2203      	movs	r2, #3
   26e2a:	725a      	strb	r2, [r3, #9]
					/* Run callback if registered and enabled */
					if (callback_mask &
   26e2c:	230f      	movs	r3, #15
   26e2e:	18fb      	adds	r3, r7, r3
   26e30:	781b      	ldrb	r3, [r3, #0]
   26e32:	2201      	movs	r2, #1
   26e34:	4013      	ands	r3, r2
   26e36:	d036      	beq.n	26ea6 <_spi_interrupt_handler+0x1de>
							(1 << SPI_CALLBACK_BUFFER_TRANSMITTED)){
						(module->callback[SPI_CALLBACK_BUFFER_TRANSMITTED])(module);
   26e38:	697b      	ldr	r3, [r7, #20]
   26e3a:	68db      	ldr	r3, [r3, #12]
   26e3c:	697a      	ldr	r2, [r7, #20]
   26e3e:	0010      	movs	r0, r2
   26e40:	4798      	blx	r3
   26e42:	e030      	b.n	26ea6 <_spi_interrupt_handler+0x1de>
					}
				}
			} else {
				/* Read data register */
				_spi_read(module);
   26e44:	697b      	ldr	r3, [r7, #20]
   26e46:	0018      	movs	r0, r3
   26e48:	4b3e      	ldr	r3, [pc, #248]	; (26f44 <_spi_interrupt_handler+0x27c>)
   26e4a:	4798      	blx	r3

				/* Check if the last character have been received */
				if (module->remaining_rx_buffer_length == 0) {
   26e4c:	697b      	ldr	r3, [r7, #20]
   26e4e:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
   26e50:	b29b      	uxth	r3, r3
   26e52:	2b00      	cmp	r3, #0
   26e54:	d127      	bne.n	26ea6 <_spi_interrupt_handler+0x1de>
					module->status = STATUS_OK;
   26e56:	697b      	ldr	r3, [r7, #20]
   26e58:	2238      	movs	r2, #56	; 0x38
   26e5a:	2100      	movs	r1, #0
   26e5c:	5499      	strb	r1, [r3, r2]
					/* Disable RX Complete Interrupt and set status */
					spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_RX_COMPLETE;
   26e5e:	693b      	ldr	r3, [r7, #16]
   26e60:	2204      	movs	r2, #4
   26e62:	751a      	strb	r2, [r3, #20]
					if(module->dir == SPI_DIRECTION_BOTH) {
   26e64:	697b      	ldr	r3, [r7, #20]
   26e66:	7a5b      	ldrb	r3, [r3, #9]
   26e68:	b2db      	uxtb	r3, r3
   26e6a:	2b02      	cmp	r3, #2
   26e6c:	d10b      	bne.n	26e86 <_spi_interrupt_handler+0x1be>
						if (callback_mask & (1 << SPI_CALLBACK_BUFFER_TRANSCEIVED)) {
   26e6e:	230f      	movs	r3, #15
   26e70:	18fb      	adds	r3, r7, r3
   26e72:	781b      	ldrb	r3, [r3, #0]
   26e74:	2204      	movs	r2, #4
   26e76:	4013      	ands	r3, r2
   26e78:	d015      	beq.n	26ea6 <_spi_interrupt_handler+0x1de>
							(module->callback[SPI_CALLBACK_BUFFER_TRANSCEIVED])(module);
   26e7a:	697b      	ldr	r3, [r7, #20]
   26e7c:	695b      	ldr	r3, [r3, #20]
   26e7e:	697a      	ldr	r2, [r7, #20]
   26e80:	0010      	movs	r0, r2
   26e82:	4798      	blx	r3
   26e84:	e00f      	b.n	26ea6 <_spi_interrupt_handler+0x1de>
						}
					} else if (module->dir == SPI_DIRECTION_READ) {
   26e86:	697b      	ldr	r3, [r7, #20]
   26e88:	7a5b      	ldrb	r3, [r3, #9]
   26e8a:	b2db      	uxtb	r3, r3
   26e8c:	2b00      	cmp	r3, #0
   26e8e:	d10a      	bne.n	26ea6 <_spi_interrupt_handler+0x1de>
						if (callback_mask & (1 << SPI_CALLBACK_BUFFER_RECEIVED)) {
   26e90:	230f      	movs	r3, #15
   26e92:	18fb      	adds	r3, r7, r3
   26e94:	781b      	ldrb	r3, [r3, #0]
   26e96:	2202      	movs	r2, #2
   26e98:	4013      	ands	r3, r2
   26e9a:	d004      	beq.n	26ea6 <_spi_interrupt_handler+0x1de>
							(module->callback[SPI_CALLBACK_BUFFER_RECEIVED])(module);
   26e9c:	697b      	ldr	r3, [r7, #20]
   26e9e:	691b      	ldr	r3, [r3, #16]
   26ea0:	697a      	ldr	r2, [r7, #20]
   26ea2:	0010      	movs	r0, r2
   26ea4:	4798      	blx	r3
			}
		}
	}

	/* Transmit complete */
	if (interrupt_status & SPI_INTERRUPT_FLAG_TX_COMPLETE) {
   26ea6:	230c      	movs	r3, #12
   26ea8:	18fb      	adds	r3, r7, r3
   26eaa:	881b      	ldrh	r3, [r3, #0]
   26eac:	2202      	movs	r2, #2
   26eae:	4013      	ands	r3, r2
   26eb0:	d024      	beq.n	26efc <_spi_interrupt_handler+0x234>
			}

		}
#  endif
#  if CONF_SPI_MASTER_ENABLE == true
		if ((module->mode == SPI_MODE_MASTER) &&
   26eb2:	697b      	ldr	r3, [r7, #20]
   26eb4:	795b      	ldrb	r3, [r3, #5]
   26eb6:	2b01      	cmp	r3, #1
   26eb8:	d120      	bne.n	26efc <_spi_interrupt_handler+0x234>
			(module->dir == SPI_DIRECTION_WRITE) && !(module->receiver_enabled)) {
   26eba:	697b      	ldr	r3, [r7, #20]
   26ebc:	7a5b      	ldrb	r3, [r3, #9]
   26ebe:	b2db      	uxtb	r3, r3
		if ((module->mode == SPI_MODE_MASTER) &&
   26ec0:	2b01      	cmp	r3, #1
   26ec2:	d11b      	bne.n	26efc <_spi_interrupt_handler+0x234>
			(module->dir == SPI_DIRECTION_WRITE) && !(module->receiver_enabled)) {
   26ec4:	697b      	ldr	r3, [r7, #20]
   26ec6:	79db      	ldrb	r3, [r3, #7]
   26ec8:	2201      	movs	r2, #1
   26eca:	4053      	eors	r3, r2
   26ecc:	b2db      	uxtb	r3, r3
   26ece:	2b00      	cmp	r3, #0
   26ed0:	d014      	beq.n	26efc <_spi_interrupt_handler+0x234>
		  	/* Clear interrupt flag */
		 	spi_hw->INTENCLR.reg
					= SPI_INTERRUPT_FLAG_TX_COMPLETE;
   26ed2:	693b      	ldr	r3, [r7, #16]
   26ed4:	2202      	movs	r2, #2
   26ed6:	751a      	strb	r2, [r3, #20]
			/* Buffer sent with receiver disabled */
			module->dir = SPI_DIRECTION_IDLE;
   26ed8:	697b      	ldr	r3, [r7, #20]
   26eda:	2203      	movs	r2, #3
   26edc:	725a      	strb	r2, [r3, #9]
			module->status = STATUS_OK;
   26ede:	697b      	ldr	r3, [r7, #20]
   26ee0:	2238      	movs	r2, #56	; 0x38
   26ee2:	2100      	movs	r1, #0
   26ee4:	5499      	strb	r1, [r3, r2]
			/* Run callback if registered and enabled */
			if (callback_mask & (1 << SPI_CALLBACK_BUFFER_TRANSMITTED)){
   26ee6:	230f      	movs	r3, #15
   26ee8:	18fb      	adds	r3, r7, r3
   26eea:	781b      	ldrb	r3, [r3, #0]
   26eec:	2201      	movs	r2, #1
   26eee:	4013      	ands	r3, r2
   26ef0:	d004      	beq.n	26efc <_spi_interrupt_handler+0x234>
				(module->callback[SPI_CALLBACK_BUFFER_TRANSMITTED])
   26ef2:	697b      	ldr	r3, [r7, #20]
   26ef4:	68db      	ldr	r3, [r3, #12]
   26ef6:	697a      	ldr	r2, [r7, #20]
   26ef8:	0010      	movs	r0, r2
   26efa:	4798      	blx	r3
#  endif
#  endif

#  ifdef FEATURE_SPI_ERROR_INTERRUPT
	/* When combined error happen */
	if (interrupt_status & SPI_INTERRUPT_FLAG_COMBINED_ERROR) {
   26efc:	230c      	movs	r3, #12
   26efe:	18fb      	adds	r3, r7, r3
   26f00:	881b      	ldrh	r3, [r3, #0]
   26f02:	2280      	movs	r2, #128	; 0x80
   26f04:	4013      	ands	r3, r2
   26f06:	d010      	beq.n	26f2a <_spi_interrupt_handler+0x262>
		/* Disable interrupts */
		spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_COMBINED_ERROR;
   26f08:	693b      	ldr	r3, [r7, #16]
   26f0a:	2280      	movs	r2, #128	; 0x80
   26f0c:	751a      	strb	r2, [r3, #20]
		/* Clear interrupt flag */
		spi_hw->INTFLAG.reg = SPI_INTERRUPT_FLAG_COMBINED_ERROR;
   26f0e:	693b      	ldr	r3, [r7, #16]
   26f10:	2280      	movs	r2, #128	; 0x80
   26f12:	761a      	strb	r2, [r3, #24]

		if (callback_mask & (1 << SPI_CALLBACK_COMBINED_ERROR)) {
   26f14:	230f      	movs	r3, #15
   26f16:	18fb      	adds	r3, r7, r3
   26f18:	781b      	ldrb	r3, [r3, #0]
   26f1a:	2240      	movs	r2, #64	; 0x40
   26f1c:	4013      	ands	r3, r2
   26f1e:	d004      	beq.n	26f2a <_spi_interrupt_handler+0x262>
			(module->callback[SPI_CALLBACK_COMBINED_ERROR])(module);
   26f20:	697b      	ldr	r3, [r7, #20]
   26f22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   26f24:	697a      	ldr	r2, [r7, #20]
   26f26:	0010      	movs	r0, r2
   26f28:	4798      	blx	r3
		}
	}
#  endif
}
   26f2a:	46c0      	nop			; (mov r8, r8)
   26f2c:	46bd      	mov	sp, r7
   26f2e:	b006      	add	sp, #24
   26f30:	bd80      	pop	{r7, pc}
   26f32:	46c0      	nop			; (mov r8, r8)
   26f34:	200056a8 	.word	0x200056a8
   26f38:	00026bed 	.word	0x00026bed
   26f3c:	00026b71 	.word	0x00026b71
   26f40:	00026c21 	.word	0x00026c21
   26f44:	00026c57 	.word	0x00026c57

00026f48 <system_gclk_chan_get_config_defaults>:
{
   26f48:	b580      	push	{r7, lr}
   26f4a:	b082      	sub	sp, #8
   26f4c:	af00      	add	r7, sp, #0
   26f4e:	6078      	str	r0, [r7, #4]
	config->source_generator = GCLK_GENERATOR_0;
   26f50:	687b      	ldr	r3, [r7, #4]
   26f52:	2200      	movs	r2, #0
   26f54:	701a      	strb	r2, [r3, #0]
}
   26f56:	46c0      	nop			; (mov r8, r8)
   26f58:	46bd      	mov	sp, r7
   26f5a:	b002      	add	sp, #8
   26f5c:	bd80      	pop	{r7, pc}
	...

00026f60 <system_apb_clock_set_mask>:
{
   26f60:	b580      	push	{r7, lr}
   26f62:	b082      	sub	sp, #8
   26f64:	af00      	add	r7, sp, #0
   26f66:	0002      	movs	r2, r0
   26f68:	6039      	str	r1, [r7, #0]
   26f6a:	1dfb      	adds	r3, r7, #7
   26f6c:	701a      	strb	r2, [r3, #0]
	switch (bus) {
   26f6e:	1dfb      	adds	r3, r7, #7
   26f70:	781b      	ldrb	r3, [r3, #0]
   26f72:	2b01      	cmp	r3, #1
   26f74:	d00a      	beq.n	26f8c <system_apb_clock_set_mask+0x2c>
   26f76:	2b02      	cmp	r3, #2
   26f78:	d00f      	beq.n	26f9a <system_apb_clock_set_mask+0x3a>
   26f7a:	2b00      	cmp	r3, #0
   26f7c:	d114      	bne.n	26fa8 <system_apb_clock_set_mask+0x48>
			PM->APBAMASK.reg |= mask;
   26f7e:	4b0e      	ldr	r3, [pc, #56]	; (26fb8 <system_apb_clock_set_mask+0x58>)
   26f80:	4a0d      	ldr	r2, [pc, #52]	; (26fb8 <system_apb_clock_set_mask+0x58>)
   26f82:	6991      	ldr	r1, [r2, #24]
   26f84:	683a      	ldr	r2, [r7, #0]
   26f86:	430a      	orrs	r2, r1
   26f88:	619a      	str	r2, [r3, #24]
			break;
   26f8a:	e00f      	b.n	26fac <system_apb_clock_set_mask+0x4c>
			PM->APBBMASK.reg |= mask;
   26f8c:	4b0a      	ldr	r3, [pc, #40]	; (26fb8 <system_apb_clock_set_mask+0x58>)
   26f8e:	4a0a      	ldr	r2, [pc, #40]	; (26fb8 <system_apb_clock_set_mask+0x58>)
   26f90:	69d1      	ldr	r1, [r2, #28]
   26f92:	683a      	ldr	r2, [r7, #0]
   26f94:	430a      	orrs	r2, r1
   26f96:	61da      	str	r2, [r3, #28]
			break;
   26f98:	e008      	b.n	26fac <system_apb_clock_set_mask+0x4c>
			PM->APBCMASK.reg |= mask;
   26f9a:	4b07      	ldr	r3, [pc, #28]	; (26fb8 <system_apb_clock_set_mask+0x58>)
   26f9c:	4a06      	ldr	r2, [pc, #24]	; (26fb8 <system_apb_clock_set_mask+0x58>)
   26f9e:	6a11      	ldr	r1, [r2, #32]
   26fa0:	683a      	ldr	r2, [r7, #0]
   26fa2:	430a      	orrs	r2, r1
   26fa4:	621a      	str	r2, [r3, #32]
			break;
   26fa6:	e001      	b.n	26fac <system_apb_clock_set_mask+0x4c>
			return STATUS_ERR_INVALID_ARG;
   26fa8:	2317      	movs	r3, #23
   26faa:	e000      	b.n	26fae <system_apb_clock_set_mask+0x4e>
	return STATUS_OK;
   26fac:	2300      	movs	r3, #0
}
   26fae:	0018      	movs	r0, r3
   26fb0:	46bd      	mov	sp, r7
   26fb2:	b002      	add	sp, #8
   26fb4:	bd80      	pop	{r7, pc}
   26fb6:	46c0      	nop			; (mov r8, r8)
   26fb8:	40000400 	.word	0x40000400

00026fbc <system_pinmux_get_config_defaults>:
{
   26fbc:	b580      	push	{r7, lr}
   26fbe:	b082      	sub	sp, #8
   26fc0:	af00      	add	r7, sp, #0
   26fc2:	6078      	str	r0, [r7, #4]
	config->mux_position = SYSTEM_PINMUX_GPIO;
   26fc4:	687b      	ldr	r3, [r7, #4]
   26fc6:	2280      	movs	r2, #128	; 0x80
   26fc8:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
   26fca:	687b      	ldr	r3, [r7, #4]
   26fcc:	2200      	movs	r2, #0
   26fce:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
   26fd0:	687b      	ldr	r3, [r7, #4]
   26fd2:	2201      	movs	r2, #1
   26fd4:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
   26fd6:	687b      	ldr	r3, [r7, #4]
   26fd8:	2200      	movs	r2, #0
   26fda:	70da      	strb	r2, [r3, #3]
}
   26fdc:	46c0      	nop			; (mov r8, r8)
   26fde:	46bd      	mov	sp, r7
   26fe0:	b002      	add	sp, #8
   26fe2:	bd80      	pop	{r7, pc}

00026fe4 <system_is_debugger_present>:
{
   26fe4:	b580      	push	{r7, lr}
   26fe6:	af00      	add	r7, sp, #0
	return DSU->STATUSB.reg & DSU_STATUSB_DBGPRES;
   26fe8:	4b05      	ldr	r3, [pc, #20]	; (27000 <system_is_debugger_present+0x1c>)
   26fea:	789b      	ldrb	r3, [r3, #2]
   26fec:	b2db      	uxtb	r3, r3
   26fee:	001a      	movs	r2, r3
   26ff0:	2302      	movs	r3, #2
   26ff2:	4013      	ands	r3, r2
   26ff4:	1e5a      	subs	r2, r3, #1
   26ff6:	4193      	sbcs	r3, r2
   26ff8:	b2db      	uxtb	r3, r3
}
   26ffa:	0018      	movs	r0, r3
   26ffc:	46bd      	mov	sp, r7
   26ffe:	bd80      	pop	{r7, pc}
   27000:	41002000 	.word	0x41002000

00027004 <usart_is_syncing>:
{
   27004:	b580      	push	{r7, lr}
   27006:	b084      	sub	sp, #16
   27008:	af00      	add	r7, sp, #0
   2700a:	6078      	str	r0, [r7, #4]
	SercomUsart *const usart_hw = &(module->hw->USART);
   2700c:	687b      	ldr	r3, [r7, #4]
   2700e:	681b      	ldr	r3, [r3, #0]
   27010:	60fb      	str	r3, [r7, #12]
	return (usart_hw->SYNCBUSY.reg);
   27012:	68fb      	ldr	r3, [r7, #12]
   27014:	69db      	ldr	r3, [r3, #28]
   27016:	1e5a      	subs	r2, r3, #1
   27018:	4193      	sbcs	r3, r2
   2701a:	b2db      	uxtb	r3, r3
}
   2701c:	0018      	movs	r0, r3
   2701e:	46bd      	mov	sp, r7
   27020:	b004      	add	sp, #16
   27022:	bd80      	pop	{r7, pc}

00027024 <_usart_wait_for_sync>:
{
   27024:	b580      	push	{r7, lr}
   27026:	b082      	sub	sp, #8
   27028:	af00      	add	r7, sp, #0
   2702a:	6078      	str	r0, [r7, #4]
	while (usart_is_syncing(module)) {
   2702c:	46c0      	nop			; (mov r8, r8)
   2702e:	687b      	ldr	r3, [r7, #4]
   27030:	0018      	movs	r0, r3
   27032:	4b04      	ldr	r3, [pc, #16]	; (27044 <_usart_wait_for_sync+0x20>)
   27034:	4798      	blx	r3
   27036:	1e03      	subs	r3, r0, #0
   27038:	d1f9      	bne.n	2702e <_usart_wait_for_sync+0xa>
}
   2703a:	46c0      	nop			; (mov r8, r8)
   2703c:	46bd      	mov	sp, r7
   2703e:	b002      	add	sp, #8
   27040:	bd80      	pop	{r7, pc}
   27042:	46c0      	nop			; (mov r8, r8)
   27044:	00027005 	.word	0x00027005

00027048 <_usart_set_config>:
 * Set Configuration of the USART module
 */
static enum status_code _usart_set_config(
		struct usart_module *const module,
		const struct usart_config *const config)
{
   27048:	b5b0      	push	{r4, r5, r7, lr}
   2704a:	b08c      	sub	sp, #48	; 0x30
   2704c:	af02      	add	r7, sp, #8
   2704e:	6078      	str	r0, [r7, #4]
   27050:	6039      	str	r1, [r7, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
   27052:	687b      	ldr	r3, [r7, #4]
   27054:	681b      	ldr	r3, [r3, #0]
   27056:	61bb      	str	r3, [r7, #24]

	/* Index for generic clock */
	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
   27058:	687b      	ldr	r3, [r7, #4]
   2705a:	681b      	ldr	r3, [r3, #0]
   2705c:	0018      	movs	r0, r3
   2705e:	4bab      	ldr	r3, [pc, #684]	; (2730c <_usart_set_config+0x2c4>)
   27060:	4798      	blx	r3
   27062:	0003      	movs	r3, r0
   27064:	617b      	str	r3, [r7, #20]
	uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
   27066:	697b      	ldr	r3, [r7, #20]
   27068:	3314      	adds	r3, #20
   2706a:	613b      	str	r3, [r7, #16]

	/* Cache new register values to minimize the number of register writes */
	uint32_t ctrla = 0;
   2706c:	2300      	movs	r3, #0
   2706e:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t ctrlb = 0;
   27070:	2300      	movs	r3, #0
   27072:	623b      	str	r3, [r7, #32]
#ifdef FEATURE_USART_ISO7816
	uint32_t ctrlc = 0;
#endif
	uint16_t baud  = 0;
   27074:	230a      	movs	r3, #10
   27076:	18fb      	adds	r3, r7, r3
   27078:	2200      	movs	r2, #0
   2707a:	801a      	strh	r2, [r3, #0]
	uint32_t transfer_mode;

	enum sercom_asynchronous_operation_mode mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
   2707c:	231f      	movs	r3, #31
   2707e:	18fb      	adds	r3, r7, r3
   27080:	2200      	movs	r2, #0
   27082:	701a      	strb	r2, [r3, #0]
	enum sercom_asynchronous_sample_num sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
   27084:	231e      	movs	r3, #30
   27086:	18fb      	adds	r3, r7, r3
   27088:	2210      	movs	r2, #16
   2708a:	701a      	strb	r2, [r3, #0]

#ifdef FEATURE_USART_OVER_SAMPLE
	switch (config->sample_rate) {
   2708c:	683b      	ldr	r3, [r7, #0]
   2708e:	8a1b      	ldrh	r3, [r3, #16]
   27090:	2280      	movs	r2, #128	; 0x80
   27092:	01d2      	lsls	r2, r2, #7
   27094:	4293      	cmp	r3, r2
   27096:	d01c      	beq.n	270d2 <_usart_set_config+0x8a>
   27098:	2280      	movs	r2, #128	; 0x80
   2709a:	01d2      	lsls	r2, r2, #7
   2709c:	4293      	cmp	r3, r2
   2709e:	dc06      	bgt.n	270ae <_usart_set_config+0x66>
   270a0:	2b00      	cmp	r3, #0
   270a2:	d00d      	beq.n	270c0 <_usart_set_config+0x78>
   270a4:	2280      	movs	r2, #128	; 0x80
   270a6:	0192      	lsls	r2, r2, #6
   270a8:	4293      	cmp	r3, r2
   270aa:	d024      	beq.n	270f6 <_usart_set_config+0xae>
   270ac:	e035      	b.n	2711a <_usart_set_config+0xd2>
   270ae:	22c0      	movs	r2, #192	; 0xc0
   270b0:	01d2      	lsls	r2, r2, #7
   270b2:	4293      	cmp	r3, r2
   270b4:	d028      	beq.n	27108 <_usart_set_config+0xc0>
   270b6:	2280      	movs	r2, #128	; 0x80
   270b8:	0212      	lsls	r2, r2, #8
   270ba:	4293      	cmp	r3, r2
   270bc:	d012      	beq.n	270e4 <_usart_set_config+0x9c>
   270be:	e02c      	b.n	2711a <_usart_set_config+0xd2>
		case USART_SAMPLE_RATE_16X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
   270c0:	231f      	movs	r3, #31
   270c2:	18fb      	adds	r3, r7, r3
   270c4:	2200      	movs	r2, #0
   270c6:	701a      	strb	r2, [r3, #0]
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
   270c8:	231e      	movs	r3, #30
   270ca:	18fb      	adds	r3, r7, r3
   270cc:	2210      	movs	r2, #16
   270ce:	701a      	strb	r2, [r3, #0]
			break;
   270d0:	e023      	b.n	2711a <_usart_set_config+0xd2>
		case USART_SAMPLE_RATE_8X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
   270d2:	231f      	movs	r3, #31
   270d4:	18fb      	adds	r3, r7, r3
   270d6:	2200      	movs	r2, #0
   270d8:	701a      	strb	r2, [r3, #0]
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
   270da:	231e      	movs	r3, #30
   270dc:	18fb      	adds	r3, r7, r3
   270de:	2208      	movs	r2, #8
   270e0:	701a      	strb	r2, [r3, #0]
			break;
   270e2:	e01a      	b.n	2711a <_usart_set_config+0xd2>
		case USART_SAMPLE_RATE_3X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
   270e4:	231f      	movs	r3, #31
   270e6:	18fb      	adds	r3, r7, r3
   270e8:	2200      	movs	r2, #0
   270ea:	701a      	strb	r2, [r3, #0]
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_3;
   270ec:	231e      	movs	r3, #30
   270ee:	18fb      	adds	r3, r7, r3
   270f0:	2203      	movs	r2, #3
   270f2:	701a      	strb	r2, [r3, #0]
			break;
   270f4:	e011      	b.n	2711a <_usart_set_config+0xd2>
		case USART_SAMPLE_RATE_16X_FRACTIONAL:
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
   270f6:	231f      	movs	r3, #31
   270f8:	18fb      	adds	r3, r7, r3
   270fa:	2201      	movs	r2, #1
   270fc:	701a      	strb	r2, [r3, #0]
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
   270fe:	231e      	movs	r3, #30
   27100:	18fb      	adds	r3, r7, r3
   27102:	2210      	movs	r2, #16
   27104:	701a      	strb	r2, [r3, #0]
			break;
   27106:	e008      	b.n	2711a <_usart_set_config+0xd2>
		case USART_SAMPLE_RATE_8X_FRACTIONAL:
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
   27108:	231f      	movs	r3, #31
   2710a:	18fb      	adds	r3, r7, r3
   2710c:	2201      	movs	r2, #1
   2710e:	701a      	strb	r2, [r3, #0]
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
   27110:	231e      	movs	r3, #30
   27112:	18fb      	adds	r3, r7, r3
   27114:	2208      	movs	r2, #8
   27116:	701a      	strb	r2, [r3, #0]
			break;
   27118:	46c0      	nop			; (mov r8, r8)
	}
#endif

	/* Set data order, internal muxing, and clock polarity */
	ctrla = (uint32_t)config->data_order |
   2711a:	683b      	ldr	r3, [r7, #0]
   2711c:	681a      	ldr	r2, [r3, #0]
		(uint32_t)config->mux_setting |
   2711e:	683b      	ldr	r3, [r7, #0]
   27120:	68db      	ldr	r3, [r3, #12]
	ctrla = (uint32_t)config->data_order |
   27122:	431a      	orrs	r2, r3
	#ifdef FEATURE_USART_OVER_SAMPLE
		config->sample_adjustment |
   27124:	683b      	ldr	r3, [r7, #0]
   27126:	695b      	ldr	r3, [r3, #20]
		(uint32_t)config->mux_setting |
   27128:	4313      	orrs	r3, r2
		config->sample_rate |
   2712a:	683a      	ldr	r2, [r7, #0]
   2712c:	8a12      	ldrh	r2, [r2, #16]
		config->sample_adjustment |
   2712e:	4313      	orrs	r3, r2
	#endif
	#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
   27130:	683a      	ldr	r2, [r7, #0]
   27132:	7e12      	ldrb	r2, [r2, #24]
   27134:	0212      	lsls	r2, r2, #8
		config->sample_rate |
   27136:	4313      	orrs	r3, r2
	#endif
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
   27138:	683a      	ldr	r2, [r7, #0]
   2713a:	2126      	movs	r1, #38	; 0x26
   2713c:	5c52      	ldrb	r2, [r2, r1]
   2713e:	0752      	lsls	r2, r2, #29
	ctrla = (uint32_t)config->data_order |
   27140:	4313      	orrs	r3, r2
   27142:	627b      	str	r3, [r7, #36]	; 0x24

	enum status_code status_code = STATUS_OK;
   27144:	231d      	movs	r3, #29
   27146:	18fb      	adds	r3, r7, r3
   27148:	2200      	movs	r2, #0
   2714a:	701a      	strb	r2, [r3, #0]

	transfer_mode = (uint32_t)config->transfer_mode;
   2714c:	683b      	ldr	r3, [r7, #0]
   2714e:	685b      	ldr	r3, [r3, #4]
   27150:	60fb      	str	r3, [r7, #12]
#ifdef FEATURE_USART_ISO7816
	if(config->iso7816_config.enabled) {
		baud = config->baudrate;
	} else {
#endif
	switch (transfer_mode)
   27152:	68fb      	ldr	r3, [r7, #12]
   27154:	2b00      	cmp	r3, #0
   27156:	d01e      	beq.n	27196 <_usart_set_config+0x14e>
   27158:	2280      	movs	r2, #128	; 0x80
   2715a:	0552      	lsls	r2, r2, #21
   2715c:	4293      	cmp	r3, r2
   2715e:	d14f      	bne.n	27200 <_usart_set_config+0x1b8>
	{
		case USART_TRANSFER_SYNCHRONOUSLY:
			if (!config->use_external_clock) {
   27160:	683b      	ldr	r3, [r7, #0]
   27162:	2227      	movs	r2, #39	; 0x27
   27164:	5c9b      	ldrb	r3, [r3, r2]
   27166:	2201      	movs	r2, #1
   27168:	4053      	eors	r3, r2
   2716a:	b2db      	uxtb	r3, r3
   2716c:	2b00      	cmp	r3, #0
   2716e:	d046      	beq.n	271fe <_usart_set_config+0x1b6>
				status_code = _sercom_get_sync_baud_val(config->baudrate,
   27170:	683b      	ldr	r3, [r7, #0]
   27172:	6a1d      	ldr	r5, [r3, #32]
   27174:	693b      	ldr	r3, [r7, #16]
   27176:	b2db      	uxtb	r3, r3
   27178:	0018      	movs	r0, r3
   2717a:	4b65      	ldr	r3, [pc, #404]	; (27310 <_usart_set_config+0x2c8>)
   2717c:	4798      	blx	r3
   2717e:	0001      	movs	r1, r0
   27180:	231d      	movs	r3, #29
   27182:	18fc      	adds	r4, r7, r3
   27184:	230a      	movs	r3, #10
   27186:	18fb      	adds	r3, r7, r3
   27188:	001a      	movs	r2, r3
   2718a:	0028      	movs	r0, r5
   2718c:	4b61      	ldr	r3, [pc, #388]	; (27314 <_usart_set_config+0x2cc>)
   2718e:	4798      	blx	r3
   27190:	0003      	movs	r3, r0
   27192:	7023      	strb	r3, [r4, #0]
						system_gclk_chan_get_hz(gclk_index), &baud);
			}

			break;
   27194:	e033      	b.n	271fe <_usart_set_config+0x1b6>

		case USART_TRANSFER_ASYNCHRONOUSLY:
			if (config->use_external_clock) {
   27196:	683b      	ldr	r3, [r7, #0]
   27198:	2227      	movs	r2, #39	; 0x27
   2719a:	5c9b      	ldrb	r3, [r3, r2]
   2719c:	2b00      	cmp	r3, #0
   2719e:	d014      	beq.n	271ca <_usart_set_config+0x182>
				status_code =
						_sercom_get_async_baud_val(config->baudrate,
   271a0:	683b      	ldr	r3, [r7, #0]
   271a2:	6a18      	ldr	r0, [r3, #32]
   271a4:	683b      	ldr	r3, [r7, #0]
   271a6:	6a99      	ldr	r1, [r3, #40]	; 0x28
				status_code =
   271a8:	231d      	movs	r3, #29
   271aa:	18fc      	adds	r4, r7, r3
   271ac:	231f      	movs	r3, #31
   271ae:	18fb      	adds	r3, r7, r3
   271b0:	781d      	ldrb	r5, [r3, #0]
   271b2:	230a      	movs	r3, #10
   271b4:	18fa      	adds	r2, r7, r3
   271b6:	231e      	movs	r3, #30
   271b8:	18fb      	adds	r3, r7, r3
   271ba:	781b      	ldrb	r3, [r3, #0]
   271bc:	9300      	str	r3, [sp, #0]
   271be:	002b      	movs	r3, r5
   271c0:	4d55      	ldr	r5, [pc, #340]	; (27318 <_usart_set_config+0x2d0>)
   271c2:	47a8      	blx	r5
   271c4:	0003      	movs	r3, r0
   271c6:	7023      	strb	r3, [r4, #0]
				status_code =
						_sercom_get_async_baud_val(config->baudrate,
							system_gclk_chan_get_hz(gclk_index), &baud, mode, sample_num);
			}

			break;
   271c8:	e01a      	b.n	27200 <_usart_set_config+0x1b8>
						_sercom_get_async_baud_val(config->baudrate,
   271ca:	683b      	ldr	r3, [r7, #0]
   271cc:	6a1d      	ldr	r5, [r3, #32]
   271ce:	693b      	ldr	r3, [r7, #16]
   271d0:	b2db      	uxtb	r3, r3
   271d2:	0018      	movs	r0, r3
   271d4:	4b4e      	ldr	r3, [pc, #312]	; (27310 <_usart_set_config+0x2c8>)
   271d6:	4798      	blx	r3
				status_code =
   271d8:	231d      	movs	r3, #29
   271da:	18fc      	adds	r4, r7, r3
   271dc:	231f      	movs	r3, #31
   271de:	18fb      	adds	r3, r7, r3
   271e0:	7819      	ldrb	r1, [r3, #0]
   271e2:	230a      	movs	r3, #10
   271e4:	18fa      	adds	r2, r7, r3
   271e6:	231e      	movs	r3, #30
   271e8:	18fb      	adds	r3, r7, r3
   271ea:	781b      	ldrb	r3, [r3, #0]
   271ec:	9300      	str	r3, [sp, #0]
   271ee:	000b      	movs	r3, r1
   271f0:	0001      	movs	r1, r0
   271f2:	0028      	movs	r0, r5
   271f4:	4d48      	ldr	r5, [pc, #288]	; (27318 <_usart_set_config+0x2d0>)
   271f6:	47a8      	blx	r5
   271f8:	0003      	movs	r3, r0
   271fa:	7023      	strb	r3, [r4, #0]
			break;
   271fc:	e000      	b.n	27200 <_usart_set_config+0x1b8>
			break;
   271fe:	46c0      	nop			; (mov r8, r8)
	}

	/* Check if calculating the baudrate failed */
	if (status_code != STATUS_OK) {
   27200:	231d      	movs	r3, #29
   27202:	18fb      	adds	r3, r7, r3
   27204:	781b      	ldrb	r3, [r3, #0]
   27206:	2b00      	cmp	r3, #0
   27208:	d003      	beq.n	27212 <_usart_set_config+0x1ca>
		/* Abort */
		return status_code;
   2720a:	231d      	movs	r3, #29
   2720c:	18fb      	adds	r3, r7, r3
   2720e:	781b      	ldrb	r3, [r3, #0]
   27210:	e077      	b.n	27302 <_usart_set_config+0x2ba>
#ifdef FEATURE_USART_ISO7816
	}
#endif

#ifdef FEATURE_USART_IRDA
	if(config->encoding_format_enable) {
   27212:	683b      	ldr	r3, [r7, #0]
   27214:	7e5b      	ldrb	r3, [r3, #25]
   27216:	2b00      	cmp	r3, #0
   27218:	d003      	beq.n	27222 <_usart_set_config+0x1da>
		usart_hw->RXPL.reg = config->receive_pulse_length;
   2721a:	683b      	ldr	r3, [r7, #0]
   2721c:	7e9a      	ldrb	r2, [r3, #26]
   2721e:	69bb      	ldr	r3, [r7, #24]
   27220:	739a      	strb	r2, [r3, #14]
	}
#endif

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);
   27222:	687b      	ldr	r3, [r7, #4]
   27224:	0018      	movs	r0, r3
   27226:	4b3d      	ldr	r3, [pc, #244]	; (2731c <_usart_set_config+0x2d4>)
   27228:	4798      	blx	r3

	/*Set baud val */
	usart_hw->BAUD.reg = baud;
   2722a:	230a      	movs	r3, #10
   2722c:	18fb      	adds	r3, r7, r3
   2722e:	881a      	ldrh	r2, [r3, #0]
   27230:	69bb      	ldr	r3, [r7, #24]
   27232:	819a      	strh	r2, [r3, #12]

	/* Set sample mode */
	ctrla |= transfer_mode;
   27234:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   27236:	68fb      	ldr	r3, [r7, #12]
   27238:	4313      	orrs	r3, r2
   2723a:	627b      	str	r3, [r7, #36]	; 0x24

	if (config->use_external_clock == false) {
   2723c:	683b      	ldr	r3, [r7, #0]
   2723e:	2227      	movs	r2, #39	; 0x27
   27240:	5c9b      	ldrb	r3, [r3, r2]
   27242:	2201      	movs	r2, #1
   27244:	4053      	eors	r3, r2
   27246:	b2db      	uxtb	r3, r3
   27248:	2b00      	cmp	r3, #0
   2724a:	d003      	beq.n	27254 <_usart_set_config+0x20c>
		ctrla |= SERCOM_USART_CTRLA_MODE(0x1);
   2724c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   2724e:	2204      	movs	r2, #4
   27250:	4313      	orrs	r3, r2
   27252:	627b      	str	r3, [r7, #36]	; 0x24
	}

	/* Set stopbits and enable transceivers */
	ctrlb =  
		#ifdef FEATURE_USART_IRDA
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
   27254:	683b      	ldr	r3, [r7, #0]
   27256:	7e5b      	ldrb	r3, [r3, #25]
   27258:	029a      	lsls	r2, r3, #10
		#endif
		#ifdef FEATURE_USART_START_FRAME_DECTION
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
   2725a:	683b      	ldr	r3, [r7, #0]
   2725c:	7f1b      	ldrb	r3, [r3, #28]
   2725e:	025b      	lsls	r3, r3, #9
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
   27260:	431a      	orrs	r2, r3
		#endif
		#ifdef FEATURE_USART_COLLISION_DECTION
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
   27262:	683b      	ldr	r3, [r7, #0]
   27264:	7f5b      	ldrb	r3, [r3, #29]
   27266:	021b      	lsls	r3, r3, #8
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
   27268:	431a      	orrs	r2, r3
		#endif
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
   2726a:	683b      	ldr	r3, [r7, #0]
   2726c:	2124      	movs	r1, #36	; 0x24
   2726e:	5c5b      	ldrb	r3, [r3, r1]
   27270:	045b      	lsls	r3, r3, #17
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
   27272:	431a      	orrs	r2, r3
			(config->transmitter_enable << SERCOM_USART_CTRLB_TXEN_Pos);
   27274:	683b      	ldr	r3, [r7, #0]
   27276:	2125      	movs	r1, #37	; 0x25
   27278:	5c5b      	ldrb	r3, [r3, r1]
   2727a:	041b      	lsls	r3, r3, #16
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
   2727c:	4313      	orrs	r3, r2
	ctrlb =  
   2727e:	623b      	str	r3, [r7, #32]
				ctrlb |= USART_STOPBITS_1;
				break;		
		}
	} else {
#endif
	ctrlb |= (uint32_t)config->stopbits;
   27280:	683b      	ldr	r3, [r7, #0]
   27282:	7a9b      	ldrb	r3, [r3, #10]
   27284:	001a      	movs	r2, r3
   27286:	6a3b      	ldr	r3, [r7, #32]
   27288:	4313      	orrs	r3, r2
   2728a:	623b      	str	r3, [r7, #32]
	ctrlb |= (uint32_t)config->character_size;
   2728c:	683b      	ldr	r3, [r7, #0]
   2728e:	7adb      	ldrb	r3, [r3, #11]
   27290:	001a      	movs	r2, r3
   27292:	6a3b      	ldr	r3, [r7, #32]
   27294:	4313      	orrs	r3, r2
   27296:	623b      	str	r3, [r7, #32]
	/* Check parity mode bits */
	if (config->parity != USART_PARITY_NONE) {
   27298:	683b      	ldr	r3, [r7, #0]
   2729a:	891b      	ldrh	r3, [r3, #8]
   2729c:	2bff      	cmp	r3, #255	; 0xff
   2729e:	d00b      	beq.n	272b8 <_usart_set_config+0x270>
		ctrla |= SERCOM_USART_CTRLA_FORM(1);
   272a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   272a2:	2280      	movs	r2, #128	; 0x80
   272a4:	0452      	lsls	r2, r2, #17
   272a6:	4313      	orrs	r3, r2
   272a8:	627b      	str	r3, [r7, #36]	; 0x24
		ctrlb |= config->parity;
   272aa:	683b      	ldr	r3, [r7, #0]
   272ac:	891b      	ldrh	r3, [r3, #8]
   272ae:	001a      	movs	r2, r3
   272b0:	6a3b      	ldr	r3, [r7, #32]
   272b2:	4313      	orrs	r3, r2
   272b4:	623b      	str	r3, [r7, #32]
   272b6:	e008      	b.n	272ca <_usart_set_config+0x282>
	} else {
#ifdef FEATURE_USART_LIN_SLAVE
		if(config->lin_slave_enable) {
   272b8:	683b      	ldr	r3, [r7, #0]
   272ba:	7edb      	ldrb	r3, [r3, #27]
   272bc:	2b00      	cmp	r3, #0
   272be:	d004      	beq.n	272ca <_usart_set_config+0x282>
			ctrla |= SERCOM_USART_CTRLA_FORM(0x4);
   272c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   272c2:	2280      	movs	r2, #128	; 0x80
   272c4:	04d2      	lsls	r2, r2, #19
   272c6:	4313      	orrs	r3, r2
   272c8:	627b      	str	r3, [r7, #36]	; 0x24
		ctrla |= config->lin_node;
	}
#endif

	/* Set whether module should run in standby. */
	if (config->run_in_standby || system_is_debugger_present()) {
   272ca:	683b      	ldr	r3, [r7, #0]
   272cc:	222c      	movs	r2, #44	; 0x2c
   272ce:	5c9b      	ldrb	r3, [r3, r2]
   272d0:	2b00      	cmp	r3, #0
   272d2:	d103      	bne.n	272dc <_usart_set_config+0x294>
   272d4:	4b12      	ldr	r3, [pc, #72]	; (27320 <_usart_set_config+0x2d8>)
   272d6:	4798      	blx	r3
   272d8:	1e03      	subs	r3, r0, #0
   272da:	d003      	beq.n	272e4 <_usart_set_config+0x29c>
		ctrla |= SERCOM_USART_CTRLA_RUNSTDBY;
   272dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   272de:	2280      	movs	r2, #128	; 0x80
   272e0:	4313      	orrs	r3, r2
   272e2:	627b      	str	r3, [r7, #36]	; 0x24
	}

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);
   272e4:	687b      	ldr	r3, [r7, #4]
   272e6:	0018      	movs	r0, r3
   272e8:	4b0c      	ldr	r3, [pc, #48]	; (2731c <_usart_set_config+0x2d4>)
   272ea:	4798      	blx	r3

	/* Write configuration to CTRLB */
	usart_hw->CTRLB.reg = ctrlb;
   272ec:	69bb      	ldr	r3, [r7, #24]
   272ee:	6a3a      	ldr	r2, [r7, #32]
   272f0:	605a      	str	r2, [r3, #4]

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);
   272f2:	687b      	ldr	r3, [r7, #4]
   272f4:	0018      	movs	r0, r3
   272f6:	4b09      	ldr	r3, [pc, #36]	; (2731c <_usart_set_config+0x2d4>)
   272f8:	4798      	blx	r3

	/* Write configuration to CTRLA */
	usart_hw->CTRLA.reg = ctrla;
   272fa:	69bb      	ldr	r3, [r7, #24]
   272fc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   272fe:	601a      	str	r2, [r3, #0]
		_usart_wait_for_sync(module);
		usart_hw->CTRLC.reg = ctrlc;
	}
#endif

	return STATUS_OK;
   27300:	2300      	movs	r3, #0
}
   27302:	0018      	movs	r0, r3
   27304:	46bd      	mov	sp, r7
   27306:	b00a      	add	sp, #40	; 0x28
   27308:	bdb0      	pop	{r4, r5, r7, pc}
   2730a:	46c0      	nop			; (mov r8, r8)
   2730c:	00025df1 	.word	0x00025df1
   27310:	000287a5 	.word	0x000287a5
   27314:	0002596b 	.word	0x0002596b
   27318:	000259e9 	.word	0x000259e9
   2731c:	00027025 	.word	0x00027025
   27320:	00026fe5 	.word	0x00026fe5

00027324 <usart_init>:
 */
enum status_code usart_init(
		struct usart_module *const module,
		Sercom *const hw,
		const struct usart_config *const config)
{
   27324:	b590      	push	{r4, r7, lr}
   27326:	b093      	sub	sp, #76	; 0x4c
   27328:	af00      	add	r7, sp, #0
   2732a:	60f8      	str	r0, [r7, #12]
   2732c:	60b9      	str	r1, [r7, #8]
   2732e:	607a      	str	r2, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(hw);
	Assert(config);

	enum status_code status_code = STATUS_OK;
   27330:	233b      	movs	r3, #59	; 0x3b
   27332:	18fb      	adds	r3, r7, r3
   27334:	2200      	movs	r2, #0
   27336:	701a      	strb	r2, [r3, #0]

	/* Assign module pointer to software instance struct */
	module->hw = hw;
   27338:	68fb      	ldr	r3, [r7, #12]
   2733a:	68ba      	ldr	r2, [r7, #8]
   2733c:	601a      	str	r2, [r3, #0]

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
   2733e:	68fb      	ldr	r3, [r7, #12]
   27340:	681b      	ldr	r3, [r3, #0]
   27342:	637b      	str	r3, [r7, #52]	; 0x34

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
   27344:	68fb      	ldr	r3, [r7, #12]
   27346:	681b      	ldr	r3, [r3, #0]
   27348:	0018      	movs	r0, r3
   2734a:	4b86      	ldr	r3, [pc, #536]	; (27564 <usart_init+0x240>)
   2734c:	4798      	blx	r3
   2734e:	0003      	movs	r3, r0
   27350:	633b      	str	r3, [r7, #48]	; 0x30
		gclk_index	= SERCOM5_GCLK_ID_CORE;
    } else {
    	gclk_index	= sercom_index + SERCOM0_GCLK_ID_CORE;
    }
#else
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
   27352:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   27354:	3302      	adds	r3, #2
   27356:	62fb      	str	r3, [r7, #44]	; 0x2c
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
   27358:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   2735a:	3314      	adds	r3, #20
   2735c:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
   2735e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   27360:	681b      	ldr	r3, [r3, #0]
   27362:	2201      	movs	r2, #1
   27364:	4013      	ands	r3, r2
   27366:	d001      	beq.n	2736c <usart_init+0x48>
		/* The module is busy resetting itself */
		return STATUS_BUSY;
   27368:	2305      	movs	r3, #5
   2736a:	e0f6      	b.n	2755a <usart_init+0x236>
	}

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_ENABLE) {
   2736c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   2736e:	681b      	ldr	r3, [r3, #0]
   27370:	2202      	movs	r2, #2
   27372:	4013      	ands	r3, r2
   27374:	d001      	beq.n	2737a <usart_init+0x56>
		/* Check the module is enabled */
		return STATUS_ERR_DENIED;
   27376:	231c      	movs	r3, #28
   27378:	e0ef      	b.n	2755a <usart_init+0x236>
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBD, 1 << pm_index);
	} else {
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);	
	}
#else
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
   2737a:	2201      	movs	r2, #1
   2737c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   2737e:	409a      	lsls	r2, r3
   27380:	0013      	movs	r3, r2
   27382:	0019      	movs	r1, r3
   27384:	2002      	movs	r0, #2
   27386:	4b78      	ldr	r3, [pc, #480]	; (27568 <usart_init+0x244>)
   27388:	4798      	blx	r3
#endif

	/* Set up the GCLK for the module */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
   2738a:	2324      	movs	r3, #36	; 0x24
   2738c:	18fb      	adds	r3, r7, r3
   2738e:	0018      	movs	r0, r3
   27390:	4b76      	ldr	r3, [pc, #472]	; (2756c <usart_init+0x248>)
   27392:	4798      	blx	r3
	gclk_chan_conf.source_generator = config->generator_source;
   27394:	687b      	ldr	r3, [r7, #4]
   27396:	222d      	movs	r2, #45	; 0x2d
   27398:	5c9a      	ldrb	r2, [r3, r2]
   2739a:	2324      	movs	r3, #36	; 0x24
   2739c:	18fb      	adds	r3, r7, r3
   2739e:	701a      	strb	r2, [r3, #0]
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
   273a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
   273a2:	b2db      	uxtb	r3, r3
   273a4:	2224      	movs	r2, #36	; 0x24
   273a6:	18ba      	adds	r2, r7, r2
   273a8:	0011      	movs	r1, r2
   273aa:	0018      	movs	r0, r3
   273ac:	4b70      	ldr	r3, [pc, #448]	; (27570 <usart_init+0x24c>)
   273ae:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
   273b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
   273b2:	b2db      	uxtb	r3, r3
   273b4:	0018      	movs	r0, r3
   273b6:	4b6f      	ldr	r3, [pc, #444]	; (27574 <usart_init+0x250>)
   273b8:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
   273ba:	687b      	ldr	r3, [r7, #4]
   273bc:	222d      	movs	r2, #45	; 0x2d
   273be:	5c9b      	ldrb	r3, [r3, r2]
   273c0:	2100      	movs	r1, #0
   273c2:	0018      	movs	r0, r3
   273c4:	4b6c      	ldr	r3, [pc, #432]	; (27578 <usart_init+0x254>)
   273c6:	4798      	blx	r3

	/* Set character size */
	module->character_size = config->character_size;
   273c8:	687b      	ldr	r3, [r7, #4]
   273ca:	7ada      	ldrb	r2, [r3, #11]
   273cc:	68fb      	ldr	r3, [r7, #12]
   273ce:	715a      	strb	r2, [r3, #5]

	/* Set transmitter and receiver status */
	module->receiver_enabled = config->receiver_enable;
   273d0:	687b      	ldr	r3, [r7, #4]
   273d2:	2224      	movs	r2, #36	; 0x24
   273d4:	5c9a      	ldrb	r2, [r3, r2]
   273d6:	68fb      	ldr	r3, [r7, #12]
   273d8:	719a      	strb	r2, [r3, #6]
	module->transmitter_enabled = config->transmitter_enable;
   273da:	687b      	ldr	r3, [r7, #4]
   273dc:	2225      	movs	r2, #37	; 0x25
   273de:	5c9a      	ldrb	r2, [r3, r2]
   273e0:	68fb      	ldr	r3, [r7, #12]
   273e2:	71da      	strb	r2, [r3, #7]

#ifdef FEATURE_USART_LIN_SLAVE
	module->lin_slave_enabled = config->lin_slave_enable;
   273e4:	687b      	ldr	r3, [r7, #4]
   273e6:	7eda      	ldrb	r2, [r3, #27]
   273e8:	68fb      	ldr	r3, [r7, #12]
   273ea:	721a      	strb	r2, [r3, #8]
#endif
#ifdef FEATURE_USART_START_FRAME_DECTION
	module->start_frame_detection_enabled = config->start_frame_detection_enable;
   273ec:	687b      	ldr	r3, [r7, #4]
   273ee:	7f1a      	ldrb	r2, [r3, #28]
   273f0:	68fb      	ldr	r3, [r7, #12]
   273f2:	725a      	strb	r2, [r3, #9]
#endif
#ifdef FEATURE_USART_ISO7816
	module->iso7816_mode_enabled = config->iso7816_config.enabled;
#endif
	/* Set configuration according to the config struct */
	status_code = _usart_set_config(module, config);
   273f4:	233b      	movs	r3, #59	; 0x3b
   273f6:	18fc      	adds	r4, r7, r3
   273f8:	687a      	ldr	r2, [r7, #4]
   273fa:	68fb      	ldr	r3, [r7, #12]
   273fc:	0011      	movs	r1, r2
   273fe:	0018      	movs	r0, r3
   27400:	4b5e      	ldr	r3, [pc, #376]	; (2757c <usart_init+0x258>)
   27402:	4798      	blx	r3
   27404:	0003      	movs	r3, r0
   27406:	7023      	strb	r3, [r4, #0]
	if(status_code != STATUS_OK) {
   27408:	233b      	movs	r3, #59	; 0x3b
   2740a:	18fb      	adds	r3, r7, r3
   2740c:	781b      	ldrb	r3, [r3, #0]
   2740e:	2b00      	cmp	r3, #0
   27410:	d003      	beq.n	2741a <usart_init+0xf6>
		return status_code;
   27412:	233b      	movs	r3, #59	; 0x3b
   27414:	18fb      	adds	r3, r7, r3
   27416:	781b      	ldrb	r3, [r3, #0]
   27418:	e09f      	b.n	2755a <usart_init+0x236>
	}

	struct system_pinmux_config pin_conf;
	system_pinmux_get_config_defaults(&pin_conf);
   2741a:	2320      	movs	r3, #32
   2741c:	18fb      	adds	r3, r7, r3
   2741e:	0018      	movs	r0, r3
   27420:	4b57      	ldr	r3, [pc, #348]	; (27580 <usart_init+0x25c>)
   27422:	4798      	blx	r3
	pin_conf.direction = SYSTEM_PINMUX_PIN_DIR_INPUT;
   27424:	2320      	movs	r3, #32
   27426:	18fb      	adds	r3, r7, r3
   27428:	2200      	movs	r2, #0
   2742a:	705a      	strb	r2, [r3, #1]
	pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
   2742c:	2320      	movs	r3, #32
   2742e:	18fb      	adds	r3, r7, r3
   27430:	2200      	movs	r2, #0
   27432:	709a      	strb	r2, [r3, #2]

	uint32_t pad_pinmuxes[] = {
			config->pinmux_pad0, config->pinmux_pad1,
   27434:	687b      	ldr	r3, [r7, #4]
   27436:	6b1a      	ldr	r2, [r3, #48]	; 0x30
	uint32_t pad_pinmuxes[] = {
   27438:	2310      	movs	r3, #16
   2743a:	18fb      	adds	r3, r7, r3
   2743c:	601a      	str	r2, [r3, #0]
			config->pinmux_pad0, config->pinmux_pad1,
   2743e:	687b      	ldr	r3, [r7, #4]
   27440:	6b5a      	ldr	r2, [r3, #52]	; 0x34
	uint32_t pad_pinmuxes[] = {
   27442:	2310      	movs	r3, #16
   27444:	18fb      	adds	r3, r7, r3
   27446:	605a      	str	r2, [r3, #4]
			config->pinmux_pad2, config->pinmux_pad3
   27448:	687b      	ldr	r3, [r7, #4]
   2744a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
	uint32_t pad_pinmuxes[] = {
   2744c:	2310      	movs	r3, #16
   2744e:	18fb      	adds	r3, r7, r3
   27450:	609a      	str	r2, [r3, #8]
			config->pinmux_pad2, config->pinmux_pad3
   27452:	687b      	ldr	r3, [r7, #4]
   27454:	6bda      	ldr	r2, [r3, #60]	; 0x3c
	uint32_t pad_pinmuxes[] = {
   27456:	2310      	movs	r3, #16
   27458:	18fb      	adds	r3, r7, r3
   2745a:	60da      	str	r2, [r3, #12]
		};

	/* Configure the SERCOM pins according to the user configuration */
	for (uint8_t pad = 0; pad < 4; pad++) {
   2745c:	2347      	movs	r3, #71	; 0x47
   2745e:	18fb      	adds	r3, r7, r3
   27460:	2200      	movs	r2, #0
   27462:	701a      	strb	r2, [r3, #0]
   27464:	e02c      	b.n	274c0 <usart_init+0x19c>
		uint32_t current_pinmux = pad_pinmuxes[pad];
   27466:	2347      	movs	r3, #71	; 0x47
   27468:	18fb      	adds	r3, r7, r3
   2746a:	781a      	ldrb	r2, [r3, #0]
   2746c:	2310      	movs	r3, #16
   2746e:	18fb      	adds	r3, r7, r3
   27470:	0092      	lsls	r2, r2, #2
   27472:	58d3      	ldr	r3, [r2, r3]
   27474:	643b      	str	r3, [r7, #64]	; 0x40

		if (current_pinmux == PINMUX_DEFAULT) {
   27476:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   27478:	2b00      	cmp	r3, #0
   2747a:	d109      	bne.n	27490 <usart_init+0x16c>
			current_pinmux = _sercom_get_default_pad(hw, pad);
   2747c:	2347      	movs	r3, #71	; 0x47
   2747e:	18fb      	adds	r3, r7, r3
   27480:	781a      	ldrb	r2, [r3, #0]
   27482:	68bb      	ldr	r3, [r7, #8]
   27484:	0011      	movs	r1, r2
   27486:	0018      	movs	r0, r3
   27488:	4b3e      	ldr	r3, [pc, #248]	; (27584 <usart_init+0x260>)
   2748a:	4798      	blx	r3
   2748c:	0003      	movs	r3, r0
   2748e:	643b      	str	r3, [r7, #64]	; 0x40
		}

		if (current_pinmux != PINMUX_UNUSED) {
   27490:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   27492:	3301      	adds	r3, #1
   27494:	d00d      	beq.n	274b2 <usart_init+0x18e>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
   27496:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   27498:	b2da      	uxtb	r2, r3
   2749a:	2320      	movs	r3, #32
   2749c:	18fb      	adds	r3, r7, r3
   2749e:	701a      	strb	r2, [r3, #0]
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
   274a0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   274a2:	0c1b      	lsrs	r3, r3, #16
   274a4:	b2db      	uxtb	r3, r3
   274a6:	2220      	movs	r2, #32
   274a8:	18ba      	adds	r2, r7, r2
   274aa:	0011      	movs	r1, r2
   274ac:	0018      	movs	r0, r3
   274ae:	4b36      	ldr	r3, [pc, #216]	; (27588 <usart_init+0x264>)
   274b0:	4798      	blx	r3
	for (uint8_t pad = 0; pad < 4; pad++) {
   274b2:	2347      	movs	r3, #71	; 0x47
   274b4:	18fb      	adds	r3, r7, r3
   274b6:	781a      	ldrb	r2, [r3, #0]
   274b8:	2347      	movs	r3, #71	; 0x47
   274ba:	18fb      	adds	r3, r7, r3
   274bc:	3201      	adds	r2, #1
   274be:	701a      	strb	r2, [r3, #0]
   274c0:	2347      	movs	r3, #71	; 0x47
   274c2:	18fb      	adds	r3, r7, r3
   274c4:	781b      	ldrb	r3, [r3, #0]
   274c6:	2b03      	cmp	r3, #3
   274c8:	d9cd      	bls.n	27466 <usart_init+0x142>
		}
	}

#if USART_CALLBACK_MODE == true
	/* Initialize parameters */
	for (uint32_t i = 0; i < USART_CALLBACK_N; i++) {
   274ca:	2300      	movs	r3, #0
   274cc:	63fb      	str	r3, [r7, #60]	; 0x3c
   274ce:	e00a      	b.n	274e6 <usart_init+0x1c2>
		module->callback[i]            = NULL;
   274d0:	68fa      	ldr	r2, [r7, #12]
   274d2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   274d4:	3302      	adds	r3, #2
   274d6:	009b      	lsls	r3, r3, #2
   274d8:	18d3      	adds	r3, r2, r3
   274da:	3304      	adds	r3, #4
   274dc:	2200      	movs	r2, #0
   274de:	601a      	str	r2, [r3, #0]
	for (uint32_t i = 0; i < USART_CALLBACK_N; i++) {
   274e0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   274e2:	3301      	adds	r3, #1
   274e4:	63fb      	str	r3, [r7, #60]	; 0x3c
   274e6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   274e8:	2b05      	cmp	r3, #5
   274ea:	d9f1      	bls.n	274d0 <usart_init+0x1ac>
	}

	module->tx_buffer_ptr              = NULL;
   274ec:	68fb      	ldr	r3, [r7, #12]
   274ee:	2200      	movs	r2, #0
   274f0:	629a      	str	r2, [r3, #40]	; 0x28
	module->rx_buffer_ptr              = NULL;
   274f2:	68fb      	ldr	r3, [r7, #12]
   274f4:	2200      	movs	r2, #0
   274f6:	625a      	str	r2, [r3, #36]	; 0x24
	module->remaining_tx_buffer_length = 0x0000;
   274f8:	68fb      	ldr	r3, [r7, #12]
   274fa:	2200      	movs	r2, #0
   274fc:	85da      	strh	r2, [r3, #46]	; 0x2e
	module->remaining_rx_buffer_length = 0x0000;
   274fe:	68fb      	ldr	r3, [r7, #12]
   27500:	2200      	movs	r2, #0
   27502:	859a      	strh	r2, [r3, #44]	; 0x2c
	module->callback_reg_mask          = 0x00;
   27504:	68fb      	ldr	r3, [r7, #12]
   27506:	2230      	movs	r2, #48	; 0x30
   27508:	2100      	movs	r1, #0
   2750a:	5499      	strb	r1, [r3, r2]
	module->callback_enable_mask       = 0x00;
   2750c:	68fb      	ldr	r3, [r7, #12]
   2750e:	2231      	movs	r2, #49	; 0x31
   27510:	2100      	movs	r1, #0
   27512:	5499      	strb	r1, [r3, r2]
	module->rx_status                  = STATUS_OK;
   27514:	68fb      	ldr	r3, [r7, #12]
   27516:	2232      	movs	r2, #50	; 0x32
   27518:	2100      	movs	r1, #0
   2751a:	5499      	strb	r1, [r3, r2]
	module->tx_status                  = STATUS_OK;
   2751c:	68fb      	ldr	r3, [r7, #12]
   2751e:	2233      	movs	r2, #51	; 0x33
   27520:	2100      	movs	r1, #0
   27522:	5499      	strb	r1, [r3, r2]

	/* Set interrupt handler and register USART software module struct in
	 * look-up table */
	uint8_t instance_index = _sercom_get_sercom_inst_index(module->hw);
   27524:	68fb      	ldr	r3, [r7, #12]
   27526:	681b      	ldr	r3, [r3, #0]
   27528:	2227      	movs	r2, #39	; 0x27
   2752a:	18bc      	adds	r4, r7, r2
   2752c:	0018      	movs	r0, r3
   2752e:	4b0d      	ldr	r3, [pc, #52]	; (27564 <usart_init+0x240>)
   27530:	4798      	blx	r3
   27532:	0003      	movs	r3, r0
   27534:	7023      	strb	r3, [r4, #0]
	_sercom_set_handler(instance_index, _usart_interrupt_handler);
   27536:	4a15      	ldr	r2, [pc, #84]	; (2758c <usart_init+0x268>)
   27538:	2327      	movs	r3, #39	; 0x27
   2753a:	18fb      	adds	r3, r7, r3
   2753c:	781b      	ldrb	r3, [r3, #0]
   2753e:	0011      	movs	r1, r2
   27540:	0018      	movs	r0, r3
   27542:	4b13      	ldr	r3, [pc, #76]	; (27590 <usart_init+0x26c>)
   27544:	4798      	blx	r3
	_sercom_instances[instance_index] = module;
   27546:	2327      	movs	r3, #39	; 0x27
   27548:	18fb      	adds	r3, r7, r3
   2754a:	781a      	ldrb	r2, [r3, #0]
   2754c:	4b11      	ldr	r3, [pc, #68]	; (27594 <usart_init+0x270>)
   2754e:	0092      	lsls	r2, r2, #2
   27550:	68f9      	ldr	r1, [r7, #12]
   27552:	50d1      	str	r1, [r2, r3]
#endif

	return status_code;
   27554:	233b      	movs	r3, #59	; 0x3b
   27556:	18fb      	adds	r3, r7, r3
   27558:	781b      	ldrb	r3, [r3, #0]
}
   2755a:	0018      	movs	r0, r3
   2755c:	46bd      	mov	sp, r7
   2755e:	b013      	add	sp, #76	; 0x4c
   27560:	bd90      	pop	{r4, r7, pc}
   27562:	46c0      	nop			; (mov r8, r8)
   27564:	00025df1 	.word	0x00025df1
   27568:	00026f61 	.word	0x00026f61
   2756c:	00026f49 	.word	0x00026f49
   27570:	00028681 	.word	0x00028681
   27574:	000286c5 	.word	0x000286c5
   27578:	00025ba9 	.word	0x00025ba9
   2757c:	00027049 	.word	0x00027049
   27580:	00026fbd 	.word	0x00026fbd
   27584:	00025c35 	.word	0x00025c35
   27588:	000289e1 	.word	0x000289e1
   2758c:	00027801 	.word	0x00027801
   27590:	00025e55 	.word	0x00025e55
   27594:	200056a8 	.word	0x200056a8

00027598 <system_interrupt_enter_critical_section>:
{
   27598:	b580      	push	{r7, lr}
   2759a:	af00      	add	r7, sp, #0
	cpu_irq_enter_critical();
   2759c:	4b02      	ldr	r3, [pc, #8]	; (275a8 <system_interrupt_enter_critical_section+0x10>)
   2759e:	4798      	blx	r3
}
   275a0:	46c0      	nop			; (mov r8, r8)
   275a2:	46bd      	mov	sp, r7
   275a4:	bd80      	pop	{r7, pc}
   275a6:	46c0      	nop			; (mov r8, r8)
   275a8:	000249ed 	.word	0x000249ed

000275ac <system_interrupt_leave_critical_section>:
{
   275ac:	b580      	push	{r7, lr}
   275ae:	af00      	add	r7, sp, #0
	cpu_irq_leave_critical();
   275b0:	4b02      	ldr	r3, [pc, #8]	; (275bc <system_interrupt_leave_critical_section+0x10>)
   275b2:	4798      	blx	r3
}
   275b4:	46c0      	nop			; (mov r8, r8)
   275b6:	46bd      	mov	sp, r7
   275b8:	bd80      	pop	{r7, pc}
   275ba:	46c0      	nop			; (mov r8, r8)
   275bc:	00024a41 	.word	0x00024a41

000275c0 <usart_is_syncing>:
{
   275c0:	b580      	push	{r7, lr}
   275c2:	b084      	sub	sp, #16
   275c4:	af00      	add	r7, sp, #0
   275c6:	6078      	str	r0, [r7, #4]
	SercomUsart *const usart_hw = &(module->hw->USART);
   275c8:	687b      	ldr	r3, [r7, #4]
   275ca:	681b      	ldr	r3, [r3, #0]
   275cc:	60fb      	str	r3, [r7, #12]
	return (usart_hw->SYNCBUSY.reg);
   275ce:	68fb      	ldr	r3, [r7, #12]
   275d0:	69db      	ldr	r3, [r3, #28]
   275d2:	1e5a      	subs	r2, r3, #1
   275d4:	4193      	sbcs	r3, r2
   275d6:	b2db      	uxtb	r3, r3
}
   275d8:	0018      	movs	r0, r3
   275da:	46bd      	mov	sp, r7
   275dc:	b004      	add	sp, #16
   275de:	bd80      	pop	{r7, pc}

000275e0 <_usart_wait_for_sync>:
{
   275e0:	b580      	push	{r7, lr}
   275e2:	b082      	sub	sp, #8
   275e4:	af00      	add	r7, sp, #0
   275e6:	6078      	str	r0, [r7, #4]
	while (usart_is_syncing(module)) {
   275e8:	46c0      	nop			; (mov r8, r8)
   275ea:	687b      	ldr	r3, [r7, #4]
   275ec:	0018      	movs	r0, r3
   275ee:	4b04      	ldr	r3, [pc, #16]	; (27600 <_usart_wait_for_sync+0x20>)
   275f0:	4798      	blx	r3
   275f2:	1e03      	subs	r3, r0, #0
   275f4:	d1f9      	bne.n	275ea <_usart_wait_for_sync+0xa>
}
   275f6:	46c0      	nop			; (mov r8, r8)
   275f8:	46bd      	mov	sp, r7
   275fa:	b002      	add	sp, #8
   275fc:	bd80      	pop	{r7, pc}
   275fe:	46c0      	nop			; (mov r8, r8)
   27600:	000275c1 	.word	0x000275c1

00027604 <_usart_write_buffer>:
 */
enum status_code _usart_write_buffer(
		struct usart_module *const module,
		uint8_t *tx_data,
		uint16_t length)
{
   27604:	b580      	push	{r7, lr}
   27606:	b086      	sub	sp, #24
   27608:	af00      	add	r7, sp, #0
   2760a:	60f8      	str	r0, [r7, #12]
   2760c:	60b9      	str	r1, [r7, #8]
   2760e:	1dbb      	adds	r3, r7, #6
   27610:	801a      	strh	r2, [r3, #0]
	Assert(module);
	Assert(module->hw);
	Assert(tx_data);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
   27612:	68fb      	ldr	r3, [r7, #12]
   27614:	681b      	ldr	r3, [r3, #0]
   27616:	617b      	str	r3, [r7, #20]

	system_interrupt_enter_critical_section();
   27618:	4b0f      	ldr	r3, [pc, #60]	; (27658 <_usart_write_buffer+0x54>)
   2761a:	4798      	blx	r3

	/* Check if the USART transmitter is busy */
	if (module->remaining_tx_buffer_length > 0) {
   2761c:	68fb      	ldr	r3, [r7, #12]
   2761e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
   27620:	b29b      	uxth	r3, r3
   27622:	2b00      	cmp	r3, #0
   27624:	d003      	beq.n	2762e <_usart_write_buffer+0x2a>
		system_interrupt_leave_critical_section();
   27626:	4b0d      	ldr	r3, [pc, #52]	; (2765c <_usart_write_buffer+0x58>)
   27628:	4798      	blx	r3
		return STATUS_BUSY;
   2762a:	2305      	movs	r3, #5
   2762c:	e010      	b.n	27650 <_usart_write_buffer+0x4c>
	}

	/* Write parameters to the device instance */
	module->remaining_tx_buffer_length = length;
   2762e:	68fb      	ldr	r3, [r7, #12]
   27630:	1dba      	adds	r2, r7, #6
   27632:	8812      	ldrh	r2, [r2, #0]
   27634:	85da      	strh	r2, [r3, #46]	; 0x2e

	system_interrupt_leave_critical_section();
   27636:	4b09      	ldr	r3, [pc, #36]	; (2765c <_usart_write_buffer+0x58>)
   27638:	4798      	blx	r3

	module->tx_buffer_ptr              = tx_data;
   2763a:	68fb      	ldr	r3, [r7, #12]
   2763c:	68ba      	ldr	r2, [r7, #8]
   2763e:	629a      	str	r2, [r3, #40]	; 0x28
	module->tx_status                  = STATUS_BUSY;
   27640:	68fb      	ldr	r3, [r7, #12]
   27642:	2233      	movs	r2, #51	; 0x33
   27644:	2105      	movs	r1, #5
   27646:	5499      	strb	r1, [r3, r2]

	/* Enable the Data Register Empty Interrupt */
	usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_DRE;
   27648:	697b      	ldr	r3, [r7, #20]
   2764a:	2201      	movs	r2, #1
   2764c:	759a      	strb	r2, [r3, #22]

	return STATUS_OK;
   2764e:	2300      	movs	r3, #0
}
   27650:	0018      	movs	r0, r3
   27652:	46bd      	mov	sp, r7
   27654:	b006      	add	sp, #24
   27656:	bd80      	pop	{r7, pc}
   27658:	00027599 	.word	0x00027599
   2765c:	000275ad 	.word	0x000275ad

00027660 <_usart_read_buffer>:
 */
enum status_code _usart_read_buffer(
		struct usart_module *const module,
		uint8_t *rx_data,
		uint16_t length)
{
   27660:	b580      	push	{r7, lr}
   27662:	b086      	sub	sp, #24
   27664:	af00      	add	r7, sp, #0
   27666:	60f8      	str	r0, [r7, #12]
   27668:	60b9      	str	r1, [r7, #8]
   2766a:	1dbb      	adds	r3, r7, #6
   2766c:	801a      	strh	r2, [r3, #0]
	Assert(module);
	Assert(module->hw);
	Assert(rx_data);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
   2766e:	68fb      	ldr	r3, [r7, #12]
   27670:	681b      	ldr	r3, [r3, #0]
   27672:	617b      	str	r3, [r7, #20]

	system_interrupt_enter_critical_section();
   27674:	4b16      	ldr	r3, [pc, #88]	; (276d0 <_usart_read_buffer+0x70>)
   27676:	4798      	blx	r3

	/* Check if the USART receiver is busy */
	if (module->remaining_rx_buffer_length > 0) {
   27678:	68fb      	ldr	r3, [r7, #12]
   2767a:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
   2767c:	b29b      	uxth	r3, r3
   2767e:	2b00      	cmp	r3, #0
   27680:	d003      	beq.n	2768a <_usart_read_buffer+0x2a>
		system_interrupt_leave_critical_section();
   27682:	4b14      	ldr	r3, [pc, #80]	; (276d4 <_usart_read_buffer+0x74>)
   27684:	4798      	blx	r3
		return STATUS_BUSY;
   27686:	2305      	movs	r3, #5
   27688:	e01e      	b.n	276c8 <_usart_read_buffer+0x68>
	}

	/* Set length for the buffer and the pointer, and let
	 * the interrupt handler do the rest */
	module->remaining_rx_buffer_length = length;
   2768a:	68fb      	ldr	r3, [r7, #12]
   2768c:	1dba      	adds	r2, r7, #6
   2768e:	8812      	ldrh	r2, [r2, #0]
   27690:	859a      	strh	r2, [r3, #44]	; 0x2c

	system_interrupt_leave_critical_section();
   27692:	4b10      	ldr	r3, [pc, #64]	; (276d4 <_usart_read_buffer+0x74>)
   27694:	4798      	blx	r3

	module->rx_buffer_ptr              = rx_data;
   27696:	68fb      	ldr	r3, [r7, #12]
   27698:	68ba      	ldr	r2, [r7, #8]
   2769a:	625a      	str	r2, [r3, #36]	; 0x24
	module->rx_status                  = STATUS_BUSY;
   2769c:	68fb      	ldr	r3, [r7, #12]
   2769e:	2232      	movs	r2, #50	; 0x32
   276a0:	2105      	movs	r1, #5
   276a2:	5499      	strb	r1, [r3, r2]

	/* Enable the RX Complete Interrupt */
	usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_RXC;
   276a4:	697b      	ldr	r3, [r7, #20]
   276a6:	2204      	movs	r2, #4
   276a8:	759a      	strb	r2, [r3, #22]

#ifdef FEATURE_USART_LIN_SLAVE
	/* Enable the break character is received Interrupt */
	if(module->lin_slave_enabled) {
   276aa:	68fb      	ldr	r3, [r7, #12]
   276ac:	7a1b      	ldrb	r3, [r3, #8]
   276ae:	2b00      	cmp	r3, #0
   276b0:	d002      	beq.n	276b8 <_usart_read_buffer+0x58>
		usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_RXBRK;
   276b2:	697b      	ldr	r3, [r7, #20]
   276b4:	2220      	movs	r2, #32
   276b6:	759a      	strb	r2, [r3, #22]
	}
#endif

#ifdef FEATURE_USART_START_FRAME_DECTION
	/* Enable a start condition is detected Interrupt */
	if(module->start_frame_detection_enabled) {
   276b8:	68fb      	ldr	r3, [r7, #12]
   276ba:	7a5b      	ldrb	r3, [r3, #9]
   276bc:	2b00      	cmp	r3, #0
   276be:	d002      	beq.n	276c6 <_usart_read_buffer+0x66>
		usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_RXS;
   276c0:	697b      	ldr	r3, [r7, #20]
   276c2:	2208      	movs	r2, #8
   276c4:	759a      	strb	r2, [r3, #22]
	}
#endif

	return STATUS_OK;
   276c6:	2300      	movs	r3, #0
}
   276c8:	0018      	movs	r0, r3
   276ca:	46bd      	mov	sp, r7
   276cc:	b006      	add	sp, #24
   276ce:	bd80      	pop	{r7, pc}
   276d0:	00027599 	.word	0x00027599
   276d4:	000275ad 	.word	0x000275ad

000276d8 <usart_register_callback>:
 */
void usart_register_callback(
		struct usart_module *const module,
		usart_callback_t callback_func,
		enum usart_callback callback_type)
{
   276d8:	b580      	push	{r7, lr}
   276da:	b084      	sub	sp, #16
   276dc:	af00      	add	r7, sp, #0
   276de:	60f8      	str	r0, [r7, #12]
   276e0:	60b9      	str	r1, [r7, #8]
   276e2:	1dfb      	adds	r3, r7, #7
   276e4:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(callback_func);

	/* Register callback function */
	module->callback[callback_type] = callback_func;
   276e6:	1dfb      	adds	r3, r7, #7
   276e8:	781b      	ldrb	r3, [r3, #0]
   276ea:	68fa      	ldr	r2, [r7, #12]
   276ec:	3302      	adds	r3, #2
   276ee:	009b      	lsls	r3, r3, #2
   276f0:	18d3      	adds	r3, r2, r3
   276f2:	3304      	adds	r3, #4
   276f4:	68ba      	ldr	r2, [r7, #8]
   276f6:	601a      	str	r2, [r3, #0]

	/* Set the bit corresponding to the callback_type */
	module->callback_reg_mask |= (1 << callback_type);
   276f8:	68fb      	ldr	r3, [r7, #12]
   276fa:	2230      	movs	r2, #48	; 0x30
   276fc:	5c9b      	ldrb	r3, [r3, r2]
   276fe:	b25a      	sxtb	r2, r3
   27700:	1dfb      	adds	r3, r7, #7
   27702:	781b      	ldrb	r3, [r3, #0]
   27704:	2101      	movs	r1, #1
   27706:	4099      	lsls	r1, r3
   27708:	000b      	movs	r3, r1
   2770a:	b25b      	sxtb	r3, r3
   2770c:	4313      	orrs	r3, r2
   2770e:	b25b      	sxtb	r3, r3
   27710:	b2d9      	uxtb	r1, r3
   27712:	68fb      	ldr	r3, [r7, #12]
   27714:	2230      	movs	r2, #48	; 0x30
   27716:	5499      	strb	r1, [r3, r2]
}
   27718:	46c0      	nop			; (mov r8, r8)
   2771a:	46bd      	mov	sp, r7
   2771c:	b004      	add	sp, #16
   2771e:	bd80      	pop	{r7, pc}

00027720 <usart_write_buffer_job>:
 */
enum status_code usart_write_buffer_job(
		struct usart_module *const module,
		uint8_t *tx_data,
		uint16_t length)
{
   27720:	b580      	push	{r7, lr}
   27722:	b084      	sub	sp, #16
   27724:	af00      	add	r7, sp, #0
   27726:	60f8      	str	r0, [r7, #12]
   27728:	60b9      	str	r1, [r7, #8]
   2772a:	1dbb      	adds	r3, r7, #6
   2772c:	801a      	strh	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(tx_data);

	if (length == 0) {
   2772e:	1dbb      	adds	r3, r7, #6
   27730:	881b      	ldrh	r3, [r3, #0]
   27732:	2b00      	cmp	r3, #0
   27734:	d101      	bne.n	2773a <usart_write_buffer_job+0x1a>
		return STATUS_ERR_INVALID_ARG;
   27736:	2317      	movs	r3, #23
   27738:	e010      	b.n	2775c <usart_write_buffer_job+0x3c>
	}

	/* Check that the transmitter is enabled */
	if (!(module->transmitter_enabled)) {
   2773a:	68fb      	ldr	r3, [r7, #12]
   2773c:	79db      	ldrb	r3, [r3, #7]
   2773e:	2201      	movs	r2, #1
   27740:	4053      	eors	r3, r2
   27742:	b2db      	uxtb	r3, r3
   27744:	2b00      	cmp	r3, #0
   27746:	d001      	beq.n	2774c <usart_write_buffer_job+0x2c>
		return STATUS_ERR_DENIED;
   27748:	231c      	movs	r3, #28
   2774a:	e007      	b.n	2775c <usart_write_buffer_job+0x3c>
	}

	/* Issue internal asynchronous write */
	return _usart_write_buffer(module, tx_data, length);
   2774c:	1dbb      	adds	r3, r7, #6
   2774e:	881a      	ldrh	r2, [r3, #0]
   27750:	68b9      	ldr	r1, [r7, #8]
   27752:	68fb      	ldr	r3, [r7, #12]
   27754:	0018      	movs	r0, r3
   27756:	4b03      	ldr	r3, [pc, #12]	; (27764 <usart_write_buffer_job+0x44>)
   27758:	4798      	blx	r3
   2775a:	0003      	movs	r3, r0
}
   2775c:	0018      	movs	r0, r3
   2775e:	46bd      	mov	sp, r7
   27760:	b004      	add	sp, #16
   27762:	bd80      	pop	{r7, pc}
   27764:	00027605 	.word	0x00027605

00027768 <usart_read_buffer_job>:
 */
enum status_code usart_read_buffer_job(
		struct usart_module *const module,
		uint8_t *rx_data,
		uint16_t length)
{
   27768:	b580      	push	{r7, lr}
   2776a:	b084      	sub	sp, #16
   2776c:	af00      	add	r7, sp, #0
   2776e:	60f8      	str	r0, [r7, #12]
   27770:	60b9      	str	r1, [r7, #8]
   27772:	1dbb      	adds	r3, r7, #6
   27774:	801a      	strh	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(rx_data);

	if (length == 0) {
   27776:	1dbb      	adds	r3, r7, #6
   27778:	881b      	ldrh	r3, [r3, #0]
   2777a:	2b00      	cmp	r3, #0
   2777c:	d101      	bne.n	27782 <usart_read_buffer_job+0x1a>
		return STATUS_ERR_INVALID_ARG;
   2777e:	2317      	movs	r3, #23
   27780:	e010      	b.n	277a4 <usart_read_buffer_job+0x3c>
	}

	/* Check that the receiver is enabled */
	if (!(module->receiver_enabled)) {
   27782:	68fb      	ldr	r3, [r7, #12]
   27784:	799b      	ldrb	r3, [r3, #6]
   27786:	2201      	movs	r2, #1
   27788:	4053      	eors	r3, r2
   2778a:	b2db      	uxtb	r3, r3
   2778c:	2b00      	cmp	r3, #0
   2778e:	d001      	beq.n	27794 <usart_read_buffer_job+0x2c>
		return STATUS_ERR_DENIED;
   27790:	231c      	movs	r3, #28
   27792:	e007      	b.n	277a4 <usart_read_buffer_job+0x3c>
	}

	/* Issue internal asynchronous read */
	return _usart_read_buffer(module, rx_data, length);
   27794:	1dbb      	adds	r3, r7, #6
   27796:	881a      	ldrh	r2, [r3, #0]
   27798:	68b9      	ldr	r1, [r7, #8]
   2779a:	68fb      	ldr	r3, [r7, #12]
   2779c:	0018      	movs	r0, r3
   2779e:	4b03      	ldr	r3, [pc, #12]	; (277ac <usart_read_buffer_job+0x44>)
   277a0:	4798      	blx	r3
   277a2:	0003      	movs	r3, r0
}
   277a4:	0018      	movs	r0, r3
   277a6:	46bd      	mov	sp, r7
   277a8:	b004      	add	sp, #16
   277aa:	bd80      	pop	{r7, pc}
   277ac:	00027661 	.word	0x00027661

000277b0 <usart_get_job_status>:
 * \retval STATUS_ERR_INVALID_ARG  An invalid transceiver enum given
 */
enum status_code usart_get_job_status(
		struct usart_module *const module,
		enum usart_transceiver_type transceiver_type)
{
   277b0:	b580      	push	{r7, lr}
   277b2:	b084      	sub	sp, #16
   277b4:	af00      	add	r7, sp, #0
   277b6:	6078      	str	r0, [r7, #4]
   277b8:	000a      	movs	r2, r1
   277ba:	1cfb      	adds	r3, r7, #3
   277bc:	701a      	strb	r2, [r3, #0]
	Assert(module);

	/* Variable for status code */
	enum status_code status_code;

	switch(transceiver_type) {
   277be:	1cfb      	adds	r3, r7, #3
   277c0:	781b      	ldrb	r3, [r3, #0]
   277c2:	2b00      	cmp	r3, #0
   277c4:	d002      	beq.n	277cc <usart_get_job_status+0x1c>
   277c6:	2b01      	cmp	r3, #1
   277c8:	d007      	beq.n	277da <usart_get_job_status+0x2a>
   277ca:	e00d      	b.n	277e8 <usart_get_job_status+0x38>
	case USART_TRANSCEIVER_RX:
			status_code = module->rx_status;
   277cc:	230f      	movs	r3, #15
   277ce:	18fb      	adds	r3, r7, r3
   277d0:	687a      	ldr	r2, [r7, #4]
   277d2:	2132      	movs	r1, #50	; 0x32
   277d4:	5c52      	ldrb	r2, [r2, r1]
   277d6:	701a      	strb	r2, [r3, #0]
			break;
   277d8:	e00b      	b.n	277f2 <usart_get_job_status+0x42>

	case USART_TRANSCEIVER_TX:
			status_code = module->tx_status;
   277da:	230f      	movs	r3, #15
   277dc:	18fb      	adds	r3, r7, r3
   277de:	687a      	ldr	r2, [r7, #4]
   277e0:	2133      	movs	r1, #51	; 0x33
   277e2:	5c52      	ldrb	r2, [r2, r1]
   277e4:	701a      	strb	r2, [r3, #0]
			break;
   277e6:	e004      	b.n	277f2 <usart_get_job_status+0x42>

	default:
			status_code = STATUS_ERR_INVALID_ARG;
   277e8:	230f      	movs	r3, #15
   277ea:	18fb      	adds	r3, r7, r3
   277ec:	2217      	movs	r2, #23
   277ee:	701a      	strb	r2, [r3, #0]
			break;
   277f0:	46c0      	nop			; (mov r8, r8)
	}

	return status_code;
   277f2:	230f      	movs	r3, #15
   277f4:	18fb      	adds	r3, r7, r3
   277f6:	781b      	ldrb	r3, [r3, #0]
}
   277f8:	0018      	movs	r0, r3
   277fa:	46bd      	mov	sp, r7
   277fc:	b004      	add	sp, #16
   277fe:	bd80      	pop	{r7, pc}

00027800 <_usart_interrupt_handler>:
 * \param[in]  instance  ID of the SERCOM instance calling the interrupt
 *                       handler.
 */
void _usart_interrupt_handler(
		uint8_t instance)
{
   27800:	b580      	push	{r7, lr}
   27802:	b088      	sub	sp, #32
   27804:	af00      	add	r7, sp, #0
   27806:	0002      	movs	r2, r0
   27808:	1dfb      	adds	r3, r7, #7
   2780a:	701a      	strb	r2, [r3, #0]
	uint8_t error_code;


	/* Get device instance from the look-up table */
	struct usart_module *module
		= (struct usart_module *)_sercom_instances[instance];
   2780c:	1dfb      	adds	r3, r7, #7
   2780e:	781a      	ldrb	r2, [r3, #0]
	struct usart_module *module
   27810:	4ba3      	ldr	r3, [pc, #652]	; (27aa0 <_usart_interrupt_handler+0x2a0>)
   27812:	0092      	lsls	r2, r2, #2
   27814:	58d3      	ldr	r3, [r2, r3]
   27816:	61bb      	str	r3, [r7, #24]

	/* Pointer to the hardware module instance */
	SercomUsart *const usart_hw
		= &(module->hw->USART);
   27818:	69bb      	ldr	r3, [r7, #24]
   2781a:	681b      	ldr	r3, [r3, #0]
	SercomUsart *const usart_hw
   2781c:	617b      	str	r3, [r7, #20]

	/* Wait for the synchronization to complete */
	_usart_wait_for_sync(module);
   2781e:	69bb      	ldr	r3, [r7, #24]
   27820:	0018      	movs	r0, r3
   27822:	4ba0      	ldr	r3, [pc, #640]	; (27aa4 <_usart_interrupt_handler+0x2a4>)
   27824:	4798      	blx	r3

	/* Read and mask interrupt flag register */
	interrupt_status = usart_hw->INTFLAG.reg;
   27826:	697b      	ldr	r3, [r7, #20]
   27828:	7e1b      	ldrb	r3, [r3, #24]
   2782a:	b2da      	uxtb	r2, r3
   2782c:	2312      	movs	r3, #18
   2782e:	18fb      	adds	r3, r7, r3
   27830:	801a      	strh	r2, [r3, #0]
	interrupt_status &= usart_hw->INTENSET.reg;
   27832:	697b      	ldr	r3, [r7, #20]
   27834:	7d9b      	ldrb	r3, [r3, #22]
   27836:	b2db      	uxtb	r3, r3
   27838:	b29a      	uxth	r2, r3
   2783a:	2312      	movs	r3, #18
   2783c:	18fb      	adds	r3, r7, r3
   2783e:	2112      	movs	r1, #18
   27840:	1879      	adds	r1, r7, r1
   27842:	8809      	ldrh	r1, [r1, #0]
   27844:	400a      	ands	r2, r1
   27846:	801a      	strh	r2, [r3, #0]
	callback_status = module->callback_reg_mask &
   27848:	69bb      	ldr	r3, [r7, #24]
   2784a:	2230      	movs	r2, #48	; 0x30
   2784c:	5c9b      	ldrb	r3, [r3, r2]
			module->callback_enable_mask;
   2784e:	69ba      	ldr	r2, [r7, #24]
   27850:	2131      	movs	r1, #49	; 0x31
   27852:	5c52      	ldrb	r2, [r2, r1]
	callback_status = module->callback_reg_mask &
   27854:	4013      	ands	r3, r2
   27856:	b2da      	uxtb	r2, r3
   27858:	2310      	movs	r3, #16
   2785a:	18fb      	adds	r3, r7, r3
   2785c:	801a      	strh	r2, [r3, #0]

	/* Check if a DATA READY interrupt has occurred,
	 * and if there is more to transfer */
	if (interrupt_status & SERCOM_USART_INTFLAG_DRE) {
   2785e:	2312      	movs	r3, #18
   27860:	18fb      	adds	r3, r7, r3
   27862:	881b      	ldrh	r3, [r3, #0]
   27864:	2201      	movs	r2, #1
   27866:	4013      	ands	r3, r2
   27868:	d044      	beq.n	278f4 <_usart_interrupt_handler+0xf4>
		if (module->remaining_tx_buffer_length) {
   2786a:	69bb      	ldr	r3, [r7, #24]
   2786c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
   2786e:	b29b      	uxth	r3, r3
   27870:	2b00      	cmp	r3, #0
   27872:	d03c      	beq.n	278ee <_usart_interrupt_handler+0xee>
			/* Write value will be at least 8-bits long */
			uint16_t data_to_send = *(module->tx_buffer_ptr);
   27874:	69bb      	ldr	r3, [r7, #24]
   27876:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   27878:	781b      	ldrb	r3, [r3, #0]
   2787a:	b2da      	uxtb	r2, r3
   2787c:	231c      	movs	r3, #28
   2787e:	18fb      	adds	r3, r7, r3
   27880:	801a      	strh	r2, [r3, #0]
			/* Increment 8-bit pointer */
			(module->tx_buffer_ptr)++;
   27882:	69bb      	ldr	r3, [r7, #24]
   27884:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   27886:	1c5a      	adds	r2, r3, #1
   27888:	69bb      	ldr	r3, [r7, #24]
   2788a:	629a      	str	r2, [r3, #40]	; 0x28

			if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
   2788c:	69bb      	ldr	r3, [r7, #24]
   2788e:	795b      	ldrb	r3, [r3, #5]
   27890:	2b01      	cmp	r3, #1
   27892:	d113      	bne.n	278bc <_usart_interrupt_handler+0xbc>
				data_to_send |= (*(module->tx_buffer_ptr) << 8);
   27894:	69bb      	ldr	r3, [r7, #24]
   27896:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   27898:	781b      	ldrb	r3, [r3, #0]
   2789a:	b2db      	uxtb	r3, r3
   2789c:	021b      	lsls	r3, r3, #8
   2789e:	b21a      	sxth	r2, r3
   278a0:	231c      	movs	r3, #28
   278a2:	18fb      	adds	r3, r7, r3
   278a4:	2100      	movs	r1, #0
   278a6:	5e5b      	ldrsh	r3, [r3, r1]
   278a8:	4313      	orrs	r3, r2
   278aa:	b21a      	sxth	r2, r3
   278ac:	231c      	movs	r3, #28
   278ae:	18fb      	adds	r3, r7, r3
   278b0:	801a      	strh	r2, [r3, #0]
				/* Increment 8-bit pointer */
				(module->tx_buffer_ptr)++;
   278b2:	69bb      	ldr	r3, [r7, #24]
   278b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   278b6:	1c5a      	adds	r2, r3, #1
   278b8:	69bb      	ldr	r3, [r7, #24]
   278ba:	629a      	str	r2, [r3, #40]	; 0x28
			}
			/* Write the data to send */
			usart_hw->DATA.reg = (data_to_send & SERCOM_USART_DATA_MASK);
   278bc:	231c      	movs	r3, #28
   278be:	18fb      	adds	r3, r7, r3
   278c0:	881b      	ldrh	r3, [r3, #0]
   278c2:	05db      	lsls	r3, r3, #23
   278c4:	0ddb      	lsrs	r3, r3, #23
   278c6:	b29a      	uxth	r2, r3
   278c8:	697b      	ldr	r3, [r7, #20]
   278ca:	851a      	strh	r2, [r3, #40]	; 0x28

			if (--(module->remaining_tx_buffer_length) == 0) {
   278cc:	69bb      	ldr	r3, [r7, #24]
   278ce:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
   278d0:	b29b      	uxth	r3, r3
   278d2:	3b01      	subs	r3, #1
   278d4:	b29b      	uxth	r3, r3
   278d6:	69ba      	ldr	r2, [r7, #24]
   278d8:	1c19      	adds	r1, r3, #0
   278da:	85d1      	strh	r1, [r2, #46]	; 0x2e
   278dc:	2b00      	cmp	r3, #0
   278de:	d109      	bne.n	278f4 <_usart_interrupt_handler+0xf4>
				/* Disable the Data Register Empty Interrupt */
				usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
   278e0:	697b      	ldr	r3, [r7, #20]
   278e2:	2201      	movs	r2, #1
   278e4:	751a      	strb	r2, [r3, #20]
				/* Enable Transmission Complete interrupt */
				usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_TXC;
   278e6:	697b      	ldr	r3, [r7, #20]
   278e8:	2202      	movs	r2, #2
   278ea:	759a      	strb	r2, [r3, #22]
   278ec:	e002      	b.n	278f4 <_usart_interrupt_handler+0xf4>

			}
		} else {
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
   278ee:	697b      	ldr	r3, [r7, #20]
   278f0:	2201      	movs	r2, #1
   278f2:	751a      	strb	r2, [r3, #20]
		}
	}

	/* Check if the Transmission Complete interrupt has occurred and
	 * that the transmit buffer is empty */
	if (interrupt_status & SERCOM_USART_INTFLAG_TXC) {
   278f4:	2312      	movs	r3, #18
   278f6:	18fb      	adds	r3, r7, r3
   278f8:	881b      	ldrh	r3, [r3, #0]
   278fa:	2202      	movs	r2, #2
   278fc:	4013      	ands	r3, r2
   278fe:	d011      	beq.n	27924 <_usart_interrupt_handler+0x124>

		/* Disable TX Complete Interrupt, and set STATUS_OK */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_TXC;
   27900:	697b      	ldr	r3, [r7, #20]
   27902:	2202      	movs	r2, #2
   27904:	751a      	strb	r2, [r3, #20]
		module->tx_status = STATUS_OK;
   27906:	69bb      	ldr	r3, [r7, #24]
   27908:	2233      	movs	r2, #51	; 0x33
   2790a:	2100      	movs	r1, #0
   2790c:	5499      	strb	r1, [r3, r2]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BUFFER_TRANSMITTED)) {
   2790e:	2310      	movs	r3, #16
   27910:	18fb      	adds	r3, r7, r3
   27912:	881b      	ldrh	r3, [r3, #0]
   27914:	2201      	movs	r2, #1
   27916:	4013      	ands	r3, r2
   27918:	d004      	beq.n	27924 <_usart_interrupt_handler+0x124>
			(*(module->callback[USART_CALLBACK_BUFFER_TRANSMITTED]))(module);
   2791a:	69bb      	ldr	r3, [r7, #24]
   2791c:	68db      	ldr	r3, [r3, #12]
   2791e:	69ba      	ldr	r2, [r7, #24]
   27920:	0010      	movs	r0, r2
   27922:	4798      	blx	r3
		}
	}

	/* Check if the Receive Complete interrupt has occurred, and that
	 * there's more data to receive */
	if (interrupt_status & SERCOM_USART_INTFLAG_RXC) {
   27924:	2312      	movs	r3, #18
   27926:	18fb      	adds	r3, r7, r3
   27928:	881b      	ldrh	r3, [r3, #0]
   2792a:	2204      	movs	r2, #4
   2792c:	4013      	ands	r3, r2
   2792e:	d100      	bne.n	27932 <_usart_interrupt_handler+0x132>
   27930:	e0bd      	b.n	27aae <_usart_interrupt_handler+0x2ae>

		if (module->remaining_rx_buffer_length) {
   27932:	69bb      	ldr	r3, [r7, #24]
   27934:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
   27936:	b29b      	uxth	r3, r3
   27938:	2b00      	cmp	r3, #0
   2793a:	d100      	bne.n	2793e <_usart_interrupt_handler+0x13e>
   2793c:	e0b4      	b.n	27aa8 <_usart_interrupt_handler+0x2a8>
			/* Read out the status code and mask away all but the 4 LSBs*/
			error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
   2793e:	697b      	ldr	r3, [r7, #20]
   27940:	8b5b      	ldrh	r3, [r3, #26]
   27942:	b29b      	uxth	r3, r3
   27944:	b2da      	uxtb	r2, r3
   27946:	231f      	movs	r3, #31
   27948:	18fb      	adds	r3, r7, r3
   2794a:	213f      	movs	r1, #63	; 0x3f
   2794c:	400a      	ands	r2, r1
   2794e:	701a      	strb	r2, [r3, #0]
#if !SAMD20
			/* CTS status should not be considered as an error */
			if(error_code & SERCOM_USART_STATUS_CTS) {
   27950:	231f      	movs	r3, #31
   27952:	18fb      	adds	r3, r7, r3
   27954:	781b      	ldrb	r3, [r3, #0]
   27956:	2208      	movs	r2, #8
   27958:	4013      	ands	r3, r2
   2795a:	d007      	beq.n	2796c <_usart_interrupt_handler+0x16c>
				error_code &= ~SERCOM_USART_STATUS_CTS;
   2795c:	231f      	movs	r3, #31
   2795e:	18fb      	adds	r3, r7, r3
   27960:	221f      	movs	r2, #31
   27962:	18ba      	adds	r2, r7, r2
   27964:	7812      	ldrb	r2, [r2, #0]
   27966:	2108      	movs	r1, #8
   27968:	438a      	bics	r2, r1
   2796a:	701a      	strb	r2, [r3, #0]
			if(error_code & SERCOM_USART_STATUS_TXE) {
				error_code &= ~SERCOM_USART_STATUS_TXE;
			}
#endif
			/* Check if an error has occurred during the receiving */
			if (error_code) {
   2796c:	231f      	movs	r3, #31
   2796e:	18fb      	adds	r3, r7, r3
   27970:	781b      	ldrb	r3, [r3, #0]
   27972:	2b00      	cmp	r3, #0
   27974:	d050      	beq.n	27a18 <_usart_interrupt_handler+0x218>
				/* Check which error occurred */
				if (error_code & SERCOM_USART_STATUS_FERR) {
   27976:	231f      	movs	r3, #31
   27978:	18fb      	adds	r3, r7, r3
   2797a:	781b      	ldrb	r3, [r3, #0]
   2797c:	2202      	movs	r2, #2
   2797e:	4013      	ands	r3, r2
   27980:	d007      	beq.n	27992 <_usart_interrupt_handler+0x192>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_BAD_FORMAT;
   27982:	69bb      	ldr	r3, [r7, #24]
   27984:	2232      	movs	r2, #50	; 0x32
   27986:	211a      	movs	r1, #26
   27988:	5499      	strb	r1, [r3, r2]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_FERR;
   2798a:	697b      	ldr	r3, [r7, #20]
   2798c:	2202      	movs	r2, #2
   2798e:	835a      	strh	r2, [r3, #26]
   27990:	e036      	b.n	27a00 <_usart_interrupt_handler+0x200>
				} else if (error_code & SERCOM_USART_STATUS_BUFOVF) {
   27992:	231f      	movs	r3, #31
   27994:	18fb      	adds	r3, r7, r3
   27996:	781b      	ldrb	r3, [r3, #0]
   27998:	2204      	movs	r2, #4
   2799a:	4013      	ands	r3, r2
   2799c:	d007      	beq.n	279ae <_usart_interrupt_handler+0x1ae>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_OVERFLOW;
   2799e:	69bb      	ldr	r3, [r7, #24]
   279a0:	2232      	movs	r2, #50	; 0x32
   279a2:	211e      	movs	r1, #30
   279a4:	5499      	strb	r1, [r3, r2]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_BUFOVF;
   279a6:	697b      	ldr	r3, [r7, #20]
   279a8:	2204      	movs	r2, #4
   279aa:	835a      	strh	r2, [r3, #26]
   279ac:	e028      	b.n	27a00 <_usart_interrupt_handler+0x200>
				} else if (error_code & SERCOM_USART_STATUS_PERR) {
   279ae:	231f      	movs	r3, #31
   279b0:	18fb      	adds	r3, r7, r3
   279b2:	781b      	ldrb	r3, [r3, #0]
   279b4:	2201      	movs	r2, #1
   279b6:	4013      	ands	r3, r2
   279b8:	d007      	beq.n	279ca <_usart_interrupt_handler+0x1ca>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_BAD_DATA;
   279ba:	69bb      	ldr	r3, [r7, #24]
   279bc:	2232      	movs	r2, #50	; 0x32
   279be:	2113      	movs	r1, #19
   279c0:	5499      	strb	r1, [r3, r2]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_PERR;
   279c2:	697b      	ldr	r3, [r7, #20]
   279c4:	2201      	movs	r2, #1
   279c6:	835a      	strh	r2, [r3, #26]
   279c8:	e01a      	b.n	27a00 <_usart_interrupt_handler+0x200>
				}
#ifdef FEATURE_USART_LIN_SLAVE
				else if (error_code & SERCOM_USART_STATUS_ISF) {
   279ca:	231f      	movs	r3, #31
   279cc:	18fb      	adds	r3, r7, r3
   279ce:	781b      	ldrb	r3, [r3, #0]
   279d0:	2210      	movs	r2, #16
   279d2:	4013      	ands	r3, r2
   279d4:	d007      	beq.n	279e6 <_usart_interrupt_handler+0x1e6>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_PROTOCOL;
   279d6:	69bb      	ldr	r3, [r7, #24]
   279d8:	2232      	movs	r2, #50	; 0x32
   279da:	2142      	movs	r1, #66	; 0x42
   279dc:	5499      	strb	r1, [r3, r2]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_ISF;
   279de:	697b      	ldr	r3, [r7, #20]
   279e0:	2210      	movs	r2, #16
   279e2:	835a      	strh	r2, [r3, #26]
   279e4:	e00c      	b.n	27a00 <_usart_interrupt_handler+0x200>
				}
#endif
#ifdef FEATURE_USART_COLLISION_DECTION
				else if (error_code & SERCOM_USART_STATUS_COLL) {
   279e6:	231f      	movs	r3, #31
   279e8:	18fb      	adds	r3, r7, r3
   279ea:	781b      	ldrb	r3, [r3, #0]
   279ec:	2220      	movs	r2, #32
   279ee:	4013      	ands	r3, r2
   279f0:	d006      	beq.n	27a00 <_usart_interrupt_handler+0x200>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_PACKET_COLLISION;
   279f2:	69bb      	ldr	r3, [r7, #24]
   279f4:	2232      	movs	r2, #50	; 0x32
   279f6:	2141      	movs	r1, #65	; 0x41
   279f8:	5499      	strb	r1, [r3, r2]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
   279fa:	697b      	ldr	r3, [r7, #20]
   279fc:	2220      	movs	r2, #32
   279fe:	835a      	strh	r2, [r3, #26]
				}
#endif

				/* Run callback if registered and enabled */
				if (callback_status
						& (1 << USART_CALLBACK_ERROR)) {
   27a00:	2310      	movs	r3, #16
   27a02:	18fb      	adds	r3, r7, r3
   27a04:	881b      	ldrh	r3, [r3, #0]
   27a06:	2204      	movs	r2, #4
   27a08:	4013      	ands	r3, r2
				if (callback_status
   27a0a:	d050      	beq.n	27aae <_usart_interrupt_handler+0x2ae>
					(*(module->callback[USART_CALLBACK_ERROR]))(module);
   27a0c:	69bb      	ldr	r3, [r7, #24]
   27a0e:	695b      	ldr	r3, [r3, #20]
   27a10:	69ba      	ldr	r2, [r7, #24]
   27a12:	0010      	movs	r0, r2
   27a14:	4798      	blx	r3
   27a16:	e04a      	b.n	27aae <_usart_interrupt_handler+0x2ae>

			} else {

				/* Read current packet from DATA register,
				 * increment buffer pointer and decrement buffer length */
				uint16_t received_data = (usart_hw->DATA.reg & SERCOM_USART_DATA_MASK);
   27a18:	697b      	ldr	r3, [r7, #20]
   27a1a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
   27a1c:	b29a      	uxth	r2, r3
   27a1e:	230e      	movs	r3, #14
   27a20:	18fb      	adds	r3, r7, r3
   27a22:	05d2      	lsls	r2, r2, #23
   27a24:	0dd2      	lsrs	r2, r2, #23
   27a26:	801a      	strh	r2, [r3, #0]

				/* Read value will be at least 8-bits long */
				*(module->rx_buffer_ptr) = received_data;
   27a28:	69bb      	ldr	r3, [r7, #24]
   27a2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   27a2c:	220e      	movs	r2, #14
   27a2e:	18ba      	adds	r2, r7, r2
   27a30:	8812      	ldrh	r2, [r2, #0]
   27a32:	b2d2      	uxtb	r2, r2
   27a34:	701a      	strb	r2, [r3, #0]
				/* Increment 8-bit pointer */
				module->rx_buffer_ptr += 1;
   27a36:	69bb      	ldr	r3, [r7, #24]
   27a38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   27a3a:	1c5a      	adds	r2, r3, #1
   27a3c:	69bb      	ldr	r3, [r7, #24]
   27a3e:	625a      	str	r2, [r3, #36]	; 0x24

				if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
   27a40:	69bb      	ldr	r3, [r7, #24]
   27a42:	795b      	ldrb	r3, [r3, #5]
   27a44:	2b01      	cmp	r3, #1
   27a46:	d10d      	bne.n	27a64 <_usart_interrupt_handler+0x264>
					/* 9-bit data, write next received byte to the buffer */
					*(module->rx_buffer_ptr) = (received_data >> 8);
   27a48:	69bb      	ldr	r3, [r7, #24]
   27a4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   27a4c:	220e      	movs	r2, #14
   27a4e:	18ba      	adds	r2, r7, r2
   27a50:	8812      	ldrh	r2, [r2, #0]
   27a52:	0a12      	lsrs	r2, r2, #8
   27a54:	b292      	uxth	r2, r2
   27a56:	b2d2      	uxtb	r2, r2
   27a58:	701a      	strb	r2, [r3, #0]
					/* Increment 8-bit pointer */
					module->rx_buffer_ptr += 1;
   27a5a:	69bb      	ldr	r3, [r7, #24]
   27a5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   27a5e:	1c5a      	adds	r2, r3, #1
   27a60:	69bb      	ldr	r3, [r7, #24]
   27a62:	625a      	str	r2, [r3, #36]	; 0x24
				}

				/* Check if the last character have been received */
				if(--(module->remaining_rx_buffer_length) == 0) {
   27a64:	69bb      	ldr	r3, [r7, #24]
   27a66:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
   27a68:	b29b      	uxth	r3, r3
   27a6a:	3b01      	subs	r3, #1
   27a6c:	b29b      	uxth	r3, r3
   27a6e:	69ba      	ldr	r2, [r7, #24]
   27a70:	1c19      	adds	r1, r3, #0
   27a72:	8591      	strh	r1, [r2, #44]	; 0x2c
   27a74:	2b00      	cmp	r3, #0
   27a76:	d11a      	bne.n	27aae <_usart_interrupt_handler+0x2ae>
					/* Disable RX Complete Interrupt,
					 * and set STATUS_OK */
					usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
   27a78:	697b      	ldr	r3, [r7, #20]
   27a7a:	2204      	movs	r2, #4
   27a7c:	751a      	strb	r2, [r3, #20]
					module->rx_status = STATUS_OK;
   27a7e:	69bb      	ldr	r3, [r7, #24]
   27a80:	2232      	movs	r2, #50	; 0x32
   27a82:	2100      	movs	r1, #0
   27a84:	5499      	strb	r1, [r3, r2]

					/* Run callback if registered and enabled */
					if (callback_status
							& (1 << USART_CALLBACK_BUFFER_RECEIVED)) {
   27a86:	2310      	movs	r3, #16
   27a88:	18fb      	adds	r3, r7, r3
   27a8a:	881b      	ldrh	r3, [r3, #0]
   27a8c:	2202      	movs	r2, #2
   27a8e:	4013      	ands	r3, r2
					if (callback_status
   27a90:	d00d      	beq.n	27aae <_usart_interrupt_handler+0x2ae>
						(*(module->callback[USART_CALLBACK_BUFFER_RECEIVED]))(module);
   27a92:	69bb      	ldr	r3, [r7, #24]
   27a94:	691b      	ldr	r3, [r3, #16]
   27a96:	69ba      	ldr	r2, [r7, #24]
   27a98:	0010      	movs	r0, r2
   27a9a:	4798      	blx	r3
   27a9c:	e007      	b.n	27aae <_usart_interrupt_handler+0x2ae>
   27a9e:	46c0      	nop			; (mov r8, r8)
   27aa0:	200056a8 	.word	0x200056a8
   27aa4:	000275e1 	.word	0x000275e1
					}
				}
			}
		} else {
			/* This should not happen. Disable Receive Complete interrupt. */
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
   27aa8:	697b      	ldr	r3, [r7, #20]
   27aaa:	2204      	movs	r2, #4
   27aac:	751a      	strb	r2, [r3, #20]
		}
	}

#ifdef FEATURE_USART_HARDWARE_FLOW_CONTROL
	if (interrupt_status & SERCOM_USART_INTFLAG_CTSIC) {
   27aae:	2312      	movs	r3, #18
   27ab0:	18fb      	adds	r3, r7, r3
   27ab2:	881b      	ldrh	r3, [r3, #0]
   27ab4:	2210      	movs	r2, #16
   27ab6:	4013      	ands	r3, r2
   27ab8:	d010      	beq.n	27adc <_usart_interrupt_handler+0x2dc>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_CTSIC;
   27aba:	697b      	ldr	r3, [r7, #20]
   27abc:	2210      	movs	r2, #16
   27abe:	751a      	strb	r2, [r3, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_CTSIC;
   27ac0:	697b      	ldr	r3, [r7, #20]
   27ac2:	2210      	movs	r2, #16
   27ac4:	761a      	strb	r2, [r3, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_CTS_INPUT_CHANGE)) {
   27ac6:	2310      	movs	r3, #16
   27ac8:	18fb      	adds	r3, r7, r3
   27aca:	881b      	ldrh	r3, [r3, #0]
   27acc:	2210      	movs	r2, #16
   27ace:	4013      	ands	r3, r2
   27ad0:	d004      	beq.n	27adc <_usart_interrupt_handler+0x2dc>
			(*(module->callback[USART_CALLBACK_CTS_INPUT_CHANGE]))(module);
   27ad2:	69bb      	ldr	r3, [r7, #24]
   27ad4:	69db      	ldr	r3, [r3, #28]
   27ad6:	69ba      	ldr	r2, [r7, #24]
   27ad8:	0010      	movs	r0, r2
   27ada:	4798      	blx	r3
		}
	}
#endif

#ifdef FEATURE_USART_LIN_SLAVE
	if (interrupt_status & SERCOM_USART_INTFLAG_RXBRK) {
   27adc:	2312      	movs	r3, #18
   27ade:	18fb      	adds	r3, r7, r3
   27ae0:	881b      	ldrh	r3, [r3, #0]
   27ae2:	2220      	movs	r2, #32
   27ae4:	4013      	ands	r3, r2
   27ae6:	d010      	beq.n	27b0a <_usart_interrupt_handler+0x30a>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXBRK;
   27ae8:	697b      	ldr	r3, [r7, #20]
   27aea:	2220      	movs	r2, #32
   27aec:	751a      	strb	r2, [r3, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXBRK;
   27aee:	697b      	ldr	r3, [r7, #20]
   27af0:	2220      	movs	r2, #32
   27af2:	761a      	strb	r2, [r3, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BREAK_RECEIVED)) {
   27af4:	2310      	movs	r3, #16
   27af6:	18fb      	adds	r3, r7, r3
   27af8:	881b      	ldrh	r3, [r3, #0]
   27afa:	2208      	movs	r2, #8
   27afc:	4013      	ands	r3, r2
   27afe:	d004      	beq.n	27b0a <_usart_interrupt_handler+0x30a>
			(*(module->callback[USART_CALLBACK_BREAK_RECEIVED]))(module);
   27b00:	69bb      	ldr	r3, [r7, #24]
   27b02:	699b      	ldr	r3, [r3, #24]
   27b04:	69ba      	ldr	r2, [r7, #24]
   27b06:	0010      	movs	r0, r2
   27b08:	4798      	blx	r3
		}
	}
#endif

#ifdef FEATURE_USART_START_FRAME_DECTION
	if (interrupt_status & SERCOM_USART_INTFLAG_RXS) {
   27b0a:	2312      	movs	r3, #18
   27b0c:	18fb      	adds	r3, r7, r3
   27b0e:	881b      	ldrh	r3, [r3, #0]
   27b10:	2208      	movs	r2, #8
   27b12:	4013      	ands	r3, r2
   27b14:	d010      	beq.n	27b38 <_usart_interrupt_handler+0x338>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXS;
   27b16:	697b      	ldr	r3, [r7, #20]
   27b18:	2208      	movs	r2, #8
   27b1a:	751a      	strb	r2, [r3, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXS;
   27b1c:	697b      	ldr	r3, [r7, #20]
   27b1e:	2208      	movs	r2, #8
   27b20:	761a      	strb	r2, [r3, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_START_RECEIVED)) {
   27b22:	2310      	movs	r3, #16
   27b24:	18fb      	adds	r3, r7, r3
   27b26:	881b      	ldrh	r3, [r3, #0]
   27b28:	2220      	movs	r2, #32
   27b2a:	4013      	ands	r3, r2
   27b2c:	d004      	beq.n	27b38 <_usart_interrupt_handler+0x338>
			(*(module->callback[USART_CALLBACK_START_RECEIVED]))(module);
   27b2e:	69bb      	ldr	r3, [r7, #24]
   27b30:	6a1b      	ldr	r3, [r3, #32]
   27b32:	69ba      	ldr	r2, [r7, #24]
   27b34:	0010      	movs	r0, r2
   27b36:	4798      	blx	r3
		}
	}
#endif
}
   27b38:	46c0      	nop			; (mov r8, r8)
   27b3a:	46bd      	mov	sp, r7
   27b3c:	b008      	add	sp, #32
   27b3e:	bd80      	pop	{r7, pc}

00027b40 <system_gclk_gen_get_config_defaults>:
{
   27b40:	b580      	push	{r7, lr}
   27b42:	b082      	sub	sp, #8
   27b44:	af00      	add	r7, sp, #0
   27b46:	6078      	str	r0, [r7, #4]
	config->division_factor    = 1;
   27b48:	687b      	ldr	r3, [r7, #4]
   27b4a:	2201      	movs	r2, #1
   27b4c:	605a      	str	r2, [r3, #4]
	config->high_when_disabled = false;
   27b4e:	687b      	ldr	r3, [r7, #4]
   27b50:	2200      	movs	r2, #0
   27b52:	705a      	strb	r2, [r3, #1]
	config->source_clock       = GCLK_SOURCE_OSC8M;
   27b54:	687b      	ldr	r3, [r7, #4]
   27b56:	2206      	movs	r2, #6
   27b58:	701a      	strb	r2, [r3, #0]
	config->run_in_standby     = false;
   27b5a:	687b      	ldr	r3, [r7, #4]
   27b5c:	2200      	movs	r2, #0
   27b5e:	721a      	strb	r2, [r3, #8]
	config->output_enable      = false;
   27b60:	687b      	ldr	r3, [r7, #4]
   27b62:	2200      	movs	r2, #0
   27b64:	725a      	strb	r2, [r3, #9]
}
   27b66:	46c0      	nop			; (mov r8, r8)
   27b68:	46bd      	mov	sp, r7
   27b6a:	b002      	add	sp, #8
   27b6c:	bd80      	pop	{r7, pc}

00027b6e <system_gclk_chan_get_config_defaults>:
{
   27b6e:	b580      	push	{r7, lr}
   27b70:	b082      	sub	sp, #8
   27b72:	af00      	add	r7, sp, #0
   27b74:	6078      	str	r0, [r7, #4]
	config->source_generator = GCLK_GENERATOR_0;
   27b76:	687b      	ldr	r3, [r7, #4]
   27b78:	2200      	movs	r2, #0
   27b7a:	701a      	strb	r2, [r3, #0]
}
   27b7c:	46c0      	nop			; (mov r8, r8)
   27b7e:	46bd      	mov	sp, r7
   27b80:	b002      	add	sp, #8
   27b82:	bd80      	pop	{r7, pc}

00027b84 <system_clock_source_osc8m_get_config_defaults>:
{
   27b84:	b580      	push	{r7, lr}
   27b86:	b082      	sub	sp, #8
   27b88:	af00      	add	r7, sp, #0
   27b8a:	6078      	str	r0, [r7, #4]
	config->prescaler       = SYSTEM_OSC8M_DIV_8;
   27b8c:	687b      	ldr	r3, [r7, #4]
   27b8e:	2203      	movs	r2, #3
   27b90:	701a      	strb	r2, [r3, #0]
	config->run_in_standby  = false;
   27b92:	687b      	ldr	r3, [r7, #4]
   27b94:	2200      	movs	r2, #0
   27b96:	705a      	strb	r2, [r3, #1]
	config->on_demand       = true;
   27b98:	687b      	ldr	r3, [r7, #4]
   27b9a:	2201      	movs	r2, #1
   27b9c:	709a      	strb	r2, [r3, #2]
}
   27b9e:	46c0      	nop			; (mov r8, r8)
   27ba0:	46bd      	mov	sp, r7
   27ba2:	b002      	add	sp, #8
   27ba4:	bd80      	pop	{r7, pc}
	...

00027ba8 <system_cpu_clock_set_divider>:
{
   27ba8:	b580      	push	{r7, lr}
   27baa:	b082      	sub	sp, #8
   27bac:	af00      	add	r7, sp, #0
   27bae:	0002      	movs	r2, r0
   27bb0:	1dfb      	adds	r3, r7, #7
   27bb2:	701a      	strb	r2, [r3, #0]
	PM->CPUSEL.reg = (uint32_t)divider;
   27bb4:	4a03      	ldr	r2, [pc, #12]	; (27bc4 <system_cpu_clock_set_divider+0x1c>)
   27bb6:	1dfb      	adds	r3, r7, #7
   27bb8:	781b      	ldrb	r3, [r3, #0]
   27bba:	7213      	strb	r3, [r2, #8]
}
   27bbc:	46c0      	nop			; (mov r8, r8)
   27bbe:	46bd      	mov	sp, r7
   27bc0:	b002      	add	sp, #8
   27bc2:	bd80      	pop	{r7, pc}
   27bc4:	40000400 	.word	0x40000400

00027bc8 <system_apb_clock_set_divider>:
{
   27bc8:	b580      	push	{r7, lr}
   27bca:	b082      	sub	sp, #8
   27bcc:	af00      	add	r7, sp, #0
   27bce:	0002      	movs	r2, r0
   27bd0:	1dfb      	adds	r3, r7, #7
   27bd2:	701a      	strb	r2, [r3, #0]
   27bd4:	1dbb      	adds	r3, r7, #6
   27bd6:	1c0a      	adds	r2, r1, #0
   27bd8:	701a      	strb	r2, [r3, #0]
	switch (bus) {
   27bda:	1dfb      	adds	r3, r7, #7
   27bdc:	781b      	ldrb	r3, [r3, #0]
   27bde:	2b01      	cmp	r3, #1
   27be0:	d008      	beq.n	27bf4 <system_apb_clock_set_divider+0x2c>
   27be2:	2b02      	cmp	r3, #2
   27be4:	d00b      	beq.n	27bfe <system_apb_clock_set_divider+0x36>
   27be6:	2b00      	cmp	r3, #0
   27be8:	d10e      	bne.n	27c08 <system_apb_clock_set_divider+0x40>
			PM->APBASEL.reg = (uint32_t)divider;
   27bea:	4a0b      	ldr	r2, [pc, #44]	; (27c18 <system_apb_clock_set_divider+0x50>)
   27bec:	1dbb      	adds	r3, r7, #6
   27bee:	781b      	ldrb	r3, [r3, #0]
   27bf0:	7253      	strb	r3, [r2, #9]
			break;
   27bf2:	e00b      	b.n	27c0c <system_apb_clock_set_divider+0x44>
			PM->APBBSEL.reg = (uint32_t)divider;
   27bf4:	4a08      	ldr	r2, [pc, #32]	; (27c18 <system_apb_clock_set_divider+0x50>)
   27bf6:	1dbb      	adds	r3, r7, #6
   27bf8:	781b      	ldrb	r3, [r3, #0]
   27bfa:	7293      	strb	r3, [r2, #10]
			break;
   27bfc:	e006      	b.n	27c0c <system_apb_clock_set_divider+0x44>
			PM->APBCSEL.reg = (uint32_t)divider;
   27bfe:	4a06      	ldr	r2, [pc, #24]	; (27c18 <system_apb_clock_set_divider+0x50>)
   27c00:	1dbb      	adds	r3, r7, #6
   27c02:	781b      	ldrb	r3, [r3, #0]
   27c04:	72d3      	strb	r3, [r2, #11]
			break;
   27c06:	e001      	b.n	27c0c <system_apb_clock_set_divider+0x44>
			return STATUS_ERR_INVALID_ARG;
   27c08:	2317      	movs	r3, #23
   27c0a:	e000      	b.n	27c0e <system_apb_clock_set_divider+0x46>
	return STATUS_OK;
   27c0c:	2300      	movs	r3, #0
}
   27c0e:	0018      	movs	r0, r3
   27c10:	46bd      	mov	sp, r7
   27c12:	b002      	add	sp, #8
   27c14:	bd80      	pop	{r7, pc}
   27c16:	46c0      	nop			; (mov r8, r8)
   27c18:	40000400 	.word	0x40000400

00027c1c <system_clock_source_dpll_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to fill with default values
 */
static inline void system_clock_source_dpll_get_config_defaults(
		struct system_clock_source_dpll_config *const config)
{
   27c1c:	b580      	push	{r7, lr}
   27c1e:	b082      	sub	sp, #8
   27c20:	af00      	add	r7, sp, #0
   27c22:	6078      	str	r0, [r7, #4]
	config->on_demand           = true;
   27c24:	687b      	ldr	r3, [r7, #4]
   27c26:	2201      	movs	r2, #1
   27c28:	701a      	strb	r2, [r3, #0]
	config->run_in_standby      = false;
   27c2a:	687b      	ldr	r3, [r7, #4]
   27c2c:	2200      	movs	r2, #0
   27c2e:	705a      	strb	r2, [r3, #1]
	config->lock_bypass         = false;
   27c30:	687b      	ldr	r3, [r7, #4]
   27c32:	2200      	movs	r2, #0
   27c34:	709a      	strb	r2, [r3, #2]
	config->wake_up_fast        = false;
   27c36:	687b      	ldr	r3, [r7, #4]
   27c38:	2200      	movs	r2, #0
   27c3a:	70da      	strb	r2, [r3, #3]
	config->low_power_enable    = false;
   27c3c:	687b      	ldr	r3, [r7, #4]
   27c3e:	2200      	movs	r2, #0
   27c40:	711a      	strb	r2, [r3, #4]

	config->output_frequency    = 48000000;
   27c42:	687b      	ldr	r3, [r7, #4]
   27c44:	4a0a      	ldr	r2, [pc, #40]	; (27c70 <system_clock_source_dpll_get_config_defaults+0x54>)
   27c46:	609a      	str	r2, [r3, #8]
	config->reference_frequency = 32768;
   27c48:	687b      	ldr	r3, [r7, #4]
   27c4a:	2280      	movs	r2, #128	; 0x80
   27c4c:	0212      	lsls	r2, r2, #8
   27c4e:	60da      	str	r2, [r3, #12]
	config->reference_divider   = 1;
   27c50:	687b      	ldr	r3, [r7, #4]
   27c52:	2201      	movs	r2, #1
   27c54:	821a      	strh	r2, [r3, #16]
	config->reference_clock     = SYSTEM_CLOCK_SOURCE_DPLL_REFERENCE_CLOCK_XOSC32K;
   27c56:	687b      	ldr	r3, [r7, #4]
   27c58:	2200      	movs	r2, #0
   27c5a:	751a      	strb	r2, [r3, #20]

	config->lock_time           = SYSTEM_CLOCK_SOURCE_DPLL_LOCK_TIME_DEFAULT;
   27c5c:	687b      	ldr	r3, [r7, #4]
   27c5e:	2200      	movs	r2, #0
   27c60:	74da      	strb	r2, [r3, #19]
	config->filter              = SYSTEM_CLOCK_SOURCE_DPLL_FILTER_DEFAULT;
   27c62:	687b      	ldr	r3, [r7, #4]
   27c64:	2200      	movs	r2, #0
   27c66:	749a      	strb	r2, [r3, #18]
};
   27c68:	46c0      	nop			; (mov r8, r8)
   27c6a:	46bd      	mov	sp, r7
   27c6c:	b002      	add	sp, #8
   27c6e:	bd80      	pop	{r7, pc}
   27c70:	02dc6c00 	.word	0x02dc6c00

00027c74 <system_flash_set_waitstates>:
 * can be found in the electrical characteristics of the device.
 *
 * \param[in] wait_states Number of wait states to use for internal flash
 */
static inline void system_flash_set_waitstates(uint8_t wait_states)
{
   27c74:	b580      	push	{r7, lr}
   27c76:	b082      	sub	sp, #8
   27c78:	af00      	add	r7, sp, #0
   27c7a:	0002      	movs	r2, r0
   27c7c:	1dfb      	adds	r3, r7, #7
   27c7e:	701a      	strb	r2, [r3, #0]
	Assert(NVMCTRL_CTRLB_RWS((uint32_t)wait_states) ==
			((uint32_t)wait_states << NVMCTRL_CTRLB_RWS_Pos));

	NVMCTRL->CTRLB.bit.RWS = wait_states;
   27c80:	4a08      	ldr	r2, [pc, #32]	; (27ca4 <system_flash_set_waitstates+0x30>)
   27c82:	1dfb      	adds	r3, r7, #7
   27c84:	781b      	ldrb	r3, [r3, #0]
   27c86:	210f      	movs	r1, #15
   27c88:	400b      	ands	r3, r1
   27c8a:	b2d9      	uxtb	r1, r3
   27c8c:	6853      	ldr	r3, [r2, #4]
   27c8e:	200f      	movs	r0, #15
   27c90:	4001      	ands	r1, r0
   27c92:	0049      	lsls	r1, r1, #1
   27c94:	201e      	movs	r0, #30
   27c96:	4383      	bics	r3, r0
   27c98:	430b      	orrs	r3, r1
   27c9a:	6053      	str	r3, [r2, #4]
}
   27c9c:	46c0      	nop			; (mov r8, r8)
   27c9e:	46bd      	mov	sp, r7
   27ca0:	b002      	add	sp, #8
   27ca2:	bd80      	pop	{r7, pc}
   27ca4:	41004000 	.word	0x41004000

00027ca8 <_system_dfll_wait_for_sync>:
/**
 * \internal
 * \brief Wait for sync to the DFLL control registers.
 */
static inline void _system_dfll_wait_for_sync(void)
{
   27ca8:	b580      	push	{r7, lr}
   27caa:	af00      	add	r7, sp, #0
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
   27cac:	46c0      	nop			; (mov r8, r8)
   27cae:	4b04      	ldr	r3, [pc, #16]	; (27cc0 <_system_dfll_wait_for_sync+0x18>)
   27cb0:	68db      	ldr	r3, [r3, #12]
   27cb2:	2210      	movs	r2, #16
   27cb4:	4013      	ands	r3, r2
   27cb6:	d0fa      	beq.n	27cae <_system_dfll_wait_for_sync+0x6>
		/* Wait for DFLL sync */
	}
}
   27cb8:	46c0      	nop			; (mov r8, r8)
   27cba:	46bd      	mov	sp, r7
   27cbc:	bd80      	pop	{r7, pc}
   27cbe:	46c0      	nop			; (mov r8, r8)
   27cc0:	40000800 	.word	0x40000800

00027cc4 <_system_clock_source_dfll_set_config_errata_9905>:
		/* Wait for OSC32K sync */
	}
}

static inline void _system_clock_source_dfll_set_config_errata_9905(void)
{
   27cc4:	b580      	push	{r7, lr}
   27cc6:	af00      	add	r7, sp, #0

	/* Disable ONDEMAND mode while writing configurations */
	SYSCTRL->DFLLCTRL.reg = SYSCTRL_DFLLCTRL_ENABLE;
   27cc8:	4b0c      	ldr	r3, [pc, #48]	; (27cfc <_system_clock_source_dfll_set_config_errata_9905+0x38>)
   27cca:	2202      	movs	r2, #2
   27ccc:	849a      	strh	r2, [r3, #36]	; 0x24
	_system_dfll_wait_for_sync();
   27cce:	4b0c      	ldr	r3, [pc, #48]	; (27d00 <_system_clock_source_dfll_set_config_errata_9905+0x3c>)
   27cd0:	4798      	blx	r3

	SYSCTRL->DFLLMUL.reg = _system_clock_inst.dfll.mul;
   27cd2:	4a0a      	ldr	r2, [pc, #40]	; (27cfc <_system_clock_source_dfll_set_config_errata_9905+0x38>)
   27cd4:	4b0b      	ldr	r3, [pc, #44]	; (27d04 <_system_clock_source_dfll_set_config_errata_9905+0x40>)
   27cd6:	689b      	ldr	r3, [r3, #8]
   27cd8:	62d3      	str	r3, [r2, #44]	; 0x2c
	SYSCTRL->DFLLVAL.reg = _system_clock_inst.dfll.val;
   27cda:	4a08      	ldr	r2, [pc, #32]	; (27cfc <_system_clock_source_dfll_set_config_errata_9905+0x38>)
   27cdc:	4b09      	ldr	r3, [pc, #36]	; (27d04 <_system_clock_source_dfll_set_config_errata_9905+0x40>)
   27cde:	685b      	ldr	r3, [r3, #4]
   27ce0:	6293      	str	r3, [r2, #40]	; 0x28

	/* Write full configuration to DFLL control register */
	SYSCTRL->DFLLCTRL.reg = 0;
   27ce2:	4b06      	ldr	r3, [pc, #24]	; (27cfc <_system_clock_source_dfll_set_config_errata_9905+0x38>)
   27ce4:	2200      	movs	r2, #0
   27ce6:	849a      	strh	r2, [r3, #36]	; 0x24
	_system_dfll_wait_for_sync();
   27ce8:	4b05      	ldr	r3, [pc, #20]	; (27d00 <_system_clock_source_dfll_set_config_errata_9905+0x3c>)
   27cea:	4798      	blx	r3
	SYSCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control;
   27cec:	4a03      	ldr	r2, [pc, #12]	; (27cfc <_system_clock_source_dfll_set_config_errata_9905+0x38>)
   27cee:	4b05      	ldr	r3, [pc, #20]	; (27d04 <_system_clock_source_dfll_set_config_errata_9905+0x40>)
   27cf0:	681b      	ldr	r3, [r3, #0]
   27cf2:	b29b      	uxth	r3, r3
   27cf4:	8493      	strh	r3, [r2, #36]	; 0x24
}
   27cf6:	46c0      	nop			; (mov r8, r8)
   27cf8:	46bd      	mov	sp, r7
   27cfa:	bd80      	pop	{r7, pc}
   27cfc:	40000800 	.word	0x40000800
   27d00:	00027ca9 	.word	0x00027ca9
   27d04:	20003d78 	.word	0x20003d78

00027d08 <system_clock_source_get_hz>:
 *
 * \returns Frequency of the given clock source, in Hz.
 */
uint32_t system_clock_source_get_hz(
		const enum system_clock_source clock_source)
{
   27d08:	b580      	push	{r7, lr}
   27d0a:	b082      	sub	sp, #8
   27d0c:	af00      	add	r7, sp, #0
   27d0e:	0002      	movs	r2, r0
   27d10:	1dfb      	adds	r3, r7, #7
   27d12:	701a      	strb	r2, [r3, #0]
	switch (clock_source) {
   27d14:	1dfb      	adds	r3, r7, #7
   27d16:	781b      	ldrb	r3, [r3, #0]
   27d18:	2b08      	cmp	r3, #8
   27d1a:	d841      	bhi.n	27da0 <system_clock_source_get_hz+0x98>
   27d1c:	009a      	lsls	r2, r3, #2
   27d1e:	4b23      	ldr	r3, [pc, #140]	; (27dac <system_clock_source_get_hz+0xa4>)
   27d20:	18d3      	adds	r3, r2, r3
   27d22:	681b      	ldr	r3, [r3, #0]
   27d24:	469f      	mov	pc, r3
	case SYSTEM_CLOCK_SOURCE_XOSC:
		return _system_clock_inst.xosc.frequency;
   27d26:	4b22      	ldr	r3, [pc, #136]	; (27db0 <system_clock_source_get_hz+0xa8>)
   27d28:	691b      	ldr	r3, [r3, #16]
   27d2a:	e03a      	b.n	27da2 <system_clock_source_get_hz+0x9a>

	case SYSTEM_CLOCK_SOURCE_OSC8M:
		return 8000000UL >> SYSCTRL->OSC8M.bit.PRESC;
   27d2c:	4b21      	ldr	r3, [pc, #132]	; (27db4 <system_clock_source_get_hz+0xac>)
   27d2e:	6a1b      	ldr	r3, [r3, #32]
   27d30:	059b      	lsls	r3, r3, #22
   27d32:	0f9b      	lsrs	r3, r3, #30
   27d34:	b2db      	uxtb	r3, r3
   27d36:	001a      	movs	r2, r3
   27d38:	4b1f      	ldr	r3, [pc, #124]	; (27db8 <system_clock_source_get_hz+0xb0>)
   27d3a:	40d3      	lsrs	r3, r2
   27d3c:	e031      	b.n	27da2 <system_clock_source_get_hz+0x9a>

	case SYSTEM_CLOCK_SOURCE_OSC32K:
		return 32768UL;
   27d3e:	2380      	movs	r3, #128	; 0x80
   27d40:	021b      	lsls	r3, r3, #8
   27d42:	e02e      	b.n	27da2 <system_clock_source_get_hz+0x9a>

	case SYSTEM_CLOCK_SOURCE_ULP32K:
		return 32768UL;
   27d44:	2380      	movs	r3, #128	; 0x80
   27d46:	021b      	lsls	r3, r3, #8
   27d48:	e02b      	b.n	27da2 <system_clock_source_get_hz+0x9a>

	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		return _system_clock_inst.xosc32k.frequency;
   27d4a:	4b19      	ldr	r3, [pc, #100]	; (27db0 <system_clock_source_get_hz+0xa8>)
   27d4c:	695b      	ldr	r3, [r3, #20]
   27d4e:	e028      	b.n	27da2 <system_clock_source_get_hz+0x9a>

	case SYSTEM_CLOCK_SOURCE_DFLL:

		/* Check if the DFLL has been configured */
		if (!(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_ENABLE))
   27d50:	4b17      	ldr	r3, [pc, #92]	; (27db0 <system_clock_source_get_hz+0xa8>)
   27d52:	681b      	ldr	r3, [r3, #0]
   27d54:	2202      	movs	r2, #2
   27d56:	4013      	ands	r3, r2
   27d58:	d101      	bne.n	27d5e <system_clock_source_get_hz+0x56>
			return 0;
   27d5a:	2300      	movs	r3, #0
   27d5c:	e021      	b.n	27da2 <system_clock_source_get_hz+0x9a>

		/* Make sure that the DFLL module is ready */
		_system_dfll_wait_for_sync();
   27d5e:	4b17      	ldr	r3, [pc, #92]	; (27dbc <system_clock_source_get_hz+0xb4>)
   27d60:	4798      	blx	r3

		/* Check if operating in closed loop (USB) mode */
		switch(_system_clock_inst.dfll.control &
   27d62:	4b13      	ldr	r3, [pc, #76]	; (27db0 <system_clock_source_get_hz+0xa8>)
   27d64:	681b      	ldr	r3, [r3, #0]
   27d66:	2224      	movs	r2, #36	; 0x24
   27d68:	4013      	ands	r3, r2
   27d6a:	2b04      	cmp	r3, #4
   27d6c:	d109      	bne.n	27d82 <system_clock_source_get_hz+0x7a>
				(SYSCTRL_DFLLCTRL_MODE | SYSCTRL_DFLLCTRL_USBCRM)) {
		case SYSCTRL_DFLLCTRL_MODE:
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
   27d6e:	2000      	movs	r0, #0
   27d70:	4b13      	ldr	r3, [pc, #76]	; (27dc0 <system_clock_source_get_hz+0xb8>)
   27d72:	4798      	blx	r3
   27d74:	0002      	movs	r2, r0
					(_system_clock_inst.dfll.mul & 0xffff);
   27d76:	4b0e      	ldr	r3, [pc, #56]	; (27db0 <system_clock_source_get_hz+0xa8>)
   27d78:	689b      	ldr	r3, [r3, #8]
   27d7a:	041b      	lsls	r3, r3, #16
   27d7c:	0c1b      	lsrs	r3, r3, #16
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
   27d7e:	4353      	muls	r3, r2
   27d80:	e00f      	b.n	27da2 <system_clock_source_get_hz+0x9a>
		default:
			return 48000000UL;
   27d82:	4b10      	ldr	r3, [pc, #64]	; (27dc4 <system_clock_source_get_hz+0xbc>)
   27d84:	e00d      	b.n	27da2 <system_clock_source_get_hz+0x9a>
		}

#ifdef FEATURE_SYSTEM_CLOCK_DPLL
	case SYSTEM_CLOCK_SOURCE_DPLL:
		if (!(SYSCTRL->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_ENABLE)) {
   27d86:	4a0b      	ldr	r2, [pc, #44]	; (27db4 <system_clock_source_get_hz+0xac>)
   27d88:	2350      	movs	r3, #80	; 0x50
   27d8a:	5cd3      	ldrb	r3, [r2, r3]
   27d8c:	b2db      	uxtb	r3, r3
   27d8e:	001a      	movs	r2, r3
   27d90:	2304      	movs	r3, #4
   27d92:	4013      	ands	r3, r2
   27d94:	d101      	bne.n	27d9a <system_clock_source_get_hz+0x92>
			return 0;
   27d96:	2300      	movs	r3, #0
   27d98:	e003      	b.n	27da2 <system_clock_source_get_hz+0x9a>
		}

		return _system_clock_inst.dpll.frequency;
   27d9a:	4b05      	ldr	r3, [pc, #20]	; (27db0 <system_clock_source_get_hz+0xa8>)
   27d9c:	68db      	ldr	r3, [r3, #12]
   27d9e:	e000      	b.n	27da2 <system_clock_source_get_hz+0x9a>
#endif

	default:
		return 0;
   27da0:	2300      	movs	r3, #0
	}
}
   27da2:	0018      	movs	r0, r3
   27da4:	46bd      	mov	sp, r7
   27da6:	b002      	add	sp, #8
   27da8:	bd80      	pop	{r7, pc}
   27daa:	46c0      	nop			; (mov r8, r8)
   27dac:	00037948 	.word	0x00037948
   27db0:	20003d78 	.word	0x20003d78
   27db4:	40000800 	.word	0x40000800
   27db8:	007a1200 	.word	0x007a1200
   27dbc:	00027ca9 	.word	0x00027ca9
   27dc0:	000287a5 	.word	0x000287a5
   27dc4:	02dc6c00 	.word	0x02dc6c00

00027dc8 <system_clock_source_osc8m_set_config>:
 *
 * \param[in] config  OSC8M configuration structure containing the new config
 */
void system_clock_source_osc8m_set_config(
		struct system_clock_source_osc8m_config *const config)
{
   27dc8:	b580      	push	{r7, lr}
   27dca:	b084      	sub	sp, #16
   27dcc:	af00      	add	r7, sp, #0
   27dce:	6078      	str	r0, [r7, #4]
	SYSCTRL_OSC8M_Type temp = SYSCTRL->OSC8M;
   27dd0:	4b1a      	ldr	r3, [pc, #104]	; (27e3c <system_clock_source_osc8m_set_config+0x74>)
   27dd2:	6a1b      	ldr	r3, [r3, #32]
   27dd4:	60fb      	str	r3, [r7, #12]

	/* Use temporary struct to reduce register access */
	temp.bit.PRESC    = config->prescaler;
   27dd6:	687b      	ldr	r3, [r7, #4]
   27dd8:	781b      	ldrb	r3, [r3, #0]
   27dda:	1c1a      	adds	r2, r3, #0
   27ddc:	2303      	movs	r3, #3
   27dde:	4013      	ands	r3, r2
   27de0:	b2da      	uxtb	r2, r3
   27de2:	230d      	movs	r3, #13
   27de4:	18fb      	adds	r3, r7, r3
   27de6:	2103      	movs	r1, #3
   27de8:	400a      	ands	r2, r1
   27dea:	0010      	movs	r0, r2
   27dec:	781a      	ldrb	r2, [r3, #0]
   27dee:	2103      	movs	r1, #3
   27df0:	438a      	bics	r2, r1
   27df2:	1c11      	adds	r1, r2, #0
   27df4:	1c02      	adds	r2, r0, #0
   27df6:	430a      	orrs	r2, r1
   27df8:	701a      	strb	r2, [r3, #0]
	temp.bit.ONDEMAND = config->on_demand;
   27dfa:	687b      	ldr	r3, [r7, #4]
   27dfc:	789a      	ldrb	r2, [r3, #2]
   27dfe:	230c      	movs	r3, #12
   27e00:	18fb      	adds	r3, r7, r3
   27e02:	01d0      	lsls	r0, r2, #7
   27e04:	781a      	ldrb	r2, [r3, #0]
   27e06:	217f      	movs	r1, #127	; 0x7f
   27e08:	400a      	ands	r2, r1
   27e0a:	1c11      	adds	r1, r2, #0
   27e0c:	1c02      	adds	r2, r0, #0
   27e0e:	430a      	orrs	r2, r1
   27e10:	701a      	strb	r2, [r3, #0]
	temp.bit.RUNSTDBY = config->run_in_standby;
   27e12:	687b      	ldr	r3, [r7, #4]
   27e14:	785a      	ldrb	r2, [r3, #1]
   27e16:	230c      	movs	r3, #12
   27e18:	18fb      	adds	r3, r7, r3
   27e1a:	2101      	movs	r1, #1
   27e1c:	400a      	ands	r2, r1
   27e1e:	0190      	lsls	r0, r2, #6
   27e20:	781a      	ldrb	r2, [r3, #0]
   27e22:	2140      	movs	r1, #64	; 0x40
   27e24:	438a      	bics	r2, r1
   27e26:	1c11      	adds	r1, r2, #0
   27e28:	1c02      	adds	r2, r0, #0
   27e2a:	430a      	orrs	r2, r1
   27e2c:	701a      	strb	r2, [r3, #0]

	SYSCTRL->OSC8M = temp;
   27e2e:	4b03      	ldr	r3, [pc, #12]	; (27e3c <system_clock_source_osc8m_set_config+0x74>)
   27e30:	68fa      	ldr	r2, [r7, #12]
   27e32:	621a      	str	r2, [r3, #32]
}
   27e34:	46c0      	nop			; (mov r8, r8)
   27e36:	46bd      	mov	sp, r7
   27e38:	b004      	add	sp, #16
   27e3a:	bd80      	pop	{r7, pc}
   27e3c:	40000800 	.word	0x40000800

00027e40 <system_clock_source_dpll_set_config>:
 *
 * \param[in] config  DPLL configuration structure containing the new config
 */
void system_clock_source_dpll_set_config(
		struct system_clock_source_dpll_config *const config)
{
   27e40:	b580      	push	{r7, lr}
   27e42:	b086      	sub	sp, #24
   27e44:	af00      	add	r7, sp, #0
   27e46:	6078      	str	r0, [r7, #4]

	uint32_t tmpldr;
	uint8_t  tmpldrfrac;
	uint32_t refclk;

	refclk = config->reference_frequency;
   27e48:	687b      	ldr	r3, [r7, #4]
   27e4a:	68db      	ldr	r3, [r3, #12]
   27e4c:	617b      	str	r3, [r7, #20]

	/* Only reference clock REF1 can be divided */
	if (config->reference_clock == SYSTEM_CLOCK_SOURCE_DPLL_REFERENCE_CLOCK_XOSC) {
   27e4e:	687b      	ldr	r3, [r7, #4]
   27e50:	7d1b      	ldrb	r3, [r3, #20]
   27e52:	2b01      	cmp	r3, #1
   27e54:	d10a      	bne.n	27e6c <system_clock_source_dpll_set_config+0x2c>
		refclk = refclk / (2 * (config->reference_divider + 1));
   27e56:	687b      	ldr	r3, [r7, #4]
   27e58:	8a1b      	ldrh	r3, [r3, #16]
   27e5a:	3301      	adds	r3, #1
   27e5c:	005b      	lsls	r3, r3, #1
   27e5e:	001a      	movs	r2, r3
   27e60:	4b36      	ldr	r3, [pc, #216]	; (27f3c <system_clock_source_dpll_set_config+0xfc>)
   27e62:	0011      	movs	r1, r2
   27e64:	6978      	ldr	r0, [r7, #20]
   27e66:	4798      	blx	r3
   27e68:	0003      	movs	r3, r0
   27e6a:	617b      	str	r3, [r7, #20]
	}

	/* Calculate LDRFRAC and LDR */
	tmpldr = (config->output_frequency << 4) / refclk;
   27e6c:	687b      	ldr	r3, [r7, #4]
   27e6e:	689b      	ldr	r3, [r3, #8]
   27e70:	011a      	lsls	r2, r3, #4
   27e72:	4b32      	ldr	r3, [pc, #200]	; (27f3c <system_clock_source_dpll_set_config+0xfc>)
   27e74:	6979      	ldr	r1, [r7, #20]
   27e76:	0010      	movs	r0, r2
   27e78:	4798      	blx	r3
   27e7a:	0003      	movs	r3, r0
   27e7c:	613b      	str	r3, [r7, #16]
	tmpldrfrac = tmpldr & 0x0f;
   27e7e:	693b      	ldr	r3, [r7, #16]
   27e80:	b2da      	uxtb	r2, r3
   27e82:	230f      	movs	r3, #15
   27e84:	18fb      	adds	r3, r7, r3
   27e86:	210f      	movs	r1, #15
   27e88:	400a      	ands	r2, r1
   27e8a:	701a      	strb	r2, [r3, #0]
	tmpldr = (tmpldr >> 4) - 1;
   27e8c:	693b      	ldr	r3, [r7, #16]
   27e8e:	091b      	lsrs	r3, r3, #4
   27e90:	3b01      	subs	r3, #1
   27e92:	613b      	str	r3, [r7, #16]

	SYSCTRL->DPLLCTRLA.reg =
   27e94:	492a      	ldr	r1, [pc, #168]	; (27f40 <system_clock_source_dpll_set_config+0x100>)
			((uint32_t)config->on_demand << SYSCTRL_DPLLCTRLA_ONDEMAND_Pos) |
   27e96:	687b      	ldr	r3, [r7, #4]
   27e98:	781b      	ldrb	r3, [r3, #0]
   27e9a:	01db      	lsls	r3, r3, #7
   27e9c:	b2da      	uxtb	r2, r3
			((uint32_t)config->run_in_standby << SYSCTRL_DPLLCTRLA_RUNSTDBY_Pos);
   27e9e:	687b      	ldr	r3, [r7, #4]
   27ea0:	785b      	ldrb	r3, [r3, #1]
   27ea2:	019b      	lsls	r3, r3, #6
   27ea4:	b2db      	uxtb	r3, r3
			((uint32_t)config->on_demand << SYSCTRL_DPLLCTRLA_ONDEMAND_Pos) |
   27ea6:	4313      	orrs	r3, r2
   27ea8:	b2da      	uxtb	r2, r3
	SYSCTRL->DPLLCTRLA.reg =
   27eaa:	2344      	movs	r3, #68	; 0x44
   27eac:	54ca      	strb	r2, [r1, r3]

	SYSCTRL->DPLLRATIO.reg =
   27eae:	4b24      	ldr	r3, [pc, #144]	; (27f40 <system_clock_source_dpll_set_config+0x100>)
			SYSCTRL_DPLLRATIO_LDRFRAC(tmpldrfrac) |
   27eb0:	220f      	movs	r2, #15
   27eb2:	18ba      	adds	r2, r7, r2
   27eb4:	7812      	ldrb	r2, [r2, #0]
   27eb6:	0412      	lsls	r2, r2, #16
   27eb8:	0011      	movs	r1, r2
   27eba:	22f0      	movs	r2, #240	; 0xf0
   27ebc:	0312      	lsls	r2, r2, #12
   27ebe:	4011      	ands	r1, r2
			SYSCTRL_DPLLRATIO_LDR(tmpldr);
   27ec0:	693a      	ldr	r2, [r7, #16]
   27ec2:	0512      	lsls	r2, r2, #20
   27ec4:	0d12      	lsrs	r2, r2, #20
			SYSCTRL_DPLLRATIO_LDRFRAC(tmpldrfrac) |
   27ec6:	430a      	orrs	r2, r1
	SYSCTRL->DPLLRATIO.reg =
   27ec8:	649a      	str	r2, [r3, #72]	; 0x48

	SYSCTRL->DPLLCTRLB.reg =
   27eca:	4b1d      	ldr	r3, [pc, #116]	; (27f40 <system_clock_source_dpll_set_config+0x100>)
			SYSCTRL_DPLLCTRLB_DIV(config->reference_divider) |
   27ecc:	687a      	ldr	r2, [r7, #4]
   27ece:	8a12      	ldrh	r2, [r2, #16]
   27ed0:	0412      	lsls	r2, r2, #16
   27ed2:	0011      	movs	r1, r2
   27ed4:	4a1b      	ldr	r2, [pc, #108]	; (27f44 <system_clock_source_dpll_set_config+0x104>)
   27ed6:	4011      	ands	r1, r2
			((uint32_t)config->lock_bypass << SYSCTRL_DPLLCTRLB_LBYPASS_Pos) |
   27ed8:	687a      	ldr	r2, [r7, #4]
   27eda:	7892      	ldrb	r2, [r2, #2]
   27edc:	0312      	lsls	r2, r2, #12
			SYSCTRL_DPLLCTRLB_DIV(config->reference_divider) |
   27ede:	4311      	orrs	r1, r2
			SYSCTRL_DPLLCTRLB_LTIME(config->lock_time) |
   27ee0:	687a      	ldr	r2, [r7, #4]
   27ee2:	7cd2      	ldrb	r2, [r2, #19]
   27ee4:	0212      	lsls	r2, r2, #8
   27ee6:	0010      	movs	r0, r2
   27ee8:	22e0      	movs	r2, #224	; 0xe0
   27eea:	00d2      	lsls	r2, r2, #3
   27eec:	4002      	ands	r2, r0
			((uint32_t)config->lock_bypass << SYSCTRL_DPLLCTRLB_LBYPASS_Pos) |
   27eee:	4311      	orrs	r1, r2
			SYSCTRL_DPLLCTRLB_REFCLK(config->reference_clock) |
   27ef0:	687a      	ldr	r2, [r7, #4]
   27ef2:	7d12      	ldrb	r2, [r2, #20]
   27ef4:	0112      	lsls	r2, r2, #4
   27ef6:	0010      	movs	r0, r2
   27ef8:	2230      	movs	r2, #48	; 0x30
   27efa:	4002      	ands	r2, r0
			SYSCTRL_DPLLCTRLB_LTIME(config->lock_time) |
   27efc:	4311      	orrs	r1, r2
			((uint32_t)config->wake_up_fast << SYSCTRL_DPLLCTRLB_WUF_Pos) |
   27efe:	687a      	ldr	r2, [r7, #4]
   27f00:	78d2      	ldrb	r2, [r2, #3]
   27f02:	00d2      	lsls	r2, r2, #3
			SYSCTRL_DPLLCTRLB_REFCLK(config->reference_clock) |
   27f04:	4311      	orrs	r1, r2
			((uint32_t)config->low_power_enable << SYSCTRL_DPLLCTRLB_LPEN_Pos) |
   27f06:	687a      	ldr	r2, [r7, #4]
   27f08:	7912      	ldrb	r2, [r2, #4]
   27f0a:	0092      	lsls	r2, r2, #2
			((uint32_t)config->wake_up_fast << SYSCTRL_DPLLCTRLB_WUF_Pos) |
   27f0c:	4311      	orrs	r1, r2
			SYSCTRL_DPLLCTRLB_FILTER(config->filter);
   27f0e:	687a      	ldr	r2, [r7, #4]
   27f10:	7c92      	ldrb	r2, [r2, #18]
   27f12:	0010      	movs	r0, r2
   27f14:	2203      	movs	r2, #3
   27f16:	4002      	ands	r2, r0
			((uint32_t)config->low_power_enable << SYSCTRL_DPLLCTRLB_LPEN_Pos) |
   27f18:	430a      	orrs	r2, r1
	SYSCTRL->DPLLCTRLB.reg =
   27f1a:	64da      	str	r2, [r3, #76]	; 0x4c

	/*
	 * Fck = Fckrx * (LDR + 1 + LDRFRAC / 16)
	 */
	_system_clock_inst.dpll.frequency =
			(refclk * (((tmpldr + 1) << 4) + tmpldrfrac)) >> 4;
   27f1c:	693b      	ldr	r3, [r7, #16]
   27f1e:	3301      	adds	r3, #1
   27f20:	011a      	lsls	r2, r3, #4
   27f22:	230f      	movs	r3, #15
   27f24:	18fb      	adds	r3, r7, r3
   27f26:	781b      	ldrb	r3, [r3, #0]
   27f28:	18d3      	adds	r3, r2, r3
   27f2a:	697a      	ldr	r2, [r7, #20]
   27f2c:	4353      	muls	r3, r2
   27f2e:	091a      	lsrs	r2, r3, #4
	_system_clock_inst.dpll.frequency =
   27f30:	4b05      	ldr	r3, [pc, #20]	; (27f48 <system_clock_source_dpll_set_config+0x108>)
   27f32:	60da      	str	r2, [r3, #12]
}
   27f34:	46c0      	nop			; (mov r8, r8)
   27f36:	46bd      	mov	sp, r7
   27f38:	b006      	add	sp, #24
   27f3a:	bd80      	pop	{r7, pc}
   27f3c:	000310ed 	.word	0x000310ed
   27f40:	40000800 	.word	0x40000800
   27f44:	07ff0000 	.word	0x07ff0000
   27f48:	20003d78 	.word	0x20003d78

00027f4c <system_clock_source_enable>:
 * \retval STATUS_ERR_INVALID_ARG  The clock source is not available on this
 *                                 device
 */
enum status_code system_clock_source_enable(
		const enum system_clock_source clock_source)
{
   27f4c:	b580      	push	{r7, lr}
   27f4e:	b082      	sub	sp, #8
   27f50:	af00      	add	r7, sp, #0
   27f52:	0002      	movs	r2, r0
   27f54:	1dfb      	adds	r3, r7, #7
   27f56:	701a      	strb	r2, [r3, #0]
	switch (clock_source) {
   27f58:	1dfb      	adds	r3, r7, #7
   27f5a:	781b      	ldrb	r3, [r3, #0]
   27f5c:	2b08      	cmp	r3, #8
   27f5e:	d83b      	bhi.n	27fd8 <system_clock_source_enable+0x8c>
   27f60:	009a      	lsls	r2, r3, #2
   27f62:	4b21      	ldr	r3, [pc, #132]	; (27fe8 <system_clock_source_enable+0x9c>)
   27f64:	18d3      	adds	r3, r2, r3
   27f66:	681b      	ldr	r3, [r3, #0]
   27f68:	469f      	mov	pc, r3
	case SYSTEM_CLOCK_SOURCE_OSC8M:
		SYSCTRL->OSC8M.reg |= SYSCTRL_OSC8M_ENABLE;
   27f6a:	4b20      	ldr	r3, [pc, #128]	; (27fec <system_clock_source_enable+0xa0>)
   27f6c:	4a1f      	ldr	r2, [pc, #124]	; (27fec <system_clock_source_enable+0xa0>)
   27f6e:	6a12      	ldr	r2, [r2, #32]
   27f70:	2102      	movs	r1, #2
   27f72:	430a      	orrs	r2, r1
   27f74:	621a      	str	r2, [r3, #32]
		return STATUS_OK;
   27f76:	2300      	movs	r3, #0
   27f78:	e031      	b.n	27fde <system_clock_source_enable+0x92>

	case SYSTEM_CLOCK_SOURCE_OSC32K:
		SYSCTRL->OSC32K.reg |= SYSCTRL_OSC32K_ENABLE;
   27f7a:	4b1c      	ldr	r3, [pc, #112]	; (27fec <system_clock_source_enable+0xa0>)
   27f7c:	4a1b      	ldr	r2, [pc, #108]	; (27fec <system_clock_source_enable+0xa0>)
   27f7e:	6992      	ldr	r2, [r2, #24]
   27f80:	2102      	movs	r1, #2
   27f82:	430a      	orrs	r2, r1
   27f84:	619a      	str	r2, [r3, #24]
		break;
   27f86:	e029      	b.n	27fdc <system_clock_source_enable+0x90>

	case SYSTEM_CLOCK_SOURCE_XOSC:
		SYSCTRL->XOSC.reg |= SYSCTRL_XOSC_ENABLE;
   27f88:	4a18      	ldr	r2, [pc, #96]	; (27fec <system_clock_source_enable+0xa0>)
   27f8a:	4b18      	ldr	r3, [pc, #96]	; (27fec <system_clock_source_enable+0xa0>)
   27f8c:	8a1b      	ldrh	r3, [r3, #16]
   27f8e:	b29b      	uxth	r3, r3
   27f90:	2102      	movs	r1, #2
   27f92:	430b      	orrs	r3, r1
   27f94:	b29b      	uxth	r3, r3
   27f96:	8213      	strh	r3, [r2, #16]
		break;
   27f98:	e020      	b.n	27fdc <system_clock_source_enable+0x90>

	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		SYSCTRL->XOSC32K.reg |= SYSCTRL_XOSC32K_ENABLE;
   27f9a:	4a14      	ldr	r2, [pc, #80]	; (27fec <system_clock_source_enable+0xa0>)
   27f9c:	4b13      	ldr	r3, [pc, #76]	; (27fec <system_clock_source_enable+0xa0>)
   27f9e:	8a9b      	ldrh	r3, [r3, #20]
   27fa0:	b29b      	uxth	r3, r3
   27fa2:	2102      	movs	r1, #2
   27fa4:	430b      	orrs	r3, r1
   27fa6:	b29b      	uxth	r3, r3
   27fa8:	8293      	strh	r3, [r2, #20]
		break;
   27faa:	e017      	b.n	27fdc <system_clock_source_enable+0x90>

	case SYSTEM_CLOCK_SOURCE_DFLL:
		_system_clock_inst.dfll.control |= SYSCTRL_DFLLCTRL_ENABLE;
   27fac:	4b10      	ldr	r3, [pc, #64]	; (27ff0 <system_clock_source_enable+0xa4>)
   27fae:	681b      	ldr	r3, [r3, #0]
   27fb0:	2202      	movs	r2, #2
   27fb2:	431a      	orrs	r2, r3
   27fb4:	4b0e      	ldr	r3, [pc, #56]	; (27ff0 <system_clock_source_enable+0xa4>)
   27fb6:	601a      	str	r2, [r3, #0]
		_system_clock_source_dfll_set_config_errata_9905();
   27fb8:	4b0e      	ldr	r3, [pc, #56]	; (27ff4 <system_clock_source_enable+0xa8>)
   27fba:	4798      	blx	r3
		break;
   27fbc:	e00e      	b.n	27fdc <system_clock_source_enable+0x90>

#ifdef FEATURE_SYSTEM_CLOCK_DPLL
	case SYSTEM_CLOCK_SOURCE_DPLL:
		SYSCTRL->DPLLCTRLA.reg |= SYSCTRL_DPLLCTRLA_ENABLE;
   27fbe:	4a0b      	ldr	r2, [pc, #44]	; (27fec <system_clock_source_enable+0xa0>)
   27fc0:	490a      	ldr	r1, [pc, #40]	; (27fec <system_clock_source_enable+0xa0>)
   27fc2:	2344      	movs	r3, #68	; 0x44
   27fc4:	5ccb      	ldrb	r3, [r1, r3]
   27fc6:	b2db      	uxtb	r3, r3
   27fc8:	2102      	movs	r1, #2
   27fca:	430b      	orrs	r3, r1
   27fcc:	b2d9      	uxtb	r1, r3
   27fce:	2344      	movs	r3, #68	; 0x44
   27fd0:	54d1      	strb	r1, [r2, r3]
		break;
   27fd2:	e003      	b.n	27fdc <system_clock_source_enable+0x90>
#endif

	case SYSTEM_CLOCK_SOURCE_ULP32K:
		/* Always enabled */
		return STATUS_OK;
   27fd4:	2300      	movs	r3, #0
   27fd6:	e002      	b.n	27fde <system_clock_source_enable+0x92>

	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
   27fd8:	2317      	movs	r3, #23
   27fda:	e000      	b.n	27fde <system_clock_source_enable+0x92>
	}

	return STATUS_OK;
   27fdc:	2300      	movs	r3, #0
}
   27fde:	0018      	movs	r0, r3
   27fe0:	46bd      	mov	sp, r7
   27fe2:	b002      	add	sp, #8
   27fe4:	bd80      	pop	{r7, pc}
   27fe6:	46c0      	nop			; (mov r8, r8)
   27fe8:	0003796c 	.word	0x0003796c
   27fec:	40000800 	.word	0x40000800
   27ff0:	20003d78 	.word	0x20003d78
   27ff4:	00027cc5 	.word	0x00027cc5

00027ff8 <system_clock_source_is_ready>:
 * \retval true   Clock source is enabled and ready
 * \retval false  Clock source is disabled or not yet ready
 */
bool system_clock_source_is_ready(
		const enum system_clock_source clock_source)
{
   27ff8:	b580      	push	{r7, lr}
   27ffa:	b084      	sub	sp, #16
   27ffc:	af00      	add	r7, sp, #0
   27ffe:	0002      	movs	r2, r0
   28000:	1dfb      	adds	r3, r7, #7
   28002:	701a      	strb	r2, [r3, #0]
	uint32_t mask = 0;
   28004:	2300      	movs	r3, #0
   28006:	60fb      	str	r3, [r7, #12]

	switch (clock_source) {
   28008:	1dfb      	adds	r3, r7, #7
   2800a:	781b      	ldrb	r3, [r3, #0]
   2800c:	2b08      	cmp	r3, #8
   2800e:	d821      	bhi.n	28054 <system_clock_source_is_ready+0x5c>
   28010:	009a      	lsls	r2, r3, #2
   28012:	4b18      	ldr	r3, [pc, #96]	; (28074 <system_clock_source_is_ready+0x7c>)
   28014:	18d3      	adds	r3, r2, r3
   28016:	681b      	ldr	r3, [r3, #0]
   28018:	469f      	mov	pc, r3
	case SYSTEM_CLOCK_SOURCE_OSC8M:
		mask = SYSCTRL_PCLKSR_OSC8MRDY;
   2801a:	2308      	movs	r3, #8
   2801c:	60fb      	str	r3, [r7, #12]
		break;
   2801e:	e01b      	b.n	28058 <system_clock_source_is_ready+0x60>

	case SYSTEM_CLOCK_SOURCE_OSC32K:
		mask = SYSCTRL_PCLKSR_OSC32KRDY;
   28020:	2304      	movs	r3, #4
   28022:	60fb      	str	r3, [r7, #12]
		break;
   28024:	e018      	b.n	28058 <system_clock_source_is_ready+0x60>

	case SYSTEM_CLOCK_SOURCE_XOSC:
		mask = SYSCTRL_PCLKSR_XOSCRDY;
   28026:	2301      	movs	r3, #1
   28028:	60fb      	str	r3, [r7, #12]
		break;
   2802a:	e015      	b.n	28058 <system_clock_source_is_ready+0x60>

	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		mask = SYSCTRL_PCLKSR_XOSC32KRDY;
   2802c:	2302      	movs	r3, #2
   2802e:	60fb      	str	r3, [r7, #12]
		break;
   28030:	e012      	b.n	28058 <system_clock_source_is_ready+0x60>
	case SYSTEM_CLOCK_SOURCE_DFLL:
		if (CONF_CLOCK_DFLL_LOOP_MODE == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
			mask = (SYSCTRL_PCLKSR_DFLLRDY |
			        SYSCTRL_PCLKSR_DFLLLCKF | SYSCTRL_PCLKSR_DFLLLCKC);
		} else {
			mask = SYSCTRL_PCLKSR_DFLLRDY;
   28032:	2310      	movs	r3, #16
   28034:	60fb      	str	r3, [r7, #12]
		}
		break;
   28036:	e00f      	b.n	28058 <system_clock_source_is_ready+0x60>

#ifdef FEATURE_SYSTEM_CLOCK_DPLL
	case SYSTEM_CLOCK_SOURCE_DPLL:
		return ((SYSCTRL->DPLLSTATUS.reg &
   28038:	4a0f      	ldr	r2, [pc, #60]	; (28078 <system_clock_source_is_ready+0x80>)
   2803a:	2350      	movs	r3, #80	; 0x50
   2803c:	5cd3      	ldrb	r3, [r2, r3]
   2803e:	b2db      	uxtb	r3, r3
   28040:	001a      	movs	r2, r3
   28042:	2303      	movs	r3, #3
   28044:	4013      	ands	r3, r2
				(SYSCTRL_DPLLSTATUS_CLKRDY | SYSCTRL_DPLLSTATUS_LOCK)) ==
   28046:	3b03      	subs	r3, #3
   28048:	425a      	negs	r2, r3
   2804a:	4153      	adcs	r3, r2
   2804c:	b2db      	uxtb	r3, r3
   2804e:	e00c      	b.n	2806a <system_clock_source_is_ready+0x72>
				(SYSCTRL_DPLLSTATUS_CLKRDY | SYSCTRL_DPLLSTATUS_LOCK));
#endif

	case SYSTEM_CLOCK_SOURCE_ULP32K:
		/* Not possible to disable */
		return true;
   28050:	2301      	movs	r3, #1
   28052:	e00a      	b.n	2806a <system_clock_source_is_ready+0x72>

	default:
		return false;
   28054:	2300      	movs	r3, #0
   28056:	e008      	b.n	2806a <system_clock_source_is_ready+0x72>
	}

	return ((SYSCTRL->PCLKSR.reg & mask) == mask);
   28058:	4b07      	ldr	r3, [pc, #28]	; (28078 <system_clock_source_is_ready+0x80>)
   2805a:	68db      	ldr	r3, [r3, #12]
   2805c:	68fa      	ldr	r2, [r7, #12]
   2805e:	401a      	ands	r2, r3
   28060:	68fb      	ldr	r3, [r7, #12]
   28062:	1ad3      	subs	r3, r2, r3
   28064:	425a      	negs	r2, r3
   28066:	4153      	adcs	r3, r2
   28068:	b2db      	uxtb	r3, r3
}
   2806a:	0018      	movs	r0, r3
   2806c:	46bd      	mov	sp, r7
   2806e:	b004      	add	sp, #16
   28070:	bd80      	pop	{r7, pc}
   28072:	46c0      	nop			; (mov r8, r8)
   28074:	00037990 	.word	0x00037990
   28078:	40000800 	.word	0x40000800

0002807c <_switch_peripheral_gclk>:
 *
 * Switch all peripheral clock to a not enabled general clock
 * to save power.
 */
static void _switch_peripheral_gclk(void)
{
   2807c:	b580      	push	{r7, lr}
   2807e:	b082      	sub	sp, #8
   28080:	af00      	add	r7, sp, #0
#if CONF_CLOCK_GCLK_1_ENABLE == false
	gclk_conf.source_generator = GCLK_GENERATOR_1;
#elif CONF_CLOCK_GCLK_2_ENABLE == false
	gclk_conf.source_generator = GCLK_GENERATOR_2;
#elif CONF_CLOCK_GCLK_3_ENABLE == false
	gclk_conf.source_generator = GCLK_GENERATOR_3;
   28082:	003b      	movs	r3, r7
   28084:	2203      	movs	r2, #3
   28086:	701a      	strb	r2, [r3, #0]
	gclk_conf.source_generator = GCLK_GENERATOR_7;
#else
	gclk_conf.source_generator = GCLK_GENERATOR_7;
#endif

	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
   28088:	2300      	movs	r3, #0
   2808a:	607b      	str	r3, [r7, #4]
   2808c:	e009      	b.n	280a2 <_switch_peripheral_gclk+0x26>
		system_gclk_chan_set_config(gclk_id, &gclk_conf);
   2808e:	687b      	ldr	r3, [r7, #4]
   28090:	b2db      	uxtb	r3, r3
   28092:	003a      	movs	r2, r7
   28094:	0011      	movs	r1, r2
   28096:	0018      	movs	r0, r3
   28098:	4b05      	ldr	r3, [pc, #20]	; (280b0 <_switch_peripheral_gclk+0x34>)
   2809a:	4798      	blx	r3
	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
   2809c:	687b      	ldr	r3, [r7, #4]
   2809e:	3301      	adds	r3, #1
   280a0:	607b      	str	r3, [r7, #4]
   280a2:	687b      	ldr	r3, [r7, #4]
   280a4:	2b24      	cmp	r3, #36	; 0x24
   280a6:	d9f2      	bls.n	2808e <_switch_peripheral_gclk+0x12>
	}
}
   280a8:	46c0      	nop			; (mov r8, r8)
   280aa:	46bd      	mov	sp, r7
   280ac:	b002      	add	sp, #8
   280ae:	bd80      	pop	{r7, pc}
   280b0:	00028681 	.word	0x00028681

000280b4 <system_clock_init>:
 * \note OSC8M is always enabled and if user selects other clocks for GCLK generators,
 * the OSC8M default enable can be disabled after system_clock_init. Make sure the
 * clock switch successfully before disabling OSC8M.
 */
void system_clock_init(void)
{
   280b4:	b580      	push	{r7, lr}
   280b6:	b0a6      	sub	sp, #152	; 0x98
   280b8:	af00      	add	r7, sp, #0
	/* Various bits in the INTFLAG register can be set to one at startup.
	   This will ensure that these bits are cleared */
	SYSCTRL->INTFLAG.reg = SYSCTRL_INTFLAG_BOD33RDY | SYSCTRL_INTFLAG_BOD33DET |
   280ba:	4b92      	ldr	r3, [pc, #584]	; (28304 <system_clock_init+0x250>)
   280bc:	22c2      	movs	r2, #194	; 0xc2
   280be:	00d2      	lsls	r2, r2, #3
   280c0:	609a      	str	r2, [r3, #8]
			SYSCTRL_INTFLAG_DFLLRDY;

	system_flash_set_waitstates(CONF_CLOCK_FLASH_WAIT_STATES);
   280c2:	2003      	movs	r0, #3
   280c4:	4b90      	ldr	r3, [pc, #576]	; (28308 <system_clock_init+0x254>)
   280c6:	4798      	blx	r3

	/* Switch all peripheral clock to a not enabled general clock to save power. */
	_switch_peripheral_gclk();
   280c8:	4b90      	ldr	r3, [pc, #576]	; (2830c <system_clock_init+0x258>)
   280ca:	4798      	blx	r3
#endif


	/* OSC8M */
	struct system_clock_source_osc8m_config osc8m_conf;
	system_clock_source_osc8m_get_config_defaults(&osc8m_conf);
   280cc:	2394      	movs	r3, #148	; 0x94
   280ce:	18fb      	adds	r3, r7, r3
   280d0:	0018      	movs	r0, r3
   280d2:	4b8f      	ldr	r3, [pc, #572]	; (28310 <system_clock_init+0x25c>)
   280d4:	4798      	blx	r3

	osc8m_conf.prescaler       = CONF_CLOCK_OSC8M_PRESCALER;
   280d6:	2394      	movs	r3, #148	; 0x94
   280d8:	18fb      	adds	r3, r7, r3
   280da:	2200      	movs	r2, #0
   280dc:	701a      	strb	r2, [r3, #0]
	osc8m_conf.on_demand       = CONF_CLOCK_OSC8M_ON_DEMAND;
   280de:	2394      	movs	r3, #148	; 0x94
   280e0:	18fb      	adds	r3, r7, r3
   280e2:	2201      	movs	r2, #1
   280e4:	709a      	strb	r2, [r3, #2]
	osc8m_conf.run_in_standby  = CONF_CLOCK_OSC8M_RUN_IN_STANDBY;
   280e6:	2394      	movs	r3, #148	; 0x94
   280e8:	18fb      	adds	r3, r7, r3
   280ea:	2200      	movs	r2, #0
   280ec:	705a      	strb	r2, [r3, #1]

	system_clock_source_osc8m_set_config(&osc8m_conf);
   280ee:	2394      	movs	r3, #148	; 0x94
   280f0:	18fb      	adds	r3, r7, r3
   280f2:	0018      	movs	r0, r3
   280f4:	4b87      	ldr	r3, [pc, #540]	; (28314 <system_clock_init+0x260>)
   280f6:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_OSC8M);
   280f8:	2006      	movs	r0, #6
   280fa:	4b87      	ldr	r3, [pc, #540]	; (28318 <system_clock_init+0x264>)
   280fc:	4798      	blx	r3


	/* GCLK */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	system_gclk_init();
   280fe:	4b87      	ldr	r3, [pc, #540]	; (2831c <system_clock_init+0x268>)
   28100:	4798      	blx	r3

	/* Configure all GCLK generators except for the main generator, which
	 * is configured later after all other clock systems are set up */
	MREPEAT(GCLK_GEN_NUM, _CONF_CLOCK_GCLK_CONFIG_NONMAIN, ~);
   28102:	2360      	movs	r3, #96	; 0x60
   28104:	18fb      	adds	r3, r7, r3
   28106:	0018      	movs	r0, r3
   28108:	4b85      	ldr	r3, [pc, #532]	; (28320 <system_clock_init+0x26c>)
   2810a:	4798      	blx	r3
   2810c:	2360      	movs	r3, #96	; 0x60
   2810e:	18fb      	adds	r3, r7, r3
   28110:	2206      	movs	r2, #6
   28112:	701a      	strb	r2, [r3, #0]
   28114:	2360      	movs	r3, #96	; 0x60
   28116:	18fb      	adds	r3, r7, r3
   28118:	2208      	movs	r2, #8
   2811a:	605a      	str	r2, [r3, #4]
   2811c:	2360      	movs	r3, #96	; 0x60
   2811e:	18fb      	adds	r3, r7, r3
   28120:	2200      	movs	r2, #0
   28122:	721a      	strb	r2, [r3, #8]
   28124:	2360      	movs	r3, #96	; 0x60
   28126:	18fb      	adds	r3, r7, r3
   28128:	2200      	movs	r2, #0
   2812a:	725a      	strb	r2, [r3, #9]
   2812c:	2360      	movs	r3, #96	; 0x60
   2812e:	18fb      	adds	r3, r7, r3
   28130:	0019      	movs	r1, r3
   28132:	2001      	movs	r0, #1
   28134:	4b7b      	ldr	r3, [pc, #492]	; (28324 <system_clock_init+0x270>)
   28136:	4798      	blx	r3
   28138:	2001      	movs	r0, #1
   2813a:	4b7b      	ldr	r3, [pc, #492]	; (28328 <system_clock_init+0x274>)
   2813c:	4798      	blx	r3
   2813e:	2354      	movs	r3, #84	; 0x54
   28140:	18fb      	adds	r3, r7, r3
   28142:	0018      	movs	r0, r3
   28144:	4b76      	ldr	r3, [pc, #472]	; (28320 <system_clock_init+0x26c>)
   28146:	4798      	blx	r3
   28148:	2354      	movs	r3, #84	; 0x54
   2814a:	18fb      	adds	r3, r7, r3
   2814c:	2203      	movs	r2, #3
   2814e:	701a      	strb	r2, [r3, #0]
   28150:	2354      	movs	r3, #84	; 0x54
   28152:	18fb      	adds	r3, r7, r3
   28154:	2201      	movs	r2, #1
   28156:	605a      	str	r2, [r3, #4]
   28158:	2354      	movs	r3, #84	; 0x54
   2815a:	18fb      	adds	r3, r7, r3
   2815c:	2201      	movs	r2, #1
   2815e:	721a      	strb	r2, [r3, #8]
   28160:	2354      	movs	r3, #84	; 0x54
   28162:	18fb      	adds	r3, r7, r3
   28164:	2200      	movs	r2, #0
   28166:	725a      	strb	r2, [r3, #9]
   28168:	2354      	movs	r3, #84	; 0x54
   2816a:	18fb      	adds	r3, r7, r3
   2816c:	0019      	movs	r1, r3
   2816e:	2002      	movs	r0, #2
   28170:	4b6c      	ldr	r3, [pc, #432]	; (28324 <system_clock_init+0x270>)
   28172:	4798      	blx	r3
   28174:	2002      	movs	r0, #2
   28176:	4b6c      	ldr	r3, [pc, #432]	; (28328 <system_clock_init+0x274>)
   28178:	4798      	blx	r3
   2817a:	233c      	movs	r3, #60	; 0x3c
   2817c:	18fb      	adds	r3, r7, r3
   2817e:	0018      	movs	r0, r3
   28180:	4b67      	ldr	r3, [pc, #412]	; (28320 <system_clock_init+0x26c>)
   28182:	4798      	blx	r3
   28184:	233c      	movs	r3, #60	; 0x3c
   28186:	18fb      	adds	r3, r7, r3
   28188:	2203      	movs	r2, #3
   2818a:	701a      	strb	r2, [r3, #0]
   2818c:	233c      	movs	r3, #60	; 0x3c
   2818e:	18fb      	adds	r3, r7, r3
   28190:	2220      	movs	r2, #32
   28192:	605a      	str	r2, [r3, #4]
   28194:	233c      	movs	r3, #60	; 0x3c
   28196:	18fb      	adds	r3, r7, r3
   28198:	2200      	movs	r2, #0
   2819a:	721a      	strb	r2, [r3, #8]
   2819c:	233c      	movs	r3, #60	; 0x3c
   2819e:	18fb      	adds	r3, r7, r3
   281a0:	2200      	movs	r2, #0
   281a2:	725a      	strb	r2, [r3, #9]
   281a4:	233c      	movs	r3, #60	; 0x3c
   281a6:	18fb      	adds	r3, r7, r3
   281a8:	0019      	movs	r1, r3
   281aa:	2004      	movs	r0, #4
   281ac:	4b5d      	ldr	r3, [pc, #372]	; (28324 <system_clock_init+0x270>)
   281ae:	4798      	blx	r3
   281b0:	2004      	movs	r0, #4
   281b2:	4b5d      	ldr	r3, [pc, #372]	; (28328 <system_clock_init+0x274>)
   281b4:	4798      	blx	r3
   281b6:	2330      	movs	r3, #48	; 0x30
   281b8:	18fb      	adds	r3, r7, r3
   281ba:	0018      	movs	r0, r3
   281bc:	4b58      	ldr	r3, [pc, #352]	; (28320 <system_clock_init+0x26c>)
   281be:	4798      	blx	r3
   281c0:	2330      	movs	r3, #48	; 0x30
   281c2:	18fb      	adds	r3, r7, r3
   281c4:	2206      	movs	r2, #6
   281c6:	701a      	strb	r2, [r3, #0]
   281c8:	2330      	movs	r3, #48	; 0x30
   281ca:	18fb      	adds	r3, r7, r3
   281cc:	2201      	movs	r2, #1
   281ce:	605a      	str	r2, [r3, #4]
   281d0:	2330      	movs	r3, #48	; 0x30
   281d2:	18fb      	adds	r3, r7, r3
   281d4:	2200      	movs	r2, #0
   281d6:	721a      	strb	r2, [r3, #8]
   281d8:	2330      	movs	r3, #48	; 0x30
   281da:	18fb      	adds	r3, r7, r3
   281dc:	2200      	movs	r2, #0
   281de:	725a      	strb	r2, [r3, #9]
   281e0:	2330      	movs	r3, #48	; 0x30
   281e2:	18fb      	adds	r3, r7, r3
   281e4:	0019      	movs	r1, r3
   281e6:	2005      	movs	r0, #5
   281e8:	4b4e      	ldr	r3, [pc, #312]	; (28324 <system_clock_init+0x270>)
   281ea:	4798      	blx	r3
   281ec:	2005      	movs	r0, #5
   281ee:	4b4e      	ldr	r3, [pc, #312]	; (28328 <system_clock_init+0x274>)
   281f0:	4798      	blx	r3
#  endif

#  if CONF_CLOCK_DPLL_ENABLE == true
	/* Enable DPLL internal lock timer and reference clock */
	struct system_gclk_chan_config dpll_gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&dpll_gclk_chan_conf);
   281f2:	2390      	movs	r3, #144	; 0x90
   281f4:	18fb      	adds	r3, r7, r3
   281f6:	0018      	movs	r0, r3
   281f8:	4b4c      	ldr	r3, [pc, #304]	; (2832c <system_clock_init+0x278>)
   281fa:	4798      	blx	r3
		system_gclk_chan_set_config(SYSCTRL_GCLK_ID_FDPLL32K, &dpll_gclk_chan_conf);
		system_gclk_chan_enable(SYSCTRL_GCLK_ID_FDPLL32K);
	}

	if (CONF_CLOCK_DPLL_REFERENCE_CLOCK == SYSTEM_CLOCK_SOURCE_DPLL_REFERENCE_CLOCK_GCLK) {
		dpll_gclk_chan_conf.source_generator = CONF_CLOCK_DPLL_REFERENCE_GCLK_GENERATOR;
   281fc:	2390      	movs	r3, #144	; 0x90
   281fe:	18fb      	adds	r3, r7, r3
   28200:	2201      	movs	r2, #1
   28202:	701a      	strb	r2, [r3, #0]
		system_gclk_chan_set_config(SYSCTRL_GCLK_ID_FDPLL, &dpll_gclk_chan_conf);
   28204:	2390      	movs	r3, #144	; 0x90
   28206:	18fb      	adds	r3, r7, r3
   28208:	0019      	movs	r1, r3
   2820a:	2001      	movs	r0, #1
   2820c:	4b48      	ldr	r3, [pc, #288]	; (28330 <system_clock_init+0x27c>)
   2820e:	4798      	blx	r3
		system_gclk_chan_enable(SYSCTRL_GCLK_ID_FDPLL);
   28210:	2001      	movs	r0, #1
   28212:	4b48      	ldr	r3, [pc, #288]	; (28334 <system_clock_init+0x280>)
   28214:	4798      	blx	r3
	else {
		Assert(false);
	}

	struct system_clock_source_dpll_config dpll_config;
	system_clock_source_dpll_get_config_defaults(&dpll_config);
   28216:	2378      	movs	r3, #120	; 0x78
   28218:	18fb      	adds	r3, r7, r3
   2821a:	0018      	movs	r0, r3
   2821c:	4b46      	ldr	r3, [pc, #280]	; (28338 <system_clock_init+0x284>)
   2821e:	4798      	blx	r3

	dpll_config.on_demand        = false;
   28220:	2378      	movs	r3, #120	; 0x78
   28222:	18fb      	adds	r3, r7, r3
   28224:	2200      	movs	r2, #0
   28226:	701a      	strb	r2, [r3, #0]
	dpll_config.run_in_standby   = CONF_CLOCK_DPLL_RUN_IN_STANDBY;
   28228:	2378      	movs	r3, #120	; 0x78
   2822a:	18fb      	adds	r3, r7, r3
   2822c:	2200      	movs	r2, #0
   2822e:	705a      	strb	r2, [r3, #1]
	dpll_config.lock_bypass      = CONF_CLOCK_DPLL_LOCK_BYPASS;
   28230:	2378      	movs	r3, #120	; 0x78
   28232:	18fb      	adds	r3, r7, r3
   28234:	2200      	movs	r2, #0
   28236:	709a      	strb	r2, [r3, #2]
	dpll_config.wake_up_fast     = CONF_CLOCK_DPLL_WAKE_UP_FAST;
   28238:	2378      	movs	r3, #120	; 0x78
   2823a:	18fb      	adds	r3, r7, r3
   2823c:	2200      	movs	r2, #0
   2823e:	70da      	strb	r2, [r3, #3]
	dpll_config.low_power_enable = CONF_CLOCK_DPLL_LOW_POWER_ENABLE;
   28240:	2378      	movs	r3, #120	; 0x78
   28242:	18fb      	adds	r3, r7, r3
   28244:	2200      	movs	r2, #0
   28246:	711a      	strb	r2, [r3, #4]

	dpll_config.filter           = CONF_CLOCK_DPLL_FILTER;
   28248:	2378      	movs	r3, #120	; 0x78
   2824a:	18fb      	adds	r3, r7, r3
   2824c:	2200      	movs	r2, #0
   2824e:	749a      	strb	r2, [r3, #18]
	dpll_config.lock_time        = CONF_CLOCK_DPLL_LOCK_TIME;
   28250:	2378      	movs	r3, #120	; 0x78
   28252:	18fb      	adds	r3, r7, r3
   28254:	2200      	movs	r2, #0
   28256:	74da      	strb	r2, [r3, #19]

	dpll_config.reference_clock     = CONF_CLOCK_DPLL_REFERENCE_CLOCK;
   28258:	2378      	movs	r3, #120	; 0x78
   2825a:	18fb      	adds	r3, r7, r3
   2825c:	2202      	movs	r2, #2
   2825e:	751a      	strb	r2, [r3, #20]
	dpll_config.reference_frequency = CONF_CLOCK_DPLL_REFERENCE_FREQUENCY;
   28260:	2378      	movs	r3, #120	; 0x78
   28262:	18fb      	adds	r3, r7, r3
   28264:	4a35      	ldr	r2, [pc, #212]	; (2833c <system_clock_init+0x288>)
   28266:	60da      	str	r2, [r3, #12]
	dpll_config.reference_divider   = CONF_CLOCK_DPLL_REFERENCE_DIVIDER;
   28268:	2378      	movs	r3, #120	; 0x78
   2826a:	18fb      	adds	r3, r7, r3
   2826c:	2201      	movs	r2, #1
   2826e:	821a      	strh	r2, [r3, #16]
	dpll_config.output_frequency    = CONF_CLOCK_DPLL_OUTPUT_FREQUENCY;
   28270:	2378      	movs	r3, #120	; 0x78
   28272:	18fb      	adds	r3, r7, r3
   28274:	4a32      	ldr	r2, [pc, #200]	; (28340 <system_clock_init+0x28c>)
   28276:	609a      	str	r2, [r3, #8]

	system_clock_source_dpll_set_config(&dpll_config);
   28278:	2378      	movs	r3, #120	; 0x78
   2827a:	18fb      	adds	r3, r7, r3
   2827c:	0018      	movs	r0, r3
   2827e:	4b31      	ldr	r3, [pc, #196]	; (28344 <system_clock_init+0x290>)
   28280:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_DPLL);
   28282:	2008      	movs	r0, #8
   28284:	4b24      	ldr	r3, [pc, #144]	; (28318 <system_clock_init+0x264>)
   28286:	4798      	blx	r3
	while(!system_clock_source_is_ready(SYSTEM_CLOCK_SOURCE_DPLL));
   28288:	46c0      	nop			; (mov r8, r8)
   2828a:	2008      	movs	r0, #8
   2828c:	4b2e      	ldr	r3, [pc, #184]	; (28348 <system_clock_init+0x294>)
   2828e:	4798      	blx	r3
   28290:	0003      	movs	r3, r0
   28292:	001a      	movs	r2, r3
   28294:	2301      	movs	r3, #1
   28296:	4053      	eors	r3, r2
   28298:	b2db      	uxtb	r3, r3
   2829a:	2b00      	cmp	r3, #0
   2829c:	d1f5      	bne.n	2828a <system_clock_init+0x1d6>
	if (CONF_CLOCK_DPLL_ON_DEMAND) {
		SYSCTRL->DPLLCTRLA.bit.ONDEMAND = 1;
   2829e:	4919      	ldr	r1, [pc, #100]	; (28304 <system_clock_init+0x250>)
   282a0:	2244      	movs	r2, #68	; 0x44
   282a2:	5c8b      	ldrb	r3, [r1, r2]
   282a4:	2080      	movs	r0, #128	; 0x80
   282a6:	4240      	negs	r0, r0
   282a8:	4303      	orrs	r3, r0
   282aa:	548b      	strb	r3, [r1, r2]

#  endif
#endif

	/* CPU and BUS clocks */
	system_cpu_clock_set_divider(CONF_CLOCK_CPU_DIVIDER);
   282ac:	2000      	movs	r0, #0
   282ae:	4b27      	ldr	r3, [pc, #156]	; (2834c <system_clock_init+0x298>)
   282b0:	4798      	blx	r3

	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBA, CONF_CLOCK_APBA_DIVIDER);
   282b2:	2100      	movs	r1, #0
   282b4:	2000      	movs	r0, #0
   282b6:	4b26      	ldr	r3, [pc, #152]	; (28350 <system_clock_init+0x29c>)
   282b8:	4798      	blx	r3
	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBB, CONF_CLOCK_APBB_DIVIDER);
   282ba:	2100      	movs	r1, #0
   282bc:	2001      	movs	r0, #1
   282be:	4b24      	ldr	r3, [pc, #144]	; (28350 <system_clock_init+0x29c>)
   282c0:	4798      	blx	r3
	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBC, CONF_CLOCK_APBC_DIVIDER);
   282c2:	2100      	movs	r1, #0
   282c4:	2002      	movs	r0, #2
   282c6:	4b22      	ldr	r3, [pc, #136]	; (28350 <system_clock_init+0x29c>)
   282c8:	4798      	blx	r3

	/* GCLK 0 */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	/* Configure the main GCLK last as it might depend on other generators */
	_CONF_CLOCK_GCLK_CONFIG(0, ~);
   282ca:	003b      	movs	r3, r7
   282cc:	0018      	movs	r0, r3
   282ce:	4b14      	ldr	r3, [pc, #80]	; (28320 <system_clock_init+0x26c>)
   282d0:	4798      	blx	r3
   282d2:	003b      	movs	r3, r7
   282d4:	2208      	movs	r2, #8
   282d6:	701a      	strb	r2, [r3, #0]
   282d8:	003b      	movs	r3, r7
   282da:	2201      	movs	r2, #1
   282dc:	605a      	str	r2, [r3, #4]
   282de:	003b      	movs	r3, r7
   282e0:	2200      	movs	r2, #0
   282e2:	721a      	strb	r2, [r3, #8]
   282e4:	003b      	movs	r3, r7
   282e6:	2201      	movs	r2, #1
   282e8:	725a      	strb	r2, [r3, #9]
   282ea:	003b      	movs	r3, r7
   282ec:	0019      	movs	r1, r3
   282ee:	2000      	movs	r0, #0
   282f0:	4b0c      	ldr	r3, [pc, #48]	; (28324 <system_clock_init+0x270>)
   282f2:	4798      	blx	r3
   282f4:	2000      	movs	r0, #0
   282f6:	4b0c      	ldr	r3, [pc, #48]	; (28328 <system_clock_init+0x274>)
   282f8:	4798      	blx	r3
#endif
}
   282fa:	46c0      	nop			; (mov r8, r8)
   282fc:	46bd      	mov	sp, r7
   282fe:	b026      	add	sp, #152	; 0x98
   28300:	bd80      	pop	{r7, pc}
   28302:	46c0      	nop			; (mov r8, r8)
   28304:	40000800 	.word	0x40000800
   28308:	00027c75 	.word	0x00027c75
   2830c:	0002807d 	.word	0x0002807d
   28310:	00027b85 	.word	0x00027b85
   28314:	00027dc9 	.word	0x00027dc9
   28318:	00027f4d 	.word	0x00027f4d
   2831c:	000283f9 	.word	0x000283f9
   28320:	00027b41 	.word	0x00027b41
   28324:	00028429 	.word	0x00028429
   28328:	0002854d 	.word	0x0002854d
   2832c:	00027b6f 	.word	0x00027b6f
   28330:	00028681 	.word	0x00028681
   28334:	000286c5 	.word	0x000286c5
   28338:	00027c1d 	.word	0x00027c1d
   2833c:	000f4240 	.word	0x000f4240
   28340:	02dc6c00 	.word	0x02dc6c00
   28344:	00027e41 	.word	0x00027e41
   28348:	00027ff9 	.word	0x00027ff9
   2834c:	00027ba9 	.word	0x00027ba9
   28350:	00027bc9 	.word	0x00027bc9

00028354 <system_apb_clock_set_mask>:
{
   28354:	b580      	push	{r7, lr}
   28356:	b082      	sub	sp, #8
   28358:	af00      	add	r7, sp, #0
   2835a:	0002      	movs	r2, r0
   2835c:	6039      	str	r1, [r7, #0]
   2835e:	1dfb      	adds	r3, r7, #7
   28360:	701a      	strb	r2, [r3, #0]
	switch (bus) {
   28362:	1dfb      	adds	r3, r7, #7
   28364:	781b      	ldrb	r3, [r3, #0]
   28366:	2b01      	cmp	r3, #1
   28368:	d00a      	beq.n	28380 <system_apb_clock_set_mask+0x2c>
   2836a:	2b02      	cmp	r3, #2
   2836c:	d00f      	beq.n	2838e <system_apb_clock_set_mask+0x3a>
   2836e:	2b00      	cmp	r3, #0
   28370:	d114      	bne.n	2839c <system_apb_clock_set_mask+0x48>
			PM->APBAMASK.reg |= mask;
   28372:	4b0e      	ldr	r3, [pc, #56]	; (283ac <system_apb_clock_set_mask+0x58>)
   28374:	4a0d      	ldr	r2, [pc, #52]	; (283ac <system_apb_clock_set_mask+0x58>)
   28376:	6991      	ldr	r1, [r2, #24]
   28378:	683a      	ldr	r2, [r7, #0]
   2837a:	430a      	orrs	r2, r1
   2837c:	619a      	str	r2, [r3, #24]
			break;
   2837e:	e00f      	b.n	283a0 <system_apb_clock_set_mask+0x4c>
			PM->APBBMASK.reg |= mask;
   28380:	4b0a      	ldr	r3, [pc, #40]	; (283ac <system_apb_clock_set_mask+0x58>)
   28382:	4a0a      	ldr	r2, [pc, #40]	; (283ac <system_apb_clock_set_mask+0x58>)
   28384:	69d1      	ldr	r1, [r2, #28]
   28386:	683a      	ldr	r2, [r7, #0]
   28388:	430a      	orrs	r2, r1
   2838a:	61da      	str	r2, [r3, #28]
			break;
   2838c:	e008      	b.n	283a0 <system_apb_clock_set_mask+0x4c>
			PM->APBCMASK.reg |= mask;
   2838e:	4b07      	ldr	r3, [pc, #28]	; (283ac <system_apb_clock_set_mask+0x58>)
   28390:	4a06      	ldr	r2, [pc, #24]	; (283ac <system_apb_clock_set_mask+0x58>)
   28392:	6a11      	ldr	r1, [r2, #32]
   28394:	683a      	ldr	r2, [r7, #0]
   28396:	430a      	orrs	r2, r1
   28398:	621a      	str	r2, [r3, #32]
			break;
   2839a:	e001      	b.n	283a0 <system_apb_clock_set_mask+0x4c>
			return STATUS_ERR_INVALID_ARG;
   2839c:	2317      	movs	r3, #23
   2839e:	e000      	b.n	283a2 <system_apb_clock_set_mask+0x4e>
	return STATUS_OK;
   283a0:	2300      	movs	r3, #0
}
   283a2:	0018      	movs	r0, r3
   283a4:	46bd      	mov	sp, r7
   283a6:	b002      	add	sp, #8
   283a8:	bd80      	pop	{r7, pc}
   283aa:	46c0      	nop			; (mov r8, r8)
   283ac:	40000400 	.word	0x40000400

000283b0 <system_interrupt_enter_critical_section>:
{
   283b0:	b580      	push	{r7, lr}
   283b2:	af00      	add	r7, sp, #0
	cpu_irq_enter_critical();
   283b4:	4b02      	ldr	r3, [pc, #8]	; (283c0 <system_interrupt_enter_critical_section+0x10>)
   283b6:	4798      	blx	r3
}
   283b8:	46c0      	nop			; (mov r8, r8)
   283ba:	46bd      	mov	sp, r7
   283bc:	bd80      	pop	{r7, pc}
   283be:	46c0      	nop			; (mov r8, r8)
   283c0:	000249ed 	.word	0x000249ed

000283c4 <system_interrupt_leave_critical_section>:
{
   283c4:	b580      	push	{r7, lr}
   283c6:	af00      	add	r7, sp, #0
	cpu_irq_leave_critical();
   283c8:	4b02      	ldr	r3, [pc, #8]	; (283d4 <system_interrupt_leave_critical_section+0x10>)
   283ca:	4798      	blx	r3
}
   283cc:	46c0      	nop			; (mov r8, r8)
   283ce:	46bd      	mov	sp, r7
   283d0:	bd80      	pop	{r7, pc}
   283d2:	46c0      	nop			; (mov r8, r8)
   283d4:	00024a41 	.word	0x00024a41

000283d8 <system_gclk_is_syncing>:
 *
 * \retval false if the module has completed synchronization
 * \retval true if the module synchronization is ongoing
 */
static inline bool system_gclk_is_syncing(void)
{
   283d8:	b580      	push	{r7, lr}
   283da:	af00      	add	r7, sp, #0
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
   283dc:	4b05      	ldr	r3, [pc, #20]	; (283f4 <system_gclk_is_syncing+0x1c>)
   283de:	785b      	ldrb	r3, [r3, #1]
   283e0:	b2db      	uxtb	r3, r3
   283e2:	b25b      	sxtb	r3, r3
   283e4:	2b00      	cmp	r3, #0
   283e6:	da01      	bge.n	283ec <system_gclk_is_syncing+0x14>
		return true;
   283e8:	2301      	movs	r3, #1
   283ea:	e000      	b.n	283ee <system_gclk_is_syncing+0x16>
	}

	return false;
   283ec:	2300      	movs	r3, #0
}
   283ee:	0018      	movs	r0, r3
   283f0:	46bd      	mov	sp, r7
   283f2:	bd80      	pop	{r7, pc}
   283f4:	40000c00 	.word	0x40000c00

000283f8 <system_gclk_init>:
 *
 * Initializes the Generic Clock module, disabling and resetting all active
 * Generic Clock Generators and Channels to their power-on default values.
 */
void system_gclk_init(void)
{
   283f8:	b580      	push	{r7, lr}
   283fa:	af00      	add	r7, sp, #0
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, PM_APBAMASK_GCLK);
   283fc:	2108      	movs	r1, #8
   283fe:	2000      	movs	r0, #0
   28400:	4b07      	ldr	r3, [pc, #28]	; (28420 <system_gclk_init+0x28>)
   28402:	4798      	blx	r3

	/* Software reset the module to ensure it is re-initialized correctly */
	GCLK->CTRL.reg = GCLK_CTRL_SWRST;
   28404:	4b07      	ldr	r3, [pc, #28]	; (28424 <system_gclk_init+0x2c>)
   28406:	2201      	movs	r2, #1
   28408:	701a      	strb	r2, [r3, #0]
	while (GCLK->CTRL.reg & GCLK_CTRL_SWRST) {
   2840a:	46c0      	nop			; (mov r8, r8)
   2840c:	4b05      	ldr	r3, [pc, #20]	; (28424 <system_gclk_init+0x2c>)
   2840e:	781b      	ldrb	r3, [r3, #0]
   28410:	b2db      	uxtb	r3, r3
   28412:	001a      	movs	r2, r3
   28414:	2301      	movs	r3, #1
   28416:	4013      	ands	r3, r2
   28418:	d1f8      	bne.n	2840c <system_gclk_init+0x14>
		/* Wait for reset to complete */
	}
}
   2841a:	46c0      	nop			; (mov r8, r8)
   2841c:	46bd      	mov	sp, r7
   2841e:	bd80      	pop	{r7, pc}
   28420:	00028355 	.word	0x00028355
   28424:	40000c00 	.word	0x40000c00

00028428 <system_gclk_gen_set_config>:
 * \param[in] config     Configuration settings for the generator
 */
void system_gclk_gen_set_config(
		const uint8_t generator,
		struct system_gclk_gen_config *const config)
{
   28428:	b580      	push	{r7, lr}
   2842a:	b086      	sub	sp, #24
   2842c:	af00      	add	r7, sp, #0
   2842e:	0002      	movs	r2, r0
   28430:	6039      	str	r1, [r7, #0]
   28432:	1dfb      	adds	r3, r7, #7
   28434:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(config);

	/* Cache new register configurations to minimize sync requirements. */
	uint32_t new_genctrl_config = (generator << GCLK_GENCTRL_ID_Pos);
   28436:	1dfb      	adds	r3, r7, #7
   28438:	781b      	ldrb	r3, [r3, #0]
   2843a:	617b      	str	r3, [r7, #20]
	uint32_t new_gendiv_config  = (generator << GCLK_GENDIV_ID_Pos);
   2843c:	1dfb      	adds	r3, r7, #7
   2843e:	781b      	ldrb	r3, [r3, #0]
   28440:	613b      	str	r3, [r7, #16]

	/* Select the requested source clock for the generator */
	new_genctrl_config |= config->source_clock << GCLK_GENCTRL_SRC_Pos;
   28442:	683b      	ldr	r3, [r7, #0]
   28444:	781b      	ldrb	r3, [r3, #0]
   28446:	021b      	lsls	r3, r3, #8
   28448:	001a      	movs	r2, r3
   2844a:	697b      	ldr	r3, [r7, #20]
   2844c:	4313      	orrs	r3, r2
   2844e:	617b      	str	r3, [r7, #20]

	/* Configure the clock to be either high or low when disabled */
	if (config->high_when_disabled) {
   28450:	683b      	ldr	r3, [r7, #0]
   28452:	785b      	ldrb	r3, [r3, #1]
   28454:	2b00      	cmp	r3, #0
   28456:	d004      	beq.n	28462 <system_gclk_gen_set_config+0x3a>
		new_genctrl_config |= GCLK_GENCTRL_OOV;
   28458:	697b      	ldr	r3, [r7, #20]
   2845a:	2280      	movs	r2, #128	; 0x80
   2845c:	02d2      	lsls	r2, r2, #11
   2845e:	4313      	orrs	r3, r2
   28460:	617b      	str	r3, [r7, #20]
	}

	/* Configure if the clock output to I/O pin should be enabled. */
	if (config->output_enable) {
   28462:	683b      	ldr	r3, [r7, #0]
   28464:	7a5b      	ldrb	r3, [r3, #9]
   28466:	2b00      	cmp	r3, #0
   28468:	d004      	beq.n	28474 <system_gclk_gen_set_config+0x4c>
		new_genctrl_config |= GCLK_GENCTRL_OE;
   2846a:	697b      	ldr	r3, [r7, #20]
   2846c:	2280      	movs	r2, #128	; 0x80
   2846e:	0312      	lsls	r2, r2, #12
   28470:	4313      	orrs	r3, r2
   28472:	617b      	str	r3, [r7, #20]
	}

	/* Set division factor */
	if (config->division_factor > 1) {
   28474:	683b      	ldr	r3, [r7, #0]
   28476:	685b      	ldr	r3, [r3, #4]
   28478:	2b01      	cmp	r3, #1
   2847a:	d92c      	bls.n	284d6 <system_gclk_gen_set_config+0xae>
		/* Check if division is a power of two */
		if (((config->division_factor & (config->division_factor - 1)) == 0)) {
   2847c:	683b      	ldr	r3, [r7, #0]
   2847e:	685a      	ldr	r2, [r3, #4]
   28480:	683b      	ldr	r3, [r7, #0]
   28482:	685b      	ldr	r3, [r3, #4]
   28484:	3b01      	subs	r3, #1
   28486:	4013      	ands	r3, r2
   28488:	d11a      	bne.n	284c0 <system_gclk_gen_set_config+0x98>
			/* Determine the index of the highest bit set to get the
			 * division factor that must be loaded into the division
			 * register */

			uint32_t div2_count = 0;
   2848a:	2300      	movs	r3, #0
   2848c:	60fb      	str	r3, [r7, #12]

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
   2848e:	2302      	movs	r3, #2
   28490:	60bb      	str	r3, [r7, #8]
   28492:	e005      	b.n	284a0 <system_gclk_gen_set_config+0x78>
						mask <<= 1) {
				div2_count++;
   28494:	68fb      	ldr	r3, [r7, #12]
   28496:	3301      	adds	r3, #1
   28498:	60fb      	str	r3, [r7, #12]
						mask <<= 1) {
   2849a:	68bb      	ldr	r3, [r7, #8]
   2849c:	005b      	lsls	r3, r3, #1
   2849e:	60bb      	str	r3, [r7, #8]
			for (mask = (1UL << 1); mask < config->division_factor;
   284a0:	683b      	ldr	r3, [r7, #0]
   284a2:	685a      	ldr	r2, [r3, #4]
   284a4:	68bb      	ldr	r3, [r7, #8]
   284a6:	429a      	cmp	r2, r3
   284a8:	d8f4      	bhi.n	28494 <system_gclk_gen_set_config+0x6c>
			}

			/* Set binary divider power of 2 division factor */
			new_gendiv_config  |= div2_count << GCLK_GENDIV_DIV_Pos;
   284aa:	68fb      	ldr	r3, [r7, #12]
   284ac:	021b      	lsls	r3, r3, #8
   284ae:	693a      	ldr	r2, [r7, #16]
   284b0:	4313      	orrs	r3, r2
   284b2:	613b      	str	r3, [r7, #16]
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
   284b4:	697b      	ldr	r3, [r7, #20]
   284b6:	2280      	movs	r2, #128	; 0x80
   284b8:	0352      	lsls	r2, r2, #13
   284ba:	4313      	orrs	r3, r2
   284bc:	617b      	str	r3, [r7, #20]
   284be:	e00a      	b.n	284d6 <system_gclk_gen_set_config+0xae>
		} else {
			/* Set integer division factor */

			new_gendiv_config  |=
					(config->division_factor) << GCLK_GENDIV_DIV_Pos;
   284c0:	683b      	ldr	r3, [r7, #0]
   284c2:	685b      	ldr	r3, [r3, #4]
   284c4:	021b      	lsls	r3, r3, #8
			new_gendiv_config  |=
   284c6:	693a      	ldr	r2, [r7, #16]
   284c8:	4313      	orrs	r3, r2
   284ca:	613b      	str	r3, [r7, #16]

			/* Enable non-binary division with increased duty cycle accuracy */
			new_genctrl_config |= GCLK_GENCTRL_IDC;
   284cc:	697b      	ldr	r3, [r7, #20]
   284ce:	2280      	movs	r2, #128	; 0x80
   284d0:	0292      	lsls	r2, r2, #10
   284d2:	4313      	orrs	r3, r2
   284d4:	617b      	str	r3, [r7, #20]
		}

	}

	/* Enable or disable the clock in standby mode */
	if (config->run_in_standby) {
   284d6:	683b      	ldr	r3, [r7, #0]
   284d8:	7a1b      	ldrb	r3, [r3, #8]
   284da:	2b00      	cmp	r3, #0
   284dc:	d004      	beq.n	284e8 <system_gclk_gen_set_config+0xc0>
		new_genctrl_config |= GCLK_GENCTRL_RUNSTDBY;
   284de:	697b      	ldr	r3, [r7, #20]
   284e0:	2280      	movs	r2, #128	; 0x80
   284e2:	0392      	lsls	r2, r2, #14
   284e4:	4313      	orrs	r3, r2
   284e6:	617b      	str	r3, [r7, #20]
	}

	while (system_gclk_is_syncing()) {
   284e8:	46c0      	nop			; (mov r8, r8)
   284ea:	4b13      	ldr	r3, [pc, #76]	; (28538 <system_gclk_gen_set_config+0x110>)
   284ec:	4798      	blx	r3
   284ee:	1e03      	subs	r3, r0, #0
   284f0:	d1fb      	bne.n	284ea <system_gclk_gen_set_config+0xc2>
		/* Wait for synchronization */
	};

	system_interrupt_enter_critical_section();
   284f2:	4b12      	ldr	r3, [pc, #72]	; (2853c <system_gclk_gen_set_config+0x114>)
   284f4:	4798      	blx	r3

	/* Select the correct generator */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
   284f6:	4a12      	ldr	r2, [pc, #72]	; (28540 <system_gclk_gen_set_config+0x118>)
   284f8:	1dfb      	adds	r3, r7, #7
   284fa:	781b      	ldrb	r3, [r3, #0]
   284fc:	7013      	strb	r3, [r2, #0]

	/* Write the new generator configuration */
	while (system_gclk_is_syncing()) {
   284fe:	46c0      	nop			; (mov r8, r8)
   28500:	4b0d      	ldr	r3, [pc, #52]	; (28538 <system_gclk_gen_set_config+0x110>)
   28502:	4798      	blx	r3
   28504:	1e03      	subs	r3, r0, #0
   28506:	d1fb      	bne.n	28500 <system_gclk_gen_set_config+0xd8>
		/* Wait for synchronization */
	};
	GCLK->GENDIV.reg  = new_gendiv_config;
   28508:	4b0e      	ldr	r3, [pc, #56]	; (28544 <system_gclk_gen_set_config+0x11c>)
   2850a:	693a      	ldr	r2, [r7, #16]
   2850c:	609a      	str	r2, [r3, #8]

	while (system_gclk_is_syncing()) {
   2850e:	46c0      	nop			; (mov r8, r8)
   28510:	4b09      	ldr	r3, [pc, #36]	; (28538 <system_gclk_gen_set_config+0x110>)
   28512:	4798      	blx	r3
   28514:	1e03      	subs	r3, r0, #0
   28516:	d1fb      	bne.n	28510 <system_gclk_gen_set_config+0xe8>
		/* Wait for synchronization */
	};
	GCLK->GENCTRL.reg = new_genctrl_config | (GCLK->GENCTRL.reg & GCLK_GENCTRL_GENEN);
   28518:	4b0a      	ldr	r3, [pc, #40]	; (28544 <system_gclk_gen_set_config+0x11c>)
   2851a:	4a0a      	ldr	r2, [pc, #40]	; (28544 <system_gclk_gen_set_config+0x11c>)
   2851c:	6851      	ldr	r1, [r2, #4]
   2851e:	2280      	movs	r2, #128	; 0x80
   28520:	0252      	lsls	r2, r2, #9
   28522:	4011      	ands	r1, r2
   28524:	697a      	ldr	r2, [r7, #20]
   28526:	430a      	orrs	r2, r1
   28528:	605a      	str	r2, [r3, #4]

	system_interrupt_leave_critical_section();
   2852a:	4b07      	ldr	r3, [pc, #28]	; (28548 <system_gclk_gen_set_config+0x120>)
   2852c:	4798      	blx	r3
}
   2852e:	46c0      	nop			; (mov r8, r8)
   28530:	46bd      	mov	sp, r7
   28532:	b006      	add	sp, #24
   28534:	bd80      	pop	{r7, pc}
   28536:	46c0      	nop			; (mov r8, r8)
   28538:	000283d9 	.word	0x000283d9
   2853c:	000283b1 	.word	0x000283b1
   28540:	40000c08 	.word	0x40000c08
   28544:	40000c00 	.word	0x40000c00
   28548:	000283c5 	.word	0x000283c5

0002854c <system_gclk_gen_enable>:
 *
 * \param[in] generator  Generic Clock Generator index to enable
 */
void system_gclk_gen_enable(
		const uint8_t generator)
{
   2854c:	b580      	push	{r7, lr}
   2854e:	b082      	sub	sp, #8
   28550:	af00      	add	r7, sp, #0
   28552:	0002      	movs	r2, r0
   28554:	1dfb      	adds	r3, r7, #7
   28556:	701a      	strb	r2, [r3, #0]
	while (system_gclk_is_syncing()) {
   28558:	46c0      	nop			; (mov r8, r8)
   2855a:	4b0e      	ldr	r3, [pc, #56]	; (28594 <system_gclk_gen_enable+0x48>)
   2855c:	4798      	blx	r3
   2855e:	1e03      	subs	r3, r0, #0
   28560:	d1fb      	bne.n	2855a <system_gclk_gen_enable+0xe>
		/* Wait for synchronization */
	};

	system_interrupt_enter_critical_section();
   28562:	4b0d      	ldr	r3, [pc, #52]	; (28598 <system_gclk_gen_enable+0x4c>)
   28564:	4798      	blx	r3

	/* Select the requested generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
   28566:	4a0d      	ldr	r2, [pc, #52]	; (2859c <system_gclk_gen_enable+0x50>)
   28568:	1dfb      	adds	r3, r7, #7
   2856a:	781b      	ldrb	r3, [r3, #0]
   2856c:	7013      	strb	r3, [r2, #0]
	while (system_gclk_is_syncing()) {
   2856e:	46c0      	nop			; (mov r8, r8)
   28570:	4b08      	ldr	r3, [pc, #32]	; (28594 <system_gclk_gen_enable+0x48>)
   28572:	4798      	blx	r3
   28574:	1e03      	subs	r3, r0, #0
   28576:	d1fb      	bne.n	28570 <system_gclk_gen_enable+0x24>
		/* Wait for synchronization */
	};

	/* Enable generator */
	GCLK->GENCTRL.reg |= GCLK_GENCTRL_GENEN;
   28578:	4b09      	ldr	r3, [pc, #36]	; (285a0 <system_gclk_gen_enable+0x54>)
   2857a:	4a09      	ldr	r2, [pc, #36]	; (285a0 <system_gclk_gen_enable+0x54>)
   2857c:	6852      	ldr	r2, [r2, #4]
   2857e:	2180      	movs	r1, #128	; 0x80
   28580:	0249      	lsls	r1, r1, #9
   28582:	430a      	orrs	r2, r1
   28584:	605a      	str	r2, [r3, #4]

	system_interrupt_leave_critical_section();
   28586:	4b07      	ldr	r3, [pc, #28]	; (285a4 <system_gclk_gen_enable+0x58>)
   28588:	4798      	blx	r3
}
   2858a:	46c0      	nop			; (mov r8, r8)
   2858c:	46bd      	mov	sp, r7
   2858e:	b002      	add	sp, #8
   28590:	bd80      	pop	{r7, pc}
   28592:	46c0      	nop			; (mov r8, r8)
   28594:	000283d9 	.word	0x000283d9
   28598:	000283b1 	.word	0x000283b1
   2859c:	40000c04 	.word	0x40000c04
   285a0:	40000c00 	.word	0x40000c00
   285a4:	000283c5 	.word	0x000283c5

000285a8 <system_gclk_gen_get_hz>:
 *
 * \return The frequency of the generic clock generator, in Hz.
 */
uint32_t system_gclk_gen_get_hz(
		const uint8_t generator)
{
   285a8:	b580      	push	{r7, lr}
   285aa:	b086      	sub	sp, #24
   285ac:	af00      	add	r7, sp, #0
   285ae:	0002      	movs	r2, r0
   285b0:	1dfb      	adds	r3, r7, #7
   285b2:	701a      	strb	r2, [r3, #0]
	while (system_gclk_is_syncing()) {
   285b4:	46c0      	nop			; (mov r8, r8)
   285b6:	4b2a      	ldr	r3, [pc, #168]	; (28660 <system_gclk_gen_get_hz+0xb8>)
   285b8:	4798      	blx	r3
   285ba:	1e03      	subs	r3, r0, #0
   285bc:	d1fb      	bne.n	285b6 <system_gclk_gen_get_hz+0xe>
		/* Wait for synchronization */
	};

	system_interrupt_enter_critical_section();
   285be:	4b29      	ldr	r3, [pc, #164]	; (28664 <system_gclk_gen_get_hz+0xbc>)
   285c0:	4798      	blx	r3

	/* Select the appropriate generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
   285c2:	4a29      	ldr	r2, [pc, #164]	; (28668 <system_gclk_gen_get_hz+0xc0>)
   285c4:	1dfb      	adds	r3, r7, #7
   285c6:	781b      	ldrb	r3, [r3, #0]
   285c8:	7013      	strb	r3, [r2, #0]
	while (system_gclk_is_syncing()) {
   285ca:	46c0      	nop			; (mov r8, r8)
   285cc:	4b24      	ldr	r3, [pc, #144]	; (28660 <system_gclk_gen_get_hz+0xb8>)
   285ce:	4798      	blx	r3
   285d0:	1e03      	subs	r3, r0, #0
   285d2:	d1fb      	bne.n	285cc <system_gclk_gen_get_hz+0x24>
		/* Wait for synchronization */
	};

	/* Get the frequency of the source connected to the GCLK generator */
	uint32_t gen_input_hz = system_clock_source_get_hz(
			(enum system_clock_source)GCLK->GENCTRL.bit.SRC);
   285d4:	4b25      	ldr	r3, [pc, #148]	; (2866c <system_gclk_gen_get_hz+0xc4>)
   285d6:	685b      	ldr	r3, [r3, #4]
   285d8:	04db      	lsls	r3, r3, #19
   285da:	0edb      	lsrs	r3, r3, #27
   285dc:	b2db      	uxtb	r3, r3
	uint32_t gen_input_hz = system_clock_source_get_hz(
   285de:	0018      	movs	r0, r3
   285e0:	4b23      	ldr	r3, [pc, #140]	; (28670 <system_gclk_gen_get_hz+0xc8>)
   285e2:	4798      	blx	r3
   285e4:	0003      	movs	r3, r0
   285e6:	617b      	str	r3, [r7, #20]

	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
   285e8:	4a1f      	ldr	r2, [pc, #124]	; (28668 <system_gclk_gen_get_hz+0xc0>)
   285ea:	1dfb      	adds	r3, r7, #7
   285ec:	781b      	ldrb	r3, [r3, #0]
   285ee:	7013      	strb	r3, [r2, #0]

	uint8_t divsel = GCLK->GENCTRL.bit.DIVSEL;
   285f0:	4b1e      	ldr	r3, [pc, #120]	; (2866c <system_gclk_gen_get_hz+0xc4>)
   285f2:	685b      	ldr	r3, [r3, #4]
   285f4:	02db      	lsls	r3, r3, #11
   285f6:	0fdb      	lsrs	r3, r3, #31
   285f8:	b2da      	uxtb	r2, r3
   285fa:	2313      	movs	r3, #19
   285fc:	18fb      	adds	r3, r7, r3
   285fe:	701a      	strb	r2, [r3, #0]

	/* Select the appropriate generator division register */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
   28600:	4a1c      	ldr	r2, [pc, #112]	; (28674 <system_gclk_gen_get_hz+0xcc>)
   28602:	1dfb      	adds	r3, r7, #7
   28604:	781b      	ldrb	r3, [r3, #0]
   28606:	7013      	strb	r3, [r2, #0]
	while (system_gclk_is_syncing()) {
   28608:	46c0      	nop			; (mov r8, r8)
   2860a:	4b15      	ldr	r3, [pc, #84]	; (28660 <system_gclk_gen_get_hz+0xb8>)
   2860c:	4798      	blx	r3
   2860e:	1e03      	subs	r3, r0, #0
   28610:	d1fb      	bne.n	2860a <system_gclk_gen_get_hz+0x62>
		/* Wait for synchronization */
	};

	uint32_t divider = GCLK->GENDIV.bit.DIV;
   28612:	4b16      	ldr	r3, [pc, #88]	; (2866c <system_gclk_gen_get_hz+0xc4>)
   28614:	689b      	ldr	r3, [r3, #8]
   28616:	021b      	lsls	r3, r3, #8
   28618:	0c1b      	lsrs	r3, r3, #16
   2861a:	b29b      	uxth	r3, r3
   2861c:	60fb      	str	r3, [r7, #12]

	system_interrupt_leave_critical_section();
   2861e:	4b16      	ldr	r3, [pc, #88]	; (28678 <system_gclk_gen_get_hz+0xd0>)
   28620:	4798      	blx	r3

	/* Check if the generator is using fractional or binary division */
	if (!divsel && divider > 1) {
   28622:	2313      	movs	r3, #19
   28624:	18fb      	adds	r3, r7, r3
   28626:	781b      	ldrb	r3, [r3, #0]
   28628:	2b00      	cmp	r3, #0
   2862a:	d109      	bne.n	28640 <system_gclk_gen_get_hz+0x98>
   2862c:	68fb      	ldr	r3, [r7, #12]
   2862e:	2b01      	cmp	r3, #1
   28630:	d906      	bls.n	28640 <system_gclk_gen_get_hz+0x98>
		gen_input_hz /= divider;
   28632:	4b12      	ldr	r3, [pc, #72]	; (2867c <system_gclk_gen_get_hz+0xd4>)
   28634:	68f9      	ldr	r1, [r7, #12]
   28636:	6978      	ldr	r0, [r7, #20]
   28638:	4798      	blx	r3
   2863a:	0003      	movs	r3, r0
   2863c:	617b      	str	r3, [r7, #20]
   2863e:	e00a      	b.n	28656 <system_gclk_gen_get_hz+0xae>
	} else if (divsel) {
   28640:	2313      	movs	r3, #19
   28642:	18fb      	adds	r3, r7, r3
   28644:	781b      	ldrb	r3, [r3, #0]
   28646:	2b00      	cmp	r3, #0
   28648:	d005      	beq.n	28656 <system_gclk_gen_get_hz+0xae>
		gen_input_hz >>= (divider+1);
   2864a:	68fb      	ldr	r3, [r7, #12]
   2864c:	3301      	adds	r3, #1
   2864e:	697a      	ldr	r2, [r7, #20]
   28650:	40da      	lsrs	r2, r3
   28652:	0013      	movs	r3, r2
   28654:	617b      	str	r3, [r7, #20]
	}

	return gen_input_hz;
   28656:	697b      	ldr	r3, [r7, #20]
}
   28658:	0018      	movs	r0, r3
   2865a:	46bd      	mov	sp, r7
   2865c:	b006      	add	sp, #24
   2865e:	bd80      	pop	{r7, pc}
   28660:	000283d9 	.word	0x000283d9
   28664:	000283b1 	.word	0x000283b1
   28668:	40000c04 	.word	0x40000c04
   2866c:	40000c00 	.word	0x40000c00
   28670:	00027d09 	.word	0x00027d09
   28674:	40000c08 	.word	0x40000c08
   28678:	000283c5 	.word	0x000283c5
   2867c:	000310ed 	.word	0x000310ed

00028680 <system_gclk_chan_set_config>:
 *
 */
void system_gclk_chan_set_config(
		const uint8_t channel,
		struct system_gclk_chan_config *const config)
{
   28680:	b580      	push	{r7, lr}
   28682:	b084      	sub	sp, #16
   28684:	af00      	add	r7, sp, #0
   28686:	0002      	movs	r2, r0
   28688:	6039      	str	r1, [r7, #0]
   2868a:	1dfb      	adds	r3, r7, #7
   2868c:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(config);

	/* Cache the new config to reduce sync requirements */
	uint32_t new_clkctrl_config = (channel << GCLK_CLKCTRL_ID_Pos);
   2868e:	1dfb      	adds	r3, r7, #7
   28690:	781b      	ldrb	r3, [r3, #0]
   28692:	60fb      	str	r3, [r7, #12]

	/* Select the desired generic clock generator */
	new_clkctrl_config |= config->source_generator << GCLK_CLKCTRL_GEN_Pos;
   28694:	683b      	ldr	r3, [r7, #0]
   28696:	781b      	ldrb	r3, [r3, #0]
   28698:	021b      	lsls	r3, r3, #8
   2869a:	001a      	movs	r2, r3
   2869c:	68fb      	ldr	r3, [r7, #12]
   2869e:	4313      	orrs	r3, r2
   286a0:	60fb      	str	r3, [r7, #12]

	/* Disable generic clock channel */
	system_gclk_chan_disable(channel);
   286a2:	1dfb      	adds	r3, r7, #7
   286a4:	781b      	ldrb	r3, [r3, #0]
   286a6:	0018      	movs	r0, r3
   286a8:	4b04      	ldr	r3, [pc, #16]	; (286bc <system_gclk_chan_set_config+0x3c>)
   286aa:	4798      	blx	r3

	/* Write the new configuration */
	GCLK->CLKCTRL.reg = new_clkctrl_config;
   286ac:	4b04      	ldr	r3, [pc, #16]	; (286c0 <system_gclk_chan_set_config+0x40>)
   286ae:	68fa      	ldr	r2, [r7, #12]
   286b0:	b292      	uxth	r2, r2
   286b2:	805a      	strh	r2, [r3, #2]
}
   286b4:	46c0      	nop			; (mov r8, r8)
   286b6:	46bd      	mov	sp, r7
   286b8:	b004      	add	sp, #16
   286ba:	bd80      	pop	{r7, pc}
   286bc:	0002870d 	.word	0x0002870d
   286c0:	40000c00 	.word	0x40000c00

000286c4 <system_gclk_chan_enable>:
 *
 * \param[in] channel   Generic Clock channel to enable
 */
void system_gclk_chan_enable(
		const uint8_t channel)
{
   286c4:	b580      	push	{r7, lr}
   286c6:	b082      	sub	sp, #8
   286c8:	af00      	add	r7, sp, #0
   286ca:	0002      	movs	r2, r0
   286cc:	1dfb      	adds	r3, r7, #7
   286ce:	701a      	strb	r2, [r3, #0]
	system_interrupt_enter_critical_section();
   286d0:	4b0a      	ldr	r3, [pc, #40]	; (286fc <system_gclk_chan_enable+0x38>)
   286d2:	4798      	blx	r3

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
   286d4:	4a0a      	ldr	r2, [pc, #40]	; (28700 <system_gclk_chan_enable+0x3c>)
   286d6:	1dfb      	adds	r3, r7, #7
   286d8:	781b      	ldrb	r3, [r3, #0]
   286da:	7013      	strb	r3, [r2, #0]

	/* Enable the generic clock */
	GCLK->CLKCTRL.reg |= GCLK_CLKCTRL_CLKEN;
   286dc:	4909      	ldr	r1, [pc, #36]	; (28704 <system_gclk_chan_enable+0x40>)
   286de:	4b09      	ldr	r3, [pc, #36]	; (28704 <system_gclk_chan_enable+0x40>)
   286e0:	885b      	ldrh	r3, [r3, #2]
   286e2:	b29b      	uxth	r3, r3
   286e4:	2280      	movs	r2, #128	; 0x80
   286e6:	01d2      	lsls	r2, r2, #7
   286e8:	4313      	orrs	r3, r2
   286ea:	b29b      	uxth	r3, r3
   286ec:	804b      	strh	r3, [r1, #2]

	system_interrupt_leave_critical_section();
   286ee:	4b06      	ldr	r3, [pc, #24]	; (28708 <system_gclk_chan_enable+0x44>)
   286f0:	4798      	blx	r3
}
   286f2:	46c0      	nop			; (mov r8, r8)
   286f4:	46bd      	mov	sp, r7
   286f6:	b002      	add	sp, #8
   286f8:	bd80      	pop	{r7, pc}
   286fa:	46c0      	nop			; (mov r8, r8)
   286fc:	000283b1 	.word	0x000283b1
   28700:	40000c02 	.word	0x40000c02
   28704:	40000c00 	.word	0x40000c00
   28708:	000283c5 	.word	0x000283c5

0002870c <system_gclk_chan_disable>:
 *
 * \param[in] channel  Generic Clock channel to disable
 */
void system_gclk_chan_disable(
		const uint8_t channel)
{
   2870c:	b580      	push	{r7, lr}
   2870e:	b084      	sub	sp, #16
   28710:	af00      	add	r7, sp, #0
   28712:	0002      	movs	r2, r0
   28714:	1dfb      	adds	r3, r7, #7
   28716:	701a      	strb	r2, [r3, #0]
	system_interrupt_enter_critical_section();
   28718:	4b1c      	ldr	r3, [pc, #112]	; (2878c <system_gclk_chan_disable+0x80>)
   2871a:	4798      	blx	r3

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
   2871c:	4a1c      	ldr	r2, [pc, #112]	; (28790 <system_gclk_chan_disable+0x84>)
   2871e:	1dfb      	adds	r3, r7, #7
   28720:	781b      	ldrb	r3, [r3, #0]
   28722:	7013      	strb	r3, [r2, #0]

	/* Sanity check WRTLOCK */
	Assert(!GCLK->CLKCTRL.bit.WRTLOCK);

	/* Switch to known-working source so that the channel can be disabled */
	uint32_t prev_gen_id = GCLK->CLKCTRL.bit.GEN;
   28724:	4b1b      	ldr	r3, [pc, #108]	; (28794 <system_gclk_chan_disable+0x88>)
   28726:	885b      	ldrh	r3, [r3, #2]
   28728:	051b      	lsls	r3, r3, #20
   2872a:	0f1b      	lsrs	r3, r3, #28
   2872c:	b2db      	uxtb	r3, r3
   2872e:	60fb      	str	r3, [r7, #12]
	GCLK->CLKCTRL.bit.GEN = 0;
   28730:	4a18      	ldr	r2, [pc, #96]	; (28794 <system_gclk_chan_disable+0x88>)
   28732:	8853      	ldrh	r3, [r2, #2]
   28734:	4918      	ldr	r1, [pc, #96]	; (28798 <system_gclk_chan_disable+0x8c>)
   28736:	400b      	ands	r3, r1
   28738:	8053      	strh	r3, [r2, #2]

	/* Disable the generic clock */
	GCLK->CLKCTRL.reg &= ~GCLK_CLKCTRL_CLKEN;
   2873a:	4a16      	ldr	r2, [pc, #88]	; (28794 <system_gclk_chan_disable+0x88>)
   2873c:	4b15      	ldr	r3, [pc, #84]	; (28794 <system_gclk_chan_disable+0x88>)
   2873e:	885b      	ldrh	r3, [r3, #2]
   28740:	b29b      	uxth	r3, r3
   28742:	4916      	ldr	r1, [pc, #88]	; (2879c <system_gclk_chan_disable+0x90>)
   28744:	400b      	ands	r3, r1
   28746:	b29b      	uxth	r3, r3
   28748:	8053      	strh	r3, [r2, #2]
	while (GCLK->CLKCTRL.reg & GCLK_CLKCTRL_CLKEN) {
   2874a:	46c0      	nop			; (mov r8, r8)
   2874c:	4b11      	ldr	r3, [pc, #68]	; (28794 <system_gclk_chan_disable+0x88>)
   2874e:	885b      	ldrh	r3, [r3, #2]
   28750:	b29b      	uxth	r3, r3
   28752:	001a      	movs	r2, r3
   28754:	2380      	movs	r3, #128	; 0x80
   28756:	01db      	lsls	r3, r3, #7
   28758:	4013      	ands	r3, r2
   2875a:	d1f7      	bne.n	2874c <system_gclk_chan_disable+0x40>
		/* Wait for clock to become disabled */
	}

	/* Restore previous configured clock generator */
	GCLK->CLKCTRL.bit.GEN = prev_gen_id;
   2875c:	4a0d      	ldr	r2, [pc, #52]	; (28794 <system_gclk_chan_disable+0x88>)
   2875e:	68fb      	ldr	r3, [r7, #12]
   28760:	b2db      	uxtb	r3, r3
   28762:	1c19      	adds	r1, r3, #0
   28764:	230f      	movs	r3, #15
   28766:	400b      	ands	r3, r1
   28768:	b2d9      	uxtb	r1, r3
   2876a:	8853      	ldrh	r3, [r2, #2]
   2876c:	1c08      	adds	r0, r1, #0
   2876e:	210f      	movs	r1, #15
   28770:	4001      	ands	r1, r0
   28772:	0208      	lsls	r0, r1, #8
   28774:	4908      	ldr	r1, [pc, #32]	; (28798 <system_gclk_chan_disable+0x8c>)
   28776:	400b      	ands	r3, r1
   28778:	1c19      	adds	r1, r3, #0
   2877a:	1c03      	adds	r3, r0, #0
   2877c:	430b      	orrs	r3, r1
   2877e:	8053      	strh	r3, [r2, #2]

	system_interrupt_leave_critical_section();
   28780:	4b07      	ldr	r3, [pc, #28]	; (287a0 <system_gclk_chan_disable+0x94>)
   28782:	4798      	blx	r3
}
   28784:	46c0      	nop			; (mov r8, r8)
   28786:	46bd      	mov	sp, r7
   28788:	b004      	add	sp, #16
   2878a:	bd80      	pop	{r7, pc}
   2878c:	000283b1 	.word	0x000283b1
   28790:	40000c02 	.word	0x40000c02
   28794:	40000c00 	.word	0x40000c00
   28798:	fffff0ff 	.word	0xfffff0ff
   2879c:	ffffbfff 	.word	0xffffbfff
   287a0:	000283c5 	.word	0x000283c5

000287a4 <system_gclk_chan_get_hz>:
 *
 * \return The frequency of the generic clock channel, in Hz.
 */
uint32_t system_gclk_chan_get_hz(
		const uint8_t channel)
{
   287a4:	b580      	push	{r7, lr}
   287a6:	b084      	sub	sp, #16
   287a8:	af00      	add	r7, sp, #0
   287aa:	0002      	movs	r2, r0
   287ac:	1dfb      	adds	r3, r7, #7
   287ae:	701a      	strb	r2, [r3, #0]
	uint8_t gen_id;

	system_interrupt_enter_critical_section();
   287b0:	4b0d      	ldr	r3, [pc, #52]	; (287e8 <system_gclk_chan_get_hz+0x44>)
   287b2:	4798      	blx	r3

	/* Select the requested generic clock channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
   287b4:	4a0d      	ldr	r2, [pc, #52]	; (287ec <system_gclk_chan_get_hz+0x48>)
   287b6:	1dfb      	adds	r3, r7, #7
   287b8:	781b      	ldrb	r3, [r3, #0]
   287ba:	7013      	strb	r3, [r2, #0]
	gen_id = GCLK->CLKCTRL.bit.GEN;
   287bc:	4b0c      	ldr	r3, [pc, #48]	; (287f0 <system_gclk_chan_get_hz+0x4c>)
   287be:	885b      	ldrh	r3, [r3, #2]
   287c0:	051b      	lsls	r3, r3, #20
   287c2:	0f1b      	lsrs	r3, r3, #28
   287c4:	b2da      	uxtb	r2, r3
   287c6:	230f      	movs	r3, #15
   287c8:	18fb      	adds	r3, r7, r3
   287ca:	701a      	strb	r2, [r3, #0]

	system_interrupt_leave_critical_section();
   287cc:	4b09      	ldr	r3, [pc, #36]	; (287f4 <system_gclk_chan_get_hz+0x50>)
   287ce:	4798      	blx	r3

	/* Return the clock speed of the associated GCLK generator */
	return system_gclk_gen_get_hz(gen_id);
   287d0:	230f      	movs	r3, #15
   287d2:	18fb      	adds	r3, r7, r3
   287d4:	781b      	ldrb	r3, [r3, #0]
   287d6:	0018      	movs	r0, r3
   287d8:	4b07      	ldr	r3, [pc, #28]	; (287f8 <system_gclk_chan_get_hz+0x54>)
   287da:	4798      	blx	r3
   287dc:	0003      	movs	r3, r0
}
   287de:	0018      	movs	r0, r3
   287e0:	46bd      	mov	sp, r7
   287e2:	b004      	add	sp, #16
   287e4:	bd80      	pop	{r7, pc}
   287e6:	46c0      	nop			; (mov r8, r8)
   287e8:	000283b1 	.word	0x000283b1
   287ec:	40000c02 	.word	0x40000c02
   287f0:	40000c00 	.word	0x40000c00
   287f4:	000283c5 	.word	0x000283c5
   287f8:	000285a9 	.word	0x000285a9

000287fc <system_interrupt_clear_pending>:
 * \retval STATUS_OK           If no error was detected
 * \retval STATUS_INVALID_ARG  If an unsupported interrupt vector number was given
 */
enum status_code system_interrupt_clear_pending(
		const enum system_interrupt_vector vector)
{
   287fc:	b580      	push	{r7, lr}
   287fe:	b084      	sub	sp, #16
   28800:	af00      	add	r7, sp, #0
   28802:	0002      	movs	r2, r0
   28804:	1dfb      	adds	r3, r7, #7
   28806:	701a      	strb	r2, [r3, #0]
	enum status_code status = STATUS_OK;
   28808:	230f      	movs	r3, #15
   2880a:	18fb      	adds	r3, r7, r3
   2880c:	2200      	movs	r2, #0
   2880e:	701a      	strb	r2, [r3, #0]

	if (vector >= _SYSTEM_INTERRUPT_EXTERNAL_VECTOR_START) {
   28810:	1dfb      	adds	r3, r7, #7
   28812:	781b      	ldrb	r3, [r3, #0]
   28814:	2b7f      	cmp	r3, #127	; 0x7f
   28816:	d80b      	bhi.n	28830 <system_interrupt_clear_pending+0x34>
		NVIC->ICPR[0] = (1 << vector);
   28818:	4a13      	ldr	r2, [pc, #76]	; (28868 <system_interrupt_clear_pending+0x6c>)
   2881a:	1dfb      	adds	r3, r7, #7
   2881c:	781b      	ldrb	r3, [r3, #0]
   2881e:	b25b      	sxtb	r3, r3
   28820:	2101      	movs	r1, #1
   28822:	4099      	lsls	r1, r3
   28824:	000b      	movs	r3, r1
   28826:	0019      	movs	r1, r3
   28828:	23c0      	movs	r3, #192	; 0xc0
   2882a:	005b      	lsls	r3, r3, #1
   2882c:	50d1      	str	r1, [r2, r3]
   2882e:	e014      	b.n	2885a <system_interrupt_clear_pending+0x5e>
	} else if (vector == SYSTEM_INTERRUPT_NON_MASKABLE) {
   28830:	1dfb      	adds	r3, r7, #7
   28832:	781b      	ldrb	r3, [r3, #0]
   28834:	b25b      	sxtb	r3, r3
   28836:	330e      	adds	r3, #14
   28838:	d101      	bne.n	2883e <system_interrupt_clear_pending+0x42>
		/* Note: Clearing of NMI pending interrupts does not make sense and is
		 * not supported by the device, as it has the highest priority and will
		 * always be executed at the moment it is set */
		return STATUS_ERR_INVALID_ARG;
   2883a:	2317      	movs	r3, #23
   2883c:	e010      	b.n	28860 <system_interrupt_clear_pending+0x64>
	} else if (vector == SYSTEM_INTERRUPT_SYSTICK) {
   2883e:	1dfb      	adds	r3, r7, #7
   28840:	781b      	ldrb	r3, [r3, #0]
   28842:	b25b      	sxtb	r3, r3
   28844:	3301      	adds	r3, #1
   28846:	d104      	bne.n	28852 <system_interrupt_clear_pending+0x56>
		SCB->ICSR = SCB_ICSR_PENDSTCLR_Msk;
   28848:	4b08      	ldr	r3, [pc, #32]	; (2886c <system_interrupt_clear_pending+0x70>)
   2884a:	2280      	movs	r2, #128	; 0x80
   2884c:	0492      	lsls	r2, r2, #18
   2884e:	605a      	str	r2, [r3, #4]
   28850:	e003      	b.n	2885a <system_interrupt_clear_pending+0x5e>
	} else {
		Assert(false);
		status = STATUS_ERR_INVALID_ARG;
   28852:	230f      	movs	r3, #15
   28854:	18fb      	adds	r3, r7, r3
   28856:	2217      	movs	r2, #23
   28858:	701a      	strb	r2, [r3, #0]
	}

	return status;
   2885a:	230f      	movs	r3, #15
   2885c:	18fb      	adds	r3, r7, r3
   2885e:	781b      	ldrb	r3, [r3, #0]
}
   28860:	0018      	movs	r0, r3
   28862:	46bd      	mov	sp, r7
   28864:	b004      	add	sp, #16
   28866:	bd80      	pop	{r7, pc}
   28868:	e000e100 	.word	0xe000e100
   2886c:	e000ed00 	.word	0xe000ed00

00028870 <system_pinmux_get_group_from_gpio_pin>:
{
   28870:	b580      	push	{r7, lr}
   28872:	b084      	sub	sp, #16
   28874:	af00      	add	r7, sp, #0
   28876:	0002      	movs	r2, r0
   28878:	1dfb      	adds	r3, r7, #7
   2887a:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
   2887c:	230f      	movs	r3, #15
   2887e:	18fb      	adds	r3, r7, r3
   28880:	1dfa      	adds	r2, r7, #7
   28882:	7812      	ldrb	r2, [r2, #0]
   28884:	09d2      	lsrs	r2, r2, #7
   28886:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
   28888:	230e      	movs	r3, #14
   2888a:	18fb      	adds	r3, r7, r3
   2888c:	1dfa      	adds	r2, r7, #7
   2888e:	7812      	ldrb	r2, [r2, #0]
   28890:	0952      	lsrs	r2, r2, #5
   28892:	701a      	strb	r2, [r3, #0]
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
   28894:	4b0d      	ldr	r3, [pc, #52]	; (288cc <system_pinmux_get_group_from_gpio_pin+0x5c>)
   28896:	60bb      	str	r3, [r7, #8]
	if (port_index < PORT_INST_NUM) {
   28898:	230f      	movs	r3, #15
   2889a:	18fb      	adds	r3, r7, r3
   2889c:	781b      	ldrb	r3, [r3, #0]
   2889e:	2b00      	cmp	r3, #0
   288a0:	d10f      	bne.n	288c2 <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
   288a2:	230f      	movs	r3, #15
   288a4:	18fb      	adds	r3, r7, r3
   288a6:	781b      	ldrb	r3, [r3, #0]
   288a8:	009b      	lsls	r3, r3, #2
   288aa:	2210      	movs	r2, #16
   288ac:	4694      	mov	ip, r2
   288ae:	44bc      	add	ip, r7
   288b0:	4463      	add	r3, ip
   288b2:	3b08      	subs	r3, #8
   288b4:	681a      	ldr	r2, [r3, #0]
   288b6:	230e      	movs	r3, #14
   288b8:	18fb      	adds	r3, r7, r3
   288ba:	781b      	ldrb	r3, [r3, #0]
   288bc:	01db      	lsls	r3, r3, #7
   288be:	18d3      	adds	r3, r2, r3
   288c0:	e000      	b.n	288c4 <system_pinmux_get_group_from_gpio_pin+0x54>
		return NULL;
   288c2:	2300      	movs	r3, #0
}
   288c4:	0018      	movs	r0, r3
   288c6:	46bd      	mov	sp, r7
   288c8:	b004      	add	sp, #16
   288ca:	bd80      	pop	{r7, pc}
   288cc:	41004400 	.word	0x41004400

000288d0 <_system_pinmux_config>:
 */
static void _system_pinmux_config(
		PortGroup *const port,
		const uint32_t pin_mask,
		const struct system_pinmux_config *const config)
{
   288d0:	b580      	push	{r7, lr}
   288d2:	b088      	sub	sp, #32
   288d4:	af00      	add	r7, sp, #0
   288d6:	60f8      	str	r0, [r7, #12]
   288d8:	60b9      	str	r1, [r7, #8]
   288da:	607a      	str	r2, [r7, #4]
	Assert(port);
	Assert(config);

	/* Track the configuration bits into a temporary variable before writing */
	uint32_t pin_cfg = 0;
   288dc:	2300      	movs	r3, #0
   288de:	61fb      	str	r3, [r7, #28]

	/* Enabled powersave mode, don't create configuration */
	if (!config->powersave) {
   288e0:	687b      	ldr	r3, [r7, #4]
   288e2:	78db      	ldrb	r3, [r3, #3]
   288e4:	2201      	movs	r2, #1
   288e6:	4053      	eors	r3, r2
   288e8:	b2db      	uxtb	r3, r3
   288ea:	2b00      	cmp	r3, #0
   288ec:	d035      	beq.n	2895a <_system_pinmux_config+0x8a>
		/* Enable the pin peripheral MUX flag if non-GPIO selected (pinmux will
		 * be written later) and store the new MUX mask */
		if (config->mux_position != SYSTEM_PINMUX_GPIO) {
   288ee:	687b      	ldr	r3, [r7, #4]
   288f0:	781b      	ldrb	r3, [r3, #0]
   288f2:	2b80      	cmp	r3, #128	; 0x80
   288f4:	d00b      	beq.n	2890e <_system_pinmux_config+0x3e>
			pin_cfg |= PORT_WRCONFIG_PMUXEN;
   288f6:	69fb      	ldr	r3, [r7, #28]
   288f8:	2280      	movs	r2, #128	; 0x80
   288fa:	0252      	lsls	r2, r2, #9
   288fc:	4313      	orrs	r3, r2
   288fe:	61fb      	str	r3, [r7, #28]
			pin_cfg |= (config->mux_position << PORT_WRCONFIG_PMUX_Pos);
   28900:	687b      	ldr	r3, [r7, #4]
   28902:	781b      	ldrb	r3, [r3, #0]
   28904:	061b      	lsls	r3, r3, #24
   28906:	001a      	movs	r2, r3
   28908:	69fb      	ldr	r3, [r7, #28]
   2890a:	4313      	orrs	r3, r2
   2890c:	61fb      	str	r3, [r7, #28]
		}

		/* Check if the user has requested that the input buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
   2890e:	687b      	ldr	r3, [r7, #4]
   28910:	785b      	ldrb	r3, [r3, #1]
   28912:	2b00      	cmp	r3, #0
   28914:	d003      	beq.n	2891e <_system_pinmux_config+0x4e>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
   28916:	687b      	ldr	r3, [r7, #4]
   28918:	785b      	ldrb	r3, [r3, #1]
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
   2891a:	2b02      	cmp	r3, #2
   2891c:	d110      	bne.n	28940 <_system_pinmux_config+0x70>
			/* Enable input buffer flag */
			pin_cfg |= PORT_WRCONFIG_INEN;
   2891e:	69fb      	ldr	r3, [r7, #28]
   28920:	2280      	movs	r2, #128	; 0x80
   28922:	0292      	lsls	r2, r2, #10
   28924:	4313      	orrs	r3, r2
   28926:	61fb      	str	r3, [r7, #28]

			/* Enable pull-up/pull-down control flag if requested */
			if (config->input_pull != SYSTEM_PINMUX_PIN_PULL_NONE) {
   28928:	687b      	ldr	r3, [r7, #4]
   2892a:	789b      	ldrb	r3, [r3, #2]
   2892c:	2b00      	cmp	r3, #0
   2892e:	d004      	beq.n	2893a <_system_pinmux_config+0x6a>
				pin_cfg |= PORT_WRCONFIG_PULLEN;
   28930:	69fb      	ldr	r3, [r7, #28]
   28932:	2280      	movs	r2, #128	; 0x80
   28934:	02d2      	lsls	r2, r2, #11
   28936:	4313      	orrs	r3, r2
   28938:	61fb      	str	r3, [r7, #28]
			}

			/* Clear the port DIR bits to disable the output buffer */
			port->DIRCLR.reg = pin_mask;
   2893a:	68fb      	ldr	r3, [r7, #12]
   2893c:	68ba      	ldr	r2, [r7, #8]
   2893e:	605a      	str	r2, [r3, #4]
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
   28940:	687b      	ldr	r3, [r7, #4]
   28942:	785b      	ldrb	r3, [r3, #1]
   28944:	2b01      	cmp	r3, #1
   28946:	d003      	beq.n	28950 <_system_pinmux_config+0x80>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
   28948:	687b      	ldr	r3, [r7, #4]
   2894a:	785b      	ldrb	r3, [r3, #1]
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
   2894c:	2b02      	cmp	r3, #2
   2894e:	d107      	bne.n	28960 <_system_pinmux_config+0x90>
			/* Cannot use a pull-up if the output driver is enabled,
			 * if requested the input buffer can only sample the current
			 * output state */
			pin_cfg &= ~PORT_WRCONFIG_PULLEN;
   28950:	69fb      	ldr	r3, [r7, #28]
   28952:	4a22      	ldr	r2, [pc, #136]	; (289dc <_system_pinmux_config+0x10c>)
   28954:	4013      	ands	r3, r2
   28956:	61fb      	str	r3, [r7, #28]
   28958:	e002      	b.n	28960 <_system_pinmux_config+0x90>
		}
	} else {
		port->DIRCLR.reg = pin_mask;
   2895a:	68fb      	ldr	r3, [r7, #12]
   2895c:	68ba      	ldr	r2, [r7, #8]
   2895e:	605a      	str	r2, [r3, #4]
	}

	/* The Write Configuration register (WRCONFIG) requires the
	 * pins to to grouped into two 16-bit half-words - split them out here */
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
   28960:	68bb      	ldr	r3, [r7, #8]
   28962:	041b      	lsls	r3, r3, #16
   28964:	0c1b      	lsrs	r3, r3, #16
   28966:	61bb      	str	r3, [r7, #24]
	uint32_t upper_pin_mask = (pin_mask >> 16);
   28968:	68bb      	ldr	r3, [r7, #8]
   2896a:	0c1b      	lsrs	r3, r3, #16
   2896c:	617b      	str	r3, [r7, #20]

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
   2896e:	69ba      	ldr	r2, [r7, #24]
   28970:	69fb      	ldr	r3, [r7, #28]
   28972:	4313      	orrs	r3, r2
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
   28974:	22a0      	movs	r2, #160	; 0xa0
   28976:	05d2      	lsls	r2, r2, #23
   28978:	431a      	orrs	r2, r3
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
   2897a:	68fb      	ldr	r3, [r7, #12]
   2897c:	629a      	str	r2, [r3, #40]	; 0x28

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
   2897e:	697a      	ldr	r2, [r7, #20]
   28980:	69fb      	ldr	r3, [r7, #28]
   28982:	4313      	orrs	r3, r2
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
   28984:	22d0      	movs	r2, #208	; 0xd0
   28986:	0612      	lsls	r2, r2, #24
   28988:	431a      	orrs	r2, r3
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
   2898a:	68fb      	ldr	r3, [r7, #12]
   2898c:	629a      	str	r2, [r3, #40]	; 0x28
			PORT_WRCONFIG_HWSEL;

	if(!config->powersave) {
   2898e:	687b      	ldr	r3, [r7, #4]
   28990:	78db      	ldrb	r3, [r3, #3]
   28992:	2201      	movs	r2, #1
   28994:	4053      	eors	r3, r2
   28996:	b2db      	uxtb	r3, r3
   28998:	2b00      	cmp	r3, #0
   2899a:	d01a      	beq.n	289d2 <_system_pinmux_config+0x102>
		/* Set the pull-up state once the port pins are configured if one was
		 * requested and it does not violate the valid set of port
		 * configurations */
		if (pin_cfg & PORT_WRCONFIG_PULLEN) {
   2899c:	69fa      	ldr	r2, [r7, #28]
   2899e:	2380      	movs	r3, #128	; 0x80
   289a0:	02db      	lsls	r3, r3, #11
   289a2:	4013      	ands	r3, r2
   289a4:	d00a      	beq.n	289bc <_system_pinmux_config+0xec>
			/* Set the OUT register bits to enable the pull-up if requested,
			 * clear to enable pull-down */
			if (config->input_pull == SYSTEM_PINMUX_PIN_PULL_UP) {
   289a6:	687b      	ldr	r3, [r7, #4]
   289a8:	789b      	ldrb	r3, [r3, #2]
   289aa:	2b01      	cmp	r3, #1
   289ac:	d103      	bne.n	289b6 <_system_pinmux_config+0xe6>
				port->OUTSET.reg = pin_mask;
   289ae:	68fb      	ldr	r3, [r7, #12]
   289b0:	68ba      	ldr	r2, [r7, #8]
   289b2:	619a      	str	r2, [r3, #24]
   289b4:	e002      	b.n	289bc <_system_pinmux_config+0xec>
			} else {
				port->OUTCLR.reg = pin_mask;
   289b6:	68fb      	ldr	r3, [r7, #12]
   289b8:	68ba      	ldr	r2, [r7, #8]
   289ba:	615a      	str	r2, [r3, #20]
			}
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
   289bc:	687b      	ldr	r3, [r7, #4]
   289be:	785b      	ldrb	r3, [r3, #1]
   289c0:	2b01      	cmp	r3, #1
   289c2:	d003      	beq.n	289cc <_system_pinmux_config+0xfc>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
   289c4:	687b      	ldr	r3, [r7, #4]
   289c6:	785b      	ldrb	r3, [r3, #1]
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
   289c8:	2b02      	cmp	r3, #2
   289ca:	d102      	bne.n	289d2 <_system_pinmux_config+0x102>
			/* Set the port DIR bits to enable the output buffer */
			port->DIRSET.reg = pin_mask;
   289cc:	68fb      	ldr	r3, [r7, #12]
   289ce:	68ba      	ldr	r2, [r7, #8]
   289d0:	609a      	str	r2, [r3, #8]
		}
	}
}
   289d2:	46c0      	nop			; (mov r8, r8)
   289d4:	46bd      	mov	sp, r7
   289d6:	b008      	add	sp, #32
   289d8:	bd80      	pop	{r7, pc}
   289da:	46c0      	nop			; (mov r8, r8)
   289dc:	fffbffff 	.word	0xfffbffff

000289e0 <system_pinmux_pin_set_config>:
 * \param[in] config    Configuration settings for the pin
 */
void system_pinmux_pin_set_config(
		const uint8_t gpio_pin,
		const struct system_pinmux_config *const config)
{
   289e0:	b580      	push	{r7, lr}
   289e2:	b084      	sub	sp, #16
   289e4:	af00      	add	r7, sp, #0
   289e6:	0002      	movs	r2, r0
   289e8:	6039      	str	r1, [r7, #0]
   289ea:	1dfb      	adds	r3, r7, #7
   289ec:	701a      	strb	r2, [r3, #0]
	PortGroup *const port = system_pinmux_get_group_from_gpio_pin(gpio_pin);
   289ee:	1dfb      	adds	r3, r7, #7
   289f0:	781b      	ldrb	r3, [r3, #0]
   289f2:	0018      	movs	r0, r3
   289f4:	4b0a      	ldr	r3, [pc, #40]	; (28a20 <system_pinmux_pin_set_config+0x40>)
   289f6:	4798      	blx	r3
   289f8:	0003      	movs	r3, r0
   289fa:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask = (1UL << (gpio_pin % 32));
   289fc:	1dfb      	adds	r3, r7, #7
   289fe:	781b      	ldrb	r3, [r3, #0]
   28a00:	221f      	movs	r2, #31
   28a02:	4013      	ands	r3, r2
   28a04:	2201      	movs	r2, #1
   28a06:	409a      	lsls	r2, r3
   28a08:	0013      	movs	r3, r2
   28a0a:	60bb      	str	r3, [r7, #8]

	_system_pinmux_config(port, pin_mask, config);
   28a0c:	683a      	ldr	r2, [r7, #0]
   28a0e:	68b9      	ldr	r1, [r7, #8]
   28a10:	68fb      	ldr	r3, [r7, #12]
   28a12:	0018      	movs	r0, r3
   28a14:	4b03      	ldr	r3, [pc, #12]	; (28a24 <system_pinmux_pin_set_config+0x44>)
   28a16:	4798      	blx	r3
}
   28a18:	46c0      	nop			; (mov r8, r8)
   28a1a:	46bd      	mov	sp, r7
   28a1c:	b004      	add	sp, #16
   28a1e:	bd80      	pop	{r7, pc}
   28a20:	00028871 	.word	0x00028871
   28a24:	000288d1 	.word	0x000288d1

00028a28 <_system_dummy_init>:
 * Dummy initialization function, used as a weak alias target for the various
 * init functions called by \ref system_init().
 */
void _system_dummy_init(void);
void _system_dummy_init(void)
{
   28a28:	b580      	push	{r7, lr}
   28a2a:	af00      	add	r7, sp, #0
	return;
   28a2c:	46c0      	nop			; (mov r8, r8)
}
   28a2e:	46bd      	mov	sp, r7
   28a30:	bd80      	pop	{r7, pc}
	...

00028a34 <system_init>:
 *  - Board hardware initialization (via the Board module)
 *  - Event system driver initialization (via the EVSYS module)
 *  - External Interrupt driver initialization (via the EXTINT module)
 */
void system_init(void)
{
   28a34:	b580      	push	{r7, lr}
   28a36:	af00      	add	r7, sp, #0
	/* Configure GCLK and clock sources according to conf_clocks.h */
	system_clock_init();
   28a38:	4b06      	ldr	r3, [pc, #24]	; (28a54 <system_init+0x20>)
   28a3a:	4798      	blx	r3

	/* Initialize board hardware */
	system_board_init();
   28a3c:	4b06      	ldr	r3, [pc, #24]	; (28a58 <system_init+0x24>)
   28a3e:	4798      	blx	r3

	/* Initialize EVSYS hardware */
	_system_events_init();
   28a40:	4b06      	ldr	r3, [pc, #24]	; (28a5c <system_init+0x28>)
   28a42:	4798      	blx	r3

	/* Initialize External hardware */
	_system_extint_init();
   28a44:	4b06      	ldr	r3, [pc, #24]	; (28a60 <system_init+0x2c>)
   28a46:	4798      	blx	r3
	
	/* Initialize DIVAS hardware */
	_system_divas_init();
   28a48:	4b06      	ldr	r3, [pc, #24]	; (28a64 <system_init+0x30>)
   28a4a:	4798      	blx	r3
}
   28a4c:	46c0      	nop			; (mov r8, r8)
   28a4e:	46bd      	mov	sp, r7
   28a50:	bd80      	pop	{r7, pc}
   28a52:	46c0      	nop			; (mov r8, r8)
   28a54:	000280b5 	.word	0x000280b5
   28a58:	00024b7d 	.word	0x00024b7d
   28a5c:	00012669 	.word	0x00012669
   28a60:	00024f55 	.word	0x00024f55
   28a64:	00028a29 	.word	0x00028a29

00028a68 <system_gclk_chan_get_config_defaults>:
{
   28a68:	b580      	push	{r7, lr}
   28a6a:	b082      	sub	sp, #8
   28a6c:	af00      	add	r7, sp, #0
   28a6e:	6078      	str	r0, [r7, #4]
	config->source_generator = GCLK_GENERATOR_0;
   28a70:	687b      	ldr	r3, [r7, #4]
   28a72:	2200      	movs	r2, #0
   28a74:	701a      	strb	r2, [r3, #0]
}
   28a76:	46c0      	nop			; (mov r8, r8)
   28a78:	46bd      	mov	sp, r7
   28a7a:	b002      	add	sp, #8
   28a7c:	bd80      	pop	{r7, pc}
	...

00028a80 <system_apb_clock_set_mask>:
{
   28a80:	b580      	push	{r7, lr}
   28a82:	b082      	sub	sp, #8
   28a84:	af00      	add	r7, sp, #0
   28a86:	0002      	movs	r2, r0
   28a88:	6039      	str	r1, [r7, #0]
   28a8a:	1dfb      	adds	r3, r7, #7
   28a8c:	701a      	strb	r2, [r3, #0]
	switch (bus) {
   28a8e:	1dfb      	adds	r3, r7, #7
   28a90:	781b      	ldrb	r3, [r3, #0]
   28a92:	2b01      	cmp	r3, #1
   28a94:	d00a      	beq.n	28aac <system_apb_clock_set_mask+0x2c>
   28a96:	2b02      	cmp	r3, #2
   28a98:	d00f      	beq.n	28aba <system_apb_clock_set_mask+0x3a>
   28a9a:	2b00      	cmp	r3, #0
   28a9c:	d114      	bne.n	28ac8 <system_apb_clock_set_mask+0x48>
			PM->APBAMASK.reg |= mask;
   28a9e:	4b0e      	ldr	r3, [pc, #56]	; (28ad8 <system_apb_clock_set_mask+0x58>)
   28aa0:	4a0d      	ldr	r2, [pc, #52]	; (28ad8 <system_apb_clock_set_mask+0x58>)
   28aa2:	6991      	ldr	r1, [r2, #24]
   28aa4:	683a      	ldr	r2, [r7, #0]
   28aa6:	430a      	orrs	r2, r1
   28aa8:	619a      	str	r2, [r3, #24]
			break;
   28aaa:	e00f      	b.n	28acc <system_apb_clock_set_mask+0x4c>
			PM->APBBMASK.reg |= mask;
   28aac:	4b0a      	ldr	r3, [pc, #40]	; (28ad8 <system_apb_clock_set_mask+0x58>)
   28aae:	4a0a      	ldr	r2, [pc, #40]	; (28ad8 <system_apb_clock_set_mask+0x58>)
   28ab0:	69d1      	ldr	r1, [r2, #28]
   28ab2:	683a      	ldr	r2, [r7, #0]
   28ab4:	430a      	orrs	r2, r1
   28ab6:	61da      	str	r2, [r3, #28]
			break;
   28ab8:	e008      	b.n	28acc <system_apb_clock_set_mask+0x4c>
			PM->APBCMASK.reg |= mask;
   28aba:	4b07      	ldr	r3, [pc, #28]	; (28ad8 <system_apb_clock_set_mask+0x58>)
   28abc:	4a06      	ldr	r2, [pc, #24]	; (28ad8 <system_apb_clock_set_mask+0x58>)
   28abe:	6a11      	ldr	r1, [r2, #32]
   28ac0:	683a      	ldr	r2, [r7, #0]
   28ac2:	430a      	orrs	r2, r1
   28ac4:	621a      	str	r2, [r3, #32]
			break;
   28ac6:	e001      	b.n	28acc <system_apb_clock_set_mask+0x4c>
			return STATUS_ERR_INVALID_ARG;
   28ac8:	2317      	movs	r3, #23
   28aca:	e000      	b.n	28ace <system_apb_clock_set_mask+0x4e>
	return STATUS_OK;
   28acc:	2300      	movs	r3, #0
}
   28ace:	0018      	movs	r0, r3
   28ad0:	46bd      	mov	sp, r7
   28ad2:	b002      	add	sp, #8
   28ad4:	bd80      	pop	{r7, pc}
   28ad6:	46c0      	nop			; (mov r8, r8)
   28ad8:	40000400 	.word	0x40000400

00028adc <system_pinmux_get_config_defaults>:
{
   28adc:	b580      	push	{r7, lr}
   28ade:	b082      	sub	sp, #8
   28ae0:	af00      	add	r7, sp, #0
   28ae2:	6078      	str	r0, [r7, #4]
	config->mux_position = SYSTEM_PINMUX_GPIO;
   28ae4:	687b      	ldr	r3, [r7, #4]
   28ae6:	2280      	movs	r2, #128	; 0x80
   28ae8:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
   28aea:	687b      	ldr	r3, [r7, #4]
   28aec:	2200      	movs	r2, #0
   28aee:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
   28af0:	687b      	ldr	r3, [r7, #4]
   28af2:	2201      	movs	r2, #1
   28af4:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
   28af6:	687b      	ldr	r3, [r7, #4]
   28af8:	2200      	movs	r2, #0
   28afa:	70da      	strb	r2, [r3, #3]
}
   28afc:	46c0      	nop			; (mov r8, r8)
   28afe:	46bd      	mov	sp, r7
   28b00:	b002      	add	sp, #8
   28b02:	bd80      	pop	{r7, pc}

00028b04 <_tcc_get_inst_index>:
 *
 * \return Index of the given TCC module instance.
 */
uint8_t _tcc_get_inst_index(
		Tcc *const hw)
{
   28b04:	b580      	push	{r7, lr}
   28b06:	b084      	sub	sp, #16
   28b08:	af00      	add	r7, sp, #0
   28b0a:	6078      	str	r0, [r7, #4]
	/* Find index for TCC instance. */
	for (uint32_t i = 0; i < TCC_INST_NUM; i++) {
   28b0c:	2300      	movs	r3, #0
   28b0e:	60fb      	str	r3, [r7, #12]
   28b10:	e00c      	b.n	28b2c <_tcc_get_inst_index+0x28>
		if (hw == tcc_modules[i]) {
   28b12:	4b0a      	ldr	r3, [pc, #40]	; (28b3c <_tcc_get_inst_index+0x38>)
   28b14:	68fa      	ldr	r2, [r7, #12]
   28b16:	0092      	lsls	r2, r2, #2
   28b18:	58d2      	ldr	r2, [r2, r3]
   28b1a:	687b      	ldr	r3, [r7, #4]
   28b1c:	429a      	cmp	r2, r3
   28b1e:	d102      	bne.n	28b26 <_tcc_get_inst_index+0x22>
			return i;
   28b20:	68fb      	ldr	r3, [r7, #12]
   28b22:	b2db      	uxtb	r3, r3
   28b24:	e006      	b.n	28b34 <_tcc_get_inst_index+0x30>
	for (uint32_t i = 0; i < TCC_INST_NUM; i++) {
   28b26:	68fb      	ldr	r3, [r7, #12]
   28b28:	3301      	adds	r3, #1
   28b2a:	60fb      	str	r3, [r7, #12]
   28b2c:	68fb      	ldr	r3, [r7, #12]
   28b2e:	2b02      	cmp	r3, #2
   28b30:	d9ef      	bls.n	28b12 <_tcc_get_inst_index+0xe>
		}
	}

	/* Invalid data given. */
	Assert(false);
	return 0;
   28b32:	2300      	movs	r3, #0
}
   28b34:	0018      	movs	r0, r3
   28b36:	46bd      	mov	sp, r7
   28b38:	b004      	add	sp, #16
   28b3a:	bd80      	pop	{r7, pc}
   28b3c:	000379b4 	.word	0x000379b4

00028b40 <tcc_get_config_defaults>:
 *
 */
void tcc_get_config_defaults(
		struct tcc_config *const config,
		Tcc *const hw)
{
   28b40:	b590      	push	{r4, r7, lr}
   28b42:	b085      	sub	sp, #20
   28b44:	af00      	add	r7, sp, #0
   28b46:	6078      	str	r0, [r7, #4]
   28b48:	6039      	str	r1, [r7, #0]
	/* TCC instance index */
	uint8_t module_index = _tcc_get_inst_index(hw);
   28b4a:	230f      	movs	r3, #15
   28b4c:	18fc      	adds	r4, r7, r3
   28b4e:	683b      	ldr	r3, [r7, #0]
   28b50:	0018      	movs	r0, r3
   28b52:	4bad      	ldr	r3, [pc, #692]	; (28e08 <tcc_get_config_defaults+0x2c8>)
   28b54:	4798      	blx	r3
   28b56:	0003      	movs	r3, r0
   28b58:	7023      	strb	r3, [r4, #0]

	/* Base counter defaults */
	config->counter.count                  = 0;
   28b5a:	687b      	ldr	r3, [r7, #4]
   28b5c:	2200      	movs	r2, #0
   28b5e:	601a      	str	r2, [r3, #0]

	config->counter.period                 = _tcc_maxs[module_index];
   28b60:	230f      	movs	r3, #15
   28b62:	18fb      	adds	r3, r7, r3
   28b64:	781a      	ldrb	r2, [r3, #0]
   28b66:	4ba9      	ldr	r3, [pc, #676]	; (28e0c <tcc_get_config_defaults+0x2cc>)
   28b68:	0092      	lsls	r2, r2, #2
   28b6a:	58d2      	ldr	r2, [r2, r3]
   28b6c:	687b      	ldr	r3, [r7, #4]
   28b6e:	605a      	str	r2, [r3, #4]

	config->counter.clock_source           = GCLK_GENERATOR_0;
   28b70:	687b      	ldr	r3, [r7, #4]
   28b72:	2200      	movs	r2, #0
   28b74:	729a      	strb	r2, [r3, #10]
	config->counter.clock_prescaler        = TCC_CLOCK_PRESCALER_DIV1;
   28b76:	687b      	ldr	r3, [r7, #4]
   28b78:	2200      	movs	r2, #0
   28b7a:	72da      	strb	r2, [r3, #11]
	config->counter.reload_action          = TCC_RELOAD_ACTION_GCLK;
   28b7c:	687b      	ldr	r3, [r7, #4]
   28b7e:	2200      	movs	r2, #0
   28b80:	731a      	strb	r2, [r3, #12]

	config->counter.direction              = TCC_COUNT_DIRECTION_UP;
   28b82:	687b      	ldr	r3, [r7, #4]
   28b84:	2200      	movs	r2, #0
   28b86:	725a      	strb	r2, [r3, #9]
	config->counter.oneshot                = false;
   28b88:	687b      	ldr	r3, [r7, #4]
   28b8a:	2200      	movs	r2, #0
   28b8c:	721a      	strb	r2, [r3, #8]
#endif

	/* Match/Capture defaults */
#  define _TCC_CHANNEL_MATCH_VALUE_INIT(n, value) \
		config->compare.match[n] = value;
	MREPEAT(TCC_NUM_CHANNELS,
   28b8e:	687b      	ldr	r3, [r7, #4]
   28b90:	2200      	movs	r2, #0
   28b92:	61da      	str	r2, [r3, #28]
   28b94:	687b      	ldr	r3, [r7, #4]
   28b96:	2200      	movs	r2, #0
   28b98:	621a      	str	r2, [r3, #32]
   28b9a:	687b      	ldr	r3, [r7, #4]
   28b9c:	2200      	movs	r2, #0
   28b9e:	625a      	str	r2, [r3, #36]	; 0x24
   28ba0:	687b      	ldr	r3, [r7, #4]
   28ba2:	2200      	movs	r2, #0
   28ba4:	629a      	str	r2, [r3, #40]	; 0x28
#  undef _TCC_CHANNEL_MATCH_VALUE_INIT

	/* Wave polarity defaults */
#  define _TCC_CHANNEL_WAVE_POLARITY_INIT(n, value) \
		config->compare.wave_polarity[n] = value;
	MREPEAT(TCC_NUM_CHANNELS,
   28ba6:	687b      	ldr	r3, [r7, #4]
   28ba8:	2200      	movs	r2, #0
   28baa:	751a      	strb	r2, [r3, #20]
   28bac:	687b      	ldr	r3, [r7, #4]
   28bae:	2200      	movs	r2, #0
   28bb0:	755a      	strb	r2, [r3, #21]
   28bb2:	687b      	ldr	r3, [r7, #4]
   28bb4:	2200      	movs	r2, #0
   28bb6:	759a      	strb	r2, [r3, #22]
   28bb8:	687b      	ldr	r3, [r7, #4]
   28bba:	2200      	movs	r2, #0
   28bbc:	75da      	strb	r2, [r3, #23]
		_TCC_CHANNEL_WAVE_POLARITY_INIT, TCC_WAVE_POLARITY_0)
#  undef _TCC_CHANNEL_WAVE_POLARITY_INIT

	config->compare.wave_generation = TCC_WAVE_GENERATION_NORMAL_FREQ;
   28bbe:	687b      	ldr	r3, [r7, #4]
   28bc0:	2200      	movs	r2, #0
   28bc2:	761a      	strb	r2, [r3, #24]
	config->compare.wave_ramp       = TCC_RAMP_RAMP1;
   28bc4:	687b      	ldr	r3, [r7, #4]
   28bc6:	2200      	movs	r2, #0
   28bc8:	765a      	strb	r2, [r3, #25]

#  define _TCC_CHANNEL_FUNCTION_INIT(n, value) \
		config->compare.channel_function[n] = value;
	MREPEAT(TCC_NUM_CHANNELS,
   28bca:	687b      	ldr	r3, [r7, #4]
   28bcc:	2200      	movs	r2, #0
   28bce:	741a      	strb	r2, [r3, #16]
   28bd0:	687b      	ldr	r3, [r7, #4]
   28bd2:	2200      	movs	r2, #0
   28bd4:	745a      	strb	r2, [r3, #17]
   28bd6:	687b      	ldr	r3, [r7, #4]
   28bd8:	2200      	movs	r2, #0
   28bda:	749a      	strb	r2, [r3, #18]
   28bdc:	687b      	ldr	r3, [r7, #4]
   28bde:	2200      	movs	r2, #0
   28be0:	74da      	strb	r2, [r3, #19]
		config->wave_ext.recoverable_fault[n].source = TCC_FAULT_SOURCE_DISABLE;           \
		config->wave_ext.recoverable_fault[n].blanking = TCC_FAULT_BLANKING_DISABLE;       \
		config->wave_ext.recoverable_fault[n].halt_action = TCC_FAULT_HALT_ACTION_DISABLE; \
		config->wave_ext.recoverable_fault[n].capture_action = TCC_FAULT_CAPTURE_DISABLE;  \
		config->wave_ext.recoverable_fault[n].capture_channel = TCC_FAULT_CAPTURE_CHANNEL_0;
	MREPEAT(TCC_NUM_FAULTS, _TCC_FAULT_FUNCTION_INIT, 0)
   28be2:	687b      	ldr	r3, [r7, #4]
   28be4:	222c      	movs	r2, #44	; 0x2c
   28be6:	2100      	movs	r1, #0
   28be8:	5499      	strb	r1, [r3, r2]
   28bea:	687b      	ldr	r3, [r7, #4]
   28bec:	222d      	movs	r2, #45	; 0x2d
   28bee:	2100      	movs	r1, #0
   28bf0:	5499      	strb	r1, [r3, r2]
   28bf2:	687b      	ldr	r3, [r7, #4]
   28bf4:	222e      	movs	r2, #46	; 0x2e
   28bf6:	2100      	movs	r1, #0
   28bf8:	5499      	strb	r1, [r3, r2]
   28bfa:	687b      	ldr	r3, [r7, #4]
   28bfc:	222f      	movs	r2, #47	; 0x2f
   28bfe:	2100      	movs	r1, #0
   28c00:	5499      	strb	r1, [r3, r2]
   28c02:	687b      	ldr	r3, [r7, #4]
   28c04:	2230      	movs	r2, #48	; 0x30
   28c06:	2100      	movs	r1, #0
   28c08:	5499      	strb	r1, [r3, r2]
   28c0a:	687b      	ldr	r3, [r7, #4]
   28c0c:	2231      	movs	r2, #49	; 0x31
   28c0e:	2100      	movs	r1, #0
   28c10:	5499      	strb	r1, [r3, r2]
   28c12:	687b      	ldr	r3, [r7, #4]
   28c14:	2232      	movs	r2, #50	; 0x32
   28c16:	2100      	movs	r1, #0
   28c18:	5499      	strb	r1, [r3, r2]
   28c1a:	687b      	ldr	r3, [r7, #4]
   28c1c:	2233      	movs	r2, #51	; 0x33
   28c1e:	2100      	movs	r1, #0
   28c20:	5499      	strb	r1, [r3, r2]
   28c22:	687b      	ldr	r3, [r7, #4]
   28c24:	2234      	movs	r2, #52	; 0x34
   28c26:	2100      	movs	r1, #0
   28c28:	5499      	strb	r1, [r3, r2]
   28c2a:	687b      	ldr	r3, [r7, #4]
   28c2c:	2235      	movs	r2, #53	; 0x35
   28c2e:	2100      	movs	r1, #0
   28c30:	5499      	strb	r1, [r3, r2]
   28c32:	687b      	ldr	r3, [r7, #4]
   28c34:	2236      	movs	r2, #54	; 0x36
   28c36:	2100      	movs	r1, #0
   28c38:	5499      	strb	r1, [r3, r2]
   28c3a:	687b      	ldr	r3, [r7, #4]
   28c3c:	2237      	movs	r2, #55	; 0x37
   28c3e:	2100      	movs	r1, #0
   28c40:	5499      	strb	r1, [r3, r2]
   28c42:	687b      	ldr	r3, [r7, #4]
   28c44:	2238      	movs	r2, #56	; 0x38
   28c46:	2100      	movs	r1, #0
   28c48:	5499      	strb	r1, [r3, r2]
   28c4a:	687b      	ldr	r3, [r7, #4]
   28c4c:	2239      	movs	r2, #57	; 0x39
   28c4e:	2100      	movs	r1, #0
   28c50:	5499      	strb	r1, [r3, r2]
   28c52:	687b      	ldr	r3, [r7, #4]
   28c54:	223a      	movs	r2, #58	; 0x3a
   28c56:	2100      	movs	r1, #0
   28c58:	5499      	strb	r1, [r3, r2]
   28c5a:	687b      	ldr	r3, [r7, #4]
   28c5c:	223b      	movs	r2, #59	; 0x3b
   28c5e:	2100      	movs	r1, #0
   28c60:	5499      	strb	r1, [r3, r2]
   28c62:	687b      	ldr	r3, [r7, #4]
   28c64:	223c      	movs	r2, #60	; 0x3c
   28c66:	2100      	movs	r1, #0
   28c68:	5499      	strb	r1, [r3, r2]
   28c6a:	687b      	ldr	r3, [r7, #4]
   28c6c:	223d      	movs	r2, #61	; 0x3d
   28c6e:	2100      	movs	r1, #0
   28c70:	5499      	strb	r1, [r3, r2]
   28c72:	687b      	ldr	r3, [r7, #4]
   28c74:	223e      	movs	r2, #62	; 0x3e
   28c76:	2100      	movs	r1, #0
   28c78:	5499      	strb	r1, [r3, r2]
   28c7a:	687b      	ldr	r3, [r7, #4]
   28c7c:	223f      	movs	r2, #63	; 0x3f
   28c7e:	2100      	movs	r1, #0
   28c80:	5499      	strb	r1, [r3, r2]

	/* Non-recoverable fault defaults */
#  define _TCC_NRF_FUNCTION_INIT(n, dummy) \
		config->wave_ext.non_recoverable_fault[n].filter_value = 0; \
		config->wave_ext.non_recoverable_fault[n].output = TCC_FAULT_STATE_OUTPUT_OFF;
	MREPEAT(TCC_NUM_WAVE_OUTPUTS, _TCC_NRF_FUNCTION_INIT, 0)
   28c82:	687b      	ldr	r3, [r7, #4]
   28c84:	2240      	movs	r2, #64	; 0x40
   28c86:	2100      	movs	r1, #0
   28c88:	5499      	strb	r1, [r3, r2]
   28c8a:	687b      	ldr	r3, [r7, #4]
   28c8c:	2241      	movs	r2, #65	; 0x41
   28c8e:	2100      	movs	r1, #0
   28c90:	5499      	strb	r1, [r3, r2]
   28c92:	687b      	ldr	r3, [r7, #4]
   28c94:	2242      	movs	r2, #66	; 0x42
   28c96:	2100      	movs	r1, #0
   28c98:	5499      	strb	r1, [r3, r2]
   28c9a:	687b      	ldr	r3, [r7, #4]
   28c9c:	2243      	movs	r2, #67	; 0x43
   28c9e:	2100      	movs	r1, #0
   28ca0:	5499      	strb	r1, [r3, r2]
   28ca2:	687b      	ldr	r3, [r7, #4]
   28ca4:	2244      	movs	r2, #68	; 0x44
   28ca6:	2100      	movs	r1, #0
   28ca8:	5499      	strb	r1, [r3, r2]
   28caa:	687b      	ldr	r3, [r7, #4]
   28cac:	2245      	movs	r2, #69	; 0x45
   28cae:	2100      	movs	r1, #0
   28cb0:	5499      	strb	r1, [r3, r2]
   28cb2:	687b      	ldr	r3, [r7, #4]
   28cb4:	2246      	movs	r2, #70	; 0x46
   28cb6:	2100      	movs	r1, #0
   28cb8:	5499      	strb	r1, [r3, r2]
   28cba:	687b      	ldr	r3, [r7, #4]
   28cbc:	2247      	movs	r2, #71	; 0x47
   28cbe:	2100      	movs	r1, #0
   28cc0:	5499      	strb	r1, [r3, r2]
   28cc2:	687b      	ldr	r3, [r7, #4]
   28cc4:	2248      	movs	r2, #72	; 0x48
   28cc6:	2100      	movs	r1, #0
   28cc8:	5499      	strb	r1, [r3, r2]
   28cca:	687b      	ldr	r3, [r7, #4]
   28ccc:	2249      	movs	r2, #73	; 0x49
   28cce:	2100      	movs	r1, #0
   28cd0:	5499      	strb	r1, [r3, r2]
   28cd2:	687b      	ldr	r3, [r7, #4]
   28cd4:	224a      	movs	r2, #74	; 0x4a
   28cd6:	2100      	movs	r1, #0
   28cd8:	5499      	strb	r1, [r3, r2]
   28cda:	687b      	ldr	r3, [r7, #4]
   28cdc:	224b      	movs	r2, #75	; 0x4b
   28cde:	2100      	movs	r1, #0
   28ce0:	5499      	strb	r1, [r3, r2]
   28ce2:	687b      	ldr	r3, [r7, #4]
   28ce4:	224c      	movs	r2, #76	; 0x4c
   28ce6:	2100      	movs	r1, #0
   28ce8:	5499      	strb	r1, [r3, r2]
   28cea:	687b      	ldr	r3, [r7, #4]
   28cec:	224d      	movs	r2, #77	; 0x4d
   28cee:	2100      	movs	r1, #0
   28cf0:	5499      	strb	r1, [r3, r2]
   28cf2:	687b      	ldr	r3, [r7, #4]
   28cf4:	224e      	movs	r2, #78	; 0x4e
   28cf6:	2100      	movs	r1, #0
   28cf8:	5499      	strb	r1, [r3, r2]
   28cfa:	687b      	ldr	r3, [r7, #4]
   28cfc:	224f      	movs	r2, #79	; 0x4f
   28cfe:	2100      	movs	r1, #0
   28d00:	5499      	strb	r1, [r3, r2]
#  undef _TCC_NRF_FUNCTION_INIT

	/* Output inversion defaults */
#  define _TCC_OUT_INVERT_INIT(n, value) \
		config->wave_ext.invert[n] = value;
	MREPEAT(TCC_NUM_WAVE_OUTPUTS, _TCC_OUT_INVERT_INIT, false)
   28d02:	687b      	ldr	r3, [r7, #4]
   28d04:	2250      	movs	r2, #80	; 0x50
   28d06:	2100      	movs	r1, #0
   28d08:	5499      	strb	r1, [r3, r2]
   28d0a:	687b      	ldr	r3, [r7, #4]
   28d0c:	2251      	movs	r2, #81	; 0x51
   28d0e:	2100      	movs	r1, #0
   28d10:	5499      	strb	r1, [r3, r2]
   28d12:	687b      	ldr	r3, [r7, #4]
   28d14:	2252      	movs	r2, #82	; 0x52
   28d16:	2100      	movs	r1, #0
   28d18:	5499      	strb	r1, [r3, r2]
   28d1a:	687b      	ldr	r3, [r7, #4]
   28d1c:	2253      	movs	r2, #83	; 0x53
   28d1e:	2100      	movs	r1, #0
   28d20:	5499      	strb	r1, [r3, r2]
   28d22:	687b      	ldr	r3, [r7, #4]
   28d24:	2254      	movs	r2, #84	; 0x54
   28d26:	2100      	movs	r1, #0
   28d28:	5499      	strb	r1, [r3, r2]
   28d2a:	687b      	ldr	r3, [r7, #4]
   28d2c:	2255      	movs	r2, #85	; 0x55
   28d2e:	2100      	movs	r1, #0
   28d30:	5499      	strb	r1, [r3, r2]
   28d32:	687b      	ldr	r3, [r7, #4]
   28d34:	2256      	movs	r2, #86	; 0x56
   28d36:	2100      	movs	r1, #0
   28d38:	5499      	strb	r1, [r3, r2]
   28d3a:	687b      	ldr	r3, [r7, #4]
   28d3c:	2257      	movs	r2, #87	; 0x57
   28d3e:	2100      	movs	r1, #0
   28d40:	5499      	strb	r1, [r3, r2]

#  define _TCC_CHANNEL_OUT_PIN_INIT(n, dummy) \
		config->pins.enable_wave_out_pin[n]                = false;\
		config->pins.wave_out_pin[TCC_WAVE_OUTPUT_##n]     = 0;    \
		config->pins.wave_out_pin_mux[TCC_WAVE_OUTPUT_##n] = 0;
	MREPEAT(TCC_NUM_WAVE_OUTPUTS, _TCC_CHANNEL_OUT_PIN_INIT, 0)
   28d42:	687b      	ldr	r3, [r7, #4]
   28d44:	2298      	movs	r2, #152	; 0x98
   28d46:	2100      	movs	r1, #0
   28d48:	5499      	strb	r1, [r3, r2]
   28d4a:	687b      	ldr	r3, [r7, #4]
   28d4c:	2200      	movs	r2, #0
   28d4e:	659a      	str	r2, [r3, #88]	; 0x58
   28d50:	687b      	ldr	r3, [r7, #4]
   28d52:	2200      	movs	r2, #0
   28d54:	679a      	str	r2, [r3, #120]	; 0x78
   28d56:	687b      	ldr	r3, [r7, #4]
   28d58:	2299      	movs	r2, #153	; 0x99
   28d5a:	2100      	movs	r1, #0
   28d5c:	5499      	strb	r1, [r3, r2]
   28d5e:	687b      	ldr	r3, [r7, #4]
   28d60:	2200      	movs	r2, #0
   28d62:	65da      	str	r2, [r3, #92]	; 0x5c
   28d64:	687b      	ldr	r3, [r7, #4]
   28d66:	2200      	movs	r2, #0
   28d68:	67da      	str	r2, [r3, #124]	; 0x7c
   28d6a:	687b      	ldr	r3, [r7, #4]
   28d6c:	229a      	movs	r2, #154	; 0x9a
   28d6e:	2100      	movs	r1, #0
   28d70:	5499      	strb	r1, [r3, r2]
   28d72:	687b      	ldr	r3, [r7, #4]
   28d74:	2200      	movs	r2, #0
   28d76:	661a      	str	r2, [r3, #96]	; 0x60
   28d78:	687b      	ldr	r3, [r7, #4]
   28d7a:	2280      	movs	r2, #128	; 0x80
   28d7c:	2100      	movs	r1, #0
   28d7e:	5099      	str	r1, [r3, r2]
   28d80:	687b      	ldr	r3, [r7, #4]
   28d82:	229b      	movs	r2, #155	; 0x9b
   28d84:	2100      	movs	r1, #0
   28d86:	5499      	strb	r1, [r3, r2]
   28d88:	687b      	ldr	r3, [r7, #4]
   28d8a:	2200      	movs	r2, #0
   28d8c:	665a      	str	r2, [r3, #100]	; 0x64
   28d8e:	687b      	ldr	r3, [r7, #4]
   28d90:	2284      	movs	r2, #132	; 0x84
   28d92:	2100      	movs	r1, #0
   28d94:	5099      	str	r1, [r3, r2]
   28d96:	687b      	ldr	r3, [r7, #4]
   28d98:	229c      	movs	r2, #156	; 0x9c
   28d9a:	2100      	movs	r1, #0
   28d9c:	5499      	strb	r1, [r3, r2]
   28d9e:	687b      	ldr	r3, [r7, #4]
   28da0:	2200      	movs	r2, #0
   28da2:	669a      	str	r2, [r3, #104]	; 0x68
   28da4:	687b      	ldr	r3, [r7, #4]
   28da6:	2288      	movs	r2, #136	; 0x88
   28da8:	2100      	movs	r1, #0
   28daa:	5099      	str	r1, [r3, r2]
   28dac:	687b      	ldr	r3, [r7, #4]
   28dae:	229d      	movs	r2, #157	; 0x9d
   28db0:	2100      	movs	r1, #0
   28db2:	5499      	strb	r1, [r3, r2]
   28db4:	687b      	ldr	r3, [r7, #4]
   28db6:	2200      	movs	r2, #0
   28db8:	66da      	str	r2, [r3, #108]	; 0x6c
   28dba:	687b      	ldr	r3, [r7, #4]
   28dbc:	228c      	movs	r2, #140	; 0x8c
   28dbe:	2100      	movs	r1, #0
   28dc0:	5099      	str	r1, [r3, r2]
   28dc2:	687b      	ldr	r3, [r7, #4]
   28dc4:	229e      	movs	r2, #158	; 0x9e
   28dc6:	2100      	movs	r1, #0
   28dc8:	5499      	strb	r1, [r3, r2]
   28dca:	687b      	ldr	r3, [r7, #4]
   28dcc:	2200      	movs	r2, #0
   28dce:	671a      	str	r2, [r3, #112]	; 0x70
   28dd0:	687b      	ldr	r3, [r7, #4]
   28dd2:	2290      	movs	r2, #144	; 0x90
   28dd4:	2100      	movs	r1, #0
   28dd6:	5099      	str	r1, [r3, r2]
   28dd8:	687b      	ldr	r3, [r7, #4]
   28dda:	229f      	movs	r2, #159	; 0x9f
   28ddc:	2100      	movs	r1, #0
   28dde:	5499      	strb	r1, [r3, r2]
   28de0:	687b      	ldr	r3, [r7, #4]
   28de2:	2200      	movs	r2, #0
   28de4:	675a      	str	r2, [r3, #116]	; 0x74
   28de6:	687b      	ldr	r3, [r7, #4]
   28de8:	2294      	movs	r2, #148	; 0x94
   28dea:	2100      	movs	r1, #0
   28dec:	5099      	str	r1, [r3, r2]
#  undef _TCC_CHANNEL_OUT_PIN_INIT

	config->double_buffering_enabled  = true;
   28dee:	687b      	ldr	r3, [r7, #4]
   28df0:	22a0      	movs	r2, #160	; 0xa0
   28df2:	2101      	movs	r1, #1
   28df4:	5499      	strb	r1, [r3, r2]
	config->run_in_standby            = false;
   28df6:	687b      	ldr	r3, [r7, #4]
   28df8:	22a1      	movs	r2, #161	; 0xa1
   28dfa:	2100      	movs	r1, #0
   28dfc:	5499      	strb	r1, [r3, r2]
}
   28dfe:	46c0      	nop			; (mov r8, r8)
   28e00:	46bd      	mov	sp, r7
   28e02:	b005      	add	sp, #20
   28e04:	bd90      	pop	{r4, r7, pc}
   28e06:	46c0      	nop			; (mov r8, r8)
   28e08:	00028b05 	.word	0x00028b05
   28e0c:	000379d0 	.word	0x000379d0

00028e10 <_tcc_build_ctrla>:
 */
static inline enum status_code _tcc_build_ctrla(
		const uint8_t module_index,
		const struct tcc_config *const config,
		uint32_t *value_buffer)
{
   28e10:	b580      	push	{r7, lr}
   28e12:	b086      	sub	sp, #24
   28e14:	af00      	add	r7, sp, #0
   28e16:	60b9      	str	r1, [r7, #8]
   28e18:	607a      	str	r2, [r7, #4]
   28e1a:	230f      	movs	r3, #15
   28e1c:	18fb      	adds	r3, r7, r3
   28e1e:	1c02      	adds	r2, r0, #0
   28e20:	701a      	strb	r2, [r3, #0]
	uint32_t ctrla = 0;
   28e22:	2300      	movs	r3, #0
   28e24:	617b      	str	r3, [r7, #20]

	int i;
	for (i = 0; i < TCC_NUM_CHANNELS; i ++) {
   28e26:	2300      	movs	r3, #0
   28e28:	613b      	str	r3, [r7, #16]
   28e2a:	e01d      	b.n	28e68 <_tcc_build_ctrla+0x58>
		if (config->capture.channel_function[i] ==
   28e2c:	68ba      	ldr	r2, [r7, #8]
   28e2e:	693b      	ldr	r3, [r7, #16]
   28e30:	18d3      	adds	r3, r2, r3
   28e32:	3310      	adds	r3, #16
   28e34:	781b      	ldrb	r3, [r3, #0]
   28e36:	2b01      	cmp	r3, #1
   28e38:	d113      	bne.n	28e62 <_tcc_build_ctrla+0x52>
			TCC_CHANNEL_FUNCTION_CAPTURE) {

			if (i > _tcc_cc_nums[module_index]) {
   28e3a:	230f      	movs	r3, #15
   28e3c:	18fb      	adds	r3, r7, r3
   28e3e:	781b      	ldrb	r3, [r3, #0]
   28e40:	4a1b      	ldr	r2, [pc, #108]	; (28eb0 <_tcc_build_ctrla+0xa0>)
   28e42:	5cd3      	ldrb	r3, [r2, r3]
   28e44:	001a      	movs	r2, r3
   28e46:	693b      	ldr	r3, [r7, #16]
   28e48:	429a      	cmp	r2, r3
   28e4a:	da01      	bge.n	28e50 <_tcc_build_ctrla+0x40>
				/* Channel not supported */
				return STATUS_ERR_INVALID_ARG;
   28e4c:	2317      	movs	r3, #23
   28e4e:	e02a      	b.n	28ea6 <_tcc_build_ctrla+0x96>
			}
			ctrla |= (TCC_CTRLA_CPTEN0 << i);
   28e50:	2380      	movs	r3, #128	; 0x80
   28e52:	045a      	lsls	r2, r3, #17
   28e54:	693b      	ldr	r3, [r7, #16]
   28e56:	409a      	lsls	r2, r3
   28e58:	0013      	movs	r3, r2
   28e5a:	001a      	movs	r2, r3
   28e5c:	697b      	ldr	r3, [r7, #20]
   28e5e:	4313      	orrs	r3, r2
   28e60:	617b      	str	r3, [r7, #20]
	for (i = 0; i < TCC_NUM_CHANNELS; i ++) {
   28e62:	693b      	ldr	r3, [r7, #16]
   28e64:	3301      	adds	r3, #1
   28e66:	613b      	str	r3, [r7, #16]
   28e68:	693b      	ldr	r3, [r7, #16]
   28e6a:	2b03      	cmp	r3, #3
   28e6c:	ddde      	ble.n	28e2c <_tcc_build_ctrla+0x1c>
		}
	}

	if (config->run_in_standby) {
   28e6e:	68bb      	ldr	r3, [r7, #8]
   28e70:	22a1      	movs	r2, #161	; 0xa1
   28e72:	5c9b      	ldrb	r3, [r3, r2]
   28e74:	2b00      	cmp	r3, #0
   28e76:	d004      	beq.n	28e82 <_tcc_build_ctrla+0x72>
		ctrla |= TCC_CTRLA_RUNSTDBY;
   28e78:	697b      	ldr	r3, [r7, #20]
   28e7a:	2280      	movs	r2, #128	; 0x80
   28e7c:	0112      	lsls	r2, r2, #4
   28e7e:	4313      	orrs	r3, r2
   28e80:	617b      	str	r3, [r7, #20]
	}
	ctrla |= config->counter.reload_action << TCC_CTRLA_PRESCSYNC_Pos;
   28e82:	68bb      	ldr	r3, [r7, #8]
   28e84:	7b1b      	ldrb	r3, [r3, #12]
   28e86:	031b      	lsls	r3, r3, #12
   28e88:	001a      	movs	r2, r3
   28e8a:	697b      	ldr	r3, [r7, #20]
   28e8c:	4313      	orrs	r3, r2
   28e8e:	617b      	str	r3, [r7, #20]
	ctrla |= config->counter.clock_prescaler << TCC_CTRLA_PRESCALER_Pos;
   28e90:	68bb      	ldr	r3, [r7, #8]
   28e92:	7adb      	ldrb	r3, [r3, #11]
   28e94:	021b      	lsls	r3, r3, #8
   28e96:	001a      	movs	r2, r3
   28e98:	697b      	ldr	r3, [r7, #20]
   28e9a:	4313      	orrs	r3, r2
   28e9c:	617b      	str	r3, [r7, #20]

	*value_buffer = ctrla;
   28e9e:	687b      	ldr	r3, [r7, #4]
   28ea0:	697a      	ldr	r2, [r7, #20]
   28ea2:	601a      	str	r2, [r3, #0]
	return STATUS_OK;
   28ea4:	2300      	movs	r3, #0
}
   28ea6:	0018      	movs	r0, r3
   28ea8:	46bd      	mov	sp, r7
   28eaa:	b006      	add	sp, #24
   28eac:	bd80      	pop	{r7, pc}
   28eae:	46c0      	nop			; (mov r8, r8)
   28eb0:	000379dc 	.word	0x000379dc

00028eb4 <_tcc_build_ctrlb>:
 */
static inline void _tcc_build_ctrlb(
		const uint8_t module_index,
		const struct tcc_config *const config,
		uint8_t *value_buffer)
{
   28eb4:	b580      	push	{r7, lr}
   28eb6:	b086      	sub	sp, #24
   28eb8:	af00      	add	r7, sp, #0
   28eba:	60b9      	str	r1, [r7, #8]
   28ebc:	607a      	str	r2, [r7, #4]
   28ebe:	230f      	movs	r3, #15
   28ec0:	18fb      	adds	r3, r7, r3
   28ec2:	1c02      	adds	r2, r0, #0
   28ec4:	701a      	strb	r2, [r3, #0]
	uint8_t ctrlb = 0;
   28ec6:	2317      	movs	r3, #23
   28ec8:	18fb      	adds	r3, r7, r3
   28eca:	2200      	movs	r2, #0
   28ecc:	701a      	strb	r2, [r3, #0]

	if (config->counter.oneshot) {
   28ece:	68bb      	ldr	r3, [r7, #8]
   28ed0:	7a1b      	ldrb	r3, [r3, #8]
   28ed2:	2b00      	cmp	r3, #0
   28ed4:	d007      	beq.n	28ee6 <_tcc_build_ctrlb+0x32>
		ctrlb |= TCC_CTRLBSET_ONESHOT;
   28ed6:	2317      	movs	r3, #23
   28ed8:	18fb      	adds	r3, r7, r3
   28eda:	2217      	movs	r2, #23
   28edc:	18ba      	adds	r2, r7, r2
   28ede:	7812      	ldrb	r2, [r2, #0]
   28ee0:	2104      	movs	r1, #4
   28ee2:	430a      	orrs	r2, r1
   28ee4:	701a      	strb	r2, [r3, #0]
	}
	if (config->counter.direction == TCC_COUNT_DIRECTION_DOWN) {
   28ee6:	68bb      	ldr	r3, [r7, #8]
   28ee8:	7a5b      	ldrb	r3, [r3, #9]
   28eea:	2b01      	cmp	r3, #1
   28eec:	d107      	bne.n	28efe <_tcc_build_ctrlb+0x4a>
		ctrlb |= TCC_CTRLBSET_DIR;
   28eee:	2317      	movs	r3, #23
   28ef0:	18fb      	adds	r3, r7, r3
   28ef2:	2217      	movs	r2, #23
   28ef4:	18ba      	adds	r2, r7, r2
   28ef6:	7812      	ldrb	r2, [r2, #0]
   28ef8:	2101      	movs	r1, #1
   28efa:	430a      	orrs	r2, r1
   28efc:	701a      	strb	r2, [r3, #0]
	}

	*value_buffer = ctrlb;
   28efe:	687b      	ldr	r3, [r7, #4]
   28f00:	2217      	movs	r2, #23
   28f02:	18ba      	adds	r2, r7, r2
   28f04:	7812      	ldrb	r2, [r2, #0]
   28f06:	701a      	strb	r2, [r3, #0]
}
   28f08:	46c0      	nop			; (mov r8, r8)
   28f0a:	46bd      	mov	sp, r7
   28f0c:	b006      	add	sp, #24
   28f0e:	bd80      	pop	{r7, pc}

00028f10 <_tcc_build_faults>:
 */
static inline enum status_code _tcc_build_faults(
		const uint8_t module_index,
		const struct tcc_config *const config,
		uint32_t *value_buffer)
{
   28f10:	b580      	push	{r7, lr}
   28f12:	b088      	sub	sp, #32
   28f14:	af00      	add	r7, sp, #0
   28f16:	60b9      	str	r1, [r7, #8]
   28f18:	607a      	str	r2, [r7, #4]
   28f1a:	230f      	movs	r3, #15
   28f1c:	18fb      	adds	r3, r7, r3
   28f1e:	1c02      	adds	r2, r0, #0
   28f20:	701a      	strb	r2, [r3, #0]
	struct tcc_recoverable_fault_config *cfg;
	uint8_t cc_num = _tcc_cc_nums[module_index];
   28f22:	230f      	movs	r3, #15
   28f24:	18fb      	adds	r3, r7, r3
   28f26:	781a      	ldrb	r2, [r3, #0]
   28f28:	231b      	movs	r3, #27
   28f2a:	18fb      	adds	r3, r7, r3
   28f2c:	493e      	ldr	r1, [pc, #248]	; (29028 <_tcc_build_faults+0x118>)
   28f2e:	5c8a      	ldrb	r2, [r1, r2]
   28f30:	701a      	strb	r2, [r3, #0]
	uint32_t fault;
	int i;
	for (i = 0; i < TCC_NUM_FAULTS; i ++) {
   28f32:	2300      	movs	r3, #0
   28f34:	61fb      	str	r3, [r7, #28]
   28f36:	e06e      	b.n	29016 <_tcc_build_faults+0x106>
		cfg = (struct tcc_recoverable_fault_config *)
   28f38:	69fa      	ldr	r2, [r7, #28]
   28f3a:	0013      	movs	r3, r2
   28f3c:	009b      	lsls	r3, r3, #2
   28f3e:	189b      	adds	r3, r3, r2
   28f40:	005b      	lsls	r3, r3, #1
   28f42:	3328      	adds	r3, #40	; 0x28
   28f44:	68ba      	ldr	r2, [r7, #8]
   28f46:	18d3      	adds	r3, r2, r3
   28f48:	3304      	adds	r3, #4
   28f4a:	617b      	str	r3, [r7, #20]
				&config->wave_ext.recoverable_fault[i];
		if (cfg->capture_channel >= cc_num) {
   28f4c:	697b      	ldr	r3, [r7, #20]
   28f4e:	7a5b      	ldrb	r3, [r3, #9]
   28f50:	221b      	movs	r2, #27
   28f52:	18ba      	adds	r2, r7, r2
   28f54:	7812      	ldrb	r2, [r2, #0]
   28f56:	429a      	cmp	r2, r3
   28f58:	d801      	bhi.n	28f5e <_tcc_build_faults+0x4e>
			return STATUS_ERR_INVALID_ARG;
   28f5a:	2317      	movs	r3, #23
   28f5c:	e05f      	b.n	2901e <_tcc_build_faults+0x10e>
		}
		if (cfg->filter_value > 0xF) {
   28f5e:	697b      	ldr	r3, [r7, #20]
   28f60:	781b      	ldrb	r3, [r3, #0]
   28f62:	2b0f      	cmp	r3, #15
   28f64:	d901      	bls.n	28f6a <_tcc_build_faults+0x5a>
			return STATUS_ERR_INVALID_ARG;
   28f66:	2317      	movs	r3, #23
   28f68:	e059      	b.n	2901e <_tcc_build_faults+0x10e>
		}
		fault = TCC_FCTRLA_FILTERVAL(cfg->filter_value)
   28f6a:	697b      	ldr	r3, [r7, #20]
   28f6c:	781b      	ldrb	r3, [r3, #0]
   28f6e:	061b      	lsls	r3, r3, #24
   28f70:	001a      	movs	r2, r3
   28f72:	23f0      	movs	r3, #240	; 0xf0
   28f74:	051b      	lsls	r3, r3, #20
   28f76:	401a      	ands	r2, r3
				| TCC_FCTRLA_BLANKVAL(cfg->blanking_cycles)
   28f78:	697b      	ldr	r3, [r7, #20]
   28f7a:	785b      	ldrb	r3, [r3, #1]
   28f7c:	041b      	lsls	r3, r3, #16
   28f7e:	0019      	movs	r1, r3
   28f80:	23ff      	movs	r3, #255	; 0xff
   28f82:	041b      	lsls	r3, r3, #16
   28f84:	400b      	ands	r3, r1
   28f86:	431a      	orrs	r2, r3
				| (cfg->restart ? TCC_FCTRLA_RESTART : 0)
   28f88:	697b      	ldr	r3, [r7, #20]
   28f8a:	789b      	ldrb	r3, [r3, #2]
   28f8c:	2b00      	cmp	r3, #0
   28f8e:	d001      	beq.n	28f94 <_tcc_build_faults+0x84>
   28f90:	2380      	movs	r3, #128	; 0x80
   28f92:	e000      	b.n	28f96 <_tcc_build_faults+0x86>
   28f94:	2300      	movs	r3, #0
   28f96:	431a      	orrs	r2, r3
				| (cfg->keep ? TCC_FCTRLA_KEEP : 0)
   28f98:	697b      	ldr	r3, [r7, #20]
   28f9a:	78db      	ldrb	r3, [r3, #3]
   28f9c:	2b00      	cmp	r3, #0
   28f9e:	d001      	beq.n	28fa4 <_tcc_build_faults+0x94>
   28fa0:	2308      	movs	r3, #8
   28fa2:	e000      	b.n	28fa6 <_tcc_build_faults+0x96>
   28fa4:	2300      	movs	r3, #0
   28fa6:	431a      	orrs	r2, r3
				| (cfg->qualification ? TCC_FCTRLA_QUAL : 0)
   28fa8:	697b      	ldr	r3, [r7, #20]
   28faa:	791b      	ldrb	r3, [r3, #4]
   28fac:	2b00      	cmp	r3, #0
   28fae:	d001      	beq.n	28fb4 <_tcc_build_faults+0xa4>
   28fb0:	2310      	movs	r3, #16
   28fb2:	e000      	b.n	28fb6 <_tcc_build_faults+0xa6>
   28fb4:	2300      	movs	r3, #0
   28fb6:	431a      	orrs	r2, r3
				| TCC_FCTRLA_SRC(cfg->source)
   28fb8:	697b      	ldr	r3, [r7, #20]
   28fba:	795b      	ldrb	r3, [r3, #5]
   28fbc:	0019      	movs	r1, r3
   28fbe:	2303      	movs	r3, #3
   28fc0:	400b      	ands	r3, r1
   28fc2:	431a      	orrs	r2, r3
				| TCC_FCTRLA_BLANK(cfg->blanking)
   28fc4:	697b      	ldr	r3, [r7, #20]
   28fc6:	799b      	ldrb	r3, [r3, #6]
   28fc8:	015b      	lsls	r3, r3, #5
   28fca:	0019      	movs	r1, r3
   28fcc:	2360      	movs	r3, #96	; 0x60
   28fce:	400b      	ands	r3, r1
   28fd0:	431a      	orrs	r2, r3
				| TCC_FCTRLA_HALT(cfg->halt_action)
   28fd2:	697b      	ldr	r3, [r7, #20]
   28fd4:	79db      	ldrb	r3, [r3, #7]
   28fd6:	021b      	lsls	r3, r3, #8
   28fd8:	0019      	movs	r1, r3
   28fda:	23c0      	movs	r3, #192	; 0xc0
   28fdc:	009b      	lsls	r3, r3, #2
   28fde:	400b      	ands	r3, r1
   28fe0:	431a      	orrs	r2, r3
				| TCC_FCTRLA_CAPTURE(cfg->capture_action)
   28fe2:	697b      	ldr	r3, [r7, #20]
   28fe4:	7a1b      	ldrb	r3, [r3, #8]
   28fe6:	031b      	lsls	r3, r3, #12
   28fe8:	0019      	movs	r1, r3
   28fea:	23e0      	movs	r3, #224	; 0xe0
   28fec:	01db      	lsls	r3, r3, #7
   28fee:	400b      	ands	r3, r1
   28ff0:	431a      	orrs	r2, r3
				| TCC_FCTRLA_CHSEL(cfg->capture_channel);
   28ff2:	697b      	ldr	r3, [r7, #20]
   28ff4:	7a5b      	ldrb	r3, [r3, #9]
   28ff6:	029b      	lsls	r3, r3, #10
   28ff8:	0019      	movs	r1, r3
   28ffa:	23c0      	movs	r3, #192	; 0xc0
   28ffc:	011b      	lsls	r3, r3, #4
   28ffe:	400b      	ands	r3, r1
		fault = TCC_FCTRLA_FILTERVAL(cfg->filter_value)
   29000:	4313      	orrs	r3, r2
   29002:	613b      	str	r3, [r7, #16]
		value_buffer[i] = fault;
   29004:	69fb      	ldr	r3, [r7, #28]
   29006:	009b      	lsls	r3, r3, #2
   29008:	687a      	ldr	r2, [r7, #4]
   2900a:	18d3      	adds	r3, r2, r3
   2900c:	693a      	ldr	r2, [r7, #16]
   2900e:	601a      	str	r2, [r3, #0]
	for (i = 0; i < TCC_NUM_FAULTS; i ++) {
   29010:	69fb      	ldr	r3, [r7, #28]
   29012:	3301      	adds	r3, #1
   29014:	61fb      	str	r3, [r7, #28]
   29016:	69fb      	ldr	r3, [r7, #28]
   29018:	2b01      	cmp	r3, #1
   2901a:	dd8d      	ble.n	28f38 <_tcc_build_faults+0x28>
	}
	return STATUS_OK;
   2901c:	2300      	movs	r3, #0
}
   2901e:	0018      	movs	r0, r3
   29020:	46bd      	mov	sp, r7
   29022:	b008      	add	sp, #32
   29024:	bd80      	pop	{r7, pc}
   29026:	46c0      	nop			; (mov r8, r8)
   29028:	000379dc 	.word	0x000379dc

0002902c <_tcc_build_drvctrl>:
 */
static inline enum status_code _tcc_build_drvctrl(
		const uint8_t module_index,
		const struct tcc_config *const config,
		uint32_t *value_buffer)
{
   2902c:	b580      	push	{r7, lr}
   2902e:	b088      	sub	sp, #32
   29030:	af00      	add	r7, sp, #0
   29032:	60b9      	str	r1, [r7, #8]
   29034:	607a      	str	r2, [r7, #4]
   29036:	230f      	movs	r3, #15
   29038:	18fb      	adds	r3, r7, r3
   2903a:	1c02      	adds	r2, r0, #0
   2903c:	701a      	strb	r2, [r3, #0]
	uint32_t i;
	uint8_t ow_num = _tcc_ow_nums[module_index];
   2903e:	230f      	movs	r3, #15
   29040:	18fb      	adds	r3, r7, r3
   29042:	781a      	ldrb	r2, [r3, #0]
   29044:	2317      	movs	r3, #23
   29046:	18fb      	adds	r3, r7, r3
   29048:	492d      	ldr	r1, [pc, #180]	; (29100 <_tcc_build_drvctrl+0xd4>)
   2904a:	5c8a      	ldrb	r2, [r1, r2]
   2904c:	701a      	strb	r2, [r3, #0]
	uint32_t drvctrl;

	drvctrl = 0;
   2904e:	2300      	movs	r3, #0
   29050:	61bb      	str	r3, [r7, #24]

	for (i = 0; i < TCC_NUM_WAVE_OUTPUTS; i ++) {
   29052:	2300      	movs	r3, #0
   29054:	61fb      	str	r3, [r7, #28]
   29056:	e048      	b.n	290ea <_tcc_build_drvctrl+0xbe>
		if (config->wave_ext.invert[i]) {
   29058:	68ba      	ldr	r2, [r7, #8]
   2905a:	2150      	movs	r1, #80	; 0x50
   2905c:	69fb      	ldr	r3, [r7, #28]
   2905e:	18d3      	adds	r3, r2, r3
   29060:	185b      	adds	r3, r3, r1
   29062:	781b      	ldrb	r3, [r3, #0]
   29064:	2b00      	cmp	r3, #0
   29066:	d010      	beq.n	2908a <_tcc_build_drvctrl+0x5e>
			if (i >= ow_num) {
   29068:	2317      	movs	r3, #23
   2906a:	18fb      	adds	r3, r7, r3
   2906c:	781a      	ldrb	r2, [r3, #0]
   2906e:	69fb      	ldr	r3, [r7, #28]
   29070:	429a      	cmp	r2, r3
   29072:	d801      	bhi.n	29078 <_tcc_build_drvctrl+0x4c>
				return STATUS_ERR_INVALID_ARG;
   29074:	2317      	movs	r3, #23
   29076:	e03f      	b.n	290f8 <_tcc_build_drvctrl+0xcc>
			}
			drvctrl |= (TCC_DRVCTRL_INVEN0 << i);
   29078:	2380      	movs	r3, #128	; 0x80
   2907a:	025a      	lsls	r2, r3, #9
   2907c:	69fb      	ldr	r3, [r7, #28]
   2907e:	409a      	lsls	r2, r3
   29080:	0013      	movs	r3, r2
   29082:	001a      	movs	r2, r3
   29084:	69bb      	ldr	r3, [r7, #24]
   29086:	4313      	orrs	r3, r2
   29088:	61bb      	str	r3, [r7, #24]
		}
		if (config->wave_ext.non_recoverable_fault[i].output !=
   2908a:	68ba      	ldr	r2, [r7, #8]
   2908c:	69fb      	ldr	r3, [r7, #28]
   2908e:	331c      	adds	r3, #28
   29090:	005b      	lsls	r3, r3, #1
   29092:	18d3      	adds	r3, r2, r3
   29094:	3309      	adds	r3, #9
   29096:	781b      	ldrb	r3, [r3, #0]
   29098:	2b00      	cmp	r3, #0
   2909a:	d023      	beq.n	290e4 <_tcc_build_drvctrl+0xb8>
			TCC_FAULT_STATE_OUTPUT_OFF) {
			if (i >= ow_num) {
   2909c:	2317      	movs	r3, #23
   2909e:	18fb      	adds	r3, r7, r3
   290a0:	781a      	ldrb	r2, [r3, #0]
   290a2:	69fb      	ldr	r3, [r7, #28]
   290a4:	429a      	cmp	r2, r3
   290a6:	d801      	bhi.n	290ac <_tcc_build_drvctrl+0x80>
				return STATUS_ERR_INVALID_ARG;
   290a8:	2317      	movs	r3, #23
   290aa:	e025      	b.n	290f8 <_tcc_build_drvctrl+0xcc>
			}
			if (config->wave_ext.non_recoverable_fault[i].output ==
   290ac:	68ba      	ldr	r2, [r7, #8]
   290ae:	69fb      	ldr	r3, [r7, #28]
   290b0:	331c      	adds	r3, #28
   290b2:	005b      	lsls	r3, r3, #1
   290b4:	18d3      	adds	r3, r2, r3
   290b6:	3309      	adds	r3, #9
   290b8:	781b      	ldrb	r3, [r3, #0]
   290ba:	2b02      	cmp	r3, #2
   290bc:	d10a      	bne.n	290d4 <_tcc_build_drvctrl+0xa8>
				TCC_FAULT_STATE_OUTPUT_1) {
				drvctrl |= (TCC_DRVCTRL_NRE0 | TCC_DRVCTRL_NRV0) << i;
   290be:	2302      	movs	r3, #2
   290c0:	33ff      	adds	r3, #255	; 0xff
   290c2:	001a      	movs	r2, r3
   290c4:	69fb      	ldr	r3, [r7, #28]
   290c6:	409a      	lsls	r2, r3
   290c8:	0013      	movs	r3, r2
   290ca:	001a      	movs	r2, r3
   290cc:	69bb      	ldr	r3, [r7, #24]
   290ce:	4313      	orrs	r3, r2
   290d0:	61bb      	str	r3, [r7, #24]
   290d2:	e007      	b.n	290e4 <_tcc_build_drvctrl+0xb8>
			} else {
				drvctrl |= (TCC_DRVCTRL_NRE0) << i;
   290d4:	2201      	movs	r2, #1
   290d6:	69fb      	ldr	r3, [r7, #28]
   290d8:	409a      	lsls	r2, r3
   290da:	0013      	movs	r3, r2
   290dc:	001a      	movs	r2, r3
   290de:	69bb      	ldr	r3, [r7, #24]
   290e0:	4313      	orrs	r3, r2
   290e2:	61bb      	str	r3, [r7, #24]
	for (i = 0; i < TCC_NUM_WAVE_OUTPUTS; i ++) {
   290e4:	69fb      	ldr	r3, [r7, #28]
   290e6:	3301      	adds	r3, #1
   290e8:	61fb      	str	r3, [r7, #28]
   290ea:	69fb      	ldr	r3, [r7, #28]
   290ec:	2b07      	cmp	r3, #7
   290ee:	d9b3      	bls.n	29058 <_tcc_build_drvctrl+0x2c>
			}
		}
	}
	*value_buffer = drvctrl;
   290f0:	687b      	ldr	r3, [r7, #4]
   290f2:	69ba      	ldr	r2, [r7, #24]
   290f4:	601a      	str	r2, [r3, #0]
	return STATUS_OK;
   290f6:	2300      	movs	r3, #0
}
   290f8:	0018      	movs	r0, r3
   290fa:	46bd      	mov	sp, r7
   290fc:	b008      	add	sp, #32
   290fe:	bd80      	pop	{r7, pc}
   29100:	000379e0 	.word	0x000379e0

00029104 <_tcc_build_waves>:
 */
static inline enum status_code _tcc_build_waves(
		const uint8_t module_index,
		const struct tcc_config *const config,
		uint32_t *value_buffer)
{
   29104:	b580      	push	{r7, lr}
   29106:	b088      	sub	sp, #32
   29108:	af00      	add	r7, sp, #0
   2910a:	60b9      	str	r1, [r7, #8]
   2910c:	607a      	str	r2, [r7, #4]
   2910e:	230f      	movs	r3, #15
   29110:	18fb      	adds	r3, r7, r3
   29112:	1c02      	adds	r2, r0, #0
   29114:	701a      	strb	r2, [r3, #0]
	int n;

	uint8_t cc_num = _tcc_cc_nums[module_index];
   29116:	230f      	movs	r3, #15
   29118:	18fb      	adds	r3, r7, r3
   2911a:	781a      	ldrb	r2, [r3, #0]
   2911c:	2317      	movs	r3, #23
   2911e:	18fb      	adds	r3, r7, r3
   29120:	491d      	ldr	r1, [pc, #116]	; (29198 <_tcc_build_waves+0x94>)
   29122:	5c8a      	ldrb	r2, [r1, r2]
   29124:	701a      	strb	r2, [r3, #0]
	struct tcc_match_wave_config const *wav_cfg = &config->compare;
   29126:	68bb      	ldr	r3, [r7, #8]
   29128:	3310      	adds	r3, #16
   2912a:	613b      	str	r3, [r7, #16]

	uint32_t wave;

	wave = TCC_WAVE_RAMP(wav_cfg->wave_ramp) |
   2912c:	693b      	ldr	r3, [r7, #16]
   2912e:	7a5b      	ldrb	r3, [r3, #9]
   29130:	011b      	lsls	r3, r3, #4
   29132:	001a      	movs	r2, r3
   29134:	2330      	movs	r3, #48	; 0x30
   29136:	401a      	ands	r2, r3
			TCC_WAVE_WAVEGEN(wav_cfg->wave_generation);
   29138:	693b      	ldr	r3, [r7, #16]
   2913a:	7a1b      	ldrb	r3, [r3, #8]
   2913c:	0019      	movs	r1, r3
   2913e:	2307      	movs	r3, #7
   29140:	400b      	ands	r3, r1
	wave = TCC_WAVE_RAMP(wav_cfg->wave_ramp) |
   29142:	4313      	orrs	r3, r2
   29144:	61bb      	str	r3, [r7, #24]

	for (n = 0; n < TCC_NUM_CHANNELS; n++) {
   29146:	2300      	movs	r3, #0
   29148:	61fb      	str	r3, [r7, #28]
   2914a:	e01a      	b.n	29182 <_tcc_build_waves+0x7e>
		if (wav_cfg->wave_polarity[n]) {
   2914c:	693a      	ldr	r2, [r7, #16]
   2914e:	69fb      	ldr	r3, [r7, #28]
   29150:	18d3      	adds	r3, r2, r3
   29152:	3304      	adds	r3, #4
   29154:	781b      	ldrb	r3, [r3, #0]
   29156:	2b00      	cmp	r3, #0
   29158:	d010      	beq.n	2917c <_tcc_build_waves+0x78>
			if (n >= cc_num) {
   2915a:	2317      	movs	r3, #23
   2915c:	18fb      	adds	r3, r7, r3
   2915e:	781a      	ldrb	r2, [r3, #0]
   29160:	69fb      	ldr	r3, [r7, #28]
   29162:	429a      	cmp	r2, r3
   29164:	dc01      	bgt.n	2916a <_tcc_build_waves+0x66>
				return STATUS_ERR_INVALID_ARG;
   29166:	2317      	movs	r3, #23
   29168:	e012      	b.n	29190 <_tcc_build_waves+0x8c>
			}
			wave |= (TCC_WAVE_POL0 << n);
   2916a:	2380      	movs	r3, #128	; 0x80
   2916c:	025a      	lsls	r2, r3, #9
   2916e:	69fb      	ldr	r3, [r7, #28]
   29170:	409a      	lsls	r2, r3
   29172:	0013      	movs	r3, r2
   29174:	001a      	movs	r2, r3
   29176:	69bb      	ldr	r3, [r7, #24]
   29178:	4313      	orrs	r3, r2
   2917a:	61bb      	str	r3, [r7, #24]
	for (n = 0; n < TCC_NUM_CHANNELS; n++) {
   2917c:	69fb      	ldr	r3, [r7, #28]
   2917e:	3301      	adds	r3, #1
   29180:	61fb      	str	r3, [r7, #28]
   29182:	69fb      	ldr	r3, [r7, #28]
   29184:	2b03      	cmp	r3, #3
   29186:	dde1      	ble.n	2914c <_tcc_build_waves+0x48>
		}
	}

	value_buffer[0] = wave;
   29188:	687b      	ldr	r3, [r7, #4]
   2918a:	69ba      	ldr	r2, [r7, #24]
   2918c:	601a      	str	r2, [r3, #0]

	return STATUS_OK;
   2918e:	2300      	movs	r3, #0
}
   29190:	0018      	movs	r0, r3
   29192:	46bd      	mov	sp, r7
   29194:	b008      	add	sp, #32
   29196:	bd80      	pop	{r7, pc}
   29198:	000379dc 	.word	0x000379dc

0002919c <tcc_init>:
 */
enum status_code tcc_init(
		struct tcc_module *const module_inst,
		Tcc *const hw,
		const struct tcc_config *const config)
{
   2919c:	b590      	push	{r4, r7, lr}
   2919e:	b091      	sub	sp, #68	; 0x44
   291a0:	af00      	add	r7, sp, #0
   291a2:	60f8      	str	r0, [r7, #12]
   291a4:	60b9      	str	r1, [r7, #8]
   291a6:	607a      	str	r2, [r7, #4]
	Assert(hw);
	Assert(module_inst);
	Assert(config);

	/* TCC instance index */
	uint8_t module_index = _tcc_get_inst_index(hw);
   291a8:	233b      	movs	r3, #59	; 0x3b
   291aa:	18fc      	adds	r4, r7, r3
   291ac:	68bb      	ldr	r3, [r7, #8]
   291ae:	0018      	movs	r0, r3
   291b0:	4bc4      	ldr	r3, [pc, #784]	; (294c4 <tcc_init+0x328>)
   291b2:	4798      	blx	r3
   291b4:	0003      	movs	r3, r0
   291b6:	7023      	strb	r3, [r4, #0]

	/* Enable the user interface clock for TCC */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC,
   291b8:	233b      	movs	r3, #59	; 0x3b
   291ba:	18fb      	adds	r3, r7, r3
   291bc:	781a      	ldrb	r2, [r3, #0]
   291be:	4bc2      	ldr	r3, [pc, #776]	; (294c8 <tcc_init+0x32c>)
   291c0:	0092      	lsls	r2, r2, #2
   291c2:	58d3      	ldr	r3, [r2, r3]
   291c4:	0019      	movs	r1, r3
   291c6:	2002      	movs	r0, #2
   291c8:	4bc0      	ldr	r3, [pc, #768]	; (294cc <tcc_init+0x330>)
   291ca:	4798      	blx	r3
			_tcc_apbcmasks[module_index]);

	/* Check if it's enabled. */
	if (hw->CTRLA.reg & TCC_CTRLA_ENABLE) {
   291cc:	68bb      	ldr	r3, [r7, #8]
   291ce:	681b      	ldr	r3, [r3, #0]
   291d0:	2202      	movs	r2, #2
   291d2:	4013      	ands	r3, r2
   291d4:	d001      	beq.n	291da <tcc_init+0x3e>
		return STATUS_ERR_DENIED;
   291d6:	231c      	movs	r3, #28
   291d8:	e1be      	b.n	29558 <tcc_init+0x3bc>
	}
	/* Check if it's resetting */
	if (hw->CTRLA.reg & TCC_CTRLA_SWRST) {
   291da:	68bb      	ldr	r3, [r7, #8]
   291dc:	681b      	ldr	r3, [r3, #0]
   291de:	2201      	movs	r2, #1
   291e0:	4013      	ands	r3, r2
   291e2:	d001      	beq.n	291e8 <tcc_init+0x4c>
		return STATUS_ERR_DENIED;
   291e4:	231c      	movs	r3, #28
   291e6:	e1b7      	b.n	29558 <tcc_init+0x3bc>
	}

	enum status_code status;

	/* Check COUNT, PER, CCx */
	uint32_t count_max  = _tcc_maxs[module_index];
   291e8:	233b      	movs	r3, #59	; 0x3b
   291ea:	18fb      	adds	r3, r7, r3
   291ec:	781a      	ldrb	r2, [r3, #0]
   291ee:	4bb8      	ldr	r3, [pc, #736]	; (294d0 <tcc_init+0x334>)
   291f0:	0092      	lsls	r2, r2, #2
   291f2:	58d3      	ldr	r3, [r2, r3]
   291f4:	637b      	str	r3, [r7, #52]	; 0x34

	/* Check all counter values */
	if ((config->counter.count > count_max)
   291f6:	687b      	ldr	r3, [r7, #4]
   291f8:	681a      	ldr	r2, [r3, #0]
   291fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   291fc:	429a      	cmp	r2, r3
   291fe:	d804      	bhi.n	2920a <tcc_init+0x6e>
		|| (config->counter.period > count_max)
   29200:	687b      	ldr	r3, [r7, #4]
   29202:	685a      	ldr	r2, [r3, #4]
   29204:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   29206:	429a      	cmp	r2, r3
   29208:	d901      	bls.n	2920e <tcc_init+0x72>
		) {
		return STATUS_ERR_INVALID_ARG;
   2920a:	2317      	movs	r3, #23
   2920c:	e1a4      	b.n	29558 <tcc_init+0x3bc>
	}

	/* Check all channel values */
	for (i = 0; i < TCC_NUM_CHANNELS; i ++) {
   2920e:	2300      	movs	r3, #0
   29210:	63fb      	str	r3, [r7, #60]	; 0x3c
   29212:	e00e      	b.n	29232 <tcc_init+0x96>
		if ((config->compare.match[i] > count_max)
   29214:	687a      	ldr	r2, [r7, #4]
   29216:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   29218:	3306      	adds	r3, #6
   2921a:	009b      	lsls	r3, r3, #2
   2921c:	18d3      	adds	r3, r2, r3
   2921e:	3304      	adds	r3, #4
   29220:	681a      	ldr	r2, [r3, #0]
   29222:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   29224:	429a      	cmp	r2, r3
   29226:	d901      	bls.n	2922c <tcc_init+0x90>
			) {
			return STATUS_ERR_INVALID_ARG;
   29228:	2317      	movs	r3, #23
   2922a:	e195      	b.n	29558 <tcc_init+0x3bc>
	for (i = 0; i < TCC_NUM_CHANNELS; i ++) {
   2922c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   2922e:	3301      	adds	r3, #1
   29230:	63fb      	str	r3, [r7, #60]	; 0x3c
   29232:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   29234:	2b03      	cmp	r3, #3
   29236:	dded      	ble.n	29214 <tcc_init+0x78>
		}
	}

	/* Check all outputs */
	for (i = 0; i < TCC_NUM_WAVE_OUTPUTS; i ++) {
   29238:	2300      	movs	r3, #0
   2923a:	63fb      	str	r3, [r7, #60]	; 0x3c
   2923c:	e019      	b.n	29272 <tcc_init+0xd6>
		if (!config->pins.enable_wave_out_pin[i]) {
   2923e:	687a      	ldr	r2, [r7, #4]
   29240:	2198      	movs	r1, #152	; 0x98
   29242:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   29244:	18d3      	adds	r3, r2, r3
   29246:	185b      	adds	r3, r3, r1
   29248:	781b      	ldrb	r3, [r3, #0]
   2924a:	2201      	movs	r2, #1
   2924c:	4053      	eors	r3, r2
   2924e:	b2db      	uxtb	r3, r3
   29250:	2b00      	cmp	r3, #0
   29252:	d10a      	bne.n	2926a <tcc_init+0xce>
			continue;
		}
		/* Output line is not supported */
		if (i >= _tcc_ow_nums[module_index]) {
   29254:	233b      	movs	r3, #59	; 0x3b
   29256:	18fb      	adds	r3, r7, r3
   29258:	781b      	ldrb	r3, [r3, #0]
   2925a:	4a9e      	ldr	r2, [pc, #632]	; (294d4 <tcc_init+0x338>)
   2925c:	5cd3      	ldrb	r3, [r2, r3]
   2925e:	001a      	movs	r2, r3
   29260:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   29262:	429a      	cmp	r2, r3
   29264:	dc02      	bgt.n	2926c <tcc_init+0xd0>
			return STATUS_ERR_INVALID_ARG;
   29266:	2317      	movs	r3, #23
   29268:	e176      	b.n	29558 <tcc_init+0x3bc>
			continue;
   2926a:	46c0      	nop			; (mov r8, r8)
	for (i = 0; i < TCC_NUM_WAVE_OUTPUTS; i ++) {
   2926c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   2926e:	3301      	adds	r3, #1
   29270:	63fb      	str	r3, [r7, #60]	; 0x3c
   29272:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   29274:	2b07      	cmp	r3, #7
   29276:	dde2      	ble.n	2923e <tcc_init+0xa2>
		}
	}

	/* CTRLA settings */
	uint32_t ctrla = 0;
   29278:	2300      	movs	r3, #0
   2927a:	62fb      	str	r3, [r7, #44]	; 0x2c
	status = _tcc_build_ctrla(module_index, config, &ctrla);
   2927c:	2333      	movs	r3, #51	; 0x33
   2927e:	18fc      	adds	r4, r7, r3
   29280:	232c      	movs	r3, #44	; 0x2c
   29282:	18fa      	adds	r2, r7, r3
   29284:	6879      	ldr	r1, [r7, #4]
   29286:	233b      	movs	r3, #59	; 0x3b
   29288:	18fb      	adds	r3, r7, r3
   2928a:	781b      	ldrb	r3, [r3, #0]
   2928c:	0018      	movs	r0, r3
   2928e:	4b92      	ldr	r3, [pc, #584]	; (294d8 <tcc_init+0x33c>)
   29290:	4798      	blx	r3
   29292:	0003      	movs	r3, r0
   29294:	7023      	strb	r3, [r4, #0]
	if (STATUS_OK != status) {
   29296:	2333      	movs	r3, #51	; 0x33
   29298:	18fb      	adds	r3, r7, r3
   2929a:	781b      	ldrb	r3, [r3, #0]
   2929c:	2b00      	cmp	r3, #0
   2929e:	d003      	beq.n	292a8 <tcc_init+0x10c>
		return status;
   292a0:	2333      	movs	r3, #51	; 0x33
   292a2:	18fb      	adds	r3, r7, r3
   292a4:	781b      	ldrb	r3, [r3, #0]
   292a6:	e157      	b.n	29558 <tcc_init+0x3bc>
	}

	/* CTRLB settings */
	uint8_t ctrlb;
	_tcc_build_ctrlb(module_index, config, &ctrlb);
   292a8:	232b      	movs	r3, #43	; 0x2b
   292aa:	18fa      	adds	r2, r7, r3
   292ac:	6879      	ldr	r1, [r7, #4]
   292ae:	233b      	movs	r3, #59	; 0x3b
   292b0:	18fb      	adds	r3, r7, r3
   292b2:	781b      	ldrb	r3, [r3, #0]
   292b4:	0018      	movs	r0, r3
   292b6:	4b89      	ldr	r3, [pc, #548]	; (294dc <tcc_init+0x340>)
   292b8:	4798      	blx	r3

	/* FAULTs settings */
	uint32_t faults[TCC_NUM_FAULTS];

	status = _tcc_build_faults(module_index, config, faults);
   292ba:	2333      	movs	r3, #51	; 0x33
   292bc:	18fc      	adds	r4, r7, r3
   292be:	2320      	movs	r3, #32
   292c0:	18fa      	adds	r2, r7, r3
   292c2:	6879      	ldr	r1, [r7, #4]
   292c4:	233b      	movs	r3, #59	; 0x3b
   292c6:	18fb      	adds	r3, r7, r3
   292c8:	781b      	ldrb	r3, [r3, #0]
   292ca:	0018      	movs	r0, r3
   292cc:	4b84      	ldr	r3, [pc, #528]	; (294e0 <tcc_init+0x344>)
   292ce:	4798      	blx	r3
   292d0:	0003      	movs	r3, r0
   292d2:	7023      	strb	r3, [r4, #0]
	if (STATUS_OK != status) {
   292d4:	2333      	movs	r3, #51	; 0x33
   292d6:	18fb      	adds	r3, r7, r3
   292d8:	781b      	ldrb	r3, [r3, #0]
   292da:	2b00      	cmp	r3, #0
   292dc:	d003      	beq.n	292e6 <tcc_init+0x14a>
		return status;
   292de:	2333      	movs	r3, #51	; 0x33
   292e0:	18fb      	adds	r3, r7, r3
   292e2:	781b      	ldrb	r3, [r3, #0]
   292e4:	e138      	b.n	29558 <tcc_init+0x3bc>
	}

	/* DRVCTRL */
	uint32_t drvctrl = 0;
   292e6:	2300      	movs	r3, #0
   292e8:	61fb      	str	r3, [r7, #28]

	status = _tcc_build_drvctrl(module_index, config, &drvctrl);
   292ea:	2333      	movs	r3, #51	; 0x33
   292ec:	18fc      	adds	r4, r7, r3
   292ee:	231c      	movs	r3, #28
   292f0:	18fa      	adds	r2, r7, r3
   292f2:	6879      	ldr	r1, [r7, #4]
   292f4:	233b      	movs	r3, #59	; 0x3b
   292f6:	18fb      	adds	r3, r7, r3
   292f8:	781b      	ldrb	r3, [r3, #0]
   292fa:	0018      	movs	r0, r3
   292fc:	4b79      	ldr	r3, [pc, #484]	; (294e4 <tcc_init+0x348>)
   292fe:	4798      	blx	r3
   29300:	0003      	movs	r3, r0
   29302:	7023      	strb	r3, [r4, #0]
	if (STATUS_OK != status) {
   29304:	2333      	movs	r3, #51	; 0x33
   29306:	18fb      	adds	r3, r7, r3
   29308:	781b      	ldrb	r3, [r3, #0]
   2930a:	2b00      	cmp	r3, #0
   2930c:	d003      	beq.n	29316 <tcc_init+0x17a>
		return status;
   2930e:	2333      	movs	r3, #51	; 0x33
   29310:	18fb      	adds	r3, r7, r3
   29312:	781b      	ldrb	r3, [r3, #0]
   29314:	e120      	b.n	29558 <tcc_init+0x3bc>
	}

	/* WAVE */
	uint32_t waves[1];

	status = _tcc_build_waves(module_index, config, waves);
   29316:	2333      	movs	r3, #51	; 0x33
   29318:	18fc      	adds	r4, r7, r3
   2931a:	2318      	movs	r3, #24
   2931c:	18fa      	adds	r2, r7, r3
   2931e:	6879      	ldr	r1, [r7, #4]
   29320:	233b      	movs	r3, #59	; 0x3b
   29322:	18fb      	adds	r3, r7, r3
   29324:	781b      	ldrb	r3, [r3, #0]
   29326:	0018      	movs	r0, r3
   29328:	4b6f      	ldr	r3, [pc, #444]	; (294e8 <tcc_init+0x34c>)
   2932a:	4798      	blx	r3
   2932c:	0003      	movs	r3, r0
   2932e:	7023      	strb	r3, [r4, #0]
	if (STATUS_OK != status) {
   29330:	2333      	movs	r3, #51	; 0x33
   29332:	18fb      	adds	r3, r7, r3
   29334:	781b      	ldrb	r3, [r3, #0]
   29336:	2b00      	cmp	r3, #0
   29338:	d003      	beq.n	29342 <tcc_init+0x1a6>
		return status;
   2933a:	2333      	movs	r3, #51	; 0x33
   2933c:	18fb      	adds	r3, r7, r3
   2933e:	781b      	ldrb	r3, [r3, #0]
   29340:	e10a      	b.n	29558 <tcc_init+0x3bc>
	}

	/* Initialize module */
#if TCC_ASYNC
	/* Initialize parameters */
	for (i = 0; i < TCC_CALLBACK_N; i ++) {
   29342:	2300      	movs	r3, #0
   29344:	63fb      	str	r3, [r7, #60]	; 0x3c
   29346:	e009      	b.n	2935c <tcc_init+0x1c0>
		module_inst->callback[i] = NULL;
   29348:	68fa      	ldr	r2, [r7, #12]
   2934a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   2934c:	009b      	lsls	r3, r3, #2
   2934e:	18d3      	adds	r3, r2, r3
   29350:	3304      	adds	r3, #4
   29352:	2200      	movs	r2, #0
   29354:	601a      	str	r2, [r3, #0]
	for (i = 0; i < TCC_CALLBACK_N; i ++) {
   29356:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   29358:	3301      	adds	r3, #1
   2935a:	63fb      	str	r3, [r7, #60]	; 0x3c
   2935c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   2935e:	2b0b      	cmp	r3, #11
   29360:	ddf2      	ble.n	29348 <tcc_init+0x1ac>
	}
	module_inst->register_callback_mask = 0;
   29362:	68fb      	ldr	r3, [r7, #12]
   29364:	2200      	movs	r2, #0
   29366:	635a      	str	r2, [r3, #52]	; 0x34
	module_inst->enable_callback_mask = 0;
   29368:	68fb      	ldr	r3, [r7, #12]
   2936a:	2200      	movs	r2, #0
   2936c:	639a      	str	r2, [r3, #56]	; 0x38
	_tcc_instances[module_index] = module_inst;
   2936e:	233b      	movs	r3, #59	; 0x3b
   29370:	18fb      	adds	r3, r7, r3
   29372:	781a      	ldrb	r2, [r3, #0]
   29374:	4b5d      	ldr	r3, [pc, #372]	; (294ec <tcc_init+0x350>)
   29376:	0092      	lsls	r2, r2, #2
   29378:	68f9      	ldr	r1, [r7, #12]
   2937a:	50d1      	str	r1, [r2, r3]
#endif

	module_inst->hw = hw;
   2937c:	68fb      	ldr	r3, [r7, #12]
   2937e:	68ba      	ldr	r2, [r7, #8]
   29380:	601a      	str	r2, [r3, #0]

	module_inst->double_buffering_enabled = config->double_buffering_enabled;
   29382:	687b      	ldr	r3, [r7, #4]
   29384:	22a0      	movs	r2, #160	; 0xa0
   29386:	5c99      	ldrb	r1, [r3, r2]
   29388:	68fb      	ldr	r3, [r7, #12]
   2938a:	223c      	movs	r2, #60	; 0x3c
   2938c:	5499      	strb	r1, [r3, r2]

	/* Setup clock for module */
	struct system_gclk_chan_config gclk_chan_config;
	system_gclk_chan_get_config_defaults(&gclk_chan_config);
   2938e:	2314      	movs	r3, #20
   29390:	18fb      	adds	r3, r7, r3
   29392:	0018      	movs	r0, r3
   29394:	4b56      	ldr	r3, [pc, #344]	; (294f0 <tcc_init+0x354>)
   29396:	4798      	blx	r3
	gclk_chan_config.source_generator = config->counter.clock_source;
   29398:	687b      	ldr	r3, [r7, #4]
   2939a:	7a9a      	ldrb	r2, [r3, #10]
   2939c:	2314      	movs	r3, #20
   2939e:	18fb      	adds	r3, r7, r3
   293a0:	701a      	strb	r2, [r3, #0]
	system_gclk_chan_set_config(_tcc_gclk_ids[module_index], &gclk_chan_config);
   293a2:	233b      	movs	r3, #59	; 0x3b
   293a4:	18fb      	adds	r3, r7, r3
   293a6:	781b      	ldrb	r3, [r3, #0]
   293a8:	4a52      	ldr	r2, [pc, #328]	; (294f4 <tcc_init+0x358>)
   293aa:	5cd3      	ldrb	r3, [r2, r3]
   293ac:	2214      	movs	r2, #20
   293ae:	18ba      	adds	r2, r7, r2
   293b0:	0011      	movs	r1, r2
   293b2:	0018      	movs	r0, r3
   293b4:	4b50      	ldr	r3, [pc, #320]	; (294f8 <tcc_init+0x35c>)
   293b6:	4798      	blx	r3
	system_gclk_chan_enable(_tcc_gclk_ids[module_index]);
   293b8:	233b      	movs	r3, #59	; 0x3b
   293ba:	18fb      	adds	r3, r7, r3
   293bc:	781b      	ldrb	r3, [r3, #0]
   293be:	4a4d      	ldr	r2, [pc, #308]	; (294f4 <tcc_init+0x358>)
   293c0:	5cd3      	ldrb	r3, [r2, r3]
   293c2:	0018      	movs	r0, r3
   293c4:	4b4d      	ldr	r3, [pc, #308]	; (294fc <tcc_init+0x360>)
   293c6:	4798      	blx	r3

	/* Initialize pins */
	struct system_pinmux_config pin_config;
	for (i = 0; i <  _tcc_ow_nums[module_index]; i ++) {
   293c8:	2300      	movs	r3, #0
   293ca:	63fb      	str	r3, [r7, #60]	; 0x3c
   293cc:	e02d      	b.n	2942a <tcc_init+0x28e>
		if (!config->pins.enable_wave_out_pin[i]) {
   293ce:	687a      	ldr	r2, [r7, #4]
   293d0:	2198      	movs	r1, #152	; 0x98
   293d2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   293d4:	18d3      	adds	r3, r2, r3
   293d6:	185b      	adds	r3, r3, r1
   293d8:	781b      	ldrb	r3, [r3, #0]
   293da:	2201      	movs	r2, #1
   293dc:	4053      	eors	r3, r2
   293de:	b2db      	uxtb	r3, r3
   293e0:	2b00      	cmp	r3, #0
   293e2:	d11e      	bne.n	29422 <tcc_init+0x286>
			continue;
		}

		system_pinmux_get_config_defaults(&pin_config);
   293e4:	2310      	movs	r3, #16
   293e6:	18fb      	adds	r3, r7, r3
   293e8:	0018      	movs	r0, r3
   293ea:	4b45      	ldr	r3, [pc, #276]	; (29500 <tcc_init+0x364>)
   293ec:	4798      	blx	r3
		pin_config.mux_position = config->pins.wave_out_pin_mux[i];
   293ee:	687b      	ldr	r3, [r7, #4]
   293f0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
   293f2:	321e      	adds	r2, #30
   293f4:	0092      	lsls	r2, r2, #2
   293f6:	58d3      	ldr	r3, [r2, r3]
   293f8:	b2da      	uxtb	r2, r3
   293fa:	2310      	movs	r3, #16
   293fc:	18fb      	adds	r3, r7, r3
   293fe:	701a      	strb	r2, [r3, #0]
		pin_config.direction = SYSTEM_PINMUX_PIN_DIR_OUTPUT;
   29400:	2310      	movs	r3, #16
   29402:	18fb      	adds	r3, r7, r3
   29404:	2201      	movs	r2, #1
   29406:	705a      	strb	r2, [r3, #1]
		system_pinmux_pin_set_config(
				config->pins.wave_out_pin[i], &pin_config);
   29408:	687b      	ldr	r3, [r7, #4]
   2940a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
   2940c:	3216      	adds	r2, #22
   2940e:	0092      	lsls	r2, r2, #2
   29410:	58d3      	ldr	r3, [r2, r3]
		system_pinmux_pin_set_config(
   29412:	b2db      	uxtb	r3, r3
   29414:	2210      	movs	r2, #16
   29416:	18ba      	adds	r2, r7, r2
   29418:	0011      	movs	r1, r2
   2941a:	0018      	movs	r0, r3
   2941c:	4b39      	ldr	r3, [pc, #228]	; (29504 <tcc_init+0x368>)
   2941e:	4798      	blx	r3
   29420:	e000      	b.n	29424 <tcc_init+0x288>
			continue;
   29422:	46c0      	nop			; (mov r8, r8)
	for (i = 0; i <  _tcc_ow_nums[module_index]; i ++) {
   29424:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   29426:	3301      	adds	r3, #1
   29428:	63fb      	str	r3, [r7, #60]	; 0x3c
   2942a:	233b      	movs	r3, #59	; 0x3b
   2942c:	18fb      	adds	r3, r7, r3
   2942e:	781b      	ldrb	r3, [r3, #0]
   29430:	4a28      	ldr	r2, [pc, #160]	; (294d4 <tcc_init+0x338>)
   29432:	5cd3      	ldrb	r3, [r2, r3]
   29434:	001a      	movs	r2, r3
   29436:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   29438:	429a      	cmp	r2, r3
   2943a:	dcc8      	bgt.n	293ce <tcc_init+0x232>
	}

	/* Write to registers */

	hw->CTRLA.reg = ctrla;
   2943c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
   2943e:	68bb      	ldr	r3, [r7, #8]
   29440:	601a      	str	r2, [r3, #0]
	while (hw->SYNCBUSY.reg & TCC_SYNCBUSY_CTRLB) {
   29442:	46c0      	nop			; (mov r8, r8)
   29444:	68bb      	ldr	r3, [r7, #8]
   29446:	689b      	ldr	r3, [r3, #8]
   29448:	2204      	movs	r2, #4
   2944a:	4013      	ands	r3, r2
   2944c:	d1fa      	bne.n	29444 <tcc_init+0x2a8>
		/* Wait for sync */
	}

	hw->CTRLBCLR.reg = 0xFF;
   2944e:	68bb      	ldr	r3, [r7, #8]
   29450:	22ff      	movs	r2, #255	; 0xff
   29452:	711a      	strb	r2, [r3, #4]
	while (hw->SYNCBUSY.reg & TCC_SYNCBUSY_CTRLB) {
   29454:	46c0      	nop			; (mov r8, r8)
   29456:	68bb      	ldr	r3, [r7, #8]
   29458:	689b      	ldr	r3, [r3, #8]
   2945a:	2204      	movs	r2, #4
   2945c:	4013      	ands	r3, r2
   2945e:	d1fa      	bne.n	29456 <tcc_init+0x2ba>
		/* Wait for sync */
	}
	hw->CTRLBSET.reg = ctrlb;
   29460:	232b      	movs	r3, #43	; 0x2b
   29462:	18fb      	adds	r3, r7, r3
   29464:	781a      	ldrb	r2, [r3, #0]
   29466:	68bb      	ldr	r3, [r7, #8]
   29468:	715a      	strb	r2, [r3, #5]

	hw->FCTRLA.reg = faults[0];
   2946a:	2320      	movs	r3, #32
   2946c:	18fb      	adds	r3, r7, r3
   2946e:	681a      	ldr	r2, [r3, #0]
   29470:	68bb      	ldr	r3, [r7, #8]
   29472:	60da      	str	r2, [r3, #12]
	hw->FCTRLB.reg = faults[1];
   29474:	2320      	movs	r3, #32
   29476:	18fb      	adds	r3, r7, r3
   29478:	685a      	ldr	r2, [r3, #4]
   2947a:	68bb      	ldr	r3, [r7, #8]
   2947c:	611a      	str	r2, [r3, #16]

	hw->DRVCTRL.reg = drvctrl;
   2947e:	69fa      	ldr	r2, [r7, #28]
   29480:	68bb      	ldr	r3, [r7, #8]
   29482:	619a      	str	r2, [r3, #24]

#if (!SAML21) && (!SAMC20) && (!SAMC21) && (!SAML22) && (!SAMR30)
	while (hw->SYNCBUSY.reg & (TCC_SYNCBUSY_WAVE | TCC_SYNCBUSY_WAVEB)) {
   29484:	46c0      	nop			; (mov r8, r8)
   29486:	68bb      	ldr	r3, [r7, #8]
   29488:	689b      	ldr	r3, [r3, #8]
   2948a:	4a1f      	ldr	r2, [pc, #124]	; (29508 <tcc_init+0x36c>)
   2948c:	4013      	ands	r3, r2
   2948e:	d1fa      	bne.n	29486 <tcc_init+0x2ea>
		/* Wait for sync */
	}
#endif
	hw->WAVE.reg = waves[0];
   29490:	69ba      	ldr	r2, [r7, #24]
   29492:	68bb      	ldr	r3, [r7, #8]
   29494:	63da      	str	r2, [r3, #60]	; 0x3c

	while (hw->SYNCBUSY.reg & TCC_SYNCBUSY_COUNT) {
   29496:	46c0      	nop			; (mov r8, r8)
   29498:	68bb      	ldr	r3, [r7, #8]
   2949a:	689b      	ldr	r3, [r3, #8]
   2949c:	2210      	movs	r2, #16
   2949e:	4013      	ands	r3, r2
   294a0:	d1fa      	bne.n	29498 <tcc_init+0x2fc>
		/* Wait for sync */
	}
	hw->COUNT.reg = config->counter.count;
   294a2:	687b      	ldr	r3, [r7, #4]
   294a4:	681a      	ldr	r2, [r3, #0]
   294a6:	68bb      	ldr	r3, [r7, #8]
   294a8:	635a      	str	r2, [r3, #52]	; 0x34

#if (!SAML21) && (!SAMC20) && (!SAMC21) && (!SAML22) && (!SAMR30)
	while (hw->SYNCBUSY.reg & (TCC_SYNCBUSY_PER | TCC_SYNCBUSY_PERB)) {
   294aa:	46c0      	nop			; (mov r8, r8)
   294ac:	68bb      	ldr	r3, [r7, #8]
   294ae:	689b      	ldr	r3, [r3, #8]
   294b0:	4a16      	ldr	r2, [pc, #88]	; (2950c <tcc_init+0x370>)
   294b2:	4013      	ands	r3, r2
   294b4:	d1fa      	bne.n	294ac <tcc_init+0x310>
		/* Wait for sync */
	}
#endif
	hw->PER.reg = (config->counter.period);
   294b6:	687b      	ldr	r3, [r7, #4]
   294b8:	685a      	ldr	r2, [r3, #4]
   294ba:	68bb      	ldr	r3, [r7, #8]
   294bc:	641a      	str	r2, [r3, #64]	; 0x40

	for (i = 0; i <  _tcc_cc_nums[module_index]; i ++) {
   294be:	2300      	movs	r3, #0
   294c0:	63fb      	str	r3, [r7, #60]	; 0x3c
   294c2:	e03f      	b.n	29544 <tcc_init+0x3a8>
   294c4:	00028b05 	.word	0x00028b05
   294c8:	000379c4 	.word	0x000379c4
   294cc:	00028a81 	.word	0x00028a81
   294d0:	000379d0 	.word	0x000379d0
   294d4:	000379e0 	.word	0x000379e0
   294d8:	00028e11 	.word	0x00028e11
   294dc:	00028eb5 	.word	0x00028eb5
   294e0:	00028f11 	.word	0x00028f11
   294e4:	0002902d 	.word	0x0002902d
   294e8:	00029105 	.word	0x00029105
   294ec:	200056c4 	.word	0x200056c4
   294f0:	00028a69 	.word	0x00028a69
   294f4:	000379c0 	.word	0x000379c0
   294f8:	00028681 	.word	0x00028681
   294fc:	000286c5 	.word	0x000286c5
   29500:	00028add 	.word	0x00028add
   29504:	000289e1 	.word	0x000289e1
   29508:	00020040 	.word	0x00020040
   2950c:	00040080 	.word	0x00040080
#if (!SAML21) && (!SAMC20) && (!SAMC21) && (!SAML22) && (!SAMR30)
		while (hw->SYNCBUSY.reg & (
   29510:	46c0      	nop			; (mov r8, r8)
   29512:	68bb      	ldr	r3, [r7, #8]
   29514:	689b      	ldr	r3, [r3, #8]
			(TCC_SYNCBUSY_CC0 | TCC_SYNCBUSY_CCB0) << i)) {
   29516:	4912      	ldr	r1, [pc, #72]	; (29560 <tcc_init+0x3c4>)
   29518:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
   2951a:	4091      	lsls	r1, r2
   2951c:	000a      	movs	r2, r1
		while (hw->SYNCBUSY.reg & (
   2951e:	4013      	ands	r3, r2
   29520:	d1f7      	bne.n	29512 <tcc_init+0x376>
			/* Wait for sync */
		}
#endif
		hw->CC[i].reg = (config->compare.match[i]);
   29522:	687a      	ldr	r2, [r7, #4]
   29524:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   29526:	3306      	adds	r3, #6
   29528:	009b      	lsls	r3, r3, #2
   2952a:	18d3      	adds	r3, r2, r3
   2952c:	3304      	adds	r3, #4
   2952e:	681a      	ldr	r2, [r3, #0]
   29530:	68b9      	ldr	r1, [r7, #8]
   29532:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   29534:	3310      	adds	r3, #16
   29536:	009b      	lsls	r3, r3, #2
   29538:	18cb      	adds	r3, r1, r3
   2953a:	3304      	adds	r3, #4
   2953c:	601a      	str	r2, [r3, #0]
	for (i = 0; i <  _tcc_cc_nums[module_index]; i ++) {
   2953e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   29540:	3301      	adds	r3, #1
   29542:	63fb      	str	r3, [r7, #60]	; 0x3c
   29544:	233b      	movs	r3, #59	; 0x3b
   29546:	18fb      	adds	r3, r7, r3
   29548:	781b      	ldrb	r3, [r3, #0]
   2954a:	4a06      	ldr	r2, [pc, #24]	; (29564 <tcc_init+0x3c8>)
   2954c:	5cd3      	ldrb	r3, [r2, r3]
   2954e:	001a      	movs	r2, r3
   29550:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   29552:	429a      	cmp	r2, r3
   29554:	dcdc      	bgt.n	29510 <tcc_init+0x374>
	}

	return STATUS_OK;
   29556:	2300      	movs	r3, #0
}
   29558:	0018      	movs	r0, r3
   2955a:	46bd      	mov	sp, r7
   2955c:	b011      	add	sp, #68	; 0x44
   2955e:	bd90      	pop	{r4, r7, pc}
   29560:	00080100 	.word	0x00080100
   29564:	000379dc 	.word	0x000379dc

00029568 <system_interrupt_enable>:
{
   29568:	b580      	push	{r7, lr}
   2956a:	b082      	sub	sp, #8
   2956c:	af00      	add	r7, sp, #0
   2956e:	0002      	movs	r2, r0
   29570:	1dfb      	adds	r3, r7, #7
   29572:	701a      	strb	r2, [r3, #0]
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
   29574:	4b06      	ldr	r3, [pc, #24]	; (29590 <system_interrupt_enable+0x28>)
   29576:	1dfa      	adds	r2, r7, #7
   29578:	7812      	ldrb	r2, [r2, #0]
   2957a:	0011      	movs	r1, r2
   2957c:	221f      	movs	r2, #31
   2957e:	400a      	ands	r2, r1
   29580:	2101      	movs	r1, #1
   29582:	4091      	lsls	r1, r2
   29584:	000a      	movs	r2, r1
   29586:	601a      	str	r2, [r3, #0]
}
   29588:	46c0      	nop			; (mov r8, r8)
   2958a:	46bd      	mov	sp, r7
   2958c:	b002      	add	sp, #8
   2958e:	bd80      	pop	{r7, pc}
   29590:	e000e100 	.word	0xe000e100

00029594 <_tcc_interrupt_get_interrupt_vector>:
 *
 * \return Interrupt vector for of the given TCC module instance.
 */
static enum system_interrupt_vector _tcc_interrupt_get_interrupt_vector(
		uint32_t inst_num)
{
   29594:	b580      	push	{r7, lr}
   29596:	b082      	sub	sp, #8
   29598:	af00      	add	r7, sp, #0
   2959a:	6078      	str	r0, [r7, #4]
	static uint8_t tcc_interrupt_vectors[TCC_INST_NUM] = {
		MREPEAT(TCC_INST_NUM, _TCC_INTERRUPT_VECT_NUM, 0)
	};

	return (enum system_interrupt_vector)tcc_interrupt_vectors[inst_num];
   2959c:	4a04      	ldr	r2, [pc, #16]	; (295b0 <_tcc_interrupt_get_interrupt_vector+0x1c>)
   2959e:	687b      	ldr	r3, [r7, #4]
   295a0:	18d3      	adds	r3, r2, r3
   295a2:	781b      	ldrb	r3, [r3, #0]
   295a4:	b25b      	sxtb	r3, r3
}
   295a6:	0018      	movs	r0, r3
   295a8:	46bd      	mov	sp, r7
   295aa:	b002      	add	sp, #8
   295ac:	bd80      	pop	{r7, pc}
   295ae:	46c0      	nop			; (mov r8, r8)
   295b0:	20000138 	.word	0x20000138

000295b4 <tcc_register_callback>:
 */
enum status_code tcc_register_callback(
		struct tcc_module *const module,
		tcc_callback_t callback_func,
		const enum tcc_callback callback_type)
{
   295b4:	b580      	push	{r7, lr}
   295b6:	b084      	sub	sp, #16
   295b8:	af00      	add	r7, sp, #0
   295ba:	60f8      	str	r0, [r7, #12]
   295bc:	60b9      	str	r1, [r7, #8]
   295be:	1dfb      	adds	r3, r7, #7
   295c0:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(callback_func);

	/* Register callback function */
	module->callback[callback_type] = callback_func;
   295c2:	1dfb      	adds	r3, r7, #7
   295c4:	781b      	ldrb	r3, [r3, #0]
   295c6:	68fa      	ldr	r2, [r7, #12]
   295c8:	009b      	lsls	r3, r3, #2
   295ca:	18d3      	adds	r3, r2, r3
   295cc:	3304      	adds	r3, #4
   295ce:	68ba      	ldr	r2, [r7, #8]
   295d0:	601a      	str	r2, [r3, #0]

	/* Set the bit corresponding to the callback_type */
	module->register_callback_mask |= _tcc_intflag[callback_type];
   295d2:	68fb      	ldr	r3, [r7, #12]
   295d4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
   295d6:	1dfb      	adds	r3, r7, #7
   295d8:	7819      	ldrb	r1, [r3, #0]
   295da:	4b05      	ldr	r3, [pc, #20]	; (295f0 <tcc_register_callback+0x3c>)
   295dc:	0089      	lsls	r1, r1, #2
   295de:	58cb      	ldr	r3, [r1, r3]
   295e0:	431a      	orrs	r2, r3
   295e2:	68fb      	ldr	r3, [r7, #12]
   295e4:	635a      	str	r2, [r3, #52]	; 0x34

	return STATUS_OK;
   295e6:	2300      	movs	r3, #0
}
   295e8:	0018      	movs	r0, r3
   295ea:	46bd      	mov	sp, r7
   295ec:	b004      	add	sp, #16
   295ee:	bd80      	pop	{r7, pc}
   295f0:	000379e4 	.word	0x000379e4

000295f4 <tcc_enable_callback>:
 * \param[in]     callback_type Callback type given by an enum
 */
void tcc_enable_callback(
		struct tcc_module *const module,
		const enum tcc_callback callback_type)
{
   295f4:	b580      	push	{r7, lr}
   295f6:	b082      	sub	sp, #8
   295f8:	af00      	add	r7, sp, #0
   295fa:	6078      	str	r0, [r7, #4]
   295fc:	000a      	movs	r2, r1
   295fe:	1cfb      	adds	r3, r7, #3
   29600:	701a      	strb	r2, [r3, #0]
	Assert(module);
	Assert(module->hw);

	/* Enable interrupts for this TCC module */
	system_interrupt_enable(_tcc_interrupt_get_interrupt_vector(
			_tcc_get_inst_index(module->hw)));
   29602:	687b      	ldr	r3, [r7, #4]
   29604:	681b      	ldr	r3, [r3, #0]
   29606:	0018      	movs	r0, r3
   29608:	4b0f      	ldr	r3, [pc, #60]	; (29648 <tcc_enable_callback+0x54>)
   2960a:	4798      	blx	r3
   2960c:	0003      	movs	r3, r0
	system_interrupt_enable(_tcc_interrupt_get_interrupt_vector(
   2960e:	0018      	movs	r0, r3
   29610:	4b0e      	ldr	r3, [pc, #56]	; (2964c <tcc_enable_callback+0x58>)
   29612:	4798      	blx	r3
   29614:	0003      	movs	r3, r0
   29616:	0018      	movs	r0, r3
   29618:	4b0d      	ldr	r3, [pc, #52]	; (29650 <tcc_enable_callback+0x5c>)
   2961a:	4798      	blx	r3

	/* Enable channel or other callbacks */
	module->enable_callback_mask |= _tcc_intflag[callback_type];
   2961c:	687b      	ldr	r3, [r7, #4]
   2961e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
   29620:	1cfb      	adds	r3, r7, #3
   29622:	7819      	ldrb	r1, [r3, #0]
   29624:	4b0b      	ldr	r3, [pc, #44]	; (29654 <tcc_enable_callback+0x60>)
   29626:	0089      	lsls	r1, r1, #2
   29628:	58cb      	ldr	r3, [r1, r3]
   2962a:	431a      	orrs	r2, r3
   2962c:	687b      	ldr	r3, [r7, #4]
   2962e:	639a      	str	r2, [r3, #56]	; 0x38
	module->hw->INTENSET.reg = _tcc_intflag[callback_type];
   29630:	687b      	ldr	r3, [r7, #4]
   29632:	681b      	ldr	r3, [r3, #0]
   29634:	1cfa      	adds	r2, r7, #3
   29636:	7811      	ldrb	r1, [r2, #0]
   29638:	4a06      	ldr	r2, [pc, #24]	; (29654 <tcc_enable_callback+0x60>)
   2963a:	0089      	lsls	r1, r1, #2
   2963c:	588a      	ldr	r2, [r1, r2]
   2963e:	629a      	str	r2, [r3, #40]	; 0x28
}
   29640:	46c0      	nop			; (mov r8, r8)
   29642:	46bd      	mov	sp, r7
   29644:	b002      	add	sp, #8
   29646:	bd80      	pop	{r7, pc}
   29648:	00028b05 	.word	0x00028b05
   2964c:	00029595 	.word	0x00029595
   29650:	00029569 	.word	0x00029569
   29654:	000379e4 	.word	0x000379e4

00029658 <TCC0_Handler>:
		void TCC##n##_Handler(void) \
		{ \
			_tcc_interrupt_handler(n); \
		}

MREPEAT(TCC_INST_NUM, _TCC_INTERRUPT_HANDLER, 0)
   29658:	b580      	push	{r7, lr}
   2965a:	af00      	add	r7, sp, #0
   2965c:	2000      	movs	r0, #0
   2965e:	4b02      	ldr	r3, [pc, #8]	; (29668 <TCC0_Handler+0x10>)
   29660:	4798      	blx	r3
   29662:	46c0      	nop			; (mov r8, r8)
   29664:	46bd      	mov	sp, r7
   29666:	bd80      	pop	{r7, pc}
   29668:	00029695 	.word	0x00029695

0002966c <TCC1_Handler>:
   2966c:	b580      	push	{r7, lr}
   2966e:	af00      	add	r7, sp, #0
   29670:	2001      	movs	r0, #1
   29672:	4b02      	ldr	r3, [pc, #8]	; (2967c <TCC1_Handler+0x10>)
   29674:	4798      	blx	r3
   29676:	46c0      	nop			; (mov r8, r8)
   29678:	46bd      	mov	sp, r7
   2967a:	bd80      	pop	{r7, pc}
   2967c:	00029695 	.word	0x00029695

00029680 <TCC2_Handler>:
   29680:	b580      	push	{r7, lr}
   29682:	af00      	add	r7, sp, #0
   29684:	2002      	movs	r0, #2
   29686:	4b02      	ldr	r3, [pc, #8]	; (29690 <TCC2_Handler+0x10>)
   29688:	4798      	blx	r3
   2968a:	46c0      	nop			; (mov r8, r8)
   2968c:	46bd      	mov	sp, r7
   2968e:	bd80      	pop	{r7, pc}
   29690:	00029695 	.word	0x00029695

00029694 <_tcc_interrupt_handler>:
 * \param[in]  module_index  ID of the TCC instance calling the interrupt
 *                           handler
 */
void _tcc_interrupt_handler(
		uint8_t module_index)
{
   29694:	b580      	push	{r7, lr}
   29696:	b086      	sub	sp, #24
   29698:	af00      	add	r7, sp, #0
   2969a:	0002      	movs	r2, r0
   2969c:	1dfb      	adds	r3, r7, #7
   2969e:	701a      	strb	r2, [r3, #0]
	int i;

	uint32_t interrupt_and_callback_status_mask;

	struct tcc_module *module =
			(struct tcc_module *)_tcc_instances[module_index];
   296a0:	1dfb      	adds	r3, r7, #7
   296a2:	781a      	ldrb	r2, [r3, #0]
	struct tcc_module *module =
   296a4:	4b18      	ldr	r3, [pc, #96]	; (29708 <_tcc_interrupt_handler+0x74>)
   296a6:	0092      	lsls	r2, r2, #2
   296a8:	58d3      	ldr	r3, [r2, r3]
   296aa:	613b      	str	r3, [r7, #16]

	interrupt_and_callback_status_mask = (module->hw->INTFLAG.reg &
   296ac:	693b      	ldr	r3, [r7, #16]
   296ae:	681b      	ldr	r3, [r3, #0]
   296b0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
			module->register_callback_mask &
   296b2:	693b      	ldr	r3, [r7, #16]
   296b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
	interrupt_and_callback_status_mask = (module->hw->INTFLAG.reg &
   296b6:	401a      	ands	r2, r3
			module->enable_callback_mask);
   296b8:	693b      	ldr	r3, [r7, #16]
   296ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
	interrupt_and_callback_status_mask = (module->hw->INTFLAG.reg &
   296bc:	4013      	ands	r3, r2
   296be:	60fb      	str	r3, [r7, #12]

	/* Check if callback interrupt has occured */
	for (i = 0; i < TCC_CALLBACK_N; i ++) {
   296c0:	2300      	movs	r3, #0
   296c2:	617b      	str	r3, [r7, #20]
   296c4:	e019      	b.n	296fa <_tcc_interrupt_handler+0x66>
		if (interrupt_and_callback_status_mask & _tcc_intflag[i]) {
   296c6:	4b11      	ldr	r3, [pc, #68]	; (2970c <_tcc_interrupt_handler+0x78>)
   296c8:	697a      	ldr	r2, [r7, #20]
   296ca:	0092      	lsls	r2, r2, #2
   296cc:	58d3      	ldr	r3, [r2, r3]
   296ce:	68fa      	ldr	r2, [r7, #12]
   296d0:	4013      	ands	r3, r2
   296d2:	d00f      	beq.n	296f4 <_tcc_interrupt_handler+0x60>
			/* Invoke the registered and enabled callback function */
			(module->callback[i])(module);
   296d4:	693a      	ldr	r2, [r7, #16]
   296d6:	697b      	ldr	r3, [r7, #20]
   296d8:	009b      	lsls	r3, r3, #2
   296da:	18d3      	adds	r3, r2, r3
   296dc:	3304      	adds	r3, #4
   296de:	681b      	ldr	r3, [r3, #0]
   296e0:	693a      	ldr	r2, [r7, #16]
   296e2:	0010      	movs	r0, r2
   296e4:	4798      	blx	r3
			/* Clear interrupt flag */
			module->hw->INTFLAG.reg = _tcc_intflag[i];
   296e6:	693b      	ldr	r3, [r7, #16]
   296e8:	681b      	ldr	r3, [r3, #0]
   296ea:	4a08      	ldr	r2, [pc, #32]	; (2970c <_tcc_interrupt_handler+0x78>)
   296ec:	6979      	ldr	r1, [r7, #20]
   296ee:	0089      	lsls	r1, r1, #2
   296f0:	588a      	ldr	r2, [r1, r2]
   296f2:	62da      	str	r2, [r3, #44]	; 0x2c
	for (i = 0; i < TCC_CALLBACK_N; i ++) {
   296f4:	697b      	ldr	r3, [r7, #20]
   296f6:	3301      	adds	r3, #1
   296f8:	617b      	str	r3, [r7, #20]
   296fa:	697b      	ldr	r3, [r7, #20]
   296fc:	2b0b      	cmp	r3, #11
   296fe:	dde2      	ble.n	296c6 <_tcc_interrupt_handler+0x32>
		}
	}
}
   29700:	46c0      	nop			; (mov r8, r8)
   29702:	46bd      	mov	sp, r7
   29704:	b006      	add	sp, #24
   29706:	bd80      	pop	{r7, pc}
   29708:	200056c4 	.word	0x200056c4
   2970c:	000379e4 	.word	0x000379e4

00029710 <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
   29710:	b580      	push	{r7, lr}
   29712:	b082      	sub	sp, #8
   29714:	af00      	add	r7, sp, #0
        uint32_t *pSrc, *pDest;

        /* Initialize the relocate segment */
        pSrc = &_etext;
   29716:	4b2f      	ldr	r3, [pc, #188]	; (297d4 <Reset_Handler+0xc4>)
   29718:	607b      	str	r3, [r7, #4]
        pDest = &_srelocate;
   2971a:	4b2f      	ldr	r3, [pc, #188]	; (297d8 <Reset_Handler+0xc8>)
   2971c:	603b      	str	r3, [r7, #0]

        if (pSrc != pDest) {
   2971e:	687a      	ldr	r2, [r7, #4]
   29720:	683b      	ldr	r3, [r7, #0]
   29722:	429a      	cmp	r2, r3
   29724:	d00c      	beq.n	29740 <Reset_Handler+0x30>
                for (; pDest < &_erelocate;) {
   29726:	e007      	b.n	29738 <Reset_Handler+0x28>
                        *pDest++ = *pSrc++;
   29728:	683b      	ldr	r3, [r7, #0]
   2972a:	1d1a      	adds	r2, r3, #4
   2972c:	603a      	str	r2, [r7, #0]
   2972e:	687a      	ldr	r2, [r7, #4]
   29730:	1d11      	adds	r1, r2, #4
   29732:	6079      	str	r1, [r7, #4]
   29734:	6812      	ldr	r2, [r2, #0]
   29736:	601a      	str	r2, [r3, #0]
                for (; pDest < &_erelocate;) {
   29738:	683a      	ldr	r2, [r7, #0]
   2973a:	4b28      	ldr	r3, [pc, #160]	; (297dc <Reset_Handler+0xcc>)
   2973c:	429a      	cmp	r2, r3
   2973e:	d3f3      	bcc.n	29728 <Reset_Handler+0x18>
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
   29740:	4b27      	ldr	r3, [pc, #156]	; (297e0 <Reset_Handler+0xd0>)
   29742:	603b      	str	r3, [r7, #0]
   29744:	e004      	b.n	29750 <Reset_Handler+0x40>
                *pDest++ = 0;
   29746:	683b      	ldr	r3, [r7, #0]
   29748:	1d1a      	adds	r2, r3, #4
   2974a:	603a      	str	r2, [r7, #0]
   2974c:	2200      	movs	r2, #0
   2974e:	601a      	str	r2, [r3, #0]
        for (pDest = &_szero; pDest < &_ezero;) {
   29750:	683a      	ldr	r2, [r7, #0]
   29752:	4b24      	ldr	r3, [pc, #144]	; (297e4 <Reset_Handler+0xd4>)
   29754:	429a      	cmp	r2, r3
   29756:	d3f6      	bcc.n	29746 <Reset_Handler+0x36>
        }

        /* Set the vector table base address */
        pSrc = (uint32_t *) & _sfixed;
   29758:	4b23      	ldr	r3, [pc, #140]	; (297e8 <Reset_Handler+0xd8>)
   2975a:	607b      	str	r3, [r7, #4]
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
   2975c:	4b23      	ldr	r3, [pc, #140]	; (297ec <Reset_Handler+0xdc>)
   2975e:	687a      	ldr	r2, [r7, #4]
   29760:	21ff      	movs	r1, #255	; 0xff
   29762:	438a      	bics	r2, r1
   29764:	609a      	str	r2, [r3, #8]

        /* Change default QOS values to have the best performance and correct USB behaviour */
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
   29766:	4a22      	ldr	r2, [pc, #136]	; (297f0 <Reset_Handler+0xe0>)
   29768:	2390      	movs	r3, #144	; 0x90
   2976a:	005b      	lsls	r3, r3, #1
   2976c:	2102      	movs	r1, #2
   2976e:	50d1      	str	r1, [r2, r3]
#if defined(ID_USB)
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
   29770:	4a20      	ldr	r2, [pc, #128]	; (297f4 <Reset_Handler+0xe4>)
   29772:	78d3      	ldrb	r3, [r2, #3]
   29774:	2103      	movs	r1, #3
   29776:	438b      	bics	r3, r1
   29778:	1c19      	adds	r1, r3, #0
   2977a:	2302      	movs	r3, #2
   2977c:	430b      	orrs	r3, r1
   2977e:	70d3      	strb	r3, [r2, #3]
        USB->DEVICE.QOSCTRL.bit.DQOS = 2;
   29780:	4a1c      	ldr	r2, [pc, #112]	; (297f4 <Reset_Handler+0xe4>)
   29782:	78d3      	ldrb	r3, [r2, #3]
   29784:	210c      	movs	r1, #12
   29786:	438b      	bics	r3, r1
   29788:	1c19      	adds	r1, r3, #0
   2978a:	2308      	movs	r3, #8
   2978c:	430b      	orrs	r3, r1
   2978e:	70d3      	strb	r3, [r2, #3]
#endif
        DMAC->QOSCTRL.bit.DQOS = 2;
   29790:	4a19      	ldr	r2, [pc, #100]	; (297f8 <Reset_Handler+0xe8>)
   29792:	7b93      	ldrb	r3, [r2, #14]
   29794:	2130      	movs	r1, #48	; 0x30
   29796:	438b      	bics	r3, r1
   29798:	1c19      	adds	r1, r3, #0
   2979a:	2320      	movs	r3, #32
   2979c:	430b      	orrs	r3, r1
   2979e:	7393      	strb	r3, [r2, #14]
        DMAC->QOSCTRL.bit.FQOS = 2;
   297a0:	4a15      	ldr	r2, [pc, #84]	; (297f8 <Reset_Handler+0xe8>)
   297a2:	7b93      	ldrb	r3, [r2, #14]
   297a4:	210c      	movs	r1, #12
   297a6:	438b      	bics	r3, r1
   297a8:	1c19      	adds	r1, r3, #0
   297aa:	2308      	movs	r3, #8
   297ac:	430b      	orrs	r3, r1
   297ae:	7393      	strb	r3, [r2, #14]
        DMAC->QOSCTRL.bit.WRBQOS = 2;
   297b0:	4a11      	ldr	r2, [pc, #68]	; (297f8 <Reset_Handler+0xe8>)
   297b2:	7b93      	ldrb	r3, [r2, #14]
   297b4:	2103      	movs	r1, #3
   297b6:	438b      	bics	r3, r1
   297b8:	1c19      	adds	r1, r3, #0
   297ba:	2302      	movs	r3, #2
   297bc:	430b      	orrs	r3, r1
   297be:	7393      	strb	r3, [r2, #14]

        /* Overwriting the default value of the NVMCTRL.CTRLB.MANW bit (errata reference 13134) */
        NVMCTRL->CTRLB.bit.MANW = 1;
   297c0:	4a0e      	ldr	r2, [pc, #56]	; (297fc <Reset_Handler+0xec>)
   297c2:	6853      	ldr	r3, [r2, #4]
   297c4:	2180      	movs	r1, #128	; 0x80
   297c6:	430b      	orrs	r3, r1
   297c8:	6053      	str	r3, [r2, #4]

        /* Initialize the C library */
        __libc_init_array();
   297ca:	4b0d      	ldr	r3, [pc, #52]	; (29800 <Reset_Handler+0xf0>)
   297cc:	4798      	blx	r3

        /* Branch to main function */
        main();
   297ce:	4b0d      	ldr	r3, [pc, #52]	; (29804 <Reset_Handler+0xf4>)
   297d0:	4798      	blx	r3

        /* Infinite loop */
        while (1);
   297d2:	e7fe      	b.n	297d2 <Reset_Handler+0xc2>
   297d4:	00038690 	.word	0x00038690
   297d8:	20000000 	.word	0x20000000
   297dc:	20000310 	.word	0x20000310
   297e0:	20000310 	.word	0x20000310
   297e4:	20005734 	.word	0x20005734
   297e8:	00012000 	.word	0x00012000
   297ec:	e000ed00 	.word	0xe000ed00
   297f0:	41007000 	.word	0x41007000
   297f4:	41005000 	.word	0x41005000
   297f8:	41004800 	.word	0x41004800
   297fc:	41004000 	.word	0x41004000
   29800:	00033071 	.word	0x00033071
   29804:	00030f45 	.word	0x00030f45

00029808 <Dummy_Handler>:
 * \brief Default interrupt handler for unused IRQs.
 */
void HardFault_HandlerC(unsigned long *hardfault_args);

void Dummy_Handler(void)
{
   29808:	b580      	push	{r7, lr}
   2980a:	af00      	add	r7, sp, #0
  __asm volatile (
   2980c:	2004      	movs	r0, #4
   2980e:	4671      	mov	r1, lr
   29810:	4208      	tst	r0, r1
   29812:	d002      	beq.n	2981a <_MSP>
   29814:	f3ef 8009 	mrs	r0, PSP
   29818:	e001      	b.n	2981e <_HALT>

0002981a <_MSP>:
   2981a:	f3ef 8008 	mrs	r0, MSP

0002981e <_HALT>:
   2981e:	6941      	ldr	r1, [r0, #20]
   29820:	e004      	b.n	2982c <HardFault_HandlerC>
   29822:	be00      	bkpt	0x0000
  "_HALT:              \n"
  " ldr r1,[r0,#20]  \n"
  " b HardFault_HandlerC \n"
  " bkpt #0          \n"
  );
}
   29824:	46c0      	nop			; (mov r8, r8)
   29826:	46bd      	mov	sp, r7
   29828:	bd80      	pop	{r7, pc}
	...

0002982c <HardFault_HandlerC>:

void HardFault_HandlerC(unsigned long *hardfault_args) {
   2982c:	b580      	push	{r7, lr}
   2982e:	b090      	sub	sp, #64	; 0x40
   29830:	af00      	add	r7, sp, #0
   29832:	6078      	str	r0, [r7, #4]
	volatile unsigned long _DFSR ;
	volatile unsigned long _AFSR ;
	volatile unsigned long _BFAR ;
	volatile unsigned long _MMAR ;
	
	stacked_r0  = ((unsigned long)hardfault_args[0]) ;
   29834:	687b      	ldr	r3, [r7, #4]
   29836:	681b      	ldr	r3, [r3, #0]
   29838:	63fb      	str	r3, [r7, #60]	; 0x3c
	stacked_r1  = ((unsigned long)hardfault_args[1]) ;
   2983a:	687b      	ldr	r3, [r7, #4]
   2983c:	685b      	ldr	r3, [r3, #4]
   2983e:	63bb      	str	r3, [r7, #56]	; 0x38
	stacked_r2  = ((unsigned long)hardfault_args[2]) ;
   29840:	687b      	ldr	r3, [r7, #4]
   29842:	689b      	ldr	r3, [r3, #8]
   29844:	637b      	str	r3, [r7, #52]	; 0x34
	stacked_r3  = ((unsigned long)hardfault_args[3]) ;
   29846:	687b      	ldr	r3, [r7, #4]
   29848:	68db      	ldr	r3, [r3, #12]
   2984a:	633b      	str	r3, [r7, #48]	; 0x30
	stacked_r12 = ((unsigned long)hardfault_args[4]) ;
   2984c:	687b      	ldr	r3, [r7, #4]
   2984e:	691b      	ldr	r3, [r3, #16]
   29850:	62fb      	str	r3, [r7, #44]	; 0x2c
	stacked_lr  = ((unsigned long)hardfault_args[5]) ;
   29852:	687b      	ldr	r3, [r7, #4]
   29854:	695b      	ldr	r3, [r3, #20]
   29856:	62bb      	str	r3, [r7, #40]	; 0x28
	stacked_pc  = ((unsigned long)hardfault_args[6]) ;
   29858:	687b      	ldr	r3, [r7, #4]
   2985a:	699b      	ldr	r3, [r3, #24]
   2985c:	627b      	str	r3, [r7, #36]	; 0x24
	stacked_psr = ((unsigned long)hardfault_args[7]) ;
   2985e:	687b      	ldr	r3, [r7, #4]
   29860:	69db      	ldr	r3, [r3, #28]
   29862:	623b      	str	r3, [r7, #32]
	
	// Configurable Fault Status Register
	// Consists of MMSR, BFSR and UFSR
	_CFSR = (*((volatile unsigned long *)(0xE000ED28))) ;
   29864:	4b0b      	ldr	r3, [pc, #44]	; (29894 <HardFault_HandlerC+0x68>)
   29866:	681b      	ldr	r3, [r3, #0]
   29868:	61fb      	str	r3, [r7, #28]
	
	// Hard Fault Status Register
	_HFSR = (*((volatile unsigned long *)(0xE000ED2C))) ;
   2986a:	4b0b      	ldr	r3, [pc, #44]	; (29898 <HardFault_HandlerC+0x6c>)
   2986c:	681b      	ldr	r3, [r3, #0]
   2986e:	61bb      	str	r3, [r7, #24]
	
	// Debug Fault Status Register
	_DFSR = (*((volatile unsigned long *)(0xE000ED30))) ;
   29870:	4b0a      	ldr	r3, [pc, #40]	; (2989c <HardFault_HandlerC+0x70>)
   29872:	681b      	ldr	r3, [r3, #0]
   29874:	617b      	str	r3, [r7, #20]
	
	// Auxiliary Fault Status Register
	_AFSR = (*((volatile unsigned long *)(0xE000ED3C))) ;
   29876:	4b0a      	ldr	r3, [pc, #40]	; (298a0 <HardFault_HandlerC+0x74>)
   29878:	681b      	ldr	r3, [r3, #0]
   2987a:	613b      	str	r3, [r7, #16]
	
	// Read the Fault Address Registers. These may not contain valid values.
	// Check BFARVALID/MMARVALID to see if they are valid values
	// MemManage Fault Address Register
	_MMAR = (*((volatile unsigned long *)(0xE000ED34))) ;
   2987c:	4b09      	ldr	r3, [pc, #36]	; (298a4 <HardFault_HandlerC+0x78>)
   2987e:	681b      	ldr	r3, [r3, #0]
   29880:	60bb      	str	r3, [r7, #8]
	// Bus Fault Address Register
	_BFAR = (*((volatile unsigned long *)(0xE000ED38))) ;
   29882:	4b09      	ldr	r3, [pc, #36]	; (298a8 <HardFault_HandlerC+0x7c>)
   29884:	681b      	ldr	r3, [r3, #0]
   29886:	60fb      	str	r3, [r7, #12]
	
	__asm("BKPT #0\n") ; // Break into the debugger
   29888:	be00      	bkpt	0x0000
	#pragma GCC diagnostic pop
   2988a:	46c0      	nop			; (mov r8, r8)
   2988c:	46bd      	mov	sp, r7
   2988e:	b010      	add	sp, #64	; 0x40
   29890:	bd80      	pop	{r7, pc}
   29892:	46c0      	nop			; (mov r8, r8)
   29894:	e000ed28 	.word	0xe000ed28
   29898:	e000ed2c 	.word	0xe000ed2c
   2989c:	e000ed30 	.word	0xe000ed30
   298a0:	e000ed3c 	.word	0xe000ed3c
   298a4:	e000ed34 	.word	0xe000ed34
   298a8:	e000ed38 	.word	0xe000ed38

000298ac <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
   298ac:	b580      	push	{r7, lr}
   298ae:	b086      	sub	sp, #24
   298b0:	af00      	add	r7, sp, #0
   298b2:	60f8      	str	r0, [r7, #12]
   298b4:	60b9      	str	r1, [r7, #8]
   298b6:	607a      	str	r2, [r7, #4]
	int nChars = 0;
   298b8:	2300      	movs	r3, #0
   298ba:	617b      	str	r3, [r7, #20]

	if (file != 0) {
   298bc:	68fb      	ldr	r3, [r7, #12]
   298be:	2b00      	cmp	r3, #0
   298c0:	d012      	beq.n	298e8 <_read+0x3c>
		return -1;
   298c2:	2301      	movs	r3, #1
   298c4:	425b      	negs	r3, r3
   298c6:	e013      	b.n	298f0 <_read+0x44>
	}

	for (; len > 0; --len) {
		ptr_get(stdio_base, ptr);
   298c8:	4b0b      	ldr	r3, [pc, #44]	; (298f8 <_read+0x4c>)
   298ca:	681a      	ldr	r2, [r3, #0]
   298cc:	4b0b      	ldr	r3, [pc, #44]	; (298fc <_read+0x50>)
   298ce:	681b      	ldr	r3, [r3, #0]
   298d0:	68b9      	ldr	r1, [r7, #8]
   298d2:	0018      	movs	r0, r3
   298d4:	4790      	blx	r2
		ptr++;
   298d6:	68bb      	ldr	r3, [r7, #8]
   298d8:	3301      	adds	r3, #1
   298da:	60bb      	str	r3, [r7, #8]
		nChars++;
   298dc:	697b      	ldr	r3, [r7, #20]
   298de:	3301      	adds	r3, #1
   298e0:	617b      	str	r3, [r7, #20]
	for (; len > 0; --len) {
   298e2:	687b      	ldr	r3, [r7, #4]
   298e4:	3b01      	subs	r3, #1
   298e6:	607b      	str	r3, [r7, #4]
   298e8:	687b      	ldr	r3, [r7, #4]
   298ea:	2b00      	cmp	r3, #0
   298ec:	dcec      	bgt.n	298c8 <_read+0x1c>
	}
	return nChars;
   298ee:	697b      	ldr	r3, [r7, #20]
}
   298f0:	0018      	movs	r0, r3
   298f2:	46bd      	mov	sp, r7
   298f4:	b006      	add	sp, #24
   298f6:	bd80      	pop	{r7, pc}
   298f8:	200056d0 	.word	0x200056d0
   298fc:	200056d8 	.word	0x200056d8

00029900 <_write>:
int __attribute__((weak))
_write (int file, char * ptr, int len);

int __attribute__((weak))
_write (int file, char * ptr, int len)
{
   29900:	b580      	push	{r7, lr}
   29902:	b086      	sub	sp, #24
   29904:	af00      	add	r7, sp, #0
   29906:	60f8      	str	r0, [r7, #12]
   29908:	60b9      	str	r1, [r7, #8]
   2990a:	607a      	str	r2, [r7, #4]
	int nChars = 0;
   2990c:	2300      	movs	r3, #0
   2990e:	617b      	str	r3, [r7, #20]

	if ((file != 1) && (file != 2) && (file!=3)) {
   29910:	68fb      	ldr	r3, [r7, #12]
   29912:	2b01      	cmp	r3, #1
   29914:	d01d      	beq.n	29952 <_write+0x52>
   29916:	68fb      	ldr	r3, [r7, #12]
   29918:	2b02      	cmp	r3, #2
   2991a:	d01a      	beq.n	29952 <_write+0x52>
   2991c:	68fb      	ldr	r3, [r7, #12]
   2991e:	2b03      	cmp	r3, #3
   29920:	d017      	beq.n	29952 <_write+0x52>
		return -1;
   29922:	2301      	movs	r3, #1
   29924:	425b      	negs	r3, r3
   29926:	e018      	b.n	2995a <_write+0x5a>
	}

	for (; len != 0; --len) {
		if (ptr_put(stdio_base, *ptr++) < 0) {
   29928:	4b0e      	ldr	r3, [pc, #56]	; (29964 <_write+0x64>)
   2992a:	681a      	ldr	r2, [r3, #0]
   2992c:	4b0e      	ldr	r3, [pc, #56]	; (29968 <_write+0x68>)
   2992e:	6818      	ldr	r0, [r3, #0]
   29930:	68bb      	ldr	r3, [r7, #8]
   29932:	1c59      	adds	r1, r3, #1
   29934:	60b9      	str	r1, [r7, #8]
   29936:	781b      	ldrb	r3, [r3, #0]
   29938:	0019      	movs	r1, r3
   2993a:	4790      	blx	r2
   2993c:	1e03      	subs	r3, r0, #0
   2993e:	da02      	bge.n	29946 <_write+0x46>
			return -1;
   29940:	2301      	movs	r3, #1
   29942:	425b      	negs	r3, r3
   29944:	e009      	b.n	2995a <_write+0x5a>
		}
		++nChars;
   29946:	697b      	ldr	r3, [r7, #20]
   29948:	3301      	adds	r3, #1
   2994a:	617b      	str	r3, [r7, #20]
	for (; len != 0; --len) {
   2994c:	687b      	ldr	r3, [r7, #4]
   2994e:	3b01      	subs	r3, #1
   29950:	607b      	str	r3, [r7, #4]
   29952:	687b      	ldr	r3, [r7, #4]
   29954:	2b00      	cmp	r3, #0
   29956:	d1e7      	bne.n	29928 <_write+0x28>
	}
	return nChars;
   29958:	697b      	ldr	r3, [r7, #20]
}
   2995a:	0018      	movs	r0, r3
   2995c:	46bd      	mov	sp, r7
   2995e:	b006      	add	sp, #24
   29960:	bd80      	pop	{r7, pc}
   29962:	46c0      	nop			; (mov r8, r8)
   29964:	200056d4 	.word	0x200056d4
   29968:	200056d8 	.word	0x200056d8

0002996c <_sbrk>:
extern void _exit(int status);
extern void _kill(int pid, int sig);
extern int _getpid(void);

extern caddr_t _sbrk(int incr)
{
   2996c:	b580      	push	{r7, lr}
   2996e:	b084      	sub	sp, #16
   29970:	af00      	add	r7, sp, #0
   29972:	6078      	str	r0, [r7, #4]
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;

	if (heap == NULL) {
   29974:	4b0a      	ldr	r3, [pc, #40]	; (299a0 <_sbrk+0x34>)
   29976:	681b      	ldr	r3, [r3, #0]
   29978:	2b00      	cmp	r3, #0
   2997a:	d102      	bne.n	29982 <_sbrk+0x16>
		heap = (unsigned char *)&_end;
   2997c:	4b08      	ldr	r3, [pc, #32]	; (299a0 <_sbrk+0x34>)
   2997e:	4a09      	ldr	r2, [pc, #36]	; (299a4 <_sbrk+0x38>)
   29980:	601a      	str	r2, [r3, #0]
	}
	prev_heap = heap;
   29982:	4b07      	ldr	r3, [pc, #28]	; (299a0 <_sbrk+0x34>)
   29984:	681b      	ldr	r3, [r3, #0]
   29986:	60fb      	str	r3, [r7, #12]

	heap += incr;
   29988:	4b05      	ldr	r3, [pc, #20]	; (299a0 <_sbrk+0x34>)
   2998a:	681a      	ldr	r2, [r3, #0]
   2998c:	687b      	ldr	r3, [r7, #4]
   2998e:	18d2      	adds	r2, r2, r3
   29990:	4b03      	ldr	r3, [pc, #12]	; (299a0 <_sbrk+0x34>)
   29992:	601a      	str	r2, [r3, #0]

	return (caddr_t) prev_heap;
   29994:	68fb      	ldr	r3, [r7, #12]
}
   29996:	0018      	movs	r0, r3
   29998:	46bd      	mov	sp, r7
   2999a:	b004      	add	sp, #16
   2999c:	bd80      	pop	{r7, pc}
   2999e:	46c0      	nop			; (mov r8, r8)
   299a0:	20003d90 	.word	0x20003d90
   299a4:	20007738 	.word	0x20007738

000299a8 <_close>:
{
	return -1;
}

extern int _close(int file)
{
   299a8:	b580      	push	{r7, lr}
   299aa:	b082      	sub	sp, #8
   299ac:	af00      	add	r7, sp, #0
   299ae:	6078      	str	r0, [r7, #4]
	return -1;
   299b0:	2301      	movs	r3, #1
   299b2:	425b      	negs	r3, r3
}
   299b4:	0018      	movs	r0, r3
   299b6:	46bd      	mov	sp, r7
   299b8:	b002      	add	sp, #8
   299ba:	bd80      	pop	{r7, pc}

000299bc <_fstat>:

extern int _fstat(int file, struct stat *st)
{
   299bc:	b580      	push	{r7, lr}
   299be:	b082      	sub	sp, #8
   299c0:	af00      	add	r7, sp, #0
   299c2:	6078      	str	r0, [r7, #4]
   299c4:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
   299c6:	683b      	ldr	r3, [r7, #0]
   299c8:	2280      	movs	r2, #128	; 0x80
   299ca:	0192      	lsls	r2, r2, #6
   299cc:	605a      	str	r2, [r3, #4]

	return 0;
   299ce:	2300      	movs	r3, #0
}
   299d0:	0018      	movs	r0, r3
   299d2:	46bd      	mov	sp, r7
   299d4:	b002      	add	sp, #8
   299d6:	bd80      	pop	{r7, pc}

000299d8 <_isatty>:

extern int _isatty(int file)
{
   299d8:	b580      	push	{r7, lr}
   299da:	b082      	sub	sp, #8
   299dc:	af00      	add	r7, sp, #0
   299de:	6078      	str	r0, [r7, #4]
	return 1;
   299e0:	2301      	movs	r3, #1
}
   299e2:	0018      	movs	r0, r3
   299e4:	46bd      	mov	sp, r7
   299e6:	b002      	add	sp, #8
   299e8:	bd80      	pop	{r7, pc}

000299ea <_lseek>:

extern int _lseek(int file, int ptr, int dir)
{
   299ea:	b580      	push	{r7, lr}
   299ec:	b084      	sub	sp, #16
   299ee:	af00      	add	r7, sp, #0
   299f0:	60f8      	str	r0, [r7, #12]
   299f2:	60b9      	str	r1, [r7, #8]
   299f4:	607a      	str	r2, [r7, #4]
	return 0;
   299f6:	2300      	movs	r3, #0
}
   299f8:	0018      	movs	r0, r3
   299fa:	46bd      	mov	sp, r7
   299fc:	b004      	add	sp, #16
   299fe:	bd80      	pop	{r7, pc}

00029a00 <rtc_calendar_get_time_defaults>:
 *
 * \param[out] time  Time structure to initialize
 */
static inline void rtc_calendar_get_time_defaults(
		struct rtc_calendar_time *const time)
{
   29a00:	b580      	push	{r7, lr}
   29a02:	b082      	sub	sp, #8
   29a04:	af00      	add	r7, sp, #0
   29a06:	6078      	str	r0, [r7, #4]
	time->second = 0;
   29a08:	687b      	ldr	r3, [r7, #4]
   29a0a:	2200      	movs	r2, #0
   29a0c:	701a      	strb	r2, [r3, #0]
	time->minute = 0;
   29a0e:	687b      	ldr	r3, [r7, #4]
   29a10:	2200      	movs	r2, #0
   29a12:	705a      	strb	r2, [r3, #1]
	time->hour   = 0;
   29a14:	687b      	ldr	r3, [r7, #4]
   29a16:	2200      	movs	r2, #0
   29a18:	709a      	strb	r2, [r3, #2]
	time->pm     = 0;
   29a1a:	687b      	ldr	r3, [r7, #4]
   29a1c:	2200      	movs	r2, #0
   29a1e:	70da      	strb	r2, [r3, #3]
	time->day    = 1;
   29a20:	687b      	ldr	r3, [r7, #4]
   29a22:	2201      	movs	r2, #1
   29a24:	711a      	strb	r2, [r3, #4]
	time->month  = 1;
   29a26:	687b      	ldr	r3, [r7, #4]
   29a28:	2201      	movs	r2, #1
   29a2a:	715a      	strb	r2, [r3, #5]
	time->year   = 2000;
   29a2c:	687b      	ldr	r3, [r7, #4]
   29a2e:	22fa      	movs	r2, #250	; 0xfa
   29a30:	00d2      	lsls	r2, r2, #3
   29a32:	80da      	strh	r2, [r3, #6]
}
   29a34:	46c0      	nop			; (mov r8, r8)
   29a36:	46bd      	mov	sp, r7
   29a38:	b002      	add	sp, #8
   29a3a:	bd80      	pop	{r7, pc}

00029a3c <rtc_calendar_get_config_defaults>:
 *  \param[out] config  Configuration structure to be initialized to default
 *                      values
 */
static inline void rtc_calendar_get_config_defaults(
		struct rtc_calendar_config *const config)
{
   29a3c:	b580      	push	{r7, lr}
   29a3e:	b086      	sub	sp, #24
   29a40:	af00      	add	r7, sp, #0
   29a42:	6078      	str	r0, [r7, #4]
	/* Sanity check argument */
	Assert(config);

	/* Initialize and set time structure to default */
	struct rtc_calendar_time time;
	rtc_calendar_get_time_defaults(&time);
   29a44:	230c      	movs	r3, #12
   29a46:	18fb      	adds	r3, r7, r3
   29a48:	0018      	movs	r0, r3
   29a4a:	4b23      	ldr	r3, [pc, #140]	; (29ad8 <rtc_calendar_get_config_defaults+0x9c>)
   29a4c:	4798      	blx	r3

	/* Set defaults into configuration structure */
	config->prescaler           = RTC_CALENDAR_PRESCALER_DIV_1024;
   29a4e:	687b      	ldr	r3, [r7, #4]
   29a50:	22a0      	movs	r2, #160	; 0xa0
   29a52:	0112      	lsls	r2, r2, #4
   29a54:	801a      	strh	r2, [r3, #0]
	config->clear_on_match      = false;
   29a56:	687b      	ldr	r3, [r7, #4]
   29a58:	2200      	movs	r2, #0
   29a5a:	709a      	strb	r2, [r3, #2]
#ifdef FEATURE_RTC_CONTINUOUSLY_UPDATED
	config->continuously_update = false;
   29a5c:	687b      	ldr	r3, [r7, #4]
   29a5e:	2200      	movs	r2, #0
   29a60:	70da      	strb	r2, [r3, #3]
#endif
	config->clock_24h           = false;
   29a62:	687b      	ldr	r3, [r7, #4]
   29a64:	2200      	movs	r2, #0
   29a66:	711a      	strb	r2, [r3, #4]
	config->year_init_value     = 2000;
   29a68:	687b      	ldr	r3, [r7, #4]
   29a6a:	22fa      	movs	r2, #250	; 0xfa
   29a6c:	00d2      	lsls	r2, r2, #3
   29a6e:	80da      	strh	r2, [r3, #6]
#if (SAML21XXXB) || (SAML22) || (SAMC20) || (SAMC21) || (SAMR30)
	config->enable_read_sync    = true;
#endif
	for (uint8_t i = 0; i < RTC_NUM_OF_ALARMS; i++) {
   29a70:	2317      	movs	r3, #23
   29a72:	18fb      	adds	r3, r7, r3
   29a74:	2200      	movs	r2, #0
   29a76:	701a      	strb	r2, [r3, #0]
   29a78:	e025      	b.n	29ac6 <rtc_calendar_get_config_defaults+0x8a>
		config->alarm[i].time = time;
   29a7a:	2317      	movs	r3, #23
   29a7c:	18fb      	adds	r3, r7, r3
   29a7e:	781a      	ldrb	r2, [r3, #0]
   29a80:	6879      	ldr	r1, [r7, #4]
   29a82:	2008      	movs	r0, #8
   29a84:	0013      	movs	r3, r2
   29a86:	009b      	lsls	r3, r3, #2
   29a88:	189b      	adds	r3, r3, r2
   29a8a:	005b      	lsls	r3, r3, #1
   29a8c:	18cb      	adds	r3, r1, r3
   29a8e:	181a      	adds	r2, r3, r0
   29a90:	230c      	movs	r3, #12
   29a92:	18fb      	adds	r3, r7, r3
   29a94:	0010      	movs	r0, r2
   29a96:	0019      	movs	r1, r3
   29a98:	2308      	movs	r3, #8
   29a9a:	001a      	movs	r2, r3
   29a9c:	4b0f      	ldr	r3, [pc, #60]	; (29adc <rtc_calendar_get_config_defaults+0xa0>)
   29a9e:	4798      	blx	r3
		config->alarm[i].mask = RTC_CALENDAR_ALARM_MASK_YEAR;
   29aa0:	2317      	movs	r3, #23
   29aa2:	18fb      	adds	r3, r7, r3
   29aa4:	781a      	ldrb	r2, [r3, #0]
   29aa6:	6879      	ldr	r1, [r7, #4]
   29aa8:	0013      	movs	r3, r2
   29aaa:	009b      	lsls	r3, r3, #2
   29aac:	189b      	adds	r3, r3, r2
   29aae:	005b      	lsls	r3, r3, #1
   29ab0:	18cb      	adds	r3, r1, r3
   29ab2:	3310      	adds	r3, #16
   29ab4:	2206      	movs	r2, #6
   29ab6:	701a      	strb	r2, [r3, #0]
	for (uint8_t i = 0; i < RTC_NUM_OF_ALARMS; i++) {
   29ab8:	2317      	movs	r3, #23
   29aba:	18fb      	adds	r3, r7, r3
   29abc:	781a      	ldrb	r2, [r3, #0]
   29abe:	2317      	movs	r3, #23
   29ac0:	18fb      	adds	r3, r7, r3
   29ac2:	3201      	adds	r2, #1
   29ac4:	701a      	strb	r2, [r3, #0]
   29ac6:	2317      	movs	r3, #23
   29ac8:	18fb      	adds	r3, r7, r3
   29aca:	781b      	ldrb	r3, [r3, #0]
   29acc:	2b00      	cmp	r3, #0
   29ace:	d0d4      	beq.n	29a7a <rtc_calendar_get_config_defaults+0x3e>
	}
}
   29ad0:	46c0      	nop			; (mov r8, r8)
   29ad2:	46bd      	mov	sp, r7
   29ad4:	b006      	add	sp, #24
   29ad6:	bd80      	pop	{r7, pc}
   29ad8:	00029a01 	.word	0x00029a01
   29adc:	000330e1 	.word	0x000330e1

00029ae0 <configure_rtc_calendar>:
#if (SAM0)
# include <rtc_calendar.h>
struct rtc_module rtc_instance;

static void configure_rtc_calendar(void)
{
   29ae0:	b580      	push	{r7, lr}
   29ae2:	b088      	sub	sp, #32
   29ae4:	af00      	add	r7, sp, #0
	/* Initialize RTC in calendar mode. */
	struct rtc_calendar_config config_rtc_calendar;

	rtc_calendar_get_config_defaults(&config_rtc_calendar);
   29ae6:	230c      	movs	r3, #12
   29ae8:	18fb      	adds	r3, r7, r3
   29aea:	0018      	movs	r0, r3
   29aec:	4b1a      	ldr	r3, [pc, #104]	; (29b58 <configure_rtc_calendar+0x78>)
   29aee:	4798      	blx	r3

	struct rtc_calendar_time init_time;
	rtc_calendar_get_time_defaults(&init_time);
   29af0:	1d3b      	adds	r3, r7, #4
   29af2:	0018      	movs	r0, r3
   29af4:	4b19      	ldr	r3, [pc, #100]	; (29b5c <configure_rtc_calendar+0x7c>)
   29af6:	4798      	blx	r3
	init_time.year   = 2014;
   29af8:	1d3b      	adds	r3, r7, #4
   29afa:	4a19      	ldr	r2, [pc, #100]	; (29b60 <configure_rtc_calendar+0x80>)
   29afc:	80da      	strh	r2, [r3, #6]
	init_time.month  = 1;
   29afe:	1d3b      	adds	r3, r7, #4
   29b00:	2201      	movs	r2, #1
   29b02:	715a      	strb	r2, [r3, #5]
	init_time.day    = 1;
   29b04:	1d3b      	adds	r3, r7, #4
   29b06:	2201      	movs	r2, #1
   29b08:	711a      	strb	r2, [r3, #4]
	init_time.hour   = 0;
   29b0a:	1d3b      	adds	r3, r7, #4
   29b0c:	2200      	movs	r2, #0
   29b0e:	709a      	strb	r2, [r3, #2]
	init_time.minute = 0;
   29b10:	1d3b      	adds	r3, r7, #4
   29b12:	2200      	movs	r2, #0
   29b14:	705a      	strb	r2, [r3, #1]
	init_time.second = 4;
   29b16:	1d3b      	adds	r3, r7, #4
   29b18:	2204      	movs	r2, #4
   29b1a:	701a      	strb	r2, [r3, #0]

	config_rtc_calendar.clock_24h     = true;
   29b1c:	230c      	movs	r3, #12
   29b1e:	18fb      	adds	r3, r7, r3
   29b20:	2201      	movs	r2, #1
   29b22:	711a      	strb	r2, [r3, #4]
	config_rtc_calendar.alarm[0].time = init_time;
   29b24:	230c      	movs	r3, #12
   29b26:	18fb      	adds	r3, r7, r3
   29b28:	1d3a      	adds	r2, r7, #4
   29b2a:	3308      	adds	r3, #8
   29b2c:	ca03      	ldmia	r2!, {r0, r1}
   29b2e:	c303      	stmia	r3!, {r0, r1}
	config_rtc_calendar.alarm[0].mask = RTC_CALENDAR_ALARM_MASK_YEAR;
   29b30:	230c      	movs	r3, #12
   29b32:	18fb      	adds	r3, r7, r3
   29b34:	2206      	movs	r2, #6
   29b36:	741a      	strb	r2, [r3, #16]

	rtc_calendar_init(&rtc_instance, RTC, &config_rtc_calendar);
   29b38:	230c      	movs	r3, #12
   29b3a:	18fa      	adds	r2, r7, r3
   29b3c:	4909      	ldr	r1, [pc, #36]	; (29b64 <configure_rtc_calendar+0x84>)
   29b3e:	4b0a      	ldr	r3, [pc, #40]	; (29b68 <configure_rtc_calendar+0x88>)
   29b40:	0018      	movs	r0, r3
   29b42:	4b0a      	ldr	r3, [pc, #40]	; (29b6c <configure_rtc_calendar+0x8c>)
   29b44:	4798      	blx	r3

	rtc_calendar_enable(&rtc_instance);
   29b46:	4b08      	ldr	r3, [pc, #32]	; (29b68 <configure_rtc_calendar+0x88>)
   29b48:	0018      	movs	r0, r3
   29b4a:	4b09      	ldr	r3, [pc, #36]	; (29b70 <configure_rtc_calendar+0x90>)
   29b4c:	4798      	blx	r3
}
   29b4e:	46c0      	nop			; (mov r8, r8)
   29b50:	46bd      	mov	sp, r7
   29b52:	b008      	add	sp, #32
   29b54:	bd80      	pop	{r7, pc}
   29b56:	46c0      	nop			; (mov r8, r8)
   29b58:	00029a3d 	.word	0x00029a3d
   29b5c:	00029a01 	.word	0x00029a01
   29b60:	000007de 	.word	0x000007de
   29b64:	40001400 	.word	0x40001400
   29b68:	200056dc 	.word	0x200056dc
   29b6c:	0002561d 	.word	0x0002561d
   29b70:	00025349 	.word	0x00025349

00029b74 <disk_initialize>:
 *
 * \return 0 or disk status in combination of DSTATUS bits
 *         (STA_NOINIT, STA_PROTECT).
 */
DSTATUS disk_initialize(BYTE drv)
{
   29b74:	b590      	push	{r4, r7, lr}
   29b76:	b085      	sub	sp, #20
   29b78:	af00      	add	r7, sp, #0
   29b7a:	0002      	movs	r2, r0
   29b7c:	1dfb      	adds	r3, r7, #7
   29b7e:	701a      	strb	r2, [r3, #0]
	/* Default RTC configuration, 24-hour mode */
	rtc_set_hour_mode(RTC, 0);
#endif

#if (SAMD20 || SAMD21 || SAMR21)
	configure_rtc_calendar();
   29b80:	4b1a      	ldr	r3, [pc, #104]	; (29bec <disk_initialize+0x78>)
   29b82:	4798      	blx	r3
	/* USB disk with multiple LUNs */
	if (drv > LUN_ID_USB + Lun_usb_get_lun()) {
		return STA_NOINIT;
	}
#else
	if (drv > MAX_LUN) {
   29b84:	1dfb      	adds	r3, r7, #7
   29b86:	781b      	ldrb	r3, [r3, #0]
   29b88:	2b01      	cmp	r3, #1
   29b8a:	d901      	bls.n	29b90 <disk_initialize+0x1c>
		/* At least one of the LUN should be defined */
		return STA_NOINIT;
   29b8c:	2301      	movs	r3, #1
   29b8e:	e029      	b.n	29be4 <disk_initialize+0x70>
	}
#endif
	/* Check LUN ready (USB disk report CTRL_BUSY then CTRL_GOOD) */
	for (i = 0; i < 2; i ++) {
   29b90:	2300      	movs	r3, #0
   29b92:	60fb      	str	r3, [r7, #12]
   29b94:	e010      	b.n	29bb8 <disk_initialize+0x44>
		mem_status = mem_test_unit_ready(drv);
   29b96:	230b      	movs	r3, #11
   29b98:	18fc      	adds	r4, r7, r3
   29b9a:	1dfb      	adds	r3, r7, #7
   29b9c:	781b      	ldrb	r3, [r3, #0]
   29b9e:	0018      	movs	r0, r3
   29ba0:	4b13      	ldr	r3, [pc, #76]	; (29bf0 <disk_initialize+0x7c>)
   29ba2:	4798      	blx	r3
   29ba4:	0003      	movs	r3, r0
   29ba6:	7023      	strb	r3, [r4, #0]
		if (CTRL_BUSY != mem_status) {
   29ba8:	230b      	movs	r3, #11
   29baa:	18fb      	adds	r3, r7, r3
   29bac:	781b      	ldrb	r3, [r3, #0]
   29bae:	2b03      	cmp	r3, #3
   29bb0:	d106      	bne.n	29bc0 <disk_initialize+0x4c>
	for (i = 0; i < 2; i ++) {
   29bb2:	68fb      	ldr	r3, [r7, #12]
   29bb4:	3301      	adds	r3, #1
   29bb6:	60fb      	str	r3, [r7, #12]
   29bb8:	68fb      	ldr	r3, [r7, #12]
   29bba:	2b01      	cmp	r3, #1
   29bbc:	ddeb      	ble.n	29b96 <disk_initialize+0x22>
   29bbe:	e000      	b.n	29bc2 <disk_initialize+0x4e>
			break;
   29bc0:	46c0      	nop			; (mov r8, r8)
		}
	}
	if (mem_status != CTRL_GOOD) {
   29bc2:	230b      	movs	r3, #11
   29bc4:	18fb      	adds	r3, r7, r3
   29bc6:	781b      	ldrb	r3, [r3, #0]
   29bc8:	2b00      	cmp	r3, #0
   29bca:	d001      	beq.n	29bd0 <disk_initialize+0x5c>
		return STA_NOINIT;
   29bcc:	2301      	movs	r3, #1
   29bce:	e009      	b.n	29be4 <disk_initialize+0x70>
	}

	/* Check Write Protection Status */
	if (mem_wr_protect(drv)) {
   29bd0:	1dfb      	adds	r3, r7, #7
   29bd2:	781b      	ldrb	r3, [r3, #0]
   29bd4:	0018      	movs	r0, r3
   29bd6:	4b07      	ldr	r3, [pc, #28]	; (29bf4 <disk_initialize+0x80>)
   29bd8:	4798      	blx	r3
   29bda:	1e03      	subs	r3, r0, #0
   29bdc:	d001      	beq.n	29be2 <disk_initialize+0x6e>
		return STA_PROTECT;
   29bde:	2304      	movs	r3, #4
   29be0:	e000      	b.n	29be4 <disk_initialize+0x70>
	}

	/* The memory should already be initialized */
	return 0;
   29be2:	2300      	movs	r3, #0
}
   29be4:	0018      	movs	r0, r3
   29be6:	46bd      	mov	sp, r7
   29be8:	b005      	add	sp, #20
   29bea:	bd90      	pop	{r4, r7, pc}
   29bec:	00029ae1 	.word	0x00029ae1
   29bf0:	00024845 	.word	0x00024845
   29bf4:	000248fd 	.word	0x000248fd

00029bf8 <disk_status>:
 *
 * \return 0 or disk status in combination of DSTATUS bits
 *         (STA_NOINIT, STA_NODISK, STA_PROTECT).
 */
DSTATUS disk_status(BYTE drv)
{
   29bf8:	b580      	push	{r7, lr}
   29bfa:	b082      	sub	sp, #8
   29bfc:	af00      	add	r7, sp, #0
   29bfe:	0002      	movs	r2, r0
   29c00:	1dfb      	adds	r3, r7, #7
   29c02:	701a      	strb	r2, [r3, #0]
	switch (mem_test_unit_ready(drv)) {
   29c04:	1dfb      	adds	r3, r7, #7
   29c06:	781b      	ldrb	r3, [r3, #0]
   29c08:	0018      	movs	r0, r3
   29c0a:	4b08      	ldr	r3, [pc, #32]	; (29c2c <disk_status+0x34>)
   29c0c:	4798      	blx	r3
   29c0e:	1e03      	subs	r3, r0, #0
   29c10:	d002      	beq.n	29c18 <disk_status+0x20>
   29c12:	2b02      	cmp	r3, #2
   29c14:	d002      	beq.n	29c1c <disk_status+0x24>
   29c16:	e003      	b.n	29c20 <disk_status+0x28>
	case CTRL_GOOD:
		return 0;
   29c18:	2300      	movs	r3, #0
   29c1a:	e002      	b.n	29c22 <disk_status+0x2a>
	case CTRL_NO_PRESENT:
		return STA_NOINIT | STA_NODISK;
   29c1c:	2303      	movs	r3, #3
   29c1e:	e000      	b.n	29c22 <disk_status+0x2a>
	default:
		return STA_NOINIT;
   29c20:	2301      	movs	r3, #1
	}
}
   29c22:	0018      	movs	r0, r3
   29c24:	46bd      	mov	sp, r7
   29c26:	b002      	add	sp, #8
   29c28:	bd80      	pop	{r7, pc}
   29c2a:	46c0      	nop			; (mov r8, r8)
   29c2c:	00024845 	.word	0x00024845

00029c30 <disk_read>:
 * \param count Number of sectors to read (1..255).
 *
 * \return RES_OK for success, otherwise DRESULT error code.
 */
DRESULT disk_read(BYTE drv, BYTE *buff, DWORD sector, BYTE count)
{
   29c30:	b590      	push	{r4, r7, lr}
   29c32:	b089      	sub	sp, #36	; 0x24
   29c34:	af00      	add	r7, sp, #0
   29c36:	60b9      	str	r1, [r7, #8]
   29c38:	607a      	str	r2, [r7, #4]
   29c3a:	0019      	movs	r1, r3
   29c3c:	230f      	movs	r3, #15
   29c3e:	18fb      	adds	r3, r7, r3
   29c40:	1c02      	adds	r2, r0, #0
   29c42:	701a      	strb	r2, [r3, #0]
   29c44:	230e      	movs	r3, #14
   29c46:	18fb      	adds	r3, r7, r3
   29c48:	1c0a      	adds	r2, r1, #0
   29c4a:	701a      	strb	r2, [r3, #0]
#if ACCESS_MEM_TO_RAM
	uint8_t uc_sector_size = mem_sector_size(drv);
   29c4c:	231b      	movs	r3, #27
   29c4e:	18fc      	adds	r4, r7, r3
   29c50:	230f      	movs	r3, #15
   29c52:	18fb      	adds	r3, r7, r3
   29c54:	781b      	ldrb	r3, [r3, #0]
   29c56:	0018      	movs	r0, r3
   29c58:	4b28      	ldr	r3, [pc, #160]	; (29cfc <disk_read+0xcc>)
   29c5a:	4798      	blx	r3
   29c5c:	0003      	movs	r3, r0
   29c5e:	7023      	strb	r3, [r4, #0]
	uint32_t i;
	uint32_t ul_last_sector_num;

	if (uc_sector_size == 0) {
   29c60:	231b      	movs	r3, #27
   29c62:	18fb      	adds	r3, r7, r3
   29c64:	781b      	ldrb	r3, [r3, #0]
   29c66:	2b00      	cmp	r3, #0
   29c68:	d101      	bne.n	29c6e <disk_read+0x3e>
		return RES_ERROR;
   29c6a:	2301      	movs	r3, #1
   29c6c:	e042      	b.n	29cf4 <disk_read+0xc4>
	}

	/* Check valid address */
	mem_read_capacity(drv, &ul_last_sector_num);
   29c6e:	2314      	movs	r3, #20
   29c70:	18fa      	adds	r2, r7, r3
   29c72:	230f      	movs	r3, #15
   29c74:	18fb      	adds	r3, r7, r3
   29c76:	781b      	ldrb	r3, [r3, #0]
   29c78:	0011      	movs	r1, r2
   29c7a:	0018      	movs	r0, r3
   29c7c:	4b20      	ldr	r3, [pc, #128]	; (29d00 <disk_read+0xd0>)
   29c7e:	4798      	blx	r3
	if ((sector + count * uc_sector_size) >
   29c80:	230e      	movs	r3, #14
   29c82:	18fb      	adds	r3, r7, r3
   29c84:	781b      	ldrb	r3, [r3, #0]
   29c86:	221b      	movs	r2, #27
   29c88:	18ba      	adds	r2, r7, r2
   29c8a:	7812      	ldrb	r2, [r2, #0]
   29c8c:	4353      	muls	r3, r2
   29c8e:	001a      	movs	r2, r3
   29c90:	687b      	ldr	r3, [r7, #4]
   29c92:	18d2      	adds	r2, r2, r3
			(ul_last_sector_num + 1) * uc_sector_size) {
   29c94:	697b      	ldr	r3, [r7, #20]
   29c96:	3301      	adds	r3, #1
   29c98:	211b      	movs	r1, #27
   29c9a:	1879      	adds	r1, r7, r1
   29c9c:	7809      	ldrb	r1, [r1, #0]
   29c9e:	434b      	muls	r3, r1
	if ((sector + count * uc_sector_size) >
   29ca0:	429a      	cmp	r2, r3
   29ca2:	d901      	bls.n	29ca8 <disk_read+0x78>
		return RES_PARERR;
   29ca4:	2304      	movs	r3, #4
   29ca6:	e025      	b.n	29cf4 <disk_read+0xc4>
	}

	/* Read the data */
	for (i = 0; i < count; i++) {
   29ca8:	2300      	movs	r3, #0
   29caa:	61fb      	str	r3, [r7, #28]
   29cac:	e01b      	b.n	29ce6 <disk_read+0xb6>
		if (memory_2_ram(drv, sector + uc_sector_size * i,
   29cae:	231b      	movs	r3, #27
   29cb0:	18fb      	adds	r3, r7, r3
   29cb2:	781b      	ldrb	r3, [r3, #0]
   29cb4:	69fa      	ldr	r2, [r7, #28]
   29cb6:	435a      	muls	r2, r3
   29cb8:	687b      	ldr	r3, [r7, #4]
   29cba:	18d1      	adds	r1, r2, r3
				buff + uc_sector_size * SECTOR_SIZE_DEFAULT * i) !=
   29cbc:	231b      	movs	r3, #27
   29cbe:	18fb      	adds	r3, r7, r3
   29cc0:	781b      	ldrb	r3, [r3, #0]
   29cc2:	69fa      	ldr	r2, [r7, #28]
   29cc4:	4353      	muls	r3, r2
   29cc6:	025b      	lsls	r3, r3, #9
   29cc8:	68ba      	ldr	r2, [r7, #8]
   29cca:	18d2      	adds	r2, r2, r3
		if (memory_2_ram(drv, sector + uc_sector_size * i,
   29ccc:	230f      	movs	r3, #15
   29cce:	18fb      	adds	r3, r7, r3
   29cd0:	781b      	ldrb	r3, [r3, #0]
   29cd2:	0018      	movs	r0, r3
   29cd4:	4b0b      	ldr	r3, [pc, #44]	; (29d04 <disk_read+0xd4>)
   29cd6:	4798      	blx	r3
   29cd8:	1e03      	subs	r3, r0, #0
   29cda:	d001      	beq.n	29ce0 <disk_read+0xb0>
				CTRL_GOOD) {
			return RES_ERROR;
   29cdc:	2301      	movs	r3, #1
   29cde:	e009      	b.n	29cf4 <disk_read+0xc4>
	for (i = 0; i < count; i++) {
   29ce0:	69fb      	ldr	r3, [r7, #28]
   29ce2:	3301      	adds	r3, #1
   29ce4:	61fb      	str	r3, [r7, #28]
   29ce6:	230e      	movs	r3, #14
   29ce8:	18fb      	adds	r3, r7, r3
   29cea:	781a      	ldrb	r2, [r3, #0]
   29cec:	69fb      	ldr	r3, [r7, #28]
   29cee:	429a      	cmp	r2, r3
   29cf0:	d8dd      	bhi.n	29cae <disk_read+0x7e>
		}
	}

	return RES_OK;
   29cf2:	2300      	movs	r3, #0

#else
	return RES_ERROR;
#endif
}
   29cf4:	0018      	movs	r0, r3
   29cf6:	46bd      	mov	sp, r7
   29cf8:	b009      	add	sp, #36	; 0x24
   29cfa:	bd90      	pop	{r4, r7, pc}
   29cfc:	000248d1 	.word	0x000248d1
   29d00:	00024885 	.word	0x00024885
   29d04:	00024945 	.word	0x00024945

00029d08 <disk_write>:
 *
 * \return RES_OK for success, otherwise DRESULT error code.
 */
#if _READONLY == 0
DRESULT disk_write(BYTE drv, BYTE const *buff, DWORD sector, BYTE count)
{
   29d08:	b590      	push	{r4, r7, lr}
   29d0a:	b089      	sub	sp, #36	; 0x24
   29d0c:	af00      	add	r7, sp, #0
   29d0e:	60b9      	str	r1, [r7, #8]
   29d10:	607a      	str	r2, [r7, #4]
   29d12:	0019      	movs	r1, r3
   29d14:	230f      	movs	r3, #15
   29d16:	18fb      	adds	r3, r7, r3
   29d18:	1c02      	adds	r2, r0, #0
   29d1a:	701a      	strb	r2, [r3, #0]
   29d1c:	230e      	movs	r3, #14
   29d1e:	18fb      	adds	r3, r7, r3
   29d20:	1c0a      	adds	r2, r1, #0
   29d22:	701a      	strb	r2, [r3, #0]
#if ACCESS_MEM_TO_RAM
	uint8_t uc_sector_size = mem_sector_size(drv);
   29d24:	231b      	movs	r3, #27
   29d26:	18fc      	adds	r4, r7, r3
   29d28:	230f      	movs	r3, #15
   29d2a:	18fb      	adds	r3, r7, r3
   29d2c:	781b      	ldrb	r3, [r3, #0]
   29d2e:	0018      	movs	r0, r3
   29d30:	4b28      	ldr	r3, [pc, #160]	; (29dd4 <disk_write+0xcc>)
   29d32:	4798      	blx	r3
   29d34:	0003      	movs	r3, r0
   29d36:	7023      	strb	r3, [r4, #0]
	uint32_t i;
	uint32_t ul_last_sector_num;

	if (uc_sector_size == 0) {
   29d38:	231b      	movs	r3, #27
   29d3a:	18fb      	adds	r3, r7, r3
   29d3c:	781b      	ldrb	r3, [r3, #0]
   29d3e:	2b00      	cmp	r3, #0
   29d40:	d101      	bne.n	29d46 <disk_write+0x3e>
		return RES_ERROR;
   29d42:	2301      	movs	r3, #1
   29d44:	e042      	b.n	29dcc <disk_write+0xc4>
	}

	/* Check valid address */
	mem_read_capacity(drv, &ul_last_sector_num);
   29d46:	2314      	movs	r3, #20
   29d48:	18fa      	adds	r2, r7, r3
   29d4a:	230f      	movs	r3, #15
   29d4c:	18fb      	adds	r3, r7, r3
   29d4e:	781b      	ldrb	r3, [r3, #0]
   29d50:	0011      	movs	r1, r2
   29d52:	0018      	movs	r0, r3
   29d54:	4b20      	ldr	r3, [pc, #128]	; (29dd8 <disk_write+0xd0>)
   29d56:	4798      	blx	r3
	if ((sector + count * uc_sector_size) >
   29d58:	230e      	movs	r3, #14
   29d5a:	18fb      	adds	r3, r7, r3
   29d5c:	781b      	ldrb	r3, [r3, #0]
   29d5e:	221b      	movs	r2, #27
   29d60:	18ba      	adds	r2, r7, r2
   29d62:	7812      	ldrb	r2, [r2, #0]
   29d64:	4353      	muls	r3, r2
   29d66:	001a      	movs	r2, r3
   29d68:	687b      	ldr	r3, [r7, #4]
   29d6a:	18d2      	adds	r2, r2, r3
			(ul_last_sector_num + 1) * uc_sector_size) {
   29d6c:	697b      	ldr	r3, [r7, #20]
   29d6e:	3301      	adds	r3, #1
   29d70:	211b      	movs	r1, #27
   29d72:	1879      	adds	r1, r7, r1
   29d74:	7809      	ldrb	r1, [r1, #0]
   29d76:	434b      	muls	r3, r1
	if ((sector + count * uc_sector_size) >
   29d78:	429a      	cmp	r2, r3
   29d7a:	d901      	bls.n	29d80 <disk_write+0x78>
		return RES_PARERR;
   29d7c:	2304      	movs	r3, #4
   29d7e:	e025      	b.n	29dcc <disk_write+0xc4>
	}

	/* Write the data */
	for (i = 0; i < count; i++) {
   29d80:	2300      	movs	r3, #0
   29d82:	61fb      	str	r3, [r7, #28]
   29d84:	e01b      	b.n	29dbe <disk_write+0xb6>
		if (ram_2_memory(drv, sector + uc_sector_size * i,
   29d86:	231b      	movs	r3, #27
   29d88:	18fb      	adds	r3, r7, r3
   29d8a:	781b      	ldrb	r3, [r3, #0]
   29d8c:	69fa      	ldr	r2, [r7, #28]
   29d8e:	435a      	muls	r2, r3
   29d90:	687b      	ldr	r3, [r7, #4]
   29d92:	18d1      	adds	r1, r2, r3
				buff + uc_sector_size * SECTOR_SIZE_DEFAULT * i) !=
   29d94:	231b      	movs	r3, #27
   29d96:	18fb      	adds	r3, r7, r3
   29d98:	781b      	ldrb	r3, [r3, #0]
   29d9a:	69fa      	ldr	r2, [r7, #28]
   29d9c:	4353      	muls	r3, r2
   29d9e:	025b      	lsls	r3, r3, #9
   29da0:	68ba      	ldr	r2, [r7, #8]
   29da2:	18d2      	adds	r2, r2, r3
		if (ram_2_memory(drv, sector + uc_sector_size * i,
   29da4:	230f      	movs	r3, #15
   29da6:	18fb      	adds	r3, r7, r3
   29da8:	781b      	ldrb	r3, [r3, #0]
   29daa:	0018      	movs	r0, r3
   29dac:	4b0b      	ldr	r3, [pc, #44]	; (29ddc <disk_write+0xd4>)
   29dae:	4798      	blx	r3
   29db0:	1e03      	subs	r3, r0, #0
   29db2:	d001      	beq.n	29db8 <disk_write+0xb0>
				CTRL_GOOD) {
			return RES_ERROR;
   29db4:	2301      	movs	r3, #1
   29db6:	e009      	b.n	29dcc <disk_write+0xc4>
	for (i = 0; i < count; i++) {
   29db8:	69fb      	ldr	r3, [r7, #28]
   29dba:	3301      	adds	r3, #1
   29dbc:	61fb      	str	r3, [r7, #28]
   29dbe:	230e      	movs	r3, #14
   29dc0:	18fb      	adds	r3, r7, r3
   29dc2:	781a      	ldrb	r2, [r3, #0]
   29dc4:	69fb      	ldr	r3, [r7, #28]
   29dc6:	429a      	cmp	r2, r3
   29dc8:	d8dd      	bhi.n	29d86 <disk_write+0x7e>
		}
	}

	return RES_OK;
   29dca:	2300      	movs	r3, #0

#else
	return RES_ERROR;
#endif
}
   29dcc:	0018      	movs	r0, r3
   29dce:	46bd      	mov	sp, r7
   29dd0:	b009      	add	sp, #36	; 0x24
   29dd2:	bd90      	pop	{r4, r7, pc}
   29dd4:	000248d1 	.word	0x000248d1
   29dd8:	00024885 	.word	0x00024885
   29ddc:	00024999 	.word	0x00024999

00029de0 <disk_ioctl>:
 * \param buff Buffer to send/receive control data.
 *
 * \return RES_OK for success, otherwise DRESULT error code.
 */
DRESULT disk_ioctl(BYTE drv, BYTE ctrl, void *buff)
{
   29de0:	b590      	push	{r4, r7, lr}
   29de2:	b085      	sub	sp, #20
   29de4:	af00      	add	r7, sp, #0
   29de6:	603a      	str	r2, [r7, #0]
   29de8:	1dfb      	adds	r3, r7, #7
   29dea:	1c02      	adds	r2, r0, #0
   29dec:	701a      	strb	r2, [r3, #0]
   29dee:	1dbb      	adds	r3, r7, #6
   29df0:	1c0a      	adds	r2, r1, #0
   29df2:	701a      	strb	r2, [r3, #0]
	DRESULT res = RES_PARERR;
   29df4:	230f      	movs	r3, #15
   29df6:	18fb      	adds	r3, r7, r3
   29df8:	2204      	movs	r2, #4
   29dfa:	701a      	strb	r2, [r3, #0]

	switch (ctrl) {
   29dfc:	1dbb      	adds	r3, r7, #6
   29dfe:	781b      	ldrb	r3, [r3, #0]
   29e00:	2b01      	cmp	r3, #1
   29e02:	d00f      	beq.n	29e24 <disk_ioctl+0x44>
   29e04:	dc02      	bgt.n	29e0c <disk_ioctl+0x2c>
   29e06:	2b00      	cmp	r3, #0
   29e08:	d044      	beq.n	29e94 <disk_ioctl+0xb4>
   29e0a:	e054      	b.n	29eb6 <disk_ioctl+0xd6>
   29e0c:	2b02      	cmp	r3, #2
   29e0e:	d01a      	beq.n	29e46 <disk_ioctl+0x66>
   29e10:	2b03      	cmp	r3, #3
   29e12:	d150      	bne.n	29eb6 <disk_ioctl+0xd6>
	case GET_BLOCK_SIZE:
		*(DWORD *)buff = 1;
   29e14:	683b      	ldr	r3, [r7, #0]
   29e16:	2201      	movs	r2, #1
   29e18:	601a      	str	r2, [r3, #0]
		res = RES_OK;
   29e1a:	230f      	movs	r3, #15
   29e1c:	18fb      	adds	r3, r7, r3
   29e1e:	2200      	movs	r2, #0
   29e20:	701a      	strb	r2, [r3, #0]
		break;
   29e22:	e04c      	b.n	29ebe <disk_ioctl+0xde>
	case GET_SECTOR_COUNT:
	{
		uint32_t ul_last_sector_num;

		/* Check valid address */
		mem_read_capacity(drv, &ul_last_sector_num);
   29e24:	2308      	movs	r3, #8
   29e26:	18fa      	adds	r2, r7, r3
   29e28:	1dfb      	adds	r3, r7, #7
   29e2a:	781b      	ldrb	r3, [r3, #0]
   29e2c:	0011      	movs	r1, r2
   29e2e:	0018      	movs	r0, r3
   29e30:	4b26      	ldr	r3, [pc, #152]	; (29ecc <disk_ioctl+0xec>)
   29e32:	4798      	blx	r3

		*(DWORD *)buff = ul_last_sector_num + 1;
   29e34:	68bb      	ldr	r3, [r7, #8]
   29e36:	1c5a      	adds	r2, r3, #1
   29e38:	683b      	ldr	r3, [r7, #0]
   29e3a:	601a      	str	r2, [r3, #0]

		res = RES_OK;
   29e3c:	230f      	movs	r3, #15
   29e3e:	18fb      	adds	r3, r7, r3
   29e40:	2200      	movs	r2, #0
   29e42:	701a      	strb	r2, [r3, #0]
	}
	break;
   29e44:	e03b      	b.n	29ebe <disk_ioctl+0xde>

	/* Get sectors on the disk (WORD) */
	case GET_SECTOR_SIZE:
	{
		uint8_t uc_sector_size = mem_sector_size(drv);
   29e46:	230e      	movs	r3, #14
   29e48:	18fc      	adds	r4, r7, r3
   29e4a:	1dfb      	adds	r3, r7, #7
   29e4c:	781b      	ldrb	r3, [r3, #0]
   29e4e:	0018      	movs	r0, r3
   29e50:	4b1f      	ldr	r3, [pc, #124]	; (29ed0 <disk_ioctl+0xf0>)
   29e52:	4798      	blx	r3
   29e54:	0003      	movs	r3, r0
   29e56:	7023      	strb	r3, [r4, #0]

		if ((uc_sector_size != SECTOR_SIZE_512) &&
   29e58:	230e      	movs	r3, #14
   29e5a:	18fb      	adds	r3, r7, r3
   29e5c:	781b      	ldrb	r3, [r3, #0]
   29e5e:	2b01      	cmp	r3, #1
   29e60:	d010      	beq.n	29e84 <disk_ioctl+0xa4>
   29e62:	230e      	movs	r3, #14
   29e64:	18fb      	adds	r3, r7, r3
   29e66:	781b      	ldrb	r3, [r3, #0]
   29e68:	2b02      	cmp	r3, #2
   29e6a:	d00b      	beq.n	29e84 <disk_ioctl+0xa4>
				(uc_sector_size != SECTOR_SIZE_1024) &&
   29e6c:	230e      	movs	r3, #14
   29e6e:	18fb      	adds	r3, r7, r3
   29e70:	781b      	ldrb	r3, [r3, #0]
   29e72:	2b04      	cmp	r3, #4
   29e74:	d006      	beq.n	29e84 <disk_ioctl+0xa4>
				(uc_sector_size != SECTOR_SIZE_2048) &&
   29e76:	230e      	movs	r3, #14
   29e78:	18fb      	adds	r3, r7, r3
   29e7a:	781b      	ldrb	r3, [r3, #0]
   29e7c:	2b08      	cmp	r3, #8
   29e7e:	d001      	beq.n	29e84 <disk_ioctl+0xa4>
				(uc_sector_size != SECTOR_SIZE_4096)) {
			/* The sector size is not supported by the FatFS */
			return RES_ERROR;
   29e80:	2301      	movs	r3, #1
   29e82:	e01f      	b.n	29ec4 <disk_ioctl+0xe4>
		}

		*(U8 *)buff = uc_sector_size * SECTOR_SIZE_DEFAULT;
   29e84:	683b      	ldr	r3, [r7, #0]
   29e86:	2200      	movs	r2, #0
   29e88:	701a      	strb	r2, [r3, #0]

		res = RES_OK;
   29e8a:	230f      	movs	r3, #15
   29e8c:	18fb      	adds	r3, r7, r3
   29e8e:	2200      	movs	r2, #0
   29e90:	701a      	strb	r2, [r3, #0]
	}
	break;
   29e92:	e014      	b.n	29ebe <disk_ioctl+0xde>

	/* Make sure that data has been written */
	case CTRL_SYNC:
		if (mem_test_unit_ready(drv) == CTRL_GOOD) {
   29e94:	1dfb      	adds	r3, r7, #7
   29e96:	781b      	ldrb	r3, [r3, #0]
   29e98:	0018      	movs	r0, r3
   29e9a:	4b0e      	ldr	r3, [pc, #56]	; (29ed4 <disk_ioctl+0xf4>)
   29e9c:	4798      	blx	r3
   29e9e:	1e03      	subs	r3, r0, #0
   29ea0:	d104      	bne.n	29eac <disk_ioctl+0xcc>
			res = RES_OK;
   29ea2:	230f      	movs	r3, #15
   29ea4:	18fb      	adds	r3, r7, r3
   29ea6:	2200      	movs	r2, #0
   29ea8:	701a      	strb	r2, [r3, #0]
		} else {
			res = RES_NOTRDY;
		}
		break;
   29eaa:	e008      	b.n	29ebe <disk_ioctl+0xde>
			res = RES_NOTRDY;
   29eac:	230f      	movs	r3, #15
   29eae:	18fb      	adds	r3, r7, r3
   29eb0:	2203      	movs	r2, #3
   29eb2:	701a      	strb	r2, [r3, #0]
		break;
   29eb4:	e003      	b.n	29ebe <disk_ioctl+0xde>

	default:
		res = RES_PARERR;
   29eb6:	230f      	movs	r3, #15
   29eb8:	18fb      	adds	r3, r7, r3
   29eba:	2204      	movs	r2, #4
   29ebc:	701a      	strb	r2, [r3, #0]
	}

	return res;
   29ebe:	230f      	movs	r3, #15
   29ec0:	18fb      	adds	r3, r7, r3
   29ec2:	781b      	ldrb	r3, [r3, #0]
}
   29ec4:	0018      	movs	r0, r3
   29ec6:	46bd      	mov	sp, r7
   29ec8:	b005      	add	sp, #20
   29eca:	bd90      	pop	{r4, r7, pc}
   29ecc:	00024885 	.word	0x00024885
   29ed0:	000248d1 	.word	0x000248d1
   29ed4:	00024845 	.word	0x00024845

00029ed8 <get_fattime>:
 * bit4:0    Second (0..29)
 *
 * \return Current time.
 */
uint32_t get_fattime(void)
{
   29ed8:	b580      	push	{r7, lr}
   29eda:	b084      	sub	sp, #16
   29edc:	af00      	add	r7, sp, #0
	uint32_t ul_time;
	struct rtc_calendar_time current_time;

	/* Retrieve date and time */
	rtc_calendar_get_time(&rtc_instance, &current_time);
   29ede:	1d3a      	adds	r2, r7, #4
   29ee0:	4b12      	ldr	r3, [pc, #72]	; (29f2c <get_fattime+0x54>)
   29ee2:	0011      	movs	r1, r2
   29ee4:	0018      	movs	r0, r3
   29ee6:	4b12      	ldr	r3, [pc, #72]	; (29f30 <get_fattime+0x58>)
   29ee8:	4798      	blx	r3

	ul_time = ((current_time.year - 1980) << 25)
   29eea:	1d3b      	adds	r3, r7, #4
   29eec:	88db      	ldrh	r3, [r3, #6]
   29eee:	4a11      	ldr	r2, [pc, #68]	; (29f34 <get_fattime+0x5c>)
   29ef0:	4694      	mov	ip, r2
   29ef2:	4463      	add	r3, ip
   29ef4:	065a      	lsls	r2, r3, #25
			| (current_time.month << 21)
   29ef6:	1d3b      	adds	r3, r7, #4
   29ef8:	795b      	ldrb	r3, [r3, #5]
   29efa:	055b      	lsls	r3, r3, #21
   29efc:	431a      	orrs	r2, r3
			| (current_time.day << 16)
   29efe:	1d3b      	adds	r3, r7, #4
   29f00:	791b      	ldrb	r3, [r3, #4]
   29f02:	041b      	lsls	r3, r3, #16
   29f04:	431a      	orrs	r2, r3
			| (current_time.hour << 11)
   29f06:	1d3b      	adds	r3, r7, #4
   29f08:	789b      	ldrb	r3, [r3, #2]
   29f0a:	02db      	lsls	r3, r3, #11
   29f0c:	431a      	orrs	r2, r3
			| (current_time.minute << 5)
   29f0e:	1d3b      	adds	r3, r7, #4
   29f10:	785b      	ldrb	r3, [r3, #1]
   29f12:	015b      	lsls	r3, r3, #5
   29f14:	4313      	orrs	r3, r2
			| ((current_time.second >> 1) << 0);
   29f16:	1d3a      	adds	r2, r7, #4
   29f18:	7812      	ldrb	r2, [r2, #0]
   29f1a:	0852      	lsrs	r2, r2, #1
   29f1c:	b2d2      	uxtb	r2, r2
   29f1e:	4313      	orrs	r3, r2
	ul_time = ((current_time.year - 1980) << 25)
   29f20:	60fb      	str	r3, [r7, #12]

	return ul_time;
   29f22:	68fb      	ldr	r3, [r7, #12]
}
   29f24:	0018      	movs	r0, r3
   29f26:	46bd      	mov	sp, r7
   29f28:	b004      	add	sp, #16
   29f2a:	bd80      	pop	{r7, pc}
   29f2c:	200056dc 	.word	0x200056dc
   29f30:	000256b1 	.word	0x000256b1
   29f34:	fffff844 	.word	0xfffff844

00029f38 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
   29f38:	b580      	push	{r7, lr}
   29f3a:	b086      	sub	sp, #24
   29f3c:	af00      	add	r7, sp, #0
   29f3e:	60f8      	str	r0, [r7, #12]
   29f40:	60b9      	str	r1, [r7, #8]
   29f42:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
   29f44:	68fb      	ldr	r3, [r7, #12]
   29f46:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
   29f48:	68bb      	ldr	r3, [r7, #8]
   29f4a:	613b      	str	r3, [r7, #16]
		*(int*)d = *(int*)s;
		d += sizeof(int); s += sizeof(int);
		cnt -= sizeof(int);
	}
#endif
	while (cnt--)
   29f4c:	e007      	b.n	29f5e <mem_cpy+0x26>
		*d++ = *s++;
   29f4e:	697b      	ldr	r3, [r7, #20]
   29f50:	1c5a      	adds	r2, r3, #1
   29f52:	617a      	str	r2, [r7, #20]
   29f54:	693a      	ldr	r2, [r7, #16]
   29f56:	1c51      	adds	r1, r2, #1
   29f58:	6139      	str	r1, [r7, #16]
   29f5a:	7812      	ldrb	r2, [r2, #0]
   29f5c:	701a      	strb	r2, [r3, #0]
	while (cnt--)
   29f5e:	687b      	ldr	r3, [r7, #4]
   29f60:	1e5a      	subs	r2, r3, #1
   29f62:	607a      	str	r2, [r7, #4]
   29f64:	2b00      	cmp	r3, #0
   29f66:	d1f2      	bne.n	29f4e <mem_cpy+0x16>
}
   29f68:	46c0      	nop			; (mov r8, r8)
   29f6a:	46bd      	mov	sp, r7
   29f6c:	b006      	add	sp, #24
   29f6e:	bd80      	pop	{r7, pc}

00029f70 <mem_set>:

/* Fill memory */
static
void mem_set (void* dst, int val, UINT cnt) {
   29f70:	b580      	push	{r7, lr}
   29f72:	b086      	sub	sp, #24
   29f74:	af00      	add	r7, sp, #0
   29f76:	60f8      	str	r0, [r7, #12]
   29f78:	60b9      	str	r1, [r7, #8]
   29f7a:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
   29f7c:	68fb      	ldr	r3, [r7, #12]
   29f7e:	617b      	str	r3, [r7, #20]

	while (cnt--)
   29f80:	e005      	b.n	29f8e <mem_set+0x1e>
		*d++ = (BYTE)val;
   29f82:	697b      	ldr	r3, [r7, #20]
   29f84:	1c5a      	adds	r2, r3, #1
   29f86:	617a      	str	r2, [r7, #20]
   29f88:	68ba      	ldr	r2, [r7, #8]
   29f8a:	b2d2      	uxtb	r2, r2
   29f8c:	701a      	strb	r2, [r3, #0]
	while (cnt--)
   29f8e:	687b      	ldr	r3, [r7, #4]
   29f90:	1e5a      	subs	r2, r3, #1
   29f92:	607a      	str	r2, [r7, #4]
   29f94:	2b00      	cmp	r3, #0
   29f96:	d1f4      	bne.n	29f82 <mem_set+0x12>
}
   29f98:	46c0      	nop			; (mov r8, r8)
   29f9a:	46bd      	mov	sp, r7
   29f9c:	b006      	add	sp, #24
   29f9e:	bd80      	pop	{r7, pc}

00029fa0 <mem_cmp>:

/* Compare memory to memory */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {
   29fa0:	b580      	push	{r7, lr}
   29fa2:	b088      	sub	sp, #32
   29fa4:	af00      	add	r7, sp, #0
   29fa6:	60f8      	str	r0, [r7, #12]
   29fa8:	60b9      	str	r1, [r7, #8]
   29faa:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
   29fac:	68fb      	ldr	r3, [r7, #12]
   29fae:	61fb      	str	r3, [r7, #28]
   29fb0:	68bb      	ldr	r3, [r7, #8]
   29fb2:	61bb      	str	r3, [r7, #24]
	int r = 0;
   29fb4:	2300      	movs	r3, #0
   29fb6:	617b      	str	r3, [r7, #20]

	while (cnt-- && (r = *d++ - *s++) == 0) ;
   29fb8:	46c0      	nop			; (mov r8, r8)
   29fba:	687b      	ldr	r3, [r7, #4]
   29fbc:	1e5a      	subs	r2, r3, #1
   29fbe:	607a      	str	r2, [r7, #4]
   29fc0:	2b00      	cmp	r3, #0
   29fc2:	d00d      	beq.n	29fe0 <mem_cmp+0x40>
   29fc4:	69fb      	ldr	r3, [r7, #28]
   29fc6:	1c5a      	adds	r2, r3, #1
   29fc8:	61fa      	str	r2, [r7, #28]
   29fca:	781b      	ldrb	r3, [r3, #0]
   29fcc:	0019      	movs	r1, r3
   29fce:	69bb      	ldr	r3, [r7, #24]
   29fd0:	1c5a      	adds	r2, r3, #1
   29fd2:	61ba      	str	r2, [r7, #24]
   29fd4:	781b      	ldrb	r3, [r3, #0]
   29fd6:	1acb      	subs	r3, r1, r3
   29fd8:	617b      	str	r3, [r7, #20]
   29fda:	697b      	ldr	r3, [r7, #20]
   29fdc:	2b00      	cmp	r3, #0
   29fde:	d0ec      	beq.n	29fba <mem_cmp+0x1a>
	return r;
   29fe0:	697b      	ldr	r3, [r7, #20]
}
   29fe2:	0018      	movs	r0, r3
   29fe4:	46bd      	mov	sp, r7
   29fe6:	b008      	add	sp, #32
   29fe8:	bd80      	pop	{r7, pc}

00029fea <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {
   29fea:	b580      	push	{r7, lr}
   29fec:	b082      	sub	sp, #8
   29fee:	af00      	add	r7, sp, #0
   29ff0:	6078      	str	r0, [r7, #4]
   29ff2:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
   29ff4:	e002      	b.n	29ffc <chk_chr+0x12>
   29ff6:	687b      	ldr	r3, [r7, #4]
   29ff8:	3301      	adds	r3, #1
   29ffa:	607b      	str	r3, [r7, #4]
   29ffc:	687b      	ldr	r3, [r7, #4]
   29ffe:	781b      	ldrb	r3, [r3, #0]
   2a000:	2b00      	cmp	r3, #0
   2a002:	d005      	beq.n	2a010 <chk_chr+0x26>
   2a004:	687b      	ldr	r3, [r7, #4]
   2a006:	781b      	ldrb	r3, [r3, #0]
   2a008:	001a      	movs	r2, r3
   2a00a:	683b      	ldr	r3, [r7, #0]
   2a00c:	429a      	cmp	r2, r3
   2a00e:	d1f2      	bne.n	29ff6 <chk_chr+0xc>
	return *str;
   2a010:	687b      	ldr	r3, [r7, #4]
   2a012:	781b      	ldrb	r3, [r3, #0]
}
   2a014:	0018      	movs	r0, r3
   2a016:	46bd      	mov	sp, r7
   2a018:	b002      	add	sp, #8
   2a01a:	bd80      	pop	{r7, pc}

0002a01c <move_window>:
static
FRESULT move_window (
	FATFS *fs,		/* File system object */
	DWORD sector	/* Sector number to make appearance in the fs->win[] */
)					/* Move to zero only writes back dirty window */
{
   2a01c:	b590      	push	{r4, r7, lr}
   2a01e:	b085      	sub	sp, #20
   2a020:	af00      	add	r7, sp, #0
   2a022:	6078      	str	r0, [r7, #4]
   2a024:	6039      	str	r1, [r7, #0]
	DWORD wsect;


	wsect = fs->winsect;
   2a026:	687b      	ldr	r3, [r7, #4]
   2a028:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   2a02a:	60fb      	str	r3, [r7, #12]
	if (wsect != sector) {	/* Changed current window */
   2a02c:	68fa      	ldr	r2, [r7, #12]
   2a02e:	683b      	ldr	r3, [r7, #0]
   2a030:	429a      	cmp	r2, r3
   2a032:	d04e      	beq.n	2a0d2 <move_window+0xb6>
#if !_FS_READONLY
		if (fs->wflag) {	/* Write back dirty window if needed */
   2a034:	687b      	ldr	r3, [r7, #4]
   2a036:	791b      	ldrb	r3, [r3, #4]
   2a038:	2b00      	cmp	r3, #0
   2a03a:	d037      	beq.n	2a0ac <move_window+0x90>
			if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK)
   2a03c:	687b      	ldr	r3, [r7, #4]
   2a03e:	7858      	ldrb	r0, [r3, #1]
   2a040:	687b      	ldr	r3, [r7, #4]
   2a042:	3330      	adds	r3, #48	; 0x30
   2a044:	0019      	movs	r1, r3
   2a046:	68fa      	ldr	r2, [r7, #12]
   2a048:	2301      	movs	r3, #1
   2a04a:	4c24      	ldr	r4, [pc, #144]	; (2a0dc <move_window+0xc0>)
   2a04c:	47a0      	blx	r4
   2a04e:	1e03      	subs	r3, r0, #0
   2a050:	d001      	beq.n	2a056 <move_window+0x3a>
				return FR_DISK_ERR;
   2a052:	2301      	movs	r3, #1
   2a054:	e03e      	b.n	2a0d4 <move_window+0xb8>
			fs->wflag = 0;
   2a056:	687b      	ldr	r3, [r7, #4]
   2a058:	2200      	movs	r2, #0
   2a05a:	711a      	strb	r2, [r3, #4]
			if (wsect < (fs->fatbase + fs->fsize)) {	/* In FAT area */
   2a05c:	687b      	ldr	r3, [r7, #4]
   2a05e:	6a1a      	ldr	r2, [r3, #32]
   2a060:	687b      	ldr	r3, [r7, #4]
   2a062:	69db      	ldr	r3, [r3, #28]
   2a064:	18d2      	adds	r2, r2, r3
   2a066:	68fb      	ldr	r3, [r7, #12]
   2a068:	429a      	cmp	r2, r3
   2a06a:	d91f      	bls.n	2a0ac <move_window+0x90>
				BYTE nf;
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
   2a06c:	230b      	movs	r3, #11
   2a06e:	18fb      	adds	r3, r7, r3
   2a070:	687a      	ldr	r2, [r7, #4]
   2a072:	78d2      	ldrb	r2, [r2, #3]
   2a074:	701a      	strb	r2, [r3, #0]
   2a076:	e014      	b.n	2a0a2 <move_window+0x86>
					wsect += fs->fsize;
   2a078:	687b      	ldr	r3, [r7, #4]
   2a07a:	69db      	ldr	r3, [r3, #28]
   2a07c:	68fa      	ldr	r2, [r7, #12]
   2a07e:	18d3      	adds	r3, r2, r3
   2a080:	60fb      	str	r3, [r7, #12]
					disk_write(fs->drv, fs->win, wsect, 1);
   2a082:	687b      	ldr	r3, [r7, #4]
   2a084:	7858      	ldrb	r0, [r3, #1]
   2a086:	687b      	ldr	r3, [r7, #4]
   2a088:	3330      	adds	r3, #48	; 0x30
   2a08a:	0019      	movs	r1, r3
   2a08c:	68fa      	ldr	r2, [r7, #12]
   2a08e:	2301      	movs	r3, #1
   2a090:	4c12      	ldr	r4, [pc, #72]	; (2a0dc <move_window+0xc0>)
   2a092:	47a0      	blx	r4
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
   2a094:	230b      	movs	r3, #11
   2a096:	18fb      	adds	r3, r7, r3
   2a098:	781a      	ldrb	r2, [r3, #0]
   2a09a:	230b      	movs	r3, #11
   2a09c:	18fb      	adds	r3, r7, r3
   2a09e:	3a01      	subs	r2, #1
   2a0a0:	701a      	strb	r2, [r3, #0]
   2a0a2:	230b      	movs	r3, #11
   2a0a4:	18fb      	adds	r3, r7, r3
   2a0a6:	781b      	ldrb	r3, [r3, #0]
   2a0a8:	2b01      	cmp	r3, #1
   2a0aa:	d8e5      	bhi.n	2a078 <move_window+0x5c>
				}
			}
		}
#endif
		if (sector) {
   2a0ac:	683b      	ldr	r3, [r7, #0]
   2a0ae:	2b00      	cmp	r3, #0
   2a0b0:	d00f      	beq.n	2a0d2 <move_window+0xb6>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK)
   2a0b2:	687b      	ldr	r3, [r7, #4]
   2a0b4:	7858      	ldrb	r0, [r3, #1]
   2a0b6:	687b      	ldr	r3, [r7, #4]
   2a0b8:	3330      	adds	r3, #48	; 0x30
   2a0ba:	0019      	movs	r1, r3
   2a0bc:	683a      	ldr	r2, [r7, #0]
   2a0be:	2301      	movs	r3, #1
   2a0c0:	4c07      	ldr	r4, [pc, #28]	; (2a0e0 <move_window+0xc4>)
   2a0c2:	47a0      	blx	r4
   2a0c4:	1e03      	subs	r3, r0, #0
   2a0c6:	d001      	beq.n	2a0cc <move_window+0xb0>
				return FR_DISK_ERR;
   2a0c8:	2301      	movs	r3, #1
   2a0ca:	e003      	b.n	2a0d4 <move_window+0xb8>
			fs->winsect = sector;
   2a0cc:	687b      	ldr	r3, [r7, #4]
   2a0ce:	683a      	ldr	r2, [r7, #0]
   2a0d0:	62da      	str	r2, [r3, #44]	; 0x2c
		}
	}

	return FR_OK;
   2a0d2:	2300      	movs	r3, #0
}
   2a0d4:	0018      	movs	r0, r3
   2a0d6:	46bd      	mov	sp, r7
   2a0d8:	b005      	add	sp, #20
   2a0da:	bd90      	pop	{r4, r7, pc}
   2a0dc:	00029d09 	.word	0x00029d09
   2a0e0:	00029c31 	.word	0x00029c31

0002a0e4 <sync>:
#if !_FS_READONLY
static
FRESULT sync (	/* FR_OK: successful, FR_DISK_ERR: failed */
	FATFS *fs	/* File system object */
)
{
   2a0e4:	b590      	push	{r4, r7, lr}
   2a0e6:	b085      	sub	sp, #20
   2a0e8:	af00      	add	r7, sp, #0
   2a0ea:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = move_window(fs, 0);
   2a0ec:	230f      	movs	r3, #15
   2a0ee:	18fc      	adds	r4, r7, r3
   2a0f0:	687b      	ldr	r3, [r7, #4]
   2a0f2:	2100      	movs	r1, #0
   2a0f4:	0018      	movs	r0, r3
   2a0f6:	4b52      	ldr	r3, [pc, #328]	; (2a240 <sync+0x15c>)
   2a0f8:	4798      	blx	r3
   2a0fa:	0003      	movs	r3, r0
   2a0fc:	7023      	strb	r3, [r4, #0]
	if (res == FR_OK) {
   2a0fe:	230f      	movs	r3, #15
   2a100:	18fb      	adds	r3, r7, r3
   2a102:	781b      	ldrb	r3, [r3, #0]
   2a104:	2b00      	cmp	r3, #0
   2a106:	d000      	beq.n	2a10a <sync+0x26>
   2a108:	e093      	b.n	2a232 <sync+0x14e>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag) {
   2a10a:	687b      	ldr	r3, [r7, #4]
   2a10c:	781b      	ldrb	r3, [r3, #0]
   2a10e:	2b03      	cmp	r3, #3
   2a110:	d000      	beq.n	2a114 <sync+0x30>
   2a112:	e081      	b.n	2a218 <sync+0x134>
   2a114:	687b      	ldr	r3, [r7, #4]
   2a116:	795b      	ldrb	r3, [r3, #5]
   2a118:	2b00      	cmp	r3, #0
   2a11a:	d07d      	beq.n	2a218 <sync+0x134>
			fs->winsect = 0;
   2a11c:	687b      	ldr	r3, [r7, #4]
   2a11e:	2200      	movs	r2, #0
   2a120:	62da      	str	r2, [r3, #44]	; 0x2c
			/* Create FSInfo structure */
			mem_set(fs->win, 0, 512);
   2a122:	687b      	ldr	r3, [r7, #4]
   2a124:	3330      	adds	r3, #48	; 0x30
   2a126:	0018      	movs	r0, r3
   2a128:	2380      	movs	r3, #128	; 0x80
   2a12a:	009b      	lsls	r3, r3, #2
   2a12c:	001a      	movs	r2, r3
   2a12e:	2100      	movs	r1, #0
   2a130:	4b44      	ldr	r3, [pc, #272]	; (2a244 <sync+0x160>)
   2a132:	4798      	blx	r3
			ST_WORD(fs->win+BS_55AA, 0xAA55);
   2a134:	687b      	ldr	r3, [r7, #4]
   2a136:	4a44      	ldr	r2, [pc, #272]	; (2a248 <sync+0x164>)
   2a138:	2155      	movs	r1, #85	; 0x55
   2a13a:	5499      	strb	r1, [r3, r2]
   2a13c:	687b      	ldr	r3, [r7, #4]
   2a13e:	4a43      	ldr	r2, [pc, #268]	; (2a24c <sync+0x168>)
   2a140:	21aa      	movs	r1, #170	; 0xaa
   2a142:	5499      	strb	r1, [r3, r2]
			ST_DWORD(fs->win+FSI_LeadSig, 0x41615252);
   2a144:	687b      	ldr	r3, [r7, #4]
   2a146:	2230      	movs	r2, #48	; 0x30
   2a148:	2152      	movs	r1, #82	; 0x52
   2a14a:	5499      	strb	r1, [r3, r2]
   2a14c:	687b      	ldr	r3, [r7, #4]
   2a14e:	2231      	movs	r2, #49	; 0x31
   2a150:	2152      	movs	r1, #82	; 0x52
   2a152:	5499      	strb	r1, [r3, r2]
   2a154:	687b      	ldr	r3, [r7, #4]
   2a156:	2232      	movs	r2, #50	; 0x32
   2a158:	2161      	movs	r1, #97	; 0x61
   2a15a:	5499      	strb	r1, [r3, r2]
   2a15c:	687b      	ldr	r3, [r7, #4]
   2a15e:	2233      	movs	r2, #51	; 0x33
   2a160:	2141      	movs	r1, #65	; 0x41
   2a162:	5499      	strb	r1, [r3, r2]
			ST_DWORD(fs->win+FSI_StrucSig, 0x61417272);
   2a164:	687a      	ldr	r2, [r7, #4]
   2a166:	2385      	movs	r3, #133	; 0x85
   2a168:	009b      	lsls	r3, r3, #2
   2a16a:	2172      	movs	r1, #114	; 0x72
   2a16c:	54d1      	strb	r1, [r2, r3]
   2a16e:	687b      	ldr	r3, [r7, #4]
   2a170:	4a37      	ldr	r2, [pc, #220]	; (2a250 <sync+0x16c>)
   2a172:	2172      	movs	r1, #114	; 0x72
   2a174:	5499      	strb	r1, [r3, r2]
   2a176:	687b      	ldr	r3, [r7, #4]
   2a178:	4a36      	ldr	r2, [pc, #216]	; (2a254 <sync+0x170>)
   2a17a:	2141      	movs	r1, #65	; 0x41
   2a17c:	5499      	strb	r1, [r3, r2]
   2a17e:	687b      	ldr	r3, [r7, #4]
   2a180:	4a35      	ldr	r2, [pc, #212]	; (2a258 <sync+0x174>)
   2a182:	2161      	movs	r1, #97	; 0x61
   2a184:	5499      	strb	r1, [r3, r2]
			ST_DWORD(fs->win+FSI_Free_Count, fs->free_clust);
   2a186:	687b      	ldr	r3, [r7, #4]
   2a188:	691b      	ldr	r3, [r3, #16]
   2a18a:	b2d9      	uxtb	r1, r3
   2a18c:	687a      	ldr	r2, [r7, #4]
   2a18e:	2386      	movs	r3, #134	; 0x86
   2a190:	009b      	lsls	r3, r3, #2
   2a192:	54d1      	strb	r1, [r2, r3]
   2a194:	687b      	ldr	r3, [r7, #4]
   2a196:	691b      	ldr	r3, [r3, #16]
   2a198:	b29b      	uxth	r3, r3
   2a19a:	0a1b      	lsrs	r3, r3, #8
   2a19c:	b29b      	uxth	r3, r3
   2a19e:	b2d9      	uxtb	r1, r3
   2a1a0:	687b      	ldr	r3, [r7, #4]
   2a1a2:	4a2e      	ldr	r2, [pc, #184]	; (2a25c <sync+0x178>)
   2a1a4:	5499      	strb	r1, [r3, r2]
   2a1a6:	687b      	ldr	r3, [r7, #4]
   2a1a8:	691b      	ldr	r3, [r3, #16]
   2a1aa:	0c1b      	lsrs	r3, r3, #16
   2a1ac:	b2d9      	uxtb	r1, r3
   2a1ae:	687b      	ldr	r3, [r7, #4]
   2a1b0:	4a2b      	ldr	r2, [pc, #172]	; (2a260 <sync+0x17c>)
   2a1b2:	5499      	strb	r1, [r3, r2]
   2a1b4:	687b      	ldr	r3, [r7, #4]
   2a1b6:	691b      	ldr	r3, [r3, #16]
   2a1b8:	0e1b      	lsrs	r3, r3, #24
   2a1ba:	b2d9      	uxtb	r1, r3
   2a1bc:	687b      	ldr	r3, [r7, #4]
   2a1be:	4a29      	ldr	r2, [pc, #164]	; (2a264 <sync+0x180>)
   2a1c0:	5499      	strb	r1, [r3, r2]
			ST_DWORD(fs->win+FSI_Nxt_Free, fs->last_clust);
   2a1c2:	687b      	ldr	r3, [r7, #4]
   2a1c4:	68db      	ldr	r3, [r3, #12]
   2a1c6:	b2d9      	uxtb	r1, r3
   2a1c8:	687a      	ldr	r2, [r7, #4]
   2a1ca:	2387      	movs	r3, #135	; 0x87
   2a1cc:	009b      	lsls	r3, r3, #2
   2a1ce:	54d1      	strb	r1, [r2, r3]
   2a1d0:	687b      	ldr	r3, [r7, #4]
   2a1d2:	68db      	ldr	r3, [r3, #12]
   2a1d4:	b29b      	uxth	r3, r3
   2a1d6:	0a1b      	lsrs	r3, r3, #8
   2a1d8:	b29b      	uxth	r3, r3
   2a1da:	b2d9      	uxtb	r1, r3
   2a1dc:	687b      	ldr	r3, [r7, #4]
   2a1de:	4a22      	ldr	r2, [pc, #136]	; (2a268 <sync+0x184>)
   2a1e0:	5499      	strb	r1, [r3, r2]
   2a1e2:	687b      	ldr	r3, [r7, #4]
   2a1e4:	68db      	ldr	r3, [r3, #12]
   2a1e6:	0c1b      	lsrs	r3, r3, #16
   2a1e8:	b2d9      	uxtb	r1, r3
   2a1ea:	687b      	ldr	r3, [r7, #4]
   2a1ec:	4a1f      	ldr	r2, [pc, #124]	; (2a26c <sync+0x188>)
   2a1ee:	5499      	strb	r1, [r3, r2]
   2a1f0:	687b      	ldr	r3, [r7, #4]
   2a1f2:	68db      	ldr	r3, [r3, #12]
   2a1f4:	0e1b      	lsrs	r3, r3, #24
   2a1f6:	b2d9      	uxtb	r1, r3
   2a1f8:	687b      	ldr	r3, [r7, #4]
   2a1fa:	4a1d      	ldr	r2, [pc, #116]	; (2a270 <sync+0x18c>)
   2a1fc:	5499      	strb	r1, [r3, r2]
			/* Write it into the FSInfo sector */
			disk_write(fs->drv, fs->win, fs->fsi_sector, 1);
   2a1fe:	687b      	ldr	r3, [r7, #4]
   2a200:	7858      	ldrb	r0, [r3, #1]
   2a202:	687b      	ldr	r3, [r7, #4]
   2a204:	3330      	adds	r3, #48	; 0x30
   2a206:	0019      	movs	r1, r3
   2a208:	687b      	ldr	r3, [r7, #4]
   2a20a:	695a      	ldr	r2, [r3, #20]
   2a20c:	2301      	movs	r3, #1
   2a20e:	4c19      	ldr	r4, [pc, #100]	; (2a274 <sync+0x190>)
   2a210:	47a0      	blx	r4
			fs->fsi_flag = 0;
   2a212:	687b      	ldr	r3, [r7, #4]
   2a214:	2200      	movs	r2, #0
   2a216:	715a      	strb	r2, [r3, #5]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK)
   2a218:	687b      	ldr	r3, [r7, #4]
   2a21a:	785b      	ldrb	r3, [r3, #1]
   2a21c:	2200      	movs	r2, #0
   2a21e:	2100      	movs	r1, #0
   2a220:	0018      	movs	r0, r3
   2a222:	4b15      	ldr	r3, [pc, #84]	; (2a278 <sync+0x194>)
   2a224:	4798      	blx	r3
   2a226:	1e03      	subs	r3, r0, #0
   2a228:	d003      	beq.n	2a232 <sync+0x14e>
			res = FR_DISK_ERR;
   2a22a:	230f      	movs	r3, #15
   2a22c:	18fb      	adds	r3, r7, r3
   2a22e:	2201      	movs	r2, #1
   2a230:	701a      	strb	r2, [r3, #0]
	}

	return res;
   2a232:	230f      	movs	r3, #15
   2a234:	18fb      	adds	r3, r7, r3
   2a236:	781b      	ldrb	r3, [r3, #0]
}
   2a238:	0018      	movs	r0, r3
   2a23a:	46bd      	mov	sp, r7
   2a23c:	b005      	add	sp, #20
   2a23e:	bd90      	pop	{r4, r7, pc}
   2a240:	0002a01d 	.word	0x0002a01d
   2a244:	00029f71 	.word	0x00029f71
   2a248:	0000022e 	.word	0x0000022e
   2a24c:	0000022f 	.word	0x0000022f
   2a250:	00000215 	.word	0x00000215
   2a254:	00000216 	.word	0x00000216
   2a258:	00000217 	.word	0x00000217
   2a25c:	00000219 	.word	0x00000219
   2a260:	0000021a 	.word	0x0000021a
   2a264:	0000021b 	.word	0x0000021b
   2a268:	0000021d 	.word	0x0000021d
   2a26c:	0000021e 	.word	0x0000021e
   2a270:	0000021f 	.word	0x0000021f
   2a274:	00029d09 	.word	0x00029d09
   2a278:	00029de1 	.word	0x00029de1

0002a27c <clust2sect>:

static DWORD clust2sect (	/* !=0: Sector number, 0: Failed - invalid cluster# */
	FATFS *fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
   2a27c:	b580      	push	{r7, lr}
   2a27e:	b082      	sub	sp, #8
   2a280:	af00      	add	r7, sp, #0
   2a282:	6078      	str	r0, [r7, #4]
   2a284:	6039      	str	r1, [r7, #0]
	clst -= 2;
   2a286:	683b      	ldr	r3, [r7, #0]
   2a288:	3b02      	subs	r3, #2
   2a28a:	603b      	str	r3, [r7, #0]
	if (clst >= (fs->n_fatent - 2)) return 0;		/* Invalid cluster# */
   2a28c:	687b      	ldr	r3, [r7, #4]
   2a28e:	699b      	ldr	r3, [r3, #24]
   2a290:	1e9a      	subs	r2, r3, #2
   2a292:	683b      	ldr	r3, [r7, #0]
   2a294:	429a      	cmp	r2, r3
   2a296:	d801      	bhi.n	2a29c <clust2sect+0x20>
   2a298:	2300      	movs	r3, #0
   2a29a:	e007      	b.n	2a2ac <clust2sect+0x30>
	return clst * fs->csize + fs->database;
   2a29c:	687b      	ldr	r3, [r7, #4]
   2a29e:	789b      	ldrb	r3, [r3, #2]
   2a2a0:	001a      	movs	r2, r3
   2a2a2:	683b      	ldr	r3, [r7, #0]
   2a2a4:	435a      	muls	r2, r3
   2a2a6:	687b      	ldr	r3, [r7, #4]
   2a2a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   2a2aa:	18d3      	adds	r3, r2, r3
}
   2a2ac:	0018      	movs	r0, r3
   2a2ae:	46bd      	mov	sp, r7
   2a2b0:	b002      	add	sp, #8
   2a2b2:	bd80      	pop	{r7, pc}

0002a2b4 <get_fat>:

static DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, Else:Cluster status */
	FATFS *fs,	/* File system object */
	DWORD clst	/* Cluster# to get the link information */
)
{
   2a2b4:	b580      	push	{r7, lr}
   2a2b6:	b086      	sub	sp, #24
   2a2b8:	af00      	add	r7, sp, #0
   2a2ba:	6078      	str	r0, [r7, #4]
   2a2bc:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	BYTE *p;


	if (clst < 2 || clst >= fs->n_fatent)	/* Chack range */
   2a2be:	683b      	ldr	r3, [r7, #0]
   2a2c0:	2b01      	cmp	r3, #1
   2a2c2:	d904      	bls.n	2a2ce <get_fat+0x1a>
   2a2c4:	687b      	ldr	r3, [r7, #4]
   2a2c6:	699a      	ldr	r2, [r3, #24]
   2a2c8:	683b      	ldr	r3, [r7, #0]
   2a2ca:	429a      	cmp	r2, r3
   2a2cc:	d801      	bhi.n	2a2d2 <get_fat+0x1e>
		return 1;
   2a2ce:	2301      	movs	r3, #1
   2a2d0:	e09f      	b.n	2a412 <get_fat+0x15e>

	switch (fs->fs_type) {
   2a2d2:	687b      	ldr	r3, [r7, #4]
   2a2d4:	781b      	ldrb	r3, [r3, #0]
   2a2d6:	2b02      	cmp	r3, #2
   2a2d8:	d048      	beq.n	2a36c <get_fat+0xb8>
   2a2da:	2b03      	cmp	r3, #3
   2a2dc:	d067      	beq.n	2a3ae <get_fat+0xfa>
   2a2de:	2b01      	cmp	r3, #1
   2a2e0:	d000      	beq.n	2a2e4 <get_fat+0x30>
   2a2e2:	e094      	b.n	2a40e <get_fat+0x15a>
	case FS_FAT12 :
		bc = (UINT)clst; bc += bc / 2;
   2a2e4:	683b      	ldr	r3, [r7, #0]
   2a2e6:	617b      	str	r3, [r7, #20]
   2a2e8:	697b      	ldr	r3, [r7, #20]
   2a2ea:	085b      	lsrs	r3, r3, #1
   2a2ec:	697a      	ldr	r2, [r7, #20]
   2a2ee:	18d3      	adds	r3, r2, r3
   2a2f0:	617b      	str	r3, [r7, #20]
		if (move_window(fs, fs->fatbase + (bc / SS(fs)))) break;
   2a2f2:	687b      	ldr	r3, [r7, #4]
   2a2f4:	6a1a      	ldr	r2, [r3, #32]
   2a2f6:	697b      	ldr	r3, [r7, #20]
   2a2f8:	0a5b      	lsrs	r3, r3, #9
   2a2fa:	18d2      	adds	r2, r2, r3
   2a2fc:	687b      	ldr	r3, [r7, #4]
   2a2fe:	0011      	movs	r1, r2
   2a300:	0018      	movs	r0, r3
   2a302:	4b46      	ldr	r3, [pc, #280]	; (2a41c <get_fat+0x168>)
   2a304:	4798      	blx	r3
   2a306:	1e03      	subs	r3, r0, #0
   2a308:	d000      	beq.n	2a30c <get_fat+0x58>
   2a30a:	e079      	b.n	2a400 <get_fat+0x14c>
		wc = fs->win[bc % SS(fs)]; bc++;
   2a30c:	697b      	ldr	r3, [r7, #20]
   2a30e:	05db      	lsls	r3, r3, #23
   2a310:	0ddb      	lsrs	r3, r3, #23
   2a312:	687a      	ldr	r2, [r7, #4]
   2a314:	2130      	movs	r1, #48	; 0x30
   2a316:	18d3      	adds	r3, r2, r3
   2a318:	185b      	adds	r3, r3, r1
   2a31a:	781b      	ldrb	r3, [r3, #0]
   2a31c:	613b      	str	r3, [r7, #16]
   2a31e:	697b      	ldr	r3, [r7, #20]
   2a320:	3301      	adds	r3, #1
   2a322:	617b      	str	r3, [r7, #20]
		if (move_window(fs, fs->fatbase + (bc / SS(fs)))) break;
   2a324:	687b      	ldr	r3, [r7, #4]
   2a326:	6a1a      	ldr	r2, [r3, #32]
   2a328:	697b      	ldr	r3, [r7, #20]
   2a32a:	0a5b      	lsrs	r3, r3, #9
   2a32c:	18d2      	adds	r2, r2, r3
   2a32e:	687b      	ldr	r3, [r7, #4]
   2a330:	0011      	movs	r1, r2
   2a332:	0018      	movs	r0, r3
   2a334:	4b39      	ldr	r3, [pc, #228]	; (2a41c <get_fat+0x168>)
   2a336:	4798      	blx	r3
   2a338:	1e03      	subs	r3, r0, #0
   2a33a:	d163      	bne.n	2a404 <get_fat+0x150>
		wc |= fs->win[bc % SS(fs)] << 8;
   2a33c:	697b      	ldr	r3, [r7, #20]
   2a33e:	05db      	lsls	r3, r3, #23
   2a340:	0ddb      	lsrs	r3, r3, #23
   2a342:	687a      	ldr	r2, [r7, #4]
   2a344:	2130      	movs	r1, #48	; 0x30
   2a346:	18d3      	adds	r3, r2, r3
   2a348:	185b      	adds	r3, r3, r1
   2a34a:	781b      	ldrb	r3, [r3, #0]
   2a34c:	021b      	lsls	r3, r3, #8
   2a34e:	001a      	movs	r2, r3
   2a350:	693b      	ldr	r3, [r7, #16]
   2a352:	4313      	orrs	r3, r2
   2a354:	613b      	str	r3, [r7, #16]
		return (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
   2a356:	683b      	ldr	r3, [r7, #0]
   2a358:	2201      	movs	r2, #1
   2a35a:	4013      	ands	r3, r2
   2a35c:	d002      	beq.n	2a364 <get_fat+0xb0>
   2a35e:	693b      	ldr	r3, [r7, #16]
   2a360:	091b      	lsrs	r3, r3, #4
   2a362:	e056      	b.n	2a412 <get_fat+0x15e>
   2a364:	693b      	ldr	r3, [r7, #16]
   2a366:	051b      	lsls	r3, r3, #20
   2a368:	0d1b      	lsrs	r3, r3, #20
   2a36a:	e052      	b.n	2a412 <get_fat+0x15e>

	case FS_FAT16 :
		if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)))) break;
   2a36c:	687b      	ldr	r3, [r7, #4]
   2a36e:	6a1a      	ldr	r2, [r3, #32]
   2a370:	683b      	ldr	r3, [r7, #0]
   2a372:	0a1b      	lsrs	r3, r3, #8
   2a374:	18d2      	adds	r2, r2, r3
   2a376:	687b      	ldr	r3, [r7, #4]
   2a378:	0011      	movs	r1, r2
   2a37a:	0018      	movs	r0, r3
   2a37c:	4b27      	ldr	r3, [pc, #156]	; (2a41c <get_fat+0x168>)
   2a37e:	4798      	blx	r3
   2a380:	1e03      	subs	r3, r0, #0
   2a382:	d141      	bne.n	2a408 <get_fat+0x154>
		p = &fs->win[clst * 2 % SS(fs)];
   2a384:	683b      	ldr	r3, [r7, #0]
   2a386:	005a      	lsls	r2, r3, #1
   2a388:	23ff      	movs	r3, #255	; 0xff
   2a38a:	005b      	lsls	r3, r3, #1
   2a38c:	4013      	ands	r3, r2
   2a38e:	3330      	adds	r3, #48	; 0x30
   2a390:	687a      	ldr	r2, [r7, #4]
   2a392:	18d3      	adds	r3, r2, r3
   2a394:	60fb      	str	r3, [r7, #12]
		return LD_WORD(p);
   2a396:	68fb      	ldr	r3, [r7, #12]
   2a398:	3301      	adds	r3, #1
   2a39a:	781b      	ldrb	r3, [r3, #0]
   2a39c:	021b      	lsls	r3, r3, #8
   2a39e:	b21a      	sxth	r2, r3
   2a3a0:	68fb      	ldr	r3, [r7, #12]
   2a3a2:	781b      	ldrb	r3, [r3, #0]
   2a3a4:	b21b      	sxth	r3, r3
   2a3a6:	4313      	orrs	r3, r2
   2a3a8:	b21b      	sxth	r3, r3
   2a3aa:	b29b      	uxth	r3, r3
   2a3ac:	e031      	b.n	2a412 <get_fat+0x15e>

	case FS_FAT32 :
		if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)))) break;
   2a3ae:	687b      	ldr	r3, [r7, #4]
   2a3b0:	6a1a      	ldr	r2, [r3, #32]
   2a3b2:	683b      	ldr	r3, [r7, #0]
   2a3b4:	09db      	lsrs	r3, r3, #7
   2a3b6:	18d2      	adds	r2, r2, r3
   2a3b8:	687b      	ldr	r3, [r7, #4]
   2a3ba:	0011      	movs	r1, r2
   2a3bc:	0018      	movs	r0, r3
   2a3be:	4b17      	ldr	r3, [pc, #92]	; (2a41c <get_fat+0x168>)
   2a3c0:	4798      	blx	r3
   2a3c2:	1e03      	subs	r3, r0, #0
   2a3c4:	d122      	bne.n	2a40c <get_fat+0x158>
		p = &fs->win[clst * 4 % SS(fs)];
   2a3c6:	683b      	ldr	r3, [r7, #0]
   2a3c8:	009a      	lsls	r2, r3, #2
   2a3ca:	23fe      	movs	r3, #254	; 0xfe
   2a3cc:	005b      	lsls	r3, r3, #1
   2a3ce:	4013      	ands	r3, r2
   2a3d0:	3330      	adds	r3, #48	; 0x30
   2a3d2:	687a      	ldr	r2, [r7, #4]
   2a3d4:	18d3      	adds	r3, r2, r3
   2a3d6:	60fb      	str	r3, [r7, #12]
		return LD_DWORD(p) & 0x0FFFFFFF;
   2a3d8:	68fb      	ldr	r3, [r7, #12]
   2a3da:	3303      	adds	r3, #3
   2a3dc:	781b      	ldrb	r3, [r3, #0]
   2a3de:	061a      	lsls	r2, r3, #24
   2a3e0:	68fb      	ldr	r3, [r7, #12]
   2a3e2:	3302      	adds	r3, #2
   2a3e4:	781b      	ldrb	r3, [r3, #0]
   2a3e6:	041b      	lsls	r3, r3, #16
   2a3e8:	4313      	orrs	r3, r2
   2a3ea:	68fa      	ldr	r2, [r7, #12]
   2a3ec:	3201      	adds	r2, #1
   2a3ee:	7812      	ldrb	r2, [r2, #0]
   2a3f0:	0212      	lsls	r2, r2, #8
   2a3f2:	4313      	orrs	r3, r2
   2a3f4:	68fa      	ldr	r2, [r7, #12]
   2a3f6:	7812      	ldrb	r2, [r2, #0]
   2a3f8:	4313      	orrs	r3, r2
   2a3fa:	011b      	lsls	r3, r3, #4
   2a3fc:	091b      	lsrs	r3, r3, #4
   2a3fe:	e008      	b.n	2a412 <get_fat+0x15e>
		if (move_window(fs, fs->fatbase + (bc / SS(fs)))) break;
   2a400:	46c0      	nop			; (mov r8, r8)
   2a402:	e004      	b.n	2a40e <get_fat+0x15a>
		if (move_window(fs, fs->fatbase + (bc / SS(fs)))) break;
   2a404:	46c0      	nop			; (mov r8, r8)
   2a406:	e002      	b.n	2a40e <get_fat+0x15a>
		if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)))) break;
   2a408:	46c0      	nop			; (mov r8, r8)
   2a40a:	e000      	b.n	2a40e <get_fat+0x15a>
		if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)))) break;
   2a40c:	46c0      	nop			; (mov r8, r8)
	}

	return 0xFFFFFFFF;	/* An error occurred at the disk I/O layer */
   2a40e:	2301      	movs	r3, #1
   2a410:	425b      	negs	r3, r3
}
   2a412:	0018      	movs	r0, r3
   2a414:	46bd      	mov	sp, r7
   2a416:	b006      	add	sp, #24
   2a418:	bd80      	pop	{r7, pc}
   2a41a:	46c0      	nop			; (mov r8, r8)
   2a41c:	0002a01d 	.word	0x0002a01d

0002a420 <put_fat>:
static FRESULT put_fat (
	FATFS *fs,	/* File system object */
	DWORD clst,	/* Cluster# to be changed in range of 2 to fs->n_fatent - 1 */
	DWORD val	/* New value to mark the cluster */
)
{
   2a420:	b590      	push	{r4, r7, lr}
   2a422:	b089      	sub	sp, #36	; 0x24
   2a424:	af00      	add	r7, sp, #0
   2a426:	60f8      	str	r0, [r7, #12]
   2a428:	60b9      	str	r1, [r7, #8]
   2a42a:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res;


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
   2a42c:	68bb      	ldr	r3, [r7, #8]
   2a42e:	2b01      	cmp	r3, #1
   2a430:	d904      	bls.n	2a43c <put_fat+0x1c>
   2a432:	68fb      	ldr	r3, [r7, #12]
   2a434:	699a      	ldr	r2, [r3, #24]
   2a436:	68bb      	ldr	r3, [r7, #8]
   2a438:	429a      	cmp	r2, r3
   2a43a:	d804      	bhi.n	2a446 <put_fat+0x26>
		res = FR_INT_ERR;
   2a43c:	231f      	movs	r3, #31
   2a43e:	18fb      	adds	r3, r7, r3
   2a440:	2202      	movs	r2, #2
   2a442:	701a      	strb	r2, [r3, #0]
   2a444:	e100      	b.n	2a648 <put_fat+0x228>

	} else {
		switch (fs->fs_type) {
   2a446:	68fb      	ldr	r3, [r7, #12]
   2a448:	781b      	ldrb	r3, [r3, #0]
   2a44a:	2b02      	cmp	r3, #2
   2a44c:	d100      	bne.n	2a450 <put_fat+0x30>
   2a44e:	e078      	b.n	2a542 <put_fat+0x122>
   2a450:	2b03      	cmp	r3, #3
   2a452:	d100      	bne.n	2a456 <put_fat+0x36>
   2a454:	e09e      	b.n	2a594 <put_fat+0x174>
   2a456:	2b01      	cmp	r3, #1
   2a458:	d000      	beq.n	2a45c <put_fat+0x3c>
   2a45a:	e0e6      	b.n	2a62a <put_fat+0x20a>
		case FS_FAT12 :
			bc = clst; bc += bc / 2;
   2a45c:	68bb      	ldr	r3, [r7, #8]
   2a45e:	61bb      	str	r3, [r7, #24]
   2a460:	69bb      	ldr	r3, [r7, #24]
   2a462:	085b      	lsrs	r3, r3, #1
   2a464:	69ba      	ldr	r2, [r7, #24]
   2a466:	18d3      	adds	r3, r2, r3
   2a468:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
   2a46a:	68fb      	ldr	r3, [r7, #12]
   2a46c:	6a1a      	ldr	r2, [r3, #32]
   2a46e:	69bb      	ldr	r3, [r7, #24]
   2a470:	0a5b      	lsrs	r3, r3, #9
   2a472:	18d2      	adds	r2, r2, r3
   2a474:	231f      	movs	r3, #31
   2a476:	18fc      	adds	r4, r7, r3
   2a478:	68fb      	ldr	r3, [r7, #12]
   2a47a:	0011      	movs	r1, r2
   2a47c:	0018      	movs	r0, r3
   2a47e:	4b76      	ldr	r3, [pc, #472]	; (2a658 <put_fat+0x238>)
   2a480:	4798      	blx	r3
   2a482:	0003      	movs	r3, r0
   2a484:	7023      	strb	r3, [r4, #0]
			if (res != FR_OK) break;
   2a486:	231f      	movs	r3, #31
   2a488:	18fb      	adds	r3, r7, r3
   2a48a:	781b      	ldrb	r3, [r3, #0]
   2a48c:	2b00      	cmp	r3, #0
   2a48e:	d000      	beq.n	2a492 <put_fat+0x72>
   2a490:	e0d0      	b.n	2a634 <put_fat+0x214>
			p = &fs->win[bc % SS(fs)];
   2a492:	69bb      	ldr	r3, [r7, #24]
   2a494:	05db      	lsls	r3, r3, #23
   2a496:	0ddb      	lsrs	r3, r3, #23
   2a498:	3330      	adds	r3, #48	; 0x30
   2a49a:	68fa      	ldr	r2, [r7, #12]
   2a49c:	18d3      	adds	r3, r2, r3
   2a49e:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
   2a4a0:	68bb      	ldr	r3, [r7, #8]
   2a4a2:	2201      	movs	r2, #1
   2a4a4:	4013      	ands	r3, r2
   2a4a6:	d00d      	beq.n	2a4c4 <put_fat+0xa4>
   2a4a8:	697b      	ldr	r3, [r7, #20]
   2a4aa:	781b      	ldrb	r3, [r3, #0]
   2a4ac:	b25b      	sxtb	r3, r3
   2a4ae:	220f      	movs	r2, #15
   2a4b0:	4013      	ands	r3, r2
   2a4b2:	b25a      	sxtb	r2, r3
   2a4b4:	687b      	ldr	r3, [r7, #4]
   2a4b6:	b2db      	uxtb	r3, r3
   2a4b8:	011b      	lsls	r3, r3, #4
   2a4ba:	b25b      	sxtb	r3, r3
   2a4bc:	4313      	orrs	r3, r2
   2a4be:	b25b      	sxtb	r3, r3
   2a4c0:	b2db      	uxtb	r3, r3
   2a4c2:	e001      	b.n	2a4c8 <put_fat+0xa8>
   2a4c4:	687b      	ldr	r3, [r7, #4]
   2a4c6:	b2db      	uxtb	r3, r3
   2a4c8:	697a      	ldr	r2, [r7, #20]
   2a4ca:	7013      	strb	r3, [r2, #0]
			bc++;
   2a4cc:	69bb      	ldr	r3, [r7, #24]
   2a4ce:	3301      	adds	r3, #1
   2a4d0:	61bb      	str	r3, [r7, #24]
			fs->wflag = 1;
   2a4d2:	68fb      	ldr	r3, [r7, #12]
   2a4d4:	2201      	movs	r2, #1
   2a4d6:	711a      	strb	r2, [r3, #4]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
   2a4d8:	68fb      	ldr	r3, [r7, #12]
   2a4da:	6a1a      	ldr	r2, [r3, #32]
   2a4dc:	69bb      	ldr	r3, [r7, #24]
   2a4de:	0a5b      	lsrs	r3, r3, #9
   2a4e0:	18d2      	adds	r2, r2, r3
   2a4e2:	231f      	movs	r3, #31
   2a4e4:	18fc      	adds	r4, r7, r3
   2a4e6:	68fb      	ldr	r3, [r7, #12]
   2a4e8:	0011      	movs	r1, r2
   2a4ea:	0018      	movs	r0, r3
   2a4ec:	4b5a      	ldr	r3, [pc, #360]	; (2a658 <put_fat+0x238>)
   2a4ee:	4798      	blx	r3
   2a4f0:	0003      	movs	r3, r0
   2a4f2:	7023      	strb	r3, [r4, #0]
			if (res != FR_OK) break;
   2a4f4:	231f      	movs	r3, #31
   2a4f6:	18fb      	adds	r3, r7, r3
   2a4f8:	781b      	ldrb	r3, [r3, #0]
   2a4fa:	2b00      	cmp	r3, #0
   2a4fc:	d000      	beq.n	2a500 <put_fat+0xe0>
   2a4fe:	e09b      	b.n	2a638 <put_fat+0x218>
			p = &fs->win[bc % SS(fs)];
   2a500:	69bb      	ldr	r3, [r7, #24]
   2a502:	05db      	lsls	r3, r3, #23
   2a504:	0ddb      	lsrs	r3, r3, #23
   2a506:	3330      	adds	r3, #48	; 0x30
   2a508:	68fa      	ldr	r2, [r7, #12]
   2a50a:	18d3      	adds	r3, r2, r3
   2a50c:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
   2a50e:	68bb      	ldr	r3, [r7, #8]
   2a510:	2201      	movs	r2, #1
   2a512:	4013      	ands	r3, r2
   2a514:	d003      	beq.n	2a51e <put_fat+0xfe>
   2a516:	687b      	ldr	r3, [r7, #4]
   2a518:	091b      	lsrs	r3, r3, #4
   2a51a:	b2db      	uxtb	r3, r3
   2a51c:	e00e      	b.n	2a53c <put_fat+0x11c>
   2a51e:	697b      	ldr	r3, [r7, #20]
   2a520:	781b      	ldrb	r3, [r3, #0]
   2a522:	b25b      	sxtb	r3, r3
   2a524:	220f      	movs	r2, #15
   2a526:	4393      	bics	r3, r2
   2a528:	b25a      	sxtb	r2, r3
   2a52a:	687b      	ldr	r3, [r7, #4]
   2a52c:	0a1b      	lsrs	r3, r3, #8
   2a52e:	b25b      	sxtb	r3, r3
   2a530:	210f      	movs	r1, #15
   2a532:	400b      	ands	r3, r1
   2a534:	b25b      	sxtb	r3, r3
   2a536:	4313      	orrs	r3, r2
   2a538:	b25b      	sxtb	r3, r3
   2a53a:	b2db      	uxtb	r3, r3
   2a53c:	697a      	ldr	r2, [r7, #20]
   2a53e:	7013      	strb	r3, [r2, #0]
			break;
   2a540:	e07f      	b.n	2a642 <put_fat+0x222>

		case FS_FAT16 :
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
   2a542:	68fb      	ldr	r3, [r7, #12]
   2a544:	6a1a      	ldr	r2, [r3, #32]
   2a546:	68bb      	ldr	r3, [r7, #8]
   2a548:	0a1b      	lsrs	r3, r3, #8
   2a54a:	18d2      	adds	r2, r2, r3
   2a54c:	231f      	movs	r3, #31
   2a54e:	18fc      	adds	r4, r7, r3
   2a550:	68fb      	ldr	r3, [r7, #12]
   2a552:	0011      	movs	r1, r2
   2a554:	0018      	movs	r0, r3
   2a556:	4b40      	ldr	r3, [pc, #256]	; (2a658 <put_fat+0x238>)
   2a558:	4798      	blx	r3
   2a55a:	0003      	movs	r3, r0
   2a55c:	7023      	strb	r3, [r4, #0]
			if (res != FR_OK) break;
   2a55e:	231f      	movs	r3, #31
   2a560:	18fb      	adds	r3, r7, r3
   2a562:	781b      	ldrb	r3, [r3, #0]
   2a564:	2b00      	cmp	r3, #0
   2a566:	d169      	bne.n	2a63c <put_fat+0x21c>
			p = &fs->win[clst * 2 % SS(fs)];
   2a568:	68bb      	ldr	r3, [r7, #8]
   2a56a:	005a      	lsls	r2, r3, #1
   2a56c:	23ff      	movs	r3, #255	; 0xff
   2a56e:	005b      	lsls	r3, r3, #1
   2a570:	4013      	ands	r3, r2
   2a572:	3330      	adds	r3, #48	; 0x30
   2a574:	68fa      	ldr	r2, [r7, #12]
   2a576:	18d3      	adds	r3, r2, r3
   2a578:	617b      	str	r3, [r7, #20]
			ST_WORD(p, (WORD)val);
   2a57a:	687b      	ldr	r3, [r7, #4]
   2a57c:	b2da      	uxtb	r2, r3
   2a57e:	697b      	ldr	r3, [r7, #20]
   2a580:	701a      	strb	r2, [r3, #0]
   2a582:	697b      	ldr	r3, [r7, #20]
   2a584:	3301      	adds	r3, #1
   2a586:	687a      	ldr	r2, [r7, #4]
   2a588:	b292      	uxth	r2, r2
   2a58a:	0a12      	lsrs	r2, r2, #8
   2a58c:	b292      	uxth	r2, r2
   2a58e:	b2d2      	uxtb	r2, r2
   2a590:	701a      	strb	r2, [r3, #0]
			break;
   2a592:	e056      	b.n	2a642 <put_fat+0x222>

		case FS_FAT32 :
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
   2a594:	68fb      	ldr	r3, [r7, #12]
   2a596:	6a1a      	ldr	r2, [r3, #32]
   2a598:	68bb      	ldr	r3, [r7, #8]
   2a59a:	09db      	lsrs	r3, r3, #7
   2a59c:	18d2      	adds	r2, r2, r3
   2a59e:	231f      	movs	r3, #31
   2a5a0:	18fc      	adds	r4, r7, r3
   2a5a2:	68fb      	ldr	r3, [r7, #12]
   2a5a4:	0011      	movs	r1, r2
   2a5a6:	0018      	movs	r0, r3
   2a5a8:	4b2b      	ldr	r3, [pc, #172]	; (2a658 <put_fat+0x238>)
   2a5aa:	4798      	blx	r3
   2a5ac:	0003      	movs	r3, r0
   2a5ae:	7023      	strb	r3, [r4, #0]
			if (res != FR_OK) break;
   2a5b0:	231f      	movs	r3, #31
   2a5b2:	18fb      	adds	r3, r7, r3
   2a5b4:	781b      	ldrb	r3, [r3, #0]
   2a5b6:	2b00      	cmp	r3, #0
   2a5b8:	d142      	bne.n	2a640 <put_fat+0x220>
			p = &fs->win[clst * 4 % SS(fs)];
   2a5ba:	68bb      	ldr	r3, [r7, #8]
   2a5bc:	009a      	lsls	r2, r3, #2
   2a5be:	23fe      	movs	r3, #254	; 0xfe
   2a5c0:	005b      	lsls	r3, r3, #1
   2a5c2:	4013      	ands	r3, r2
   2a5c4:	3330      	adds	r3, #48	; 0x30
   2a5c6:	68fa      	ldr	r2, [r7, #12]
   2a5c8:	18d3      	adds	r3, r2, r3
   2a5ca:	617b      	str	r3, [r7, #20]
			val |= LD_DWORD(p) & 0xF0000000;
   2a5cc:	697b      	ldr	r3, [r7, #20]
   2a5ce:	3303      	adds	r3, #3
   2a5d0:	781b      	ldrb	r3, [r3, #0]
   2a5d2:	061a      	lsls	r2, r3, #24
   2a5d4:	697b      	ldr	r3, [r7, #20]
   2a5d6:	3302      	adds	r3, #2
   2a5d8:	781b      	ldrb	r3, [r3, #0]
   2a5da:	041b      	lsls	r3, r3, #16
   2a5dc:	4313      	orrs	r3, r2
   2a5de:	697a      	ldr	r2, [r7, #20]
   2a5e0:	3201      	adds	r2, #1
   2a5e2:	7812      	ldrb	r2, [r2, #0]
   2a5e4:	0212      	lsls	r2, r2, #8
   2a5e6:	4313      	orrs	r3, r2
   2a5e8:	697a      	ldr	r2, [r7, #20]
   2a5ea:	7812      	ldrb	r2, [r2, #0]
   2a5ec:	4313      	orrs	r3, r2
   2a5ee:	0f1b      	lsrs	r3, r3, #28
   2a5f0:	071b      	lsls	r3, r3, #28
   2a5f2:	687a      	ldr	r2, [r7, #4]
   2a5f4:	4313      	orrs	r3, r2
   2a5f6:	607b      	str	r3, [r7, #4]
			ST_DWORD(p, val);
   2a5f8:	687b      	ldr	r3, [r7, #4]
   2a5fa:	b2da      	uxtb	r2, r3
   2a5fc:	697b      	ldr	r3, [r7, #20]
   2a5fe:	701a      	strb	r2, [r3, #0]
   2a600:	697b      	ldr	r3, [r7, #20]
   2a602:	3301      	adds	r3, #1
   2a604:	687a      	ldr	r2, [r7, #4]
   2a606:	b292      	uxth	r2, r2
   2a608:	0a12      	lsrs	r2, r2, #8
   2a60a:	b292      	uxth	r2, r2
   2a60c:	b2d2      	uxtb	r2, r2
   2a60e:	701a      	strb	r2, [r3, #0]
   2a610:	697b      	ldr	r3, [r7, #20]
   2a612:	3302      	adds	r3, #2
   2a614:	687a      	ldr	r2, [r7, #4]
   2a616:	0c12      	lsrs	r2, r2, #16
   2a618:	b2d2      	uxtb	r2, r2
   2a61a:	701a      	strb	r2, [r3, #0]
   2a61c:	697b      	ldr	r3, [r7, #20]
   2a61e:	3303      	adds	r3, #3
   2a620:	687a      	ldr	r2, [r7, #4]
   2a622:	0e12      	lsrs	r2, r2, #24
   2a624:	b2d2      	uxtb	r2, r2
   2a626:	701a      	strb	r2, [r3, #0]
			break;
   2a628:	e00b      	b.n	2a642 <put_fat+0x222>

		default :
			res = FR_INT_ERR;
   2a62a:	231f      	movs	r3, #31
   2a62c:	18fb      	adds	r3, r7, r3
   2a62e:	2202      	movs	r2, #2
   2a630:	701a      	strb	r2, [r3, #0]
   2a632:	e006      	b.n	2a642 <put_fat+0x222>
			if (res != FR_OK) break;
   2a634:	46c0      	nop			; (mov r8, r8)
   2a636:	e004      	b.n	2a642 <put_fat+0x222>
			if (res != FR_OK) break;
   2a638:	46c0      	nop			; (mov r8, r8)
   2a63a:	e002      	b.n	2a642 <put_fat+0x222>
			if (res != FR_OK) break;
   2a63c:	46c0      	nop			; (mov r8, r8)
   2a63e:	e000      	b.n	2a642 <put_fat+0x222>
			if (res != FR_OK) break;
   2a640:	46c0      	nop			; (mov r8, r8)
		}
		fs->wflag = 1;
   2a642:	68fb      	ldr	r3, [r7, #12]
   2a644:	2201      	movs	r2, #1
   2a646:	711a      	strb	r2, [r3, #4]
	}

	return res;
   2a648:	231f      	movs	r3, #31
   2a64a:	18fb      	adds	r3, r7, r3
   2a64c:	781b      	ldrb	r3, [r3, #0]
}
   2a64e:	0018      	movs	r0, r3
   2a650:	46bd      	mov	sp, r7
   2a652:	b009      	add	sp, #36	; 0x24
   2a654:	bd90      	pop	{r4, r7, pc}
   2a656:	46c0      	nop			; (mov r8, r8)
   2a658:	0002a01d 	.word	0x0002a01d

0002a65c <remove_chain>:
static
FRESULT remove_chain (
	FATFS *fs,			/* File system object */
	DWORD clst			/* Cluster# to remove a chain from */
)
{
   2a65c:	b590      	push	{r4, r7, lr}
   2a65e:	b085      	sub	sp, #20
   2a660:	af00      	add	r7, sp, #0
   2a662:	6078      	str	r0, [r7, #4]
   2a664:	6039      	str	r1, [r7, #0]
	DWORD nxt;
#if _USE_ERASE
	DWORD scl = clst, ecl = clst, resion[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
   2a666:	683b      	ldr	r3, [r7, #0]
   2a668:	2b01      	cmp	r3, #1
   2a66a:	d904      	bls.n	2a676 <remove_chain+0x1a>
   2a66c:	687b      	ldr	r3, [r7, #4]
   2a66e:	699a      	ldr	r2, [r3, #24]
   2a670:	683b      	ldr	r3, [r7, #0]
   2a672:	429a      	cmp	r2, r3
   2a674:	d804      	bhi.n	2a680 <remove_chain+0x24>
		res = FR_INT_ERR;
   2a676:	230f      	movs	r3, #15
   2a678:	18fb      	adds	r3, r7, r3
   2a67a:	2202      	movs	r2, #2
   2a67c:	701a      	strb	r2, [r3, #0]
   2a67e:	e045      	b.n	2a70c <remove_chain+0xb0>

	} else {
		res = FR_OK;
   2a680:	230f      	movs	r3, #15
   2a682:	18fb      	adds	r3, r7, r3
   2a684:	2200      	movs	r2, #0
   2a686:	701a      	strb	r2, [r3, #0]
		while (clst < fs->n_fatent) {			/* Not a last link? */
   2a688:	e037      	b.n	2a6fa <remove_chain+0x9e>
			nxt = get_fat(fs, clst);			/* Get cluster status */
   2a68a:	683a      	ldr	r2, [r7, #0]
   2a68c:	687b      	ldr	r3, [r7, #4]
   2a68e:	0011      	movs	r1, r2
   2a690:	0018      	movs	r0, r3
   2a692:	4b22      	ldr	r3, [pc, #136]	; (2a71c <remove_chain+0xc0>)
   2a694:	4798      	blx	r3
   2a696:	0003      	movs	r3, r0
   2a698:	60bb      	str	r3, [r7, #8]
			if (nxt == 0) break;				/* Empty cluster? */
   2a69a:	68bb      	ldr	r3, [r7, #8]
   2a69c:	2b00      	cmp	r3, #0
   2a69e:	d032      	beq.n	2a706 <remove_chain+0xaa>
			if (nxt == 1) { res = FR_INT_ERR; break; }	/* Internal error? */
   2a6a0:	68bb      	ldr	r3, [r7, #8]
   2a6a2:	2b01      	cmp	r3, #1
   2a6a4:	d104      	bne.n	2a6b0 <remove_chain+0x54>
   2a6a6:	230f      	movs	r3, #15
   2a6a8:	18fb      	adds	r3, r7, r3
   2a6aa:	2202      	movs	r2, #2
   2a6ac:	701a      	strb	r2, [r3, #0]
   2a6ae:	e02d      	b.n	2a70c <remove_chain+0xb0>
			if (nxt == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }	/* Disk error? */
   2a6b0:	68bb      	ldr	r3, [r7, #8]
   2a6b2:	3301      	adds	r3, #1
   2a6b4:	d104      	bne.n	2a6c0 <remove_chain+0x64>
   2a6b6:	230f      	movs	r3, #15
   2a6b8:	18fb      	adds	r3, r7, r3
   2a6ba:	2201      	movs	r2, #1
   2a6bc:	701a      	strb	r2, [r3, #0]
   2a6be:	e025      	b.n	2a70c <remove_chain+0xb0>
			res = put_fat(fs, clst, 0);			/* Mark the cluster "empty" */
   2a6c0:	230f      	movs	r3, #15
   2a6c2:	18fc      	adds	r4, r7, r3
   2a6c4:	6839      	ldr	r1, [r7, #0]
   2a6c6:	687b      	ldr	r3, [r7, #4]
   2a6c8:	2200      	movs	r2, #0
   2a6ca:	0018      	movs	r0, r3
   2a6cc:	4b14      	ldr	r3, [pc, #80]	; (2a720 <remove_chain+0xc4>)
   2a6ce:	4798      	blx	r3
   2a6d0:	0003      	movs	r3, r0
   2a6d2:	7023      	strb	r3, [r4, #0]
			if (res != FR_OK) break;
   2a6d4:	230f      	movs	r3, #15
   2a6d6:	18fb      	adds	r3, r7, r3
   2a6d8:	781b      	ldrb	r3, [r3, #0]
   2a6da:	2b00      	cmp	r3, #0
   2a6dc:	d115      	bne.n	2a70a <remove_chain+0xae>
			if (fs->free_clust != 0xFFFFFFFF) {	/* Update FSInfo */
   2a6de:	687b      	ldr	r3, [r7, #4]
   2a6e0:	691b      	ldr	r3, [r3, #16]
   2a6e2:	3301      	adds	r3, #1
   2a6e4:	d007      	beq.n	2a6f6 <remove_chain+0x9a>
				fs->free_clust++;
   2a6e6:	687b      	ldr	r3, [r7, #4]
   2a6e8:	691b      	ldr	r3, [r3, #16]
   2a6ea:	1c5a      	adds	r2, r3, #1
   2a6ec:	687b      	ldr	r3, [r7, #4]
   2a6ee:	611a      	str	r2, [r3, #16]
				fs->fsi_flag = 1;
   2a6f0:	687b      	ldr	r3, [r7, #4]
   2a6f2:	2201      	movs	r2, #1
   2a6f4:	715a      	strb	r2, [r3, #5]
				resion[1] = clust2sect(fs, ecl) + fs->csize - 1;	/* End sector */
				disk_ioctl(fs->drv, CTRL_ERASE_SECTOR, resion);		/* Erase the block */
				scl = ecl = nxt;
			}
#endif
			clst = nxt;	/* Next cluster */
   2a6f6:	68bb      	ldr	r3, [r7, #8]
   2a6f8:	603b      	str	r3, [r7, #0]
		while (clst < fs->n_fatent) {			/* Not a last link? */
   2a6fa:	687b      	ldr	r3, [r7, #4]
   2a6fc:	699a      	ldr	r2, [r3, #24]
   2a6fe:	683b      	ldr	r3, [r7, #0]
   2a700:	429a      	cmp	r2, r3
   2a702:	d8c2      	bhi.n	2a68a <remove_chain+0x2e>
   2a704:	e002      	b.n	2a70c <remove_chain+0xb0>
			if (nxt == 0) break;				/* Empty cluster? */
   2a706:	46c0      	nop			; (mov r8, r8)
   2a708:	e000      	b.n	2a70c <remove_chain+0xb0>
			if (res != FR_OK) break;
   2a70a:	46c0      	nop			; (mov r8, r8)
		}
	}

	return res;
   2a70c:	230f      	movs	r3, #15
   2a70e:	18fb      	adds	r3, r7, r3
   2a710:	781b      	ldrb	r3, [r3, #0]
}
   2a712:	0018      	movs	r0, r3
   2a714:	46bd      	mov	sp, r7
   2a716:	b005      	add	sp, #20
   2a718:	bd90      	pop	{r4, r7, pc}
   2a71a:	46c0      	nop			; (mov r8, r8)
   2a71c:	0002a2b5 	.word	0x0002a2b5
   2a720:	0002a421 	.word	0x0002a421

0002a724 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	FATFS *fs,			/* File system object */
	DWORD clst			/* Cluster# to stretch. 0 means create a new chain. */
)
{
   2a724:	b590      	push	{r4, r7, lr}
   2a726:	b087      	sub	sp, #28
   2a728:	af00      	add	r7, sp, #0
   2a72a:	6078      	str	r0, [r7, #4]
   2a72c:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;


	if (clst == 0) {		/* Create a new chain */
   2a72e:	683b      	ldr	r3, [r7, #0]
   2a730:	2b00      	cmp	r3, #0
   2a732:	d10d      	bne.n	2a750 <create_chain+0x2c>
		scl = fs->last_clust;			/* Get suggested start point */
   2a734:	687b      	ldr	r3, [r7, #4]
   2a736:	68db      	ldr	r3, [r3, #12]
   2a738:	613b      	str	r3, [r7, #16]
		if (!scl || scl >= fs->n_fatent) scl = 1;
   2a73a:	693b      	ldr	r3, [r7, #16]
   2a73c:	2b00      	cmp	r3, #0
   2a73e:	d004      	beq.n	2a74a <create_chain+0x26>
   2a740:	687b      	ldr	r3, [r7, #4]
   2a742:	699a      	ldr	r2, [r3, #24]
   2a744:	693b      	ldr	r3, [r7, #16]
   2a746:	429a      	cmp	r2, r3
   2a748:	d818      	bhi.n	2a77c <create_chain+0x58>
   2a74a:	2301      	movs	r3, #1
   2a74c:	613b      	str	r3, [r7, #16]
   2a74e:	e015      	b.n	2a77c <create_chain+0x58>
	}
	else {					/* Stretch the current chain */
		cs = get_fat(fs, clst);			/* Check the cluster status */
   2a750:	683a      	ldr	r2, [r7, #0]
   2a752:	687b      	ldr	r3, [r7, #4]
   2a754:	0011      	movs	r1, r2
   2a756:	0018      	movs	r0, r3
   2a758:	4b3e      	ldr	r3, [pc, #248]	; (2a854 <create_chain+0x130>)
   2a75a:	4798      	blx	r3
   2a75c:	0003      	movs	r3, r0
   2a75e:	60bb      	str	r3, [r7, #8]
		if (cs < 2) return 1;			/* It is an invalid cluster */
   2a760:	68bb      	ldr	r3, [r7, #8]
   2a762:	2b01      	cmp	r3, #1
   2a764:	d801      	bhi.n	2a76a <create_chain+0x46>
   2a766:	2301      	movs	r3, #1
   2a768:	e070      	b.n	2a84c <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
   2a76a:	687b      	ldr	r3, [r7, #4]
   2a76c:	699a      	ldr	r2, [r3, #24]
   2a76e:	68bb      	ldr	r3, [r7, #8]
   2a770:	429a      	cmp	r2, r3
   2a772:	d901      	bls.n	2a778 <create_chain+0x54>
   2a774:	68bb      	ldr	r3, [r7, #8]
   2a776:	e069      	b.n	2a84c <create_chain+0x128>
		scl = clst;
   2a778:	683b      	ldr	r3, [r7, #0]
   2a77a:	613b      	str	r3, [r7, #16]
	}

	ncl = scl;				/* Start cluster */
   2a77c:	693b      	ldr	r3, [r7, #16]
   2a77e:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl++;							/* Next cluster */
   2a780:	697b      	ldr	r3, [r7, #20]
   2a782:	3301      	adds	r3, #1
   2a784:	617b      	str	r3, [r7, #20]
		if (ncl >= fs->n_fatent) {		/* Wrap around */
   2a786:	687b      	ldr	r3, [r7, #4]
   2a788:	699a      	ldr	r2, [r3, #24]
   2a78a:	697b      	ldr	r3, [r7, #20]
   2a78c:	429a      	cmp	r2, r3
   2a78e:	d807      	bhi.n	2a7a0 <create_chain+0x7c>
			ncl = 2;
   2a790:	2302      	movs	r3, #2
   2a792:	617b      	str	r3, [r7, #20]
			if (ncl > scl) return 0;	/* No free cluster */
   2a794:	697a      	ldr	r2, [r7, #20]
   2a796:	693b      	ldr	r3, [r7, #16]
   2a798:	429a      	cmp	r2, r3
   2a79a:	d901      	bls.n	2a7a0 <create_chain+0x7c>
   2a79c:	2300      	movs	r3, #0
   2a79e:	e055      	b.n	2a84c <create_chain+0x128>
		}
		cs = get_fat(fs, ncl);			/* Get the cluster status */
   2a7a0:	697a      	ldr	r2, [r7, #20]
   2a7a2:	687b      	ldr	r3, [r7, #4]
   2a7a4:	0011      	movs	r1, r2
   2a7a6:	0018      	movs	r0, r3
   2a7a8:	4b2a      	ldr	r3, [pc, #168]	; (2a854 <create_chain+0x130>)
   2a7aa:	4798      	blx	r3
   2a7ac:	0003      	movs	r3, r0
   2a7ae:	60bb      	str	r3, [r7, #8]
		if (cs == 0) break;				/* Found a free cluster */
   2a7b0:	68bb      	ldr	r3, [r7, #8]
   2a7b2:	2b00      	cmp	r3, #0
   2a7b4:	d00d      	beq.n	2a7d2 <create_chain+0xae>
		if (cs == 0xFFFFFFFF || cs == 1)/* An error occurred */
   2a7b6:	68bb      	ldr	r3, [r7, #8]
   2a7b8:	3301      	adds	r3, #1
   2a7ba:	d002      	beq.n	2a7c2 <create_chain+0x9e>
   2a7bc:	68bb      	ldr	r3, [r7, #8]
   2a7be:	2b01      	cmp	r3, #1
   2a7c0:	d101      	bne.n	2a7c6 <create_chain+0xa2>
			return cs;
   2a7c2:	68bb      	ldr	r3, [r7, #8]
   2a7c4:	e042      	b.n	2a84c <create_chain+0x128>
		if (ncl == scl) return 0;		/* No free cluster */
   2a7c6:	697a      	ldr	r2, [r7, #20]
   2a7c8:	693b      	ldr	r3, [r7, #16]
   2a7ca:	429a      	cmp	r2, r3
   2a7cc:	d1d8      	bne.n	2a780 <create_chain+0x5c>
   2a7ce:	2300      	movs	r3, #0
   2a7d0:	e03c      	b.n	2a84c <create_chain+0x128>
		if (cs == 0) break;				/* Found a free cluster */
   2a7d2:	46c0      	nop			; (mov r8, r8)
	}

	res = put_fat(fs, ncl, 0x0FFFFFFF);	/* Mark the new cluster "last link" */
   2a7d4:	230f      	movs	r3, #15
   2a7d6:	18fc      	adds	r4, r7, r3
   2a7d8:	4a1f      	ldr	r2, [pc, #124]	; (2a858 <create_chain+0x134>)
   2a7da:	6979      	ldr	r1, [r7, #20]
   2a7dc:	687b      	ldr	r3, [r7, #4]
   2a7de:	0018      	movs	r0, r3
   2a7e0:	4b1e      	ldr	r3, [pc, #120]	; (2a85c <create_chain+0x138>)
   2a7e2:	4798      	blx	r3
   2a7e4:	0003      	movs	r3, r0
   2a7e6:	7023      	strb	r3, [r4, #0]
	if (res == FR_OK && clst != 0) {
   2a7e8:	230f      	movs	r3, #15
   2a7ea:	18fb      	adds	r3, r7, r3
   2a7ec:	781b      	ldrb	r3, [r3, #0]
   2a7ee:	2b00      	cmp	r3, #0
   2a7f0:	d10c      	bne.n	2a80c <create_chain+0xe8>
   2a7f2:	683b      	ldr	r3, [r7, #0]
   2a7f4:	2b00      	cmp	r3, #0
   2a7f6:	d009      	beq.n	2a80c <create_chain+0xe8>
		res = put_fat(fs, clst, ncl);	/* Link it to the previous one if needed */
   2a7f8:	230f      	movs	r3, #15
   2a7fa:	18fc      	adds	r4, r7, r3
   2a7fc:	697a      	ldr	r2, [r7, #20]
   2a7fe:	6839      	ldr	r1, [r7, #0]
   2a800:	687b      	ldr	r3, [r7, #4]
   2a802:	0018      	movs	r0, r3
   2a804:	4b15      	ldr	r3, [pc, #84]	; (2a85c <create_chain+0x138>)
   2a806:	4798      	blx	r3
   2a808:	0003      	movs	r3, r0
   2a80a:	7023      	strb	r3, [r4, #0]
	}
	if (res == FR_OK) {
   2a80c:	230f      	movs	r3, #15
   2a80e:	18fb      	adds	r3, r7, r3
   2a810:	781b      	ldrb	r3, [r3, #0]
   2a812:	2b00      	cmp	r3, #0
   2a814:	d10f      	bne.n	2a836 <create_chain+0x112>
		fs->last_clust = ncl;			/* Update FSINFO */
   2a816:	687b      	ldr	r3, [r7, #4]
   2a818:	697a      	ldr	r2, [r7, #20]
   2a81a:	60da      	str	r2, [r3, #12]
		if (fs->free_clust != 0xFFFFFFFF) {
   2a81c:	687b      	ldr	r3, [r7, #4]
   2a81e:	691b      	ldr	r3, [r3, #16]
   2a820:	3301      	adds	r3, #1
   2a822:	d012      	beq.n	2a84a <create_chain+0x126>
			fs->free_clust--;
   2a824:	687b      	ldr	r3, [r7, #4]
   2a826:	691b      	ldr	r3, [r3, #16]
   2a828:	1e5a      	subs	r2, r3, #1
   2a82a:	687b      	ldr	r3, [r7, #4]
   2a82c:	611a      	str	r2, [r3, #16]
			fs->fsi_flag = 1;
   2a82e:	687b      	ldr	r3, [r7, #4]
   2a830:	2201      	movs	r2, #1
   2a832:	715a      	strb	r2, [r3, #5]
   2a834:	e009      	b.n	2a84a <create_chain+0x126>
		}
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;
   2a836:	230f      	movs	r3, #15
   2a838:	18fb      	adds	r3, r7, r3
   2a83a:	781b      	ldrb	r3, [r3, #0]
   2a83c:	2b01      	cmp	r3, #1
   2a83e:	d102      	bne.n	2a846 <create_chain+0x122>
   2a840:	2301      	movs	r3, #1
   2a842:	425b      	negs	r3, r3
   2a844:	e000      	b.n	2a848 <create_chain+0x124>
   2a846:	2301      	movs	r3, #1
   2a848:	617b      	str	r3, [r7, #20]
	}

	return ncl;		/* Return new cluster number or error code */
   2a84a:	697b      	ldr	r3, [r7, #20]
}
   2a84c:	0018      	movs	r0, r3
   2a84e:	46bd      	mov	sp, r7
   2a850:	b007      	add	sp, #28
   2a852:	bd90      	pop	{r4, r7, pc}
   2a854:	0002a2b5 	.word	0x0002a2b5
   2a858:	0fffffff 	.word	0x0fffffff
   2a85c:	0002a421 	.word	0x0002a421

0002a860 <dir_sdi>:
static
FRESULT dir_sdi (
	DIR *dj,		/* Pointer to directory object */
	WORD idx		/* Directory index number */
)
{
   2a860:	b580      	push	{r7, lr}
   2a862:	b084      	sub	sp, #16
   2a864:	af00      	add	r7, sp, #0
   2a866:	6078      	str	r0, [r7, #4]
   2a868:	000a      	movs	r2, r1
   2a86a:	1cbb      	adds	r3, r7, #2
   2a86c:	801a      	strh	r2, [r3, #0]
	DWORD clst;
	WORD ic;


	dj->index = idx;
   2a86e:	687b      	ldr	r3, [r7, #4]
   2a870:	1cba      	adds	r2, r7, #2
   2a872:	8812      	ldrh	r2, [r2, #0]
   2a874:	80da      	strh	r2, [r3, #6]
	clst = dj->sclust;
   2a876:	687b      	ldr	r3, [r7, #4]
   2a878:	689b      	ldr	r3, [r3, #8]
   2a87a:	60fb      	str	r3, [r7, #12]
	if (clst == 1 || clst >= dj->fs->n_fatent)	/* Check start cluster range */
   2a87c:	68fb      	ldr	r3, [r7, #12]
   2a87e:	2b01      	cmp	r3, #1
   2a880:	d005      	beq.n	2a88e <dir_sdi+0x2e>
   2a882:	687b      	ldr	r3, [r7, #4]
   2a884:	681b      	ldr	r3, [r3, #0]
   2a886:	699a      	ldr	r2, [r3, #24]
   2a888:	68fb      	ldr	r3, [r7, #12]
   2a88a:	429a      	cmp	r2, r3
   2a88c:	d801      	bhi.n	2a892 <dir_sdi+0x32>
		return FR_INT_ERR;
   2a88e:	2302      	movs	r3, #2
   2a890:	e075      	b.n	2a97e <dir_sdi+0x11e>
	if (!clst && dj->fs->fs_type == FS_FAT32)	/* Replace cluster# 0 with root cluster# if in FAT32 */
   2a892:	68fb      	ldr	r3, [r7, #12]
   2a894:	2b00      	cmp	r3, #0
   2a896:	d108      	bne.n	2a8aa <dir_sdi+0x4a>
   2a898:	687b      	ldr	r3, [r7, #4]
   2a89a:	681b      	ldr	r3, [r3, #0]
   2a89c:	781b      	ldrb	r3, [r3, #0]
   2a89e:	2b03      	cmp	r3, #3
   2a8a0:	d103      	bne.n	2a8aa <dir_sdi+0x4a>
		clst = dj->fs->dirbase;
   2a8a2:	687b      	ldr	r3, [r7, #4]
   2a8a4:	681b      	ldr	r3, [r3, #0]
   2a8a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   2a8a8:	60fb      	str	r3, [r7, #12]

	if (clst == 0) {	/* Static table (root-dir in FAT12/16) */
   2a8aa:	68fb      	ldr	r3, [r7, #12]
   2a8ac:	2b00      	cmp	r3, #0
   2a8ae:	d116      	bne.n	2a8de <dir_sdi+0x7e>
		dj->clust = clst;
   2a8b0:	687b      	ldr	r3, [r7, #4]
   2a8b2:	68fa      	ldr	r2, [r7, #12]
   2a8b4:	60da      	str	r2, [r3, #12]
		if (idx >= dj->fs->n_rootdir)		/* Index is out of range */
   2a8b6:	687b      	ldr	r3, [r7, #4]
   2a8b8:	681b      	ldr	r3, [r3, #0]
   2a8ba:	891b      	ldrh	r3, [r3, #8]
   2a8bc:	1cba      	adds	r2, r7, #2
   2a8be:	8812      	ldrh	r2, [r2, #0]
   2a8c0:	429a      	cmp	r2, r3
   2a8c2:	d301      	bcc.n	2a8c8 <dir_sdi+0x68>
			return FR_INT_ERR;
   2a8c4:	2302      	movs	r3, #2
   2a8c6:	e05a      	b.n	2a97e <dir_sdi+0x11e>
		dj->sect = dj->fs->dirbase + idx / (SS(dj->fs) / SZ_DIR);	/* Sector# */
   2a8c8:	687b      	ldr	r3, [r7, #4]
   2a8ca:	681b      	ldr	r3, [r3, #0]
   2a8cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   2a8ce:	1cba      	adds	r2, r7, #2
   2a8d0:	8812      	ldrh	r2, [r2, #0]
   2a8d2:	0912      	lsrs	r2, r2, #4
   2a8d4:	b292      	uxth	r2, r2
   2a8d6:	189a      	adds	r2, r3, r2
   2a8d8:	687b      	ldr	r3, [r7, #4]
   2a8da:	611a      	str	r2, [r3, #16]
   2a8dc:	e042      	b.n	2a964 <dir_sdi+0x104>
	}
	else {				/* Dynamic table (sub-dirs or root-dir in FAT32) */
		ic = SS(dj->fs) / SZ_DIR * dj->fs->csize;	/* Entries per cluster */
   2a8de:	687b      	ldr	r3, [r7, #4]
   2a8e0:	681b      	ldr	r3, [r3, #0]
   2a8e2:	789b      	ldrb	r3, [r3, #2]
   2a8e4:	b29a      	uxth	r2, r3
   2a8e6:	230a      	movs	r3, #10
   2a8e8:	18fb      	adds	r3, r7, r3
   2a8ea:	0112      	lsls	r2, r2, #4
   2a8ec:	801a      	strh	r2, [r3, #0]
		while (idx >= ic) {	/* Follow cluster chain */
   2a8ee:	e020      	b.n	2a932 <dir_sdi+0xd2>
			clst = get_fat(dj->fs, clst);				/* Get next cluster */
   2a8f0:	687b      	ldr	r3, [r7, #4]
   2a8f2:	681b      	ldr	r3, [r3, #0]
   2a8f4:	68fa      	ldr	r2, [r7, #12]
   2a8f6:	0011      	movs	r1, r2
   2a8f8:	0018      	movs	r0, r3
   2a8fa:	4b23      	ldr	r3, [pc, #140]	; (2a988 <dir_sdi+0x128>)
   2a8fc:	4798      	blx	r3
   2a8fe:	0003      	movs	r3, r0
   2a900:	60fb      	str	r3, [r7, #12]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
   2a902:	68fb      	ldr	r3, [r7, #12]
   2a904:	3301      	adds	r3, #1
   2a906:	d101      	bne.n	2a90c <dir_sdi+0xac>
   2a908:	2301      	movs	r3, #1
   2a90a:	e038      	b.n	2a97e <dir_sdi+0x11e>
			if (clst < 2 || clst >= dj->fs->n_fatent)	/* Reached to end of table or int error */
   2a90c:	68fb      	ldr	r3, [r7, #12]
   2a90e:	2b01      	cmp	r3, #1
   2a910:	d905      	bls.n	2a91e <dir_sdi+0xbe>
   2a912:	687b      	ldr	r3, [r7, #4]
   2a914:	681b      	ldr	r3, [r3, #0]
   2a916:	699a      	ldr	r2, [r3, #24]
   2a918:	68fb      	ldr	r3, [r7, #12]
   2a91a:	429a      	cmp	r2, r3
   2a91c:	d801      	bhi.n	2a922 <dir_sdi+0xc2>
				return FR_INT_ERR;
   2a91e:	2302      	movs	r3, #2
   2a920:	e02d      	b.n	2a97e <dir_sdi+0x11e>
			idx -= ic;
   2a922:	1cbb      	adds	r3, r7, #2
   2a924:	1cb9      	adds	r1, r7, #2
   2a926:	220a      	movs	r2, #10
   2a928:	18ba      	adds	r2, r7, r2
   2a92a:	8809      	ldrh	r1, [r1, #0]
   2a92c:	8812      	ldrh	r2, [r2, #0]
   2a92e:	1a8a      	subs	r2, r1, r2
   2a930:	801a      	strh	r2, [r3, #0]
		while (idx >= ic) {	/* Follow cluster chain */
   2a932:	1cba      	adds	r2, r7, #2
   2a934:	230a      	movs	r3, #10
   2a936:	18fb      	adds	r3, r7, r3
   2a938:	8812      	ldrh	r2, [r2, #0]
   2a93a:	881b      	ldrh	r3, [r3, #0]
   2a93c:	429a      	cmp	r2, r3
   2a93e:	d2d7      	bcs.n	2a8f0 <dir_sdi+0x90>
		}
		dj->clust = clst;
   2a940:	687b      	ldr	r3, [r7, #4]
   2a942:	68fa      	ldr	r2, [r7, #12]
   2a944:	60da      	str	r2, [r3, #12]
		dj->sect = clust2sect(dj->fs, clst) + idx / (SS(dj->fs) / SZ_DIR);	/* Sector# */
   2a946:	687b      	ldr	r3, [r7, #4]
   2a948:	681b      	ldr	r3, [r3, #0]
   2a94a:	68fa      	ldr	r2, [r7, #12]
   2a94c:	0011      	movs	r1, r2
   2a94e:	0018      	movs	r0, r3
   2a950:	4b0e      	ldr	r3, [pc, #56]	; (2a98c <dir_sdi+0x12c>)
   2a952:	4798      	blx	r3
   2a954:	0002      	movs	r2, r0
   2a956:	1cbb      	adds	r3, r7, #2
   2a958:	881b      	ldrh	r3, [r3, #0]
   2a95a:	091b      	lsrs	r3, r3, #4
   2a95c:	b29b      	uxth	r3, r3
   2a95e:	18d2      	adds	r2, r2, r3
   2a960:	687b      	ldr	r3, [r7, #4]
   2a962:	611a      	str	r2, [r3, #16]
	}

	dj->dir = dj->fs->win + (idx % (SS(dj->fs) / SZ_DIR)) * SZ_DIR;	/* Ptr to the entry in the sector */
   2a964:	687b      	ldr	r3, [r7, #4]
   2a966:	681b      	ldr	r3, [r3, #0]
   2a968:	3330      	adds	r3, #48	; 0x30
   2a96a:	001a      	movs	r2, r3
   2a96c:	1cbb      	adds	r3, r7, #2
   2a96e:	881b      	ldrh	r3, [r3, #0]
   2a970:	210f      	movs	r1, #15
   2a972:	400b      	ands	r3, r1
   2a974:	015b      	lsls	r3, r3, #5
   2a976:	18d2      	adds	r2, r2, r3
   2a978:	687b      	ldr	r3, [r7, #4]
   2a97a:	615a      	str	r2, [r3, #20]

	return FR_OK;	/* Seek succeeded */
   2a97c:	2300      	movs	r3, #0
}
   2a97e:	0018      	movs	r0, r3
   2a980:	46bd      	mov	sp, r7
   2a982:	b004      	add	sp, #16
   2a984:	bd80      	pop	{r7, pc}
   2a986:	46c0      	nop			; (mov r8, r8)
   2a988:	0002a2b5 	.word	0x0002a2b5
   2a98c:	0002a27d 	.word	0x0002a27d

0002a990 <dir_next>:
static
FRESULT dir_next (	/* FR_OK:Succeeded, FR_NO_FILE:End of table, FR_DENIED:EOT and could not stretch */
	DIR *dj,		/* Pointer to directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
   2a990:	b590      	push	{r4, r7, lr}
   2a992:	b085      	sub	sp, #20
   2a994:	af00      	add	r7, sp, #0
   2a996:	6078      	str	r0, [r7, #4]
   2a998:	6039      	str	r1, [r7, #0]
	DWORD clst;
	WORD i;


	stretch = stretch;		/* To suppress warning on read-only cfg. */
	i = dj->index + 1;
   2a99a:	687b      	ldr	r3, [r7, #4]
   2a99c:	88da      	ldrh	r2, [r3, #6]
   2a99e:	2308      	movs	r3, #8
   2a9a0:	18fb      	adds	r3, r7, r3
   2a9a2:	3201      	adds	r2, #1
   2a9a4:	801a      	strh	r2, [r3, #0]
	if (!i || !dj->sect)	/* Report EOT when index has reached 65535 */
   2a9a6:	2308      	movs	r3, #8
   2a9a8:	18fb      	adds	r3, r7, r3
   2a9aa:	881b      	ldrh	r3, [r3, #0]
   2a9ac:	2b00      	cmp	r3, #0
   2a9ae:	d003      	beq.n	2a9b8 <dir_next+0x28>
   2a9b0:	687b      	ldr	r3, [r7, #4]
   2a9b2:	691b      	ldr	r3, [r3, #16]
   2a9b4:	2b00      	cmp	r3, #0
   2a9b6:	d101      	bne.n	2a9bc <dir_next+0x2c>
		return FR_NO_FILE;
   2a9b8:	2304      	movs	r3, #4
   2a9ba:	e0d2      	b.n	2ab62 <dir_next+0x1d2>

	if (!(i % (SS(dj->fs) / SZ_DIR))) {	/* Sector changed? */
   2a9bc:	2308      	movs	r3, #8
   2a9be:	18fb      	adds	r3, r7, r3
   2a9c0:	881b      	ldrh	r3, [r3, #0]
   2a9c2:	220f      	movs	r2, #15
   2a9c4:	4013      	ands	r3, r2
   2a9c6:	b29b      	uxth	r3, r3
   2a9c8:	2b00      	cmp	r3, #0
   2a9ca:	d000      	beq.n	2a9ce <dir_next+0x3e>
   2a9cc:	e0b6      	b.n	2ab3c <dir_next+0x1ac>
		dj->sect++;					/* Next sector */
   2a9ce:	687b      	ldr	r3, [r7, #4]
   2a9d0:	691b      	ldr	r3, [r3, #16]
   2a9d2:	1c5a      	adds	r2, r3, #1
   2a9d4:	687b      	ldr	r3, [r7, #4]
   2a9d6:	611a      	str	r2, [r3, #16]

		if (dj->clust == 0) {	/* Static table */
   2a9d8:	687b      	ldr	r3, [r7, #4]
   2a9da:	68db      	ldr	r3, [r3, #12]
   2a9dc:	2b00      	cmp	r3, #0
   2a9de:	d10a      	bne.n	2a9f6 <dir_next+0x66>
			if (i >= dj->fs->n_rootdir)	/* Report EOT when end of table */
   2a9e0:	687b      	ldr	r3, [r7, #4]
   2a9e2:	681b      	ldr	r3, [r3, #0]
   2a9e4:	891b      	ldrh	r3, [r3, #8]
   2a9e6:	2208      	movs	r2, #8
   2a9e8:	18ba      	adds	r2, r7, r2
   2a9ea:	8812      	ldrh	r2, [r2, #0]
   2a9ec:	429a      	cmp	r2, r3
   2a9ee:	d200      	bcs.n	2a9f2 <dir_next+0x62>
   2a9f0:	e0a4      	b.n	2ab3c <dir_next+0x1ac>
				return FR_NO_FILE;
   2a9f2:	2304      	movs	r3, #4
   2a9f4:	e0b5      	b.n	2ab62 <dir_next+0x1d2>
		}
		else {					/* Dynamic table */
			if (((i / (SS(dj->fs) / SZ_DIR)) & (dj->fs->csize - 1)) == 0) {	/* Cluster changed? */
   2a9f6:	2308      	movs	r3, #8
   2a9f8:	18fb      	adds	r3, r7, r3
   2a9fa:	881b      	ldrh	r3, [r3, #0]
   2a9fc:	091b      	lsrs	r3, r3, #4
   2a9fe:	b29b      	uxth	r3, r3
   2aa00:	001a      	movs	r2, r3
   2aa02:	687b      	ldr	r3, [r7, #4]
   2aa04:	681b      	ldr	r3, [r3, #0]
   2aa06:	789b      	ldrb	r3, [r3, #2]
   2aa08:	3b01      	subs	r3, #1
   2aa0a:	4013      	ands	r3, r2
   2aa0c:	d000      	beq.n	2aa10 <dir_next+0x80>
   2aa0e:	e095      	b.n	2ab3c <dir_next+0x1ac>
				clst = get_fat(dj->fs, dj->clust);				/* Get next cluster */
   2aa10:	687b      	ldr	r3, [r7, #4]
   2aa12:	681a      	ldr	r2, [r3, #0]
   2aa14:	687b      	ldr	r3, [r7, #4]
   2aa16:	68db      	ldr	r3, [r3, #12]
   2aa18:	0019      	movs	r1, r3
   2aa1a:	0010      	movs	r0, r2
   2aa1c:	4b53      	ldr	r3, [pc, #332]	; (2ab6c <dir_next+0x1dc>)
   2aa1e:	4798      	blx	r3
   2aa20:	0003      	movs	r3, r0
   2aa22:	60fb      	str	r3, [r7, #12]
				if (clst <= 1) return FR_INT_ERR;
   2aa24:	68fb      	ldr	r3, [r7, #12]
   2aa26:	2b01      	cmp	r3, #1
   2aa28:	d801      	bhi.n	2aa2e <dir_next+0x9e>
   2aa2a:	2302      	movs	r3, #2
   2aa2c:	e099      	b.n	2ab62 <dir_next+0x1d2>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
   2aa2e:	68fb      	ldr	r3, [r7, #12]
   2aa30:	3301      	adds	r3, #1
   2aa32:	d101      	bne.n	2aa38 <dir_next+0xa8>
   2aa34:	2301      	movs	r3, #1
   2aa36:	e094      	b.n	2ab62 <dir_next+0x1d2>
				if (clst >= dj->fs->n_fatent) {					/* When it reached end of dynamic table */
   2aa38:	687b      	ldr	r3, [r7, #4]
   2aa3a:	681b      	ldr	r3, [r3, #0]
   2aa3c:	699a      	ldr	r2, [r3, #24]
   2aa3e:	68fb      	ldr	r3, [r7, #12]
   2aa40:	429a      	cmp	r2, r3
   2aa42:	d900      	bls.n	2aa46 <dir_next+0xb6>
   2aa44:	e06d      	b.n	2ab22 <dir_next+0x192>
#if !_FS_READONLY
					BYTE c;
					if (!stretch) return FR_NO_FILE;			/* When do not stretch, report EOT */
   2aa46:	683b      	ldr	r3, [r7, #0]
   2aa48:	2b00      	cmp	r3, #0
   2aa4a:	d101      	bne.n	2aa50 <dir_next+0xc0>
   2aa4c:	2304      	movs	r3, #4
   2aa4e:	e088      	b.n	2ab62 <dir_next+0x1d2>
					clst = create_chain(dj->fs, dj->clust);		/* Stretch cluster chain */
   2aa50:	687b      	ldr	r3, [r7, #4]
   2aa52:	681a      	ldr	r2, [r3, #0]
   2aa54:	687b      	ldr	r3, [r7, #4]
   2aa56:	68db      	ldr	r3, [r3, #12]
   2aa58:	0019      	movs	r1, r3
   2aa5a:	0010      	movs	r0, r2
   2aa5c:	4b44      	ldr	r3, [pc, #272]	; (2ab70 <dir_next+0x1e0>)
   2aa5e:	4798      	blx	r3
   2aa60:	0003      	movs	r3, r0
   2aa62:	60fb      	str	r3, [r7, #12]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
   2aa64:	68fb      	ldr	r3, [r7, #12]
   2aa66:	2b00      	cmp	r3, #0
   2aa68:	d101      	bne.n	2aa6e <dir_next+0xde>
   2aa6a:	2307      	movs	r3, #7
   2aa6c:	e079      	b.n	2ab62 <dir_next+0x1d2>
					if (clst == 1) return FR_INT_ERR;
   2aa6e:	68fb      	ldr	r3, [r7, #12]
   2aa70:	2b01      	cmp	r3, #1
   2aa72:	d101      	bne.n	2aa78 <dir_next+0xe8>
   2aa74:	2302      	movs	r3, #2
   2aa76:	e074      	b.n	2ab62 <dir_next+0x1d2>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
   2aa78:	68fb      	ldr	r3, [r7, #12]
   2aa7a:	3301      	adds	r3, #1
   2aa7c:	d101      	bne.n	2aa82 <dir_next+0xf2>
   2aa7e:	2301      	movs	r3, #1
   2aa80:	e06f      	b.n	2ab62 <dir_next+0x1d2>
					/* Clean-up stretched table */
					if (move_window(dj->fs, 0)) return FR_DISK_ERR;	/* Flush active window */
   2aa82:	687b      	ldr	r3, [r7, #4]
   2aa84:	681b      	ldr	r3, [r3, #0]
   2aa86:	2100      	movs	r1, #0
   2aa88:	0018      	movs	r0, r3
   2aa8a:	4b3a      	ldr	r3, [pc, #232]	; (2ab74 <dir_next+0x1e4>)
   2aa8c:	4798      	blx	r3
   2aa8e:	1e03      	subs	r3, r0, #0
   2aa90:	d001      	beq.n	2aa96 <dir_next+0x106>
   2aa92:	2301      	movs	r3, #1
   2aa94:	e065      	b.n	2ab62 <dir_next+0x1d2>
					mem_set(dj->fs->win, 0, SS(dj->fs));			/* Clear window buffer */
   2aa96:	687b      	ldr	r3, [r7, #4]
   2aa98:	681b      	ldr	r3, [r3, #0]
   2aa9a:	3330      	adds	r3, #48	; 0x30
   2aa9c:	0018      	movs	r0, r3
   2aa9e:	2380      	movs	r3, #128	; 0x80
   2aaa0:	009b      	lsls	r3, r3, #2
   2aaa2:	001a      	movs	r2, r3
   2aaa4:	2100      	movs	r1, #0
   2aaa6:	4b34      	ldr	r3, [pc, #208]	; (2ab78 <dir_next+0x1e8>)
   2aaa8:	4798      	blx	r3
					dj->fs->winsect = clust2sect(dj->fs, clst);	/* Cluster start sector */
   2aaaa:	687b      	ldr	r3, [r7, #4]
   2aaac:	681c      	ldr	r4, [r3, #0]
   2aaae:	687b      	ldr	r3, [r7, #4]
   2aab0:	681b      	ldr	r3, [r3, #0]
   2aab2:	68fa      	ldr	r2, [r7, #12]
   2aab4:	0011      	movs	r1, r2
   2aab6:	0018      	movs	r0, r3
   2aab8:	4b30      	ldr	r3, [pc, #192]	; (2ab7c <dir_next+0x1ec>)
   2aaba:	4798      	blx	r3
   2aabc:	0003      	movs	r3, r0
   2aabe:	62e3      	str	r3, [r4, #44]	; 0x2c
					for (c = 0; c < dj->fs->csize; c++) {		/* Fill the new cluster with 0 */
   2aac0:	230b      	movs	r3, #11
   2aac2:	18fb      	adds	r3, r7, r3
   2aac4:	2200      	movs	r2, #0
   2aac6:	701a      	strb	r2, [r3, #0]
   2aac8:	e019      	b.n	2aafe <dir_next+0x16e>
						dj->fs->wflag = 1;
   2aaca:	687b      	ldr	r3, [r7, #4]
   2aacc:	681b      	ldr	r3, [r3, #0]
   2aace:	2201      	movs	r2, #1
   2aad0:	711a      	strb	r2, [r3, #4]
						if (move_window(dj->fs, 0)) return FR_DISK_ERR;
   2aad2:	687b      	ldr	r3, [r7, #4]
   2aad4:	681b      	ldr	r3, [r3, #0]
   2aad6:	2100      	movs	r1, #0
   2aad8:	0018      	movs	r0, r3
   2aada:	4b26      	ldr	r3, [pc, #152]	; (2ab74 <dir_next+0x1e4>)
   2aadc:	4798      	blx	r3
   2aade:	1e03      	subs	r3, r0, #0
   2aae0:	d001      	beq.n	2aae6 <dir_next+0x156>
   2aae2:	2301      	movs	r3, #1
   2aae4:	e03d      	b.n	2ab62 <dir_next+0x1d2>
						dj->fs->winsect++;
   2aae6:	687b      	ldr	r3, [r7, #4]
   2aae8:	681b      	ldr	r3, [r3, #0]
   2aaea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   2aaec:	3201      	adds	r2, #1
   2aaee:	62da      	str	r2, [r3, #44]	; 0x2c
					for (c = 0; c < dj->fs->csize; c++) {		/* Fill the new cluster with 0 */
   2aaf0:	230b      	movs	r3, #11
   2aaf2:	18fb      	adds	r3, r7, r3
   2aaf4:	781a      	ldrb	r2, [r3, #0]
   2aaf6:	230b      	movs	r3, #11
   2aaf8:	18fb      	adds	r3, r7, r3
   2aafa:	3201      	adds	r2, #1
   2aafc:	701a      	strb	r2, [r3, #0]
   2aafe:	687b      	ldr	r3, [r7, #4]
   2ab00:	681b      	ldr	r3, [r3, #0]
   2ab02:	789b      	ldrb	r3, [r3, #2]
   2ab04:	220b      	movs	r2, #11
   2ab06:	18ba      	adds	r2, r7, r2
   2ab08:	7812      	ldrb	r2, [r2, #0]
   2ab0a:	429a      	cmp	r2, r3
   2ab0c:	d3dd      	bcc.n	2aaca <dir_next+0x13a>
					}
					dj->fs->winsect -= c;						/* Rewind window address */
   2ab0e:	687b      	ldr	r3, [r7, #4]
   2ab10:	681b      	ldr	r3, [r3, #0]
   2ab12:	687a      	ldr	r2, [r7, #4]
   2ab14:	6812      	ldr	r2, [r2, #0]
   2ab16:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
   2ab18:	220b      	movs	r2, #11
   2ab1a:	18ba      	adds	r2, r7, r2
   2ab1c:	7812      	ldrb	r2, [r2, #0]
   2ab1e:	1a8a      	subs	r2, r1, r2
   2ab20:	62da      	str	r2, [r3, #44]	; 0x2c
#else
					return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dj->clust = clst;				/* Initialize data for new cluster */
   2ab22:	687b      	ldr	r3, [r7, #4]
   2ab24:	68fa      	ldr	r2, [r7, #12]
   2ab26:	60da      	str	r2, [r3, #12]
				dj->sect = clust2sect(dj->fs, clst);
   2ab28:	687b      	ldr	r3, [r7, #4]
   2ab2a:	681b      	ldr	r3, [r3, #0]
   2ab2c:	68fa      	ldr	r2, [r7, #12]
   2ab2e:	0011      	movs	r1, r2
   2ab30:	0018      	movs	r0, r3
   2ab32:	4b12      	ldr	r3, [pc, #72]	; (2ab7c <dir_next+0x1ec>)
   2ab34:	4798      	blx	r3
   2ab36:	0002      	movs	r2, r0
   2ab38:	687b      	ldr	r3, [r7, #4]
   2ab3a:	611a      	str	r2, [r3, #16]
			}
		}
	}

	dj->index = i;
   2ab3c:	687b      	ldr	r3, [r7, #4]
   2ab3e:	2208      	movs	r2, #8
   2ab40:	18ba      	adds	r2, r7, r2
   2ab42:	8812      	ldrh	r2, [r2, #0]
   2ab44:	80da      	strh	r2, [r3, #6]
	dj->dir = dj->fs->win + (i % (SS(dj->fs) / SZ_DIR)) * SZ_DIR;
   2ab46:	687b      	ldr	r3, [r7, #4]
   2ab48:	681b      	ldr	r3, [r3, #0]
   2ab4a:	3330      	adds	r3, #48	; 0x30
   2ab4c:	001a      	movs	r2, r3
   2ab4e:	2308      	movs	r3, #8
   2ab50:	18fb      	adds	r3, r7, r3
   2ab52:	881b      	ldrh	r3, [r3, #0]
   2ab54:	210f      	movs	r1, #15
   2ab56:	400b      	ands	r3, r1
   2ab58:	015b      	lsls	r3, r3, #5
   2ab5a:	18d2      	adds	r2, r2, r3
   2ab5c:	687b      	ldr	r3, [r7, #4]
   2ab5e:	615a      	str	r2, [r3, #20]

	return FR_OK;
   2ab60:	2300      	movs	r3, #0
}
   2ab62:	0018      	movs	r0, r3
   2ab64:	46bd      	mov	sp, r7
   2ab66:	b005      	add	sp, #20
   2ab68:	bd90      	pop	{r4, r7, pc}
   2ab6a:	46c0      	nop			; (mov r8, r8)
   2ab6c:	0002a2b5 	.word	0x0002a2b5
   2ab70:	0002a725 	.word	0x0002a725
   2ab74:	0002a01d 	.word	0x0002a01d
   2ab78:	00029f71 	.word	0x00029f71
   2ab7c:	0002a27d 	.word	0x0002a27d

0002ab80 <cmp_lfn>:
static
int cmp_lfn (			/* 1:Matched, 0:Not matched */
	WCHAR *lfnbuf,		/* Pointer to the LFN to be compared */
	BYTE *dir			/* Pointer to the directory entry containing a part of LFN */
)
{
   2ab80:	b590      	push	{r4, r7, lr}
   2ab82:	b087      	sub	sp, #28
   2ab84:	af00      	add	r7, sp, #0
   2ab86:	6078      	str	r0, [r7, #4]
   2ab88:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	i = ((dir[LDIR_Ord] & ~LLE) - 1) * 13;	/* Get offset in the LFN buffer */
   2ab8a:	683b      	ldr	r3, [r7, #0]
   2ab8c:	781b      	ldrb	r3, [r3, #0]
   2ab8e:	001a      	movs	r2, r3
   2ab90:	2340      	movs	r3, #64	; 0x40
   2ab92:	439a      	bics	r2, r3
   2ab94:	0013      	movs	r3, r2
   2ab96:	1e5a      	subs	r2, r3, #1
   2ab98:	0013      	movs	r3, r2
   2ab9a:	005b      	lsls	r3, r3, #1
   2ab9c:	189b      	adds	r3, r3, r2
   2ab9e:	009b      	lsls	r3, r3, #2
   2aba0:	189b      	adds	r3, r3, r2
   2aba2:	617b      	str	r3, [r7, #20]
	s = 0; wc = 1;
   2aba4:	2300      	movs	r3, #0
   2aba6:	613b      	str	r3, [r7, #16]
   2aba8:	230e      	movs	r3, #14
   2abaa:	18fb      	adds	r3, r7, r3
   2abac:	2201      	movs	r2, #1
   2abae:	801a      	strh	r2, [r3, #0]
	do {
		uc = LD_WORD(dir+LfnOfs[s]);	/* Pick an LFN character from the entry */
   2abb0:	4a31      	ldr	r2, [pc, #196]	; (2ac78 <cmp_lfn+0xf8>)
   2abb2:	693b      	ldr	r3, [r7, #16]
   2abb4:	18d3      	adds	r3, r2, r3
   2abb6:	781b      	ldrb	r3, [r3, #0]
   2abb8:	3301      	adds	r3, #1
   2abba:	683a      	ldr	r2, [r7, #0]
   2abbc:	18d3      	adds	r3, r2, r3
   2abbe:	781b      	ldrb	r3, [r3, #0]
   2abc0:	021b      	lsls	r3, r3, #8
   2abc2:	b21a      	sxth	r2, r3
   2abc4:	492c      	ldr	r1, [pc, #176]	; (2ac78 <cmp_lfn+0xf8>)
   2abc6:	693b      	ldr	r3, [r7, #16]
   2abc8:	18cb      	adds	r3, r1, r3
   2abca:	781b      	ldrb	r3, [r3, #0]
   2abcc:	0019      	movs	r1, r3
   2abce:	683b      	ldr	r3, [r7, #0]
   2abd0:	185b      	adds	r3, r3, r1
   2abd2:	781b      	ldrb	r3, [r3, #0]
   2abd4:	b21b      	sxth	r3, r3
   2abd6:	4313      	orrs	r3, r2
   2abd8:	b21a      	sxth	r2, r3
   2abda:	230c      	movs	r3, #12
   2abdc:	18fb      	adds	r3, r7, r3
   2abde:	801a      	strh	r2, [r3, #0]
		if (wc) {	/* Last char has not been processed */
   2abe0:	230e      	movs	r3, #14
   2abe2:	18fb      	adds	r3, r7, r3
   2abe4:	881b      	ldrh	r3, [r3, #0]
   2abe6:	2b00      	cmp	r3, #0
   2abe8:	d01f      	beq.n	2ac2a <cmp_lfn+0xaa>
			wc = ff_wtoupper(uc);		/* Convert it to upper case */
   2abea:	230e      	movs	r3, #14
   2abec:	18fc      	adds	r4, r7, r3
   2abee:	230c      	movs	r3, #12
   2abf0:	18fb      	adds	r3, r7, r3
   2abf2:	881b      	ldrh	r3, [r3, #0]
   2abf4:	0018      	movs	r0, r3
   2abf6:	4b21      	ldr	r3, [pc, #132]	; (2ac7c <cmp_lfn+0xfc>)
   2abf8:	4798      	blx	r3
   2abfa:	0003      	movs	r3, r0
   2abfc:	8023      	strh	r3, [r4, #0]
			if (i >= _MAX_LFN || wc != ff_wtoupper(lfnbuf[i++]))	/* Compare it */
   2abfe:	697b      	ldr	r3, [r7, #20]
   2ac00:	2bfe      	cmp	r3, #254	; 0xfe
   2ac02:	d810      	bhi.n	2ac26 <cmp_lfn+0xa6>
   2ac04:	697b      	ldr	r3, [r7, #20]
   2ac06:	1c5a      	adds	r2, r3, #1
   2ac08:	617a      	str	r2, [r7, #20]
   2ac0a:	005b      	lsls	r3, r3, #1
   2ac0c:	687a      	ldr	r2, [r7, #4]
   2ac0e:	18d3      	adds	r3, r2, r3
   2ac10:	881b      	ldrh	r3, [r3, #0]
   2ac12:	0018      	movs	r0, r3
   2ac14:	4b19      	ldr	r3, [pc, #100]	; (2ac7c <cmp_lfn+0xfc>)
   2ac16:	4798      	blx	r3
   2ac18:	0003      	movs	r3, r0
   2ac1a:	001a      	movs	r2, r3
   2ac1c:	230e      	movs	r3, #14
   2ac1e:	18fb      	adds	r3, r7, r3
   2ac20:	881b      	ldrh	r3, [r3, #0]
   2ac22:	4293      	cmp	r3, r2
   2ac24:	d009      	beq.n	2ac3a <cmp_lfn+0xba>
				return 0;				/* Not matched */
   2ac26:	2300      	movs	r3, #0
   2ac28:	e022      	b.n	2ac70 <cmp_lfn+0xf0>
		} else {
			if (uc != 0xFFFF) return 0;	/* Check filler */
   2ac2a:	230c      	movs	r3, #12
   2ac2c:	18fb      	adds	r3, r7, r3
   2ac2e:	881b      	ldrh	r3, [r3, #0]
   2ac30:	4a13      	ldr	r2, [pc, #76]	; (2ac80 <cmp_lfn+0x100>)
   2ac32:	4293      	cmp	r3, r2
   2ac34:	d001      	beq.n	2ac3a <cmp_lfn+0xba>
   2ac36:	2300      	movs	r3, #0
   2ac38:	e01a      	b.n	2ac70 <cmp_lfn+0xf0>
		}
	} while (++s < 13);				/* Repeat until all chars in the entry are checked */
   2ac3a:	693b      	ldr	r3, [r7, #16]
   2ac3c:	3301      	adds	r3, #1
   2ac3e:	613b      	str	r3, [r7, #16]
   2ac40:	693b      	ldr	r3, [r7, #16]
   2ac42:	2b0c      	cmp	r3, #12
   2ac44:	d9b4      	bls.n	2abb0 <cmp_lfn+0x30>

	if ((dir[LDIR_Ord] & LLE) && wc && lfnbuf[i])	/* Last segment matched but different length */
   2ac46:	683b      	ldr	r3, [r7, #0]
   2ac48:	781b      	ldrb	r3, [r3, #0]
   2ac4a:	001a      	movs	r2, r3
   2ac4c:	2340      	movs	r3, #64	; 0x40
   2ac4e:	4013      	ands	r3, r2
   2ac50:	d00d      	beq.n	2ac6e <cmp_lfn+0xee>
   2ac52:	230e      	movs	r3, #14
   2ac54:	18fb      	adds	r3, r7, r3
   2ac56:	881b      	ldrh	r3, [r3, #0]
   2ac58:	2b00      	cmp	r3, #0
   2ac5a:	d008      	beq.n	2ac6e <cmp_lfn+0xee>
   2ac5c:	697b      	ldr	r3, [r7, #20]
   2ac5e:	005b      	lsls	r3, r3, #1
   2ac60:	687a      	ldr	r2, [r7, #4]
   2ac62:	18d3      	adds	r3, r2, r3
   2ac64:	881b      	ldrh	r3, [r3, #0]
   2ac66:	2b00      	cmp	r3, #0
   2ac68:	d001      	beq.n	2ac6e <cmp_lfn+0xee>
		return 0;
   2ac6a:	2300      	movs	r3, #0
   2ac6c:	e000      	b.n	2ac70 <cmp_lfn+0xf0>

	return 1;						/* The part of LFN matched */
   2ac6e:	2301      	movs	r3, #1
}
   2ac70:	0018      	movs	r0, r3
   2ac72:	46bd      	mov	sp, r7
   2ac74:	b007      	add	sp, #28
   2ac76:	bd90      	pop	{r4, r7, pc}
   2ac78:	00037a14 	.word	0x00037a14
   2ac7c:	0002cc2d 	.word	0x0002cc2d
   2ac80:	0000ffff 	.word	0x0000ffff

0002ac84 <fit_lfn>:
	const WCHAR *lfnbuf,	/* Pointer to the LFN buffer */
	BYTE *dir,				/* Pointer to the directory entry */
	BYTE ord,				/* LFN order (1-20) */
	BYTE sum				/* SFN sum */
)
{
   2ac84:	b580      	push	{r7, lr}
   2ac86:	b088      	sub	sp, #32
   2ac88:	af00      	add	r7, sp, #0
   2ac8a:	60f8      	str	r0, [r7, #12]
   2ac8c:	60b9      	str	r1, [r7, #8]
   2ac8e:	0019      	movs	r1, r3
   2ac90:	1dfb      	adds	r3, r7, #7
   2ac92:	701a      	strb	r2, [r3, #0]
   2ac94:	1dbb      	adds	r3, r7, #6
   2ac96:	1c0a      	adds	r2, r1, #0
   2ac98:	701a      	strb	r2, [r3, #0]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set check sum */
   2ac9a:	68bb      	ldr	r3, [r7, #8]
   2ac9c:	330d      	adds	r3, #13
   2ac9e:	1dba      	adds	r2, r7, #6
   2aca0:	7812      	ldrb	r2, [r2, #0]
   2aca2:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
   2aca4:	68bb      	ldr	r3, [r7, #8]
   2aca6:	330b      	adds	r3, #11
   2aca8:	220f      	movs	r2, #15
   2acaa:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
   2acac:	68bb      	ldr	r3, [r7, #8]
   2acae:	330c      	adds	r3, #12
   2acb0:	2200      	movs	r2, #0
   2acb2:	701a      	strb	r2, [r3, #0]
	ST_WORD(dir+LDIR_FstClusLO, 0);
   2acb4:	68bb      	ldr	r3, [r7, #8]
   2acb6:	331a      	adds	r3, #26
   2acb8:	2200      	movs	r2, #0
   2acba:	701a      	strb	r2, [r3, #0]
   2acbc:	68bb      	ldr	r3, [r7, #8]
   2acbe:	331b      	adds	r3, #27
   2acc0:	2200      	movs	r2, #0
   2acc2:	701a      	strb	r2, [r3, #0]

	i = (ord - 1) * 13;				/* Get offset in the LFN buffer */
   2acc4:	1dfb      	adds	r3, r7, #7
   2acc6:	781b      	ldrb	r3, [r3, #0]
   2acc8:	1e5a      	subs	r2, r3, #1
   2acca:	0013      	movs	r3, r2
   2accc:	005b      	lsls	r3, r3, #1
   2acce:	189b      	adds	r3, r3, r2
   2acd0:	009b      	lsls	r3, r3, #2
   2acd2:	189b      	adds	r3, r3, r2
   2acd4:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
   2acd6:	2316      	movs	r3, #22
   2acd8:	18fb      	adds	r3, r7, r3
   2acda:	2200      	movs	r2, #0
   2acdc:	801a      	strh	r2, [r3, #0]
   2acde:	2300      	movs	r3, #0
   2ace0:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfnbuf[i++];	/* Get an effective char */
   2ace2:	2316      	movs	r3, #22
   2ace4:	18fb      	adds	r3, r7, r3
   2ace6:	881b      	ldrh	r3, [r3, #0]
   2ace8:	4a28      	ldr	r2, [pc, #160]	; (2ad8c <fit_lfn+0x108>)
   2acea:	4293      	cmp	r3, r2
   2acec:	d009      	beq.n	2ad02 <fit_lfn+0x7e>
   2acee:	69fb      	ldr	r3, [r7, #28]
   2acf0:	1c5a      	adds	r2, r3, #1
   2acf2:	61fa      	str	r2, [r7, #28]
   2acf4:	005b      	lsls	r3, r3, #1
   2acf6:	68fa      	ldr	r2, [r7, #12]
   2acf8:	18d2      	adds	r2, r2, r3
   2acfa:	2316      	movs	r3, #22
   2acfc:	18fb      	adds	r3, r7, r3
   2acfe:	8812      	ldrh	r2, [r2, #0]
   2ad00:	801a      	strh	r2, [r3, #0]
		ST_WORD(dir+LfnOfs[s], wc);	/* Put it */
   2ad02:	4a23      	ldr	r2, [pc, #140]	; (2ad90 <fit_lfn+0x10c>)
   2ad04:	69bb      	ldr	r3, [r7, #24]
   2ad06:	18d3      	adds	r3, r2, r3
   2ad08:	781b      	ldrb	r3, [r3, #0]
   2ad0a:	001a      	movs	r2, r3
   2ad0c:	68bb      	ldr	r3, [r7, #8]
   2ad0e:	189b      	adds	r3, r3, r2
   2ad10:	2216      	movs	r2, #22
   2ad12:	18ba      	adds	r2, r7, r2
   2ad14:	8812      	ldrh	r2, [r2, #0]
   2ad16:	b2d2      	uxtb	r2, r2
   2ad18:	701a      	strb	r2, [r3, #0]
   2ad1a:	4a1d      	ldr	r2, [pc, #116]	; (2ad90 <fit_lfn+0x10c>)
   2ad1c:	69bb      	ldr	r3, [r7, #24]
   2ad1e:	18d3      	adds	r3, r2, r3
   2ad20:	781b      	ldrb	r3, [r3, #0]
   2ad22:	3301      	adds	r3, #1
   2ad24:	68ba      	ldr	r2, [r7, #8]
   2ad26:	18d3      	adds	r3, r2, r3
   2ad28:	2216      	movs	r2, #22
   2ad2a:	18ba      	adds	r2, r7, r2
   2ad2c:	8812      	ldrh	r2, [r2, #0]
   2ad2e:	0a12      	lsrs	r2, r2, #8
   2ad30:	b292      	uxth	r2, r2
   2ad32:	b2d2      	uxtb	r2, r2
   2ad34:	701a      	strb	r2, [r3, #0]
		if (!wc) wc = 0xFFFF;		/* Padding chars following last char */
   2ad36:	2316      	movs	r3, #22
   2ad38:	18fb      	adds	r3, r7, r3
   2ad3a:	881b      	ldrh	r3, [r3, #0]
   2ad3c:	2b00      	cmp	r3, #0
   2ad3e:	d104      	bne.n	2ad4a <fit_lfn+0xc6>
   2ad40:	2316      	movs	r3, #22
   2ad42:	18fb      	adds	r3, r7, r3
   2ad44:	2201      	movs	r2, #1
   2ad46:	4252      	negs	r2, r2
   2ad48:	801a      	strh	r2, [r3, #0]
	} while (++s < 13);
   2ad4a:	69bb      	ldr	r3, [r7, #24]
   2ad4c:	3301      	adds	r3, #1
   2ad4e:	61bb      	str	r3, [r7, #24]
   2ad50:	69bb      	ldr	r3, [r7, #24]
   2ad52:	2b0c      	cmp	r3, #12
   2ad54:	d9c5      	bls.n	2ace2 <fit_lfn+0x5e>
	if (wc == 0xFFFF || !lfnbuf[i]) ord |= LLE;	/* Bottom LFN part is the start of LFN sequence */
   2ad56:	2316      	movs	r3, #22
   2ad58:	18fb      	adds	r3, r7, r3
   2ad5a:	881b      	ldrh	r3, [r3, #0]
   2ad5c:	4a0b      	ldr	r2, [pc, #44]	; (2ad8c <fit_lfn+0x108>)
   2ad5e:	4293      	cmp	r3, r2
   2ad60:	d006      	beq.n	2ad70 <fit_lfn+0xec>
   2ad62:	69fb      	ldr	r3, [r7, #28]
   2ad64:	005b      	lsls	r3, r3, #1
   2ad66:	68fa      	ldr	r2, [r7, #12]
   2ad68:	18d3      	adds	r3, r2, r3
   2ad6a:	881b      	ldrh	r3, [r3, #0]
   2ad6c:	2b00      	cmp	r3, #0
   2ad6e:	d105      	bne.n	2ad7c <fit_lfn+0xf8>
   2ad70:	1dfb      	adds	r3, r7, #7
   2ad72:	1dfa      	adds	r2, r7, #7
   2ad74:	7812      	ldrb	r2, [r2, #0]
   2ad76:	2140      	movs	r1, #64	; 0x40
   2ad78:	430a      	orrs	r2, r1
   2ad7a:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
   2ad7c:	68bb      	ldr	r3, [r7, #8]
   2ad7e:	1dfa      	adds	r2, r7, #7
   2ad80:	7812      	ldrb	r2, [r2, #0]
   2ad82:	701a      	strb	r2, [r3, #0]
}
   2ad84:	46c0      	nop			; (mov r8, r8)
   2ad86:	46bd      	mov	sp, r7
   2ad88:	b008      	add	sp, #32
   2ad8a:	bd80      	pop	{r7, pc}
   2ad8c:	0000ffff 	.word	0x0000ffff
   2ad90:	00037a14 	.word	0x00037a14

0002ad94 <gen_numname>:
	BYTE *dst,			/* Pointer to generated SFN */
	const BYTE *src,	/* Pointer to source SFN to be modified */
	const WCHAR *lfn,	/* Pointer to LFN */
	WORD seq			/* Sequence number */
)
{
   2ad94:	b580      	push	{r7, lr}
   2ad96:	b08a      	sub	sp, #40	; 0x28
   2ad98:	af00      	add	r7, sp, #0
   2ad9a:	60f8      	str	r0, [r7, #12]
   2ad9c:	60b9      	str	r1, [r7, #8]
   2ad9e:	607a      	str	r2, [r7, #4]
   2ada0:	001a      	movs	r2, r3
   2ada2:	1cbb      	adds	r3, r7, #2
   2ada4:	801a      	strh	r2, [r3, #0]
	BYTE ns[8], c;
	UINT i, j;


	mem_cpy(dst, src, 11);
   2ada6:	68b9      	ldr	r1, [r7, #8]
   2ada8:	68fb      	ldr	r3, [r7, #12]
   2adaa:	220b      	movs	r2, #11
   2adac:	0018      	movs	r0, r3
   2adae:	4b38      	ldr	r3, [pc, #224]	; (2ae90 <gen_numname+0xfc>)
   2adb0:	4798      	blx	r3

	if (seq > 5) {	/* On many collisions, generate a hash number instead of sequential number */
   2adb2:	1cbb      	adds	r3, r7, #2
   2adb4:	881b      	ldrh	r3, [r3, #0]
   2adb6:	2b05      	cmp	r3, #5
   2adb8:	d911      	bls.n	2adde <gen_numname+0x4a>
		do seq = (seq >> 1) + (seq << 15) + (WORD)*lfn++; while (*lfn);
   2adba:	1cbb      	adds	r3, r7, #2
   2adbc:	881b      	ldrh	r3, [r3, #0]
   2adbe:	b29a      	uxth	r2, r3
   2adc0:	0852      	lsrs	r2, r2, #1
   2adc2:	03db      	lsls	r3, r3, #15
   2adc4:	4313      	orrs	r3, r2
   2adc6:	b299      	uxth	r1, r3
   2adc8:	687b      	ldr	r3, [r7, #4]
   2adca:	1c9a      	adds	r2, r3, #2
   2adcc:	607a      	str	r2, [r7, #4]
   2adce:	881a      	ldrh	r2, [r3, #0]
   2add0:	1cbb      	adds	r3, r7, #2
   2add2:	188a      	adds	r2, r1, r2
   2add4:	801a      	strh	r2, [r3, #0]
   2add6:	687b      	ldr	r3, [r7, #4]
   2add8:	881b      	ldrh	r3, [r3, #0]
   2adda:	2b00      	cmp	r3, #0
   2addc:	d1ed      	bne.n	2adba <gen_numname+0x26>
	}

	/* itoa (hexdecimal) */
	i = 7;
   2adde:	2307      	movs	r3, #7
   2ade0:	623b      	str	r3, [r7, #32]
	do {
		c = (seq % 16) + '0';
   2ade2:	1cbb      	adds	r3, r7, #2
   2ade4:	881b      	ldrh	r3, [r3, #0]
   2ade6:	b2db      	uxtb	r3, r3
   2ade8:	220f      	movs	r2, #15
   2adea:	4013      	ands	r3, r2
   2adec:	b2da      	uxtb	r2, r3
   2adee:	2327      	movs	r3, #39	; 0x27
   2adf0:	18fb      	adds	r3, r7, r3
   2adf2:	3230      	adds	r2, #48	; 0x30
   2adf4:	701a      	strb	r2, [r3, #0]
		if (c > '9') c += 7;
   2adf6:	2327      	movs	r3, #39	; 0x27
   2adf8:	18fb      	adds	r3, r7, r3
   2adfa:	781b      	ldrb	r3, [r3, #0]
   2adfc:	2b39      	cmp	r3, #57	; 0x39
   2adfe:	d906      	bls.n	2ae0e <gen_numname+0x7a>
   2ae00:	2327      	movs	r3, #39	; 0x27
   2ae02:	18fb      	adds	r3, r7, r3
   2ae04:	2227      	movs	r2, #39	; 0x27
   2ae06:	18ba      	adds	r2, r7, r2
   2ae08:	7812      	ldrb	r2, [r2, #0]
   2ae0a:	3207      	adds	r2, #7
   2ae0c:	701a      	strb	r2, [r3, #0]
		ns[i--] = c;
   2ae0e:	6a3b      	ldr	r3, [r7, #32]
   2ae10:	1e5a      	subs	r2, r3, #1
   2ae12:	623a      	str	r2, [r7, #32]
   2ae14:	2214      	movs	r2, #20
   2ae16:	18ba      	adds	r2, r7, r2
   2ae18:	2127      	movs	r1, #39	; 0x27
   2ae1a:	1879      	adds	r1, r7, r1
   2ae1c:	7809      	ldrb	r1, [r1, #0]
   2ae1e:	54d1      	strb	r1, [r2, r3]
		seq /= 16;
   2ae20:	1cbb      	adds	r3, r7, #2
   2ae22:	1cba      	adds	r2, r7, #2
   2ae24:	8812      	ldrh	r2, [r2, #0]
   2ae26:	0912      	lsrs	r2, r2, #4
   2ae28:	801a      	strh	r2, [r3, #0]
	} while (seq);
   2ae2a:	1cbb      	adds	r3, r7, #2
   2ae2c:	881b      	ldrh	r3, [r3, #0]
   2ae2e:	2b00      	cmp	r3, #0
   2ae30:	d1d7      	bne.n	2ade2 <gen_numname+0x4e>
	ns[i] = '~';
   2ae32:	2314      	movs	r3, #20
   2ae34:	18fa      	adds	r2, r7, r3
   2ae36:	6a3b      	ldr	r3, [r7, #32]
   2ae38:	18d3      	adds	r3, r2, r3
   2ae3a:	227e      	movs	r2, #126	; 0x7e
   2ae3c:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
   2ae3e:	2300      	movs	r3, #0
   2ae40:	61fb      	str	r3, [r7, #28]
   2ae42:	e002      	b.n	2ae4a <gen_numname+0xb6>
   2ae44:	69fb      	ldr	r3, [r7, #28]
   2ae46:	3301      	adds	r3, #1
   2ae48:	61fb      	str	r3, [r7, #28]
   2ae4a:	69fa      	ldr	r2, [r7, #28]
   2ae4c:	6a3b      	ldr	r3, [r7, #32]
   2ae4e:	429a      	cmp	r2, r3
   2ae50:	d205      	bcs.n	2ae5e <gen_numname+0xca>
   2ae52:	68fa      	ldr	r2, [r7, #12]
   2ae54:	69fb      	ldr	r3, [r7, #28]
   2ae56:	18d3      	adds	r3, r2, r3
   2ae58:	781b      	ldrb	r3, [r3, #0]
   2ae5a:	2b20      	cmp	r3, #32
   2ae5c:	d1f2      	bne.n	2ae44 <gen_numname+0xb0>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
   2ae5e:	69fb      	ldr	r3, [r7, #28]
   2ae60:	1c5a      	adds	r2, r3, #1
   2ae62:	61fa      	str	r2, [r7, #28]
   2ae64:	68fa      	ldr	r2, [r7, #12]
   2ae66:	18d2      	adds	r2, r2, r3
   2ae68:	6a3b      	ldr	r3, [r7, #32]
   2ae6a:	2b07      	cmp	r3, #7
   2ae6c:	d806      	bhi.n	2ae7c <gen_numname+0xe8>
   2ae6e:	6a3b      	ldr	r3, [r7, #32]
   2ae70:	1c59      	adds	r1, r3, #1
   2ae72:	6239      	str	r1, [r7, #32]
   2ae74:	2114      	movs	r1, #20
   2ae76:	1879      	adds	r1, r7, r1
   2ae78:	5ccb      	ldrb	r3, [r1, r3]
   2ae7a:	e000      	b.n	2ae7e <gen_numname+0xea>
   2ae7c:	2320      	movs	r3, #32
   2ae7e:	7013      	strb	r3, [r2, #0]
	} while (j < 8);
   2ae80:	69fb      	ldr	r3, [r7, #28]
   2ae82:	2b07      	cmp	r3, #7
   2ae84:	d9eb      	bls.n	2ae5e <gen_numname+0xca>
}
   2ae86:	46c0      	nop			; (mov r8, r8)
   2ae88:	46bd      	mov	sp, r7
   2ae8a:	b00a      	add	sp, #40	; 0x28
   2ae8c:	bd80      	pop	{r7, pc}
   2ae8e:	46c0      	nop			; (mov r8, r8)
   2ae90:	00029f39 	.word	0x00029f39

0002ae94 <sum_sfn>:
#if _USE_LFN
static
BYTE sum_sfn (
	const BYTE *dir		/* Ptr to directory entry */
)
{
   2ae94:	b580      	push	{r7, lr}
   2ae96:	b084      	sub	sp, #16
   2ae98:	af00      	add	r7, sp, #0
   2ae9a:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
   2ae9c:	230f      	movs	r3, #15
   2ae9e:	18fb      	adds	r3, r7, r3
   2aea0:	2200      	movs	r2, #0
   2aea2:	701a      	strb	r2, [r3, #0]
	UINT n = 11;
   2aea4:	230b      	movs	r3, #11
   2aea6:	60bb      	str	r3, [r7, #8]

	do sum = (sum >> 1) + (sum << 7) + *dir++; while (--n);
   2aea8:	230f      	movs	r3, #15
   2aeaa:	18fb      	adds	r3, r7, r3
   2aeac:	781b      	ldrb	r3, [r3, #0]
   2aeae:	b2da      	uxtb	r2, r3
   2aeb0:	0852      	lsrs	r2, r2, #1
   2aeb2:	01db      	lsls	r3, r3, #7
   2aeb4:	4313      	orrs	r3, r2
   2aeb6:	b2d9      	uxtb	r1, r3
   2aeb8:	687b      	ldr	r3, [r7, #4]
   2aeba:	1c5a      	adds	r2, r3, #1
   2aebc:	607a      	str	r2, [r7, #4]
   2aebe:	781a      	ldrb	r2, [r3, #0]
   2aec0:	230f      	movs	r3, #15
   2aec2:	18fb      	adds	r3, r7, r3
   2aec4:	188a      	adds	r2, r1, r2
   2aec6:	701a      	strb	r2, [r3, #0]
   2aec8:	68bb      	ldr	r3, [r7, #8]
   2aeca:	3b01      	subs	r3, #1
   2aecc:	60bb      	str	r3, [r7, #8]
   2aece:	68bb      	ldr	r3, [r7, #8]
   2aed0:	2b00      	cmp	r3, #0
   2aed2:	d1e9      	bne.n	2aea8 <sum_sfn+0x14>
	return sum;
   2aed4:	230f      	movs	r3, #15
   2aed6:	18fb      	adds	r3, r7, r3
   2aed8:	781b      	ldrb	r3, [r3, #0]
}
   2aeda:	0018      	movs	r0, r3
   2aedc:	46bd      	mov	sp, r7
   2aede:	b004      	add	sp, #16
   2aee0:	bd80      	pop	{r7, pc}
	...

0002aee4 <dir_find>:

static
FRESULT dir_find (
	DIR *dj			/* Pointer to the directory object linked to the file name */
)
{
   2aee4:	b590      	push	{r4, r7, lr}
   2aee6:	b087      	sub	sp, #28
   2aee8:	af00      	add	r7, sp, #0
   2aeea:	6078      	str	r0, [r7, #4]
	BYTE c, *dir;
#if _USE_LFN
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dj, 0);			/* Rewind directory object */
   2aeec:	2317      	movs	r3, #23
   2aeee:	18fc      	adds	r4, r7, r3
   2aef0:	687b      	ldr	r3, [r7, #4]
   2aef2:	2100      	movs	r1, #0
   2aef4:	0018      	movs	r0, r3
   2aef6:	4b74      	ldr	r3, [pc, #464]	; (2b0c8 <dir_find+0x1e4>)
   2aef8:	4798      	blx	r3
   2aefa:	0003      	movs	r3, r0
   2aefc:	7023      	strb	r3, [r4, #0]
	if (res != FR_OK) return res;
   2aefe:	2317      	movs	r3, #23
   2af00:	18fb      	adds	r3, r7, r3
   2af02:	781b      	ldrb	r3, [r3, #0]
   2af04:	2b00      	cmp	r3, #0
   2af06:	d003      	beq.n	2af10 <dir_find+0x2c>
   2af08:	2317      	movs	r3, #23
   2af0a:	18fb      	adds	r3, r7, r3
   2af0c:	781b      	ldrb	r3, [r3, #0]
   2af0e:	e0d6      	b.n	2b0be <dir_find+0x1da>

#if _USE_LFN
	ord = sum = 0xFF;
   2af10:	2314      	movs	r3, #20
   2af12:	18fb      	adds	r3, r7, r3
   2af14:	22ff      	movs	r2, #255	; 0xff
   2af16:	701a      	strb	r2, [r3, #0]
   2af18:	2315      	movs	r3, #21
   2af1a:	18fb      	adds	r3, r7, r3
   2af1c:	2214      	movs	r2, #20
   2af1e:	18ba      	adds	r2, r7, r2
   2af20:	7812      	ldrb	r2, [r2, #0]
   2af22:	701a      	strb	r2, [r3, #0]
#endif
	do {
		res = move_window(dj->fs, dj->sect);
   2af24:	687b      	ldr	r3, [r7, #4]
   2af26:	681a      	ldr	r2, [r3, #0]
   2af28:	687b      	ldr	r3, [r7, #4]
   2af2a:	691b      	ldr	r3, [r3, #16]
   2af2c:	2117      	movs	r1, #23
   2af2e:	187c      	adds	r4, r7, r1
   2af30:	0019      	movs	r1, r3
   2af32:	0010      	movs	r0, r2
   2af34:	4b65      	ldr	r3, [pc, #404]	; (2b0cc <dir_find+0x1e8>)
   2af36:	4798      	blx	r3
   2af38:	0003      	movs	r3, r0
   2af3a:	7023      	strb	r3, [r4, #0]
		if (res != FR_OK) break;
   2af3c:	2317      	movs	r3, #23
   2af3e:	18fb      	adds	r3, r7, r3
   2af40:	781b      	ldrb	r3, [r3, #0]
   2af42:	2b00      	cmp	r3, #0
   2af44:	d000      	beq.n	2af48 <dir_find+0x64>
   2af46:	e0b2      	b.n	2b0ae <dir_find+0x1ca>
		dir = dj->dir;					/* Ptr to the directory entry of current index */
   2af48:	687b      	ldr	r3, [r7, #4]
   2af4a:	695b      	ldr	r3, [r3, #20]
   2af4c:	613b      	str	r3, [r7, #16]
		c = dir[DIR_Name];
   2af4e:	2316      	movs	r3, #22
   2af50:	18fb      	adds	r3, r7, r3
   2af52:	693a      	ldr	r2, [r7, #16]
   2af54:	7812      	ldrb	r2, [r2, #0]
   2af56:	701a      	strb	r2, [r3, #0]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
   2af58:	2316      	movs	r3, #22
   2af5a:	18fb      	adds	r3, r7, r3
   2af5c:	781b      	ldrb	r3, [r3, #0]
   2af5e:	2b00      	cmp	r3, #0
   2af60:	d104      	bne.n	2af6c <dir_find+0x88>
   2af62:	2317      	movs	r3, #23
   2af64:	18fb      	adds	r3, r7, r3
   2af66:	2204      	movs	r2, #4
   2af68:	701a      	strb	r2, [r3, #0]
   2af6a:	e0a5      	b.n	2b0b8 <dir_find+0x1d4>
#if _USE_LFN	/* LFN configuration */
		a = dir[DIR_Attr] & AM_MASK;
   2af6c:	693b      	ldr	r3, [r7, #16]
   2af6e:	330b      	adds	r3, #11
   2af70:	781a      	ldrb	r2, [r3, #0]
   2af72:	230f      	movs	r3, #15
   2af74:	18fb      	adds	r3, r7, r3
   2af76:	213f      	movs	r1, #63	; 0x3f
   2af78:	400a      	ands	r2, r1
   2af7a:	701a      	strb	r2, [r3, #0]
		if (c == DDE || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
   2af7c:	2316      	movs	r3, #22
   2af7e:	18fb      	adds	r3, r7, r3
   2af80:	781b      	ldrb	r3, [r3, #0]
   2af82:	2be5      	cmp	r3, #229	; 0xe5
   2af84:	d00a      	beq.n	2af9c <dir_find+0xb8>
   2af86:	230f      	movs	r3, #15
   2af88:	18fb      	adds	r3, r7, r3
   2af8a:	781b      	ldrb	r3, [r3, #0]
   2af8c:	2208      	movs	r2, #8
   2af8e:	4013      	ands	r3, r2
   2af90:	d009      	beq.n	2afa6 <dir_find+0xc2>
   2af92:	230f      	movs	r3, #15
   2af94:	18fb      	adds	r3, r7, r3
   2af96:	781b      	ldrb	r3, [r3, #0]
   2af98:	2b0f      	cmp	r3, #15
   2af9a:	d004      	beq.n	2afa6 <dir_find+0xc2>
			ord = 0xFF;
   2af9c:	2315      	movs	r3, #21
   2af9e:	18fb      	adds	r3, r7, r3
   2afa0:	22ff      	movs	r2, #255	; 0xff
   2afa2:	701a      	strb	r2, [r3, #0]
   2afa4:	e073      	b.n	2b08e <dir_find+0x1aa>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
   2afa6:	230f      	movs	r3, #15
   2afa8:	18fb      	adds	r3, r7, r3
   2afaa:	781b      	ldrb	r3, [r3, #0]
   2afac:	2b0f      	cmp	r3, #15
   2afae:	d145      	bne.n	2b03c <dir_find+0x158>
				if (dj->lfn) {
   2afb0:	687b      	ldr	r3, [r7, #4]
   2afb2:	69db      	ldr	r3, [r3, #28]
   2afb4:	2b00      	cmp	r3, #0
   2afb6:	d100      	bne.n	2afba <dir_find+0xd6>
   2afb8:	e069      	b.n	2b08e <dir_find+0x1aa>
					if (c & LLE) {		/* Is it start of LFN sequence? */
   2afba:	2316      	movs	r3, #22
   2afbc:	18fb      	adds	r3, r7, r3
   2afbe:	781b      	ldrb	r3, [r3, #0]
   2afc0:	2240      	movs	r2, #64	; 0x40
   2afc2:	4013      	ands	r3, r2
   2afc4:	d016      	beq.n	2aff4 <dir_find+0x110>
						sum = dir[LDIR_Chksum];
   2afc6:	2314      	movs	r3, #20
   2afc8:	18fb      	adds	r3, r7, r3
   2afca:	693a      	ldr	r2, [r7, #16]
   2afcc:	7b52      	ldrb	r2, [r2, #13]
   2afce:	701a      	strb	r2, [r3, #0]
						c &= ~LLE; ord = c;	/* LFN start order */
   2afd0:	2316      	movs	r3, #22
   2afd2:	18fb      	adds	r3, r7, r3
   2afd4:	2216      	movs	r2, #22
   2afd6:	18ba      	adds	r2, r7, r2
   2afd8:	7812      	ldrb	r2, [r2, #0]
   2afda:	2140      	movs	r1, #64	; 0x40
   2afdc:	438a      	bics	r2, r1
   2afde:	701a      	strb	r2, [r3, #0]
   2afe0:	2315      	movs	r3, #21
   2afe2:	18fb      	adds	r3, r7, r3
   2afe4:	2216      	movs	r2, #22
   2afe6:	18ba      	adds	r2, r7, r2
   2afe8:	7812      	ldrb	r2, [r2, #0]
   2afea:	701a      	strb	r2, [r3, #0]
						dj->lfn_idx = dj->index;
   2afec:	687b      	ldr	r3, [r7, #4]
   2afee:	88da      	ldrh	r2, [r3, #6]
   2aff0:	687b      	ldr	r3, [r7, #4]
   2aff2:	841a      	strh	r2, [r3, #32]
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dir[LDIR_Chksum] && cmp_lfn(dj->lfn, dir)) ? ord - 1 : 0xFF;
   2aff4:	2316      	movs	r3, #22
   2aff6:	18fa      	adds	r2, r7, r3
   2aff8:	2315      	movs	r3, #21
   2affa:	18fb      	adds	r3, r7, r3
   2affc:	7812      	ldrb	r2, [r2, #0]
   2affe:	781b      	ldrb	r3, [r3, #0]
   2b000:	429a      	cmp	r2, r3
   2b002:	d116      	bne.n	2b032 <dir_find+0x14e>
   2b004:	693b      	ldr	r3, [r7, #16]
   2b006:	330d      	adds	r3, #13
   2b008:	781b      	ldrb	r3, [r3, #0]
   2b00a:	2214      	movs	r2, #20
   2b00c:	18ba      	adds	r2, r7, r2
   2b00e:	7812      	ldrb	r2, [r2, #0]
   2b010:	429a      	cmp	r2, r3
   2b012:	d10e      	bne.n	2b032 <dir_find+0x14e>
   2b014:	687b      	ldr	r3, [r7, #4]
   2b016:	69db      	ldr	r3, [r3, #28]
   2b018:	693a      	ldr	r2, [r7, #16]
   2b01a:	0011      	movs	r1, r2
   2b01c:	0018      	movs	r0, r3
   2b01e:	4b2c      	ldr	r3, [pc, #176]	; (2b0d0 <dir_find+0x1ec>)
   2b020:	4798      	blx	r3
   2b022:	1e03      	subs	r3, r0, #0
   2b024:	d005      	beq.n	2b032 <dir_find+0x14e>
   2b026:	2315      	movs	r3, #21
   2b028:	18fb      	adds	r3, r7, r3
   2b02a:	781b      	ldrb	r3, [r3, #0]
   2b02c:	3b01      	subs	r3, #1
   2b02e:	b2da      	uxtb	r2, r3
   2b030:	e000      	b.n	2b034 <dir_find+0x150>
   2b032:	22ff      	movs	r2, #255	; 0xff
   2b034:	2315      	movs	r3, #21
   2b036:	18fb      	adds	r3, r7, r3
   2b038:	701a      	strb	r2, [r3, #0]
   2b03a:	e028      	b.n	2b08e <dir_find+0x1aa>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dir)) break;	/* LFN matched? */
   2b03c:	2315      	movs	r3, #21
   2b03e:	18fb      	adds	r3, r7, r3
   2b040:	781b      	ldrb	r3, [r3, #0]
   2b042:	2b00      	cmp	r3, #0
   2b044:	d10a      	bne.n	2b05c <dir_find+0x178>
   2b046:	693b      	ldr	r3, [r7, #16]
   2b048:	0018      	movs	r0, r3
   2b04a:	4b22      	ldr	r3, [pc, #136]	; (2b0d4 <dir_find+0x1f0>)
   2b04c:	4798      	blx	r3
   2b04e:	0003      	movs	r3, r0
   2b050:	001a      	movs	r2, r3
   2b052:	2314      	movs	r3, #20
   2b054:	18fb      	adds	r3, r7, r3
   2b056:	781b      	ldrb	r3, [r3, #0]
   2b058:	4293      	cmp	r3, r2
   2b05a:	d02a      	beq.n	2b0b2 <dir_find+0x1ce>
				ord = 0xFF; dj->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
   2b05c:	2315      	movs	r3, #21
   2b05e:	18fb      	adds	r3, r7, r3
   2b060:	22ff      	movs	r2, #255	; 0xff
   2b062:	701a      	strb	r2, [r3, #0]
   2b064:	687b      	ldr	r3, [r7, #4]
   2b066:	2201      	movs	r2, #1
   2b068:	4252      	negs	r2, r2
   2b06a:	841a      	strh	r2, [r3, #32]
				if (!(dj->fn[NS] & NS_LOSS) && !mem_cmp(dir, dj->fn, 11)) break;	/* SFN matched? */
   2b06c:	687b      	ldr	r3, [r7, #4]
   2b06e:	699b      	ldr	r3, [r3, #24]
   2b070:	330b      	adds	r3, #11
   2b072:	781b      	ldrb	r3, [r3, #0]
   2b074:	001a      	movs	r2, r3
   2b076:	2301      	movs	r3, #1
   2b078:	4013      	ands	r3, r2
   2b07a:	d108      	bne.n	2b08e <dir_find+0x1aa>
   2b07c:	687b      	ldr	r3, [r7, #4]
   2b07e:	6999      	ldr	r1, [r3, #24]
   2b080:	693b      	ldr	r3, [r7, #16]
   2b082:	220b      	movs	r2, #11
   2b084:	0018      	movs	r0, r3
   2b086:	4b14      	ldr	r3, [pc, #80]	; (2b0d8 <dir_find+0x1f4>)
   2b088:	4798      	blx	r3
   2b08a:	1e03      	subs	r3, r0, #0
   2b08c:	d013      	beq.n	2b0b6 <dir_find+0x1d2>
		}
#else		/* Non LFN configuration */
		if (!(dir[DIR_Attr] & AM_VOL) && !mem_cmp(dir, dj->fn, 11)) /* Is it a valid entry? */
			break;
#endif
		res = dir_next(dj, 0);		/* Next entry */
   2b08e:	2317      	movs	r3, #23
   2b090:	18fc      	adds	r4, r7, r3
   2b092:	687b      	ldr	r3, [r7, #4]
   2b094:	2100      	movs	r1, #0
   2b096:	0018      	movs	r0, r3
   2b098:	4b10      	ldr	r3, [pc, #64]	; (2b0dc <dir_find+0x1f8>)
   2b09a:	4798      	blx	r3
   2b09c:	0003      	movs	r3, r0
   2b09e:	7023      	strb	r3, [r4, #0]
	} while (res == FR_OK);
   2b0a0:	2317      	movs	r3, #23
   2b0a2:	18fb      	adds	r3, r7, r3
   2b0a4:	781b      	ldrb	r3, [r3, #0]
   2b0a6:	2b00      	cmp	r3, #0
   2b0a8:	d100      	bne.n	2b0ac <dir_find+0x1c8>
   2b0aa:	e73b      	b.n	2af24 <dir_find+0x40>
   2b0ac:	e004      	b.n	2b0b8 <dir_find+0x1d4>
		if (res != FR_OK) break;
   2b0ae:	46c0      	nop			; (mov r8, r8)
   2b0b0:	e002      	b.n	2b0b8 <dir_find+0x1d4>
				if (!ord && sum == sum_sfn(dir)) break;	/* LFN matched? */
   2b0b2:	46c0      	nop			; (mov r8, r8)
   2b0b4:	e000      	b.n	2b0b8 <dir_find+0x1d4>
				if (!(dj->fn[NS] & NS_LOSS) && !mem_cmp(dir, dj->fn, 11)) break;	/* SFN matched? */
   2b0b6:	46c0      	nop			; (mov r8, r8)

	return res;
   2b0b8:	2317      	movs	r3, #23
   2b0ba:	18fb      	adds	r3, r7, r3
   2b0bc:	781b      	ldrb	r3, [r3, #0]
}
   2b0be:	0018      	movs	r0, r3
   2b0c0:	46bd      	mov	sp, r7
   2b0c2:	b007      	add	sp, #28
   2b0c4:	bd90      	pop	{r4, r7, pc}
   2b0c6:	46c0      	nop			; (mov r8, r8)
   2b0c8:	0002a861 	.word	0x0002a861
   2b0cc:	0002a01d 	.word	0x0002a01d
   2b0d0:	0002ab81 	.word	0x0002ab81
   2b0d4:	0002ae95 	.word	0x0002ae95
   2b0d8:	00029fa1 	.word	0x00029fa1
   2b0dc:	0002a991 	.word	0x0002a991

0002b0e0 <dir_register>:
#if !_FS_READONLY
static
FRESULT dir_register (	/* FR_OK:Successful, FR_DENIED:No free entry or too many SFN collision, FR_DISK_ERR:Disk error */
	DIR *dj				/* Target directory with object name to be created */
)
{
   2b0e0:	b590      	push	{r4, r7, lr}
   2b0e2:	b08d      	sub	sp, #52	; 0x34
   2b0e4:	af00      	add	r7, sp, #0
   2b0e6:	6078      	str	r0, [r7, #4]
	WORD n, ne, is;
	BYTE sn[12], *fn, sum;
	WCHAR *lfn;


	fn = dj->fn; lfn = dj->lfn;
   2b0e8:	687b      	ldr	r3, [r7, #4]
   2b0ea:	699b      	ldr	r3, [r3, #24]
   2b0ec:	627b      	str	r3, [r7, #36]	; 0x24
   2b0ee:	687b      	ldr	r3, [r7, #4]
   2b0f0:	69db      	ldr	r3, [r3, #28]
   2b0f2:	623b      	str	r3, [r7, #32]
	mem_cpy(sn, fn, 12);
   2b0f4:	6a79      	ldr	r1, [r7, #36]	; 0x24
   2b0f6:	230c      	movs	r3, #12
   2b0f8:	18fb      	adds	r3, r7, r3
   2b0fa:	220c      	movs	r2, #12
   2b0fc:	0018      	movs	r0, r3
   2b0fe:	4bc8      	ldr	r3, [pc, #800]	; (2b420 <dir_register+0x340>)
   2b100:	4798      	blx	r3

	if (_FS_RPATH && (sn[NS] & NS_DOT))		/* Cannot create dot entry */
		return FR_INVALID_NAME;

	if (sn[NS] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
   2b102:	230c      	movs	r3, #12
   2b104:	18fb      	adds	r3, r7, r3
   2b106:	7adb      	ldrb	r3, [r3, #11]
   2b108:	001a      	movs	r2, r3
   2b10a:	2301      	movs	r3, #1
   2b10c:	4013      	ands	r3, r2
   2b10e:	d048      	beq.n	2b1a2 <dir_register+0xc2>
		fn[NS] = 0; dj->lfn = 0;			/* Find only SFN */
   2b110:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   2b112:	330b      	adds	r3, #11
   2b114:	2200      	movs	r2, #0
   2b116:	701a      	strb	r2, [r3, #0]
   2b118:	687b      	ldr	r3, [r7, #4]
   2b11a:	2200      	movs	r2, #0
   2b11c:	61da      	str	r2, [r3, #28]
		for (n = 1; n < 100; n++) {
   2b11e:	232c      	movs	r3, #44	; 0x2c
   2b120:	18fb      	adds	r3, r7, r3
   2b122:	2201      	movs	r2, #1
   2b124:	801a      	strh	r2, [r3, #0]
   2b126:	e01c      	b.n	2b162 <dir_register+0x82>
			gen_numname(fn, sn, lfn, n);	/* Generate a numbered name */
   2b128:	232c      	movs	r3, #44	; 0x2c
   2b12a:	18fb      	adds	r3, r7, r3
   2b12c:	881b      	ldrh	r3, [r3, #0]
   2b12e:	6a3a      	ldr	r2, [r7, #32]
   2b130:	210c      	movs	r1, #12
   2b132:	1879      	adds	r1, r7, r1
   2b134:	6a78      	ldr	r0, [r7, #36]	; 0x24
   2b136:	4cbb      	ldr	r4, [pc, #748]	; (2b424 <dir_register+0x344>)
   2b138:	47a0      	blx	r4
			res = dir_find(dj);				/* Check if the name collides with existing SFN */
   2b13a:	232f      	movs	r3, #47	; 0x2f
   2b13c:	18fc      	adds	r4, r7, r3
   2b13e:	687b      	ldr	r3, [r7, #4]
   2b140:	0018      	movs	r0, r3
   2b142:	4bb9      	ldr	r3, [pc, #740]	; (2b428 <dir_register+0x348>)
   2b144:	4798      	blx	r3
   2b146:	0003      	movs	r3, r0
   2b148:	7023      	strb	r3, [r4, #0]
			if (res != FR_OK) break;
   2b14a:	232f      	movs	r3, #47	; 0x2f
   2b14c:	18fb      	adds	r3, r7, r3
   2b14e:	781b      	ldrb	r3, [r3, #0]
   2b150:	2b00      	cmp	r3, #0
   2b152:	d10c      	bne.n	2b16e <dir_register+0x8e>
		for (n = 1; n < 100; n++) {
   2b154:	232c      	movs	r3, #44	; 0x2c
   2b156:	18fb      	adds	r3, r7, r3
   2b158:	881a      	ldrh	r2, [r3, #0]
   2b15a:	232c      	movs	r3, #44	; 0x2c
   2b15c:	18fb      	adds	r3, r7, r3
   2b15e:	3201      	adds	r2, #1
   2b160:	801a      	strh	r2, [r3, #0]
   2b162:	232c      	movs	r3, #44	; 0x2c
   2b164:	18fb      	adds	r3, r7, r3
   2b166:	881b      	ldrh	r3, [r3, #0]
   2b168:	2b63      	cmp	r3, #99	; 0x63
   2b16a:	d9dd      	bls.n	2b128 <dir_register+0x48>
   2b16c:	e000      	b.n	2b170 <dir_register+0x90>
			if (res != FR_OK) break;
   2b16e:	46c0      	nop			; (mov r8, r8)
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
   2b170:	232c      	movs	r3, #44	; 0x2c
   2b172:	18fb      	adds	r3, r7, r3
   2b174:	881b      	ldrh	r3, [r3, #0]
   2b176:	2b64      	cmp	r3, #100	; 0x64
   2b178:	d101      	bne.n	2b17e <dir_register+0x9e>
   2b17a:	2307      	movs	r3, #7
   2b17c:	e14c      	b.n	2b418 <dir_register+0x338>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
   2b17e:	232f      	movs	r3, #47	; 0x2f
   2b180:	18fb      	adds	r3, r7, r3
   2b182:	781b      	ldrb	r3, [r3, #0]
   2b184:	2b04      	cmp	r3, #4
   2b186:	d003      	beq.n	2b190 <dir_register+0xb0>
   2b188:	232f      	movs	r3, #47	; 0x2f
   2b18a:	18fb      	adds	r3, r7, r3
   2b18c:	781b      	ldrb	r3, [r3, #0]
   2b18e:	e143      	b.n	2b418 <dir_register+0x338>
		fn[NS] = sn[NS]; dj->lfn = lfn;
   2b190:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   2b192:	330b      	adds	r3, #11
   2b194:	220c      	movs	r2, #12
   2b196:	18ba      	adds	r2, r7, r2
   2b198:	7ad2      	ldrb	r2, [r2, #11]
   2b19a:	701a      	strb	r2, [r3, #0]
   2b19c:	687b      	ldr	r3, [r7, #4]
   2b19e:	6a3a      	ldr	r2, [r7, #32]
   2b1a0:	61da      	str	r2, [r3, #28]
	}

	if (sn[NS] & NS_LFN) {			/* When LFN is to be created, reserve an SFN + LFN entries. */
   2b1a2:	230c      	movs	r3, #12
   2b1a4:	18fb      	adds	r3, r7, r3
   2b1a6:	7adb      	ldrb	r3, [r3, #11]
   2b1a8:	001a      	movs	r2, r3
   2b1aa:	2302      	movs	r3, #2
   2b1ac:	4013      	ands	r3, r2
   2b1ae:	d023      	beq.n	2b1f8 <dir_register+0x118>
		for (ne = 0; lfn[ne]; ne++) ;
   2b1b0:	232a      	movs	r3, #42	; 0x2a
   2b1b2:	18fb      	adds	r3, r7, r3
   2b1b4:	2200      	movs	r2, #0
   2b1b6:	801a      	strh	r2, [r3, #0]
   2b1b8:	e006      	b.n	2b1c8 <dir_register+0xe8>
   2b1ba:	232a      	movs	r3, #42	; 0x2a
   2b1bc:	18fb      	adds	r3, r7, r3
   2b1be:	881a      	ldrh	r2, [r3, #0]
   2b1c0:	232a      	movs	r3, #42	; 0x2a
   2b1c2:	18fb      	adds	r3, r7, r3
   2b1c4:	3201      	adds	r2, #1
   2b1c6:	801a      	strh	r2, [r3, #0]
   2b1c8:	232a      	movs	r3, #42	; 0x2a
   2b1ca:	18fb      	adds	r3, r7, r3
   2b1cc:	881b      	ldrh	r3, [r3, #0]
   2b1ce:	005b      	lsls	r3, r3, #1
   2b1d0:	6a3a      	ldr	r2, [r7, #32]
   2b1d2:	18d3      	adds	r3, r2, r3
   2b1d4:	881b      	ldrh	r3, [r3, #0]
   2b1d6:	2b00      	cmp	r3, #0
   2b1d8:	d1ef      	bne.n	2b1ba <dir_register+0xda>
		ne = (ne + 25) / 13;
   2b1da:	232a      	movs	r3, #42	; 0x2a
   2b1dc:	18fb      	adds	r3, r7, r3
   2b1de:	881b      	ldrh	r3, [r3, #0]
   2b1e0:	3319      	adds	r3, #25
   2b1e2:	001a      	movs	r2, r3
   2b1e4:	4b91      	ldr	r3, [pc, #580]	; (2b42c <dir_register+0x34c>)
   2b1e6:	210d      	movs	r1, #13
   2b1e8:	0010      	movs	r0, r2
   2b1ea:	4798      	blx	r3
   2b1ec:	0003      	movs	r3, r0
   2b1ee:	001a      	movs	r2, r3
   2b1f0:	232a      	movs	r3, #42	; 0x2a
   2b1f2:	18fb      	adds	r3, r7, r3
   2b1f4:	801a      	strh	r2, [r3, #0]
   2b1f6:	e003      	b.n	2b200 <dir_register+0x120>
	} else {						/* Otherwise reserve only an SFN entry. */
		ne = 1;
   2b1f8:	232a      	movs	r3, #42	; 0x2a
   2b1fa:	18fb      	adds	r3, r7, r3
   2b1fc:	2201      	movs	r2, #1
   2b1fe:	801a      	strh	r2, [r3, #0]
	}

	/* Reserve contiguous entries */
	res = dir_sdi(dj, 0);
   2b200:	232f      	movs	r3, #47	; 0x2f
   2b202:	18fc      	adds	r4, r7, r3
   2b204:	687b      	ldr	r3, [r7, #4]
   2b206:	2100      	movs	r1, #0
   2b208:	0018      	movs	r0, r3
   2b20a:	4b89      	ldr	r3, [pc, #548]	; (2b430 <dir_register+0x350>)
   2b20c:	4798      	blx	r3
   2b20e:	0003      	movs	r3, r0
   2b210:	7023      	strb	r3, [r4, #0]
	if (res != FR_OK) return res;
   2b212:	232f      	movs	r3, #47	; 0x2f
   2b214:	18fb      	adds	r3, r7, r3
   2b216:	781b      	ldrb	r3, [r3, #0]
   2b218:	2b00      	cmp	r3, #0
   2b21a:	d003      	beq.n	2b224 <dir_register+0x144>
   2b21c:	232f      	movs	r3, #47	; 0x2f
   2b21e:	18fb      	adds	r3, r7, r3
   2b220:	781b      	ldrb	r3, [r3, #0]
   2b222:	e0f9      	b.n	2b418 <dir_register+0x338>
	n = is = 0;
   2b224:	2328      	movs	r3, #40	; 0x28
   2b226:	18fb      	adds	r3, r7, r3
   2b228:	2200      	movs	r2, #0
   2b22a:	801a      	strh	r2, [r3, #0]
   2b22c:	232c      	movs	r3, #44	; 0x2c
   2b22e:	18fb      	adds	r3, r7, r3
   2b230:	2228      	movs	r2, #40	; 0x28
   2b232:	18ba      	adds	r2, r7, r2
   2b234:	8812      	ldrh	r2, [r2, #0]
   2b236:	801a      	strh	r2, [r3, #0]
	do {
		res = move_window(dj->fs, dj->sect);
   2b238:	687b      	ldr	r3, [r7, #4]
   2b23a:	681a      	ldr	r2, [r3, #0]
   2b23c:	687b      	ldr	r3, [r7, #4]
   2b23e:	691b      	ldr	r3, [r3, #16]
   2b240:	212f      	movs	r1, #47	; 0x2f
   2b242:	187c      	adds	r4, r7, r1
   2b244:	0019      	movs	r1, r3
   2b246:	0010      	movs	r0, r2
   2b248:	4b7a      	ldr	r3, [pc, #488]	; (2b434 <dir_register+0x354>)
   2b24a:	4798      	blx	r3
   2b24c:	0003      	movs	r3, r0
   2b24e:	7023      	strb	r3, [r4, #0]
		if (res != FR_OK) break;
   2b250:	232f      	movs	r3, #47	; 0x2f
   2b252:	18fb      	adds	r3, r7, r3
   2b254:	781b      	ldrb	r3, [r3, #0]
   2b256:	2b00      	cmp	r3, #0
   2b258:	d13c      	bne.n	2b2d4 <dir_register+0x1f4>
		c = *dj->dir;				/* Check the entry status */
   2b25a:	687b      	ldr	r3, [r7, #4]
   2b25c:	695a      	ldr	r2, [r3, #20]
   2b25e:	231f      	movs	r3, #31
   2b260:	18fb      	adds	r3, r7, r3
   2b262:	7812      	ldrb	r2, [r2, #0]
   2b264:	701a      	strb	r2, [r3, #0]
		if (c == DDE || c == 0) {	/* Is it a blank entry? */
   2b266:	231f      	movs	r3, #31
   2b268:	18fb      	adds	r3, r7, r3
   2b26a:	781b      	ldrb	r3, [r3, #0]
   2b26c:	2be5      	cmp	r3, #229	; 0xe5
   2b26e:	d004      	beq.n	2b27a <dir_register+0x19a>
   2b270:	231f      	movs	r3, #31
   2b272:	18fb      	adds	r3, r7, r3
   2b274:	781b      	ldrb	r3, [r3, #0]
   2b276:	2b00      	cmp	r3, #0
   2b278:	d119      	bne.n	2b2ae <dir_register+0x1ce>
			if (n == 0) is = dj->index;	/* First index of the contiguous entry */
   2b27a:	232c      	movs	r3, #44	; 0x2c
   2b27c:	18fb      	adds	r3, r7, r3
   2b27e:	881b      	ldrh	r3, [r3, #0]
   2b280:	2b00      	cmp	r3, #0
   2b282:	d104      	bne.n	2b28e <dir_register+0x1ae>
   2b284:	2328      	movs	r3, #40	; 0x28
   2b286:	18fb      	adds	r3, r7, r3
   2b288:	687a      	ldr	r2, [r7, #4]
   2b28a:	88d2      	ldrh	r2, [r2, #6]
   2b28c:	801a      	strh	r2, [r3, #0]
			if (++n == ne) break;	/* A contiguous entry that required count is found */
   2b28e:	232c      	movs	r3, #44	; 0x2c
   2b290:	18fb      	adds	r3, r7, r3
   2b292:	222c      	movs	r2, #44	; 0x2c
   2b294:	18ba      	adds	r2, r7, r2
   2b296:	8812      	ldrh	r2, [r2, #0]
   2b298:	3201      	adds	r2, #1
   2b29a:	801a      	strh	r2, [r3, #0]
   2b29c:	232c      	movs	r3, #44	; 0x2c
   2b29e:	18fa      	adds	r2, r7, r3
   2b2a0:	232a      	movs	r3, #42	; 0x2a
   2b2a2:	18fb      	adds	r3, r7, r3
   2b2a4:	8812      	ldrh	r2, [r2, #0]
   2b2a6:	881b      	ldrh	r3, [r3, #0]
   2b2a8:	429a      	cmp	r2, r3
   2b2aa:	d104      	bne.n	2b2b6 <dir_register+0x1d6>
   2b2ac:	e013      	b.n	2b2d6 <dir_register+0x1f6>
		} else {
			n = 0;					/* Not a blank entry. Restart to search */
   2b2ae:	232c      	movs	r3, #44	; 0x2c
   2b2b0:	18fb      	adds	r3, r7, r3
   2b2b2:	2200      	movs	r2, #0
   2b2b4:	801a      	strh	r2, [r3, #0]
		}
		res = dir_next(dj, 1);		/* Next entry with table stretch */
   2b2b6:	232f      	movs	r3, #47	; 0x2f
   2b2b8:	18fc      	adds	r4, r7, r3
   2b2ba:	687b      	ldr	r3, [r7, #4]
   2b2bc:	2101      	movs	r1, #1
   2b2be:	0018      	movs	r0, r3
   2b2c0:	4b5d      	ldr	r3, [pc, #372]	; (2b438 <dir_register+0x358>)
   2b2c2:	4798      	blx	r3
   2b2c4:	0003      	movs	r3, r0
   2b2c6:	7023      	strb	r3, [r4, #0]
	} while (res == FR_OK);
   2b2c8:	232f      	movs	r3, #47	; 0x2f
   2b2ca:	18fb      	adds	r3, r7, r3
   2b2cc:	781b      	ldrb	r3, [r3, #0]
   2b2ce:	2b00      	cmp	r3, #0
   2b2d0:	d0b2      	beq.n	2b238 <dir_register+0x158>
   2b2d2:	e000      	b.n	2b2d6 <dir_register+0x1f6>
		if (res != FR_OK) break;
   2b2d4:	46c0      	nop			; (mov r8, r8)

	if (res == FR_OK && ne > 1) {	/* Initialize LFN entry if needed */
   2b2d6:	232f      	movs	r3, #47	; 0x2f
   2b2d8:	18fb      	adds	r3, r7, r3
   2b2da:	781b      	ldrb	r3, [r3, #0]
   2b2dc:	2b00      	cmp	r3, #0
   2b2de:	d163      	bne.n	2b3a8 <dir_register+0x2c8>
   2b2e0:	232a      	movs	r3, #42	; 0x2a
   2b2e2:	18fb      	adds	r3, r7, r3
   2b2e4:	881b      	ldrh	r3, [r3, #0]
   2b2e6:	2b01      	cmp	r3, #1
   2b2e8:	d95e      	bls.n	2b3a8 <dir_register+0x2c8>
		res = dir_sdi(dj, is);
   2b2ea:	232f      	movs	r3, #47	; 0x2f
   2b2ec:	18fc      	adds	r4, r7, r3
   2b2ee:	2328      	movs	r3, #40	; 0x28
   2b2f0:	18fb      	adds	r3, r7, r3
   2b2f2:	881a      	ldrh	r2, [r3, #0]
   2b2f4:	687b      	ldr	r3, [r7, #4]
   2b2f6:	0011      	movs	r1, r2
   2b2f8:	0018      	movs	r0, r3
   2b2fa:	4b4d      	ldr	r3, [pc, #308]	; (2b430 <dir_register+0x350>)
   2b2fc:	4798      	blx	r3
   2b2fe:	0003      	movs	r3, r0
   2b300:	7023      	strb	r3, [r4, #0]
		if (res == FR_OK) {
   2b302:	232f      	movs	r3, #47	; 0x2f
   2b304:	18fb      	adds	r3, r7, r3
   2b306:	781b      	ldrb	r3, [r3, #0]
   2b308:	2b00      	cmp	r3, #0
   2b30a:	d14d      	bne.n	2b3a8 <dir_register+0x2c8>
			sum = sum_sfn(dj->fn);	/* Sum of the SFN tied to the LFN */
   2b30c:	687b      	ldr	r3, [r7, #4]
   2b30e:	699b      	ldr	r3, [r3, #24]
   2b310:	221e      	movs	r2, #30
   2b312:	18bc      	adds	r4, r7, r2
   2b314:	0018      	movs	r0, r3
   2b316:	4b49      	ldr	r3, [pc, #292]	; (2b43c <dir_register+0x35c>)
   2b318:	4798      	blx	r3
   2b31a:	0003      	movs	r3, r0
   2b31c:	7023      	strb	r3, [r4, #0]
			ne--;
   2b31e:	232a      	movs	r3, #42	; 0x2a
   2b320:	18fb      	adds	r3, r7, r3
   2b322:	881a      	ldrh	r2, [r3, #0]
   2b324:	232a      	movs	r3, #42	; 0x2a
   2b326:	18fb      	adds	r3, r7, r3
   2b328:	3a01      	subs	r2, #1
   2b32a:	801a      	strh	r2, [r3, #0]
			do {					/* Store LFN entries in bottom first */
				res = move_window(dj->fs, dj->sect);
   2b32c:	687b      	ldr	r3, [r7, #4]
   2b32e:	681a      	ldr	r2, [r3, #0]
   2b330:	687b      	ldr	r3, [r7, #4]
   2b332:	691b      	ldr	r3, [r3, #16]
   2b334:	212f      	movs	r1, #47	; 0x2f
   2b336:	187c      	adds	r4, r7, r1
   2b338:	0019      	movs	r1, r3
   2b33a:	0010      	movs	r0, r2
   2b33c:	4b3d      	ldr	r3, [pc, #244]	; (2b434 <dir_register+0x354>)
   2b33e:	4798      	blx	r3
   2b340:	0003      	movs	r3, r0
   2b342:	7023      	strb	r3, [r4, #0]
				if (res != FR_OK) break;
   2b344:	232f      	movs	r3, #47	; 0x2f
   2b346:	18fb      	adds	r3, r7, r3
   2b348:	781b      	ldrb	r3, [r3, #0]
   2b34a:	2b00      	cmp	r3, #0
   2b34c:	d12b      	bne.n	2b3a6 <dir_register+0x2c6>
				fit_lfn(dj->lfn, dj->dir, (BYTE)ne, sum);
   2b34e:	687b      	ldr	r3, [r7, #4]
   2b350:	69d8      	ldr	r0, [r3, #28]
   2b352:	687b      	ldr	r3, [r7, #4]
   2b354:	6959      	ldr	r1, [r3, #20]
   2b356:	232a      	movs	r3, #42	; 0x2a
   2b358:	18fb      	adds	r3, r7, r3
   2b35a:	881b      	ldrh	r3, [r3, #0]
   2b35c:	b2da      	uxtb	r2, r3
   2b35e:	231e      	movs	r3, #30
   2b360:	18fb      	adds	r3, r7, r3
   2b362:	781b      	ldrb	r3, [r3, #0]
   2b364:	4c36      	ldr	r4, [pc, #216]	; (2b440 <dir_register+0x360>)
   2b366:	47a0      	blx	r4
				dj->fs->wflag = 1;
   2b368:	687b      	ldr	r3, [r7, #4]
   2b36a:	681b      	ldr	r3, [r3, #0]
   2b36c:	2201      	movs	r2, #1
   2b36e:	711a      	strb	r2, [r3, #4]
				res = dir_next(dj, 0);	/* Next entry */
   2b370:	232f      	movs	r3, #47	; 0x2f
   2b372:	18fc      	adds	r4, r7, r3
   2b374:	687b      	ldr	r3, [r7, #4]
   2b376:	2100      	movs	r1, #0
   2b378:	0018      	movs	r0, r3
   2b37a:	4b2f      	ldr	r3, [pc, #188]	; (2b438 <dir_register+0x358>)
   2b37c:	4798      	blx	r3
   2b37e:	0003      	movs	r3, r0
   2b380:	7023      	strb	r3, [r4, #0]
			} while (res == FR_OK && --ne);
   2b382:	232f      	movs	r3, #47	; 0x2f
   2b384:	18fb      	adds	r3, r7, r3
   2b386:	781b      	ldrb	r3, [r3, #0]
   2b388:	2b00      	cmp	r3, #0
   2b38a:	d10d      	bne.n	2b3a8 <dir_register+0x2c8>
   2b38c:	232a      	movs	r3, #42	; 0x2a
   2b38e:	18fb      	adds	r3, r7, r3
   2b390:	222a      	movs	r2, #42	; 0x2a
   2b392:	18ba      	adds	r2, r7, r2
   2b394:	8812      	ldrh	r2, [r2, #0]
   2b396:	3a01      	subs	r2, #1
   2b398:	801a      	strh	r2, [r3, #0]
   2b39a:	232a      	movs	r3, #42	; 0x2a
   2b39c:	18fb      	adds	r3, r7, r3
   2b39e:	881b      	ldrh	r3, [r3, #0]
   2b3a0:	2b00      	cmp	r3, #0
   2b3a2:	d1c3      	bne.n	2b32c <dir_register+0x24c>
   2b3a4:	e000      	b.n	2b3a8 <dir_register+0x2c8>
				if (res != FR_OK) break;
   2b3a6:	46c0      	nop			; (mov r8, r8)
			res = dir_next(dj, 1);			/* Next entry with table stretch */
		} while (res == FR_OK);
	}
#endif

	if (res == FR_OK) {		/* Initialize the SFN entry */
   2b3a8:	232f      	movs	r3, #47	; 0x2f
   2b3aa:	18fb      	adds	r3, r7, r3
   2b3ac:	781b      	ldrb	r3, [r3, #0]
   2b3ae:	2b00      	cmp	r3, #0
   2b3b0:	d12f      	bne.n	2b412 <dir_register+0x332>
		res = move_window(dj->fs, dj->sect);
   2b3b2:	687b      	ldr	r3, [r7, #4]
   2b3b4:	681a      	ldr	r2, [r3, #0]
   2b3b6:	687b      	ldr	r3, [r7, #4]
   2b3b8:	691b      	ldr	r3, [r3, #16]
   2b3ba:	212f      	movs	r1, #47	; 0x2f
   2b3bc:	187c      	adds	r4, r7, r1
   2b3be:	0019      	movs	r1, r3
   2b3c0:	0010      	movs	r0, r2
   2b3c2:	4b1c      	ldr	r3, [pc, #112]	; (2b434 <dir_register+0x354>)
   2b3c4:	4798      	blx	r3
   2b3c6:	0003      	movs	r3, r0
   2b3c8:	7023      	strb	r3, [r4, #0]
		if (res == FR_OK) {
   2b3ca:	232f      	movs	r3, #47	; 0x2f
   2b3cc:	18fb      	adds	r3, r7, r3
   2b3ce:	781b      	ldrb	r3, [r3, #0]
   2b3d0:	2b00      	cmp	r3, #0
   2b3d2:	d11e      	bne.n	2b412 <dir_register+0x332>
			dir = dj->dir;
   2b3d4:	687b      	ldr	r3, [r7, #4]
   2b3d6:	695b      	ldr	r3, [r3, #20]
   2b3d8:	61bb      	str	r3, [r7, #24]
			mem_set(dir, 0, SZ_DIR);	/* Clean the entry */
   2b3da:	69bb      	ldr	r3, [r7, #24]
   2b3dc:	2220      	movs	r2, #32
   2b3de:	2100      	movs	r1, #0
   2b3e0:	0018      	movs	r0, r3
   2b3e2:	4b18      	ldr	r3, [pc, #96]	; (2b444 <dir_register+0x364>)
   2b3e4:	4798      	blx	r3
			mem_cpy(dir, dj->fn, 11);	/* Put SFN */
   2b3e6:	687b      	ldr	r3, [r7, #4]
   2b3e8:	6999      	ldr	r1, [r3, #24]
   2b3ea:	69bb      	ldr	r3, [r7, #24]
   2b3ec:	220b      	movs	r2, #11
   2b3ee:	0018      	movs	r0, r3
   2b3f0:	4b0b      	ldr	r3, [pc, #44]	; (2b420 <dir_register+0x340>)
   2b3f2:	4798      	blx	r3
#if _USE_LFN
			dir[DIR_NTres] = *(dj->fn+NS) & (NS_BODY | NS_EXT);	/* Put NT flag */
   2b3f4:	69bb      	ldr	r3, [r7, #24]
   2b3f6:	330c      	adds	r3, #12
   2b3f8:	001a      	movs	r2, r3
   2b3fa:	687b      	ldr	r3, [r7, #4]
   2b3fc:	699b      	ldr	r3, [r3, #24]
   2b3fe:	330b      	adds	r3, #11
   2b400:	781b      	ldrb	r3, [r3, #0]
   2b402:	2118      	movs	r1, #24
   2b404:	400b      	ands	r3, r1
   2b406:	b2db      	uxtb	r3, r3
   2b408:	7013      	strb	r3, [r2, #0]
#endif
			dj->fs->wflag = 1;
   2b40a:	687b      	ldr	r3, [r7, #4]
   2b40c:	681b      	ldr	r3, [r3, #0]
   2b40e:	2201      	movs	r2, #1
   2b410:	711a      	strb	r2, [r3, #4]
		}
	}

	return res;
   2b412:	232f      	movs	r3, #47	; 0x2f
   2b414:	18fb      	adds	r3, r7, r3
   2b416:	781b      	ldrb	r3, [r3, #0]
}
   2b418:	0018      	movs	r0, r3
   2b41a:	46bd      	mov	sp, r7
   2b41c:	b00d      	add	sp, #52	; 0x34
   2b41e:	bd90      	pop	{r4, r7, pc}
   2b420:	00029f39 	.word	0x00029f39
   2b424:	0002ad95 	.word	0x0002ad95
   2b428:	0002aee5 	.word	0x0002aee5
   2b42c:	00031201 	.word	0x00031201
   2b430:	0002a861 	.word	0x0002a861
   2b434:	0002a01d 	.word	0x0002a01d
   2b438:	0002a991 	.word	0x0002a991
   2b43c:	0002ae95 	.word	0x0002ae95
   2b440:	0002ac85 	.word	0x0002ac85
   2b444:	00029f71 	.word	0x00029f71

0002b448 <create_name>:
static
FRESULT create_name (
	DIR *dj,			/* Pointer to the directory object */
	const TCHAR **path	/* Pointer to pointer to the segment in the path string */
)
{
   2b448:	b590      	push	{r4, r7, lr}
   2b44a:	b08b      	sub	sp, #44	; 0x2c
   2b44c:	af00      	add	r7, sp, #0
   2b44e:	6078      	str	r0, [r7, #4]
   2b450:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	for (p = *path; *p == '/' || *p == '\\'; p++) ;	/* Strip duplicated separator */
   2b452:	683b      	ldr	r3, [r7, #0]
   2b454:	681b      	ldr	r3, [r3, #0]
   2b456:	613b      	str	r3, [r7, #16]
   2b458:	e002      	b.n	2b460 <create_name+0x18>
   2b45a:	693b      	ldr	r3, [r7, #16]
   2b45c:	3301      	adds	r3, #1
   2b45e:	613b      	str	r3, [r7, #16]
   2b460:	693b      	ldr	r3, [r7, #16]
   2b462:	781b      	ldrb	r3, [r3, #0]
   2b464:	2b2f      	cmp	r3, #47	; 0x2f
   2b466:	d0f8      	beq.n	2b45a <create_name+0x12>
   2b468:	693b      	ldr	r3, [r7, #16]
   2b46a:	781b      	ldrb	r3, [r3, #0]
   2b46c:	2b5c      	cmp	r3, #92	; 0x5c
   2b46e:	d0f4      	beq.n	2b45a <create_name+0x12>
	lfn = dj->lfn;
   2b470:	687b      	ldr	r3, [r7, #4]
   2b472:	69db      	ldr	r3, [r3, #28]
   2b474:	60fb      	str	r3, [r7, #12]
	si = di = 0;
   2b476:	2300      	movs	r3, #0
   2b478:	617b      	str	r3, [r7, #20]
   2b47a:	697b      	ldr	r3, [r7, #20]
   2b47c:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
   2b47e:	69bb      	ldr	r3, [r7, #24]
   2b480:	1c5a      	adds	r2, r3, #1
   2b482:	61ba      	str	r2, [r7, #24]
   2b484:	693a      	ldr	r2, [r7, #16]
   2b486:	18d3      	adds	r3, r2, r3
   2b488:	781a      	ldrb	r2, [r3, #0]
   2b48a:	2324      	movs	r3, #36	; 0x24
   2b48c:	18fb      	adds	r3, r7, r3
   2b48e:	801a      	strh	r2, [r3, #0]
		if (w < ' ' || w == '/' || w == '\\') break;	/* Break on end of segment */
   2b490:	2324      	movs	r3, #36	; 0x24
   2b492:	18fb      	adds	r3, r7, r3
   2b494:	881b      	ldrh	r3, [r3, #0]
   2b496:	2b1f      	cmp	r3, #31
   2b498:	d944      	bls.n	2b524 <create_name+0xdc>
   2b49a:	2324      	movs	r3, #36	; 0x24
   2b49c:	18fb      	adds	r3, r7, r3
   2b49e:	881b      	ldrh	r3, [r3, #0]
   2b4a0:	2b2f      	cmp	r3, #47	; 0x2f
   2b4a2:	d03f      	beq.n	2b524 <create_name+0xdc>
   2b4a4:	2324      	movs	r3, #36	; 0x24
   2b4a6:	18fb      	adds	r3, r7, r3
   2b4a8:	881b      	ldrh	r3, [r3, #0]
   2b4aa:	2b5c      	cmp	r3, #92	; 0x5c
   2b4ac:	d03a      	beq.n	2b524 <create_name+0xdc>
		if (di >= _MAX_LFN)				/* Reject too long name */
   2b4ae:	697b      	ldr	r3, [r7, #20]
   2b4b0:	2bfe      	cmp	r3, #254	; 0xfe
   2b4b2:	d901      	bls.n	2b4b8 <create_name+0x70>
			return FR_INVALID_NAME;
   2b4b4:	2306      	movs	r3, #6
   2b4b6:	e1e7      	b.n	2b888 <create_name+0x440>
#if !_LFN_UNICODE
		w &= 0xFF;
   2b4b8:	2324      	movs	r3, #36	; 0x24
   2b4ba:	18fb      	adds	r3, r7, r3
   2b4bc:	2224      	movs	r2, #36	; 0x24
   2b4be:	18ba      	adds	r2, r7, r2
   2b4c0:	8812      	ldrh	r2, [r2, #0]
   2b4c2:	21ff      	movs	r1, #255	; 0xff
   2b4c4:	400a      	ands	r2, r1
   2b4c6:	801a      	strh	r2, [r3, #0]
			b = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(b))
				return FR_INVALID_NAME;	/* Reject invalid sequence */
			w = (w << 8) + b;			/* Create a DBC */
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
   2b4c8:	2324      	movs	r3, #36	; 0x24
   2b4ca:	18fc      	adds	r4, r7, r3
   2b4cc:	2324      	movs	r3, #36	; 0x24
   2b4ce:	18fb      	adds	r3, r7, r3
   2b4d0:	881b      	ldrh	r3, [r3, #0]
   2b4d2:	2101      	movs	r1, #1
   2b4d4:	0018      	movs	r0, r3
   2b4d6:	4bba      	ldr	r3, [pc, #744]	; (2b7c0 <create_name+0x378>)
   2b4d8:	4798      	blx	r3
   2b4da:	0003      	movs	r3, r0
   2b4dc:	8023      	strh	r3, [r4, #0]
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
   2b4de:	2324      	movs	r3, #36	; 0x24
   2b4e0:	18fb      	adds	r3, r7, r3
   2b4e2:	881b      	ldrh	r3, [r3, #0]
   2b4e4:	2b00      	cmp	r3, #0
   2b4e6:	d101      	bne.n	2b4ec <create_name+0xa4>
   2b4e8:	2306      	movs	r3, #6
   2b4ea:	e1cd      	b.n	2b888 <create_name+0x440>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) /* Reject illegal chars for LFN */
   2b4ec:	2324      	movs	r3, #36	; 0x24
   2b4ee:	18fb      	adds	r3, r7, r3
   2b4f0:	881b      	ldrh	r3, [r3, #0]
   2b4f2:	2b7f      	cmp	r3, #127	; 0x7f
   2b4f4:	d80b      	bhi.n	2b50e <create_name+0xc6>
   2b4f6:	2324      	movs	r3, #36	; 0x24
   2b4f8:	18fb      	adds	r3, r7, r3
   2b4fa:	881a      	ldrh	r2, [r3, #0]
   2b4fc:	4bb1      	ldr	r3, [pc, #708]	; (2b7c4 <create_name+0x37c>)
   2b4fe:	0011      	movs	r1, r2
   2b500:	0018      	movs	r0, r3
   2b502:	4bb1      	ldr	r3, [pc, #708]	; (2b7c8 <create_name+0x380>)
   2b504:	4798      	blx	r3
   2b506:	1e03      	subs	r3, r0, #0
   2b508:	d001      	beq.n	2b50e <create_name+0xc6>
			return FR_INVALID_NAME;
   2b50a:	2306      	movs	r3, #6
   2b50c:	e1bc      	b.n	2b888 <create_name+0x440>
		lfn[di++] = w;					/* Store the Unicode char */
   2b50e:	697b      	ldr	r3, [r7, #20]
   2b510:	1c5a      	adds	r2, r3, #1
   2b512:	617a      	str	r2, [r7, #20]
   2b514:	005b      	lsls	r3, r3, #1
   2b516:	68fa      	ldr	r2, [r7, #12]
   2b518:	18d3      	adds	r3, r2, r3
   2b51a:	2224      	movs	r2, #36	; 0x24
   2b51c:	18ba      	adds	r2, r7, r2
   2b51e:	8812      	ldrh	r2, [r2, #0]
   2b520:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
   2b522:	e7ac      	b.n	2b47e <create_name+0x36>
	}
	*path = &p[si];						/* Return pointer to the next segment */
   2b524:	693a      	ldr	r2, [r7, #16]
   2b526:	69bb      	ldr	r3, [r7, #24]
   2b528:	18d2      	adds	r2, r2, r3
   2b52a:	683b      	ldr	r3, [r7, #0]
   2b52c:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of path */
   2b52e:	2324      	movs	r3, #36	; 0x24
   2b530:	18fb      	adds	r3, r7, r3
   2b532:	881b      	ldrh	r3, [r3, #0]
   2b534:	2b1f      	cmp	r3, #31
   2b536:	d801      	bhi.n	2b53c <create_name+0xf4>
   2b538:	2204      	movs	r2, #4
   2b53a:	e000      	b.n	2b53e <create_name+0xf6>
   2b53c:	2200      	movs	r2, #0
   2b53e:	2326      	movs	r3, #38	; 0x26
   2b540:	18fb      	adds	r3, r7, r3
   2b542:	701a      	strb	r2, [r3, #0]
			dj->fn[i] = (i < di) ? '.' : ' ';
		dj->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Strip trailing spaces and dots */
   2b544:	e017      	b.n	2b576 <create_name+0x12e>
		w = lfn[di-1];
   2b546:	697b      	ldr	r3, [r7, #20]
   2b548:	4aa0      	ldr	r2, [pc, #640]	; (2b7cc <create_name+0x384>)
   2b54a:	4694      	mov	ip, r2
   2b54c:	4463      	add	r3, ip
   2b54e:	005b      	lsls	r3, r3, #1
   2b550:	68fa      	ldr	r2, [r7, #12]
   2b552:	18d2      	adds	r2, r2, r3
   2b554:	2324      	movs	r3, #36	; 0x24
   2b556:	18fb      	adds	r3, r7, r3
   2b558:	8812      	ldrh	r2, [r2, #0]
   2b55a:	801a      	strh	r2, [r3, #0]
		if (w != ' ' && w != '.') break;
   2b55c:	2324      	movs	r3, #36	; 0x24
   2b55e:	18fb      	adds	r3, r7, r3
   2b560:	881b      	ldrh	r3, [r3, #0]
   2b562:	2b20      	cmp	r3, #32
   2b564:	d004      	beq.n	2b570 <create_name+0x128>
   2b566:	2324      	movs	r3, #36	; 0x24
   2b568:	18fb      	adds	r3, r7, r3
   2b56a:	881b      	ldrh	r3, [r3, #0]
   2b56c:	2b2e      	cmp	r3, #46	; 0x2e
   2b56e:	d106      	bne.n	2b57e <create_name+0x136>
		di--;
   2b570:	697b      	ldr	r3, [r7, #20]
   2b572:	3b01      	subs	r3, #1
   2b574:	617b      	str	r3, [r7, #20]
	while (di) {						/* Strip trailing spaces and dots */
   2b576:	697b      	ldr	r3, [r7, #20]
   2b578:	2b00      	cmp	r3, #0
   2b57a:	d1e4      	bne.n	2b546 <create_name+0xfe>
   2b57c:	e000      	b.n	2b580 <create_name+0x138>
		if (w != ' ' && w != '.') break;
   2b57e:	46c0      	nop			; (mov r8, r8)
	}
	if (!di) return FR_INVALID_NAME;	/* Reject nul string */
   2b580:	697b      	ldr	r3, [r7, #20]
   2b582:	2b00      	cmp	r3, #0
   2b584:	d101      	bne.n	2b58a <create_name+0x142>
   2b586:	2306      	movs	r3, #6
   2b588:	e17e      	b.n	2b888 <create_name+0x440>

	lfn[di] = 0;						/* LFN is created */
   2b58a:	697b      	ldr	r3, [r7, #20]
   2b58c:	005b      	lsls	r3, r3, #1
   2b58e:	68fa      	ldr	r2, [r7, #12]
   2b590:	18d3      	adds	r3, r2, r3
   2b592:	2200      	movs	r2, #0
   2b594:	801a      	strh	r2, [r3, #0]

	/* Create SFN in directory form */
	mem_set(dj->fn, ' ', 11);
   2b596:	687b      	ldr	r3, [r7, #4]
   2b598:	699b      	ldr	r3, [r3, #24]
   2b59a:	220b      	movs	r2, #11
   2b59c:	2120      	movs	r1, #32
   2b59e:	0018      	movs	r0, r3
   2b5a0:	4b8b      	ldr	r3, [pc, #556]	; (2b7d0 <create_name+0x388>)
   2b5a2:	4798      	blx	r3
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
   2b5a4:	2300      	movs	r3, #0
   2b5a6:	61bb      	str	r3, [r7, #24]
   2b5a8:	e002      	b.n	2b5b0 <create_name+0x168>
   2b5aa:	69bb      	ldr	r3, [r7, #24]
   2b5ac:	3301      	adds	r3, #1
   2b5ae:	61bb      	str	r3, [r7, #24]
   2b5b0:	69bb      	ldr	r3, [r7, #24]
   2b5b2:	005b      	lsls	r3, r3, #1
   2b5b4:	68fa      	ldr	r2, [r7, #12]
   2b5b6:	18d3      	adds	r3, r2, r3
   2b5b8:	881b      	ldrh	r3, [r3, #0]
   2b5ba:	2b20      	cmp	r3, #32
   2b5bc:	d0f5      	beq.n	2b5aa <create_name+0x162>
   2b5be:	69bb      	ldr	r3, [r7, #24]
   2b5c0:	005b      	lsls	r3, r3, #1
   2b5c2:	68fa      	ldr	r2, [r7, #12]
   2b5c4:	18d3      	adds	r3, r2, r3
   2b5c6:	881b      	ldrh	r3, [r3, #0]
   2b5c8:	2b2e      	cmp	r3, #46	; 0x2e
   2b5ca:	d0ee      	beq.n	2b5aa <create_name+0x162>
	if (si) cf |= NS_LOSS | NS_LFN;
   2b5cc:	69bb      	ldr	r3, [r7, #24]
   2b5ce:	2b00      	cmp	r3, #0
   2b5d0:	d00b      	beq.n	2b5ea <create_name+0x1a2>
   2b5d2:	2326      	movs	r3, #38	; 0x26
   2b5d4:	18fb      	adds	r3, r7, r3
   2b5d6:	2226      	movs	r2, #38	; 0x26
   2b5d8:	18ba      	adds	r2, r7, r2
   2b5da:	7812      	ldrb	r2, [r2, #0]
   2b5dc:	2103      	movs	r1, #3
   2b5de:	430a      	orrs	r2, r1
   2b5e0:	701a      	strb	r2, [r3, #0]
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
   2b5e2:	e002      	b.n	2b5ea <create_name+0x1a2>
   2b5e4:	697b      	ldr	r3, [r7, #20]
   2b5e6:	3b01      	subs	r3, #1
   2b5e8:	617b      	str	r3, [r7, #20]
   2b5ea:	697b      	ldr	r3, [r7, #20]
   2b5ec:	2b00      	cmp	r3, #0
   2b5ee:	d009      	beq.n	2b604 <create_name+0x1bc>
   2b5f0:	697b      	ldr	r3, [r7, #20]
   2b5f2:	4a76      	ldr	r2, [pc, #472]	; (2b7cc <create_name+0x384>)
   2b5f4:	4694      	mov	ip, r2
   2b5f6:	4463      	add	r3, ip
   2b5f8:	005b      	lsls	r3, r3, #1
   2b5fa:	68fa      	ldr	r2, [r7, #12]
   2b5fc:	18d3      	adds	r3, r2, r3
   2b5fe:	881b      	ldrh	r3, [r3, #0]
   2b600:	2b2e      	cmp	r3, #46	; 0x2e
   2b602:	d1ef      	bne.n	2b5e4 <create_name+0x19c>

	b = i = 0; ni = 8;
   2b604:	2300      	movs	r3, #0
   2b606:	623b      	str	r3, [r7, #32]
   2b608:	2327      	movs	r3, #39	; 0x27
   2b60a:	18fb      	adds	r3, r7, r3
   2b60c:	2200      	movs	r2, #0
   2b60e:	701a      	strb	r2, [r3, #0]
   2b610:	2308      	movs	r3, #8
   2b612:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN char */
   2b614:	69bb      	ldr	r3, [r7, #24]
   2b616:	1c5a      	adds	r2, r3, #1
   2b618:	61ba      	str	r2, [r7, #24]
   2b61a:	005b      	lsls	r3, r3, #1
   2b61c:	68fa      	ldr	r2, [r7, #12]
   2b61e:	18d2      	adds	r2, r2, r3
   2b620:	2324      	movs	r3, #36	; 0x24
   2b622:	18fb      	adds	r3, r7, r3
   2b624:	8812      	ldrh	r2, [r2, #0]
   2b626:	801a      	strh	r2, [r3, #0]
		if (!w) break;					/* Break on end of the LFN */
   2b628:	2324      	movs	r3, #36	; 0x24
   2b62a:	18fb      	adds	r3, r7, r3
   2b62c:	881b      	ldrh	r3, [r3, #0]
   2b62e:	2b00      	cmp	r3, #0
   2b630:	d100      	bne.n	2b634 <create_name+0x1ec>
   2b632:	e0c3      	b.n	2b7bc <create_name+0x374>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
   2b634:	2324      	movs	r3, #36	; 0x24
   2b636:	18fb      	adds	r3, r7, r3
   2b638:	881b      	ldrh	r3, [r3, #0]
   2b63a:	2b20      	cmp	r3, #32
   2b63c:	d008      	beq.n	2b650 <create_name+0x208>
   2b63e:	2324      	movs	r3, #36	; 0x24
   2b640:	18fb      	adds	r3, r7, r3
   2b642:	881b      	ldrh	r3, [r3, #0]
   2b644:	2b2e      	cmp	r3, #46	; 0x2e
   2b646:	d10c      	bne.n	2b662 <create_name+0x21a>
   2b648:	69ba      	ldr	r2, [r7, #24]
   2b64a:	697b      	ldr	r3, [r7, #20]
   2b64c:	429a      	cmp	r2, r3
   2b64e:	d008      	beq.n	2b662 <create_name+0x21a>
			cf |= NS_LOSS | NS_LFN; continue;
   2b650:	2326      	movs	r3, #38	; 0x26
   2b652:	18fb      	adds	r3, r7, r3
   2b654:	2226      	movs	r2, #38	; 0x26
   2b656:	18ba      	adds	r2, r7, r2
   2b658:	7812      	ldrb	r2, [r2, #0]
   2b65a:	2103      	movs	r1, #3
   2b65c:	430a      	orrs	r2, r1
   2b65e:	701a      	strb	r2, [r3, #0]
   2b660:	e0ab      	b.n	2b7ba <create_name+0x372>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
   2b662:	6a3a      	ldr	r2, [r7, #32]
   2b664:	69fb      	ldr	r3, [r7, #28]
   2b666:	429a      	cmp	r2, r3
   2b668:	d203      	bcs.n	2b672 <create_name+0x22a>
   2b66a:	69ba      	ldr	r2, [r7, #24]
   2b66c:	697b      	ldr	r3, [r7, #20]
   2b66e:	429a      	cmp	r2, r3
   2b670:	d12a      	bne.n	2b6c8 <create_name+0x280>
			if (ni == 11) {				/* Long extension */
   2b672:	69fb      	ldr	r3, [r7, #28]
   2b674:	2b0b      	cmp	r3, #11
   2b676:	d108      	bne.n	2b68a <create_name+0x242>
				cf |= NS_LOSS | NS_LFN; break;
   2b678:	2326      	movs	r3, #38	; 0x26
   2b67a:	18fb      	adds	r3, r7, r3
   2b67c:	2226      	movs	r2, #38	; 0x26
   2b67e:	18ba      	adds	r2, r7, r2
   2b680:	7812      	ldrb	r2, [r2, #0]
   2b682:	2103      	movs	r1, #3
   2b684:	430a      	orrs	r2, r1
   2b686:	701a      	strb	r2, [r3, #0]
   2b688:	e0a9      	b.n	2b7de <create_name+0x396>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
   2b68a:	69ba      	ldr	r2, [r7, #24]
   2b68c:	697b      	ldr	r3, [r7, #20]
   2b68e:	429a      	cmp	r2, r3
   2b690:	d007      	beq.n	2b6a2 <create_name+0x25a>
   2b692:	2326      	movs	r3, #38	; 0x26
   2b694:	18fb      	adds	r3, r7, r3
   2b696:	2226      	movs	r2, #38	; 0x26
   2b698:	18ba      	adds	r2, r7, r2
   2b69a:	7812      	ldrb	r2, [r2, #0]
   2b69c:	2103      	movs	r1, #3
   2b69e:	430a      	orrs	r2, r1
   2b6a0:	701a      	strb	r2, [r3, #0]
			if (si > di) break;			/* No extension */
   2b6a2:	69ba      	ldr	r2, [r7, #24]
   2b6a4:	697b      	ldr	r3, [r7, #20]
   2b6a6:	429a      	cmp	r2, r3
   2b6a8:	d900      	bls.n	2b6ac <create_name+0x264>
   2b6aa:	e097      	b.n	2b7dc <create_name+0x394>
			si = di; i = 8; ni = 11;	/* Enter extension section */
   2b6ac:	697b      	ldr	r3, [r7, #20]
   2b6ae:	61bb      	str	r3, [r7, #24]
   2b6b0:	2308      	movs	r3, #8
   2b6b2:	623b      	str	r3, [r7, #32]
   2b6b4:	230b      	movs	r3, #11
   2b6b6:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
   2b6b8:	2327      	movs	r3, #39	; 0x27
   2b6ba:	18fb      	adds	r3, r7, r3
   2b6bc:	2227      	movs	r2, #39	; 0x27
   2b6be:	18ba      	adds	r2, r7, r2
   2b6c0:	7812      	ldrb	r2, [r2, #0]
   2b6c2:	0092      	lsls	r2, r2, #2
   2b6c4:	701a      	strb	r2, [r3, #0]
   2b6c6:	e078      	b.n	2b7ba <create_name+0x372>
		}

		if (w >= 0x80) {				/* Non ASCII char */
   2b6c8:	2324      	movs	r3, #36	; 0x24
   2b6ca:	18fb      	adds	r3, r7, r3
   2b6cc:	881b      	ldrh	r3, [r3, #0]
   2b6ce:	2b7f      	cmp	r3, #127	; 0x7f
   2b6d0:	d920      	bls.n	2b714 <create_name+0x2cc>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
   2b6d2:	2324      	movs	r3, #36	; 0x24
   2b6d4:	18fc      	adds	r4, r7, r3
   2b6d6:	2324      	movs	r3, #36	; 0x24
   2b6d8:	18fb      	adds	r3, r7, r3
   2b6da:	881b      	ldrh	r3, [r3, #0]
   2b6dc:	2100      	movs	r1, #0
   2b6de:	0018      	movs	r0, r3
   2b6e0:	4b37      	ldr	r3, [pc, #220]	; (2b7c0 <create_name+0x378>)
   2b6e2:	4798      	blx	r3
   2b6e4:	0003      	movs	r3, r0
   2b6e6:	8023      	strh	r3, [r4, #0]
			if (w) w = excvt[w - 0x80];	/* Convert extended char to upper (SBCS) */
   2b6e8:	2324      	movs	r3, #36	; 0x24
   2b6ea:	18fb      	adds	r3, r7, r3
   2b6ec:	881b      	ldrh	r3, [r3, #0]
   2b6ee:	2b00      	cmp	r3, #0
   2b6f0:	d008      	beq.n	2b704 <create_name+0x2bc>
   2b6f2:	2324      	movs	r3, #36	; 0x24
   2b6f4:	18fb      	adds	r3, r7, r3
   2b6f6:	881b      	ldrh	r3, [r3, #0]
   2b6f8:	3b80      	subs	r3, #128	; 0x80
   2b6fa:	4a36      	ldr	r2, [pc, #216]	; (2b7d4 <create_name+0x38c>)
   2b6fc:	5cd2      	ldrb	r2, [r2, r3]
   2b6fe:	2324      	movs	r3, #36	; 0x24
   2b700:	18fb      	adds	r3, r7, r3
   2b702:	801a      	strh	r2, [r3, #0]
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
   2b704:	2326      	movs	r3, #38	; 0x26
   2b706:	18fb      	adds	r3, r7, r3
   2b708:	2226      	movs	r2, #38	; 0x26
   2b70a:	18ba      	adds	r2, r7, r2
   2b70c:	7812      	ldrb	r2, [r2, #0]
   2b70e:	2102      	movs	r1, #2
   2b710:	430a      	orrs	r2, r1
   2b712:	701a      	strb	r2, [r3, #0]
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dj->fn[i++] = (BYTE)(w >> 8);
		} else {						/* Single byte char */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal chars for SFN */
   2b714:	2324      	movs	r3, #36	; 0x24
   2b716:	18fb      	adds	r3, r7, r3
   2b718:	881b      	ldrh	r3, [r3, #0]
   2b71a:	2b00      	cmp	r3, #0
   2b71c:	d009      	beq.n	2b732 <create_name+0x2ea>
   2b71e:	2324      	movs	r3, #36	; 0x24
   2b720:	18fb      	adds	r3, r7, r3
   2b722:	881a      	ldrh	r2, [r3, #0]
   2b724:	4b2c      	ldr	r3, [pc, #176]	; (2b7d8 <create_name+0x390>)
   2b726:	0011      	movs	r1, r2
   2b728:	0018      	movs	r0, r3
   2b72a:	4b27      	ldr	r3, [pc, #156]	; (2b7c8 <create_name+0x380>)
   2b72c:	4798      	blx	r3
   2b72e:	1e03      	subs	r3, r0, #0
   2b730:	d00c      	beq.n	2b74c <create_name+0x304>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
   2b732:	2324      	movs	r3, #36	; 0x24
   2b734:	18fb      	adds	r3, r7, r3
   2b736:	225f      	movs	r2, #95	; 0x5f
   2b738:	801a      	strh	r2, [r3, #0]
   2b73a:	2326      	movs	r3, #38	; 0x26
   2b73c:	18fb      	adds	r3, r7, r3
   2b73e:	2226      	movs	r2, #38	; 0x26
   2b740:	18ba      	adds	r2, r7, r2
   2b742:	7812      	ldrb	r2, [r2, #0]
   2b744:	2103      	movs	r1, #3
   2b746:	430a      	orrs	r2, r1
   2b748:	701a      	strb	r2, [r3, #0]
   2b74a:	e02b      	b.n	2b7a4 <create_name+0x35c>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
   2b74c:	2324      	movs	r3, #36	; 0x24
   2b74e:	18fb      	adds	r3, r7, r3
   2b750:	881b      	ldrh	r3, [r3, #0]
   2b752:	2b40      	cmp	r3, #64	; 0x40
   2b754:	d90d      	bls.n	2b772 <create_name+0x32a>
   2b756:	2324      	movs	r3, #36	; 0x24
   2b758:	18fb      	adds	r3, r7, r3
   2b75a:	881b      	ldrh	r3, [r3, #0]
   2b75c:	2b5a      	cmp	r3, #90	; 0x5a
   2b75e:	d808      	bhi.n	2b772 <create_name+0x32a>
					b |= 2;
   2b760:	2327      	movs	r3, #39	; 0x27
   2b762:	18fb      	adds	r3, r7, r3
   2b764:	2227      	movs	r2, #39	; 0x27
   2b766:	18ba      	adds	r2, r7, r2
   2b768:	7812      	ldrb	r2, [r2, #0]
   2b76a:	2102      	movs	r1, #2
   2b76c:	430a      	orrs	r2, r1
   2b76e:	701a      	strb	r2, [r3, #0]
   2b770:	e018      	b.n	2b7a4 <create_name+0x35c>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
   2b772:	2324      	movs	r3, #36	; 0x24
   2b774:	18fb      	adds	r3, r7, r3
   2b776:	881b      	ldrh	r3, [r3, #0]
   2b778:	2b60      	cmp	r3, #96	; 0x60
   2b77a:	d913      	bls.n	2b7a4 <create_name+0x35c>
   2b77c:	2324      	movs	r3, #36	; 0x24
   2b77e:	18fb      	adds	r3, r7, r3
   2b780:	881b      	ldrh	r3, [r3, #0]
   2b782:	2b7a      	cmp	r3, #122	; 0x7a
   2b784:	d80e      	bhi.n	2b7a4 <create_name+0x35c>
						b |= 1; w -= 0x20;
   2b786:	2327      	movs	r3, #39	; 0x27
   2b788:	18fb      	adds	r3, r7, r3
   2b78a:	2227      	movs	r2, #39	; 0x27
   2b78c:	18ba      	adds	r2, r7, r2
   2b78e:	7812      	ldrb	r2, [r2, #0]
   2b790:	2101      	movs	r1, #1
   2b792:	430a      	orrs	r2, r1
   2b794:	701a      	strb	r2, [r3, #0]
   2b796:	2324      	movs	r3, #36	; 0x24
   2b798:	18fb      	adds	r3, r7, r3
   2b79a:	2224      	movs	r2, #36	; 0x24
   2b79c:	18ba      	adds	r2, r7, r2
   2b79e:	8812      	ldrh	r2, [r2, #0]
   2b7a0:	3a20      	subs	r2, #32
   2b7a2:	801a      	strh	r2, [r3, #0]
					}
				}
			}
		}
		dj->fn[i++] = (BYTE)w;
   2b7a4:	687b      	ldr	r3, [r7, #4]
   2b7a6:	699a      	ldr	r2, [r3, #24]
   2b7a8:	6a3b      	ldr	r3, [r7, #32]
   2b7aa:	1c59      	adds	r1, r3, #1
   2b7ac:	6239      	str	r1, [r7, #32]
   2b7ae:	18d3      	adds	r3, r2, r3
   2b7b0:	2224      	movs	r2, #36	; 0x24
   2b7b2:	18ba      	adds	r2, r7, r2
   2b7b4:	8812      	ldrh	r2, [r2, #0]
   2b7b6:	b2d2      	uxtb	r2, r2
   2b7b8:	701a      	strb	r2, [r3, #0]
		w = lfn[si++];					/* Get an LFN char */
   2b7ba:	e72b      	b.n	2b614 <create_name+0x1cc>
		if (!w) break;					/* Break on end of the LFN */
   2b7bc:	46c0      	nop			; (mov r8, r8)
   2b7be:	e00e      	b.n	2b7de <create_name+0x396>
   2b7c0:	0002cb81 	.word	0x0002cb81
   2b7c4:	00037a24 	.word	0x00037a24
   2b7c8:	00029feb 	.word	0x00029feb
   2b7cc:	7fffffff 	.word	0x7fffffff
   2b7d0:	00029f71 	.word	0x00029f71
   2b7d4:	00037a6c 	.word	0x00037a6c
   2b7d8:	00037a30 	.word	0x00037a30
			if (si > di) break;			/* No extension */
   2b7dc:	46c0      	nop			; (mov r8, r8)
	}

	if (dj->fn[0] == DDE) dj->fn[0] = NDDE;	/* If the first char collides with deleted mark, replace it with 0x05 */
   2b7de:	687b      	ldr	r3, [r7, #4]
   2b7e0:	699b      	ldr	r3, [r3, #24]
   2b7e2:	781b      	ldrb	r3, [r3, #0]
   2b7e4:	2be5      	cmp	r3, #229	; 0xe5
   2b7e6:	d103      	bne.n	2b7f0 <create_name+0x3a8>
   2b7e8:	687b      	ldr	r3, [r7, #4]
   2b7ea:	699b      	ldr	r3, [r3, #24]
   2b7ec:	2205      	movs	r2, #5
   2b7ee:	701a      	strb	r2, [r3, #0]

	if (ni == 8) b <<= 2;
   2b7f0:	69fb      	ldr	r3, [r7, #28]
   2b7f2:	2b08      	cmp	r3, #8
   2b7f4:	d106      	bne.n	2b804 <create_name+0x3bc>
   2b7f6:	2327      	movs	r3, #39	; 0x27
   2b7f8:	18fb      	adds	r3, r7, r3
   2b7fa:	2227      	movs	r2, #39	; 0x27
   2b7fc:	18ba      	adds	r2, r7, r2
   2b7fe:	7812      	ldrb	r2, [r2, #0]
   2b800:	0092      	lsls	r2, r2, #2
   2b802:	701a      	strb	r2, [r3, #0]
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03)	/* Create LFN entry when there are composite capitals */
   2b804:	2327      	movs	r3, #39	; 0x27
   2b806:	18fb      	adds	r3, r7, r3
   2b808:	781b      	ldrb	r3, [r3, #0]
   2b80a:	220c      	movs	r2, #12
   2b80c:	4013      	ands	r3, r2
   2b80e:	2b0c      	cmp	r3, #12
   2b810:	d006      	beq.n	2b820 <create_name+0x3d8>
   2b812:	2327      	movs	r3, #39	; 0x27
   2b814:	18fb      	adds	r3, r7, r3
   2b816:	781b      	ldrb	r3, [r3, #0]
   2b818:	2203      	movs	r2, #3
   2b81a:	4013      	ands	r3, r2
   2b81c:	2b03      	cmp	r3, #3
   2b81e:	d107      	bne.n	2b830 <create_name+0x3e8>
		cf |= NS_LFN;
   2b820:	2326      	movs	r3, #38	; 0x26
   2b822:	18fb      	adds	r3, r7, r3
   2b824:	2226      	movs	r2, #38	; 0x26
   2b826:	18ba      	adds	r2, r7, r2
   2b828:	7812      	ldrb	r2, [r2, #0]
   2b82a:	2102      	movs	r1, #2
   2b82c:	430a      	orrs	r2, r1
   2b82e:	701a      	strb	r2, [r3, #0]
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended char, NT flags are created */
   2b830:	2326      	movs	r3, #38	; 0x26
   2b832:	18fb      	adds	r3, r7, r3
   2b834:	781b      	ldrb	r3, [r3, #0]
   2b836:	2202      	movs	r2, #2
   2b838:	4013      	ands	r3, r2
   2b83a:	d11d      	bne.n	2b878 <create_name+0x430>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
   2b83c:	2327      	movs	r3, #39	; 0x27
   2b83e:	18fb      	adds	r3, r7, r3
   2b840:	781b      	ldrb	r3, [r3, #0]
   2b842:	2203      	movs	r2, #3
   2b844:	4013      	ands	r3, r2
   2b846:	2b01      	cmp	r3, #1
   2b848:	d107      	bne.n	2b85a <create_name+0x412>
   2b84a:	2326      	movs	r3, #38	; 0x26
   2b84c:	18fb      	adds	r3, r7, r3
   2b84e:	2226      	movs	r2, #38	; 0x26
   2b850:	18ba      	adds	r2, r7, r2
   2b852:	7812      	ldrb	r2, [r2, #0]
   2b854:	2110      	movs	r1, #16
   2b856:	430a      	orrs	r2, r1
   2b858:	701a      	strb	r2, [r3, #0]
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
   2b85a:	2327      	movs	r3, #39	; 0x27
   2b85c:	18fb      	adds	r3, r7, r3
   2b85e:	781b      	ldrb	r3, [r3, #0]
   2b860:	220c      	movs	r2, #12
   2b862:	4013      	ands	r3, r2
   2b864:	2b04      	cmp	r3, #4
   2b866:	d107      	bne.n	2b878 <create_name+0x430>
   2b868:	2326      	movs	r3, #38	; 0x26
   2b86a:	18fb      	adds	r3, r7, r3
   2b86c:	2226      	movs	r2, #38	; 0x26
   2b86e:	18ba      	adds	r2, r7, r2
   2b870:	7812      	ldrb	r2, [r2, #0]
   2b872:	2108      	movs	r1, #8
   2b874:	430a      	orrs	r2, r1
   2b876:	701a      	strb	r2, [r3, #0]
	}

	dj->fn[NS] = cf;	/* SFN is created */
   2b878:	687b      	ldr	r3, [r7, #4]
   2b87a:	699b      	ldr	r3, [r3, #24]
   2b87c:	330b      	adds	r3, #11
   2b87e:	2226      	movs	r2, #38	; 0x26
   2b880:	18ba      	adds	r2, r7, r2
   2b882:	7812      	ldrb	r2, [r2, #0]
   2b884:	701a      	strb	r2, [r3, #0]

	return FR_OK;
   2b886:	2300      	movs	r3, #0

	sfn[NS] = c;		/* Store NT flag, File name is created */

	return FR_OK;
#endif
}
   2b888:	0018      	movs	r0, r3
   2b88a:	46bd      	mov	sp, r7
   2b88c:	b00b      	add	sp, #44	; 0x2c
   2b88e:	bd90      	pop	{r4, r7, pc}

0002b890 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR *dj,			/* Directory object to return last directory and found object */
	const TCHAR *path	/* Full-path string to find a file or directory */
)
{
   2b890:	b590      	push	{r4, r7, lr}
   2b892:	b085      	sub	sp, #20
   2b894:	af00      	add	r7, sp, #0
   2b896:	6078      	str	r0, [r7, #4]
   2b898:	6039      	str	r1, [r7, #0]
		path++;	dj->sclust = 0;		/* Strip it and start from the root dir */
	} else {							/* No heading separator */
		dj->sclust = dj->fs->cdir;	/* Start from the current dir */
	}
#else
	if (*path == '/' || *path == '\\')	/* Strip heading separator if exist */
   2b89a:	683b      	ldr	r3, [r7, #0]
   2b89c:	781b      	ldrb	r3, [r3, #0]
   2b89e:	2b2f      	cmp	r3, #47	; 0x2f
   2b8a0:	d003      	beq.n	2b8aa <follow_path+0x1a>
   2b8a2:	683b      	ldr	r3, [r7, #0]
   2b8a4:	781b      	ldrb	r3, [r3, #0]
   2b8a6:	2b5c      	cmp	r3, #92	; 0x5c
   2b8a8:	d102      	bne.n	2b8b0 <follow_path+0x20>
		path++;
   2b8aa:	683b      	ldr	r3, [r7, #0]
   2b8ac:	3301      	adds	r3, #1
   2b8ae:	603b      	str	r3, [r7, #0]
	dj->sclust = 0;						/* Start from the root dir */
   2b8b0:	687b      	ldr	r3, [r7, #4]
   2b8b2:	2200      	movs	r2, #0
   2b8b4:	609a      	str	r2, [r3, #8]
#endif

	if ((UINT)*path < ' ') {			/* Nul path means the start directory itself */
   2b8b6:	683b      	ldr	r3, [r7, #0]
   2b8b8:	781b      	ldrb	r3, [r3, #0]
   2b8ba:	2b1f      	cmp	r3, #31
   2b8bc:	d80c      	bhi.n	2b8d8 <follow_path+0x48>
		res = dir_sdi(dj, 0);
   2b8be:	230f      	movs	r3, #15
   2b8c0:	18fc      	adds	r4, r7, r3
   2b8c2:	687b      	ldr	r3, [r7, #4]
   2b8c4:	2100      	movs	r1, #0
   2b8c6:	0018      	movs	r0, r3
   2b8c8:	4b3c      	ldr	r3, [pc, #240]	; (2b9bc <follow_path+0x12c>)
   2b8ca:	4798      	blx	r3
   2b8cc:	0003      	movs	r3, r0
   2b8ce:	7023      	strb	r3, [r4, #0]
		dj->dir = 0;
   2b8d0:	687b      	ldr	r3, [r7, #4]
   2b8d2:	2200      	movs	r2, #0
   2b8d4:	615a      	str	r2, [r3, #20]
   2b8d6:	e06a      	b.n	2b9ae <follow_path+0x11e>

	} else {							/* Follow path */
		for (;;) {
			res = create_name(dj, &path);	/* Get a segment */
   2b8d8:	230f      	movs	r3, #15
   2b8da:	18fc      	adds	r4, r7, r3
   2b8dc:	003a      	movs	r2, r7
   2b8de:	687b      	ldr	r3, [r7, #4]
   2b8e0:	0011      	movs	r1, r2
   2b8e2:	0018      	movs	r0, r3
   2b8e4:	4b36      	ldr	r3, [pc, #216]	; (2b9c0 <follow_path+0x130>)
   2b8e6:	4798      	blx	r3
   2b8e8:	0003      	movs	r3, r0
   2b8ea:	7023      	strb	r3, [r4, #0]
			if (res != FR_OK) break;
   2b8ec:	230f      	movs	r3, #15
   2b8ee:	18fb      	adds	r3, r7, r3
   2b8f0:	781b      	ldrb	r3, [r3, #0]
   2b8f2:	2b00      	cmp	r3, #0
   2b8f4:	d154      	bne.n	2b9a0 <follow_path+0x110>
			res = dir_find(dj);				/* Find it */
   2b8f6:	230f      	movs	r3, #15
   2b8f8:	18fc      	adds	r4, r7, r3
   2b8fa:	687b      	ldr	r3, [r7, #4]
   2b8fc:	0018      	movs	r0, r3
   2b8fe:	4b31      	ldr	r3, [pc, #196]	; (2b9c4 <follow_path+0x134>)
   2b900:	4798      	blx	r3
   2b902:	0003      	movs	r3, r0
   2b904:	7023      	strb	r3, [r4, #0]
			ns = *(dj->fn+NS);
   2b906:	687b      	ldr	r3, [r7, #4]
   2b908:	699a      	ldr	r2, [r3, #24]
   2b90a:	230e      	movs	r3, #14
   2b90c:	18fb      	adds	r3, r7, r3
   2b90e:	7ad2      	ldrb	r2, [r2, #11]
   2b910:	701a      	strb	r2, [r3, #0]
			if (res != FR_OK) {				/* Failed to find the object */
   2b912:	230f      	movs	r3, #15
   2b914:	18fb      	adds	r3, r7, r3
   2b916:	781b      	ldrb	r3, [r3, #0]
   2b918:	2b00      	cmp	r3, #0
   2b91a:	d00f      	beq.n	2b93c <follow_path+0xac>
				if (res != FR_NO_FILE) break;	/* Abort if any hard error occured */
   2b91c:	230f      	movs	r3, #15
   2b91e:	18fb      	adds	r3, r7, r3
   2b920:	781b      	ldrb	r3, [r3, #0]
   2b922:	2b04      	cmp	r3, #4
   2b924:	d13e      	bne.n	2b9a4 <follow_path+0x114>
				if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exit */
					dj->sclust = 0; dj->dir = 0;	/* It is the root dir */
					res = FR_OK;
					if (!(ns & NS_LAST)) continue;
				} else {							/* Could not find the object */
					if (!(ns & NS_LAST)) res = FR_NO_PATH;
   2b926:	230e      	movs	r3, #14
   2b928:	18fb      	adds	r3, r7, r3
   2b92a:	781b      	ldrb	r3, [r3, #0]
   2b92c:	2204      	movs	r2, #4
   2b92e:	4013      	ands	r3, r2
   2b930:	d13a      	bne.n	2b9a8 <follow_path+0x118>
   2b932:	230f      	movs	r3, #15
   2b934:	18fb      	adds	r3, r7, r3
   2b936:	2205      	movs	r2, #5
   2b938:	701a      	strb	r2, [r3, #0]
				}
				break;
   2b93a:	e035      	b.n	2b9a8 <follow_path+0x118>
			}
			if (ns & NS_LAST) break;			/* Last segment match. Function completed. */
   2b93c:	230e      	movs	r3, #14
   2b93e:	18fb      	adds	r3, r7, r3
   2b940:	781b      	ldrb	r3, [r3, #0]
   2b942:	2204      	movs	r2, #4
   2b944:	4013      	ands	r3, r2
   2b946:	d131      	bne.n	2b9ac <follow_path+0x11c>
			dir = dj->dir;						/* There is next segment. Follow the sub directory */
   2b948:	687b      	ldr	r3, [r7, #4]
   2b94a:	695b      	ldr	r3, [r3, #20]
   2b94c:	60bb      	str	r3, [r7, #8]
			if (!(dir[DIR_Attr] & AM_DIR)) {	/* Cannot follow because it is a file */
   2b94e:	68bb      	ldr	r3, [r7, #8]
   2b950:	330b      	adds	r3, #11
   2b952:	781b      	ldrb	r3, [r3, #0]
   2b954:	001a      	movs	r2, r3
   2b956:	2310      	movs	r3, #16
   2b958:	4013      	ands	r3, r2
   2b95a:	d104      	bne.n	2b966 <follow_path+0xd6>
				res = FR_NO_PATH; break;
   2b95c:	230f      	movs	r3, #15
   2b95e:	18fb      	adds	r3, r7, r3
   2b960:	2205      	movs	r2, #5
   2b962:	701a      	strb	r2, [r3, #0]
   2b964:	e023      	b.n	2b9ae <follow_path+0x11e>
			}
			dj->sclust = LD_CLUST(dir);
   2b966:	68bb      	ldr	r3, [r7, #8]
   2b968:	3315      	adds	r3, #21
   2b96a:	781b      	ldrb	r3, [r3, #0]
   2b96c:	021b      	lsls	r3, r3, #8
   2b96e:	b21a      	sxth	r2, r3
   2b970:	68bb      	ldr	r3, [r7, #8]
   2b972:	3314      	adds	r3, #20
   2b974:	781b      	ldrb	r3, [r3, #0]
   2b976:	b21b      	sxth	r3, r3
   2b978:	4313      	orrs	r3, r2
   2b97a:	b21b      	sxth	r3, r3
   2b97c:	b29b      	uxth	r3, r3
   2b97e:	041b      	lsls	r3, r3, #16
   2b980:	68ba      	ldr	r2, [r7, #8]
   2b982:	321b      	adds	r2, #27
   2b984:	7812      	ldrb	r2, [r2, #0]
   2b986:	0212      	lsls	r2, r2, #8
   2b988:	b211      	sxth	r1, r2
   2b98a:	68ba      	ldr	r2, [r7, #8]
   2b98c:	321a      	adds	r2, #26
   2b98e:	7812      	ldrb	r2, [r2, #0]
   2b990:	b212      	sxth	r2, r2
   2b992:	430a      	orrs	r2, r1
   2b994:	b212      	sxth	r2, r2
   2b996:	b292      	uxth	r2, r2
   2b998:	431a      	orrs	r2, r3
   2b99a:	687b      	ldr	r3, [r7, #4]
   2b99c:	609a      	str	r2, [r3, #8]
			res = create_name(dj, &path);	/* Get a segment */
   2b99e:	e79b      	b.n	2b8d8 <follow_path+0x48>
			if (res != FR_OK) break;
   2b9a0:	46c0      	nop			; (mov r8, r8)
   2b9a2:	e004      	b.n	2b9ae <follow_path+0x11e>
				if (res != FR_NO_FILE) break;	/* Abort if any hard error occured */
   2b9a4:	46c0      	nop			; (mov r8, r8)
   2b9a6:	e002      	b.n	2b9ae <follow_path+0x11e>
				break;
   2b9a8:	46c0      	nop			; (mov r8, r8)
   2b9aa:	e000      	b.n	2b9ae <follow_path+0x11e>
			if (ns & NS_LAST) break;			/* Last segment match. Function completed. */
   2b9ac:	46c0      	nop			; (mov r8, r8)
		}
	}

	return res;
   2b9ae:	230f      	movs	r3, #15
   2b9b0:	18fb      	adds	r3, r7, r3
   2b9b2:	781b      	ldrb	r3, [r3, #0]
}
   2b9b4:	0018      	movs	r0, r3
   2b9b6:	46bd      	mov	sp, r7
   2b9b8:	b005      	add	sp, #20
   2b9ba:	bd90      	pop	{r4, r7, pc}
   2b9bc:	0002a861 	.word	0x0002a861
   2b9c0:	0002b449 	.word	0x0002b449
   2b9c4:	0002aee5 	.word	0x0002aee5

0002b9c8 <check_fs>:
static
BYTE check_fs (	/* 0:FAT-VBR, 1:Valid BR but not FAT, 2:Not a BR, 3:Disk error */
	FATFS *fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to check if it is an FAT boot record or not */
)
{
   2b9c8:	b590      	push	{r4, r7, lr}
   2b9ca:	b083      	sub	sp, #12
   2b9cc:	af00      	add	r7, sp, #0
   2b9ce:	6078      	str	r0, [r7, #4]
   2b9d0:	6039      	str	r1, [r7, #0]
	if (disk_read(fs->drv, fs->win, sect, 1) != RES_OK)	/* Load boot record */
   2b9d2:	687b      	ldr	r3, [r7, #4]
   2b9d4:	7858      	ldrb	r0, [r3, #1]
   2b9d6:	687b      	ldr	r3, [r7, #4]
   2b9d8:	3330      	adds	r3, #48	; 0x30
   2b9da:	0019      	movs	r1, r3
   2b9dc:	683a      	ldr	r2, [r7, #0]
   2b9de:	2301      	movs	r3, #1
   2b9e0:	4c2a      	ldr	r4, [pc, #168]	; (2ba8c <check_fs+0xc4>)
   2b9e2:	47a0      	blx	r4
   2b9e4:	1e03      	subs	r3, r0, #0
   2b9e6:	d001      	beq.n	2b9ec <check_fs+0x24>
		return 3;
   2b9e8:	2303      	movs	r3, #3
   2b9ea:	e04b      	b.n	2ba84 <check_fs+0xbc>
	if (LD_WORD(&fs->win[BS_55AA]) != 0xAA55)		/* Check record signature (always placed at offset 510 even if the sector size is >512) */
   2b9ec:	687b      	ldr	r3, [r7, #4]
   2b9ee:	4a28      	ldr	r2, [pc, #160]	; (2ba90 <check_fs+0xc8>)
   2b9f0:	4694      	mov	ip, r2
   2b9f2:	4463      	add	r3, ip
   2b9f4:	3301      	adds	r3, #1
   2b9f6:	781b      	ldrb	r3, [r3, #0]
   2b9f8:	021b      	lsls	r3, r3, #8
   2b9fa:	b21a      	sxth	r2, r3
   2b9fc:	687b      	ldr	r3, [r7, #4]
   2b9fe:	4924      	ldr	r1, [pc, #144]	; (2ba90 <check_fs+0xc8>)
   2ba00:	5c5b      	ldrb	r3, [r3, r1]
   2ba02:	b21b      	sxth	r3, r3
   2ba04:	4313      	orrs	r3, r2
   2ba06:	b21b      	sxth	r3, r3
   2ba08:	4a22      	ldr	r2, [pc, #136]	; (2ba94 <check_fs+0xcc>)
   2ba0a:	4293      	cmp	r3, r2
   2ba0c:	d001      	beq.n	2ba12 <check_fs+0x4a>
		return 2;
   2ba0e:	2302      	movs	r3, #2
   2ba10:	e038      	b.n	2ba84 <check_fs+0xbc>

	if ((LD_DWORD(&fs->win[BS_FilSysType]) & 0xFFFFFF) == 0x544146)	/* Check "FAT" string */
   2ba12:	687b      	ldr	r3, [r7, #4]
   2ba14:	3366      	adds	r3, #102	; 0x66
   2ba16:	3303      	adds	r3, #3
   2ba18:	781b      	ldrb	r3, [r3, #0]
   2ba1a:	061a      	lsls	r2, r3, #24
   2ba1c:	687b      	ldr	r3, [r7, #4]
   2ba1e:	3366      	adds	r3, #102	; 0x66
   2ba20:	3302      	adds	r3, #2
   2ba22:	781b      	ldrb	r3, [r3, #0]
   2ba24:	041b      	lsls	r3, r3, #16
   2ba26:	4313      	orrs	r3, r2
   2ba28:	687a      	ldr	r2, [r7, #4]
   2ba2a:	3266      	adds	r2, #102	; 0x66
   2ba2c:	3201      	adds	r2, #1
   2ba2e:	7812      	ldrb	r2, [r2, #0]
   2ba30:	0212      	lsls	r2, r2, #8
   2ba32:	4313      	orrs	r3, r2
   2ba34:	687a      	ldr	r2, [r7, #4]
   2ba36:	2166      	movs	r1, #102	; 0x66
   2ba38:	5c52      	ldrb	r2, [r2, r1]
   2ba3a:	4313      	orrs	r3, r2
   2ba3c:	021b      	lsls	r3, r3, #8
   2ba3e:	0a1b      	lsrs	r3, r3, #8
   2ba40:	4a15      	ldr	r2, [pc, #84]	; (2ba98 <check_fs+0xd0>)
   2ba42:	4293      	cmp	r3, r2
   2ba44:	d101      	bne.n	2ba4a <check_fs+0x82>
		return 0;
   2ba46:	2300      	movs	r3, #0
   2ba48:	e01c      	b.n	2ba84 <check_fs+0xbc>
	if ((LD_DWORD(&fs->win[BS_FilSysType32]) & 0xFFFFFF) == 0x544146)
   2ba4a:	687b      	ldr	r3, [r7, #4]
   2ba4c:	3382      	adds	r3, #130	; 0x82
   2ba4e:	3303      	adds	r3, #3
   2ba50:	781b      	ldrb	r3, [r3, #0]
   2ba52:	061a      	lsls	r2, r3, #24
   2ba54:	687b      	ldr	r3, [r7, #4]
   2ba56:	3382      	adds	r3, #130	; 0x82
   2ba58:	3302      	adds	r3, #2
   2ba5a:	781b      	ldrb	r3, [r3, #0]
   2ba5c:	041b      	lsls	r3, r3, #16
   2ba5e:	4313      	orrs	r3, r2
   2ba60:	687a      	ldr	r2, [r7, #4]
   2ba62:	3282      	adds	r2, #130	; 0x82
   2ba64:	3201      	adds	r2, #1
   2ba66:	7812      	ldrb	r2, [r2, #0]
   2ba68:	0212      	lsls	r2, r2, #8
   2ba6a:	4313      	orrs	r3, r2
   2ba6c:	687a      	ldr	r2, [r7, #4]
   2ba6e:	2182      	movs	r1, #130	; 0x82
   2ba70:	5c52      	ldrb	r2, [r2, r1]
   2ba72:	4313      	orrs	r3, r2
   2ba74:	021b      	lsls	r3, r3, #8
   2ba76:	0a1b      	lsrs	r3, r3, #8
   2ba78:	4a07      	ldr	r2, [pc, #28]	; (2ba98 <check_fs+0xd0>)
   2ba7a:	4293      	cmp	r3, r2
   2ba7c:	d101      	bne.n	2ba82 <check_fs+0xba>
		return 0;
   2ba7e:	2300      	movs	r3, #0
   2ba80:	e000      	b.n	2ba84 <check_fs+0xbc>

	return 1;
   2ba82:	2301      	movs	r3, #1
}
   2ba84:	0018      	movs	r0, r3
   2ba86:	46bd      	mov	sp, r7
   2ba88:	b003      	add	sp, #12
   2ba8a:	bd90      	pop	{r4, r7, pc}
   2ba8c:	00029c31 	.word	0x00029c31
   2ba90:	0000022e 	.word	0x0000022e
   2ba94:	ffffaa55 	.word	0xffffaa55
   2ba98:	00544146 	.word	0x00544146

0002ba9c <chk_mounted>:
FRESULT chk_mounted (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR **path,	/* Pointer to pointer to the path name (drive number) */
	FATFS **rfs,		/* Pointer to pointer to the found file system object */
	BYTE chk_wp			/* !=0: Check media write protection for write access */
)
{
   2ba9c:	b590      	push	{r4, r7, lr}
   2ba9e:	b093      	sub	sp, #76	; 0x4c
   2baa0:	af00      	add	r7, sp, #0
   2baa2:	60f8      	str	r0, [r7, #12]
   2baa4:	60b9      	str	r1, [r7, #8]
   2baa6:	1dfb      	adds	r3, r7, #7
   2baa8:	701a      	strb	r2, [r3, #0]
	BYTE fmt, b, pi, *tbl;
	UINT vol;
	DSTATUS stat;
	DWORD bsect, fasize, tsect, sysect, nclst, szbfat;
	WORD nrsv;
	const TCHAR *p = *path;
   2baaa:	68fb      	ldr	r3, [r7, #12]
   2baac:	681b      	ldr	r3, [r3, #0]
   2baae:	62fb      	str	r3, [r7, #44]	; 0x2c
	FATFS *fs;

	/* Get logical drive number from the path name */
	vol = p[0] - '0';					/* Is there a drive number? */
   2bab0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   2bab2:	781b      	ldrb	r3, [r3, #0]
   2bab4:	3b30      	subs	r3, #48	; 0x30
   2bab6:	643b      	str	r3, [r7, #64]	; 0x40
	if (vol <= 9 && p[1] == ':') {		/* Found a drive number, get and strip it */
   2bab8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   2baba:	2b09      	cmp	r3, #9
   2babc:	d80b      	bhi.n	2bad6 <chk_mounted+0x3a>
   2babe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   2bac0:	3301      	adds	r3, #1
   2bac2:	781b      	ldrb	r3, [r3, #0]
   2bac4:	2b3a      	cmp	r3, #58	; 0x3a
   2bac6:	d106      	bne.n	2bad6 <chk_mounted+0x3a>
		p += 2; *path = p;				/* Return pointer to the path name */
   2bac8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   2baca:	3302      	adds	r3, #2
   2bacc:	62fb      	str	r3, [r7, #44]	; 0x2c
   2bace:	68fb      	ldr	r3, [r7, #12]
   2bad0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
   2bad2:	601a      	str	r2, [r3, #0]
   2bad4:	e001      	b.n	2bada <chk_mounted+0x3e>
	} else {							/* No drive number is given */
#if _FS_RPATH
		vol = CurrVol;					/* Use current drive */
#else
		vol = 0;						/* Use drive 0 */
   2bad6:	2300      	movs	r3, #0
   2bad8:	643b      	str	r3, [r7, #64]	; 0x40
#endif
	}

	/* Check if the file system object is valid or not */
	if (vol >= _VOLUMES) 				/* Is the drive number valid? */
   2bada:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   2badc:	2b07      	cmp	r3, #7
   2bade:	d901      	bls.n	2bae4 <chk_mounted+0x48>
		return FR_INVALID_DRIVE;
   2bae0:	230b      	movs	r3, #11
   2bae2:	e2af      	b.n	2c044 <chk_mounted+0x5a8>
	*rfs = fs = FatFs[vol];				/* Return pointer to the corresponding file system object */
   2bae4:	4bc5      	ldr	r3, [pc, #788]	; (2bdfc <chk_mounted+0x360>)
   2bae6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
   2bae8:	0092      	lsls	r2, r2, #2
   2baea:	58d3      	ldr	r3, [r2, r3]
   2baec:	62bb      	str	r3, [r7, #40]	; 0x28
   2baee:	68bb      	ldr	r3, [r7, #8]
   2baf0:	6aba      	ldr	r2, [r7, #40]	; 0x28
   2baf2:	601a      	str	r2, [r3, #0]
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
   2baf4:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2baf6:	2b00      	cmp	r3, #0
   2baf8:	d101      	bne.n	2bafe <chk_mounted+0x62>
   2bafa:	230c      	movs	r3, #12
   2bafc:	e2a2      	b.n	2c044 <chk_mounted+0x5a8>

	ENTER_FF(fs);						/* Lock file system */

	if (fs->fs_type) {					/* If the logical drive has been mounted */
   2bafe:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2bb00:	781b      	ldrb	r3, [r3, #0]
   2bb02:	2b00      	cmp	r3, #0
   2bb04:	d01c      	beq.n	2bb40 <chk_mounted+0xa4>
		stat = disk_status(fs->drv);
   2bb06:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2bb08:	785b      	ldrb	r3, [r3, #1]
   2bb0a:	2227      	movs	r2, #39	; 0x27
   2bb0c:	18bc      	adds	r4, r7, r2
   2bb0e:	0018      	movs	r0, r3
   2bb10:	4bbb      	ldr	r3, [pc, #748]	; (2be00 <chk_mounted+0x364>)
   2bb12:	4798      	blx	r3
   2bb14:	0003      	movs	r3, r0
   2bb16:	7023      	strb	r3, [r4, #0]
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized (has not been changed), */
   2bb18:	2327      	movs	r3, #39	; 0x27
   2bb1a:	18fb      	adds	r3, r7, r3
   2bb1c:	781b      	ldrb	r3, [r3, #0]
   2bb1e:	2201      	movs	r2, #1
   2bb20:	4013      	ands	r3, r2
   2bb22:	d10d      	bne.n	2bb40 <chk_mounted+0xa4>
			if (!_FS_READONLY && chk_wp && (stat & STA_PROTECT))	/* Check write protection if needed */
   2bb24:	1dfb      	adds	r3, r7, #7
   2bb26:	781b      	ldrb	r3, [r3, #0]
   2bb28:	2b00      	cmp	r3, #0
   2bb2a:	d007      	beq.n	2bb3c <chk_mounted+0xa0>
   2bb2c:	2327      	movs	r3, #39	; 0x27
   2bb2e:	18fb      	adds	r3, r7, r3
   2bb30:	781b      	ldrb	r3, [r3, #0]
   2bb32:	2204      	movs	r2, #4
   2bb34:	4013      	ands	r3, r2
   2bb36:	d001      	beq.n	2bb3c <chk_mounted+0xa0>
				return FR_WRITE_PROTECTED;
   2bb38:	230a      	movs	r3, #10
   2bb3a:	e283      	b.n	2c044 <chk_mounted+0x5a8>
			return FR_OK;				/* The file system object is valid */
   2bb3c:	2300      	movs	r3, #0
   2bb3e:	e281      	b.n	2c044 <chk_mounted+0x5a8>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
   2bb40:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2bb42:	2200      	movs	r2, #0
   2bb44:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
   2bb46:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   2bb48:	b2da      	uxtb	r2, r3
   2bb4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2bb4c:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize low level disk I/O layer */
   2bb4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2bb50:	785b      	ldrb	r3, [r3, #1]
   2bb52:	2227      	movs	r2, #39	; 0x27
   2bb54:	18bc      	adds	r4, r7, r2
   2bb56:	0018      	movs	r0, r3
   2bb58:	4baa      	ldr	r3, [pc, #680]	; (2be04 <chk_mounted+0x368>)
   2bb5a:	4798      	blx	r3
   2bb5c:	0003      	movs	r3, r0
   2bb5e:	7023      	strb	r3, [r4, #0]
	if (stat & STA_NOINIT)				/* Check if the initialization succeeded */
   2bb60:	2327      	movs	r3, #39	; 0x27
   2bb62:	18fb      	adds	r3, r7, r3
   2bb64:	781b      	ldrb	r3, [r3, #0]
   2bb66:	2201      	movs	r2, #1
   2bb68:	4013      	ands	r3, r2
   2bb6a:	d001      	beq.n	2bb70 <chk_mounted+0xd4>
		return FR_NOT_READY;			/* Failed to initialize due to no media or hard error */
   2bb6c:	2303      	movs	r3, #3
   2bb6e:	e269      	b.n	2c044 <chk_mounted+0x5a8>
	if (!_FS_READONLY && chk_wp && (stat & STA_PROTECT))	/* Check disk write protection if needed */
   2bb70:	1dfb      	adds	r3, r7, #7
   2bb72:	781b      	ldrb	r3, [r3, #0]
   2bb74:	2b00      	cmp	r3, #0
   2bb76:	d007      	beq.n	2bb88 <chk_mounted+0xec>
   2bb78:	2327      	movs	r3, #39	; 0x27
   2bb7a:	18fb      	adds	r3, r7, r3
   2bb7c:	781b      	ldrb	r3, [r3, #0]
   2bb7e:	2204      	movs	r2, #4
   2bb80:	4013      	ands	r3, r2
   2bb82:	d001      	beq.n	2bb88 <chk_mounted+0xec>
		return FR_WRITE_PROTECTED;
   2bb84:	230a      	movs	r3, #10
   2bb86:	e25d      	b.n	2c044 <chk_mounted+0x5a8>
#if _MAX_SS != 512						/* Get disk sector size (variable sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &fs->ssize) != RES_OK)
		return FR_DISK_ERR;
#endif
	/* Search FAT partition on the drive. Supports only generic partitionings, FDISK and SFD. */
	fmt = check_fs(fs, bsect = 0);		/* Load sector 0 and check if it is an FAT-VBR (in SFD) */
   2bb88:	2300      	movs	r3, #0
   2bb8a:	63fb      	str	r3, [r7, #60]	; 0x3c
   2bb8c:	2347      	movs	r3, #71	; 0x47
   2bb8e:	18fc      	adds	r4, r7, r3
   2bb90:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
   2bb92:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2bb94:	0011      	movs	r1, r2
   2bb96:	0018      	movs	r0, r3
   2bb98:	4b9b      	ldr	r3, [pc, #620]	; (2be08 <chk_mounted+0x36c>)
   2bb9a:	4798      	blx	r3
   2bb9c:	0003      	movs	r3, r0
   2bb9e:	7023      	strb	r3, [r4, #0]
	if (LD2PT(vol) && !fmt) fmt = 1;	/* Force non-SFD if the volume is forced partition */
	if (fmt == 1) {						/* Not an FAT-VBR, the physical drive can be partitioned */
   2bba0:	2347      	movs	r3, #71	; 0x47
   2bba2:	18fb      	adds	r3, r7, r3
   2bba4:	781b      	ldrb	r3, [r3, #0]
   2bba6:	2b01      	cmp	r3, #1
   2bba8:	d13b      	bne.n	2bc22 <chk_mounted+0x186>
		/* Check the partition listed in the partition table */
		pi = LD2PT(vol);
   2bbaa:	2346      	movs	r3, #70	; 0x46
   2bbac:	18fb      	adds	r3, r7, r3
   2bbae:	2200      	movs	r2, #0
   2bbb0:	701a      	strb	r2, [r3, #0]
		if (pi) pi--;
   2bbb2:	2346      	movs	r3, #70	; 0x46
   2bbb4:	18fb      	adds	r3, r7, r3
   2bbb6:	781b      	ldrb	r3, [r3, #0]
   2bbb8:	2b00      	cmp	r3, #0
   2bbba:	d006      	beq.n	2bbca <chk_mounted+0x12e>
   2bbbc:	2346      	movs	r3, #70	; 0x46
   2bbbe:	18fb      	adds	r3, r7, r3
   2bbc0:	781a      	ldrb	r2, [r3, #0]
   2bbc2:	2346      	movs	r3, #70	; 0x46
   2bbc4:	18fb      	adds	r3, r7, r3
   2bbc6:	3a01      	subs	r2, #1
   2bbc8:	701a      	strb	r2, [r3, #0]
		tbl = &fs->win[MBR_Table + pi * SZ_PTE];/* Partition table */
   2bbca:	2346      	movs	r3, #70	; 0x46
   2bbcc:	18fb      	adds	r3, r7, r3
   2bbce:	781b      	ldrb	r3, [r3, #0]
   2bbd0:	011b      	lsls	r3, r3, #4
   2bbd2:	33bf      	adds	r3, #191	; 0xbf
   2bbd4:	33ff      	adds	r3, #255	; 0xff
   2bbd6:	3330      	adds	r3, #48	; 0x30
   2bbd8:	6aba      	ldr	r2, [r7, #40]	; 0x28
   2bbda:	18d3      	adds	r3, r2, r3
   2bbdc:	623b      	str	r3, [r7, #32]
		if (tbl[4]) {						/* Is the partition existing? */
   2bbde:	6a3b      	ldr	r3, [r7, #32]
   2bbe0:	3304      	adds	r3, #4
   2bbe2:	781b      	ldrb	r3, [r3, #0]
   2bbe4:	2b00      	cmp	r3, #0
   2bbe6:	d01c      	beq.n	2bc22 <chk_mounted+0x186>
			bsect = LD_DWORD(&tbl[8]);		/* Partition offset in LBA */
   2bbe8:	6a3b      	ldr	r3, [r7, #32]
   2bbea:	330b      	adds	r3, #11
   2bbec:	781b      	ldrb	r3, [r3, #0]
   2bbee:	061a      	lsls	r2, r3, #24
   2bbf0:	6a3b      	ldr	r3, [r7, #32]
   2bbf2:	330a      	adds	r3, #10
   2bbf4:	781b      	ldrb	r3, [r3, #0]
   2bbf6:	041b      	lsls	r3, r3, #16
   2bbf8:	4313      	orrs	r3, r2
   2bbfa:	6a3a      	ldr	r2, [r7, #32]
   2bbfc:	3209      	adds	r2, #9
   2bbfe:	7812      	ldrb	r2, [r2, #0]
   2bc00:	0212      	lsls	r2, r2, #8
   2bc02:	4313      	orrs	r3, r2
   2bc04:	6a3a      	ldr	r2, [r7, #32]
   2bc06:	3208      	adds	r2, #8
   2bc08:	7812      	ldrb	r2, [r2, #0]
   2bc0a:	4313      	orrs	r3, r2
   2bc0c:	63fb      	str	r3, [r7, #60]	; 0x3c
			fmt = check_fs(fs, bsect);		/* Check the partition */
   2bc0e:	2347      	movs	r3, #71	; 0x47
   2bc10:	18fc      	adds	r4, r7, r3
   2bc12:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
   2bc14:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2bc16:	0011      	movs	r1, r2
   2bc18:	0018      	movs	r0, r3
   2bc1a:	4b7b      	ldr	r3, [pc, #492]	; (2be08 <chk_mounted+0x36c>)
   2bc1c:	4798      	blx	r3
   2bc1e:	0003      	movs	r3, r0
   2bc20:	7023      	strb	r3, [r4, #0]
		}
	}
	if (fmt == 3) return FR_DISK_ERR;
   2bc22:	2347      	movs	r3, #71	; 0x47
   2bc24:	18fb      	adds	r3, r7, r3
   2bc26:	781b      	ldrb	r3, [r3, #0]
   2bc28:	2b03      	cmp	r3, #3
   2bc2a:	d101      	bne.n	2bc30 <chk_mounted+0x194>
   2bc2c:	2301      	movs	r3, #1
   2bc2e:	e209      	b.n	2c044 <chk_mounted+0x5a8>
	if (fmt) return FR_NO_FILESYSTEM;		/* No FAT volume is found */
   2bc30:	2347      	movs	r3, #71	; 0x47
   2bc32:	18fb      	adds	r3, r7, r3
   2bc34:	781b      	ldrb	r3, [r3, #0]
   2bc36:	2b00      	cmp	r3, #0
   2bc38:	d001      	beq.n	2bc3e <chk_mounted+0x1a2>
   2bc3a:	230d      	movs	r3, #13
   2bc3c:	e202      	b.n	2c044 <chk_mounted+0x5a8>

	/* An FAT volume is found. Following code initializes the file system object */

	if (LD_WORD(fs->win+BPB_BytsPerSec) != SS(fs))		/* (BPB_BytsPerSec must be equal to the physical sector size) */
   2bc3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2bc40:	223c      	movs	r2, #60	; 0x3c
   2bc42:	5c9b      	ldrb	r3, [r3, r2]
   2bc44:	021b      	lsls	r3, r3, #8
   2bc46:	b21a      	sxth	r2, r3
   2bc48:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2bc4a:	213b      	movs	r1, #59	; 0x3b
   2bc4c:	5c5b      	ldrb	r3, [r3, r1]
   2bc4e:	b21b      	sxth	r3, r3
   2bc50:	4313      	orrs	r3, r2
   2bc52:	b21a      	sxth	r2, r3
   2bc54:	2380      	movs	r3, #128	; 0x80
   2bc56:	009b      	lsls	r3, r3, #2
   2bc58:	429a      	cmp	r2, r3
   2bc5a:	d001      	beq.n	2bc60 <chk_mounted+0x1c4>
		return FR_NO_FILESYSTEM;
   2bc5c:	230d      	movs	r3, #13
   2bc5e:	e1f1      	b.n	2c044 <chk_mounted+0x5a8>

	fasize = LD_WORD(fs->win+BPB_FATSz16);				/* Number of sectors per FAT */
   2bc60:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2bc62:	2247      	movs	r2, #71	; 0x47
   2bc64:	5c9b      	ldrb	r3, [r3, r2]
   2bc66:	021b      	lsls	r3, r3, #8
   2bc68:	b21a      	sxth	r2, r3
   2bc6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2bc6c:	2146      	movs	r1, #70	; 0x46
   2bc6e:	5c5b      	ldrb	r3, [r3, r1]
   2bc70:	b21b      	sxth	r3, r3
   2bc72:	4313      	orrs	r3, r2
   2bc74:	b21b      	sxth	r3, r3
   2bc76:	b29b      	uxth	r3, r3
   2bc78:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fasize) fasize = LD_DWORD(fs->win+BPB_FATSz32);
   2bc7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   2bc7c:	2b00      	cmp	r3, #0
   2bc7e:	d112      	bne.n	2bca6 <chk_mounted+0x20a>
   2bc80:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2bc82:	2257      	movs	r2, #87	; 0x57
   2bc84:	5c9b      	ldrb	r3, [r3, r2]
   2bc86:	061a      	lsls	r2, r3, #24
   2bc88:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2bc8a:	2156      	movs	r1, #86	; 0x56
   2bc8c:	5c5b      	ldrb	r3, [r3, r1]
   2bc8e:	041b      	lsls	r3, r3, #16
   2bc90:	4313      	orrs	r3, r2
   2bc92:	6aba      	ldr	r2, [r7, #40]	; 0x28
   2bc94:	2155      	movs	r1, #85	; 0x55
   2bc96:	5c52      	ldrb	r2, [r2, r1]
   2bc98:	0212      	lsls	r2, r2, #8
   2bc9a:	4313      	orrs	r3, r2
   2bc9c:	6aba      	ldr	r2, [r7, #40]	; 0x28
   2bc9e:	2154      	movs	r1, #84	; 0x54
   2bca0:	5c52      	ldrb	r2, [r2, r1]
   2bca2:	4313      	orrs	r3, r2
   2bca4:	63bb      	str	r3, [r7, #56]	; 0x38
	fs->fsize = fasize;
   2bca6:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2bca8:	6bba      	ldr	r2, [r7, #56]	; 0x38
   2bcaa:	61da      	str	r2, [r3, #28]

	fs->n_fats = b = fs->win[BPB_NumFATs];				/* Number of FAT copies */
   2bcac:	231f      	movs	r3, #31
   2bcae:	18fb      	adds	r3, r7, r3
   2bcb0:	6aba      	ldr	r2, [r7, #40]	; 0x28
   2bcb2:	2140      	movs	r1, #64	; 0x40
   2bcb4:	5c52      	ldrb	r2, [r2, r1]
   2bcb6:	701a      	strb	r2, [r3, #0]
   2bcb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2bcba:	221f      	movs	r2, #31
   2bcbc:	18ba      	adds	r2, r7, r2
   2bcbe:	7812      	ldrb	r2, [r2, #0]
   2bcc0:	70da      	strb	r2, [r3, #3]
	if (b != 1 && b != 2) return FR_NO_FILESYSTEM;		/* (Must be 1 or 2) */
   2bcc2:	231f      	movs	r3, #31
   2bcc4:	18fb      	adds	r3, r7, r3
   2bcc6:	781b      	ldrb	r3, [r3, #0]
   2bcc8:	2b01      	cmp	r3, #1
   2bcca:	d006      	beq.n	2bcda <chk_mounted+0x23e>
   2bccc:	231f      	movs	r3, #31
   2bcce:	18fb      	adds	r3, r7, r3
   2bcd0:	781b      	ldrb	r3, [r3, #0]
   2bcd2:	2b02      	cmp	r3, #2
   2bcd4:	d001      	beq.n	2bcda <chk_mounted+0x23e>
   2bcd6:	230d      	movs	r3, #13
   2bcd8:	e1b4      	b.n	2c044 <chk_mounted+0x5a8>
	fasize *= b;										/* Number of sectors for FAT area */
   2bcda:	231f      	movs	r3, #31
   2bcdc:	18fb      	adds	r3, r7, r3
   2bcde:	781a      	ldrb	r2, [r3, #0]
   2bce0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   2bce2:	4353      	muls	r3, r2
   2bce4:	63bb      	str	r3, [r7, #56]	; 0x38

	fs->csize = b = fs->win[BPB_SecPerClus];			/* Number of sectors per cluster */
   2bce6:	231f      	movs	r3, #31
   2bce8:	18fb      	adds	r3, r7, r3
   2bcea:	6aba      	ldr	r2, [r7, #40]	; 0x28
   2bcec:	213d      	movs	r1, #61	; 0x3d
   2bcee:	5c52      	ldrb	r2, [r2, r1]
   2bcf0:	701a      	strb	r2, [r3, #0]
   2bcf2:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2bcf4:	221f      	movs	r2, #31
   2bcf6:	18ba      	adds	r2, r7, r2
   2bcf8:	7812      	ldrb	r2, [r2, #0]
   2bcfa:	709a      	strb	r2, [r3, #2]
	if (!b || (b & (b - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
   2bcfc:	231f      	movs	r3, #31
   2bcfe:	18fb      	adds	r3, r7, r3
   2bd00:	781b      	ldrb	r3, [r3, #0]
   2bd02:	2b00      	cmp	r3, #0
   2bd04:	d008      	beq.n	2bd18 <chk_mounted+0x27c>
   2bd06:	231f      	movs	r3, #31
   2bd08:	18fb      	adds	r3, r7, r3
   2bd0a:	781b      	ldrb	r3, [r3, #0]
   2bd0c:	221f      	movs	r2, #31
   2bd0e:	18ba      	adds	r2, r7, r2
   2bd10:	7812      	ldrb	r2, [r2, #0]
   2bd12:	3a01      	subs	r2, #1
   2bd14:	4013      	ands	r3, r2
   2bd16:	d001      	beq.n	2bd1c <chk_mounted+0x280>
   2bd18:	230d      	movs	r3, #13
   2bd1a:	e193      	b.n	2c044 <chk_mounted+0x5a8>

	fs->n_rootdir = LD_WORD(fs->win+BPB_RootEntCnt);	/* Number of root directory entries */
   2bd1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2bd1e:	2242      	movs	r2, #66	; 0x42
   2bd20:	5c9b      	ldrb	r3, [r3, r2]
   2bd22:	021b      	lsls	r3, r3, #8
   2bd24:	b21a      	sxth	r2, r3
   2bd26:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2bd28:	2141      	movs	r1, #65	; 0x41
   2bd2a:	5c5b      	ldrb	r3, [r3, r1]
   2bd2c:	b21b      	sxth	r3, r3
   2bd2e:	4313      	orrs	r3, r2
   2bd30:	b21b      	sxth	r3, r3
   2bd32:	b29a      	uxth	r2, r3
   2bd34:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2bd36:	811a      	strh	r2, [r3, #8]
	if (fs->n_rootdir % (SS(fs) / SZ_DIR)) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be sector aligned) */
   2bd38:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2bd3a:	891b      	ldrh	r3, [r3, #8]
   2bd3c:	220f      	movs	r2, #15
   2bd3e:	4013      	ands	r3, r2
   2bd40:	b29b      	uxth	r3, r3
   2bd42:	2b00      	cmp	r3, #0
   2bd44:	d001      	beq.n	2bd4a <chk_mounted+0x2ae>
   2bd46:	230d      	movs	r3, #13
   2bd48:	e17c      	b.n	2c044 <chk_mounted+0x5a8>

	tsect = LD_WORD(fs->win+BPB_TotSec16);				/* Number of sectors on the volume */
   2bd4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2bd4c:	2244      	movs	r2, #68	; 0x44
   2bd4e:	5c9b      	ldrb	r3, [r3, r2]
   2bd50:	021b      	lsls	r3, r3, #8
   2bd52:	b21a      	sxth	r2, r3
   2bd54:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2bd56:	2143      	movs	r1, #67	; 0x43
   2bd58:	5c5b      	ldrb	r3, [r3, r1]
   2bd5a:	b21b      	sxth	r3, r3
   2bd5c:	4313      	orrs	r3, r2
   2bd5e:	b21b      	sxth	r3, r3
   2bd60:	b29b      	uxth	r3, r3
   2bd62:	637b      	str	r3, [r7, #52]	; 0x34
	if (!tsect) tsect = LD_DWORD(fs->win+BPB_TotSec32);
   2bd64:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   2bd66:	2b00      	cmp	r3, #0
   2bd68:	d112      	bne.n	2bd90 <chk_mounted+0x2f4>
   2bd6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2bd6c:	2253      	movs	r2, #83	; 0x53
   2bd6e:	5c9b      	ldrb	r3, [r3, r2]
   2bd70:	061a      	lsls	r2, r3, #24
   2bd72:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2bd74:	2152      	movs	r1, #82	; 0x52
   2bd76:	5c5b      	ldrb	r3, [r3, r1]
   2bd78:	041b      	lsls	r3, r3, #16
   2bd7a:	4313      	orrs	r3, r2
   2bd7c:	6aba      	ldr	r2, [r7, #40]	; 0x28
   2bd7e:	2151      	movs	r1, #81	; 0x51
   2bd80:	5c52      	ldrb	r2, [r2, r1]
   2bd82:	0212      	lsls	r2, r2, #8
   2bd84:	4313      	orrs	r3, r2
   2bd86:	6aba      	ldr	r2, [r7, #40]	; 0x28
   2bd88:	2150      	movs	r1, #80	; 0x50
   2bd8a:	5c52      	ldrb	r2, [r2, r1]
   2bd8c:	4313      	orrs	r3, r2
   2bd8e:	637b      	str	r3, [r7, #52]	; 0x34

	nrsv = LD_WORD(fs->win+BPB_RsvdSecCnt);				/* Number of reserved sectors */
   2bd90:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2bd92:	223f      	movs	r2, #63	; 0x3f
   2bd94:	5c9b      	ldrb	r3, [r3, r2]
   2bd96:	021b      	lsls	r3, r3, #8
   2bd98:	b21a      	sxth	r2, r3
   2bd9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2bd9c:	213e      	movs	r1, #62	; 0x3e
   2bd9e:	5c5b      	ldrb	r3, [r3, r1]
   2bda0:	b21b      	sxth	r3, r3
   2bda2:	4313      	orrs	r3, r2
   2bda4:	b21a      	sxth	r2, r3
   2bda6:	231c      	movs	r3, #28
   2bda8:	18fb      	adds	r3, r7, r3
   2bdaa:	801a      	strh	r2, [r3, #0]
	if (!nrsv) return FR_NO_FILESYSTEM;					/* (BPB_RsvdSecCnt must not be 0) */
   2bdac:	231c      	movs	r3, #28
   2bdae:	18fb      	adds	r3, r7, r3
   2bdb0:	881b      	ldrh	r3, [r3, #0]
   2bdb2:	2b00      	cmp	r3, #0
   2bdb4:	d101      	bne.n	2bdba <chk_mounted+0x31e>
   2bdb6:	230d      	movs	r3, #13
   2bdb8:	e144      	b.n	2c044 <chk_mounted+0x5a8>

	/* Determine the FAT sub type */
	sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZ_DIR);	/* RSV+FAT+DIR */
   2bdba:	231c      	movs	r3, #28
   2bdbc:	18fb      	adds	r3, r7, r3
   2bdbe:	881a      	ldrh	r2, [r3, #0]
   2bdc0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   2bdc2:	18d3      	adds	r3, r2, r3
   2bdc4:	6aba      	ldr	r2, [r7, #40]	; 0x28
   2bdc6:	8912      	ldrh	r2, [r2, #8]
   2bdc8:	0912      	lsrs	r2, r2, #4
   2bdca:	b292      	uxth	r2, r2
   2bdcc:	189b      	adds	r3, r3, r2
   2bdce:	61bb      	str	r3, [r7, #24]
	if (tsect < sysect) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
   2bdd0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
   2bdd2:	69bb      	ldr	r3, [r7, #24]
   2bdd4:	429a      	cmp	r2, r3
   2bdd6:	d201      	bcs.n	2bddc <chk_mounted+0x340>
   2bdd8:	230d      	movs	r3, #13
   2bdda:	e133      	b.n	2c044 <chk_mounted+0x5a8>
	nclst = (tsect - sysect) / fs->csize;				/* Number of clusters */
   2bddc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
   2bdde:	69bb      	ldr	r3, [r7, #24]
   2bde0:	1ad2      	subs	r2, r2, r3
   2bde2:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2bde4:	789b      	ldrb	r3, [r3, #2]
   2bde6:	0019      	movs	r1, r3
   2bde8:	4b08      	ldr	r3, [pc, #32]	; (2be0c <chk_mounted+0x370>)
   2bdea:	0010      	movs	r0, r2
   2bdec:	4798      	blx	r3
   2bdee:	0003      	movs	r3, r0
   2bdf0:	617b      	str	r3, [r7, #20]
	if (!nclst) return FR_NO_FILESYSTEM;				/* (Invalid volume size) */
   2bdf2:	697b      	ldr	r3, [r7, #20]
   2bdf4:	2b00      	cmp	r3, #0
   2bdf6:	d10b      	bne.n	2be10 <chk_mounted+0x374>
   2bdf8:	230d      	movs	r3, #13
   2bdfa:	e123      	b.n	2c044 <chk_mounted+0x5a8>
   2bdfc:	20003d94 	.word	0x20003d94
   2be00:	00029bf9 	.word	0x00029bf9
   2be04:	00029b75 	.word	0x00029b75
   2be08:	0002b9c9 	.word	0x0002b9c9
   2be0c:	000310ed 	.word	0x000310ed
	fmt = FS_FAT12;
   2be10:	2347      	movs	r3, #71	; 0x47
   2be12:	18fb      	adds	r3, r7, r3
   2be14:	2201      	movs	r2, #1
   2be16:	701a      	strb	r2, [r3, #0]
	if (nclst >= MIN_FAT16) fmt = FS_FAT16;
   2be18:	697b      	ldr	r3, [r7, #20]
   2be1a:	4a8c      	ldr	r2, [pc, #560]	; (2c04c <chk_mounted+0x5b0>)
   2be1c:	4293      	cmp	r3, r2
   2be1e:	d903      	bls.n	2be28 <chk_mounted+0x38c>
   2be20:	2347      	movs	r3, #71	; 0x47
   2be22:	18fb      	adds	r3, r7, r3
   2be24:	2202      	movs	r2, #2
   2be26:	701a      	strb	r2, [r3, #0]
	if (nclst >= MIN_FAT32) fmt = FS_FAT32;
   2be28:	697b      	ldr	r3, [r7, #20]
   2be2a:	4a89      	ldr	r2, [pc, #548]	; (2c050 <chk_mounted+0x5b4>)
   2be2c:	4293      	cmp	r3, r2
   2be2e:	d903      	bls.n	2be38 <chk_mounted+0x39c>
   2be30:	2347      	movs	r3, #71	; 0x47
   2be32:	18fb      	adds	r3, r7, r3
   2be34:	2203      	movs	r2, #3
   2be36:	701a      	strb	r2, [r3, #0]

	/* Boundaries and Limits */
	fs->n_fatent = nclst + 2;							/* Number of FAT entries */
   2be38:	697b      	ldr	r3, [r7, #20]
   2be3a:	1c9a      	adds	r2, r3, #2
   2be3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2be3e:	619a      	str	r2, [r3, #24]
	fs->database = bsect + sysect;						/* Data start sector */
   2be40:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
   2be42:	69bb      	ldr	r3, [r7, #24]
   2be44:	18d2      	adds	r2, r2, r3
   2be46:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2be48:	629a      	str	r2, [r3, #40]	; 0x28
	fs->fatbase = bsect + nrsv; 						/* FAT start sector */
   2be4a:	231c      	movs	r3, #28
   2be4c:	18fb      	adds	r3, r7, r3
   2be4e:	881a      	ldrh	r2, [r3, #0]
   2be50:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   2be52:	18d2      	adds	r2, r2, r3
   2be54:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2be56:	621a      	str	r2, [r3, #32]
	if (fmt == FS_FAT32) {
   2be58:	2347      	movs	r3, #71	; 0x47
   2be5a:	18fb      	adds	r3, r7, r3
   2be5c:	781b      	ldrb	r3, [r3, #0]
   2be5e:	2b03      	cmp	r3, #3
   2be60:	d11e      	bne.n	2bea0 <chk_mounted+0x404>
		if (fs->n_rootdir) return FR_NO_FILESYSTEM;		/* (BPB_RootEntCnt must be 0) */
   2be62:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2be64:	891b      	ldrh	r3, [r3, #8]
   2be66:	2b00      	cmp	r3, #0
   2be68:	d001      	beq.n	2be6e <chk_mounted+0x3d2>
   2be6a:	230d      	movs	r3, #13
   2be6c:	e0ea      	b.n	2c044 <chk_mounted+0x5a8>
		fs->dirbase = LD_DWORD(fs->win+BPB_RootClus);	/* Root directory start cluster */
   2be6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2be70:	225f      	movs	r2, #95	; 0x5f
   2be72:	5c9b      	ldrb	r3, [r3, r2]
   2be74:	061a      	lsls	r2, r3, #24
   2be76:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2be78:	215e      	movs	r1, #94	; 0x5e
   2be7a:	5c5b      	ldrb	r3, [r3, r1]
   2be7c:	041b      	lsls	r3, r3, #16
   2be7e:	4313      	orrs	r3, r2
   2be80:	6aba      	ldr	r2, [r7, #40]	; 0x28
   2be82:	215d      	movs	r1, #93	; 0x5d
   2be84:	5c52      	ldrb	r2, [r2, r1]
   2be86:	0212      	lsls	r2, r2, #8
   2be88:	4313      	orrs	r3, r2
   2be8a:	6aba      	ldr	r2, [r7, #40]	; 0x28
   2be8c:	215c      	movs	r1, #92	; 0x5c
   2be8e:	5c52      	ldrb	r2, [r2, r1]
   2be90:	431a      	orrs	r2, r3
   2be92:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2be94:	625a      	str	r2, [r3, #36]	; 0x24
		szbfat = fs->n_fatent * 4;						/* (Required FAT size) */
   2be96:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2be98:	699b      	ldr	r3, [r3, #24]
   2be9a:	009b      	lsls	r3, r3, #2
   2be9c:	633b      	str	r3, [r7, #48]	; 0x30
   2be9e:	e020      	b.n	2bee2 <chk_mounted+0x446>
	} else {
		if (!fs->n_rootdir)	return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must not be 0) */
   2bea0:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2bea2:	891b      	ldrh	r3, [r3, #8]
   2bea4:	2b00      	cmp	r3, #0
   2bea6:	d101      	bne.n	2beac <chk_mounted+0x410>
   2bea8:	230d      	movs	r3, #13
   2beaa:	e0cb      	b.n	2c044 <chk_mounted+0x5a8>
		fs->dirbase = fs->fatbase + fasize;				/* Root directory start sector */
   2beac:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2beae:	6a1a      	ldr	r2, [r3, #32]
   2beb0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   2beb2:	18d2      	adds	r2, r2, r3
   2beb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2beb6:	625a      	str	r2, [r3, #36]	; 0x24
		szbfat = (fmt == FS_FAT16) ?					/* (Required FAT size) */
			fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
   2beb8:	2347      	movs	r3, #71	; 0x47
   2beba:	18fb      	adds	r3, r7, r3
   2bebc:	781b      	ldrb	r3, [r3, #0]
   2bebe:	2b02      	cmp	r3, #2
   2bec0:	d103      	bne.n	2beca <chk_mounted+0x42e>
   2bec2:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2bec4:	699b      	ldr	r3, [r3, #24]
   2bec6:	005b      	lsls	r3, r3, #1
   2bec8:	e00a      	b.n	2bee0 <chk_mounted+0x444>
   2beca:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2becc:	699a      	ldr	r2, [r3, #24]
   2bece:	0013      	movs	r3, r2
   2bed0:	005b      	lsls	r3, r3, #1
   2bed2:	189b      	adds	r3, r3, r2
   2bed4:	085a      	lsrs	r2, r3, #1
   2bed6:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2bed8:	699b      	ldr	r3, [r3, #24]
   2beda:	2101      	movs	r1, #1
   2bedc:	400b      	ands	r3, r1
   2bede:	18d3      	adds	r3, r2, r3
		szbfat = (fmt == FS_FAT16) ?					/* (Required FAT size) */
   2bee0:	633b      	str	r3, [r7, #48]	; 0x30
	}
	if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs))	/* (BPB_FATSz must not be less than required) */
   2bee2:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2bee4:	69da      	ldr	r2, [r3, #28]
   2bee6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   2bee8:	495a      	ldr	r1, [pc, #360]	; (2c054 <chk_mounted+0x5b8>)
   2beea:	468c      	mov	ip, r1
   2beec:	4463      	add	r3, ip
   2beee:	0a5b      	lsrs	r3, r3, #9
   2bef0:	429a      	cmp	r2, r3
   2bef2:	d201      	bcs.n	2bef8 <chk_mounted+0x45c>
		return FR_NO_FILESYSTEM;
   2bef4:	230d      	movs	r3, #13
   2bef6:	e0a5      	b.n	2c044 <chk_mounted+0x5a8>

#if !_FS_READONLY
	/* Initialize cluster allocation information */
	fs->free_clust = 0xFFFFFFFF;
   2bef8:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2befa:	2201      	movs	r2, #1
   2befc:	4252      	negs	r2, r2
   2befe:	611a      	str	r2, [r3, #16]
	fs->last_clust = 0;
   2bf00:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2bf02:	2200      	movs	r2, #0
   2bf04:	60da      	str	r2, [r3, #12]

	/* Get fsinfo if available */
	if (fmt == FS_FAT32) {
   2bf06:	2347      	movs	r3, #71	; 0x47
   2bf08:	18fb      	adds	r3, r7, r3
   2bf0a:	781b      	ldrb	r3, [r3, #0]
   2bf0c:	2b03      	cmp	r3, #3
   2bf0e:	d000      	beq.n	2bf12 <chk_mounted+0x476>
   2bf10:	e082      	b.n	2c018 <chk_mounted+0x57c>
	 	fs->fsi_flag = 0;
   2bf12:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2bf14:	2200      	movs	r2, #0
   2bf16:	715a      	strb	r2, [r3, #5]
		fs->fsi_sector = bsect + LD_WORD(fs->win+BPB_FSInfo);
   2bf18:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2bf1a:	2261      	movs	r2, #97	; 0x61
   2bf1c:	5c9b      	ldrb	r3, [r3, r2]
   2bf1e:	021b      	lsls	r3, r3, #8
   2bf20:	b21a      	sxth	r2, r3
   2bf22:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2bf24:	2160      	movs	r1, #96	; 0x60
   2bf26:	5c5b      	ldrb	r3, [r3, r1]
   2bf28:	b21b      	sxth	r3, r3
   2bf2a:	4313      	orrs	r3, r2
   2bf2c:	b21b      	sxth	r3, r3
   2bf2e:	b29b      	uxth	r3, r3
   2bf30:	001a      	movs	r2, r3
   2bf32:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   2bf34:	18d2      	adds	r2, r2, r3
   2bf36:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2bf38:	615a      	str	r2, [r3, #20]
		if (disk_read(fs->drv, fs->win, fs->fsi_sector, 1) == RES_OK &&
   2bf3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2bf3c:	7858      	ldrb	r0, [r3, #1]
   2bf3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2bf40:	3330      	adds	r3, #48	; 0x30
   2bf42:	0019      	movs	r1, r3
   2bf44:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2bf46:	695a      	ldr	r2, [r3, #20]
   2bf48:	2301      	movs	r3, #1
   2bf4a:	4c43      	ldr	r4, [pc, #268]	; (2c058 <chk_mounted+0x5bc>)
   2bf4c:	47a0      	blx	r4
   2bf4e:	1e03      	subs	r3, r0, #0
   2bf50:	d162      	bne.n	2c018 <chk_mounted+0x57c>
			LD_WORD(fs->win+BS_55AA) == 0xAA55 &&
   2bf52:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2bf54:	4a41      	ldr	r2, [pc, #260]	; (2c05c <chk_mounted+0x5c0>)
   2bf56:	5c9b      	ldrb	r3, [r3, r2]
   2bf58:	021b      	lsls	r3, r3, #8
   2bf5a:	b21a      	sxth	r2, r3
   2bf5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2bf5e:	4940      	ldr	r1, [pc, #256]	; (2c060 <chk_mounted+0x5c4>)
   2bf60:	5c5b      	ldrb	r3, [r3, r1]
   2bf62:	b21b      	sxth	r3, r3
   2bf64:	4313      	orrs	r3, r2
   2bf66:	b21b      	sxth	r3, r3
		if (disk_read(fs->drv, fs->win, fs->fsi_sector, 1) == RES_OK &&
   2bf68:	4a3e      	ldr	r2, [pc, #248]	; (2c064 <chk_mounted+0x5c8>)
   2bf6a:	4293      	cmp	r3, r2
   2bf6c:	d154      	bne.n	2c018 <chk_mounted+0x57c>
			LD_DWORD(fs->win+FSI_LeadSig) == 0x41615252 &&
   2bf6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2bf70:	2233      	movs	r2, #51	; 0x33
   2bf72:	5c9b      	ldrb	r3, [r3, r2]
   2bf74:	061a      	lsls	r2, r3, #24
   2bf76:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2bf78:	2132      	movs	r1, #50	; 0x32
   2bf7a:	5c5b      	ldrb	r3, [r3, r1]
   2bf7c:	041b      	lsls	r3, r3, #16
   2bf7e:	4313      	orrs	r3, r2
   2bf80:	6aba      	ldr	r2, [r7, #40]	; 0x28
   2bf82:	2131      	movs	r1, #49	; 0x31
   2bf84:	5c52      	ldrb	r2, [r2, r1]
   2bf86:	0212      	lsls	r2, r2, #8
   2bf88:	4313      	orrs	r3, r2
   2bf8a:	6aba      	ldr	r2, [r7, #40]	; 0x28
   2bf8c:	2130      	movs	r1, #48	; 0x30
   2bf8e:	5c52      	ldrb	r2, [r2, r1]
   2bf90:	4313      	orrs	r3, r2
			LD_WORD(fs->win+BS_55AA) == 0xAA55 &&
   2bf92:	4a35      	ldr	r2, [pc, #212]	; (2c068 <chk_mounted+0x5cc>)
   2bf94:	4293      	cmp	r3, r2
   2bf96:	d13f      	bne.n	2c018 <chk_mounted+0x57c>
			LD_DWORD(fs->win+FSI_StrucSig) == 0x61417272) {
   2bf98:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2bf9a:	4a34      	ldr	r2, [pc, #208]	; (2c06c <chk_mounted+0x5d0>)
   2bf9c:	5c9b      	ldrb	r3, [r3, r2]
   2bf9e:	061a      	lsls	r2, r3, #24
   2bfa0:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2bfa2:	4933      	ldr	r1, [pc, #204]	; (2c070 <chk_mounted+0x5d4>)
   2bfa4:	5c5b      	ldrb	r3, [r3, r1]
   2bfa6:	041b      	lsls	r3, r3, #16
   2bfa8:	4313      	orrs	r3, r2
   2bfaa:	6aba      	ldr	r2, [r7, #40]	; 0x28
   2bfac:	4931      	ldr	r1, [pc, #196]	; (2c074 <chk_mounted+0x5d8>)
   2bfae:	5c52      	ldrb	r2, [r2, r1]
   2bfb0:	0212      	lsls	r2, r2, #8
   2bfb2:	4313      	orrs	r3, r2
   2bfb4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
   2bfb6:	2285      	movs	r2, #133	; 0x85
   2bfb8:	0092      	lsls	r2, r2, #2
   2bfba:	5c8a      	ldrb	r2, [r1, r2]
   2bfbc:	4313      	orrs	r3, r2
			LD_DWORD(fs->win+FSI_LeadSig) == 0x41615252 &&
   2bfbe:	4a2e      	ldr	r2, [pc, #184]	; (2c078 <chk_mounted+0x5dc>)
   2bfc0:	4293      	cmp	r3, r2
   2bfc2:	d129      	bne.n	2c018 <chk_mounted+0x57c>
				fs->last_clust = LD_DWORD(fs->win+FSI_Nxt_Free);
   2bfc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2bfc6:	4a2d      	ldr	r2, [pc, #180]	; (2c07c <chk_mounted+0x5e0>)
   2bfc8:	5c9b      	ldrb	r3, [r3, r2]
   2bfca:	061a      	lsls	r2, r3, #24
   2bfcc:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2bfce:	492c      	ldr	r1, [pc, #176]	; (2c080 <chk_mounted+0x5e4>)
   2bfd0:	5c5b      	ldrb	r3, [r3, r1]
   2bfd2:	041b      	lsls	r3, r3, #16
   2bfd4:	4313      	orrs	r3, r2
   2bfd6:	6aba      	ldr	r2, [r7, #40]	; 0x28
   2bfd8:	492a      	ldr	r1, [pc, #168]	; (2c084 <chk_mounted+0x5e8>)
   2bfda:	5c52      	ldrb	r2, [r2, r1]
   2bfdc:	0212      	lsls	r2, r2, #8
   2bfde:	4313      	orrs	r3, r2
   2bfe0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
   2bfe2:	2287      	movs	r2, #135	; 0x87
   2bfe4:	0092      	lsls	r2, r2, #2
   2bfe6:	5c8a      	ldrb	r2, [r1, r2]
   2bfe8:	431a      	orrs	r2, r3
   2bfea:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2bfec:	60da      	str	r2, [r3, #12]
				fs->free_clust = LD_DWORD(fs->win+FSI_Free_Count);
   2bfee:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2bff0:	4a25      	ldr	r2, [pc, #148]	; (2c088 <chk_mounted+0x5ec>)
   2bff2:	5c9b      	ldrb	r3, [r3, r2]
   2bff4:	061a      	lsls	r2, r3, #24
   2bff6:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2bff8:	4924      	ldr	r1, [pc, #144]	; (2c08c <chk_mounted+0x5f0>)
   2bffa:	5c5b      	ldrb	r3, [r3, r1]
   2bffc:	041b      	lsls	r3, r3, #16
   2bffe:	4313      	orrs	r3, r2
   2c000:	6aba      	ldr	r2, [r7, #40]	; 0x28
   2c002:	4923      	ldr	r1, [pc, #140]	; (2c090 <chk_mounted+0x5f4>)
   2c004:	5c52      	ldrb	r2, [r2, r1]
   2c006:	0212      	lsls	r2, r2, #8
   2c008:	4313      	orrs	r3, r2
   2c00a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
   2c00c:	2286      	movs	r2, #134	; 0x86
   2c00e:	0092      	lsls	r2, r2, #2
   2c010:	5c8a      	ldrb	r2, [r1, r2]
   2c012:	431a      	orrs	r2, r3
   2c014:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2c016:	611a      	str	r2, [r3, #16]
		}
	}
#endif
	fs->fs_type = fmt;		/* FAT sub-type */
   2c018:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2c01a:	2247      	movs	r2, #71	; 0x47
   2c01c:	18ba      	adds	r2, r7, r2
   2c01e:	7812      	ldrb	r2, [r2, #0]
   2c020:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
   2c022:	4b1c      	ldr	r3, [pc, #112]	; (2c094 <chk_mounted+0x5f8>)
   2c024:	881b      	ldrh	r3, [r3, #0]
   2c026:	3301      	adds	r3, #1
   2c028:	b29a      	uxth	r2, r3
   2c02a:	4b1a      	ldr	r3, [pc, #104]	; (2c094 <chk_mounted+0x5f8>)
   2c02c:	801a      	strh	r2, [r3, #0]
   2c02e:	4b19      	ldr	r3, [pc, #100]	; (2c094 <chk_mounted+0x5f8>)
   2c030:	881a      	ldrh	r2, [r3, #0]
   2c032:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2c034:	80da      	strh	r2, [r3, #6]
	fs->winsect = 0;		/* Invalidate sector cache */
   2c036:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2c038:	2200      	movs	r2, #0
   2c03a:	62da      	str	r2, [r3, #44]	; 0x2c
	fs->wflag = 0;
   2c03c:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2c03e:	2200      	movs	r2, #0
   2c040:	711a      	strb	r2, [r3, #4]
#endif
#if _FS_SHARE				/* Clear file lock semaphores */
	clear_lock(fs);
#endif

	return FR_OK;
   2c042:	2300      	movs	r3, #0
}
   2c044:	0018      	movs	r0, r3
   2c046:	46bd      	mov	sp, r7
   2c048:	b013      	add	sp, #76	; 0x4c
   2c04a:	bd90      	pop	{r4, r7, pc}
   2c04c:	00000ff5 	.word	0x00000ff5
   2c050:	0000fff5 	.word	0x0000fff5
   2c054:	000001ff 	.word	0x000001ff
   2c058:	00029c31 	.word	0x00029c31
   2c05c:	0000022f 	.word	0x0000022f
   2c060:	0000022e 	.word	0x0000022e
   2c064:	ffffaa55 	.word	0xffffaa55
   2c068:	41615252 	.word	0x41615252
   2c06c:	00000217 	.word	0x00000217
   2c070:	00000216 	.word	0x00000216
   2c074:	00000215 	.word	0x00000215
   2c078:	61417272 	.word	0x61417272
   2c07c:	0000021f 	.word	0x0000021f
   2c080:	0000021e 	.word	0x0000021e
   2c084:	0000021d 	.word	0x0000021d
   2c088:	0000021b 	.word	0x0000021b
   2c08c:	0000021a 	.word	0x0000021a
   2c090:	00000219 	.word	0x00000219
   2c094:	20003db4 	.word	0x20003db4

0002c098 <validate>:
static
FRESULT validate (	/* FR_OK(0): The object is valid, !=0: Invalid */
	FATFS *fs,		/* Pointer to the file system object */
	WORD id			/* Member id of the target object to be checked */
)
{
   2c098:	b580      	push	{r7, lr}
   2c09a:	b082      	sub	sp, #8
   2c09c:	af00      	add	r7, sp, #0
   2c09e:	6078      	str	r0, [r7, #4]
   2c0a0:	000a      	movs	r2, r1
   2c0a2:	1cbb      	adds	r3, r7, #2
   2c0a4:	801a      	strh	r2, [r3, #0]
	if (!fs || !fs->fs_type || fs->id != id)
   2c0a6:	687b      	ldr	r3, [r7, #4]
   2c0a8:	2b00      	cmp	r3, #0
   2c0aa:	d009      	beq.n	2c0c0 <validate+0x28>
   2c0ac:	687b      	ldr	r3, [r7, #4]
   2c0ae:	781b      	ldrb	r3, [r3, #0]
   2c0b0:	2b00      	cmp	r3, #0
   2c0b2:	d005      	beq.n	2c0c0 <validate+0x28>
   2c0b4:	687b      	ldr	r3, [r7, #4]
   2c0b6:	88db      	ldrh	r3, [r3, #6]
   2c0b8:	1cba      	adds	r2, r7, #2
   2c0ba:	8812      	ldrh	r2, [r2, #0]
   2c0bc:	429a      	cmp	r2, r3
   2c0be:	d001      	beq.n	2c0c4 <validate+0x2c>
		return FR_INVALID_OBJECT;
   2c0c0:	2309      	movs	r3, #9
   2c0c2:	e00c      	b.n	2c0de <validate+0x46>

	ENTER_FF(fs);		/* Lock file system */

	if (disk_status(fs->drv) & STA_NOINIT)
   2c0c4:	687b      	ldr	r3, [r7, #4]
   2c0c6:	785b      	ldrb	r3, [r3, #1]
   2c0c8:	0018      	movs	r0, r3
   2c0ca:	4b07      	ldr	r3, [pc, #28]	; (2c0e8 <validate+0x50>)
   2c0cc:	4798      	blx	r3
   2c0ce:	0003      	movs	r3, r0
   2c0d0:	001a      	movs	r2, r3
   2c0d2:	2301      	movs	r3, #1
   2c0d4:	4013      	ands	r3, r2
   2c0d6:	d001      	beq.n	2c0dc <validate+0x44>
		return FR_NOT_READY;
   2c0d8:	2303      	movs	r3, #3
   2c0da:	e000      	b.n	2c0de <validate+0x46>

	return FR_OK;
   2c0dc:	2300      	movs	r3, #0
}
   2c0de:	0018      	movs	r0, r3
   2c0e0:	46bd      	mov	sp, r7
   2c0e2:	b002      	add	sp, #8
   2c0e4:	bd80      	pop	{r7, pc}
   2c0e6:	46c0      	nop			; (mov r8, r8)
   2c0e8:	00029bf9 	.word	0x00029bf9

0002c0ec <f_mount>:

FRESULT f_mount (
	BYTE vol,		/* Logical drive number to be mounted/unmounted */
	FATFS *fs		/* Pointer to new file system object (NULL for unmount)*/
)
{
   2c0ec:	b580      	push	{r7, lr}
   2c0ee:	b084      	sub	sp, #16
   2c0f0:	af00      	add	r7, sp, #0
   2c0f2:	0002      	movs	r2, r0
   2c0f4:	6039      	str	r1, [r7, #0]
   2c0f6:	1dfb      	adds	r3, r7, #7
   2c0f8:	701a      	strb	r2, [r3, #0]
	FATFS *rfs;


	if (vol >= _VOLUMES)		/* Check if the drive number is valid */
   2c0fa:	1dfb      	adds	r3, r7, #7
   2c0fc:	781b      	ldrb	r3, [r3, #0]
   2c0fe:	2b07      	cmp	r3, #7
   2c100:	d901      	bls.n	2c106 <f_mount+0x1a>
		return FR_INVALID_DRIVE;
   2c102:	230b      	movs	r3, #11
   2c104:	e018      	b.n	2c138 <f_mount+0x4c>
	rfs = FatFs[vol];			/* Get current fs object */
   2c106:	1dfb      	adds	r3, r7, #7
   2c108:	781a      	ldrb	r2, [r3, #0]
   2c10a:	4b0d      	ldr	r3, [pc, #52]	; (2c140 <f_mount+0x54>)
   2c10c:	0092      	lsls	r2, r2, #2
   2c10e:	58d3      	ldr	r3, [r2, r3]
   2c110:	60fb      	str	r3, [r7, #12]

	if (rfs) {
   2c112:	68fb      	ldr	r3, [r7, #12]
   2c114:	2b00      	cmp	r3, #0
   2c116:	d002      	beq.n	2c11e <f_mount+0x32>
		clear_lock(rfs);
#endif
#if _FS_REENTRANT				/* Discard sync object of the current volume */
		if (!ff_del_syncobj(rfs->sobj)) return FR_INT_ERR;
#endif
		rfs->fs_type = 0;		/* Clear old fs object */
   2c118:	68fb      	ldr	r3, [r7, #12]
   2c11a:	2200      	movs	r2, #0
   2c11c:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
   2c11e:	683b      	ldr	r3, [r7, #0]
   2c120:	2b00      	cmp	r3, #0
   2c122:	d002      	beq.n	2c12a <f_mount+0x3e>
		fs->fs_type = 0;		/* Clear new fs object */
   2c124:	683b      	ldr	r3, [r7, #0]
   2c126:	2200      	movs	r2, #0
   2c128:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT				/* Create sync object for the new volume */
		if (!ff_cre_syncobj(vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;			/* Register new fs object */
   2c12a:	1dfb      	adds	r3, r7, #7
   2c12c:	781a      	ldrb	r2, [r3, #0]
   2c12e:	4b04      	ldr	r3, [pc, #16]	; (2c140 <f_mount+0x54>)
   2c130:	0092      	lsls	r2, r2, #2
   2c132:	6839      	ldr	r1, [r7, #0]
   2c134:	50d1      	str	r1, [r2, r3]

	return FR_OK;
   2c136:	2300      	movs	r3, #0
}
   2c138:	0018      	movs	r0, r3
   2c13a:	46bd      	mov	sp, r7
   2c13c:	b004      	add	sp, #16
   2c13e:	bd80      	pop	{r7, pc}
   2c140:	20003d94 	.word	0x20003d94

0002c144 <f_open>:
FRESULT f_open (
	FIL *fp,			/* Pointer to the blank file object */
	const TCHAR *path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
   2c144:	b590      	push	{r4, r7, lr}
   2c146:	4ce5      	ldr	r4, [pc, #916]	; (2c4dc <f_open+0x398>)
   2c148:	44a5      	add	sp, r4
   2c14a:	af00      	add	r7, sp, #0
   2c14c:	60f8      	str	r0, [r7, #12]
   2c14e:	60b9      	str	r1, [r7, #8]
   2c150:	4be3      	ldr	r3, [pc, #908]	; (2c4e0 <f_open+0x39c>)
   2c152:	2194      	movs	r1, #148	; 0x94
   2c154:	0089      	lsls	r1, r1, #2
   2c156:	468c      	mov	ip, r1
   2c158:	44bc      	add	ip, r7
   2c15a:	4463      	add	r3, ip
   2c15c:	701a      	strb	r2, [r3, #0]
	DIR dj;
	BYTE *dir;
	DEF_NAMEBUF;


	fp->fs = 0;			/* Clear file object */
   2c15e:	68fb      	ldr	r3, [r7, #12]
   2c160:	2200      	movs	r2, #0
   2c162:	601a      	str	r2, [r3, #0]

#if !_FS_READONLY
	mode &= FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW;
   2c164:	4bde      	ldr	r3, [pc, #888]	; (2c4e0 <f_open+0x39c>)
   2c166:	2294      	movs	r2, #148	; 0x94
   2c168:	0092      	lsls	r2, r2, #2
   2c16a:	4694      	mov	ip, r2
   2c16c:	44bc      	add	ip, r7
   2c16e:	4463      	add	r3, ip
   2c170:	4adb      	ldr	r2, [pc, #876]	; (2c4e0 <f_open+0x39c>)
   2c172:	2194      	movs	r1, #148	; 0x94
   2c174:	0089      	lsls	r1, r1, #2
   2c176:	468c      	mov	ip, r1
   2c178:	44bc      	add	ip, r7
   2c17a:	4462      	add	r2, ip
   2c17c:	7812      	ldrb	r2, [r2, #0]
   2c17e:	211f      	movs	r1, #31
   2c180:	400a      	ands	r2, r1
   2c182:	701a      	strb	r2, [r3, #0]
	res = chk_mounted(&path, &dj.fs, (BYTE)(mode & ~FA_READ));
   2c184:	4bd6      	ldr	r3, [pc, #856]	; (2c4e0 <f_open+0x39c>)
   2c186:	2294      	movs	r2, #148	; 0x94
   2c188:	0092      	lsls	r2, r2, #2
   2c18a:	4694      	mov	ip, r2
   2c18c:	44bc      	add	ip, r7
   2c18e:	4463      	add	r3, ip
   2c190:	781b      	ldrb	r3, [r3, #0]
   2c192:	2201      	movs	r2, #1
   2c194:	4393      	bics	r3, r2
   2c196:	b2da      	uxtb	r2, r3
   2c198:	4bd2      	ldr	r3, [pc, #840]	; (2c4e4 <f_open+0x3a0>)
   2c19a:	18fc      	adds	r4, r7, r3
   2c19c:	2387      	movs	r3, #135	; 0x87
   2c19e:	009b      	lsls	r3, r3, #2
   2c1a0:	18f9      	adds	r1, r7, r3
   2c1a2:	2308      	movs	r3, #8
   2c1a4:	18fb      	adds	r3, r7, r3
   2c1a6:	0018      	movs	r0, r3
   2c1a8:	4bcf      	ldr	r3, [pc, #828]	; (2c4e8 <f_open+0x3a4>)
   2c1aa:	4798      	blx	r3
   2c1ac:	0003      	movs	r3, r0
   2c1ae:	7023      	strb	r3, [r4, #0]
#else
	mode &= FA_READ;
	res = chk_mounted(&path, &dj.fs, 0);
#endif
	INIT_BUF(dj);
   2c1b0:	2387      	movs	r3, #135	; 0x87
   2c1b2:	009b      	lsls	r3, r3, #2
   2c1b4:	18fb      	adds	r3, r7, r3
   2c1b6:	2284      	movs	r2, #132	; 0x84
   2c1b8:	0092      	lsls	r2, r2, #2
   2c1ba:	18ba      	adds	r2, r7, r2
   2c1bc:	619a      	str	r2, [r3, #24]
   2c1be:	2387      	movs	r3, #135	; 0x87
   2c1c0:	009b      	lsls	r3, r3, #2
   2c1c2:	18fb      	adds	r3, r7, r3
   2c1c4:	2210      	movs	r2, #16
   2c1c6:	18ba      	adds	r2, r7, r2
   2c1c8:	61da      	str	r2, [r3, #28]
	if (res == FR_OK)
   2c1ca:	4bc6      	ldr	r3, [pc, #792]	; (2c4e4 <f_open+0x3a0>)
   2c1cc:	18fb      	adds	r3, r7, r3
   2c1ce:	781b      	ldrb	r3, [r3, #0]
   2c1d0:	2b00      	cmp	r3, #0
   2c1d2:	d10b      	bne.n	2c1ec <f_open+0xa8>
		res = follow_path(&dj, path);	/* Follow the file path */
   2c1d4:	68ba      	ldr	r2, [r7, #8]
   2c1d6:	4bc3      	ldr	r3, [pc, #780]	; (2c4e4 <f_open+0x3a0>)
   2c1d8:	18fc      	adds	r4, r7, r3
   2c1da:	2387      	movs	r3, #135	; 0x87
   2c1dc:	009b      	lsls	r3, r3, #2
   2c1de:	18fb      	adds	r3, r7, r3
   2c1e0:	0011      	movs	r1, r2
   2c1e2:	0018      	movs	r0, r3
   2c1e4:	4bc1      	ldr	r3, [pc, #772]	; (2c4ec <f_open+0x3a8>)
   2c1e6:	4798      	blx	r3
   2c1e8:	0003      	movs	r3, r0
   2c1ea:	7023      	strb	r3, [r4, #0]
	dir = dj.dir;
   2c1ec:	2387      	movs	r3, #135	; 0x87
   2c1ee:	009b      	lsls	r3, r3, #2
   2c1f0:	18fb      	adds	r3, r7, r3
   2c1f2:	695b      	ldr	r3, [r3, #20]
   2c1f4:	2292      	movs	r2, #146	; 0x92
   2c1f6:	0092      	lsls	r2, r2, #2
   2c1f8:	18ba      	adds	r2, r7, r2
   2c1fa:	6013      	str	r3, [r2, #0]

#if !_FS_READONLY	/* R/W configuration */
	if (res == FR_OK) {
   2c1fc:	4bb9      	ldr	r3, [pc, #740]	; (2c4e4 <f_open+0x3a0>)
   2c1fe:	18fb      	adds	r3, r7, r3
   2c200:	781b      	ldrb	r3, [r3, #0]
   2c202:	2b00      	cmp	r3, #0
   2c204:	d109      	bne.n	2c21a <f_open+0xd6>
		if (!dir)	/* Current dir itself */
   2c206:	2392      	movs	r3, #146	; 0x92
   2c208:	009b      	lsls	r3, r3, #2
   2c20a:	18fb      	adds	r3, r7, r3
   2c20c:	681b      	ldr	r3, [r3, #0]
   2c20e:	2b00      	cmp	r3, #0
   2c210:	d103      	bne.n	2c21a <f_open+0xd6>
			res = FR_INVALID_NAME;
   2c212:	4bb4      	ldr	r3, [pc, #720]	; (2c4e4 <f_open+0x3a0>)
   2c214:	18fb      	adds	r3, r7, r3
   2c216:	2206      	movs	r2, #6
   2c218:	701a      	strb	r2, [r3, #0]
		else
			res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
#endif
	}
	/* Create or Open a file */
	if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
   2c21a:	4bb1      	ldr	r3, [pc, #708]	; (2c4e0 <f_open+0x39c>)
   2c21c:	2294      	movs	r2, #148	; 0x94
   2c21e:	0092      	lsls	r2, r2, #2
   2c220:	4694      	mov	ip, r2
   2c222:	44bc      	add	ip, r7
   2c224:	4463      	add	r3, ip
   2c226:	781b      	ldrb	r3, [r3, #0]
   2c228:	221c      	movs	r2, #28
   2c22a:	4013      	ands	r3, r2
   2c22c:	d100      	bne.n	2c230 <f_open+0xec>
   2c22e:	e141      	b.n	2c4b4 <f_open+0x370>
		DWORD dw, cl;

		if (res != FR_OK) {					/* No file, create new */
   2c230:	4bac      	ldr	r3, [pc, #688]	; (2c4e4 <f_open+0x3a0>)
   2c232:	18fb      	adds	r3, r7, r3
   2c234:	781b      	ldrb	r3, [r3, #0]
   2c236:	2b00      	cmp	r3, #0
   2c238:	d027      	beq.n	2c28a <f_open+0x146>
			if (res == FR_NO_FILE)			/* There is no file to open, create a new entry */
   2c23a:	4baa      	ldr	r3, [pc, #680]	; (2c4e4 <f_open+0x3a0>)
   2c23c:	18fb      	adds	r3, r7, r3
   2c23e:	781b      	ldrb	r3, [r3, #0]
   2c240:	2b04      	cmp	r3, #4
   2c242:	d109      	bne.n	2c258 <f_open+0x114>
#if _FS_SHARE
				res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
#else
				res = dir_register(&dj);
   2c244:	4ba7      	ldr	r3, [pc, #668]	; (2c4e4 <f_open+0x3a0>)
   2c246:	18fc      	adds	r4, r7, r3
   2c248:	2387      	movs	r3, #135	; 0x87
   2c24a:	009b      	lsls	r3, r3, #2
   2c24c:	18fb      	adds	r3, r7, r3
   2c24e:	0018      	movs	r0, r3
   2c250:	4ba7      	ldr	r3, [pc, #668]	; (2c4f0 <f_open+0x3ac>)
   2c252:	4798      	blx	r3
   2c254:	0003      	movs	r3, r0
   2c256:	7023      	strb	r3, [r4, #0]
#endif
			mode |= FA_CREATE_ALWAYS;		/* File is created */
   2c258:	4ba1      	ldr	r3, [pc, #644]	; (2c4e0 <f_open+0x39c>)
   2c25a:	2294      	movs	r2, #148	; 0x94
   2c25c:	0092      	lsls	r2, r2, #2
   2c25e:	4694      	mov	ip, r2
   2c260:	44bc      	add	ip, r7
   2c262:	4463      	add	r3, ip
   2c264:	4a9e      	ldr	r2, [pc, #632]	; (2c4e0 <f_open+0x39c>)
   2c266:	2194      	movs	r1, #148	; 0x94
   2c268:	0089      	lsls	r1, r1, #2
   2c26a:	468c      	mov	ip, r1
   2c26c:	44bc      	add	ip, r7
   2c26e:	4462      	add	r2, ip
   2c270:	7812      	ldrb	r2, [r2, #0]
   2c272:	2108      	movs	r1, #8
   2c274:	430a      	orrs	r2, r1
   2c276:	701a      	strb	r2, [r3, #0]
			dir = dj.dir;					/* New entry */
   2c278:	2387      	movs	r3, #135	; 0x87
   2c27a:	009b      	lsls	r3, r3, #2
   2c27c:	18fb      	adds	r3, r7, r3
   2c27e:	695b      	ldr	r3, [r3, #20]
   2c280:	2292      	movs	r2, #146	; 0x92
   2c282:	0092      	lsls	r2, r2, #2
   2c284:	18ba      	adds	r2, r7, r2
   2c286:	6013      	str	r3, [r2, #0]
   2c288:	e01c      	b.n	2c2c4 <f_open+0x180>
		}
		else {								/* Any object is already existing */
			if (dir[DIR_Attr] & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
   2c28a:	2392      	movs	r3, #146	; 0x92
   2c28c:	009b      	lsls	r3, r3, #2
   2c28e:	18fb      	adds	r3, r7, r3
   2c290:	681b      	ldr	r3, [r3, #0]
   2c292:	330b      	adds	r3, #11
   2c294:	781b      	ldrb	r3, [r3, #0]
   2c296:	001a      	movs	r2, r3
   2c298:	2311      	movs	r3, #17
   2c29a:	4013      	ands	r3, r2
   2c29c:	d004      	beq.n	2c2a8 <f_open+0x164>
				res = FR_DENIED;
   2c29e:	4b91      	ldr	r3, [pc, #580]	; (2c4e4 <f_open+0x3a0>)
   2c2a0:	18fb      	adds	r3, r7, r3
   2c2a2:	2207      	movs	r2, #7
   2c2a4:	701a      	strb	r2, [r3, #0]
   2c2a6:	e00d      	b.n	2c2c4 <f_open+0x180>
			} else {
				if (mode & FA_CREATE_NEW)	/* Cannot create as new file */
   2c2a8:	4b8d      	ldr	r3, [pc, #564]	; (2c4e0 <f_open+0x39c>)
   2c2aa:	2294      	movs	r2, #148	; 0x94
   2c2ac:	0092      	lsls	r2, r2, #2
   2c2ae:	4694      	mov	ip, r2
   2c2b0:	44bc      	add	ip, r7
   2c2b2:	4463      	add	r3, ip
   2c2b4:	781b      	ldrb	r3, [r3, #0]
   2c2b6:	2204      	movs	r2, #4
   2c2b8:	4013      	ands	r3, r2
   2c2ba:	d003      	beq.n	2c2c4 <f_open+0x180>
					res = FR_EXIST;
   2c2bc:	4b89      	ldr	r3, [pc, #548]	; (2c4e4 <f_open+0x3a0>)
   2c2be:	18fb      	adds	r3, r7, r3
   2c2c0:	2208      	movs	r2, #8
   2c2c2:	701a      	strb	r2, [r3, #0]
			}
		}
		if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
   2c2c4:	4b87      	ldr	r3, [pc, #540]	; (2c4e4 <f_open+0x3a0>)
   2c2c6:	18fb      	adds	r3, r7, r3
   2c2c8:	781b      	ldrb	r3, [r3, #0]
   2c2ca:	2b00      	cmp	r3, #0
   2c2cc:	d000      	beq.n	2c2d0 <f_open+0x18c>
   2c2ce:	e12f      	b.n	2c530 <f_open+0x3ec>
   2c2d0:	4b83      	ldr	r3, [pc, #524]	; (2c4e0 <f_open+0x39c>)
   2c2d2:	2294      	movs	r2, #148	; 0x94
   2c2d4:	0092      	lsls	r2, r2, #2
   2c2d6:	4694      	mov	ip, r2
   2c2d8:	44bc      	add	ip, r7
   2c2da:	4463      	add	r3, ip
   2c2dc:	781b      	ldrb	r3, [r3, #0]
   2c2de:	2208      	movs	r2, #8
   2c2e0:	4013      	ands	r3, r2
   2c2e2:	d100      	bne.n	2c2e6 <f_open+0x1a2>
   2c2e4:	e124      	b.n	2c530 <f_open+0x3ec>
			dw = get_fattime();					/* Created time */
   2c2e6:	4b83      	ldr	r3, [pc, #524]	; (2c4f4 <f_open+0x3b0>)
   2c2e8:	4798      	blx	r3
   2c2ea:	0003      	movs	r3, r0
   2c2ec:	2291      	movs	r2, #145	; 0x91
   2c2ee:	0092      	lsls	r2, r2, #2
   2c2f0:	18ba      	adds	r2, r7, r2
   2c2f2:	6013      	str	r3, [r2, #0]
			ST_DWORD(dir+DIR_CrtTime, dw);
   2c2f4:	2392      	movs	r3, #146	; 0x92
   2c2f6:	009b      	lsls	r3, r3, #2
   2c2f8:	18fb      	adds	r3, r7, r3
   2c2fa:	681b      	ldr	r3, [r3, #0]
   2c2fc:	330e      	adds	r3, #14
   2c2fe:	2291      	movs	r2, #145	; 0x91
   2c300:	0092      	lsls	r2, r2, #2
   2c302:	18ba      	adds	r2, r7, r2
   2c304:	6812      	ldr	r2, [r2, #0]
   2c306:	b2d2      	uxtb	r2, r2
   2c308:	701a      	strb	r2, [r3, #0]
   2c30a:	2392      	movs	r3, #146	; 0x92
   2c30c:	009b      	lsls	r3, r3, #2
   2c30e:	18fb      	adds	r3, r7, r3
   2c310:	681b      	ldr	r3, [r3, #0]
   2c312:	330f      	adds	r3, #15
   2c314:	2291      	movs	r2, #145	; 0x91
   2c316:	0092      	lsls	r2, r2, #2
   2c318:	18ba      	adds	r2, r7, r2
   2c31a:	6812      	ldr	r2, [r2, #0]
   2c31c:	b292      	uxth	r2, r2
   2c31e:	0a12      	lsrs	r2, r2, #8
   2c320:	b292      	uxth	r2, r2
   2c322:	b2d2      	uxtb	r2, r2
   2c324:	701a      	strb	r2, [r3, #0]
   2c326:	2392      	movs	r3, #146	; 0x92
   2c328:	009b      	lsls	r3, r3, #2
   2c32a:	18fb      	adds	r3, r7, r3
   2c32c:	681b      	ldr	r3, [r3, #0]
   2c32e:	3310      	adds	r3, #16
   2c330:	2291      	movs	r2, #145	; 0x91
   2c332:	0092      	lsls	r2, r2, #2
   2c334:	18ba      	adds	r2, r7, r2
   2c336:	6812      	ldr	r2, [r2, #0]
   2c338:	0c12      	lsrs	r2, r2, #16
   2c33a:	b2d2      	uxtb	r2, r2
   2c33c:	701a      	strb	r2, [r3, #0]
   2c33e:	2392      	movs	r3, #146	; 0x92
   2c340:	009b      	lsls	r3, r3, #2
   2c342:	18fb      	adds	r3, r7, r3
   2c344:	681b      	ldr	r3, [r3, #0]
   2c346:	3311      	adds	r3, #17
   2c348:	2291      	movs	r2, #145	; 0x91
   2c34a:	0092      	lsls	r2, r2, #2
   2c34c:	18ba      	adds	r2, r7, r2
   2c34e:	6812      	ldr	r2, [r2, #0]
   2c350:	0e12      	lsrs	r2, r2, #24
   2c352:	b2d2      	uxtb	r2, r2
   2c354:	701a      	strb	r2, [r3, #0]
			dir[DIR_Attr] = 0;					/* Reset attribute */
   2c356:	2392      	movs	r3, #146	; 0x92
   2c358:	009b      	lsls	r3, r3, #2
   2c35a:	18fb      	adds	r3, r7, r3
   2c35c:	681b      	ldr	r3, [r3, #0]
   2c35e:	330b      	adds	r3, #11
   2c360:	2200      	movs	r2, #0
   2c362:	701a      	strb	r2, [r3, #0]
			ST_DWORD(dir+DIR_FileSize, 0);		/* size = 0 */
   2c364:	2392      	movs	r3, #146	; 0x92
   2c366:	009b      	lsls	r3, r3, #2
   2c368:	18fb      	adds	r3, r7, r3
   2c36a:	681b      	ldr	r3, [r3, #0]
   2c36c:	331c      	adds	r3, #28
   2c36e:	2200      	movs	r2, #0
   2c370:	701a      	strb	r2, [r3, #0]
   2c372:	2392      	movs	r3, #146	; 0x92
   2c374:	009b      	lsls	r3, r3, #2
   2c376:	18fb      	adds	r3, r7, r3
   2c378:	681b      	ldr	r3, [r3, #0]
   2c37a:	331d      	adds	r3, #29
   2c37c:	2200      	movs	r2, #0
   2c37e:	701a      	strb	r2, [r3, #0]
   2c380:	2392      	movs	r3, #146	; 0x92
   2c382:	009b      	lsls	r3, r3, #2
   2c384:	18fb      	adds	r3, r7, r3
   2c386:	681b      	ldr	r3, [r3, #0]
   2c388:	331e      	adds	r3, #30
   2c38a:	2200      	movs	r2, #0
   2c38c:	701a      	strb	r2, [r3, #0]
   2c38e:	2392      	movs	r3, #146	; 0x92
   2c390:	009b      	lsls	r3, r3, #2
   2c392:	18fb      	adds	r3, r7, r3
   2c394:	681b      	ldr	r3, [r3, #0]
   2c396:	331f      	adds	r3, #31
   2c398:	2200      	movs	r2, #0
   2c39a:	701a      	strb	r2, [r3, #0]
			cl = LD_CLUST(dir);					/* Get start cluster */
   2c39c:	2392      	movs	r3, #146	; 0x92
   2c39e:	009b      	lsls	r3, r3, #2
   2c3a0:	18fb      	adds	r3, r7, r3
   2c3a2:	681b      	ldr	r3, [r3, #0]
   2c3a4:	3315      	adds	r3, #21
   2c3a6:	781b      	ldrb	r3, [r3, #0]
   2c3a8:	021b      	lsls	r3, r3, #8
   2c3aa:	b21a      	sxth	r2, r3
   2c3ac:	2392      	movs	r3, #146	; 0x92
   2c3ae:	009b      	lsls	r3, r3, #2
   2c3b0:	18fb      	adds	r3, r7, r3
   2c3b2:	681b      	ldr	r3, [r3, #0]
   2c3b4:	3314      	adds	r3, #20
   2c3b6:	781b      	ldrb	r3, [r3, #0]
   2c3b8:	b21b      	sxth	r3, r3
   2c3ba:	4313      	orrs	r3, r2
   2c3bc:	b21b      	sxth	r3, r3
   2c3be:	b29b      	uxth	r3, r3
   2c3c0:	041b      	lsls	r3, r3, #16
   2c3c2:	2292      	movs	r2, #146	; 0x92
   2c3c4:	0092      	lsls	r2, r2, #2
   2c3c6:	18ba      	adds	r2, r7, r2
   2c3c8:	6812      	ldr	r2, [r2, #0]
   2c3ca:	321b      	adds	r2, #27
   2c3cc:	7812      	ldrb	r2, [r2, #0]
   2c3ce:	0212      	lsls	r2, r2, #8
   2c3d0:	b211      	sxth	r1, r2
   2c3d2:	2292      	movs	r2, #146	; 0x92
   2c3d4:	0092      	lsls	r2, r2, #2
   2c3d6:	18ba      	adds	r2, r7, r2
   2c3d8:	6812      	ldr	r2, [r2, #0]
   2c3da:	321a      	adds	r2, #26
   2c3dc:	7812      	ldrb	r2, [r2, #0]
   2c3de:	b212      	sxth	r2, r2
   2c3e0:	430a      	orrs	r2, r1
   2c3e2:	b212      	sxth	r2, r2
   2c3e4:	b292      	uxth	r2, r2
   2c3e6:	4313      	orrs	r3, r2
   2c3e8:	2290      	movs	r2, #144	; 0x90
   2c3ea:	0092      	lsls	r2, r2, #2
   2c3ec:	18ba      	adds	r2, r7, r2
   2c3ee:	6013      	str	r3, [r2, #0]
			ST_CLUST(dir, 0);					/* cluster = 0 */
   2c3f0:	2392      	movs	r3, #146	; 0x92
   2c3f2:	009b      	lsls	r3, r3, #2
   2c3f4:	18fb      	adds	r3, r7, r3
   2c3f6:	681b      	ldr	r3, [r3, #0]
   2c3f8:	331a      	adds	r3, #26
   2c3fa:	2200      	movs	r2, #0
   2c3fc:	701a      	strb	r2, [r3, #0]
   2c3fe:	2392      	movs	r3, #146	; 0x92
   2c400:	009b      	lsls	r3, r3, #2
   2c402:	18fb      	adds	r3, r7, r3
   2c404:	681b      	ldr	r3, [r3, #0]
   2c406:	331b      	adds	r3, #27
   2c408:	2200      	movs	r2, #0
   2c40a:	701a      	strb	r2, [r3, #0]
   2c40c:	2392      	movs	r3, #146	; 0x92
   2c40e:	009b      	lsls	r3, r3, #2
   2c410:	18fb      	adds	r3, r7, r3
   2c412:	681b      	ldr	r3, [r3, #0]
   2c414:	3314      	adds	r3, #20
   2c416:	2200      	movs	r2, #0
   2c418:	701a      	strb	r2, [r3, #0]
   2c41a:	2392      	movs	r3, #146	; 0x92
   2c41c:	009b      	lsls	r3, r3, #2
   2c41e:	18fb      	adds	r3, r7, r3
   2c420:	681b      	ldr	r3, [r3, #0]
   2c422:	3315      	adds	r3, #21
   2c424:	2200      	movs	r2, #0
   2c426:	701a      	strb	r2, [r3, #0]
			dj.fs->wflag = 1;
   2c428:	2387      	movs	r3, #135	; 0x87
   2c42a:	009b      	lsls	r3, r3, #2
   2c42c:	18fb      	adds	r3, r7, r3
   2c42e:	681b      	ldr	r3, [r3, #0]
   2c430:	2201      	movs	r2, #1
   2c432:	711a      	strb	r2, [r3, #4]
			if (cl) {							/* Remove the cluster chain if exist */
   2c434:	2390      	movs	r3, #144	; 0x90
   2c436:	009b      	lsls	r3, r3, #2
   2c438:	18fb      	adds	r3, r7, r3
   2c43a:	681b      	ldr	r3, [r3, #0]
   2c43c:	2b00      	cmp	r3, #0
   2c43e:	d100      	bne.n	2c442 <f_open+0x2fe>
   2c440:	e076      	b.n	2c530 <f_open+0x3ec>
				dw = dj.fs->winsect;
   2c442:	2387      	movs	r3, #135	; 0x87
   2c444:	009b      	lsls	r3, r3, #2
   2c446:	18fb      	adds	r3, r7, r3
   2c448:	681b      	ldr	r3, [r3, #0]
   2c44a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   2c44c:	2291      	movs	r2, #145	; 0x91
   2c44e:	0092      	lsls	r2, r2, #2
   2c450:	18ba      	adds	r2, r7, r2
   2c452:	6013      	str	r3, [r2, #0]
				res = remove_chain(dj.fs, cl);
   2c454:	2387      	movs	r3, #135	; 0x87
   2c456:	009b      	lsls	r3, r3, #2
   2c458:	18fb      	adds	r3, r7, r3
   2c45a:	681b      	ldr	r3, [r3, #0]
   2c45c:	4a21      	ldr	r2, [pc, #132]	; (2c4e4 <f_open+0x3a0>)
   2c45e:	18bc      	adds	r4, r7, r2
   2c460:	2290      	movs	r2, #144	; 0x90
   2c462:	0092      	lsls	r2, r2, #2
   2c464:	18ba      	adds	r2, r7, r2
   2c466:	6812      	ldr	r2, [r2, #0]
   2c468:	0011      	movs	r1, r2
   2c46a:	0018      	movs	r0, r3
   2c46c:	4b22      	ldr	r3, [pc, #136]	; (2c4f8 <f_open+0x3b4>)
   2c46e:	4798      	blx	r3
   2c470:	0003      	movs	r3, r0
   2c472:	7023      	strb	r3, [r4, #0]
				if (res == FR_OK) {
   2c474:	4b1b      	ldr	r3, [pc, #108]	; (2c4e4 <f_open+0x3a0>)
   2c476:	18fb      	adds	r3, r7, r3
   2c478:	781b      	ldrb	r3, [r3, #0]
   2c47a:	2b00      	cmp	r3, #0
   2c47c:	d158      	bne.n	2c530 <f_open+0x3ec>
					dj.fs->last_clust = cl - 1;	/* Reuse the cluster hole */
   2c47e:	2387      	movs	r3, #135	; 0x87
   2c480:	009b      	lsls	r3, r3, #2
   2c482:	18fb      	adds	r3, r7, r3
   2c484:	681b      	ldr	r3, [r3, #0]
   2c486:	2290      	movs	r2, #144	; 0x90
   2c488:	0092      	lsls	r2, r2, #2
   2c48a:	18ba      	adds	r2, r7, r2
   2c48c:	6812      	ldr	r2, [r2, #0]
   2c48e:	3a01      	subs	r2, #1
   2c490:	60da      	str	r2, [r3, #12]
					res = move_window(dj.fs, dw);
   2c492:	2387      	movs	r3, #135	; 0x87
   2c494:	009b      	lsls	r3, r3, #2
   2c496:	18fb      	adds	r3, r7, r3
   2c498:	681b      	ldr	r3, [r3, #0]
   2c49a:	4a12      	ldr	r2, [pc, #72]	; (2c4e4 <f_open+0x3a0>)
   2c49c:	18bc      	adds	r4, r7, r2
   2c49e:	2291      	movs	r2, #145	; 0x91
   2c4a0:	0092      	lsls	r2, r2, #2
   2c4a2:	18ba      	adds	r2, r7, r2
   2c4a4:	6812      	ldr	r2, [r2, #0]
   2c4a6:	0011      	movs	r1, r2
   2c4a8:	0018      	movs	r0, r3
   2c4aa:	4b14      	ldr	r3, [pc, #80]	; (2c4fc <f_open+0x3b8>)
   2c4ac:	4798      	blx	r3
   2c4ae:	0003      	movs	r3, r0
   2c4b0:	7023      	strb	r3, [r4, #0]
   2c4b2:	e03d      	b.n	2c530 <f_open+0x3ec>
				}
			}
		}
	}
	else {	/* Open an existing file */
		if (res == FR_OK) {						/* Follow succeeded */
   2c4b4:	4b0b      	ldr	r3, [pc, #44]	; (2c4e4 <f_open+0x3a0>)
   2c4b6:	18fb      	adds	r3, r7, r3
   2c4b8:	781b      	ldrb	r3, [r3, #0]
   2c4ba:	2b00      	cmp	r3, #0
   2c4bc:	d138      	bne.n	2c530 <f_open+0x3ec>
			if (dir[DIR_Attr] & AM_DIR) {		/* It is a directory */
   2c4be:	2392      	movs	r3, #146	; 0x92
   2c4c0:	009b      	lsls	r3, r3, #2
   2c4c2:	18fb      	adds	r3, r7, r3
   2c4c4:	681b      	ldr	r3, [r3, #0]
   2c4c6:	330b      	adds	r3, #11
   2c4c8:	781b      	ldrb	r3, [r3, #0]
   2c4ca:	001a      	movs	r2, r3
   2c4cc:	2310      	movs	r3, #16
   2c4ce:	4013      	ands	r3, r2
   2c4d0:	d016      	beq.n	2c500 <f_open+0x3bc>
				res = FR_NO_FILE;
   2c4d2:	4b04      	ldr	r3, [pc, #16]	; (2c4e4 <f_open+0x3a0>)
   2c4d4:	18fb      	adds	r3, r7, r3
   2c4d6:	2204      	movs	r2, #4
   2c4d8:	701a      	strb	r2, [r3, #0]
   2c4da:	e029      	b.n	2c530 <f_open+0x3ec>
   2c4dc:	fffffdac 	.word	0xfffffdac
   2c4e0:	fffffdb7 	.word	0xfffffdb7
   2c4e4:	0000024f 	.word	0x0000024f
   2c4e8:	0002ba9d 	.word	0x0002ba9d
   2c4ec:	0002b891 	.word	0x0002b891
   2c4f0:	0002b0e1 	.word	0x0002b0e1
   2c4f4:	00029ed9 	.word	0x00029ed9
   2c4f8:	0002a65d 	.word	0x0002a65d
   2c4fc:	0002a01d 	.word	0x0002a01d
			} else {
				if ((mode & FA_WRITE) && (dir[DIR_Attr] & AM_RDO)) /* R/O violation */
   2c500:	4b5a      	ldr	r3, [pc, #360]	; (2c66c <f_open+0x528>)
   2c502:	2294      	movs	r2, #148	; 0x94
   2c504:	0092      	lsls	r2, r2, #2
   2c506:	4694      	mov	ip, r2
   2c508:	44bc      	add	ip, r7
   2c50a:	4463      	add	r3, ip
   2c50c:	781b      	ldrb	r3, [r3, #0]
   2c50e:	2202      	movs	r2, #2
   2c510:	4013      	ands	r3, r2
   2c512:	d00d      	beq.n	2c530 <f_open+0x3ec>
   2c514:	2392      	movs	r3, #146	; 0x92
   2c516:	009b      	lsls	r3, r3, #2
   2c518:	18fb      	adds	r3, r7, r3
   2c51a:	681b      	ldr	r3, [r3, #0]
   2c51c:	330b      	adds	r3, #11
   2c51e:	781b      	ldrb	r3, [r3, #0]
   2c520:	001a      	movs	r2, r3
   2c522:	2301      	movs	r3, #1
   2c524:	4013      	ands	r3, r2
   2c526:	d003      	beq.n	2c530 <f_open+0x3ec>
					res = FR_DENIED;
   2c528:	4b51      	ldr	r3, [pc, #324]	; (2c670 <f_open+0x52c>)
   2c52a:	18fb      	adds	r3, r7, r3
   2c52c:	2207      	movs	r2, #7
   2c52e:	701a      	strb	r2, [r3, #0]
			}
		}
	}
	if (res == FR_OK) {
   2c530:	4b4f      	ldr	r3, [pc, #316]	; (2c670 <f_open+0x52c>)
   2c532:	18fb      	adds	r3, r7, r3
   2c534:	781b      	ldrb	r3, [r3, #0]
   2c536:	2b00      	cmp	r3, #0
   2c538:	d126      	bne.n	2c588 <f_open+0x444>
		if (mode & FA_CREATE_ALWAYS)			/* Set file change flag if created or overwritten */
   2c53a:	4b4c      	ldr	r3, [pc, #304]	; (2c66c <f_open+0x528>)
   2c53c:	2294      	movs	r2, #148	; 0x94
   2c53e:	0092      	lsls	r2, r2, #2
   2c540:	4694      	mov	ip, r2
   2c542:	44bc      	add	ip, r7
   2c544:	4463      	add	r3, ip
   2c546:	781b      	ldrb	r3, [r3, #0]
   2c548:	2208      	movs	r2, #8
   2c54a:	4013      	ands	r3, r2
   2c54c:	d00f      	beq.n	2c56e <f_open+0x42a>
			mode |= FA__WRITTEN;
   2c54e:	4b47      	ldr	r3, [pc, #284]	; (2c66c <f_open+0x528>)
   2c550:	2294      	movs	r2, #148	; 0x94
   2c552:	0092      	lsls	r2, r2, #2
   2c554:	4694      	mov	ip, r2
   2c556:	44bc      	add	ip, r7
   2c558:	4463      	add	r3, ip
   2c55a:	4a44      	ldr	r2, [pc, #272]	; (2c66c <f_open+0x528>)
   2c55c:	2194      	movs	r1, #148	; 0x94
   2c55e:	0089      	lsls	r1, r1, #2
   2c560:	468c      	mov	ip, r1
   2c562:	44bc      	add	ip, r7
   2c564:	4462      	add	r2, ip
   2c566:	7812      	ldrb	r2, [r2, #0]
   2c568:	2120      	movs	r1, #32
   2c56a:	430a      	orrs	r2, r1
   2c56c:	701a      	strb	r2, [r3, #0]
		fp->dir_sect = dj.fs->winsect;			/* Pointer to the directory entry */
   2c56e:	2387      	movs	r3, #135	; 0x87
   2c570:	009b      	lsls	r3, r3, #2
   2c572:	18fb      	adds	r3, r7, r3
   2c574:	681b      	ldr	r3, [r3, #0]
   2c576:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   2c578:	68fb      	ldr	r3, [r7, #12]
   2c57a:	61da      	str	r2, [r3, #28]
		fp->dir_ptr = dir;
   2c57c:	68fb      	ldr	r3, [r7, #12]
   2c57e:	2292      	movs	r2, #146	; 0x92
   2c580:	0092      	lsls	r2, r2, #2
   2c582:	18ba      	adds	r2, r7, r2
   2c584:	6812      	ldr	r2, [r2, #0]
   2c586:	621a      	str	r2, [r3, #32]
		}
	}
#endif
	FREE_BUF();

	if (res == FR_OK) {
   2c588:	4b39      	ldr	r3, [pc, #228]	; (2c670 <f_open+0x52c>)
   2c58a:	18fb      	adds	r3, r7, r3
   2c58c:	781b      	ldrb	r3, [r3, #0]
   2c58e:	2b00      	cmp	r3, #0
   2c590:	d163      	bne.n	2c65a <f_open+0x516>
		fp->flag = mode;					/* File access mode */
   2c592:	68fb      	ldr	r3, [r7, #12]
   2c594:	4a35      	ldr	r2, [pc, #212]	; (2c66c <f_open+0x528>)
   2c596:	2194      	movs	r1, #148	; 0x94
   2c598:	0089      	lsls	r1, r1, #2
   2c59a:	468c      	mov	ip, r1
   2c59c:	44bc      	add	ip, r7
   2c59e:	4462      	add	r2, ip
   2c5a0:	7812      	ldrb	r2, [r2, #0]
   2c5a2:	719a      	strb	r2, [r3, #6]
		fp->sclust = LD_CLUST(dir);			/* File start cluster */
   2c5a4:	2392      	movs	r3, #146	; 0x92
   2c5a6:	009b      	lsls	r3, r3, #2
   2c5a8:	18fb      	adds	r3, r7, r3
   2c5aa:	681b      	ldr	r3, [r3, #0]
   2c5ac:	3315      	adds	r3, #21
   2c5ae:	781b      	ldrb	r3, [r3, #0]
   2c5b0:	021b      	lsls	r3, r3, #8
   2c5b2:	b21a      	sxth	r2, r3
   2c5b4:	2392      	movs	r3, #146	; 0x92
   2c5b6:	009b      	lsls	r3, r3, #2
   2c5b8:	18fb      	adds	r3, r7, r3
   2c5ba:	681b      	ldr	r3, [r3, #0]
   2c5bc:	3314      	adds	r3, #20
   2c5be:	781b      	ldrb	r3, [r3, #0]
   2c5c0:	b21b      	sxth	r3, r3
   2c5c2:	4313      	orrs	r3, r2
   2c5c4:	b21b      	sxth	r3, r3
   2c5c6:	b29b      	uxth	r3, r3
   2c5c8:	041b      	lsls	r3, r3, #16
   2c5ca:	2292      	movs	r2, #146	; 0x92
   2c5cc:	0092      	lsls	r2, r2, #2
   2c5ce:	18ba      	adds	r2, r7, r2
   2c5d0:	6812      	ldr	r2, [r2, #0]
   2c5d2:	321b      	adds	r2, #27
   2c5d4:	7812      	ldrb	r2, [r2, #0]
   2c5d6:	0212      	lsls	r2, r2, #8
   2c5d8:	b211      	sxth	r1, r2
   2c5da:	2292      	movs	r2, #146	; 0x92
   2c5dc:	0092      	lsls	r2, r2, #2
   2c5de:	18ba      	adds	r2, r7, r2
   2c5e0:	6812      	ldr	r2, [r2, #0]
   2c5e2:	321a      	adds	r2, #26
   2c5e4:	7812      	ldrb	r2, [r2, #0]
   2c5e6:	b212      	sxth	r2, r2
   2c5e8:	430a      	orrs	r2, r1
   2c5ea:	b212      	sxth	r2, r2
   2c5ec:	b292      	uxth	r2, r2
   2c5ee:	431a      	orrs	r2, r3
   2c5f0:	68fb      	ldr	r3, [r7, #12]
   2c5f2:	611a      	str	r2, [r3, #16]
		fp->fsize = LD_DWORD(dir+DIR_FileSize);	/* File size */
   2c5f4:	2392      	movs	r3, #146	; 0x92
   2c5f6:	009b      	lsls	r3, r3, #2
   2c5f8:	18fb      	adds	r3, r7, r3
   2c5fa:	681b      	ldr	r3, [r3, #0]
   2c5fc:	331f      	adds	r3, #31
   2c5fe:	781b      	ldrb	r3, [r3, #0]
   2c600:	061a      	lsls	r2, r3, #24
   2c602:	2392      	movs	r3, #146	; 0x92
   2c604:	009b      	lsls	r3, r3, #2
   2c606:	18fb      	adds	r3, r7, r3
   2c608:	681b      	ldr	r3, [r3, #0]
   2c60a:	331e      	adds	r3, #30
   2c60c:	781b      	ldrb	r3, [r3, #0]
   2c60e:	041b      	lsls	r3, r3, #16
   2c610:	4313      	orrs	r3, r2
   2c612:	2292      	movs	r2, #146	; 0x92
   2c614:	0092      	lsls	r2, r2, #2
   2c616:	18ba      	adds	r2, r7, r2
   2c618:	6812      	ldr	r2, [r2, #0]
   2c61a:	321d      	adds	r2, #29
   2c61c:	7812      	ldrb	r2, [r2, #0]
   2c61e:	0212      	lsls	r2, r2, #8
   2c620:	4313      	orrs	r3, r2
   2c622:	2292      	movs	r2, #146	; 0x92
   2c624:	0092      	lsls	r2, r2, #2
   2c626:	18ba      	adds	r2, r7, r2
   2c628:	6812      	ldr	r2, [r2, #0]
   2c62a:	321c      	adds	r2, #28
   2c62c:	7812      	ldrb	r2, [r2, #0]
   2c62e:	431a      	orrs	r2, r3
   2c630:	68fb      	ldr	r3, [r7, #12]
   2c632:	60da      	str	r2, [r3, #12]
		fp->fptr = 0;						/* File pointer */
   2c634:	68fb      	ldr	r3, [r7, #12]
   2c636:	2200      	movs	r2, #0
   2c638:	609a      	str	r2, [r3, #8]
		fp->dsect = 0;
   2c63a:	68fb      	ldr	r3, [r7, #12]
   2c63c:	2200      	movs	r2, #0
   2c63e:	619a      	str	r2, [r3, #24]
#if _USE_FASTSEEK
		fp->cltbl = 0;						/* Normal seek mode */
#endif
		fp->fs = dj.fs; fp->id = dj.fs->id;	/* Validate file object */
   2c640:	2387      	movs	r3, #135	; 0x87
   2c642:	009b      	lsls	r3, r3, #2
   2c644:	18fb      	adds	r3, r7, r3
   2c646:	681a      	ldr	r2, [r3, #0]
   2c648:	68fb      	ldr	r3, [r7, #12]
   2c64a:	601a      	str	r2, [r3, #0]
   2c64c:	2387      	movs	r3, #135	; 0x87
   2c64e:	009b      	lsls	r3, r3, #2
   2c650:	18fb      	adds	r3, r7, r3
   2c652:	681b      	ldr	r3, [r3, #0]
   2c654:	88da      	ldrh	r2, [r3, #6]
   2c656:	68fb      	ldr	r3, [r7, #12]
   2c658:	809a      	strh	r2, [r3, #4]
	}

	LEAVE_FF(dj.fs, res);
   2c65a:	4b05      	ldr	r3, [pc, #20]	; (2c670 <f_open+0x52c>)
   2c65c:	18fb      	adds	r3, r7, r3
   2c65e:	781b      	ldrb	r3, [r3, #0]
}
   2c660:	0018      	movs	r0, r3
   2c662:	46bd      	mov	sp, r7
   2c664:	2395      	movs	r3, #149	; 0x95
   2c666:	009b      	lsls	r3, r3, #2
   2c668:	449d      	add	sp, r3
   2c66a:	bd90      	pop	{r4, r7, pc}
   2c66c:	fffffdb7 	.word	0xfffffdb7
   2c670:	0000024f 	.word	0x0000024f

0002c674 <f_write>:
	FIL *fp,			/* Pointer to the file object */
	const void *buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT *bw			/* Pointer to number of bytes written */
)
{
   2c674:	b590      	push	{r4, r7, lr}
   2c676:	b08b      	sub	sp, #44	; 0x2c
   2c678:	af00      	add	r7, sp, #0
   2c67a:	60f8      	str	r0, [r7, #12]
   2c67c:	60b9      	str	r1, [r7, #8]
   2c67e:	607a      	str	r2, [r7, #4]
   2c680:	603b      	str	r3, [r7, #0]
	FRESULT res;
	DWORD clst, sect;
	UINT wcnt, cc;
	const BYTE *wbuff = buff;
   2c682:	68bb      	ldr	r3, [r7, #8]
   2c684:	61bb      	str	r3, [r7, #24]
	BYTE csect;


	*bw = 0;	/* Initialize byte counter */
   2c686:	683b      	ldr	r3, [r7, #0]
   2c688:	2200      	movs	r2, #0
   2c68a:	601a      	str	r2, [r3, #0]

	res = validate(fp->fs, fp->id);			/* Check validity */
   2c68c:	68fb      	ldr	r3, [r7, #12]
   2c68e:	681a      	ldr	r2, [r3, #0]
   2c690:	68fb      	ldr	r3, [r7, #12]
   2c692:	889b      	ldrh	r3, [r3, #4]
   2c694:	2117      	movs	r1, #23
   2c696:	187c      	adds	r4, r7, r1
   2c698:	0019      	movs	r1, r3
   2c69a:	0010      	movs	r0, r2
   2c69c:	4bc3      	ldr	r3, [pc, #780]	; (2c9ac <f_write+0x338>)
   2c69e:	4798      	blx	r3
   2c6a0:	0003      	movs	r3, r0
   2c6a2:	7023      	strb	r3, [r4, #0]
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
   2c6a4:	2317      	movs	r3, #23
   2c6a6:	18fb      	adds	r3, r7, r3
   2c6a8:	781b      	ldrb	r3, [r3, #0]
   2c6aa:	2b00      	cmp	r3, #0
   2c6ac:	d003      	beq.n	2c6b6 <f_write+0x42>
   2c6ae:	2317      	movs	r3, #23
   2c6b0:	18fb      	adds	r3, r7, r3
   2c6b2:	781b      	ldrb	r3, [r3, #0]
   2c6b4:	e176      	b.n	2c9a4 <f_write+0x330>
	if (fp->flag & FA__ERROR)				/* Aborted file? */
   2c6b6:	68fb      	ldr	r3, [r7, #12]
   2c6b8:	799b      	ldrb	r3, [r3, #6]
   2c6ba:	b25b      	sxtb	r3, r3
   2c6bc:	2b00      	cmp	r3, #0
   2c6be:	da01      	bge.n	2c6c4 <f_write+0x50>
		LEAVE_FF(fp->fs, FR_INT_ERR);
   2c6c0:	2302      	movs	r3, #2
   2c6c2:	e16f      	b.n	2c9a4 <f_write+0x330>
	if (!(fp->flag & FA_WRITE))				/* Check access mode */
   2c6c4:	68fb      	ldr	r3, [r7, #12]
   2c6c6:	799b      	ldrb	r3, [r3, #6]
   2c6c8:	001a      	movs	r2, r3
   2c6ca:	2302      	movs	r3, #2
   2c6cc:	4013      	ands	r3, r2
   2c6ce:	d101      	bne.n	2c6d4 <f_write+0x60>
		LEAVE_FF(fp->fs, FR_DENIED);
   2c6d0:	2307      	movs	r3, #7
   2c6d2:	e167      	b.n	2c9a4 <f_write+0x330>
	if ((DWORD)(fp->fsize + btw) < fp->fsize) btw = 0;	/* File size cannot reach 4GB */
   2c6d4:	68fb      	ldr	r3, [r7, #12]
   2c6d6:	68da      	ldr	r2, [r3, #12]
   2c6d8:	687b      	ldr	r3, [r7, #4]
   2c6da:	18d2      	adds	r2, r2, r3
   2c6dc:	68fb      	ldr	r3, [r7, #12]
   2c6de:	68db      	ldr	r3, [r3, #12]
   2c6e0:	429a      	cmp	r2, r3
   2c6e2:	d300      	bcc.n	2c6e6 <f_write+0x72>
   2c6e4:	e146      	b.n	2c974 <f_write+0x300>
   2c6e6:	2300      	movs	r3, #0
   2c6e8:	607b      	str	r3, [r7, #4]

	for ( ;  btw;							/* Repeat until all data written */
   2c6ea:	e143      	b.n	2c974 <f_write+0x300>
		wbuff += wcnt, fp->fptr += wcnt, *bw += wcnt, btw -= wcnt) {
		if ((fp->fptr % SS(fp->fs)) == 0) {	/* On the sector boundary? */
   2c6ec:	68fb      	ldr	r3, [r7, #12]
   2c6ee:	689b      	ldr	r3, [r3, #8]
   2c6f0:	05db      	lsls	r3, r3, #23
   2c6f2:	0ddb      	lsrs	r3, r3, #23
   2c6f4:	d000      	beq.n	2c6f8 <f_write+0x84>
   2c6f6:	e0f6      	b.n	2c8e6 <f_write+0x272>
			csect = (BYTE)(fp->fptr / SS(fp->fs) & (fp->fs->csize - 1));	/* Sector offset in the cluster */
   2c6f8:	68fb      	ldr	r3, [r7, #12]
   2c6fa:	689b      	ldr	r3, [r3, #8]
   2c6fc:	0a5b      	lsrs	r3, r3, #9
   2c6fe:	b2da      	uxtb	r2, r3
   2c700:	68fb      	ldr	r3, [r7, #12]
   2c702:	681b      	ldr	r3, [r3, #0]
   2c704:	789b      	ldrb	r3, [r3, #2]
   2c706:	3b01      	subs	r3, #1
   2c708:	b2d9      	uxtb	r1, r3
   2c70a:	2316      	movs	r3, #22
   2c70c:	18fb      	adds	r3, r7, r3
   2c70e:	400a      	ands	r2, r1
   2c710:	701a      	strb	r2, [r3, #0]
			if (!csect) {					/* On the cluster boundary? */
   2c712:	2316      	movs	r3, #22
   2c714:	18fb      	adds	r3, r7, r3
   2c716:	781b      	ldrb	r3, [r3, #0]
   2c718:	2b00      	cmp	r3, #0
   2c71a:	d140      	bne.n	2c79e <f_write+0x12a>
				if (fp->fptr == 0) {		/* On the top of the file? */
   2c71c:	68fb      	ldr	r3, [r7, #12]
   2c71e:	689b      	ldr	r3, [r3, #8]
   2c720:	2b00      	cmp	r3, #0
   2c722:	d111      	bne.n	2c748 <f_write+0xd4>
					clst = fp->sclust;		/* Follow from the origin */
   2c724:	68fb      	ldr	r3, [r7, #12]
   2c726:	691b      	ldr	r3, [r3, #16]
   2c728:	627b      	str	r3, [r7, #36]	; 0x24
					if (clst == 0)			/* When no cluster is allocated, */
   2c72a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   2c72c:	2b00      	cmp	r3, #0
   2c72e:	d115      	bne.n	2c75c <f_write+0xe8>
						fp->sclust = clst = create_chain(fp->fs, 0);	/* Create a new cluster chain */
   2c730:	68fb      	ldr	r3, [r7, #12]
   2c732:	681b      	ldr	r3, [r3, #0]
   2c734:	2100      	movs	r1, #0
   2c736:	0018      	movs	r0, r3
   2c738:	4b9d      	ldr	r3, [pc, #628]	; (2c9b0 <f_write+0x33c>)
   2c73a:	4798      	blx	r3
   2c73c:	0003      	movs	r3, r0
   2c73e:	627b      	str	r3, [r7, #36]	; 0x24
   2c740:	68fb      	ldr	r3, [r7, #12]
   2c742:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   2c744:	611a      	str	r2, [r3, #16]
   2c746:	e009      	b.n	2c75c <f_write+0xe8>
#if _USE_FASTSEEK
					if (fp->cltbl)
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
					else
#endif
						clst = create_chain(fp->fs, fp->clust);	/* Follow or stretch cluster chain on the FAT */
   2c748:	68fb      	ldr	r3, [r7, #12]
   2c74a:	681a      	ldr	r2, [r3, #0]
   2c74c:	68fb      	ldr	r3, [r7, #12]
   2c74e:	695b      	ldr	r3, [r3, #20]
   2c750:	0019      	movs	r1, r3
   2c752:	0010      	movs	r0, r2
   2c754:	4b96      	ldr	r3, [pc, #600]	; (2c9b0 <f_write+0x33c>)
   2c756:	4798      	blx	r3
   2c758:	0003      	movs	r3, r0
   2c75a:	627b      	str	r3, [r7, #36]	; 0x24
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
   2c75c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   2c75e:	2b00      	cmp	r3, #0
   2c760:	d100      	bne.n	2c764 <f_write+0xf0>
   2c762:	e10c      	b.n	2c97e <f_write+0x30a>
				if (clst == 1) ABORT(fp->fs, FR_INT_ERR);
   2c764:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   2c766:	2b01      	cmp	r3, #1
   2c768:	d109      	bne.n	2c77e <f_write+0x10a>
   2c76a:	68fb      	ldr	r3, [r7, #12]
   2c76c:	799b      	ldrb	r3, [r3, #6]
   2c76e:	2280      	movs	r2, #128	; 0x80
   2c770:	4252      	negs	r2, r2
   2c772:	4313      	orrs	r3, r2
   2c774:	b2da      	uxtb	r2, r3
   2c776:	68fb      	ldr	r3, [r7, #12]
   2c778:	719a      	strb	r2, [r3, #6]
   2c77a:	2302      	movs	r3, #2
   2c77c:	e112      	b.n	2c9a4 <f_write+0x330>
				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
   2c77e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   2c780:	3301      	adds	r3, #1
   2c782:	d109      	bne.n	2c798 <f_write+0x124>
   2c784:	68fb      	ldr	r3, [r7, #12]
   2c786:	799b      	ldrb	r3, [r3, #6]
   2c788:	2280      	movs	r2, #128	; 0x80
   2c78a:	4252      	negs	r2, r2
   2c78c:	4313      	orrs	r3, r2
   2c78e:	b2da      	uxtb	r2, r3
   2c790:	68fb      	ldr	r3, [r7, #12]
   2c792:	719a      	strb	r2, [r3, #6]
   2c794:	2301      	movs	r3, #1
   2c796:	e105      	b.n	2c9a4 <f_write+0x330>
				fp->clust = clst;			/* Update current cluster */
   2c798:	68fb      	ldr	r3, [r7, #12]
   2c79a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   2c79c:	615a      	str	r2, [r3, #20]
			}
#if _FS_TINY
			if (fp->fs->winsect == fp->dsect && move_window(fp->fs, 0))	/* Write-back sector cache */
   2c79e:	68fb      	ldr	r3, [r7, #12]
   2c7a0:	681b      	ldr	r3, [r3, #0]
   2c7a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   2c7a4:	68fb      	ldr	r3, [r7, #12]
   2c7a6:	699b      	ldr	r3, [r3, #24]
   2c7a8:	429a      	cmp	r2, r3
   2c7aa:	d111      	bne.n	2c7d0 <f_write+0x15c>
   2c7ac:	68fb      	ldr	r3, [r7, #12]
   2c7ae:	681b      	ldr	r3, [r3, #0]
   2c7b0:	2100      	movs	r1, #0
   2c7b2:	0018      	movs	r0, r3
   2c7b4:	4b7f      	ldr	r3, [pc, #508]	; (2c9b4 <f_write+0x340>)
   2c7b6:	4798      	blx	r3
   2c7b8:	1e03      	subs	r3, r0, #0
   2c7ba:	d009      	beq.n	2c7d0 <f_write+0x15c>
				ABORT(fp->fs, FR_DISK_ERR);
   2c7bc:	68fb      	ldr	r3, [r7, #12]
   2c7be:	799b      	ldrb	r3, [r3, #6]
   2c7c0:	2280      	movs	r2, #128	; 0x80
   2c7c2:	4252      	negs	r2, r2
   2c7c4:	4313      	orrs	r3, r2
   2c7c6:	b2da      	uxtb	r2, r3
   2c7c8:	68fb      	ldr	r3, [r7, #12]
   2c7ca:	719a      	strb	r2, [r3, #6]
   2c7cc:	2301      	movs	r3, #1
   2c7ce:	e0e9      	b.n	2c9a4 <f_write+0x330>
				if (disk_write(fp->fs->drv, fp->buf, fp->dsect, 1) != RES_OK)
					ABORT(fp->fs, FR_DISK_ERR);
				fp->flag &= ~FA__DIRTY;
			}
#endif
			sect = clust2sect(fp->fs, fp->clust);	/* Get current sector */
   2c7d0:	68fb      	ldr	r3, [r7, #12]
   2c7d2:	681a      	ldr	r2, [r3, #0]
   2c7d4:	68fb      	ldr	r3, [r7, #12]
   2c7d6:	695b      	ldr	r3, [r3, #20]
   2c7d8:	0019      	movs	r1, r3
   2c7da:	0010      	movs	r0, r2
   2c7dc:	4b76      	ldr	r3, [pc, #472]	; (2c9b8 <f_write+0x344>)
   2c7de:	4798      	blx	r3
   2c7e0:	0003      	movs	r3, r0
   2c7e2:	613b      	str	r3, [r7, #16]
			if (!sect) ABORT(fp->fs, FR_INT_ERR);
   2c7e4:	693b      	ldr	r3, [r7, #16]
   2c7e6:	2b00      	cmp	r3, #0
   2c7e8:	d109      	bne.n	2c7fe <f_write+0x18a>
   2c7ea:	68fb      	ldr	r3, [r7, #12]
   2c7ec:	799b      	ldrb	r3, [r3, #6]
   2c7ee:	2280      	movs	r2, #128	; 0x80
   2c7f0:	4252      	negs	r2, r2
   2c7f2:	4313      	orrs	r3, r2
   2c7f4:	b2da      	uxtb	r2, r3
   2c7f6:	68fb      	ldr	r3, [r7, #12]
   2c7f8:	719a      	strb	r2, [r3, #6]
   2c7fa:	2302      	movs	r3, #2
   2c7fc:	e0d2      	b.n	2c9a4 <f_write+0x330>
			sect += csect;
   2c7fe:	2316      	movs	r3, #22
   2c800:	18fb      	adds	r3, r7, r3
   2c802:	781b      	ldrb	r3, [r3, #0]
   2c804:	693a      	ldr	r2, [r7, #16]
   2c806:	18d3      	adds	r3, r2, r3
   2c808:	613b      	str	r3, [r7, #16]
			cc = btw / SS(fp->fs);			/* When remaining bytes >= sector size, */
   2c80a:	687b      	ldr	r3, [r7, #4]
   2c80c:	0a5b      	lsrs	r3, r3, #9
   2c80e:	61fb      	str	r3, [r7, #28]
			if (cc) {						/* Write maximum contiguous sectors directly */
   2c810:	69fb      	ldr	r3, [r7, #28]
   2c812:	2b00      	cmp	r3, #0
   2c814:	d048      	beq.n	2c8a8 <f_write+0x234>
				if (csect + cc > fp->fs->csize)	/* Clip at cluster boundary */
   2c816:	2316      	movs	r3, #22
   2c818:	18fb      	adds	r3, r7, r3
   2c81a:	781a      	ldrb	r2, [r3, #0]
   2c81c:	69fb      	ldr	r3, [r7, #28]
   2c81e:	18d2      	adds	r2, r2, r3
   2c820:	68fb      	ldr	r3, [r7, #12]
   2c822:	681b      	ldr	r3, [r3, #0]
   2c824:	789b      	ldrb	r3, [r3, #2]
   2c826:	429a      	cmp	r2, r3
   2c828:	d908      	bls.n	2c83c <f_write+0x1c8>
					cc = fp->fs->csize - csect;
   2c82a:	68fb      	ldr	r3, [r7, #12]
   2c82c:	681b      	ldr	r3, [r3, #0]
   2c82e:	789b      	ldrb	r3, [r3, #2]
   2c830:	001a      	movs	r2, r3
   2c832:	2316      	movs	r3, #22
   2c834:	18fb      	adds	r3, r7, r3
   2c836:	781b      	ldrb	r3, [r3, #0]
   2c838:	1ad3      	subs	r3, r2, r3
   2c83a:	61fb      	str	r3, [r7, #28]
				if (disk_write(fp->fs->drv, wbuff, sect, (BYTE)cc) != RES_OK)
   2c83c:	68fb      	ldr	r3, [r7, #12]
   2c83e:	681b      	ldr	r3, [r3, #0]
   2c840:	7858      	ldrb	r0, [r3, #1]
   2c842:	69fb      	ldr	r3, [r7, #28]
   2c844:	b2db      	uxtb	r3, r3
   2c846:	693a      	ldr	r2, [r7, #16]
   2c848:	69b9      	ldr	r1, [r7, #24]
   2c84a:	4c5c      	ldr	r4, [pc, #368]	; (2c9bc <f_write+0x348>)
   2c84c:	47a0      	blx	r4
   2c84e:	1e03      	subs	r3, r0, #0
   2c850:	d009      	beq.n	2c866 <f_write+0x1f2>
					ABORT(fp->fs, FR_DISK_ERR);
   2c852:	68fb      	ldr	r3, [r7, #12]
   2c854:	799b      	ldrb	r3, [r3, #6]
   2c856:	2280      	movs	r2, #128	; 0x80
   2c858:	4252      	negs	r2, r2
   2c85a:	4313      	orrs	r3, r2
   2c85c:	b2da      	uxtb	r2, r3
   2c85e:	68fb      	ldr	r3, [r7, #12]
   2c860:	719a      	strb	r2, [r3, #6]
   2c862:	2301      	movs	r3, #1
   2c864:	e09e      	b.n	2c9a4 <f_write+0x330>
#if _FS_TINY
				if (fp->fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
   2c866:	68fb      	ldr	r3, [r7, #12]
   2c868:	681b      	ldr	r3, [r3, #0]
   2c86a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   2c86c:	693b      	ldr	r3, [r7, #16]
   2c86e:	1ad2      	subs	r2, r2, r3
   2c870:	69fb      	ldr	r3, [r7, #28]
   2c872:	429a      	cmp	r2, r3
   2c874:	d214      	bcs.n	2c8a0 <f_write+0x22c>
					mem_cpy(fp->fs->win, wbuff + ((fp->fs->winsect - sect) * SS(fp->fs)), SS(fp->fs));
   2c876:	68fb      	ldr	r3, [r7, #12]
   2c878:	681b      	ldr	r3, [r3, #0]
   2c87a:	3330      	adds	r3, #48	; 0x30
   2c87c:	0018      	movs	r0, r3
   2c87e:	68fb      	ldr	r3, [r7, #12]
   2c880:	681b      	ldr	r3, [r3, #0]
   2c882:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   2c884:	693b      	ldr	r3, [r7, #16]
   2c886:	1ad3      	subs	r3, r2, r3
   2c888:	025b      	lsls	r3, r3, #9
   2c88a:	69ba      	ldr	r2, [r7, #24]
   2c88c:	18d1      	adds	r1, r2, r3
   2c88e:	2380      	movs	r3, #128	; 0x80
   2c890:	009b      	lsls	r3, r3, #2
   2c892:	001a      	movs	r2, r3
   2c894:	4b4a      	ldr	r3, [pc, #296]	; (2c9c0 <f_write+0x34c>)
   2c896:	4798      	blx	r3
					fp->fs->wflag = 0;
   2c898:	68fb      	ldr	r3, [r7, #12]
   2c89a:	681b      	ldr	r3, [r3, #0]
   2c89c:	2200      	movs	r2, #0
   2c89e:	711a      	strb	r2, [r3, #4]
				if (fp->dsect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fp->buf, wbuff + ((fp->dsect - sect) * SS(fp->fs)), SS(fp->fs));
					fp->flag &= ~FA__DIRTY;
				}
#endif
				wcnt = SS(fp->fs) * cc;		/* Number of bytes transferred */
   2c8a0:	69fb      	ldr	r3, [r7, #28]
   2c8a2:	025b      	lsls	r3, r3, #9
   2c8a4:	623b      	str	r3, [r7, #32]
				continue;
   2c8a6:	e051      	b.n	2c94c <f_write+0x2d8>
			}
#if _FS_TINY
			if (fp->fptr >= fp->fsize) {	/* Avoid silly cache filling at growing edge */
   2c8a8:	68fb      	ldr	r3, [r7, #12]
   2c8aa:	689a      	ldr	r2, [r3, #8]
   2c8ac:	68fb      	ldr	r3, [r7, #12]
   2c8ae:	68db      	ldr	r3, [r3, #12]
   2c8b0:	429a      	cmp	r2, r3
   2c8b2:	d315      	bcc.n	2c8e0 <f_write+0x26c>
				if (move_window(fp->fs, 0)) ABORT(fp->fs, FR_DISK_ERR);
   2c8b4:	68fb      	ldr	r3, [r7, #12]
   2c8b6:	681b      	ldr	r3, [r3, #0]
   2c8b8:	2100      	movs	r1, #0
   2c8ba:	0018      	movs	r0, r3
   2c8bc:	4b3d      	ldr	r3, [pc, #244]	; (2c9b4 <f_write+0x340>)
   2c8be:	4798      	blx	r3
   2c8c0:	1e03      	subs	r3, r0, #0
   2c8c2:	d009      	beq.n	2c8d8 <f_write+0x264>
   2c8c4:	68fb      	ldr	r3, [r7, #12]
   2c8c6:	799b      	ldrb	r3, [r3, #6]
   2c8c8:	2280      	movs	r2, #128	; 0x80
   2c8ca:	4252      	negs	r2, r2
   2c8cc:	4313      	orrs	r3, r2
   2c8ce:	b2da      	uxtb	r2, r3
   2c8d0:	68fb      	ldr	r3, [r7, #12]
   2c8d2:	719a      	strb	r2, [r3, #6]
   2c8d4:	2301      	movs	r3, #1
   2c8d6:	e065      	b.n	2c9a4 <f_write+0x330>
				fp->fs->winsect = sect;
   2c8d8:	68fb      	ldr	r3, [r7, #12]
   2c8da:	681b      	ldr	r3, [r3, #0]
   2c8dc:	693a      	ldr	r2, [r7, #16]
   2c8de:	62da      	str	r2, [r3, #44]	; 0x2c
				if (fp->fptr < fp->fsize &&
					disk_read(fp->fs->drv, fp->buf, sect, 1) != RES_OK)
						ABORT(fp->fs, FR_DISK_ERR);
			}
#endif
			fp->dsect = sect;
   2c8e0:	68fb      	ldr	r3, [r7, #12]
   2c8e2:	693a      	ldr	r2, [r7, #16]
   2c8e4:	619a      	str	r2, [r3, #24]
		}
		wcnt = SS(fp->fs) - (fp->fptr % SS(fp->fs));/* Put partial sector into file I/O buffer */
   2c8e6:	68fb      	ldr	r3, [r7, #12]
   2c8e8:	689b      	ldr	r3, [r3, #8]
   2c8ea:	05db      	lsls	r3, r3, #23
   2c8ec:	0ddb      	lsrs	r3, r3, #23
   2c8ee:	2280      	movs	r2, #128	; 0x80
   2c8f0:	0092      	lsls	r2, r2, #2
   2c8f2:	1ad3      	subs	r3, r2, r3
   2c8f4:	623b      	str	r3, [r7, #32]
		if (wcnt > btw) wcnt = btw;
   2c8f6:	6a3a      	ldr	r2, [r7, #32]
   2c8f8:	687b      	ldr	r3, [r7, #4]
   2c8fa:	429a      	cmp	r2, r3
   2c8fc:	d901      	bls.n	2c902 <f_write+0x28e>
   2c8fe:	687b      	ldr	r3, [r7, #4]
   2c900:	623b      	str	r3, [r7, #32]
#if _FS_TINY
		if (move_window(fp->fs, fp->dsect))	/* Move sector window */
   2c902:	68fb      	ldr	r3, [r7, #12]
   2c904:	681a      	ldr	r2, [r3, #0]
   2c906:	68fb      	ldr	r3, [r7, #12]
   2c908:	699b      	ldr	r3, [r3, #24]
   2c90a:	0019      	movs	r1, r3
   2c90c:	0010      	movs	r0, r2
   2c90e:	4b29      	ldr	r3, [pc, #164]	; (2c9b4 <f_write+0x340>)
   2c910:	4798      	blx	r3
   2c912:	1e03      	subs	r3, r0, #0
   2c914:	d009      	beq.n	2c92a <f_write+0x2b6>
			ABORT(fp->fs, FR_DISK_ERR);
   2c916:	68fb      	ldr	r3, [r7, #12]
   2c918:	799b      	ldrb	r3, [r3, #6]
   2c91a:	2280      	movs	r2, #128	; 0x80
   2c91c:	4252      	negs	r2, r2
   2c91e:	4313      	orrs	r3, r2
   2c920:	b2da      	uxtb	r2, r3
   2c922:	68fb      	ldr	r3, [r7, #12]
   2c924:	719a      	strb	r2, [r3, #6]
   2c926:	2301      	movs	r3, #1
   2c928:	e03c      	b.n	2c9a4 <f_write+0x330>
		mem_cpy(&fp->fs->win[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
   2c92a:	68fb      	ldr	r3, [r7, #12]
   2c92c:	681a      	ldr	r2, [r3, #0]
   2c92e:	68fb      	ldr	r3, [r7, #12]
   2c930:	689b      	ldr	r3, [r3, #8]
   2c932:	05db      	lsls	r3, r3, #23
   2c934:	0ddb      	lsrs	r3, r3, #23
   2c936:	3330      	adds	r3, #48	; 0x30
   2c938:	18d3      	adds	r3, r2, r3
   2c93a:	6a3a      	ldr	r2, [r7, #32]
   2c93c:	69b9      	ldr	r1, [r7, #24]
   2c93e:	0018      	movs	r0, r3
   2c940:	4b1f      	ldr	r3, [pc, #124]	; (2c9c0 <f_write+0x34c>)
   2c942:	4798      	blx	r3
		fp->fs->wflag = 1;
   2c944:	68fb      	ldr	r3, [r7, #12]
   2c946:	681b      	ldr	r3, [r3, #0]
   2c948:	2201      	movs	r2, #1
   2c94a:	711a      	strb	r2, [r3, #4]
		wbuff += wcnt, fp->fptr += wcnt, *bw += wcnt, btw -= wcnt) {
   2c94c:	69ba      	ldr	r2, [r7, #24]
   2c94e:	6a3b      	ldr	r3, [r7, #32]
   2c950:	18d3      	adds	r3, r2, r3
   2c952:	61bb      	str	r3, [r7, #24]
   2c954:	68fb      	ldr	r3, [r7, #12]
   2c956:	689a      	ldr	r2, [r3, #8]
   2c958:	6a3b      	ldr	r3, [r7, #32]
   2c95a:	18d2      	adds	r2, r2, r3
   2c95c:	68fb      	ldr	r3, [r7, #12]
   2c95e:	609a      	str	r2, [r3, #8]
   2c960:	683b      	ldr	r3, [r7, #0]
   2c962:	681a      	ldr	r2, [r3, #0]
   2c964:	6a3b      	ldr	r3, [r7, #32]
   2c966:	18d2      	adds	r2, r2, r3
   2c968:	683b      	ldr	r3, [r7, #0]
   2c96a:	601a      	str	r2, [r3, #0]
   2c96c:	687a      	ldr	r2, [r7, #4]
   2c96e:	6a3b      	ldr	r3, [r7, #32]
   2c970:	1ad3      	subs	r3, r2, r3
   2c972:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
   2c974:	687b      	ldr	r3, [r7, #4]
   2c976:	2b00      	cmp	r3, #0
   2c978:	d000      	beq.n	2c97c <f_write+0x308>
   2c97a:	e6b7      	b.n	2c6ec <f_write+0x78>
   2c97c:	e000      	b.n	2c980 <f_write+0x30c>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
   2c97e:	46c0      	nop			; (mov r8, r8)
		mem_cpy(&fp->buf[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
		fp->flag |= FA__DIRTY;
#endif
	}

	if (fp->fptr > fp->fsize) fp->fsize = fp->fptr;	/* Update file size if needed */
   2c980:	68fb      	ldr	r3, [r7, #12]
   2c982:	689a      	ldr	r2, [r3, #8]
   2c984:	68fb      	ldr	r3, [r7, #12]
   2c986:	68db      	ldr	r3, [r3, #12]
   2c988:	429a      	cmp	r2, r3
   2c98a:	d903      	bls.n	2c994 <f_write+0x320>
   2c98c:	68fb      	ldr	r3, [r7, #12]
   2c98e:	689a      	ldr	r2, [r3, #8]
   2c990:	68fb      	ldr	r3, [r7, #12]
   2c992:	60da      	str	r2, [r3, #12]
	fp->flag |= FA__WRITTEN;						/* Set file change flag */
   2c994:	68fb      	ldr	r3, [r7, #12]
   2c996:	799b      	ldrb	r3, [r3, #6]
   2c998:	2220      	movs	r2, #32
   2c99a:	4313      	orrs	r3, r2
   2c99c:	b2da      	uxtb	r2, r3
   2c99e:	68fb      	ldr	r3, [r7, #12]
   2c9a0:	719a      	strb	r2, [r3, #6]

	LEAVE_FF(fp->fs, FR_OK);
   2c9a2:	2300      	movs	r3, #0
}
   2c9a4:	0018      	movs	r0, r3
   2c9a6:	46bd      	mov	sp, r7
   2c9a8:	b00b      	add	sp, #44	; 0x2c
   2c9aa:	bd90      	pop	{r4, r7, pc}
   2c9ac:	0002c099 	.word	0x0002c099
   2c9b0:	0002a725 	.word	0x0002a725
   2c9b4:	0002a01d 	.word	0x0002a01d
   2c9b8:	0002a27d 	.word	0x0002a27d
   2c9bc:	00029d09 	.word	0x00029d09
   2c9c0:	00029f39 	.word	0x00029f39

0002c9c4 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL *fp		/* Pointer to the file object */
)
{
   2c9c4:	b590      	push	{r4, r7, lr}
   2c9c6:	b087      	sub	sp, #28
   2c9c8:	af00      	add	r7, sp, #0
   2c9ca:	6078      	str	r0, [r7, #4]
	FRESULT res;
	DWORD tim;
	BYTE *dir;


	res = validate(fp->fs, fp->id);		/* Check validity of the object */
   2c9cc:	687b      	ldr	r3, [r7, #4]
   2c9ce:	681a      	ldr	r2, [r3, #0]
   2c9d0:	687b      	ldr	r3, [r7, #4]
   2c9d2:	889b      	ldrh	r3, [r3, #4]
   2c9d4:	2117      	movs	r1, #23
   2c9d6:	187c      	adds	r4, r7, r1
   2c9d8:	0019      	movs	r1, r3
   2c9da:	0010      	movs	r0, r2
   2c9dc:	4b55      	ldr	r3, [pc, #340]	; (2cb34 <f_sync+0x170>)
   2c9de:	4798      	blx	r3
   2c9e0:	0003      	movs	r3, r0
   2c9e2:	7023      	strb	r3, [r4, #0]
	if (res == FR_OK) {
   2c9e4:	2317      	movs	r3, #23
   2c9e6:	18fb      	adds	r3, r7, r3
   2c9e8:	781b      	ldrb	r3, [r3, #0]
   2c9ea:	2b00      	cmp	r3, #0
   2c9ec:	d000      	beq.n	2c9f0 <f_sync+0x2c>
   2c9ee:	e09a      	b.n	2cb26 <f_sync+0x162>
		if (fp->flag & FA__WRITTEN) {	/* Has the file been written? */
   2c9f0:	687b      	ldr	r3, [r7, #4]
   2c9f2:	799b      	ldrb	r3, [r3, #6]
   2c9f4:	001a      	movs	r2, r3
   2c9f6:	2320      	movs	r3, #32
   2c9f8:	4013      	ands	r3, r2
   2c9fa:	d100      	bne.n	2c9fe <f_sync+0x3a>
   2c9fc:	e093      	b.n	2cb26 <f_sync+0x162>
					LEAVE_FF(fp->fs, FR_DISK_ERR);
				fp->flag &= ~FA__DIRTY;
			}
#endif
			/* Update the directory entry */
			res = move_window(fp->fs, fp->dir_sect);
   2c9fe:	687b      	ldr	r3, [r7, #4]
   2ca00:	681a      	ldr	r2, [r3, #0]
   2ca02:	687b      	ldr	r3, [r7, #4]
   2ca04:	69db      	ldr	r3, [r3, #28]
   2ca06:	2117      	movs	r1, #23
   2ca08:	187c      	adds	r4, r7, r1
   2ca0a:	0019      	movs	r1, r3
   2ca0c:	0010      	movs	r0, r2
   2ca0e:	4b4a      	ldr	r3, [pc, #296]	; (2cb38 <f_sync+0x174>)
   2ca10:	4798      	blx	r3
   2ca12:	0003      	movs	r3, r0
   2ca14:	7023      	strb	r3, [r4, #0]
			if (res == FR_OK) {
   2ca16:	2317      	movs	r3, #23
   2ca18:	18fb      	adds	r3, r7, r3
   2ca1a:	781b      	ldrb	r3, [r3, #0]
   2ca1c:	2b00      	cmp	r3, #0
   2ca1e:	d000      	beq.n	2ca22 <f_sync+0x5e>
   2ca20:	e081      	b.n	2cb26 <f_sync+0x162>
				dir = fp->dir_ptr;
   2ca22:	687b      	ldr	r3, [r7, #4]
   2ca24:	6a1b      	ldr	r3, [r3, #32]
   2ca26:	613b      	str	r3, [r7, #16]
				dir[DIR_Attr] |= AM_ARC;					/* Set archive bit */
   2ca28:	693b      	ldr	r3, [r7, #16]
   2ca2a:	330b      	adds	r3, #11
   2ca2c:	693a      	ldr	r2, [r7, #16]
   2ca2e:	320b      	adds	r2, #11
   2ca30:	7812      	ldrb	r2, [r2, #0]
   2ca32:	2120      	movs	r1, #32
   2ca34:	430a      	orrs	r2, r1
   2ca36:	b2d2      	uxtb	r2, r2
   2ca38:	701a      	strb	r2, [r3, #0]
				ST_DWORD(dir+DIR_FileSize, fp->fsize);		/* Update file size */
   2ca3a:	693b      	ldr	r3, [r7, #16]
   2ca3c:	331c      	adds	r3, #28
   2ca3e:	001a      	movs	r2, r3
   2ca40:	687b      	ldr	r3, [r7, #4]
   2ca42:	68db      	ldr	r3, [r3, #12]
   2ca44:	b2db      	uxtb	r3, r3
   2ca46:	7013      	strb	r3, [r2, #0]
   2ca48:	693b      	ldr	r3, [r7, #16]
   2ca4a:	331d      	adds	r3, #29
   2ca4c:	001a      	movs	r2, r3
   2ca4e:	687b      	ldr	r3, [r7, #4]
   2ca50:	68db      	ldr	r3, [r3, #12]
   2ca52:	b29b      	uxth	r3, r3
   2ca54:	0a1b      	lsrs	r3, r3, #8
   2ca56:	b29b      	uxth	r3, r3
   2ca58:	b2db      	uxtb	r3, r3
   2ca5a:	7013      	strb	r3, [r2, #0]
   2ca5c:	693b      	ldr	r3, [r7, #16]
   2ca5e:	331e      	adds	r3, #30
   2ca60:	001a      	movs	r2, r3
   2ca62:	687b      	ldr	r3, [r7, #4]
   2ca64:	68db      	ldr	r3, [r3, #12]
   2ca66:	0c1b      	lsrs	r3, r3, #16
   2ca68:	b2db      	uxtb	r3, r3
   2ca6a:	7013      	strb	r3, [r2, #0]
   2ca6c:	693b      	ldr	r3, [r7, #16]
   2ca6e:	331f      	adds	r3, #31
   2ca70:	001a      	movs	r2, r3
   2ca72:	687b      	ldr	r3, [r7, #4]
   2ca74:	68db      	ldr	r3, [r3, #12]
   2ca76:	0e1b      	lsrs	r3, r3, #24
   2ca78:	b2db      	uxtb	r3, r3
   2ca7a:	7013      	strb	r3, [r2, #0]
				ST_CLUST(dir, fp->sclust);					/* Update start cluster */
   2ca7c:	693b      	ldr	r3, [r7, #16]
   2ca7e:	331a      	adds	r3, #26
   2ca80:	001a      	movs	r2, r3
   2ca82:	687b      	ldr	r3, [r7, #4]
   2ca84:	691b      	ldr	r3, [r3, #16]
   2ca86:	b2db      	uxtb	r3, r3
   2ca88:	7013      	strb	r3, [r2, #0]
   2ca8a:	693b      	ldr	r3, [r7, #16]
   2ca8c:	331b      	adds	r3, #27
   2ca8e:	001a      	movs	r2, r3
   2ca90:	687b      	ldr	r3, [r7, #4]
   2ca92:	691b      	ldr	r3, [r3, #16]
   2ca94:	b29b      	uxth	r3, r3
   2ca96:	0a1b      	lsrs	r3, r3, #8
   2ca98:	b29b      	uxth	r3, r3
   2ca9a:	b2db      	uxtb	r3, r3
   2ca9c:	7013      	strb	r3, [r2, #0]
   2ca9e:	693b      	ldr	r3, [r7, #16]
   2caa0:	3314      	adds	r3, #20
   2caa2:	001a      	movs	r2, r3
   2caa4:	687b      	ldr	r3, [r7, #4]
   2caa6:	691b      	ldr	r3, [r3, #16]
   2caa8:	0c1b      	lsrs	r3, r3, #16
   2caaa:	b2db      	uxtb	r3, r3
   2caac:	7013      	strb	r3, [r2, #0]
   2caae:	693b      	ldr	r3, [r7, #16]
   2cab0:	3315      	adds	r3, #21
   2cab2:	001a      	movs	r2, r3
   2cab4:	687b      	ldr	r3, [r7, #4]
   2cab6:	691b      	ldr	r3, [r3, #16]
   2cab8:	0c1b      	lsrs	r3, r3, #16
   2caba:	b29b      	uxth	r3, r3
   2cabc:	0a1b      	lsrs	r3, r3, #8
   2cabe:	b29b      	uxth	r3, r3
   2cac0:	b2db      	uxtb	r3, r3
   2cac2:	7013      	strb	r3, [r2, #0]
				tim = get_fattime();						/* Update updated time */
   2cac4:	4b1d      	ldr	r3, [pc, #116]	; (2cb3c <f_sync+0x178>)
   2cac6:	4798      	blx	r3
   2cac8:	0003      	movs	r3, r0
   2caca:	60fb      	str	r3, [r7, #12]
				ST_DWORD(dir+DIR_WrtTime, tim);
   2cacc:	693b      	ldr	r3, [r7, #16]
   2cace:	3316      	adds	r3, #22
   2cad0:	68fa      	ldr	r2, [r7, #12]
   2cad2:	b2d2      	uxtb	r2, r2
   2cad4:	701a      	strb	r2, [r3, #0]
   2cad6:	693b      	ldr	r3, [r7, #16]
   2cad8:	3317      	adds	r3, #23
   2cada:	68fa      	ldr	r2, [r7, #12]
   2cadc:	b292      	uxth	r2, r2
   2cade:	0a12      	lsrs	r2, r2, #8
   2cae0:	b292      	uxth	r2, r2
   2cae2:	b2d2      	uxtb	r2, r2
   2cae4:	701a      	strb	r2, [r3, #0]
   2cae6:	693b      	ldr	r3, [r7, #16]
   2cae8:	3318      	adds	r3, #24
   2caea:	68fa      	ldr	r2, [r7, #12]
   2caec:	0c12      	lsrs	r2, r2, #16
   2caee:	b2d2      	uxtb	r2, r2
   2caf0:	701a      	strb	r2, [r3, #0]
   2caf2:	693b      	ldr	r3, [r7, #16]
   2caf4:	3319      	adds	r3, #25
   2caf6:	68fa      	ldr	r2, [r7, #12]
   2caf8:	0e12      	lsrs	r2, r2, #24
   2cafa:	b2d2      	uxtb	r2, r2
   2cafc:	701a      	strb	r2, [r3, #0]
				fp->flag &= ~FA__WRITTEN;
   2cafe:	687b      	ldr	r3, [r7, #4]
   2cb00:	799b      	ldrb	r3, [r3, #6]
   2cb02:	2220      	movs	r2, #32
   2cb04:	4393      	bics	r3, r2
   2cb06:	b2da      	uxtb	r2, r3
   2cb08:	687b      	ldr	r3, [r7, #4]
   2cb0a:	719a      	strb	r2, [r3, #6]
				fp->fs->wflag = 1;
   2cb0c:	687b      	ldr	r3, [r7, #4]
   2cb0e:	681b      	ldr	r3, [r3, #0]
   2cb10:	2201      	movs	r2, #1
   2cb12:	711a      	strb	r2, [r3, #4]
				res = sync(fp->fs);
   2cb14:	687b      	ldr	r3, [r7, #4]
   2cb16:	681b      	ldr	r3, [r3, #0]
   2cb18:	2217      	movs	r2, #23
   2cb1a:	18bc      	adds	r4, r7, r2
   2cb1c:	0018      	movs	r0, r3
   2cb1e:	4b08      	ldr	r3, [pc, #32]	; (2cb40 <f_sync+0x17c>)
   2cb20:	4798      	blx	r3
   2cb22:	0003      	movs	r3, r0
   2cb24:	7023      	strb	r3, [r4, #0]
			}
		}
	}

	LEAVE_FF(fp->fs, res);
   2cb26:	2317      	movs	r3, #23
   2cb28:	18fb      	adds	r3, r7, r3
   2cb2a:	781b      	ldrb	r3, [r3, #0]
}
   2cb2c:	0018      	movs	r0, r3
   2cb2e:	46bd      	mov	sp, r7
   2cb30:	b007      	add	sp, #28
   2cb32:	bd90      	pop	{r4, r7, pc}
   2cb34:	0002c099 	.word	0x0002c099
   2cb38:	0002a01d 	.word	0x0002a01d
   2cb3c:	00029ed9 	.word	0x00029ed9
   2cb40:	0002a0e5 	.word	0x0002a0e5

0002cb44 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL *fp		/* Pointer to the file object to be closed */
)
{
   2cb44:	b590      	push	{r4, r7, lr}
   2cb46:	b085      	sub	sp, #20
   2cb48:	af00      	add	r7, sp, #0
   2cb4a:	6078      	str	r0, [r7, #4]
	res = validate(fs, fp->id);
	if (res == FR_OK) fp->fs = 0;	/* Discard file object */
	LEAVE_FF(fs, res);

#else
	res = f_sync(fp);		/* Flush cached data */
   2cb4c:	230f      	movs	r3, #15
   2cb4e:	18fc      	adds	r4, r7, r3
   2cb50:	687b      	ldr	r3, [r7, #4]
   2cb52:	0018      	movs	r0, r3
   2cb54:	4b09      	ldr	r3, [pc, #36]	; (2cb7c <f_close+0x38>)
   2cb56:	4798      	blx	r3
   2cb58:	0003      	movs	r3, r0
   2cb5a:	7023      	strb	r3, [r4, #0]
#else
		res = dec_lock(fp->lockid);
#endif
	}
#endif
	if (res == FR_OK) fp->fs = 0;	/* Discard file object */
   2cb5c:	230f      	movs	r3, #15
   2cb5e:	18fb      	adds	r3, r7, r3
   2cb60:	781b      	ldrb	r3, [r3, #0]
   2cb62:	2b00      	cmp	r3, #0
   2cb64:	d102      	bne.n	2cb6c <f_close+0x28>
   2cb66:	687b      	ldr	r3, [r7, #4]
   2cb68:	2200      	movs	r2, #0
   2cb6a:	601a      	str	r2, [r3, #0]
	return res;
   2cb6c:	230f      	movs	r3, #15
   2cb6e:	18fb      	adds	r3, r7, r3
   2cb70:	781b      	ldrb	r3, [r3, #0]
#endif
}
   2cb72:	0018      	movs	r0, r3
   2cb74:	46bd      	mov	sp, r7
   2cb76:	b005      	add	sp, #20
   2cb78:	bd90      	pop	{r4, r7, pc}
   2cb7a:	46c0      	nop			; (mov r8, r8)
   2cb7c:	0002c9c5 	.word	0x0002c9c5

0002cb80 <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	src,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEMCP, 1: OEMCP to Unicode */
)
{
   2cb80:	b580      	push	{r7, lr}
   2cb82:	b084      	sub	sp, #16
   2cb84:	af00      	add	r7, sp, #0
   2cb86:	0002      	movs	r2, r0
   2cb88:	6039      	str	r1, [r7, #0]
   2cb8a:	1dbb      	adds	r3, r7, #6
   2cb8c:	801a      	strh	r2, [r3, #0]
	WCHAR c;


	if (src < 0x80) {	/* ASCII */
   2cb8e:	1dbb      	adds	r3, r7, #6
   2cb90:	881b      	ldrh	r3, [r3, #0]
   2cb92:	2b7f      	cmp	r3, #127	; 0x7f
   2cb94:	d805      	bhi.n	2cba2 <ff_convert+0x22>
		c = src;
   2cb96:	230e      	movs	r3, #14
   2cb98:	18fb      	adds	r3, r7, r3
   2cb9a:	1dba      	adds	r2, r7, #6
   2cb9c:	8812      	ldrh	r2, [r2, #0]
   2cb9e:	801a      	strh	r2, [r3, #0]
   2cba0:	e03a      	b.n	2cc18 <ff_convert+0x98>

	} else {
		if (dir) {		/* OEMCP to Unicode */
   2cba2:	683b      	ldr	r3, [r7, #0]
   2cba4:	2b00      	cmp	r3, #0
   2cba6:	d010      	beq.n	2cbca <ff_convert+0x4a>
			c = (src >= 0x100) ? 0 : Tbl[src - 0x80];
   2cba8:	1dbb      	adds	r3, r7, #6
   2cbaa:	881b      	ldrh	r3, [r3, #0]
   2cbac:	2bff      	cmp	r3, #255	; 0xff
   2cbae:	d807      	bhi.n	2cbc0 <ff_convert+0x40>
   2cbb0:	1dbb      	adds	r3, r7, #6
   2cbb2:	881b      	ldrh	r3, [r3, #0]
   2cbb4:	3b80      	subs	r3, #128	; 0x80
   2cbb6:	001a      	movs	r2, r3
   2cbb8:	4b1b      	ldr	r3, [pc, #108]	; (2cc28 <ff_convert+0xa8>)
   2cbba:	0052      	lsls	r2, r2, #1
   2cbbc:	5ad2      	ldrh	r2, [r2, r3]
   2cbbe:	e000      	b.n	2cbc2 <ff_convert+0x42>
   2cbc0:	2200      	movs	r2, #0
   2cbc2:	230e      	movs	r3, #14
   2cbc4:	18fb      	adds	r3, r7, r3
   2cbc6:	801a      	strh	r2, [r3, #0]
   2cbc8:	e026      	b.n	2cc18 <ff_convert+0x98>

		} else {		/* Unicode to OEMCP */
			for (c = 0; c < 0x80; c++) {
   2cbca:	230e      	movs	r3, #14
   2cbcc:	18fb      	adds	r3, r7, r3
   2cbce:	2200      	movs	r2, #0
   2cbd0:	801a      	strh	r2, [r3, #0]
   2cbd2:	e010      	b.n	2cbf6 <ff_convert+0x76>
				if (src == Tbl[c]) break;
   2cbd4:	230e      	movs	r3, #14
   2cbd6:	18fb      	adds	r3, r7, r3
   2cbd8:	881a      	ldrh	r2, [r3, #0]
   2cbda:	4b13      	ldr	r3, [pc, #76]	; (2cc28 <ff_convert+0xa8>)
   2cbdc:	0052      	lsls	r2, r2, #1
   2cbde:	5ad3      	ldrh	r3, [r2, r3]
   2cbe0:	1dba      	adds	r2, r7, #6
   2cbe2:	8812      	ldrh	r2, [r2, #0]
   2cbe4:	429a      	cmp	r2, r3
   2cbe6:	d00c      	beq.n	2cc02 <ff_convert+0x82>
			for (c = 0; c < 0x80; c++) {
   2cbe8:	230e      	movs	r3, #14
   2cbea:	18fb      	adds	r3, r7, r3
   2cbec:	881a      	ldrh	r2, [r3, #0]
   2cbee:	230e      	movs	r3, #14
   2cbf0:	18fb      	adds	r3, r7, r3
   2cbf2:	3201      	adds	r2, #1
   2cbf4:	801a      	strh	r2, [r3, #0]
   2cbf6:	230e      	movs	r3, #14
   2cbf8:	18fb      	adds	r3, r7, r3
   2cbfa:	881b      	ldrh	r3, [r3, #0]
   2cbfc:	2b7f      	cmp	r3, #127	; 0x7f
   2cbfe:	d9e9      	bls.n	2cbd4 <ff_convert+0x54>
   2cc00:	e000      	b.n	2cc04 <ff_convert+0x84>
				if (src == Tbl[c]) break;
   2cc02:	46c0      	nop			; (mov r8, r8)
			}
			c = (c + 0x80) & 0xFF;
   2cc04:	230e      	movs	r3, #14
   2cc06:	18fb      	adds	r3, r7, r3
   2cc08:	881b      	ldrh	r3, [r3, #0]
   2cc0a:	3380      	adds	r3, #128	; 0x80
   2cc0c:	b29a      	uxth	r2, r3
   2cc0e:	230e      	movs	r3, #14
   2cc10:	18fb      	adds	r3, r7, r3
   2cc12:	21ff      	movs	r1, #255	; 0xff
   2cc14:	400a      	ands	r2, r1
   2cc16:	801a      	strh	r2, [r3, #0]
		}
	}

	return c;
   2cc18:	230e      	movs	r3, #14
   2cc1a:	18fb      	adds	r3, r7, r3
   2cc1c:	881b      	ldrh	r3, [r3, #0]
}
   2cc1e:	0018      	movs	r0, r3
   2cc20:	46bd      	mov	sp, r7
   2cc22:	b004      	add	sp, #16
   2cc24:	bd80      	pop	{r7, pc}
   2cc26:	46c0      	nop			; (mov r8, r8)
   2cc28:	00037aec 	.word	0x00037aec

0002cc2c <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Upper converted character */
	WCHAR chr		/* Input character */
)
{
   2cc2c:	b580      	push	{r7, lr}
   2cc2e:	b084      	sub	sp, #16
   2cc30:	af00      	add	r7, sp, #0
   2cc32:	0002      	movs	r2, r0
   2cc34:	1dbb      	adds	r3, r7, #6
   2cc36:	801a      	strh	r2, [r3, #0]
	static const WCHAR tbl_lower[] = { 0x61, 0x62, 0x63, 0x64, 0x65, 0x66, 0x67, 0x68, 0x69, 0x6A, 0x6B, 0x6C, 0x6D, 0x6E, 0x6F, 0x70, 0x71, 0x72, 0x73, 0x74, 0x75, 0x76, 0x77, 0x78, 0x79, 0x7A, 0xA1, 0x00A2, 0x00A3, 0x00A5, 0x00AC, 0x00AF, 0xE0, 0xE1, 0xE2, 0xE3, 0xE4, 0xE5, 0xE6, 0xE7, 0xE8, 0xE9, 0xEA, 0xEB, 0xEC, 0xED, 0xEE, 0xEF, 0xF0, 0xF1, 0xF2, 0xF3, 0xF4, 0xF5, 0xF6, 0xF8, 0xF9, 0xFA, 0xFB, 0xFC, 0xFD, 0xFE, 0x0FF, 0x101, 0x103, 0x105, 0x107, 0x109, 0x10B, 0x10D, 0x10F, 0x111, 0x113, 0x115, 0x117, 0x119, 0x11B, 0x11D, 0x11F, 0x121, 0x123, 0x125, 0x127, 0x129, 0x12B, 0x12D, 0x12F, 0x131, 0x133, 0x135, 0x137, 0x13A, 0x13C, 0x13E, 0x140, 0x142, 0x144, 0x146, 0x148, 0x14B, 0x14D, 0x14F, 0x151, 0x153, 0x155, 0x157, 0x159, 0x15B, 0x15D, 0x15F, 0x161, 0x163, 0x165, 0x167, 0x169, 0x16B, 0x16D, 0x16F, 0x171, 0x173, 0x175, 0x177, 0x17A, 0x17C, 0x17E, 0x192, 0x3B1, 0x3B2, 0x3B3, 0x3B4, 0x3B5, 0x3B6, 0x3B7, 0x3B8, 0x3B9, 0x3BA, 0x3BB, 0x3BC, 0x3BD, 0x3BE, 0x3BF, 0x3C0, 0x3C1, 0x3C3, 0x3C4, 0x3C5, 0x3C6, 0x3C7, 0x3C8, 0x3C9, 0x3CA, 0x430, 0x431, 0x432, 0x433, 0x434, 0x435, 0x436, 0x437, 0x438, 0x439, 0x43A, 0x43B, 0x43C, 0x43D, 0x43E, 0x43F, 0x440, 0x441, 0x442, 0x443, 0x444, 0x445, 0x446, 0x447, 0x448, 0x449, 0x44A, 0x44B, 0x44C, 0x44D, 0x44E, 0x44F, 0x451, 0x452, 0x453, 0x454, 0x455, 0x456, 0x457, 0x458, 0x459, 0x45A, 0x45B, 0x45C, 0x45E, 0x45F, 0x2170, 0x2171, 0x2172, 0x2173, 0x2174, 0x2175, 0x2176, 0x2177, 0x2178, 0x2179, 0x217A, 0x217B, 0x217C, 0x217D, 0x217E, 0x217F, 0xFF41, 0xFF42, 0xFF43, 0xFF44, 0xFF45, 0xFF46, 0xFF47, 0xFF48, 0xFF49, 0xFF4A, 0xFF4B, 0xFF4C, 0xFF4D, 0xFF4E, 0xFF4F, 0xFF50, 0xFF51, 0xFF52, 0xFF53, 0xFF54, 0xFF55, 0xFF56, 0xFF57, 0xFF58, 0xFF59, 0xFF5A, 0 };
	static const WCHAR tbl_upper[] = { 0x41, 0x42, 0x43, 0x44, 0x45, 0x46, 0x47, 0x48, 0x49, 0x4A, 0x4B, 0x4C, 0x4D, 0x4E, 0x4F, 0x50, 0x51, 0x52, 0x53, 0x54, 0x55, 0x56, 0x57, 0x58, 0x59, 0x5A, 0x21, 0xFFE0, 0xFFE1, 0xFFE5, 0xFFE2, 0xFFE3, 0xC0, 0xC1, 0xC2, 0xC3, 0xC4, 0xC5, 0xC6, 0xC7, 0xC8, 0xC9, 0xCA, 0xCB, 0xCC, 0xCD, 0xCE, 0xCF, 0xD0, 0xD1, 0xD2, 0xD3, 0xD4, 0xD5, 0xD6, 0xD8, 0xD9, 0xDA, 0xDB, 0xDC, 0xDD, 0xDE, 0x178, 0x100, 0x102, 0x104, 0x106, 0x108, 0x10A, 0x10C, 0x10E, 0x110, 0x112, 0x114, 0x116, 0x118, 0x11A, 0x11C, 0x11E, 0x120, 0x122, 0x124, 0x126, 0x128, 0x12A, 0x12C, 0x12E, 0x130, 0x132, 0x134, 0x136, 0x139, 0x13B, 0x13D, 0x13F, 0x141, 0x143, 0x145, 0x147, 0x14A, 0x14C, 0x14E, 0x150, 0x152, 0x154, 0x156, 0x158, 0x15A, 0x15C, 0x15E, 0x160, 0x162, 0x164, 0x166, 0x168, 0x16A, 0x16C, 0x16E, 0x170, 0x172, 0x174, 0x176, 0x179, 0x17B, 0x17D, 0x191, 0x391, 0x392, 0x393, 0x394, 0x395, 0x396, 0x397, 0x398, 0x399, 0x39A, 0x39B, 0x39C, 0x39D, 0x39E, 0x39F, 0x3A0, 0x3A1, 0x3A3, 0x3A4, 0x3A5, 0x3A6, 0x3A7, 0x3A8, 0x3A9, 0x3AA, 0x410, 0x411, 0x412, 0x413, 0x414, 0x415, 0x416, 0x417, 0x418, 0x419, 0x41A, 0x41B, 0x41C, 0x41D, 0x41E, 0x41F, 0x420, 0x421, 0x422, 0x423, 0x424, 0x425, 0x426, 0x427, 0x428, 0x429, 0x42A, 0x42B, 0x42C, 0x42D, 0x42E, 0x42F, 0x401, 0x402, 0x403, 0x404, 0x405, 0x406, 0x407, 0x408, 0x409, 0x40A, 0x40B, 0x40C, 0x40E, 0x40F, 0x2160, 0x2161, 0x2162, 0x2163, 0x2164, 0x2165, 0x2166, 0x2167, 0x2168, 0x2169, 0x216A, 0x216B, 0x216C, 0x216D, 0x216E, 0x216F, 0xFF21, 0xFF22, 0xFF23, 0xFF24, 0xFF25, 0xFF26, 0xFF27, 0xFF28, 0xFF29, 0xFF2A, 0xFF2B, 0xFF2C, 0xFF2D, 0xFF2E, 0xFF2F, 0xFF30, 0xFF31, 0xFF32, 0xFF33, 0xFF34, 0xFF35, 0xFF36, 0xFF37, 0xFF38, 0xFF39, 0xFF3A, 0 };
	int i;


	for (i = 0; tbl_lower[i] && chr != tbl_lower[i]; i++) ;
   2cc38:	2300      	movs	r3, #0
   2cc3a:	60fb      	str	r3, [r7, #12]
   2cc3c:	e002      	b.n	2cc44 <ff_wtoupper+0x18>
   2cc3e:	68fb      	ldr	r3, [r7, #12]
   2cc40:	3301      	adds	r3, #1
   2cc42:	60fb      	str	r3, [r7, #12]
   2cc44:	4b0f      	ldr	r3, [pc, #60]	; (2cc84 <ff_wtoupper+0x58>)
   2cc46:	68fa      	ldr	r2, [r7, #12]
   2cc48:	0052      	lsls	r2, r2, #1
   2cc4a:	5ad3      	ldrh	r3, [r2, r3]
   2cc4c:	2b00      	cmp	r3, #0
   2cc4e:	d007      	beq.n	2cc60 <ff_wtoupper+0x34>
   2cc50:	4b0c      	ldr	r3, [pc, #48]	; (2cc84 <ff_wtoupper+0x58>)
   2cc52:	68fa      	ldr	r2, [r7, #12]
   2cc54:	0052      	lsls	r2, r2, #1
   2cc56:	5ad3      	ldrh	r3, [r2, r3]
   2cc58:	1dba      	adds	r2, r7, #6
   2cc5a:	8812      	ldrh	r2, [r2, #0]
   2cc5c:	429a      	cmp	r2, r3
   2cc5e:	d1ee      	bne.n	2cc3e <ff_wtoupper+0x12>

	return tbl_lower[i] ? tbl_upper[i] : chr;
   2cc60:	4b08      	ldr	r3, [pc, #32]	; (2cc84 <ff_wtoupper+0x58>)
   2cc62:	68fa      	ldr	r2, [r7, #12]
   2cc64:	0052      	lsls	r2, r2, #1
   2cc66:	5ad3      	ldrh	r3, [r2, r3]
   2cc68:	2b00      	cmp	r3, #0
   2cc6a:	d004      	beq.n	2cc76 <ff_wtoupper+0x4a>
   2cc6c:	4b06      	ldr	r3, [pc, #24]	; (2cc88 <ff_wtoupper+0x5c>)
   2cc6e:	68fa      	ldr	r2, [r7, #12]
   2cc70:	0052      	lsls	r2, r2, #1
   2cc72:	5ad3      	ldrh	r3, [r2, r3]
   2cc74:	e001      	b.n	2cc7a <ff_wtoupper+0x4e>
   2cc76:	1dbb      	adds	r3, r7, #6
   2cc78:	881b      	ldrh	r3, [r3, #0]
}
   2cc7a:	0018      	movs	r0, r3
   2cc7c:	46bd      	mov	sp, r7
   2cc7e:	b004      	add	sp, #16
   2cc80:	bd80      	pop	{r7, pc}
   2cc82:	46c0      	nop			; (mov r8, r8)
   2cc84:	00037bec 	.word	0x00037bec
   2cc88:	00037dcc 	.word	0x00037dcc

0002cc8c <NewMessageData>:
int cycle(MQTTClient* c, Timer* timer);
void MQTTRun(void* parm);
int waitfor(MQTTClient* c, int packet_type, Timer* timer);


static void NewMessageData(MessageData* md, MQTTString* aTopicName, MQTTMessage* aMessage) {
   2cc8c:	b580      	push	{r7, lr}
   2cc8e:	b084      	sub	sp, #16
   2cc90:	af00      	add	r7, sp, #0
   2cc92:	60f8      	str	r0, [r7, #12]
   2cc94:	60b9      	str	r1, [r7, #8]
   2cc96:	607a      	str	r2, [r7, #4]
    md->topicName = aTopicName;
   2cc98:	68fb      	ldr	r3, [r7, #12]
   2cc9a:	68ba      	ldr	r2, [r7, #8]
   2cc9c:	605a      	str	r2, [r3, #4]
    md->message = aMessage;
   2cc9e:	68fb      	ldr	r3, [r7, #12]
   2cca0:	687a      	ldr	r2, [r7, #4]
   2cca2:	601a      	str	r2, [r3, #0]
}
   2cca4:	46c0      	nop			; (mov r8, r8)
   2cca6:	46bd      	mov	sp, r7
   2cca8:	b004      	add	sp, #16
   2ccaa:	bd80      	pop	{r7, pc}

0002ccac <getNextPacketId>:


static int getNextPacketId(MQTTClient *c) {
   2ccac:	b580      	push	{r7, lr}
   2ccae:	b082      	sub	sp, #8
   2ccb0:	af00      	add	r7, sp, #0
   2ccb2:	6078      	str	r0, [r7, #4]
    return c->next_packetid = (c->next_packetid == MAX_PACKET_ID) ? 1 : c->next_packetid + 1;
   2ccb4:	687b      	ldr	r3, [r7, #4]
   2ccb6:	681b      	ldr	r3, [r3, #0]
   2ccb8:	4a07      	ldr	r2, [pc, #28]	; (2ccd8 <getNextPacketId+0x2c>)
   2ccba:	4293      	cmp	r3, r2
   2ccbc:	d003      	beq.n	2ccc6 <getNextPacketId+0x1a>
   2ccbe:	687b      	ldr	r3, [r7, #4]
   2ccc0:	681b      	ldr	r3, [r3, #0]
   2ccc2:	1c5a      	adds	r2, r3, #1
   2ccc4:	e000      	b.n	2ccc8 <getNextPacketId+0x1c>
   2ccc6:	2201      	movs	r2, #1
   2ccc8:	687b      	ldr	r3, [r7, #4]
   2ccca:	601a      	str	r2, [r3, #0]
   2cccc:	687b      	ldr	r3, [r7, #4]
   2ccce:	681b      	ldr	r3, [r3, #0]
}
   2ccd0:	0018      	movs	r0, r3
   2ccd2:	46bd      	mov	sp, r7
   2ccd4:	b002      	add	sp, #8
   2ccd6:	bd80      	pop	{r7, pc}
   2ccd8:	0000ffff 	.word	0x0000ffff

0002ccdc <sendPacket>:


static int sendPacket(MQTTClient* c, int length, Timer* timer)
{
   2ccdc:	b5f0      	push	{r4, r5, r6, r7, lr}
   2ccde:	b087      	sub	sp, #28
   2cce0:	af00      	add	r7, sp, #0
   2cce2:	60f8      	str	r0, [r7, #12]
   2cce4:	60b9      	str	r1, [r7, #8]
   2cce6:	607a      	str	r2, [r7, #4]
    int rc = FAILURE, 
   2cce8:	2301      	movs	r3, #1
   2ccea:	425b      	negs	r3, r3
   2ccec:	617b      	str	r3, [r7, #20]
        sent = 0;
   2ccee:	2300      	movs	r3, #0
   2ccf0:	613b      	str	r3, [r7, #16]
    
    while (sent < length && !TimerIsExpired(timer))
   2ccf2:	e01a      	b.n	2cd2a <sendPacket+0x4e>
    {
        rc = c->ipstack->mqttwrite(c->ipstack, &c->buf[sent], length, TimerLeftMS(timer));
   2ccf4:	68fb      	ldr	r3, [r7, #12]
   2ccf6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   2ccf8:	68dc      	ldr	r4, [r3, #12]
   2ccfa:	68fb      	ldr	r3, [r7, #12]
   2ccfc:	6d1d      	ldr	r5, [r3, #80]	; 0x50
   2ccfe:	68fb      	ldr	r3, [r7, #12]
   2cd00:	691a      	ldr	r2, [r3, #16]
   2cd02:	693b      	ldr	r3, [r7, #16]
   2cd04:	18d6      	adds	r6, r2, r3
   2cd06:	687b      	ldr	r3, [r7, #4]
   2cd08:	0018      	movs	r0, r3
   2cd0a:	4b1a      	ldr	r3, [pc, #104]	; (2cd74 <sendPacket+0x98>)
   2cd0c:	4798      	blx	r3
   2cd0e:	0003      	movs	r3, r0
   2cd10:	68ba      	ldr	r2, [r7, #8]
   2cd12:	0031      	movs	r1, r6
   2cd14:	0028      	movs	r0, r5
   2cd16:	47a0      	blx	r4
   2cd18:	0003      	movs	r3, r0
   2cd1a:	617b      	str	r3, [r7, #20]
        if (rc < 0)  // there was an error writing the data
   2cd1c:	697b      	ldr	r3, [r7, #20]
   2cd1e:	2b00      	cmp	r3, #0
   2cd20:	db0e      	blt.n	2cd40 <sendPacket+0x64>
            break;
        sent += rc;
   2cd22:	693a      	ldr	r2, [r7, #16]
   2cd24:	697b      	ldr	r3, [r7, #20]
   2cd26:	18d3      	adds	r3, r2, r3
   2cd28:	613b      	str	r3, [r7, #16]
    while (sent < length && !TimerIsExpired(timer))
   2cd2a:	693a      	ldr	r2, [r7, #16]
   2cd2c:	68bb      	ldr	r3, [r7, #8]
   2cd2e:	429a      	cmp	r2, r3
   2cd30:	da07      	bge.n	2cd42 <sendPacket+0x66>
   2cd32:	687b      	ldr	r3, [r7, #4]
   2cd34:	0018      	movs	r0, r3
   2cd36:	4b10      	ldr	r3, [pc, #64]	; (2cd78 <sendPacket+0x9c>)
   2cd38:	4798      	blx	r3
   2cd3a:	1e03      	subs	r3, r0, #0
   2cd3c:	d0da      	beq.n	2ccf4 <sendPacket+0x18>
   2cd3e:	e000      	b.n	2cd42 <sendPacket+0x66>
            break;
   2cd40:	46c0      	nop			; (mov r8, r8)
    }
    if (sent == length)
   2cd42:	693a      	ldr	r2, [r7, #16]
   2cd44:	68bb      	ldr	r3, [r7, #8]
   2cd46:	429a      	cmp	r2, r3
   2cd48:	d10b      	bne.n	2cd62 <sendPacket+0x86>
    {
        TimerCountdown(&c->ping_timer, c->keepAliveInterval); // record the fact that we have successfully sent the packet
   2cd4a:	68fb      	ldr	r3, [r7, #12]
   2cd4c:	3354      	adds	r3, #84	; 0x54
   2cd4e:	001a      	movs	r2, r3
   2cd50:	68fb      	ldr	r3, [r7, #12]
   2cd52:	699b      	ldr	r3, [r3, #24]
   2cd54:	0019      	movs	r1, r3
   2cd56:	0010      	movs	r0, r2
   2cd58:	4b08      	ldr	r3, [pc, #32]	; (2cd7c <sendPacket+0xa0>)
   2cd5a:	4798      	blx	r3
        rc = SUCCESS;
   2cd5c:	2300      	movs	r3, #0
   2cd5e:	617b      	str	r3, [r7, #20]
   2cd60:	e002      	b.n	2cd68 <sendPacket+0x8c>
    }
    else
        rc = FAILURE;
   2cd62:	2301      	movs	r3, #1
   2cd64:	425b      	negs	r3, r3
   2cd66:	617b      	str	r3, [r7, #20]
    return rc;
   2cd68:	697b      	ldr	r3, [r7, #20]
}
   2cd6a:	0018      	movs	r0, r3
   2cd6c:	46bd      	mov	sp, r7
   2cd6e:	b007      	add	sp, #28
   2cd70:	bdf0      	pop	{r4, r5, r6, r7, pc}
   2cd72:	46c0      	nop			; (mov r8, r8)
   2cd74:	0002db3d 	.word	0x0002db3d
   2cd78:	0002dac1 	.word	0x0002dac1
   2cd7c:	0002db15 	.word	0x0002db15

0002cd80 <MQTTClientInit>:


void MQTTClientInit(MQTTClient* c, Network* network, unsigned int command_timeout_ms,
		unsigned char* sendbuf, size_t sendbuf_size, unsigned char* readbuf, size_t readbuf_size)
{
   2cd80:	b580      	push	{r7, lr}
   2cd82:	b086      	sub	sp, #24
   2cd84:	af00      	add	r7, sp, #0
   2cd86:	60f8      	str	r0, [r7, #12]
   2cd88:	60b9      	str	r1, [r7, #8]
   2cd8a:	607a      	str	r2, [r7, #4]
   2cd8c:	603b      	str	r3, [r7, #0]
    int i;
    c->ipstack = network;
   2cd8e:	68fb      	ldr	r3, [r7, #12]
   2cd90:	68ba      	ldr	r2, [r7, #8]
   2cd92:	651a      	str	r2, [r3, #80]	; 0x50
    
    for (i = 0; i < MAX_MESSAGE_HANDLERS; ++i)
   2cd94:	2300      	movs	r3, #0
   2cd96:	617b      	str	r3, [r7, #20]
   2cd98:	e00a      	b.n	2cdb0 <MQTTClientInit+0x30>
        c->messageHandlers[i].topicFilter = 0;
   2cd9a:	68fa      	ldr	r2, [r7, #12]
   2cd9c:	697b      	ldr	r3, [r7, #20]
   2cd9e:	3304      	adds	r3, #4
   2cda0:	00db      	lsls	r3, r3, #3
   2cda2:	18d3      	adds	r3, r2, r3
   2cda4:	3304      	adds	r3, #4
   2cda6:	2200      	movs	r2, #0
   2cda8:	601a      	str	r2, [r3, #0]
    for (i = 0; i < MAX_MESSAGE_HANDLERS; ++i)
   2cdaa:	697b      	ldr	r3, [r7, #20]
   2cdac:	3301      	adds	r3, #1
   2cdae:	617b      	str	r3, [r7, #20]
   2cdb0:	697b      	ldr	r3, [r7, #20]
   2cdb2:	2b04      	cmp	r3, #4
   2cdb4:	ddf1      	ble.n	2cd9a <MQTTClientInit+0x1a>
    c->command_timeout_ms = command_timeout_ms;
   2cdb6:	68fb      	ldr	r3, [r7, #12]
   2cdb8:	687a      	ldr	r2, [r7, #4]
   2cdba:	605a      	str	r2, [r3, #4]
    c->buf = sendbuf;
   2cdbc:	68fb      	ldr	r3, [r7, #12]
   2cdbe:	683a      	ldr	r2, [r7, #0]
   2cdc0:	611a      	str	r2, [r3, #16]
    c->buf_size = sendbuf_size;
   2cdc2:	68fb      	ldr	r3, [r7, #12]
   2cdc4:	6a3a      	ldr	r2, [r7, #32]
   2cdc6:	609a      	str	r2, [r3, #8]
    c->readbuf = readbuf;
   2cdc8:	68fb      	ldr	r3, [r7, #12]
   2cdca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   2cdcc:	615a      	str	r2, [r3, #20]
    c->readbuf_size = readbuf_size;
   2cdce:	68fb      	ldr	r3, [r7, #12]
   2cdd0:	6aba      	ldr	r2, [r7, #40]	; 0x28
   2cdd2:	60da      	str	r2, [r3, #12]
    c->isconnected = 0;
   2cdd4:	68fb      	ldr	r3, [r7, #12]
   2cdd6:	2200      	movs	r2, #0
   2cdd8:	621a      	str	r2, [r3, #32]
    c->ping_outstanding = 0;
   2cdda:	68fb      	ldr	r3, [r7, #12]
   2cddc:	2200      	movs	r2, #0
   2cdde:	771a      	strb	r2, [r3, #28]
    c->defaultMessageHandler = NULL;
   2cde0:	68fb      	ldr	r3, [r7, #12]
   2cde2:	2200      	movs	r2, #0
   2cde4:	64da      	str	r2, [r3, #76]	; 0x4c
	c->next_packetid = 1;
   2cde6:	68fb      	ldr	r3, [r7, #12]
   2cde8:	2201      	movs	r2, #1
   2cdea:	601a      	str	r2, [r3, #0]
    TimerInit(&c->ping_timer);
   2cdec:	68fb      	ldr	r3, [r7, #12]
   2cdee:	3354      	adds	r3, #84	; 0x54
   2cdf0:	0018      	movs	r0, r3
   2cdf2:	4b03      	ldr	r3, [pc, #12]	; (2ce00 <MQTTClientInit+0x80>)
   2cdf4:	4798      	blx	r3
#if defined(MQTT_TASK)
	MutexInit(&c->mutex);
#endif
}
   2cdf6:	46c0      	nop			; (mov r8, r8)
   2cdf8:	46bd      	mov	sp, r7
   2cdfa:	b006      	add	sp, #24
   2cdfc:	bd80      	pop	{r7, pc}
   2cdfe:	46c0      	nop			; (mov r8, r8)
   2ce00:	0002db65 	.word	0x0002db65

0002ce04 <decodePacket>:


static int decodePacket(MQTTClient* c, int* value, int timeout)
{
   2ce04:	b590      	push	{r4, r7, lr}
   2ce06:	b08b      	sub	sp, #44	; 0x2c
   2ce08:	af00      	add	r7, sp, #0
   2ce0a:	60f8      	str	r0, [r7, #12]
   2ce0c:	60b9      	str	r1, [r7, #8]
   2ce0e:	607a      	str	r2, [r7, #4]
    unsigned char i;
    int multiplier = 1;
   2ce10:	2301      	movs	r3, #1
   2ce12:	627b      	str	r3, [r7, #36]	; 0x24
    int len = 0;
   2ce14:	2300      	movs	r3, #0
   2ce16:	623b      	str	r3, [r7, #32]
    const int MAX_NO_OF_REMAINING_LENGTH_BYTES = 4;
   2ce18:	2304      	movs	r3, #4
   2ce1a:	61fb      	str	r3, [r7, #28]

    *value = 0;
   2ce1c:	68bb      	ldr	r3, [r7, #8]
   2ce1e:	2200      	movs	r2, #0
   2ce20:	601a      	str	r2, [r3, #0]
    do
    {
        int rc = MQTTPACKET_READ_ERROR;
   2ce22:	2301      	movs	r3, #1
   2ce24:	425b      	negs	r3, r3
   2ce26:	61bb      	str	r3, [r7, #24]

        if (++len > MAX_NO_OF_REMAINING_LENGTH_BYTES)
   2ce28:	6a3b      	ldr	r3, [r7, #32]
   2ce2a:	3301      	adds	r3, #1
   2ce2c:	623b      	str	r3, [r7, #32]
   2ce2e:	6a3a      	ldr	r2, [r7, #32]
   2ce30:	69fb      	ldr	r3, [r7, #28]
   2ce32:	429a      	cmp	r2, r3
   2ce34:	dd03      	ble.n	2ce3e <decodePacket+0x3a>
        {
            rc = MQTTPACKET_READ_ERROR; /* bad data */
   2ce36:	2301      	movs	r3, #1
   2ce38:	425b      	negs	r3, r3
   2ce3a:	61bb      	str	r3, [r7, #24]
            goto exit;
   2ce3c:	e026      	b.n	2ce8c <decodePacket+0x88>
        }
        rc = c->ipstack->mqttread(c->ipstack, &i, 1, timeout);
   2ce3e:	68fb      	ldr	r3, [r7, #12]
   2ce40:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   2ce42:	689c      	ldr	r4, [r3, #8]
   2ce44:	68fb      	ldr	r3, [r7, #12]
   2ce46:	6d18      	ldr	r0, [r3, #80]	; 0x50
   2ce48:	687b      	ldr	r3, [r7, #4]
   2ce4a:	2217      	movs	r2, #23
   2ce4c:	18b9      	adds	r1, r7, r2
   2ce4e:	2201      	movs	r2, #1
   2ce50:	47a0      	blx	r4
   2ce52:	0003      	movs	r3, r0
   2ce54:	61bb      	str	r3, [r7, #24]
        if (rc != 1)
   2ce56:	69bb      	ldr	r3, [r7, #24]
   2ce58:	2b01      	cmp	r3, #1
   2ce5a:	d116      	bne.n	2ce8a <decodePacket+0x86>
            goto exit;
        *value += (i & 127) * multiplier;
   2ce5c:	68bb      	ldr	r3, [r7, #8]
   2ce5e:	681a      	ldr	r2, [r3, #0]
   2ce60:	2317      	movs	r3, #23
   2ce62:	18fb      	adds	r3, r7, r3
   2ce64:	781b      	ldrb	r3, [r3, #0]
   2ce66:	0019      	movs	r1, r3
   2ce68:	237f      	movs	r3, #127	; 0x7f
   2ce6a:	400b      	ands	r3, r1
   2ce6c:	6a79      	ldr	r1, [r7, #36]	; 0x24
   2ce6e:	434b      	muls	r3, r1
   2ce70:	18d2      	adds	r2, r2, r3
   2ce72:	68bb      	ldr	r3, [r7, #8]
   2ce74:	601a      	str	r2, [r3, #0]
        multiplier *= 128;
   2ce76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   2ce78:	01db      	lsls	r3, r3, #7
   2ce7a:	627b      	str	r3, [r7, #36]	; 0x24
    } while ((i & 128) != 0);
   2ce7c:	2317      	movs	r3, #23
   2ce7e:	18fb      	adds	r3, r7, r3
   2ce80:	781b      	ldrb	r3, [r3, #0]
   2ce82:	b25b      	sxtb	r3, r3
   2ce84:	2b00      	cmp	r3, #0
   2ce86:	dbcc      	blt.n	2ce22 <decodePacket+0x1e>
   2ce88:	e000      	b.n	2ce8c <decodePacket+0x88>
            goto exit;
   2ce8a:	46c0      	nop			; (mov r8, r8)
exit:
    return len;
   2ce8c:	6a3b      	ldr	r3, [r7, #32]
}
   2ce8e:	0018      	movs	r0, r3
   2ce90:	46bd      	mov	sp, r7
   2ce92:	b00b      	add	sp, #44	; 0x2c
   2ce94:	bd90      	pop	{r4, r7, pc}
	...

0002ce98 <readPacket>:


static int readPacket(MQTTClient* c, Timer* timer)
{
   2ce98:	b5f0      	push	{r4, r5, r6, r7, lr}
   2ce9a:	46c6      	mov	lr, r8
   2ce9c:	b500      	push	{lr}
   2ce9e:	b086      	sub	sp, #24
   2cea0:	af00      	add	r7, sp, #0
   2cea2:	6078      	str	r0, [r7, #4]
   2cea4:	6039      	str	r1, [r7, #0]
    int rc = FAILURE;
   2cea6:	2301      	movs	r3, #1
   2cea8:	425b      	negs	r3, r3
   2ceaa:	617b      	str	r3, [r7, #20]
    MQTTHeader header = {0};
   2ceac:	2300      	movs	r3, #0
   2ceae:	60fb      	str	r3, [r7, #12]
    int len = 0;
   2ceb0:	2300      	movs	r3, #0
   2ceb2:	613b      	str	r3, [r7, #16]
    int rem_len = 0;
   2ceb4:	2300      	movs	r3, #0
   2ceb6:	60bb      	str	r3, [r7, #8]

    /* 1. read the header byte.  This has the packet type in it */
    if (c->ipstack->mqttread(c->ipstack, c->readbuf, 1, TimerLeftMS(timer)) != 1)
   2ceb8:	687b      	ldr	r3, [r7, #4]
   2ceba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   2cebc:	689c      	ldr	r4, [r3, #8]
   2cebe:	687b      	ldr	r3, [r7, #4]
   2cec0:	6d1d      	ldr	r5, [r3, #80]	; 0x50
   2cec2:	687b      	ldr	r3, [r7, #4]
   2cec4:	695e      	ldr	r6, [r3, #20]
   2cec6:	683b      	ldr	r3, [r7, #0]
   2cec8:	0018      	movs	r0, r3
   2ceca:	4b2b      	ldr	r3, [pc, #172]	; (2cf78 <readPacket+0xe0>)
   2cecc:	4798      	blx	r3
   2cece:	0003      	movs	r3, r0
   2ced0:	2201      	movs	r2, #1
   2ced2:	0031      	movs	r1, r6
   2ced4:	0028      	movs	r0, r5
   2ced6:	47a0      	blx	r4
   2ced8:	0003      	movs	r3, r0
   2ceda:	2b01      	cmp	r3, #1
   2cedc:	d141      	bne.n	2cf62 <readPacket+0xca>
        goto exit;

    len = 1;
   2cede:	2301      	movs	r3, #1
   2cee0:	613b      	str	r3, [r7, #16]
    /* 2. read the remaining length.  This is variable in itself */
    decodePacket(c, &rem_len, TimerLeftMS(timer));
   2cee2:	683b      	ldr	r3, [r7, #0]
   2cee4:	0018      	movs	r0, r3
   2cee6:	4b24      	ldr	r3, [pc, #144]	; (2cf78 <readPacket+0xe0>)
   2cee8:	4798      	blx	r3
   2ceea:	0002      	movs	r2, r0
   2ceec:	2308      	movs	r3, #8
   2ceee:	18f9      	adds	r1, r7, r3
   2cef0:	687b      	ldr	r3, [r7, #4]
   2cef2:	0018      	movs	r0, r3
   2cef4:	4b21      	ldr	r3, [pc, #132]	; (2cf7c <readPacket+0xe4>)
   2cef6:	4798      	blx	r3
    len += MQTTPacket_encode(c->readbuf + 1, rem_len); /* put the original remaining length back into the buffer */
   2cef8:	687b      	ldr	r3, [r7, #4]
   2cefa:	695b      	ldr	r3, [r3, #20]
   2cefc:	3301      	adds	r3, #1
   2cefe:	68ba      	ldr	r2, [r7, #8]
   2cf00:	0011      	movs	r1, r2
   2cf02:	0018      	movs	r0, r3
   2cf04:	4b1e      	ldr	r3, [pc, #120]	; (2cf80 <readPacket+0xe8>)
   2cf06:	4798      	blx	r3
   2cf08:	0002      	movs	r2, r0
   2cf0a:	693b      	ldr	r3, [r7, #16]
   2cf0c:	189b      	adds	r3, r3, r2
   2cf0e:	613b      	str	r3, [r7, #16]

    /* 3. read the rest of the buffer using a callback to supply the rest of the data */
    if (rem_len > 0 && (c->ipstack->mqttread(c->ipstack, c->readbuf + len, rem_len, TimerLeftMS(timer)) != rem_len))
   2cf10:	68bb      	ldr	r3, [r7, #8]
   2cf12:	2b00      	cmp	r3, #0
   2cf14:	dd17      	ble.n	2cf46 <readPacket+0xae>
   2cf16:	687b      	ldr	r3, [r7, #4]
   2cf18:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   2cf1a:	689c      	ldr	r4, [r3, #8]
   2cf1c:	687b      	ldr	r3, [r7, #4]
   2cf1e:	6d1d      	ldr	r5, [r3, #80]	; 0x50
   2cf20:	687b      	ldr	r3, [r7, #4]
   2cf22:	695a      	ldr	r2, [r3, #20]
   2cf24:	693b      	ldr	r3, [r7, #16]
   2cf26:	18d6      	adds	r6, r2, r3
   2cf28:	68bb      	ldr	r3, [r7, #8]
   2cf2a:	4698      	mov	r8, r3
   2cf2c:	683b      	ldr	r3, [r7, #0]
   2cf2e:	0018      	movs	r0, r3
   2cf30:	4b11      	ldr	r3, [pc, #68]	; (2cf78 <readPacket+0xe0>)
   2cf32:	4798      	blx	r3
   2cf34:	0003      	movs	r3, r0
   2cf36:	4642      	mov	r2, r8
   2cf38:	0031      	movs	r1, r6
   2cf3a:	0028      	movs	r0, r5
   2cf3c:	47a0      	blx	r4
   2cf3e:	0002      	movs	r2, r0
   2cf40:	68bb      	ldr	r3, [r7, #8]
   2cf42:	429a      	cmp	r2, r3
   2cf44:	d10f      	bne.n	2cf66 <readPacket+0xce>
        goto exit;

    header.byte = c->readbuf[0];
   2cf46:	687b      	ldr	r3, [r7, #4]
   2cf48:	695b      	ldr	r3, [r3, #20]
   2cf4a:	781a      	ldrb	r2, [r3, #0]
   2cf4c:	230c      	movs	r3, #12
   2cf4e:	18fb      	adds	r3, r7, r3
   2cf50:	701a      	strb	r2, [r3, #0]
    rc = header.bits.type;
   2cf52:	230c      	movs	r3, #12
   2cf54:	18fb      	adds	r3, r7, r3
   2cf56:	781b      	ldrb	r3, [r3, #0]
   2cf58:	061b      	lsls	r3, r3, #24
   2cf5a:	0f1b      	lsrs	r3, r3, #28
   2cf5c:	b2db      	uxtb	r3, r3
   2cf5e:	617b      	str	r3, [r7, #20]
   2cf60:	e002      	b.n	2cf68 <readPacket+0xd0>
        goto exit;
   2cf62:	46c0      	nop			; (mov r8, r8)
   2cf64:	e000      	b.n	2cf68 <readPacket+0xd0>
        goto exit;
   2cf66:	46c0      	nop			; (mov r8, r8)
exit:
    return rc;
   2cf68:	697b      	ldr	r3, [r7, #20]
}
   2cf6a:	0018      	movs	r0, r3
   2cf6c:	46bd      	mov	sp, r7
   2cf6e:	b006      	add	sp, #24
   2cf70:	bc04      	pop	{r2}
   2cf72:	4690      	mov	r8, r2
   2cf74:	bdf0      	pop	{r4, r5, r6, r7, pc}
   2cf76:	46c0      	nop			; (mov r8, r8)
   2cf78:	0002db3d 	.word	0x0002db3d
   2cf7c:	0002ce05 	.word	0x0002ce05
   2cf80:	0002e915 	.word	0x0002e915

0002cf84 <isTopicMatched>:

// assume topic filter and name is in correct format
// # can only be at end
// + and # can only be next to separator
static char isTopicMatched(char* topicFilter, MQTTString* topicName)
{
   2cf84:	b580      	push	{r7, lr}
   2cf86:	b086      	sub	sp, #24
   2cf88:	af00      	add	r7, sp, #0
   2cf8a:	6078      	str	r0, [r7, #4]
   2cf8c:	6039      	str	r1, [r7, #0]
    char* curf = topicFilter;
   2cf8e:	687b      	ldr	r3, [r7, #4]
   2cf90:	617b      	str	r3, [r7, #20]
    char* curn = topicName->lenstring.data;
   2cf92:	683b      	ldr	r3, [r7, #0]
   2cf94:	689b      	ldr	r3, [r3, #8]
   2cf96:	613b      	str	r3, [r7, #16]
    char* curn_end = curn + topicName->lenstring.len;
   2cf98:	683b      	ldr	r3, [r7, #0]
   2cf9a:	685b      	ldr	r3, [r3, #4]
   2cf9c:	001a      	movs	r2, r3
   2cf9e:	693b      	ldr	r3, [r7, #16]
   2cfa0:	189b      	adds	r3, r3, r2
   2cfa2:	60bb      	str	r3, [r7, #8]
    
    while (*curf && curn < curn_end)
   2cfa4:	e039      	b.n	2d01a <isTopicMatched+0x96>
    {
        if (*curn == '/' && *curf != '/')
   2cfa6:	693b      	ldr	r3, [r7, #16]
   2cfa8:	781b      	ldrb	r3, [r3, #0]
   2cfaa:	2b2f      	cmp	r3, #47	; 0x2f
   2cfac:	d103      	bne.n	2cfb6 <isTopicMatched+0x32>
   2cfae:	697b      	ldr	r3, [r7, #20]
   2cfb0:	781b      	ldrb	r3, [r3, #0]
   2cfb2:	2b2f      	cmp	r3, #47	; 0x2f
   2cfb4:	d13a      	bne.n	2d02c <isTopicMatched+0xa8>
            break;
        if (*curf != '+' && *curf != '#' && *curf != *curn)
   2cfb6:	697b      	ldr	r3, [r7, #20]
   2cfb8:	781b      	ldrb	r3, [r3, #0]
   2cfba:	2b2b      	cmp	r3, #43	; 0x2b
   2cfbc:	d009      	beq.n	2cfd2 <isTopicMatched+0x4e>
   2cfbe:	697b      	ldr	r3, [r7, #20]
   2cfc0:	781b      	ldrb	r3, [r3, #0]
   2cfc2:	2b23      	cmp	r3, #35	; 0x23
   2cfc4:	d005      	beq.n	2cfd2 <isTopicMatched+0x4e>
   2cfc6:	697b      	ldr	r3, [r7, #20]
   2cfc8:	781a      	ldrb	r2, [r3, #0]
   2cfca:	693b      	ldr	r3, [r7, #16]
   2cfcc:	781b      	ldrb	r3, [r3, #0]
   2cfce:	429a      	cmp	r2, r3
   2cfd0:	d12e      	bne.n	2d030 <isTopicMatched+0xac>
            break;
        if (*curf == '+')
   2cfd2:	697b      	ldr	r3, [r7, #20]
   2cfd4:	781b      	ldrb	r3, [r3, #0]
   2cfd6:	2b2b      	cmp	r3, #43	; 0x2b
   2cfd8:	d112      	bne.n	2d000 <isTopicMatched+0x7c>
        {   // skip until we meet the next separator, or end of string
            char* nextpos = curn + 1;
   2cfda:	693b      	ldr	r3, [r7, #16]
   2cfdc:	3301      	adds	r3, #1
   2cfde:	60fb      	str	r3, [r7, #12]
            while (nextpos < curn_end && *nextpos != '/')
   2cfe0:	e005      	b.n	2cfee <isTopicMatched+0x6a>
                nextpos = ++curn + 1;
   2cfe2:	693b      	ldr	r3, [r7, #16]
   2cfe4:	3301      	adds	r3, #1
   2cfe6:	613b      	str	r3, [r7, #16]
   2cfe8:	693b      	ldr	r3, [r7, #16]
   2cfea:	3301      	adds	r3, #1
   2cfec:	60fb      	str	r3, [r7, #12]
            while (nextpos < curn_end && *nextpos != '/')
   2cfee:	68fa      	ldr	r2, [r7, #12]
   2cff0:	68bb      	ldr	r3, [r7, #8]
   2cff2:	429a      	cmp	r2, r3
   2cff4:	d20b      	bcs.n	2d00e <isTopicMatched+0x8a>
   2cff6:	68fb      	ldr	r3, [r7, #12]
   2cff8:	781b      	ldrb	r3, [r3, #0]
   2cffa:	2b2f      	cmp	r3, #47	; 0x2f
   2cffc:	d1f1      	bne.n	2cfe2 <isTopicMatched+0x5e>
   2cffe:	e006      	b.n	2d00e <isTopicMatched+0x8a>
        }
        else if (*curf == '#')
   2d000:	697b      	ldr	r3, [r7, #20]
   2d002:	781b      	ldrb	r3, [r3, #0]
   2d004:	2b23      	cmp	r3, #35	; 0x23
   2d006:	d102      	bne.n	2d00e <isTopicMatched+0x8a>
            curn = curn_end - 1;    // skip until end of string
   2d008:	68bb      	ldr	r3, [r7, #8]
   2d00a:	3b01      	subs	r3, #1
   2d00c:	613b      	str	r3, [r7, #16]
        curf++;
   2d00e:	697b      	ldr	r3, [r7, #20]
   2d010:	3301      	adds	r3, #1
   2d012:	617b      	str	r3, [r7, #20]
        curn++;
   2d014:	693b      	ldr	r3, [r7, #16]
   2d016:	3301      	adds	r3, #1
   2d018:	613b      	str	r3, [r7, #16]
    while (*curf && curn < curn_end)
   2d01a:	697b      	ldr	r3, [r7, #20]
   2d01c:	781b      	ldrb	r3, [r3, #0]
   2d01e:	2b00      	cmp	r3, #0
   2d020:	d007      	beq.n	2d032 <isTopicMatched+0xae>
   2d022:	693a      	ldr	r2, [r7, #16]
   2d024:	68bb      	ldr	r3, [r7, #8]
   2d026:	429a      	cmp	r2, r3
   2d028:	d3bd      	bcc.n	2cfa6 <isTopicMatched+0x22>
   2d02a:	e002      	b.n	2d032 <isTopicMatched+0xae>
            break;
   2d02c:	46c0      	nop			; (mov r8, r8)
   2d02e:	e000      	b.n	2d032 <isTopicMatched+0xae>
            break;
   2d030:	46c0      	nop			; (mov r8, r8)
    };
    
    return (curn == curn_end) && (*curf == '\0');
   2d032:	693a      	ldr	r2, [r7, #16]
   2d034:	68bb      	ldr	r3, [r7, #8]
   2d036:	429a      	cmp	r2, r3
   2d038:	d105      	bne.n	2d046 <isTopicMatched+0xc2>
   2d03a:	697b      	ldr	r3, [r7, #20]
   2d03c:	781b      	ldrb	r3, [r3, #0]
   2d03e:	2b00      	cmp	r3, #0
   2d040:	d101      	bne.n	2d046 <isTopicMatched+0xc2>
   2d042:	2301      	movs	r3, #1
   2d044:	e000      	b.n	2d048 <isTopicMatched+0xc4>
   2d046:	2300      	movs	r3, #0
   2d048:	b2db      	uxtb	r3, r3
}
   2d04a:	0018      	movs	r0, r3
   2d04c:	46bd      	mov	sp, r7
   2d04e:	b006      	add	sp, #24
   2d050:	bd80      	pop	{r7, pc}
	...

0002d054 <deliverMessage>:


int deliverMessage(MQTTClient* c, MQTTString* topicName, MQTTMessage* message)
{
   2d054:	b580      	push	{r7, lr}
   2d056:	b08a      	sub	sp, #40	; 0x28
   2d058:	af00      	add	r7, sp, #0
   2d05a:	60f8      	str	r0, [r7, #12]
   2d05c:	60b9      	str	r1, [r7, #8]
   2d05e:	607a      	str	r2, [r7, #4]
    int i;
    int rc = FAILURE;
   2d060:	2301      	movs	r3, #1
   2d062:	425b      	negs	r3, r3
   2d064:	623b      	str	r3, [r7, #32]

    // we have to find the right message handler - indexed by topic
    for (i = 0; i < MAX_MESSAGE_HANDLERS; ++i)
   2d066:	2300      	movs	r3, #0
   2d068:	627b      	str	r3, [r7, #36]	; 0x24
   2d06a:	e044      	b.n	2d0f6 <deliverMessage+0xa2>
    {
        if (c->messageHandlers[i].topicFilter != 0 && (MQTTPacket_equals(topicName, (char*)c->messageHandlers[i].topicFilter) ||
   2d06c:	68fa      	ldr	r2, [r7, #12]
   2d06e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   2d070:	3304      	adds	r3, #4
   2d072:	00db      	lsls	r3, r3, #3
   2d074:	18d3      	adds	r3, r2, r3
   2d076:	3304      	adds	r3, #4
   2d078:	681b      	ldr	r3, [r3, #0]
   2d07a:	2b00      	cmp	r3, #0
   2d07c:	d038      	beq.n	2d0f0 <deliverMessage+0x9c>
   2d07e:	68fa      	ldr	r2, [r7, #12]
   2d080:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   2d082:	3304      	adds	r3, #4
   2d084:	00db      	lsls	r3, r3, #3
   2d086:	18d3      	adds	r3, r2, r3
   2d088:	3304      	adds	r3, #4
   2d08a:	681a      	ldr	r2, [r3, #0]
   2d08c:	68bb      	ldr	r3, [r7, #8]
   2d08e:	0011      	movs	r1, r2
   2d090:	0018      	movs	r0, r3
   2d092:	4b28      	ldr	r3, [pc, #160]	; (2d134 <deliverMessage+0xe0>)
   2d094:	4798      	blx	r3
   2d096:	1e03      	subs	r3, r0, #0
   2d098:	d10d      	bne.n	2d0b6 <deliverMessage+0x62>
                isTopicMatched((char*)c->messageHandlers[i].topicFilter, topicName)))
   2d09a:	68fa      	ldr	r2, [r7, #12]
   2d09c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   2d09e:	3304      	adds	r3, #4
   2d0a0:	00db      	lsls	r3, r3, #3
   2d0a2:	18d3      	adds	r3, r2, r3
   2d0a4:	3304      	adds	r3, #4
   2d0a6:	681b      	ldr	r3, [r3, #0]
   2d0a8:	68ba      	ldr	r2, [r7, #8]
   2d0aa:	0011      	movs	r1, r2
   2d0ac:	0018      	movs	r0, r3
   2d0ae:	4b22      	ldr	r3, [pc, #136]	; (2d138 <deliverMessage+0xe4>)
   2d0b0:	4798      	blx	r3
   2d0b2:	1e03      	subs	r3, r0, #0
        if (c->messageHandlers[i].topicFilter != 0 && (MQTTPacket_equals(topicName, (char*)c->messageHandlers[i].topicFilter) ||
   2d0b4:	d01c      	beq.n	2d0f0 <deliverMessage+0x9c>
        {
            if (c->messageHandlers[i].fp != NULL)
   2d0b6:	68fa      	ldr	r2, [r7, #12]
   2d0b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   2d0ba:	3304      	adds	r3, #4
   2d0bc:	00db      	lsls	r3, r3, #3
   2d0be:	18d3      	adds	r3, r2, r3
   2d0c0:	3308      	adds	r3, #8
   2d0c2:	681b      	ldr	r3, [r3, #0]
   2d0c4:	2b00      	cmp	r3, #0
   2d0c6:	d013      	beq.n	2d0f0 <deliverMessage+0x9c>
            {
                MessageData md;
                NewMessageData(&md, topicName, message);
   2d0c8:	687a      	ldr	r2, [r7, #4]
   2d0ca:	68b9      	ldr	r1, [r7, #8]
   2d0cc:	2318      	movs	r3, #24
   2d0ce:	18fb      	adds	r3, r7, r3
   2d0d0:	0018      	movs	r0, r3
   2d0d2:	4b1a      	ldr	r3, [pc, #104]	; (2d13c <deliverMessage+0xe8>)
   2d0d4:	4798      	blx	r3
                c->messageHandlers[i].fp(&md);
   2d0d6:	68fa      	ldr	r2, [r7, #12]
   2d0d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   2d0da:	3304      	adds	r3, #4
   2d0dc:	00db      	lsls	r3, r3, #3
   2d0de:	18d3      	adds	r3, r2, r3
   2d0e0:	3308      	adds	r3, #8
   2d0e2:	681b      	ldr	r3, [r3, #0]
   2d0e4:	2218      	movs	r2, #24
   2d0e6:	18ba      	adds	r2, r7, r2
   2d0e8:	0010      	movs	r0, r2
   2d0ea:	4798      	blx	r3
                rc = SUCCESS;
   2d0ec:	2300      	movs	r3, #0
   2d0ee:	623b      	str	r3, [r7, #32]
    for (i = 0; i < MAX_MESSAGE_HANDLERS; ++i)
   2d0f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   2d0f2:	3301      	adds	r3, #1
   2d0f4:	627b      	str	r3, [r7, #36]	; 0x24
   2d0f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   2d0f8:	2b04      	cmp	r3, #4
   2d0fa:	ddb7      	ble.n	2d06c <deliverMessage+0x18>
            }
        }
    }
    
    if (rc == FAILURE && c->defaultMessageHandler != NULL) 
   2d0fc:	6a3b      	ldr	r3, [r7, #32]
   2d0fe:	3301      	adds	r3, #1
   2d100:	d112      	bne.n	2d128 <deliverMessage+0xd4>
   2d102:	68fb      	ldr	r3, [r7, #12]
   2d104:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   2d106:	2b00      	cmp	r3, #0
   2d108:	d00e      	beq.n	2d128 <deliverMessage+0xd4>
    {
        MessageData md;
        NewMessageData(&md, topicName, message);
   2d10a:	687a      	ldr	r2, [r7, #4]
   2d10c:	68b9      	ldr	r1, [r7, #8]
   2d10e:	2310      	movs	r3, #16
   2d110:	18fb      	adds	r3, r7, r3
   2d112:	0018      	movs	r0, r3
   2d114:	4b09      	ldr	r3, [pc, #36]	; (2d13c <deliverMessage+0xe8>)
   2d116:	4798      	blx	r3
        c->defaultMessageHandler(&md);
   2d118:	68fb      	ldr	r3, [r7, #12]
   2d11a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   2d11c:	2210      	movs	r2, #16
   2d11e:	18ba      	adds	r2, r7, r2
   2d120:	0010      	movs	r0, r2
   2d122:	4798      	blx	r3
        rc = SUCCESS;
   2d124:	2300      	movs	r3, #0
   2d126:	623b      	str	r3, [r7, #32]
    }   
    
    return rc;
   2d128:	6a3b      	ldr	r3, [r7, #32]
}
   2d12a:	0018      	movs	r0, r3
   2d12c:	46bd      	mov	sp, r7
   2d12e:	b00a      	add	sp, #40	; 0x28
   2d130:	bd80      	pop	{r7, pc}
   2d132:	46c0      	nop			; (mov r8, r8)
   2d134:	0002ed29 	.word	0x0002ed29
   2d138:	0002cf85 	.word	0x0002cf85
   2d13c:	0002cc8d 	.word	0x0002cc8d

0002d140 <keepalive>:


int keepalive(MQTTClient* c)
{
   2d140:	b580      	push	{r7, lr}
   2d142:	b088      	sub	sp, #32
   2d144:	af00      	add	r7, sp, #0
   2d146:	6078      	str	r0, [r7, #4]
    int rc = FAILURE;
   2d148:	2301      	movs	r3, #1
   2d14a:	425b      	negs	r3, r3
   2d14c:	61fb      	str	r3, [r7, #28]

    if (c->keepAliveInterval == 0)
   2d14e:	687b      	ldr	r3, [r7, #4]
   2d150:	699b      	ldr	r3, [r3, #24]
   2d152:	2b00      	cmp	r3, #0
   2d154:	d102      	bne.n	2d15c <keepalive+0x1c>
    {
        rc = SUCCESS;
   2d156:	2300      	movs	r3, #0
   2d158:	61fb      	str	r3, [r7, #28]
        goto exit;
   2d15a:	e033      	b.n	2d1c4 <keepalive+0x84>
    }

    if (TimerIsExpired(&c->ping_timer))
   2d15c:	687b      	ldr	r3, [r7, #4]
   2d15e:	3354      	adds	r3, #84	; 0x54
   2d160:	0018      	movs	r0, r3
   2d162:	4b1b      	ldr	r3, [pc, #108]	; (2d1d0 <keepalive+0x90>)
   2d164:	4798      	blx	r3
   2d166:	1e03      	subs	r3, r0, #0
   2d168:	d02c      	beq.n	2d1c4 <keepalive+0x84>
    {
        if (!c->ping_outstanding)
   2d16a:	687b      	ldr	r3, [r7, #4]
   2d16c:	7f1b      	ldrb	r3, [r3, #28]
   2d16e:	2b00      	cmp	r3, #0
   2d170:	d128      	bne.n	2d1c4 <keepalive+0x84>
        {
            Timer timer;
            TimerInit(&timer);
   2d172:	230c      	movs	r3, #12
   2d174:	18fb      	adds	r3, r7, r3
   2d176:	0018      	movs	r0, r3
   2d178:	4b16      	ldr	r3, [pc, #88]	; (2d1d4 <keepalive+0x94>)
   2d17a:	4798      	blx	r3
            TimerCountdownMS(&timer, 1000);
   2d17c:	23fa      	movs	r3, #250	; 0xfa
   2d17e:	009a      	lsls	r2, r3, #2
   2d180:	230c      	movs	r3, #12
   2d182:	18fb      	adds	r3, r7, r3
   2d184:	0011      	movs	r1, r2
   2d186:	0018      	movs	r0, r3
   2d188:	4b13      	ldr	r3, [pc, #76]	; (2d1d8 <keepalive+0x98>)
   2d18a:	4798      	blx	r3
            int len = MQTTSerialize_pingreq(c->buf, c->buf_size);
   2d18c:	687b      	ldr	r3, [r7, #4]
   2d18e:	691a      	ldr	r2, [r3, #16]
   2d190:	687b      	ldr	r3, [r7, #4]
   2d192:	689b      	ldr	r3, [r3, #8]
   2d194:	0019      	movs	r1, r3
   2d196:	0010      	movs	r0, r2
   2d198:	4b10      	ldr	r3, [pc, #64]	; (2d1dc <keepalive+0x9c>)
   2d19a:	4798      	blx	r3
   2d19c:	0003      	movs	r3, r0
   2d19e:	61bb      	str	r3, [r7, #24]
            if (len > 0 && (rc = sendPacket(c, len, &timer)) == SUCCESS) // send the ping packet
   2d1a0:	69bb      	ldr	r3, [r7, #24]
   2d1a2:	2b00      	cmp	r3, #0
   2d1a4:	dd0e      	ble.n	2d1c4 <keepalive+0x84>
   2d1a6:	230c      	movs	r3, #12
   2d1a8:	18fa      	adds	r2, r7, r3
   2d1aa:	69b9      	ldr	r1, [r7, #24]
   2d1ac:	687b      	ldr	r3, [r7, #4]
   2d1ae:	0018      	movs	r0, r3
   2d1b0:	4b0b      	ldr	r3, [pc, #44]	; (2d1e0 <keepalive+0xa0>)
   2d1b2:	4798      	blx	r3
   2d1b4:	0003      	movs	r3, r0
   2d1b6:	61fb      	str	r3, [r7, #28]
   2d1b8:	69fb      	ldr	r3, [r7, #28]
   2d1ba:	2b00      	cmp	r3, #0
   2d1bc:	d102      	bne.n	2d1c4 <keepalive+0x84>
                c->ping_outstanding = 1;
   2d1be:	687b      	ldr	r3, [r7, #4]
   2d1c0:	2201      	movs	r2, #1
   2d1c2:	771a      	strb	r2, [r3, #28]
        }
    }

exit:
    return rc;
   2d1c4:	69fb      	ldr	r3, [r7, #28]
}
   2d1c6:	0018      	movs	r0, r3
   2d1c8:	46bd      	mov	sp, r7
   2d1ca:	b008      	add	sp, #32
   2d1cc:	bd80      	pop	{r7, pc}
   2d1ce:	46c0      	nop			; (mov r8, r8)
   2d1d0:	0002dac1 	.word	0x0002dac1
   2d1d4:	0002db65 	.word	0x0002db65
   2d1d8:	0002daed 	.word	0x0002daed
   2d1dc:	0002e739 	.word	0x0002e739
   2d1e0:	0002ccdd 	.word	0x0002ccdd

0002d1e4 <cycle>:


int cycle(MQTTClient* c, Timer* timer)
{
   2d1e4:	b5f0      	push	{r4, r5, r6, r7, lr}
   2d1e6:	b095      	sub	sp, #84	; 0x54
   2d1e8:	af06      	add	r7, sp, #24
   2d1ea:	6078      	str	r0, [r7, #4]
   2d1ec:	6039      	str	r1, [r7, #0]
    // read the socket, see what work is due
    unsigned short packet_type = readPacket(c, timer);
   2d1ee:	683a      	ldr	r2, [r7, #0]
   2d1f0:	687b      	ldr	r3, [r7, #4]
   2d1f2:	0011      	movs	r1, r2
   2d1f4:	0018      	movs	r0, r3
   2d1f6:	4b70      	ldr	r3, [pc, #448]	; (2d3b8 <cycle+0x1d4>)
   2d1f8:	4798      	blx	r3
   2d1fa:	0002      	movs	r2, r0
   2d1fc:	232e      	movs	r3, #46	; 0x2e
   2d1fe:	18fb      	adds	r3, r7, r3
   2d200:	801a      	strh	r2, [r3, #0]
    
    int len = 0,
   2d202:	2300      	movs	r3, #0
   2d204:	637b      	str	r3, [r7, #52]	; 0x34
        rc = SUCCESS;
   2d206:	2300      	movs	r3, #0
   2d208:	633b      	str	r3, [r7, #48]	; 0x30

    switch (packet_type)
   2d20a:	232e      	movs	r3, #46	; 0x2e
   2d20c:	18fb      	adds	r3, r7, r3
   2d20e:	881b      	ldrh	r3, [r3, #0]
   2d210:	2b0d      	cmp	r3, #13
   2d212:	d900      	bls.n	2d216 <cycle+0x32>
   2d214:	e0bd      	b.n	2d392 <cycle+0x1ae>
   2d216:	009a      	lsls	r2, r3, #2
   2d218:	4b68      	ldr	r3, [pc, #416]	; (2d3bc <cycle+0x1d8>)
   2d21a:	18d3      	adds	r3, r2, r3
   2d21c:	681b      	ldr	r3, [r3, #0]
   2d21e:	469f      	mov	pc, r3
        case PUBLISH:
        {
            MQTTString topicName;
            MQTTMessage msg;
            int intQoS;
            if (MQTTDeserialize_publish(&msg.dup, &intQoS, &msg.retained, &msg.id, &topicName,
   2d220:	687b      	ldr	r3, [r7, #4]
   2d222:	695a      	ldr	r2, [r3, #20]
               (unsigned char**)&msg.payload, (int*)&msg.payloadlen, c->readbuf, c->readbuf_size) != 1)
   2d224:	687b      	ldr	r3, [r7, #4]
   2d226:	68db      	ldr	r3, [r3, #12]
            if (MQTTDeserialize_publish(&msg.dup, &intQoS, &msg.retained, &msg.id, &topicName,
   2d228:	001e      	movs	r6, r3
   2d22a:	2310      	movs	r3, #16
   2d22c:	18fb      	adds	r3, r7, r3
   2d22e:	1d1d      	adds	r5, r3, #4
   2d230:	2310      	movs	r3, #16
   2d232:	18fb      	adds	r3, r7, r3
   2d234:	1c5c      	adds	r4, r3, #1
   2d236:	230c      	movs	r3, #12
   2d238:	18f9      	adds	r1, r7, r3
   2d23a:	2310      	movs	r3, #16
   2d23c:	18fb      	adds	r3, r7, r3
   2d23e:	1c98      	adds	r0, r3, #2
   2d240:	9604      	str	r6, [sp, #16]
   2d242:	9203      	str	r2, [sp, #12]
   2d244:	2310      	movs	r3, #16
   2d246:	18fb      	adds	r3, r7, r3
   2d248:	330c      	adds	r3, #12
   2d24a:	9302      	str	r3, [sp, #8]
   2d24c:	2310      	movs	r3, #16
   2d24e:	18fb      	adds	r3, r7, r3
   2d250:	3308      	adds	r3, #8
   2d252:	9301      	str	r3, [sp, #4]
   2d254:	2320      	movs	r3, #32
   2d256:	18fb      	adds	r3, r7, r3
   2d258:	9300      	str	r3, [sp, #0]
   2d25a:	002b      	movs	r3, r5
   2d25c:	0022      	movs	r2, r4
   2d25e:	4c58      	ldr	r4, [pc, #352]	; (2d3c0 <cycle+0x1dc>)
   2d260:	47a0      	blx	r4
   2d262:	0003      	movs	r3, r0
   2d264:	2b01      	cmp	r3, #1
   2d266:	d000      	beq.n	2d26a <cycle+0x86>
   2d268:	e098      	b.n	2d39c <cycle+0x1b8>
                goto exit;
            msg.qos = (enum QoS)intQoS;
   2d26a:	68fb      	ldr	r3, [r7, #12]
   2d26c:	b2da      	uxtb	r2, r3
   2d26e:	2310      	movs	r3, #16
   2d270:	18fb      	adds	r3, r7, r3
   2d272:	701a      	strb	r2, [r3, #0]
            deliverMessage(c, &topicName, &msg);
   2d274:	2310      	movs	r3, #16
   2d276:	18fa      	adds	r2, r7, r3
   2d278:	2320      	movs	r3, #32
   2d27a:	18f9      	adds	r1, r7, r3
   2d27c:	687b      	ldr	r3, [r7, #4]
   2d27e:	0018      	movs	r0, r3
   2d280:	4b50      	ldr	r3, [pc, #320]	; (2d3c4 <cycle+0x1e0>)
   2d282:	4798      	blx	r3
            if (msg.qos != QOS0)
   2d284:	2310      	movs	r3, #16
   2d286:	18fb      	adds	r3, r7, r3
   2d288:	781b      	ldrb	r3, [r3, #0]
   2d28a:	2b00      	cmp	r3, #0
   2d28c:	d100      	bne.n	2d290 <cycle+0xac>
   2d28e:	e07d      	b.n	2d38c <cycle+0x1a8>
            {
                if (msg.qos == QOS1)
   2d290:	2310      	movs	r3, #16
   2d292:	18fb      	adds	r3, r7, r3
   2d294:	781b      	ldrb	r3, [r3, #0]
   2d296:	2b01      	cmp	r3, #1
   2d298:	d10f      	bne.n	2d2ba <cycle+0xd6>
                    len = MQTTSerialize_ack(c->buf, c->buf_size, PUBACK, 0, msg.id);
   2d29a:	687b      	ldr	r3, [r7, #4]
   2d29c:	6918      	ldr	r0, [r3, #16]
   2d29e:	687b      	ldr	r3, [r7, #4]
   2d2a0:	689b      	ldr	r3, [r3, #8]
   2d2a2:	0019      	movs	r1, r3
   2d2a4:	2310      	movs	r3, #16
   2d2a6:	18fb      	adds	r3, r7, r3
   2d2a8:	889b      	ldrh	r3, [r3, #4]
   2d2aa:	9300      	str	r3, [sp, #0]
   2d2ac:	2300      	movs	r3, #0
   2d2ae:	2204      	movs	r2, #4
   2d2b0:	4c45      	ldr	r4, [pc, #276]	; (2d3c8 <cycle+0x1e4>)
   2d2b2:	47a0      	blx	r4
   2d2b4:	0003      	movs	r3, r0
   2d2b6:	637b      	str	r3, [r7, #52]	; 0x34
   2d2b8:	e013      	b.n	2d2e2 <cycle+0xfe>
                else if (msg.qos == QOS2)
   2d2ba:	2310      	movs	r3, #16
   2d2bc:	18fb      	adds	r3, r7, r3
   2d2be:	781b      	ldrb	r3, [r3, #0]
   2d2c0:	2b02      	cmp	r3, #2
   2d2c2:	d10e      	bne.n	2d2e2 <cycle+0xfe>
                    len = MQTTSerialize_ack(c->buf, c->buf_size, PUBREC, 0, msg.id);
   2d2c4:	687b      	ldr	r3, [r7, #4]
   2d2c6:	6918      	ldr	r0, [r3, #16]
   2d2c8:	687b      	ldr	r3, [r7, #4]
   2d2ca:	689b      	ldr	r3, [r3, #8]
   2d2cc:	0019      	movs	r1, r3
   2d2ce:	2310      	movs	r3, #16
   2d2d0:	18fb      	adds	r3, r7, r3
   2d2d2:	889b      	ldrh	r3, [r3, #4]
   2d2d4:	9300      	str	r3, [sp, #0]
   2d2d6:	2300      	movs	r3, #0
   2d2d8:	2205      	movs	r2, #5
   2d2da:	4c3b      	ldr	r4, [pc, #236]	; (2d3c8 <cycle+0x1e4>)
   2d2dc:	47a0      	blx	r4
   2d2de:	0003      	movs	r3, r0
   2d2e0:	637b      	str	r3, [r7, #52]	; 0x34
                if (len <= 0)
   2d2e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   2d2e4:	2b00      	cmp	r3, #0
   2d2e6:	dc03      	bgt.n	2d2f0 <cycle+0x10c>
                    rc = FAILURE;
   2d2e8:	2301      	movs	r3, #1
   2d2ea:	425b      	negs	r3, r3
   2d2ec:	633b      	str	r3, [r7, #48]	; 0x30
   2d2ee:	e007      	b.n	2d300 <cycle+0x11c>
                else
                    rc = sendPacket(c, len, timer);
   2d2f0:	683a      	ldr	r2, [r7, #0]
   2d2f2:	6b79      	ldr	r1, [r7, #52]	; 0x34
   2d2f4:	687b      	ldr	r3, [r7, #4]
   2d2f6:	0018      	movs	r0, r3
   2d2f8:	4b34      	ldr	r3, [pc, #208]	; (2d3cc <cycle+0x1e8>)
   2d2fa:	4798      	blx	r3
   2d2fc:	0003      	movs	r3, r0
   2d2fe:	633b      	str	r3, [r7, #48]	; 0x30
                if (rc == FAILURE)
   2d300:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   2d302:	3301      	adds	r3, #1
   2d304:	d142      	bne.n	2d38c <cycle+0x1a8>
                    goto exit; // there was a problem
   2d306:	46c0      	nop			; (mov r8, r8)
   2d308:	e049      	b.n	2d39e <cycle+0x1ba>
        }
        case PUBREC:
        {
            unsigned short mypacketid;
            unsigned char dup, type;
            if (MQTTDeserialize_ack(&type, &dup, &mypacketid, c->readbuf, c->readbuf_size) != 1)
   2d30a:	687b      	ldr	r3, [r7, #4]
   2d30c:	695c      	ldr	r4, [r3, #20]
   2d30e:	687b      	ldr	r3, [r7, #4]
   2d310:	68db      	ldr	r3, [r3, #12]
   2d312:	220a      	movs	r2, #10
   2d314:	18ba      	adds	r2, r7, r2
   2d316:	2109      	movs	r1, #9
   2d318:	1879      	adds	r1, r7, r1
   2d31a:	2008      	movs	r0, #8
   2d31c:	1838      	adds	r0, r7, r0
   2d31e:	9300      	str	r3, [sp, #0]
   2d320:	0023      	movs	r3, r4
   2d322:	4c2b      	ldr	r4, [pc, #172]	; (2d3d0 <cycle+0x1ec>)
   2d324:	47a0      	blx	r4
   2d326:	0003      	movs	r3, r0
   2d328:	2b01      	cmp	r3, #1
   2d32a:	d003      	beq.n	2d334 <cycle+0x150>
                rc = FAILURE;
   2d32c:	2301      	movs	r3, #1
   2d32e:	425b      	negs	r3, r3
   2d330:	633b      	str	r3, [r7, #48]	; 0x30
   2d332:	e023      	b.n	2d37c <cycle+0x198>
            else if ((len = MQTTSerialize_ack(c->buf, c->buf_size, PUBREL, 0, mypacketid)) <= 0)
   2d334:	687b      	ldr	r3, [r7, #4]
   2d336:	6918      	ldr	r0, [r3, #16]
   2d338:	687b      	ldr	r3, [r7, #4]
   2d33a:	689b      	ldr	r3, [r3, #8]
   2d33c:	0019      	movs	r1, r3
   2d33e:	230a      	movs	r3, #10
   2d340:	18fb      	adds	r3, r7, r3
   2d342:	881b      	ldrh	r3, [r3, #0]
   2d344:	9300      	str	r3, [sp, #0]
   2d346:	2300      	movs	r3, #0
   2d348:	2206      	movs	r2, #6
   2d34a:	4c1f      	ldr	r4, [pc, #124]	; (2d3c8 <cycle+0x1e4>)
   2d34c:	47a0      	blx	r4
   2d34e:	0003      	movs	r3, r0
   2d350:	637b      	str	r3, [r7, #52]	; 0x34
   2d352:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   2d354:	2b00      	cmp	r3, #0
   2d356:	dc03      	bgt.n	2d360 <cycle+0x17c>
                rc = FAILURE;
   2d358:	2301      	movs	r3, #1
   2d35a:	425b      	negs	r3, r3
   2d35c:	633b      	str	r3, [r7, #48]	; 0x30
   2d35e:	e00d      	b.n	2d37c <cycle+0x198>
            else if ((rc = sendPacket(c, len, timer)) != SUCCESS) // send the PUBREL packet
   2d360:	683a      	ldr	r2, [r7, #0]
   2d362:	6b79      	ldr	r1, [r7, #52]	; 0x34
   2d364:	687b      	ldr	r3, [r7, #4]
   2d366:	0018      	movs	r0, r3
   2d368:	4b18      	ldr	r3, [pc, #96]	; (2d3cc <cycle+0x1e8>)
   2d36a:	4798      	blx	r3
   2d36c:	0003      	movs	r3, r0
   2d36e:	633b      	str	r3, [r7, #48]	; 0x30
   2d370:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   2d372:	2b00      	cmp	r3, #0
   2d374:	d002      	beq.n	2d37c <cycle+0x198>
                rc = FAILURE; // there was a problem
   2d376:	2301      	movs	r3, #1
   2d378:	425b      	negs	r3, r3
   2d37a:	633b      	str	r3, [r7, #48]	; 0x30
            if (rc == FAILURE)
   2d37c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   2d37e:	3301      	adds	r3, #1
   2d380:	d106      	bne.n	2d390 <cycle+0x1ac>
                goto exit; // there was a problem
   2d382:	e00c      	b.n	2d39e <cycle+0x1ba>
            break;
        }
        case PUBCOMP:
            break;
        case PINGRESP:
            c->ping_outstanding = 0;
   2d384:	687b      	ldr	r3, [r7, #4]
   2d386:	2200      	movs	r2, #0
   2d388:	771a      	strb	r2, [r3, #28]
            break;
   2d38a:	e002      	b.n	2d392 <cycle+0x1ae>
            break;
   2d38c:	46c0      	nop			; (mov r8, r8)
   2d38e:	e000      	b.n	2d392 <cycle+0x1ae>
            break;
   2d390:	46c0      	nop			; (mov r8, r8)
    }
    keepalive(c);
   2d392:	687b      	ldr	r3, [r7, #4]
   2d394:	0018      	movs	r0, r3
   2d396:	4b0f      	ldr	r3, [pc, #60]	; (2d3d4 <cycle+0x1f0>)
   2d398:	4798      	blx	r3
   2d39a:	e000      	b.n	2d39e <cycle+0x1ba>
                goto exit;
   2d39c:	46c0      	nop			; (mov r8, r8)
exit:
    if (rc == SUCCESS)
   2d39e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   2d3a0:	2b00      	cmp	r3, #0
   2d3a2:	d103      	bne.n	2d3ac <cycle+0x1c8>
        rc = packet_type;
   2d3a4:	232e      	movs	r3, #46	; 0x2e
   2d3a6:	18fb      	adds	r3, r7, r3
   2d3a8:	881b      	ldrh	r3, [r3, #0]
   2d3aa:	633b      	str	r3, [r7, #48]	; 0x30
    return rc;
   2d3ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
   2d3ae:	0018      	movs	r0, r3
   2d3b0:	46bd      	mov	sp, r7
   2d3b2:	b00f      	add	sp, #60	; 0x3c
   2d3b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
   2d3b6:	46c0      	nop			; (mov r8, r8)
   2d3b8:	0002ce99 	.word	0x0002ce99
   2d3bc:	00037fac 	.word	0x00037fac
   2d3c0:	0002e75d 	.word	0x0002e75d
   2d3c4:	0002d055 	.word	0x0002d055
   2d3c8:	0002ef55 	.word	0x0002ef55
   2d3cc:	0002ccdd 	.word	0x0002ccdd
   2d3d0:	0002e861 	.word	0x0002e861
   2d3d4:	0002d141 	.word	0x0002d141

0002d3d8 <MQTTYield>:


int MQTTYield(MQTTClient* c, int timeout_ms)
{
   2d3d8:	b580      	push	{r7, lr}
   2d3da:	b086      	sub	sp, #24
   2d3dc:	af00      	add	r7, sp, #0
   2d3de:	6078      	str	r0, [r7, #4]
   2d3e0:	6039      	str	r1, [r7, #0]
    int rc = SUCCESS;
   2d3e2:	2300      	movs	r3, #0
   2d3e4:	617b      	str	r3, [r7, #20]
    Timer timer;

    TimerInit(&timer);
   2d3e6:	2308      	movs	r3, #8
   2d3e8:	18fb      	adds	r3, r7, r3
   2d3ea:	0018      	movs	r0, r3
   2d3ec:	4b11      	ldr	r3, [pc, #68]	; (2d434 <MQTTYield+0x5c>)
   2d3ee:	4798      	blx	r3
    TimerCountdownMS(&timer, timeout_ms);
   2d3f0:	683a      	ldr	r2, [r7, #0]
   2d3f2:	2308      	movs	r3, #8
   2d3f4:	18fb      	adds	r3, r7, r3
   2d3f6:	0011      	movs	r1, r2
   2d3f8:	0018      	movs	r0, r3
   2d3fa:	4b0f      	ldr	r3, [pc, #60]	; (2d438 <MQTTYield+0x60>)
   2d3fc:	4798      	blx	r3

	do
    {
        if (cycle(c, &timer) == FAILURE)
   2d3fe:	2308      	movs	r3, #8
   2d400:	18fa      	adds	r2, r7, r3
   2d402:	687b      	ldr	r3, [r7, #4]
   2d404:	0011      	movs	r1, r2
   2d406:	0018      	movs	r0, r3
   2d408:	4b0c      	ldr	r3, [pc, #48]	; (2d43c <MQTTYield+0x64>)
   2d40a:	4798      	blx	r3
   2d40c:	0003      	movs	r3, r0
   2d40e:	3301      	adds	r3, #1
   2d410:	d103      	bne.n	2d41a <MQTTYield+0x42>
        {
            rc = FAILURE;
   2d412:	2301      	movs	r3, #1
   2d414:	425b      	negs	r3, r3
   2d416:	617b      	str	r3, [r7, #20]
            break;
   2d418:	e006      	b.n	2d428 <MQTTYield+0x50>
        }
	} while (!TimerIsExpired(&timer));
   2d41a:	2308      	movs	r3, #8
   2d41c:	18fb      	adds	r3, r7, r3
   2d41e:	0018      	movs	r0, r3
   2d420:	4b07      	ldr	r3, [pc, #28]	; (2d440 <MQTTYield+0x68>)
   2d422:	4798      	blx	r3
   2d424:	1e03      	subs	r3, r0, #0
   2d426:	d0ea      	beq.n	2d3fe <MQTTYield+0x26>
        
    return rc;
   2d428:	697b      	ldr	r3, [r7, #20]
}
   2d42a:	0018      	movs	r0, r3
   2d42c:	46bd      	mov	sp, r7
   2d42e:	b006      	add	sp, #24
   2d430:	bd80      	pop	{r7, pc}
   2d432:	46c0      	nop			; (mov r8, r8)
   2d434:	0002db65 	.word	0x0002db65
   2d438:	0002daed 	.word	0x0002daed
   2d43c:	0002d1e5 	.word	0x0002d1e5
   2d440:	0002dac1 	.word	0x0002dac1

0002d444 <waitfor>:
}
#endif


int waitfor(MQTTClient* c, int packet_type, Timer* timer)
{
   2d444:	b580      	push	{r7, lr}
   2d446:	b086      	sub	sp, #24
   2d448:	af00      	add	r7, sp, #0
   2d44a:	60f8      	str	r0, [r7, #12]
   2d44c:	60b9      	str	r1, [r7, #8]
   2d44e:	607a      	str	r2, [r7, #4]
    int rc = FAILURE;
   2d450:	2301      	movs	r3, #1
   2d452:	425b      	negs	r3, r3
   2d454:	617b      	str	r3, [r7, #20]
    
    do
    {
        if (TimerIsExpired(timer))
   2d456:	687b      	ldr	r3, [r7, #4]
   2d458:	0018      	movs	r0, r3
   2d45a:	4b0b      	ldr	r3, [pc, #44]	; (2d488 <waitfor+0x44>)
   2d45c:	4798      	blx	r3
   2d45e:	1e03      	subs	r3, r0, #0
   2d460:	d10c      	bne.n	2d47c <waitfor+0x38>
            break; // we timed out
    }
    while ((rc = cycle(c, timer)) != packet_type);  
   2d462:	687a      	ldr	r2, [r7, #4]
   2d464:	68fb      	ldr	r3, [r7, #12]
   2d466:	0011      	movs	r1, r2
   2d468:	0018      	movs	r0, r3
   2d46a:	4b08      	ldr	r3, [pc, #32]	; (2d48c <waitfor+0x48>)
   2d46c:	4798      	blx	r3
   2d46e:	0003      	movs	r3, r0
   2d470:	617b      	str	r3, [r7, #20]
   2d472:	697a      	ldr	r2, [r7, #20]
   2d474:	68bb      	ldr	r3, [r7, #8]
   2d476:	429a      	cmp	r2, r3
   2d478:	d1ed      	bne.n	2d456 <waitfor+0x12>
   2d47a:	e000      	b.n	2d47e <waitfor+0x3a>
            break; // we timed out
   2d47c:	46c0      	nop			; (mov r8, r8)
    
    return rc;
   2d47e:	697b      	ldr	r3, [r7, #20]
}
   2d480:	0018      	movs	r0, r3
   2d482:	46bd      	mov	sp, r7
   2d484:	b006      	add	sp, #24
   2d486:	bd80      	pop	{r7, pc}
   2d488:	0002dac1 	.word	0x0002dac1
   2d48c:	0002d1e5 	.word	0x0002d1e5

0002d490 <MQTTConnect>:


int MQTTConnect(MQTTClient* c, MQTTPacket_connectData* options)
{
   2d490:	b590      	push	{r4, r7, lr}
   2d492:	b09f      	sub	sp, #124	; 0x7c
   2d494:	af00      	add	r7, sp, #0
   2d496:	6078      	str	r0, [r7, #4]
   2d498:	6039      	str	r1, [r7, #0]
    Timer connect_timer;
    int rc = FAILURE;
   2d49a:	2301      	movs	r3, #1
   2d49c:	425b      	negs	r3, r3
   2d49e:	677b      	str	r3, [r7, #116]	; 0x74
    MQTTPacket_connectData default_options = MQTTPacket_connectData_initializer;
   2d4a0:	230c      	movs	r3, #12
   2d4a2:	18fa      	adds	r2, r7, r3
   2d4a4:	4b41      	ldr	r3, [pc, #260]	; (2d5ac <MQTTConnect+0x11c>)
   2d4a6:	0010      	movs	r0, r2
   2d4a8:	0019      	movs	r1, r3
   2d4aa:	2358      	movs	r3, #88	; 0x58
   2d4ac:	001a      	movs	r2, r3
   2d4ae:	4b40      	ldr	r3, [pc, #256]	; (2d5b0 <MQTTConnect+0x120>)
   2d4b0:	4798      	blx	r3
    int len = 0;
   2d4b2:	2300      	movs	r3, #0
   2d4b4:	673b      	str	r3, [r7, #112]	; 0x70

#if defined(MQTT_TASK)
	MutexLock(&c->mutex);
#endif
	if (c->isconnected) /* don't send connect packet again if we are already connected */
   2d4b6:	687b      	ldr	r3, [r7, #4]
   2d4b8:	6a1b      	ldr	r3, [r3, #32]
   2d4ba:	2b00      	cmp	r3, #0
   2d4bc:	d166      	bne.n	2d58c <MQTTConnect+0xfc>
		goto exit;
    
    TimerInit(&connect_timer);
   2d4be:	2364      	movs	r3, #100	; 0x64
   2d4c0:	18fb      	adds	r3, r7, r3
   2d4c2:	0018      	movs	r0, r3
   2d4c4:	4b3b      	ldr	r3, [pc, #236]	; (2d5b4 <MQTTConnect+0x124>)
   2d4c6:	4798      	blx	r3
    TimerCountdownMS(&connect_timer, c->command_timeout_ms);
   2d4c8:	687b      	ldr	r3, [r7, #4]
   2d4ca:	685a      	ldr	r2, [r3, #4]
   2d4cc:	2364      	movs	r3, #100	; 0x64
   2d4ce:	18fb      	adds	r3, r7, r3
   2d4d0:	0011      	movs	r1, r2
   2d4d2:	0018      	movs	r0, r3
   2d4d4:	4b38      	ldr	r3, [pc, #224]	; (2d5b8 <MQTTConnect+0x128>)
   2d4d6:	4798      	blx	r3

    if (options == 0)
   2d4d8:	683b      	ldr	r3, [r7, #0]
   2d4da:	2b00      	cmp	r3, #0
   2d4dc:	d102      	bne.n	2d4e4 <MQTTConnect+0x54>
        options = &default_options; /* set default options if none were supplied */
   2d4de:	230c      	movs	r3, #12
   2d4e0:	18fb      	adds	r3, r7, r3
   2d4e2:	603b      	str	r3, [r7, #0]
    
    c->keepAliveInterval = options->keepAliveInterval;
   2d4e4:	683b      	ldr	r3, [r7, #0]
   2d4e6:	8b1b      	ldrh	r3, [r3, #24]
   2d4e8:	001a      	movs	r2, r3
   2d4ea:	687b      	ldr	r3, [r7, #4]
   2d4ec:	619a      	str	r2, [r3, #24]
    TimerCountdown(&c->ping_timer, c->keepAliveInterval);
   2d4ee:	687b      	ldr	r3, [r7, #4]
   2d4f0:	3354      	adds	r3, #84	; 0x54
   2d4f2:	001a      	movs	r2, r3
   2d4f4:	687b      	ldr	r3, [r7, #4]
   2d4f6:	699b      	ldr	r3, [r3, #24]
   2d4f8:	0019      	movs	r1, r3
   2d4fa:	0010      	movs	r0, r2
   2d4fc:	4b2f      	ldr	r3, [pc, #188]	; (2d5bc <MQTTConnect+0x12c>)
   2d4fe:	4798      	blx	r3
    if ((len = MQTTSerialize_connect(c->buf, c->buf_size, options)) <= 0)
   2d500:	687b      	ldr	r3, [r7, #4]
   2d502:	6918      	ldr	r0, [r3, #16]
   2d504:	687b      	ldr	r3, [r7, #4]
   2d506:	689b      	ldr	r3, [r3, #8]
   2d508:	0019      	movs	r1, r3
   2d50a:	683b      	ldr	r3, [r7, #0]
   2d50c:	001a      	movs	r2, r3
   2d50e:	4b2c      	ldr	r3, [pc, #176]	; (2d5c0 <MQTTConnect+0x130>)
   2d510:	4798      	blx	r3
   2d512:	0003      	movs	r3, r0
   2d514:	673b      	str	r3, [r7, #112]	; 0x70
   2d516:	6f3b      	ldr	r3, [r7, #112]	; 0x70
   2d518:	2b00      	cmp	r3, #0
   2d51a:	dd39      	ble.n	2d590 <MQTTConnect+0x100>
        goto exit;
    if ((rc = sendPacket(c, len, &connect_timer)) != SUCCESS)  // send the connect packet
   2d51c:	2364      	movs	r3, #100	; 0x64
   2d51e:	18fa      	adds	r2, r7, r3
   2d520:	6f39      	ldr	r1, [r7, #112]	; 0x70
   2d522:	687b      	ldr	r3, [r7, #4]
   2d524:	0018      	movs	r0, r3
   2d526:	4b27      	ldr	r3, [pc, #156]	; (2d5c4 <MQTTConnect+0x134>)
   2d528:	4798      	blx	r3
   2d52a:	0003      	movs	r3, r0
   2d52c:	677b      	str	r3, [r7, #116]	; 0x74
   2d52e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   2d530:	2b00      	cmp	r3, #0
   2d532:	d12f      	bne.n	2d594 <MQTTConnect+0x104>
        goto exit; // there was a problem
    
    // this will be a blocking call, wait for the connack
    if (waitfor(c, CONNACK, &connect_timer) == CONNACK)
   2d534:	2364      	movs	r3, #100	; 0x64
   2d536:	18fa      	adds	r2, r7, r3
   2d538:	687b      	ldr	r3, [r7, #4]
   2d53a:	2102      	movs	r1, #2
   2d53c:	0018      	movs	r0, r3
   2d53e:	4b22      	ldr	r3, [pc, #136]	; (2d5c8 <MQTTConnect+0x138>)
   2d540:	4798      	blx	r3
   2d542:	0003      	movs	r3, r0
   2d544:	2b02      	cmp	r3, #2
   2d546:	d11d      	bne.n	2d584 <MQTTConnect+0xf4>
    {
        unsigned char connack_rc = 255;
   2d548:	230b      	movs	r3, #11
   2d54a:	18fb      	adds	r3, r7, r3
   2d54c:	22ff      	movs	r2, #255	; 0xff
   2d54e:	701a      	strb	r2, [r3, #0]
        unsigned char sessionPresent = 0;
   2d550:	230a      	movs	r3, #10
   2d552:	18fb      	adds	r3, r7, r3
   2d554:	2200      	movs	r2, #0
   2d556:	701a      	strb	r2, [r3, #0]
        if (MQTTDeserialize_connack(&sessionPresent, &connack_rc, c->readbuf, c->readbuf_size) == 1)
   2d558:	687b      	ldr	r3, [r7, #4]
   2d55a:	695a      	ldr	r2, [r3, #20]
   2d55c:	687b      	ldr	r3, [r7, #4]
   2d55e:	68db      	ldr	r3, [r3, #12]
   2d560:	210b      	movs	r1, #11
   2d562:	1879      	adds	r1, r7, r1
   2d564:	200a      	movs	r0, #10
   2d566:	1838      	adds	r0, r7, r0
   2d568:	4c18      	ldr	r4, [pc, #96]	; (2d5cc <MQTTConnect+0x13c>)
   2d56a:	47a0      	blx	r4
   2d56c:	0003      	movs	r3, r0
   2d56e:	2b01      	cmp	r3, #1
   2d570:	d104      	bne.n	2d57c <MQTTConnect+0xec>
            rc = connack_rc;
   2d572:	230b      	movs	r3, #11
   2d574:	18fb      	adds	r3, r7, r3
   2d576:	781b      	ldrb	r3, [r3, #0]
   2d578:	677b      	str	r3, [r7, #116]	; 0x74
   2d57a:	e00c      	b.n	2d596 <MQTTConnect+0x106>
        else
            rc = FAILURE;
   2d57c:	2301      	movs	r3, #1
   2d57e:	425b      	negs	r3, r3
   2d580:	677b      	str	r3, [r7, #116]	; 0x74
   2d582:	e008      	b.n	2d596 <MQTTConnect+0x106>
    }
    else
        rc = FAILURE;
   2d584:	2301      	movs	r3, #1
   2d586:	425b      	negs	r3, r3
   2d588:	677b      	str	r3, [r7, #116]	; 0x74
   2d58a:	e004      	b.n	2d596 <MQTTConnect+0x106>
		goto exit;
   2d58c:	46c0      	nop			; (mov r8, r8)
   2d58e:	e002      	b.n	2d596 <MQTTConnect+0x106>
        goto exit;
   2d590:	46c0      	nop			; (mov r8, r8)
   2d592:	e000      	b.n	2d596 <MQTTConnect+0x106>
        goto exit; // there was a problem
   2d594:	46c0      	nop			; (mov r8, r8)
    
exit:
    if (rc == SUCCESS)
   2d596:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   2d598:	2b00      	cmp	r3, #0
   2d59a:	d102      	bne.n	2d5a2 <MQTTConnect+0x112>
        c->isconnected = 1;
   2d59c:	687b      	ldr	r3, [r7, #4]
   2d59e:	2201      	movs	r2, #1
   2d5a0:	621a      	str	r2, [r3, #32]

#if defined(MQTT_TASK)
	MutexUnlock(&c->mutex);
#endif

    return rc;
   2d5a2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
}
   2d5a4:	0018      	movs	r0, r3
   2d5a6:	46bd      	mov	sp, r7
   2d5a8:	b01f      	add	sp, #124	; 0x7c
   2d5aa:	bd90      	pop	{r4, r7, pc}
   2d5ac:	00037fe4 	.word	0x00037fe4
   2d5b0:	000330e1 	.word	0x000330e1
   2d5b4:	0002db65 	.word	0x0002db65
   2d5b8:	0002daed 	.word	0x0002daed
   2d5bc:	0002db15 	.word	0x0002db15
   2d5c0:	0002e341 	.word	0x0002e341
   2d5c4:	0002ccdd 	.word	0x0002ccdd
   2d5c8:	0002d445 	.word	0x0002d445
   2d5cc:	0002e5bd 	.word	0x0002e5bd

0002d5d0 <MQTTSubscribe>:


int MQTTSubscribe(MQTTClient* c, const char* topicFilter, enum QoS qos, messageHandler msgHandler)
{ 
   2d5d0:	b5b0      	push	{r4, r5, r7, lr}
   2d5d2:	b096      	sub	sp, #88	; 0x58
   2d5d4:	af04      	add	r7, sp, #16
   2d5d6:	60f8      	str	r0, [r7, #12]
   2d5d8:	60b9      	str	r1, [r7, #8]
   2d5da:	603b      	str	r3, [r7, #0]
   2d5dc:	1dfb      	adds	r3, r7, #7
   2d5de:	701a      	strb	r2, [r3, #0]
    int rc = FAILURE;  
   2d5e0:	2301      	movs	r3, #1
   2d5e2:	425b      	negs	r3, r3
   2d5e4:	647b      	str	r3, [r7, #68]	; 0x44
    Timer timer;
    int len = 0;
   2d5e6:	2300      	movs	r3, #0
   2d5e8:	63fb      	str	r3, [r7, #60]	; 0x3c
    MQTTString topic = MQTTString_initializer;
   2d5ea:	2324      	movs	r3, #36	; 0x24
   2d5ec:	18fb      	adds	r3, r7, r3
   2d5ee:	2200      	movs	r2, #0
   2d5f0:	601a      	str	r2, [r3, #0]
   2d5f2:	2324      	movs	r3, #36	; 0x24
   2d5f4:	18fb      	adds	r3, r7, r3
   2d5f6:	2200      	movs	r2, #0
   2d5f8:	605a      	str	r2, [r3, #4]
   2d5fa:	2324      	movs	r3, #36	; 0x24
   2d5fc:	18fb      	adds	r3, r7, r3
   2d5fe:	2200      	movs	r2, #0
   2d600:	609a      	str	r2, [r3, #8]
	int Qoss = (int) qos;
   2d602:	1dfb      	adds	r3, r7, #7
   2d604:	781b      	ldrb	r3, [r3, #0]
   2d606:	623b      	str	r3, [r7, #32]
    topic.cstring = (char *)topicFilter;
   2d608:	2324      	movs	r3, #36	; 0x24
   2d60a:	18fb      	adds	r3, r7, r3
   2d60c:	68ba      	ldr	r2, [r7, #8]
   2d60e:	601a      	str	r2, [r3, #0]
    
#if defined(MQTT_TASK)
	MutexLock(&c->mutex);
#endif
	if (!c->isconnected)
   2d610:	68fb      	ldr	r3, [r7, #12]
   2d612:	6a1b      	ldr	r3, [r3, #32]
   2d614:	2b00      	cmp	r3, #0
   2d616:	d100      	bne.n	2d61a <MQTTSubscribe+0x4a>
   2d618:	e088      	b.n	2d72c <MQTTSubscribe+0x15c>
		goto exit;

    TimerInit(&timer);
   2d61a:	2330      	movs	r3, #48	; 0x30
   2d61c:	18fb      	adds	r3, r7, r3
   2d61e:	0018      	movs	r0, r3
   2d620:	4b47      	ldr	r3, [pc, #284]	; (2d740 <MQTTSubscribe+0x170>)
   2d622:	4798      	blx	r3
    TimerCountdownMS(&timer, c->command_timeout_ms);
   2d624:	68fb      	ldr	r3, [r7, #12]
   2d626:	685a      	ldr	r2, [r3, #4]
   2d628:	2330      	movs	r3, #48	; 0x30
   2d62a:	18fb      	adds	r3, r7, r3
   2d62c:	0011      	movs	r1, r2
   2d62e:	0018      	movs	r0, r3
   2d630:	4b44      	ldr	r3, [pc, #272]	; (2d744 <MQTTSubscribe+0x174>)
   2d632:	4798      	blx	r3
    
	len = MQTTSerialize_subscribe(c->buf, c->buf_size, 0, getNextPacketId(c), 1, &topic, (int*)&Qoss);
   2d634:	68fb      	ldr	r3, [r7, #12]
   2d636:	691c      	ldr	r4, [r3, #16]
   2d638:	68fb      	ldr	r3, [r7, #12]
   2d63a:	689b      	ldr	r3, [r3, #8]
   2d63c:	001d      	movs	r5, r3
   2d63e:	68fb      	ldr	r3, [r7, #12]
   2d640:	0018      	movs	r0, r3
   2d642:	4b41      	ldr	r3, [pc, #260]	; (2d748 <MQTTSubscribe+0x178>)
   2d644:	4798      	blx	r3
   2d646:	0003      	movs	r3, r0
   2d648:	b29a      	uxth	r2, r3
   2d64a:	2320      	movs	r3, #32
   2d64c:	18fb      	adds	r3, r7, r3
   2d64e:	9302      	str	r3, [sp, #8]
   2d650:	2324      	movs	r3, #36	; 0x24
   2d652:	18fb      	adds	r3, r7, r3
   2d654:	9301      	str	r3, [sp, #4]
   2d656:	2301      	movs	r3, #1
   2d658:	9300      	str	r3, [sp, #0]
   2d65a:	0013      	movs	r3, r2
   2d65c:	2200      	movs	r2, #0
   2d65e:	0029      	movs	r1, r5
   2d660:	0020      	movs	r0, r4
   2d662:	4c3a      	ldr	r4, [pc, #232]	; (2d74c <MQTTSubscribe+0x17c>)
   2d664:	47a0      	blx	r4
   2d666:	0003      	movs	r3, r0
   2d668:	63fb      	str	r3, [r7, #60]	; 0x3c
 //   len = MQTTSerialize_subscribe(c->buf, c->buf_size, 0, getNextPacketId(c), 1, &topic, qos);
    if (len <= 0)
   2d66a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   2d66c:	2b00      	cmp	r3, #0
   2d66e:	dd5f      	ble.n	2d730 <MQTTSubscribe+0x160>
        goto exit;
    if ((rc = sendPacket(c, len, &timer)) != SUCCESS) // send the subscribe packet
   2d670:	2330      	movs	r3, #48	; 0x30
   2d672:	18fa      	adds	r2, r7, r3
   2d674:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
   2d676:	68fb      	ldr	r3, [r7, #12]
   2d678:	0018      	movs	r0, r3
   2d67a:	4b35      	ldr	r3, [pc, #212]	; (2d750 <MQTTSubscribe+0x180>)
   2d67c:	4798      	blx	r3
   2d67e:	0003      	movs	r3, r0
   2d680:	647b      	str	r3, [r7, #68]	; 0x44
   2d682:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   2d684:	2b00      	cmp	r3, #0
   2d686:	d155      	bne.n	2d734 <MQTTSubscribe+0x164>
        goto exit;             // there was a problem
    
    if (waitfor(c, SUBACK, &timer) == SUBACK)      // wait for suback 
   2d688:	2330      	movs	r3, #48	; 0x30
   2d68a:	18fa      	adds	r2, r7, r3
   2d68c:	68fb      	ldr	r3, [r7, #12]
   2d68e:	2109      	movs	r1, #9
   2d690:	0018      	movs	r0, r3
   2d692:	4b30      	ldr	r3, [pc, #192]	; (2d754 <MQTTSubscribe+0x184>)
   2d694:	4798      	blx	r3
   2d696:	0003      	movs	r3, r0
   2d698:	2b09      	cmp	r3, #9
   2d69a:	d143      	bne.n	2d724 <MQTTSubscribe+0x154>
    {
        int count = 0, grantedQoS = -1;
   2d69c:	2300      	movs	r3, #0
   2d69e:	61fb      	str	r3, [r7, #28]
   2d6a0:	2301      	movs	r3, #1
   2d6a2:	425b      	negs	r3, r3
   2d6a4:	61bb      	str	r3, [r7, #24]
        unsigned short mypacketid;
        if (MQTTDeserialize_suback(&mypacketid, 1, &count, &grantedQoS, c->readbuf, c->readbuf_size) == 1)
   2d6a6:	68fb      	ldr	r3, [r7, #12]
   2d6a8:	695a      	ldr	r2, [r3, #20]
   2d6aa:	68fb      	ldr	r3, [r7, #12]
   2d6ac:	68db      	ldr	r3, [r3, #12]
   2d6ae:	001c      	movs	r4, r3
   2d6b0:	2318      	movs	r3, #24
   2d6b2:	18fb      	adds	r3, r7, r3
   2d6b4:	211c      	movs	r1, #28
   2d6b6:	1879      	adds	r1, r7, r1
   2d6b8:	2016      	movs	r0, #22
   2d6ba:	1838      	adds	r0, r7, r0
   2d6bc:	9401      	str	r4, [sp, #4]
   2d6be:	9200      	str	r2, [sp, #0]
   2d6c0:	000a      	movs	r2, r1
   2d6c2:	2101      	movs	r1, #1
   2d6c4:	4c24      	ldr	r4, [pc, #144]	; (2d758 <MQTTSubscribe+0x188>)
   2d6c6:	47a0      	blx	r4
   2d6c8:	0003      	movs	r3, r0
   2d6ca:	2b01      	cmp	r3, #1
   2d6cc:	d101      	bne.n	2d6d2 <MQTTSubscribe+0x102>
            rc = grantedQoS; // 0, 1, 2 or 0x80 
   2d6ce:	69bb      	ldr	r3, [r7, #24]
   2d6d0:	647b      	str	r3, [r7, #68]	; 0x44
        if (rc != 0x80)
   2d6d2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   2d6d4:	2b80      	cmp	r3, #128	; 0x80
   2d6d6:	d02e      	beq.n	2d736 <MQTTSubscribe+0x166>
        {
            int i;
            for (i = 0; i < MAX_MESSAGE_HANDLERS; ++i)
   2d6d8:	2300      	movs	r3, #0
   2d6da:	643b      	str	r3, [r7, #64]	; 0x40
   2d6dc:	e01e      	b.n	2d71c <MQTTSubscribe+0x14c>
            {
                if (c->messageHandlers[i].topicFilter == 0)
   2d6de:	68fa      	ldr	r2, [r7, #12]
   2d6e0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   2d6e2:	3304      	adds	r3, #4
   2d6e4:	00db      	lsls	r3, r3, #3
   2d6e6:	18d3      	adds	r3, r2, r3
   2d6e8:	3304      	adds	r3, #4
   2d6ea:	681b      	ldr	r3, [r3, #0]
   2d6ec:	2b00      	cmp	r3, #0
   2d6ee:	d112      	bne.n	2d716 <MQTTSubscribe+0x146>
                {
                    c->messageHandlers[i].topicFilter = topicFilter;
   2d6f0:	68fa      	ldr	r2, [r7, #12]
   2d6f2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   2d6f4:	3304      	adds	r3, #4
   2d6f6:	00db      	lsls	r3, r3, #3
   2d6f8:	18d3      	adds	r3, r2, r3
   2d6fa:	3304      	adds	r3, #4
   2d6fc:	68ba      	ldr	r2, [r7, #8]
   2d6fe:	601a      	str	r2, [r3, #0]
                    c->messageHandlers[i].fp = msgHandler;
   2d700:	68fa      	ldr	r2, [r7, #12]
   2d702:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   2d704:	3304      	adds	r3, #4
   2d706:	00db      	lsls	r3, r3, #3
   2d708:	18d3      	adds	r3, r2, r3
   2d70a:	3308      	adds	r3, #8
   2d70c:	683a      	ldr	r2, [r7, #0]
   2d70e:	601a      	str	r2, [r3, #0]
                    rc = 0;
   2d710:	2300      	movs	r3, #0
   2d712:	647b      	str	r3, [r7, #68]	; 0x44
                    break;
   2d714:	e00f      	b.n	2d736 <MQTTSubscribe+0x166>
            for (i = 0; i < MAX_MESSAGE_HANDLERS; ++i)
   2d716:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   2d718:	3301      	adds	r3, #1
   2d71a:	643b      	str	r3, [r7, #64]	; 0x40
   2d71c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   2d71e:	2b04      	cmp	r3, #4
   2d720:	dddd      	ble.n	2d6de <MQTTSubscribe+0x10e>
   2d722:	e008      	b.n	2d736 <MQTTSubscribe+0x166>
                }
            }
        }
    }
    else 
        rc = FAILURE;
   2d724:	2301      	movs	r3, #1
   2d726:	425b      	negs	r3, r3
   2d728:	647b      	str	r3, [r7, #68]	; 0x44
   2d72a:	e004      	b.n	2d736 <MQTTSubscribe+0x166>
		goto exit;
   2d72c:	46c0      	nop			; (mov r8, r8)
   2d72e:	e002      	b.n	2d736 <MQTTSubscribe+0x166>
        goto exit;
   2d730:	46c0      	nop			; (mov r8, r8)
   2d732:	e000      	b.n	2d736 <MQTTSubscribe+0x166>
        goto exit;             // there was a problem
   2d734:	46c0      	nop			; (mov r8, r8)
        
exit:
#if defined(MQTT_TASK)
	MutexUnlock(&c->mutex);
#endif
    return rc;
   2d736:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
   2d738:	0018      	movs	r0, r3
   2d73a:	46bd      	mov	sp, r7
   2d73c:	b012      	add	sp, #72	; 0x48
   2d73e:	bdb0      	pop	{r4, r5, r7, pc}
   2d740:	0002db65 	.word	0x0002db65
   2d744:	0002daed 	.word	0x0002daed
   2d748:	0002ccad 	.word	0x0002ccad
   2d74c:	0002f09d 	.word	0x0002f09d
   2d750:	0002ccdd 	.word	0x0002ccdd
   2d754:	0002d445 	.word	0x0002d445
   2d758:	0002f1ed 	.word	0x0002f1ed

0002d75c <MQTTPublish>:
    return rc;
}


int MQTTPublish(MQTTClient* c, const char* topicName, MQTTMessage* message)
{
   2d75c:	b5f0      	push	{r4, r5, r6, r7, lr}
   2d75e:	46ce      	mov	lr, r9
   2d760:	4647      	mov	r7, r8
   2d762:	b580      	push	{r7, lr}
   2d764:	b097      	sub	sp, #92	; 0x5c
   2d766:	af08      	add	r7, sp, #32
   2d768:	60f8      	str	r0, [r7, #12]
   2d76a:	60b9      	str	r1, [r7, #8]
   2d76c:	607a      	str	r2, [r7, #4]
    int rc = FAILURE;
   2d76e:	2301      	movs	r3, #1
   2d770:	425b      	negs	r3, r3
   2d772:	637b      	str	r3, [r7, #52]	; 0x34
    Timer timer;   
    MQTTString topic = MQTTString_initializer;
   2d774:	2318      	movs	r3, #24
   2d776:	18fb      	adds	r3, r7, r3
   2d778:	2200      	movs	r2, #0
   2d77a:	601a      	str	r2, [r3, #0]
   2d77c:	2318      	movs	r3, #24
   2d77e:	18fb      	adds	r3, r7, r3
   2d780:	2200      	movs	r2, #0
   2d782:	605a      	str	r2, [r3, #4]
   2d784:	2318      	movs	r3, #24
   2d786:	18fb      	adds	r3, r7, r3
   2d788:	2200      	movs	r2, #0
   2d78a:	609a      	str	r2, [r3, #8]
    topic.cstring = (char *)topicName;
   2d78c:	2318      	movs	r3, #24
   2d78e:	18fb      	adds	r3, r7, r3
   2d790:	68ba      	ldr	r2, [r7, #8]
   2d792:	601a      	str	r2, [r3, #0]
    int len = 0;
   2d794:	2300      	movs	r3, #0
   2d796:	633b      	str	r3, [r7, #48]	; 0x30

#if defined(MQTT_TASK)
	MutexLock(&c->mutex);
#endif
	if (!c->isconnected)
   2d798:	68fb      	ldr	r3, [r7, #12]
   2d79a:	6a1b      	ldr	r3, [r3, #32]
   2d79c:	2b00      	cmp	r3, #0
   2d79e:	d100      	bne.n	2d7a2 <MQTTPublish+0x46>
   2d7a0:	e0a0      	b.n	2d8e4 <MQTTPublish+0x188>
		goto exit;

    TimerInit(&timer);
   2d7a2:	2324      	movs	r3, #36	; 0x24
   2d7a4:	18fb      	adds	r3, r7, r3
   2d7a6:	0018      	movs	r0, r3
   2d7a8:	4b55      	ldr	r3, [pc, #340]	; (2d900 <MQTTPublish+0x1a4>)
   2d7aa:	4798      	blx	r3
    TimerCountdownMS(&timer, c->command_timeout_ms);
   2d7ac:	68fb      	ldr	r3, [r7, #12]
   2d7ae:	685a      	ldr	r2, [r3, #4]
   2d7b0:	2324      	movs	r3, #36	; 0x24
   2d7b2:	18fb      	adds	r3, r7, r3
   2d7b4:	0011      	movs	r1, r2
   2d7b6:	0018      	movs	r0, r3
   2d7b8:	4b52      	ldr	r3, [pc, #328]	; (2d904 <MQTTPublish+0x1a8>)
   2d7ba:	4798      	blx	r3

    if (message->qos == QOS1 || message->qos == QOS2)
   2d7bc:	687b      	ldr	r3, [r7, #4]
   2d7be:	781b      	ldrb	r3, [r3, #0]
   2d7c0:	2b01      	cmp	r3, #1
   2d7c2:	d003      	beq.n	2d7cc <MQTTPublish+0x70>
   2d7c4:	687b      	ldr	r3, [r7, #4]
   2d7c6:	781b      	ldrb	r3, [r3, #0]
   2d7c8:	2b02      	cmp	r3, #2
   2d7ca:	d107      	bne.n	2d7dc <MQTTPublish+0x80>
        message->id = getNextPacketId(c);
   2d7cc:	68fb      	ldr	r3, [r7, #12]
   2d7ce:	0018      	movs	r0, r3
   2d7d0:	4b4d      	ldr	r3, [pc, #308]	; (2d908 <MQTTPublish+0x1ac>)
   2d7d2:	4798      	blx	r3
   2d7d4:	0003      	movs	r3, r0
   2d7d6:	b29a      	uxth	r2, r3
   2d7d8:	687b      	ldr	r3, [r7, #4]
   2d7da:	809a      	strh	r2, [r3, #4]
    
    len = MQTTSerialize_publish(c->buf, c->buf_size, 0, message->qos, message->retained, message->id, 
   2d7dc:	68fb      	ldr	r3, [r7, #12]
   2d7de:	691b      	ldr	r3, [r3, #16]
   2d7e0:	469c      	mov	ip, r3
   2d7e2:	68fb      	ldr	r3, [r7, #12]
   2d7e4:	689b      	ldr	r3, [r3, #8]
   2d7e6:	001d      	movs	r5, r3
   2d7e8:	687b      	ldr	r3, [r7, #4]
   2d7ea:	781b      	ldrb	r3, [r3, #0]
   2d7ec:	001e      	movs	r6, r3
   2d7ee:	687b      	ldr	r3, [r7, #4]
   2d7f0:	785b      	ldrb	r3, [r3, #1]
   2d7f2:	4698      	mov	r8, r3
   2d7f4:	687b      	ldr	r3, [r7, #4]
   2d7f6:	889b      	ldrh	r3, [r3, #4]
   2d7f8:	4699      	mov	r9, r3
              topic, (unsigned char*)message->payload, message->payloadlen);
   2d7fa:	687b      	ldr	r3, [r7, #4]
   2d7fc:	689a      	ldr	r2, [r3, #8]
   2d7fe:	687b      	ldr	r3, [r7, #4]
   2d800:	68db      	ldr	r3, [r3, #12]
    len = MQTTSerialize_publish(c->buf, c->buf_size, 0, message->qos, message->retained, message->id, 
   2d802:	9306      	str	r3, [sp, #24]
   2d804:	9205      	str	r2, [sp, #20]
   2d806:	2318      	movs	r3, #24
   2d808:	18fa      	adds	r2, r7, r3
   2d80a:	2308      	movs	r3, #8
   2d80c:	446b      	add	r3, sp
   2d80e:	ca13      	ldmia	r2!, {r0, r1, r4}
   2d810:	c313      	stmia	r3!, {r0, r1, r4}
   2d812:	464b      	mov	r3, r9
   2d814:	9301      	str	r3, [sp, #4]
   2d816:	4643      	mov	r3, r8
   2d818:	9300      	str	r3, [sp, #0]
   2d81a:	0033      	movs	r3, r6
   2d81c:	2200      	movs	r2, #0
   2d81e:	0029      	movs	r1, r5
   2d820:	4660      	mov	r0, ip
   2d822:	4c3a      	ldr	r4, [pc, #232]	; (2d90c <MQTTPublish+0x1b0>)
   2d824:	47a0      	blx	r4
   2d826:	0003      	movs	r3, r0
   2d828:	633b      	str	r3, [r7, #48]	; 0x30
    if (len <= 0)
   2d82a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   2d82c:	2b00      	cmp	r3, #0
   2d82e:	dd5b      	ble.n	2d8e8 <MQTTPublish+0x18c>
        goto exit;
    if ((rc = sendPacket(c, len, &timer)) != SUCCESS) // send the subscribe packet
   2d830:	2324      	movs	r3, #36	; 0x24
   2d832:	18fa      	adds	r2, r7, r3
   2d834:	6b39      	ldr	r1, [r7, #48]	; 0x30
   2d836:	68fb      	ldr	r3, [r7, #12]
   2d838:	0018      	movs	r0, r3
   2d83a:	4b35      	ldr	r3, [pc, #212]	; (2d910 <MQTTPublish+0x1b4>)
   2d83c:	4798      	blx	r3
   2d83e:	0003      	movs	r3, r0
   2d840:	637b      	str	r3, [r7, #52]	; 0x34
   2d842:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   2d844:	2b00      	cmp	r3, #0
   2d846:	d151      	bne.n	2d8ec <MQTTPublish+0x190>
        goto exit; // there was a problem
    
    if (message->qos == QOS1)
   2d848:	687b      	ldr	r3, [r7, #4]
   2d84a:	781b      	ldrb	r3, [r3, #0]
   2d84c:	2b01      	cmp	r3, #1
   2d84e:	d122      	bne.n	2d896 <MQTTPublish+0x13a>
    {
        if (waitfor(c, PUBACK, &timer) == PUBACK)
   2d850:	2324      	movs	r3, #36	; 0x24
   2d852:	18fa      	adds	r2, r7, r3
   2d854:	68fb      	ldr	r3, [r7, #12]
   2d856:	2104      	movs	r1, #4
   2d858:	0018      	movs	r0, r3
   2d85a:	4b2e      	ldr	r3, [pc, #184]	; (2d914 <MQTTPublish+0x1b8>)
   2d85c:	4798      	blx	r3
   2d85e:	0003      	movs	r3, r0
   2d860:	2b04      	cmp	r3, #4
   2d862:	d114      	bne.n	2d88e <MQTTPublish+0x132>
        {
            unsigned short mypacketid;
            unsigned char dup, type;
            if (MQTTDeserialize_ack(&type, &dup, &mypacketid, c->readbuf, c->readbuf_size) != 1)
   2d864:	68fb      	ldr	r3, [r7, #12]
   2d866:	695c      	ldr	r4, [r3, #20]
   2d868:	68fb      	ldr	r3, [r7, #12]
   2d86a:	68db      	ldr	r3, [r3, #12]
   2d86c:	2216      	movs	r2, #22
   2d86e:	18ba      	adds	r2, r7, r2
   2d870:	2115      	movs	r1, #21
   2d872:	1879      	adds	r1, r7, r1
   2d874:	2014      	movs	r0, #20
   2d876:	1838      	adds	r0, r7, r0
   2d878:	9300      	str	r3, [sp, #0]
   2d87a:	0023      	movs	r3, r4
   2d87c:	4c26      	ldr	r4, [pc, #152]	; (2d918 <MQTTPublish+0x1bc>)
   2d87e:	47a0      	blx	r4
   2d880:	0003      	movs	r3, r0
   2d882:	2b01      	cmp	r3, #1
   2d884:	d033      	beq.n	2d8ee <MQTTPublish+0x192>
                rc = FAILURE;
   2d886:	2301      	movs	r3, #1
   2d888:	425b      	negs	r3, r3
   2d88a:	637b      	str	r3, [r7, #52]	; 0x34
   2d88c:	e02f      	b.n	2d8ee <MQTTPublish+0x192>
        }
        else
            rc = FAILURE;
   2d88e:	2301      	movs	r3, #1
   2d890:	425b      	negs	r3, r3
   2d892:	637b      	str	r3, [r7, #52]	; 0x34
   2d894:	e02b      	b.n	2d8ee <MQTTPublish+0x192>
    }
    else if (message->qos == QOS2)
   2d896:	687b      	ldr	r3, [r7, #4]
   2d898:	781b      	ldrb	r3, [r3, #0]
   2d89a:	2b02      	cmp	r3, #2
   2d89c:	d127      	bne.n	2d8ee <MQTTPublish+0x192>
    {
        if (waitfor(c, PUBCOMP, &timer) == PUBCOMP)
   2d89e:	2324      	movs	r3, #36	; 0x24
   2d8a0:	18fa      	adds	r2, r7, r3
   2d8a2:	68fb      	ldr	r3, [r7, #12]
   2d8a4:	2107      	movs	r1, #7
   2d8a6:	0018      	movs	r0, r3
   2d8a8:	4b1a      	ldr	r3, [pc, #104]	; (2d914 <MQTTPublish+0x1b8>)
   2d8aa:	4798      	blx	r3
   2d8ac:	0003      	movs	r3, r0
   2d8ae:	2b07      	cmp	r3, #7
   2d8b0:	d114      	bne.n	2d8dc <MQTTPublish+0x180>
        {
            unsigned short mypacketid;
            unsigned char dup, type;
            if (MQTTDeserialize_ack(&type, &dup, &mypacketid, c->readbuf, c->readbuf_size) != 1)
   2d8b2:	68fb      	ldr	r3, [r7, #12]
   2d8b4:	695c      	ldr	r4, [r3, #20]
   2d8b6:	68fb      	ldr	r3, [r7, #12]
   2d8b8:	68db      	ldr	r3, [r3, #12]
   2d8ba:	2212      	movs	r2, #18
   2d8bc:	18ba      	adds	r2, r7, r2
   2d8be:	2111      	movs	r1, #17
   2d8c0:	1879      	adds	r1, r7, r1
   2d8c2:	2010      	movs	r0, #16
   2d8c4:	1838      	adds	r0, r7, r0
   2d8c6:	9300      	str	r3, [sp, #0]
   2d8c8:	0023      	movs	r3, r4
   2d8ca:	4c13      	ldr	r4, [pc, #76]	; (2d918 <MQTTPublish+0x1bc>)
   2d8cc:	47a0      	blx	r4
   2d8ce:	0003      	movs	r3, r0
   2d8d0:	2b01      	cmp	r3, #1
   2d8d2:	d00c      	beq.n	2d8ee <MQTTPublish+0x192>
                rc = FAILURE;
   2d8d4:	2301      	movs	r3, #1
   2d8d6:	425b      	negs	r3, r3
   2d8d8:	637b      	str	r3, [r7, #52]	; 0x34
   2d8da:	e008      	b.n	2d8ee <MQTTPublish+0x192>
        }
        else
            rc = FAILURE;
   2d8dc:	2301      	movs	r3, #1
   2d8de:	425b      	negs	r3, r3
   2d8e0:	637b      	str	r3, [r7, #52]	; 0x34
   2d8e2:	e004      	b.n	2d8ee <MQTTPublish+0x192>
		goto exit;
   2d8e4:	46c0      	nop			; (mov r8, r8)
   2d8e6:	e002      	b.n	2d8ee <MQTTPublish+0x192>
        goto exit;
   2d8e8:	46c0      	nop			; (mov r8, r8)
   2d8ea:	e000      	b.n	2d8ee <MQTTPublish+0x192>
        goto exit; // there was a problem
   2d8ec:	46c0      	nop			; (mov r8, r8)
    
exit:
#if defined(MQTT_TASK)
	MutexUnlock(&c->mutex);
#endif
    return rc;
   2d8ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
   2d8f0:	0018      	movs	r0, r3
   2d8f2:	46bd      	mov	sp, r7
   2d8f4:	b00f      	add	sp, #60	; 0x3c
   2d8f6:	bc0c      	pop	{r2, r3}
   2d8f8:	4690      	mov	r8, r2
   2d8fa:	4699      	mov	r9, r3
   2d8fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
   2d8fe:	46c0      	nop			; (mov r8, r8)
   2d900:	0002db65 	.word	0x0002db65
   2d904:	0002daed 	.word	0x0002daed
   2d908:	0002ccad 	.word	0x0002ccad
   2d90c:	0002ede9 	.word	0x0002ede9
   2d910:	0002ccdd 	.word	0x0002ccdd
   2d914:	0002d445 	.word	0x0002d445
   2d918:	0002e861 	.word	0x0002e861

0002d91c <MQTTDisconnect>:


int MQTTDisconnect(MQTTClient* c)
{  
   2d91c:	b580      	push	{r7, lr}
   2d91e:	b088      	sub	sp, #32
   2d920:	af00      	add	r7, sp, #0
   2d922:	6078      	str	r0, [r7, #4]
    int rc = FAILURE;
   2d924:	2301      	movs	r3, #1
   2d926:	425b      	negs	r3, r3
   2d928:	61fb      	str	r3, [r7, #28]
    Timer timer;     // we might wait for incomplete incoming publishes to complete
    int len = 0;
   2d92a:	2300      	movs	r3, #0
   2d92c:	61bb      	str	r3, [r7, #24]

#if defined(MQTT_TASK)
	MutexLock(&c->mutex);
#endif
    TimerInit(&timer);
   2d92e:	230c      	movs	r3, #12
   2d930:	18fb      	adds	r3, r7, r3
   2d932:	0018      	movs	r0, r3
   2d934:	4b13      	ldr	r3, [pc, #76]	; (2d984 <MQTTDisconnect+0x68>)
   2d936:	4798      	blx	r3
    TimerCountdownMS(&timer, c->command_timeout_ms);
   2d938:	687b      	ldr	r3, [r7, #4]
   2d93a:	685a      	ldr	r2, [r3, #4]
   2d93c:	230c      	movs	r3, #12
   2d93e:	18fb      	adds	r3, r7, r3
   2d940:	0011      	movs	r1, r2
   2d942:	0018      	movs	r0, r3
   2d944:	4b10      	ldr	r3, [pc, #64]	; (2d988 <MQTTDisconnect+0x6c>)
   2d946:	4798      	blx	r3

	len = MQTTSerialize_disconnect(c->buf, c->buf_size);
   2d948:	687b      	ldr	r3, [r7, #4]
   2d94a:	691a      	ldr	r2, [r3, #16]
   2d94c:	687b      	ldr	r3, [r7, #4]
   2d94e:	689b      	ldr	r3, [r3, #8]
   2d950:	0019      	movs	r1, r3
   2d952:	0010      	movs	r0, r2
   2d954:	4b0d      	ldr	r3, [pc, #52]	; (2d98c <MQTTDisconnect+0x70>)
   2d956:	4798      	blx	r3
   2d958:	0003      	movs	r3, r0
   2d95a:	61bb      	str	r3, [r7, #24]
    if (len > 0)
   2d95c:	69bb      	ldr	r3, [r7, #24]
   2d95e:	2b00      	cmp	r3, #0
   2d960:	dd08      	ble.n	2d974 <MQTTDisconnect+0x58>
        rc = sendPacket(c, len, &timer);            // send the disconnect packet
   2d962:	230c      	movs	r3, #12
   2d964:	18fa      	adds	r2, r7, r3
   2d966:	69b9      	ldr	r1, [r7, #24]
   2d968:	687b      	ldr	r3, [r7, #4]
   2d96a:	0018      	movs	r0, r3
   2d96c:	4b08      	ldr	r3, [pc, #32]	; (2d990 <MQTTDisconnect+0x74>)
   2d96e:	4798      	blx	r3
   2d970:	0003      	movs	r3, r0
   2d972:	61fb      	str	r3, [r7, #28]
        
    c->isconnected = 0;
   2d974:	687b      	ldr	r3, [r7, #4]
   2d976:	2200      	movs	r2, #0
   2d978:	621a      	str	r2, [r3, #32]

#if defined(MQTT_TASK)
	MutexUnlock(&c->mutex);
#endif
    return rc;
   2d97a:	69fb      	ldr	r3, [r7, #28]
}
   2d97c:	0018      	movs	r0, r3
   2d97e:	46bd      	mov	sp, r7
   2d980:	b008      	add	sp, #32
   2d982:	bd80      	pop	{r7, pc}
   2d984:	0002db65 	.word	0x0002db65
   2d988:	0002daed 	.word	0x0002daed
   2d98c:	0002e715 	.word	0x0002e715
   2d990:	0002ccdd 	.word	0x0002ccdd

0002d994 <isMQTTSocket>:
static uint32_t gu32MQTTRxFIFOPtr=0;
static uint32_t gu32MQTTRxFIFOLen=0;
static char *gpcHostAddr;

static bool isMQTTSocket(SOCKET sock)
{
   2d994:	b580      	push	{r7, lr}
   2d996:	b084      	sub	sp, #16
   2d998:	af00      	add	r7, sp, #0
   2d99a:	0002      	movs	r2, r0
   2d99c:	1dfb      	adds	r3, r7, #7
   2d99e:	701a      	strb	r2, [r3, #0]
	unsigned int cIdx;
	struct mqtt_module *mqttInstance;
	
	for(cIdx = 0; cIdx < MQTT_MAX_CLIENTS; cIdx++)
   2d9a0:	2300      	movs	r3, #0
   2d9a2:	60fb      	str	r3, [r7, #12]
   2d9a4:	e01c      	b.n	2d9e0 <isMQTTSocket+0x4c>
	{
		if(mqttClientPool[cIdx].mqtt_instance != NULL)
   2d9a6:	4a12      	ldr	r2, [pc, #72]	; (2d9f0 <isMQTTSocket+0x5c>)
   2d9a8:	68fb      	ldr	r3, [r7, #12]
   2d9aa:	2164      	movs	r1, #100	; 0x64
   2d9ac:	434b      	muls	r3, r1
   2d9ae:	18d3      	adds	r3, r2, r3
   2d9b0:	3360      	adds	r3, #96	; 0x60
   2d9b2:	681b      	ldr	r3, [r3, #0]
   2d9b4:	2b00      	cmp	r3, #0
   2d9b6:	d010      	beq.n	2d9da <isMQTTSocket+0x46>
		{
			mqttInstance = mqttClientPool[cIdx].mqtt_instance;
   2d9b8:	4a0d      	ldr	r2, [pc, #52]	; (2d9f0 <isMQTTSocket+0x5c>)
   2d9ba:	68fb      	ldr	r3, [r7, #12]
   2d9bc:	2164      	movs	r1, #100	; 0x64
   2d9be:	434b      	muls	r3, r1
   2d9c0:	18d3      	adds	r3, r2, r3
   2d9c2:	3360      	adds	r3, #96	; 0x60
   2d9c4:	681b      	ldr	r3, [r3, #0]
   2d9c6:	60bb      	str	r3, [r7, #8]
			if(mqttInstance->network.socket == sock)
   2d9c8:	68bb      	ldr	r3, [r7, #8]
   2d9ca:	6a1a      	ldr	r2, [r3, #32]
   2d9cc:	1dfb      	adds	r3, r7, #7
   2d9ce:	781b      	ldrb	r3, [r3, #0]
   2d9d0:	b25b      	sxtb	r3, r3
   2d9d2:	429a      	cmp	r2, r3
   2d9d4:	d101      	bne.n	2d9da <isMQTTSocket+0x46>
				return true;
   2d9d6:	2301      	movs	r3, #1
   2d9d8:	e006      	b.n	2d9e8 <isMQTTSocket+0x54>
	for(cIdx = 0; cIdx < MQTT_MAX_CLIENTS; cIdx++)
   2d9da:	68fb      	ldr	r3, [r7, #12]
   2d9dc:	3301      	adds	r3, #1
   2d9de:	60fb      	str	r3, [r7, #12]
   2d9e0:	68fb      	ldr	r3, [r7, #12]
   2d9e2:	2b06      	cmp	r3, #6
   2d9e4:	d9df      	bls.n	2d9a6 <isMQTTSocket+0x12>
		}
	}
	return false;
   2d9e6:	2300      	movs	r3, #0
}
   2d9e8:	0018      	movs	r0, r3
   2d9ea:	46bd      	mov	sp, r7
   2d9ec:	b004      	add	sp, #16
   2d9ee:	bd80      	pop	{r7, pc}
   2d9f0:	20003ed0 	.word	0x20003ed0

0002d9f4 <dnsResolveCallback>:

void dnsResolveCallback(uint8_t *hostName, uint32_t hostIp)
{
   2d9f4:	b580      	push	{r7, lr}
   2d9f6:	b082      	sub	sp, #8
   2d9f8:	af00      	add	r7, sp, #0
   2d9fa:	6078      	str	r0, [r7, #4]
   2d9fc:	6039      	str	r1, [r7, #0]
	if((gbMQTTBrokerIpresolved == false) && (!strcmp((const char *)gpcHostAddr, (const char *)hostName)))
   2d9fe:	4b0d      	ldr	r3, [pc, #52]	; (2da34 <dnsResolveCallback+0x40>)
   2da00:	781b      	ldrb	r3, [r3, #0]
   2da02:	2201      	movs	r2, #1
   2da04:	4053      	eors	r3, r2
   2da06:	b2db      	uxtb	r3, r3
   2da08:	2b00      	cmp	r3, #0
   2da0a:	d00e      	beq.n	2da2a <dnsResolveCallback+0x36>
   2da0c:	4b0a      	ldr	r3, [pc, #40]	; (2da38 <dnsResolveCallback+0x44>)
   2da0e:	681b      	ldr	r3, [r3, #0]
   2da10:	687a      	ldr	r2, [r7, #4]
   2da12:	0011      	movs	r1, r2
   2da14:	0018      	movs	r0, r3
   2da16:	4b09      	ldr	r3, [pc, #36]	; (2da3c <dnsResolveCallback+0x48>)
   2da18:	4798      	blx	r3
   2da1a:	1e03      	subs	r3, r0, #0
   2da1c:	d105      	bne.n	2da2a <dnsResolveCallback+0x36>
	{
		gi32MQTTBrokerIp = hostIp;
   2da1e:	683a      	ldr	r2, [r7, #0]
   2da20:	4b07      	ldr	r3, [pc, #28]	; (2da40 <dnsResolveCallback+0x4c>)
   2da22:	601a      	str	r2, [r3, #0]
		gbMQTTBrokerIpresolved = true;
   2da24:	4b03      	ldr	r3, [pc, #12]	; (2da34 <dnsResolveCallback+0x40>)
   2da26:	2201      	movs	r2, #1
   2da28:	701a      	strb	r2, [r3, #0]
		#ifdef MQTT_PLATFORM_DBG
		printf("INFO >> Host IP of %s is %d.%d.%d.%d\r\n", hostName, (int)IPV4_BYTE(hostIp, 0), (int)IPV4_BYTE(hostIp, 1),
		(int)IPV4_BYTE(hostIp, 2), (int)IPV4_BYTE(hostIp, 3));
		#endif
	}
}
   2da2a:	46c0      	nop			; (mov r8, r8)
   2da2c:	46bd      	mov	sp, r7
   2da2e:	b002      	add	sp, #8
   2da30:	bd80      	pop	{r7, pc}
   2da32:	46c0      	nop			; (mov r8, r8)
   2da34:	20003dc0 	.word	0x20003dc0
   2da38:	20003ecc 	.word	0x20003ecc
   2da3c:	0003346f 	.word	0x0003346f
   2da40:	20003db8 	.word	0x20003db8

0002da44 <tcpClientSocketEventHandler>:

void tcpClientSocketEventHandler(SOCKET sock, uint8_t u8Msg, void *pvMsg)
{
   2da44:	b580      	push	{r7, lr}
   2da46:	b084      	sub	sp, #16
   2da48:	af00      	add	r7, sp, #0
   2da4a:	603a      	str	r2, [r7, #0]
   2da4c:	1dfb      	adds	r3, r7, #7
   2da4e:	1c02      	adds	r2, r0, #0
   2da50:	701a      	strb	r2, [r3, #0]
   2da52:	1dbb      	adds	r3, r7, #6
   2da54:	1c0a      	adds	r2, r1, #0
   2da56:	701a      	strb	r2, [r3, #0]
	if(isMQTTSocket(sock)) { 
   2da58:	1dfb      	adds	r3, r7, #7
   2da5a:	781b      	ldrb	r3, [r3, #0]
   2da5c:	b25b      	sxtb	r3, r3
   2da5e:	0018      	movs	r0, r3
   2da60:	4b12      	ldr	r3, [pc, #72]	; (2daac <tcpClientSocketEventHandler+0x68>)
   2da62:	4798      	blx	r3
   2da64:	1e03      	subs	r3, r0, #0
   2da66:	d01c      	beq.n	2daa2 <tcpClientSocketEventHandler+0x5e>
		switch (u8Msg) {
   2da68:	1dbb      	adds	r3, r7, #6
   2da6a:	781b      	ldrb	r3, [r3, #0]
   2da6c:	2b06      	cmp	r3, #6
   2da6e:	d00c      	beq.n	2da8a <tcpClientSocketEventHandler+0x46>
   2da70:	2b07      	cmp	r3, #7
   2da72:	d006      	beq.n	2da82 <tcpClientSocketEventHandler+0x3e>
   2da74:	2b05      	cmp	r3, #5
   2da76:	d000      	beq.n	2da7a <tcpClientSocketEventHandler+0x36>
				printf("DEBUG >> Remaining data in Rx buffer of broker socket: %d\r\n",pstrRx->u16RemainingSize);
				#endif
				gbMQTTBrokerRecvDone=true;
			}
			break;
			default: break;
   2da78:	e013      	b.n	2daa2 <tcpClientSocketEventHandler+0x5e>
				gbMQTTBrokerConnected=true;
   2da7a:	4b0d      	ldr	r3, [pc, #52]	; (2dab0 <tcpClientSocketEventHandler+0x6c>)
   2da7c:	2201      	movs	r2, #1
   2da7e:	701a      	strb	r2, [r3, #0]
			break;
   2da80:	e00f      	b.n	2daa2 <tcpClientSocketEventHandler+0x5e>
				gbMQTTBrokerSendDone=true;
   2da82:	4b0c      	ldr	r3, [pc, #48]	; (2dab4 <tcpClientSocketEventHandler+0x70>)
   2da84:	2201      	movs	r2, #1
   2da86:	701a      	strb	r2, [r3, #0]
			break;
   2da88:	e00b      	b.n	2daa2 <tcpClientSocketEventHandler+0x5e>
				tstrSocketRecvMsg* pstrRx = (tstrSocketRecvMsg*)pvMsg;
   2da8a:	683b      	ldr	r3, [r7, #0]
   2da8c:	60fb      	str	r3, [r7, #12]
				gi32MQTTBrokerRxLen = pstrRx->s16BufferSize;
   2da8e:	68fb      	ldr	r3, [r7, #12]
   2da90:	2204      	movs	r2, #4
   2da92:	5e9b      	ldrsh	r3, [r3, r2]
   2da94:	001a      	movs	r2, r3
   2da96:	4b08      	ldr	r3, [pc, #32]	; (2dab8 <tcpClientSocketEventHandler+0x74>)
   2da98:	601a      	str	r2, [r3, #0]
				gbMQTTBrokerRecvDone=true;
   2da9a:	4b08      	ldr	r3, [pc, #32]	; (2dabc <tcpClientSocketEventHandler+0x78>)
   2da9c:	2201      	movs	r2, #1
   2da9e:	701a      	strb	r2, [r3, #0]
			break;
   2daa0:	46c0      	nop			; (mov r8, r8)
		}
	}
}
   2daa2:	46c0      	nop			; (mov r8, r8)
   2daa4:	46bd      	mov	sp, r7
   2daa6:	b004      	add	sp, #16
   2daa8:	bd80      	pop	{r7, pc}
   2daaa:	46c0      	nop			; (mov r8, r8)
   2daac:	0002d995 	.word	0x0002d995
   2dab0:	20003dc1 	.word	0x20003dc1
   2dab4:	20003dc2 	.word	0x20003dc2
   2dab8:	20003dbc 	.word	0x20003dbc
   2dabc:	20003dc3 	.word	0x20003dc3

0002dac0 <TimerIsExpired>:

void SysTick_Handler_MQTT(void){
	MilliTimer++;
}

char TimerIsExpired(Timer* timer) {
   2dac0:	b580      	push	{r7, lr}
   2dac2:	b082      	sub	sp, #8
   2dac4:	af00      	add	r7, sp, #0
   2dac6:	6078      	str	r0, [r7, #4]
	return xTaskCheckForTimeOut(&timer->xTimeOut, &timer->xTicksToWait) == pdTRUE;
   2dac8:	687b      	ldr	r3, [r7, #4]
   2daca:	3304      	adds	r3, #4
   2dacc:	687a      	ldr	r2, [r7, #4]
   2dace:	0011      	movs	r1, r2
   2dad0:	0018      	movs	r0, r3
   2dad2:	4b05      	ldr	r3, [pc, #20]	; (2dae8 <TimerIsExpired+0x28>)
   2dad4:	4798      	blx	r3
   2dad6:	0003      	movs	r3, r0
   2dad8:	3b01      	subs	r3, #1
   2dada:	425a      	negs	r2, r3
   2dadc:	4153      	adcs	r3, r2
   2dade:	b2db      	uxtb	r3, r3
}
   2dae0:	0018      	movs	r0, r3
   2dae2:	46bd      	mov	sp, r7
   2dae4:	b002      	add	sp, #8
   2dae6:	bd80      	pop	{r7, pc}
   2dae8:	0001b2c5 	.word	0x0001b2c5

0002daec <TimerCountdownMS>:


void TimerCountdownMS(Timer* timer, unsigned int timeout_ms) {
   2daec:	b580      	push	{r7, lr}
   2daee:	b082      	sub	sp, #8
   2daf0:	af00      	add	r7, sp, #0
   2daf2:	6078      	str	r0, [r7, #4]
   2daf4:	6039      	str	r1, [r7, #0]
	timer->xTicksToWait = timeout_ms / portTICK_PERIOD_MS; /* convert milliseconds to ticks */
   2daf6:	687b      	ldr	r3, [r7, #4]
   2daf8:	683a      	ldr	r2, [r7, #0]
   2dafa:	601a      	str	r2, [r3, #0]
	vTaskSetTimeOutState(&timer->xTimeOut); /* Record the time at which this function was entered. */
   2dafc:	687b      	ldr	r3, [r7, #4]
   2dafe:	3304      	adds	r3, #4
   2db00:	0018      	movs	r0, r3
   2db02:	4b03      	ldr	r3, [pc, #12]	; (2db10 <TimerCountdownMS+0x24>)
   2db04:	4798      	blx	r3
}
   2db06:	46c0      	nop			; (mov r8, r8)
   2db08:	46bd      	mov	sp, r7
   2db0a:	b002      	add	sp, #8
   2db0c:	bd80      	pop	{r7, pc}
   2db0e:	46c0      	nop			; (mov r8, r8)
   2db10:	0001b259 	.word	0x0001b259

0002db14 <TimerCountdown>:


void TimerCountdown(Timer* timer, unsigned int timeout) {
   2db14:	b580      	push	{r7, lr}
   2db16:	b082      	sub	sp, #8
   2db18:	af00      	add	r7, sp, #0
   2db1a:	6078      	str	r0, [r7, #4]
   2db1c:	6039      	str	r1, [r7, #0]
	TimerCountdownMS(timer, timeout * 1000);
   2db1e:	683b      	ldr	r3, [r7, #0]
   2db20:	22fa      	movs	r2, #250	; 0xfa
   2db22:	0092      	lsls	r2, r2, #2
   2db24:	435a      	muls	r2, r3
   2db26:	687b      	ldr	r3, [r7, #4]
   2db28:	0011      	movs	r1, r2
   2db2a:	0018      	movs	r0, r3
   2db2c:	4b02      	ldr	r3, [pc, #8]	; (2db38 <TimerCountdown+0x24>)
   2db2e:	4798      	blx	r3
}
   2db30:	46c0      	nop			; (mov r8, r8)
   2db32:	46bd      	mov	sp, r7
   2db34:	b002      	add	sp, #8
   2db36:	bd80      	pop	{r7, pc}
   2db38:	0002daed 	.word	0x0002daed

0002db3c <TimerLeftMS>:


int TimerLeftMS(Timer* timer) {
   2db3c:	b580      	push	{r7, lr}
   2db3e:	b082      	sub	sp, #8
   2db40:	af00      	add	r7, sp, #0
   2db42:	6078      	str	r0, [r7, #4]
	xTaskCheckForTimeOut(&timer->xTimeOut, &timer->xTicksToWait); /* updates xTicksToWait to the number left */
   2db44:	687b      	ldr	r3, [r7, #4]
   2db46:	3304      	adds	r3, #4
   2db48:	687a      	ldr	r2, [r7, #4]
   2db4a:	0011      	movs	r1, r2
   2db4c:	0018      	movs	r0, r3
   2db4e:	4b04      	ldr	r3, [pc, #16]	; (2db60 <TimerLeftMS+0x24>)
   2db50:	4798      	blx	r3
	return (timer->xTicksToWait < 0) ? 0 : (timer->xTicksToWait * portTICK_PERIOD_MS);
   2db52:	687b      	ldr	r3, [r7, #4]
   2db54:	681b      	ldr	r3, [r3, #0]
}
   2db56:	0018      	movs	r0, r3
   2db58:	46bd      	mov	sp, r7
   2db5a:	b002      	add	sp, #8
   2db5c:	bd80      	pop	{r7, pc}
   2db5e:	46c0      	nop			; (mov r8, r8)
   2db60:	0001b2c5 	.word	0x0001b2c5

0002db64 <TimerInit>:


void TimerInit(Timer* timer) {
   2db64:	b580      	push	{r7, lr}
   2db66:	b082      	sub	sp, #8
   2db68:	af00      	add	r7, sp, #0
   2db6a:	6078      	str	r0, [r7, #4]
	timer->xTicksToWait = 0;
   2db6c:	687b      	ldr	r3, [r7, #4]
   2db6e:	2200      	movs	r2, #0
   2db70:	601a      	str	r2, [r3, #0]
	memset(&timer->xTimeOut, '\0', sizeof(timer->xTimeOut));
   2db72:	687b      	ldr	r3, [r7, #4]
   2db74:	3304      	adds	r3, #4
   2db76:	2208      	movs	r2, #8
   2db78:	2100      	movs	r1, #0
   2db7a:	0018      	movs	r0, r3
   2db7c:	4b02      	ldr	r3, [pc, #8]	; (2db88 <TimerInit+0x24>)
   2db7e:	4798      	blx	r3
}
   2db80:	46c0      	nop			; (mov r8, r8)
   2db82:	46bd      	mov	sp, r7
   2db84:	b002      	add	sp, #8
   2db86:	bd80      	pop	{r7, pc}
   2db88:	00033117 	.word	0x00033117

0002db8c <WINC1500_read>:

static int WINC1500_read(Network* n, unsigned char* buffer, int len, int timeout_ms) { 
   2db8c:	b590      	push	{r4, r7, lr}
   2db8e:	b085      	sub	sp, #20
   2db90:	af00      	add	r7, sp, #0
   2db92:	60f8      	str	r0, [r7, #12]
   2db94:	60b9      	str	r1, [r7, #8]
   2db96:	607a      	str	r2, [r7, #4]
   2db98:	603b      	str	r3, [r7, #0]
  //at times the upper layer requests for single byte of data, but network has more in rx buffer.
  //this results in callback being invoked multiple times with length 1 before returning. To prevent loss of
  //data in this process, pool data internally and give it to upper layer on request. 
  
  //temporary workaround for timer overrun 
  if(0==timeout_ms) timeout_ms=10;
   2db9a:	683b      	ldr	r3, [r7, #0]
   2db9c:	2b00      	cmp	r3, #0
   2db9e:	d101      	bne.n	2dba4 <WINC1500_read+0x18>
   2dba0:	230a      	movs	r3, #10
   2dba2:	603b      	str	r3, [r7, #0]
  
  if(0==gu32MQTTRxFIFOLen){ //no data in internal FIFO
   2dba4:	4b2c      	ldr	r3, [pc, #176]	; (2dc58 <WINC1500_read+0xcc>)
   2dba6:	681b      	ldr	r3, [r3, #0]
   2dba8:	2b00      	cmp	r3, #0
   2dbaa:	d131      	bne.n	2dc10 <WINC1500_read+0x84>
	  #ifdef MQTT_PLATFORM_DBG
	  printf("DEBUG >> Requesting data from network\r\n");
	  #endif
	  gbMQTTBrokerRecvDone=false;
   2dbac:	4b2b      	ldr	r3, [pc, #172]	; (2dc5c <WINC1500_read+0xd0>)
   2dbae:	2200      	movs	r2, #0
   2dbb0:	701a      	strb	r2, [r3, #0]
	  if (SOCK_ERR_NO_ERROR!=recv(n->socket,gcMQTTRxFIFO,MQTT_RX_POOL_SIZE,timeout_ms)){
   2dbb2:	68fb      	ldr	r3, [r7, #12]
   2dbb4:	681b      	ldr	r3, [r3, #0]
   2dbb6:	b258      	sxtb	r0, r3
   2dbb8:	683c      	ldr	r4, [r7, #0]
   2dbba:	2380      	movs	r3, #128	; 0x80
   2dbbc:	005a      	lsls	r2, r3, #1
   2dbbe:	4928      	ldr	r1, [pc, #160]	; (2dc60 <WINC1500_read+0xd4>)
   2dbc0:	0023      	movs	r3, r4
   2dbc2:	4c28      	ldr	r4, [pc, #160]	; (2dc64 <WINC1500_read+0xd8>)
   2dbc4:	47a0      	blx	r4
   2dbc6:	1e03      	subs	r3, r0, #0
   2dbc8:	d005      	beq.n	2dbd6 <WINC1500_read+0x4a>
		  #ifdef MQTT_PLATFORM_DBG
		  printf("ERROR >> recv failed\r\n");
		  #endif
		  return -1;
   2dbca:	2301      	movs	r3, #1
   2dbcc:	425b      	negs	r3, r3
   2dbce:	e03e      	b.n	2dc4e <WINC1500_read+0xc2>
	  }
	  //call handle_events until we get rx callback 
	  while (false==gbMQTTBrokerRecvDone){
		  m2m_wifi_handle_events(NULL);
   2dbd0:	2000      	movs	r0, #0
   2dbd2:	4b25      	ldr	r3, [pc, #148]	; (2dc68 <WINC1500_read+0xdc>)
   2dbd4:	4798      	blx	r3
	  while (false==gbMQTTBrokerRecvDone){
   2dbd6:	4b21      	ldr	r3, [pc, #132]	; (2dc5c <WINC1500_read+0xd0>)
   2dbd8:	781b      	ldrb	r3, [r3, #0]
   2dbda:	2201      	movs	r2, #1
   2dbdc:	4053      	eors	r3, r2
   2dbde:	b2db      	uxtb	r3, r3
   2dbe0:	2b00      	cmp	r3, #0
   2dbe2:	d1f5      	bne.n	2dbd0 <WINC1500_read+0x44>
	  }
	  
	  //update current FIFO length
	  if(gi32MQTTBrokerRxLen>0){ //data recieved form network
   2dbe4:	4b21      	ldr	r3, [pc, #132]	; (2dc6c <WINC1500_read+0xe0>)
   2dbe6:	681b      	ldr	r3, [r3, #0]
   2dbe8:	2b00      	cmp	r3, #0
   2dbea:	dd08      	ble.n	2dbfe <WINC1500_read+0x72>
		gu32MQTTRxFIFOLen=gi32MQTTBrokerRxLen;
   2dbec:	4b1f      	ldr	r3, [pc, #124]	; (2dc6c <WINC1500_read+0xe0>)
   2dbee:	681b      	ldr	r3, [r3, #0]
   2dbf0:	001a      	movs	r2, r3
   2dbf2:	4b19      	ldr	r3, [pc, #100]	; (2dc58 <WINC1500_read+0xcc>)
   2dbf4:	601a      	str	r2, [r3, #0]
		gu32MQTTRxFIFOPtr=0;
   2dbf6:	4b1e      	ldr	r3, [pc, #120]	; (2dc70 <WINC1500_read+0xe4>)
   2dbf8:	2200      	movs	r2, #0
   2dbfa:	601a      	str	r2, [r3, #0]
   2dbfc:	e008      	b.n	2dc10 <WINC1500_read+0x84>
    	printf("0x%x, ",gcMQTTRxFIFO[i]);
    	printf("\r\n");
	  #endif
	  }
	  else{//mostly in case of timeout
		  gu32MQTTRxFIFOLen=0;
   2dbfe:	4b16      	ldr	r3, [pc, #88]	; (2dc58 <WINC1500_read+0xcc>)
   2dc00:	2200      	movs	r2, #0
   2dc02:	601a      	str	r2, [r3, #0]
		  gu32MQTTRxFIFOPtr=0;
   2dc04:	4b1a      	ldr	r3, [pc, #104]	; (2dc70 <WINC1500_read+0xe4>)
   2dc06:	2200      	movs	r2, #0
   2dc08:	601a      	str	r2, [r3, #0]
		  #ifdef MQTT_PLATFORM_DBG
		  printf("DEBUG >> no data to send. returning error code (%d)\r\n",gi32MQTTBrokerRxLen);
		  #endif
		  return gi32MQTTBrokerRxLen; //this corresponds to the error code.
   2dc0a:	4b18      	ldr	r3, [pc, #96]	; (2dc6c <WINC1500_read+0xe0>)
   2dc0c:	681b      	ldr	r3, [r3, #0]
   2dc0e:	e01e      	b.n	2dc4e <WINC1500_read+0xc2>
	  }
  }
  //return data to client from data present in the FIFO from previous recv()
  if(len>(int)gu32MQTTRxFIFOLen){
   2dc10:	4b11      	ldr	r3, [pc, #68]	; (2dc58 <WINC1500_read+0xcc>)
   2dc12:	681b      	ldr	r3, [r3, #0]
   2dc14:	001a      	movs	r2, r3
   2dc16:	687b      	ldr	r3, [r7, #4]
   2dc18:	4293      	cmp	r3, r2
   2dc1a:	dd02      	ble.n	2dc22 <WINC1500_read+0x96>
	  #ifdef MQTT_PLATFORM_DBG
	  printf("ERROR >> unable to process read request since FIFO contains less data than requested\r\n");
	  #endif
	  return -1;
   2dc1c:	2301      	movs	r3, #1
   2dc1e:	425b      	negs	r3, r3
   2dc20:	e015      	b.n	2dc4e <WINC1500_read+0xc2>
  }
 
  memcpy((void*)buffer, (const void*)&gcMQTTRxFIFO[gu32MQTTRxFIFOPtr],len);
   2dc22:	4b13      	ldr	r3, [pc, #76]	; (2dc70 <WINC1500_read+0xe4>)
   2dc24:	681a      	ldr	r2, [r3, #0]
   2dc26:	4b0e      	ldr	r3, [pc, #56]	; (2dc60 <WINC1500_read+0xd4>)
   2dc28:	18d1      	adds	r1, r2, r3
   2dc2a:	687a      	ldr	r2, [r7, #4]
   2dc2c:	68bb      	ldr	r3, [r7, #8]
   2dc2e:	0018      	movs	r0, r3
   2dc30:	4b10      	ldr	r3, [pc, #64]	; (2dc74 <WINC1500_read+0xe8>)
   2dc32:	4798      	blx	r3
  gu32MQTTRxFIFOLen-=len;
   2dc34:	4b08      	ldr	r3, [pc, #32]	; (2dc58 <WINC1500_read+0xcc>)
   2dc36:	681a      	ldr	r2, [r3, #0]
   2dc38:	687b      	ldr	r3, [r7, #4]
   2dc3a:	1ad2      	subs	r2, r2, r3
   2dc3c:	4b06      	ldr	r3, [pc, #24]	; (2dc58 <WINC1500_read+0xcc>)
   2dc3e:	601a      	str	r2, [r3, #0]
  gu32MQTTRxFIFOPtr+=len;
   2dc40:	4b0b      	ldr	r3, [pc, #44]	; (2dc70 <WINC1500_read+0xe4>)
   2dc42:	681a      	ldr	r2, [r3, #0]
   2dc44:	687b      	ldr	r3, [r7, #4]
   2dc46:	18d2      	adds	r2, r2, r3
   2dc48:	4b09      	ldr	r3, [pc, #36]	; (2dc70 <WINC1500_read+0xe4>)
   2dc4a:	601a      	str	r2, [r3, #0]
  
  return len;
   2dc4c:	687b      	ldr	r3, [r7, #4]
}
   2dc4e:	0018      	movs	r0, r3
   2dc50:	46bd      	mov	sp, r7
   2dc52:	b005      	add	sp, #20
   2dc54:	bd90      	pop	{r4, r7, pc}
   2dc56:	46c0      	nop			; (mov r8, r8)
   2dc58:	20003ec8 	.word	0x20003ec8
   2dc5c:	20003dc3 	.word	0x20003dc3
   2dc60:	20003dc4 	.word	0x20003dc4
   2dc64:	00024241 	.word	0x00024241
   2dc68:	00020789 	.word	0x00020789
   2dc6c:	20003dbc 	.word	0x20003dbc
   2dc70:	20003ec4 	.word	0x20003ec4
   2dc74:	000330e1 	.word	0x000330e1

0002dc78 <WINC1500_write>:


static int WINC1500_write(Network* n, unsigned char* buffer, int len, int timeout_ms) {
   2dc78:	b590      	push	{r4, r7, lr}
   2dc7a:	b085      	sub	sp, #20
   2dc7c:	af00      	add	r7, sp, #0
   2dc7e:	60f8      	str	r0, [r7, #12]
   2dc80:	60b9      	str	r1, [r7, #8]
   2dc82:	607a      	str	r2, [r7, #4]
   2dc84:	603b      	str	r3, [r7, #0]
  gbMQTTBrokerSendDone=false;
   2dc86:	4b10      	ldr	r3, [pc, #64]	; (2dcc8 <WINC1500_write+0x50>)
   2dc88:	2200      	movs	r2, #0
   2dc8a:	701a      	strb	r2, [r3, #0]
  if (SOCK_ERR_NO_ERROR!=send(n->socket,buffer,len,0)){
   2dc8c:	68fb      	ldr	r3, [r7, #12]
   2dc8e:	681b      	ldr	r3, [r3, #0]
   2dc90:	b258      	sxtb	r0, r3
   2dc92:	687b      	ldr	r3, [r7, #4]
   2dc94:	b29a      	uxth	r2, r3
   2dc96:	68b9      	ldr	r1, [r7, #8]
   2dc98:	2300      	movs	r3, #0
   2dc9a:	4c0c      	ldr	r4, [pc, #48]	; (2dccc <WINC1500_write+0x54>)
   2dc9c:	47a0      	blx	r4
   2dc9e:	1e03      	subs	r3, r0, #0
   2dca0:	d005      	beq.n	2dcae <WINC1500_write+0x36>
	  #ifdef MQTT_PLATFORM_DBG
	  printf("ERROR >> send error");
	  #endif
	  return -1;
   2dca2:	2301      	movs	r3, #1
   2dca4:	425b      	negs	r3, r3
   2dca6:	e00a      	b.n	2dcbe <WINC1500_write+0x46>
  }
  //wait for send callback
  while (false==gbMQTTBrokerSendDone){
	  m2m_wifi_handle_events(NULL);
   2dca8:	2000      	movs	r0, #0
   2dcaa:	4b09      	ldr	r3, [pc, #36]	; (2dcd0 <WINC1500_write+0x58>)
   2dcac:	4798      	blx	r3
  while (false==gbMQTTBrokerSendDone){
   2dcae:	4b06      	ldr	r3, [pc, #24]	; (2dcc8 <WINC1500_write+0x50>)
   2dcb0:	781b      	ldrb	r3, [r3, #0]
   2dcb2:	2201      	movs	r2, #1
   2dcb4:	4053      	eors	r3, r2
   2dcb6:	b2db      	uxtb	r3, r3
   2dcb8:	2b00      	cmp	r3, #0
   2dcba:	d1f5      	bne.n	2dca8 <WINC1500_write+0x30>
  #endif

  //TODO: figure out how to get actual send length from callback
  //this length will be updated in the callback
  //return gu32MQTTBrokerSendLen;
  return len;
   2dcbc:	687b      	ldr	r3, [r7, #4]
}
   2dcbe:	0018      	movs	r0, r3
   2dcc0:	46bd      	mov	sp, r7
   2dcc2:	b005      	add	sp, #20
   2dcc4:	bd90      	pop	{r4, r7, pc}
   2dcc6:	46c0      	nop			; (mov r8, r8)
   2dcc8:	20003dc2 	.word	0x20003dc2
   2dccc:	000240dd 	.word	0x000240dd
   2dcd0:	00020789 	.word	0x00020789

0002dcd4 <WINC1500_disconnect>:


static void WINC1500_disconnect(Network* n) {
   2dcd4:	b580      	push	{r7, lr}
   2dcd6:	b082      	sub	sp, #8
   2dcd8:	af00      	add	r7, sp, #0
   2dcda:	6078      	str	r0, [r7, #4]
	close(n->socket);
   2dcdc:	687b      	ldr	r3, [r7, #4]
   2dcde:	681b      	ldr	r3, [r3, #0]
   2dce0:	b25b      	sxtb	r3, r3
   2dce2:	0018      	movs	r0, r3
   2dce4:	4b06      	ldr	r3, [pc, #24]	; (2dd00 <WINC1500_disconnect+0x2c>)
   2dce6:	4798      	blx	r3
	n->socket=-1;
   2dce8:	687b      	ldr	r3, [r7, #4]
   2dcea:	2201      	movs	r2, #1
   2dcec:	4252      	negs	r2, r2
   2dcee:	601a      	str	r2, [r3, #0]
	gbMQTTBrokerConnected=false;
   2dcf0:	4b04      	ldr	r3, [pc, #16]	; (2dd04 <WINC1500_disconnect+0x30>)
   2dcf2:	2200      	movs	r2, #0
   2dcf4:	701a      	strb	r2, [r3, #0]
}
   2dcf6:	46c0      	nop			; (mov r8, r8)
   2dcf8:	46bd      	mov	sp, r7
   2dcfa:	b002      	add	sp, #8
   2dcfc:	bd80      	pop	{r7, pc}
   2dcfe:	46c0      	nop			; (mov r8, r8)
   2dd00:	000243c1 	.word	0x000243c1
   2dd04:	20003dc1 	.word	0x20003dc1

0002dd08 <NetworkInit>:


void NetworkInit(Network* n) {
   2dd08:	b580      	push	{r7, lr}
   2dd0a:	b082      	sub	sp, #8
   2dd0c:	af00      	add	r7, sp, #0
   2dd0e:	6078      	str	r0, [r7, #4]
	n->socket = -1;
   2dd10:	687b      	ldr	r3, [r7, #4]
   2dd12:	2201      	movs	r2, #1
   2dd14:	4252      	negs	r2, r2
   2dd16:	601a      	str	r2, [r3, #0]
	n->mqttread = WINC1500_read;
   2dd18:	687b      	ldr	r3, [r7, #4]
   2dd1a:	4a06      	ldr	r2, [pc, #24]	; (2dd34 <NetworkInit+0x2c>)
   2dd1c:	609a      	str	r2, [r3, #8]
	n->mqttwrite = WINC1500_write;
   2dd1e:	687b      	ldr	r3, [r7, #4]
   2dd20:	4a05      	ldr	r2, [pc, #20]	; (2dd38 <NetworkInit+0x30>)
   2dd22:	60da      	str	r2, [r3, #12]
	n->disconnect = WINC1500_disconnect;
   2dd24:	687b      	ldr	r3, [r7, #4]
   2dd26:	4a05      	ldr	r2, [pc, #20]	; (2dd3c <NetworkInit+0x34>)
   2dd28:	611a      	str	r2, [r3, #16]
}
   2dd2a:	46c0      	nop			; (mov r8, r8)
   2dd2c:	46bd      	mov	sp, r7
   2dd2e:	b002      	add	sp, #8
   2dd30:	bd80      	pop	{r7, pc}
   2dd32:	46c0      	nop			; (mov r8, r8)
   2dd34:	0002db8d 	.word	0x0002db8d
   2dd38:	0002dc79 	.word	0x0002dc79
   2dd3c:	0002dcd5 	.word	0x0002dcd5

0002dd40 <ConnectNetwork>:

int ConnectNetwork(Network* n, char* addr, int port, int TLSFlag){
   2dd40:	b580      	push	{r7, lr}
   2dd42:	b088      	sub	sp, #32
   2dd44:	af00      	add	r7, sp, #0
   2dd46:	60f8      	str	r0, [r7, #12]
   2dd48:	60b9      	str	r1, [r7, #8]
   2dd4a:	607a      	str	r2, [r7, #4]
   2dd4c:	603b      	str	r3, [r7, #0]

  //Resolve Server URL.
  gbMQTTBrokerIpresolved = false;
   2dd4e:	4b37      	ldr	r3, [pc, #220]	; (2de2c <ConnectNetwork+0xec>)
   2dd50:	2200      	movs	r2, #0
   2dd52:	701a      	strb	r2, [r3, #0]
  gpcHostAddr = addr;
   2dd54:	4b36      	ldr	r3, [pc, #216]	; (2de30 <ConnectNetwork+0xf0>)
   2dd56:	68ba      	ldr	r2, [r7, #8]
   2dd58:	601a      	str	r2, [r3, #0]
  gethostbyname((uint8*)addr);
   2dd5a:	68bb      	ldr	r3, [r7, #8]
   2dd5c:	0018      	movs	r0, r3
   2dd5e:	4b35      	ldr	r3, [pc, #212]	; (2de34 <ConnectNetwork+0xf4>)
   2dd60:	4798      	blx	r3
 
  //wait for resolver callback
  while (false==gbMQTTBrokerIpresolved){
   2dd62:	e002      	b.n	2dd6a <ConnectNetwork+0x2a>
	  m2m_wifi_handle_events(NULL);
   2dd64:	2000      	movs	r0, #0
   2dd66:	4b34      	ldr	r3, [pc, #208]	; (2de38 <ConnectNetwork+0xf8>)
   2dd68:	4798      	blx	r3
  while (false==gbMQTTBrokerIpresolved){
   2dd6a:	4b30      	ldr	r3, [pc, #192]	; (2de2c <ConnectNetwork+0xec>)
   2dd6c:	781b      	ldrb	r3, [r3, #0]
   2dd6e:	2201      	movs	r2, #1
   2dd70:	4053      	eors	r3, r2
   2dd72:	b2db      	uxtb	r3, r3
   2dd74:	2b00      	cmp	r3, #0
   2dd76:	d1f5      	bne.n	2dd64 <ConnectNetwork+0x24>
  }
  
  n->hostIP = gi32MQTTBrokerIp;
   2dd78:	4b30      	ldr	r3, [pc, #192]	; (2de3c <ConnectNetwork+0xfc>)
   2dd7a:	681a      	ldr	r2, [r3, #0]
   2dd7c:	68fb      	ldr	r3, [r7, #12]
   2dd7e:	605a      	str	r2, [r3, #4]
  
  //connect to socket
  struct sockaddr_in addr_in;
  addr_in.sin_family = AF_INET;
   2dd80:	2310      	movs	r3, #16
   2dd82:	18fb      	adds	r3, r7, r3
   2dd84:	2202      	movs	r2, #2
   2dd86:	801a      	strh	r2, [r3, #0]
  addr_in.sin_port = _htons(port);
   2dd88:	687b      	ldr	r3, [r7, #4]
   2dd8a:	b29b      	uxth	r3, r3
   2dd8c:	021b      	lsls	r3, r3, #8
   2dd8e:	b21a      	sxth	r2, r3
   2dd90:	687b      	ldr	r3, [r7, #4]
   2dd92:	b29b      	uxth	r3, r3
   2dd94:	0a1b      	lsrs	r3, r3, #8
   2dd96:	b29b      	uxth	r3, r3
   2dd98:	b21b      	sxth	r3, r3
   2dd9a:	4313      	orrs	r3, r2
   2dd9c:	b21b      	sxth	r3, r3
   2dd9e:	b29a      	uxth	r2, r3
   2dda0:	2310      	movs	r3, #16
   2dda2:	18fb      	adds	r3, r7, r3
   2dda4:	805a      	strh	r2, [r3, #2]
  addr_in.sin_addr.s_addr = gi32MQTTBrokerIp;
   2dda6:	4b25      	ldr	r3, [pc, #148]	; (2de3c <ConnectNetwork+0xfc>)
   2dda8:	681b      	ldr	r3, [r3, #0]
   2ddaa:	001a      	movs	r2, r3
   2ddac:	2310      	movs	r3, #16
   2ddae:	18fb      	adds	r3, r7, r3
   2ddb0:	605a      	str	r2, [r3, #4]

  /* Create secure socket */ 
  if(n->socket < 0)
   2ddb2:	68fb      	ldr	r3, [r7, #12]
   2ddb4:	681b      	ldr	r3, [r3, #0]
   2ddb6:	2b00      	cmp	r3, #0
   2ddb8:	da0a      	bge.n	2ddd0 <ConnectNetwork+0x90>
	n->socket = socket(AF_INET, SOCK_STREAM, TLSFlag);
   2ddba:	683b      	ldr	r3, [r7, #0]
   2ddbc:	b2db      	uxtb	r3, r3
   2ddbe:	001a      	movs	r2, r3
   2ddc0:	2101      	movs	r1, #1
   2ddc2:	2002      	movs	r0, #2
   2ddc4:	4b1e      	ldr	r3, [pc, #120]	; (2de40 <ConnectNetwork+0x100>)
   2ddc6:	4798      	blx	r3
   2ddc8:	0003      	movs	r3, r0
   2ddca:	001a      	movs	r2, r3
   2ddcc:	68fb      	ldr	r3, [r7, #12]
   2ddce:	601a      	str	r2, [r3, #0]
  
  /* Check if socket was created successfully */
  if (n->socket == -1) {
   2ddd0:	68fb      	ldr	r3, [r7, #12]
   2ddd2:	681b      	ldr	r3, [r3, #0]
   2ddd4:	3301      	adds	r3, #1
   2ddd6:	d108      	bne.n	2ddea <ConnectNetwork+0xaa>
   #ifdef MQTT_PLATFORM_DBG
   printf("ERROR >> socket error.\r\n");
   #endif
   close(n->socket);
   2ddd8:	68fb      	ldr	r3, [r7, #12]
   2ddda:	681b      	ldr	r3, [r3, #0]
   2dddc:	b25b      	sxtb	r3, r3
   2ddde:	0018      	movs	r0, r3
   2dde0:	4b18      	ldr	r3, [pc, #96]	; (2de44 <ConnectNetwork+0x104>)
   2dde2:	4798      	blx	r3
   return SOCK_ERR_INVALID;
   2dde4:	2309      	movs	r3, #9
   2dde6:	425b      	negs	r3, r3
   2dde8:	e01c      	b.n	2de24 <ConnectNetwork+0xe4>
  }
  
  /* If success, connect to socket */
  if (connect(n->socket, (struct sockaddr *)&addr_in, sizeof(struct sockaddr_in)) != SOCK_ERR_NO_ERROR) {
   2ddea:	68fb      	ldr	r3, [r7, #12]
   2ddec:	681b      	ldr	r3, [r3, #0]
   2ddee:	b25b      	sxtb	r3, r3
   2ddf0:	2210      	movs	r2, #16
   2ddf2:	18b9      	adds	r1, r7, r2
   2ddf4:	2210      	movs	r2, #16
   2ddf6:	0018      	movs	r0, r3
   2ddf8:	4b13      	ldr	r3, [pc, #76]	; (2de48 <ConnectNetwork+0x108>)
   2ddfa:	4798      	blx	r3
   2ddfc:	1e03      	subs	r3, r0, #0
   2ddfe:	d002      	beq.n	2de06 <ConnectNetwork+0xc6>
   #ifdef MQTT_PLATFORM_DBG  
   printf("ERROR >> connect error.\r\n");
   #endif
   return SOCK_ERR_INVALID;
   2de00:	2309      	movs	r3, #9
   2de02:	425b      	negs	r3, r3
   2de04:	e00e      	b.n	2de24 <ConnectNetwork+0xe4>
  }
  
  gbMQTTBrokerConnected = false;
   2de06:	4b11      	ldr	r3, [pc, #68]	; (2de4c <ConnectNetwork+0x10c>)
   2de08:	2200      	movs	r2, #0
   2de0a:	701a      	strb	r2, [r3, #0]
  
  /*wait for SOCKET_MSG_CONNECT event */
  while(false==gbMQTTBrokerConnected){
   2de0c:	e002      	b.n	2de14 <ConnectNetwork+0xd4>
    m2m_wifi_handle_events(NULL);
   2de0e:	2000      	movs	r0, #0
   2de10:	4b09      	ldr	r3, [pc, #36]	; (2de38 <ConnectNetwork+0xf8>)
   2de12:	4798      	blx	r3
  while(false==gbMQTTBrokerConnected){
   2de14:	4b0d      	ldr	r3, [pc, #52]	; (2de4c <ConnectNetwork+0x10c>)
   2de16:	781b      	ldrb	r3, [r3, #0]
   2de18:	2201      	movs	r2, #1
   2de1a:	4053      	eors	r3, r2
   2de1c:	b2db      	uxtb	r3, r3
   2de1e:	2b00      	cmp	r3, #0
   2de20:	d1f5      	bne.n	2de0e <ConnectNetwork+0xce>
  
  /* Success */
  #ifdef MQTT_PLATFORM_DBG
  printf("INFO >> ConnectNetwork successful\r\n");
  #endif
  return SOCK_ERR_NO_ERROR;
   2de22:	2300      	movs	r3, #0
   2de24:	0018      	movs	r0, r3
   2de26:	46bd      	mov	sp, r7
   2de28:	b008      	add	sp, #32
   2de2a:	bd80      	pop	{r7, pc}
   2de2c:	20003dc0 	.word	0x20003dc0
   2de30:	20003ecc 	.word	0x20003ecc
   2de34:	00024609 	.word	0x00024609
   2de38:	00020789 	.word	0x00020789
   2de3c:	20003db8 	.word	0x20003db8
   2de40:	00023db5 	.word	0x00023db5
   2de44:	000243c1 	.word	0x000243c1
   2de48:	00023fc9 	.word	0x00023fc9
   2de4c:	20003dc1 	.word	0x20003dc1

0002de50 <allocateClient>:

static void allocateClient(struct mqtt_module *module);
static void deAllocateClient(struct mqtt_module *module);

static void allocateClient(struct mqtt_module *module)
{
   2de50:	b580      	push	{r7, lr}
   2de52:	b084      	sub	sp, #16
   2de54:	af00      	add	r7, sp, #0
   2de56:	6078      	str	r0, [r7, #4]
	unsigned int cIdx;
	
	if(!module)
   2de58:	687b      	ldr	r3, [r7, #4]
   2de5a:	2b00      	cmp	r3, #0
   2de5c:	d022      	beq.n	2dea4 <allocateClient+0x54>
		return;
		
	for(cIdx = 0; cIdx < MQTT_MAX_CLIENTS; cIdx++)
   2de5e:	2300      	movs	r3, #0
   2de60:	60fb      	str	r3, [r7, #12]
   2de62:	e01b      	b.n	2de9c <allocateClient+0x4c>
	{
		if(mqttClientPool[cIdx].mqtt_instance == NULL)
   2de64:	4a11      	ldr	r2, [pc, #68]	; (2deac <allocateClient+0x5c>)
   2de66:	68fb      	ldr	r3, [r7, #12]
   2de68:	2164      	movs	r1, #100	; 0x64
   2de6a:	434b      	muls	r3, r1
   2de6c:	18d3      	adds	r3, r2, r3
   2de6e:	3360      	adds	r3, #96	; 0x60
   2de70:	681b      	ldr	r3, [r3, #0]
   2de72:	2b00      	cmp	r3, #0
   2de74:	d10f      	bne.n	2de96 <allocateClient+0x46>
		{
			mqttClientPool[cIdx].mqtt_instance = module;
   2de76:	4a0d      	ldr	r2, [pc, #52]	; (2deac <allocateClient+0x5c>)
   2de78:	68fb      	ldr	r3, [r7, #12]
   2de7a:	2164      	movs	r1, #100	; 0x64
   2de7c:	434b      	muls	r3, r1
   2de7e:	18d3      	adds	r3, r2, r3
   2de80:	3360      	adds	r3, #96	; 0x60
   2de82:	687a      	ldr	r2, [r7, #4]
   2de84:	601a      	str	r2, [r3, #0]
			module->client = &(mqttClientPool[cIdx].client);
   2de86:	68fb      	ldr	r3, [r7, #12]
   2de88:	2264      	movs	r2, #100	; 0x64
   2de8a:	435a      	muls	r2, r3
   2de8c:	4b07      	ldr	r3, [pc, #28]	; (2deac <allocateClient+0x5c>)
   2de8e:	18d2      	adds	r2, r2, r3
   2de90:	687b      	ldr	r3, [r7, #4]
   2de92:	61da      	str	r2, [r3, #28]
			return;
   2de94:	e007      	b.n	2dea6 <allocateClient+0x56>
	for(cIdx = 0; cIdx < MQTT_MAX_CLIENTS; cIdx++)
   2de96:	68fb      	ldr	r3, [r7, #12]
   2de98:	3301      	adds	r3, #1
   2de9a:	60fb      	str	r3, [r7, #12]
   2de9c:	68fb      	ldr	r3, [r7, #12]
   2de9e:	2b06      	cmp	r3, #6
   2dea0:	d9e0      	bls.n	2de64 <allocateClient+0x14>
   2dea2:	e000      	b.n	2dea6 <allocateClient+0x56>
		return;
   2dea4:	46c0      	nop			; (mov r8, r8)
		}
	}	
}
   2dea6:	46bd      	mov	sp, r7
   2dea8:	b004      	add	sp, #16
   2deaa:	bd80      	pop	{r7, pc}
   2deac:	20003ed0 	.word	0x20003ed0

0002deb0 <mqtt_init>:
		}
	}
}

int mqtt_init(struct mqtt_module *module, struct mqtt_config *config)
{
   2deb0:	b5f0      	push	{r4, r5, r6, r7, lr}
   2deb2:	b089      	sub	sp, #36	; 0x24
   2deb4:	af04      	add	r7, sp, #16
   2deb6:	6078      	str	r0, [r7, #4]
   2deb8:	6039      	str	r1, [r7, #0]
	unsigned int timeout_ms;
	
	if(NULL == module || NULL == config || NULL == config->send_buffer || NULL == config->read_buffer)
   2deba:	687b      	ldr	r3, [r7, #4]
   2debc:	2b00      	cmp	r3, #0
   2debe:	d00a      	beq.n	2ded6 <mqtt_init+0x26>
   2dec0:	683b      	ldr	r3, [r7, #0]
   2dec2:	2b00      	cmp	r3, #0
   2dec4:	d007      	beq.n	2ded6 <mqtt_init+0x26>
   2dec6:	683b      	ldr	r3, [r7, #0]
   2dec8:	691b      	ldr	r3, [r3, #16]
   2deca:	2b00      	cmp	r3, #0
   2decc:	d003      	beq.n	2ded6 <mqtt_init+0x26>
   2dece:	683b      	ldr	r3, [r7, #0]
   2ded0:	689b      	ldr	r3, [r3, #8]
   2ded2:	2b00      	cmp	r3, #0
   2ded4:	d102      	bne.n	2dedc <mqtt_init+0x2c>
		return FAILURE;
   2ded6:	2301      	movs	r3, #1
   2ded8:	425b      	negs	r3, r3
   2deda:	e034      	b.n	2df46 <mqtt_init+0x96>
		
	timeout_ms = config->keep_alive * 1000;
   2dedc:	683b      	ldr	r3, [r7, #0]
   2dede:	889b      	ldrh	r3, [r3, #4]
   2dee0:	001a      	movs	r2, r3
   2dee2:	23fa      	movs	r3, #250	; 0xfa
   2dee4:	009b      	lsls	r3, r3, #2
   2dee6:	4353      	muls	r3, r2
   2dee8:	60fb      	str	r3, [r7, #12]
	NetworkInit(&(module->network));
   2deea:	687b      	ldr	r3, [r7, #4]
   2deec:	3320      	adds	r3, #32
   2deee:	0018      	movs	r0, r3
   2def0:	4b17      	ldr	r3, [pc, #92]	; (2df50 <mqtt_init+0xa0>)
   2def2:	4798      	blx	r3
	memcpy((void *)&(module->config), config, sizeof(struct mqtt_config));
   2def4:	687b      	ldr	r3, [r7, #4]
   2def6:	3304      	adds	r3, #4
   2def8:	6839      	ldr	r1, [r7, #0]
   2defa:	2218      	movs	r2, #24
   2defc:	0018      	movs	r0, r3
   2defe:	4b15      	ldr	r3, [pc, #84]	; (2df54 <mqtt_init+0xa4>)
   2df00:	4798      	blx	r3
	allocateClient(module);
   2df02:	687b      	ldr	r3, [r7, #4]
   2df04:	0018      	movs	r0, r3
   2df06:	4b14      	ldr	r3, [pc, #80]	; (2df58 <mqtt_init+0xa8>)
   2df08:	4798      	blx	r3
	
	if(module->client)
   2df0a:	687b      	ldr	r3, [r7, #4]
   2df0c:	69db      	ldr	r3, [r3, #28]
   2df0e:	2b00      	cmp	r3, #0
   2df10:	d017      	beq.n	2df42 <mqtt_init+0x92>
	{
		MQTTClientInit(module->client, &(module->network), timeout_ms, config->send_buffer, config->send_buffer_size, config->read_buffer, config->read_buffer_size);
   2df12:	687b      	ldr	r3, [r7, #4]
   2df14:	69d8      	ldr	r0, [r3, #28]
   2df16:	687b      	ldr	r3, [r7, #4]
   2df18:	3320      	adds	r3, #32
   2df1a:	001c      	movs	r4, r3
   2df1c:	683b      	ldr	r3, [r7, #0]
   2df1e:	691e      	ldr	r6, [r3, #16]
   2df20:	683b      	ldr	r3, [r7, #0]
   2df22:	695a      	ldr	r2, [r3, #20]
   2df24:	683b      	ldr	r3, [r7, #0]
   2df26:	6899      	ldr	r1, [r3, #8]
   2df28:	683b      	ldr	r3, [r7, #0]
   2df2a:	68db      	ldr	r3, [r3, #12]
   2df2c:	68fd      	ldr	r5, [r7, #12]
   2df2e:	9302      	str	r3, [sp, #8]
   2df30:	9101      	str	r1, [sp, #4]
   2df32:	9200      	str	r2, [sp, #0]
   2df34:	0033      	movs	r3, r6
   2df36:	002a      	movs	r2, r5
   2df38:	0021      	movs	r1, r4
   2df3a:	4c08      	ldr	r4, [pc, #32]	; (2df5c <mqtt_init+0xac>)
   2df3c:	47a0      	blx	r4
		return SUCCESS;
   2df3e:	2300      	movs	r3, #0
   2df40:	e001      	b.n	2df46 <mqtt_init+0x96>
	}
	else
		return FAILURE;
   2df42:	2301      	movs	r3, #1
   2df44:	425b      	negs	r3, r3
}
   2df46:	0018      	movs	r0, r3
   2df48:	46bd      	mov	sp, r7
   2df4a:	b005      	add	sp, #20
   2df4c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   2df4e:	46c0      	nop			; (mov r8, r8)
   2df50:	0002dd09 	.word	0x0002dd09
   2df54:	000330e1 	.word	0x000330e1
   2df58:	0002de51 	.word	0x0002de51
   2df5c:	0002cd81 	.word	0x0002cd81

0002df60 <mqtt_get_config_defaults>:
	else
		return FAILURE;
}

void mqtt_get_config_defaults(struct mqtt_config *const config)
{
   2df60:	b580      	push	{r7, lr}
   2df62:	b082      	sub	sp, #8
   2df64:	af00      	add	r7, sp, #0
   2df66:	6078      	str	r0, [r7, #4]
	config->port = 1883;
   2df68:	687b      	ldr	r3, [r7, #4]
   2df6a:	4a0c      	ldr	r2, [pc, #48]	; (2df9c <mqtt_get_config_defaults+0x3c>)
   2df6c:	801a      	strh	r2, [r3, #0]
	config->tls = 0;
   2df6e:	687b      	ldr	r3, [r7, #4]
   2df70:	2200      	movs	r2, #0
   2df72:	709a      	strb	r2, [r3, #2]
	config->keep_alive = 60;
   2df74:	687b      	ldr	r3, [r7, #4]
   2df76:	223c      	movs	r2, #60	; 0x3c
   2df78:	809a      	strh	r2, [r3, #4]
	/* Below configuration must be initialized by Application */
	config->read_buffer = NULL;
   2df7a:	687b      	ldr	r3, [r7, #4]
   2df7c:	2200      	movs	r2, #0
   2df7e:	609a      	str	r2, [r3, #8]
	config->send_buffer = NULL;
   2df80:	687b      	ldr	r3, [r7, #4]
   2df82:	2200      	movs	r2, #0
   2df84:	611a      	str	r2, [r3, #16]
	config->read_buffer_size = 0;
   2df86:	687b      	ldr	r3, [r7, #4]
   2df88:	2200      	movs	r2, #0
   2df8a:	60da      	str	r2, [r3, #12]
	config->send_buffer_size = 0;
   2df8c:	687b      	ldr	r3, [r7, #4]
   2df8e:	2200      	movs	r2, #0
   2df90:	615a      	str	r2, [r3, #20]
}
   2df92:	46c0      	nop			; (mov r8, r8)
   2df94:	46bd      	mov	sp, r7
   2df96:	b002      	add	sp, #8
   2df98:	bd80      	pop	{r7, pc}
   2df9a:	46c0      	nop			; (mov r8, r8)
   2df9c:	0000075b 	.word	0x0000075b

0002dfa0 <mqtt_register_callback>:

int mqtt_register_callback(struct mqtt_module *module, mqtt_callback_t callback)
{
   2dfa0:	b580      	push	{r7, lr}
   2dfa2:	b082      	sub	sp, #8
   2dfa4:	af00      	add	r7, sp, #0
   2dfa6:	6078      	str	r0, [r7, #4]
   2dfa8:	6039      	str	r1, [r7, #0]
	if(module)
   2dfaa:	687b      	ldr	r3, [r7, #4]
   2dfac:	2b00      	cmp	r3, #0
   2dfae:	d004      	beq.n	2dfba <mqtt_register_callback+0x1a>
	{
		module->callback = callback;
   2dfb0:	687b      	ldr	r3, [r7, #4]
   2dfb2:	683a      	ldr	r2, [r7, #0]
   2dfb4:	601a      	str	r2, [r3, #0]
		return SUCCESS;
   2dfb6:	2300      	movs	r3, #0
   2dfb8:	e001      	b.n	2dfbe <mqtt_register_callback+0x1e>
	}
	else
		return FAILURE;
   2dfba:	2301      	movs	r3, #1
   2dfbc:	425b      	negs	r3, r3
}
   2dfbe:	0018      	movs	r0, r3
   2dfc0:	46bd      	mov	sp, r7
   2dfc2:	b002      	add	sp, #8
   2dfc4:	bd80      	pop	{r7, pc}
	...

0002dfc8 <mqtt_socket_event_handler>:
	module->callback = NULL;
	return SUCCESS;
}

void mqtt_socket_event_handler(SOCKET sock, uint8_t msg_type, void *msg_data)
{
   2dfc8:	b580      	push	{r7, lr}
   2dfca:	b082      	sub	sp, #8
   2dfcc:	af00      	add	r7, sp, #0
   2dfce:	603a      	str	r2, [r7, #0]
   2dfd0:	1dfb      	adds	r3, r7, #7
   2dfd2:	1c02      	adds	r2, r0, #0
   2dfd4:	701a      	strb	r2, [r3, #0]
   2dfd6:	1dbb      	adds	r3, r7, #6
   2dfd8:	1c0a      	adds	r2, r1, #0
   2dfda:	701a      	strb	r2, [r3, #0]
	tcpClientSocketEventHandler(sock, msg_type, msg_data);
   2dfdc:	683a      	ldr	r2, [r7, #0]
   2dfde:	1dbb      	adds	r3, r7, #6
   2dfe0:	7819      	ldrb	r1, [r3, #0]
   2dfe2:	1dfb      	adds	r3, r7, #7
   2dfe4:	781b      	ldrb	r3, [r3, #0]
   2dfe6:	b25b      	sxtb	r3, r3
   2dfe8:	0018      	movs	r0, r3
   2dfea:	4b03      	ldr	r3, [pc, #12]	; (2dff8 <mqtt_socket_event_handler+0x30>)
   2dfec:	4798      	blx	r3
}
   2dfee:	46c0      	nop			; (mov r8, r8)
   2dff0:	46bd      	mov	sp, r7
   2dff2:	b002      	add	sp, #8
   2dff4:	bd80      	pop	{r7, pc}
   2dff6:	46c0      	nop			; (mov r8, r8)
   2dff8:	0002da45 	.word	0x0002da45

0002dffc <mqtt_socket_resolve_handler>:

void mqtt_socket_resolve_handler(uint8_t *domain_name, uint32_t server_ip)
{
   2dffc:	b580      	push	{r7, lr}
   2dffe:	b082      	sub	sp, #8
   2e000:	af00      	add	r7, sp, #0
   2e002:	6078      	str	r0, [r7, #4]
   2e004:	6039      	str	r1, [r7, #0]
	dnsResolveCallback(domain_name, server_ip);
   2e006:	683a      	ldr	r2, [r7, #0]
   2e008:	687b      	ldr	r3, [r7, #4]
   2e00a:	0011      	movs	r1, r2
   2e00c:	0018      	movs	r0, r3
   2e00e:	4b03      	ldr	r3, [pc, #12]	; (2e01c <mqtt_socket_resolve_handler+0x20>)
   2e010:	4798      	blx	r3
}
   2e012:	46c0      	nop			; (mov r8, r8)
   2e014:	46bd      	mov	sp, r7
   2e016:	b002      	add	sp, #8
   2e018:	bd80      	pop	{r7, pc}
   2e01a:	46c0      	nop			; (mov r8, r8)
   2e01c:	0002d9f5 	.word	0x0002d9f5

0002e020 <mqtt_connect>:

int mqtt_connect(struct mqtt_module *module, const char *host)
{
   2e020:	b590      	push	{r4, r7, lr}
   2e022:	b085      	sub	sp, #20
   2e024:	af00      	add	r7, sp, #0
   2e026:	6078      	str	r0, [r7, #4]
   2e028:	6039      	str	r1, [r7, #0]
	union mqtt_data connResult;
	connResult.sock_connected.result = ConnectNetwork(&(module->network), (char *)host, module->config.port, module->config.tls);
   2e02a:	687b      	ldr	r3, [r7, #4]
   2e02c:	3320      	adds	r3, #32
   2e02e:	0018      	movs	r0, r3
   2e030:	687b      	ldr	r3, [r7, #4]
   2e032:	889b      	ldrh	r3, [r3, #4]
   2e034:	001a      	movs	r2, r3
   2e036:	687b      	ldr	r3, [r7, #4]
   2e038:	799b      	ldrb	r3, [r3, #6]
   2e03a:	6839      	ldr	r1, [r7, #0]
   2e03c:	4c09      	ldr	r4, [pc, #36]	; (2e064 <mqtt_connect+0x44>)
   2e03e:	47a0      	blx	r4
   2e040:	0003      	movs	r3, r0
   2e042:	60fb      	str	r3, [r7, #12]
	if(module->callback)
   2e044:	687b      	ldr	r3, [r7, #4]
   2e046:	681b      	ldr	r3, [r3, #0]
   2e048:	2b00      	cmp	r3, #0
   2e04a:	d006      	beq.n	2e05a <mqtt_connect+0x3a>
		module->callback(module, MQTT_CALLBACK_SOCK_CONNECTED, &connResult);
   2e04c:	687b      	ldr	r3, [r7, #4]
   2e04e:	681b      	ldr	r3, [r3, #0]
   2e050:	220c      	movs	r2, #12
   2e052:	18ba      	adds	r2, r7, r2
   2e054:	6878      	ldr	r0, [r7, #4]
   2e056:	2100      	movs	r1, #0
   2e058:	4798      	blx	r3
	return connResult.sock_connected.result;
   2e05a:	68fb      	ldr	r3, [r7, #12]
}
   2e05c:	0018      	movs	r0, r3
   2e05e:	46bd      	mov	sp, r7
   2e060:	b005      	add	sp, #20
   2e062:	bd90      	pop	{r4, r7, pc}
   2e064:	0002dd41 	.word	0x0002dd41

0002e068 <mqtt_connect_broker>:

int mqtt_connect_broker(struct mqtt_module *const module, uint8_t clean_session, const char *id, const char *password, const char *client_id, const char *will_topic, const char *will_msg, uint32_t will_msg_len, uint8_t will_qos, uint8_t will_retain)
{
   2e068:	b580      	push	{r7, lr}
   2e06a:	b09c      	sub	sp, #112	; 0x70
   2e06c:	af00      	add	r7, sp, #0
   2e06e:	60f8      	str	r0, [r7, #12]
   2e070:	607a      	str	r2, [r7, #4]
   2e072:	603b      	str	r3, [r7, #0]
   2e074:	230b      	movs	r3, #11
   2e076:	18fb      	adds	r3, r7, r3
   2e078:	1c0a      	adds	r2, r1, #0
   2e07a:	701a      	strb	r2, [r3, #0]
	// Will Message length is not used by Paho MQTT. 
	int rc;
	union mqtt_data connBrokerResult;
	MQTTPacket_connectData connectData = MQTTPacket_connectData_initializer;
   2e07c:	2310      	movs	r3, #16
   2e07e:	18fa      	adds	r2, r7, r3
   2e080:	4b31      	ldr	r3, [pc, #196]	; (2e148 <mqtt_connect_broker+0xe0>)
   2e082:	0010      	movs	r0, r2
   2e084:	0019      	movs	r1, r3
   2e086:	2358      	movs	r3, #88	; 0x58
   2e088:	001a      	movs	r2, r3
   2e08a:	4b30      	ldr	r3, [pc, #192]	; (2e14c <mqtt_connect_broker+0xe4>)
   2e08c:	4798      	blx	r3
		
	connectData.MQTTVersion = 4; //use protocol version 3.1.1
   2e08e:	2310      	movs	r3, #16
   2e090:	18fb      	adds	r3, r7, r3
   2e092:	2204      	movs	r2, #4
   2e094:	721a      	strb	r2, [r3, #8]
	connectData.clientID.cstring = (char *)client_id;
   2e096:	2310      	movs	r3, #16
   2e098:	18fb      	adds	r3, r7, r3
   2e09a:	6fba      	ldr	r2, [r7, #120]	; 0x78
   2e09c:	60da      	str	r2, [r3, #12]
	connectData.username.cstring = (char *)id;
   2e09e:	2310      	movs	r3, #16
   2e0a0:	18fb      	adds	r3, r7, r3
   2e0a2:	687a      	ldr	r2, [r7, #4]
   2e0a4:	641a      	str	r2, [r3, #64]	; 0x40
	connectData.password.cstring = (char *)password;
   2e0a6:	2310      	movs	r3, #16
   2e0a8:	18fb      	adds	r3, r7, r3
   2e0aa:	683a      	ldr	r2, [r7, #0]
   2e0ac:	64da      	str	r2, [r3, #76]	; 0x4c
	connectData.cleansession = clean_session;
   2e0ae:	2310      	movs	r3, #16
   2e0b0:	18fb      	adds	r3, r7, r3
   2e0b2:	220b      	movs	r2, #11
   2e0b4:	18ba      	adds	r2, r7, r2
   2e0b6:	7812      	ldrb	r2, [r2, #0]
   2e0b8:	769a      	strb	r2, [r3, #26]
	connectData.will.topicName.cstring = (char *)will_topic;
   2e0ba:	2310      	movs	r3, #16
   2e0bc:	18fb      	adds	r3, r7, r3
   2e0be:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
   2e0c0:	625a      	str	r2, [r3, #36]	; 0x24
	connectData.will.message.cstring = (char *)will_msg;
   2e0c2:	2310      	movs	r3, #16
   2e0c4:	18fb      	adds	r3, r7, r3
   2e0c6:	2280      	movs	r2, #128	; 0x80
   2e0c8:	18ba      	adds	r2, r7, r2
   2e0ca:	6812      	ldr	r2, [r2, #0]
   2e0cc:	631a      	str	r2, [r3, #48]	; 0x30
	connectData.will.retained = will_retain;
   2e0ce:	2310      	movs	r3, #16
   2e0d0:	18fb      	adds	r3, r7, r3
   2e0d2:	228c      	movs	r2, #140	; 0x8c
   2e0d4:	18ba      	adds	r2, r7, r2
   2e0d6:	213c      	movs	r1, #60	; 0x3c
   2e0d8:	7812      	ldrb	r2, [r2, #0]
   2e0da:	545a      	strb	r2, [r3, r1]
	connectData.will.qos = will_qos;
   2e0dc:	2310      	movs	r3, #16
   2e0de:	18fb      	adds	r3, r7, r3
   2e0e0:	2288      	movs	r2, #136	; 0x88
   2e0e2:	18ba      	adds	r2, r7, r2
   2e0e4:	213d      	movs	r1, #61	; 0x3d
   2e0e6:	7812      	ldrb	r2, [r2, #0]
   2e0e8:	545a      	strb	r2, [r3, r1]
	
	if(will_topic && will_msg)
   2e0ea:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
   2e0ec:	2b00      	cmp	r3, #0
   2e0ee:	d008      	beq.n	2e102 <mqtt_connect_broker+0x9a>
   2e0f0:	2380      	movs	r3, #128	; 0x80
   2e0f2:	18fb      	adds	r3, r7, r3
   2e0f4:	681b      	ldr	r3, [r3, #0]
   2e0f6:	2b00      	cmp	r3, #0
   2e0f8:	d003      	beq.n	2e102 <mqtt_connect_broker+0x9a>
		connectData.willFlag = 1;
   2e0fa:	2310      	movs	r3, #16
   2e0fc:	18fb      	adds	r3, r7, r3
   2e0fe:	2201      	movs	r2, #1
   2e100:	76da      	strb	r2, [r3, #27]
		
	rc = MQTTConnect(module->client, &connectData);
   2e102:	68fb      	ldr	r3, [r7, #12]
   2e104:	69db      	ldr	r3, [r3, #28]
   2e106:	2210      	movs	r2, #16
   2e108:	18ba      	adds	r2, r7, r2
   2e10a:	0011      	movs	r1, r2
   2e10c:	0018      	movs	r0, r3
   2e10e:	4b10      	ldr	r3, [pc, #64]	; (2e150 <mqtt_connect_broker+0xe8>)
   2e110:	4798      	blx	r3
   2e112:	0003      	movs	r3, r0
   2e114:	66fb      	str	r3, [r7, #108]	; 0x6c
	
	connBrokerResult.connected.result = rc;
   2e116:	6efb      	ldr	r3, [r7, #108]	; 0x6c
   2e118:	b2da      	uxtb	r2, r3
   2e11a:	2368      	movs	r3, #104	; 0x68
   2e11c:	18fb      	adds	r3, r7, r3
   2e11e:	701a      	strb	r2, [r3, #0]
	if(module->callback)
   2e120:	68fb      	ldr	r3, [r7, #12]
   2e122:	681b      	ldr	r3, [r3, #0]
   2e124:	2b00      	cmp	r3, #0
   2e126:	d006      	beq.n	2e136 <mqtt_connect_broker+0xce>
		module->callback(module, MQTT_CALLBACK_CONNECTED, &connBrokerResult);
   2e128:	68fb      	ldr	r3, [r7, #12]
   2e12a:	681b      	ldr	r3, [r3, #0]
   2e12c:	2268      	movs	r2, #104	; 0x68
   2e12e:	18ba      	adds	r2, r7, r2
   2e130:	68f8      	ldr	r0, [r7, #12]
   2e132:	2101      	movs	r1, #1
   2e134:	4798      	blx	r3
	
	module->isConnected = true;
   2e136:	68fb      	ldr	r3, [r7, #12]
   2e138:	2234      	movs	r2, #52	; 0x34
   2e13a:	2101      	movs	r1, #1
   2e13c:	5499      	strb	r1, [r3, r2]
	return rc;
   2e13e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
}
   2e140:	0018      	movs	r0, r3
   2e142:	46bd      	mov	sp, r7
   2e144:	b01c      	add	sp, #112	; 0x70
   2e146:	bd80      	pop	{r7, pc}
   2e148:	0003803c 	.word	0x0003803c
   2e14c:	000330e1 	.word	0x000330e1
   2e150:	0002d491 	.word	0x0002d491

0002e154 <mqtt_disconnect>:

int mqtt_disconnect(struct mqtt_module *const module, int force_close)
{
   2e154:	b580      	push	{r7, lr}
   2e156:	b084      	sub	sp, #16
   2e158:	af00      	add	r7, sp, #0
   2e15a:	6078      	str	r0, [r7, #4]
   2e15c:	6039      	str	r1, [r7, #0]
	//force_close is not used by Paho MQTT
	int rc;
	union mqtt_data disconnectResult;
	
	rc = MQTTDisconnect(module->client);
   2e15e:	687b      	ldr	r3, [r7, #4]
   2e160:	69db      	ldr	r3, [r3, #28]
   2e162:	0018      	movs	r0, r3
   2e164:	4b0c      	ldr	r3, [pc, #48]	; (2e198 <mqtt_disconnect+0x44>)
   2e166:	4798      	blx	r3
   2e168:	0003      	movs	r3, r0
   2e16a:	60fb      	str	r3, [r7, #12]
	
	disconnectResult.disconnected.reason = rc;
   2e16c:	68fb      	ldr	r3, [r7, #12]
   2e16e:	60bb      	str	r3, [r7, #8]
	
	if(module->callback)
   2e170:	687b      	ldr	r3, [r7, #4]
   2e172:	681b      	ldr	r3, [r3, #0]
   2e174:	2b00      	cmp	r3, #0
   2e176:	d006      	beq.n	2e186 <mqtt_disconnect+0x32>
		module->callback(module, MQTT_CALLBACK_DISCONNECTED, &disconnectResult);
   2e178:	687b      	ldr	r3, [r7, #4]
   2e17a:	681b      	ldr	r3, [r3, #0]
   2e17c:	2208      	movs	r2, #8
   2e17e:	18ba      	adds	r2, r7, r2
   2e180:	6878      	ldr	r0, [r7, #4]
   2e182:	2105      	movs	r1, #5
   2e184:	4798      	blx	r3
	
	module->isConnected = false;
   2e186:	687b      	ldr	r3, [r7, #4]
   2e188:	2234      	movs	r2, #52	; 0x34
   2e18a:	2100      	movs	r1, #0
   2e18c:	5499      	strb	r1, [r3, r2]
	return rc;
   2e18e:	68fb      	ldr	r3, [r7, #12]
}
   2e190:	0018      	movs	r0, r3
   2e192:	46bd      	mov	sp, r7
   2e194:	b004      	add	sp, #16
   2e196:	bd80      	pop	{r7, pc}
   2e198:	0002d91d 	.word	0x0002d91d

0002e19c <mqtt_publish>:

int mqtt_publish(struct mqtt_module *const module, const char *topic, const char *msg, uint32_t msg_len, uint8_t qos, uint8_t retain)
{
   2e19c:	b580      	push	{r7, lr}
   2e19e:	b08a      	sub	sp, #40	; 0x28
   2e1a0:	af00      	add	r7, sp, #0
   2e1a2:	60f8      	str	r0, [r7, #12]
   2e1a4:	60b9      	str	r1, [r7, #8]
   2e1a6:	607a      	str	r2, [r7, #4]
   2e1a8:	603b      	str	r3, [r7, #0]
	int rc;
	MQTTMessage mqttMsg;	
	
	mqttMsg.qos = qos;
   2e1aa:	2314      	movs	r3, #20
   2e1ac:	18fb      	adds	r3, r7, r3
   2e1ae:	2230      	movs	r2, #48	; 0x30
   2e1b0:	18ba      	adds	r2, r7, r2
   2e1b2:	7812      	ldrb	r2, [r2, #0]
   2e1b4:	701a      	strb	r2, [r3, #0]
	mqttMsg.payload = (char *)msg;
   2e1b6:	2314      	movs	r3, #20
   2e1b8:	18fb      	adds	r3, r7, r3
   2e1ba:	687a      	ldr	r2, [r7, #4]
   2e1bc:	609a      	str	r2, [r3, #8]
	mqttMsg.payloadlen = (size_t)msg_len;
   2e1be:	2314      	movs	r3, #20
   2e1c0:	18fb      	adds	r3, r7, r3
   2e1c2:	683a      	ldr	r2, [r7, #0]
   2e1c4:	60da      	str	r2, [r3, #12]
	mqttMsg.retained = retain;
   2e1c6:	2314      	movs	r3, #20
   2e1c8:	18fb      	adds	r3, r7, r3
   2e1ca:	2234      	movs	r2, #52	; 0x34
   2e1cc:	18ba      	adds	r2, r7, r2
   2e1ce:	7812      	ldrb	r2, [r2, #0]
   2e1d0:	705a      	strb	r2, [r3, #1]
	
	rc = MQTTPublish(module->client, topic, &mqttMsg);
   2e1d2:	68fb      	ldr	r3, [r7, #12]
   2e1d4:	69db      	ldr	r3, [r3, #28]
   2e1d6:	2214      	movs	r2, #20
   2e1d8:	18ba      	adds	r2, r7, r2
   2e1da:	68b9      	ldr	r1, [r7, #8]
   2e1dc:	0018      	movs	r0, r3
   2e1de:	4b09      	ldr	r3, [pc, #36]	; (2e204 <mqtt_publish+0x68>)
   2e1e0:	4798      	blx	r3
   2e1e2:	0003      	movs	r3, r0
   2e1e4:	627b      	str	r3, [r7, #36]	; 0x24
	
	if(module->callback)
   2e1e6:	68fb      	ldr	r3, [r7, #12]
   2e1e8:	681b      	ldr	r3, [r3, #0]
   2e1ea:	2b00      	cmp	r3, #0
   2e1ec:	d005      	beq.n	2e1fa <mqtt_publish+0x5e>
		module->callback(module, MQTT_CALLBACK_PUBLISHED, NULL);
   2e1ee:	68fb      	ldr	r3, [r7, #12]
   2e1f0:	681b      	ldr	r3, [r3, #0]
   2e1f2:	68f8      	ldr	r0, [r7, #12]
   2e1f4:	2200      	movs	r2, #0
   2e1f6:	2102      	movs	r1, #2
   2e1f8:	4798      	blx	r3
	
	return rc;
   2e1fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
   2e1fc:	0018      	movs	r0, r3
   2e1fe:	46bd      	mov	sp, r7
   2e200:	b00a      	add	sp, #40	; 0x28
   2e202:	bd80      	pop	{r7, pc}
   2e204:	0002d75d 	.word	0x0002d75d

0002e208 <mqtt_subscribe>:

int mqtt_subscribe(struct mqtt_module *module, const char *topic, uint8_t qos, messageHandler msgHandler)
{
   2e208:	b590      	push	{r4, r7, lr}
   2e20a:	b087      	sub	sp, #28
   2e20c:	af00      	add	r7, sp, #0
   2e20e:	60f8      	str	r0, [r7, #12]
   2e210:	60b9      	str	r1, [r7, #8]
   2e212:	603b      	str	r3, [r7, #0]
   2e214:	1dfb      	adds	r3, r7, #7
   2e216:	701a      	strb	r2, [r3, #0]
	int rc;
	
	rc = MQTTSubscribe(module->client, topic, qos, msgHandler);
   2e218:	68fb      	ldr	r3, [r7, #12]
   2e21a:	69d8      	ldr	r0, [r3, #28]
   2e21c:	683c      	ldr	r4, [r7, #0]
   2e21e:	1dfb      	adds	r3, r7, #7
   2e220:	781a      	ldrb	r2, [r3, #0]
   2e222:	68b9      	ldr	r1, [r7, #8]
   2e224:	0023      	movs	r3, r4
   2e226:	4c09      	ldr	r4, [pc, #36]	; (2e24c <mqtt_subscribe+0x44>)
   2e228:	47a0      	blx	r4
   2e22a:	0003      	movs	r3, r0
   2e22c:	617b      	str	r3, [r7, #20]
	
	if(module->callback)
   2e22e:	68fb      	ldr	r3, [r7, #12]
   2e230:	681b      	ldr	r3, [r3, #0]
   2e232:	2b00      	cmp	r3, #0
   2e234:	d005      	beq.n	2e242 <mqtt_subscribe+0x3a>
		module->callback(module, MQTT_CALLBACK_SUBSCRIBED, NULL);	
   2e236:	68fb      	ldr	r3, [r7, #12]
   2e238:	681b      	ldr	r3, [r3, #0]
   2e23a:	68f8      	ldr	r0, [r7, #12]
   2e23c:	2200      	movs	r2, #0
   2e23e:	2103      	movs	r1, #3
   2e240:	4798      	blx	r3
	
	return rc;
   2e242:	697b      	ldr	r3, [r7, #20]
}
   2e244:	0018      	movs	r0, r3
   2e246:	46bd      	mov	sp, r7
   2e248:	b007      	add	sp, #28
   2e24a:	bd90      	pop	{r4, r7, pc}
   2e24c:	0002d5d1 	.word	0x0002d5d1

0002e250 <mqtt_yield>:
	
	return rc;
}

int mqtt_yield(struct mqtt_module *module, int timeout_ms)
{
   2e250:	b580      	push	{r7, lr}
   2e252:	b082      	sub	sp, #8
   2e254:	af00      	add	r7, sp, #0
   2e256:	6078      	str	r0, [r7, #4]
   2e258:	6039      	str	r1, [r7, #0]
	return MQTTYield(module->client, timeout_ms);
   2e25a:	687b      	ldr	r3, [r7, #4]
   2e25c:	69db      	ldr	r3, [r3, #28]
   2e25e:	683a      	ldr	r2, [r7, #0]
   2e260:	0011      	movs	r1, r2
   2e262:	0018      	movs	r0, r3
   2e264:	4b03      	ldr	r3, [pc, #12]	; (2e274 <mqtt_yield+0x24>)
   2e266:	4798      	blx	r3
   2e268:	0003      	movs	r3, r0
   2e26a:	0018      	movs	r0, r3
   2e26c:	46bd      	mov	sp, r7
   2e26e:	b002      	add	sp, #8
   2e270:	bd80      	pop	{r7, pc}
   2e272:	46c0      	nop			; (mov r8, r8)
   2e274:	0002d3d9 	.word	0x0002d3d9

0002e278 <MQTTSerialize_connectLength>:
  * Determines the length of the MQTT connect packet that would be produced using the supplied connect options.
  * @param options the options to be used to build the connect packet
  * @return the length of buffer needed to contain the serialized version of the packet
  */
int MQTTSerialize_connectLength(MQTTPacket_connectData* options)
{
   2e278:	b590      	push	{r4, r7, lr}
   2e27a:	b085      	sub	sp, #20
   2e27c:	af00      	add	r7, sp, #0
   2e27e:	6078      	str	r0, [r7, #4]
	int len = 0;
   2e280:	2300      	movs	r3, #0
   2e282:	60fb      	str	r3, [r7, #12]

	FUNC_ENTRY;

	if (options->MQTTVersion == 3)
   2e284:	687b      	ldr	r3, [r7, #4]
   2e286:	7a1b      	ldrb	r3, [r3, #8]
   2e288:	2b03      	cmp	r3, #3
   2e28a:	d102      	bne.n	2e292 <MQTTSerialize_connectLength+0x1a>
		len = 12; /* variable depending on MQTT or MQIsdp */
   2e28c:	230c      	movs	r3, #12
   2e28e:	60fb      	str	r3, [r7, #12]
   2e290:	e005      	b.n	2e29e <MQTTSerialize_connectLength+0x26>
	else if (options->MQTTVersion == 4)
   2e292:	687b      	ldr	r3, [r7, #4]
   2e294:	7a1b      	ldrb	r3, [r3, #8]
   2e296:	2b04      	cmp	r3, #4
   2e298:	d101      	bne.n	2e29e <MQTTSerialize_connectLength+0x26>
		len = 10;
   2e29a:	230a      	movs	r3, #10
   2e29c:	60fb      	str	r3, [r7, #12]

	len += MQTTstrlen(options->clientID)+2;
   2e29e:	687b      	ldr	r3, [r7, #4]
   2e2a0:	68d8      	ldr	r0, [r3, #12]
   2e2a2:	6919      	ldr	r1, [r3, #16]
   2e2a4:	695a      	ldr	r2, [r3, #20]
   2e2a6:	4b25      	ldr	r3, [pc, #148]	; (2e33c <MQTTSerialize_connectLength+0xc4>)
   2e2a8:	4798      	blx	r3
   2e2aa:	0003      	movs	r3, r0
   2e2ac:	3302      	adds	r3, #2
   2e2ae:	68fa      	ldr	r2, [r7, #12]
   2e2b0:	18d3      	adds	r3, r2, r3
   2e2b2:	60fb      	str	r3, [r7, #12]
	if (options->willFlag)
   2e2b4:	687b      	ldr	r3, [r7, #4]
   2e2b6:	7edb      	ldrb	r3, [r3, #27]
   2e2b8:	2b00      	cmp	r3, #0
   2e2ba:	d013      	beq.n	2e2e4 <MQTTSerialize_connectLength+0x6c>
		len += MQTTstrlen(options->will.topicName)+2 + MQTTstrlen(options->will.message)+2;
   2e2bc:	687b      	ldr	r3, [r7, #4]
   2e2be:	6a58      	ldr	r0, [r3, #36]	; 0x24
   2e2c0:	6a99      	ldr	r1, [r3, #40]	; 0x28
   2e2c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   2e2c4:	4b1d      	ldr	r3, [pc, #116]	; (2e33c <MQTTSerialize_connectLength+0xc4>)
   2e2c6:	4798      	blx	r3
   2e2c8:	0003      	movs	r3, r0
   2e2ca:	1c9c      	adds	r4, r3, #2
   2e2cc:	687b      	ldr	r3, [r7, #4]
   2e2ce:	6b18      	ldr	r0, [r3, #48]	; 0x30
   2e2d0:	6b59      	ldr	r1, [r3, #52]	; 0x34
   2e2d2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
   2e2d4:	4b19      	ldr	r3, [pc, #100]	; (2e33c <MQTTSerialize_connectLength+0xc4>)
   2e2d6:	4798      	blx	r3
   2e2d8:	0003      	movs	r3, r0
   2e2da:	18e3      	adds	r3, r4, r3
   2e2dc:	3302      	adds	r3, #2
   2e2de:	68fa      	ldr	r2, [r7, #12]
   2e2e0:	18d3      	adds	r3, r2, r3
   2e2e2:	60fb      	str	r3, [r7, #12]
	if (options->username.cstring || options->username.lenstring.data)
   2e2e4:	687b      	ldr	r3, [r7, #4]
   2e2e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   2e2e8:	2b00      	cmp	r3, #0
   2e2ea:	d103      	bne.n	2e2f4 <MQTTSerialize_connectLength+0x7c>
   2e2ec:	687b      	ldr	r3, [r7, #4]
   2e2ee:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   2e2f0:	2b00      	cmp	r3, #0
   2e2f2:	d00a      	beq.n	2e30a <MQTTSerialize_connectLength+0x92>
		len += MQTTstrlen(options->username)+2;
   2e2f4:	687b      	ldr	r3, [r7, #4]
   2e2f6:	6c18      	ldr	r0, [r3, #64]	; 0x40
   2e2f8:	6c59      	ldr	r1, [r3, #68]	; 0x44
   2e2fa:	6c9a      	ldr	r2, [r3, #72]	; 0x48
   2e2fc:	4b0f      	ldr	r3, [pc, #60]	; (2e33c <MQTTSerialize_connectLength+0xc4>)
   2e2fe:	4798      	blx	r3
   2e300:	0003      	movs	r3, r0
   2e302:	3302      	adds	r3, #2
   2e304:	68fa      	ldr	r2, [r7, #12]
   2e306:	18d3      	adds	r3, r2, r3
   2e308:	60fb      	str	r3, [r7, #12]
	if (options->password.cstring || options->password.lenstring.data)
   2e30a:	687b      	ldr	r3, [r7, #4]
   2e30c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   2e30e:	2b00      	cmp	r3, #0
   2e310:	d103      	bne.n	2e31a <MQTTSerialize_connectLength+0xa2>
   2e312:	687b      	ldr	r3, [r7, #4]
   2e314:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   2e316:	2b00      	cmp	r3, #0
   2e318:	d00a      	beq.n	2e330 <MQTTSerialize_connectLength+0xb8>
		len += MQTTstrlen(options->password)+2;
   2e31a:	687b      	ldr	r3, [r7, #4]
   2e31c:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
   2e31e:	6d19      	ldr	r1, [r3, #80]	; 0x50
   2e320:	6d5a      	ldr	r2, [r3, #84]	; 0x54
   2e322:	4b06      	ldr	r3, [pc, #24]	; (2e33c <MQTTSerialize_connectLength+0xc4>)
   2e324:	4798      	blx	r3
   2e326:	0003      	movs	r3, r0
   2e328:	3302      	adds	r3, #2
   2e32a:	68fa      	ldr	r2, [r7, #12]
   2e32c:	18d3      	adds	r3, r2, r3
   2e32e:	60fb      	str	r3, [r7, #12]

	FUNC_EXIT_RC(len);
	return len;
   2e330:	68fb      	ldr	r3, [r7, #12]
}
   2e332:	0018      	movs	r0, r3
   2e334:	46bd      	mov	sp, r7
   2e336:	b005      	add	sp, #20
   2e338:	bd90      	pop	{r4, r7, pc}
   2e33a:	46c0      	nop			; (mov r8, r8)
   2e33c:	0002ece9 	.word	0x0002ece9

0002e340 <MQTTSerialize_connect>:
  * @param len the length in bytes of the supplied buffer
  * @param options the options to be used to build the connect packet
  * @return serialized length, or error if 0
  */
int MQTTSerialize_connect(unsigned char* buf, int buflen, MQTTPacket_connectData* options)
{
   2e340:	b590      	push	{r4, r7, lr}
   2e342:	b08b      	sub	sp, #44	; 0x2c
   2e344:	af00      	add	r7, sp, #0
   2e346:	60f8      	str	r0, [r7, #12]
   2e348:	60b9      	str	r1, [r7, #8]
   2e34a:	607a      	str	r2, [r7, #4]
	unsigned char *ptr = buf;
   2e34c:	68fb      	ldr	r3, [r7, #12]
   2e34e:	61fb      	str	r3, [r7, #28]
	MQTTHeader header = {0};
   2e350:	2300      	movs	r3, #0
   2e352:	61bb      	str	r3, [r7, #24]
	MQTTConnectFlags flags = {0};
   2e354:	2300      	movs	r3, #0
   2e356:	617b      	str	r3, [r7, #20]
	int len = 0;
   2e358:	2300      	movs	r3, #0
   2e35a:	623b      	str	r3, [r7, #32]
	int rc = -1;
   2e35c:	2301      	movs	r3, #1
   2e35e:	425b      	negs	r3, r3
   2e360:	627b      	str	r3, [r7, #36]	; 0x24

	FUNC_ENTRY;
	if (MQTTPacket_len(len = MQTTSerialize_connectLength(options)) > buflen)
   2e362:	687b      	ldr	r3, [r7, #4]
   2e364:	0018      	movs	r0, r3
   2e366:	4b8c      	ldr	r3, [pc, #560]	; (2e598 <MQTTSerialize_connect+0x258>)
   2e368:	4798      	blx	r3
   2e36a:	0003      	movs	r3, r0
   2e36c:	623b      	str	r3, [r7, #32]
   2e36e:	6a3b      	ldr	r3, [r7, #32]
   2e370:	0018      	movs	r0, r3
   2e372:	4b8a      	ldr	r3, [pc, #552]	; (2e59c <MQTTSerialize_connect+0x25c>)
   2e374:	4798      	blx	r3
   2e376:	0002      	movs	r2, r0
   2e378:	68bb      	ldr	r3, [r7, #8]
   2e37a:	429a      	cmp	r2, r3
   2e37c:	dd03      	ble.n	2e386 <MQTTSerialize_connect+0x46>
	{
		rc = MQTTPACKET_BUFFER_TOO_SHORT;
   2e37e:	2302      	movs	r3, #2
   2e380:	425b      	negs	r3, r3
   2e382:	627b      	str	r3, [r7, #36]	; 0x24
		goto exit;
   2e384:	e103      	b.n	2e58e <MQTTSerialize_connect+0x24e>
	}

	header.byte = 0;
   2e386:	2318      	movs	r3, #24
   2e388:	18fb      	adds	r3, r7, r3
   2e38a:	2200      	movs	r2, #0
   2e38c:	701a      	strb	r2, [r3, #0]
	header.bits.type = CONNECT;
   2e38e:	2318      	movs	r3, #24
   2e390:	18fb      	adds	r3, r7, r3
   2e392:	781a      	ldrb	r2, [r3, #0]
   2e394:	210f      	movs	r1, #15
   2e396:	400a      	ands	r2, r1
   2e398:	1c11      	adds	r1, r2, #0
   2e39a:	2210      	movs	r2, #16
   2e39c:	430a      	orrs	r2, r1
   2e39e:	701a      	strb	r2, [r3, #0]
	writeChar(&ptr, header.byte); /* write header */
   2e3a0:	2318      	movs	r3, #24
   2e3a2:	18fb      	adds	r3, r7, r3
   2e3a4:	781a      	ldrb	r2, [r3, #0]
   2e3a6:	231c      	movs	r3, #28
   2e3a8:	18fb      	adds	r3, r7, r3
   2e3aa:	0011      	movs	r1, r2
   2e3ac:	0018      	movs	r0, r3
   2e3ae:	4b7c      	ldr	r3, [pc, #496]	; (2e5a0 <MQTTSerialize_connect+0x260>)
   2e3b0:	4798      	blx	r3

	ptr += MQTTPacket_encode(ptr, len); /* write remaining length */
   2e3b2:	69fb      	ldr	r3, [r7, #28]
   2e3b4:	6a3a      	ldr	r2, [r7, #32]
   2e3b6:	0011      	movs	r1, r2
   2e3b8:	0018      	movs	r0, r3
   2e3ba:	4b7a      	ldr	r3, [pc, #488]	; (2e5a4 <MQTTSerialize_connect+0x264>)
   2e3bc:	4798      	blx	r3
   2e3be:	0002      	movs	r2, r0
   2e3c0:	69fb      	ldr	r3, [r7, #28]
   2e3c2:	189b      	adds	r3, r3, r2
   2e3c4:	61fb      	str	r3, [r7, #28]

	if (options->MQTTVersion == 4)
   2e3c6:	687b      	ldr	r3, [r7, #4]
   2e3c8:	7a1b      	ldrb	r3, [r3, #8]
   2e3ca:	2b04      	cmp	r3, #4
   2e3cc:	d10d      	bne.n	2e3ea <MQTTSerialize_connect+0xaa>
	{
		writeCString(&ptr, "MQTT");
   2e3ce:	4a76      	ldr	r2, [pc, #472]	; (2e5a8 <MQTTSerialize_connect+0x268>)
   2e3d0:	231c      	movs	r3, #28
   2e3d2:	18fb      	adds	r3, r7, r3
   2e3d4:	0011      	movs	r1, r2
   2e3d6:	0018      	movs	r0, r3
   2e3d8:	4b74      	ldr	r3, [pc, #464]	; (2e5ac <MQTTSerialize_connect+0x26c>)
   2e3da:	4798      	blx	r3
		writeChar(&ptr, (char) 4);
   2e3dc:	231c      	movs	r3, #28
   2e3de:	18fb      	adds	r3, r7, r3
   2e3e0:	2104      	movs	r1, #4
   2e3e2:	0018      	movs	r0, r3
   2e3e4:	4b6e      	ldr	r3, [pc, #440]	; (2e5a0 <MQTTSerialize_connect+0x260>)
   2e3e6:	4798      	blx	r3
   2e3e8:	e00c      	b.n	2e404 <MQTTSerialize_connect+0xc4>
	}
	else
	{
		writeCString(&ptr, "MQIsdp");
   2e3ea:	4a71      	ldr	r2, [pc, #452]	; (2e5b0 <MQTTSerialize_connect+0x270>)
   2e3ec:	231c      	movs	r3, #28
   2e3ee:	18fb      	adds	r3, r7, r3
   2e3f0:	0011      	movs	r1, r2
   2e3f2:	0018      	movs	r0, r3
   2e3f4:	4b6d      	ldr	r3, [pc, #436]	; (2e5ac <MQTTSerialize_connect+0x26c>)
   2e3f6:	4798      	blx	r3
		writeChar(&ptr, (char) 3);
   2e3f8:	231c      	movs	r3, #28
   2e3fa:	18fb      	adds	r3, r7, r3
   2e3fc:	2103      	movs	r1, #3
   2e3fe:	0018      	movs	r0, r3
   2e400:	4b67      	ldr	r3, [pc, #412]	; (2e5a0 <MQTTSerialize_connect+0x260>)
   2e402:	4798      	blx	r3
	}

	flags.all = 0;
   2e404:	2314      	movs	r3, #20
   2e406:	18fb      	adds	r3, r7, r3
   2e408:	2200      	movs	r2, #0
   2e40a:	701a      	strb	r2, [r3, #0]
	flags.bits.cleansession = options->cleansession;
   2e40c:	687b      	ldr	r3, [r7, #4]
   2e40e:	7e9b      	ldrb	r3, [r3, #26]
   2e410:	1c1a      	adds	r2, r3, #0
   2e412:	2301      	movs	r3, #1
   2e414:	4013      	ands	r3, r2
   2e416:	b2da      	uxtb	r2, r3
   2e418:	2314      	movs	r3, #20
   2e41a:	18fb      	adds	r3, r7, r3
   2e41c:	2101      	movs	r1, #1
   2e41e:	400a      	ands	r2, r1
   2e420:	1890      	adds	r0, r2, r2
   2e422:	781a      	ldrb	r2, [r3, #0]
   2e424:	2102      	movs	r1, #2
   2e426:	438a      	bics	r2, r1
   2e428:	1c11      	adds	r1, r2, #0
   2e42a:	1c02      	adds	r2, r0, #0
   2e42c:	430a      	orrs	r2, r1
   2e42e:	701a      	strb	r2, [r3, #0]
	flags.bits.will = (options->willFlag) ? 1 : 0;
   2e430:	687b      	ldr	r3, [r7, #4]
   2e432:	7edb      	ldrb	r3, [r3, #27]
   2e434:	1e5a      	subs	r2, r3, #1
   2e436:	4193      	sbcs	r3, r2
   2e438:	b2da      	uxtb	r2, r3
   2e43a:	2314      	movs	r3, #20
   2e43c:	18fb      	adds	r3, r7, r3
   2e43e:	2101      	movs	r1, #1
   2e440:	400a      	ands	r2, r1
   2e442:	0090      	lsls	r0, r2, #2
   2e444:	781a      	ldrb	r2, [r3, #0]
   2e446:	2104      	movs	r1, #4
   2e448:	438a      	bics	r2, r1
   2e44a:	1c11      	adds	r1, r2, #0
   2e44c:	1c02      	adds	r2, r0, #0
   2e44e:	430a      	orrs	r2, r1
   2e450:	701a      	strb	r2, [r3, #0]
	if (flags.bits.will)
   2e452:	2314      	movs	r3, #20
   2e454:	18fb      	adds	r3, r7, r3
   2e456:	781b      	ldrb	r3, [r3, #0]
   2e458:	2204      	movs	r2, #4
   2e45a:	4013      	ands	r3, r2
   2e45c:	b2db      	uxtb	r3, r3
   2e45e:	2b00      	cmp	r3, #0
   2e460:	d025      	beq.n	2e4ae <MQTTSerialize_connect+0x16e>
	{
		flags.bits.willQoS = options->will.qos;
   2e462:	687b      	ldr	r3, [r7, #4]
   2e464:	223d      	movs	r2, #61	; 0x3d
   2e466:	5c9b      	ldrb	r3, [r3, r2]
   2e468:	1c1a      	adds	r2, r3, #0
   2e46a:	2303      	movs	r3, #3
   2e46c:	4013      	ands	r3, r2
   2e46e:	b2da      	uxtb	r2, r3
   2e470:	2314      	movs	r3, #20
   2e472:	18fb      	adds	r3, r7, r3
   2e474:	2103      	movs	r1, #3
   2e476:	400a      	ands	r2, r1
   2e478:	00d0      	lsls	r0, r2, #3
   2e47a:	781a      	ldrb	r2, [r3, #0]
   2e47c:	2118      	movs	r1, #24
   2e47e:	438a      	bics	r2, r1
   2e480:	1c11      	adds	r1, r2, #0
   2e482:	1c02      	adds	r2, r0, #0
   2e484:	430a      	orrs	r2, r1
   2e486:	701a      	strb	r2, [r3, #0]
		flags.bits.willRetain = options->will.retained;
   2e488:	687b      	ldr	r3, [r7, #4]
   2e48a:	223c      	movs	r2, #60	; 0x3c
   2e48c:	5c9b      	ldrb	r3, [r3, r2]
   2e48e:	1c1a      	adds	r2, r3, #0
   2e490:	2301      	movs	r3, #1
   2e492:	4013      	ands	r3, r2
   2e494:	b2da      	uxtb	r2, r3
   2e496:	2314      	movs	r3, #20
   2e498:	18fb      	adds	r3, r7, r3
   2e49a:	2101      	movs	r1, #1
   2e49c:	400a      	ands	r2, r1
   2e49e:	0150      	lsls	r0, r2, #5
   2e4a0:	781a      	ldrb	r2, [r3, #0]
   2e4a2:	2120      	movs	r1, #32
   2e4a4:	438a      	bics	r2, r1
   2e4a6:	1c11      	adds	r1, r2, #0
   2e4a8:	1c02      	adds	r2, r0, #0
   2e4aa:	430a      	orrs	r2, r1
   2e4ac:	701a      	strb	r2, [r3, #0]
	}

	if (options->username.cstring || options->username.lenstring.data)
   2e4ae:	687b      	ldr	r3, [r7, #4]
   2e4b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   2e4b2:	2b00      	cmp	r3, #0
   2e4b4:	d103      	bne.n	2e4be <MQTTSerialize_connect+0x17e>
   2e4b6:	687b      	ldr	r3, [r7, #4]
   2e4b8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   2e4ba:	2b00      	cmp	r3, #0
   2e4bc:	d006      	beq.n	2e4cc <MQTTSerialize_connect+0x18c>
		flags.bits.username = 1;
   2e4be:	2314      	movs	r3, #20
   2e4c0:	18fb      	adds	r3, r7, r3
   2e4c2:	781a      	ldrb	r2, [r3, #0]
   2e4c4:	2180      	movs	r1, #128	; 0x80
   2e4c6:	4249      	negs	r1, r1
   2e4c8:	430a      	orrs	r2, r1
   2e4ca:	701a      	strb	r2, [r3, #0]
	if (options->password.cstring || options->password.lenstring.data)
   2e4cc:	687b      	ldr	r3, [r7, #4]
   2e4ce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   2e4d0:	2b00      	cmp	r3, #0
   2e4d2:	d103      	bne.n	2e4dc <MQTTSerialize_connect+0x19c>
   2e4d4:	687b      	ldr	r3, [r7, #4]
   2e4d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   2e4d8:	2b00      	cmp	r3, #0
   2e4da:	d005      	beq.n	2e4e8 <MQTTSerialize_connect+0x1a8>
		flags.bits.password = 1;
   2e4dc:	2314      	movs	r3, #20
   2e4de:	18fb      	adds	r3, r7, r3
   2e4e0:	781a      	ldrb	r2, [r3, #0]
   2e4e2:	2140      	movs	r1, #64	; 0x40
   2e4e4:	430a      	orrs	r2, r1
   2e4e6:	701a      	strb	r2, [r3, #0]

	writeChar(&ptr, flags.all);
   2e4e8:	2314      	movs	r3, #20
   2e4ea:	18fb      	adds	r3, r7, r3
   2e4ec:	781a      	ldrb	r2, [r3, #0]
   2e4ee:	231c      	movs	r3, #28
   2e4f0:	18fb      	adds	r3, r7, r3
   2e4f2:	0011      	movs	r1, r2
   2e4f4:	0018      	movs	r0, r3
   2e4f6:	4b2a      	ldr	r3, [pc, #168]	; (2e5a0 <MQTTSerialize_connect+0x260>)
   2e4f8:	4798      	blx	r3
	writeInt(&ptr, options->keepAliveInterval);
   2e4fa:	687b      	ldr	r3, [r7, #4]
   2e4fc:	8b1b      	ldrh	r3, [r3, #24]
   2e4fe:	001a      	movs	r2, r3
   2e500:	231c      	movs	r3, #28
   2e502:	18fb      	adds	r3, r7, r3
   2e504:	0011      	movs	r1, r2
   2e506:	0018      	movs	r0, r3
   2e508:	4b2a      	ldr	r3, [pc, #168]	; (2e5b4 <MQTTSerialize_connect+0x274>)
   2e50a:	4798      	blx	r3
	writeMQTTString(&ptr, options->clientID);
   2e50c:	687b      	ldr	r3, [r7, #4]
   2e50e:	221c      	movs	r2, #28
   2e510:	18b8      	adds	r0, r7, r2
   2e512:	68d9      	ldr	r1, [r3, #12]
   2e514:	691a      	ldr	r2, [r3, #16]
   2e516:	695b      	ldr	r3, [r3, #20]
   2e518:	4c27      	ldr	r4, [pc, #156]	; (2e5b8 <MQTTSerialize_connect+0x278>)
   2e51a:	47a0      	blx	r4
	if (options->willFlag)
   2e51c:	687b      	ldr	r3, [r7, #4]
   2e51e:	7edb      	ldrb	r3, [r3, #27]
   2e520:	2b00      	cmp	r3, #0
   2e522:	d00f      	beq.n	2e544 <MQTTSerialize_connect+0x204>
	{
		writeMQTTString(&ptr, options->will.topicName);
   2e524:	687b      	ldr	r3, [r7, #4]
   2e526:	221c      	movs	r2, #28
   2e528:	18b8      	adds	r0, r7, r2
   2e52a:	6a59      	ldr	r1, [r3, #36]	; 0x24
   2e52c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   2e52e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   2e530:	4c21      	ldr	r4, [pc, #132]	; (2e5b8 <MQTTSerialize_connect+0x278>)
   2e532:	47a0      	blx	r4
		writeMQTTString(&ptr, options->will.message);
   2e534:	687b      	ldr	r3, [r7, #4]
   2e536:	221c      	movs	r2, #28
   2e538:	18b8      	adds	r0, r7, r2
   2e53a:	6b19      	ldr	r1, [r3, #48]	; 0x30
   2e53c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
   2e53e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   2e540:	4c1d      	ldr	r4, [pc, #116]	; (2e5b8 <MQTTSerialize_connect+0x278>)
   2e542:	47a0      	blx	r4
	}
	if (flags.bits.username)
   2e544:	2314      	movs	r3, #20
   2e546:	18fb      	adds	r3, r7, r3
   2e548:	781b      	ldrb	r3, [r3, #0]
   2e54a:	227f      	movs	r2, #127	; 0x7f
   2e54c:	4393      	bics	r3, r2
   2e54e:	b2db      	uxtb	r3, r3
   2e550:	2b00      	cmp	r3, #0
   2e552:	d007      	beq.n	2e564 <MQTTSerialize_connect+0x224>
		writeMQTTString(&ptr, options->username);
   2e554:	687b      	ldr	r3, [r7, #4]
   2e556:	221c      	movs	r2, #28
   2e558:	18b8      	adds	r0, r7, r2
   2e55a:	6c19      	ldr	r1, [r3, #64]	; 0x40
   2e55c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
   2e55e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   2e560:	4c15      	ldr	r4, [pc, #84]	; (2e5b8 <MQTTSerialize_connect+0x278>)
   2e562:	47a0      	blx	r4
	if (flags.bits.password)
   2e564:	2314      	movs	r3, #20
   2e566:	18fb      	adds	r3, r7, r3
   2e568:	781b      	ldrb	r3, [r3, #0]
   2e56a:	2240      	movs	r2, #64	; 0x40
   2e56c:	4013      	ands	r3, r2
   2e56e:	b2db      	uxtb	r3, r3
   2e570:	2b00      	cmp	r3, #0
   2e572:	d007      	beq.n	2e584 <MQTTSerialize_connect+0x244>
		writeMQTTString(&ptr, options->password);
   2e574:	687b      	ldr	r3, [r7, #4]
   2e576:	221c      	movs	r2, #28
   2e578:	18b8      	adds	r0, r7, r2
   2e57a:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
   2e57c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
   2e57e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   2e580:	4c0d      	ldr	r4, [pc, #52]	; (2e5b8 <MQTTSerialize_connect+0x278>)
   2e582:	47a0      	blx	r4

	rc = ptr - buf;
   2e584:	69fb      	ldr	r3, [r7, #28]
   2e586:	001a      	movs	r2, r3
   2e588:	68fb      	ldr	r3, [r7, #12]
   2e58a:	1ad3      	subs	r3, r2, r3
   2e58c:	627b      	str	r3, [r7, #36]	; 0x24

	exit: FUNC_EXIT_RC(rc);
	return rc;
   2e58e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
   2e590:	0018      	movs	r0, r3
   2e592:	46bd      	mov	sp, r7
   2e594:	b00b      	add	sp, #44	; 0x2c
   2e596:	bd90      	pop	{r4, r7, pc}
   2e598:	0002e279 	.word	0x0002e279
   2e59c:	0002ea0d 	.word	0x0002ea0d
   2e5a0:	0002eb2f 	.word	0x0002eb2f
   2e5a4:	0002e915 	.word	0x0002e915
   2e5a8:	00038094 	.word	0x00038094
   2e5ac:	0002ebb1 	.word	0x0002ebb1
   2e5b0:	0003809c 	.word	0x0003809c
   2e5b4:	0002eb59 	.word	0x0002eb59
   2e5b8:	0002ec01 	.word	0x0002ec01

0002e5bc <MQTTDeserialize_connack>:
  * @param buf the raw buffer data, of the correct length determined by the remaining length field
  * @param len the length in bytes of the data in the supplied buffer
  * @return error code.  1 is success, 0 is failure
  */
int MQTTDeserialize_connack(unsigned char* sessionPresent, unsigned char* connack_rc, unsigned char* buf, int buflen)
{
   2e5bc:	b580      	push	{r7, lr}
   2e5be:	b08a      	sub	sp, #40	; 0x28
   2e5c0:	af00      	add	r7, sp, #0
   2e5c2:	60f8      	str	r0, [r7, #12]
   2e5c4:	60b9      	str	r1, [r7, #8]
   2e5c6:	607a      	str	r2, [r7, #4]
   2e5c8:	603b      	str	r3, [r7, #0]
	MQTTHeader header = {0};
   2e5ca:	2300      	movs	r3, #0
   2e5cc:	61fb      	str	r3, [r7, #28]
	unsigned char* curdata = buf;
   2e5ce:	687b      	ldr	r3, [r7, #4]
   2e5d0:	61bb      	str	r3, [r7, #24]
	unsigned char* enddata = NULL;
   2e5d2:	2300      	movs	r3, #0
   2e5d4:	623b      	str	r3, [r7, #32]
	int rc = 0;
   2e5d6:	2300      	movs	r3, #0
   2e5d8:	627b      	str	r3, [r7, #36]	; 0x24
	int mylen;
	MQTTConnackFlags flags = {0};
   2e5da:	2300      	movs	r3, #0
   2e5dc:	613b      	str	r3, [r7, #16]

	FUNC_ENTRY;
	header.byte = readChar(&curdata);
   2e5de:	2318      	movs	r3, #24
   2e5e0:	18fb      	adds	r3, r7, r3
   2e5e2:	0018      	movs	r0, r3
   2e5e4:	4b25      	ldr	r3, [pc, #148]	; (2e67c <MQTTDeserialize_connack+0xc0>)
   2e5e6:	4798      	blx	r3
   2e5e8:	0003      	movs	r3, r0
   2e5ea:	001a      	movs	r2, r3
   2e5ec:	231c      	movs	r3, #28
   2e5ee:	18fb      	adds	r3, r7, r3
   2e5f0:	701a      	strb	r2, [r3, #0]
	if (header.bits.type != CONNACK)
   2e5f2:	231c      	movs	r3, #28
   2e5f4:	18fb      	adds	r3, r7, r3
   2e5f6:	781b      	ldrb	r3, [r3, #0]
   2e5f8:	220f      	movs	r2, #15
   2e5fa:	4393      	bics	r3, r2
   2e5fc:	b2db      	uxtb	r3, r3
   2e5fe:	2b20      	cmp	r3, #32
   2e600:	d134      	bne.n	2e66c <MQTTDeserialize_connack+0xb0>
		goto exit;

	curdata += (rc = MQTTPacket_decodeBuf(curdata, &mylen)); /* read remaining length */
   2e602:	69bb      	ldr	r3, [r7, #24]
   2e604:	2214      	movs	r2, #20
   2e606:	18ba      	adds	r2, r7, r2
   2e608:	0011      	movs	r1, r2
   2e60a:	0018      	movs	r0, r3
   2e60c:	4b1c      	ldr	r3, [pc, #112]	; (2e680 <MQTTDeserialize_connack+0xc4>)
   2e60e:	4798      	blx	r3
   2e610:	0003      	movs	r3, r0
   2e612:	627b      	str	r3, [r7, #36]	; 0x24
   2e614:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   2e616:	69bb      	ldr	r3, [r7, #24]
   2e618:	189b      	adds	r3, r3, r2
   2e61a:	61bb      	str	r3, [r7, #24]
	enddata = curdata + mylen;
   2e61c:	69bb      	ldr	r3, [r7, #24]
   2e61e:	697a      	ldr	r2, [r7, #20]
   2e620:	189b      	adds	r3, r3, r2
   2e622:	623b      	str	r3, [r7, #32]
	if (enddata - curdata < 2)
   2e624:	6a3b      	ldr	r3, [r7, #32]
   2e626:	69ba      	ldr	r2, [r7, #24]
   2e628:	1a9b      	subs	r3, r3, r2
   2e62a:	2b01      	cmp	r3, #1
   2e62c:	dd20      	ble.n	2e670 <MQTTDeserialize_connack+0xb4>
		goto exit;

	flags.all = readChar(&curdata);
   2e62e:	2318      	movs	r3, #24
   2e630:	18fb      	adds	r3, r7, r3
   2e632:	0018      	movs	r0, r3
   2e634:	4b11      	ldr	r3, [pc, #68]	; (2e67c <MQTTDeserialize_connack+0xc0>)
   2e636:	4798      	blx	r3
   2e638:	0003      	movs	r3, r0
   2e63a:	001a      	movs	r2, r3
   2e63c:	2310      	movs	r3, #16
   2e63e:	18fb      	adds	r3, r7, r3
   2e640:	701a      	strb	r2, [r3, #0]
	*sessionPresent = flags.bits.sessionpresent;
   2e642:	2310      	movs	r3, #16
   2e644:	18fb      	adds	r3, r7, r3
   2e646:	781b      	ldrb	r3, [r3, #0]
   2e648:	061b      	lsls	r3, r3, #24
   2e64a:	0fdb      	lsrs	r3, r3, #31
   2e64c:	b2db      	uxtb	r3, r3
   2e64e:	001a      	movs	r2, r3
   2e650:	68fb      	ldr	r3, [r7, #12]
   2e652:	701a      	strb	r2, [r3, #0]
	*connack_rc = readChar(&curdata);
   2e654:	2318      	movs	r3, #24
   2e656:	18fb      	adds	r3, r7, r3
   2e658:	0018      	movs	r0, r3
   2e65a:	4b08      	ldr	r3, [pc, #32]	; (2e67c <MQTTDeserialize_connack+0xc0>)
   2e65c:	4798      	blx	r3
   2e65e:	0003      	movs	r3, r0
   2e660:	001a      	movs	r2, r3
   2e662:	68bb      	ldr	r3, [r7, #8]
   2e664:	701a      	strb	r2, [r3, #0]

	rc = 1;
   2e666:	2301      	movs	r3, #1
   2e668:	627b      	str	r3, [r7, #36]	; 0x24
   2e66a:	e002      	b.n	2e672 <MQTTDeserialize_connack+0xb6>
		goto exit;
   2e66c:	46c0      	nop			; (mov r8, r8)
   2e66e:	e000      	b.n	2e672 <MQTTDeserialize_connack+0xb6>
		goto exit;
   2e670:	46c0      	nop			; (mov r8, r8)
exit:
	FUNC_EXIT_RC(rc);
	return rc;
   2e672:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
   2e674:	0018      	movs	r0, r3
   2e676:	46bd      	mov	sp, r7
   2e678:	b00a      	add	sp, #40	; 0x28
   2e67a:	bd80      	pop	{r7, pc}
   2e67c:	0002eb03 	.word	0x0002eb03
   2e680:	0002ea9d 	.word	0x0002ea9d

0002e684 <MQTTSerialize_zero>:
  * @param buflen the length in bytes of the supplied buffer, to avoid overruns
  * @param packettype the message type
  * @return serialized length, or error if 0
  */
int MQTTSerialize_zero(unsigned char* buf, int buflen, unsigned char packettype)
{
   2e684:	b580      	push	{r7, lr}
   2e686:	b088      	sub	sp, #32
   2e688:	af00      	add	r7, sp, #0
   2e68a:	60f8      	str	r0, [r7, #12]
   2e68c:	60b9      	str	r1, [r7, #8]
   2e68e:	1dfb      	adds	r3, r7, #7
   2e690:	701a      	strb	r2, [r3, #0]
	MQTTHeader header = {0};
   2e692:	2300      	movs	r3, #0
   2e694:	61bb      	str	r3, [r7, #24]
	int rc = -1;
   2e696:	2301      	movs	r3, #1
   2e698:	425b      	negs	r3, r3
   2e69a:	61fb      	str	r3, [r7, #28]
	unsigned char *ptr = buf;
   2e69c:	68fb      	ldr	r3, [r7, #12]
   2e69e:	617b      	str	r3, [r7, #20]

	FUNC_ENTRY;
	if (buflen < 2)
   2e6a0:	68bb      	ldr	r3, [r7, #8]
   2e6a2:	2b01      	cmp	r3, #1
   2e6a4:	dc03      	bgt.n	2e6ae <MQTTSerialize_zero+0x2a>
	{
		rc = MQTTPACKET_BUFFER_TOO_SHORT;
   2e6a6:	2302      	movs	r3, #2
   2e6a8:	425b      	negs	r3, r3
   2e6aa:	61fb      	str	r3, [r7, #28]
		goto exit;
   2e6ac:	e029      	b.n	2e702 <MQTTSerialize_zero+0x7e>
	}
	header.byte = 0;
   2e6ae:	2318      	movs	r3, #24
   2e6b0:	18fb      	adds	r3, r7, r3
   2e6b2:	2200      	movs	r2, #0
   2e6b4:	701a      	strb	r2, [r3, #0]
	header.bits.type = packettype;
   2e6b6:	1dfb      	adds	r3, r7, #7
   2e6b8:	781b      	ldrb	r3, [r3, #0]
   2e6ba:	220f      	movs	r2, #15
   2e6bc:	4013      	ands	r3, r2
   2e6be:	b2da      	uxtb	r2, r3
   2e6c0:	2318      	movs	r3, #24
   2e6c2:	18fb      	adds	r3, r7, r3
   2e6c4:	0110      	lsls	r0, r2, #4
   2e6c6:	781a      	ldrb	r2, [r3, #0]
   2e6c8:	210f      	movs	r1, #15
   2e6ca:	400a      	ands	r2, r1
   2e6cc:	1c11      	adds	r1, r2, #0
   2e6ce:	1c02      	adds	r2, r0, #0
   2e6d0:	430a      	orrs	r2, r1
   2e6d2:	701a      	strb	r2, [r3, #0]
	writeChar(&ptr, header.byte); /* write header */
   2e6d4:	2318      	movs	r3, #24
   2e6d6:	18fb      	adds	r3, r7, r3
   2e6d8:	781a      	ldrb	r2, [r3, #0]
   2e6da:	2314      	movs	r3, #20
   2e6dc:	18fb      	adds	r3, r7, r3
   2e6de:	0011      	movs	r1, r2
   2e6e0:	0018      	movs	r0, r3
   2e6e2:	4b0a      	ldr	r3, [pc, #40]	; (2e70c <MQTTSerialize_zero+0x88>)
   2e6e4:	4798      	blx	r3

	ptr += MQTTPacket_encode(ptr, 0); /* write remaining length */
   2e6e6:	697b      	ldr	r3, [r7, #20]
   2e6e8:	2100      	movs	r1, #0
   2e6ea:	0018      	movs	r0, r3
   2e6ec:	4b08      	ldr	r3, [pc, #32]	; (2e710 <MQTTSerialize_zero+0x8c>)
   2e6ee:	4798      	blx	r3
   2e6f0:	0002      	movs	r2, r0
   2e6f2:	697b      	ldr	r3, [r7, #20]
   2e6f4:	189b      	adds	r3, r3, r2
   2e6f6:	617b      	str	r3, [r7, #20]
	rc = ptr - buf;
   2e6f8:	697b      	ldr	r3, [r7, #20]
   2e6fa:	001a      	movs	r2, r3
   2e6fc:	68fb      	ldr	r3, [r7, #12]
   2e6fe:	1ad3      	subs	r3, r2, r3
   2e700:	61fb      	str	r3, [r7, #28]
exit:
	FUNC_EXIT_RC(rc);
	return rc;
   2e702:	69fb      	ldr	r3, [r7, #28]
}
   2e704:	0018      	movs	r0, r3
   2e706:	46bd      	mov	sp, r7
   2e708:	b008      	add	sp, #32
   2e70a:	bd80      	pop	{r7, pc}
   2e70c:	0002eb2f 	.word	0x0002eb2f
   2e710:	0002e915 	.word	0x0002e915

0002e714 <MQTTSerialize_disconnect>:
  * @param buf the buffer into which the packet will be serialized
  * @param buflen the length in bytes of the supplied buffer, to avoid overruns
  * @return serialized length, or error if 0
  */
int MQTTSerialize_disconnect(unsigned char* buf, int buflen)
{
   2e714:	b580      	push	{r7, lr}
   2e716:	b082      	sub	sp, #8
   2e718:	af00      	add	r7, sp, #0
   2e71a:	6078      	str	r0, [r7, #4]
   2e71c:	6039      	str	r1, [r7, #0]
	return MQTTSerialize_zero(buf, buflen, DISCONNECT);
   2e71e:	6839      	ldr	r1, [r7, #0]
   2e720:	687b      	ldr	r3, [r7, #4]
   2e722:	220e      	movs	r2, #14
   2e724:	0018      	movs	r0, r3
   2e726:	4b03      	ldr	r3, [pc, #12]	; (2e734 <MQTTSerialize_disconnect+0x20>)
   2e728:	4798      	blx	r3
   2e72a:	0003      	movs	r3, r0
}
   2e72c:	0018      	movs	r0, r3
   2e72e:	46bd      	mov	sp, r7
   2e730:	b002      	add	sp, #8
   2e732:	bd80      	pop	{r7, pc}
   2e734:	0002e685 	.word	0x0002e685

0002e738 <MQTTSerialize_pingreq>:
  * @param buf the buffer into which the packet will be serialized
  * @param buflen the length in bytes of the supplied buffer, to avoid overruns
  * @return serialized length, or error if 0
  */
int MQTTSerialize_pingreq(unsigned char* buf, int buflen)
{
   2e738:	b580      	push	{r7, lr}
   2e73a:	b082      	sub	sp, #8
   2e73c:	af00      	add	r7, sp, #0
   2e73e:	6078      	str	r0, [r7, #4]
   2e740:	6039      	str	r1, [r7, #0]
	return MQTTSerialize_zero(buf, buflen, PINGREQ);
   2e742:	6839      	ldr	r1, [r7, #0]
   2e744:	687b      	ldr	r3, [r7, #4]
   2e746:	220c      	movs	r2, #12
   2e748:	0018      	movs	r0, r3
   2e74a:	4b03      	ldr	r3, [pc, #12]	; (2e758 <MQTTSerialize_pingreq+0x20>)
   2e74c:	4798      	blx	r3
   2e74e:	0003      	movs	r3, r0
}
   2e750:	0018      	movs	r0, r3
   2e752:	46bd      	mov	sp, r7
   2e754:	b002      	add	sp, #8
   2e756:	bd80      	pop	{r7, pc}
   2e758:	0002e685 	.word	0x0002e685

0002e75c <MQTTDeserialize_publish>:
  * @param buflen the length in bytes of the data in the supplied buffer
  * @return error code.  1 is success
  */
int MQTTDeserialize_publish(unsigned char* dup, int* qos, unsigned char* retained, unsigned short* packetid, MQTTString* topicName,
		unsigned char** payload, int* payloadlen, unsigned char* buf, int buflen)
{
   2e75c:	b580      	push	{r7, lr}
   2e75e:	b08a      	sub	sp, #40	; 0x28
   2e760:	af00      	add	r7, sp, #0
   2e762:	60f8      	str	r0, [r7, #12]
   2e764:	60b9      	str	r1, [r7, #8]
   2e766:	607a      	str	r2, [r7, #4]
   2e768:	603b      	str	r3, [r7, #0]
	MQTTHeader header = {0};
   2e76a:	2300      	movs	r3, #0
   2e76c:	61fb      	str	r3, [r7, #28]
	unsigned char* curdata = buf;
   2e76e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   2e770:	61bb      	str	r3, [r7, #24]
	unsigned char* enddata = NULL;
   2e772:	2300      	movs	r3, #0
   2e774:	623b      	str	r3, [r7, #32]
	int rc = 0;
   2e776:	2300      	movs	r3, #0
   2e778:	627b      	str	r3, [r7, #36]	; 0x24
	int mylen = 0;
   2e77a:	2300      	movs	r3, #0
   2e77c:	617b      	str	r3, [r7, #20]

	FUNC_ENTRY;
	header.byte = readChar(&curdata);
   2e77e:	2318      	movs	r3, #24
   2e780:	18fb      	adds	r3, r7, r3
   2e782:	0018      	movs	r0, r3
   2e784:	4b32      	ldr	r3, [pc, #200]	; (2e850 <MQTTDeserialize_publish+0xf4>)
   2e786:	4798      	blx	r3
   2e788:	0003      	movs	r3, r0
   2e78a:	001a      	movs	r2, r3
   2e78c:	231c      	movs	r3, #28
   2e78e:	18fb      	adds	r3, r7, r3
   2e790:	701a      	strb	r2, [r3, #0]
	if (header.bits.type != PUBLISH)
   2e792:	231c      	movs	r3, #28
   2e794:	18fb      	adds	r3, r7, r3
   2e796:	781b      	ldrb	r3, [r3, #0]
   2e798:	220f      	movs	r2, #15
   2e79a:	4393      	bics	r3, r2
   2e79c:	b2db      	uxtb	r3, r3
   2e79e:	2b30      	cmp	r3, #48	; 0x30
   2e7a0:	d150      	bne.n	2e844 <MQTTDeserialize_publish+0xe8>
		goto exit;
	*dup = header.bits.dup;
   2e7a2:	231c      	movs	r3, #28
   2e7a4:	18fb      	adds	r3, r7, r3
   2e7a6:	781b      	ldrb	r3, [r3, #0]
   2e7a8:	071b      	lsls	r3, r3, #28
   2e7aa:	0fdb      	lsrs	r3, r3, #31
   2e7ac:	b2db      	uxtb	r3, r3
   2e7ae:	001a      	movs	r2, r3
   2e7b0:	68fb      	ldr	r3, [r7, #12]
   2e7b2:	701a      	strb	r2, [r3, #0]
	*qos = header.bits.qos;
   2e7b4:	231c      	movs	r3, #28
   2e7b6:	18fb      	adds	r3, r7, r3
   2e7b8:	781b      	ldrb	r3, [r3, #0]
   2e7ba:	075b      	lsls	r3, r3, #29
   2e7bc:	0f9b      	lsrs	r3, r3, #30
   2e7be:	b2db      	uxtb	r3, r3
   2e7c0:	001a      	movs	r2, r3
   2e7c2:	68bb      	ldr	r3, [r7, #8]
   2e7c4:	601a      	str	r2, [r3, #0]
	*retained = header.bits.retain;
   2e7c6:	231c      	movs	r3, #28
   2e7c8:	18fb      	adds	r3, r7, r3
   2e7ca:	781b      	ldrb	r3, [r3, #0]
   2e7cc:	07db      	lsls	r3, r3, #31
   2e7ce:	0fdb      	lsrs	r3, r3, #31
   2e7d0:	b2db      	uxtb	r3, r3
   2e7d2:	001a      	movs	r2, r3
   2e7d4:	687b      	ldr	r3, [r7, #4]
   2e7d6:	701a      	strb	r2, [r3, #0]

	curdata += (rc = MQTTPacket_decodeBuf(curdata, &mylen)); /* read remaining length */
   2e7d8:	69bb      	ldr	r3, [r7, #24]
   2e7da:	2214      	movs	r2, #20
   2e7dc:	18ba      	adds	r2, r7, r2
   2e7de:	0011      	movs	r1, r2
   2e7e0:	0018      	movs	r0, r3
   2e7e2:	4b1c      	ldr	r3, [pc, #112]	; (2e854 <MQTTDeserialize_publish+0xf8>)
   2e7e4:	4798      	blx	r3
   2e7e6:	0003      	movs	r3, r0
   2e7e8:	627b      	str	r3, [r7, #36]	; 0x24
   2e7ea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   2e7ec:	69bb      	ldr	r3, [r7, #24]
   2e7ee:	189b      	adds	r3, r3, r2
   2e7f0:	61bb      	str	r3, [r7, #24]
	enddata = curdata + mylen;
   2e7f2:	69bb      	ldr	r3, [r7, #24]
   2e7f4:	697a      	ldr	r2, [r7, #20]
   2e7f6:	189b      	adds	r3, r3, r2
   2e7f8:	623b      	str	r3, [r7, #32]

	if (!readMQTTLenString(topicName, &curdata, enddata) ||
   2e7fa:	6a3a      	ldr	r2, [r7, #32]
   2e7fc:	2318      	movs	r3, #24
   2e7fe:	18f9      	adds	r1, r7, r3
   2e800:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   2e802:	0018      	movs	r0, r3
   2e804:	4b14      	ldr	r3, [pc, #80]	; (2e858 <MQTTDeserialize_publish+0xfc>)
   2e806:	4798      	blx	r3
   2e808:	1e03      	subs	r3, r0, #0
   2e80a:	d01c      	beq.n	2e846 <MQTTDeserialize_publish+0xea>
		enddata - curdata < 0) /* do we have enough data to read the protocol version byte? */
   2e80c:	6a3b      	ldr	r3, [r7, #32]
   2e80e:	69ba      	ldr	r2, [r7, #24]
   2e810:	1a9b      	subs	r3, r3, r2
	if (!readMQTTLenString(topicName, &curdata, enddata) ||
   2e812:	d418      	bmi.n	2e846 <MQTTDeserialize_publish+0xea>
		goto exit;

	if (*qos > 0)
   2e814:	68bb      	ldr	r3, [r7, #8]
   2e816:	681b      	ldr	r3, [r3, #0]
   2e818:	2b00      	cmp	r3, #0
   2e81a:	dd08      	ble.n	2e82e <MQTTDeserialize_publish+0xd2>
		*packetid = readInt(&curdata);
   2e81c:	2318      	movs	r3, #24
   2e81e:	18fb      	adds	r3, r7, r3
   2e820:	0018      	movs	r0, r3
   2e822:	4b0e      	ldr	r3, [pc, #56]	; (2e85c <MQTTDeserialize_publish+0x100>)
   2e824:	4798      	blx	r3
   2e826:	0003      	movs	r3, r0
   2e828:	b29a      	uxth	r2, r3
   2e82a:	683b      	ldr	r3, [r7, #0]
   2e82c:	801a      	strh	r2, [r3, #0]

	*payloadlen = enddata - curdata;
   2e82e:	6a3b      	ldr	r3, [r7, #32]
   2e830:	69ba      	ldr	r2, [r7, #24]
   2e832:	1a9a      	subs	r2, r3, r2
   2e834:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   2e836:	601a      	str	r2, [r3, #0]
	*payload = curdata;
   2e838:	69ba      	ldr	r2, [r7, #24]
   2e83a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   2e83c:	601a      	str	r2, [r3, #0]
	rc = 1;
   2e83e:	2301      	movs	r3, #1
   2e840:	627b      	str	r3, [r7, #36]	; 0x24
   2e842:	e000      	b.n	2e846 <MQTTDeserialize_publish+0xea>
		goto exit;
   2e844:	46c0      	nop			; (mov r8, r8)
exit:
	FUNC_EXIT_RC(rc);
	return rc;
   2e846:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
   2e848:	0018      	movs	r0, r3
   2e84a:	46bd      	mov	sp, r7
   2e84c:	b00a      	add	sp, #40	; 0x28
   2e84e:	bd80      	pop	{r7, pc}
   2e850:	0002eb03 	.word	0x0002eb03
   2e854:	0002ea9d 	.word	0x0002ea9d
   2e858:	0002ec81 	.word	0x0002ec81
   2e85c:	0002ead1 	.word	0x0002ead1

0002e860 <MQTTDeserialize_ack>:
  * @param buf the raw buffer data, of the correct length determined by the remaining length field
  * @param buflen the length in bytes of the data in the supplied buffer
  * @return error code.  1 is success, 0 is failure
  */
int MQTTDeserialize_ack(unsigned char* packettype, unsigned char* dup, unsigned short* packetid, unsigned char* buf, int buflen)
{
   2e860:	b580      	push	{r7, lr}
   2e862:	b08a      	sub	sp, #40	; 0x28
   2e864:	af00      	add	r7, sp, #0
   2e866:	60f8      	str	r0, [r7, #12]
   2e868:	60b9      	str	r1, [r7, #8]
   2e86a:	607a      	str	r2, [r7, #4]
   2e86c:	603b      	str	r3, [r7, #0]
	MQTTHeader header = {0};
   2e86e:	2300      	movs	r3, #0
   2e870:	61fb      	str	r3, [r7, #28]
	unsigned char* curdata = buf;
   2e872:	683b      	ldr	r3, [r7, #0]
   2e874:	61bb      	str	r3, [r7, #24]
	unsigned char* enddata = NULL;
   2e876:	2300      	movs	r3, #0
   2e878:	623b      	str	r3, [r7, #32]
	int rc = 0;
   2e87a:	2300      	movs	r3, #0
   2e87c:	627b      	str	r3, [r7, #36]	; 0x24
	int mylen;

	FUNC_ENTRY;
	header.byte = readChar(&curdata);
   2e87e:	2318      	movs	r3, #24
   2e880:	18fb      	adds	r3, r7, r3
   2e882:	0018      	movs	r0, r3
   2e884:	4b20      	ldr	r3, [pc, #128]	; (2e908 <MQTTDeserialize_ack+0xa8>)
   2e886:	4798      	blx	r3
   2e888:	0003      	movs	r3, r0
   2e88a:	001a      	movs	r2, r3
   2e88c:	231c      	movs	r3, #28
   2e88e:	18fb      	adds	r3, r7, r3
   2e890:	701a      	strb	r2, [r3, #0]
	*dup = header.bits.dup;
   2e892:	231c      	movs	r3, #28
   2e894:	18fb      	adds	r3, r7, r3
   2e896:	781b      	ldrb	r3, [r3, #0]
   2e898:	071b      	lsls	r3, r3, #28
   2e89a:	0fdb      	lsrs	r3, r3, #31
   2e89c:	b2db      	uxtb	r3, r3
   2e89e:	001a      	movs	r2, r3
   2e8a0:	68bb      	ldr	r3, [r7, #8]
   2e8a2:	701a      	strb	r2, [r3, #0]
	*packettype = header.bits.type;
   2e8a4:	231c      	movs	r3, #28
   2e8a6:	18fb      	adds	r3, r7, r3
   2e8a8:	781b      	ldrb	r3, [r3, #0]
   2e8aa:	061b      	lsls	r3, r3, #24
   2e8ac:	0f1b      	lsrs	r3, r3, #28
   2e8ae:	b2db      	uxtb	r3, r3
   2e8b0:	001a      	movs	r2, r3
   2e8b2:	68fb      	ldr	r3, [r7, #12]
   2e8b4:	701a      	strb	r2, [r3, #0]

	curdata += (rc = MQTTPacket_decodeBuf(curdata, &mylen)); /* read remaining length */
   2e8b6:	69bb      	ldr	r3, [r7, #24]
   2e8b8:	2214      	movs	r2, #20
   2e8ba:	18ba      	adds	r2, r7, r2
   2e8bc:	0011      	movs	r1, r2
   2e8be:	0018      	movs	r0, r3
   2e8c0:	4b12      	ldr	r3, [pc, #72]	; (2e90c <MQTTDeserialize_ack+0xac>)
   2e8c2:	4798      	blx	r3
   2e8c4:	0003      	movs	r3, r0
   2e8c6:	627b      	str	r3, [r7, #36]	; 0x24
   2e8c8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   2e8ca:	69bb      	ldr	r3, [r7, #24]
   2e8cc:	189b      	adds	r3, r3, r2
   2e8ce:	61bb      	str	r3, [r7, #24]
	enddata = curdata + mylen;
   2e8d0:	69bb      	ldr	r3, [r7, #24]
   2e8d2:	697a      	ldr	r2, [r7, #20]
   2e8d4:	189b      	adds	r3, r3, r2
   2e8d6:	623b      	str	r3, [r7, #32]

	if (enddata - curdata < 2)
   2e8d8:	6a3b      	ldr	r3, [r7, #32]
   2e8da:	69ba      	ldr	r2, [r7, #24]
   2e8dc:	1a9b      	subs	r3, r3, r2
   2e8de:	2b01      	cmp	r3, #1
   2e8e0:	dd0b      	ble.n	2e8fa <MQTTDeserialize_ack+0x9a>
		goto exit;
	*packetid = readInt(&curdata);
   2e8e2:	2318      	movs	r3, #24
   2e8e4:	18fb      	adds	r3, r7, r3
   2e8e6:	0018      	movs	r0, r3
   2e8e8:	4b09      	ldr	r3, [pc, #36]	; (2e910 <MQTTDeserialize_ack+0xb0>)
   2e8ea:	4798      	blx	r3
   2e8ec:	0003      	movs	r3, r0
   2e8ee:	b29a      	uxth	r2, r3
   2e8f0:	687b      	ldr	r3, [r7, #4]
   2e8f2:	801a      	strh	r2, [r3, #0]

	rc = 1;
   2e8f4:	2301      	movs	r3, #1
   2e8f6:	627b      	str	r3, [r7, #36]	; 0x24
   2e8f8:	e000      	b.n	2e8fc <MQTTDeserialize_ack+0x9c>
		goto exit;
   2e8fa:	46c0      	nop			; (mov r8, r8)
exit:
	FUNC_EXIT_RC(rc);
	return rc;
   2e8fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
   2e8fe:	0018      	movs	r0, r3
   2e900:	46bd      	mov	sp, r7
   2e902:	b00a      	add	sp, #40	; 0x28
   2e904:	bd80      	pop	{r7, pc}
   2e906:	46c0      	nop			; (mov r8, r8)
   2e908:	0002eb03 	.word	0x0002eb03
   2e90c:	0002ea9d 	.word	0x0002ea9d
   2e910:	0002ead1 	.word	0x0002ead1

0002e914 <MQTTPacket_encode>:
 * @param buf the buffer into which the encoded data is written
 * @param length the length to be encoded
 * @return the number of bytes written to buffer
 */
int MQTTPacket_encode(unsigned char* buf, int length)
{
   2e914:	b580      	push	{r7, lr}
   2e916:	b084      	sub	sp, #16
   2e918:	af00      	add	r7, sp, #0
   2e91a:	6078      	str	r0, [r7, #4]
   2e91c:	6039      	str	r1, [r7, #0]
	int rc = 0;
   2e91e:	2300      	movs	r3, #0
   2e920:	60fb      	str	r3, [r7, #12]

	FUNC_ENTRY;
	do
	{
		char d = length % 128;
   2e922:	683b      	ldr	r3, [r7, #0]
   2e924:	4a17      	ldr	r2, [pc, #92]	; (2e984 <MQTTPacket_encode+0x70>)
   2e926:	4013      	ands	r3, r2
   2e928:	d504      	bpl.n	2e934 <MQTTPacket_encode+0x20>
   2e92a:	3b01      	subs	r3, #1
   2e92c:	2280      	movs	r2, #128	; 0x80
   2e92e:	4252      	negs	r2, r2
   2e930:	4313      	orrs	r3, r2
   2e932:	3301      	adds	r3, #1
   2e934:	001a      	movs	r2, r3
   2e936:	230b      	movs	r3, #11
   2e938:	18fb      	adds	r3, r7, r3
   2e93a:	701a      	strb	r2, [r3, #0]
		length /= 128;
   2e93c:	683b      	ldr	r3, [r7, #0]
   2e93e:	2b00      	cmp	r3, #0
   2e940:	da00      	bge.n	2e944 <MQTTPacket_encode+0x30>
   2e942:	337f      	adds	r3, #127	; 0x7f
   2e944:	11db      	asrs	r3, r3, #7
   2e946:	603b      	str	r3, [r7, #0]
		/* if there are more digits to encode, set the top bit of this digit */
		if (length > 0)
   2e948:	683b      	ldr	r3, [r7, #0]
   2e94a:	2b00      	cmp	r3, #0
   2e94c:	dd08      	ble.n	2e960 <MQTTPacket_encode+0x4c>
			d |= 0x80;
   2e94e:	230b      	movs	r3, #11
   2e950:	18fb      	adds	r3, r7, r3
   2e952:	220b      	movs	r2, #11
   2e954:	18ba      	adds	r2, r7, r2
   2e956:	7812      	ldrb	r2, [r2, #0]
   2e958:	2180      	movs	r1, #128	; 0x80
   2e95a:	4249      	negs	r1, r1
   2e95c:	430a      	orrs	r2, r1
   2e95e:	701a      	strb	r2, [r3, #0]
		buf[rc++] = d;
   2e960:	68fb      	ldr	r3, [r7, #12]
   2e962:	1c5a      	adds	r2, r3, #1
   2e964:	60fa      	str	r2, [r7, #12]
   2e966:	001a      	movs	r2, r3
   2e968:	687b      	ldr	r3, [r7, #4]
   2e96a:	189b      	adds	r3, r3, r2
   2e96c:	220b      	movs	r2, #11
   2e96e:	18ba      	adds	r2, r7, r2
   2e970:	7812      	ldrb	r2, [r2, #0]
   2e972:	701a      	strb	r2, [r3, #0]
	} while (length > 0);
   2e974:	683b      	ldr	r3, [r7, #0]
   2e976:	2b00      	cmp	r3, #0
   2e978:	dcd3      	bgt.n	2e922 <MQTTPacket_encode+0xe>
	FUNC_EXIT_RC(rc);
	return rc;
   2e97a:	68fb      	ldr	r3, [r7, #12]
}
   2e97c:	0018      	movs	r0, r3
   2e97e:	46bd      	mov	sp, r7
   2e980:	b004      	add	sp, #16
   2e982:	bd80      	pop	{r7, pc}
   2e984:	8000007f 	.word	0x8000007f

0002e988 <MQTTPacket_decode>:
 * @param getcharfn pointer to function to read the next character from the data source
 * @param value the decoded length returned
 * @return the number of bytes read from the socket
 */
int MQTTPacket_decode(int (*getcharfn)(unsigned char*, int), int* value)
{
   2e988:	b580      	push	{r7, lr}
   2e98a:	b086      	sub	sp, #24
   2e98c:	af00      	add	r7, sp, #0
   2e98e:	6078      	str	r0, [r7, #4]
   2e990:	6039      	str	r1, [r7, #0]
	unsigned char c;
	int multiplier = 1;
   2e992:	2301      	movs	r3, #1
   2e994:	617b      	str	r3, [r7, #20]
	int len = 0;
   2e996:	2300      	movs	r3, #0
   2e998:	613b      	str	r3, [r7, #16]
#define MAX_NO_OF_REMAINING_LENGTH_BYTES 4

	FUNC_ENTRY;
	*value = 0;
   2e99a:	683b      	ldr	r3, [r7, #0]
   2e99c:	2200      	movs	r2, #0
   2e99e:	601a      	str	r2, [r3, #0]
	do
	{
		int rc = MQTTPACKET_READ_ERROR;
   2e9a0:	2301      	movs	r3, #1
   2e9a2:	425b      	negs	r3, r3
   2e9a4:	60fb      	str	r3, [r7, #12]

		if (++len > MAX_NO_OF_REMAINING_LENGTH_BYTES)
   2e9a6:	693b      	ldr	r3, [r7, #16]
   2e9a8:	3301      	adds	r3, #1
   2e9aa:	613b      	str	r3, [r7, #16]
   2e9ac:	693b      	ldr	r3, [r7, #16]
   2e9ae:	2b04      	cmp	r3, #4
   2e9b0:	dd03      	ble.n	2e9ba <MQTTPacket_decode+0x32>
		{
			rc = MQTTPACKET_READ_ERROR;	/* bad data */
   2e9b2:	2301      	movs	r3, #1
   2e9b4:	425b      	negs	r3, r3
   2e9b6:	60fb      	str	r3, [r7, #12]
			goto exit;
   2e9b8:	e022      	b.n	2ea00 <MQTTPacket_decode+0x78>
		}
		rc = (*getcharfn)(&c, 1);
   2e9ba:	230b      	movs	r3, #11
   2e9bc:	18fa      	adds	r2, r7, r3
   2e9be:	687b      	ldr	r3, [r7, #4]
   2e9c0:	2101      	movs	r1, #1
   2e9c2:	0010      	movs	r0, r2
   2e9c4:	4798      	blx	r3
   2e9c6:	0003      	movs	r3, r0
   2e9c8:	60fb      	str	r3, [r7, #12]
		if (rc != 1)
   2e9ca:	68fb      	ldr	r3, [r7, #12]
   2e9cc:	2b01      	cmp	r3, #1
   2e9ce:	d116      	bne.n	2e9fe <MQTTPacket_decode+0x76>
			goto exit;
		*value += (c & 127) * multiplier;
   2e9d0:	683b      	ldr	r3, [r7, #0]
   2e9d2:	681a      	ldr	r2, [r3, #0]
   2e9d4:	230b      	movs	r3, #11
   2e9d6:	18fb      	adds	r3, r7, r3
   2e9d8:	781b      	ldrb	r3, [r3, #0]
   2e9da:	0019      	movs	r1, r3
   2e9dc:	237f      	movs	r3, #127	; 0x7f
   2e9de:	400b      	ands	r3, r1
   2e9e0:	6979      	ldr	r1, [r7, #20]
   2e9e2:	434b      	muls	r3, r1
   2e9e4:	18d2      	adds	r2, r2, r3
   2e9e6:	683b      	ldr	r3, [r7, #0]
   2e9e8:	601a      	str	r2, [r3, #0]
		multiplier *= 128;
   2e9ea:	697b      	ldr	r3, [r7, #20]
   2e9ec:	01db      	lsls	r3, r3, #7
   2e9ee:	617b      	str	r3, [r7, #20]
	} while ((c & 128) != 0);
   2e9f0:	230b      	movs	r3, #11
   2e9f2:	18fb      	adds	r3, r7, r3
   2e9f4:	781b      	ldrb	r3, [r3, #0]
   2e9f6:	b25b      	sxtb	r3, r3
   2e9f8:	2b00      	cmp	r3, #0
   2e9fa:	dbd1      	blt.n	2e9a0 <MQTTPacket_decode+0x18>
   2e9fc:	e000      	b.n	2ea00 <MQTTPacket_decode+0x78>
			goto exit;
   2e9fe:	46c0      	nop			; (mov r8, r8)
exit:
	FUNC_EXIT_RC(len);
	return len;
   2ea00:	693b      	ldr	r3, [r7, #16]
}
   2ea02:	0018      	movs	r0, r3
   2ea04:	46bd      	mov	sp, r7
   2ea06:	b006      	add	sp, #24
   2ea08:	bd80      	pop	{r7, pc}
	...

0002ea0c <MQTTPacket_len>:


int MQTTPacket_len(int rem_len)
{
   2ea0c:	b580      	push	{r7, lr}
   2ea0e:	b082      	sub	sp, #8
   2ea10:	af00      	add	r7, sp, #0
   2ea12:	6078      	str	r0, [r7, #4]
	rem_len += 1; /* header byte */
   2ea14:	687b      	ldr	r3, [r7, #4]
   2ea16:	3301      	adds	r3, #1
   2ea18:	607b      	str	r3, [r7, #4]

	/* now remaining_length field */
	if (rem_len < 128)
   2ea1a:	687b      	ldr	r3, [r7, #4]
   2ea1c:	2b7f      	cmp	r3, #127	; 0x7f
   2ea1e:	dc03      	bgt.n	2ea28 <MQTTPacket_len+0x1c>
		rem_len += 1;
   2ea20:	687b      	ldr	r3, [r7, #4]
   2ea22:	3301      	adds	r3, #1
   2ea24:	607b      	str	r3, [r7, #4]
   2ea26:	e012      	b.n	2ea4e <MQTTPacket_len+0x42>
	else if (rem_len < 16384)
   2ea28:	687b      	ldr	r3, [r7, #4]
   2ea2a:	4a0b      	ldr	r2, [pc, #44]	; (2ea58 <MQTTPacket_len+0x4c>)
   2ea2c:	4293      	cmp	r3, r2
   2ea2e:	dc03      	bgt.n	2ea38 <MQTTPacket_len+0x2c>
		rem_len += 2;
   2ea30:	687b      	ldr	r3, [r7, #4]
   2ea32:	3302      	adds	r3, #2
   2ea34:	607b      	str	r3, [r7, #4]
   2ea36:	e00a      	b.n	2ea4e <MQTTPacket_len+0x42>
	else if (rem_len < 2097151)
   2ea38:	687b      	ldr	r3, [r7, #4]
   2ea3a:	4a08      	ldr	r2, [pc, #32]	; (2ea5c <MQTTPacket_len+0x50>)
   2ea3c:	4293      	cmp	r3, r2
   2ea3e:	dc03      	bgt.n	2ea48 <MQTTPacket_len+0x3c>
		rem_len += 3;
   2ea40:	687b      	ldr	r3, [r7, #4]
   2ea42:	3303      	adds	r3, #3
   2ea44:	607b      	str	r3, [r7, #4]
   2ea46:	e002      	b.n	2ea4e <MQTTPacket_len+0x42>
	else
		rem_len += 4;
   2ea48:	687b      	ldr	r3, [r7, #4]
   2ea4a:	3304      	adds	r3, #4
   2ea4c:	607b      	str	r3, [r7, #4]
	return rem_len;
   2ea4e:	687b      	ldr	r3, [r7, #4]
}
   2ea50:	0018      	movs	r0, r3
   2ea52:	46bd      	mov	sp, r7
   2ea54:	b002      	add	sp, #8
   2ea56:	bd80      	pop	{r7, pc}
   2ea58:	00003fff 	.word	0x00003fff
   2ea5c:	001ffffe 	.word	0x001ffffe

0002ea60 <bufchar>:


static unsigned char* bufptr;

int bufchar(unsigned char* c, int count)
{
   2ea60:	b580      	push	{r7, lr}
   2ea62:	b084      	sub	sp, #16
   2ea64:	af00      	add	r7, sp, #0
   2ea66:	6078      	str	r0, [r7, #4]
   2ea68:	6039      	str	r1, [r7, #0]
	int i;

	for (i = 0; i < count; ++i)
   2ea6a:	2300      	movs	r3, #0
   2ea6c:	60fb      	str	r3, [r7, #12]
   2ea6e:	e00a      	b.n	2ea86 <bufchar+0x26>
		*c = *bufptr++;
   2ea70:	4b09      	ldr	r3, [pc, #36]	; (2ea98 <bufchar+0x38>)
   2ea72:	681b      	ldr	r3, [r3, #0]
   2ea74:	1c59      	adds	r1, r3, #1
   2ea76:	4a08      	ldr	r2, [pc, #32]	; (2ea98 <bufchar+0x38>)
   2ea78:	6011      	str	r1, [r2, #0]
   2ea7a:	781a      	ldrb	r2, [r3, #0]
   2ea7c:	687b      	ldr	r3, [r7, #4]
   2ea7e:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < count; ++i)
   2ea80:	68fb      	ldr	r3, [r7, #12]
   2ea82:	3301      	adds	r3, #1
   2ea84:	60fb      	str	r3, [r7, #12]
   2ea86:	68fa      	ldr	r2, [r7, #12]
   2ea88:	683b      	ldr	r3, [r7, #0]
   2ea8a:	429a      	cmp	r2, r3
   2ea8c:	dbf0      	blt.n	2ea70 <bufchar+0x10>
	return count;
   2ea8e:	683b      	ldr	r3, [r7, #0]
}
   2ea90:	0018      	movs	r0, r3
   2ea92:	46bd      	mov	sp, r7
   2ea94:	b004      	add	sp, #16
   2ea96:	bd80      	pop	{r7, pc}
   2ea98:	2000418c 	.word	0x2000418c

0002ea9c <MQTTPacket_decodeBuf>:


int MQTTPacket_decodeBuf(unsigned char* buf, int* value)
{
   2ea9c:	b580      	push	{r7, lr}
   2ea9e:	b082      	sub	sp, #8
   2eaa0:	af00      	add	r7, sp, #0
   2eaa2:	6078      	str	r0, [r7, #4]
   2eaa4:	6039      	str	r1, [r7, #0]
	bufptr = buf;
   2eaa6:	4b07      	ldr	r3, [pc, #28]	; (2eac4 <MQTTPacket_decodeBuf+0x28>)
   2eaa8:	687a      	ldr	r2, [r7, #4]
   2eaaa:	601a      	str	r2, [r3, #0]
	return MQTTPacket_decode(bufchar, value);
   2eaac:	683a      	ldr	r2, [r7, #0]
   2eaae:	4b06      	ldr	r3, [pc, #24]	; (2eac8 <MQTTPacket_decodeBuf+0x2c>)
   2eab0:	0011      	movs	r1, r2
   2eab2:	0018      	movs	r0, r3
   2eab4:	4b05      	ldr	r3, [pc, #20]	; (2eacc <MQTTPacket_decodeBuf+0x30>)
   2eab6:	4798      	blx	r3
   2eab8:	0003      	movs	r3, r0
}
   2eaba:	0018      	movs	r0, r3
   2eabc:	46bd      	mov	sp, r7
   2eabe:	b002      	add	sp, #8
   2eac0:	bd80      	pop	{r7, pc}
   2eac2:	46c0      	nop			; (mov r8, r8)
   2eac4:	2000418c 	.word	0x2000418c
   2eac8:	0002ea61 	.word	0x0002ea61
   2eacc:	0002e989 	.word	0x0002e989

0002ead0 <readInt>:
 * Calculates an integer from two bytes read from the input buffer
 * @param pptr pointer to the input buffer - incremented by the number of bytes used & returned
 * @return the integer value calculated
 */
int readInt(unsigned char** pptr)
{
   2ead0:	b580      	push	{r7, lr}
   2ead2:	b084      	sub	sp, #16
   2ead4:	af00      	add	r7, sp, #0
   2ead6:	6078      	str	r0, [r7, #4]
	unsigned char* ptr = *pptr;
   2ead8:	687b      	ldr	r3, [r7, #4]
   2eada:	681b      	ldr	r3, [r3, #0]
   2eadc:	60fb      	str	r3, [r7, #12]
	int len = 256*(*ptr) + (*(ptr+1));
   2eade:	68fb      	ldr	r3, [r7, #12]
   2eae0:	781b      	ldrb	r3, [r3, #0]
   2eae2:	021b      	lsls	r3, r3, #8
   2eae4:	68fa      	ldr	r2, [r7, #12]
   2eae6:	3201      	adds	r2, #1
   2eae8:	7812      	ldrb	r2, [r2, #0]
   2eaea:	189b      	adds	r3, r3, r2
   2eaec:	60bb      	str	r3, [r7, #8]
	*pptr += 2;
   2eaee:	687b      	ldr	r3, [r7, #4]
   2eaf0:	681b      	ldr	r3, [r3, #0]
   2eaf2:	1c9a      	adds	r2, r3, #2
   2eaf4:	687b      	ldr	r3, [r7, #4]
   2eaf6:	601a      	str	r2, [r3, #0]
	return len;
   2eaf8:	68bb      	ldr	r3, [r7, #8]
}
   2eafa:	0018      	movs	r0, r3
   2eafc:	46bd      	mov	sp, r7
   2eafe:	b004      	add	sp, #16
   2eb00:	bd80      	pop	{r7, pc}

0002eb02 <readChar>:
 * Reads one character from the input buffer.
 * @param pptr pointer to the input buffer - incremented by the number of bytes used & returned
 * @return the character read
 */
char readChar(unsigned char** pptr)
{
   2eb02:	b580      	push	{r7, lr}
   2eb04:	b084      	sub	sp, #16
   2eb06:	af00      	add	r7, sp, #0
   2eb08:	6078      	str	r0, [r7, #4]
	char c = **pptr;
   2eb0a:	687b      	ldr	r3, [r7, #4]
   2eb0c:	681a      	ldr	r2, [r3, #0]
   2eb0e:	230f      	movs	r3, #15
   2eb10:	18fb      	adds	r3, r7, r3
   2eb12:	7812      	ldrb	r2, [r2, #0]
   2eb14:	701a      	strb	r2, [r3, #0]
	(*pptr)++;
   2eb16:	687b      	ldr	r3, [r7, #4]
   2eb18:	681b      	ldr	r3, [r3, #0]
   2eb1a:	1c5a      	adds	r2, r3, #1
   2eb1c:	687b      	ldr	r3, [r7, #4]
   2eb1e:	601a      	str	r2, [r3, #0]
	return c;
   2eb20:	230f      	movs	r3, #15
   2eb22:	18fb      	adds	r3, r7, r3
   2eb24:	781b      	ldrb	r3, [r3, #0]
}
   2eb26:	0018      	movs	r0, r3
   2eb28:	46bd      	mov	sp, r7
   2eb2a:	b004      	add	sp, #16
   2eb2c:	bd80      	pop	{r7, pc}

0002eb2e <writeChar>:
 * Writes one character to an output buffer.
 * @param pptr pointer to the output buffer - incremented by the number of bytes used & returned
 * @param c the character to write
 */
void writeChar(unsigned char** pptr, char c)
{
   2eb2e:	b580      	push	{r7, lr}
   2eb30:	b082      	sub	sp, #8
   2eb32:	af00      	add	r7, sp, #0
   2eb34:	6078      	str	r0, [r7, #4]
   2eb36:	000a      	movs	r2, r1
   2eb38:	1cfb      	adds	r3, r7, #3
   2eb3a:	701a      	strb	r2, [r3, #0]
	**pptr = c;
   2eb3c:	687b      	ldr	r3, [r7, #4]
   2eb3e:	681b      	ldr	r3, [r3, #0]
   2eb40:	1cfa      	adds	r2, r7, #3
   2eb42:	7812      	ldrb	r2, [r2, #0]
   2eb44:	701a      	strb	r2, [r3, #0]
	(*pptr)++;
   2eb46:	687b      	ldr	r3, [r7, #4]
   2eb48:	681b      	ldr	r3, [r3, #0]
   2eb4a:	1c5a      	adds	r2, r3, #1
   2eb4c:	687b      	ldr	r3, [r7, #4]
   2eb4e:	601a      	str	r2, [r3, #0]
}
   2eb50:	46c0      	nop			; (mov r8, r8)
   2eb52:	46bd      	mov	sp, r7
   2eb54:	b002      	add	sp, #8
   2eb56:	bd80      	pop	{r7, pc}

0002eb58 <writeInt>:
 * Writes an integer as 2 bytes to an output buffer.
 * @param pptr pointer to the output buffer - incremented by the number of bytes used & returned
 * @param anInt the integer to write
 */
void writeInt(unsigned char** pptr, int anInt)
{
   2eb58:	b580      	push	{r7, lr}
   2eb5a:	b082      	sub	sp, #8
   2eb5c:	af00      	add	r7, sp, #0
   2eb5e:	6078      	str	r0, [r7, #4]
   2eb60:	6039      	str	r1, [r7, #0]
	**pptr = (unsigned char)(anInt / 256);
   2eb62:	687b      	ldr	r3, [r7, #4]
   2eb64:	681a      	ldr	r2, [r3, #0]
   2eb66:	683b      	ldr	r3, [r7, #0]
   2eb68:	2b00      	cmp	r3, #0
   2eb6a:	da00      	bge.n	2eb6e <writeInt+0x16>
   2eb6c:	33ff      	adds	r3, #255	; 0xff
   2eb6e:	121b      	asrs	r3, r3, #8
   2eb70:	b2db      	uxtb	r3, r3
   2eb72:	7013      	strb	r3, [r2, #0]
	(*pptr)++;
   2eb74:	687b      	ldr	r3, [r7, #4]
   2eb76:	681b      	ldr	r3, [r3, #0]
   2eb78:	1c5a      	adds	r2, r3, #1
   2eb7a:	687b      	ldr	r3, [r7, #4]
   2eb7c:	601a      	str	r2, [r3, #0]
	**pptr = (unsigned char)(anInt % 256);
   2eb7e:	687b      	ldr	r3, [r7, #4]
   2eb80:	681a      	ldr	r2, [r3, #0]
   2eb82:	683b      	ldr	r3, [r7, #0]
   2eb84:	4908      	ldr	r1, [pc, #32]	; (2eba8 <writeInt+0x50>)
   2eb86:	400b      	ands	r3, r1
   2eb88:	d503      	bpl.n	2eb92 <writeInt+0x3a>
   2eb8a:	3b01      	subs	r3, #1
   2eb8c:	4907      	ldr	r1, [pc, #28]	; (2ebac <writeInt+0x54>)
   2eb8e:	430b      	orrs	r3, r1
   2eb90:	3301      	adds	r3, #1
   2eb92:	b2db      	uxtb	r3, r3
   2eb94:	7013      	strb	r3, [r2, #0]
	(*pptr)++;
   2eb96:	687b      	ldr	r3, [r7, #4]
   2eb98:	681b      	ldr	r3, [r3, #0]
   2eb9a:	1c5a      	adds	r2, r3, #1
   2eb9c:	687b      	ldr	r3, [r7, #4]
   2eb9e:	601a      	str	r2, [r3, #0]
}
   2eba0:	46c0      	nop			; (mov r8, r8)
   2eba2:	46bd      	mov	sp, r7
   2eba4:	b002      	add	sp, #8
   2eba6:	bd80      	pop	{r7, pc}
   2eba8:	800000ff 	.word	0x800000ff
   2ebac:	ffffff00 	.word	0xffffff00

0002ebb0 <writeCString>:
 * Writes a "UTF" string to an output buffer.  Converts C string to length-delimited.
 * @param pptr pointer to the output buffer - incremented by the number of bytes used & returned
 * @param string the C string to write
 */
void writeCString(unsigned char** pptr, const char* string)
{
   2ebb0:	b580      	push	{r7, lr}
   2ebb2:	b084      	sub	sp, #16
   2ebb4:	af00      	add	r7, sp, #0
   2ebb6:	6078      	str	r0, [r7, #4]
   2ebb8:	6039      	str	r1, [r7, #0]
	int len = strlen(string);
   2ebba:	683b      	ldr	r3, [r7, #0]
   2ebbc:	0018      	movs	r0, r3
   2ebbe:	4b0d      	ldr	r3, [pc, #52]	; (2ebf4 <writeCString+0x44>)
   2ebc0:	4798      	blx	r3
   2ebc2:	0003      	movs	r3, r0
   2ebc4:	60fb      	str	r3, [r7, #12]
	writeInt(pptr, len);
   2ebc6:	68fa      	ldr	r2, [r7, #12]
   2ebc8:	687b      	ldr	r3, [r7, #4]
   2ebca:	0011      	movs	r1, r2
   2ebcc:	0018      	movs	r0, r3
   2ebce:	4b0a      	ldr	r3, [pc, #40]	; (2ebf8 <writeCString+0x48>)
   2ebd0:	4798      	blx	r3
	memcpy(*pptr, string, len);
   2ebd2:	687b      	ldr	r3, [r7, #4]
   2ebd4:	681b      	ldr	r3, [r3, #0]
   2ebd6:	68fa      	ldr	r2, [r7, #12]
   2ebd8:	6839      	ldr	r1, [r7, #0]
   2ebda:	0018      	movs	r0, r3
   2ebdc:	4b07      	ldr	r3, [pc, #28]	; (2ebfc <writeCString+0x4c>)
   2ebde:	4798      	blx	r3
	*pptr += len;
   2ebe0:	687b      	ldr	r3, [r7, #4]
   2ebe2:	681a      	ldr	r2, [r3, #0]
   2ebe4:	68fb      	ldr	r3, [r7, #12]
   2ebe6:	18d2      	adds	r2, r2, r3
   2ebe8:	687b      	ldr	r3, [r7, #4]
   2ebea:	601a      	str	r2, [r3, #0]
}
   2ebec:	46c0      	nop			; (mov r8, r8)
   2ebee:	46bd      	mov	sp, r7
   2ebf0:	b004      	add	sp, #16
   2ebf2:	bd80      	pop	{r7, pc}
   2ebf4:	000334cf 	.word	0x000334cf
   2ebf8:	0002eb59 	.word	0x0002eb59
   2ebfc:	000330e1 	.word	0x000330e1

0002ec00 <writeMQTTString>:
	return len;
}


void writeMQTTString(unsigned char** pptr, MQTTString mqttstring)
{
   2ec00:	b580      	push	{r7, lr}
   2ec02:	b084      	sub	sp, #16
   2ec04:	af00      	add	r7, sp, #0
   2ec06:	60f8      	str	r0, [r7, #12]
   2ec08:	0038      	movs	r0, r7
   2ec0a:	6001      	str	r1, [r0, #0]
   2ec0c:	6042      	str	r2, [r0, #4]
   2ec0e:	6083      	str	r3, [r0, #8]
	if (mqttstring.lenstring.len > 0)
   2ec10:	003b      	movs	r3, r7
   2ec12:	685b      	ldr	r3, [r3, #4]
   2ec14:	2b00      	cmp	r3, #0
   2ec16:	dd17      	ble.n	2ec48 <writeMQTTString+0x48>
	{
		writeInt(pptr, mqttstring.lenstring.len);
   2ec18:	003b      	movs	r3, r7
   2ec1a:	685a      	ldr	r2, [r3, #4]
   2ec1c:	68fb      	ldr	r3, [r7, #12]
   2ec1e:	0011      	movs	r1, r2
   2ec20:	0018      	movs	r0, r3
   2ec22:	4b14      	ldr	r3, [pc, #80]	; (2ec74 <writeMQTTString+0x74>)
   2ec24:	4798      	blx	r3
		memcpy(*pptr, mqttstring.lenstring.data, mqttstring.lenstring.len);
   2ec26:	68fb      	ldr	r3, [r7, #12]
   2ec28:	6818      	ldr	r0, [r3, #0]
   2ec2a:	003b      	movs	r3, r7
   2ec2c:	6899      	ldr	r1, [r3, #8]
   2ec2e:	003b      	movs	r3, r7
   2ec30:	685b      	ldr	r3, [r3, #4]
   2ec32:	001a      	movs	r2, r3
   2ec34:	4b10      	ldr	r3, [pc, #64]	; (2ec78 <writeMQTTString+0x78>)
   2ec36:	4798      	blx	r3
		*pptr += mqttstring.lenstring.len;
   2ec38:	68fb      	ldr	r3, [r7, #12]
   2ec3a:	681a      	ldr	r2, [r3, #0]
   2ec3c:	003b      	movs	r3, r7
   2ec3e:	685b      	ldr	r3, [r3, #4]
   2ec40:	18d2      	adds	r2, r2, r3
   2ec42:	68fb      	ldr	r3, [r7, #12]
   2ec44:	601a      	str	r2, [r3, #0]
	}
	else if (mqttstring.cstring)
		writeCString(pptr, mqttstring.cstring);
	else
		writeInt(pptr, 0);
}
   2ec46:	e010      	b.n	2ec6a <writeMQTTString+0x6a>
	else if (mqttstring.cstring)
   2ec48:	003b      	movs	r3, r7
   2ec4a:	681b      	ldr	r3, [r3, #0]
   2ec4c:	2b00      	cmp	r3, #0
   2ec4e:	d007      	beq.n	2ec60 <writeMQTTString+0x60>
		writeCString(pptr, mqttstring.cstring);
   2ec50:	003b      	movs	r3, r7
   2ec52:	681a      	ldr	r2, [r3, #0]
   2ec54:	68fb      	ldr	r3, [r7, #12]
   2ec56:	0011      	movs	r1, r2
   2ec58:	0018      	movs	r0, r3
   2ec5a:	4b08      	ldr	r3, [pc, #32]	; (2ec7c <writeMQTTString+0x7c>)
   2ec5c:	4798      	blx	r3
}
   2ec5e:	e004      	b.n	2ec6a <writeMQTTString+0x6a>
		writeInt(pptr, 0);
   2ec60:	68fb      	ldr	r3, [r7, #12]
   2ec62:	2100      	movs	r1, #0
   2ec64:	0018      	movs	r0, r3
   2ec66:	4b03      	ldr	r3, [pc, #12]	; (2ec74 <writeMQTTString+0x74>)
   2ec68:	4798      	blx	r3
}
   2ec6a:	46c0      	nop			; (mov r8, r8)
   2ec6c:	46bd      	mov	sp, r7
   2ec6e:	b004      	add	sp, #16
   2ec70:	bd80      	pop	{r7, pc}
   2ec72:	46c0      	nop			; (mov r8, r8)
   2ec74:	0002eb59 	.word	0x0002eb59
   2ec78:	000330e1 	.word	0x000330e1
   2ec7c:	0002ebb1 	.word	0x0002ebb1

0002ec80 <readMQTTLenString>:
 * @param pptr pointer to the output buffer - incremented by the number of bytes used & returned
 * @param enddata pointer to the end of the data: do not read beyond
 * @return 1 if successful, 0 if not
 */
int readMQTTLenString(MQTTString* mqttstring, unsigned char** pptr, unsigned char* enddata)
{
   2ec80:	b580      	push	{r7, lr}
   2ec82:	b086      	sub	sp, #24
   2ec84:	af00      	add	r7, sp, #0
   2ec86:	60f8      	str	r0, [r7, #12]
   2ec88:	60b9      	str	r1, [r7, #8]
   2ec8a:	607a      	str	r2, [r7, #4]
	int rc = 0;
   2ec8c:	2300      	movs	r3, #0
   2ec8e:	617b      	str	r3, [r7, #20]

	FUNC_ENTRY;
	/* the first two bytes are the length of the string */
	if (enddata - (*pptr) > 1) /* enough length to read the integer? */
   2ec90:	687a      	ldr	r2, [r7, #4]
   2ec92:	68bb      	ldr	r3, [r7, #8]
   2ec94:	681b      	ldr	r3, [r3, #0]
   2ec96:	1ad3      	subs	r3, r2, r3
   2ec98:	2b01      	cmp	r3, #1
   2ec9a:	dd1b      	ble.n	2ecd4 <readMQTTLenString+0x54>
	{
		mqttstring->lenstring.len = readInt(pptr); /* increments pptr to point past length */
   2ec9c:	68bb      	ldr	r3, [r7, #8]
   2ec9e:	0018      	movs	r0, r3
   2eca0:	4b10      	ldr	r3, [pc, #64]	; (2ece4 <readMQTTLenString+0x64>)
   2eca2:	4798      	blx	r3
   2eca4:	0002      	movs	r2, r0
   2eca6:	68fb      	ldr	r3, [r7, #12]
   2eca8:	605a      	str	r2, [r3, #4]
		if (&(*pptr)[mqttstring->lenstring.len] <= enddata)
   2ecaa:	68bb      	ldr	r3, [r7, #8]
   2ecac:	681a      	ldr	r2, [r3, #0]
   2ecae:	68fb      	ldr	r3, [r7, #12]
   2ecb0:	685b      	ldr	r3, [r3, #4]
   2ecb2:	18d2      	adds	r2, r2, r3
   2ecb4:	687b      	ldr	r3, [r7, #4]
   2ecb6:	429a      	cmp	r2, r3
   2ecb8:	d80c      	bhi.n	2ecd4 <readMQTTLenString+0x54>
		{
			mqttstring->lenstring.data = (char*)*pptr;
   2ecba:	68bb      	ldr	r3, [r7, #8]
   2ecbc:	681a      	ldr	r2, [r3, #0]
   2ecbe:	68fb      	ldr	r3, [r7, #12]
   2ecc0:	609a      	str	r2, [r3, #8]
			*pptr += mqttstring->lenstring.len;
   2ecc2:	68bb      	ldr	r3, [r7, #8]
   2ecc4:	681a      	ldr	r2, [r3, #0]
   2ecc6:	68fb      	ldr	r3, [r7, #12]
   2ecc8:	685b      	ldr	r3, [r3, #4]
   2ecca:	18d2      	adds	r2, r2, r3
   2eccc:	68bb      	ldr	r3, [r7, #8]
   2ecce:	601a      	str	r2, [r3, #0]
			rc = 1;
   2ecd0:	2301      	movs	r3, #1
   2ecd2:	617b      	str	r3, [r7, #20]
		}
	}
	mqttstring->cstring = NULL;
   2ecd4:	68fb      	ldr	r3, [r7, #12]
   2ecd6:	2200      	movs	r2, #0
   2ecd8:	601a      	str	r2, [r3, #0]
	FUNC_EXIT_RC(rc);
	return rc;
   2ecda:	697b      	ldr	r3, [r7, #20]
}
   2ecdc:	0018      	movs	r0, r3
   2ecde:	46bd      	mov	sp, r7
   2ece0:	b006      	add	sp, #24
   2ece2:	bd80      	pop	{r7, pc}
   2ece4:	0002ead1 	.word	0x0002ead1

0002ece8 <MQTTstrlen>:
 * Return the length of the MQTTstring - C string if there is one, otherwise the length delimited string
 * @param mqttstring the string to return the length of
 * @return the length of the string
 */
int MQTTstrlen(MQTTString mqttstring)
{
   2ece8:	b580      	push	{r7, lr}
   2ecea:	b086      	sub	sp, #24
   2ecec:	af00      	add	r7, sp, #0
   2ecee:	1d3b      	adds	r3, r7, #4
   2ecf0:	6018      	str	r0, [r3, #0]
   2ecf2:	6059      	str	r1, [r3, #4]
   2ecf4:	609a      	str	r2, [r3, #8]
	int rc = 0;
   2ecf6:	2300      	movs	r3, #0
   2ecf8:	617b      	str	r3, [r7, #20]

	if (mqttstring.cstring)
   2ecfa:	1d3b      	adds	r3, r7, #4
   2ecfc:	681b      	ldr	r3, [r3, #0]
   2ecfe:	2b00      	cmp	r3, #0
   2ed00:	d007      	beq.n	2ed12 <MQTTstrlen+0x2a>
		rc = strlen(mqttstring.cstring);
   2ed02:	1d3b      	adds	r3, r7, #4
   2ed04:	681b      	ldr	r3, [r3, #0]
   2ed06:	0018      	movs	r0, r3
   2ed08:	4b06      	ldr	r3, [pc, #24]	; (2ed24 <MQTTstrlen+0x3c>)
   2ed0a:	4798      	blx	r3
   2ed0c:	0003      	movs	r3, r0
   2ed0e:	617b      	str	r3, [r7, #20]
   2ed10:	e002      	b.n	2ed18 <MQTTstrlen+0x30>
	else
		rc = mqttstring.lenstring.len;
   2ed12:	1d3b      	adds	r3, r7, #4
   2ed14:	685b      	ldr	r3, [r3, #4]
   2ed16:	617b      	str	r3, [r7, #20]
	return rc;
   2ed18:	697b      	ldr	r3, [r7, #20]
}
   2ed1a:	0018      	movs	r0, r3
   2ed1c:	46bd      	mov	sp, r7
   2ed1e:	b006      	add	sp, #24
   2ed20:	bd80      	pop	{r7, pc}
   2ed22:	46c0      	nop			; (mov r8, r8)
   2ed24:	000334cf 	.word	0x000334cf

0002ed28 <MQTTPacket_equals>:
 * @param a the MQTTString to compare
 * @param bptr the C string to compare
 * @return boolean - equal or not
 */
int MQTTPacket_equals(MQTTString* a, char* bptr)
{
   2ed28:	b580      	push	{r7, lr}
   2ed2a:	b086      	sub	sp, #24
   2ed2c:	af00      	add	r7, sp, #0
   2ed2e:	6078      	str	r0, [r7, #4]
   2ed30:	6039      	str	r1, [r7, #0]
	int alen = 0,
   2ed32:	2300      	movs	r3, #0
   2ed34:	617b      	str	r3, [r7, #20]
		blen = 0;
   2ed36:	2300      	movs	r3, #0
   2ed38:	60fb      	str	r3, [r7, #12]
	char *aptr;
	
	if (a->cstring)
   2ed3a:	687b      	ldr	r3, [r7, #4]
   2ed3c:	681b      	ldr	r3, [r3, #0]
   2ed3e:	2b00      	cmp	r3, #0
   2ed40:	d00a      	beq.n	2ed58 <MQTTPacket_equals+0x30>
	{
		aptr = a->cstring;
   2ed42:	687b      	ldr	r3, [r7, #4]
   2ed44:	681b      	ldr	r3, [r3, #0]
   2ed46:	613b      	str	r3, [r7, #16]
		alen = strlen(a->cstring);
   2ed48:	687b      	ldr	r3, [r7, #4]
   2ed4a:	681b      	ldr	r3, [r3, #0]
   2ed4c:	0018      	movs	r0, r3
   2ed4e:	4b12      	ldr	r3, [pc, #72]	; (2ed98 <MQTTPacket_equals+0x70>)
   2ed50:	4798      	blx	r3
   2ed52:	0003      	movs	r3, r0
   2ed54:	617b      	str	r3, [r7, #20]
   2ed56:	e005      	b.n	2ed64 <MQTTPacket_equals+0x3c>
	}
	else
	{
		aptr = a->lenstring.data;
   2ed58:	687b      	ldr	r3, [r7, #4]
   2ed5a:	689b      	ldr	r3, [r3, #8]
   2ed5c:	613b      	str	r3, [r7, #16]
		alen = a->lenstring.len;
   2ed5e:	687b      	ldr	r3, [r7, #4]
   2ed60:	685b      	ldr	r3, [r3, #4]
   2ed62:	617b      	str	r3, [r7, #20]
	}
	blen = strlen(bptr);
   2ed64:	683b      	ldr	r3, [r7, #0]
   2ed66:	0018      	movs	r0, r3
   2ed68:	4b0b      	ldr	r3, [pc, #44]	; (2ed98 <MQTTPacket_equals+0x70>)
   2ed6a:	4798      	blx	r3
   2ed6c:	0003      	movs	r3, r0
   2ed6e:	60fb      	str	r3, [r7, #12]
	
	return (alen == blen) && (strncmp(aptr, bptr, alen) == 0);
   2ed70:	697a      	ldr	r2, [r7, #20]
   2ed72:	68fb      	ldr	r3, [r7, #12]
   2ed74:	429a      	cmp	r2, r3
   2ed76:	d109      	bne.n	2ed8c <MQTTPacket_equals+0x64>
   2ed78:	697a      	ldr	r2, [r7, #20]
   2ed7a:	6839      	ldr	r1, [r7, #0]
   2ed7c:	693b      	ldr	r3, [r7, #16]
   2ed7e:	0018      	movs	r0, r3
   2ed80:	4b06      	ldr	r3, [pc, #24]	; (2ed9c <MQTTPacket_equals+0x74>)
   2ed82:	4798      	blx	r3
   2ed84:	1e03      	subs	r3, r0, #0
   2ed86:	d101      	bne.n	2ed8c <MQTTPacket_equals+0x64>
   2ed88:	2301      	movs	r3, #1
   2ed8a:	e000      	b.n	2ed8e <MQTTPacket_equals+0x66>
   2ed8c:	2300      	movs	r3, #0
}
   2ed8e:	0018      	movs	r0, r3
   2ed90:	46bd      	mov	sp, r7
   2ed92:	b006      	add	sp, #24
   2ed94:	bd80      	pop	{r7, pc}
   2ed96:	46c0      	nop			; (mov r8, r8)
   2ed98:	000334cf 	.word	0x000334cf
   2ed9c:	000334dd 	.word	0x000334dd

0002eda0 <MQTTSerialize_publishLength>:
  * @param topicName the topic name to be used in the publish  
  * @param payloadlen the length of the payload to be sent
  * @return the length of buffer needed to contain the serialized version of the packet
  */
int MQTTSerialize_publishLength(int qos, MQTTString topicName, int payloadlen)
{
   2eda0:	b580      	push	{r7, lr}
   2eda2:	b086      	sub	sp, #24
   2eda4:	af00      	add	r7, sp, #0
   2eda6:	60f8      	str	r0, [r7, #12]
   2eda8:	0038      	movs	r0, r7
   2edaa:	6001      	str	r1, [r0, #0]
   2edac:	6042      	str	r2, [r0, #4]
   2edae:	6083      	str	r3, [r0, #8]
	int len = 0;
   2edb0:	2300      	movs	r3, #0
   2edb2:	617b      	str	r3, [r7, #20]

	len += 2 + MQTTstrlen(topicName) + payloadlen;
   2edb4:	003b      	movs	r3, r7
   2edb6:	6818      	ldr	r0, [r3, #0]
   2edb8:	6859      	ldr	r1, [r3, #4]
   2edba:	689a      	ldr	r2, [r3, #8]
   2edbc:	4b09      	ldr	r3, [pc, #36]	; (2ede4 <MQTTSerialize_publishLength+0x44>)
   2edbe:	4798      	blx	r3
   2edc0:	0003      	movs	r3, r0
   2edc2:	1c9a      	adds	r2, r3, #2
   2edc4:	6a3b      	ldr	r3, [r7, #32]
   2edc6:	18d3      	adds	r3, r2, r3
   2edc8:	697a      	ldr	r2, [r7, #20]
   2edca:	18d3      	adds	r3, r2, r3
   2edcc:	617b      	str	r3, [r7, #20]
	if (qos > 0)
   2edce:	68fb      	ldr	r3, [r7, #12]
   2edd0:	2b00      	cmp	r3, #0
   2edd2:	dd02      	ble.n	2edda <MQTTSerialize_publishLength+0x3a>
		len += 2; /* packetid */
   2edd4:	697b      	ldr	r3, [r7, #20]
   2edd6:	3302      	adds	r3, #2
   2edd8:	617b      	str	r3, [r7, #20]
	return len;
   2edda:	697b      	ldr	r3, [r7, #20]
}
   2eddc:	0018      	movs	r0, r3
   2edde:	46bd      	mov	sp, r7
   2ede0:	b006      	add	sp, #24
   2ede2:	bd80      	pop	{r7, pc}
   2ede4:	0002ece9 	.word	0x0002ece9

0002ede8 <MQTTSerialize_publish>:
  * @param payloadlen integer - the length of the MQTT payload
  * @return the length of the serialized data.  <= 0 indicates error
  */
int MQTTSerialize_publish(unsigned char* buf, int buflen, unsigned char dup, int qos, unsigned char retained, unsigned short packetid,
		MQTTString topicName, unsigned char* payload, int payloadlen)
{
   2ede8:	b590      	push	{r4, r7, lr}
   2edea:	b08b      	sub	sp, #44	; 0x2c
   2edec:	af02      	add	r7, sp, #8
   2edee:	60f8      	str	r0, [r7, #12]
   2edf0:	60b9      	str	r1, [r7, #8]
   2edf2:	603b      	str	r3, [r7, #0]
   2edf4:	1dfb      	adds	r3, r7, #7
   2edf6:	701a      	strb	r2, [r3, #0]
	unsigned char *ptr = buf;
   2edf8:	68fb      	ldr	r3, [r7, #12]
   2edfa:	617b      	str	r3, [r7, #20]
	MQTTHeader header = {0};
   2edfc:	2300      	movs	r3, #0
   2edfe:	613b      	str	r3, [r7, #16]
	int rem_len = 0;
   2ee00:	2300      	movs	r3, #0
   2ee02:	61bb      	str	r3, [r7, #24]
	int rc = 0;
   2ee04:	2300      	movs	r3, #0
   2ee06:	61fb      	str	r3, [r7, #28]

	FUNC_ENTRY;
	if (MQTTPacket_len(rem_len = MQTTSerialize_publishLength(qos, topicName, payloadlen)) > buflen)
   2ee08:	2308      	movs	r3, #8
   2ee0a:	2230      	movs	r2, #48	; 0x30
   2ee0c:	4694      	mov	ip, r2
   2ee0e:	44bc      	add	ip, r7
   2ee10:	4463      	add	r3, ip
   2ee12:	6838      	ldr	r0, [r7, #0]
   2ee14:	6cba      	ldr	r2, [r7, #72]	; 0x48
   2ee16:	9200      	str	r2, [sp, #0]
   2ee18:	6819      	ldr	r1, [r3, #0]
   2ee1a:	685a      	ldr	r2, [r3, #4]
   2ee1c:	689b      	ldr	r3, [r3, #8]
   2ee1e:	4c46      	ldr	r4, [pc, #280]	; (2ef38 <MQTTSerialize_publish+0x150>)
   2ee20:	47a0      	blx	r4
   2ee22:	0003      	movs	r3, r0
   2ee24:	61bb      	str	r3, [r7, #24]
   2ee26:	69bb      	ldr	r3, [r7, #24]
   2ee28:	0018      	movs	r0, r3
   2ee2a:	4b44      	ldr	r3, [pc, #272]	; (2ef3c <MQTTSerialize_publish+0x154>)
   2ee2c:	4798      	blx	r3
   2ee2e:	0002      	movs	r2, r0
   2ee30:	68bb      	ldr	r3, [r7, #8]
   2ee32:	429a      	cmp	r2, r3
   2ee34:	dd03      	ble.n	2ee3e <MQTTSerialize_publish+0x56>
	{
		rc = MQTTPACKET_BUFFER_TOO_SHORT;
   2ee36:	2302      	movs	r3, #2
   2ee38:	425b      	negs	r3, r3
   2ee3a:	61fb      	str	r3, [r7, #28]
		goto exit;
   2ee3c:	e077      	b.n	2ef2e <MQTTSerialize_publish+0x146>
	}

	header.bits.type = PUBLISH;
   2ee3e:	2310      	movs	r3, #16
   2ee40:	18fb      	adds	r3, r7, r3
   2ee42:	781a      	ldrb	r2, [r3, #0]
   2ee44:	210f      	movs	r1, #15
   2ee46:	400a      	ands	r2, r1
   2ee48:	1c11      	adds	r1, r2, #0
   2ee4a:	2230      	movs	r2, #48	; 0x30
   2ee4c:	430a      	orrs	r2, r1
   2ee4e:	701a      	strb	r2, [r3, #0]
	header.bits.dup = dup;
   2ee50:	1dfb      	adds	r3, r7, #7
   2ee52:	781b      	ldrb	r3, [r3, #0]
   2ee54:	2201      	movs	r2, #1
   2ee56:	4013      	ands	r3, r2
   2ee58:	b2da      	uxtb	r2, r3
   2ee5a:	2310      	movs	r3, #16
   2ee5c:	18fb      	adds	r3, r7, r3
   2ee5e:	2101      	movs	r1, #1
   2ee60:	400a      	ands	r2, r1
   2ee62:	00d0      	lsls	r0, r2, #3
   2ee64:	781a      	ldrb	r2, [r3, #0]
   2ee66:	2108      	movs	r1, #8
   2ee68:	438a      	bics	r2, r1
   2ee6a:	1c11      	adds	r1, r2, #0
   2ee6c:	1c02      	adds	r2, r0, #0
   2ee6e:	430a      	orrs	r2, r1
   2ee70:	701a      	strb	r2, [r3, #0]
	header.bits.qos = qos;
   2ee72:	683b      	ldr	r3, [r7, #0]
   2ee74:	b2db      	uxtb	r3, r3
   2ee76:	1c1a      	adds	r2, r3, #0
   2ee78:	2303      	movs	r3, #3
   2ee7a:	4013      	ands	r3, r2
   2ee7c:	b2da      	uxtb	r2, r3
   2ee7e:	2310      	movs	r3, #16
   2ee80:	18fb      	adds	r3, r7, r3
   2ee82:	2103      	movs	r1, #3
   2ee84:	400a      	ands	r2, r1
   2ee86:	1890      	adds	r0, r2, r2
   2ee88:	781a      	ldrb	r2, [r3, #0]
   2ee8a:	2106      	movs	r1, #6
   2ee8c:	438a      	bics	r2, r1
   2ee8e:	1c11      	adds	r1, r2, #0
   2ee90:	1c02      	adds	r2, r0, #0
   2ee92:	430a      	orrs	r2, r1
   2ee94:	701a      	strb	r2, [r3, #0]
	header.bits.retain = retained;
   2ee96:	2330      	movs	r3, #48	; 0x30
   2ee98:	18fb      	adds	r3, r7, r3
   2ee9a:	781b      	ldrb	r3, [r3, #0]
   2ee9c:	2201      	movs	r2, #1
   2ee9e:	4013      	ands	r3, r2
   2eea0:	b2da      	uxtb	r2, r3
   2eea2:	2310      	movs	r3, #16
   2eea4:	18fb      	adds	r3, r7, r3
   2eea6:	2101      	movs	r1, #1
   2eea8:	400a      	ands	r2, r1
   2eeaa:	0010      	movs	r0, r2
   2eeac:	781a      	ldrb	r2, [r3, #0]
   2eeae:	2101      	movs	r1, #1
   2eeb0:	438a      	bics	r2, r1
   2eeb2:	1c11      	adds	r1, r2, #0
   2eeb4:	1c02      	adds	r2, r0, #0
   2eeb6:	430a      	orrs	r2, r1
   2eeb8:	701a      	strb	r2, [r3, #0]
	writeChar(&ptr, header.byte); /* write header */
   2eeba:	2310      	movs	r3, #16
   2eebc:	18fb      	adds	r3, r7, r3
   2eebe:	781a      	ldrb	r2, [r3, #0]
   2eec0:	2314      	movs	r3, #20
   2eec2:	18fb      	adds	r3, r7, r3
   2eec4:	0011      	movs	r1, r2
   2eec6:	0018      	movs	r0, r3
   2eec8:	4b1d      	ldr	r3, [pc, #116]	; (2ef40 <MQTTSerialize_publish+0x158>)
   2eeca:	4798      	blx	r3

	ptr += MQTTPacket_encode(ptr, rem_len); /* write remaining length */;
   2eecc:	697b      	ldr	r3, [r7, #20]
   2eece:	69ba      	ldr	r2, [r7, #24]
   2eed0:	0011      	movs	r1, r2
   2eed2:	0018      	movs	r0, r3
   2eed4:	4b1b      	ldr	r3, [pc, #108]	; (2ef44 <MQTTSerialize_publish+0x15c>)
   2eed6:	4798      	blx	r3
   2eed8:	0002      	movs	r2, r0
   2eeda:	697b      	ldr	r3, [r7, #20]
   2eedc:	189b      	adds	r3, r3, r2
   2eede:	617b      	str	r3, [r7, #20]

	writeMQTTString(&ptr, topicName);
   2eee0:	2308      	movs	r3, #8
   2eee2:	2230      	movs	r2, #48	; 0x30
   2eee4:	4694      	mov	ip, r2
   2eee6:	44bc      	add	ip, r7
   2eee8:	4463      	add	r3, ip
   2eeea:	2214      	movs	r2, #20
   2eeec:	18b8      	adds	r0, r7, r2
   2eeee:	6819      	ldr	r1, [r3, #0]
   2eef0:	685a      	ldr	r2, [r3, #4]
   2eef2:	689b      	ldr	r3, [r3, #8]
   2eef4:	4c14      	ldr	r4, [pc, #80]	; (2ef48 <MQTTSerialize_publish+0x160>)
   2eef6:	47a0      	blx	r4

	if (qos > 0)
   2eef8:	683b      	ldr	r3, [r7, #0]
   2eefa:	2b00      	cmp	r3, #0
   2eefc:	dd08      	ble.n	2ef10 <MQTTSerialize_publish+0x128>
		writeInt(&ptr, packetid);
   2eefe:	2334      	movs	r3, #52	; 0x34
   2ef00:	18fb      	adds	r3, r7, r3
   2ef02:	881a      	ldrh	r2, [r3, #0]
   2ef04:	2314      	movs	r3, #20
   2ef06:	18fb      	adds	r3, r7, r3
   2ef08:	0011      	movs	r1, r2
   2ef0a:	0018      	movs	r0, r3
   2ef0c:	4b0f      	ldr	r3, [pc, #60]	; (2ef4c <MQTTSerialize_publish+0x164>)
   2ef0e:	4798      	blx	r3

	memcpy(ptr, payload, payloadlen);
   2ef10:	697b      	ldr	r3, [r7, #20]
   2ef12:	6cba      	ldr	r2, [r7, #72]	; 0x48
   2ef14:	6c79      	ldr	r1, [r7, #68]	; 0x44
   2ef16:	0018      	movs	r0, r3
   2ef18:	4b0d      	ldr	r3, [pc, #52]	; (2ef50 <MQTTSerialize_publish+0x168>)
   2ef1a:	4798      	blx	r3
	ptr += payloadlen;
   2ef1c:	697a      	ldr	r2, [r7, #20]
   2ef1e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   2ef20:	18d3      	adds	r3, r2, r3
   2ef22:	617b      	str	r3, [r7, #20]

	rc = ptr - buf;
   2ef24:	697b      	ldr	r3, [r7, #20]
   2ef26:	001a      	movs	r2, r3
   2ef28:	68fb      	ldr	r3, [r7, #12]
   2ef2a:	1ad3      	subs	r3, r2, r3
   2ef2c:	61fb      	str	r3, [r7, #28]

exit:
	FUNC_EXIT_RC(rc);
	return rc;
   2ef2e:	69fb      	ldr	r3, [r7, #28]
}
   2ef30:	0018      	movs	r0, r3
   2ef32:	46bd      	mov	sp, r7
   2ef34:	b009      	add	sp, #36	; 0x24
   2ef36:	bd90      	pop	{r4, r7, pc}
   2ef38:	0002eda1 	.word	0x0002eda1
   2ef3c:	0002ea0d 	.word	0x0002ea0d
   2ef40:	0002eb2f 	.word	0x0002eb2f
   2ef44:	0002e915 	.word	0x0002e915
   2ef48:	0002ec01 	.word	0x0002ec01
   2ef4c:	0002eb59 	.word	0x0002eb59
   2ef50:	000330e1 	.word	0x000330e1

0002ef54 <MQTTSerialize_ack>:
  * @param dup the MQTT dup flag
  * @param packetid the MQTT packet identifier
  * @return serialized length, or error if 0
  */
int MQTTSerialize_ack(unsigned char* buf, int buflen, unsigned char packettype, unsigned char dup, unsigned short packetid)
{
   2ef54:	b580      	push	{r7, lr}
   2ef56:	b088      	sub	sp, #32
   2ef58:	af00      	add	r7, sp, #0
   2ef5a:	60f8      	str	r0, [r7, #12]
   2ef5c:	60b9      	str	r1, [r7, #8]
   2ef5e:	0019      	movs	r1, r3
   2ef60:	1dfb      	adds	r3, r7, #7
   2ef62:	701a      	strb	r2, [r3, #0]
   2ef64:	1dbb      	adds	r3, r7, #6
   2ef66:	1c0a      	adds	r2, r1, #0
   2ef68:	701a      	strb	r2, [r3, #0]
	MQTTHeader header = {0};
   2ef6a:	2300      	movs	r3, #0
   2ef6c:	61bb      	str	r3, [r7, #24]
	int rc = 0;
   2ef6e:	2300      	movs	r3, #0
   2ef70:	61fb      	str	r3, [r7, #28]
	unsigned char *ptr = buf;
   2ef72:	68fb      	ldr	r3, [r7, #12]
   2ef74:	617b      	str	r3, [r7, #20]

	FUNC_ENTRY;
	if (buflen < 4)
   2ef76:	68bb      	ldr	r3, [r7, #8]
   2ef78:	2b03      	cmp	r3, #3
   2ef7a:	dc03      	bgt.n	2ef84 <MQTTSerialize_ack+0x30>
	{
		rc = MQTTPACKET_BUFFER_TOO_SHORT;
   2ef7c:	2302      	movs	r3, #2
   2ef7e:	425b      	negs	r3, r3
   2ef80:	61fb      	str	r3, [r7, #28]
		goto exit;
   2ef82:	e055      	b.n	2f030 <MQTTSerialize_ack+0xdc>
	}
	header.bits.type = packettype;
   2ef84:	1dfb      	adds	r3, r7, #7
   2ef86:	781b      	ldrb	r3, [r3, #0]
   2ef88:	220f      	movs	r2, #15
   2ef8a:	4013      	ands	r3, r2
   2ef8c:	b2da      	uxtb	r2, r3
   2ef8e:	2318      	movs	r3, #24
   2ef90:	18fb      	adds	r3, r7, r3
   2ef92:	0110      	lsls	r0, r2, #4
   2ef94:	781a      	ldrb	r2, [r3, #0]
   2ef96:	210f      	movs	r1, #15
   2ef98:	400a      	ands	r2, r1
   2ef9a:	1c11      	adds	r1, r2, #0
   2ef9c:	1c02      	adds	r2, r0, #0
   2ef9e:	430a      	orrs	r2, r1
   2efa0:	701a      	strb	r2, [r3, #0]
	header.bits.dup = dup;
   2efa2:	1dbb      	adds	r3, r7, #6
   2efa4:	781b      	ldrb	r3, [r3, #0]
   2efa6:	2201      	movs	r2, #1
   2efa8:	4013      	ands	r3, r2
   2efaa:	b2da      	uxtb	r2, r3
   2efac:	2318      	movs	r3, #24
   2efae:	18fb      	adds	r3, r7, r3
   2efb0:	2101      	movs	r1, #1
   2efb2:	400a      	ands	r2, r1
   2efb4:	00d0      	lsls	r0, r2, #3
   2efb6:	781a      	ldrb	r2, [r3, #0]
   2efb8:	2108      	movs	r1, #8
   2efba:	438a      	bics	r2, r1
   2efbc:	1c11      	adds	r1, r2, #0
   2efbe:	1c02      	adds	r2, r0, #0
   2efc0:	430a      	orrs	r2, r1
   2efc2:	701a      	strb	r2, [r3, #0]
	header.bits.qos = (packettype == PUBREL) ? 1 : 0;
   2efc4:	1dfb      	adds	r3, r7, #7
   2efc6:	781b      	ldrb	r3, [r3, #0]
   2efc8:	3b06      	subs	r3, #6
   2efca:	425a      	negs	r2, r3
   2efcc:	4153      	adcs	r3, r2
   2efce:	b2db      	uxtb	r3, r3
   2efd0:	1c1a      	adds	r2, r3, #0
   2efd2:	2303      	movs	r3, #3
   2efd4:	4013      	ands	r3, r2
   2efd6:	b2da      	uxtb	r2, r3
   2efd8:	2318      	movs	r3, #24
   2efda:	18fb      	adds	r3, r7, r3
   2efdc:	2103      	movs	r1, #3
   2efde:	400a      	ands	r2, r1
   2efe0:	1890      	adds	r0, r2, r2
   2efe2:	781a      	ldrb	r2, [r3, #0]
   2efe4:	2106      	movs	r1, #6
   2efe6:	438a      	bics	r2, r1
   2efe8:	1c11      	adds	r1, r2, #0
   2efea:	1c02      	adds	r2, r0, #0
   2efec:	430a      	orrs	r2, r1
   2efee:	701a      	strb	r2, [r3, #0]
	writeChar(&ptr, header.byte); /* write header */
   2eff0:	2318      	movs	r3, #24
   2eff2:	18fb      	adds	r3, r7, r3
   2eff4:	781a      	ldrb	r2, [r3, #0]
   2eff6:	2314      	movs	r3, #20
   2eff8:	18fb      	adds	r3, r7, r3
   2effa:	0011      	movs	r1, r2
   2effc:	0018      	movs	r0, r3
   2effe:	4b0f      	ldr	r3, [pc, #60]	; (2f03c <MQTTSerialize_ack+0xe8>)
   2f000:	4798      	blx	r3

	ptr += MQTTPacket_encode(ptr, 2); /* write remaining length */
   2f002:	697b      	ldr	r3, [r7, #20]
   2f004:	2102      	movs	r1, #2
   2f006:	0018      	movs	r0, r3
   2f008:	4b0d      	ldr	r3, [pc, #52]	; (2f040 <MQTTSerialize_ack+0xec>)
   2f00a:	4798      	blx	r3
   2f00c:	0002      	movs	r2, r0
   2f00e:	697b      	ldr	r3, [r7, #20]
   2f010:	189b      	adds	r3, r3, r2
   2f012:	617b      	str	r3, [r7, #20]
	writeInt(&ptr, packetid);
   2f014:	2328      	movs	r3, #40	; 0x28
   2f016:	18fb      	adds	r3, r7, r3
   2f018:	881a      	ldrh	r2, [r3, #0]
   2f01a:	2314      	movs	r3, #20
   2f01c:	18fb      	adds	r3, r7, r3
   2f01e:	0011      	movs	r1, r2
   2f020:	0018      	movs	r0, r3
   2f022:	4b08      	ldr	r3, [pc, #32]	; (2f044 <MQTTSerialize_ack+0xf0>)
   2f024:	4798      	blx	r3
	rc = ptr - buf;
   2f026:	697b      	ldr	r3, [r7, #20]
   2f028:	001a      	movs	r2, r3
   2f02a:	68fb      	ldr	r3, [r7, #12]
   2f02c:	1ad3      	subs	r3, r2, r3
   2f02e:	61fb      	str	r3, [r7, #28]
exit:
	FUNC_EXIT_RC(rc);
	return rc;
   2f030:	69fb      	ldr	r3, [r7, #28]
}
   2f032:	0018      	movs	r0, r3
   2f034:	46bd      	mov	sp, r7
   2f036:	b008      	add	sp, #32
   2f038:	bd80      	pop	{r7, pc}
   2f03a:	46c0      	nop			; (mov r8, r8)
   2f03c:	0002eb2f 	.word	0x0002eb2f
   2f040:	0002e915 	.word	0x0002e915
   2f044:	0002eb59 	.word	0x0002eb59

0002f048 <MQTTSerialize_subscribeLength>:
  * @param count the number of topic filter strings in topicFilters
  * @param topicFilters the array of topic filter strings to be used in the publish
  * @return the length of buffer needed to contain the serialized version of the packet
  */
int MQTTSerialize_subscribeLength(int count, MQTTString topicFilters[])
{
   2f048:	b580      	push	{r7, lr}
   2f04a:	b084      	sub	sp, #16
   2f04c:	af00      	add	r7, sp, #0
   2f04e:	6078      	str	r0, [r7, #4]
   2f050:	6039      	str	r1, [r7, #0]
	int i;
	int len = 2; /* packetid */
   2f052:	2302      	movs	r3, #2
   2f054:	60bb      	str	r3, [r7, #8]

	for (i = 0; i < count; ++i)
   2f056:	2300      	movs	r3, #0
   2f058:	60fb      	str	r3, [r7, #12]
   2f05a:	e014      	b.n	2f086 <MQTTSerialize_subscribeLength+0x3e>
		len += 2 + MQTTstrlen(topicFilters[i]) + 1; /* length + topic + req_qos */
   2f05c:	68fa      	ldr	r2, [r7, #12]
   2f05e:	0013      	movs	r3, r2
   2f060:	005b      	lsls	r3, r3, #1
   2f062:	189b      	adds	r3, r3, r2
   2f064:	009b      	lsls	r3, r3, #2
   2f066:	001a      	movs	r2, r3
   2f068:	683b      	ldr	r3, [r7, #0]
   2f06a:	189b      	adds	r3, r3, r2
   2f06c:	6818      	ldr	r0, [r3, #0]
   2f06e:	6859      	ldr	r1, [r3, #4]
   2f070:	689a      	ldr	r2, [r3, #8]
   2f072:	4b09      	ldr	r3, [pc, #36]	; (2f098 <MQTTSerialize_subscribeLength+0x50>)
   2f074:	4798      	blx	r3
   2f076:	0003      	movs	r3, r0
   2f078:	3303      	adds	r3, #3
   2f07a:	68ba      	ldr	r2, [r7, #8]
   2f07c:	18d3      	adds	r3, r2, r3
   2f07e:	60bb      	str	r3, [r7, #8]
	for (i = 0; i < count; ++i)
   2f080:	68fb      	ldr	r3, [r7, #12]
   2f082:	3301      	adds	r3, #1
   2f084:	60fb      	str	r3, [r7, #12]
   2f086:	68fa      	ldr	r2, [r7, #12]
   2f088:	687b      	ldr	r3, [r7, #4]
   2f08a:	429a      	cmp	r2, r3
   2f08c:	dbe6      	blt.n	2f05c <MQTTSerialize_subscribeLength+0x14>
	return len;
   2f08e:	68bb      	ldr	r3, [r7, #8]
}
   2f090:	0018      	movs	r0, r3
   2f092:	46bd      	mov	sp, r7
   2f094:	b004      	add	sp, #16
   2f096:	bd80      	pop	{r7, pc}
   2f098:	0002ece9 	.word	0x0002ece9

0002f09c <MQTTSerialize_subscribe>:
  * @param requestedQoSs - array of requested QoS
  * @return the length of the serialized data.  <= 0 indicates error
  */
int MQTTSerialize_subscribe(unsigned char* buf, int buflen, unsigned char dup, unsigned short packetid, int count,
		MQTTString topicFilters[], int requestedQoSs[])
{
   2f09c:	b590      	push	{r4, r7, lr}
   2f09e:	b08b      	sub	sp, #44	; 0x2c
   2f0a0:	af00      	add	r7, sp, #0
   2f0a2:	60f8      	str	r0, [r7, #12]
   2f0a4:	60b9      	str	r1, [r7, #8]
   2f0a6:	0019      	movs	r1, r3
   2f0a8:	1dfb      	adds	r3, r7, #7
   2f0aa:	701a      	strb	r2, [r3, #0]
   2f0ac:	1d3b      	adds	r3, r7, #4
   2f0ae:	1c0a      	adds	r2, r1, #0
   2f0b0:	801a      	strh	r2, [r3, #0]
	unsigned char *ptr = buf;
   2f0b2:	68fb      	ldr	r3, [r7, #12]
   2f0b4:	61bb      	str	r3, [r7, #24]
	MQTTHeader header = {0};
   2f0b6:	2300      	movs	r3, #0
   2f0b8:	617b      	str	r3, [r7, #20]
	int rem_len = 0;
   2f0ba:	2300      	movs	r3, #0
   2f0bc:	61fb      	str	r3, [r7, #28]
	int rc = 0;
   2f0be:	2300      	movs	r3, #0
   2f0c0:	627b      	str	r3, [r7, #36]	; 0x24
	int i = 0;
   2f0c2:	2300      	movs	r3, #0
   2f0c4:	623b      	str	r3, [r7, #32]

	FUNC_ENTRY;
	if (MQTTPacket_len(rem_len = MQTTSerialize_subscribeLength(count, topicFilters)) > buflen)
   2f0c6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
   2f0c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   2f0ca:	0011      	movs	r1, r2
   2f0cc:	0018      	movs	r0, r3
   2f0ce:	4b41      	ldr	r3, [pc, #260]	; (2f1d4 <MQTTSerialize_subscribe+0x138>)
   2f0d0:	4798      	blx	r3
   2f0d2:	0003      	movs	r3, r0
   2f0d4:	61fb      	str	r3, [r7, #28]
   2f0d6:	69fb      	ldr	r3, [r7, #28]
   2f0d8:	0018      	movs	r0, r3
   2f0da:	4b3f      	ldr	r3, [pc, #252]	; (2f1d8 <MQTTSerialize_subscribe+0x13c>)
   2f0dc:	4798      	blx	r3
   2f0de:	0002      	movs	r2, r0
   2f0e0:	68bb      	ldr	r3, [r7, #8]
   2f0e2:	429a      	cmp	r2, r3
   2f0e4:	dd03      	ble.n	2f0ee <MQTTSerialize_subscribe+0x52>
	{
		rc = MQTTPACKET_BUFFER_TOO_SHORT;
   2f0e6:	2302      	movs	r3, #2
   2f0e8:	425b      	negs	r3, r3
   2f0ea:	627b      	str	r3, [r7, #36]	; 0x24
		goto exit;
   2f0ec:	e06c      	b.n	2f1c8 <MQTTSerialize_subscribe+0x12c>
	}

	header.byte = 0;
   2f0ee:	2314      	movs	r3, #20
   2f0f0:	18fb      	adds	r3, r7, r3
   2f0f2:	2200      	movs	r2, #0
   2f0f4:	701a      	strb	r2, [r3, #0]
	header.bits.type = SUBSCRIBE;
   2f0f6:	2314      	movs	r3, #20
   2f0f8:	18fb      	adds	r3, r7, r3
   2f0fa:	781a      	ldrb	r2, [r3, #0]
   2f0fc:	210f      	movs	r1, #15
   2f0fe:	400a      	ands	r2, r1
   2f100:	1c11      	adds	r1, r2, #0
   2f102:	2280      	movs	r2, #128	; 0x80
   2f104:	4252      	negs	r2, r2
   2f106:	430a      	orrs	r2, r1
   2f108:	701a      	strb	r2, [r3, #0]
	header.bits.dup = dup;
   2f10a:	1dfb      	adds	r3, r7, #7
   2f10c:	781b      	ldrb	r3, [r3, #0]
   2f10e:	2201      	movs	r2, #1
   2f110:	4013      	ands	r3, r2
   2f112:	b2da      	uxtb	r2, r3
   2f114:	2314      	movs	r3, #20
   2f116:	18fb      	adds	r3, r7, r3
   2f118:	2101      	movs	r1, #1
   2f11a:	400a      	ands	r2, r1
   2f11c:	00d0      	lsls	r0, r2, #3
   2f11e:	781a      	ldrb	r2, [r3, #0]
   2f120:	2108      	movs	r1, #8
   2f122:	438a      	bics	r2, r1
   2f124:	1c11      	adds	r1, r2, #0
   2f126:	1c02      	adds	r2, r0, #0
   2f128:	430a      	orrs	r2, r1
   2f12a:	701a      	strb	r2, [r3, #0]
	header.bits.qos = 1;
   2f12c:	2314      	movs	r3, #20
   2f12e:	18fb      	adds	r3, r7, r3
   2f130:	781a      	ldrb	r2, [r3, #0]
   2f132:	2106      	movs	r1, #6
   2f134:	438a      	bics	r2, r1
   2f136:	1c11      	adds	r1, r2, #0
   2f138:	2202      	movs	r2, #2
   2f13a:	430a      	orrs	r2, r1
   2f13c:	701a      	strb	r2, [r3, #0]
	writeChar(&ptr, header.byte); /* write header */
   2f13e:	2314      	movs	r3, #20
   2f140:	18fb      	adds	r3, r7, r3
   2f142:	781a      	ldrb	r2, [r3, #0]
   2f144:	2318      	movs	r3, #24
   2f146:	18fb      	adds	r3, r7, r3
   2f148:	0011      	movs	r1, r2
   2f14a:	0018      	movs	r0, r3
   2f14c:	4b23      	ldr	r3, [pc, #140]	; (2f1dc <MQTTSerialize_subscribe+0x140>)
   2f14e:	4798      	blx	r3

	ptr += MQTTPacket_encode(ptr, rem_len); /* write remaining length */;
   2f150:	69bb      	ldr	r3, [r7, #24]
   2f152:	69fa      	ldr	r2, [r7, #28]
   2f154:	0011      	movs	r1, r2
   2f156:	0018      	movs	r0, r3
   2f158:	4b21      	ldr	r3, [pc, #132]	; (2f1e0 <MQTTSerialize_subscribe+0x144>)
   2f15a:	4798      	blx	r3
   2f15c:	0002      	movs	r2, r0
   2f15e:	69bb      	ldr	r3, [r7, #24]
   2f160:	189b      	adds	r3, r3, r2
   2f162:	61bb      	str	r3, [r7, #24]

	writeInt(&ptr, packetid);
   2f164:	1d3b      	adds	r3, r7, #4
   2f166:	881a      	ldrh	r2, [r3, #0]
   2f168:	2318      	movs	r3, #24
   2f16a:	18fb      	adds	r3, r7, r3
   2f16c:	0011      	movs	r1, r2
   2f16e:	0018      	movs	r0, r3
   2f170:	4b1c      	ldr	r3, [pc, #112]	; (2f1e4 <MQTTSerialize_subscribe+0x148>)
   2f172:	4798      	blx	r3

	for (i = 0; i < count; ++i)
   2f174:	2300      	movs	r3, #0
   2f176:	623b      	str	r3, [r7, #32]
   2f178:	e01d      	b.n	2f1b6 <MQTTSerialize_subscribe+0x11a>
	{
		writeMQTTString(&ptr, topicFilters[i]);
   2f17a:	6a3a      	ldr	r2, [r7, #32]
   2f17c:	0013      	movs	r3, r2
   2f17e:	005b      	lsls	r3, r3, #1
   2f180:	189b      	adds	r3, r3, r2
   2f182:	009b      	lsls	r3, r3, #2
   2f184:	001a      	movs	r2, r3
   2f186:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   2f188:	189b      	adds	r3, r3, r2
   2f18a:	2218      	movs	r2, #24
   2f18c:	18b8      	adds	r0, r7, r2
   2f18e:	6819      	ldr	r1, [r3, #0]
   2f190:	685a      	ldr	r2, [r3, #4]
   2f192:	689b      	ldr	r3, [r3, #8]
   2f194:	4c14      	ldr	r4, [pc, #80]	; (2f1e8 <MQTTSerialize_subscribe+0x14c>)
   2f196:	47a0      	blx	r4
		writeChar(&ptr, requestedQoSs[i]);
   2f198:	6a3b      	ldr	r3, [r7, #32]
   2f19a:	009b      	lsls	r3, r3, #2
   2f19c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
   2f19e:	18d3      	adds	r3, r2, r3
   2f1a0:	681b      	ldr	r3, [r3, #0]
   2f1a2:	b2da      	uxtb	r2, r3
   2f1a4:	2318      	movs	r3, #24
   2f1a6:	18fb      	adds	r3, r7, r3
   2f1a8:	0011      	movs	r1, r2
   2f1aa:	0018      	movs	r0, r3
   2f1ac:	4b0b      	ldr	r3, [pc, #44]	; (2f1dc <MQTTSerialize_subscribe+0x140>)
   2f1ae:	4798      	blx	r3
	for (i = 0; i < count; ++i)
   2f1b0:	6a3b      	ldr	r3, [r7, #32]
   2f1b2:	3301      	adds	r3, #1
   2f1b4:	623b      	str	r3, [r7, #32]
   2f1b6:	6a3a      	ldr	r2, [r7, #32]
   2f1b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   2f1ba:	429a      	cmp	r2, r3
   2f1bc:	dbdd      	blt.n	2f17a <MQTTSerialize_subscribe+0xde>
	}

	rc = ptr - buf;
   2f1be:	69bb      	ldr	r3, [r7, #24]
   2f1c0:	001a      	movs	r2, r3
   2f1c2:	68fb      	ldr	r3, [r7, #12]
   2f1c4:	1ad3      	subs	r3, r2, r3
   2f1c6:	627b      	str	r3, [r7, #36]	; 0x24
exit:
	FUNC_EXIT_RC(rc);
	return rc;
   2f1c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
   2f1ca:	0018      	movs	r0, r3
   2f1cc:	46bd      	mov	sp, r7
   2f1ce:	b00b      	add	sp, #44	; 0x2c
   2f1d0:	bd90      	pop	{r4, r7, pc}
   2f1d2:	46c0      	nop			; (mov r8, r8)
   2f1d4:	0002f049 	.word	0x0002f049
   2f1d8:	0002ea0d 	.word	0x0002ea0d
   2f1dc:	0002eb2f 	.word	0x0002eb2f
   2f1e0:	0002e915 	.word	0x0002e915
   2f1e4:	0002eb59 	.word	0x0002eb59
   2f1e8:	0002ec01 	.word	0x0002ec01

0002f1ec <MQTTDeserialize_suback>:
  * @param buf the raw buffer data, of the correct length determined by the remaining length field
  * @param buflen the length in bytes of the data in the supplied buffer
  * @return error code.  1 is success, 0 is failure
  */
int MQTTDeserialize_suback(unsigned short* packetid, int maxcount, int* count, int grantedQoSs[], unsigned char* buf, int buflen)
{
   2f1ec:	b590      	push	{r4, r7, lr}
   2f1ee:	b08b      	sub	sp, #44	; 0x2c
   2f1f0:	af00      	add	r7, sp, #0
   2f1f2:	60f8      	str	r0, [r7, #12]
   2f1f4:	60b9      	str	r1, [r7, #8]
   2f1f6:	607a      	str	r2, [r7, #4]
   2f1f8:	603b      	str	r3, [r7, #0]
	MQTTHeader header = {0};
   2f1fa:	2300      	movs	r3, #0
   2f1fc:	61fb      	str	r3, [r7, #28]
	unsigned char* curdata = buf;
   2f1fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   2f200:	61bb      	str	r3, [r7, #24]
	unsigned char* enddata = NULL;
   2f202:	2300      	movs	r3, #0
   2f204:	623b      	str	r3, [r7, #32]
	int rc = 0;
   2f206:	2300      	movs	r3, #0
   2f208:	627b      	str	r3, [r7, #36]	; 0x24
	int mylen;

	FUNC_ENTRY;
	header.byte = readChar(&curdata);
   2f20a:	2318      	movs	r3, #24
   2f20c:	18fb      	adds	r3, r7, r3
   2f20e:	0018      	movs	r0, r3
   2f210:	4b2c      	ldr	r3, [pc, #176]	; (2f2c4 <MQTTDeserialize_suback+0xd8>)
   2f212:	4798      	blx	r3
   2f214:	0003      	movs	r3, r0
   2f216:	001a      	movs	r2, r3
   2f218:	231c      	movs	r3, #28
   2f21a:	18fb      	adds	r3, r7, r3
   2f21c:	701a      	strb	r2, [r3, #0]
	if (header.bits.type != SUBACK)
   2f21e:	231c      	movs	r3, #28
   2f220:	18fb      	adds	r3, r7, r3
   2f222:	781b      	ldrb	r3, [r3, #0]
   2f224:	220f      	movs	r2, #15
   2f226:	4393      	bics	r3, r2
   2f228:	b2db      	uxtb	r3, r3
   2f22a:	2b90      	cmp	r3, #144	; 0x90
   2f22c:	d142      	bne.n	2f2b4 <MQTTDeserialize_suback+0xc8>
		goto exit;

	curdata += (rc = MQTTPacket_decodeBuf(curdata, &mylen)); /* read remaining length */
   2f22e:	69bb      	ldr	r3, [r7, #24]
   2f230:	2214      	movs	r2, #20
   2f232:	18ba      	adds	r2, r7, r2
   2f234:	0011      	movs	r1, r2
   2f236:	0018      	movs	r0, r3
   2f238:	4b23      	ldr	r3, [pc, #140]	; (2f2c8 <MQTTDeserialize_suback+0xdc>)
   2f23a:	4798      	blx	r3
   2f23c:	0003      	movs	r3, r0
   2f23e:	627b      	str	r3, [r7, #36]	; 0x24
   2f240:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   2f242:	69bb      	ldr	r3, [r7, #24]
   2f244:	189b      	adds	r3, r3, r2
   2f246:	61bb      	str	r3, [r7, #24]
	enddata = curdata + mylen;
   2f248:	69bb      	ldr	r3, [r7, #24]
   2f24a:	697a      	ldr	r2, [r7, #20]
   2f24c:	189b      	adds	r3, r3, r2
   2f24e:	623b      	str	r3, [r7, #32]
	if (enddata - curdata < 2)
   2f250:	6a3b      	ldr	r3, [r7, #32]
   2f252:	69ba      	ldr	r2, [r7, #24]
   2f254:	1a9b      	subs	r3, r3, r2
   2f256:	2b01      	cmp	r3, #1
   2f258:	dd2e      	ble.n	2f2b8 <MQTTDeserialize_suback+0xcc>
		goto exit;

	*packetid = readInt(&curdata);
   2f25a:	2318      	movs	r3, #24
   2f25c:	18fb      	adds	r3, r7, r3
   2f25e:	0018      	movs	r0, r3
   2f260:	4b1a      	ldr	r3, [pc, #104]	; (2f2cc <MQTTDeserialize_suback+0xe0>)
   2f262:	4798      	blx	r3
   2f264:	0003      	movs	r3, r0
   2f266:	b29a      	uxth	r2, r3
   2f268:	68fb      	ldr	r3, [r7, #12]
   2f26a:	801a      	strh	r2, [r3, #0]

	*count = 0;
   2f26c:	687b      	ldr	r3, [r7, #4]
   2f26e:	2200      	movs	r2, #0
   2f270:	601a      	str	r2, [r3, #0]
	while (curdata < enddata)
   2f272:	e018      	b.n	2f2a6 <MQTTDeserialize_suback+0xba>
	{
		if (*count > maxcount)
   2f274:	687b      	ldr	r3, [r7, #4]
   2f276:	681a      	ldr	r2, [r3, #0]
   2f278:	68bb      	ldr	r3, [r7, #8]
   2f27a:	429a      	cmp	r2, r3
   2f27c:	dd03      	ble.n	2f286 <MQTTDeserialize_suback+0x9a>
		{
			rc = -1;
   2f27e:	2301      	movs	r3, #1
   2f280:	425b      	negs	r3, r3
   2f282:	627b      	str	r3, [r7, #36]	; 0x24
			goto exit;
   2f284:	e019      	b.n	2f2ba <MQTTDeserialize_suback+0xce>
		}
		grantedQoSs[(*count)++] = readChar(&curdata);
   2f286:	687b      	ldr	r3, [r7, #4]
   2f288:	681a      	ldr	r2, [r3, #0]
   2f28a:	1c51      	adds	r1, r2, #1
   2f28c:	687b      	ldr	r3, [r7, #4]
   2f28e:	6019      	str	r1, [r3, #0]
   2f290:	0013      	movs	r3, r2
   2f292:	009b      	lsls	r3, r3, #2
   2f294:	683a      	ldr	r2, [r7, #0]
   2f296:	18d4      	adds	r4, r2, r3
   2f298:	2318      	movs	r3, #24
   2f29a:	18fb      	adds	r3, r7, r3
   2f29c:	0018      	movs	r0, r3
   2f29e:	4b09      	ldr	r3, [pc, #36]	; (2f2c4 <MQTTDeserialize_suback+0xd8>)
   2f2a0:	4798      	blx	r3
   2f2a2:	0003      	movs	r3, r0
   2f2a4:	6023      	str	r3, [r4, #0]
	while (curdata < enddata)
   2f2a6:	69ba      	ldr	r2, [r7, #24]
   2f2a8:	6a3b      	ldr	r3, [r7, #32]
   2f2aa:	429a      	cmp	r2, r3
   2f2ac:	d3e2      	bcc.n	2f274 <MQTTDeserialize_suback+0x88>
	}

	rc = 1;
   2f2ae:	2301      	movs	r3, #1
   2f2b0:	627b      	str	r3, [r7, #36]	; 0x24
   2f2b2:	e002      	b.n	2f2ba <MQTTDeserialize_suback+0xce>
		goto exit;
   2f2b4:	46c0      	nop			; (mov r8, r8)
   2f2b6:	e000      	b.n	2f2ba <MQTTDeserialize_suback+0xce>
		goto exit;
   2f2b8:	46c0      	nop			; (mov r8, r8)
exit:
	FUNC_EXIT_RC(rc);
	return rc;
   2f2ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
   2f2bc:	0018      	movs	r0, r3
   2f2be:	46bd      	mov	sp, r7
   2f2c0:	b00b      	add	sp, #44	; 0x2c
   2f2c2:	bd90      	pop	{r4, r7, pc}
   2f2c4:	0002eb03 	.word	0x0002eb03
   2f2c8:	0002ea9d 	.word	0x0002ea9d
   2f2cc:	0002ead1 	.word	0x0002ead1

0002f2d0 <http_client_get_config_defaults>:
 * So it needed reference to HTTP client module instance.
 */
static struct http_client_module *module_ref_inst[TCP_SOCK_MAX] = {NULL,};

void http_client_get_config_defaults(struct http_client_config *const config)
{
   2f2d0:	b580      	push	{r7, lr}
   2f2d2:	b082      	sub	sp, #8
   2f2d4:	af00      	add	r7, sp, #0
   2f2d6:	6078      	str	r0, [r7, #4]
	config->port = 80;
   2f2d8:	687b      	ldr	r3, [r7, #4]
   2f2da:	2250      	movs	r2, #80	; 0x50
   2f2dc:	801a      	strh	r2, [r3, #0]
	config->tls = 0;
   2f2de:	687b      	ldr	r3, [r7, #4]
   2f2e0:	2200      	movs	r2, #0
   2f2e2:	709a      	strb	r2, [r3, #2]
	config->timeout = 20000;
   2f2e4:	687b      	ldr	r3, [r7, #4]
   2f2e6:	4a0b      	ldr	r2, [pc, #44]	; (2f314 <http_client_get_config_defaults+0x44>)
   2f2e8:	811a      	strh	r2, [r3, #8]
	config->timer_inst = NULL;
   2f2ea:	687b      	ldr	r3, [r7, #4]
   2f2ec:	2200      	movs	r2, #0
   2f2ee:	605a      	str	r2, [r3, #4]
	config->recv_buffer = NULL;
   2f2f0:	687b      	ldr	r3, [r7, #4]
   2f2f2:	2200      	movs	r2, #0
   2f2f4:	60da      	str	r2, [r3, #12]
	config->recv_buffer_size = 256;
   2f2f6:	687b      	ldr	r3, [r7, #4]
   2f2f8:	2280      	movs	r2, #128	; 0x80
   2f2fa:	0052      	lsls	r2, r2, #1
   2f2fc:	611a      	str	r2, [r3, #16]
	config->send_buffer_size = MIN_SEND_BUFFER_SIZE;
   2f2fe:	687b      	ldr	r3, [r7, #4]
   2f300:	2252      	movs	r2, #82	; 0x52
   2f302:	615a      	str	r2, [r3, #20]
	config->user_agent = DEFAULT_USER_AGENT;
   2f304:	687b      	ldr	r3, [r7, #4]
   2f306:	4a04      	ldr	r2, [pc, #16]	; (2f318 <http_client_get_config_defaults+0x48>)
   2f308:	619a      	str	r2, [r3, #24]
}
   2f30a:	46c0      	nop			; (mov r8, r8)
   2f30c:	46bd      	mov	sp, r7
   2f30e:	b002      	add	sp, #8
   2f310:	bd80      	pop	{r7, pc}
   2f312:	46c0      	nop			; (mov r8, r8)
   2f314:	00004e20 	.word	0x00004e20
   2f318:	000380a4 	.word	0x000380a4

0002f31c <http_client_init>:

int http_client_init(struct http_client_module *const module, struct http_client_config *config)
{
   2f31c:	b590      	push	{r4, r7, lr}
   2f31e:	b083      	sub	sp, #12
   2f320:	af00      	add	r7, sp, #0
   2f322:	6078      	str	r0, [r7, #4]
   2f324:	6039      	str	r1, [r7, #0]
	/* Checks the parameters. */
	if (module == NULL || config == NULL) {
   2f326:	687b      	ldr	r3, [r7, #4]
   2f328:	2b00      	cmp	r3, #0
   2f32a:	d002      	beq.n	2f332 <http_client_init+0x16>
   2f32c:	683b      	ldr	r3, [r7, #0]
   2f32e:	2b00      	cmp	r3, #0
   2f330:	d102      	bne.n	2f338 <http_client_init+0x1c>
		return -EINVAL;
   2f332:	2316      	movs	r3, #22
   2f334:	425b      	negs	r3, r3
   2f336:	e058      	b.n	2f3ea <http_client_init+0xce>
	}

	if (config->recv_buffer_size == 0) {
   2f338:	683b      	ldr	r3, [r7, #0]
   2f33a:	691b      	ldr	r3, [r3, #16]
   2f33c:	2b00      	cmp	r3, #0
   2f33e:	d102      	bne.n	2f346 <http_client_init+0x2a>
		return -EINVAL;
   2f340:	2316      	movs	r3, #22
   2f342:	425b      	negs	r3, r3
   2f344:	e051      	b.n	2f3ea <http_client_init+0xce>
	}

	if (config->timer_inst == NULL) {
   2f346:	683b      	ldr	r3, [r7, #0]
   2f348:	685b      	ldr	r3, [r3, #4]
   2f34a:	2b00      	cmp	r3, #0
   2f34c:	d102      	bne.n	2f354 <http_client_init+0x38>
		return -EINVAL;
   2f34e:	2316      	movs	r3, #22
   2f350:	425b      	negs	r3, r3
   2f352:	e04a      	b.n	2f3ea <http_client_init+0xce>
	}

	if (config->send_buffer_size < MIN_SEND_BUFFER_SIZE) {
   2f354:	683b      	ldr	r3, [r7, #0]
   2f356:	695b      	ldr	r3, [r3, #20]
   2f358:	2b51      	cmp	r3, #81	; 0x51
   2f35a:	d802      	bhi.n	2f362 <http_client_init+0x46>
		return -EINVAL;
   2f35c:	2316      	movs	r3, #22
   2f35e:	425b      	negs	r3, r3
   2f360:	e043      	b.n	2f3ea <http_client_init+0xce>
	}

	memset(module, 0, sizeof(struct http_client_module));
   2f362:	687b      	ldr	r3, [r7, #4]
   2f364:	22e8      	movs	r2, #232	; 0xe8
   2f366:	2100      	movs	r1, #0
   2f368:	0018      	movs	r0, r3
   2f36a:	4b22      	ldr	r3, [pc, #136]	; (2f3f4 <http_client_init+0xd8>)
   2f36c:	4798      	blx	r3
	memcpy(&module->config, config, sizeof(struct http_client_config));
   2f36e:	687b      	ldr	r3, [r7, #4]
   2f370:	3350      	adds	r3, #80	; 0x50
   2f372:	6839      	ldr	r1, [r7, #0]
   2f374:	221c      	movs	r2, #28
   2f376:	0018      	movs	r0, r3
   2f378:	4b1f      	ldr	r3, [pc, #124]	; (2f3f8 <http_client_init+0xdc>)
   2f37a:	4798      	blx	r3

	/* Allocate the buffer in the heap. */
	if (module->config.recv_buffer == NULL) {
   2f37c:	687b      	ldr	r3, [r7, #4]
   2f37e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
   2f380:	2b00      	cmp	r3, #0
   2f382:	d115      	bne.n	2f3b0 <http_client_init+0x94>
		module->config.recv_buffer = malloc(config->recv_buffer_size);
   2f384:	683b      	ldr	r3, [r7, #0]
   2f386:	691b      	ldr	r3, [r3, #16]
   2f388:	0018      	movs	r0, r3
   2f38a:	4b1c      	ldr	r3, [pc, #112]	; (2f3fc <http_client_init+0xe0>)
   2f38c:	4798      	blx	r3
   2f38e:	0003      	movs	r3, r0
   2f390:	001a      	movs	r2, r3
   2f392:	687b      	ldr	r3, [r7, #4]
   2f394:	65da      	str	r2, [r3, #92]	; 0x5c
		if (module->config.recv_buffer == NULL) {
   2f396:	687b      	ldr	r3, [r7, #4]
   2f398:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
   2f39a:	2b00      	cmp	r3, #0
   2f39c:	d102      	bne.n	2f3a4 <http_client_init+0x88>
			return -ENOMEM;
   2f39e:	230c      	movs	r3, #12
   2f3a0:	425b      	negs	r3, r3
   2f3a2:	e022      	b.n	2f3ea <http_client_init+0xce>
		}
		module->alloc_buffer = 1;
   2f3a4:	687b      	ldr	r3, [r7, #4]
   2f3a6:	2241      	movs	r2, #65	; 0x41
   2f3a8:	5c99      	ldrb	r1, [r3, r2]
   2f3aa:	2004      	movs	r0, #4
   2f3ac:	4301      	orrs	r1, r0
   2f3ae:	5499      	strb	r1, [r3, r2]
	}

	if (config->timeout > 0) {
   2f3b0:	683b      	ldr	r3, [r7, #0]
   2f3b2:	891b      	ldrh	r3, [r3, #8]
   2f3b4:	2b00      	cmp	r3, #0
   2f3b6:	d010      	beq.n	2f3da <http_client_init+0xbe>
		/* Enable the timer. */
		module->timer_id = sw_timer_register_callback(config->timer_inst, http_client_timer_callback, (void *)module, 0);
   2f3b8:	683b      	ldr	r3, [r7, #0]
   2f3ba:	6858      	ldr	r0, [r3, #4]
   2f3bc:	687a      	ldr	r2, [r7, #4]
   2f3be:	4910      	ldr	r1, [pc, #64]	; (2f400 <http_client_init+0xe4>)
   2f3c0:	2300      	movs	r3, #0
   2f3c2:	4c10      	ldr	r4, [pc, #64]	; (2f404 <http_client_init+0xe8>)
   2f3c4:	47a0      	blx	r4
   2f3c6:	0002      	movs	r2, r0
   2f3c8:	687b      	ldr	r3, [r7, #4]
   2f3ca:	649a      	str	r2, [r3, #72]	; 0x48

		if (module->timer_id < 0) {
   2f3cc:	687b      	ldr	r3, [r7, #4]
   2f3ce:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   2f3d0:	2b00      	cmp	r3, #0
   2f3d2:	da02      	bge.n	2f3da <http_client_init+0xbe>
			return -ENOSPC;
   2f3d4:	231c      	movs	r3, #28
   2f3d6:	425b      	negs	r3, r3
   2f3d8:	e007      	b.n	2f3ea <http_client_init+0xce>
		}
	}

	module->req.state = STATE_INIT;
   2f3da:	687b      	ldr	r3, [r7, #4]
   2f3dc:	2200      	movs	r2, #0
   2f3de:	66da      	str	r2, [r3, #108]	; 0x6c
	module->resp.state = STATE_PARSE_HEADER;
   2f3e0:	687b      	ldr	r3, [r7, #4]
   2f3e2:	22d8      	movs	r2, #216	; 0xd8
   2f3e4:	2100      	movs	r1, #0
   2f3e6:	5099      	str	r1, [r3, r2]

	return 0;
   2f3e8:	2300      	movs	r3, #0
}
   2f3ea:	0018      	movs	r0, r3
   2f3ec:	46bd      	mov	sp, r7
   2f3ee:	b003      	add	sp, #12
   2f3f0:	bd90      	pop	{r4, r7, pc}
   2f3f2:	46c0      	nop			; (mov r8, r8)
   2f3f4:	00033117 	.word	0x00033117
   2f3f8:	000330e1 	.word	0x000330e1
   2f3fc:	000330b9 	.word	0x000330b9
   2f400:	0002f6cd 	.word	0x0002f6cd
   2f404:	00030d71 	.word	0x00030d71

0002f408 <http_client_register_callback>:

	return 0;
}

int http_client_register_callback(struct http_client_module *const module, http_client_callback_t callback)
{
   2f408:	b580      	push	{r7, lr}
   2f40a:	b082      	sub	sp, #8
   2f40c:	af00      	add	r7, sp, #0
   2f40e:	6078      	str	r0, [r7, #4]
   2f410:	6039      	str	r1, [r7, #0]
	/* Checks the parameters. */
	if (module == NULL) {
   2f412:	687b      	ldr	r3, [r7, #4]
   2f414:	2b00      	cmp	r3, #0
   2f416:	d102      	bne.n	2f41e <http_client_register_callback+0x16>
		return -EINVAL;
   2f418:	2316      	movs	r3, #22
   2f41a:	425b      	negs	r3, r3
   2f41c:	e003      	b.n	2f426 <http_client_register_callback+0x1e>
	}

	module->cb = callback;
   2f41e:	687b      	ldr	r3, [r7, #4]
   2f420:	683a      	ldr	r2, [r7, #0]
   2f422:	64da      	str	r2, [r3, #76]	; 0x4c

	return 0;
   2f424:	2300      	movs	r3, #0
}
   2f426:	0018      	movs	r0, r3
   2f428:	46bd      	mov	sp, r7
   2f42a:	b002      	add	sp, #8
   2f42c:	bd80      	pop	{r7, pc}
	...

0002f430 <_hwerr_to_stderr>:

/**
 * \brief change HW error type to standard error.
 */
static inline int _hwerr_to_stderr(int err)
{
   2f430:	b580      	push	{r7, lr}
   2f432:	b082      	sub	sp, #8
   2f434:	af00      	add	r7, sp, #0
   2f436:	6078      	str	r0, [r7, #4]
	switch (err) {
   2f438:	687b      	ldr	r3, [r7, #4]
   2f43a:	330e      	adds	r3, #14
   2f43c:	2b0e      	cmp	r3, #14
   2f43e:	d825      	bhi.n	2f48c <_hwerr_to_stderr+0x5c>
   2f440:	009a      	lsls	r2, r3, #2
   2f442:	4b18      	ldr	r3, [pc, #96]	; (2f4a4 <_hwerr_to_stderr+0x74>)
   2f444:	18d3      	adds	r3, r2, r3
   2f446:	681b      	ldr	r3, [r3, #0]
   2f448:	469f      	mov	pc, r3
		case 0:
			return -EIO;
   2f44a:	2305      	movs	r3, #5
   2f44c:	425b      	negs	r3, r3
   2f44e:	e024      	b.n	2f49a <_hwerr_to_stderr+0x6a>
		case SOCK_ERR_INVALID_ADDRESS:
			return -ENOENT;
   2f450:	2302      	movs	r3, #2
   2f452:	425b      	negs	r3, r3
   2f454:	e021      	b.n	2f49a <_hwerr_to_stderr+0x6a>
		case SOCK_ERR_ADDR_ALREADY_IN_USE:
			return -EADDRINUSE;
   2f456:	2370      	movs	r3, #112	; 0x70
   2f458:	425b      	negs	r3, r3
   2f45a:	e01e      	b.n	2f49a <_hwerr_to_stderr+0x6a>
		case SOCK_ERR_MAX_TCP_SOCK:
		case SOCK_ERR_MAX_UDP_SOCK:
			return -ENOMEM;
   2f45c:	230c      	movs	r3, #12
   2f45e:	425b      	negs	r3, r3
   2f460:	e01b      	b.n	2f49a <_hwerr_to_stderr+0x6a>
		case SOCK_ERR_INVALID_ARG:
			return -EINVAL;
   2f462:	2316      	movs	r3, #22
   2f464:	425b      	negs	r3, r3
   2f466:	e018      	b.n	2f49a <_hwerr_to_stderr+0x6a>
		case SOCK_ERR_MAX_LISTEN_SOCK:
			return -ENOMEM;
   2f468:	230c      	movs	r3, #12
   2f46a:	425b      	negs	r3, r3
   2f46c:	e015      	b.n	2f49a <_hwerr_to_stderr+0x6a>
		case SOCK_ERR_INVALID:
			return -EIO;
   2f46e:	2305      	movs	r3, #5
   2f470:	425b      	negs	r3, r3
   2f472:	e012      	b.n	2f49a <_hwerr_to_stderr+0x6a>
		case SOCK_ERR_ADDR_IS_REQUIRED:
			return -EDESTADDRREQ;
   2f474:	2379      	movs	r3, #121	; 0x79
   2f476:	425b      	negs	r3, r3
   2f478:	e00f      	b.n	2f49a <_hwerr_to_stderr+0x6a>
		case SOCK_ERR_CONN_ABORTED:
			return -ECONNRESET;
   2f47a:	2368      	movs	r3, #104	; 0x68
   2f47c:	425b      	negs	r3, r3
   2f47e:	e00c      	b.n	2f49a <_hwerr_to_stderr+0x6a>
		case SOCK_ERR_TIMEOUT:
			return -EAGAIN;
   2f480:	230b      	movs	r3, #11
   2f482:	425b      	negs	r3, r3
   2f484:	e009      	b.n	2f49a <_hwerr_to_stderr+0x6a>
		case SOCK_ERR_BUFFER_FULL:
			return -EBUSY; /* HW error occurred. Retry it*/
   2f486:	2310      	movs	r3, #16
   2f488:	425b      	negs	r3, r3
   2f48a:	e006      	b.n	2f49a <_hwerr_to_stderr+0x6a>
		default:
			if (err < 0) {
   2f48c:	687b      	ldr	r3, [r7, #4]
   2f48e:	2b00      	cmp	r3, #0
   2f490:	da02      	bge.n	2f498 <_hwerr_to_stderr+0x68>
				return -EIO;
   2f492:	2305      	movs	r3, #5
   2f494:	425b      	negs	r3, r3
   2f496:	e000      	b.n	2f49a <_hwerr_to_stderr+0x6a>
			}
			return 0;
   2f498:	2300      	movs	r3, #0
	}
}
   2f49a:	0018      	movs	r0, r3
   2f49c:	46bd      	mov	sp, r7
   2f49e:	b002      	add	sp, #8
   2f4a0:	bd80      	pop	{r7, pc}
   2f4a2:	46c0      	nop			; (mov r8, r8)
   2f4a4:	000381e0 	.word	0x000381e0

0002f4a8 <http_client_socket_event_handler>:

void http_client_socket_event_handler(SOCKET sock, uint8_t msg_type, void *msg_data)
{
   2f4a8:	b580      	push	{r7, lr}
   2f4aa:	b08a      	sub	sp, #40	; 0x28
   2f4ac:	af00      	add	r7, sp, #0
   2f4ae:	603a      	str	r2, [r7, #0]
   2f4b0:	1dfb      	adds	r3, r7, #7
   2f4b2:	1c02      	adds	r2, r0, #0
   2f4b4:	701a      	strb	r2, [r3, #0]
   2f4b6:	1dbb      	adds	r3, r7, #6
   2f4b8:	1c0a      	adds	r2, r1, #0
   2f4ba:	701a      	strb	r2, [r3, #0]
	tstrSocketRecvMsg *msg_recv;
	int16_t send_ret;
	union http_client_data data;

	/* Find instance using the socket descriptor. */
	struct http_client_module *module = module_ref_inst[sock];
   2f4bc:	1dfb      	adds	r3, r7, #7
   2f4be:	2200      	movs	r2, #0
   2f4c0:	569a      	ldrsb	r2, [r3, r2]
   2f4c2:	4b4b      	ldr	r3, [pc, #300]	; (2f5f0 <http_client_socket_event_handler+0x148>)
   2f4c4:	0092      	lsls	r2, r2, #2
   2f4c6:	58d3      	ldr	r3, [r2, r3]
   2f4c8:	627b      	str	r3, [r7, #36]	; 0x24
	/* If cannot found reference, This socket is not HTTP client socket. */
	if (module == NULL) {
   2f4ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   2f4cc:	2b00      	cmp	r3, #0
   2f4ce:	d100      	bne.n	2f4d2 <http_client_socket_event_handler+0x2a>
   2f4d0:	e08a      	b.n	2f5e8 <http_client_socket_event_handler+0x140>
		return;
	}

	switch (msg_type) {
   2f4d2:	1dbb      	adds	r3, r7, #6
   2f4d4:	781b      	ldrb	r3, [r3, #0]
   2f4d6:	2b06      	cmp	r3, #6
   2f4d8:	d040      	beq.n	2f55c <http_client_socket_event_handler+0xb4>
   2f4da:	2b07      	cmp	r3, #7
   2f4dc:	d060      	beq.n	2f5a0 <http_client_socket_event_handler+0xf8>
   2f4de:	2b05      	cmp	r3, #5
   2f4e0:	d000      	beq.n	2f4e4 <http_client_socket_event_handler+0x3c>
		}
		/* Disable sending flag. */
		module->sending = 0;
    	break;
	default:
		break;
   2f4e2:	e082      	b.n	2f5ea <http_client_socket_event_handler+0x142>
    	msg_connect = (tstrSocketConnectMsg*)msg_data;
   2f4e4:	683b      	ldr	r3, [r7, #0]
   2f4e6:	623b      	str	r3, [r7, #32]
    	data.sock_connected.result = msg_connect->s8Error;
   2f4e8:	6a3b      	ldr	r3, [r7, #32]
   2f4ea:	785b      	ldrb	r3, [r3, #1]
   2f4ec:	b25b      	sxtb	r3, r3
   2f4ee:	001a      	movs	r2, r3
   2f4f0:	230c      	movs	r3, #12
   2f4f2:	18fb      	adds	r3, r7, r3
   2f4f4:	601a      	str	r2, [r3, #0]
    	if (msg_connect->s8Error < 0) {
   2f4f6:	6a3b      	ldr	r3, [r7, #32]
   2f4f8:	785b      	ldrb	r3, [r3, #1]
   2f4fa:	b25b      	sxtb	r3, r3
   2f4fc:	2b00      	cmp	r3, #0
   2f4fe:	da0c      	bge.n	2f51a <http_client_socket_event_handler+0x72>
			_http_client_clear_conn(module, _hwerr_to_stderr(msg_connect->s8Error));
   2f500:	6a3b      	ldr	r3, [r7, #32]
   2f502:	785b      	ldrb	r3, [r3, #1]
   2f504:	b25b      	sxtb	r3, r3
   2f506:	0018      	movs	r0, r3
   2f508:	4b3a      	ldr	r3, [pc, #232]	; (2f5f4 <http_client_socket_event_handler+0x14c>)
   2f50a:	4798      	blx	r3
   2f50c:	0002      	movs	r2, r0
   2f50e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   2f510:	0011      	movs	r1, r2
   2f512:	0018      	movs	r0, r3
   2f514:	4b38      	ldr	r3, [pc, #224]	; (2f5f8 <http_client_socket_event_handler+0x150>)
   2f516:	4798      	blx	r3
    	break;
   2f518:	e067      	b.n	2f5ea <http_client_socket_event_handler+0x142>
			if (module->cb != NULL) {
   2f51a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   2f51c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   2f51e:	2b00      	cmp	r3, #0
   2f520:	d006      	beq.n	2f530 <http_client_socket_event_handler+0x88>
				module->cb(module, HTTP_CLIENT_CALLBACK_SOCK_CONNECTED, &data);
   2f522:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   2f524:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   2f526:	220c      	movs	r2, #12
   2f528:	18ba      	adds	r2, r7, r2
   2f52a:	6a78      	ldr	r0, [r7, #36]	; 0x24
   2f52c:	2100      	movs	r1, #0
   2f52e:	4798      	blx	r3
			module->req.state = STATE_REQ_SEND_HEADER;
   2f530:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   2f532:	2203      	movs	r2, #3
   2f534:	66da      	str	r2, [r3, #108]	; 0x6c
			sw_timer_enable_callback(module->config.timer_inst, module->timer_id, module->config.timeout);
   2f536:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   2f538:	6d58      	ldr	r0, [r3, #84]	; 0x54
   2f53a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   2f53c:	6c99      	ldr	r1, [r3, #72]	; 0x48
   2f53e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   2f540:	2258      	movs	r2, #88	; 0x58
   2f542:	5a9b      	ldrh	r3, [r3, r2]
   2f544:	001a      	movs	r2, r3
   2f546:	4b2d      	ldr	r3, [pc, #180]	; (2f5fc <http_client_socket_event_handler+0x154>)
   2f548:	4798      	blx	r3
    		_http_client_recv_packet(module);
   2f54a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   2f54c:	0018      	movs	r0, r3
   2f54e:	4b2c      	ldr	r3, [pc, #176]	; (2f600 <http_client_socket_event_handler+0x158>)
   2f550:	4798      	blx	r3
			_http_client_request(module);
   2f552:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   2f554:	0018      	movs	r0, r3
   2f556:	4b2b      	ldr	r3, [pc, #172]	; (2f604 <http_client_socket_event_handler+0x15c>)
   2f558:	4798      	blx	r3
    	break;
   2f55a:	e046      	b.n	2f5ea <http_client_socket_event_handler+0x142>
    	msg_recv = (tstrSocketRecvMsg*)msg_data;
   2f55c:	683b      	ldr	r3, [r7, #0]
   2f55e:	61fb      	str	r3, [r7, #28]
    	if (msg_recv->s16BufferSize > 0) {
   2f560:	69fb      	ldr	r3, [r7, #28]
   2f562:	2204      	movs	r2, #4
   2f564:	5e9b      	ldrsh	r3, [r3, r2]
   2f566:	2b00      	cmp	r3, #0
   2f568:	dd09      	ble.n	2f57e <http_client_socket_event_handler+0xd6>
    		_http_client_recved_packet(module, msg_recv->s16BufferSize);
   2f56a:	69fb      	ldr	r3, [r7, #28]
   2f56c:	2204      	movs	r2, #4
   2f56e:	5e9b      	ldrsh	r3, [r3, r2]
   2f570:	001a      	movs	r2, r3
   2f572:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   2f574:	0011      	movs	r1, r2
   2f576:	0018      	movs	r0, r3
   2f578:	4b23      	ldr	r3, [pc, #140]	; (2f608 <http_client_socket_event_handler+0x160>)
   2f57a:	4798      	blx	r3
   2f57c:	e00b      	b.n	2f596 <http_client_socket_event_handler+0xee>
			_http_client_clear_conn(module, _hwerr_to_stderr(msg_recv->s16BufferSize));
   2f57e:	69fb      	ldr	r3, [r7, #28]
   2f580:	2204      	movs	r2, #4
   2f582:	5e9b      	ldrsh	r3, [r3, r2]
   2f584:	0018      	movs	r0, r3
   2f586:	4b1b      	ldr	r3, [pc, #108]	; (2f5f4 <http_client_socket_event_handler+0x14c>)
   2f588:	4798      	blx	r3
   2f58a:	0002      	movs	r2, r0
   2f58c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   2f58e:	0011      	movs	r1, r2
   2f590:	0018      	movs	r0, r3
   2f592:	4b19      	ldr	r3, [pc, #100]	; (2f5f8 <http_client_socket_event_handler+0x150>)
   2f594:	4798      	blx	r3
		_http_client_recv_packet(module);
   2f596:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   2f598:	0018      	movs	r0, r3
   2f59a:	4b19      	ldr	r3, [pc, #100]	; (2f600 <http_client_socket_event_handler+0x158>)
   2f59c:	4798      	blx	r3
		break;
   2f59e:	e024      	b.n	2f5ea <http_client_socket_event_handler+0x142>
		send_ret = *(int16_t*)msg_data;
   2f5a0:	231a      	movs	r3, #26
   2f5a2:	18fb      	adds	r3, r7, r3
   2f5a4:	683a      	ldr	r2, [r7, #0]
   2f5a6:	8812      	ldrh	r2, [r2, #0]
   2f5a8:	801a      	strh	r2, [r3, #0]
		if (send_ret < 0) {
   2f5aa:	231a      	movs	r3, #26
   2f5ac:	18fb      	adds	r3, r7, r3
   2f5ae:	2200      	movs	r2, #0
   2f5b0:	5e9b      	ldrsh	r3, [r3, r2]
   2f5b2:	2b00      	cmp	r3, #0
   2f5b4:	da0d      	bge.n	2f5d2 <http_client_socket_event_handler+0x12a>
			_http_client_clear_conn(module, _hwerr_to_stderr(send_ret));
   2f5b6:	231a      	movs	r3, #26
   2f5b8:	18fb      	adds	r3, r7, r3
   2f5ba:	2200      	movs	r2, #0
   2f5bc:	5e9b      	ldrsh	r3, [r3, r2]
   2f5be:	0018      	movs	r0, r3
   2f5c0:	4b0c      	ldr	r3, [pc, #48]	; (2f5f4 <http_client_socket_event_handler+0x14c>)
   2f5c2:	4798      	blx	r3
   2f5c4:	0002      	movs	r2, r0
   2f5c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   2f5c8:	0011      	movs	r1, r2
   2f5ca:	0018      	movs	r0, r3
   2f5cc:	4b0a      	ldr	r3, [pc, #40]	; (2f5f8 <http_client_socket_event_handler+0x150>)
   2f5ce:	4798      	blx	r3
   2f5d0:	e003      	b.n	2f5da <http_client_socket_event_handler+0x132>
    		_http_client_request(module);
   2f5d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   2f5d4:	0018      	movs	r0, r3
   2f5d6:	4b0b      	ldr	r3, [pc, #44]	; (2f604 <http_client_socket_event_handler+0x15c>)
   2f5d8:	4798      	blx	r3
		module->sending = 0;
   2f5da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   2f5dc:	2241      	movs	r2, #65	; 0x41
   2f5de:	5c99      	ldrb	r1, [r3, r2]
   2f5e0:	2001      	movs	r0, #1
   2f5e2:	4381      	bics	r1, r0
   2f5e4:	5499      	strb	r1, [r3, r2]
    	break;
   2f5e6:	e000      	b.n	2f5ea <http_client_socket_event_handler+0x142>
		return;
   2f5e8:	46c0      	nop			; (mov r8, r8)
	}

}
   2f5ea:	46bd      	mov	sp, r7
   2f5ec:	b00a      	add	sp, #40	; 0x28
   2f5ee:	bd80      	pop	{r7, pc}
   2f5f0:	20004190 	.word	0x20004190
   2f5f4:	0002f431 	.word	0x0002f431
   2f5f8:	0002faa5 	.word	0x0002faa5
   2f5fc:	00030e01 	.word	0x00030e01
   2f600:	00030331 	.word	0x00030331
   2f604:	0002fbf9 	.word	0x0002fbf9
   2f608:	00030395 	.word	0x00030395

0002f60c <http_client_socket_resolve_handler>:

void http_client_socket_resolve_handler(uint8_t *doamin_name, uint32_t server_ip)
{
   2f60c:	b580      	push	{r7, lr}
   2f60e:	b088      	sub	sp, #32
   2f610:	af00      	add	r7, sp, #0
   2f612:	6078      	str	r0, [r7, #4]
   2f614:	6039      	str	r1, [r7, #0]
	int i;
	struct http_client_module *module;
	struct sockaddr_in addr_in;

	for (i = 0; i < TCP_SOCK_MAX; i++) {
   2f616:	2300      	movs	r3, #0
   2f618:	61fb      	str	r3, [r7, #28]
   2f61a:	e048      	b.n	2f6ae <http_client_socket_resolve_handler+0xa2>
		if (module_ref_inst[i] != NULL) {
   2f61c:	4b27      	ldr	r3, [pc, #156]	; (2f6bc <http_client_socket_resolve_handler+0xb0>)
   2f61e:	69fa      	ldr	r2, [r7, #28]
   2f620:	0092      	lsls	r2, r2, #2
   2f622:	58d3      	ldr	r3, [r2, r3]
   2f624:	2b00      	cmp	r3, #0
   2f626:	d03f      	beq.n	2f6a8 <http_client_socket_resolve_handler+0x9c>
			module = module_ref_inst[i];
   2f628:	4b24      	ldr	r3, [pc, #144]	; (2f6bc <http_client_socket_resolve_handler+0xb0>)
   2f62a:	69fa      	ldr	r2, [r7, #28]
   2f62c:	0092      	lsls	r2, r2, #2
   2f62e:	58d3      	ldr	r3, [r2, r3]
   2f630:	61bb      	str	r3, [r7, #24]
			if (!strcmp((const char*)doamin_name, module->host) && module->req.state == STATE_TRY_SOCK_CONNECT) {
   2f632:	69bb      	ldr	r3, [r7, #24]
   2f634:	1c5a      	adds	r2, r3, #1
   2f636:	687b      	ldr	r3, [r7, #4]
   2f638:	0011      	movs	r1, r2
   2f63a:	0018      	movs	r0, r3
   2f63c:	4b20      	ldr	r3, [pc, #128]	; (2f6c0 <http_client_socket_resolve_handler+0xb4>)
   2f63e:	4798      	blx	r3
   2f640:	1e03      	subs	r3, r0, #0
   2f642:	d131      	bne.n	2f6a8 <http_client_socket_resolve_handler+0x9c>
   2f644:	69bb      	ldr	r3, [r7, #24]
   2f646:	6edb      	ldr	r3, [r3, #108]	; 0x6c
   2f648:	2b01      	cmp	r3, #1
   2f64a:	d12d      	bne.n	2f6a8 <http_client_socket_resolve_handler+0x9c>
				if (server_ip == 0) { /* Host was not found or was not reachable. */ 
   2f64c:	683b      	ldr	r3, [r7, #0]
   2f64e:	2b00      	cmp	r3, #0
   2f650:	d107      	bne.n	2f662 <http_client_socket_resolve_handler+0x56>
					_http_client_clear_conn(module, -EHOSTUNREACH);
   2f652:	2376      	movs	r3, #118	; 0x76
   2f654:	425a      	negs	r2, r3
   2f656:	69bb      	ldr	r3, [r7, #24]
   2f658:	0011      	movs	r1, r2
   2f65a:	0018      	movs	r0, r3
   2f65c:	4b19      	ldr	r3, [pc, #100]	; (2f6c4 <http_client_socket_resolve_handler+0xb8>)
   2f65e:	4798      	blx	r3
					return;
   2f660:	e028      	b.n	2f6b4 <http_client_socket_resolve_handler+0xa8>
				}
				addr_in.sin_family = AF_INET;
   2f662:	2308      	movs	r3, #8
   2f664:	18fb      	adds	r3, r7, r3
   2f666:	2202      	movs	r2, #2
   2f668:	801a      	strh	r2, [r3, #0]
				addr_in.sin_port = _htons(module->config.port);
   2f66a:	69bb      	ldr	r3, [r7, #24]
   2f66c:	2250      	movs	r2, #80	; 0x50
   2f66e:	5a9b      	ldrh	r3, [r3, r2]
   2f670:	021b      	lsls	r3, r3, #8
   2f672:	b21a      	sxth	r2, r3
   2f674:	69bb      	ldr	r3, [r7, #24]
   2f676:	2150      	movs	r1, #80	; 0x50
   2f678:	5a5b      	ldrh	r3, [r3, r1]
   2f67a:	0a1b      	lsrs	r3, r3, #8
   2f67c:	b29b      	uxth	r3, r3
   2f67e:	b21b      	sxth	r3, r3
   2f680:	4313      	orrs	r3, r2
   2f682:	b21b      	sxth	r3, r3
   2f684:	b29a      	uxth	r2, r3
   2f686:	2308      	movs	r3, #8
   2f688:	18fb      	adds	r3, r7, r3
   2f68a:	805a      	strh	r2, [r3, #2]
				addr_in.sin_addr.s_addr = server_ip;
   2f68c:	2308      	movs	r3, #8
   2f68e:	18fb      	adds	r3, r7, r3
   2f690:	683a      	ldr	r2, [r7, #0]
   2f692:	605a      	str	r2, [r3, #4]
				connect(module->sock, (struct sockaddr *)&addr_in, sizeof(struct sockaddr_in));
   2f694:	69bb      	ldr	r3, [r7, #24]
   2f696:	781b      	ldrb	r3, [r3, #0]
   2f698:	b25b      	sxtb	r3, r3
   2f69a:	2208      	movs	r2, #8
   2f69c:	18b9      	adds	r1, r7, r2
   2f69e:	2210      	movs	r2, #16
   2f6a0:	0018      	movs	r0, r3
   2f6a2:	4b09      	ldr	r3, [pc, #36]	; (2f6c8 <http_client_socket_resolve_handler+0xbc>)
   2f6a4:	4798      	blx	r3
				return;
   2f6a6:	e005      	b.n	2f6b4 <http_client_socket_resolve_handler+0xa8>
	for (i = 0; i < TCP_SOCK_MAX; i++) {
   2f6a8:	69fb      	ldr	r3, [r7, #28]
   2f6aa:	3301      	adds	r3, #1
   2f6ac:	61fb      	str	r3, [r7, #28]
   2f6ae:	69fb      	ldr	r3, [r7, #28]
   2f6b0:	2b06      	cmp	r3, #6
   2f6b2:	ddb3      	ble.n	2f61c <http_client_socket_resolve_handler+0x10>
			}
		}
	}
}
   2f6b4:	46bd      	mov	sp, r7
   2f6b6:	b008      	add	sp, #32
   2f6b8:	bd80      	pop	{r7, pc}
   2f6ba:	46c0      	nop			; (mov r8, r8)
   2f6bc:	20004190 	.word	0x20004190
   2f6c0:	0003346f 	.word	0x0003346f
   2f6c4:	0002faa5 	.word	0x0002faa5
   2f6c8:	00023fc9 	.word	0x00023fc9

0002f6cc <http_client_timer_callback>:

void http_client_timer_callback(struct sw_timer_module *const module, int timer_id, void *context, int period)
{
   2f6cc:	b580      	push	{r7, lr}
   2f6ce:	b086      	sub	sp, #24
   2f6d0:	af00      	add	r7, sp, #0
   2f6d2:	60f8      	str	r0, [r7, #12]
   2f6d4:	60b9      	str	r1, [r7, #8]
   2f6d6:	607a      	str	r2, [r7, #4]
   2f6d8:	603b      	str	r3, [r7, #0]
	struct http_client_module *module_inst = (struct http_client_module *)context;
   2f6da:	687b      	ldr	r3, [r7, #4]
   2f6dc:	617b      	str	r3, [r7, #20]

	/* Checks invalid arguments. */
	if (module_inst == NULL) {
   2f6de:	697b      	ldr	r3, [r7, #20]
   2f6e0:	2b00      	cmp	r3, #0
   2f6e2:	d007      	beq.n	2f6f4 <http_client_timer_callback+0x28>
		return;
	}

	_http_client_clear_conn(module_inst, -ETIME);
   2f6e4:	233e      	movs	r3, #62	; 0x3e
   2f6e6:	425a      	negs	r2, r3
   2f6e8:	697b      	ldr	r3, [r7, #20]
   2f6ea:	0011      	movs	r1, r2
   2f6ec:	0018      	movs	r0, r3
   2f6ee:	4b03      	ldr	r3, [pc, #12]	; (2f6fc <http_client_timer_callback+0x30>)
   2f6f0:	4798      	blx	r3
   2f6f2:	e000      	b.n	2f6f6 <http_client_timer_callback+0x2a>
		return;
   2f6f4:	46c0      	nop			; (mov r8, r8)
}
   2f6f6:	46bd      	mov	sp, r7
   2f6f8:	b006      	add	sp, #24
   2f6fa:	bd80      	pop	{r7, pc}
   2f6fc:	0002faa5 	.word	0x0002faa5

0002f700 <_is_ip>:

static int _is_ip(const char *host)
{
   2f700:	b580      	push	{r7, lr}
   2f702:	b084      	sub	sp, #16
   2f704:	af00      	add	r7, sp, #0
   2f706:	6078      	str	r0, [r7, #4]
	uint32_t isv6 = 0;
   2f708:	2300      	movs	r3, #0
   2f70a:	60fb      	str	r3, [r7, #12]
	char ch;

	while (*host != '\0') {
   2f70c:	e03a      	b.n	2f784 <_is_ip+0x84>
		ch = *host++;
   2f70e:	687b      	ldr	r3, [r7, #4]
   2f710:	1c5a      	adds	r2, r3, #1
   2f712:	607a      	str	r2, [r7, #4]
   2f714:	220b      	movs	r2, #11
   2f716:	18ba      	adds	r2, r7, r2
   2f718:	781b      	ldrb	r3, [r3, #0]
   2f71a:	7013      	strb	r3, [r2, #0]
		if ((ch >= 'a' && ch <= 'f') || (ch >= 'A' && ch <= 'F') || ch == ':' || ch == '/') {
   2f71c:	230b      	movs	r3, #11
   2f71e:	18fb      	adds	r3, r7, r3
   2f720:	781b      	ldrb	r3, [r3, #0]
   2f722:	2b60      	cmp	r3, #96	; 0x60
   2f724:	d904      	bls.n	2f730 <_is_ip+0x30>
   2f726:	230b      	movs	r3, #11
   2f728:	18fb      	adds	r3, r7, r3
   2f72a:	781b      	ldrb	r3, [r3, #0]
   2f72c:	2b66      	cmp	r3, #102	; 0x66
   2f72e:	d913      	bls.n	2f758 <_is_ip+0x58>
   2f730:	230b      	movs	r3, #11
   2f732:	18fb      	adds	r3, r7, r3
   2f734:	781b      	ldrb	r3, [r3, #0]
   2f736:	2b40      	cmp	r3, #64	; 0x40
   2f738:	d904      	bls.n	2f744 <_is_ip+0x44>
   2f73a:	230b      	movs	r3, #11
   2f73c:	18fb      	adds	r3, r7, r3
   2f73e:	781b      	ldrb	r3, [r3, #0]
   2f740:	2b46      	cmp	r3, #70	; 0x46
   2f742:	d909      	bls.n	2f758 <_is_ip+0x58>
   2f744:	230b      	movs	r3, #11
   2f746:	18fb      	adds	r3, r7, r3
   2f748:	781b      	ldrb	r3, [r3, #0]
   2f74a:	2b3a      	cmp	r3, #58	; 0x3a
   2f74c:	d004      	beq.n	2f758 <_is_ip+0x58>
   2f74e:	230b      	movs	r3, #11
   2f750:	18fb      	adds	r3, r7, r3
   2f752:	781b      	ldrb	r3, [r3, #0]
   2f754:	2b2f      	cmp	r3, #47	; 0x2f
   2f756:	d102      	bne.n	2f75e <_is_ip+0x5e>
			isv6 = 1;
   2f758:	2301      	movs	r3, #1
   2f75a:	60fb      	str	r3, [r7, #12]
   2f75c:	e012      	b.n	2f784 <_is_ip+0x84>
		} else if (ch == '.') {
   2f75e:	230b      	movs	r3, #11
   2f760:	18fb      	adds	r3, r7, r3
   2f762:	781b      	ldrb	r3, [r3, #0]
   2f764:	2b2e      	cmp	r3, #46	; 0x2e
   2f766:	d104      	bne.n	2f772 <_is_ip+0x72>
			if (isv6) {
   2f768:	68fb      	ldr	r3, [r7, #12]
   2f76a:	2b00      	cmp	r3, #0
   2f76c:	d00a      	beq.n	2f784 <_is_ip+0x84>
				return 0;
   2f76e:	2300      	movs	r3, #0
   2f770:	e00d      	b.n	2f78e <_is_ip+0x8e>
			}
		} else if ((ch & 0x30) != 0x30) {
   2f772:	230b      	movs	r3, #11
   2f774:	18fb      	adds	r3, r7, r3
   2f776:	781b      	ldrb	r3, [r3, #0]
   2f778:	2230      	movs	r2, #48	; 0x30
   2f77a:	4013      	ands	r3, r2
   2f77c:	2b30      	cmp	r3, #48	; 0x30
   2f77e:	d001      	beq.n	2f784 <_is_ip+0x84>
			return 0;
   2f780:	2300      	movs	r3, #0
   2f782:	e004      	b.n	2f78e <_is_ip+0x8e>
	while (*host != '\0') {
   2f784:	687b      	ldr	r3, [r7, #4]
   2f786:	781b      	ldrb	r3, [r3, #0]
   2f788:	2b00      	cmp	r3, #0
   2f78a:	d1c0      	bne.n	2f70e <_is_ip+0xe>
		}
	}
	return 1;
   2f78c:	2301      	movs	r3, #1
}
   2f78e:	0018      	movs	r0, r3
   2f790:	46bd      	mov	sp, r7
   2f792:	b004      	add	sp, #16
   2f794:	bd80      	pop	{r7, pc}
	...

0002f798 <http_client_send_request>:

int http_client_send_request(struct http_client_module *const module, const char *url,
	enum http_method method, struct http_entity *const entity, const char *ext_header)
{
   2f798:	b5b0      	push	{r4, r5, r7, lr}
   2f79a:	b08e      	sub	sp, #56	; 0x38
   2f79c:	af00      	add	r7, sp, #0
   2f79e:	60f8      	str	r0, [r7, #12]
   2f7a0:	60b9      	str	r1, [r7, #8]
   2f7a2:	603b      	str	r3, [r7, #0]
   2f7a4:	1dfb      	adds	r3, r7, #7
   2f7a6:	701a      	strb	r2, [r3, #0]
	uint8_t flag = 0;
   2f7a8:	2337      	movs	r3, #55	; 0x37
   2f7aa:	18fb      	adds	r3, r7, r3
   2f7ac:	2200      	movs	r2, #0
   2f7ae:	701a      	strb	r2, [r3, #0]
	struct sockaddr_in addr_in;
	const char *uri = NULL;
   2f7b0:	2300      	movs	r3, #0
   2f7b2:	62bb      	str	r3, [r7, #40]	; 0x28
	int i = 0, j = 0, reconnect = 0;
   2f7b4:	2300      	movs	r3, #0
   2f7b6:	633b      	str	r3, [r7, #48]	; 0x30
   2f7b8:	2300      	movs	r3, #0
   2f7ba:	62fb      	str	r3, [r7, #44]	; 0x2c
   2f7bc:	2300      	movs	r3, #0
   2f7be:	627b      	str	r3, [r7, #36]	; 0x24

	if (module == NULL) {
   2f7c0:	68fb      	ldr	r3, [r7, #12]
   2f7c2:	2b00      	cmp	r3, #0
   2f7c4:	d102      	bne.n	2f7cc <http_client_send_request+0x34>
		return -EINVAL;
   2f7c6:	2316      	movs	r3, #22
   2f7c8:	425b      	negs	r3, r3
   2f7ca:	e145      	b.n	2fa58 <http_client_send_request+0x2c0>
	}

	if (module->req.state > STATE_SOCK_CONNECTED) {
   2f7cc:	68fb      	ldr	r3, [r7, #12]
   2f7ce:	6edb      	ldr	r3, [r3, #108]	; 0x6c
   2f7d0:	2b02      	cmp	r3, #2
   2f7d2:	d902      	bls.n	2f7da <http_client_send_request+0x42>
		return -EBUSY;
   2f7d4:	2310      	movs	r3, #16
   2f7d6:	425b      	negs	r3, r3
   2f7d8:	e13e      	b.n	2fa58 <http_client_send_request+0x2c0>
	}

	/* Separate host and uri */
	if (!strncmp(url, "http://", 7)) {
   2f7da:	49a1      	ldr	r1, [pc, #644]	; (2fa60 <http_client_send_request+0x2c8>)
   2f7dc:	68bb      	ldr	r3, [r7, #8]
   2f7de:	2207      	movs	r2, #7
   2f7e0:	0018      	movs	r0, r3
   2f7e2:	4ba0      	ldr	r3, [pc, #640]	; (2fa64 <http_client_send_request+0x2cc>)
   2f7e4:	4798      	blx	r3
   2f7e6:	1e03      	subs	r3, r0, #0
   2f7e8:	d102      	bne.n	2f7f0 <http_client_send_request+0x58>
		i = 7;
   2f7ea:	2307      	movs	r3, #7
   2f7ec:	633b      	str	r3, [r7, #48]	; 0x30
   2f7ee:	e009      	b.n	2f804 <http_client_send_request+0x6c>
	} else if (!strncmp(url, "https://", 8)) {
   2f7f0:	499d      	ldr	r1, [pc, #628]	; (2fa68 <http_client_send_request+0x2d0>)
   2f7f2:	68bb      	ldr	r3, [r7, #8]
   2f7f4:	2208      	movs	r2, #8
   2f7f6:	0018      	movs	r0, r3
   2f7f8:	4b9a      	ldr	r3, [pc, #616]	; (2fa64 <http_client_send_request+0x2cc>)
   2f7fa:	4798      	blx	r3
   2f7fc:	1e03      	subs	r3, r0, #0
   2f7fe:	d101      	bne.n	2f804 <http_client_send_request+0x6c>
		i = 8;
   2f800:	2308      	movs	r3, #8
   2f802:	633b      	str	r3, [r7, #48]	; 0x30
	}
	reconnect = strncmp(module->host, url + i, strlen(module->host));
   2f804:	68fb      	ldr	r3, [r7, #12]
   2f806:	1c5c      	adds	r4, r3, #1
   2f808:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   2f80a:	68ba      	ldr	r2, [r7, #8]
   2f80c:	18d5      	adds	r5, r2, r3
   2f80e:	68fb      	ldr	r3, [r7, #12]
   2f810:	3301      	adds	r3, #1
   2f812:	0018      	movs	r0, r3
   2f814:	4b95      	ldr	r3, [pc, #596]	; (2fa6c <http_client_send_request+0x2d4>)
   2f816:	4798      	blx	r3
   2f818:	0003      	movs	r3, r0
   2f81a:	001a      	movs	r2, r3
   2f81c:	0029      	movs	r1, r5
   2f81e:	0020      	movs	r0, r4
   2f820:	4b90      	ldr	r3, [pc, #576]	; (2fa64 <http_client_send_request+0x2cc>)
   2f822:	4798      	blx	r3
   2f824:	0003      	movs	r3, r0
   2f826:	627b      	str	r3, [r7, #36]	; 0x24

	for (; url[i] != '\0' && url[i] != '/'; i++) {
   2f828:	e00d      	b.n	2f846 <http_client_send_request+0xae>
		module->host[j++] = url[i];
   2f82a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   2f82c:	1c5a      	adds	r2, r3, #1
   2f82e:	62fa      	str	r2, [r7, #44]	; 0x2c
   2f830:	6b3a      	ldr	r2, [r7, #48]	; 0x30
   2f832:	68b9      	ldr	r1, [r7, #8]
   2f834:	188a      	adds	r2, r1, r2
   2f836:	7811      	ldrb	r1, [r2, #0]
   2f838:	68fa      	ldr	r2, [r7, #12]
   2f83a:	18d3      	adds	r3, r2, r3
   2f83c:	1c0a      	adds	r2, r1, #0
   2f83e:	705a      	strb	r2, [r3, #1]
	for (; url[i] != '\0' && url[i] != '/'; i++) {
   2f840:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   2f842:	3301      	adds	r3, #1
   2f844:	633b      	str	r3, [r7, #48]	; 0x30
   2f846:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   2f848:	68ba      	ldr	r2, [r7, #8]
   2f84a:	18d3      	adds	r3, r2, r3
   2f84c:	781b      	ldrb	r3, [r3, #0]
   2f84e:	2b00      	cmp	r3, #0
   2f850:	d005      	beq.n	2f85e <http_client_send_request+0xc6>
   2f852:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   2f854:	68ba      	ldr	r2, [r7, #8]
   2f856:	18d3      	adds	r3, r2, r3
   2f858:	781b      	ldrb	r3, [r3, #0]
   2f85a:	2b2f      	cmp	r3, #47	; 0x2f
   2f85c:	d1e5      	bne.n	2f82a <http_client_send_request+0x92>
	}
	module->host[j] = '\0';
   2f85e:	68fa      	ldr	r2, [r7, #12]
   2f860:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   2f862:	18d3      	adds	r3, r2, r3
   2f864:	3301      	adds	r3, #1
   2f866:	2200      	movs	r2, #0
   2f868:	701a      	strb	r2, [r3, #0]
	uri = url + i;
   2f86a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   2f86c:	68ba      	ldr	r2, [r7, #8]
   2f86e:	18d3      	adds	r3, r2, r3
   2f870:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Checks the parameters. */
	if (strlen(module->host) == 0) {
   2f872:	68fb      	ldr	r3, [r7, #12]
   2f874:	3301      	adds	r3, #1
   2f876:	781b      	ldrb	r3, [r3, #0]
   2f878:	2b00      	cmp	r3, #0
   2f87a:	d102      	bne.n	2f882 <http_client_send_request+0xea>
		return -EINVAL;
   2f87c:	2316      	movs	r3, #22
   2f87e:	425b      	negs	r3, r3
   2f880:	e0ea      	b.n	2fa58 <http_client_send_request+0x2c0>
	}

	if (strlen(uri) >= HTTP_MAX_URI_LENGTH) {
   2f882:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2f884:	0018      	movs	r0, r3
   2f886:	4b79      	ldr	r3, [pc, #484]	; (2fa6c <http_client_send_request+0x2d4>)
   2f888:	4798      	blx	r3
   2f88a:	0003      	movs	r3, r0
   2f88c:	2b3f      	cmp	r3, #63	; 0x3f
   2f88e:	d902      	bls.n	2f896 <http_client_send_request+0xfe>
		return -ENAMETOOLONG;
   2f890:	235b      	movs	r3, #91	; 0x5b
   2f892:	425b      	negs	r3, r3
   2f894:	e0e0      	b.n	2fa58 <http_client_send_request+0x2c0>
	}

	if (module->req.ext_header != NULL) {
   2f896:	68fb      	ldr	r3, [r7, #12]
   2f898:	22d4      	movs	r2, #212	; 0xd4
   2f89a:	589b      	ldr	r3, [r3, r2]
   2f89c:	2b00      	cmp	r3, #0
   2f89e:	d005      	beq.n	2f8ac <http_client_send_request+0x114>
		free(module->req.ext_header);
   2f8a0:	68fb      	ldr	r3, [r7, #12]
   2f8a2:	22d4      	movs	r2, #212	; 0xd4
   2f8a4:	589b      	ldr	r3, [r3, r2]
   2f8a6:	0018      	movs	r0, r3
   2f8a8:	4b71      	ldr	r3, [pc, #452]	; (2fa70 <http_client_send_request+0x2d8>)
   2f8aa:	4798      	blx	r3
	}
	if (ext_header != NULL) {
   2f8ac:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   2f8ae:	2b00      	cmp	r3, #0
   2f8b0:	d010      	beq.n	2f8d4 <http_client_send_request+0x13c>
		module->req.ext_header = strdup(ext_header);
   2f8b2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   2f8b4:	0018      	movs	r0, r3
   2f8b6:	4b6f      	ldr	r3, [pc, #444]	; (2fa74 <http_client_send_request+0x2dc>)
   2f8b8:	4798      	blx	r3
   2f8ba:	0003      	movs	r3, r0
   2f8bc:	0019      	movs	r1, r3
   2f8be:	68fb      	ldr	r3, [r7, #12]
   2f8c0:	22d4      	movs	r2, #212	; 0xd4
   2f8c2:	5099      	str	r1, [r3, r2]
		if (module->req.ext_header == NULL) {
   2f8c4:	68fb      	ldr	r3, [r7, #12]
   2f8c6:	22d4      	movs	r2, #212	; 0xd4
   2f8c8:	589b      	ldr	r3, [r3, r2]
   2f8ca:	2b00      	cmp	r3, #0
   2f8cc:	d106      	bne.n	2f8dc <http_client_send_request+0x144>
			return -ENOMEM;
   2f8ce:	230c      	movs	r3, #12
   2f8d0:	425b      	negs	r3, r3
   2f8d2:	e0c1      	b.n	2fa58 <http_client_send_request+0x2c0>
		}
	} else {
		module->req.ext_header = NULL;
   2f8d4:	68fb      	ldr	r3, [r7, #12]
   2f8d6:	22d4      	movs	r2, #212	; 0xd4
   2f8d8:	2100      	movs	r1, #0
   2f8da:	5099      	str	r1, [r3, r2]
	}

	module->sending = 0;
   2f8dc:	68fb      	ldr	r3, [r7, #12]
   2f8de:	2241      	movs	r2, #65	; 0x41
   2f8e0:	5c99      	ldrb	r1, [r3, r2]
   2f8e2:	2001      	movs	r0, #1
   2f8e4:	4381      	bics	r1, r0
   2f8e6:	5499      	strb	r1, [r3, r2]
	module->recved_size = 0;
   2f8e8:	68fb      	ldr	r3, [r7, #12]
   2f8ea:	2200      	movs	r2, #0
   2f8ec:	645a      	str	r2, [r3, #68]	; 0x44
	if (uri[0] == '/') {
   2f8ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2f8f0:	781b      	ldrb	r3, [r3, #0]
   2f8f2:	2b2f      	cmp	r3, #47	; 0x2f
   2f8f4:	d107      	bne.n	2f906 <http_client_send_request+0x16e>
		strcpy(module->req.uri, uri);
   2f8f6:	68fb      	ldr	r3, [r7, #12]
   2f8f8:	3370      	adds	r3, #112	; 0x70
   2f8fa:	6aba      	ldr	r2, [r7, #40]	; 0x28
   2f8fc:	0011      	movs	r1, r2
   2f8fe:	0018      	movs	r0, r3
   2f900:	4b5d      	ldr	r3, [pc, #372]	; (2fa78 <http_client_send_request+0x2e0>)
   2f902:	4798      	blx	r3
   2f904:	e00f      	b.n	2f926 <http_client_send_request+0x18e>
		} else {
		module->req.uri[0] = '/';
   2f906:	68fb      	ldr	r3, [r7, #12]
   2f908:	2270      	movs	r2, #112	; 0x70
   2f90a:	212f      	movs	r1, #47	; 0x2f
   2f90c:	5499      	strb	r1, [r3, r2]
		if (uri[0] != 0) {
   2f90e:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2f910:	781b      	ldrb	r3, [r3, #0]
   2f912:	2b00      	cmp	r3, #0
   2f914:	d007      	beq.n	2f926 <http_client_send_request+0x18e>
			strcpy(module->req.uri + 1, uri);
   2f916:	68fb      	ldr	r3, [r7, #12]
   2f918:	3370      	adds	r3, #112	; 0x70
   2f91a:	3301      	adds	r3, #1
   2f91c:	6aba      	ldr	r2, [r7, #40]	; 0x28
   2f91e:	0011      	movs	r1, r2
   2f920:	0018      	movs	r0, r3
   2f922:	4b55      	ldr	r3, [pc, #340]	; (2fa78 <http_client_send_request+0x2e0>)
   2f924:	4798      	blx	r3
		}
	}

	if (entity != NULL) {
   2f926:	683b      	ldr	r3, [r7, #0]
   2f928:	2b00      	cmp	r3, #0
   2f92a:	d007      	beq.n	2f93c <http_client_send_request+0x1a4>
		memcpy(&module->req.entity, entity, sizeof(struct http_entity));
   2f92c:	68fb      	ldr	r3, [r7, #12]
   2f92e:	33b0      	adds	r3, #176	; 0xb0
   2f930:	6839      	ldr	r1, [r7, #0]
   2f932:	2218      	movs	r2, #24
   2f934:	0018      	movs	r0, r3
   2f936:	4b51      	ldr	r3, [pc, #324]	; (2fa7c <http_client_send_request+0x2e4>)
   2f938:	4798      	blx	r3
   2f93a:	e006      	b.n	2f94a <http_client_send_request+0x1b2>
		} else {
		memset(&module->req.entity, 0, sizeof(struct http_entity));
   2f93c:	68fb      	ldr	r3, [r7, #12]
   2f93e:	33b0      	adds	r3, #176	; 0xb0
   2f940:	2218      	movs	r2, #24
   2f942:	2100      	movs	r1, #0
   2f944:	0018      	movs	r0, r3
   2f946:	4b4e      	ldr	r3, [pc, #312]	; (2fa80 <http_client_send_request+0x2e8>)
   2f948:	4798      	blx	r3
	}

	module->req.method = method;
   2f94a:	68fb      	ldr	r3, [r7, #12]
   2f94c:	1dfa      	adds	r2, r7, #7
   2f94e:	21c8      	movs	r1, #200	; 0xc8
   2f950:	7812      	ldrb	r2, [r2, #0]
   2f952:	545a      	strb	r2, [r3, r1]
	
	switch (module->req.state) {
   2f954:	68fb      	ldr	r3, [r7, #12]
   2f956:	6edb      	ldr	r3, [r3, #108]	; 0x6c
   2f958:	2b01      	cmp	r3, #1
   2f95a:	d003      	beq.n	2f964 <http_client_send_request+0x1cc>
   2f95c:	d316      	bcc.n	2f98c <http_client_send_request+0x1f4>
   2f95e:	2b02      	cmp	r3, #2
   2f960:	d004      	beq.n	2f96c <http_client_send_request+0x1d4>
   2f962:	e074      	b.n	2fa4e <http_client_send_request+0x2b6>
	case STATE_TRY_SOCK_CONNECT:
		if (!reconnect) {
   2f964:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   2f966:	2b00      	cmp	r3, #0
   2f968:	d100      	bne.n	2f96c <http_client_send_request+0x1d4>
   2f96a:	e073      	b.n	2fa54 <http_client_send_request+0x2bc>
			break; /* Currently try to connect to the same server. */
		}
	case STATE_SOCK_CONNECTED:
		if (!reconnect) {
   2f96c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   2f96e:	2b00      	cmp	r3, #0
   2f970:	d107      	bne.n	2f982 <http_client_send_request+0x1ea>
			module->req.state = STATE_REQ_SEND_HEADER;
   2f972:	68fb      	ldr	r3, [r7, #12]
   2f974:	2203      	movs	r2, #3
   2f976:	66da      	str	r2, [r3, #108]	; 0x6c
			/* Send request immediately. */
			_http_client_request(module);
   2f978:	68fb      	ldr	r3, [r7, #12]
   2f97a:	0018      	movs	r0, r3
   2f97c:	4b41      	ldr	r3, [pc, #260]	; (2fa84 <http_client_send_request+0x2ec>)
   2f97e:	4798      	blx	r3
			break;
   2f980:	e069      	b.n	2fa56 <http_client_send_request+0x2be>
		} else {
			/* Request to another peer. Disconnect and try connect again. */
			_http_client_clear_conn(module, 0);
   2f982:	68fb      	ldr	r3, [r7, #12]
   2f984:	2100      	movs	r1, #0
   2f986:	0018      	movs	r0, r3
   2f988:	4b3f      	ldr	r3, [pc, #252]	; (2fa88 <http_client_send_request+0x2f0>)
   2f98a:	4798      	blx	r3
		}
	case STATE_INIT:
		if (module->config.tls) {
   2f98c:	68fb      	ldr	r3, [r7, #12]
   2f98e:	2252      	movs	r2, #82	; 0x52
   2f990:	5c9b      	ldrb	r3, [r3, r2]
   2f992:	2b00      	cmp	r3, #0
   2f994:	d007      	beq.n	2f9a6 <http_client_send_request+0x20e>
			flag |= SOCKET_FLAGS_SSL;
   2f996:	2337      	movs	r3, #55	; 0x37
   2f998:	18fb      	adds	r3, r7, r3
   2f99a:	2237      	movs	r2, #55	; 0x37
   2f99c:	18ba      	adds	r2, r7, r2
   2f99e:	7812      	ldrb	r2, [r2, #0]
   2f9a0:	2101      	movs	r1, #1
   2f9a2:	430a      	orrs	r2, r1
   2f9a4:	701a      	strb	r2, [r3, #0]
		}
		module->sock = socket(AF_INET, SOCK_STREAM, flag);
   2f9a6:	2337      	movs	r3, #55	; 0x37
   2f9a8:	18fb      	adds	r3, r7, r3
   2f9aa:	781b      	ldrb	r3, [r3, #0]
   2f9ac:	001a      	movs	r2, r3
   2f9ae:	2101      	movs	r1, #1
   2f9b0:	2002      	movs	r0, #2
   2f9b2:	4b36      	ldr	r3, [pc, #216]	; (2fa8c <http_client_send_request+0x2f4>)
   2f9b4:	4798      	blx	r3
   2f9b6:	0003      	movs	r3, r0
   2f9b8:	001a      	movs	r2, r3
   2f9ba:	68fb      	ldr	r3, [r7, #12]
   2f9bc:	701a      	strb	r2, [r3, #0]
		if (module->sock >= 0) {
   2f9be:	68fb      	ldr	r3, [r7, #12]
   2f9c0:	781b      	ldrb	r3, [r3, #0]
   2f9c2:	b25b      	sxtb	r3, r3
   2f9c4:	2b00      	cmp	r3, #0
   2f9c6:	db3f      	blt.n	2fa48 <http_client_send_request+0x2b0>
			module_ref_inst[module->sock] = module;
   2f9c8:	68fb      	ldr	r3, [r7, #12]
   2f9ca:	781b      	ldrb	r3, [r3, #0]
   2f9cc:	b25b      	sxtb	r3, r3
   2f9ce:	001a      	movs	r2, r3
   2f9d0:	4b2f      	ldr	r3, [pc, #188]	; (2fa90 <http_client_send_request+0x2f8>)
   2f9d2:	0092      	lsls	r2, r2, #2
   2f9d4:	68f9      	ldr	r1, [r7, #12]
   2f9d6:	50d1      	str	r1, [r2, r3]
			if (_is_ip(module->host)) {
   2f9d8:	68fb      	ldr	r3, [r7, #12]
   2f9da:	3301      	adds	r3, #1
   2f9dc:	0018      	movs	r0, r3
   2f9de:	4b2d      	ldr	r3, [pc, #180]	; (2fa94 <http_client_send_request+0x2fc>)
   2f9e0:	4798      	blx	r3
   2f9e2:	1e03      	subs	r3, r0, #0
   2f9e4:	d027      	beq.n	2fa36 <http_client_send_request+0x29e>
				addr_in.sin_family = AF_INET;
   2f9e6:	2314      	movs	r3, #20
   2f9e8:	18fb      	adds	r3, r7, r3
   2f9ea:	2202      	movs	r2, #2
   2f9ec:	801a      	strh	r2, [r3, #0]
				addr_in.sin_port = _htons(module->config.port);
   2f9ee:	68fb      	ldr	r3, [r7, #12]
   2f9f0:	2250      	movs	r2, #80	; 0x50
   2f9f2:	5a9b      	ldrh	r3, [r3, r2]
   2f9f4:	021b      	lsls	r3, r3, #8
   2f9f6:	b21a      	sxth	r2, r3
   2f9f8:	68fb      	ldr	r3, [r7, #12]
   2f9fa:	2150      	movs	r1, #80	; 0x50
   2f9fc:	5a5b      	ldrh	r3, [r3, r1]
   2f9fe:	0a1b      	lsrs	r3, r3, #8
   2fa00:	b29b      	uxth	r3, r3
   2fa02:	b21b      	sxth	r3, r3
   2fa04:	4313      	orrs	r3, r2
   2fa06:	b21b      	sxth	r3, r3
   2fa08:	b29a      	uxth	r2, r3
   2fa0a:	2314      	movs	r3, #20
   2fa0c:	18fb      	adds	r3, r7, r3
   2fa0e:	805a      	strh	r2, [r3, #2]
				addr_in.sin_addr.s_addr = nmi_inet_addr((char *)module->host);
   2fa10:	68fb      	ldr	r3, [r7, #12]
   2fa12:	3301      	adds	r3, #1
   2fa14:	0018      	movs	r0, r3
   2fa16:	4b20      	ldr	r3, [pc, #128]	; (2fa98 <http_client_send_request+0x300>)
   2fa18:	4798      	blx	r3
   2fa1a:	0002      	movs	r2, r0
   2fa1c:	2314      	movs	r3, #20
   2fa1e:	18fb      	adds	r3, r7, r3
   2fa20:	605a      	str	r2, [r3, #4]
				connect(module->sock, (struct sockaddr *)&addr_in, sizeof(struct sockaddr_in));
   2fa22:	68fb      	ldr	r3, [r7, #12]
   2fa24:	781b      	ldrb	r3, [r3, #0]
   2fa26:	b25b      	sxtb	r3, r3
   2fa28:	2214      	movs	r2, #20
   2fa2a:	18b9      	adds	r1, r7, r2
   2fa2c:	2210      	movs	r2, #16
   2fa2e:	0018      	movs	r0, r3
   2fa30:	4b1a      	ldr	r3, [pc, #104]	; (2fa9c <http_client_send_request+0x304>)
   2fa32:	4798      	blx	r3
   2fa34:	e004      	b.n	2fa40 <http_client_send_request+0x2a8>
			} else {
				gethostbyname((uint8*)module->host);
   2fa36:	68fb      	ldr	r3, [r7, #12]
   2fa38:	3301      	adds	r3, #1
   2fa3a:	0018      	movs	r0, r3
   2fa3c:	4b18      	ldr	r3, [pc, #96]	; (2faa0 <http_client_send_request+0x308>)
   2fa3e:	4798      	blx	r3
			}
			module->req.state = STATE_TRY_SOCK_CONNECT;
   2fa40:	68fb      	ldr	r3, [r7, #12]
   2fa42:	2201      	movs	r2, #1
   2fa44:	66da      	str	r2, [r3, #108]	; 0x6c
		} else {
			return -ENOSPC;
		}
		break;
   2fa46:	e006      	b.n	2fa56 <http_client_send_request+0x2be>
			return -ENOSPC;
   2fa48:	231c      	movs	r3, #28
   2fa4a:	425b      	negs	r3, r3
   2fa4c:	e004      	b.n	2fa58 <http_client_send_request+0x2c0>
	default:
		/* STATE_TRY_REQ */
		/* STATE_WAIT_RESP */
		/* STATE_RECV_RESP */
		/* Session was busy. Try again later. */
		return -EAGAIN;
   2fa4e:	230b      	movs	r3, #11
   2fa50:	425b      	negs	r3, r3
   2fa52:	e001      	b.n	2fa58 <http_client_send_request+0x2c0>
			break; /* Currently try to connect to the same server. */
   2fa54:	46c0      	nop			; (mov r8, r8)
	}

	return 0;
   2fa56:	2300      	movs	r3, #0
}
   2fa58:	0018      	movs	r0, r3
   2fa5a:	46bd      	mov	sp, r7
   2fa5c:	b00e      	add	sp, #56	; 0x38
   2fa5e:	bdb0      	pop	{r4, r5, r7, pc}
   2fa60:	000380b0 	.word	0x000380b0
   2fa64:	000334dd 	.word	0x000334dd
   2fa68:	000380b8 	.word	0x000380b8
   2fa6c:	000334cf 	.word	0x000334cf
   2fa70:	000330cd 	.word	0x000330cd
   2fa74:	00033495 	.word	0x00033495
   2fa78:	00033483 	.word	0x00033483
   2fa7c:	000330e1 	.word	0x000330e1
   2fa80:	00033117 	.word	0x00033117
   2fa84:	0002fbf9 	.word	0x0002fbf9
   2fa88:	0002faa5 	.word	0x0002faa5
   2fa8c:	00023db5 	.word	0x00023db5
   2fa90:	20004190 	.word	0x20004190
   2fa94:	0002f701 	.word	0x0002f701
   2fa98:	00024501 	.word	0x00024501
   2fa9c:	00023fc9 	.word	0x00023fc9
   2faa0:	00024609 	.word	0x00024609

0002faa4 <_http_client_clear_conn>:

	return 0;
}

void _http_client_clear_conn(struct http_client_module *const module, int reason)
{
   2faa4:	b580      	push	{r7, lr}
   2faa6:	b086      	sub	sp, #24
   2faa8:	af00      	add	r7, sp, #0
   2faaa:	6078      	str	r0, [r7, #4]
   2faac:	6039      	str	r1, [r7, #0]
	union http_client_data data;

	if (module->req.entity.close) {
   2faae:	687b      	ldr	r3, [r7, #4]
   2fab0:	22c0      	movs	r2, #192	; 0xc0
   2fab2:	589b      	ldr	r3, [r3, r2]
   2fab4:	2b00      	cmp	r3, #0
   2fab6:	d007      	beq.n	2fac8 <_http_client_clear_conn+0x24>
		module->req.entity.close(module->req.entity.priv_data);
   2fab8:	687b      	ldr	r3, [r7, #4]
   2faba:	22c0      	movs	r2, #192	; 0xc0
   2fabc:	589b      	ldr	r3, [r3, r2]
   2fabe:	687a      	ldr	r2, [r7, #4]
   2fac0:	21c4      	movs	r1, #196	; 0xc4
   2fac2:	5852      	ldr	r2, [r2, r1]
   2fac4:	0010      	movs	r0, r2
   2fac6:	4798      	blx	r3
	}

	memset(&module->req.entity, 0, sizeof(struct http_entity));
   2fac8:	687b      	ldr	r3, [r7, #4]
   2faca:	33b0      	adds	r3, #176	; 0xb0
   2facc:	2218      	movs	r2, #24
   2face:	2100      	movs	r1, #0
   2fad0:	0018      	movs	r0, r3
   2fad2:	4b24      	ldr	r3, [pc, #144]	; (2fb64 <_http_client_clear_conn+0xc0>)
   2fad4:	4798      	blx	r3

	if (module->req.state >= STATE_TRY_SOCK_CONNECT) {
   2fad6:	687b      	ldr	r3, [r7, #4]
   2fad8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
   2fada:	2b00      	cmp	r3, #0
   2fadc:	d005      	beq.n	2faea <_http_client_clear_conn+0x46>
		close(module->sock);
   2fade:	687b      	ldr	r3, [r7, #4]
   2fae0:	781b      	ldrb	r3, [r3, #0]
   2fae2:	b25b      	sxtb	r3, r3
   2fae4:	0018      	movs	r0, r3
   2fae6:	4b20      	ldr	r3, [pc, #128]	; (2fb68 <_http_client_clear_conn+0xc4>)
   2fae8:	4798      	blx	r3
	}

	module_ref_inst[module->sock] = NULL;
   2faea:	687b      	ldr	r3, [r7, #4]
   2faec:	781b      	ldrb	r3, [r3, #0]
   2faee:	b25b      	sxtb	r3, r3
   2faf0:	001a      	movs	r2, r3
   2faf2:	4b1e      	ldr	r3, [pc, #120]	; (2fb6c <_http_client_clear_conn+0xc8>)
   2faf4:	0092      	lsls	r2, r2, #2
   2faf6:	2100      	movs	r1, #0
   2faf8:	50d1      	str	r1, [r2, r3]
	memset(&module->req, 0, sizeof(struct http_client_req));
   2fafa:	687b      	ldr	r3, [r7, #4]
   2fafc:	336c      	adds	r3, #108	; 0x6c
   2fafe:	226c      	movs	r2, #108	; 0x6c
   2fb00:	2100      	movs	r1, #0
   2fb02:	0018      	movs	r0, r3
   2fb04:	4b17      	ldr	r3, [pc, #92]	; (2fb64 <_http_client_clear_conn+0xc0>)
   2fb06:	4798      	blx	r3
	memset(&module->resp, 0, sizeof(struct http_client_resp));
   2fb08:	687b      	ldr	r3, [r7, #4]
   2fb0a:	33d8      	adds	r3, #216	; 0xd8
   2fb0c:	2210      	movs	r2, #16
   2fb0e:	2100      	movs	r1, #0
   2fb10:	0018      	movs	r0, r3
   2fb12:	4b14      	ldr	r3, [pc, #80]	; (2fb64 <_http_client_clear_conn+0xc0>)
   2fb14:	4798      	blx	r3
	module->req.state = STATE_INIT;
   2fb16:	687b      	ldr	r3, [r7, #4]
   2fb18:	2200      	movs	r2, #0
   2fb1a:	66da      	str	r2, [r3, #108]	; 0x6c
	module->resp.state = STATE_PARSE_HEADER;
   2fb1c:	687b      	ldr	r3, [r7, #4]
   2fb1e:	22d8      	movs	r2, #216	; 0xd8
   2fb20:	2100      	movs	r1, #0
   2fb22:	5099      	str	r1, [r3, r2]

	module->sending = 0;
   2fb24:	687b      	ldr	r3, [r7, #4]
   2fb26:	2241      	movs	r2, #65	; 0x41
   2fb28:	5c99      	ldrb	r1, [r3, r2]
   2fb2a:	2001      	movs	r0, #1
   2fb2c:	4381      	bics	r1, r0
   2fb2e:	5499      	strb	r1, [r3, r2]
	module->permanent = 0;
   2fb30:	687b      	ldr	r3, [r7, #4]
   2fb32:	2241      	movs	r2, #65	; 0x41
   2fb34:	5c99      	ldrb	r1, [r3, r2]
   2fb36:	2002      	movs	r0, #2
   2fb38:	4381      	bics	r1, r0
   2fb3a:	5499      	strb	r1, [r3, r2]
	data.disconnected.reason = reason;
   2fb3c:	230c      	movs	r3, #12
   2fb3e:	18fb      	adds	r3, r7, r3
   2fb40:	683a      	ldr	r2, [r7, #0]
   2fb42:	601a      	str	r2, [r3, #0]
	if (module->cb) {
   2fb44:	687b      	ldr	r3, [r7, #4]
   2fb46:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   2fb48:	2b00      	cmp	r3, #0
   2fb4a:	d006      	beq.n	2fb5a <_http_client_clear_conn+0xb6>
		module->cb(module, HTTP_CLIENT_CALLBACK_DISCONNECTED, &data);
   2fb4c:	687b      	ldr	r3, [r7, #4]
   2fb4e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   2fb50:	220c      	movs	r2, #12
   2fb52:	18ba      	adds	r2, r7, r2
   2fb54:	6878      	ldr	r0, [r7, #4]
   2fb56:	2104      	movs	r1, #4
   2fb58:	4798      	blx	r3
	}
}
   2fb5a:	46c0      	nop			; (mov r8, r8)
   2fb5c:	46bd      	mov	sp, r7
   2fb5e:	b006      	add	sp, #24
   2fb60:	bd80      	pop	{r7, pc}
   2fb62:	46c0      	nop			; (mov r8, r8)
   2fb64:	00033117 	.word	0x00033117
   2fb68:	000243c1 	.word	0x000243c1
   2fb6c:	20004190 	.word	0x20004190

0002fb70 <_http_client_send_wait>:

int _http_client_send_wait(void *_module, char *buffer, size_t buffer_len)
{
   2fb70:	b590      	push	{r4, r7, lr}
   2fb72:	b087      	sub	sp, #28
   2fb74:	af00      	add	r7, sp, #0
   2fb76:	60f8      	str	r0, [r7, #12]
   2fb78:	60b9      	str	r1, [r7, #8]
   2fb7a:	607a      	str	r2, [r7, #4]
	int result;
	struct http_client_module *const module = (struct http_client_module *const)_module;
   2fb7c:	68fb      	ldr	r3, [r7, #12]
   2fb7e:	617b      	str	r3, [r7, #20]
	
	module->sending = 1;
   2fb80:	697b      	ldr	r3, [r7, #20]
   2fb82:	2241      	movs	r2, #65	; 0x41
   2fb84:	5c99      	ldrb	r1, [r3, r2]
   2fb86:	2001      	movs	r0, #1
   2fb88:	4301      	orrs	r1, r0
   2fb8a:	5499      	strb	r1, [r3, r2]

	if ((result = send(module->sock, (void*)buffer, buffer_len, 0)) < 0) {
   2fb8c:	697b      	ldr	r3, [r7, #20]
   2fb8e:	2000      	movs	r0, #0
   2fb90:	5618      	ldrsb	r0, [r3, r0]
   2fb92:	687b      	ldr	r3, [r7, #4]
   2fb94:	b29a      	uxth	r2, r3
   2fb96:	68b9      	ldr	r1, [r7, #8]
   2fb98:	2300      	movs	r3, #0
   2fb9a:	4c14      	ldr	r4, [pc, #80]	; (2fbec <_http_client_send_wait+0x7c>)
   2fb9c:	47a0      	blx	r4
   2fb9e:	0003      	movs	r3, r0
   2fba0:	613b      	str	r3, [r7, #16]
   2fba2:	693b      	ldr	r3, [r7, #16]
   2fba4:	2b00      	cmp	r3, #0
   2fba6:	da0f      	bge.n	2fbc8 <_http_client_send_wait+0x58>
		module->sending = 0;
   2fba8:	697b      	ldr	r3, [r7, #20]
   2fbaa:	2241      	movs	r2, #65	; 0x41
   2fbac:	5c99      	ldrb	r1, [r3, r2]
   2fbae:	2001      	movs	r0, #1
   2fbb0:	4381      	bics	r1, r0
   2fbb2:	5499      	strb	r1, [r3, r2]
		return result;
   2fbb4:	693b      	ldr	r3, [r7, #16]
   2fbb6:	e014      	b.n	2fbe2 <_http_client_send_wait+0x72>
	}
	while (module->sending == 1 && module->req.state > STATE_SOCK_CONNECTED){
		m2m_wifi_handle_events(NULL);
   2fbb8:	2000      	movs	r0, #0
   2fbba:	4b0d      	ldr	r3, [pc, #52]	; (2fbf0 <_http_client_send_wait+0x80>)
   2fbbc:	4798      	blx	r3
		sw_timer_task(module->config.timer_inst);
   2fbbe:	697b      	ldr	r3, [r7, #20]
   2fbc0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   2fbc2:	0018      	movs	r0, r3
   2fbc4:	4b0b      	ldr	r3, [pc, #44]	; (2fbf4 <_http_client_send_wait+0x84>)
   2fbc6:	4798      	blx	r3
	while (module->sending == 1 && module->req.state > STATE_SOCK_CONNECTED){
   2fbc8:	697b      	ldr	r3, [r7, #20]
   2fbca:	2241      	movs	r2, #65	; 0x41
   2fbcc:	5c9b      	ldrb	r3, [r3, r2]
   2fbce:	2201      	movs	r2, #1
   2fbd0:	4013      	ands	r3, r2
   2fbd2:	b2db      	uxtb	r3, r3
   2fbd4:	2b00      	cmp	r3, #0
   2fbd6:	d003      	beq.n	2fbe0 <_http_client_send_wait+0x70>
   2fbd8:	697b      	ldr	r3, [r7, #20]
   2fbda:	6edb      	ldr	r3, [r3, #108]	; 0x6c
   2fbdc:	2b02      	cmp	r3, #2
   2fbde:	d8eb      	bhi.n	2fbb8 <_http_client_send_wait+0x48>
	}

	return 0;
   2fbe0:	2300      	movs	r3, #0
}
   2fbe2:	0018      	movs	r0, r3
   2fbe4:	46bd      	mov	sp, r7
   2fbe6:	b007      	add	sp, #28
   2fbe8:	bd90      	pop	{r4, r7, pc}
   2fbea:	46c0      	nop			; (mov r8, r8)
   2fbec:	000240dd 	.word	0x000240dd
   2fbf0:	00020789 	.word	0x00020789
   2fbf4:	00030e7d 	.word	0x00030e7d

0002fbf8 <_http_client_request>:

void _http_client_request(struct http_client_module *const module)
{
   2fbf8:	b5f0      	push	{r4, r5, r6, r7, lr}
   2fbfa:	46c6      	mov	lr, r8
   2fbfc:	b500      	push	{lr}
   2fbfe:	b0a0      	sub	sp, #128	; 0x80
   2fc00:	af02      	add	r7, sp, #8
   2fc02:	61f8      	str	r0, [r7, #28]
   2fc04:	4668      	mov	r0, sp
   2fc06:	61b8      	str	r0, [r7, #24]
	struct stream_writer writer;
	int size;
	int result;
	char length[11];
	char *ptr;
	const char CH_LUT[] = {'0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'a', 'b', 'c', 'd', 'e', 'f'};
   2fc08:	2318      	movs	r3, #24
   2fc0a:	2218      	movs	r2, #24
   2fc0c:	18ba      	adds	r2, r7, r2
   2fc0e:	18d0      	adds	r0, r2, r3
   2fc10:	4bbd      	ldr	r3, [pc, #756]	; (2ff08 <_http_client_request+0x310>)
   2fc12:	469c      	mov	ip, r3
   2fc14:	4663      	mov	r3, ip
   2fc16:	cb16      	ldmia	r3!, {r1, r2, r4}
   2fc18:	c016      	stmia	r0!, {r1, r2, r4}
   2fc1a:	469c      	mov	ip, r3
   2fc1c:	4663      	mov	r3, ip
   2fc1e:	681b      	ldr	r3, [r3, #0]
   2fc20:	469c      	mov	ip, r3
   2fc22:	4663      	mov	r3, ip
   2fc24:	6003      	str	r3, [r0, #0]
	struct http_entity * entity;
	union http_client_data data;
#define HTTP_CHUNKED_MAX_LENGTH 3 /*TCP MTU is 1400(0x578) */
	char buffer[module->config.send_buffer_size];
   2fc26:	69f8      	ldr	r0, [r7, #28]
   2fc28:	6e40      	ldr	r0, [r0, #100]	; 0x64
   2fc2a:	4684      	mov	ip, r0
   2fc2c:	2301      	movs	r3, #1
   2fc2e:	425b      	negs	r3, r3
   2fc30:	4698      	mov	r8, r3
   2fc32:	44c4      	add	ip, r8
   2fc34:	4663      	mov	r3, ip
   2fc36:	66fb      	str	r3, [r7, #108]	; 0x6c
   2fc38:	6038      	str	r0, [r7, #0]
   2fc3a:	2300      	movs	r3, #0
   2fc3c:	607b      	str	r3, [r7, #4]
   2fc3e:	6839      	ldr	r1, [r7, #0]
   2fc40:	687a      	ldr	r2, [r7, #4]
   2fc42:	000b      	movs	r3, r1
   2fc44:	0f5b      	lsrs	r3, r3, #29
   2fc46:	469c      	mov	ip, r3
   2fc48:	0013      	movs	r3, r2
   2fc4a:	00db      	lsls	r3, r3, #3
   2fc4c:	617b      	str	r3, [r7, #20]
   2fc4e:	4663      	mov	r3, ip
   2fc50:	697c      	ldr	r4, [r7, #20]
   2fc52:	431c      	orrs	r4, r3
   2fc54:	617c      	str	r4, [r7, #20]
   2fc56:	000b      	movs	r3, r1
   2fc58:	00db      	lsls	r3, r3, #3
   2fc5a:	613b      	str	r3, [r7, #16]
   2fc5c:	0005      	movs	r5, r0
   2fc5e:	2200      	movs	r2, #0
   2fc60:	0016      	movs	r6, r2
   2fc62:	0f6a      	lsrs	r2, r5, #29
   2fc64:	00f3      	lsls	r3, r6, #3
   2fc66:	60fb      	str	r3, [r7, #12]
   2fc68:	68fb      	ldr	r3, [r7, #12]
   2fc6a:	4313      	orrs	r3, r2
   2fc6c:	60fb      	str	r3, [r7, #12]
   2fc6e:	00eb      	lsls	r3, r5, #3
   2fc70:	60bb      	str	r3, [r7, #8]
   2fc72:	1dc3      	adds	r3, r0, #7
   2fc74:	08db      	lsrs	r3, r3, #3
   2fc76:	00db      	lsls	r3, r3, #3
   2fc78:	466a      	mov	r2, sp
   2fc7a:	1ad3      	subs	r3, r2, r3
   2fc7c:	469d      	mov	sp, r3
   2fc7e:	ab02      	add	r3, sp, #8
   2fc80:	3300      	adds	r3, #0
   2fc82:	66bb      	str	r3, [r7, #104]	; 0x68

	if (module == NULL) {
   2fc84:	69fb      	ldr	r3, [r7, #28]
   2fc86:	2b00      	cmp	r3, #0
   2fc88:	d100      	bne.n	2fc8c <_http_client_request+0x94>
   2fc8a:	e346      	b.n	3031a <_http_client_request+0x722>
		return;
	}

	if (module->sending != 0) {
   2fc8c:	69fb      	ldr	r3, [r7, #28]
   2fc8e:	2241      	movs	r2, #65	; 0x41
   2fc90:	5c9b      	ldrb	r3, [r3, r2]
   2fc92:	2201      	movs	r2, #1
   2fc94:	4013      	ands	r3, r2
   2fc96:	b2db      	uxtb	r3, r3
   2fc98:	2b00      	cmp	r3, #0
   2fc9a:	d000      	beq.n	2fc9e <_http_client_request+0xa6>
   2fc9c:	e33f      	b.n	3031e <_http_client_request+0x726>
		/* Device is busy. */
		return;
	}

	entity = &module->req.entity;
   2fc9e:	69fb      	ldr	r3, [r7, #28]
   2fca0:	33b0      	adds	r3, #176	; 0xb0
   2fca2:	667b      	str	r3, [r7, #100]	; 0x64

	switch (module->req.state) {
   2fca4:	69fb      	ldr	r3, [r7, #28]
   2fca6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
   2fca8:	2b03      	cmp	r3, #3
   2fcaa:	d003      	beq.n	2fcb4 <_http_client_request+0xbc>
   2fcac:	2b04      	cmp	r3, #4
   2fcae:	d100      	bne.n	2fcb2 <_http_client_request+0xba>
   2fcb0:	e1b3      	b.n	3001a <_http_client_request+0x422>
		}

		break;
	default:
		/* Invalid status. */
		break;
   2fcb2:	e32f      	b.n	30314 <_http_client_request+0x71c>
		module->req.content_length = 0;
   2fcb4:	69fb      	ldr	r3, [r7, #28]
   2fcb6:	22cc      	movs	r2, #204	; 0xcc
   2fcb8:	2100      	movs	r1, #0
   2fcba:	5099      	str	r1, [r3, r2]
		module->req.sent_length = 0;
   2fcbc:	69fb      	ldr	r3, [r7, #28]
   2fcbe:	22d0      	movs	r2, #208	; 0xd0
   2fcc0:	2100      	movs	r1, #0
   2fcc2:	5099      	str	r1, [r3, r2]
		stream_writer_init(&writer, buffer, module->config.send_buffer_size, _http_client_send_wait, (void *)module);
   2fcc4:	6eb9      	ldr	r1, [r7, #104]	; 0x68
   2fcc6:	69fb      	ldr	r3, [r7, #28]
   2fcc8:	6e5a      	ldr	r2, [r3, #100]	; 0x64
   2fcca:	4c90      	ldr	r4, [pc, #576]	; (2ff0c <_http_client_request+0x314>)
   2fccc:	2334      	movs	r3, #52	; 0x34
   2fcce:	2018      	movs	r0, #24
   2fcd0:	1838      	adds	r0, r7, r0
   2fcd2:	18c0      	adds	r0, r0, r3
   2fcd4:	69fb      	ldr	r3, [r7, #28]
   2fcd6:	9300      	str	r3, [sp, #0]
   2fcd8:	0023      	movs	r3, r4
   2fcda:	4c8d      	ldr	r4, [pc, #564]	; (2ff10 <_http_client_request+0x318>)
   2fcdc:	47a0      	blx	r4
		if (module->req.method == HTTP_METHOD_GET) {
   2fcde:	69fb      	ldr	r3, [r7, #28]
   2fce0:	22c8      	movs	r2, #200	; 0xc8
   2fce2:	5c9b      	ldrb	r3, [r3, r2]
   2fce4:	2b01      	cmp	r3, #1
   2fce6:	d10a      	bne.n	2fcfe <_http_client_request+0x106>
			stream_writer_send_buffer(&writer, "GET ", 4);
   2fce8:	498a      	ldr	r1, [pc, #552]	; (2ff14 <_http_client_request+0x31c>)
   2fcea:	2334      	movs	r3, #52	; 0x34
   2fcec:	2218      	movs	r2, #24
   2fcee:	4694      	mov	ip, r2
   2fcf0:	44bc      	add	ip, r7
   2fcf2:	4463      	add	r3, ip
   2fcf4:	2204      	movs	r2, #4
   2fcf6:	0018      	movs	r0, r3
   2fcf8:	4b87      	ldr	r3, [pc, #540]	; (2ff18 <_http_client_request+0x320>)
   2fcfa:	4798      	blx	r3
   2fcfc:	e04e      	b.n	2fd9c <_http_client_request+0x1a4>
		} else if (module->req.method == HTTP_METHOD_POST) {
   2fcfe:	69fb      	ldr	r3, [r7, #28]
   2fd00:	22c8      	movs	r2, #200	; 0xc8
   2fd02:	5c9b      	ldrb	r3, [r3, r2]
   2fd04:	2b02      	cmp	r3, #2
   2fd06:	d10a      	bne.n	2fd1e <_http_client_request+0x126>
			stream_writer_send_buffer(&writer, "POST ", 5);
   2fd08:	4984      	ldr	r1, [pc, #528]	; (2ff1c <_http_client_request+0x324>)
   2fd0a:	2334      	movs	r3, #52	; 0x34
   2fd0c:	2218      	movs	r2, #24
   2fd0e:	4694      	mov	ip, r2
   2fd10:	44bc      	add	ip, r7
   2fd12:	4463      	add	r3, ip
   2fd14:	2205      	movs	r2, #5
   2fd16:	0018      	movs	r0, r3
   2fd18:	4b7f      	ldr	r3, [pc, #508]	; (2ff18 <_http_client_request+0x320>)
   2fd1a:	4798      	blx	r3
   2fd1c:	e03e      	b.n	2fd9c <_http_client_request+0x1a4>
		} else if (module->req.method == HTTP_METHOD_DELETE) {
   2fd1e:	69fb      	ldr	r3, [r7, #28]
   2fd20:	22c8      	movs	r2, #200	; 0xc8
   2fd22:	5c9b      	ldrb	r3, [r3, r2]
   2fd24:	2b03      	cmp	r3, #3
   2fd26:	d10a      	bne.n	2fd3e <_http_client_request+0x146>
			stream_writer_send_buffer(&writer, "DELETE ", 7);
   2fd28:	497d      	ldr	r1, [pc, #500]	; (2ff20 <_http_client_request+0x328>)
   2fd2a:	2334      	movs	r3, #52	; 0x34
   2fd2c:	2218      	movs	r2, #24
   2fd2e:	4694      	mov	ip, r2
   2fd30:	44bc      	add	ip, r7
   2fd32:	4463      	add	r3, ip
   2fd34:	2207      	movs	r2, #7
   2fd36:	0018      	movs	r0, r3
   2fd38:	4b77      	ldr	r3, [pc, #476]	; (2ff18 <_http_client_request+0x320>)
   2fd3a:	4798      	blx	r3
   2fd3c:	e02e      	b.n	2fd9c <_http_client_request+0x1a4>
		} else if (module->req.method == HTTP_METHOD_PUT) {
   2fd3e:	69fb      	ldr	r3, [r7, #28]
   2fd40:	22c8      	movs	r2, #200	; 0xc8
   2fd42:	5c9b      	ldrb	r3, [r3, r2]
   2fd44:	2b04      	cmp	r3, #4
   2fd46:	d10a      	bne.n	2fd5e <_http_client_request+0x166>
			stream_writer_send_buffer(&writer, "PUT ", 4);
   2fd48:	4976      	ldr	r1, [pc, #472]	; (2ff24 <_http_client_request+0x32c>)
   2fd4a:	2334      	movs	r3, #52	; 0x34
   2fd4c:	2218      	movs	r2, #24
   2fd4e:	4694      	mov	ip, r2
   2fd50:	44bc      	add	ip, r7
   2fd52:	4463      	add	r3, ip
   2fd54:	2204      	movs	r2, #4
   2fd56:	0018      	movs	r0, r3
   2fd58:	4b6f      	ldr	r3, [pc, #444]	; (2ff18 <_http_client_request+0x320>)
   2fd5a:	4798      	blx	r3
   2fd5c:	e01e      	b.n	2fd9c <_http_client_request+0x1a4>
		} else if (module->req.method == HTTP_METHOD_OPTIONS) {
   2fd5e:	69fb      	ldr	r3, [r7, #28]
   2fd60:	22c8      	movs	r2, #200	; 0xc8
   2fd62:	5c9b      	ldrb	r3, [r3, r2]
   2fd64:	2b05      	cmp	r3, #5
   2fd66:	d10a      	bne.n	2fd7e <_http_client_request+0x186>
			stream_writer_send_buffer(&writer, "OPTIONS ", 8);
   2fd68:	496f      	ldr	r1, [pc, #444]	; (2ff28 <_http_client_request+0x330>)
   2fd6a:	2334      	movs	r3, #52	; 0x34
   2fd6c:	2218      	movs	r2, #24
   2fd6e:	4694      	mov	ip, r2
   2fd70:	44bc      	add	ip, r7
   2fd72:	4463      	add	r3, ip
   2fd74:	2208      	movs	r2, #8
   2fd76:	0018      	movs	r0, r3
   2fd78:	4b67      	ldr	r3, [pc, #412]	; (2ff18 <_http_client_request+0x320>)
   2fd7a:	4798      	blx	r3
   2fd7c:	e00e      	b.n	2fd9c <_http_client_request+0x1a4>
		} else if (module->req.method == HTTP_METHOD_HEAD) {
   2fd7e:	69fb      	ldr	r3, [r7, #28]
   2fd80:	22c8      	movs	r2, #200	; 0xc8
   2fd82:	5c9b      	ldrb	r3, [r3, r2]
   2fd84:	2b06      	cmp	r3, #6
   2fd86:	d109      	bne.n	2fd9c <_http_client_request+0x1a4>
			stream_writer_send_buffer(&writer, "HEAD ", 5);
   2fd88:	4968      	ldr	r1, [pc, #416]	; (2ff2c <_http_client_request+0x334>)
   2fd8a:	2334      	movs	r3, #52	; 0x34
   2fd8c:	2218      	movs	r2, #24
   2fd8e:	4694      	mov	ip, r2
   2fd90:	44bc      	add	ip, r7
   2fd92:	4463      	add	r3, ip
   2fd94:	2205      	movs	r2, #5
   2fd96:	0018      	movs	r0, r3
   2fd98:	4b5f      	ldr	r3, [pc, #380]	; (2ff18 <_http_client_request+0x320>)
   2fd9a:	4798      	blx	r3
		stream_writer_send_buffer(&writer, module->req.uri, strlen(module->req.uri));
   2fd9c:	69fb      	ldr	r3, [r7, #28]
   2fd9e:	3370      	adds	r3, #112	; 0x70
   2fda0:	001c      	movs	r4, r3
   2fda2:	69fb      	ldr	r3, [r7, #28]
   2fda4:	3370      	adds	r3, #112	; 0x70
   2fda6:	0018      	movs	r0, r3
   2fda8:	4b61      	ldr	r3, [pc, #388]	; (2ff30 <_http_client_request+0x338>)
   2fdaa:	4798      	blx	r3
   2fdac:	0002      	movs	r2, r0
   2fdae:	2334      	movs	r3, #52	; 0x34
   2fdb0:	2118      	movs	r1, #24
   2fdb2:	468c      	mov	ip, r1
   2fdb4:	44bc      	add	ip, r7
   2fdb6:	4463      	add	r3, ip
   2fdb8:	0021      	movs	r1, r4
   2fdba:	0018      	movs	r0, r3
   2fdbc:	4b56      	ldr	r3, [pc, #344]	; (2ff18 <_http_client_request+0x320>)
   2fdbe:	4798      	blx	r3
		stream_writer_send_buffer(&writer, " "HTTP_PROTO_NAME"\r\n", strlen(" "HTTP_PROTO_NAME"\r\n"));
   2fdc0:	495c      	ldr	r1, [pc, #368]	; (2ff34 <_http_client_request+0x33c>)
   2fdc2:	2334      	movs	r3, #52	; 0x34
   2fdc4:	2218      	movs	r2, #24
   2fdc6:	4694      	mov	ip, r2
   2fdc8:	44bc      	add	ip, r7
   2fdca:	4463      	add	r3, ip
   2fdcc:	220b      	movs	r2, #11
   2fdce:	0018      	movs	r0, r3
   2fdd0:	4b51      	ldr	r3, [pc, #324]	; (2ff18 <_http_client_request+0x320>)
   2fdd2:	4798      	blx	r3
		stream_writer_send_buffer(&writer, "User-Agent: ", strlen("User-agent: "));
   2fdd4:	4958      	ldr	r1, [pc, #352]	; (2ff38 <_http_client_request+0x340>)
   2fdd6:	2334      	movs	r3, #52	; 0x34
   2fdd8:	2218      	movs	r2, #24
   2fdda:	4694      	mov	ip, r2
   2fddc:	44bc      	add	ip, r7
   2fdde:	4463      	add	r3, ip
   2fde0:	220c      	movs	r2, #12
   2fde2:	0018      	movs	r0, r3
   2fde4:	4b4c      	ldr	r3, [pc, #304]	; (2ff18 <_http_client_request+0x320>)
   2fde6:	4798      	blx	r3
		stream_writer_send_buffer(&writer, (char *)module->config.user_agent, strlen(module->config.user_agent));
   2fde8:	69fb      	ldr	r3, [r7, #28]
   2fdea:	6e9c      	ldr	r4, [r3, #104]	; 0x68
   2fdec:	69fb      	ldr	r3, [r7, #28]
   2fdee:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   2fdf0:	0018      	movs	r0, r3
   2fdf2:	4b4f      	ldr	r3, [pc, #316]	; (2ff30 <_http_client_request+0x338>)
   2fdf4:	4798      	blx	r3
   2fdf6:	0002      	movs	r2, r0
   2fdf8:	2334      	movs	r3, #52	; 0x34
   2fdfa:	2118      	movs	r1, #24
   2fdfc:	468c      	mov	ip, r1
   2fdfe:	44bc      	add	ip, r7
   2fe00:	4463      	add	r3, ip
   2fe02:	0021      	movs	r1, r4
   2fe04:	0018      	movs	r0, r3
   2fe06:	4b44      	ldr	r3, [pc, #272]	; (2ff18 <_http_client_request+0x320>)
   2fe08:	4798      	blx	r3
		stream_writer_send_buffer(&writer, "\r\n", strlen("\r\n"));
   2fe0a:	494c      	ldr	r1, [pc, #304]	; (2ff3c <_http_client_request+0x344>)
   2fe0c:	2334      	movs	r3, #52	; 0x34
   2fe0e:	2218      	movs	r2, #24
   2fe10:	4694      	mov	ip, r2
   2fe12:	44bc      	add	ip, r7
   2fe14:	4463      	add	r3, ip
   2fe16:	2202      	movs	r2, #2
   2fe18:	0018      	movs	r0, r3
   2fe1a:	4b3f      	ldr	r3, [pc, #252]	; (2ff18 <_http_client_request+0x320>)
   2fe1c:	4798      	blx	r3
		stream_writer_send_buffer(&writer, "Host: ", strlen("Host: "));
   2fe1e:	4948      	ldr	r1, [pc, #288]	; (2ff40 <_http_client_request+0x348>)
   2fe20:	2334      	movs	r3, #52	; 0x34
   2fe22:	2218      	movs	r2, #24
   2fe24:	4694      	mov	ip, r2
   2fe26:	44bc      	add	ip, r7
   2fe28:	4463      	add	r3, ip
   2fe2a:	2206      	movs	r2, #6
   2fe2c:	0018      	movs	r0, r3
   2fe2e:	4b3a      	ldr	r3, [pc, #232]	; (2ff18 <_http_client_request+0x320>)
   2fe30:	4798      	blx	r3
		stream_writer_send_buffer(&writer, module->host, strlen(module->host));
   2fe32:	69fb      	ldr	r3, [r7, #28]
   2fe34:	1c5c      	adds	r4, r3, #1
   2fe36:	69fb      	ldr	r3, [r7, #28]
   2fe38:	3301      	adds	r3, #1
   2fe3a:	0018      	movs	r0, r3
   2fe3c:	4b3c      	ldr	r3, [pc, #240]	; (2ff30 <_http_client_request+0x338>)
   2fe3e:	4798      	blx	r3
   2fe40:	0002      	movs	r2, r0
   2fe42:	2334      	movs	r3, #52	; 0x34
   2fe44:	2118      	movs	r1, #24
   2fe46:	468c      	mov	ip, r1
   2fe48:	44bc      	add	ip, r7
   2fe4a:	4463      	add	r3, ip
   2fe4c:	0021      	movs	r1, r4
   2fe4e:	0018      	movs	r0, r3
   2fe50:	4b31      	ldr	r3, [pc, #196]	; (2ff18 <_http_client_request+0x320>)
   2fe52:	4798      	blx	r3
		stream_writer_send_buffer(&writer, "\r\n", strlen("\r\n"));
   2fe54:	4939      	ldr	r1, [pc, #228]	; (2ff3c <_http_client_request+0x344>)
   2fe56:	2334      	movs	r3, #52	; 0x34
   2fe58:	2218      	movs	r2, #24
   2fe5a:	4694      	mov	ip, r2
   2fe5c:	44bc      	add	ip, r7
   2fe5e:	4463      	add	r3, ip
   2fe60:	2202      	movs	r2, #2
   2fe62:	0018      	movs	r0, r3
   2fe64:	4b2c      	ldr	r3, [pc, #176]	; (2ff18 <_http_client_request+0x320>)
   2fe66:	4798      	blx	r3
		stream_writer_send_buffer(&writer, "Connection: Keep-Alive\r\n", strlen("Connection: Keep-Alive\r\n"));
   2fe68:	4936      	ldr	r1, [pc, #216]	; (2ff44 <_http_client_request+0x34c>)
   2fe6a:	2334      	movs	r3, #52	; 0x34
   2fe6c:	2218      	movs	r2, #24
   2fe6e:	4694      	mov	ip, r2
   2fe70:	44bc      	add	ip, r7
   2fe72:	4463      	add	r3, ip
   2fe74:	2218      	movs	r2, #24
   2fe76:	0018      	movs	r0, r3
   2fe78:	4b27      	ldr	r3, [pc, #156]	; (2ff18 <_http_client_request+0x320>)
   2fe7a:	4798      	blx	r3
		stream_writer_send_buffer(&writer, "Accept-Encoding: \r\n", strlen("Accept-Encoding: \r\n"));
   2fe7c:	4932      	ldr	r1, [pc, #200]	; (2ff48 <_http_client_request+0x350>)
   2fe7e:	2334      	movs	r3, #52	; 0x34
   2fe80:	2218      	movs	r2, #24
   2fe82:	4694      	mov	ip, r2
   2fe84:	44bc      	add	ip, r7
   2fe86:	4463      	add	r3, ip
   2fe88:	2213      	movs	r2, #19
   2fe8a:	0018      	movs	r0, r3
   2fe8c:	4b22      	ldr	r3, [pc, #136]	; (2ff18 <_http_client_request+0x320>)
   2fe8e:	4798      	blx	r3
		stream_writer_send_buffer(&writer, "Accept-Charset: utf-8\r\n", strlen("Accept-Charset: utf-8\r\n"));
   2fe90:	492e      	ldr	r1, [pc, #184]	; (2ff4c <_http_client_request+0x354>)
   2fe92:	2334      	movs	r3, #52	; 0x34
   2fe94:	2218      	movs	r2, #24
   2fe96:	4694      	mov	ip, r2
   2fe98:	44bc      	add	ip, r7
   2fe9a:	4463      	add	r3, ip
   2fe9c:	2217      	movs	r2, #23
   2fe9e:	0018      	movs	r0, r3
   2fea0:	4b1d      	ldr	r3, [pc, #116]	; (2ff18 <_http_client_request+0x320>)
   2fea2:	4798      	blx	r3
		if (entity->read != NULL) {
   2fea4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   2fea6:	68db      	ldr	r3, [r3, #12]
   2fea8:	2b00      	cmp	r3, #0
   2feaa:	d100      	bne.n	2feae <_http_client_request+0x2b6>
   2feac:	e088      	b.n	2ffc0 <_http_client_request+0x3c8>
			if (entity->is_chunked) {
   2feae:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   2feb0:	781b      	ldrb	r3, [r3, #0]
   2feb2:	2b00      	cmp	r3, #0
   2feb4:	d00f      	beq.n	2fed6 <_http_client_request+0x2de>
				module->req.content_length = -1;
   2feb6:	69fb      	ldr	r3, [r7, #28]
   2feb8:	21cc      	movs	r1, #204	; 0xcc
   2feba:	2201      	movs	r2, #1
   2febc:	4252      	negs	r2, r2
   2febe:	505a      	str	r2, [r3, r1]
				stream_writer_send_buffer(&writer, "Transfer-Encoding: chunked\r\n", strlen("Transfer-Encoding: chunked\r\n"));
   2fec0:	4923      	ldr	r1, [pc, #140]	; (2ff50 <_http_client_request+0x358>)
   2fec2:	2334      	movs	r3, #52	; 0x34
   2fec4:	2218      	movs	r2, #24
   2fec6:	4694      	mov	ip, r2
   2fec8:	44bc      	add	ip, r7
   2feca:	4463      	add	r3, ip
   2fecc:	221c      	movs	r2, #28
   2fece:	0018      	movs	r0, r3
   2fed0:	4b11      	ldr	r3, [pc, #68]	; (2ff18 <_http_client_request+0x320>)
   2fed2:	4798      	blx	r3
   2fed4:	e074      	b.n	2ffc0 <_http_client_request+0x3c8>
			} else if(entity->get_contents_length) {
   2fed6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   2fed8:	689b      	ldr	r3, [r3, #8]
   2feda:	2b00      	cmp	r3, #0
   2fedc:	d070      	beq.n	2ffc0 <_http_client_request+0x3c8>
				module->req.content_length = entity->get_contents_length(entity->priv_data);
   2fede:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   2fee0:	689a      	ldr	r2, [r3, #8]
   2fee2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   2fee4:	695b      	ldr	r3, [r3, #20]
   2fee6:	0018      	movs	r0, r3
   2fee8:	4790      	blx	r2
   2feea:	0001      	movs	r1, r0
   2feec:	69fb      	ldr	r3, [r7, #28]
   2feee:	22cc      	movs	r2, #204	; 0xcc
   2fef0:	5099      	str	r1, [r3, r2]
				if (module->req.content_length < 0) {
   2fef2:	69fb      	ldr	r3, [r7, #28]
   2fef4:	22cc      	movs	r2, #204	; 0xcc
   2fef6:	589b      	ldr	r3, [r3, r2]
   2fef8:	2b00      	cmp	r3, #0
   2fefa:	da2b      	bge.n	2ff54 <_http_client_request+0x35c>
					module->req.content_length = 0;
   2fefc:	69fb      	ldr	r3, [r7, #28]
   2fefe:	22cc      	movs	r2, #204	; 0xcc
   2ff00:	2100      	movs	r1, #0
   2ff02:	5099      	str	r1, [r3, r2]
   2ff04:	e05c      	b.n	2ffc0 <_http_client_request+0x3c8>
   2ff06:	46c0      	nop			; (mov r8, r8)
   2ff08:	000381a0 	.word	0x000381a0
   2ff0c:	0002fb71 	.word	0x0002fb71
   2ff10:	00030ad9 	.word	0x00030ad9
   2ff14:	000380c4 	.word	0x000380c4
   2ff18:	00030b59 	.word	0x00030b59
   2ff1c:	000380cc 	.word	0x000380cc
   2ff20:	000380d4 	.word	0x000380d4
   2ff24:	000380dc 	.word	0x000380dc
   2ff28:	000380e4 	.word	0x000380e4
   2ff2c:	000380f0 	.word	0x000380f0
   2ff30:	000334cf 	.word	0x000334cf
   2ff34:	000380f8 	.word	0x000380f8
   2ff38:	00038104 	.word	0x00038104
   2ff3c:	00038114 	.word	0x00038114
   2ff40:	00038118 	.word	0x00038118
   2ff44:	00038120 	.word	0x00038120
   2ff48:	0003813c 	.word	0x0003813c
   2ff4c:	00038150 	.word	0x00038150
   2ff50:	00038168 	.word	0x00038168
					sprintf(length, "%u", (unsigned int)module->req.content_length);
   2ff54:	69fb      	ldr	r3, [r7, #28]
   2ff56:	22cc      	movs	r2, #204	; 0xcc
   2ff58:	589b      	ldr	r3, [r3, r2]
   2ff5a:	001a      	movs	r2, r3
   2ff5c:	49e0      	ldr	r1, [pc, #896]	; (302e0 <_http_client_request+0x6e8>)
   2ff5e:	2328      	movs	r3, #40	; 0x28
   2ff60:	2018      	movs	r0, #24
   2ff62:	4684      	mov	ip, r0
   2ff64:	44bc      	add	ip, r7
   2ff66:	4463      	add	r3, ip
   2ff68:	0018      	movs	r0, r3
   2ff6a:	4bde      	ldr	r3, [pc, #888]	; (302e4 <_http_client_request+0x6ec>)
   2ff6c:	4798      	blx	r3
					stream_writer_send_buffer(&writer, "Content-Length: ", strlen("Content-Length: "));
   2ff6e:	49de      	ldr	r1, [pc, #888]	; (302e8 <_http_client_request+0x6f0>)
   2ff70:	2334      	movs	r3, #52	; 0x34
   2ff72:	2218      	movs	r2, #24
   2ff74:	4694      	mov	ip, r2
   2ff76:	44bc      	add	ip, r7
   2ff78:	4463      	add	r3, ip
   2ff7a:	2210      	movs	r2, #16
   2ff7c:	0018      	movs	r0, r3
   2ff7e:	4bdb      	ldr	r3, [pc, #876]	; (302ec <_http_client_request+0x6f4>)
   2ff80:	4798      	blx	r3
					stream_writer_send_buffer(&writer, length, strlen(length));
   2ff82:	2328      	movs	r3, #40	; 0x28
   2ff84:	2218      	movs	r2, #24
   2ff86:	4694      	mov	ip, r2
   2ff88:	44bc      	add	ip, r7
   2ff8a:	4463      	add	r3, ip
   2ff8c:	0018      	movs	r0, r3
   2ff8e:	4bd8      	ldr	r3, [pc, #864]	; (302f0 <_http_client_request+0x6f8>)
   2ff90:	4798      	blx	r3
   2ff92:	0002      	movs	r2, r0
   2ff94:	2328      	movs	r3, #40	; 0x28
   2ff96:	2118      	movs	r1, #24
   2ff98:	1879      	adds	r1, r7, r1
   2ff9a:	18c9      	adds	r1, r1, r3
   2ff9c:	2334      	movs	r3, #52	; 0x34
   2ff9e:	2018      	movs	r0, #24
   2ffa0:	4684      	mov	ip, r0
   2ffa2:	44bc      	add	ip, r7
   2ffa4:	4463      	add	r3, ip
   2ffa6:	0018      	movs	r0, r3
   2ffa8:	4bd0      	ldr	r3, [pc, #832]	; (302ec <_http_client_request+0x6f4>)
   2ffaa:	4798      	blx	r3
					stream_writer_send_buffer(&writer, "\r\n", strlen("\r\n"));
   2ffac:	49d1      	ldr	r1, [pc, #836]	; (302f4 <_http_client_request+0x6fc>)
   2ffae:	2334      	movs	r3, #52	; 0x34
   2ffb0:	2218      	movs	r2, #24
   2ffb2:	4694      	mov	ip, r2
   2ffb4:	44bc      	add	ip, r7
   2ffb6:	4463      	add	r3, ip
   2ffb8:	2202      	movs	r2, #2
   2ffba:	0018      	movs	r0, r3
   2ffbc:	4bcb      	ldr	r3, [pc, #812]	; (302ec <_http_client_request+0x6f4>)
   2ffbe:	4798      	blx	r3
		if (module->req.ext_header != NULL ) {
   2ffc0:	69fb      	ldr	r3, [r7, #28]
   2ffc2:	22d4      	movs	r2, #212	; 0xd4
   2ffc4:	589b      	ldr	r3, [r3, r2]
   2ffc6:	2b00      	cmp	r3, #0
   2ffc8:	d012      	beq.n	2fff0 <_http_client_request+0x3f8>
				module->req.ext_header,
   2ffca:	69fb      	ldr	r3, [r7, #28]
   2ffcc:	22d4      	movs	r2, #212	; 0xd4
   2ffce:	589c      	ldr	r4, [r3, r2]
				strlen(module->req.ext_header));
   2ffd0:	69fb      	ldr	r3, [r7, #28]
   2ffd2:	22d4      	movs	r2, #212	; 0xd4
   2ffd4:	589b      	ldr	r3, [r3, r2]
			stream_writer_send_buffer(&writer,
   2ffd6:	0018      	movs	r0, r3
   2ffd8:	4bc5      	ldr	r3, [pc, #788]	; (302f0 <_http_client_request+0x6f8>)
   2ffda:	4798      	blx	r3
   2ffdc:	0002      	movs	r2, r0
   2ffde:	2334      	movs	r3, #52	; 0x34
   2ffe0:	2118      	movs	r1, #24
   2ffe2:	468c      	mov	ip, r1
   2ffe4:	44bc      	add	ip, r7
   2ffe6:	4463      	add	r3, ip
   2ffe8:	0021      	movs	r1, r4
   2ffea:	0018      	movs	r0, r3
   2ffec:	4bbf      	ldr	r3, [pc, #764]	; (302ec <_http_client_request+0x6f4>)
   2ffee:	4798      	blx	r3
		stream_writer_send_buffer(&writer, "\r\n", strlen("\r\n"));
   2fff0:	49c0      	ldr	r1, [pc, #768]	; (302f4 <_http_client_request+0x6fc>)
   2fff2:	2334      	movs	r3, #52	; 0x34
   2fff4:	2218      	movs	r2, #24
   2fff6:	4694      	mov	ip, r2
   2fff8:	44bc      	add	ip, r7
   2fffa:	4463      	add	r3, ip
   2fffc:	2202      	movs	r2, #2
   2fffe:	0018      	movs	r0, r3
   30000:	4bba      	ldr	r3, [pc, #744]	; (302ec <_http_client_request+0x6f4>)
   30002:	4798      	blx	r3
		stream_writer_send_remain(&writer);
   30004:	2334      	movs	r3, #52	; 0x34
   30006:	2218      	movs	r2, #24
   30008:	4694      	mov	ip, r2
   3000a:	44bc      	add	ip, r7
   3000c:	4463      	add	r3, ip
   3000e:	0018      	movs	r0, r3
   30010:	4bb9      	ldr	r3, [pc, #740]	; (302f8 <_http_client_request+0x700>)
   30012:	4798      	blx	r3
		module->req.state = STATE_REQ_SEND_ENTITY;
   30014:	69fb      	ldr	r3, [r7, #28]
   30016:	2204      	movs	r2, #4
   30018:	66da      	str	r2, [r3, #108]	; 0x6c
		if (module->req.content_length < 0 && entity->read) {
   3001a:	69fb      	ldr	r3, [r7, #28]
   3001c:	22cc      	movs	r2, #204	; 0xcc
   3001e:	589b      	ldr	r3, [r3, r2]
   30020:	2b00      	cmp	r3, #0
   30022:	db00      	blt.n	30026 <_http_client_request+0x42e>
   30024:	e0c6      	b.n	301b4 <_http_client_request+0x5bc>
   30026:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   30028:	68db      	ldr	r3, [r3, #12]
   3002a:	2b00      	cmp	r3, #0
   3002c:	d100      	bne.n	30030 <_http_client_request+0x438>
   3002e:	e0c1      	b.n	301b4 <_http_client_request+0x5bc>
			size = entity->read(entity->priv_data, buffer + HTTP_CHUNKED_MAX_LENGTH + 2,
   30030:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   30032:	68dc      	ldr	r4, [r3, #12]
   30034:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   30036:	6958      	ldr	r0, [r3, #20]
   30038:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   3003a:	1d59      	adds	r1, r3, #5
				module->config.send_buffer_size - HTTP_CHUNKED_MAX_LENGTH - 4, module->req.sent_length);
   3003c:	69fb      	ldr	r3, [r7, #28]
   3003e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
			size = entity->read(entity->priv_data, buffer + HTTP_CHUNKED_MAX_LENGTH + 2,
   30040:	1fdd      	subs	r5, r3, #7
				module->config.send_buffer_size - HTTP_CHUNKED_MAX_LENGTH - 4, module->req.sent_length);
   30042:	69fb      	ldr	r3, [r7, #28]
   30044:	22d0      	movs	r2, #208	; 0xd0
   30046:	589b      	ldr	r3, [r3, r2]
			size = entity->read(entity->priv_data, buffer + HTTP_CHUNKED_MAX_LENGTH + 2,
   30048:	002a      	movs	r2, r5
   3004a:	47a0      	blx	r4
   3004c:	0003      	movs	r3, r0
   3004e:	677b      	str	r3, [r7, #116]	; 0x74
			if (size < 0) {
   30050:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   30052:	2b00      	cmp	r3, #0
   30054:	da01      	bge.n	3005a <_http_client_request+0x462>
				size = 0;
   30056:	2300      	movs	r3, #0
   30058:	677b      	str	r3, [r7, #116]	; 0x74
			buffer[HTTP_CHUNKED_MAX_LENGTH + 1] = '\n';
   3005a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   3005c:	220a      	movs	r2, #10
   3005e:	711a      	strb	r2, [r3, #4]
			buffer[HTTP_CHUNKED_MAX_LENGTH] = '\r';
   30060:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   30062:	220d      	movs	r2, #13
   30064:	70da      	strb	r2, [r3, #3]
			buffer[size + HTTP_CHUNKED_MAX_LENGTH + 2] = '\r';
   30066:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   30068:	3305      	adds	r3, #5
   3006a:	6eba      	ldr	r2, [r7, #104]	; 0x68
   3006c:	210d      	movs	r1, #13
   3006e:	54d1      	strb	r1, [r2, r3]
			buffer[size + HTTP_CHUNKED_MAX_LENGTH + 3] = '\n';
   30070:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   30072:	3306      	adds	r3, #6
   30074:	6eba      	ldr	r2, [r7, #104]	; 0x68
   30076:	210a      	movs	r1, #10
   30078:	54d1      	strb	r1, [r2, r3]
			if (size >= 0) {
   3007a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   3007c:	2b00      	cmp	r3, #0
   3007e:	db14      	blt.n	300aa <_http_client_request+0x4b2>
				ptr = buffer + 2;
   30080:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   30082:	3302      	adds	r3, #2
   30084:	673b      	str	r3, [r7, #112]	; 0x70
				*ptr = CH_LUT[size % 16];
   30086:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   30088:	4a9c      	ldr	r2, [pc, #624]	; (302fc <_http_client_request+0x704>)
   3008a:	4013      	ands	r3, r2
   3008c:	d504      	bpl.n	30098 <_http_client_request+0x4a0>
   3008e:	3b01      	subs	r3, #1
   30090:	2210      	movs	r2, #16
   30092:	4252      	negs	r2, r2
   30094:	4313      	orrs	r3, r2
   30096:	3301      	adds	r3, #1
   30098:	001a      	movs	r2, r3
   3009a:	2318      	movs	r3, #24
   3009c:	2118      	movs	r1, #24
   3009e:	468c      	mov	ip, r1
   300a0:	44bc      	add	ip, r7
   300a2:	4463      	add	r3, ip
   300a4:	5c9a      	ldrb	r2, [r3, r2]
   300a6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
   300a8:	701a      	strb	r2, [r3, #0]
			if (size >= 0x10) {
   300aa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   300ac:	2b0f      	cmp	r3, #15
   300ae:	dd19      	ble.n	300e4 <_http_client_request+0x4ec>
				ptr = buffer + 1;
   300b0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   300b2:	3301      	adds	r3, #1
   300b4:	673b      	str	r3, [r7, #112]	; 0x70
				*ptr = CH_LUT[(size / 0x10) % 16];
   300b6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   300b8:	2b00      	cmp	r3, #0
   300ba:	da00      	bge.n	300be <_http_client_request+0x4c6>
   300bc:	330f      	adds	r3, #15
   300be:	111b      	asrs	r3, r3, #4
   300c0:	001a      	movs	r2, r3
   300c2:	4b8e      	ldr	r3, [pc, #568]	; (302fc <_http_client_request+0x704>)
   300c4:	4013      	ands	r3, r2
   300c6:	d504      	bpl.n	300d2 <_http_client_request+0x4da>
   300c8:	3b01      	subs	r3, #1
   300ca:	2210      	movs	r2, #16
   300cc:	4252      	negs	r2, r2
   300ce:	4313      	orrs	r3, r2
   300d0:	3301      	adds	r3, #1
   300d2:	001a      	movs	r2, r3
   300d4:	2318      	movs	r3, #24
   300d6:	2118      	movs	r1, #24
   300d8:	468c      	mov	ip, r1
   300da:	44bc      	add	ip, r7
   300dc:	4463      	add	r3, ip
   300de:	5c9a      	ldrb	r2, [r3, r2]
   300e0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
   300e2:	701a      	strb	r2, [r3, #0]
			if (size >= 0x100) {
   300e4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   300e6:	2bff      	cmp	r3, #255	; 0xff
   300e8:	dd18      	ble.n	3011c <_http_client_request+0x524>
				ptr = buffer;
   300ea:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   300ec:	673b      	str	r3, [r7, #112]	; 0x70
				*ptr = CH_LUT[(size / 0x100) % 16];
   300ee:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   300f0:	2b00      	cmp	r3, #0
   300f2:	da00      	bge.n	300f6 <_http_client_request+0x4fe>
   300f4:	33ff      	adds	r3, #255	; 0xff
   300f6:	121b      	asrs	r3, r3, #8
   300f8:	001a      	movs	r2, r3
   300fa:	4b80      	ldr	r3, [pc, #512]	; (302fc <_http_client_request+0x704>)
   300fc:	4013      	ands	r3, r2
   300fe:	d504      	bpl.n	3010a <_http_client_request+0x512>
   30100:	3b01      	subs	r3, #1
   30102:	2210      	movs	r2, #16
   30104:	4252      	negs	r2, r2
   30106:	4313      	orrs	r3, r2
   30108:	3301      	adds	r3, #1
   3010a:	001a      	movs	r2, r3
   3010c:	2318      	movs	r3, #24
   3010e:	2118      	movs	r1, #24
   30110:	468c      	mov	ip, r1
   30112:	44bc      	add	ip, r7
   30114:	4463      	add	r3, ip
   30116:	5c9a      	ldrb	r2, [r3, r2]
   30118:	6f3b      	ldr	r3, [r7, #112]	; 0x70
   3011a:	701a      	strb	r2, [r3, #0]
			if ((result = send(module->sock, (void*)ptr, ptr + HTTP_CHUNKED_MAX_LENGTH - buffer + size + 4, 0)) < 0) {	
   3011c:	69fb      	ldr	r3, [r7, #28]
   3011e:	2000      	movs	r0, #0
   30120:	5618      	ldrsb	r0, [r3, r0]
   30122:	6f3b      	ldr	r3, [r7, #112]	; 0x70
   30124:	3303      	adds	r3, #3
   30126:	001a      	movs	r2, r3
   30128:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   3012a:	1ad3      	subs	r3, r2, r3
   3012c:	b29a      	uxth	r2, r3
   3012e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   30130:	b29b      	uxth	r3, r3
   30132:	18d3      	adds	r3, r2, r3
   30134:	b29b      	uxth	r3, r3
   30136:	3304      	adds	r3, #4
   30138:	b29a      	uxth	r2, r3
   3013a:	6f39      	ldr	r1, [r7, #112]	; 0x70
   3013c:	2300      	movs	r3, #0
   3013e:	4c70      	ldr	r4, [pc, #448]	; (30300 <_http_client_request+0x708>)
   30140:	47a0      	blx	r4
   30142:	0003      	movs	r3, r0
   30144:	663b      	str	r3, [r7, #96]	; 0x60
   30146:	6e3b      	ldr	r3, [r7, #96]	; 0x60
   30148:	2b00      	cmp	r3, #0
   3014a:	da07      	bge.n	3015c <_http_client_request+0x564>
				_http_client_clear_conn(module, -EIO);
   3014c:	2305      	movs	r3, #5
   3014e:	425a      	negs	r2, r3
   30150:	69fb      	ldr	r3, [r7, #28]
   30152:	0011      	movs	r1, r2
   30154:	0018      	movs	r0, r3
   30156:	4b6b      	ldr	r3, [pc, #428]	; (30304 <_http_client_request+0x70c>)
   30158:	4798      	blx	r3
				return;
   3015a:	e0e1      	b.n	30320 <_http_client_request+0x728>
			module->req.sent_length += size;
   3015c:	69fb      	ldr	r3, [r7, #28]
   3015e:	22d0      	movs	r2, #208	; 0xd0
   30160:	589a      	ldr	r2, [r3, r2]
   30162:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   30164:	18d2      	adds	r2, r2, r3
   30166:	69fb      	ldr	r3, [r7, #28]
   30168:	21d0      	movs	r1, #208	; 0xd0
   3016a:	505a      	str	r2, [r3, r1]
			if(size == 0) {
   3016c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   3016e:	2b00      	cmp	r3, #0
   30170:	d000      	beq.n	30174 <_http_client_request+0x57c>
   30172:	e0c9      	b.n	30308 <_http_client_request+0x710>
				if (module->req.entity.close) {
   30174:	69fb      	ldr	r3, [r7, #28]
   30176:	22c0      	movs	r2, #192	; 0xc0
   30178:	589b      	ldr	r3, [r3, r2]
   3017a:	2b00      	cmp	r3, #0
   3017c:	d007      	beq.n	3018e <_http_client_request+0x596>
					module->req.entity.close(module->req.entity.priv_data);
   3017e:	69fb      	ldr	r3, [r7, #28]
   30180:	22c0      	movs	r2, #192	; 0xc0
   30182:	589b      	ldr	r3, [r3, r2]
   30184:	69fa      	ldr	r2, [r7, #28]
   30186:	21c4      	movs	r1, #196	; 0xc4
   30188:	5852      	ldr	r2, [r2, r1]
   3018a:	0010      	movs	r0, r2
   3018c:	4798      	blx	r3
				module->req.state = STATE_SOCK_CONNECTED;
   3018e:	69fb      	ldr	r3, [r7, #28]
   30190:	2202      	movs	r2, #2
   30192:	66da      	str	r2, [r3, #108]	; 0x6c
				if (module->cb) {
   30194:	69fb      	ldr	r3, [r7, #28]
   30196:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   30198:	2b00      	cmp	r3, #0
   3019a:	d100      	bne.n	3019e <_http_client_request+0x5a6>
   3019c:	e0b5      	b.n	3030a <_http_client_request+0x712>
					module->cb(module, HTTP_CLIENT_CALLBACK_REQUESTED, &data);
   3019e:	69fb      	ldr	r3, [r7, #28]
   301a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   301a2:	220c      	movs	r2, #12
   301a4:	2118      	movs	r1, #24
   301a6:	468c      	mov	ip, r1
   301a8:	44bc      	add	ip, r7
   301aa:	4462      	add	r2, ip
   301ac:	69f8      	ldr	r0, [r7, #28]
   301ae:	2101      	movs	r1, #1
   301b0:	4798      	blx	r3
				break;
   301b2:	e0aa      	b.n	3030a <_http_client_request+0x712>
		} else if (module->req.content_length > 0 && entity->read) {
   301b4:	69fb      	ldr	r3, [r7, #28]
   301b6:	22cc      	movs	r2, #204	; 0xcc
   301b8:	589b      	ldr	r3, [r3, r2]
   301ba:	2b00      	cmp	r3, #0
   301bc:	dc00      	bgt.n	301c0 <_http_client_request+0x5c8>
   301be:	e07c      	b.n	302ba <_http_client_request+0x6c2>
   301c0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   301c2:	68db      	ldr	r3, [r3, #12]
   301c4:	2b00      	cmp	r3, #0
   301c6:	d100      	bne.n	301ca <_http_client_request+0x5d2>
   301c8:	e077      	b.n	302ba <_http_client_request+0x6c2>
			if (module->req.sent_length >= module->req.content_length) {
   301ca:	69fb      	ldr	r3, [r7, #28]
   301cc:	22d0      	movs	r2, #208	; 0xd0
   301ce:	589a      	ldr	r2, [r3, r2]
   301d0:	69fb      	ldr	r3, [r7, #28]
   301d2:	21cc      	movs	r1, #204	; 0xcc
   301d4:	585b      	ldr	r3, [r3, r1]
   301d6:	429a      	cmp	r2, r3
   301d8:	db1f      	blt.n	3021a <_http_client_request+0x622>
				if (module->req.entity.close) {
   301da:	69fb      	ldr	r3, [r7, #28]
   301dc:	22c0      	movs	r2, #192	; 0xc0
   301de:	589b      	ldr	r3, [r3, r2]
   301e0:	2b00      	cmp	r3, #0
   301e2:	d007      	beq.n	301f4 <_http_client_request+0x5fc>
					module->req.entity.close(module->req.entity.priv_data);
   301e4:	69fb      	ldr	r3, [r7, #28]
   301e6:	22c0      	movs	r2, #192	; 0xc0
   301e8:	589b      	ldr	r3, [r3, r2]
   301ea:	69fa      	ldr	r2, [r7, #28]
   301ec:	21c4      	movs	r1, #196	; 0xc4
   301ee:	5852      	ldr	r2, [r2, r1]
   301f0:	0010      	movs	r0, r2
   301f2:	4798      	blx	r3
				module->req.state = STATE_SOCK_CONNECTED;
   301f4:	69fb      	ldr	r3, [r7, #28]
   301f6:	2202      	movs	r2, #2
   301f8:	66da      	str	r2, [r3, #108]	; 0x6c
				if (module->cb) {
   301fa:	69fb      	ldr	r3, [r7, #28]
   301fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   301fe:	2b00      	cmp	r3, #0
   30200:	d100      	bne.n	30204 <_http_client_request+0x60c>
   30202:	e084      	b.n	3030e <_http_client_request+0x716>
					module->cb(module, HTTP_CLIENT_CALLBACK_REQUESTED, &data);
   30204:	69fb      	ldr	r3, [r7, #28]
   30206:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   30208:	220c      	movs	r2, #12
   3020a:	2118      	movs	r1, #24
   3020c:	468c      	mov	ip, r1
   3020e:	44bc      	add	ip, r7
   30210:	4462      	add	r2, ip
   30212:	69f8      	ldr	r0, [r7, #28]
   30214:	2101      	movs	r1, #1
   30216:	4798      	blx	r3
				break;
   30218:	e079      	b.n	3030e <_http_client_request+0x716>
			size = entity->read(entity->priv_data, buffer, module->config.send_buffer_size, module->req.sent_length);
   3021a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   3021c:	68dc      	ldr	r4, [r3, #12]
   3021e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   30220:	6958      	ldr	r0, [r3, #20]
   30222:	6eb9      	ldr	r1, [r7, #104]	; 0x68
   30224:	69fb      	ldr	r3, [r7, #28]
   30226:	6e5d      	ldr	r5, [r3, #100]	; 0x64
   30228:	69fb      	ldr	r3, [r7, #28]
   3022a:	22d0      	movs	r2, #208	; 0xd0
   3022c:	589b      	ldr	r3, [r3, r2]
   3022e:	002a      	movs	r2, r5
   30230:	47a0      	blx	r4
   30232:	0003      	movs	r3, r0
   30234:	677b      	str	r3, [r7, #116]	; 0x74
			if (size < 0) {
   30236:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   30238:	2b00      	cmp	r3, #0
   3023a:	da0d      	bge.n	30258 <_http_client_request+0x660>
				_http_client_clear_conn(module, (size == 0)?-EBADMSG:-EIO);
   3023c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   3023e:	2b00      	cmp	r3, #0
   30240:	d102      	bne.n	30248 <_http_client_request+0x650>
   30242:	234d      	movs	r3, #77	; 0x4d
   30244:	425b      	negs	r3, r3
   30246:	e001      	b.n	3024c <_http_client_request+0x654>
   30248:	2305      	movs	r3, #5
   3024a:	425b      	negs	r3, r3
   3024c:	69fa      	ldr	r2, [r7, #28]
   3024e:	0019      	movs	r1, r3
   30250:	0010      	movs	r0, r2
   30252:	4b2c      	ldr	r3, [pc, #176]	; (30304 <_http_client_request+0x70c>)
   30254:	4798      	blx	r3
			if (size < 0) {
   30256:	e057      	b.n	30308 <_http_client_request+0x710>
				if (size > module->req.content_length - module->req.sent_length) {
   30258:	69fb      	ldr	r3, [r7, #28]
   3025a:	22cc      	movs	r2, #204	; 0xcc
   3025c:	589a      	ldr	r2, [r3, r2]
   3025e:	69fb      	ldr	r3, [r7, #28]
   30260:	21d0      	movs	r1, #208	; 0xd0
   30262:	585b      	ldr	r3, [r3, r1]
   30264:	1ad2      	subs	r2, r2, r3
   30266:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   30268:	429a      	cmp	r2, r3
   3026a:	da07      	bge.n	3027c <_http_client_request+0x684>
					size = module->req.content_length - module->req.sent_length;
   3026c:	69fb      	ldr	r3, [r7, #28]
   3026e:	22cc      	movs	r2, #204	; 0xcc
   30270:	589a      	ldr	r2, [r3, r2]
   30272:	69fb      	ldr	r3, [r7, #28]
   30274:	21d0      	movs	r1, #208	; 0xd0
   30276:	585b      	ldr	r3, [r3, r1]
   30278:	1ad3      	subs	r3, r2, r3
   3027a:	677b      	str	r3, [r7, #116]	; 0x74
				if ((result = send(module->sock, (void*)buffer, size, 0)) < 0) {
   3027c:	69fb      	ldr	r3, [r7, #28]
   3027e:	2000      	movs	r0, #0
   30280:	5618      	ldrsb	r0, [r3, r0]
   30282:	6eb9      	ldr	r1, [r7, #104]	; 0x68
   30284:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   30286:	b29a      	uxth	r2, r3
   30288:	2300      	movs	r3, #0
   3028a:	4c1d      	ldr	r4, [pc, #116]	; (30300 <_http_client_request+0x708>)
   3028c:	47a0      	blx	r4
   3028e:	0003      	movs	r3, r0
   30290:	663b      	str	r3, [r7, #96]	; 0x60
   30292:	6e3b      	ldr	r3, [r7, #96]	; 0x60
   30294:	2b00      	cmp	r3, #0
   30296:	da07      	bge.n	302a8 <_http_client_request+0x6b0>
					_http_client_clear_conn(module, -EIO);
   30298:	2305      	movs	r3, #5
   3029a:	425a      	negs	r2, r3
   3029c:	69fb      	ldr	r3, [r7, #28]
   3029e:	0011      	movs	r1, r2
   302a0:	0018      	movs	r0, r3
   302a2:	4b18      	ldr	r3, [pc, #96]	; (30304 <_http_client_request+0x70c>)
   302a4:	4798      	blx	r3
					return;
   302a6:	e03b      	b.n	30320 <_http_client_request+0x728>
				module->req.sent_length += size;
   302a8:	69fb      	ldr	r3, [r7, #28]
   302aa:	22d0      	movs	r2, #208	; 0xd0
   302ac:	589a      	ldr	r2, [r3, r2]
   302ae:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   302b0:	18d2      	adds	r2, r2, r3
   302b2:	69fb      	ldr	r3, [r7, #28]
   302b4:	21d0      	movs	r1, #208	; 0xd0
   302b6:	505a      	str	r2, [r3, r1]
			if (size < 0) {
   302b8:	e026      	b.n	30308 <_http_client_request+0x710>
			module->req.state = STATE_SOCK_CONNECTED;
   302ba:	69fb      	ldr	r3, [r7, #28]
   302bc:	2202      	movs	r2, #2
   302be:	66da      	str	r2, [r3, #108]	; 0x6c
			if (module->cb) {
   302c0:	69fb      	ldr	r3, [r7, #28]
   302c2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   302c4:	2b00      	cmp	r3, #0
   302c6:	d024      	beq.n	30312 <_http_client_request+0x71a>
				module->cb(module, HTTP_CLIENT_CALLBACK_REQUESTED, &data);
   302c8:	69fb      	ldr	r3, [r7, #28]
   302ca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   302cc:	220c      	movs	r2, #12
   302ce:	2118      	movs	r1, #24
   302d0:	468c      	mov	ip, r1
   302d2:	44bc      	add	ip, r7
   302d4:	4462      	add	r2, ip
   302d6:	69f8      	ldr	r0, [r7, #28]
   302d8:	2101      	movs	r1, #1
   302da:	4798      	blx	r3
			break;
   302dc:	e019      	b.n	30312 <_http_client_request+0x71a>
   302de:	46c0      	nop			; (mov r8, r8)
   302e0:	00038188 	.word	0x00038188
   302e4:	000333d5 	.word	0x000333d5
   302e8:	0003818c 	.word	0x0003818c
   302ec:	00030b59 	.word	0x00030b59
   302f0:	000334cf 	.word	0x000334cf
   302f4:	00038114 	.word	0x00038114
   302f8:	00030b95 	.word	0x00030b95
   302fc:	8000000f 	.word	0x8000000f
   30300:	000240dd 	.word	0x000240dd
   30304:	0002faa5 	.word	0x0002faa5
		break;
   30308:	e004      	b.n	30314 <_http_client_request+0x71c>
				break;
   3030a:	46c0      	nop			; (mov r8, r8)
   3030c:	e002      	b.n	30314 <_http_client_request+0x71c>
				break;
   3030e:	46c0      	nop			; (mov r8, r8)
   30310:	e000      	b.n	30314 <_http_client_request+0x71c>
			break;
   30312:	46c0      	nop			; (mov r8, r8)
   30314:	69bb      	ldr	r3, [r7, #24]
   30316:	469d      	mov	sp, r3
   30318:	e004      	b.n	30324 <_http_client_request+0x72c>
		return;
   3031a:	46c0      	nop			; (mov r8, r8)
   3031c:	e000      	b.n	30320 <_http_client_request+0x728>
		return;
   3031e:	46c0      	nop			; (mov r8, r8)
   30320:	69bb      	ldr	r3, [r7, #24]
   30322:	469d      	mov	sp, r3
	}
}
   30324:	46bd      	mov	sp, r7
   30326:	b01e      	add	sp, #120	; 0x78
   30328:	bc04      	pop	{r2}
   3032a:	4690      	mov	r8, r2
   3032c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   3032e:	46c0      	nop			; (mov r8, r8)

00030330 <_http_client_recv_packet>:

void _http_client_recv_packet(struct http_client_module *const module)
{
   30330:	b590      	push	{r4, r7, lr}
   30332:	b083      	sub	sp, #12
   30334:	af00      	add	r7, sp, #0
   30336:	6078      	str	r0, [r7, #4]
	if (module == NULL) {
   30338:	687b      	ldr	r3, [r7, #4]
   3033a:	2b00      	cmp	r3, #0
   3033c:	d021      	beq.n	30382 <_http_client_recv_packet+0x52>
		return;
	}
	
	if (module->recved_size >= module->config.recv_buffer_size) {
   3033e:	687b      	ldr	r3, [r7, #4]
   30340:	6c5a      	ldr	r2, [r3, #68]	; 0x44
   30342:	687b      	ldr	r3, [r7, #4]
   30344:	6e1b      	ldr	r3, [r3, #96]	; 0x60
   30346:	429a      	cmp	r2, r3
   30348:	d307      	bcc.n	3035a <_http_client_recv_packet+0x2a>
		/* Has not enough memory. */
		_http_client_clear_conn(module, -EOVERFLOW);
   3034a:	238b      	movs	r3, #139	; 0x8b
   3034c:	425a      	negs	r2, r3
   3034e:	687b      	ldr	r3, [r7, #4]
   30350:	0011      	movs	r1, r2
   30352:	0018      	movs	r0, r3
   30354:	4b0d      	ldr	r3, [pc, #52]	; (3038c <_http_client_recv_packet+0x5c>)
   30356:	4798      	blx	r3
		return;
   30358:	e014      	b.n	30384 <_http_client_recv_packet+0x54>
	/*
	while (recv(module->sock,
		module->config.recv_buffer + module->recved_size,
		module->config.recv_buffer_size - module->recved_size, 0) != 0);
	*/
	recv(module->sock,
   3035a:	687b      	ldr	r3, [r7, #4]
   3035c:	2000      	movs	r0, #0
   3035e:	5618      	ldrsb	r0, [r3, r0]
		module->config.recv_buffer + module->recved_size,
   30360:	687b      	ldr	r3, [r7, #4]
   30362:	6dda      	ldr	r2, [r3, #92]	; 0x5c
   30364:	687b      	ldr	r3, [r7, #4]
   30366:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   30368:	18d1      	adds	r1, r2, r3
		module->config.recv_buffer_size - module->recved_size, 0);
   3036a:	687b      	ldr	r3, [r7, #4]
   3036c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
	recv(module->sock,
   3036e:	b29a      	uxth	r2, r3
		module->config.recv_buffer_size - module->recved_size, 0);
   30370:	687b      	ldr	r3, [r7, #4]
   30372:	6c5b      	ldr	r3, [r3, #68]	; 0x44
	recv(module->sock,
   30374:	b29b      	uxth	r3, r3
   30376:	1ad3      	subs	r3, r2, r3
   30378:	b29a      	uxth	r2, r3
   3037a:	2300      	movs	r3, #0
   3037c:	4c04      	ldr	r4, [pc, #16]	; (30390 <_http_client_recv_packet+0x60>)
   3037e:	47a0      	blx	r4
   30380:	e000      	b.n	30384 <_http_client_recv_packet+0x54>
		return;
   30382:	46c0      	nop			; (mov r8, r8)
}
   30384:	46bd      	mov	sp, r7
   30386:	b003      	add	sp, #12
   30388:	bd90      	pop	{r4, r7, pc}
   3038a:	46c0      	nop			; (mov r8, r8)
   3038c:	0002faa5 	.word	0x0002faa5
   30390:	00024241 	.word	0x00024241

00030394 <_http_client_recved_packet>:

void _http_client_recved_packet(struct http_client_module *const module, int read_len)
{
   30394:	b580      	push	{r7, lr}
   30396:	b082      	sub	sp, #8
   30398:	af00      	add	r7, sp, #0
   3039a:	6078      	str	r0, [r7, #4]
   3039c:	6039      	str	r1, [r7, #0]
	module->recved_size += read_len;
   3039e:	687b      	ldr	r3, [r7, #4]
   303a0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
   303a2:	683b      	ldr	r3, [r7, #0]
   303a4:	18d2      	adds	r2, r2, r3
   303a6:	687b      	ldr	r3, [r7, #4]
   303a8:	645a      	str	r2, [r3, #68]	; 0x44
	if (module->config.timeout > 0) {
   303aa:	687b      	ldr	r3, [r7, #4]
   303ac:	2258      	movs	r2, #88	; 0x58
   303ae:	5a9b      	ldrh	r3, [r3, r2]
   303b0:	2b00      	cmp	r3, #0
   303b2:	d007      	beq.n	303c4 <_http_client_recved_packet+0x30>
		sw_timer_disable_callback(module->config.timer_inst, module->timer_id);
   303b4:	687b      	ldr	r3, [r7, #4]
   303b6:	6d5a      	ldr	r2, [r3, #84]	; 0x54
   303b8:	687b      	ldr	r3, [r7, #4]
   303ba:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   303bc:	0019      	movs	r1, r3
   303be:	0010      	movs	r0, r2
   303c0:	4b06      	ldr	r3, [pc, #24]	; (303dc <_http_client_recved_packet+0x48>)
   303c2:	4798      	blx	r3
	}

	/* Recursive function call can be occurred overflow. */
	while(_http_client_handle_response(module) != 0);
   303c4:	46c0      	nop			; (mov r8, r8)
   303c6:	687b      	ldr	r3, [r7, #4]
   303c8:	0018      	movs	r0, r3
   303ca:	4b05      	ldr	r3, [pc, #20]	; (303e0 <_http_client_recved_packet+0x4c>)
   303cc:	4798      	blx	r3
   303ce:	1e03      	subs	r3, r0, #0
   303d0:	d1f9      	bne.n	303c6 <_http_client_recved_packet+0x32>
}
   303d2:	46c0      	nop			; (mov r8, r8)
   303d4:	46bd      	mov	sp, r7
   303d6:	b002      	add	sp, #8
   303d8:	bd80      	pop	{r7, pc}
   303da:	46c0      	nop			; (mov r8, r8)
   303dc:	00030e51 	.word	0x00030e51
   303e0:	000303e5 	.word	0x000303e5

000303e4 <_http_client_handle_response>:

int _http_client_handle_response(struct http_client_module *const module)
{
   303e4:	b580      	push	{r7, lr}
   303e6:	b082      	sub	sp, #8
   303e8:	af00      	add	r7, sp, #0
   303ea:	6078      	str	r0, [r7, #4]
	switch(module->resp.state) {
   303ec:	687b      	ldr	r3, [r7, #4]
   303ee:	22d8      	movs	r2, #216	; 0xd8
   303f0:	589b      	ldr	r3, [r3, r2]
   303f2:	2b00      	cmp	r3, #0
   303f4:	d002      	beq.n	303fc <_http_client_handle_response+0x18>
   303f6:	2b01      	cmp	r3, #1
   303f8:	d006      	beq.n	30408 <_http_client_handle_response+0x24>
   303fa:	e00b      	b.n	30414 <_http_client_handle_response+0x30>
	case STATE_PARSE_HEADER:
		return _http_client_handle_header(module);
   303fc:	687b      	ldr	r3, [r7, #4]
   303fe:	0018      	movs	r0, r3
   30400:	4b07      	ldr	r3, [pc, #28]	; (30420 <_http_client_handle_response+0x3c>)
   30402:	4798      	blx	r3
   30404:	0003      	movs	r3, r0
   30406:	e006      	b.n	30416 <_http_client_handle_response+0x32>
	case STATE_PARSE_ENTITY:
		return _http_client_handle_entity(module);
   30408:	687b      	ldr	r3, [r7, #4]
   3040a:	0018      	movs	r0, r3
   3040c:	4b05      	ldr	r3, [pc, #20]	; (30424 <_http_client_handle_response+0x40>)
   3040e:	4798      	blx	r3
   30410:	0003      	movs	r3, r0
   30412:	e000      	b.n	30416 <_http_client_handle_response+0x32>
	}
	return 0;
   30414:	2300      	movs	r3, #0
}
   30416:	0018      	movs	r0, r3
   30418:	46bd      	mov	sp, r7
   3041a:	b002      	add	sp, #8
   3041c:	bd80      	pop	{r7, pc}
   3041e:	46c0      	nop			; (mov r8, r8)
   30420:	00030429 	.word	0x00030429
   30424:	000308e1 	.word	0x000308e1

00030428 <_http_client_handle_header>:

int _http_client_handle_header(struct http_client_module *const module)
{
   30428:	b590      	push	{r4, r7, lr}
   3042a:	b08b      	sub	sp, #44	; 0x2c
   3042c:	af00      	add	r7, sp, #0
   3042e:	6078      	str	r0, [r7, #4]
	/* New line character only used in this function. So variable registered in the code region. */
	static const char *new_line = "\r\n";

	//TODO : header filter

	for (ptr = module->config.recv_buffer ; ; ) {
   30430:	687b      	ldr	r3, [r7, #4]
   30432:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
   30434:	627b      	str	r3, [r7, #36]	; 0x24
		ptr_line_end = strstr(ptr, new_line);
   30436:	4b9a      	ldr	r3, [pc, #616]	; (306a0 <_http_client_handle_header+0x278>)
   30438:	681a      	ldr	r2, [r3, #0]
   3043a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   3043c:	0011      	movs	r1, r2
   3043e:	0018      	movs	r0, r3
   30440:	4b98      	ldr	r3, [pc, #608]	; (306a4 <_http_client_handle_header+0x27c>)
   30442:	4798      	blx	r3
   30444:	0003      	movs	r3, r0
   30446:	61bb      	str	r3, [r7, #24]
		if (ptr_line_end == NULL || ptr_line_end >= module->config.recv_buffer + module->recved_size) {
   30448:	69bb      	ldr	r3, [r7, #24]
   3044a:	2b00      	cmp	r3, #0
   3044c:	d007      	beq.n	3045e <_http_client_handle_header+0x36>
   3044e:	687b      	ldr	r3, [r7, #4]
   30450:	6dda      	ldr	r2, [r3, #92]	; 0x5c
   30452:	687b      	ldr	r3, [r7, #4]
   30454:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   30456:	18d2      	adds	r2, r2, r3
   30458:	69bb      	ldr	r3, [r7, #24]
   3045a:	429a      	cmp	r2, r3
   3045c:	d807      	bhi.n	3046e <_http_client_handle_header+0x46>
			/* not enough buffer. */
			_http_client_move_buffer(module, ptr);
   3045e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   30460:	687b      	ldr	r3, [r7, #4]
   30462:	0011      	movs	r1, r2
   30464:	0018      	movs	r0, r3
   30466:	4b90      	ldr	r3, [pc, #576]	; (306a8 <_http_client_handle_header+0x280>)
   30468:	4798      	blx	r3
			return 0;
   3046a:	2300      	movs	r3, #0
   3046c:	e114      	b.n	30698 <_http_client_handle_header+0x270>
		}

		if (!strncmp(ptr, new_line, strlen(new_line))) {
   3046e:	4b8c      	ldr	r3, [pc, #560]	; (306a0 <_http_client_handle_header+0x278>)
   30470:	681c      	ldr	r4, [r3, #0]
   30472:	4b8b      	ldr	r3, [pc, #556]	; (306a0 <_http_client_handle_header+0x278>)
   30474:	681b      	ldr	r3, [r3, #0]
   30476:	0018      	movs	r0, r3
   30478:	4b8c      	ldr	r3, [pc, #560]	; (306ac <_http_client_handle_header+0x284>)
   3047a:	4798      	blx	r3
   3047c:	0002      	movs	r2, r0
   3047e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   30480:	0021      	movs	r1, r4
   30482:	0018      	movs	r0, r3
   30484:	4b8a      	ldr	r3, [pc, #552]	; (306b0 <_http_client_handle_header+0x288>)
   30486:	4798      	blx	r3
   30488:	1e03      	subs	r3, r0, #0
   3048a:	d15d      	bne.n	30548 <_http_client_handle_header+0x120>
			/* Move remain data to forward part of buffer. */
			_http_client_move_buffer(module, ptr + strlen(new_line));
   3048c:	4b84      	ldr	r3, [pc, #528]	; (306a0 <_http_client_handle_header+0x278>)
   3048e:	681b      	ldr	r3, [r3, #0]
   30490:	0018      	movs	r0, r3
   30492:	4b86      	ldr	r3, [pc, #536]	; (306ac <_http_client_handle_header+0x284>)
   30494:	4798      	blx	r3
   30496:	0002      	movs	r2, r0
   30498:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   3049a:	189a      	adds	r2, r3, r2
   3049c:	687b      	ldr	r3, [r7, #4]
   3049e:	0011      	movs	r1, r2
   304a0:	0018      	movs	r0, r3
   304a2:	4b81      	ldr	r3, [pc, #516]	; (306a8 <_http_client_handle_header+0x280>)
   304a4:	4798      	blx	r3

			/* Check validation first. */
			if (module->cb && module->resp.response_code) {
   304a6:	687b      	ldr	r3, [r7, #4]
   304a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   304aa:	2b00      	cmp	r3, #0
   304ac:	d046      	beq.n	3053c <_http_client_handle_header+0x114>
   304ae:	687b      	ldr	r3, [r7, #4]
   304b0:	22e4      	movs	r2, #228	; 0xe4
   304b2:	5a9b      	ldrh	r3, [r3, r2]
   304b4:	2b00      	cmp	r3, #0
   304b6:	d041      	beq.n	3053c <_http_client_handle_header+0x114>
				/* Chunked transfer */
				if (module->resp.content_length < 0) {
   304b8:	687b      	ldr	r3, [r7, #4]
   304ba:	22dc      	movs	r2, #220	; 0xdc
   304bc:	589b      	ldr	r3, [r3, r2]
   304be:	2b00      	cmp	r3, #0
   304c0:	da19      	bge.n	304f6 <_http_client_handle_header+0xce>
					data.recv_response.response_code = module->resp.response_code;
   304c2:	687b      	ldr	r3, [r7, #4]
   304c4:	22e4      	movs	r2, #228	; 0xe4
   304c6:	5a9a      	ldrh	r2, [r3, r2]
   304c8:	230c      	movs	r3, #12
   304ca:	18fb      	adds	r3, r7, r3
   304cc:	801a      	strh	r2, [r3, #0]
					data.recv_response.is_chunked = 1;
   304ce:	230c      	movs	r3, #12
   304d0:	18fb      	adds	r3, r7, r3
   304d2:	2201      	movs	r2, #1
   304d4:	709a      	strb	r2, [r3, #2]
					module->resp.read_length = 0;
   304d6:	687b      	ldr	r3, [r7, #4]
   304d8:	22e0      	movs	r2, #224	; 0xe0
   304da:	2100      	movs	r1, #0
   304dc:	5099      	str	r1, [r3, r2]
					data.recv_response.content = NULL;
   304de:	230c      	movs	r3, #12
   304e0:	18fb      	adds	r3, r7, r3
   304e2:	2200      	movs	r2, #0
   304e4:	609a      	str	r2, [r3, #8]
					module->cb(module, HTTP_CLIENT_CALLBACK_RECV_RESPONSE, &data);
   304e6:	687b      	ldr	r3, [r7, #4]
   304e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   304ea:	220c      	movs	r2, #12
   304ec:	18ba      	adds	r2, r7, r2
   304ee:	6878      	ldr	r0, [r7, #4]
   304f0:	2102      	movs	r1, #2
   304f2:	4798      	blx	r3
   304f4:	e022      	b.n	3053c <_http_client_handle_header+0x114>
				} else if (module->resp.content_length > (int)module->config.recv_buffer_size) {
   304f6:	687b      	ldr	r3, [r7, #4]
   304f8:	22dc      	movs	r2, #220	; 0xdc
   304fa:	589a      	ldr	r2, [r3, r2]
   304fc:	687b      	ldr	r3, [r7, #4]
   304fe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
   30500:	429a      	cmp	r2, r3
   30502:	dd1b      	ble.n	3053c <_http_client_handle_header+0x114>
					/* Entity is bigger than receive buffer. Sending the buffer to user like chunked transfer. */
					data.recv_response.response_code = module->resp.response_code;
   30504:	687b      	ldr	r3, [r7, #4]
   30506:	22e4      	movs	r2, #228	; 0xe4
   30508:	5a9a      	ldrh	r2, [r3, r2]
   3050a:	230c      	movs	r3, #12
   3050c:	18fb      	adds	r3, r7, r3
   3050e:	801a      	strh	r2, [r3, #0]
					data.recv_response.content_length = module->resp.content_length;
   30510:	687b      	ldr	r3, [r7, #4]
   30512:	22dc      	movs	r2, #220	; 0xdc
   30514:	589b      	ldr	r3, [r3, r2]
   30516:	001a      	movs	r2, r3
   30518:	230c      	movs	r3, #12
   3051a:	18fb      	adds	r3, r7, r3
   3051c:	605a      	str	r2, [r3, #4]
					data.recv_response.content = NULL;
   3051e:	230c      	movs	r3, #12
   30520:	18fb      	adds	r3, r7, r3
   30522:	2200      	movs	r2, #0
   30524:	609a      	str	r2, [r3, #8]
					module->resp.read_length = 0;
   30526:	687b      	ldr	r3, [r7, #4]
   30528:	22e0      	movs	r2, #224	; 0xe0
   3052a:	2100      	movs	r1, #0
   3052c:	5099      	str	r1, [r3, r2]
					module->cb(module, HTTP_CLIENT_CALLBACK_RECV_RESPONSE, &data);
   3052e:	687b      	ldr	r3, [r7, #4]
   30530:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   30532:	220c      	movs	r2, #12
   30534:	18ba      	adds	r2, r7, r2
   30536:	6878      	ldr	r0, [r7, #4]
   30538:	2102      	movs	r1, #2
   3053a:	4798      	blx	r3
				}
			}

			module->resp.state = STATE_PARSE_ENTITY;
   3053c:	687b      	ldr	r3, [r7, #4]
   3053e:	22d8      	movs	r2, #216	; 0xd8
   30540:	2101      	movs	r1, #1
   30542:	5099      	str	r1, [r3, r2]
			return 1;
   30544:	2301      	movs	r3, #1
   30546:	e0a7      	b.n	30698 <_http_client_handle_header+0x270>
		} else if (!strncmp(ptr, "Content-Length: ", strlen("Content-Length: "))) {
   30548:	495a      	ldr	r1, [pc, #360]	; (306b4 <_http_client_handle_header+0x28c>)
   3054a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   3054c:	2210      	movs	r2, #16
   3054e:	0018      	movs	r0, r3
   30550:	4b57      	ldr	r3, [pc, #348]	; (306b0 <_http_client_handle_header+0x288>)
   30552:	4798      	blx	r3
   30554:	1e03      	subs	r3, r0, #0
   30556:	d109      	bne.n	3056c <_http_client_handle_header+0x144>
			module->resp.content_length = atoi(ptr + strlen("Content-Length: "));
   30558:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   3055a:	3310      	adds	r3, #16
   3055c:	0018      	movs	r0, r3
   3055e:	4b56      	ldr	r3, [pc, #344]	; (306b8 <_http_client_handle_header+0x290>)
   30560:	4798      	blx	r3
   30562:	0001      	movs	r1, r0
   30564:	687b      	ldr	r3, [r7, #4]
   30566:	22dc      	movs	r2, #220	; 0xdc
   30568:	5099      	str	r1, [r3, r2]
   3056a:	e08b      	b.n	30684 <_http_client_handle_header+0x25c>
		} else if (!strncmp(ptr, "Transfer-Encoding: ", strlen("Transfer-Encoding: "))) {
   3056c:	4953      	ldr	r1, [pc, #332]	; (306bc <_http_client_handle_header+0x294>)
   3056e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   30570:	2213      	movs	r2, #19
   30572:	0018      	movs	r0, r3
   30574:	4b4e      	ldr	r3, [pc, #312]	; (306b0 <_http_client_handle_header+0x288>)
   30576:	4798      	blx	r3
   30578:	1e03      	subs	r3, r0, #0
   3057a:	d127      	bne.n	305cc <_http_client_handle_header+0x1a4>
			/* Currently does not support gzip or deflate encoding. If received this header, disconnect session immediately*/
			char *type_ptr = ptr + strlen("Transfer-Encoding: ");
   3057c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   3057e:	3313      	adds	r3, #19
   30580:	623b      	str	r3, [r7, #32]
			for (; ptr_line_end > type_ptr; type_ptr++) {
   30582:	e01e      	b.n	305c2 <_http_client_handle_header+0x19a>
				if (*type_ptr == ' ') {
   30584:	6a3b      	ldr	r3, [r7, #32]
   30586:	781b      	ldrb	r3, [r3, #0]
   30588:	2b20      	cmp	r3, #32
   3058a:	d103      	bne.n	30594 <_http_client_handle_header+0x16c>
			for (; ptr_line_end > type_ptr; type_ptr++) {
   3058c:	6a3b      	ldr	r3, [r7, #32]
   3058e:	3301      	adds	r3, #1
   30590:	623b      	str	r3, [r7, #32]
   30592:	e016      	b.n	305c2 <_http_client_handle_header+0x19a>
					continue;
				} else if (*type_ptr == 'C' || *type_ptr == 'c') {
   30594:	6a3b      	ldr	r3, [r7, #32]
   30596:	781b      	ldrb	r3, [r3, #0]
   30598:	2b43      	cmp	r3, #67	; 0x43
   3059a:	d003      	beq.n	305a4 <_http_client_handle_header+0x17c>
   3059c:	6a3b      	ldr	r3, [r7, #32]
   3059e:	781b      	ldrb	r3, [r3, #0]
   305a0:	2b63      	cmp	r3, #99	; 0x63
   305a2:	d105      	bne.n	305b0 <_http_client_handle_header+0x188>
					/* Chunked transfer */
					module->req.content_length = -1;
   305a4:	687b      	ldr	r3, [r7, #4]
   305a6:	21cc      	movs	r1, #204	; 0xcc
   305a8:	2201      	movs	r2, #1
   305aa:	4252      	negs	r2, r2
   305ac:	505a      	str	r2, [r3, r1]
				} else {
					_http_client_clear_conn(module, -ENOTSUP);
					return 0;
				}
				break;
   305ae:	e069      	b.n	30684 <_http_client_handle_header+0x25c>
					_http_client_clear_conn(module, -ENOTSUP);
   305b0:	2386      	movs	r3, #134	; 0x86
   305b2:	425a      	negs	r2, r3
   305b4:	687b      	ldr	r3, [r7, #4]
   305b6:	0011      	movs	r1, r2
   305b8:	0018      	movs	r0, r3
   305ba:	4b41      	ldr	r3, [pc, #260]	; (306c0 <_http_client_handle_header+0x298>)
   305bc:	4798      	blx	r3
					return 0;
   305be:	2300      	movs	r3, #0
   305c0:	e06a      	b.n	30698 <_http_client_handle_header+0x270>
			for (; ptr_line_end > type_ptr; type_ptr++) {
   305c2:	69ba      	ldr	r2, [r7, #24]
   305c4:	6a3b      	ldr	r3, [r7, #32]
   305c6:	429a      	cmp	r2, r3
   305c8:	d8dc      	bhi.n	30584 <_http_client_handle_header+0x15c>
   305ca:	e05b      	b.n	30684 <_http_client_handle_header+0x25c>
			}
		} else if (!strncmp(ptr, "Connection: ", strlen("Connection: "))) {
   305cc:	493d      	ldr	r1, [pc, #244]	; (306c4 <_http_client_handle_header+0x29c>)
   305ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   305d0:	220c      	movs	r2, #12
   305d2:	0018      	movs	r0, r3
   305d4:	4b36      	ldr	r3, [pc, #216]	; (306b0 <_http_client_handle_header+0x288>)
   305d6:	4798      	blx	r3
   305d8:	1e03      	subs	r3, r0, #0
   305da:	d126      	bne.n	3062a <_http_client_handle_header+0x202>
			char *type_ptr = ptr + strlen("Connection: ");
   305dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   305de:	330c      	adds	r3, #12
   305e0:	61fb      	str	r3, [r7, #28]
			for (; ptr_line_end > type_ptr; type_ptr++) {
   305e2:	e01d      	b.n	30620 <_http_client_handle_header+0x1f8>
				if (*type_ptr == ' ') {
   305e4:	69fb      	ldr	r3, [r7, #28]
   305e6:	781b      	ldrb	r3, [r3, #0]
   305e8:	2b20      	cmp	r3, #32
   305ea:	d103      	bne.n	305f4 <_http_client_handle_header+0x1cc>
			for (; ptr_line_end > type_ptr; type_ptr++) {
   305ec:	69fb      	ldr	r3, [r7, #28]
   305ee:	3301      	adds	r3, #1
   305f0:	61fb      	str	r3, [r7, #28]
   305f2:	e015      	b.n	30620 <_http_client_handle_header+0x1f8>
					continue;
				} else if (*type_ptr == 'K' || *type_ptr == 'k') {
   305f4:	69fb      	ldr	r3, [r7, #28]
   305f6:	781b      	ldrb	r3, [r3, #0]
   305f8:	2b4b      	cmp	r3, #75	; 0x4b
   305fa:	d003      	beq.n	30604 <_http_client_handle_header+0x1dc>
   305fc:	69fb      	ldr	r3, [r7, #28]
   305fe:	781b      	ldrb	r3, [r3, #0]
   30600:	2b6b      	cmp	r3, #107	; 0x6b
   30602:	d106      	bne.n	30612 <_http_client_handle_header+0x1ea>
					module->permanent = 1;
   30604:	687b      	ldr	r3, [r7, #4]
   30606:	2241      	movs	r2, #65	; 0x41
   30608:	5c99      	ldrb	r1, [r3, r2]
   3060a:	2002      	movs	r0, #2
   3060c:	4301      	orrs	r1, r0
   3060e:	5499      	strb	r1, [r3, r2]
				} else {
					module->permanent = 0;
				}
				break;
   30610:	e038      	b.n	30684 <_http_client_handle_header+0x25c>
					module->permanent = 0;
   30612:	687b      	ldr	r3, [r7, #4]
   30614:	2241      	movs	r2, #65	; 0x41
   30616:	5c99      	ldrb	r1, [r3, r2]
   30618:	2002      	movs	r0, #2
   3061a:	4381      	bics	r1, r0
   3061c:	5499      	strb	r1, [r3, r2]
				break;
   3061e:	e031      	b.n	30684 <_http_client_handle_header+0x25c>
			for (; ptr_line_end > type_ptr; type_ptr++) {
   30620:	69ba      	ldr	r2, [r7, #24]
   30622:	69fb      	ldr	r3, [r7, #28]
   30624:	429a      	cmp	r2, r3
   30626:	d8dd      	bhi.n	305e4 <_http_client_handle_header+0x1bc>
   30628:	e02c      	b.n	30684 <_http_client_handle_header+0x25c>
			}
		} else if (!strncmp(ptr, "HTTP/", 5)) {
   3062a:	4927      	ldr	r1, [pc, #156]	; (306c8 <_http_client_handle_header+0x2a0>)
   3062c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   3062e:	2205      	movs	r2, #5
   30630:	0018      	movs	r0, r3
   30632:	4b1f      	ldr	r3, [pc, #124]	; (306b0 <_http_client_handle_header+0x288>)
   30634:	4798      	blx	r3
   30636:	1e03      	subs	r3, r0, #0
   30638:	d124      	bne.n	30684 <_http_client_handle_header+0x25c>
			module->resp.response_code = atoi(ptr + 9); /* HTTP/{Ver} {Code} {Desc} : HTTP/1.1 200 OK */
   3063a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   3063c:	3309      	adds	r3, #9
   3063e:	0018      	movs	r0, r3
   30640:	4b1d      	ldr	r3, [pc, #116]	; (306b8 <_http_client_handle_header+0x290>)
   30642:	4798      	blx	r3
   30644:	0003      	movs	r3, r0
   30646:	b299      	uxth	r1, r3
   30648:	687b      	ldr	r3, [r7, #4]
   3064a:	22e4      	movs	r2, #228	; 0xe4
   3064c:	5299      	strh	r1, [r3, r2]
			/* Initializing the variables */
			module->resp.content_length = 0;
   3064e:	687b      	ldr	r3, [r7, #4]
   30650:	22dc      	movs	r2, #220	; 0xdc
   30652:	2100      	movs	r1, #0
   30654:	5099      	str	r1, [r3, r2]
			/* persistent connection is turn on in the HTTP 1.1 or above version of protocols. */  
			if (ptr [5] > '1' || ptr[7] > '0') {
   30656:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   30658:	3305      	adds	r3, #5
   3065a:	781b      	ldrb	r3, [r3, #0]
   3065c:	2b31      	cmp	r3, #49	; 0x31
   3065e:	d804      	bhi.n	3066a <_http_client_handle_header+0x242>
   30660:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   30662:	3307      	adds	r3, #7
   30664:	781b      	ldrb	r3, [r3, #0]
   30666:	2b30      	cmp	r3, #48	; 0x30
   30668:	d906      	bls.n	30678 <_http_client_handle_header+0x250>
				module->permanent = 1;
   3066a:	687b      	ldr	r3, [r7, #4]
   3066c:	2241      	movs	r2, #65	; 0x41
   3066e:	5c99      	ldrb	r1, [r3, r2]
   30670:	2002      	movs	r0, #2
   30672:	4301      	orrs	r1, r0
   30674:	5499      	strb	r1, [r3, r2]
   30676:	e005      	b.n	30684 <_http_client_handle_header+0x25c>
			} else {
				module->permanent = 0;
   30678:	687b      	ldr	r3, [r7, #4]
   3067a:	2241      	movs	r2, #65	; 0x41
   3067c:	5c99      	ldrb	r1, [r3, r2]
   3067e:	2002      	movs	r0, #2
   30680:	4381      	bics	r1, r0
   30682:	5499      	strb	r1, [r3, r2]
			}
		}

		ptr = ptr_line_end + strlen(new_line);
   30684:	4b06      	ldr	r3, [pc, #24]	; (306a0 <_http_client_handle_header+0x278>)
   30686:	681b      	ldr	r3, [r3, #0]
   30688:	0018      	movs	r0, r3
   3068a:	4b08      	ldr	r3, [pc, #32]	; (306ac <_http_client_handle_header+0x284>)
   3068c:	4798      	blx	r3
   3068e:	0002      	movs	r2, r0
   30690:	69bb      	ldr	r3, [r7, #24]
   30692:	189b      	adds	r3, r3, r2
   30694:	627b      	str	r3, [r7, #36]	; 0x24
		ptr_line_end = strstr(ptr, new_line);
   30696:	e6ce      	b.n	30436 <_http_client_handle_header+0xe>
	}
}
   30698:	0018      	movs	r0, r3
   3069a:	46bd      	mov	sp, r7
   3069c:	b00b      	add	sp, #44	; 0x2c
   3069e:	bd90      	pop	{r4, r7, pc}
   306a0:	2000013c 	.word	0x2000013c
   306a4:	0003354d 	.word	0x0003354d
   306a8:	00030a8d 	.word	0x00030a8d
   306ac:	000334cf 	.word	0x000334cf
   306b0:	000334dd 	.word	0x000334dd
   306b4:	0003818c 	.word	0x0003818c
   306b8:	00033065 	.word	0x00033065
   306bc:	000381b0 	.word	0x000381b0
   306c0:	0002faa5 	.word	0x0002faa5
   306c4:	000381c4 	.word	0x000381c4
   306c8:	000381d4 	.word	0x000381d4

000306cc <_http_client_read_chuked_entity>:

static void _http_client_read_chuked_entity(struct http_client_module *const module)
{
   306cc:	b580      	push	{r7, lr}
   306ce:	b088      	sub	sp, #32
   306d0:	af00      	add	r7, sp, #0
   306d2:	6078      	str	r0, [r7, #4]
	/* In chunked mode, read_length variable is means to remain data in the chunk. */
	union http_client_data data;
	int length = (int)module->recved_size;
   306d4:	687b      	ldr	r3, [r7, #4]
   306d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   306d8:	61fb      	str	r3, [r7, #28]
	int extension = 0;
   306da:	2300      	movs	r3, #0
   306dc:	61bb      	str	r3, [r7, #24]
	char *buffer= module->config.recv_buffer;
   306de:	687b      	ldr	r3, [r7, #4]
   306e0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
   306e2:	617b      	str	r3, [r7, #20]

	do {
		if (module->resp.read_length >= 0) {
   306e4:	687b      	ldr	r3, [r7, #4]
   306e6:	22e0      	movs	r2, #224	; 0xe0
   306e8:	589b      	ldr	r3, [r3, r2]
   306ea:	2b00      	cmp	r3, #0
   306ec:	db71      	blt.n	307d2 <_http_client_read_chuked_entity+0x106>
			if (module->resp.read_length == 0) {
   306ee:	687b      	ldr	r3, [r7, #4]
   306f0:	22e0      	movs	r2, #224	; 0xe0
   306f2:	589b      	ldr	r3, [r3, r2]
   306f4:	2b00      	cmp	r3, #0
   306f6:	d134      	bne.n	30762 <_http_client_read_chuked_entity+0x96>
				/* Complete to receive the buffer. */
				module->resp.state = STATE_PARSE_HEADER;
   306f8:	687b      	ldr	r3, [r7, #4]
   306fa:	22d8      	movs	r2, #216	; 0xd8
   306fc:	2100      	movs	r1, #0
   306fe:	5099      	str	r1, [r3, r2]
				module->resp.response_code = 0;
   30700:	687b      	ldr	r3, [r7, #4]
   30702:	22e4      	movs	r2, #228	; 0xe4
   30704:	2100      	movs	r1, #0
   30706:	5299      	strh	r1, [r3, r2]
				data.recv_chunked_data.is_complete = 1;
   30708:	2308      	movs	r3, #8
   3070a:	18fb      	adds	r3, r7, r3
   3070c:	2201      	movs	r2, #1
   3070e:	721a      	strb	r2, [r3, #8]
				data.recv_chunked_data.length = 0;
   30710:	2308      	movs	r3, #8
   30712:	18fb      	adds	r3, r7, r3
   30714:	2200      	movs	r2, #0
   30716:	601a      	str	r2, [r3, #0]
				data.recv_chunked_data.data = NULL;
   30718:	2308      	movs	r3, #8
   3071a:	18fb      	adds	r3, r7, r3
   3071c:	2200      	movs	r2, #0
   3071e:	605a      	str	r2, [r3, #4]
				if (module->cb) {
   30720:	687b      	ldr	r3, [r7, #4]
   30722:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   30724:	2b00      	cmp	r3, #0
   30726:	d006      	beq.n	30736 <_http_client_read_chuked_entity+0x6a>
					module->cb(module, HTTP_CLIENT_CALLBACK_RECV_CHUNKED_DATA, &data);
   30728:	687b      	ldr	r3, [r7, #4]
   3072a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   3072c:	2208      	movs	r2, #8
   3072e:	18ba      	adds	r2, r7, r2
   30730:	6878      	ldr	r0, [r7, #4]
   30732:	2103      	movs	r1, #3
   30734:	4798      	blx	r3
				}
				if (module->permanent == 0) {
   30736:	687b      	ldr	r3, [r7, #4]
   30738:	2241      	movs	r2, #65	; 0x41
   3073a:	5c9b      	ldrb	r3, [r3, r2]
   3073c:	2202      	movs	r2, #2
   3073e:	4013      	ands	r3, r2
   30740:	b2db      	uxtb	r3, r3
   30742:	2b00      	cmp	r3, #0
   30744:	d105      	bne.n	30752 <_http_client_read_chuked_entity+0x86>
					/* This server was not supported keep alive. */
					_http_client_clear_conn(module, 0);
   30746:	687b      	ldr	r3, [r7, #4]
   30748:	2100      	movs	r1, #0
   3074a:	0018      	movs	r0, r3
   3074c:	4b62      	ldr	r3, [pc, #392]	; (308d8 <_http_client_read_chuked_entity+0x20c>)
   3074e:	4798      	blx	r3
					return;
   30750:	e0bf      	b.n	308d2 <_http_client_read_chuked_entity+0x206>
				}
				_http_client_move_buffer(module, buffer + 2);
   30752:	697b      	ldr	r3, [r7, #20]
   30754:	1c9a      	adds	r2, r3, #2
   30756:	687b      	ldr	r3, [r7, #4]
   30758:	0011      	movs	r1, r2
   3075a:	0018      	movs	r0, r3
   3075c:	4b5f      	ldr	r3, [pc, #380]	; (308dc <_http_client_read_chuked_entity+0x210>)
   3075e:	4798      	blx	r3
   30760:	e0b2      	b.n	308c8 <_http_client_read_chuked_entity+0x1fc>
			} else if (module->resp.read_length <= length) {
   30762:	687b      	ldr	r3, [r7, #4]
   30764:	22e0      	movs	r2, #224	; 0xe0
   30766:	589a      	ldr	r2, [r3, r2]
   30768:	69fb      	ldr	r3, [r7, #28]
   3076a:	429a      	cmp	r2, r3
   3076c:	dd00      	ble.n	30770 <_http_client_read_chuked_entity+0xa4>
   3076e:	e0ab      	b.n	308c8 <_http_client_read_chuked_entity+0x1fc>
				data.recv_chunked_data.length = module->resp.read_length;
   30770:	687b      	ldr	r3, [r7, #4]
   30772:	22e0      	movs	r2, #224	; 0xe0
   30774:	589b      	ldr	r3, [r3, r2]
   30776:	001a      	movs	r2, r3
   30778:	2308      	movs	r3, #8
   3077a:	18fb      	adds	r3, r7, r3
   3077c:	601a      	str	r2, [r3, #0]
				data.recv_chunked_data.data = buffer;
   3077e:	2308      	movs	r3, #8
   30780:	18fb      	adds	r3, r7, r3
   30782:	697a      	ldr	r2, [r7, #20]
   30784:	605a      	str	r2, [r3, #4]
				data.recv_chunked_data.is_complete = 0;
   30786:	2308      	movs	r3, #8
   30788:	18fb      	adds	r3, r7, r3
   3078a:	2200      	movs	r2, #0
   3078c:	721a      	strb	r2, [r3, #8]

				if (module->cb) {
   3078e:	687b      	ldr	r3, [r7, #4]
   30790:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   30792:	2b00      	cmp	r3, #0
   30794:	d006      	beq.n	307a4 <_http_client_read_chuked_entity+0xd8>
					module->cb(module, HTTP_CLIENT_CALLBACK_RECV_CHUNKED_DATA, &data);
   30796:	687b      	ldr	r3, [r7, #4]
   30798:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   3079a:	2208      	movs	r2, #8
   3079c:	18ba      	adds	r2, r7, r2
   3079e:	6878      	ldr	r0, [r7, #4]
   307a0:	2103      	movs	r1, #3
   307a2:	4798      	blx	r3
				}
				/* Last two character in the chunk is '\r\n'. */
				_http_client_move_buffer(module, buffer + module->resp.read_length + 2 /* sizeof newline character */);
   307a4:	687b      	ldr	r3, [r7, #4]
   307a6:	22e0      	movs	r2, #224	; 0xe0
   307a8:	589b      	ldr	r3, [r3, r2]
   307aa:	3302      	adds	r3, #2
   307ac:	697a      	ldr	r2, [r7, #20]
   307ae:	18d2      	adds	r2, r2, r3
   307b0:	687b      	ldr	r3, [r7, #4]
   307b2:	0011      	movs	r1, r2
   307b4:	0018      	movs	r0, r3
   307b6:	4b49      	ldr	r3, [pc, #292]	; (308dc <_http_client_read_chuked_entity+0x210>)
   307b8:	4798      	blx	r3
				length = (int)module->recved_size;
   307ba:	687b      	ldr	r3, [r7, #4]
   307bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   307be:	61fb      	str	r3, [r7, #28]
				buffer = module->config.recv_buffer;
   307c0:	687b      	ldr	r3, [r7, #4]
   307c2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
   307c4:	617b      	str	r3, [r7, #20]
				module->resp.read_length = -1;
   307c6:	687b      	ldr	r3, [r7, #4]
   307c8:	21e0      	movs	r1, #224	; 0xe0
   307ca:	2201      	movs	r2, #1
   307cc:	4252      	negs	r2, r2
   307ce:	505a      	str	r2, [r3, r1]
   307d0:	e07a      	b.n	308c8 <_http_client_read_chuked_entity+0x1fc>
			}
		} else {
			/* Read chunked length. */
			module->resp.read_length = 0;
   307d2:	687b      	ldr	r3, [r7, #4]
   307d4:	22e0      	movs	r2, #224	; 0xe0
   307d6:	2100      	movs	r1, #0
   307d8:	5099      	str	r1, [r3, r2]
			for (; length > 0; buffer++, length--) {
   307da:	e05a      	b.n	30892 <_http_client_read_chuked_entity+0x1c6>
				if (*buffer == '\n') {
   307dc:	697b      	ldr	r3, [r7, #20]
   307de:	781b      	ldrb	r3, [r3, #0]
   307e0:	2b0a      	cmp	r3, #10
   307e2:	d106      	bne.n	307f2 <_http_client_read_chuked_entity+0x126>
					buffer++;
   307e4:	697b      	ldr	r3, [r7, #20]
   307e6:	3301      	adds	r3, #1
   307e8:	617b      	str	r3, [r7, #20]
					length--;
   307ea:	69fb      	ldr	r3, [r7, #28]
   307ec:	3b01      	subs	r3, #1
   307ee:	61fb      	str	r3, [r7, #28]
					break;
   307f0:	e052      	b.n	30898 <_http_client_read_chuked_entity+0x1cc>
				}
				if (extension != 0) {
   307f2:	69bb      	ldr	r3, [r7, #24]
   307f4:	2b00      	cmp	r3, #0
   307f6:	d145      	bne.n	30884 <_http_client_read_chuked_entity+0x1b8>
					continue;
				}
				if (*buffer >= '0' && *buffer <= '9') {
   307f8:	697b      	ldr	r3, [r7, #20]
   307fa:	781b      	ldrb	r3, [r3, #0]
   307fc:	2b2f      	cmp	r3, #47	; 0x2f
   307fe:	d910      	bls.n	30822 <_http_client_read_chuked_entity+0x156>
   30800:	697b      	ldr	r3, [r7, #20]
   30802:	781b      	ldrb	r3, [r3, #0]
   30804:	2b39      	cmp	r3, #57	; 0x39
   30806:	d80c      	bhi.n	30822 <_http_client_read_chuked_entity+0x156>
					module->resp.read_length = module->resp.read_length * 0x10 + *buffer - '0';
   30808:	687b      	ldr	r3, [r7, #4]
   3080a:	22e0      	movs	r2, #224	; 0xe0
   3080c:	589b      	ldr	r3, [r3, r2]
   3080e:	011b      	lsls	r3, r3, #4
   30810:	697a      	ldr	r2, [r7, #20]
   30812:	7812      	ldrb	r2, [r2, #0]
   30814:	189b      	adds	r3, r3, r2
   30816:	3b30      	subs	r3, #48	; 0x30
   30818:	001a      	movs	r2, r3
   3081a:	687b      	ldr	r3, [r7, #4]
   3081c:	21e0      	movs	r1, #224	; 0xe0
   3081e:	505a      	str	r2, [r3, r1]
   30820:	e031      	b.n	30886 <_http_client_read_chuked_entity+0x1ba>
				} else if (*buffer >= 'a' && *buffer <= 'f') {
   30822:	697b      	ldr	r3, [r7, #20]
   30824:	781b      	ldrb	r3, [r3, #0]
   30826:	2b60      	cmp	r3, #96	; 0x60
   30828:	d910      	bls.n	3084c <_http_client_read_chuked_entity+0x180>
   3082a:	697b      	ldr	r3, [r7, #20]
   3082c:	781b      	ldrb	r3, [r3, #0]
   3082e:	2b66      	cmp	r3, #102	; 0x66
   30830:	d80c      	bhi.n	3084c <_http_client_read_chuked_entity+0x180>
					module->resp.read_length = module->resp.read_length * 0x10 + *buffer - 'a';
   30832:	687b      	ldr	r3, [r7, #4]
   30834:	22e0      	movs	r2, #224	; 0xe0
   30836:	589b      	ldr	r3, [r3, r2]
   30838:	011b      	lsls	r3, r3, #4
   3083a:	697a      	ldr	r2, [r7, #20]
   3083c:	7812      	ldrb	r2, [r2, #0]
   3083e:	189b      	adds	r3, r3, r2
   30840:	3b61      	subs	r3, #97	; 0x61
   30842:	001a      	movs	r2, r3
   30844:	687b      	ldr	r3, [r7, #4]
   30846:	21e0      	movs	r1, #224	; 0xe0
   30848:	505a      	str	r2, [r3, r1]
   3084a:	e01c      	b.n	30886 <_http_client_read_chuked_entity+0x1ba>
				} else if (*buffer >= 'A' && *buffer <= 'F') {
   3084c:	697b      	ldr	r3, [r7, #20]
   3084e:	781b      	ldrb	r3, [r3, #0]
   30850:	2b40      	cmp	r3, #64	; 0x40
   30852:	d910      	bls.n	30876 <_http_client_read_chuked_entity+0x1aa>
   30854:	697b      	ldr	r3, [r7, #20]
   30856:	781b      	ldrb	r3, [r3, #0]
   30858:	2b46      	cmp	r3, #70	; 0x46
   3085a:	d80c      	bhi.n	30876 <_http_client_read_chuked_entity+0x1aa>
					module->resp.read_length = module->resp.read_length * 0x10 + *buffer - 'A';
   3085c:	687b      	ldr	r3, [r7, #4]
   3085e:	22e0      	movs	r2, #224	; 0xe0
   30860:	589b      	ldr	r3, [r3, r2]
   30862:	011b      	lsls	r3, r3, #4
   30864:	697a      	ldr	r2, [r7, #20]
   30866:	7812      	ldrb	r2, [r2, #0]
   30868:	189b      	adds	r3, r3, r2
   3086a:	3b41      	subs	r3, #65	; 0x41
   3086c:	001a      	movs	r2, r3
   3086e:	687b      	ldr	r3, [r7, #4]
   30870:	21e0      	movs	r1, #224	; 0xe0
   30872:	505a      	str	r2, [r3, r1]
   30874:	e007      	b.n	30886 <_http_client_read_chuked_entity+0x1ba>
				} else if (*buffer == ';') {
   30876:	697b      	ldr	r3, [r7, #20]
   30878:	781b      	ldrb	r3, [r3, #0]
   3087a:	2b3b      	cmp	r3, #59	; 0x3b
   3087c:	d103      	bne.n	30886 <_http_client_read_chuked_entity+0x1ba>
					extension = 1;
   3087e:	2301      	movs	r3, #1
   30880:	61bb      	str	r3, [r7, #24]
   30882:	e000      	b.n	30886 <_http_client_read_chuked_entity+0x1ba>
					continue;
   30884:	46c0      	nop			; (mov r8, r8)
			for (; length > 0; buffer++, length--) {
   30886:	697b      	ldr	r3, [r7, #20]
   30888:	3301      	adds	r3, #1
   3088a:	617b      	str	r3, [r7, #20]
   3088c:	69fb      	ldr	r3, [r7, #28]
   3088e:	3b01      	subs	r3, #1
   30890:	61fb      	str	r3, [r7, #28]
   30892:	69fb      	ldr	r3, [r7, #28]
   30894:	2b00      	cmp	r3, #0
   30896:	dca1      	bgt.n	307dc <_http_client_read_chuked_entity+0x110>
				}
			}

			if (module->resp.read_length > (int)module->config.recv_buffer_size) {
   30898:	687b      	ldr	r3, [r7, #4]
   3089a:	22e0      	movs	r2, #224	; 0xe0
   3089c:	589a      	ldr	r2, [r3, r2]
   3089e:	687b      	ldr	r3, [r7, #4]
   308a0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
   308a2:	429a      	cmp	r2, r3
   308a4:	dd07      	ble.n	308b6 <_http_client_read_chuked_entity+0x1ea>
				/* Chunked size is too big. */
				/* Through exception. */
				_http_client_clear_conn(module, -EOVERFLOW);
   308a6:	238b      	movs	r3, #139	; 0x8b
   308a8:	425a      	negs	r2, r3
   308aa:	687b      	ldr	r3, [r7, #4]
   308ac:	0011      	movs	r1, r2
   308ae:	0018      	movs	r0, r3
   308b0:	4b09      	ldr	r3, [pc, #36]	; (308d8 <_http_client_read_chuked_entity+0x20c>)
   308b2:	4798      	blx	r3
				return;
   308b4:	e00d      	b.n	308d2 <_http_client_read_chuked_entity+0x206>
			}

			if (length  == 0) {
   308b6:	69fb      	ldr	r3, [r7, #28]
   308b8:	2b00      	cmp	r3, #0
   308ba:	d105      	bne.n	308c8 <_http_client_read_chuked_entity+0x1fc>
				/* currently not received packet yet. */
				module->resp.read_length = -1;
   308bc:	687b      	ldr	r3, [r7, #4]
   308be:	21e0      	movs	r1, #224	; 0xe0
   308c0:	2201      	movs	r2, #1
   308c2:	4252      	negs	r2, r2
   308c4:	505a      	str	r2, [r3, r1]
				return;
   308c6:	e004      	b.n	308d2 <_http_client_read_chuked_entity+0x206>
			}
		}
	} while(module->recved_size > 0);
   308c8:	687b      	ldr	r3, [r7, #4]
   308ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   308cc:	2b00      	cmp	r3, #0
   308ce:	d000      	beq.n	308d2 <_http_client_read_chuked_entity+0x206>
   308d0:	e708      	b.n	306e4 <_http_client_read_chuked_entity+0x18>
}
   308d2:	46bd      	mov	sp, r7
   308d4:	b008      	add	sp, #32
   308d6:	bd80      	pop	{r7, pc}
   308d8:	0002faa5 	.word	0x0002faa5
   308dc:	00030a8d 	.word	0x00030a8d

000308e0 <_http_client_handle_entity>:

int _http_client_handle_entity(struct http_client_module *const module)
{
   308e0:	b580      	push	{r7, lr}
   308e2:	b086      	sub	sp, #24
   308e4:	af00      	add	r7, sp, #0
   308e6:	6078      	str	r0, [r7, #4]
	union http_client_data data;
	char *buffer = module->config.recv_buffer;
   308e8:	687b      	ldr	r3, [r7, #4]
   308ea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
   308ec:	617b      	str	r3, [r7, #20]

	/* If data size is lesser than buffer size, read all buffer and retransmission it to application. */
	if (module->resp.content_length >= 0 && module->resp.content_length <= (int)module->config.recv_buffer_size) {
   308ee:	687b      	ldr	r3, [r7, #4]
   308f0:	22dc      	movs	r2, #220	; 0xdc
   308f2:	589b      	ldr	r3, [r3, r2]
   308f4:	2b00      	cmp	r3, #0
   308f6:	db58      	blt.n	309aa <_http_client_handle_entity+0xca>
   308f8:	687b      	ldr	r3, [r7, #4]
   308fa:	22dc      	movs	r2, #220	; 0xdc
   308fc:	589a      	ldr	r2, [r3, r2]
   308fe:	687b      	ldr	r3, [r7, #4]
   30900:	6e1b      	ldr	r3, [r3, #96]	; 0x60
   30902:	429a      	cmp	r2, r3
   30904:	dc51      	bgt.n	309aa <_http_client_handle_entity+0xca>
		if ((int)module->recved_size >= module->resp.content_length) {
   30906:	687b      	ldr	r3, [r7, #4]
   30908:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   3090a:	0019      	movs	r1, r3
   3090c:	687b      	ldr	r3, [r7, #4]
   3090e:	22dc      	movs	r2, #220	; 0xdc
   30910:	589b      	ldr	r3, [r3, r2]
   30912:	4299      	cmp	r1, r3
   30914:	da00      	bge.n	30918 <_http_client_handle_entity+0x38>
   30916:	e0a9      	b.n	30a6c <_http_client_handle_entity+0x18c>
			if (module->cb && module->resp.response_code) {
   30918:	687b      	ldr	r3, [r7, #4]
   3091a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   3091c:	2b00      	cmp	r3, #0
   3091e:	d020      	beq.n	30962 <_http_client_handle_entity+0x82>
   30920:	687b      	ldr	r3, [r7, #4]
   30922:	22e4      	movs	r2, #228	; 0xe4
   30924:	5a9b      	ldrh	r3, [r3, r2]
   30926:	2b00      	cmp	r3, #0
   30928:	d01b      	beq.n	30962 <_http_client_handle_entity+0x82>
				data.recv_response.response_code = module->resp.response_code;
   3092a:	687b      	ldr	r3, [r7, #4]
   3092c:	22e4      	movs	r2, #228	; 0xe4
   3092e:	5a9a      	ldrh	r2, [r3, r2]
   30930:	2308      	movs	r3, #8
   30932:	18fb      	adds	r3, r7, r3
   30934:	801a      	strh	r2, [r3, #0]
				data.recv_response.is_chunked = 0;
   30936:	2308      	movs	r3, #8
   30938:	18fb      	adds	r3, r7, r3
   3093a:	2200      	movs	r2, #0
   3093c:	709a      	strb	r2, [r3, #2]
				data.recv_response.content_length = module->resp.content_length;
   3093e:	687b      	ldr	r3, [r7, #4]
   30940:	22dc      	movs	r2, #220	; 0xdc
   30942:	589b      	ldr	r3, [r3, r2]
   30944:	001a      	movs	r2, r3
   30946:	2308      	movs	r3, #8
   30948:	18fb      	adds	r3, r7, r3
   3094a:	605a      	str	r2, [r3, #4]
				data.recv_response.content = buffer;
   3094c:	2308      	movs	r3, #8
   3094e:	18fb      	adds	r3, r7, r3
   30950:	697a      	ldr	r2, [r7, #20]
   30952:	609a      	str	r2, [r3, #8]
				module->cb(module, HTTP_CLIENT_CALLBACK_RECV_RESPONSE, &data);
   30954:	687b      	ldr	r3, [r7, #4]
   30956:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   30958:	2208      	movs	r2, #8
   3095a:	18ba      	adds	r2, r7, r2
   3095c:	6878      	ldr	r0, [r7, #4]
   3095e:	2102      	movs	r1, #2
   30960:	4798      	blx	r3
			}
			module->resp.state = STATE_PARSE_HEADER;
   30962:	687b      	ldr	r3, [r7, #4]
   30964:	22d8      	movs	r2, #216	; 0xd8
   30966:	2100      	movs	r1, #0
   30968:	5099      	str	r1, [r3, r2]
			module->resp.response_code = 0;
   3096a:	687b      	ldr	r3, [r7, #4]
   3096c:	22e4      	movs	r2, #228	; 0xe4
   3096e:	2100      	movs	r1, #0
   30970:	5299      	strh	r1, [r3, r2]
			
			if (module->permanent == 0) {
   30972:	687b      	ldr	r3, [r7, #4]
   30974:	2241      	movs	r2, #65	; 0x41
   30976:	5c9b      	ldrb	r3, [r3, r2]
   30978:	2202      	movs	r2, #2
   3097a:	4013      	ands	r3, r2
   3097c:	b2db      	uxtb	r3, r3
   3097e:	2b00      	cmp	r3, #0
   30980:	d105      	bne.n	3098e <_http_client_handle_entity+0xae>
				/* This server was not supported keep alive. */
				_http_client_clear_conn(module, 0);
   30982:	687b      	ldr	r3, [r7, #4]
   30984:	2100      	movs	r1, #0
   30986:	0018      	movs	r0, r3
   30988:	4b3b      	ldr	r3, [pc, #236]	; (30a78 <_http_client_handle_entity+0x198>)
   3098a:	4798      	blx	r3
		if ((int)module->recved_size >= module->resp.content_length) {
   3098c:	e06e      	b.n	30a6c <_http_client_handle_entity+0x18c>
			} else {
				_http_client_move_buffer(module, buffer + module->resp.content_length);
   3098e:	687b      	ldr	r3, [r7, #4]
   30990:	22dc      	movs	r2, #220	; 0xdc
   30992:	589b      	ldr	r3, [r3, r2]
   30994:	001a      	movs	r2, r3
   30996:	697b      	ldr	r3, [r7, #20]
   30998:	189a      	adds	r2, r3, r2
   3099a:	687b      	ldr	r3, [r7, #4]
   3099c:	0011      	movs	r1, r2
   3099e:	0018      	movs	r0, r3
   309a0:	4b36      	ldr	r3, [pc, #216]	; (30a7c <_http_client_handle_entity+0x19c>)
   309a2:	4798      	blx	r3
				return module->recved_size;
   309a4:	687b      	ldr	r3, [r7, #4]
   309a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   309a8:	e061      	b.n	30a6e <_http_client_handle_entity+0x18e>
			}
		}
		/* else, buffer was not received enough size yet. */
	} else {
		if (module->resp.content_length >= 0) {
   309aa:	687b      	ldr	r3, [r7, #4]
   309ac:	22dc      	movs	r2, #220	; 0xdc
   309ae:	589b      	ldr	r3, [r3, r2]
   309b0:	2b00      	cmp	r3, #0
   309b2:	db57      	blt.n	30a64 <_http_client_handle_entity+0x184>
			data.recv_chunked_data.length = module->recved_size;
   309b4:	687b      	ldr	r3, [r7, #4]
   309b6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
   309b8:	2308      	movs	r3, #8
   309ba:	18fb      	adds	r3, r7, r3
   309bc:	601a      	str	r2, [r3, #0]
			data.recv_chunked_data.data = buffer;
   309be:	2308      	movs	r3, #8
   309c0:	18fb      	adds	r3, r7, r3
   309c2:	697a      	ldr	r2, [r7, #20]
   309c4:	605a      	str	r2, [r3, #4]
			module->resp.read_length += (int)module->recved_size;
   309c6:	687b      	ldr	r3, [r7, #4]
   309c8:	22e0      	movs	r2, #224	; 0xe0
   309ca:	589a      	ldr	r2, [r3, r2]
   309cc:	687b      	ldr	r3, [r7, #4]
   309ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   309d0:	18d2      	adds	r2, r2, r3
   309d2:	687b      	ldr	r3, [r7, #4]
   309d4:	21e0      	movs	r1, #224	; 0xe0
   309d6:	505a      	str	r2, [r3, r1]
			if (module->resp.content_length <= module->resp.read_length) {
   309d8:	687b      	ldr	r3, [r7, #4]
   309da:	22dc      	movs	r2, #220	; 0xdc
   309dc:	589a      	ldr	r2, [r3, r2]
   309de:	687b      	ldr	r3, [r7, #4]
   309e0:	21e0      	movs	r1, #224	; 0xe0
   309e2:	585b      	ldr	r3, [r3, r1]
   309e4:	429a      	cmp	r2, r3
   309e6:	dc0c      	bgt.n	30a02 <_http_client_handle_entity+0x122>
				/* Complete to receive the buffer. */
				module->resp.state = STATE_PARSE_HEADER;
   309e8:	687b      	ldr	r3, [r7, #4]
   309ea:	22d8      	movs	r2, #216	; 0xd8
   309ec:	2100      	movs	r1, #0
   309ee:	5099      	str	r1, [r3, r2]
				module->resp.response_code = 0;
   309f0:	687b      	ldr	r3, [r7, #4]
   309f2:	22e4      	movs	r2, #228	; 0xe4
   309f4:	2100      	movs	r1, #0
   309f6:	5299      	strh	r1, [r3, r2]
				data.recv_chunked_data.is_complete = 1;
   309f8:	2308      	movs	r3, #8
   309fa:	18fb      	adds	r3, r7, r3
   309fc:	2201      	movs	r2, #1
   309fe:	721a      	strb	r2, [r3, #8]
   30a00:	e003      	b.n	30a0a <_http_client_handle_entity+0x12a>
			} else {
				data.recv_chunked_data.is_complete = 0;
   30a02:	2308      	movs	r3, #8
   30a04:	18fb      	adds	r3, r7, r3
   30a06:	2200      	movs	r2, #0
   30a08:	721a      	strb	r2, [r3, #8]
			}

			if (module->cb) {
   30a0a:	687b      	ldr	r3, [r7, #4]
   30a0c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   30a0e:	2b00      	cmp	r3, #0
   30a10:	d006      	beq.n	30a20 <_http_client_handle_entity+0x140>
				module->cb(module, HTTP_CLIENT_CALLBACK_RECV_CHUNKED_DATA, &data);
   30a12:	687b      	ldr	r3, [r7, #4]
   30a14:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   30a16:	2208      	movs	r2, #8
   30a18:	18ba      	adds	r2, r7, r2
   30a1a:	6878      	ldr	r0, [r7, #4]
   30a1c:	2103      	movs	r1, #3
   30a1e:	4798      	blx	r3
			}
			
			if (data.recv_chunked_data.is_complete == 1) {
   30a20:	2308      	movs	r3, #8
   30a22:	18fb      	adds	r3, r7, r3
   30a24:	7a1b      	ldrb	r3, [r3, #8]
   30a26:	2b01      	cmp	r3, #1
   30a28:	d112      	bne.n	30a50 <_http_client_handle_entity+0x170>
				if (module->permanent == 0) {
   30a2a:	687b      	ldr	r3, [r7, #4]
   30a2c:	2241      	movs	r2, #65	; 0x41
   30a2e:	5c9b      	ldrb	r3, [r3, r2]
   30a30:	2202      	movs	r2, #2
   30a32:	4013      	ands	r3, r2
   30a34:	b2db      	uxtb	r3, r3
   30a36:	2b00      	cmp	r3, #0
   30a38:	d10a      	bne.n	30a50 <_http_client_handle_entity+0x170>
					/* This server was not supported keep alive. */
					printf("1\r\n");
   30a3a:	4b11      	ldr	r3, [pc, #68]	; (30a80 <_http_client_handle_entity+0x1a0>)
   30a3c:	0018      	movs	r0, r3
   30a3e:	4b11      	ldr	r3, [pc, #68]	; (30a84 <_http_client_handle_entity+0x1a4>)
   30a40:	4798      	blx	r3
					_http_client_clear_conn(module, 0);
   30a42:	687b      	ldr	r3, [r7, #4]
   30a44:	2100      	movs	r1, #0
   30a46:	0018      	movs	r0, r3
   30a48:	4b0b      	ldr	r3, [pc, #44]	; (30a78 <_http_client_handle_entity+0x198>)
   30a4a:	4798      	blx	r3
					return 0;
   30a4c:	2300      	movs	r3, #0
   30a4e:	e00e      	b.n	30a6e <_http_client_handle_entity+0x18e>
				}
			}
			_http_client_move_buffer(module, buffer + module->recved_size);
   30a50:	687b      	ldr	r3, [r7, #4]
   30a52:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   30a54:	697a      	ldr	r2, [r7, #20]
   30a56:	18d2      	adds	r2, r2, r3
   30a58:	687b      	ldr	r3, [r7, #4]
   30a5a:	0011      	movs	r1, r2
   30a5c:	0018      	movs	r0, r3
   30a5e:	4b07      	ldr	r3, [pc, #28]	; (30a7c <_http_client_handle_entity+0x19c>)
   30a60:	4798      	blx	r3
   30a62:	e003      	b.n	30a6c <_http_client_handle_entity+0x18c>
		} else {
			_http_client_read_chuked_entity(module);
   30a64:	687b      	ldr	r3, [r7, #4]
   30a66:	0018      	movs	r0, r3
   30a68:	4b07      	ldr	r3, [pc, #28]	; (30a88 <_http_client_handle_entity+0x1a8>)
   30a6a:	4798      	blx	r3
		}
	}

	return 0;
   30a6c:	2300      	movs	r3, #0
}
   30a6e:	0018      	movs	r0, r3
   30a70:	46bd      	mov	sp, r7
   30a72:	b006      	add	sp, #24
   30a74:	bd80      	pop	{r7, pc}
   30a76:	46c0      	nop			; (mov r8, r8)
   30a78:	0002faa5 	.word	0x0002faa5
   30a7c:	00030a8d 	.word	0x00030a8d
   30a80:	000381dc 	.word	0x000381dc
   30a84:	00033339 	.word	0x00033339
   30a88:	000306cd 	.word	0x000306cd

00030a8c <_http_client_move_buffer>:

void _http_client_move_buffer(struct http_client_module *const module, char *base)
{
   30a8c:	b580      	push	{r7, lr}
   30a8e:	b084      	sub	sp, #16
   30a90:	af00      	add	r7, sp, #0
   30a92:	6078      	str	r0, [r7, #4]
   30a94:	6039      	str	r1, [r7, #0]
	char *buffer = module->config.recv_buffer;
   30a96:	687b      	ldr	r3, [r7, #4]
   30a98:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
   30a9a:	60fb      	str	r3, [r7, #12]
	int remain = (int)module->recved_size - (int)base + (int)buffer;
   30a9c:	687b      	ldr	r3, [r7, #4]
   30a9e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   30aa0:	001a      	movs	r2, r3
   30aa2:	683b      	ldr	r3, [r7, #0]
   30aa4:	1ad2      	subs	r2, r2, r3
   30aa6:	68fb      	ldr	r3, [r7, #12]
   30aa8:	18d3      	adds	r3, r2, r3
   30aaa:	60bb      	str	r3, [r7, #8]

	if (remain > 0) {
   30aac:	68bb      	ldr	r3, [r7, #8]
   30aae:	2b00      	cmp	r3, #0
   30ab0:	dd09      	ble.n	30ac6 <_http_client_move_buffer+0x3a>
		memmove(buffer, base, remain);
   30ab2:	68ba      	ldr	r2, [r7, #8]
   30ab4:	6839      	ldr	r1, [r7, #0]
   30ab6:	68fb      	ldr	r3, [r7, #12]
   30ab8:	0018      	movs	r0, r3
   30aba:	4b06      	ldr	r3, [pc, #24]	; (30ad4 <_http_client_move_buffer+0x48>)
   30abc:	4798      	blx	r3
		module->recved_size = remain;
   30abe:	68ba      	ldr	r2, [r7, #8]
   30ac0:	687b      	ldr	r3, [r7, #4]
   30ac2:	645a      	str	r2, [r3, #68]	; 0x44
	} else {
		module->recved_size = 0;
	}
}
   30ac4:	e002      	b.n	30acc <_http_client_move_buffer+0x40>
		module->recved_size = 0;
   30ac6:	687b      	ldr	r3, [r7, #4]
   30ac8:	2200      	movs	r2, #0
   30aca:	645a      	str	r2, [r3, #68]	; 0x44
}
   30acc:	46c0      	nop			; (mov r8, r8)
   30ace:	46bd      	mov	sp, r7
   30ad0:	b004      	add	sp, #16
   30ad2:	bd80      	pop	{r7, pc}
   30ad4:	000330f3 	.word	0x000330f3

00030ad8 <stream_writer_init>:
#include <asf.h>
#include <string.h>
#include "iot/stream_writer.h"

void stream_writer_init(struct stream_writer * writer, char *buffer, size_t max_length, stream_writer_write_func_t func, void *priv_data)
{
   30ad8:	b580      	push	{r7, lr}
   30ada:	b084      	sub	sp, #16
   30adc:	af00      	add	r7, sp, #0
   30ade:	60f8      	str	r0, [r7, #12]
   30ae0:	60b9      	str	r1, [r7, #8]
   30ae2:	607a      	str	r2, [r7, #4]
   30ae4:	603b      	str	r3, [r7, #0]
	writer->max_size = max_length;
   30ae6:	68fb      	ldr	r3, [r7, #12]
   30ae8:	687a      	ldr	r2, [r7, #4]
   30aea:	601a      	str	r2, [r3, #0]
	writer->buffer = buffer;
   30aec:	68fb      	ldr	r3, [r7, #12]
   30aee:	68ba      	ldr	r2, [r7, #8]
   30af0:	611a      	str	r2, [r3, #16]
	writer->written = 0;
   30af2:	68fb      	ldr	r3, [r7, #12]
   30af4:	2200      	movs	r2, #0
   30af6:	605a      	str	r2, [r3, #4]
	writer->write_func = func;
   30af8:	68fb      	ldr	r3, [r7, #12]
   30afa:	683a      	ldr	r2, [r7, #0]
   30afc:	609a      	str	r2, [r3, #8]
	writer->priv_data = priv_data;
   30afe:	68fb      	ldr	r3, [r7, #12]
   30b00:	69ba      	ldr	r2, [r7, #24]
   30b02:	60da      	str	r2, [r3, #12]
}
   30b04:	46c0      	nop			; (mov r8, r8)
   30b06:	46bd      	mov	sp, r7
   30b08:	b004      	add	sp, #16
   30b0a:	bd80      	pop	{r7, pc}

00030b0c <stream_writer_send_8>:

void stream_writer_send_8(struct stream_writer * writer, int8_t value)
{
   30b0c:	b580      	push	{r7, lr}
   30b0e:	b084      	sub	sp, #16
   30b10:	af00      	add	r7, sp, #0
   30b12:	6078      	str	r0, [r7, #4]
   30b14:	000a      	movs	r2, r1
   30b16:	1cfb      	adds	r3, r7, #3
   30b18:	701a      	strb	r2, [r3, #0]
	int remain = writer->max_size - writer->written;
   30b1a:	687b      	ldr	r3, [r7, #4]
   30b1c:	681a      	ldr	r2, [r3, #0]
   30b1e:	687b      	ldr	r3, [r7, #4]
   30b20:	685b      	ldr	r3, [r3, #4]
   30b22:	1ad3      	subs	r3, r2, r3
   30b24:	60fb      	str	r3, [r7, #12]
	
	if (remain < 1) {
   30b26:	68fb      	ldr	r3, [r7, #12]
   30b28:	2b00      	cmp	r3, #0
   30b2a:	dc03      	bgt.n	30b34 <stream_writer_send_8+0x28>
		stream_writer_send_remain(writer);
   30b2c:	687b      	ldr	r3, [r7, #4]
   30b2e:	0018      	movs	r0, r3
   30b30:	4b08      	ldr	r3, [pc, #32]	; (30b54 <stream_writer_send_8+0x48>)
   30b32:	4798      	blx	r3
	}
	
	writer->buffer[writer->written++] = (char)value;
   30b34:	687b      	ldr	r3, [r7, #4]
   30b36:	6919      	ldr	r1, [r3, #16]
   30b38:	687b      	ldr	r3, [r7, #4]
   30b3a:	685b      	ldr	r3, [r3, #4]
   30b3c:	1c58      	adds	r0, r3, #1
   30b3e:	687a      	ldr	r2, [r7, #4]
   30b40:	6050      	str	r0, [r2, #4]
   30b42:	18cb      	adds	r3, r1, r3
   30b44:	1cfa      	adds	r2, r7, #3
   30b46:	7812      	ldrb	r2, [r2, #0]
   30b48:	701a      	strb	r2, [r3, #0]
}
   30b4a:	46c0      	nop			; (mov r8, r8)
   30b4c:	46bd      	mov	sp, r7
   30b4e:	b004      	add	sp, #16
   30b50:	bd80      	pop	{r7, pc}
   30b52:	46c0      	nop			; (mov r8, r8)
   30b54:	00030b95 	.word	0x00030b95

00030b58 <stream_writer_send_buffer>:
	stream_writer_send_8(writer, (value >> 16) & 0xFF);
	stream_writer_send_8(writer, (value >> 24) & 0xFF);
}

void stream_writer_send_buffer(struct stream_writer * writer, const char *buffer, size_t length)
{
   30b58:	b580      	push	{r7, lr}
   30b5a:	b084      	sub	sp, #16
   30b5c:	af00      	add	r7, sp, #0
   30b5e:	60f8      	str	r0, [r7, #12]
   30b60:	60b9      	str	r1, [r7, #8]
   30b62:	607a      	str	r2, [r7, #4]
	for (; length > 0; length--, buffer++) {
   30b64:	e00d      	b.n	30b82 <stream_writer_send_buffer+0x2a>
		stream_writer_send_8(writer, *buffer);
   30b66:	68bb      	ldr	r3, [r7, #8]
   30b68:	781b      	ldrb	r3, [r3, #0]
   30b6a:	b25a      	sxtb	r2, r3
   30b6c:	68fb      	ldr	r3, [r7, #12]
   30b6e:	0011      	movs	r1, r2
   30b70:	0018      	movs	r0, r3
   30b72:	4b07      	ldr	r3, [pc, #28]	; (30b90 <stream_writer_send_buffer+0x38>)
   30b74:	4798      	blx	r3
	for (; length > 0; length--, buffer++) {
   30b76:	687b      	ldr	r3, [r7, #4]
   30b78:	3b01      	subs	r3, #1
   30b7a:	607b      	str	r3, [r7, #4]
   30b7c:	68bb      	ldr	r3, [r7, #8]
   30b7e:	3301      	adds	r3, #1
   30b80:	60bb      	str	r3, [r7, #8]
   30b82:	687b      	ldr	r3, [r7, #4]
   30b84:	2b00      	cmp	r3, #0
   30b86:	d1ee      	bne.n	30b66 <stream_writer_send_buffer+0xe>
	}
}
   30b88:	46c0      	nop			; (mov r8, r8)
   30b8a:	46bd      	mov	sp, r7
   30b8c:	b004      	add	sp, #16
   30b8e:	bd80      	pop	{r7, pc}
   30b90:	00030b0d 	.word	0x00030b0d

00030b94 <stream_writer_send_remain>:

void stream_writer_send_remain(struct stream_writer * writer)
{
   30b94:	b590      	push	{r4, r7, lr}
   30b96:	b083      	sub	sp, #12
   30b98:	af00      	add	r7, sp, #0
   30b9a:	6078      	str	r0, [r7, #4]
	if(writer->written > 0) {
   30b9c:	687b      	ldr	r3, [r7, #4]
   30b9e:	685b      	ldr	r3, [r3, #4]
   30ba0:	2b00      	cmp	r3, #0
   30ba2:	d00c      	beq.n	30bbe <stream_writer_send_remain+0x2a>
		writer->write_func(writer->priv_data, writer->buffer, writer->written);
   30ba4:	687b      	ldr	r3, [r7, #4]
   30ba6:	689c      	ldr	r4, [r3, #8]
   30ba8:	687b      	ldr	r3, [r7, #4]
   30baa:	68d8      	ldr	r0, [r3, #12]
   30bac:	687b      	ldr	r3, [r7, #4]
   30bae:	6919      	ldr	r1, [r3, #16]
   30bb0:	687b      	ldr	r3, [r7, #4]
   30bb2:	685b      	ldr	r3, [r3, #4]
   30bb4:	001a      	movs	r2, r3
   30bb6:	47a0      	blx	r4
		writer->written = 0;
   30bb8:	687b      	ldr	r3, [r7, #4]
   30bba:	2200      	movs	r2, #0
   30bbc:	605a      	str	r2, [r3, #4]
	}
}
   30bbe:	46c0      	nop			; (mov r8, r8)
   30bc0:	46bd      	mov	sp, r7
   30bc2:	b003      	add	sp, #12
   30bc4:	bd90      	pop	{r4, r7, pc}
	...

00030bc8 <system_cpu_clock_get_hz>:
{
   30bc8:	b580      	push	{r7, lr}
   30bca:	af00      	add	r7, sp, #0
	return (system_gclk_gen_get_hz(GCLK_GENERATOR_0) >> PM->CPUSEL.reg);
   30bcc:	2000      	movs	r0, #0
   30bce:	4b05      	ldr	r3, [pc, #20]	; (30be4 <system_cpu_clock_get_hz+0x1c>)
   30bd0:	4798      	blx	r3
   30bd2:	0002      	movs	r2, r0
   30bd4:	4b04      	ldr	r3, [pc, #16]	; (30be8 <system_cpu_clock_get_hz+0x20>)
   30bd6:	7a1b      	ldrb	r3, [r3, #8]
   30bd8:	b2db      	uxtb	r3, r3
   30bda:	40da      	lsrs	r2, r3
   30bdc:	0013      	movs	r3, r2
}
   30bde:	0018      	movs	r0, r3
   30be0:	46bd      	mov	sp, r7
   30be2:	bd80      	pop	{r7, pc}
   30be4:	000285a9 	.word	0x000285a9
   30be8:	40000400 	.word	0x40000400

00030bec <tcc_enable>:
 *
 * \param[in]  module_inst   Pointer to the software module instance struct
 */
static inline void tcc_enable(
		const struct tcc_module *const module_inst)
{
   30bec:	b580      	push	{r7, lr}
   30bee:	b084      	sub	sp, #16
   30bf0:	af00      	add	r7, sp, #0
   30bf2:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	Tcc *const tcc_module = module_inst->hw;
   30bf4:	687b      	ldr	r3, [r7, #4]
   30bf6:	681b      	ldr	r3, [r3, #0]
   30bf8:	60fb      	str	r3, [r7, #12]

	while (tcc_module->SYNCBUSY.reg & TCC_SYNCBUSY_ENABLE) {
   30bfa:	46c0      	nop			; (mov r8, r8)
   30bfc:	68fb      	ldr	r3, [r7, #12]
   30bfe:	689b      	ldr	r3, [r3, #8]
   30c00:	2202      	movs	r2, #2
   30c02:	4013      	ands	r3, r2
   30c04:	d1fa      	bne.n	30bfc <tcc_enable+0x10>
		/* Wait for sync */
	}

	/* Enable the TCC module */
	tcc_module->CTRLA.reg |= TCC_CTRLA_ENABLE;
   30c06:	68fb      	ldr	r3, [r7, #12]
   30c08:	681b      	ldr	r3, [r3, #0]
   30c0a:	2202      	movs	r2, #2
   30c0c:	431a      	orrs	r2, r3
   30c0e:	68fb      	ldr	r3, [r7, #12]
   30c10:	601a      	str	r2, [r3, #0]
}
   30c12:	46c0      	nop			; (mov r8, r8)
   30c14:	46bd      	mov	sp, r7
   30c16:	b004      	add	sp, #16
   30c18:	bd80      	pop	{r7, pc}
	...

00030c1c <sw_timer_tcc_callback>:
 *
 * \param[in] module Instance of the TCC.
 */
#if (SAMD21)
static void sw_timer_tcc_callback(struct tcc_module *const module)
{
   30c1c:	b580      	push	{r7, lr}
   30c1e:	b082      	sub	sp, #8
   30c20:	af00      	add	r7, sp, #0
   30c22:	6078      	str	r0, [r7, #4]
	sw_timer_tick++;
   30c24:	4b04      	ldr	r3, [pc, #16]	; (30c38 <sw_timer_tcc_callback+0x1c>)
   30c26:	681b      	ldr	r3, [r3, #0]
   30c28:	1c5a      	adds	r2, r3, #1
   30c2a:	4b03      	ldr	r3, [pc, #12]	; (30c38 <sw_timer_tcc_callback+0x1c>)
   30c2c:	601a      	str	r2, [r3, #0]
}
   30c2e:	46c0      	nop			; (mov r8, r8)
   30c30:	46bd      	mov	sp, r7
   30c32:	b002      	add	sp, #8
   30c34:	bd80      	pop	{r7, pc}
   30c36:	46c0      	nop			; (mov r8, r8)
   30c38:	200041ac 	.word	0x200041ac

00030c3c <sw_timer_get_config_defaults>:
}

#endif

void sw_timer_get_config_defaults(struct sw_timer_config *const config)
{
   30c3c:	b580      	push	{r7, lr}
   30c3e:	b082      	sub	sp, #8
   30c40:	af00      	add	r7, sp, #0
   30c42:	6078      	str	r0, [r7, #4]
	Assert(config);

	config->accuracy = 100;
   30c44:	687b      	ldr	r3, [r7, #4]
   30c46:	2264      	movs	r2, #100	; 0x64
   30c48:	805a      	strh	r2, [r3, #2]
	config->tcc_dev = 0;
   30c4a:	687b      	ldr	r3, [r7, #4]
   30c4c:	2200      	movs	r2, #0
   30c4e:	701a      	strb	r2, [r3, #0]
	config->tcc_callback_channel = 0;
   30c50:	687b      	ldr	r3, [r7, #4]
   30c52:	2200      	movs	r2, #0
   30c54:	705a      	strb	r2, [r3, #1]
}
   30c56:	46c0      	nop			; (mov r8, r8)
   30c58:	46bd      	mov	sp, r7
   30c5a:	b002      	add	sp, #8
   30c5c:	bd80      	pop	{r7, pc}
	...

00030c60 <sw_timer_init>:

void sw_timer_init(struct sw_timer_module *const module_inst, struct sw_timer_config *const config)
{
   30c60:	b590      	push	{r4, r7, lr}
   30c62:	b0b1      	sub	sp, #196	; 0xc4
   30c64:	af00      	add	r7, sp, #0
   30c66:	6078      	str	r0, [r7, #4]
   30c68:	6039      	str	r1, [r7, #0]
#if (SAMD21)
	struct tcc_config tcc_conf;
	struct tcc_module *tcc_module;
	Tcc *hw[] = TCC_INSTS;
   30c6a:	230c      	movs	r3, #12
   30c6c:	18fb      	adds	r3, r7, r3
   30c6e:	4a2e      	ldr	r2, [pc, #184]	; (30d28 <sw_timer_init+0xc8>)
   30c70:	ca13      	ldmia	r2!, {r0, r1, r4}
   30c72:	c313      	stmia	r3!, {r0, r1, r4}
	Assert(module_inst);
	Assert(config);
	Assert(config->tcc_dev < TCC_INST_NUM);
	Assert(config->tcc_callback_channel < TCC_NUM_CHANNELS);

	module_inst->accuracy = config->accuracy;
   30c74:	683b      	ldr	r3, [r7, #0]
   30c76:	885b      	ldrh	r3, [r3, #2]
   30c78:	001a      	movs	r2, r3
   30c7a:	687b      	ldr	r3, [r7, #4]
   30c7c:	655a      	str	r2, [r3, #84]	; 0x54
#if (SAMD21)
	/* Start the TCC module. */
	tcc_module = &module_inst->tcc_inst;
   30c7e:	687b      	ldr	r3, [r7, #4]
   30c80:	3314      	adds	r3, #20
   30c82:	22bc      	movs	r2, #188	; 0xbc
   30c84:	18ba      	adds	r2, r7, r2
   30c86:	6013      	str	r3, [r2, #0]
	tcc_get_config_defaults(&tcc_conf, hw[config->tcc_dev]);
   30c88:	683b      	ldr	r3, [r7, #0]
   30c8a:	781b      	ldrb	r3, [r3, #0]
   30c8c:	001a      	movs	r2, r3
   30c8e:	230c      	movs	r3, #12
   30c90:	18fb      	adds	r3, r7, r3
   30c92:	0092      	lsls	r2, r2, #2
   30c94:	58d2      	ldr	r2, [r2, r3]
   30c96:	2318      	movs	r3, #24
   30c98:	18fb      	adds	r3, r7, r3
   30c9a:	0011      	movs	r1, r2
   30c9c:	0018      	movs	r0, r3
   30c9e:	4b23      	ldr	r3, [pc, #140]	; (30d2c <sw_timer_init+0xcc>)
   30ca0:	4798      	blx	r3
	tcc_conf.counter.period = system_cpu_clock_get_hz() / (64 * 1000 / config->accuracy);
   30ca2:	4b23      	ldr	r3, [pc, #140]	; (30d30 <sw_timer_init+0xd0>)
   30ca4:	4798      	blx	r3
   30ca6:	0004      	movs	r4, r0
   30ca8:	683b      	ldr	r3, [r7, #0]
   30caa:	885b      	ldrh	r3, [r3, #2]
   30cac:	001a      	movs	r2, r3
   30cae:	4b21      	ldr	r3, [pc, #132]	; (30d34 <sw_timer_init+0xd4>)
   30cb0:	0011      	movs	r1, r2
   30cb2:	22fa      	movs	r2, #250	; 0xfa
   30cb4:	0210      	lsls	r0, r2, #8
   30cb6:	4798      	blx	r3
   30cb8:	0003      	movs	r3, r0
   30cba:	001a      	movs	r2, r3
   30cbc:	4b1e      	ldr	r3, [pc, #120]	; (30d38 <sw_timer_init+0xd8>)
   30cbe:	0011      	movs	r1, r2
   30cc0:	0020      	movs	r0, r4
   30cc2:	4798      	blx	r3
   30cc4:	0003      	movs	r3, r0
   30cc6:	001a      	movs	r2, r3
   30cc8:	2318      	movs	r3, #24
   30cca:	18fb      	adds	r3, r7, r3
   30ccc:	605a      	str	r2, [r3, #4]
	tcc_conf.counter.clock_prescaler = TCC_CLOCK_PRESCALER_DIV64;
   30cce:	2318      	movs	r3, #24
   30cd0:	18fb      	adds	r3, r7, r3
   30cd2:	2205      	movs	r2, #5
   30cd4:	72da      	strb	r2, [r3, #11]
	tcc_init(tcc_module, hw[config->tcc_dev], &tcc_conf);
   30cd6:	683b      	ldr	r3, [r7, #0]
   30cd8:	781b      	ldrb	r3, [r3, #0]
   30cda:	001a      	movs	r2, r3
   30cdc:	230c      	movs	r3, #12
   30cde:	18fb      	adds	r3, r7, r3
   30ce0:	0092      	lsls	r2, r2, #2
   30ce2:	58d1      	ldr	r1, [r2, r3]
   30ce4:	2318      	movs	r3, #24
   30ce6:	18fa      	adds	r2, r7, r3
   30ce8:	23bc      	movs	r3, #188	; 0xbc
   30cea:	18fb      	adds	r3, r7, r3
   30cec:	681b      	ldr	r3, [r3, #0]
   30cee:	0018      	movs	r0, r3
   30cf0:	4b12      	ldr	r3, [pc, #72]	; (30d3c <sw_timer_init+0xdc>)
   30cf2:	4798      	blx	r3
	tcc_register_callback(tcc_module, sw_timer_tcc_callback, config->tcc_callback_channel + TCC_CALLBACK_CHANNEL_0);
   30cf4:	683b      	ldr	r3, [r7, #0]
   30cf6:	785b      	ldrb	r3, [r3, #1]
   30cf8:	3308      	adds	r3, #8
   30cfa:	b2da      	uxtb	r2, r3
   30cfc:	4910      	ldr	r1, [pc, #64]	; (30d40 <sw_timer_init+0xe0>)
   30cfe:	23bc      	movs	r3, #188	; 0xbc
   30d00:	18fb      	adds	r3, r7, r3
   30d02:	681b      	ldr	r3, [r3, #0]
   30d04:	0018      	movs	r0, r3
   30d06:	4b0f      	ldr	r3, [pc, #60]	; (30d44 <sw_timer_init+0xe4>)
   30d08:	4798      	blx	r3
	tcc_enable_callback(tcc_module, config->tcc_callback_channel + TCC_CALLBACK_CHANNEL_0);
   30d0a:	683b      	ldr	r3, [r7, #0]
   30d0c:	785b      	ldrb	r3, [r3, #1]
   30d0e:	3308      	adds	r3, #8
   30d10:	b2da      	uxtb	r2, r3
   30d12:	23bc      	movs	r3, #188	; 0xbc
   30d14:	18fb      	adds	r3, r7, r3
   30d16:	681b      	ldr	r3, [r3, #0]
   30d18:	0011      	movs	r1, r2
   30d1a:	0018      	movs	r0, r3
   30d1c:	4b0a      	ldr	r3, [pc, #40]	; (30d48 <sw_timer_init+0xe8>)
   30d1e:	4798      	blx	r3

	ul_previous_time = rtt_read_timer_value(RTT);
	while (ul_previous_time == rtt_read_timer_value(RTT)) {
	}
#endif
}
   30d20:	46c0      	nop			; (mov r8, r8)
   30d22:	46bd      	mov	sp, r7
   30d24:	b031      	add	sp, #196	; 0xc4
   30d26:	bd90      	pop	{r4, r7, pc}
   30d28:	0003821c 	.word	0x0003821c
   30d2c:	00028b41 	.word	0x00028b41
   30d30:	00030bc9 	.word	0x00030bc9
   30d34:	00031201 	.word	0x00031201
   30d38:	000310ed 	.word	0x000310ed
   30d3c:	0002919d 	.word	0x0002919d
   30d40:	00030c1d 	.word	0x00030c1d
   30d44:	000295b5 	.word	0x000295b5
   30d48:	000295f5 	.word	0x000295f5

00030d4c <sw_timer_enable>:

void sw_timer_enable(struct sw_timer_module *const module_inst)
{
   30d4c:	b580      	push	{r7, lr}
   30d4e:	b084      	sub	sp, #16
   30d50:	af00      	add	r7, sp, #0
   30d52:	6078      	str	r0, [r7, #4]
	struct tcc_module *tcc_module;
#endif

	Assert(module_inst);
#if (SAMD21)
	tcc_module = &module_inst->tcc_inst;
   30d54:	687b      	ldr	r3, [r7, #4]
   30d56:	3314      	adds	r3, #20
   30d58:	60fb      	str	r3, [r7, #12]

	tcc_enable(tcc_module);
   30d5a:	68fb      	ldr	r3, [r7, #12]
   30d5c:	0018      	movs	r0, r3
   30d5e:	4b03      	ldr	r3, [pc, #12]	; (30d6c <sw_timer_enable+0x20>)
   30d60:	4798      	blx	r3
	NVIC_ClearPendingIRQ(RTT_IRQn);
	NVIC_SetPriority(RTT_IRQn, 0);
	NVIC_EnableIRQ(RTT_IRQn);
	rtt_enable_interrupt(RTT, RTT_MR_RTTINCIEN);
#endif
}
   30d62:	46c0      	nop			; (mov r8, r8)
   30d64:	46bd      	mov	sp, r7
   30d66:	b004      	add	sp, #16
   30d68:	bd80      	pop	{r7, pc}
   30d6a:	46c0      	nop			; (mov r8, r8)
   30d6c:	00030bed 	.word	0x00030bed

00030d70 <sw_timer_register_callback>:
#endif
}

int sw_timer_register_callback(struct sw_timer_module *const module_inst,
		sw_timer_callback_t callback, void *context, uint32_t period)
{
   30d70:	b580      	push	{r7, lr}
   30d72:	b086      	sub	sp, #24
   30d74:	af00      	add	r7, sp, #0
   30d76:	60f8      	str	r0, [r7, #12]
   30d78:	60b9      	str	r1, [r7, #8]
   30d7a:	607a      	str	r2, [r7, #4]
   30d7c:	603b      	str	r3, [r7, #0]
	int index;
	struct sw_timer_handle *handler;

	Assert(module_inst);

	for (index = 0; index < CONF_SW_TIMER_COUNT; index++) {
   30d7e:	2300      	movs	r3, #0
   30d80:	617b      	str	r3, [r7, #20]
   30d82:	e032      	b.n	30dea <sw_timer_register_callback+0x7a>
		if (module_inst->handler[index].used == 0) {
   30d84:	68f9      	ldr	r1, [r7, #12]
   30d86:	697a      	ldr	r2, [r7, #20]
   30d88:	0013      	movs	r3, r2
   30d8a:	009b      	lsls	r3, r3, #2
   30d8c:	189b      	adds	r3, r3, r2
   30d8e:	009b      	lsls	r3, r3, #2
   30d90:	5c5b      	ldrb	r3, [r3, r1]
   30d92:	07db      	lsls	r3, r3, #31
   30d94:	0fdb      	lsrs	r3, r3, #31
   30d96:	b2db      	uxtb	r3, r3
   30d98:	2b00      	cmp	r3, #0
   30d9a:	d123      	bne.n	30de4 <sw_timer_register_callback+0x74>
			handler = &module_inst->handler[index];
   30d9c:	697a      	ldr	r2, [r7, #20]
   30d9e:	0013      	movs	r3, r2
   30da0:	009b      	lsls	r3, r3, #2
   30da2:	189b      	adds	r3, r3, r2
   30da4:	009b      	lsls	r3, r3, #2
   30da6:	68fa      	ldr	r2, [r7, #12]
   30da8:	18d3      	adds	r3, r2, r3
   30daa:	613b      	str	r3, [r7, #16]
			handler->callback = callback;
   30dac:	693b      	ldr	r3, [r7, #16]
   30dae:	68ba      	ldr	r2, [r7, #8]
   30db0:	605a      	str	r2, [r3, #4]
			handler->callback_enable = 0;
   30db2:	693b      	ldr	r3, [r7, #16]
   30db4:	781a      	ldrb	r2, [r3, #0]
   30db6:	2102      	movs	r1, #2
   30db8:	438a      	bics	r2, r1
   30dba:	701a      	strb	r2, [r3, #0]
			handler->context = context;
   30dbc:	693b      	ldr	r3, [r7, #16]
   30dbe:	687a      	ldr	r2, [r7, #4]
   30dc0:	609a      	str	r2, [r3, #8]
			handler->period = period / module_inst->accuracy;
   30dc2:	68fb      	ldr	r3, [r7, #12]
   30dc4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
   30dc6:	4b0d      	ldr	r3, [pc, #52]	; (30dfc <sw_timer_register_callback+0x8c>)
   30dc8:	0011      	movs	r1, r2
   30dca:	6838      	ldr	r0, [r7, #0]
   30dcc:	4798      	blx	r3
   30dce:	0003      	movs	r3, r0
   30dd0:	001a      	movs	r2, r3
   30dd2:	693b      	ldr	r3, [r7, #16]
   30dd4:	60da      	str	r2, [r3, #12]
			handler->used = 1;
   30dd6:	693b      	ldr	r3, [r7, #16]
   30dd8:	781a      	ldrb	r2, [r3, #0]
   30dda:	2101      	movs	r1, #1
   30ddc:	430a      	orrs	r2, r1
   30dde:	701a      	strb	r2, [r3, #0]
			return index;
   30de0:	697b      	ldr	r3, [r7, #20]
   30de2:	e007      	b.n	30df4 <sw_timer_register_callback+0x84>
	for (index = 0; index < CONF_SW_TIMER_COUNT; index++) {
   30de4:	697b      	ldr	r3, [r7, #20]
   30de6:	3301      	adds	r3, #1
   30de8:	617b      	str	r3, [r7, #20]
   30dea:	697b      	ldr	r3, [r7, #20]
   30dec:	2b00      	cmp	r3, #0
   30dee:	ddc9      	ble.n	30d84 <sw_timer_register_callback+0x14>
		}
	}
	return -1;
   30df0:	2301      	movs	r3, #1
   30df2:	425b      	negs	r3, r3
}
   30df4:	0018      	movs	r0, r3
   30df6:	46bd      	mov	sp, r7
   30df8:	b006      	add	sp, #24
   30dfa:	bd80      	pop	{r7, pc}
   30dfc:	000310ed 	.word	0x000310ed

00030e00 <sw_timer_enable_callback>:

	handler->used = 0;
}

void sw_timer_enable_callback(struct sw_timer_module *const module_inst, int timer_id, uint32_t delay)
{
   30e00:	b580      	push	{r7, lr}
   30e02:	b086      	sub	sp, #24
   30e04:	af00      	add	r7, sp, #0
   30e06:	60f8      	str	r0, [r7, #12]
   30e08:	60b9      	str	r1, [r7, #8]
   30e0a:	607a      	str	r2, [r7, #4]
	struct sw_timer_handle *handler;

	Assert(module_inst);
	Assert((timer_id >= 0 && timer_id < CONF_SW_TIMER_COUNT));

	handler = &module_inst->handler[timer_id];
   30e0c:	68ba      	ldr	r2, [r7, #8]
   30e0e:	0013      	movs	r3, r2
   30e10:	009b      	lsls	r3, r3, #2
   30e12:	189b      	adds	r3, r3, r2
   30e14:	009b      	lsls	r3, r3, #2
   30e16:	68fa      	ldr	r2, [r7, #12]
   30e18:	18d3      	adds	r3, r2, r3
   30e1a:	617b      	str	r3, [r7, #20]

	handler->callback_enable = 1;
   30e1c:	697b      	ldr	r3, [r7, #20]
   30e1e:	781a      	ldrb	r2, [r3, #0]
   30e20:	2102      	movs	r1, #2
   30e22:	430a      	orrs	r2, r1
   30e24:	701a      	strb	r2, [r3, #0]
	handler->expire_time = sw_timer_tick + (delay / module_inst->accuracy);
   30e26:	68fb      	ldr	r3, [r7, #12]
   30e28:	6d5a      	ldr	r2, [r3, #84]	; 0x54
   30e2a:	4b07      	ldr	r3, [pc, #28]	; (30e48 <sw_timer_enable_callback+0x48>)
   30e2c:	0011      	movs	r1, r2
   30e2e:	6878      	ldr	r0, [r7, #4]
   30e30:	4798      	blx	r3
   30e32:	0003      	movs	r3, r0
   30e34:	001a      	movs	r2, r3
   30e36:	4b05      	ldr	r3, [pc, #20]	; (30e4c <sw_timer_enable_callback+0x4c>)
   30e38:	681b      	ldr	r3, [r3, #0]
   30e3a:	18d2      	adds	r2, r2, r3
   30e3c:	697b      	ldr	r3, [r7, #20]
   30e3e:	611a      	str	r2, [r3, #16]
}
   30e40:	46c0      	nop			; (mov r8, r8)
   30e42:	46bd      	mov	sp, r7
   30e44:	b006      	add	sp, #24
   30e46:	bd80      	pop	{r7, pc}
   30e48:	000310ed 	.word	0x000310ed
   30e4c:	200041ac 	.word	0x200041ac

00030e50 <sw_timer_disable_callback>:

void sw_timer_disable_callback(struct sw_timer_module *const module_inst, int timer_id)
{
   30e50:	b580      	push	{r7, lr}
   30e52:	b084      	sub	sp, #16
   30e54:	af00      	add	r7, sp, #0
   30e56:	6078      	str	r0, [r7, #4]
   30e58:	6039      	str	r1, [r7, #0]
	struct sw_timer_handle *handler;

	Assert(module_inst);
	Assert((timer_id >= 0 && timer_id < CONF_SW_TIMER_COUNT));

	handler = &module_inst->handler[timer_id];
   30e5a:	683a      	ldr	r2, [r7, #0]
   30e5c:	0013      	movs	r3, r2
   30e5e:	009b      	lsls	r3, r3, #2
   30e60:	189b      	adds	r3, r3, r2
   30e62:	009b      	lsls	r3, r3, #2
   30e64:	687a      	ldr	r2, [r7, #4]
   30e66:	18d3      	adds	r3, r2, r3
   30e68:	60fb      	str	r3, [r7, #12]

	handler->callback_enable = 0;
   30e6a:	68fb      	ldr	r3, [r7, #12]
   30e6c:	781a      	ldrb	r2, [r3, #0]
   30e6e:	2102      	movs	r1, #2
   30e70:	438a      	bics	r2, r1
   30e72:	701a      	strb	r2, [r3, #0]
}
   30e74:	46c0      	nop			; (mov r8, r8)
   30e76:	46bd      	mov	sp, r7
   30e78:	b004      	add	sp, #16
   30e7a:	bd80      	pop	{r7, pc}

00030e7c <sw_timer_task>:

void sw_timer_task(struct sw_timer_module *const module_inst)
{
   30e7c:	b590      	push	{r4, r7, lr}
   30e7e:	b085      	sub	sp, #20
   30e80:	af00      	add	r7, sp, #0
   30e82:	6078      	str	r0, [r7, #4]
	int index;
	struct sw_timer_handle *handler;

	Assert(module_inst);

	for (index = 0; index < CONF_SW_TIMER_COUNT; index++) {
   30e84:	2300      	movs	r3, #0
   30e86:	60fb      	str	r3, [r7, #12]
   30e88:	e053      	b.n	30f32 <sw_timer_task+0xb6>
		if (module_inst->handler[index].used && module_inst->handler[index].callback_enable) {
   30e8a:	6879      	ldr	r1, [r7, #4]
   30e8c:	68fa      	ldr	r2, [r7, #12]
   30e8e:	0013      	movs	r3, r2
   30e90:	009b      	lsls	r3, r3, #2
   30e92:	189b      	adds	r3, r3, r2
   30e94:	009b      	lsls	r3, r3, #2
   30e96:	5c5b      	ldrb	r3, [r3, r1]
   30e98:	07db      	lsls	r3, r3, #31
   30e9a:	0fdb      	lsrs	r3, r3, #31
   30e9c:	b2db      	uxtb	r3, r3
   30e9e:	2b00      	cmp	r3, #0
   30ea0:	d044      	beq.n	30f2c <sw_timer_task+0xb0>
   30ea2:	6879      	ldr	r1, [r7, #4]
   30ea4:	68fa      	ldr	r2, [r7, #12]
   30ea6:	0013      	movs	r3, r2
   30ea8:	009b      	lsls	r3, r3, #2
   30eaa:	189b      	adds	r3, r3, r2
   30eac:	009b      	lsls	r3, r3, #2
   30eae:	5c5b      	ldrb	r3, [r3, r1]
   30eb0:	079b      	lsls	r3, r3, #30
   30eb2:	0fdb      	lsrs	r3, r3, #31
   30eb4:	b2db      	uxtb	r3, r3
   30eb6:	2b00      	cmp	r3, #0
   30eb8:	d038      	beq.n	30f2c <sw_timer_task+0xb0>
			handler = &module_inst->handler[index];
   30eba:	68fa      	ldr	r2, [r7, #12]
   30ebc:	0013      	movs	r3, r2
   30ebe:	009b      	lsls	r3, r3, #2
   30ec0:	189b      	adds	r3, r3, r2
   30ec2:	009b      	lsls	r3, r3, #2
   30ec4:	687a      	ldr	r2, [r7, #4]
   30ec6:	18d3      	adds	r3, r2, r3
   30ec8:	60bb      	str	r3, [r7, #8]
			if ((int)(handler->expire_time - sw_timer_tick) < 0 && handler->busy == 0) {
   30eca:	68bb      	ldr	r3, [r7, #8]
   30ecc:	691a      	ldr	r2, [r3, #16]
   30ece:	4b1c      	ldr	r3, [pc, #112]	; (30f40 <sw_timer_task+0xc4>)
   30ed0:	681b      	ldr	r3, [r3, #0]
   30ed2:	1ad3      	subs	r3, r2, r3
   30ed4:	d52a      	bpl.n	30f2c <sw_timer_task+0xb0>
   30ed6:	68bb      	ldr	r3, [r7, #8]
   30ed8:	781b      	ldrb	r3, [r3, #0]
   30eda:	2204      	movs	r2, #4
   30edc:	4013      	ands	r3, r2
   30ede:	b2db      	uxtb	r3, r3
   30ee0:	2b00      	cmp	r3, #0
   30ee2:	d123      	bne.n	30f2c <sw_timer_task+0xb0>
				/* Enter critical section. */
				handler->busy = 1;
   30ee4:	68bb      	ldr	r3, [r7, #8]
   30ee6:	781a      	ldrb	r2, [r3, #0]
   30ee8:	2104      	movs	r1, #4
   30eea:	430a      	orrs	r2, r1
   30eec:	701a      	strb	r2, [r3, #0]
				/* Timer was expired. */
				if (handler->period > 0) {
   30eee:	68bb      	ldr	r3, [r7, #8]
   30ef0:	68db      	ldr	r3, [r3, #12]
   30ef2:	2b00      	cmp	r3, #0
   30ef4:	d007      	beq.n	30f06 <sw_timer_task+0x8a>
					handler->expire_time = sw_timer_tick + handler->period;
   30ef6:	68bb      	ldr	r3, [r7, #8]
   30ef8:	68da      	ldr	r2, [r3, #12]
   30efa:	4b11      	ldr	r3, [pc, #68]	; (30f40 <sw_timer_task+0xc4>)
   30efc:	681b      	ldr	r3, [r3, #0]
   30efe:	18d2      	adds	r2, r2, r3
   30f00:	68bb      	ldr	r3, [r7, #8]
   30f02:	611a      	str	r2, [r3, #16]
   30f04:	e004      	b.n	30f10 <sw_timer_task+0x94>
				} else {
					/* One shot. */
					handler->callback_enable = 0;
   30f06:	68bb      	ldr	r3, [r7, #8]
   30f08:	781a      	ldrb	r2, [r3, #0]
   30f0a:	2102      	movs	r1, #2
   30f0c:	438a      	bics	r2, r1
   30f0e:	701a      	strb	r2, [r3, #0]
				}
				/* Call callback function. */
				handler->callback(module_inst, index, handler->context, handler->period);
   30f10:	68bb      	ldr	r3, [r7, #8]
   30f12:	685c      	ldr	r4, [r3, #4]
   30f14:	68bb      	ldr	r3, [r7, #8]
   30f16:	689a      	ldr	r2, [r3, #8]
   30f18:	68bb      	ldr	r3, [r7, #8]
   30f1a:	68db      	ldr	r3, [r3, #12]
   30f1c:	68f9      	ldr	r1, [r7, #12]
   30f1e:	6878      	ldr	r0, [r7, #4]
   30f20:	47a0      	blx	r4
				/* Leave critical section. */
				handler->busy = 0;
   30f22:	68bb      	ldr	r3, [r7, #8]
   30f24:	781a      	ldrb	r2, [r3, #0]
   30f26:	2104      	movs	r1, #4
   30f28:	438a      	bics	r2, r1
   30f2a:	701a      	strb	r2, [r3, #0]
	for (index = 0; index < CONF_SW_TIMER_COUNT; index++) {
   30f2c:	68fb      	ldr	r3, [r7, #12]
   30f2e:	3301      	adds	r3, #1
   30f30:	60fb      	str	r3, [r7, #12]
   30f32:	68fb      	ldr	r3, [r7, #12]
   30f34:	2b00      	cmp	r3, #0
   30f36:	dda8      	ble.n	30e8a <sw_timer_task+0xe>
			}
		}
	}
}
   30f38:	46c0      	nop			; (mov r8, r8)
   30f3a:	46bd      	mov	sp, r7
   30f3c:	b005      	add	sp, #20
   30f3e:	bd90      	pop	{r4, r7, pc}
   30f40:	200041ac 	.word	0x200041ac

00030f44 <main>:
 * @brief Main application function.
 * Application entry point.
 * @return int
 */
int main(void)
{
   30f44:	b580      	push	{r7, lr}
   30f46:	af00      	add	r7, sp, #0
    /* Initialize the board. */
    system_init();
   30f48:	4b06      	ldr	r3, [pc, #24]	; (30f64 <main+0x20>)
   30f4a:	4798      	blx	r3

    /* Initialize the UART console. */
    InitializeSerialConsole();
   30f4c:	4b06      	ldr	r3, [pc, #24]	; (30f68 <main+0x24>)
   30f4e:	4798      	blx	r3

    // Initialize trace capabilities
    vTraceEnable(TRC_START);
   30f50:	2001      	movs	r0, #1
   30f52:	4b06      	ldr	r3, [pc, #24]	; (30f6c <main+0x28>)
   30f54:	4798      	blx	r3
    // Start FreeRTOS scheduler
    vTaskStartScheduler();
   30f56:	4b06      	ldr	r3, [pc, #24]	; (30f70 <main+0x2c>)
   30f58:	4798      	blx	r3

    return 0;  // Will not get here
   30f5a:	2300      	movs	r3, #0
}
   30f5c:	0018      	movs	r0, r3
   30f5e:	46bd      	mov	sp, r7
   30f60:	bd80      	pop	{r7, pc}
   30f62:	46c0      	nop			; (mov r8, r8)
   30f64:	00028a35 	.word	0x00028a35
   30f68:	0001c4a9 	.word	0x0001c4a9
   30f6c:	00016b71 	.word	0x00016b71
   30f70:	0001ab01 	.word	0x0001ab01

00030f74 <vApplicationDaemonTaskStartupHook>:
 *					here will be called before other tasks are initilized.
 * @param[in]        None
 * @return           None
 */
void vApplicationDaemonTaskStartupHook(void)
{
   30f74:	b580      	push	{r7, lr}
   30f76:	af00      	add	r7, sp, #0
    SerialConsoleWriteString("\r\n\r\n-----ESE516 Main Program-----\r\n");
   30f78:	4b0f      	ldr	r3, [pc, #60]	; (30fb8 <vApplicationDaemonTaskStartupHook+0x44>)
   30f7a:	0018      	movs	r0, r3
   30f7c:	4b0f      	ldr	r3, [pc, #60]	; (30fbc <vApplicationDaemonTaskStartupHook+0x48>)
   30f7e:	4798      	blx	r3

    // Initialize HW that needs FreeRTOS Initialization
    SerialConsoleWriteString("\r\n\r\nInitialize HW...\r\n");
   30f80:	4b0f      	ldr	r3, [pc, #60]	; (30fc0 <vApplicationDaemonTaskStartupHook+0x4c>)
   30f82:	0018      	movs	r0, r3
   30f84:	4b0d      	ldr	r3, [pc, #52]	; (30fbc <vApplicationDaemonTaskStartupHook+0x48>)
   30f86:	4798      	blx	r3
    if (I2cInitializeDriver() != STATUS_OK) {
   30f88:	4b0e      	ldr	r3, [pc, #56]	; (30fc4 <vApplicationDaemonTaskStartupHook+0x50>)
   30f8a:	4798      	blx	r3
   30f8c:	1e03      	subs	r3, r0, #0
   30f8e:	d004      	beq.n	30f9a <vApplicationDaemonTaskStartupHook+0x26>
        SerialConsoleWriteString("Error initializing I2C Driver!\r\n");
   30f90:	4b0d      	ldr	r3, [pc, #52]	; (30fc8 <vApplicationDaemonTaskStartupHook+0x54>)
   30f92:	0018      	movs	r0, r3
   30f94:	4b09      	ldr	r3, [pc, #36]	; (30fbc <vApplicationDaemonTaskStartupHook+0x48>)
   30f96:	4798      	blx	r3
   30f98:	e003      	b.n	30fa2 <vApplicationDaemonTaskStartupHook+0x2e>
    } else {
        SerialConsoleWriteString("Initialized I2C Driver!\r\n");
   30f9a:	4b0c      	ldr	r3, [pc, #48]	; (30fcc <vApplicationDaemonTaskStartupHook+0x58>)
   30f9c:	0018      	movs	r0, r3
   30f9e:	4b07      	ldr	r3, [pc, #28]	; (30fbc <vApplicationDaemonTaskStartupHook+0x48>)
   30fa0:	4798      	blx	r3
    if(InitLED() == 0){
        SerialConsoleWriteString("Initialized LED Strip!!!\r\n");
    }
    #endif

    StartTasks();
   30fa2:	4b0b      	ldr	r3, [pc, #44]	; (30fd0 <vApplicationDaemonTaskStartupHook+0x5c>)
   30fa4:	4798      	blx	r3

    vTaskSuspend(daemonTaskHandle);
   30fa6:	4b0b      	ldr	r3, [pc, #44]	; (30fd4 <vApplicationDaemonTaskStartupHook+0x60>)
   30fa8:	681b      	ldr	r3, [r3, #0]
   30faa:	0018      	movs	r0, r3
   30fac:	4b0a      	ldr	r3, [pc, #40]	; (30fd8 <vApplicationDaemonTaskStartupHook+0x64>)
   30fae:	4798      	blx	r3
}
   30fb0:	46c0      	nop			; (mov r8, r8)
   30fb2:	46bd      	mov	sp, r7
   30fb4:	bd80      	pop	{r7, pc}
   30fb6:	46c0      	nop			; (mov r8, r8)
   30fb8:	00038228 	.word	0x00038228
   30fbc:	0001c519 	.word	0x0001c519
   30fc0:	0003824c 	.word	0x0003824c
   30fc4:	00013b49 	.word	0x00013b49
   30fc8:	00038264 	.word	0x00038264
   30fcc:	00038288 	.word	0x00038288
   30fd0:	00030fdd 	.word	0x00030fdd
   30fd4:	200041b4 	.word	0x200041b4
   30fd8:	0001a9a5 	.word	0x0001a9a5

00030fdc <StartTasks>:
 * @details
 * @param[in]        None
 * @return           None
 */
static void StartTasks(void)
{
   30fdc:	b590      	push	{r4, r7, lr}
   30fde:	b083      	sub	sp, #12
   30fe0:	af02      	add	r7, sp, #8
    snprintf(bufferPrint, 64, "Heap before starting tasks: %d\r\n", xPortGetFreeHeapSize());
   30fe2:	4b26      	ldr	r3, [pc, #152]	; (3107c <StartTasks+0xa0>)
   30fe4:	4798      	blx	r3
   30fe6:	0003      	movs	r3, r0
   30fe8:	4a25      	ldr	r2, [pc, #148]	; (31080 <StartTasks+0xa4>)
   30fea:	4826      	ldr	r0, [pc, #152]	; (31084 <StartTasks+0xa8>)
   30fec:	2140      	movs	r1, #64	; 0x40
   30fee:	4c26      	ldr	r4, [pc, #152]	; (31088 <StartTasks+0xac>)
   30ff0:	47a0      	blx	r4
    SerialConsoleWriteString(bufferPrint);
   30ff2:	4b24      	ldr	r3, [pc, #144]	; (31084 <StartTasks+0xa8>)
   30ff4:	0018      	movs	r0, r3
   30ff6:	4b25      	ldr	r3, [pc, #148]	; (3108c <StartTasks+0xb0>)
   30ff8:	4798      	blx	r3

    // Initialize Tasks here

    if (xTaskCreate(vCommandConsoleTask, "CLI_TASK", CLI_TASK_SIZE, NULL, CLI_PRIORITY, &cliTaskHandle) != pdPASS) {
   30ffa:	23c8      	movs	r3, #200	; 0xc8
   30ffc:	005a      	lsls	r2, r3, #1
   30ffe:	4924      	ldr	r1, [pc, #144]	; (31090 <StartTasks+0xb4>)
   31000:	4824      	ldr	r0, [pc, #144]	; (31094 <StartTasks+0xb8>)
   31002:	4b25      	ldr	r3, [pc, #148]	; (31098 <StartTasks+0xbc>)
   31004:	9301      	str	r3, [sp, #4]
   31006:	2304      	movs	r3, #4
   31008:	9300      	str	r3, [sp, #0]
   3100a:	2300      	movs	r3, #0
   3100c:	4c23      	ldr	r4, [pc, #140]	; (3109c <StartTasks+0xc0>)
   3100e:	47a0      	blx	r4
   31010:	0003      	movs	r3, r0
   31012:	2b01      	cmp	r3, #1
   31014:	d003      	beq.n	3101e <StartTasks+0x42>
        SerialConsoleWriteString("ERR: CLI task could not be initialized!\r\n");
   31016:	4b22      	ldr	r3, [pc, #136]	; (310a0 <StartTasks+0xc4>)
   31018:	0018      	movs	r0, r3
   3101a:	4b1c      	ldr	r3, [pc, #112]	; (3108c <StartTasks+0xb0>)
   3101c:	4798      	blx	r3
    }

    snprintf(bufferPrint, 64, "Heap after starting CLI: %d\r\n", xPortGetFreeHeapSize());
   3101e:	4b17      	ldr	r3, [pc, #92]	; (3107c <StartTasks+0xa0>)
   31020:	4798      	blx	r3
   31022:	0003      	movs	r3, r0
   31024:	4a1f      	ldr	r2, [pc, #124]	; (310a4 <StartTasks+0xc8>)
   31026:	4817      	ldr	r0, [pc, #92]	; (31084 <StartTasks+0xa8>)
   31028:	2140      	movs	r1, #64	; 0x40
   3102a:	4c17      	ldr	r4, [pc, #92]	; (31088 <StartTasks+0xac>)
   3102c:	47a0      	blx	r4
    SerialConsoleWriteString(bufferPrint);
   3102e:	4b15      	ldr	r3, [pc, #84]	; (31084 <StartTasks+0xa8>)
   31030:	0018      	movs	r0, r3
   31032:	4b16      	ldr	r3, [pc, #88]	; (3108c <StartTasks+0xb0>)
   31034:	4798      	blx	r3

    if (xTaskCreate(vWifiTask, "WIFI_TASK", WIFI_TASK_SIZE, NULL, WIFI_PRIORITY, &wifiTaskHandle) != pdPASS) {
   31036:	23fa      	movs	r3, #250	; 0xfa
   31038:	009a      	lsls	r2, r3, #2
   3103a:	491b      	ldr	r1, [pc, #108]	; (310a8 <StartTasks+0xcc>)
   3103c:	481b      	ldr	r0, [pc, #108]	; (310ac <StartTasks+0xd0>)
   3103e:	4b1c      	ldr	r3, [pc, #112]	; (310b0 <StartTasks+0xd4>)
   31040:	9301      	str	r3, [sp, #4]
   31042:	2303      	movs	r3, #3
   31044:	9300      	str	r3, [sp, #0]
   31046:	2300      	movs	r3, #0
   31048:	4c14      	ldr	r4, [pc, #80]	; (3109c <StartTasks+0xc0>)
   3104a:	47a0      	blx	r4
   3104c:	0003      	movs	r3, r0
   3104e:	2b01      	cmp	r3, #1
   31050:	d003      	beq.n	3105a <StartTasks+0x7e>
        SerialConsoleWriteString("ERR: WIFI task could not be initialized!\r\n");
   31052:	4b18      	ldr	r3, [pc, #96]	; (310b4 <StartTasks+0xd8>)
   31054:	0018      	movs	r0, r3
   31056:	4b0d      	ldr	r3, [pc, #52]	; (3108c <StartTasks+0xb0>)
   31058:	4798      	blx	r3
    }
    snprintf(bufferPrint, 64, "Heap after starting WIFI: %d\r\n", xPortGetFreeHeapSize());
   3105a:	4b08      	ldr	r3, [pc, #32]	; (3107c <StartTasks+0xa0>)
   3105c:	4798      	blx	r3
   3105e:	0003      	movs	r3, r0
   31060:	4a15      	ldr	r2, [pc, #84]	; (310b8 <StartTasks+0xdc>)
   31062:	4808      	ldr	r0, [pc, #32]	; (31084 <StartTasks+0xa8>)
   31064:	2140      	movs	r1, #64	; 0x40
   31066:	4c08      	ldr	r4, [pc, #32]	; (31088 <StartTasks+0xac>)
   31068:	47a0      	blx	r4
    SerialConsoleWriteString(bufferPrint);
   3106a:	4b06      	ldr	r3, [pc, #24]	; (31084 <StartTasks+0xa8>)
   3106c:	0018      	movs	r0, r3
   3106e:	4b07      	ldr	r3, [pc, #28]	; (3108c <StartTasks+0xb0>)
   31070:	4798      	blx	r3
}
   31072:	46c0      	nop			; (mov r8, r8)
   31074:	46bd      	mov	sp, r7
   31076:	b001      	add	sp, #4
   31078:	bd90      	pop	{r4, r7, pc}
   3107a:	46c0      	nop			; (mov r8, r8)
   3107c:	00018ae1 	.word	0x00018ae1
   31080:	000382a4 	.word	0x000382a4
   31084:	200056f0 	.word	0x200056f0
   31088:	00033371 	.word	0x00033371
   3108c:	0001c519 	.word	0x0001c519
   31090:	000382c8 	.word	0x000382c8
   31094:	00012e71 	.word	0x00012e71
   31098:	200041b0 	.word	0x200041b0
   3109c:	0001a529 	.word	0x0001a529
   310a0:	000382d4 	.word	0x000382d4
   310a4:	00038300 	.word	0x00038300
   310a8:	00038320 	.word	0x00038320
   310ac:	000159a9 	.word	0x000159a9
   310b0:	200041b8 	.word	0x200041b8
   310b4:	0003832c 	.word	0x0003832c
   310b8:	00038358 	.word	0x00038358

000310bc <vApplicationMallocFailedHook>:

void vApplicationMallocFailedHook(void)
{
   310bc:	b580      	push	{r7, lr}
   310be:	af00      	add	r7, sp, #0
    SerialConsoleWriteString("Error on memory allocation on FREERTOS!\r\n");
   310c0:	4b02      	ldr	r3, [pc, #8]	; (310cc <vApplicationMallocFailedHook+0x10>)
   310c2:	0018      	movs	r0, r3
   310c4:	4b02      	ldr	r3, [pc, #8]	; (310d0 <vApplicationMallocFailedHook+0x14>)
   310c6:	4798      	blx	r3
    while (1)
   310c8:	e7fe      	b.n	310c8 <vApplicationMallocFailedHook+0xc>
   310ca:	46c0      	nop			; (mov r8, r8)
   310cc:	00038378 	.word	0x00038378
   310d0:	0001c519 	.word	0x0001c519

000310d4 <vApplicationStackOverflowHook>:
        ;
}

void vApplicationStackOverflowHook(void)
{
   310d4:	b580      	push	{r7, lr}
   310d6:	af00      	add	r7, sp, #0
    SerialConsoleWriteString("Error on stack overflow on FREERTOS!\r\n");
   310d8:	4b02      	ldr	r3, [pc, #8]	; (310e4 <vApplicationStackOverflowHook+0x10>)
   310da:	0018      	movs	r0, r3
   310dc:	4b02      	ldr	r3, [pc, #8]	; (310e8 <vApplicationStackOverflowHook+0x14>)
   310de:	4798      	blx	r3
    while (1)
   310e0:	e7fe      	b.n	310e0 <vApplicationStackOverflowHook+0xc>
   310e2:	46c0      	nop			; (mov r8, r8)
   310e4:	000383a4 	.word	0x000383a4
   310e8:	0001c519 	.word	0x0001c519

000310ec <__udivsi3>:
   310ec:	2200      	movs	r2, #0
   310ee:	0843      	lsrs	r3, r0, #1
   310f0:	428b      	cmp	r3, r1
   310f2:	d374      	bcc.n	311de <__udivsi3+0xf2>
   310f4:	0903      	lsrs	r3, r0, #4
   310f6:	428b      	cmp	r3, r1
   310f8:	d35f      	bcc.n	311ba <__udivsi3+0xce>
   310fa:	0a03      	lsrs	r3, r0, #8
   310fc:	428b      	cmp	r3, r1
   310fe:	d344      	bcc.n	3118a <__udivsi3+0x9e>
   31100:	0b03      	lsrs	r3, r0, #12
   31102:	428b      	cmp	r3, r1
   31104:	d328      	bcc.n	31158 <__udivsi3+0x6c>
   31106:	0c03      	lsrs	r3, r0, #16
   31108:	428b      	cmp	r3, r1
   3110a:	d30d      	bcc.n	31128 <__udivsi3+0x3c>
   3110c:	22ff      	movs	r2, #255	; 0xff
   3110e:	0209      	lsls	r1, r1, #8
   31110:	ba12      	rev	r2, r2
   31112:	0c03      	lsrs	r3, r0, #16
   31114:	428b      	cmp	r3, r1
   31116:	d302      	bcc.n	3111e <__udivsi3+0x32>
   31118:	1212      	asrs	r2, r2, #8
   3111a:	0209      	lsls	r1, r1, #8
   3111c:	d065      	beq.n	311ea <__udivsi3+0xfe>
   3111e:	0b03      	lsrs	r3, r0, #12
   31120:	428b      	cmp	r3, r1
   31122:	d319      	bcc.n	31158 <__udivsi3+0x6c>
   31124:	e000      	b.n	31128 <__udivsi3+0x3c>
   31126:	0a09      	lsrs	r1, r1, #8
   31128:	0bc3      	lsrs	r3, r0, #15
   3112a:	428b      	cmp	r3, r1
   3112c:	d301      	bcc.n	31132 <__udivsi3+0x46>
   3112e:	03cb      	lsls	r3, r1, #15
   31130:	1ac0      	subs	r0, r0, r3
   31132:	4152      	adcs	r2, r2
   31134:	0b83      	lsrs	r3, r0, #14
   31136:	428b      	cmp	r3, r1
   31138:	d301      	bcc.n	3113e <__udivsi3+0x52>
   3113a:	038b      	lsls	r3, r1, #14
   3113c:	1ac0      	subs	r0, r0, r3
   3113e:	4152      	adcs	r2, r2
   31140:	0b43      	lsrs	r3, r0, #13
   31142:	428b      	cmp	r3, r1
   31144:	d301      	bcc.n	3114a <__udivsi3+0x5e>
   31146:	034b      	lsls	r3, r1, #13
   31148:	1ac0      	subs	r0, r0, r3
   3114a:	4152      	adcs	r2, r2
   3114c:	0b03      	lsrs	r3, r0, #12
   3114e:	428b      	cmp	r3, r1
   31150:	d301      	bcc.n	31156 <__udivsi3+0x6a>
   31152:	030b      	lsls	r3, r1, #12
   31154:	1ac0      	subs	r0, r0, r3
   31156:	4152      	adcs	r2, r2
   31158:	0ac3      	lsrs	r3, r0, #11
   3115a:	428b      	cmp	r3, r1
   3115c:	d301      	bcc.n	31162 <__udivsi3+0x76>
   3115e:	02cb      	lsls	r3, r1, #11
   31160:	1ac0      	subs	r0, r0, r3
   31162:	4152      	adcs	r2, r2
   31164:	0a83      	lsrs	r3, r0, #10
   31166:	428b      	cmp	r3, r1
   31168:	d301      	bcc.n	3116e <__udivsi3+0x82>
   3116a:	028b      	lsls	r3, r1, #10
   3116c:	1ac0      	subs	r0, r0, r3
   3116e:	4152      	adcs	r2, r2
   31170:	0a43      	lsrs	r3, r0, #9
   31172:	428b      	cmp	r3, r1
   31174:	d301      	bcc.n	3117a <__udivsi3+0x8e>
   31176:	024b      	lsls	r3, r1, #9
   31178:	1ac0      	subs	r0, r0, r3
   3117a:	4152      	adcs	r2, r2
   3117c:	0a03      	lsrs	r3, r0, #8
   3117e:	428b      	cmp	r3, r1
   31180:	d301      	bcc.n	31186 <__udivsi3+0x9a>
   31182:	020b      	lsls	r3, r1, #8
   31184:	1ac0      	subs	r0, r0, r3
   31186:	4152      	adcs	r2, r2
   31188:	d2cd      	bcs.n	31126 <__udivsi3+0x3a>
   3118a:	09c3      	lsrs	r3, r0, #7
   3118c:	428b      	cmp	r3, r1
   3118e:	d301      	bcc.n	31194 <__udivsi3+0xa8>
   31190:	01cb      	lsls	r3, r1, #7
   31192:	1ac0      	subs	r0, r0, r3
   31194:	4152      	adcs	r2, r2
   31196:	0983      	lsrs	r3, r0, #6
   31198:	428b      	cmp	r3, r1
   3119a:	d301      	bcc.n	311a0 <__udivsi3+0xb4>
   3119c:	018b      	lsls	r3, r1, #6
   3119e:	1ac0      	subs	r0, r0, r3
   311a0:	4152      	adcs	r2, r2
   311a2:	0943      	lsrs	r3, r0, #5
   311a4:	428b      	cmp	r3, r1
   311a6:	d301      	bcc.n	311ac <__udivsi3+0xc0>
   311a8:	014b      	lsls	r3, r1, #5
   311aa:	1ac0      	subs	r0, r0, r3
   311ac:	4152      	adcs	r2, r2
   311ae:	0903      	lsrs	r3, r0, #4
   311b0:	428b      	cmp	r3, r1
   311b2:	d301      	bcc.n	311b8 <__udivsi3+0xcc>
   311b4:	010b      	lsls	r3, r1, #4
   311b6:	1ac0      	subs	r0, r0, r3
   311b8:	4152      	adcs	r2, r2
   311ba:	08c3      	lsrs	r3, r0, #3
   311bc:	428b      	cmp	r3, r1
   311be:	d301      	bcc.n	311c4 <__udivsi3+0xd8>
   311c0:	00cb      	lsls	r3, r1, #3
   311c2:	1ac0      	subs	r0, r0, r3
   311c4:	4152      	adcs	r2, r2
   311c6:	0883      	lsrs	r3, r0, #2
   311c8:	428b      	cmp	r3, r1
   311ca:	d301      	bcc.n	311d0 <__udivsi3+0xe4>
   311cc:	008b      	lsls	r3, r1, #2
   311ce:	1ac0      	subs	r0, r0, r3
   311d0:	4152      	adcs	r2, r2
   311d2:	0843      	lsrs	r3, r0, #1
   311d4:	428b      	cmp	r3, r1
   311d6:	d301      	bcc.n	311dc <__udivsi3+0xf0>
   311d8:	004b      	lsls	r3, r1, #1
   311da:	1ac0      	subs	r0, r0, r3
   311dc:	4152      	adcs	r2, r2
   311de:	1a41      	subs	r1, r0, r1
   311e0:	d200      	bcs.n	311e4 <__udivsi3+0xf8>
   311e2:	4601      	mov	r1, r0
   311e4:	4152      	adcs	r2, r2
   311e6:	4610      	mov	r0, r2
   311e8:	4770      	bx	lr
   311ea:	e7ff      	b.n	311ec <__udivsi3+0x100>
   311ec:	b501      	push	{r0, lr}
   311ee:	2000      	movs	r0, #0
   311f0:	f000 f8f0 	bl	313d4 <__aeabi_idiv0>
   311f4:	bd02      	pop	{r1, pc}
   311f6:	46c0      	nop			; (mov r8, r8)

000311f8 <__aeabi_uidivmod>:
   311f8:	2900      	cmp	r1, #0
   311fa:	d0f7      	beq.n	311ec <__udivsi3+0x100>
   311fc:	e776      	b.n	310ec <__udivsi3>
   311fe:	4770      	bx	lr

00031200 <__divsi3>:
   31200:	4603      	mov	r3, r0
   31202:	430b      	orrs	r3, r1
   31204:	d47f      	bmi.n	31306 <__divsi3+0x106>
   31206:	2200      	movs	r2, #0
   31208:	0843      	lsrs	r3, r0, #1
   3120a:	428b      	cmp	r3, r1
   3120c:	d374      	bcc.n	312f8 <__divsi3+0xf8>
   3120e:	0903      	lsrs	r3, r0, #4
   31210:	428b      	cmp	r3, r1
   31212:	d35f      	bcc.n	312d4 <__divsi3+0xd4>
   31214:	0a03      	lsrs	r3, r0, #8
   31216:	428b      	cmp	r3, r1
   31218:	d344      	bcc.n	312a4 <__divsi3+0xa4>
   3121a:	0b03      	lsrs	r3, r0, #12
   3121c:	428b      	cmp	r3, r1
   3121e:	d328      	bcc.n	31272 <__divsi3+0x72>
   31220:	0c03      	lsrs	r3, r0, #16
   31222:	428b      	cmp	r3, r1
   31224:	d30d      	bcc.n	31242 <__divsi3+0x42>
   31226:	22ff      	movs	r2, #255	; 0xff
   31228:	0209      	lsls	r1, r1, #8
   3122a:	ba12      	rev	r2, r2
   3122c:	0c03      	lsrs	r3, r0, #16
   3122e:	428b      	cmp	r3, r1
   31230:	d302      	bcc.n	31238 <__divsi3+0x38>
   31232:	1212      	asrs	r2, r2, #8
   31234:	0209      	lsls	r1, r1, #8
   31236:	d065      	beq.n	31304 <__divsi3+0x104>
   31238:	0b03      	lsrs	r3, r0, #12
   3123a:	428b      	cmp	r3, r1
   3123c:	d319      	bcc.n	31272 <__divsi3+0x72>
   3123e:	e000      	b.n	31242 <__divsi3+0x42>
   31240:	0a09      	lsrs	r1, r1, #8
   31242:	0bc3      	lsrs	r3, r0, #15
   31244:	428b      	cmp	r3, r1
   31246:	d301      	bcc.n	3124c <__divsi3+0x4c>
   31248:	03cb      	lsls	r3, r1, #15
   3124a:	1ac0      	subs	r0, r0, r3
   3124c:	4152      	adcs	r2, r2
   3124e:	0b83      	lsrs	r3, r0, #14
   31250:	428b      	cmp	r3, r1
   31252:	d301      	bcc.n	31258 <__divsi3+0x58>
   31254:	038b      	lsls	r3, r1, #14
   31256:	1ac0      	subs	r0, r0, r3
   31258:	4152      	adcs	r2, r2
   3125a:	0b43      	lsrs	r3, r0, #13
   3125c:	428b      	cmp	r3, r1
   3125e:	d301      	bcc.n	31264 <__divsi3+0x64>
   31260:	034b      	lsls	r3, r1, #13
   31262:	1ac0      	subs	r0, r0, r3
   31264:	4152      	adcs	r2, r2
   31266:	0b03      	lsrs	r3, r0, #12
   31268:	428b      	cmp	r3, r1
   3126a:	d301      	bcc.n	31270 <__divsi3+0x70>
   3126c:	030b      	lsls	r3, r1, #12
   3126e:	1ac0      	subs	r0, r0, r3
   31270:	4152      	adcs	r2, r2
   31272:	0ac3      	lsrs	r3, r0, #11
   31274:	428b      	cmp	r3, r1
   31276:	d301      	bcc.n	3127c <__divsi3+0x7c>
   31278:	02cb      	lsls	r3, r1, #11
   3127a:	1ac0      	subs	r0, r0, r3
   3127c:	4152      	adcs	r2, r2
   3127e:	0a83      	lsrs	r3, r0, #10
   31280:	428b      	cmp	r3, r1
   31282:	d301      	bcc.n	31288 <__divsi3+0x88>
   31284:	028b      	lsls	r3, r1, #10
   31286:	1ac0      	subs	r0, r0, r3
   31288:	4152      	adcs	r2, r2
   3128a:	0a43      	lsrs	r3, r0, #9
   3128c:	428b      	cmp	r3, r1
   3128e:	d301      	bcc.n	31294 <__divsi3+0x94>
   31290:	024b      	lsls	r3, r1, #9
   31292:	1ac0      	subs	r0, r0, r3
   31294:	4152      	adcs	r2, r2
   31296:	0a03      	lsrs	r3, r0, #8
   31298:	428b      	cmp	r3, r1
   3129a:	d301      	bcc.n	312a0 <__divsi3+0xa0>
   3129c:	020b      	lsls	r3, r1, #8
   3129e:	1ac0      	subs	r0, r0, r3
   312a0:	4152      	adcs	r2, r2
   312a2:	d2cd      	bcs.n	31240 <__divsi3+0x40>
   312a4:	09c3      	lsrs	r3, r0, #7
   312a6:	428b      	cmp	r3, r1
   312a8:	d301      	bcc.n	312ae <__divsi3+0xae>
   312aa:	01cb      	lsls	r3, r1, #7
   312ac:	1ac0      	subs	r0, r0, r3
   312ae:	4152      	adcs	r2, r2
   312b0:	0983      	lsrs	r3, r0, #6
   312b2:	428b      	cmp	r3, r1
   312b4:	d301      	bcc.n	312ba <__divsi3+0xba>
   312b6:	018b      	lsls	r3, r1, #6
   312b8:	1ac0      	subs	r0, r0, r3
   312ba:	4152      	adcs	r2, r2
   312bc:	0943      	lsrs	r3, r0, #5
   312be:	428b      	cmp	r3, r1
   312c0:	d301      	bcc.n	312c6 <__divsi3+0xc6>
   312c2:	014b      	lsls	r3, r1, #5
   312c4:	1ac0      	subs	r0, r0, r3
   312c6:	4152      	adcs	r2, r2
   312c8:	0903      	lsrs	r3, r0, #4
   312ca:	428b      	cmp	r3, r1
   312cc:	d301      	bcc.n	312d2 <__divsi3+0xd2>
   312ce:	010b      	lsls	r3, r1, #4
   312d0:	1ac0      	subs	r0, r0, r3
   312d2:	4152      	adcs	r2, r2
   312d4:	08c3      	lsrs	r3, r0, #3
   312d6:	428b      	cmp	r3, r1
   312d8:	d301      	bcc.n	312de <__divsi3+0xde>
   312da:	00cb      	lsls	r3, r1, #3
   312dc:	1ac0      	subs	r0, r0, r3
   312de:	4152      	adcs	r2, r2
   312e0:	0883      	lsrs	r3, r0, #2
   312e2:	428b      	cmp	r3, r1
   312e4:	d301      	bcc.n	312ea <__divsi3+0xea>
   312e6:	008b      	lsls	r3, r1, #2
   312e8:	1ac0      	subs	r0, r0, r3
   312ea:	4152      	adcs	r2, r2
   312ec:	0843      	lsrs	r3, r0, #1
   312ee:	428b      	cmp	r3, r1
   312f0:	d301      	bcc.n	312f6 <__divsi3+0xf6>
   312f2:	004b      	lsls	r3, r1, #1
   312f4:	1ac0      	subs	r0, r0, r3
   312f6:	4152      	adcs	r2, r2
   312f8:	1a41      	subs	r1, r0, r1
   312fa:	d200      	bcs.n	312fe <__divsi3+0xfe>
   312fc:	4601      	mov	r1, r0
   312fe:	4152      	adcs	r2, r2
   31300:	4610      	mov	r0, r2
   31302:	4770      	bx	lr
   31304:	e05d      	b.n	313c2 <__divsi3+0x1c2>
   31306:	0fca      	lsrs	r2, r1, #31
   31308:	d000      	beq.n	3130c <__divsi3+0x10c>
   3130a:	4249      	negs	r1, r1
   3130c:	1003      	asrs	r3, r0, #32
   3130e:	d300      	bcc.n	31312 <__divsi3+0x112>
   31310:	4240      	negs	r0, r0
   31312:	4053      	eors	r3, r2
   31314:	2200      	movs	r2, #0
   31316:	469c      	mov	ip, r3
   31318:	0903      	lsrs	r3, r0, #4
   3131a:	428b      	cmp	r3, r1
   3131c:	d32d      	bcc.n	3137a <__divsi3+0x17a>
   3131e:	0a03      	lsrs	r3, r0, #8
   31320:	428b      	cmp	r3, r1
   31322:	d312      	bcc.n	3134a <__divsi3+0x14a>
   31324:	22fc      	movs	r2, #252	; 0xfc
   31326:	0189      	lsls	r1, r1, #6
   31328:	ba12      	rev	r2, r2
   3132a:	0a03      	lsrs	r3, r0, #8
   3132c:	428b      	cmp	r3, r1
   3132e:	d30c      	bcc.n	3134a <__divsi3+0x14a>
   31330:	0189      	lsls	r1, r1, #6
   31332:	1192      	asrs	r2, r2, #6
   31334:	428b      	cmp	r3, r1
   31336:	d308      	bcc.n	3134a <__divsi3+0x14a>
   31338:	0189      	lsls	r1, r1, #6
   3133a:	1192      	asrs	r2, r2, #6
   3133c:	428b      	cmp	r3, r1
   3133e:	d304      	bcc.n	3134a <__divsi3+0x14a>
   31340:	0189      	lsls	r1, r1, #6
   31342:	d03a      	beq.n	313ba <__divsi3+0x1ba>
   31344:	1192      	asrs	r2, r2, #6
   31346:	e000      	b.n	3134a <__divsi3+0x14a>
   31348:	0989      	lsrs	r1, r1, #6
   3134a:	09c3      	lsrs	r3, r0, #7
   3134c:	428b      	cmp	r3, r1
   3134e:	d301      	bcc.n	31354 <__divsi3+0x154>
   31350:	01cb      	lsls	r3, r1, #7
   31352:	1ac0      	subs	r0, r0, r3
   31354:	4152      	adcs	r2, r2
   31356:	0983      	lsrs	r3, r0, #6
   31358:	428b      	cmp	r3, r1
   3135a:	d301      	bcc.n	31360 <__divsi3+0x160>
   3135c:	018b      	lsls	r3, r1, #6
   3135e:	1ac0      	subs	r0, r0, r3
   31360:	4152      	adcs	r2, r2
   31362:	0943      	lsrs	r3, r0, #5
   31364:	428b      	cmp	r3, r1
   31366:	d301      	bcc.n	3136c <__divsi3+0x16c>
   31368:	014b      	lsls	r3, r1, #5
   3136a:	1ac0      	subs	r0, r0, r3
   3136c:	4152      	adcs	r2, r2
   3136e:	0903      	lsrs	r3, r0, #4
   31370:	428b      	cmp	r3, r1
   31372:	d301      	bcc.n	31378 <__divsi3+0x178>
   31374:	010b      	lsls	r3, r1, #4
   31376:	1ac0      	subs	r0, r0, r3
   31378:	4152      	adcs	r2, r2
   3137a:	08c3      	lsrs	r3, r0, #3
   3137c:	428b      	cmp	r3, r1
   3137e:	d301      	bcc.n	31384 <__divsi3+0x184>
   31380:	00cb      	lsls	r3, r1, #3
   31382:	1ac0      	subs	r0, r0, r3
   31384:	4152      	adcs	r2, r2
   31386:	0883      	lsrs	r3, r0, #2
   31388:	428b      	cmp	r3, r1
   3138a:	d301      	bcc.n	31390 <__divsi3+0x190>
   3138c:	008b      	lsls	r3, r1, #2
   3138e:	1ac0      	subs	r0, r0, r3
   31390:	4152      	adcs	r2, r2
   31392:	d2d9      	bcs.n	31348 <__divsi3+0x148>
   31394:	0843      	lsrs	r3, r0, #1
   31396:	428b      	cmp	r3, r1
   31398:	d301      	bcc.n	3139e <__divsi3+0x19e>
   3139a:	004b      	lsls	r3, r1, #1
   3139c:	1ac0      	subs	r0, r0, r3
   3139e:	4152      	adcs	r2, r2
   313a0:	1a41      	subs	r1, r0, r1
   313a2:	d200      	bcs.n	313a6 <__divsi3+0x1a6>
   313a4:	4601      	mov	r1, r0
   313a6:	4663      	mov	r3, ip
   313a8:	4152      	adcs	r2, r2
   313aa:	105b      	asrs	r3, r3, #1
   313ac:	4610      	mov	r0, r2
   313ae:	d301      	bcc.n	313b4 <__divsi3+0x1b4>
   313b0:	4240      	negs	r0, r0
   313b2:	2b00      	cmp	r3, #0
   313b4:	d500      	bpl.n	313b8 <__divsi3+0x1b8>
   313b6:	4249      	negs	r1, r1
   313b8:	4770      	bx	lr
   313ba:	4663      	mov	r3, ip
   313bc:	105b      	asrs	r3, r3, #1
   313be:	d300      	bcc.n	313c2 <__divsi3+0x1c2>
   313c0:	4240      	negs	r0, r0
   313c2:	b501      	push	{r0, lr}
   313c4:	2000      	movs	r0, #0
   313c6:	f000 f805 	bl	313d4 <__aeabi_idiv0>
   313ca:	bd02      	pop	{r1, pc}

000313cc <__aeabi_idivmod>:
   313cc:	2900      	cmp	r1, #0
   313ce:	d0f8      	beq.n	313c2 <__divsi3+0x1c2>
   313d0:	e716      	b.n	31200 <__divsi3>
   313d2:	4770      	bx	lr

000313d4 <__aeabi_idiv0>:
   313d4:	4770      	bx	lr
   313d6:	46c0      	nop			; (mov r8, r8)

000313d8 <__aeabi_lmul>:
   313d8:	b5f0      	push	{r4, r5, r6, r7, lr}
   313da:	46ce      	mov	lr, r9
   313dc:	4647      	mov	r7, r8
   313de:	0415      	lsls	r5, r2, #16
   313e0:	0c2d      	lsrs	r5, r5, #16
   313e2:	002e      	movs	r6, r5
   313e4:	b580      	push	{r7, lr}
   313e6:	0407      	lsls	r7, r0, #16
   313e8:	0c14      	lsrs	r4, r2, #16
   313ea:	0c3f      	lsrs	r7, r7, #16
   313ec:	4699      	mov	r9, r3
   313ee:	0c03      	lsrs	r3, r0, #16
   313f0:	437e      	muls	r6, r7
   313f2:	435d      	muls	r5, r3
   313f4:	4367      	muls	r7, r4
   313f6:	4363      	muls	r3, r4
   313f8:	197f      	adds	r7, r7, r5
   313fa:	0c34      	lsrs	r4, r6, #16
   313fc:	19e4      	adds	r4, r4, r7
   313fe:	469c      	mov	ip, r3
   31400:	42a5      	cmp	r5, r4
   31402:	d903      	bls.n	3140c <__aeabi_lmul+0x34>
   31404:	2380      	movs	r3, #128	; 0x80
   31406:	025b      	lsls	r3, r3, #9
   31408:	4698      	mov	r8, r3
   3140a:	44c4      	add	ip, r8
   3140c:	464b      	mov	r3, r9
   3140e:	4351      	muls	r1, r2
   31410:	4343      	muls	r3, r0
   31412:	0436      	lsls	r6, r6, #16
   31414:	0c36      	lsrs	r6, r6, #16
   31416:	0c25      	lsrs	r5, r4, #16
   31418:	0424      	lsls	r4, r4, #16
   3141a:	4465      	add	r5, ip
   3141c:	19a4      	adds	r4, r4, r6
   3141e:	1859      	adds	r1, r3, r1
   31420:	1949      	adds	r1, r1, r5
   31422:	0020      	movs	r0, r4
   31424:	bc0c      	pop	{r2, r3}
   31426:	4690      	mov	r8, r2
   31428:	4699      	mov	r9, r3
   3142a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0003142c <__aeabi_fdiv>:
   3142c:	b5f0      	push	{r4, r5, r6, r7, lr}
   3142e:	4657      	mov	r7, sl
   31430:	464e      	mov	r6, r9
   31432:	46de      	mov	lr, fp
   31434:	4645      	mov	r5, r8
   31436:	b5e0      	push	{r5, r6, r7, lr}
   31438:	0244      	lsls	r4, r0, #9
   3143a:	0043      	lsls	r3, r0, #1
   3143c:	0fc6      	lsrs	r6, r0, #31
   3143e:	b083      	sub	sp, #12
   31440:	1c0f      	adds	r7, r1, #0
   31442:	0a64      	lsrs	r4, r4, #9
   31444:	0e1b      	lsrs	r3, r3, #24
   31446:	46b2      	mov	sl, r6
   31448:	d053      	beq.n	314f2 <__aeabi_fdiv+0xc6>
   3144a:	2bff      	cmp	r3, #255	; 0xff
   3144c:	d027      	beq.n	3149e <__aeabi_fdiv+0x72>
   3144e:	2280      	movs	r2, #128	; 0x80
   31450:	00e4      	lsls	r4, r4, #3
   31452:	04d2      	lsls	r2, r2, #19
   31454:	4314      	orrs	r4, r2
   31456:	227f      	movs	r2, #127	; 0x7f
   31458:	4252      	negs	r2, r2
   3145a:	4690      	mov	r8, r2
   3145c:	4498      	add	r8, r3
   3145e:	2300      	movs	r3, #0
   31460:	4699      	mov	r9, r3
   31462:	469b      	mov	fp, r3
   31464:	027d      	lsls	r5, r7, #9
   31466:	0078      	lsls	r0, r7, #1
   31468:	0ffb      	lsrs	r3, r7, #31
   3146a:	0a6d      	lsrs	r5, r5, #9
   3146c:	0e00      	lsrs	r0, r0, #24
   3146e:	9300      	str	r3, [sp, #0]
   31470:	d024      	beq.n	314bc <__aeabi_fdiv+0x90>
   31472:	28ff      	cmp	r0, #255	; 0xff
   31474:	d046      	beq.n	31504 <__aeabi_fdiv+0xd8>
   31476:	2380      	movs	r3, #128	; 0x80
   31478:	2100      	movs	r1, #0
   3147a:	00ed      	lsls	r5, r5, #3
   3147c:	04db      	lsls	r3, r3, #19
   3147e:	431d      	orrs	r5, r3
   31480:	387f      	subs	r0, #127	; 0x7f
   31482:	4647      	mov	r7, r8
   31484:	1a38      	subs	r0, r7, r0
   31486:	464f      	mov	r7, r9
   31488:	430f      	orrs	r7, r1
   3148a:	00bf      	lsls	r7, r7, #2
   3148c:	46b9      	mov	r9, r7
   3148e:	0033      	movs	r3, r6
   31490:	9a00      	ldr	r2, [sp, #0]
   31492:	4f87      	ldr	r7, [pc, #540]	; (316b0 <__aeabi_fdiv+0x284>)
   31494:	4053      	eors	r3, r2
   31496:	464a      	mov	r2, r9
   31498:	58ba      	ldr	r2, [r7, r2]
   3149a:	9301      	str	r3, [sp, #4]
   3149c:	4697      	mov	pc, r2
   3149e:	2c00      	cmp	r4, #0
   314a0:	d14e      	bne.n	31540 <__aeabi_fdiv+0x114>
   314a2:	2308      	movs	r3, #8
   314a4:	4699      	mov	r9, r3
   314a6:	33f7      	adds	r3, #247	; 0xf7
   314a8:	4698      	mov	r8, r3
   314aa:	3bfd      	subs	r3, #253	; 0xfd
   314ac:	469b      	mov	fp, r3
   314ae:	027d      	lsls	r5, r7, #9
   314b0:	0078      	lsls	r0, r7, #1
   314b2:	0ffb      	lsrs	r3, r7, #31
   314b4:	0a6d      	lsrs	r5, r5, #9
   314b6:	0e00      	lsrs	r0, r0, #24
   314b8:	9300      	str	r3, [sp, #0]
   314ba:	d1da      	bne.n	31472 <__aeabi_fdiv+0x46>
   314bc:	2d00      	cmp	r5, #0
   314be:	d126      	bne.n	3150e <__aeabi_fdiv+0xe2>
   314c0:	2000      	movs	r0, #0
   314c2:	2101      	movs	r1, #1
   314c4:	0033      	movs	r3, r6
   314c6:	9a00      	ldr	r2, [sp, #0]
   314c8:	4f7a      	ldr	r7, [pc, #488]	; (316b4 <__aeabi_fdiv+0x288>)
   314ca:	4053      	eors	r3, r2
   314cc:	4642      	mov	r2, r8
   314ce:	1a10      	subs	r0, r2, r0
   314d0:	464a      	mov	r2, r9
   314d2:	430a      	orrs	r2, r1
   314d4:	0092      	lsls	r2, r2, #2
   314d6:	58ba      	ldr	r2, [r7, r2]
   314d8:	001d      	movs	r5, r3
   314da:	4697      	mov	pc, r2
   314dc:	9b00      	ldr	r3, [sp, #0]
   314de:	002c      	movs	r4, r5
   314e0:	469a      	mov	sl, r3
   314e2:	468b      	mov	fp, r1
   314e4:	465b      	mov	r3, fp
   314e6:	2b02      	cmp	r3, #2
   314e8:	d131      	bne.n	3154e <__aeabi_fdiv+0x122>
   314ea:	4653      	mov	r3, sl
   314ec:	21ff      	movs	r1, #255	; 0xff
   314ee:	2400      	movs	r4, #0
   314f0:	e038      	b.n	31564 <__aeabi_fdiv+0x138>
   314f2:	2c00      	cmp	r4, #0
   314f4:	d117      	bne.n	31526 <__aeabi_fdiv+0xfa>
   314f6:	2304      	movs	r3, #4
   314f8:	4699      	mov	r9, r3
   314fa:	2300      	movs	r3, #0
   314fc:	4698      	mov	r8, r3
   314fe:	3301      	adds	r3, #1
   31500:	469b      	mov	fp, r3
   31502:	e7af      	b.n	31464 <__aeabi_fdiv+0x38>
   31504:	20ff      	movs	r0, #255	; 0xff
   31506:	2d00      	cmp	r5, #0
   31508:	d10b      	bne.n	31522 <__aeabi_fdiv+0xf6>
   3150a:	2102      	movs	r1, #2
   3150c:	e7da      	b.n	314c4 <__aeabi_fdiv+0x98>
   3150e:	0028      	movs	r0, r5
   31510:	f001 fd8a 	bl	33028 <__clzsi2>
   31514:	1f43      	subs	r3, r0, #5
   31516:	409d      	lsls	r5, r3
   31518:	2376      	movs	r3, #118	; 0x76
   3151a:	425b      	negs	r3, r3
   3151c:	1a18      	subs	r0, r3, r0
   3151e:	2100      	movs	r1, #0
   31520:	e7af      	b.n	31482 <__aeabi_fdiv+0x56>
   31522:	2103      	movs	r1, #3
   31524:	e7ad      	b.n	31482 <__aeabi_fdiv+0x56>
   31526:	0020      	movs	r0, r4
   31528:	f001 fd7e 	bl	33028 <__clzsi2>
   3152c:	1f43      	subs	r3, r0, #5
   3152e:	409c      	lsls	r4, r3
   31530:	2376      	movs	r3, #118	; 0x76
   31532:	425b      	negs	r3, r3
   31534:	1a1b      	subs	r3, r3, r0
   31536:	4698      	mov	r8, r3
   31538:	2300      	movs	r3, #0
   3153a:	4699      	mov	r9, r3
   3153c:	469b      	mov	fp, r3
   3153e:	e791      	b.n	31464 <__aeabi_fdiv+0x38>
   31540:	230c      	movs	r3, #12
   31542:	4699      	mov	r9, r3
   31544:	33f3      	adds	r3, #243	; 0xf3
   31546:	4698      	mov	r8, r3
   31548:	3bfc      	subs	r3, #252	; 0xfc
   3154a:	469b      	mov	fp, r3
   3154c:	e78a      	b.n	31464 <__aeabi_fdiv+0x38>
   3154e:	2b03      	cmp	r3, #3
   31550:	d100      	bne.n	31554 <__aeabi_fdiv+0x128>
   31552:	e0a5      	b.n	316a0 <__aeabi_fdiv+0x274>
   31554:	4655      	mov	r5, sl
   31556:	2b01      	cmp	r3, #1
   31558:	d000      	beq.n	3155c <__aeabi_fdiv+0x130>
   3155a:	e081      	b.n	31660 <__aeabi_fdiv+0x234>
   3155c:	2301      	movs	r3, #1
   3155e:	2100      	movs	r1, #0
   31560:	2400      	movs	r4, #0
   31562:	402b      	ands	r3, r5
   31564:	0264      	lsls	r4, r4, #9
   31566:	05c9      	lsls	r1, r1, #23
   31568:	0a60      	lsrs	r0, r4, #9
   3156a:	07db      	lsls	r3, r3, #31
   3156c:	4308      	orrs	r0, r1
   3156e:	4318      	orrs	r0, r3
   31570:	b003      	add	sp, #12
   31572:	bc3c      	pop	{r2, r3, r4, r5}
   31574:	4690      	mov	r8, r2
   31576:	4699      	mov	r9, r3
   31578:	46a2      	mov	sl, r4
   3157a:	46ab      	mov	fp, r5
   3157c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   3157e:	2480      	movs	r4, #128	; 0x80
   31580:	2300      	movs	r3, #0
   31582:	03e4      	lsls	r4, r4, #15
   31584:	21ff      	movs	r1, #255	; 0xff
   31586:	e7ed      	b.n	31564 <__aeabi_fdiv+0x138>
   31588:	21ff      	movs	r1, #255	; 0xff
   3158a:	2400      	movs	r4, #0
   3158c:	e7ea      	b.n	31564 <__aeabi_fdiv+0x138>
   3158e:	2301      	movs	r3, #1
   31590:	1a59      	subs	r1, r3, r1
   31592:	291b      	cmp	r1, #27
   31594:	dd66      	ble.n	31664 <__aeabi_fdiv+0x238>
   31596:	9a01      	ldr	r2, [sp, #4]
   31598:	4013      	ands	r3, r2
   3159a:	2100      	movs	r1, #0
   3159c:	2400      	movs	r4, #0
   3159e:	e7e1      	b.n	31564 <__aeabi_fdiv+0x138>
   315a0:	2380      	movs	r3, #128	; 0x80
   315a2:	03db      	lsls	r3, r3, #15
   315a4:	421c      	tst	r4, r3
   315a6:	d038      	beq.n	3161a <__aeabi_fdiv+0x1ee>
   315a8:	421d      	tst	r5, r3
   315aa:	d051      	beq.n	31650 <__aeabi_fdiv+0x224>
   315ac:	431c      	orrs	r4, r3
   315ae:	0264      	lsls	r4, r4, #9
   315b0:	0a64      	lsrs	r4, r4, #9
   315b2:	0033      	movs	r3, r6
   315b4:	21ff      	movs	r1, #255	; 0xff
   315b6:	e7d5      	b.n	31564 <__aeabi_fdiv+0x138>
   315b8:	0163      	lsls	r3, r4, #5
   315ba:	016c      	lsls	r4, r5, #5
   315bc:	42a3      	cmp	r3, r4
   315be:	d23b      	bcs.n	31638 <__aeabi_fdiv+0x20c>
   315c0:	261b      	movs	r6, #27
   315c2:	2100      	movs	r1, #0
   315c4:	3801      	subs	r0, #1
   315c6:	2501      	movs	r5, #1
   315c8:	001f      	movs	r7, r3
   315ca:	0049      	lsls	r1, r1, #1
   315cc:	005b      	lsls	r3, r3, #1
   315ce:	2f00      	cmp	r7, #0
   315d0:	db01      	blt.n	315d6 <__aeabi_fdiv+0x1aa>
   315d2:	429c      	cmp	r4, r3
   315d4:	d801      	bhi.n	315da <__aeabi_fdiv+0x1ae>
   315d6:	1b1b      	subs	r3, r3, r4
   315d8:	4329      	orrs	r1, r5
   315da:	3e01      	subs	r6, #1
   315dc:	2e00      	cmp	r6, #0
   315de:	d1f3      	bne.n	315c8 <__aeabi_fdiv+0x19c>
   315e0:	001c      	movs	r4, r3
   315e2:	1e63      	subs	r3, r4, #1
   315e4:	419c      	sbcs	r4, r3
   315e6:	430c      	orrs	r4, r1
   315e8:	0001      	movs	r1, r0
   315ea:	317f      	adds	r1, #127	; 0x7f
   315ec:	2900      	cmp	r1, #0
   315ee:	ddce      	ble.n	3158e <__aeabi_fdiv+0x162>
   315f0:	0763      	lsls	r3, r4, #29
   315f2:	d004      	beq.n	315fe <__aeabi_fdiv+0x1d2>
   315f4:	230f      	movs	r3, #15
   315f6:	4023      	ands	r3, r4
   315f8:	2b04      	cmp	r3, #4
   315fa:	d000      	beq.n	315fe <__aeabi_fdiv+0x1d2>
   315fc:	3404      	adds	r4, #4
   315fe:	0123      	lsls	r3, r4, #4
   31600:	d503      	bpl.n	3160a <__aeabi_fdiv+0x1de>
   31602:	0001      	movs	r1, r0
   31604:	4b2c      	ldr	r3, [pc, #176]	; (316b8 <__aeabi_fdiv+0x28c>)
   31606:	3180      	adds	r1, #128	; 0x80
   31608:	401c      	ands	r4, r3
   3160a:	29fe      	cmp	r1, #254	; 0xfe
   3160c:	dd0d      	ble.n	3162a <__aeabi_fdiv+0x1fe>
   3160e:	2301      	movs	r3, #1
   31610:	9a01      	ldr	r2, [sp, #4]
   31612:	21ff      	movs	r1, #255	; 0xff
   31614:	4013      	ands	r3, r2
   31616:	2400      	movs	r4, #0
   31618:	e7a4      	b.n	31564 <__aeabi_fdiv+0x138>
   3161a:	2380      	movs	r3, #128	; 0x80
   3161c:	03db      	lsls	r3, r3, #15
   3161e:	431c      	orrs	r4, r3
   31620:	0264      	lsls	r4, r4, #9
   31622:	0a64      	lsrs	r4, r4, #9
   31624:	0033      	movs	r3, r6
   31626:	21ff      	movs	r1, #255	; 0xff
   31628:	e79c      	b.n	31564 <__aeabi_fdiv+0x138>
   3162a:	2301      	movs	r3, #1
   3162c:	9a01      	ldr	r2, [sp, #4]
   3162e:	01a4      	lsls	r4, r4, #6
   31630:	0a64      	lsrs	r4, r4, #9
   31632:	b2c9      	uxtb	r1, r1
   31634:	4013      	ands	r3, r2
   31636:	e795      	b.n	31564 <__aeabi_fdiv+0x138>
   31638:	1b1b      	subs	r3, r3, r4
   3163a:	261a      	movs	r6, #26
   3163c:	2101      	movs	r1, #1
   3163e:	e7c2      	b.n	315c6 <__aeabi_fdiv+0x19a>
   31640:	9b00      	ldr	r3, [sp, #0]
   31642:	468b      	mov	fp, r1
   31644:	469a      	mov	sl, r3
   31646:	2400      	movs	r4, #0
   31648:	e74c      	b.n	314e4 <__aeabi_fdiv+0xb8>
   3164a:	0263      	lsls	r3, r4, #9
   3164c:	d5e5      	bpl.n	3161a <__aeabi_fdiv+0x1ee>
   3164e:	2500      	movs	r5, #0
   31650:	2480      	movs	r4, #128	; 0x80
   31652:	03e4      	lsls	r4, r4, #15
   31654:	432c      	orrs	r4, r5
   31656:	0264      	lsls	r4, r4, #9
   31658:	0a64      	lsrs	r4, r4, #9
   3165a:	9b00      	ldr	r3, [sp, #0]
   3165c:	21ff      	movs	r1, #255	; 0xff
   3165e:	e781      	b.n	31564 <__aeabi_fdiv+0x138>
   31660:	9501      	str	r5, [sp, #4]
   31662:	e7c1      	b.n	315e8 <__aeabi_fdiv+0x1bc>
   31664:	0023      	movs	r3, r4
   31666:	2020      	movs	r0, #32
   31668:	40cb      	lsrs	r3, r1
   3166a:	1a41      	subs	r1, r0, r1
   3166c:	408c      	lsls	r4, r1
   3166e:	1e61      	subs	r1, r4, #1
   31670:	418c      	sbcs	r4, r1
   31672:	431c      	orrs	r4, r3
   31674:	0763      	lsls	r3, r4, #29
   31676:	d004      	beq.n	31682 <__aeabi_fdiv+0x256>
   31678:	230f      	movs	r3, #15
   3167a:	4023      	ands	r3, r4
   3167c:	2b04      	cmp	r3, #4
   3167e:	d000      	beq.n	31682 <__aeabi_fdiv+0x256>
   31680:	3404      	adds	r4, #4
   31682:	0163      	lsls	r3, r4, #5
   31684:	d505      	bpl.n	31692 <__aeabi_fdiv+0x266>
   31686:	2301      	movs	r3, #1
   31688:	9a01      	ldr	r2, [sp, #4]
   3168a:	2101      	movs	r1, #1
   3168c:	4013      	ands	r3, r2
   3168e:	2400      	movs	r4, #0
   31690:	e768      	b.n	31564 <__aeabi_fdiv+0x138>
   31692:	2301      	movs	r3, #1
   31694:	9a01      	ldr	r2, [sp, #4]
   31696:	01a4      	lsls	r4, r4, #6
   31698:	0a64      	lsrs	r4, r4, #9
   3169a:	4013      	ands	r3, r2
   3169c:	2100      	movs	r1, #0
   3169e:	e761      	b.n	31564 <__aeabi_fdiv+0x138>
   316a0:	2380      	movs	r3, #128	; 0x80
   316a2:	03db      	lsls	r3, r3, #15
   316a4:	431c      	orrs	r4, r3
   316a6:	0264      	lsls	r4, r4, #9
   316a8:	0a64      	lsrs	r4, r4, #9
   316aa:	4653      	mov	r3, sl
   316ac:	21ff      	movs	r1, #255	; 0xff
   316ae:	e759      	b.n	31564 <__aeabi_fdiv+0x138>
   316b0:	000383cc 	.word	0x000383cc
   316b4:	0003840c 	.word	0x0003840c
   316b8:	f7ffffff 	.word	0xf7ffffff

000316bc <__aeabi_f2iz>:
   316bc:	0241      	lsls	r1, r0, #9
   316be:	0043      	lsls	r3, r0, #1
   316c0:	0fc2      	lsrs	r2, r0, #31
   316c2:	0a49      	lsrs	r1, r1, #9
   316c4:	0e1b      	lsrs	r3, r3, #24
   316c6:	2000      	movs	r0, #0
   316c8:	2b7e      	cmp	r3, #126	; 0x7e
   316ca:	dd0d      	ble.n	316e8 <__aeabi_f2iz+0x2c>
   316cc:	2b9d      	cmp	r3, #157	; 0x9d
   316ce:	dc0c      	bgt.n	316ea <__aeabi_f2iz+0x2e>
   316d0:	2080      	movs	r0, #128	; 0x80
   316d2:	0400      	lsls	r0, r0, #16
   316d4:	4301      	orrs	r1, r0
   316d6:	2b95      	cmp	r3, #149	; 0x95
   316d8:	dc0a      	bgt.n	316f0 <__aeabi_f2iz+0x34>
   316da:	2096      	movs	r0, #150	; 0x96
   316dc:	1ac3      	subs	r3, r0, r3
   316de:	40d9      	lsrs	r1, r3
   316e0:	4248      	negs	r0, r1
   316e2:	2a00      	cmp	r2, #0
   316e4:	d100      	bne.n	316e8 <__aeabi_f2iz+0x2c>
   316e6:	0008      	movs	r0, r1
   316e8:	4770      	bx	lr
   316ea:	4b03      	ldr	r3, [pc, #12]	; (316f8 <__aeabi_f2iz+0x3c>)
   316ec:	18d0      	adds	r0, r2, r3
   316ee:	e7fb      	b.n	316e8 <__aeabi_f2iz+0x2c>
   316f0:	3b96      	subs	r3, #150	; 0x96
   316f2:	4099      	lsls	r1, r3
   316f4:	e7f4      	b.n	316e0 <__aeabi_f2iz+0x24>
   316f6:	46c0      	nop			; (mov r8, r8)
   316f8:	7fffffff 	.word	0x7fffffff

000316fc <__aeabi_i2f>:
   316fc:	b570      	push	{r4, r5, r6, lr}
   316fe:	2800      	cmp	r0, #0
   31700:	d030      	beq.n	31764 <__aeabi_i2f+0x68>
   31702:	17c3      	asrs	r3, r0, #31
   31704:	18c4      	adds	r4, r0, r3
   31706:	405c      	eors	r4, r3
   31708:	0fc5      	lsrs	r5, r0, #31
   3170a:	0020      	movs	r0, r4
   3170c:	f001 fc8c 	bl	33028 <__clzsi2>
   31710:	239e      	movs	r3, #158	; 0x9e
   31712:	1a1b      	subs	r3, r3, r0
   31714:	2b96      	cmp	r3, #150	; 0x96
   31716:	dc0d      	bgt.n	31734 <__aeabi_i2f+0x38>
   31718:	2296      	movs	r2, #150	; 0x96
   3171a:	1ad2      	subs	r2, r2, r3
   3171c:	4094      	lsls	r4, r2
   3171e:	002a      	movs	r2, r5
   31720:	0264      	lsls	r4, r4, #9
   31722:	0a64      	lsrs	r4, r4, #9
   31724:	b2db      	uxtb	r3, r3
   31726:	0264      	lsls	r4, r4, #9
   31728:	05db      	lsls	r3, r3, #23
   3172a:	0a60      	lsrs	r0, r4, #9
   3172c:	07d2      	lsls	r2, r2, #31
   3172e:	4318      	orrs	r0, r3
   31730:	4310      	orrs	r0, r2
   31732:	bd70      	pop	{r4, r5, r6, pc}
   31734:	2b99      	cmp	r3, #153	; 0x99
   31736:	dc19      	bgt.n	3176c <__aeabi_i2f+0x70>
   31738:	2299      	movs	r2, #153	; 0x99
   3173a:	1ad2      	subs	r2, r2, r3
   3173c:	2a00      	cmp	r2, #0
   3173e:	dd29      	ble.n	31794 <__aeabi_i2f+0x98>
   31740:	4094      	lsls	r4, r2
   31742:	0022      	movs	r2, r4
   31744:	4c14      	ldr	r4, [pc, #80]	; (31798 <__aeabi_i2f+0x9c>)
   31746:	4014      	ands	r4, r2
   31748:	0751      	lsls	r1, r2, #29
   3174a:	d004      	beq.n	31756 <__aeabi_i2f+0x5a>
   3174c:	210f      	movs	r1, #15
   3174e:	400a      	ands	r2, r1
   31750:	2a04      	cmp	r2, #4
   31752:	d000      	beq.n	31756 <__aeabi_i2f+0x5a>
   31754:	3404      	adds	r4, #4
   31756:	0162      	lsls	r2, r4, #5
   31758:	d413      	bmi.n	31782 <__aeabi_i2f+0x86>
   3175a:	01a4      	lsls	r4, r4, #6
   3175c:	0a64      	lsrs	r4, r4, #9
   3175e:	b2db      	uxtb	r3, r3
   31760:	002a      	movs	r2, r5
   31762:	e7e0      	b.n	31726 <__aeabi_i2f+0x2a>
   31764:	2200      	movs	r2, #0
   31766:	2300      	movs	r3, #0
   31768:	2400      	movs	r4, #0
   3176a:	e7dc      	b.n	31726 <__aeabi_i2f+0x2a>
   3176c:	2205      	movs	r2, #5
   3176e:	0021      	movs	r1, r4
   31770:	1a12      	subs	r2, r2, r0
   31772:	40d1      	lsrs	r1, r2
   31774:	22b9      	movs	r2, #185	; 0xb9
   31776:	1ad2      	subs	r2, r2, r3
   31778:	4094      	lsls	r4, r2
   3177a:	1e62      	subs	r2, r4, #1
   3177c:	4194      	sbcs	r4, r2
   3177e:	430c      	orrs	r4, r1
   31780:	e7da      	b.n	31738 <__aeabi_i2f+0x3c>
   31782:	4b05      	ldr	r3, [pc, #20]	; (31798 <__aeabi_i2f+0x9c>)
   31784:	002a      	movs	r2, r5
   31786:	401c      	ands	r4, r3
   31788:	239f      	movs	r3, #159	; 0x9f
   3178a:	01a4      	lsls	r4, r4, #6
   3178c:	1a1b      	subs	r3, r3, r0
   3178e:	0a64      	lsrs	r4, r4, #9
   31790:	b2db      	uxtb	r3, r3
   31792:	e7c8      	b.n	31726 <__aeabi_i2f+0x2a>
   31794:	0022      	movs	r2, r4
   31796:	e7d5      	b.n	31744 <__aeabi_i2f+0x48>
   31798:	fbffffff 	.word	0xfbffffff

0003179c <__aeabi_dadd>:
   3179c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   3179e:	4645      	mov	r5, r8
   317a0:	46de      	mov	lr, fp
   317a2:	4657      	mov	r7, sl
   317a4:	464e      	mov	r6, r9
   317a6:	030c      	lsls	r4, r1, #12
   317a8:	b5e0      	push	{r5, r6, r7, lr}
   317aa:	004e      	lsls	r6, r1, #1
   317ac:	0fc9      	lsrs	r1, r1, #31
   317ae:	4688      	mov	r8, r1
   317b0:	000d      	movs	r5, r1
   317b2:	0a61      	lsrs	r1, r4, #9
   317b4:	0f44      	lsrs	r4, r0, #29
   317b6:	430c      	orrs	r4, r1
   317b8:	00c7      	lsls	r7, r0, #3
   317ba:	0319      	lsls	r1, r3, #12
   317bc:	0058      	lsls	r0, r3, #1
   317be:	0fdb      	lsrs	r3, r3, #31
   317c0:	469b      	mov	fp, r3
   317c2:	0a4b      	lsrs	r3, r1, #9
   317c4:	0f51      	lsrs	r1, r2, #29
   317c6:	430b      	orrs	r3, r1
   317c8:	0d76      	lsrs	r6, r6, #21
   317ca:	0d40      	lsrs	r0, r0, #21
   317cc:	0019      	movs	r1, r3
   317ce:	00d2      	lsls	r2, r2, #3
   317d0:	45d8      	cmp	r8, fp
   317d2:	d100      	bne.n	317d6 <__aeabi_dadd+0x3a>
   317d4:	e0ae      	b.n	31934 <__aeabi_dadd+0x198>
   317d6:	1a35      	subs	r5, r6, r0
   317d8:	2d00      	cmp	r5, #0
   317da:	dc00      	bgt.n	317de <__aeabi_dadd+0x42>
   317dc:	e0f6      	b.n	319cc <__aeabi_dadd+0x230>
   317de:	2800      	cmp	r0, #0
   317e0:	d10f      	bne.n	31802 <__aeabi_dadd+0x66>
   317e2:	4313      	orrs	r3, r2
   317e4:	d100      	bne.n	317e8 <__aeabi_dadd+0x4c>
   317e6:	e0db      	b.n	319a0 <__aeabi_dadd+0x204>
   317e8:	1e6b      	subs	r3, r5, #1
   317ea:	2b00      	cmp	r3, #0
   317ec:	d000      	beq.n	317f0 <__aeabi_dadd+0x54>
   317ee:	e137      	b.n	31a60 <__aeabi_dadd+0x2c4>
   317f0:	1aba      	subs	r2, r7, r2
   317f2:	4297      	cmp	r7, r2
   317f4:	41bf      	sbcs	r7, r7
   317f6:	1a64      	subs	r4, r4, r1
   317f8:	427f      	negs	r7, r7
   317fa:	1be4      	subs	r4, r4, r7
   317fc:	2601      	movs	r6, #1
   317fe:	0017      	movs	r7, r2
   31800:	e024      	b.n	3184c <__aeabi_dadd+0xb0>
   31802:	4bc6      	ldr	r3, [pc, #792]	; (31b1c <__aeabi_dadd+0x380>)
   31804:	429e      	cmp	r6, r3
   31806:	d04d      	beq.n	318a4 <__aeabi_dadd+0x108>
   31808:	2380      	movs	r3, #128	; 0x80
   3180a:	041b      	lsls	r3, r3, #16
   3180c:	4319      	orrs	r1, r3
   3180e:	2d38      	cmp	r5, #56	; 0x38
   31810:	dd00      	ble.n	31814 <__aeabi_dadd+0x78>
   31812:	e107      	b.n	31a24 <__aeabi_dadd+0x288>
   31814:	2d1f      	cmp	r5, #31
   31816:	dd00      	ble.n	3181a <__aeabi_dadd+0x7e>
   31818:	e138      	b.n	31a8c <__aeabi_dadd+0x2f0>
   3181a:	2020      	movs	r0, #32
   3181c:	1b43      	subs	r3, r0, r5
   3181e:	469a      	mov	sl, r3
   31820:	000b      	movs	r3, r1
   31822:	4650      	mov	r0, sl
   31824:	4083      	lsls	r3, r0
   31826:	4699      	mov	r9, r3
   31828:	0013      	movs	r3, r2
   3182a:	4648      	mov	r0, r9
   3182c:	40eb      	lsrs	r3, r5
   3182e:	4318      	orrs	r0, r3
   31830:	0003      	movs	r3, r0
   31832:	4650      	mov	r0, sl
   31834:	4082      	lsls	r2, r0
   31836:	1e50      	subs	r0, r2, #1
   31838:	4182      	sbcs	r2, r0
   3183a:	40e9      	lsrs	r1, r5
   3183c:	431a      	orrs	r2, r3
   3183e:	1aba      	subs	r2, r7, r2
   31840:	1a61      	subs	r1, r4, r1
   31842:	4297      	cmp	r7, r2
   31844:	41a4      	sbcs	r4, r4
   31846:	0017      	movs	r7, r2
   31848:	4264      	negs	r4, r4
   3184a:	1b0c      	subs	r4, r1, r4
   3184c:	0223      	lsls	r3, r4, #8
   3184e:	d562      	bpl.n	31916 <__aeabi_dadd+0x17a>
   31850:	0264      	lsls	r4, r4, #9
   31852:	0a65      	lsrs	r5, r4, #9
   31854:	2d00      	cmp	r5, #0
   31856:	d100      	bne.n	3185a <__aeabi_dadd+0xbe>
   31858:	e0df      	b.n	31a1a <__aeabi_dadd+0x27e>
   3185a:	0028      	movs	r0, r5
   3185c:	f001 fbe4 	bl	33028 <__clzsi2>
   31860:	0003      	movs	r3, r0
   31862:	3b08      	subs	r3, #8
   31864:	2b1f      	cmp	r3, #31
   31866:	dd00      	ble.n	3186a <__aeabi_dadd+0xce>
   31868:	e0d2      	b.n	31a10 <__aeabi_dadd+0x274>
   3186a:	2220      	movs	r2, #32
   3186c:	003c      	movs	r4, r7
   3186e:	1ad2      	subs	r2, r2, r3
   31870:	409d      	lsls	r5, r3
   31872:	40d4      	lsrs	r4, r2
   31874:	409f      	lsls	r7, r3
   31876:	4325      	orrs	r5, r4
   31878:	429e      	cmp	r6, r3
   3187a:	dd00      	ble.n	3187e <__aeabi_dadd+0xe2>
   3187c:	e0c4      	b.n	31a08 <__aeabi_dadd+0x26c>
   3187e:	1b9e      	subs	r6, r3, r6
   31880:	1c73      	adds	r3, r6, #1
   31882:	2b1f      	cmp	r3, #31
   31884:	dd00      	ble.n	31888 <__aeabi_dadd+0xec>
   31886:	e0f1      	b.n	31a6c <__aeabi_dadd+0x2d0>
   31888:	2220      	movs	r2, #32
   3188a:	0038      	movs	r0, r7
   3188c:	0029      	movs	r1, r5
   3188e:	1ad2      	subs	r2, r2, r3
   31890:	40d8      	lsrs	r0, r3
   31892:	4091      	lsls	r1, r2
   31894:	4097      	lsls	r7, r2
   31896:	002c      	movs	r4, r5
   31898:	4301      	orrs	r1, r0
   3189a:	1e78      	subs	r0, r7, #1
   3189c:	4187      	sbcs	r7, r0
   3189e:	40dc      	lsrs	r4, r3
   318a0:	2600      	movs	r6, #0
   318a2:	430f      	orrs	r7, r1
   318a4:	077b      	lsls	r3, r7, #29
   318a6:	d009      	beq.n	318bc <__aeabi_dadd+0x120>
   318a8:	230f      	movs	r3, #15
   318aa:	403b      	ands	r3, r7
   318ac:	2b04      	cmp	r3, #4
   318ae:	d005      	beq.n	318bc <__aeabi_dadd+0x120>
   318b0:	1d3b      	adds	r3, r7, #4
   318b2:	42bb      	cmp	r3, r7
   318b4:	41bf      	sbcs	r7, r7
   318b6:	427f      	negs	r7, r7
   318b8:	19e4      	adds	r4, r4, r7
   318ba:	001f      	movs	r7, r3
   318bc:	0223      	lsls	r3, r4, #8
   318be:	d52c      	bpl.n	3191a <__aeabi_dadd+0x17e>
   318c0:	4b96      	ldr	r3, [pc, #600]	; (31b1c <__aeabi_dadd+0x380>)
   318c2:	3601      	adds	r6, #1
   318c4:	429e      	cmp	r6, r3
   318c6:	d100      	bne.n	318ca <__aeabi_dadd+0x12e>
   318c8:	e09a      	b.n	31a00 <__aeabi_dadd+0x264>
   318ca:	4645      	mov	r5, r8
   318cc:	4b94      	ldr	r3, [pc, #592]	; (31b20 <__aeabi_dadd+0x384>)
   318ce:	08ff      	lsrs	r7, r7, #3
   318d0:	401c      	ands	r4, r3
   318d2:	0760      	lsls	r0, r4, #29
   318d4:	0576      	lsls	r6, r6, #21
   318d6:	0264      	lsls	r4, r4, #9
   318d8:	4307      	orrs	r7, r0
   318da:	0b24      	lsrs	r4, r4, #12
   318dc:	0d76      	lsrs	r6, r6, #21
   318de:	2100      	movs	r1, #0
   318e0:	0324      	lsls	r4, r4, #12
   318e2:	0b23      	lsrs	r3, r4, #12
   318e4:	0d0c      	lsrs	r4, r1, #20
   318e6:	4a8f      	ldr	r2, [pc, #572]	; (31b24 <__aeabi_dadd+0x388>)
   318e8:	0524      	lsls	r4, r4, #20
   318ea:	431c      	orrs	r4, r3
   318ec:	4014      	ands	r4, r2
   318ee:	0533      	lsls	r3, r6, #20
   318f0:	4323      	orrs	r3, r4
   318f2:	005b      	lsls	r3, r3, #1
   318f4:	07ed      	lsls	r5, r5, #31
   318f6:	085b      	lsrs	r3, r3, #1
   318f8:	432b      	orrs	r3, r5
   318fa:	0038      	movs	r0, r7
   318fc:	0019      	movs	r1, r3
   318fe:	bc3c      	pop	{r2, r3, r4, r5}
   31900:	4690      	mov	r8, r2
   31902:	4699      	mov	r9, r3
   31904:	46a2      	mov	sl, r4
   31906:	46ab      	mov	fp, r5
   31908:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   3190a:	4664      	mov	r4, ip
   3190c:	4304      	orrs	r4, r0
   3190e:	d100      	bne.n	31912 <__aeabi_dadd+0x176>
   31910:	e211      	b.n	31d36 <__aeabi_dadd+0x59a>
   31912:	0004      	movs	r4, r0
   31914:	4667      	mov	r7, ip
   31916:	077b      	lsls	r3, r7, #29
   31918:	d1c6      	bne.n	318a8 <__aeabi_dadd+0x10c>
   3191a:	4645      	mov	r5, r8
   3191c:	0760      	lsls	r0, r4, #29
   3191e:	08ff      	lsrs	r7, r7, #3
   31920:	4307      	orrs	r7, r0
   31922:	08e4      	lsrs	r4, r4, #3
   31924:	4b7d      	ldr	r3, [pc, #500]	; (31b1c <__aeabi_dadd+0x380>)
   31926:	429e      	cmp	r6, r3
   31928:	d030      	beq.n	3198c <__aeabi_dadd+0x1f0>
   3192a:	0324      	lsls	r4, r4, #12
   3192c:	0576      	lsls	r6, r6, #21
   3192e:	0b24      	lsrs	r4, r4, #12
   31930:	0d76      	lsrs	r6, r6, #21
   31932:	e7d4      	b.n	318de <__aeabi_dadd+0x142>
   31934:	1a33      	subs	r3, r6, r0
   31936:	469a      	mov	sl, r3
   31938:	2b00      	cmp	r3, #0
   3193a:	dd78      	ble.n	31a2e <__aeabi_dadd+0x292>
   3193c:	2800      	cmp	r0, #0
   3193e:	d031      	beq.n	319a4 <__aeabi_dadd+0x208>
   31940:	4876      	ldr	r0, [pc, #472]	; (31b1c <__aeabi_dadd+0x380>)
   31942:	4286      	cmp	r6, r0
   31944:	d0ae      	beq.n	318a4 <__aeabi_dadd+0x108>
   31946:	2080      	movs	r0, #128	; 0x80
   31948:	0400      	lsls	r0, r0, #16
   3194a:	4301      	orrs	r1, r0
   3194c:	4653      	mov	r3, sl
   3194e:	2b38      	cmp	r3, #56	; 0x38
   31950:	dc00      	bgt.n	31954 <__aeabi_dadd+0x1b8>
   31952:	e0e9      	b.n	31b28 <__aeabi_dadd+0x38c>
   31954:	430a      	orrs	r2, r1
   31956:	1e51      	subs	r1, r2, #1
   31958:	418a      	sbcs	r2, r1
   3195a:	2100      	movs	r1, #0
   3195c:	19d2      	adds	r2, r2, r7
   3195e:	42ba      	cmp	r2, r7
   31960:	41bf      	sbcs	r7, r7
   31962:	1909      	adds	r1, r1, r4
   31964:	427c      	negs	r4, r7
   31966:	0017      	movs	r7, r2
   31968:	190c      	adds	r4, r1, r4
   3196a:	0223      	lsls	r3, r4, #8
   3196c:	d5d3      	bpl.n	31916 <__aeabi_dadd+0x17a>
   3196e:	4b6b      	ldr	r3, [pc, #428]	; (31b1c <__aeabi_dadd+0x380>)
   31970:	3601      	adds	r6, #1
   31972:	429e      	cmp	r6, r3
   31974:	d100      	bne.n	31978 <__aeabi_dadd+0x1dc>
   31976:	e13a      	b.n	31bee <__aeabi_dadd+0x452>
   31978:	2001      	movs	r0, #1
   3197a:	4b69      	ldr	r3, [pc, #420]	; (31b20 <__aeabi_dadd+0x384>)
   3197c:	401c      	ands	r4, r3
   3197e:	087b      	lsrs	r3, r7, #1
   31980:	4007      	ands	r7, r0
   31982:	431f      	orrs	r7, r3
   31984:	07e0      	lsls	r0, r4, #31
   31986:	4307      	orrs	r7, r0
   31988:	0864      	lsrs	r4, r4, #1
   3198a:	e78b      	b.n	318a4 <__aeabi_dadd+0x108>
   3198c:	0023      	movs	r3, r4
   3198e:	433b      	orrs	r3, r7
   31990:	d100      	bne.n	31994 <__aeabi_dadd+0x1f8>
   31992:	e1cb      	b.n	31d2c <__aeabi_dadd+0x590>
   31994:	2280      	movs	r2, #128	; 0x80
   31996:	0312      	lsls	r2, r2, #12
   31998:	4314      	orrs	r4, r2
   3199a:	0324      	lsls	r4, r4, #12
   3199c:	0b24      	lsrs	r4, r4, #12
   3199e:	e79e      	b.n	318de <__aeabi_dadd+0x142>
   319a0:	002e      	movs	r6, r5
   319a2:	e77f      	b.n	318a4 <__aeabi_dadd+0x108>
   319a4:	0008      	movs	r0, r1
   319a6:	4310      	orrs	r0, r2
   319a8:	d100      	bne.n	319ac <__aeabi_dadd+0x210>
   319aa:	e0b4      	b.n	31b16 <__aeabi_dadd+0x37a>
   319ac:	1e58      	subs	r0, r3, #1
   319ae:	2800      	cmp	r0, #0
   319b0:	d000      	beq.n	319b4 <__aeabi_dadd+0x218>
   319b2:	e0de      	b.n	31b72 <__aeabi_dadd+0x3d6>
   319b4:	18ba      	adds	r2, r7, r2
   319b6:	42ba      	cmp	r2, r7
   319b8:	419b      	sbcs	r3, r3
   319ba:	1864      	adds	r4, r4, r1
   319bc:	425b      	negs	r3, r3
   319be:	18e4      	adds	r4, r4, r3
   319c0:	0017      	movs	r7, r2
   319c2:	2601      	movs	r6, #1
   319c4:	0223      	lsls	r3, r4, #8
   319c6:	d5a6      	bpl.n	31916 <__aeabi_dadd+0x17a>
   319c8:	2602      	movs	r6, #2
   319ca:	e7d5      	b.n	31978 <__aeabi_dadd+0x1dc>
   319cc:	2d00      	cmp	r5, #0
   319ce:	d16e      	bne.n	31aae <__aeabi_dadd+0x312>
   319d0:	1c70      	adds	r0, r6, #1
   319d2:	0540      	lsls	r0, r0, #21
   319d4:	0d40      	lsrs	r0, r0, #21
   319d6:	2801      	cmp	r0, #1
   319d8:	dc00      	bgt.n	319dc <__aeabi_dadd+0x240>
   319da:	e0f9      	b.n	31bd0 <__aeabi_dadd+0x434>
   319dc:	1ab8      	subs	r0, r7, r2
   319de:	4684      	mov	ip, r0
   319e0:	4287      	cmp	r7, r0
   319e2:	4180      	sbcs	r0, r0
   319e4:	1ae5      	subs	r5, r4, r3
   319e6:	4240      	negs	r0, r0
   319e8:	1a2d      	subs	r5, r5, r0
   319ea:	0228      	lsls	r0, r5, #8
   319ec:	d400      	bmi.n	319f0 <__aeabi_dadd+0x254>
   319ee:	e089      	b.n	31b04 <__aeabi_dadd+0x368>
   319f0:	1bd7      	subs	r7, r2, r7
   319f2:	42ba      	cmp	r2, r7
   319f4:	4192      	sbcs	r2, r2
   319f6:	1b1c      	subs	r4, r3, r4
   319f8:	4252      	negs	r2, r2
   319fa:	1aa5      	subs	r5, r4, r2
   319fc:	46d8      	mov	r8, fp
   319fe:	e729      	b.n	31854 <__aeabi_dadd+0xb8>
   31a00:	4645      	mov	r5, r8
   31a02:	2400      	movs	r4, #0
   31a04:	2700      	movs	r7, #0
   31a06:	e76a      	b.n	318de <__aeabi_dadd+0x142>
   31a08:	4c45      	ldr	r4, [pc, #276]	; (31b20 <__aeabi_dadd+0x384>)
   31a0a:	1af6      	subs	r6, r6, r3
   31a0c:	402c      	ands	r4, r5
   31a0e:	e749      	b.n	318a4 <__aeabi_dadd+0x108>
   31a10:	003d      	movs	r5, r7
   31a12:	3828      	subs	r0, #40	; 0x28
   31a14:	4085      	lsls	r5, r0
   31a16:	2700      	movs	r7, #0
   31a18:	e72e      	b.n	31878 <__aeabi_dadd+0xdc>
   31a1a:	0038      	movs	r0, r7
   31a1c:	f001 fb04 	bl	33028 <__clzsi2>
   31a20:	3020      	adds	r0, #32
   31a22:	e71d      	b.n	31860 <__aeabi_dadd+0xc4>
   31a24:	430a      	orrs	r2, r1
   31a26:	1e51      	subs	r1, r2, #1
   31a28:	418a      	sbcs	r2, r1
   31a2a:	2100      	movs	r1, #0
   31a2c:	e707      	b.n	3183e <__aeabi_dadd+0xa2>
   31a2e:	2b00      	cmp	r3, #0
   31a30:	d000      	beq.n	31a34 <__aeabi_dadd+0x298>
   31a32:	e0f3      	b.n	31c1c <__aeabi_dadd+0x480>
   31a34:	1c70      	adds	r0, r6, #1
   31a36:	0543      	lsls	r3, r0, #21
   31a38:	0d5b      	lsrs	r3, r3, #21
   31a3a:	2b01      	cmp	r3, #1
   31a3c:	dc00      	bgt.n	31a40 <__aeabi_dadd+0x2a4>
   31a3e:	e0ad      	b.n	31b9c <__aeabi_dadd+0x400>
   31a40:	4b36      	ldr	r3, [pc, #216]	; (31b1c <__aeabi_dadd+0x380>)
   31a42:	4298      	cmp	r0, r3
   31a44:	d100      	bne.n	31a48 <__aeabi_dadd+0x2ac>
   31a46:	e0d1      	b.n	31bec <__aeabi_dadd+0x450>
   31a48:	18ba      	adds	r2, r7, r2
   31a4a:	42ba      	cmp	r2, r7
   31a4c:	41bf      	sbcs	r7, r7
   31a4e:	1864      	adds	r4, r4, r1
   31a50:	427f      	negs	r7, r7
   31a52:	19e4      	adds	r4, r4, r7
   31a54:	07e7      	lsls	r7, r4, #31
   31a56:	0852      	lsrs	r2, r2, #1
   31a58:	4317      	orrs	r7, r2
   31a5a:	0864      	lsrs	r4, r4, #1
   31a5c:	0006      	movs	r6, r0
   31a5e:	e721      	b.n	318a4 <__aeabi_dadd+0x108>
   31a60:	482e      	ldr	r0, [pc, #184]	; (31b1c <__aeabi_dadd+0x380>)
   31a62:	4285      	cmp	r5, r0
   31a64:	d100      	bne.n	31a68 <__aeabi_dadd+0x2cc>
   31a66:	e093      	b.n	31b90 <__aeabi_dadd+0x3f4>
   31a68:	001d      	movs	r5, r3
   31a6a:	e6d0      	b.n	3180e <__aeabi_dadd+0x72>
   31a6c:	0029      	movs	r1, r5
   31a6e:	3e1f      	subs	r6, #31
   31a70:	40f1      	lsrs	r1, r6
   31a72:	2b20      	cmp	r3, #32
   31a74:	d100      	bne.n	31a78 <__aeabi_dadd+0x2dc>
   31a76:	e08d      	b.n	31b94 <__aeabi_dadd+0x3f8>
   31a78:	2240      	movs	r2, #64	; 0x40
   31a7a:	1ad3      	subs	r3, r2, r3
   31a7c:	409d      	lsls	r5, r3
   31a7e:	432f      	orrs	r7, r5
   31a80:	1e7d      	subs	r5, r7, #1
   31a82:	41af      	sbcs	r7, r5
   31a84:	2400      	movs	r4, #0
   31a86:	430f      	orrs	r7, r1
   31a88:	2600      	movs	r6, #0
   31a8a:	e744      	b.n	31916 <__aeabi_dadd+0x17a>
   31a8c:	002b      	movs	r3, r5
   31a8e:	0008      	movs	r0, r1
   31a90:	3b20      	subs	r3, #32
   31a92:	40d8      	lsrs	r0, r3
   31a94:	0003      	movs	r3, r0
   31a96:	2d20      	cmp	r5, #32
   31a98:	d100      	bne.n	31a9c <__aeabi_dadd+0x300>
   31a9a:	e07d      	b.n	31b98 <__aeabi_dadd+0x3fc>
   31a9c:	2040      	movs	r0, #64	; 0x40
   31a9e:	1b45      	subs	r5, r0, r5
   31aa0:	40a9      	lsls	r1, r5
   31aa2:	430a      	orrs	r2, r1
   31aa4:	1e51      	subs	r1, r2, #1
   31aa6:	418a      	sbcs	r2, r1
   31aa8:	2100      	movs	r1, #0
   31aaa:	431a      	orrs	r2, r3
   31aac:	e6c7      	b.n	3183e <__aeabi_dadd+0xa2>
   31aae:	2e00      	cmp	r6, #0
   31ab0:	d050      	beq.n	31b54 <__aeabi_dadd+0x3b8>
   31ab2:	4e1a      	ldr	r6, [pc, #104]	; (31b1c <__aeabi_dadd+0x380>)
   31ab4:	42b0      	cmp	r0, r6
   31ab6:	d057      	beq.n	31b68 <__aeabi_dadd+0x3cc>
   31ab8:	2680      	movs	r6, #128	; 0x80
   31aba:	426b      	negs	r3, r5
   31abc:	4699      	mov	r9, r3
   31abe:	0436      	lsls	r6, r6, #16
   31ac0:	4334      	orrs	r4, r6
   31ac2:	464b      	mov	r3, r9
   31ac4:	2b38      	cmp	r3, #56	; 0x38
   31ac6:	dd00      	ble.n	31aca <__aeabi_dadd+0x32e>
   31ac8:	e0d6      	b.n	31c78 <__aeabi_dadd+0x4dc>
   31aca:	2b1f      	cmp	r3, #31
   31acc:	dd00      	ble.n	31ad0 <__aeabi_dadd+0x334>
   31ace:	e135      	b.n	31d3c <__aeabi_dadd+0x5a0>
   31ad0:	2620      	movs	r6, #32
   31ad2:	1af5      	subs	r5, r6, r3
   31ad4:	0026      	movs	r6, r4
   31ad6:	40ae      	lsls	r6, r5
   31ad8:	46b2      	mov	sl, r6
   31ada:	003e      	movs	r6, r7
   31adc:	40de      	lsrs	r6, r3
   31ade:	46ac      	mov	ip, r5
   31ae0:	0035      	movs	r5, r6
   31ae2:	4656      	mov	r6, sl
   31ae4:	432e      	orrs	r6, r5
   31ae6:	4665      	mov	r5, ip
   31ae8:	40af      	lsls	r7, r5
   31aea:	1e7d      	subs	r5, r7, #1
   31aec:	41af      	sbcs	r7, r5
   31aee:	40dc      	lsrs	r4, r3
   31af0:	4337      	orrs	r7, r6
   31af2:	1bd7      	subs	r7, r2, r7
   31af4:	42ba      	cmp	r2, r7
   31af6:	4192      	sbcs	r2, r2
   31af8:	1b0c      	subs	r4, r1, r4
   31afa:	4252      	negs	r2, r2
   31afc:	1aa4      	subs	r4, r4, r2
   31afe:	0006      	movs	r6, r0
   31b00:	46d8      	mov	r8, fp
   31b02:	e6a3      	b.n	3184c <__aeabi_dadd+0xb0>
   31b04:	4664      	mov	r4, ip
   31b06:	4667      	mov	r7, ip
   31b08:	432c      	orrs	r4, r5
   31b0a:	d000      	beq.n	31b0e <__aeabi_dadd+0x372>
   31b0c:	e6a2      	b.n	31854 <__aeabi_dadd+0xb8>
   31b0e:	2500      	movs	r5, #0
   31b10:	2600      	movs	r6, #0
   31b12:	2700      	movs	r7, #0
   31b14:	e706      	b.n	31924 <__aeabi_dadd+0x188>
   31b16:	001e      	movs	r6, r3
   31b18:	e6c4      	b.n	318a4 <__aeabi_dadd+0x108>
   31b1a:	46c0      	nop			; (mov r8, r8)
   31b1c:	000007ff 	.word	0x000007ff
   31b20:	ff7fffff 	.word	0xff7fffff
   31b24:	800fffff 	.word	0x800fffff
   31b28:	2b1f      	cmp	r3, #31
   31b2a:	dc63      	bgt.n	31bf4 <__aeabi_dadd+0x458>
   31b2c:	2020      	movs	r0, #32
   31b2e:	1ac3      	subs	r3, r0, r3
   31b30:	0008      	movs	r0, r1
   31b32:	4098      	lsls	r0, r3
   31b34:	469c      	mov	ip, r3
   31b36:	4683      	mov	fp, r0
   31b38:	4653      	mov	r3, sl
   31b3a:	0010      	movs	r0, r2
   31b3c:	40d8      	lsrs	r0, r3
   31b3e:	0003      	movs	r3, r0
   31b40:	4658      	mov	r0, fp
   31b42:	4318      	orrs	r0, r3
   31b44:	4663      	mov	r3, ip
   31b46:	409a      	lsls	r2, r3
   31b48:	1e53      	subs	r3, r2, #1
   31b4a:	419a      	sbcs	r2, r3
   31b4c:	4653      	mov	r3, sl
   31b4e:	4302      	orrs	r2, r0
   31b50:	40d9      	lsrs	r1, r3
   31b52:	e703      	b.n	3195c <__aeabi_dadd+0x1c0>
   31b54:	0026      	movs	r6, r4
   31b56:	433e      	orrs	r6, r7
   31b58:	d006      	beq.n	31b68 <__aeabi_dadd+0x3cc>
   31b5a:	43eb      	mvns	r3, r5
   31b5c:	4699      	mov	r9, r3
   31b5e:	2b00      	cmp	r3, #0
   31b60:	d0c7      	beq.n	31af2 <__aeabi_dadd+0x356>
   31b62:	4e94      	ldr	r6, [pc, #592]	; (31db4 <__aeabi_dadd+0x618>)
   31b64:	42b0      	cmp	r0, r6
   31b66:	d1ac      	bne.n	31ac2 <__aeabi_dadd+0x326>
   31b68:	000c      	movs	r4, r1
   31b6a:	0017      	movs	r7, r2
   31b6c:	0006      	movs	r6, r0
   31b6e:	46d8      	mov	r8, fp
   31b70:	e698      	b.n	318a4 <__aeabi_dadd+0x108>
   31b72:	4b90      	ldr	r3, [pc, #576]	; (31db4 <__aeabi_dadd+0x618>)
   31b74:	459a      	cmp	sl, r3
   31b76:	d00b      	beq.n	31b90 <__aeabi_dadd+0x3f4>
   31b78:	4682      	mov	sl, r0
   31b7a:	e6e7      	b.n	3194c <__aeabi_dadd+0x1b0>
   31b7c:	2800      	cmp	r0, #0
   31b7e:	d000      	beq.n	31b82 <__aeabi_dadd+0x3e6>
   31b80:	e09e      	b.n	31cc0 <__aeabi_dadd+0x524>
   31b82:	0018      	movs	r0, r3
   31b84:	4310      	orrs	r0, r2
   31b86:	d100      	bne.n	31b8a <__aeabi_dadd+0x3ee>
   31b88:	e0e9      	b.n	31d5e <__aeabi_dadd+0x5c2>
   31b8a:	001c      	movs	r4, r3
   31b8c:	0017      	movs	r7, r2
   31b8e:	46d8      	mov	r8, fp
   31b90:	4e88      	ldr	r6, [pc, #544]	; (31db4 <__aeabi_dadd+0x618>)
   31b92:	e687      	b.n	318a4 <__aeabi_dadd+0x108>
   31b94:	2500      	movs	r5, #0
   31b96:	e772      	b.n	31a7e <__aeabi_dadd+0x2e2>
   31b98:	2100      	movs	r1, #0
   31b9a:	e782      	b.n	31aa2 <__aeabi_dadd+0x306>
   31b9c:	0023      	movs	r3, r4
   31b9e:	433b      	orrs	r3, r7
   31ba0:	2e00      	cmp	r6, #0
   31ba2:	d000      	beq.n	31ba6 <__aeabi_dadd+0x40a>
   31ba4:	e0ab      	b.n	31cfe <__aeabi_dadd+0x562>
   31ba6:	2b00      	cmp	r3, #0
   31ba8:	d100      	bne.n	31bac <__aeabi_dadd+0x410>
   31baa:	e0e7      	b.n	31d7c <__aeabi_dadd+0x5e0>
   31bac:	000b      	movs	r3, r1
   31bae:	4313      	orrs	r3, r2
   31bb0:	d100      	bne.n	31bb4 <__aeabi_dadd+0x418>
   31bb2:	e677      	b.n	318a4 <__aeabi_dadd+0x108>
   31bb4:	18ba      	adds	r2, r7, r2
   31bb6:	42ba      	cmp	r2, r7
   31bb8:	41bf      	sbcs	r7, r7
   31bba:	1864      	adds	r4, r4, r1
   31bbc:	427f      	negs	r7, r7
   31bbe:	19e4      	adds	r4, r4, r7
   31bc0:	0223      	lsls	r3, r4, #8
   31bc2:	d400      	bmi.n	31bc6 <__aeabi_dadd+0x42a>
   31bc4:	e0f2      	b.n	31dac <__aeabi_dadd+0x610>
   31bc6:	4b7c      	ldr	r3, [pc, #496]	; (31db8 <__aeabi_dadd+0x61c>)
   31bc8:	0017      	movs	r7, r2
   31bca:	401c      	ands	r4, r3
   31bcc:	0006      	movs	r6, r0
   31bce:	e669      	b.n	318a4 <__aeabi_dadd+0x108>
   31bd0:	0020      	movs	r0, r4
   31bd2:	4338      	orrs	r0, r7
   31bd4:	2e00      	cmp	r6, #0
   31bd6:	d1d1      	bne.n	31b7c <__aeabi_dadd+0x3e0>
   31bd8:	2800      	cmp	r0, #0
   31bda:	d15b      	bne.n	31c94 <__aeabi_dadd+0x4f8>
   31bdc:	001c      	movs	r4, r3
   31bde:	4314      	orrs	r4, r2
   31be0:	d100      	bne.n	31be4 <__aeabi_dadd+0x448>
   31be2:	e0a8      	b.n	31d36 <__aeabi_dadd+0x59a>
   31be4:	001c      	movs	r4, r3
   31be6:	0017      	movs	r7, r2
   31be8:	46d8      	mov	r8, fp
   31bea:	e65b      	b.n	318a4 <__aeabi_dadd+0x108>
   31bec:	0006      	movs	r6, r0
   31bee:	2400      	movs	r4, #0
   31bf0:	2700      	movs	r7, #0
   31bf2:	e697      	b.n	31924 <__aeabi_dadd+0x188>
   31bf4:	4650      	mov	r0, sl
   31bf6:	000b      	movs	r3, r1
   31bf8:	3820      	subs	r0, #32
   31bfa:	40c3      	lsrs	r3, r0
   31bfc:	4699      	mov	r9, r3
   31bfe:	4653      	mov	r3, sl
   31c00:	2b20      	cmp	r3, #32
   31c02:	d100      	bne.n	31c06 <__aeabi_dadd+0x46a>
   31c04:	e095      	b.n	31d32 <__aeabi_dadd+0x596>
   31c06:	2340      	movs	r3, #64	; 0x40
   31c08:	4650      	mov	r0, sl
   31c0a:	1a1b      	subs	r3, r3, r0
   31c0c:	4099      	lsls	r1, r3
   31c0e:	430a      	orrs	r2, r1
   31c10:	1e51      	subs	r1, r2, #1
   31c12:	418a      	sbcs	r2, r1
   31c14:	464b      	mov	r3, r9
   31c16:	2100      	movs	r1, #0
   31c18:	431a      	orrs	r2, r3
   31c1a:	e69f      	b.n	3195c <__aeabi_dadd+0x1c0>
   31c1c:	2e00      	cmp	r6, #0
   31c1e:	d130      	bne.n	31c82 <__aeabi_dadd+0x4e6>
   31c20:	0026      	movs	r6, r4
   31c22:	433e      	orrs	r6, r7
   31c24:	d067      	beq.n	31cf6 <__aeabi_dadd+0x55a>
   31c26:	43db      	mvns	r3, r3
   31c28:	469a      	mov	sl, r3
   31c2a:	2b00      	cmp	r3, #0
   31c2c:	d01c      	beq.n	31c68 <__aeabi_dadd+0x4cc>
   31c2e:	4e61      	ldr	r6, [pc, #388]	; (31db4 <__aeabi_dadd+0x618>)
   31c30:	42b0      	cmp	r0, r6
   31c32:	d060      	beq.n	31cf6 <__aeabi_dadd+0x55a>
   31c34:	4653      	mov	r3, sl
   31c36:	2b38      	cmp	r3, #56	; 0x38
   31c38:	dd00      	ble.n	31c3c <__aeabi_dadd+0x4a0>
   31c3a:	e096      	b.n	31d6a <__aeabi_dadd+0x5ce>
   31c3c:	2b1f      	cmp	r3, #31
   31c3e:	dd00      	ble.n	31c42 <__aeabi_dadd+0x4a6>
   31c40:	e09f      	b.n	31d82 <__aeabi_dadd+0x5e6>
   31c42:	2620      	movs	r6, #32
   31c44:	1af3      	subs	r3, r6, r3
   31c46:	0026      	movs	r6, r4
   31c48:	409e      	lsls	r6, r3
   31c4a:	469c      	mov	ip, r3
   31c4c:	46b3      	mov	fp, r6
   31c4e:	4653      	mov	r3, sl
   31c50:	003e      	movs	r6, r7
   31c52:	40de      	lsrs	r6, r3
   31c54:	0033      	movs	r3, r6
   31c56:	465e      	mov	r6, fp
   31c58:	431e      	orrs	r6, r3
   31c5a:	4663      	mov	r3, ip
   31c5c:	409f      	lsls	r7, r3
   31c5e:	1e7b      	subs	r3, r7, #1
   31c60:	419f      	sbcs	r7, r3
   31c62:	4653      	mov	r3, sl
   31c64:	40dc      	lsrs	r4, r3
   31c66:	4337      	orrs	r7, r6
   31c68:	18bf      	adds	r7, r7, r2
   31c6a:	4297      	cmp	r7, r2
   31c6c:	4192      	sbcs	r2, r2
   31c6e:	1864      	adds	r4, r4, r1
   31c70:	4252      	negs	r2, r2
   31c72:	18a4      	adds	r4, r4, r2
   31c74:	0006      	movs	r6, r0
   31c76:	e678      	b.n	3196a <__aeabi_dadd+0x1ce>
   31c78:	4327      	orrs	r7, r4
   31c7a:	1e7c      	subs	r4, r7, #1
   31c7c:	41a7      	sbcs	r7, r4
   31c7e:	2400      	movs	r4, #0
   31c80:	e737      	b.n	31af2 <__aeabi_dadd+0x356>
   31c82:	4e4c      	ldr	r6, [pc, #304]	; (31db4 <__aeabi_dadd+0x618>)
   31c84:	42b0      	cmp	r0, r6
   31c86:	d036      	beq.n	31cf6 <__aeabi_dadd+0x55a>
   31c88:	2680      	movs	r6, #128	; 0x80
   31c8a:	425b      	negs	r3, r3
   31c8c:	0436      	lsls	r6, r6, #16
   31c8e:	469a      	mov	sl, r3
   31c90:	4334      	orrs	r4, r6
   31c92:	e7cf      	b.n	31c34 <__aeabi_dadd+0x498>
   31c94:	0018      	movs	r0, r3
   31c96:	4310      	orrs	r0, r2
   31c98:	d100      	bne.n	31c9c <__aeabi_dadd+0x500>
   31c9a:	e603      	b.n	318a4 <__aeabi_dadd+0x108>
   31c9c:	1ab8      	subs	r0, r7, r2
   31c9e:	4684      	mov	ip, r0
   31ca0:	4567      	cmp	r7, ip
   31ca2:	41ad      	sbcs	r5, r5
   31ca4:	1ae0      	subs	r0, r4, r3
   31ca6:	426d      	negs	r5, r5
   31ca8:	1b40      	subs	r0, r0, r5
   31caa:	0205      	lsls	r5, r0, #8
   31cac:	d400      	bmi.n	31cb0 <__aeabi_dadd+0x514>
   31cae:	e62c      	b.n	3190a <__aeabi_dadd+0x16e>
   31cb0:	1bd7      	subs	r7, r2, r7
   31cb2:	42ba      	cmp	r2, r7
   31cb4:	4192      	sbcs	r2, r2
   31cb6:	1b1c      	subs	r4, r3, r4
   31cb8:	4252      	negs	r2, r2
   31cba:	1aa4      	subs	r4, r4, r2
   31cbc:	46d8      	mov	r8, fp
   31cbe:	e5f1      	b.n	318a4 <__aeabi_dadd+0x108>
   31cc0:	0018      	movs	r0, r3
   31cc2:	4310      	orrs	r0, r2
   31cc4:	d100      	bne.n	31cc8 <__aeabi_dadd+0x52c>
   31cc6:	e763      	b.n	31b90 <__aeabi_dadd+0x3f4>
   31cc8:	08f8      	lsrs	r0, r7, #3
   31cca:	0767      	lsls	r7, r4, #29
   31ccc:	4307      	orrs	r7, r0
   31cce:	2080      	movs	r0, #128	; 0x80
   31cd0:	08e4      	lsrs	r4, r4, #3
   31cd2:	0300      	lsls	r0, r0, #12
   31cd4:	4204      	tst	r4, r0
   31cd6:	d008      	beq.n	31cea <__aeabi_dadd+0x54e>
   31cd8:	08dd      	lsrs	r5, r3, #3
   31cda:	4205      	tst	r5, r0
   31cdc:	d105      	bne.n	31cea <__aeabi_dadd+0x54e>
   31cde:	08d2      	lsrs	r2, r2, #3
   31ce0:	0759      	lsls	r1, r3, #29
   31ce2:	4311      	orrs	r1, r2
   31ce4:	000f      	movs	r7, r1
   31ce6:	002c      	movs	r4, r5
   31ce8:	46d8      	mov	r8, fp
   31cea:	0f7b      	lsrs	r3, r7, #29
   31cec:	00e4      	lsls	r4, r4, #3
   31cee:	431c      	orrs	r4, r3
   31cf0:	00ff      	lsls	r7, r7, #3
   31cf2:	4e30      	ldr	r6, [pc, #192]	; (31db4 <__aeabi_dadd+0x618>)
   31cf4:	e5d6      	b.n	318a4 <__aeabi_dadd+0x108>
   31cf6:	000c      	movs	r4, r1
   31cf8:	0017      	movs	r7, r2
   31cfa:	0006      	movs	r6, r0
   31cfc:	e5d2      	b.n	318a4 <__aeabi_dadd+0x108>
   31cfe:	2b00      	cmp	r3, #0
   31d00:	d038      	beq.n	31d74 <__aeabi_dadd+0x5d8>
   31d02:	000b      	movs	r3, r1
   31d04:	4313      	orrs	r3, r2
   31d06:	d100      	bne.n	31d0a <__aeabi_dadd+0x56e>
   31d08:	e742      	b.n	31b90 <__aeabi_dadd+0x3f4>
   31d0a:	08f8      	lsrs	r0, r7, #3
   31d0c:	0767      	lsls	r7, r4, #29
   31d0e:	4307      	orrs	r7, r0
   31d10:	2080      	movs	r0, #128	; 0x80
   31d12:	08e4      	lsrs	r4, r4, #3
   31d14:	0300      	lsls	r0, r0, #12
   31d16:	4204      	tst	r4, r0
   31d18:	d0e7      	beq.n	31cea <__aeabi_dadd+0x54e>
   31d1a:	08cb      	lsrs	r3, r1, #3
   31d1c:	4203      	tst	r3, r0
   31d1e:	d1e4      	bne.n	31cea <__aeabi_dadd+0x54e>
   31d20:	08d2      	lsrs	r2, r2, #3
   31d22:	0749      	lsls	r1, r1, #29
   31d24:	4311      	orrs	r1, r2
   31d26:	000f      	movs	r7, r1
   31d28:	001c      	movs	r4, r3
   31d2a:	e7de      	b.n	31cea <__aeabi_dadd+0x54e>
   31d2c:	2700      	movs	r7, #0
   31d2e:	2400      	movs	r4, #0
   31d30:	e5d5      	b.n	318de <__aeabi_dadd+0x142>
   31d32:	2100      	movs	r1, #0
   31d34:	e76b      	b.n	31c0e <__aeabi_dadd+0x472>
   31d36:	2500      	movs	r5, #0
   31d38:	2700      	movs	r7, #0
   31d3a:	e5f3      	b.n	31924 <__aeabi_dadd+0x188>
   31d3c:	464e      	mov	r6, r9
   31d3e:	0025      	movs	r5, r4
   31d40:	3e20      	subs	r6, #32
   31d42:	40f5      	lsrs	r5, r6
   31d44:	464b      	mov	r3, r9
   31d46:	002e      	movs	r6, r5
   31d48:	2b20      	cmp	r3, #32
   31d4a:	d02d      	beq.n	31da8 <__aeabi_dadd+0x60c>
   31d4c:	2540      	movs	r5, #64	; 0x40
   31d4e:	1aed      	subs	r5, r5, r3
   31d50:	40ac      	lsls	r4, r5
   31d52:	4327      	orrs	r7, r4
   31d54:	1e7c      	subs	r4, r7, #1
   31d56:	41a7      	sbcs	r7, r4
   31d58:	2400      	movs	r4, #0
   31d5a:	4337      	orrs	r7, r6
   31d5c:	e6c9      	b.n	31af2 <__aeabi_dadd+0x356>
   31d5e:	2480      	movs	r4, #128	; 0x80
   31d60:	2500      	movs	r5, #0
   31d62:	0324      	lsls	r4, r4, #12
   31d64:	4e13      	ldr	r6, [pc, #76]	; (31db4 <__aeabi_dadd+0x618>)
   31d66:	2700      	movs	r7, #0
   31d68:	e5dc      	b.n	31924 <__aeabi_dadd+0x188>
   31d6a:	4327      	orrs	r7, r4
   31d6c:	1e7c      	subs	r4, r7, #1
   31d6e:	41a7      	sbcs	r7, r4
   31d70:	2400      	movs	r4, #0
   31d72:	e779      	b.n	31c68 <__aeabi_dadd+0x4cc>
   31d74:	000c      	movs	r4, r1
   31d76:	0017      	movs	r7, r2
   31d78:	4e0e      	ldr	r6, [pc, #56]	; (31db4 <__aeabi_dadd+0x618>)
   31d7a:	e593      	b.n	318a4 <__aeabi_dadd+0x108>
   31d7c:	000c      	movs	r4, r1
   31d7e:	0017      	movs	r7, r2
   31d80:	e590      	b.n	318a4 <__aeabi_dadd+0x108>
   31d82:	4656      	mov	r6, sl
   31d84:	0023      	movs	r3, r4
   31d86:	3e20      	subs	r6, #32
   31d88:	40f3      	lsrs	r3, r6
   31d8a:	4699      	mov	r9, r3
   31d8c:	4653      	mov	r3, sl
   31d8e:	2b20      	cmp	r3, #32
   31d90:	d00e      	beq.n	31db0 <__aeabi_dadd+0x614>
   31d92:	2340      	movs	r3, #64	; 0x40
   31d94:	4656      	mov	r6, sl
   31d96:	1b9b      	subs	r3, r3, r6
   31d98:	409c      	lsls	r4, r3
   31d9a:	4327      	orrs	r7, r4
   31d9c:	1e7c      	subs	r4, r7, #1
   31d9e:	41a7      	sbcs	r7, r4
   31da0:	464b      	mov	r3, r9
   31da2:	2400      	movs	r4, #0
   31da4:	431f      	orrs	r7, r3
   31da6:	e75f      	b.n	31c68 <__aeabi_dadd+0x4cc>
   31da8:	2400      	movs	r4, #0
   31daa:	e7d2      	b.n	31d52 <__aeabi_dadd+0x5b6>
   31dac:	0017      	movs	r7, r2
   31dae:	e5b2      	b.n	31916 <__aeabi_dadd+0x17a>
   31db0:	2400      	movs	r4, #0
   31db2:	e7f2      	b.n	31d9a <__aeabi_dadd+0x5fe>
   31db4:	000007ff 	.word	0x000007ff
   31db8:	ff7fffff 	.word	0xff7fffff

00031dbc <__aeabi_ddiv>:
   31dbc:	b5f0      	push	{r4, r5, r6, r7, lr}
   31dbe:	4657      	mov	r7, sl
   31dc0:	4645      	mov	r5, r8
   31dc2:	46de      	mov	lr, fp
   31dc4:	464e      	mov	r6, r9
   31dc6:	b5e0      	push	{r5, r6, r7, lr}
   31dc8:	004c      	lsls	r4, r1, #1
   31dca:	030e      	lsls	r6, r1, #12
   31dcc:	b087      	sub	sp, #28
   31dce:	4683      	mov	fp, r0
   31dd0:	4692      	mov	sl, r2
   31dd2:	001d      	movs	r5, r3
   31dd4:	4680      	mov	r8, r0
   31dd6:	0b36      	lsrs	r6, r6, #12
   31dd8:	0d64      	lsrs	r4, r4, #21
   31dda:	0fcf      	lsrs	r7, r1, #31
   31ddc:	2c00      	cmp	r4, #0
   31dde:	d04f      	beq.n	31e80 <__aeabi_ddiv+0xc4>
   31de0:	4b6f      	ldr	r3, [pc, #444]	; (31fa0 <__aeabi_ddiv+0x1e4>)
   31de2:	429c      	cmp	r4, r3
   31de4:	d035      	beq.n	31e52 <__aeabi_ddiv+0x96>
   31de6:	2380      	movs	r3, #128	; 0x80
   31de8:	0f42      	lsrs	r2, r0, #29
   31dea:	041b      	lsls	r3, r3, #16
   31dec:	00f6      	lsls	r6, r6, #3
   31dee:	4313      	orrs	r3, r2
   31df0:	4333      	orrs	r3, r6
   31df2:	4699      	mov	r9, r3
   31df4:	00c3      	lsls	r3, r0, #3
   31df6:	4698      	mov	r8, r3
   31df8:	4b6a      	ldr	r3, [pc, #424]	; (31fa4 <__aeabi_ddiv+0x1e8>)
   31dfa:	2600      	movs	r6, #0
   31dfc:	469c      	mov	ip, r3
   31dfe:	2300      	movs	r3, #0
   31e00:	4464      	add	r4, ip
   31e02:	9303      	str	r3, [sp, #12]
   31e04:	032b      	lsls	r3, r5, #12
   31e06:	0b1b      	lsrs	r3, r3, #12
   31e08:	469b      	mov	fp, r3
   31e0a:	006b      	lsls	r3, r5, #1
   31e0c:	0fed      	lsrs	r5, r5, #31
   31e0e:	4650      	mov	r0, sl
   31e10:	0d5b      	lsrs	r3, r3, #21
   31e12:	9501      	str	r5, [sp, #4]
   31e14:	d05e      	beq.n	31ed4 <__aeabi_ddiv+0x118>
   31e16:	4a62      	ldr	r2, [pc, #392]	; (31fa0 <__aeabi_ddiv+0x1e4>)
   31e18:	4293      	cmp	r3, r2
   31e1a:	d053      	beq.n	31ec4 <__aeabi_ddiv+0x108>
   31e1c:	465a      	mov	r2, fp
   31e1e:	00d1      	lsls	r1, r2, #3
   31e20:	2280      	movs	r2, #128	; 0x80
   31e22:	0f40      	lsrs	r0, r0, #29
   31e24:	0412      	lsls	r2, r2, #16
   31e26:	4302      	orrs	r2, r0
   31e28:	430a      	orrs	r2, r1
   31e2a:	4693      	mov	fp, r2
   31e2c:	4652      	mov	r2, sl
   31e2e:	00d1      	lsls	r1, r2, #3
   31e30:	4a5c      	ldr	r2, [pc, #368]	; (31fa4 <__aeabi_ddiv+0x1e8>)
   31e32:	4694      	mov	ip, r2
   31e34:	2200      	movs	r2, #0
   31e36:	4463      	add	r3, ip
   31e38:	0038      	movs	r0, r7
   31e3a:	4068      	eors	r0, r5
   31e3c:	4684      	mov	ip, r0
   31e3e:	9002      	str	r0, [sp, #8]
   31e40:	1ae4      	subs	r4, r4, r3
   31e42:	4316      	orrs	r6, r2
   31e44:	2e0f      	cmp	r6, #15
   31e46:	d900      	bls.n	31e4a <__aeabi_ddiv+0x8e>
   31e48:	e0b4      	b.n	31fb4 <__aeabi_ddiv+0x1f8>
   31e4a:	4b57      	ldr	r3, [pc, #348]	; (31fa8 <__aeabi_ddiv+0x1ec>)
   31e4c:	00b6      	lsls	r6, r6, #2
   31e4e:	599b      	ldr	r3, [r3, r6]
   31e50:	469f      	mov	pc, r3
   31e52:	0003      	movs	r3, r0
   31e54:	4333      	orrs	r3, r6
   31e56:	4699      	mov	r9, r3
   31e58:	d16c      	bne.n	31f34 <__aeabi_ddiv+0x178>
   31e5a:	2300      	movs	r3, #0
   31e5c:	4698      	mov	r8, r3
   31e5e:	3302      	adds	r3, #2
   31e60:	2608      	movs	r6, #8
   31e62:	9303      	str	r3, [sp, #12]
   31e64:	e7ce      	b.n	31e04 <__aeabi_ddiv+0x48>
   31e66:	46cb      	mov	fp, r9
   31e68:	4641      	mov	r1, r8
   31e6a:	9a03      	ldr	r2, [sp, #12]
   31e6c:	9701      	str	r7, [sp, #4]
   31e6e:	2a02      	cmp	r2, #2
   31e70:	d165      	bne.n	31f3e <__aeabi_ddiv+0x182>
   31e72:	9b01      	ldr	r3, [sp, #4]
   31e74:	4c4a      	ldr	r4, [pc, #296]	; (31fa0 <__aeabi_ddiv+0x1e4>)
   31e76:	469c      	mov	ip, r3
   31e78:	2300      	movs	r3, #0
   31e7a:	2200      	movs	r2, #0
   31e7c:	4698      	mov	r8, r3
   31e7e:	e06b      	b.n	31f58 <__aeabi_ddiv+0x19c>
   31e80:	0003      	movs	r3, r0
   31e82:	4333      	orrs	r3, r6
   31e84:	4699      	mov	r9, r3
   31e86:	d04e      	beq.n	31f26 <__aeabi_ddiv+0x16a>
   31e88:	2e00      	cmp	r6, #0
   31e8a:	d100      	bne.n	31e8e <__aeabi_ddiv+0xd2>
   31e8c:	e1bc      	b.n	32208 <__aeabi_ddiv+0x44c>
   31e8e:	0030      	movs	r0, r6
   31e90:	f001 f8ca 	bl	33028 <__clzsi2>
   31e94:	0003      	movs	r3, r0
   31e96:	3b0b      	subs	r3, #11
   31e98:	2b1c      	cmp	r3, #28
   31e9a:	dd00      	ble.n	31e9e <__aeabi_ddiv+0xe2>
   31e9c:	e1ac      	b.n	321f8 <__aeabi_ddiv+0x43c>
   31e9e:	221d      	movs	r2, #29
   31ea0:	1ad3      	subs	r3, r2, r3
   31ea2:	465a      	mov	r2, fp
   31ea4:	0001      	movs	r1, r0
   31ea6:	40da      	lsrs	r2, r3
   31ea8:	3908      	subs	r1, #8
   31eaa:	408e      	lsls	r6, r1
   31eac:	0013      	movs	r3, r2
   31eae:	4333      	orrs	r3, r6
   31eb0:	4699      	mov	r9, r3
   31eb2:	465b      	mov	r3, fp
   31eb4:	408b      	lsls	r3, r1
   31eb6:	4698      	mov	r8, r3
   31eb8:	2300      	movs	r3, #0
   31eba:	4c3c      	ldr	r4, [pc, #240]	; (31fac <__aeabi_ddiv+0x1f0>)
   31ebc:	2600      	movs	r6, #0
   31ebe:	1a24      	subs	r4, r4, r0
   31ec0:	9303      	str	r3, [sp, #12]
   31ec2:	e79f      	b.n	31e04 <__aeabi_ddiv+0x48>
   31ec4:	4651      	mov	r1, sl
   31ec6:	465a      	mov	r2, fp
   31ec8:	4311      	orrs	r1, r2
   31eca:	d129      	bne.n	31f20 <__aeabi_ddiv+0x164>
   31ecc:	2200      	movs	r2, #0
   31ece:	4693      	mov	fp, r2
   31ed0:	3202      	adds	r2, #2
   31ed2:	e7b1      	b.n	31e38 <__aeabi_ddiv+0x7c>
   31ed4:	4659      	mov	r1, fp
   31ed6:	4301      	orrs	r1, r0
   31ed8:	d01e      	beq.n	31f18 <__aeabi_ddiv+0x15c>
   31eda:	465b      	mov	r3, fp
   31edc:	2b00      	cmp	r3, #0
   31ede:	d100      	bne.n	31ee2 <__aeabi_ddiv+0x126>
   31ee0:	e19e      	b.n	32220 <__aeabi_ddiv+0x464>
   31ee2:	4658      	mov	r0, fp
   31ee4:	f001 f8a0 	bl	33028 <__clzsi2>
   31ee8:	0003      	movs	r3, r0
   31eea:	3b0b      	subs	r3, #11
   31eec:	2b1c      	cmp	r3, #28
   31eee:	dd00      	ble.n	31ef2 <__aeabi_ddiv+0x136>
   31ef0:	e18f      	b.n	32212 <__aeabi_ddiv+0x456>
   31ef2:	0002      	movs	r2, r0
   31ef4:	4659      	mov	r1, fp
   31ef6:	3a08      	subs	r2, #8
   31ef8:	4091      	lsls	r1, r2
   31efa:	468b      	mov	fp, r1
   31efc:	211d      	movs	r1, #29
   31efe:	1acb      	subs	r3, r1, r3
   31f00:	4651      	mov	r1, sl
   31f02:	40d9      	lsrs	r1, r3
   31f04:	000b      	movs	r3, r1
   31f06:	4659      	mov	r1, fp
   31f08:	430b      	orrs	r3, r1
   31f0a:	4651      	mov	r1, sl
   31f0c:	469b      	mov	fp, r3
   31f0e:	4091      	lsls	r1, r2
   31f10:	4b26      	ldr	r3, [pc, #152]	; (31fac <__aeabi_ddiv+0x1f0>)
   31f12:	2200      	movs	r2, #0
   31f14:	1a1b      	subs	r3, r3, r0
   31f16:	e78f      	b.n	31e38 <__aeabi_ddiv+0x7c>
   31f18:	2300      	movs	r3, #0
   31f1a:	2201      	movs	r2, #1
   31f1c:	469b      	mov	fp, r3
   31f1e:	e78b      	b.n	31e38 <__aeabi_ddiv+0x7c>
   31f20:	4651      	mov	r1, sl
   31f22:	2203      	movs	r2, #3
   31f24:	e788      	b.n	31e38 <__aeabi_ddiv+0x7c>
   31f26:	2300      	movs	r3, #0
   31f28:	4698      	mov	r8, r3
   31f2a:	3301      	adds	r3, #1
   31f2c:	2604      	movs	r6, #4
   31f2e:	2400      	movs	r4, #0
   31f30:	9303      	str	r3, [sp, #12]
   31f32:	e767      	b.n	31e04 <__aeabi_ddiv+0x48>
   31f34:	2303      	movs	r3, #3
   31f36:	46b1      	mov	r9, r6
   31f38:	9303      	str	r3, [sp, #12]
   31f3a:	260c      	movs	r6, #12
   31f3c:	e762      	b.n	31e04 <__aeabi_ddiv+0x48>
   31f3e:	2a03      	cmp	r2, #3
   31f40:	d100      	bne.n	31f44 <__aeabi_ddiv+0x188>
   31f42:	e25c      	b.n	323fe <__aeabi_ddiv+0x642>
   31f44:	9b01      	ldr	r3, [sp, #4]
   31f46:	2a01      	cmp	r2, #1
   31f48:	d000      	beq.n	31f4c <__aeabi_ddiv+0x190>
   31f4a:	e1e4      	b.n	32316 <__aeabi_ddiv+0x55a>
   31f4c:	4013      	ands	r3, r2
   31f4e:	469c      	mov	ip, r3
   31f50:	2300      	movs	r3, #0
   31f52:	2400      	movs	r4, #0
   31f54:	2200      	movs	r2, #0
   31f56:	4698      	mov	r8, r3
   31f58:	2100      	movs	r1, #0
   31f5a:	0312      	lsls	r2, r2, #12
   31f5c:	0b13      	lsrs	r3, r2, #12
   31f5e:	0d0a      	lsrs	r2, r1, #20
   31f60:	0512      	lsls	r2, r2, #20
   31f62:	431a      	orrs	r2, r3
   31f64:	0523      	lsls	r3, r4, #20
   31f66:	4c12      	ldr	r4, [pc, #72]	; (31fb0 <__aeabi_ddiv+0x1f4>)
   31f68:	4640      	mov	r0, r8
   31f6a:	4022      	ands	r2, r4
   31f6c:	4313      	orrs	r3, r2
   31f6e:	4662      	mov	r2, ip
   31f70:	005b      	lsls	r3, r3, #1
   31f72:	07d2      	lsls	r2, r2, #31
   31f74:	085b      	lsrs	r3, r3, #1
   31f76:	4313      	orrs	r3, r2
   31f78:	0019      	movs	r1, r3
   31f7a:	b007      	add	sp, #28
   31f7c:	bc3c      	pop	{r2, r3, r4, r5}
   31f7e:	4690      	mov	r8, r2
   31f80:	4699      	mov	r9, r3
   31f82:	46a2      	mov	sl, r4
   31f84:	46ab      	mov	fp, r5
   31f86:	bdf0      	pop	{r4, r5, r6, r7, pc}
   31f88:	2300      	movs	r3, #0
   31f8a:	2280      	movs	r2, #128	; 0x80
   31f8c:	469c      	mov	ip, r3
   31f8e:	0312      	lsls	r2, r2, #12
   31f90:	4698      	mov	r8, r3
   31f92:	4c03      	ldr	r4, [pc, #12]	; (31fa0 <__aeabi_ddiv+0x1e4>)
   31f94:	e7e0      	b.n	31f58 <__aeabi_ddiv+0x19c>
   31f96:	2300      	movs	r3, #0
   31f98:	4c01      	ldr	r4, [pc, #4]	; (31fa0 <__aeabi_ddiv+0x1e4>)
   31f9a:	2200      	movs	r2, #0
   31f9c:	4698      	mov	r8, r3
   31f9e:	e7db      	b.n	31f58 <__aeabi_ddiv+0x19c>
   31fa0:	000007ff 	.word	0x000007ff
   31fa4:	fffffc01 	.word	0xfffffc01
   31fa8:	0003844c 	.word	0x0003844c
   31fac:	fffffc0d 	.word	0xfffffc0d
   31fb0:	800fffff 	.word	0x800fffff
   31fb4:	45d9      	cmp	r9, fp
   31fb6:	d900      	bls.n	31fba <__aeabi_ddiv+0x1fe>
   31fb8:	e139      	b.n	3222e <__aeabi_ddiv+0x472>
   31fba:	d100      	bne.n	31fbe <__aeabi_ddiv+0x202>
   31fbc:	e134      	b.n	32228 <__aeabi_ddiv+0x46c>
   31fbe:	2300      	movs	r3, #0
   31fc0:	4646      	mov	r6, r8
   31fc2:	464d      	mov	r5, r9
   31fc4:	469a      	mov	sl, r3
   31fc6:	3c01      	subs	r4, #1
   31fc8:	465b      	mov	r3, fp
   31fca:	0e0a      	lsrs	r2, r1, #24
   31fcc:	021b      	lsls	r3, r3, #8
   31fce:	431a      	orrs	r2, r3
   31fd0:	020b      	lsls	r3, r1, #8
   31fd2:	0c17      	lsrs	r7, r2, #16
   31fd4:	9303      	str	r3, [sp, #12]
   31fd6:	0413      	lsls	r3, r2, #16
   31fd8:	0c1b      	lsrs	r3, r3, #16
   31fda:	0039      	movs	r1, r7
   31fdc:	0028      	movs	r0, r5
   31fde:	4690      	mov	r8, r2
   31fe0:	9301      	str	r3, [sp, #4]
   31fe2:	f7ff f883 	bl	310ec <__udivsi3>
   31fe6:	0002      	movs	r2, r0
   31fe8:	9b01      	ldr	r3, [sp, #4]
   31fea:	4683      	mov	fp, r0
   31fec:	435a      	muls	r2, r3
   31fee:	0028      	movs	r0, r5
   31ff0:	0039      	movs	r1, r7
   31ff2:	4691      	mov	r9, r2
   31ff4:	f7ff f900 	bl	311f8 <__aeabi_uidivmod>
   31ff8:	0c35      	lsrs	r5, r6, #16
   31ffa:	0409      	lsls	r1, r1, #16
   31ffc:	430d      	orrs	r5, r1
   31ffe:	45a9      	cmp	r9, r5
   32000:	d90d      	bls.n	3201e <__aeabi_ddiv+0x262>
   32002:	465b      	mov	r3, fp
   32004:	4445      	add	r5, r8
   32006:	3b01      	subs	r3, #1
   32008:	45a8      	cmp	r8, r5
   3200a:	d900      	bls.n	3200e <__aeabi_ddiv+0x252>
   3200c:	e13a      	b.n	32284 <__aeabi_ddiv+0x4c8>
   3200e:	45a9      	cmp	r9, r5
   32010:	d800      	bhi.n	32014 <__aeabi_ddiv+0x258>
   32012:	e137      	b.n	32284 <__aeabi_ddiv+0x4c8>
   32014:	2302      	movs	r3, #2
   32016:	425b      	negs	r3, r3
   32018:	469c      	mov	ip, r3
   3201a:	4445      	add	r5, r8
   3201c:	44e3      	add	fp, ip
   3201e:	464b      	mov	r3, r9
   32020:	1aeb      	subs	r3, r5, r3
   32022:	0039      	movs	r1, r7
   32024:	0018      	movs	r0, r3
   32026:	9304      	str	r3, [sp, #16]
   32028:	f7ff f860 	bl	310ec <__udivsi3>
   3202c:	9b01      	ldr	r3, [sp, #4]
   3202e:	0005      	movs	r5, r0
   32030:	4343      	muls	r3, r0
   32032:	0039      	movs	r1, r7
   32034:	9804      	ldr	r0, [sp, #16]
   32036:	4699      	mov	r9, r3
   32038:	f7ff f8de 	bl	311f8 <__aeabi_uidivmod>
   3203c:	0433      	lsls	r3, r6, #16
   3203e:	0409      	lsls	r1, r1, #16
   32040:	0c1b      	lsrs	r3, r3, #16
   32042:	430b      	orrs	r3, r1
   32044:	4599      	cmp	r9, r3
   32046:	d909      	bls.n	3205c <__aeabi_ddiv+0x2a0>
   32048:	4443      	add	r3, r8
   3204a:	1e6a      	subs	r2, r5, #1
   3204c:	4598      	cmp	r8, r3
   3204e:	d900      	bls.n	32052 <__aeabi_ddiv+0x296>
   32050:	e11a      	b.n	32288 <__aeabi_ddiv+0x4cc>
   32052:	4599      	cmp	r9, r3
   32054:	d800      	bhi.n	32058 <__aeabi_ddiv+0x29c>
   32056:	e117      	b.n	32288 <__aeabi_ddiv+0x4cc>
   32058:	3d02      	subs	r5, #2
   3205a:	4443      	add	r3, r8
   3205c:	464a      	mov	r2, r9
   3205e:	1a9b      	subs	r3, r3, r2
   32060:	465a      	mov	r2, fp
   32062:	0412      	lsls	r2, r2, #16
   32064:	432a      	orrs	r2, r5
   32066:	9903      	ldr	r1, [sp, #12]
   32068:	4693      	mov	fp, r2
   3206a:	0c10      	lsrs	r0, r2, #16
   3206c:	0c0a      	lsrs	r2, r1, #16
   3206e:	4691      	mov	r9, r2
   32070:	0409      	lsls	r1, r1, #16
   32072:	465a      	mov	r2, fp
   32074:	0c09      	lsrs	r1, r1, #16
   32076:	464e      	mov	r6, r9
   32078:	000d      	movs	r5, r1
   3207a:	0412      	lsls	r2, r2, #16
   3207c:	0c12      	lsrs	r2, r2, #16
   3207e:	4345      	muls	r5, r0
   32080:	9105      	str	r1, [sp, #20]
   32082:	4351      	muls	r1, r2
   32084:	4372      	muls	r2, r6
   32086:	4370      	muls	r0, r6
   32088:	1952      	adds	r2, r2, r5
   3208a:	0c0e      	lsrs	r6, r1, #16
   3208c:	18b2      	adds	r2, r6, r2
   3208e:	4295      	cmp	r5, r2
   32090:	d903      	bls.n	3209a <__aeabi_ddiv+0x2de>
   32092:	2580      	movs	r5, #128	; 0x80
   32094:	026d      	lsls	r5, r5, #9
   32096:	46ac      	mov	ip, r5
   32098:	4460      	add	r0, ip
   3209a:	0c15      	lsrs	r5, r2, #16
   3209c:	0409      	lsls	r1, r1, #16
   3209e:	0412      	lsls	r2, r2, #16
   320a0:	0c09      	lsrs	r1, r1, #16
   320a2:	1828      	adds	r0, r5, r0
   320a4:	1852      	adds	r2, r2, r1
   320a6:	4283      	cmp	r3, r0
   320a8:	d200      	bcs.n	320ac <__aeabi_ddiv+0x2f0>
   320aa:	e0ce      	b.n	3224a <__aeabi_ddiv+0x48e>
   320ac:	d100      	bne.n	320b0 <__aeabi_ddiv+0x2f4>
   320ae:	e0c8      	b.n	32242 <__aeabi_ddiv+0x486>
   320b0:	1a1d      	subs	r5, r3, r0
   320b2:	4653      	mov	r3, sl
   320b4:	1a9e      	subs	r6, r3, r2
   320b6:	45b2      	cmp	sl, r6
   320b8:	4192      	sbcs	r2, r2
   320ba:	4252      	negs	r2, r2
   320bc:	1aab      	subs	r3, r5, r2
   320be:	469a      	mov	sl, r3
   320c0:	4598      	cmp	r8, r3
   320c2:	d100      	bne.n	320c6 <__aeabi_ddiv+0x30a>
   320c4:	e117      	b.n	322f6 <__aeabi_ddiv+0x53a>
   320c6:	0039      	movs	r1, r7
   320c8:	0018      	movs	r0, r3
   320ca:	f7ff f80f 	bl	310ec <__udivsi3>
   320ce:	9b01      	ldr	r3, [sp, #4]
   320d0:	0005      	movs	r5, r0
   320d2:	4343      	muls	r3, r0
   320d4:	0039      	movs	r1, r7
   320d6:	4650      	mov	r0, sl
   320d8:	9304      	str	r3, [sp, #16]
   320da:	f7ff f88d 	bl	311f8 <__aeabi_uidivmod>
   320de:	9804      	ldr	r0, [sp, #16]
   320e0:	040b      	lsls	r3, r1, #16
   320e2:	0c31      	lsrs	r1, r6, #16
   320e4:	4319      	orrs	r1, r3
   320e6:	4288      	cmp	r0, r1
   320e8:	d909      	bls.n	320fe <__aeabi_ddiv+0x342>
   320ea:	4441      	add	r1, r8
   320ec:	1e6b      	subs	r3, r5, #1
   320ee:	4588      	cmp	r8, r1
   320f0:	d900      	bls.n	320f4 <__aeabi_ddiv+0x338>
   320f2:	e107      	b.n	32304 <__aeabi_ddiv+0x548>
   320f4:	4288      	cmp	r0, r1
   320f6:	d800      	bhi.n	320fa <__aeabi_ddiv+0x33e>
   320f8:	e104      	b.n	32304 <__aeabi_ddiv+0x548>
   320fa:	3d02      	subs	r5, #2
   320fc:	4441      	add	r1, r8
   320fe:	9b04      	ldr	r3, [sp, #16]
   32100:	1acb      	subs	r3, r1, r3
   32102:	0018      	movs	r0, r3
   32104:	0039      	movs	r1, r7
   32106:	9304      	str	r3, [sp, #16]
   32108:	f7fe fff0 	bl	310ec <__udivsi3>
   3210c:	9b01      	ldr	r3, [sp, #4]
   3210e:	4682      	mov	sl, r0
   32110:	4343      	muls	r3, r0
   32112:	0039      	movs	r1, r7
   32114:	9804      	ldr	r0, [sp, #16]
   32116:	9301      	str	r3, [sp, #4]
   32118:	f7ff f86e 	bl	311f8 <__aeabi_uidivmod>
   3211c:	9801      	ldr	r0, [sp, #4]
   3211e:	040b      	lsls	r3, r1, #16
   32120:	0431      	lsls	r1, r6, #16
   32122:	0c09      	lsrs	r1, r1, #16
   32124:	4319      	orrs	r1, r3
   32126:	4288      	cmp	r0, r1
   32128:	d90d      	bls.n	32146 <__aeabi_ddiv+0x38a>
   3212a:	4653      	mov	r3, sl
   3212c:	4441      	add	r1, r8
   3212e:	3b01      	subs	r3, #1
   32130:	4588      	cmp	r8, r1
   32132:	d900      	bls.n	32136 <__aeabi_ddiv+0x37a>
   32134:	e0e8      	b.n	32308 <__aeabi_ddiv+0x54c>
   32136:	4288      	cmp	r0, r1
   32138:	d800      	bhi.n	3213c <__aeabi_ddiv+0x380>
   3213a:	e0e5      	b.n	32308 <__aeabi_ddiv+0x54c>
   3213c:	2302      	movs	r3, #2
   3213e:	425b      	negs	r3, r3
   32140:	469c      	mov	ip, r3
   32142:	4441      	add	r1, r8
   32144:	44e2      	add	sl, ip
   32146:	9b01      	ldr	r3, [sp, #4]
   32148:	042d      	lsls	r5, r5, #16
   3214a:	1ace      	subs	r6, r1, r3
   3214c:	4651      	mov	r1, sl
   3214e:	4329      	orrs	r1, r5
   32150:	9d05      	ldr	r5, [sp, #20]
   32152:	464f      	mov	r7, r9
   32154:	002a      	movs	r2, r5
   32156:	040b      	lsls	r3, r1, #16
   32158:	0c08      	lsrs	r0, r1, #16
   3215a:	0c1b      	lsrs	r3, r3, #16
   3215c:	435a      	muls	r2, r3
   3215e:	4345      	muls	r5, r0
   32160:	437b      	muls	r3, r7
   32162:	4378      	muls	r0, r7
   32164:	195b      	adds	r3, r3, r5
   32166:	0c17      	lsrs	r7, r2, #16
   32168:	18fb      	adds	r3, r7, r3
   3216a:	429d      	cmp	r5, r3
   3216c:	d903      	bls.n	32176 <__aeabi_ddiv+0x3ba>
   3216e:	2580      	movs	r5, #128	; 0x80
   32170:	026d      	lsls	r5, r5, #9
   32172:	46ac      	mov	ip, r5
   32174:	4460      	add	r0, ip
   32176:	0c1d      	lsrs	r5, r3, #16
   32178:	0412      	lsls	r2, r2, #16
   3217a:	041b      	lsls	r3, r3, #16
   3217c:	0c12      	lsrs	r2, r2, #16
   3217e:	1828      	adds	r0, r5, r0
   32180:	189b      	adds	r3, r3, r2
   32182:	4286      	cmp	r6, r0
   32184:	d200      	bcs.n	32188 <__aeabi_ddiv+0x3cc>
   32186:	e093      	b.n	322b0 <__aeabi_ddiv+0x4f4>
   32188:	d100      	bne.n	3218c <__aeabi_ddiv+0x3d0>
   3218a:	e08e      	b.n	322aa <__aeabi_ddiv+0x4ee>
   3218c:	2301      	movs	r3, #1
   3218e:	4319      	orrs	r1, r3
   32190:	4ba0      	ldr	r3, [pc, #640]	; (32414 <__aeabi_ddiv+0x658>)
   32192:	18e3      	adds	r3, r4, r3
   32194:	2b00      	cmp	r3, #0
   32196:	dc00      	bgt.n	3219a <__aeabi_ddiv+0x3de>
   32198:	e099      	b.n	322ce <__aeabi_ddiv+0x512>
   3219a:	074a      	lsls	r2, r1, #29
   3219c:	d000      	beq.n	321a0 <__aeabi_ddiv+0x3e4>
   3219e:	e09e      	b.n	322de <__aeabi_ddiv+0x522>
   321a0:	465a      	mov	r2, fp
   321a2:	01d2      	lsls	r2, r2, #7
   321a4:	d506      	bpl.n	321b4 <__aeabi_ddiv+0x3f8>
   321a6:	465a      	mov	r2, fp
   321a8:	4b9b      	ldr	r3, [pc, #620]	; (32418 <__aeabi_ddiv+0x65c>)
   321aa:	401a      	ands	r2, r3
   321ac:	2380      	movs	r3, #128	; 0x80
   321ae:	4693      	mov	fp, r2
   321b0:	00db      	lsls	r3, r3, #3
   321b2:	18e3      	adds	r3, r4, r3
   321b4:	4a99      	ldr	r2, [pc, #612]	; (3241c <__aeabi_ddiv+0x660>)
   321b6:	4293      	cmp	r3, r2
   321b8:	dd68      	ble.n	3228c <__aeabi_ddiv+0x4d0>
   321ba:	2301      	movs	r3, #1
   321bc:	9a02      	ldr	r2, [sp, #8]
   321be:	4c98      	ldr	r4, [pc, #608]	; (32420 <__aeabi_ddiv+0x664>)
   321c0:	401a      	ands	r2, r3
   321c2:	2300      	movs	r3, #0
   321c4:	4694      	mov	ip, r2
   321c6:	4698      	mov	r8, r3
   321c8:	2200      	movs	r2, #0
   321ca:	e6c5      	b.n	31f58 <__aeabi_ddiv+0x19c>
   321cc:	2280      	movs	r2, #128	; 0x80
   321ce:	464b      	mov	r3, r9
   321d0:	0312      	lsls	r2, r2, #12
   321d2:	4213      	tst	r3, r2
   321d4:	d00a      	beq.n	321ec <__aeabi_ddiv+0x430>
   321d6:	465b      	mov	r3, fp
   321d8:	4213      	tst	r3, r2
   321da:	d106      	bne.n	321ea <__aeabi_ddiv+0x42e>
   321dc:	431a      	orrs	r2, r3
   321de:	0312      	lsls	r2, r2, #12
   321e0:	0b12      	lsrs	r2, r2, #12
   321e2:	46ac      	mov	ip, r5
   321e4:	4688      	mov	r8, r1
   321e6:	4c8e      	ldr	r4, [pc, #568]	; (32420 <__aeabi_ddiv+0x664>)
   321e8:	e6b6      	b.n	31f58 <__aeabi_ddiv+0x19c>
   321ea:	464b      	mov	r3, r9
   321ec:	431a      	orrs	r2, r3
   321ee:	0312      	lsls	r2, r2, #12
   321f0:	0b12      	lsrs	r2, r2, #12
   321f2:	46bc      	mov	ip, r7
   321f4:	4c8a      	ldr	r4, [pc, #552]	; (32420 <__aeabi_ddiv+0x664>)
   321f6:	e6af      	b.n	31f58 <__aeabi_ddiv+0x19c>
   321f8:	0003      	movs	r3, r0
   321fa:	465a      	mov	r2, fp
   321fc:	3b28      	subs	r3, #40	; 0x28
   321fe:	409a      	lsls	r2, r3
   32200:	2300      	movs	r3, #0
   32202:	4691      	mov	r9, r2
   32204:	4698      	mov	r8, r3
   32206:	e657      	b.n	31eb8 <__aeabi_ddiv+0xfc>
   32208:	4658      	mov	r0, fp
   3220a:	f000 ff0d 	bl	33028 <__clzsi2>
   3220e:	3020      	adds	r0, #32
   32210:	e640      	b.n	31e94 <__aeabi_ddiv+0xd8>
   32212:	0003      	movs	r3, r0
   32214:	4652      	mov	r2, sl
   32216:	3b28      	subs	r3, #40	; 0x28
   32218:	409a      	lsls	r2, r3
   3221a:	2100      	movs	r1, #0
   3221c:	4693      	mov	fp, r2
   3221e:	e677      	b.n	31f10 <__aeabi_ddiv+0x154>
   32220:	f000 ff02 	bl	33028 <__clzsi2>
   32224:	3020      	adds	r0, #32
   32226:	e65f      	b.n	31ee8 <__aeabi_ddiv+0x12c>
   32228:	4588      	cmp	r8, r1
   3222a:	d200      	bcs.n	3222e <__aeabi_ddiv+0x472>
   3222c:	e6c7      	b.n	31fbe <__aeabi_ddiv+0x202>
   3222e:	464b      	mov	r3, r9
   32230:	07de      	lsls	r6, r3, #31
   32232:	085d      	lsrs	r5, r3, #1
   32234:	4643      	mov	r3, r8
   32236:	085b      	lsrs	r3, r3, #1
   32238:	431e      	orrs	r6, r3
   3223a:	4643      	mov	r3, r8
   3223c:	07db      	lsls	r3, r3, #31
   3223e:	469a      	mov	sl, r3
   32240:	e6c2      	b.n	31fc8 <__aeabi_ddiv+0x20c>
   32242:	2500      	movs	r5, #0
   32244:	4592      	cmp	sl, r2
   32246:	d300      	bcc.n	3224a <__aeabi_ddiv+0x48e>
   32248:	e733      	b.n	320b2 <__aeabi_ddiv+0x2f6>
   3224a:	9e03      	ldr	r6, [sp, #12]
   3224c:	4659      	mov	r1, fp
   3224e:	46b4      	mov	ip, r6
   32250:	44e2      	add	sl, ip
   32252:	45b2      	cmp	sl, r6
   32254:	41ad      	sbcs	r5, r5
   32256:	426d      	negs	r5, r5
   32258:	4445      	add	r5, r8
   3225a:	18eb      	adds	r3, r5, r3
   3225c:	3901      	subs	r1, #1
   3225e:	4598      	cmp	r8, r3
   32260:	d207      	bcs.n	32272 <__aeabi_ddiv+0x4b6>
   32262:	4298      	cmp	r0, r3
   32264:	d900      	bls.n	32268 <__aeabi_ddiv+0x4ac>
   32266:	e07f      	b.n	32368 <__aeabi_ddiv+0x5ac>
   32268:	d100      	bne.n	3226c <__aeabi_ddiv+0x4b0>
   3226a:	e0bc      	b.n	323e6 <__aeabi_ddiv+0x62a>
   3226c:	1a1d      	subs	r5, r3, r0
   3226e:	468b      	mov	fp, r1
   32270:	e71f      	b.n	320b2 <__aeabi_ddiv+0x2f6>
   32272:	4598      	cmp	r8, r3
   32274:	d1fa      	bne.n	3226c <__aeabi_ddiv+0x4b0>
   32276:	9d03      	ldr	r5, [sp, #12]
   32278:	4555      	cmp	r5, sl
   3227a:	d9f2      	bls.n	32262 <__aeabi_ddiv+0x4a6>
   3227c:	4643      	mov	r3, r8
   3227e:	468b      	mov	fp, r1
   32280:	1a1d      	subs	r5, r3, r0
   32282:	e716      	b.n	320b2 <__aeabi_ddiv+0x2f6>
   32284:	469b      	mov	fp, r3
   32286:	e6ca      	b.n	3201e <__aeabi_ddiv+0x262>
   32288:	0015      	movs	r5, r2
   3228a:	e6e7      	b.n	3205c <__aeabi_ddiv+0x2a0>
   3228c:	465a      	mov	r2, fp
   3228e:	08c9      	lsrs	r1, r1, #3
   32290:	0752      	lsls	r2, r2, #29
   32292:	430a      	orrs	r2, r1
   32294:	055b      	lsls	r3, r3, #21
   32296:	4690      	mov	r8, r2
   32298:	0d5c      	lsrs	r4, r3, #21
   3229a:	465a      	mov	r2, fp
   3229c:	2301      	movs	r3, #1
   3229e:	9902      	ldr	r1, [sp, #8]
   322a0:	0252      	lsls	r2, r2, #9
   322a2:	4019      	ands	r1, r3
   322a4:	0b12      	lsrs	r2, r2, #12
   322a6:	468c      	mov	ip, r1
   322a8:	e656      	b.n	31f58 <__aeabi_ddiv+0x19c>
   322aa:	2b00      	cmp	r3, #0
   322ac:	d100      	bne.n	322b0 <__aeabi_ddiv+0x4f4>
   322ae:	e76f      	b.n	32190 <__aeabi_ddiv+0x3d4>
   322b0:	4446      	add	r6, r8
   322b2:	1e4a      	subs	r2, r1, #1
   322b4:	45b0      	cmp	r8, r6
   322b6:	d929      	bls.n	3230c <__aeabi_ddiv+0x550>
   322b8:	0011      	movs	r1, r2
   322ba:	4286      	cmp	r6, r0
   322bc:	d000      	beq.n	322c0 <__aeabi_ddiv+0x504>
   322be:	e765      	b.n	3218c <__aeabi_ddiv+0x3d0>
   322c0:	9a03      	ldr	r2, [sp, #12]
   322c2:	4293      	cmp	r3, r2
   322c4:	d000      	beq.n	322c8 <__aeabi_ddiv+0x50c>
   322c6:	e761      	b.n	3218c <__aeabi_ddiv+0x3d0>
   322c8:	e762      	b.n	32190 <__aeabi_ddiv+0x3d4>
   322ca:	2101      	movs	r1, #1
   322cc:	4249      	negs	r1, r1
   322ce:	2001      	movs	r0, #1
   322d0:	1ac2      	subs	r2, r0, r3
   322d2:	2a38      	cmp	r2, #56	; 0x38
   322d4:	dd21      	ble.n	3231a <__aeabi_ddiv+0x55e>
   322d6:	9b02      	ldr	r3, [sp, #8]
   322d8:	4003      	ands	r3, r0
   322da:	469c      	mov	ip, r3
   322dc:	e638      	b.n	31f50 <__aeabi_ddiv+0x194>
   322de:	220f      	movs	r2, #15
   322e0:	400a      	ands	r2, r1
   322e2:	2a04      	cmp	r2, #4
   322e4:	d100      	bne.n	322e8 <__aeabi_ddiv+0x52c>
   322e6:	e75b      	b.n	321a0 <__aeabi_ddiv+0x3e4>
   322e8:	000a      	movs	r2, r1
   322ea:	1d11      	adds	r1, r2, #4
   322ec:	4291      	cmp	r1, r2
   322ee:	4192      	sbcs	r2, r2
   322f0:	4252      	negs	r2, r2
   322f2:	4493      	add	fp, r2
   322f4:	e754      	b.n	321a0 <__aeabi_ddiv+0x3e4>
   322f6:	4b47      	ldr	r3, [pc, #284]	; (32414 <__aeabi_ddiv+0x658>)
   322f8:	18e3      	adds	r3, r4, r3
   322fa:	2b00      	cmp	r3, #0
   322fc:	dde5      	ble.n	322ca <__aeabi_ddiv+0x50e>
   322fe:	2201      	movs	r2, #1
   32300:	4252      	negs	r2, r2
   32302:	e7f2      	b.n	322ea <__aeabi_ddiv+0x52e>
   32304:	001d      	movs	r5, r3
   32306:	e6fa      	b.n	320fe <__aeabi_ddiv+0x342>
   32308:	469a      	mov	sl, r3
   3230a:	e71c      	b.n	32146 <__aeabi_ddiv+0x38a>
   3230c:	42b0      	cmp	r0, r6
   3230e:	d839      	bhi.n	32384 <__aeabi_ddiv+0x5c8>
   32310:	d06e      	beq.n	323f0 <__aeabi_ddiv+0x634>
   32312:	0011      	movs	r1, r2
   32314:	e73a      	b.n	3218c <__aeabi_ddiv+0x3d0>
   32316:	9302      	str	r3, [sp, #8]
   32318:	e73a      	b.n	32190 <__aeabi_ddiv+0x3d4>
   3231a:	2a1f      	cmp	r2, #31
   3231c:	dc3c      	bgt.n	32398 <__aeabi_ddiv+0x5dc>
   3231e:	2320      	movs	r3, #32
   32320:	1a9b      	subs	r3, r3, r2
   32322:	000c      	movs	r4, r1
   32324:	4658      	mov	r0, fp
   32326:	4099      	lsls	r1, r3
   32328:	4098      	lsls	r0, r3
   3232a:	1e4b      	subs	r3, r1, #1
   3232c:	4199      	sbcs	r1, r3
   3232e:	465b      	mov	r3, fp
   32330:	40d4      	lsrs	r4, r2
   32332:	40d3      	lsrs	r3, r2
   32334:	4320      	orrs	r0, r4
   32336:	4308      	orrs	r0, r1
   32338:	001a      	movs	r2, r3
   3233a:	0743      	lsls	r3, r0, #29
   3233c:	d009      	beq.n	32352 <__aeabi_ddiv+0x596>
   3233e:	230f      	movs	r3, #15
   32340:	4003      	ands	r3, r0
   32342:	2b04      	cmp	r3, #4
   32344:	d005      	beq.n	32352 <__aeabi_ddiv+0x596>
   32346:	0001      	movs	r1, r0
   32348:	1d08      	adds	r0, r1, #4
   3234a:	4288      	cmp	r0, r1
   3234c:	419b      	sbcs	r3, r3
   3234e:	425b      	negs	r3, r3
   32350:	18d2      	adds	r2, r2, r3
   32352:	0213      	lsls	r3, r2, #8
   32354:	d53a      	bpl.n	323cc <__aeabi_ddiv+0x610>
   32356:	2301      	movs	r3, #1
   32358:	9a02      	ldr	r2, [sp, #8]
   3235a:	2401      	movs	r4, #1
   3235c:	401a      	ands	r2, r3
   3235e:	2300      	movs	r3, #0
   32360:	4694      	mov	ip, r2
   32362:	4698      	mov	r8, r3
   32364:	2200      	movs	r2, #0
   32366:	e5f7      	b.n	31f58 <__aeabi_ddiv+0x19c>
   32368:	2102      	movs	r1, #2
   3236a:	4249      	negs	r1, r1
   3236c:	468c      	mov	ip, r1
   3236e:	9d03      	ldr	r5, [sp, #12]
   32370:	44e3      	add	fp, ip
   32372:	46ac      	mov	ip, r5
   32374:	44e2      	add	sl, ip
   32376:	45aa      	cmp	sl, r5
   32378:	41ad      	sbcs	r5, r5
   3237a:	426d      	negs	r5, r5
   3237c:	4445      	add	r5, r8
   3237e:	18ed      	adds	r5, r5, r3
   32380:	1a2d      	subs	r5, r5, r0
   32382:	e696      	b.n	320b2 <__aeabi_ddiv+0x2f6>
   32384:	1e8a      	subs	r2, r1, #2
   32386:	9903      	ldr	r1, [sp, #12]
   32388:	004d      	lsls	r5, r1, #1
   3238a:	428d      	cmp	r5, r1
   3238c:	4189      	sbcs	r1, r1
   3238e:	4249      	negs	r1, r1
   32390:	4441      	add	r1, r8
   32392:	1876      	adds	r6, r6, r1
   32394:	9503      	str	r5, [sp, #12]
   32396:	e78f      	b.n	322b8 <__aeabi_ddiv+0x4fc>
   32398:	201f      	movs	r0, #31
   3239a:	4240      	negs	r0, r0
   3239c:	1ac3      	subs	r3, r0, r3
   3239e:	4658      	mov	r0, fp
   323a0:	40d8      	lsrs	r0, r3
   323a2:	0003      	movs	r3, r0
   323a4:	2a20      	cmp	r2, #32
   323a6:	d028      	beq.n	323fa <__aeabi_ddiv+0x63e>
   323a8:	2040      	movs	r0, #64	; 0x40
   323aa:	465d      	mov	r5, fp
   323ac:	1a82      	subs	r2, r0, r2
   323ae:	4095      	lsls	r5, r2
   323b0:	4329      	orrs	r1, r5
   323b2:	1e4a      	subs	r2, r1, #1
   323b4:	4191      	sbcs	r1, r2
   323b6:	4319      	orrs	r1, r3
   323b8:	2307      	movs	r3, #7
   323ba:	2200      	movs	r2, #0
   323bc:	400b      	ands	r3, r1
   323be:	d009      	beq.n	323d4 <__aeabi_ddiv+0x618>
   323c0:	230f      	movs	r3, #15
   323c2:	2200      	movs	r2, #0
   323c4:	400b      	ands	r3, r1
   323c6:	0008      	movs	r0, r1
   323c8:	2b04      	cmp	r3, #4
   323ca:	d1bd      	bne.n	32348 <__aeabi_ddiv+0x58c>
   323cc:	0001      	movs	r1, r0
   323ce:	0753      	lsls	r3, r2, #29
   323d0:	0252      	lsls	r2, r2, #9
   323d2:	0b12      	lsrs	r2, r2, #12
   323d4:	08c9      	lsrs	r1, r1, #3
   323d6:	4319      	orrs	r1, r3
   323d8:	2301      	movs	r3, #1
   323da:	4688      	mov	r8, r1
   323dc:	9902      	ldr	r1, [sp, #8]
   323de:	2400      	movs	r4, #0
   323e0:	4019      	ands	r1, r3
   323e2:	468c      	mov	ip, r1
   323e4:	e5b8      	b.n	31f58 <__aeabi_ddiv+0x19c>
   323e6:	4552      	cmp	r2, sl
   323e8:	d8be      	bhi.n	32368 <__aeabi_ddiv+0x5ac>
   323ea:	468b      	mov	fp, r1
   323ec:	2500      	movs	r5, #0
   323ee:	e660      	b.n	320b2 <__aeabi_ddiv+0x2f6>
   323f0:	9d03      	ldr	r5, [sp, #12]
   323f2:	429d      	cmp	r5, r3
   323f4:	d3c6      	bcc.n	32384 <__aeabi_ddiv+0x5c8>
   323f6:	0011      	movs	r1, r2
   323f8:	e762      	b.n	322c0 <__aeabi_ddiv+0x504>
   323fa:	2500      	movs	r5, #0
   323fc:	e7d8      	b.n	323b0 <__aeabi_ddiv+0x5f4>
   323fe:	2280      	movs	r2, #128	; 0x80
   32400:	465b      	mov	r3, fp
   32402:	0312      	lsls	r2, r2, #12
   32404:	431a      	orrs	r2, r3
   32406:	9b01      	ldr	r3, [sp, #4]
   32408:	0312      	lsls	r2, r2, #12
   3240a:	0b12      	lsrs	r2, r2, #12
   3240c:	469c      	mov	ip, r3
   3240e:	4688      	mov	r8, r1
   32410:	4c03      	ldr	r4, [pc, #12]	; (32420 <__aeabi_ddiv+0x664>)
   32412:	e5a1      	b.n	31f58 <__aeabi_ddiv+0x19c>
   32414:	000003ff 	.word	0x000003ff
   32418:	feffffff 	.word	0xfeffffff
   3241c:	000007fe 	.word	0x000007fe
   32420:	000007ff 	.word	0x000007ff

00032424 <__aeabi_dmul>:
   32424:	b5f0      	push	{r4, r5, r6, r7, lr}
   32426:	4657      	mov	r7, sl
   32428:	4645      	mov	r5, r8
   3242a:	46de      	mov	lr, fp
   3242c:	464e      	mov	r6, r9
   3242e:	b5e0      	push	{r5, r6, r7, lr}
   32430:	030c      	lsls	r4, r1, #12
   32432:	4698      	mov	r8, r3
   32434:	004e      	lsls	r6, r1, #1
   32436:	0b23      	lsrs	r3, r4, #12
   32438:	b087      	sub	sp, #28
   3243a:	0007      	movs	r7, r0
   3243c:	4692      	mov	sl, r2
   3243e:	469b      	mov	fp, r3
   32440:	0d76      	lsrs	r6, r6, #21
   32442:	0fcd      	lsrs	r5, r1, #31
   32444:	2e00      	cmp	r6, #0
   32446:	d06b      	beq.n	32520 <__aeabi_dmul+0xfc>
   32448:	4b6d      	ldr	r3, [pc, #436]	; (32600 <__aeabi_dmul+0x1dc>)
   3244a:	429e      	cmp	r6, r3
   3244c:	d035      	beq.n	324ba <__aeabi_dmul+0x96>
   3244e:	2480      	movs	r4, #128	; 0x80
   32450:	465b      	mov	r3, fp
   32452:	0f42      	lsrs	r2, r0, #29
   32454:	0424      	lsls	r4, r4, #16
   32456:	00db      	lsls	r3, r3, #3
   32458:	4314      	orrs	r4, r2
   3245a:	431c      	orrs	r4, r3
   3245c:	00c3      	lsls	r3, r0, #3
   3245e:	4699      	mov	r9, r3
   32460:	4b68      	ldr	r3, [pc, #416]	; (32604 <__aeabi_dmul+0x1e0>)
   32462:	46a3      	mov	fp, r4
   32464:	469c      	mov	ip, r3
   32466:	2300      	movs	r3, #0
   32468:	2700      	movs	r7, #0
   3246a:	4466      	add	r6, ip
   3246c:	9302      	str	r3, [sp, #8]
   3246e:	4643      	mov	r3, r8
   32470:	031c      	lsls	r4, r3, #12
   32472:	005a      	lsls	r2, r3, #1
   32474:	0fdb      	lsrs	r3, r3, #31
   32476:	4650      	mov	r0, sl
   32478:	0b24      	lsrs	r4, r4, #12
   3247a:	0d52      	lsrs	r2, r2, #21
   3247c:	4698      	mov	r8, r3
   3247e:	d100      	bne.n	32482 <__aeabi_dmul+0x5e>
   32480:	e076      	b.n	32570 <__aeabi_dmul+0x14c>
   32482:	4b5f      	ldr	r3, [pc, #380]	; (32600 <__aeabi_dmul+0x1dc>)
   32484:	429a      	cmp	r2, r3
   32486:	d06d      	beq.n	32564 <__aeabi_dmul+0x140>
   32488:	2380      	movs	r3, #128	; 0x80
   3248a:	0f41      	lsrs	r1, r0, #29
   3248c:	041b      	lsls	r3, r3, #16
   3248e:	430b      	orrs	r3, r1
   32490:	495c      	ldr	r1, [pc, #368]	; (32604 <__aeabi_dmul+0x1e0>)
   32492:	00e4      	lsls	r4, r4, #3
   32494:	468c      	mov	ip, r1
   32496:	431c      	orrs	r4, r3
   32498:	00c3      	lsls	r3, r0, #3
   3249a:	2000      	movs	r0, #0
   3249c:	4462      	add	r2, ip
   3249e:	4641      	mov	r1, r8
   324a0:	18b6      	adds	r6, r6, r2
   324a2:	4069      	eors	r1, r5
   324a4:	1c72      	adds	r2, r6, #1
   324a6:	9101      	str	r1, [sp, #4]
   324a8:	4694      	mov	ip, r2
   324aa:	4307      	orrs	r7, r0
   324ac:	2f0f      	cmp	r7, #15
   324ae:	d900      	bls.n	324b2 <__aeabi_dmul+0x8e>
   324b0:	e0b0      	b.n	32614 <__aeabi_dmul+0x1f0>
   324b2:	4a55      	ldr	r2, [pc, #340]	; (32608 <__aeabi_dmul+0x1e4>)
   324b4:	00bf      	lsls	r7, r7, #2
   324b6:	59d2      	ldr	r2, [r2, r7]
   324b8:	4697      	mov	pc, r2
   324ba:	465b      	mov	r3, fp
   324bc:	4303      	orrs	r3, r0
   324be:	4699      	mov	r9, r3
   324c0:	d000      	beq.n	324c4 <__aeabi_dmul+0xa0>
   324c2:	e087      	b.n	325d4 <__aeabi_dmul+0x1b0>
   324c4:	2300      	movs	r3, #0
   324c6:	469b      	mov	fp, r3
   324c8:	3302      	adds	r3, #2
   324ca:	2708      	movs	r7, #8
   324cc:	9302      	str	r3, [sp, #8]
   324ce:	e7ce      	b.n	3246e <__aeabi_dmul+0x4a>
   324d0:	4642      	mov	r2, r8
   324d2:	9201      	str	r2, [sp, #4]
   324d4:	2802      	cmp	r0, #2
   324d6:	d067      	beq.n	325a8 <__aeabi_dmul+0x184>
   324d8:	2803      	cmp	r0, #3
   324da:	d100      	bne.n	324de <__aeabi_dmul+0xba>
   324dc:	e20e      	b.n	328fc <__aeabi_dmul+0x4d8>
   324de:	2801      	cmp	r0, #1
   324e0:	d000      	beq.n	324e4 <__aeabi_dmul+0xc0>
   324e2:	e162      	b.n	327aa <__aeabi_dmul+0x386>
   324e4:	2300      	movs	r3, #0
   324e6:	2400      	movs	r4, #0
   324e8:	2200      	movs	r2, #0
   324ea:	4699      	mov	r9, r3
   324ec:	9901      	ldr	r1, [sp, #4]
   324ee:	4001      	ands	r1, r0
   324f0:	b2cd      	uxtb	r5, r1
   324f2:	2100      	movs	r1, #0
   324f4:	0312      	lsls	r2, r2, #12
   324f6:	0d0b      	lsrs	r3, r1, #20
   324f8:	0b12      	lsrs	r2, r2, #12
   324fa:	051b      	lsls	r3, r3, #20
   324fc:	4313      	orrs	r3, r2
   324fe:	4a43      	ldr	r2, [pc, #268]	; (3260c <__aeabi_dmul+0x1e8>)
   32500:	0524      	lsls	r4, r4, #20
   32502:	4013      	ands	r3, r2
   32504:	431c      	orrs	r4, r3
   32506:	0064      	lsls	r4, r4, #1
   32508:	07ed      	lsls	r5, r5, #31
   3250a:	0864      	lsrs	r4, r4, #1
   3250c:	432c      	orrs	r4, r5
   3250e:	4648      	mov	r0, r9
   32510:	0021      	movs	r1, r4
   32512:	b007      	add	sp, #28
   32514:	bc3c      	pop	{r2, r3, r4, r5}
   32516:	4690      	mov	r8, r2
   32518:	4699      	mov	r9, r3
   3251a:	46a2      	mov	sl, r4
   3251c:	46ab      	mov	fp, r5
   3251e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   32520:	4303      	orrs	r3, r0
   32522:	4699      	mov	r9, r3
   32524:	d04f      	beq.n	325c6 <__aeabi_dmul+0x1a2>
   32526:	465b      	mov	r3, fp
   32528:	2b00      	cmp	r3, #0
   3252a:	d100      	bne.n	3252e <__aeabi_dmul+0x10a>
   3252c:	e189      	b.n	32842 <__aeabi_dmul+0x41e>
   3252e:	4658      	mov	r0, fp
   32530:	f000 fd7a 	bl	33028 <__clzsi2>
   32534:	0003      	movs	r3, r0
   32536:	3b0b      	subs	r3, #11
   32538:	2b1c      	cmp	r3, #28
   3253a:	dd00      	ble.n	3253e <__aeabi_dmul+0x11a>
   3253c:	e17a      	b.n	32834 <__aeabi_dmul+0x410>
   3253e:	221d      	movs	r2, #29
   32540:	1ad3      	subs	r3, r2, r3
   32542:	003a      	movs	r2, r7
   32544:	0001      	movs	r1, r0
   32546:	465c      	mov	r4, fp
   32548:	40da      	lsrs	r2, r3
   3254a:	3908      	subs	r1, #8
   3254c:	408c      	lsls	r4, r1
   3254e:	0013      	movs	r3, r2
   32550:	408f      	lsls	r7, r1
   32552:	4323      	orrs	r3, r4
   32554:	469b      	mov	fp, r3
   32556:	46b9      	mov	r9, r7
   32558:	2300      	movs	r3, #0
   3255a:	4e2d      	ldr	r6, [pc, #180]	; (32610 <__aeabi_dmul+0x1ec>)
   3255c:	2700      	movs	r7, #0
   3255e:	1a36      	subs	r6, r6, r0
   32560:	9302      	str	r3, [sp, #8]
   32562:	e784      	b.n	3246e <__aeabi_dmul+0x4a>
   32564:	4653      	mov	r3, sl
   32566:	4323      	orrs	r3, r4
   32568:	d12a      	bne.n	325c0 <__aeabi_dmul+0x19c>
   3256a:	2400      	movs	r4, #0
   3256c:	2002      	movs	r0, #2
   3256e:	e796      	b.n	3249e <__aeabi_dmul+0x7a>
   32570:	4653      	mov	r3, sl
   32572:	4323      	orrs	r3, r4
   32574:	d020      	beq.n	325b8 <__aeabi_dmul+0x194>
   32576:	2c00      	cmp	r4, #0
   32578:	d100      	bne.n	3257c <__aeabi_dmul+0x158>
   3257a:	e157      	b.n	3282c <__aeabi_dmul+0x408>
   3257c:	0020      	movs	r0, r4
   3257e:	f000 fd53 	bl	33028 <__clzsi2>
   32582:	0003      	movs	r3, r0
   32584:	3b0b      	subs	r3, #11
   32586:	2b1c      	cmp	r3, #28
   32588:	dd00      	ble.n	3258c <__aeabi_dmul+0x168>
   3258a:	e149      	b.n	32820 <__aeabi_dmul+0x3fc>
   3258c:	211d      	movs	r1, #29
   3258e:	1acb      	subs	r3, r1, r3
   32590:	4651      	mov	r1, sl
   32592:	0002      	movs	r2, r0
   32594:	40d9      	lsrs	r1, r3
   32596:	4653      	mov	r3, sl
   32598:	3a08      	subs	r2, #8
   3259a:	4094      	lsls	r4, r2
   3259c:	4093      	lsls	r3, r2
   3259e:	430c      	orrs	r4, r1
   325a0:	4a1b      	ldr	r2, [pc, #108]	; (32610 <__aeabi_dmul+0x1ec>)
   325a2:	1a12      	subs	r2, r2, r0
   325a4:	2000      	movs	r0, #0
   325a6:	e77a      	b.n	3249e <__aeabi_dmul+0x7a>
   325a8:	2501      	movs	r5, #1
   325aa:	9b01      	ldr	r3, [sp, #4]
   325ac:	4c14      	ldr	r4, [pc, #80]	; (32600 <__aeabi_dmul+0x1dc>)
   325ae:	401d      	ands	r5, r3
   325b0:	2300      	movs	r3, #0
   325b2:	2200      	movs	r2, #0
   325b4:	4699      	mov	r9, r3
   325b6:	e79c      	b.n	324f2 <__aeabi_dmul+0xce>
   325b8:	2400      	movs	r4, #0
   325ba:	2200      	movs	r2, #0
   325bc:	2001      	movs	r0, #1
   325be:	e76e      	b.n	3249e <__aeabi_dmul+0x7a>
   325c0:	4653      	mov	r3, sl
   325c2:	2003      	movs	r0, #3
   325c4:	e76b      	b.n	3249e <__aeabi_dmul+0x7a>
   325c6:	2300      	movs	r3, #0
   325c8:	469b      	mov	fp, r3
   325ca:	3301      	adds	r3, #1
   325cc:	2704      	movs	r7, #4
   325ce:	2600      	movs	r6, #0
   325d0:	9302      	str	r3, [sp, #8]
   325d2:	e74c      	b.n	3246e <__aeabi_dmul+0x4a>
   325d4:	2303      	movs	r3, #3
   325d6:	4681      	mov	r9, r0
   325d8:	270c      	movs	r7, #12
   325da:	9302      	str	r3, [sp, #8]
   325dc:	e747      	b.n	3246e <__aeabi_dmul+0x4a>
   325de:	2280      	movs	r2, #128	; 0x80
   325e0:	2300      	movs	r3, #0
   325e2:	2500      	movs	r5, #0
   325e4:	0312      	lsls	r2, r2, #12
   325e6:	4699      	mov	r9, r3
   325e8:	4c05      	ldr	r4, [pc, #20]	; (32600 <__aeabi_dmul+0x1dc>)
   325ea:	e782      	b.n	324f2 <__aeabi_dmul+0xce>
   325ec:	465c      	mov	r4, fp
   325ee:	464b      	mov	r3, r9
   325f0:	9802      	ldr	r0, [sp, #8]
   325f2:	e76f      	b.n	324d4 <__aeabi_dmul+0xb0>
   325f4:	465c      	mov	r4, fp
   325f6:	464b      	mov	r3, r9
   325f8:	9501      	str	r5, [sp, #4]
   325fa:	9802      	ldr	r0, [sp, #8]
   325fc:	e76a      	b.n	324d4 <__aeabi_dmul+0xb0>
   325fe:	46c0      	nop			; (mov r8, r8)
   32600:	000007ff 	.word	0x000007ff
   32604:	fffffc01 	.word	0xfffffc01
   32608:	0003848c 	.word	0x0003848c
   3260c:	800fffff 	.word	0x800fffff
   32610:	fffffc0d 	.word	0xfffffc0d
   32614:	464a      	mov	r2, r9
   32616:	4649      	mov	r1, r9
   32618:	0c17      	lsrs	r7, r2, #16
   3261a:	0c1a      	lsrs	r2, r3, #16
   3261c:	041b      	lsls	r3, r3, #16
   3261e:	0c1b      	lsrs	r3, r3, #16
   32620:	0408      	lsls	r0, r1, #16
   32622:	0019      	movs	r1, r3
   32624:	0c00      	lsrs	r0, r0, #16
   32626:	4341      	muls	r1, r0
   32628:	0015      	movs	r5, r2
   3262a:	4688      	mov	r8, r1
   3262c:	0019      	movs	r1, r3
   3262e:	437d      	muls	r5, r7
   32630:	4379      	muls	r1, r7
   32632:	9503      	str	r5, [sp, #12]
   32634:	4689      	mov	r9, r1
   32636:	0029      	movs	r1, r5
   32638:	0015      	movs	r5, r2
   3263a:	4345      	muls	r5, r0
   3263c:	444d      	add	r5, r9
   3263e:	9502      	str	r5, [sp, #8]
   32640:	4645      	mov	r5, r8
   32642:	0c2d      	lsrs	r5, r5, #16
   32644:	46aa      	mov	sl, r5
   32646:	9d02      	ldr	r5, [sp, #8]
   32648:	4455      	add	r5, sl
   3264a:	45a9      	cmp	r9, r5
   3264c:	d906      	bls.n	3265c <__aeabi_dmul+0x238>
   3264e:	468a      	mov	sl, r1
   32650:	2180      	movs	r1, #128	; 0x80
   32652:	0249      	lsls	r1, r1, #9
   32654:	4689      	mov	r9, r1
   32656:	44ca      	add	sl, r9
   32658:	4651      	mov	r1, sl
   3265a:	9103      	str	r1, [sp, #12]
   3265c:	0c29      	lsrs	r1, r5, #16
   3265e:	9104      	str	r1, [sp, #16]
   32660:	4641      	mov	r1, r8
   32662:	0409      	lsls	r1, r1, #16
   32664:	042d      	lsls	r5, r5, #16
   32666:	0c09      	lsrs	r1, r1, #16
   32668:	4688      	mov	r8, r1
   3266a:	0029      	movs	r1, r5
   3266c:	0c25      	lsrs	r5, r4, #16
   3266e:	0424      	lsls	r4, r4, #16
   32670:	4441      	add	r1, r8
   32672:	0c24      	lsrs	r4, r4, #16
   32674:	9105      	str	r1, [sp, #20]
   32676:	0021      	movs	r1, r4
   32678:	4341      	muls	r1, r0
   3267a:	4688      	mov	r8, r1
   3267c:	0021      	movs	r1, r4
   3267e:	4379      	muls	r1, r7
   32680:	468a      	mov	sl, r1
   32682:	4368      	muls	r0, r5
   32684:	4641      	mov	r1, r8
   32686:	4450      	add	r0, sl
   32688:	4681      	mov	r9, r0
   3268a:	0c08      	lsrs	r0, r1, #16
   3268c:	4448      	add	r0, r9
   3268e:	436f      	muls	r7, r5
   32690:	4582      	cmp	sl, r0
   32692:	d903      	bls.n	3269c <__aeabi_dmul+0x278>
   32694:	2180      	movs	r1, #128	; 0x80
   32696:	0249      	lsls	r1, r1, #9
   32698:	4689      	mov	r9, r1
   3269a:	444f      	add	r7, r9
   3269c:	0c01      	lsrs	r1, r0, #16
   3269e:	4689      	mov	r9, r1
   326a0:	0039      	movs	r1, r7
   326a2:	4449      	add	r1, r9
   326a4:	9102      	str	r1, [sp, #8]
   326a6:	4641      	mov	r1, r8
   326a8:	040f      	lsls	r7, r1, #16
   326aa:	9904      	ldr	r1, [sp, #16]
   326ac:	0c3f      	lsrs	r7, r7, #16
   326ae:	4688      	mov	r8, r1
   326b0:	0400      	lsls	r0, r0, #16
   326b2:	19c0      	adds	r0, r0, r7
   326b4:	4480      	add	r8, r0
   326b6:	4641      	mov	r1, r8
   326b8:	9104      	str	r1, [sp, #16]
   326ba:	4659      	mov	r1, fp
   326bc:	0c0f      	lsrs	r7, r1, #16
   326be:	0409      	lsls	r1, r1, #16
   326c0:	0c09      	lsrs	r1, r1, #16
   326c2:	4688      	mov	r8, r1
   326c4:	4359      	muls	r1, r3
   326c6:	468a      	mov	sl, r1
   326c8:	0039      	movs	r1, r7
   326ca:	4351      	muls	r1, r2
   326cc:	4689      	mov	r9, r1
   326ce:	4641      	mov	r1, r8
   326d0:	434a      	muls	r2, r1
   326d2:	4651      	mov	r1, sl
   326d4:	0c09      	lsrs	r1, r1, #16
   326d6:	468b      	mov	fp, r1
   326d8:	437b      	muls	r3, r7
   326da:	18d2      	adds	r2, r2, r3
   326dc:	445a      	add	r2, fp
   326de:	4293      	cmp	r3, r2
   326e0:	d903      	bls.n	326ea <__aeabi_dmul+0x2c6>
   326e2:	2380      	movs	r3, #128	; 0x80
   326e4:	025b      	lsls	r3, r3, #9
   326e6:	469b      	mov	fp, r3
   326e8:	44d9      	add	r9, fp
   326ea:	4651      	mov	r1, sl
   326ec:	0409      	lsls	r1, r1, #16
   326ee:	0c09      	lsrs	r1, r1, #16
   326f0:	468a      	mov	sl, r1
   326f2:	4641      	mov	r1, r8
   326f4:	4361      	muls	r1, r4
   326f6:	437c      	muls	r4, r7
   326f8:	0c13      	lsrs	r3, r2, #16
   326fa:	0412      	lsls	r2, r2, #16
   326fc:	444b      	add	r3, r9
   326fe:	4452      	add	r2, sl
   32700:	46a1      	mov	r9, r4
   32702:	468a      	mov	sl, r1
   32704:	003c      	movs	r4, r7
   32706:	4641      	mov	r1, r8
   32708:	436c      	muls	r4, r5
   3270a:	434d      	muls	r5, r1
   3270c:	4651      	mov	r1, sl
   3270e:	444d      	add	r5, r9
   32710:	0c0f      	lsrs	r7, r1, #16
   32712:	197d      	adds	r5, r7, r5
   32714:	45a9      	cmp	r9, r5
   32716:	d903      	bls.n	32720 <__aeabi_dmul+0x2fc>
   32718:	2180      	movs	r1, #128	; 0x80
   3271a:	0249      	lsls	r1, r1, #9
   3271c:	4688      	mov	r8, r1
   3271e:	4444      	add	r4, r8
   32720:	9f04      	ldr	r7, [sp, #16]
   32722:	9903      	ldr	r1, [sp, #12]
   32724:	46b8      	mov	r8, r7
   32726:	4441      	add	r1, r8
   32728:	468b      	mov	fp, r1
   3272a:	4583      	cmp	fp, r0
   3272c:	4180      	sbcs	r0, r0
   3272e:	4241      	negs	r1, r0
   32730:	4688      	mov	r8, r1
   32732:	4651      	mov	r1, sl
   32734:	0408      	lsls	r0, r1, #16
   32736:	042f      	lsls	r7, r5, #16
   32738:	0c00      	lsrs	r0, r0, #16
   3273a:	183f      	adds	r7, r7, r0
   3273c:	4658      	mov	r0, fp
   3273e:	9902      	ldr	r1, [sp, #8]
   32740:	1810      	adds	r0, r2, r0
   32742:	4689      	mov	r9, r1
   32744:	4290      	cmp	r0, r2
   32746:	4192      	sbcs	r2, r2
   32748:	444f      	add	r7, r9
   3274a:	46ba      	mov	sl, r7
   3274c:	4252      	negs	r2, r2
   3274e:	4699      	mov	r9, r3
   32750:	4693      	mov	fp, r2
   32752:	44c2      	add	sl, r8
   32754:	44d1      	add	r9, sl
   32756:	44cb      	add	fp, r9
   32758:	428f      	cmp	r7, r1
   3275a:	41bf      	sbcs	r7, r7
   3275c:	45c2      	cmp	sl, r8
   3275e:	4189      	sbcs	r1, r1
   32760:	4599      	cmp	r9, r3
   32762:	419b      	sbcs	r3, r3
   32764:	4593      	cmp	fp, r2
   32766:	4192      	sbcs	r2, r2
   32768:	427f      	negs	r7, r7
   3276a:	4249      	negs	r1, r1
   3276c:	0c2d      	lsrs	r5, r5, #16
   3276e:	4252      	negs	r2, r2
   32770:	430f      	orrs	r7, r1
   32772:	425b      	negs	r3, r3
   32774:	4313      	orrs	r3, r2
   32776:	197f      	adds	r7, r7, r5
   32778:	18ff      	adds	r7, r7, r3
   3277a:	465b      	mov	r3, fp
   3277c:	193c      	adds	r4, r7, r4
   3277e:	0ddb      	lsrs	r3, r3, #23
   32780:	9a05      	ldr	r2, [sp, #20]
   32782:	0264      	lsls	r4, r4, #9
   32784:	431c      	orrs	r4, r3
   32786:	0243      	lsls	r3, r0, #9
   32788:	4313      	orrs	r3, r2
   3278a:	1e5d      	subs	r5, r3, #1
   3278c:	41ab      	sbcs	r3, r5
   3278e:	465a      	mov	r2, fp
   32790:	0dc0      	lsrs	r0, r0, #23
   32792:	4303      	orrs	r3, r0
   32794:	0252      	lsls	r2, r2, #9
   32796:	4313      	orrs	r3, r2
   32798:	01e2      	lsls	r2, r4, #7
   3279a:	d556      	bpl.n	3284a <__aeabi_dmul+0x426>
   3279c:	2001      	movs	r0, #1
   3279e:	085a      	lsrs	r2, r3, #1
   327a0:	4003      	ands	r3, r0
   327a2:	4313      	orrs	r3, r2
   327a4:	07e2      	lsls	r2, r4, #31
   327a6:	4313      	orrs	r3, r2
   327a8:	0864      	lsrs	r4, r4, #1
   327aa:	485a      	ldr	r0, [pc, #360]	; (32914 <__aeabi_dmul+0x4f0>)
   327ac:	4460      	add	r0, ip
   327ae:	2800      	cmp	r0, #0
   327b0:	dd4d      	ble.n	3284e <__aeabi_dmul+0x42a>
   327b2:	075a      	lsls	r2, r3, #29
   327b4:	d009      	beq.n	327ca <__aeabi_dmul+0x3a6>
   327b6:	220f      	movs	r2, #15
   327b8:	401a      	ands	r2, r3
   327ba:	2a04      	cmp	r2, #4
   327bc:	d005      	beq.n	327ca <__aeabi_dmul+0x3a6>
   327be:	1d1a      	adds	r2, r3, #4
   327c0:	429a      	cmp	r2, r3
   327c2:	419b      	sbcs	r3, r3
   327c4:	425b      	negs	r3, r3
   327c6:	18e4      	adds	r4, r4, r3
   327c8:	0013      	movs	r3, r2
   327ca:	01e2      	lsls	r2, r4, #7
   327cc:	d504      	bpl.n	327d8 <__aeabi_dmul+0x3b4>
   327ce:	2080      	movs	r0, #128	; 0x80
   327d0:	4a51      	ldr	r2, [pc, #324]	; (32918 <__aeabi_dmul+0x4f4>)
   327d2:	00c0      	lsls	r0, r0, #3
   327d4:	4014      	ands	r4, r2
   327d6:	4460      	add	r0, ip
   327d8:	4a50      	ldr	r2, [pc, #320]	; (3291c <__aeabi_dmul+0x4f8>)
   327da:	4290      	cmp	r0, r2
   327dc:	dd00      	ble.n	327e0 <__aeabi_dmul+0x3bc>
   327de:	e6e3      	b.n	325a8 <__aeabi_dmul+0x184>
   327e0:	2501      	movs	r5, #1
   327e2:	08db      	lsrs	r3, r3, #3
   327e4:	0762      	lsls	r2, r4, #29
   327e6:	431a      	orrs	r2, r3
   327e8:	0264      	lsls	r4, r4, #9
   327ea:	9b01      	ldr	r3, [sp, #4]
   327ec:	4691      	mov	r9, r2
   327ee:	0b22      	lsrs	r2, r4, #12
   327f0:	0544      	lsls	r4, r0, #21
   327f2:	0d64      	lsrs	r4, r4, #21
   327f4:	401d      	ands	r5, r3
   327f6:	e67c      	b.n	324f2 <__aeabi_dmul+0xce>
   327f8:	2280      	movs	r2, #128	; 0x80
   327fa:	4659      	mov	r1, fp
   327fc:	0312      	lsls	r2, r2, #12
   327fe:	4211      	tst	r1, r2
   32800:	d008      	beq.n	32814 <__aeabi_dmul+0x3f0>
   32802:	4214      	tst	r4, r2
   32804:	d106      	bne.n	32814 <__aeabi_dmul+0x3f0>
   32806:	4322      	orrs	r2, r4
   32808:	0312      	lsls	r2, r2, #12
   3280a:	0b12      	lsrs	r2, r2, #12
   3280c:	4645      	mov	r5, r8
   3280e:	4699      	mov	r9, r3
   32810:	4c43      	ldr	r4, [pc, #268]	; (32920 <__aeabi_dmul+0x4fc>)
   32812:	e66e      	b.n	324f2 <__aeabi_dmul+0xce>
   32814:	465b      	mov	r3, fp
   32816:	431a      	orrs	r2, r3
   32818:	0312      	lsls	r2, r2, #12
   3281a:	0b12      	lsrs	r2, r2, #12
   3281c:	4c40      	ldr	r4, [pc, #256]	; (32920 <__aeabi_dmul+0x4fc>)
   3281e:	e668      	b.n	324f2 <__aeabi_dmul+0xce>
   32820:	0003      	movs	r3, r0
   32822:	4654      	mov	r4, sl
   32824:	3b28      	subs	r3, #40	; 0x28
   32826:	409c      	lsls	r4, r3
   32828:	2300      	movs	r3, #0
   3282a:	e6b9      	b.n	325a0 <__aeabi_dmul+0x17c>
   3282c:	f000 fbfc 	bl	33028 <__clzsi2>
   32830:	3020      	adds	r0, #32
   32832:	e6a6      	b.n	32582 <__aeabi_dmul+0x15e>
   32834:	0003      	movs	r3, r0
   32836:	3b28      	subs	r3, #40	; 0x28
   32838:	409f      	lsls	r7, r3
   3283a:	2300      	movs	r3, #0
   3283c:	46bb      	mov	fp, r7
   3283e:	4699      	mov	r9, r3
   32840:	e68a      	b.n	32558 <__aeabi_dmul+0x134>
   32842:	f000 fbf1 	bl	33028 <__clzsi2>
   32846:	3020      	adds	r0, #32
   32848:	e674      	b.n	32534 <__aeabi_dmul+0x110>
   3284a:	46b4      	mov	ip, r6
   3284c:	e7ad      	b.n	327aa <__aeabi_dmul+0x386>
   3284e:	2501      	movs	r5, #1
   32850:	1a2a      	subs	r2, r5, r0
   32852:	2a38      	cmp	r2, #56	; 0x38
   32854:	dd06      	ble.n	32864 <__aeabi_dmul+0x440>
   32856:	9b01      	ldr	r3, [sp, #4]
   32858:	2400      	movs	r4, #0
   3285a:	401d      	ands	r5, r3
   3285c:	2300      	movs	r3, #0
   3285e:	2200      	movs	r2, #0
   32860:	4699      	mov	r9, r3
   32862:	e646      	b.n	324f2 <__aeabi_dmul+0xce>
   32864:	2a1f      	cmp	r2, #31
   32866:	dc21      	bgt.n	328ac <__aeabi_dmul+0x488>
   32868:	2520      	movs	r5, #32
   3286a:	0020      	movs	r0, r4
   3286c:	1aad      	subs	r5, r5, r2
   3286e:	001e      	movs	r6, r3
   32870:	40ab      	lsls	r3, r5
   32872:	40a8      	lsls	r0, r5
   32874:	40d6      	lsrs	r6, r2
   32876:	1e5d      	subs	r5, r3, #1
   32878:	41ab      	sbcs	r3, r5
   3287a:	4330      	orrs	r0, r6
   3287c:	4318      	orrs	r0, r3
   3287e:	40d4      	lsrs	r4, r2
   32880:	0743      	lsls	r3, r0, #29
   32882:	d009      	beq.n	32898 <__aeabi_dmul+0x474>
   32884:	230f      	movs	r3, #15
   32886:	4003      	ands	r3, r0
   32888:	2b04      	cmp	r3, #4
   3288a:	d005      	beq.n	32898 <__aeabi_dmul+0x474>
   3288c:	0003      	movs	r3, r0
   3288e:	1d18      	adds	r0, r3, #4
   32890:	4298      	cmp	r0, r3
   32892:	419b      	sbcs	r3, r3
   32894:	425b      	negs	r3, r3
   32896:	18e4      	adds	r4, r4, r3
   32898:	0223      	lsls	r3, r4, #8
   3289a:	d521      	bpl.n	328e0 <__aeabi_dmul+0x4bc>
   3289c:	2501      	movs	r5, #1
   3289e:	9b01      	ldr	r3, [sp, #4]
   328a0:	2401      	movs	r4, #1
   328a2:	401d      	ands	r5, r3
   328a4:	2300      	movs	r3, #0
   328a6:	2200      	movs	r2, #0
   328a8:	4699      	mov	r9, r3
   328aa:	e622      	b.n	324f2 <__aeabi_dmul+0xce>
   328ac:	251f      	movs	r5, #31
   328ae:	0021      	movs	r1, r4
   328b0:	426d      	negs	r5, r5
   328b2:	1a28      	subs	r0, r5, r0
   328b4:	40c1      	lsrs	r1, r0
   328b6:	0008      	movs	r0, r1
   328b8:	2a20      	cmp	r2, #32
   328ba:	d01d      	beq.n	328f8 <__aeabi_dmul+0x4d4>
   328bc:	355f      	adds	r5, #95	; 0x5f
   328be:	1aaa      	subs	r2, r5, r2
   328c0:	4094      	lsls	r4, r2
   328c2:	4323      	orrs	r3, r4
   328c4:	1e5c      	subs	r4, r3, #1
   328c6:	41a3      	sbcs	r3, r4
   328c8:	2507      	movs	r5, #7
   328ca:	4303      	orrs	r3, r0
   328cc:	401d      	ands	r5, r3
   328ce:	2200      	movs	r2, #0
   328d0:	2d00      	cmp	r5, #0
   328d2:	d009      	beq.n	328e8 <__aeabi_dmul+0x4c4>
   328d4:	220f      	movs	r2, #15
   328d6:	2400      	movs	r4, #0
   328d8:	401a      	ands	r2, r3
   328da:	0018      	movs	r0, r3
   328dc:	2a04      	cmp	r2, #4
   328de:	d1d6      	bne.n	3288e <__aeabi_dmul+0x46a>
   328e0:	0003      	movs	r3, r0
   328e2:	0765      	lsls	r5, r4, #29
   328e4:	0264      	lsls	r4, r4, #9
   328e6:	0b22      	lsrs	r2, r4, #12
   328e8:	08db      	lsrs	r3, r3, #3
   328ea:	432b      	orrs	r3, r5
   328ec:	2501      	movs	r5, #1
   328ee:	4699      	mov	r9, r3
   328f0:	9b01      	ldr	r3, [sp, #4]
   328f2:	2400      	movs	r4, #0
   328f4:	401d      	ands	r5, r3
   328f6:	e5fc      	b.n	324f2 <__aeabi_dmul+0xce>
   328f8:	2400      	movs	r4, #0
   328fa:	e7e2      	b.n	328c2 <__aeabi_dmul+0x49e>
   328fc:	2280      	movs	r2, #128	; 0x80
   328fe:	2501      	movs	r5, #1
   32900:	0312      	lsls	r2, r2, #12
   32902:	4322      	orrs	r2, r4
   32904:	9901      	ldr	r1, [sp, #4]
   32906:	0312      	lsls	r2, r2, #12
   32908:	0b12      	lsrs	r2, r2, #12
   3290a:	400d      	ands	r5, r1
   3290c:	4699      	mov	r9, r3
   3290e:	4c04      	ldr	r4, [pc, #16]	; (32920 <__aeabi_dmul+0x4fc>)
   32910:	e5ef      	b.n	324f2 <__aeabi_dmul+0xce>
   32912:	46c0      	nop			; (mov r8, r8)
   32914:	000003ff 	.word	0x000003ff
   32918:	feffffff 	.word	0xfeffffff
   3291c:	000007fe 	.word	0x000007fe
   32920:	000007ff 	.word	0x000007ff

00032924 <__aeabi_dsub>:
   32924:	b5f0      	push	{r4, r5, r6, r7, lr}
   32926:	4646      	mov	r6, r8
   32928:	46d6      	mov	lr, sl
   3292a:	464f      	mov	r7, r9
   3292c:	030c      	lsls	r4, r1, #12
   3292e:	b5c0      	push	{r6, r7, lr}
   32930:	0fcd      	lsrs	r5, r1, #31
   32932:	004e      	lsls	r6, r1, #1
   32934:	0a61      	lsrs	r1, r4, #9
   32936:	0f44      	lsrs	r4, r0, #29
   32938:	430c      	orrs	r4, r1
   3293a:	00c1      	lsls	r1, r0, #3
   3293c:	0058      	lsls	r0, r3, #1
   3293e:	0d40      	lsrs	r0, r0, #21
   32940:	4684      	mov	ip, r0
   32942:	468a      	mov	sl, r1
   32944:	000f      	movs	r7, r1
   32946:	0319      	lsls	r1, r3, #12
   32948:	0f50      	lsrs	r0, r2, #29
   3294a:	0a49      	lsrs	r1, r1, #9
   3294c:	4301      	orrs	r1, r0
   3294e:	48c6      	ldr	r0, [pc, #792]	; (32c68 <__aeabi_dsub+0x344>)
   32950:	0d76      	lsrs	r6, r6, #21
   32952:	46a8      	mov	r8, r5
   32954:	0fdb      	lsrs	r3, r3, #31
   32956:	00d2      	lsls	r2, r2, #3
   32958:	4584      	cmp	ip, r0
   3295a:	d100      	bne.n	3295e <__aeabi_dsub+0x3a>
   3295c:	e0d8      	b.n	32b10 <__aeabi_dsub+0x1ec>
   3295e:	2001      	movs	r0, #1
   32960:	4043      	eors	r3, r0
   32962:	42ab      	cmp	r3, r5
   32964:	d100      	bne.n	32968 <__aeabi_dsub+0x44>
   32966:	e0a6      	b.n	32ab6 <__aeabi_dsub+0x192>
   32968:	4660      	mov	r0, ip
   3296a:	1a35      	subs	r5, r6, r0
   3296c:	2d00      	cmp	r5, #0
   3296e:	dc00      	bgt.n	32972 <__aeabi_dsub+0x4e>
   32970:	e105      	b.n	32b7e <__aeabi_dsub+0x25a>
   32972:	2800      	cmp	r0, #0
   32974:	d110      	bne.n	32998 <__aeabi_dsub+0x74>
   32976:	000b      	movs	r3, r1
   32978:	4313      	orrs	r3, r2
   3297a:	d100      	bne.n	3297e <__aeabi_dsub+0x5a>
   3297c:	e0d7      	b.n	32b2e <__aeabi_dsub+0x20a>
   3297e:	1e6b      	subs	r3, r5, #1
   32980:	2b00      	cmp	r3, #0
   32982:	d000      	beq.n	32986 <__aeabi_dsub+0x62>
   32984:	e14b      	b.n	32c1e <__aeabi_dsub+0x2fa>
   32986:	4653      	mov	r3, sl
   32988:	1a9f      	subs	r7, r3, r2
   3298a:	45ba      	cmp	sl, r7
   3298c:	4180      	sbcs	r0, r0
   3298e:	1a64      	subs	r4, r4, r1
   32990:	4240      	negs	r0, r0
   32992:	1a24      	subs	r4, r4, r0
   32994:	2601      	movs	r6, #1
   32996:	e01e      	b.n	329d6 <__aeabi_dsub+0xb2>
   32998:	4bb3      	ldr	r3, [pc, #716]	; (32c68 <__aeabi_dsub+0x344>)
   3299a:	429e      	cmp	r6, r3
   3299c:	d048      	beq.n	32a30 <__aeabi_dsub+0x10c>
   3299e:	2380      	movs	r3, #128	; 0x80
   329a0:	041b      	lsls	r3, r3, #16
   329a2:	4319      	orrs	r1, r3
   329a4:	2d38      	cmp	r5, #56	; 0x38
   329a6:	dd00      	ble.n	329aa <__aeabi_dsub+0x86>
   329a8:	e119      	b.n	32bde <__aeabi_dsub+0x2ba>
   329aa:	2d1f      	cmp	r5, #31
   329ac:	dd00      	ble.n	329b0 <__aeabi_dsub+0x8c>
   329ae:	e14c      	b.n	32c4a <__aeabi_dsub+0x326>
   329b0:	2320      	movs	r3, #32
   329b2:	000f      	movs	r7, r1
   329b4:	1b5b      	subs	r3, r3, r5
   329b6:	0010      	movs	r0, r2
   329b8:	409a      	lsls	r2, r3
   329ba:	409f      	lsls	r7, r3
   329bc:	40e8      	lsrs	r0, r5
   329be:	1e53      	subs	r3, r2, #1
   329c0:	419a      	sbcs	r2, r3
   329c2:	40e9      	lsrs	r1, r5
   329c4:	4307      	orrs	r7, r0
   329c6:	4317      	orrs	r7, r2
   329c8:	4653      	mov	r3, sl
   329ca:	1bdf      	subs	r7, r3, r7
   329cc:	1a61      	subs	r1, r4, r1
   329ce:	45ba      	cmp	sl, r7
   329d0:	41a4      	sbcs	r4, r4
   329d2:	4264      	negs	r4, r4
   329d4:	1b0c      	subs	r4, r1, r4
   329d6:	0223      	lsls	r3, r4, #8
   329d8:	d400      	bmi.n	329dc <__aeabi_dsub+0xb8>
   329da:	e0c5      	b.n	32b68 <__aeabi_dsub+0x244>
   329dc:	0264      	lsls	r4, r4, #9
   329de:	0a65      	lsrs	r5, r4, #9
   329e0:	2d00      	cmp	r5, #0
   329e2:	d100      	bne.n	329e6 <__aeabi_dsub+0xc2>
   329e4:	e0f6      	b.n	32bd4 <__aeabi_dsub+0x2b0>
   329e6:	0028      	movs	r0, r5
   329e8:	f000 fb1e 	bl	33028 <__clzsi2>
   329ec:	0003      	movs	r3, r0
   329ee:	3b08      	subs	r3, #8
   329f0:	2b1f      	cmp	r3, #31
   329f2:	dd00      	ble.n	329f6 <__aeabi_dsub+0xd2>
   329f4:	e0e9      	b.n	32bca <__aeabi_dsub+0x2a6>
   329f6:	2220      	movs	r2, #32
   329f8:	003c      	movs	r4, r7
   329fa:	1ad2      	subs	r2, r2, r3
   329fc:	409d      	lsls	r5, r3
   329fe:	40d4      	lsrs	r4, r2
   32a00:	409f      	lsls	r7, r3
   32a02:	4325      	orrs	r5, r4
   32a04:	429e      	cmp	r6, r3
   32a06:	dd00      	ble.n	32a0a <__aeabi_dsub+0xe6>
   32a08:	e0db      	b.n	32bc2 <__aeabi_dsub+0x29e>
   32a0a:	1b9e      	subs	r6, r3, r6
   32a0c:	1c73      	adds	r3, r6, #1
   32a0e:	2b1f      	cmp	r3, #31
   32a10:	dd00      	ble.n	32a14 <__aeabi_dsub+0xf0>
   32a12:	e10a      	b.n	32c2a <__aeabi_dsub+0x306>
   32a14:	2220      	movs	r2, #32
   32a16:	0038      	movs	r0, r7
   32a18:	1ad2      	subs	r2, r2, r3
   32a1a:	0029      	movs	r1, r5
   32a1c:	4097      	lsls	r7, r2
   32a1e:	002c      	movs	r4, r5
   32a20:	4091      	lsls	r1, r2
   32a22:	40d8      	lsrs	r0, r3
   32a24:	1e7a      	subs	r2, r7, #1
   32a26:	4197      	sbcs	r7, r2
   32a28:	40dc      	lsrs	r4, r3
   32a2a:	2600      	movs	r6, #0
   32a2c:	4301      	orrs	r1, r0
   32a2e:	430f      	orrs	r7, r1
   32a30:	077b      	lsls	r3, r7, #29
   32a32:	d009      	beq.n	32a48 <__aeabi_dsub+0x124>
   32a34:	230f      	movs	r3, #15
   32a36:	403b      	ands	r3, r7
   32a38:	2b04      	cmp	r3, #4
   32a3a:	d005      	beq.n	32a48 <__aeabi_dsub+0x124>
   32a3c:	1d3b      	adds	r3, r7, #4
   32a3e:	42bb      	cmp	r3, r7
   32a40:	41bf      	sbcs	r7, r7
   32a42:	427f      	negs	r7, r7
   32a44:	19e4      	adds	r4, r4, r7
   32a46:	001f      	movs	r7, r3
   32a48:	0223      	lsls	r3, r4, #8
   32a4a:	d525      	bpl.n	32a98 <__aeabi_dsub+0x174>
   32a4c:	4b86      	ldr	r3, [pc, #536]	; (32c68 <__aeabi_dsub+0x344>)
   32a4e:	3601      	adds	r6, #1
   32a50:	429e      	cmp	r6, r3
   32a52:	d100      	bne.n	32a56 <__aeabi_dsub+0x132>
   32a54:	e0af      	b.n	32bb6 <__aeabi_dsub+0x292>
   32a56:	4b85      	ldr	r3, [pc, #532]	; (32c6c <__aeabi_dsub+0x348>)
   32a58:	2501      	movs	r5, #1
   32a5a:	401c      	ands	r4, r3
   32a5c:	4643      	mov	r3, r8
   32a5e:	0762      	lsls	r2, r4, #29
   32a60:	08ff      	lsrs	r7, r7, #3
   32a62:	0264      	lsls	r4, r4, #9
   32a64:	0576      	lsls	r6, r6, #21
   32a66:	4317      	orrs	r7, r2
   32a68:	0b24      	lsrs	r4, r4, #12
   32a6a:	0d76      	lsrs	r6, r6, #21
   32a6c:	401d      	ands	r5, r3
   32a6e:	2100      	movs	r1, #0
   32a70:	0324      	lsls	r4, r4, #12
   32a72:	0b23      	lsrs	r3, r4, #12
   32a74:	0d0c      	lsrs	r4, r1, #20
   32a76:	4a7e      	ldr	r2, [pc, #504]	; (32c70 <__aeabi_dsub+0x34c>)
   32a78:	0524      	lsls	r4, r4, #20
   32a7a:	431c      	orrs	r4, r3
   32a7c:	4014      	ands	r4, r2
   32a7e:	0533      	lsls	r3, r6, #20
   32a80:	4323      	orrs	r3, r4
   32a82:	005b      	lsls	r3, r3, #1
   32a84:	07ed      	lsls	r5, r5, #31
   32a86:	085b      	lsrs	r3, r3, #1
   32a88:	432b      	orrs	r3, r5
   32a8a:	0038      	movs	r0, r7
   32a8c:	0019      	movs	r1, r3
   32a8e:	bc1c      	pop	{r2, r3, r4}
   32a90:	4690      	mov	r8, r2
   32a92:	4699      	mov	r9, r3
   32a94:	46a2      	mov	sl, r4
   32a96:	bdf0      	pop	{r4, r5, r6, r7, pc}
   32a98:	2501      	movs	r5, #1
   32a9a:	4643      	mov	r3, r8
   32a9c:	0762      	lsls	r2, r4, #29
   32a9e:	08ff      	lsrs	r7, r7, #3
   32aa0:	4317      	orrs	r7, r2
   32aa2:	08e4      	lsrs	r4, r4, #3
   32aa4:	401d      	ands	r5, r3
   32aa6:	4b70      	ldr	r3, [pc, #448]	; (32c68 <__aeabi_dsub+0x344>)
   32aa8:	429e      	cmp	r6, r3
   32aaa:	d036      	beq.n	32b1a <__aeabi_dsub+0x1f6>
   32aac:	0324      	lsls	r4, r4, #12
   32aae:	0576      	lsls	r6, r6, #21
   32ab0:	0b24      	lsrs	r4, r4, #12
   32ab2:	0d76      	lsrs	r6, r6, #21
   32ab4:	e7db      	b.n	32a6e <__aeabi_dsub+0x14a>
   32ab6:	4663      	mov	r3, ip
   32ab8:	1af3      	subs	r3, r6, r3
   32aba:	2b00      	cmp	r3, #0
   32abc:	dc00      	bgt.n	32ac0 <__aeabi_dsub+0x19c>
   32abe:	e094      	b.n	32bea <__aeabi_dsub+0x2c6>
   32ac0:	4660      	mov	r0, ip
   32ac2:	2800      	cmp	r0, #0
   32ac4:	d035      	beq.n	32b32 <__aeabi_dsub+0x20e>
   32ac6:	4868      	ldr	r0, [pc, #416]	; (32c68 <__aeabi_dsub+0x344>)
   32ac8:	4286      	cmp	r6, r0
   32aca:	d0b1      	beq.n	32a30 <__aeabi_dsub+0x10c>
   32acc:	2780      	movs	r7, #128	; 0x80
   32ace:	043f      	lsls	r7, r7, #16
   32ad0:	4339      	orrs	r1, r7
   32ad2:	2b38      	cmp	r3, #56	; 0x38
   32ad4:	dc00      	bgt.n	32ad8 <__aeabi_dsub+0x1b4>
   32ad6:	e0fd      	b.n	32cd4 <__aeabi_dsub+0x3b0>
   32ad8:	430a      	orrs	r2, r1
   32ada:	0017      	movs	r7, r2
   32adc:	2100      	movs	r1, #0
   32ade:	1e7a      	subs	r2, r7, #1
   32ae0:	4197      	sbcs	r7, r2
   32ae2:	4457      	add	r7, sl
   32ae4:	4557      	cmp	r7, sl
   32ae6:	4180      	sbcs	r0, r0
   32ae8:	1909      	adds	r1, r1, r4
   32aea:	4244      	negs	r4, r0
   32aec:	190c      	adds	r4, r1, r4
   32aee:	0223      	lsls	r3, r4, #8
   32af0:	d53a      	bpl.n	32b68 <__aeabi_dsub+0x244>
   32af2:	4b5d      	ldr	r3, [pc, #372]	; (32c68 <__aeabi_dsub+0x344>)
   32af4:	3601      	adds	r6, #1
   32af6:	429e      	cmp	r6, r3
   32af8:	d100      	bne.n	32afc <__aeabi_dsub+0x1d8>
   32afa:	e14b      	b.n	32d94 <__aeabi_dsub+0x470>
   32afc:	2201      	movs	r2, #1
   32afe:	4b5b      	ldr	r3, [pc, #364]	; (32c6c <__aeabi_dsub+0x348>)
   32b00:	401c      	ands	r4, r3
   32b02:	087b      	lsrs	r3, r7, #1
   32b04:	4017      	ands	r7, r2
   32b06:	431f      	orrs	r7, r3
   32b08:	07e2      	lsls	r2, r4, #31
   32b0a:	4317      	orrs	r7, r2
   32b0c:	0864      	lsrs	r4, r4, #1
   32b0e:	e78f      	b.n	32a30 <__aeabi_dsub+0x10c>
   32b10:	0008      	movs	r0, r1
   32b12:	4310      	orrs	r0, r2
   32b14:	d000      	beq.n	32b18 <__aeabi_dsub+0x1f4>
   32b16:	e724      	b.n	32962 <__aeabi_dsub+0x3e>
   32b18:	e721      	b.n	3295e <__aeabi_dsub+0x3a>
   32b1a:	0023      	movs	r3, r4
   32b1c:	433b      	orrs	r3, r7
   32b1e:	d100      	bne.n	32b22 <__aeabi_dsub+0x1fe>
   32b20:	e1b9      	b.n	32e96 <__aeabi_dsub+0x572>
   32b22:	2280      	movs	r2, #128	; 0x80
   32b24:	0312      	lsls	r2, r2, #12
   32b26:	4314      	orrs	r4, r2
   32b28:	0324      	lsls	r4, r4, #12
   32b2a:	0b24      	lsrs	r4, r4, #12
   32b2c:	e79f      	b.n	32a6e <__aeabi_dsub+0x14a>
   32b2e:	002e      	movs	r6, r5
   32b30:	e77e      	b.n	32a30 <__aeabi_dsub+0x10c>
   32b32:	0008      	movs	r0, r1
   32b34:	4310      	orrs	r0, r2
   32b36:	d100      	bne.n	32b3a <__aeabi_dsub+0x216>
   32b38:	e0ca      	b.n	32cd0 <__aeabi_dsub+0x3ac>
   32b3a:	1e58      	subs	r0, r3, #1
   32b3c:	4684      	mov	ip, r0
   32b3e:	2800      	cmp	r0, #0
   32b40:	d000      	beq.n	32b44 <__aeabi_dsub+0x220>
   32b42:	e0e7      	b.n	32d14 <__aeabi_dsub+0x3f0>
   32b44:	4452      	add	r2, sl
   32b46:	4552      	cmp	r2, sl
   32b48:	4180      	sbcs	r0, r0
   32b4a:	1864      	adds	r4, r4, r1
   32b4c:	4240      	negs	r0, r0
   32b4e:	1824      	adds	r4, r4, r0
   32b50:	0017      	movs	r7, r2
   32b52:	2601      	movs	r6, #1
   32b54:	0223      	lsls	r3, r4, #8
   32b56:	d507      	bpl.n	32b68 <__aeabi_dsub+0x244>
   32b58:	2602      	movs	r6, #2
   32b5a:	e7cf      	b.n	32afc <__aeabi_dsub+0x1d8>
   32b5c:	4664      	mov	r4, ip
   32b5e:	432c      	orrs	r4, r5
   32b60:	d100      	bne.n	32b64 <__aeabi_dsub+0x240>
   32b62:	e1b3      	b.n	32ecc <__aeabi_dsub+0x5a8>
   32b64:	002c      	movs	r4, r5
   32b66:	4667      	mov	r7, ip
   32b68:	077b      	lsls	r3, r7, #29
   32b6a:	d000      	beq.n	32b6e <__aeabi_dsub+0x24a>
   32b6c:	e762      	b.n	32a34 <__aeabi_dsub+0x110>
   32b6e:	0763      	lsls	r3, r4, #29
   32b70:	08ff      	lsrs	r7, r7, #3
   32b72:	431f      	orrs	r7, r3
   32b74:	2501      	movs	r5, #1
   32b76:	4643      	mov	r3, r8
   32b78:	08e4      	lsrs	r4, r4, #3
   32b7a:	401d      	ands	r5, r3
   32b7c:	e793      	b.n	32aa6 <__aeabi_dsub+0x182>
   32b7e:	2d00      	cmp	r5, #0
   32b80:	d178      	bne.n	32c74 <__aeabi_dsub+0x350>
   32b82:	1c75      	adds	r5, r6, #1
   32b84:	056d      	lsls	r5, r5, #21
   32b86:	0d6d      	lsrs	r5, r5, #21
   32b88:	2d01      	cmp	r5, #1
   32b8a:	dc00      	bgt.n	32b8e <__aeabi_dsub+0x26a>
   32b8c:	e0f2      	b.n	32d74 <__aeabi_dsub+0x450>
   32b8e:	4650      	mov	r0, sl
   32b90:	1a80      	subs	r0, r0, r2
   32b92:	4582      	cmp	sl, r0
   32b94:	41bf      	sbcs	r7, r7
   32b96:	1a65      	subs	r5, r4, r1
   32b98:	427f      	negs	r7, r7
   32b9a:	1bed      	subs	r5, r5, r7
   32b9c:	4684      	mov	ip, r0
   32b9e:	0228      	lsls	r0, r5, #8
   32ba0:	d400      	bmi.n	32ba4 <__aeabi_dsub+0x280>
   32ba2:	e08c      	b.n	32cbe <__aeabi_dsub+0x39a>
   32ba4:	4650      	mov	r0, sl
   32ba6:	1a17      	subs	r7, r2, r0
   32ba8:	42ba      	cmp	r2, r7
   32baa:	4192      	sbcs	r2, r2
   32bac:	1b0c      	subs	r4, r1, r4
   32bae:	4255      	negs	r5, r2
   32bb0:	1b65      	subs	r5, r4, r5
   32bb2:	4698      	mov	r8, r3
   32bb4:	e714      	b.n	329e0 <__aeabi_dsub+0xbc>
   32bb6:	2501      	movs	r5, #1
   32bb8:	4643      	mov	r3, r8
   32bba:	2400      	movs	r4, #0
   32bbc:	401d      	ands	r5, r3
   32bbe:	2700      	movs	r7, #0
   32bc0:	e755      	b.n	32a6e <__aeabi_dsub+0x14a>
   32bc2:	4c2a      	ldr	r4, [pc, #168]	; (32c6c <__aeabi_dsub+0x348>)
   32bc4:	1af6      	subs	r6, r6, r3
   32bc6:	402c      	ands	r4, r5
   32bc8:	e732      	b.n	32a30 <__aeabi_dsub+0x10c>
   32bca:	003d      	movs	r5, r7
   32bcc:	3828      	subs	r0, #40	; 0x28
   32bce:	4085      	lsls	r5, r0
   32bd0:	2700      	movs	r7, #0
   32bd2:	e717      	b.n	32a04 <__aeabi_dsub+0xe0>
   32bd4:	0038      	movs	r0, r7
   32bd6:	f000 fa27 	bl	33028 <__clzsi2>
   32bda:	3020      	adds	r0, #32
   32bdc:	e706      	b.n	329ec <__aeabi_dsub+0xc8>
   32bde:	430a      	orrs	r2, r1
   32be0:	0017      	movs	r7, r2
   32be2:	2100      	movs	r1, #0
   32be4:	1e7a      	subs	r2, r7, #1
   32be6:	4197      	sbcs	r7, r2
   32be8:	e6ee      	b.n	329c8 <__aeabi_dsub+0xa4>
   32bea:	2b00      	cmp	r3, #0
   32bec:	d000      	beq.n	32bf0 <__aeabi_dsub+0x2cc>
   32bee:	e0e5      	b.n	32dbc <__aeabi_dsub+0x498>
   32bf0:	1c73      	adds	r3, r6, #1
   32bf2:	469c      	mov	ip, r3
   32bf4:	055b      	lsls	r3, r3, #21
   32bf6:	0d5b      	lsrs	r3, r3, #21
   32bf8:	2b01      	cmp	r3, #1
   32bfa:	dc00      	bgt.n	32bfe <__aeabi_dsub+0x2da>
   32bfc:	e09f      	b.n	32d3e <__aeabi_dsub+0x41a>
   32bfe:	4b1a      	ldr	r3, [pc, #104]	; (32c68 <__aeabi_dsub+0x344>)
   32c00:	459c      	cmp	ip, r3
   32c02:	d100      	bne.n	32c06 <__aeabi_dsub+0x2e2>
   32c04:	e0c5      	b.n	32d92 <__aeabi_dsub+0x46e>
   32c06:	4452      	add	r2, sl
   32c08:	4552      	cmp	r2, sl
   32c0a:	4180      	sbcs	r0, r0
   32c0c:	1864      	adds	r4, r4, r1
   32c0e:	4240      	negs	r0, r0
   32c10:	1824      	adds	r4, r4, r0
   32c12:	07e7      	lsls	r7, r4, #31
   32c14:	0852      	lsrs	r2, r2, #1
   32c16:	4317      	orrs	r7, r2
   32c18:	0864      	lsrs	r4, r4, #1
   32c1a:	4666      	mov	r6, ip
   32c1c:	e708      	b.n	32a30 <__aeabi_dsub+0x10c>
   32c1e:	4812      	ldr	r0, [pc, #72]	; (32c68 <__aeabi_dsub+0x344>)
   32c20:	4285      	cmp	r5, r0
   32c22:	d100      	bne.n	32c26 <__aeabi_dsub+0x302>
   32c24:	e085      	b.n	32d32 <__aeabi_dsub+0x40e>
   32c26:	001d      	movs	r5, r3
   32c28:	e6bc      	b.n	329a4 <__aeabi_dsub+0x80>
   32c2a:	0029      	movs	r1, r5
   32c2c:	3e1f      	subs	r6, #31
   32c2e:	40f1      	lsrs	r1, r6
   32c30:	2b20      	cmp	r3, #32
   32c32:	d100      	bne.n	32c36 <__aeabi_dsub+0x312>
   32c34:	e07f      	b.n	32d36 <__aeabi_dsub+0x412>
   32c36:	2240      	movs	r2, #64	; 0x40
   32c38:	1ad3      	subs	r3, r2, r3
   32c3a:	409d      	lsls	r5, r3
   32c3c:	432f      	orrs	r7, r5
   32c3e:	1e7d      	subs	r5, r7, #1
   32c40:	41af      	sbcs	r7, r5
   32c42:	2400      	movs	r4, #0
   32c44:	430f      	orrs	r7, r1
   32c46:	2600      	movs	r6, #0
   32c48:	e78e      	b.n	32b68 <__aeabi_dsub+0x244>
   32c4a:	002b      	movs	r3, r5
   32c4c:	000f      	movs	r7, r1
   32c4e:	3b20      	subs	r3, #32
   32c50:	40df      	lsrs	r7, r3
   32c52:	2d20      	cmp	r5, #32
   32c54:	d071      	beq.n	32d3a <__aeabi_dsub+0x416>
   32c56:	2340      	movs	r3, #64	; 0x40
   32c58:	1b5d      	subs	r5, r3, r5
   32c5a:	40a9      	lsls	r1, r5
   32c5c:	430a      	orrs	r2, r1
   32c5e:	1e51      	subs	r1, r2, #1
   32c60:	418a      	sbcs	r2, r1
   32c62:	2100      	movs	r1, #0
   32c64:	4317      	orrs	r7, r2
   32c66:	e6af      	b.n	329c8 <__aeabi_dsub+0xa4>
   32c68:	000007ff 	.word	0x000007ff
   32c6c:	ff7fffff 	.word	0xff7fffff
   32c70:	800fffff 	.word	0x800fffff
   32c74:	2e00      	cmp	r6, #0
   32c76:	d03e      	beq.n	32cf6 <__aeabi_dsub+0x3d2>
   32c78:	4eb3      	ldr	r6, [pc, #716]	; (32f48 <__aeabi_dsub+0x624>)
   32c7a:	45b4      	cmp	ip, r6
   32c7c:	d045      	beq.n	32d0a <__aeabi_dsub+0x3e6>
   32c7e:	2680      	movs	r6, #128	; 0x80
   32c80:	0436      	lsls	r6, r6, #16
   32c82:	426d      	negs	r5, r5
   32c84:	4334      	orrs	r4, r6
   32c86:	2d38      	cmp	r5, #56	; 0x38
   32c88:	dd00      	ble.n	32c8c <__aeabi_dsub+0x368>
   32c8a:	e0a8      	b.n	32dde <__aeabi_dsub+0x4ba>
   32c8c:	2d1f      	cmp	r5, #31
   32c8e:	dd00      	ble.n	32c92 <__aeabi_dsub+0x36e>
   32c90:	e11f      	b.n	32ed2 <__aeabi_dsub+0x5ae>
   32c92:	2620      	movs	r6, #32
   32c94:	0027      	movs	r7, r4
   32c96:	4650      	mov	r0, sl
   32c98:	1b76      	subs	r6, r6, r5
   32c9a:	40b7      	lsls	r7, r6
   32c9c:	40e8      	lsrs	r0, r5
   32c9e:	4307      	orrs	r7, r0
   32ca0:	4650      	mov	r0, sl
   32ca2:	40b0      	lsls	r0, r6
   32ca4:	1e46      	subs	r6, r0, #1
   32ca6:	41b0      	sbcs	r0, r6
   32ca8:	40ec      	lsrs	r4, r5
   32caa:	4338      	orrs	r0, r7
   32cac:	1a17      	subs	r7, r2, r0
   32cae:	42ba      	cmp	r2, r7
   32cb0:	4192      	sbcs	r2, r2
   32cb2:	1b0c      	subs	r4, r1, r4
   32cb4:	4252      	negs	r2, r2
   32cb6:	1aa4      	subs	r4, r4, r2
   32cb8:	4666      	mov	r6, ip
   32cba:	4698      	mov	r8, r3
   32cbc:	e68b      	b.n	329d6 <__aeabi_dsub+0xb2>
   32cbe:	4664      	mov	r4, ip
   32cc0:	4667      	mov	r7, ip
   32cc2:	432c      	orrs	r4, r5
   32cc4:	d000      	beq.n	32cc8 <__aeabi_dsub+0x3a4>
   32cc6:	e68b      	b.n	329e0 <__aeabi_dsub+0xbc>
   32cc8:	2500      	movs	r5, #0
   32cca:	2600      	movs	r6, #0
   32ccc:	2700      	movs	r7, #0
   32cce:	e6ea      	b.n	32aa6 <__aeabi_dsub+0x182>
   32cd0:	001e      	movs	r6, r3
   32cd2:	e6ad      	b.n	32a30 <__aeabi_dsub+0x10c>
   32cd4:	2b1f      	cmp	r3, #31
   32cd6:	dc60      	bgt.n	32d9a <__aeabi_dsub+0x476>
   32cd8:	2720      	movs	r7, #32
   32cda:	1af8      	subs	r0, r7, r3
   32cdc:	000f      	movs	r7, r1
   32cde:	4684      	mov	ip, r0
   32ce0:	4087      	lsls	r7, r0
   32ce2:	0010      	movs	r0, r2
   32ce4:	40d8      	lsrs	r0, r3
   32ce6:	4307      	orrs	r7, r0
   32ce8:	4660      	mov	r0, ip
   32cea:	4082      	lsls	r2, r0
   32cec:	1e50      	subs	r0, r2, #1
   32cee:	4182      	sbcs	r2, r0
   32cf0:	40d9      	lsrs	r1, r3
   32cf2:	4317      	orrs	r7, r2
   32cf4:	e6f5      	b.n	32ae2 <__aeabi_dsub+0x1be>
   32cf6:	0026      	movs	r6, r4
   32cf8:	4650      	mov	r0, sl
   32cfa:	4306      	orrs	r6, r0
   32cfc:	d005      	beq.n	32d0a <__aeabi_dsub+0x3e6>
   32cfe:	43ed      	mvns	r5, r5
   32d00:	2d00      	cmp	r5, #0
   32d02:	d0d3      	beq.n	32cac <__aeabi_dsub+0x388>
   32d04:	4e90      	ldr	r6, [pc, #576]	; (32f48 <__aeabi_dsub+0x624>)
   32d06:	45b4      	cmp	ip, r6
   32d08:	d1bd      	bne.n	32c86 <__aeabi_dsub+0x362>
   32d0a:	000c      	movs	r4, r1
   32d0c:	0017      	movs	r7, r2
   32d0e:	4666      	mov	r6, ip
   32d10:	4698      	mov	r8, r3
   32d12:	e68d      	b.n	32a30 <__aeabi_dsub+0x10c>
   32d14:	488c      	ldr	r0, [pc, #560]	; (32f48 <__aeabi_dsub+0x624>)
   32d16:	4283      	cmp	r3, r0
   32d18:	d00b      	beq.n	32d32 <__aeabi_dsub+0x40e>
   32d1a:	4663      	mov	r3, ip
   32d1c:	e6d9      	b.n	32ad2 <__aeabi_dsub+0x1ae>
   32d1e:	2d00      	cmp	r5, #0
   32d20:	d000      	beq.n	32d24 <__aeabi_dsub+0x400>
   32d22:	e096      	b.n	32e52 <__aeabi_dsub+0x52e>
   32d24:	0008      	movs	r0, r1
   32d26:	4310      	orrs	r0, r2
   32d28:	d100      	bne.n	32d2c <__aeabi_dsub+0x408>
   32d2a:	e0e2      	b.n	32ef2 <__aeabi_dsub+0x5ce>
   32d2c:	000c      	movs	r4, r1
   32d2e:	0017      	movs	r7, r2
   32d30:	4698      	mov	r8, r3
   32d32:	4e85      	ldr	r6, [pc, #532]	; (32f48 <__aeabi_dsub+0x624>)
   32d34:	e67c      	b.n	32a30 <__aeabi_dsub+0x10c>
   32d36:	2500      	movs	r5, #0
   32d38:	e780      	b.n	32c3c <__aeabi_dsub+0x318>
   32d3a:	2100      	movs	r1, #0
   32d3c:	e78e      	b.n	32c5c <__aeabi_dsub+0x338>
   32d3e:	0023      	movs	r3, r4
   32d40:	4650      	mov	r0, sl
   32d42:	4303      	orrs	r3, r0
   32d44:	2e00      	cmp	r6, #0
   32d46:	d000      	beq.n	32d4a <__aeabi_dsub+0x426>
   32d48:	e0a8      	b.n	32e9c <__aeabi_dsub+0x578>
   32d4a:	2b00      	cmp	r3, #0
   32d4c:	d100      	bne.n	32d50 <__aeabi_dsub+0x42c>
   32d4e:	e0de      	b.n	32f0e <__aeabi_dsub+0x5ea>
   32d50:	000b      	movs	r3, r1
   32d52:	4313      	orrs	r3, r2
   32d54:	d100      	bne.n	32d58 <__aeabi_dsub+0x434>
   32d56:	e66b      	b.n	32a30 <__aeabi_dsub+0x10c>
   32d58:	4452      	add	r2, sl
   32d5a:	4552      	cmp	r2, sl
   32d5c:	4180      	sbcs	r0, r0
   32d5e:	1864      	adds	r4, r4, r1
   32d60:	4240      	negs	r0, r0
   32d62:	1824      	adds	r4, r4, r0
   32d64:	0017      	movs	r7, r2
   32d66:	0223      	lsls	r3, r4, #8
   32d68:	d400      	bmi.n	32d6c <__aeabi_dsub+0x448>
   32d6a:	e6fd      	b.n	32b68 <__aeabi_dsub+0x244>
   32d6c:	4b77      	ldr	r3, [pc, #476]	; (32f4c <__aeabi_dsub+0x628>)
   32d6e:	4666      	mov	r6, ip
   32d70:	401c      	ands	r4, r3
   32d72:	e65d      	b.n	32a30 <__aeabi_dsub+0x10c>
   32d74:	0025      	movs	r5, r4
   32d76:	4650      	mov	r0, sl
   32d78:	4305      	orrs	r5, r0
   32d7a:	2e00      	cmp	r6, #0
   32d7c:	d1cf      	bne.n	32d1e <__aeabi_dsub+0x3fa>
   32d7e:	2d00      	cmp	r5, #0
   32d80:	d14f      	bne.n	32e22 <__aeabi_dsub+0x4fe>
   32d82:	000c      	movs	r4, r1
   32d84:	4314      	orrs	r4, r2
   32d86:	d100      	bne.n	32d8a <__aeabi_dsub+0x466>
   32d88:	e0a0      	b.n	32ecc <__aeabi_dsub+0x5a8>
   32d8a:	000c      	movs	r4, r1
   32d8c:	0017      	movs	r7, r2
   32d8e:	4698      	mov	r8, r3
   32d90:	e64e      	b.n	32a30 <__aeabi_dsub+0x10c>
   32d92:	4666      	mov	r6, ip
   32d94:	2400      	movs	r4, #0
   32d96:	2700      	movs	r7, #0
   32d98:	e685      	b.n	32aa6 <__aeabi_dsub+0x182>
   32d9a:	001f      	movs	r7, r3
   32d9c:	0008      	movs	r0, r1
   32d9e:	3f20      	subs	r7, #32
   32da0:	40f8      	lsrs	r0, r7
   32da2:	0007      	movs	r7, r0
   32da4:	2b20      	cmp	r3, #32
   32da6:	d100      	bne.n	32daa <__aeabi_dsub+0x486>
   32da8:	e08e      	b.n	32ec8 <__aeabi_dsub+0x5a4>
   32daa:	2040      	movs	r0, #64	; 0x40
   32dac:	1ac3      	subs	r3, r0, r3
   32dae:	4099      	lsls	r1, r3
   32db0:	430a      	orrs	r2, r1
   32db2:	1e51      	subs	r1, r2, #1
   32db4:	418a      	sbcs	r2, r1
   32db6:	2100      	movs	r1, #0
   32db8:	4317      	orrs	r7, r2
   32dba:	e692      	b.n	32ae2 <__aeabi_dsub+0x1be>
   32dbc:	2e00      	cmp	r6, #0
   32dbe:	d114      	bne.n	32dea <__aeabi_dsub+0x4c6>
   32dc0:	0026      	movs	r6, r4
   32dc2:	4650      	mov	r0, sl
   32dc4:	4306      	orrs	r6, r0
   32dc6:	d062      	beq.n	32e8e <__aeabi_dsub+0x56a>
   32dc8:	43db      	mvns	r3, r3
   32dca:	2b00      	cmp	r3, #0
   32dcc:	d15c      	bne.n	32e88 <__aeabi_dsub+0x564>
   32dce:	1887      	adds	r7, r0, r2
   32dd0:	4297      	cmp	r7, r2
   32dd2:	4192      	sbcs	r2, r2
   32dd4:	1864      	adds	r4, r4, r1
   32dd6:	4252      	negs	r2, r2
   32dd8:	18a4      	adds	r4, r4, r2
   32dda:	4666      	mov	r6, ip
   32ddc:	e687      	b.n	32aee <__aeabi_dsub+0x1ca>
   32dde:	4650      	mov	r0, sl
   32de0:	4320      	orrs	r0, r4
   32de2:	1e44      	subs	r4, r0, #1
   32de4:	41a0      	sbcs	r0, r4
   32de6:	2400      	movs	r4, #0
   32de8:	e760      	b.n	32cac <__aeabi_dsub+0x388>
   32dea:	4e57      	ldr	r6, [pc, #348]	; (32f48 <__aeabi_dsub+0x624>)
   32dec:	45b4      	cmp	ip, r6
   32dee:	d04e      	beq.n	32e8e <__aeabi_dsub+0x56a>
   32df0:	2680      	movs	r6, #128	; 0x80
   32df2:	0436      	lsls	r6, r6, #16
   32df4:	425b      	negs	r3, r3
   32df6:	4334      	orrs	r4, r6
   32df8:	2b38      	cmp	r3, #56	; 0x38
   32dfa:	dd00      	ble.n	32dfe <__aeabi_dsub+0x4da>
   32dfc:	e07f      	b.n	32efe <__aeabi_dsub+0x5da>
   32dfe:	2b1f      	cmp	r3, #31
   32e00:	dd00      	ble.n	32e04 <__aeabi_dsub+0x4e0>
   32e02:	e08b      	b.n	32f1c <__aeabi_dsub+0x5f8>
   32e04:	2620      	movs	r6, #32
   32e06:	0027      	movs	r7, r4
   32e08:	4650      	mov	r0, sl
   32e0a:	1af6      	subs	r6, r6, r3
   32e0c:	40b7      	lsls	r7, r6
   32e0e:	40d8      	lsrs	r0, r3
   32e10:	4307      	orrs	r7, r0
   32e12:	4650      	mov	r0, sl
   32e14:	40b0      	lsls	r0, r6
   32e16:	1e46      	subs	r6, r0, #1
   32e18:	41b0      	sbcs	r0, r6
   32e1a:	4307      	orrs	r7, r0
   32e1c:	40dc      	lsrs	r4, r3
   32e1e:	18bf      	adds	r7, r7, r2
   32e20:	e7d6      	b.n	32dd0 <__aeabi_dsub+0x4ac>
   32e22:	000d      	movs	r5, r1
   32e24:	4315      	orrs	r5, r2
   32e26:	d100      	bne.n	32e2a <__aeabi_dsub+0x506>
   32e28:	e602      	b.n	32a30 <__aeabi_dsub+0x10c>
   32e2a:	4650      	mov	r0, sl
   32e2c:	1a80      	subs	r0, r0, r2
   32e2e:	4582      	cmp	sl, r0
   32e30:	41bf      	sbcs	r7, r7
   32e32:	1a65      	subs	r5, r4, r1
   32e34:	427f      	negs	r7, r7
   32e36:	1bed      	subs	r5, r5, r7
   32e38:	4684      	mov	ip, r0
   32e3a:	0228      	lsls	r0, r5, #8
   32e3c:	d400      	bmi.n	32e40 <__aeabi_dsub+0x51c>
   32e3e:	e68d      	b.n	32b5c <__aeabi_dsub+0x238>
   32e40:	4650      	mov	r0, sl
   32e42:	1a17      	subs	r7, r2, r0
   32e44:	42ba      	cmp	r2, r7
   32e46:	4192      	sbcs	r2, r2
   32e48:	1b0c      	subs	r4, r1, r4
   32e4a:	4252      	negs	r2, r2
   32e4c:	1aa4      	subs	r4, r4, r2
   32e4e:	4698      	mov	r8, r3
   32e50:	e5ee      	b.n	32a30 <__aeabi_dsub+0x10c>
   32e52:	000d      	movs	r5, r1
   32e54:	4315      	orrs	r5, r2
   32e56:	d100      	bne.n	32e5a <__aeabi_dsub+0x536>
   32e58:	e76b      	b.n	32d32 <__aeabi_dsub+0x40e>
   32e5a:	4650      	mov	r0, sl
   32e5c:	0767      	lsls	r7, r4, #29
   32e5e:	08c0      	lsrs	r0, r0, #3
   32e60:	4307      	orrs	r7, r0
   32e62:	2080      	movs	r0, #128	; 0x80
   32e64:	08e4      	lsrs	r4, r4, #3
   32e66:	0300      	lsls	r0, r0, #12
   32e68:	4204      	tst	r4, r0
   32e6a:	d007      	beq.n	32e7c <__aeabi_dsub+0x558>
   32e6c:	08cd      	lsrs	r5, r1, #3
   32e6e:	4205      	tst	r5, r0
   32e70:	d104      	bne.n	32e7c <__aeabi_dsub+0x558>
   32e72:	002c      	movs	r4, r5
   32e74:	4698      	mov	r8, r3
   32e76:	08d7      	lsrs	r7, r2, #3
   32e78:	0749      	lsls	r1, r1, #29
   32e7a:	430f      	orrs	r7, r1
   32e7c:	0f7b      	lsrs	r3, r7, #29
   32e7e:	00e4      	lsls	r4, r4, #3
   32e80:	431c      	orrs	r4, r3
   32e82:	00ff      	lsls	r7, r7, #3
   32e84:	4e30      	ldr	r6, [pc, #192]	; (32f48 <__aeabi_dsub+0x624>)
   32e86:	e5d3      	b.n	32a30 <__aeabi_dsub+0x10c>
   32e88:	4e2f      	ldr	r6, [pc, #188]	; (32f48 <__aeabi_dsub+0x624>)
   32e8a:	45b4      	cmp	ip, r6
   32e8c:	d1b4      	bne.n	32df8 <__aeabi_dsub+0x4d4>
   32e8e:	000c      	movs	r4, r1
   32e90:	0017      	movs	r7, r2
   32e92:	4666      	mov	r6, ip
   32e94:	e5cc      	b.n	32a30 <__aeabi_dsub+0x10c>
   32e96:	2700      	movs	r7, #0
   32e98:	2400      	movs	r4, #0
   32e9a:	e5e8      	b.n	32a6e <__aeabi_dsub+0x14a>
   32e9c:	2b00      	cmp	r3, #0
   32e9e:	d039      	beq.n	32f14 <__aeabi_dsub+0x5f0>
   32ea0:	000b      	movs	r3, r1
   32ea2:	4313      	orrs	r3, r2
   32ea4:	d100      	bne.n	32ea8 <__aeabi_dsub+0x584>
   32ea6:	e744      	b.n	32d32 <__aeabi_dsub+0x40e>
   32ea8:	08c0      	lsrs	r0, r0, #3
   32eaa:	0767      	lsls	r7, r4, #29
   32eac:	4307      	orrs	r7, r0
   32eae:	2080      	movs	r0, #128	; 0x80
   32eb0:	08e4      	lsrs	r4, r4, #3
   32eb2:	0300      	lsls	r0, r0, #12
   32eb4:	4204      	tst	r4, r0
   32eb6:	d0e1      	beq.n	32e7c <__aeabi_dsub+0x558>
   32eb8:	08cb      	lsrs	r3, r1, #3
   32eba:	4203      	tst	r3, r0
   32ebc:	d1de      	bne.n	32e7c <__aeabi_dsub+0x558>
   32ebe:	08d7      	lsrs	r7, r2, #3
   32ec0:	0749      	lsls	r1, r1, #29
   32ec2:	430f      	orrs	r7, r1
   32ec4:	001c      	movs	r4, r3
   32ec6:	e7d9      	b.n	32e7c <__aeabi_dsub+0x558>
   32ec8:	2100      	movs	r1, #0
   32eca:	e771      	b.n	32db0 <__aeabi_dsub+0x48c>
   32ecc:	2500      	movs	r5, #0
   32ece:	2700      	movs	r7, #0
   32ed0:	e5e9      	b.n	32aa6 <__aeabi_dsub+0x182>
   32ed2:	002e      	movs	r6, r5
   32ed4:	0027      	movs	r7, r4
   32ed6:	3e20      	subs	r6, #32
   32ed8:	40f7      	lsrs	r7, r6
   32eda:	2d20      	cmp	r5, #32
   32edc:	d02f      	beq.n	32f3e <__aeabi_dsub+0x61a>
   32ede:	2640      	movs	r6, #64	; 0x40
   32ee0:	1b75      	subs	r5, r6, r5
   32ee2:	40ac      	lsls	r4, r5
   32ee4:	4650      	mov	r0, sl
   32ee6:	4320      	orrs	r0, r4
   32ee8:	1e44      	subs	r4, r0, #1
   32eea:	41a0      	sbcs	r0, r4
   32eec:	2400      	movs	r4, #0
   32eee:	4338      	orrs	r0, r7
   32ef0:	e6dc      	b.n	32cac <__aeabi_dsub+0x388>
   32ef2:	2480      	movs	r4, #128	; 0x80
   32ef4:	2500      	movs	r5, #0
   32ef6:	0324      	lsls	r4, r4, #12
   32ef8:	4e13      	ldr	r6, [pc, #76]	; (32f48 <__aeabi_dsub+0x624>)
   32efa:	2700      	movs	r7, #0
   32efc:	e5d3      	b.n	32aa6 <__aeabi_dsub+0x182>
   32efe:	4650      	mov	r0, sl
   32f00:	4320      	orrs	r0, r4
   32f02:	0007      	movs	r7, r0
   32f04:	1e78      	subs	r0, r7, #1
   32f06:	4187      	sbcs	r7, r0
   32f08:	2400      	movs	r4, #0
   32f0a:	18bf      	adds	r7, r7, r2
   32f0c:	e760      	b.n	32dd0 <__aeabi_dsub+0x4ac>
   32f0e:	000c      	movs	r4, r1
   32f10:	0017      	movs	r7, r2
   32f12:	e58d      	b.n	32a30 <__aeabi_dsub+0x10c>
   32f14:	000c      	movs	r4, r1
   32f16:	0017      	movs	r7, r2
   32f18:	4e0b      	ldr	r6, [pc, #44]	; (32f48 <__aeabi_dsub+0x624>)
   32f1a:	e589      	b.n	32a30 <__aeabi_dsub+0x10c>
   32f1c:	001e      	movs	r6, r3
   32f1e:	0027      	movs	r7, r4
   32f20:	3e20      	subs	r6, #32
   32f22:	40f7      	lsrs	r7, r6
   32f24:	2b20      	cmp	r3, #32
   32f26:	d00c      	beq.n	32f42 <__aeabi_dsub+0x61e>
   32f28:	2640      	movs	r6, #64	; 0x40
   32f2a:	1af3      	subs	r3, r6, r3
   32f2c:	409c      	lsls	r4, r3
   32f2e:	4650      	mov	r0, sl
   32f30:	4320      	orrs	r0, r4
   32f32:	1e44      	subs	r4, r0, #1
   32f34:	41a0      	sbcs	r0, r4
   32f36:	4307      	orrs	r7, r0
   32f38:	2400      	movs	r4, #0
   32f3a:	18bf      	adds	r7, r7, r2
   32f3c:	e748      	b.n	32dd0 <__aeabi_dsub+0x4ac>
   32f3e:	2400      	movs	r4, #0
   32f40:	e7d0      	b.n	32ee4 <__aeabi_dsub+0x5c0>
   32f42:	2400      	movs	r4, #0
   32f44:	e7f3      	b.n	32f2e <__aeabi_dsub+0x60a>
   32f46:	46c0      	nop			; (mov r8, r8)
   32f48:	000007ff 	.word	0x000007ff
   32f4c:	ff7fffff 	.word	0xff7fffff

00032f50 <__aeabi_d2iz>:
   32f50:	b530      	push	{r4, r5, lr}
   32f52:	4d13      	ldr	r5, [pc, #76]	; (32fa0 <__aeabi_d2iz+0x50>)
   32f54:	030a      	lsls	r2, r1, #12
   32f56:	004b      	lsls	r3, r1, #1
   32f58:	0b12      	lsrs	r2, r2, #12
   32f5a:	0d5b      	lsrs	r3, r3, #21
   32f5c:	0fc9      	lsrs	r1, r1, #31
   32f5e:	2400      	movs	r4, #0
   32f60:	42ab      	cmp	r3, r5
   32f62:	dd10      	ble.n	32f86 <__aeabi_d2iz+0x36>
   32f64:	4c0f      	ldr	r4, [pc, #60]	; (32fa4 <__aeabi_d2iz+0x54>)
   32f66:	42a3      	cmp	r3, r4
   32f68:	dc0f      	bgt.n	32f8a <__aeabi_d2iz+0x3a>
   32f6a:	2480      	movs	r4, #128	; 0x80
   32f6c:	4d0e      	ldr	r5, [pc, #56]	; (32fa8 <__aeabi_d2iz+0x58>)
   32f6e:	0364      	lsls	r4, r4, #13
   32f70:	4322      	orrs	r2, r4
   32f72:	1aed      	subs	r5, r5, r3
   32f74:	2d1f      	cmp	r5, #31
   32f76:	dd0b      	ble.n	32f90 <__aeabi_d2iz+0x40>
   32f78:	480c      	ldr	r0, [pc, #48]	; (32fac <__aeabi_d2iz+0x5c>)
   32f7a:	1ac3      	subs	r3, r0, r3
   32f7c:	40da      	lsrs	r2, r3
   32f7e:	4254      	negs	r4, r2
   32f80:	2900      	cmp	r1, #0
   32f82:	d100      	bne.n	32f86 <__aeabi_d2iz+0x36>
   32f84:	0014      	movs	r4, r2
   32f86:	0020      	movs	r0, r4
   32f88:	bd30      	pop	{r4, r5, pc}
   32f8a:	4b09      	ldr	r3, [pc, #36]	; (32fb0 <__aeabi_d2iz+0x60>)
   32f8c:	18cc      	adds	r4, r1, r3
   32f8e:	e7fa      	b.n	32f86 <__aeabi_d2iz+0x36>
   32f90:	4c08      	ldr	r4, [pc, #32]	; (32fb4 <__aeabi_d2iz+0x64>)
   32f92:	40e8      	lsrs	r0, r5
   32f94:	46a4      	mov	ip, r4
   32f96:	4463      	add	r3, ip
   32f98:	409a      	lsls	r2, r3
   32f9a:	4302      	orrs	r2, r0
   32f9c:	e7ef      	b.n	32f7e <__aeabi_d2iz+0x2e>
   32f9e:	46c0      	nop			; (mov r8, r8)
   32fa0:	000003fe 	.word	0x000003fe
   32fa4:	0000041d 	.word	0x0000041d
   32fa8:	00000433 	.word	0x00000433
   32fac:	00000413 	.word	0x00000413
   32fb0:	7fffffff 	.word	0x7fffffff
   32fb4:	fffffbed 	.word	0xfffffbed

00032fb8 <__aeabi_ui2d>:
   32fb8:	b510      	push	{r4, lr}
   32fba:	1e04      	subs	r4, r0, #0
   32fbc:	d028      	beq.n	33010 <__aeabi_ui2d+0x58>
   32fbe:	f000 f833 	bl	33028 <__clzsi2>
   32fc2:	4b15      	ldr	r3, [pc, #84]	; (33018 <__aeabi_ui2d+0x60>)
   32fc4:	4a15      	ldr	r2, [pc, #84]	; (3301c <__aeabi_ui2d+0x64>)
   32fc6:	1a1b      	subs	r3, r3, r0
   32fc8:	1ad2      	subs	r2, r2, r3
   32fca:	2a1f      	cmp	r2, #31
   32fcc:	dd15      	ble.n	32ffa <__aeabi_ui2d+0x42>
   32fce:	4a14      	ldr	r2, [pc, #80]	; (33020 <__aeabi_ui2d+0x68>)
   32fd0:	1ad2      	subs	r2, r2, r3
   32fd2:	4094      	lsls	r4, r2
   32fd4:	2200      	movs	r2, #0
   32fd6:	0324      	lsls	r4, r4, #12
   32fd8:	055b      	lsls	r3, r3, #21
   32fda:	0b24      	lsrs	r4, r4, #12
   32fdc:	0d5b      	lsrs	r3, r3, #21
   32fde:	2100      	movs	r1, #0
   32fe0:	0010      	movs	r0, r2
   32fe2:	0324      	lsls	r4, r4, #12
   32fe4:	0d0a      	lsrs	r2, r1, #20
   32fe6:	0b24      	lsrs	r4, r4, #12
   32fe8:	0512      	lsls	r2, r2, #20
   32fea:	4322      	orrs	r2, r4
   32fec:	4c0d      	ldr	r4, [pc, #52]	; (33024 <__aeabi_ui2d+0x6c>)
   32fee:	051b      	lsls	r3, r3, #20
   32ff0:	4022      	ands	r2, r4
   32ff2:	4313      	orrs	r3, r2
   32ff4:	005b      	lsls	r3, r3, #1
   32ff6:	0859      	lsrs	r1, r3, #1
   32ff8:	bd10      	pop	{r4, pc}
   32ffa:	0021      	movs	r1, r4
   32ffc:	4091      	lsls	r1, r2
   32ffe:	000a      	movs	r2, r1
   33000:	210b      	movs	r1, #11
   33002:	1a08      	subs	r0, r1, r0
   33004:	40c4      	lsrs	r4, r0
   33006:	055b      	lsls	r3, r3, #21
   33008:	0324      	lsls	r4, r4, #12
   3300a:	0b24      	lsrs	r4, r4, #12
   3300c:	0d5b      	lsrs	r3, r3, #21
   3300e:	e7e6      	b.n	32fde <__aeabi_ui2d+0x26>
   33010:	2300      	movs	r3, #0
   33012:	2400      	movs	r4, #0
   33014:	2200      	movs	r2, #0
   33016:	e7e2      	b.n	32fde <__aeabi_ui2d+0x26>
   33018:	0000041e 	.word	0x0000041e
   3301c:	00000433 	.word	0x00000433
   33020:	00000413 	.word	0x00000413
   33024:	800fffff 	.word	0x800fffff

00033028 <__clzsi2>:
   33028:	211c      	movs	r1, #28
   3302a:	2301      	movs	r3, #1
   3302c:	041b      	lsls	r3, r3, #16
   3302e:	4298      	cmp	r0, r3
   33030:	d301      	bcc.n	33036 <__clzsi2+0xe>
   33032:	0c00      	lsrs	r0, r0, #16
   33034:	3910      	subs	r1, #16
   33036:	0a1b      	lsrs	r3, r3, #8
   33038:	4298      	cmp	r0, r3
   3303a:	d301      	bcc.n	33040 <__clzsi2+0x18>
   3303c:	0a00      	lsrs	r0, r0, #8
   3303e:	3908      	subs	r1, #8
   33040:	091b      	lsrs	r3, r3, #4
   33042:	4298      	cmp	r0, r3
   33044:	d301      	bcc.n	3304a <__clzsi2+0x22>
   33046:	0900      	lsrs	r0, r0, #4
   33048:	3904      	subs	r1, #4
   3304a:	a202      	add	r2, pc, #8	; (adr r2, 33054 <__clzsi2+0x2c>)
   3304c:	5c10      	ldrb	r0, [r2, r0]
   3304e:	1840      	adds	r0, r0, r1
   33050:	4770      	bx	lr
   33052:	46c0      	nop			; (mov r8, r8)
   33054:	02020304 	.word	0x02020304
   33058:	01010101 	.word	0x01010101
	...

00033064 <atoi>:
   33064:	b510      	push	{r4, lr}
   33066:	220a      	movs	r2, #10
   33068:	2100      	movs	r1, #0
   3306a:	f000 fb0d 	bl	33688 <strtol>
   3306e:	bd10      	pop	{r4, pc}

00033070 <__libc_init_array>:
   33070:	b570      	push	{r4, r5, r6, lr}
   33072:	2600      	movs	r6, #0
   33074:	4d0c      	ldr	r5, [pc, #48]	; (330a8 <__libc_init_array+0x38>)
   33076:	4c0d      	ldr	r4, [pc, #52]	; (330ac <__libc_init_array+0x3c>)
   33078:	1b64      	subs	r4, r4, r5
   3307a:	10a4      	asrs	r4, r4, #2
   3307c:	42a6      	cmp	r6, r4
   3307e:	d109      	bne.n	33094 <__libc_init_array+0x24>
   33080:	2600      	movs	r6, #0
   33082:	f005 faf5 	bl	38670 <_init>
   33086:	4d0a      	ldr	r5, [pc, #40]	; (330b0 <__libc_init_array+0x40>)
   33088:	4c0a      	ldr	r4, [pc, #40]	; (330b4 <__libc_init_array+0x44>)
   3308a:	1b64      	subs	r4, r4, r5
   3308c:	10a4      	asrs	r4, r4, #2
   3308e:	42a6      	cmp	r6, r4
   33090:	d105      	bne.n	3309e <__libc_init_array+0x2e>
   33092:	bd70      	pop	{r4, r5, r6, pc}
   33094:	00b3      	lsls	r3, r6, #2
   33096:	58eb      	ldr	r3, [r5, r3]
   33098:	4798      	blx	r3
   3309a:	3601      	adds	r6, #1
   3309c:	e7ee      	b.n	3307c <__libc_init_array+0xc>
   3309e:	00b3      	lsls	r3, r6, #2
   330a0:	58eb      	ldr	r3, [r5, r3]
   330a2:	4798      	blx	r3
   330a4:	3601      	adds	r6, #1
   330a6:	e7f2      	b.n	3308e <__libc_init_array+0x1e>
   330a8:	0003867c 	.word	0x0003867c
   330ac:	0003867c 	.word	0x0003867c
   330b0:	0003867c 	.word	0x0003867c
   330b4:	00038680 	.word	0x00038680

000330b8 <malloc>:
   330b8:	b510      	push	{r4, lr}
   330ba:	4b03      	ldr	r3, [pc, #12]	; (330c8 <malloc+0x10>)
   330bc:	0001      	movs	r1, r0
   330be:	6818      	ldr	r0, [r3, #0]
   330c0:	f000 f87c 	bl	331bc <_malloc_r>
   330c4:	bd10      	pop	{r4, pc}
   330c6:	46c0      	nop			; (mov r8, r8)
   330c8:	20000140 	.word	0x20000140

000330cc <free>:
   330cc:	b510      	push	{r4, lr}
   330ce:	4b03      	ldr	r3, [pc, #12]	; (330dc <free+0x10>)
   330d0:	0001      	movs	r1, r0
   330d2:	6818      	ldr	r0, [r3, #0]
   330d4:	f000 f828 	bl	33128 <_free_r>
   330d8:	bd10      	pop	{r4, pc}
   330da:	46c0      	nop			; (mov r8, r8)
   330dc:	20000140 	.word	0x20000140

000330e0 <memcpy>:
   330e0:	2300      	movs	r3, #0
   330e2:	b510      	push	{r4, lr}
   330e4:	429a      	cmp	r2, r3
   330e6:	d100      	bne.n	330ea <memcpy+0xa>
   330e8:	bd10      	pop	{r4, pc}
   330ea:	5ccc      	ldrb	r4, [r1, r3]
   330ec:	54c4      	strb	r4, [r0, r3]
   330ee:	3301      	adds	r3, #1
   330f0:	e7f8      	b.n	330e4 <memcpy+0x4>

000330f2 <memmove>:
   330f2:	b510      	push	{r4, lr}
   330f4:	4288      	cmp	r0, r1
   330f6:	d902      	bls.n	330fe <memmove+0xc>
   330f8:	188b      	adds	r3, r1, r2
   330fa:	4298      	cmp	r0, r3
   330fc:	d308      	bcc.n	33110 <memmove+0x1e>
   330fe:	2300      	movs	r3, #0
   33100:	429a      	cmp	r2, r3
   33102:	d007      	beq.n	33114 <memmove+0x22>
   33104:	5ccc      	ldrb	r4, [r1, r3]
   33106:	54c4      	strb	r4, [r0, r3]
   33108:	3301      	adds	r3, #1
   3310a:	e7f9      	b.n	33100 <memmove+0xe>
   3310c:	5c8b      	ldrb	r3, [r1, r2]
   3310e:	5483      	strb	r3, [r0, r2]
   33110:	3a01      	subs	r2, #1
   33112:	d2fb      	bcs.n	3310c <memmove+0x1a>
   33114:	bd10      	pop	{r4, pc}

00033116 <memset>:
   33116:	0003      	movs	r3, r0
   33118:	1882      	adds	r2, r0, r2
   3311a:	4293      	cmp	r3, r2
   3311c:	d100      	bne.n	33120 <memset+0xa>
   3311e:	4770      	bx	lr
   33120:	7019      	strb	r1, [r3, #0]
   33122:	3301      	adds	r3, #1
   33124:	e7f9      	b.n	3311a <memset+0x4>
	...

00033128 <_free_r>:
   33128:	b570      	push	{r4, r5, r6, lr}
   3312a:	0005      	movs	r5, r0
   3312c:	2900      	cmp	r1, #0
   3312e:	d010      	beq.n	33152 <_free_r+0x2a>
   33130:	1f0c      	subs	r4, r1, #4
   33132:	6823      	ldr	r3, [r4, #0]
   33134:	2b00      	cmp	r3, #0
   33136:	da00      	bge.n	3313a <_free_r+0x12>
   33138:	18e4      	adds	r4, r4, r3
   3313a:	0028      	movs	r0, r5
   3313c:	f000 fdd8 	bl	33cf0 <__malloc_lock>
   33140:	4a1d      	ldr	r2, [pc, #116]	; (331b8 <_free_r+0x90>)
   33142:	6813      	ldr	r3, [r2, #0]
   33144:	2b00      	cmp	r3, #0
   33146:	d105      	bne.n	33154 <_free_r+0x2c>
   33148:	6063      	str	r3, [r4, #4]
   3314a:	6014      	str	r4, [r2, #0]
   3314c:	0028      	movs	r0, r5
   3314e:	f000 fdd0 	bl	33cf2 <__malloc_unlock>
   33152:	bd70      	pop	{r4, r5, r6, pc}
   33154:	42a3      	cmp	r3, r4
   33156:	d909      	bls.n	3316c <_free_r+0x44>
   33158:	6821      	ldr	r1, [r4, #0]
   3315a:	1860      	adds	r0, r4, r1
   3315c:	4283      	cmp	r3, r0
   3315e:	d1f3      	bne.n	33148 <_free_r+0x20>
   33160:	6818      	ldr	r0, [r3, #0]
   33162:	685b      	ldr	r3, [r3, #4]
   33164:	1841      	adds	r1, r0, r1
   33166:	6021      	str	r1, [r4, #0]
   33168:	e7ee      	b.n	33148 <_free_r+0x20>
   3316a:	0013      	movs	r3, r2
   3316c:	685a      	ldr	r2, [r3, #4]
   3316e:	2a00      	cmp	r2, #0
   33170:	d001      	beq.n	33176 <_free_r+0x4e>
   33172:	42a2      	cmp	r2, r4
   33174:	d9f9      	bls.n	3316a <_free_r+0x42>
   33176:	6819      	ldr	r1, [r3, #0]
   33178:	1858      	adds	r0, r3, r1
   3317a:	42a0      	cmp	r0, r4
   3317c:	d10b      	bne.n	33196 <_free_r+0x6e>
   3317e:	6820      	ldr	r0, [r4, #0]
   33180:	1809      	adds	r1, r1, r0
   33182:	1858      	adds	r0, r3, r1
   33184:	6019      	str	r1, [r3, #0]
   33186:	4282      	cmp	r2, r0
   33188:	d1e0      	bne.n	3314c <_free_r+0x24>
   3318a:	6810      	ldr	r0, [r2, #0]
   3318c:	6852      	ldr	r2, [r2, #4]
   3318e:	1841      	adds	r1, r0, r1
   33190:	6019      	str	r1, [r3, #0]
   33192:	605a      	str	r2, [r3, #4]
   33194:	e7da      	b.n	3314c <_free_r+0x24>
   33196:	42a0      	cmp	r0, r4
   33198:	d902      	bls.n	331a0 <_free_r+0x78>
   3319a:	230c      	movs	r3, #12
   3319c:	602b      	str	r3, [r5, #0]
   3319e:	e7d5      	b.n	3314c <_free_r+0x24>
   331a0:	6821      	ldr	r1, [r4, #0]
   331a2:	1860      	adds	r0, r4, r1
   331a4:	4282      	cmp	r2, r0
   331a6:	d103      	bne.n	331b0 <_free_r+0x88>
   331a8:	6810      	ldr	r0, [r2, #0]
   331aa:	6852      	ldr	r2, [r2, #4]
   331ac:	1841      	adds	r1, r0, r1
   331ae:	6021      	str	r1, [r4, #0]
   331b0:	6062      	str	r2, [r4, #4]
   331b2:	605c      	str	r4, [r3, #4]
   331b4:	e7ca      	b.n	3314c <_free_r+0x24>
   331b6:	46c0      	nop			; (mov r8, r8)
   331b8:	200041bc 	.word	0x200041bc

000331bc <_malloc_r>:
   331bc:	2303      	movs	r3, #3
   331be:	b570      	push	{r4, r5, r6, lr}
   331c0:	1ccd      	adds	r5, r1, #3
   331c2:	439d      	bics	r5, r3
   331c4:	3508      	adds	r5, #8
   331c6:	0006      	movs	r6, r0
   331c8:	2d0c      	cmp	r5, #12
   331ca:	d21e      	bcs.n	3320a <_malloc_r+0x4e>
   331cc:	250c      	movs	r5, #12
   331ce:	42a9      	cmp	r1, r5
   331d0:	d81d      	bhi.n	3320e <_malloc_r+0x52>
   331d2:	0030      	movs	r0, r6
   331d4:	f000 fd8c 	bl	33cf0 <__malloc_lock>
   331d8:	4a25      	ldr	r2, [pc, #148]	; (33270 <_malloc_r+0xb4>)
   331da:	6814      	ldr	r4, [r2, #0]
   331dc:	0021      	movs	r1, r4
   331de:	2900      	cmp	r1, #0
   331e0:	d119      	bne.n	33216 <_malloc_r+0x5a>
   331e2:	4c24      	ldr	r4, [pc, #144]	; (33274 <_malloc_r+0xb8>)
   331e4:	6823      	ldr	r3, [r4, #0]
   331e6:	2b00      	cmp	r3, #0
   331e8:	d103      	bne.n	331f2 <_malloc_r+0x36>
   331ea:	0030      	movs	r0, r6
   331ec:	f000 f8ae 	bl	3334c <_sbrk_r>
   331f0:	6020      	str	r0, [r4, #0]
   331f2:	0029      	movs	r1, r5
   331f4:	0030      	movs	r0, r6
   331f6:	f000 f8a9 	bl	3334c <_sbrk_r>
   331fa:	1c43      	adds	r3, r0, #1
   331fc:	d12c      	bne.n	33258 <_malloc_r+0x9c>
   331fe:	230c      	movs	r3, #12
   33200:	0030      	movs	r0, r6
   33202:	6033      	str	r3, [r6, #0]
   33204:	f000 fd75 	bl	33cf2 <__malloc_unlock>
   33208:	e003      	b.n	33212 <_malloc_r+0x56>
   3320a:	2d00      	cmp	r5, #0
   3320c:	dadf      	bge.n	331ce <_malloc_r+0x12>
   3320e:	230c      	movs	r3, #12
   33210:	6033      	str	r3, [r6, #0]
   33212:	2000      	movs	r0, #0
   33214:	bd70      	pop	{r4, r5, r6, pc}
   33216:	680b      	ldr	r3, [r1, #0]
   33218:	1b5b      	subs	r3, r3, r5
   3321a:	d41a      	bmi.n	33252 <_malloc_r+0x96>
   3321c:	2b0b      	cmp	r3, #11
   3321e:	d903      	bls.n	33228 <_malloc_r+0x6c>
   33220:	600b      	str	r3, [r1, #0]
   33222:	18cc      	adds	r4, r1, r3
   33224:	6025      	str	r5, [r4, #0]
   33226:	e003      	b.n	33230 <_malloc_r+0x74>
   33228:	428c      	cmp	r4, r1
   3322a:	d10e      	bne.n	3324a <_malloc_r+0x8e>
   3322c:	6863      	ldr	r3, [r4, #4]
   3322e:	6013      	str	r3, [r2, #0]
   33230:	0030      	movs	r0, r6
   33232:	f000 fd5e 	bl	33cf2 <__malloc_unlock>
   33236:	0020      	movs	r0, r4
   33238:	2207      	movs	r2, #7
   3323a:	300b      	adds	r0, #11
   3323c:	1d23      	adds	r3, r4, #4
   3323e:	4390      	bics	r0, r2
   33240:	1ac3      	subs	r3, r0, r3
   33242:	d0e7      	beq.n	33214 <_malloc_r+0x58>
   33244:	425a      	negs	r2, r3
   33246:	50e2      	str	r2, [r4, r3]
   33248:	e7e4      	b.n	33214 <_malloc_r+0x58>
   3324a:	684b      	ldr	r3, [r1, #4]
   3324c:	6063      	str	r3, [r4, #4]
   3324e:	000c      	movs	r4, r1
   33250:	e7ee      	b.n	33230 <_malloc_r+0x74>
   33252:	000c      	movs	r4, r1
   33254:	6849      	ldr	r1, [r1, #4]
   33256:	e7c2      	b.n	331de <_malloc_r+0x22>
   33258:	2303      	movs	r3, #3
   3325a:	1cc4      	adds	r4, r0, #3
   3325c:	439c      	bics	r4, r3
   3325e:	42a0      	cmp	r0, r4
   33260:	d0e0      	beq.n	33224 <_malloc_r+0x68>
   33262:	1a21      	subs	r1, r4, r0
   33264:	0030      	movs	r0, r6
   33266:	f000 f871 	bl	3334c <_sbrk_r>
   3326a:	1c43      	adds	r3, r0, #1
   3326c:	d1da      	bne.n	33224 <_malloc_r+0x68>
   3326e:	e7c6      	b.n	331fe <_malloc_r+0x42>
   33270:	200041bc 	.word	0x200041bc
   33274:	200041c0 	.word	0x200041c0

00033278 <_puts_r>:
   33278:	b570      	push	{r4, r5, r6, lr}
   3327a:	0005      	movs	r5, r0
   3327c:	000e      	movs	r6, r1
   3327e:	2800      	cmp	r0, #0
   33280:	d004      	beq.n	3328c <_puts_r+0x14>
   33282:	6983      	ldr	r3, [r0, #24]
   33284:	2b00      	cmp	r3, #0
   33286:	d101      	bne.n	3328c <_puts_r+0x14>
   33288:	f000 fc0e 	bl	33aa8 <__sinit>
   3328c:	69ab      	ldr	r3, [r5, #24]
   3328e:	68ac      	ldr	r4, [r5, #8]
   33290:	2b00      	cmp	r3, #0
   33292:	d102      	bne.n	3329a <_puts_r+0x22>
   33294:	0028      	movs	r0, r5
   33296:	f000 fc07 	bl	33aa8 <__sinit>
   3329a:	4b24      	ldr	r3, [pc, #144]	; (3332c <_puts_r+0xb4>)
   3329c:	429c      	cmp	r4, r3
   3329e:	d10f      	bne.n	332c0 <_puts_r+0x48>
   332a0:	686c      	ldr	r4, [r5, #4]
   332a2:	89a3      	ldrh	r3, [r4, #12]
   332a4:	071b      	lsls	r3, r3, #28
   332a6:	d502      	bpl.n	332ae <_puts_r+0x36>
   332a8:	6923      	ldr	r3, [r4, #16]
   332aa:	2b00      	cmp	r3, #0
   332ac:	d120      	bne.n	332f0 <_puts_r+0x78>
   332ae:	0021      	movs	r1, r4
   332b0:	0028      	movs	r0, r5
   332b2:	f000 fa8b 	bl	337cc <__swsetup_r>
   332b6:	2800      	cmp	r0, #0
   332b8:	d01a      	beq.n	332f0 <_puts_r+0x78>
   332ba:	2001      	movs	r0, #1
   332bc:	4240      	negs	r0, r0
   332be:	bd70      	pop	{r4, r5, r6, pc}
   332c0:	4b1b      	ldr	r3, [pc, #108]	; (33330 <_puts_r+0xb8>)
   332c2:	429c      	cmp	r4, r3
   332c4:	d101      	bne.n	332ca <_puts_r+0x52>
   332c6:	68ac      	ldr	r4, [r5, #8]
   332c8:	e7eb      	b.n	332a2 <_puts_r+0x2a>
   332ca:	4b1a      	ldr	r3, [pc, #104]	; (33334 <_puts_r+0xbc>)
   332cc:	429c      	cmp	r4, r3
   332ce:	d1e8      	bne.n	332a2 <_puts_r+0x2a>
   332d0:	68ec      	ldr	r4, [r5, #12]
   332d2:	e7e6      	b.n	332a2 <_puts_r+0x2a>
   332d4:	3b01      	subs	r3, #1
   332d6:	3601      	adds	r6, #1
   332d8:	60a3      	str	r3, [r4, #8]
   332da:	2b00      	cmp	r3, #0
   332dc:	da04      	bge.n	332e8 <_puts_r+0x70>
   332de:	69a2      	ldr	r2, [r4, #24]
   332e0:	4293      	cmp	r3, r2
   332e2:	db16      	blt.n	33312 <_puts_r+0x9a>
   332e4:	290a      	cmp	r1, #10
   332e6:	d014      	beq.n	33312 <_puts_r+0x9a>
   332e8:	6823      	ldr	r3, [r4, #0]
   332ea:	1c5a      	adds	r2, r3, #1
   332ec:	6022      	str	r2, [r4, #0]
   332ee:	7019      	strb	r1, [r3, #0]
   332f0:	7831      	ldrb	r1, [r6, #0]
   332f2:	68a3      	ldr	r3, [r4, #8]
   332f4:	2900      	cmp	r1, #0
   332f6:	d1ed      	bne.n	332d4 <_puts_r+0x5c>
   332f8:	3b01      	subs	r3, #1
   332fa:	60a3      	str	r3, [r4, #8]
   332fc:	2b00      	cmp	r3, #0
   332fe:	da0f      	bge.n	33320 <_puts_r+0xa8>
   33300:	0022      	movs	r2, r4
   33302:	310a      	adds	r1, #10
   33304:	0028      	movs	r0, r5
   33306:	f000 fa0b 	bl	33720 <__swbuf_r>
   3330a:	1c43      	adds	r3, r0, #1
   3330c:	d0d5      	beq.n	332ba <_puts_r+0x42>
   3330e:	200a      	movs	r0, #10
   33310:	e7d5      	b.n	332be <_puts_r+0x46>
   33312:	0022      	movs	r2, r4
   33314:	0028      	movs	r0, r5
   33316:	f000 fa03 	bl	33720 <__swbuf_r>
   3331a:	1c43      	adds	r3, r0, #1
   3331c:	d1e8      	bne.n	332f0 <_puts_r+0x78>
   3331e:	e7cc      	b.n	332ba <_puts_r+0x42>
   33320:	200a      	movs	r0, #10
   33322:	6823      	ldr	r3, [r4, #0]
   33324:	1c5a      	adds	r2, r3, #1
   33326:	6022      	str	r2, [r4, #0]
   33328:	7018      	strb	r0, [r3, #0]
   3332a:	e7c8      	b.n	332be <_puts_r+0x46>
   3332c:	000384f0 	.word	0x000384f0
   33330:	00038510 	.word	0x00038510
   33334:	000384d0 	.word	0x000384d0

00033338 <puts>:
   33338:	b510      	push	{r4, lr}
   3333a:	4b03      	ldr	r3, [pc, #12]	; (33348 <puts+0x10>)
   3333c:	0001      	movs	r1, r0
   3333e:	6818      	ldr	r0, [r3, #0]
   33340:	f7ff ff9a 	bl	33278 <_puts_r>
   33344:	bd10      	pop	{r4, pc}
   33346:	46c0      	nop			; (mov r8, r8)
   33348:	20000140 	.word	0x20000140

0003334c <_sbrk_r>:
   3334c:	2300      	movs	r3, #0
   3334e:	b570      	push	{r4, r5, r6, lr}
   33350:	4c06      	ldr	r4, [pc, #24]	; (3336c <_sbrk_r+0x20>)
   33352:	0005      	movs	r5, r0
   33354:	0008      	movs	r0, r1
   33356:	6023      	str	r3, [r4, #0]
   33358:	f7f6 fb08 	bl	2996c <_sbrk>
   3335c:	1c43      	adds	r3, r0, #1
   3335e:	d103      	bne.n	33368 <_sbrk_r+0x1c>
   33360:	6823      	ldr	r3, [r4, #0]
   33362:	2b00      	cmp	r3, #0
   33364:	d000      	beq.n	33368 <_sbrk_r+0x1c>
   33366:	602b      	str	r3, [r5, #0]
   33368:	bd70      	pop	{r4, r5, r6, pc}
   3336a:	46c0      	nop			; (mov r8, r8)
   3336c:	20005730 	.word	0x20005730

00033370 <sniprintf>:
   33370:	b40c      	push	{r2, r3}
   33372:	b530      	push	{r4, r5, lr}
   33374:	4b16      	ldr	r3, [pc, #88]	; (333d0 <sniprintf+0x60>)
   33376:	b09d      	sub	sp, #116	; 0x74
   33378:	1e0c      	subs	r4, r1, #0
   3337a:	681d      	ldr	r5, [r3, #0]
   3337c:	da08      	bge.n	33390 <sniprintf+0x20>
   3337e:	238b      	movs	r3, #139	; 0x8b
   33380:	2001      	movs	r0, #1
   33382:	602b      	str	r3, [r5, #0]
   33384:	4240      	negs	r0, r0
   33386:	b01d      	add	sp, #116	; 0x74
   33388:	bc30      	pop	{r4, r5}
   3338a:	bc08      	pop	{r3}
   3338c:	b002      	add	sp, #8
   3338e:	4718      	bx	r3
   33390:	2382      	movs	r3, #130	; 0x82
   33392:	a902      	add	r1, sp, #8
   33394:	009b      	lsls	r3, r3, #2
   33396:	818b      	strh	r3, [r1, #12]
   33398:	2300      	movs	r3, #0
   3339a:	9002      	str	r0, [sp, #8]
   3339c:	6108      	str	r0, [r1, #16]
   3339e:	429c      	cmp	r4, r3
   333a0:	d000      	beq.n	333a4 <sniprintf+0x34>
   333a2:	1e63      	subs	r3, r4, #1
   333a4:	608b      	str	r3, [r1, #8]
   333a6:	614b      	str	r3, [r1, #20]
   333a8:	2301      	movs	r3, #1
   333aa:	425b      	negs	r3, r3
   333ac:	81cb      	strh	r3, [r1, #14]
   333ae:	9a20      	ldr	r2, [sp, #128]	; 0x80
   333b0:	ab21      	add	r3, sp, #132	; 0x84
   333b2:	0028      	movs	r0, r5
   333b4:	9301      	str	r3, [sp, #4]
   333b6:	f000 fcff 	bl	33db8 <_svfiprintf_r>
   333ba:	1c43      	adds	r3, r0, #1
   333bc:	da01      	bge.n	333c2 <sniprintf+0x52>
   333be:	238b      	movs	r3, #139	; 0x8b
   333c0:	602b      	str	r3, [r5, #0]
   333c2:	2c00      	cmp	r4, #0
   333c4:	d0df      	beq.n	33386 <sniprintf+0x16>
   333c6:	2300      	movs	r3, #0
   333c8:	9a02      	ldr	r2, [sp, #8]
   333ca:	7013      	strb	r3, [r2, #0]
   333cc:	e7db      	b.n	33386 <sniprintf+0x16>
   333ce:	46c0      	nop			; (mov r8, r8)
   333d0:	20000140 	.word	0x20000140

000333d4 <siprintf>:
   333d4:	b40e      	push	{r1, r2, r3}
   333d6:	b510      	push	{r4, lr}
   333d8:	b09d      	sub	sp, #116	; 0x74
   333da:	a902      	add	r1, sp, #8
   333dc:	9002      	str	r0, [sp, #8]
   333de:	6108      	str	r0, [r1, #16]
   333e0:	480b      	ldr	r0, [pc, #44]	; (33410 <siprintf+0x3c>)
   333e2:	2482      	movs	r4, #130	; 0x82
   333e4:	6088      	str	r0, [r1, #8]
   333e6:	6148      	str	r0, [r1, #20]
   333e8:	2001      	movs	r0, #1
   333ea:	4240      	negs	r0, r0
   333ec:	ab1f      	add	r3, sp, #124	; 0x7c
   333ee:	81c8      	strh	r0, [r1, #14]
   333f0:	4808      	ldr	r0, [pc, #32]	; (33414 <siprintf+0x40>)
   333f2:	cb04      	ldmia	r3!, {r2}
   333f4:	00a4      	lsls	r4, r4, #2
   333f6:	6800      	ldr	r0, [r0, #0]
   333f8:	9301      	str	r3, [sp, #4]
   333fa:	818c      	strh	r4, [r1, #12]
   333fc:	f000 fcdc 	bl	33db8 <_svfiprintf_r>
   33400:	2300      	movs	r3, #0
   33402:	9a02      	ldr	r2, [sp, #8]
   33404:	7013      	strb	r3, [r2, #0]
   33406:	b01d      	add	sp, #116	; 0x74
   33408:	bc10      	pop	{r4}
   3340a:	bc08      	pop	{r3}
   3340c:	b003      	add	sp, #12
   3340e:	4718      	bx	r3
   33410:	7fffffff 	.word	0x7fffffff
   33414:	20000140 	.word	0x20000140

00033418 <strcasecmp>:
   33418:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   3341a:	0007      	movs	r7, r0
   3341c:	000e      	movs	r6, r1
   3341e:	783c      	ldrb	r4, [r7, #0]
   33420:	f000 fbda 	bl	33bd8 <__locale_ctype_ptr>
   33424:	2203      	movs	r2, #3
   33426:	1900      	adds	r0, r0, r4
   33428:	7843      	ldrb	r3, [r0, #1]
   3342a:	4013      	ands	r3, r2
   3342c:	2b01      	cmp	r3, #1
   3342e:	d100      	bne.n	33432 <strcasecmp+0x1a>
   33430:	3420      	adds	r4, #32
   33432:	7835      	ldrb	r5, [r6, #0]
   33434:	f000 fbd0 	bl	33bd8 <__locale_ctype_ptr>
   33438:	2203      	movs	r2, #3
   3343a:	1940      	adds	r0, r0, r5
   3343c:	7843      	ldrb	r3, [r0, #1]
   3343e:	4013      	ands	r3, r2
   33440:	2b01      	cmp	r3, #1
   33442:	d100      	bne.n	33446 <strcasecmp+0x2e>
   33444:	3520      	adds	r5, #32
   33446:	1b60      	subs	r0, r4, r5
   33448:	d103      	bne.n	33452 <strcasecmp+0x3a>
   3344a:	3701      	adds	r7, #1
   3344c:	3601      	adds	r6, #1
   3344e:	2d00      	cmp	r5, #0
   33450:	d1e5      	bne.n	3341e <strcasecmp+0x6>
   33452:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00033454 <strcat>:
   33454:	0002      	movs	r2, r0
   33456:	b510      	push	{r4, lr}
   33458:	7813      	ldrb	r3, [r2, #0]
   3345a:	2b00      	cmp	r3, #0
   3345c:	d105      	bne.n	3346a <strcat+0x16>
   3345e:	5ccc      	ldrb	r4, [r1, r3]
   33460:	54d4      	strb	r4, [r2, r3]
   33462:	3301      	adds	r3, #1
   33464:	2c00      	cmp	r4, #0
   33466:	d1fa      	bne.n	3345e <strcat+0xa>
   33468:	bd10      	pop	{r4, pc}
   3346a:	3201      	adds	r2, #1
   3346c:	e7f4      	b.n	33458 <strcat+0x4>

0003346e <strcmp>:
   3346e:	7802      	ldrb	r2, [r0, #0]
   33470:	780b      	ldrb	r3, [r1, #0]
   33472:	2a00      	cmp	r2, #0
   33474:	d003      	beq.n	3347e <strcmp+0x10>
   33476:	3001      	adds	r0, #1
   33478:	3101      	adds	r1, #1
   3347a:	429a      	cmp	r2, r3
   3347c:	d0f7      	beq.n	3346e <strcmp>
   3347e:	1ad0      	subs	r0, r2, r3
   33480:	4770      	bx	lr

00033482 <strcpy>:
   33482:	1c03      	adds	r3, r0, #0
   33484:	780a      	ldrb	r2, [r1, #0]
   33486:	3101      	adds	r1, #1
   33488:	701a      	strb	r2, [r3, #0]
   3348a:	3301      	adds	r3, #1
   3348c:	2a00      	cmp	r2, #0
   3348e:	d1f9      	bne.n	33484 <strcpy+0x2>
   33490:	4770      	bx	lr
	...

00033494 <strdup>:
   33494:	b510      	push	{r4, lr}
   33496:	4b03      	ldr	r3, [pc, #12]	; (334a4 <strdup+0x10>)
   33498:	0001      	movs	r1, r0
   3349a:	6818      	ldr	r0, [r3, #0]
   3349c:	f000 f804 	bl	334a8 <_strdup_r>
   334a0:	bd10      	pop	{r4, pc}
   334a2:	46c0      	nop			; (mov r8, r8)
   334a4:	20000140 	.word	0x20000140

000334a8 <_strdup_r>:
   334a8:	b570      	push	{r4, r5, r6, lr}
   334aa:	0005      	movs	r5, r0
   334ac:	0008      	movs	r0, r1
   334ae:	000e      	movs	r6, r1
   334b0:	f000 f80d 	bl	334ce <strlen>
   334b4:	1c44      	adds	r4, r0, #1
   334b6:	0021      	movs	r1, r4
   334b8:	0028      	movs	r0, r5
   334ba:	f7ff fe7f 	bl	331bc <_malloc_r>
   334be:	1e05      	subs	r5, r0, #0
   334c0:	d003      	beq.n	334ca <_strdup_r+0x22>
   334c2:	0022      	movs	r2, r4
   334c4:	0031      	movs	r1, r6
   334c6:	f7ff fe0b 	bl	330e0 <memcpy>
   334ca:	0028      	movs	r0, r5
   334cc:	bd70      	pop	{r4, r5, r6, pc}

000334ce <strlen>:
   334ce:	2300      	movs	r3, #0
   334d0:	5cc2      	ldrb	r2, [r0, r3]
   334d2:	3301      	adds	r3, #1
   334d4:	2a00      	cmp	r2, #0
   334d6:	d1fb      	bne.n	334d0 <strlen+0x2>
   334d8:	1e58      	subs	r0, r3, #1
   334da:	4770      	bx	lr

000334dc <strncmp>:
   334dc:	2300      	movs	r3, #0
   334de:	b530      	push	{r4, r5, lr}
   334e0:	429a      	cmp	r2, r3
   334e2:	d00a      	beq.n	334fa <strncmp+0x1e>
   334e4:	3a01      	subs	r2, #1
   334e6:	5cc4      	ldrb	r4, [r0, r3]
   334e8:	5ccd      	ldrb	r5, [r1, r3]
   334ea:	42ac      	cmp	r4, r5
   334ec:	d104      	bne.n	334f8 <strncmp+0x1c>
   334ee:	429a      	cmp	r2, r3
   334f0:	d002      	beq.n	334f8 <strncmp+0x1c>
   334f2:	3301      	adds	r3, #1
   334f4:	2c00      	cmp	r4, #0
   334f6:	d1f6      	bne.n	334e6 <strncmp+0xa>
   334f8:	1b63      	subs	r3, r4, r5
   334fa:	0018      	movs	r0, r3
   334fc:	bd30      	pop	{r4, r5, pc}

000334fe <strncpy>:
   334fe:	b570      	push	{r4, r5, r6, lr}
   33500:	0004      	movs	r4, r0
   33502:	2a00      	cmp	r2, #0
   33504:	d100      	bne.n	33508 <strncpy+0xa>
   33506:	bd70      	pop	{r4, r5, r6, pc}
   33508:	780d      	ldrb	r5, [r1, #0]
   3350a:	1e56      	subs	r6, r2, #1
   3350c:	1c63      	adds	r3, r4, #1
   3350e:	7025      	strb	r5, [r4, #0]
   33510:	3101      	adds	r1, #1
   33512:	2d00      	cmp	r5, #0
   33514:	d105      	bne.n	33522 <strncpy+0x24>
   33516:	18a4      	adds	r4, r4, r2
   33518:	429c      	cmp	r4, r3
   3351a:	d0f4      	beq.n	33506 <strncpy+0x8>
   3351c:	701d      	strb	r5, [r3, #0]
   3351e:	3301      	adds	r3, #1
   33520:	e7fa      	b.n	33518 <strncpy+0x1a>
   33522:	001c      	movs	r4, r3
   33524:	0032      	movs	r2, r6
   33526:	e7ec      	b.n	33502 <strncpy+0x4>

00033528 <strrchr>:
   33528:	b570      	push	{r4, r5, r6, lr}
   3352a:	000d      	movs	r5, r1
   3352c:	2400      	movs	r4, #0
   3352e:	2900      	cmp	r1, #0
   33530:	d105      	bne.n	3353e <strrchr+0x16>
   33532:	f000 ff19 	bl	34368 <strchr>
   33536:	0004      	movs	r4, r0
   33538:	e006      	b.n	33548 <strrchr+0x20>
   3353a:	001c      	movs	r4, r3
   3353c:	1c58      	adds	r0, r3, #1
   3353e:	0029      	movs	r1, r5
   33540:	f000 ff12 	bl	34368 <strchr>
   33544:	1e03      	subs	r3, r0, #0
   33546:	d1f8      	bne.n	3353a <strrchr+0x12>
   33548:	0020      	movs	r0, r4
   3354a:	bd70      	pop	{r4, r5, r6, pc}

0003354c <strstr>:
   3354c:	b510      	push	{r4, lr}
   3354e:	0002      	movs	r2, r0
   33550:	7800      	ldrb	r0, [r0, #0]
   33552:	2800      	cmp	r0, #0
   33554:	d104      	bne.n	33560 <strstr+0x14>
   33556:	7809      	ldrb	r1, [r1, #0]
   33558:	2900      	cmp	r1, #0
   3355a:	d00d      	beq.n	33578 <strstr+0x2c>
   3355c:	bd10      	pop	{r4, pc}
   3355e:	3201      	adds	r2, #1
   33560:	7810      	ldrb	r0, [r2, #0]
   33562:	2800      	cmp	r0, #0
   33564:	d0fa      	beq.n	3355c <strstr+0x10>
   33566:	2300      	movs	r3, #0
   33568:	5cc8      	ldrb	r0, [r1, r3]
   3356a:	2800      	cmp	r0, #0
   3356c:	d004      	beq.n	33578 <strstr+0x2c>
   3356e:	5cd4      	ldrb	r4, [r2, r3]
   33570:	4284      	cmp	r4, r0
   33572:	d1f4      	bne.n	3355e <strstr+0x12>
   33574:	3301      	adds	r3, #1
   33576:	e7f7      	b.n	33568 <strstr+0x1c>
   33578:	0010      	movs	r0, r2
   3357a:	e7ef      	b.n	3355c <strstr+0x10>

0003357c <_strtol_l.isra.0>:
   3357c:	b5f0      	push	{r4, r5, r6, r7, lr}
   3357e:	001f      	movs	r7, r3
   33580:	000e      	movs	r6, r1
   33582:	b087      	sub	sp, #28
   33584:	9005      	str	r0, [sp, #20]
   33586:	9103      	str	r1, [sp, #12]
   33588:	9202      	str	r2, [sp, #8]
   3358a:	980c      	ldr	r0, [sp, #48]	; 0x30
   3358c:	7834      	ldrb	r4, [r6, #0]
   3358e:	f000 fb20 	bl	33bd2 <__locale_ctype_ptr_l>
   33592:	2208      	movs	r2, #8
   33594:	1900      	adds	r0, r0, r4
   33596:	7843      	ldrb	r3, [r0, #1]
   33598:	1c75      	adds	r5, r6, #1
   3359a:	4013      	ands	r3, r2
   3359c:	d10c      	bne.n	335b8 <_strtol_l.isra.0+0x3c>
   3359e:	2c2d      	cmp	r4, #45	; 0x2d
   335a0:	d10c      	bne.n	335bc <_strtol_l.isra.0+0x40>
   335a2:	3301      	adds	r3, #1
   335a4:	782c      	ldrb	r4, [r5, #0]
   335a6:	9301      	str	r3, [sp, #4]
   335a8:	1cb5      	adds	r5, r6, #2
   335aa:	2f00      	cmp	r7, #0
   335ac:	d00c      	beq.n	335c8 <_strtol_l.isra.0+0x4c>
   335ae:	2f10      	cmp	r7, #16
   335b0:	d114      	bne.n	335dc <_strtol_l.isra.0+0x60>
   335b2:	2c30      	cmp	r4, #48	; 0x30
   335b4:	d00a      	beq.n	335cc <_strtol_l.isra.0+0x50>
   335b6:	e011      	b.n	335dc <_strtol_l.isra.0+0x60>
   335b8:	002e      	movs	r6, r5
   335ba:	e7e6      	b.n	3358a <_strtol_l.isra.0+0xe>
   335bc:	9301      	str	r3, [sp, #4]
   335be:	2c2b      	cmp	r4, #43	; 0x2b
   335c0:	d1f3      	bne.n	335aa <_strtol_l.isra.0+0x2e>
   335c2:	782c      	ldrb	r4, [r5, #0]
   335c4:	1cb5      	adds	r5, r6, #2
   335c6:	e7f0      	b.n	335aa <_strtol_l.isra.0+0x2e>
   335c8:	2c30      	cmp	r4, #48	; 0x30
   335ca:	d12f      	bne.n	3362c <_strtol_l.isra.0+0xb0>
   335cc:	2220      	movs	r2, #32
   335ce:	782b      	ldrb	r3, [r5, #0]
   335d0:	4393      	bics	r3, r2
   335d2:	2b58      	cmp	r3, #88	; 0x58
   335d4:	d151      	bne.n	3367a <_strtol_l.isra.0+0xfe>
   335d6:	2710      	movs	r7, #16
   335d8:	786c      	ldrb	r4, [r5, #1]
   335da:	3502      	adds	r5, #2
   335dc:	9b01      	ldr	r3, [sp, #4]
   335de:	4a29      	ldr	r2, [pc, #164]	; (33684 <_strtol_l.isra.0+0x108>)
   335e0:	0039      	movs	r1, r7
   335e2:	189e      	adds	r6, r3, r2
   335e4:	0030      	movs	r0, r6
   335e6:	f7fd fe07 	bl	311f8 <__aeabi_uidivmod>
   335ea:	0030      	movs	r0, r6
   335ec:	9104      	str	r1, [sp, #16]
   335ee:	0039      	movs	r1, r7
   335f0:	f7fd fd7c 	bl	310ec <__udivsi3>
   335f4:	2101      	movs	r1, #1
   335f6:	2300      	movs	r3, #0
   335f8:	4249      	negs	r1, r1
   335fa:	0002      	movs	r2, r0
   335fc:	468c      	mov	ip, r1
   335fe:	0018      	movs	r0, r3
   33600:	0021      	movs	r1, r4
   33602:	3930      	subs	r1, #48	; 0x30
   33604:	2909      	cmp	r1, #9
   33606:	d813      	bhi.n	33630 <_strtol_l.isra.0+0xb4>
   33608:	000c      	movs	r4, r1
   3360a:	42a7      	cmp	r7, r4
   3360c:	dd1c      	ble.n	33648 <_strtol_l.isra.0+0xcc>
   3360e:	1c59      	adds	r1, r3, #1
   33610:	d009      	beq.n	33626 <_strtol_l.isra.0+0xaa>
   33612:	4663      	mov	r3, ip
   33614:	4282      	cmp	r2, r0
   33616:	d306      	bcc.n	33626 <_strtol_l.isra.0+0xaa>
   33618:	d102      	bne.n	33620 <_strtol_l.isra.0+0xa4>
   3361a:	9904      	ldr	r1, [sp, #16]
   3361c:	42a1      	cmp	r1, r4
   3361e:	db02      	blt.n	33626 <_strtol_l.isra.0+0xaa>
   33620:	2301      	movs	r3, #1
   33622:	4378      	muls	r0, r7
   33624:	1820      	adds	r0, r4, r0
   33626:	782c      	ldrb	r4, [r5, #0]
   33628:	3501      	adds	r5, #1
   3362a:	e7e9      	b.n	33600 <_strtol_l.isra.0+0x84>
   3362c:	270a      	movs	r7, #10
   3362e:	e7d5      	b.n	335dc <_strtol_l.isra.0+0x60>
   33630:	0021      	movs	r1, r4
   33632:	3941      	subs	r1, #65	; 0x41
   33634:	2919      	cmp	r1, #25
   33636:	d801      	bhi.n	3363c <_strtol_l.isra.0+0xc0>
   33638:	3c37      	subs	r4, #55	; 0x37
   3363a:	e7e6      	b.n	3360a <_strtol_l.isra.0+0x8e>
   3363c:	0021      	movs	r1, r4
   3363e:	3961      	subs	r1, #97	; 0x61
   33640:	2919      	cmp	r1, #25
   33642:	d801      	bhi.n	33648 <_strtol_l.isra.0+0xcc>
   33644:	3c57      	subs	r4, #87	; 0x57
   33646:	e7e0      	b.n	3360a <_strtol_l.isra.0+0x8e>
   33648:	1c5a      	adds	r2, r3, #1
   3364a:	d108      	bne.n	3365e <_strtol_l.isra.0+0xe2>
   3364c:	9a05      	ldr	r2, [sp, #20]
   3364e:	3323      	adds	r3, #35	; 0x23
   33650:	6013      	str	r3, [r2, #0]
   33652:	9b02      	ldr	r3, [sp, #8]
   33654:	0030      	movs	r0, r6
   33656:	2b00      	cmp	r3, #0
   33658:	d10b      	bne.n	33672 <_strtol_l.isra.0+0xf6>
   3365a:	b007      	add	sp, #28
   3365c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   3365e:	9a01      	ldr	r2, [sp, #4]
   33660:	2a00      	cmp	r2, #0
   33662:	d000      	beq.n	33666 <_strtol_l.isra.0+0xea>
   33664:	4240      	negs	r0, r0
   33666:	9a02      	ldr	r2, [sp, #8]
   33668:	2a00      	cmp	r2, #0
   3366a:	d0f6      	beq.n	3365a <_strtol_l.isra.0+0xde>
   3366c:	9a03      	ldr	r2, [sp, #12]
   3366e:	2b00      	cmp	r3, #0
   33670:	d000      	beq.n	33674 <_strtol_l.isra.0+0xf8>
   33672:	1e6a      	subs	r2, r5, #1
   33674:	9b02      	ldr	r3, [sp, #8]
   33676:	601a      	str	r2, [r3, #0]
   33678:	e7ef      	b.n	3365a <_strtol_l.isra.0+0xde>
   3367a:	2430      	movs	r4, #48	; 0x30
   3367c:	2f00      	cmp	r7, #0
   3367e:	d1ad      	bne.n	335dc <_strtol_l.isra.0+0x60>
   33680:	3708      	adds	r7, #8
   33682:	e7ab      	b.n	335dc <_strtol_l.isra.0+0x60>
   33684:	7fffffff 	.word	0x7fffffff

00033688 <strtol>:
   33688:	b537      	push	{r0, r1, r2, r4, r5, lr}
   3368a:	0013      	movs	r3, r2
   3368c:	4a06      	ldr	r2, [pc, #24]	; (336a8 <strtol+0x20>)
   3368e:	0005      	movs	r5, r0
   33690:	6810      	ldr	r0, [r2, #0]
   33692:	6a04      	ldr	r4, [r0, #32]
   33694:	2c00      	cmp	r4, #0
   33696:	d100      	bne.n	3369a <strtol+0x12>
   33698:	4c04      	ldr	r4, [pc, #16]	; (336ac <strtol+0x24>)
   3369a:	000a      	movs	r2, r1
   3369c:	9400      	str	r4, [sp, #0]
   3369e:	0029      	movs	r1, r5
   336a0:	f7ff ff6c 	bl	3357c <_strtol_l.isra.0>
   336a4:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
   336a6:	46c0      	nop			; (mov r8, r8)
   336a8:	20000140 	.word	0x20000140
   336ac:	200001a4 	.word	0x200001a4

000336b0 <_vsniprintf_r>:
   336b0:	b530      	push	{r4, r5, lr}
   336b2:	0014      	movs	r4, r2
   336b4:	b09b      	sub	sp, #108	; 0x6c
   336b6:	0005      	movs	r5, r0
   336b8:	001a      	movs	r2, r3
   336ba:	2c00      	cmp	r4, #0
   336bc:	da05      	bge.n	336ca <_vsniprintf_r+0x1a>
   336be:	238b      	movs	r3, #139	; 0x8b
   336c0:	6003      	str	r3, [r0, #0]
   336c2:	2001      	movs	r0, #1
   336c4:	4240      	negs	r0, r0
   336c6:	b01b      	add	sp, #108	; 0x6c
   336c8:	bd30      	pop	{r4, r5, pc}
   336ca:	2382      	movs	r3, #130	; 0x82
   336cc:	4668      	mov	r0, sp
   336ce:	009b      	lsls	r3, r3, #2
   336d0:	8183      	strh	r3, [r0, #12]
   336d2:	2300      	movs	r3, #0
   336d4:	9100      	str	r1, [sp, #0]
   336d6:	9104      	str	r1, [sp, #16]
   336d8:	429c      	cmp	r4, r3
   336da:	d000      	beq.n	336de <_vsniprintf_r+0x2e>
   336dc:	1e63      	subs	r3, r4, #1
   336de:	9302      	str	r3, [sp, #8]
   336e0:	9305      	str	r3, [sp, #20]
   336e2:	2301      	movs	r3, #1
   336e4:	4669      	mov	r1, sp
   336e6:	425b      	negs	r3, r3
   336e8:	81cb      	strh	r3, [r1, #14]
   336ea:	0028      	movs	r0, r5
   336ec:	9b1e      	ldr	r3, [sp, #120]	; 0x78
   336ee:	f000 fb63 	bl	33db8 <_svfiprintf_r>
   336f2:	1c43      	adds	r3, r0, #1
   336f4:	da01      	bge.n	336fa <_vsniprintf_r+0x4a>
   336f6:	238b      	movs	r3, #139	; 0x8b
   336f8:	602b      	str	r3, [r5, #0]
   336fa:	2c00      	cmp	r4, #0
   336fc:	d0e3      	beq.n	336c6 <_vsniprintf_r+0x16>
   336fe:	2300      	movs	r3, #0
   33700:	9a00      	ldr	r2, [sp, #0]
   33702:	7013      	strb	r3, [r2, #0]
   33704:	e7df      	b.n	336c6 <_vsniprintf_r+0x16>
	...

00033708 <vsniprintf>:
   33708:	b507      	push	{r0, r1, r2, lr}
   3370a:	9300      	str	r3, [sp, #0]
   3370c:	0013      	movs	r3, r2
   3370e:	000a      	movs	r2, r1
   33710:	0001      	movs	r1, r0
   33712:	4802      	ldr	r0, [pc, #8]	; (3371c <vsniprintf+0x14>)
   33714:	6800      	ldr	r0, [r0, #0]
   33716:	f7ff ffcb 	bl	336b0 <_vsniprintf_r>
   3371a:	bd0e      	pop	{r1, r2, r3, pc}
   3371c:	20000140 	.word	0x20000140

00033720 <__swbuf_r>:
   33720:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   33722:	0005      	movs	r5, r0
   33724:	000e      	movs	r6, r1
   33726:	0014      	movs	r4, r2
   33728:	2800      	cmp	r0, #0
   3372a:	d004      	beq.n	33736 <__swbuf_r+0x16>
   3372c:	6983      	ldr	r3, [r0, #24]
   3372e:	2b00      	cmp	r3, #0
   33730:	d101      	bne.n	33736 <__swbuf_r+0x16>
   33732:	f000 f9b9 	bl	33aa8 <__sinit>
   33736:	4b22      	ldr	r3, [pc, #136]	; (337c0 <__swbuf_r+0xa0>)
   33738:	429c      	cmp	r4, r3
   3373a:	d12d      	bne.n	33798 <__swbuf_r+0x78>
   3373c:	686c      	ldr	r4, [r5, #4]
   3373e:	69a3      	ldr	r3, [r4, #24]
   33740:	60a3      	str	r3, [r4, #8]
   33742:	89a3      	ldrh	r3, [r4, #12]
   33744:	071b      	lsls	r3, r3, #28
   33746:	d531      	bpl.n	337ac <__swbuf_r+0x8c>
   33748:	6923      	ldr	r3, [r4, #16]
   3374a:	2b00      	cmp	r3, #0
   3374c:	d02e      	beq.n	337ac <__swbuf_r+0x8c>
   3374e:	6823      	ldr	r3, [r4, #0]
   33750:	6922      	ldr	r2, [r4, #16]
   33752:	b2f7      	uxtb	r7, r6
   33754:	1a98      	subs	r0, r3, r2
   33756:	6963      	ldr	r3, [r4, #20]
   33758:	b2f6      	uxtb	r6, r6
   3375a:	4298      	cmp	r0, r3
   3375c:	db05      	blt.n	3376a <__swbuf_r+0x4a>
   3375e:	0021      	movs	r1, r4
   33760:	0028      	movs	r0, r5
   33762:	f000 f933 	bl	339cc <_fflush_r>
   33766:	2800      	cmp	r0, #0
   33768:	d126      	bne.n	337b8 <__swbuf_r+0x98>
   3376a:	68a3      	ldr	r3, [r4, #8]
   3376c:	3001      	adds	r0, #1
   3376e:	3b01      	subs	r3, #1
   33770:	60a3      	str	r3, [r4, #8]
   33772:	6823      	ldr	r3, [r4, #0]
   33774:	1c5a      	adds	r2, r3, #1
   33776:	6022      	str	r2, [r4, #0]
   33778:	701f      	strb	r7, [r3, #0]
   3377a:	6963      	ldr	r3, [r4, #20]
   3377c:	4298      	cmp	r0, r3
   3377e:	d004      	beq.n	3378a <__swbuf_r+0x6a>
   33780:	89a3      	ldrh	r3, [r4, #12]
   33782:	07db      	lsls	r3, r3, #31
   33784:	d51a      	bpl.n	337bc <__swbuf_r+0x9c>
   33786:	2e0a      	cmp	r6, #10
   33788:	d118      	bne.n	337bc <__swbuf_r+0x9c>
   3378a:	0021      	movs	r1, r4
   3378c:	0028      	movs	r0, r5
   3378e:	f000 f91d 	bl	339cc <_fflush_r>
   33792:	2800      	cmp	r0, #0
   33794:	d012      	beq.n	337bc <__swbuf_r+0x9c>
   33796:	e00f      	b.n	337b8 <__swbuf_r+0x98>
   33798:	4b0a      	ldr	r3, [pc, #40]	; (337c4 <__swbuf_r+0xa4>)
   3379a:	429c      	cmp	r4, r3
   3379c:	d101      	bne.n	337a2 <__swbuf_r+0x82>
   3379e:	68ac      	ldr	r4, [r5, #8]
   337a0:	e7cd      	b.n	3373e <__swbuf_r+0x1e>
   337a2:	4b09      	ldr	r3, [pc, #36]	; (337c8 <__swbuf_r+0xa8>)
   337a4:	429c      	cmp	r4, r3
   337a6:	d1ca      	bne.n	3373e <__swbuf_r+0x1e>
   337a8:	68ec      	ldr	r4, [r5, #12]
   337aa:	e7c8      	b.n	3373e <__swbuf_r+0x1e>
   337ac:	0021      	movs	r1, r4
   337ae:	0028      	movs	r0, r5
   337b0:	f000 f80c 	bl	337cc <__swsetup_r>
   337b4:	2800      	cmp	r0, #0
   337b6:	d0ca      	beq.n	3374e <__swbuf_r+0x2e>
   337b8:	2601      	movs	r6, #1
   337ba:	4276      	negs	r6, r6
   337bc:	0030      	movs	r0, r6
   337be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   337c0:	000384f0 	.word	0x000384f0
   337c4:	00038510 	.word	0x00038510
   337c8:	000384d0 	.word	0x000384d0

000337cc <__swsetup_r>:
   337cc:	4b36      	ldr	r3, [pc, #216]	; (338a8 <__swsetup_r+0xdc>)
   337ce:	b570      	push	{r4, r5, r6, lr}
   337d0:	681d      	ldr	r5, [r3, #0]
   337d2:	0006      	movs	r6, r0
   337d4:	000c      	movs	r4, r1
   337d6:	2d00      	cmp	r5, #0
   337d8:	d005      	beq.n	337e6 <__swsetup_r+0x1a>
   337da:	69ab      	ldr	r3, [r5, #24]
   337dc:	2b00      	cmp	r3, #0
   337de:	d102      	bne.n	337e6 <__swsetup_r+0x1a>
   337e0:	0028      	movs	r0, r5
   337e2:	f000 f961 	bl	33aa8 <__sinit>
   337e6:	4b31      	ldr	r3, [pc, #196]	; (338ac <__swsetup_r+0xe0>)
   337e8:	429c      	cmp	r4, r3
   337ea:	d10f      	bne.n	3380c <__swsetup_r+0x40>
   337ec:	686c      	ldr	r4, [r5, #4]
   337ee:	230c      	movs	r3, #12
   337f0:	5ee2      	ldrsh	r2, [r4, r3]
   337f2:	b293      	uxth	r3, r2
   337f4:	0719      	lsls	r1, r3, #28
   337f6:	d42d      	bmi.n	33854 <__swsetup_r+0x88>
   337f8:	06d9      	lsls	r1, r3, #27
   337fa:	d411      	bmi.n	33820 <__swsetup_r+0x54>
   337fc:	2309      	movs	r3, #9
   337fe:	2001      	movs	r0, #1
   33800:	6033      	str	r3, [r6, #0]
   33802:	3337      	adds	r3, #55	; 0x37
   33804:	4313      	orrs	r3, r2
   33806:	81a3      	strh	r3, [r4, #12]
   33808:	4240      	negs	r0, r0
   3380a:	bd70      	pop	{r4, r5, r6, pc}
   3380c:	4b28      	ldr	r3, [pc, #160]	; (338b0 <__swsetup_r+0xe4>)
   3380e:	429c      	cmp	r4, r3
   33810:	d101      	bne.n	33816 <__swsetup_r+0x4a>
   33812:	68ac      	ldr	r4, [r5, #8]
   33814:	e7eb      	b.n	337ee <__swsetup_r+0x22>
   33816:	4b27      	ldr	r3, [pc, #156]	; (338b4 <__swsetup_r+0xe8>)
   33818:	429c      	cmp	r4, r3
   3381a:	d1e8      	bne.n	337ee <__swsetup_r+0x22>
   3381c:	68ec      	ldr	r4, [r5, #12]
   3381e:	e7e6      	b.n	337ee <__swsetup_r+0x22>
   33820:	075b      	lsls	r3, r3, #29
   33822:	d513      	bpl.n	3384c <__swsetup_r+0x80>
   33824:	6b61      	ldr	r1, [r4, #52]	; 0x34
   33826:	2900      	cmp	r1, #0
   33828:	d008      	beq.n	3383c <__swsetup_r+0x70>
   3382a:	0023      	movs	r3, r4
   3382c:	3344      	adds	r3, #68	; 0x44
   3382e:	4299      	cmp	r1, r3
   33830:	d002      	beq.n	33838 <__swsetup_r+0x6c>
   33832:	0030      	movs	r0, r6
   33834:	f7ff fc78 	bl	33128 <_free_r>
   33838:	2300      	movs	r3, #0
   3383a:	6363      	str	r3, [r4, #52]	; 0x34
   3383c:	2224      	movs	r2, #36	; 0x24
   3383e:	89a3      	ldrh	r3, [r4, #12]
   33840:	4393      	bics	r3, r2
   33842:	81a3      	strh	r3, [r4, #12]
   33844:	2300      	movs	r3, #0
   33846:	6063      	str	r3, [r4, #4]
   33848:	6923      	ldr	r3, [r4, #16]
   3384a:	6023      	str	r3, [r4, #0]
   3384c:	2308      	movs	r3, #8
   3384e:	89a2      	ldrh	r2, [r4, #12]
   33850:	4313      	orrs	r3, r2
   33852:	81a3      	strh	r3, [r4, #12]
   33854:	6923      	ldr	r3, [r4, #16]
   33856:	2b00      	cmp	r3, #0
   33858:	d10b      	bne.n	33872 <__swsetup_r+0xa6>
   3385a:	21a0      	movs	r1, #160	; 0xa0
   3385c:	2280      	movs	r2, #128	; 0x80
   3385e:	89a3      	ldrh	r3, [r4, #12]
   33860:	0089      	lsls	r1, r1, #2
   33862:	0092      	lsls	r2, r2, #2
   33864:	400b      	ands	r3, r1
   33866:	4293      	cmp	r3, r2
   33868:	d003      	beq.n	33872 <__swsetup_r+0xa6>
   3386a:	0021      	movs	r1, r4
   3386c:	0030      	movs	r0, r6
   3386e:	f000 f9e9 	bl	33c44 <__smakebuf_r>
   33872:	2301      	movs	r3, #1
   33874:	89a2      	ldrh	r2, [r4, #12]
   33876:	4013      	ands	r3, r2
   33878:	d011      	beq.n	3389e <__swsetup_r+0xd2>
   3387a:	2300      	movs	r3, #0
   3387c:	60a3      	str	r3, [r4, #8]
   3387e:	6963      	ldr	r3, [r4, #20]
   33880:	425b      	negs	r3, r3
   33882:	61a3      	str	r3, [r4, #24]
   33884:	2000      	movs	r0, #0
   33886:	6923      	ldr	r3, [r4, #16]
   33888:	4283      	cmp	r3, r0
   3388a:	d1be      	bne.n	3380a <__swsetup_r+0x3e>
   3388c:	230c      	movs	r3, #12
   3388e:	5ee2      	ldrsh	r2, [r4, r3]
   33890:	0613      	lsls	r3, r2, #24
   33892:	d5ba      	bpl.n	3380a <__swsetup_r+0x3e>
   33894:	2340      	movs	r3, #64	; 0x40
   33896:	4313      	orrs	r3, r2
   33898:	81a3      	strh	r3, [r4, #12]
   3389a:	3801      	subs	r0, #1
   3389c:	e7b5      	b.n	3380a <__swsetup_r+0x3e>
   3389e:	0792      	lsls	r2, r2, #30
   338a0:	d400      	bmi.n	338a4 <__swsetup_r+0xd8>
   338a2:	6963      	ldr	r3, [r4, #20]
   338a4:	60a3      	str	r3, [r4, #8]
   338a6:	e7ed      	b.n	33884 <__swsetup_r+0xb8>
   338a8:	20000140 	.word	0x20000140
   338ac:	000384f0 	.word	0x000384f0
   338b0:	00038510 	.word	0x00038510
   338b4:	000384d0 	.word	0x000384d0

000338b8 <__sflush_r>:
   338b8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   338ba:	898a      	ldrh	r2, [r1, #12]
   338bc:	0005      	movs	r5, r0
   338be:	000c      	movs	r4, r1
   338c0:	0713      	lsls	r3, r2, #28
   338c2:	d460      	bmi.n	33986 <__sflush_r+0xce>
   338c4:	684b      	ldr	r3, [r1, #4]
   338c6:	2b00      	cmp	r3, #0
   338c8:	dc04      	bgt.n	338d4 <__sflush_r+0x1c>
   338ca:	6c0b      	ldr	r3, [r1, #64]	; 0x40
   338cc:	2b00      	cmp	r3, #0
   338ce:	dc01      	bgt.n	338d4 <__sflush_r+0x1c>
   338d0:	2000      	movs	r0, #0
   338d2:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
   338d4:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
   338d6:	2f00      	cmp	r7, #0
   338d8:	d0fa      	beq.n	338d0 <__sflush_r+0x18>
   338da:	2300      	movs	r3, #0
   338dc:	682e      	ldr	r6, [r5, #0]
   338de:	602b      	str	r3, [r5, #0]
   338e0:	2380      	movs	r3, #128	; 0x80
   338e2:	015b      	lsls	r3, r3, #5
   338e4:	401a      	ands	r2, r3
   338e6:	d034      	beq.n	33952 <__sflush_r+0x9a>
   338e8:	6d60      	ldr	r0, [r4, #84]	; 0x54
   338ea:	89a3      	ldrh	r3, [r4, #12]
   338ec:	075b      	lsls	r3, r3, #29
   338ee:	d506      	bpl.n	338fe <__sflush_r+0x46>
   338f0:	6863      	ldr	r3, [r4, #4]
   338f2:	1ac0      	subs	r0, r0, r3
   338f4:	6b63      	ldr	r3, [r4, #52]	; 0x34
   338f6:	2b00      	cmp	r3, #0
   338f8:	d001      	beq.n	338fe <__sflush_r+0x46>
   338fa:	6c23      	ldr	r3, [r4, #64]	; 0x40
   338fc:	1ac0      	subs	r0, r0, r3
   338fe:	0002      	movs	r2, r0
   33900:	6a21      	ldr	r1, [r4, #32]
   33902:	2300      	movs	r3, #0
   33904:	0028      	movs	r0, r5
   33906:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
   33908:	47b8      	blx	r7
   3390a:	89a1      	ldrh	r1, [r4, #12]
   3390c:	1c43      	adds	r3, r0, #1
   3390e:	d106      	bne.n	3391e <__sflush_r+0x66>
   33910:	682b      	ldr	r3, [r5, #0]
   33912:	2b1d      	cmp	r3, #29
   33914:	d831      	bhi.n	3397a <__sflush_r+0xc2>
   33916:	4a2c      	ldr	r2, [pc, #176]	; (339c8 <__sflush_r+0x110>)
   33918:	40da      	lsrs	r2, r3
   3391a:	07d3      	lsls	r3, r2, #31
   3391c:	d52d      	bpl.n	3397a <__sflush_r+0xc2>
   3391e:	2300      	movs	r3, #0
   33920:	6063      	str	r3, [r4, #4]
   33922:	6923      	ldr	r3, [r4, #16]
   33924:	6023      	str	r3, [r4, #0]
   33926:	04cb      	lsls	r3, r1, #19
   33928:	d505      	bpl.n	33936 <__sflush_r+0x7e>
   3392a:	1c43      	adds	r3, r0, #1
   3392c:	d102      	bne.n	33934 <__sflush_r+0x7c>
   3392e:	682b      	ldr	r3, [r5, #0]
   33930:	2b00      	cmp	r3, #0
   33932:	d100      	bne.n	33936 <__sflush_r+0x7e>
   33934:	6560      	str	r0, [r4, #84]	; 0x54
   33936:	6b61      	ldr	r1, [r4, #52]	; 0x34
   33938:	602e      	str	r6, [r5, #0]
   3393a:	2900      	cmp	r1, #0
   3393c:	d0c8      	beq.n	338d0 <__sflush_r+0x18>
   3393e:	0023      	movs	r3, r4
   33940:	3344      	adds	r3, #68	; 0x44
   33942:	4299      	cmp	r1, r3
   33944:	d002      	beq.n	3394c <__sflush_r+0x94>
   33946:	0028      	movs	r0, r5
   33948:	f7ff fbee 	bl	33128 <_free_r>
   3394c:	2000      	movs	r0, #0
   3394e:	6360      	str	r0, [r4, #52]	; 0x34
   33950:	e7bf      	b.n	338d2 <__sflush_r+0x1a>
   33952:	2301      	movs	r3, #1
   33954:	6a21      	ldr	r1, [r4, #32]
   33956:	0028      	movs	r0, r5
   33958:	47b8      	blx	r7
   3395a:	1c43      	adds	r3, r0, #1
   3395c:	d1c5      	bne.n	338ea <__sflush_r+0x32>
   3395e:	682b      	ldr	r3, [r5, #0]
   33960:	2b00      	cmp	r3, #0
   33962:	d0c2      	beq.n	338ea <__sflush_r+0x32>
   33964:	2b1d      	cmp	r3, #29
   33966:	d001      	beq.n	3396c <__sflush_r+0xb4>
   33968:	2b16      	cmp	r3, #22
   3396a:	d101      	bne.n	33970 <__sflush_r+0xb8>
   3396c:	602e      	str	r6, [r5, #0]
   3396e:	e7af      	b.n	338d0 <__sflush_r+0x18>
   33970:	2340      	movs	r3, #64	; 0x40
   33972:	89a2      	ldrh	r2, [r4, #12]
   33974:	4313      	orrs	r3, r2
   33976:	81a3      	strh	r3, [r4, #12]
   33978:	e7ab      	b.n	338d2 <__sflush_r+0x1a>
   3397a:	2340      	movs	r3, #64	; 0x40
   3397c:	430b      	orrs	r3, r1
   3397e:	2001      	movs	r0, #1
   33980:	81a3      	strh	r3, [r4, #12]
   33982:	4240      	negs	r0, r0
   33984:	e7a5      	b.n	338d2 <__sflush_r+0x1a>
   33986:	690f      	ldr	r7, [r1, #16]
   33988:	2f00      	cmp	r7, #0
   3398a:	d0a1      	beq.n	338d0 <__sflush_r+0x18>
   3398c:	680b      	ldr	r3, [r1, #0]
   3398e:	600f      	str	r7, [r1, #0]
   33990:	1bdb      	subs	r3, r3, r7
   33992:	9301      	str	r3, [sp, #4]
   33994:	2300      	movs	r3, #0
   33996:	0792      	lsls	r2, r2, #30
   33998:	d100      	bne.n	3399c <__sflush_r+0xe4>
   3399a:	694b      	ldr	r3, [r1, #20]
   3399c:	60a3      	str	r3, [r4, #8]
   3399e:	9b01      	ldr	r3, [sp, #4]
   339a0:	2b00      	cmp	r3, #0
   339a2:	dc00      	bgt.n	339a6 <__sflush_r+0xee>
   339a4:	e794      	b.n	338d0 <__sflush_r+0x18>
   339a6:	9b01      	ldr	r3, [sp, #4]
   339a8:	003a      	movs	r2, r7
   339aa:	6a21      	ldr	r1, [r4, #32]
   339ac:	0028      	movs	r0, r5
   339ae:	6aa6      	ldr	r6, [r4, #40]	; 0x28
   339b0:	47b0      	blx	r6
   339b2:	2800      	cmp	r0, #0
   339b4:	dc03      	bgt.n	339be <__sflush_r+0x106>
   339b6:	2340      	movs	r3, #64	; 0x40
   339b8:	89a2      	ldrh	r2, [r4, #12]
   339ba:	4313      	orrs	r3, r2
   339bc:	e7df      	b.n	3397e <__sflush_r+0xc6>
   339be:	9b01      	ldr	r3, [sp, #4]
   339c0:	183f      	adds	r7, r7, r0
   339c2:	1a1b      	subs	r3, r3, r0
   339c4:	9301      	str	r3, [sp, #4]
   339c6:	e7ea      	b.n	3399e <__sflush_r+0xe6>
   339c8:	20400001 	.word	0x20400001

000339cc <_fflush_r>:
   339cc:	690b      	ldr	r3, [r1, #16]
   339ce:	b570      	push	{r4, r5, r6, lr}
   339d0:	0005      	movs	r5, r0
   339d2:	000c      	movs	r4, r1
   339d4:	2b00      	cmp	r3, #0
   339d6:	d101      	bne.n	339dc <_fflush_r+0x10>
   339d8:	2000      	movs	r0, #0
   339da:	bd70      	pop	{r4, r5, r6, pc}
   339dc:	2800      	cmp	r0, #0
   339de:	d004      	beq.n	339ea <_fflush_r+0x1e>
   339e0:	6983      	ldr	r3, [r0, #24]
   339e2:	2b00      	cmp	r3, #0
   339e4:	d101      	bne.n	339ea <_fflush_r+0x1e>
   339e6:	f000 f85f 	bl	33aa8 <__sinit>
   339ea:	4b0b      	ldr	r3, [pc, #44]	; (33a18 <_fflush_r+0x4c>)
   339ec:	429c      	cmp	r4, r3
   339ee:	d109      	bne.n	33a04 <_fflush_r+0x38>
   339f0:	686c      	ldr	r4, [r5, #4]
   339f2:	220c      	movs	r2, #12
   339f4:	5ea3      	ldrsh	r3, [r4, r2]
   339f6:	2b00      	cmp	r3, #0
   339f8:	d0ee      	beq.n	339d8 <_fflush_r+0xc>
   339fa:	0021      	movs	r1, r4
   339fc:	0028      	movs	r0, r5
   339fe:	f7ff ff5b 	bl	338b8 <__sflush_r>
   33a02:	e7ea      	b.n	339da <_fflush_r+0xe>
   33a04:	4b05      	ldr	r3, [pc, #20]	; (33a1c <_fflush_r+0x50>)
   33a06:	429c      	cmp	r4, r3
   33a08:	d101      	bne.n	33a0e <_fflush_r+0x42>
   33a0a:	68ac      	ldr	r4, [r5, #8]
   33a0c:	e7f1      	b.n	339f2 <_fflush_r+0x26>
   33a0e:	4b04      	ldr	r3, [pc, #16]	; (33a20 <_fflush_r+0x54>)
   33a10:	429c      	cmp	r4, r3
   33a12:	d1ee      	bne.n	339f2 <_fflush_r+0x26>
   33a14:	68ec      	ldr	r4, [r5, #12]
   33a16:	e7ec      	b.n	339f2 <_fflush_r+0x26>
   33a18:	000384f0 	.word	0x000384f0
   33a1c:	00038510 	.word	0x00038510
   33a20:	000384d0 	.word	0x000384d0

00033a24 <_cleanup_r>:
   33a24:	b510      	push	{r4, lr}
   33a26:	4902      	ldr	r1, [pc, #8]	; (33a30 <_cleanup_r+0xc>)
   33a28:	f000 f8b2 	bl	33b90 <_fwalk_reent>
   33a2c:	bd10      	pop	{r4, pc}
   33a2e:	46c0      	nop			; (mov r8, r8)
   33a30:	000339cd 	.word	0x000339cd

00033a34 <std.isra.0>:
   33a34:	2300      	movs	r3, #0
   33a36:	b510      	push	{r4, lr}
   33a38:	0004      	movs	r4, r0
   33a3a:	6003      	str	r3, [r0, #0]
   33a3c:	6043      	str	r3, [r0, #4]
   33a3e:	6083      	str	r3, [r0, #8]
   33a40:	8181      	strh	r1, [r0, #12]
   33a42:	6643      	str	r3, [r0, #100]	; 0x64
   33a44:	81c2      	strh	r2, [r0, #14]
   33a46:	6103      	str	r3, [r0, #16]
   33a48:	6143      	str	r3, [r0, #20]
   33a4a:	6183      	str	r3, [r0, #24]
   33a4c:	0019      	movs	r1, r3
   33a4e:	2208      	movs	r2, #8
   33a50:	305c      	adds	r0, #92	; 0x5c
   33a52:	f7ff fb60 	bl	33116 <memset>
   33a56:	4b05      	ldr	r3, [pc, #20]	; (33a6c <std.isra.0+0x38>)
   33a58:	6224      	str	r4, [r4, #32]
   33a5a:	6263      	str	r3, [r4, #36]	; 0x24
   33a5c:	4b04      	ldr	r3, [pc, #16]	; (33a70 <std.isra.0+0x3c>)
   33a5e:	62a3      	str	r3, [r4, #40]	; 0x28
   33a60:	4b04      	ldr	r3, [pc, #16]	; (33a74 <std.isra.0+0x40>)
   33a62:	62e3      	str	r3, [r4, #44]	; 0x2c
   33a64:	4b04      	ldr	r3, [pc, #16]	; (33a78 <std.isra.0+0x44>)
   33a66:	6323      	str	r3, [r4, #48]	; 0x30
   33a68:	bd10      	pop	{r4, pc}
   33a6a:	46c0      	nop			; (mov r8, r8)
   33a6c:	000342d1 	.word	0x000342d1
   33a70:	000342f9 	.word	0x000342f9
   33a74:	00034331 	.word	0x00034331
   33a78:	0003435d 	.word	0x0003435d

00033a7c <__sfmoreglue>:
   33a7c:	b570      	push	{r4, r5, r6, lr}
   33a7e:	2568      	movs	r5, #104	; 0x68
   33a80:	1e4a      	subs	r2, r1, #1
   33a82:	4355      	muls	r5, r2
   33a84:	000e      	movs	r6, r1
   33a86:	0029      	movs	r1, r5
   33a88:	3174      	adds	r1, #116	; 0x74
   33a8a:	f7ff fb97 	bl	331bc <_malloc_r>
   33a8e:	1e04      	subs	r4, r0, #0
   33a90:	d008      	beq.n	33aa4 <__sfmoreglue+0x28>
   33a92:	2100      	movs	r1, #0
   33a94:	002a      	movs	r2, r5
   33a96:	6001      	str	r1, [r0, #0]
   33a98:	6046      	str	r6, [r0, #4]
   33a9a:	300c      	adds	r0, #12
   33a9c:	60a0      	str	r0, [r4, #8]
   33a9e:	3268      	adds	r2, #104	; 0x68
   33aa0:	f7ff fb39 	bl	33116 <memset>
   33aa4:	0020      	movs	r0, r4
   33aa6:	bd70      	pop	{r4, r5, r6, pc}

00033aa8 <__sinit>:
   33aa8:	6983      	ldr	r3, [r0, #24]
   33aaa:	b513      	push	{r0, r1, r4, lr}
   33aac:	0004      	movs	r4, r0
   33aae:	2b00      	cmp	r3, #0
   33ab0:	d128      	bne.n	33b04 <__sinit+0x5c>
   33ab2:	6483      	str	r3, [r0, #72]	; 0x48
   33ab4:	64c3      	str	r3, [r0, #76]	; 0x4c
   33ab6:	6503      	str	r3, [r0, #80]	; 0x50
   33ab8:	4b13      	ldr	r3, [pc, #76]	; (33b08 <__sinit+0x60>)
   33aba:	4a14      	ldr	r2, [pc, #80]	; (33b0c <__sinit+0x64>)
   33abc:	681b      	ldr	r3, [r3, #0]
   33abe:	6282      	str	r2, [r0, #40]	; 0x28
   33ac0:	9301      	str	r3, [sp, #4]
   33ac2:	4298      	cmp	r0, r3
   33ac4:	d101      	bne.n	33aca <__sinit+0x22>
   33ac6:	2301      	movs	r3, #1
   33ac8:	6183      	str	r3, [r0, #24]
   33aca:	0020      	movs	r0, r4
   33acc:	f000 f820 	bl	33b10 <__sfp>
   33ad0:	6060      	str	r0, [r4, #4]
   33ad2:	0020      	movs	r0, r4
   33ad4:	f000 f81c 	bl	33b10 <__sfp>
   33ad8:	60a0      	str	r0, [r4, #8]
   33ada:	0020      	movs	r0, r4
   33adc:	f000 f818 	bl	33b10 <__sfp>
   33ae0:	2200      	movs	r2, #0
   33ae2:	60e0      	str	r0, [r4, #12]
   33ae4:	2104      	movs	r1, #4
   33ae6:	6860      	ldr	r0, [r4, #4]
   33ae8:	f7ff ffa4 	bl	33a34 <std.isra.0>
   33aec:	2201      	movs	r2, #1
   33aee:	2109      	movs	r1, #9
   33af0:	68a0      	ldr	r0, [r4, #8]
   33af2:	f7ff ff9f 	bl	33a34 <std.isra.0>
   33af6:	2202      	movs	r2, #2
   33af8:	2112      	movs	r1, #18
   33afa:	68e0      	ldr	r0, [r4, #12]
   33afc:	f7ff ff9a 	bl	33a34 <std.isra.0>
   33b00:	2301      	movs	r3, #1
   33b02:	61a3      	str	r3, [r4, #24]
   33b04:	bd13      	pop	{r0, r1, r4, pc}
   33b06:	46c0      	nop			; (mov r8, r8)
   33b08:	000384cc 	.word	0x000384cc
   33b0c:	00033a25 	.word	0x00033a25

00033b10 <__sfp>:
   33b10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   33b12:	4b1e      	ldr	r3, [pc, #120]	; (33b8c <__sfp+0x7c>)
   33b14:	0007      	movs	r7, r0
   33b16:	681e      	ldr	r6, [r3, #0]
   33b18:	69b3      	ldr	r3, [r6, #24]
   33b1a:	2b00      	cmp	r3, #0
   33b1c:	d102      	bne.n	33b24 <__sfp+0x14>
   33b1e:	0030      	movs	r0, r6
   33b20:	f7ff ffc2 	bl	33aa8 <__sinit>
   33b24:	3648      	adds	r6, #72	; 0x48
   33b26:	68b4      	ldr	r4, [r6, #8]
   33b28:	6873      	ldr	r3, [r6, #4]
   33b2a:	3b01      	subs	r3, #1
   33b2c:	d504      	bpl.n	33b38 <__sfp+0x28>
   33b2e:	6833      	ldr	r3, [r6, #0]
   33b30:	2b00      	cmp	r3, #0
   33b32:	d007      	beq.n	33b44 <__sfp+0x34>
   33b34:	6836      	ldr	r6, [r6, #0]
   33b36:	e7f6      	b.n	33b26 <__sfp+0x16>
   33b38:	220c      	movs	r2, #12
   33b3a:	5ea5      	ldrsh	r5, [r4, r2]
   33b3c:	2d00      	cmp	r5, #0
   33b3e:	d00d      	beq.n	33b5c <__sfp+0x4c>
   33b40:	3468      	adds	r4, #104	; 0x68
   33b42:	e7f2      	b.n	33b2a <__sfp+0x1a>
   33b44:	2104      	movs	r1, #4
   33b46:	0038      	movs	r0, r7
   33b48:	f7ff ff98 	bl	33a7c <__sfmoreglue>
   33b4c:	6030      	str	r0, [r6, #0]
   33b4e:	2800      	cmp	r0, #0
   33b50:	d1f0      	bne.n	33b34 <__sfp+0x24>
   33b52:	230c      	movs	r3, #12
   33b54:	0004      	movs	r4, r0
   33b56:	603b      	str	r3, [r7, #0]
   33b58:	0020      	movs	r0, r4
   33b5a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   33b5c:	2301      	movs	r3, #1
   33b5e:	0020      	movs	r0, r4
   33b60:	425b      	negs	r3, r3
   33b62:	81e3      	strh	r3, [r4, #14]
   33b64:	3302      	adds	r3, #2
   33b66:	81a3      	strh	r3, [r4, #12]
   33b68:	6665      	str	r5, [r4, #100]	; 0x64
   33b6a:	6025      	str	r5, [r4, #0]
   33b6c:	60a5      	str	r5, [r4, #8]
   33b6e:	6065      	str	r5, [r4, #4]
   33b70:	6125      	str	r5, [r4, #16]
   33b72:	6165      	str	r5, [r4, #20]
   33b74:	61a5      	str	r5, [r4, #24]
   33b76:	2208      	movs	r2, #8
   33b78:	0029      	movs	r1, r5
   33b7a:	305c      	adds	r0, #92	; 0x5c
   33b7c:	f7ff facb 	bl	33116 <memset>
   33b80:	6365      	str	r5, [r4, #52]	; 0x34
   33b82:	63a5      	str	r5, [r4, #56]	; 0x38
   33b84:	64a5      	str	r5, [r4, #72]	; 0x48
   33b86:	64e5      	str	r5, [r4, #76]	; 0x4c
   33b88:	e7e6      	b.n	33b58 <__sfp+0x48>
   33b8a:	46c0      	nop			; (mov r8, r8)
   33b8c:	000384cc 	.word	0x000384cc

00033b90 <_fwalk_reent>:
   33b90:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   33b92:	0004      	movs	r4, r0
   33b94:	0007      	movs	r7, r0
   33b96:	2600      	movs	r6, #0
   33b98:	9101      	str	r1, [sp, #4]
   33b9a:	3448      	adds	r4, #72	; 0x48
   33b9c:	2c00      	cmp	r4, #0
   33b9e:	d101      	bne.n	33ba4 <_fwalk_reent+0x14>
   33ba0:	0030      	movs	r0, r6
   33ba2:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
   33ba4:	6863      	ldr	r3, [r4, #4]
   33ba6:	68a5      	ldr	r5, [r4, #8]
   33ba8:	9300      	str	r3, [sp, #0]
   33baa:	9b00      	ldr	r3, [sp, #0]
   33bac:	3b01      	subs	r3, #1
   33bae:	9300      	str	r3, [sp, #0]
   33bb0:	d501      	bpl.n	33bb6 <_fwalk_reent+0x26>
   33bb2:	6824      	ldr	r4, [r4, #0]
   33bb4:	e7f2      	b.n	33b9c <_fwalk_reent+0xc>
   33bb6:	89ab      	ldrh	r3, [r5, #12]
   33bb8:	2b01      	cmp	r3, #1
   33bba:	d908      	bls.n	33bce <_fwalk_reent+0x3e>
   33bbc:	220e      	movs	r2, #14
   33bbe:	5eab      	ldrsh	r3, [r5, r2]
   33bc0:	3301      	adds	r3, #1
   33bc2:	d004      	beq.n	33bce <_fwalk_reent+0x3e>
   33bc4:	0029      	movs	r1, r5
   33bc6:	0038      	movs	r0, r7
   33bc8:	9b01      	ldr	r3, [sp, #4]
   33bca:	4798      	blx	r3
   33bcc:	4306      	orrs	r6, r0
   33bce:	3568      	adds	r5, #104	; 0x68
   33bd0:	e7eb      	b.n	33baa <_fwalk_reent+0x1a>

00033bd2 <__locale_ctype_ptr_l>:
   33bd2:	30ec      	adds	r0, #236	; 0xec
   33bd4:	6800      	ldr	r0, [r0, #0]
   33bd6:	4770      	bx	lr

00033bd8 <__locale_ctype_ptr>:
   33bd8:	4b04      	ldr	r3, [pc, #16]	; (33bec <__locale_ctype_ptr+0x14>)
   33bda:	681b      	ldr	r3, [r3, #0]
   33bdc:	6a1b      	ldr	r3, [r3, #32]
   33bde:	2b00      	cmp	r3, #0
   33be0:	d100      	bne.n	33be4 <__locale_ctype_ptr+0xc>
   33be2:	4b03      	ldr	r3, [pc, #12]	; (33bf0 <__locale_ctype_ptr+0x18>)
   33be4:	33ec      	adds	r3, #236	; 0xec
   33be6:	6818      	ldr	r0, [r3, #0]
   33be8:	4770      	bx	lr
   33bea:	46c0      	nop			; (mov r8, r8)
   33bec:	20000140 	.word	0x20000140
   33bf0:	200001a4 	.word	0x200001a4

00033bf4 <__swhatbuf_r>:
   33bf4:	b570      	push	{r4, r5, r6, lr}
   33bf6:	000e      	movs	r6, r1
   33bf8:	001d      	movs	r5, r3
   33bfa:	230e      	movs	r3, #14
   33bfc:	5ec9      	ldrsh	r1, [r1, r3]
   33bfe:	b090      	sub	sp, #64	; 0x40
   33c00:	0014      	movs	r4, r2
   33c02:	2900      	cmp	r1, #0
   33c04:	da07      	bge.n	33c16 <__swhatbuf_r+0x22>
   33c06:	2300      	movs	r3, #0
   33c08:	602b      	str	r3, [r5, #0]
   33c0a:	89b3      	ldrh	r3, [r6, #12]
   33c0c:	061b      	lsls	r3, r3, #24
   33c0e:	d411      	bmi.n	33c34 <__swhatbuf_r+0x40>
   33c10:	2380      	movs	r3, #128	; 0x80
   33c12:	00db      	lsls	r3, r3, #3
   33c14:	e00f      	b.n	33c36 <__swhatbuf_r+0x42>
   33c16:	aa01      	add	r2, sp, #4
   33c18:	f000 fbe6 	bl	343e8 <_fstat_r>
   33c1c:	2800      	cmp	r0, #0
   33c1e:	dbf2      	blt.n	33c06 <__swhatbuf_r+0x12>
   33c20:	22f0      	movs	r2, #240	; 0xf0
   33c22:	9b02      	ldr	r3, [sp, #8]
   33c24:	0212      	lsls	r2, r2, #8
   33c26:	4013      	ands	r3, r2
   33c28:	4a05      	ldr	r2, [pc, #20]	; (33c40 <__swhatbuf_r+0x4c>)
   33c2a:	189b      	adds	r3, r3, r2
   33c2c:	425a      	negs	r2, r3
   33c2e:	4153      	adcs	r3, r2
   33c30:	602b      	str	r3, [r5, #0]
   33c32:	e7ed      	b.n	33c10 <__swhatbuf_r+0x1c>
   33c34:	2340      	movs	r3, #64	; 0x40
   33c36:	2000      	movs	r0, #0
   33c38:	6023      	str	r3, [r4, #0]
   33c3a:	b010      	add	sp, #64	; 0x40
   33c3c:	bd70      	pop	{r4, r5, r6, pc}
   33c3e:	46c0      	nop			; (mov r8, r8)
   33c40:	ffffe000 	.word	0xffffe000

00033c44 <__smakebuf_r>:
   33c44:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   33c46:	2602      	movs	r6, #2
   33c48:	898b      	ldrh	r3, [r1, #12]
   33c4a:	0005      	movs	r5, r0
   33c4c:	000c      	movs	r4, r1
   33c4e:	4233      	tst	r3, r6
   33c50:	d006      	beq.n	33c60 <__smakebuf_r+0x1c>
   33c52:	0023      	movs	r3, r4
   33c54:	3347      	adds	r3, #71	; 0x47
   33c56:	6023      	str	r3, [r4, #0]
   33c58:	6123      	str	r3, [r4, #16]
   33c5a:	2301      	movs	r3, #1
   33c5c:	6163      	str	r3, [r4, #20]
   33c5e:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
   33c60:	ab01      	add	r3, sp, #4
   33c62:	466a      	mov	r2, sp
   33c64:	f7ff ffc6 	bl	33bf4 <__swhatbuf_r>
   33c68:	9900      	ldr	r1, [sp, #0]
   33c6a:	0007      	movs	r7, r0
   33c6c:	0028      	movs	r0, r5
   33c6e:	f7ff faa5 	bl	331bc <_malloc_r>
   33c72:	2800      	cmp	r0, #0
   33c74:	d108      	bne.n	33c88 <__smakebuf_r+0x44>
   33c76:	220c      	movs	r2, #12
   33c78:	5ea3      	ldrsh	r3, [r4, r2]
   33c7a:	059a      	lsls	r2, r3, #22
   33c7c:	d4ef      	bmi.n	33c5e <__smakebuf_r+0x1a>
   33c7e:	2203      	movs	r2, #3
   33c80:	4393      	bics	r3, r2
   33c82:	431e      	orrs	r6, r3
   33c84:	81a6      	strh	r6, [r4, #12]
   33c86:	e7e4      	b.n	33c52 <__smakebuf_r+0xe>
   33c88:	4b0f      	ldr	r3, [pc, #60]	; (33cc8 <__smakebuf_r+0x84>)
   33c8a:	62ab      	str	r3, [r5, #40]	; 0x28
   33c8c:	2380      	movs	r3, #128	; 0x80
   33c8e:	89a2      	ldrh	r2, [r4, #12]
   33c90:	6020      	str	r0, [r4, #0]
   33c92:	4313      	orrs	r3, r2
   33c94:	81a3      	strh	r3, [r4, #12]
   33c96:	9b00      	ldr	r3, [sp, #0]
   33c98:	6120      	str	r0, [r4, #16]
   33c9a:	6163      	str	r3, [r4, #20]
   33c9c:	9b01      	ldr	r3, [sp, #4]
   33c9e:	2b00      	cmp	r3, #0
   33ca0:	d00d      	beq.n	33cbe <__smakebuf_r+0x7a>
   33ca2:	230e      	movs	r3, #14
   33ca4:	5ee1      	ldrsh	r1, [r4, r3]
   33ca6:	0028      	movs	r0, r5
   33ca8:	f000 fbb0 	bl	3440c <_isatty_r>
   33cac:	2800      	cmp	r0, #0
   33cae:	d006      	beq.n	33cbe <__smakebuf_r+0x7a>
   33cb0:	2203      	movs	r2, #3
   33cb2:	89a3      	ldrh	r3, [r4, #12]
   33cb4:	4393      	bics	r3, r2
   33cb6:	001a      	movs	r2, r3
   33cb8:	2301      	movs	r3, #1
   33cba:	4313      	orrs	r3, r2
   33cbc:	81a3      	strh	r3, [r4, #12]
   33cbe:	89a0      	ldrh	r0, [r4, #12]
   33cc0:	4338      	orrs	r0, r7
   33cc2:	81a0      	strh	r0, [r4, #12]
   33cc4:	e7cb      	b.n	33c5e <__smakebuf_r+0x1a>
   33cc6:	46c0      	nop			; (mov r8, r8)
   33cc8:	00033a25 	.word	0x00033a25

00033ccc <__ascii_mbtowc>:
   33ccc:	b082      	sub	sp, #8
   33cce:	2900      	cmp	r1, #0
   33cd0:	d100      	bne.n	33cd4 <__ascii_mbtowc+0x8>
   33cd2:	a901      	add	r1, sp, #4
   33cd4:	1e10      	subs	r0, r2, #0
   33cd6:	d006      	beq.n	33ce6 <__ascii_mbtowc+0x1a>
   33cd8:	2b00      	cmp	r3, #0
   33cda:	d006      	beq.n	33cea <__ascii_mbtowc+0x1e>
   33cdc:	7813      	ldrb	r3, [r2, #0]
   33cde:	600b      	str	r3, [r1, #0]
   33ce0:	7810      	ldrb	r0, [r2, #0]
   33ce2:	1e43      	subs	r3, r0, #1
   33ce4:	4198      	sbcs	r0, r3
   33ce6:	b002      	add	sp, #8
   33ce8:	4770      	bx	lr
   33cea:	2002      	movs	r0, #2
   33cec:	4240      	negs	r0, r0
   33cee:	e7fa      	b.n	33ce6 <__ascii_mbtowc+0x1a>

00033cf0 <__malloc_lock>:
   33cf0:	4770      	bx	lr

00033cf2 <__malloc_unlock>:
   33cf2:	4770      	bx	lr

00033cf4 <__ssputs_r>:
   33cf4:	b5f0      	push	{r4, r5, r6, r7, lr}
   33cf6:	688e      	ldr	r6, [r1, #8]
   33cf8:	b085      	sub	sp, #20
   33cfa:	0007      	movs	r7, r0
   33cfc:	000c      	movs	r4, r1
   33cfe:	9203      	str	r2, [sp, #12]
   33d00:	9301      	str	r3, [sp, #4]
   33d02:	429e      	cmp	r6, r3
   33d04:	d839      	bhi.n	33d7a <__ssputs_r+0x86>
   33d06:	2390      	movs	r3, #144	; 0x90
   33d08:	898a      	ldrh	r2, [r1, #12]
   33d0a:	00db      	lsls	r3, r3, #3
   33d0c:	421a      	tst	r2, r3
   33d0e:	d034      	beq.n	33d7a <__ssputs_r+0x86>
   33d10:	2503      	movs	r5, #3
   33d12:	6909      	ldr	r1, [r1, #16]
   33d14:	6823      	ldr	r3, [r4, #0]
   33d16:	1a5b      	subs	r3, r3, r1
   33d18:	9302      	str	r3, [sp, #8]
   33d1a:	6963      	ldr	r3, [r4, #20]
   33d1c:	9802      	ldr	r0, [sp, #8]
   33d1e:	435d      	muls	r5, r3
   33d20:	0feb      	lsrs	r3, r5, #31
   33d22:	195d      	adds	r5, r3, r5
   33d24:	9b01      	ldr	r3, [sp, #4]
   33d26:	106d      	asrs	r5, r5, #1
   33d28:	3301      	adds	r3, #1
   33d2a:	181b      	adds	r3, r3, r0
   33d2c:	42ab      	cmp	r3, r5
   33d2e:	d900      	bls.n	33d32 <__ssputs_r+0x3e>
   33d30:	001d      	movs	r5, r3
   33d32:	0553      	lsls	r3, r2, #21
   33d34:	d532      	bpl.n	33d9c <__ssputs_r+0xa8>
   33d36:	0029      	movs	r1, r5
   33d38:	0038      	movs	r0, r7
   33d3a:	f7ff fa3f 	bl	331bc <_malloc_r>
   33d3e:	1e06      	subs	r6, r0, #0
   33d40:	d109      	bne.n	33d56 <__ssputs_r+0x62>
   33d42:	230c      	movs	r3, #12
   33d44:	603b      	str	r3, [r7, #0]
   33d46:	2340      	movs	r3, #64	; 0x40
   33d48:	2001      	movs	r0, #1
   33d4a:	89a2      	ldrh	r2, [r4, #12]
   33d4c:	4240      	negs	r0, r0
   33d4e:	4313      	orrs	r3, r2
   33d50:	81a3      	strh	r3, [r4, #12]
   33d52:	b005      	add	sp, #20
   33d54:	bdf0      	pop	{r4, r5, r6, r7, pc}
   33d56:	9a02      	ldr	r2, [sp, #8]
   33d58:	6921      	ldr	r1, [r4, #16]
   33d5a:	f7ff f9c1 	bl	330e0 <memcpy>
   33d5e:	89a3      	ldrh	r3, [r4, #12]
   33d60:	4a14      	ldr	r2, [pc, #80]	; (33db4 <__ssputs_r+0xc0>)
   33d62:	401a      	ands	r2, r3
   33d64:	2380      	movs	r3, #128	; 0x80
   33d66:	4313      	orrs	r3, r2
   33d68:	81a3      	strh	r3, [r4, #12]
   33d6a:	9b02      	ldr	r3, [sp, #8]
   33d6c:	6126      	str	r6, [r4, #16]
   33d6e:	18f6      	adds	r6, r6, r3
   33d70:	6026      	str	r6, [r4, #0]
   33d72:	6165      	str	r5, [r4, #20]
   33d74:	9e01      	ldr	r6, [sp, #4]
   33d76:	1aed      	subs	r5, r5, r3
   33d78:	60a5      	str	r5, [r4, #8]
   33d7a:	9b01      	ldr	r3, [sp, #4]
   33d7c:	42b3      	cmp	r3, r6
   33d7e:	d200      	bcs.n	33d82 <__ssputs_r+0x8e>
   33d80:	001e      	movs	r6, r3
   33d82:	0032      	movs	r2, r6
   33d84:	9903      	ldr	r1, [sp, #12]
   33d86:	6820      	ldr	r0, [r4, #0]
   33d88:	f7ff f9b3 	bl	330f2 <memmove>
   33d8c:	68a3      	ldr	r3, [r4, #8]
   33d8e:	2000      	movs	r0, #0
   33d90:	1b9b      	subs	r3, r3, r6
   33d92:	60a3      	str	r3, [r4, #8]
   33d94:	6823      	ldr	r3, [r4, #0]
   33d96:	199e      	adds	r6, r3, r6
   33d98:	6026      	str	r6, [r4, #0]
   33d9a:	e7da      	b.n	33d52 <__ssputs_r+0x5e>
   33d9c:	002a      	movs	r2, r5
   33d9e:	0038      	movs	r0, r7
   33da0:	f000 fb65 	bl	3446e <_realloc_r>
   33da4:	1e06      	subs	r6, r0, #0
   33da6:	d1e0      	bne.n	33d6a <__ssputs_r+0x76>
   33da8:	6921      	ldr	r1, [r4, #16]
   33daa:	0038      	movs	r0, r7
   33dac:	f7ff f9bc 	bl	33128 <_free_r>
   33db0:	e7c7      	b.n	33d42 <__ssputs_r+0x4e>
   33db2:	46c0      	nop			; (mov r8, r8)
   33db4:	fffffb7f 	.word	0xfffffb7f

00033db8 <_svfiprintf_r>:
   33db8:	b5f0      	push	{r4, r5, r6, r7, lr}
   33dba:	b09f      	sub	sp, #124	; 0x7c
   33dbc:	9002      	str	r0, [sp, #8]
   33dbe:	9305      	str	r3, [sp, #20]
   33dc0:	898b      	ldrh	r3, [r1, #12]
   33dc2:	000f      	movs	r7, r1
   33dc4:	0016      	movs	r6, r2
   33dc6:	061b      	lsls	r3, r3, #24
   33dc8:	d511      	bpl.n	33dee <_svfiprintf_r+0x36>
   33dca:	690b      	ldr	r3, [r1, #16]
   33dcc:	2b00      	cmp	r3, #0
   33dce:	d10e      	bne.n	33dee <_svfiprintf_r+0x36>
   33dd0:	2140      	movs	r1, #64	; 0x40
   33dd2:	f7ff f9f3 	bl	331bc <_malloc_r>
   33dd6:	6038      	str	r0, [r7, #0]
   33dd8:	6138      	str	r0, [r7, #16]
   33dda:	2800      	cmp	r0, #0
   33ddc:	d105      	bne.n	33dea <_svfiprintf_r+0x32>
   33dde:	230c      	movs	r3, #12
   33de0:	9a02      	ldr	r2, [sp, #8]
   33de2:	3801      	subs	r0, #1
   33de4:	6013      	str	r3, [r2, #0]
   33de6:	b01f      	add	sp, #124	; 0x7c
   33de8:	bdf0      	pop	{r4, r5, r6, r7, pc}
   33dea:	2340      	movs	r3, #64	; 0x40
   33dec:	617b      	str	r3, [r7, #20]
   33dee:	2300      	movs	r3, #0
   33df0:	ad06      	add	r5, sp, #24
   33df2:	616b      	str	r3, [r5, #20]
   33df4:	3320      	adds	r3, #32
   33df6:	766b      	strb	r3, [r5, #25]
   33df8:	3310      	adds	r3, #16
   33dfa:	76ab      	strb	r3, [r5, #26]
   33dfc:	0034      	movs	r4, r6
   33dfe:	7823      	ldrb	r3, [r4, #0]
   33e00:	2b00      	cmp	r3, #0
   33e02:	d147      	bne.n	33e94 <_svfiprintf_r+0xdc>
   33e04:	1ba3      	subs	r3, r4, r6
   33e06:	9304      	str	r3, [sp, #16]
   33e08:	d00d      	beq.n	33e26 <_svfiprintf_r+0x6e>
   33e0a:	1ba3      	subs	r3, r4, r6
   33e0c:	0032      	movs	r2, r6
   33e0e:	0039      	movs	r1, r7
   33e10:	9802      	ldr	r0, [sp, #8]
   33e12:	f7ff ff6f 	bl	33cf4 <__ssputs_r>
   33e16:	1c43      	adds	r3, r0, #1
   33e18:	d100      	bne.n	33e1c <_svfiprintf_r+0x64>
   33e1a:	e0b5      	b.n	33f88 <_svfiprintf_r+0x1d0>
   33e1c:	696a      	ldr	r2, [r5, #20]
   33e1e:	9b04      	ldr	r3, [sp, #16]
   33e20:	4694      	mov	ip, r2
   33e22:	4463      	add	r3, ip
   33e24:	616b      	str	r3, [r5, #20]
   33e26:	7823      	ldrb	r3, [r4, #0]
   33e28:	2b00      	cmp	r3, #0
   33e2a:	d100      	bne.n	33e2e <_svfiprintf_r+0x76>
   33e2c:	e0ac      	b.n	33f88 <_svfiprintf_r+0x1d0>
   33e2e:	2201      	movs	r2, #1
   33e30:	2300      	movs	r3, #0
   33e32:	4252      	negs	r2, r2
   33e34:	606a      	str	r2, [r5, #4]
   33e36:	a902      	add	r1, sp, #8
   33e38:	3254      	adds	r2, #84	; 0x54
   33e3a:	1852      	adds	r2, r2, r1
   33e3c:	3401      	adds	r4, #1
   33e3e:	602b      	str	r3, [r5, #0]
   33e40:	60eb      	str	r3, [r5, #12]
   33e42:	60ab      	str	r3, [r5, #8]
   33e44:	7013      	strb	r3, [r2, #0]
   33e46:	65ab      	str	r3, [r5, #88]	; 0x58
   33e48:	4e58      	ldr	r6, [pc, #352]	; (33fac <_svfiprintf_r+0x1f4>)
   33e4a:	2205      	movs	r2, #5
   33e4c:	7821      	ldrb	r1, [r4, #0]
   33e4e:	0030      	movs	r0, r6
   33e50:	f000 fb02 	bl	34458 <memchr>
   33e54:	1c62      	adds	r2, r4, #1
   33e56:	2800      	cmp	r0, #0
   33e58:	d120      	bne.n	33e9c <_svfiprintf_r+0xe4>
   33e5a:	6829      	ldr	r1, [r5, #0]
   33e5c:	06cb      	lsls	r3, r1, #27
   33e5e:	d504      	bpl.n	33e6a <_svfiprintf_r+0xb2>
   33e60:	2353      	movs	r3, #83	; 0x53
   33e62:	ae02      	add	r6, sp, #8
   33e64:	3020      	adds	r0, #32
   33e66:	199b      	adds	r3, r3, r6
   33e68:	7018      	strb	r0, [r3, #0]
   33e6a:	070b      	lsls	r3, r1, #28
   33e6c:	d504      	bpl.n	33e78 <_svfiprintf_r+0xc0>
   33e6e:	2353      	movs	r3, #83	; 0x53
   33e70:	202b      	movs	r0, #43	; 0x2b
   33e72:	ae02      	add	r6, sp, #8
   33e74:	199b      	adds	r3, r3, r6
   33e76:	7018      	strb	r0, [r3, #0]
   33e78:	7823      	ldrb	r3, [r4, #0]
   33e7a:	2b2a      	cmp	r3, #42	; 0x2a
   33e7c:	d016      	beq.n	33eac <_svfiprintf_r+0xf4>
   33e7e:	2000      	movs	r0, #0
   33e80:	210a      	movs	r1, #10
   33e82:	9b09      	ldr	r3, [sp, #36]	; 0x24
   33e84:	7822      	ldrb	r2, [r4, #0]
   33e86:	3a30      	subs	r2, #48	; 0x30
   33e88:	2a09      	cmp	r2, #9
   33e8a:	d955      	bls.n	33f38 <_svfiprintf_r+0x180>
   33e8c:	2800      	cmp	r0, #0
   33e8e:	d015      	beq.n	33ebc <_svfiprintf_r+0x104>
   33e90:	9309      	str	r3, [sp, #36]	; 0x24
   33e92:	e013      	b.n	33ebc <_svfiprintf_r+0x104>
   33e94:	2b25      	cmp	r3, #37	; 0x25
   33e96:	d0b5      	beq.n	33e04 <_svfiprintf_r+0x4c>
   33e98:	3401      	adds	r4, #1
   33e9a:	e7b0      	b.n	33dfe <_svfiprintf_r+0x46>
   33e9c:	2301      	movs	r3, #1
   33e9e:	1b80      	subs	r0, r0, r6
   33ea0:	4083      	lsls	r3, r0
   33ea2:	6829      	ldr	r1, [r5, #0]
   33ea4:	0014      	movs	r4, r2
   33ea6:	430b      	orrs	r3, r1
   33ea8:	602b      	str	r3, [r5, #0]
   33eaa:	e7cd      	b.n	33e48 <_svfiprintf_r+0x90>
   33eac:	9b05      	ldr	r3, [sp, #20]
   33eae:	1d18      	adds	r0, r3, #4
   33eb0:	681b      	ldr	r3, [r3, #0]
   33eb2:	9005      	str	r0, [sp, #20]
   33eb4:	2b00      	cmp	r3, #0
   33eb6:	db39      	blt.n	33f2c <_svfiprintf_r+0x174>
   33eb8:	9309      	str	r3, [sp, #36]	; 0x24
   33eba:	0014      	movs	r4, r2
   33ebc:	7823      	ldrb	r3, [r4, #0]
   33ebe:	2b2e      	cmp	r3, #46	; 0x2e
   33ec0:	d10b      	bne.n	33eda <_svfiprintf_r+0x122>
   33ec2:	7863      	ldrb	r3, [r4, #1]
   33ec4:	1c62      	adds	r2, r4, #1
   33ec6:	2b2a      	cmp	r3, #42	; 0x2a
   33ec8:	d13e      	bne.n	33f48 <_svfiprintf_r+0x190>
   33eca:	9b05      	ldr	r3, [sp, #20]
   33ecc:	3402      	adds	r4, #2
   33ece:	1d1a      	adds	r2, r3, #4
   33ed0:	681b      	ldr	r3, [r3, #0]
   33ed2:	9205      	str	r2, [sp, #20]
   33ed4:	2b00      	cmp	r3, #0
   33ed6:	db34      	blt.n	33f42 <_svfiprintf_r+0x18a>
   33ed8:	9307      	str	r3, [sp, #28]
   33eda:	4e35      	ldr	r6, [pc, #212]	; (33fb0 <_svfiprintf_r+0x1f8>)
   33edc:	7821      	ldrb	r1, [r4, #0]
   33ede:	2203      	movs	r2, #3
   33ee0:	0030      	movs	r0, r6
   33ee2:	f000 fab9 	bl	34458 <memchr>
   33ee6:	2800      	cmp	r0, #0
   33ee8:	d006      	beq.n	33ef8 <_svfiprintf_r+0x140>
   33eea:	2340      	movs	r3, #64	; 0x40
   33eec:	1b80      	subs	r0, r0, r6
   33eee:	4083      	lsls	r3, r0
   33ef0:	682a      	ldr	r2, [r5, #0]
   33ef2:	3401      	adds	r4, #1
   33ef4:	4313      	orrs	r3, r2
   33ef6:	602b      	str	r3, [r5, #0]
   33ef8:	7821      	ldrb	r1, [r4, #0]
   33efa:	2206      	movs	r2, #6
   33efc:	482d      	ldr	r0, [pc, #180]	; (33fb4 <_svfiprintf_r+0x1fc>)
   33efe:	1c66      	adds	r6, r4, #1
   33f00:	7629      	strb	r1, [r5, #24]
   33f02:	f000 faa9 	bl	34458 <memchr>
   33f06:	2800      	cmp	r0, #0
   33f08:	d046      	beq.n	33f98 <_svfiprintf_r+0x1e0>
   33f0a:	4b2b      	ldr	r3, [pc, #172]	; (33fb8 <_svfiprintf_r+0x200>)
   33f0c:	2b00      	cmp	r3, #0
   33f0e:	d12f      	bne.n	33f70 <_svfiprintf_r+0x1b8>
   33f10:	6829      	ldr	r1, [r5, #0]
   33f12:	9b05      	ldr	r3, [sp, #20]
   33f14:	2207      	movs	r2, #7
   33f16:	05c9      	lsls	r1, r1, #23
   33f18:	d528      	bpl.n	33f6c <_svfiprintf_r+0x1b4>
   33f1a:	189b      	adds	r3, r3, r2
   33f1c:	4393      	bics	r3, r2
   33f1e:	3308      	adds	r3, #8
   33f20:	9305      	str	r3, [sp, #20]
   33f22:	696b      	ldr	r3, [r5, #20]
   33f24:	9a03      	ldr	r2, [sp, #12]
   33f26:	189b      	adds	r3, r3, r2
   33f28:	616b      	str	r3, [r5, #20]
   33f2a:	e767      	b.n	33dfc <_svfiprintf_r+0x44>
   33f2c:	425b      	negs	r3, r3
   33f2e:	60eb      	str	r3, [r5, #12]
   33f30:	2302      	movs	r3, #2
   33f32:	430b      	orrs	r3, r1
   33f34:	602b      	str	r3, [r5, #0]
   33f36:	e7c0      	b.n	33eba <_svfiprintf_r+0x102>
   33f38:	434b      	muls	r3, r1
   33f3a:	3401      	adds	r4, #1
   33f3c:	189b      	adds	r3, r3, r2
   33f3e:	2001      	movs	r0, #1
   33f40:	e7a0      	b.n	33e84 <_svfiprintf_r+0xcc>
   33f42:	2301      	movs	r3, #1
   33f44:	425b      	negs	r3, r3
   33f46:	e7c7      	b.n	33ed8 <_svfiprintf_r+0x120>
   33f48:	2300      	movs	r3, #0
   33f4a:	0014      	movs	r4, r2
   33f4c:	200a      	movs	r0, #10
   33f4e:	001a      	movs	r2, r3
   33f50:	606b      	str	r3, [r5, #4]
   33f52:	7821      	ldrb	r1, [r4, #0]
   33f54:	3930      	subs	r1, #48	; 0x30
   33f56:	2909      	cmp	r1, #9
   33f58:	d903      	bls.n	33f62 <_svfiprintf_r+0x1aa>
   33f5a:	2b00      	cmp	r3, #0
   33f5c:	d0bd      	beq.n	33eda <_svfiprintf_r+0x122>
   33f5e:	9207      	str	r2, [sp, #28]
   33f60:	e7bb      	b.n	33eda <_svfiprintf_r+0x122>
   33f62:	4342      	muls	r2, r0
   33f64:	3401      	adds	r4, #1
   33f66:	1852      	adds	r2, r2, r1
   33f68:	2301      	movs	r3, #1
   33f6a:	e7f2      	b.n	33f52 <_svfiprintf_r+0x19a>
   33f6c:	3307      	adds	r3, #7
   33f6e:	e7d5      	b.n	33f1c <_svfiprintf_r+0x164>
   33f70:	ab05      	add	r3, sp, #20
   33f72:	9300      	str	r3, [sp, #0]
   33f74:	003a      	movs	r2, r7
   33f76:	4b11      	ldr	r3, [pc, #68]	; (33fbc <_svfiprintf_r+0x204>)
   33f78:	0029      	movs	r1, r5
   33f7a:	9802      	ldr	r0, [sp, #8]
   33f7c:	e000      	b.n	33f80 <_svfiprintf_r+0x1c8>
   33f7e:	bf00      	nop
   33f80:	9003      	str	r0, [sp, #12]
   33f82:	9b03      	ldr	r3, [sp, #12]
   33f84:	3301      	adds	r3, #1
   33f86:	d1cc      	bne.n	33f22 <_svfiprintf_r+0x16a>
   33f88:	89bb      	ldrh	r3, [r7, #12]
   33f8a:	980b      	ldr	r0, [sp, #44]	; 0x2c
   33f8c:	065b      	lsls	r3, r3, #25
   33f8e:	d400      	bmi.n	33f92 <_svfiprintf_r+0x1da>
   33f90:	e729      	b.n	33de6 <_svfiprintf_r+0x2e>
   33f92:	2001      	movs	r0, #1
   33f94:	4240      	negs	r0, r0
   33f96:	e726      	b.n	33de6 <_svfiprintf_r+0x2e>
   33f98:	ab05      	add	r3, sp, #20
   33f9a:	9300      	str	r3, [sp, #0]
   33f9c:	003a      	movs	r2, r7
   33f9e:	4b07      	ldr	r3, [pc, #28]	; (33fbc <_svfiprintf_r+0x204>)
   33fa0:	0029      	movs	r1, r5
   33fa2:	9802      	ldr	r0, [sp, #8]
   33fa4:	f000 f87a 	bl	3409c <_printf_i>
   33fa8:	e7ea      	b.n	33f80 <_svfiprintf_r+0x1c8>
   33faa:	46c0      	nop			; (mov r8, r8)
   33fac:	0003853a 	.word	0x0003853a
   33fb0:	00038540 	.word	0x00038540
   33fb4:	00038544 	.word	0x00038544
   33fb8:	00000000 	.word	0x00000000
   33fbc:	00033cf5 	.word	0x00033cf5

00033fc0 <_printf_common>:
   33fc0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   33fc2:	0015      	movs	r5, r2
   33fc4:	9301      	str	r3, [sp, #4]
   33fc6:	688a      	ldr	r2, [r1, #8]
   33fc8:	690b      	ldr	r3, [r1, #16]
   33fca:	9000      	str	r0, [sp, #0]
   33fcc:	000c      	movs	r4, r1
   33fce:	4293      	cmp	r3, r2
   33fd0:	da00      	bge.n	33fd4 <_printf_common+0x14>
   33fd2:	0013      	movs	r3, r2
   33fd4:	0022      	movs	r2, r4
   33fd6:	602b      	str	r3, [r5, #0]
   33fd8:	3243      	adds	r2, #67	; 0x43
   33fda:	7812      	ldrb	r2, [r2, #0]
   33fdc:	2a00      	cmp	r2, #0
   33fde:	d001      	beq.n	33fe4 <_printf_common+0x24>
   33fe0:	3301      	adds	r3, #1
   33fe2:	602b      	str	r3, [r5, #0]
   33fe4:	6823      	ldr	r3, [r4, #0]
   33fe6:	069b      	lsls	r3, r3, #26
   33fe8:	d502      	bpl.n	33ff0 <_printf_common+0x30>
   33fea:	682b      	ldr	r3, [r5, #0]
   33fec:	3302      	adds	r3, #2
   33fee:	602b      	str	r3, [r5, #0]
   33ff0:	2706      	movs	r7, #6
   33ff2:	6823      	ldr	r3, [r4, #0]
   33ff4:	401f      	ands	r7, r3
   33ff6:	d027      	beq.n	34048 <_printf_common+0x88>
   33ff8:	0023      	movs	r3, r4
   33ffa:	3343      	adds	r3, #67	; 0x43
   33ffc:	781b      	ldrb	r3, [r3, #0]
   33ffe:	1e5a      	subs	r2, r3, #1
   34000:	4193      	sbcs	r3, r2
   34002:	6822      	ldr	r2, [r4, #0]
   34004:	0692      	lsls	r2, r2, #26
   34006:	d430      	bmi.n	3406a <_printf_common+0xaa>
   34008:	0022      	movs	r2, r4
   3400a:	9901      	ldr	r1, [sp, #4]
   3400c:	3243      	adds	r2, #67	; 0x43
   3400e:	9800      	ldr	r0, [sp, #0]
   34010:	9e08      	ldr	r6, [sp, #32]
   34012:	47b0      	blx	r6
   34014:	1c43      	adds	r3, r0, #1
   34016:	d025      	beq.n	34064 <_printf_common+0xa4>
   34018:	2306      	movs	r3, #6
   3401a:	6820      	ldr	r0, [r4, #0]
   3401c:	682a      	ldr	r2, [r5, #0]
   3401e:	68e1      	ldr	r1, [r4, #12]
   34020:	4003      	ands	r3, r0
   34022:	2500      	movs	r5, #0
   34024:	2b04      	cmp	r3, #4
   34026:	d103      	bne.n	34030 <_printf_common+0x70>
   34028:	1a8d      	subs	r5, r1, r2
   3402a:	43eb      	mvns	r3, r5
   3402c:	17db      	asrs	r3, r3, #31
   3402e:	401d      	ands	r5, r3
   34030:	68a3      	ldr	r3, [r4, #8]
   34032:	6922      	ldr	r2, [r4, #16]
   34034:	4293      	cmp	r3, r2
   34036:	dd01      	ble.n	3403c <_printf_common+0x7c>
   34038:	1a9b      	subs	r3, r3, r2
   3403a:	18ed      	adds	r5, r5, r3
   3403c:	2700      	movs	r7, #0
   3403e:	42bd      	cmp	r5, r7
   34040:	d120      	bne.n	34084 <_printf_common+0xc4>
   34042:	2000      	movs	r0, #0
   34044:	e010      	b.n	34068 <_printf_common+0xa8>
   34046:	3701      	adds	r7, #1
   34048:	68e3      	ldr	r3, [r4, #12]
   3404a:	682a      	ldr	r2, [r5, #0]
   3404c:	1a9b      	subs	r3, r3, r2
   3404e:	429f      	cmp	r7, r3
   34050:	dad2      	bge.n	33ff8 <_printf_common+0x38>
   34052:	0022      	movs	r2, r4
   34054:	2301      	movs	r3, #1
   34056:	3219      	adds	r2, #25
   34058:	9901      	ldr	r1, [sp, #4]
   3405a:	9800      	ldr	r0, [sp, #0]
   3405c:	9e08      	ldr	r6, [sp, #32]
   3405e:	47b0      	blx	r6
   34060:	1c43      	adds	r3, r0, #1
   34062:	d1f0      	bne.n	34046 <_printf_common+0x86>
   34064:	2001      	movs	r0, #1
   34066:	4240      	negs	r0, r0
   34068:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
   3406a:	2030      	movs	r0, #48	; 0x30
   3406c:	18e1      	adds	r1, r4, r3
   3406e:	3143      	adds	r1, #67	; 0x43
   34070:	7008      	strb	r0, [r1, #0]
   34072:	0021      	movs	r1, r4
   34074:	1c5a      	adds	r2, r3, #1
   34076:	3145      	adds	r1, #69	; 0x45
   34078:	7809      	ldrb	r1, [r1, #0]
   3407a:	18a2      	adds	r2, r4, r2
   3407c:	3243      	adds	r2, #67	; 0x43
   3407e:	3302      	adds	r3, #2
   34080:	7011      	strb	r1, [r2, #0]
   34082:	e7c1      	b.n	34008 <_printf_common+0x48>
   34084:	0022      	movs	r2, r4
   34086:	2301      	movs	r3, #1
   34088:	321a      	adds	r2, #26
   3408a:	9901      	ldr	r1, [sp, #4]
   3408c:	9800      	ldr	r0, [sp, #0]
   3408e:	9e08      	ldr	r6, [sp, #32]
   34090:	47b0      	blx	r6
   34092:	1c43      	adds	r3, r0, #1
   34094:	d0e6      	beq.n	34064 <_printf_common+0xa4>
   34096:	3701      	adds	r7, #1
   34098:	e7d1      	b.n	3403e <_printf_common+0x7e>
	...

0003409c <_printf_i>:
   3409c:	b5f0      	push	{r4, r5, r6, r7, lr}
   3409e:	b08b      	sub	sp, #44	; 0x2c
   340a0:	9206      	str	r2, [sp, #24]
   340a2:	000a      	movs	r2, r1
   340a4:	3243      	adds	r2, #67	; 0x43
   340a6:	9307      	str	r3, [sp, #28]
   340a8:	9005      	str	r0, [sp, #20]
   340aa:	9204      	str	r2, [sp, #16]
   340ac:	7e0a      	ldrb	r2, [r1, #24]
   340ae:	000c      	movs	r4, r1
   340b0:	9b10      	ldr	r3, [sp, #64]	; 0x40
   340b2:	2a6e      	cmp	r2, #110	; 0x6e
   340b4:	d100      	bne.n	340b8 <_printf_i+0x1c>
   340b6:	e08f      	b.n	341d8 <_printf_i+0x13c>
   340b8:	d817      	bhi.n	340ea <_printf_i+0x4e>
   340ba:	2a63      	cmp	r2, #99	; 0x63
   340bc:	d02c      	beq.n	34118 <_printf_i+0x7c>
   340be:	d808      	bhi.n	340d2 <_printf_i+0x36>
   340c0:	2a00      	cmp	r2, #0
   340c2:	d100      	bne.n	340c6 <_printf_i+0x2a>
   340c4:	e099      	b.n	341fa <_printf_i+0x15e>
   340c6:	2a58      	cmp	r2, #88	; 0x58
   340c8:	d054      	beq.n	34174 <_printf_i+0xd8>
   340ca:	0026      	movs	r6, r4
   340cc:	3642      	adds	r6, #66	; 0x42
   340ce:	7032      	strb	r2, [r6, #0]
   340d0:	e029      	b.n	34126 <_printf_i+0x8a>
   340d2:	2a64      	cmp	r2, #100	; 0x64
   340d4:	d001      	beq.n	340da <_printf_i+0x3e>
   340d6:	2a69      	cmp	r2, #105	; 0x69
   340d8:	d1f7      	bne.n	340ca <_printf_i+0x2e>
   340da:	6821      	ldr	r1, [r4, #0]
   340dc:	681a      	ldr	r2, [r3, #0]
   340de:	0608      	lsls	r0, r1, #24
   340e0:	d523      	bpl.n	3412a <_printf_i+0x8e>
   340e2:	1d11      	adds	r1, r2, #4
   340e4:	6019      	str	r1, [r3, #0]
   340e6:	6815      	ldr	r5, [r2, #0]
   340e8:	e025      	b.n	34136 <_printf_i+0x9a>
   340ea:	2a73      	cmp	r2, #115	; 0x73
   340ec:	d100      	bne.n	340f0 <_printf_i+0x54>
   340ee:	e088      	b.n	34202 <_printf_i+0x166>
   340f0:	d808      	bhi.n	34104 <_printf_i+0x68>
   340f2:	2a6f      	cmp	r2, #111	; 0x6f
   340f4:	d029      	beq.n	3414a <_printf_i+0xae>
   340f6:	2a70      	cmp	r2, #112	; 0x70
   340f8:	d1e7      	bne.n	340ca <_printf_i+0x2e>
   340fa:	2220      	movs	r2, #32
   340fc:	6809      	ldr	r1, [r1, #0]
   340fe:	430a      	orrs	r2, r1
   34100:	6022      	str	r2, [r4, #0]
   34102:	e003      	b.n	3410c <_printf_i+0x70>
   34104:	2a75      	cmp	r2, #117	; 0x75
   34106:	d020      	beq.n	3414a <_printf_i+0xae>
   34108:	2a78      	cmp	r2, #120	; 0x78
   3410a:	d1de      	bne.n	340ca <_printf_i+0x2e>
   3410c:	0022      	movs	r2, r4
   3410e:	2178      	movs	r1, #120	; 0x78
   34110:	3245      	adds	r2, #69	; 0x45
   34112:	7011      	strb	r1, [r2, #0]
   34114:	4a6c      	ldr	r2, [pc, #432]	; (342c8 <_printf_i+0x22c>)
   34116:	e030      	b.n	3417a <_printf_i+0xde>
   34118:	000e      	movs	r6, r1
   3411a:	681a      	ldr	r2, [r3, #0]
   3411c:	3642      	adds	r6, #66	; 0x42
   3411e:	1d11      	adds	r1, r2, #4
   34120:	6019      	str	r1, [r3, #0]
   34122:	6813      	ldr	r3, [r2, #0]
   34124:	7033      	strb	r3, [r6, #0]
   34126:	2301      	movs	r3, #1
   34128:	e079      	b.n	3421e <_printf_i+0x182>
   3412a:	0649      	lsls	r1, r1, #25
   3412c:	d5d9      	bpl.n	340e2 <_printf_i+0x46>
   3412e:	1d11      	adds	r1, r2, #4
   34130:	6019      	str	r1, [r3, #0]
   34132:	2300      	movs	r3, #0
   34134:	5ed5      	ldrsh	r5, [r2, r3]
   34136:	2d00      	cmp	r5, #0
   34138:	da03      	bge.n	34142 <_printf_i+0xa6>
   3413a:	232d      	movs	r3, #45	; 0x2d
   3413c:	9a04      	ldr	r2, [sp, #16]
   3413e:	426d      	negs	r5, r5
   34140:	7013      	strb	r3, [r2, #0]
   34142:	4b62      	ldr	r3, [pc, #392]	; (342cc <_printf_i+0x230>)
   34144:	270a      	movs	r7, #10
   34146:	9303      	str	r3, [sp, #12]
   34148:	e02f      	b.n	341aa <_printf_i+0x10e>
   3414a:	6820      	ldr	r0, [r4, #0]
   3414c:	6819      	ldr	r1, [r3, #0]
   3414e:	0605      	lsls	r5, r0, #24
   34150:	d503      	bpl.n	3415a <_printf_i+0xbe>
   34152:	1d08      	adds	r0, r1, #4
   34154:	6018      	str	r0, [r3, #0]
   34156:	680d      	ldr	r5, [r1, #0]
   34158:	e005      	b.n	34166 <_printf_i+0xca>
   3415a:	0640      	lsls	r0, r0, #25
   3415c:	d5f9      	bpl.n	34152 <_printf_i+0xb6>
   3415e:	680d      	ldr	r5, [r1, #0]
   34160:	1d08      	adds	r0, r1, #4
   34162:	6018      	str	r0, [r3, #0]
   34164:	b2ad      	uxth	r5, r5
   34166:	4b59      	ldr	r3, [pc, #356]	; (342cc <_printf_i+0x230>)
   34168:	2708      	movs	r7, #8
   3416a:	9303      	str	r3, [sp, #12]
   3416c:	2a6f      	cmp	r2, #111	; 0x6f
   3416e:	d018      	beq.n	341a2 <_printf_i+0x106>
   34170:	270a      	movs	r7, #10
   34172:	e016      	b.n	341a2 <_printf_i+0x106>
   34174:	3145      	adds	r1, #69	; 0x45
   34176:	700a      	strb	r2, [r1, #0]
   34178:	4a54      	ldr	r2, [pc, #336]	; (342cc <_printf_i+0x230>)
   3417a:	9203      	str	r2, [sp, #12]
   3417c:	681a      	ldr	r2, [r3, #0]
   3417e:	6821      	ldr	r1, [r4, #0]
   34180:	1d10      	adds	r0, r2, #4
   34182:	6018      	str	r0, [r3, #0]
   34184:	6815      	ldr	r5, [r2, #0]
   34186:	0608      	lsls	r0, r1, #24
   34188:	d522      	bpl.n	341d0 <_printf_i+0x134>
   3418a:	07cb      	lsls	r3, r1, #31
   3418c:	d502      	bpl.n	34194 <_printf_i+0xf8>
   3418e:	2320      	movs	r3, #32
   34190:	4319      	orrs	r1, r3
   34192:	6021      	str	r1, [r4, #0]
   34194:	2710      	movs	r7, #16
   34196:	2d00      	cmp	r5, #0
   34198:	d103      	bne.n	341a2 <_printf_i+0x106>
   3419a:	2320      	movs	r3, #32
   3419c:	6822      	ldr	r2, [r4, #0]
   3419e:	439a      	bics	r2, r3
   341a0:	6022      	str	r2, [r4, #0]
   341a2:	0023      	movs	r3, r4
   341a4:	2200      	movs	r2, #0
   341a6:	3343      	adds	r3, #67	; 0x43
   341a8:	701a      	strb	r2, [r3, #0]
   341aa:	6863      	ldr	r3, [r4, #4]
   341ac:	60a3      	str	r3, [r4, #8]
   341ae:	2b00      	cmp	r3, #0
   341b0:	db5c      	blt.n	3426c <_printf_i+0x1d0>
   341b2:	2204      	movs	r2, #4
   341b4:	6821      	ldr	r1, [r4, #0]
   341b6:	4391      	bics	r1, r2
   341b8:	6021      	str	r1, [r4, #0]
   341ba:	2d00      	cmp	r5, #0
   341bc:	d158      	bne.n	34270 <_printf_i+0x1d4>
   341be:	9e04      	ldr	r6, [sp, #16]
   341c0:	2b00      	cmp	r3, #0
   341c2:	d064      	beq.n	3428e <_printf_i+0x1f2>
   341c4:	0026      	movs	r6, r4
   341c6:	9b03      	ldr	r3, [sp, #12]
   341c8:	3642      	adds	r6, #66	; 0x42
   341ca:	781b      	ldrb	r3, [r3, #0]
   341cc:	7033      	strb	r3, [r6, #0]
   341ce:	e05e      	b.n	3428e <_printf_i+0x1f2>
   341d0:	0648      	lsls	r0, r1, #25
   341d2:	d5da      	bpl.n	3418a <_printf_i+0xee>
   341d4:	b2ad      	uxth	r5, r5
   341d6:	e7d8      	b.n	3418a <_printf_i+0xee>
   341d8:	6809      	ldr	r1, [r1, #0]
   341da:	681a      	ldr	r2, [r3, #0]
   341dc:	0608      	lsls	r0, r1, #24
   341de:	d505      	bpl.n	341ec <_printf_i+0x150>
   341e0:	1d11      	adds	r1, r2, #4
   341e2:	6019      	str	r1, [r3, #0]
   341e4:	6813      	ldr	r3, [r2, #0]
   341e6:	6962      	ldr	r2, [r4, #20]
   341e8:	601a      	str	r2, [r3, #0]
   341ea:	e006      	b.n	341fa <_printf_i+0x15e>
   341ec:	0649      	lsls	r1, r1, #25
   341ee:	d5f7      	bpl.n	341e0 <_printf_i+0x144>
   341f0:	1d11      	adds	r1, r2, #4
   341f2:	6019      	str	r1, [r3, #0]
   341f4:	6813      	ldr	r3, [r2, #0]
   341f6:	8aa2      	ldrh	r2, [r4, #20]
   341f8:	801a      	strh	r2, [r3, #0]
   341fa:	2300      	movs	r3, #0
   341fc:	9e04      	ldr	r6, [sp, #16]
   341fe:	6123      	str	r3, [r4, #16]
   34200:	e054      	b.n	342ac <_printf_i+0x210>
   34202:	681a      	ldr	r2, [r3, #0]
   34204:	1d11      	adds	r1, r2, #4
   34206:	6019      	str	r1, [r3, #0]
   34208:	6816      	ldr	r6, [r2, #0]
   3420a:	2100      	movs	r1, #0
   3420c:	6862      	ldr	r2, [r4, #4]
   3420e:	0030      	movs	r0, r6
   34210:	f000 f922 	bl	34458 <memchr>
   34214:	2800      	cmp	r0, #0
   34216:	d001      	beq.n	3421c <_printf_i+0x180>
   34218:	1b80      	subs	r0, r0, r6
   3421a:	6060      	str	r0, [r4, #4]
   3421c:	6863      	ldr	r3, [r4, #4]
   3421e:	6123      	str	r3, [r4, #16]
   34220:	2300      	movs	r3, #0
   34222:	9a04      	ldr	r2, [sp, #16]
   34224:	7013      	strb	r3, [r2, #0]
   34226:	e041      	b.n	342ac <_printf_i+0x210>
   34228:	6923      	ldr	r3, [r4, #16]
   3422a:	0032      	movs	r2, r6
   3422c:	9906      	ldr	r1, [sp, #24]
   3422e:	9805      	ldr	r0, [sp, #20]
   34230:	9d07      	ldr	r5, [sp, #28]
   34232:	47a8      	blx	r5
   34234:	1c43      	adds	r3, r0, #1
   34236:	d043      	beq.n	342c0 <_printf_i+0x224>
   34238:	6823      	ldr	r3, [r4, #0]
   3423a:	2500      	movs	r5, #0
   3423c:	079b      	lsls	r3, r3, #30
   3423e:	d40f      	bmi.n	34260 <_printf_i+0x1c4>
   34240:	9b09      	ldr	r3, [sp, #36]	; 0x24
   34242:	68e0      	ldr	r0, [r4, #12]
   34244:	4298      	cmp	r0, r3
   34246:	da3d      	bge.n	342c4 <_printf_i+0x228>
   34248:	0018      	movs	r0, r3
   3424a:	e03b      	b.n	342c4 <_printf_i+0x228>
   3424c:	0022      	movs	r2, r4
   3424e:	2301      	movs	r3, #1
   34250:	3219      	adds	r2, #25
   34252:	9906      	ldr	r1, [sp, #24]
   34254:	9805      	ldr	r0, [sp, #20]
   34256:	9e07      	ldr	r6, [sp, #28]
   34258:	47b0      	blx	r6
   3425a:	1c43      	adds	r3, r0, #1
   3425c:	d030      	beq.n	342c0 <_printf_i+0x224>
   3425e:	3501      	adds	r5, #1
   34260:	68e3      	ldr	r3, [r4, #12]
   34262:	9a09      	ldr	r2, [sp, #36]	; 0x24
   34264:	1a9b      	subs	r3, r3, r2
   34266:	429d      	cmp	r5, r3
   34268:	dbf0      	blt.n	3424c <_printf_i+0x1b0>
   3426a:	e7e9      	b.n	34240 <_printf_i+0x1a4>
   3426c:	2d00      	cmp	r5, #0
   3426e:	d0a9      	beq.n	341c4 <_printf_i+0x128>
   34270:	9e04      	ldr	r6, [sp, #16]
   34272:	0028      	movs	r0, r5
   34274:	0039      	movs	r1, r7
   34276:	f7fc ffbf 	bl	311f8 <__aeabi_uidivmod>
   3427a:	9b03      	ldr	r3, [sp, #12]
   3427c:	3e01      	subs	r6, #1
   3427e:	5c5b      	ldrb	r3, [r3, r1]
   34280:	0028      	movs	r0, r5
   34282:	7033      	strb	r3, [r6, #0]
   34284:	0039      	movs	r1, r7
   34286:	f7fc ff31 	bl	310ec <__udivsi3>
   3428a:	1e05      	subs	r5, r0, #0
   3428c:	d1f1      	bne.n	34272 <_printf_i+0x1d6>
   3428e:	2f08      	cmp	r7, #8
   34290:	d109      	bne.n	342a6 <_printf_i+0x20a>
   34292:	6823      	ldr	r3, [r4, #0]
   34294:	07db      	lsls	r3, r3, #31
   34296:	d506      	bpl.n	342a6 <_printf_i+0x20a>
   34298:	6863      	ldr	r3, [r4, #4]
   3429a:	6922      	ldr	r2, [r4, #16]
   3429c:	4293      	cmp	r3, r2
   3429e:	dc02      	bgt.n	342a6 <_printf_i+0x20a>
   342a0:	2330      	movs	r3, #48	; 0x30
   342a2:	3e01      	subs	r6, #1
   342a4:	7033      	strb	r3, [r6, #0]
   342a6:	9b04      	ldr	r3, [sp, #16]
   342a8:	1b9b      	subs	r3, r3, r6
   342aa:	6123      	str	r3, [r4, #16]
   342ac:	9b07      	ldr	r3, [sp, #28]
   342ae:	aa09      	add	r2, sp, #36	; 0x24
   342b0:	9300      	str	r3, [sp, #0]
   342b2:	0021      	movs	r1, r4
   342b4:	9b06      	ldr	r3, [sp, #24]
   342b6:	9805      	ldr	r0, [sp, #20]
   342b8:	f7ff fe82 	bl	33fc0 <_printf_common>
   342bc:	1c43      	adds	r3, r0, #1
   342be:	d1b3      	bne.n	34228 <_printf_i+0x18c>
   342c0:	2001      	movs	r0, #1
   342c2:	4240      	negs	r0, r0
   342c4:	b00b      	add	sp, #44	; 0x2c
   342c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
   342c8:	0003855c 	.word	0x0003855c
   342cc:	0003854b 	.word	0x0003854b

000342d0 <__sread>:
   342d0:	b570      	push	{r4, r5, r6, lr}
   342d2:	000c      	movs	r4, r1
   342d4:	250e      	movs	r5, #14
   342d6:	5f49      	ldrsh	r1, [r1, r5]
   342d8:	f000 f8f0 	bl	344bc <_read_r>
   342dc:	2800      	cmp	r0, #0
   342de:	db03      	blt.n	342e8 <__sread+0x18>
   342e0:	6d63      	ldr	r3, [r4, #84]	; 0x54
   342e2:	181b      	adds	r3, r3, r0
   342e4:	6563      	str	r3, [r4, #84]	; 0x54
   342e6:	bd70      	pop	{r4, r5, r6, pc}
   342e8:	89a3      	ldrh	r3, [r4, #12]
   342ea:	4a02      	ldr	r2, [pc, #8]	; (342f4 <__sread+0x24>)
   342ec:	4013      	ands	r3, r2
   342ee:	81a3      	strh	r3, [r4, #12]
   342f0:	e7f9      	b.n	342e6 <__sread+0x16>
   342f2:	46c0      	nop			; (mov r8, r8)
   342f4:	ffffefff 	.word	0xffffefff

000342f8 <__swrite>:
   342f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   342fa:	001f      	movs	r7, r3
   342fc:	898b      	ldrh	r3, [r1, #12]
   342fe:	0005      	movs	r5, r0
   34300:	000c      	movs	r4, r1
   34302:	0016      	movs	r6, r2
   34304:	05db      	lsls	r3, r3, #23
   34306:	d505      	bpl.n	34314 <__swrite+0x1c>
   34308:	230e      	movs	r3, #14
   3430a:	5ec9      	ldrsh	r1, [r1, r3]
   3430c:	2200      	movs	r2, #0
   3430e:	2302      	movs	r3, #2
   34310:	f000 f88e 	bl	34430 <_lseek_r>
   34314:	89a3      	ldrh	r3, [r4, #12]
   34316:	4a05      	ldr	r2, [pc, #20]	; (3432c <__swrite+0x34>)
   34318:	0028      	movs	r0, r5
   3431a:	4013      	ands	r3, r2
   3431c:	81a3      	strh	r3, [r4, #12]
   3431e:	0032      	movs	r2, r6
   34320:	230e      	movs	r3, #14
   34322:	5ee1      	ldrsh	r1, [r4, r3]
   34324:	003b      	movs	r3, r7
   34326:	f000 f839 	bl	3439c <_write_r>
   3432a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   3432c:	ffffefff 	.word	0xffffefff

00034330 <__sseek>:
   34330:	b570      	push	{r4, r5, r6, lr}
   34332:	000c      	movs	r4, r1
   34334:	250e      	movs	r5, #14
   34336:	5f49      	ldrsh	r1, [r1, r5]
   34338:	f000 f87a 	bl	34430 <_lseek_r>
   3433c:	89a3      	ldrh	r3, [r4, #12]
   3433e:	1c42      	adds	r2, r0, #1
   34340:	d103      	bne.n	3434a <__sseek+0x1a>
   34342:	4a05      	ldr	r2, [pc, #20]	; (34358 <__sseek+0x28>)
   34344:	4013      	ands	r3, r2
   34346:	81a3      	strh	r3, [r4, #12]
   34348:	bd70      	pop	{r4, r5, r6, pc}
   3434a:	2280      	movs	r2, #128	; 0x80
   3434c:	0152      	lsls	r2, r2, #5
   3434e:	4313      	orrs	r3, r2
   34350:	81a3      	strh	r3, [r4, #12]
   34352:	6560      	str	r0, [r4, #84]	; 0x54
   34354:	e7f8      	b.n	34348 <__sseek+0x18>
   34356:	46c0      	nop			; (mov r8, r8)
   34358:	ffffefff 	.word	0xffffefff

0003435c <__sclose>:
   3435c:	b510      	push	{r4, lr}
   3435e:	230e      	movs	r3, #14
   34360:	5ec9      	ldrsh	r1, [r1, r3]
   34362:	f000 f82f 	bl	343c4 <_close_r>
   34366:	bd10      	pop	{r4, pc}

00034368 <strchr>:
   34368:	b2c9      	uxtb	r1, r1
   3436a:	7803      	ldrb	r3, [r0, #0]
   3436c:	2b00      	cmp	r3, #0
   3436e:	d004      	beq.n	3437a <strchr+0x12>
   34370:	4299      	cmp	r1, r3
   34372:	d100      	bne.n	34376 <strchr+0xe>
   34374:	4770      	bx	lr
   34376:	3001      	adds	r0, #1
   34378:	e7f7      	b.n	3436a <strchr+0x2>
   3437a:	424b      	negs	r3, r1
   3437c:	4159      	adcs	r1, r3
   3437e:	4249      	negs	r1, r1
   34380:	4008      	ands	r0, r1
   34382:	e7f7      	b.n	34374 <strchr+0xc>

00034384 <__ascii_wctomb>:
   34384:	1e0b      	subs	r3, r1, #0
   34386:	d004      	beq.n	34392 <__ascii_wctomb+0xe>
   34388:	2aff      	cmp	r2, #255	; 0xff
   3438a:	d904      	bls.n	34396 <__ascii_wctomb+0x12>
   3438c:	238a      	movs	r3, #138	; 0x8a
   3438e:	6003      	str	r3, [r0, #0]
   34390:	3b8b      	subs	r3, #139	; 0x8b
   34392:	0018      	movs	r0, r3
   34394:	4770      	bx	lr
   34396:	700a      	strb	r2, [r1, #0]
   34398:	2301      	movs	r3, #1
   3439a:	e7fa      	b.n	34392 <__ascii_wctomb+0xe>

0003439c <_write_r>:
   3439c:	b570      	push	{r4, r5, r6, lr}
   3439e:	0005      	movs	r5, r0
   343a0:	0008      	movs	r0, r1
   343a2:	0011      	movs	r1, r2
   343a4:	2200      	movs	r2, #0
   343a6:	4c06      	ldr	r4, [pc, #24]	; (343c0 <_write_r+0x24>)
   343a8:	6022      	str	r2, [r4, #0]
   343aa:	001a      	movs	r2, r3
   343ac:	f7f5 faa8 	bl	29900 <_write>
   343b0:	1c43      	adds	r3, r0, #1
   343b2:	d103      	bne.n	343bc <_write_r+0x20>
   343b4:	6823      	ldr	r3, [r4, #0]
   343b6:	2b00      	cmp	r3, #0
   343b8:	d000      	beq.n	343bc <_write_r+0x20>
   343ba:	602b      	str	r3, [r5, #0]
   343bc:	bd70      	pop	{r4, r5, r6, pc}
   343be:	46c0      	nop			; (mov r8, r8)
   343c0:	20005730 	.word	0x20005730

000343c4 <_close_r>:
   343c4:	2300      	movs	r3, #0
   343c6:	b570      	push	{r4, r5, r6, lr}
   343c8:	4c06      	ldr	r4, [pc, #24]	; (343e4 <_close_r+0x20>)
   343ca:	0005      	movs	r5, r0
   343cc:	0008      	movs	r0, r1
   343ce:	6023      	str	r3, [r4, #0]
   343d0:	f7f5 faea 	bl	299a8 <_close>
   343d4:	1c43      	adds	r3, r0, #1
   343d6:	d103      	bne.n	343e0 <_close_r+0x1c>
   343d8:	6823      	ldr	r3, [r4, #0]
   343da:	2b00      	cmp	r3, #0
   343dc:	d000      	beq.n	343e0 <_close_r+0x1c>
   343de:	602b      	str	r3, [r5, #0]
   343e0:	bd70      	pop	{r4, r5, r6, pc}
   343e2:	46c0      	nop			; (mov r8, r8)
   343e4:	20005730 	.word	0x20005730

000343e8 <_fstat_r>:
   343e8:	2300      	movs	r3, #0
   343ea:	b570      	push	{r4, r5, r6, lr}
   343ec:	4c06      	ldr	r4, [pc, #24]	; (34408 <_fstat_r+0x20>)
   343ee:	0005      	movs	r5, r0
   343f0:	0008      	movs	r0, r1
   343f2:	0011      	movs	r1, r2
   343f4:	6023      	str	r3, [r4, #0]
   343f6:	f7f5 fae1 	bl	299bc <_fstat>
   343fa:	1c43      	adds	r3, r0, #1
   343fc:	d103      	bne.n	34406 <_fstat_r+0x1e>
   343fe:	6823      	ldr	r3, [r4, #0]
   34400:	2b00      	cmp	r3, #0
   34402:	d000      	beq.n	34406 <_fstat_r+0x1e>
   34404:	602b      	str	r3, [r5, #0]
   34406:	bd70      	pop	{r4, r5, r6, pc}
   34408:	20005730 	.word	0x20005730

0003440c <_isatty_r>:
   3440c:	2300      	movs	r3, #0
   3440e:	b570      	push	{r4, r5, r6, lr}
   34410:	4c06      	ldr	r4, [pc, #24]	; (3442c <_isatty_r+0x20>)
   34412:	0005      	movs	r5, r0
   34414:	0008      	movs	r0, r1
   34416:	6023      	str	r3, [r4, #0]
   34418:	f7f5 fade 	bl	299d8 <_isatty>
   3441c:	1c43      	adds	r3, r0, #1
   3441e:	d103      	bne.n	34428 <_isatty_r+0x1c>
   34420:	6823      	ldr	r3, [r4, #0]
   34422:	2b00      	cmp	r3, #0
   34424:	d000      	beq.n	34428 <_isatty_r+0x1c>
   34426:	602b      	str	r3, [r5, #0]
   34428:	bd70      	pop	{r4, r5, r6, pc}
   3442a:	46c0      	nop			; (mov r8, r8)
   3442c:	20005730 	.word	0x20005730

00034430 <_lseek_r>:
   34430:	b570      	push	{r4, r5, r6, lr}
   34432:	0005      	movs	r5, r0
   34434:	0008      	movs	r0, r1
   34436:	0011      	movs	r1, r2
   34438:	2200      	movs	r2, #0
   3443a:	4c06      	ldr	r4, [pc, #24]	; (34454 <_lseek_r+0x24>)
   3443c:	6022      	str	r2, [r4, #0]
   3443e:	001a      	movs	r2, r3
   34440:	f7f5 fad3 	bl	299ea <_lseek>
   34444:	1c43      	adds	r3, r0, #1
   34446:	d103      	bne.n	34450 <_lseek_r+0x20>
   34448:	6823      	ldr	r3, [r4, #0]
   3444a:	2b00      	cmp	r3, #0
   3444c:	d000      	beq.n	34450 <_lseek_r+0x20>
   3444e:	602b      	str	r3, [r5, #0]
   34450:	bd70      	pop	{r4, r5, r6, pc}
   34452:	46c0      	nop			; (mov r8, r8)
   34454:	20005730 	.word	0x20005730

00034458 <memchr>:
   34458:	b2c9      	uxtb	r1, r1
   3445a:	1882      	adds	r2, r0, r2
   3445c:	4290      	cmp	r0, r2
   3445e:	d101      	bne.n	34464 <memchr+0xc>
   34460:	2000      	movs	r0, #0
   34462:	4770      	bx	lr
   34464:	7803      	ldrb	r3, [r0, #0]
   34466:	428b      	cmp	r3, r1
   34468:	d0fb      	beq.n	34462 <memchr+0xa>
   3446a:	3001      	adds	r0, #1
   3446c:	e7f6      	b.n	3445c <memchr+0x4>

0003446e <_realloc_r>:
   3446e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   34470:	0007      	movs	r7, r0
   34472:	000d      	movs	r5, r1
   34474:	0016      	movs	r6, r2
   34476:	2900      	cmp	r1, #0
   34478:	d105      	bne.n	34486 <_realloc_r+0x18>
   3447a:	0011      	movs	r1, r2
   3447c:	f7fe fe9e 	bl	331bc <_malloc_r>
   34480:	0004      	movs	r4, r0
   34482:	0020      	movs	r0, r4
   34484:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   34486:	2a00      	cmp	r2, #0
   34488:	d103      	bne.n	34492 <_realloc_r+0x24>
   3448a:	f7fe fe4d 	bl	33128 <_free_r>
   3448e:	0034      	movs	r4, r6
   34490:	e7f7      	b.n	34482 <_realloc_r+0x14>
   34492:	f000 f827 	bl	344e4 <_malloc_usable_size_r>
   34496:	002c      	movs	r4, r5
   34498:	4286      	cmp	r6, r0
   3449a:	d9f2      	bls.n	34482 <_realloc_r+0x14>
   3449c:	0031      	movs	r1, r6
   3449e:	0038      	movs	r0, r7
   344a0:	f7fe fe8c 	bl	331bc <_malloc_r>
   344a4:	1e04      	subs	r4, r0, #0
   344a6:	d0ec      	beq.n	34482 <_realloc_r+0x14>
   344a8:	0029      	movs	r1, r5
   344aa:	0032      	movs	r2, r6
   344ac:	f7fe fe18 	bl	330e0 <memcpy>
   344b0:	0029      	movs	r1, r5
   344b2:	0038      	movs	r0, r7
   344b4:	f7fe fe38 	bl	33128 <_free_r>
   344b8:	e7e3      	b.n	34482 <_realloc_r+0x14>
	...

000344bc <_read_r>:
   344bc:	b570      	push	{r4, r5, r6, lr}
   344be:	0005      	movs	r5, r0
   344c0:	0008      	movs	r0, r1
   344c2:	0011      	movs	r1, r2
   344c4:	2200      	movs	r2, #0
   344c6:	4c06      	ldr	r4, [pc, #24]	; (344e0 <_read_r+0x24>)
   344c8:	6022      	str	r2, [r4, #0]
   344ca:	001a      	movs	r2, r3
   344cc:	f7f5 f9ee 	bl	298ac <_read>
   344d0:	1c43      	adds	r3, r0, #1
   344d2:	d103      	bne.n	344dc <_read_r+0x20>
   344d4:	6823      	ldr	r3, [r4, #0]
   344d6:	2b00      	cmp	r3, #0
   344d8:	d000      	beq.n	344dc <_read_r+0x20>
   344da:	602b      	str	r3, [r5, #0]
   344dc:	bd70      	pop	{r4, r5, r6, pc}
   344de:	46c0      	nop			; (mov r8, r8)
   344e0:	20005730 	.word	0x20005730

000344e4 <_malloc_usable_size_r>:
   344e4:	1f0b      	subs	r3, r1, #4
   344e6:	681b      	ldr	r3, [r3, #0]
   344e8:	1f18      	subs	r0, r3, #4
   344ea:	2b00      	cmp	r3, #0
   344ec:	da01      	bge.n	344f2 <_malloc_usable_size_r+0xe>
   344ee:	580b      	ldr	r3, [r1, r0]
   344f0:	18c0      	adds	r0, r0, r3
   344f2:	4770      	bx	lr

000344f4 <pcWelcomeMessage>:
   344f4:	7246 6565 5452 534f 4320 494c 0d2e 540a     FreeRTOS CLI...T
   34504:	7079 2065 6548 706c 7420 206f 6976 7765     ype Help to view
   34514:	6120 6c20 7369 2074 666f 7220 6765 7369      a list of regis
   34524:	6574 6572 2064 6f63 6d6d 6e61 7364 0d2e     tered commands..
   34534:	000a 0000 7766 0000 7766 203a 6f44 6e77     ....fw..fw: Down
   34544:	6f6c 6461 6120 6620 6c69 2065 6e61 2064     load a file and 
   34554:	6570 6672 726f 206d 6e61 4620 2057 7075     perform an FW up
   34564:	6164 6574 0a0d 0000 6572 6573 0074 0000     date....reset...
   34574:	6572 6573 3a74 5220 7365 7465 2073 6874     reset: Resets th
   34584:	2065 6564 6976 6563 0a0d 0000 3269 0063     e device....i2c.
   34594:	3269 3a63 5320 6163 736e 4920 4332 6220     i2c: Scans I2C b
   345a4:	7375 0a0d 0000 0000 6576 7372 6f69 006e     us......version.
   345b4:	6576 7372 6f69 3a6e 5020 6972 746e 2073     version: Prints 
   345c4:	6874 2065 6966 6d72 6177 6572 7620 7265     the firmware ver
   345d4:	6973 6e6f 0d2e 000a 6974 6b63 0073 0000     sion....ticks...
   345e4:	6974 6b63 3a73 5020 6972 746e 2073 6874     ticks: Prints th
   345f4:	2065 756e 626d 7265 6f20 2066 6974 6b63     e number of tick
   34604:	2073 6973 636e 2065 6874 2065 6373 6568     s since the sche
   34614:	7564 656c 2072 7473 7261 6574 2e64 0a0d     duler started...
   34624:	0000 0000 6d69 0075 6d69 3a75 5020 6972     ....imu.imu: Pri
   34634:	746e 2073 3031 3030 7320 6d61 6c70 7365     nts 1000 samples
   34644:	6f20 2066 6361 6563 656c 6172 6974 6e6f      of acceleration
   34654:	202e 0a0d 0000 0000 6168 7470 6369 0000     . ......haptic..
   34664:	6168 7470 6369 203a 6956 7262 7461 2065     haptic: Vibrate 
   34674:	6f4d 6f74 2e72 0d20 000a 0000 656c 0064     Motor. .....led.
   34684:	656c 3a64 5320 7465 4c20 4445 5320 7274     led: Set LED Str
   34694:	7069 6320 6c6f 726f 0a0d 0000 6c63 0073     ip color....cls.
   346a4:	6c63 3a73 4320 656c 7261 2073 6874 2065     cls: Clears the 
   346b4:	6574 6d72 6e69 6c61 7320 7263 6565 0d6e     terminal screen.
   346c4:	000a 0000 6f43 6c75 2064 6f6e 2074 6c61     ....Could not al
   346d4:	6f6c 6163 6574 7320 6d65 7061 6f68 6572     locate semaphore
   346e4:	0a0d 0000 0a0d 0000 616f 0000 6325 325b     ........oa..%c[2
   346f4:	0d4b 003e 2008 0008 6325 325b 004a 0000     K.>.. ..%c[2J...
   34704:	2e30 2e30 0031 0000 6946 6d72 6177 6572     0.0.1...Firmware
   34714:	5620 7265 6973 6e6f 203a 7325 0a0d 0000      Version: %s....
   34724:	6954 6b63 2073 6973 636e 2065 7473 7261     Ticks since star
   34734:	3a74 2520 756c 0a0d 0000 0000 2030 3120     t: %lu......0  1
   34744:	2020 2032 3320 2020 2034 3520 2020 2036       2  3  4  5  6 
   34754:	3720 2020 2038 3920 2020 2061 6220 2020      7  8  9  a  b  
   34764:	2063 6420 2020 2065 6620 0a0d 0000 0000     c  d  e  f......
   34774:	3025 7832 203a 0000 2058 0000 7841 203a     %02x: ..X ..Ax: 
   34784:	6425 202c 7941 203a 6425 202c 7a41 203a     %d, Ay: %d, Az: 
   34794:	6425 0a0d 0000 0000 6f47 4320 6d6f 616d     %d......Go Comma
   347a4:	646e 5320 6e65 0d74 000a 0000 454c 2044     nd Sent.....LED 
   347b4:	6f43 6d6d 6e61 2064 6573 746e 0a0d 0000     Command sent....

000347c4 <xOTAUCommand>:
   347c4:	4538 0003 453c 0003 3255 0001 0000 0000     8E..<E..U2......

000347d4 <xResetCommand>:
   347d4:	456c 0003 4574 0003 328d 0001 0000 0000     lE..tE...2......

000347e4 <xI2cScan>:
   347e4:	4590 0003 4594 0003 3315 0001 0000 0000     .E...E...3......

000347f4 <xVersionCommand>:
   347f4:	45ac 0003 45b4 0003 32ad 0001 0000 0000     .E...E...2......

00034804 <xTicksCommand>:
   34804:	45dc 0003 45e4 0003 32dd 0001 0000 0000     .E...E...2......

00034814 <xGetIMUDataCommand>:
   34814:	4628 0003 462c 0003 3441 0001 0000 0000     (F..,F..A4......

00034824 <xGetHapticCommand>:
   34824:	465c 0003 4664 0003 3529 0001 0000 0000     \F..dF..)5......

00034834 <xSetLEDCommand>:
   34834:	4680 0003 4684 0003 356d 0001 0000 0000     .F...F..m5......

00034844 <xClearScreen>:
   34844:	46a0 0003 46a4 0003 320d 0001 0000 0000     .F...F...2......

00034854 <main_mqtt_broker>:
   34854:	3235 322e 3234 372e 2e33 3736 0000 0000     52.242.73.67....
   34864:	3025 6433 0000 0000 7473 7261 5f74 6f64     %03d....start_do
   34874:	6e77 6f6c 6461 203a 4d4d 2043 7473 726f     wnload: MMC stor
   34884:	6761 2065 6f6e 2074 6572 6461 2e79 0a0d     age not ready...
   34894:	0000 0000 7473 7261 5f74 6f64 6e77 6f6c     ....start_downlo
   348a4:	6461 203a 6957 462d 2069 7369 6e20 746f     ad: Wi-Fi is not
   348b4:	6320 6e6f 656e 7463 6465 0d2e 000a 0000      connected......
   348c4:	7473 7261 5f74 6f64 6e77 6f6c 6461 203a     start_download: 
   348d4:	6572 7571 7365 2074 7369 7320 6e65 2074     request is sent 
   348e4:	6c61 6572 6461 2e79 0a0d 0000 7473 7261     already.....star
   348f4:	5f74 6f64 6e77 6f6c 6461 203a 7572 6e6e     t_download: runn
   34904:	6e69 2067 6f64 6e77 6f6c 6461 6120 726c     ing download alr
   34914:	6165 7964 0d2e 000a 7473 7261 5f74 6f64     eady....start_do
   34924:	6e77 6f6c 6461 203a 6573 646e 6e69 2067     wnload: sending 
   34934:	5448 5054 7220 7165 6575 7473 2e2e 0d2e     HTTP request....
   34944:	000a 0000 7468 7074 2f3a 352f 2e32 3432     ....http://52.24
   34954:	2e32 3337 362e 2f37 6554 7473 2e41 6962     2.73.67/TestA.bi
   34964:	006e 0000 7473 726f 5f65 6966 656c 705f     n...store_file_p
   34974:	6361 656b 3a74 6520 706d 7974 6420 7461     acket: empty dat
   34984:	2e61 0a0d 0000 0000 7473 726f 5f65 6966     a.......store_fi
   34994:	656c 705f 6361 656b 3a74 6620 6c69 2065     le_packet: file 
   349a4:	616e 656d 6920 2073 6e69 6176 696c 2e64     name is invalid.
   349b4:	4420 776f 6c6e 616f 2064 6163 636e 6c65      Download cancel
   349c4:	6465 0d2e 000a 0000 7473 726f 5f65 6966     ed......store_fi
   349d4:	656c 705f 6361 656b 3a74 6320 6572 7461     le_packet: creat
   349e4:	6e69 2067 6966 656c 5b20 7325 0d5d 000a     ing file [%s]...
   349f4:	7473 726f 5f65 6966 656c 705f 6361 656b     store_file_packe
   34a04:	3a74 6620 6c69 2065 7263 6165 6974 6e6f     t: file creation
   34a14:	6520 7272 726f 2021 6572 3a74 6425 0a0d      error! ret:%d..
   34a24:	0000 0000 7473 726f 5f65 6966 656c 705f     ....store_file_p
   34a34:	6361 656b 3a74 6620 6c69 2065 7277 7469     acket: file writ
   34a44:	2065 7265 6f72 2c72 6420 776f 6c6e 616f     e error, downloa
   34a54:	2064 6163 636e 6c65 6465 0d2e 000a 0000     d canceled......
   34a64:	7473 726f 5f65 6966 656c 705f 6361 656b     store_file_packe
   34a74:	3a74 7220 6365 6965 6576 5b64 6c25 5d75     t: received[%lu]
   34a84:	202c 6966 656c 7320 7a69 5b65 6c25 5d75     , file size[%lu]
   34a94:	0a0d 0000 7473 726f 5f65 6966 656c 705f     ....store_file_p
   34aa4:	6361 656b 3a74 6620 6c69 2065 6f64 6e77     acket: file down
   34ab4:	6f6c 6461 6465 7320 6375 6563 7373 7566     loaded successfu
   34ac4:	6c6c 2e79 0a0d 0000 7468 7074 635f 696c     lly.....http_cli
   34ad4:	6e65 5f74 6163 6c6c 6162 6b63 203a 5448     ent_callback: HT
   34ae4:	5054 6320 696c 6e65 2074 6f73 6b63 7465     TP client socket
   34af4:	6320 6e6f 656e 7463 6465 0d2e 000a 0000      connected......
   34b04:	7468 7074 635f 696c 6e65 5f74 6163 6c6c     http_client_call
   34b14:	6162 6b63 203a 6572 7571 7365 2074 6f63     back: request co
   34b24:	706d 656c 6574 2e64 0a0d 0000 7468 7074     mpleted.....http
   34b34:	635f 696c 6e65 5f74 6163 6c6c 6162 6b63     _client_callback
   34b44:	203a 6572 6563 7669 6465 7220 7365 6f70     : received respo
   34b54:	736e 2065 7525 6420 7461 2061 6973 657a     nse %u data size
   34b64:	2520 0d75 000a 0000 7468 7074 635f 696c      %u.....http_cli
   34b74:	6e65 5f74 6163 6c6c 6162 6b63 203a 6964     ent_callback: di
   34b84:	6373 6e6f 656e 7463 6f69 206e 6572 7361     sconnection reas
   34b94:	6e6f 253a 0d64 000a 6572 6f73 766c 5f65     on:%d...resolve_
   34ba4:	6263 203a 7325 4920 2050 6461 7264 7365     cb: %s IP addres
   34bb4:	2073 7369 2520 2e64 6425 252e 2e64 6425     s is %d.%d.%d.%d
   34bc4:	0a0d 0a0d 0000 0000 6977 6966 635f 3a62     ........wifi_cb:
   34bd4:	4d20 4d32 575f 4649 5f49 4f43 4e4e 4345      M2M_WIFI_CONNEC
   34be4:	4554 0d44 000a 0000 6977 6966 635f 3a62     TED.....wifi_cb:
   34bf4:	4d20 4d32 575f 4649 5f49 4944 4353 4e4f      M2M_WIFI_DISCON
   34c04:	454e 5443 4445 0a0d 0000 0000 6d61 676f     NECTED......amog
   34c14:	3168 3332 0000 0000 6153 7275 6261 0068     h123....Saurabh.
   34c24:	6977 6966 635f 3a62 4920 2050 6461 7264     wifi_cb: IP addr
   34c34:	7365 2073 7369 2520 2e75 7525 252e 2e75     ess is %u.%u.%u.
   34c44:	7525 0a0d 0000 0000 7245 6f72 2072 6f63     %u......Error co
   34c54:	6e6e 6365 6974 676e 7420 206f 514d 5454     nnecting to MQTT
   34c64:	4220 6f72 656b 2172 0a0d 0000 6e69 7469      Broker!....init
   34c74:	735f 6f74 6172 6567 203a 6c70 6165 6573     _storage: please
   34c84:	7020 756c 2067 6e61 5320 2f44 4d4d 2043      plug an SD/MMC 
   34c94:	6163 6472 6920 206e 6c73 746f 2e2e 0d2e     card in slot....
   34ca4:	000a 0000 6e69 7469 735f 6f74 6172 6567     ....init_storage
   34cb4:	203a 4453 4320 7261 2064 6e69 7473 6c61     : SD Card instal
   34cc4:	206c 6166 6c69 6465 0d2e 000a 6e69 7469     l failed....init
   34cd4:	735f 6f74 6172 6567 203a 7274 2079 6e75     _storage: try un
   34ce4:	6c70 6775 6120 646e 7220 2d65 6c70 6775     plug and re-plug
   34cf4:	7420 6568 6320 7261 2e64 0a0d 0000 0000      the card.......
   34d04:	6e69 7469 735f 6f74 6172 6567 203a 6f6d     init_storage: mo
   34d14:	6e75 6974 676e 5320 2044 6163 6472 2e2e     unting SD card..
   34d24:	0d2e 000a 6e69 7469 735f 6f74 6172 6567     ....init_storage
   34d34:	203a 4453 6320 7261 2064 6f6d 6e75 2074     : SD card mount 
   34d44:	6166 6c69 6465 2021 7228 7365 2520 2964     failed! (res %d)
   34d54:	0a0d 0000 6e69 7469 735f 6f74 6172 6567     ....init_storage
   34d64:	203a 4453 6320 7261 2064 6f6d 6e75 2074     : SD card mount 
   34d74:	4b4f 0d2e 000a 0000 6f63 666e 6769 7275     OK......configur
   34d84:	5f65 7468 7074 635f 696c 6e65 3a74 4820     e_http_client: H
   34d94:	5454 2050 6c63 6569 746e 6920 696e 6974     TTP client initi
   34da4:	6c61 7a69 7461 6f69 206e 6166 6c69 6465     alization failed
   34db4:	2021 7228 7365 2520 2964 0a0d 0000 0000     ! (res %d)......
   34dc4:	227b 6167 656d 3a22 005b 0000 0a0d 6147     {"game":[.....Ga
   34dd4:	656d 6d20 7365 6173 6567 7220 6365 6965     me message recei
   34de4:	6576 2164 0a0d 0000 0a0d 2520 2a2e 0073     ved!...... %.*s.
   34df4:	2e25 732a 0000 0000 0a0d 6150 7372 6465     %.*s......Parsed
   34e04:	4320 6d6f 616d 646e 203a 0000 6425 002c      Command: ..%d,.
   34e14:	0a0d 6147 656d 6d20 7365 6173 6567 7220     ..Game message r
   34e24:	6365 6965 6576 2064 7562 2074 6f6e 2074     eceived but not 
   34e34:	6e75 6564 7372 6f74 646f 0d21 000a 0000     understood!.....
   34e44:	0a0d 4d49 2055 6f74 6970 2063 6572 6563     ..IMU topic rece
   34e54:	7669 6465 0d21 000a 0a0d 6944 7473 6e61     ived!.....Distan
   34e64:	6563 7420 706f 6369 7220 6365 6965 6576     ce topic receive
   34e74:	2164 0a0d 0000 0000 3e20 203e 0000 0000     d!...... >> ....
   34e84:	3150 4c5f 4445 455f 4553 3135 5f36 3054     P1_LED_ESE516_T0
   34e94:	0000 0000 6166 736c 0065 0000 7274 6575     ....false...true
   34ea4:	0000 0000 0a0d 6f43 6e6e 6365 6974 676e     ......Connecting
   34eb4:	7420 206f 7242 6b6f 7265 2e2e 002e 0000      to Broker......
   34ec4:	6843 6e61 7067 6e69 3167 4032 0000 0000     Changping12@....
   34ed4:	7a61 7275 7565 6573 0072 0000 514d 5454     azureuser...MQTT
   34ee4:	2020 7245 6f72 2072 202d 4f4e 2054 6f43       Error - NOT Co
   34ef4:	6e6e 6365 6574 2064 6f74 6220 6f72 656b     nnected to broke
   34f04:	0d72 000a 514d 5454 4320 6e6f 656e 7463     r...MQTT Connect
   34f14:	6465 7420 206f 7262 6b6f 7265 0a0d 0000     ed to broker....
   34f24:	6f43 6e6e 6365 2074 6166 6c69 7420 206f     Connect fail to 
   34f34:	6573 7672 7265 2528 2973 2021 6572 7274     server(%s)! retr
   34f44:	2079 7469 6120 7475 6d6f 7461 6369 6c61     y it automatical
   34f54:	796c 0d2e 000a 0000 3150 475f 4d41 5f45     ly......P1_GAME_
   34f64:	5345 3545 3631 545f 0030 0000 3150 495f     ESE516_T0...P1_I
   34f74:	554d 455f 4553 3135 5f36 3054 0000 0000     MU_ESE516_T0....
   34f84:	514d 5454 4320 6e6f 656e 7463 6465 0a0d     MQTT Connected..
   34f94:	0000 0000 514d 5454 6220 6f72 656b 2072     ....MQTT broker 
   34fa4:	6564 6c63 6e69 2065 6f79 7275 6120 6363     decline your acc
   34fb4:	7365 2173 6520 7272 726f 6320 646f 2065     ess! error code 
   34fc4:	6425 0a0d 0000 0000 514d 5454 6420 7369     %d......MQTT dis
   34fd4:	6f63 6e6e 6365 6574 0d64 000a 514d 5454     connected...MQTT
   34fe4:	6920 696e 6974 6c61 7a69 7461 6f69 206e      initialization 
   34ff4:	6166 6c69 6465 202e 7245 6f72 2072 6f63     failed. Error co
   35004:	6564 6920 2073 2528 2964 0a0d 0000 0000     de is (%d)......
   35014:	514d 5454 7220 6765 7369 6574 2072 6163     MQTT register ca
   35024:	6c6c 6162 6b63 6620 6961 656c 2e64 4520     llback failed. E
   35034:	7272 726f 6320 646f 2065 7369 2820 6425     rror code is (%d
   35044:	0d29 000a 6425 0000 465b 4941 5d4c 7220     )...%d..[FAIL] r
   35054:	7365 2520 0d64 000a 6c46 6761 2e41 7874     es %d...FlagA.tx
   35064:	2074 6461 6564 2164 0a0d 0000 3a30 6c46     t added!....0:Fl
   35074:	6761 2e41 7874 0074 6f43 6e6e 6365 6574     agA.txt.Connecte
   35084:	2064 6f74 4d20 5451 2054 7242 6b6f 7265     d to MQTT Broker
   35094:	0d21 000a 227b 6d69 7875 3a22 6425 202c     !...{"imux":%d, 
   350a4:	6922 756d 2279 203a 6425 202c 6922 756d     "imuy": %d, "imu
   350b4:	227a 203a 6425 007d 7d5d 0000 0a0d 0000     z": %d}.]}......
   350c4:	3250 475f 4d41 5f45 5345 3545 3631 545f     P2_GAME_ESE516_T
   350d4:	0030 0000 5245 4f52 2052 6e49 7469 6169     0...ERROR Initia
   350e4:	696c 697a 676e 5720 6669 2069 6144 6174     lizing Wifi Data
   350f4:	7120 6575 6575 2173 0a0d 0000 5345 3545      queues!....ESE5
   35104:	3631 2d20 5720 6669 2069 6e49 7469 4320     16 - Wifi Init C
   35114:	646f 0d65 000a 0000 616d 6e69 203a 326d     ode.....main: m2
   35124:	5f6d 6977 6966 695f 696e 2074 6163 6c6c     m_wifi_init call
   35134:	6520 7272 726f 2021 7228 7365 2520 2964      error! (res %d)
   35144:	0a0d 0000 616d 6e69 203a 6f63 6e6e 6365     ....main: connec
   35154:	6974 676e 7420 206f 6957 6946 4120 2050     ting to WiFi AP 
   35164:	7325 2e2e 0d2e 000a 3150 545f 4d45 4550     %s......P1_TEMPE
   35174:	4152 5554 4552 455f 4553 3135 5f36 3054     RATURE_ESE516_T0
   35184:	0000 0000 514d 5454 7320 6e65 2064 7325     ....MQTT send %s
   35194:	0a0d 0000 4c08 0001 4c14 0001 4c26 0001     .....L...L..&L..
   351a4:	4c7c 0001 4c9c 0001 6568 706c 0000 0000     |L...L..help....
   351b4:	0a0d 6568 706c 0d3a 200a 694c 7473 2073     ..help:.. Lists 
   351c4:	6c61 206c 6874 2065 6572 6967 7473 7265     all the register
   351d4:	6465 6320 6d6f 616d 646e 0d73 0d0a 000a     ed commands.....
   351e4:	6e49 6f63 7272 6365 2074 6f63 6d6d 6e61     Incorrect comman
   351f4:	2064 6170 6172 656d 6574 2872 2973 202e     d parameter(s). 
   35204:	4520 746e 7265 2220 6568 706c 2022 6f74      Enter "help" to
   35214:	7620 6569 2077 2061 696c 7473 6f20 2066      view a list of 
   35224:	7661 6961 616c 6c62 2065 6f63 6d6d 6e61     available comman
   35234:	7364 0d2e 0d0a 000a 6f43 6d6d 6e61 2064     ds......Command 
   35244:	6f6e 2074 6572 6f63 6e67 7369 6465 202e     not recognised. 
   35254:	4520 746e 7265 2720 6568 706c 2027 6f74      Enter 'help' to
   35264:	7620 6569 2077 2061 696c 7473 6f20 2066      view a list of 
   35274:	7661 6961 616c 6c62 2065 6f63 6d6d 6e61     available comman
   35284:	7364 0d2e 0d0a 000a                         ds......

0003528c <xHelpCommand>:
   3528c:	51ac 0003 51b4 0003 6785 0001 0000 0000     .Q...Q...g......
   3529c:	5476 6172 6563 6e45 6261 656c 5428 4352     vTraceEnable(TRC
   352ac:	535f 4154 5452 415f 4157 5449 485f 534f     _START_AWAIT_HOS
   352bc:	2954 6e20 746f 6120 6c6c 776f 6465 6920     T) not allowed i
   352cc:	206e 6e53 7061 6873 746f 6d20 646f 0065     n Snapshot mode.
   352dc:	6e55 7865 6570 7463 6465 6120 6772 6d75     Unexpected argum
   352ec:	6e65 2074 6f74 7620 7254 6361 4565 616e     ent to vTraceEna
   352fc:	6c62 2065 7328 616e 7370 6f68 2074 6f6d     ble (snapshot mo
   3530c:	6564 0029 7a54 7443 6c72 0000 6f4e 2074     de).TzCtrl..Not 
   3531c:	6e65 756f 6867 5420 5341 204b 6168 646e     enough TASK hand
   3532c:	656c 2073 202d 6e69 7263 6165 6573 5420     les - increase T
   3533c:	4352 435f 4746 4e5f 4154 4b53 6920 206e     RC_CFG_NTASK in 
   3534c:	7274 5363 616e 7370 6f68 4374 6e6f 6966     trcSnapshotConfi
   3535c:	2e67 0068 6f4e 2074 6e65 756f 6867 4920     g.h.Not enough I
   3536c:	5253 6820 6e61 6c64 7365 2d20 6920 636e     SR handles - inc
   3537c:	6572 7361 2065 5254 5f43 4643 5f47 494e     rease TRC_CFG_NI
   3538c:	5253 6920 206e 7274 5363 616e 7370 6f68     SR in trcSnapsho
   3539c:	4374 6e6f 6966 2e67 0068 0000 6f4e 2074     tConfig.h...Not 
   353ac:	6e65 756f 6867 5320 4d45 5041 4f48 4552     enough SEMAPHORE
   353bc:	6820 6e61 6c64 7365 2d20 6920 636e 6572      handles - incre
   353cc:	7361 2065 5254 5f43 4643 5f47 534e 4d45     ase TRC_CFG_NSEM
   353dc:	5041 4f48 4552 6920 206e 7274 5363 616e     APHORE in trcSna
   353ec:	7370 6f68 4374 6e6f 6966 2e67 0068 0000     pshotConfig.h...
   353fc:	6f4e 2074 6e65 756f 6867 4d20 5455 5845     Not enough MUTEX
   3540c:	6820 6e61 6c64 7365 2d20 6920 636e 6572      handles - incre
   3541c:	7361 2065 5254 5f43 4643 5f47 4d4e 5455     ase TRC_CFG_NMUT
   3542c:	5845 6920 206e 7274 5363 616e 7370 6f68     EX in trcSnapsho
   3543c:	4374 6e6f 6966 2e67 0068 0000 6f4e 2074     tConfig.h...Not 
   3544c:	6e65 756f 6867 5120 4555 4555 6820 6e61     enough QUEUE han
   3545c:	6c64 7365 2d20 6920 636e 6572 7361 2065     dles - increase 
   3546c:	5254 5f43 4643 5f47 514e 4555 4555 6920     TRC_CFG_NQUEUE i
   3547c:	206e 7274 5363 616e 7370 6f68 4374 6e6f     n trcSnapshotCon
   3548c:	6966 2e67 0068 0000 6f4e 2074 6e65 756f     fig.h...Not enou
   3549c:	6867 5420 4d49 5245 6820 6e61 6c64 7365     gh TIMER handles
   354ac:	2d20 6920 636e 6572 7361 2065 5254 5f43      - increase TRC_
   354bc:	4643 5f47 544e 4d49 5245 6920 206e 7274     CFG_NTIMER in tr
   354cc:	5363 616e 7370 6f68 4374 6e6f 6966 2e67     cSnapshotConfig.
   354dc:	0068 0000 6f4e 2074 6e65 756f 6867 4520     h...Not enough E
   354ec:	4556 544e 5247 554f 2050 6168 646e 656c     VENTGROUP handle
   354fc:	2073 202d 6e69 7263 6165 6573 5420 4352     s - increase TRC
   3550c:	435f 4746 4e5f 5645 4e45 4754 4f52 5055     _CFG_NEVENTGROUP
   3551c:	6920 206e 7274 5363 616e 7370 6f68 4374      in trcSnapshotC
   3552c:	6e6f 6966 2e67 0068 6f4e 2074 6e65 756f     onfig.h.Not enou
   3553c:	6867 5320 5254 4145 424d 4655 4546 2052     gh STREAMBUFFER 
   3554c:	6168 646e 656c 2073 202d 6e69 7263 6165     handles - increa
   3555c:	6573 5420 4352 435f 4746 4e5f 5453 4552     se TRC_CFG_NSTRE
   3556c:	4d41 5542 4646 5245 6920 206e 7274 5363     AMBUFFER in trcS
   3557c:	616e 7370 6f68 4374 6e6f 6966 2e67 0068     napshotConfig.h.
   3558c:	6f4e 2074 6e65 756f 6867 4d20 5345 4153     Not enough MESSA
   3559c:	4547 5542 4646 5245 6820 6e61 6c64 7365     GEBUFFER handles
   355ac:	2d20 6920 636e 6572 7361 2065 5254 5f43      - increase TRC_
   355bc:	4643 5f47 4d4e 5345 4153 4547 5542 4646     CFG_NMESSAGEBUFF
   355cc:	5245 6920 206e 7274 5363 616e 7370 6f68     ER in trcSnapsho
   355dc:	4374 6e6f 6966 2e67 0068 0000 7370 547a     tConfig.h...pszT
   355ec:	6172 6563 6547 4574 7272 726f 6148 646e     raceGetErrorHand
   355fc:	656c 3a73 4920 766e 6c61 6469 6f20 6a62     les: Invalid obj
   3560c:	6365 6374 616c 7373 0021 0000 6eaa 0001     ectclass!....n..
   3561c:	6ea2 0001 6ea6 0001 6e9a 0001 6e9e 0001     .n...n...n...n..
   3562c:	6eae 0001 6eb2 0001 6eb6 0001 6eba 0001     .n...n...n...n..
   3563c:	5254 4341 5f45 5341 4553 5452 203a 6552     TRACE_ASSERT: Re
   3564c:	6f63 6472 7265 6e20 746f 6920 696e 6974     corder not initi
   3565c:	6c61 7a69 6465 202e 7355 2065 5476 6172     alized. Use vTra
   3566c:	6563 6e45 6261 656c 2928 6920 736e 6574     ceEnable() inste
   3567c:	6461 0021 7328 6174 7472 7075 0029 0000     ad!.(startup)...
   3568c:	5254 4341 5f45 5341 4553 5452 203a 6552     TRACE_ASSERT: Re
   3569c:	6f63 6472 7265 6e20 746f 6920 696e 6974     corder not initi
   356ac:	6c61 7a69 6465 202c 6163 6c6c 7620 7254     alized, call vTr
   356bc:	6361 4565 616e 6c62 2865 2029 6966 7372     aceEnable() firs
   356cc:	2174 0000 5254 4341 5f45 5341 4553 5452     t!..TRACE_ASSERT
   356dc:	203a 5478 6172 6563 6553 4974 5253 7250     : xTraceSetISRPr
   356ec:	706f 7265 6974 7365 203a 6e49 6176 696c     operties: Invali
   356fc:	2064 6176 756c 2065 6f66 2072 6168 646e     d value for hand
   3570c:	656c 0000 5254 4341 5f45 5341 4553 5452     le..TRACE_ASSERT
   3571c:	203a 5478 6172 6563 6553 4974 5253 7250     : xTraceSetISRPr
   3572c:	706f 7265 6974 7365 203a 616e 656d 3d20     operties: name =
   3573c:	203d 554e 4c4c 0000 5476 6172 6563 7453     = NULL..vTraceSt
   3574c:	726f 4965 5253 6542 6967 206e 202d 6572     oreISRBegin - re
   3575c:	6f63 6472 7265 6220 7375 2179 5320 6565     corder busy! See
   3576c:	6320 646f 2065 6f63 6d6d 6e65 2e74 0000      code comment...
   3577c:	5254 4341 5f45 5341 4553 5452 203a 5476     TRACE_ASSERT: vT
   3578c:	6172 6563 7453 726f 4965 5253 6542 6967     raceStoreISRBegi
   3579c:	3a6e 4920 766e 6c61 6469 4920 5253 6820     n: Invalid ISR h
   357ac:	6e61 6c64 2065 4e28 4c55 294c 0000 0000     andle (NULL)....
   357bc:	5254 4341 5f45 5341 4553 5452 203a 5476     TRACE_ASSERT: vT
   357cc:	6172 6563 7453 726f 4965 5253 6542 6967     raceStoreISRBegi
   357dc:	3a6e 4920 766e 6c61 6469 4920 5253 6820     n: Invalid ISR h
   357ec:	6e61 6c64 2065 3e28 4e20 5349 2952 0000     andle (> NISR)..
   357fc:	6f54 206f 616d 796e 6e20 7365 6574 2064     Too many nested 
   3580c:	6e69 6574 7272 7075 7374 0021 5476 6172     interrupts!.vTra
   3581c:	6563 7453 726f 4965 5253 6e45 2064 202d     ceStoreISREnd - 
   3582c:	6572 6f63 6472 7265 6220 7375 2179 5320     recorder busy! S
   3583c:	6565 6320 646f 2065 6f63 6d6d 6e65 2e74     ee code comment.
   3584c:	0000 0000 6e55 616d 6374 6568 2064 6163     ....Unmatched ca
   3585c:	6c6c 7420 206f 5476 6172 6563 7453 726f     ll to vTraceStor
   3586c:	4965 5253 6e45 2064 6e28 5349 6152 7463     eISREnd (nISRact
   3587c:	7669 2065 3d3d 3020 202c 7865 6570 7463     ive == 0, expect
   3588c:	6465 3e20 3020 0029 5254 4341 5f45 5341     ed > 0).TRACE_AS
   3589c:	4553 5452 203a 7277 7469 4965 746e 3a38     SERT: writeInt8:
   358ac:	6220 6675 6566 2072 3d3d 4e20 4c55 004c      buffer == NULL.
   358bc:	5254 4341 5f45 5341 4553 5452 203a 7277     TRACE_ASSERT: wr
   358cc:	7469 4965 746e 3631 203a 7562 6666 7265     iteInt16: buffer
   358dc:	3d20 203d 554e 4c4c 0000 0000 5254 4341      == NULL....TRAC
   358ec:	5f45 5341 4553 5452 203a 7277 7469 4965     E_ASSERT: writeI
   358fc:	746e 3233 203a 7562 6666 7265 3d20 203d     nt32: buffer == 
   3590c:	554e 4c4c 0000 0000 5476 6172 6563 7250     NULL....vTracePr
   3591c:	6e69 4674 2d20 5420 6f6f 6d20 6e61 2079     intF - Too many 
   3592c:	7261 7567 656d 746e 2c73 6d20 7861 3120     arguments, max 1
   3593c:	2035 6c61 6f6c 6577 2164 0000 5476 6172     5 allowed!..vTra
   3594c:	6563 7250 6e69 4674 2d20 5420 6f6f 6c20     cePrintF - Too l
   3595c:	7261 6567 6120 6772 6d75 6e65 7374 202c     arge arguments, 
   3596c:	616d 2078 3233 6220 7479 2065 6c61 6f6c     max 32 byte allo
   3597c:	6577 2164 0000 0000 5254 4341 5f45 5341     wed!....TRACE_AS
   3598c:	4553 5452 203a 5476 6172 6563 5056 6972     SERT: vTraceVPri
   3599c:	746e 3a46 6620 726f 616d 5374 7274 3d20     ntF: formatStr =
   359ac:	203d 554e 4c4c 0000 5254 4341 5f45 5341     = NULL..TRACE_AS
   359bc:	4553 5452 203a 5478 6172 6563 6552 6967     SERT: xTraceRegi
   359cc:	7473 7265 7453 6972 676e 203a 616c 6562     sterString: labe
   359dc:	206c 3d3d 4e20 4c55 004c 0000 5254 4341     l == NULL...TRAC
   359ec:	5f45 5341 4553 5452 203a 7270 5476 6172     E_ASSERT: prvTra
   359fc:	6563 7453 726f 5465 7361 526b 6165 7964     ceStoreTaskReady
   35a0c:	203a 6e49 6176 696c 2064 6176 756c 2065     : Invalid value 
   35a1c:	6f66 2072 6168 646e 656c 0000 6552 6f63     for handle..Reco
   35a2c:	6472 7265 6220 7375 2079 202d 6968 6867     rder busy - high
   35a3c:	7020 6972 726f 7469 2079 5349 2052 7375      priority ISR us
   35a4c:	6e69 2067 7973 6373 6c61 3f6c 2820 2931     ing syscall? (1)
   35a5c:	0000 0000 5254 4341 5f45 5341 4553 5452     ....TRACE_ASSERT
   35a6c:	203a 7270 5476 6172 6563 7453 726f 4c65     : prvTraceStoreL
   35a7c:	776f 6f50 6577 3a72 4920 766e 6c61 6469     owPower: Invalid
   35a8c:	6620 616c 2067 6176 756c 0065 5254 4341      flag value.TRAC
   35a9c:	5f45 5341 4553 5452 203a 7270 5476 6172     E_ASSERT: prvTra
   35aac:	6563 7453 726f 4b65 7265 656e 436c 6c61     ceStoreKernelCal
   35abc:	3a6c 6520 6f63 6564 3e20 203d 7830 4646     l: ecode >= 0xFF
   35acc:	0000 0000 5254 4341 5f45 5341 4553 5452     ....TRACE_ASSERT
   35adc:	203a 7270 5476 6172 6563 7453 726f 4b65     : prvTraceStoreK
   35aec:	7265 656e 436c 6c61 3a6c 6f20 6a62 6365     ernelCall: objec
   35afc:	4374 616c 7373 3e20 203d 5254 4341 5f45     tClass >= TRACE_
   35b0c:	434e 414c 5353 5345 0000 0000 5254 4341     NCLASSES....TRAC
   35b1c:	5f45 5341 4553 5452 203a 7270 5476 6172     E_ASSERT: prvTra
   35b2c:	6563 7453 726f 4b65 7265 656e 436c 6c61     ceStoreKernelCal
   35b3c:	3a6c 4920 766e 6c61 6469 7620 6c61 6575     l: Invalid value
   35b4c:	6620 726f 6f20 6a62 6365 4e74 6d75 6562      for objectNumbe
   35b5c:	0072 0000 6552 6f63 6472 7265 6220 7375     r...Recorder bus
   35b6c:	2079 202d 6968 6867 7020 6972 726f 7469     y - high priorit
   35b7c:	2079 5349 2052 7375 6e69 2067 7973 6373     y ISR using sysc
   35b8c:	6c61 3f6c 2820 2932 0000 0000 5254 4341     all? (2)....TRAC
   35b9c:	5f45 5341 4553 5452 203a 7270 5476 6172     E_ASSERT: prvTra
   35bac:	6563 7453 726f 4b65 7265 656e 436c 6c61     ceStoreKernelCal
   35bbc:	576c 7469 5068 7261 6d61 203a 7665 6374     lWithParam: evtc
   35bcc:	646f 2065 3d3e 3020 4678 0046 5254 4341     ode >= 0xFF.TRAC
   35bdc:	5f45 5341 4553 5452 203a 7270 5476 6172     E_ASSERT: prvTra
   35bec:	6563 7453 726f 4b65 7265 656e 436c 6c61     ceStoreKernelCal
   35bfc:	576c 7469 5068 7261 6d61 203a 626f 656a     lWithParam: obje
   35c0c:	7463 6c43 7361 2073 3d3e 5420 4152 4543     ctClass >= TRACE
   35c1c:	4e5f 4c43 5341 4553 0053 0000 5254 4341     _NCLASSES...TRAC
   35c2c:	5f45 5341 4553 5452 203a 7270 5476 6172     E_ASSERT: prvTra
   35c3c:	6563 7453 726f 4b65 7265 656e 436c 6c61     ceStoreKernelCal
   35c4c:	576c 7469 5068 7261 6d61 203a 6e49 6176     lWithParam: Inva
   35c5c:	696c 2064 6176 756c 2065 6f66 2072 626f     lid value for ob
   35c6c:	656a 7463 754e 626d 7265 0000 6552 6f63     jectNumber..Reco
   35c7c:	6472 7265 6220 7375 2079 202d 6968 6867     rder busy - high
   35c8c:	7020 6972 726f 7469 2079 5349 2052 7375      priority ISR us
   35c9c:	6e69 2067 7973 6373 6c61 3f6c 2820 2933     ing syscall? (3)
   35cac:	0000 0000 5254 4341 5f45 5341 4553 5452     ....TRACE_ASSERT
   35cbc:	203a 7270 5476 6172 6563 6547 5074 7261     : prvTraceGetPar
   35ccc:	6d61 203a 6e49 6176 696c 2064 6176 756c     am: Invalid valu
   35cdc:	2065 6f66 2072 6170 6172 5f6d 616d 0078     e for param_max.
   35cec:	5254 4341 5f45 5341 4553 5452 203a 7270     TRACE_ASSERT: pr
   35cfc:	5476 6172 6563 7453 726f 4b65 7265 656e     vTraceStoreKerne
   35d0c:	436c 6c61 576c 7469 4e68 6d75 7265 6369     lCallWithNumeric
   35d1c:	6150 6172 4f6d 6c6e 3a79 4920 766e 6c61     ParamOnly: Inval
   35d2c:	6469 7620 6c61 6575 6620 726f 6520 7476     id value for evt
   35d3c:	6f63 6564 0000 0000 6552 6f63 6472 7265     code....Recorder
   35d4c:	6220 7375 2079 202d 6968 6867 7020 6972      busy - high pri
   35d5c:	726f 7469 2079 5349 2052 7375 6e69 2067     ority ISR using 
   35d6c:	7973 6373 6c61 3f6c 2820 2934 0000 0000     syscall? (4)....
   35d7c:	5254 4341 5f45 5341 4553 5452 203a 7270     TRACE_ASSERT: pr
   35d8c:	5476 6172 6563 7453 726f 5465 7361 736b     vTraceStoreTasks
   35d9c:	6977 6374 3a68 4920 766e 6c61 6469 7620     witch: Invalid v
   35dac:	6c61 6575 6620 726f 7420 7361 5f6b 6168     alue for task_ha
   35dbc:	646e 656c 0000 0000 5254 4341 5f45 5341     ndle....TRACE_AS
   35dcc:	4553 5452 203a 7270 5476 6172 6563 7453     SERT: prvTraceSt
   35ddc:	726f 4f65 6a62 6365 4e74 6d61 4f65 436e     oreObjectNameOnC
   35dec:	6f6c 6573 7645 6e65 3a74 6f20 6a62 6365     loseEvent: objec
   35dfc:	6374 616c 7373 3e20 203d 5254 4341 5f45     tclass >= TRACE_
   35e0c:	434e 414c 5353 5345 0000 0000 5254 4341     NCLASSES....TRAC
   35e1c:	5f45 5341 4553 5452 203a 7270 5476 6172     E_ASSERT: prvTra
   35e2c:	6563 7453 726f 4f65 6a62 6365 4e74 6d61     ceStoreObjectNam
   35e3c:	4f65 436e 6f6c 6573 7645 6e65 3a74 4920     eOnCloseEvent: I
   35e4c:	766e 6c61 6469 7620 6c61 6575 6620 726f     nvalid value for
   35e5c:	6820 6e61 6c64 0065 5254 4341 5f45 5341      handle.TRACE_AS
   35e6c:	4553 5452 203a 7270 5476 6172 6563 7453     SERT: prvTraceSt
   35e7c:	726f 4f65 6a62 6365 5074 6f72 6570 7472     oreObjectPropert
   35e8c:	6569 4f73 436e 6f6c 6573 7645 6e65 3a74     iesOnCloseEvent:
   35e9c:	6f20 6a62 6365 6374 616c 7373 3e20 203d      objectclass >= 
   35eac:	5254 4341 5f45 434e 414c 5353 5345 0000     TRACE_NCLASSES..
   35ebc:	5254 4341 5f45 5341 4553 5452 203a 7270     TRACE_ASSERT: pr
   35ecc:	5476 6172 6563 7453 726f 4f65 6a62 6365     vTraceStoreObjec
   35edc:	5074 6f72 6570 7472 6569 4f73 436e 6f6c     tPropertiesOnClo
   35eec:	6573 7645 6e65 3a74 4920 766e 6c61 6469     seEvent: Invalid
   35efc:	7620 6c61 6575 6620 726f 6820 6e61 6c64      value for handl
   35f0c:	0065 0000 5254 4341 5f45 5341 4553 5452     e...TRACE_ASSERT
   35f1c:	203a 7270 5476 6172 6563 6553 5074 6972     : prvTraceSetPri
   35f2c:	726f 7469 5079 6f72 6570 7472 3a79 6f20     orityProperty: o
   35f3c:	6a62 6365 6374 616c 7373 3e20 203d 5254     bjectclass >= TR
   35f4c:	4341 5f45 434e 414c 5353 5345 0000 0000     ACE_NCLASSES....
   35f5c:	5254 4341 5f45 5341 4553 5452 203a 7270     TRACE_ASSERT: pr
   35f6c:	5476 6172 6563 6553 5074 6972 726f 7469     vTraceSetPriorit
   35f7c:	5079 6f72 6570 7472 3a79 4920 766e 6c61     yProperty: Inval
   35f8c:	6469 7620 6c61 6575 6620 726f 6920 0064     id value for id.
   35f9c:	5254 4341 5f45 5341 4553 5452 203a 7270     TRACE_ASSERT: pr
   35fac:	5476 6172 6563 6547 5074 6972 726f 7469     vTraceGetPriorit
   35fbc:	5079 6f72 6570 7472 3a79 6f20 6a62 6365     yProperty: objec
   35fcc:	6374 616c 7373 3e20 203d 5254 4341 5f45     tclass >= TRACE_
   35fdc:	434e 414c 5353 5345 0000 0000 5254 4341     NCLASSES....TRAC
   35fec:	5f45 5341 4553 5452 203a 7270 5476 6172     E_ASSERT: prvTra
   35ffc:	6563 6547 5074 6972 726f 7469 5079 6f72     ceGetPriorityPro
   3600c:	6570 7472 3a79 4920 766e 6c61 6469 7620     perty: Invalid v
   3601c:	6c61 6575 6620 726f 6920 0064 5254 4341     alue for id.TRAC
   3602c:	5f45 5341 4553 5452 203a 7270 5476 6172     E_ASSERT: prvTra
   3603c:	6563 6553 4f74 6a62 6365 5374 6174 6574     ceSetObjectState
   3604c:	203a 626f 656a 7463 6c63 7361 2073 3d3e     : objectclass >=
   3605c:	5420 4152 4543 4e5f 4c43 5341 4553 0053      TRACE_NCLASSES.
   3606c:	5254 4341 5f45 5341 4553 5452 203a 7270     TRACE_ASSERT: pr
   3607c:	5476 6172 6563 6553 4f74 6a62 6365 5374     vTraceSetObjectS
   3608c:	6174 6574 203a 6e49 6176 696c 2064 6176     tate: Invalid va
   3609c:	756c 2065 6f66 2072 6469 0000 5254 4341     lue for id..TRAC
   360ac:	5f45 5341 4553 5452 203a 7270 5476 6172     E_ASSERT: prvTra
   360bc:	6563 6547 4f74 6a62 6365 5374 6174 6574     ceGetObjectState
   360cc:	203a 626f 656a 7463 6c63 7361 2073 3d3e     : objectclass >=
   360dc:	5420 4152 4543 4e5f 4c43 5341 4553 0053      TRACE_NCLASSES.
   360ec:	5254 4341 5f45 5341 4553 5452 203a 7270     TRACE_ASSERT: pr
   360fc:	5476 6172 6563 6547 4f74 6a62 6365 5374     vTraceGetObjectS
   3610c:	6174 6574 203a 6e49 6176 696c 2064 6176     tate: Invalid va
   3611c:	756c 2065 6f66 2072 6469 0000 5254 4341     lue for id..TRAC
   3612c:	5f45 5341 4553 5452 203a 7270 5476 6172     E_ASSERT: prvTra
   3613c:	6563 6553 5474 7361 496b 736e 6174 636e     ceSetTaskInstanc
   3614c:	4665 6e69 7369 6568 3a64 4920 766e 6c61     eFinished: Inval
   3615c:	6469 7620 6c61 6575 6620 726f 6820 6e61     id value for han
   3616c:	6c64 0065 7254 6361 2065 6552 6f63 6472     dle.Trace Record
   3617c:	7265 4420 6d65 006f 7441 6574 706d 2074     er Demo.Attempt 
   3618c:	6f74 6920 646e 7865 6f20 7475 6973 6564     to index outside
   3619c:	6520 6576 746e 6220 6675 6566 2172 0000      event buffer!..
   361ac:	5254 4341 5f45 5341 4553 5452 203a 6975     TRACE_ASSERT: ui
   361bc:	6e49 6564 4f78 4f66 6a62 6365 3a74 4920     IndexOfObject: I
   361cc:	766e 6c61 6469 7620 6c61 6575 6620 726f     nvalid value for
   361dc:	6f20 6a62 6365 6374 616c 7373 0000 0000      objectclass....
   361ec:	5254 4341 5f45 5341 4553 5452 203a 6975     TRACE_ASSERT: ui
   361fc:	6e49 6564 4f78 4f66 6a62 6365 3a74 4920     IndexOfObject: I
   3620c:	766e 6c61 6469 7620 6c61 6575 6620 726f     nvalid value for
   3621c:	6f20 6a62 6365 6874 6e61 6c64 0065 0000      objecthandle...
   3622c:	624f 656a 7463 7420 6261 656c 6c20 6f6f     Object table loo
   3623c:	756b 2070 6977 6874 6920 766e 6c61 6469     kup with invalid
   3624c:	6f20 6a62 6365 2074 6168 646e 656c 6f20      object handle o
   3625c:	2072 626f 656a 7463 6320 616c 7373 0021     r object class!.
   3626c:	5254 4341 5f45 5341 4553 5452 203a 7270     TRACE_ASSERT: pr
   3627c:	5476 6172 6563 6547 4f74 6a62 6365 4874     vTraceGetObjectH
   3628c:	6e61 6c64 3a65 4920 766e 6c61 6469 7620     andle: Invalid v
   3629c:	6c61 6575 6620 726f 6f20 6a62 6365 6374     alue for objectc
   362ac:	616c 7373 0000 0000 5254 4341 5f45 5341     lass....TRACE_AS
   362bc:	4553 5452 203a 7270 5476 6172 6563 7246     SERT: prvTraceFr
   362cc:	6565 624f 656a 7463 6148 646e 656c 203a     eeObjectHandle: 
   362dc:	6e49 6176 696c 2064 6176 756c 2065 6f66     Invalid value fo
   362ec:	2072 626f 656a 7463 6c63 7361 0073 0000     r objectclass...
   362fc:	5254 4341 5f45 5341 4553 5452 203a 7270     TRACE_ASSERT: pr
   3630c:	5476 6172 6563 7246 6565 624f 656a 7463     vTraceFreeObject
   3631c:	6148 646e 656c 203a 6e49 6176 696c 2064     Handle: Invalid 
   3632c:	6176 756c 2065 6f66 2072 6168 646e 656c     value for handle
   3633c:	0000 0000 7441 6574 706d 2074 6f74 6620     ....Attempt to f
   3634c:	6572 2065 6f6d 6572 6820 6e61 6c64 7365     ree more handles
   3635c:	7420 6168 206e 6c61 6f6c 6163 6574 2164      than allocated!
   3636c:	0000 0000 5254 4341 5f45 5341 4553 5452     ....TRACE_ASSERT
   3637c:	203a 7270 5476 6172 6563 6553 4f74 6a62     : prvTraceSetObj
   3638c:	6365 4e74 6d61 3a65 6e20 6d61 2065 3d3d     ectName: name ==
   3639c:	4e20 4c55 004c 0000 6c49 656c 6167 206c      NULL...Illegal 
   363ac:	626f 656a 7463 6320 616c 7373 6920 206e     object class in 
   363bc:	7270 5476 6172 6563 6553 4f74 6a62 6365     prvTraceSetObjec
   363cc:	4e74 6d61 0065 0000 6c49 656c 6167 206c     tName...Illegal 
   363dc:	6168 646e 656c 2820 2930 6920 206e 7270     handle (0) in pr
   363ec:	5476 6172 6563 6553 4f74 6a62 6365 4e74     vTraceSetObjectN
   363fc:	6d61 2e65 0000 0000 5254 4341 5f45 5341     ame.....TRACE_AS
   3640c:	4553 5452 203a 7270 5476 6172 6563 704f     SERT: prvTraceOp
   3641c:	6e65 7953 626d 6c6f 203a 616e 656d 3d20     enSymbol: name =
   3642c:	203d 554e 4c4c 0000 5254 4341 5f45 5341     = NULL..TRACE_AS
   3643c:	4553 5452 203a 7270 4376 6568 6b63 6144     SERT: prvCheckDa
   3644c:	6174 6f54 6542 764f 7265 7277 7469 6574     taToBeOverwritte
   3645c:	466e 726f 754d 746c 4569 746e 7972 7645     nForMultiEntryEv
   3646c:	6e65 7374 203a 6f6e 4566 746e 6972 7365     ents: nofEntries
   3647c:	6f54 6843 6365 206b 3d3d 3020 0000 0000     ToCheck == 0....
   3648c:	5254 4341 5f45 5341 4553 5452 203a 7270     TRACE_ASSERT: pr
   3649c:	5476 6172 6563 6547 4474 5354 203a 6e49     vTraceGetDTS: In
   364ac:	6176 696c 2064 6176 756c 2065 6f66 2072     valid value for 
   364bc:	6170 6172 5f6d 616d 4478 5354 0000 0000     param_maxDTS....
   364cc:	6142 2064 6170 6172 5f6d 616d 4478 5354     Bad param_maxDTS
   364dc:	6920 206e 7270 5476 6172 6563 6547 4474      in prvTraceGetD
   364ec:	5354 0000 5254 4341 5f45 5341 4553 5452     TS..TRACE_ASSERT
   364fc:	203a 7270 5476 6172 6563 6f4c 6b6f 7075     : prvTraceLookup
   3650c:	7953 626d 6c6f 6154 6c62 4565 746e 7972     SymbolTableEntry
   3651c:	203a 616e 656d 3d20 203d 554e 4c4c 0000     : name == NULL..
   3652c:	5254 4341 5f45 5341 4553 5452 203a 7270     TRACE_ASSERT: pr
   3653c:	5476 6172 6563 6f4c 6b6f 7075 7953 626d     vTraceLookupSymb
   3654c:	6c6f 6154 6c62 4565 746e 7972 203a 656c     olTableEntry: le
   3655c:	206e 3d3d 3020 0000 5254 4341 5f45 5341     n == 0..TRACE_AS
   3656c:	4553 5452 203a 7270 5476 6172 6563 7243     SERT: prvTraceCr
   3657c:	6165 6574 7953 626d 6c6f 6154 6c62 4565     eateSymbolTableE
   3658c:	746e 7972 203a 616e 656d 3d20 203d 554e     ntry: name == NU
   3659c:	4c4c 0000 5254 4341 5f45 5341 4553 5452     LL..TRACE_ASSERT
   365ac:	203a 7270 5476 6172 6563 7243 6165 6574     : prvTraceCreate
   365bc:	7953 626d 6c6f 6154 6c62 4565 746e 7972     SymbolTableEntry
   365cc:	203a 656c 206e 3d3d 3020 0000 7953 626d     : len == 0..Symb
   365dc:	6c6f 7420 6261 656c 6620 6c75 2e6c 4920     ol table full. I
   365ec:	636e 6572 7361 2065 5254 5f43 4643 5f47     ncrease TRC_CFG_
   365fc:	5953 424d 4c4f 545f 4241 454c 535f 5a49     SYMBOL_TABLE_SIZ
   3660c:	2045 6e69 7420 6372 6f43 666e 6769 682e     E in trcConfig.h
   3661c:	0000 0000 5254 4341 5f45 5341 4553 5452     ....TRACE_ASSERT
   3662c:	203a 7270 5476 6172 6563 6547 4374 6568     : prvTraceGetChe
   3663c:	6b63 7573 3a6d 7020 616e 656d 3d20 203d     cksum: pname == 
   3664c:	554e 4c4c 0000 0000 5254 4341 5f45 5341     NULL....TRACE_AS
   3665c:	4553 5452 203a 7270 5476 6172 6563 6547     SERT: prvTraceGe
   3666c:	4374 6568 6b63 7573 3a6d 7020 7263 2063     tChecksum: pcrc 
   3667c:	3d3d 4e20 4c55 004c 5254 4341 5f45 5341     == NULL.TRACE_AS
   3668c:	4553 5452 203a 7270 5476 6172 6563 6547     SERT: prvTraceGe
   3669c:	4374 6568 6b63 7573 3a6d 7020 656c 676e     tChecksum: pleng
   366ac:	6874 3d20 203d 554e 4c4c 0000 4449 454c     th == NULL..IDLE
   366bc:	0000 0000 6d54 2072 7653 0063 bf4c 0001     ....Tmr Svc.L...
   366cc:	bf4c 0001 bf4c 0001 bfda 0001 bfa4 0001     L...L...........
   366dc:	bfce 0001 bf4c 0001 bf4c 0001 bfda 0001     ....L...L.......
   366ec:	bfa4 0001                                   ....

000366f0 <sd_mmc_trans_units>:
   366f0:	000a 0000 0064 0000 03e8 0000 2710 0000     ....d........'..
	...

0003670c <sd_trans_multipliers>:
   3670c:	0000 0000 000a 0000 000c 0000 000d 0000     ................
   3671c:	000f 0000 0014 0000 0019 0000 001e 0000     ................
   3672c:	0023 0000 0028 0000 002d 0000 0032 0000     #...(...-...2...
   3673c:	0037 0000 003c 0000 0046 0000 0050 0000     7...<...F...P...

0003674c <mmc_trans_multipliers>:
   3674c:	0000 0000 000a 0000 000c 0000 000d 0000     ................
   3675c:	000f 0000 0014 0000 001a 0000 001e 0000     ................
   3676c:	0023 0000 0028 0000 002d 0000 0034 0000     #...(...-...4...
   3677c:	0037 0000 003c 0000 0046 0000 0050 0000     7...<...F...P...
   3678c:	4128 5050 2829 5245 2952 255b 5d73 255b     (APP)(ERR)[%s][%
   3679c:	5d64 0000 6e69 6176 696c 6564 6920 636f     d]..invalide ioc
   367ac:	746c 6320 646d 000a 000d 0000               lt cmd......

000367b8 <__FUNCTION__.16824>:
   367b8:	6d6e 625f 7375 695f 636f 6c74 0000 0000     nm_bus_ioctl....
   367c8:	4128 5050 2829 4e49 4f46 0029 6c53 776f     (APP)(INFO).Slow
   367d8:	6e69 2067 6f64 6e77 2e2e 0a2e 0000 0000     ing down........
   367e8:	000d 0000 4128 5050 2829 5245 2952 255b     ....(APP)(ERR)[%
   367f8:	5d73 255b 5d64 0000 4828 4649 4629 6961     s][%d]..(HIF)Fai
   36808:	206c 6f74 7720 6b61 7075 7420 6568 6320     l to wakup the c
   36818:	6968 0a70 0000 0000 6828 6669 2029 4957     hip.....(hif) WI
   36828:	4946 485f 534f 5f54 4352 5f56 5443 4c52     FI_HOST_RCV_CTRL
   36838:	315f 6220 7375 6620 6961 0a6c 0000 0000     _1 bus fail.....
   36848:	6828 6669 2029 6461 7264 7365 2073 7562     (hif) address bu
   36858:	2073 6166 6c69 000a 6828 6669 2029 6f43     s fail..(hif) Co
   36868:	7272 7075 6574 2064 6170 6b63 7465 5320     rrupted packet S
   36878:	7a69 2065 203d 7525 3c20 204c 203d 7525     ize = %u <L = %u
   36888:	202c 2047 203d 7525 202c 504f 3d20 2520     , G = %u, OP = %
   36898:	3230 3e58 000a 0000 4957 4946 6320 6c61     02X>....WIFI cal
   368a8:	626c 6361 206b 7369 6e20 746f 7220 6765     lback is not reg
   368b8:	7369 6574 6572 0a64 0000 0000 6353 6b6f     istered.....Scok
   368c8:	7465 6320 6c61 626c 6361 206b 7369 6e20     et callback is n
   368d8:	746f 7220 6765 7369 6574 6572 0a64 0000     ot registered...
   368e8:	744f 2061 6163 6c6c 6162 6b63 6920 2073     Ota callback is 
   368f8:	6f6e 2074 6572 6967 7473 7265 6465 000a     not registered..
   36908:	7243 7079 6f74 6320 6c61 626c 6361 206b     Crypto callback 
   36918:	7369 6e20 746f 7220 6765 7369 6574 6572     is not registere
   36928:	0a64 0000 6953 6d67 2061 6163 6c6c 6162     d...Sigma callba
   36938:	6b63 6920 2073 6f6e 2074 6572 6967 7473     ck is not regist
   36948:	7265 6465 000a 0000 6828 6669 2029 6e69     ered....(hif) in
   36958:	6176 696c 2064 7267 756f 2070 4449 000a     valid group ID..
   36968:	6828 6669 2029 6f68 7473 6120 7070 6420     (hif) host app d
   36978:	6469 276e 2074 6573 2074 5852 4420 6e6f     idn't set RX Don
   36988:	2065 253c 3e75 253c 3e58 000a 6828 6669     e <%u><%X>..(hif
   36998:	2029 7257 6e6f 2067 6953 657a 000a 0000     ) Wrong Size....
   369a8:	6828 6669 2029 6146 736c 2065 6e69 6574     (hif) False inte
   369b8:	7272 7075 2074 6c25 0078 0000 6828 6669     rrupt %lx...(hif
   369c8:	2029 6146 6c69 7420 206f 6552 6461 6920     ) Fail to Read i
   369d8:	746e 7265 7572 7470 7220 6765 000a 0000     nterrupt reg....
   369e8:	4828 4649 2029 6146 6c69 7420 206f 6168     (HIF) Fail to ha
   369f8:	646e 656c 6920 746e 7265 7572 7470 2520     ndle interrupt %
   36a08:	2064 7274 2079 6741 6961 2e6e 0a2e 0000     d try Again.....
   36a18:	6820 6669 725f 6365 6965 6576 203a 6e49      hif_receive: In
   36a28:	6176 696c 2064 7261 7567 656d 746e 000a     valid argument..
   36a38:	5041 2050 6552 7571 7365 6574 2064 6953     APP Requested Si
   36a48:	657a 6920 2073 616c 6772 7265 7420 6168     ze is larger tha
   36a58:	206e 6874 2065 6572 6963 6576 2064 7562     n the recived bu
   36a68:	6666 7265 7320 7a69 2065 253c 3e75 253c     ffer size <%u><%
   36a78:	756c 0a3e 0000 0000 5041 2050 6552 7571     lu>.....APP Requ
   36a88:	7365 6574 2064 6441 7264 7365 2073 6562     ested Address be
   36a98:	6f79 646e 7420 6568 7220 6365 7669 6465     yond the recived
   36aa8:	6220 6675 6566 2072 6461 7264 7365 2073      buffer address 
   36ab8:	6e61 2064 656c 676e 6874 000a 5247 2070     and length..GRp 
   36ac8:	203f 6425 000a 0000 0180 0002 0150 0002     ? %d........P...
   36ad8:	0148 0002 0160 0002 0158 0002 0178 0002     H...`...X...x...
   36ae8:	0168 0002 0170 0002                         h...p...

00036af0 <__FUNCTION__.17692>:
   36af0:	6968 5f66 6573 646e 0000 0000               hif_send....

00036afc <__FUNCTION__.17702>:
   36afc:	6968 5f66 7369 0072                         hif_isr.

00036b04 <__FUNCTION__.17711>:
   36b04:	6968 5f66 6168 646e 656c 695f 7273 0000     hif_handle_isr..

00036b14 <__FUNCTION__.17723>:
   36b14:	6968 5f66 6572 6563 7669 0065               hif_receive.

00036b20 <__FUNCTION__.17739>:
   36b20:	6968 5f66 6572 6967 7473 7265 635f 0062     hif_register_cb.
   36b30:	4128 5050 2829 4e49 4f46 0029 6f43 666e     (APP)(INFO).Conf
   36b40:	696c 7463 6465 4920 2050 2022 7525 252e     licted IP " %u.%
   36b50:	2e75 7525 252e 2075 2022 000a 000d 0000     u.%u.%u " ......
   36b60:	4128 5050 2829 5245 2952 255b 5d73 255b     (APP)(ERR)[%s][%
   36b70:	5d64 0000 4552 2051 6f4e 2074 6564 6966     d]..REQ Not defi
   36b80:	656e 2064 6425 000a 4e49 4156 494c 2044     ned %d..INVALID 
   36b90:	4f50 4e49 4554 0a52 0000 0000 4e49 4156     POINTER.....INVA
   36ba0:	494c 2044 5353 4449 000a 0000 4e49 4156     LID SSID....INVA
   36bb0:	494c 2044 4843 000a 4e49 4156 494c 2044     LID CH..INVALID 
   36bc0:	4844 5043 5320 5245 4556 2052 5049 000a     DHCP SERVER IP..
   36bd0:	4e49 4156 494c 2044 454b 2059 4e49 4544     INVALID KEY INDE
   36be0:	0a58 0000 4e49 4156 494c 2044 454b 2059     X...INVALID KEY 
   36bf0:	5453 4952 474e 5320 5a49 0a45 0000 0000     STRING SIZE.....
   36c00:	4e49 4156 494c 2044 454b 2059 4953 455a     INVALID KEY SIZE
   36c10:	000a 0000 4e49 4156 494c 2044 5057 2041     ....INVALID WPA 
   36c20:	454b 2059 4953 455a 000a 0000 4e49 4156     KEY SIZE....INVA
   36c30:	494c 2044 5541 4854 4e45 4954 4143 4954     LID AUTHENTICATI
   36c40:	4e4f 4d20 444f 0a45 0000 0000 4e49 4156     ON MODE.....INVA
   36c50:	494c 2044 6f4e 6f20 2066 6373 6e61 7320     LID No of scan s
   36c60:	6f6c 7374 2021 6425 000a 0000 4e49 4156     lots! %d....INVA
   36c70:	494c 2044 6373 6e61 7320 6f6c 2074 6974     LID scan slot ti
   36c80:	656d 2021 6425 000a 4e49 4156 494c 2044     me! %d..INVALID 
   36c90:	6f4e 6f20 2066 7270 626f 2065 6572 7571     No of probe requ
   36ca0:	7365 7374 7020 7265 7320 6163 206e 6c73     ests per scan sl
   36cb0:	746f 2520 0a64 0000 4e49 4156 494c 2044     ot %d...INVALID 
   36cc0:	5352 4953 7420 7268 7365 6f68 646c 2520     RSSI threshold %
   36cd0:	2064 000a 6946 6d72 6177 6572 7620 7265     d ..Firmware ver
   36ce0:	2020 3a20 2520 2e75 7525 252e 2075 7653        : %u.%u.%u Sv
   36cf0:	726e 7665 2520 0a75 0000 0000 6946 6d72     nrev %u.....Firm
   36d00:	6177 6572 4220 6975 646c 2520 2073 6954     ware Build %s Ti
   36d10:	656d 2520 0a73 0000 6946 6d72 6177 6572     me %s...Firmware
   36d20:	4d20 6e69 6420 6972 6576 2072 6576 2072      Min driver ver 
   36d30:	203a 7525 252e 2e75 7525 000a 7244 7669     : %u.%u.%u..Driv
   36d40:	7265 7620 7265 203a 7525 252e 2e75 7525     er ver: %u.%u.%u
   36d50:	000a 0000 3232 343a 3a39 3730 0000 0000     ....22:49:07....
   36d60:	7041 2072 3331 3220 3230 0034 7244 7669     Apr 13 2024.Driv
   36d70:	7265 6220 6975 746c 6120 2074 7325 2509     er built at %s.%
   36d80:	0a73 0000 694d 6d73 7461 6863 4620 7269     s...Mismatch Fir
   36d90:	616d 7277 2065 6556 7372 6f69 0a6e 0000     mawre Version...
   36da0:	654b 2079 7369 6e20 746f 7620 6c61 6469     Key is not valid
   36db0:	000a 0000 6e49 6176 696c 2064 654b 0a79     ....Invalid Key.
   36dc0:	0000 0000 5353 4449 4c20 4e45 4920 564e     ....SSID LEN INV
   36dd0:	4c41 4449 000a 0000 4843 4920 564e 4c41     ALID....CH INVAL
   36de0:	4449 000a 6e49 6176 696c 2064 6557 2070     ID..Invalid Wep 
   36df0:	656b 2079 6e69 6564 2078 6425 000a 0000     key index %d....
   36e00:	6e49 6176 696c 2064 6557 2070 656b 2079     Invalid Wep key 
   36e10:	656c 676e 6874 2520 0a64 0000 6e49 6f63     length %d...Inco
   36e20:	7272 6365 2074 5350 204b 656b 2079 656c     rrect PSK key le
   36e30:	676e 6874 000a 0000 6e75 6564 6966 656e     ngth....undefine
   36e40:	2064 6573 2063 7974 6570 000a 505f 5f53     d sec type.._PS_
   36e50:	4553 5652 5245 205f 7369 6e20 746f 6420     SERVER_ is not d
   36e60:	6665 6e69 6465 000a 694c 7473 6e65 6320     efined..Listen c
   36e70:	6168 6e6e 6c65 7320 6f68 6c75 2064 6e6f     hannel should on
   36e80:	796c 6220 2065 324d 5f4d 4957 4946 435f     ly be M2M_WIFI_C
   36e90:	5f48 2f31 2f36 3131 0a20 0000 4f50 4557     H_1/6/11 ...POWE
   36ea0:	2052 4153 4556 2520 0a64 0000 4e49 4156     R SAVE %d...INVA
   36eb0:	494c 2044 4f44 414d 4e49 4e20 4d41 0a45     LID DOMAIN NAME.
   36ec0:	0000 0000 5250 474e 4220 6675 6566 2072     ....PRNG Buffer 
   36ed0:	7865 6563 6465 6465 6d20 7861 6d69 6d75     exceeded maximum
   36ee0:	7320 7a69 2065 6425 6f20 2072 554e 4c4c      size %d or NULL
   36ef0:	4220 6675 6566 0a72 0000 0000                Buffer.....

00036efc <__FUNCTION__.17674>:
   36efc:	326d 5f6d 6977 6966 635f 0062               m2m_wifi_cb.

00036f08 <__FUNCTION__.17703>:
   36f08:	326d 5f6d 6977 6966 695f 696e 0074 0000     m2m_wifi_init...

00036f18 <__FUNCTION__.17734>:
   36f18:	326d 5f6d 6977 6966 635f 6e6f 656e 7463     m2m_wifi_connect
   36f28:	735f 0063 4128 5050 2829 5245 2952 255b     _sc.(APP)(ERR)[%
   36f38:	5d73 255b 5d64 0000 7542 2073 7265 6f72     s][%d]..Bus erro
   36f48:	2072 3528 2e29 6425 2520 786c 000a 0000     r (5).%d %lx....
   36f58:	000d 0000 6146 6c69 6465 7420 206f 6177     ....Failed to wa
   36f68:	756b 2070 6874 2065 6863 7069 000a 0000     kup the chip....
   36f78:	4128 5050 2829 4e49 4f46 0029 7244 7669     (APP)(INFO).Driv
   36f88:	7265 6556 4972 666e 3a6f 3020 2578 3830     erVerInfo: 0x%08
   36f98:	786c 000a 6166 6c69 6465 7420 206f 6564     lx..failed to de
   36fa8:	692d 696e 6974 6c61 7a69 0a65 0000 0000     -initialize.....

00036fb8 <__FUNCTION__.17531>:
   36fb8:	6863 7069 775f 6b61 0065 0000               chip_wake...

00036fc4 <__FUNCTION__.17580>:
   36fc4:	6863 7069 645f 6965 696e 0074 4128 5050     chip_deinit.(APP
   36fd4:	2829 5245 2952 255b 5d73 255b 5d64 0000     )(ERR)[%s][%d]..
   36fe4:	6e5b 696d 7320 6174 7472 3a5d 6620 6961     [nmi start]: fai
   36ff4:	206c 6e69 7469 6220 7375 000a 000d 0000     l init bus......
   37004:	4128 5050 2829 4e49 4f46 0029 6843 7069     (APP)(INFO).Chip
   37014:	4920 2044 6c25 0a78 0000 0000 6166 6c69      ID %lx.....fail
   37024:	6465 7420 206f 6e65 6261 656c 6920 746e     ed to enable int
   37034:	7265 7572 7470 2e73 0a2e 0000 6e5b 696d     errupts.....[nmi
   37044:	7320 6f74 5d70 203a 6863 7069 645f 6965      stop]: chip_dei
   37054:	696e 2074 6166 6c69 000a 0000 6e5b 696d     nit fail....[nmi
   37064:	7320 6f74 5d70 203a 5053 2049 6c66 7361      stop]: SPI flas
   37074:	2068 6964 6173 6c62 2065 6166 6c69 000a     h disable fail..
   37084:	6e5b 696d 7320 6f74 5d70 203a 6166 6c69     [nmi stop]: fail
   37094:	6920 696e 2074 7562 0a73 0000                init bus...

000370a0 <__FUNCTION__.17578>:
   370a0:	6d6e 645f 7672 695f 696e 0074               nm_drv_init.

000370ac <__FUNCTION__.17585>:
   370ac:	6d6e 645f 7672 645f 6965 696e 0074 0000     nm_drv_deinit...

000370bc <crc7_syndrome_table>:
   370bc:	0900 1b12 2d24 3f36 4148 535a 656c 777e     ....$-6?HAZSle~w
   370cc:	1019 020b 343d 262f 5851 4a43 7c75 6e67     ....=4/&QXCJu|gn
   370dc:	3b32 2920 1f16 0d04 737a 6168 575e 454c     2; )....zsha^WLE
   370ec:	222b 3039 060f 141d 6a63 7871 4e47 5c55     +"90....cjqxGNU\
   370fc:	6d64 7f76 4940 5b52 252c 373e 0108 131a     dmv.@IR[,%>7....
   3710c:	747d 666f 5059 424b 3c35 2e27 1811 0a03     }tofYPKB5<'.....
   3711c:	5f56 4d44 7b72 6960 171e 050c 333a 2128     V_DMr{`i....:3(!
   3712c:	464f 545d 626b 7079 0e07 1c15 2a23 3831     OF]Tkbyp....#*18
   3713c:	4841 5a53 6c65 7e77 0009 121b 242d 363f     AHSZelw~....-$?6
   3714c:	5158 434a 757c 676e 1910 0b02 3d34 2f26     XQJC|ung....4=&/
   3715c:	7a73 6861 5e57 4c45 323b 2029 161f 040d     szahW^EL;2) ....
   3716c:	636a 7178 474e 555c 2b22 3930 0f06 1d14     jcxqNG\U"+09....
   3717c:	2c25 3e37 0801 1a13 646d 767f 4049 525b     %,7>....md.vI@[R
   3718c:	353c 272e 1118 030a 7d74 6f66 5950 4b42     <5.'....t}foPYBK
   3719c:	1e17 0c05 3a33 2821 565f 444d 727b 6069     ....3:!(_VMD{ri`
   371ac:	070e 151c 232a 3138 4f46 5d54 6b62 7970     ....*#81FOT]bkpy
   371bc:	4128 5050 2829 5245 2952 255b 5d73 255b     (APP)(ERR)[%s][%
   371cc:	5d64 0000 6e5b 696d 7320 6970 3a5d 4620     d]..[nmi spi]: F
   371dc:	6961 656c 2064 6d63 2064 7277 7469 2c65     ailed cmd write,
   371ec:	6220 7375 6520 7272 726f 2e2e 0a2e 0000      bus error......
   371fc:	000d 0000 6e5b 696d 7320 6970 3a5d 4620     ....[nmi spi]: F
   3720c:	6961 656c 2064 7562 2073 7265 6f72 2e72     ailed bus error.
   3721c:	2e2e 000a 6e5b 696d 7320 6970 3a5d 4620     ....[nmi spi]: F
   3722c:	6961 656c 2064 6164 6174 7220 7365 6f70     ailed data respo
   3723c:	736e 2065 6572 6461 202c 7825 2520 2078     nse read, %x %x 
   3724c:	7825 000a 6e5b 696d 7320 6970 3a5d 4620     %x..[nmi spi]: F
   3725c:	6961 656c 2064 6d63 2064 6572 7073 6e6f     ailed cmd respon
   3726c:	6573 7220 6165 2c64 6220 7375 6520 7272     se read, bus err
   3727c:	726f 2e2e 0a2e 0000 6e5b 696d 7320 6970     or......[nmi spi
   3728c:	3a5d 7320 6970 6220 6675 6566 2072 6973     ]: spi buffer si
   3729c:	657a 7420 6f6f 7320 616d 6c6c 2820 6425     ze too small (%d
   372ac:	2029 2528 2964 000a 6e5b 696d 7320 6970     ) (%d)..[nmi spi
   372bc:	3a5d 4620 6961 656c 2064 6d63 2064 6572     ]: Failed cmd re
   372cc:	7073 6e6f 6573 202c 6d63 2064 2528 3230     sponse, cmd (%02
   372dc:	2978 202c 6572 7073 2820 3025 7832 0a29     x), resp (%02x).
   372ec:	0000 0000 6e5b 696d 7320 6970 3a5d 4620     ....[nmi spi]: F
   372fc:	6961 656c 2064 6d63 2064 7473 7461 2065     ailed cmd state 
   3730c:	6572 7073 6e6f 6573 7320 6174 6574 2820     response state (
   3731c:	3025 7832 0a29 0000 6e5b 696d 7320 6970     %02x)...[nmi spi
   3732c:	3a5d 4520 7272 726f 202c 6164 6174 7220     ]: Error, data r
   3733c:	6165 2064 6572 7073 6e6f 6573 2820 3025     ead response (%0
   3734c:	7832 0a29 0000 0000 6e5b 696d 7320 6970     2x).....[nmi spi
   3735c:	3a5d 6220 6675 6566 2072 766f 7265 7572     ]: buffer overru
   3736c:	206e 6877 6e65 7220 6165 6964 676e 6420     n when reading d
   3737c:	7461 2e61 000a 0000 6e5b 696d 7320 6970     ata.....[nmi spi
   3738c:	3a5d 6220 6675 6566 2072 766f 7265 7572     ]: buffer overru
   3739c:	206e 6877 6e65 7220 6165 6964 676e 6320     n when reading c
   373ac:	6372 0a2e 0000 0000 6e5b 696d 7320 6970     rc......[nmi spi
   373bc:	3a5d 4620 6961 656c 2064 6164 6174 6220     ]: Failed data b
   373cc:	6f6c 6b63 7220 6165 2c64 6220 7375 6520     lock read, bus e
   373dc:	7272 726f 2e2e 0a2e 0000 0000 6e5b 696d     rror........[nmi
   373ec:	7320 6970 3a5d 4620 6961 656c 2064 6164      spi]: Failed da
   373fc:	6174 6220 6f6c 6b63 6320 6372 7220 6165     ta block crc rea
   3740c:	2c64 6220 7375 6520 7272 726f 2e2e 0a2e     d, bus error....
   3741c:	0000 0000 6e5b 696d 7320 6970 3a5d 4620     ....[nmi spi]: F
   3742c:	6961 656c 2064 6164 6174 7220 7365 6f70     ailed data respo
   3743c:	736e 2065 6572 6461 202c 7562 2073 7265     nse read, bus er
   3744c:	6f72 2e72 2e2e 000a 6e5b 696d 7320 6970     ror.....[nmi spi
   3745c:	3a5d 4620 6961 656c 2064 6164 6174 7220     ]: Failed data r
   3746c:	7365 6f70 736e 2065 6572 6461 2e2e 282e     esponse read...(
   3747c:	3025 7832 0a29 0000 6e5b 696d 7320 6970     %02x)...[nmi spi
   3748c:	3a5d 4620 6961 656c 2064 6164 6174 6220     ]: Failed data b
   3749c:	6f6c 6b63 6320 646d 7720 6972 6574 202c     lock cmd write, 
   374ac:	7562 2073 7265 6f72 2e72 2e2e 000a 0000     bus error.......
   374bc:	6e5b 696d 7320 6970 3a5d 4620 6961 656c     [nmi spi]: Faile
   374cc:	2064 6164 6174 6220 6f6c 6b63 7720 6972     d data block wri
   374dc:	6574 202c 7562 2073 7265 6f72 2e72 2e2e     te, bus error...
   374ec:	000a 0000 6e5b 696d 7320 6970 3a5d 4620     ....[nmi spi]: F
   374fc:	6961 656c 2064 6164 6174 6220 6f6c 6b63     ailed data block
   3750c:	6320 6372 7720 6972 6574 202c 7562 2073      crc write, bus 
   3751c:	7265 6f72 2e72 2e2e 000a 0000 6e5b 696d     error.......[nmi
   3752c:	7320 6970 3a5d 4620 6961 656c 2064 6d63      spi]: Failed cm
   3753c:	2c64 7720 6972 6574 7220 6765 2820 3025     d, write reg (%0
   3754c:	7838 2e29 2e2e 000a 6552 6573 2074 6e61     8x).....Reset an
   3755c:	2064 6572 7274 2079 6425 2520 786c 2520     d retry %d %lx %
   3756c:	786c 000a 6e5b 696d 7320 6970 3a5d 4620     lx..[nmi spi]: F
   3757c:	6961 656c 2064 6d63 2c64 7720 6972 6574     ailed cmd, write
   3758c:	6220 6f6c 6b63 2820 3025 7838 2e29 2e2e      block (%08x)...
   3759c:	000a 0000 6e5b 696d 7320 6970 3a5d 4620     ....[nmi spi]: F
   375ac:	6961 656c 2064 6c62 636f 206b 6164 6174     ailed block data
   375bc:	7720 6972 6574 2e2e 0a2e 0000 6552 6573      write......Rese
   375cc:	2074 6e61 2064 6572 7274 2079 6425 2520     t and retry %d %
   375dc:	786c 2520 0a64 0000 6e5b 696d 7320 6970     lx %d...[nmi spi
   375ec:	3a5d 4620 6961 656c 2064 6d63 2c64 7220     ]: Failed cmd, r
   375fc:	6165 2064 6572 2067 2528 3830 2978 2e2e     ead reg (%08x)..
   3760c:	0a2e 0000 6552 6573 2074 6e61 2064 6572     ....Reset and re
   3761c:	7274 2079 6425 2520 786c 000a 6e5b 696d     try %d %lx..[nmi
   3762c:	7320 6970 3a5d 4620 6961 656c 2064 6d63      spi]: Failed cm
   3763c:	2c64 7220 6165 2064 6c62 636f 206b 2528     d, read block (%
   3764c:	3830 2978 2e2e 0a2e 0000 0000 6e5b 696d     08x)........[nmi
   3765c:	7320 6970 3a5d 4620 6961 656c 2064 6e69      spi]: Failed in
   3766c:	6574 6e72 6c61 7220 6165 2064 7270 746f     ternal read prot
   3767c:	636f 6c6f 7720 7469 2068 5243 2043 6e6f     ocol with CRC on
   3768c:	202c 6572 7974 6972 676e 7720 7469 2068     , retyring with 
   3769c:	5243 2043 666f 2e66 2e2e 000a 6e5b 696d     CRC off.....[nmi
   376ac:	7320 6970 3a5d 4620 6961 656c 2064 6e69      spi]: Failed in
   376bc:	6574 6e72 6c61 7220 6165 2064 7270 746f     ternal read prot
   376cc:	636f 6c6f 2e2e 0a2e 0000 0000 6e5b 696d     ocol........[nmi
   376dc:	7320 6970 3a5d 4620 6961 656c 2064 6e69      spi]: Failed in
   376ec:	6574 6e72 6c61 7720 6972 6574 7020 6f72     ternal write pro
   376fc:	6f74 6f63 206c 6572 2e67 2e2e 000a 0000     tocol reg.......
   3770c:	6e5b 696d 7320 6970 3a5d 4620 6961 206c     [nmi spi]: Fail 
   3771c:	6d63 2064 6572 6461 6320 6968 2070 6469     cmd read chip id
   3772c:	2e2e 0a2e 0000 0000 1da8 0002 1da8 0002     ................
   3773c:	1e38 0002 1cfc 0002 1d42 0002 1d64 0002     8.......B...d...
   3774c:	1dea 0002 1dea 0002 1ea4 0002 1cd0 0002     ................
   3775c:	1efe 0002 1efe 0002 1efe 0002 1efe 0002     ................
   3776c:	1d86 0002 2308 0002 2308 0002 2390 0002     .....#...#...#..
   3777c:	226c 0002 22ae 0002 22cc 0002 2346 0002     l"..."..."..F#..
   3778c:	2346 0002 23f2 0002 2244 0002 2442 0002     F#...#..D"..B$..
   3779c:	2442 0002 2442 0002 2442 0002 22ea 0002     B$..B$..B$..."..

000377ac <__FUNCTION__.16853>:
   377ac:	7073 5f69 6d63 0064                         spi_cmd.

000377b4 <__FUNCTION__.16860>:
   377b4:	7073 5f69 6164 6174 725f 7073 0000 0000     spi_data_rsp....

000377c4 <__FUNCTION__.16869>:
   377c4:	7073 5f69 6d63 5f64 7372 0070               spi_cmd_rsp.

000377d0 <__FUNCTION__.16902>:
   377d0:	7073 5f69 6d63 5f64 6f63 706d 656c 6574     spi_cmd_complete
   377e0:	0000 0000                                   ....

000377e4 <__FUNCTION__.16948>:
   377e4:	7073 5f69 6164 6174 775f 6972 6574 0000     spi_data_write..

000377f4 <__FUNCTION__.16960>:
   377f4:	7073 5f69 7277 7469 5f65 6572 0067 0000     spi_write_reg...

00037804 <__FUNCTION__.16971>:
   37804:	6d6e 735f 6970 775f 6972 6574 0000 0000     nm_spi_write....

00037814 <__FUNCTION__.16983>:
   37814:	7073 5f69 6572 6461 725f 6765 0000 0000     spi_read_reg....

00037824 <__FUNCTION__.16994>:
   37824:	6d6e 735f 6970 725f 6165 0064               nm_spi_read.

00037830 <__FUNCTION__.17015>:
   37830:	6d6e 735f 6970 695f 696e 0074 4128 5050     nm_spi_init.(APP
   37840:	2829 4e49 4f46 0029 4528 5252 2952 7543     )(INFO).(ERRR)Cu
   37850:	7272 6e65 2074 253c 3e64 000a 000d 0000     rrent <%d>......
   37860:	6f53 6b63 7465 2520 2064 6573 7373 6f69     Socket %d sessio
   37870:	206e 4449 3d20 2520 0d64 000a 6f53 6b63     n ID = %d...Sock
   37880:	7420 206f 6564 656c 6574 3c20 6425 0a3e      to delete <%d>.
   37890:	0000 0000 4128 5050 2829 5245 2952 255b     ....(APP)(ERR)[%
   378a0:	5d73 255b 5d64 0000 4e53 2049 7845 6563     s][%d]..SNI Exce
   378b0:	6465 2073 614d 2078 654c 676e 6874 000a     eds Max Length..
   378c0:	6e55 6e6b 776f 206e 5353 204c 6f53 6b63     Unknown SSL Sock
   378d0:	7465 4f20 7470 6f69 206e 6425 000a 0000     et Option %d....
   378e0:	6f4e 2074 5353 204c 6f53 6b63 7465 000a     Not SSL Socket..
   378f0:	5322 2f44 4d4d 2043 6143 6472 5320 6f6c     "SD/MMC Card Slo
   37900:	2074 2230 0000 0000                         t 0"....

00037908 <lun_desc>:
   37908:	d971 0001 d9c9 0001 da15 0001 da61 0001     q...........a...
   37918:	da91 0001 db15 0001 dba5 0001 78f0 0003     .............x..
   37928:	0800 4200 0c00 4200 1000 4200 1400 4200     ...B...B...B...B
   37938:	1800 4200 1c00 4200 0a09 0c0b 0e0d 0000     ...B...B........
   37948:	7d26 0002 7da0 0002 7da0 0002 7d44 0002     &}...}...}..D}..
   37958:	7d3e 0002 7d4a 0002 7d2c 0002 7d50 0002     >}..J}..,}..P}..
   37968:	7d86 0002 7f88 0002 7fd8 0002 7fd8 0002     .}..............
   37978:	7fd4 0002 7f7a 0002 7f9a 0002 7f6a 0002     ....z.......j...
   37988:	7fac 0002 7fbe 0002 8026 0002 8054 0002     ........&...T...
   37998:	8054 0002 8050 0002 8020 0002 802c 0002     T...P... ...,...
   379a8:	801a 0002 8032 0002 8038 0002               ....2...8...

000379b4 <tcc_modules>:
   379b4:	2000 4200 2400 4200 2800 4200               . .B.$.B.(.B

000379c0 <_tcc_gclk_ids>:
   379c0:	1a1a 001b                                   ....

000379c4 <_tcc_apbcmasks>:
   379c4:	0100 0000 0200 0000 0400 0000               ............

000379d0 <_tcc_maxs>:
   379d0:	ffff 00ff ffff 00ff ffff 0000               ............

000379dc <_tcc_cc_nums>:
   379dc:	0204 0002                                   ....

000379e0 <_tcc_ow_nums>:
   379e0:	0408 0002                                   ....

000379e4 <_tcc_intflag>:
   379e4:	0001 0000 0002 0000 0004 0000 0008 0000     ................
   379f4:	1000 0000 2000 0000 4000 0000 8000 0000     ..... ...@......
   37a04:	0000 0001 0000 0002 0000 0004 0000 0008     ................

00037a14 <LfnOfs>:
   37a14:	0301 0705 0e09 1210 1614 1c18 001e 0000     ................
   37a24:	2a22 3c3a 3f3e 7f7c 0000 0000 2c2b 3d3b     "*:<>?|.....+,;=
   37a34:	5d5b 0000 feeb 4d90 4453 534f 2e35 0030     [].....MSDOS5.0.
   37a44:	4f4e 4e20 4d41 2045 2020 4620 5441 3233     NO NAME    FAT32
   37a54:	2020 0020 4f4e 4e20 4d41 2045 2020 4620        .NO NAME    F
   37a64:	5441 2020 2020 0020                         AT     .

00037a6c <excvt.4558>:
   37a6c:	9a80 b690 b78e 808f d3d2 d8d4 ded7 8f8e     ................
   37a7c:	9290 e292 e399 ebea 9959 9d9a 9d9c 9f9e     ........Y.......
   37a8c:	d6b5 e9e0 a5a5 a7a6 a9a8 abaa 21ac afae     .............!..
   37a9c:	b1b0 b3b2 b5b4 b7b6 b9b8 bbba bdbc bfbe     ................
   37aac:	c1c0 c3c2 c5c4 c7c7 c9c8 cbca cdcc cfce     ................
   37abc:	d1d0 d3d2 d5d4 d7d6 d9d8 dbda dddc dfde     ................
   37acc:	e1e0 e3e2 e5e5 e7e6 e9e7 ebea eded efee     ................
   37adc:	f1f0 f3f2 f5f4 f7f6 f9f8 fbfa fdfc fffe     ................

00037aec <Tbl>:
   37aec:	00c7 00fc 00e9 00e2 00e4 00e0 00e5 00e7     ................
   37afc:	00ea 00eb 00e8 00ef 00ee 00ec 00c4 00c5     ................
   37b0c:	00c9 00e6 00c6 00f4 00f6 00f2 00fb 00f9     ................
   37b1c:	00ff 00d6 00dc 00f8 00a3 00d8 00d7 0192     ................
   37b2c:	00e1 00ed 00f3 00fa 00f1 00d1 00aa 00ba     ................
   37b3c:	00bf 00ae 00ac 00bd 00bc 00a1 00ab 00bb     ................
   37b4c:	2591 2592 2593 2502 2524 00c1 00c2 00c0     .%.%.%.%$%......
   37b5c:	00a9 2563 2551 2557 255d 00a2 00a5 2510     ..c%Q%W%]%.....%
   37b6c:	2514 2534 252c 251c 2500 253c 00e3 00c3     .%4%,%.%.%<%....
   37b7c:	255a 2554 2569 2566 2560 2550 256c 00a4     Z%T%i%f%`%P%l%..
   37b8c:	00f0 00d0 00ca 00cb 00c8 0131 00cd 00ce     ..........1.....
   37b9c:	00cf 2518 250c 2588 2584 00a6 00cc 2580     ...%.%.%.%.....%
   37bac:	00d3 00df 00d4 00d2 00f5 00d5 00b5 00fe     ................
   37bbc:	00de 00da 00db 00d9 00fd 00dd 00af 00b4     ................
   37bcc:	00ad 00b1 2017 00be 00b6 00a7 00f7 00b8     ..... ..........
   37bdc:	00b0 00a8 00b7 00b9 00b3 00b2 25a0 00a0     .............%..

00037bec <tbl_lower.4308>:
   37bec:	0061 0062 0063 0064 0065 0066 0067 0068     a.b.c.d.e.f.g.h.
   37bfc:	0069 006a 006b 006c 006d 006e 006f 0070     i.j.k.l.m.n.o.p.
   37c0c:	0071 0072 0073 0074 0075 0076 0077 0078     q.r.s.t.u.v.w.x.
   37c1c:	0079 007a 00a1 00a2 00a3 00a5 00ac 00af     y.z.............
   37c2c:	00e0 00e1 00e2 00e3 00e4 00e5 00e6 00e7     ................
   37c3c:	00e8 00e9 00ea 00eb 00ec 00ed 00ee 00ef     ................
   37c4c:	00f0 00f1 00f2 00f3 00f4 00f5 00f6 00f8     ................
   37c5c:	00f9 00fa 00fb 00fc 00fd 00fe 00ff 0101     ................
   37c6c:	0103 0105 0107 0109 010b 010d 010f 0111     ................
   37c7c:	0113 0115 0117 0119 011b 011d 011f 0121     ..............!.
   37c8c:	0123 0125 0127 0129 012b 012d 012f 0131     #.%.'.).+.-./.1.
   37c9c:	0133 0135 0137 013a 013c 013e 0140 0142     3.5.7.:.<.>.@.B.
   37cac:	0144 0146 0148 014b 014d 014f 0151 0153     D.F.H.K.M.O.Q.S.
   37cbc:	0155 0157 0159 015b 015d 015f 0161 0163     U.W.Y.[.]._.a.c.
   37ccc:	0165 0167 0169 016b 016d 016f 0171 0173     e.g.i.k.m.o.q.s.
   37cdc:	0175 0177 017a 017c 017e 0192 03b1 03b2     u.w.z.|.~.......
   37cec:	03b3 03b4 03b5 03b6 03b7 03b8 03b9 03ba     ................
   37cfc:	03bb 03bc 03bd 03be 03bf 03c0 03c1 03c3     ................
   37d0c:	03c4 03c5 03c6 03c7 03c8 03c9 03ca 0430     ..............0.
   37d1c:	0431 0432 0433 0434 0435 0436 0437 0438     1.2.3.4.5.6.7.8.
   37d2c:	0439 043a 043b 043c 043d 043e 043f 0440     9.:.;.<.=.>.?.@.
   37d3c:	0441 0442 0443 0444 0445 0446 0447 0448     A.B.C.D.E.F.G.H.
   37d4c:	0449 044a 044b 044c 044d 044e 044f 0451     I.J.K.L.M.N.O.Q.
   37d5c:	0452 0453 0454 0455 0456 0457 0458 0459     R.S.T.U.V.W.X.Y.
   37d6c:	045a 045b 045c 045e 045f 2170 2171 2172     Z.[.\.^._.p!q!r!
   37d7c:	2173 2174 2175 2176 2177 2178 2179 217a     s!t!u!v!w!x!y!z!
   37d8c:	217b 217c 217d 217e 217f ff41 ff42 ff43     {!|!}!~!.!A.B.C.
   37d9c:	ff44 ff45 ff46 ff47 ff48 ff49 ff4a ff4b     D.E.F.G.H.I.J.K.
   37dac:	ff4c ff4d ff4e ff4f ff50 ff51 ff52 ff53     L.M.N.O.P.Q.R.S.
   37dbc:	ff54 ff55 ff56 ff57 ff58 ff59 ff5a 0000     T.U.V.W.X.Y.Z...

00037dcc <tbl_upper.4309>:
   37dcc:	0041 0042 0043 0044 0045 0046 0047 0048     A.B.C.D.E.F.G.H.
   37ddc:	0049 004a 004b 004c 004d 004e 004f 0050     I.J.K.L.M.N.O.P.
   37dec:	0051 0052 0053 0054 0055 0056 0057 0058     Q.R.S.T.U.V.W.X.
   37dfc:	0059 005a 0021 ffe0 ffe1 ffe5 ffe2 ffe3     Y.Z.!...........
   37e0c:	00c0 00c1 00c2 00c3 00c4 00c5 00c6 00c7     ................
   37e1c:	00c8 00c9 00ca 00cb 00cc 00cd 00ce 00cf     ................
   37e2c:	00d0 00d1 00d2 00d3 00d4 00d5 00d6 00d8     ................
   37e3c:	00d9 00da 00db 00dc 00dd 00de 0178 0100     ............x...
   37e4c:	0102 0104 0106 0108 010a 010c 010e 0110     ................
   37e5c:	0112 0114 0116 0118 011a 011c 011e 0120     .............. .
   37e6c:	0122 0124 0126 0128 012a 012c 012e 0130     ".$.&.(.*.,...0.
   37e7c:	0132 0134 0136 0139 013b 013d 013f 0141     2.4.6.9.;.=.?.A.
   37e8c:	0143 0145 0147 014a 014c 014e 0150 0152     C.E.G.J.L.N.P.R.
   37e9c:	0154 0156 0158 015a 015c 015e 0160 0162     T.V.X.Z.\.^.`.b.
   37eac:	0164 0166 0168 016a 016c 016e 0170 0172     d.f.h.j.l.n.p.r.
   37ebc:	0174 0176 0179 017b 017d 0191 0391 0392     t.v.y.{.}.......
   37ecc:	0393 0394 0395 0396 0397 0398 0399 039a     ................
   37edc:	039b 039c 039d 039e 039f 03a0 03a1 03a3     ................
   37eec:	03a4 03a5 03a6 03a7 03a8 03a9 03aa 0410     ................
   37efc:	0411 0412 0413 0414 0415 0416 0417 0418     ................
   37f0c:	0419 041a 041b 041c 041d 041e 041f 0420     .............. .
   37f1c:	0421 0422 0423 0424 0425 0426 0427 0428     !.".#.$.%.&.'.(.
   37f2c:	0429 042a 042b 042c 042d 042e 042f 0401     ).*.+.,.-.../...
   37f3c:	0402 0403 0404 0405 0406 0407 0408 0409     ................
   37f4c:	040a 040b 040c 040e 040f 2160 2161 2162     ..........`!a!b!
   37f5c:	2163 2164 2165 2166 2167 2168 2169 216a     c!d!e!f!g!h!i!j!
   37f6c:	216b 216c 216d 216e 216f ff21 ff22 ff23     k!l!m!n!o!!.".#.
   37f7c:	ff24 ff25 ff26 ff27 ff28 ff29 ff2a ff2b     $.%.&.'.(.).*.+.
   37f8c:	ff2c ff2d ff2e ff2f ff30 ff31 ff32 ff33     ,.-.../.0.1.2.3.
   37f9c:	ff34 ff35 ff36 ff37 ff38 ff39 ff3a 0000     4.5.6.7.8.9.:...
   37fac:	d392 0002 d392 0002 d392 0002 d220 0002     ............ ...
   37fbc:	d392 0002 d30a 0002 d392 0002 d392 0002     ................
   37fcc:	d392 0002 d392 0002 d392 0002 d392 0002     ................
   37fdc:	d392 0002 d384 0002 514d 4354 0000 0000     ........MQTC....
   37fec:	0004 0000 0000 0000 0000 0000 0000 0000     ................
   37ffc:	003c 0001 514d 5754 0000 0000 0000 0000     <...MQTW........
	...
   3803c:	514d 4354 0000 0000 0004 0000 0000 0000     MQTC............
	...
   38054:	003c 0001 514d 5754 0000 0000 0000 0000     <...MQTW........
	...
   38094:	514d 5454 0000 0000 514d 7349 7064 0000     MQTT....MQIsdp..
   380a4:	7461 656d 2f6c 2e31 2e30 0032 7468 7074     atmel/1.0.2.http
   380b4:	2f3a 002f 7468 7074 3a73 2f2f 0000 0000     ://.https://....
   380c4:	4547 2054 0000 0000 4f50 5453 0020 0000     GET ....POST ...
   380d4:	4544 454c 4554 0020 5550 2054 0000 0000     DELETE .PUT ....
   380e4:	504f 4954 4e4f 2053 0000 0000 4548 4441     OPTIONS ....HEAD
   380f4:	0020 0000 4820 5454 2f50 2e31 0d31 000a      ... HTTP/1.1...
   38104:	7355 7265 412d 6567 746e 203a 0000 0000     User-Agent: ....
   38114:	0a0d 0000 6f48 7473 203a 0000 6f43 6e6e     ....Host: ..Conn
   38124:	6365 6974 6e6f 203a 654b 7065 412d 696c     ection: Keep-Ali
   38134:	6576 0a0d 0000 0000 6341 6563 7470 452d     ve......Accept-E
   38144:	636e 646f 6e69 3a67 0d20 000a 6341 6563     ncoding: ...Acce
   38154:	7470 432d 6168 7372 7465 203a 7475 2d66     pt-Charset: utf-
   38164:	0d38 000a 7254 6e61 6673 7265 452d 636e     8...Transfer-Enc
   38174:	646f 6e69 3a67 6320 7568 6b6e 6465 0a0d     oding: chunked..
   38184:	0000 0000 7525 0000 6f43 746e 6e65 2d74     ....%u..Content-
   38194:	654c 676e 6874 203a 0000 0000 3130 3332     Length: ....0123
   381a4:	3534 3736 3938 6261 6463 6665 7254 6e61     456789abcdefTran
   381b4:	6673 7265 452d 636e 646f 6e69 3a67 0020     sfer-Encoding: .
   381c4:	6f43 6e6e 6365 6974 6e6f 203a 0000 0000     Connection: ....
   381d4:	5448 5054 002f 0000 0d31 0000 f486 0002     HTTP/...1.......
   381e4:	f480 0002 f47a 0002 f474 0002 f48c 0002     ....z...t.......
   381f4:	f46e 0002 f48c 0002 f468 0002 f462 0002     n.......h...b...
   38204:	f48c 0002 f45c 0002 f45c 0002 f456 0002     ....\...\...V...
   38214:	f450 0002 f44a 0002 2000 4200 2400 4200     P...J.... .B.$.B
   38224:	2800 4200 0a0d 0a0d 2d2d 2d2d 452d 4553     .(.B....-----ESE
   38234:	3135 2036 614d 6e69 5020 6f72 7267 6d61     516 Main Program
   38244:	2d2d 2d2d 0d2d 000a 0a0d 0a0d 6e49 7469     -----.......Init
   38254:	6169 696c 657a 4820 2e57 2e2e 0a0d 0000     ialize HW.......
   38264:	7245 6f72 2072 6e69 7469 6169 696c 697a     Error initializi
   38274:	676e 4920 4332 4420 6972 6576 2172 0a0d     ng I2C Driver!..
   38284:	0000 0000 6e49 7469 6169 696c 657a 2064     ....Initialized 
   38294:	3249 2043 7244 7669 7265 0d21 000a 0000     I2C Driver!.....
   382a4:	6548 7061 6220 6665 726f 2065 7473 7261     Heap before star
   382b4:	6974 676e 7420 7361 736b 203a 6425 0a0d     ting tasks: %d..
   382c4:	0000 0000 4c43 5f49 4154 4b53 0000 0000     ....CLI_TASK....
   382d4:	5245 3a52 4320 494c 7420 7361 206b 6f63     ERR: CLI task co
   382e4:	6c75 2064 6f6e 2074 6562 6920 696e 6974     uld not be initi
   382f4:	6c61 7a69 6465 0d21 000a 0000 6548 7061     alized!.....Heap
   38304:	6120 7466 7265 7320 6174 7472 6e69 2067      after starting 
   38314:	4c43 3a49 2520 0d64 000a 0000 4957 4946     CLI: %d.....WIFI
   38324:	545f 5341 004b 0000 5245 3a52 5720 4649     _TASK...ERR: WIF
   38334:	2049 6174 6b73 6320 756f 646c 6e20 746f     I task could not
   38344:	6220 2065 6e69 7469 6169 696c 657a 2164      be initialized!
   38354:	0a0d 0000 6548 7061 6120 7466 7265 7320     ....Heap after s
   38364:	6174 7472 6e69 2067 4957 4946 203a 6425     tarting WIFI: %d
   38374:	0a0d 0000 7245 6f72 2072 6e6f 6d20 6d65     ....Error on mem
   38384:	726f 2079 6c61 6f6c 6163 6974 6e6f 6f20     ory allocation o
   38394:	206e 5246 4545 5452 534f 0d21 000a 0000     n FREERTOS!.....
   383a4:	7245 6f72 2072 6e6f 7320 6174 6b63 6f20     Error on stack o
   383b4:	6576 6672 6f6c 2077 6e6f 4620 4552 5245     verflow on FREER
   383c4:	4f54 2153 0a0d 0000 15b8 0003 1588 0003     TOS!............
   383d4:	159a 0003 14dc 0003 159a 0003 157e 0003     ............~...
   383e4:	159a 0003 14dc 0003 1588 0003 1588 0003     ................
   383f4:	157e 0003 14dc 0003 14e4 0003 14e4 0003     ~...............
   38404:	14e4 0003 15a0 0003 1588 0003 1588 0003     ................
   38414:	155c 0003 1640 0003 155c 0003 157e 0003     \...@...\...~...
   38424:	155c 0003 1640 0003 1588 0003 1588 0003     \...@...........
   38434:	157e 0003 1640 0003 14e4 0003 14e4 0003     ~...@...........
   38444:	14e4 0003 164a 0003 1fb4 0003 1f96 0003     ....J...........
   38454:	1f50 0003 1e6e 0003 1f50 0003 1f88 0003     P...n...P.......
   38464:	1f50 0003 1e6e 0003 1f96 0003 1f96 0003     P...n...........
   38474:	1f88 0003 1e6e 0003 1e66 0003 1e66 0003     ....n...f...f...
   38484:	1e66 0003 21cc 0003 2614 0003 24d4 0003     f....!...&...$..
   38494:	24d4 0003 24d0 0003 25ec 0003 25ec 0003     .$...$...%...%..
   384a4:	25de 0003 24d0 0003 25ec 0003 25de 0003     .%...$...%...%..
   384b4:	25ec 0003 24d0 0003 25f4 0003 25f4 0003     .%...$...%...%..
   384c4:	25f4 0003 27f8 0003                         .%...'..

000384cc <_global_impure_ptr>:
   384cc:	0144 2000                                   D.. 

000384d0 <__sf_fake_stderr>:
	...

000384f0 <__sf_fake_stdin>:
	...

00038510 <__sf_fake_stdout>:
	...
   38530:	0043 4f50 4953 0058 002e 2d23 2b30 0020     C.POSIX...#-0+ .
   38540:	6c68 004c 6665 4567 4746 3000 3231 3433     hlL.efgEFG.01234
   38550:	3635 3837 4139 4342 4544 0046 3130 3332     56789ABCDEF.0123
   38560:	3534 3736 3938 6261 6463 6665 0000               456789abcdef.

0003856d <_ctype_>:
   3856d:	2000 2020 2020 2020 2020 2828 2828 2028     .         ((((( 
   3857d:	2020 2020 2020 2020 2020 2020 2020 2020                     
   3858d:	8820 1010 1010 1010 1010 1010 1010 1010      ...............
   3859d:	0410 0404 0404 0404 0404 1004 1010 1010     ................
   385ad:	1010 4141 4141 4141 0101 0101 0101 0101     ..AAAAAA........
   385bd:	0101 0101 0101 0101 0101 0101 1010 1010     ................
   385cd:	1010 4242 4242 4242 0202 0202 0202 0202     ..BBBBBB........
   385dd:	0202 0202 0202 0202 0202 0202 1010 1010     ................
   385ed:	0020 0000 0000 0000 0000 0000 0000 0000      ...............
	...

00038670 <_init>:
   38670:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   38672:	46c0      	nop			; (mov r8, r8)
   38674:	bcf8      	pop	{r3, r4, r5, r6, r7}
   38676:	bc08      	pop	{r3}
   38678:	469e      	mov	lr, r3
   3867a:	4770      	bx	lr

0003867c <__init_array_start>:
   3867c:	000120dd 	.word	0x000120dd

00038680 <_fini>:
   38680:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   38682:	46c0      	nop			; (mov r8, r8)
   38684:	bcf8      	pop	{r3, r4, r5, r6, r7}
   38686:	bc08      	pop	{r3}
   38688:	469e      	mov	lr, r3
   3868a:	4770      	bx	lr

0003868c <__fini_array_start>:
   3868c:	000120b5 	.word	0x000120b5
