
CommProtocols_A08G.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00004d34  00000000  00000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     0000000c  20000000  00004d34  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000180  2000000c  00004d40  0002000c  2**2
                  ALLOC
  3 .stack        00002004  2000018c  00004ec0  0002000c  2**0
                  ALLOC
  4 .ARM.attributes 00000028  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
  5 .comment      00000059  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY
  6 .debug_info   0003ae1a  00000000  00000000  0002008d  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00004854  00000000  00000000  0005aea7  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    00009b0a  00000000  00000000  0005f6fb  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 00000668  00000000  00000000  00069205  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000b90  00000000  00000000  0006986d  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  0001b361  00000000  00000000  0006a3fd  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   0000f223  00000000  00000000  0008575e  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    0008bb52  00000000  00000000  00094981  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  00001220  00000000  00000000  001204d4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
       0:	90 21 00 20 5d 2a 00 00 59 2a 00 00 59 2a 00 00     .!. ]*..Y*..Y*..
	...
      2c:	59 2a 00 00 00 00 00 00 00 00 00 00 59 2a 00 00     Y*..........Y*..
      3c:	59 2a 00 00 59 2a 00 00 59 2a 00 00 59 2a 00 00     Y*..Y*..Y*..Y*..
      4c:	59 2a 00 00 59 2a 00 00 59 2a 00 00 59 2a 00 00     Y*..Y*..Y*..Y*..
      5c:	59 2a 00 00 59 2a 00 00 8d 21 00 00 9d 21 00 00     Y*..Y*...!...!..
      6c:	ad 21 00 00 bd 21 00 00 cd 21 00 00 dd 21 00 00     .!...!...!...!..
      7c:	59 2a 00 00 59 2a 00 00 59 2a 00 00 59 2a 00 00     Y*..Y*..Y*..Y*..
      8c:	59 2a 00 00 59 2a 00 00 00 00 00 00 00 00 00 00     Y*..Y*..........
      9c:	59 2a 00 00 59 2a 00 00 59 2a 00 00 59 2a 00 00     Y*..Y*..Y*..Y*..
      ac:	59 2a 00 00 00 00 00 00                             Y*......

000000b4 <__do_global_dtors_aux>:
      b4:	b510      	push	{r4, lr}
      b6:	4c06      	ldr	r4, [pc, #24]	; (d0 <__do_global_dtors_aux+0x1c>)
      b8:	7823      	ldrb	r3, [r4, #0]
      ba:	2b00      	cmp	r3, #0
      bc:	d107      	bne.n	ce <__do_global_dtors_aux+0x1a>
      be:	4b05      	ldr	r3, [pc, #20]	; (d4 <__do_global_dtors_aux+0x20>)
      c0:	2b00      	cmp	r3, #0
      c2:	d002      	beq.n	ca <__do_global_dtors_aux+0x16>
      c4:	4804      	ldr	r0, [pc, #16]	; (d8 <__do_global_dtors_aux+0x24>)
      c6:	e000      	b.n	ca <__do_global_dtors_aux+0x16>
      c8:	bf00      	nop
      ca:	2301      	movs	r3, #1
      cc:	7023      	strb	r3, [r4, #0]
      ce:	bd10      	pop	{r4, pc}
      d0:	2000000c 	.word	0x2000000c
      d4:	00000000 	.word	0x00000000
      d8:	00004d34 	.word	0x00004d34

000000dc <frame_dummy>:
      dc:	4b08      	ldr	r3, [pc, #32]	; (100 <frame_dummy+0x24>)
      de:	b510      	push	{r4, lr}
      e0:	2b00      	cmp	r3, #0
      e2:	d003      	beq.n	ec <frame_dummy+0x10>
      e4:	4907      	ldr	r1, [pc, #28]	; (104 <frame_dummy+0x28>)
      e6:	4808      	ldr	r0, [pc, #32]	; (108 <frame_dummy+0x2c>)
      e8:	e000      	b.n	ec <frame_dummy+0x10>
      ea:	bf00      	nop
      ec:	4807      	ldr	r0, [pc, #28]	; (10c <frame_dummy+0x30>)
      ee:	6803      	ldr	r3, [r0, #0]
      f0:	2b00      	cmp	r3, #0
      f2:	d100      	bne.n	f6 <frame_dummy+0x1a>
      f4:	bd10      	pop	{r4, pc}
      f6:	4b06      	ldr	r3, [pc, #24]	; (110 <frame_dummy+0x34>)
      f8:	2b00      	cmp	r3, #0
      fa:	d0fb      	beq.n	f4 <frame_dummy+0x18>
      fc:	4798      	blx	r3
      fe:	e7f9      	b.n	f4 <frame_dummy+0x18>
     100:	00000000 	.word	0x00000000
     104:	20000010 	.word	0x20000010
     108:	00004d34 	.word	0x00004d34
     10c:	00004d34 	.word	0x00004d34
     110:	00000000 	.word	0x00000000

00000114 <delay_init>:
 *
 * This must be called during start up to initialize the delay routine with
 * the current used main clock. It must run any time the main CPU clock is changed.
 */
void delay_init(void)
{
     114:	b570      	push	{r4, r5, r6, lr}
	cycles_per_ms = system_gclk_gen_get_hz(0);
     116:	2000      	movs	r0, #0
     118:	4b08      	ldr	r3, [pc, #32]	; (13c <delay_init+0x28>)
     11a:	4798      	blx	r3
     11c:	0005      	movs	r5, r0
	cycles_per_ms /= 1000;
     11e:	4c08      	ldr	r4, [pc, #32]	; (140 <delay_init+0x2c>)
     120:	21fa      	movs	r1, #250	; 0xfa
     122:	0089      	lsls	r1, r1, #2
     124:	47a0      	blx	r4
     126:	4b07      	ldr	r3, [pc, #28]	; (144 <delay_init+0x30>)
     128:	6018      	str	r0, [r3, #0]
	cycles_per_us = cycles_per_ms / 1000;
     12a:	4907      	ldr	r1, [pc, #28]	; (148 <delay_init+0x34>)
     12c:	0028      	movs	r0, r5
     12e:	47a0      	blx	r4
     130:	4b06      	ldr	r3, [pc, #24]	; (14c <delay_init+0x38>)
     132:	6018      	str	r0, [r3, #0]

	SysTick->CTRL = SysTick_CTRL_CLKSOURCE_Msk | SysTick_CTRL_ENABLE_Msk;
     134:	2205      	movs	r2, #5
     136:	4b06      	ldr	r3, [pc, #24]	; (150 <delay_init+0x3c>)
     138:	601a      	str	r2, [r3, #0]
}
     13a:	bd70      	pop	{r4, r5, r6, pc}
     13c:	000027e9 	.word	0x000027e9
     140:	00003189 	.word	0x00003189
     144:	20000000 	.word	0x20000000
     148:	000f4240 	.word	0x000f4240
     14c:	20000004 	.word	0x20000004
     150:	e000e010 	.word	0xe000e010

00000154 <delay_cycles_ms>:
 *
 * \param n  Number of milliseconds to wait
 */
void delay_cycles_ms(
		uint32_t n)
{
     154:	b530      	push	{r4, r5, lr}
	while (n--) {
		/* Devide up to blocks of 1ms */
		delay_cycles(cycles_per_ms);
     156:	4b08      	ldr	r3, [pc, #32]	; (178 <delay_cycles_ms+0x24>)
     158:	681c      	ldr	r4, [r3, #0]
 */
static inline void delay_cycles(
		const uint32_t n)
{
	if (n > 0) {
		SysTick->LOAD = n;
     15a:	4a08      	ldr	r2, [pc, #32]	; (17c <delay_cycles_ms+0x28>)
		SysTick->VAL = 0;
     15c:	2500      	movs	r5, #0

		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
     15e:	2180      	movs	r1, #128	; 0x80
     160:	0249      	lsls	r1, r1, #9
	while (n--) {
     162:	3801      	subs	r0, #1
     164:	d307      	bcc.n	176 <delay_cycles_ms+0x22>
	if (n > 0) {
     166:	2c00      	cmp	r4, #0
     168:	d0fb      	beq.n	162 <delay_cycles_ms+0xe>
		SysTick->LOAD = n;
     16a:	6054      	str	r4, [r2, #4]
		SysTick->VAL = 0;
     16c:	6095      	str	r5, [r2, #8]
		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
     16e:	6813      	ldr	r3, [r2, #0]
     170:	420b      	tst	r3, r1
     172:	d0fc      	beq.n	16e <delay_cycles_ms+0x1a>
     174:	e7f5      	b.n	162 <delay_cycles_ms+0xe>
	}
}
     176:	bd30      	pop	{r4, r5, pc}
     178:	20000000 	.word	0x20000000
     17c:	e000e010 	.word	0xe000e010

00000180 <_i2c_master_wait_for_sync>:
	if (tmp_status == STATUS_OK) {
		/* Read data buffer. */
		while (tmp_data_length--) {
			/* Check that bus ownership is not lost. */
			if (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(2))) {
				return STATUS_ERR_PACKET_COLLISION;
     180:	6801      	ldr	r1, [r0, #0]
     182:	2207      	movs	r2, #7
     184:	69cb      	ldr	r3, [r1, #28]
     186:	421a      	tst	r2, r3
     188:	d1fc      	bne.n	184 <_i2c_master_wait_for_sync+0x4>
     18a:	4770      	bx	lr

0000018c <i2c_master_init>:
     18c:	b5f0      	push	{r4, r5, r6, r7, lr}
     18e:	46d6      	mov	lr, sl
     190:	464f      	mov	r7, r9
     192:	4646      	mov	r6, r8
     194:	b5c0      	push	{r6, r7, lr}
     196:	b08a      	sub	sp, #40	; 0x28
     198:	0006      	movs	r6, r0
     19a:	000f      	movs	r7, r1
     19c:	0014      	movs	r4, r2
     19e:	6031      	str	r1, [r6, #0]
	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
     1a0:	0008      	movs	r0, r1
     1a2:	4ba0      	ldr	r3, [pc, #640]	; (424 <i2c_master_init+0x298>)
     1a4:	4798      	blx	r3
		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBMASK.reg |= mask;
			break;

		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCMASK.reg |= mask;
     1a6:	4aa0      	ldr	r2, [pc, #640]	; (428 <i2c_master_init+0x29c>)
     1a8:	6a11      	ldr	r1, [r2, #32]
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
     1aa:	1c85      	adds	r5, r0, #2
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
     1ac:	2301      	movs	r3, #1
     1ae:	40ab      	lsls	r3, r5
     1b0:	430b      	orrs	r3, r1
     1b2:	6213      	str	r3, [r2, #32]
	gclk_chan_conf.source_generator = config->generator_source;
     1b4:	a909      	add	r1, sp, #36	; 0x24
     1b6:	7b23      	ldrb	r3, [r4, #12]
     1b8:	700b      	strb	r3, [r1, #0]
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
     1ba:	3014      	adds	r0, #20
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
     1bc:	b2c5      	uxtb	r5, r0
     1be:	0028      	movs	r0, r5
     1c0:	4b9a      	ldr	r3, [pc, #616]	; (42c <i2c_master_init+0x2a0>)
     1c2:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
     1c4:	0028      	movs	r0, r5
     1c6:	4b9a      	ldr	r3, [pc, #616]	; (430 <i2c_master_init+0x2a4>)
     1c8:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
     1ca:	7b20      	ldrb	r0, [r4, #12]
     1cc:	2100      	movs	r1, #0
     1ce:	4b99      	ldr	r3, [pc, #612]	; (434 <i2c_master_init+0x2a8>)
     1d0:	4798      	blx	r3
	if (i2c_module->CTRLA.reg & SERCOM_I2CM_CTRLA_ENABLE) {
     1d2:	683b      	ldr	r3, [r7, #0]
		return STATUS_ERR_DENIED;
     1d4:	201c      	movs	r0, #28
	if (i2c_module->CTRLA.reg & SERCOM_I2CM_CTRLA_ENABLE) {
     1d6:	079b      	lsls	r3, r3, #30
     1d8:	d505      	bpl.n	1e6 <i2c_master_init+0x5a>
}
     1da:	b00a      	add	sp, #40	; 0x28
     1dc:	bc1c      	pop	{r2, r3, r4}
     1de:	4690      	mov	r8, r2
     1e0:	4699      	mov	r9, r3
     1e2:	46a2      	mov	sl, r4
     1e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (i2c_module->CTRLA.reg & SERCOM_I2CM_CTRLA_SWRST) {
     1e6:	683b      	ldr	r3, [r7, #0]
		return STATUS_BUSY;
     1e8:	3817      	subs	r0, #23
	if (i2c_module->CTRLA.reg & SERCOM_I2CM_CTRLA_SWRST) {
     1ea:	07db      	lsls	r3, r3, #31
     1ec:	d4f5      	bmi.n	1da <i2c_master_init+0x4e>
	uint8_t instance_index = _sercom_get_sercom_inst_index(module->hw);
     1ee:	6830      	ldr	r0, [r6, #0]
     1f0:	4b8c      	ldr	r3, [pc, #560]	; (424 <i2c_master_init+0x298>)
     1f2:	4699      	mov	r9, r3
     1f4:	4798      	blx	r3
     1f6:	0005      	movs	r5, r0
	_sercom_set_handler(instance_index, _i2c_master_interrupt_handler);
     1f8:	498f      	ldr	r1, [pc, #572]	; (438 <i2c_master_init+0x2ac>)
     1fa:	4b90      	ldr	r3, [pc, #576]	; (43c <i2c_master_init+0x2b0>)
     1fc:	4798      	blx	r3
	_sercom_instances[instance_index] = module;
     1fe:	00ad      	lsls	r5, r5, #2
     200:	4b8f      	ldr	r3, [pc, #572]	; (440 <i2c_master_init+0x2b4>)
     202:	50ee      	str	r6, [r5, r3]
	module->registered_callback = 0;
     204:	2300      	movs	r3, #0
     206:	7633      	strb	r3, [r6, #24]
	module->enabled_callback = 0;
     208:	7673      	strb	r3, [r6, #25]
	module->buffer_length = 0;
     20a:	2500      	movs	r5, #0
     20c:	8373      	strh	r3, [r6, #26]
	module->buffer_remaining = 0;
     20e:	83b3      	strh	r3, [r6, #28]
	module->status = STATUS_OK;
     210:	2225      	movs	r2, #37	; 0x25
     212:	54b5      	strb	r5, [r6, r2]
	module->buffer = NULL;
     214:	6233      	str	r3, [r6, #32]
	i2c_module->CTRLA.reg = SERCOM_I2CM_CTRLA_MODE(0x5);
     216:	3314      	adds	r3, #20
     218:	603b      	str	r3, [r7, #0]
	SercomI2cm *const i2c_module = &(module->hw->I2CM);
     21a:	6833      	ldr	r3, [r6, #0]
     21c:	4698      	mov	r8, r3
	uint8_t sercom_index = _sercom_get_sercom_inst_index(sercom_hw);
     21e:	0018      	movs	r0, r3
     220:	47c8      	blx	r9
     222:	4681      	mov	r9, r0
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
     224:	2380      	movs	r3, #128	; 0x80
     226:	aa08      	add	r2, sp, #32
     228:	7013      	strb	r3, [r2, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
     22a:	7055      	strb	r5, [r2, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
     22c:	2301      	movs	r3, #1
     22e:	7093      	strb	r3, [r2, #2]
	config->powersave    = false;
     230:	70d5      	strb	r5, [r2, #3]
	uint32_t pad0 = config->pinmux_pad0;
     232:	69e0      	ldr	r0, [r4, #28]
	uint32_t pad1 = config->pinmux_pad1;
     234:	6a27      	ldr	r7, [r4, #32]
	if (pad0 == PINMUX_DEFAULT) {
     236:	2800      	cmp	r0, #0
     238:	d100      	bne.n	23c <i2c_master_init+0xb0>
     23a:	e0af      	b.n	39c <i2c_master_init+0x210>
	pin_conf.mux_position = pad0 & 0xFFFF;
     23c:	ab08      	add	r3, sp, #32
     23e:	7018      	strb	r0, [r3, #0]
	pin_conf.direction    = SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK;
     240:	2302      	movs	r3, #2
     242:	aa08      	add	r2, sp, #32
     244:	7053      	strb	r3, [r2, #1]
	system_pinmux_pin_set_config(pad0 >> 16, &pin_conf);
     246:	0c00      	lsrs	r0, r0, #16
     248:	b2c0      	uxtb	r0, r0
     24a:	0011      	movs	r1, r2
     24c:	4b7d      	ldr	r3, [pc, #500]	; (444 <i2c_master_init+0x2b8>)
     24e:	4798      	blx	r3
	if (pad1 == PINMUX_DEFAULT) {
     250:	2f00      	cmp	r7, #0
     252:	d100      	bne.n	256 <i2c_master_init+0xca>
     254:	e0a7      	b.n	3a6 <i2c_master_init+0x21a>
	pin_conf.mux_position = pad1 & 0xFFFF;
     256:	ab08      	add	r3, sp, #32
     258:	701f      	strb	r7, [r3, #0]
	pin_conf.direction    = SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK;
     25a:	2302      	movs	r3, #2
     25c:	aa08      	add	r2, sp, #32
     25e:	7053      	strb	r3, [r2, #1]
	system_pinmux_pin_set_config(pad1 >> 16, &pin_conf);
     260:	0c3f      	lsrs	r7, r7, #16
     262:	b2f8      	uxtb	r0, r7
     264:	0011      	movs	r1, r2
     266:	4b77      	ldr	r3, [pc, #476]	; (444 <i2c_master_init+0x2b8>)
     268:	4798      	blx	r3
	module->unknown_bus_state_timeout = config->unknown_bus_state_timeout;
     26a:	8aa3      	ldrh	r3, [r4, #20]
     26c:	80f3      	strh	r3, [r6, #6]
	module->buffer_timeout = config->buffer_timeout;
     26e:	8ae3      	ldrh	r3, [r4, #22]
     270:	8133      	strh	r3, [r6, #8]
	if (config->run_in_standby || system_is_debugger_present()) {
     272:	7e23      	ldrb	r3, [r4, #24]
		tmp_ctrla = SERCOM_I2CM_CTRLA_RUNSTDBY;
     274:	2280      	movs	r2, #128	; 0x80
	if (config->run_in_standby || system_is_debugger_present()) {
     276:	2b00      	cmp	r3, #0
     278:	d104      	bne.n	284 <i2c_master_init+0xf8>
 * \retval false Debugger is not connected to the system
 *
 */
static inline bool system_is_debugger_present(void)
{
	return DSU->STATUSB.reg & DSU_STATUSB_DBGPRES;
     27a:	4b73      	ldr	r3, [pc, #460]	; (448 <i2c_master_init+0x2bc>)
     27c:	789b      	ldrb	r3, [r3, #2]
     27e:	079b      	lsls	r3, r3, #30
		tmp_ctrla = SERCOM_I2CM_CTRLA_RUNSTDBY;
     280:	0fdb      	lsrs	r3, r3, #31
     282:	01da      	lsls	r2, r3, #7
	tmp_ctrla |= config->transfer_speed;
     284:	68a1      	ldr	r1, [r4, #8]
     286:	6923      	ldr	r3, [r4, #16]
     288:	430b      	orrs	r3, r1
     28a:	4313      	orrs	r3, r2
	if (config->scl_low_timeout) {
     28c:	2224      	movs	r2, #36	; 0x24
     28e:	5ca2      	ldrb	r2, [r4, r2]
     290:	2a00      	cmp	r2, #0
     292:	d002      	beq.n	29a <i2c_master_init+0x10e>
		tmp_ctrla |= SERCOM_I2CM_CTRLA_LOWTOUTEN;
     294:	2280      	movs	r2, #128	; 0x80
     296:	05d2      	lsls	r2, r2, #23
     298:	4313      	orrs	r3, r2
		tmp_ctrla |= config->inactive_timeout;
     29a:	6aa2      	ldr	r2, [r4, #40]	; 0x28
     29c:	4313      	orrs	r3, r2
	if (config->scl_stretch_only_after_ack_bit || (config->transfer_speed == I2C_MASTER_SPEED_HIGH_SPEED)) {
     29e:	222c      	movs	r2, #44	; 0x2c
     2a0:	5ca2      	ldrb	r2, [r4, r2]
     2a2:	2a00      	cmp	r2, #0
     2a4:	d103      	bne.n	2ae <i2c_master_init+0x122>
     2a6:	2280      	movs	r2, #128	; 0x80
     2a8:	0492      	lsls	r2, r2, #18
     2aa:	4291      	cmp	r1, r2
     2ac:	d102      	bne.n	2b4 <i2c_master_init+0x128>
		tmp_ctrla |= SERCOM_I2CM_CTRLA_SCLSM;
     2ae:	2280      	movs	r2, #128	; 0x80
     2b0:	0512      	lsls	r2, r2, #20
     2b2:	4313      	orrs	r3, r2
	if (config->slave_scl_low_extend_timeout) {
     2b4:	222d      	movs	r2, #45	; 0x2d
     2b6:	5ca2      	ldrb	r2, [r4, r2]
     2b8:	2a00      	cmp	r2, #0
     2ba:	d002      	beq.n	2c2 <i2c_master_init+0x136>
		tmp_ctrla |= SERCOM_I2CM_CTRLA_SEXTTOEN;
     2bc:	2280      	movs	r2, #128	; 0x80
     2be:	0412      	lsls	r2, r2, #16
     2c0:	4313      	orrs	r3, r2
	if (config->master_scl_low_extend_timeout) {
     2c2:	222e      	movs	r2, #46	; 0x2e
     2c4:	5ca2      	ldrb	r2, [r4, r2]
     2c6:	2a00      	cmp	r2, #0
     2c8:	d002      	beq.n	2d0 <i2c_master_init+0x144>
		tmp_ctrla |= SERCOM_I2CM_CTRLA_MEXTTOEN;
     2ca:	2280      	movs	r2, #128	; 0x80
     2cc:	03d2      	lsls	r2, r2, #15
     2ce:	4313      	orrs	r3, r2
	i2c_module->CTRLA.reg |= tmp_ctrla;
     2d0:	4642      	mov	r2, r8
     2d2:	6812      	ldr	r2, [r2, #0]
     2d4:	4313      	orrs	r3, r2
     2d6:	4642      	mov	r2, r8
     2d8:	6013      	str	r3, [r2, #0]
	i2c_module->CTRLB.reg = SERCOM_I2CM_CTRLB_SMEN;
     2da:	2380      	movs	r3, #128	; 0x80
     2dc:	005b      	lsls	r3, r3, #1
     2de:	6053      	str	r3, [r2, #4]
	uint32_t fgclk       = system_gclk_chan_get_hz(SERCOM0_GCLK_ID_CORE + sercom_index);
     2e0:	4648      	mov	r0, r9
     2e2:	3014      	adds	r0, #20
     2e4:	b2c0      	uxtb	r0, r0
     2e6:	4b59      	ldr	r3, [pc, #356]	; (44c <i2c_master_init+0x2c0>)
     2e8:	4798      	blx	r3
     2ea:	9007      	str	r0, [sp, #28]
	uint32_t fscl        = 1000 * config->baud_rate;
     2ec:	23fa      	movs	r3, #250	; 0xfa
     2ee:	009b      	lsls	r3, r3, #2
     2f0:	6822      	ldr	r2, [r4, #0]
     2f2:	435a      	muls	r2, r3
     2f4:	4691      	mov	r9, r2
	uint32_t fscl_hs     = 1000 * config->baud_rate_high_speed;
     2f6:	6863      	ldr	r3, [r4, #4]
     2f8:	469a      	mov	sl, r3
	tmp_baud = (int32_t)(div_ceil(
     2fa:	4d55      	ldr	r5, [pc, #340]	; (450 <i2c_master_init+0x2c4>)
     2fc:	47a8      	blx	r5
     2fe:	9000      	str	r0, [sp, #0]
     300:	9101      	str	r1, [sp, #4]
     302:	464b      	mov	r3, r9
     304:	0058      	lsls	r0, r3, #1
     306:	47a8      	blx	r5
     308:	9002      	str	r0, [sp, #8]
     30a:	9103      	str	r1, [sp, #12]
     30c:	8e20      	ldrh	r0, [r4, #48]	; 0x30
     30e:	47a8      	blx	r5
     310:	9004      	str	r0, [sp, #16]
     312:	9105      	str	r1, [sp, #20]
     314:	4f4f      	ldr	r7, [pc, #316]	; (454 <i2c_master_init+0x2c8>)
     316:	4a50      	ldr	r2, [pc, #320]	; (458 <i2c_master_init+0x2cc>)
     318:	4b50      	ldr	r3, [pc, #320]	; (45c <i2c_master_init+0x2d0>)
     31a:	9800      	ldr	r0, [sp, #0]
     31c:	9901      	ldr	r1, [sp, #4]
     31e:	47b8      	blx	r7
     320:	0002      	movs	r2, r0
     322:	000b      	movs	r3, r1
     324:	9804      	ldr	r0, [sp, #16]
     326:	9905      	ldr	r1, [sp, #20]
     328:	47b8      	blx	r7
     32a:	4e4d      	ldr	r6, [pc, #308]	; (460 <i2c_master_init+0x2d4>)
     32c:	2200      	movs	r2, #0
     32e:	4b4d      	ldr	r3, [pc, #308]	; (464 <i2c_master_init+0x2d8>)
     330:	47b0      	blx	r6
     332:	9004      	str	r0, [sp, #16]
     334:	9105      	str	r1, [sp, #20]
     336:	4648      	mov	r0, r9
     338:	47a8      	blx	r5
     33a:	0002      	movs	r2, r0
     33c:	000b      	movs	r3, r1
     33e:	9804      	ldr	r0, [sp, #16]
     340:	9905      	ldr	r1, [sp, #20]
     342:	47b8      	blx	r7
     344:	0002      	movs	r2, r0
     346:	000b      	movs	r3, r1
     348:	4d47      	ldr	r5, [pc, #284]	; (468 <i2c_master_init+0x2dc>)
     34a:	9800      	ldr	r0, [sp, #0]
     34c:	9901      	ldr	r1, [sp, #4]
     34e:	47a8      	blx	r5
     350:	9a02      	ldr	r2, [sp, #8]
     352:	9b03      	ldr	r3, [sp, #12]
     354:	47b0      	blx	r6
     356:	2200      	movs	r2, #0
     358:	4b44      	ldr	r3, [pc, #272]	; (46c <i2c_master_init+0x2e0>)
     35a:	47a8      	blx	r5
     35c:	9a02      	ldr	r2, [sp, #8]
     35e:	9b03      	ldr	r3, [sp, #12]
     360:	4d43      	ldr	r5, [pc, #268]	; (470 <i2c_master_init+0x2e4>)
     362:	47a8      	blx	r5
     364:	4b43      	ldr	r3, [pc, #268]	; (474 <i2c_master_init+0x2e8>)
     366:	4798      	blx	r3
     368:	0005      	movs	r5, r0
	if (config->transfer_speed == I2C_MASTER_SPEED_HIGH_SPEED) {
     36a:	2380      	movs	r3, #128	; 0x80
     36c:	049b      	lsls	r3, r3, #18
     36e:	68a2      	ldr	r2, [r4, #8]
     370:	429a      	cmp	r2, r3
     372:	d01e      	beq.n	3b2 <i2c_master_init+0x226>
	if (tmp_baud > 255 || tmp_baud < 0 || tmp_baud_hs > 255 || tmp_baud_hs < 0) {
     374:	0003      	movs	r3, r0
     376:	2040      	movs	r0, #64	; 0x40
     378:	2dff      	cmp	r5, #255	; 0xff
     37a:	d900      	bls.n	37e <i2c_master_init+0x1f2>
     37c:	e72d      	b.n	1da <i2c_master_init+0x4e>
	int32_t tmp_baudlow_hs = 0;
     37e:	2400      	movs	r4, #0
	int32_t tmp_baud_hs = 0;
     380:	2000      	movs	r0, #0
		i2c_module->BAUD.reg = SERCOM_I2CM_BAUD_BAUD(tmp_baud) |
     382:	25ff      	movs	r5, #255	; 0xff
     384:	401d      	ands	r5, r3
			SERCOM_I2CM_BAUD_HSBAUD(tmp_baud_hs) | SERCOM_I2CM_BAUD_HSBAUDLOW(tmp_baudlow_hs);
     386:	0624      	lsls	r4, r4, #24
     388:	4325      	orrs	r5, r4
     38a:	0400      	lsls	r0, r0, #16
     38c:	23ff      	movs	r3, #255	; 0xff
     38e:	041b      	lsls	r3, r3, #16
     390:	4018      	ands	r0, r3
     392:	4305      	orrs	r5, r0
		i2c_module->BAUD.reg = SERCOM_I2CM_BAUD_BAUD(tmp_baud) |
     394:	4643      	mov	r3, r8
     396:	60dd      	str	r5, [r3, #12]
	enum status_code tmp_status_code = STATUS_OK;
     398:	2000      	movs	r0, #0
     39a:	e71e      	b.n	1da <i2c_master_init+0x4e>
		pad0 = _sercom_get_default_pad(sercom_hw, 0);
     39c:	2100      	movs	r1, #0
     39e:	4640      	mov	r0, r8
     3a0:	4b35      	ldr	r3, [pc, #212]	; (478 <i2c_master_init+0x2ec>)
     3a2:	4798      	blx	r3
     3a4:	e74a      	b.n	23c <i2c_master_init+0xb0>
		pad1 = _sercom_get_default_pad(sercom_hw, 1);
     3a6:	2101      	movs	r1, #1
     3a8:	4640      	mov	r0, r8
     3aa:	4b33      	ldr	r3, [pc, #204]	; (478 <i2c_master_init+0x2ec>)
     3ac:	4798      	blx	r3
     3ae:	0007      	movs	r7, r0
     3b0:	e751      	b.n	256 <i2c_master_init+0xca>
	uint32_t fscl_hs     = 1000 * config->baud_rate_high_speed;
     3b2:	26fa      	movs	r6, #250	; 0xfa
     3b4:	00b6      	lsls	r6, r6, #2
     3b6:	4653      	mov	r3, sl
     3b8:	435e      	muls	r6, r3
		tmp_baudlow_hs = (int32_t)((fgclk * 2.0) / (3.0 * fscl_hs) - 1);
     3ba:	9800      	ldr	r0, [sp, #0]
     3bc:	9901      	ldr	r1, [sp, #4]
     3be:	0002      	movs	r2, r0
     3c0:	000b      	movs	r3, r1
     3c2:	4c27      	ldr	r4, [pc, #156]	; (460 <i2c_master_init+0x2d4>)
     3c4:	47a0      	blx	r4
     3c6:	9000      	str	r0, [sp, #0]
     3c8:	9101      	str	r1, [sp, #4]
     3ca:	0030      	movs	r0, r6
     3cc:	4b20      	ldr	r3, [pc, #128]	; (450 <i2c_master_init+0x2c4>)
     3ce:	4798      	blx	r3
     3d0:	2200      	movs	r2, #0
     3d2:	4b2a      	ldr	r3, [pc, #168]	; (47c <i2c_master_init+0x2f0>)
     3d4:	47b8      	blx	r7
     3d6:	0002      	movs	r2, r0
     3d8:	000b      	movs	r3, r1
     3da:	9800      	ldr	r0, [sp, #0]
     3dc:	9901      	ldr	r1, [sp, #4]
     3de:	4c24      	ldr	r4, [pc, #144]	; (470 <i2c_master_init+0x2e4>)
     3e0:	47a0      	blx	r4
     3e2:	2200      	movs	r2, #0
     3e4:	4b21      	ldr	r3, [pc, #132]	; (46c <i2c_master_init+0x2e0>)
     3e6:	4c20      	ldr	r4, [pc, #128]	; (468 <i2c_master_init+0x2dc>)
     3e8:	47a0      	blx	r4
     3ea:	4b22      	ldr	r3, [pc, #136]	; (474 <i2c_master_init+0x2e8>)
     3ec:	4798      	blx	r3
     3ee:	1e04      	subs	r4, r0, #0
		if (tmp_baudlow_hs) {
     3f0:	d00c      	beq.n	40c <i2c_master_init+0x280>
			tmp_baud_hs = (int32_t)(fgclk / fscl_hs) - 2 - tmp_baudlow_hs;
     3f2:	0031      	movs	r1, r6
     3f4:	9807      	ldr	r0, [sp, #28]
     3f6:	4b22      	ldr	r3, [pc, #136]	; (480 <i2c_master_init+0x2f4>)
     3f8:	4798      	blx	r3
     3fa:	3802      	subs	r0, #2
     3fc:	1b00      	subs	r0, r0, r4
	if (tmp_baud > 255 || tmp_baud < 0 || tmp_baud_hs > 255 || tmp_baud_hs < 0) {
     3fe:	002b      	movs	r3, r5
     400:	2dff      	cmp	r5, #255	; 0xff
     402:	d80c      	bhi.n	41e <i2c_master_init+0x292>
     404:	28ff      	cmp	r0, #255	; 0xff
     406:	d9bc      	bls.n	382 <i2c_master_init+0x1f6>
     408:	2040      	movs	r0, #64	; 0x40
     40a:	e6e6      	b.n	1da <i2c_master_init+0x4e>
			tmp_baud_hs = (int32_t)(div_ceil(fgclk, 2 * fscl_hs)) - 1;
     40c:	0071      	lsls	r1, r6, #1
     40e:	1e48      	subs	r0, r1, #1
     410:	9b07      	ldr	r3, [sp, #28]
     412:	469c      	mov	ip, r3
     414:	4460      	add	r0, ip
     416:	4b1a      	ldr	r3, [pc, #104]	; (480 <i2c_master_init+0x2f4>)
     418:	4798      	blx	r3
     41a:	3801      	subs	r0, #1
     41c:	e7ef      	b.n	3fe <i2c_master_init+0x272>
	if (tmp_baud > 255 || tmp_baud < 0 || tmp_baud_hs > 255 || tmp_baud_hs < 0) {
     41e:	2040      	movs	r0, #64	; 0x40
     420:	e6db      	b.n	1da <i2c_master_init+0x4e>
     422:	46c0      	nop			; (mov r8, r8)
     424:	0000118d 	.word	0x0000118d
     428:	40000400 	.word	0x40000400
     42c:	00002901 	.word	0x00002901
     430:	00002875 	.word	0x00002875
     434:	00000fc9 	.word	0x00000fc9
     438:	000006e9 	.word	0x000006e9
     43c:	00002121 	.word	0x00002121
     440:	20000068 	.word	0x20000068
     444:	000029f9 	.word	0x000029f9
     448:	41002000 	.word	0x41002000
     44c:	0000291d 	.word	0x0000291d
     450:	00004b11 	.word	0x00004b11
     454:	00003f7d 	.word	0x00003f7d
     458:	e826d695 	.word	0xe826d695
     45c:	3e112e0b 	.word	0x3e112e0b
     460:	000032f5 	.word	0x000032f5
     464:	40240000 	.word	0x40240000
     468:	0000447d 	.word	0x0000447d
     46c:	3ff00000 	.word	0x3ff00000
     470:	00003915 	.word	0x00003915
     474:	00004aa9 	.word	0x00004aa9
     478:	00001015 	.word	0x00001015
     47c:	40080000 	.word	0x40080000
     480:	00003189 	.word	0x00003189

00000484 <_i2c_master_address_response>:
	SercomI2cm *const i2c_module = &(module->hw->I2CM);
     484:	6803      	ldr	r3, [r0, #0]
	if (i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB) {
     486:	7e1a      	ldrb	r2, [r3, #24]
     488:	0792      	lsls	r2, r2, #30
     48a:	d507      	bpl.n	49c <_i2c_master_address_response+0x18>
		i2c_module->INTFLAG.reg = SERCOM_I2CM_INTFLAG_SB;
     48c:	2202      	movs	r2, #2
     48e:	761a      	strb	r2, [r3, #24]
		if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_ARBLOST) {
     490:	8b5b      	ldrh	r3, [r3, #26]
     492:	079b      	lsls	r3, r3, #30
			return STATUS_ERR_PACKET_COLLISION;
     494:	2041      	movs	r0, #65	; 0x41
	return STATUS_OK;
     496:	17db      	asrs	r3, r3, #31
     498:	4018      	ands	r0, r3
}
     49a:	4770      	bx	lr
	} else if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_RXNACK) {
     49c:	8b5a      	ldrh	r2, [r3, #26]
     49e:	0752      	lsls	r2, r2, #29
     4a0:	d506      	bpl.n	4b0 <_i2c_master_address_response+0x2c>
		i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
     4a2:	6859      	ldr	r1, [r3, #4]
     4a4:	22c0      	movs	r2, #192	; 0xc0
     4a6:	0292      	lsls	r2, r2, #10
     4a8:	430a      	orrs	r2, r1
     4aa:	605a      	str	r2, [r3, #4]
		return STATUS_ERR_BAD_ADDRESS;
     4ac:	2018      	movs	r0, #24
     4ae:	e7f4      	b.n	49a <_i2c_master_address_response+0x16>
	return STATUS_OK;
     4b0:	2000      	movs	r0, #0
     4b2:	e7f2      	b.n	49a <_i2c_master_address_response+0x16>

000004b4 <_i2c_master_wait_for_bus>:
{
     4b4:	b530      	push	{r4, r5, lr}
	SercomI2cm *const i2c_module = &(module->hw->I2CM);
     4b6:	6802      	ldr	r2, [r0, #0]
	uint16_t timeout_counter = 0;
     4b8:	2300      	movs	r3, #0
	while (!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB) &&
     4ba:	2401      	movs	r4, #1
     4bc:	2502      	movs	r5, #2
     4be:	7e11      	ldrb	r1, [r2, #24]
     4c0:	4221      	tst	r1, r4
     4c2:	d10b      	bne.n	4dc <_i2c_master_wait_for_bus+0x28>
			!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB)) {
     4c4:	7e11      	ldrb	r1, [r2, #24]
	while (!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB) &&
     4c6:	4229      	tst	r1, r5
     4c8:	d106      	bne.n	4d8 <_i2c_master_wait_for_bus+0x24>
		if (++timeout_counter >= module->buffer_timeout) {
     4ca:	3301      	adds	r3, #1
     4cc:	b29b      	uxth	r3, r3
     4ce:	8901      	ldrh	r1, [r0, #8]
     4d0:	4299      	cmp	r1, r3
     4d2:	d8f4      	bhi.n	4be <_i2c_master_wait_for_bus+0xa>
			return STATUS_ERR_TIMEOUT;
     4d4:	2012      	movs	r0, #18
     4d6:	e002      	b.n	4de <_i2c_master_wait_for_bus+0x2a>
	return STATUS_OK;
     4d8:	2000      	movs	r0, #0
     4da:	e000      	b.n	4de <_i2c_master_wait_for_bus+0x2a>
     4dc:	2000      	movs	r0, #0
}
     4de:	bd30      	pop	{r4, r5, pc}

000004e0 <_i2c_master_send_hs_master_code>:
{
     4e0:	b510      	push	{r4, lr}
	SercomI2cm *const i2c_module = &(module->hw->I2CM);
     4e2:	6804      	ldr	r4, [r0, #0]
	i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
     4e4:	6862      	ldr	r2, [r4, #4]
     4e6:	2380      	movs	r3, #128	; 0x80
     4e8:	02db      	lsls	r3, r3, #11
     4ea:	4313      	orrs	r3, r2
     4ec:	6063      	str	r3, [r4, #4]
	i2c_module->ADDR.reg = hs_master_code;
     4ee:	6261      	str	r1, [r4, #36]	; 0x24
	tmp_status = _i2c_master_wait_for_bus(module);
     4f0:	4b02      	ldr	r3, [pc, #8]	; (4fc <_i2c_master_send_hs_master_code+0x1c>)
     4f2:	4798      	blx	r3
	i2c_module->INTFLAG.reg = SERCOM_I2CM_INTENCLR_MB;
     4f4:	2301      	movs	r3, #1
     4f6:	7623      	strb	r3, [r4, #24]
}
     4f8:	bd10      	pop	{r4, pc}
     4fa:	46c0      	nop			; (mov r8, r8)
     4fc:	000004b5 	.word	0x000004b5

00000500 <_i2c_master_write_packet>:
 *                                      acknowledged the address
 */
static enum status_code _i2c_master_write_packet(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
     500:	b5f0      	push	{r4, r5, r6, r7, lr}
     502:	46de      	mov	lr, fp
     504:	4657      	mov	r7, sl
     506:	464e      	mov	r6, r9
     508:	4645      	mov	r5, r8
     50a:	b5e0      	push	{r5, r6, r7, lr}
     50c:	b083      	sub	sp, #12
     50e:	0006      	movs	r6, r0
     510:	000f      	movs	r7, r1
	SercomI2cm *const i2c_module = &(module->hw->I2CM);
     512:	6805      	ldr	r5, [r0, #0]

	/* Return value. */
	enum status_code tmp_status;
	uint16_t tmp_data_length = packet->data_length;
     514:	884c      	ldrh	r4, [r1, #2]

	_i2c_master_wait_for_sync(module);
     516:	4b32      	ldr	r3, [pc, #200]	; (5e0 <_i2c_master_write_packet+0xe0>)
     518:	4798      	blx	r3

	/* Switch to high speed mode */
	if (packet->high_speed) {
     51a:	7a7b      	ldrb	r3, [r7, #9]
     51c:	2b00      	cmp	r3, #0
     51e:	d11d      	bne.n	55c <_i2c_master_write_packet+0x5c>
		_i2c_master_send_hs_master_code(module, packet->hs_master_code);
	}

	/* Set action to ACK. */
	i2c_module->CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;
     520:	686b      	ldr	r3, [r5, #4]
     522:	4a30      	ldr	r2, [pc, #192]	; (5e4 <_i2c_master_write_packet+0xe4>)
     524:	4013      	ands	r3, r2
     526:	606b      	str	r3, [r5, #4]

	/* Set address and direction bit. Will send start command on bus. */
	if (packet->ten_bit_address) {
     528:	7a3b      	ldrb	r3, [r7, #8]
     52a:	2b00      	cmp	r3, #0
     52c:	d01b      	beq.n	566 <_i2c_master_write_packet+0x66>
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
     52e:	883b      	ldrh	r3, [r7, #0]
     530:	005b      	lsls	r3, r3, #1
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
     532:	7a7a      	ldrb	r2, [r7, #9]
     534:	0392      	lsls	r2, r2, #14
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
     536:	4313      	orrs	r3, r2
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
     538:	2280      	movs	r2, #128	; 0x80
     53a:	0212      	lsls	r2, r2, #8
     53c:	4313      	orrs	r3, r2
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
     53e:	626b      	str	r3, [r5, #36]	; 0x24
	} else {
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos);
	}
	/* Wait for response on bus. */
	tmp_status = _i2c_master_wait_for_bus(module);
     540:	0030      	movs	r0, r6
     542:	4b29      	ldr	r3, [pc, #164]	; (5e8 <_i2c_master_write_packet+0xe8>)
     544:	4798      	blx	r3
     546:	9001      	str	r0, [sp, #4]

	/* Check for address response error unless previous error is
	 * detected. */
	if (tmp_status == STATUS_OK) {
     548:	2800      	cmp	r0, #0
     54a:	d013      	beq.n	574 <_i2c_master_write_packet+0x74>
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
		}
	}

	return tmp_status;
}
     54c:	9801      	ldr	r0, [sp, #4]
     54e:	b003      	add	sp, #12
     550:	bc3c      	pop	{r2, r3, r4, r5}
     552:	4690      	mov	r8, r2
     554:	4699      	mov	r9, r3
     556:	46a2      	mov	sl, r4
     558:	46ab      	mov	fp, r5
     55a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		_i2c_master_send_hs_master_code(module, packet->hs_master_code);
     55c:	7ab9      	ldrb	r1, [r7, #10]
     55e:	0030      	movs	r0, r6
     560:	4b22      	ldr	r3, [pc, #136]	; (5ec <_i2c_master_write_packet+0xec>)
     562:	4798      	blx	r3
     564:	e7dc      	b.n	520 <_i2c_master_write_packet+0x20>
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
     566:	883b      	ldrh	r3, [r7, #0]
     568:	005b      	lsls	r3, r3, #1
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos);
     56a:	7a7a      	ldrb	r2, [r7, #9]
     56c:	0392      	lsls	r2, r2, #14
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
     56e:	4313      	orrs	r3, r2
     570:	626b      	str	r3, [r5, #36]	; 0x24
     572:	e7e5      	b.n	540 <_i2c_master_write_packet+0x40>
		tmp_status = _i2c_master_address_response(module);
     574:	0030      	movs	r0, r6
     576:	4b1e      	ldr	r3, [pc, #120]	; (5f0 <_i2c_master_write_packet+0xf0>)
     578:	4798      	blx	r3
     57a:	1e03      	subs	r3, r0, #0
     57c:	9001      	str	r0, [sp, #4]
	if (tmp_status == STATUS_OK) {
     57e:	d1e5      	bne.n	54c <_i2c_master_write_packet+0x4c>
     580:	46a0      	mov	r8, r4
     582:	2400      	movs	r4, #0
			if (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(2))) {
     584:	3320      	adds	r3, #32
     586:	4699      	mov	r9, r3
			_i2c_master_wait_for_sync(module);
     588:	4b15      	ldr	r3, [pc, #84]	; (5e0 <_i2c_master_write_packet+0xe0>)
     58a:	469b      	mov	fp, r3
			tmp_status = _i2c_master_wait_for_bus(module);
     58c:	4b16      	ldr	r3, [pc, #88]	; (5e8 <_i2c_master_write_packet+0xe8>)
     58e:	469a      	mov	sl, r3
		while (tmp_data_length--) {
     590:	4544      	cmp	r4, r8
     592:	d015      	beq.n	5c0 <_i2c_master_write_packet+0xc0>
			if (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(2))) {
     594:	8b6b      	ldrh	r3, [r5, #26]
     596:	464a      	mov	r2, r9
     598:	4213      	tst	r3, r2
     59a:	d01d      	beq.n	5d8 <_i2c_master_write_packet+0xd8>
			_i2c_master_wait_for_sync(module);
     59c:	0030      	movs	r0, r6
     59e:	47d8      	blx	fp
			i2c_module->DATA.reg = packet->data[buffer_counter++];
     5a0:	687b      	ldr	r3, [r7, #4]
     5a2:	5d1a      	ldrb	r2, [r3, r4]
     5a4:	2328      	movs	r3, #40	; 0x28
     5a6:	54ea      	strb	r2, [r5, r3]
			tmp_status = _i2c_master_wait_for_bus(module);
     5a8:	0030      	movs	r0, r6
     5aa:	47d0      	blx	sl
			if (tmp_status != STATUS_OK) {
     5ac:	2800      	cmp	r0, #0
     5ae:	d106      	bne.n	5be <_i2c_master_write_packet+0xbe>
			if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_RXNACK) {
     5b0:	8b6b      	ldrh	r3, [r5, #26]
     5b2:	3401      	adds	r4, #1
     5b4:	075b      	lsls	r3, r3, #29
     5b6:	d5eb      	bpl.n	590 <_i2c_master_write_packet+0x90>
				tmp_status = STATUS_ERR_OVERFLOW;
     5b8:	231e      	movs	r3, #30
     5ba:	9301      	str	r3, [sp, #4]
     5bc:	e000      	b.n	5c0 <_i2c_master_write_packet+0xc0>
			tmp_status = _i2c_master_wait_for_bus(module);
     5be:	9001      	str	r0, [sp, #4]
		if (module->send_stop) {
     5c0:	7ab3      	ldrb	r3, [r6, #10]
     5c2:	2b00      	cmp	r3, #0
     5c4:	d0c2      	beq.n	54c <_i2c_master_write_packet+0x4c>
			_i2c_master_wait_for_sync(module);
     5c6:	0030      	movs	r0, r6
     5c8:	4b05      	ldr	r3, [pc, #20]	; (5e0 <_i2c_master_write_packet+0xe0>)
     5ca:	4798      	blx	r3
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
     5cc:	686a      	ldr	r2, [r5, #4]
     5ce:	23c0      	movs	r3, #192	; 0xc0
     5d0:	029b      	lsls	r3, r3, #10
     5d2:	4313      	orrs	r3, r2
     5d4:	606b      	str	r3, [r5, #4]
     5d6:	e7b9      	b.n	54c <_i2c_master_write_packet+0x4c>
				return STATUS_ERR_PACKET_COLLISION;
     5d8:	2341      	movs	r3, #65	; 0x41
     5da:	9301      	str	r3, [sp, #4]
     5dc:	e7b6      	b.n	54c <_i2c_master_write_packet+0x4c>
     5de:	46c0      	nop			; (mov r8, r8)
     5e0:	00000181 	.word	0x00000181
     5e4:	fffbffff 	.word	0xfffbffff
     5e8:	000004b5 	.word	0x000004b5
     5ec:	000004e1 	.word	0x000004e1
     5f0:	00000485 	.word	0x00000485

000005f4 <i2c_master_write_packet_wait>:
 *                                      last data sent
 */
enum status_code i2c_master_write_packet_wait(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
     5f4:	b510      	push	{r4, lr}
	Assert(module->hw);
	Assert(packet);

#if I2C_MASTER_CALLBACK_MODE == true
	/* Check if the I2C module is busy with a job */
	if (module->buffer_remaining > 0) {
     5f6:	8b83      	ldrh	r3, [r0, #28]
     5f8:	b29b      	uxth	r3, r3
		return STATUS_BUSY;
     5fa:	2205      	movs	r2, #5
	if (module->buffer_remaining > 0) {
     5fc:	2b00      	cmp	r3, #0
     5fe:	d001      	beq.n	604 <i2c_master_write_packet_wait+0x10>

	module->send_stop = true;
	module->send_nack = true;

	return _i2c_master_write_packet(module, packet);
}
     600:	0010      	movs	r0, r2
     602:	bd10      	pop	{r4, pc}
	module->send_stop = true;
     604:	3301      	adds	r3, #1
     606:	7283      	strb	r3, [r0, #10]
	module->send_nack = true;
     608:	72c3      	strb	r3, [r0, #11]
	return _i2c_master_write_packet(module, packet);
     60a:	4b02      	ldr	r3, [pc, #8]	; (614 <i2c_master_write_packet_wait+0x20>)
     60c:	4798      	blx	r3
     60e:	0002      	movs	r2, r0
     610:	e7f6      	b.n	600 <i2c_master_write_packet_wait+0xc>
     612:	46c0      	nop			; (mov r8, r8)
     614:	00000501 	.word	0x00000501

00000618 <_i2c_master_wait_for_sync>:
{
	/* Sanity check */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_hw = &(module->hw->I2CM);
     618:	6801      	ldr	r1, [r0, #0]

#if defined(FEATURE_SERCOM_SYNCBUSY_SCHEME_VERSION_1)
	return (i2c_hw->STATUS.reg & SERCOM_I2CM_STATUS_SYNCBUSY);
#elif defined(FEATURE_SERCOM_SYNCBUSY_SCHEME_VERSION_2)
	return (i2c_hw->SYNCBUSY.reg & SERCOM_I2CM_SYNCBUSY_MASK);
     61a:	2207      	movs	r2, #7
     61c:	69cb      	ldr	r3, [r1, #28]
		const struct i2c_master_module *const module)
{
	/* Sanity check */
	Assert(module);

	while (i2c_master_is_syncing(module)) {
     61e:	421a      	tst	r2, r3
     620:	d1fc      	bne.n	61c <_i2c_master_wait_for_sync+0x4>
		/* Wait for I2C module to sync. */
	}
}
     622:	4770      	bx	lr

00000624 <_i2c_master_read>:
 *
 * \param[in,out] module  Pointer to software module structure
 */
static void _i2c_master_read(
		struct i2c_master_module *const module)
{
     624:	b570      	push	{r4, r5, r6, lr}
     626:	0004      	movs	r4, r0
	/* Sanity check arguments. */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
     628:	6806      	ldr	r6, [r0, #0]
	bool sclsm_flag = i2c_module->CTRLA.bit.SCLSM;
     62a:	6832      	ldr	r2, [r6, #0]

	/* Find index to save next value in buffer */
	uint16_t buffer_index = module->buffer_length;
     62c:	8b45      	ldrh	r5, [r0, #26]
	buffer_index -= module->buffer_remaining;
     62e:	8b83      	ldrh	r3, [r0, #28]
     630:	1aed      	subs	r5, r5, r3
     632:	b2ad      	uxth	r5, r5

	module->buffer_remaining--;
     634:	8b83      	ldrh	r3, [r0, #28]
     636:	3b01      	subs	r3, #1
     638:	b29b      	uxth	r3, r3
     63a:	8383      	strh	r3, [r0, #28]

	if (sclsm_flag) {
     63c:	0113      	lsls	r3, r2, #4
     63e:	d51d      	bpl.n	67c <_i2c_master_read+0x58>
		if (module->send_nack && module->buffer_remaining == 1) {
     640:	7ac3      	ldrb	r3, [r0, #11]
     642:	2b00      	cmp	r3, #0
     644:	d003      	beq.n	64e <_i2c_master_read+0x2a>
     646:	8b83      	ldrh	r3, [r0, #28]
     648:	b29b      	uxth	r3, r3
     64a:	2b01      	cmp	r3, #1
     64c:	d010      	beq.n	670 <_i2c_master_read+0x4c>
			/* Set action to NACK. */
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
		}
	}

	if (module->buffer_remaining == 0) {
     64e:	8ba3      	ldrh	r3, [r4, #28]
     650:	b29b      	uxth	r3, r3
     652:	2b00      	cmp	r3, #0
     654:	d102      	bne.n	65c <_i2c_master_read+0x38>
		if (module->send_stop) {
     656:	7aa3      	ldrb	r3, [r4, #10]
     658:	2b00      	cmp	r3, #0
     65a:	d11c      	bne.n	696 <_i2c_master_read+0x72>
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
		}
	}
	
	/* Read byte from slave and put in buffer */
	_i2c_master_wait_for_sync(module);
     65c:	0020      	movs	r0, r4
     65e:	4b12      	ldr	r3, [pc, #72]	; (6a8 <_i2c_master_read+0x84>)
     660:	4798      	blx	r3
	module->buffer[buffer_index] = i2c_module->DATA.reg;
     662:	6a23      	ldr	r3, [r4, #32]
     664:	195d      	adds	r5, r3, r5
     666:	2328      	movs	r3, #40	; 0x28
     668:	5cf3      	ldrb	r3, [r6, r3]
     66a:	b2db      	uxtb	r3, r3
     66c:	702b      	strb	r3, [r5, #0]
}
     66e:	bd70      	pop	{r4, r5, r6, pc}
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
     670:	6872      	ldr	r2, [r6, #4]
     672:	2380      	movs	r3, #128	; 0x80
     674:	02db      	lsls	r3, r3, #11
     676:	4313      	orrs	r3, r2
     678:	6073      	str	r3, [r6, #4]
     67a:	e7e8      	b.n	64e <_i2c_master_read+0x2a>
		if (module->send_nack && module->buffer_remaining == 0) {
     67c:	7ac3      	ldrb	r3, [r0, #11]
     67e:	2b00      	cmp	r3, #0
     680:	d0e5      	beq.n	64e <_i2c_master_read+0x2a>
     682:	8b83      	ldrh	r3, [r0, #28]
     684:	b29b      	uxth	r3, r3
     686:	2b00      	cmp	r3, #0
     688:	d1e1      	bne.n	64e <_i2c_master_read+0x2a>
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
     68a:	6872      	ldr	r2, [r6, #4]
     68c:	2380      	movs	r3, #128	; 0x80
     68e:	02db      	lsls	r3, r3, #11
     690:	4313      	orrs	r3, r2
     692:	6073      	str	r3, [r6, #4]
     694:	e7db      	b.n	64e <_i2c_master_read+0x2a>
			_i2c_master_wait_for_sync(module);
     696:	0020      	movs	r0, r4
     698:	4b03      	ldr	r3, [pc, #12]	; (6a8 <_i2c_master_read+0x84>)
     69a:	4798      	blx	r3
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
     69c:	6872      	ldr	r2, [r6, #4]
     69e:	23c0      	movs	r3, #192	; 0xc0
     6a0:	029b      	lsls	r3, r3, #10
     6a2:	4313      	orrs	r3, r2
     6a4:	6073      	str	r3, [r6, #4]
     6a6:	e7d9      	b.n	65c <_i2c_master_read+0x38>
     6a8:	00000619 	.word	0x00000619

000006ac <_i2c_master_write>:
 * Write next data. Used by interrupt handler to send next data byte to slave.
 *
 * \param[in,out] module  Pointer to software module structure
 */
static void _i2c_master_write(struct i2c_master_module *const module)
{
     6ac:	b570      	push	{r4, r5, r6, lr}
     6ae:	0004      	movs	r4, r0
	/* Sanity check arguments. */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
     6b0:	6805      	ldr	r5, [r0, #0]

	/* Check for ack from slave */
	if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_RXNACK)
     6b2:	8b6b      	ldrh	r3, [r5, #26]
     6b4:	075b      	lsls	r3, r3, #29
     6b6:	d503      	bpl.n	6c0 <_i2c_master_write+0x14>
	{
		/* Set status */
		module->status = STATUS_ERR_OVERFLOW;
     6b8:	221e      	movs	r2, #30
     6ba:	2325      	movs	r3, #37	; 0x25
     6bc:	54c2      	strb	r2, [r0, r3]
	module->buffer_remaining--;

	/* Write byte from buffer to slave */
	_i2c_master_wait_for_sync(module);
	i2c_module->DATA.reg = module->buffer[buffer_index];
}
     6be:	bd70      	pop	{r4, r5, r6, pc}
	uint16_t buffer_index = module->buffer_length;
     6c0:	8b46      	ldrh	r6, [r0, #26]
	buffer_index -= module->buffer_remaining;
     6c2:	8b83      	ldrh	r3, [r0, #28]
     6c4:	1af6      	subs	r6, r6, r3
     6c6:	b2b6      	uxth	r6, r6
	module->buffer_remaining--;
     6c8:	8b83      	ldrh	r3, [r0, #28]
     6ca:	3b01      	subs	r3, #1
     6cc:	b29b      	uxth	r3, r3
     6ce:	8383      	strh	r3, [r0, #28]
	_i2c_master_wait_for_sync(module);
     6d0:	4b04      	ldr	r3, [pc, #16]	; (6e4 <_i2c_master_write+0x38>)
     6d2:	4798      	blx	r3
	i2c_module->DATA.reg = module->buffer[buffer_index];
     6d4:	6a23      	ldr	r3, [r4, #32]
     6d6:	199e      	adds	r6, r3, r6
     6d8:	7833      	ldrb	r3, [r6, #0]
     6da:	b2db      	uxtb	r3, r3
     6dc:	2228      	movs	r2, #40	; 0x28
     6de:	54ab      	strb	r3, [r5, r2]
     6e0:	e7ed      	b.n	6be <_i2c_master_write+0x12>
     6e2:	46c0      	nop			; (mov r8, r8)
     6e4:	00000619 	.word	0x00000619

000006e8 <_i2c_master_interrupt_handler>:
 *
 * \param[in] instance  SERCOM instance that triggered the interrupt
 */
void _i2c_master_interrupt_handler(
		uint8_t instance)
{
     6e8:	b570      	push	{r4, r5, r6, lr}
	/* Get software module for callback handling */
	struct i2c_master_module *module =
     6ea:	0080      	lsls	r0, r0, #2
     6ec:	4b75      	ldr	r3, [pc, #468]	; (8c4 <_i2c_master_interrupt_handler+0x1dc>)
     6ee:	58c4      	ldr	r4, [r0, r3]
			(struct i2c_master_module*)_sercom_instances[instance];

	Assert(module);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
     6f0:	6825      	ldr	r5, [r4, #0]
	bool sclsm_flag = i2c_module->CTRLA.bit.SCLSM;
     6f2:	682b      	ldr	r3, [r5, #0]
     6f4:	011b      	lsls	r3, r3, #4
     6f6:	0fda      	lsrs	r2, r3, #31

	/* Combine callback registered and enabled masks */
	uint8_t callback_mask = module->enabled_callback;
     6f8:	7e63      	ldrb	r3, [r4, #25]
	callback_mask &= module->registered_callback;
     6fa:	7e26      	ldrb	r6, [r4, #24]
     6fc:	401e      	ands	r6, r3

	/* Check if the module should respond to address ack */
	if ((module->buffer_length <= 0) && (module->buffer_remaining > 0)) {
     6fe:	8b63      	ldrh	r3, [r4, #26]
     700:	b29b      	uxth	r3, r3
     702:	2b00      	cmp	r3, #0
     704:	d103      	bne.n	70e <_i2c_master_interrupt_handler+0x26>
     706:	8ba3      	ldrh	r3, [r4, #28]
     708:	b29b      	uxth	r3, r3
     70a:	2b00      	cmp	r3, #0
     70c:	d123      	bne.n	756 <_i2c_master_interrupt_handler+0x6e>
		/* Call function for address response */
		_i2c_master_async_address_response(module);

	/* Check if buffer write is done */
	} else if ((module->buffer_length > 0) && (module->buffer_remaining <= 0) &&
     70e:	8b63      	ldrh	r3, [r4, #26]
     710:	b29b      	uxth	r3, r3
     712:	2b00      	cmp	r3, #0
     714:	d008      	beq.n	728 <_i2c_master_interrupt_handler+0x40>
     716:	8ba3      	ldrh	r3, [r4, #28]
     718:	b29b      	uxth	r3, r3
     71a:	2b00      	cmp	r3, #0
     71c:	d104      	bne.n	728 <_i2c_master_interrupt_handler+0x40>
			(module->status == STATUS_BUSY) &&
     71e:	3325      	adds	r3, #37	; 0x25
     720:	5ce3      	ldrb	r3, [r4, r3]
	} else if ((module->buffer_length > 0) && (module->buffer_remaining <= 0) &&
     722:	2b05      	cmp	r3, #5
     724:	d100      	bne.n	728 <_i2c_master_interrupt_handler+0x40>
     726:	e06d      	b.n	804 <_i2c_master_interrupt_handler+0x11c>
		if (callback_mask & (1 << I2C_MASTER_CALLBACK_WRITE_COMPLETE)) {
			module->callbacks[I2C_MASTER_CALLBACK_WRITE_COMPLETE](module);
		}

	/* Continue buffer write/read */
	} else if ((module->buffer_length > 0) && (module->buffer_remaining > 0)){
     728:	8b63      	ldrh	r3, [r4, #26]
     72a:	b29b      	uxth	r3, r3
     72c:	2b00      	cmp	r3, #0
     72e:	d024      	beq.n	77a <_i2c_master_interrupt_handler+0x92>
     730:	8ba3      	ldrh	r3, [r4, #28]
     732:	b29b      	uxth	r3, r3
     734:	2b00      	cmp	r3, #0
     736:	d020      	beq.n	77a <_i2c_master_interrupt_handler+0x92>
		/* Check that bus ownership is not lost */
		if ((!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(2))) &&
     738:	8b6b      	ldrh	r3, [r5, #26]
     73a:	069b      	lsls	r3, r3, #26
     73c:	d500      	bpl.n	740 <_i2c_master_interrupt_handler+0x58>
     73e:	e081      	b.n	844 <_i2c_master_interrupt_handler+0x15c>
     740:	2a00      	cmp	r2, #0
     742:	d004      	beq.n	74e <_i2c_master_interrupt_handler+0x66>
				(!(sclsm_flag && (module->buffer_remaining == 1))))	{
     744:	8ba3      	ldrh	r3, [r4, #28]
     746:	b29b      	uxth	r3, r3
     748:	2b01      	cmp	r3, #1
     74a:	d100      	bne.n	74e <_i2c_master_interrupt_handler+0x66>
     74c:	e07a      	b.n	844 <_i2c_master_interrupt_handler+0x15c>
			module->status = STATUS_ERR_PACKET_COLLISION;
     74e:	2241      	movs	r2, #65	; 0x41
     750:	2325      	movs	r3, #37	; 0x25
     752:	54e2      	strb	r2, [r4, r3]
     754:	e011      	b.n	77a <_i2c_master_interrupt_handler+0x92>
	if (i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB)
     756:	7e2b      	ldrb	r3, [r5, #24]
     758:	07db      	lsls	r3, r3, #31
     75a:	d507      	bpl.n	76c <_i2c_master_interrupt_handler+0x84>
		i2c_module->INTFLAG.reg = SERCOM_I2CM_INTENCLR_MB;
     75c:	2301      	movs	r3, #1
     75e:	762b      	strb	r3, [r5, #24]
		if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_ARBLOST) {
     760:	8b6b      	ldrh	r3, [r5, #26]
     762:	079b      	lsls	r3, r3, #30
     764:	d52e      	bpl.n	7c4 <_i2c_master_interrupt_handler+0xdc>
			module->status = STATUS_ERR_PACKET_COLLISION;
     766:	2241      	movs	r2, #65	; 0x41
     768:	2325      	movs	r3, #37	; 0x25
     76a:	54e2      	strb	r2, [r4, r3]
	module->buffer_length = module->buffer_remaining;
     76c:	8ba3      	ldrh	r3, [r4, #28]
     76e:	b29b      	uxth	r3, r3
     770:	8363      	strh	r3, [r4, #26]
	if (module->status == STATUS_BUSY) {
     772:	2325      	movs	r3, #37	; 0x25
     774:	5ce3      	ldrb	r3, [r4, r3]
     776:	2b05      	cmp	r3, #5
     778:	d038      	beq.n	7ec <_i2c_master_interrupt_handler+0x104>
			_i2c_master_read(module);
		}
	}

	/* Check if read buffer transfer is complete */
	if ((module->buffer_length > 0) && (module->buffer_remaining <= 0) &&
     77a:	8b63      	ldrh	r3, [r4, #26]
     77c:	b29b      	uxth	r3, r3
     77e:	2b00      	cmp	r3, #0
     780:	d007      	beq.n	792 <_i2c_master_interrupt_handler+0xaa>
     782:	8ba3      	ldrh	r3, [r4, #28]
     784:	b29b      	uxth	r3, r3
     786:	2b00      	cmp	r3, #0
     788:	d103      	bne.n	792 <_i2c_master_interrupt_handler+0xaa>
			(module->status == STATUS_BUSY) &&
     78a:	3325      	adds	r3, #37	; 0x25
     78c:	5ce3      	ldrb	r3, [r4, r3]
	if ((module->buffer_length > 0) && (module->buffer_remaining <= 0) &&
     78e:	2b05      	cmp	r3, #5
     790:	d064      	beq.n	85c <_i2c_master_interrupt_handler+0x174>
			module->callbacks[I2C_MASTER_CALLBACK_WRITE_COMPLETE](module);
		}
	}

	/* Check for error */
	if ((module->status != STATUS_BUSY) && (module->status != STATUS_OK)) {
     792:	2325      	movs	r3, #37	; 0x25
     794:	5ce3      	ldrb	r3, [r4, r3]
     796:	2b05      	cmp	r3, #5
     798:	d013      	beq.n	7c2 <_i2c_master_interrupt_handler+0xda>
     79a:	2325      	movs	r3, #37	; 0x25
     79c:	5ce3      	ldrb	r3, [r4, r3]
     79e:	2b00      	cmp	r3, #0
     7a0:	d00f      	beq.n	7c2 <_i2c_master_interrupt_handler+0xda>
		/* Stop packet operation */
		i2c_module->INTENCLR.reg = SERCOM_I2CM_INTENCLR_MB |
     7a2:	2303      	movs	r3, #3
     7a4:	752b      	strb	r3, [r5, #20]
				SERCOM_I2CM_INTENCLR_SB;

		module->buffer_length = 0;
     7a6:	2300      	movs	r3, #0
     7a8:	8363      	strh	r3, [r4, #26]
		module->buffer_remaining = 0;
     7aa:	83a3      	strh	r3, [r4, #28]

		/* Send nack and stop command unless arbitration is lost */
		if ((module->status != STATUS_ERR_PACKET_COLLISION) &&
     7ac:	3325      	adds	r3, #37	; 0x25
     7ae:	5ce3      	ldrb	r3, [r4, r3]
     7b0:	2b41      	cmp	r3, #65	; 0x41
     7b2:	d003      	beq.n	7bc <_i2c_master_interrupt_handler+0xd4>
     7b4:	7aa3      	ldrb	r3, [r4, #10]
     7b6:	2b00      	cmp	r3, #0
     7b8:	d000      	beq.n	7bc <_i2c_master_interrupt_handler+0xd4>
     7ba:	e075      	b.n	8a8 <_i2c_master_interrupt_handler+0x1c0>
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT |
					SERCOM_I2CM_CTRLB_CMD(3);
		}

		/* Call error callback if enabled and registered */
		if (callback_mask & (1 << I2C_MASTER_CALLBACK_ERROR)) {
     7bc:	0773      	lsls	r3, r6, #29
     7be:	d500      	bpl.n	7c2 <_i2c_master_interrupt_handler+0xda>
     7c0:	e07b      	b.n	8ba <_i2c_master_interrupt_handler+0x1d2>
			module->callbacks[I2C_MASTER_CALLBACK_ERROR](module);
		}
	}
}
     7c2:	bd70      	pop	{r4, r5, r6, pc}
		else if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_RXNACK) {
     7c4:	8b6b      	ldrh	r3, [r5, #26]
     7c6:	075b      	lsls	r3, r3, #29
     7c8:	d5d0      	bpl.n	76c <_i2c_master_interrupt_handler+0x84>
			module->status           = STATUS_ERR_BAD_ADDRESS;
     7ca:	2218      	movs	r2, #24
     7cc:	2325      	movs	r3, #37	; 0x25
     7ce:	54e2      	strb	r2, [r4, r3]
			module->buffer_remaining = 0;
     7d0:	2300      	movs	r3, #0
     7d2:	83a3      	strh	r3, [r4, #28]
			if (module->send_stop) {
     7d4:	7aa3      	ldrb	r3, [r4, #10]
     7d6:	2b00      	cmp	r3, #0
     7d8:	d0c8      	beq.n	76c <_i2c_master_interrupt_handler+0x84>
				_i2c_master_wait_for_sync(module);
     7da:	0020      	movs	r0, r4
     7dc:	4b3a      	ldr	r3, [pc, #232]	; (8c8 <_i2c_master_interrupt_handler+0x1e0>)
     7de:	4798      	blx	r3
				i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
     7e0:	686a      	ldr	r2, [r5, #4]
     7e2:	23c0      	movs	r3, #192	; 0xc0
     7e4:	029b      	lsls	r3, r3, #10
     7e6:	4313      	orrs	r3, r2
     7e8:	606b      	str	r3, [r5, #4]
     7ea:	e7bf      	b.n	76c <_i2c_master_interrupt_handler+0x84>
		if (module->transfer_direction == I2C_TRANSFER_WRITE) {
     7ec:	331f      	adds	r3, #31
     7ee:	5ce3      	ldrb	r3, [r4, r3]
     7f0:	2b00      	cmp	r3, #0
     7f2:	d003      	beq.n	7fc <_i2c_master_interrupt_handler+0x114>
			_i2c_master_read(module);
     7f4:	0020      	movs	r0, r4
     7f6:	4b35      	ldr	r3, [pc, #212]	; (8cc <_i2c_master_interrupt_handler+0x1e4>)
     7f8:	4798      	blx	r3
     7fa:	e7be      	b.n	77a <_i2c_master_interrupt_handler+0x92>
			_i2c_master_write(module);
     7fc:	0020      	movs	r0, r4
     7fe:	4b34      	ldr	r3, [pc, #208]	; (8d0 <_i2c_master_interrupt_handler+0x1e8>)
     800:	4798      	blx	r3
     802:	e7ba      	b.n	77a <_i2c_master_interrupt_handler+0x92>
			(module->transfer_direction == I2C_TRANSFER_WRITE)) {
     804:	331f      	adds	r3, #31
     806:	5ce3      	ldrb	r3, [r4, r3]
			(module->status == STATUS_BUSY) &&
     808:	2b00      	cmp	r3, #0
     80a:	d000      	beq.n	80e <_i2c_master_interrupt_handler+0x126>
     80c:	e78c      	b.n	728 <_i2c_master_interrupt_handler+0x40>
		i2c_module->INTENCLR.reg =
     80e:	3303      	adds	r3, #3
     810:	752b      	strb	r3, [r5, #20]
		module->buffer_length = 0;
     812:	2300      	movs	r3, #0
     814:	8363      	strh	r3, [r4, #26]
		module->status        = STATUS_OK;
     816:	3325      	adds	r3, #37	; 0x25
     818:	2200      	movs	r2, #0
     81a:	54e2      	strb	r2, [r4, r3]
		if (module->send_stop) {
     81c:	7aa3      	ldrb	r3, [r4, #10]
     81e:	2b00      	cmp	r3, #0
     820:	d107      	bne.n	832 <_i2c_master_interrupt_handler+0x14a>
			i2c_module->INTFLAG.reg = SERCOM_I2CM_INTFLAG_MB;
     822:	2301      	movs	r3, #1
     824:	762b      	strb	r3, [r5, #24]
		if (callback_mask & (1 << I2C_MASTER_CALLBACK_WRITE_COMPLETE)) {
     826:	07f3      	lsls	r3, r6, #31
     828:	d5a7      	bpl.n	77a <_i2c_master_interrupt_handler+0x92>
			module->callbacks[I2C_MASTER_CALLBACK_WRITE_COMPLETE](module);
     82a:	68e3      	ldr	r3, [r4, #12]
     82c:	0020      	movs	r0, r4
     82e:	4798      	blx	r3
     830:	e7a3      	b.n	77a <_i2c_master_interrupt_handler+0x92>
			_i2c_master_wait_for_sync(module);
     832:	0020      	movs	r0, r4
     834:	4b24      	ldr	r3, [pc, #144]	; (8c8 <_i2c_master_interrupt_handler+0x1e0>)
     836:	4798      	blx	r3
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
     838:	686a      	ldr	r2, [r5, #4]
     83a:	23c0      	movs	r3, #192	; 0xc0
     83c:	029b      	lsls	r3, r3, #10
     83e:	4313      	orrs	r3, r2
     840:	606b      	str	r3, [r5, #4]
     842:	e7f0      	b.n	826 <_i2c_master_interrupt_handler+0x13e>
		} else if (module->transfer_direction == I2C_TRANSFER_WRITE) {
     844:	2324      	movs	r3, #36	; 0x24
     846:	5ce3      	ldrb	r3, [r4, r3]
     848:	2b00      	cmp	r3, #0
     84a:	d103      	bne.n	854 <_i2c_master_interrupt_handler+0x16c>
			_i2c_master_write(module);
     84c:	0020      	movs	r0, r4
     84e:	4b20      	ldr	r3, [pc, #128]	; (8d0 <_i2c_master_interrupt_handler+0x1e8>)
     850:	4798      	blx	r3
     852:	e792      	b.n	77a <_i2c_master_interrupt_handler+0x92>
			_i2c_master_read(module);
     854:	0020      	movs	r0, r4
     856:	4b1d      	ldr	r3, [pc, #116]	; (8cc <_i2c_master_interrupt_handler+0x1e4>)
     858:	4798      	blx	r3
     85a:	e78e      	b.n	77a <_i2c_master_interrupt_handler+0x92>
			(module->transfer_direction == I2C_TRANSFER_READ)) {
     85c:	331f      	adds	r3, #31
     85e:	5ce3      	ldrb	r3, [r4, r3]
			(module->status == STATUS_BUSY) &&
     860:	2b01      	cmp	r3, #1
     862:	d196      	bne.n	792 <_i2c_master_interrupt_handler+0xaa>
		if (i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB) {
     864:	7e2b      	ldrb	r3, [r5, #24]
     866:	079b      	lsls	r3, r3, #30
     868:	d501      	bpl.n	86e <_i2c_master_interrupt_handler+0x186>
			i2c_module->INTFLAG.reg = SERCOM_I2CM_INTFLAG_SB;
     86a:	2302      	movs	r3, #2
     86c:	762b      	strb	r3, [r5, #24]
		i2c_module->INTENCLR.reg =
     86e:	2303      	movs	r3, #3
     870:	752b      	strb	r3, [r5, #20]
		module->buffer_length = 0;
     872:	2300      	movs	r3, #0
     874:	8363      	strh	r3, [r4, #26]
		module->status        = STATUS_OK;
     876:	3325      	adds	r3, #37	; 0x25
     878:	2200      	movs	r2, #0
     87a:	54e2      	strb	r2, [r4, r3]
		if ((callback_mask & (1 << I2C_MASTER_CALLBACK_READ_COMPLETE))
     87c:	07b3      	lsls	r3, r6, #30
     87e:	d503      	bpl.n	888 <_i2c_master_interrupt_handler+0x1a0>
				&& (module->transfer_direction == I2C_TRANSFER_READ)) {
     880:	2324      	movs	r3, #36	; 0x24
     882:	5ce3      	ldrb	r3, [r4, r3]
     884:	2b01      	cmp	r3, #1
     886:	d00b      	beq.n	8a0 <_i2c_master_interrupt_handler+0x1b8>
		} else if ((callback_mask & (1 << I2C_MASTER_CALLBACK_WRITE_COMPLETE))
     888:	07f3      	lsls	r3, r6, #31
     88a:	d400      	bmi.n	88e <_i2c_master_interrupt_handler+0x1a6>
     88c:	e781      	b.n	792 <_i2c_master_interrupt_handler+0xaa>
				&& (module->transfer_direction == I2C_TRANSFER_WRITE)) {
     88e:	2324      	movs	r3, #36	; 0x24
     890:	5ce3      	ldrb	r3, [r4, r3]
     892:	2b00      	cmp	r3, #0
     894:	d000      	beq.n	898 <_i2c_master_interrupt_handler+0x1b0>
     896:	e77c      	b.n	792 <_i2c_master_interrupt_handler+0xaa>
			module->callbacks[I2C_MASTER_CALLBACK_WRITE_COMPLETE](module);
     898:	68e3      	ldr	r3, [r4, #12]
     89a:	0020      	movs	r0, r4
     89c:	4798      	blx	r3
     89e:	e778      	b.n	792 <_i2c_master_interrupt_handler+0xaa>
			module->callbacks[I2C_MASTER_CALLBACK_READ_COMPLETE](module);
     8a0:	6923      	ldr	r3, [r4, #16]
     8a2:	0020      	movs	r0, r4
     8a4:	4798      	blx	r3
     8a6:	e774      	b.n	792 <_i2c_master_interrupt_handler+0xaa>
			_i2c_master_wait_for_sync(module);
     8a8:	0020      	movs	r0, r4
     8aa:	4b07      	ldr	r3, [pc, #28]	; (8c8 <_i2c_master_interrupt_handler+0x1e0>)
     8ac:	4798      	blx	r3
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT |
     8ae:	686a      	ldr	r2, [r5, #4]
     8b0:	23e0      	movs	r3, #224	; 0xe0
     8b2:	02db      	lsls	r3, r3, #11
     8b4:	4313      	orrs	r3, r2
     8b6:	606b      	str	r3, [r5, #4]
     8b8:	e780      	b.n	7bc <_i2c_master_interrupt_handler+0xd4>
			module->callbacks[I2C_MASTER_CALLBACK_ERROR](module);
     8ba:	6963      	ldr	r3, [r4, #20]
     8bc:	0020      	movs	r0, r4
     8be:	4798      	blx	r3
}
     8c0:	e77f      	b.n	7c2 <_i2c_master_interrupt_handler+0xda>
     8c2:	46c0      	nop			; (mov r8, r8)
     8c4:	20000068 	.word	0x20000068
     8c8:	00000619 	.word	0x00000619
     8cc:	00000625 	.word	0x00000625
     8d0:	000006ad 	.word	0x000006ad

000008d4 <_i2c_slave_wait_for_sync>:
{
	/* Sanity check */
	Assert(module);
	Assert(module->hw);

	SercomI2cs *const i2c_hw = &(module->hw->I2CS);
     8d4:	6801      	ldr	r1, [r0, #0]

	/* Return sync status */
#if defined(FEATURE_SERCOM_SYNCBUSY_SCHEME_VERSION_1)
	return (i2c_hw->STATUS.reg & SERCOM_I2CS_STATUS_SYNCBUSY);
#elif defined(FEATURE_SERCOM_SYNCBUSY_SCHEME_VERSION_2)
	return (i2c_hw->SYNCBUSY.reg & SERCOM_I2CS_SYNCBUSY_MASK);
     8d6:	2203      	movs	r2, #3
     8d8:	69cb      	ldr	r3, [r1, #28]
		const struct i2c_slave_module *const module)
{
	/* Sanity check */
	Assert(module);

	while (i2c_slave_is_syncing(module)) {
     8da:	421a      	tst	r2, r3
     8dc:	d1fc      	bne.n	8d8 <_i2c_slave_wait_for_sync+0x4>
		/* Wait for I<SUP>2</SUP>C module to sync */
	}
}
     8de:	4770      	bx	lr

000008e0 <_i2c_slave_wait_for_bus>:
 * \retval STATUS_ERR_TIMEOUT  If no response was given within specified timeout
 *                             period
 */
static enum status_code _i2c_slave_wait_for_bus(
		struct i2c_slave_module *const module)
{
     8e0:	b570      	push	{r4, r5, r6, lr}
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
     8e2:	6802      	ldr	r2, [r0, #0]

	/* Wait for reply */
	uint16_t timeout_counter = 0;
     8e4:	2300      	movs	r3, #0
	while ((!(i2c_module->INTFLAG.reg & SERCOM_I2CS_INTFLAG_DRDY)) &&
     8e6:	2404      	movs	r4, #4
     8e8:	2501      	movs	r5, #1
			(!(i2c_module->INTFLAG.reg & SERCOM_I2CS_INTFLAG_PREC)) &&
     8ea:	2602      	movs	r6, #2
	while ((!(i2c_module->INTFLAG.reg & SERCOM_I2CS_INTFLAG_DRDY)) &&
     8ec:	7e11      	ldrb	r1, [r2, #24]
     8ee:	4221      	tst	r1, r4
     8f0:	d10e      	bne.n	910 <_i2c_slave_wait_for_bus+0x30>
			(!(i2c_module->INTFLAG.reg & SERCOM_I2CS_INTFLAG_PREC)) &&
     8f2:	7e11      	ldrb	r1, [r2, #24]
	while ((!(i2c_module->INTFLAG.reg & SERCOM_I2CS_INTFLAG_DRDY)) &&
     8f4:	4229      	tst	r1, r5
     8f6:	d10d      	bne.n	914 <_i2c_slave_wait_for_bus+0x34>
			(!(i2c_module->INTFLAG.reg & SERCOM_I2CS_INTFLAG_AMATCH))) {
     8f8:	7e11      	ldrb	r1, [r2, #24]
			(!(i2c_module->INTFLAG.reg & SERCOM_I2CS_INTFLAG_PREC)) &&
     8fa:	4231      	tst	r1, r6
     8fc:	d106      	bne.n	90c <_i2c_slave_wait_for_bus+0x2c>

		/* Check timeout condition */
		if (++timeout_counter >= module->buffer_timeout) {
     8fe:	3301      	adds	r3, #1
     900:	b29b      	uxth	r3, r3
     902:	88c1      	ldrh	r1, [r0, #6]
     904:	4299      	cmp	r1, r3
     906:	d8f1      	bhi.n	8ec <_i2c_slave_wait_for_bus+0xc>
			return STATUS_ERR_TIMEOUT;
     908:	2012      	movs	r0, #18
     90a:	e002      	b.n	912 <_i2c_slave_wait_for_bus+0x32>
		}
	}
	return STATUS_OK;
     90c:	2000      	movs	r0, #0
     90e:	e000      	b.n	912 <_i2c_slave_wait_for_bus+0x32>
     910:	2000      	movs	r0, #0
}
     912:	bd70      	pop	{r4, r5, r6, pc}
	return STATUS_OK;
     914:	2000      	movs	r0, #0
     916:	e7fc      	b.n	912 <_i2c_slave_wait_for_bus+0x32>

00000918 <i2c_slave_init>:
{
     918:	b5f0      	push	{r4, r5, r6, r7, lr}
     91a:	46ce      	mov	lr, r9
     91c:	4647      	mov	r7, r8
     91e:	b580      	push	{r7, lr}
     920:	b083      	sub	sp, #12
     922:	0005      	movs	r5, r0
     924:	000c      	movs	r4, r1
     926:	0016      	movs	r6, r2
	module->hw = hw;
     928:	6029      	str	r1, [r5, #0]
	if (i2c_hw->CTRLA.reg & SERCOM_I2CS_CTRLA_ENABLE) {
     92a:	680b      	ldr	r3, [r1, #0]
		return STATUS_ERR_DENIED;
     92c:	201c      	movs	r0, #28
	if (i2c_hw->CTRLA.reg & SERCOM_I2CS_CTRLA_ENABLE) {
     92e:	079b      	lsls	r3, r3, #30
     930:	d504      	bpl.n	93c <i2c_slave_init+0x24>
}
     932:	b003      	add	sp, #12
     934:	bc0c      	pop	{r2, r3}
     936:	4690      	mov	r8, r2
     938:	4699      	mov	r9, r3
     93a:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (i2c_hw->CTRLA.reg & SERCOM_I2CS_CTRLA_SWRST) {
     93c:	680b      	ldr	r3, [r1, #0]
		return STATUS_BUSY;
     93e:	3817      	subs	r0, #23
	if (i2c_hw->CTRLA.reg & SERCOM_I2CS_CTRLA_SWRST) {
     940:	07db      	lsls	r3, r3, #31
     942:	d4f6      	bmi.n	932 <i2c_slave_init+0x1a>
	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
     944:	0008      	movs	r0, r1
     946:	4b4d      	ldr	r3, [pc, #308]	; (a7c <i2c_slave_init+0x164>)
     948:	4699      	mov	r9, r3
     94a:	4798      	blx	r3
     94c:	4a4c      	ldr	r2, [pc, #304]	; (a80 <i2c_slave_init+0x168>)
     94e:	6a11      	ldr	r1, [r2, #32]
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
     950:	1c83      	adds	r3, r0, #2
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
     952:	2701      	movs	r7, #1
     954:	46b8      	mov	r8, r7
     956:	409f      	lsls	r7, r3
     958:	003b      	movs	r3, r7
     95a:	430b      	orrs	r3, r1
     95c:	6213      	str	r3, [r2, #32]
	gclk_chan_conf.source_generator = config->generator_source;
     95e:	a901      	add	r1, sp, #4
     960:	7e73      	ldrb	r3, [r6, #25]
     962:	700b      	strb	r3, [r1, #0]
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
     964:	3014      	adds	r0, #20
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
     966:	b2c3      	uxtb	r3, r0
     968:	001f      	movs	r7, r3
     96a:	0018      	movs	r0, r3
     96c:	4b45      	ldr	r3, [pc, #276]	; (a84 <i2c_slave_init+0x16c>)
     96e:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
     970:	0038      	movs	r0, r7
     972:	4b45      	ldr	r3, [pc, #276]	; (a88 <i2c_slave_init+0x170>)
     974:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
     976:	7e70      	ldrb	r0, [r6, #25]
     978:	2100      	movs	r1, #0
     97a:	4b44      	ldr	r3, [pc, #272]	; (a8c <i2c_slave_init+0x174>)
     97c:	4798      	blx	r3
	uint8_t instance_index = _sercom_get_sercom_inst_index(module->hw);
     97e:	6828      	ldr	r0, [r5, #0]
     980:	47c8      	blx	r9
     982:	0007      	movs	r7, r0
	_sercom_set_handler(instance_index, _i2c_slave_interrupt_handler);
     984:	4942      	ldr	r1, [pc, #264]	; (a90 <i2c_slave_init+0x178>)
     986:	4b43      	ldr	r3, [pc, #268]	; (a94 <i2c_slave_init+0x17c>)
     988:	4798      	blx	r3
	_sercom_instances[instance_index] = module;
     98a:	00bf      	lsls	r7, r7, #2
     98c:	4b42      	ldr	r3, [pc, #264]	; (a98 <i2c_slave_init+0x180>)
     98e:	50fd      	str	r5, [r7, r3]
	module->registered_callback = 0;
     990:	2300      	movs	r3, #0
     992:	2224      	movs	r2, #36	; 0x24
     994:	54ab      	strb	r3, [r5, r2]
	module->enabled_callback = 0;
     996:	3201      	adds	r2, #1
     998:	54ab      	strb	r3, [r5, r2]
	module->buffer_length = 0;
     99a:	84eb      	strh	r3, [r5, #38]	; 0x26
	module->nack_on_address = config->enable_nack_on_address;
     99c:	7e33      	ldrb	r3, [r6, #24]
     99e:	726b      	strb	r3, [r5, #9]
	i2c_hw->CTRLA.reg = SERCOM_I2CS_CTRLA_MODE(0x4);
     9a0:	2310      	movs	r3, #16
     9a2:	6023      	str	r3, [r4, #0]
	SercomI2cs *const i2c_hw = &(module->hw->I2CS);
     9a4:	682c      	ldr	r4, [r5, #0]
	module->buffer_timeout = config->buffer_timeout;
     9a6:	8933      	ldrh	r3, [r6, #8]
     9a8:	80eb      	strh	r3, [r5, #6]
	module->ten_bit_address = config->ten_bit_address;
     9aa:	7c33      	ldrb	r3, [r6, #16]
     9ac:	722b      	strb	r3, [r5, #8]
	config->mux_position = SYSTEM_PINMUX_GPIO;
     9ae:	2380      	movs	r3, #128	; 0x80
     9b0:	466a      	mov	r2, sp
     9b2:	7013      	strb	r3, [r2, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
     9b4:	2300      	movs	r3, #0
     9b6:	7053      	strb	r3, [r2, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
     9b8:	466b      	mov	r3, sp
     9ba:	4642      	mov	r2, r8
     9bc:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
     9be:	2300      	movs	r3, #0
     9c0:	466a      	mov	r2, sp
     9c2:	70d3      	strb	r3, [r2, #3]
	uint32_t pad0 = config->pinmux_pad0;
     9c4:	69f0      	ldr	r0, [r6, #28]
	uint32_t pad1 = config->pinmux_pad1;
     9c6:	6a35      	ldr	r5, [r6, #32]
	if (pad0 == PINMUX_DEFAULT) {
     9c8:	2800      	cmp	r0, #0
     9ca:	d04b      	beq.n	a64 <i2c_slave_init+0x14c>
	pin_conf.mux_position = pad0 & 0xFFFF;
     9cc:	466b      	mov	r3, sp
     9ce:	7018      	strb	r0, [r3, #0]
	pin_conf.direction    = SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK;
     9d0:	2302      	movs	r3, #2
     9d2:	466a      	mov	r2, sp
     9d4:	7053      	strb	r3, [r2, #1]
	system_pinmux_pin_set_config(pad0 >> 16, &pin_conf);
     9d6:	0c00      	lsrs	r0, r0, #16
     9d8:	b2c0      	uxtb	r0, r0
     9da:	4669      	mov	r1, sp
     9dc:	4b2f      	ldr	r3, [pc, #188]	; (a9c <i2c_slave_init+0x184>)
     9de:	4798      	blx	r3
	if (pad1 == PINMUX_DEFAULT) {
     9e0:	2d00      	cmp	r5, #0
     9e2:	d044      	beq.n	a6e <i2c_slave_init+0x156>
	pin_conf.mux_position = pad1 & 0xFFFF;
     9e4:	466b      	mov	r3, sp
     9e6:	701d      	strb	r5, [r3, #0]
	pin_conf.direction    = SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK;
     9e8:	2302      	movs	r3, #2
     9ea:	466a      	mov	r2, sp
     9ec:	7053      	strb	r3, [r2, #1]
	system_pinmux_pin_set_config(pad1 >> 16, &pin_conf);
     9ee:	0c2d      	lsrs	r5, r5, #16
     9f0:	b2e8      	uxtb	r0, r5
     9f2:	4669      	mov	r1, sp
     9f4:	4b29      	ldr	r3, [pc, #164]	; (a9c <i2c_slave_init+0x184>)
     9f6:	4798      	blx	r3
	if (config->run_in_standby || system_is_debugger_present()) {
     9f8:	7eb3      	ldrb	r3, [r6, #26]
		tmp_ctrla = SERCOM_I2CS_CTRLA_RUNSTDBY;
     9fa:	2280      	movs	r2, #128	; 0x80
	if (config->run_in_standby || system_is_debugger_present()) {
     9fc:	2b00      	cmp	r3, #0
     9fe:	d104      	bne.n	a0a <i2c_slave_init+0xf2>
     a00:	4b27      	ldr	r3, [pc, #156]	; (aa0 <i2c_slave_init+0x188>)
     a02:	789b      	ldrb	r3, [r3, #2]
     a04:	079b      	lsls	r3, r3, #30
		tmp_ctrla = SERCOM_I2CS_CTRLA_RUNSTDBY;
     a06:	0fdb      	lsrs	r3, r3, #31
     a08:	01da      	lsls	r2, r3, #7
	if (config->scl_stretch_only_after_ack_bit || (config->transfer_speed == I2C_SLAVE_SPEED_HIGH_SPEED)) {
     a0a:	2325      	movs	r3, #37	; 0x25
     a0c:	5cf3      	ldrb	r3, [r6, r3]
     a0e:	2b00      	cmp	r3, #0
     a10:	d104      	bne.n	a1c <i2c_slave_init+0x104>
     a12:	2380      	movs	r3, #128	; 0x80
     a14:	049b      	lsls	r3, r3, #18
     a16:	6971      	ldr	r1, [r6, #20]
     a18:	4299      	cmp	r1, r3
     a1a:	d102      	bne.n	a22 <i2c_slave_init+0x10a>
		tmp_ctrla |= SERCOM_I2CM_CTRLA_SCLSM;
     a1c:	2380      	movs	r3, #128	; 0x80
     a1e:	051b      	lsls	r3, r3, #20
     a20:	431a      	orrs	r2, r3
	i2c_hw->CTRLA.reg |= tmp_ctrla;
     a22:	6820      	ldr	r0, [r4, #0]
     a24:	6873      	ldr	r3, [r6, #4]
     a26:	6971      	ldr	r1, [r6, #20]
     a28:	430b      	orrs	r3, r1
			(config->scl_low_timeout << SERCOM_I2CS_CTRLA_LOWTOUTEN_Pos) |
     a2a:	2124      	movs	r1, #36	; 0x24
     a2c:	5c71      	ldrb	r1, [r6, r1]
     a2e:	0789      	lsls	r1, r1, #30
	i2c_hw->CTRLA.reg |= tmp_ctrla;
     a30:	430b      	orrs	r3, r1
			(config->slave_scl_low_extend_timeout << SERCOM_I2CS_CTRLA_SEXTTOEN_Pos));
     a32:	2126      	movs	r1, #38	; 0x26
     a34:	5c71      	ldrb	r1, [r6, r1]
     a36:	05c9      	lsls	r1, r1, #23
	i2c_hw->CTRLA.reg |= tmp_ctrla;
     a38:	430b      	orrs	r3, r1
     a3a:	4303      	orrs	r3, r0
     a3c:	4313      	orrs	r3, r2
     a3e:	6023      	str	r3, [r4, #0]
	i2c_hw->CTRLB.reg = SERCOM_I2CS_CTRLB_SMEN | config->address_mode;
     a40:	8972      	ldrh	r2, [r6, #10]
     a42:	2380      	movs	r3, #128	; 0x80
     a44:	005b      	lsls	r3, r3, #1
     a46:	4313      	orrs	r3, r2
     a48:	6063      	str	r3, [r4, #4]
	i2c_hw->ADDR.reg = config->address << SERCOM_I2CS_ADDR_ADDR_Pos |
     a4a:	89b3      	ldrh	r3, [r6, #12]
     a4c:	005b      	lsls	r3, r3, #1
			config->address_mask << SERCOM_I2CS_ADDR_ADDRMASK_Pos |
     a4e:	89f2      	ldrh	r2, [r6, #14]
     a50:	0452      	lsls	r2, r2, #17
	i2c_hw->ADDR.reg = config->address << SERCOM_I2CS_ADDR_ADDR_Pos |
     a52:	4313      	orrs	r3, r2
			config->enable_general_call_address << SERCOM_I2CS_ADDR_GENCEN_Pos;
     a54:	7c72      	ldrb	r2, [r6, #17]
			config->ten_bit_address << SERCOM_I2CS_ADDR_TENBITEN_Pos |
     a56:	4313      	orrs	r3, r2
     a58:	7c32      	ldrb	r2, [r6, #16]
     a5a:	03d2      	lsls	r2, r2, #15
     a5c:	4313      	orrs	r3, r2
	i2c_hw->ADDR.reg = config->address << SERCOM_I2CS_ADDR_ADDR_Pos |
     a5e:	6263      	str	r3, [r4, #36]	; 0x24
	return _i2c_slave_set_config(module, config);
     a60:	2000      	movs	r0, #0
     a62:	e766      	b.n	932 <i2c_slave_init+0x1a>
		pad0 = _sercom_get_default_pad(sercom_hw, 0);
     a64:	2100      	movs	r1, #0
     a66:	0020      	movs	r0, r4
     a68:	4b0e      	ldr	r3, [pc, #56]	; (aa4 <i2c_slave_init+0x18c>)
     a6a:	4798      	blx	r3
     a6c:	e7ae      	b.n	9cc <i2c_slave_init+0xb4>
		pad1 = _sercom_get_default_pad(sercom_hw, 1);
     a6e:	2101      	movs	r1, #1
     a70:	0020      	movs	r0, r4
     a72:	4b0c      	ldr	r3, [pc, #48]	; (aa4 <i2c_slave_init+0x18c>)
     a74:	4798      	blx	r3
     a76:	0005      	movs	r5, r0
     a78:	e7b4      	b.n	9e4 <i2c_slave_init+0xcc>
     a7a:	46c0      	nop			; (mov r8, r8)
     a7c:	0000118d 	.word	0x0000118d
     a80:	40000400 	.word	0x40000400
     a84:	00002901 	.word	0x00002901
     a88:	00002875 	.word	0x00002875
     a8c:	00000fc9 	.word	0x00000fc9
     a90:	00000bd1 	.word	0x00000bd1
     a94:	00002121 	.word	0x00002121
     a98:	20000068 	.word	0x20000068
     a9c:	000029f9 	.word	0x000029f9
     aa0:	41002000 	.word	0x41002000
     aa4:	00001015 	.word	0x00001015

00000aa8 <i2c_slave_read_packet_wait>:
 * \retval STATUS_ERR_ERR_OVERFLOW  Last byte received overflows buffer
 */
enum status_code i2c_slave_read_packet_wait(
		struct i2c_slave_module *const module,
		struct i2c_slave_packet *const packet)
{
     aa8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     aaa:	46de      	mov	lr, fp
     aac:	4657      	mov	r7, sl
     aae:	464e      	mov	r6, r9
     ab0:	4645      	mov	r5, r8
     ab2:	b5e0      	push	{r5, r6, r7, lr}
     ab4:	0007      	movs	r7, r0
     ab6:	000e      	movs	r6, r1
	Assert(module->hw);
	Assert(packet);

	SercomI2cs *const i2c_hw = &(module->hw->I2CS);

	uint16_t length = packet->data_length;
     ab8:	880d      	ldrh	r5, [r1, #0]

	if (length == 0) {
		return STATUS_ERR_INVALID_ARG;
     aba:	2417      	movs	r4, #23
	if (length == 0) {
     abc:	2d00      	cmp	r5, #0
     abe:	d106      	bne.n	ace <i2c_slave_read_packet_wait+0x26>
	if (i2c_hw->INTFLAG.reg & SERCOM_I2CS_INTFLAG_PREC) {
		/* Clear stop flag */
		i2c_hw->INTFLAG.reg = SERCOM_I2CS_INTFLAG_PREC;
	}
	return STATUS_OK;
}
     ac0:	0020      	movs	r0, r4
     ac2:	bc3c      	pop	{r2, r3, r4, r5}
     ac4:	4690      	mov	r8, r2
     ac6:	4699      	mov	r9, r3
     ac8:	46a2      	mov	sl, r4
     aca:	46ab      	mov	fp, r5
     acc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (module->buffer_remaining > 0 ||
     ace:	8d03      	ldrh	r3, [r0, #40]	; 0x28
		return STATUS_BUSY;
     ad0:	3c12      	subs	r4, #18
	if (module->buffer_remaining > 0 ||
     ad2:	2b00      	cmp	r3, #0
     ad4:	d1f4      	bne.n	ac0 <i2c_slave_read_packet_wait+0x18>
	SercomI2cs *const i2c_hw = &(module->hw->I2CS);
     ad6:	6803      	ldr	r3, [r0, #0]
     ad8:	4698      	mov	r8, r3
			(i2c_hw->INTENSET.reg & SERCOM_I2CS_INTFLAG_AMATCH)) {
     ada:	7d9b      	ldrb	r3, [r3, #22]
	if (module->buffer_remaining > 0 ||
     adc:	079b      	lsls	r3, r3, #30
     ade:	d4ef      	bmi.n	ac0 <i2c_slave_read_packet_wait+0x18>
	status = _i2c_slave_wait_for_bus(module);
     ae0:	4b38      	ldr	r3, [pc, #224]	; (bc4 <i2c_slave_read_packet_wait+0x11c>)
     ae2:	4798      	blx	r3
     ae4:	1e04      	subs	r4, r0, #0
	if (status != STATUS_OK) {
     ae6:	d1eb      	bne.n	ac0 <i2c_slave_read_packet_wait+0x18>
	if (!(i2c_hw->INTFLAG.reg & SERCOM_I2CS_INTFLAG_AMATCH)) {
     ae8:	4643      	mov	r3, r8
     aea:	7e1b      	ldrb	r3, [r3, #24]
		return STATUS_ERR_DENIED;
     aec:	341c      	adds	r4, #28
	if (!(i2c_hw->INTFLAG.reg & SERCOM_I2CS_INTFLAG_AMATCH)) {
     aee:	079b      	lsls	r3, r3, #30
     af0:	d5e6      	bpl.n	ac0 <i2c_slave_read_packet_wait+0x18>
	if (i2c_hw->STATUS.reg & (SERCOM_I2CS_STATUS_BUSERR |
     af2:	4643      	mov	r3, r8
     af4:	8b5a      	ldrh	r2, [r3, #26]
     af6:	2343      	movs	r3, #67	; 0x43
		return STATUS_ERR_IO;
     af8:	3c0c      	subs	r4, #12
	if (i2c_hw->STATUS.reg & (SERCOM_I2CS_STATUS_BUSERR |
     afa:	421a      	tst	r2, r3
     afc:	d1e0      	bne.n	ac0 <i2c_slave_read_packet_wait+0x18>
	if ((i2c_hw->STATUS.reg & SERCOM_I2CS_STATUS_DIR)) {
     afe:	4643      	mov	r3, r8
     b00:	8b5b      	ldrh	r3, [r3, #26]
     b02:	071b      	lsls	r3, r3, #28
     b04:	d50e      	bpl.n	b24 <i2c_slave_read_packet_wait+0x7c>
		i2c_hw->CTRLB.reg |= SERCOM_I2CS_CTRLB_ACKACT;
     b06:	4643      	mov	r3, r8
     b08:	685a      	ldr	r2, [r3, #4]
     b0a:	2380      	movs	r3, #128	; 0x80
     b0c:	02db      	lsls	r3, r3, #11
     b0e:	4313      	orrs	r3, r2
     b10:	4642      	mov	r2, r8
     b12:	6053      	str	r3, [r2, #4]
		i2c_hw->CTRLB.reg |= SERCOM_I2CS_CTRLB_CMD(0x3);
     b14:	6852      	ldr	r2, [r2, #4]
     b16:	23c0      	movs	r3, #192	; 0xc0
     b18:	029b      	lsls	r3, r3, #10
     b1a:	4313      	orrs	r3, r2
     b1c:	4642      	mov	r2, r8
     b1e:	6053      	str	r3, [r2, #4]
		return STATUS_ERR_BAD_FORMAT;
     b20:	340a      	adds	r4, #10
     b22:	e7cd      	b.n	ac0 <i2c_slave_read_packet_wait+0x18>
	i2c_hw->CTRLB.reg &= ~SERCOM_I2CS_CTRLB_ACKACT;
     b24:	4643      	mov	r3, r8
     b26:	685b      	ldr	r3, [r3, #4]
     b28:	4a27      	ldr	r2, [pc, #156]	; (bc8 <i2c_slave_read_packet_wait+0x120>)
     b2a:	4013      	ands	r3, r2
     b2c:	4642      	mov	r2, r8
     b2e:	6053      	str	r3, [r2, #4]
	i2c_hw->CTRLB.reg |= SERCOM_I2CS_CTRLB_CMD(0x3);
     b30:	6852      	ldr	r2, [r2, #4]
     b32:	23c0      	movs	r3, #192	; 0xc0
     b34:	029b      	lsls	r3, r3, #10
     b36:	4313      	orrs	r3, r2
     b38:	4642      	mov	r2, r8
     b3a:	6053      	str	r3, [r2, #4]
	while (length--) {
     b3c:	3d01      	subs	r5, #1
     b3e:	b2ad      	uxth	r5, r5
     b40:	1c6b      	adds	r3, r5, #1
     b42:	4699      	mov	r9, r3
     b44:	2500      	movs	r5, #0
		status = _i2c_slave_wait_for_bus(module);
     b46:	4b1f      	ldr	r3, [pc, #124]	; (bc4 <i2c_slave_read_packet_wait+0x11c>)
     b48:	469b      	mov	fp, r3
		if ((i2c_hw->INTFLAG.reg & SERCOM_I2CS_INTFLAG_PREC) ||
     b4a:	2301      	movs	r3, #1
     b4c:	469a      	mov	sl, r3
		status = _i2c_slave_wait_for_bus(module);
     b4e:	0038      	movs	r0, r7
     b50:	47d8      	blx	fp
     b52:	1e04      	subs	r4, r0, #0
		if (status != STATUS_OK) {
     b54:	d1b4      	bne.n	ac0 <i2c_slave_read_packet_wait+0x18>
		if ((i2c_hw->INTFLAG.reg & SERCOM_I2CS_INTFLAG_PREC) ||
     b56:	4643      	mov	r3, r8
     b58:	7e1b      	ldrb	r3, [r3, #24]
     b5a:	4652      	mov	r2, sl
     b5c:	4213      	tst	r3, r2
     b5e:	d12b      	bne.n	bb8 <i2c_slave_read_packet_wait+0x110>
				i2c_hw->INTFLAG.reg & SERCOM_I2CS_INTFLAG_AMATCH) {
     b60:	4643      	mov	r3, r8
     b62:	7e1b      	ldrb	r3, [r3, #24]
		if ((i2c_hw->INTFLAG.reg & SERCOM_I2CS_INTFLAG_PREC) ||
     b64:	079b      	lsls	r3, r3, #30
     b66:	d427      	bmi.n	bb8 <i2c_slave_read_packet_wait+0x110>
		_i2c_slave_wait_for_sync(module);
     b68:	0038      	movs	r0, r7
     b6a:	4b18      	ldr	r3, [pc, #96]	; (bcc <i2c_slave_read_packet_wait+0x124>)
     b6c:	4798      	blx	r3
		packet->data[i++] = i2c_hw->DATA.reg;
     b6e:	2328      	movs	r3, #40	; 0x28
     b70:	4642      	mov	r2, r8
     b72:	5cd3      	ldrb	r3, [r2, r3]
     b74:	6872      	ldr	r2, [r6, #4]
     b76:	5553      	strb	r3, [r2, r5]
     b78:	3501      	adds	r5, #1
	while (length--) {
     b7a:	454d      	cmp	r5, r9
     b7c:	d1e7      	bne.n	b4e <i2c_slave_read_packet_wait+0xa6>
	status = _i2c_slave_wait_for_bus(module);
     b7e:	0038      	movs	r0, r7
     b80:	4b10      	ldr	r3, [pc, #64]	; (bc4 <i2c_slave_read_packet_wait+0x11c>)
     b82:	4798      	blx	r3
	if (i2c_hw->INTFLAG.reg & SERCOM_I2CS_INTFLAG_DRDY) {
     b84:	4643      	mov	r3, r8
     b86:	7e1b      	ldrb	r3, [r3, #24]
     b88:	075b      	lsls	r3, r3, #29
     b8a:	d50c      	bpl.n	ba6 <i2c_slave_read_packet_wait+0xfe>
		i2c_hw->CTRLB.reg |= SERCOM_I2CS_CTRLB_ACKACT;
     b8c:	4643      	mov	r3, r8
     b8e:	685a      	ldr	r2, [r3, #4]
     b90:	2380      	movs	r3, #128	; 0x80
     b92:	02db      	lsls	r3, r3, #11
     b94:	4313      	orrs	r3, r2
     b96:	4642      	mov	r2, r8
     b98:	6053      	str	r3, [r2, #4]
		i2c_hw->CTRLB.reg |= SERCOM_I2CS_CTRLB_CMD(0x2);
     b9a:	6852      	ldr	r2, [r2, #4]
     b9c:	2380      	movs	r3, #128	; 0x80
     b9e:	029b      	lsls	r3, r3, #10
     ba0:	4313      	orrs	r3, r2
     ba2:	4642      	mov	r2, r8
     ba4:	6053      	str	r3, [r2, #4]
	if (i2c_hw->INTFLAG.reg & SERCOM_I2CS_INTFLAG_PREC) {
     ba6:	4643      	mov	r3, r8
     ba8:	7e1b      	ldrb	r3, [r3, #24]
     baa:	07db      	lsls	r3, r3, #31
     bac:	d400      	bmi.n	bb0 <i2c_slave_read_packet_wait+0x108>
     bae:	e787      	b.n	ac0 <i2c_slave_read_packet_wait+0x18>
		i2c_hw->INTFLAG.reg = SERCOM_I2CS_INTFLAG_PREC;
     bb0:	2301      	movs	r3, #1
     bb2:	4642      	mov	r2, r8
     bb4:	7613      	strb	r3, [r2, #24]
     bb6:	e783      	b.n	ac0 <i2c_slave_read_packet_wait+0x18>
			i2c_hw->INTFLAG.reg = SERCOM_I2CS_INTFLAG_PREC;
     bb8:	2301      	movs	r3, #1
     bba:	4642      	mov	r2, r8
     bbc:	7613      	strb	r3, [r2, #24]
			return STATUS_ABORTED;
     bbe:	2404      	movs	r4, #4
     bc0:	e77e      	b.n	ac0 <i2c_slave_read_packet_wait+0x18>
     bc2:	46c0      	nop			; (mov r8, r8)
     bc4:	000008e1 	.word	0x000008e1
     bc8:	fffbffff 	.word	0xfffbffff
     bcc:	000008d5 	.word	0x000008d5

00000bd0 <_i2c_slave_interrupt_handler>:
 *
 * \param[in] instance Sercom instance that triggered the interrupt
 */
void _i2c_slave_interrupt_handler(
		uint8_t instance)
{
     bd0:	b570      	push	{r4, r5, r6, lr}
	/* Get software module for callback handling. */
	struct i2c_slave_module *module =
     bd2:	0080      	lsls	r0, r0, #2
     bd4:	4b9b      	ldr	r3, [pc, #620]	; (e44 <_i2c_slave_interrupt_handler+0x274>)
     bd6:	58c4      	ldr	r4, [r0, r3]
			(struct i2c_slave_module*)_sercom_instances[instance];

	Assert(module);

	SercomI2cs *const i2c_hw = &(module->hw->I2CS);
     bd8:	6825      	ldr	r5, [r4, #0]

	/* Combine callback registered and enabled masks. */
	uint8_t callback_mask = module->enabled_callback;
     bda:	2325      	movs	r3, #37	; 0x25
     bdc:	5ce3      	ldrb	r3, [r4, r3]
	callback_mask &= module->registered_callback;
     bde:	2224      	movs	r2, #36	; 0x24
     be0:	5ca6      	ldrb	r6, [r4, r2]
     be2:	401e      	ands	r6, r3


	if (i2c_hw->INTFLAG.reg & SERCOM_I2CS_INTFLAG_AMATCH) {
     be4:	7e2b      	ldrb	r3, [r5, #24]
     be6:	079b      	lsls	r3, r3, #30
     be8:	d400      	bmi.n	bec <_i2c_slave_interrupt_handler+0x1c>
     bea:	e095      	b.n	d18 <_i2c_slave_interrupt_handler+0x148>
	/* Address match */
		/* Check if last transfer is done - repeated start */
		if (module->buffer_length != module->buffer_remaining &&
     bec:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
     bee:	b29b      	uxth	r3, r3
     bf0:	8d22      	ldrh	r2, [r4, #40]	; 0x28
     bf2:	4293      	cmp	r3, r2
     bf4:	d00d      	beq.n	c12 <_i2c_slave_interrupt_handler+0x42>
				module->transfer_direction == I2C_TRANSFER_WRITE) {
     bf6:	2330      	movs	r3, #48	; 0x30
     bf8:	5ce3      	ldrb	r3, [r4, r3]
		if (module->buffer_length != module->buffer_remaining &&
     bfa:	2b00      	cmp	r3, #0
     bfc:	d109      	bne.n	c12 <_i2c_slave_interrupt_handler+0x42>

			module->status = STATUS_OK;
     bfe:	2231      	movs	r2, #49	; 0x31
     c00:	54a3      	strb	r3, [r4, r2]
			module->buffer_length = 0;
     c02:	84e3      	strh	r3, [r4, #38]	; 0x26
			module->buffer_remaining = 0;
     c04:	8523      	strh	r3, [r4, #40]	; 0x28

			if ((callback_mask & (1 << I2C_SLAVE_CALLBACK_READ_COMPLETE))) {
     c06:	07b3      	lsls	r3, r6, #30
     c08:	d50b      	bpl.n	c22 <_i2c_slave_interrupt_handler+0x52>
				module->callbacks[I2C_SLAVE_CALLBACK_READ_COMPLETE](module);
     c0a:	6923      	ldr	r3, [r4, #16]
     c0c:	0020      	movs	r0, r4
     c0e:	4798      	blx	r3
     c10:	e007      	b.n	c22 <_i2c_slave_interrupt_handler+0x52>
			}
		} else if (module->buffer_length != module->buffer_remaining &&
     c12:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
     c14:	b29b      	uxth	r3, r3
     c16:	429a      	cmp	r2, r3
     c18:	d003      	beq.n	c22 <_i2c_slave_interrupt_handler+0x52>
				module->transfer_direction == I2C_TRANSFER_READ) {
     c1a:	2330      	movs	r3, #48	; 0x30
     c1c:	5ce3      	ldrb	r3, [r4, r3]
		} else if (module->buffer_length != module->buffer_remaining &&
     c1e:	2b01      	cmp	r3, #1
     c20:	d022      	beq.n	c68 <_i2c_slave_interrupt_handler+0x98>
			if ((callback_mask & (1 << I2C_SLAVE_CALLBACK_WRITE_COMPLETE))) {
				module->callbacks[I2C_SLAVE_CALLBACK_WRITE_COMPLETE](module);
			}
		}

		if (i2c_hw->STATUS.reg & (SERCOM_I2CS_STATUS_BUSERR |
     c22:	8b6a      	ldrh	r2, [r5, #26]
     c24:	2343      	movs	r3, #67	; 0x43
     c26:	421a      	tst	r2, r3
     c28:	d004      	beq.n	c34 <_i2c_slave_interrupt_handler+0x64>
				SERCOM_I2CS_STATUS_COLL | SERCOM_I2CS_STATUS_LOWTOUT)) {
			/* An error occurred in last packet transfer */
			module->status = STATUS_ERR_IO;
     c2a:	2210      	movs	r2, #16
     c2c:	3b12      	subs	r3, #18
     c2e:	54e2      	strb	r2, [r4, r3]

			if ((callback_mask & (1 << I2C_SLAVE_CALLBACK_ERROR_LAST_TRANSFER))) {
     c30:	06b3      	lsls	r3, r6, #26
     c32:	d424      	bmi.n	c7e <_i2c_slave_interrupt_handler+0xae>
				module->callbacks[I2C_SLAVE_CALLBACK_ERROR_LAST_TRANSFER](module);
			}
		}
		if (module->nack_on_address) {
     c34:	7a63      	ldrb	r3, [r4, #9]
     c36:	2b00      	cmp	r3, #0
     c38:	d125      	bne.n	c86 <_i2c_slave_interrupt_handler+0xb6>
			/* NACK address, workaround 13574 */
			_i2c_slave_set_ctrlb_ackact(module, false);
		} else if (i2c_hw->STATUS.reg & SERCOM_I2CS_STATUS_DIR) {
     c3a:	8b6b      	ldrh	r3, [r5, #26]
     c3c:	071b      	lsls	r3, r3, #28
     c3e:	d54a      	bpl.n	cd6 <_i2c_slave_interrupt_handler+0x106>
			/* Set transfer direction in module instance */
			module->transfer_direction = I2C_TRANSFER_READ;
     c40:	2201      	movs	r2, #1
     c42:	2330      	movs	r3, #48	; 0x30
     c44:	54e2      	strb	r2, [r4, r3]

			/* Read request from master */
			if (callback_mask & (1 << I2C_SLAVE_CALLBACK_READ_REQUEST)) {
     c46:	0773      	lsls	r3, r6, #29
     c48:	d438      	bmi.n	cbc <_i2c_slave_interrupt_handler+0xec>
				module->callbacks[I2C_SLAVE_CALLBACK_READ_REQUEST](module);
			}

			if (module->buffer_length == 0) {
     c4a:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
     c4c:	b29b      	uxth	r3, r3
     c4e:	2b00      	cmp	r3, #0
     c50:	d138      	bne.n	cc4 <_i2c_slave_interrupt_handler+0xf4>
		bool send_ack)
{
	Assert(module);
	Assert(module->hw);

	SercomI2cs *const i2c_hw = &(module->hw->I2CS);
     c52:	6825      	ldr	r5, [r4, #0]
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
	cpu_irq_enter_critical();
     c54:	4b7c      	ldr	r3, [pc, #496]	; (e48 <_i2c_slave_interrupt_handler+0x278>)
     c56:	4798      	blx	r3

#if (SAMD20 || SAMD21 || SAMD09 || SAMD10 || SAMD11 || SAML21 || SAMDA1 ||  \
		SAML22 || SAMC20 || SAMC21 || SAMHA1 || (SAMHA0) || SAMR30 || SAMR34 || SAMR35) || (WLR089)
	/* Workaround, Following two write are atomic */
	system_interrupt_enter_critical_section();
	i2c_hw->STATUS.reg = 0;
     c58:	2300      	movs	r3, #0
     c5a:	836b      	strh	r3, [r5, #26]

	if (send_ack == true) {
		i2c_hw->CTRLB.reg = 0;
	}
	else {
		i2c_hw->CTRLB.reg = SERCOM_I2CS_CTRLB_ACKACT;
     c5c:	2380      	movs	r3, #128	; 0x80
     c5e:	02db      	lsls	r3, r3, #11
     c60:	606b      	str	r3, [r5, #4]
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
	cpu_irq_leave_critical();
     c62:	4b7a      	ldr	r3, [pc, #488]	; (e4c <_i2c_slave_interrupt_handler+0x27c>)
     c64:	4798      	blx	r3
     c66:	e018      	b.n	c9a <_i2c_slave_interrupt_handler+0xca>
			module->status = STATUS_OK;
     c68:	2300      	movs	r3, #0
     c6a:	2231      	movs	r2, #49	; 0x31
     c6c:	54a3      	strb	r3, [r4, r2]
			module->buffer_length = 0;
     c6e:	84e3      	strh	r3, [r4, #38]	; 0x26
			module->buffer_remaining = 0;
     c70:	8523      	strh	r3, [r4, #40]	; 0x28
			if ((callback_mask & (1 << I2C_SLAVE_CALLBACK_WRITE_COMPLETE))) {
     c72:	07f3      	lsls	r3, r6, #31
     c74:	d5d5      	bpl.n	c22 <_i2c_slave_interrupt_handler+0x52>
				module->callbacks[I2C_SLAVE_CALLBACK_WRITE_COMPLETE](module);
     c76:	68e3      	ldr	r3, [r4, #12]
     c78:	0020      	movs	r0, r4
     c7a:	4798      	blx	r3
     c7c:	e7d1      	b.n	c22 <_i2c_slave_interrupt_handler+0x52>
				module->callbacks[I2C_SLAVE_CALLBACK_ERROR_LAST_TRANSFER](module);
     c7e:	6a23      	ldr	r3, [r4, #32]
     c80:	0020      	movs	r0, r4
     c82:	4798      	blx	r3
     c84:	e7d6      	b.n	c34 <_i2c_slave_interrupt_handler+0x64>
	SercomI2cs *const i2c_hw = &(module->hw->I2CS);
     c86:	6825      	ldr	r5, [r4, #0]
	cpu_irq_enter_critical();
     c88:	4b6f      	ldr	r3, [pc, #444]	; (e48 <_i2c_slave_interrupt_handler+0x278>)
     c8a:	4798      	blx	r3
	i2c_hw->STATUS.reg = 0;
     c8c:	2300      	movs	r3, #0
     c8e:	836b      	strh	r3, [r5, #26]
		i2c_hw->CTRLB.reg = SERCOM_I2CS_CTRLB_ACKACT;
     c90:	2380      	movs	r3, #128	; 0x80
     c92:	02db      	lsls	r3, r3, #11
     c94:	606b      	str	r3, [r5, #4]
	cpu_irq_leave_critical();
     c96:	4b6d      	ldr	r3, [pc, #436]	; (e4c <_i2c_slave_interrupt_handler+0x27c>)
     c98:	4798      	blx	r3
		struct i2c_slave_module *const module)
{
	Assert(module);
	Assert(module->hw);

	SercomI2cs *const i2c_hw = &(module->hw->I2CS);
     c9a:	6823      	ldr	r3, [r4, #0]
	/*
	 * Below code instead i2c_hw->CTRLB.reg = SERCOM_I2CS_CTRLB_CMD(0x3);
	 * CMD=0x3 clears all interrupts, so to keep the result similar
	 * PREC is cleared if it was set
	 */
	if (i2c_hw->INTFLAG.bit.PREC) {
     c9c:	7e1a      	ldrb	r2, [r3, #24]
     c9e:	07d2      	lsls	r2, r2, #31
     ca0:	d501      	bpl.n	ca6 <_i2c_slave_interrupt_handler+0xd6>
		i2c_hw->INTFLAG.reg = SERCOM_I2CS_INTFLAG_PREC;
     ca2:	2201      	movs	r2, #1
     ca4:	761a      	strb	r2, [r3, #24]
	}
	i2c_hw->INTFLAG.reg = SERCOM_I2CS_INTFLAG_AMATCH;
     ca6:	2202      	movs	r2, #2
     ca8:	761a      	strb	r2, [r3, #24]
	SercomI2cs *const i2c_hw = &(module->hw->I2CS);
     caa:	6824      	ldr	r4, [r4, #0]
	cpu_irq_enter_critical();
     cac:	4b66      	ldr	r3, [pc, #408]	; (e48 <_i2c_slave_interrupt_handler+0x278>)
     cae:	4798      	blx	r3
	i2c_hw->STATUS.reg = 0;
     cb0:	2300      	movs	r3, #0
     cb2:	8363      	strh	r3, [r4, #26]
		i2c_hw->CTRLB.reg = 0;
     cb4:	6063      	str	r3, [r4, #4]
	cpu_irq_leave_critical();
     cb6:	4b65      	ldr	r3, [pc, #404]	; (e4c <_i2c_slave_interrupt_handler+0x27c>)
     cb8:	4798      	blx	r3
			} else {
				_i2c_slave_write(module);
			}
		}
	}
}
     cba:	bd70      	pop	{r4, r5, r6, pc}
				module->callbacks[I2C_SLAVE_CALLBACK_READ_REQUEST](module);
     cbc:	6963      	ldr	r3, [r4, #20]
     cbe:	0020      	movs	r0, r4
     cc0:	4798      	blx	r3
     cc2:	e7c2      	b.n	c4a <_i2c_slave_interrupt_handler+0x7a>
	SercomI2cs *const i2c_hw = &(module->hw->I2CS);
     cc4:	6825      	ldr	r5, [r4, #0]
	cpu_irq_enter_critical();
     cc6:	4b60      	ldr	r3, [pc, #384]	; (e48 <_i2c_slave_interrupt_handler+0x278>)
     cc8:	4798      	blx	r3
	i2c_hw->STATUS.reg = 0;
     cca:	2300      	movs	r3, #0
     ccc:	836b      	strh	r3, [r5, #26]
		i2c_hw->CTRLB.reg = 0;
     cce:	606b      	str	r3, [r5, #4]
	cpu_irq_leave_critical();
     cd0:	4b5e      	ldr	r3, [pc, #376]	; (e4c <_i2c_slave_interrupt_handler+0x27c>)
     cd2:	4798      	blx	r3
     cd4:	e7e1      	b.n	c9a <_i2c_slave_interrupt_handler+0xca>
			module->transfer_direction = I2C_TRANSFER_WRITE;
     cd6:	2200      	movs	r2, #0
     cd8:	2330      	movs	r3, #48	; 0x30
     cda:	54e2      	strb	r2, [r4, r3]
			if (callback_mask & (1 << I2C_SLAVE_CALLBACK_WRITE_REQUEST)) {
     cdc:	0733      	lsls	r3, r6, #28
     cde:	d40e      	bmi.n	cfe <_i2c_slave_interrupt_handler+0x12e>
			if (module->buffer_length == 0) {
     ce0:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
     ce2:	b29b      	uxth	r3, r3
     ce4:	2b00      	cmp	r3, #0
     ce6:	d10e      	bne.n	d06 <_i2c_slave_interrupt_handler+0x136>
	SercomI2cs *const i2c_hw = &(module->hw->I2CS);
     ce8:	6825      	ldr	r5, [r4, #0]
	cpu_irq_enter_critical();
     cea:	4b57      	ldr	r3, [pc, #348]	; (e48 <_i2c_slave_interrupt_handler+0x278>)
     cec:	4798      	blx	r3
	i2c_hw->STATUS.reg = 0;
     cee:	2300      	movs	r3, #0
     cf0:	836b      	strh	r3, [r5, #26]
		i2c_hw->CTRLB.reg = SERCOM_I2CS_CTRLB_ACKACT;
     cf2:	2380      	movs	r3, #128	; 0x80
     cf4:	02db      	lsls	r3, r3, #11
     cf6:	606b      	str	r3, [r5, #4]
	cpu_irq_leave_critical();
     cf8:	4b54      	ldr	r3, [pc, #336]	; (e4c <_i2c_slave_interrupt_handler+0x27c>)
     cfa:	4798      	blx	r3
     cfc:	e7cd      	b.n	c9a <_i2c_slave_interrupt_handler+0xca>
				module->callbacks[I2C_SLAVE_CALLBACK_WRITE_REQUEST](module);
     cfe:	69a3      	ldr	r3, [r4, #24]
     d00:	0020      	movs	r0, r4
     d02:	4798      	blx	r3
     d04:	e7ec      	b.n	ce0 <_i2c_slave_interrupt_handler+0x110>
	SercomI2cs *const i2c_hw = &(module->hw->I2CS);
     d06:	6825      	ldr	r5, [r4, #0]
	cpu_irq_enter_critical();
     d08:	4b4f      	ldr	r3, [pc, #316]	; (e48 <_i2c_slave_interrupt_handler+0x278>)
     d0a:	4798      	blx	r3
	i2c_hw->STATUS.reg = 0;
     d0c:	2300      	movs	r3, #0
     d0e:	836b      	strh	r3, [r5, #26]
		i2c_hw->CTRLB.reg = 0;
     d10:	606b      	str	r3, [r5, #4]
	cpu_irq_leave_critical();
     d12:	4b4e      	ldr	r3, [pc, #312]	; (e4c <_i2c_slave_interrupt_handler+0x27c>)
     d14:	4798      	blx	r3
     d16:	e7c0      	b.n	c9a <_i2c_slave_interrupt_handler+0xca>
	} else if (i2c_hw->INTFLAG.reg & SERCOM_I2CS_INTFLAG_PREC) {
     d18:	7e2b      	ldrb	r3, [r5, #24]
     d1a:	07db      	lsls	r3, r3, #31
     d1c:	d52e      	bpl.n	d7c <_i2c_slave_interrupt_handler+0x1ac>
		i2c_hw->INTFLAG.reg = SERCOM_I2CS_INTFLAG_PREC;
     d1e:	2301      	movs	r3, #1
     d20:	762b      	strb	r3, [r5, #24]
		i2c_hw->INTENCLR.reg = SERCOM_I2CS_INTFLAG_PREC | SERCOM_I2CS_INTFLAG_DRDY;
     d22:	3304      	adds	r3, #4
     d24:	752b      	strb	r3, [r5, #20]
		if (!((module->enabled_callback & (1 << I2C_SLAVE_CALLBACK_READ_REQUEST))
     d26:	3320      	adds	r3, #32
     d28:	5ce3      	ldrb	r3, [r4, r3]
     d2a:	075b      	lsls	r3, r3, #29
     d2c:	d405      	bmi.n	d3a <_i2c_slave_interrupt_handler+0x16a>
				|| (module->enabled_callback & (1 << I2C_SLAVE_CALLBACK_WRITE_REQUEST)))) {
     d2e:	2325      	movs	r3, #37	; 0x25
     d30:	5ce3      	ldrb	r3, [r4, r3]
		if (!((module->enabled_callback & (1 << I2C_SLAVE_CALLBACK_READ_REQUEST))
     d32:	071b      	lsls	r3, r3, #28
     d34:	d401      	bmi.n	d3a <_i2c_slave_interrupt_handler+0x16a>
			i2c_hw->INTENCLR.reg = SERCOM_I2CS_INTFLAG_AMATCH;
     d36:	2302      	movs	r3, #2
     d38:	752b      	strb	r3, [r5, #20]
		if (!(module->status == STATUS_ERR_OVERFLOW || module->status == STATUS_ERR_IO)) {
     d3a:	2331      	movs	r3, #49	; 0x31
     d3c:	5ce3      	ldrb	r3, [r4, r3]
     d3e:	2b1e      	cmp	r3, #30
     d40:	d0bb      	beq.n	cba <_i2c_slave_interrupt_handler+0xea>
     d42:	2331      	movs	r3, #49	; 0x31
     d44:	5ce3      	ldrb	r3, [r4, r3]
     d46:	2b10      	cmp	r3, #16
     d48:	d0b7      	beq.n	cba <_i2c_slave_interrupt_handler+0xea>
			module->status = STATUS_OK;
     d4a:	2300      	movs	r3, #0
     d4c:	2231      	movs	r2, #49	; 0x31
     d4e:	54a3      	strb	r3, [r4, r2]
			module->buffer_length = 0;
     d50:	84e3      	strh	r3, [r4, #38]	; 0x26
			module->buffer_remaining = 0;
     d52:	8523      	strh	r3, [r4, #40]	; 0x28
			if ((callback_mask & (1 << I2C_SLAVE_CALLBACK_READ_COMPLETE))
     d54:	07b3      	lsls	r3, r6, #30
     d56:	d503      	bpl.n	d60 <_i2c_slave_interrupt_handler+0x190>
					&& (module->transfer_direction == I2C_TRANSFER_WRITE)) {
     d58:	2330      	movs	r3, #48	; 0x30
     d5a:	5ce3      	ldrb	r3, [r4, r3]
     d5c:	2b00      	cmp	r3, #0
     d5e:	d009      	beq.n	d74 <_i2c_slave_interrupt_handler+0x1a4>
			} else if ((callback_mask & (1 << I2C_SLAVE_CALLBACK_WRITE_COMPLETE))
     d60:	07f3      	lsls	r3, r6, #31
     d62:	d5aa      	bpl.n	cba <_i2c_slave_interrupt_handler+0xea>
					&& (module->transfer_direction == I2C_TRANSFER_READ)) {
     d64:	2330      	movs	r3, #48	; 0x30
     d66:	5ce3      	ldrb	r3, [r4, r3]
     d68:	2b01      	cmp	r3, #1
     d6a:	d1a6      	bne.n	cba <_i2c_slave_interrupt_handler+0xea>
				module->callbacks[I2C_SLAVE_CALLBACK_WRITE_COMPLETE](module);
     d6c:	68e3      	ldr	r3, [r4, #12]
     d6e:	0020      	movs	r0, r4
     d70:	4798      	blx	r3
     d72:	e7a2      	b.n	cba <_i2c_slave_interrupt_handler+0xea>
				module->callbacks[I2C_SLAVE_CALLBACK_READ_COMPLETE](module);
     d74:	6923      	ldr	r3, [r4, #16]
     d76:	0020      	movs	r0, r4
     d78:	4798      	blx	r3
     d7a:	e79e      	b.n	cba <_i2c_slave_interrupt_handler+0xea>
	} else if (i2c_hw->INTFLAG.reg & SERCOM_I2CS_INTFLAG_DRDY) {
     d7c:	7e2b      	ldrb	r3, [r5, #24]
     d7e:	075b      	lsls	r3, r3, #29
     d80:	d59b      	bpl.n	cba <_i2c_slave_interrupt_handler+0xea>
		if (module->buffer_remaining <= 0 ||
     d82:	8d23      	ldrh	r3, [r4, #40]	; 0x28
     d84:	2b00      	cmp	r3, #0
     d86:	d01e      	beq.n	dc6 <_i2c_slave_interrupt_handler+0x1f6>
				(module->transfer_direction == I2C_TRANSFER_READ &&
     d88:	2230      	movs	r2, #48	; 0x30
     d8a:	5ca2      	ldrb	r2, [r4, r2]
		if (module->buffer_remaining <= 0 ||
     d8c:	2a01      	cmp	r2, #1
     d8e:	d013      	beq.n	db8 <_i2c_slave_interrupt_handler+0x1e8>
		} else if (module->buffer_length > 0 && module->buffer_remaining > 0) {
     d90:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
     d92:	b29b      	uxth	r3, r3
     d94:	2b00      	cmp	r3, #0
     d96:	d100      	bne.n	d9a <_i2c_slave_interrupt_handler+0x1ca>
     d98:	e78f      	b.n	cba <_i2c_slave_interrupt_handler+0xea>
			if (module->transfer_direction == I2C_TRANSFER_WRITE) {
     d9a:	2330      	movs	r3, #48	; 0x30
     d9c:	5ce3      	ldrb	r3, [r4, r3]
     d9e:	2b00      	cmp	r3, #0
     da0:	d044      	beq.n	e2c <_i2c_slave_interrupt_handler+0x25c>
	i2c_hw->DATA.reg = *(module->buffer++);
     da2:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
     da4:	1c5a      	adds	r2, r3, #1
     da6:	62e2      	str	r2, [r4, #44]	; 0x2c
     da8:	781b      	ldrb	r3, [r3, #0]
     daa:	b2db      	uxtb	r3, r3
     dac:	2228      	movs	r2, #40	; 0x28
     dae:	54ab      	strb	r3, [r5, r2]
	module->buffer_remaining--;
     db0:	8d23      	ldrh	r3, [r4, #40]	; 0x28
     db2:	3b01      	subs	r3, #1
     db4:	8523      	strh	r3, [r4, #40]	; 0x28
}
     db6:	e780      	b.n	cba <_i2c_slave_interrupt_handler+0xea>
				(module->buffer_length > module->buffer_remaining) &&
     db8:	8ce2      	ldrh	r2, [r4, #38]	; 0x26
     dba:	b292      	uxth	r2, r2
				(module->transfer_direction == I2C_TRANSFER_READ &&
     dbc:	4293      	cmp	r3, r2
     dbe:	d2e7      	bcs.n	d90 <_i2c_slave_interrupt_handler+0x1c0>
				(i2c_hw->STATUS.reg & SERCOM_I2CS_STATUS_RXNACK))) {
     dc0:	8b6b      	ldrh	r3, [r5, #26]
				(module->buffer_length > module->buffer_remaining) &&
     dc2:	075b      	lsls	r3, r3, #29
     dc4:	d5e4      	bpl.n	d90 <_i2c_slave_interrupt_handler+0x1c0>
			module->buffer_remaining = 0;
     dc6:	2300      	movs	r3, #0
     dc8:	8523      	strh	r3, [r4, #40]	; 0x28
			module->buffer_length = 0;
     dca:	84e3      	strh	r3, [r4, #38]	; 0x26
			if (module->transfer_direction == I2C_TRANSFER_WRITE) {
     dcc:	3330      	adds	r3, #48	; 0x30
     dce:	5ce3      	ldrb	r3, [r4, r3]
     dd0:	2b00      	cmp	r3, #0
     dd2:	d117      	bne.n	e04 <_i2c_slave_interrupt_handler+0x234>
	cpu_irq_enter_critical();
     dd4:	4b1c      	ldr	r3, [pc, #112]	; (e48 <_i2c_slave_interrupt_handler+0x278>)
     dd6:	4798      	blx	r3
	i2c_hw->STATUS.reg = 0;
     dd8:	2300      	movs	r3, #0
     dda:	836b      	strh	r3, [r5, #26]
		i2c_hw->CTRLB.reg = SERCOM_I2CS_CTRLB_ACKACT;
     ddc:	2380      	movs	r3, #128	; 0x80
     dde:	02db      	lsls	r3, r3, #11
     de0:	606b      	str	r3, [r5, #4]
	cpu_irq_leave_critical();
     de2:	4b1a      	ldr	r3, [pc, #104]	; (e4c <_i2c_slave_interrupt_handler+0x27c>)
     de4:	4798      	blx	r3
				i2c_hw->CTRLB.reg |= SERCOM_I2CS_CTRLB_CMD(0x2);
     de6:	686a      	ldr	r2, [r5, #4]
     de8:	2380      	movs	r3, #128	; 0x80
     dea:	029b      	lsls	r3, r3, #10
     dec:	4313      	orrs	r3, r2
     dee:	606b      	str	r3, [r5, #4]
				module->status = STATUS_ERR_OVERFLOW;
     df0:	221e      	movs	r2, #30
     df2:	2331      	movs	r3, #49	; 0x31
     df4:	54e2      	strb	r2, [r4, r3]
				if (callback_mask & (1 << I2C_SLAVE_CALLBACK_ERROR)) {
     df6:	06f3      	lsls	r3, r6, #27
     df8:	d400      	bmi.n	dfc <_i2c_slave_interrupt_handler+0x22c>
     dfa:	e75e      	b.n	cba <_i2c_slave_interrupt_handler+0xea>
					module->callbacks[I2C_SLAVE_CALLBACK_ERROR](module);
     dfc:	69e3      	ldr	r3, [r4, #28]
     dfe:	0020      	movs	r0, r4
     e00:	4798      	blx	r3
     e02:	e75a      	b.n	cba <_i2c_slave_interrupt_handler+0xea>
	cpu_irq_enter_critical();
     e04:	4b10      	ldr	r3, [pc, #64]	; (e48 <_i2c_slave_interrupt_handler+0x278>)
     e06:	4798      	blx	r3
	i2c_hw->STATUS.reg = 0;
     e08:	2300      	movs	r3, #0
     e0a:	836b      	strh	r3, [r5, #26]
		i2c_hw->CTRLB.reg = SERCOM_I2CS_CTRLB_ACKACT;
     e0c:	2380      	movs	r3, #128	; 0x80
     e0e:	02db      	lsls	r3, r3, #11
     e10:	606b      	str	r3, [r5, #4]
	cpu_irq_leave_critical();
     e12:	4b0e      	ldr	r3, [pc, #56]	; (e4c <_i2c_slave_interrupt_handler+0x27c>)
     e14:	4798      	blx	r3
				i2c_hw->CTRLB.reg |= SERCOM_I2CS_CTRLB_CMD(0x2);
     e16:	686a      	ldr	r2, [r5, #4]
     e18:	2380      	movs	r3, #128	; 0x80
     e1a:	029b      	lsls	r3, r3, #10
     e1c:	4313      	orrs	r3, r2
     e1e:	606b      	str	r3, [r5, #4]
				module->status = STATUS_OK;
     e20:	2331      	movs	r3, #49	; 0x31
     e22:	2200      	movs	r2, #0
     e24:	54e2      	strb	r2, [r4, r3]
				i2c_hw->INTENCLR.reg = SERCOM_I2CS_INTFLAG_DRDY;
     e26:	3b2d      	subs	r3, #45	; 0x2d
     e28:	752b      	strb	r3, [r5, #20]
     e2a:	e746      	b.n	cba <_i2c_slave_interrupt_handler+0xea>
	*(module->buffer++) = i2c_hw->DATA.reg;
     e2c:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
     e2e:	1c53      	adds	r3, r2, #1
     e30:	62e3      	str	r3, [r4, #44]	; 0x2c
     e32:	2328      	movs	r3, #40	; 0x28
     e34:	5ceb      	ldrb	r3, [r5, r3]
     e36:	b2db      	uxtb	r3, r3
     e38:	7013      	strb	r3, [r2, #0]
	module->buffer_remaining--;
     e3a:	8d23      	ldrh	r3, [r4, #40]	; 0x28
     e3c:	3b01      	subs	r3, #1
     e3e:	8523      	strh	r3, [r4, #40]	; 0x28
     e40:	e73b      	b.n	cba <_i2c_slave_interrupt_handler+0xea>
     e42:	46c0      	nop			; (mov r8, r8)
     e44:	20000068 	.word	0x20000068
     e48:	000021ed 	.word	0x000021ed
     e4c:	0000222d 	.word	0x0000222d

00000e50 <long_division>:
/**
 * \internal Calculate 64 bit division, ref can be found in
 * http://en.wikipedia.org/wiki/Division_algorithm#Long_division
 */
static uint64_t long_division(uint64_t n, uint64_t d)
{
     e50:	b5f0      	push	{r4, r5, r6, r7, lr}
     e52:	46de      	mov	lr, fp
     e54:	4657      	mov	r7, sl
     e56:	464e      	mov	r6, r9
     e58:	4645      	mov	r5, r8
     e5a:	b5e0      	push	{r5, r6, r7, lr}
     e5c:	b087      	sub	sp, #28
     e5e:	4680      	mov	r8, r0
     e60:	9104      	str	r1, [sp, #16]
     e62:	0016      	movs	r6, r2
     e64:	001f      	movs	r7, r3
	int32_t i;
	uint64_t q = 0, r = 0, bit_shift;
     e66:	2200      	movs	r2, #0
     e68:	2300      	movs	r3, #0
     e6a:	2100      	movs	r1, #0
     e6c:	468b      	mov	fp, r1
	for (i = 63; i >= 0; i--) {
     e6e:	243f      	movs	r4, #63	; 0x3f
		bit_shift = (uint64_t)1 << i;
     e70:	2001      	movs	r0, #1
     e72:	0021      	movs	r1, r4
     e74:	9600      	str	r6, [sp, #0]
     e76:	9701      	str	r7, [sp, #4]
     e78:	465c      	mov	r4, fp
     e7a:	9403      	str	r4, [sp, #12]
     e7c:	4644      	mov	r4, r8
     e7e:	9405      	str	r4, [sp, #20]
     e80:	e013      	b.n	eaa <long_division+0x5a>
     e82:	2420      	movs	r4, #32
     e84:	1a64      	subs	r4, r4, r1
     e86:	0005      	movs	r5, r0
     e88:	40e5      	lsrs	r5, r4
     e8a:	46a8      	mov	r8, r5
     e8c:	e014      	b.n	eb8 <long_division+0x68>
		if (n & bit_shift) {
			r |= 0x01;
		}

		if (r >= d) {
			r = r - d;
     e8e:	9c00      	ldr	r4, [sp, #0]
     e90:	9d01      	ldr	r5, [sp, #4]
     e92:	1b12      	subs	r2, r2, r4
     e94:	41ab      	sbcs	r3, r5
			q |= bit_shift;
     e96:	465c      	mov	r4, fp
     e98:	464d      	mov	r5, r9
     e9a:	432c      	orrs	r4, r5
     e9c:	46a3      	mov	fp, r4
     e9e:	9c03      	ldr	r4, [sp, #12]
     ea0:	4645      	mov	r5, r8
     ea2:	432c      	orrs	r4, r5
     ea4:	9403      	str	r4, [sp, #12]
	for (i = 63; i >= 0; i--) {
     ea6:	3901      	subs	r1, #1
     ea8:	d325      	bcc.n	ef6 <long_division+0xa6>
		bit_shift = (uint64_t)1 << i;
     eaa:	2420      	movs	r4, #32
     eac:	4264      	negs	r4, r4
     eae:	190c      	adds	r4, r1, r4
     eb0:	d4e7      	bmi.n	e82 <long_division+0x32>
     eb2:	0005      	movs	r5, r0
     eb4:	40a5      	lsls	r5, r4
     eb6:	46a8      	mov	r8, r5
     eb8:	0004      	movs	r4, r0
     eba:	408c      	lsls	r4, r1
     ebc:	46a1      	mov	r9, r4
		r = r << 1;
     ebe:	1892      	adds	r2, r2, r2
     ec0:	415b      	adcs	r3, r3
     ec2:	0014      	movs	r4, r2
     ec4:	001d      	movs	r5, r3
		if (n & bit_shift) {
     ec6:	9e05      	ldr	r6, [sp, #20]
     ec8:	464f      	mov	r7, r9
     eca:	403e      	ands	r6, r7
     ecc:	46b4      	mov	ip, r6
     ece:	9e04      	ldr	r6, [sp, #16]
     ed0:	4647      	mov	r7, r8
     ed2:	403e      	ands	r6, r7
     ed4:	46b2      	mov	sl, r6
     ed6:	4666      	mov	r6, ip
     ed8:	4657      	mov	r7, sl
     eda:	433e      	orrs	r6, r7
     edc:	d003      	beq.n	ee6 <long_division+0x96>
			r |= 0x01;
     ede:	0006      	movs	r6, r0
     ee0:	4326      	orrs	r6, r4
     ee2:	0032      	movs	r2, r6
     ee4:	002b      	movs	r3, r5
		if (r >= d) {
     ee6:	9c00      	ldr	r4, [sp, #0]
     ee8:	9d01      	ldr	r5, [sp, #4]
     eea:	429d      	cmp	r5, r3
     eec:	d8db      	bhi.n	ea6 <long_division+0x56>
     eee:	d1ce      	bne.n	e8e <long_division+0x3e>
     ef0:	4294      	cmp	r4, r2
     ef2:	d8d8      	bhi.n	ea6 <long_division+0x56>
     ef4:	e7cb      	b.n	e8e <long_division+0x3e>
     ef6:	9b03      	ldr	r3, [sp, #12]
		}
	}

	return q;
}
     ef8:	4658      	mov	r0, fp
     efa:	0019      	movs	r1, r3
     efc:	b007      	add	sp, #28
     efe:	bc3c      	pop	{r2, r3, r4, r5}
     f00:	4690      	mov	r8, r2
     f02:	4699      	mov	r9, r3
     f04:	46a2      	mov	sl, r4
     f06:	46ab      	mov	fp, r5
     f08:	bdf0      	pop	{r4, r5, r6, r7, pc}

00000f0a <_sercom_get_sync_baud_val>:
 */
enum status_code _sercom_get_sync_baud_val(
		const uint32_t baudrate,
		const uint32_t external_clock,
		uint16_t *const baudvalue)
{
     f0a:	b510      	push	{r4, lr}
	uint16_t baud_calculated = 0;
	uint32_t clock_value = external_clock;


	/* Check if baudrate is outside of valid range */
	if (baudrate > (external_clock / 2)) {
     f0c:	0849      	lsrs	r1, r1, #1
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
     f0e:	2340      	movs	r3, #64	; 0x40
     f10:	2400      	movs	r4, #0
	if (baudrate > (external_clock / 2)) {
     f12:	4281      	cmp	r1, r0
     f14:	d202      	bcs.n	f1c <_sercom_get_sync_baud_val+0x12>
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
	} else {
		*baudvalue = baud_calculated;
		return STATUS_OK;
	}
}
     f16:	0018      	movs	r0, r3
     f18:	bd10      	pop	{r4, pc}
		baud_calculated++;
     f1a:	001c      	movs	r4, r3
		clock_value = clock_value - baudrate;
     f1c:	1a09      	subs	r1, r1, r0
		baud_calculated++;
     f1e:	1c63      	adds	r3, r4, #1
     f20:	b29b      	uxth	r3, r3
	while (clock_value >= baudrate) {
     f22:	4288      	cmp	r0, r1
     f24:	d9f9      	bls.n	f1a <_sercom_get_sync_baud_val+0x10>
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
     f26:	2340      	movs	r3, #64	; 0x40
	if (baud_calculated > 0xFF) {
     f28:	2cff      	cmp	r4, #255	; 0xff
     f2a:	d8f4      	bhi.n	f16 <_sercom_get_sync_baud_val+0xc>
		*baudvalue = baud_calculated;
     f2c:	8014      	strh	r4, [r2, #0]
		return STATUS_OK;
     f2e:	2300      	movs	r3, #0
     f30:	e7f1      	b.n	f16 <_sercom_get_sync_baud_val+0xc>
	...

00000f34 <_sercom_get_async_baud_val>:
		const uint32_t baudrate,
		const uint32_t peripheral_clock,
		uint16_t *const baudval,
		enum sercom_asynchronous_operation_mode mode,
		enum sercom_asynchronous_sample_num sample_num)
{
     f34:	b5f0      	push	{r4, r5, r6, r7, lr}
     f36:	b083      	sub	sp, #12
     f38:	000f      	movs	r7, r1
     f3a:	0016      	movs	r6, r2
     f3c:	aa08      	add	r2, sp, #32
     f3e:	7811      	ldrb	r1, [r2, #0]
	uint8_t baud_fp;
	uint32_t baud_int = 0;
	uint64_t temp1;

	/* Check if the baudrate is outside of valid range */
	if ((baudrate * sample_num) > peripheral_clock) {
     f40:	0004      	movs	r4, r0
     f42:	434c      	muls	r4, r1
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
     f44:	2240      	movs	r2, #64	; 0x40
	if ((baudrate * sample_num) > peripheral_clock) {
     f46:	42bc      	cmp	r4, r7
     f48:	d902      	bls.n	f50 <_sercom_get_async_baud_val+0x1c>
		baud_calculated = baud_int | (baud_fp << 13);
	}

	*baudval = baud_calculated;
	return STATUS_OK;
}
     f4a:	0010      	movs	r0, r2
     f4c:	b003      	add	sp, #12
     f4e:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if(mode == SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC) {
     f50:	2b00      	cmp	r3, #0
     f52:	d114      	bne.n	f7e <_sercom_get_async_baud_val+0x4a>
		temp1 = ((sample_num * (uint64_t)baudrate) << SHIFT);
     f54:	0002      	movs	r2, r0
     f56:	0008      	movs	r0, r1
     f58:	2100      	movs	r1, #0
     f5a:	4c19      	ldr	r4, [pc, #100]	; (fc0 <_sercom_get_async_baud_val+0x8c>)
     f5c:	47a0      	blx	r4
     f5e:	0001      	movs	r1, r0
		ratio = long_division(temp1, peripheral_clock);
     f60:	003a      	movs	r2, r7
     f62:	2300      	movs	r3, #0
     f64:	2000      	movs	r0, #0
     f66:	4c17      	ldr	r4, [pc, #92]	; (fc4 <_sercom_get_async_baud_val+0x90>)
     f68:	47a0      	blx	r4
		scale = ((uint64_t)1 << SHIFT) - ratio;
     f6a:	2200      	movs	r2, #0
     f6c:	2301      	movs	r3, #1
     f6e:	1a12      	subs	r2, r2, r0
     f70:	418b      	sbcs	r3, r1
		baud_calculated = (65536 * scale) >> SHIFT;
     f72:	0c12      	lsrs	r2, r2, #16
     f74:	041b      	lsls	r3, r3, #16
     f76:	431a      	orrs	r2, r3
	*baudval = baud_calculated;
     f78:	8032      	strh	r2, [r6, #0]
	return STATUS_OK;
     f7a:	2200      	movs	r2, #0
     f7c:	e7e5      	b.n	f4a <_sercom_get_async_baud_val+0x16>
	uint64_t baud_calculated = 0;
     f7e:	2200      	movs	r2, #0
	} else if(mode == SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL) {
     f80:	2b01      	cmp	r3, #1
     f82:	d1f9      	bne.n	f78 <_sercom_get_async_baud_val+0x44>
		temp1 = ((uint64_t)baudrate * sample_num);
     f84:	000a      	movs	r2, r1
     f86:	2300      	movs	r3, #0
     f88:	2100      	movs	r1, #0
     f8a:	4c0d      	ldr	r4, [pc, #52]	; (fc0 <_sercom_get_async_baud_val+0x8c>)
     f8c:	47a0      	blx	r4
     f8e:	0002      	movs	r2, r0
     f90:	000b      	movs	r3, r1
     f92:	9200      	str	r2, [sp, #0]
     f94:	9301      	str	r3, [sp, #4]
		baud_int = long_division( peripheral_clock, temp1);
     f96:	0038      	movs	r0, r7
     f98:	2100      	movs	r1, #0
     f9a:	4c0a      	ldr	r4, [pc, #40]	; (fc4 <_sercom_get_async_baud_val+0x90>)
     f9c:	47a0      	blx	r4
     f9e:	0005      	movs	r5, r0
		if(baud_int > BAUD_INT_MAX) {
     fa0:	2380      	movs	r3, #128	; 0x80
     fa2:	019b      	lsls	r3, r3, #6
				return STATUS_ERR_BAUDRATE_UNAVAILABLE;
     fa4:	2240      	movs	r2, #64	; 0x40
		if(baud_int > BAUD_INT_MAX) {
     fa6:	4298      	cmp	r0, r3
     fa8:	d8cf      	bhi.n	f4a <_sercom_get_async_baud_val+0x16>
		temp1 = long_division( 8 * (uint64_t)peripheral_clock, temp1);
     faa:	0f79      	lsrs	r1, r7, #29
     fac:	00f8      	lsls	r0, r7, #3
     fae:	9a00      	ldr	r2, [sp, #0]
     fb0:	9b01      	ldr	r3, [sp, #4]
     fb2:	47a0      	blx	r4
		baud_fp = temp1 - 8 * baud_int;
     fb4:	00ea      	lsls	r2, r5, #3
     fb6:	1a82      	subs	r2, r0, r2
		baud_calculated = baud_int | (baud_fp << 13);
     fb8:	b2d2      	uxtb	r2, r2
     fba:	0352      	lsls	r2, r2, #13
     fbc:	432a      	orrs	r2, r5
     fbe:	e7db      	b.n	f78 <_sercom_get_async_baud_val+0x44>
     fc0:	000032a1 	.word	0x000032a1
     fc4:	00000e51 	.word	0x00000e51

00000fc8 <sercom_set_gclk_generator>:
 *                                         forced.
 */
enum status_code sercom_set_gclk_generator(
		const enum gclk_generator generator_source,
		const bool force_change)
{
     fc8:	b510      	push	{r4, lr}
     fca:	b082      	sub	sp, #8
     fcc:	0004      	movs	r4, r0
	/* Check if valid option */
	if (!_sercom_config.generator_is_set || force_change) {
     fce:	4b0e      	ldr	r3, [pc, #56]	; (1008 <sercom_set_gclk_generator+0x40>)
     fd0:	781b      	ldrb	r3, [r3, #0]
     fd2:	2b00      	cmp	r3, #0
     fd4:	d007      	beq.n	fe6 <sercom_set_gclk_generator+0x1e>
     fd6:	2900      	cmp	r1, #0
     fd8:	d105      	bne.n	fe6 <sercom_set_gclk_generator+0x1e>
		/* Save config */
		_sercom_config.generator_source = generator_source;
		_sercom_config.generator_is_set = true;

		return STATUS_OK;
	} else if (generator_source == _sercom_config.generator_source) {
     fda:	4b0b      	ldr	r3, [pc, #44]	; (1008 <sercom_set_gclk_generator+0x40>)
     fdc:	785b      	ldrb	r3, [r3, #1]
     fde:	4283      	cmp	r3, r0
     fe0:	d010      	beq.n	1004 <sercom_set_gclk_generator+0x3c>
		/* Return status OK if same config */
		return STATUS_OK;
	}

	/* Return invalid config to already initialized GCLK */
	return STATUS_ERR_ALREADY_INITIALIZED;
     fe2:	201d      	movs	r0, #29
     fe4:	e00c      	b.n	1000 <sercom_set_gclk_generator+0x38>
		gclk_chan_conf.source_generator = generator_source;
     fe6:	a901      	add	r1, sp, #4
     fe8:	700c      	strb	r4, [r1, #0]
		system_gclk_chan_set_config(SERCOM_GCLK_ID, &gclk_chan_conf);
     fea:	2013      	movs	r0, #19
     fec:	4b07      	ldr	r3, [pc, #28]	; (100c <sercom_set_gclk_generator+0x44>)
     fee:	4798      	blx	r3
		system_gclk_chan_enable(SERCOM_GCLK_ID);
     ff0:	2013      	movs	r0, #19
     ff2:	4b07      	ldr	r3, [pc, #28]	; (1010 <sercom_set_gclk_generator+0x48>)
     ff4:	4798      	blx	r3
		_sercom_config.generator_source = generator_source;
     ff6:	4b04      	ldr	r3, [pc, #16]	; (1008 <sercom_set_gclk_generator+0x40>)
     ff8:	705c      	strb	r4, [r3, #1]
		_sercom_config.generator_is_set = true;
     ffa:	2201      	movs	r2, #1
     ffc:	701a      	strb	r2, [r3, #0]
		return STATUS_OK;
     ffe:	2000      	movs	r0, #0
}
    1000:	b002      	add	sp, #8
    1002:	bd10      	pop	{r4, pc}
		return STATUS_OK;
    1004:	2000      	movs	r0, #0
    1006:	e7fb      	b.n	1000 <sercom_set_gclk_generator+0x38>
    1008:	20000028 	.word	0x20000028
    100c:	00002901 	.word	0x00002901
    1010:	00002875 	.word	0x00002875

00001014 <_sercom_get_default_pad>:
 */
uint32_t _sercom_get_default_pad(
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
    1014:	4b40      	ldr	r3, [pc, #256]	; (1118 <_sercom_get_default_pad+0x104>)
    1016:	4298      	cmp	r0, r3
    1018:	d031      	beq.n	107e <_sercom_get_default_pad+0x6a>
    101a:	d90a      	bls.n	1032 <_sercom_get_default_pad+0x1e>
    101c:	4b3f      	ldr	r3, [pc, #252]	; (111c <_sercom_get_default_pad+0x108>)
    101e:	4298      	cmp	r0, r3
    1020:	d04d      	beq.n	10be <_sercom_get_default_pad+0xaa>
    1022:	4b3f      	ldr	r3, [pc, #252]	; (1120 <_sercom_get_default_pad+0x10c>)
    1024:	4298      	cmp	r0, r3
    1026:	d05a      	beq.n	10de <_sercom_get_default_pad+0xca>
    1028:	4b3e      	ldr	r3, [pc, #248]	; (1124 <_sercom_get_default_pad+0x110>)
    102a:	4298      	cmp	r0, r3
    102c:	d037      	beq.n	109e <_sercom_get_default_pad+0x8a>
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
	}

	Assert(false);
	return 0;
    102e:	2000      	movs	r0, #0
}
    1030:	4770      	bx	lr
	switch ((uintptr_t)sercom_module) {
    1032:	4b3d      	ldr	r3, [pc, #244]	; (1128 <_sercom_get_default_pad+0x114>)
    1034:	4298      	cmp	r0, r3
    1036:	d00c      	beq.n	1052 <_sercom_get_default_pad+0x3e>
    1038:	4b3c      	ldr	r3, [pc, #240]	; (112c <_sercom_get_default_pad+0x118>)
    103a:	4298      	cmp	r0, r3
    103c:	d1f7      	bne.n	102e <_sercom_get_default_pad+0x1a>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    103e:	2901      	cmp	r1, #1
    1040:	d017      	beq.n	1072 <_sercom_get_default_pad+0x5e>
    1042:	2900      	cmp	r1, #0
    1044:	d05d      	beq.n	1102 <_sercom_get_default_pad+0xee>
    1046:	2902      	cmp	r1, #2
    1048:	d015      	beq.n	1076 <_sercom_get_default_pad+0x62>
    104a:	2903      	cmp	r1, #3
    104c:	d015      	beq.n	107a <_sercom_get_default_pad+0x66>
	return 0;
    104e:	2000      	movs	r0, #0
    1050:	e7ee      	b.n	1030 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    1052:	2901      	cmp	r1, #1
    1054:	d007      	beq.n	1066 <_sercom_get_default_pad+0x52>
    1056:	2900      	cmp	r1, #0
    1058:	d051      	beq.n	10fe <_sercom_get_default_pad+0xea>
    105a:	2902      	cmp	r1, #2
    105c:	d005      	beq.n	106a <_sercom_get_default_pad+0x56>
    105e:	2903      	cmp	r1, #3
    1060:	d005      	beq.n	106e <_sercom_get_default_pad+0x5a>
	return 0;
    1062:	2000      	movs	r0, #0
    1064:	e7e4      	b.n	1030 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    1066:	4832      	ldr	r0, [pc, #200]	; (1130 <_sercom_get_default_pad+0x11c>)
    1068:	e7e2      	b.n	1030 <_sercom_get_default_pad+0x1c>
    106a:	4832      	ldr	r0, [pc, #200]	; (1134 <_sercom_get_default_pad+0x120>)
    106c:	e7e0      	b.n	1030 <_sercom_get_default_pad+0x1c>
    106e:	4832      	ldr	r0, [pc, #200]	; (1138 <_sercom_get_default_pad+0x124>)
    1070:	e7de      	b.n	1030 <_sercom_get_default_pad+0x1c>
    1072:	4832      	ldr	r0, [pc, #200]	; (113c <_sercom_get_default_pad+0x128>)
    1074:	e7dc      	b.n	1030 <_sercom_get_default_pad+0x1c>
    1076:	4832      	ldr	r0, [pc, #200]	; (1140 <_sercom_get_default_pad+0x12c>)
    1078:	e7da      	b.n	1030 <_sercom_get_default_pad+0x1c>
    107a:	4832      	ldr	r0, [pc, #200]	; (1144 <_sercom_get_default_pad+0x130>)
    107c:	e7d8      	b.n	1030 <_sercom_get_default_pad+0x1c>
    107e:	2901      	cmp	r1, #1
    1080:	d007      	beq.n	1092 <_sercom_get_default_pad+0x7e>
    1082:	2900      	cmp	r1, #0
    1084:	d03f      	beq.n	1106 <_sercom_get_default_pad+0xf2>
    1086:	2902      	cmp	r1, #2
    1088:	d005      	beq.n	1096 <_sercom_get_default_pad+0x82>
    108a:	2903      	cmp	r1, #3
    108c:	d005      	beq.n	109a <_sercom_get_default_pad+0x86>
	return 0;
    108e:	2000      	movs	r0, #0
    1090:	e7ce      	b.n	1030 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    1092:	482d      	ldr	r0, [pc, #180]	; (1148 <_sercom_get_default_pad+0x134>)
    1094:	e7cc      	b.n	1030 <_sercom_get_default_pad+0x1c>
    1096:	482d      	ldr	r0, [pc, #180]	; (114c <_sercom_get_default_pad+0x138>)
    1098:	e7ca      	b.n	1030 <_sercom_get_default_pad+0x1c>
    109a:	482d      	ldr	r0, [pc, #180]	; (1150 <_sercom_get_default_pad+0x13c>)
    109c:	e7c8      	b.n	1030 <_sercom_get_default_pad+0x1c>
    109e:	2901      	cmp	r1, #1
    10a0:	d007      	beq.n	10b2 <_sercom_get_default_pad+0x9e>
    10a2:	2900      	cmp	r1, #0
    10a4:	d031      	beq.n	110a <_sercom_get_default_pad+0xf6>
    10a6:	2902      	cmp	r1, #2
    10a8:	d005      	beq.n	10b6 <_sercom_get_default_pad+0xa2>
    10aa:	2903      	cmp	r1, #3
    10ac:	d005      	beq.n	10ba <_sercom_get_default_pad+0xa6>
	return 0;
    10ae:	2000      	movs	r0, #0
    10b0:	e7be      	b.n	1030 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    10b2:	4828      	ldr	r0, [pc, #160]	; (1154 <_sercom_get_default_pad+0x140>)
    10b4:	e7bc      	b.n	1030 <_sercom_get_default_pad+0x1c>
    10b6:	4828      	ldr	r0, [pc, #160]	; (1158 <_sercom_get_default_pad+0x144>)
    10b8:	e7ba      	b.n	1030 <_sercom_get_default_pad+0x1c>
    10ba:	4828      	ldr	r0, [pc, #160]	; (115c <_sercom_get_default_pad+0x148>)
    10bc:	e7b8      	b.n	1030 <_sercom_get_default_pad+0x1c>
    10be:	2901      	cmp	r1, #1
    10c0:	d007      	beq.n	10d2 <_sercom_get_default_pad+0xbe>
    10c2:	2900      	cmp	r1, #0
    10c4:	d023      	beq.n	110e <_sercom_get_default_pad+0xfa>
    10c6:	2902      	cmp	r1, #2
    10c8:	d005      	beq.n	10d6 <_sercom_get_default_pad+0xc2>
    10ca:	2903      	cmp	r1, #3
    10cc:	d005      	beq.n	10da <_sercom_get_default_pad+0xc6>
	return 0;
    10ce:	2000      	movs	r0, #0
    10d0:	e7ae      	b.n	1030 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    10d2:	4823      	ldr	r0, [pc, #140]	; (1160 <_sercom_get_default_pad+0x14c>)
    10d4:	e7ac      	b.n	1030 <_sercom_get_default_pad+0x1c>
    10d6:	4823      	ldr	r0, [pc, #140]	; (1164 <_sercom_get_default_pad+0x150>)
    10d8:	e7aa      	b.n	1030 <_sercom_get_default_pad+0x1c>
    10da:	4823      	ldr	r0, [pc, #140]	; (1168 <_sercom_get_default_pad+0x154>)
    10dc:	e7a8      	b.n	1030 <_sercom_get_default_pad+0x1c>
    10de:	2901      	cmp	r1, #1
    10e0:	d007      	beq.n	10f2 <_sercom_get_default_pad+0xde>
    10e2:	2900      	cmp	r1, #0
    10e4:	d015      	beq.n	1112 <_sercom_get_default_pad+0xfe>
    10e6:	2902      	cmp	r1, #2
    10e8:	d005      	beq.n	10f6 <_sercom_get_default_pad+0xe2>
    10ea:	2903      	cmp	r1, #3
    10ec:	d005      	beq.n	10fa <_sercom_get_default_pad+0xe6>
	return 0;
    10ee:	2000      	movs	r0, #0
    10f0:	e79e      	b.n	1030 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    10f2:	481e      	ldr	r0, [pc, #120]	; (116c <_sercom_get_default_pad+0x158>)
    10f4:	e79c      	b.n	1030 <_sercom_get_default_pad+0x1c>
    10f6:	481e      	ldr	r0, [pc, #120]	; (1170 <_sercom_get_default_pad+0x15c>)
    10f8:	e79a      	b.n	1030 <_sercom_get_default_pad+0x1c>
    10fa:	481e      	ldr	r0, [pc, #120]	; (1174 <_sercom_get_default_pad+0x160>)
    10fc:	e798      	b.n	1030 <_sercom_get_default_pad+0x1c>
    10fe:	481e      	ldr	r0, [pc, #120]	; (1178 <_sercom_get_default_pad+0x164>)
    1100:	e796      	b.n	1030 <_sercom_get_default_pad+0x1c>
    1102:	2003      	movs	r0, #3
    1104:	e794      	b.n	1030 <_sercom_get_default_pad+0x1c>
    1106:	481d      	ldr	r0, [pc, #116]	; (117c <_sercom_get_default_pad+0x168>)
    1108:	e792      	b.n	1030 <_sercom_get_default_pad+0x1c>
    110a:	481d      	ldr	r0, [pc, #116]	; (1180 <_sercom_get_default_pad+0x16c>)
    110c:	e790      	b.n	1030 <_sercom_get_default_pad+0x1c>
    110e:	481d      	ldr	r0, [pc, #116]	; (1184 <_sercom_get_default_pad+0x170>)
    1110:	e78e      	b.n	1030 <_sercom_get_default_pad+0x1c>
    1112:	481d      	ldr	r0, [pc, #116]	; (1188 <_sercom_get_default_pad+0x174>)
    1114:	e78c      	b.n	1030 <_sercom_get_default_pad+0x1c>
    1116:	46c0      	nop			; (mov r8, r8)
    1118:	42001000 	.word	0x42001000
    111c:	42001800 	.word	0x42001800
    1120:	42001c00 	.word	0x42001c00
    1124:	42001400 	.word	0x42001400
    1128:	42000800 	.word	0x42000800
    112c:	42000c00 	.word	0x42000c00
    1130:	00050003 	.word	0x00050003
    1134:	00060003 	.word	0x00060003
    1138:	00070003 	.word	0x00070003
    113c:	00010003 	.word	0x00010003
    1140:	001e0003 	.word	0x001e0003
    1144:	001f0003 	.word	0x001f0003
    1148:	00090003 	.word	0x00090003
    114c:	000a0003 	.word	0x000a0003
    1150:	000b0003 	.word	0x000b0003
    1154:	00110003 	.word	0x00110003
    1158:	00120003 	.word	0x00120003
    115c:	00130003 	.word	0x00130003
    1160:	000d0003 	.word	0x000d0003
    1164:	000e0003 	.word	0x000e0003
    1168:	000f0003 	.word	0x000f0003
    116c:	00170003 	.word	0x00170003
    1170:	00180003 	.word	0x00180003
    1174:	00190003 	.word	0x00190003
    1178:	00040003 	.word	0x00040003
    117c:	00080003 	.word	0x00080003
    1180:	00100003 	.word	0x00100003
    1184:	000c0003 	.word	0x000c0003
    1188:	00160003 	.word	0x00160003

0000118c <_sercom_get_sercom_inst_index>:
 *
 * \return Index of given instance.
 */
uint8_t _sercom_get_sercom_inst_index(
		Sercom *const sercom_instance)
{
    118c:	b530      	push	{r4, r5, lr}
    118e:	b087      	sub	sp, #28
	/* Save all available SERCOM instances for compare */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;
    1190:	4b0b      	ldr	r3, [pc, #44]	; (11c0 <_sercom_get_sercom_inst_index+0x34>)
    1192:	466a      	mov	r2, sp
    1194:	cb32      	ldmia	r3!, {r1, r4, r5}
    1196:	c232      	stmia	r2!, {r1, r4, r5}
    1198:	cb32      	ldmia	r3!, {r1, r4, r5}
    119a:	c232      	stmia	r2!, {r1, r4, r5}

	/* Find index for sercom instance */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
		if ((uintptr_t)sercom_instance == (uintptr_t)sercom_instances[i]) {
    119c:	9b00      	ldr	r3, [sp, #0]
    119e:	4283      	cmp	r3, r0
    11a0:	d00b      	beq.n	11ba <_sercom_get_sercom_inst_index+0x2e>
    11a2:	2301      	movs	r3, #1
    11a4:	009a      	lsls	r2, r3, #2
    11a6:	4669      	mov	r1, sp
    11a8:	5852      	ldr	r2, [r2, r1]
    11aa:	4282      	cmp	r2, r0
    11ac:	d006      	beq.n	11bc <_sercom_get_sercom_inst_index+0x30>
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    11ae:	3301      	adds	r3, #1
    11b0:	2b06      	cmp	r3, #6
    11b2:	d1f7      	bne.n	11a4 <_sercom_get_sercom_inst_index+0x18>
		}
	}

	/* Invalid data given */
	Assert(false);
	return 0;
    11b4:	2000      	movs	r0, #0
}
    11b6:	b007      	add	sp, #28
    11b8:	bd30      	pop	{r4, r5, pc}
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    11ba:	2300      	movs	r3, #0
			return i;
    11bc:	b2d8      	uxtb	r0, r3
    11be:	e7fa      	b.n	11b6 <_sercom_get_sercom_inst_index+0x2a>
    11c0:	00004c28 	.word	0x00004c28

000011c4 <spi_reset>:
 *
 * \param[in,out] module Pointer to the software instance struct
 */
void spi_reset(
		struct spi_module *const module)
{
    11c4:	b570      	push	{r4, r5, r6, lr}
    11c6:	0005      	movs	r5, r0
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    11c8:	6804      	ldr	r4, [r0, #0]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

#  if SPI_CALLBACK_MODE == true
	system_interrupt_disable(_sercom_get_interrupt_vector(module->hw));
    11ca:	0020      	movs	r0, r4
    11cc:	4b0e      	ldr	r3, [pc, #56]	; (1208 <spi_reset+0x44>)
    11ce:	4798      	blx	r3
 * \param[in] vector  Interrupt vector to disable
 */
static inline void system_interrupt_disable(
		const enum system_interrupt_vector vector)
{
	NVIC->ICER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    11d0:	231f      	movs	r3, #31
    11d2:	4018      	ands	r0, r3
    11d4:	3b1e      	subs	r3, #30
    11d6:	4083      	lsls	r3, r0
    11d8:	2280      	movs	r2, #128	; 0x80
    11da:	490c      	ldr	r1, [pc, #48]	; (120c <spi_reset+0x48>)
    11dc:	508b      	str	r3, [r1, r2]
	SercomSpi *const spi_module = &(module->hw->SPI);
    11de:	682a      	ldr	r2, [r5, #0]
	return (spi_module->SYNCBUSY.reg);
    11e0:	69d3      	ldr	r3, [r2, #28]
#  endif

	while (spi_is_syncing(module)) {
    11e2:	2b00      	cmp	r3, #0
    11e4:	d1fc      	bne.n	11e0 <spi_reset+0x1c>
		/* Wait until the synchronization is complete */
	}

	/* Disbale interrupt */
	spi_module->INTENCLR.reg = SERCOM_SPI_INTENCLR_MASK;
    11e6:	338f      	adds	r3, #143	; 0x8f
    11e8:	7523      	strb	r3, [r4, #20]
	/* Clear interrupt flag */
	spi_module->INTFLAG.reg = SERCOM_SPI_INTFLAG_MASK;
    11ea:	7623      	strb	r3, [r4, #24]

	/* Disable SPI */
	spi_module->CTRLA.reg &= ~SERCOM_SPI_CTRLA_ENABLE;
    11ec:	6823      	ldr	r3, [r4, #0]
    11ee:	2202      	movs	r2, #2
    11f0:	4393      	bics	r3, r2
    11f2:	6023      	str	r3, [r4, #0]
	SercomSpi *const spi_module = &(module->hw->SPI);
    11f4:	682a      	ldr	r2, [r5, #0]
	return (spi_module->SYNCBUSY.reg);
    11f6:	69d3      	ldr	r3, [r2, #28]

	/* Disable the module */
	spi_disable(module);

	while (spi_is_syncing(module)) {
    11f8:	2b00      	cmp	r3, #0
    11fa:	d1fc      	bne.n	11f6 <spi_reset+0x32>
		/* Wait until the synchronization is complete */
	}

	/* Software reset the module */
	spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_SWRST;
    11fc:	6823      	ldr	r3, [r4, #0]
    11fe:	2201      	movs	r2, #1
    1200:	4313      	orrs	r3, r2
    1202:	6023      	str	r3, [r4, #0]
}
    1204:	bd70      	pop	{r4, r5, r6, pc}
    1206:	46c0      	nop			; (mov r8, r8)
    1208:	0000215d 	.word	0x0000215d
    120c:	e000e100 	.word	0xe000e100

00001210 <spi_init>:
 */
enum status_code spi_init(
		struct spi_module *const module,
		Sercom *const hw,
		const struct spi_config *const config)
{
    1210:	b5f0      	push	{r4, r5, r6, r7, lr}
    1212:	b08b      	sub	sp, #44	; 0x2c
    1214:	0005      	movs	r5, r0
    1216:	000c      	movs	r4, r1
    1218:	0016      	movs	r6, r2
	Assert(module);
	Assert(hw);
	Assert(config);

	/* Initialize device instance */
	module->hw = hw;
    121a:	6029      	str	r1, [r5, #0]

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if module is enabled. */
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_ENABLE) {
    121c:	680b      	ldr	r3, [r1, #0]
#  if SPI_CALLBACK_MODE == false
		/* Check if config is valid */
		return _spi_check_config(module, config);
#  else
		return STATUS_ERR_DENIED;
    121e:	201c      	movs	r0, #28
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_ENABLE) {
    1220:	079b      	lsls	r3, r3, #30
    1222:	d501      	bpl.n	1228 <spi_init+0x18>
	_sercom_instances[instance_index] = module;
#endif

	/* Write configuration to module and return status code */
	return _spi_set_config(module, config);
}
    1224:	b00b      	add	sp, #44	; 0x2c
    1226:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_SWRST){
    1228:	680b      	ldr	r3, [r1, #0]
		return STATUS_BUSY;
    122a:	3817      	subs	r0, #23
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_SWRST){
    122c:	07db      	lsls	r3, r3, #31
    122e:	d4f9      	bmi.n	1224 <spi_init+0x14>
	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    1230:	0008      	movs	r0, r1
    1232:	4b6f      	ldr	r3, [pc, #444]	; (13f0 <spi_init+0x1e0>)
    1234:	4798      	blx	r3
    1236:	4a6f      	ldr	r2, [pc, #444]	; (13f4 <spi_init+0x1e4>)
    1238:	6a11      	ldr	r1, [r2, #32]
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
    123a:	1c87      	adds	r7, r0, #2
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
    123c:	2301      	movs	r3, #1
    123e:	40bb      	lsls	r3, r7
    1240:	430b      	orrs	r3, r1
    1242:	6213      	str	r3, [r2, #32]
	gclk_chan_conf.source_generator = config->generator_source;
    1244:	a909      	add	r1, sp, #36	; 0x24
    1246:	2724      	movs	r7, #36	; 0x24
    1248:	5df3      	ldrb	r3, [r6, r7]
    124a:	700b      	strb	r3, [r1, #0]
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    124c:	3014      	adds	r0, #20
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
    124e:	b2c3      	uxtb	r3, r0
    1250:	9301      	str	r3, [sp, #4]
    1252:	0018      	movs	r0, r3
    1254:	4b68      	ldr	r3, [pc, #416]	; (13f8 <spi_init+0x1e8>)
    1256:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
    1258:	9801      	ldr	r0, [sp, #4]
    125a:	4b68      	ldr	r3, [pc, #416]	; (13fc <spi_init+0x1ec>)
    125c:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
    125e:	5df0      	ldrb	r0, [r6, r7]
    1260:	2100      	movs	r1, #0
    1262:	4b67      	ldr	r3, [pc, #412]	; (1400 <spi_init+0x1f0>)
    1264:	4798      	blx	r3
	if (config->mode == SPI_MODE_MASTER) {
    1266:	7833      	ldrb	r3, [r6, #0]
    1268:	2b01      	cmp	r3, #1
    126a:	d03f      	beq.n	12ec <spi_init+0xdc>
	if (config->mode == SPI_MODE_SLAVE) {
    126c:	7833      	ldrb	r3, [r6, #0]
    126e:	2b00      	cmp	r3, #0
    1270:	d103      	bne.n	127a <spi_init+0x6a>
		spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_MODE(0x2);
    1272:	6823      	ldr	r3, [r4, #0]
    1274:	2208      	movs	r2, #8
    1276:	4313      	orrs	r3, r2
    1278:	6023      	str	r3, [r4, #0]
    127a:	002b      	movs	r3, r5
    127c:	330c      	adds	r3, #12
    127e:	0029      	movs	r1, r5
    1280:	3128      	adds	r1, #40	; 0x28
		module->callback[i]        = NULL;
    1282:	2200      	movs	r2, #0
    1284:	c304      	stmia	r3!, {r2}
	for (i = 0; i < SPI_CALLBACK_N; i++) {
    1286:	428b      	cmp	r3, r1
    1288:	d1fc      	bne.n	1284 <spi_init+0x74>
	module->tx_buffer_ptr              = NULL;
    128a:	2300      	movs	r3, #0
    128c:	62eb      	str	r3, [r5, #44]	; 0x2c
	module->rx_buffer_ptr              = NULL;
    128e:	62ab      	str	r3, [r5, #40]	; 0x28
	module->remaining_tx_buffer_length = 0x0000;
    1290:	2400      	movs	r4, #0
    1292:	86ab      	strh	r3, [r5, #52]	; 0x34
	module->remaining_rx_buffer_length = 0x0000;
    1294:	862b      	strh	r3, [r5, #48]	; 0x30
	module->registered_callback        = 0x00;
    1296:	3336      	adds	r3, #54	; 0x36
    1298:	54ec      	strb	r4, [r5, r3]
	module->enabled_callback           = 0x00;
    129a:	3301      	adds	r3, #1
    129c:	54ec      	strb	r4, [r5, r3]
	module->status                     = STATUS_OK;
    129e:	3301      	adds	r3, #1
    12a0:	54ec      	strb	r4, [r5, r3]
	module->dir                        = SPI_DIRECTION_IDLE;
    12a2:	3b35      	subs	r3, #53	; 0x35
    12a4:	726b      	strb	r3, [r5, #9]
	module->locked                     = false;
    12a6:	712c      	strb	r4, [r5, #4]
	instance_index = _sercom_get_sercom_inst_index(module->hw);
    12a8:	6828      	ldr	r0, [r5, #0]
    12aa:	4b51      	ldr	r3, [pc, #324]	; (13f0 <spi_init+0x1e0>)
    12ac:	4798      	blx	r3
    12ae:	0007      	movs	r7, r0
	_sercom_set_handler(instance_index, _spi_interrupt_handler);
    12b0:	4954      	ldr	r1, [pc, #336]	; (1404 <spi_init+0x1f4>)
    12b2:	4b55      	ldr	r3, [pc, #340]	; (1408 <spi_init+0x1f8>)
    12b4:	4798      	blx	r3
	_sercom_instances[instance_index] = module;
    12b6:	00bf      	lsls	r7, r7, #2
    12b8:	4b54      	ldr	r3, [pc, #336]	; (140c <spi_init+0x1fc>)
    12ba:	50fd      	str	r5, [r7, r3]
	SercomSpi *const spi_module = &(module->hw->SPI);
    12bc:	682f      	ldr	r7, [r5, #0]
	config->mux_position = SYSTEM_PINMUX_GPIO;
    12be:	ab04      	add	r3, sp, #16
    12c0:	2280      	movs	r2, #128	; 0x80
    12c2:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    12c4:	705c      	strb	r4, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    12c6:	3a7f      	subs	r2, #127	; 0x7f
    12c8:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
    12ca:	70dc      	strb	r4, [r3, #3]
	if(config->mode == SPI_MODE_SLAVE) {
    12cc:	7833      	ldrb	r3, [r6, #0]
    12ce:	2b00      	cmp	r3, #0
    12d0:	d102      	bne.n	12d8 <spi_init+0xc8>
		pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
    12d2:	2200      	movs	r2, #0
    12d4:	ab04      	add	r3, sp, #16
    12d6:	709a      	strb	r2, [r3, #2]
	uint32_t pad_pinmuxes[] = {
    12d8:	6ab3      	ldr	r3, [r6, #40]	; 0x28
    12da:	9305      	str	r3, [sp, #20]
    12dc:	6af3      	ldr	r3, [r6, #44]	; 0x2c
    12de:	9306      	str	r3, [sp, #24]
    12e0:	6b33      	ldr	r3, [r6, #48]	; 0x30
    12e2:	9307      	str	r3, [sp, #28]
    12e4:	6b73      	ldr	r3, [r6, #52]	; 0x34
    12e6:	9308      	str	r3, [sp, #32]
    12e8:	2400      	movs	r4, #0
    12ea:	e00b      	b.n	1304 <spi_init+0xf4>
		spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_MODE(0x3);
    12ec:	6823      	ldr	r3, [r4, #0]
    12ee:	220c      	movs	r2, #12
    12f0:	4313      	orrs	r3, r2
    12f2:	6023      	str	r3, [r4, #0]
    12f4:	e7ba      	b.n	126c <spi_init+0x5c>
			current_pinmux = _sercom_get_default_pad(hw, pad);
    12f6:	0038      	movs	r0, r7
    12f8:	4b45      	ldr	r3, [pc, #276]	; (1410 <spi_init+0x200>)
    12fa:	4798      	blx	r3
    12fc:	e00a      	b.n	1314 <spi_init+0x104>
    12fe:	3401      	adds	r4, #1
	for (uint8_t pad = 0; pad < 4; pad++) {
    1300:	2c04      	cmp	r4, #4
    1302:	d010      	beq.n	1326 <spi_init+0x116>
    1304:	b2e1      	uxtb	r1, r4
		uint32_t current_pinmux = pad_pinmuxes[pad];
    1306:	00a3      	lsls	r3, r4, #2
    1308:	aa02      	add	r2, sp, #8
    130a:	200c      	movs	r0, #12
    130c:	1812      	adds	r2, r2, r0
    130e:	58d0      	ldr	r0, [r2, r3]
		if (current_pinmux == PINMUX_DEFAULT) {
    1310:	2800      	cmp	r0, #0
    1312:	d0f0      	beq.n	12f6 <spi_init+0xe6>
		if (current_pinmux != PINMUX_UNUSED) {
    1314:	1c43      	adds	r3, r0, #1
    1316:	d0f2      	beq.n	12fe <spi_init+0xee>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
    1318:	a904      	add	r1, sp, #16
    131a:	7008      	strb	r0, [r1, #0]
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
    131c:	0c00      	lsrs	r0, r0, #16
    131e:	b2c0      	uxtb	r0, r0
    1320:	4b3c      	ldr	r3, [pc, #240]	; (1414 <spi_init+0x204>)
    1322:	4798      	blx	r3
    1324:	e7eb      	b.n	12fe <spi_init+0xee>
	module->mode             = config->mode;
    1326:	7833      	ldrb	r3, [r6, #0]
    1328:	716b      	strb	r3, [r5, #5]
	module->character_size   = config->character_size;
    132a:	7c33      	ldrb	r3, [r6, #16]
    132c:	71ab      	strb	r3, [r5, #6]
	module->receiver_enabled = config->receiver_enable;
    132e:	7cb3      	ldrb	r3, [r6, #18]
    1330:	71eb      	strb	r3, [r5, #7]
	module->master_slave_select_enable = config->master_slave_select_enable;
    1332:	7d33      	ldrb	r3, [r6, #20]
    1334:	722b      	strb	r3, [r5, #8]
	uint16_t baud = 0;
    1336:	2200      	movs	r2, #0
    1338:	ab02      	add	r3, sp, #8
    133a:	80da      	strh	r2, [r3, #6]
	if (config->mode == SPI_MODE_MASTER) {
    133c:	7833      	ldrb	r3, [r6, #0]
    133e:	2b01      	cmp	r3, #1
    1340:	d012      	beq.n	1368 <spi_init+0x158>
	if (config->mode == SPI_MODE_SLAVE) {
    1342:	7833      	ldrb	r3, [r6, #0]
    1344:	2b00      	cmp	r3, #0
    1346:	d126      	bne.n	1396 <spi_init+0x186>
		ctrla = config->mode_specific.slave.frame_format;
    1348:	69b0      	ldr	r0, [r6, #24]
		ctrlb = config->mode_specific.slave.address_mode;
    134a:	8bb2      	ldrh	r2, [r6, #28]
		spi_module->ADDR.reg |=
    134c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
				(config->mode_specific.slave.address_mask << SERCOM_SPI_ADDR_ADDRMASK_Pos);
    134e:	7ff1      	ldrb	r1, [r6, #31]
    1350:	0409      	lsls	r1, r1, #16
				(config->mode_specific.slave.address      << SERCOM_SPI_ADDR_ADDR_Pos) |
    1352:	7fb4      	ldrb	r4, [r6, #30]
    1354:	4321      	orrs	r1, r4
		spi_module->ADDR.reg |=
    1356:	4319      	orrs	r1, r3
    1358:	6279      	str	r1, [r7, #36]	; 0x24
		if (config->mode_specific.slave.preload_enable) {
    135a:	2320      	movs	r3, #32
    135c:	5cf3      	ldrb	r3, [r6, r3]
    135e:	2b00      	cmp	r3, #0
    1360:	d01b      	beq.n	139a <spi_init+0x18a>
			ctrlb |= SERCOM_SPI_CTRLB_PLOADEN;
    1362:	2340      	movs	r3, #64	; 0x40
    1364:	431a      	orrs	r2, r3
    1366:	e018      	b.n	139a <spi_init+0x18a>
		uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    1368:	6828      	ldr	r0, [r5, #0]
    136a:	4b21      	ldr	r3, [pc, #132]	; (13f0 <spi_init+0x1e0>)
    136c:	4798      	blx	r3
		uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    136e:	3014      	adds	r0, #20
		uint32_t internal_clock = system_gclk_chan_get_hz(gclk_index);
    1370:	b2c0      	uxtb	r0, r0
    1372:	4b29      	ldr	r3, [pc, #164]	; (1418 <spi_init+0x208>)
    1374:	4798      	blx	r3
    1376:	0001      	movs	r1, r0
		enum status_code error_code = _sercom_get_sync_baud_val(
    1378:	ab02      	add	r3, sp, #8
    137a:	1d9a      	adds	r2, r3, #6
    137c:	69b0      	ldr	r0, [r6, #24]
    137e:	4b27      	ldr	r3, [pc, #156]	; (141c <spi_init+0x20c>)
    1380:	4798      	blx	r3
    1382:	0003      	movs	r3, r0
			return STATUS_ERR_INVALID_ARG;
    1384:	2017      	movs	r0, #23
		if (error_code != STATUS_OK) {
    1386:	2b00      	cmp	r3, #0
    1388:	d000      	beq.n	138c <spi_init+0x17c>
    138a:	e74b      	b.n	1224 <spi_init+0x14>
		spi_module->BAUD.reg = (uint8_t)baud;
    138c:	ab02      	add	r3, sp, #8
    138e:	3306      	adds	r3, #6
    1390:	781b      	ldrb	r3, [r3, #0]
    1392:	733b      	strb	r3, [r7, #12]
    1394:	e7d5      	b.n	1342 <spi_init+0x132>
	uint32_t ctrlb = 0;
    1396:	2200      	movs	r2, #0
	uint32_t ctrla = 0;
    1398:	2000      	movs	r0, #0
	ctrla |= config->mux_setting;
    139a:	6873      	ldr	r3, [r6, #4]
    139c:	68b1      	ldr	r1, [r6, #8]
    139e:	430b      	orrs	r3, r1
    13a0:	68f1      	ldr	r1, [r6, #12]
    13a2:	430b      	orrs	r3, r1
    13a4:	4303      	orrs	r3, r0
	ctrlb |= config->character_size;
    13a6:	7c31      	ldrb	r1, [r6, #16]
    13a8:	430a      	orrs	r2, r1
	if (config->run_in_standby || system_is_debugger_present()) {
    13aa:	7c71      	ldrb	r1, [r6, #17]
    13ac:	2900      	cmp	r1, #0
    13ae:	d103      	bne.n	13b8 <spi_init+0x1a8>
    13b0:	491b      	ldr	r1, [pc, #108]	; (1420 <spi_init+0x210>)
    13b2:	7889      	ldrb	r1, [r1, #2]
    13b4:	0789      	lsls	r1, r1, #30
    13b6:	d501      	bpl.n	13bc <spi_init+0x1ac>
		ctrla |= SERCOM_SPI_CTRLA_RUNSTDBY;
    13b8:	2180      	movs	r1, #128	; 0x80
    13ba:	430b      	orrs	r3, r1
	if (config->receiver_enable) {
    13bc:	7cb1      	ldrb	r1, [r6, #18]
    13be:	2900      	cmp	r1, #0
    13c0:	d002      	beq.n	13c8 <spi_init+0x1b8>
		ctrlb |= SERCOM_SPI_CTRLB_RXEN;
    13c2:	2180      	movs	r1, #128	; 0x80
    13c4:	0289      	lsls	r1, r1, #10
    13c6:	430a      	orrs	r2, r1
	if (config->select_slave_low_detect_enable) {
    13c8:	7cf1      	ldrb	r1, [r6, #19]
    13ca:	2900      	cmp	r1, #0
    13cc:	d002      	beq.n	13d4 <spi_init+0x1c4>
		ctrlb |= SERCOM_SPI_CTRLB_SSDE;
    13ce:	2180      	movs	r1, #128	; 0x80
    13d0:	0089      	lsls	r1, r1, #2
    13d2:	430a      	orrs	r2, r1
	if (config->master_slave_select_enable) {
    13d4:	7d31      	ldrb	r1, [r6, #20]
    13d6:	2900      	cmp	r1, #0
    13d8:	d002      	beq.n	13e0 <spi_init+0x1d0>
		ctrlb |= SERCOM_SPI_CTRLB_MSSEN;
    13da:	2180      	movs	r1, #128	; 0x80
    13dc:	0189      	lsls	r1, r1, #6
    13de:	430a      	orrs	r2, r1
	spi_module->CTRLA.reg |= ctrla;
    13e0:	6839      	ldr	r1, [r7, #0]
    13e2:	430b      	orrs	r3, r1
    13e4:	603b      	str	r3, [r7, #0]
	spi_module->CTRLB.reg |= ctrlb;
    13e6:	687b      	ldr	r3, [r7, #4]
    13e8:	431a      	orrs	r2, r3
    13ea:	607a      	str	r2, [r7, #4]
	return STATUS_OK;
    13ec:	2000      	movs	r0, #0
    13ee:	e719      	b.n	1224 <spi_init+0x14>
    13f0:	0000118d 	.word	0x0000118d
    13f4:	40000400 	.word	0x40000400
    13f8:	00002901 	.word	0x00002901
    13fc:	00002875 	.word	0x00002875
    1400:	00000fc9 	.word	0x00000fc9
    1404:	00001845 	.word	0x00001845
    1408:	00002121 	.word	0x00002121
    140c:	20000068 	.word	0x20000068
    1410:	00001015 	.word	0x00001015
    1414:	000029f9 	.word	0x000029f9
    1418:	0000291d 	.word	0x0000291d
    141c:	00000f0b 	.word	0x00000f0b
    1420:	41002000 	.word	0x41002000

00001424 <spi_read_buffer_wait>:
enum status_code spi_read_buffer_wait(
		struct spi_module *const module,
		uint8_t *rx_data,
		uint16_t length,
		uint16_t dummy)
{
    1424:	b5f0      	push	{r4, r5, r6, r7, lr}
    1426:	46d6      	mov	lr, sl
    1428:	464f      	mov	r7, r9
    142a:	b580      	push	{r7, lr}
    142c:	b083      	sub	sp, #12
    142e:	468c      	mov	ip, r1
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

#  if SPI_CALLBACK_MODE == true
	if (module->status == STATUS_BUSY) {
    1430:	2538      	movs	r5, #56	; 0x38
    1432:	5d46      	ldrb	r6, [r0, r5]
		/* Check if the SPI module is busy with a job */
		return STATUS_BUSY;
    1434:	3d33      	subs	r5, #51	; 0x33
	if (module->status == STATUS_BUSY) {
    1436:	2e05      	cmp	r6, #5
    1438:	d075      	beq.n	1526 <spi_read_buffer_wait+0x102>
	}
#  endif

	/* Sanity check arguments */
	if (length == 0) {
		return STATUS_ERR_INVALID_ARG;
    143a:	3512      	adds	r5, #18
	if (length == 0) {
    143c:	2a00      	cmp	r2, #0
    143e:	d072      	beq.n	1526 <spi_read_buffer_wait+0x102>
	}

	if (!(module->receiver_enabled)) {
    1440:	79c4      	ldrb	r4, [r0, #7]
		return STATUS_ERR_DENIED;
    1442:	3505      	adds	r5, #5
	if (!(module->receiver_enabled)) {
    1444:	2c00      	cmp	r4, #0
    1446:	d06e      	beq.n	1526 <spi_read_buffer_wait+0x102>
	}
#  if CONF_SPI_SLAVE_ENABLE == true
	if ((module->mode == SPI_MODE_SLAVE) && (spi_is_write_complete(module))) {
    1448:	7944      	ldrb	r4, [r0, #5]
    144a:	2c00      	cmp	r4, #0
    144c:	d103      	bne.n	1456 <spi_read_buffer_wait+0x32>
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    144e:	6804      	ldr	r4, [r0, #0]

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    1450:	7e25      	ldrb	r5, [r4, #24]
    1452:	07a9      	lsls	r1, r5, #30
    1454:	d40a      	bmi.n	146c <spi_read_buffer_wait+0x48>
		_spi_clear_tx_complete_flag(module);
	}
#  endif
	uint16_t rx_pos = 0;

	while (length--) {
    1456:	3a01      	subs	r2, #1
    1458:	b294      	uxth	r4, r2
    145a:	2600      	movs	r6, #0

#  if CONF_SPI_SLAVE_ENABLE == true
		/* Start timeout period for slave */
		if (module->mode == SPI_MODE_SLAVE) {
			for (uint32_t i = 0; i <= SPI_TIMEOUT; i++) {
				if (spi_is_ready_to_read(module)) {
    145c:	2204      	movs	r2, #4
					break;
				}
			}
			/* Check if master has ended the transaction */
			if (spi_is_write_complete(module)) {
    145e:	2102      	movs	r1, #2
    1460:	4689      	mov	r9, r1
			while (!spi_is_ready_to_write(module)) {
    1462:	2701      	movs	r7, #1
		/* Data register has not been copied to the shift register, return */
		return STATUS_BUSY;
	}

	/* Write the character to the DATA register */
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    1464:	05db      	lsls	r3, r3, #23
    1466:	0ddb      	lsrs	r3, r3, #23
    1468:	469a      	mov	sl, r3
    146a:	e037      	b.n	14dc <spi_read_buffer_wait+0xb8>
	spi_module->INTFLAG.reg = SPI_INTERRUPT_FLAG_TX_COMPLETE;
    146c:	2502      	movs	r5, #2
    146e:	7625      	strb	r5, [r4, #24]
    1470:	e7f1      	b.n	1456 <spi_read_buffer_wait+0x32>
	SercomSpi *const spi_module = &(module->hw->SPI);
    1472:	6801      	ldr	r1, [r0, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    1474:	7e0b      	ldrb	r3, [r1, #24]
			while (!spi_is_ready_to_write(module)) {
    1476:	423b      	tst	r3, r7
    1478:	d0fc      	beq.n	1474 <spi_read_buffer_wait+0x50>
    147a:	7e0b      	ldrb	r3, [r1, #24]
	if (!spi_is_ready_to_write(module)) {
    147c:	423b      	tst	r3, r7
    147e:	d009      	beq.n	1494 <spi_read_buffer_wait+0x70>
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    1480:	4653      	mov	r3, sl
    1482:	628b      	str	r3, [r1, #40]	; 0x28
    1484:	e02d      	b.n	14e2 <spi_read_buffer_wait+0xbe>
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    1486:	7e0b      	ldrb	r3, [r1, #24]
			if (spi_is_write_complete(module)) {
    1488:	464d      	mov	r5, r9
    148a:	422b      	tst	r3, r5
    148c:	d138      	bne.n	1500 <spi_read_buffer_wait+0xdc>
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    148e:	7e0b      	ldrb	r3, [r1, #24]
				_spi_clear_tx_complete_flag(module);
				return STATUS_ABORTED;
			}

			if (!spi_is_ready_to_read(module)) {
    1490:	4213      	tst	r3, r2
    1492:	d045      	beq.n	1520 <spi_read_buffer_wait+0xfc>
	SercomSpi *const spi_module = &(module->hw->SPI);
    1494:	6801      	ldr	r1, [r0, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    1496:	7e0b      	ldrb	r3, [r1, #24]
			}
		}
#  endif

		/* Wait until the module is ready to read a character */
		while (!spi_is_ready_to_read(module)) {
    1498:	4213      	tst	r3, r2
    149a:	d0fc      	beq.n	1496 <spi_read_buffer_wait+0x72>
    149c:	7e0b      	ldrb	r3, [r1, #24]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if data is ready to be read */
	if (!spi_is_ready_to_read(module)) {
    149e:	4213      	tst	r3, r2
    14a0:	d040      	beq.n	1524 <spi_read_buffer_wait+0x100>

	/* Return value */
	enum status_code retval = STATUS_OK;

	/* Check if data is overflown */
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    14a2:	8b4b      	ldrh	r3, [r1, #26]
	enum status_code retval = STATUS_OK;
    14a4:	2500      	movs	r5, #0
    14a6:	9501      	str	r5, [sp, #4]
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    14a8:	4213      	tst	r3, r2
    14aa:	d002      	beq.n	14b2 <spi_read_buffer_wait+0x8e>
		retval = STATUS_ERR_OVERFLOW;
		/* Clear overflow flag */
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    14ac:	834a      	strh	r2, [r1, #26]
		retval = STATUS_ERR_OVERFLOW;
    14ae:	231e      	movs	r3, #30
    14b0:	9301      	str	r3, [sp, #4]
	}

	/* Read the character from the DATA register */
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    14b2:	7983      	ldrb	r3, [r0, #6]
    14b4:	2b01      	cmp	r3, #1
    14b6:	d027      	beq.n	1508 <spi_read_buffer_wait+0xe4>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
	} else {
		*rx_data = (uint8_t)spi_module->DATA.reg;
    14b8:	6a8b      	ldr	r3, [r1, #40]	; 0x28
    14ba:	b2db      	uxtb	r3, r3
		}

		uint16_t received_data = 0;
		enum status_code retval = spi_read(module, &received_data);

		if (retval != STATUS_OK) {
    14bc:	9901      	ldr	r1, [sp, #4]
    14be:	2900      	cmp	r1, #0
    14c0:	d137      	bne.n	1532 <spi_read_buffer_wait+0x10e>
			/* Overflow, abort */
			return retval;
		}

		/* Read value will be at least 8-bits long */
		rx_data[rx_pos++] = received_data;
    14c2:	1c75      	adds	r5, r6, #1
    14c4:	b2ad      	uxth	r5, r5
    14c6:	4661      	mov	r1, ip
    14c8:	558b      	strb	r3, [r1, r6]

		/* If 9-bit data, write next received byte to the buffer */
		if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    14ca:	7981      	ldrb	r1, [r0, #6]
    14cc:	2901      	cmp	r1, #1
    14ce:	d01f      	beq.n	1510 <spi_read_buffer_wait+0xec>
		rx_data[rx_pos++] = received_data;
    14d0:	002e      	movs	r6, r5
	while (length--) {
    14d2:	3c01      	subs	r4, #1
    14d4:	b2a4      	uxth	r4, r4
    14d6:	4b18      	ldr	r3, [pc, #96]	; (1538 <spi_read_buffer_wait+0x114>)
    14d8:	429c      	cmp	r4, r3
    14da:	d01f      	beq.n	151c <spi_read_buffer_wait+0xf8>
		if (module->mode == SPI_MODE_MASTER) {
    14dc:	7943      	ldrb	r3, [r0, #5]
    14de:	2b01      	cmp	r3, #1
    14e0:	d0c7      	beq.n	1472 <spi_read_buffer_wait+0x4e>
		if (module->mode == SPI_MODE_SLAVE) {
    14e2:	7943      	ldrb	r3, [r0, #5]
    14e4:	2b00      	cmp	r3, #0
    14e6:	d1d5      	bne.n	1494 <spi_read_buffer_wait+0x70>
	SercomSpi *const spi_module = &(module->hw->SPI);
    14e8:	6801      	ldr	r1, [r0, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    14ea:	7e0b      	ldrb	r3, [r1, #24]
				if (spi_is_ready_to_read(module)) {
    14ec:	4213      	tst	r3, r2
    14ee:	d1ca      	bne.n	1486 <spi_read_buffer_wait+0x62>
    14f0:	4b12      	ldr	r3, [pc, #72]	; (153c <spi_read_buffer_wait+0x118>)
    14f2:	7e0d      	ldrb	r5, [r1, #24]
    14f4:	4215      	tst	r5, r2
    14f6:	d1c6      	bne.n	1486 <spi_read_buffer_wait+0x62>
    14f8:	3b01      	subs	r3, #1
			for (uint32_t i = 0; i <= SPI_TIMEOUT; i++) {
    14fa:	2b00      	cmp	r3, #0
    14fc:	d1f9      	bne.n	14f2 <spi_read_buffer_wait+0xce>
    14fe:	e7c2      	b.n	1486 <spi_read_buffer_wait+0x62>
	spi_module->INTFLAG.reg = SPI_INTERRUPT_FLAG_TX_COMPLETE;
    1500:	2302      	movs	r3, #2
    1502:	760b      	strb	r3, [r1, #24]
				return STATUS_ABORTED;
    1504:	2504      	movs	r5, #4
    1506:	e00e      	b.n	1526 <spi_read_buffer_wait+0x102>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    1508:	6a8b      	ldr	r3, [r1, #40]	; 0x28
    150a:	05db      	lsls	r3, r3, #23
    150c:	0ddb      	lsrs	r3, r3, #23
    150e:	e7d5      	b.n	14bc <spi_read_buffer_wait+0x98>
			rx_data[rx_pos++] = (received_data >> 8);
    1510:	3602      	adds	r6, #2
    1512:	b2b6      	uxth	r6, r6
    1514:	0a1b      	lsrs	r3, r3, #8
    1516:	4661      	mov	r1, ip
    1518:	554b      	strb	r3, [r1, r5]
    151a:	e7da      	b.n	14d2 <spi_read_buffer_wait+0xae>
    151c:	9d01      	ldr	r5, [sp, #4]
    151e:	e002      	b.n	1526 <spi_read_buffer_wait+0x102>
				return STATUS_ERR_TIMEOUT;
    1520:	2512      	movs	r5, #18
    1522:	e000      	b.n	1526 <spi_read_buffer_wait+0x102>
		return STATUS_ERR_IO;
    1524:	2510      	movs	r5, #16
		}
	}

	return STATUS_OK;
}
    1526:	0028      	movs	r0, r5
    1528:	b003      	add	sp, #12
    152a:	bc0c      	pop	{r2, r3}
    152c:	4691      	mov	r9, r2
    152e:	469a      	mov	sl, r3
    1530:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1532:	9d01      	ldr	r5, [sp, #4]
    1534:	e7f7      	b.n	1526 <spi_read_buffer_wait+0x102>
    1536:	46c0      	nop			; (mov r8, r8)
    1538:	0000ffff 	.word	0x0000ffff
    153c:	00002710 	.word	0x00002710

00001540 <spi_select_slave>:
 */
enum status_code spi_select_slave(
		struct spi_module *const module,
		struct spi_slave_inst *const slave,
		const bool select)
{
    1540:	b510      	push	{r4, lr}
	Assert(module);
	Assert(module->hw);
	Assert(slave);

	/* Check that the SPI module is operating in master mode */
	if (module->mode != SPI_MODE_MASTER) {
    1542:	7944      	ldrb	r4, [r0, #5]
		return STATUS_ERR_UNSUPPORTED_DEV;
    1544:	2315      	movs	r3, #21
	if (module->mode != SPI_MODE_MASTER) {
    1546:	2c01      	cmp	r4, #1
    1548:	d001      	beq.n	154e <spi_select_slave+0xe>
			/* Drive Slave Select high */
			port_pin_set_output_level(slave->ss_pin, true);
		}
	}
	return STATUS_OK;
}
    154a:	0018      	movs	r0, r3
    154c:	bd10      	pop	{r4, pc}
	if(!(module->master_slave_select_enable))
    154e:	7a04      	ldrb	r4, [r0, #8]
	return STATUS_OK;
    1550:	2300      	movs	r3, #0
	if(!(module->master_slave_select_enable))
    1552:	2c00      	cmp	r4, #0
    1554:	d1f9      	bne.n	154a <spi_select_slave+0xa>
		if (select) {
    1556:	2a00      	cmp	r2, #0
    1558:	d058      	beq.n	160c <spi_select_slave+0xcc>
			if (slave->address_enabled) {
    155a:	784b      	ldrb	r3, [r1, #1]
    155c:	2b00      	cmp	r3, #0
    155e:	d044      	beq.n	15ea <spi_select_slave+0xaa>
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    1560:	6803      	ldr	r3, [r0, #0]
    1562:	7e1b      	ldrb	r3, [r3, #24]
				if (!spi_is_ready_to_write(module)) {
    1564:	07db      	lsls	r3, r3, #31
    1566:	d410      	bmi.n	158a <spi_select_slave+0x4a>
					port_pin_set_output_level(slave->ss_pin, true);
    1568:	780a      	ldrb	r2, [r1, #0]
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
    156a:	09d1      	lsrs	r1, r2, #7
		return &(ports[port_index]->Group[group_index]);
	} else {
		Assert(false);
		return NULL;
    156c:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    156e:	2900      	cmp	r1, #0
    1570:	d104      	bne.n	157c <spi_select_slave+0x3c>
		return &(ports[port_index]->Group[group_index]);
    1572:	0953      	lsrs	r3, r2, #5
    1574:	01db      	lsls	r3, r3, #7
    1576:	492e      	ldr	r1, [pc, #184]	; (1630 <spi_select_slave+0xf0>)
    1578:	468c      	mov	ip, r1
    157a:	4463      	add	r3, ip
static inline void port_pin_set_output_level(
		const uint8_t gpio_pin,
		const bool level)
{
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    157c:	211f      	movs	r1, #31
    157e:	4011      	ands	r1, r2
    1580:	2201      	movs	r2, #1
    1582:	408a      	lsls	r2, r1

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
    1584:	619a      	str	r2, [r3, #24]
					return STATUS_BUSY;
    1586:	2305      	movs	r3, #5
    1588:	e7df      	b.n	154a <spi_select_slave+0xa>
				port_pin_set_output_level(slave->ss_pin, false);
    158a:	780a      	ldrb	r2, [r1, #0]
	if (port_index < PORT_INST_NUM) {
    158c:	09d4      	lsrs	r4, r2, #7
		return NULL;
    158e:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    1590:	2c00      	cmp	r4, #0
    1592:	d104      	bne.n	159e <spi_select_slave+0x5e>
		return &(ports[port_index]->Group[group_index]);
    1594:	0953      	lsrs	r3, r2, #5
    1596:	01db      	lsls	r3, r3, #7
    1598:	4c25      	ldr	r4, [pc, #148]	; (1630 <spi_select_slave+0xf0>)
    159a:	46a4      	mov	ip, r4
    159c:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    159e:	241f      	movs	r4, #31
    15a0:	4014      	ands	r4, r2
    15a2:	2201      	movs	r2, #1
    15a4:	40a2      	lsls	r2, r4
	} else {
		port_base->OUTCLR.reg = pin_mask;
    15a6:	615a      	str	r2, [r3, #20]
	SercomSpi *const spi_module = &(module->hw->SPI);
    15a8:	6803      	ldr	r3, [r0, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    15aa:	7e1a      	ldrb	r2, [r3, #24]
	if (!spi_is_ready_to_write(module)) {
    15ac:	07d2      	lsls	r2, r2, #31
    15ae:	d501      	bpl.n	15b4 <spi_select_slave+0x74>
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    15b0:	788a      	ldrb	r2, [r1, #2]
    15b2:	629a      	str	r2, [r3, #40]	; 0x28
				if (!(module->receiver_enabled)) {
    15b4:	79c2      	ldrb	r2, [r0, #7]
	return STATUS_OK;
    15b6:	2300      	movs	r3, #0
				if (!(module->receiver_enabled)) {
    15b8:	2a00      	cmp	r2, #0
    15ba:	d1c6      	bne.n	154a <spi_select_slave+0xa>
	SercomSpi *const spi_module = &(module->hw->SPI);
    15bc:	6802      	ldr	r2, [r0, #0]
					while (!spi_is_ready_to_read(module)) {
    15be:	2104      	movs	r1, #4
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    15c0:	7e13      	ldrb	r3, [r2, #24]
    15c2:	420b      	tst	r3, r1
    15c4:	d0fc      	beq.n	15c0 <spi_select_slave+0x80>
    15c6:	7e11      	ldrb	r1, [r2, #24]
	return STATUS_OK;
    15c8:	2300      	movs	r3, #0
	if (!spi_is_ready_to_read(module)) {
    15ca:	0749      	lsls	r1, r1, #29
    15cc:	d5bd      	bpl.n	154a <spi_select_slave+0xa>
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    15ce:	8b53      	ldrh	r3, [r2, #26]
    15d0:	075b      	lsls	r3, r3, #29
    15d2:	d501      	bpl.n	15d8 <spi_select_slave+0x98>
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    15d4:	2304      	movs	r3, #4
    15d6:	8353      	strh	r3, [r2, #26]
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    15d8:	7983      	ldrb	r3, [r0, #6]
    15da:	2b01      	cmp	r3, #1
    15dc:	d002      	beq.n	15e4 <spi_select_slave+0xa4>
		*rx_data = (uint8_t)spi_module->DATA.reg;
    15de:	6a93      	ldr	r3, [r2, #40]	; 0x28
    15e0:	2300      	movs	r3, #0
    15e2:	e7b2      	b.n	154a <spi_select_slave+0xa>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    15e4:	6a93      	ldr	r3, [r2, #40]	; 0x28
    15e6:	2300      	movs	r3, #0
    15e8:	e7af      	b.n	154a <spi_select_slave+0xa>
				port_pin_set_output_level(slave->ss_pin, false);
    15ea:	780a      	ldrb	r2, [r1, #0]
	if (port_index < PORT_INST_NUM) {
    15ec:	09d1      	lsrs	r1, r2, #7
		return NULL;
    15ee:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    15f0:	2900      	cmp	r1, #0
    15f2:	d104      	bne.n	15fe <spi_select_slave+0xbe>
		return &(ports[port_index]->Group[group_index]);
    15f4:	0953      	lsrs	r3, r2, #5
    15f6:	01db      	lsls	r3, r3, #7
    15f8:	490d      	ldr	r1, [pc, #52]	; (1630 <spi_select_slave+0xf0>)
    15fa:	468c      	mov	ip, r1
    15fc:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    15fe:	211f      	movs	r1, #31
    1600:	4011      	ands	r1, r2
    1602:	2201      	movs	r2, #1
    1604:	408a      	lsls	r2, r1
		port_base->OUTCLR.reg = pin_mask;
    1606:	615a      	str	r2, [r3, #20]
	return STATUS_OK;
    1608:	2300      	movs	r3, #0
    160a:	e79e      	b.n	154a <spi_select_slave+0xa>
			port_pin_set_output_level(slave->ss_pin, true);
    160c:	780a      	ldrb	r2, [r1, #0]
	if (port_index < PORT_INST_NUM) {
    160e:	09d1      	lsrs	r1, r2, #7
		return NULL;
    1610:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    1612:	2900      	cmp	r1, #0
    1614:	d104      	bne.n	1620 <spi_select_slave+0xe0>
		return &(ports[port_index]->Group[group_index]);
    1616:	0953      	lsrs	r3, r2, #5
    1618:	01db      	lsls	r3, r3, #7
    161a:	4905      	ldr	r1, [pc, #20]	; (1630 <spi_select_slave+0xf0>)
    161c:	468c      	mov	ip, r1
    161e:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    1620:	211f      	movs	r1, #31
    1622:	4011      	ands	r1, r2
    1624:	2201      	movs	r2, #1
    1626:	408a      	lsls	r2, r1
		port_base->OUTSET.reg = pin_mask;
    1628:	619a      	str	r2, [r3, #24]
	return STATUS_OK;
    162a:	2300      	movs	r3, #0
    162c:	e78d      	b.n	154a <spi_select_slave+0xa>
    162e:	46c0      	nop			; (mov r8, r8)
    1630:	41004400 	.word	0x41004400

00001634 <spi_write_buffer_wait>:
 */
enum status_code spi_write_buffer_wait(
		struct spi_module *const module,
		const uint8_t *tx_data,
		uint16_t length)
{
    1634:	b5f0      	push	{r4, r5, r6, r7, lr}
    1636:	46de      	mov	lr, fp
    1638:	4657      	mov	r7, sl
    163a:	464e      	mov	r6, r9
    163c:	4645      	mov	r5, r8
    163e:	b5e0      	push	{r5, r6, r7, lr}
    1640:	b083      	sub	sp, #12
	/* Sanity check arguments */
	Assert(module);

#  if SPI_CALLBACK_MODE == true
	if (module->status == STATUS_BUSY) {
    1642:	2338      	movs	r3, #56	; 0x38
    1644:	5cc4      	ldrb	r4, [r0, r3]
		/* Check if the SPI module is busy with a job */
		return STATUS_BUSY;
    1646:	3b33      	subs	r3, #51	; 0x33
	if (module->status == STATUS_BUSY) {
    1648:	2c05      	cmp	r4, #5
    164a:	d002      	beq.n	1652 <spi_write_buffer_wait+0x1e>
	}
#  endif

	if (length == 0) {
		return STATUS_ERR_INVALID_ARG;
    164c:	3312      	adds	r3, #18
	if (length == 0) {
    164e:	2a00      	cmp	r2, #0
    1650:	d107      	bne.n	1662 <spi_write_buffer_wait+0x2e>
			}
		}
	}
#  endif
	return STATUS_OK;
}
    1652:	0018      	movs	r0, r3
    1654:	b003      	add	sp, #12
    1656:	bc3c      	pop	{r2, r3, r4, r5}
    1658:	4690      	mov	r8, r2
    165a:	4699      	mov	r9, r3
    165c:	46a2      	mov	sl, r4
    165e:	46ab      	mov	fp, r5
    1660:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if ((module->mode == SPI_MODE_SLAVE) && (spi_is_write_complete(module))) {
    1662:	7943      	ldrb	r3, [r0, #5]
    1664:	2b00      	cmp	r3, #0
    1666:	d103      	bne.n	1670 <spi_write_buffer_wait+0x3c>
	SercomSpi *const spi_module = &(module->hw->SPI);
    1668:	6803      	ldr	r3, [r0, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    166a:	7e1c      	ldrb	r4, [r3, #24]
    166c:	07a4      	lsls	r4, r4, #30
    166e:	d40a      	bmi.n	1686 <spi_write_buffer_wait+0x52>
						data_to_send = tx_data[tx_pos++];
    1670:	4693      	mov	fp, r2
    1672:	2400      	movs	r4, #0
				if (spi_is_ready_to_write(module)) {
    1674:	2301      	movs	r3, #1
			if (spi_is_write_complete(module)) {
    1676:	2502      	movs	r5, #2
    1678:	46ac      	mov	ip, r5
					if (spi_is_ready_to_read(module)) {
    167a:	3502      	adds	r5, #2
    167c:	46a8      	mov	r8, r5
    167e:	3a01      	subs	r2, #1
    1680:	b292      	uxth	r2, r2
    1682:	468a      	mov	sl, r1
    1684:	e023      	b.n	16ce <spi_write_buffer_wait+0x9a>
	spi_module->INTFLAG.reg = SPI_INTERRUPT_FLAG_TX_COMPLETE;
    1686:	2402      	movs	r4, #2
    1688:	761c      	strb	r4, [r3, #24]
    168a:	e7f1      	b.n	1670 <spi_write_buffer_wait+0x3c>
    168c:	7e35      	ldrb	r5, [r6, #24]
			if (spi_is_write_complete(module)) {
    168e:	4661      	mov	r1, ip
    1690:	420d      	tst	r5, r1
    1692:	d12e      	bne.n	16f2 <spi_write_buffer_wait+0xbe>
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    1694:	7e35      	ldrb	r5, [r6, #24]
			if (!spi_is_ready_to_write(module)) {
    1696:	421d      	tst	r5, r3
    1698:	d100      	bne.n	169c <spi_write_buffer_wait+0x68>
    169a:	e0c2      	b.n	1822 <spi_write_buffer_wait+0x1ee>
	SercomSpi *const spi_module = &(module->hw->SPI);
    169c:	6806      	ldr	r6, [r0, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    169e:	7e35      	ldrb	r5, [r6, #24]
		while (!spi_is_ready_to_write(module)) {
    16a0:	421d      	tst	r5, r3
    16a2:	d0fc      	beq.n	169e <spi_write_buffer_wait+0x6a>
		uint16_t data_to_send = tx_data[tx_pos++];
    16a4:	1c67      	adds	r7, r4, #1
    16a6:	b2bf      	uxth	r7, r7
    16a8:	4651      	mov	r1, sl
    16aa:	5d0d      	ldrb	r5, [r1, r4]
		if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    16ac:	7981      	ldrb	r1, [r0, #6]
    16ae:	2901      	cmp	r1, #1
    16b0:	d023      	beq.n	16fa <spi_write_buffer_wait+0xc6>
		uint16_t data_to_send = tx_data[tx_pos++];
    16b2:	b2ad      	uxth	r5, r5
    16b4:	003c      	movs	r4, r7
    16b6:	7e37      	ldrb	r7, [r6, #24]
	if (!spi_is_ready_to_write(module)) {
    16b8:	421f      	tst	r7, r3
    16ba:	d002      	beq.n	16c2 <spi_write_buffer_wait+0x8e>
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    16bc:	05ed      	lsls	r5, r5, #23
    16be:	0ded      	lsrs	r5, r5, #23
    16c0:	62b5      	str	r5, [r6, #40]	; 0x28
    16c2:	1e55      	subs	r5, r2, #1
    16c4:	b2ad      	uxth	r5, r5
		if (module->receiver_enabled) {
    16c6:	79c6      	ldrb	r6, [r0, #7]
    16c8:	2e00      	cmp	r6, #0
    16ca:	d11d      	bne.n	1708 <spi_write_buffer_wait+0xd4>
    16cc:	002a      	movs	r2, r5
	while (length--) {
    16ce:	4d5a      	ldr	r5, [pc, #360]	; (1838 <spi_write_buffer_wait+0x204>)
    16d0:	42aa      	cmp	r2, r5
    16d2:	d070      	beq.n	17b6 <spi_write_buffer_wait+0x182>
		if (module->mode == SPI_MODE_SLAVE) {
    16d4:	7945      	ldrb	r5, [r0, #5]
    16d6:	2d00      	cmp	r5, #0
    16d8:	d1e0      	bne.n	169c <spi_write_buffer_wait+0x68>
	SercomSpi *const spi_module = &(module->hw->SPI);
    16da:	6806      	ldr	r6, [r0, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    16dc:	7e35      	ldrb	r5, [r6, #24]
				if (spi_is_ready_to_write(module)) {
    16de:	421d      	tst	r5, r3
    16e0:	d1d4      	bne.n	168c <spi_write_buffer_wait+0x58>
    16e2:	4d56      	ldr	r5, [pc, #344]	; (183c <spi_write_buffer_wait+0x208>)
    16e4:	7e37      	ldrb	r7, [r6, #24]
    16e6:	421f      	tst	r7, r3
    16e8:	d1d0      	bne.n	168c <spi_write_buffer_wait+0x58>
    16ea:	3d01      	subs	r5, #1
			for (uint32_t i = 0; i <= SPI_TIMEOUT; i++) {
    16ec:	2d00      	cmp	r5, #0
    16ee:	d1f9      	bne.n	16e4 <spi_write_buffer_wait+0xb0>
    16f0:	e7cc      	b.n	168c <spi_write_buffer_wait+0x58>
	spi_module->INTFLAG.reg = SPI_INTERRUPT_FLAG_TX_COMPLETE;
    16f2:	2302      	movs	r3, #2
    16f4:	7633      	strb	r3, [r6, #24]
				return STATUS_ABORTED;
    16f6:	3302      	adds	r3, #2
    16f8:	e7ab      	b.n	1652 <spi_write_buffer_wait+0x1e>
			data_to_send |= (tx_data[tx_pos++] << 8);
    16fa:	3402      	adds	r4, #2
    16fc:	b2a4      	uxth	r4, r4
    16fe:	4651      	mov	r1, sl
    1700:	5dcf      	ldrb	r7, [r1, r7]
    1702:	023f      	lsls	r7, r7, #8
    1704:	433d      	orrs	r5, r7
    1706:	e7d6      	b.n	16b6 <spi_write_buffer_wait+0x82>
    1708:	4651      	mov	r1, sl
			if (module->mode == SPI_MODE_SLAVE) {
    170a:	7945      	ldrb	r5, [r0, #5]
    170c:	2d00      	cmp	r5, #0
    170e:	d137      	bne.n	1780 <spi_write_buffer_wait+0x14c>
    1710:	4d4b      	ldr	r5, [pc, #300]	; (1840 <spi_write_buffer_wait+0x20c>)
    1712:	9101      	str	r1, [sp, #4]
    1714:	e012      	b.n	173c <spi_write_buffer_wait+0x108>
							data_to_send |= (tx_data[tx_pos++] << 8);
    1716:	3402      	adds	r4, #2
    1718:	b2a4      	uxth	r4, r4
    171a:	4649      	mov	r1, r9
    171c:	9f01      	ldr	r7, [sp, #4]
    171e:	5c79      	ldrb	r1, [r7, r1]
    1720:	0209      	lsls	r1, r1, #8
    1722:	9f00      	ldr	r7, [sp, #0]
    1724:	430f      	orrs	r7, r1
    1726:	e01b      	b.n	1760 <spi_write_buffer_wait+0x12c>
						length--;
    1728:	3a01      	subs	r2, #1
    172a:	b292      	uxth	r2, r2
	SercomSpi *const spi_module = &(module->hw->SPI);
    172c:	6806      	ldr	r6, [r0, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    172e:	7e37      	ldrb	r7, [r6, #24]
					if (spi_is_ready_to_read(module)) {
    1730:	4641      	mov	r1, r8
    1732:	420f      	tst	r7, r1
    1734:	d11b      	bne.n	176e <spi_write_buffer_wait+0x13a>
    1736:	3d01      	subs	r5, #1
				for (uint32_t i = 0; i <= SPI_TIMEOUT; i++) {
    1738:	2d00      	cmp	r5, #0
    173a:	d018      	beq.n	176e <spi_write_buffer_wait+0x13a>
					if (length && spi_is_ready_to_write(module)) {
    173c:	2a00      	cmp	r2, #0
    173e:	d0f5      	beq.n	172c <spi_write_buffer_wait+0xf8>
	SercomSpi *const spi_module = &(module->hw->SPI);
    1740:	6806      	ldr	r6, [r0, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    1742:	7e37      	ldrb	r7, [r6, #24]
    1744:	421f      	tst	r7, r3
    1746:	d0f1      	beq.n	172c <spi_write_buffer_wait+0xf8>
						data_to_send = tx_data[tx_pos++];
    1748:	1c67      	adds	r7, r4, #1
    174a:	b2b9      	uxth	r1, r7
    174c:	4689      	mov	r9, r1
    174e:	9901      	ldr	r1, [sp, #4]
    1750:	5d09      	ldrb	r1, [r1, r4]
    1752:	9100      	str	r1, [sp, #0]
						if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    1754:	7981      	ldrb	r1, [r0, #6]
    1756:	2901      	cmp	r1, #1
    1758:	d0dd      	beq.n	1716 <spi_write_buffer_wait+0xe2>
						data_to_send = tx_data[tx_pos++];
    175a:	4669      	mov	r1, sp
    175c:	880f      	ldrh	r7, [r1, #0]
    175e:	464c      	mov	r4, r9
    1760:	7e31      	ldrb	r1, [r6, #24]
	if (!spi_is_ready_to_write(module)) {
    1762:	4219      	tst	r1, r3
    1764:	d0e0      	beq.n	1728 <spi_write_buffer_wait+0xf4>
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    1766:	05ff      	lsls	r7, r7, #23
    1768:	0dff      	lsrs	r7, r7, #23
    176a:	62b7      	str	r7, [r6, #40]	; 0x28
    176c:	e7dc      	b.n	1728 <spi_write_buffer_wait+0xf4>
    176e:	9901      	ldr	r1, [sp, #4]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    1770:	7e35      	ldrb	r5, [r6, #24]
				if (spi_is_write_complete(module)) {
    1772:	4667      	mov	r7, ip
    1774:	423d      	tst	r5, r7
    1776:	d118      	bne.n	17aa <spi_write_buffer_wait+0x176>
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    1778:	7e35      	ldrb	r5, [r6, #24]
				if (!spi_is_ready_to_read(module)) {
    177a:	4646      	mov	r6, r8
    177c:	4235      	tst	r5, r6
    177e:	d052      	beq.n	1826 <spi_write_buffer_wait+0x1f2>
	SercomSpi *const spi_module = &(module->hw->SPI);
    1780:	6806      	ldr	r6, [r0, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    1782:	7e35      	ldrb	r5, [r6, #24]
			while (!spi_is_ready_to_read(module)) {
    1784:	4647      	mov	r7, r8
    1786:	423d      	tst	r5, r7
    1788:	d0fb      	beq.n	1782 <spi_write_buffer_wait+0x14e>
    178a:	7e35      	ldrb	r5, [r6, #24]
	if (!spi_is_ready_to_read(module)) {
    178c:	423d      	tst	r5, r7
    178e:	d007      	beq.n	17a0 <spi_write_buffer_wait+0x16c>
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    1790:	8b75      	ldrh	r5, [r6, #26]
    1792:	423d      	tst	r5, r7
    1794:	d000      	beq.n	1798 <spi_write_buffer_wait+0x164>
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    1796:	8377      	strh	r7, [r6, #26]
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    1798:	7985      	ldrb	r5, [r0, #6]
    179a:	2d01      	cmp	r5, #1
    179c:	d009      	beq.n	17b2 <spi_write_buffer_wait+0x17e>
		*rx_data = (uint8_t)spi_module->DATA.reg;
    179e:	6ab5      	ldr	r5, [r6, #40]	; 0x28
			flush_length--;
    17a0:	465d      	mov	r5, fp
    17a2:	3d01      	subs	r5, #1
    17a4:	b2ad      	uxth	r5, r5
    17a6:	46ab      	mov	fp, r5
    17a8:	e769      	b.n	167e <spi_write_buffer_wait+0x4a>
	spi_module->INTFLAG.reg = SPI_INTERRUPT_FLAG_TX_COMPLETE;
    17aa:	2302      	movs	r3, #2
    17ac:	7633      	strb	r3, [r6, #24]
					return STATUS_ABORTED;
    17ae:	3302      	adds	r3, #2
    17b0:	e74f      	b.n	1652 <spi_write_buffer_wait+0x1e>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    17b2:	6ab5      	ldr	r5, [r6, #40]	; 0x28
    17b4:	e7f4      	b.n	17a0 <spi_write_buffer_wait+0x16c>
	if (module->mode == SPI_MODE_MASTER) {
    17b6:	7943      	ldrb	r3, [r0, #5]
    17b8:	2b01      	cmp	r3, #1
    17ba:	d00b      	beq.n	17d4 <spi_write_buffer_wait+0x1a0>
	if (module->mode == SPI_MODE_SLAVE) {
    17bc:	2b00      	cmp	r3, #0
    17be:	d134      	bne.n	182a <spi_write_buffer_wait+0x1f6>
		if (module->receiver_enabled) {
    17c0:	79c2      	ldrb	r2, [r0, #7]
    17c2:	2a00      	cmp	r2, #0
    17c4:	d100      	bne.n	17c8 <spi_write_buffer_wait+0x194>
    17c6:	e744      	b.n	1652 <spi_write_buffer_wait+0x1e>
					if (spi_is_ready_to_read(module)) {
    17c8:	2404      	movs	r4, #4
			while (flush_length) {
    17ca:	465b      	mov	r3, fp
    17cc:	465d      	mov	r5, fp
    17ce:	2b00      	cmp	r3, #0
    17d0:	d119      	bne.n	1806 <spi_write_buffer_wait+0x1d2>
    17d2:	e73e      	b.n	1652 <spi_write_buffer_wait+0x1e>
	SercomSpi *const spi_module = &(module->hw->SPI);
    17d4:	6801      	ldr	r1, [r0, #0]
		while (!spi_is_write_complete(module)) {
    17d6:	2202      	movs	r2, #2
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    17d8:	7e0b      	ldrb	r3, [r1, #24]
    17da:	4213      	tst	r3, r2
    17dc:	d0fc      	beq.n	17d8 <spi_write_buffer_wait+0x1a4>
	return STATUS_OK;
    17de:	2300      	movs	r3, #0
    17e0:	e737      	b.n	1652 <spi_write_buffer_wait+0x1e>
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    17e2:	7e0b      	ldrb	r3, [r1, #24]
				if (!spi_is_ready_to_read(module)) {
    17e4:	4223      	tst	r3, r4
    17e6:	d022      	beq.n	182e <spi_write_buffer_wait+0x1fa>
    17e8:	7e0b      	ldrb	r3, [r1, #24]
	if (!spi_is_ready_to_read(module)) {
    17ea:	4223      	tst	r3, r4
    17ec:	d007      	beq.n	17fe <spi_write_buffer_wait+0x1ca>
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    17ee:	8b4b      	ldrh	r3, [r1, #26]
    17f0:	4223      	tst	r3, r4
    17f2:	d000      	beq.n	17f6 <spi_write_buffer_wait+0x1c2>
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    17f4:	834c      	strh	r4, [r1, #26]
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    17f6:	7983      	ldrb	r3, [r0, #6]
    17f8:	2b01      	cmp	r3, #1
    17fa:	d010      	beq.n	181e <spi_write_buffer_wait+0x1ea>
		*rx_data = (uint8_t)spi_module->DATA.reg;
    17fc:	6a8b      	ldr	r3, [r1, #40]	; 0x28
				flush_length--;
    17fe:	3d01      	subs	r5, #1
    1800:	b2ad      	uxth	r5, r5
			while (flush_length) {
    1802:	2d00      	cmp	r5, #0
    1804:	d015      	beq.n	1832 <spi_write_buffer_wait+0x1fe>
	SercomSpi *const spi_module = &(module->hw->SPI);
    1806:	6801      	ldr	r1, [r0, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    1808:	7e0b      	ldrb	r3, [r1, #24]
					if (spi_is_ready_to_read(module)) {
    180a:	4223      	tst	r3, r4
    180c:	d1e9      	bne.n	17e2 <spi_write_buffer_wait+0x1ae>
    180e:	4b0b      	ldr	r3, [pc, #44]	; (183c <spi_write_buffer_wait+0x208>)
    1810:	7e0a      	ldrb	r2, [r1, #24]
    1812:	4222      	tst	r2, r4
    1814:	d1e5      	bne.n	17e2 <spi_write_buffer_wait+0x1ae>
    1816:	3b01      	subs	r3, #1
				for (uint32_t i = 0; i <= SPI_TIMEOUT; i++) {
    1818:	2b00      	cmp	r3, #0
    181a:	d1f9      	bne.n	1810 <spi_write_buffer_wait+0x1dc>
    181c:	e7e1      	b.n	17e2 <spi_write_buffer_wait+0x1ae>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    181e:	6a8b      	ldr	r3, [r1, #40]	; 0x28
    1820:	e7ed      	b.n	17fe <spi_write_buffer_wait+0x1ca>
				return STATUS_ERR_TIMEOUT;
    1822:	2312      	movs	r3, #18
    1824:	e715      	b.n	1652 <spi_write_buffer_wait+0x1e>
					return STATUS_ERR_TIMEOUT;
    1826:	2312      	movs	r3, #18
    1828:	e713      	b.n	1652 <spi_write_buffer_wait+0x1e>
	return STATUS_OK;
    182a:	2300      	movs	r3, #0
    182c:	e711      	b.n	1652 <spi_write_buffer_wait+0x1e>
					return STATUS_ERR_TIMEOUT;
    182e:	2312      	movs	r3, #18
    1830:	e70f      	b.n	1652 <spi_write_buffer_wait+0x1e>
	return STATUS_OK;
    1832:	2300      	movs	r3, #0
    1834:	e70d      	b.n	1652 <spi_write_buffer_wait+0x1e>
    1836:	46c0      	nop			; (mov r8, r8)
    1838:	0000ffff 	.word	0x0000ffff
    183c:	00002710 	.word	0x00002710
    1840:	00002711 	.word	0x00002711

00001844 <_spi_interrupt_handler>:
 * \param[in]  instance  ID of the SERCOM instance calling the interrupt
 *                       handler.
 */
void _spi_interrupt_handler(
		uint8_t instance)
{
    1844:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	/* Get device instance from the look-up table */
	struct spi_module *module
    1846:	0080      	lsls	r0, r0, #2
    1848:	4b85      	ldr	r3, [pc, #532]	; (1a60 <_spi_interrupt_handler+0x21c>)
    184a:	58c4      	ldr	r4, [r0, r3]
		= (struct spi_module *)_sercom_instances[instance];

	/* Pointer to the hardware module instance */
	SercomSpi *const spi_hw = &(module->hw->SPI);
    184c:	6826      	ldr	r6, [r4, #0]

	/* Combine callback registered and enabled masks. */
	uint8_t callback_mask =
			module->enabled_callback & module->registered_callback;
    184e:	2337      	movs	r3, #55	; 0x37
	uint8_t callback_mask =
    1850:	5ce3      	ldrb	r3, [r4, r3]
    1852:	2236      	movs	r2, #54	; 0x36
    1854:	5ca7      	ldrb	r7, [r4, r2]
    1856:	401f      	ands	r7, r3

	/* Read and mask interrupt flag register */
	uint16_t interrupt_status = spi_hw->INTFLAG.reg;
    1858:	7e33      	ldrb	r3, [r6, #24]
	interrupt_status &= spi_hw->INTENSET.reg;
    185a:	7db5      	ldrb	r5, [r6, #22]
    185c:	401d      	ands	r5, r3

	/* Data register empty interrupt */
	if (interrupt_status & SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY) {
    185e:	07eb      	lsls	r3, r5, #31
    1860:	d52e      	bpl.n	18c0 <_spi_interrupt_handler+0x7c>
#  if CONF_SPI_MASTER_ENABLE == true
		if ((module->mode == SPI_MODE_MASTER) &&
    1862:	7963      	ldrb	r3, [r4, #5]
    1864:	2b01      	cmp	r3, #1
    1866:	d025      	beq.n	18b4 <_spi_interrupt_handler+0x70>
#  if CONF_SPI_MASTER_ENABLE == true
		|| ((module->mode == SPI_MODE_MASTER) &&
			(module->dir != SPI_DIRECTION_READ))
#  endif
#  if CONF_SPI_SLAVE_ENABLE == true
		|| ((module->mode == SPI_MODE_SLAVE) &&
    1868:	2b00      	cmp	r3, #0
    186a:	d129      	bne.n	18c0 <_spi_interrupt_handler+0x7c>
			(module->dir != SPI_DIRECTION_READ))
    186c:	7a63      	ldrb	r3, [r4, #9]
		|| ((module->mode == SPI_MODE_SLAVE) &&
    186e:	2b00      	cmp	r3, #0
    1870:	d026      	beq.n	18c0 <_spi_interrupt_handler+0x7c>
	SercomSpi *const spi_hw = &(module->hw->SPI);
    1872:	6821      	ldr	r1, [r4, #0]
	uint16_t data_to_send = *(module->tx_buffer_ptr);
    1874:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
    1876:	7813      	ldrb	r3, [r2, #0]
    1878:	b2db      	uxtb	r3, r3
	(module->tx_buffer_ptr)++;
    187a:	1c50      	adds	r0, r2, #1
    187c:	62e0      	str	r0, [r4, #44]	; 0x2c
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    187e:	79a0      	ldrb	r0, [r4, #6]
    1880:	2801      	cmp	r0, #1
    1882:	d100      	bne.n	1886 <_spi_interrupt_handler+0x42>
    1884:	e069      	b.n	195a <_spi_interrupt_handler+0x116>
	uint16_t data_to_send = *(module->tx_buffer_ptr);
    1886:	b29b      	uxth	r3, r3
	spi_hw->DATA.reg = data_to_send & SERCOM_SPI_DATA_MASK;
    1888:	05db      	lsls	r3, r3, #23
    188a:	0ddb      	lsrs	r3, r3, #23
    188c:	628b      	str	r3, [r1, #40]	; 0x28
	(module->remaining_tx_buffer_length)--;
    188e:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
    1890:	3b01      	subs	r3, #1
    1892:	b29b      	uxth	r3, r3
    1894:	86a3      	strh	r3, [r4, #52]	; 0x34
#  endif
		) {
			/* Write next byte from buffer */
			_spi_write(module);
			if (module->remaining_tx_buffer_length == 0) {
    1896:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
    1898:	b29b      	uxth	r3, r3
    189a:	2b00      	cmp	r3, #0
    189c:	d110      	bne.n	18c0 <_spi_interrupt_handler+0x7c>
				/* Disable the Data Register Empty Interrupt */
				spi_hw->INTENCLR.reg
						= SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY;
    189e:	3301      	adds	r3, #1
    18a0:	7533      	strb	r3, [r6, #20]

				if (module->dir == SPI_DIRECTION_WRITE &&
    18a2:	7a63      	ldrb	r3, [r4, #9]
    18a4:	2b01      	cmp	r3, #1
    18a6:	d10b      	bne.n	18c0 <_spi_interrupt_handler+0x7c>
    18a8:	79e3      	ldrb	r3, [r4, #7]
    18aa:	2b00      	cmp	r3, #0
    18ac:	d108      	bne.n	18c0 <_spi_interrupt_handler+0x7c>
						!(module->receiver_enabled)) {
					/* Enable the Data Register transmit complete Interrupt */
					spi_hw->INTENSET.reg = SPI_INTERRUPT_FLAG_TX_COMPLETE;
    18ae:	3302      	adds	r3, #2
    18b0:	75b3      	strb	r3, [r6, #22]
    18b2:	e005      	b.n	18c0 <_spi_interrupt_handler+0x7c>
			(module->dir == SPI_DIRECTION_READ)) {
    18b4:	7a63      	ldrb	r3, [r4, #9]
		if ((module->mode == SPI_MODE_MASTER) &&
    18b6:	2b00      	cmp	r3, #0
    18b8:	d03e      	beq.n	1938 <_spi_interrupt_handler+0xf4>
			(module->dir != SPI_DIRECTION_READ))
    18ba:	7a63      	ldrb	r3, [r4, #9]
		|| ((module->mode == SPI_MODE_MASTER) &&
    18bc:	2b00      	cmp	r3, #0
    18be:	d1d8      	bne.n	1872 <_spi_interrupt_handler+0x2e>
			}
		}
	}

	/* Receive complete interrupt*/
	if (interrupt_status & SPI_INTERRUPT_FLAG_RX_COMPLETE) {
    18c0:	076b      	lsls	r3, r5, #29
    18c2:	d511      	bpl.n	18e8 <_spi_interrupt_handler+0xa4>
		/* Check for overflow */
		if (spi_hw->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    18c4:	8b73      	ldrh	r3, [r6, #26]
    18c6:	075b      	lsls	r3, r3, #29
    18c8:	d551      	bpl.n	196e <_spi_interrupt_handler+0x12a>
			if (module->dir != SPI_DIRECTION_WRITE) {
    18ca:	7a63      	ldrb	r3, [r4, #9]
    18cc:	2b01      	cmp	r3, #1
    18ce:	d008      	beq.n	18e2 <_spi_interrupt_handler+0x9e>
				/* Store the error code */
				module->status = STATUS_ERR_OVERFLOW;
    18d0:	221e      	movs	r2, #30
    18d2:	2338      	movs	r3, #56	; 0x38
    18d4:	54e2      	strb	r2, [r4, r3]

				/* End transaction */
				module->dir = SPI_DIRECTION_IDLE;
    18d6:	3b35      	subs	r3, #53	; 0x35
    18d8:	7263      	strb	r3, [r4, #9]

				spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_RX_COMPLETE |
    18da:	3302      	adds	r3, #2
    18dc:	7533      	strb	r3, [r6, #20]
						SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY;
				/* Run callback if registered and enabled */
				if (callback_mask & (1 << SPI_CALLBACK_ERROR)) {
    18de:	073b      	lsls	r3, r7, #28
    18e0:	d441      	bmi.n	1966 <_spi_interrupt_handler+0x122>
					(module->callback[SPI_CALLBACK_ERROR])(module);
				}
			}
			/* Flush */
			uint16_t flush = spi_hw->DATA.reg;
    18e2:	6ab3      	ldr	r3, [r6, #40]	; 0x28
			UNUSED(flush);
			/* Clear overflow flag */
			spi_hw->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    18e4:	2304      	movs	r3, #4
    18e6:	8373      	strh	r3, [r6, #26]
			}
		}
	}

	/* Transmit complete */
	if (interrupt_status & SPI_INTERRUPT_FLAG_TX_COMPLETE) {
    18e8:	07ab      	lsls	r3, r5, #30
    18ea:	d515      	bpl.n	1918 <_spi_interrupt_handler+0xd4>
#  if CONF_SPI_SLAVE_ENABLE == true
		if (module->mode == SPI_MODE_SLAVE) {
    18ec:	7963      	ldrb	r3, [r4, #5]
    18ee:	2b00      	cmp	r3, #0
    18f0:	d10e      	bne.n	1910 <_spi_interrupt_handler+0xcc>
			/* Transaction ended by master */

			/* Disable interrupts */
			spi_hw->INTENCLR.reg =
    18f2:	3307      	adds	r3, #7
    18f4:	7533      	strb	r3, [r6, #20]
					SPI_INTERRUPT_FLAG_TX_COMPLETE |
					SPI_INTERRUPT_FLAG_RX_COMPLETE |
					SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY;
			/* Clear interrupt flag */
			spi_hw->INTFLAG.reg = SPI_INTERRUPT_FLAG_TX_COMPLETE;
    18f6:	3b05      	subs	r3, #5
    18f8:	7633      	strb	r3, [r6, #24]


			/* Reset all status information */
			module->dir = SPI_DIRECTION_IDLE;
    18fa:	3301      	adds	r3, #1
    18fc:	7263      	strb	r3, [r4, #9]
			module->remaining_tx_buffer_length = 0;
    18fe:	2300      	movs	r3, #0
    1900:	86a3      	strh	r3, [r4, #52]	; 0x34
			module->remaining_rx_buffer_length = 0;
    1902:	8623      	strh	r3, [r4, #48]	; 0x30
			module->status = STATUS_OK;
    1904:	3338      	adds	r3, #56	; 0x38
    1906:	2200      	movs	r2, #0
    1908:	54e2      	strb	r2, [r4, r3]

			if (callback_mask &
    190a:	06fb      	lsls	r3, r7, #27
    190c:	d500      	bpl.n	1910 <_spi_interrupt_handler+0xcc>
    190e:	e07f      	b.n	1a10 <_spi_interrupt_handler+0x1cc>
			}

		}
#  endif
#  if CONF_SPI_MASTER_ENABLE == true
		if ((module->mode == SPI_MODE_MASTER) &&
    1910:	7963      	ldrb	r3, [r4, #5]
    1912:	2b01      	cmp	r3, #1
    1914:	d100      	bne.n	1918 <_spi_interrupt_handler+0xd4>
    1916:	e07f      	b.n	1a18 <_spi_interrupt_handler+0x1d4>
	}

#  ifdef FEATURE_SPI_SLAVE_SELECT_LOW_DETECT
#  if CONF_SPI_SLAVE_ENABLE == true
		/* When a high to low transition is detected on the _SS pin in slave mode */
		if (interrupt_status & SPI_INTERRUPT_FLAG_SLAVE_SELECT_LOW) {
    1918:	072b      	lsls	r3, r5, #28
    191a:	d508      	bpl.n	192e <_spi_interrupt_handler+0xea>
			if (module->mode == SPI_MODE_SLAVE) {
    191c:	7963      	ldrb	r3, [r4, #5]
    191e:	2b00      	cmp	r3, #0
    1920:	d105      	bne.n	192e <_spi_interrupt_handler+0xea>
				/* Disable interrupts */
				spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_SLAVE_SELECT_LOW;
    1922:	3308      	adds	r3, #8
    1924:	7533      	strb	r3, [r6, #20]
				/* Clear interrupt flag */
				spi_hw->INTFLAG.reg = SPI_INTERRUPT_FLAG_SLAVE_SELECT_LOW;
    1926:	7633      	strb	r3, [r6, #24]

				if (callback_mask & (1 << SPI_CALLBACK_SLAVE_SELECT_LOW)) {
    1928:	06bb      	lsls	r3, r7, #26
    192a:	d500      	bpl.n	192e <_spi_interrupt_handler+0xea>
    192c:	e08a      	b.n	1a44 <_spi_interrupt_handler+0x200>
#  endif
#  endif

#  ifdef FEATURE_SPI_ERROR_INTERRUPT
	/* When combined error happen */
	if (interrupt_status & SPI_INTERRUPT_FLAG_COMBINED_ERROR) {
    192e:	b26d      	sxtb	r5, r5
    1930:	2d00      	cmp	r5, #0
    1932:	da00      	bge.n	1936 <_spi_interrupt_handler+0xf2>
    1934:	e08a      	b.n	1a4c <_spi_interrupt_handler+0x208>
		if (callback_mask & (1 << SPI_CALLBACK_COMBINED_ERROR)) {
			(module->callback[SPI_CALLBACK_COMBINED_ERROR])(module);
		}
	}
#  endif
}
    1936:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	spi_hw->DATA.reg = dummy_write;
    1938:	4b4a      	ldr	r3, [pc, #296]	; (1a64 <_spi_interrupt_handler+0x220>)
    193a:	881b      	ldrh	r3, [r3, #0]
    193c:	62b3      	str	r3, [r6, #40]	; 0x28
	module->remaining_dummy_buffer_length--;
    193e:	8e63      	ldrh	r3, [r4, #50]	; 0x32
    1940:	3b01      	subs	r3, #1
    1942:	b29b      	uxth	r3, r3
    1944:	8663      	strh	r3, [r4, #50]	; 0x32
			if (module->remaining_dummy_buffer_length == 0) {
    1946:	8e63      	ldrh	r3, [r4, #50]	; 0x32
    1948:	b29b      	uxth	r3, r3
    194a:	2b00      	cmp	r3, #0
    194c:	d101      	bne.n	1952 <_spi_interrupt_handler+0x10e>
						= SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY;
    194e:	3301      	adds	r3, #1
    1950:	7533      	strb	r3, [r6, #20]
		|| ((module->mode == SPI_MODE_MASTER) &&
    1952:	7963      	ldrb	r3, [r4, #5]
		if (0
    1954:	2b01      	cmp	r3, #1
    1956:	d0b0      	beq.n	18ba <_spi_interrupt_handler+0x76>
    1958:	e786      	b.n	1868 <_spi_interrupt_handler+0x24>
		data_to_send |= ((*(module->tx_buffer_ptr)) << 8);
    195a:	7850      	ldrb	r0, [r2, #1]
    195c:	0200      	lsls	r0, r0, #8
    195e:	4303      	orrs	r3, r0
		(module->tx_buffer_ptr)++;
    1960:	3202      	adds	r2, #2
    1962:	62e2      	str	r2, [r4, #44]	; 0x2c
    1964:	e790      	b.n	1888 <_spi_interrupt_handler+0x44>
					(module->callback[SPI_CALLBACK_ERROR])(module);
    1966:	0020      	movs	r0, r4
    1968:	69a3      	ldr	r3, [r4, #24]
    196a:	4798      	blx	r3
    196c:	e7b9      	b.n	18e2 <_spi_interrupt_handler+0x9e>
			if (module->dir == SPI_DIRECTION_WRITE) {
    196e:	7a63      	ldrb	r3, [r4, #9]
    1970:	2b01      	cmp	r3, #1
    1972:	d027      	beq.n	19c4 <_spi_interrupt_handler+0x180>
	SercomSpi *const spi_hw = &(module->hw->SPI);
    1974:	6823      	ldr	r3, [r4, #0]
	uint16_t received_data = (spi_hw->DATA.reg & SERCOM_SPI_DATA_MASK);
    1976:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    1978:	05db      	lsls	r3, r3, #23
    197a:	0ddb      	lsrs	r3, r3, #23
	*(module->rx_buffer_ptr) = received_data;
    197c:	b2da      	uxtb	r2, r3
    197e:	6aa1      	ldr	r1, [r4, #40]	; 0x28
    1980:	700a      	strb	r2, [r1, #0]
	module->rx_buffer_ptr += 1;
    1982:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    1984:	1c51      	adds	r1, r2, #1
    1986:	62a1      	str	r1, [r4, #40]	; 0x28
	if(module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    1988:	79a1      	ldrb	r1, [r4, #6]
    198a:	2901      	cmp	r1, #1
    198c:	d033      	beq.n	19f6 <_spi_interrupt_handler+0x1b2>
	module->remaining_rx_buffer_length--;
    198e:	8e23      	ldrh	r3, [r4, #48]	; 0x30
    1990:	3b01      	subs	r3, #1
    1992:	b29b      	uxth	r3, r3
    1994:	8623      	strh	r3, [r4, #48]	; 0x30
				if (module->remaining_rx_buffer_length == 0) {
    1996:	8e23      	ldrh	r3, [r4, #48]	; 0x30
    1998:	b29b      	uxth	r3, r3
    199a:	2b00      	cmp	r3, #0
    199c:	d1a4      	bne.n	18e8 <_spi_interrupt_handler+0xa4>
					module->status = STATUS_OK;
    199e:	2200      	movs	r2, #0
    19a0:	3338      	adds	r3, #56	; 0x38
    19a2:	54e2      	strb	r2, [r4, r3]
					spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_RX_COMPLETE;
    19a4:	3b34      	subs	r3, #52	; 0x34
    19a6:	7533      	strb	r3, [r6, #20]
					if(module->dir == SPI_DIRECTION_BOTH) {
    19a8:	7a63      	ldrb	r3, [r4, #9]
    19aa:	2b02      	cmp	r3, #2
    19ac:	d029      	beq.n	1a02 <_spi_interrupt_handler+0x1be>
					} else if (module->dir == SPI_DIRECTION_READ) {
    19ae:	7a63      	ldrb	r3, [r4, #9]
    19b0:	2b00      	cmp	r3, #0
    19b2:	d000      	beq.n	19b6 <_spi_interrupt_handler+0x172>
    19b4:	e798      	b.n	18e8 <_spi_interrupt_handler+0xa4>
						if (callback_mask & (1 << SPI_CALLBACK_BUFFER_RECEIVED)) {
    19b6:	07bb      	lsls	r3, r7, #30
    19b8:	d400      	bmi.n	19bc <_spi_interrupt_handler+0x178>
    19ba:	e795      	b.n	18e8 <_spi_interrupt_handler+0xa4>
							(module->callback[SPI_CALLBACK_BUFFER_RECEIVED])(module);
    19bc:	0020      	movs	r0, r4
    19be:	6923      	ldr	r3, [r4, #16]
    19c0:	4798      	blx	r3
    19c2:	e791      	b.n	18e8 <_spi_interrupt_handler+0xa4>
	SercomSpi *const spi_hw = &(module->hw->SPI);
    19c4:	6823      	ldr	r3, [r4, #0]
	flush = spi_hw->DATA.reg;
    19c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
	module->remaining_dummy_buffer_length--;
    19c8:	8e63      	ldrh	r3, [r4, #50]	; 0x32
    19ca:	3b01      	subs	r3, #1
    19cc:	b29b      	uxth	r3, r3
    19ce:	8663      	strh	r3, [r4, #50]	; 0x32
				if (module->remaining_dummy_buffer_length == 0) {
    19d0:	8e63      	ldrh	r3, [r4, #50]	; 0x32
    19d2:	b29b      	uxth	r3, r3
    19d4:	2b00      	cmp	r3, #0
    19d6:	d000      	beq.n	19da <_spi_interrupt_handler+0x196>
    19d8:	e786      	b.n	18e8 <_spi_interrupt_handler+0xa4>
					spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_RX_COMPLETE;
    19da:	3304      	adds	r3, #4
    19dc:	7533      	strb	r3, [r6, #20]
					module->status = STATUS_OK;
    19de:	2200      	movs	r2, #0
    19e0:	3334      	adds	r3, #52	; 0x34
    19e2:	54e2      	strb	r2, [r4, r3]
					module->dir = SPI_DIRECTION_IDLE;
    19e4:	3b35      	subs	r3, #53	; 0x35
    19e6:	7263      	strb	r3, [r4, #9]
					if (callback_mask &
    19e8:	07fb      	lsls	r3, r7, #31
    19ea:	d400      	bmi.n	19ee <_spi_interrupt_handler+0x1aa>
    19ec:	e77c      	b.n	18e8 <_spi_interrupt_handler+0xa4>
						(module->callback[SPI_CALLBACK_BUFFER_TRANSMITTED])(module);
    19ee:	0020      	movs	r0, r4
    19f0:	68e3      	ldr	r3, [r4, #12]
    19f2:	4798      	blx	r3
    19f4:	e778      	b.n	18e8 <_spi_interrupt_handler+0xa4>
		*(module->rx_buffer_ptr) = (received_data >> 8);
    19f6:	0a1b      	lsrs	r3, r3, #8
    19f8:	7053      	strb	r3, [r2, #1]
		module->rx_buffer_ptr += 1;
    19fa:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    19fc:	3301      	adds	r3, #1
    19fe:	62a3      	str	r3, [r4, #40]	; 0x28
    1a00:	e7c5      	b.n	198e <_spi_interrupt_handler+0x14a>
						if (callback_mask & (1 << SPI_CALLBACK_BUFFER_TRANSCEIVED)) {
    1a02:	077b      	lsls	r3, r7, #29
    1a04:	d400      	bmi.n	1a08 <_spi_interrupt_handler+0x1c4>
    1a06:	e76f      	b.n	18e8 <_spi_interrupt_handler+0xa4>
							(module->callback[SPI_CALLBACK_BUFFER_TRANSCEIVED])(module);
    1a08:	0020      	movs	r0, r4
    1a0a:	6963      	ldr	r3, [r4, #20]
    1a0c:	4798      	blx	r3
    1a0e:	e76b      	b.n	18e8 <_spi_interrupt_handler+0xa4>
			(module->callback[SPI_CALLBACK_SLAVE_TRANSMISSION_COMPLETE])
    1a10:	0020      	movs	r0, r4
    1a12:	69e3      	ldr	r3, [r4, #28]
    1a14:	4798      	blx	r3
    1a16:	e77b      	b.n	1910 <_spi_interrupt_handler+0xcc>
			(module->dir == SPI_DIRECTION_WRITE) && !(module->receiver_enabled)) {
    1a18:	7a63      	ldrb	r3, [r4, #9]
		if ((module->mode == SPI_MODE_MASTER) &&
    1a1a:	2b01      	cmp	r3, #1
    1a1c:	d000      	beq.n	1a20 <_spi_interrupt_handler+0x1dc>
    1a1e:	e786      	b.n	192e <_spi_interrupt_handler+0xea>
			(module->dir == SPI_DIRECTION_WRITE) && !(module->receiver_enabled)) {
    1a20:	79e3      	ldrb	r3, [r4, #7]
    1a22:	2b00      	cmp	r3, #0
    1a24:	d000      	beq.n	1a28 <_spi_interrupt_handler+0x1e4>
    1a26:	e782      	b.n	192e <_spi_interrupt_handler+0xea>
					= SPI_INTERRUPT_FLAG_TX_COMPLETE;
    1a28:	3302      	adds	r3, #2
    1a2a:	7533      	strb	r3, [r6, #20]
			module->dir = SPI_DIRECTION_IDLE;
    1a2c:	3301      	adds	r3, #1
    1a2e:	7263      	strb	r3, [r4, #9]
			module->status = STATUS_OK;
    1a30:	2200      	movs	r2, #0
    1a32:	3335      	adds	r3, #53	; 0x35
    1a34:	54e2      	strb	r2, [r4, r3]
			if (callback_mask & (1 << SPI_CALLBACK_BUFFER_TRANSMITTED)){
    1a36:	07fb      	lsls	r3, r7, #31
    1a38:	d400      	bmi.n	1a3c <_spi_interrupt_handler+0x1f8>
    1a3a:	e76d      	b.n	1918 <_spi_interrupt_handler+0xd4>
				(module->callback[SPI_CALLBACK_BUFFER_TRANSMITTED])
    1a3c:	0020      	movs	r0, r4
    1a3e:	68e3      	ldr	r3, [r4, #12]
    1a40:	4798      	blx	r3
    1a42:	e769      	b.n	1918 <_spi_interrupt_handler+0xd4>
					(module->callback[SPI_CALLBACK_SLAVE_SELECT_LOW])(module);
    1a44:	0020      	movs	r0, r4
    1a46:	6a23      	ldr	r3, [r4, #32]
    1a48:	4798      	blx	r3
    1a4a:	e770      	b.n	192e <_spi_interrupt_handler+0xea>
		spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_COMBINED_ERROR;
    1a4c:	2380      	movs	r3, #128	; 0x80
    1a4e:	7533      	strb	r3, [r6, #20]
		spi_hw->INTFLAG.reg = SPI_INTERRUPT_FLAG_COMBINED_ERROR;
    1a50:	7633      	strb	r3, [r6, #24]
		if (callback_mask & (1 << SPI_CALLBACK_COMBINED_ERROR)) {
    1a52:	067b      	lsls	r3, r7, #25
    1a54:	d400      	bmi.n	1a58 <_spi_interrupt_handler+0x214>
    1a56:	e76e      	b.n	1936 <_spi_interrupt_handler+0xf2>
			(module->callback[SPI_CALLBACK_COMBINED_ERROR])(module);
    1a58:	6a63      	ldr	r3, [r4, #36]	; 0x24
    1a5a:	0020      	movs	r0, r4
    1a5c:	4798      	blx	r3
}
    1a5e:	e76a      	b.n	1936 <_spi_interrupt_handler+0xf2>
    1a60:	20000068 	.word	0x20000068
    1a64:	20000064 	.word	0x20000064

00001a68 <usart_init>:
 */
enum status_code usart_init(
		struct usart_module *const module,
		Sercom *const hw,
		const struct usart_config *const config)
{
    1a68:	b5f0      	push	{r4, r5, r6, r7, lr}
    1a6a:	46de      	mov	lr, fp
    1a6c:	4657      	mov	r7, sl
    1a6e:	464e      	mov	r6, r9
    1a70:	4645      	mov	r5, r8
    1a72:	b5e0      	push	{r5, r6, r7, lr}
    1a74:	b091      	sub	sp, #68	; 0x44
    1a76:	0005      	movs	r5, r0
    1a78:	000c      	movs	r4, r1
    1a7a:	0016      	movs	r6, r2
	Assert(config);

	enum status_code status_code = STATUS_OK;

	/* Assign module pointer to software instance struct */
	module->hw = hw;
    1a7c:	6029      	str	r1, [r5, #0]

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    1a7e:	0008      	movs	r0, r1
    1a80:	4bba      	ldr	r3, [pc, #744]	; (1d6c <usart_init+0x304>)
    1a82:	4798      	blx	r3
    1a84:	0002      	movs	r2, r0
#else
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
#endif

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
    1a86:	6823      	ldr	r3, [r4, #0]
		/* The module is busy resetting itself */
		return STATUS_BUSY;
    1a88:	2005      	movs	r0, #5
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
    1a8a:	07db      	lsls	r3, r3, #31
    1a8c:	d506      	bpl.n	1a9c <usart_init+0x34>
	_sercom_set_handler(instance_index, _usart_interrupt_handler);
	_sercom_instances[instance_index] = module;
#endif

	return status_code;
}
    1a8e:	b011      	add	sp, #68	; 0x44
    1a90:	bc3c      	pop	{r2, r3, r4, r5}
    1a92:	4690      	mov	r8, r2
    1a94:	4699      	mov	r9, r3
    1a96:	46a2      	mov	sl, r4
    1a98:	46ab      	mov	fp, r5
    1a9a:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_ENABLE) {
    1a9c:	6823      	ldr	r3, [r4, #0]
		return STATUS_ERR_DENIED;
    1a9e:	3017      	adds	r0, #23
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_ENABLE) {
    1aa0:	079b      	lsls	r3, r3, #30
    1aa2:	d4f4      	bmi.n	1a8e <usart_init+0x26>
    1aa4:	49b2      	ldr	r1, [pc, #712]	; (1d70 <usart_init+0x308>)
    1aa6:	6a08      	ldr	r0, [r1, #32]
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
    1aa8:	1c97      	adds	r7, r2, #2
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
    1aaa:	2301      	movs	r3, #1
    1aac:	40bb      	lsls	r3, r7
    1aae:	4303      	orrs	r3, r0
    1ab0:	620b      	str	r3, [r1, #32]
	gclk_chan_conf.source_generator = config->generator_source;
    1ab2:	a90f      	add	r1, sp, #60	; 0x3c
    1ab4:	272d      	movs	r7, #45	; 0x2d
    1ab6:	5df3      	ldrb	r3, [r6, r7]
    1ab8:	700b      	strb	r3, [r1, #0]
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    1aba:	3214      	adds	r2, #20
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
    1abc:	b2d3      	uxtb	r3, r2
    1abe:	9302      	str	r3, [sp, #8]
    1ac0:	0018      	movs	r0, r3
    1ac2:	4bac      	ldr	r3, [pc, #688]	; (1d74 <usart_init+0x30c>)
    1ac4:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
    1ac6:	9802      	ldr	r0, [sp, #8]
    1ac8:	4bab      	ldr	r3, [pc, #684]	; (1d78 <usart_init+0x310>)
    1aca:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
    1acc:	5df0      	ldrb	r0, [r6, r7]
    1ace:	2100      	movs	r1, #0
    1ad0:	4baa      	ldr	r3, [pc, #680]	; (1d7c <usart_init+0x314>)
    1ad2:	4798      	blx	r3
	module->character_size = config->character_size;
    1ad4:	7af3      	ldrb	r3, [r6, #11]
    1ad6:	716b      	strb	r3, [r5, #5]
	module->receiver_enabled = config->receiver_enable;
    1ad8:	2324      	movs	r3, #36	; 0x24
    1ada:	5cf3      	ldrb	r3, [r6, r3]
    1adc:	71ab      	strb	r3, [r5, #6]
	module->transmitter_enabled = config->transmitter_enable;
    1ade:	2325      	movs	r3, #37	; 0x25
    1ae0:	5cf3      	ldrb	r3, [r6, r3]
    1ae2:	71eb      	strb	r3, [r5, #7]
	module->lin_slave_enabled = config->lin_slave_enable;
    1ae4:	7ef3      	ldrb	r3, [r6, #27]
    1ae6:	722b      	strb	r3, [r5, #8]
	module->start_frame_detection_enabled = config->start_frame_detection_enable;
    1ae8:	7f33      	ldrb	r3, [r6, #28]
    1aea:	726b      	strb	r3, [r5, #9]
	SercomUsart *const usart_hw = &(module->hw->USART);
    1aec:	682b      	ldr	r3, [r5, #0]
    1aee:	4698      	mov	r8, r3
	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    1af0:	0018      	movs	r0, r3
    1af2:	4b9e      	ldr	r3, [pc, #632]	; (1d6c <usart_init+0x304>)
    1af4:	4798      	blx	r3
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    1af6:	3014      	adds	r0, #20
	uint16_t baud  = 0;
    1af8:	2200      	movs	r2, #0
    1afa:	230e      	movs	r3, #14
    1afc:	a906      	add	r1, sp, #24
    1afe:	468c      	mov	ip, r1
    1b00:	4463      	add	r3, ip
    1b02:	801a      	strh	r2, [r3, #0]
	switch (config->sample_rate) {
    1b04:	8a32      	ldrh	r2, [r6, #16]
    1b06:	9202      	str	r2, [sp, #8]
    1b08:	2380      	movs	r3, #128	; 0x80
    1b0a:	01db      	lsls	r3, r3, #7
    1b0c:	429a      	cmp	r2, r3
    1b0e:	d100      	bne.n	1b12 <usart_init+0xaa>
    1b10:	e09a      	b.n	1c48 <usart_init+0x1e0>
    1b12:	d90f      	bls.n	1b34 <usart_init+0xcc>
    1b14:	23c0      	movs	r3, #192	; 0xc0
    1b16:	01db      	lsls	r3, r3, #7
    1b18:	9a02      	ldr	r2, [sp, #8]
    1b1a:	429a      	cmp	r2, r3
    1b1c:	d100      	bne.n	1b20 <usart_init+0xb8>
    1b1e:	e08e      	b.n	1c3e <usart_init+0x1d6>
    1b20:	2380      	movs	r3, #128	; 0x80
    1b22:	021b      	lsls	r3, r3, #8
    1b24:	429a      	cmp	r2, r3
    1b26:	d000      	beq.n	1b2a <usart_init+0xc2>
    1b28:	e11b      	b.n	1d62 <usart_init+0x2fa>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_3;
    1b2a:	2303      	movs	r3, #3
    1b2c:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    1b2e:	2300      	movs	r3, #0
    1b30:	9307      	str	r3, [sp, #28]
    1b32:	e008      	b.n	1b46 <usart_init+0xde>
	switch (config->sample_rate) {
    1b34:	2380      	movs	r3, #128	; 0x80
    1b36:	019b      	lsls	r3, r3, #6
    1b38:	429a      	cmp	r2, r3
    1b3a:	d000      	beq.n	1b3e <usart_init+0xd6>
    1b3c:	e111      	b.n	1d62 <usart_init+0x2fa>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
    1b3e:	2310      	movs	r3, #16
    1b40:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
    1b42:	3b0f      	subs	r3, #15
    1b44:	9307      	str	r3, [sp, #28]
	ctrla = (uint32_t)config->data_order |
    1b46:	6833      	ldr	r3, [r6, #0]
    1b48:	9305      	str	r3, [sp, #20]
		(uint32_t)config->mux_setting |
    1b4a:	68f3      	ldr	r3, [r6, #12]
    1b4c:	469b      	mov	fp, r3
		config->sample_adjustment |
    1b4e:	6973      	ldr	r3, [r6, #20]
    1b50:	9303      	str	r3, [sp, #12]
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
    1b52:	7e33      	ldrb	r3, [r6, #24]
    1b54:	9304      	str	r3, [sp, #16]
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
    1b56:	2326      	movs	r3, #38	; 0x26
    1b58:	5cf3      	ldrb	r3, [r6, r3]
    1b5a:	469a      	mov	sl, r3
	transfer_mode = (uint32_t)config->transfer_mode;
    1b5c:	6873      	ldr	r3, [r6, #4]
    1b5e:	4699      	mov	r9, r3
	switch (transfer_mode)
    1b60:	2b00      	cmp	r3, #0
    1b62:	d100      	bne.n	1b66 <usart_init+0xfe>
    1b64:	e09c      	b.n	1ca0 <usart_init+0x238>
    1b66:	2380      	movs	r3, #128	; 0x80
    1b68:	055b      	lsls	r3, r3, #21
    1b6a:	4599      	cmp	r9, r3
    1b6c:	d100      	bne.n	1b70 <usart_init+0x108>
    1b6e:	e080      	b.n	1c72 <usart_init+0x20a>
	if(config->encoding_format_enable) {
    1b70:	7e73      	ldrb	r3, [r6, #25]
    1b72:	2b00      	cmp	r3, #0
    1b74:	d002      	beq.n	1b7c <usart_init+0x114>
		usart_hw->RXPL.reg = config->receive_pulse_length;
    1b76:	7eb3      	ldrb	r3, [r6, #26]
    1b78:	4642      	mov	r2, r8
    1b7a:	7393      	strb	r3, [r2, #14]
	usart_hw->BAUD.reg = baud;
    1b7c:	230e      	movs	r3, #14
    1b7e:	aa06      	add	r2, sp, #24
    1b80:	4694      	mov	ip, r2
    1b82:	4463      	add	r3, ip
    1b84:	881b      	ldrh	r3, [r3, #0]
    1b86:	4642      	mov	r2, r8
    1b88:	8193      	strh	r3, [r2, #12]
	ctrla |= transfer_mode;
    1b8a:	9b05      	ldr	r3, [sp, #20]
    1b8c:	465a      	mov	r2, fp
    1b8e:	4313      	orrs	r3, r2
    1b90:	9a03      	ldr	r2, [sp, #12]
    1b92:	4313      	orrs	r3, r2
    1b94:	464a      	mov	r2, r9
    1b96:	4313      	orrs	r3, r2
    1b98:	9f02      	ldr	r7, [sp, #8]
    1b9a:	431f      	orrs	r7, r3
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
    1b9c:	9b04      	ldr	r3, [sp, #16]
    1b9e:	021b      	lsls	r3, r3, #8
	ctrla |= transfer_mode;
    1ba0:	431f      	orrs	r7, r3
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
    1ba2:	4653      	mov	r3, sl
    1ba4:	075b      	lsls	r3, r3, #29
	ctrla |= transfer_mode;
    1ba6:	431f      	orrs	r7, r3
	if (config->use_external_clock == false) {
    1ba8:	2327      	movs	r3, #39	; 0x27
    1baa:	5cf3      	ldrb	r3, [r6, r3]
    1bac:	2b00      	cmp	r3, #0
    1bae:	d101      	bne.n	1bb4 <usart_init+0x14c>
		ctrla |= SERCOM_USART_CTRLA_MODE(0x1);
    1bb0:	3304      	adds	r3, #4
    1bb2:	431f      	orrs	r7, r3
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
    1bb4:	7e73      	ldrb	r3, [r6, #25]
    1bb6:	029b      	lsls	r3, r3, #10
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
    1bb8:	7f32      	ldrb	r2, [r6, #28]
    1bba:	0252      	lsls	r2, r2, #9
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
    1bbc:	4313      	orrs	r3, r2
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
    1bbe:	7f72      	ldrb	r2, [r6, #29]
    1bc0:	0212      	lsls	r2, r2, #8
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
    1bc2:	4313      	orrs	r3, r2
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
    1bc4:	2224      	movs	r2, #36	; 0x24
    1bc6:	5cb2      	ldrb	r2, [r6, r2]
    1bc8:	0452      	lsls	r2, r2, #17
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
    1bca:	4313      	orrs	r3, r2
			(config->transmitter_enable << SERCOM_USART_CTRLB_TXEN_Pos);
    1bcc:	2225      	movs	r2, #37	; 0x25
    1bce:	5cb2      	ldrb	r2, [r6, r2]
    1bd0:	0412      	lsls	r2, r2, #16
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
    1bd2:	4313      	orrs	r3, r2
	ctrlb |= (uint32_t)config->character_size;
    1bd4:	7ab1      	ldrb	r1, [r6, #10]
    1bd6:	7af2      	ldrb	r2, [r6, #11]
    1bd8:	4311      	orrs	r1, r2
    1bda:	4319      	orrs	r1, r3
	if (config->parity != USART_PARITY_NONE) {
    1bdc:	8933      	ldrh	r3, [r6, #8]
    1bde:	2bff      	cmp	r3, #255	; 0xff
    1be0:	d100      	bne.n	1be4 <usart_init+0x17c>
    1be2:	e081      	b.n	1ce8 <usart_init+0x280>
		ctrla |= SERCOM_USART_CTRLA_FORM(1);
    1be4:	2280      	movs	r2, #128	; 0x80
    1be6:	0452      	lsls	r2, r2, #17
    1be8:	4317      	orrs	r7, r2
		ctrlb |= config->parity;
    1bea:	4319      	orrs	r1, r3
	if (config->run_in_standby || system_is_debugger_present()) {
    1bec:	232c      	movs	r3, #44	; 0x2c
    1bee:	5cf3      	ldrb	r3, [r6, r3]
    1bf0:	2b00      	cmp	r3, #0
    1bf2:	d103      	bne.n	1bfc <usart_init+0x194>
    1bf4:	4b62      	ldr	r3, [pc, #392]	; (1d80 <usart_init+0x318>)
    1bf6:	789b      	ldrb	r3, [r3, #2]
    1bf8:	079b      	lsls	r3, r3, #30
    1bfa:	d501      	bpl.n	1c00 <usart_init+0x198>
		ctrla |= SERCOM_USART_CTRLA_RUNSTDBY;
    1bfc:	2380      	movs	r3, #128	; 0x80
    1bfe:	431f      	orrs	r7, r3
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);
    1c00:	682a      	ldr	r2, [r5, #0]

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
    1c02:	69d3      	ldr	r3, [r2, #28]
		const struct usart_module *const module)
{
	/* Sanity check */
	Assert(module);

	while (usart_is_syncing(module)) {
    1c04:	2b00      	cmp	r3, #0
    1c06:	d1fc      	bne.n	1c02 <usart_init+0x19a>
	usart_hw->CTRLB.reg = ctrlb;
    1c08:	4643      	mov	r3, r8
    1c0a:	6059      	str	r1, [r3, #4]
	SercomUsart *const usart_hw = &(module->hw->USART);
    1c0c:	682a      	ldr	r2, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
    1c0e:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
    1c10:	2b00      	cmp	r3, #0
    1c12:	d1fc      	bne.n	1c0e <usart_init+0x1a6>
	usart_hw->CTRLA.reg = ctrla;
    1c14:	4643      	mov	r3, r8
    1c16:	601f      	str	r7, [r3, #0]
	config->mux_position = SYSTEM_PINMUX_GPIO;
    1c18:	ab0e      	add	r3, sp, #56	; 0x38
    1c1a:	2280      	movs	r2, #128	; 0x80
    1c1c:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    1c1e:	2200      	movs	r2, #0
    1c20:	705a      	strb	r2, [r3, #1]
	config->powersave    = false;
    1c22:	70da      	strb	r2, [r3, #3]
	pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
    1c24:	709a      	strb	r2, [r3, #2]
	uint32_t pad_pinmuxes[] = {
    1c26:	6b33      	ldr	r3, [r6, #48]	; 0x30
    1c28:	930a      	str	r3, [sp, #40]	; 0x28
    1c2a:	6b73      	ldr	r3, [r6, #52]	; 0x34
    1c2c:	930b      	str	r3, [sp, #44]	; 0x2c
    1c2e:	6bb3      	ldr	r3, [r6, #56]	; 0x38
    1c30:	930c      	str	r3, [sp, #48]	; 0x30
    1c32:	6bf3      	ldr	r3, [r6, #60]	; 0x3c
    1c34:	9302      	str	r3, [sp, #8]
    1c36:	930d      	str	r3, [sp, #52]	; 0x34
    1c38:	2700      	movs	r7, #0
		uint32_t current_pinmux = pad_pinmuxes[pad];
    1c3a:	ae0a      	add	r6, sp, #40	; 0x28
    1c3c:	e063      	b.n	1d06 <usart_init+0x29e>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
    1c3e:	2308      	movs	r3, #8
    1c40:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
    1c42:	3b07      	subs	r3, #7
    1c44:	9307      	str	r3, [sp, #28]
    1c46:	e77e      	b.n	1b46 <usart_init+0xde>
	ctrla = (uint32_t)config->data_order |
    1c48:	6833      	ldr	r3, [r6, #0]
    1c4a:	9305      	str	r3, [sp, #20]
		(uint32_t)config->mux_setting |
    1c4c:	68f3      	ldr	r3, [r6, #12]
    1c4e:	469b      	mov	fp, r3
		config->sample_adjustment |
    1c50:	6973      	ldr	r3, [r6, #20]
    1c52:	9303      	str	r3, [sp, #12]
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
    1c54:	7e33      	ldrb	r3, [r6, #24]
    1c56:	9304      	str	r3, [sp, #16]
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
    1c58:	2326      	movs	r3, #38	; 0x26
    1c5a:	5cf3      	ldrb	r3, [r6, r3]
    1c5c:	469a      	mov	sl, r3
	transfer_mode = (uint32_t)config->transfer_mode;
    1c5e:	6873      	ldr	r3, [r6, #4]
    1c60:	4699      	mov	r9, r3
	switch (transfer_mode)
    1c62:	2b00      	cmp	r3, #0
    1c64:	d018      	beq.n	1c98 <usart_init+0x230>
    1c66:	2380      	movs	r3, #128	; 0x80
    1c68:	055b      	lsls	r3, r3, #21
    1c6a:	4599      	cmp	r9, r3
    1c6c:	d001      	beq.n	1c72 <usart_init+0x20a>
	enum status_code status_code = STATUS_OK;
    1c6e:	2000      	movs	r0, #0
    1c70:	e025      	b.n	1cbe <usart_init+0x256>
			if (!config->use_external_clock) {
    1c72:	2327      	movs	r3, #39	; 0x27
    1c74:	5cf3      	ldrb	r3, [r6, r3]
    1c76:	2b00      	cmp	r3, #0
    1c78:	d000      	beq.n	1c7c <usart_init+0x214>
    1c7a:	e779      	b.n	1b70 <usart_init+0x108>
				status_code = _sercom_get_sync_baud_val(config->baudrate,
    1c7c:	6a33      	ldr	r3, [r6, #32]
    1c7e:	001f      	movs	r7, r3
    1c80:	b2c0      	uxtb	r0, r0
    1c82:	4b40      	ldr	r3, [pc, #256]	; (1d84 <usart_init+0x31c>)
    1c84:	4798      	blx	r3
    1c86:	0001      	movs	r1, r0
    1c88:	220e      	movs	r2, #14
    1c8a:	ab06      	add	r3, sp, #24
    1c8c:	469c      	mov	ip, r3
    1c8e:	4462      	add	r2, ip
    1c90:	0038      	movs	r0, r7
    1c92:	4b3d      	ldr	r3, [pc, #244]	; (1d88 <usart_init+0x320>)
    1c94:	4798      	blx	r3
    1c96:	e012      	b.n	1cbe <usart_init+0x256>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
    1c98:	2308      	movs	r3, #8
    1c9a:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    1c9c:	2300      	movs	r3, #0
    1c9e:	9307      	str	r3, [sp, #28]
			if (config->use_external_clock) {
    1ca0:	2327      	movs	r3, #39	; 0x27
    1ca2:	5cf3      	ldrb	r3, [r6, r3]
    1ca4:	2b00      	cmp	r3, #0
    1ca6:	d00e      	beq.n	1cc6 <usart_init+0x25e>
				status_code =
    1ca8:	9b06      	ldr	r3, [sp, #24]
    1caa:	9300      	str	r3, [sp, #0]
    1cac:	9b07      	ldr	r3, [sp, #28]
    1cae:	220e      	movs	r2, #14
    1cb0:	a906      	add	r1, sp, #24
    1cb2:	468c      	mov	ip, r1
    1cb4:	4462      	add	r2, ip
    1cb6:	6ab1      	ldr	r1, [r6, #40]	; 0x28
    1cb8:	6a30      	ldr	r0, [r6, #32]
    1cba:	4f34      	ldr	r7, [pc, #208]	; (1d8c <usart_init+0x324>)
    1cbc:	47b8      	blx	r7
	if (status_code != STATUS_OK) {
    1cbe:	2800      	cmp	r0, #0
    1cc0:	d000      	beq.n	1cc4 <usart_init+0x25c>
    1cc2:	e6e4      	b.n	1a8e <usart_init+0x26>
    1cc4:	e754      	b.n	1b70 <usart_init+0x108>
						_sercom_get_async_baud_val(config->baudrate,
    1cc6:	6a33      	ldr	r3, [r6, #32]
    1cc8:	001f      	movs	r7, r3
    1cca:	b2c0      	uxtb	r0, r0
    1ccc:	4b2d      	ldr	r3, [pc, #180]	; (1d84 <usart_init+0x31c>)
    1cce:	4798      	blx	r3
    1cd0:	0001      	movs	r1, r0
				status_code =
    1cd2:	9b06      	ldr	r3, [sp, #24]
    1cd4:	9300      	str	r3, [sp, #0]
    1cd6:	9b07      	ldr	r3, [sp, #28]
    1cd8:	220e      	movs	r2, #14
    1cda:	a806      	add	r0, sp, #24
    1cdc:	4684      	mov	ip, r0
    1cde:	4462      	add	r2, ip
    1ce0:	0038      	movs	r0, r7
    1ce2:	4f2a      	ldr	r7, [pc, #168]	; (1d8c <usart_init+0x324>)
    1ce4:	47b8      	blx	r7
    1ce6:	e7ea      	b.n	1cbe <usart_init+0x256>
		if(config->lin_slave_enable) {
    1ce8:	7ef3      	ldrb	r3, [r6, #27]
    1cea:	2b00      	cmp	r3, #0
    1cec:	d100      	bne.n	1cf0 <usart_init+0x288>
    1cee:	e77d      	b.n	1bec <usart_init+0x184>
			ctrla |= SERCOM_USART_CTRLA_FORM(0x4);
    1cf0:	2380      	movs	r3, #128	; 0x80
    1cf2:	04db      	lsls	r3, r3, #19
    1cf4:	431f      	orrs	r7, r3
    1cf6:	e779      	b.n	1bec <usart_init+0x184>
			current_pinmux = _sercom_get_default_pad(hw, pad);
    1cf8:	0020      	movs	r0, r4
    1cfa:	4b25      	ldr	r3, [pc, #148]	; (1d90 <usart_init+0x328>)
    1cfc:	4798      	blx	r3
    1cfe:	e007      	b.n	1d10 <usart_init+0x2a8>
    1d00:	3701      	adds	r7, #1
	for (uint8_t pad = 0; pad < 4; pad++) {
    1d02:	2f04      	cmp	r7, #4
    1d04:	d00d      	beq.n	1d22 <usart_init+0x2ba>
    1d06:	b2f9      	uxtb	r1, r7
		uint32_t current_pinmux = pad_pinmuxes[pad];
    1d08:	00bb      	lsls	r3, r7, #2
    1d0a:	5998      	ldr	r0, [r3, r6]
		if (current_pinmux == PINMUX_DEFAULT) {
    1d0c:	2800      	cmp	r0, #0
    1d0e:	d0f3      	beq.n	1cf8 <usart_init+0x290>
		if (current_pinmux != PINMUX_UNUSED) {
    1d10:	1c43      	adds	r3, r0, #1
    1d12:	d0f5      	beq.n	1d00 <usart_init+0x298>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
    1d14:	a90e      	add	r1, sp, #56	; 0x38
    1d16:	7008      	strb	r0, [r1, #0]
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
    1d18:	0c00      	lsrs	r0, r0, #16
    1d1a:	b2c0      	uxtb	r0, r0
    1d1c:	4b1d      	ldr	r3, [pc, #116]	; (1d94 <usart_init+0x32c>)
    1d1e:	4798      	blx	r3
    1d20:	e7ee      	b.n	1d00 <usart_init+0x298>
		module->callback[i]            = NULL;
    1d22:	2300      	movs	r3, #0
    1d24:	60eb      	str	r3, [r5, #12]
    1d26:	612b      	str	r3, [r5, #16]
    1d28:	616b      	str	r3, [r5, #20]
    1d2a:	61ab      	str	r3, [r5, #24]
    1d2c:	61eb      	str	r3, [r5, #28]
    1d2e:	622b      	str	r3, [r5, #32]
	module->tx_buffer_ptr              = NULL;
    1d30:	62ab      	str	r3, [r5, #40]	; 0x28
	module->rx_buffer_ptr              = NULL;
    1d32:	626b      	str	r3, [r5, #36]	; 0x24
	module->remaining_tx_buffer_length = 0x0000;
    1d34:	2200      	movs	r2, #0
    1d36:	85eb      	strh	r3, [r5, #46]	; 0x2e
	module->remaining_rx_buffer_length = 0x0000;
    1d38:	85ab      	strh	r3, [r5, #44]	; 0x2c
	module->callback_reg_mask          = 0x00;
    1d3a:	3330      	adds	r3, #48	; 0x30
    1d3c:	54ea      	strb	r2, [r5, r3]
	module->callback_enable_mask       = 0x00;
    1d3e:	3301      	adds	r3, #1
    1d40:	54ea      	strb	r2, [r5, r3]
	module->rx_status                  = STATUS_OK;
    1d42:	3301      	adds	r3, #1
    1d44:	54ea      	strb	r2, [r5, r3]
	module->tx_status                  = STATUS_OK;
    1d46:	3301      	adds	r3, #1
    1d48:	54ea      	strb	r2, [r5, r3]
	uint8_t instance_index = _sercom_get_sercom_inst_index(module->hw);
    1d4a:	6828      	ldr	r0, [r5, #0]
    1d4c:	4b07      	ldr	r3, [pc, #28]	; (1d6c <usart_init+0x304>)
    1d4e:	4798      	blx	r3
    1d50:	0004      	movs	r4, r0
	_sercom_set_handler(instance_index, _usart_interrupt_handler);
    1d52:	4911      	ldr	r1, [pc, #68]	; (1d98 <usart_init+0x330>)
    1d54:	4b11      	ldr	r3, [pc, #68]	; (1d9c <usart_init+0x334>)
    1d56:	4798      	blx	r3
	_sercom_instances[instance_index] = module;
    1d58:	00a4      	lsls	r4, r4, #2
    1d5a:	4b11      	ldr	r3, [pc, #68]	; (1da0 <usart_init+0x338>)
    1d5c:	50e5      	str	r5, [r4, r3]
	return status_code;
    1d5e:	2000      	movs	r0, #0
    1d60:	e695      	b.n	1a8e <usart_init+0x26>
	enum sercom_asynchronous_sample_num sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
    1d62:	2310      	movs	r3, #16
    1d64:	9306      	str	r3, [sp, #24]
	enum sercom_asynchronous_operation_mode mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    1d66:	2300      	movs	r3, #0
    1d68:	9307      	str	r3, [sp, #28]
    1d6a:	e6ec      	b.n	1b46 <usart_init+0xde>
    1d6c:	0000118d 	.word	0x0000118d
    1d70:	40000400 	.word	0x40000400
    1d74:	00002901 	.word	0x00002901
    1d78:	00002875 	.word	0x00002875
    1d7c:	00000fc9 	.word	0x00000fc9
    1d80:	41002000 	.word	0x41002000
    1d84:	0000291d 	.word	0x0000291d
    1d88:	00000f0b 	.word	0x00000f0b
    1d8c:	00000f35 	.word	0x00000f35
    1d90:	00001015 	.word	0x00001015
    1d94:	000029f9 	.word	0x000029f9
    1d98:	00001f89 	.word	0x00001f89
    1d9c:	00002121 	.word	0x00002121
    1da0:	20000068 	.word	0x20000068

00001da4 <usart_write_wait>:

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	/* Check that the transmitter is enabled */
	if (!(module->transmitter_enabled)) {
    1da4:	79c2      	ldrb	r2, [r0, #7]
		return STATUS_ERR_DENIED;
    1da6:	231c      	movs	r3, #28
	if (!(module->transmitter_enabled)) {
    1da8:	2a00      	cmp	r2, #0
    1daa:	d101      	bne.n	1db0 <usart_write_wait+0xc>
	while (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_TXC)) {
		/* Wait until data is sent */
	}

	return STATUS_OK;
}
    1dac:	0018      	movs	r0, r3
    1dae:	4770      	bx	lr
	if (module->remaining_tx_buffer_length > 0) {
    1db0:	8dc2      	ldrh	r2, [r0, #46]	; 0x2e
    1db2:	b292      	uxth	r2, r2
		return STATUS_BUSY;
    1db4:	3b17      	subs	r3, #23
	if (module->remaining_tx_buffer_length > 0) {
    1db6:	2a00      	cmp	r2, #0
    1db8:	d1f8      	bne.n	1dac <usart_write_wait+0x8>
	SercomUsart *const usart_hw = &(module->hw->USART);
    1dba:	6802      	ldr	r2, [r0, #0]
	usart_hw->DATA.reg = tx_data;
    1dbc:	8511      	strh	r1, [r2, #40]	; 0x28
	while (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_TXC)) {
    1dbe:	2102      	movs	r1, #2
    1dc0:	7e13      	ldrb	r3, [r2, #24]
    1dc2:	420b      	tst	r3, r1
    1dc4:	d0fc      	beq.n	1dc0 <usart_write_wait+0x1c>
	return STATUS_OK;
    1dc6:	2300      	movs	r3, #0
    1dc8:	e7f0      	b.n	1dac <usart_write_wait+0x8>

00001dca <usart_read_wait>:

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	/* Check that the receiver is enabled */
	if (!(module->receiver_enabled)) {
    1dca:	7982      	ldrb	r2, [r0, #6]
		return STATUS_ERR_DENIED;
    1dcc:	231c      	movs	r3, #28
	if (!(module->receiver_enabled)) {
    1dce:	2a00      	cmp	r2, #0
    1dd0:	d101      	bne.n	1dd6 <usart_read_wait+0xc>

	/* Read data from USART module */
	*rx_data = usart_hw->DATA.reg;

	return STATUS_OK;
}
    1dd2:	0018      	movs	r0, r3
    1dd4:	4770      	bx	lr
	if (module->remaining_rx_buffer_length > 0) {
    1dd6:	8d82      	ldrh	r2, [r0, #44]	; 0x2c
    1dd8:	b292      	uxth	r2, r2
		return STATUS_BUSY;
    1dda:	3b17      	subs	r3, #23
	if (module->remaining_rx_buffer_length > 0) {
    1ddc:	2a00      	cmp	r2, #0
    1dde:	d1f8      	bne.n	1dd2 <usart_read_wait+0x8>
	SercomUsart *const usart_hw = &(module->hw->USART);
    1de0:	6802      	ldr	r2, [r0, #0]
	if (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_RXC)) {
    1de2:	7e10      	ldrb	r0, [r2, #24]
    1de4:	0740      	lsls	r0, r0, #29
    1de6:	d5f4      	bpl.n	1dd2 <usart_read_wait+0x8>
	error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
    1de8:	8b53      	ldrh	r3, [r2, #26]
    1dea:	b2db      	uxtb	r3, r3
	if (error_code) {
    1dec:	0698      	lsls	r0, r3, #26
    1dee:	d01d      	beq.n	1e2c <usart_read_wait+0x62>
		if (error_code & SERCOM_USART_STATUS_FERR) {
    1df0:	0798      	lsls	r0, r3, #30
    1df2:	d503      	bpl.n	1dfc <usart_read_wait+0x32>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_FERR;
    1df4:	2302      	movs	r3, #2
    1df6:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_BAD_FORMAT;
    1df8:	3318      	adds	r3, #24
    1dfa:	e7ea      	b.n	1dd2 <usart_read_wait+0x8>
		} else if (error_code & SERCOM_USART_STATUS_BUFOVF) {
    1dfc:	0758      	lsls	r0, r3, #29
    1dfe:	d503      	bpl.n	1e08 <usart_read_wait+0x3e>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_BUFOVF;
    1e00:	2304      	movs	r3, #4
    1e02:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_OVERFLOW;
    1e04:	331a      	adds	r3, #26
    1e06:	e7e4      	b.n	1dd2 <usart_read_wait+0x8>
		} else if (error_code & SERCOM_USART_STATUS_PERR) {
    1e08:	07d8      	lsls	r0, r3, #31
    1e0a:	d503      	bpl.n	1e14 <usart_read_wait+0x4a>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_PERR;
    1e0c:	2301      	movs	r3, #1
    1e0e:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_BAD_DATA;
    1e10:	3312      	adds	r3, #18
    1e12:	e7de      	b.n	1dd2 <usart_read_wait+0x8>
		else if (error_code & SERCOM_USART_STATUS_ISF) {
    1e14:	06d8      	lsls	r0, r3, #27
    1e16:	d503      	bpl.n	1e20 <usart_read_wait+0x56>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_ISF;
    1e18:	2310      	movs	r3, #16
    1e1a:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_PROTOCOL;
    1e1c:	3332      	adds	r3, #50	; 0x32
    1e1e:	e7d8      	b.n	1dd2 <usart_read_wait+0x8>
		else if (error_code & SERCOM_USART_STATUS_COLL) {
    1e20:	069b      	lsls	r3, r3, #26
    1e22:	d503      	bpl.n	1e2c <usart_read_wait+0x62>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
    1e24:	2320      	movs	r3, #32
    1e26:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_PACKET_COLLISION;
    1e28:	3321      	adds	r3, #33	; 0x21
    1e2a:	e7d2      	b.n	1dd2 <usart_read_wait+0x8>
	*rx_data = usart_hw->DATA.reg;
    1e2c:	8d13      	ldrh	r3, [r2, #40]	; 0x28
    1e2e:	800b      	strh	r3, [r1, #0]
	return STATUS_OK;
    1e30:	2300      	movs	r3, #0
    1e32:	e7ce      	b.n	1dd2 <usart_read_wait+0x8>

00001e34 <usart_write_buffer_wait>:
 */
enum status_code usart_write_buffer_wait(
		struct usart_module *const module,
		const uint8_t *tx_data,
		uint16_t length)
{
    1e34:	b5f0      	push	{r4, r5, r6, r7, lr}
    1e36:	46ce      	mov	lr, r9
    1e38:	4647      	mov	r7, r8
    1e3a:	b580      	push	{r7, lr}
    1e3c:	b083      	sub	sp, #12
    1e3e:	0005      	movs	r5, r0
    1e40:	9101      	str	r1, [sp, #4]
	Assert(module);
	Assert(module->hw);

	/* Check if the buffer length is valid */
	if (length == 0) {
		return STATUS_ERR_INVALID_ARG;
    1e42:	2017      	movs	r0, #23
	if (length == 0) {
    1e44:	2a00      	cmp	r2, #0
    1e46:	d104      	bne.n	1e52 <usart_write_buffer_wait+0x1e>
			return STATUS_ERR_TIMEOUT;
		}
	}

	return STATUS_OK;
}
    1e48:	b003      	add	sp, #12
    1e4a:	bc0c      	pop	{r2, r3}
    1e4c:	4690      	mov	r8, r2
    1e4e:	4699      	mov	r9, r3
    1e50:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (!(module->transmitter_enabled)) {
    1e52:	79eb      	ldrb	r3, [r5, #7]
		return STATUS_ERR_DENIED;
    1e54:	3005      	adds	r0, #5
	if (!(module->transmitter_enabled)) {
    1e56:	2b00      	cmp	r3, #0
    1e58:	d0f6      	beq.n	1e48 <usart_write_buffer_wait+0x14>
	SercomUsart *const usart_hw = &(module->hw->USART);
    1e5a:	682c      	ldr	r4, [r5, #0]
	while (length--) {
    1e5c:	3a01      	subs	r2, #1
    1e5e:	b293      	uxth	r3, r2
    1e60:	4699      	mov	r9, r3
    1e62:	2600      	movs	r6, #0
			if (usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_DRE) {
    1e64:	2701      	movs	r7, #1
	while (length--) {
    1e66:	4b20      	ldr	r3, [pc, #128]	; (1ee8 <usart_write_buffer_wait+0xb4>)
    1e68:	4698      	mov	r8, r3
    1e6a:	e011      	b.n	1e90 <usart_write_buffer_wait+0x5c>
		uint16_t data_to_send = tx_data[tx_pos++];
    1e6c:	1c73      	adds	r3, r6, #1
    1e6e:	b29b      	uxth	r3, r3
    1e70:	9a01      	ldr	r2, [sp, #4]
    1e72:	5d91      	ldrb	r1, [r2, r6]
		if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
    1e74:	796a      	ldrb	r2, [r5, #5]
    1e76:	2a01      	cmp	r2, #1
    1e78:	d017      	beq.n	1eaa <usart_write_buffer_wait+0x76>
		uint16_t data_to_send = tx_data[tx_pos++];
    1e7a:	b289      	uxth	r1, r1
    1e7c:	001e      	movs	r6, r3
		usart_write_wait(module, data_to_send);
    1e7e:	0028      	movs	r0, r5
    1e80:	4b1a      	ldr	r3, [pc, #104]	; (1eec <usart_write_buffer_wait+0xb8>)
    1e82:	4798      	blx	r3
	while (length--) {
    1e84:	464b      	mov	r3, r9
    1e86:	3b01      	subs	r3, #1
    1e88:	b29b      	uxth	r3, r3
    1e8a:	4699      	mov	r9, r3
    1e8c:	4543      	cmp	r3, r8
    1e8e:	d013      	beq.n	1eb8 <usart_write_buffer_wait+0x84>
			if (usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_DRE) {
    1e90:	7e23      	ldrb	r3, [r4, #24]
    1e92:	423b      	tst	r3, r7
    1e94:	d1ea      	bne.n	1e6c <usart_write_buffer_wait+0x38>
    1e96:	4b14      	ldr	r3, [pc, #80]	; (1ee8 <usart_write_buffer_wait+0xb4>)
    1e98:	7e22      	ldrb	r2, [r4, #24]
    1e9a:	423a      	tst	r2, r7
    1e9c:	d1e6      	bne.n	1e6c <usart_write_buffer_wait+0x38>
			} else if (i == USART_TIMEOUT) {
    1e9e:	2b01      	cmp	r3, #1
    1ea0:	d019      	beq.n	1ed6 <usart_write_buffer_wait+0xa2>
    1ea2:	3b01      	subs	r3, #1
		for (uint32_t i = 0; i <= USART_TIMEOUT; i++) {
    1ea4:	2b00      	cmp	r3, #0
    1ea6:	d1f7      	bne.n	1e98 <usart_write_buffer_wait+0x64>
    1ea8:	e7e0      	b.n	1e6c <usart_write_buffer_wait+0x38>
			data_to_send |= (tx_data[tx_pos++] << 8);
    1eaa:	3602      	adds	r6, #2
    1eac:	b2b6      	uxth	r6, r6
    1eae:	9a01      	ldr	r2, [sp, #4]
    1eb0:	5cd3      	ldrb	r3, [r2, r3]
    1eb2:	021b      	lsls	r3, r3, #8
    1eb4:	4319      	orrs	r1, r3
    1eb6:	e7e2      	b.n	1e7e <usart_write_buffer_wait+0x4a>
		if (usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_TXC) {
    1eb8:	7e23      	ldrb	r3, [r4, #24]
    1eba:	079b      	lsls	r3, r3, #30
    1ebc:	d40d      	bmi.n	1eda <usart_write_buffer_wait+0xa6>
    1ebe:	4b0a      	ldr	r3, [pc, #40]	; (1ee8 <usart_write_buffer_wait+0xb4>)
    1ec0:	2102      	movs	r1, #2
    1ec2:	7e22      	ldrb	r2, [r4, #24]
    1ec4:	420a      	tst	r2, r1
    1ec6:	d10a      	bne.n	1ede <usart_write_buffer_wait+0xaa>
		} else if (i == USART_TIMEOUT) {
    1ec8:	2b01      	cmp	r3, #1
    1eca:	d00a      	beq.n	1ee2 <usart_write_buffer_wait+0xae>
    1ecc:	3b01      	subs	r3, #1
	for (uint32_t i = 0; i <= USART_TIMEOUT; i++) {
    1ece:	2b00      	cmp	r3, #0
    1ed0:	d1f7      	bne.n	1ec2 <usart_write_buffer_wait+0x8e>
	return STATUS_OK;
    1ed2:	2000      	movs	r0, #0
    1ed4:	e7b8      	b.n	1e48 <usart_write_buffer_wait+0x14>
				return STATUS_ERR_TIMEOUT;
    1ed6:	2012      	movs	r0, #18
    1ed8:	e7b6      	b.n	1e48 <usart_write_buffer_wait+0x14>
	return STATUS_OK;
    1eda:	2000      	movs	r0, #0
    1edc:	e7b4      	b.n	1e48 <usart_write_buffer_wait+0x14>
    1ede:	2000      	movs	r0, #0
    1ee0:	e7b2      	b.n	1e48 <usart_write_buffer_wait+0x14>
			return STATUS_ERR_TIMEOUT;
    1ee2:	2012      	movs	r0, #18
    1ee4:	e7b0      	b.n	1e48 <usart_write_buffer_wait+0x14>
    1ee6:	46c0      	nop			; (mov r8, r8)
    1ee8:	0000ffff 	.word	0x0000ffff
    1eec:	00001da5 	.word	0x00001da5

00001ef0 <usart_read_buffer_wait>:
 */
enum status_code usart_read_buffer_wait(
		struct usart_module *const module,
		uint8_t *rx_data,
		uint16_t length)
{
    1ef0:	b5f0      	push	{r4, r5, r6, r7, lr}
    1ef2:	46d6      	mov	lr, sl
    1ef4:	b500      	push	{lr}
    1ef6:	b084      	sub	sp, #16
    1ef8:	0004      	movs	r4, r0
    1efa:	9101      	str	r1, [sp, #4]
	Assert(module);
	Assert(module->hw);

	/* Check if the buffer length is valid */
	if (length == 0) {
		return STATUS_ERR_INVALID_ARG;
    1efc:	2017      	movs	r0, #23
	if (length == 0) {
    1efe:	2a00      	cmp	r2, #0
    1f00:	d103      	bne.n	1f0a <usart_read_buffer_wait+0x1a>
			rx_data[rx_pos++] = (received_data >> 8);
		}
	}

	return STATUS_OK;
}
    1f02:	b004      	add	sp, #16
    1f04:	bc04      	pop	{r2}
    1f06:	4692      	mov	sl, r2
    1f08:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (!(module->receiver_enabled)) {
    1f0a:	79a3      	ldrb	r3, [r4, #6]
		return STATUS_ERR_DENIED;
    1f0c:	3005      	adds	r0, #5
	if (!(module->receiver_enabled)) {
    1f0e:	2b00      	cmp	r3, #0
    1f10:	d0f7      	beq.n	1f02 <usart_read_buffer_wait+0x12>
	SercomUsart *const usart_hw = &(module->hw->USART);
    1f12:	6826      	ldr	r6, [r4, #0]
	while (length--) {
    1f14:	3a01      	subs	r2, #1
    1f16:	b293      	uxth	r3, r2
    1f18:	469a      	mov	sl, r3
    1f1a:	2500      	movs	r5, #0
			if (usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_RXC) {
    1f1c:	2704      	movs	r7, #4
    1f1e:	e019      	b.n	1f54 <usart_read_buffer_wait+0x64>
		uint16_t received_data = 0;
    1f20:	2300      	movs	r3, #0
    1f22:	aa02      	add	r2, sp, #8
    1f24:	80d3      	strh	r3, [r2, #6]
		retval = usart_read_wait(module, &received_data);
    1f26:	1d91      	adds	r1, r2, #6
    1f28:	0020      	movs	r0, r4
    1f2a:	4b15      	ldr	r3, [pc, #84]	; (1f80 <usart_read_buffer_wait+0x90>)
    1f2c:	4798      	blx	r3
		if (retval != STATUS_OK) {
    1f2e:	2800      	cmp	r0, #0
    1f30:	d1e7      	bne.n	1f02 <usart_read_buffer_wait+0x12>
		rx_data[rx_pos++] = received_data;
    1f32:	1c69      	adds	r1, r5, #1
    1f34:	b289      	uxth	r1, r1
    1f36:	ab02      	add	r3, sp, #8
    1f38:	88db      	ldrh	r3, [r3, #6]
    1f3a:	9a01      	ldr	r2, [sp, #4]
    1f3c:	5553      	strb	r3, [r2, r5]
		if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
    1f3e:	7962      	ldrb	r2, [r4, #5]
    1f40:	2a01      	cmp	r2, #1
    1f42:	d014      	beq.n	1f6e <usart_read_buffer_wait+0x7e>
		rx_data[rx_pos++] = received_data;
    1f44:	000d      	movs	r5, r1
	while (length--) {
    1f46:	4653      	mov	r3, sl
    1f48:	3b01      	subs	r3, #1
    1f4a:	b29b      	uxth	r3, r3
    1f4c:	469a      	mov	sl, r3
    1f4e:	4b0d      	ldr	r3, [pc, #52]	; (1f84 <usart_read_buffer_wait+0x94>)
    1f50:	459a      	cmp	sl, r3
    1f52:	d0d6      	beq.n	1f02 <usart_read_buffer_wait+0x12>
			if (usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_RXC) {
    1f54:	7e33      	ldrb	r3, [r6, #24]
    1f56:	423b      	tst	r3, r7
    1f58:	d1e2      	bne.n	1f20 <usart_read_buffer_wait+0x30>
    1f5a:	4b0a      	ldr	r3, [pc, #40]	; (1f84 <usart_read_buffer_wait+0x94>)
    1f5c:	7e32      	ldrb	r2, [r6, #24]
    1f5e:	423a      	tst	r2, r7
    1f60:	d1de      	bne.n	1f20 <usart_read_buffer_wait+0x30>
			} else if (i == USART_TIMEOUT) {
    1f62:	2b01      	cmp	r3, #1
    1f64:	d009      	beq.n	1f7a <usart_read_buffer_wait+0x8a>
    1f66:	3b01      	subs	r3, #1
		for (uint32_t i = 0; i <= USART_TIMEOUT; i++) {
    1f68:	2b00      	cmp	r3, #0
    1f6a:	d1f7      	bne.n	1f5c <usart_read_buffer_wait+0x6c>
    1f6c:	e7d8      	b.n	1f20 <usart_read_buffer_wait+0x30>
			rx_data[rx_pos++] = (received_data >> 8);
    1f6e:	3502      	adds	r5, #2
    1f70:	b2ad      	uxth	r5, r5
    1f72:	0a1b      	lsrs	r3, r3, #8
    1f74:	9a01      	ldr	r2, [sp, #4]
    1f76:	5453      	strb	r3, [r2, r1]
    1f78:	e7e5      	b.n	1f46 <usart_read_buffer_wait+0x56>
				return STATUS_ERR_TIMEOUT;
    1f7a:	2012      	movs	r0, #18
    1f7c:	e7c1      	b.n	1f02 <usart_read_buffer_wait+0x12>
    1f7e:	46c0      	nop			; (mov r8, r8)
    1f80:	00001dcb 	.word	0x00001dcb
    1f84:	0000ffff 	.word	0x0000ffff

00001f88 <_usart_interrupt_handler>:
 * \param[in]  instance  ID of the SERCOM instance calling the interrupt
 *                       handler.
 */
void _usart_interrupt_handler(
		uint8_t instance)
{
    1f88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint16_t callback_status;
	uint8_t error_code;


	/* Get device instance from the look-up table */
	struct usart_module *module
    1f8a:	0080      	lsls	r0, r0, #2
    1f8c:	4b62      	ldr	r3, [pc, #392]	; (2118 <STACK_SIZE+0x118>)
    1f8e:	58c5      	ldr	r5, [r0, r3]
		= (struct usart_module *)_sercom_instances[instance];

	/* Pointer to the hardware module instance */
	SercomUsart *const usart_hw
		= &(module->hw->USART);
    1f90:	682c      	ldr	r4, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
    1f92:	69e3      	ldr	r3, [r4, #28]
	while (usart_is_syncing(module)) {
    1f94:	2b00      	cmp	r3, #0
    1f96:	d1fc      	bne.n	1f92 <_usart_interrupt_handler+0xa>

	/* Wait for the synchronization to complete */
	_usart_wait_for_sync(module);

	/* Read and mask interrupt flag register */
	interrupt_status = usart_hw->INTFLAG.reg;
    1f98:	7e23      	ldrb	r3, [r4, #24]
	interrupt_status &= usart_hw->INTENSET.reg;
    1f9a:	7da6      	ldrb	r6, [r4, #22]
    1f9c:	401e      	ands	r6, r3
	callback_status = module->callback_reg_mask &
    1f9e:	2330      	movs	r3, #48	; 0x30
    1fa0:	5ceb      	ldrb	r3, [r5, r3]
    1fa2:	2231      	movs	r2, #49	; 0x31
    1fa4:	5caf      	ldrb	r7, [r5, r2]
    1fa6:	401f      	ands	r7, r3
			module->callback_enable_mask;

	/* Check if a DATA READY interrupt has occurred,
	 * and if there is more to transfer */
	if (interrupt_status & SERCOM_USART_INTFLAG_DRE) {
    1fa8:	07f3      	lsls	r3, r6, #31
    1faa:	d522      	bpl.n	1ff2 <_usart_interrupt_handler+0x6a>
		if (module->remaining_tx_buffer_length) {
    1fac:	8deb      	ldrh	r3, [r5, #46]	; 0x2e
    1fae:	b29b      	uxth	r3, r3
    1fb0:	2b00      	cmp	r3, #0
    1fb2:	d01c      	beq.n	1fee <_usart_interrupt_handler+0x66>
			/* Write value will be at least 8-bits long */
			uint16_t data_to_send = *(module->tx_buffer_ptr);
    1fb4:	6aaa      	ldr	r2, [r5, #40]	; 0x28
    1fb6:	7813      	ldrb	r3, [r2, #0]
    1fb8:	b2db      	uxtb	r3, r3
			/* Increment 8-bit pointer */
			(module->tx_buffer_ptr)++;
    1fba:	1c51      	adds	r1, r2, #1
    1fbc:	62a9      	str	r1, [r5, #40]	; 0x28

			if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
    1fbe:	7969      	ldrb	r1, [r5, #5]
    1fc0:	2901      	cmp	r1, #1
    1fc2:	d00e      	beq.n	1fe2 <_usart_interrupt_handler+0x5a>
			uint16_t data_to_send = *(module->tx_buffer_ptr);
    1fc4:	b29b      	uxth	r3, r3
				data_to_send |= (*(module->tx_buffer_ptr) << 8);
				/* Increment 8-bit pointer */
				(module->tx_buffer_ptr)++;
			}
			/* Write the data to send */
			usart_hw->DATA.reg = (data_to_send & SERCOM_USART_DATA_MASK);
    1fc6:	05db      	lsls	r3, r3, #23
    1fc8:	0ddb      	lsrs	r3, r3, #23
    1fca:	8523      	strh	r3, [r4, #40]	; 0x28

			if (--(module->remaining_tx_buffer_length) == 0) {
    1fcc:	8deb      	ldrh	r3, [r5, #46]	; 0x2e
    1fce:	3b01      	subs	r3, #1
    1fd0:	b29b      	uxth	r3, r3
    1fd2:	85eb      	strh	r3, [r5, #46]	; 0x2e
    1fd4:	2b00      	cmp	r3, #0
    1fd6:	d10c      	bne.n	1ff2 <_usart_interrupt_handler+0x6a>
				/* Disable the Data Register Empty Interrupt */
				usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
    1fd8:	3301      	adds	r3, #1
    1fda:	7523      	strb	r3, [r4, #20]
				/* Enable Transmission Complete interrupt */
				usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_TXC;
    1fdc:	3301      	adds	r3, #1
    1fde:	75a3      	strb	r3, [r4, #22]
    1fe0:	e007      	b.n	1ff2 <_usart_interrupt_handler+0x6a>
				data_to_send |= (*(module->tx_buffer_ptr) << 8);
    1fe2:	7851      	ldrb	r1, [r2, #1]
    1fe4:	0209      	lsls	r1, r1, #8
    1fe6:	430b      	orrs	r3, r1
				(module->tx_buffer_ptr)++;
    1fe8:	3202      	adds	r2, #2
    1fea:	62aa      	str	r2, [r5, #40]	; 0x28
    1fec:	e7eb      	b.n	1fc6 <_usart_interrupt_handler+0x3e>

			}
		} else {
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
    1fee:	2301      	movs	r3, #1
    1ff0:	7523      	strb	r3, [r4, #20]
		}
	}

	/* Check if the Transmission Complete interrupt has occurred and
	 * that the transmit buffer is empty */
	if (interrupt_status & SERCOM_USART_INTFLAG_TXC) {
    1ff2:	07b3      	lsls	r3, r6, #30
    1ff4:	d506      	bpl.n	2004 <STACK_SIZE+0x4>

		/* Disable TX Complete Interrupt, and set STATUS_OK */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_TXC;
    1ff6:	2302      	movs	r3, #2
    1ff8:	7523      	strb	r3, [r4, #20]
		module->tx_status = STATUS_OK;
    1ffa:	2200      	movs	r2, #0
    1ffc:	3331      	adds	r3, #49	; 0x31
    1ffe:	54ea      	strb	r2, [r5, r3]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BUFFER_TRANSMITTED)) {
    2000:	07fb      	lsls	r3, r7, #31
    2002:	d41a      	bmi.n	203a <STACK_SIZE+0x3a>
		}
	}

	/* Check if the Receive Complete interrupt has occurred, and that
	 * there's more data to receive */
	if (interrupt_status & SERCOM_USART_INTFLAG_RXC) {
    2004:	0773      	lsls	r3, r6, #29
    2006:	d565      	bpl.n	20d4 <STACK_SIZE+0xd4>

		if (module->remaining_rx_buffer_length) {
    2008:	8dab      	ldrh	r3, [r5, #44]	; 0x2c
    200a:	b29b      	uxth	r3, r3
    200c:	2b00      	cmp	r3, #0
    200e:	d05f      	beq.n	20d0 <STACK_SIZE+0xd0>
			/* Read out the status code and mask away all but the 4 LSBs*/
			error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
    2010:	8b63      	ldrh	r3, [r4, #26]
    2012:	b2db      	uxtb	r3, r3
#if !SAMD20
			/* CTS status should not be considered as an error */
			if(error_code & SERCOM_USART_STATUS_CTS) {
    2014:	071a      	lsls	r2, r3, #28
    2016:	d414      	bmi.n	2042 <STACK_SIZE+0x42>
			error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
    2018:	223f      	movs	r2, #63	; 0x3f
    201a:	4013      	ands	r3, r2
			if(error_code & SERCOM_USART_STATUS_TXE) {
				error_code &= ~SERCOM_USART_STATUS_TXE;
			}
#endif
			/* Check if an error has occurred during the receiving */
			if (error_code) {
    201c:	2b00      	cmp	r3, #0
    201e:	d034      	beq.n	208a <STACK_SIZE+0x8a>
				/* Check which error occurred */
				if (error_code & SERCOM_USART_STATUS_FERR) {
    2020:	079a      	lsls	r2, r3, #30
    2022:	d511      	bpl.n	2048 <STACK_SIZE+0x48>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_BAD_FORMAT;
    2024:	221a      	movs	r2, #26
    2026:	2332      	movs	r3, #50	; 0x32
    2028:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_FERR;
    202a:	3b30      	subs	r3, #48	; 0x30
    202c:	8363      	strh	r3, [r4, #26]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
				}
#endif

				/* Run callback if registered and enabled */
				if (callback_status
    202e:	077b      	lsls	r3, r7, #29
    2030:	d550      	bpl.n	20d4 <STACK_SIZE+0xd4>
						& (1 << USART_CALLBACK_ERROR)) {
					(*(module->callback[USART_CALLBACK_ERROR]))(module);
    2032:	0028      	movs	r0, r5
    2034:	696b      	ldr	r3, [r5, #20]
    2036:	4798      	blx	r3
    2038:	e04c      	b.n	20d4 <STACK_SIZE+0xd4>
			(*(module->callback[USART_CALLBACK_BUFFER_TRANSMITTED]))(module);
    203a:	0028      	movs	r0, r5
    203c:	68eb      	ldr	r3, [r5, #12]
    203e:	4798      	blx	r3
    2040:	e7e0      	b.n	2004 <STACK_SIZE+0x4>
				error_code &= ~SERCOM_USART_STATUS_CTS;
    2042:	2237      	movs	r2, #55	; 0x37
    2044:	4013      	ands	r3, r2
    2046:	e7e9      	b.n	201c <STACK_SIZE+0x1c>
				} else if (error_code & SERCOM_USART_STATUS_BUFOVF) {
    2048:	075a      	lsls	r2, r3, #29
    204a:	d505      	bpl.n	2058 <STACK_SIZE+0x58>
					module->rx_status = STATUS_ERR_OVERFLOW;
    204c:	221e      	movs	r2, #30
    204e:	2332      	movs	r3, #50	; 0x32
    2050:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_BUFOVF;
    2052:	3b2e      	subs	r3, #46	; 0x2e
    2054:	8363      	strh	r3, [r4, #26]
    2056:	e7ea      	b.n	202e <STACK_SIZE+0x2e>
				} else if (error_code & SERCOM_USART_STATUS_PERR) {
    2058:	07da      	lsls	r2, r3, #31
    205a:	d505      	bpl.n	2068 <STACK_SIZE+0x68>
					module->rx_status = STATUS_ERR_BAD_DATA;
    205c:	2213      	movs	r2, #19
    205e:	2332      	movs	r3, #50	; 0x32
    2060:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_PERR;
    2062:	3b31      	subs	r3, #49	; 0x31
    2064:	8363      	strh	r3, [r4, #26]
    2066:	e7e2      	b.n	202e <STACK_SIZE+0x2e>
				else if (error_code & SERCOM_USART_STATUS_ISF) {
    2068:	06da      	lsls	r2, r3, #27
    206a:	d505      	bpl.n	2078 <STACK_SIZE+0x78>
					module->rx_status = STATUS_ERR_PROTOCOL;
    206c:	2242      	movs	r2, #66	; 0x42
    206e:	2332      	movs	r3, #50	; 0x32
    2070:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_ISF;
    2072:	3b22      	subs	r3, #34	; 0x22
    2074:	8363      	strh	r3, [r4, #26]
    2076:	e7da      	b.n	202e <STACK_SIZE+0x2e>
				else if (error_code & SERCOM_USART_STATUS_COLL) {
    2078:	2220      	movs	r2, #32
    207a:	421a      	tst	r2, r3
    207c:	d0d7      	beq.n	202e <STACK_SIZE+0x2e>
					module->rx_status = STATUS_ERR_PACKET_COLLISION;
    207e:	3221      	adds	r2, #33	; 0x21
    2080:	2332      	movs	r3, #50	; 0x32
    2082:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
    2084:	3b12      	subs	r3, #18
    2086:	8363      	strh	r3, [r4, #26]
    2088:	e7d1      	b.n	202e <STACK_SIZE+0x2e>

			} else {

				/* Read current packet from DATA register,
				 * increment buffer pointer and decrement buffer length */
				uint16_t received_data = (usart_hw->DATA.reg & SERCOM_USART_DATA_MASK);
    208a:	8d23      	ldrh	r3, [r4, #40]	; 0x28
    208c:	05db      	lsls	r3, r3, #23
    208e:	0ddb      	lsrs	r3, r3, #23

				/* Read value will be at least 8-bits long */
				*(module->rx_buffer_ptr) = received_data;
    2090:	b2da      	uxtb	r2, r3
    2092:	6a69      	ldr	r1, [r5, #36]	; 0x24
    2094:	700a      	strb	r2, [r1, #0]
				/* Increment 8-bit pointer */
				module->rx_buffer_ptr += 1;
    2096:	6a6a      	ldr	r2, [r5, #36]	; 0x24
    2098:	1c51      	adds	r1, r2, #1
    209a:	6269      	str	r1, [r5, #36]	; 0x24

				if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
    209c:	7969      	ldrb	r1, [r5, #5]
    209e:	2901      	cmp	r1, #1
    20a0:	d010      	beq.n	20c4 <STACK_SIZE+0xc4>
					/* Increment 8-bit pointer */
					module->rx_buffer_ptr += 1;
				}

				/* Check if the last character have been received */
				if(--(module->remaining_rx_buffer_length) == 0) {
    20a2:	8dab      	ldrh	r3, [r5, #44]	; 0x2c
    20a4:	3b01      	subs	r3, #1
    20a6:	b29b      	uxth	r3, r3
    20a8:	85ab      	strh	r3, [r5, #44]	; 0x2c
    20aa:	2b00      	cmp	r3, #0
    20ac:	d112      	bne.n	20d4 <STACK_SIZE+0xd4>
					/* Disable RX Complete Interrupt,
					 * and set STATUS_OK */
					usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
    20ae:	3304      	adds	r3, #4
    20b0:	7523      	strb	r3, [r4, #20]
					module->rx_status = STATUS_OK;
    20b2:	2200      	movs	r2, #0
    20b4:	332e      	adds	r3, #46	; 0x2e
    20b6:	54ea      	strb	r2, [r5, r3]

					/* Run callback if registered and enabled */
					if (callback_status
    20b8:	07bb      	lsls	r3, r7, #30
    20ba:	d50b      	bpl.n	20d4 <STACK_SIZE+0xd4>
							& (1 << USART_CALLBACK_BUFFER_RECEIVED)) {
						(*(module->callback[USART_CALLBACK_BUFFER_RECEIVED]))(module);
    20bc:	0028      	movs	r0, r5
    20be:	692b      	ldr	r3, [r5, #16]
    20c0:	4798      	blx	r3
    20c2:	e007      	b.n	20d4 <STACK_SIZE+0xd4>
					*(module->rx_buffer_ptr) = (received_data >> 8);
    20c4:	0a1b      	lsrs	r3, r3, #8
    20c6:	7053      	strb	r3, [r2, #1]
					module->rx_buffer_ptr += 1;
    20c8:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    20ca:	3301      	adds	r3, #1
    20cc:	626b      	str	r3, [r5, #36]	; 0x24
    20ce:	e7e8      	b.n	20a2 <STACK_SIZE+0xa2>
					}
				}
			}
		} else {
			/* This should not happen. Disable Receive Complete interrupt. */
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
    20d0:	2304      	movs	r3, #4
    20d2:	7523      	strb	r3, [r4, #20]
		}
	}

#ifdef FEATURE_USART_HARDWARE_FLOW_CONTROL
	if (interrupt_status & SERCOM_USART_INTFLAG_CTSIC) {
    20d4:	06f3      	lsls	r3, r6, #27
    20d6:	d504      	bpl.n	20e2 <STACK_SIZE+0xe2>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_CTSIC;
    20d8:	2310      	movs	r3, #16
    20da:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_CTSIC;
    20dc:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_CTS_INPUT_CHANGE)) {
    20de:	06fb      	lsls	r3, r7, #27
    20e0:	d40e      	bmi.n	2100 <STACK_SIZE+0x100>
		}
	}
#endif

#ifdef FEATURE_USART_LIN_SLAVE
	if (interrupt_status & SERCOM_USART_INTFLAG_RXBRK) {
    20e2:	06b3      	lsls	r3, r6, #26
    20e4:	d504      	bpl.n	20f0 <STACK_SIZE+0xf0>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXBRK;
    20e6:	2320      	movs	r3, #32
    20e8:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXBRK;
    20ea:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BREAK_RECEIVED)) {
    20ec:	073b      	lsls	r3, r7, #28
    20ee:	d40b      	bmi.n	2108 <STACK_SIZE+0x108>
		}
	}
#endif

#ifdef FEATURE_USART_START_FRAME_DECTION
	if (interrupt_status & SERCOM_USART_INTFLAG_RXS) {
    20f0:	0733      	lsls	r3, r6, #28
    20f2:	d504      	bpl.n	20fe <STACK_SIZE+0xfe>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXS;
    20f4:	2308      	movs	r3, #8
    20f6:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXS;
    20f8:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_START_RECEIVED)) {
    20fa:	06bb      	lsls	r3, r7, #26
    20fc:	d408      	bmi.n	2110 <STACK_SIZE+0x110>
			(*(module->callback[USART_CALLBACK_START_RECEIVED]))(module);
		}
	}
#endif
}
    20fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			(*(module->callback[USART_CALLBACK_CTS_INPUT_CHANGE]))(module);
    2100:	0028      	movs	r0, r5
    2102:	69eb      	ldr	r3, [r5, #28]
    2104:	4798      	blx	r3
    2106:	e7ec      	b.n	20e2 <STACK_SIZE+0xe2>
			(*(module->callback[USART_CALLBACK_BREAK_RECEIVED]))(module);
    2108:	0028      	movs	r0, r5
    210a:	69ab      	ldr	r3, [r5, #24]
    210c:	4798      	blx	r3
    210e:	e7ef      	b.n	20f0 <STACK_SIZE+0xf0>
			(*(module->callback[USART_CALLBACK_START_RECEIVED]))(module);
    2110:	6a2b      	ldr	r3, [r5, #32]
    2112:	0028      	movs	r0, r5
    2114:	4798      	blx	r3
}
    2116:	e7f2      	b.n	20fe <STACK_SIZE+0xfe>
    2118:	20000068 	.word	0x20000068

0000211c <_sercom_default_handler>:
 */
static void _sercom_default_handler(
		const uint8_t instance)
{
	Assert(false);
}
    211c:	4770      	bx	lr
	...

00002120 <_sercom_set_handler>:
 * \param[in]  interrupt_handler  Pointer to instance callback handler.
 */
void _sercom_set_handler(
		const uint8_t instance,
		const sercom_handler_t interrupt_handler)
{
    2120:	b5f0      	push	{r4, r5, r6, r7, lr}
	/* Initialize handlers with default handler and device instances with 0 */
	if (_handler_table_initialized == false) {
    2122:	4b0a      	ldr	r3, [pc, #40]	; (214c <_sercom_set_handler+0x2c>)
    2124:	781b      	ldrb	r3, [r3, #0]
    2126:	2b00      	cmp	r3, #0
    2128:	d10c      	bne.n	2144 <_sercom_set_handler+0x24>
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
    212a:	4f09      	ldr	r7, [pc, #36]	; (2150 <_sercom_set_handler+0x30>)
    212c:	4e09      	ldr	r6, [pc, #36]	; (2154 <_sercom_set_handler+0x34>)
			_sercom_instances[i] = NULL;
    212e:	4d0a      	ldr	r5, [pc, #40]	; (2158 <_sercom_set_handler+0x38>)
    2130:	2400      	movs	r4, #0
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
    2132:	51de      	str	r6, [r3, r7]
			_sercom_instances[i] = NULL;
    2134:	195a      	adds	r2, r3, r5
    2136:	6014      	str	r4, [r2, #0]
    2138:	3304      	adds	r3, #4
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    213a:	2b18      	cmp	r3, #24
    213c:	d1f9      	bne.n	2132 <_sercom_set_handler+0x12>
		}

		_handler_table_initialized = true;
    213e:	2201      	movs	r2, #1
    2140:	4b02      	ldr	r3, [pc, #8]	; (214c <_sercom_set_handler+0x2c>)
    2142:	701a      	strb	r2, [r3, #0]
	}

	/* Save interrupt handler */
	_sercom_interrupt_handlers[instance] = interrupt_handler;
    2144:	0080      	lsls	r0, r0, #2
    2146:	4b02      	ldr	r3, [pc, #8]	; (2150 <_sercom_set_handler+0x30>)
    2148:	50c1      	str	r1, [r0, r3]
}
    214a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    214c:	2000002a 	.word	0x2000002a
    2150:	2000002c 	.word	0x2000002c
    2154:	0000211d 	.word	0x0000211d
    2158:	20000068 	.word	0x20000068

0000215c <_sercom_get_interrupt_vector>:
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM6
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM7
 */
enum system_interrupt_vector _sercom_get_interrupt_vector(
		Sercom *const sercom_instance)
{
    215c:	b500      	push	{lr}
    215e:	b083      	sub	sp, #12
	const uint8_t sercom_int_vectors[SERCOM_INST_NUM] =
    2160:	2309      	movs	r3, #9
    2162:	466a      	mov	r2, sp
    2164:	7013      	strb	r3, [r2, #0]
    2166:	3301      	adds	r3, #1
    2168:	7053      	strb	r3, [r2, #1]
    216a:	3301      	adds	r3, #1
    216c:	7093      	strb	r3, [r2, #2]
    216e:	3301      	adds	r3, #1
    2170:	70d3      	strb	r3, [r2, #3]
    2172:	3301      	adds	r3, #1
    2174:	7113      	strb	r3, [r2, #4]
    2176:	3301      	adds	r3, #1
    2178:	7153      	strb	r3, [r2, #5]
		{
			MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_VECT_NUM, ~)
		};

	/* Retrieve the index of the SERCOM being requested */
	uint8_t instance_index = _sercom_get_sercom_inst_index(sercom_instance);
    217a:	4b03      	ldr	r3, [pc, #12]	; (2188 <_sercom_get_interrupt_vector+0x2c>)
    217c:	4798      	blx	r3

	/* Get the vector number from the lookup table for the requested SERCOM */
	return (enum system_interrupt_vector)sercom_int_vectors[instance_index];
    217e:	466b      	mov	r3, sp
    2180:	5618      	ldrsb	r0, [r3, r0]
}
    2182:	b003      	add	sp, #12
    2184:	bd00      	pop	{pc}
    2186:	46c0      	nop			; (mov r8, r8)
    2188:	0000118d 	.word	0x0000118d

0000218c <SERCOM0_Handler>:

/** Auto-generate a set of interrupt handlers for each SERCOM in the device */
MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_HANDLER, ~)
    218c:	b510      	push	{r4, lr}
    218e:	4b02      	ldr	r3, [pc, #8]	; (2198 <SERCOM0_Handler+0xc>)
    2190:	681b      	ldr	r3, [r3, #0]
    2192:	2000      	movs	r0, #0
    2194:	4798      	blx	r3
    2196:	bd10      	pop	{r4, pc}
    2198:	2000002c 	.word	0x2000002c

0000219c <SERCOM1_Handler>:
    219c:	b510      	push	{r4, lr}
    219e:	4b02      	ldr	r3, [pc, #8]	; (21a8 <SERCOM1_Handler+0xc>)
    21a0:	685b      	ldr	r3, [r3, #4]
    21a2:	2001      	movs	r0, #1
    21a4:	4798      	blx	r3
    21a6:	bd10      	pop	{r4, pc}
    21a8:	2000002c 	.word	0x2000002c

000021ac <SERCOM2_Handler>:
    21ac:	b510      	push	{r4, lr}
    21ae:	4b02      	ldr	r3, [pc, #8]	; (21b8 <SERCOM2_Handler+0xc>)
    21b0:	689b      	ldr	r3, [r3, #8]
    21b2:	2002      	movs	r0, #2
    21b4:	4798      	blx	r3
    21b6:	bd10      	pop	{r4, pc}
    21b8:	2000002c 	.word	0x2000002c

000021bc <SERCOM3_Handler>:
    21bc:	b510      	push	{r4, lr}
    21be:	4b02      	ldr	r3, [pc, #8]	; (21c8 <SERCOM3_Handler+0xc>)
    21c0:	68db      	ldr	r3, [r3, #12]
    21c2:	2003      	movs	r0, #3
    21c4:	4798      	blx	r3
    21c6:	bd10      	pop	{r4, pc}
    21c8:	2000002c 	.word	0x2000002c

000021cc <SERCOM4_Handler>:
    21cc:	b510      	push	{r4, lr}
    21ce:	4b02      	ldr	r3, [pc, #8]	; (21d8 <SERCOM4_Handler+0xc>)
    21d0:	691b      	ldr	r3, [r3, #16]
    21d2:	2004      	movs	r0, #4
    21d4:	4798      	blx	r3
    21d6:	bd10      	pop	{r4, pc}
    21d8:	2000002c 	.word	0x2000002c

000021dc <SERCOM5_Handler>:
    21dc:	b510      	push	{r4, lr}
    21de:	4b02      	ldr	r3, [pc, #8]	; (21e8 <SERCOM5_Handler+0xc>)
    21e0:	695b      	ldr	r3, [r3, #20]
    21e2:	2005      	movs	r0, #5
    21e4:	4798      	blx	r3
    21e6:	bd10      	pop	{r4, pc}
    21e8:	2000002c 	.word	0x2000002c

000021ec <cpu_irq_enter_critical>:
volatile bool g_interrupt_enabled = true;
#endif

void cpu_irq_enter_critical(void)
{
	if (cpu_irq_critical_section_counter == 0) {
    21ec:	4b0c      	ldr	r3, [pc, #48]	; (2220 <cpu_irq_enter_critical+0x34>)
    21ee:	681b      	ldr	r3, [r3, #0]
    21f0:	2b00      	cmp	r3, #0
    21f2:	d106      	bne.n	2202 <cpu_irq_enter_critical+0x16>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
    21f4:	f3ef 8310 	mrs	r3, PRIMASK
		if (cpu_irq_is_enabled()) {
    21f8:	2b00      	cmp	r3, #0
    21fa:	d007      	beq.n	220c <cpu_irq_enter_critical+0x20>
			cpu_irq_disable();
			cpu_irq_prev_interrupt_state = true;
		} else {
			/* Make sure the to save the prev state as false */
			cpu_irq_prev_interrupt_state = false;
    21fc:	2200      	movs	r2, #0
    21fe:	4b09      	ldr	r3, [pc, #36]	; (2224 <cpu_irq_enter_critical+0x38>)
    2200:	701a      	strb	r2, [r3, #0]
		}

	}

	cpu_irq_critical_section_counter++;
    2202:	4a07      	ldr	r2, [pc, #28]	; (2220 <cpu_irq_enter_critical+0x34>)
    2204:	6813      	ldr	r3, [r2, #0]
    2206:	3301      	adds	r3, #1
    2208:	6013      	str	r3, [r2, #0]
}
    220a:	4770      	bx	lr
  __ASM volatile ("cpsid i" : : : "memory");
    220c:	b672      	cpsid	i
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
    220e:	f3bf 8f5f 	dmb	sy
			cpu_irq_disable();
    2212:	2200      	movs	r2, #0
    2214:	4b04      	ldr	r3, [pc, #16]	; (2228 <cpu_irq_enter_critical+0x3c>)
    2216:	701a      	strb	r2, [r3, #0]
			cpu_irq_prev_interrupt_state = true;
    2218:	3201      	adds	r2, #1
    221a:	4b02      	ldr	r3, [pc, #8]	; (2224 <cpu_irq_enter_critical+0x38>)
    221c:	701a      	strb	r2, [r3, #0]
    221e:	e7f0      	b.n	2202 <cpu_irq_enter_critical+0x16>
    2220:	20000044 	.word	0x20000044
    2224:	20000048 	.word	0x20000048
    2228:	20000008 	.word	0x20000008

0000222c <cpu_irq_leave_critical>:
void cpu_irq_leave_critical(void)
{
	/* Check if the user is trying to leave a critical section when not in a critical section */
	Assert(cpu_irq_critical_section_counter > 0);

	cpu_irq_critical_section_counter--;
    222c:	4b08      	ldr	r3, [pc, #32]	; (2250 <cpu_irq_leave_critical+0x24>)
    222e:	681a      	ldr	r2, [r3, #0]
    2230:	3a01      	subs	r2, #1
    2232:	601a      	str	r2, [r3, #0]

	/* Only enable global interrupts when the counter reaches 0 and the state of the global interrupt flag
	   was enabled when entering critical state */
	if ((cpu_irq_critical_section_counter == 0) && (cpu_irq_prev_interrupt_state)) {
    2234:	681b      	ldr	r3, [r3, #0]
    2236:	2b00      	cmp	r3, #0
    2238:	d109      	bne.n	224e <cpu_irq_leave_critical+0x22>
    223a:	4b06      	ldr	r3, [pc, #24]	; (2254 <cpu_irq_leave_critical+0x28>)
    223c:	781b      	ldrb	r3, [r3, #0]
    223e:	2b00      	cmp	r3, #0
    2240:	d005      	beq.n	224e <cpu_irq_leave_critical+0x22>
		cpu_irq_enable();
    2242:	2201      	movs	r2, #1
    2244:	4b04      	ldr	r3, [pc, #16]	; (2258 <cpu_irq_leave_critical+0x2c>)
    2246:	701a      	strb	r2, [r3, #0]
    2248:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    224c:	b662      	cpsie	i
	}
}
    224e:	4770      	bx	lr
    2250:	20000044 	.word	0x20000044
    2254:	20000048 	.word	0x20000048
    2258:	20000008 	.word	0x20000008

0000225c <system_board_init>:
void board_init(void);
#  pragma weak board_init=system_board_init
#endif

void system_board_init(void)
{
    225c:	b5f0      	push	{r4, r5, r6, r7, lr}
    225e:	b083      	sub	sp, #12
	config->input_pull = PORT_PIN_PULL_UP;
    2260:	ac01      	add	r4, sp, #4
    2262:	2501      	movs	r5, #1
    2264:	7065      	strb	r5, [r4, #1]
	config->powersave  = false;
    2266:	2700      	movs	r7, #0
    2268:	70a7      	strb	r7, [r4, #2]
	struct port_config pin_conf;
	port_get_config_defaults(&pin_conf);

	/* Configure LEDs as outputs, turn them off */
	pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
    226a:	7025      	strb	r5, [r4, #0]
	port_pin_set_config(LED_0_PIN, &pin_conf);
    226c:	0021      	movs	r1, r4
    226e:	2017      	movs	r0, #23
    2270:	4e06      	ldr	r6, [pc, #24]	; (228c <system_board_init+0x30>)
    2272:	47b0      	blx	r6
		port_base->OUTSET.reg = pin_mask;
    2274:	2280      	movs	r2, #128	; 0x80
    2276:	0412      	lsls	r2, r2, #16
    2278:	4b05      	ldr	r3, [pc, #20]	; (2290 <system_board_init+0x34>)
    227a:	619a      	str	r2, [r3, #24]
	port_pin_set_output_level(LED_0_PIN, LED_0_INACTIVE);

	/* Set buttons as inputs */
	pin_conf.direction  = PORT_PIN_DIR_INPUT;
    227c:	7027      	strb	r7, [r4, #0]
	pin_conf.input_pull = PORT_PIN_PULL_UP;
    227e:	7065      	strb	r5, [r4, #1]
	port_pin_set_config(BUTTON_0_PIN, &pin_conf);
    2280:	0021      	movs	r1, r4
    2282:	2037      	movs	r0, #55	; 0x37
    2284:	47b0      	blx	r6
}
    2286:	b003      	add	sp, #12
    2288:	bdf0      	pop	{r4, r5, r6, r7, pc}
    228a:	46c0      	nop			; (mov r8, r8)
    228c:	00002295 	.word	0x00002295
    2290:	41004400 	.word	0x41004400

00002294 <port_pin_set_config>:
 *  \param[in] config    Configuration settings for the pin
 */
void port_pin_set_config(
		const uint8_t gpio_pin,
		const struct port_config *const config)
{
    2294:	b500      	push	{lr}
    2296:	b083      	sub	sp, #12
	config->mux_position = SYSTEM_PINMUX_GPIO;
    2298:	ab01      	add	r3, sp, #4
    229a:	2280      	movs	r2, #128	; 0x80
    229c:	701a      	strb	r2, [r3, #0]

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);

	pinmux_config.mux_position = SYSTEM_PINMUX_GPIO;
	pinmux_config.direction    = (enum system_pinmux_pin_dir)config->direction;
    229e:	780a      	ldrb	r2, [r1, #0]
    22a0:	705a      	strb	r2, [r3, #1]
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->input_pull;
    22a2:	784a      	ldrb	r2, [r1, #1]
    22a4:	709a      	strb	r2, [r3, #2]
	pinmux_config.powersave    = config->powersave;
    22a6:	788a      	ldrb	r2, [r1, #2]
    22a8:	70da      	strb	r2, [r3, #3]

	system_pinmux_pin_set_config(gpio_pin, &pinmux_config);
    22aa:	0019      	movs	r1, r3
    22ac:	4b01      	ldr	r3, [pc, #4]	; (22b4 <port_pin_set_config+0x20>)
    22ae:	4798      	blx	r3
}
    22b0:	b003      	add	sp, #12
    22b2:	bd00      	pop	{pc}
    22b4:	000029f9 	.word	0x000029f9

000022b8 <system_clock_source_get_hz>:
 *
 * \returns Frequency of the given clock source, in Hz.
 */
uint32_t system_clock_source_get_hz(
		const enum system_clock_source clock_source)
{
    22b8:	b510      	push	{r4, lr}
	switch (clock_source) {
    22ba:	2808      	cmp	r0, #8
    22bc:	d803      	bhi.n	22c6 <system_clock_source_get_hz+0xe>
    22be:	0080      	lsls	r0, r0, #2
    22c0:	4b1c      	ldr	r3, [pc, #112]	; (2334 <system_clock_source_get_hz+0x7c>)
    22c2:	581b      	ldr	r3, [r3, r0]
    22c4:	469f      	mov	pc, r3

		return _system_clock_inst.dpll.frequency;
#endif

	default:
		return 0;
    22c6:	2000      	movs	r0, #0
    22c8:	e032      	b.n	2330 <system_clock_source_get_hz+0x78>
		return _system_clock_inst.xosc.frequency;
    22ca:	4b1b      	ldr	r3, [pc, #108]	; (2338 <system_clock_source_get_hz+0x80>)
    22cc:	6918      	ldr	r0, [r3, #16]
    22ce:	e02f      	b.n	2330 <system_clock_source_get_hz+0x78>
		return 8000000UL >> SYSCTRL->OSC8M.bit.PRESC;
    22d0:	4b1a      	ldr	r3, [pc, #104]	; (233c <system_clock_source_get_hz+0x84>)
    22d2:	6a1b      	ldr	r3, [r3, #32]
    22d4:	059b      	lsls	r3, r3, #22
    22d6:	0f9b      	lsrs	r3, r3, #30
    22d8:	4819      	ldr	r0, [pc, #100]	; (2340 <system_clock_source_get_hz+0x88>)
    22da:	40d8      	lsrs	r0, r3
    22dc:	e028      	b.n	2330 <system_clock_source_get_hz+0x78>
		return _system_clock_inst.xosc32k.frequency;
    22de:	4b16      	ldr	r3, [pc, #88]	; (2338 <system_clock_source_get_hz+0x80>)
    22e0:	6958      	ldr	r0, [r3, #20]
    22e2:	e025      	b.n	2330 <system_clock_source_get_hz+0x78>
		if (!(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_ENABLE))
    22e4:	4b14      	ldr	r3, [pc, #80]	; (2338 <system_clock_source_get_hz+0x80>)
    22e6:	681b      	ldr	r3, [r3, #0]
			return 0;
    22e8:	2000      	movs	r0, #0
		if (!(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_ENABLE))
    22ea:	079b      	lsls	r3, r3, #30
    22ec:	d520      	bpl.n	2330 <system_clock_source_get_hz+0x78>
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    22ee:	4913      	ldr	r1, [pc, #76]	; (233c <system_clock_source_get_hz+0x84>)
    22f0:	2210      	movs	r2, #16
    22f2:	68cb      	ldr	r3, [r1, #12]
    22f4:	421a      	tst	r2, r3
    22f6:	d0fc      	beq.n	22f2 <system_clock_source_get_hz+0x3a>
		switch(_system_clock_inst.dfll.control &
    22f8:	4b0f      	ldr	r3, [pc, #60]	; (2338 <system_clock_source_get_hz+0x80>)
    22fa:	681a      	ldr	r2, [r3, #0]
    22fc:	2324      	movs	r3, #36	; 0x24
    22fe:	4013      	ands	r3, r2
    2300:	2b04      	cmp	r3, #4
    2302:	d001      	beq.n	2308 <system_clock_source_get_hz+0x50>
			return 48000000UL;
    2304:	480f      	ldr	r0, [pc, #60]	; (2344 <system_clock_source_get_hz+0x8c>)
    2306:	e013      	b.n	2330 <system_clock_source_get_hz+0x78>
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
    2308:	2000      	movs	r0, #0
    230a:	4b0f      	ldr	r3, [pc, #60]	; (2348 <system_clock_source_get_hz+0x90>)
    230c:	4798      	blx	r3
					(_system_clock_inst.dfll.mul & 0xffff);
    230e:	4b0a      	ldr	r3, [pc, #40]	; (2338 <system_clock_source_get_hz+0x80>)
    2310:	689b      	ldr	r3, [r3, #8]
    2312:	041b      	lsls	r3, r3, #16
    2314:	0c1b      	lsrs	r3, r3, #16
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
    2316:	4358      	muls	r0, r3
    2318:	e00a      	b.n	2330 <system_clock_source_get_hz+0x78>
		if (!(SYSCTRL->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_ENABLE)) {
    231a:	2350      	movs	r3, #80	; 0x50
    231c:	4a07      	ldr	r2, [pc, #28]	; (233c <system_clock_source_get_hz+0x84>)
    231e:	5cd3      	ldrb	r3, [r2, r3]
			return 0;
    2320:	2000      	movs	r0, #0
		if (!(SYSCTRL->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_ENABLE)) {
    2322:	075b      	lsls	r3, r3, #29
    2324:	d504      	bpl.n	2330 <system_clock_source_get_hz+0x78>
		return _system_clock_inst.dpll.frequency;
    2326:	4b04      	ldr	r3, [pc, #16]	; (2338 <system_clock_source_get_hz+0x80>)
    2328:	68d8      	ldr	r0, [r3, #12]
    232a:	e001      	b.n	2330 <system_clock_source_get_hz+0x78>
		return 32768UL;
    232c:	2080      	movs	r0, #128	; 0x80
    232e:	0200      	lsls	r0, r0, #8
	}
}
    2330:	bd10      	pop	{r4, pc}
    2332:	46c0      	nop			; (mov r8, r8)
    2334:	00004c40 	.word	0x00004c40
    2338:	2000004c 	.word	0x2000004c
    233c:	40000800 	.word	0x40000800
    2340:	007a1200 	.word	0x007a1200
    2344:	02dc6c00 	.word	0x02dc6c00
    2348:	0000291d 	.word	0x0000291d

0000234c <system_clock_source_osc8m_set_config>:
 *
 * \param[in] config  OSC8M configuration structure containing the new config
 */
void system_clock_source_osc8m_set_config(
		struct system_clock_source_osc8m_config *const config)
{
    234c:	b570      	push	{r4, r5, r6, lr}
	SYSCTRL_OSC8M_Type temp = SYSCTRL->OSC8M;
    234e:	490c      	ldr	r1, [pc, #48]	; (2380 <system_clock_source_osc8m_set_config+0x34>)
    2350:	6a0b      	ldr	r3, [r1, #32]

	/* Use temporary struct to reduce register access */
	temp.bit.PRESC    = config->prescaler;
    2352:	7804      	ldrb	r4, [r0, #0]
	temp.bit.ONDEMAND = config->on_demand;
    2354:	7885      	ldrb	r5, [r0, #2]
	temp.bit.RUNSTDBY = config->run_in_standby;

	SYSCTRL->OSC8M = temp;
    2356:	7840      	ldrb	r0, [r0, #1]
    2358:	2201      	movs	r2, #1
    235a:	4010      	ands	r0, r2
    235c:	0180      	lsls	r0, r0, #6
    235e:	2640      	movs	r6, #64	; 0x40
    2360:	43b3      	bics	r3, r6
    2362:	4303      	orrs	r3, r0
    2364:	402a      	ands	r2, r5
    2366:	01d2      	lsls	r2, r2, #7
    2368:	2080      	movs	r0, #128	; 0x80
    236a:	4383      	bics	r3, r0
    236c:	4313      	orrs	r3, r2
    236e:	2203      	movs	r2, #3
    2370:	4022      	ands	r2, r4
    2372:	0212      	lsls	r2, r2, #8
    2374:	4803      	ldr	r0, [pc, #12]	; (2384 <system_clock_source_osc8m_set_config+0x38>)
    2376:	4003      	ands	r3, r0
    2378:	4313      	orrs	r3, r2
    237a:	620b      	str	r3, [r1, #32]
}
    237c:	bd70      	pop	{r4, r5, r6, pc}
    237e:	46c0      	nop			; (mov r8, r8)
    2380:	40000800 	.word	0x40000800
    2384:	fffffcff 	.word	0xfffffcff

00002388 <system_clock_source_xosc32k_set_config>:
 *
 * \param[in] config  XOSC32K configuration structure containing the new config
 */
void system_clock_source_xosc32k_set_config(
		struct system_clock_source_xosc32k_config *const config)
{
    2388:	b5f0      	push	{r4, r5, r6, r7, lr}
    238a:	46de      	mov	lr, fp
    238c:	4657      	mov	r7, sl
    238e:	464e      	mov	r6, r9
    2390:	4645      	mov	r5, r8
    2392:	b5e0      	push	{r5, r6, r7, lr}
    2394:	0001      	movs	r1, r0
	SYSCTRL_XOSC32K_Type temp = SYSCTRL->XOSC32K;
    2396:	4b26      	ldr	r3, [pc, #152]	; (2430 <system_clock_source_xosc32k_set_config+0xa8>)
    2398:	469b      	mov	fp, r3
    239a:	8a9b      	ldrh	r3, [r3, #20]

	temp.bit.STARTUP = config->startup_time;
    239c:	7845      	ldrb	r5, [r0, #1]

	if (config->external_clock == SYSTEM_CLOCK_EXTERNAL_CRYSTAL) {
    239e:	7800      	ldrb	r0, [r0, #0]
    23a0:	4242      	negs	r2, r0
    23a2:	4142      	adcs	r2, r0
    23a4:	4691      	mov	r9, r2
		temp.bit.XTALEN = 1;
	} else {
		temp.bit.XTALEN = 0;
	}

	temp.bit.AAMPEN = config->auto_gain_control;
    23a6:	7888      	ldrb	r0, [r1, #2]
	temp.bit.EN1K = config->enable_1khz_output;
    23a8:	78ca      	ldrb	r2, [r1, #3]
    23aa:	4694      	mov	ip, r2
	temp.bit.EN32K = config->enable_32khz_output;
    23ac:	790a      	ldrb	r2, [r1, #4]
    23ae:	4690      	mov	r8, r2

	temp.bit.ONDEMAND = config->on_demand;
    23b0:	7b4e      	ldrb	r6, [r1, #13]
	temp.bit.RUNSTDBY = config->run_in_standby;
    23b2:	7b0f      	ldrb	r7, [r1, #12]
	temp.bit.WRTLOCK  = config->write_once;
    23b4:	7b8c      	ldrb	r4, [r1, #14]

	/* Cache the new frequency in case the user needs to check the current
	 * operating frequency later */
	_system_clock_inst.xosc32k.frequency = config->frequency;
    23b6:	688a      	ldr	r2, [r1, #8]
    23b8:	491e      	ldr	r1, [pc, #120]	; (2434 <system_clock_source_xosc32k_set_config+0xac>)
    23ba:	614a      	str	r2, [r1, #20]

	SYSCTRL->XOSC32K = temp;
    23bc:	2101      	movs	r1, #1
    23be:	464a      	mov	r2, r9
    23c0:	0092      	lsls	r2, r2, #2
    23c2:	4691      	mov	r9, r2
    23c4:	2204      	movs	r2, #4
    23c6:	4393      	bics	r3, r2
    23c8:	464a      	mov	r2, r9
    23ca:	4313      	orrs	r3, r2
    23cc:	4642      	mov	r2, r8
    23ce:	400a      	ands	r2, r1
    23d0:	00d2      	lsls	r2, r2, #3
    23d2:	4690      	mov	r8, r2
    23d4:	2208      	movs	r2, #8
    23d6:	4393      	bics	r3, r2
    23d8:	4642      	mov	r2, r8
    23da:	4313      	orrs	r3, r2
    23dc:	4662      	mov	r2, ip
    23de:	400a      	ands	r2, r1
    23e0:	0112      	lsls	r2, r2, #4
    23e2:	4694      	mov	ip, r2
    23e4:	2210      	movs	r2, #16
    23e6:	4393      	bics	r3, r2
    23e8:	4662      	mov	r2, ip
    23ea:	4313      	orrs	r3, r2
    23ec:	4008      	ands	r0, r1
    23ee:	0140      	lsls	r0, r0, #5
    23f0:	2220      	movs	r2, #32
    23f2:	4393      	bics	r3, r2
    23f4:	4303      	orrs	r3, r0
    23f6:	400f      	ands	r7, r1
    23f8:	01bf      	lsls	r7, r7, #6
    23fa:	2040      	movs	r0, #64	; 0x40
    23fc:	4383      	bics	r3, r0
    23fe:	433b      	orrs	r3, r7
    2400:	400e      	ands	r6, r1
    2402:	01f6      	lsls	r6, r6, #7
    2404:	3040      	adds	r0, #64	; 0x40
    2406:	4383      	bics	r3, r0
    2408:	4333      	orrs	r3, r6
    240a:	3879      	subs	r0, #121	; 0x79
    240c:	4005      	ands	r5, r0
    240e:	022d      	lsls	r5, r5, #8
    2410:	4809      	ldr	r0, [pc, #36]	; (2438 <system_clock_source_xosc32k_set_config+0xb0>)
    2412:	4003      	ands	r3, r0
    2414:	432b      	orrs	r3, r5
    2416:	4021      	ands	r1, r4
    2418:	0309      	lsls	r1, r1, #12
    241a:	4808      	ldr	r0, [pc, #32]	; (243c <system_clock_source_xosc32k_set_config+0xb4>)
    241c:	4003      	ands	r3, r0
    241e:	430b      	orrs	r3, r1
    2420:	465a      	mov	r2, fp
    2422:	8293      	strh	r3, [r2, #20]
}
    2424:	bc3c      	pop	{r2, r3, r4, r5}
    2426:	4690      	mov	r8, r2
    2428:	4699      	mov	r9, r3
    242a:	46a2      	mov	sl, r4
    242c:	46ab      	mov	fp, r5
    242e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2430:	40000800 	.word	0x40000800
    2434:	2000004c 	.word	0x2000004c
    2438:	fffff8ff 	.word	0xfffff8ff
    243c:	ffffefff 	.word	0xffffefff

00002440 <system_clock_source_dfll_set_config>:
 *
 * \param[in] config  DFLL configuration structure containing the new config
 */
void system_clock_source_dfll_set_config(
		struct system_clock_source_dfll_config *const config)
{
    2440:	b510      	push	{r4, lr}
	_system_clock_inst.dfll.val =
			SYSCTRL_DFLLVAL_COARSE(config->coarse_value) |
    2442:	7a03      	ldrb	r3, [r0, #8]
    2444:	069b      	lsls	r3, r3, #26
    2446:	0c1b      	lsrs	r3, r3, #16
			SYSCTRL_DFLLVAL_FINE(config->fine_value);
    2448:	8942      	ldrh	r2, [r0, #10]
    244a:	0592      	lsls	r2, r2, #22
    244c:	0d92      	lsrs	r2, r2, #22
			SYSCTRL_DFLLVAL_COARSE(config->coarse_value) |
    244e:	4313      	orrs	r3, r2
	_system_clock_inst.dfll.val =
    2450:	4918      	ldr	r1, [pc, #96]	; (24b4 <system_clock_source_dfll_set_config+0x74>)
    2452:	604b      	str	r3, [r1, #4]

	_system_clock_inst.dfll.control =
			(uint32_t)config->wakeup_lock     |
    2454:	7983      	ldrb	r3, [r0, #6]
    2456:	79c2      	ldrb	r2, [r0, #7]
    2458:	4313      	orrs	r3, r2
			(uint32_t)config->stable_tracking |
			(uint32_t)config->quick_lock      |
    245a:	8842      	ldrh	r2, [r0, #2]
    245c:	8884      	ldrh	r4, [r0, #4]
    245e:	4322      	orrs	r2, r4
    2460:	4313      	orrs	r3, r2
			(uint32_t)config->chill_cycle     |
			((uint32_t)config->on_demand << SYSCTRL_DFLLCTRL_ONDEMAND_Pos);
    2462:	7842      	ldrb	r2, [r0, #1]
    2464:	01d2      	lsls	r2, r2, #7
			(uint32_t)config->chill_cycle     |
    2466:	4313      	orrs	r3, r2
	_system_clock_inst.dfll.control =
    2468:	600b      	str	r3, [r1, #0]

	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
    246a:	7803      	ldrb	r3, [r0, #0]
    246c:	2b04      	cmp	r3, #4
    246e:	d011      	beq.n	2494 <system_clock_source_dfll_set_config+0x54>
				SYSCTRL_DFLLMUL_MUL(config->multiply_factor);

		/* Enable the closed loop mode */
		_system_clock_inst.dfll.control |= config->loop_mode;
	}
	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_USB_RECOVERY) {
    2470:	2b20      	cmp	r3, #32
    2472:	d10e      	bne.n	2492 <system_clock_source_dfll_set_config+0x52>

		_system_clock_inst.dfll.mul =
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
    2474:	7b03      	ldrb	r3, [r0, #12]
    2476:	069b      	lsls	r3, r3, #26
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
				SYSCTRL_DFLLMUL_MUL(config->multiply_factor);
    2478:	8a02      	ldrh	r2, [r0, #16]
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
    247a:	4313      	orrs	r3, r2
    247c:	89c2      	ldrh	r2, [r0, #14]
    247e:	0412      	lsls	r2, r2, #16
    2480:	490d      	ldr	r1, [pc, #52]	; (24b8 <system_clock_source_dfll_set_config+0x78>)
    2482:	400a      	ands	r2, r1
    2484:	4313      	orrs	r3, r2
		_system_clock_inst.dfll.mul =
    2486:	4a0b      	ldr	r2, [pc, #44]	; (24b4 <system_clock_source_dfll_set_config+0x74>)
    2488:	6093      	str	r3, [r2, #8]

		/* Enable the USB recovery mode */
		_system_clock_inst.dfll.control |= config->loop_mode |
    248a:	6811      	ldr	r1, [r2, #0]
    248c:	4b0b      	ldr	r3, [pc, #44]	; (24bc <system_clock_source_dfll_set_config+0x7c>)
    248e:	430b      	orrs	r3, r1
    2490:	6013      	str	r3, [r2, #0]
				SYSCTRL_DFLLCTRL_MODE | SYSCTRL_DFLLCTRL_BPLCKC;
	}
}
    2492:	bd10      	pop	{r4, pc}
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
    2494:	7b03      	ldrb	r3, [r0, #12]
    2496:	069b      	lsls	r3, r3, #26
				SYSCTRL_DFLLMUL_MUL(config->multiply_factor);
    2498:	8a02      	ldrh	r2, [r0, #16]
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
    249a:	4313      	orrs	r3, r2
    249c:	89c2      	ldrh	r2, [r0, #14]
    249e:	0412      	lsls	r2, r2, #16
    24a0:	4905      	ldr	r1, [pc, #20]	; (24b8 <system_clock_source_dfll_set_config+0x78>)
    24a2:	400a      	ands	r2, r1
    24a4:	4313      	orrs	r3, r2
		_system_clock_inst.dfll.mul =
    24a6:	4a03      	ldr	r2, [pc, #12]	; (24b4 <system_clock_source_dfll_set_config+0x74>)
    24a8:	6093      	str	r3, [r2, #8]
		_system_clock_inst.dfll.control |= config->loop_mode;
    24aa:	6813      	ldr	r3, [r2, #0]
    24ac:	2104      	movs	r1, #4
    24ae:	430b      	orrs	r3, r1
    24b0:	6013      	str	r3, [r2, #0]
    24b2:	e7ee      	b.n	2492 <system_clock_source_dfll_set_config+0x52>
    24b4:	2000004c 	.word	0x2000004c
    24b8:	03ff0000 	.word	0x03ff0000
    24bc:	00000424 	.word	0x00000424

000024c0 <system_clock_source_enable>:
 *                                 device
 */
enum status_code system_clock_source_enable(
		const enum system_clock_source clock_source)
{
	switch (clock_source) {
    24c0:	2808      	cmp	r0, #8
    24c2:	d803      	bhi.n	24cc <system_clock_source_enable+0xc>
    24c4:	0080      	lsls	r0, r0, #2
    24c6:	4b25      	ldr	r3, [pc, #148]	; (255c <system_clock_source_enable+0x9c>)
    24c8:	581b      	ldr	r3, [r3, r0]
    24ca:	469f      	mov	pc, r3
		/* Always enabled */
		return STATUS_OK;

	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    24cc:	2017      	movs	r0, #23
    24ce:	e044      	b.n	255a <system_clock_source_enable+0x9a>
		SYSCTRL->OSC8M.reg |= SYSCTRL_OSC8M_ENABLE;
    24d0:	4a23      	ldr	r2, [pc, #140]	; (2560 <system_clock_source_enable+0xa0>)
    24d2:	6a13      	ldr	r3, [r2, #32]
    24d4:	2102      	movs	r1, #2
    24d6:	430b      	orrs	r3, r1
    24d8:	6213      	str	r3, [r2, #32]
		return STATUS_OK;
    24da:	2000      	movs	r0, #0
    24dc:	e03d      	b.n	255a <system_clock_source_enable+0x9a>
		SYSCTRL->OSC32K.reg |= SYSCTRL_OSC32K_ENABLE;
    24de:	4a20      	ldr	r2, [pc, #128]	; (2560 <system_clock_source_enable+0xa0>)
    24e0:	6993      	ldr	r3, [r2, #24]
    24e2:	2102      	movs	r1, #2
    24e4:	430b      	orrs	r3, r1
    24e6:	6193      	str	r3, [r2, #24]
	}

	return STATUS_OK;
    24e8:	2000      	movs	r0, #0
		break;
    24ea:	e036      	b.n	255a <system_clock_source_enable+0x9a>
		SYSCTRL->XOSC.reg |= SYSCTRL_XOSC_ENABLE;
    24ec:	4a1c      	ldr	r2, [pc, #112]	; (2560 <system_clock_source_enable+0xa0>)
    24ee:	8a13      	ldrh	r3, [r2, #16]
    24f0:	2102      	movs	r1, #2
    24f2:	430b      	orrs	r3, r1
    24f4:	8213      	strh	r3, [r2, #16]
	return STATUS_OK;
    24f6:	2000      	movs	r0, #0
		break;
    24f8:	e02f      	b.n	255a <system_clock_source_enable+0x9a>
		SYSCTRL->XOSC32K.reg |= SYSCTRL_XOSC32K_ENABLE;
    24fa:	4a19      	ldr	r2, [pc, #100]	; (2560 <system_clock_source_enable+0xa0>)
    24fc:	8a93      	ldrh	r3, [r2, #20]
    24fe:	2102      	movs	r1, #2
    2500:	430b      	orrs	r3, r1
    2502:	8293      	strh	r3, [r2, #20]
	return STATUS_OK;
    2504:	2000      	movs	r0, #0
		break;
    2506:	e028      	b.n	255a <system_clock_source_enable+0x9a>
		_system_clock_inst.dfll.control |= SYSCTRL_DFLLCTRL_ENABLE;
    2508:	4916      	ldr	r1, [pc, #88]	; (2564 <system_clock_source_enable+0xa4>)
    250a:	680b      	ldr	r3, [r1, #0]
    250c:	2202      	movs	r2, #2
    250e:	4313      	orrs	r3, r2
    2510:	600b      	str	r3, [r1, #0]
	SYSCTRL->DFLLCTRL.reg = SYSCTRL_DFLLCTRL_ENABLE;
    2512:	4b13      	ldr	r3, [pc, #76]	; (2560 <system_clock_source_enable+0xa0>)
    2514:	849a      	strh	r2, [r3, #36]	; 0x24
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    2516:	0019      	movs	r1, r3
    2518:	320e      	adds	r2, #14
    251a:	68cb      	ldr	r3, [r1, #12]
    251c:	421a      	tst	r2, r3
    251e:	d0fc      	beq.n	251a <system_clock_source_enable+0x5a>
	SYSCTRL->DFLLMUL.reg = _system_clock_inst.dfll.mul;
    2520:	4a10      	ldr	r2, [pc, #64]	; (2564 <system_clock_source_enable+0xa4>)
    2522:	6891      	ldr	r1, [r2, #8]
    2524:	4b0e      	ldr	r3, [pc, #56]	; (2560 <system_clock_source_enable+0xa0>)
    2526:	62d9      	str	r1, [r3, #44]	; 0x2c
	SYSCTRL->DFLLVAL.reg = _system_clock_inst.dfll.val;
    2528:	6852      	ldr	r2, [r2, #4]
    252a:	629a      	str	r2, [r3, #40]	; 0x28
	SYSCTRL->DFLLCTRL.reg = 0;
    252c:	2200      	movs	r2, #0
    252e:	849a      	strh	r2, [r3, #36]	; 0x24
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    2530:	0019      	movs	r1, r3
    2532:	3210      	adds	r2, #16
    2534:	68cb      	ldr	r3, [r1, #12]
    2536:	421a      	tst	r2, r3
    2538:	d0fc      	beq.n	2534 <system_clock_source_enable+0x74>
	SYSCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control;
    253a:	4b0a      	ldr	r3, [pc, #40]	; (2564 <system_clock_source_enable+0xa4>)
    253c:	681b      	ldr	r3, [r3, #0]
    253e:	b29b      	uxth	r3, r3
    2540:	4a07      	ldr	r2, [pc, #28]	; (2560 <system_clock_source_enable+0xa0>)
    2542:	8493      	strh	r3, [r2, #36]	; 0x24
	return STATUS_OK;
    2544:	2000      	movs	r0, #0
    2546:	e008      	b.n	255a <system_clock_source_enable+0x9a>
		SYSCTRL->DPLLCTRLA.reg |= SYSCTRL_DPLLCTRLA_ENABLE;
    2548:	4905      	ldr	r1, [pc, #20]	; (2560 <system_clock_source_enable+0xa0>)
    254a:	2244      	movs	r2, #68	; 0x44
    254c:	5c8b      	ldrb	r3, [r1, r2]
    254e:	2002      	movs	r0, #2
    2550:	4303      	orrs	r3, r0
    2552:	548b      	strb	r3, [r1, r2]
	return STATUS_OK;
    2554:	2000      	movs	r0, #0
		break;
    2556:	e000      	b.n	255a <system_clock_source_enable+0x9a>
		return STATUS_OK;
    2558:	2000      	movs	r0, #0
}
    255a:	4770      	bx	lr
    255c:	00004c64 	.word	0x00004c64
    2560:	40000800 	.word	0x40000800
    2564:	2000004c 	.word	0x2000004c

00002568 <system_clock_init>:
 * \note OSC8M is always enabled and if user selects other clocks for GCLK generators,
 * the OSC8M default enable can be disabled after system_clock_init. Make sure the
 * clock switch successfully before disabling OSC8M.
 */
void system_clock_init(void)
{
    2568:	b5f0      	push	{r4, r5, r6, r7, lr}
    256a:	b08f      	sub	sp, #60	; 0x3c
	/* Various bits in the INTFLAG register can be set to one at startup.
	   This will ensure that these bits are cleared */
	SYSCTRL->INTFLAG.reg = SYSCTRL_INTFLAG_BOD33RDY | SYSCTRL_INTFLAG_BOD33DET |
    256c:	22c2      	movs	r2, #194	; 0xc2
    256e:	00d2      	lsls	r2, r2, #3
    2570:	4b47      	ldr	r3, [pc, #284]	; (2690 <system_clock_init+0x128>)
    2572:	609a      	str	r2, [r3, #8]
static inline void system_flash_set_waitstates(uint8_t wait_states)
{
	Assert(NVMCTRL_CTRLB_RWS((uint32_t)wait_states) ==
			((uint32_t)wait_states << NVMCTRL_CTRLB_RWS_Pos));

	NVMCTRL->CTRLB.bit.RWS = wait_states;
    2574:	4a47      	ldr	r2, [pc, #284]	; (2694 <system_clock_init+0x12c>)
    2576:	6853      	ldr	r3, [r2, #4]
    2578:	211e      	movs	r1, #30
    257a:	438b      	bics	r3, r1
    257c:	391a      	subs	r1, #26
    257e:	430b      	orrs	r3, r1
    2580:	6053      	str	r3, [r2, #4]
	gclk_conf.source_generator = GCLK_GENERATOR_2;
    2582:	2202      	movs	r2, #2
    2584:	ab01      	add	r3, sp, #4
    2586:	701a      	strb	r2, [r3, #0]
	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
    2588:	2400      	movs	r4, #0
		system_gclk_chan_set_config(gclk_id, &gclk_conf);
    258a:	4d43      	ldr	r5, [pc, #268]	; (2698 <system_clock_init+0x130>)
    258c:	b2e0      	uxtb	r0, r4
    258e:	a901      	add	r1, sp, #4
    2590:	47a8      	blx	r5
	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
    2592:	3401      	adds	r4, #1
    2594:	2c25      	cmp	r4, #37	; 0x25
    2596:	d1f9      	bne.n	258c <system_clock_init+0x24>
	config->external_clock      = SYSTEM_CLOCK_EXTERNAL_CRYSTAL;
    2598:	a80a      	add	r0, sp, #40	; 0x28
    259a:	2300      	movs	r3, #0
    259c:	7003      	strb	r3, [r0, #0]
	config->auto_gain_control   = false;
    259e:	7083      	strb	r3, [r0, #2]
	config->frequency           = 32768UL;
    25a0:	2280      	movs	r2, #128	; 0x80
    25a2:	0212      	lsls	r2, r2, #8
    25a4:	6082      	str	r2, [r0, #8]
	config->enable_1khz_output  = false;
    25a6:	70c3      	strb	r3, [r0, #3]
	config->enable_32khz_output = true;
    25a8:	2201      	movs	r2, #1
    25aa:	7102      	strb	r2, [r0, #4]
	config->run_in_standby      = false;
    25ac:	7303      	strb	r3, [r0, #12]
	config->write_once          = false;
    25ae:	7383      	strb	r3, [r0, #14]
	struct system_clock_source_xosc32k_config xosc32k_conf;
	system_clock_source_xosc32k_get_config_defaults(&xosc32k_conf);

	xosc32k_conf.frequency           = 32768UL;
	xosc32k_conf.external_clock      = CONF_CLOCK_XOSC32K_EXTERNAL_CRYSTAL;
	xosc32k_conf.startup_time        = CONF_CLOCK_XOSC32K_STARTUP_TIME;
    25b0:	3202      	adds	r2, #2
    25b2:	7042      	strb	r2, [r0, #1]
	xosc32k_conf.auto_gain_control   = CONF_CLOCK_XOSC32K_AUTO_AMPLITUDE_CONTROL;
	xosc32k_conf.enable_1khz_output  = CONF_CLOCK_XOSC32K_ENABLE_1KHZ_OUPUT;
	xosc32k_conf.enable_32khz_output = CONF_CLOCK_XOSC32K_ENABLE_32KHZ_OUTPUT;
	xosc32k_conf.on_demand           = false;
    25b4:	7343      	strb	r3, [r0, #13]
	xosc32k_conf.run_in_standby      = CONF_CLOCK_XOSC32K_RUN_IN_STANDBY;

	system_clock_source_xosc32k_set_config(&xosc32k_conf);
    25b6:	4b39      	ldr	r3, [pc, #228]	; (269c <system_clock_init+0x134>)
    25b8:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_XOSC32K);
    25ba:	2005      	movs	r0, #5
    25bc:	4b38      	ldr	r3, [pc, #224]	; (26a0 <system_clock_init+0x138>)
    25be:	4798      	blx	r3
	return ((SYSCTRL->PCLKSR.reg & mask) == mask);
    25c0:	4933      	ldr	r1, [pc, #204]	; (2690 <system_clock_init+0x128>)
    25c2:	2202      	movs	r2, #2
    25c4:	68cb      	ldr	r3, [r1, #12]
	while(!system_clock_source_is_ready(SYSTEM_CLOCK_SOURCE_XOSC32K));
    25c6:	421a      	tst	r2, r3
    25c8:	d0fc      	beq.n	25c4 <system_clock_init+0x5c>
	if (CONF_CLOCK_XOSC32K_ON_DEMAND) {
		SYSCTRL->XOSC32K.bit.ONDEMAND = 1;
    25ca:	4a31      	ldr	r2, [pc, #196]	; (2690 <system_clock_init+0x128>)
    25cc:	8a93      	ldrh	r3, [r2, #20]
    25ce:	2180      	movs	r1, #128	; 0x80
    25d0:	430b      	orrs	r3, r1
    25d2:	8293      	strh	r3, [r2, #20]
	config->quick_lock      = SYSTEM_CLOCK_DFLL_QUICK_LOCK_ENABLE;
    25d4:	ab05      	add	r3, sp, #20
    25d6:	2100      	movs	r1, #0
    25d8:	2200      	movs	r2, #0
    25da:	8059      	strh	r1, [r3, #2]
	config->chill_cycle     = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_ENABLE;
    25dc:	8099      	strh	r1, [r3, #4]
	config->wakeup_lock     = SYSTEM_CLOCK_DFLL_WAKEUP_LOCK_KEEP;
    25de:	719a      	strb	r2, [r3, #6]
	config->stable_tracking = SYSTEM_CLOCK_DFLL_STABLE_TRACKING_TRACK_AFTER_LOCK;
    25e0:	71da      	strb	r2, [r3, #7]
	config->fine_value      = 0xff / 4; /* Midpoint */
    25e2:	313f      	adds	r1, #63	; 0x3f
    25e4:	8159      	strh	r1, [r3, #10]
	/* DFLL Config (Open and Closed Loop) */
#if CONF_CLOCK_DFLL_ENABLE == true
	struct system_clock_source_dfll_config dfll_conf;
	system_clock_source_dfll_get_config_defaults(&dfll_conf);

	dfll_conf.loop_mode      = CONF_CLOCK_DFLL_LOOP_MODE;
    25e6:	393b      	subs	r1, #59	; 0x3b
    25e8:	7019      	strb	r1, [r3, #0]
	dfll_conf.on_demand      = false;
    25ea:	705a      	strb	r2, [r3, #1]
	/* Using DFLL48M COARSE CAL value from NVM Software Calibration Area Mapping
	   in DFLL.COARSE helps to output a frequency close to 48 MHz.*/
#define NVM_DFLL_COARSE_POS    58 /* DFLL48M Coarse calibration value bit position.*/
#define NVM_DFLL_COARSE_SIZE   6  /* DFLL48M Coarse calibration value bit size.*/

	uint32_t coarse =( *((uint32_t *)(NVMCTRL_OTP4)
    25ec:	4b2d      	ldr	r3, [pc, #180]	; (26a4 <system_clock_init+0x13c>)
    25ee:	681b      	ldr	r3, [r3, #0]
    25f0:	0e9b      	lsrs	r3, r3, #26
			+ (NVM_DFLL_COARSE_POS / 32))
		>> (NVM_DFLL_COARSE_POS % 32))
		& ((1 << NVM_DFLL_COARSE_SIZE) - 1);
	/* In some revision chip, the coarse calibration value is not correct. */
	if (coarse == 0x3f) {
    25f2:	2b3f      	cmp	r3, #63	; 0x3f
    25f4:	d04a      	beq.n	268c <system_clock_init+0x124>
		coarse = 0x1f;
	}
	dfll_conf.coarse_value = coarse;
    25f6:	a805      	add	r0, sp, #20
    25f8:	7203      	strb	r3, [r0, #8]
#  else
	dfll_conf.chill_cycle = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_DISABLE;
#  endif

	if (CONF_CLOCK_DFLL_LOOP_MODE == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
		dfll_conf.multiply_factor = CONF_CLOCK_DFLL_MULTIPLY_FACTOR;
    25fa:	4b2b      	ldr	r3, [pc, #172]	; (26a8 <system_clock_init+0x140>)
    25fc:	8203      	strh	r3, [r0, #16]
	}

	dfll_conf.coarse_max_step = CONF_CLOCK_DFLL_MAX_COARSE_STEP_SIZE;
    25fe:	2307      	movs	r3, #7
    2600:	7303      	strb	r3, [r0, #12]
	dfll_conf.fine_max_step   = CONF_CLOCK_DFLL_MAX_FINE_STEP_SIZE;
    2602:	3338      	adds	r3, #56	; 0x38
    2604:	81c3      	strh	r3, [r0, #14]
		dfll_conf.chill_cycle = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_DISABLE;

		dfll_conf.multiply_factor = 48000;
	}

	system_clock_source_dfll_set_config(&dfll_conf);
    2606:	4b29      	ldr	r3, [pc, #164]	; (26ac <system_clock_init+0x144>)
    2608:	4798      	blx	r3
	config->run_in_standby  = false;
    260a:	a804      	add	r0, sp, #16
    260c:	2500      	movs	r5, #0
    260e:	7045      	strb	r5, [r0, #1]
	config->on_demand       = true;
    2610:	2601      	movs	r6, #1
    2612:	7086      	strb	r6, [r0, #2]

	/* OSC8M */
	struct system_clock_source_osc8m_config osc8m_conf;
	system_clock_source_osc8m_get_config_defaults(&osc8m_conf);

	osc8m_conf.prescaler       = CONF_CLOCK_OSC8M_PRESCALER;
    2614:	7005      	strb	r5, [r0, #0]
	osc8m_conf.on_demand       = CONF_CLOCK_OSC8M_ON_DEMAND;
	osc8m_conf.run_in_standby  = CONF_CLOCK_OSC8M_RUN_IN_STANDBY;

	system_clock_source_osc8m_set_config(&osc8m_conf);
    2616:	4b26      	ldr	r3, [pc, #152]	; (26b0 <system_clock_init+0x148>)
    2618:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_OSC8M);
    261a:	2006      	movs	r0, #6
    261c:	4f20      	ldr	r7, [pc, #128]	; (26a0 <system_clock_init+0x138>)
    261e:	47b8      	blx	r7


	/* GCLK */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	system_gclk_init();
    2620:	4b24      	ldr	r3, [pc, #144]	; (26b4 <system_clock_init+0x14c>)
    2622:	4798      	blx	r3
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->division_factor    = 1;
    2624:	ac01      	add	r4, sp, #4
    2626:	9602      	str	r6, [sp, #8]
	config->high_when_disabled = false;
    2628:	7065      	strb	r5, [r4, #1]
#elif (SAMC20) || (SAMC21)
	config->source_clock       = GCLK_SOURCE_OSC48M;
#else
	config->source_clock       = GCLK_SOURCE_OSC8M;
#endif
	config->run_in_standby     = false;
    262a:	7225      	strb	r5, [r4, #8]
	config->output_enable      = false;
    262c:	7265      	strb	r5, [r4, #9]

	/* Configure all GCLK generators except for the main generator, which
	 * is configured later after all other clock systems are set up */
	MREPEAT(GCLK_GEN_NUM, _CONF_CLOCK_GCLK_CONFIG_NONMAIN, ~);
    262e:	2305      	movs	r3, #5
    2630:	7023      	strb	r3, [r4, #0]
    2632:	0021      	movs	r1, r4
    2634:	2001      	movs	r0, #1
    2636:	4b20      	ldr	r3, [pc, #128]	; (26b8 <system_clock_init+0x150>)
    2638:	4798      	blx	r3
    263a:	2001      	movs	r0, #1
    263c:	4b1f      	ldr	r3, [pc, #124]	; (26bc <system_clock_init+0x154>)
    263e:	4798      	blx	r3
	/* Enable DFLL reference clock if in closed loop mode */
	if (CONF_CLOCK_DFLL_LOOP_MODE == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
		struct system_gclk_chan_config dfll_gclk_chan_conf;

		system_gclk_chan_get_config_defaults(&dfll_gclk_chan_conf);
		dfll_gclk_chan_conf.source_generator = CONF_CLOCK_DFLL_SOURCE_GCLK_GENERATOR;
    2640:	7026      	strb	r6, [r4, #0]
		system_gclk_chan_set_config(SYSCTRL_GCLK_ID_DFLL48, &dfll_gclk_chan_conf);
    2642:	0021      	movs	r1, r4
    2644:	2000      	movs	r0, #0
    2646:	4b14      	ldr	r3, [pc, #80]	; (2698 <system_clock_init+0x130>)
    2648:	4798      	blx	r3
		system_gclk_chan_enable(SYSCTRL_GCLK_ID_DFLL48);
    264a:	2000      	movs	r0, #0
    264c:	4b1c      	ldr	r3, [pc, #112]	; (26c0 <system_clock_init+0x158>)
    264e:	4798      	blx	r3
#endif


	/* DFLL Enable (Open and Closed Loop) */
#if CONF_CLOCK_DFLL_ENABLE == true
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_DFLL);
    2650:	2007      	movs	r0, #7
    2652:	47b8      	blx	r7
	return ((SYSCTRL->PCLKSR.reg & mask) == mask);
    2654:	490e      	ldr	r1, [pc, #56]	; (2690 <system_clock_init+0x128>)
    2656:	22d0      	movs	r2, #208	; 0xd0
    2658:	68cb      	ldr	r3, [r1, #12]
    265a:	4013      	ands	r3, r2
	while(!system_clock_source_is_ready(SYSTEM_CLOCK_SOURCE_DFLL));
    265c:	2bd0      	cmp	r3, #208	; 0xd0
    265e:	d1fb      	bne.n	2658 <system_clock_init+0xf0>
	PM->CPUSEL.reg = (uint32_t)divider;
    2660:	4a18      	ldr	r2, [pc, #96]	; (26c4 <system_clock_init+0x15c>)
    2662:	2300      	movs	r3, #0
    2664:	7213      	strb	r3, [r2, #8]
			PM->APBASEL.reg = (uint32_t)divider;
    2666:	7253      	strb	r3, [r2, #9]
			PM->APBBSEL.reg = (uint32_t)divider;
    2668:	7293      	strb	r3, [r2, #10]
			PM->APBCSEL.reg = (uint32_t)divider;
    266a:	72d3      	strb	r3, [r2, #11]
	config->division_factor    = 1;
    266c:	a901      	add	r1, sp, #4
    266e:	2201      	movs	r2, #1
    2670:	604a      	str	r2, [r1, #4]
	config->high_when_disabled = false;
    2672:	704b      	strb	r3, [r1, #1]
	config->run_in_standby     = false;
    2674:	720b      	strb	r3, [r1, #8]
	config->output_enable      = false;
    2676:	724b      	strb	r3, [r1, #9]
	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBC, CONF_CLOCK_APBC_DIVIDER);

	/* GCLK 0 */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	/* Configure the main GCLK last as it might depend on other generators */
	_CONF_CLOCK_GCLK_CONFIG(0, ~);
    2678:	3307      	adds	r3, #7
    267a:	700b      	strb	r3, [r1, #0]
    267c:	2000      	movs	r0, #0
    267e:	4b0e      	ldr	r3, [pc, #56]	; (26b8 <system_clock_init+0x150>)
    2680:	4798      	blx	r3
    2682:	2000      	movs	r0, #0
    2684:	4b0d      	ldr	r3, [pc, #52]	; (26bc <system_clock_init+0x154>)
    2686:	4798      	blx	r3
#endif
}
    2688:	b00f      	add	sp, #60	; 0x3c
    268a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		coarse = 0x1f;
    268c:	3b20      	subs	r3, #32
    268e:	e7b2      	b.n	25f6 <system_clock_init+0x8e>
    2690:	40000800 	.word	0x40000800
    2694:	41004000 	.word	0x41004000
    2698:	00002901 	.word	0x00002901
    269c:	00002389 	.word	0x00002389
    26a0:	000024c1 	.word	0x000024c1
    26a4:	00806024 	.word	0x00806024
    26a8:	000005b9 	.word	0x000005b9
    26ac:	00002441 	.word	0x00002441
    26b0:	0000234d 	.word	0x0000234d
    26b4:	000026c9 	.word	0x000026c9
    26b8:	000026ed 	.word	0x000026ed
    26bc:	000027a5 	.word	0x000027a5
    26c0:	00002875 	.word	0x00002875
    26c4:	40000400 	.word	0x40000400

000026c8 <system_gclk_init>:
			PM->APBAMASK.reg |= mask;
    26c8:	4a06      	ldr	r2, [pc, #24]	; (26e4 <system_gclk_init+0x1c>)
    26ca:	6993      	ldr	r3, [r2, #24]
    26cc:	2108      	movs	r1, #8
    26ce:	430b      	orrs	r3, r1
    26d0:	6193      	str	r3, [r2, #24]
{
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, PM_APBAMASK_GCLK);

	/* Software reset the module to ensure it is re-initialized correctly */
	GCLK->CTRL.reg = GCLK_CTRL_SWRST;
    26d2:	2201      	movs	r2, #1
    26d4:	4b04      	ldr	r3, [pc, #16]	; (26e8 <system_gclk_init+0x20>)
    26d6:	701a      	strb	r2, [r3, #0]
	while (GCLK->CTRL.reg & GCLK_CTRL_SWRST) {
    26d8:	0019      	movs	r1, r3
    26da:	780b      	ldrb	r3, [r1, #0]
    26dc:	4213      	tst	r3, r2
    26de:	d1fc      	bne.n	26da <system_gclk_init+0x12>
		/* Wait for reset to complete */
	}
}
    26e0:	4770      	bx	lr
    26e2:	46c0      	nop			; (mov r8, r8)
    26e4:	40000400 	.word	0x40000400
    26e8:	40000c00 	.word	0x40000c00

000026ec <system_gclk_gen_set_config>:
 * \param[in] config     Configuration settings for the generator
 */
void system_gclk_gen_set_config(
		const uint8_t generator,
		struct system_gclk_gen_config *const config)
{
    26ec:	b570      	push	{r4, r5, r6, lr}
    26ee:	0006      	movs	r6, r0
	/* Sanity check arguments */
	Assert(config);

	/* Cache new register configurations to minimize sync requirements. */
	uint32_t new_genctrl_config = (generator << GCLK_GENCTRL_ID_Pos);
    26f0:	0004      	movs	r4, r0
	uint32_t new_gendiv_config  = (generator << GCLK_GENDIV_ID_Pos);

	/* Select the requested source clock for the generator */
	new_genctrl_config |= config->source_clock << GCLK_GENCTRL_SRC_Pos;
    26f2:	780d      	ldrb	r5, [r1, #0]
    26f4:	022d      	lsls	r5, r5, #8
    26f6:	4305      	orrs	r5, r0

	/* Configure the clock to be either high or low when disabled */
	if (config->high_when_disabled) {
    26f8:	784b      	ldrb	r3, [r1, #1]
    26fa:	2b00      	cmp	r3, #0
    26fc:	d002      	beq.n	2704 <system_gclk_gen_set_config+0x18>
		new_genctrl_config |= GCLK_GENCTRL_OOV;
    26fe:	2380      	movs	r3, #128	; 0x80
    2700:	02db      	lsls	r3, r3, #11
    2702:	431d      	orrs	r5, r3
	}

	/* Configure if the clock output to I/O pin should be enabled. */
	if (config->output_enable) {
    2704:	7a4b      	ldrb	r3, [r1, #9]
    2706:	2b00      	cmp	r3, #0
    2708:	d002      	beq.n	2710 <system_gclk_gen_set_config+0x24>
		new_genctrl_config |= GCLK_GENCTRL_OE;
    270a:	2380      	movs	r3, #128	; 0x80
    270c:	031b      	lsls	r3, r3, #12
    270e:	431d      	orrs	r5, r3
	}

	/* Set division factor */
	if (config->division_factor > 1) {
    2710:	6848      	ldr	r0, [r1, #4]
    2712:	2801      	cmp	r0, #1
    2714:	d910      	bls.n	2738 <system_gclk_gen_set_config+0x4c>
		/* Check if division is a power of two */
		if (((config->division_factor & (config->division_factor - 1)) == 0)) {
    2716:	1e43      	subs	r3, r0, #1
    2718:	4218      	tst	r0, r3
    271a:	d134      	bne.n	2786 <system_gclk_gen_set_config+0x9a>
			 * register */

			uint32_t div2_count = 0;

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
    271c:	2802      	cmp	r0, #2
    271e:	d930      	bls.n	2782 <system_gclk_gen_set_config+0x96>
    2720:	2302      	movs	r3, #2
    2722:	2200      	movs	r2, #0
						mask <<= 1) {
				div2_count++;
    2724:	3201      	adds	r2, #1
						mask <<= 1) {
    2726:	005b      	lsls	r3, r3, #1
			for (mask = (1UL << 1); mask < config->division_factor;
    2728:	4298      	cmp	r0, r3
    272a:	d8fb      	bhi.n	2724 <system_gclk_gen_set_config+0x38>
			}

			/* Set binary divider power of 2 division factor */
			new_gendiv_config  |= div2_count << GCLK_GENDIV_DIV_Pos;
    272c:	0212      	lsls	r2, r2, #8
    272e:	4332      	orrs	r2, r6
    2730:	0014      	movs	r4, r2
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
    2732:	2380      	movs	r3, #128	; 0x80
    2734:	035b      	lsls	r3, r3, #13
    2736:	431d      	orrs	r5, r3
		}

	}

	/* Enable or disable the clock in standby mode */
	if (config->run_in_standby) {
    2738:	7a0b      	ldrb	r3, [r1, #8]
    273a:	2b00      	cmp	r3, #0
    273c:	d002      	beq.n	2744 <system_gclk_gen_set_config+0x58>
		new_genctrl_config |= GCLK_GENCTRL_RUNSTDBY;
    273e:	2380      	movs	r3, #128	; 0x80
    2740:	039b      	lsls	r3, r3, #14
    2742:	431d      	orrs	r5, r3
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    2744:	4a13      	ldr	r2, [pc, #76]	; (2794 <system_gclk_gen_set_config+0xa8>)
    2746:	7853      	ldrb	r3, [r2, #1]
	}

	while (system_gclk_is_syncing()) {
    2748:	b25b      	sxtb	r3, r3
    274a:	2b00      	cmp	r3, #0
    274c:	dbfb      	blt.n	2746 <system_gclk_gen_set_config+0x5a>
	cpu_irq_enter_critical();
    274e:	4b12      	ldr	r3, [pc, #72]	; (2798 <system_gclk_gen_set_config+0xac>)
    2750:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the correct generator */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    2752:	4b12      	ldr	r3, [pc, #72]	; (279c <system_gclk_gen_set_config+0xb0>)
    2754:	701e      	strb	r6, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    2756:	4a0f      	ldr	r2, [pc, #60]	; (2794 <system_gclk_gen_set_config+0xa8>)
    2758:	7853      	ldrb	r3, [r2, #1]

	/* Write the new generator configuration */
	while (system_gclk_is_syncing()) {
    275a:	b25b      	sxtb	r3, r3
    275c:	2b00      	cmp	r3, #0
    275e:	dbfb      	blt.n	2758 <system_gclk_gen_set_config+0x6c>
		/* Wait for synchronization */
	};
	GCLK->GENDIV.reg  = new_gendiv_config;
    2760:	4b0c      	ldr	r3, [pc, #48]	; (2794 <system_gclk_gen_set_config+0xa8>)
    2762:	609c      	str	r4, [r3, #8]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    2764:	001a      	movs	r2, r3
    2766:	7853      	ldrb	r3, [r2, #1]

	while (system_gclk_is_syncing()) {
    2768:	b25b      	sxtb	r3, r3
    276a:	2b00      	cmp	r3, #0
    276c:	dbfb      	blt.n	2766 <system_gclk_gen_set_config+0x7a>
		/* Wait for synchronization */
	};
	GCLK->GENCTRL.reg = new_genctrl_config | (GCLK->GENCTRL.reg & GCLK_GENCTRL_GENEN);
    276e:	4a09      	ldr	r2, [pc, #36]	; (2794 <system_gclk_gen_set_config+0xa8>)
    2770:	6853      	ldr	r3, [r2, #4]
    2772:	2180      	movs	r1, #128	; 0x80
    2774:	0249      	lsls	r1, r1, #9
    2776:	400b      	ands	r3, r1
    2778:	431d      	orrs	r5, r3
    277a:	6055      	str	r5, [r2, #4]
	cpu_irq_leave_critical();
    277c:	4b08      	ldr	r3, [pc, #32]	; (27a0 <system_gclk_gen_set_config+0xb4>)
    277e:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    2780:	bd70      	pop	{r4, r5, r6, pc}
			for (mask = (1UL << 1); mask < config->division_factor;
    2782:	2200      	movs	r2, #0
    2784:	e7d2      	b.n	272c <system_gclk_gen_set_config+0x40>
					(config->division_factor) << GCLK_GENDIV_DIV_Pos;
    2786:	0204      	lsls	r4, r0, #8
			new_gendiv_config  |=
    2788:	4334      	orrs	r4, r6
			new_genctrl_config |= GCLK_GENCTRL_IDC;
    278a:	2380      	movs	r3, #128	; 0x80
    278c:	029b      	lsls	r3, r3, #10
    278e:	431d      	orrs	r5, r3
    2790:	e7d2      	b.n	2738 <system_gclk_gen_set_config+0x4c>
    2792:	46c0      	nop			; (mov r8, r8)
    2794:	40000c00 	.word	0x40000c00
    2798:	000021ed 	.word	0x000021ed
    279c:	40000c08 	.word	0x40000c08
    27a0:	0000222d 	.word	0x0000222d

000027a4 <system_gclk_gen_enable>:
 *
 * \param[in] generator  Generic Clock Generator index to enable
 */
void system_gclk_gen_enable(
		const uint8_t generator)
{
    27a4:	b510      	push	{r4, lr}
    27a6:	0004      	movs	r4, r0
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    27a8:	4a0b      	ldr	r2, [pc, #44]	; (27d8 <system_gclk_gen_enable+0x34>)
    27aa:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    27ac:	b25b      	sxtb	r3, r3
    27ae:	2b00      	cmp	r3, #0
    27b0:	dbfb      	blt.n	27aa <system_gclk_gen_enable+0x6>
	cpu_irq_enter_critical();
    27b2:	4b0a      	ldr	r3, [pc, #40]	; (27dc <system_gclk_gen_enable+0x38>)
    27b4:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the requested generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    27b6:	4b0a      	ldr	r3, [pc, #40]	; (27e0 <system_gclk_gen_enable+0x3c>)
    27b8:	701c      	strb	r4, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    27ba:	4a07      	ldr	r2, [pc, #28]	; (27d8 <system_gclk_gen_enable+0x34>)
    27bc:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    27be:	b25b      	sxtb	r3, r3
    27c0:	2b00      	cmp	r3, #0
    27c2:	dbfb      	blt.n	27bc <system_gclk_gen_enable+0x18>
		/* Wait for synchronization */
	};

	/* Enable generator */
	GCLK->GENCTRL.reg |= GCLK_GENCTRL_GENEN;
    27c4:	4a04      	ldr	r2, [pc, #16]	; (27d8 <system_gclk_gen_enable+0x34>)
    27c6:	6851      	ldr	r1, [r2, #4]
    27c8:	2380      	movs	r3, #128	; 0x80
    27ca:	025b      	lsls	r3, r3, #9
    27cc:	430b      	orrs	r3, r1
    27ce:	6053      	str	r3, [r2, #4]
	cpu_irq_leave_critical();
    27d0:	4b04      	ldr	r3, [pc, #16]	; (27e4 <system_gclk_gen_enable+0x40>)
    27d2:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    27d4:	bd10      	pop	{r4, pc}
    27d6:	46c0      	nop			; (mov r8, r8)
    27d8:	40000c00 	.word	0x40000c00
    27dc:	000021ed 	.word	0x000021ed
    27e0:	40000c04 	.word	0x40000c04
    27e4:	0000222d 	.word	0x0000222d

000027e8 <system_gclk_gen_get_hz>:
 *
 * \return The frequency of the generic clock generator, in Hz.
 */
uint32_t system_gclk_gen_get_hz(
		const uint8_t generator)
{
    27e8:	b570      	push	{r4, r5, r6, lr}
    27ea:	0004      	movs	r4, r0
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    27ec:	4a1a      	ldr	r2, [pc, #104]	; (2858 <system_gclk_gen_get_hz+0x70>)
    27ee:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    27f0:	b25b      	sxtb	r3, r3
    27f2:	2b00      	cmp	r3, #0
    27f4:	dbfb      	blt.n	27ee <system_gclk_gen_get_hz+0x6>
	cpu_irq_enter_critical();
    27f6:	4b19      	ldr	r3, [pc, #100]	; (285c <system_gclk_gen_get_hz+0x74>)
    27f8:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the appropriate generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    27fa:	4b19      	ldr	r3, [pc, #100]	; (2860 <system_gclk_gen_get_hz+0x78>)
    27fc:	701c      	strb	r4, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    27fe:	4a16      	ldr	r2, [pc, #88]	; (2858 <system_gclk_gen_get_hz+0x70>)
    2800:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    2802:	b25b      	sxtb	r3, r3
    2804:	2b00      	cmp	r3, #0
    2806:	dbfb      	blt.n	2800 <system_gclk_gen_get_hz+0x18>
		/* Wait for synchronization */
	};

	/* Get the frequency of the source connected to the GCLK generator */
	uint32_t gen_input_hz = system_clock_source_get_hz(
			(enum system_clock_source)GCLK->GENCTRL.bit.SRC);
    2808:	4e13      	ldr	r6, [pc, #76]	; (2858 <system_gclk_gen_get_hz+0x70>)
    280a:	6870      	ldr	r0, [r6, #4]
    280c:	04c0      	lsls	r0, r0, #19
    280e:	0ec0      	lsrs	r0, r0, #27
	uint32_t gen_input_hz = system_clock_source_get_hz(
    2810:	4b14      	ldr	r3, [pc, #80]	; (2864 <system_gclk_gen_get_hz+0x7c>)
    2812:	4798      	blx	r3
    2814:	0005      	movs	r5, r0

	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    2816:	4b12      	ldr	r3, [pc, #72]	; (2860 <system_gclk_gen_get_hz+0x78>)
    2818:	701c      	strb	r4, [r3, #0]

	uint8_t divsel = GCLK->GENCTRL.bit.DIVSEL;
    281a:	6876      	ldr	r6, [r6, #4]
    281c:	02f6      	lsls	r6, r6, #11
    281e:	0ff6      	lsrs	r6, r6, #31

	/* Select the appropriate generator division register */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    2820:	4b11      	ldr	r3, [pc, #68]	; (2868 <system_gclk_gen_get_hz+0x80>)
    2822:	701c      	strb	r4, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    2824:	4a0c      	ldr	r2, [pc, #48]	; (2858 <system_gclk_gen_get_hz+0x70>)
    2826:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    2828:	b25b      	sxtb	r3, r3
    282a:	2b00      	cmp	r3, #0
    282c:	dbfb      	blt.n	2826 <system_gclk_gen_get_hz+0x3e>
		/* Wait for synchronization */
	};

	uint32_t divider = GCLK->GENDIV.bit.DIV;
    282e:	4b0a      	ldr	r3, [pc, #40]	; (2858 <system_gclk_gen_get_hz+0x70>)
    2830:	689c      	ldr	r4, [r3, #8]
    2832:	0224      	lsls	r4, r4, #8
    2834:	0c24      	lsrs	r4, r4, #16
	cpu_irq_leave_critical();
    2836:	4b0d      	ldr	r3, [pc, #52]	; (286c <system_gclk_gen_get_hz+0x84>)
    2838:	4798      	blx	r3

	system_interrupt_leave_critical_section();

	/* Check if the generator is using fractional or binary division */
	if (!divsel && divider > 1) {
    283a:	2e00      	cmp	r6, #0
    283c:	d107      	bne.n	284e <system_gclk_gen_get_hz+0x66>
    283e:	2c01      	cmp	r4, #1
    2840:	d907      	bls.n	2852 <system_gclk_gen_get_hz+0x6a>
		gen_input_hz /= divider;
    2842:	0021      	movs	r1, r4
    2844:	0028      	movs	r0, r5
    2846:	4b0a      	ldr	r3, [pc, #40]	; (2870 <system_gclk_gen_get_hz+0x88>)
    2848:	4798      	blx	r3
    284a:	0005      	movs	r5, r0
    284c:	e001      	b.n	2852 <system_gclk_gen_get_hz+0x6a>
	} else if (divsel) {
		gen_input_hz >>= (divider+1);
    284e:	3401      	adds	r4, #1
    2850:	40e5      	lsrs	r5, r4
	}

	return gen_input_hz;
}
    2852:	0028      	movs	r0, r5
    2854:	bd70      	pop	{r4, r5, r6, pc}
    2856:	46c0      	nop			; (mov r8, r8)
    2858:	40000c00 	.word	0x40000c00
    285c:	000021ed 	.word	0x000021ed
    2860:	40000c04 	.word	0x40000c04
    2864:	000022b9 	.word	0x000022b9
    2868:	40000c08 	.word	0x40000c08
    286c:	0000222d 	.word	0x0000222d
    2870:	00003189 	.word	0x00003189

00002874 <system_gclk_chan_enable>:
 *
 * \param[in] channel   Generic Clock channel to enable
 */
void system_gclk_chan_enable(
		const uint8_t channel)
{
    2874:	b510      	push	{r4, lr}
    2876:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    2878:	4b06      	ldr	r3, [pc, #24]	; (2894 <system_gclk_chan_enable+0x20>)
    287a:	4798      	blx	r3
	system_interrupt_enter_critical_section();

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    287c:	4b06      	ldr	r3, [pc, #24]	; (2898 <system_gclk_chan_enable+0x24>)
    287e:	701c      	strb	r4, [r3, #0]

	/* Enable the generic clock */
	GCLK->CLKCTRL.reg |= GCLK_CLKCTRL_CLKEN;
    2880:	4a06      	ldr	r2, [pc, #24]	; (289c <system_gclk_chan_enable+0x28>)
    2882:	8853      	ldrh	r3, [r2, #2]
    2884:	2180      	movs	r1, #128	; 0x80
    2886:	01c9      	lsls	r1, r1, #7
    2888:	430b      	orrs	r3, r1
    288a:	8053      	strh	r3, [r2, #2]
	cpu_irq_leave_critical();
    288c:	4b04      	ldr	r3, [pc, #16]	; (28a0 <system_gclk_chan_enable+0x2c>)
    288e:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    2890:	bd10      	pop	{r4, pc}
    2892:	46c0      	nop			; (mov r8, r8)
    2894:	000021ed 	.word	0x000021ed
    2898:	40000c02 	.word	0x40000c02
    289c:	40000c00 	.word	0x40000c00
    28a0:	0000222d 	.word	0x0000222d

000028a4 <system_gclk_chan_disable>:
 *
 * \param[in] channel  Generic Clock channel to disable
 */
void system_gclk_chan_disable(
		const uint8_t channel)
{
    28a4:	b510      	push	{r4, lr}
    28a6:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    28a8:	4b0f      	ldr	r3, [pc, #60]	; (28e8 <system_gclk_chan_disable+0x44>)
    28aa:	4798      	blx	r3
	system_interrupt_enter_critical_section();

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    28ac:	4b0f      	ldr	r3, [pc, #60]	; (28ec <system_gclk_chan_disable+0x48>)
    28ae:	701c      	strb	r4, [r3, #0]

	/* Sanity check WRTLOCK */
	Assert(!GCLK->CLKCTRL.bit.WRTLOCK);

	/* Switch to known-working source so that the channel can be disabled */
	uint32_t prev_gen_id = GCLK->CLKCTRL.bit.GEN;
    28b0:	4a0f      	ldr	r2, [pc, #60]	; (28f0 <system_gclk_chan_disable+0x4c>)
    28b2:	8853      	ldrh	r3, [r2, #2]
    28b4:	051b      	lsls	r3, r3, #20
    28b6:	0f18      	lsrs	r0, r3, #28
	GCLK->CLKCTRL.bit.GEN = 0;
    28b8:	8853      	ldrh	r3, [r2, #2]
    28ba:	490e      	ldr	r1, [pc, #56]	; (28f4 <system_gclk_chan_disable+0x50>)
    28bc:	400b      	ands	r3, r1
    28be:	8053      	strh	r3, [r2, #2]

	/* Disable the generic clock */
	GCLK->CLKCTRL.reg &= ~GCLK_CLKCTRL_CLKEN;
    28c0:	8853      	ldrh	r3, [r2, #2]
    28c2:	490d      	ldr	r1, [pc, #52]	; (28f8 <system_gclk_chan_disable+0x54>)
    28c4:	400b      	ands	r3, r1
    28c6:	8053      	strh	r3, [r2, #2]
	while (GCLK->CLKCTRL.reg & GCLK_CLKCTRL_CLKEN) {
    28c8:	0011      	movs	r1, r2
    28ca:	2280      	movs	r2, #128	; 0x80
    28cc:	01d2      	lsls	r2, r2, #7
    28ce:	884b      	ldrh	r3, [r1, #2]
    28d0:	4213      	tst	r3, r2
    28d2:	d1fc      	bne.n	28ce <system_gclk_chan_disable+0x2a>
		/* Wait for clock to become disabled */
	}

	/* Restore previous configured clock generator */
	GCLK->CLKCTRL.bit.GEN = prev_gen_id;
    28d4:	4906      	ldr	r1, [pc, #24]	; (28f0 <system_gclk_chan_disable+0x4c>)
    28d6:	884a      	ldrh	r2, [r1, #2]
    28d8:	0203      	lsls	r3, r0, #8
    28da:	4806      	ldr	r0, [pc, #24]	; (28f4 <system_gclk_chan_disable+0x50>)
    28dc:	4002      	ands	r2, r0
    28de:	4313      	orrs	r3, r2
    28e0:	804b      	strh	r3, [r1, #2]
	cpu_irq_leave_critical();
    28e2:	4b06      	ldr	r3, [pc, #24]	; (28fc <system_gclk_chan_disable+0x58>)
    28e4:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    28e6:	bd10      	pop	{r4, pc}
    28e8:	000021ed 	.word	0x000021ed
    28ec:	40000c02 	.word	0x40000c02
    28f0:	40000c00 	.word	0x40000c00
    28f4:	fffff0ff 	.word	0xfffff0ff
    28f8:	ffffbfff 	.word	0xffffbfff
    28fc:	0000222d 	.word	0x0000222d

00002900 <system_gclk_chan_set_config>:
{
    2900:	b510      	push	{r4, lr}
	new_clkctrl_config |= config->source_generator << GCLK_CLKCTRL_GEN_Pos;
    2902:	780c      	ldrb	r4, [r1, #0]
    2904:	0224      	lsls	r4, r4, #8
    2906:	4304      	orrs	r4, r0
	system_gclk_chan_disable(channel);
    2908:	4b02      	ldr	r3, [pc, #8]	; (2914 <system_gclk_chan_set_config+0x14>)
    290a:	4798      	blx	r3
	GCLK->CLKCTRL.reg = new_clkctrl_config;
    290c:	b2a4      	uxth	r4, r4
    290e:	4b02      	ldr	r3, [pc, #8]	; (2918 <system_gclk_chan_set_config+0x18>)
    2910:	805c      	strh	r4, [r3, #2]
}
    2912:	bd10      	pop	{r4, pc}
    2914:	000028a5 	.word	0x000028a5
    2918:	40000c00 	.word	0x40000c00

0000291c <system_gclk_chan_get_hz>:
 *
 * \return The frequency of the generic clock channel, in Hz.
 */
uint32_t system_gclk_chan_get_hz(
		const uint8_t channel)
{
    291c:	b510      	push	{r4, lr}
    291e:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    2920:	4b06      	ldr	r3, [pc, #24]	; (293c <system_gclk_chan_get_hz+0x20>)
    2922:	4798      	blx	r3
	uint8_t gen_id;

	system_interrupt_enter_critical_section();

	/* Select the requested generic clock channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    2924:	4b06      	ldr	r3, [pc, #24]	; (2940 <system_gclk_chan_get_hz+0x24>)
    2926:	701c      	strb	r4, [r3, #0]
	gen_id = GCLK->CLKCTRL.bit.GEN;
    2928:	4b06      	ldr	r3, [pc, #24]	; (2944 <system_gclk_chan_get_hz+0x28>)
    292a:	885c      	ldrh	r4, [r3, #2]
    292c:	0524      	lsls	r4, r4, #20
    292e:	0f24      	lsrs	r4, r4, #28
	cpu_irq_leave_critical();
    2930:	4b05      	ldr	r3, [pc, #20]	; (2948 <system_gclk_chan_get_hz+0x2c>)
    2932:	4798      	blx	r3

	system_interrupt_leave_critical_section();

	/* Return the clock speed of the associated GCLK generator */
	return system_gclk_gen_get_hz(gen_id);
    2934:	0020      	movs	r0, r4
    2936:	4b05      	ldr	r3, [pc, #20]	; (294c <system_gclk_chan_get_hz+0x30>)
    2938:	4798      	blx	r3
}
    293a:	bd10      	pop	{r4, pc}
    293c:	000021ed 	.word	0x000021ed
    2940:	40000c02 	.word	0x40000c02
    2944:	40000c00 	.word	0x40000c00
    2948:	0000222d 	.word	0x0000222d
    294c:	000027e9 	.word	0x000027e9

00002950 <_system_pinmux_config>:
 */
static void _system_pinmux_config(
		PortGroup *const port,
		const uint32_t pin_mask,
		const struct system_pinmux_config *const config)
{
    2950:	b530      	push	{r4, r5, lr}

	/* Track the configuration bits into a temporary variable before writing */
	uint32_t pin_cfg = 0;

	/* Enabled powersave mode, don't create configuration */
	if (!config->powersave) {
    2952:	78d3      	ldrb	r3, [r2, #3]
    2954:	2b00      	cmp	r3, #0
    2956:	d135      	bne.n	29c4 <_system_pinmux_config+0x74>
		/* Enable the pin peripheral MUX flag if non-GPIO selected (pinmux will
		 * be written later) and store the new MUX mask */
		if (config->mux_position != SYSTEM_PINMUX_GPIO) {
    2958:	7813      	ldrb	r3, [r2, #0]
    295a:	2b80      	cmp	r3, #128	; 0x80
    295c:	d029      	beq.n	29b2 <_system_pinmux_config+0x62>
			pin_cfg |= PORT_WRCONFIG_PMUXEN;
			pin_cfg |= (config->mux_position << PORT_WRCONFIG_PMUX_Pos);
    295e:	061b      	lsls	r3, r3, #24
    2960:	2480      	movs	r4, #128	; 0x80
    2962:	0264      	lsls	r4, r4, #9
    2964:	4323      	orrs	r3, r4
		}

		/* Check if the user has requested that the input buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
    2966:	7854      	ldrb	r4, [r2, #1]
    2968:	2502      	movs	r5, #2
    296a:	43ac      	bics	r4, r5
    296c:	d106      	bne.n	297c <_system_pinmux_config+0x2c>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Enable input buffer flag */
			pin_cfg |= PORT_WRCONFIG_INEN;

			/* Enable pull-up/pull-down control flag if requested */
			if (config->input_pull != SYSTEM_PINMUX_PIN_PULL_NONE) {
    296e:	7894      	ldrb	r4, [r2, #2]
    2970:	2c00      	cmp	r4, #0
    2972:	d120      	bne.n	29b6 <_system_pinmux_config+0x66>
			pin_cfg |= PORT_WRCONFIG_INEN;
    2974:	2480      	movs	r4, #128	; 0x80
    2976:	02a4      	lsls	r4, r4, #10
    2978:	4323      	orrs	r3, r4
				pin_cfg |= PORT_WRCONFIG_PULLEN;
			}

			/* Clear the port DIR bits to disable the output buffer */
			port->DIRCLR.reg = pin_mask;
    297a:	6041      	str	r1, [r0, #4]
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    297c:	7854      	ldrb	r4, [r2, #1]
    297e:	3c01      	subs	r4, #1
    2980:	2c01      	cmp	r4, #1
    2982:	d91c      	bls.n	29be <_system_pinmux_config+0x6e>
		port->DIRCLR.reg = pin_mask;
	}

	/* The Write Configuration register (WRCONFIG) requires the
	 * pins to to grouped into two 16-bit half-words - split them out here */
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
    2984:	040d      	lsls	r5, r1, #16
    2986:	0c2d      	lsrs	r5, r5, #16

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    2988:	24a0      	movs	r4, #160	; 0xa0
    298a:	05e4      	lsls	r4, r4, #23
    298c:	432c      	orrs	r4, r5
    298e:	431c      	orrs	r4, r3
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    2990:	6284      	str	r4, [r0, #40]	; 0x28
	uint32_t upper_pin_mask = (pin_mask >> 16);
    2992:	0c0d      	lsrs	r5, r1, #16

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    2994:	24d0      	movs	r4, #208	; 0xd0
    2996:	0624      	lsls	r4, r4, #24
    2998:	432c      	orrs	r4, r5
    299a:	431c      	orrs	r4, r3
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    299c:	6284      	str	r4, [r0, #40]	; 0x28
			PORT_WRCONFIG_HWSEL;

	if(!config->powersave) {
    299e:	78d4      	ldrb	r4, [r2, #3]
    29a0:	2c00      	cmp	r4, #0
    29a2:	d122      	bne.n	29ea <_system_pinmux_config+0x9a>
		/* Set the pull-up state once the port pins are configured if one was
		 * requested and it does not violate the valid set of port
		 * configurations */
		if (pin_cfg & PORT_WRCONFIG_PULLEN) {
    29a4:	035b      	lsls	r3, r3, #13
    29a6:	d51c      	bpl.n	29e2 <_system_pinmux_config+0x92>
			/* Set the OUT register bits to enable the pull-up if requested,
			 * clear to enable pull-down */
			if (config->input_pull == SYSTEM_PINMUX_PIN_PULL_UP) {
    29a8:	7893      	ldrb	r3, [r2, #2]
    29aa:	2b01      	cmp	r3, #1
    29ac:	d01e      	beq.n	29ec <_system_pinmux_config+0x9c>
				port->OUTSET.reg = pin_mask;
			} else {
				port->OUTCLR.reg = pin_mask;
    29ae:	6141      	str	r1, [r0, #20]
    29b0:	e017      	b.n	29e2 <_system_pinmux_config+0x92>
	uint32_t pin_cfg = 0;
    29b2:	2300      	movs	r3, #0
    29b4:	e7d7      	b.n	2966 <_system_pinmux_config+0x16>
				pin_cfg |= PORT_WRCONFIG_PULLEN;
    29b6:	24c0      	movs	r4, #192	; 0xc0
    29b8:	02e4      	lsls	r4, r4, #11
    29ba:	4323      	orrs	r3, r4
    29bc:	e7dd      	b.n	297a <_system_pinmux_config+0x2a>
			pin_cfg &= ~PORT_WRCONFIG_PULLEN;
    29be:	4c0d      	ldr	r4, [pc, #52]	; (29f4 <_system_pinmux_config+0xa4>)
    29c0:	4023      	ands	r3, r4
    29c2:	e7df      	b.n	2984 <_system_pinmux_config+0x34>
		port->DIRCLR.reg = pin_mask;
    29c4:	6041      	str	r1, [r0, #4]
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
    29c6:	040c      	lsls	r4, r1, #16
    29c8:	0c24      	lsrs	r4, r4, #16
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    29ca:	23a0      	movs	r3, #160	; 0xa0
    29cc:	05db      	lsls	r3, r3, #23
    29ce:	4323      	orrs	r3, r4
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    29d0:	6283      	str	r3, [r0, #40]	; 0x28
	uint32_t upper_pin_mask = (pin_mask >> 16);
    29d2:	0c0c      	lsrs	r4, r1, #16
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    29d4:	23d0      	movs	r3, #208	; 0xd0
    29d6:	061b      	lsls	r3, r3, #24
    29d8:	4323      	orrs	r3, r4
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    29da:	6283      	str	r3, [r0, #40]	; 0x28
	if(!config->powersave) {
    29dc:	78d3      	ldrb	r3, [r2, #3]
    29de:	2b00      	cmp	r3, #0
    29e0:	d103      	bne.n	29ea <_system_pinmux_config+0x9a>
			}
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    29e2:	7853      	ldrb	r3, [r2, #1]
    29e4:	3b01      	subs	r3, #1
    29e6:	2b01      	cmp	r3, #1
    29e8:	d902      	bls.n	29f0 <_system_pinmux_config+0xa0>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Set the port DIR bits to enable the output buffer */
			port->DIRSET.reg = pin_mask;
		}
	}
}
    29ea:	bd30      	pop	{r4, r5, pc}
				port->OUTSET.reg = pin_mask;
    29ec:	6181      	str	r1, [r0, #24]
    29ee:	e7f8      	b.n	29e2 <_system_pinmux_config+0x92>
			port->DIRSET.reg = pin_mask;
    29f0:	6081      	str	r1, [r0, #8]
}
    29f2:	e7fa      	b.n	29ea <_system_pinmux_config+0x9a>
    29f4:	fffbffff 	.word	0xfffbffff

000029f8 <system_pinmux_pin_set_config>:
 * \param[in] config    Configuration settings for the pin
 */
void system_pinmux_pin_set_config(
		const uint8_t gpio_pin,
		const struct system_pinmux_config *const config)
{
    29f8:	b510      	push	{r4, lr}
    29fa:	000a      	movs	r2, r1
	if (port_index < PORT_INST_NUM) {
    29fc:	09c1      	lsrs	r1, r0, #7
		return NULL;
    29fe:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    2a00:	2900      	cmp	r1, #0
    2a02:	d104      	bne.n	2a0e <system_pinmux_pin_set_config+0x16>
		return &(ports[port_index]->Group[group_index]);
    2a04:	0943      	lsrs	r3, r0, #5
    2a06:	01db      	lsls	r3, r3, #7
    2a08:	4905      	ldr	r1, [pc, #20]	; (2a20 <system_pinmux_pin_set_config+0x28>)
    2a0a:	468c      	mov	ip, r1
    2a0c:	4463      	add	r3, ip
	PortGroup *const port = system_pinmux_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask = (1UL << (gpio_pin % 32));
    2a0e:	241f      	movs	r4, #31
    2a10:	4020      	ands	r0, r4
    2a12:	2101      	movs	r1, #1
    2a14:	4081      	lsls	r1, r0

	_system_pinmux_config(port, pin_mask, config);
    2a16:	0018      	movs	r0, r3
    2a18:	4b02      	ldr	r3, [pc, #8]	; (2a24 <system_pinmux_pin_set_config+0x2c>)
    2a1a:	4798      	blx	r3
}
    2a1c:	bd10      	pop	{r4, pc}
    2a1e:	46c0      	nop			; (mov r8, r8)
    2a20:	41004400 	.word	0x41004400
    2a24:	00002951 	.word	0x00002951

00002a28 <_system_dummy_init>:
 */
void _system_dummy_init(void);
void _system_dummy_init(void)
{
	return;
}
    2a28:	4770      	bx	lr
	...

00002a2c <system_init>:
 *  - Board hardware initialization (via the Board module)
 *  - Event system driver initialization (via the EVSYS module)
 *  - External Interrupt driver initialization (via the EXTINT module)
 */
void system_init(void)
{
    2a2c:	b510      	push	{r4, lr}
	/* Configure GCLK and clock sources according to conf_clocks.h */
	system_clock_init();
    2a2e:	4b05      	ldr	r3, [pc, #20]	; (2a44 <system_init+0x18>)
    2a30:	4798      	blx	r3

	/* Initialize board hardware */
	system_board_init();
    2a32:	4b05      	ldr	r3, [pc, #20]	; (2a48 <system_init+0x1c>)
    2a34:	4798      	blx	r3

	/* Initialize EVSYS hardware */
	_system_events_init();
    2a36:	4b05      	ldr	r3, [pc, #20]	; (2a4c <system_init+0x20>)
    2a38:	4798      	blx	r3

	/* Initialize External hardware */
	_system_extint_init();
    2a3a:	4b05      	ldr	r3, [pc, #20]	; (2a50 <system_init+0x24>)
    2a3c:	4798      	blx	r3
	
	/* Initialize DIVAS hardware */
	_system_divas_init();
    2a3e:	4b05      	ldr	r3, [pc, #20]	; (2a54 <system_init+0x28>)
    2a40:	4798      	blx	r3
}
    2a42:	bd10      	pop	{r4, pc}
    2a44:	00002569 	.word	0x00002569
    2a48:	0000225d 	.word	0x0000225d
    2a4c:	00002a29 	.word	0x00002a29
    2a50:	00002a29 	.word	0x00002a29
    2a54:	00002a29 	.word	0x00002a29

00002a58 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
    2a58:	e7fe      	b.n	2a58 <Dummy_Handler>
	...

00002a5c <Reset_Handler>:
{
    2a5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
        if (pSrc != pDest) {
    2a5e:	4a2a      	ldr	r2, [pc, #168]	; (2b08 <Reset_Handler+0xac>)
    2a60:	4b2a      	ldr	r3, [pc, #168]	; (2b0c <Reset_Handler+0xb0>)
    2a62:	429a      	cmp	r2, r3
    2a64:	d011      	beq.n	2a8a <Reset_Handler+0x2e>
                for (; pDest < &_erelocate;) {
    2a66:	001a      	movs	r2, r3
    2a68:	4b29      	ldr	r3, [pc, #164]	; (2b10 <Reset_Handler+0xb4>)
    2a6a:	429a      	cmp	r2, r3
    2a6c:	d20d      	bcs.n	2a8a <Reset_Handler+0x2e>
    2a6e:	4a29      	ldr	r2, [pc, #164]	; (2b14 <Reset_Handler+0xb8>)
    2a70:	3303      	adds	r3, #3
    2a72:	1a9b      	subs	r3, r3, r2
    2a74:	089b      	lsrs	r3, r3, #2
    2a76:	3301      	adds	r3, #1
    2a78:	009b      	lsls	r3, r3, #2
    2a7a:	2200      	movs	r2, #0
                        *pDest++ = *pSrc++;
    2a7c:	4823      	ldr	r0, [pc, #140]	; (2b0c <Reset_Handler+0xb0>)
    2a7e:	4922      	ldr	r1, [pc, #136]	; (2b08 <Reset_Handler+0xac>)
    2a80:	588c      	ldr	r4, [r1, r2]
    2a82:	5084      	str	r4, [r0, r2]
    2a84:	3204      	adds	r2, #4
                for (; pDest < &_erelocate;) {
    2a86:	429a      	cmp	r2, r3
    2a88:	d1fa      	bne.n	2a80 <Reset_Handler+0x24>
        for (pDest = &_szero; pDest < &_ezero;) {
    2a8a:	4a23      	ldr	r2, [pc, #140]	; (2b18 <Reset_Handler+0xbc>)
    2a8c:	4b23      	ldr	r3, [pc, #140]	; (2b1c <Reset_Handler+0xc0>)
    2a8e:	429a      	cmp	r2, r3
    2a90:	d20a      	bcs.n	2aa8 <Reset_Handler+0x4c>
    2a92:	43d3      	mvns	r3, r2
    2a94:	4921      	ldr	r1, [pc, #132]	; (2b1c <Reset_Handler+0xc0>)
    2a96:	185b      	adds	r3, r3, r1
    2a98:	2103      	movs	r1, #3
    2a9a:	438b      	bics	r3, r1
    2a9c:	3304      	adds	r3, #4
    2a9e:	189b      	adds	r3, r3, r2
                *pDest++ = 0;
    2aa0:	2100      	movs	r1, #0
    2aa2:	c202      	stmia	r2!, {r1}
        for (pDest = &_szero; pDest < &_ezero;) {
    2aa4:	4293      	cmp	r3, r2
    2aa6:	d1fc      	bne.n	2aa2 <Reset_Handler+0x46>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
    2aa8:	4a1d      	ldr	r2, [pc, #116]	; (2b20 <Reset_Handler+0xc4>)
    2aaa:	21ff      	movs	r1, #255	; 0xff
    2aac:	4b1d      	ldr	r3, [pc, #116]	; (2b24 <Reset_Handler+0xc8>)
    2aae:	438b      	bics	r3, r1
    2ab0:	6093      	str	r3, [r2, #8]
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
    2ab2:	39fd      	subs	r1, #253	; 0xfd
    2ab4:	2390      	movs	r3, #144	; 0x90
    2ab6:	005b      	lsls	r3, r3, #1
    2ab8:	4a1b      	ldr	r2, [pc, #108]	; (2b28 <Reset_Handler+0xcc>)
    2aba:	50d1      	str	r1, [r2, r3]
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
    2abc:	4a1b      	ldr	r2, [pc, #108]	; (2b2c <Reset_Handler+0xd0>)
    2abe:	78d3      	ldrb	r3, [r2, #3]
    2ac0:	2503      	movs	r5, #3
    2ac2:	43ab      	bics	r3, r5
    2ac4:	2402      	movs	r4, #2
    2ac6:	4323      	orrs	r3, r4
    2ac8:	70d3      	strb	r3, [r2, #3]
        USB->DEVICE.QOSCTRL.bit.DQOS = 2;
    2aca:	78d3      	ldrb	r3, [r2, #3]
    2acc:	270c      	movs	r7, #12
    2ace:	43bb      	bics	r3, r7
    2ad0:	2608      	movs	r6, #8
    2ad2:	4333      	orrs	r3, r6
    2ad4:	70d3      	strb	r3, [r2, #3]
        DMAC->QOSCTRL.bit.DQOS = 2;
    2ad6:	4b16      	ldr	r3, [pc, #88]	; (2b30 <Reset_Handler+0xd4>)
    2ad8:	7b98      	ldrb	r0, [r3, #14]
    2ada:	2230      	movs	r2, #48	; 0x30
    2adc:	4390      	bics	r0, r2
    2ade:	2220      	movs	r2, #32
    2ae0:	4310      	orrs	r0, r2
    2ae2:	7398      	strb	r0, [r3, #14]
        DMAC->QOSCTRL.bit.FQOS = 2;
    2ae4:	7b99      	ldrb	r1, [r3, #14]
    2ae6:	43b9      	bics	r1, r7
    2ae8:	4331      	orrs	r1, r6
    2aea:	7399      	strb	r1, [r3, #14]
        DMAC->QOSCTRL.bit.WRBQOS = 2;
    2aec:	7b9a      	ldrb	r2, [r3, #14]
    2aee:	43aa      	bics	r2, r5
    2af0:	4322      	orrs	r2, r4
    2af2:	739a      	strb	r2, [r3, #14]
        NVMCTRL->CTRLB.bit.MANW = 1;
    2af4:	4a0f      	ldr	r2, [pc, #60]	; (2b34 <Reset_Handler+0xd8>)
    2af6:	6853      	ldr	r3, [r2, #4]
    2af8:	2180      	movs	r1, #128	; 0x80
    2afa:	430b      	orrs	r3, r1
    2afc:	6053      	str	r3, [r2, #4]
        __libc_init_array();
    2afe:	4b0e      	ldr	r3, [pc, #56]	; (2b38 <Reset_Handler+0xdc>)
    2b00:	4798      	blx	r3
        main();
    2b02:	4b0e      	ldr	r3, [pc, #56]	; (2b3c <Reset_Handler+0xe0>)
    2b04:	4798      	blx	r3
    2b06:	e7fe      	b.n	2b06 <Reset_Handler+0xaa>
    2b08:	00004d34 	.word	0x00004d34
    2b0c:	20000000 	.word	0x20000000
    2b10:	2000000c 	.word	0x2000000c
    2b14:	20000004 	.word	0x20000004
    2b18:	2000000c 	.word	0x2000000c
    2b1c:	2000018c 	.word	0x2000018c
    2b20:	e000ed00 	.word	0xe000ed00
    2b24:	00000000 	.word	0x00000000
    2b28:	41007000 	.word	0x41007000
    2b2c:	41005000 	.word	0x41005000
    2b30:	41004800 	.word	0x41004800
    2b34:	41004000 	.word	0x41004000
    2b38:	00004bbd 	.word	0x00004bbd
    2b3c:	00003075 	.word	0x00003075

00002b40 <configure_spi_slave>:
/**
 * @brief Configures SPI as slave
 * 
 */
void configure_spi_slave(void)
{
    2b40:	b570      	push	{r4, r5, r6, lr}
    2b42:	b090      	sub	sp, #64	; 0x40
	config->direction  = PORT_PIN_DIR_INPUT;
    2b44:	a901      	add	r1, sp, #4
    2b46:	2500      	movs	r5, #0
    2b48:	700d      	strb	r5, [r1, #0]
	config->input_pull = PORT_PIN_PULL_UP;
    2b4a:	2601      	movs	r6, #1
    2b4c:	704e      	strb	r6, [r1, #1]
	config->powersave  = false;
    2b4e:	708d      	strb	r5, [r1, #2]
    struct spi_config config_spi_slave;
	struct port_config config_port_pin;
    port_get_config_defaults(&config_port_pin);
    config_port_pin.direction  = PORT_PIN_DIR_INPUT;
    config_port_pin.input_pull = PORT_PIN_PULL_UP;
	port_pin_set_config(PIN_PA17, &config_port_pin);
    2b50:	2011      	movs	r0, #17
    2b52:	4b1c      	ldr	r3, [pc, #112]	; (2bc4 <configure_spi_slave+0x84>)
    2b54:	4798      	blx	r3
	config->data_order       = SPI_DATA_ORDER_MSB;
    2b56:	ac02      	add	r4, sp, #8
    2b58:	6065      	str	r5, [r4, #4]
	config->transfer_mode    = SPI_TRANSFER_MODE_0;
    2b5a:	60a5      	str	r5, [r4, #8]
	config->character_size   = SPI_CHARACTER_SIZE_8BIT;
    2b5c:	7425      	strb	r5, [r4, #16]
	config->run_in_standby   = false;
    2b5e:	7465      	strb	r5, [r4, #17]
	config->receiver_enable  = true;
    2b60:	74a6      	strb	r6, [r4, #18]
	config->select_slave_low_detect_enable= true;
    2b62:	74e6      	strb	r6, [r4, #19]
	config->master_slave_select_enable= false;
    2b64:	7525      	strb	r5, [r4, #20]
	config->generator_source = GCLK_GENERATOR_0;
    2b66:	2324      	movs	r3, #36	; 0x24
    2b68:	54e5      	strb	r5, [r4, r3]
	memset(&(config->mode_specific), 0, sizeof(config->mode_specific));
    2b6a:	220c      	movs	r2, #12
    2b6c:	2100      	movs	r1, #0
    2b6e:	a808      	add	r0, sp, #32
    2b70:	4b15      	ldr	r3, [pc, #84]	; (2bc8 <configure_spi_slave+0x88>)
    2b72:	4798      	blx	r3
    /* Configure, initialize and enable SERCOM SPI module */
    spi_get_config_defaults(&config_spi_slave);
    config_spi_slave.mode = SPI_MODE_SLAVE;
    2b74:	7025      	strb	r5, [r4, #0]
    config_spi_slave.mode_specific.slave.preload_enable = true;
    2b76:	2320      	movs	r3, #32
    2b78:	54e6      	strb	r6, [r4, r3]
    config_spi_slave.mode_specific.slave.frame_format = SPI_FRAME_FORMAT_SPI_FRAME;
    2b7a:	61a5      	str	r5, [r4, #24]
    config_spi_slave.mux_setting = SPI_SIGNAL_MUX_SETTING_E;
    2b7c:	2380      	movs	r3, #128	; 0x80
    2b7e:	025b      	lsls	r3, r3, #9
    2b80:	60e3      	str	r3, [r4, #12]
    config_spi_slave.pinmux_pad0 = PINMUX_PA16C_SERCOM1_PAD0;
    2b82:	4b12      	ldr	r3, [pc, #72]	; (2bcc <configure_spi_slave+0x8c>)
    2b84:	62a3      	str	r3, [r4, #40]	; 0x28
    config_spi_slave.pinmux_pad1 = PIN_PA17;
    2b86:	2311      	movs	r3, #17
    2b88:	62e3      	str	r3, [r4, #44]	; 0x2c
    config_spi_slave.pinmux_pad2 = PINMUX_PA18C_SERCOM1_PAD2;
    2b8a:	4b11      	ldr	r3, [pc, #68]	; (2bd0 <configure_spi_slave+0x90>)
    2b8c:	6323      	str	r3, [r4, #48]	; 0x30
    config_spi_slave.pinmux_pad3 = PINMUX_PA19C_SERCOM1_PAD3;
    2b8e:	4b11      	ldr	r3, [pc, #68]	; (2bd4 <configure_spi_slave+0x94>)
    2b90:	6363      	str	r3, [r4, #52]	; 0x34
    spi_init(&spi_slave_instance, EDBG_SPI_MODULE, &config_spi_slave);
    2b92:	4d11      	ldr	r5, [pc, #68]	; (2bd8 <configure_spi_slave+0x98>)
    2b94:	0022      	movs	r2, r4
    2b96:	4911      	ldr	r1, [pc, #68]	; (2bdc <configure_spi_slave+0x9c>)
    2b98:	0028      	movs	r0, r5
    2b9a:	4b11      	ldr	r3, [pc, #68]	; (2be0 <configure_spi_slave+0xa0>)
    2b9c:	4798      	blx	r3
	SercomSpi *const spi_module = &(module->hw->SPI);
    2b9e:	682c      	ldr	r4, [r5, #0]
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
    2ba0:	0020      	movs	r0, r4
    2ba2:	4b10      	ldr	r3, [pc, #64]	; (2be4 <configure_spi_slave+0xa4>)
    2ba4:	4798      	blx	r3
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    2ba6:	231f      	movs	r3, #31
    2ba8:	4018      	ands	r0, r3
    2baa:	4086      	lsls	r6, r0
    2bac:	4b0e      	ldr	r3, [pc, #56]	; (2be8 <configure_spi_slave+0xa8>)
    2bae:	601e      	str	r6, [r3, #0]
	SercomSpi *const spi_module = &(module->hw->SPI);
    2bb0:	682a      	ldr	r2, [r5, #0]
	return (spi_module->SYNCBUSY.reg);
    2bb2:	69d3      	ldr	r3, [r2, #28]
	while (spi_is_syncing(module)) {
    2bb4:	2b00      	cmp	r3, #0
    2bb6:	d1fc      	bne.n	2bb2 <configure_spi_slave+0x72>
	spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_ENABLE;
    2bb8:	6823      	ldr	r3, [r4, #0]
    2bba:	2202      	movs	r2, #2
    2bbc:	4313      	orrs	r3, r2
    2bbe:	6023      	str	r3, [r4, #0]
    spi_enable(&spi_slave_instance);
}
    2bc0:	b010      	add	sp, #64	; 0x40
    2bc2:	bd70      	pop	{r4, r5, r6, pc}
    2bc4:	00002295 	.word	0x00002295
    2bc8:	00004c05 	.word	0x00004c05
    2bcc:	00100002 	.word	0x00100002
    2bd0:	00120002 	.word	0x00120002
    2bd4:	00130002 	.word	0x00130002
    2bd8:	20000080 	.word	0x20000080
    2bdc:	42000c00 	.word	0x42000c00
    2be0:	00001211 	.word	0x00001211
    2be4:	0000215d 	.word	0x0000215d
    2be8:	e000e100 	.word	0xe000e100

00002bec <configure_spi_master>:
/**
 * @brief Configures SPI as master
 * Configure setting for SPI
 */
void configure_spi_master(void)
{
    2bec:	b5f0      	push	{r4, r5, r6, r7, lr}
    2bee:	b091      	sub	sp, #68	; 0x44
	slave->ss_pin          = config->ss_pin;
    2bf0:	4c29      	ldr	r4, [pc, #164]	; (2c98 <configure_spi_master+0xac>)
    2bf2:	2311      	movs	r3, #17
    2bf4:	7023      	strb	r3, [r4, #0]
	slave->address_enabled = config->address_enabled;
    2bf6:	2300      	movs	r3, #0
    2bf8:	7063      	strb	r3, [r4, #1]
	slave->address         = config->address;
    2bfa:	70a3      	strb	r3, [r4, #2]
	config->input_pull = PORT_PIN_PULL_UP;
    2bfc:	a901      	add	r1, sp, #4
    2bfe:	2201      	movs	r2, #1
    2c00:	704a      	strb	r2, [r1, #1]
	config->powersave  = false;
    2c02:	708b      	strb	r3, [r1, #2]
	pin_conf.direction = PORT_PIN_DIR_OUTPUT;
    2c04:	700a      	strb	r2, [r1, #0]
	port_pin_set_config(slave->ss_pin, &pin_conf);
    2c06:	2011      	movs	r0, #17
    2c08:	4b24      	ldr	r3, [pc, #144]	; (2c9c <configure_spi_master+0xb0>)
    2c0a:	4798      	blx	r3
	port_pin_set_output_level(slave->ss_pin, true);
    2c0c:	7823      	ldrb	r3, [r4, #0]
	if (port_index < PORT_INST_NUM) {
    2c0e:	09d9      	lsrs	r1, r3, #7
		return NULL;
    2c10:	2200      	movs	r2, #0
	if (port_index < PORT_INST_NUM) {
    2c12:	2900      	cmp	r1, #0
    2c14:	d104      	bne.n	2c20 <configure_spi_master+0x34>
		return &(ports[port_index]->Group[group_index]);
    2c16:	095a      	lsrs	r2, r3, #5
    2c18:	01d2      	lsls	r2, r2, #7
    2c1a:	4921      	ldr	r1, [pc, #132]	; (2ca0 <configure_spi_master+0xb4>)
    2c1c:	468c      	mov	ip, r1
    2c1e:	4462      	add	r2, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    2c20:	261f      	movs	r6, #31
    2c22:	4033      	ands	r3, r6
    2c24:	2501      	movs	r5, #1
    2c26:	0029      	movs	r1, r5
    2c28:	4099      	lsls	r1, r3
		port_base->OUTSET.reg = pin_mask;
    2c2a:	6191      	str	r1, [r2, #24]
	config->mode             = SPI_MODE_MASTER;
    2c2c:	ac02      	add	r4, sp, #8
    2c2e:	7025      	strb	r5, [r4, #0]
	config->data_order       = SPI_DATA_ORDER_MSB;
    2c30:	2300      	movs	r3, #0
    2c32:	9303      	str	r3, [sp, #12]
	config->transfer_mode    = SPI_TRANSFER_MODE_0;
    2c34:	9304      	str	r3, [sp, #16]
	config->character_size   = SPI_CHARACTER_SIZE_8BIT;
    2c36:	7423      	strb	r3, [r4, #16]
	config->run_in_standby   = false;
    2c38:	7463      	strb	r3, [r4, #17]
	config->receiver_enable  = true;
    2c3a:	74a5      	strb	r5, [r4, #18]
	config->select_slave_low_detect_enable= true;
    2c3c:	74e5      	strb	r5, [r4, #19]
	config->master_slave_select_enable= false;
    2c3e:	7523      	strb	r3, [r4, #20]
	config->generator_source = GCLK_GENERATOR_0;
    2c40:	2224      	movs	r2, #36	; 0x24
    2c42:	54a3      	strb	r3, [r4, r2]
	memset(&(config->mode_specific), 0, sizeof(config->mode_specific));
    2c44:	3a18      	subs	r2, #24
    2c46:	2100      	movs	r1, #0
    2c48:	a808      	add	r0, sp, #32
    2c4a:	4b16      	ldr	r3, [pc, #88]	; (2ca4 <configure_spi_master+0xb8>)
    2c4c:	4798      	blx	r3
	config->mode_specific.master.baudrate = 100000;
    2c4e:	4b16      	ldr	r3, [pc, #88]	; (2ca8 <configure_spi_master+0xbc>)
    2c50:	61a3      	str	r3, [r4, #24]
    spi_slave_inst_get_config_defaults(&slave_dev_config);
    slave_dev_config.ss_pin = PIN_PA17;
    spi_attach_slave(&slave, &slave_dev_config);
    /* Configure, initialize and enable SERCOM SPI module */
    spi_get_config_defaults(&config_spi_master);
    config_spi_master.mux_setting = SPI_SIGNAL_MUX_SETTING_E;
    2c52:	2380      	movs	r3, #128	; 0x80
    2c54:	025b      	lsls	r3, r3, #9
    2c56:	60e3      	str	r3, [r4, #12]
    config_spi_master.pinmux_pad0 = PINMUX_PA16C_SERCOM1_PAD0;
    2c58:	4b14      	ldr	r3, [pc, #80]	; (2cac <configure_spi_master+0xc0>)
    2c5a:	62a3      	str	r3, [r4, #40]	; 0x28
    config_spi_master.pinmux_pad1 = PIN_PA17;
    2c5c:	2311      	movs	r3, #17
    2c5e:	62e3      	str	r3, [r4, #44]	; 0x2c
    config_spi_master.pinmux_pad2 = PINMUX_PA18C_SERCOM1_PAD2;
    2c60:	4b13      	ldr	r3, [pc, #76]	; (2cb0 <configure_spi_master+0xc4>)
    2c62:	6323      	str	r3, [r4, #48]	; 0x30
    config_spi_master.pinmux_pad3 = PINMUX_PA19C_SERCOM1_PAD3;
    2c64:	4b13      	ldr	r3, [pc, #76]	; (2cb4 <configure_spi_master+0xc8>)
    2c66:	6363      	str	r3, [r4, #52]	; 0x34
    spi_init(&spi_master_instance, EDBG_SPI_MODULE, &config_spi_master);
    2c68:	4f13      	ldr	r7, [pc, #76]	; (2cb8 <configure_spi_master+0xcc>)
    2c6a:	0022      	movs	r2, r4
    2c6c:	4913      	ldr	r1, [pc, #76]	; (2cbc <configure_spi_master+0xd0>)
    2c6e:	0038      	movs	r0, r7
    2c70:	4b13      	ldr	r3, [pc, #76]	; (2cc0 <configure_spi_master+0xd4>)
    2c72:	4798      	blx	r3
	SercomSpi *const spi_module = &(module->hw->SPI);
    2c74:	683c      	ldr	r4, [r7, #0]
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
    2c76:	0020      	movs	r0, r4
    2c78:	4b12      	ldr	r3, [pc, #72]	; (2cc4 <configure_spi_master+0xd8>)
    2c7a:	4798      	blx	r3
    2c7c:	4006      	ands	r6, r0
    2c7e:	40b5      	lsls	r5, r6
    2c80:	4b11      	ldr	r3, [pc, #68]	; (2cc8 <configure_spi_master+0xdc>)
    2c82:	601d      	str	r5, [r3, #0]
	SercomSpi *const spi_module = &(module->hw->SPI);
    2c84:	683a      	ldr	r2, [r7, #0]
	return (spi_module->SYNCBUSY.reg);
    2c86:	69d3      	ldr	r3, [r2, #28]
	while (spi_is_syncing(module)) {
    2c88:	2b00      	cmp	r3, #0
    2c8a:	d1fc      	bne.n	2c86 <configure_spi_master+0x9a>
	spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_ENABLE;
    2c8c:	6823      	ldr	r3, [r4, #0]
    2c8e:	2202      	movs	r2, #2
    2c90:	4313      	orrs	r3, r2
    2c92:	6023      	str	r3, [r4, #0]
    spi_enable(&spi_master_instance);
}
    2c94:	b011      	add	sp, #68	; 0x44
    2c96:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2c98:	20000154 	.word	0x20000154
    2c9c:	00002295 	.word	0x00002295
    2ca0:	41004400 	.word	0x41004400
    2ca4:	00004c05 	.word	0x00004c05
    2ca8:	000186a0 	.word	0x000186a0
    2cac:	00100002 	.word	0x00100002
    2cb0:	00120002 	.word	0x00120002
    2cb4:	00130002 	.word	0x00130002
    2cb8:	20000118 	.word	0x20000118
    2cbc:	42000c00 	.word	0x42000c00
    2cc0:	00001211 	.word	0x00001211
    2cc4:	0000215d 	.word	0x0000215d
    2cc8:	e000e100 	.word	0xe000e100

00002ccc <configure_i2c_slave>:
/**
 * @brief Configures I2C as Slave
 * Configure the setting for setting the SERCOM as I2C slave
 */
void configure_i2c_slave(void)
{
    2ccc:	b530      	push	{r4, r5, lr}
    2cce:	b08b      	sub	sp, #44	; 0x2c
static inline void i2c_slave_get_config_defaults(
		struct i2c_slave_config *const config)
{
	/*Sanity check argument */
	Assert(config);
	config->enable_scl_low_timeout = false;
    2cd0:	2200      	movs	r2, #0
    2cd2:	466b      	mov	r3, sp
    2cd4:	701a      	strb	r2, [r3, #0]
	config->sda_hold_time = I2C_SLAVE_SDA_HOLD_TIME_300NS_600NS;
    2cd6:	2380      	movs	r3, #128	; 0x80
    2cd8:	039b      	lsls	r3, r3, #14
    2cda:	9301      	str	r3, [sp, #4]
	config->buffer_timeout = 65535;
	config->address_mode = I2C_SLAVE_ADDRESS_MODE_MASK;
    2cdc:	2300      	movs	r3, #0
    2cde:	4669      	mov	r1, sp
    2ce0:	814a      	strh	r2, [r1, #10]
	config->address = 0;
	config->address_mask = 0;
    2ce2:	81ca      	strh	r2, [r1, #14]
#ifdef FEATURE_I2C_10_BIT_ADDRESS
	config->ten_bit_address = false;
    2ce4:	740b      	strb	r3, [r1, #16]
#endif
	config->enable_general_call_address = false;
    2ce6:	744b      	strb	r3, [r1, #17]
#ifdef FEATURE_I2C_FAST_MODE_PLUS_AND_HIGH_SPEED
	config->transfer_speed = I2C_SLAVE_SPEED_STANDARD_AND_FAST;
    2ce8:	9205      	str	r2, [sp, #20]
#endif
#if I2C_SLAVE_CALLBACK_MODE == true
	config->enable_nack_on_address = false;
    2cea:	760b      	strb	r3, [r1, #24]
#endif
	config->generator_source = GCLK_GENERATOR_0;
    2cec:	764b      	strb	r3, [r1, #25]
	config->run_in_standby = false;
    2cee:	768b      	strb	r3, [r1, #26]
	config->pinmux_pad0 = PINMUX_DEFAULT;
	config->pinmux_pad1 = PINMUX_DEFAULT;
	config->scl_low_timeout  = false;
    2cf0:	2224      	movs	r2, #36	; 0x24
    2cf2:	548b      	strb	r3, [r1, r2]
#ifdef FEATURE_I2C_SCL_STRETCH_MODE
	config->scl_stretch_only_after_ack_bit = false;
    2cf4:	3201      	adds	r2, #1
    2cf6:	548b      	strb	r3, [r1, r2]
#endif
#ifdef FEATURE_I2C_SCL_EXTEND_TIMEOUT
	config->slave_scl_low_extend_timeout   = false;
    2cf8:	3201      	adds	r2, #1
    2cfa:	548b      	strb	r3, [r1, r2]
	struct i2c_slave_config i2c_slave;
	i2c_slave_get_config_defaults(&i2c_slave);
	
	i2c_slave.address = I2C_SLAVE_ADDR;
    2cfc:	2330      	movs	r3, #48	; 0x30
    2cfe:	466a      	mov	r2, sp
    2d00:	818b      	strh	r3, [r1, #12]
	i2c_slave.address_mode = I2C_SLAVE_ADDRESS_MODE_MASK;	// can set for these: Address mask, second address, or lower limit of address range.
	i2c_slave.pinmux_pad0 = EDBG_I2C_SERCOM_PINMUX_PAD0;
    2d02:	4b10      	ldr	r3, [pc, #64]	; (2d44 <configure_i2c_slave+0x78>)
    2d04:	9307      	str	r3, [sp, #28]
	i2c_slave.pinmux_pad1 = EDBG_I2C_SERCOM_PINMUX_PAD1;
    2d06:	4b10      	ldr	r3, [pc, #64]	; (2d48 <configure_i2c_slave+0x7c>)
    2d08:	9308      	str	r3, [sp, #32]
	i2c_slave.buffer_timeout = 1000;
    2d0a:	23fa      	movs	r3, #250	; 0xfa
    2d0c:	009b      	lsls	r3, r3, #2
    2d0e:	810b      	strh	r3, [r1, #8]
	
	//initialize and enable device with i2c_slave/
	i2c_slave_init(&i2c_slave_instance, EDBG_I2C_MODULE, &i2c_slave);
    2d10:	4d0e      	ldr	r5, [pc, #56]	; (2d4c <configure_i2c_slave+0x80>)
    2d12:	490f      	ldr	r1, [pc, #60]	; (2d50 <configure_i2c_slave+0x84>)
    2d14:	0028      	movs	r0, r5
    2d16:	4b0f      	ldr	r3, [pc, #60]	; (2d54 <configure_i2c_slave+0x88>)
    2d18:	4798      	blx	r3
{
	/* Sanity check of arguments */
	Assert(module);
	Assert(module->hw);

	SercomI2cs *const i2c_hw = &(module->hw->I2CS);
    2d1a:	682c      	ldr	r4, [r5, #0]

#if I2C_SLAVE_CALLBACK_MODE == true
	/* Enable global interrupt for module */
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
    2d1c:	0020      	movs	r0, r4
    2d1e:	4b0e      	ldr	r3, [pc, #56]	; (2d58 <configure_i2c_slave+0x8c>)
    2d20:	4798      	blx	r3
    2d22:	231f      	movs	r3, #31
    2d24:	4018      	ands	r0, r3
    2d26:	3b1e      	subs	r3, #30
    2d28:	4083      	lsls	r3, r0
    2d2a:	4a0c      	ldr	r2, [pc, #48]	; (2d5c <configure_i2c_slave+0x90>)
    2d2c:	6013      	str	r3, [r2, #0]
	SercomI2cs *const i2c_hw = &(module->hw->I2CS);
    2d2e:	6829      	ldr	r1, [r5, #0]
	return (i2c_hw->SYNCBUSY.reg & SERCOM_I2CS_SYNCBUSY_MASK);
    2d30:	2203      	movs	r2, #3
    2d32:	69cb      	ldr	r3, [r1, #28]
	while (i2c_slave_is_syncing(module)) {
    2d34:	421a      	tst	r2, r3
    2d36:	d1fc      	bne.n	2d32 <configure_i2c_slave+0x66>

	/* Wait for module to sync */
	_i2c_slave_wait_for_sync(module);

	/* Enable module */
	i2c_hw->CTRLA.reg |= SERCOM_I2CS_CTRLA_ENABLE;
    2d38:	6823      	ldr	r3, [r4, #0]
    2d3a:	2202      	movs	r2, #2
    2d3c:	4313      	orrs	r3, r2
    2d3e:	6023      	str	r3, [r4, #0]
	i2c_slave_enable(&i2c_slave_instance);
}
    2d40:	b00b      	add	sp, #44	; 0x2c
    2d42:	bd30      	pop	{r4, r5, pc}
    2d44:	00080002 	.word	0x00080002
    2d48:	00090002 	.word	0x00090002
    2d4c:	20000158 	.word	0x20000158
    2d50:	42000800 	.word	0x42000800
    2d54:	00000919 	.word	0x00000919
    2d58:	0000215d 	.word	0x0000215d
    2d5c:	e000e100 	.word	0xe000e100

00002d60 <configure_i2c_master>:
/**
 * @brief Configures I2C as master
 * Configure the setting for setting the SERCOM as I2C master
 */
void configure_i2c_master(void)
{
    2d60:	b530      	push	{r4, r5, lr}
    2d62:	b08f      	sub	sp, #60	; 0x3c
static inline void i2c_master_get_config_defaults(
		struct i2c_master_config *const config)
{
	/*Sanity check argument */
	Assert(config);
	config->baud_rate        = I2C_MASTER_BAUD_RATE_100KHZ;
    2d64:	aa01      	add	r2, sp, #4
    2d66:	2364      	movs	r3, #100	; 0x64
    2d68:	9301      	str	r3, [sp, #4]
#ifdef FEATURE_I2C_FAST_MODE_PLUS_AND_HIGH_SPEED
	config->baud_rate_high_speed = I2C_MASTER_BAUD_RATE_3400KHZ;
    2d6a:	4b21      	ldr	r3, [pc, #132]	; (2df0 <configure_i2c_master+0x90>)
    2d6c:	6053      	str	r3, [r2, #4]
	config->transfer_speed       = I2C_MASTER_SPEED_STANDARD_AND_FAST;
    2d6e:	2300      	movs	r3, #0
    2d70:	6093      	str	r3, [r2, #8]
#endif
	config->generator_source = GCLK_GENERATOR_0;
    2d72:	7313      	strb	r3, [r2, #12]
	config->run_in_standby   = false;
    2d74:	7613      	strb	r3, [r2, #24]
	config->start_hold_time  = I2C_MASTER_START_HOLD_TIME_300NS_600NS;
    2d76:	2180      	movs	r1, #128	; 0x80
    2d78:	0389      	lsls	r1, r1, #14
    2d7a:	6111      	str	r1, [r2, #16]
	config->buffer_timeout   = 65535;
	config->unknown_bus_state_timeout = 65535;
    2d7c:	2101      	movs	r1, #1
    2d7e:	4249      	negs	r1, r1
    2d80:	8291      	strh	r1, [r2, #20]
	config->pinmux_pad0      = PINMUX_DEFAULT;
	config->pinmux_pad1      = PINMUX_DEFAULT;
	config->scl_low_timeout  = false;
    2d82:	3125      	adds	r1, #37	; 0x25
    2d84:	5453      	strb	r3, [r2, r1]
	config->inactive_timeout = I2C_MASTER_INACTIVE_TIMEOUT_DISABLED;
    2d86:	6293      	str	r3, [r2, #40]	; 0x28
#ifdef FEATURE_I2C_SCL_STRETCH_MODE
	config->scl_stretch_only_after_ack_bit = false;
    2d88:	3108      	adds	r1, #8
    2d8a:	5453      	strb	r3, [r2, r1]
#endif
#ifdef FEATURE_I2C_SCL_EXTEND_TIMEOUT
	config->slave_scl_low_extend_timeout   = false;
    2d8c:	3101      	adds	r1, #1
    2d8e:	5453      	strb	r3, [r2, r1]
	config->master_scl_low_extend_timeout  = false;
    2d90:	3101      	adds	r1, #1
    2d92:	5453      	strb	r3, [r2, r1]
#endif
	/* The typical value is 215ns */
	config->sda_scl_rise_time_ns = 215;
    2d94:	33d7      	adds	r3, #215	; 0xd7
    2d96:	8613      	strh	r3, [r2, #48]	; 0x30
	/* Initialize config structure and software module. */
	struct i2c_master_config i2c_master;
	i2c_master_get_config_defaults(&i2c_master);
	
	/* Change buffer timeout to something longer. */
	i2c_master.buffer_timeout = 10000;
    2d98:	4b16      	ldr	r3, [pc, #88]	; (2df4 <configure_i2c_master+0x94>)
    2d9a:	82d3      	strh	r3, [r2, #22]
	i2c_master.pinmux_pad0 = EDBG_I2C_SERCOM_PINMUX_PAD0;
    2d9c:	4b16      	ldr	r3, [pc, #88]	; (2df8 <configure_i2c_master+0x98>)
    2d9e:	61d3      	str	r3, [r2, #28]
	i2c_master.pinmux_pad1 = EDBG_I2C_SERCOM_PINMUX_PAD1;
    2da0:	4b16      	ldr	r3, [pc, #88]	; (2dfc <configure_i2c_master+0x9c>)
    2da2:	6213      	str	r3, [r2, #32]
	
	 /* Initialize and enable device with config. */
	i2c_master_init(&i2c_master_instance, EDBG_I2C_MODULE, &i2c_master);
    2da4:	4c16      	ldr	r4, [pc, #88]	; (2e00 <configure_i2c_master+0xa0>)
    2da6:	4917      	ldr	r1, [pc, #92]	; (2e04 <configure_i2c_master+0xa4>)
    2da8:	0020      	movs	r0, r4
    2daa:	4b17      	ldr	r3, [pc, #92]	; (2e08 <configure_i2c_master+0xa8>)
    2dac:	4798      	blx	r3
{
	/* Sanity check of arguments */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    2dae:	6824      	ldr	r4, [r4, #0]
	return (i2c_hw->SYNCBUSY.reg & SERCOM_I2CM_SYNCBUSY_MASK);
    2db0:	2207      	movs	r2, #7
    2db2:	69e3      	ldr	r3, [r4, #28]
	while (i2c_master_is_syncing(module)) {
    2db4:	421a      	tst	r2, r3
    2db6:	d1fc      	bne.n	2db2 <configure_i2c_master+0x52>

	/* Wait for module to sync */
	_i2c_master_wait_for_sync(module);

	/* Enable module */
	i2c_module->CTRLA.reg |= SERCOM_I2CM_CTRLA_ENABLE;
    2db8:	6823      	ldr	r3, [r4, #0]
    2dba:	2202      	movs	r2, #2
    2dbc:	4313      	orrs	r3, r2
    2dbe:	6023      	str	r3, [r4, #0]

#if I2C_MASTER_CALLBACK_MODE == true
	/* Enable module interrupts */
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
    2dc0:	4d0f      	ldr	r5, [pc, #60]	; (2e00 <configure_i2c_master+0xa0>)
    2dc2:	6828      	ldr	r0, [r5, #0]
    2dc4:	4b11      	ldr	r3, [pc, #68]	; (2e0c <configure_i2c_master+0xac>)
    2dc6:	4798      	blx	r3
    2dc8:	231f      	movs	r3, #31
    2dca:	4018      	ands	r0, r3
    2dcc:	3b1e      	subs	r3, #30
    2dce:	4083      	lsls	r3, r0
    2dd0:	4a0f      	ldr	r2, [pc, #60]	; (2e10 <configure_i2c_master+0xb0>)
    2dd2:	6013      	str	r3, [r2, #0]
#endif
	/* Start timeout if bus state is unknown */
	while (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(1))) {
		timeout_counter++;
		if(timeout_counter >= (module->unknown_bus_state_timeout)) {
    2dd4:	88e8      	ldrh	r0, [r5, #6]
	uint32_t timeout_counter = 0;
    2dd6:	2300      	movs	r3, #0
	while (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(1))) {
    2dd8:	2110      	movs	r1, #16
    2dda:	8b62      	ldrh	r2, [r4, #26]
    2ddc:	420a      	tst	r2, r1
    2dde:	d104      	bne.n	2dea <configure_i2c_master+0x8a>
		timeout_counter++;
    2de0:	3301      	adds	r3, #1
		if(timeout_counter >= (module->unknown_bus_state_timeout)) {
    2de2:	4283      	cmp	r3, r0
    2de4:	d3f9      	bcc.n	2dda <configure_i2c_master+0x7a>
			/* Timeout, force bus state to idle */
			i2c_module->STATUS.reg = SERCOM_I2CM_STATUS_BUSSTATE(1);
    2de6:	2310      	movs	r3, #16
    2de8:	8363      	strh	r3, [r4, #26]
	i2c_master_enable(&i2c_master_instance);
}
    2dea:	b00f      	add	sp, #60	; 0x3c
    2dec:	bd30      	pop	{r4, r5, pc}
    2dee:	46c0      	nop			; (mov r8, r8)
    2df0:	00000d48 	.word	0x00000d48
    2df4:	00002710 	.word	0x00002710
    2df8:	00080002 	.word	0x00080002
    2dfc:	00090002 	.word	0x00090002
    2e00:	200000f0 	.word	0x200000f0
    2e04:	42000800 	.word	0x42000800
    2e08:	0000018d 	.word	0x0000018d
    2e0c:	0000215d 	.word	0x0000215d
    2e10:	e000e100 	.word	0xe000e100

00002e14 <blink_led>:

/**
 * @brief Blinks LED
 * This function turns on the ON-Board LED for 1 sec and turns it OFF
 */
void blink_led(void){
    2e14:	b570      	push	{r4, r5, r6, lr}
		port_base->OUTCLR.reg = pin_mask;
    2e16:	4c05      	ldr	r4, [pc, #20]	; (2e2c <blink_led+0x18>)
    2e18:	2580      	movs	r5, #128	; 0x80
    2e1a:	042d      	lsls	r5, r5, #16
    2e1c:	6165      	str	r5, [r4, #20]
	port_pin_set_output_level(LED_0_PIN,0);
	delay_s(1);
    2e1e:	20fa      	movs	r0, #250	; 0xfa
    2e20:	0080      	lsls	r0, r0, #2
    2e22:	4b03      	ldr	r3, [pc, #12]	; (2e30 <blink_led+0x1c>)
    2e24:	4798      	blx	r3
		port_base->OUTSET.reg = pin_mask;
    2e26:	61a5      	str	r5, [r4, #24]
	port_pin_set_output_level(LED_0_PIN,1);
}
    2e28:	bd70      	pop	{r4, r5, r6, pc}
    2e2a:	46c0      	nop			; (mov r8, r8)
    2e2c:	41004400 	.word	0x41004400
    2e30:	00000155 	.word	0x00000155

00002e34 <send_message>:
 * @brief Send Message Over USART
 * This function sends the string message over USART
 * @param commProt enum value for which protocol to use
 * @param message pointer to the string to be sent
 */
void send_message(enum interface commProt, char *message){
    2e34:	b5f0      	push	{r4, r5, r6, r7, lr}
    2e36:	b085      	sub	sp, #20
    2e38:	000d      	movs	r5, r1
	// Master packet struct
	struct i2c_master_packet master_packet;
	int counter = retry;
	switch(commProt){
    2e3a:	2801      	cmp	r0, #1
    2e3c:	d00e      	beq.n	2e5c <send_message+0x28>
    2e3e:	2800      	cmp	r0, #0
    2e40:	d006      	beq.n	2e50 <send_message+0x1c>
    2e42:	2802      	cmp	r0, #2
    2e44:	d057      	beq.n	2ef6 <send_message+0xc2>
			spi_reset(&spi_master_instance);
			delay_ms(500);
			configure_spi_slave();
			break;
		default:
			usart_write_buffer_wait(&usartComm, (uint8_t *)message, 12);
    2e46:	220c      	movs	r2, #12
    2e48:	4849      	ldr	r0, [pc, #292]	; (2f70 <send_message+0x13c>)
    2e4a:	4b4a      	ldr	r3, [pc, #296]	; (2f74 <send_message+0x140>)
    2e4c:	4798      	blx	r3
			break;
	}
	
}
    2e4e:	e003      	b.n	2e58 <send_message+0x24>
			usart_write_buffer_wait(&usartComm, (uint8_t *)message, 12);
    2e50:	220c      	movs	r2, #12
    2e52:	4847      	ldr	r0, [pc, #284]	; (2f70 <send_message+0x13c>)
    2e54:	4b47      	ldr	r3, [pc, #284]	; (2f74 <send_message+0x140>)
    2e56:	4798      	blx	r3
}
    2e58:	b005      	add	sp, #20
    2e5a:	bdf0      	pop	{r4, r5, r6, r7, pc}
			master_packet.address = I2C_SLAVE_ADDR;
    2e5c:	ab01      	add	r3, sp, #4
    2e5e:	2230      	movs	r2, #48	; 0x30
    2e60:	801a      	strh	r2, [r3, #0]
			master_packet.data_length = 1;
    2e62:	2601      	movs	r6, #1
    2e64:	805e      	strh	r6, [r3, #2]
			master_packet.data = (uint8_t *)message;
    2e66:	9102      	str	r1, [sp, #8]
			master_packet.ten_bit_address = false;
    2e68:	2200      	movs	r2, #0
    2e6a:	721a      	strb	r2, [r3, #8]
			master_packet.high_speed = false;
    2e6c:	725a      	strb	r2, [r3, #9]
			master_packet.hs_master_code = 0x0;
    2e6e:	729a      	strb	r2, [r3, #10]
{
	/* Sanity check of arguments */
	Assert(module);
	Assert(module->hw);

	SercomI2cs *const i2c_hw = &(module->hw->I2CS);
    2e70:	4d41      	ldr	r5, [pc, #260]	; (2f78 <send_message+0x144>)
    2e72:	682c      	ldr	r4, [r5, #0]

#if I2C_SLAVE_CALLBACK_MODE == true
	/* Disable interrupts */
	i2c_hw->INTENCLR.reg = SERCOM_I2CS_INTENSET_PREC |
    2e74:	2307      	movs	r3, #7
    2e76:	7523      	strb	r3, [r4, #20]
			SERCOM_I2CS_INTENSET_AMATCH | SERCOM_I2CS_INTENSET_DRDY;

	/* Clear interrupt flags */
	i2c_hw->INTFLAG.reg = SERCOM_I2CS_INTFLAG_PREC | SERCOM_I2CS_INTFLAG_AMATCH |
    2e78:	7623      	strb	r3, [r4, #24]
			SERCOM_I2CS_INTFLAG_DRDY;

	/* Disable global interrupt for module */
	system_interrupt_disable(_sercom_get_interrupt_vector(module->hw));
    2e7a:	0020      	movs	r0, r4
    2e7c:	4b3f      	ldr	r3, [pc, #252]	; (2f7c <send_message+0x148>)
    2e7e:	4798      	blx	r3
	NVIC->ICER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    2e80:	231f      	movs	r3, #31
    2e82:	4018      	ands	r0, r3
    2e84:	4086      	lsls	r6, r0
    2e86:	3361      	adds	r3, #97	; 0x61
    2e88:	4a3d      	ldr	r2, [pc, #244]	; (2f80 <send_message+0x14c>)
    2e8a:	50d6      	str	r6, [r2, r3]
	SercomI2cs *const i2c_hw = &(module->hw->I2CS);
    2e8c:	6829      	ldr	r1, [r5, #0]
	return (i2c_hw->SYNCBUSY.reg & SERCOM_I2CS_SYNCBUSY_MASK);
    2e8e:	2203      	movs	r2, #3
    2e90:	69cb      	ldr	r3, [r1, #28]
	while (i2c_slave_is_syncing(module)) {
    2e92:	421a      	tst	r2, r3
    2e94:	d1fc      	bne.n	2e90 <send_message+0x5c>

	/* Wait for module to sync */
	_i2c_slave_wait_for_sync(module);

	/* Disable module */
	i2c_hw->CTRLA.reg &= ~SERCOM_I2CS_CTRLA_ENABLE;
    2e96:	6823      	ldr	r3, [r4, #0]
    2e98:	2202      	movs	r2, #2
    2e9a:	4393      	bics	r3, r2
    2e9c:	6023      	str	r3, [r4, #0]
			configure_i2c_master();
    2e9e:	4b39      	ldr	r3, [pc, #228]	; (2f84 <send_message+0x150>)
    2ea0:	4798      	blx	r3
			while(i2c_master_write_packet_wait(&i2c_master_instance, &master_packet)!=STATUS_OK && counter > 0){
    2ea2:	2433      	movs	r4, #51	; 0x33
    2ea4:	4e38      	ldr	r6, [pc, #224]	; (2f88 <send_message+0x154>)
    2ea6:	4d39      	ldr	r5, [pc, #228]	; (2f8c <send_message+0x158>)
    2ea8:	a901      	add	r1, sp, #4
    2eaa:	0030      	movs	r0, r6
    2eac:	47a8      	blx	r5
    2eae:	2800      	cmp	r0, #0
    2eb0:	d002      	beq.n	2eb8 <send_message+0x84>
    2eb2:	3c01      	subs	r4, #1
    2eb4:	2c00      	cmp	r4, #0
    2eb6:	d1f7      	bne.n	2ea8 <send_message+0x74>
			delay_ms(500);
    2eb8:	20fa      	movs	r0, #250	; 0xfa
    2eba:	0040      	lsls	r0, r0, #1
    2ebc:	4b34      	ldr	r3, [pc, #208]	; (2f90 <send_message+0x15c>)
    2ebe:	4798      	blx	r3
{
	/* Sanity check of arguments */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    2ec0:	4d31      	ldr	r5, [pc, #196]	; (2f88 <send_message+0x154>)
    2ec2:	682c      	ldr	r4, [r5, #0]

#if I2C_MASTER_CALLBACK_MODE == true
		/* Disable module interrupts */
		system_interrupt_disable(_sercom_get_interrupt_vector(module->hw));
    2ec4:	0020      	movs	r0, r4
    2ec6:	4b2d      	ldr	r3, [pc, #180]	; (2f7c <send_message+0x148>)
    2ec8:	4798      	blx	r3
    2eca:	231f      	movs	r3, #31
    2ecc:	4018      	ands	r0, r3
    2ece:	3b1e      	subs	r3, #30
    2ed0:	4083      	lsls	r3, r0
    2ed2:	2280      	movs	r2, #128	; 0x80
    2ed4:	492a      	ldr	r1, [pc, #168]	; (2f80 <send_message+0x14c>)
    2ed6:	508b      	str	r3, [r1, r2]
	SercomI2cm *const i2c_hw = &(module->hw->I2CM);
    2ed8:	6829      	ldr	r1, [r5, #0]
	return (i2c_hw->SYNCBUSY.reg & SERCOM_I2CM_SYNCBUSY_MASK);
    2eda:	3a79      	subs	r2, #121	; 0x79
    2edc:	69cb      	ldr	r3, [r1, #28]
	while (i2c_master_is_syncing(module)) {
    2ede:	421a      	tst	r2, r3
    2ee0:	d1fc      	bne.n	2edc <send_message+0xa8>

	/* Wait for module to sync */
	_i2c_master_wait_for_sync(module);

	/* Disbale interrupt */
	i2c_module->INTENCLR.reg = SERCOM_I2CM_INTENCLR_MASK;
    2ee2:	2383      	movs	r3, #131	; 0x83
    2ee4:	7523      	strb	r3, [r4, #20]
	/* Clear interrupt flag */
	i2c_module->INTFLAG.reg = SERCOM_I2CM_INTFLAG_MASK;
    2ee6:	7623      	strb	r3, [r4, #24]

	/* Disable module */
	i2c_module->CTRLA.reg &= ~SERCOM_I2CM_CTRLA_ENABLE;
    2ee8:	6823      	ldr	r3, [r4, #0]
    2eea:	2202      	movs	r2, #2
    2eec:	4393      	bics	r3, r2
    2eee:	6023      	str	r3, [r4, #0]
			configure_i2c_slave();
    2ef0:	4b28      	ldr	r3, [pc, #160]	; (2f94 <send_message+0x160>)
    2ef2:	4798      	blx	r3
			break;
    2ef4:	e7b0      	b.n	2e58 <send_message+0x24>
	SercomSpi *const spi_module = &(module->hw->SPI);
    2ef6:	4e28      	ldr	r6, [pc, #160]	; (2f98 <send_message+0x164>)
    2ef8:	6834      	ldr	r4, [r6, #0]
	system_interrupt_disable(_sercom_get_interrupt_vector(module->hw));
    2efa:	0020      	movs	r0, r4
    2efc:	4b1f      	ldr	r3, [pc, #124]	; (2f7c <send_message+0x148>)
    2efe:	4798      	blx	r3
    2f00:	231f      	movs	r3, #31
    2f02:	4018      	ands	r0, r3
    2f04:	3b1e      	subs	r3, #30
    2f06:	4083      	lsls	r3, r0
    2f08:	2280      	movs	r2, #128	; 0x80
    2f0a:	491d      	ldr	r1, [pc, #116]	; (2f80 <send_message+0x14c>)
    2f0c:	508b      	str	r3, [r1, r2]
	SercomSpi *const spi_module = &(module->hw->SPI);
    2f0e:	6832      	ldr	r2, [r6, #0]
	return (spi_module->SYNCBUSY.reg);
    2f10:	69d3      	ldr	r3, [r2, #28]
	while (spi_is_syncing(module)) {
    2f12:	2b00      	cmp	r3, #0
    2f14:	d1fc      	bne.n	2f10 <send_message+0xdc>
	spi_module->INTENCLR.reg = SERCOM_SPI_INTENCLR_MASK;
    2f16:	338f      	adds	r3, #143	; 0x8f
    2f18:	7523      	strb	r3, [r4, #20]
	spi_module->INTFLAG.reg = SERCOM_SPI_INTFLAG_MASK;
    2f1a:	7623      	strb	r3, [r4, #24]
	spi_module->CTRLA.reg &= ~SERCOM_SPI_CTRLA_ENABLE;
    2f1c:	6823      	ldr	r3, [r4, #0]
    2f1e:	2202      	movs	r2, #2
    2f20:	4393      	bics	r3, r2
    2f22:	6023      	str	r3, [r4, #0]
			configure_spi_master();
    2f24:	4b1d      	ldr	r3, [pc, #116]	; (2f9c <send_message+0x168>)
    2f26:	4798      	blx	r3
			spi_select_slave(&spi_master_instance, &slave, true);
    2f28:	2201      	movs	r2, #1
    2f2a:	491d      	ldr	r1, [pc, #116]	; (2fa0 <send_message+0x16c>)
    2f2c:	481d      	ldr	r0, [pc, #116]	; (2fa4 <send_message+0x170>)
    2f2e:	4b1e      	ldr	r3, [pc, #120]	; (2fa8 <send_message+0x174>)
    2f30:	4798      	blx	r3
			while( spi_write_buffer_wait(&spi_master_instance, message, 1)!=STATUS_OK && counter > 0){
    2f32:	2433      	movs	r4, #51	; 0x33
    2f34:	4e1b      	ldr	r6, [pc, #108]	; (2fa4 <send_message+0x170>)
    2f36:	4f1d      	ldr	r7, [pc, #116]	; (2fac <send_message+0x178>)
    2f38:	2201      	movs	r2, #1
    2f3a:	0029      	movs	r1, r5
    2f3c:	0030      	movs	r0, r6
    2f3e:	47b8      	blx	r7
    2f40:	2800      	cmp	r0, #0
    2f42:	d002      	beq.n	2f4a <send_message+0x116>
    2f44:	3c01      	subs	r4, #1
    2f46:	2c00      	cmp	r4, #0
    2f48:	d1f6      	bne.n	2f38 <send_message+0x104>
			spi_select_slave(&spi_master_instance, &slave, false);
    2f4a:	4e16      	ldr	r6, [pc, #88]	; (2fa4 <send_message+0x170>)
    2f4c:	2200      	movs	r2, #0
    2f4e:	4914      	ldr	r1, [pc, #80]	; (2fa0 <send_message+0x16c>)
    2f50:	0030      	movs	r0, r6
    2f52:	4b15      	ldr	r3, [pc, #84]	; (2fa8 <send_message+0x174>)
    2f54:	4798      	blx	r3
			delay_ms(500);
    2f56:	25fa      	movs	r5, #250	; 0xfa
    2f58:	006d      	lsls	r5, r5, #1
    2f5a:	0028      	movs	r0, r5
    2f5c:	4c0c      	ldr	r4, [pc, #48]	; (2f90 <send_message+0x15c>)
    2f5e:	47a0      	blx	r4
			spi_reset(&spi_master_instance);
    2f60:	0030      	movs	r0, r6
    2f62:	4b13      	ldr	r3, [pc, #76]	; (2fb0 <send_message+0x17c>)
    2f64:	4798      	blx	r3
			delay_ms(500);
    2f66:	0028      	movs	r0, r5
    2f68:	47a0      	blx	r4
			configure_spi_slave();
    2f6a:	4b12      	ldr	r3, [pc, #72]	; (2fb4 <send_message+0x180>)
    2f6c:	4798      	blx	r3
			break;
    2f6e:	e773      	b.n	2e58 <send_message+0x24>
    2f70:	200000bc 	.word	0x200000bc
    2f74:	00001e35 	.word	0x00001e35
    2f78:	20000158 	.word	0x20000158
    2f7c:	0000215d 	.word	0x0000215d
    2f80:	e000e100 	.word	0xe000e100
    2f84:	00002d61 	.word	0x00002d61
    2f88:	200000f0 	.word	0x200000f0
    2f8c:	000005f5 	.word	0x000005f5
    2f90:	00000155 	.word	0x00000155
    2f94:	00002ccd 	.word	0x00002ccd
    2f98:	20000080 	.word	0x20000080
    2f9c:	00002bed 	.word	0x00002bed
    2fa0:	20000154 	.word	0x20000154
    2fa4:	20000118 	.word	0x20000118
    2fa8:	00001541 	.word	0x00001541
    2fac:	00001635 	.word	0x00001635
    2fb0:	000011c5 	.word	0x000011c5
    2fb4:	00002b41 	.word	0x00002b41

00002fb8 <read_message>:
 * @brief Read message from USART
 * 
 * @param commProt enum value for which protocol to use
 * @param message pointer for storing the received string
 */
void read_message(enum interface commProt, char *message){
    2fb8:	b570      	push	{r4, r5, r6, lr}
    2fba:	b086      	sub	sp, #24
    2fbc:	000c      	movs	r4, r1
	char received_message[12] = "Nothing";
    2fbe:	ab03      	add	r3, sp, #12
    2fc0:	4a23      	ldr	r2, [pc, #140]	; (3050 <read_message+0x98>)
    2fc2:	0019      	movs	r1, r3
    2fc4:	ca60      	ldmia	r2!, {r5, r6}
    2fc6:	c160      	stmia	r1!, {r5, r6}
    2fc8:	2200      	movs	r2, #0
    2fca:	9205      	str	r2, [sp, #20]
	uint8_t r_message[1] = {0x00};
    2fcc:	ab02      	add	r3, sp, #8
    2fce:	701a      	strb	r2, [r3, #0]
	struct i2c_slave_packet slave_packet;
	enum status_code code;
	switch (commProt)
    2fd0:	2801      	cmp	r0, #1
    2fd2:	d01b      	beq.n	300c <read_message+0x54>
    2fd4:	2800      	cmp	r0, #0
    2fd6:	d008      	beq.n	2fea <read_message+0x32>
    2fd8:	2802      	cmp	r0, #2
    2fda:	d029      	beq.n	3030 <read_message+0x78>
		if(r_message[0]==message[0] && code == STATUS_OK){
			blink_led();
		}
		break;
	default:
	 	code = usart_read_buffer_wait(&usartComm, (uint8_t *)&received_message,12);
    2fdc:	220c      	movs	r2, #12
    2fde:	a903      	add	r1, sp, #12
    2fe0:	481c      	ldr	r0, [pc, #112]	; (3054 <read_message+0x9c>)
    2fe2:	4b1d      	ldr	r3, [pc, #116]	; (3058 <read_message+0xa0>)
    2fe4:	4798      	blx	r3
		break;
	}
	
	
	
}
    2fe6:	b006      	add	sp, #24
    2fe8:	bd70      	pop	{r4, r5, r6, pc}
		code = usart_read_buffer_wait(&usartComm, (uint8_t *)&received_message,12);
    2fea:	220c      	movs	r2, #12
    2fec:	a903      	add	r1, sp, #12
    2fee:	4819      	ldr	r0, [pc, #100]	; (3054 <read_message+0x9c>)
    2ff0:	4b19      	ldr	r3, [pc, #100]	; (3058 <read_message+0xa0>)
    2ff2:	4798      	blx	r3
    2ff4:	0005      	movs	r5, r0
		if(strcmp(received_message, message) == 0 && code == STATUS_OK){
    2ff6:	0021      	movs	r1, r4
    2ff8:	a803      	add	r0, sp, #12
    2ffa:	4b18      	ldr	r3, [pc, #96]	; (305c <read_message+0xa4>)
    2ffc:	4798      	blx	r3
    2ffe:	2800      	cmp	r0, #0
    3000:	d1f1      	bne.n	2fe6 <read_message+0x2e>
    3002:	2d00      	cmp	r5, #0
    3004:	d1ef      	bne.n	2fe6 <read_message+0x2e>
			blink_led();
    3006:	4b16      	ldr	r3, [pc, #88]	; (3060 <read_message+0xa8>)
    3008:	4798      	blx	r3
    300a:	e7ec      	b.n	2fe6 <read_message+0x2e>
		slave_packet.data_length = 1;
    300c:	2301      	movs	r3, #1
    300e:	466a      	mov	r2, sp
    3010:	8013      	strh	r3, [r2, #0]
		slave_packet.data = (uint8_t *)r_message;
    3012:	ad02      	add	r5, sp, #8
    3014:	9501      	str	r5, [sp, #4]
		code = i2c_slave_read_packet_wait(&i2c_slave_instance,&slave_packet);
    3016:	4669      	mov	r1, sp
    3018:	4812      	ldr	r0, [pc, #72]	; (3064 <read_message+0xac>)
    301a:	4b13      	ldr	r3, [pc, #76]	; (3068 <read_message+0xb0>)
    301c:	4798      	blx	r3
		if(r_message[0]==message[0] && code == STATUS_OK){
    301e:	782a      	ldrb	r2, [r5, #0]
    3020:	7823      	ldrb	r3, [r4, #0]
    3022:	429a      	cmp	r2, r3
    3024:	d1df      	bne.n	2fe6 <read_message+0x2e>
    3026:	2800      	cmp	r0, #0
    3028:	d1dd      	bne.n	2fe6 <read_message+0x2e>
			blink_led();
    302a:	4b0d      	ldr	r3, [pc, #52]	; (3060 <read_message+0xa8>)
    302c:	4798      	blx	r3
    302e:	e7da      	b.n	2fe6 <read_message+0x2e>
		code = spi_read_buffer_wait(&spi_slave_instance, r_message, 1,0x00);
    3030:	ad02      	add	r5, sp, #8
    3032:	2300      	movs	r3, #0
    3034:	2201      	movs	r2, #1
    3036:	0029      	movs	r1, r5
    3038:	480c      	ldr	r0, [pc, #48]	; (306c <read_message+0xb4>)
    303a:	4e0d      	ldr	r6, [pc, #52]	; (3070 <read_message+0xb8>)
    303c:	47b0      	blx	r6
		if(r_message[0]==message[0] && code == STATUS_OK){
    303e:	782a      	ldrb	r2, [r5, #0]
    3040:	7823      	ldrb	r3, [r4, #0]
    3042:	429a      	cmp	r2, r3
    3044:	d1cf      	bne.n	2fe6 <read_message+0x2e>
    3046:	2800      	cmp	r0, #0
    3048:	d1cd      	bne.n	2fe6 <read_message+0x2e>
			blink_led();
    304a:	4b05      	ldr	r3, [pc, #20]	; (3060 <read_message+0xa8>)
    304c:	4798      	blx	r3
    304e:	e7ca      	b.n	2fe6 <read_message+0x2e>
    3050:	00004c88 	.word	0x00004c88
    3054:	200000bc 	.word	0x200000bc
    3058:	00001ef1 	.word	0x00001ef1
    305c:	00004c15 	.word	0x00004c15
    3060:	00002e15 	.word	0x00002e15
    3064:	20000158 	.word	0x20000158
    3068:	00000aa9 	.word	0x00000aa9
    306c:	20000080 	.word	0x20000080
    3070:	00001425 	.word	0x00001425

00003074 <main>:


int main (void)
{
    3074:	b570      	push	{r4, r5, r6, lr}
    3076:	b092      	sub	sp, #72	; 0x48
	system_init(); 
    3078:	4b34      	ldr	r3, [pc, #208]	; (314c <main+0xd8>)
    307a:	4798      	blx	r3
	delay_init();
    307c:	4b34      	ldr	r3, [pc, #208]	; (3150 <main+0xdc>)
    307e:	4798      	blx	r3
{
	/* Sanity check arguments */
	Assert(config);

	/* Set default config in the config struct */
	config->data_order       = USART_DATAORDER_LSB;
    3080:	ab01      	add	r3, sp, #4
    3082:	2280      	movs	r2, #128	; 0x80
    3084:	05d2      	lsls	r2, r2, #23
    3086:	9201      	str	r2, [sp, #4]
	config->transfer_mode    = USART_TRANSFER_ASYNCHRONOUSLY;
    3088:	2200      	movs	r2, #0
    308a:	605a      	str	r2, [r3, #4]
	config->parity           = USART_PARITY_NONE;
    308c:	21ff      	movs	r1, #255	; 0xff
    308e:	8119      	strh	r1, [r3, #8]
	config->stopbits         = USART_STOPBITS_1;
    3090:	2100      	movs	r1, #0
    3092:	729a      	strb	r2, [r3, #10]
	config->character_size   = USART_CHARACTER_SIZE_8BIT;
    3094:	72da      	strb	r2, [r3, #11]
	config->baudrate         = 9600;
    3096:	2096      	movs	r0, #150	; 0x96
    3098:	0180      	lsls	r0, r0, #6
    309a:	6218      	str	r0, [r3, #32]
	config->receiver_enable  = true;
    309c:	2001      	movs	r0, #1
    309e:	2424      	movs	r4, #36	; 0x24
    30a0:	5518      	strb	r0, [r3, r4]
	config->transmitter_enable = true;
    30a2:	3401      	adds	r4, #1
    30a4:	5518      	strb	r0, [r3, r4]
	config->clock_polarity_inverted = false;
    30a6:	3025      	adds	r0, #37	; 0x25
    30a8:	541a      	strb	r2, [r3, r0]
	config->use_external_clock = false;
    30aa:	3001      	adds	r0, #1
    30ac:	541a      	strb	r2, [r3, r0]
	config->ext_clock_freq   = 0;
    30ae:	629a      	str	r2, [r3, #40]	; 0x28
	config->mux_setting      = USART_RX_1_TX_2_XCK_3;
	config->run_in_standby   = false;
    30b0:	3005      	adds	r0, #5
    30b2:	541a      	strb	r2, [r3, r0]
	config->generator_source = GCLK_GENERATOR_0;
    30b4:	3001      	adds	r0, #1
    30b6:	541a      	strb	r2, [r3, r0]
	config->pinmux_pad0      = PINMUX_DEFAULT;
	config->pinmux_pad1      = PINMUX_DEFAULT;
	config->pinmux_pad2      = PINMUX_DEFAULT;
	config->pinmux_pad3      = PINMUX_DEFAULT;
#ifdef FEATURE_USART_OVER_SAMPLE
	config->sample_adjustment     = USART_SAMPLE_ADJUSTMENT_7_8_9;
    30b8:	615a      	str	r2, [r3, #20]
	config->sample_rate           = USART_SAMPLE_RATE_16X_ARITHMETIC;
    30ba:	821a      	strh	r2, [r3, #16]
#endif
#ifdef FEATURE_USART_LIN_SLAVE
	config->lin_slave_enable      = false;
    30bc:	76da      	strb	r2, [r3, #27]
	config->lin_header_delay = LIN_MASTER_HEADER_DELAY_0;
	config->lin_break_length = LIN_MASTER_BREAK_LENGTH_13_BIT;
#endif

#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
	config->immediate_buffer_overflow_notification  = false;
    30be:	7619      	strb	r1, [r3, #24]
#endif
#ifdef FEATURE_USART_START_FRAME_DECTION
	config->start_frame_detection_enable            = false;
    30c0:	7719      	strb	r1, [r3, #28]
#endif
#ifdef FEATURE_USART_IRDA
	config->encoding_format_enable                  = false;
    30c2:	7659      	strb	r1, [r3, #25]
	config->receive_pulse_length                    = 19;
    30c4:	2213      	movs	r2, #19
    30c6:	769a      	strb	r2, [r3, #26]
	config->iso7816_config.inhibit_nack             = ISO7816_INHIBIT_NACK_DISABLE;
	config->iso7816_config.successive_recv_nack     = ISO7816_SUCCESSIVE_RECV_NACK_DISABLE;
	config->iso7816_config.max_iterations           = 7;
#endif
#ifdef FEATURE_USART_COLLISION_DECTION
	config->collision_detection_enable              = false;
    30c8:	7759      	strb	r1, [r3, #29]
    config_usart.mux_setting = USART_RX_1_TX_0_XCK_1;
    30ca:	2280      	movs	r2, #128	; 0x80
    30cc:	0352      	lsls	r2, r2, #13
    30ce:	60da      	str	r2, [r3, #12]
    config_usart.pinmux_pad0 = PINMUX_PB02D_SERCOM5_PAD0;
    30d0:	4a20      	ldr	r2, [pc, #128]	; (3154 <main+0xe0>)
    30d2:	631a      	str	r2, [r3, #48]	; 0x30
    config_usart.pinmux_pad1 = PINMUX_PB03D_SERCOM5_PAD1;
    30d4:	4a20      	ldr	r2, [pc, #128]	; (3158 <main+0xe4>)
    30d6:	635a      	str	r2, [r3, #52]	; 0x34
    config_usart.pinmux_pad2 = PINMUX_UNUSED;
    30d8:	2201      	movs	r2, #1
    30da:	4252      	negs	r2, r2
    30dc:	639a      	str	r2, [r3, #56]	; 0x38
    config_usart.pinmux_pad3 = PINMUX_UNUSED;
    30de:	63da      	str	r2, [r3, #60]	; 0x3c
    while (usart_init(&usartComm, SERCOM5, &config_usart) != STATUS_OK) {
    30e0:	4d1e      	ldr	r5, [pc, #120]	; (315c <main+0xe8>)
    30e2:	4c1f      	ldr	r4, [pc, #124]	; (3160 <main+0xec>)
    30e4:	aa01      	add	r2, sp, #4
    30e6:	491f      	ldr	r1, [pc, #124]	; (3164 <main+0xf0>)
    30e8:	0028      	movs	r0, r5
    30ea:	47a0      	blx	r4
    30ec:	2800      	cmp	r0, #0
    30ee:	d1f9      	bne.n	30e4 <main+0x70>
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    30f0:	4d1a      	ldr	r5, [pc, #104]	; (315c <main+0xe8>)
    30f2:	682c      	ldr	r4, [r5, #0]

#if USART_CALLBACK_MODE == true
	/* Enable Global interrupt for module */
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
    30f4:	0020      	movs	r0, r4
    30f6:	4b1c      	ldr	r3, [pc, #112]	; (3168 <main+0xf4>)
    30f8:	4798      	blx	r3
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    30fa:	231f      	movs	r3, #31
    30fc:	4018      	ands	r0, r3
    30fe:	3b1e      	subs	r3, #30
    3100:	4083      	lsls	r3, r0
    3102:	4a1a      	ldr	r2, [pc, #104]	; (316c <main+0xf8>)
    3104:	6013      	str	r3, [r2, #0]
	SercomUsart *const usart_hw = &(module->hw->USART);
    3106:	682b      	ldr	r3, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
    3108:	69da      	ldr	r2, [r3, #28]
	while (usart_is_syncing(module)) {
    310a:	2a00      	cmp	r2, #0
    310c:	d1fc      	bne.n	3108 <main+0x94>

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);

	/* Enable USART module */
	usart_hw->CTRLA.reg |= SERCOM_USART_CTRLA_ENABLE;
    310e:	6823      	ldr	r3, [r4, #0]
    3110:	3202      	adds	r2, #2
    3112:	4313      	orrs	r3, r2
    3114:	6023      	str	r3, [r4, #0]
	configure_usart();
	configure_i2c_slave();
    3116:	4b16      	ldr	r3, [pc, #88]	; (3170 <main+0xfc>)
    3118:	4798      	blx	r3
	configure_spi_slave();
    311a:	4b16      	ldr	r3, [pc, #88]	; (3174 <main+0x100>)
    311c:	4798      	blx	r3
	char messageUSART[] = "Hello World";
	uint8_t messageI2C[1] = {0x21};
	uint8_t messageSPI[1] = {0xAA};
    311e:	22aa      	movs	r2, #170	; 0xaa
    3120:	ab11      	add	r3, sp, #68	; 0x44
    3122:	701a      	strb	r2, [r3, #0]
	return (port_base->IN.reg & pin_mask);
    3124:	4c14      	ldr	r4, [pc, #80]	; (3178 <main+0x104>)
				case I2C:
					configure_i2c_slave();
					read_message(select_interface,messageI2C);
					break;
				case SPI:
					configure_spi_slave();
    3126:	4e13      	ldr	r6, [pc, #76]	; (3174 <main+0x100>)
					read_message(select_interface,messageSPI);
    3128:	4d14      	ldr	r5, [pc, #80]	; (317c <main+0x108>)
    312a:	e003      	b.n	3134 <main+0xc0>
					configure_spi_slave();
    312c:	47b0      	blx	r6
					read_message(select_interface,messageSPI);
    312e:	a911      	add	r1, sp, #68	; 0x44
    3130:	2002      	movs	r0, #2
    3132:	47a8      	blx	r5
    3134:	6a23      	ldr	r3, [r4, #32]
		if(!port_pin_get_input_level(BUTTON_0_PIN)){
    3136:	021b      	lsls	r3, r3, #8
    3138:	d4f8      	bmi.n	312c <main+0xb8>
					send_message(select_interface,messageSPI);
    313a:	a911      	add	r1, sp, #68	; 0x44
    313c:	2002      	movs	r0, #2
    313e:	4b10      	ldr	r3, [pc, #64]	; (3180 <main+0x10c>)
    3140:	4798      	blx	r3
			delay_ms(200);
    3142:	20c8      	movs	r0, #200	; 0xc8
    3144:	4b0f      	ldr	r3, [pc, #60]	; (3184 <main+0x110>)
    3146:	4798      	blx	r3
    3148:	e7f4      	b.n	3134 <main+0xc0>
    314a:	46c0      	nop			; (mov r8, r8)
    314c:	00002a2d 	.word	0x00002a2d
    3150:	00000115 	.word	0x00000115
    3154:	00220003 	.word	0x00220003
    3158:	00230003 	.word	0x00230003
    315c:	200000bc 	.word	0x200000bc
    3160:	00001a69 	.word	0x00001a69
    3164:	42001c00 	.word	0x42001c00
    3168:	0000215d 	.word	0x0000215d
    316c:	e000e100 	.word	0xe000e100
    3170:	00002ccd 	.word	0x00002ccd
    3174:	00002b41 	.word	0x00002b41
    3178:	41004480 	.word	0x41004480
    317c:	00002fb9 	.word	0x00002fb9
    3180:	00002e35 	.word	0x00002e35
    3184:	00000155 	.word	0x00000155

00003188 <__udivsi3>:
    3188:	2200      	movs	r2, #0
    318a:	0843      	lsrs	r3, r0, #1
    318c:	428b      	cmp	r3, r1
    318e:	d374      	bcc.n	327a <__udivsi3+0xf2>
    3190:	0903      	lsrs	r3, r0, #4
    3192:	428b      	cmp	r3, r1
    3194:	d35f      	bcc.n	3256 <__udivsi3+0xce>
    3196:	0a03      	lsrs	r3, r0, #8
    3198:	428b      	cmp	r3, r1
    319a:	d344      	bcc.n	3226 <__udivsi3+0x9e>
    319c:	0b03      	lsrs	r3, r0, #12
    319e:	428b      	cmp	r3, r1
    31a0:	d328      	bcc.n	31f4 <__udivsi3+0x6c>
    31a2:	0c03      	lsrs	r3, r0, #16
    31a4:	428b      	cmp	r3, r1
    31a6:	d30d      	bcc.n	31c4 <__udivsi3+0x3c>
    31a8:	22ff      	movs	r2, #255	; 0xff
    31aa:	0209      	lsls	r1, r1, #8
    31ac:	ba12      	rev	r2, r2
    31ae:	0c03      	lsrs	r3, r0, #16
    31b0:	428b      	cmp	r3, r1
    31b2:	d302      	bcc.n	31ba <__udivsi3+0x32>
    31b4:	1212      	asrs	r2, r2, #8
    31b6:	0209      	lsls	r1, r1, #8
    31b8:	d065      	beq.n	3286 <__udivsi3+0xfe>
    31ba:	0b03      	lsrs	r3, r0, #12
    31bc:	428b      	cmp	r3, r1
    31be:	d319      	bcc.n	31f4 <__udivsi3+0x6c>
    31c0:	e000      	b.n	31c4 <__udivsi3+0x3c>
    31c2:	0a09      	lsrs	r1, r1, #8
    31c4:	0bc3      	lsrs	r3, r0, #15
    31c6:	428b      	cmp	r3, r1
    31c8:	d301      	bcc.n	31ce <__udivsi3+0x46>
    31ca:	03cb      	lsls	r3, r1, #15
    31cc:	1ac0      	subs	r0, r0, r3
    31ce:	4152      	adcs	r2, r2
    31d0:	0b83      	lsrs	r3, r0, #14
    31d2:	428b      	cmp	r3, r1
    31d4:	d301      	bcc.n	31da <__udivsi3+0x52>
    31d6:	038b      	lsls	r3, r1, #14
    31d8:	1ac0      	subs	r0, r0, r3
    31da:	4152      	adcs	r2, r2
    31dc:	0b43      	lsrs	r3, r0, #13
    31de:	428b      	cmp	r3, r1
    31e0:	d301      	bcc.n	31e6 <__udivsi3+0x5e>
    31e2:	034b      	lsls	r3, r1, #13
    31e4:	1ac0      	subs	r0, r0, r3
    31e6:	4152      	adcs	r2, r2
    31e8:	0b03      	lsrs	r3, r0, #12
    31ea:	428b      	cmp	r3, r1
    31ec:	d301      	bcc.n	31f2 <__udivsi3+0x6a>
    31ee:	030b      	lsls	r3, r1, #12
    31f0:	1ac0      	subs	r0, r0, r3
    31f2:	4152      	adcs	r2, r2
    31f4:	0ac3      	lsrs	r3, r0, #11
    31f6:	428b      	cmp	r3, r1
    31f8:	d301      	bcc.n	31fe <__udivsi3+0x76>
    31fa:	02cb      	lsls	r3, r1, #11
    31fc:	1ac0      	subs	r0, r0, r3
    31fe:	4152      	adcs	r2, r2
    3200:	0a83      	lsrs	r3, r0, #10
    3202:	428b      	cmp	r3, r1
    3204:	d301      	bcc.n	320a <__udivsi3+0x82>
    3206:	028b      	lsls	r3, r1, #10
    3208:	1ac0      	subs	r0, r0, r3
    320a:	4152      	adcs	r2, r2
    320c:	0a43      	lsrs	r3, r0, #9
    320e:	428b      	cmp	r3, r1
    3210:	d301      	bcc.n	3216 <__udivsi3+0x8e>
    3212:	024b      	lsls	r3, r1, #9
    3214:	1ac0      	subs	r0, r0, r3
    3216:	4152      	adcs	r2, r2
    3218:	0a03      	lsrs	r3, r0, #8
    321a:	428b      	cmp	r3, r1
    321c:	d301      	bcc.n	3222 <__udivsi3+0x9a>
    321e:	020b      	lsls	r3, r1, #8
    3220:	1ac0      	subs	r0, r0, r3
    3222:	4152      	adcs	r2, r2
    3224:	d2cd      	bcs.n	31c2 <__udivsi3+0x3a>
    3226:	09c3      	lsrs	r3, r0, #7
    3228:	428b      	cmp	r3, r1
    322a:	d301      	bcc.n	3230 <__udivsi3+0xa8>
    322c:	01cb      	lsls	r3, r1, #7
    322e:	1ac0      	subs	r0, r0, r3
    3230:	4152      	adcs	r2, r2
    3232:	0983      	lsrs	r3, r0, #6
    3234:	428b      	cmp	r3, r1
    3236:	d301      	bcc.n	323c <__udivsi3+0xb4>
    3238:	018b      	lsls	r3, r1, #6
    323a:	1ac0      	subs	r0, r0, r3
    323c:	4152      	adcs	r2, r2
    323e:	0943      	lsrs	r3, r0, #5
    3240:	428b      	cmp	r3, r1
    3242:	d301      	bcc.n	3248 <__udivsi3+0xc0>
    3244:	014b      	lsls	r3, r1, #5
    3246:	1ac0      	subs	r0, r0, r3
    3248:	4152      	adcs	r2, r2
    324a:	0903      	lsrs	r3, r0, #4
    324c:	428b      	cmp	r3, r1
    324e:	d301      	bcc.n	3254 <__udivsi3+0xcc>
    3250:	010b      	lsls	r3, r1, #4
    3252:	1ac0      	subs	r0, r0, r3
    3254:	4152      	adcs	r2, r2
    3256:	08c3      	lsrs	r3, r0, #3
    3258:	428b      	cmp	r3, r1
    325a:	d301      	bcc.n	3260 <__udivsi3+0xd8>
    325c:	00cb      	lsls	r3, r1, #3
    325e:	1ac0      	subs	r0, r0, r3
    3260:	4152      	adcs	r2, r2
    3262:	0883      	lsrs	r3, r0, #2
    3264:	428b      	cmp	r3, r1
    3266:	d301      	bcc.n	326c <__udivsi3+0xe4>
    3268:	008b      	lsls	r3, r1, #2
    326a:	1ac0      	subs	r0, r0, r3
    326c:	4152      	adcs	r2, r2
    326e:	0843      	lsrs	r3, r0, #1
    3270:	428b      	cmp	r3, r1
    3272:	d301      	bcc.n	3278 <__udivsi3+0xf0>
    3274:	004b      	lsls	r3, r1, #1
    3276:	1ac0      	subs	r0, r0, r3
    3278:	4152      	adcs	r2, r2
    327a:	1a41      	subs	r1, r0, r1
    327c:	d200      	bcs.n	3280 <__udivsi3+0xf8>
    327e:	4601      	mov	r1, r0
    3280:	4152      	adcs	r2, r2
    3282:	4610      	mov	r0, r2
    3284:	4770      	bx	lr
    3286:	e7ff      	b.n	3288 <__udivsi3+0x100>
    3288:	b501      	push	{r0, lr}
    328a:	2000      	movs	r0, #0
    328c:	f000 f806 	bl	329c <__aeabi_idiv0>
    3290:	bd02      	pop	{r1, pc}
    3292:	46c0      	nop			; (mov r8, r8)

00003294 <__aeabi_uidivmod>:
    3294:	2900      	cmp	r1, #0
    3296:	d0f7      	beq.n	3288 <__udivsi3+0x100>
    3298:	e776      	b.n	3188 <__udivsi3>
    329a:	4770      	bx	lr

0000329c <__aeabi_idiv0>:
    329c:	4770      	bx	lr
    329e:	46c0      	nop			; (mov r8, r8)

000032a0 <__aeabi_lmul>:
    32a0:	b5f0      	push	{r4, r5, r6, r7, lr}
    32a2:	46ce      	mov	lr, r9
    32a4:	4647      	mov	r7, r8
    32a6:	0415      	lsls	r5, r2, #16
    32a8:	0c2d      	lsrs	r5, r5, #16
    32aa:	002e      	movs	r6, r5
    32ac:	b580      	push	{r7, lr}
    32ae:	0407      	lsls	r7, r0, #16
    32b0:	0c14      	lsrs	r4, r2, #16
    32b2:	0c3f      	lsrs	r7, r7, #16
    32b4:	4699      	mov	r9, r3
    32b6:	0c03      	lsrs	r3, r0, #16
    32b8:	437e      	muls	r6, r7
    32ba:	435d      	muls	r5, r3
    32bc:	4367      	muls	r7, r4
    32be:	4363      	muls	r3, r4
    32c0:	197f      	adds	r7, r7, r5
    32c2:	0c34      	lsrs	r4, r6, #16
    32c4:	19e4      	adds	r4, r4, r7
    32c6:	469c      	mov	ip, r3
    32c8:	42a5      	cmp	r5, r4
    32ca:	d903      	bls.n	32d4 <__aeabi_lmul+0x34>
    32cc:	2380      	movs	r3, #128	; 0x80
    32ce:	025b      	lsls	r3, r3, #9
    32d0:	4698      	mov	r8, r3
    32d2:	44c4      	add	ip, r8
    32d4:	464b      	mov	r3, r9
    32d6:	4351      	muls	r1, r2
    32d8:	4343      	muls	r3, r0
    32da:	0436      	lsls	r6, r6, #16
    32dc:	0c36      	lsrs	r6, r6, #16
    32de:	0c25      	lsrs	r5, r4, #16
    32e0:	0424      	lsls	r4, r4, #16
    32e2:	4465      	add	r5, ip
    32e4:	19a4      	adds	r4, r4, r6
    32e6:	1859      	adds	r1, r3, r1
    32e8:	1949      	adds	r1, r1, r5
    32ea:	0020      	movs	r0, r4
    32ec:	bc0c      	pop	{r2, r3}
    32ee:	4690      	mov	r8, r2
    32f0:	4699      	mov	r9, r3
    32f2:	bdf0      	pop	{r4, r5, r6, r7, pc}

000032f4 <__aeabi_dadd>:
    32f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    32f6:	4645      	mov	r5, r8
    32f8:	46de      	mov	lr, fp
    32fa:	4657      	mov	r7, sl
    32fc:	464e      	mov	r6, r9
    32fe:	030c      	lsls	r4, r1, #12
    3300:	b5e0      	push	{r5, r6, r7, lr}
    3302:	004e      	lsls	r6, r1, #1
    3304:	0fc9      	lsrs	r1, r1, #31
    3306:	4688      	mov	r8, r1
    3308:	000d      	movs	r5, r1
    330a:	0a61      	lsrs	r1, r4, #9
    330c:	0f44      	lsrs	r4, r0, #29
    330e:	430c      	orrs	r4, r1
    3310:	00c7      	lsls	r7, r0, #3
    3312:	0319      	lsls	r1, r3, #12
    3314:	0058      	lsls	r0, r3, #1
    3316:	0fdb      	lsrs	r3, r3, #31
    3318:	469b      	mov	fp, r3
    331a:	0a4b      	lsrs	r3, r1, #9
    331c:	0f51      	lsrs	r1, r2, #29
    331e:	430b      	orrs	r3, r1
    3320:	0d76      	lsrs	r6, r6, #21
    3322:	0d40      	lsrs	r0, r0, #21
    3324:	0019      	movs	r1, r3
    3326:	00d2      	lsls	r2, r2, #3
    3328:	45d8      	cmp	r8, fp
    332a:	d100      	bne.n	332e <__aeabi_dadd+0x3a>
    332c:	e0ae      	b.n	348c <__aeabi_dadd+0x198>
    332e:	1a35      	subs	r5, r6, r0
    3330:	2d00      	cmp	r5, #0
    3332:	dc00      	bgt.n	3336 <__aeabi_dadd+0x42>
    3334:	e0f6      	b.n	3524 <__aeabi_dadd+0x230>
    3336:	2800      	cmp	r0, #0
    3338:	d10f      	bne.n	335a <__aeabi_dadd+0x66>
    333a:	4313      	orrs	r3, r2
    333c:	d100      	bne.n	3340 <__aeabi_dadd+0x4c>
    333e:	e0db      	b.n	34f8 <__aeabi_dadd+0x204>
    3340:	1e6b      	subs	r3, r5, #1
    3342:	2b00      	cmp	r3, #0
    3344:	d000      	beq.n	3348 <__aeabi_dadd+0x54>
    3346:	e137      	b.n	35b8 <__aeabi_dadd+0x2c4>
    3348:	1aba      	subs	r2, r7, r2
    334a:	4297      	cmp	r7, r2
    334c:	41bf      	sbcs	r7, r7
    334e:	1a64      	subs	r4, r4, r1
    3350:	427f      	negs	r7, r7
    3352:	1be4      	subs	r4, r4, r7
    3354:	2601      	movs	r6, #1
    3356:	0017      	movs	r7, r2
    3358:	e024      	b.n	33a4 <__aeabi_dadd+0xb0>
    335a:	4bc6      	ldr	r3, [pc, #792]	; (3674 <__aeabi_dadd+0x380>)
    335c:	429e      	cmp	r6, r3
    335e:	d04d      	beq.n	33fc <__aeabi_dadd+0x108>
    3360:	2380      	movs	r3, #128	; 0x80
    3362:	041b      	lsls	r3, r3, #16
    3364:	4319      	orrs	r1, r3
    3366:	2d38      	cmp	r5, #56	; 0x38
    3368:	dd00      	ble.n	336c <__aeabi_dadd+0x78>
    336a:	e107      	b.n	357c <__aeabi_dadd+0x288>
    336c:	2d1f      	cmp	r5, #31
    336e:	dd00      	ble.n	3372 <__aeabi_dadd+0x7e>
    3370:	e138      	b.n	35e4 <__aeabi_dadd+0x2f0>
    3372:	2020      	movs	r0, #32
    3374:	1b43      	subs	r3, r0, r5
    3376:	469a      	mov	sl, r3
    3378:	000b      	movs	r3, r1
    337a:	4650      	mov	r0, sl
    337c:	4083      	lsls	r3, r0
    337e:	4699      	mov	r9, r3
    3380:	0013      	movs	r3, r2
    3382:	4648      	mov	r0, r9
    3384:	40eb      	lsrs	r3, r5
    3386:	4318      	orrs	r0, r3
    3388:	0003      	movs	r3, r0
    338a:	4650      	mov	r0, sl
    338c:	4082      	lsls	r2, r0
    338e:	1e50      	subs	r0, r2, #1
    3390:	4182      	sbcs	r2, r0
    3392:	40e9      	lsrs	r1, r5
    3394:	431a      	orrs	r2, r3
    3396:	1aba      	subs	r2, r7, r2
    3398:	1a61      	subs	r1, r4, r1
    339a:	4297      	cmp	r7, r2
    339c:	41a4      	sbcs	r4, r4
    339e:	0017      	movs	r7, r2
    33a0:	4264      	negs	r4, r4
    33a2:	1b0c      	subs	r4, r1, r4
    33a4:	0223      	lsls	r3, r4, #8
    33a6:	d562      	bpl.n	346e <__aeabi_dadd+0x17a>
    33a8:	0264      	lsls	r4, r4, #9
    33aa:	0a65      	lsrs	r5, r4, #9
    33ac:	2d00      	cmp	r5, #0
    33ae:	d100      	bne.n	33b2 <__aeabi_dadd+0xbe>
    33b0:	e0df      	b.n	3572 <__aeabi_dadd+0x27e>
    33b2:	0028      	movs	r0, r5
    33b4:	f001 fbe4 	bl	4b80 <__clzsi2>
    33b8:	0003      	movs	r3, r0
    33ba:	3b08      	subs	r3, #8
    33bc:	2b1f      	cmp	r3, #31
    33be:	dd00      	ble.n	33c2 <__aeabi_dadd+0xce>
    33c0:	e0d2      	b.n	3568 <__aeabi_dadd+0x274>
    33c2:	2220      	movs	r2, #32
    33c4:	003c      	movs	r4, r7
    33c6:	1ad2      	subs	r2, r2, r3
    33c8:	409d      	lsls	r5, r3
    33ca:	40d4      	lsrs	r4, r2
    33cc:	409f      	lsls	r7, r3
    33ce:	4325      	orrs	r5, r4
    33d0:	429e      	cmp	r6, r3
    33d2:	dd00      	ble.n	33d6 <__aeabi_dadd+0xe2>
    33d4:	e0c4      	b.n	3560 <__aeabi_dadd+0x26c>
    33d6:	1b9e      	subs	r6, r3, r6
    33d8:	1c73      	adds	r3, r6, #1
    33da:	2b1f      	cmp	r3, #31
    33dc:	dd00      	ble.n	33e0 <__aeabi_dadd+0xec>
    33de:	e0f1      	b.n	35c4 <__aeabi_dadd+0x2d0>
    33e0:	2220      	movs	r2, #32
    33e2:	0038      	movs	r0, r7
    33e4:	0029      	movs	r1, r5
    33e6:	1ad2      	subs	r2, r2, r3
    33e8:	40d8      	lsrs	r0, r3
    33ea:	4091      	lsls	r1, r2
    33ec:	4097      	lsls	r7, r2
    33ee:	002c      	movs	r4, r5
    33f0:	4301      	orrs	r1, r0
    33f2:	1e78      	subs	r0, r7, #1
    33f4:	4187      	sbcs	r7, r0
    33f6:	40dc      	lsrs	r4, r3
    33f8:	2600      	movs	r6, #0
    33fa:	430f      	orrs	r7, r1
    33fc:	077b      	lsls	r3, r7, #29
    33fe:	d009      	beq.n	3414 <__aeabi_dadd+0x120>
    3400:	230f      	movs	r3, #15
    3402:	403b      	ands	r3, r7
    3404:	2b04      	cmp	r3, #4
    3406:	d005      	beq.n	3414 <__aeabi_dadd+0x120>
    3408:	1d3b      	adds	r3, r7, #4
    340a:	42bb      	cmp	r3, r7
    340c:	41bf      	sbcs	r7, r7
    340e:	427f      	negs	r7, r7
    3410:	19e4      	adds	r4, r4, r7
    3412:	001f      	movs	r7, r3
    3414:	0223      	lsls	r3, r4, #8
    3416:	d52c      	bpl.n	3472 <__aeabi_dadd+0x17e>
    3418:	4b96      	ldr	r3, [pc, #600]	; (3674 <__aeabi_dadd+0x380>)
    341a:	3601      	adds	r6, #1
    341c:	429e      	cmp	r6, r3
    341e:	d100      	bne.n	3422 <__aeabi_dadd+0x12e>
    3420:	e09a      	b.n	3558 <__aeabi_dadd+0x264>
    3422:	4645      	mov	r5, r8
    3424:	4b94      	ldr	r3, [pc, #592]	; (3678 <__aeabi_dadd+0x384>)
    3426:	08ff      	lsrs	r7, r7, #3
    3428:	401c      	ands	r4, r3
    342a:	0760      	lsls	r0, r4, #29
    342c:	0576      	lsls	r6, r6, #21
    342e:	0264      	lsls	r4, r4, #9
    3430:	4307      	orrs	r7, r0
    3432:	0b24      	lsrs	r4, r4, #12
    3434:	0d76      	lsrs	r6, r6, #21
    3436:	2100      	movs	r1, #0
    3438:	0324      	lsls	r4, r4, #12
    343a:	0b23      	lsrs	r3, r4, #12
    343c:	0d0c      	lsrs	r4, r1, #20
    343e:	4a8f      	ldr	r2, [pc, #572]	; (367c <__aeabi_dadd+0x388>)
    3440:	0524      	lsls	r4, r4, #20
    3442:	431c      	orrs	r4, r3
    3444:	4014      	ands	r4, r2
    3446:	0533      	lsls	r3, r6, #20
    3448:	4323      	orrs	r3, r4
    344a:	005b      	lsls	r3, r3, #1
    344c:	07ed      	lsls	r5, r5, #31
    344e:	085b      	lsrs	r3, r3, #1
    3450:	432b      	orrs	r3, r5
    3452:	0038      	movs	r0, r7
    3454:	0019      	movs	r1, r3
    3456:	bc3c      	pop	{r2, r3, r4, r5}
    3458:	4690      	mov	r8, r2
    345a:	4699      	mov	r9, r3
    345c:	46a2      	mov	sl, r4
    345e:	46ab      	mov	fp, r5
    3460:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    3462:	4664      	mov	r4, ip
    3464:	4304      	orrs	r4, r0
    3466:	d100      	bne.n	346a <__aeabi_dadd+0x176>
    3468:	e211      	b.n	388e <__aeabi_dadd+0x59a>
    346a:	0004      	movs	r4, r0
    346c:	4667      	mov	r7, ip
    346e:	077b      	lsls	r3, r7, #29
    3470:	d1c6      	bne.n	3400 <__aeabi_dadd+0x10c>
    3472:	4645      	mov	r5, r8
    3474:	0760      	lsls	r0, r4, #29
    3476:	08ff      	lsrs	r7, r7, #3
    3478:	4307      	orrs	r7, r0
    347a:	08e4      	lsrs	r4, r4, #3
    347c:	4b7d      	ldr	r3, [pc, #500]	; (3674 <__aeabi_dadd+0x380>)
    347e:	429e      	cmp	r6, r3
    3480:	d030      	beq.n	34e4 <__aeabi_dadd+0x1f0>
    3482:	0324      	lsls	r4, r4, #12
    3484:	0576      	lsls	r6, r6, #21
    3486:	0b24      	lsrs	r4, r4, #12
    3488:	0d76      	lsrs	r6, r6, #21
    348a:	e7d4      	b.n	3436 <__aeabi_dadd+0x142>
    348c:	1a33      	subs	r3, r6, r0
    348e:	469a      	mov	sl, r3
    3490:	2b00      	cmp	r3, #0
    3492:	dd78      	ble.n	3586 <__aeabi_dadd+0x292>
    3494:	2800      	cmp	r0, #0
    3496:	d031      	beq.n	34fc <__aeabi_dadd+0x208>
    3498:	4876      	ldr	r0, [pc, #472]	; (3674 <__aeabi_dadd+0x380>)
    349a:	4286      	cmp	r6, r0
    349c:	d0ae      	beq.n	33fc <__aeabi_dadd+0x108>
    349e:	2080      	movs	r0, #128	; 0x80
    34a0:	0400      	lsls	r0, r0, #16
    34a2:	4301      	orrs	r1, r0
    34a4:	4653      	mov	r3, sl
    34a6:	2b38      	cmp	r3, #56	; 0x38
    34a8:	dc00      	bgt.n	34ac <__aeabi_dadd+0x1b8>
    34aa:	e0e9      	b.n	3680 <__aeabi_dadd+0x38c>
    34ac:	430a      	orrs	r2, r1
    34ae:	1e51      	subs	r1, r2, #1
    34b0:	418a      	sbcs	r2, r1
    34b2:	2100      	movs	r1, #0
    34b4:	19d2      	adds	r2, r2, r7
    34b6:	42ba      	cmp	r2, r7
    34b8:	41bf      	sbcs	r7, r7
    34ba:	1909      	adds	r1, r1, r4
    34bc:	427c      	negs	r4, r7
    34be:	0017      	movs	r7, r2
    34c0:	190c      	adds	r4, r1, r4
    34c2:	0223      	lsls	r3, r4, #8
    34c4:	d5d3      	bpl.n	346e <__aeabi_dadd+0x17a>
    34c6:	4b6b      	ldr	r3, [pc, #428]	; (3674 <__aeabi_dadd+0x380>)
    34c8:	3601      	adds	r6, #1
    34ca:	429e      	cmp	r6, r3
    34cc:	d100      	bne.n	34d0 <__aeabi_dadd+0x1dc>
    34ce:	e13a      	b.n	3746 <__aeabi_dadd+0x452>
    34d0:	2001      	movs	r0, #1
    34d2:	4b69      	ldr	r3, [pc, #420]	; (3678 <__aeabi_dadd+0x384>)
    34d4:	401c      	ands	r4, r3
    34d6:	087b      	lsrs	r3, r7, #1
    34d8:	4007      	ands	r7, r0
    34da:	431f      	orrs	r7, r3
    34dc:	07e0      	lsls	r0, r4, #31
    34de:	4307      	orrs	r7, r0
    34e0:	0864      	lsrs	r4, r4, #1
    34e2:	e78b      	b.n	33fc <__aeabi_dadd+0x108>
    34e4:	0023      	movs	r3, r4
    34e6:	433b      	orrs	r3, r7
    34e8:	d100      	bne.n	34ec <__aeabi_dadd+0x1f8>
    34ea:	e1cb      	b.n	3884 <__aeabi_dadd+0x590>
    34ec:	2280      	movs	r2, #128	; 0x80
    34ee:	0312      	lsls	r2, r2, #12
    34f0:	4314      	orrs	r4, r2
    34f2:	0324      	lsls	r4, r4, #12
    34f4:	0b24      	lsrs	r4, r4, #12
    34f6:	e79e      	b.n	3436 <__aeabi_dadd+0x142>
    34f8:	002e      	movs	r6, r5
    34fa:	e77f      	b.n	33fc <__aeabi_dadd+0x108>
    34fc:	0008      	movs	r0, r1
    34fe:	4310      	orrs	r0, r2
    3500:	d100      	bne.n	3504 <__aeabi_dadd+0x210>
    3502:	e0b4      	b.n	366e <__aeabi_dadd+0x37a>
    3504:	1e58      	subs	r0, r3, #1
    3506:	2800      	cmp	r0, #0
    3508:	d000      	beq.n	350c <__aeabi_dadd+0x218>
    350a:	e0de      	b.n	36ca <__aeabi_dadd+0x3d6>
    350c:	18ba      	adds	r2, r7, r2
    350e:	42ba      	cmp	r2, r7
    3510:	419b      	sbcs	r3, r3
    3512:	1864      	adds	r4, r4, r1
    3514:	425b      	negs	r3, r3
    3516:	18e4      	adds	r4, r4, r3
    3518:	0017      	movs	r7, r2
    351a:	2601      	movs	r6, #1
    351c:	0223      	lsls	r3, r4, #8
    351e:	d5a6      	bpl.n	346e <__aeabi_dadd+0x17a>
    3520:	2602      	movs	r6, #2
    3522:	e7d5      	b.n	34d0 <__aeabi_dadd+0x1dc>
    3524:	2d00      	cmp	r5, #0
    3526:	d16e      	bne.n	3606 <__aeabi_dadd+0x312>
    3528:	1c70      	adds	r0, r6, #1
    352a:	0540      	lsls	r0, r0, #21
    352c:	0d40      	lsrs	r0, r0, #21
    352e:	2801      	cmp	r0, #1
    3530:	dc00      	bgt.n	3534 <__aeabi_dadd+0x240>
    3532:	e0f9      	b.n	3728 <__aeabi_dadd+0x434>
    3534:	1ab8      	subs	r0, r7, r2
    3536:	4684      	mov	ip, r0
    3538:	4287      	cmp	r7, r0
    353a:	4180      	sbcs	r0, r0
    353c:	1ae5      	subs	r5, r4, r3
    353e:	4240      	negs	r0, r0
    3540:	1a2d      	subs	r5, r5, r0
    3542:	0228      	lsls	r0, r5, #8
    3544:	d400      	bmi.n	3548 <__aeabi_dadd+0x254>
    3546:	e089      	b.n	365c <__aeabi_dadd+0x368>
    3548:	1bd7      	subs	r7, r2, r7
    354a:	42ba      	cmp	r2, r7
    354c:	4192      	sbcs	r2, r2
    354e:	1b1c      	subs	r4, r3, r4
    3550:	4252      	negs	r2, r2
    3552:	1aa5      	subs	r5, r4, r2
    3554:	46d8      	mov	r8, fp
    3556:	e729      	b.n	33ac <__aeabi_dadd+0xb8>
    3558:	4645      	mov	r5, r8
    355a:	2400      	movs	r4, #0
    355c:	2700      	movs	r7, #0
    355e:	e76a      	b.n	3436 <__aeabi_dadd+0x142>
    3560:	4c45      	ldr	r4, [pc, #276]	; (3678 <__aeabi_dadd+0x384>)
    3562:	1af6      	subs	r6, r6, r3
    3564:	402c      	ands	r4, r5
    3566:	e749      	b.n	33fc <__aeabi_dadd+0x108>
    3568:	003d      	movs	r5, r7
    356a:	3828      	subs	r0, #40	; 0x28
    356c:	4085      	lsls	r5, r0
    356e:	2700      	movs	r7, #0
    3570:	e72e      	b.n	33d0 <__aeabi_dadd+0xdc>
    3572:	0038      	movs	r0, r7
    3574:	f001 fb04 	bl	4b80 <__clzsi2>
    3578:	3020      	adds	r0, #32
    357a:	e71d      	b.n	33b8 <__aeabi_dadd+0xc4>
    357c:	430a      	orrs	r2, r1
    357e:	1e51      	subs	r1, r2, #1
    3580:	418a      	sbcs	r2, r1
    3582:	2100      	movs	r1, #0
    3584:	e707      	b.n	3396 <__aeabi_dadd+0xa2>
    3586:	2b00      	cmp	r3, #0
    3588:	d000      	beq.n	358c <__aeabi_dadd+0x298>
    358a:	e0f3      	b.n	3774 <__aeabi_dadd+0x480>
    358c:	1c70      	adds	r0, r6, #1
    358e:	0543      	lsls	r3, r0, #21
    3590:	0d5b      	lsrs	r3, r3, #21
    3592:	2b01      	cmp	r3, #1
    3594:	dc00      	bgt.n	3598 <__aeabi_dadd+0x2a4>
    3596:	e0ad      	b.n	36f4 <__aeabi_dadd+0x400>
    3598:	4b36      	ldr	r3, [pc, #216]	; (3674 <__aeabi_dadd+0x380>)
    359a:	4298      	cmp	r0, r3
    359c:	d100      	bne.n	35a0 <__aeabi_dadd+0x2ac>
    359e:	e0d1      	b.n	3744 <__aeabi_dadd+0x450>
    35a0:	18ba      	adds	r2, r7, r2
    35a2:	42ba      	cmp	r2, r7
    35a4:	41bf      	sbcs	r7, r7
    35a6:	1864      	adds	r4, r4, r1
    35a8:	427f      	negs	r7, r7
    35aa:	19e4      	adds	r4, r4, r7
    35ac:	07e7      	lsls	r7, r4, #31
    35ae:	0852      	lsrs	r2, r2, #1
    35b0:	4317      	orrs	r7, r2
    35b2:	0864      	lsrs	r4, r4, #1
    35b4:	0006      	movs	r6, r0
    35b6:	e721      	b.n	33fc <__aeabi_dadd+0x108>
    35b8:	482e      	ldr	r0, [pc, #184]	; (3674 <__aeabi_dadd+0x380>)
    35ba:	4285      	cmp	r5, r0
    35bc:	d100      	bne.n	35c0 <__aeabi_dadd+0x2cc>
    35be:	e093      	b.n	36e8 <__aeabi_dadd+0x3f4>
    35c0:	001d      	movs	r5, r3
    35c2:	e6d0      	b.n	3366 <__aeabi_dadd+0x72>
    35c4:	0029      	movs	r1, r5
    35c6:	3e1f      	subs	r6, #31
    35c8:	40f1      	lsrs	r1, r6
    35ca:	2b20      	cmp	r3, #32
    35cc:	d100      	bne.n	35d0 <__aeabi_dadd+0x2dc>
    35ce:	e08d      	b.n	36ec <__aeabi_dadd+0x3f8>
    35d0:	2240      	movs	r2, #64	; 0x40
    35d2:	1ad3      	subs	r3, r2, r3
    35d4:	409d      	lsls	r5, r3
    35d6:	432f      	orrs	r7, r5
    35d8:	1e7d      	subs	r5, r7, #1
    35da:	41af      	sbcs	r7, r5
    35dc:	2400      	movs	r4, #0
    35de:	430f      	orrs	r7, r1
    35e0:	2600      	movs	r6, #0
    35e2:	e744      	b.n	346e <__aeabi_dadd+0x17a>
    35e4:	002b      	movs	r3, r5
    35e6:	0008      	movs	r0, r1
    35e8:	3b20      	subs	r3, #32
    35ea:	40d8      	lsrs	r0, r3
    35ec:	0003      	movs	r3, r0
    35ee:	2d20      	cmp	r5, #32
    35f0:	d100      	bne.n	35f4 <__aeabi_dadd+0x300>
    35f2:	e07d      	b.n	36f0 <__aeabi_dadd+0x3fc>
    35f4:	2040      	movs	r0, #64	; 0x40
    35f6:	1b45      	subs	r5, r0, r5
    35f8:	40a9      	lsls	r1, r5
    35fa:	430a      	orrs	r2, r1
    35fc:	1e51      	subs	r1, r2, #1
    35fe:	418a      	sbcs	r2, r1
    3600:	2100      	movs	r1, #0
    3602:	431a      	orrs	r2, r3
    3604:	e6c7      	b.n	3396 <__aeabi_dadd+0xa2>
    3606:	2e00      	cmp	r6, #0
    3608:	d050      	beq.n	36ac <__aeabi_dadd+0x3b8>
    360a:	4e1a      	ldr	r6, [pc, #104]	; (3674 <__aeabi_dadd+0x380>)
    360c:	42b0      	cmp	r0, r6
    360e:	d057      	beq.n	36c0 <__aeabi_dadd+0x3cc>
    3610:	2680      	movs	r6, #128	; 0x80
    3612:	426b      	negs	r3, r5
    3614:	4699      	mov	r9, r3
    3616:	0436      	lsls	r6, r6, #16
    3618:	4334      	orrs	r4, r6
    361a:	464b      	mov	r3, r9
    361c:	2b38      	cmp	r3, #56	; 0x38
    361e:	dd00      	ble.n	3622 <__aeabi_dadd+0x32e>
    3620:	e0d6      	b.n	37d0 <__aeabi_dadd+0x4dc>
    3622:	2b1f      	cmp	r3, #31
    3624:	dd00      	ble.n	3628 <__aeabi_dadd+0x334>
    3626:	e135      	b.n	3894 <__aeabi_dadd+0x5a0>
    3628:	2620      	movs	r6, #32
    362a:	1af5      	subs	r5, r6, r3
    362c:	0026      	movs	r6, r4
    362e:	40ae      	lsls	r6, r5
    3630:	46b2      	mov	sl, r6
    3632:	003e      	movs	r6, r7
    3634:	40de      	lsrs	r6, r3
    3636:	46ac      	mov	ip, r5
    3638:	0035      	movs	r5, r6
    363a:	4656      	mov	r6, sl
    363c:	432e      	orrs	r6, r5
    363e:	4665      	mov	r5, ip
    3640:	40af      	lsls	r7, r5
    3642:	1e7d      	subs	r5, r7, #1
    3644:	41af      	sbcs	r7, r5
    3646:	40dc      	lsrs	r4, r3
    3648:	4337      	orrs	r7, r6
    364a:	1bd7      	subs	r7, r2, r7
    364c:	42ba      	cmp	r2, r7
    364e:	4192      	sbcs	r2, r2
    3650:	1b0c      	subs	r4, r1, r4
    3652:	4252      	negs	r2, r2
    3654:	1aa4      	subs	r4, r4, r2
    3656:	0006      	movs	r6, r0
    3658:	46d8      	mov	r8, fp
    365a:	e6a3      	b.n	33a4 <__aeabi_dadd+0xb0>
    365c:	4664      	mov	r4, ip
    365e:	4667      	mov	r7, ip
    3660:	432c      	orrs	r4, r5
    3662:	d000      	beq.n	3666 <__aeabi_dadd+0x372>
    3664:	e6a2      	b.n	33ac <__aeabi_dadd+0xb8>
    3666:	2500      	movs	r5, #0
    3668:	2600      	movs	r6, #0
    366a:	2700      	movs	r7, #0
    366c:	e706      	b.n	347c <__aeabi_dadd+0x188>
    366e:	001e      	movs	r6, r3
    3670:	e6c4      	b.n	33fc <__aeabi_dadd+0x108>
    3672:	46c0      	nop			; (mov r8, r8)
    3674:	000007ff 	.word	0x000007ff
    3678:	ff7fffff 	.word	0xff7fffff
    367c:	800fffff 	.word	0x800fffff
    3680:	2b1f      	cmp	r3, #31
    3682:	dc63      	bgt.n	374c <__aeabi_dadd+0x458>
    3684:	2020      	movs	r0, #32
    3686:	1ac3      	subs	r3, r0, r3
    3688:	0008      	movs	r0, r1
    368a:	4098      	lsls	r0, r3
    368c:	469c      	mov	ip, r3
    368e:	4683      	mov	fp, r0
    3690:	4653      	mov	r3, sl
    3692:	0010      	movs	r0, r2
    3694:	40d8      	lsrs	r0, r3
    3696:	0003      	movs	r3, r0
    3698:	4658      	mov	r0, fp
    369a:	4318      	orrs	r0, r3
    369c:	4663      	mov	r3, ip
    369e:	409a      	lsls	r2, r3
    36a0:	1e53      	subs	r3, r2, #1
    36a2:	419a      	sbcs	r2, r3
    36a4:	4653      	mov	r3, sl
    36a6:	4302      	orrs	r2, r0
    36a8:	40d9      	lsrs	r1, r3
    36aa:	e703      	b.n	34b4 <__aeabi_dadd+0x1c0>
    36ac:	0026      	movs	r6, r4
    36ae:	433e      	orrs	r6, r7
    36b0:	d006      	beq.n	36c0 <__aeabi_dadd+0x3cc>
    36b2:	43eb      	mvns	r3, r5
    36b4:	4699      	mov	r9, r3
    36b6:	2b00      	cmp	r3, #0
    36b8:	d0c7      	beq.n	364a <__aeabi_dadd+0x356>
    36ba:	4e94      	ldr	r6, [pc, #592]	; (390c <__aeabi_dadd+0x618>)
    36bc:	42b0      	cmp	r0, r6
    36be:	d1ac      	bne.n	361a <__aeabi_dadd+0x326>
    36c0:	000c      	movs	r4, r1
    36c2:	0017      	movs	r7, r2
    36c4:	0006      	movs	r6, r0
    36c6:	46d8      	mov	r8, fp
    36c8:	e698      	b.n	33fc <__aeabi_dadd+0x108>
    36ca:	4b90      	ldr	r3, [pc, #576]	; (390c <__aeabi_dadd+0x618>)
    36cc:	459a      	cmp	sl, r3
    36ce:	d00b      	beq.n	36e8 <__aeabi_dadd+0x3f4>
    36d0:	4682      	mov	sl, r0
    36d2:	e6e7      	b.n	34a4 <__aeabi_dadd+0x1b0>
    36d4:	2800      	cmp	r0, #0
    36d6:	d000      	beq.n	36da <__aeabi_dadd+0x3e6>
    36d8:	e09e      	b.n	3818 <__aeabi_dadd+0x524>
    36da:	0018      	movs	r0, r3
    36dc:	4310      	orrs	r0, r2
    36de:	d100      	bne.n	36e2 <__aeabi_dadd+0x3ee>
    36e0:	e0e9      	b.n	38b6 <__aeabi_dadd+0x5c2>
    36e2:	001c      	movs	r4, r3
    36e4:	0017      	movs	r7, r2
    36e6:	46d8      	mov	r8, fp
    36e8:	4e88      	ldr	r6, [pc, #544]	; (390c <__aeabi_dadd+0x618>)
    36ea:	e687      	b.n	33fc <__aeabi_dadd+0x108>
    36ec:	2500      	movs	r5, #0
    36ee:	e772      	b.n	35d6 <__aeabi_dadd+0x2e2>
    36f0:	2100      	movs	r1, #0
    36f2:	e782      	b.n	35fa <__aeabi_dadd+0x306>
    36f4:	0023      	movs	r3, r4
    36f6:	433b      	orrs	r3, r7
    36f8:	2e00      	cmp	r6, #0
    36fa:	d000      	beq.n	36fe <__aeabi_dadd+0x40a>
    36fc:	e0ab      	b.n	3856 <__aeabi_dadd+0x562>
    36fe:	2b00      	cmp	r3, #0
    3700:	d100      	bne.n	3704 <__aeabi_dadd+0x410>
    3702:	e0e7      	b.n	38d4 <__aeabi_dadd+0x5e0>
    3704:	000b      	movs	r3, r1
    3706:	4313      	orrs	r3, r2
    3708:	d100      	bne.n	370c <__aeabi_dadd+0x418>
    370a:	e677      	b.n	33fc <__aeabi_dadd+0x108>
    370c:	18ba      	adds	r2, r7, r2
    370e:	42ba      	cmp	r2, r7
    3710:	41bf      	sbcs	r7, r7
    3712:	1864      	adds	r4, r4, r1
    3714:	427f      	negs	r7, r7
    3716:	19e4      	adds	r4, r4, r7
    3718:	0223      	lsls	r3, r4, #8
    371a:	d400      	bmi.n	371e <__aeabi_dadd+0x42a>
    371c:	e0f2      	b.n	3904 <__aeabi_dadd+0x610>
    371e:	4b7c      	ldr	r3, [pc, #496]	; (3910 <__aeabi_dadd+0x61c>)
    3720:	0017      	movs	r7, r2
    3722:	401c      	ands	r4, r3
    3724:	0006      	movs	r6, r0
    3726:	e669      	b.n	33fc <__aeabi_dadd+0x108>
    3728:	0020      	movs	r0, r4
    372a:	4338      	orrs	r0, r7
    372c:	2e00      	cmp	r6, #0
    372e:	d1d1      	bne.n	36d4 <__aeabi_dadd+0x3e0>
    3730:	2800      	cmp	r0, #0
    3732:	d15b      	bne.n	37ec <__aeabi_dadd+0x4f8>
    3734:	001c      	movs	r4, r3
    3736:	4314      	orrs	r4, r2
    3738:	d100      	bne.n	373c <__aeabi_dadd+0x448>
    373a:	e0a8      	b.n	388e <__aeabi_dadd+0x59a>
    373c:	001c      	movs	r4, r3
    373e:	0017      	movs	r7, r2
    3740:	46d8      	mov	r8, fp
    3742:	e65b      	b.n	33fc <__aeabi_dadd+0x108>
    3744:	0006      	movs	r6, r0
    3746:	2400      	movs	r4, #0
    3748:	2700      	movs	r7, #0
    374a:	e697      	b.n	347c <__aeabi_dadd+0x188>
    374c:	4650      	mov	r0, sl
    374e:	000b      	movs	r3, r1
    3750:	3820      	subs	r0, #32
    3752:	40c3      	lsrs	r3, r0
    3754:	4699      	mov	r9, r3
    3756:	4653      	mov	r3, sl
    3758:	2b20      	cmp	r3, #32
    375a:	d100      	bne.n	375e <__aeabi_dadd+0x46a>
    375c:	e095      	b.n	388a <__aeabi_dadd+0x596>
    375e:	2340      	movs	r3, #64	; 0x40
    3760:	4650      	mov	r0, sl
    3762:	1a1b      	subs	r3, r3, r0
    3764:	4099      	lsls	r1, r3
    3766:	430a      	orrs	r2, r1
    3768:	1e51      	subs	r1, r2, #1
    376a:	418a      	sbcs	r2, r1
    376c:	464b      	mov	r3, r9
    376e:	2100      	movs	r1, #0
    3770:	431a      	orrs	r2, r3
    3772:	e69f      	b.n	34b4 <__aeabi_dadd+0x1c0>
    3774:	2e00      	cmp	r6, #0
    3776:	d130      	bne.n	37da <__aeabi_dadd+0x4e6>
    3778:	0026      	movs	r6, r4
    377a:	433e      	orrs	r6, r7
    377c:	d067      	beq.n	384e <__aeabi_dadd+0x55a>
    377e:	43db      	mvns	r3, r3
    3780:	469a      	mov	sl, r3
    3782:	2b00      	cmp	r3, #0
    3784:	d01c      	beq.n	37c0 <__aeabi_dadd+0x4cc>
    3786:	4e61      	ldr	r6, [pc, #388]	; (390c <__aeabi_dadd+0x618>)
    3788:	42b0      	cmp	r0, r6
    378a:	d060      	beq.n	384e <__aeabi_dadd+0x55a>
    378c:	4653      	mov	r3, sl
    378e:	2b38      	cmp	r3, #56	; 0x38
    3790:	dd00      	ble.n	3794 <__aeabi_dadd+0x4a0>
    3792:	e096      	b.n	38c2 <__aeabi_dadd+0x5ce>
    3794:	2b1f      	cmp	r3, #31
    3796:	dd00      	ble.n	379a <__aeabi_dadd+0x4a6>
    3798:	e09f      	b.n	38da <__aeabi_dadd+0x5e6>
    379a:	2620      	movs	r6, #32
    379c:	1af3      	subs	r3, r6, r3
    379e:	0026      	movs	r6, r4
    37a0:	409e      	lsls	r6, r3
    37a2:	469c      	mov	ip, r3
    37a4:	46b3      	mov	fp, r6
    37a6:	4653      	mov	r3, sl
    37a8:	003e      	movs	r6, r7
    37aa:	40de      	lsrs	r6, r3
    37ac:	0033      	movs	r3, r6
    37ae:	465e      	mov	r6, fp
    37b0:	431e      	orrs	r6, r3
    37b2:	4663      	mov	r3, ip
    37b4:	409f      	lsls	r7, r3
    37b6:	1e7b      	subs	r3, r7, #1
    37b8:	419f      	sbcs	r7, r3
    37ba:	4653      	mov	r3, sl
    37bc:	40dc      	lsrs	r4, r3
    37be:	4337      	orrs	r7, r6
    37c0:	18bf      	adds	r7, r7, r2
    37c2:	4297      	cmp	r7, r2
    37c4:	4192      	sbcs	r2, r2
    37c6:	1864      	adds	r4, r4, r1
    37c8:	4252      	negs	r2, r2
    37ca:	18a4      	adds	r4, r4, r2
    37cc:	0006      	movs	r6, r0
    37ce:	e678      	b.n	34c2 <__aeabi_dadd+0x1ce>
    37d0:	4327      	orrs	r7, r4
    37d2:	1e7c      	subs	r4, r7, #1
    37d4:	41a7      	sbcs	r7, r4
    37d6:	2400      	movs	r4, #0
    37d8:	e737      	b.n	364a <__aeabi_dadd+0x356>
    37da:	4e4c      	ldr	r6, [pc, #304]	; (390c <__aeabi_dadd+0x618>)
    37dc:	42b0      	cmp	r0, r6
    37de:	d036      	beq.n	384e <__aeabi_dadd+0x55a>
    37e0:	2680      	movs	r6, #128	; 0x80
    37e2:	425b      	negs	r3, r3
    37e4:	0436      	lsls	r6, r6, #16
    37e6:	469a      	mov	sl, r3
    37e8:	4334      	orrs	r4, r6
    37ea:	e7cf      	b.n	378c <__aeabi_dadd+0x498>
    37ec:	0018      	movs	r0, r3
    37ee:	4310      	orrs	r0, r2
    37f0:	d100      	bne.n	37f4 <__aeabi_dadd+0x500>
    37f2:	e603      	b.n	33fc <__aeabi_dadd+0x108>
    37f4:	1ab8      	subs	r0, r7, r2
    37f6:	4684      	mov	ip, r0
    37f8:	4567      	cmp	r7, ip
    37fa:	41ad      	sbcs	r5, r5
    37fc:	1ae0      	subs	r0, r4, r3
    37fe:	426d      	negs	r5, r5
    3800:	1b40      	subs	r0, r0, r5
    3802:	0205      	lsls	r5, r0, #8
    3804:	d400      	bmi.n	3808 <__aeabi_dadd+0x514>
    3806:	e62c      	b.n	3462 <__aeabi_dadd+0x16e>
    3808:	1bd7      	subs	r7, r2, r7
    380a:	42ba      	cmp	r2, r7
    380c:	4192      	sbcs	r2, r2
    380e:	1b1c      	subs	r4, r3, r4
    3810:	4252      	negs	r2, r2
    3812:	1aa4      	subs	r4, r4, r2
    3814:	46d8      	mov	r8, fp
    3816:	e5f1      	b.n	33fc <__aeabi_dadd+0x108>
    3818:	0018      	movs	r0, r3
    381a:	4310      	orrs	r0, r2
    381c:	d100      	bne.n	3820 <__aeabi_dadd+0x52c>
    381e:	e763      	b.n	36e8 <__aeabi_dadd+0x3f4>
    3820:	08f8      	lsrs	r0, r7, #3
    3822:	0767      	lsls	r7, r4, #29
    3824:	4307      	orrs	r7, r0
    3826:	2080      	movs	r0, #128	; 0x80
    3828:	08e4      	lsrs	r4, r4, #3
    382a:	0300      	lsls	r0, r0, #12
    382c:	4204      	tst	r4, r0
    382e:	d008      	beq.n	3842 <__aeabi_dadd+0x54e>
    3830:	08dd      	lsrs	r5, r3, #3
    3832:	4205      	tst	r5, r0
    3834:	d105      	bne.n	3842 <__aeabi_dadd+0x54e>
    3836:	08d2      	lsrs	r2, r2, #3
    3838:	0759      	lsls	r1, r3, #29
    383a:	4311      	orrs	r1, r2
    383c:	000f      	movs	r7, r1
    383e:	002c      	movs	r4, r5
    3840:	46d8      	mov	r8, fp
    3842:	0f7b      	lsrs	r3, r7, #29
    3844:	00e4      	lsls	r4, r4, #3
    3846:	431c      	orrs	r4, r3
    3848:	00ff      	lsls	r7, r7, #3
    384a:	4e30      	ldr	r6, [pc, #192]	; (390c <__aeabi_dadd+0x618>)
    384c:	e5d6      	b.n	33fc <__aeabi_dadd+0x108>
    384e:	000c      	movs	r4, r1
    3850:	0017      	movs	r7, r2
    3852:	0006      	movs	r6, r0
    3854:	e5d2      	b.n	33fc <__aeabi_dadd+0x108>
    3856:	2b00      	cmp	r3, #0
    3858:	d038      	beq.n	38cc <__aeabi_dadd+0x5d8>
    385a:	000b      	movs	r3, r1
    385c:	4313      	orrs	r3, r2
    385e:	d100      	bne.n	3862 <__aeabi_dadd+0x56e>
    3860:	e742      	b.n	36e8 <__aeabi_dadd+0x3f4>
    3862:	08f8      	lsrs	r0, r7, #3
    3864:	0767      	lsls	r7, r4, #29
    3866:	4307      	orrs	r7, r0
    3868:	2080      	movs	r0, #128	; 0x80
    386a:	08e4      	lsrs	r4, r4, #3
    386c:	0300      	lsls	r0, r0, #12
    386e:	4204      	tst	r4, r0
    3870:	d0e7      	beq.n	3842 <__aeabi_dadd+0x54e>
    3872:	08cb      	lsrs	r3, r1, #3
    3874:	4203      	tst	r3, r0
    3876:	d1e4      	bne.n	3842 <__aeabi_dadd+0x54e>
    3878:	08d2      	lsrs	r2, r2, #3
    387a:	0749      	lsls	r1, r1, #29
    387c:	4311      	orrs	r1, r2
    387e:	000f      	movs	r7, r1
    3880:	001c      	movs	r4, r3
    3882:	e7de      	b.n	3842 <__aeabi_dadd+0x54e>
    3884:	2700      	movs	r7, #0
    3886:	2400      	movs	r4, #0
    3888:	e5d5      	b.n	3436 <__aeabi_dadd+0x142>
    388a:	2100      	movs	r1, #0
    388c:	e76b      	b.n	3766 <__aeabi_dadd+0x472>
    388e:	2500      	movs	r5, #0
    3890:	2700      	movs	r7, #0
    3892:	e5f3      	b.n	347c <__aeabi_dadd+0x188>
    3894:	464e      	mov	r6, r9
    3896:	0025      	movs	r5, r4
    3898:	3e20      	subs	r6, #32
    389a:	40f5      	lsrs	r5, r6
    389c:	464b      	mov	r3, r9
    389e:	002e      	movs	r6, r5
    38a0:	2b20      	cmp	r3, #32
    38a2:	d02d      	beq.n	3900 <__aeabi_dadd+0x60c>
    38a4:	2540      	movs	r5, #64	; 0x40
    38a6:	1aed      	subs	r5, r5, r3
    38a8:	40ac      	lsls	r4, r5
    38aa:	4327      	orrs	r7, r4
    38ac:	1e7c      	subs	r4, r7, #1
    38ae:	41a7      	sbcs	r7, r4
    38b0:	2400      	movs	r4, #0
    38b2:	4337      	orrs	r7, r6
    38b4:	e6c9      	b.n	364a <__aeabi_dadd+0x356>
    38b6:	2480      	movs	r4, #128	; 0x80
    38b8:	2500      	movs	r5, #0
    38ba:	0324      	lsls	r4, r4, #12
    38bc:	4e13      	ldr	r6, [pc, #76]	; (390c <__aeabi_dadd+0x618>)
    38be:	2700      	movs	r7, #0
    38c0:	e5dc      	b.n	347c <__aeabi_dadd+0x188>
    38c2:	4327      	orrs	r7, r4
    38c4:	1e7c      	subs	r4, r7, #1
    38c6:	41a7      	sbcs	r7, r4
    38c8:	2400      	movs	r4, #0
    38ca:	e779      	b.n	37c0 <__aeabi_dadd+0x4cc>
    38cc:	000c      	movs	r4, r1
    38ce:	0017      	movs	r7, r2
    38d0:	4e0e      	ldr	r6, [pc, #56]	; (390c <__aeabi_dadd+0x618>)
    38d2:	e593      	b.n	33fc <__aeabi_dadd+0x108>
    38d4:	000c      	movs	r4, r1
    38d6:	0017      	movs	r7, r2
    38d8:	e590      	b.n	33fc <__aeabi_dadd+0x108>
    38da:	4656      	mov	r6, sl
    38dc:	0023      	movs	r3, r4
    38de:	3e20      	subs	r6, #32
    38e0:	40f3      	lsrs	r3, r6
    38e2:	4699      	mov	r9, r3
    38e4:	4653      	mov	r3, sl
    38e6:	2b20      	cmp	r3, #32
    38e8:	d00e      	beq.n	3908 <__aeabi_dadd+0x614>
    38ea:	2340      	movs	r3, #64	; 0x40
    38ec:	4656      	mov	r6, sl
    38ee:	1b9b      	subs	r3, r3, r6
    38f0:	409c      	lsls	r4, r3
    38f2:	4327      	orrs	r7, r4
    38f4:	1e7c      	subs	r4, r7, #1
    38f6:	41a7      	sbcs	r7, r4
    38f8:	464b      	mov	r3, r9
    38fa:	2400      	movs	r4, #0
    38fc:	431f      	orrs	r7, r3
    38fe:	e75f      	b.n	37c0 <__aeabi_dadd+0x4cc>
    3900:	2400      	movs	r4, #0
    3902:	e7d2      	b.n	38aa <__aeabi_dadd+0x5b6>
    3904:	0017      	movs	r7, r2
    3906:	e5b2      	b.n	346e <__aeabi_dadd+0x17a>
    3908:	2400      	movs	r4, #0
    390a:	e7f2      	b.n	38f2 <__aeabi_dadd+0x5fe>
    390c:	000007ff 	.word	0x000007ff
    3910:	ff7fffff 	.word	0xff7fffff

00003914 <__aeabi_ddiv>:
    3914:	b5f0      	push	{r4, r5, r6, r7, lr}
    3916:	4657      	mov	r7, sl
    3918:	4645      	mov	r5, r8
    391a:	46de      	mov	lr, fp
    391c:	464e      	mov	r6, r9
    391e:	b5e0      	push	{r5, r6, r7, lr}
    3920:	004c      	lsls	r4, r1, #1
    3922:	030e      	lsls	r6, r1, #12
    3924:	b087      	sub	sp, #28
    3926:	4683      	mov	fp, r0
    3928:	4692      	mov	sl, r2
    392a:	001d      	movs	r5, r3
    392c:	4680      	mov	r8, r0
    392e:	0b36      	lsrs	r6, r6, #12
    3930:	0d64      	lsrs	r4, r4, #21
    3932:	0fcf      	lsrs	r7, r1, #31
    3934:	2c00      	cmp	r4, #0
    3936:	d04f      	beq.n	39d8 <__aeabi_ddiv+0xc4>
    3938:	4b6f      	ldr	r3, [pc, #444]	; (3af8 <__aeabi_ddiv+0x1e4>)
    393a:	429c      	cmp	r4, r3
    393c:	d035      	beq.n	39aa <__aeabi_ddiv+0x96>
    393e:	2380      	movs	r3, #128	; 0x80
    3940:	0f42      	lsrs	r2, r0, #29
    3942:	041b      	lsls	r3, r3, #16
    3944:	00f6      	lsls	r6, r6, #3
    3946:	4313      	orrs	r3, r2
    3948:	4333      	orrs	r3, r6
    394a:	4699      	mov	r9, r3
    394c:	00c3      	lsls	r3, r0, #3
    394e:	4698      	mov	r8, r3
    3950:	4b6a      	ldr	r3, [pc, #424]	; (3afc <__aeabi_ddiv+0x1e8>)
    3952:	2600      	movs	r6, #0
    3954:	469c      	mov	ip, r3
    3956:	2300      	movs	r3, #0
    3958:	4464      	add	r4, ip
    395a:	9303      	str	r3, [sp, #12]
    395c:	032b      	lsls	r3, r5, #12
    395e:	0b1b      	lsrs	r3, r3, #12
    3960:	469b      	mov	fp, r3
    3962:	006b      	lsls	r3, r5, #1
    3964:	0fed      	lsrs	r5, r5, #31
    3966:	4650      	mov	r0, sl
    3968:	0d5b      	lsrs	r3, r3, #21
    396a:	9501      	str	r5, [sp, #4]
    396c:	d05e      	beq.n	3a2c <__aeabi_ddiv+0x118>
    396e:	4a62      	ldr	r2, [pc, #392]	; (3af8 <__aeabi_ddiv+0x1e4>)
    3970:	4293      	cmp	r3, r2
    3972:	d053      	beq.n	3a1c <__aeabi_ddiv+0x108>
    3974:	465a      	mov	r2, fp
    3976:	00d1      	lsls	r1, r2, #3
    3978:	2280      	movs	r2, #128	; 0x80
    397a:	0f40      	lsrs	r0, r0, #29
    397c:	0412      	lsls	r2, r2, #16
    397e:	4302      	orrs	r2, r0
    3980:	430a      	orrs	r2, r1
    3982:	4693      	mov	fp, r2
    3984:	4652      	mov	r2, sl
    3986:	00d1      	lsls	r1, r2, #3
    3988:	4a5c      	ldr	r2, [pc, #368]	; (3afc <__aeabi_ddiv+0x1e8>)
    398a:	4694      	mov	ip, r2
    398c:	2200      	movs	r2, #0
    398e:	4463      	add	r3, ip
    3990:	0038      	movs	r0, r7
    3992:	4068      	eors	r0, r5
    3994:	4684      	mov	ip, r0
    3996:	9002      	str	r0, [sp, #8]
    3998:	1ae4      	subs	r4, r4, r3
    399a:	4316      	orrs	r6, r2
    399c:	2e0f      	cmp	r6, #15
    399e:	d900      	bls.n	39a2 <__aeabi_ddiv+0x8e>
    39a0:	e0b4      	b.n	3b0c <__aeabi_ddiv+0x1f8>
    39a2:	4b57      	ldr	r3, [pc, #348]	; (3b00 <__aeabi_ddiv+0x1ec>)
    39a4:	00b6      	lsls	r6, r6, #2
    39a6:	599b      	ldr	r3, [r3, r6]
    39a8:	469f      	mov	pc, r3
    39aa:	0003      	movs	r3, r0
    39ac:	4333      	orrs	r3, r6
    39ae:	4699      	mov	r9, r3
    39b0:	d16c      	bne.n	3a8c <__aeabi_ddiv+0x178>
    39b2:	2300      	movs	r3, #0
    39b4:	4698      	mov	r8, r3
    39b6:	3302      	adds	r3, #2
    39b8:	2608      	movs	r6, #8
    39ba:	9303      	str	r3, [sp, #12]
    39bc:	e7ce      	b.n	395c <__aeabi_ddiv+0x48>
    39be:	46cb      	mov	fp, r9
    39c0:	4641      	mov	r1, r8
    39c2:	9a03      	ldr	r2, [sp, #12]
    39c4:	9701      	str	r7, [sp, #4]
    39c6:	2a02      	cmp	r2, #2
    39c8:	d165      	bne.n	3a96 <__aeabi_ddiv+0x182>
    39ca:	9b01      	ldr	r3, [sp, #4]
    39cc:	4c4a      	ldr	r4, [pc, #296]	; (3af8 <__aeabi_ddiv+0x1e4>)
    39ce:	469c      	mov	ip, r3
    39d0:	2300      	movs	r3, #0
    39d2:	2200      	movs	r2, #0
    39d4:	4698      	mov	r8, r3
    39d6:	e06b      	b.n	3ab0 <__aeabi_ddiv+0x19c>
    39d8:	0003      	movs	r3, r0
    39da:	4333      	orrs	r3, r6
    39dc:	4699      	mov	r9, r3
    39de:	d04e      	beq.n	3a7e <__aeabi_ddiv+0x16a>
    39e0:	2e00      	cmp	r6, #0
    39e2:	d100      	bne.n	39e6 <__aeabi_ddiv+0xd2>
    39e4:	e1bc      	b.n	3d60 <__aeabi_ddiv+0x44c>
    39e6:	0030      	movs	r0, r6
    39e8:	f001 f8ca 	bl	4b80 <__clzsi2>
    39ec:	0003      	movs	r3, r0
    39ee:	3b0b      	subs	r3, #11
    39f0:	2b1c      	cmp	r3, #28
    39f2:	dd00      	ble.n	39f6 <__aeabi_ddiv+0xe2>
    39f4:	e1ac      	b.n	3d50 <__aeabi_ddiv+0x43c>
    39f6:	221d      	movs	r2, #29
    39f8:	1ad3      	subs	r3, r2, r3
    39fa:	465a      	mov	r2, fp
    39fc:	0001      	movs	r1, r0
    39fe:	40da      	lsrs	r2, r3
    3a00:	3908      	subs	r1, #8
    3a02:	408e      	lsls	r6, r1
    3a04:	0013      	movs	r3, r2
    3a06:	4333      	orrs	r3, r6
    3a08:	4699      	mov	r9, r3
    3a0a:	465b      	mov	r3, fp
    3a0c:	408b      	lsls	r3, r1
    3a0e:	4698      	mov	r8, r3
    3a10:	2300      	movs	r3, #0
    3a12:	4c3c      	ldr	r4, [pc, #240]	; (3b04 <__aeabi_ddiv+0x1f0>)
    3a14:	2600      	movs	r6, #0
    3a16:	1a24      	subs	r4, r4, r0
    3a18:	9303      	str	r3, [sp, #12]
    3a1a:	e79f      	b.n	395c <__aeabi_ddiv+0x48>
    3a1c:	4651      	mov	r1, sl
    3a1e:	465a      	mov	r2, fp
    3a20:	4311      	orrs	r1, r2
    3a22:	d129      	bne.n	3a78 <__aeabi_ddiv+0x164>
    3a24:	2200      	movs	r2, #0
    3a26:	4693      	mov	fp, r2
    3a28:	3202      	adds	r2, #2
    3a2a:	e7b1      	b.n	3990 <__aeabi_ddiv+0x7c>
    3a2c:	4659      	mov	r1, fp
    3a2e:	4301      	orrs	r1, r0
    3a30:	d01e      	beq.n	3a70 <__aeabi_ddiv+0x15c>
    3a32:	465b      	mov	r3, fp
    3a34:	2b00      	cmp	r3, #0
    3a36:	d100      	bne.n	3a3a <__aeabi_ddiv+0x126>
    3a38:	e19e      	b.n	3d78 <__aeabi_ddiv+0x464>
    3a3a:	4658      	mov	r0, fp
    3a3c:	f001 f8a0 	bl	4b80 <__clzsi2>
    3a40:	0003      	movs	r3, r0
    3a42:	3b0b      	subs	r3, #11
    3a44:	2b1c      	cmp	r3, #28
    3a46:	dd00      	ble.n	3a4a <__aeabi_ddiv+0x136>
    3a48:	e18f      	b.n	3d6a <__aeabi_ddiv+0x456>
    3a4a:	0002      	movs	r2, r0
    3a4c:	4659      	mov	r1, fp
    3a4e:	3a08      	subs	r2, #8
    3a50:	4091      	lsls	r1, r2
    3a52:	468b      	mov	fp, r1
    3a54:	211d      	movs	r1, #29
    3a56:	1acb      	subs	r3, r1, r3
    3a58:	4651      	mov	r1, sl
    3a5a:	40d9      	lsrs	r1, r3
    3a5c:	000b      	movs	r3, r1
    3a5e:	4659      	mov	r1, fp
    3a60:	430b      	orrs	r3, r1
    3a62:	4651      	mov	r1, sl
    3a64:	469b      	mov	fp, r3
    3a66:	4091      	lsls	r1, r2
    3a68:	4b26      	ldr	r3, [pc, #152]	; (3b04 <__aeabi_ddiv+0x1f0>)
    3a6a:	2200      	movs	r2, #0
    3a6c:	1a1b      	subs	r3, r3, r0
    3a6e:	e78f      	b.n	3990 <__aeabi_ddiv+0x7c>
    3a70:	2300      	movs	r3, #0
    3a72:	2201      	movs	r2, #1
    3a74:	469b      	mov	fp, r3
    3a76:	e78b      	b.n	3990 <__aeabi_ddiv+0x7c>
    3a78:	4651      	mov	r1, sl
    3a7a:	2203      	movs	r2, #3
    3a7c:	e788      	b.n	3990 <__aeabi_ddiv+0x7c>
    3a7e:	2300      	movs	r3, #0
    3a80:	4698      	mov	r8, r3
    3a82:	3301      	adds	r3, #1
    3a84:	2604      	movs	r6, #4
    3a86:	2400      	movs	r4, #0
    3a88:	9303      	str	r3, [sp, #12]
    3a8a:	e767      	b.n	395c <__aeabi_ddiv+0x48>
    3a8c:	2303      	movs	r3, #3
    3a8e:	46b1      	mov	r9, r6
    3a90:	9303      	str	r3, [sp, #12]
    3a92:	260c      	movs	r6, #12
    3a94:	e762      	b.n	395c <__aeabi_ddiv+0x48>
    3a96:	2a03      	cmp	r2, #3
    3a98:	d100      	bne.n	3a9c <__aeabi_ddiv+0x188>
    3a9a:	e25c      	b.n	3f56 <__aeabi_ddiv+0x642>
    3a9c:	9b01      	ldr	r3, [sp, #4]
    3a9e:	2a01      	cmp	r2, #1
    3aa0:	d000      	beq.n	3aa4 <__aeabi_ddiv+0x190>
    3aa2:	e1e4      	b.n	3e6e <__aeabi_ddiv+0x55a>
    3aa4:	4013      	ands	r3, r2
    3aa6:	469c      	mov	ip, r3
    3aa8:	2300      	movs	r3, #0
    3aaa:	2400      	movs	r4, #0
    3aac:	2200      	movs	r2, #0
    3aae:	4698      	mov	r8, r3
    3ab0:	2100      	movs	r1, #0
    3ab2:	0312      	lsls	r2, r2, #12
    3ab4:	0b13      	lsrs	r3, r2, #12
    3ab6:	0d0a      	lsrs	r2, r1, #20
    3ab8:	0512      	lsls	r2, r2, #20
    3aba:	431a      	orrs	r2, r3
    3abc:	0523      	lsls	r3, r4, #20
    3abe:	4c12      	ldr	r4, [pc, #72]	; (3b08 <__aeabi_ddiv+0x1f4>)
    3ac0:	4640      	mov	r0, r8
    3ac2:	4022      	ands	r2, r4
    3ac4:	4313      	orrs	r3, r2
    3ac6:	4662      	mov	r2, ip
    3ac8:	005b      	lsls	r3, r3, #1
    3aca:	07d2      	lsls	r2, r2, #31
    3acc:	085b      	lsrs	r3, r3, #1
    3ace:	4313      	orrs	r3, r2
    3ad0:	0019      	movs	r1, r3
    3ad2:	b007      	add	sp, #28
    3ad4:	bc3c      	pop	{r2, r3, r4, r5}
    3ad6:	4690      	mov	r8, r2
    3ad8:	4699      	mov	r9, r3
    3ada:	46a2      	mov	sl, r4
    3adc:	46ab      	mov	fp, r5
    3ade:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3ae0:	2300      	movs	r3, #0
    3ae2:	2280      	movs	r2, #128	; 0x80
    3ae4:	469c      	mov	ip, r3
    3ae6:	0312      	lsls	r2, r2, #12
    3ae8:	4698      	mov	r8, r3
    3aea:	4c03      	ldr	r4, [pc, #12]	; (3af8 <__aeabi_ddiv+0x1e4>)
    3aec:	e7e0      	b.n	3ab0 <__aeabi_ddiv+0x19c>
    3aee:	2300      	movs	r3, #0
    3af0:	4c01      	ldr	r4, [pc, #4]	; (3af8 <__aeabi_ddiv+0x1e4>)
    3af2:	2200      	movs	r2, #0
    3af4:	4698      	mov	r8, r3
    3af6:	e7db      	b.n	3ab0 <__aeabi_ddiv+0x19c>
    3af8:	000007ff 	.word	0x000007ff
    3afc:	fffffc01 	.word	0xfffffc01
    3b00:	00004c94 	.word	0x00004c94
    3b04:	fffffc0d 	.word	0xfffffc0d
    3b08:	800fffff 	.word	0x800fffff
    3b0c:	45d9      	cmp	r9, fp
    3b0e:	d900      	bls.n	3b12 <__aeabi_ddiv+0x1fe>
    3b10:	e139      	b.n	3d86 <__aeabi_ddiv+0x472>
    3b12:	d100      	bne.n	3b16 <__aeabi_ddiv+0x202>
    3b14:	e134      	b.n	3d80 <__aeabi_ddiv+0x46c>
    3b16:	2300      	movs	r3, #0
    3b18:	4646      	mov	r6, r8
    3b1a:	464d      	mov	r5, r9
    3b1c:	469a      	mov	sl, r3
    3b1e:	3c01      	subs	r4, #1
    3b20:	465b      	mov	r3, fp
    3b22:	0e0a      	lsrs	r2, r1, #24
    3b24:	021b      	lsls	r3, r3, #8
    3b26:	431a      	orrs	r2, r3
    3b28:	020b      	lsls	r3, r1, #8
    3b2a:	0c17      	lsrs	r7, r2, #16
    3b2c:	9303      	str	r3, [sp, #12]
    3b2e:	0413      	lsls	r3, r2, #16
    3b30:	0c1b      	lsrs	r3, r3, #16
    3b32:	0039      	movs	r1, r7
    3b34:	0028      	movs	r0, r5
    3b36:	4690      	mov	r8, r2
    3b38:	9301      	str	r3, [sp, #4]
    3b3a:	f7ff fb25 	bl	3188 <__udivsi3>
    3b3e:	0002      	movs	r2, r0
    3b40:	9b01      	ldr	r3, [sp, #4]
    3b42:	4683      	mov	fp, r0
    3b44:	435a      	muls	r2, r3
    3b46:	0028      	movs	r0, r5
    3b48:	0039      	movs	r1, r7
    3b4a:	4691      	mov	r9, r2
    3b4c:	f7ff fba2 	bl	3294 <__aeabi_uidivmod>
    3b50:	0c35      	lsrs	r5, r6, #16
    3b52:	0409      	lsls	r1, r1, #16
    3b54:	430d      	orrs	r5, r1
    3b56:	45a9      	cmp	r9, r5
    3b58:	d90d      	bls.n	3b76 <__aeabi_ddiv+0x262>
    3b5a:	465b      	mov	r3, fp
    3b5c:	4445      	add	r5, r8
    3b5e:	3b01      	subs	r3, #1
    3b60:	45a8      	cmp	r8, r5
    3b62:	d900      	bls.n	3b66 <__aeabi_ddiv+0x252>
    3b64:	e13a      	b.n	3ddc <__aeabi_ddiv+0x4c8>
    3b66:	45a9      	cmp	r9, r5
    3b68:	d800      	bhi.n	3b6c <__aeabi_ddiv+0x258>
    3b6a:	e137      	b.n	3ddc <__aeabi_ddiv+0x4c8>
    3b6c:	2302      	movs	r3, #2
    3b6e:	425b      	negs	r3, r3
    3b70:	469c      	mov	ip, r3
    3b72:	4445      	add	r5, r8
    3b74:	44e3      	add	fp, ip
    3b76:	464b      	mov	r3, r9
    3b78:	1aeb      	subs	r3, r5, r3
    3b7a:	0039      	movs	r1, r7
    3b7c:	0018      	movs	r0, r3
    3b7e:	9304      	str	r3, [sp, #16]
    3b80:	f7ff fb02 	bl	3188 <__udivsi3>
    3b84:	9b01      	ldr	r3, [sp, #4]
    3b86:	0005      	movs	r5, r0
    3b88:	4343      	muls	r3, r0
    3b8a:	0039      	movs	r1, r7
    3b8c:	9804      	ldr	r0, [sp, #16]
    3b8e:	4699      	mov	r9, r3
    3b90:	f7ff fb80 	bl	3294 <__aeabi_uidivmod>
    3b94:	0433      	lsls	r3, r6, #16
    3b96:	0409      	lsls	r1, r1, #16
    3b98:	0c1b      	lsrs	r3, r3, #16
    3b9a:	430b      	orrs	r3, r1
    3b9c:	4599      	cmp	r9, r3
    3b9e:	d909      	bls.n	3bb4 <__aeabi_ddiv+0x2a0>
    3ba0:	4443      	add	r3, r8
    3ba2:	1e6a      	subs	r2, r5, #1
    3ba4:	4598      	cmp	r8, r3
    3ba6:	d900      	bls.n	3baa <__aeabi_ddiv+0x296>
    3ba8:	e11a      	b.n	3de0 <__aeabi_ddiv+0x4cc>
    3baa:	4599      	cmp	r9, r3
    3bac:	d800      	bhi.n	3bb0 <__aeabi_ddiv+0x29c>
    3bae:	e117      	b.n	3de0 <__aeabi_ddiv+0x4cc>
    3bb0:	3d02      	subs	r5, #2
    3bb2:	4443      	add	r3, r8
    3bb4:	464a      	mov	r2, r9
    3bb6:	1a9b      	subs	r3, r3, r2
    3bb8:	465a      	mov	r2, fp
    3bba:	0412      	lsls	r2, r2, #16
    3bbc:	432a      	orrs	r2, r5
    3bbe:	9903      	ldr	r1, [sp, #12]
    3bc0:	4693      	mov	fp, r2
    3bc2:	0c10      	lsrs	r0, r2, #16
    3bc4:	0c0a      	lsrs	r2, r1, #16
    3bc6:	4691      	mov	r9, r2
    3bc8:	0409      	lsls	r1, r1, #16
    3bca:	465a      	mov	r2, fp
    3bcc:	0c09      	lsrs	r1, r1, #16
    3bce:	464e      	mov	r6, r9
    3bd0:	000d      	movs	r5, r1
    3bd2:	0412      	lsls	r2, r2, #16
    3bd4:	0c12      	lsrs	r2, r2, #16
    3bd6:	4345      	muls	r5, r0
    3bd8:	9105      	str	r1, [sp, #20]
    3bda:	4351      	muls	r1, r2
    3bdc:	4372      	muls	r2, r6
    3bde:	4370      	muls	r0, r6
    3be0:	1952      	adds	r2, r2, r5
    3be2:	0c0e      	lsrs	r6, r1, #16
    3be4:	18b2      	adds	r2, r6, r2
    3be6:	4295      	cmp	r5, r2
    3be8:	d903      	bls.n	3bf2 <__aeabi_ddiv+0x2de>
    3bea:	2580      	movs	r5, #128	; 0x80
    3bec:	026d      	lsls	r5, r5, #9
    3bee:	46ac      	mov	ip, r5
    3bf0:	4460      	add	r0, ip
    3bf2:	0c15      	lsrs	r5, r2, #16
    3bf4:	0409      	lsls	r1, r1, #16
    3bf6:	0412      	lsls	r2, r2, #16
    3bf8:	0c09      	lsrs	r1, r1, #16
    3bfa:	1828      	adds	r0, r5, r0
    3bfc:	1852      	adds	r2, r2, r1
    3bfe:	4283      	cmp	r3, r0
    3c00:	d200      	bcs.n	3c04 <__aeabi_ddiv+0x2f0>
    3c02:	e0ce      	b.n	3da2 <__aeabi_ddiv+0x48e>
    3c04:	d100      	bne.n	3c08 <__aeabi_ddiv+0x2f4>
    3c06:	e0c8      	b.n	3d9a <__aeabi_ddiv+0x486>
    3c08:	1a1d      	subs	r5, r3, r0
    3c0a:	4653      	mov	r3, sl
    3c0c:	1a9e      	subs	r6, r3, r2
    3c0e:	45b2      	cmp	sl, r6
    3c10:	4192      	sbcs	r2, r2
    3c12:	4252      	negs	r2, r2
    3c14:	1aab      	subs	r3, r5, r2
    3c16:	469a      	mov	sl, r3
    3c18:	4598      	cmp	r8, r3
    3c1a:	d100      	bne.n	3c1e <__aeabi_ddiv+0x30a>
    3c1c:	e117      	b.n	3e4e <__aeabi_ddiv+0x53a>
    3c1e:	0039      	movs	r1, r7
    3c20:	0018      	movs	r0, r3
    3c22:	f7ff fab1 	bl	3188 <__udivsi3>
    3c26:	9b01      	ldr	r3, [sp, #4]
    3c28:	0005      	movs	r5, r0
    3c2a:	4343      	muls	r3, r0
    3c2c:	0039      	movs	r1, r7
    3c2e:	4650      	mov	r0, sl
    3c30:	9304      	str	r3, [sp, #16]
    3c32:	f7ff fb2f 	bl	3294 <__aeabi_uidivmod>
    3c36:	9804      	ldr	r0, [sp, #16]
    3c38:	040b      	lsls	r3, r1, #16
    3c3a:	0c31      	lsrs	r1, r6, #16
    3c3c:	4319      	orrs	r1, r3
    3c3e:	4288      	cmp	r0, r1
    3c40:	d909      	bls.n	3c56 <__aeabi_ddiv+0x342>
    3c42:	4441      	add	r1, r8
    3c44:	1e6b      	subs	r3, r5, #1
    3c46:	4588      	cmp	r8, r1
    3c48:	d900      	bls.n	3c4c <__aeabi_ddiv+0x338>
    3c4a:	e107      	b.n	3e5c <__aeabi_ddiv+0x548>
    3c4c:	4288      	cmp	r0, r1
    3c4e:	d800      	bhi.n	3c52 <__aeabi_ddiv+0x33e>
    3c50:	e104      	b.n	3e5c <__aeabi_ddiv+0x548>
    3c52:	3d02      	subs	r5, #2
    3c54:	4441      	add	r1, r8
    3c56:	9b04      	ldr	r3, [sp, #16]
    3c58:	1acb      	subs	r3, r1, r3
    3c5a:	0018      	movs	r0, r3
    3c5c:	0039      	movs	r1, r7
    3c5e:	9304      	str	r3, [sp, #16]
    3c60:	f7ff fa92 	bl	3188 <__udivsi3>
    3c64:	9b01      	ldr	r3, [sp, #4]
    3c66:	4682      	mov	sl, r0
    3c68:	4343      	muls	r3, r0
    3c6a:	0039      	movs	r1, r7
    3c6c:	9804      	ldr	r0, [sp, #16]
    3c6e:	9301      	str	r3, [sp, #4]
    3c70:	f7ff fb10 	bl	3294 <__aeabi_uidivmod>
    3c74:	9801      	ldr	r0, [sp, #4]
    3c76:	040b      	lsls	r3, r1, #16
    3c78:	0431      	lsls	r1, r6, #16
    3c7a:	0c09      	lsrs	r1, r1, #16
    3c7c:	4319      	orrs	r1, r3
    3c7e:	4288      	cmp	r0, r1
    3c80:	d90d      	bls.n	3c9e <__aeabi_ddiv+0x38a>
    3c82:	4653      	mov	r3, sl
    3c84:	4441      	add	r1, r8
    3c86:	3b01      	subs	r3, #1
    3c88:	4588      	cmp	r8, r1
    3c8a:	d900      	bls.n	3c8e <__aeabi_ddiv+0x37a>
    3c8c:	e0e8      	b.n	3e60 <__aeabi_ddiv+0x54c>
    3c8e:	4288      	cmp	r0, r1
    3c90:	d800      	bhi.n	3c94 <__aeabi_ddiv+0x380>
    3c92:	e0e5      	b.n	3e60 <__aeabi_ddiv+0x54c>
    3c94:	2302      	movs	r3, #2
    3c96:	425b      	negs	r3, r3
    3c98:	469c      	mov	ip, r3
    3c9a:	4441      	add	r1, r8
    3c9c:	44e2      	add	sl, ip
    3c9e:	9b01      	ldr	r3, [sp, #4]
    3ca0:	042d      	lsls	r5, r5, #16
    3ca2:	1ace      	subs	r6, r1, r3
    3ca4:	4651      	mov	r1, sl
    3ca6:	4329      	orrs	r1, r5
    3ca8:	9d05      	ldr	r5, [sp, #20]
    3caa:	464f      	mov	r7, r9
    3cac:	002a      	movs	r2, r5
    3cae:	040b      	lsls	r3, r1, #16
    3cb0:	0c08      	lsrs	r0, r1, #16
    3cb2:	0c1b      	lsrs	r3, r3, #16
    3cb4:	435a      	muls	r2, r3
    3cb6:	4345      	muls	r5, r0
    3cb8:	437b      	muls	r3, r7
    3cba:	4378      	muls	r0, r7
    3cbc:	195b      	adds	r3, r3, r5
    3cbe:	0c17      	lsrs	r7, r2, #16
    3cc0:	18fb      	adds	r3, r7, r3
    3cc2:	429d      	cmp	r5, r3
    3cc4:	d903      	bls.n	3cce <__aeabi_ddiv+0x3ba>
    3cc6:	2580      	movs	r5, #128	; 0x80
    3cc8:	026d      	lsls	r5, r5, #9
    3cca:	46ac      	mov	ip, r5
    3ccc:	4460      	add	r0, ip
    3cce:	0c1d      	lsrs	r5, r3, #16
    3cd0:	0412      	lsls	r2, r2, #16
    3cd2:	041b      	lsls	r3, r3, #16
    3cd4:	0c12      	lsrs	r2, r2, #16
    3cd6:	1828      	adds	r0, r5, r0
    3cd8:	189b      	adds	r3, r3, r2
    3cda:	4286      	cmp	r6, r0
    3cdc:	d200      	bcs.n	3ce0 <__aeabi_ddiv+0x3cc>
    3cde:	e093      	b.n	3e08 <__aeabi_ddiv+0x4f4>
    3ce0:	d100      	bne.n	3ce4 <__aeabi_ddiv+0x3d0>
    3ce2:	e08e      	b.n	3e02 <__aeabi_ddiv+0x4ee>
    3ce4:	2301      	movs	r3, #1
    3ce6:	4319      	orrs	r1, r3
    3ce8:	4ba0      	ldr	r3, [pc, #640]	; (3f6c <__aeabi_ddiv+0x658>)
    3cea:	18e3      	adds	r3, r4, r3
    3cec:	2b00      	cmp	r3, #0
    3cee:	dc00      	bgt.n	3cf2 <__aeabi_ddiv+0x3de>
    3cf0:	e099      	b.n	3e26 <__aeabi_ddiv+0x512>
    3cf2:	074a      	lsls	r2, r1, #29
    3cf4:	d000      	beq.n	3cf8 <__aeabi_ddiv+0x3e4>
    3cf6:	e09e      	b.n	3e36 <__aeabi_ddiv+0x522>
    3cf8:	465a      	mov	r2, fp
    3cfa:	01d2      	lsls	r2, r2, #7
    3cfc:	d506      	bpl.n	3d0c <__aeabi_ddiv+0x3f8>
    3cfe:	465a      	mov	r2, fp
    3d00:	4b9b      	ldr	r3, [pc, #620]	; (3f70 <__aeabi_ddiv+0x65c>)
    3d02:	401a      	ands	r2, r3
    3d04:	2380      	movs	r3, #128	; 0x80
    3d06:	4693      	mov	fp, r2
    3d08:	00db      	lsls	r3, r3, #3
    3d0a:	18e3      	adds	r3, r4, r3
    3d0c:	4a99      	ldr	r2, [pc, #612]	; (3f74 <__aeabi_ddiv+0x660>)
    3d0e:	4293      	cmp	r3, r2
    3d10:	dd68      	ble.n	3de4 <__aeabi_ddiv+0x4d0>
    3d12:	2301      	movs	r3, #1
    3d14:	9a02      	ldr	r2, [sp, #8]
    3d16:	4c98      	ldr	r4, [pc, #608]	; (3f78 <__aeabi_ddiv+0x664>)
    3d18:	401a      	ands	r2, r3
    3d1a:	2300      	movs	r3, #0
    3d1c:	4694      	mov	ip, r2
    3d1e:	4698      	mov	r8, r3
    3d20:	2200      	movs	r2, #0
    3d22:	e6c5      	b.n	3ab0 <__aeabi_ddiv+0x19c>
    3d24:	2280      	movs	r2, #128	; 0x80
    3d26:	464b      	mov	r3, r9
    3d28:	0312      	lsls	r2, r2, #12
    3d2a:	4213      	tst	r3, r2
    3d2c:	d00a      	beq.n	3d44 <__aeabi_ddiv+0x430>
    3d2e:	465b      	mov	r3, fp
    3d30:	4213      	tst	r3, r2
    3d32:	d106      	bne.n	3d42 <__aeabi_ddiv+0x42e>
    3d34:	431a      	orrs	r2, r3
    3d36:	0312      	lsls	r2, r2, #12
    3d38:	0b12      	lsrs	r2, r2, #12
    3d3a:	46ac      	mov	ip, r5
    3d3c:	4688      	mov	r8, r1
    3d3e:	4c8e      	ldr	r4, [pc, #568]	; (3f78 <__aeabi_ddiv+0x664>)
    3d40:	e6b6      	b.n	3ab0 <__aeabi_ddiv+0x19c>
    3d42:	464b      	mov	r3, r9
    3d44:	431a      	orrs	r2, r3
    3d46:	0312      	lsls	r2, r2, #12
    3d48:	0b12      	lsrs	r2, r2, #12
    3d4a:	46bc      	mov	ip, r7
    3d4c:	4c8a      	ldr	r4, [pc, #552]	; (3f78 <__aeabi_ddiv+0x664>)
    3d4e:	e6af      	b.n	3ab0 <__aeabi_ddiv+0x19c>
    3d50:	0003      	movs	r3, r0
    3d52:	465a      	mov	r2, fp
    3d54:	3b28      	subs	r3, #40	; 0x28
    3d56:	409a      	lsls	r2, r3
    3d58:	2300      	movs	r3, #0
    3d5a:	4691      	mov	r9, r2
    3d5c:	4698      	mov	r8, r3
    3d5e:	e657      	b.n	3a10 <__aeabi_ddiv+0xfc>
    3d60:	4658      	mov	r0, fp
    3d62:	f000 ff0d 	bl	4b80 <__clzsi2>
    3d66:	3020      	adds	r0, #32
    3d68:	e640      	b.n	39ec <__aeabi_ddiv+0xd8>
    3d6a:	0003      	movs	r3, r0
    3d6c:	4652      	mov	r2, sl
    3d6e:	3b28      	subs	r3, #40	; 0x28
    3d70:	409a      	lsls	r2, r3
    3d72:	2100      	movs	r1, #0
    3d74:	4693      	mov	fp, r2
    3d76:	e677      	b.n	3a68 <__aeabi_ddiv+0x154>
    3d78:	f000 ff02 	bl	4b80 <__clzsi2>
    3d7c:	3020      	adds	r0, #32
    3d7e:	e65f      	b.n	3a40 <__aeabi_ddiv+0x12c>
    3d80:	4588      	cmp	r8, r1
    3d82:	d200      	bcs.n	3d86 <__aeabi_ddiv+0x472>
    3d84:	e6c7      	b.n	3b16 <__aeabi_ddiv+0x202>
    3d86:	464b      	mov	r3, r9
    3d88:	07de      	lsls	r6, r3, #31
    3d8a:	085d      	lsrs	r5, r3, #1
    3d8c:	4643      	mov	r3, r8
    3d8e:	085b      	lsrs	r3, r3, #1
    3d90:	431e      	orrs	r6, r3
    3d92:	4643      	mov	r3, r8
    3d94:	07db      	lsls	r3, r3, #31
    3d96:	469a      	mov	sl, r3
    3d98:	e6c2      	b.n	3b20 <__aeabi_ddiv+0x20c>
    3d9a:	2500      	movs	r5, #0
    3d9c:	4592      	cmp	sl, r2
    3d9e:	d300      	bcc.n	3da2 <__aeabi_ddiv+0x48e>
    3da0:	e733      	b.n	3c0a <__aeabi_ddiv+0x2f6>
    3da2:	9e03      	ldr	r6, [sp, #12]
    3da4:	4659      	mov	r1, fp
    3da6:	46b4      	mov	ip, r6
    3da8:	44e2      	add	sl, ip
    3daa:	45b2      	cmp	sl, r6
    3dac:	41ad      	sbcs	r5, r5
    3dae:	426d      	negs	r5, r5
    3db0:	4445      	add	r5, r8
    3db2:	18eb      	adds	r3, r5, r3
    3db4:	3901      	subs	r1, #1
    3db6:	4598      	cmp	r8, r3
    3db8:	d207      	bcs.n	3dca <__aeabi_ddiv+0x4b6>
    3dba:	4298      	cmp	r0, r3
    3dbc:	d900      	bls.n	3dc0 <__aeabi_ddiv+0x4ac>
    3dbe:	e07f      	b.n	3ec0 <__aeabi_ddiv+0x5ac>
    3dc0:	d100      	bne.n	3dc4 <__aeabi_ddiv+0x4b0>
    3dc2:	e0bc      	b.n	3f3e <__aeabi_ddiv+0x62a>
    3dc4:	1a1d      	subs	r5, r3, r0
    3dc6:	468b      	mov	fp, r1
    3dc8:	e71f      	b.n	3c0a <__aeabi_ddiv+0x2f6>
    3dca:	4598      	cmp	r8, r3
    3dcc:	d1fa      	bne.n	3dc4 <__aeabi_ddiv+0x4b0>
    3dce:	9d03      	ldr	r5, [sp, #12]
    3dd0:	4555      	cmp	r5, sl
    3dd2:	d9f2      	bls.n	3dba <__aeabi_ddiv+0x4a6>
    3dd4:	4643      	mov	r3, r8
    3dd6:	468b      	mov	fp, r1
    3dd8:	1a1d      	subs	r5, r3, r0
    3dda:	e716      	b.n	3c0a <__aeabi_ddiv+0x2f6>
    3ddc:	469b      	mov	fp, r3
    3dde:	e6ca      	b.n	3b76 <__aeabi_ddiv+0x262>
    3de0:	0015      	movs	r5, r2
    3de2:	e6e7      	b.n	3bb4 <__aeabi_ddiv+0x2a0>
    3de4:	465a      	mov	r2, fp
    3de6:	08c9      	lsrs	r1, r1, #3
    3de8:	0752      	lsls	r2, r2, #29
    3dea:	430a      	orrs	r2, r1
    3dec:	055b      	lsls	r3, r3, #21
    3dee:	4690      	mov	r8, r2
    3df0:	0d5c      	lsrs	r4, r3, #21
    3df2:	465a      	mov	r2, fp
    3df4:	2301      	movs	r3, #1
    3df6:	9902      	ldr	r1, [sp, #8]
    3df8:	0252      	lsls	r2, r2, #9
    3dfa:	4019      	ands	r1, r3
    3dfc:	0b12      	lsrs	r2, r2, #12
    3dfe:	468c      	mov	ip, r1
    3e00:	e656      	b.n	3ab0 <__aeabi_ddiv+0x19c>
    3e02:	2b00      	cmp	r3, #0
    3e04:	d100      	bne.n	3e08 <__aeabi_ddiv+0x4f4>
    3e06:	e76f      	b.n	3ce8 <__aeabi_ddiv+0x3d4>
    3e08:	4446      	add	r6, r8
    3e0a:	1e4a      	subs	r2, r1, #1
    3e0c:	45b0      	cmp	r8, r6
    3e0e:	d929      	bls.n	3e64 <__aeabi_ddiv+0x550>
    3e10:	0011      	movs	r1, r2
    3e12:	4286      	cmp	r6, r0
    3e14:	d000      	beq.n	3e18 <__aeabi_ddiv+0x504>
    3e16:	e765      	b.n	3ce4 <__aeabi_ddiv+0x3d0>
    3e18:	9a03      	ldr	r2, [sp, #12]
    3e1a:	4293      	cmp	r3, r2
    3e1c:	d000      	beq.n	3e20 <__aeabi_ddiv+0x50c>
    3e1e:	e761      	b.n	3ce4 <__aeabi_ddiv+0x3d0>
    3e20:	e762      	b.n	3ce8 <__aeabi_ddiv+0x3d4>
    3e22:	2101      	movs	r1, #1
    3e24:	4249      	negs	r1, r1
    3e26:	2001      	movs	r0, #1
    3e28:	1ac2      	subs	r2, r0, r3
    3e2a:	2a38      	cmp	r2, #56	; 0x38
    3e2c:	dd21      	ble.n	3e72 <__aeabi_ddiv+0x55e>
    3e2e:	9b02      	ldr	r3, [sp, #8]
    3e30:	4003      	ands	r3, r0
    3e32:	469c      	mov	ip, r3
    3e34:	e638      	b.n	3aa8 <__aeabi_ddiv+0x194>
    3e36:	220f      	movs	r2, #15
    3e38:	400a      	ands	r2, r1
    3e3a:	2a04      	cmp	r2, #4
    3e3c:	d100      	bne.n	3e40 <__aeabi_ddiv+0x52c>
    3e3e:	e75b      	b.n	3cf8 <__aeabi_ddiv+0x3e4>
    3e40:	000a      	movs	r2, r1
    3e42:	1d11      	adds	r1, r2, #4
    3e44:	4291      	cmp	r1, r2
    3e46:	4192      	sbcs	r2, r2
    3e48:	4252      	negs	r2, r2
    3e4a:	4493      	add	fp, r2
    3e4c:	e754      	b.n	3cf8 <__aeabi_ddiv+0x3e4>
    3e4e:	4b47      	ldr	r3, [pc, #284]	; (3f6c <__aeabi_ddiv+0x658>)
    3e50:	18e3      	adds	r3, r4, r3
    3e52:	2b00      	cmp	r3, #0
    3e54:	dde5      	ble.n	3e22 <__aeabi_ddiv+0x50e>
    3e56:	2201      	movs	r2, #1
    3e58:	4252      	negs	r2, r2
    3e5a:	e7f2      	b.n	3e42 <__aeabi_ddiv+0x52e>
    3e5c:	001d      	movs	r5, r3
    3e5e:	e6fa      	b.n	3c56 <__aeabi_ddiv+0x342>
    3e60:	469a      	mov	sl, r3
    3e62:	e71c      	b.n	3c9e <__aeabi_ddiv+0x38a>
    3e64:	42b0      	cmp	r0, r6
    3e66:	d839      	bhi.n	3edc <__aeabi_ddiv+0x5c8>
    3e68:	d06e      	beq.n	3f48 <__aeabi_ddiv+0x634>
    3e6a:	0011      	movs	r1, r2
    3e6c:	e73a      	b.n	3ce4 <__aeabi_ddiv+0x3d0>
    3e6e:	9302      	str	r3, [sp, #8]
    3e70:	e73a      	b.n	3ce8 <__aeabi_ddiv+0x3d4>
    3e72:	2a1f      	cmp	r2, #31
    3e74:	dc3c      	bgt.n	3ef0 <__aeabi_ddiv+0x5dc>
    3e76:	2320      	movs	r3, #32
    3e78:	1a9b      	subs	r3, r3, r2
    3e7a:	000c      	movs	r4, r1
    3e7c:	4658      	mov	r0, fp
    3e7e:	4099      	lsls	r1, r3
    3e80:	4098      	lsls	r0, r3
    3e82:	1e4b      	subs	r3, r1, #1
    3e84:	4199      	sbcs	r1, r3
    3e86:	465b      	mov	r3, fp
    3e88:	40d4      	lsrs	r4, r2
    3e8a:	40d3      	lsrs	r3, r2
    3e8c:	4320      	orrs	r0, r4
    3e8e:	4308      	orrs	r0, r1
    3e90:	001a      	movs	r2, r3
    3e92:	0743      	lsls	r3, r0, #29
    3e94:	d009      	beq.n	3eaa <__aeabi_ddiv+0x596>
    3e96:	230f      	movs	r3, #15
    3e98:	4003      	ands	r3, r0
    3e9a:	2b04      	cmp	r3, #4
    3e9c:	d005      	beq.n	3eaa <__aeabi_ddiv+0x596>
    3e9e:	0001      	movs	r1, r0
    3ea0:	1d08      	adds	r0, r1, #4
    3ea2:	4288      	cmp	r0, r1
    3ea4:	419b      	sbcs	r3, r3
    3ea6:	425b      	negs	r3, r3
    3ea8:	18d2      	adds	r2, r2, r3
    3eaa:	0213      	lsls	r3, r2, #8
    3eac:	d53a      	bpl.n	3f24 <__aeabi_ddiv+0x610>
    3eae:	2301      	movs	r3, #1
    3eb0:	9a02      	ldr	r2, [sp, #8]
    3eb2:	2401      	movs	r4, #1
    3eb4:	401a      	ands	r2, r3
    3eb6:	2300      	movs	r3, #0
    3eb8:	4694      	mov	ip, r2
    3eba:	4698      	mov	r8, r3
    3ebc:	2200      	movs	r2, #0
    3ebe:	e5f7      	b.n	3ab0 <__aeabi_ddiv+0x19c>
    3ec0:	2102      	movs	r1, #2
    3ec2:	4249      	negs	r1, r1
    3ec4:	468c      	mov	ip, r1
    3ec6:	9d03      	ldr	r5, [sp, #12]
    3ec8:	44e3      	add	fp, ip
    3eca:	46ac      	mov	ip, r5
    3ecc:	44e2      	add	sl, ip
    3ece:	45aa      	cmp	sl, r5
    3ed0:	41ad      	sbcs	r5, r5
    3ed2:	426d      	negs	r5, r5
    3ed4:	4445      	add	r5, r8
    3ed6:	18ed      	adds	r5, r5, r3
    3ed8:	1a2d      	subs	r5, r5, r0
    3eda:	e696      	b.n	3c0a <__aeabi_ddiv+0x2f6>
    3edc:	1e8a      	subs	r2, r1, #2
    3ede:	9903      	ldr	r1, [sp, #12]
    3ee0:	004d      	lsls	r5, r1, #1
    3ee2:	428d      	cmp	r5, r1
    3ee4:	4189      	sbcs	r1, r1
    3ee6:	4249      	negs	r1, r1
    3ee8:	4441      	add	r1, r8
    3eea:	1876      	adds	r6, r6, r1
    3eec:	9503      	str	r5, [sp, #12]
    3eee:	e78f      	b.n	3e10 <__aeabi_ddiv+0x4fc>
    3ef0:	201f      	movs	r0, #31
    3ef2:	4240      	negs	r0, r0
    3ef4:	1ac3      	subs	r3, r0, r3
    3ef6:	4658      	mov	r0, fp
    3ef8:	40d8      	lsrs	r0, r3
    3efa:	0003      	movs	r3, r0
    3efc:	2a20      	cmp	r2, #32
    3efe:	d028      	beq.n	3f52 <__aeabi_ddiv+0x63e>
    3f00:	2040      	movs	r0, #64	; 0x40
    3f02:	465d      	mov	r5, fp
    3f04:	1a82      	subs	r2, r0, r2
    3f06:	4095      	lsls	r5, r2
    3f08:	4329      	orrs	r1, r5
    3f0a:	1e4a      	subs	r2, r1, #1
    3f0c:	4191      	sbcs	r1, r2
    3f0e:	4319      	orrs	r1, r3
    3f10:	2307      	movs	r3, #7
    3f12:	2200      	movs	r2, #0
    3f14:	400b      	ands	r3, r1
    3f16:	d009      	beq.n	3f2c <__aeabi_ddiv+0x618>
    3f18:	230f      	movs	r3, #15
    3f1a:	2200      	movs	r2, #0
    3f1c:	400b      	ands	r3, r1
    3f1e:	0008      	movs	r0, r1
    3f20:	2b04      	cmp	r3, #4
    3f22:	d1bd      	bne.n	3ea0 <__aeabi_ddiv+0x58c>
    3f24:	0001      	movs	r1, r0
    3f26:	0753      	lsls	r3, r2, #29
    3f28:	0252      	lsls	r2, r2, #9
    3f2a:	0b12      	lsrs	r2, r2, #12
    3f2c:	08c9      	lsrs	r1, r1, #3
    3f2e:	4319      	orrs	r1, r3
    3f30:	2301      	movs	r3, #1
    3f32:	4688      	mov	r8, r1
    3f34:	9902      	ldr	r1, [sp, #8]
    3f36:	2400      	movs	r4, #0
    3f38:	4019      	ands	r1, r3
    3f3a:	468c      	mov	ip, r1
    3f3c:	e5b8      	b.n	3ab0 <__aeabi_ddiv+0x19c>
    3f3e:	4552      	cmp	r2, sl
    3f40:	d8be      	bhi.n	3ec0 <__aeabi_ddiv+0x5ac>
    3f42:	468b      	mov	fp, r1
    3f44:	2500      	movs	r5, #0
    3f46:	e660      	b.n	3c0a <__aeabi_ddiv+0x2f6>
    3f48:	9d03      	ldr	r5, [sp, #12]
    3f4a:	429d      	cmp	r5, r3
    3f4c:	d3c6      	bcc.n	3edc <__aeabi_ddiv+0x5c8>
    3f4e:	0011      	movs	r1, r2
    3f50:	e762      	b.n	3e18 <__aeabi_ddiv+0x504>
    3f52:	2500      	movs	r5, #0
    3f54:	e7d8      	b.n	3f08 <__aeabi_ddiv+0x5f4>
    3f56:	2280      	movs	r2, #128	; 0x80
    3f58:	465b      	mov	r3, fp
    3f5a:	0312      	lsls	r2, r2, #12
    3f5c:	431a      	orrs	r2, r3
    3f5e:	9b01      	ldr	r3, [sp, #4]
    3f60:	0312      	lsls	r2, r2, #12
    3f62:	0b12      	lsrs	r2, r2, #12
    3f64:	469c      	mov	ip, r3
    3f66:	4688      	mov	r8, r1
    3f68:	4c03      	ldr	r4, [pc, #12]	; (3f78 <__aeabi_ddiv+0x664>)
    3f6a:	e5a1      	b.n	3ab0 <__aeabi_ddiv+0x19c>
    3f6c:	000003ff 	.word	0x000003ff
    3f70:	feffffff 	.word	0xfeffffff
    3f74:	000007fe 	.word	0x000007fe
    3f78:	000007ff 	.word	0x000007ff

00003f7c <__aeabi_dmul>:
    3f7c:	b5f0      	push	{r4, r5, r6, r7, lr}
    3f7e:	4657      	mov	r7, sl
    3f80:	4645      	mov	r5, r8
    3f82:	46de      	mov	lr, fp
    3f84:	464e      	mov	r6, r9
    3f86:	b5e0      	push	{r5, r6, r7, lr}
    3f88:	030c      	lsls	r4, r1, #12
    3f8a:	4698      	mov	r8, r3
    3f8c:	004e      	lsls	r6, r1, #1
    3f8e:	0b23      	lsrs	r3, r4, #12
    3f90:	b087      	sub	sp, #28
    3f92:	0007      	movs	r7, r0
    3f94:	4692      	mov	sl, r2
    3f96:	469b      	mov	fp, r3
    3f98:	0d76      	lsrs	r6, r6, #21
    3f9a:	0fcd      	lsrs	r5, r1, #31
    3f9c:	2e00      	cmp	r6, #0
    3f9e:	d06b      	beq.n	4078 <__aeabi_dmul+0xfc>
    3fa0:	4b6d      	ldr	r3, [pc, #436]	; (4158 <__aeabi_dmul+0x1dc>)
    3fa2:	429e      	cmp	r6, r3
    3fa4:	d035      	beq.n	4012 <__aeabi_dmul+0x96>
    3fa6:	2480      	movs	r4, #128	; 0x80
    3fa8:	465b      	mov	r3, fp
    3faa:	0f42      	lsrs	r2, r0, #29
    3fac:	0424      	lsls	r4, r4, #16
    3fae:	00db      	lsls	r3, r3, #3
    3fb0:	4314      	orrs	r4, r2
    3fb2:	431c      	orrs	r4, r3
    3fb4:	00c3      	lsls	r3, r0, #3
    3fb6:	4699      	mov	r9, r3
    3fb8:	4b68      	ldr	r3, [pc, #416]	; (415c <__aeabi_dmul+0x1e0>)
    3fba:	46a3      	mov	fp, r4
    3fbc:	469c      	mov	ip, r3
    3fbe:	2300      	movs	r3, #0
    3fc0:	2700      	movs	r7, #0
    3fc2:	4466      	add	r6, ip
    3fc4:	9302      	str	r3, [sp, #8]
    3fc6:	4643      	mov	r3, r8
    3fc8:	031c      	lsls	r4, r3, #12
    3fca:	005a      	lsls	r2, r3, #1
    3fcc:	0fdb      	lsrs	r3, r3, #31
    3fce:	4650      	mov	r0, sl
    3fd0:	0b24      	lsrs	r4, r4, #12
    3fd2:	0d52      	lsrs	r2, r2, #21
    3fd4:	4698      	mov	r8, r3
    3fd6:	d100      	bne.n	3fda <__aeabi_dmul+0x5e>
    3fd8:	e076      	b.n	40c8 <__aeabi_dmul+0x14c>
    3fda:	4b5f      	ldr	r3, [pc, #380]	; (4158 <__aeabi_dmul+0x1dc>)
    3fdc:	429a      	cmp	r2, r3
    3fde:	d06d      	beq.n	40bc <__aeabi_dmul+0x140>
    3fe0:	2380      	movs	r3, #128	; 0x80
    3fe2:	0f41      	lsrs	r1, r0, #29
    3fe4:	041b      	lsls	r3, r3, #16
    3fe6:	430b      	orrs	r3, r1
    3fe8:	495c      	ldr	r1, [pc, #368]	; (415c <__aeabi_dmul+0x1e0>)
    3fea:	00e4      	lsls	r4, r4, #3
    3fec:	468c      	mov	ip, r1
    3fee:	431c      	orrs	r4, r3
    3ff0:	00c3      	lsls	r3, r0, #3
    3ff2:	2000      	movs	r0, #0
    3ff4:	4462      	add	r2, ip
    3ff6:	4641      	mov	r1, r8
    3ff8:	18b6      	adds	r6, r6, r2
    3ffa:	4069      	eors	r1, r5
    3ffc:	1c72      	adds	r2, r6, #1
    3ffe:	9101      	str	r1, [sp, #4]
    4000:	4694      	mov	ip, r2
    4002:	4307      	orrs	r7, r0
    4004:	2f0f      	cmp	r7, #15
    4006:	d900      	bls.n	400a <__aeabi_dmul+0x8e>
    4008:	e0b0      	b.n	416c <__aeabi_dmul+0x1f0>
    400a:	4a55      	ldr	r2, [pc, #340]	; (4160 <__aeabi_dmul+0x1e4>)
    400c:	00bf      	lsls	r7, r7, #2
    400e:	59d2      	ldr	r2, [r2, r7]
    4010:	4697      	mov	pc, r2
    4012:	465b      	mov	r3, fp
    4014:	4303      	orrs	r3, r0
    4016:	4699      	mov	r9, r3
    4018:	d000      	beq.n	401c <__aeabi_dmul+0xa0>
    401a:	e087      	b.n	412c <__aeabi_dmul+0x1b0>
    401c:	2300      	movs	r3, #0
    401e:	469b      	mov	fp, r3
    4020:	3302      	adds	r3, #2
    4022:	2708      	movs	r7, #8
    4024:	9302      	str	r3, [sp, #8]
    4026:	e7ce      	b.n	3fc6 <__aeabi_dmul+0x4a>
    4028:	4642      	mov	r2, r8
    402a:	9201      	str	r2, [sp, #4]
    402c:	2802      	cmp	r0, #2
    402e:	d067      	beq.n	4100 <__aeabi_dmul+0x184>
    4030:	2803      	cmp	r0, #3
    4032:	d100      	bne.n	4036 <__aeabi_dmul+0xba>
    4034:	e20e      	b.n	4454 <__aeabi_dmul+0x4d8>
    4036:	2801      	cmp	r0, #1
    4038:	d000      	beq.n	403c <__aeabi_dmul+0xc0>
    403a:	e162      	b.n	4302 <__aeabi_dmul+0x386>
    403c:	2300      	movs	r3, #0
    403e:	2400      	movs	r4, #0
    4040:	2200      	movs	r2, #0
    4042:	4699      	mov	r9, r3
    4044:	9901      	ldr	r1, [sp, #4]
    4046:	4001      	ands	r1, r0
    4048:	b2cd      	uxtb	r5, r1
    404a:	2100      	movs	r1, #0
    404c:	0312      	lsls	r2, r2, #12
    404e:	0d0b      	lsrs	r3, r1, #20
    4050:	0b12      	lsrs	r2, r2, #12
    4052:	051b      	lsls	r3, r3, #20
    4054:	4313      	orrs	r3, r2
    4056:	4a43      	ldr	r2, [pc, #268]	; (4164 <__aeabi_dmul+0x1e8>)
    4058:	0524      	lsls	r4, r4, #20
    405a:	4013      	ands	r3, r2
    405c:	431c      	orrs	r4, r3
    405e:	0064      	lsls	r4, r4, #1
    4060:	07ed      	lsls	r5, r5, #31
    4062:	0864      	lsrs	r4, r4, #1
    4064:	432c      	orrs	r4, r5
    4066:	4648      	mov	r0, r9
    4068:	0021      	movs	r1, r4
    406a:	b007      	add	sp, #28
    406c:	bc3c      	pop	{r2, r3, r4, r5}
    406e:	4690      	mov	r8, r2
    4070:	4699      	mov	r9, r3
    4072:	46a2      	mov	sl, r4
    4074:	46ab      	mov	fp, r5
    4076:	bdf0      	pop	{r4, r5, r6, r7, pc}
    4078:	4303      	orrs	r3, r0
    407a:	4699      	mov	r9, r3
    407c:	d04f      	beq.n	411e <__aeabi_dmul+0x1a2>
    407e:	465b      	mov	r3, fp
    4080:	2b00      	cmp	r3, #0
    4082:	d100      	bne.n	4086 <__aeabi_dmul+0x10a>
    4084:	e189      	b.n	439a <__aeabi_dmul+0x41e>
    4086:	4658      	mov	r0, fp
    4088:	f000 fd7a 	bl	4b80 <__clzsi2>
    408c:	0003      	movs	r3, r0
    408e:	3b0b      	subs	r3, #11
    4090:	2b1c      	cmp	r3, #28
    4092:	dd00      	ble.n	4096 <__aeabi_dmul+0x11a>
    4094:	e17a      	b.n	438c <__aeabi_dmul+0x410>
    4096:	221d      	movs	r2, #29
    4098:	1ad3      	subs	r3, r2, r3
    409a:	003a      	movs	r2, r7
    409c:	0001      	movs	r1, r0
    409e:	465c      	mov	r4, fp
    40a0:	40da      	lsrs	r2, r3
    40a2:	3908      	subs	r1, #8
    40a4:	408c      	lsls	r4, r1
    40a6:	0013      	movs	r3, r2
    40a8:	408f      	lsls	r7, r1
    40aa:	4323      	orrs	r3, r4
    40ac:	469b      	mov	fp, r3
    40ae:	46b9      	mov	r9, r7
    40b0:	2300      	movs	r3, #0
    40b2:	4e2d      	ldr	r6, [pc, #180]	; (4168 <__aeabi_dmul+0x1ec>)
    40b4:	2700      	movs	r7, #0
    40b6:	1a36      	subs	r6, r6, r0
    40b8:	9302      	str	r3, [sp, #8]
    40ba:	e784      	b.n	3fc6 <__aeabi_dmul+0x4a>
    40bc:	4653      	mov	r3, sl
    40be:	4323      	orrs	r3, r4
    40c0:	d12a      	bne.n	4118 <__aeabi_dmul+0x19c>
    40c2:	2400      	movs	r4, #0
    40c4:	2002      	movs	r0, #2
    40c6:	e796      	b.n	3ff6 <__aeabi_dmul+0x7a>
    40c8:	4653      	mov	r3, sl
    40ca:	4323      	orrs	r3, r4
    40cc:	d020      	beq.n	4110 <__aeabi_dmul+0x194>
    40ce:	2c00      	cmp	r4, #0
    40d0:	d100      	bne.n	40d4 <__aeabi_dmul+0x158>
    40d2:	e157      	b.n	4384 <__aeabi_dmul+0x408>
    40d4:	0020      	movs	r0, r4
    40d6:	f000 fd53 	bl	4b80 <__clzsi2>
    40da:	0003      	movs	r3, r0
    40dc:	3b0b      	subs	r3, #11
    40de:	2b1c      	cmp	r3, #28
    40e0:	dd00      	ble.n	40e4 <__aeabi_dmul+0x168>
    40e2:	e149      	b.n	4378 <__aeabi_dmul+0x3fc>
    40e4:	211d      	movs	r1, #29
    40e6:	1acb      	subs	r3, r1, r3
    40e8:	4651      	mov	r1, sl
    40ea:	0002      	movs	r2, r0
    40ec:	40d9      	lsrs	r1, r3
    40ee:	4653      	mov	r3, sl
    40f0:	3a08      	subs	r2, #8
    40f2:	4094      	lsls	r4, r2
    40f4:	4093      	lsls	r3, r2
    40f6:	430c      	orrs	r4, r1
    40f8:	4a1b      	ldr	r2, [pc, #108]	; (4168 <__aeabi_dmul+0x1ec>)
    40fa:	1a12      	subs	r2, r2, r0
    40fc:	2000      	movs	r0, #0
    40fe:	e77a      	b.n	3ff6 <__aeabi_dmul+0x7a>
    4100:	2501      	movs	r5, #1
    4102:	9b01      	ldr	r3, [sp, #4]
    4104:	4c14      	ldr	r4, [pc, #80]	; (4158 <__aeabi_dmul+0x1dc>)
    4106:	401d      	ands	r5, r3
    4108:	2300      	movs	r3, #0
    410a:	2200      	movs	r2, #0
    410c:	4699      	mov	r9, r3
    410e:	e79c      	b.n	404a <__aeabi_dmul+0xce>
    4110:	2400      	movs	r4, #0
    4112:	2200      	movs	r2, #0
    4114:	2001      	movs	r0, #1
    4116:	e76e      	b.n	3ff6 <__aeabi_dmul+0x7a>
    4118:	4653      	mov	r3, sl
    411a:	2003      	movs	r0, #3
    411c:	e76b      	b.n	3ff6 <__aeabi_dmul+0x7a>
    411e:	2300      	movs	r3, #0
    4120:	469b      	mov	fp, r3
    4122:	3301      	adds	r3, #1
    4124:	2704      	movs	r7, #4
    4126:	2600      	movs	r6, #0
    4128:	9302      	str	r3, [sp, #8]
    412a:	e74c      	b.n	3fc6 <__aeabi_dmul+0x4a>
    412c:	2303      	movs	r3, #3
    412e:	4681      	mov	r9, r0
    4130:	270c      	movs	r7, #12
    4132:	9302      	str	r3, [sp, #8]
    4134:	e747      	b.n	3fc6 <__aeabi_dmul+0x4a>
    4136:	2280      	movs	r2, #128	; 0x80
    4138:	2300      	movs	r3, #0
    413a:	2500      	movs	r5, #0
    413c:	0312      	lsls	r2, r2, #12
    413e:	4699      	mov	r9, r3
    4140:	4c05      	ldr	r4, [pc, #20]	; (4158 <__aeabi_dmul+0x1dc>)
    4142:	e782      	b.n	404a <__aeabi_dmul+0xce>
    4144:	465c      	mov	r4, fp
    4146:	464b      	mov	r3, r9
    4148:	9802      	ldr	r0, [sp, #8]
    414a:	e76f      	b.n	402c <__aeabi_dmul+0xb0>
    414c:	465c      	mov	r4, fp
    414e:	464b      	mov	r3, r9
    4150:	9501      	str	r5, [sp, #4]
    4152:	9802      	ldr	r0, [sp, #8]
    4154:	e76a      	b.n	402c <__aeabi_dmul+0xb0>
    4156:	46c0      	nop			; (mov r8, r8)
    4158:	000007ff 	.word	0x000007ff
    415c:	fffffc01 	.word	0xfffffc01
    4160:	00004cd4 	.word	0x00004cd4
    4164:	800fffff 	.word	0x800fffff
    4168:	fffffc0d 	.word	0xfffffc0d
    416c:	464a      	mov	r2, r9
    416e:	4649      	mov	r1, r9
    4170:	0c17      	lsrs	r7, r2, #16
    4172:	0c1a      	lsrs	r2, r3, #16
    4174:	041b      	lsls	r3, r3, #16
    4176:	0c1b      	lsrs	r3, r3, #16
    4178:	0408      	lsls	r0, r1, #16
    417a:	0019      	movs	r1, r3
    417c:	0c00      	lsrs	r0, r0, #16
    417e:	4341      	muls	r1, r0
    4180:	0015      	movs	r5, r2
    4182:	4688      	mov	r8, r1
    4184:	0019      	movs	r1, r3
    4186:	437d      	muls	r5, r7
    4188:	4379      	muls	r1, r7
    418a:	9503      	str	r5, [sp, #12]
    418c:	4689      	mov	r9, r1
    418e:	0029      	movs	r1, r5
    4190:	0015      	movs	r5, r2
    4192:	4345      	muls	r5, r0
    4194:	444d      	add	r5, r9
    4196:	9502      	str	r5, [sp, #8]
    4198:	4645      	mov	r5, r8
    419a:	0c2d      	lsrs	r5, r5, #16
    419c:	46aa      	mov	sl, r5
    419e:	9d02      	ldr	r5, [sp, #8]
    41a0:	4455      	add	r5, sl
    41a2:	45a9      	cmp	r9, r5
    41a4:	d906      	bls.n	41b4 <__aeabi_dmul+0x238>
    41a6:	468a      	mov	sl, r1
    41a8:	2180      	movs	r1, #128	; 0x80
    41aa:	0249      	lsls	r1, r1, #9
    41ac:	4689      	mov	r9, r1
    41ae:	44ca      	add	sl, r9
    41b0:	4651      	mov	r1, sl
    41b2:	9103      	str	r1, [sp, #12]
    41b4:	0c29      	lsrs	r1, r5, #16
    41b6:	9104      	str	r1, [sp, #16]
    41b8:	4641      	mov	r1, r8
    41ba:	0409      	lsls	r1, r1, #16
    41bc:	042d      	lsls	r5, r5, #16
    41be:	0c09      	lsrs	r1, r1, #16
    41c0:	4688      	mov	r8, r1
    41c2:	0029      	movs	r1, r5
    41c4:	0c25      	lsrs	r5, r4, #16
    41c6:	0424      	lsls	r4, r4, #16
    41c8:	4441      	add	r1, r8
    41ca:	0c24      	lsrs	r4, r4, #16
    41cc:	9105      	str	r1, [sp, #20]
    41ce:	0021      	movs	r1, r4
    41d0:	4341      	muls	r1, r0
    41d2:	4688      	mov	r8, r1
    41d4:	0021      	movs	r1, r4
    41d6:	4379      	muls	r1, r7
    41d8:	468a      	mov	sl, r1
    41da:	4368      	muls	r0, r5
    41dc:	4641      	mov	r1, r8
    41de:	4450      	add	r0, sl
    41e0:	4681      	mov	r9, r0
    41e2:	0c08      	lsrs	r0, r1, #16
    41e4:	4448      	add	r0, r9
    41e6:	436f      	muls	r7, r5
    41e8:	4582      	cmp	sl, r0
    41ea:	d903      	bls.n	41f4 <__aeabi_dmul+0x278>
    41ec:	2180      	movs	r1, #128	; 0x80
    41ee:	0249      	lsls	r1, r1, #9
    41f0:	4689      	mov	r9, r1
    41f2:	444f      	add	r7, r9
    41f4:	0c01      	lsrs	r1, r0, #16
    41f6:	4689      	mov	r9, r1
    41f8:	0039      	movs	r1, r7
    41fa:	4449      	add	r1, r9
    41fc:	9102      	str	r1, [sp, #8]
    41fe:	4641      	mov	r1, r8
    4200:	040f      	lsls	r7, r1, #16
    4202:	9904      	ldr	r1, [sp, #16]
    4204:	0c3f      	lsrs	r7, r7, #16
    4206:	4688      	mov	r8, r1
    4208:	0400      	lsls	r0, r0, #16
    420a:	19c0      	adds	r0, r0, r7
    420c:	4480      	add	r8, r0
    420e:	4641      	mov	r1, r8
    4210:	9104      	str	r1, [sp, #16]
    4212:	4659      	mov	r1, fp
    4214:	0c0f      	lsrs	r7, r1, #16
    4216:	0409      	lsls	r1, r1, #16
    4218:	0c09      	lsrs	r1, r1, #16
    421a:	4688      	mov	r8, r1
    421c:	4359      	muls	r1, r3
    421e:	468a      	mov	sl, r1
    4220:	0039      	movs	r1, r7
    4222:	4351      	muls	r1, r2
    4224:	4689      	mov	r9, r1
    4226:	4641      	mov	r1, r8
    4228:	434a      	muls	r2, r1
    422a:	4651      	mov	r1, sl
    422c:	0c09      	lsrs	r1, r1, #16
    422e:	468b      	mov	fp, r1
    4230:	437b      	muls	r3, r7
    4232:	18d2      	adds	r2, r2, r3
    4234:	445a      	add	r2, fp
    4236:	4293      	cmp	r3, r2
    4238:	d903      	bls.n	4242 <__aeabi_dmul+0x2c6>
    423a:	2380      	movs	r3, #128	; 0x80
    423c:	025b      	lsls	r3, r3, #9
    423e:	469b      	mov	fp, r3
    4240:	44d9      	add	r9, fp
    4242:	4651      	mov	r1, sl
    4244:	0409      	lsls	r1, r1, #16
    4246:	0c09      	lsrs	r1, r1, #16
    4248:	468a      	mov	sl, r1
    424a:	4641      	mov	r1, r8
    424c:	4361      	muls	r1, r4
    424e:	437c      	muls	r4, r7
    4250:	0c13      	lsrs	r3, r2, #16
    4252:	0412      	lsls	r2, r2, #16
    4254:	444b      	add	r3, r9
    4256:	4452      	add	r2, sl
    4258:	46a1      	mov	r9, r4
    425a:	468a      	mov	sl, r1
    425c:	003c      	movs	r4, r7
    425e:	4641      	mov	r1, r8
    4260:	436c      	muls	r4, r5
    4262:	434d      	muls	r5, r1
    4264:	4651      	mov	r1, sl
    4266:	444d      	add	r5, r9
    4268:	0c0f      	lsrs	r7, r1, #16
    426a:	197d      	adds	r5, r7, r5
    426c:	45a9      	cmp	r9, r5
    426e:	d903      	bls.n	4278 <__aeabi_dmul+0x2fc>
    4270:	2180      	movs	r1, #128	; 0x80
    4272:	0249      	lsls	r1, r1, #9
    4274:	4688      	mov	r8, r1
    4276:	4444      	add	r4, r8
    4278:	9f04      	ldr	r7, [sp, #16]
    427a:	9903      	ldr	r1, [sp, #12]
    427c:	46b8      	mov	r8, r7
    427e:	4441      	add	r1, r8
    4280:	468b      	mov	fp, r1
    4282:	4583      	cmp	fp, r0
    4284:	4180      	sbcs	r0, r0
    4286:	4241      	negs	r1, r0
    4288:	4688      	mov	r8, r1
    428a:	4651      	mov	r1, sl
    428c:	0408      	lsls	r0, r1, #16
    428e:	042f      	lsls	r7, r5, #16
    4290:	0c00      	lsrs	r0, r0, #16
    4292:	183f      	adds	r7, r7, r0
    4294:	4658      	mov	r0, fp
    4296:	9902      	ldr	r1, [sp, #8]
    4298:	1810      	adds	r0, r2, r0
    429a:	4689      	mov	r9, r1
    429c:	4290      	cmp	r0, r2
    429e:	4192      	sbcs	r2, r2
    42a0:	444f      	add	r7, r9
    42a2:	46ba      	mov	sl, r7
    42a4:	4252      	negs	r2, r2
    42a6:	4699      	mov	r9, r3
    42a8:	4693      	mov	fp, r2
    42aa:	44c2      	add	sl, r8
    42ac:	44d1      	add	r9, sl
    42ae:	44cb      	add	fp, r9
    42b0:	428f      	cmp	r7, r1
    42b2:	41bf      	sbcs	r7, r7
    42b4:	45c2      	cmp	sl, r8
    42b6:	4189      	sbcs	r1, r1
    42b8:	4599      	cmp	r9, r3
    42ba:	419b      	sbcs	r3, r3
    42bc:	4593      	cmp	fp, r2
    42be:	4192      	sbcs	r2, r2
    42c0:	427f      	negs	r7, r7
    42c2:	4249      	negs	r1, r1
    42c4:	0c2d      	lsrs	r5, r5, #16
    42c6:	4252      	negs	r2, r2
    42c8:	430f      	orrs	r7, r1
    42ca:	425b      	negs	r3, r3
    42cc:	4313      	orrs	r3, r2
    42ce:	197f      	adds	r7, r7, r5
    42d0:	18ff      	adds	r7, r7, r3
    42d2:	465b      	mov	r3, fp
    42d4:	193c      	adds	r4, r7, r4
    42d6:	0ddb      	lsrs	r3, r3, #23
    42d8:	9a05      	ldr	r2, [sp, #20]
    42da:	0264      	lsls	r4, r4, #9
    42dc:	431c      	orrs	r4, r3
    42de:	0243      	lsls	r3, r0, #9
    42e0:	4313      	orrs	r3, r2
    42e2:	1e5d      	subs	r5, r3, #1
    42e4:	41ab      	sbcs	r3, r5
    42e6:	465a      	mov	r2, fp
    42e8:	0dc0      	lsrs	r0, r0, #23
    42ea:	4303      	orrs	r3, r0
    42ec:	0252      	lsls	r2, r2, #9
    42ee:	4313      	orrs	r3, r2
    42f0:	01e2      	lsls	r2, r4, #7
    42f2:	d556      	bpl.n	43a2 <__aeabi_dmul+0x426>
    42f4:	2001      	movs	r0, #1
    42f6:	085a      	lsrs	r2, r3, #1
    42f8:	4003      	ands	r3, r0
    42fa:	4313      	orrs	r3, r2
    42fc:	07e2      	lsls	r2, r4, #31
    42fe:	4313      	orrs	r3, r2
    4300:	0864      	lsrs	r4, r4, #1
    4302:	485a      	ldr	r0, [pc, #360]	; (446c <__aeabi_dmul+0x4f0>)
    4304:	4460      	add	r0, ip
    4306:	2800      	cmp	r0, #0
    4308:	dd4d      	ble.n	43a6 <__aeabi_dmul+0x42a>
    430a:	075a      	lsls	r2, r3, #29
    430c:	d009      	beq.n	4322 <__aeabi_dmul+0x3a6>
    430e:	220f      	movs	r2, #15
    4310:	401a      	ands	r2, r3
    4312:	2a04      	cmp	r2, #4
    4314:	d005      	beq.n	4322 <__aeabi_dmul+0x3a6>
    4316:	1d1a      	adds	r2, r3, #4
    4318:	429a      	cmp	r2, r3
    431a:	419b      	sbcs	r3, r3
    431c:	425b      	negs	r3, r3
    431e:	18e4      	adds	r4, r4, r3
    4320:	0013      	movs	r3, r2
    4322:	01e2      	lsls	r2, r4, #7
    4324:	d504      	bpl.n	4330 <__aeabi_dmul+0x3b4>
    4326:	2080      	movs	r0, #128	; 0x80
    4328:	4a51      	ldr	r2, [pc, #324]	; (4470 <__aeabi_dmul+0x4f4>)
    432a:	00c0      	lsls	r0, r0, #3
    432c:	4014      	ands	r4, r2
    432e:	4460      	add	r0, ip
    4330:	4a50      	ldr	r2, [pc, #320]	; (4474 <__aeabi_dmul+0x4f8>)
    4332:	4290      	cmp	r0, r2
    4334:	dd00      	ble.n	4338 <__aeabi_dmul+0x3bc>
    4336:	e6e3      	b.n	4100 <__aeabi_dmul+0x184>
    4338:	2501      	movs	r5, #1
    433a:	08db      	lsrs	r3, r3, #3
    433c:	0762      	lsls	r2, r4, #29
    433e:	431a      	orrs	r2, r3
    4340:	0264      	lsls	r4, r4, #9
    4342:	9b01      	ldr	r3, [sp, #4]
    4344:	4691      	mov	r9, r2
    4346:	0b22      	lsrs	r2, r4, #12
    4348:	0544      	lsls	r4, r0, #21
    434a:	0d64      	lsrs	r4, r4, #21
    434c:	401d      	ands	r5, r3
    434e:	e67c      	b.n	404a <__aeabi_dmul+0xce>
    4350:	2280      	movs	r2, #128	; 0x80
    4352:	4659      	mov	r1, fp
    4354:	0312      	lsls	r2, r2, #12
    4356:	4211      	tst	r1, r2
    4358:	d008      	beq.n	436c <__aeabi_dmul+0x3f0>
    435a:	4214      	tst	r4, r2
    435c:	d106      	bne.n	436c <__aeabi_dmul+0x3f0>
    435e:	4322      	orrs	r2, r4
    4360:	0312      	lsls	r2, r2, #12
    4362:	0b12      	lsrs	r2, r2, #12
    4364:	4645      	mov	r5, r8
    4366:	4699      	mov	r9, r3
    4368:	4c43      	ldr	r4, [pc, #268]	; (4478 <__aeabi_dmul+0x4fc>)
    436a:	e66e      	b.n	404a <__aeabi_dmul+0xce>
    436c:	465b      	mov	r3, fp
    436e:	431a      	orrs	r2, r3
    4370:	0312      	lsls	r2, r2, #12
    4372:	0b12      	lsrs	r2, r2, #12
    4374:	4c40      	ldr	r4, [pc, #256]	; (4478 <__aeabi_dmul+0x4fc>)
    4376:	e668      	b.n	404a <__aeabi_dmul+0xce>
    4378:	0003      	movs	r3, r0
    437a:	4654      	mov	r4, sl
    437c:	3b28      	subs	r3, #40	; 0x28
    437e:	409c      	lsls	r4, r3
    4380:	2300      	movs	r3, #0
    4382:	e6b9      	b.n	40f8 <__aeabi_dmul+0x17c>
    4384:	f000 fbfc 	bl	4b80 <__clzsi2>
    4388:	3020      	adds	r0, #32
    438a:	e6a6      	b.n	40da <__aeabi_dmul+0x15e>
    438c:	0003      	movs	r3, r0
    438e:	3b28      	subs	r3, #40	; 0x28
    4390:	409f      	lsls	r7, r3
    4392:	2300      	movs	r3, #0
    4394:	46bb      	mov	fp, r7
    4396:	4699      	mov	r9, r3
    4398:	e68a      	b.n	40b0 <__aeabi_dmul+0x134>
    439a:	f000 fbf1 	bl	4b80 <__clzsi2>
    439e:	3020      	adds	r0, #32
    43a0:	e674      	b.n	408c <__aeabi_dmul+0x110>
    43a2:	46b4      	mov	ip, r6
    43a4:	e7ad      	b.n	4302 <__aeabi_dmul+0x386>
    43a6:	2501      	movs	r5, #1
    43a8:	1a2a      	subs	r2, r5, r0
    43aa:	2a38      	cmp	r2, #56	; 0x38
    43ac:	dd06      	ble.n	43bc <__aeabi_dmul+0x440>
    43ae:	9b01      	ldr	r3, [sp, #4]
    43b0:	2400      	movs	r4, #0
    43b2:	401d      	ands	r5, r3
    43b4:	2300      	movs	r3, #0
    43b6:	2200      	movs	r2, #0
    43b8:	4699      	mov	r9, r3
    43ba:	e646      	b.n	404a <__aeabi_dmul+0xce>
    43bc:	2a1f      	cmp	r2, #31
    43be:	dc21      	bgt.n	4404 <__aeabi_dmul+0x488>
    43c0:	2520      	movs	r5, #32
    43c2:	0020      	movs	r0, r4
    43c4:	1aad      	subs	r5, r5, r2
    43c6:	001e      	movs	r6, r3
    43c8:	40ab      	lsls	r3, r5
    43ca:	40a8      	lsls	r0, r5
    43cc:	40d6      	lsrs	r6, r2
    43ce:	1e5d      	subs	r5, r3, #1
    43d0:	41ab      	sbcs	r3, r5
    43d2:	4330      	orrs	r0, r6
    43d4:	4318      	orrs	r0, r3
    43d6:	40d4      	lsrs	r4, r2
    43d8:	0743      	lsls	r3, r0, #29
    43da:	d009      	beq.n	43f0 <__aeabi_dmul+0x474>
    43dc:	230f      	movs	r3, #15
    43de:	4003      	ands	r3, r0
    43e0:	2b04      	cmp	r3, #4
    43e2:	d005      	beq.n	43f0 <__aeabi_dmul+0x474>
    43e4:	0003      	movs	r3, r0
    43e6:	1d18      	adds	r0, r3, #4
    43e8:	4298      	cmp	r0, r3
    43ea:	419b      	sbcs	r3, r3
    43ec:	425b      	negs	r3, r3
    43ee:	18e4      	adds	r4, r4, r3
    43f0:	0223      	lsls	r3, r4, #8
    43f2:	d521      	bpl.n	4438 <__aeabi_dmul+0x4bc>
    43f4:	2501      	movs	r5, #1
    43f6:	9b01      	ldr	r3, [sp, #4]
    43f8:	2401      	movs	r4, #1
    43fa:	401d      	ands	r5, r3
    43fc:	2300      	movs	r3, #0
    43fe:	2200      	movs	r2, #0
    4400:	4699      	mov	r9, r3
    4402:	e622      	b.n	404a <__aeabi_dmul+0xce>
    4404:	251f      	movs	r5, #31
    4406:	0021      	movs	r1, r4
    4408:	426d      	negs	r5, r5
    440a:	1a28      	subs	r0, r5, r0
    440c:	40c1      	lsrs	r1, r0
    440e:	0008      	movs	r0, r1
    4410:	2a20      	cmp	r2, #32
    4412:	d01d      	beq.n	4450 <__aeabi_dmul+0x4d4>
    4414:	355f      	adds	r5, #95	; 0x5f
    4416:	1aaa      	subs	r2, r5, r2
    4418:	4094      	lsls	r4, r2
    441a:	4323      	orrs	r3, r4
    441c:	1e5c      	subs	r4, r3, #1
    441e:	41a3      	sbcs	r3, r4
    4420:	2507      	movs	r5, #7
    4422:	4303      	orrs	r3, r0
    4424:	401d      	ands	r5, r3
    4426:	2200      	movs	r2, #0
    4428:	2d00      	cmp	r5, #0
    442a:	d009      	beq.n	4440 <__aeabi_dmul+0x4c4>
    442c:	220f      	movs	r2, #15
    442e:	2400      	movs	r4, #0
    4430:	401a      	ands	r2, r3
    4432:	0018      	movs	r0, r3
    4434:	2a04      	cmp	r2, #4
    4436:	d1d6      	bne.n	43e6 <__aeabi_dmul+0x46a>
    4438:	0003      	movs	r3, r0
    443a:	0765      	lsls	r5, r4, #29
    443c:	0264      	lsls	r4, r4, #9
    443e:	0b22      	lsrs	r2, r4, #12
    4440:	08db      	lsrs	r3, r3, #3
    4442:	432b      	orrs	r3, r5
    4444:	2501      	movs	r5, #1
    4446:	4699      	mov	r9, r3
    4448:	9b01      	ldr	r3, [sp, #4]
    444a:	2400      	movs	r4, #0
    444c:	401d      	ands	r5, r3
    444e:	e5fc      	b.n	404a <__aeabi_dmul+0xce>
    4450:	2400      	movs	r4, #0
    4452:	e7e2      	b.n	441a <__aeabi_dmul+0x49e>
    4454:	2280      	movs	r2, #128	; 0x80
    4456:	2501      	movs	r5, #1
    4458:	0312      	lsls	r2, r2, #12
    445a:	4322      	orrs	r2, r4
    445c:	9901      	ldr	r1, [sp, #4]
    445e:	0312      	lsls	r2, r2, #12
    4460:	0b12      	lsrs	r2, r2, #12
    4462:	400d      	ands	r5, r1
    4464:	4699      	mov	r9, r3
    4466:	4c04      	ldr	r4, [pc, #16]	; (4478 <__aeabi_dmul+0x4fc>)
    4468:	e5ef      	b.n	404a <__aeabi_dmul+0xce>
    446a:	46c0      	nop			; (mov r8, r8)
    446c:	000003ff 	.word	0x000003ff
    4470:	feffffff 	.word	0xfeffffff
    4474:	000007fe 	.word	0x000007fe
    4478:	000007ff 	.word	0x000007ff

0000447c <__aeabi_dsub>:
    447c:	b5f0      	push	{r4, r5, r6, r7, lr}
    447e:	4646      	mov	r6, r8
    4480:	46d6      	mov	lr, sl
    4482:	464f      	mov	r7, r9
    4484:	030c      	lsls	r4, r1, #12
    4486:	b5c0      	push	{r6, r7, lr}
    4488:	0fcd      	lsrs	r5, r1, #31
    448a:	004e      	lsls	r6, r1, #1
    448c:	0a61      	lsrs	r1, r4, #9
    448e:	0f44      	lsrs	r4, r0, #29
    4490:	430c      	orrs	r4, r1
    4492:	00c1      	lsls	r1, r0, #3
    4494:	0058      	lsls	r0, r3, #1
    4496:	0d40      	lsrs	r0, r0, #21
    4498:	4684      	mov	ip, r0
    449a:	468a      	mov	sl, r1
    449c:	000f      	movs	r7, r1
    449e:	0319      	lsls	r1, r3, #12
    44a0:	0f50      	lsrs	r0, r2, #29
    44a2:	0a49      	lsrs	r1, r1, #9
    44a4:	4301      	orrs	r1, r0
    44a6:	48c6      	ldr	r0, [pc, #792]	; (47c0 <__aeabi_dsub+0x344>)
    44a8:	0d76      	lsrs	r6, r6, #21
    44aa:	46a8      	mov	r8, r5
    44ac:	0fdb      	lsrs	r3, r3, #31
    44ae:	00d2      	lsls	r2, r2, #3
    44b0:	4584      	cmp	ip, r0
    44b2:	d100      	bne.n	44b6 <__aeabi_dsub+0x3a>
    44b4:	e0d8      	b.n	4668 <__aeabi_dsub+0x1ec>
    44b6:	2001      	movs	r0, #1
    44b8:	4043      	eors	r3, r0
    44ba:	42ab      	cmp	r3, r5
    44bc:	d100      	bne.n	44c0 <__aeabi_dsub+0x44>
    44be:	e0a6      	b.n	460e <__aeabi_dsub+0x192>
    44c0:	4660      	mov	r0, ip
    44c2:	1a35      	subs	r5, r6, r0
    44c4:	2d00      	cmp	r5, #0
    44c6:	dc00      	bgt.n	44ca <__aeabi_dsub+0x4e>
    44c8:	e105      	b.n	46d6 <__aeabi_dsub+0x25a>
    44ca:	2800      	cmp	r0, #0
    44cc:	d110      	bne.n	44f0 <__aeabi_dsub+0x74>
    44ce:	000b      	movs	r3, r1
    44d0:	4313      	orrs	r3, r2
    44d2:	d100      	bne.n	44d6 <__aeabi_dsub+0x5a>
    44d4:	e0d7      	b.n	4686 <__aeabi_dsub+0x20a>
    44d6:	1e6b      	subs	r3, r5, #1
    44d8:	2b00      	cmp	r3, #0
    44da:	d000      	beq.n	44de <__aeabi_dsub+0x62>
    44dc:	e14b      	b.n	4776 <__aeabi_dsub+0x2fa>
    44de:	4653      	mov	r3, sl
    44e0:	1a9f      	subs	r7, r3, r2
    44e2:	45ba      	cmp	sl, r7
    44e4:	4180      	sbcs	r0, r0
    44e6:	1a64      	subs	r4, r4, r1
    44e8:	4240      	negs	r0, r0
    44ea:	1a24      	subs	r4, r4, r0
    44ec:	2601      	movs	r6, #1
    44ee:	e01e      	b.n	452e <__aeabi_dsub+0xb2>
    44f0:	4bb3      	ldr	r3, [pc, #716]	; (47c0 <__aeabi_dsub+0x344>)
    44f2:	429e      	cmp	r6, r3
    44f4:	d048      	beq.n	4588 <__aeabi_dsub+0x10c>
    44f6:	2380      	movs	r3, #128	; 0x80
    44f8:	041b      	lsls	r3, r3, #16
    44fa:	4319      	orrs	r1, r3
    44fc:	2d38      	cmp	r5, #56	; 0x38
    44fe:	dd00      	ble.n	4502 <__aeabi_dsub+0x86>
    4500:	e119      	b.n	4736 <__aeabi_dsub+0x2ba>
    4502:	2d1f      	cmp	r5, #31
    4504:	dd00      	ble.n	4508 <__aeabi_dsub+0x8c>
    4506:	e14c      	b.n	47a2 <__aeabi_dsub+0x326>
    4508:	2320      	movs	r3, #32
    450a:	000f      	movs	r7, r1
    450c:	1b5b      	subs	r3, r3, r5
    450e:	0010      	movs	r0, r2
    4510:	409a      	lsls	r2, r3
    4512:	409f      	lsls	r7, r3
    4514:	40e8      	lsrs	r0, r5
    4516:	1e53      	subs	r3, r2, #1
    4518:	419a      	sbcs	r2, r3
    451a:	40e9      	lsrs	r1, r5
    451c:	4307      	orrs	r7, r0
    451e:	4317      	orrs	r7, r2
    4520:	4653      	mov	r3, sl
    4522:	1bdf      	subs	r7, r3, r7
    4524:	1a61      	subs	r1, r4, r1
    4526:	45ba      	cmp	sl, r7
    4528:	41a4      	sbcs	r4, r4
    452a:	4264      	negs	r4, r4
    452c:	1b0c      	subs	r4, r1, r4
    452e:	0223      	lsls	r3, r4, #8
    4530:	d400      	bmi.n	4534 <__aeabi_dsub+0xb8>
    4532:	e0c5      	b.n	46c0 <__aeabi_dsub+0x244>
    4534:	0264      	lsls	r4, r4, #9
    4536:	0a65      	lsrs	r5, r4, #9
    4538:	2d00      	cmp	r5, #0
    453a:	d100      	bne.n	453e <__aeabi_dsub+0xc2>
    453c:	e0f6      	b.n	472c <__aeabi_dsub+0x2b0>
    453e:	0028      	movs	r0, r5
    4540:	f000 fb1e 	bl	4b80 <__clzsi2>
    4544:	0003      	movs	r3, r0
    4546:	3b08      	subs	r3, #8
    4548:	2b1f      	cmp	r3, #31
    454a:	dd00      	ble.n	454e <__aeabi_dsub+0xd2>
    454c:	e0e9      	b.n	4722 <__aeabi_dsub+0x2a6>
    454e:	2220      	movs	r2, #32
    4550:	003c      	movs	r4, r7
    4552:	1ad2      	subs	r2, r2, r3
    4554:	409d      	lsls	r5, r3
    4556:	40d4      	lsrs	r4, r2
    4558:	409f      	lsls	r7, r3
    455a:	4325      	orrs	r5, r4
    455c:	429e      	cmp	r6, r3
    455e:	dd00      	ble.n	4562 <__aeabi_dsub+0xe6>
    4560:	e0db      	b.n	471a <__aeabi_dsub+0x29e>
    4562:	1b9e      	subs	r6, r3, r6
    4564:	1c73      	adds	r3, r6, #1
    4566:	2b1f      	cmp	r3, #31
    4568:	dd00      	ble.n	456c <__aeabi_dsub+0xf0>
    456a:	e10a      	b.n	4782 <__aeabi_dsub+0x306>
    456c:	2220      	movs	r2, #32
    456e:	0038      	movs	r0, r7
    4570:	1ad2      	subs	r2, r2, r3
    4572:	0029      	movs	r1, r5
    4574:	4097      	lsls	r7, r2
    4576:	002c      	movs	r4, r5
    4578:	4091      	lsls	r1, r2
    457a:	40d8      	lsrs	r0, r3
    457c:	1e7a      	subs	r2, r7, #1
    457e:	4197      	sbcs	r7, r2
    4580:	40dc      	lsrs	r4, r3
    4582:	2600      	movs	r6, #0
    4584:	4301      	orrs	r1, r0
    4586:	430f      	orrs	r7, r1
    4588:	077b      	lsls	r3, r7, #29
    458a:	d009      	beq.n	45a0 <__aeabi_dsub+0x124>
    458c:	230f      	movs	r3, #15
    458e:	403b      	ands	r3, r7
    4590:	2b04      	cmp	r3, #4
    4592:	d005      	beq.n	45a0 <__aeabi_dsub+0x124>
    4594:	1d3b      	adds	r3, r7, #4
    4596:	42bb      	cmp	r3, r7
    4598:	41bf      	sbcs	r7, r7
    459a:	427f      	negs	r7, r7
    459c:	19e4      	adds	r4, r4, r7
    459e:	001f      	movs	r7, r3
    45a0:	0223      	lsls	r3, r4, #8
    45a2:	d525      	bpl.n	45f0 <__aeabi_dsub+0x174>
    45a4:	4b86      	ldr	r3, [pc, #536]	; (47c0 <__aeabi_dsub+0x344>)
    45a6:	3601      	adds	r6, #1
    45a8:	429e      	cmp	r6, r3
    45aa:	d100      	bne.n	45ae <__aeabi_dsub+0x132>
    45ac:	e0af      	b.n	470e <__aeabi_dsub+0x292>
    45ae:	4b85      	ldr	r3, [pc, #532]	; (47c4 <__aeabi_dsub+0x348>)
    45b0:	2501      	movs	r5, #1
    45b2:	401c      	ands	r4, r3
    45b4:	4643      	mov	r3, r8
    45b6:	0762      	lsls	r2, r4, #29
    45b8:	08ff      	lsrs	r7, r7, #3
    45ba:	0264      	lsls	r4, r4, #9
    45bc:	0576      	lsls	r6, r6, #21
    45be:	4317      	orrs	r7, r2
    45c0:	0b24      	lsrs	r4, r4, #12
    45c2:	0d76      	lsrs	r6, r6, #21
    45c4:	401d      	ands	r5, r3
    45c6:	2100      	movs	r1, #0
    45c8:	0324      	lsls	r4, r4, #12
    45ca:	0b23      	lsrs	r3, r4, #12
    45cc:	0d0c      	lsrs	r4, r1, #20
    45ce:	4a7e      	ldr	r2, [pc, #504]	; (47c8 <__aeabi_dsub+0x34c>)
    45d0:	0524      	lsls	r4, r4, #20
    45d2:	431c      	orrs	r4, r3
    45d4:	4014      	ands	r4, r2
    45d6:	0533      	lsls	r3, r6, #20
    45d8:	4323      	orrs	r3, r4
    45da:	005b      	lsls	r3, r3, #1
    45dc:	07ed      	lsls	r5, r5, #31
    45de:	085b      	lsrs	r3, r3, #1
    45e0:	432b      	orrs	r3, r5
    45e2:	0038      	movs	r0, r7
    45e4:	0019      	movs	r1, r3
    45e6:	bc1c      	pop	{r2, r3, r4}
    45e8:	4690      	mov	r8, r2
    45ea:	4699      	mov	r9, r3
    45ec:	46a2      	mov	sl, r4
    45ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
    45f0:	2501      	movs	r5, #1
    45f2:	4643      	mov	r3, r8
    45f4:	0762      	lsls	r2, r4, #29
    45f6:	08ff      	lsrs	r7, r7, #3
    45f8:	4317      	orrs	r7, r2
    45fa:	08e4      	lsrs	r4, r4, #3
    45fc:	401d      	ands	r5, r3
    45fe:	4b70      	ldr	r3, [pc, #448]	; (47c0 <__aeabi_dsub+0x344>)
    4600:	429e      	cmp	r6, r3
    4602:	d036      	beq.n	4672 <__aeabi_dsub+0x1f6>
    4604:	0324      	lsls	r4, r4, #12
    4606:	0576      	lsls	r6, r6, #21
    4608:	0b24      	lsrs	r4, r4, #12
    460a:	0d76      	lsrs	r6, r6, #21
    460c:	e7db      	b.n	45c6 <__aeabi_dsub+0x14a>
    460e:	4663      	mov	r3, ip
    4610:	1af3      	subs	r3, r6, r3
    4612:	2b00      	cmp	r3, #0
    4614:	dc00      	bgt.n	4618 <__aeabi_dsub+0x19c>
    4616:	e094      	b.n	4742 <__aeabi_dsub+0x2c6>
    4618:	4660      	mov	r0, ip
    461a:	2800      	cmp	r0, #0
    461c:	d035      	beq.n	468a <__aeabi_dsub+0x20e>
    461e:	4868      	ldr	r0, [pc, #416]	; (47c0 <__aeabi_dsub+0x344>)
    4620:	4286      	cmp	r6, r0
    4622:	d0b1      	beq.n	4588 <__aeabi_dsub+0x10c>
    4624:	2780      	movs	r7, #128	; 0x80
    4626:	043f      	lsls	r7, r7, #16
    4628:	4339      	orrs	r1, r7
    462a:	2b38      	cmp	r3, #56	; 0x38
    462c:	dc00      	bgt.n	4630 <__aeabi_dsub+0x1b4>
    462e:	e0fd      	b.n	482c <__aeabi_dsub+0x3b0>
    4630:	430a      	orrs	r2, r1
    4632:	0017      	movs	r7, r2
    4634:	2100      	movs	r1, #0
    4636:	1e7a      	subs	r2, r7, #1
    4638:	4197      	sbcs	r7, r2
    463a:	4457      	add	r7, sl
    463c:	4557      	cmp	r7, sl
    463e:	4180      	sbcs	r0, r0
    4640:	1909      	adds	r1, r1, r4
    4642:	4244      	negs	r4, r0
    4644:	190c      	adds	r4, r1, r4
    4646:	0223      	lsls	r3, r4, #8
    4648:	d53a      	bpl.n	46c0 <__aeabi_dsub+0x244>
    464a:	4b5d      	ldr	r3, [pc, #372]	; (47c0 <__aeabi_dsub+0x344>)
    464c:	3601      	adds	r6, #1
    464e:	429e      	cmp	r6, r3
    4650:	d100      	bne.n	4654 <__aeabi_dsub+0x1d8>
    4652:	e14b      	b.n	48ec <__aeabi_dsub+0x470>
    4654:	2201      	movs	r2, #1
    4656:	4b5b      	ldr	r3, [pc, #364]	; (47c4 <__aeabi_dsub+0x348>)
    4658:	401c      	ands	r4, r3
    465a:	087b      	lsrs	r3, r7, #1
    465c:	4017      	ands	r7, r2
    465e:	431f      	orrs	r7, r3
    4660:	07e2      	lsls	r2, r4, #31
    4662:	4317      	orrs	r7, r2
    4664:	0864      	lsrs	r4, r4, #1
    4666:	e78f      	b.n	4588 <__aeabi_dsub+0x10c>
    4668:	0008      	movs	r0, r1
    466a:	4310      	orrs	r0, r2
    466c:	d000      	beq.n	4670 <__aeabi_dsub+0x1f4>
    466e:	e724      	b.n	44ba <__aeabi_dsub+0x3e>
    4670:	e721      	b.n	44b6 <__aeabi_dsub+0x3a>
    4672:	0023      	movs	r3, r4
    4674:	433b      	orrs	r3, r7
    4676:	d100      	bne.n	467a <__aeabi_dsub+0x1fe>
    4678:	e1b9      	b.n	49ee <__aeabi_dsub+0x572>
    467a:	2280      	movs	r2, #128	; 0x80
    467c:	0312      	lsls	r2, r2, #12
    467e:	4314      	orrs	r4, r2
    4680:	0324      	lsls	r4, r4, #12
    4682:	0b24      	lsrs	r4, r4, #12
    4684:	e79f      	b.n	45c6 <__aeabi_dsub+0x14a>
    4686:	002e      	movs	r6, r5
    4688:	e77e      	b.n	4588 <__aeabi_dsub+0x10c>
    468a:	0008      	movs	r0, r1
    468c:	4310      	orrs	r0, r2
    468e:	d100      	bne.n	4692 <__aeabi_dsub+0x216>
    4690:	e0ca      	b.n	4828 <__aeabi_dsub+0x3ac>
    4692:	1e58      	subs	r0, r3, #1
    4694:	4684      	mov	ip, r0
    4696:	2800      	cmp	r0, #0
    4698:	d000      	beq.n	469c <__aeabi_dsub+0x220>
    469a:	e0e7      	b.n	486c <__aeabi_dsub+0x3f0>
    469c:	4452      	add	r2, sl
    469e:	4552      	cmp	r2, sl
    46a0:	4180      	sbcs	r0, r0
    46a2:	1864      	adds	r4, r4, r1
    46a4:	4240      	negs	r0, r0
    46a6:	1824      	adds	r4, r4, r0
    46a8:	0017      	movs	r7, r2
    46aa:	2601      	movs	r6, #1
    46ac:	0223      	lsls	r3, r4, #8
    46ae:	d507      	bpl.n	46c0 <__aeabi_dsub+0x244>
    46b0:	2602      	movs	r6, #2
    46b2:	e7cf      	b.n	4654 <__aeabi_dsub+0x1d8>
    46b4:	4664      	mov	r4, ip
    46b6:	432c      	orrs	r4, r5
    46b8:	d100      	bne.n	46bc <__aeabi_dsub+0x240>
    46ba:	e1b3      	b.n	4a24 <__aeabi_dsub+0x5a8>
    46bc:	002c      	movs	r4, r5
    46be:	4667      	mov	r7, ip
    46c0:	077b      	lsls	r3, r7, #29
    46c2:	d000      	beq.n	46c6 <__aeabi_dsub+0x24a>
    46c4:	e762      	b.n	458c <__aeabi_dsub+0x110>
    46c6:	0763      	lsls	r3, r4, #29
    46c8:	08ff      	lsrs	r7, r7, #3
    46ca:	431f      	orrs	r7, r3
    46cc:	2501      	movs	r5, #1
    46ce:	4643      	mov	r3, r8
    46d0:	08e4      	lsrs	r4, r4, #3
    46d2:	401d      	ands	r5, r3
    46d4:	e793      	b.n	45fe <__aeabi_dsub+0x182>
    46d6:	2d00      	cmp	r5, #0
    46d8:	d178      	bne.n	47cc <__aeabi_dsub+0x350>
    46da:	1c75      	adds	r5, r6, #1
    46dc:	056d      	lsls	r5, r5, #21
    46de:	0d6d      	lsrs	r5, r5, #21
    46e0:	2d01      	cmp	r5, #1
    46e2:	dc00      	bgt.n	46e6 <__aeabi_dsub+0x26a>
    46e4:	e0f2      	b.n	48cc <__aeabi_dsub+0x450>
    46e6:	4650      	mov	r0, sl
    46e8:	1a80      	subs	r0, r0, r2
    46ea:	4582      	cmp	sl, r0
    46ec:	41bf      	sbcs	r7, r7
    46ee:	1a65      	subs	r5, r4, r1
    46f0:	427f      	negs	r7, r7
    46f2:	1bed      	subs	r5, r5, r7
    46f4:	4684      	mov	ip, r0
    46f6:	0228      	lsls	r0, r5, #8
    46f8:	d400      	bmi.n	46fc <__aeabi_dsub+0x280>
    46fa:	e08c      	b.n	4816 <__aeabi_dsub+0x39a>
    46fc:	4650      	mov	r0, sl
    46fe:	1a17      	subs	r7, r2, r0
    4700:	42ba      	cmp	r2, r7
    4702:	4192      	sbcs	r2, r2
    4704:	1b0c      	subs	r4, r1, r4
    4706:	4255      	negs	r5, r2
    4708:	1b65      	subs	r5, r4, r5
    470a:	4698      	mov	r8, r3
    470c:	e714      	b.n	4538 <__aeabi_dsub+0xbc>
    470e:	2501      	movs	r5, #1
    4710:	4643      	mov	r3, r8
    4712:	2400      	movs	r4, #0
    4714:	401d      	ands	r5, r3
    4716:	2700      	movs	r7, #0
    4718:	e755      	b.n	45c6 <__aeabi_dsub+0x14a>
    471a:	4c2a      	ldr	r4, [pc, #168]	; (47c4 <__aeabi_dsub+0x348>)
    471c:	1af6      	subs	r6, r6, r3
    471e:	402c      	ands	r4, r5
    4720:	e732      	b.n	4588 <__aeabi_dsub+0x10c>
    4722:	003d      	movs	r5, r7
    4724:	3828      	subs	r0, #40	; 0x28
    4726:	4085      	lsls	r5, r0
    4728:	2700      	movs	r7, #0
    472a:	e717      	b.n	455c <__aeabi_dsub+0xe0>
    472c:	0038      	movs	r0, r7
    472e:	f000 fa27 	bl	4b80 <__clzsi2>
    4732:	3020      	adds	r0, #32
    4734:	e706      	b.n	4544 <__aeabi_dsub+0xc8>
    4736:	430a      	orrs	r2, r1
    4738:	0017      	movs	r7, r2
    473a:	2100      	movs	r1, #0
    473c:	1e7a      	subs	r2, r7, #1
    473e:	4197      	sbcs	r7, r2
    4740:	e6ee      	b.n	4520 <__aeabi_dsub+0xa4>
    4742:	2b00      	cmp	r3, #0
    4744:	d000      	beq.n	4748 <__aeabi_dsub+0x2cc>
    4746:	e0e5      	b.n	4914 <__aeabi_dsub+0x498>
    4748:	1c73      	adds	r3, r6, #1
    474a:	469c      	mov	ip, r3
    474c:	055b      	lsls	r3, r3, #21
    474e:	0d5b      	lsrs	r3, r3, #21
    4750:	2b01      	cmp	r3, #1
    4752:	dc00      	bgt.n	4756 <__aeabi_dsub+0x2da>
    4754:	e09f      	b.n	4896 <__aeabi_dsub+0x41a>
    4756:	4b1a      	ldr	r3, [pc, #104]	; (47c0 <__aeabi_dsub+0x344>)
    4758:	459c      	cmp	ip, r3
    475a:	d100      	bne.n	475e <__aeabi_dsub+0x2e2>
    475c:	e0c5      	b.n	48ea <__aeabi_dsub+0x46e>
    475e:	4452      	add	r2, sl
    4760:	4552      	cmp	r2, sl
    4762:	4180      	sbcs	r0, r0
    4764:	1864      	adds	r4, r4, r1
    4766:	4240      	negs	r0, r0
    4768:	1824      	adds	r4, r4, r0
    476a:	07e7      	lsls	r7, r4, #31
    476c:	0852      	lsrs	r2, r2, #1
    476e:	4317      	orrs	r7, r2
    4770:	0864      	lsrs	r4, r4, #1
    4772:	4666      	mov	r6, ip
    4774:	e708      	b.n	4588 <__aeabi_dsub+0x10c>
    4776:	4812      	ldr	r0, [pc, #72]	; (47c0 <__aeabi_dsub+0x344>)
    4778:	4285      	cmp	r5, r0
    477a:	d100      	bne.n	477e <__aeabi_dsub+0x302>
    477c:	e085      	b.n	488a <__aeabi_dsub+0x40e>
    477e:	001d      	movs	r5, r3
    4780:	e6bc      	b.n	44fc <__aeabi_dsub+0x80>
    4782:	0029      	movs	r1, r5
    4784:	3e1f      	subs	r6, #31
    4786:	40f1      	lsrs	r1, r6
    4788:	2b20      	cmp	r3, #32
    478a:	d100      	bne.n	478e <__aeabi_dsub+0x312>
    478c:	e07f      	b.n	488e <__aeabi_dsub+0x412>
    478e:	2240      	movs	r2, #64	; 0x40
    4790:	1ad3      	subs	r3, r2, r3
    4792:	409d      	lsls	r5, r3
    4794:	432f      	orrs	r7, r5
    4796:	1e7d      	subs	r5, r7, #1
    4798:	41af      	sbcs	r7, r5
    479a:	2400      	movs	r4, #0
    479c:	430f      	orrs	r7, r1
    479e:	2600      	movs	r6, #0
    47a0:	e78e      	b.n	46c0 <__aeabi_dsub+0x244>
    47a2:	002b      	movs	r3, r5
    47a4:	000f      	movs	r7, r1
    47a6:	3b20      	subs	r3, #32
    47a8:	40df      	lsrs	r7, r3
    47aa:	2d20      	cmp	r5, #32
    47ac:	d071      	beq.n	4892 <__aeabi_dsub+0x416>
    47ae:	2340      	movs	r3, #64	; 0x40
    47b0:	1b5d      	subs	r5, r3, r5
    47b2:	40a9      	lsls	r1, r5
    47b4:	430a      	orrs	r2, r1
    47b6:	1e51      	subs	r1, r2, #1
    47b8:	418a      	sbcs	r2, r1
    47ba:	2100      	movs	r1, #0
    47bc:	4317      	orrs	r7, r2
    47be:	e6af      	b.n	4520 <__aeabi_dsub+0xa4>
    47c0:	000007ff 	.word	0x000007ff
    47c4:	ff7fffff 	.word	0xff7fffff
    47c8:	800fffff 	.word	0x800fffff
    47cc:	2e00      	cmp	r6, #0
    47ce:	d03e      	beq.n	484e <__aeabi_dsub+0x3d2>
    47d0:	4eb3      	ldr	r6, [pc, #716]	; (4aa0 <__aeabi_dsub+0x624>)
    47d2:	45b4      	cmp	ip, r6
    47d4:	d045      	beq.n	4862 <__aeabi_dsub+0x3e6>
    47d6:	2680      	movs	r6, #128	; 0x80
    47d8:	0436      	lsls	r6, r6, #16
    47da:	426d      	negs	r5, r5
    47dc:	4334      	orrs	r4, r6
    47de:	2d38      	cmp	r5, #56	; 0x38
    47e0:	dd00      	ble.n	47e4 <__aeabi_dsub+0x368>
    47e2:	e0a8      	b.n	4936 <__aeabi_dsub+0x4ba>
    47e4:	2d1f      	cmp	r5, #31
    47e6:	dd00      	ble.n	47ea <__aeabi_dsub+0x36e>
    47e8:	e11f      	b.n	4a2a <__aeabi_dsub+0x5ae>
    47ea:	2620      	movs	r6, #32
    47ec:	0027      	movs	r7, r4
    47ee:	4650      	mov	r0, sl
    47f0:	1b76      	subs	r6, r6, r5
    47f2:	40b7      	lsls	r7, r6
    47f4:	40e8      	lsrs	r0, r5
    47f6:	4307      	orrs	r7, r0
    47f8:	4650      	mov	r0, sl
    47fa:	40b0      	lsls	r0, r6
    47fc:	1e46      	subs	r6, r0, #1
    47fe:	41b0      	sbcs	r0, r6
    4800:	40ec      	lsrs	r4, r5
    4802:	4338      	orrs	r0, r7
    4804:	1a17      	subs	r7, r2, r0
    4806:	42ba      	cmp	r2, r7
    4808:	4192      	sbcs	r2, r2
    480a:	1b0c      	subs	r4, r1, r4
    480c:	4252      	negs	r2, r2
    480e:	1aa4      	subs	r4, r4, r2
    4810:	4666      	mov	r6, ip
    4812:	4698      	mov	r8, r3
    4814:	e68b      	b.n	452e <__aeabi_dsub+0xb2>
    4816:	4664      	mov	r4, ip
    4818:	4667      	mov	r7, ip
    481a:	432c      	orrs	r4, r5
    481c:	d000      	beq.n	4820 <__aeabi_dsub+0x3a4>
    481e:	e68b      	b.n	4538 <__aeabi_dsub+0xbc>
    4820:	2500      	movs	r5, #0
    4822:	2600      	movs	r6, #0
    4824:	2700      	movs	r7, #0
    4826:	e6ea      	b.n	45fe <__aeabi_dsub+0x182>
    4828:	001e      	movs	r6, r3
    482a:	e6ad      	b.n	4588 <__aeabi_dsub+0x10c>
    482c:	2b1f      	cmp	r3, #31
    482e:	dc60      	bgt.n	48f2 <__aeabi_dsub+0x476>
    4830:	2720      	movs	r7, #32
    4832:	1af8      	subs	r0, r7, r3
    4834:	000f      	movs	r7, r1
    4836:	4684      	mov	ip, r0
    4838:	4087      	lsls	r7, r0
    483a:	0010      	movs	r0, r2
    483c:	40d8      	lsrs	r0, r3
    483e:	4307      	orrs	r7, r0
    4840:	4660      	mov	r0, ip
    4842:	4082      	lsls	r2, r0
    4844:	1e50      	subs	r0, r2, #1
    4846:	4182      	sbcs	r2, r0
    4848:	40d9      	lsrs	r1, r3
    484a:	4317      	orrs	r7, r2
    484c:	e6f5      	b.n	463a <__aeabi_dsub+0x1be>
    484e:	0026      	movs	r6, r4
    4850:	4650      	mov	r0, sl
    4852:	4306      	orrs	r6, r0
    4854:	d005      	beq.n	4862 <__aeabi_dsub+0x3e6>
    4856:	43ed      	mvns	r5, r5
    4858:	2d00      	cmp	r5, #0
    485a:	d0d3      	beq.n	4804 <__aeabi_dsub+0x388>
    485c:	4e90      	ldr	r6, [pc, #576]	; (4aa0 <__aeabi_dsub+0x624>)
    485e:	45b4      	cmp	ip, r6
    4860:	d1bd      	bne.n	47de <__aeabi_dsub+0x362>
    4862:	000c      	movs	r4, r1
    4864:	0017      	movs	r7, r2
    4866:	4666      	mov	r6, ip
    4868:	4698      	mov	r8, r3
    486a:	e68d      	b.n	4588 <__aeabi_dsub+0x10c>
    486c:	488c      	ldr	r0, [pc, #560]	; (4aa0 <__aeabi_dsub+0x624>)
    486e:	4283      	cmp	r3, r0
    4870:	d00b      	beq.n	488a <__aeabi_dsub+0x40e>
    4872:	4663      	mov	r3, ip
    4874:	e6d9      	b.n	462a <__aeabi_dsub+0x1ae>
    4876:	2d00      	cmp	r5, #0
    4878:	d000      	beq.n	487c <__aeabi_dsub+0x400>
    487a:	e096      	b.n	49aa <__aeabi_dsub+0x52e>
    487c:	0008      	movs	r0, r1
    487e:	4310      	orrs	r0, r2
    4880:	d100      	bne.n	4884 <__aeabi_dsub+0x408>
    4882:	e0e2      	b.n	4a4a <__aeabi_dsub+0x5ce>
    4884:	000c      	movs	r4, r1
    4886:	0017      	movs	r7, r2
    4888:	4698      	mov	r8, r3
    488a:	4e85      	ldr	r6, [pc, #532]	; (4aa0 <__aeabi_dsub+0x624>)
    488c:	e67c      	b.n	4588 <__aeabi_dsub+0x10c>
    488e:	2500      	movs	r5, #0
    4890:	e780      	b.n	4794 <__aeabi_dsub+0x318>
    4892:	2100      	movs	r1, #0
    4894:	e78e      	b.n	47b4 <__aeabi_dsub+0x338>
    4896:	0023      	movs	r3, r4
    4898:	4650      	mov	r0, sl
    489a:	4303      	orrs	r3, r0
    489c:	2e00      	cmp	r6, #0
    489e:	d000      	beq.n	48a2 <__aeabi_dsub+0x426>
    48a0:	e0a8      	b.n	49f4 <__aeabi_dsub+0x578>
    48a2:	2b00      	cmp	r3, #0
    48a4:	d100      	bne.n	48a8 <__aeabi_dsub+0x42c>
    48a6:	e0de      	b.n	4a66 <__aeabi_dsub+0x5ea>
    48a8:	000b      	movs	r3, r1
    48aa:	4313      	orrs	r3, r2
    48ac:	d100      	bne.n	48b0 <__aeabi_dsub+0x434>
    48ae:	e66b      	b.n	4588 <__aeabi_dsub+0x10c>
    48b0:	4452      	add	r2, sl
    48b2:	4552      	cmp	r2, sl
    48b4:	4180      	sbcs	r0, r0
    48b6:	1864      	adds	r4, r4, r1
    48b8:	4240      	negs	r0, r0
    48ba:	1824      	adds	r4, r4, r0
    48bc:	0017      	movs	r7, r2
    48be:	0223      	lsls	r3, r4, #8
    48c0:	d400      	bmi.n	48c4 <__aeabi_dsub+0x448>
    48c2:	e6fd      	b.n	46c0 <__aeabi_dsub+0x244>
    48c4:	4b77      	ldr	r3, [pc, #476]	; (4aa4 <__aeabi_dsub+0x628>)
    48c6:	4666      	mov	r6, ip
    48c8:	401c      	ands	r4, r3
    48ca:	e65d      	b.n	4588 <__aeabi_dsub+0x10c>
    48cc:	0025      	movs	r5, r4
    48ce:	4650      	mov	r0, sl
    48d0:	4305      	orrs	r5, r0
    48d2:	2e00      	cmp	r6, #0
    48d4:	d1cf      	bne.n	4876 <__aeabi_dsub+0x3fa>
    48d6:	2d00      	cmp	r5, #0
    48d8:	d14f      	bne.n	497a <__aeabi_dsub+0x4fe>
    48da:	000c      	movs	r4, r1
    48dc:	4314      	orrs	r4, r2
    48de:	d100      	bne.n	48e2 <__aeabi_dsub+0x466>
    48e0:	e0a0      	b.n	4a24 <__aeabi_dsub+0x5a8>
    48e2:	000c      	movs	r4, r1
    48e4:	0017      	movs	r7, r2
    48e6:	4698      	mov	r8, r3
    48e8:	e64e      	b.n	4588 <__aeabi_dsub+0x10c>
    48ea:	4666      	mov	r6, ip
    48ec:	2400      	movs	r4, #0
    48ee:	2700      	movs	r7, #0
    48f0:	e685      	b.n	45fe <__aeabi_dsub+0x182>
    48f2:	001f      	movs	r7, r3
    48f4:	0008      	movs	r0, r1
    48f6:	3f20      	subs	r7, #32
    48f8:	40f8      	lsrs	r0, r7
    48fa:	0007      	movs	r7, r0
    48fc:	2b20      	cmp	r3, #32
    48fe:	d100      	bne.n	4902 <__aeabi_dsub+0x486>
    4900:	e08e      	b.n	4a20 <__aeabi_dsub+0x5a4>
    4902:	2040      	movs	r0, #64	; 0x40
    4904:	1ac3      	subs	r3, r0, r3
    4906:	4099      	lsls	r1, r3
    4908:	430a      	orrs	r2, r1
    490a:	1e51      	subs	r1, r2, #1
    490c:	418a      	sbcs	r2, r1
    490e:	2100      	movs	r1, #0
    4910:	4317      	orrs	r7, r2
    4912:	e692      	b.n	463a <__aeabi_dsub+0x1be>
    4914:	2e00      	cmp	r6, #0
    4916:	d114      	bne.n	4942 <__aeabi_dsub+0x4c6>
    4918:	0026      	movs	r6, r4
    491a:	4650      	mov	r0, sl
    491c:	4306      	orrs	r6, r0
    491e:	d062      	beq.n	49e6 <__aeabi_dsub+0x56a>
    4920:	43db      	mvns	r3, r3
    4922:	2b00      	cmp	r3, #0
    4924:	d15c      	bne.n	49e0 <__aeabi_dsub+0x564>
    4926:	1887      	adds	r7, r0, r2
    4928:	4297      	cmp	r7, r2
    492a:	4192      	sbcs	r2, r2
    492c:	1864      	adds	r4, r4, r1
    492e:	4252      	negs	r2, r2
    4930:	18a4      	adds	r4, r4, r2
    4932:	4666      	mov	r6, ip
    4934:	e687      	b.n	4646 <__aeabi_dsub+0x1ca>
    4936:	4650      	mov	r0, sl
    4938:	4320      	orrs	r0, r4
    493a:	1e44      	subs	r4, r0, #1
    493c:	41a0      	sbcs	r0, r4
    493e:	2400      	movs	r4, #0
    4940:	e760      	b.n	4804 <__aeabi_dsub+0x388>
    4942:	4e57      	ldr	r6, [pc, #348]	; (4aa0 <__aeabi_dsub+0x624>)
    4944:	45b4      	cmp	ip, r6
    4946:	d04e      	beq.n	49e6 <__aeabi_dsub+0x56a>
    4948:	2680      	movs	r6, #128	; 0x80
    494a:	0436      	lsls	r6, r6, #16
    494c:	425b      	negs	r3, r3
    494e:	4334      	orrs	r4, r6
    4950:	2b38      	cmp	r3, #56	; 0x38
    4952:	dd00      	ble.n	4956 <__aeabi_dsub+0x4da>
    4954:	e07f      	b.n	4a56 <__aeabi_dsub+0x5da>
    4956:	2b1f      	cmp	r3, #31
    4958:	dd00      	ble.n	495c <__aeabi_dsub+0x4e0>
    495a:	e08b      	b.n	4a74 <__aeabi_dsub+0x5f8>
    495c:	2620      	movs	r6, #32
    495e:	0027      	movs	r7, r4
    4960:	4650      	mov	r0, sl
    4962:	1af6      	subs	r6, r6, r3
    4964:	40b7      	lsls	r7, r6
    4966:	40d8      	lsrs	r0, r3
    4968:	4307      	orrs	r7, r0
    496a:	4650      	mov	r0, sl
    496c:	40b0      	lsls	r0, r6
    496e:	1e46      	subs	r6, r0, #1
    4970:	41b0      	sbcs	r0, r6
    4972:	4307      	orrs	r7, r0
    4974:	40dc      	lsrs	r4, r3
    4976:	18bf      	adds	r7, r7, r2
    4978:	e7d6      	b.n	4928 <__aeabi_dsub+0x4ac>
    497a:	000d      	movs	r5, r1
    497c:	4315      	orrs	r5, r2
    497e:	d100      	bne.n	4982 <__aeabi_dsub+0x506>
    4980:	e602      	b.n	4588 <__aeabi_dsub+0x10c>
    4982:	4650      	mov	r0, sl
    4984:	1a80      	subs	r0, r0, r2
    4986:	4582      	cmp	sl, r0
    4988:	41bf      	sbcs	r7, r7
    498a:	1a65      	subs	r5, r4, r1
    498c:	427f      	negs	r7, r7
    498e:	1bed      	subs	r5, r5, r7
    4990:	4684      	mov	ip, r0
    4992:	0228      	lsls	r0, r5, #8
    4994:	d400      	bmi.n	4998 <__aeabi_dsub+0x51c>
    4996:	e68d      	b.n	46b4 <__aeabi_dsub+0x238>
    4998:	4650      	mov	r0, sl
    499a:	1a17      	subs	r7, r2, r0
    499c:	42ba      	cmp	r2, r7
    499e:	4192      	sbcs	r2, r2
    49a0:	1b0c      	subs	r4, r1, r4
    49a2:	4252      	negs	r2, r2
    49a4:	1aa4      	subs	r4, r4, r2
    49a6:	4698      	mov	r8, r3
    49a8:	e5ee      	b.n	4588 <__aeabi_dsub+0x10c>
    49aa:	000d      	movs	r5, r1
    49ac:	4315      	orrs	r5, r2
    49ae:	d100      	bne.n	49b2 <__aeabi_dsub+0x536>
    49b0:	e76b      	b.n	488a <__aeabi_dsub+0x40e>
    49b2:	4650      	mov	r0, sl
    49b4:	0767      	lsls	r7, r4, #29
    49b6:	08c0      	lsrs	r0, r0, #3
    49b8:	4307      	orrs	r7, r0
    49ba:	2080      	movs	r0, #128	; 0x80
    49bc:	08e4      	lsrs	r4, r4, #3
    49be:	0300      	lsls	r0, r0, #12
    49c0:	4204      	tst	r4, r0
    49c2:	d007      	beq.n	49d4 <__aeabi_dsub+0x558>
    49c4:	08cd      	lsrs	r5, r1, #3
    49c6:	4205      	tst	r5, r0
    49c8:	d104      	bne.n	49d4 <__aeabi_dsub+0x558>
    49ca:	002c      	movs	r4, r5
    49cc:	4698      	mov	r8, r3
    49ce:	08d7      	lsrs	r7, r2, #3
    49d0:	0749      	lsls	r1, r1, #29
    49d2:	430f      	orrs	r7, r1
    49d4:	0f7b      	lsrs	r3, r7, #29
    49d6:	00e4      	lsls	r4, r4, #3
    49d8:	431c      	orrs	r4, r3
    49da:	00ff      	lsls	r7, r7, #3
    49dc:	4e30      	ldr	r6, [pc, #192]	; (4aa0 <__aeabi_dsub+0x624>)
    49de:	e5d3      	b.n	4588 <__aeabi_dsub+0x10c>
    49e0:	4e2f      	ldr	r6, [pc, #188]	; (4aa0 <__aeabi_dsub+0x624>)
    49e2:	45b4      	cmp	ip, r6
    49e4:	d1b4      	bne.n	4950 <__aeabi_dsub+0x4d4>
    49e6:	000c      	movs	r4, r1
    49e8:	0017      	movs	r7, r2
    49ea:	4666      	mov	r6, ip
    49ec:	e5cc      	b.n	4588 <__aeabi_dsub+0x10c>
    49ee:	2700      	movs	r7, #0
    49f0:	2400      	movs	r4, #0
    49f2:	e5e8      	b.n	45c6 <__aeabi_dsub+0x14a>
    49f4:	2b00      	cmp	r3, #0
    49f6:	d039      	beq.n	4a6c <__aeabi_dsub+0x5f0>
    49f8:	000b      	movs	r3, r1
    49fa:	4313      	orrs	r3, r2
    49fc:	d100      	bne.n	4a00 <__aeabi_dsub+0x584>
    49fe:	e744      	b.n	488a <__aeabi_dsub+0x40e>
    4a00:	08c0      	lsrs	r0, r0, #3
    4a02:	0767      	lsls	r7, r4, #29
    4a04:	4307      	orrs	r7, r0
    4a06:	2080      	movs	r0, #128	; 0x80
    4a08:	08e4      	lsrs	r4, r4, #3
    4a0a:	0300      	lsls	r0, r0, #12
    4a0c:	4204      	tst	r4, r0
    4a0e:	d0e1      	beq.n	49d4 <__aeabi_dsub+0x558>
    4a10:	08cb      	lsrs	r3, r1, #3
    4a12:	4203      	tst	r3, r0
    4a14:	d1de      	bne.n	49d4 <__aeabi_dsub+0x558>
    4a16:	08d7      	lsrs	r7, r2, #3
    4a18:	0749      	lsls	r1, r1, #29
    4a1a:	430f      	orrs	r7, r1
    4a1c:	001c      	movs	r4, r3
    4a1e:	e7d9      	b.n	49d4 <__aeabi_dsub+0x558>
    4a20:	2100      	movs	r1, #0
    4a22:	e771      	b.n	4908 <__aeabi_dsub+0x48c>
    4a24:	2500      	movs	r5, #0
    4a26:	2700      	movs	r7, #0
    4a28:	e5e9      	b.n	45fe <__aeabi_dsub+0x182>
    4a2a:	002e      	movs	r6, r5
    4a2c:	0027      	movs	r7, r4
    4a2e:	3e20      	subs	r6, #32
    4a30:	40f7      	lsrs	r7, r6
    4a32:	2d20      	cmp	r5, #32
    4a34:	d02f      	beq.n	4a96 <__aeabi_dsub+0x61a>
    4a36:	2640      	movs	r6, #64	; 0x40
    4a38:	1b75      	subs	r5, r6, r5
    4a3a:	40ac      	lsls	r4, r5
    4a3c:	4650      	mov	r0, sl
    4a3e:	4320      	orrs	r0, r4
    4a40:	1e44      	subs	r4, r0, #1
    4a42:	41a0      	sbcs	r0, r4
    4a44:	2400      	movs	r4, #0
    4a46:	4338      	orrs	r0, r7
    4a48:	e6dc      	b.n	4804 <__aeabi_dsub+0x388>
    4a4a:	2480      	movs	r4, #128	; 0x80
    4a4c:	2500      	movs	r5, #0
    4a4e:	0324      	lsls	r4, r4, #12
    4a50:	4e13      	ldr	r6, [pc, #76]	; (4aa0 <__aeabi_dsub+0x624>)
    4a52:	2700      	movs	r7, #0
    4a54:	e5d3      	b.n	45fe <__aeabi_dsub+0x182>
    4a56:	4650      	mov	r0, sl
    4a58:	4320      	orrs	r0, r4
    4a5a:	0007      	movs	r7, r0
    4a5c:	1e78      	subs	r0, r7, #1
    4a5e:	4187      	sbcs	r7, r0
    4a60:	2400      	movs	r4, #0
    4a62:	18bf      	adds	r7, r7, r2
    4a64:	e760      	b.n	4928 <__aeabi_dsub+0x4ac>
    4a66:	000c      	movs	r4, r1
    4a68:	0017      	movs	r7, r2
    4a6a:	e58d      	b.n	4588 <__aeabi_dsub+0x10c>
    4a6c:	000c      	movs	r4, r1
    4a6e:	0017      	movs	r7, r2
    4a70:	4e0b      	ldr	r6, [pc, #44]	; (4aa0 <__aeabi_dsub+0x624>)
    4a72:	e589      	b.n	4588 <__aeabi_dsub+0x10c>
    4a74:	001e      	movs	r6, r3
    4a76:	0027      	movs	r7, r4
    4a78:	3e20      	subs	r6, #32
    4a7a:	40f7      	lsrs	r7, r6
    4a7c:	2b20      	cmp	r3, #32
    4a7e:	d00c      	beq.n	4a9a <__aeabi_dsub+0x61e>
    4a80:	2640      	movs	r6, #64	; 0x40
    4a82:	1af3      	subs	r3, r6, r3
    4a84:	409c      	lsls	r4, r3
    4a86:	4650      	mov	r0, sl
    4a88:	4320      	orrs	r0, r4
    4a8a:	1e44      	subs	r4, r0, #1
    4a8c:	41a0      	sbcs	r0, r4
    4a8e:	4307      	orrs	r7, r0
    4a90:	2400      	movs	r4, #0
    4a92:	18bf      	adds	r7, r7, r2
    4a94:	e748      	b.n	4928 <__aeabi_dsub+0x4ac>
    4a96:	2400      	movs	r4, #0
    4a98:	e7d0      	b.n	4a3c <__aeabi_dsub+0x5c0>
    4a9a:	2400      	movs	r4, #0
    4a9c:	e7f3      	b.n	4a86 <__aeabi_dsub+0x60a>
    4a9e:	46c0      	nop			; (mov r8, r8)
    4aa0:	000007ff 	.word	0x000007ff
    4aa4:	ff7fffff 	.word	0xff7fffff

00004aa8 <__aeabi_d2iz>:
    4aa8:	b530      	push	{r4, r5, lr}
    4aaa:	4d13      	ldr	r5, [pc, #76]	; (4af8 <__aeabi_d2iz+0x50>)
    4aac:	030a      	lsls	r2, r1, #12
    4aae:	004b      	lsls	r3, r1, #1
    4ab0:	0b12      	lsrs	r2, r2, #12
    4ab2:	0d5b      	lsrs	r3, r3, #21
    4ab4:	0fc9      	lsrs	r1, r1, #31
    4ab6:	2400      	movs	r4, #0
    4ab8:	42ab      	cmp	r3, r5
    4aba:	dd10      	ble.n	4ade <__aeabi_d2iz+0x36>
    4abc:	4c0f      	ldr	r4, [pc, #60]	; (4afc <__aeabi_d2iz+0x54>)
    4abe:	42a3      	cmp	r3, r4
    4ac0:	dc0f      	bgt.n	4ae2 <__aeabi_d2iz+0x3a>
    4ac2:	2480      	movs	r4, #128	; 0x80
    4ac4:	4d0e      	ldr	r5, [pc, #56]	; (4b00 <__aeabi_d2iz+0x58>)
    4ac6:	0364      	lsls	r4, r4, #13
    4ac8:	4322      	orrs	r2, r4
    4aca:	1aed      	subs	r5, r5, r3
    4acc:	2d1f      	cmp	r5, #31
    4ace:	dd0b      	ble.n	4ae8 <__aeabi_d2iz+0x40>
    4ad0:	480c      	ldr	r0, [pc, #48]	; (4b04 <__aeabi_d2iz+0x5c>)
    4ad2:	1ac3      	subs	r3, r0, r3
    4ad4:	40da      	lsrs	r2, r3
    4ad6:	4254      	negs	r4, r2
    4ad8:	2900      	cmp	r1, #0
    4ada:	d100      	bne.n	4ade <__aeabi_d2iz+0x36>
    4adc:	0014      	movs	r4, r2
    4ade:	0020      	movs	r0, r4
    4ae0:	bd30      	pop	{r4, r5, pc}
    4ae2:	4b09      	ldr	r3, [pc, #36]	; (4b08 <__aeabi_d2iz+0x60>)
    4ae4:	18cc      	adds	r4, r1, r3
    4ae6:	e7fa      	b.n	4ade <__aeabi_d2iz+0x36>
    4ae8:	4c08      	ldr	r4, [pc, #32]	; (4b0c <__aeabi_d2iz+0x64>)
    4aea:	40e8      	lsrs	r0, r5
    4aec:	46a4      	mov	ip, r4
    4aee:	4463      	add	r3, ip
    4af0:	409a      	lsls	r2, r3
    4af2:	4302      	orrs	r2, r0
    4af4:	e7ef      	b.n	4ad6 <__aeabi_d2iz+0x2e>
    4af6:	46c0      	nop			; (mov r8, r8)
    4af8:	000003fe 	.word	0x000003fe
    4afc:	0000041d 	.word	0x0000041d
    4b00:	00000433 	.word	0x00000433
    4b04:	00000413 	.word	0x00000413
    4b08:	7fffffff 	.word	0x7fffffff
    4b0c:	fffffbed 	.word	0xfffffbed

00004b10 <__aeabi_ui2d>:
    4b10:	b510      	push	{r4, lr}
    4b12:	1e04      	subs	r4, r0, #0
    4b14:	d028      	beq.n	4b68 <__aeabi_ui2d+0x58>
    4b16:	f000 f833 	bl	4b80 <__clzsi2>
    4b1a:	4b15      	ldr	r3, [pc, #84]	; (4b70 <__aeabi_ui2d+0x60>)
    4b1c:	4a15      	ldr	r2, [pc, #84]	; (4b74 <__aeabi_ui2d+0x64>)
    4b1e:	1a1b      	subs	r3, r3, r0
    4b20:	1ad2      	subs	r2, r2, r3
    4b22:	2a1f      	cmp	r2, #31
    4b24:	dd15      	ble.n	4b52 <__aeabi_ui2d+0x42>
    4b26:	4a14      	ldr	r2, [pc, #80]	; (4b78 <__aeabi_ui2d+0x68>)
    4b28:	1ad2      	subs	r2, r2, r3
    4b2a:	4094      	lsls	r4, r2
    4b2c:	2200      	movs	r2, #0
    4b2e:	0324      	lsls	r4, r4, #12
    4b30:	055b      	lsls	r3, r3, #21
    4b32:	0b24      	lsrs	r4, r4, #12
    4b34:	0d5b      	lsrs	r3, r3, #21
    4b36:	2100      	movs	r1, #0
    4b38:	0010      	movs	r0, r2
    4b3a:	0324      	lsls	r4, r4, #12
    4b3c:	0d0a      	lsrs	r2, r1, #20
    4b3e:	0b24      	lsrs	r4, r4, #12
    4b40:	0512      	lsls	r2, r2, #20
    4b42:	4322      	orrs	r2, r4
    4b44:	4c0d      	ldr	r4, [pc, #52]	; (4b7c <__aeabi_ui2d+0x6c>)
    4b46:	051b      	lsls	r3, r3, #20
    4b48:	4022      	ands	r2, r4
    4b4a:	4313      	orrs	r3, r2
    4b4c:	005b      	lsls	r3, r3, #1
    4b4e:	0859      	lsrs	r1, r3, #1
    4b50:	bd10      	pop	{r4, pc}
    4b52:	0021      	movs	r1, r4
    4b54:	4091      	lsls	r1, r2
    4b56:	000a      	movs	r2, r1
    4b58:	210b      	movs	r1, #11
    4b5a:	1a08      	subs	r0, r1, r0
    4b5c:	40c4      	lsrs	r4, r0
    4b5e:	055b      	lsls	r3, r3, #21
    4b60:	0324      	lsls	r4, r4, #12
    4b62:	0b24      	lsrs	r4, r4, #12
    4b64:	0d5b      	lsrs	r3, r3, #21
    4b66:	e7e6      	b.n	4b36 <__aeabi_ui2d+0x26>
    4b68:	2300      	movs	r3, #0
    4b6a:	2400      	movs	r4, #0
    4b6c:	2200      	movs	r2, #0
    4b6e:	e7e2      	b.n	4b36 <__aeabi_ui2d+0x26>
    4b70:	0000041e 	.word	0x0000041e
    4b74:	00000433 	.word	0x00000433
    4b78:	00000413 	.word	0x00000413
    4b7c:	800fffff 	.word	0x800fffff

00004b80 <__clzsi2>:
    4b80:	211c      	movs	r1, #28
    4b82:	2301      	movs	r3, #1
    4b84:	041b      	lsls	r3, r3, #16
    4b86:	4298      	cmp	r0, r3
    4b88:	d301      	bcc.n	4b8e <__clzsi2+0xe>
    4b8a:	0c00      	lsrs	r0, r0, #16
    4b8c:	3910      	subs	r1, #16
    4b8e:	0a1b      	lsrs	r3, r3, #8
    4b90:	4298      	cmp	r0, r3
    4b92:	d301      	bcc.n	4b98 <__clzsi2+0x18>
    4b94:	0a00      	lsrs	r0, r0, #8
    4b96:	3908      	subs	r1, #8
    4b98:	091b      	lsrs	r3, r3, #4
    4b9a:	4298      	cmp	r0, r3
    4b9c:	d301      	bcc.n	4ba2 <__clzsi2+0x22>
    4b9e:	0900      	lsrs	r0, r0, #4
    4ba0:	3904      	subs	r1, #4
    4ba2:	a202      	add	r2, pc, #8	; (adr r2, 4bac <__clzsi2+0x2c>)
    4ba4:	5c10      	ldrb	r0, [r2, r0]
    4ba6:	1840      	adds	r0, r0, r1
    4ba8:	4770      	bx	lr
    4baa:	46c0      	nop			; (mov r8, r8)
    4bac:	02020304 	.word	0x02020304
    4bb0:	01010101 	.word	0x01010101
	...

00004bbc <__libc_init_array>:
    4bbc:	b570      	push	{r4, r5, r6, lr}
    4bbe:	2600      	movs	r6, #0
    4bc0:	4d0c      	ldr	r5, [pc, #48]	; (4bf4 <__libc_init_array+0x38>)
    4bc2:	4c0d      	ldr	r4, [pc, #52]	; (4bf8 <__libc_init_array+0x3c>)
    4bc4:	1b64      	subs	r4, r4, r5
    4bc6:	10a4      	asrs	r4, r4, #2
    4bc8:	42a6      	cmp	r6, r4
    4bca:	d109      	bne.n	4be0 <__libc_init_array+0x24>
    4bcc:	2600      	movs	r6, #0
    4bce:	f000 f8a1 	bl	4d14 <_init>
    4bd2:	4d0a      	ldr	r5, [pc, #40]	; (4bfc <__libc_init_array+0x40>)
    4bd4:	4c0a      	ldr	r4, [pc, #40]	; (4c00 <__libc_init_array+0x44>)
    4bd6:	1b64      	subs	r4, r4, r5
    4bd8:	10a4      	asrs	r4, r4, #2
    4bda:	42a6      	cmp	r6, r4
    4bdc:	d105      	bne.n	4bea <__libc_init_array+0x2e>
    4bde:	bd70      	pop	{r4, r5, r6, pc}
    4be0:	00b3      	lsls	r3, r6, #2
    4be2:	58eb      	ldr	r3, [r5, r3]
    4be4:	4798      	blx	r3
    4be6:	3601      	adds	r6, #1
    4be8:	e7ee      	b.n	4bc8 <__libc_init_array+0xc>
    4bea:	00b3      	lsls	r3, r6, #2
    4bec:	58eb      	ldr	r3, [r5, r3]
    4bee:	4798      	blx	r3
    4bf0:	3601      	adds	r6, #1
    4bf2:	e7f2      	b.n	4bda <__libc_init_array+0x1e>
    4bf4:	00004d20 	.word	0x00004d20
    4bf8:	00004d20 	.word	0x00004d20
    4bfc:	00004d20 	.word	0x00004d20
    4c00:	00004d24 	.word	0x00004d24

00004c04 <memset>:
    4c04:	0003      	movs	r3, r0
    4c06:	1882      	adds	r2, r0, r2
    4c08:	4293      	cmp	r3, r2
    4c0a:	d100      	bne.n	4c0e <memset+0xa>
    4c0c:	4770      	bx	lr
    4c0e:	7019      	strb	r1, [r3, #0]
    4c10:	3301      	adds	r3, #1
    4c12:	e7f9      	b.n	4c08 <memset+0x4>

00004c14 <strcmp>:
    4c14:	7802      	ldrb	r2, [r0, #0]
    4c16:	780b      	ldrb	r3, [r1, #0]
    4c18:	2a00      	cmp	r2, #0
    4c1a:	d003      	beq.n	4c24 <strcmp+0x10>
    4c1c:	3001      	adds	r0, #1
    4c1e:	3101      	adds	r1, #1
    4c20:	429a      	cmp	r2, r3
    4c22:	d0f7      	beq.n	4c14 <strcmp>
    4c24:	1ad0      	subs	r0, r2, r3
    4c26:	4770      	bx	lr
    4c28:	42000800 	.word	0x42000800
    4c2c:	42000c00 	.word	0x42000c00
    4c30:	42001000 	.word	0x42001000
    4c34:	42001400 	.word	0x42001400
    4c38:	42001800 	.word	0x42001800
    4c3c:	42001c00 	.word	0x42001c00
    4c40:	000022ca 	.word	0x000022ca
    4c44:	000022c6 	.word	0x000022c6
    4c48:	000022c6 	.word	0x000022c6
    4c4c:	0000232c 	.word	0x0000232c
    4c50:	0000232c 	.word	0x0000232c
    4c54:	000022de 	.word	0x000022de
    4c58:	000022d0 	.word	0x000022d0
    4c5c:	000022e4 	.word	0x000022e4
    4c60:	0000231a 	.word	0x0000231a
    4c64:	000024ec 	.word	0x000024ec
    4c68:	000024cc 	.word	0x000024cc
    4c6c:	000024cc 	.word	0x000024cc
    4c70:	00002558 	.word	0x00002558
    4c74:	000024de 	.word	0x000024de
    4c78:	000024fa 	.word	0x000024fa
    4c7c:	000024d0 	.word	0x000024d0
    4c80:	00002508 	.word	0x00002508
    4c84:	00002548 	.word	0x00002548
    4c88:	68746f4e 	.word	0x68746f4e
    4c8c:	00676e69 	.word	0x00676e69
    4c90:	00000000 	.word	0x00000000
    4c94:	00003b0c 	.word	0x00003b0c
    4c98:	00003aee 	.word	0x00003aee
    4c9c:	00003aa8 	.word	0x00003aa8
    4ca0:	000039c6 	.word	0x000039c6
    4ca4:	00003aa8 	.word	0x00003aa8
    4ca8:	00003ae0 	.word	0x00003ae0
    4cac:	00003aa8 	.word	0x00003aa8
    4cb0:	000039c6 	.word	0x000039c6
    4cb4:	00003aee 	.word	0x00003aee
    4cb8:	00003aee 	.word	0x00003aee
    4cbc:	00003ae0 	.word	0x00003ae0
    4cc0:	000039c6 	.word	0x000039c6
    4cc4:	000039be 	.word	0x000039be
    4cc8:	000039be 	.word	0x000039be
    4ccc:	000039be 	.word	0x000039be
    4cd0:	00003d24 	.word	0x00003d24
    4cd4:	0000416c 	.word	0x0000416c
    4cd8:	0000402c 	.word	0x0000402c
    4cdc:	0000402c 	.word	0x0000402c
    4ce0:	00004028 	.word	0x00004028
    4ce4:	00004144 	.word	0x00004144
    4ce8:	00004144 	.word	0x00004144
    4cec:	00004136 	.word	0x00004136
    4cf0:	00004028 	.word	0x00004028
    4cf4:	00004144 	.word	0x00004144
    4cf8:	00004136 	.word	0x00004136
    4cfc:	00004144 	.word	0x00004144
    4d00:	00004028 	.word	0x00004028
    4d04:	0000414c 	.word	0x0000414c
    4d08:	0000414c 	.word	0x0000414c
    4d0c:	0000414c 	.word	0x0000414c
    4d10:	00004350 	.word	0x00004350

00004d14 <_init>:
    4d14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    4d16:	46c0      	nop			; (mov r8, r8)
    4d18:	bcf8      	pop	{r3, r4, r5, r6, r7}
    4d1a:	bc08      	pop	{r3}
    4d1c:	469e      	mov	lr, r3
    4d1e:	4770      	bx	lr

00004d20 <__init_array_start>:
    4d20:	000000dd 	.word	0x000000dd

00004d24 <_fini>:
    4d24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    4d26:	46c0      	nop			; (mov r8, r8)
    4d28:	bcf8      	pop	{r3, r4, r5, r6, r7}
    4d2a:	bc08      	pop	{r3}
    4d2c:	469e      	mov	lr, r3
    4d2e:	4770      	bx	lr

00004d30 <__fini_array_start>:
    4d30:	000000b5 	.word	0x000000b5
