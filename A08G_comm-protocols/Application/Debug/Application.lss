
Application.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00026d70  00000000  00000000  00010000  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     000002f0  20000000  00026d70  00040000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00005384  200002f0  00027060  000402f0  2**4
                  ALLOC
  3 .stack        00002004  20005674  0002c3e4  000402f0  2**0
                  ALLOC
  4 .ARM.attributes 00000028  00000000  00000000  000402f0  2**0
                  CONTENTS, READONLY
  5 .comment      00000059  00000000  00000000  00040318  2**0
                  CONTENTS, READONLY
  6 .debug_info   0010b9fd  00000000  00000000  00040371  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000f6de  00000000  00000000  0014bd6e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    00015e69  00000000  00000000  0015b44c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 00003a68  00000000  00000000  001712b5  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00003710  00000000  00000000  00174d1d  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  00027f25  00000000  00000000  0017842d  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   000521d5  00000000  00000000  001a0352  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    000bfed3  00000000  00000000  001f2527  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  0000de0c  00000000  00000000  002b23fc  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
       0:	78 76 00 20 fd 7d 01 00 f5 7e 01 00 f5 7e 01 00     xv. .}...~...~..
	...
      2c:	91 6f 00 00 00 00 00 00 00 00 00 00 b1 70 00 00     .o...........p..
      3c:	f9 70 00 00 f5 7e 01 00 f5 7e 01 00 f5 7e 01 00     .p...~...~...~..
      4c:	4d 3f 01 00 79 34 01 00 f5 7e 01 00 61 04 00 00     M?..y4...~..a...
      5c:	f5 7e 01 00 a5 05 00 00 f1 45 01 00 09 46 01 00     .~.......E...F..
      6c:	21 46 01 00 39 46 01 00 51 46 01 00 69 46 01 00     !F..9F..QF..iF..
      7c:	45 7d 01 00 59 7d 01 00 6d 7d 01 00 7d 4c 00 00     E}..Y}..m}..}L..
      8c:	91 4c 00 00 a5 4c 00 00 00 00 00 00 00 00 00 00     .L...L..........
      9c:	e9 02 00 00 f5 7e 01 00 25 04 00 00 f5 7e 01 00     .....~..%....~..
      ac:	f5 7e 01 00 00 00 00 00                             .~......

000000b4 <__do_global_dtors_aux>:
      b4:	b510      	push	{r4, lr}
      b6:	4c06      	ldr	r4, [pc, #24]	; (d0 <__do_global_dtors_aux+0x1c>)
      b8:	7823      	ldrb	r3, [r4, #0]
      ba:	2b00      	cmp	r3, #0
      bc:	d107      	bne.n	ce <__do_global_dtors_aux+0x1a>
      be:	4b05      	ldr	r3, [pc, #20]	; (d4 <__do_global_dtors_aux+0x20>)
      c0:	2b00      	cmp	r3, #0
      c2:	d002      	beq.n	ca <__do_global_dtors_aux+0x16>
      c4:	4804      	ldr	r0, [pc, #16]	; (d8 <__do_global_dtors_aux+0x24>)
      c6:	e000      	b.n	ca <__do_global_dtors_aux+0x16>
      c8:	bf00      	nop
      ca:	2301      	movs	r3, #1
      cc:	7023      	strb	r3, [r4, #0]
      ce:	bd10      	pop	{r4, pc}
      d0:	200002f0 	.word	0x200002f0
      d4:	00000000 	.word	0x00000000
      d8:	00026d70 	.word	0x00026d70

000000dc <frame_dummy>:
      dc:	4b08      	ldr	r3, [pc, #32]	; (100 <frame_dummy+0x24>)
      de:	b510      	push	{r4, lr}
      e0:	2b00      	cmp	r3, #0
      e2:	d003      	beq.n	ec <frame_dummy+0x10>
      e4:	4907      	ldr	r1, [pc, #28]	; (104 <frame_dummy+0x28>)
      e6:	4808      	ldr	r0, [pc, #32]	; (108 <frame_dummy+0x2c>)
      e8:	e000      	b.n	ec <frame_dummy+0x10>
      ea:	bf00      	nop
      ec:	4807      	ldr	r0, [pc, #28]	; (10c <frame_dummy+0x30>)
      ee:	6803      	ldr	r3, [r0, #0]
      f0:	2b00      	cmp	r3, #0
      f2:	d100      	bne.n	f6 <frame_dummy+0x1a>
      f4:	bd10      	pop	{r4, pc}
      f6:	4b06      	ldr	r3, [pc, #24]	; (110 <frame_dummy+0x34>)
      f8:	2b00      	cmp	r3, #0
      fa:	d0fb      	beq.n	f4 <frame_dummy+0x18>
      fc:	4798      	blx	r3
      fe:	e7f9      	b.n	f4 <frame_dummy+0x18>
     100:	00000000 	.word	0x00000000
     104:	200002f4 	.word	0x200002f4
     108:	00026d70 	.word	0x00026d70
     10c:	00026d70 	.word	0x00026d70
     110:	00000000 	.word	0x00000000

00000114 <adc_is_syncing>:
 * \retval true if the module synchronization is ongoing
 * \retval false if the module has completed synchronization
 */
static inline bool adc_is_syncing(
	struct adc_module *const module_inst)
{
     114:	b580      	push	{r7, lr}
     116:	b084      	sub	sp, #16
     118:	af00      	add	r7, sp, #0
     11a:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module_inst);

	Adc *const adc_module = module_inst->hw;
     11c:	687b      	ldr	r3, [r7, #4]
     11e:	681b      	ldr	r3, [r3, #0]
     120:	60fb      	str	r3, [r7, #12]

	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
     122:	68fb      	ldr	r3, [r7, #12]
     124:	7e5b      	ldrb	r3, [r3, #25]
     126:	b2db      	uxtb	r3, r3
     128:	b25b      	sxtb	r3, r3
     12a:	2b00      	cmp	r3, #0
     12c:	da01      	bge.n	132 <adc_is_syncing+0x1e>
		return true;
     12e:	2301      	movs	r3, #1
     130:	e000      	b.n	134 <adc_is_syncing+0x20>
	}

	return false;
     132:	2300      	movs	r3, #0
}
     134:	0018      	movs	r0, r3
     136:	46bd      	mov	sp, r7
     138:	b004      	add	sp, #16
     13a:	bd80      	pop	{r7, pc}

0000013c <adc_start_conversion>:
 *
 * \param[in] module_inst  Pointer to the ADC software instance struct
 */
static inline void adc_start_conversion(
		struct adc_module *const module_inst)
{
     13c:	b580      	push	{r7, lr}
     13e:	b084      	sub	sp, #16
     140:	af00      	add	r7, sp, #0
     142:	6078      	str	r0, [r7, #4]
	Assert(module_inst);
	Assert(module_inst->hw);

	Adc *const adc_module = module_inst->hw;
     144:	687b      	ldr	r3, [r7, #4]
     146:	681b      	ldr	r3, [r3, #0]
     148:	60fb      	str	r3, [r7, #12]

	while (adc_is_syncing(module_inst)) {
     14a:	46c0      	nop			; (mov r8, r8)
     14c:	687b      	ldr	r3, [r7, #4]
     14e:	0018      	movs	r0, r3
     150:	4b0b      	ldr	r3, [pc, #44]	; (180 <adc_start_conversion+0x44>)
     152:	4798      	blx	r3
     154:	1e03      	subs	r3, r0, #0
     156:	d1f9      	bne.n	14c <adc_start_conversion+0x10>
		/* Wait for synchronization */
	}

	adc_module->SWTRIG.reg |= ADC_SWTRIG_START;
     158:	68fb      	ldr	r3, [r7, #12]
     15a:	7b1b      	ldrb	r3, [r3, #12]
     15c:	b2db      	uxtb	r3, r3
     15e:	2202      	movs	r2, #2
     160:	4313      	orrs	r3, r2
     162:	b2da      	uxtb	r2, r3
     164:	68fb      	ldr	r3, [r7, #12]
     166:	731a      	strb	r2, [r3, #12]

	while (adc_is_syncing(module_inst)) {
     168:	46c0      	nop			; (mov r8, r8)
     16a:	687b      	ldr	r3, [r7, #4]
     16c:	0018      	movs	r0, r3
     16e:	4b04      	ldr	r3, [pc, #16]	; (180 <adc_start_conversion+0x44>)
     170:	4798      	blx	r3
     172:	1e03      	subs	r3, r0, #0
     174:	d1f9      	bne.n	16a <adc_start_conversion+0x2e>
		/* Wait for synchronization */
	}
}
     176:	46c0      	nop			; (mov r8, r8)
     178:	46bd      	mov	sp, r7
     17a:	b004      	add	sp, #16
     17c:	bd80      	pop	{r7, pc}
     17e:	46c0      	nop			; (mov r8, r8)
     180:	00000115 	.word	0x00000115

00000184 <adc_disable_interrupt>:
 * \param[in] module_inst Pointer to the ADC software instance struct
 * \param[in] interrupt Interrupt to disable
 */
static inline void adc_disable_interrupt(struct adc_module *const module_inst,
		enum adc_interrupt_flag interrupt)
{
     184:	b580      	push	{r7, lr}
     186:	b084      	sub	sp, #16
     188:	af00      	add	r7, sp, #0
     18a:	6078      	str	r0, [r7, #4]
     18c:	000a      	movs	r2, r1
     18e:	1cfb      	adds	r3, r7, #3
     190:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	Adc *const adc_module = module_inst->hw;
     192:	687b      	ldr	r3, [r7, #4]
     194:	681b      	ldr	r3, [r3, #0]
     196:	60fb      	str	r3, [r7, #12]
	/* Enable interrupt */
	adc_module->INTENCLR.reg = interrupt;
     198:	68fb      	ldr	r3, [r7, #12]
     19a:	1cfa      	adds	r2, r7, #3
     19c:	7812      	ldrb	r2, [r2, #0]
     19e:	759a      	strb	r2, [r3, #22]
}
     1a0:	46c0      	nop			; (mov r8, r8)
     1a2:	46bd      	mov	sp, r7
     1a4:	b004      	add	sp, #16
     1a6:	bd80      	pop	{r7, pc}

000001a8 <_adc_interrupt_handler>:
#include "adc_callback.h"

struct adc_module *_adc_instances[ADC_INST_NUM];

static void _adc_interrupt_handler(const uint8_t instance)
{
     1a8:	b580      	push	{r7, lr}
     1aa:	b084      	sub	sp, #16
     1ac:	af00      	add	r7, sp, #0
     1ae:	0002      	movs	r2, r0
     1b0:	1dfb      	adds	r3, r7, #7
     1b2:	701a      	strb	r2, [r3, #0]
	struct adc_module *module = _adc_instances[instance];
     1b4:	1dfb      	adds	r3, r7, #7
     1b6:	781a      	ldrb	r2, [r3, #0]
     1b8:	4b47      	ldr	r3, [pc, #284]	; (2d8 <_adc_interrupt_handler+0x130>)
     1ba:	0092      	lsls	r2, r2, #2
     1bc:	58d3      	ldr	r3, [r2, r3]
     1be:	60fb      	str	r3, [r7, #12]

	/* get interrupt flags and mask out enabled callbacks */
	uint32_t flags = module->hw->INTFLAG.reg & module->hw->INTENSET.reg;
     1c0:	68fb      	ldr	r3, [r7, #12]
     1c2:	681b      	ldr	r3, [r3, #0]
     1c4:	7e1b      	ldrb	r3, [r3, #24]
     1c6:	b2da      	uxtb	r2, r3
     1c8:	68fb      	ldr	r3, [r7, #12]
     1ca:	681b      	ldr	r3, [r3, #0]
     1cc:	7ddb      	ldrb	r3, [r3, #23]
     1ce:	b2db      	uxtb	r3, r3
     1d0:	4013      	ands	r3, r2
     1d2:	b2db      	uxtb	r3, r3
     1d4:	60bb      	str	r3, [r7, #8]

	if (flags & ADC_INTFLAG_RESRDY) {
     1d6:	68bb      	ldr	r3, [r7, #8]
     1d8:	2201      	movs	r2, #1
     1da:	4013      	ands	r3, r2
     1dc:	d045      	beq.n	26a <_adc_interrupt_handler+0xc2>
		/* clear interrupt flag */
		module->hw->INTFLAG.reg = ADC_INTFLAG_RESRDY;
     1de:	68fb      	ldr	r3, [r7, #12]
     1e0:	681b      	ldr	r3, [r3, #0]
     1e2:	2201      	movs	r2, #1
     1e4:	761a      	strb	r2, [r3, #24]

		while (adc_is_syncing(module)) {
     1e6:	46c0      	nop			; (mov r8, r8)
     1e8:	68fb      	ldr	r3, [r7, #12]
     1ea:	0018      	movs	r0, r3
     1ec:	4b3b      	ldr	r3, [pc, #236]	; (2dc <_adc_interrupt_handler+0x134>)
     1ee:	4798      	blx	r3
     1f0:	1e03      	subs	r3, r0, #0
     1f2:	d1f9      	bne.n	1e8 <_adc_interrupt_handler+0x40>
			/* Wait for synchronization */
		}

		/* store ADC result in job buffer */
		*(module->job_buffer++) = module->hw->RESULT.reg;
     1f4:	68fb      	ldr	r3, [r7, #12]
     1f6:	695b      	ldr	r3, [r3, #20]
     1f8:	1c99      	adds	r1, r3, #2
     1fa:	68fa      	ldr	r2, [r7, #12]
     1fc:	6151      	str	r1, [r2, #20]
     1fe:	68fa      	ldr	r2, [r7, #12]
     200:	6812      	ldr	r2, [r2, #0]
     202:	8b52      	ldrh	r2, [r2, #26]
     204:	b292      	uxth	r2, r2
     206:	801a      	strh	r2, [r3, #0]

		if (--module->remaining_conversions > 0) {
     208:	68fb      	ldr	r3, [r7, #12]
     20a:	8b1b      	ldrh	r3, [r3, #24]
     20c:	b29b      	uxth	r3, r3
     20e:	3b01      	subs	r3, #1
     210:	b29b      	uxth	r3, r3
     212:	68fa      	ldr	r2, [r7, #12]
     214:	1c19      	adds	r1, r3, #0
     216:	8311      	strh	r1, [r2, #24]
     218:	2b00      	cmp	r3, #0
     21a:	d008      	beq.n	22e <_adc_interrupt_handler+0x86>
			if (module->software_trigger == true) {
     21c:	68fb      	ldr	r3, [r7, #12]
     21e:	7f5b      	ldrb	r3, [r3, #29]
     220:	2b00      	cmp	r3, #0
     222:	d022      	beq.n	26a <_adc_interrupt_handler+0xc2>
				adc_start_conversion(module);
     224:	68fb      	ldr	r3, [r7, #12]
     226:	0018      	movs	r0, r3
     228:	4b2d      	ldr	r3, [pc, #180]	; (2e0 <_adc_interrupt_handler+0x138>)
     22a:	4798      	blx	r3
     22c:	e01d      	b.n	26a <_adc_interrupt_handler+0xc2>
			}
		} else {
			adc_disable_interrupt(module, ADC_INTERRUPT_RESULT_READY);
     22e:	68fb      	ldr	r3, [r7, #12]
     230:	2101      	movs	r1, #1
     232:	0018      	movs	r0, r3
     234:	4b2b      	ldr	r3, [pc, #172]	; (2e4 <_adc_interrupt_handler+0x13c>)
     236:	4798      	blx	r3
			if (module->job_status == STATUS_BUSY) {
     238:	68fb      	ldr	r3, [r7, #12]
     23a:	7f1b      	ldrb	r3, [r3, #28]
     23c:	b2db      	uxtb	r3, r3
     23e:	2b05      	cmp	r3, #5
     240:	d113      	bne.n	26a <_adc_interrupt_handler+0xc2>
				/* job is complete. update status,disable interrupt
					*and call callback */
				module->job_status = STATUS_OK;
     242:	68fb      	ldr	r3, [r7, #12]
     244:	2200      	movs	r2, #0
     246:	771a      	strb	r2, [r3, #28]

				if ((module->enabled_callback_mask &
     248:	68fb      	ldr	r3, [r7, #12]
     24a:	7edb      	ldrb	r3, [r3, #27]
     24c:	001a      	movs	r2, r3
     24e:	2301      	movs	r3, #1
     250:	4013      	ands	r3, r2
     252:	d00a      	beq.n	26a <_adc_interrupt_handler+0xc2>
						(1 << ADC_CALLBACK_READ_BUFFER)) &&
					(module->registered_callback_mask &
     254:	68fb      	ldr	r3, [r7, #12]
     256:	7e9b      	ldrb	r3, [r3, #26]
     258:	001a      	movs	r2, r3
     25a:	2301      	movs	r3, #1
     25c:	4013      	ands	r3, r2
						(1 << ADC_CALLBACK_READ_BUFFER)) &&
     25e:	d004      	beq.n	26a <_adc_interrupt_handler+0xc2>
						(1 << ADC_CALLBACK_READ_BUFFER))) {
					(module->callback[ADC_CALLBACK_READ_BUFFER])(module);
     260:	68fb      	ldr	r3, [r7, #12]
     262:	689b      	ldr	r3, [r3, #8]
     264:	68fa      	ldr	r2, [r7, #12]
     266:	0010      	movs	r0, r2
     268:	4798      	blx	r3
				}
			}
		}
	}

	if (flags & ADC_INTFLAG_WINMON) {
     26a:	68bb      	ldr	r3, [r7, #8]
     26c:	2204      	movs	r2, #4
     26e:	4013      	ands	r3, r2
     270:	d014      	beq.n	29c <_adc_interrupt_handler+0xf4>
		module->hw->INTFLAG.reg = ADC_INTFLAG_WINMON;
     272:	68fb      	ldr	r3, [r7, #12]
     274:	681b      	ldr	r3, [r3, #0]
     276:	2204      	movs	r2, #4
     278:	761a      	strb	r2, [r3, #24]
		if ((module->enabled_callback_mask & (1 << ADC_CALLBACK_WINDOW)) &&
     27a:	68fb      	ldr	r3, [r7, #12]
     27c:	7edb      	ldrb	r3, [r3, #27]
     27e:	001a      	movs	r2, r3
     280:	2302      	movs	r3, #2
     282:	4013      	ands	r3, r2
     284:	d00a      	beq.n	29c <_adc_interrupt_handler+0xf4>
				(module->registered_callback_mask & (1 << ADC_CALLBACK_WINDOW))) {
     286:	68fb      	ldr	r3, [r7, #12]
     288:	7e9b      	ldrb	r3, [r3, #26]
     28a:	001a      	movs	r2, r3
     28c:	2302      	movs	r3, #2
     28e:	4013      	ands	r3, r2
		if ((module->enabled_callback_mask & (1 << ADC_CALLBACK_WINDOW)) &&
     290:	d004      	beq.n	29c <_adc_interrupt_handler+0xf4>
			(module->callback[ADC_CALLBACK_WINDOW])(module);
     292:	68fb      	ldr	r3, [r7, #12]
     294:	68db      	ldr	r3, [r3, #12]
     296:	68fa      	ldr	r2, [r7, #12]
     298:	0010      	movs	r0, r2
     29a:	4798      	blx	r3
		}

	}

	if (flags & ADC_INTFLAG_OVERRUN) {
     29c:	68bb      	ldr	r3, [r7, #8]
     29e:	2202      	movs	r2, #2
     2a0:	4013      	ands	r3, r2
     2a2:	d014      	beq.n	2ce <_adc_interrupt_handler+0x126>
		module->hw->INTFLAG.reg = ADC_INTFLAG_OVERRUN;
     2a4:	68fb      	ldr	r3, [r7, #12]
     2a6:	681b      	ldr	r3, [r3, #0]
     2a8:	2202      	movs	r2, #2
     2aa:	761a      	strb	r2, [r3, #24]
		if ((module->enabled_callback_mask & (1 << ADC_CALLBACK_ERROR)) &&
     2ac:	68fb      	ldr	r3, [r7, #12]
     2ae:	7edb      	ldrb	r3, [r3, #27]
     2b0:	001a      	movs	r2, r3
     2b2:	2304      	movs	r3, #4
     2b4:	4013      	ands	r3, r2
     2b6:	d00a      	beq.n	2ce <_adc_interrupt_handler+0x126>
				(module->registered_callback_mask & (1 << ADC_CALLBACK_ERROR))) {
     2b8:	68fb      	ldr	r3, [r7, #12]
     2ba:	7e9b      	ldrb	r3, [r3, #26]
     2bc:	001a      	movs	r2, r3
     2be:	2304      	movs	r3, #4
     2c0:	4013      	ands	r3, r2
		if ((module->enabled_callback_mask & (1 << ADC_CALLBACK_ERROR)) &&
     2c2:	d004      	beq.n	2ce <_adc_interrupt_handler+0x126>
			(module->callback[ADC_CALLBACK_ERROR])(module);
     2c4:	68fb      	ldr	r3, [r7, #12]
     2c6:	691b      	ldr	r3, [r3, #16]
     2c8:	68fa      	ldr	r2, [r7, #12]
     2ca:	0010      	movs	r0, r2
     2cc:	4798      	blx	r3
		}
	}
}
     2ce:	46c0      	nop			; (mov r8, r8)
     2d0:	46bd      	mov	sp, r7
     2d2:	b004      	add	sp, #16
     2d4:	bd80      	pop	{r7, pc}
     2d6:	46c0      	nop			; (mov r8, r8)
     2d8:	200041a4 	.word	0x200041a4
     2dc:	00000115 	.word	0x00000115
     2e0:	0000013d 	.word	0x0000013d
     2e4:	00000185 	.word	0x00000185

000002e8 <ADC_Handler>:

/** Interrupt handler for the ADC module. */
void ADC_Handler(void)
{
     2e8:	b580      	push	{r7, lr}
     2ea:	af00      	add	r7, sp, #0
	_adc_interrupt_handler(0);
     2ec:	2000      	movs	r0, #0
     2ee:	4b02      	ldr	r3, [pc, #8]	; (2f8 <ADC_Handler+0x10>)
     2f0:	4798      	blx	r3
}
     2f2:	46c0      	nop			; (mov r8, r8)
     2f4:	46bd      	mov	sp, r7
     2f6:	bd80      	pop	{r7, pc}
     2f8:	000001a9 	.word	0x000001a9

000002fc <system_interrupt_disable>:
 *
 * \param[in] vector  Interrupt vector to disable
 */
static inline void system_interrupt_disable(
		const enum system_interrupt_vector vector)
{
     2fc:	b580      	push	{r7, lr}
     2fe:	b082      	sub	sp, #8
     300:	af00      	add	r7, sp, #0
     302:	0002      	movs	r2, r0
     304:	1dfb      	adds	r3, r7, #7
     306:	701a      	strb	r2, [r3, #0]
	NVIC->ICER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
     308:	4a07      	ldr	r2, [pc, #28]	; (328 <system_interrupt_disable+0x2c>)
     30a:	1dfb      	adds	r3, r7, #7
     30c:	781b      	ldrb	r3, [r3, #0]
     30e:	0019      	movs	r1, r3
     310:	231f      	movs	r3, #31
     312:	400b      	ands	r3, r1
     314:	2101      	movs	r1, #1
     316:	4099      	lsls	r1, r3
     318:	000b      	movs	r3, r1
     31a:	0019      	movs	r1, r3
     31c:	2380      	movs	r3, #128	; 0x80
     31e:	50d1      	str	r1, [r2, r3]
}
     320:	46c0      	nop			; (mov r8, r8)
     322:	46bd      	mov	sp, r7
     324:	b002      	add	sp, #8
     326:	bd80      	pop	{r7, pc}
     328:	e000e100 	.word	0xe000e100

0000032c <_dac_interrupt_handler>:
 *  Internal handler for DAC module interrupts.
 *
 * \param[in] instance  DAC instance number
 */
static void _dac_interrupt_handler(const uint8_t instance)
{
     32c:	b580      	push	{r7, lr}
     32e:	b084      	sub	sp, #16
     330:	af00      	add	r7, sp, #0
     332:	0002      	movs	r2, r0
     334:	1dfb      	adds	r3, r7, #7
     336:	701a      	strb	r2, [r3, #0]
	struct dac_module *module = _dac_instances[instance];
     338:	1dfb      	adds	r3, r7, #7
     33a:	781a      	ldrb	r2, [r3, #0]
     33c:	4b37      	ldr	r3, [pc, #220]	; (41c <_dac_interrupt_handler+0xf0>)
     33e:	0092      	lsls	r2, r2, #2
     340:	58d3      	ldr	r3, [r2, r3]
     342:	60fb      	str	r3, [r7, #12]
	Dac *const dac_hw = module->hw;
     344:	68fb      	ldr	r3, [r7, #12]
     346:	681b      	ldr	r3, [r3, #0]
     348:	60bb      	str	r3, [r7, #8]

	if (dac_hw->INTFLAG.reg & DAC_INTFLAG_UNDERRUN) {
     34a:	68bb      	ldr	r3, [r7, #8]
     34c:	799b      	ldrb	r3, [r3, #6]
     34e:	b2db      	uxtb	r3, r3
     350:	001a      	movs	r2, r3
     352:	2301      	movs	r3, #1
     354:	4013      	ands	r3, r2
     356:	d00e      	beq.n	376 <_dac_interrupt_handler+0x4a>
		dac_hw->INTFLAG.reg = DAC_INTFLAG_UNDERRUN;
     358:	68bb      	ldr	r3, [r7, #8]
     35a:	2201      	movs	r2, #1
     35c:	719a      	strb	r2, [r3, #6]

		if ((module->callback) &&
     35e:	68fb      	ldr	r3, [r7, #12]
     360:	3314      	adds	r3, #20
     362:	2b00      	cmp	r3, #0
     364:	d007      	beq.n	376 <_dac_interrupt_handler+0x4a>
			 (module->callback_enable[DAC_CALLBACK_DATA_UNDERRUN])){
     366:	68fb      	ldr	r3, [r7, #12]
     368:	7c5b      	ldrb	r3, [r3, #17]
		if ((module->callback) &&
     36a:	2b00      	cmp	r3, #0
     36c:	d003      	beq.n	376 <_dac_interrupt_handler+0x4a>
			module->callback[DAC_CALLBACK_DATA_UNDERRUN](0);
     36e:	68fb      	ldr	r3, [r7, #12]
     370:	699b      	ldr	r3, [r3, #24]
     372:	2000      	movs	r0, #0
     374:	4798      	blx	r3
		}
	}

	if (dac_hw->INTFLAG.reg & DAC_INTFLAG_EMPTY) {
     376:	68bb      	ldr	r3, [r7, #8]
     378:	799b      	ldrb	r3, [r3, #6]
     37a:	b2db      	uxtb	r3, r3
     37c:	001a      	movs	r2, r3
     37e:	2302      	movs	r3, #2
     380:	4013      	ands	r3, r2
     382:	d047      	beq.n	414 <_dac_interrupt_handler+0xe8>
		dac_hw->INTFLAG.reg = DAC_INTFLAG_EMPTY;
     384:	68bb      	ldr	r3, [r7, #8]
     386:	2202      	movs	r2, #2
     388:	719a      	strb	r2, [r3, #6]

		/* If in a write buffer job */
		if (module->remaining_conversions) {
     38a:	68fb      	ldr	r3, [r7, #12]
     38c:	899b      	ldrh	r3, [r3, #12]
     38e:	b29b      	uxth	r3, r3
     390:	2b00      	cmp	r3, #0
     392:	d033      	beq.n	3fc <_dac_interrupt_handler+0xd0>

			/* Fill the data buffer with next data in write buffer */
			dac_hw->DATABUF.reg =
				module->job_buffer[module->transferred_conversions++];
     394:	68fb      	ldr	r3, [r7, #12]
     396:	689a      	ldr	r2, [r3, #8]
     398:	68fb      	ldr	r3, [r7, #12]
     39a:	89db      	ldrh	r3, [r3, #14]
     39c:	b29b      	uxth	r3, r3
     39e:	1c59      	adds	r1, r3, #1
     3a0:	b288      	uxth	r0, r1
     3a2:	68f9      	ldr	r1, [r7, #12]
     3a4:	81c8      	strh	r0, [r1, #14]
     3a6:	005b      	lsls	r3, r3, #1
     3a8:	18d3      	adds	r3, r2, r3
     3aa:	881b      	ldrh	r3, [r3, #0]
     3ac:	b29a      	uxth	r2, r3
			dac_hw->DATABUF.reg =
     3ae:	68bb      	ldr	r3, [r7, #8]
     3b0:	819a      	strh	r2, [r3, #12]

			/* Write buffer size decrement */
			module->remaining_conversions --;
     3b2:	68fb      	ldr	r3, [r7, #12]
     3b4:	899b      	ldrh	r3, [r3, #12]
     3b6:	b29b      	uxth	r3, r3
     3b8:	3b01      	subs	r3, #1
     3ba:	b29a      	uxth	r2, r3
     3bc:	68fb      	ldr	r3, [r7, #12]
     3be:	819a      	strh	r2, [r3, #12]

			/* If in a write buffer job and all the data are converted */
			if (module->remaining_conversions == 0) {
     3c0:	68fb      	ldr	r3, [r7, #12]
     3c2:	899b      	ldrh	r3, [r3, #12]
     3c4:	b29b      	uxth	r3, r3
     3c6:	2b00      	cmp	r3, #0
     3c8:	d118      	bne.n	3fc <_dac_interrupt_handler+0xd0>
				module->job_status = STATUS_OK;
     3ca:	68fb      	ldr	r3, [r7, #12]
     3cc:	2220      	movs	r2, #32
     3ce:	2100      	movs	r1, #0
     3d0:	5499      	strb	r1, [r3, r2]

				/* Disable interrupt */
				dac_hw->INTENCLR.reg = DAC_INTENCLR_EMPTY;
     3d2:	68bb      	ldr	r3, [r7, #8]
     3d4:	2202      	movs	r2, #2
     3d6:	711a      	strb	r2, [r3, #4]
				dac_hw->INTFLAG.reg = DAC_INTFLAG_EMPTY;
     3d8:	68bb      	ldr	r3, [r7, #8]
     3da:	2202      	movs	r2, #2
     3dc:	719a      	strb	r2, [r3, #6]
				system_interrupt_disable(SYSTEM_INTERRUPT_MODULE_DAC);
     3de:	2019      	movs	r0, #25
     3e0:	4b0f      	ldr	r3, [pc, #60]	; (420 <_dac_interrupt_handler+0xf4>)
     3e2:	4798      	blx	r3

				if ((module->callback) &&
     3e4:	68fb      	ldr	r3, [r7, #12]
     3e6:	3314      	adds	r3, #20
     3e8:	2b00      	cmp	r3, #0
     3ea:	d007      	beq.n	3fc <_dac_interrupt_handler+0xd0>
					 (module->callback_enable[DAC_CALLBACK_TRANSFER_COMPLETE])) {
     3ec:	68fb      	ldr	r3, [r7, #12]
     3ee:	7c9b      	ldrb	r3, [r3, #18]
				if ((module->callback) &&
     3f0:	2b00      	cmp	r3, #0
     3f2:	d003      	beq.n	3fc <_dac_interrupt_handler+0xd0>
					module->callback[DAC_CALLBACK_TRANSFER_COMPLETE](0);
     3f4:	68fb      	ldr	r3, [r7, #12]
     3f6:	69db      	ldr	r3, [r3, #28]
     3f8:	2000      	movs	r0, #0
     3fa:	4798      	blx	r3
				}
			}
		}

		if ((module->callback) &&
     3fc:	68fb      	ldr	r3, [r7, #12]
     3fe:	3314      	adds	r3, #20
     400:	2b00      	cmp	r3, #0
     402:	d007      	beq.n	414 <_dac_interrupt_handler+0xe8>
			 (module->callback_enable[DAC_CALLBACK_DATA_EMPTY])) {
     404:	68fb      	ldr	r3, [r7, #12]
     406:	7c1b      	ldrb	r3, [r3, #16]
		if ((module->callback) &&
     408:	2b00      	cmp	r3, #0
     40a:	d003      	beq.n	414 <_dac_interrupt_handler+0xe8>
			module->callback[DAC_CALLBACK_DATA_EMPTY](0);
     40c:	68fb      	ldr	r3, [r7, #12]
     40e:	695b      	ldr	r3, [r3, #20]
     410:	2000      	movs	r0, #0
     412:	4798      	blx	r3
		}
	}
}
     414:	46c0      	nop			; (mov r8, r8)
     416:	46bd      	mov	sp, r7
     418:	b004      	add	sp, #16
     41a:	bd80      	pop	{r7, pc}
     41c:	200041a8 	.word	0x200041a8
     420:	000002fd 	.word	0x000002fd

00000424 <DAC_Handler>:

/** Handler for the DAC hardware module interrupt. */
void DAC_Handler(void)
{
     424:	b580      	push	{r7, lr}
     426:	af00      	add	r7, sp, #0
	_dac_interrupt_handler(0);
     428:	2000      	movs	r0, #0
     42a:	4b02      	ldr	r3, [pc, #8]	; (434 <DAC_Handler+0x10>)
     42c:	4798      	blx	r3
}
     42e:	46c0      	nop			; (mov r8, r8)
     430:	46bd      	mov	sp, r7
     432:	bd80      	pop	{r7, pc}
     434:	0000032d 	.word	0x0000032d

00000438 <system_interrupt_enter_critical_section>:
{
     438:	b580      	push	{r7, lr}
     43a:	af00      	add	r7, sp, #0
	cpu_irq_enter_critical();
     43c:	4b02      	ldr	r3, [pc, #8]	; (448 <system_interrupt_enter_critical_section+0x10>)
     43e:	4798      	blx	r3
}
     440:	46c0      	nop			; (mov r8, r8)
     442:	46bd      	mov	sp, r7
     444:	bd80      	pop	{r7, pc}
     446:	46c0      	nop			; (mov r8, r8)
     448:	000130d9 	.word	0x000130d9

0000044c <system_interrupt_leave_critical_section>:
{
     44c:	b580      	push	{r7, lr}
     44e:	af00      	add	r7, sp, #0
	cpu_irq_leave_critical();
     450:	4b02      	ldr	r3, [pc, #8]	; (45c <system_interrupt_leave_critical_section+0x10>)
     452:	4798      	blx	r3
}
     454:	46c0      	nop			; (mov r8, r8)
     456:	46bd      	mov	sp, r7
     458:	bd80      	pop	{r7, pc}
     45a:	46c0      	nop			; (mov r8, r8)
     45c:	0001312d 	.word	0x0001312d

00000460 <DMAC_Handler>:
/**
 * \brief DMA interrupt service routine.
 *
 */
void DMAC_Handler( void )
{
     460:	b580      	push	{r7, lr}
     462:	b086      	sub	sp, #24
     464:	af00      	add	r7, sp, #0
	struct dma_resource *resource;
	uint8_t isr;
	uint32_t write_size;
	uint32_t total_size;

	system_interrupt_enter_critical_section();
     466:	4b49      	ldr	r3, [pc, #292]	; (58c <DMAC_Handler+0x12c>)
     468:	4798      	blx	r3

	/* Get Pending channel */
	active_channel =  DMAC->INTPEND.reg & DMAC_INTPEND_ID_Msk;
     46a:	4b49      	ldr	r3, [pc, #292]	; (590 <DMAC_Handler+0x130>)
     46c:	8c1b      	ldrh	r3, [r3, #32]
     46e:	b29b      	uxth	r3, r3
     470:	b2da      	uxtb	r2, r3
     472:	2317      	movs	r3, #23
     474:	18fb      	adds	r3, r7, r3
     476:	210f      	movs	r1, #15
     478:	400a      	ands	r2, r1
     47a:	701a      	strb	r2, [r3, #0]

	Assert(_dma_active_resource[active_channel]);

	/* Get active DMA resource based on channel */
	resource = _dma_active_resource[active_channel];
     47c:	2317      	movs	r3, #23
     47e:	18fb      	adds	r3, r7, r3
     480:	781a      	ldrb	r2, [r3, #0]
     482:	4b44      	ldr	r3, [pc, #272]	; (594 <DMAC_Handler+0x134>)
     484:	0092      	lsls	r2, r2, #2
     486:	58d3      	ldr	r3, [r2, r3]
     488:	613b      	str	r3, [r7, #16]

	/* Select the active channel */
	DMAC->CHID.reg = DMAC_CHID_ID(resource->channel_id);
     48a:	4a41      	ldr	r2, [pc, #260]	; (590 <DMAC_Handler+0x130>)
     48c:	693b      	ldr	r3, [r7, #16]
     48e:	781b      	ldrb	r3, [r3, #0]
     490:	210f      	movs	r1, #15
     492:	400b      	ands	r3, r1
     494:	b2d9      	uxtb	r1, r3
     496:	233f      	movs	r3, #63	; 0x3f
     498:	54d1      	strb	r1, [r2, r3]
	isr = DMAC->CHINTFLAG.reg;
     49a:	493d      	ldr	r1, [pc, #244]	; (590 <DMAC_Handler+0x130>)
     49c:	230f      	movs	r3, #15
     49e:	18fb      	adds	r3, r7, r3
     4a0:	224e      	movs	r2, #78	; 0x4e
     4a2:	5c8a      	ldrb	r2, [r1, r2]
     4a4:	701a      	strb	r2, [r3, #0]

	/* Calculate block transfer size of the DMA transfer */
	total_size = descriptor_section[resource->channel_id].BTCNT.reg;
     4a6:	693b      	ldr	r3, [r7, #16]
     4a8:	781b      	ldrb	r3, [r3, #0]
     4aa:	4a3b      	ldr	r2, [pc, #236]	; (598 <DMAC_Handler+0x138>)
     4ac:	011b      	lsls	r3, r3, #4
     4ae:	18d3      	adds	r3, r2, r3
     4b0:	3302      	adds	r3, #2
     4b2:	881b      	ldrh	r3, [r3, #0]
     4b4:	b29b      	uxth	r3, r3
     4b6:	60bb      	str	r3, [r7, #8]
	write_size = _write_back_section[resource->channel_id].BTCNT.reg;
     4b8:	693b      	ldr	r3, [r7, #16]
     4ba:	781b      	ldrb	r3, [r3, #0]
     4bc:	4a37      	ldr	r2, [pc, #220]	; (59c <DMAC_Handler+0x13c>)
     4be:	011b      	lsls	r3, r3, #4
     4c0:	18d3      	adds	r3, r2, r3
     4c2:	3302      	adds	r3, #2
     4c4:	881b      	ldrh	r3, [r3, #0]
     4c6:	b29b      	uxth	r3, r3
     4c8:	607b      	str	r3, [r7, #4]
	resource->transfered_size = total_size - write_size;
     4ca:	68ba      	ldr	r2, [r7, #8]
     4cc:	687b      	ldr	r3, [r7, #4]
     4ce:	1ad2      	subs	r2, r2, r3
     4d0:	693b      	ldr	r3, [r7, #16]
     4d2:	615a      	str	r2, [r3, #20]

	/* DMA channel interrupt handler */
	if (isr & DMAC_CHINTENCLR_TERR) {
     4d4:	230f      	movs	r3, #15
     4d6:	18fb      	adds	r3, r7, r3
     4d8:	781b      	ldrb	r3, [r3, #0]
     4da:	2201      	movs	r2, #1
     4dc:	4013      	ands	r3, r2
     4de:	d016      	beq.n	50e <DMAC_Handler+0xae>
		/* Clear transfer error flag */
		DMAC->CHINTFLAG.reg = DMAC_CHINTENCLR_TERR;
     4e0:	4a2b      	ldr	r2, [pc, #172]	; (590 <DMAC_Handler+0x130>)
     4e2:	234e      	movs	r3, #78	; 0x4e
     4e4:	2101      	movs	r1, #1
     4e6:	54d1      	strb	r1, [r2, r3]

		/* Set I/O ERROR status */
		resource->job_status = STATUS_ERR_IO;
     4e8:	693b      	ldr	r3, [r7, #16]
     4ea:	2210      	movs	r2, #16
     4ec:	745a      	strb	r2, [r3, #17]

		/* Execute the callback function */
		if ((resource->callback_enable & (1<<DMA_CALLBACK_TRANSFER_ERROR)) &&
     4ee:	693b      	ldr	r3, [r7, #16]
     4f0:	7c1b      	ldrb	r3, [r3, #16]
     4f2:	001a      	movs	r2, r3
     4f4:	2301      	movs	r3, #1
     4f6:	4013      	ands	r3, r2
     4f8:	d042      	beq.n	580 <DMAC_Handler+0x120>
				(resource->callback[DMA_CALLBACK_TRANSFER_ERROR])) {
     4fa:	693b      	ldr	r3, [r7, #16]
     4fc:	685b      	ldr	r3, [r3, #4]
		if ((resource->callback_enable & (1<<DMA_CALLBACK_TRANSFER_ERROR)) &&
     4fe:	2b00      	cmp	r3, #0
     500:	d03e      	beq.n	580 <DMAC_Handler+0x120>
			resource->callback[DMA_CALLBACK_TRANSFER_ERROR](resource);
     502:	693b      	ldr	r3, [r7, #16]
     504:	685b      	ldr	r3, [r3, #4]
     506:	693a      	ldr	r2, [r7, #16]
     508:	0010      	movs	r0, r2
     50a:	4798      	blx	r3
     50c:	e038      	b.n	580 <DMAC_Handler+0x120>
		}
	} else if (isr & DMAC_CHINTENCLR_TCMPL) {
     50e:	230f      	movs	r3, #15
     510:	18fb      	adds	r3, r7, r3
     512:	781b      	ldrb	r3, [r3, #0]
     514:	2202      	movs	r2, #2
     516:	4013      	ands	r3, r2
     518:	d016      	beq.n	548 <DMAC_Handler+0xe8>
		/* Clear the transfer complete flag */
		DMAC->CHINTFLAG.reg = DMAC_CHINTENCLR_TCMPL;
     51a:	4a1d      	ldr	r2, [pc, #116]	; (590 <DMAC_Handler+0x130>)
     51c:	234e      	movs	r3, #78	; 0x4e
     51e:	2102      	movs	r1, #2
     520:	54d1      	strb	r1, [r2, r3]

		/* Set job status */
		resource->job_status = STATUS_OK;
     522:	693b      	ldr	r3, [r7, #16]
     524:	2200      	movs	r2, #0
     526:	745a      	strb	r2, [r3, #17]

		/* Execute the callback function */
		if ((resource->callback_enable & (1 << DMA_CALLBACK_TRANSFER_DONE)) &&
     528:	693b      	ldr	r3, [r7, #16]
     52a:	7c1b      	ldrb	r3, [r3, #16]
     52c:	001a      	movs	r2, r3
     52e:	2302      	movs	r3, #2
     530:	4013      	ands	r3, r2
     532:	d025      	beq.n	580 <DMAC_Handler+0x120>
				(resource->callback[DMA_CALLBACK_TRANSFER_DONE])) {
     534:	693b      	ldr	r3, [r7, #16]
     536:	689b      	ldr	r3, [r3, #8]
		if ((resource->callback_enable & (1 << DMA_CALLBACK_TRANSFER_DONE)) &&
     538:	2b00      	cmp	r3, #0
     53a:	d021      	beq.n	580 <DMAC_Handler+0x120>
			resource->callback[DMA_CALLBACK_TRANSFER_DONE](resource);
     53c:	693b      	ldr	r3, [r7, #16]
     53e:	689b      	ldr	r3, [r3, #8]
     540:	693a      	ldr	r2, [r7, #16]
     542:	0010      	movs	r0, r2
     544:	4798      	blx	r3
     546:	e01b      	b.n	580 <DMAC_Handler+0x120>
		}
	} else if (isr & DMAC_CHINTENCLR_SUSP) {
     548:	230f      	movs	r3, #15
     54a:	18fb      	adds	r3, r7, r3
     54c:	781b      	ldrb	r3, [r3, #0]
     54e:	2204      	movs	r2, #4
     550:	4013      	ands	r3, r2
     552:	d015      	beq.n	580 <DMAC_Handler+0x120>
		/* Clear channel suspend flag */
		DMAC->CHINTFLAG.reg = DMAC_CHINTENCLR_SUSP;
     554:	4a0e      	ldr	r2, [pc, #56]	; (590 <DMAC_Handler+0x130>)
     556:	234e      	movs	r3, #78	; 0x4e
     558:	2104      	movs	r1, #4
     55a:	54d1      	strb	r1, [r2, r3]

		/* Set job status */
		resource->job_status = STATUS_SUSPEND;
     55c:	693b      	ldr	r3, [r7, #16]
     55e:	2206      	movs	r2, #6
     560:	745a      	strb	r2, [r3, #17]

		/* Execute the callback function */
		if ((resource->callback_enable & (1 << DMA_CALLBACK_CHANNEL_SUSPEND)) &&
     562:	693b      	ldr	r3, [r7, #16]
     564:	7c1b      	ldrb	r3, [r3, #16]
     566:	001a      	movs	r2, r3
     568:	2304      	movs	r3, #4
     56a:	4013      	ands	r3, r2
     56c:	d008      	beq.n	580 <DMAC_Handler+0x120>
			(resource->callback[DMA_CALLBACK_CHANNEL_SUSPEND])){
     56e:	693b      	ldr	r3, [r7, #16]
     570:	68db      	ldr	r3, [r3, #12]
		if ((resource->callback_enable & (1 << DMA_CALLBACK_CHANNEL_SUSPEND)) &&
     572:	2b00      	cmp	r3, #0
     574:	d004      	beq.n	580 <DMAC_Handler+0x120>
			resource->callback[DMA_CALLBACK_CHANNEL_SUSPEND](resource);
     576:	693b      	ldr	r3, [r7, #16]
     578:	68db      	ldr	r3, [r3, #12]
     57a:	693a      	ldr	r2, [r7, #16]
     57c:	0010      	movs	r0, r2
     57e:	4798      	blx	r3
		}
	}

	system_interrupt_leave_critical_section();
     580:	4b07      	ldr	r3, [pc, #28]	; (5a0 <DMAC_Handler+0x140>)
     582:	4798      	blx	r3
}
     584:	46c0      	nop			; (mov r8, r8)
     586:	46bd      	mov	sp, r7
     588:	b006      	add	sp, #24
     58a:	bd80      	pop	{r7, pc}
     58c:	00000439 	.word	0x00000439
     590:	41004800 	.word	0x41004800
     594:	20000360 	.word	0x20000360
     598:	200041b0 	.word	0x200041b0
     59c:	20000310 	.word	0x20000310
     5a0:	0000044d 	.word	0x0000044d

000005a4 <EVSYS_Handler>:

	return STATUS_OK;
}

void EVSYS_Handler(void)
{
     5a4:	b580      	push	{r7, lr}
     5a6:	b082      	sub	sp, #8
     5a8:	af00      	add	r7, sp, #0
	struct events_hook *current_hook = _events_inst.hook_list;
     5aa:	4b15      	ldr	r3, [pc, #84]	; (600 <EVSYS_Handler+0x5c>)
     5ac:	691b      	ldr	r3, [r3, #16]
     5ae:	607b      	str	r3, [r7, #4]
	uint32_t flag;

	/* Synch the interrupt flag buffer with the hardware register */
	flag = EVSYS->INTFLAG.reg;
     5b0:	4b14      	ldr	r3, [pc, #80]	; (604 <EVSYS_Handler+0x60>)
     5b2:	699b      	ldr	r3, [r3, #24]
     5b4:	603b      	str	r3, [r7, #0]
	_events_inst.interrupt_flag_buffer |= flag;
     5b6:	4b12      	ldr	r3, [pc, #72]	; (600 <EVSYS_Handler+0x5c>)
     5b8:	689a      	ldr	r2, [r3, #8]
     5ba:	683b      	ldr	r3, [r7, #0]
     5bc:	431a      	orrs	r2, r3
     5be:	4b10      	ldr	r3, [pc, #64]	; (600 <EVSYS_Handler+0x5c>)
     5c0:	609a      	str	r2, [r3, #8]
	/* Clear all hardware interrupt flags */
	EVSYS->INTFLAG.reg = _EVENTS_INTFLAGS_MASK;
     5c2:	4b10      	ldr	r3, [pc, #64]	; (604 <EVSYS_Handler+0x60>)
     5c4:	4a10      	ldr	r2, [pc, #64]	; (608 <EVSYS_Handler+0x64>)
     5c6:	619a      	str	r2, [r3, #24]

	/* Traverse the linked list */
	while (current_hook != NULL) {
     5c8:	e008      	b.n	5dc <EVSYS_Handler+0x38>
		current_hook->hook_func(current_hook->resource);
     5ca:	687b      	ldr	r3, [r7, #4]
     5cc:	685a      	ldr	r2, [r3, #4]
     5ce:	687b      	ldr	r3, [r7, #4]
     5d0:	681b      	ldr	r3, [r3, #0]
     5d2:	0018      	movs	r0, r3
     5d4:	4790      	blx	r2
		current_hook = current_hook->next;
     5d6:	687b      	ldr	r3, [r7, #4]
     5d8:	689b      	ldr	r3, [r3, #8]
     5da:	607b      	str	r3, [r7, #4]
	while (current_hook != NULL) {
     5dc:	687b      	ldr	r3, [r7, #4]
     5de:	2b00      	cmp	r3, #0
     5e0:	d1f3      	bne.n	5ca <EVSYS_Handler+0x26>
	}

	/* Clear acknowledged interrupt sources from the interrupt flag buffer */
	flag = _events_inst.interrupt_flag_ack_buffer;
     5e2:	4b07      	ldr	r3, [pc, #28]	; (600 <EVSYS_Handler+0x5c>)
     5e4:	68db      	ldr	r3, [r3, #12]
     5e6:	603b      	str	r3, [r7, #0]
	_events_inst.interrupt_flag_buffer &= ~flag;
     5e8:	4b05      	ldr	r3, [pc, #20]	; (600 <EVSYS_Handler+0x5c>)
     5ea:	689b      	ldr	r3, [r3, #8]
     5ec:	683a      	ldr	r2, [r7, #0]
     5ee:	43d2      	mvns	r2, r2
     5f0:	401a      	ands	r2, r3
     5f2:	4b03      	ldr	r3, [pc, #12]	; (600 <EVSYS_Handler+0x5c>)
     5f4:	609a      	str	r2, [r3, #8]
}
     5f6:	46c0      	nop			; (mov r8, r8)
     5f8:	46bd      	mov	sp, r7
     5fa:	b002      	add	sp, #8
     5fc:	bd80      	pop	{r7, pc}
     5fe:	46c0      	nop			; (mov r8, r8)
     600:	20000000 	.word	0x20000000
     604:	42000400 	.word	0x42000400
     608:	0f0fffff 	.word	0x0f0fffff

0000060c <system_apb_clock_set_mask>:
 * \retval STATUS_OK               The clock mask was set successfully
 */
static inline enum status_code system_apb_clock_set_mask(
		const enum system_clock_apb_bus bus,
		const uint32_t mask)
{
     60c:	b580      	push	{r7, lr}
     60e:	b082      	sub	sp, #8
     610:	af00      	add	r7, sp, #0
     612:	0002      	movs	r2, r0
     614:	6039      	str	r1, [r7, #0]
     616:	1dfb      	adds	r3, r7, #7
     618:	701a      	strb	r2, [r3, #0]
	switch (bus) {
     61a:	1dfb      	adds	r3, r7, #7
     61c:	781b      	ldrb	r3, [r3, #0]
     61e:	2b01      	cmp	r3, #1
     620:	d00a      	beq.n	638 <system_apb_clock_set_mask+0x2c>
     622:	2b02      	cmp	r3, #2
     624:	d00f      	beq.n	646 <system_apb_clock_set_mask+0x3a>
     626:	2b00      	cmp	r3, #0
     628:	d114      	bne.n	654 <system_apb_clock_set_mask+0x48>
		case SYSTEM_CLOCK_APB_APBA:
			PM->APBAMASK.reg |= mask;
     62a:	4b0e      	ldr	r3, [pc, #56]	; (664 <system_apb_clock_set_mask+0x58>)
     62c:	4a0d      	ldr	r2, [pc, #52]	; (664 <system_apb_clock_set_mask+0x58>)
     62e:	6991      	ldr	r1, [r2, #24]
     630:	683a      	ldr	r2, [r7, #0]
     632:	430a      	orrs	r2, r1
     634:	619a      	str	r2, [r3, #24]
			break;
     636:	e00f      	b.n	658 <system_apb_clock_set_mask+0x4c>

		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBMASK.reg |= mask;
     638:	4b0a      	ldr	r3, [pc, #40]	; (664 <system_apb_clock_set_mask+0x58>)
     63a:	4a0a      	ldr	r2, [pc, #40]	; (664 <system_apb_clock_set_mask+0x58>)
     63c:	69d1      	ldr	r1, [r2, #28]
     63e:	683a      	ldr	r2, [r7, #0]
     640:	430a      	orrs	r2, r1
     642:	61da      	str	r2, [r3, #28]
			break;
     644:	e008      	b.n	658 <system_apb_clock_set_mask+0x4c>

		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCMASK.reg |= mask;
     646:	4b07      	ldr	r3, [pc, #28]	; (664 <system_apb_clock_set_mask+0x58>)
     648:	4a06      	ldr	r2, [pc, #24]	; (664 <system_apb_clock_set_mask+0x58>)
     64a:	6a11      	ldr	r1, [r2, #32]
     64c:	683a      	ldr	r2, [r7, #0]
     64e:	430a      	orrs	r2, r1
     650:	621a      	str	r2, [r3, #32]
			break;
     652:	e001      	b.n	658 <system_apb_clock_set_mask+0x4c>

		default:
			Assert(false);
			return STATUS_ERR_INVALID_ARG;
     654:	2317      	movs	r3, #23
     656:	e000      	b.n	65a <system_apb_clock_set_mask+0x4e>

	}

	return STATUS_OK;
     658:	2300      	movs	r3, #0
}
     65a:	0018      	movs	r0, r3
     65c:	46bd      	mov	sp, r7
     65e:	b002      	add	sp, #8
     660:	bd80      	pop	{r7, pc}
     662:	46c0      	nop			; (mov r8, r8)
     664:	40000400 	.word	0x40000400

00000668 <_system_events_init>:
#if defined(__GNUC__)
#  pragma GCC diagnostic push
#  pragma GCC diagnostic ignored "-Wmissing-prototypes"
#endif
void _system_events_init(void)
{
     668:	b580      	push	{r7, lr}
     66a:	af00      	add	r7, sp, #0
	/* Enable EVSYS register interface */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, PM_APBCMASK_EVSYS);
     66c:	2102      	movs	r1, #2
     66e:	2002      	movs	r0, #2
     670:	4b07      	ldr	r3, [pc, #28]	; (690 <_system_events_init+0x28>)
     672:	4798      	blx	r3

	/* Make sure the EVSYS module is properly reset */
	EVSYS->CTRL.reg = EVSYS_CTRL_SWRST;
     674:	4b07      	ldr	r3, [pc, #28]	; (694 <_system_events_init+0x2c>)
     676:	2201      	movs	r2, #1
     678:	701a      	strb	r2, [r3, #0]

	while (EVSYS->CTRL.reg & EVSYS_CTRL_SWRST) {
     67a:	46c0      	nop			; (mov r8, r8)
     67c:	4b05      	ldr	r3, [pc, #20]	; (694 <_system_events_init+0x2c>)
     67e:	781b      	ldrb	r3, [r3, #0]
     680:	b2db      	uxtb	r3, r3
     682:	001a      	movs	r2, r3
     684:	2301      	movs	r3, #1
     686:	4013      	ands	r3, r2
     688:	d1f8      	bne.n	67c <_system_events_init+0x14>
	}
}
     68a:	46c0      	nop			; (mov r8, r8)
     68c:	46bd      	mov	sp, r7
     68e:	bd80      	pop	{r7, pc}
     690:	0000060d 	.word	0x0000060d
     694:	42000400 	.word	0x42000400

00000698 <i2c_master_is_syncing>:
 * \retval true   Module is busy synchronizing
 * \retval false  Module is not synchronizing
 */
static inline bool i2c_master_is_syncing (
		const struct i2c_master_module *const module)
{
     698:	b580      	push	{r7, lr}
     69a:	b084      	sub	sp, #16
     69c:	af00      	add	r7, sp, #0
     69e:	6078      	str	r0, [r7, #4]
	/* Sanity check */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_hw = &(module->hw->I2CM);
     6a0:	687b      	ldr	r3, [r7, #4]
     6a2:	681b      	ldr	r3, [r3, #0]
     6a4:	60fb      	str	r3, [r7, #12]

#if defined(FEATURE_SERCOM_SYNCBUSY_SCHEME_VERSION_1)
	return (i2c_hw->STATUS.reg & SERCOM_I2CM_STATUS_SYNCBUSY);
#elif defined(FEATURE_SERCOM_SYNCBUSY_SCHEME_VERSION_2)
	return (i2c_hw->SYNCBUSY.reg & SERCOM_I2CM_SYNCBUSY_MASK);
     6a6:	68fb      	ldr	r3, [r7, #12]
     6a8:	69db      	ldr	r3, [r3, #28]
     6aa:	2207      	movs	r2, #7
     6ac:	4013      	ands	r3, r2
     6ae:	1e5a      	subs	r2, r3, #1
     6b0:	4193      	sbcs	r3, r2
     6b2:	b2db      	uxtb	r3, r3
#else
#  error Unknown SERCOM SYNCBUSY scheme!
#endif
}
     6b4:	0018      	movs	r0, r3
     6b6:	46bd      	mov	sp, r7
     6b8:	b004      	add	sp, #16
     6ba:	bd80      	pop	{r7, pc}

000006bc <_i2c_master_wait_for_sync>:
 *
 * \param[in]  module  Pointer to software module structure
 */
static void _i2c_master_wait_for_sync(
		const struct i2c_master_module *const module)
{
     6bc:	b580      	push	{r7, lr}
     6be:	b082      	sub	sp, #8
     6c0:	af00      	add	r7, sp, #0
     6c2:	6078      	str	r0, [r7, #4]
	/* Sanity check */
	Assert(module);

	while (i2c_master_is_syncing(module)) {
     6c4:	46c0      	nop			; (mov r8, r8)
     6c6:	687b      	ldr	r3, [r7, #4]
     6c8:	0018      	movs	r0, r3
     6ca:	4b04      	ldr	r3, [pc, #16]	; (6dc <_i2c_master_wait_for_sync+0x20>)
     6cc:	4798      	blx	r3
     6ce:	1e03      	subs	r3, r0, #0
     6d0:	d1f9      	bne.n	6c6 <_i2c_master_wait_for_sync+0xa>
		/* Wait for I2C module to sync. */
	}
}
     6d2:	46c0      	nop			; (mov r8, r8)
     6d4:	46bd      	mov	sp, r7
     6d6:	b002      	add	sp, #8
     6d8:	bd80      	pop	{r7, pc}
     6da:	46c0      	nop			; (mov r8, r8)
     6dc:	00000699 	.word	0x00000699

000006e0 <_i2c_master_read>:
 *
 * \param[in,out] module  Pointer to software module structure
 */
static void _i2c_master_read(
		struct i2c_master_module *const module)
{
     6e0:	b580      	push	{r7, lr}
     6e2:	b084      	sub	sp, #16
     6e4:	af00      	add	r7, sp, #0
     6e6:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments. */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
     6e8:	687b      	ldr	r3, [r7, #4]
     6ea:	681b      	ldr	r3, [r3, #0]
     6ec:	60fb      	str	r3, [r7, #12]
	bool sclsm_flag = i2c_module->CTRLA.bit.SCLSM;
     6ee:	68fb      	ldr	r3, [r7, #12]
     6f0:	681b      	ldr	r3, [r3, #0]
     6f2:	011b      	lsls	r3, r3, #4
     6f4:	0fdb      	lsrs	r3, r3, #31
     6f6:	b2db      	uxtb	r3, r3
     6f8:	001a      	movs	r2, r3
     6fa:	230b      	movs	r3, #11
     6fc:	18fb      	adds	r3, r7, r3
     6fe:	1e51      	subs	r1, r2, #1
     700:	418a      	sbcs	r2, r1
     702:	701a      	strb	r2, [r3, #0]

	/* Find index to save next value in buffer */
	uint16_t buffer_index = module->buffer_length;
     704:	2308      	movs	r3, #8
     706:	18fb      	adds	r3, r7, r3
     708:	687a      	ldr	r2, [r7, #4]
     70a:	8b52      	ldrh	r2, [r2, #26]
     70c:	801a      	strh	r2, [r3, #0]
	buffer_index -= module->buffer_remaining;
     70e:	687b      	ldr	r3, [r7, #4]
     710:	8b9b      	ldrh	r3, [r3, #28]
     712:	b29a      	uxth	r2, r3
     714:	2308      	movs	r3, #8
     716:	18fb      	adds	r3, r7, r3
     718:	2108      	movs	r1, #8
     71a:	1879      	adds	r1, r7, r1
     71c:	8809      	ldrh	r1, [r1, #0]
     71e:	1a8a      	subs	r2, r1, r2
     720:	801a      	strh	r2, [r3, #0]

	module->buffer_remaining--;
     722:	687b      	ldr	r3, [r7, #4]
     724:	8b9b      	ldrh	r3, [r3, #28]
     726:	b29b      	uxth	r3, r3
     728:	3b01      	subs	r3, #1
     72a:	b29a      	uxth	r2, r3
     72c:	687b      	ldr	r3, [r7, #4]
     72e:	839a      	strh	r2, [r3, #28]

	if (sclsm_flag) {
     730:	230b      	movs	r3, #11
     732:	18fb      	adds	r3, r7, r3
     734:	781b      	ldrb	r3, [r3, #0]
     736:	2b00      	cmp	r3, #0
     738:	d010      	beq.n	75c <_i2c_master_read+0x7c>
		if (module->send_nack && module->buffer_remaining == 1) {
     73a:	687b      	ldr	r3, [r7, #4]
     73c:	7adb      	ldrb	r3, [r3, #11]
     73e:	2b00      	cmp	r3, #0
     740:	d01c      	beq.n	77c <_i2c_master_read+0x9c>
     742:	687b      	ldr	r3, [r7, #4]
     744:	8b9b      	ldrh	r3, [r3, #28]
     746:	b29b      	uxth	r3, r3
     748:	2b01      	cmp	r3, #1
     74a:	d117      	bne.n	77c <_i2c_master_read+0x9c>
			/* Set action to NACK. */
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
     74c:	68fb      	ldr	r3, [r7, #12]
     74e:	685b      	ldr	r3, [r3, #4]
     750:	2280      	movs	r2, #128	; 0x80
     752:	02d2      	lsls	r2, r2, #11
     754:	431a      	orrs	r2, r3
     756:	68fb      	ldr	r3, [r7, #12]
     758:	605a      	str	r2, [r3, #4]
     75a:	e00f      	b.n	77c <_i2c_master_read+0x9c>
		}
	} else {
		if (module->send_nack && module->buffer_remaining == 0) {
     75c:	687b      	ldr	r3, [r7, #4]
     75e:	7adb      	ldrb	r3, [r3, #11]
     760:	2b00      	cmp	r3, #0
     762:	d00b      	beq.n	77c <_i2c_master_read+0x9c>
     764:	687b      	ldr	r3, [r7, #4]
     766:	8b9b      	ldrh	r3, [r3, #28]
     768:	b29b      	uxth	r3, r3
     76a:	2b00      	cmp	r3, #0
     76c:	d106      	bne.n	77c <_i2c_master_read+0x9c>
			/* Set action to NACK. */
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
     76e:	68fb      	ldr	r3, [r7, #12]
     770:	685b      	ldr	r3, [r3, #4]
     772:	2280      	movs	r2, #128	; 0x80
     774:	02d2      	lsls	r2, r2, #11
     776:	431a      	orrs	r2, r3
     778:	68fb      	ldr	r3, [r7, #12]
     77a:	605a      	str	r2, [r3, #4]
		}
	}

	if (module->buffer_remaining == 0) {
     77c:	687b      	ldr	r3, [r7, #4]
     77e:	8b9b      	ldrh	r3, [r3, #28]
     780:	b29b      	uxth	r3, r3
     782:	2b00      	cmp	r3, #0
     784:	d10e      	bne.n	7a4 <_i2c_master_read+0xc4>
		if (module->send_stop) {
     786:	687b      	ldr	r3, [r7, #4]
     788:	7a9b      	ldrb	r3, [r3, #10]
     78a:	2b00      	cmp	r3, #0
     78c:	d00a      	beq.n	7a4 <_i2c_master_read+0xc4>
			/* Send stop condition */
			_i2c_master_wait_for_sync(module);
     78e:	687b      	ldr	r3, [r7, #4]
     790:	0018      	movs	r0, r3
     792:	4b0e      	ldr	r3, [pc, #56]	; (7cc <_i2c_master_read+0xec>)
     794:	4798      	blx	r3
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
     796:	68fb      	ldr	r3, [r7, #12]
     798:	685b      	ldr	r3, [r3, #4]
     79a:	22c0      	movs	r2, #192	; 0xc0
     79c:	0292      	lsls	r2, r2, #10
     79e:	431a      	orrs	r2, r3
     7a0:	68fb      	ldr	r3, [r7, #12]
     7a2:	605a      	str	r2, [r3, #4]
		}
	}
	
	/* Read byte from slave and put in buffer */
	_i2c_master_wait_for_sync(module);
     7a4:	687b      	ldr	r3, [r7, #4]
     7a6:	0018      	movs	r0, r3
     7a8:	4b08      	ldr	r3, [pc, #32]	; (7cc <_i2c_master_read+0xec>)
     7aa:	4798      	blx	r3
	module->buffer[buffer_index] = i2c_module->DATA.reg;
     7ac:	687b      	ldr	r3, [r7, #4]
     7ae:	6a1a      	ldr	r2, [r3, #32]
     7b0:	2308      	movs	r3, #8
     7b2:	18fb      	adds	r3, r7, r3
     7b4:	881b      	ldrh	r3, [r3, #0]
     7b6:	18d3      	adds	r3, r2, r3
     7b8:	68fa      	ldr	r2, [r7, #12]
     7ba:	2128      	movs	r1, #40	; 0x28
     7bc:	5c52      	ldrb	r2, [r2, r1]
     7be:	b2d2      	uxtb	r2, r2
     7c0:	701a      	strb	r2, [r3, #0]
}
     7c2:	46c0      	nop			; (mov r8, r8)
     7c4:	46bd      	mov	sp, r7
     7c6:	b004      	add	sp, #16
     7c8:	bd80      	pop	{r7, pc}
     7ca:	46c0      	nop			; (mov r8, r8)
     7cc:	000006bd 	.word	0x000006bd

000007d0 <_i2c_master_write>:
 * Write next data. Used by interrupt handler to send next data byte to slave.
 *
 * \param[in,out] module  Pointer to software module structure
 */
static void _i2c_master_write(struct i2c_master_module *const module)
{
     7d0:	b580      	push	{r7, lr}
     7d2:	b084      	sub	sp, #16
     7d4:	af00      	add	r7, sp, #0
     7d6:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments. */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
     7d8:	687b      	ldr	r3, [r7, #4]
     7da:	681b      	ldr	r3, [r3, #0]
     7dc:	60fb      	str	r3, [r7, #12]

	/* Check for ack from slave */
	if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_RXNACK)
     7de:	68fb      	ldr	r3, [r7, #12]
     7e0:	8b5b      	ldrh	r3, [r3, #26]
     7e2:	b29b      	uxth	r3, r3
     7e4:	001a      	movs	r2, r3
     7e6:	2304      	movs	r3, #4
     7e8:	4013      	ands	r3, r2
     7ea:	d004      	beq.n	7f6 <_i2c_master_write+0x26>
	{
		/* Set status */
		module->status = STATUS_ERR_OVERFLOW;
     7ec:	687b      	ldr	r3, [r7, #4]
     7ee:	2225      	movs	r2, #37	; 0x25
     7f0:	211e      	movs	r1, #30
     7f2:	5499      	strb	r1, [r3, r2]
		/* Do not write more data */
		return;
     7f4:	e024      	b.n	840 <_i2c_master_write+0x70>
	}

	/* Find index to get next byte in buffer */
	uint16_t buffer_index = module->buffer_length;
     7f6:	230a      	movs	r3, #10
     7f8:	18fb      	adds	r3, r7, r3
     7fa:	687a      	ldr	r2, [r7, #4]
     7fc:	8b52      	ldrh	r2, [r2, #26]
     7fe:	801a      	strh	r2, [r3, #0]
	buffer_index -= module->buffer_remaining;
     800:	687b      	ldr	r3, [r7, #4]
     802:	8b9b      	ldrh	r3, [r3, #28]
     804:	b29a      	uxth	r2, r3
     806:	230a      	movs	r3, #10
     808:	18fb      	adds	r3, r7, r3
     80a:	210a      	movs	r1, #10
     80c:	1879      	adds	r1, r7, r1
     80e:	8809      	ldrh	r1, [r1, #0]
     810:	1a8a      	subs	r2, r1, r2
     812:	801a      	strh	r2, [r3, #0]

	module->buffer_remaining--;
     814:	687b      	ldr	r3, [r7, #4]
     816:	8b9b      	ldrh	r3, [r3, #28]
     818:	b29b      	uxth	r3, r3
     81a:	3b01      	subs	r3, #1
     81c:	b29a      	uxth	r2, r3
     81e:	687b      	ldr	r3, [r7, #4]
     820:	839a      	strh	r2, [r3, #28]

	/* Write byte from buffer to slave */
	_i2c_master_wait_for_sync(module);
     822:	687b      	ldr	r3, [r7, #4]
     824:	0018      	movs	r0, r3
     826:	4b08      	ldr	r3, [pc, #32]	; (848 <_i2c_master_write+0x78>)
     828:	4798      	blx	r3
	i2c_module->DATA.reg = module->buffer[buffer_index];
     82a:	687b      	ldr	r3, [r7, #4]
     82c:	6a1a      	ldr	r2, [r3, #32]
     82e:	230a      	movs	r3, #10
     830:	18fb      	adds	r3, r7, r3
     832:	881b      	ldrh	r3, [r3, #0]
     834:	18d3      	adds	r3, r2, r3
     836:	781b      	ldrb	r3, [r3, #0]
     838:	b2d9      	uxtb	r1, r3
     83a:	68fb      	ldr	r3, [r7, #12]
     83c:	2228      	movs	r2, #40	; 0x28
     83e:	5499      	strb	r1, [r3, r2]
}
     840:	46bd      	mov	sp, r7
     842:	b004      	add	sp, #16
     844:	bd80      	pop	{r7, pc}
     846:	46c0      	nop			; (mov r8, r8)
     848:	000006bd 	.word	0x000006bd

0000084c <_i2c_master_async_address_response>:
 *
 * \param[in,out] module  Pointer to software module structure
 */
static void _i2c_master_async_address_response(
		struct i2c_master_module *const module)
{
     84c:	b580      	push	{r7, lr}
     84e:	b084      	sub	sp, #16
     850:	af00      	add	r7, sp, #0
     852:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments. */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
     854:	687b      	ldr	r3, [r7, #4]
     856:	681b      	ldr	r3, [r3, #0]
     858:	60fb      	str	r3, [r7, #12]

	/* Check for error. Ignore bus-error; workaround for bus state stuck in
	 * BUSY.
	 */
	if (i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB)
     85a:	68fb      	ldr	r3, [r7, #12]
     85c:	7e1b      	ldrb	r3, [r3, #24]
     85e:	b2db      	uxtb	r3, r3
     860:	001a      	movs	r2, r3
     862:	2301      	movs	r3, #1
     864:	4013      	ands	r3, r2
     866:	d02b      	beq.n	8c0 <_i2c_master_async_address_response+0x74>
	{
		/* Clear write interrupt flag */
		i2c_module->INTFLAG.reg = SERCOM_I2CM_INTENCLR_MB;
     868:	68fb      	ldr	r3, [r7, #12]
     86a:	2201      	movs	r2, #1
     86c:	761a      	strb	r2, [r3, #24]

		/* Check arbitration */
		if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_ARBLOST) {
     86e:	68fb      	ldr	r3, [r7, #12]
     870:	8b5b      	ldrh	r3, [r3, #26]
     872:	b29b      	uxth	r3, r3
     874:	001a      	movs	r2, r3
     876:	2302      	movs	r3, #2
     878:	4013      	ands	r3, r2
     87a:	d004      	beq.n	886 <_i2c_master_async_address_response+0x3a>
			/* Return busy */
			module->status = STATUS_ERR_PACKET_COLLISION;
     87c:	687b      	ldr	r3, [r7, #4]
     87e:	2225      	movs	r2, #37	; 0x25
     880:	2141      	movs	r1, #65	; 0x41
     882:	5499      	strb	r1, [r3, r2]
     884:	e01c      	b.n	8c0 <_i2c_master_async_address_response+0x74>
		}
		/* No slave responds */
		else if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_RXNACK) {
     886:	68fb      	ldr	r3, [r7, #12]
     888:	8b5b      	ldrh	r3, [r3, #26]
     88a:	b29b      	uxth	r3, r3
     88c:	001a      	movs	r2, r3
     88e:	2304      	movs	r3, #4
     890:	4013      	ands	r3, r2
     892:	d015      	beq.n	8c0 <_i2c_master_async_address_response+0x74>
			module->status           = STATUS_ERR_BAD_ADDRESS;
     894:	687b      	ldr	r3, [r7, #4]
     896:	2225      	movs	r2, #37	; 0x25
     898:	2118      	movs	r1, #24
     89a:	5499      	strb	r1, [r3, r2]
			module->buffer_remaining = 0;
     89c:	687b      	ldr	r3, [r7, #4]
     89e:	2200      	movs	r2, #0
     8a0:	839a      	strh	r2, [r3, #28]

			if (module->send_stop) {
     8a2:	687b      	ldr	r3, [r7, #4]
     8a4:	7a9b      	ldrb	r3, [r3, #10]
     8a6:	2b00      	cmp	r3, #0
     8a8:	d00a      	beq.n	8c0 <_i2c_master_async_address_response+0x74>
				/* Send stop condition */
				_i2c_master_wait_for_sync(module);
     8aa:	687b      	ldr	r3, [r7, #4]
     8ac:	0018      	movs	r0, r3
     8ae:	4b13      	ldr	r3, [pc, #76]	; (8fc <_i2c_master_async_address_response+0xb0>)
     8b0:	4798      	blx	r3
				i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
     8b2:	68fb      	ldr	r3, [r7, #12]
     8b4:	685b      	ldr	r3, [r3, #4]
     8b6:	22c0      	movs	r2, #192	; 0xc0
     8b8:	0292      	lsls	r2, r2, #10
     8ba:	431a      	orrs	r2, r3
     8bc:	68fb      	ldr	r3, [r7, #12]
     8be:	605a      	str	r2, [r3, #4]
			}
		}
	}

	module->buffer_length = module->buffer_remaining;
     8c0:	687b      	ldr	r3, [r7, #4]
     8c2:	8b9b      	ldrh	r3, [r3, #28]
     8c4:	b29a      	uxth	r2, r3
     8c6:	687b      	ldr	r3, [r7, #4]
     8c8:	835a      	strh	r2, [r3, #26]

	/* Check for status OK. */
	if (module->status == STATUS_BUSY) {
     8ca:	687b      	ldr	r3, [r7, #4]
     8cc:	2225      	movs	r2, #37	; 0x25
     8ce:	5c9b      	ldrb	r3, [r3, r2]
     8d0:	b2db      	uxtb	r3, r3
     8d2:	2b05      	cmp	r3, #5
     8d4:	d10e      	bne.n	8f4 <_i2c_master_async_address_response+0xa8>
		/* Call function based on transfer direction. */
		if (module->transfer_direction == I2C_TRANSFER_WRITE) {
     8d6:	687b      	ldr	r3, [r7, #4]
     8d8:	2224      	movs	r2, #36	; 0x24
     8da:	5c9b      	ldrb	r3, [r3, r2]
     8dc:	b2db      	uxtb	r3, r3
     8de:	2b00      	cmp	r3, #0
     8e0:	d104      	bne.n	8ec <_i2c_master_async_address_response+0xa0>
			_i2c_master_write(module);
     8e2:	687b      	ldr	r3, [r7, #4]
     8e4:	0018      	movs	r0, r3
     8e6:	4b06      	ldr	r3, [pc, #24]	; (900 <_i2c_master_async_address_response+0xb4>)
     8e8:	4798      	blx	r3
		} else {
			_i2c_master_read(module);
		}
	}
}
     8ea:	e003      	b.n	8f4 <_i2c_master_async_address_response+0xa8>
			_i2c_master_read(module);
     8ec:	687b      	ldr	r3, [r7, #4]
     8ee:	0018      	movs	r0, r3
     8f0:	4b04      	ldr	r3, [pc, #16]	; (904 <_i2c_master_async_address_response+0xb8>)
     8f2:	4798      	blx	r3
}
     8f4:	46c0      	nop			; (mov r8, r8)
     8f6:	46bd      	mov	sp, r7
     8f8:	b004      	add	sp, #16
     8fa:	bd80      	pop	{r7, pc}
     8fc:	000006bd 	.word	0x000006bd
     900:	000007d1 	.word	0x000007d1
     904:	000006e1 	.word	0x000006e1

00000908 <i2c_master_register_callback>:
 */
void i2c_master_register_callback(
		struct i2c_master_module *const module,
		const i2c_master_callback_t callback,
		enum i2c_master_callback callback_type)
{
     908:	b580      	push	{r7, lr}
     90a:	b084      	sub	sp, #16
     90c:	af00      	add	r7, sp, #0
     90e:	60f8      	str	r0, [r7, #12]
     910:	60b9      	str	r1, [r7, #8]
     912:	1dfb      	adds	r3, r7, #7
     914:	701a      	strb	r2, [r3, #0]
	Assert(module);
	Assert(module->hw);
	Assert(callback);

	/* Register callback */
	module->callbacks[callback_type] = callback;
     916:	1dfb      	adds	r3, r7, #7
     918:	781b      	ldrb	r3, [r3, #0]
     91a:	68fa      	ldr	r2, [r7, #12]
     91c:	3302      	adds	r3, #2
     91e:	009b      	lsls	r3, r3, #2
     920:	18d3      	adds	r3, r2, r3
     922:	3304      	adds	r3, #4
     924:	68ba      	ldr	r2, [r7, #8]
     926:	601a      	str	r2, [r3, #0]

	/* Set corresponding bit to set callback as registered */
	module->registered_callback |= (1 << callback_type);
     928:	68fb      	ldr	r3, [r7, #12]
     92a:	7e1b      	ldrb	r3, [r3, #24]
     92c:	b2db      	uxtb	r3, r3
     92e:	b25a      	sxtb	r2, r3
     930:	1dfb      	adds	r3, r7, #7
     932:	781b      	ldrb	r3, [r3, #0]
     934:	2101      	movs	r1, #1
     936:	4099      	lsls	r1, r3
     938:	000b      	movs	r3, r1
     93a:	b25b      	sxtb	r3, r3
     93c:	4313      	orrs	r3, r2
     93e:	b25b      	sxtb	r3, r3
     940:	b2da      	uxtb	r2, r3
     942:	68fb      	ldr	r3, [r7, #12]
     944:	761a      	strb	r2, [r3, #24]
}
     946:	46c0      	nop			; (mov r8, r8)
     948:	46bd      	mov	sp, r7
     94a:	b004      	add	sp, #16
     94c:	bd80      	pop	{r7, pc}
	...

00000950 <_i2c_master_read_packet>:
 * \retval STATUS_BUSY  If module is currently busy with another transfer
 */
static enum status_code _i2c_master_read_packet(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
     950:	b590      	push	{r4, r7, lr}
     952:	b087      	sub	sp, #28
     954:	af00      	add	r7, sp, #0
     956:	6078      	str	r0, [r7, #4]
     958:	6039      	str	r1, [r7, #0]
	/* Sanity check */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
     95a:	687b      	ldr	r3, [r7, #4]
     95c:	681b      	ldr	r3, [r3, #0]
     95e:	613b      	str	r3, [r7, #16]
	enum status_code tmp_status;

	/* Save packet to software module */
	module->buffer             = packet->data;
     960:	683b      	ldr	r3, [r7, #0]
     962:	685a      	ldr	r2, [r3, #4]
     964:	687b      	ldr	r3, [r7, #4]
     966:	621a      	str	r2, [r3, #32]
	module->buffer_remaining   = packet->data_length;
     968:	683b      	ldr	r3, [r7, #0]
     96a:	885a      	ldrh	r2, [r3, #2]
     96c:	687b      	ldr	r3, [r7, #4]
     96e:	839a      	strh	r2, [r3, #28]
	module->transfer_direction = I2C_TRANSFER_READ;
     970:	687b      	ldr	r3, [r7, #4]
     972:	2224      	movs	r2, #36	; 0x24
     974:	2101      	movs	r1, #1
     976:	5499      	strb	r1, [r3, r2]
	module->status             = STATUS_BUSY;
     978:	687b      	ldr	r3, [r7, #4]
     97a:	2225      	movs	r2, #37	; 0x25
     97c:	2105      	movs	r1, #5
     97e:	5499      	strb	r1, [r3, r2]

	bool sclsm_flag = i2c_module->CTRLA.bit.SCLSM;
     980:	693b      	ldr	r3, [r7, #16]
     982:	681b      	ldr	r3, [r3, #0]
     984:	011b      	lsls	r3, r3, #4
     986:	0fdb      	lsrs	r3, r3, #31
     988:	b2db      	uxtb	r3, r3
     98a:	001a      	movs	r2, r3
     98c:	230f      	movs	r3, #15
     98e:	18fb      	adds	r3, r7, r3
     990:	1e51      	subs	r1, r2, #1
     992:	418a      	sbcs	r2, r1
     994:	701a      	strb	r2, [r3, #0]

	/* Switch to high speed mode */
	if (packet->high_speed) {
     996:	683b      	ldr	r3, [r7, #0]
     998:	7a5b      	ldrb	r3, [r3, #9]
     99a:	2b00      	cmp	r3, #0
     99c:	d006      	beq.n	9ac <_i2c_master_read_packet+0x5c>
		_i2c_master_send_hs_master_code(module, packet->hs_master_code);
     99e:	683b      	ldr	r3, [r7, #0]
     9a0:	7a9a      	ldrb	r2, [r3, #10]
     9a2:	687b      	ldr	r3, [r7, #4]
     9a4:	0011      	movs	r1, r2
     9a6:	0018      	movs	r0, r3
     9a8:	4b3b      	ldr	r3, [pc, #236]	; (a98 <_i2c_master_read_packet+0x148>)
     9aa:	4798      	blx	r3
	}

	/* Set action to ACK or NACK. */
	if ((sclsm_flag) && (packet->data_length == 1)) {
     9ac:	230f      	movs	r3, #15
     9ae:	18fb      	adds	r3, r7, r3
     9b0:	781b      	ldrb	r3, [r3, #0]
     9b2:	2b00      	cmp	r3, #0
     9b4:	d00b      	beq.n	9ce <_i2c_master_read_packet+0x7e>
     9b6:	683b      	ldr	r3, [r7, #0]
     9b8:	885b      	ldrh	r3, [r3, #2]
     9ba:	2b01      	cmp	r3, #1
     9bc:	d107      	bne.n	9ce <_i2c_master_read_packet+0x7e>
		i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
     9be:	693b      	ldr	r3, [r7, #16]
     9c0:	685b      	ldr	r3, [r3, #4]
     9c2:	2280      	movs	r2, #128	; 0x80
     9c4:	02d2      	lsls	r2, r2, #11
     9c6:	431a      	orrs	r2, r3
     9c8:	693b      	ldr	r3, [r7, #16]
     9ca:	605a      	str	r2, [r3, #4]
     9cc:	e005      	b.n	9da <_i2c_master_read_packet+0x8a>
	} else {
		i2c_module->CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;
     9ce:	693b      	ldr	r3, [r7, #16]
     9d0:	685b      	ldr	r3, [r3, #4]
     9d2:	4a32      	ldr	r2, [pc, #200]	; (a9c <_i2c_master_read_packet+0x14c>)
     9d4:	401a      	ands	r2, r3
     9d6:	693b      	ldr	r3, [r7, #16]
     9d8:	605a      	str	r2, [r3, #4]
	}

	if (packet->ten_bit_address) {
     9da:	683b      	ldr	r3, [r7, #0]
     9dc:	7a1b      	ldrb	r3, [r3, #8]
     9de:	2b00      	cmp	r3, #0
     9e0:	d045      	beq.n	a6e <_i2c_master_read_packet+0x11e>
		/*
		 * Write ADDR.ADDR[10:1] with the 10-bit address. ADDR.TENBITEN must
		 * be set and read/write bit (ADDR.ADDR[0]) equal to 0.
		 */
		i2c_module->ADDR.reg = (packet->address << 1) |
     9e2:	683b      	ldr	r3, [r7, #0]
     9e4:	881b      	ldrh	r3, [r3, #0]
     9e6:	005a      	lsls	r2, r3, #1
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
     9e8:	683b      	ldr	r3, [r7, #0]
     9ea:	7a5b      	ldrb	r3, [r3, #9]
     9ec:	039b      	lsls	r3, r3, #14
		i2c_module->ADDR.reg = (packet->address << 1) |
     9ee:	4313      	orrs	r3, r2
     9f0:	001a      	movs	r2, r3
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
     9f2:	2380      	movs	r3, #128	; 0x80
     9f4:	021b      	lsls	r3, r3, #8
     9f6:	431a      	orrs	r2, r3
		i2c_module->ADDR.reg = (packet->address << 1) |
     9f8:	693b      	ldr	r3, [r7, #16]
     9fa:	625a      	str	r2, [r3, #36]	; 0x24
			SERCOM_I2CM_ADDR_TENBITEN;

		/* Wait for response on bus. */
		tmp_status = _i2c_master_wait_for_bus(module);
     9fc:	2317      	movs	r3, #23
     9fe:	18fc      	adds	r4, r7, r3
     a00:	687b      	ldr	r3, [r7, #4]
     a02:	0018      	movs	r0, r3
     a04:	4b26      	ldr	r3, [pc, #152]	; (aa0 <_i2c_master_read_packet+0x150>)
     a06:	4798      	blx	r3
     a08:	0003      	movs	r3, r0
     a0a:	7023      	strb	r3, [r4, #0]

		/* Set action to ack. */
		i2c_module->CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;
     a0c:	693b      	ldr	r3, [r7, #16]
     a0e:	685b      	ldr	r3, [r3, #4]
     a10:	4a22      	ldr	r2, [pc, #136]	; (a9c <_i2c_master_read_packet+0x14c>)
     a12:	401a      	ands	r2, r3
     a14:	693b      	ldr	r3, [r7, #16]
     a16:	605a      	str	r2, [r3, #4]

		/* Check for address response error unless previous error is
		 * detected. */
		if (tmp_status == STATUS_OK) {
     a18:	2317      	movs	r3, #23
     a1a:	18fb      	adds	r3, r7, r3
     a1c:	781b      	ldrb	r3, [r3, #0]
     a1e:	2b00      	cmp	r3, #0
     a20:	d107      	bne.n	a32 <_i2c_master_read_packet+0xe2>
			tmp_status = _i2c_master_address_response(module);
     a22:	2317      	movs	r3, #23
     a24:	18fc      	adds	r4, r7, r3
     a26:	687b      	ldr	r3, [r7, #4]
     a28:	0018      	movs	r0, r3
     a2a:	4b1e      	ldr	r3, [pc, #120]	; (aa4 <_i2c_master_read_packet+0x154>)
     a2c:	4798      	blx	r3
     a2e:	0003      	movs	r3, r0
     a30:	7023      	strb	r3, [r4, #0]
		}

		if (tmp_status == STATUS_OK) {
     a32:	2317      	movs	r3, #23
     a34:	18fb      	adds	r3, r7, r3
     a36:	781b      	ldrb	r3, [r3, #0]
     a38:	2b00      	cmp	r3, #0
     a3a:	d114      	bne.n	a66 <_i2c_master_read_packet+0x116>
			/* Enable interrupts */
			i2c_module->INTENSET.reg =
     a3c:	693b      	ldr	r3, [r7, #16]
     a3e:	2203      	movs	r2, #3
     a40:	759a      	strb	r2, [r3, #22]

			/*
			 * Write ADDR[7:0] register to "11110 address[9:8] 1"
			 * ADDR.TENBITEN must be cleared
			 */
			i2c_module->ADDR.reg = (((packet->address >> 8) | 0x78) << 1) |
     a42:	683b      	ldr	r3, [r7, #0]
     a44:	881b      	ldrh	r3, [r3, #0]
     a46:	0a1b      	lsrs	r3, r3, #8
     a48:	b29b      	uxth	r3, r3
     a4a:	2278      	movs	r2, #120	; 0x78
     a4c:	4313      	orrs	r3, r2
     a4e:	b29b      	uxth	r3, r3
     a50:	005a      	lsls	r2, r3, #1
				(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
     a52:	683b      	ldr	r3, [r7, #0]
     a54:	7a5b      	ldrb	r3, [r3, #9]
     a56:	039b      	lsls	r3, r3, #14
			i2c_module->ADDR.reg = (((packet->address >> 8) | 0x78) << 1) |
     a58:	4313      	orrs	r3, r2
				(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
     a5a:	2201      	movs	r2, #1
     a5c:	4313      	orrs	r3, r2
     a5e:	001a      	movs	r2, r3
			i2c_module->ADDR.reg = (((packet->address >> 8) | 0x78) << 1) |
     a60:	693b      	ldr	r3, [r7, #16]
     a62:	625a      	str	r2, [r3, #36]	; 0x24
     a64:	e012      	b.n	a8c <_i2c_master_read_packet+0x13c>
				I2C_TRANSFER_READ;
		} else {
			return tmp_status;
     a66:	2317      	movs	r3, #23
     a68:	18fb      	adds	r3, r7, r3
     a6a:	781b      	ldrb	r3, [r3, #0]
     a6c:	e00f      	b.n	a8e <_i2c_master_read_packet+0x13e>
		}
	} else {
		/* Enable interrupts */
		i2c_module->INTENSET.reg =
     a6e:	693b      	ldr	r3, [r7, #16]
     a70:	2203      	movs	r2, #3
     a72:	759a      	strb	r2, [r3, #22]
			SERCOM_I2CM_INTENSET_MB | SERCOM_I2CM_INTENSET_SB;

		/* Set address and direction bit. Will send start command on bus */
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_READ |
     a74:	683b      	ldr	r3, [r7, #0]
     a76:	881b      	ldrh	r3, [r3, #0]
     a78:	005b      	lsls	r3, r3, #1
     a7a:	2201      	movs	r2, #1
     a7c:	431a      	orrs	r2, r3
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos);
     a7e:	683b      	ldr	r3, [r7, #0]
     a80:	7a5b      	ldrb	r3, [r3, #9]
     a82:	039b      	lsls	r3, r3, #14
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_READ |
     a84:	4313      	orrs	r3, r2
     a86:	001a      	movs	r2, r3
     a88:	693b      	ldr	r3, [r7, #16]
     a8a:	625a      	str	r2, [r3, #36]	; 0x24
	}

	return STATUS_OK;
     a8c:	2300      	movs	r3, #0
}
     a8e:	0018      	movs	r0, r3
     a90:	46bd      	mov	sp, r7
     a92:	b007      	add	sp, #28
     a94:	bd90      	pop	{r4, r7, pc}
     a96:	46c0      	nop			; (mov r8, r8)
     a98:	00004c29 	.word	0x00004c29
     a9c:	fffbffff 	.word	0xfffbffff
     aa0:	00004bcb 	.word	0x00004bcb
     aa4:	00004b6d 	.word	0x00004b6d

00000aa8 <i2c_master_read_packet_job>:
 * \retval STATUS_BUSY  If module is currently busy with another transfer
 */
enum status_code i2c_master_read_packet_job(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
     aa8:	b580      	push	{r7, lr}
     aaa:	b082      	sub	sp, #8
     aac:	af00      	add	r7, sp, #0
     aae:	6078      	str	r0, [r7, #4]
     ab0:	6039      	str	r1, [r7, #0]
	Assert(module);
	Assert(module->hw);
	Assert(packet);

	/* Check if the I2C module is busy with a job */
	if (module->buffer_remaining > 0) {
     ab2:	687b      	ldr	r3, [r7, #4]
     ab4:	8b9b      	ldrh	r3, [r3, #28]
     ab6:	b29b      	uxth	r3, r3
     ab8:	2b00      	cmp	r3, #0
     aba:	d001      	beq.n	ac0 <i2c_master_read_packet_job+0x18>
		return STATUS_BUSY;
     abc:	2305      	movs	r3, #5
     abe:	e00c      	b.n	ada <i2c_master_read_packet_job+0x32>
	}

	/* Make sure we send STOP */
	module->send_stop = true;
     ac0:	687b      	ldr	r3, [r7, #4]
     ac2:	2201      	movs	r2, #1
     ac4:	729a      	strb	r2, [r3, #10]
	module->send_nack = true;
     ac6:	687b      	ldr	r3, [r7, #4]
     ac8:	2201      	movs	r2, #1
     aca:	72da      	strb	r2, [r3, #11]
	/* Start reading */
	return _i2c_master_read_packet(module, packet);
     acc:	683a      	ldr	r2, [r7, #0]
     ace:	687b      	ldr	r3, [r7, #4]
     ad0:	0011      	movs	r1, r2
     ad2:	0018      	movs	r0, r3
     ad4:	4b03      	ldr	r3, [pc, #12]	; (ae4 <i2c_master_read_packet_job+0x3c>)
     ad6:	4798      	blx	r3
     ad8:	0003      	movs	r3, r0
}
     ada:	0018      	movs	r0, r3
     adc:	46bd      	mov	sp, r7
     ade:	b002      	add	sp, #8
     ae0:	bd80      	pop	{r7, pc}
     ae2:	46c0      	nop			; (mov r8, r8)
     ae4:	00000951 	.word	0x00000951

00000ae8 <_i2c_master_write_packet>:
 * \retval STATUS_BUSY If module is currently busy with another transfer
 */
static enum status_code _i2c_master_write_packet(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
     ae8:	b580      	push	{r7, lr}
     aea:	b084      	sub	sp, #16
     aec:	af00      	add	r7, sp, #0
     aee:	6078      	str	r0, [r7, #4]
     af0:	6039      	str	r1, [r7, #0]
	/* Sanity check */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
     af2:	687b      	ldr	r3, [r7, #4]
     af4:	681b      	ldr	r3, [r3, #0]
     af6:	60fb      	str	r3, [r7, #12]

	/* Switch to high speed mode */
	if (packet->high_speed) {
     af8:	683b      	ldr	r3, [r7, #0]
     afa:	7a5b      	ldrb	r3, [r3, #9]
     afc:	2b00      	cmp	r3, #0
     afe:	d006      	beq.n	b0e <_i2c_master_write_packet+0x26>
		_i2c_master_send_hs_master_code(module, packet->hs_master_code);
     b00:	683b      	ldr	r3, [r7, #0]
     b02:	7a9a      	ldrb	r2, [r3, #10]
     b04:	687b      	ldr	r3, [r7, #4]
     b06:	0011      	movs	r1, r2
     b08:	0018      	movs	r0, r3
     b0a:	4b1e      	ldr	r3, [pc, #120]	; (b84 <_i2c_master_write_packet+0x9c>)
     b0c:	4798      	blx	r3
	}

	/* Set action to ACK. */
	i2c_module->CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;
     b0e:	68fb      	ldr	r3, [r7, #12]
     b10:	685b      	ldr	r3, [r3, #4]
     b12:	4a1d      	ldr	r2, [pc, #116]	; (b88 <_i2c_master_write_packet+0xa0>)
     b14:	401a      	ands	r2, r3
     b16:	68fb      	ldr	r3, [r7, #12]
     b18:	605a      	str	r2, [r3, #4]

	/* Save packet to software module */
	module->buffer             = packet->data;
     b1a:	683b      	ldr	r3, [r7, #0]
     b1c:	685a      	ldr	r2, [r3, #4]
     b1e:	687b      	ldr	r3, [r7, #4]
     b20:	621a      	str	r2, [r3, #32]
	module->buffer_remaining   = packet->data_length;
     b22:	683b      	ldr	r3, [r7, #0]
     b24:	885a      	ldrh	r2, [r3, #2]
     b26:	687b      	ldr	r3, [r7, #4]
     b28:	839a      	strh	r2, [r3, #28]
	module->transfer_direction = I2C_TRANSFER_WRITE;
     b2a:	687b      	ldr	r3, [r7, #4]
     b2c:	2224      	movs	r2, #36	; 0x24
     b2e:	2100      	movs	r1, #0
     b30:	5499      	strb	r1, [r3, r2]
	module->status             = STATUS_BUSY;
     b32:	687b      	ldr	r3, [r7, #4]
     b34:	2225      	movs	r2, #37	; 0x25
     b36:	2105      	movs	r1, #5
     b38:	5499      	strb	r1, [r3, r2]

	/* Enable interrupts */
	i2c_module->INTENSET.reg =
     b3a:	68fb      	ldr	r3, [r7, #12]
     b3c:	2203      	movs	r2, #3
     b3e:	759a      	strb	r2, [r3, #22]
			SERCOM_I2CM_INTENSET_MB | SERCOM_I2CM_INTENSET_SB;

	/* Set address and direction bit, will send start command on bus */
	if (packet->ten_bit_address) {
     b40:	683b      	ldr	r3, [r7, #0]
     b42:	7a1b      	ldrb	r3, [r3, #8]
     b44:	2b00      	cmp	r3, #0
     b46:	d00d      	beq.n	b64 <_i2c_master_write_packet+0x7c>
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
     b48:	683b      	ldr	r3, [r7, #0]
     b4a:	881b      	ldrh	r3, [r3, #0]
     b4c:	005a      	lsls	r2, r3, #1
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
     b4e:	683b      	ldr	r3, [r7, #0]
     b50:	7a5b      	ldrb	r3, [r3, #9]
     b52:	039b      	lsls	r3, r3, #14
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
     b54:	4313      	orrs	r3, r2
     b56:	001a      	movs	r2, r3
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
     b58:	2380      	movs	r3, #128	; 0x80
     b5a:	021b      	lsls	r3, r3, #8
     b5c:	431a      	orrs	r2, r3
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
     b5e:	68fb      	ldr	r3, [r7, #12]
     b60:	625a      	str	r2, [r3, #36]	; 0x24
     b62:	e009      	b.n	b78 <_i2c_master_write_packet+0x90>
			SERCOM_I2CM_ADDR_TENBITEN;
	} else {
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
     b64:	683b      	ldr	r3, [r7, #0]
     b66:	881b      	ldrh	r3, [r3, #0]
     b68:	005a      	lsls	r2, r3, #1
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos);
     b6a:	683b      	ldr	r3, [r7, #0]
     b6c:	7a5b      	ldrb	r3, [r3, #9]
     b6e:	039b      	lsls	r3, r3, #14
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
     b70:	4313      	orrs	r3, r2
     b72:	001a      	movs	r2, r3
     b74:	68fb      	ldr	r3, [r7, #12]
     b76:	625a      	str	r2, [r3, #36]	; 0x24
	}

	return STATUS_OK;
     b78:	2300      	movs	r3, #0
}
     b7a:	0018      	movs	r0, r3
     b7c:	46bd      	mov	sp, r7
     b7e:	b004      	add	sp, #16
     b80:	bd80      	pop	{r7, pc}
     b82:	46c0      	nop			; (mov r8, r8)
     b84:	00004c29 	.word	0x00004c29
     b88:	fffbffff 	.word	0xfffbffff

00000b8c <i2c_master_write_packet_job>:
 * \retval STATUS_BUSY  If module is currently busy with another transfer
 */
enum status_code i2c_master_write_packet_job(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
     b8c:	b580      	push	{r7, lr}
     b8e:	b082      	sub	sp, #8
     b90:	af00      	add	r7, sp, #0
     b92:	6078      	str	r0, [r7, #4]
     b94:	6039      	str	r1, [r7, #0]
	Assert(module);
	Assert(module->hw);
	Assert(packet);

	/* Check if the I2C module is busy with another job. */
	if (module->buffer_remaining > 0) {
     b96:	687b      	ldr	r3, [r7, #4]
     b98:	8b9b      	ldrh	r3, [r3, #28]
     b9a:	b29b      	uxth	r3, r3
     b9c:	2b00      	cmp	r3, #0
     b9e:	d001      	beq.n	ba4 <i2c_master_write_packet_job+0x18>
		return STATUS_BUSY;
     ba0:	2305      	movs	r3, #5
     ba2:	e00c      	b.n	bbe <i2c_master_write_packet_job+0x32>
	}

	/* Make sure we send STOP at end*/
	module->send_stop = true;
     ba4:	687b      	ldr	r3, [r7, #4]
     ba6:	2201      	movs	r2, #1
     ba8:	729a      	strb	r2, [r3, #10]
	module->send_nack = true;
     baa:	687b      	ldr	r3, [r7, #4]
     bac:	2201      	movs	r2, #1
     bae:	72da      	strb	r2, [r3, #11]
	/* Start write operation */
	return _i2c_master_write_packet(module, packet);
     bb0:	683a      	ldr	r2, [r7, #0]
     bb2:	687b      	ldr	r3, [r7, #4]
     bb4:	0011      	movs	r1, r2
     bb6:	0018      	movs	r0, r3
     bb8:	4b03      	ldr	r3, [pc, #12]	; (bc8 <i2c_master_write_packet_job+0x3c>)
     bba:	4798      	blx	r3
     bbc:	0003      	movs	r3, r0
}
     bbe:	0018      	movs	r0, r3
     bc0:	46bd      	mov	sp, r7
     bc2:	b002      	add	sp, #8
     bc4:	bd80      	pop	{r7, pc}
     bc6:	46c0      	nop			; (mov r8, r8)
     bc8:	00000ae9 	.word	0x00000ae9

00000bcc <_i2c_master_interrupt_handler>:
 *
 * \param[in] instance  SERCOM instance that triggered the interrupt
 */
void _i2c_master_interrupt_handler(
		uint8_t instance)
{
     bcc:	b580      	push	{r7, lr}
     bce:	b086      	sub	sp, #24
     bd0:	af00      	add	r7, sp, #0
     bd2:	0002      	movs	r2, r0
     bd4:	1dfb      	adds	r3, r7, #7
     bd6:	701a      	strb	r2, [r3, #0]
	/* Get software module for callback handling */
	struct i2c_master_module *module =
			(struct i2c_master_module*)_sercom_instances[instance];
     bd8:	1dfb      	adds	r3, r7, #7
     bda:	781a      	ldrb	r2, [r3, #0]
	struct i2c_master_module *module =
     bdc:	4b93      	ldr	r3, [pc, #588]	; (e2c <_i2c_master_interrupt_handler+0x260>)
     bde:	0092      	lsls	r2, r2, #2
     be0:	58d3      	ldr	r3, [r2, r3]
     be2:	617b      	str	r3, [r7, #20]

	Assert(module);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
     be4:	697b      	ldr	r3, [r7, #20]
     be6:	681b      	ldr	r3, [r3, #0]
     be8:	613b      	str	r3, [r7, #16]
	bool sclsm_flag = i2c_module->CTRLA.bit.SCLSM;
     bea:	693b      	ldr	r3, [r7, #16]
     bec:	681b      	ldr	r3, [r3, #0]
     bee:	011b      	lsls	r3, r3, #4
     bf0:	0fdb      	lsrs	r3, r3, #31
     bf2:	b2db      	uxtb	r3, r3
     bf4:	001a      	movs	r2, r3
     bf6:	230f      	movs	r3, #15
     bf8:	18fb      	adds	r3, r7, r3
     bfa:	1e51      	subs	r1, r2, #1
     bfc:	418a      	sbcs	r2, r1
     bfe:	701a      	strb	r2, [r3, #0]

	/* Combine callback registered and enabled masks */
	uint8_t callback_mask = module->enabled_callback;
     c00:	230e      	movs	r3, #14
     c02:	18fb      	adds	r3, r7, r3
     c04:	697a      	ldr	r2, [r7, #20]
     c06:	7e52      	ldrb	r2, [r2, #25]
     c08:	701a      	strb	r2, [r3, #0]
	callback_mask &= module->registered_callback;
     c0a:	697b      	ldr	r3, [r7, #20]
     c0c:	7e1b      	ldrb	r3, [r3, #24]
     c0e:	b2da      	uxtb	r2, r3
     c10:	230e      	movs	r3, #14
     c12:	18fb      	adds	r3, r7, r3
     c14:	210e      	movs	r1, #14
     c16:	1879      	adds	r1, r7, r1
     c18:	7809      	ldrb	r1, [r1, #0]
     c1a:	400a      	ands	r2, r1
     c1c:	701a      	strb	r2, [r3, #0]

	/* Check if the module should respond to address ack */
	if ((module->buffer_length <= 0) && (module->buffer_remaining > 0)) {
     c1e:	697b      	ldr	r3, [r7, #20]
     c20:	8b5b      	ldrh	r3, [r3, #26]
     c22:	b29b      	uxth	r3, r3
     c24:	2b00      	cmp	r3, #0
     c26:	d109      	bne.n	c3c <_i2c_master_interrupt_handler+0x70>
     c28:	697b      	ldr	r3, [r7, #20]
     c2a:	8b9b      	ldrh	r3, [r3, #28]
     c2c:	b29b      	uxth	r3, r3
     c2e:	2b00      	cmp	r3, #0
     c30:	d004      	beq.n	c3c <_i2c_master_interrupt_handler+0x70>
		/* Call function for address response */
		_i2c_master_async_address_response(module);
     c32:	697b      	ldr	r3, [r7, #20]
     c34:	0018      	movs	r0, r3
     c36:	4b7e      	ldr	r3, [pc, #504]	; (e30 <_i2c_master_interrupt_handler+0x264>)
     c38:	4798      	blx	r3
     c3a:	e070      	b.n	d1e <_i2c_master_interrupt_handler+0x152>

	/* Check if buffer write is done */
	} else if ((module->buffer_length > 0) && (module->buffer_remaining <= 0) &&
     c3c:	697b      	ldr	r3, [r7, #20]
     c3e:	8b5b      	ldrh	r3, [r3, #26]
     c40:	b29b      	uxth	r3, r3
     c42:	2b00      	cmp	r3, #0
     c44:	d039      	beq.n	cba <_i2c_master_interrupt_handler+0xee>
     c46:	697b      	ldr	r3, [r7, #20]
     c48:	8b9b      	ldrh	r3, [r3, #28]
     c4a:	b29b      	uxth	r3, r3
     c4c:	2b00      	cmp	r3, #0
     c4e:	d134      	bne.n	cba <_i2c_master_interrupt_handler+0xee>
			(module->status == STATUS_BUSY) &&
     c50:	697b      	ldr	r3, [r7, #20]
     c52:	2225      	movs	r2, #37	; 0x25
     c54:	5c9b      	ldrb	r3, [r3, r2]
     c56:	b2db      	uxtb	r3, r3
	} else if ((module->buffer_length > 0) && (module->buffer_remaining <= 0) &&
     c58:	2b05      	cmp	r3, #5
     c5a:	d12e      	bne.n	cba <_i2c_master_interrupt_handler+0xee>
			(module->transfer_direction == I2C_TRANSFER_WRITE)) {
     c5c:	697b      	ldr	r3, [r7, #20]
     c5e:	2224      	movs	r2, #36	; 0x24
     c60:	5c9b      	ldrb	r3, [r3, r2]
     c62:	b2db      	uxtb	r3, r3
			(module->status == STATUS_BUSY) &&
     c64:	2b00      	cmp	r3, #0
     c66:	d128      	bne.n	cba <_i2c_master_interrupt_handler+0xee>
		/* Stop packet operation */
		i2c_module->INTENCLR.reg =
     c68:	693b      	ldr	r3, [r7, #16]
     c6a:	2203      	movs	r2, #3
     c6c:	751a      	strb	r2, [r3, #20]
				SERCOM_I2CM_INTENCLR_MB | SERCOM_I2CM_INTENCLR_SB;

		module->buffer_length = 0;
     c6e:	697b      	ldr	r3, [r7, #20]
     c70:	2200      	movs	r2, #0
     c72:	835a      	strh	r2, [r3, #26]
		module->status        = STATUS_OK;
     c74:	697b      	ldr	r3, [r7, #20]
     c76:	2225      	movs	r2, #37	; 0x25
     c78:	2100      	movs	r1, #0
     c7a:	5499      	strb	r1, [r3, r2]

		if (module->send_stop) {
     c7c:	697b      	ldr	r3, [r7, #20]
     c7e:	7a9b      	ldrb	r3, [r3, #10]
     c80:	2b00      	cmp	r3, #0
     c82:	d00b      	beq.n	c9c <_i2c_master_interrupt_handler+0xd0>
			/* Send stop condition */
			_i2c_master_wait_for_sync(module);
     c84:	697b      	ldr	r3, [r7, #20]
     c86:	0018      	movs	r0, r3
     c88:	4b6a      	ldr	r3, [pc, #424]	; (e34 <_i2c_master_interrupt_handler+0x268>)
     c8a:	4798      	blx	r3
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
     c8c:	693b      	ldr	r3, [r7, #16]
     c8e:	685b      	ldr	r3, [r3, #4]
     c90:	22c0      	movs	r2, #192	; 0xc0
     c92:	0292      	lsls	r2, r2, #10
     c94:	431a      	orrs	r2, r3
     c96:	693b      	ldr	r3, [r7, #16]
     c98:	605a      	str	r2, [r3, #4]
     c9a:	e002      	b.n	ca2 <_i2c_master_interrupt_handler+0xd6>
		} else {
			/* Clear write interrupt flag */
			i2c_module->INTFLAG.reg = SERCOM_I2CM_INTFLAG_MB;
     c9c:	693b      	ldr	r3, [r7, #16]
     c9e:	2201      	movs	r2, #1
     ca0:	761a      	strb	r2, [r3, #24]
		}
		
		if (callback_mask & (1 << I2C_MASTER_CALLBACK_WRITE_COMPLETE)) {
     ca2:	230e      	movs	r3, #14
     ca4:	18fb      	adds	r3, r7, r3
     ca6:	781b      	ldrb	r3, [r3, #0]
     ca8:	2201      	movs	r2, #1
     caa:	4013      	ands	r3, r2
     cac:	d037      	beq.n	d1e <_i2c_master_interrupt_handler+0x152>
			module->callbacks[I2C_MASTER_CALLBACK_WRITE_COMPLETE](module);
     cae:	697b      	ldr	r3, [r7, #20]
     cb0:	68db      	ldr	r3, [r3, #12]
     cb2:	697a      	ldr	r2, [r7, #20]
     cb4:	0010      	movs	r0, r2
     cb6:	4798      	blx	r3
		if (callback_mask & (1 << I2C_MASTER_CALLBACK_WRITE_COMPLETE)) {
     cb8:	e031      	b.n	d1e <_i2c_master_interrupt_handler+0x152>
		}

	/* Continue buffer write/read */
	} else if ((module->buffer_length > 0) && (module->buffer_remaining > 0)){
     cba:	697b      	ldr	r3, [r7, #20]
     cbc:	8b5b      	ldrh	r3, [r3, #26]
     cbe:	b29b      	uxth	r3, r3
     cc0:	2b00      	cmp	r3, #0
     cc2:	d02c      	beq.n	d1e <_i2c_master_interrupt_handler+0x152>
     cc4:	697b      	ldr	r3, [r7, #20]
     cc6:	8b9b      	ldrh	r3, [r3, #28]
     cc8:	b29b      	uxth	r3, r3
     cca:	2b00      	cmp	r3, #0
     ccc:	d027      	beq.n	d1e <_i2c_master_interrupt_handler+0x152>
		/* Check that bus ownership is not lost */
		if ((!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(2))) &&
     cce:	693b      	ldr	r3, [r7, #16]
     cd0:	8b5b      	ldrh	r3, [r3, #26]
     cd2:	b29b      	uxth	r3, r3
     cd4:	001a      	movs	r2, r3
     cd6:	2320      	movs	r3, #32
     cd8:	4013      	ands	r3, r2
     cda:	d111      	bne.n	d00 <_i2c_master_interrupt_handler+0x134>
				(!(sclsm_flag && (module->buffer_remaining == 1))))	{
     cdc:	230f      	movs	r3, #15
     cde:	18fb      	adds	r3, r7, r3
     ce0:	781b      	ldrb	r3, [r3, #0]
     ce2:	2201      	movs	r2, #1
     ce4:	4053      	eors	r3, r2
     ce6:	b2db      	uxtb	r3, r3
		if ((!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(2))) &&
     ce8:	2b00      	cmp	r3, #0
     cea:	d104      	bne.n	cf6 <_i2c_master_interrupt_handler+0x12a>
				(!(sclsm_flag && (module->buffer_remaining == 1))))	{
     cec:	697b      	ldr	r3, [r7, #20]
     cee:	8b9b      	ldrh	r3, [r3, #28]
     cf0:	b29b      	uxth	r3, r3
     cf2:	2b01      	cmp	r3, #1
     cf4:	d004      	beq.n	d00 <_i2c_master_interrupt_handler+0x134>
			module->status = STATUS_ERR_PACKET_COLLISION;
     cf6:	697b      	ldr	r3, [r7, #20]
     cf8:	2225      	movs	r2, #37	; 0x25
     cfa:	2141      	movs	r1, #65	; 0x41
     cfc:	5499      	strb	r1, [r3, r2]
     cfe:	e00e      	b.n	d1e <_i2c_master_interrupt_handler+0x152>
		} else if (module->transfer_direction == I2C_TRANSFER_WRITE) {
     d00:	697b      	ldr	r3, [r7, #20]
     d02:	2224      	movs	r2, #36	; 0x24
     d04:	5c9b      	ldrb	r3, [r3, r2]
     d06:	b2db      	uxtb	r3, r3
     d08:	2b00      	cmp	r3, #0
     d0a:	d104      	bne.n	d16 <_i2c_master_interrupt_handler+0x14a>
			_i2c_master_write(module);
     d0c:	697b      	ldr	r3, [r7, #20]
     d0e:	0018      	movs	r0, r3
     d10:	4b49      	ldr	r3, [pc, #292]	; (e38 <_i2c_master_interrupt_handler+0x26c>)
     d12:	4798      	blx	r3
     d14:	e003      	b.n	d1e <_i2c_master_interrupt_handler+0x152>
		} else {
			_i2c_master_read(module);
     d16:	697b      	ldr	r3, [r7, #20]
     d18:	0018      	movs	r0, r3
     d1a:	4b48      	ldr	r3, [pc, #288]	; (e3c <_i2c_master_interrupt_handler+0x270>)
     d1c:	4798      	blx	r3
		}
	}

	/* Check if read buffer transfer is complete */
	if ((module->buffer_length > 0) && (module->buffer_remaining <= 0) &&
     d1e:	697b      	ldr	r3, [r7, #20]
     d20:	8b5b      	ldrh	r3, [r3, #26]
     d22:	b29b      	uxth	r3, r3
     d24:	2b00      	cmp	r3, #0
     d26:	d047      	beq.n	db8 <_i2c_master_interrupt_handler+0x1ec>
     d28:	697b      	ldr	r3, [r7, #20]
     d2a:	8b9b      	ldrh	r3, [r3, #28]
     d2c:	b29b      	uxth	r3, r3
     d2e:	2b00      	cmp	r3, #0
     d30:	d142      	bne.n	db8 <_i2c_master_interrupt_handler+0x1ec>
			(module->status == STATUS_BUSY) &&
     d32:	697b      	ldr	r3, [r7, #20]
     d34:	2225      	movs	r2, #37	; 0x25
     d36:	5c9b      	ldrb	r3, [r3, r2]
     d38:	b2db      	uxtb	r3, r3
	if ((module->buffer_length > 0) && (module->buffer_remaining <= 0) &&
     d3a:	2b05      	cmp	r3, #5
     d3c:	d13c      	bne.n	db8 <_i2c_master_interrupt_handler+0x1ec>
			(module->transfer_direction == I2C_TRANSFER_READ)) {
     d3e:	697b      	ldr	r3, [r7, #20]
     d40:	2224      	movs	r2, #36	; 0x24
     d42:	5c9b      	ldrb	r3, [r3, r2]
     d44:	b2db      	uxtb	r3, r3
			(module->status == STATUS_BUSY) &&
     d46:	2b01      	cmp	r3, #1
     d48:	d136      	bne.n	db8 <_i2c_master_interrupt_handler+0x1ec>
		
		/* Clear read interrupt flag */
		if (i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB) {
     d4a:	693b      	ldr	r3, [r7, #16]
     d4c:	7e1b      	ldrb	r3, [r3, #24]
     d4e:	b2db      	uxtb	r3, r3
     d50:	001a      	movs	r2, r3
     d52:	2302      	movs	r3, #2
     d54:	4013      	ands	r3, r2
     d56:	d002      	beq.n	d5e <_i2c_master_interrupt_handler+0x192>
			i2c_module->INTFLAG.reg = SERCOM_I2CM_INTFLAG_SB;
     d58:	693b      	ldr	r3, [r7, #16]
     d5a:	2202      	movs	r2, #2
     d5c:	761a      	strb	r2, [r3, #24]
		}
		/* Stop packet operation */
		i2c_module->INTENCLR.reg =
     d5e:	693b      	ldr	r3, [r7, #16]
     d60:	2203      	movs	r2, #3
     d62:	751a      	strb	r2, [r3, #20]
				SERCOM_I2CM_INTENCLR_MB | SERCOM_I2CM_INTENCLR_SB;
		module->buffer_length = 0;
     d64:	697b      	ldr	r3, [r7, #20]
     d66:	2200      	movs	r2, #0
     d68:	835a      	strh	r2, [r3, #26]
		module->status        = STATUS_OK;
     d6a:	697b      	ldr	r3, [r7, #20]
     d6c:	2225      	movs	r2, #37	; 0x25
     d6e:	2100      	movs	r1, #0
     d70:	5499      	strb	r1, [r3, r2]

		/* Call appropriate callback if enabled and registered */
		if ((callback_mask & (1 << I2C_MASTER_CALLBACK_READ_COMPLETE))
     d72:	230e      	movs	r3, #14
     d74:	18fb      	adds	r3, r7, r3
     d76:	781b      	ldrb	r3, [r3, #0]
     d78:	2202      	movs	r2, #2
     d7a:	4013      	ands	r3, r2
     d7c:	d00b      	beq.n	d96 <_i2c_master_interrupt_handler+0x1ca>
				&& (module->transfer_direction == I2C_TRANSFER_READ)) {
     d7e:	697b      	ldr	r3, [r7, #20]
     d80:	2224      	movs	r2, #36	; 0x24
     d82:	5c9b      	ldrb	r3, [r3, r2]
     d84:	b2db      	uxtb	r3, r3
     d86:	2b01      	cmp	r3, #1
     d88:	d105      	bne.n	d96 <_i2c_master_interrupt_handler+0x1ca>
			module->callbacks[I2C_MASTER_CALLBACK_READ_COMPLETE](module);
     d8a:	697b      	ldr	r3, [r7, #20]
     d8c:	691b      	ldr	r3, [r3, #16]
     d8e:	697a      	ldr	r2, [r7, #20]
     d90:	0010      	movs	r0, r2
     d92:	4798      	blx	r3
     d94:	e010      	b.n	db8 <_i2c_master_interrupt_handler+0x1ec>
		} else if ((callback_mask & (1 << I2C_MASTER_CALLBACK_WRITE_COMPLETE))
     d96:	230e      	movs	r3, #14
     d98:	18fb      	adds	r3, r7, r3
     d9a:	781b      	ldrb	r3, [r3, #0]
     d9c:	2201      	movs	r2, #1
     d9e:	4013      	ands	r3, r2
     da0:	d00a      	beq.n	db8 <_i2c_master_interrupt_handler+0x1ec>
				&& (module->transfer_direction == I2C_TRANSFER_WRITE)) {
     da2:	697b      	ldr	r3, [r7, #20]
     da4:	2224      	movs	r2, #36	; 0x24
     da6:	5c9b      	ldrb	r3, [r3, r2]
     da8:	b2db      	uxtb	r3, r3
     daa:	2b00      	cmp	r3, #0
     dac:	d104      	bne.n	db8 <_i2c_master_interrupt_handler+0x1ec>
			module->callbacks[I2C_MASTER_CALLBACK_WRITE_COMPLETE](module);
     dae:	697b      	ldr	r3, [r7, #20]
     db0:	68db      	ldr	r3, [r3, #12]
     db2:	697a      	ldr	r2, [r7, #20]
     db4:	0010      	movs	r0, r2
     db6:	4798      	blx	r3
		}
	}

	/* Check for error */
	if ((module->status != STATUS_BUSY) && (module->status != STATUS_OK)) {
     db8:	697b      	ldr	r3, [r7, #20]
     dba:	2225      	movs	r2, #37	; 0x25
     dbc:	5c9b      	ldrb	r3, [r3, r2]
     dbe:	b2db      	uxtb	r3, r3
     dc0:	2b05      	cmp	r3, #5
     dc2:	d02e      	beq.n	e22 <_i2c_master_interrupt_handler+0x256>
     dc4:	697b      	ldr	r3, [r7, #20]
     dc6:	2225      	movs	r2, #37	; 0x25
     dc8:	5c9b      	ldrb	r3, [r3, r2]
     dca:	b2db      	uxtb	r3, r3
     dcc:	2b00      	cmp	r3, #0
     dce:	d028      	beq.n	e22 <_i2c_master_interrupt_handler+0x256>
		/* Stop packet operation */
		i2c_module->INTENCLR.reg = SERCOM_I2CM_INTENCLR_MB |
     dd0:	693b      	ldr	r3, [r7, #16]
     dd2:	2203      	movs	r2, #3
     dd4:	751a      	strb	r2, [r3, #20]
				SERCOM_I2CM_INTENCLR_SB;

		module->buffer_length = 0;
     dd6:	697b      	ldr	r3, [r7, #20]
     dd8:	2200      	movs	r2, #0
     dda:	835a      	strh	r2, [r3, #26]
		module->buffer_remaining = 0;
     ddc:	697b      	ldr	r3, [r7, #20]
     dde:	2200      	movs	r2, #0
     de0:	839a      	strh	r2, [r3, #28]

		/* Send nack and stop command unless arbitration is lost */
		if ((module->status != STATUS_ERR_PACKET_COLLISION) &&
     de2:	697b      	ldr	r3, [r7, #20]
     de4:	2225      	movs	r2, #37	; 0x25
     de6:	5c9b      	ldrb	r3, [r3, r2]
     de8:	b2db      	uxtb	r3, r3
     dea:	2b41      	cmp	r3, #65	; 0x41
     dec:	d00e      	beq.n	e0c <_i2c_master_interrupt_handler+0x240>
				module->send_stop) {
     dee:	697b      	ldr	r3, [r7, #20]
     df0:	7a9b      	ldrb	r3, [r3, #10]
		if ((module->status != STATUS_ERR_PACKET_COLLISION) &&
     df2:	2b00      	cmp	r3, #0
     df4:	d00a      	beq.n	e0c <_i2c_master_interrupt_handler+0x240>
			_i2c_master_wait_for_sync(module);
     df6:	697b      	ldr	r3, [r7, #20]
     df8:	0018      	movs	r0, r3
     dfa:	4b0e      	ldr	r3, [pc, #56]	; (e34 <_i2c_master_interrupt_handler+0x268>)
     dfc:	4798      	blx	r3
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT |
     dfe:	693b      	ldr	r3, [r7, #16]
     e00:	685b      	ldr	r3, [r3, #4]
     e02:	22e0      	movs	r2, #224	; 0xe0
     e04:	02d2      	lsls	r2, r2, #11
     e06:	431a      	orrs	r2, r3
     e08:	693b      	ldr	r3, [r7, #16]
     e0a:	605a      	str	r2, [r3, #4]
					SERCOM_I2CM_CTRLB_CMD(3);
		}

		/* Call error callback if enabled and registered */
		if (callback_mask & (1 << I2C_MASTER_CALLBACK_ERROR)) {
     e0c:	230e      	movs	r3, #14
     e0e:	18fb      	adds	r3, r7, r3
     e10:	781b      	ldrb	r3, [r3, #0]
     e12:	2204      	movs	r2, #4
     e14:	4013      	ands	r3, r2
     e16:	d004      	beq.n	e22 <_i2c_master_interrupt_handler+0x256>
			module->callbacks[I2C_MASTER_CALLBACK_ERROR](module);
     e18:	697b      	ldr	r3, [r7, #20]
     e1a:	695b      	ldr	r3, [r3, #20]
     e1c:	697a      	ldr	r2, [r7, #20]
     e1e:	0010      	movs	r0, r2
     e20:	4798      	blx	r3
		}
	}
}
     e22:	46c0      	nop			; (mov r8, r8)
     e24:	46bd      	mov	sp, r7
     e26:	b006      	add	sp, #24
     e28:	bd80      	pop	{r7, pc}
     e2a:	46c0      	nop			; (mov r8, r8)
     e2c:	200055e8 	.word	0x200055e8
     e30:	0000084d 	.word	0x0000084d
     e34:	000006bd 	.word	0x000006bd
     e38:	000007d1 	.word	0x000007d1
     e3c:	000006e1 	.word	0x000006e1

00000e40 <NVIC_SystemReset>:
/** \brief  System Reset

    The function initiates a system reset request to reset the MCU.
 */
__STATIC_INLINE void NVIC_SystemReset(void)
{
     e40:	b580      	push	{r7, lr}
     e42:	af00      	add	r7, sp, #0
    This function acts as a special kind of Data Memory Barrier.
    It completes when all explicit memory accesses before this instruction complete.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DSB(void)
{
  __ASM volatile ("dsb");
     e44:	f3bf 8f4f 	dsb	sy
  __DSB();                                                     /* Ensure all outstanding memory accesses included
                                                                  buffered write are completed before reset */
  SCB->AIRCR  = ((0x5FA << SCB_AIRCR_VECTKEY_Pos)      |
     e48:	4b02      	ldr	r3, [pc, #8]	; (e54 <NVIC_SystemReset+0x14>)
     e4a:	4a03      	ldr	r2, [pc, #12]	; (e58 <NVIC_SystemReset+0x18>)
     e4c:	60da      	str	r2, [r3, #12]
     e4e:	f3bf 8f4f 	dsb	sy
                 SCB_AIRCR_SYSRESETREQ_Msk);
  __DSB();                                                     /* Ensure completion of memory access */
  while(1);                                                    /* wait until reset */
     e52:	e7fe      	b.n	e52 <NVIC_SystemReset+0x12>
     e54:	e000ed00 	.word	0xe000ed00
     e58:	05fa0004 	.word	0x05fa0004

00000e5c <system_reset>:
 * Resets the MCU and all associated peripherals and registers, except RTC, all 32KHz sources,
 * WDT (if ALWAYSON is set) and GCLK (if WRTLOCK is set).
 *
 */
static inline void system_reset(void)
{
     e5c:	b580      	push	{r7, lr}
     e5e:	af00      	add	r7, sp, #0
	NVIC_SystemReset();
     e60:	4b02      	ldr	r3, [pc, #8]	; (e6c <system_reset+0x10>)
     e62:	4798      	blx	r3
}
     e64:	46c0      	nop			; (mov r8, r8)
     e66:	46bd      	mov	sp, r7
     e68:	bd80      	pop	{r7, pc}
     e6a:	46c0      	nop			; (mov r8, r8)
     e6c:	00000e41 	.word	0x00000e41

00000e70 <vCommandConsoleTask>:
/******************************************************************************
 * CLI Thread
 ******************************************************************************/

void vCommandConsoleTask(void *pvParameters)
{
     e70:	b580      	push	{r7, lr}
     e72:	b086      	sub	sp, #24
     e74:	af00      	add	r7, sp, #0
     e76:	6078      	str	r0, [r7, #4]
    // REGISTER COMMANDS HERE
    FreeRTOS_CLIRegisterCommand(&xOTAUCommand);
     e78:	4b9a      	ldr	r3, [pc, #616]	; (10e4 <vCommandConsoleTask+0x274>)
     e7a:	0018      	movs	r0, r3
     e7c:	4b9a      	ldr	r3, [pc, #616]	; (10e8 <vCommandConsoleTask+0x278>)
     e7e:	4798      	blx	r3
    FreeRTOS_CLIRegisterCommand(&xClearScreen);
     e80:	4b9a      	ldr	r3, [pc, #616]	; (10ec <vCommandConsoleTask+0x27c>)
     e82:	0018      	movs	r0, r3
     e84:	4b98      	ldr	r3, [pc, #608]	; (10e8 <vCommandConsoleTask+0x278>)
     e86:	4798      	blx	r3
    FreeRTOS_CLIRegisterCommand(&xResetCommand);
     e88:	4b99      	ldr	r3, [pc, #612]	; (10f0 <vCommandConsoleTask+0x280>)
     e8a:	0018      	movs	r0, r3
     e8c:	4b96      	ldr	r3, [pc, #600]	; (10e8 <vCommandConsoleTask+0x278>)
     e8e:	4798      	blx	r3
    FreeRTOS_CLIRegisterCommand(&xI2cScan);
     e90:	4b98      	ldr	r3, [pc, #608]	; (10f4 <vCommandConsoleTask+0x284>)
     e92:	0018      	movs	r0, r3
     e94:	4b94      	ldr	r3, [pc, #592]	; (10e8 <vCommandConsoleTask+0x278>)
     e96:	4798      	blx	r3
	// New Command registrations for version ans ticks
	FreeRTOS_CLIRegisterCommand(&xVersionCommand);
     e98:	4b97      	ldr	r3, [pc, #604]	; (10f8 <vCommandConsoleTask+0x288>)
     e9a:	0018      	movs	r0, r3
     e9c:	4b92      	ldr	r3, [pc, #584]	; (10e8 <vCommandConsoleTask+0x278>)
     e9e:	4798      	blx	r3
	FreeRTOS_CLIRegisterCommand(&xTicksCommand);
     ea0:	4b96      	ldr	r3, [pc, #600]	; (10fc <vCommandConsoleTask+0x28c>)
     ea2:	0018      	movs	r0, r3
     ea4:	4b90      	ldr	r3, [pc, #576]	; (10e8 <vCommandConsoleTask+0x278>)
     ea6:	4798      	blx	r3
    FreeRTOS_CLIRegisterCommand(&xGetIMUDataCommand);
     ea8:	4b95      	ldr	r3, [pc, #596]	; (1100 <vCommandConsoleTask+0x290>)
     eaa:	0018      	movs	r0, r3
     eac:	4b8e      	ldr	r3, [pc, #568]	; (10e8 <vCommandConsoleTask+0x278>)
     eae:	4798      	blx	r3

    char cRxedChar[2];
    unsigned char cInputIndex = 0;
     eb0:	2317      	movs	r3, #23
     eb2:	18fb      	adds	r3, r7, r3
     eb4:	2200      	movs	r2, #0
     eb6:	701a      	strb	r2, [r3, #0]
    /* This code assumes the peripheral being used as the console has already
    been opened and configured, and is passed into the task as the task
    parameter.  Cast the task parameter to the correct type. */

    /* Send a welcome message to the user knows they are connected. */
    SerialConsoleWriteString((char *)pcWelcomeMessage);
     eb8:	4b92      	ldr	r3, [pc, #584]	; (1104 <vCommandConsoleTask+0x294>)
     eba:	0018      	movs	r0, r3
     ebc:	4b92      	ldr	r3, [pc, #584]	; (1108 <vCommandConsoleTask+0x298>)
     ebe:	4798      	blx	r3

    // Any semaphores/mutexes/etc you needed to be initialized, you can do them here
    cliCharReadySemaphore = xSemaphoreCreateBinary();
     ec0:	2203      	movs	r2, #3
     ec2:	2100      	movs	r1, #0
     ec4:	2001      	movs	r0, #1
     ec6:	4b91      	ldr	r3, [pc, #580]	; (110c <vCommandConsoleTask+0x29c>)
     ec8:	4798      	blx	r3
     eca:	0002      	movs	r2, r0
     ecc:	4b90      	ldr	r3, [pc, #576]	; (1110 <vCommandConsoleTask+0x2a0>)
     ece:	601a      	str	r2, [r3, #0]
    if (cliCharReadySemaphore == NULL) {
     ed0:	4b8f      	ldr	r3, [pc, #572]	; (1110 <vCommandConsoleTask+0x2a0>)
     ed2:	681b      	ldr	r3, [r3, #0]
     ed4:	2b00      	cmp	r3, #0
     ed6:	d107      	bne.n	ee8 <vCommandConsoleTask+0x78>
        LogMessage(LOG_ERROR_LVL, "Could not allocate semaphore\r\n");
     ed8:	4b8e      	ldr	r3, [pc, #568]	; (1114 <vCommandConsoleTask+0x2a4>)
     eda:	0019      	movs	r1, r3
     edc:	2003      	movs	r0, #3
     ede:	4b8e      	ldr	r3, [pc, #568]	; (1118 <vCommandConsoleTask+0x2a8>)
     ee0:	4798      	blx	r3
        vTaskSuspend(NULL);
     ee2:	2000      	movs	r0, #0
     ee4:	4b8d      	ldr	r3, [pc, #564]	; (111c <vCommandConsoleTask+0x2ac>)
     ee6:	4798      	blx	r3
    }

    for (;;) {
        FreeRTOS_read(&cRxedChar[0]);
     ee8:	230c      	movs	r3, #12
     eea:	18fb      	adds	r3, r7, r3
     eec:	0018      	movs	r0, r3
     eee:	4b8c      	ldr	r3, [pc, #560]	; (1120 <vCommandConsoleTask+0x2b0>)
     ef0:	4798      	blx	r3

        if (cRxedChar[0] == '\n' || cRxedChar[0] == '\r') {
     ef2:	230c      	movs	r3, #12
     ef4:	18fb      	adds	r3, r7, r3
     ef6:	781b      	ldrb	r3, [r3, #0]
     ef8:	2b0a      	cmp	r3, #10
     efa:	d004      	beq.n	f06 <vCommandConsoleTask+0x96>
     efc:	230c      	movs	r3, #12
     efe:	18fb      	adds	r3, r7, r3
     f00:	781b      	ldrb	r3, [r3, #0]
     f02:	2b0d      	cmp	r3, #13
     f04:	d137      	bne.n	f76 <vCommandConsoleTask+0x106>
            /* A newline character was received, so the input command string is
            complete and can be processed.  Transmit a line separator, just to
            make the output easier to read. */
            SerialConsoleWriteString((char *)"\r\n");
     f06:	4b87      	ldr	r3, [pc, #540]	; (1124 <vCommandConsoleTask+0x2b4>)
     f08:	0018      	movs	r0, r3
     f0a:	4b7f      	ldr	r3, [pc, #508]	; (1108 <vCommandConsoleTask+0x298>)
     f0c:	4798      	blx	r3
            // Copy for last command
            isEscapeCode = false;
     f0e:	4b86      	ldr	r3, [pc, #536]	; (1128 <vCommandConsoleTask+0x2b8>)
     f10:	2200      	movs	r2, #0
     f12:	701a      	strb	r2, [r3, #0]
            pcEscapeCodePos = 0;
     f14:	4b85      	ldr	r3, [pc, #532]	; (112c <vCommandConsoleTask+0x2bc>)
     f16:	2200      	movs	r2, #0
     f18:	701a      	strb	r2, [r3, #0]
            strncpy(pcLastCommand, pcInputString, MAX_INPUT_LENGTH_CLI - 1);
     f1a:	4985      	ldr	r1, [pc, #532]	; (1130 <vCommandConsoleTask+0x2c0>)
     f1c:	4b85      	ldr	r3, [pc, #532]	; (1134 <vCommandConsoleTask+0x2c4>)
     f1e:	2231      	movs	r2, #49	; 0x31
     f20:	0018      	movs	r0, r3
     f22:	4b85      	ldr	r3, [pc, #532]	; (1138 <vCommandConsoleTask+0x2c8>)
     f24:	4798      	blx	r3
            pcLastCommand[MAX_INPUT_LENGTH_CLI - 1] = 0;  // Ensure null termination
     f26:	4b83      	ldr	r3, [pc, #524]	; (1134 <vCommandConsoleTask+0x2c4>)
     f28:	2231      	movs	r2, #49	; 0x31
     f2a:	2100      	movs	r1, #0
     f2c:	5499      	strb	r1, [r3, r2]
            explanation of why this is. */
            do {
                /* Send the command string to the command interpreter.  Any
                output generated by the command interpreter will be placed in the
                pcOutputString buffer. */
                xMoreDataToFollow = FreeRTOS_CLIProcessCommand(pcInputString,        /* The command string.*/
     f2e:	4983      	ldr	r1, [pc, #524]	; (113c <vCommandConsoleTask+0x2cc>)
     f30:	4b7f      	ldr	r3, [pc, #508]	; (1130 <vCommandConsoleTask+0x2c0>)
     f32:	2264      	movs	r2, #100	; 0x64
     f34:	0018      	movs	r0, r3
     f36:	4b82      	ldr	r3, [pc, #520]	; (1140 <vCommandConsoleTask+0x2d0>)
     f38:	4798      	blx	r3
     f3a:	0003      	movs	r3, r0
     f3c:	613b      	str	r3, [r7, #16]
                );

                /* Write the output generated by the command interpreter to the
                console. */
                // Ensure it is null terminated
                pcOutputString[MAX_OUTPUT_LENGTH_CLI - 1] = 0;
     f3e:	4b7f      	ldr	r3, [pc, #508]	; (113c <vCommandConsoleTask+0x2cc>)
     f40:	2263      	movs	r2, #99	; 0x63
     f42:	2100      	movs	r1, #0
     f44:	5499      	strb	r1, [r3, r2]
                SerialConsoleWriteString(pcOutputString);
     f46:	4b7d      	ldr	r3, [pc, #500]	; (113c <vCommandConsoleTask+0x2cc>)
     f48:	0018      	movs	r0, r3
     f4a:	4b6f      	ldr	r3, [pc, #444]	; (1108 <vCommandConsoleTask+0x298>)
     f4c:	4798      	blx	r3

            } while (xMoreDataToFollow != pdFALSE);
     f4e:	693b      	ldr	r3, [r7, #16]
     f50:	2b00      	cmp	r3, #0
     f52:	d1ec      	bne.n	f2e <vCommandConsoleTask+0xbe>

            /* All the strings generated by the input command have been sent.
            Processing of the command is complete.  Clear the input string ready
            to receive the next command. */
            cInputIndex = 0;
     f54:	2317      	movs	r3, #23
     f56:	18fb      	adds	r3, r7, r3
     f58:	2200      	movs	r2, #0
     f5a:	701a      	strb	r2, [r3, #0]
            memset(pcInputString, 0x00, MAX_INPUT_LENGTH_CLI);
     f5c:	4b74      	ldr	r3, [pc, #464]	; (1130 <vCommandConsoleTask+0x2c0>)
     f5e:	2232      	movs	r2, #50	; 0x32
     f60:	2100      	movs	r1, #0
     f62:	0018      	movs	r0, r3
     f64:	4b77      	ldr	r3, [pc, #476]	; (1144 <vCommandConsoleTask+0x2d4>)
     f66:	4798      	blx	r3
            memset(pcOutputString, 0, MAX_OUTPUT_LENGTH_CLI);
     f68:	4b74      	ldr	r3, [pc, #464]	; (113c <vCommandConsoleTask+0x2cc>)
     f6a:	2264      	movs	r2, #100	; 0x64
     f6c:	2100      	movs	r1, #0
     f6e:	0018      	movs	r0, r3
     f70:	4b74      	ldr	r3, [pc, #464]	; (1144 <vCommandConsoleTask+0x2d4>)
     f72:	4798      	blx	r3
     f74:	e0b5      	b.n	10e2 <vCommandConsoleTask+0x272>
        } else {
            /* The if() clause performs the processing after a newline character
is received.  This else clause performs the processing if any other
character is received. */

            if (true == isEscapeCode) {
     f76:	4b6c      	ldr	r3, [pc, #432]	; (1128 <vCommandConsoleTask+0x2b8>)
     f78:	781b      	ldrb	r3, [r3, #0]
     f7a:	2b00      	cmp	r3, #0
     f7c:	d059      	beq.n	1032 <vCommandConsoleTask+0x1c2>
                if (pcEscapeCodePos < CLI_PC_ESCAPE_CODE_SIZE) {
     f7e:	4b6b      	ldr	r3, [pc, #428]	; (112c <vCommandConsoleTask+0x2bc>)
     f80:	781b      	ldrb	r3, [r3, #0]
     f82:	2b03      	cmp	r3, #3
     f84:	d80c      	bhi.n	fa0 <vCommandConsoleTask+0x130>
                    pcEscapeCodes[pcEscapeCodePos++] = cRxedChar[0];
     f86:	4b69      	ldr	r3, [pc, #420]	; (112c <vCommandConsoleTask+0x2bc>)
     f88:	781b      	ldrb	r3, [r3, #0]
     f8a:	1c5a      	adds	r2, r3, #1
     f8c:	b2d1      	uxtb	r1, r2
     f8e:	4a67      	ldr	r2, [pc, #412]	; (112c <vCommandConsoleTask+0x2bc>)
     f90:	7011      	strb	r1, [r2, #0]
     f92:	001a      	movs	r2, r3
     f94:	230c      	movs	r3, #12
     f96:	18fb      	adds	r3, r7, r3
     f98:	7819      	ldrb	r1, [r3, #0]
     f9a:	4b6b      	ldr	r3, [pc, #428]	; (1148 <vCommandConsoleTask+0x2d8>)
     f9c:	5499      	strb	r1, [r3, r2]
     f9e:	e005      	b.n	fac <vCommandConsoleTask+0x13c>
                } else {
                    isEscapeCode = false;
     fa0:	4b61      	ldr	r3, [pc, #388]	; (1128 <vCommandConsoleTask+0x2b8>)
     fa2:	2200      	movs	r2, #0
     fa4:	701a      	strb	r2, [r3, #0]
                    pcEscapeCodePos = 0;
     fa6:	4b61      	ldr	r3, [pc, #388]	; (112c <vCommandConsoleTask+0x2bc>)
     fa8:	2200      	movs	r2, #0
     faa:	701a      	strb	r2, [r3, #0]
                }

                if (pcEscapeCodePos >= CLI_PC_MIN_ESCAPE_CODE_SIZE) {
     fac:	4b5f      	ldr	r3, [pc, #380]	; (112c <vCommandConsoleTask+0x2bc>)
     fae:	781b      	ldrb	r3, [r3, #0]
     fb0:	2b01      	cmp	r3, #1
     fb2:	d999      	bls.n	ee8 <vCommandConsoleTask+0x78>
                    // UP ARROW SHOW LAST COMMAND
                    if (strcasecmp(pcEscapeCodes, "oa")) {
     fb4:	4a65      	ldr	r2, [pc, #404]	; (114c <vCommandConsoleTask+0x2dc>)
     fb6:	4b64      	ldr	r3, [pc, #400]	; (1148 <vCommandConsoleTask+0x2d8>)
     fb8:	0011      	movs	r1, r2
     fba:	0018      	movs	r0, r3
     fbc:	4b64      	ldr	r3, [pc, #400]	; (1150 <vCommandConsoleTask+0x2e0>)
     fbe:	4798      	blx	r3
     fc0:	1e03      	subs	r3, r0, #0
     fc2:	d02f      	beq.n	1024 <vCommandConsoleTask+0x1b4>
                        /// Delete current line and add prompt (">")
                        sprintf(pcInputString, "%c[2K\r>", 27);
     fc4:	4963      	ldr	r1, [pc, #396]	; (1154 <vCommandConsoleTask+0x2e4>)
     fc6:	4b5a      	ldr	r3, [pc, #360]	; (1130 <vCommandConsoleTask+0x2c0>)
     fc8:	221b      	movs	r2, #27
     fca:	0018      	movs	r0, r3
     fcc:	4b62      	ldr	r3, [pc, #392]	; (1158 <vCommandConsoleTask+0x2e8>)
     fce:	4798      	blx	r3
                        SerialConsoleWriteString((char *)pcInputString);
     fd0:	4b57      	ldr	r3, [pc, #348]	; (1130 <vCommandConsoleTask+0x2c0>)
     fd2:	0018      	movs	r0, r3
     fd4:	4b4c      	ldr	r3, [pc, #304]	; (1108 <vCommandConsoleTask+0x298>)
     fd6:	4798      	blx	r3
                        /// Clear input buffer
                        cInputIndex = 0;
     fd8:	2317      	movs	r3, #23
     fda:	18fb      	adds	r3, r7, r3
     fdc:	2200      	movs	r2, #0
     fde:	701a      	strb	r2, [r3, #0]
                        memset(pcInputString, 0x00, MAX_INPUT_LENGTH_CLI);
     fe0:	4b53      	ldr	r3, [pc, #332]	; (1130 <vCommandConsoleTask+0x2c0>)
     fe2:	2232      	movs	r2, #50	; 0x32
     fe4:	2100      	movs	r1, #0
     fe6:	0018      	movs	r0, r3
     fe8:	4b56      	ldr	r3, [pc, #344]	; (1144 <vCommandConsoleTask+0x2d4>)
     fea:	4798      	blx	r3
                        /// Send last command
                        strncpy(pcInputString, pcLastCommand, MAX_INPUT_LENGTH_CLI - 1);
     fec:	4951      	ldr	r1, [pc, #324]	; (1134 <vCommandConsoleTask+0x2c4>)
     fee:	4b50      	ldr	r3, [pc, #320]	; (1130 <vCommandConsoleTask+0x2c0>)
     ff0:	2231      	movs	r2, #49	; 0x31
     ff2:	0018      	movs	r0, r3
     ff4:	4b50      	ldr	r3, [pc, #320]	; (1138 <vCommandConsoleTask+0x2c8>)
     ff6:	4798      	blx	r3
                        cInputIndex = (strlen(pcInputString) < MAX_INPUT_LENGTH_CLI - 1) ? strlen(pcLastCommand) : MAX_INPUT_LENGTH_CLI - 1;
     ff8:	4b4d      	ldr	r3, [pc, #308]	; (1130 <vCommandConsoleTask+0x2c0>)
     ffa:	0018      	movs	r0, r3
     ffc:	4b57      	ldr	r3, [pc, #348]	; (115c <vCommandConsoleTask+0x2ec>)
     ffe:	4798      	blx	r3
    1000:	0003      	movs	r3, r0
    1002:	2b30      	cmp	r3, #48	; 0x30
    1004:	d806      	bhi.n	1014 <vCommandConsoleTask+0x1a4>
    1006:	4b4b      	ldr	r3, [pc, #300]	; (1134 <vCommandConsoleTask+0x2c4>)
    1008:	0018      	movs	r0, r3
    100a:	4b54      	ldr	r3, [pc, #336]	; (115c <vCommandConsoleTask+0x2ec>)
    100c:	4798      	blx	r3
    100e:	0003      	movs	r3, r0
    1010:	b2da      	uxtb	r2, r3
    1012:	e000      	b.n	1016 <vCommandConsoleTask+0x1a6>
    1014:	2231      	movs	r2, #49	; 0x31
    1016:	2317      	movs	r3, #23
    1018:	18fb      	adds	r3, r7, r3
    101a:	701a      	strb	r2, [r3, #0]
                        SerialConsoleWriteString(pcInputString);
    101c:	4b44      	ldr	r3, [pc, #272]	; (1130 <vCommandConsoleTask+0x2c0>)
    101e:	0018      	movs	r0, r3
    1020:	4b39      	ldr	r3, [pc, #228]	; (1108 <vCommandConsoleTask+0x298>)
    1022:	4798      	blx	r3
                    }

                    isEscapeCode = false;
    1024:	4b40      	ldr	r3, [pc, #256]	; (1128 <vCommandConsoleTask+0x2b8>)
    1026:	2200      	movs	r2, #0
    1028:	701a      	strb	r2, [r3, #0]
                    pcEscapeCodePos = 0;
    102a:	4b40      	ldr	r3, [pc, #256]	; (112c <vCommandConsoleTask+0x2bc>)
    102c:	2200      	movs	r2, #0
    102e:	701a      	strb	r2, [r3, #0]
    1030:	e75a      	b.n	ee8 <vCommandConsoleTask+0x78>
            }
            /* The if() clause performs the processing after a newline character
            is received.  This else clause performs the processing if any other
            character is received. */

            else if (cRxedChar[0] == '\r') {
    1032:	230c      	movs	r3, #12
    1034:	18fb      	adds	r3, r7, r3
    1036:	781b      	ldrb	r3, [r3, #0]
    1038:	2b0d      	cmp	r3, #13
    103a:	d100      	bne.n	103e <vCommandConsoleTask+0x1ce>
    103c:	e754      	b.n	ee8 <vCommandConsoleTask+0x78>
                /* Ignore carriage returns. */
            } else if (cRxedChar[0] == ASCII_BACKSPACE || cRxedChar[0] == ASCII_DELETE) {
    103e:	230c      	movs	r3, #12
    1040:	18fb      	adds	r3, r7, r3
    1042:	781b      	ldrb	r3, [r3, #0]
    1044:	2b08      	cmp	r3, #8
    1046:	d004      	beq.n	1052 <vCommandConsoleTask+0x1e2>
    1048:	230c      	movs	r3, #12
    104a:	18fb      	adds	r3, r7, r3
    104c:	781b      	ldrb	r3, [r3, #0]
    104e:	2b7f      	cmp	r3, #127	; 0x7f
    1050:	d11c      	bne.n	108c <vCommandConsoleTask+0x21c>
                char erase[4] = {0x08, 0x20, 0x08, 0x00};
    1052:	2308      	movs	r3, #8
    1054:	18fb      	adds	r3, r7, r3
    1056:	4a42      	ldr	r2, [pc, #264]	; (1160 <vCommandConsoleTask+0x2f0>)
    1058:	6812      	ldr	r2, [r2, #0]
    105a:	601a      	str	r2, [r3, #0]
                SerialConsoleWriteString(erase);
    105c:	2308      	movs	r3, #8
    105e:	18fb      	adds	r3, r7, r3
    1060:	0018      	movs	r0, r3
    1062:	4b29      	ldr	r3, [pc, #164]	; (1108 <vCommandConsoleTask+0x298>)
    1064:	4798      	blx	r3
                /* Backspace was pressed.  Erase the last character in the input
                buffer - if there are any. */
                if (cInputIndex > 0) {
    1066:	2317      	movs	r3, #23
    1068:	18fb      	adds	r3, r7, r3
    106a:	781b      	ldrb	r3, [r3, #0]
    106c:	2b00      	cmp	r3, #0
    106e:	d037      	beq.n	10e0 <vCommandConsoleTask+0x270>
                    cInputIndex--;
    1070:	2317      	movs	r3, #23
    1072:	18fb      	adds	r3, r7, r3
    1074:	781a      	ldrb	r2, [r3, #0]
    1076:	2317      	movs	r3, #23
    1078:	18fb      	adds	r3, r7, r3
    107a:	3a01      	subs	r2, #1
    107c:	701a      	strb	r2, [r3, #0]
                    pcInputString[cInputIndex] = 0;
    107e:	2317      	movs	r3, #23
    1080:	18fb      	adds	r3, r7, r3
    1082:	781b      	ldrb	r3, [r3, #0]
    1084:	4a2a      	ldr	r2, [pc, #168]	; (1130 <vCommandConsoleTask+0x2c0>)
    1086:	2100      	movs	r1, #0
    1088:	54d1      	strb	r1, [r2, r3]
            } else if (cRxedChar[0] == ASCII_BACKSPACE || cRxedChar[0] == ASCII_DELETE) {
    108a:	e029      	b.n	10e0 <vCommandConsoleTask+0x270>
                }
            }
            // ESC
            else if (cRxedChar[0] == ASCII_ESC) {
    108c:	230c      	movs	r3, #12
    108e:	18fb      	adds	r3, r7, r3
    1090:	781b      	ldrb	r3, [r3, #0]
    1092:	2b1b      	cmp	r3, #27
    1094:	d106      	bne.n	10a4 <vCommandConsoleTask+0x234>
                isEscapeCode = true;  // Next characters will be code arguments
    1096:	4b24      	ldr	r3, [pc, #144]	; (1128 <vCommandConsoleTask+0x2b8>)
    1098:	2201      	movs	r2, #1
    109a:	701a      	strb	r2, [r3, #0]
                pcEscapeCodePos = 0;
    109c:	4b23      	ldr	r3, [pc, #140]	; (112c <vCommandConsoleTask+0x2bc>)
    109e:	2200      	movs	r2, #0
    10a0:	701a      	strb	r2, [r3, #0]
    10a2:	e721      	b.n	ee8 <vCommandConsoleTask+0x78>
            } else {
                /* A character was entered.  It was not a new line, backspace
                or carriage return, so it is accepted as part of the input and
                placed into the input buffer.  When a n is entered the complete
                string will be passed to the command interpreter. */
                if (cInputIndex < MAX_INPUT_LENGTH_CLI) {
    10a4:	2317      	movs	r3, #23
    10a6:	18fb      	adds	r3, r7, r3
    10a8:	781b      	ldrb	r3, [r3, #0]
    10aa:	2b31      	cmp	r3, #49	; 0x31
    10ac:	d80e      	bhi.n	10cc <vCommandConsoleTask+0x25c>
                    pcInputString[cInputIndex] = cRxedChar[0];
    10ae:	2317      	movs	r3, #23
    10b0:	18fb      	adds	r3, r7, r3
    10b2:	781b      	ldrb	r3, [r3, #0]
    10b4:	220c      	movs	r2, #12
    10b6:	18ba      	adds	r2, r7, r2
    10b8:	7811      	ldrb	r1, [r2, #0]
    10ba:	4a1d      	ldr	r2, [pc, #116]	; (1130 <vCommandConsoleTask+0x2c0>)
    10bc:	54d1      	strb	r1, [r2, r3]
                    cInputIndex++;
    10be:	2317      	movs	r3, #23
    10c0:	18fb      	adds	r3, r7, r3
    10c2:	781a      	ldrb	r2, [r3, #0]
    10c4:	2317      	movs	r3, #23
    10c6:	18fb      	adds	r3, r7, r3
    10c8:	3201      	adds	r2, #1
    10ca:	701a      	strb	r2, [r3, #0]
                }

                // Order Echo
                cRxedChar[1] = 0;
    10cc:	230c      	movs	r3, #12
    10ce:	18fb      	adds	r3, r7, r3
    10d0:	2200      	movs	r2, #0
    10d2:	705a      	strb	r2, [r3, #1]
                SerialConsoleWriteString(&cRxedChar[0]);
    10d4:	230c      	movs	r3, #12
    10d6:	18fb      	adds	r3, r7, r3
    10d8:	0018      	movs	r0, r3
    10da:	4b0b      	ldr	r3, [pc, #44]	; (1108 <vCommandConsoleTask+0x298>)
    10dc:	4798      	blx	r3
    10de:	e703      	b.n	ee8 <vCommandConsoleTask+0x78>
            } else if (cRxedChar[0] == ASCII_BACKSPACE || cRxedChar[0] == ASCII_DELETE) {
    10e0:	46c0      	nop			; (mov r8, r8)
        FreeRTOS_read(&cRxedChar[0]);
    10e2:	e701      	b.n	ee8 <vCommandConsoleTask+0x78>
    10e4:	00022e5c 	.word	0x00022e5c
    10e8:	00004d71 	.word	0x00004d71
    10ec:	00022ebc 	.word	0x00022ebc
    10f0:	00022e6c 	.word	0x00022e6c
    10f4:	00022e7c 	.word	0x00022e7c
    10f8:	00022e8c 	.word	0x00022e8c
    10fc:	00022e9c 	.word	0x00022e9c
    1100:	00022eac 	.word	0x00022eac
    1104:	00022bf8 	.word	0x00022bf8
    1108:	0000ac99 	.word	0x0000ac99
    110c:	00007339 	.word	0x00007339
    1110:	20004200 	.word	0x20004200
    1114:	00022d88 	.word	0x00022d88
    1118:	0000ad85 	.word	0x0000ad85
    111c:	00009125 	.word	0x00009125
    1120:	00001165 	.word	0x00001165
    1124:	00022da8 	.word	0x00022da8
    1128:	20000384 	.word	0x20000384
    112c:	20000385 	.word	0x20000385
    1130:	200003bc 	.word	0x200003bc
    1134:	20000388 	.word	0x20000388
    1138:	00021c03 	.word	0x00021c03
    113c:	200003f0 	.word	0x200003f0
    1140:	00004de1 	.word	0x00004de1
    1144:	0002181b 	.word	0x0002181b
    1148:	20000454 	.word	0x20000454
    114c:	00022dac 	.word	0x00022dac
    1150:	00021b1d 	.word	0x00021b1d
    1154:	00022db0 	.word	0x00022db0
    1158:	00021ad9 	.word	0x00021ad9
    115c:	00021bd3 	.word	0x00021bd3
    1160:	00022db8 	.word	0x00022db8

00001164 <FreeRTOS_read>:
* @details		The function waits to acquire semaphone cliCharReadySemaphore then calls SerialConsoleReadCharacter to read 
                a character, if -1 is received it repeats, if 0 is received, it will load the character into character variable
* @note         None
*****************************************************************************/
static void FreeRTOS_read(char *character)
{   
    1164:	b580      	push	{r7, lr}
    1166:	b084      	sub	sp, #16
    1168:	af00      	add	r7, sp, #0
    116a:	6078      	str	r0, [r7, #4]
    // SerialConsoleReadCharacter returns -1 when no characters are received
    // and 0 when it has received character
    int is_rx_char = SerialConsoleReadCharacter((uint8_t *)character);
    116c:	687b      	ldr	r3, [r7, #4]
    116e:	0018      	movs	r0, r3
    1170:	4b0d      	ldr	r3, [pc, #52]	; (11a8 <FreeRTOS_read+0x44>)
    1172:	4798      	blx	r3
    1174:	0003      	movs	r3, r0
    1176:	60fb      	str	r3, [r7, #12]
    while(is_rx_char==-1){
    1178:	e00f      	b.n	119a <FreeRTOS_read+0x36>
        if(xSemaphoreTake(cliCharReadySemaphore,portMAX_DELAY)){
    117a:	4b0c      	ldr	r3, [pc, #48]	; (11ac <FreeRTOS_read+0x48>)
    117c:	681a      	ldr	r2, [r3, #0]
    117e:	2301      	movs	r3, #1
    1180:	425b      	negs	r3, r3
    1182:	0019      	movs	r1, r3
    1184:	0010      	movs	r0, r2
    1186:	4b0a      	ldr	r3, [pc, #40]	; (11b0 <FreeRTOS_read+0x4c>)
    1188:	4798      	blx	r3
    118a:	1e03      	subs	r3, r0, #0
    118c:	d005      	beq.n	119a <FreeRTOS_read+0x36>
            is_rx_char = SerialConsoleReadCharacter((uint8_t *)character);
    118e:	687b      	ldr	r3, [r7, #4]
    1190:	0018      	movs	r0, r3
    1192:	4b05      	ldr	r3, [pc, #20]	; (11a8 <FreeRTOS_read+0x44>)
    1194:	4798      	blx	r3
    1196:	0003      	movs	r3, r0
    1198:	60fb      	str	r3, [r7, #12]
    while(is_rx_char==-1){
    119a:	68fb      	ldr	r3, [r7, #12]
    119c:	3301      	adds	r3, #1
    119e:	d0ec      	beq.n	117a <FreeRTOS_read+0x16>
        }

    }
    // vTaskSuspend(NULL);  // We suspend ourselves. Please remove this when doing your code
}
    11a0:	46c0      	nop			; (mov r8, r8)
    11a2:	46bd      	mov	sp, r7
    11a4:	b004      	add	sp, #16
    11a6:	bd80      	pop	{r7, pc}
    11a8:	0000ad35 	.word	0x0000ad35
    11ac:	20004200 	.word	0x20004200
    11b0:	000082f1 	.word	0x000082f1

000011b4 <CliCharReadySemaphoreGiveFromISR>:
 * @brief		Give cliCharReadySemaphore binary semaphore from an ISR
 * @details
 * @note
 */
void CliCharReadySemaphoreGiveFromISR(void)
{
    11b4:	b580      	push	{r7, lr}
    11b6:	af00      	add	r7, sp, #0
    static BaseType_t xHigherPriorityTaskWoken;
    xHigherPriorityTaskWoken = pdFALSE;
    11b8:	4b0a      	ldr	r3, [pc, #40]	; (11e4 <CliCharReadySemaphoreGiveFromISR+0x30>)
    11ba:	2200      	movs	r2, #0
    11bc:	601a      	str	r2, [r3, #0]
    xSemaphoreGiveFromISR(cliCharReadySemaphore, &xHigherPriorityTaskWoken);
    11be:	4b0a      	ldr	r3, [pc, #40]	; (11e8 <CliCharReadySemaphoreGiveFromISR+0x34>)
    11c0:	681b      	ldr	r3, [r3, #0]
    11c2:	4a08      	ldr	r2, [pc, #32]	; (11e4 <CliCharReadySemaphoreGiveFromISR+0x30>)
    11c4:	0011      	movs	r1, r2
    11c6:	0018      	movs	r0, r3
    11c8:	4b08      	ldr	r3, [pc, #32]	; (11ec <CliCharReadySemaphoreGiveFromISR+0x38>)
    11ca:	4798      	blx	r3
    portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
    11cc:	4b05      	ldr	r3, [pc, #20]	; (11e4 <CliCharReadySemaphoreGiveFromISR+0x30>)
    11ce:	681b      	ldr	r3, [r3, #0]
    11d0:	2b00      	cmp	r3, #0
    11d2:	d003      	beq.n	11dc <CliCharReadySemaphoreGiveFromISR+0x28>
    11d4:	4b06      	ldr	r3, [pc, #24]	; (11f0 <CliCharReadySemaphoreGiveFromISR+0x3c>)
    11d6:	2280      	movs	r2, #128	; 0x80
    11d8:	0552      	lsls	r2, r2, #21
    11da:	601a      	str	r2, [r3, #0]
}
    11dc:	46c0      	nop			; (mov r8, r8)
    11de:	46bd      	mov	sp, r7
    11e0:	bd80      	pop	{r7, pc}
    11e2:	46c0      	nop			; (mov r8, r8)
    11e4:	20000458 	.word	0x20000458
    11e8:	20004200 	.word	0x20004200
    11ec:	00007c69 	.word	0x00007c69
    11f0:	e000ed04 	.word	0xe000ed04

000011f4 <xCliClearTerminalScreen>:
// THIS COMMAND USES vt100 TERMINAL COMMANDS TO CLEAR THE SCREEN ON A TERMINAL PROGRAM LIKE TERA TERM
// SEE http://www.csie.ntu.edu.tw/~r92094/c++/VT100.html for more info
// CLI SPECIFIC COMMANDS
static char bufCli[CLI_MSG_LEN];
BaseType_t xCliClearTerminalScreen(char *pcWriteBuffer, size_t xWriteBufferLen, const int8_t *pcCommandString)
{
    11f4:	b590      	push	{r4, r7, lr}
    11f6:	b087      	sub	sp, #28
    11f8:	af00      	add	r7, sp, #0
    11fa:	60f8      	str	r0, [r7, #12]
    11fc:	60b9      	str	r1, [r7, #8]
    11fe:	607a      	str	r2, [r7, #4]
    char clearScreen = ASCII_ESC;
    1200:	2317      	movs	r3, #23
    1202:	18fb      	adds	r3, r7, r3
    1204:	221b      	movs	r2, #27
    1206:	701a      	strb	r2, [r3, #0]
    snprintf(bufCli, CLI_MSG_LEN - 1, "%c[2J", clearScreen);
    1208:	2317      	movs	r3, #23
    120a:	18fb      	adds	r3, r7, r3
    120c:	781b      	ldrb	r3, [r3, #0]
    120e:	4a08      	ldr	r2, [pc, #32]	; (1230 <xCliClearTerminalScreen+0x3c>)
    1210:	4808      	ldr	r0, [pc, #32]	; (1234 <xCliClearTerminalScreen+0x40>)
    1212:	210f      	movs	r1, #15
    1214:	4c08      	ldr	r4, [pc, #32]	; (1238 <xCliClearTerminalScreen+0x44>)
    1216:	47a0      	blx	r4
    snprintf(pcWriteBuffer, xWriteBufferLen, bufCli);
    1218:	4a06      	ldr	r2, [pc, #24]	; (1234 <xCliClearTerminalScreen+0x40>)
    121a:	68b9      	ldr	r1, [r7, #8]
    121c:	68fb      	ldr	r3, [r7, #12]
    121e:	0018      	movs	r0, r3
    1220:	4b05      	ldr	r3, [pc, #20]	; (1238 <xCliClearTerminalScreen+0x44>)
    1222:	4798      	blx	r3
    return pdFALSE;
    1224:	2300      	movs	r3, #0
}
    1226:	0018      	movs	r0, r3
    1228:	46bd      	mov	sp, r7
    122a:	b007      	add	sp, #28
    122c:	bd90      	pop	{r4, r7, pc}
    122e:	46c0      	nop			; (mov r8, r8)
    1230:	00022dbc 	.word	0x00022dbc
    1234:	20000374 	.word	0x20000374
    1238:	00021a75 	.word	0x00021a75

0000123c <CLI_OTAU>:

// Example CLI Command. Reads from the IMU and returns data.
BaseType_t CLI_OTAU(int8_t *pcWriteBuffer, size_t xWriteBufferLen, const int8_t *pcCommandString)
{
    123c:	b580      	push	{r7, lr}
    123e:	b084      	sub	sp, #16
    1240:	af00      	add	r7, sp, #0
    1242:	60f8      	str	r0, [r7, #12]
    1244:	60b9      	str	r1, [r7, #8]
    1246:	607a      	str	r2, [r7, #4]
    WifiHandlerSetState(WIFI_DOWNLOAD_INIT);
    1248:	2002      	movs	r0, #2
    124a:	4b03      	ldr	r3, [pc, #12]	; (1258 <CLI_OTAU+0x1c>)
    124c:	4798      	blx	r3

    return pdFALSE;
    124e:	2300      	movs	r3, #0
}
    1250:	0018      	movs	r0, r3
    1252:	46bd      	mov	sp, r7
    1254:	b004      	add	sp, #16
    1256:	bd80      	pop	{r7, pc}
    1258:	000043d9 	.word	0x000043d9

0000125c <CLI_ResetDevice>:

// Example CLI Command. Resets system.
BaseType_t CLI_ResetDevice(int8_t *pcWriteBuffer, size_t xWriteBufferLen, const int8_t *pcCommandString)
{
    125c:	b580      	push	{r7, lr}
    125e:	b084      	sub	sp, #16
    1260:	af00      	add	r7, sp, #0
    1262:	60f8      	str	r0, [r7, #12]
    1264:	60b9      	str	r1, [r7, #8]
    1266:	607a      	str	r2, [r7, #4]
    system_reset();
    1268:	4b03      	ldr	r3, [pc, #12]	; (1278 <CLI_ResetDevice+0x1c>)
    126a:	4798      	blx	r3
    return pdFALSE;
    126c:	2300      	movs	r3, #0
}
    126e:	0018      	movs	r0, r3
    1270:	46bd      	mov	sp, r7
    1272:	b004      	add	sp, #16
    1274:	bd80      	pop	{r7, pc}
    1276:	46c0      	nop			; (mov r8, r8)
    1278:	00000e5d 	.word	0x00000e5d

0000127c <CLI_Version>:
// Version CLI Command 
BaseType_t CLI_Version(int8_t *pcWriteBuffer, size_t xWriteBufferLen, const int8_t *pcCommandString)
{
    127c:	b590      	push	{r4, r7, lr}
    127e:	b085      	sub	sp, #20
    1280:	af00      	add	r7, sp, #0
    1282:	60f8      	str	r0, [r7, #12]
    1284:	60b9      	str	r1, [r7, #8]
    1286:	607a      	str	r2, [r7, #4]
	// Use snprintf to safely format the firmware version string into the provided buffer
	snprintf((char *)pcWriteBuffer, xWriteBufferLen, "Firmware Version: %s\r\n", FIRMWARE_VERSION);
    1288:	4b05      	ldr	r3, [pc, #20]	; (12a0 <CLI_Version+0x24>)
    128a:	4a06      	ldr	r2, [pc, #24]	; (12a4 <CLI_Version+0x28>)
    128c:	68b9      	ldr	r1, [r7, #8]
    128e:	68f8      	ldr	r0, [r7, #12]
    1290:	4c05      	ldr	r4, [pc, #20]	; (12a8 <CLI_Version+0x2c>)
    1292:	47a0      	blx	r4
	return pdFALSE; // Indicates no further output is expected
    1294:	2300      	movs	r3, #0
}
    1296:	0018      	movs	r0, r3
    1298:	46bd      	mov	sp, r7
    129a:	b005      	add	sp, #20
    129c:	bd90      	pop	{r4, r7, pc}
    129e:	46c0      	nop			; (mov r8, r8)
    12a0:	00022dc4 	.word	0x00022dc4
    12a4:	00022dcc 	.word	0x00022dcc
    12a8:	00021a75 	.word	0x00021a75

000012ac <CLI_Ticks>:

// Ticks CLI Command 
BaseType_t CLI_Ticks(int8_t *pcWriteBuffer, size_t xWriteBufferLen, const int8_t *pcCommandString)
{
    12ac:	b590      	push	{r4, r7, lr}
    12ae:	b087      	sub	sp, #28
    12b0:	af00      	add	r7, sp, #0
    12b2:	60f8      	str	r0, [r7, #12]
    12b4:	60b9      	str	r1, [r7, #8]
    12b6:	607a      	str	r2, [r7, #4]
	// Retrieve the current tick count using FreeRTOS's xTaskGetTickCount()
	const TickType_t ticks = xTaskGetTickCount();
    12b8:	4b07      	ldr	r3, [pc, #28]	; (12d8 <CLI_Ticks+0x2c>)
    12ba:	4798      	blx	r3
    12bc:	0003      	movs	r3, r0
    12be:	617b      	str	r3, [r7, #20]
	// Format the tick count into the provided buffer
	snprintf((char *)pcWriteBuffer, xWriteBufferLen, "Ticks since start: %lu\r\n", (unsigned long)ticks);
    12c0:	697b      	ldr	r3, [r7, #20]
    12c2:	4a06      	ldr	r2, [pc, #24]	; (12dc <CLI_Ticks+0x30>)
    12c4:	68b9      	ldr	r1, [r7, #8]
    12c6:	68f8      	ldr	r0, [r7, #12]
    12c8:	4c05      	ldr	r4, [pc, #20]	; (12e0 <CLI_Ticks+0x34>)
    12ca:	47a0      	blx	r4
	return pdFALSE; // Indicates no further output is expected
    12cc:	2300      	movs	r3, #0
}
    12ce:	0018      	movs	r0, r3
    12d0:	46bd      	mov	sp, r7
    12d2:	b007      	add	sp, #28
    12d4:	bd90      	pop	{r4, r7, pc}
    12d6:	46c0      	nop			; (mov r8, r8)
    12d8:	0000948d 	.word	0x0000948d
    12dc:	00022de4 	.word	0x00022de4
    12e0:	00021a75 	.word	0x00021a75

000012e4 <CLI_i2cScan>:
 * @param    p_cli
 * @param    argc
 * @param    argv
 ******************************************************************************/
BaseType_t CLI_i2cScan(int8_t *pcWriteBuffer, size_t xWriteBufferLen, const int8_t *pcCommandString)
{
    12e4:	b590      	push	{r4, r7, lr}
    12e6:	b08f      	sub	sp, #60	; 0x3c
    12e8:	af00      	add	r7, sp, #0
    12ea:	60f8      	str	r0, [r7, #12]
    12ec:	60b9      	str	r1, [r7, #8]
    12ee:	607a      	str	r2, [r7, #4]
    I2C_Data i2cDevice;
    uint8_t address;
    // Send 0 command byte
    uint8_t dataOut[2] = {0, 0};
    12f0:	2318      	movs	r3, #24
    12f2:	18fb      	adds	r3, r7, r3
    12f4:	2200      	movs	r2, #0
    12f6:	701a      	strb	r2, [r3, #0]
    12f8:	2318      	movs	r3, #24
    12fa:	18fb      	adds	r3, r7, r3
    12fc:	2200      	movs	r2, #0
    12fe:	705a      	strb	r2, [r3, #1]
    uint8_t dataIn[2];
    dataOut[0] = 0;
    1300:	2318      	movs	r3, #24
    1302:	18fb      	adds	r3, r7, r3
    1304:	2200      	movs	r2, #0
    1306:	701a      	strb	r2, [r3, #0]
    dataOut[1] = 0;
    1308:	2318      	movs	r3, #24
    130a:	18fb      	adds	r3, r7, r3
    130c:	2200      	movs	r2, #0
    130e:	705a      	strb	r2, [r3, #1]
    i2cDevice.address = 0;
    1310:	231c      	movs	r3, #28
    1312:	18fb      	adds	r3, r7, r3
    1314:	2200      	movs	r2, #0
    1316:	701a      	strb	r2, [r3, #0]
    i2cDevice.msgIn = (uint8_t *)&dataIn[0];
    1318:	231c      	movs	r3, #28
    131a:	18fb      	adds	r3, r7, r3
    131c:	2214      	movs	r2, #20
    131e:	18ba      	adds	r2, r7, r2
    1320:	609a      	str	r2, [r3, #8]
    i2cDevice.lenOut = 1;
    1322:	231c      	movs	r3, #28
    1324:	18fb      	adds	r3, r7, r3
    1326:	2201      	movs	r2, #1
    1328:	81da      	strh	r2, [r3, #14]
    i2cDevice.msgOut = (const uint8_t *)&dataOut[0];
    132a:	231c      	movs	r3, #28
    132c:	18fb      	adds	r3, r7, r3
    132e:	2218      	movs	r2, #24
    1330:	18ba      	adds	r2, r7, r2
    1332:	605a      	str	r2, [r3, #4]
    i2cDevice.lenIn = 1;
    1334:	231c      	movs	r3, #28
    1336:	18fb      	adds	r3, r7, r3
    1338:	2201      	movs	r2, #1
    133a:	819a      	strh	r2, [r3, #12]

    SerialConsoleWriteString("0  1  2  3  4  5  6  7  8  9  a  b  c  d  e  f\r\n");
    133c:	4b2c      	ldr	r3, [pc, #176]	; (13f0 <CLI_i2cScan+0x10c>)
    133e:	0018      	movs	r0, r3
    1340:	4b2c      	ldr	r3, [pc, #176]	; (13f4 <CLI_i2cScan+0x110>)
    1342:	4798      	blx	r3
    for (int i = 0; i < 128; i += 16) {
    1344:	2300      	movs	r3, #0
    1346:	637b      	str	r3, [r7, #52]	; 0x34
    1348:	e046      	b.n	13d8 <CLI_i2cScan+0xf4>
        snprintf(bufCli, CLI_MSG_LEN - 1, "%02x: ", i);
    134a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    134c:	4a2a      	ldr	r2, [pc, #168]	; (13f8 <CLI_i2cScan+0x114>)
    134e:	482b      	ldr	r0, [pc, #172]	; (13fc <CLI_i2cScan+0x118>)
    1350:	210f      	movs	r1, #15
    1352:	4c2b      	ldr	r4, [pc, #172]	; (1400 <CLI_i2cScan+0x11c>)
    1354:	47a0      	blx	r4
        SerialConsoleWriteString(bufCli);
    1356:	4b29      	ldr	r3, [pc, #164]	; (13fc <CLI_i2cScan+0x118>)
    1358:	0018      	movs	r0, r3
    135a:	4b26      	ldr	r3, [pc, #152]	; (13f4 <CLI_i2cScan+0x110>)
    135c:	4798      	blx	r3

        for (int j = 0; j < 16; j++) {
    135e:	2300      	movs	r3, #0
    1360:	633b      	str	r3, [r7, #48]	; 0x30
    1362:	e02f      	b.n	13c4 <CLI_i2cScan+0xe0>
            i2cDevice.address = (i + j) << 1;
    1364:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    1366:	b2da      	uxtb	r2, r3
    1368:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    136a:	b2db      	uxtb	r3, r3
    136c:	18d3      	adds	r3, r2, r3
    136e:	b2db      	uxtb	r3, r3
    1370:	18db      	adds	r3, r3, r3
    1372:	b2da      	uxtb	r2, r3
    1374:	231c      	movs	r3, #28
    1376:	18fb      	adds	r3, r7, r3
    1378:	701a      	strb	r2, [r3, #0]

            int32_t ret = I2cWriteDataWait(&i2cDevice, 100);
    137a:	231c      	movs	r3, #28
    137c:	18fb      	adds	r3, r7, r3
    137e:	2164      	movs	r1, #100	; 0x64
    1380:	0018      	movs	r0, r3
    1382:	4b20      	ldr	r3, [pc, #128]	; (1404 <CLI_i2cScan+0x120>)
    1384:	4798      	blx	r3
    1386:	0003      	movs	r3, r0
    1388:	62fb      	str	r3, [r7, #44]	; 0x2c
            if (ret == 0) {
    138a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    138c:	2b00      	cmp	r3, #0
    138e:	d10c      	bne.n	13aa <CLI_i2cScan+0xc6>
                snprintf(bufCli, CLI_MSG_LEN - 1, "%02x: ", i2cDevice.address);
    1390:	231c      	movs	r3, #28
    1392:	18fb      	adds	r3, r7, r3
    1394:	781b      	ldrb	r3, [r3, #0]
    1396:	4a18      	ldr	r2, [pc, #96]	; (13f8 <CLI_i2cScan+0x114>)
    1398:	4818      	ldr	r0, [pc, #96]	; (13fc <CLI_i2cScan+0x118>)
    139a:	210f      	movs	r1, #15
    139c:	4c18      	ldr	r4, [pc, #96]	; (1400 <CLI_i2cScan+0x11c>)
    139e:	47a0      	blx	r4
                SerialConsoleWriteString(bufCli);
    13a0:	4b16      	ldr	r3, [pc, #88]	; (13fc <CLI_i2cScan+0x118>)
    13a2:	0018      	movs	r0, r3
    13a4:	4b13      	ldr	r3, [pc, #76]	; (13f4 <CLI_i2cScan+0x110>)
    13a6:	4798      	blx	r3
    13a8:	e009      	b.n	13be <CLI_i2cScan+0xda>
            } else {
                snprintf(bufCli, CLI_MSG_LEN - 1, "X ");
    13aa:	4b14      	ldr	r3, [pc, #80]	; (13fc <CLI_i2cScan+0x118>)
    13ac:	4a16      	ldr	r2, [pc, #88]	; (1408 <CLI_i2cScan+0x124>)
    13ae:	8811      	ldrh	r1, [r2, #0]
    13b0:	8019      	strh	r1, [r3, #0]
    13b2:	7892      	ldrb	r2, [r2, #2]
    13b4:	709a      	strb	r2, [r3, #2]
                SerialConsoleWriteString(bufCli);
    13b6:	4b11      	ldr	r3, [pc, #68]	; (13fc <CLI_i2cScan+0x118>)
    13b8:	0018      	movs	r0, r3
    13ba:	4b0e      	ldr	r3, [pc, #56]	; (13f4 <CLI_i2cScan+0x110>)
    13bc:	4798      	blx	r3
        for (int j = 0; j < 16; j++) {
    13be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    13c0:	3301      	adds	r3, #1
    13c2:	633b      	str	r3, [r7, #48]	; 0x30
    13c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    13c6:	2b0f      	cmp	r3, #15
    13c8:	ddcc      	ble.n	1364 <CLI_i2cScan+0x80>
            }
        }
        SerialConsoleWriteString("\r\n");
    13ca:	4b10      	ldr	r3, [pc, #64]	; (140c <CLI_i2cScan+0x128>)
    13cc:	0018      	movs	r0, r3
    13ce:	4b09      	ldr	r3, [pc, #36]	; (13f4 <CLI_i2cScan+0x110>)
    13d0:	4798      	blx	r3
    for (int i = 0; i < 128; i += 16) {
    13d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    13d4:	3310      	adds	r3, #16
    13d6:	637b      	str	r3, [r7, #52]	; 0x34
    13d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    13da:	2b7f      	cmp	r3, #127	; 0x7f
    13dc:	ddb5      	ble.n	134a <CLI_i2cScan+0x66>
    }
    SerialConsoleWriteString("\r\n");
    13de:	4b0b      	ldr	r3, [pc, #44]	; (140c <CLI_i2cScan+0x128>)
    13e0:	0018      	movs	r0, r3
    13e2:	4b04      	ldr	r3, [pc, #16]	; (13f4 <CLI_i2cScan+0x110>)
    13e4:	4798      	blx	r3
    return pdFALSE;
    13e6:	2300      	movs	r3, #0
}
    13e8:	0018      	movs	r0, r3
    13ea:	46bd      	mov	sp, r7
    13ec:	b00f      	add	sp, #60	; 0x3c
    13ee:	bd90      	pop	{r4, r7, pc}
    13f0:	00022e00 	.word	0x00022e00
    13f4:	0000ac99 	.word	0x0000ac99
    13f8:	00022e34 	.word	0x00022e34
    13fc:	20000374 	.word	0x20000374
    1400:	00021a75 	.word	0x00021a75
    1404:	00001aed 	.word	0x00001aed
    1408:	00022e3c 	.word	0x00022e3c
    140c:	00022da8 	.word	0x00022da8

00001410 <CLI_IMU_data>:
 * @param pcWriteBuffer 
 * @param xWriteBufferLen 
 * @param pcCommandString 
 * @return BaseType_t 
 */
BaseType_t CLI_IMU_data(int8_t *pcWriteBuffer, size_t xWriteBufferLen, const int8_t *pcCommandString){
    1410:	b5b0      	push	{r4, r5, r7, lr}
    1412:	b088      	sub	sp, #32
    1414:	af02      	add	r7, sp, #8
    1416:	60f8      	str	r0, [r7, #12]
    1418:	60b9      	str	r1, [r7, #8]
    141a:	607a      	str	r2, [r7, #4]
    static int16_t raw_acceleration_data[3];
    static float acceleration_mg[3];
    uint8_t data_ready_flag;
    stmdev_ctx_t *dev_ctx = GetImuStruct();
    141c:	4b2c      	ldr	r3, [pc, #176]	; (14d0 <CLI_IMU_data+0xc0>)
    141e:	4798      	blx	r3
    1420:	0003      	movs	r3, r0
    1422:	617b      	str	r3, [r7, #20]
    data_ready_flag = 0;
    1424:	2313      	movs	r3, #19
    1426:	18fb      	adds	r3, r7, r3
    1428:	2200      	movs	r2, #0
    142a:	701a      	strb	r2, [r3, #0]
    lsm6dso_xl_flag_data_ready_get(dev_ctx, &data_ready_flag);
    142c:	2313      	movs	r3, #19
    142e:	18fa      	adds	r2, r7, r3
    1430:	697b      	ldr	r3, [r7, #20]
    1432:	0011      	movs	r1, r2
    1434:	0018      	movs	r0, r3
    1436:	4b27      	ldr	r3, [pc, #156]	; (14d4 <CLI_IMU_data+0xc4>)
    1438:	4798      	blx	r3
    if(data_ready_flag){
    143a:	2313      	movs	r3, #19
    143c:	18fb      	adds	r3, r7, r3
    143e:	781b      	ldrb	r3, [r3, #0]
    1440:	2b00      	cmp	r3, #0
    1442:	d040      	beq.n	14c6 <CLI_IMU_data+0xb6>
        memset(raw_acceleration_data, 0x00, 3 * sizeof(int16_t));
    1444:	4b24      	ldr	r3, [pc, #144]	; (14d8 <CLI_IMU_data+0xc8>)
    1446:	2206      	movs	r2, #6
    1448:	2100      	movs	r1, #0
    144a:	0018      	movs	r0, r3
    144c:	4b23      	ldr	r3, [pc, #140]	; (14dc <CLI_IMU_data+0xcc>)
    144e:	4798      	blx	r3
        lsm6dso_acceleration_raw_get(dev_ctx, raw_acceleration_data);
    1450:	4a21      	ldr	r2, [pc, #132]	; (14d8 <CLI_IMU_data+0xc8>)
    1452:	697b      	ldr	r3, [r7, #20]
    1454:	0011      	movs	r1, r2
    1456:	0018      	movs	r0, r3
    1458:	4b21      	ldr	r3, [pc, #132]	; (14e0 <CLI_IMU_data+0xd0>)
    145a:	4798      	blx	r3
        acceleration_mg[0] = lsm6dso_from_fs2_to_mg(raw_acceleration_data[0]);
    145c:	4b1e      	ldr	r3, [pc, #120]	; (14d8 <CLI_IMU_data+0xc8>)
    145e:	2200      	movs	r2, #0
    1460:	5e9b      	ldrsh	r3, [r3, r2]
    1462:	0018      	movs	r0, r3
    1464:	4b1f      	ldr	r3, [pc, #124]	; (14e4 <CLI_IMU_data+0xd4>)
    1466:	4798      	blx	r3
    1468:	1c02      	adds	r2, r0, #0
    146a:	4b1f      	ldr	r3, [pc, #124]	; (14e8 <CLI_IMU_data+0xd8>)
    146c:	601a      	str	r2, [r3, #0]
        acceleration_mg[1] = lsm6dso_from_fs2_to_mg(raw_acceleration_data[1]);
    146e:	4b1a      	ldr	r3, [pc, #104]	; (14d8 <CLI_IMU_data+0xc8>)
    1470:	2202      	movs	r2, #2
    1472:	5e9b      	ldrsh	r3, [r3, r2]
    1474:	0018      	movs	r0, r3
    1476:	4b1b      	ldr	r3, [pc, #108]	; (14e4 <CLI_IMU_data+0xd4>)
    1478:	4798      	blx	r3
    147a:	1c02      	adds	r2, r0, #0
    147c:	4b1a      	ldr	r3, [pc, #104]	; (14e8 <CLI_IMU_data+0xd8>)
    147e:	605a      	str	r2, [r3, #4]
        acceleration_mg[2] = lsm6dso_from_fs2_to_mg(raw_acceleration_data[2]);
    1480:	4b15      	ldr	r3, [pc, #84]	; (14d8 <CLI_IMU_data+0xc8>)
    1482:	2204      	movs	r2, #4
    1484:	5e9b      	ldrsh	r3, [r3, r2]
    1486:	0018      	movs	r0, r3
    1488:	4b16      	ldr	r3, [pc, #88]	; (14e4 <CLI_IMU_data+0xd4>)
    148a:	4798      	blx	r3
    148c:	1c02      	adds	r2, r0, #0
    148e:	4b16      	ldr	r3, [pc, #88]	; (14e8 <CLI_IMU_data+0xd8>)
    1490:	609a      	str	r2, [r3, #8]
        snprintf(pcWriteBuffer, xWriteBufferLen, "Ax: %d, Ay: %d, Az: %d\r\n", (int)acceleration_mg[0], (int)acceleration_mg[1], (int)acceleration_mg[2]);
    1492:	4b15      	ldr	r3, [pc, #84]	; (14e8 <CLI_IMU_data+0xd8>)
    1494:	681a      	ldr	r2, [r3, #0]
    1496:	4b15      	ldr	r3, [pc, #84]	; (14ec <CLI_IMU_data+0xdc>)
    1498:	1c10      	adds	r0, r2, #0
    149a:	4798      	blx	r3
    149c:	0005      	movs	r5, r0
    149e:	4b12      	ldr	r3, [pc, #72]	; (14e8 <CLI_IMU_data+0xd8>)
    14a0:	685a      	ldr	r2, [r3, #4]
    14a2:	4b12      	ldr	r3, [pc, #72]	; (14ec <CLI_IMU_data+0xdc>)
    14a4:	1c10      	adds	r0, r2, #0
    14a6:	4798      	blx	r3
    14a8:	0004      	movs	r4, r0
    14aa:	4b0f      	ldr	r3, [pc, #60]	; (14e8 <CLI_IMU_data+0xd8>)
    14ac:	689a      	ldr	r2, [r3, #8]
    14ae:	4b0f      	ldr	r3, [pc, #60]	; (14ec <CLI_IMU_data+0xdc>)
    14b0:	1c10      	adds	r0, r2, #0
    14b2:	4798      	blx	r3
    14b4:	0003      	movs	r3, r0
    14b6:	4a0e      	ldr	r2, [pc, #56]	; (14f0 <CLI_IMU_data+0xe0>)
    14b8:	68b9      	ldr	r1, [r7, #8]
    14ba:	68f8      	ldr	r0, [r7, #12]
    14bc:	9301      	str	r3, [sp, #4]
    14be:	9400      	str	r4, [sp, #0]
    14c0:	002b      	movs	r3, r5
    14c2:	4c0c      	ldr	r4, [pc, #48]	; (14f4 <CLI_IMU_data+0xe4>)
    14c4:	47a0      	blx	r4
        // SerialConsoleWriteString(bufCli);
    }
    // SerialConsoleWriteString("\r\n");
    return pdFALSE;
    14c6:	2300      	movs	r3, #0
    
}
    14c8:	0018      	movs	r0, r3
    14ca:	46bd      	mov	sp, r7
    14cc:	b006      	add	sp, #24
    14ce:	bdb0      	pop	{r4, r5, r7, pc}
    14d0:	00002afd 	.word	0x00002afd
    14d4:	000024d9 	.word	0x000024d9
    14d8:	2000045c 	.word	0x2000045c
    14dc:	0002181b 	.word	0x0002181b
    14e0:	00002515 	.word	0x00002515
    14e4:	00001d69 	.word	0x00001d69
    14e8:	20000464 	.word	0x20000464
    14ec:	0001fdc1 	.word	0x0001fdc1
    14f0:	00022e40 	.word	0x00022e40
    14f4:	00021a75 	.word	0x00021a75

000014f8 <system_interrupt_enable>:
{
    14f8:	b580      	push	{r7, lr}
    14fa:	b082      	sub	sp, #8
    14fc:	af00      	add	r7, sp, #0
    14fe:	0002      	movs	r2, r0
    1500:	1dfb      	adds	r3, r7, #7
    1502:	701a      	strb	r2, [r3, #0]
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    1504:	4b06      	ldr	r3, [pc, #24]	; (1520 <system_interrupt_enable+0x28>)
    1506:	1dfa      	adds	r2, r7, #7
    1508:	7812      	ldrb	r2, [r2, #0]
    150a:	0011      	movs	r1, r2
    150c:	221f      	movs	r2, #31
    150e:	400a      	ands	r2, r1
    1510:	2101      	movs	r1, #1
    1512:	4091      	lsls	r1, r2
    1514:	000a      	movs	r2, r1
    1516:	601a      	str	r2, [r3, #0]
}
    1518:	46c0      	nop			; (mov r8, r8)
    151a:	46bd      	mov	sp, r7
    151c:	b002      	add	sp, #8
    151e:	bd80      	pop	{r7, pc}
    1520:	e000e100 	.word	0xe000e100

00001524 <i2c_master_is_syncing>:
{
    1524:	b580      	push	{r7, lr}
    1526:	b084      	sub	sp, #16
    1528:	af00      	add	r7, sp, #0
    152a:	6078      	str	r0, [r7, #4]
	SercomI2cm *const i2c_hw = &(module->hw->I2CM);
    152c:	687b      	ldr	r3, [r7, #4]
    152e:	681b      	ldr	r3, [r3, #0]
    1530:	60fb      	str	r3, [r7, #12]
	return (i2c_hw->SYNCBUSY.reg & SERCOM_I2CM_SYNCBUSY_MASK);
    1532:	68fb      	ldr	r3, [r7, #12]
    1534:	69db      	ldr	r3, [r3, #28]
    1536:	2207      	movs	r2, #7
    1538:	4013      	ands	r3, r2
    153a:	1e5a      	subs	r2, r3, #1
    153c:	4193      	sbcs	r3, r2
    153e:	b2db      	uxtb	r3, r3
}
    1540:	0018      	movs	r0, r3
    1542:	46bd      	mov	sp, r7
    1544:	b004      	add	sp, #16
    1546:	bd80      	pop	{r7, pc}

00001548 <_i2c_master_wait_for_sync>:
{
    1548:	b580      	push	{r7, lr}
    154a:	b082      	sub	sp, #8
    154c:	af00      	add	r7, sp, #0
    154e:	6078      	str	r0, [r7, #4]
	while (i2c_master_is_syncing(module)) {
    1550:	46c0      	nop			; (mov r8, r8)
    1552:	687b      	ldr	r3, [r7, #4]
    1554:	0018      	movs	r0, r3
    1556:	4b04      	ldr	r3, [pc, #16]	; (1568 <_i2c_master_wait_for_sync+0x20>)
    1558:	4798      	blx	r3
    155a:	1e03      	subs	r3, r0, #0
    155c:	d1f9      	bne.n	1552 <_i2c_master_wait_for_sync+0xa>
}
    155e:	46c0      	nop			; (mov r8, r8)
    1560:	46bd      	mov	sp, r7
    1562:	b002      	add	sp, #8
    1564:	bd80      	pop	{r7, pc}
    1566:	46c0      	nop			; (mov r8, r8)
    1568:	00001525 	.word	0x00001525

0000156c <i2c_master_get_config_defaults>:
 *
 * \param[out] config  Pointer to configuration structure to be initiated
 */
static inline void i2c_master_get_config_defaults(
		struct i2c_master_config *const config)
{
    156c:	b580      	push	{r7, lr}
    156e:	b082      	sub	sp, #8
    1570:	af00      	add	r7, sp, #0
    1572:	6078      	str	r0, [r7, #4]
	/*Sanity check argument */
	Assert(config);
	config->baud_rate        = I2C_MASTER_BAUD_RATE_100KHZ;
    1574:	687b      	ldr	r3, [r7, #4]
    1576:	2264      	movs	r2, #100	; 0x64
    1578:	601a      	str	r2, [r3, #0]
#ifdef FEATURE_I2C_FAST_MODE_PLUS_AND_HIGH_SPEED
	config->baud_rate_high_speed = I2C_MASTER_BAUD_RATE_3400KHZ;
    157a:	687b      	ldr	r3, [r7, #4]
    157c:	4a1b      	ldr	r2, [pc, #108]	; (15ec <i2c_master_get_config_defaults+0x80>)
    157e:	605a      	str	r2, [r3, #4]
	config->transfer_speed       = I2C_MASTER_SPEED_STANDARD_AND_FAST;
    1580:	687b      	ldr	r3, [r7, #4]
    1582:	2200      	movs	r2, #0
    1584:	609a      	str	r2, [r3, #8]
#endif
	config->generator_source = GCLK_GENERATOR_0;
    1586:	687b      	ldr	r3, [r7, #4]
    1588:	2200      	movs	r2, #0
    158a:	731a      	strb	r2, [r3, #12]
	config->run_in_standby   = false;
    158c:	687b      	ldr	r3, [r7, #4]
    158e:	2200      	movs	r2, #0
    1590:	761a      	strb	r2, [r3, #24]
	config->start_hold_time  = I2C_MASTER_START_HOLD_TIME_300NS_600NS;
    1592:	687b      	ldr	r3, [r7, #4]
    1594:	2280      	movs	r2, #128	; 0x80
    1596:	0392      	lsls	r2, r2, #14
    1598:	611a      	str	r2, [r3, #16]
	config->buffer_timeout   = 65535;
    159a:	687b      	ldr	r3, [r7, #4]
    159c:	2201      	movs	r2, #1
    159e:	4252      	negs	r2, r2
    15a0:	82da      	strh	r2, [r3, #22]
	config->unknown_bus_state_timeout = 65535;
    15a2:	687b      	ldr	r3, [r7, #4]
    15a4:	2201      	movs	r2, #1
    15a6:	4252      	negs	r2, r2
    15a8:	829a      	strh	r2, [r3, #20]
	config->pinmux_pad0      = PINMUX_DEFAULT;
    15aa:	687b      	ldr	r3, [r7, #4]
    15ac:	2200      	movs	r2, #0
    15ae:	61da      	str	r2, [r3, #28]
	config->pinmux_pad1      = PINMUX_DEFAULT;
    15b0:	687b      	ldr	r3, [r7, #4]
    15b2:	2200      	movs	r2, #0
    15b4:	621a      	str	r2, [r3, #32]
	config->scl_low_timeout  = false;
    15b6:	687b      	ldr	r3, [r7, #4]
    15b8:	2224      	movs	r2, #36	; 0x24
    15ba:	2100      	movs	r1, #0
    15bc:	5499      	strb	r1, [r3, r2]
	config->inactive_timeout = I2C_MASTER_INACTIVE_TIMEOUT_DISABLED;
    15be:	687b      	ldr	r3, [r7, #4]
    15c0:	2200      	movs	r2, #0
    15c2:	629a      	str	r2, [r3, #40]	; 0x28
#ifdef FEATURE_I2C_SCL_STRETCH_MODE
	config->scl_stretch_only_after_ack_bit = false;
    15c4:	687b      	ldr	r3, [r7, #4]
    15c6:	222c      	movs	r2, #44	; 0x2c
    15c8:	2100      	movs	r1, #0
    15ca:	5499      	strb	r1, [r3, r2]
#endif
#ifdef FEATURE_I2C_SCL_EXTEND_TIMEOUT
	config->slave_scl_low_extend_timeout   = false;
    15cc:	687b      	ldr	r3, [r7, #4]
    15ce:	222d      	movs	r2, #45	; 0x2d
    15d0:	2100      	movs	r1, #0
    15d2:	5499      	strb	r1, [r3, r2]
	config->master_scl_low_extend_timeout  = false;
    15d4:	687b      	ldr	r3, [r7, #4]
    15d6:	222e      	movs	r2, #46	; 0x2e
    15d8:	2100      	movs	r1, #0
    15da:	5499      	strb	r1, [r3, r2]
#endif
	/* The typical value is 215ns */
	config->sda_scl_rise_time_ns = 215;
    15dc:	687b      	ldr	r3, [r7, #4]
    15de:	22d7      	movs	r2, #215	; 0xd7
    15e0:	861a      	strh	r2, [r3, #48]	; 0x30
}
    15e2:	46c0      	nop			; (mov r8, r8)
    15e4:	46bd      	mov	sp, r7
    15e6:	b002      	add	sp, #8
    15e8:	bd80      	pop	{r7, pc}
    15ea:	46c0      	nop			; (mov r8, r8)
    15ec:	00000d48 	.word	0x00000d48

000015f0 <i2c_master_enable>:
 *
 * \param[in]  module  Pointer to the software module struct
 */
static inline void i2c_master_enable(
		const struct i2c_master_module *const module)
{
    15f0:	b580      	push	{r7, lr}
    15f2:	b084      	sub	sp, #16
    15f4:	af00      	add	r7, sp, #0
    15f6:	6078      	str	r0, [r7, #4]
	/* Sanity check of arguments */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    15f8:	687b      	ldr	r3, [r7, #4]
    15fa:	681b      	ldr	r3, [r3, #0]
    15fc:	60bb      	str	r3, [r7, #8]

	/* Timeout counter used to force bus state */
	uint32_t timeout_counter = 0;
    15fe:	2300      	movs	r3, #0
    1600:	60fb      	str	r3, [r7, #12]

	/* Wait for module to sync */
	_i2c_master_wait_for_sync(module);
    1602:	687b      	ldr	r3, [r7, #4]
    1604:	0018      	movs	r0, r3
    1606:	4b14      	ldr	r3, [pc, #80]	; (1658 <i2c_master_enable+0x68>)
    1608:	4798      	blx	r3

	/* Enable module */
	i2c_module->CTRLA.reg |= SERCOM_I2CM_CTRLA_ENABLE;
    160a:	68bb      	ldr	r3, [r7, #8]
    160c:	681b      	ldr	r3, [r3, #0]
    160e:	2202      	movs	r2, #2
    1610:	431a      	orrs	r2, r3
    1612:	68bb      	ldr	r3, [r7, #8]
    1614:	601a      	str	r2, [r3, #0]

#if I2C_MASTER_CALLBACK_MODE == true
	/* Enable module interrupts */
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
    1616:	687b      	ldr	r3, [r7, #4]
    1618:	681b      	ldr	r3, [r3, #0]
    161a:	0018      	movs	r0, r3
    161c:	4b0f      	ldr	r3, [pc, #60]	; (165c <i2c_master_enable+0x6c>)
    161e:	4798      	blx	r3
    1620:	0003      	movs	r3, r0
    1622:	0018      	movs	r0, r3
    1624:	4b0e      	ldr	r3, [pc, #56]	; (1660 <i2c_master_enable+0x70>)
    1626:	4798      	blx	r3
#endif
	/* Start timeout if bus state is unknown */
	while (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(1))) {
    1628:	e00c      	b.n	1644 <i2c_master_enable+0x54>
		timeout_counter++;
    162a:	68fb      	ldr	r3, [r7, #12]
    162c:	3301      	adds	r3, #1
    162e:	60fb      	str	r3, [r7, #12]
		if(timeout_counter >= (module->unknown_bus_state_timeout)) {
    1630:	687b      	ldr	r3, [r7, #4]
    1632:	88db      	ldrh	r3, [r3, #6]
    1634:	001a      	movs	r2, r3
    1636:	68fb      	ldr	r3, [r7, #12]
    1638:	429a      	cmp	r2, r3
    163a:	d803      	bhi.n	1644 <i2c_master_enable+0x54>
			/* Timeout, force bus state to idle */
			i2c_module->STATUS.reg = SERCOM_I2CM_STATUS_BUSSTATE(1);
    163c:	68bb      	ldr	r3, [r7, #8]
    163e:	2210      	movs	r2, #16
    1640:	835a      	strh	r2, [r3, #26]
			/* Workaround #1 */
			return;
    1642:	e006      	b.n	1652 <i2c_master_enable+0x62>
	while (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(1))) {
    1644:	68bb      	ldr	r3, [r7, #8]
    1646:	8b5b      	ldrh	r3, [r3, #26]
    1648:	b29b      	uxth	r3, r3
    164a:	001a      	movs	r2, r3
    164c:	2310      	movs	r3, #16
    164e:	4013      	ands	r3, r2
    1650:	d0eb      	beq.n	162a <i2c_master_enable+0x3a>
		}
	}
}
    1652:	46bd      	mov	sp, r7
    1654:	b004      	add	sp, #16
    1656:	bd80      	pop	{r7, pc}
    1658:	00001549 	.word	0x00001549
    165c:	000145ad 	.word	0x000145ad
    1660:	000014f9 	.word	0x000014f9

00001664 <i2c_master_enable_callback>:
 * \param[in]     callback_type  Callback type to enable
 */
static inline void i2c_master_enable_callback(
		struct i2c_master_module *const module,
		enum i2c_master_callback callback_type)
{
    1664:	b580      	push	{r7, lr}
    1666:	b082      	sub	sp, #8
    1668:	af00      	add	r7, sp, #0
    166a:	6078      	str	r0, [r7, #4]
    166c:	000a      	movs	r2, r1
    166e:	1cfb      	adds	r3, r7, #3
    1670:	701a      	strb	r2, [r3, #0]
	/* Sanity check */
	Assert(module);
	Assert(module->hw);

	/* Mark callback as enabled */
	module->enabled_callback |= (1 << callback_type);
    1672:	687b      	ldr	r3, [r7, #4]
    1674:	7e5b      	ldrb	r3, [r3, #25]
    1676:	b2db      	uxtb	r3, r3
    1678:	b25a      	sxtb	r2, r3
    167a:	1cfb      	adds	r3, r7, #3
    167c:	781b      	ldrb	r3, [r3, #0]
    167e:	2101      	movs	r1, #1
    1680:	4099      	lsls	r1, r3
    1682:	000b      	movs	r3, r1
    1684:	b25b      	sxtb	r3, r3
    1686:	4313      	orrs	r3, r2
    1688:	b25b      	sxtb	r3, r3
    168a:	b2da      	uxtb	r2, r3
    168c:	687b      	ldr	r3, [r7, #4]
    168e:	765a      	strb	r2, [r3, #25]
}
    1690:	46c0      	nop			; (mov r8, r8)
    1692:	46bd      	mov	sp, r7
    1694:	b002      	add	sp, #8
    1696:	bd80      	pop	{r7, pc}

00001698 <I2cDriverConfigureSensorBus>:
struct i2c_master_packet sensorPacketWrite;
/******************************************************************************
 * Forward Declarations
 ******************************************************************************/
static int32_t I2cDriverConfigureSensorBus(void)
{
    1698:	b590      	push	{r4, r7, lr}
    169a:	b091      	sub	sp, #68	; 0x44
    169c:	af00      	add	r7, sp, #0
    int32_t error = STATUS_OK;
    169e:	2300      	movs	r3, #0
    16a0:	63fb      	str	r3, [r7, #60]	; 0x3c
    status_code_genare_t errCodeAsf = STATUS_OK;
    16a2:	233a      	movs	r3, #58	; 0x3a
    16a4:	18fb      	adds	r3, r7, r3
    16a6:	2200      	movs	r2, #0
    16a8:	701a      	strb	r2, [r3, #0]
    /* Initialize config structure and software module */
    struct i2c_master_config config_i2c_master;
    i2c_master_get_config_defaults(&config_i2c_master);
    16aa:	1d3b      	adds	r3, r7, #4
    16ac:	0018      	movs	r0, r3
    16ae:	4b21      	ldr	r3, [pc, #132]	; (1734 <I2cDriverConfigureSensorBus+0x9c>)
    16b0:	4798      	blx	r3

    config_i2c_master.pinmux_pad0 = PINMUX_PA08C_SERCOM0_PAD0;
    16b2:	1d3b      	adds	r3, r7, #4
    16b4:	4a20      	ldr	r2, [pc, #128]	; (1738 <I2cDriverConfigureSensorBus+0xa0>)
    16b6:	61da      	str	r2, [r3, #28]
    config_i2c_master.pinmux_pad1 = PINMUX_PA09C_SERCOM0_PAD1;
    16b8:	1d3b      	adds	r3, r7, #4
    16ba:	4a20      	ldr	r2, [pc, #128]	; (173c <I2cDriverConfigureSensorBus+0xa4>)
    16bc:	621a      	str	r2, [r3, #32]
    /* Change buffer timeout to something longer */
    config_i2c_master.buffer_timeout = 1000;
    16be:	1d3b      	adds	r3, r7, #4
    16c0:	22fa      	movs	r2, #250	; 0xfa
    16c2:	0092      	lsls	r2, r2, #2
    16c4:	82da      	strh	r2, [r3, #22]
    /* Initialize and enable device with config. Try three times to initialize */

    for (uint8_t i = I2C_INIT_ATTEMPTS; i != 0; i--) {
    16c6:	233b      	movs	r3, #59	; 0x3b
    16c8:	18fb      	adds	r3, r7, r3
    16ca:	2203      	movs	r2, #3
    16cc:	701a      	strb	r2, [r3, #0]
    16ce:	e01e      	b.n	170e <I2cDriverConfigureSensorBus+0x76>
        errCodeAsf = i2c_master_init(&i2cSensorBusInstance, SERCOM0, &config_i2c_master);
    16d0:	233a      	movs	r3, #58	; 0x3a
    16d2:	18fc      	adds	r4, r7, r3
    16d4:	1d3a      	adds	r2, r7, #4
    16d6:	491a      	ldr	r1, [pc, #104]	; (1740 <I2cDriverConfigureSensorBus+0xa8>)
    16d8:	4b1a      	ldr	r3, [pc, #104]	; (1744 <I2cDriverConfigureSensorBus+0xac>)
    16da:	0018      	movs	r0, r3
    16dc:	4b1a      	ldr	r3, [pc, #104]	; (1748 <I2cDriverConfigureSensorBus+0xb0>)
    16de:	4798      	blx	r3
    16e0:	0003      	movs	r3, r0
    16e2:	7023      	strb	r3, [r4, #0]
        if (STATUS_OK == errCodeAsf) {
    16e4:	233a      	movs	r3, #58	; 0x3a
    16e6:	18fb      	adds	r3, r7, r3
    16e8:	781b      	ldrb	r3, [r3, #0]
    16ea:	2b00      	cmp	r3, #0
    16ec:	d104      	bne.n	16f8 <I2cDriverConfigureSensorBus+0x60>
            error = errCodeAsf;
    16ee:	233a      	movs	r3, #58	; 0x3a
    16f0:	18fb      	adds	r3, r7, r3
    16f2:	781b      	ldrb	r3, [r3, #0]
    16f4:	63fb      	str	r3, [r7, #60]	; 0x3c
            break;
    16f6:	e00f      	b.n	1718 <I2cDriverConfigureSensorBus+0x80>
        } else {
            i2c_master_reset(&i2cSensorBusInstance);
    16f8:	4b12      	ldr	r3, [pc, #72]	; (1744 <I2cDriverConfigureSensorBus+0xac>)
    16fa:	0018      	movs	r0, r3
    16fc:	4b13      	ldr	r3, [pc, #76]	; (174c <I2cDriverConfigureSensorBus+0xb4>)
    16fe:	4798      	blx	r3
    for (uint8_t i = I2C_INIT_ATTEMPTS; i != 0; i--) {
    1700:	233b      	movs	r3, #59	; 0x3b
    1702:	18fb      	adds	r3, r7, r3
    1704:	781a      	ldrb	r2, [r3, #0]
    1706:	233b      	movs	r3, #59	; 0x3b
    1708:	18fb      	adds	r3, r7, r3
    170a:	3a01      	subs	r2, #1
    170c:	701a      	strb	r2, [r3, #0]
    170e:	233b      	movs	r3, #59	; 0x3b
    1710:	18fb      	adds	r3, r7, r3
    1712:	781b      	ldrb	r3, [r3, #0]
    1714:	2b00      	cmp	r3, #0
    1716:	d1db      	bne.n	16d0 <I2cDriverConfigureSensorBus+0x38>
        }
    }

    if (STATUS_OK != error) goto exit;
    1718:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    171a:	2b00      	cmp	r3, #0
    171c:	d104      	bne.n	1728 <I2cDriverConfigureSensorBus+0x90>

    i2c_master_enable(&i2cSensorBusInstance);
    171e:	4b09      	ldr	r3, [pc, #36]	; (1744 <I2cDriverConfigureSensorBus+0xac>)
    1720:	0018      	movs	r0, r3
    1722:	4b0b      	ldr	r3, [pc, #44]	; (1750 <I2cDriverConfigureSensorBus+0xb8>)
    1724:	4798      	blx	r3
    1726:	e000      	b.n	172a <I2cDriverConfigureSensorBus+0x92>
    if (STATUS_OK != error) goto exit;
    1728:	46c0      	nop			; (mov r8, r8)

exit:
    return error;
    172a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
    172c:	0018      	movs	r0, r3
    172e:	46bd      	mov	sp, r7
    1730:	b011      	add	sp, #68	; 0x44
    1732:	bd90      	pop	{r4, r7, pc}
    1734:	0000156d 	.word	0x0000156d
    1738:	00080002 	.word	0x00080002
    173c:	00090002 	.word	0x00090002
    1740:	42000800 	.word	0x42000800
    1744:	20004208 	.word	0x20004208
    1748:	000049d1 	.word	0x000049d1
    174c:	00004b05 	.word	0x00004b05
    1750:	000015f1 	.word	0x000015f1

00001754 <I2cSensorsTxComplete>:
  * @param[in]   i2c Pointer to I2C structure used inside the Atmel ASFv3  framework
  * @return      This function is a callback, and it is registered as such when we send an I2C transmission on this I2C bus.
  * @note
  */
void I2cSensorsTxComplete(struct i2c_master_module *const module)
{
    1754:	b580      	push	{r7, lr}
    1756:	b084      	sub	sp, #16
    1758:	af00      	add	r7, sp, #0
    175a:	6078      	str	r0, [r7, #4]
    I2cSensorBusState.i2cState = I2C_BUS_READY;
    175c:	4b0e      	ldr	r3, [pc, #56]	; (1798 <I2cSensorsTxComplete+0x44>)
    175e:	2200      	movs	r2, #0
    1760:	701a      	strb	r2, [r3, #0]
    I2cSensorBusState.rxDoneFlag = true;
    1762:	4b0d      	ldr	r3, [pc, #52]	; (1798 <I2cSensorsTxComplete+0x44>)
    1764:	2201      	movs	r2, #1
    1766:	609a      	str	r2, [r3, #8]
    BaseType_t xHigherPriorityTaskWoken = pdFALSE;
    1768:	2300      	movs	r3, #0
    176a:	60fb      	str	r3, [r7, #12]

    xSemaphoreGiveFromISR(sensorI2cSemaphoreHandle, &xHigherPriorityTaskWoken);
    176c:	4b0b      	ldr	r3, [pc, #44]	; (179c <I2cSensorsTxComplete+0x48>)
    176e:	681b      	ldr	r3, [r3, #0]
    1770:	220c      	movs	r2, #12
    1772:	18ba      	adds	r2, r7, r2
    1774:	0011      	movs	r1, r2
    1776:	0018      	movs	r0, r3
    1778:	4b09      	ldr	r3, [pc, #36]	; (17a0 <I2cSensorsTxComplete+0x4c>)
    177a:	4798      	blx	r3
    sensorTransmitError = false;
    177c:	4b09      	ldr	r3, [pc, #36]	; (17a4 <I2cSensorsTxComplete+0x50>)
    177e:	2200      	movs	r2, #0
    1780:	701a      	strb	r2, [r3, #0]
    portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
    1782:	68fb      	ldr	r3, [r7, #12]
    1784:	2b00      	cmp	r3, #0
    1786:	d003      	beq.n	1790 <I2cSensorsTxComplete+0x3c>
    1788:	4b07      	ldr	r3, [pc, #28]	; (17a8 <I2cSensorsTxComplete+0x54>)
    178a:	2280      	movs	r2, #128	; 0x80
    178c:	0552      	lsls	r2, r2, #21
    178e:	601a      	str	r2, [r3, #0]
}
    1790:	46c0      	nop			; (mov r8, r8)
    1792:	46bd      	mov	sp, r7
    1794:	b004      	add	sp, #16
    1796:	bd80      	pop	{r7, pc}
    1798:	20000474 	.word	0x20000474
    179c:	20004230 	.word	0x20004230
    17a0:	00007c69 	.word	0x00007c69
    17a4:	20000470 	.word	0x20000470
    17a8:	e000ed04 	.word	0xe000ed04

000017ac <I2cSensorsRxComplete>:
  * @param[in]		i2c Pointer to I2C structure used inside the Atmel ASFv3  framework
  * @return			This function is a callback, and it is registered as such when we send an I2C reception on this I2C bus.
  * @note
  */
void I2cSensorsRxComplete(struct i2c_master_module *const module)
{
    17ac:	b580      	push	{r7, lr}
    17ae:	b084      	sub	sp, #16
    17b0:	af00      	add	r7, sp, #0
    17b2:	6078      	str	r0, [r7, #4]
    I2cSensorBusState.i2cState = I2C_BUS_READY;
    17b4:	4b0e      	ldr	r3, [pc, #56]	; (17f0 <I2cSensorsRxComplete+0x44>)
    17b6:	2200      	movs	r2, #0
    17b8:	701a      	strb	r2, [r3, #0]
    I2cSensorBusState.rxDoneFlag = true;
    17ba:	4b0d      	ldr	r3, [pc, #52]	; (17f0 <I2cSensorsRxComplete+0x44>)
    17bc:	2201      	movs	r2, #1
    17be:	609a      	str	r2, [r3, #8]
    BaseType_t xHigherPriorityTaskWoken = pdFALSE;
    17c0:	2300      	movs	r3, #0
    17c2:	60fb      	str	r3, [r7, #12]

    xSemaphoreGiveFromISR(sensorI2cSemaphoreHandle, &xHigherPriorityTaskWoken);
    17c4:	4b0b      	ldr	r3, [pc, #44]	; (17f4 <I2cSensorsRxComplete+0x48>)
    17c6:	681b      	ldr	r3, [r3, #0]
    17c8:	220c      	movs	r2, #12
    17ca:	18ba      	adds	r2, r7, r2
    17cc:	0011      	movs	r1, r2
    17ce:	0018      	movs	r0, r3
    17d0:	4b09      	ldr	r3, [pc, #36]	; (17f8 <I2cSensorsRxComplete+0x4c>)
    17d2:	4798      	blx	r3
    sensorTransmitError = false;
    17d4:	4b09      	ldr	r3, [pc, #36]	; (17fc <I2cSensorsRxComplete+0x50>)
    17d6:	2200      	movs	r2, #0
    17d8:	701a      	strb	r2, [r3, #0]
    portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
    17da:	68fb      	ldr	r3, [r7, #12]
    17dc:	2b00      	cmp	r3, #0
    17de:	d003      	beq.n	17e8 <I2cSensorsRxComplete+0x3c>
    17e0:	4b07      	ldr	r3, [pc, #28]	; (1800 <I2cSensorsRxComplete+0x54>)
    17e2:	2280      	movs	r2, #128	; 0x80
    17e4:	0552      	lsls	r2, r2, #21
    17e6:	601a      	str	r2, [r3, #0]
}
    17e8:	46c0      	nop			; (mov r8, r8)
    17ea:	46bd      	mov	sp, r7
    17ec:	b004      	add	sp, #16
    17ee:	bd80      	pop	{r7, pc}
    17f0:	20000474 	.word	0x20000474
    17f4:	20004230 	.word	0x20004230
    17f8:	00007c69 	.word	0x00007c69
    17fc:	20000470 	.word	0x20000470
    1800:	e000ed04 	.word	0xe000ed04

00001804 <I2cSensorsError>:
  * @param[in]		i2c Pointer to I2C structure used inside the Atmel ASFv3  framework
  * @return			This function is a callback, and it is registered as such when we send an I2C reception on this I2C bus.
  * @note
  */
void I2cSensorsError(struct i2c_master_module *const module)
{
    1804:	b580      	push	{r7, lr}
    1806:	b084      	sub	sp, #16
    1808:	af00      	add	r7, sp, #0
    180a:	6078      	str	r0, [r7, #4]
    I2cSensorBusState.i2cState = I2C_BUS_READY;
    180c:	4b0e      	ldr	r3, [pc, #56]	; (1848 <I2cSensorsError+0x44>)
    180e:	2200      	movs	r2, #0
    1810:	701a      	strb	r2, [r3, #0]
    I2cSensorBusState.txDoneFlag = true;
    1812:	4b0d      	ldr	r3, [pc, #52]	; (1848 <I2cSensorsError+0x44>)
    1814:	2201      	movs	r2, #1
    1816:	605a      	str	r2, [r3, #4]
    BaseType_t xHigherPriorityTaskWoken = pdFALSE;
    1818:	2300      	movs	r3, #0
    181a:	60fb      	str	r3, [r7, #12]

    xSemaphoreGiveFromISR(sensorI2cSemaphoreHandle, &xHigherPriorityTaskWoken);
    181c:	4b0b      	ldr	r3, [pc, #44]	; (184c <I2cSensorsError+0x48>)
    181e:	681b      	ldr	r3, [r3, #0]
    1820:	220c      	movs	r2, #12
    1822:	18ba      	adds	r2, r7, r2
    1824:	0011      	movs	r1, r2
    1826:	0018      	movs	r0, r3
    1828:	4b09      	ldr	r3, [pc, #36]	; (1850 <I2cSensorsError+0x4c>)
    182a:	4798      	blx	r3
    sensorTransmitError = true;
    182c:	4b09      	ldr	r3, [pc, #36]	; (1854 <I2cSensorsError+0x50>)
    182e:	2201      	movs	r2, #1
    1830:	701a      	strb	r2, [r3, #0]
    portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
    1832:	68fb      	ldr	r3, [r7, #12]
    1834:	2b00      	cmp	r3, #0
    1836:	d003      	beq.n	1840 <I2cSensorsError+0x3c>
    1838:	4b07      	ldr	r3, [pc, #28]	; (1858 <I2cSensorsError+0x54>)
    183a:	2280      	movs	r2, #128	; 0x80
    183c:	0552      	lsls	r2, r2, #21
    183e:	601a      	str	r2, [r3, #0]
}
    1840:	46c0      	nop			; (mov r8, r8)
    1842:	46bd      	mov	sp, r7
    1844:	b004      	add	sp, #16
    1846:	bd80      	pop	{r7, pc}
    1848:	20000474 	.word	0x20000474
    184c:	20004230 	.word	0x20004230
    1850:	00007c69 	.word	0x00007c69
    1854:	20000470 	.word	0x20000470
    1858:	e000ed04 	.word	0xe000ed04

0000185c <I2cDriverRegisterSensorBusCallbacks>:

void I2cDriverRegisterSensorBusCallbacks(void)
{
    185c:	b580      	push	{r7, lr}
    185e:	af00      	add	r7, sp, #0
    /* Register callback function. */
    i2c_master_register_callback(&i2cSensorBusInstance, I2cSensorsTxComplete, I2C_MASTER_CALLBACK_WRITE_COMPLETE);
    1860:	4911      	ldr	r1, [pc, #68]	; (18a8 <I2cDriverRegisterSensorBusCallbacks+0x4c>)
    1862:	4b12      	ldr	r3, [pc, #72]	; (18ac <I2cDriverRegisterSensorBusCallbacks+0x50>)
    1864:	2200      	movs	r2, #0
    1866:	0018      	movs	r0, r3
    1868:	4b11      	ldr	r3, [pc, #68]	; (18b0 <I2cDriverRegisterSensorBusCallbacks+0x54>)
    186a:	4798      	blx	r3
    i2c_master_enable_callback(&i2cSensorBusInstance, I2C_MASTER_CALLBACK_WRITE_COMPLETE);
    186c:	4b0f      	ldr	r3, [pc, #60]	; (18ac <I2cDriverRegisterSensorBusCallbacks+0x50>)
    186e:	2100      	movs	r1, #0
    1870:	0018      	movs	r0, r3
    1872:	4b10      	ldr	r3, [pc, #64]	; (18b4 <I2cDriverRegisterSensorBusCallbacks+0x58>)
    1874:	4798      	blx	r3

    i2c_master_register_callback(&i2cSensorBusInstance, I2cSensorsRxComplete, I2C_MASTER_CALLBACK_READ_COMPLETE);
    1876:	4910      	ldr	r1, [pc, #64]	; (18b8 <I2cDriverRegisterSensorBusCallbacks+0x5c>)
    1878:	4b0c      	ldr	r3, [pc, #48]	; (18ac <I2cDriverRegisterSensorBusCallbacks+0x50>)
    187a:	2201      	movs	r2, #1
    187c:	0018      	movs	r0, r3
    187e:	4b0c      	ldr	r3, [pc, #48]	; (18b0 <I2cDriverRegisterSensorBusCallbacks+0x54>)
    1880:	4798      	blx	r3
    i2c_master_enable_callback(&i2cSensorBusInstance, I2C_MASTER_CALLBACK_READ_COMPLETE);
    1882:	4b0a      	ldr	r3, [pc, #40]	; (18ac <I2cDriverRegisterSensorBusCallbacks+0x50>)
    1884:	2101      	movs	r1, #1
    1886:	0018      	movs	r0, r3
    1888:	4b0a      	ldr	r3, [pc, #40]	; (18b4 <I2cDriverRegisterSensorBusCallbacks+0x58>)
    188a:	4798      	blx	r3

    i2c_master_register_callback(&i2cSensorBusInstance, I2cSensorsError, I2C_MASTER_CALLBACK_ERROR);
    188c:	490b      	ldr	r1, [pc, #44]	; (18bc <I2cDriverRegisterSensorBusCallbacks+0x60>)
    188e:	4b07      	ldr	r3, [pc, #28]	; (18ac <I2cDriverRegisterSensorBusCallbacks+0x50>)
    1890:	2202      	movs	r2, #2
    1892:	0018      	movs	r0, r3
    1894:	4b06      	ldr	r3, [pc, #24]	; (18b0 <I2cDriverRegisterSensorBusCallbacks+0x54>)
    1896:	4798      	blx	r3
    i2c_master_enable_callback(&i2cSensorBusInstance, I2C_MASTER_CALLBACK_ERROR);
    1898:	4b04      	ldr	r3, [pc, #16]	; (18ac <I2cDriverRegisterSensorBusCallbacks+0x50>)
    189a:	2102      	movs	r1, #2
    189c:	0018      	movs	r0, r3
    189e:	4b05      	ldr	r3, [pc, #20]	; (18b4 <I2cDriverRegisterSensorBusCallbacks+0x58>)
    18a0:	4798      	blx	r3
}
    18a2:	46c0      	nop			; (mov r8, r8)
    18a4:	46bd      	mov	sp, r7
    18a6:	bd80      	pop	{r7, pc}
    18a8:	00001755 	.word	0x00001755
    18ac:	20004208 	.word	0x20004208
    18b0:	00000909 	.word	0x00000909
    18b4:	00001665 	.word	0x00001665
    18b8:	000017ad 	.word	0x000017ad
    18bc:	00001805 	.word	0x00001805

000018c0 <I2cInitializeDriver>:
 * @brief       Function call to initialize the I2C driver\
 * @details     This function must be called from an RTOS thread if using RTOS, and must be called before any I2C call
 * @note
 */
int32_t I2cInitializeDriver(void)
{
    18c0:	b580      	push	{r7, lr}
    18c2:	b082      	sub	sp, #8
    18c4:	af00      	add	r7, sp, #0
    int32_t error = STATUS_OK;
    18c6:	2300      	movs	r3, #0
    18c8:	607b      	str	r3, [r7, #4]

    error = I2cDriverConfigureSensorBus();
    18ca:	4b14      	ldr	r3, [pc, #80]	; (191c <I2cInitializeDriver+0x5c>)
    18cc:	4798      	blx	r3
    18ce:	0003      	movs	r3, r0
    18d0:	607b      	str	r3, [r7, #4]
    if (STATUS_OK != error) goto exit;
    18d2:	687b      	ldr	r3, [r7, #4]
    18d4:	2b00      	cmp	r3, #0
    18d6:	d11a      	bne.n	190e <I2cInitializeDriver+0x4e>

    I2cDriverRegisterSensorBusCallbacks();
    18d8:	4b11      	ldr	r3, [pc, #68]	; (1920 <I2cInitializeDriver+0x60>)
    18da:	4798      	blx	r3

    sensorI2cMutexHandle = xSemaphoreCreateMutex();
    18dc:	2001      	movs	r0, #1
    18de:	4b11      	ldr	r3, [pc, #68]	; (1924 <I2cInitializeDriver+0x64>)
    18e0:	4798      	blx	r3
    18e2:	0002      	movs	r2, r0
    18e4:	4b10      	ldr	r3, [pc, #64]	; (1928 <I2cInitializeDriver+0x68>)
    18e6:	601a      	str	r2, [r3, #0]

    sensorI2cSemaphoreHandle = xSemaphoreCreateBinary();
    18e8:	2203      	movs	r2, #3
    18ea:	2100      	movs	r1, #0
    18ec:	2001      	movs	r0, #1
    18ee:	4b0f      	ldr	r3, [pc, #60]	; (192c <I2cInitializeDriver+0x6c>)
    18f0:	4798      	blx	r3
    18f2:	0002      	movs	r2, r0
    18f4:	4b0e      	ldr	r3, [pc, #56]	; (1930 <I2cInitializeDriver+0x70>)
    18f6:	601a      	str	r2, [r3, #0]
    // xSemaphoreGive(sensorI2cSemaphoreHandle);

    if (NULL == sensorI2cMutexHandle || NULL == sensorI2cSemaphoreHandle) {
    18f8:	4b0b      	ldr	r3, [pc, #44]	; (1928 <I2cInitializeDriver+0x68>)
    18fa:	681b      	ldr	r3, [r3, #0]
    18fc:	2b00      	cmp	r3, #0
    18fe:	d003      	beq.n	1908 <I2cInitializeDriver+0x48>
    1900:	4b0b      	ldr	r3, [pc, #44]	; (1930 <I2cInitializeDriver+0x70>)
    1902:	681b      	ldr	r3, [r3, #0]
    1904:	2b00      	cmp	r3, #0
    1906:	d103      	bne.n	1910 <I2cInitializeDriver+0x50>
        error = STATUS_SUSPEND;  // Could not initialize mutex!
    1908:	2306      	movs	r3, #6
    190a:	607b      	str	r3, [r7, #4]
        goto exit;
    190c:	e000      	b.n	1910 <I2cInitializeDriver+0x50>
    if (STATUS_OK != error) goto exit;
    190e:	46c0      	nop			; (mov r8, r8)
    }

exit:
    return error;
    1910:	687b      	ldr	r3, [r7, #4]
}
    1912:	0018      	movs	r0, r3
    1914:	46bd      	mov	sp, r7
    1916:	b002      	add	sp, #8
    1918:	bd80      	pop	{r7, pc}
    191a:	46c0      	nop			; (mov r8, r8)
    191c:	00001699 	.word	0x00001699
    1920:	0000185d 	.word	0x0000185d
    1924:	000075a1 	.word	0x000075a1
    1928:	20004204 	.word	0x20004204
    192c:	00007339 	.word	0x00007339
    1930:	20004230 	.word	0x20004230

00001934 <I2cWriteData>:
 * @return      Returns an error message in case of error. See ErrCodes.h
 * @note
 */

int32_t I2cWriteData(I2C_Data *data)
{
    1934:	b590      	push	{r4, r7, lr}
    1936:	b085      	sub	sp, #20
    1938:	af00      	add	r7, sp, #0
    193a:	6078      	str	r0, [r7, #4]
    int32_t error = ERROR_NONE;
    193c:	2300      	movs	r3, #0
    193e:	60fb      	str	r3, [r7, #12]
    enum status_code hwError;

    // Check parameters
    if (data == NULL || data->msgOut == NULL) {
    1940:	687b      	ldr	r3, [r7, #4]
    1942:	2b00      	cmp	r3, #0
    1944:	d003      	beq.n	194e <I2cWriteData+0x1a>
    1946:	687b      	ldr	r3, [r7, #4]
    1948:	685b      	ldr	r3, [r3, #4]
    194a:	2b00      	cmp	r3, #0
    194c:	d103      	bne.n	1956 <I2cWriteData+0x22>
        error = ERR_INVALID_ARG;
    194e:	2308      	movs	r3, #8
    1950:	425b      	negs	r3, r3
    1952:	60fb      	str	r3, [r7, #12]
        goto exit;
    1954:	e01f      	b.n	1996 <I2cWriteData+0x62>
    }

    // Prepare to write
    sensorPacketWrite.address = data->address;
    1956:	687b      	ldr	r3, [r7, #4]
    1958:	781b      	ldrb	r3, [r3, #0]
    195a:	b29a      	uxth	r2, r3
    195c:	4b10      	ldr	r3, [pc, #64]	; (19a0 <I2cWriteData+0x6c>)
    195e:	801a      	strh	r2, [r3, #0]
    sensorPacketWrite.data = (uint8_t *)data->msgOut;
    1960:	687b      	ldr	r3, [r7, #4]
    1962:	685a      	ldr	r2, [r3, #4]
    1964:	4b0e      	ldr	r3, [pc, #56]	; (19a0 <I2cWriteData+0x6c>)
    1966:	605a      	str	r2, [r3, #4]
    sensorPacketWrite.data_length = data->lenOut;
    1968:	687b      	ldr	r3, [r7, #4]
    196a:	89da      	ldrh	r2, [r3, #14]
    196c:	4b0c      	ldr	r3, [pc, #48]	; (19a0 <I2cWriteData+0x6c>)
    196e:	805a      	strh	r2, [r3, #2]

    // Write

    hwError = i2c_master_write_packet_job(&i2cSensorBusInstance, &sensorPacketWrite);
    1970:	230b      	movs	r3, #11
    1972:	18fc      	adds	r4, r7, r3
    1974:	4a0a      	ldr	r2, [pc, #40]	; (19a0 <I2cWriteData+0x6c>)
    1976:	4b0b      	ldr	r3, [pc, #44]	; (19a4 <I2cWriteData+0x70>)
    1978:	0011      	movs	r1, r2
    197a:	0018      	movs	r0, r3
    197c:	4b0a      	ldr	r3, [pc, #40]	; (19a8 <I2cWriteData+0x74>)
    197e:	4798      	blx	r3
    1980:	0003      	movs	r3, r0
    1982:	7023      	strb	r3, [r4, #0]

    if (STATUS_OK != hwError) {
    1984:	230b      	movs	r3, #11
    1986:	18fb      	adds	r3, r7, r3
    1988:	781b      	ldrb	r3, [r3, #0]
    198a:	2b00      	cmp	r3, #0
    198c:	d003      	beq.n	1996 <I2cWriteData+0x62>
        error = ERROR_IO;
    198e:	2306      	movs	r3, #6
    1990:	425b      	negs	r3, r3
    1992:	60fb      	str	r3, [r7, #12]
        goto exit;
    1994:	46c0      	nop			; (mov r8, r8)
    }

exit:
    return error;
    1996:	68fb      	ldr	r3, [r7, #12]
}
    1998:	0018      	movs	r0, r3
    199a:	46bd      	mov	sp, r7
    199c:	b005      	add	sp, #20
    199e:	bd90      	pop	{r4, r7, pc}
    19a0:	20004234 	.word	0x20004234
    19a4:	20004208 	.word	0x20004208
    19a8:	00000b8d 	.word	0x00000b8d

000019ac <I2cReadData>:
 * @param[in]   data Pointer to I2C data structure which has all the information needed to send an I2C message
 * @return      Returns an error message in case of error. See ErrCodes.h
 * @note
 */
int32_t I2cReadData(I2C_Data *data)
{
    19ac:	b590      	push	{r4, r7, lr}
    19ae:	b085      	sub	sp, #20
    19b0:	af00      	add	r7, sp, #0
    19b2:	6078      	str	r0, [r7, #4]
    int32_t error = ERROR_NONE;
    19b4:	2300      	movs	r3, #0
    19b6:	60fb      	str	r3, [r7, #12]
    enum status_code hwError;

    // Check parameters
    if (data == NULL || data->msgOut == NULL) {
    19b8:	687b      	ldr	r3, [r7, #4]
    19ba:	2b00      	cmp	r3, #0
    19bc:	d003      	beq.n	19c6 <I2cReadData+0x1a>
    19be:	687b      	ldr	r3, [r7, #4]
    19c0:	685b      	ldr	r3, [r3, #4]
    19c2:	2b00      	cmp	r3, #0
    19c4:	d103      	bne.n	19ce <I2cReadData+0x22>
        error = ERR_INVALID_ARG;
    19c6:	2308      	movs	r3, #8
    19c8:	425b      	negs	r3, r3
    19ca:	60fb      	str	r3, [r7, #12]
        goto exit;
    19cc:	e01f      	b.n	1a0e <I2cReadData+0x62>
    }

    // Prepare to read
    sensorPacketWrite.address = data->address;
    19ce:	687b      	ldr	r3, [r7, #4]
    19d0:	781b      	ldrb	r3, [r3, #0]
    19d2:	b29a      	uxth	r2, r3
    19d4:	4b10      	ldr	r3, [pc, #64]	; (1a18 <I2cReadData+0x6c>)
    19d6:	801a      	strh	r2, [r3, #0]
    sensorPacketWrite.data = data->msgIn;
    19d8:	687b      	ldr	r3, [r7, #4]
    19da:	689a      	ldr	r2, [r3, #8]
    19dc:	4b0e      	ldr	r3, [pc, #56]	; (1a18 <I2cReadData+0x6c>)
    19de:	605a      	str	r2, [r3, #4]
    sensorPacketWrite.data_length = data->lenIn;
    19e0:	687b      	ldr	r3, [r7, #4]
    19e2:	899a      	ldrh	r2, [r3, #12]
    19e4:	4b0c      	ldr	r3, [pc, #48]	; (1a18 <I2cReadData+0x6c>)
    19e6:	805a      	strh	r2, [r3, #2]

    // Read

    hwError = i2c_master_read_packet_job(&i2cSensorBusInstance, &sensorPacketWrite);
    19e8:	230b      	movs	r3, #11
    19ea:	18fc      	adds	r4, r7, r3
    19ec:	4a0a      	ldr	r2, [pc, #40]	; (1a18 <I2cReadData+0x6c>)
    19ee:	4b0b      	ldr	r3, [pc, #44]	; (1a1c <I2cReadData+0x70>)
    19f0:	0011      	movs	r1, r2
    19f2:	0018      	movs	r0, r3
    19f4:	4b0a      	ldr	r3, [pc, #40]	; (1a20 <I2cReadData+0x74>)
    19f6:	4798      	blx	r3
    19f8:	0003      	movs	r3, r0
    19fa:	7023      	strb	r3, [r4, #0]

    if (STATUS_OK != hwError) {
    19fc:	230b      	movs	r3, #11
    19fe:	18fb      	adds	r3, r7, r3
    1a00:	781b      	ldrb	r3, [r3, #0]
    1a02:	2b00      	cmp	r3, #0
    1a04:	d003      	beq.n	1a0e <I2cReadData+0x62>
        error = ERROR_IO;
    1a06:	2306      	movs	r3, #6
    1a08:	425b      	negs	r3, r3
    1a0a:	60fb      	str	r3, [r7, #12]
        goto exit;
    1a0c:	46c0      	nop			; (mov r8, r8)
    }

exit:
    return error;
    1a0e:	68fb      	ldr	r3, [r7, #12]
}
    1a10:	0018      	movs	r0, r3
    1a12:	46bd      	mov	sp, r7
    1a14:	b005      	add	sp, #20
    1a16:	bd90      	pop	{r4, r7, pc}
    1a18:	20004234 	.word	0x20004234
    1a1c:	20004208 	.word	0x20004208
    1a20:	00000aa9 	.word	0x00000aa9

00001a24 <I2cFreeMutex>:
 * @param[in]   bus Enum that represents the bus in which we are interested to free the mutex of.
 * @return      Returns (0) if the bus is ready, (1) if it is busy.
 * @note
 */
int32_t I2cFreeMutex(void)
{
    1a24:	b590      	push	{r4, r7, lr}
    1a26:	b083      	sub	sp, #12
    1a28:	af00      	add	r7, sp, #0
    int32_t error = ERROR_NONE;
    1a2a:	2300      	movs	r3, #0
    1a2c:	607b      	str	r3, [r7, #4]

    if (xSemaphoreGive(sensorI2cMutexHandle) != pdTRUE) {
    1a2e:	4b09      	ldr	r3, [pc, #36]	; (1a54 <I2cFreeMutex+0x30>)
    1a30:	6818      	ldr	r0, [r3, #0]
    1a32:	2300      	movs	r3, #0
    1a34:	2200      	movs	r2, #0
    1a36:	2100      	movs	r1, #0
    1a38:	4c07      	ldr	r4, [pc, #28]	; (1a58 <I2cFreeMutex+0x34>)
    1a3a:	47a0      	blx	r4
    1a3c:	0003      	movs	r3, r0
    1a3e:	2b01      	cmp	r3, #1
    1a40:	d002      	beq.n	1a48 <I2cFreeMutex+0x24>
        error = ERROR_NOT_INITIALIZED;  // We could not return the mutex! We must not have it!
    1a42:	2314      	movs	r3, #20
    1a44:	425b      	negs	r3, r3
    1a46:	607b      	str	r3, [r7, #4]
    }
    return error;
    1a48:	687b      	ldr	r3, [r7, #4]
}
    1a4a:	0018      	movs	r0, r3
    1a4c:	46bd      	mov	sp, r7
    1a4e:	b003      	add	sp, #12
    1a50:	bd90      	pop	{r4, r7, pc}
    1a52:	46c0      	nop			; (mov r8, r8)
    1a54:	20004204 	.word	0x20004204
    1a58:	000075e1 	.word	0x000075e1

00001a5c <I2cGetMutex>:
 * @param[in]   waitTime Time to wait for the mutex to be freed.
 * @return      Returns (0) if the bus is ready, (1) if it is busy.
 * @note
 */
int32_t I2cGetMutex(TickType_t waitTime)
{
    1a5c:	b580      	push	{r7, lr}
    1a5e:	b084      	sub	sp, #16
    1a60:	af00      	add	r7, sp, #0
    1a62:	6078      	str	r0, [r7, #4]
    int32_t error = ERROR_NONE;
    1a64:	2300      	movs	r3, #0
    1a66:	60fb      	str	r3, [r7, #12]
    if (xSemaphoreTake(sensorI2cMutexHandle, waitTime) != pdTRUE) {
    1a68:	4b08      	ldr	r3, [pc, #32]	; (1a8c <I2cGetMutex+0x30>)
    1a6a:	681b      	ldr	r3, [r3, #0]
    1a6c:	687a      	ldr	r2, [r7, #4]
    1a6e:	0011      	movs	r1, r2
    1a70:	0018      	movs	r0, r3
    1a72:	4b07      	ldr	r3, [pc, #28]	; (1a90 <I2cGetMutex+0x34>)
    1a74:	4798      	blx	r3
    1a76:	0003      	movs	r3, r0
    1a78:	2b01      	cmp	r3, #1
    1a7a:	d002      	beq.n	1a82 <I2cGetMutex+0x26>
        error = ERROR_NOT_READY;
    1a7c:	231d      	movs	r3, #29
    1a7e:	425b      	negs	r3, r3
    1a80:	60fb      	str	r3, [r7, #12]
    }
    return error;
    1a82:	68fb      	ldr	r3, [r7, #12]
}
    1a84:	0018      	movs	r0, r3
    1a86:	46bd      	mov	sp, r7
    1a88:	b004      	add	sp, #16
    1a8a:	bd80      	pop	{r7, pc}
    1a8c:	20004204 	.word	0x20004204
    1a90:	000082f1 	.word	0x000082f1

00001a94 <I2cGetSemaphoreHandle>:

static int32_t I2cGetSemaphoreHandle(SemaphoreHandle_t *handle)
{
    1a94:	b580      	push	{r7, lr}
    1a96:	b084      	sub	sp, #16
    1a98:	af00      	add	r7, sp, #0
    1a9a:	6078      	str	r0, [r7, #4]
    int32_t error = ERROR_NONE;
    1a9c:	2300      	movs	r3, #0
    1a9e:	60fb      	str	r3, [r7, #12]
    *handle = sensorI2cSemaphoreHandle;
    1aa0:	4b04      	ldr	r3, [pc, #16]	; (1ab4 <I2cGetSemaphoreHandle+0x20>)
    1aa2:	681a      	ldr	r2, [r3, #0]
    1aa4:	687b      	ldr	r3, [r7, #4]
    1aa6:	601a      	str	r2, [r3, #0]
    return error;
    1aa8:	68fb      	ldr	r3, [r7, #12]
}
    1aaa:	0018      	movs	r0, r3
    1aac:	46bd      	mov	sp, r7
    1aae:	b004      	add	sp, #16
    1ab0:	bd80      	pop	{r7, pc}
    1ab2:	46c0      	nop			; (mov r8, r8)
    1ab4:	20004230 	.word	0x20004230

00001ab8 <I2cGetTaskErrorStatus>:
 *the I2C data structure).
 * @return      Returns an error message in case of error. See ErrCodes.h
 * @note
 */
static uint8_t I2cGetTaskErrorStatus(void)
{
    1ab8:	b580      	push	{r7, lr}
    1aba:	af00      	add	r7, sp, #0
    return sensorTransmitError;
    1abc:	4b02      	ldr	r3, [pc, #8]	; (1ac8 <I2cGetTaskErrorStatus+0x10>)
    1abe:	781b      	ldrb	r3, [r3, #0]
}
    1ac0:	0018      	movs	r0, r3
    1ac2:	46bd      	mov	sp, r7
    1ac4:	bd80      	pop	{r7, pc}
    1ac6:	46c0      	nop			; (mov r8, r8)
    1ac8:	20000470 	.word	0x20000470

00001acc <I2cSetTaskErrorStatus>:
 * @param[in]   value Value to which to set the error flag to.
 * @return      Returns an error message in case of error. See ErrCodes.h
 * @note
 */
static void I2cSetTaskErrorStatus(uint8_t value)
{
    1acc:	b580      	push	{r7, lr}
    1ace:	b082      	sub	sp, #8
    1ad0:	af00      	add	r7, sp, #0
    1ad2:	0002      	movs	r2, r0
    1ad4:	1dfb      	adds	r3, r7, #7
    1ad6:	701a      	strb	r2, [r3, #0]
    sensorTransmitError = value;
    1ad8:	4b03      	ldr	r3, [pc, #12]	; (1ae8 <I2cSetTaskErrorStatus+0x1c>)
    1ada:	1dfa      	adds	r2, r7, #7
    1adc:	7812      	ldrb	r2, [r2, #0]
    1ade:	701a      	strb	r2, [r3, #0]
}
    1ae0:	46c0      	nop			; (mov r8, r8)
    1ae2:	46bd      	mov	sp, r7
    1ae4:	b002      	add	sp, #8
    1ae6:	bd80      	pop	{r7, pc}
    1ae8:	20000470 	.word	0x20000470

00001aec <I2cWriteDataWait>:
  * @param[in]   xMaxBlockTime Maximum time for the thread to wait until the I2C mutex is free.
  * @return      Returns an error message in case of error.
  * @note
  */
int32_t I2cWriteDataWait(I2C_Data *data, const TickType_t xMaxBlockTime)
{
    1aec:	b580      	push	{r7, lr}
    1aee:	b084      	sub	sp, #16
    1af0:	af00      	add	r7, sp, #0
    1af2:	6078      	str	r0, [r7, #4]
    1af4:	6039      	str	r1, [r7, #0]
    int32_t error = ERROR_NONE;
    1af6:	2300      	movs	r3, #0
    1af8:	60fb      	str	r3, [r7, #12]
    SemaphoreHandle_t semHandle = NULL;
    1afa:	2300      	movs	r3, #0
    1afc:	60bb      	str	r3, [r7, #8]

    //---0. Get Mutex
    error = I2cGetMutex(WAIT_I2C_LINE_MS);
    1afe:	2396      	movs	r3, #150	; 0x96
    1b00:	005b      	lsls	r3, r3, #1
    1b02:	0018      	movs	r0, r3
    1b04:	4b28      	ldr	r3, [pc, #160]	; (1ba8 <I2cWriteDataWait+0xbc>)
    1b06:	4798      	blx	r3
    1b08:	0003      	movs	r3, r0
    1b0a:	60fb      	str	r3, [r7, #12]
    if (ERROR_NONE != error) goto exit;
    1b0c:	68fb      	ldr	r3, [r7, #12]
    1b0e:	2b00      	cmp	r3, #0
    1b10:	d138      	bne.n	1b84 <I2cWriteDataWait+0x98>

    //---1. Get Semaphore Handle
    error = I2cGetSemaphoreHandle(&semHandle);
    1b12:	2308      	movs	r3, #8
    1b14:	18fb      	adds	r3, r7, r3
    1b16:	0018      	movs	r0, r3
    1b18:	4b24      	ldr	r3, [pc, #144]	; (1bac <I2cWriteDataWait+0xc0>)
    1b1a:	4798      	blx	r3
    1b1c:	0003      	movs	r3, r0
    1b1e:	60fb      	str	r3, [r7, #12]
    if (ERROR_NONE != error) goto exit;
    1b20:	68fb      	ldr	r3, [r7, #12]
    1b22:	2b00      	cmp	r3, #0
    1b24:	d130      	bne.n	1b88 <I2cWriteDataWait+0x9c>

    //---2. Initiate sending data

    error = I2cWriteData(data);
    1b26:	687b      	ldr	r3, [r7, #4]
    1b28:	0018      	movs	r0, r3
    1b2a:	4b21      	ldr	r3, [pc, #132]	; (1bb0 <I2cWriteDataWait+0xc4>)
    1b2c:	4798      	blx	r3
    1b2e:	0003      	movs	r3, r0
    1b30:	60fb      	str	r3, [r7, #12]
    if (ERROR_NONE != error) {
    1b32:	68fb      	ldr	r3, [r7, #12]
    1b34:	2b00      	cmp	r3, #0
    1b36:	d12a      	bne.n	1b8e <I2cWriteDataWait+0xa2>
        goto exitError0;
    }

    //---2. Wait for binary semaphore to tell us that we are done!
    if (xSemaphoreTake(semHandle, xMaxBlockTime) == pdTRUE) {
    1b38:	68bb      	ldr	r3, [r7, #8]
    1b3a:	683a      	ldr	r2, [r7, #0]
    1b3c:	0011      	movs	r1, r2
    1b3e:	0018      	movs	r0, r3
    1b40:	4b1c      	ldr	r3, [pc, #112]	; (1bb4 <I2cWriteDataWait+0xc8>)
    1b42:	4798      	blx	r3
    1b44:	0003      	movs	r3, r0
    1b46:	2b01      	cmp	r3, #1
    1b48:	d111      	bne.n	1b6e <I2cWriteDataWait+0x82>
        /* The transmission ended as expected. We now delay until the I2C sensor is finished */
        if (I2cGetTaskErrorStatus()) {
    1b4a:	4b1b      	ldr	r3, [pc, #108]	; (1bb8 <I2cWriteDataWait+0xcc>)
    1b4c:	4798      	blx	r3
    1b4e:	1e03      	subs	r3, r0, #0
    1b50:	d011      	beq.n	1b76 <I2cWriteDataWait+0x8a>
            I2cSetTaskErrorStatus(false);
    1b52:	2000      	movs	r0, #0
    1b54:	4b19      	ldr	r3, [pc, #100]	; (1bbc <I2cWriteDataWait+0xd0>)
    1b56:	4798      	blx	r3
            if (error != ERROR_NONE) {
    1b58:	68fb      	ldr	r3, [r7, #12]
    1b5a:	2b00      	cmp	r3, #0
    1b5c:	d003      	beq.n	1b66 <I2cWriteDataWait+0x7a>
                error = ERROR_I2C_HANG_RESET;
    1b5e:	2321      	movs	r3, #33	; 0x21
    1b60:	425b      	negs	r3, r3
    1b62:	60fb      	str	r3, [r7, #12]
            } else {
                error = ERROR_ABORTED;
            }
            goto exitError0;
    1b64:	e014      	b.n	1b90 <I2cWriteDataWait+0xa4>
                error = ERROR_ABORTED;
    1b66:	2303      	movs	r3, #3
    1b68:	425b      	negs	r3, r3
    1b6a:	60fb      	str	r3, [r7, #12]
            goto exitError0;
    1b6c:	e010      	b.n	1b90 <I2cWriteDataWait+0xa4>
        }
    } else {
        /* The call to ulTaskNotifyTake() timed out. */
        error = ERR_TIMEOUT;
    1b6e:	2303      	movs	r3, #3
    1b70:	425b      	negs	r3, r3
    1b72:	60fb      	str	r3, [r7, #12]
        goto exitError0;
    1b74:	e00c      	b.n	1b90 <I2cWriteDataWait+0xa4>
    }

    //---8. Release Mutex
    error |= I2cFreeMutex();
    1b76:	4b12      	ldr	r3, [pc, #72]	; (1bc0 <I2cWriteDataWait+0xd4>)
    1b78:	4798      	blx	r3
    1b7a:	0002      	movs	r2, r0
    1b7c:	68fb      	ldr	r3, [r7, #12]
    1b7e:	4313      	orrs	r3, r2
    1b80:	60fb      	str	r3, [r7, #12]
    1b82:	e002      	b.n	1b8a <I2cWriteDataWait+0x9e>
    if (ERROR_NONE != error) goto exit;
    1b84:	46c0      	nop			; (mov r8, r8)
    1b86:	e000      	b.n	1b8a <I2cWriteDataWait+0x9e>
    if (ERROR_NONE != error) goto exit;
    1b88:	46c0      	nop			; (mov r8, r8)
// xSemaphoreGive(semHandle);
exit:
    return error;
    1b8a:	68fb      	ldr	r3, [r7, #12]
    1b8c:	e007      	b.n	1b9e <I2cWriteDataWait+0xb2>
        goto exitError0;
    1b8e:	46c0      	nop			; (mov r8, r8)

exitError0:
    error |= I2cFreeMutex();
    1b90:	4b0b      	ldr	r3, [pc, #44]	; (1bc0 <I2cWriteDataWait+0xd4>)
    1b92:	4798      	blx	r3
    1b94:	0002      	movs	r2, r0
    1b96:	68fb      	ldr	r3, [r7, #12]
    1b98:	4313      	orrs	r3, r2
    1b9a:	60fb      	str	r3, [r7, #12]
    // xSemaphoreGive(semHandle);
    return error;
    1b9c:	68fb      	ldr	r3, [r7, #12]
}
    1b9e:	0018      	movs	r0, r3
    1ba0:	46bd      	mov	sp, r7
    1ba2:	b004      	add	sp, #16
    1ba4:	bd80      	pop	{r7, pc}
    1ba6:	46c0      	nop			; (mov r8, r8)
    1ba8:	00001a5d 	.word	0x00001a5d
    1bac:	00001a95 	.word	0x00001a95
    1bb0:	00001935 	.word	0x00001935
    1bb4:	000082f1 	.word	0x000082f1
    1bb8:	00001ab9 	.word	0x00001ab9
    1bbc:	00001acd 	.word	0x00001acd
    1bc0:	00001a25 	.word	0x00001a25

00001bc4 <I2cReadDataWait>:
  * @param[in]   xMaxBlockTime Maximum time for the thread to wait until the I2C mutex is free.
  * @return      Returns an error message in case of error. See ErrCodes.h
  * @note        THIS IS THE FREERTOS VERSION! DO NOT Declare #define USE_FREERTOS if you wish to use the baremetal version!
  */
int32_t I2cReadDataWait(I2C_Data *data, const TickType_t delay, const TickType_t xMaxBlockTime)
{
    1bc4:	b580      	push	{r7, lr}
    1bc6:	b086      	sub	sp, #24
    1bc8:	af00      	add	r7, sp, #0
    1bca:	60f8      	str	r0, [r7, #12]
    1bcc:	60b9      	str	r1, [r7, #8]
    1bce:	607a      	str	r2, [r7, #4]
    int32_t error = ERROR_NONE;
    1bd0:	2300      	movs	r3, #0
    1bd2:	617b      	str	r3, [r7, #20]
    SemaphoreHandle_t semHandle = NULL;
    1bd4:	2300      	movs	r3, #0
    1bd6:	613b      	str	r3, [r7, #16]

    //---0. Get Mutex
    error = I2cGetMutex(WAIT_I2C_LINE_MS);
    1bd8:	2396      	movs	r3, #150	; 0x96
    1bda:	005b      	lsls	r3, r3, #1
    1bdc:	0018      	movs	r0, r3
    1bde:	4b36      	ldr	r3, [pc, #216]	; (1cb8 <I2cReadDataWait+0xf4>)
    1be0:	4798      	blx	r3
    1be2:	0003      	movs	r3, r0
    1be4:	617b      	str	r3, [r7, #20]
    if (ERROR_NONE != error) goto exit;
    1be6:	697b      	ldr	r3, [r7, #20]
    1be8:	2b00      	cmp	r3, #0
    1bea:	d155      	bne.n	1c98 <I2cReadDataWait+0xd4>

    //---1. Get Semaphore Handle
    error = I2cGetSemaphoreHandle(&semHandle);
    1bec:	2310      	movs	r3, #16
    1bee:	18fb      	adds	r3, r7, r3
    1bf0:	0018      	movs	r0, r3
    1bf2:	4b32      	ldr	r3, [pc, #200]	; (1cbc <I2cReadDataWait+0xf8>)
    1bf4:	4798      	blx	r3
    1bf6:	0003      	movs	r3, r0
    1bf8:	617b      	str	r3, [r7, #20]
    if (ERROR_NONE != error) goto exit;
    1bfa:	697b      	ldr	r3, [r7, #20]
    1bfc:	2b00      	cmp	r3, #0
    1bfe:	d14d      	bne.n	1c9c <I2cReadDataWait+0xd8>

    //---2. Initiate sending data

    error = I2cWriteData(data);
    1c00:	68fb      	ldr	r3, [r7, #12]
    1c02:	0018      	movs	r0, r3
    1c04:	4b2e      	ldr	r3, [pc, #184]	; (1cc0 <I2cReadDataWait+0xfc>)
    1c06:	4798      	blx	r3
    1c08:	0003      	movs	r3, r0
    1c0a:	617b      	str	r3, [r7, #20]
    if (ERROR_NONE != error) {
    1c0c:	697b      	ldr	r3, [r7, #20]
    1c0e:	2b00      	cmp	r3, #0
    1c10:	d147      	bne.n	1ca2 <I2cReadDataWait+0xde>
        goto exitError0;
    }

    //---2. Wait for binary semaphore to tell us that we are done!
    if (xSemaphoreTake(semHandle, xMaxBlockTime) == pdTRUE) {
    1c12:	693b      	ldr	r3, [r7, #16]
    1c14:	687a      	ldr	r2, [r7, #4]
    1c16:	0011      	movs	r1, r2
    1c18:	0018      	movs	r0, r3
    1c1a:	4b2a      	ldr	r3, [pc, #168]	; (1cc4 <I2cReadDataWait+0x100>)
    1c1c:	4798      	blx	r3
    1c1e:	0003      	movs	r3, r0
    1c20:	2b01      	cmp	r3, #1
    1c22:	d118      	bne.n	1c56 <I2cReadDataWait+0x92>
        /* The transmission ended as expected. We now delay until the I2C sensor is finished */
        if (I2cGetTaskErrorStatus()) {
    1c24:	4b28      	ldr	r3, [pc, #160]	; (1cc8 <I2cReadDataWait+0x104>)
    1c26:	4798      	blx	r3
    1c28:	1e03      	subs	r3, r0, #0
    1c2a:	d006      	beq.n	1c3a <I2cReadDataWait+0x76>
            I2cSetTaskErrorStatus(false);
    1c2c:	2000      	movs	r0, #0
    1c2e:	4b27      	ldr	r3, [pc, #156]	; (1ccc <I2cReadDataWait+0x108>)
    1c30:	4798      	blx	r3
            error = ERROR_ABORTED;
    1c32:	2303      	movs	r3, #3
    1c34:	425b      	negs	r3, r3
    1c36:	617b      	str	r3, [r7, #20]
            goto exitError0;
    1c38:	e034      	b.n	1ca4 <I2cReadDataWait+0xe0>
        }
        vTaskDelay(delay);
    1c3a:	68bb      	ldr	r3, [r7, #8]
    1c3c:	0018      	movs	r0, r3
    1c3e:	4b24      	ldr	r3, [pc, #144]	; (1cd0 <I2cReadDataWait+0x10c>)
    1c40:	4798      	blx	r3
        error = ERR_TIMEOUT;
        goto exitError0;
    }

    //---6. Initiate Read data
    error = I2cReadData(data);
    1c42:	68fb      	ldr	r3, [r7, #12]
    1c44:	0018      	movs	r0, r3
    1c46:	4b23      	ldr	r3, [pc, #140]	; (1cd4 <I2cReadDataWait+0x110>)
    1c48:	4798      	blx	r3
    1c4a:	0003      	movs	r3, r0
    1c4c:	617b      	str	r3, [r7, #20]
    if (ERROR_NONE != error) {
    1c4e:	697b      	ldr	r3, [r7, #20]
    1c50:	2b00      	cmp	r3, #0
    1c52:	d004      	beq.n	1c5e <I2cReadDataWait+0x9a>
        goto exitError0;
    1c54:	e026      	b.n	1ca4 <I2cReadDataWait+0xe0>
        error = ERR_TIMEOUT;
    1c56:	2303      	movs	r3, #3
    1c58:	425b      	negs	r3, r3
    1c5a:	617b      	str	r3, [r7, #20]
        goto exitError0;
    1c5c:	e022      	b.n	1ca4 <I2cReadDataWait+0xe0>
    }
    //---7. Wait for notification
    if (xSemaphoreTake(semHandle, xMaxBlockTime) == pdTRUE) {
    1c5e:	693b      	ldr	r3, [r7, #16]
    1c60:	687a      	ldr	r2, [r7, #4]
    1c62:	0011      	movs	r1, r2
    1c64:	0018      	movs	r0, r3
    1c66:	4b17      	ldr	r3, [pc, #92]	; (1cc4 <I2cReadDataWait+0x100>)
    1c68:	4798      	blx	r3
    1c6a:	0003      	movs	r3, r0
    1c6c:	2b01      	cmp	r3, #1
    1c6e:	d10a      	bne.n	1c86 <I2cReadDataWait+0xc2>
        /* The transmission ended as expected. We now delay until the I2C sensor is finished */
        if (I2cGetTaskErrorStatus()) {
    1c70:	4b15      	ldr	r3, [pc, #84]	; (1cc8 <I2cReadDataWait+0x104>)
    1c72:	4798      	blx	r3
    1c74:	1e03      	subs	r3, r0, #0
    1c76:	d00a      	beq.n	1c8e <I2cReadDataWait+0xca>
            I2cSetTaskErrorStatus(false);
    1c78:	2000      	movs	r0, #0
    1c7a:	4b14      	ldr	r3, [pc, #80]	; (1ccc <I2cReadDataWait+0x108>)
    1c7c:	4798      	blx	r3
            error = ERROR_ABORTED;
    1c7e:	2303      	movs	r3, #3
    1c80:	425b      	negs	r3, r3
    1c82:	617b      	str	r3, [r7, #20]
            goto exitError0;
    1c84:	e00e      	b.n	1ca4 <I2cReadDataWait+0xe0>
        }
    } else {
        /* The call to ulTaskNotifyTake() timed out. */
        error = ERR_TIMEOUT;
    1c86:	2303      	movs	r3, #3
    1c88:	425b      	negs	r3, r3
    1c8a:	617b      	str	r3, [r7, #20]
        goto exitError0;
    1c8c:	e00a      	b.n	1ca4 <I2cReadDataWait+0xe0>
    }

    //---8. Release Mutex
    error = I2cFreeMutex();
    1c8e:	4b12      	ldr	r3, [pc, #72]	; (1cd8 <I2cReadDataWait+0x114>)
    1c90:	4798      	blx	r3
    1c92:	0003      	movs	r3, r0
    1c94:	617b      	str	r3, [r7, #20]
    1c96:	e002      	b.n	1c9e <I2cReadDataWait+0xda>
    if (ERROR_NONE != error) goto exit;
    1c98:	46c0      	nop			; (mov r8, r8)
    1c9a:	e000      	b.n	1c9e <I2cReadDataWait+0xda>
    if (ERROR_NONE != error) goto exit;
    1c9c:	46c0      	nop			; (mov r8, r8)
// xSemaphoreGive(semHandle);
exit:
    return error;
    1c9e:	697b      	ldr	r3, [r7, #20]
    1ca0:	e005      	b.n	1cae <I2cReadDataWait+0xea>
        goto exitError0;
    1ca2:	46c0      	nop			; (mov r8, r8)

exitError0:
    error = I2cFreeMutex();
    1ca4:	4b0c      	ldr	r3, [pc, #48]	; (1cd8 <I2cReadDataWait+0x114>)
    1ca6:	4798      	blx	r3
    1ca8:	0003      	movs	r3, r0
    1caa:	617b      	str	r3, [r7, #20]
    // xSemaphoreGive(semHandle);
    return error;
    1cac:	697b      	ldr	r3, [r7, #20]
}
    1cae:	0018      	movs	r0, r3
    1cb0:	46bd      	mov	sp, r7
    1cb2:	b006      	add	sp, #24
    1cb4:	bd80      	pop	{r7, pc}
    1cb6:	46c0      	nop			; (mov r8, r8)
    1cb8:	00001a5d 	.word	0x00001a5d
    1cbc:	00001a95 	.word	0x00001a95
    1cc0:	00001935 	.word	0x00001935
    1cc4:	000082f1 	.word	0x000082f1
    1cc8:	00001ab9 	.word	0x00001ab9
    1ccc:	00001acd 	.word	0x00001acd
    1cd0:	00009045 	.word	0x00009045
    1cd4:	000019ad 	.word	0x000019ad
    1cd8:	00001a25 	.word	0x00001a25

00001cdc <lsm6dso_read_reg>:
  *
  */
int32_t lsm6dso_read_reg(stmdev_ctx_t *ctx, uint8_t reg,
                         uint8_t *data,
                         uint16_t len)
{
    1cdc:	b5b0      	push	{r4, r5, r7, lr}
    1cde:	b086      	sub	sp, #24
    1ce0:	af00      	add	r7, sp, #0
    1ce2:	60f8      	str	r0, [r7, #12]
    1ce4:	0008      	movs	r0, r1
    1ce6:	607a      	str	r2, [r7, #4]
    1ce8:	0019      	movs	r1, r3
    1cea:	230b      	movs	r3, #11
    1cec:	18fb      	adds	r3, r7, r3
    1cee:	1c02      	adds	r2, r0, #0
    1cf0:	701a      	strb	r2, [r3, #0]
    1cf2:	2308      	movs	r3, #8
    1cf4:	18fb      	adds	r3, r7, r3
    1cf6:	1c0a      	adds	r2, r1, #0
    1cf8:	801a      	strh	r2, [r3, #0]
  int32_t ret;

  ret = ctx->read_reg(ctx->handle, reg, data, len);
    1cfa:	68fb      	ldr	r3, [r7, #12]
    1cfc:	685c      	ldr	r4, [r3, #4]
    1cfe:	68fb      	ldr	r3, [r7, #12]
    1d00:	6898      	ldr	r0, [r3, #8]
    1d02:	2308      	movs	r3, #8
    1d04:	18fb      	adds	r3, r7, r3
    1d06:	881d      	ldrh	r5, [r3, #0]
    1d08:	687a      	ldr	r2, [r7, #4]
    1d0a:	230b      	movs	r3, #11
    1d0c:	18fb      	adds	r3, r7, r3
    1d0e:	7819      	ldrb	r1, [r3, #0]
    1d10:	002b      	movs	r3, r5
    1d12:	47a0      	blx	r4
    1d14:	0003      	movs	r3, r0
    1d16:	617b      	str	r3, [r7, #20]

  return ret;
    1d18:	697b      	ldr	r3, [r7, #20]
}
    1d1a:	0018      	movs	r0, r3
    1d1c:	46bd      	mov	sp, r7
    1d1e:	b006      	add	sp, #24
    1d20:	bdb0      	pop	{r4, r5, r7, pc}

00001d22 <lsm6dso_write_reg>:
  *
  */
int32_t lsm6dso_write_reg(stmdev_ctx_t *ctx, uint8_t reg,
                          uint8_t *data,
                          uint16_t len)
{
    1d22:	b5b0      	push	{r4, r5, r7, lr}
    1d24:	b086      	sub	sp, #24
    1d26:	af00      	add	r7, sp, #0
    1d28:	60f8      	str	r0, [r7, #12]
    1d2a:	0008      	movs	r0, r1
    1d2c:	607a      	str	r2, [r7, #4]
    1d2e:	0019      	movs	r1, r3
    1d30:	230b      	movs	r3, #11
    1d32:	18fb      	adds	r3, r7, r3
    1d34:	1c02      	adds	r2, r0, #0
    1d36:	701a      	strb	r2, [r3, #0]
    1d38:	2308      	movs	r3, #8
    1d3a:	18fb      	adds	r3, r7, r3
    1d3c:	1c0a      	adds	r2, r1, #0
    1d3e:	801a      	strh	r2, [r3, #0]
  int32_t ret;

  ret = ctx->write_reg(ctx->handle, reg, data, len);
    1d40:	68fb      	ldr	r3, [r7, #12]
    1d42:	681c      	ldr	r4, [r3, #0]
    1d44:	68fb      	ldr	r3, [r7, #12]
    1d46:	6898      	ldr	r0, [r3, #8]
    1d48:	2308      	movs	r3, #8
    1d4a:	18fb      	adds	r3, r7, r3
    1d4c:	881d      	ldrh	r5, [r3, #0]
    1d4e:	687a      	ldr	r2, [r7, #4]
    1d50:	230b      	movs	r3, #11
    1d52:	18fb      	adds	r3, r7, r3
    1d54:	7819      	ldrb	r1, [r3, #0]
    1d56:	002b      	movs	r3, r5
    1d58:	47a0      	blx	r4
    1d5a:	0003      	movs	r3, r0
    1d5c:	617b      	str	r3, [r7, #20]

  return ret;
    1d5e:	697b      	ldr	r3, [r7, #20]
}
    1d60:	0018      	movs	r0, r3
    1d62:	46bd      	mov	sp, r7
    1d64:	b006      	add	sp, #24
    1d66:	bdb0      	pop	{r4, r5, r7, pc}

00001d68 <lsm6dso_from_fs2_to_mg>:
  * @brief     These functions convert raw-data into engineering units.
  * @{
  *
  */
float_t lsm6dso_from_fs2_to_mg(int16_t lsb)
{
    1d68:	b580      	push	{r7, lr}
    1d6a:	b082      	sub	sp, #8
    1d6c:	af00      	add	r7, sp, #0
    1d6e:	0002      	movs	r2, r0
    1d70:	1dbb      	adds	r3, r7, #6
    1d72:	801a      	strh	r2, [r3, #0]
  return ((float_t)lsb) * 0.061f;
    1d74:	1dbb      	adds	r3, r7, #6
    1d76:	2200      	movs	r2, #0
    1d78:	5e9a      	ldrsh	r2, [r3, r2]
    1d7a:	4b06      	ldr	r3, [pc, #24]	; (1d94 <lsm6dso_from_fs2_to_mg+0x2c>)
    1d7c:	0010      	movs	r0, r2
    1d7e:	4798      	blx	r3
    1d80:	1c02      	adds	r2, r0, #0
    1d82:	4b05      	ldr	r3, [pc, #20]	; (1d98 <lsm6dso_from_fs2_to_mg+0x30>)
    1d84:	4905      	ldr	r1, [pc, #20]	; (1d9c <lsm6dso_from_fs2_to_mg+0x34>)
    1d86:	1c10      	adds	r0, r2, #0
    1d88:	4798      	blx	r3
    1d8a:	1c03      	adds	r3, r0, #0
}
    1d8c:	1c18      	adds	r0, r3, #0
    1d8e:	46bd      	mov	sp, r7
    1d90:	b002      	add	sp, #8
    1d92:	bd80      	pop	{r7, pc}
    1d94:	0001fe01 	.word	0x0001fe01
    1d98:	0001fb81 	.word	0x0001fb81
    1d9c:	3d79db23 	.word	0x3d79db23

00001da0 <lsm6dso_xl_full_scale_set>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_xl_full_scale_set(stmdev_ctx_t *ctx,
                                  lsm6dso_fs_xl_t val)
{
    1da0:	b590      	push	{r4, r7, lr}
    1da2:	b085      	sub	sp, #20
    1da4:	af00      	add	r7, sp, #0
    1da6:	6078      	str	r0, [r7, #4]
    1da8:	000a      	movs	r2, r1
    1daa:	1cfb      	adds	r3, r7, #3
    1dac:	701a      	strb	r2, [r3, #0]
  lsm6dso_ctrl1_xl_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL1_XL, (uint8_t *)&reg, 1);
    1dae:	2308      	movs	r3, #8
    1db0:	18fa      	adds	r2, r7, r3
    1db2:	6878      	ldr	r0, [r7, #4]
    1db4:	2301      	movs	r3, #1
    1db6:	2110      	movs	r1, #16
    1db8:	4c12      	ldr	r4, [pc, #72]	; (1e04 <lsm6dso_xl_full_scale_set+0x64>)
    1dba:	47a0      	blx	r4
    1dbc:	0003      	movs	r3, r0
    1dbe:	60fb      	str	r3, [r7, #12]

  if (ret == 0)
    1dc0:	68fb      	ldr	r3, [r7, #12]
    1dc2:	2b00      	cmp	r3, #0
    1dc4:	d119      	bne.n	1dfa <lsm6dso_xl_full_scale_set+0x5a>
  {
    reg.fs_xl = (uint8_t) val;
    1dc6:	1cfb      	adds	r3, r7, #3
    1dc8:	781b      	ldrb	r3, [r3, #0]
    1dca:	2203      	movs	r2, #3
    1dcc:	4013      	ands	r3, r2
    1dce:	b2da      	uxtb	r2, r3
    1dd0:	2308      	movs	r3, #8
    1dd2:	18fb      	adds	r3, r7, r3
    1dd4:	2103      	movs	r1, #3
    1dd6:	400a      	ands	r2, r1
    1dd8:	0090      	lsls	r0, r2, #2
    1dda:	781a      	ldrb	r2, [r3, #0]
    1ddc:	210c      	movs	r1, #12
    1dde:	438a      	bics	r2, r1
    1de0:	1c11      	adds	r1, r2, #0
    1de2:	1c02      	adds	r2, r0, #0
    1de4:	430a      	orrs	r2, r1
    1de6:	701a      	strb	r2, [r3, #0]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_CTRL1_XL, (uint8_t *)&reg, 1);
    1de8:	2308      	movs	r3, #8
    1dea:	18fa      	adds	r2, r7, r3
    1dec:	6878      	ldr	r0, [r7, #4]
    1dee:	2301      	movs	r3, #1
    1df0:	2110      	movs	r1, #16
    1df2:	4c05      	ldr	r4, [pc, #20]	; (1e08 <lsm6dso_xl_full_scale_set+0x68>)
    1df4:	47a0      	blx	r4
    1df6:	0003      	movs	r3, r0
    1df8:	60fb      	str	r3, [r7, #12]
  }

  return ret;
    1dfa:	68fb      	ldr	r3, [r7, #12]
}
    1dfc:	0018      	movs	r0, r3
    1dfe:	46bd      	mov	sp, r7
    1e00:	b005      	add	sp, #20
    1e02:	bd90      	pop	{r4, r7, pc}
    1e04:	00001cdd 	.word	0x00001cdd
    1e08:	00001d23 	.word	0x00001d23

00001e0c <lsm6dso_xl_data_rate_set>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_xl_data_rate_set(stmdev_ctx_t *ctx,
                                 lsm6dso_odr_xl_t val)
{
    1e0c:	b590      	push	{r4, r7, lr}
    1e0e:	b087      	sub	sp, #28
    1e10:	af00      	add	r7, sp, #0
    1e12:	6078      	str	r0, [r7, #4]
    1e14:	000a      	movs	r2, r1
    1e16:	1cfb      	adds	r3, r7, #3
    1e18:	701a      	strb	r2, [r3, #0]
  lsm6dso_odr_xl_t odr_xl =  val;
    1e1a:	2317      	movs	r3, #23
    1e1c:	18fb      	adds	r3, r7, r3
    1e1e:	1cfa      	adds	r2, r7, #3
    1e20:	7812      	ldrb	r2, [r2, #0]
    1e22:	701a      	strb	r2, [r3, #0]
  lsm6dso_fsm_odr_t fsm_odr;
  lsm6dso_ctrl1_xl_t reg;
  int32_t ret;

  /* Check the Finite State Machine data rate constraints */
  ret =  lsm6dso_fsm_enable_get(ctx, &fsm_enable);
    1e24:	230c      	movs	r3, #12
    1e26:	18fa      	adds	r2, r7, r3
    1e28:	687b      	ldr	r3, [r7, #4]
    1e2a:	0011      	movs	r1, r2
    1e2c:	0018      	movs	r0, r3
    1e2e:	4ba4      	ldr	r3, [pc, #656]	; (20c0 <STACK_SIZE+0xc0>)
    1e30:	4798      	blx	r3
    1e32:	0003      	movs	r3, r0
    1e34:	613b      	str	r3, [r7, #16]

  if (ret == 0)
    1e36:	693b      	ldr	r3, [r7, #16]
    1e38:	2b00      	cmp	r3, #0
    1e3a:	d000      	beq.n	1e3e <lsm6dso_xl_data_rate_set+0x32>
    1e3c:	e113      	b.n	2066 <STACK_SIZE+0x66>
  {
    if ((fsm_enable.fsm_enable_a.fsm1_en  |
    1e3e:	230c      	movs	r3, #12
    1e40:	18fb      	adds	r3, r7, r3
    1e42:	781b      	ldrb	r3, [r3, #0]
    1e44:	07db      	lsls	r3, r3, #31
    1e46:	0fdb      	lsrs	r3, r3, #31
    1e48:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm2_en  |
    1e4a:	230c      	movs	r3, #12
    1e4c:	18fb      	adds	r3, r7, r3
    1e4e:	781b      	ldrb	r3, [r3, #0]
    1e50:	079b      	lsls	r3, r3, #30
    1e52:	0fdb      	lsrs	r3, r3, #31
    1e54:	b2db      	uxtb	r3, r3
    if ((fsm_enable.fsm_enable_a.fsm1_en  |
    1e56:	4313      	orrs	r3, r2
    1e58:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm3_en  |
    1e5a:	230c      	movs	r3, #12
    1e5c:	18fb      	adds	r3, r7, r3
    1e5e:	781b      	ldrb	r3, [r3, #0]
    1e60:	075b      	lsls	r3, r3, #29
    1e62:	0fdb      	lsrs	r3, r3, #31
    1e64:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm2_en  |
    1e66:	4313      	orrs	r3, r2
    1e68:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm4_en  |
    1e6a:	230c      	movs	r3, #12
    1e6c:	18fb      	adds	r3, r7, r3
    1e6e:	781b      	ldrb	r3, [r3, #0]
    1e70:	071b      	lsls	r3, r3, #28
    1e72:	0fdb      	lsrs	r3, r3, #31
    1e74:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm3_en  |
    1e76:	4313      	orrs	r3, r2
    1e78:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm5_en  |
    1e7a:	230c      	movs	r3, #12
    1e7c:	18fb      	adds	r3, r7, r3
    1e7e:	781b      	ldrb	r3, [r3, #0]
    1e80:	06db      	lsls	r3, r3, #27
    1e82:	0fdb      	lsrs	r3, r3, #31
    1e84:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm4_en  |
    1e86:	4313      	orrs	r3, r2
    1e88:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm6_en  |
    1e8a:	230c      	movs	r3, #12
    1e8c:	18fb      	adds	r3, r7, r3
    1e8e:	781b      	ldrb	r3, [r3, #0]
    1e90:	069b      	lsls	r3, r3, #26
    1e92:	0fdb      	lsrs	r3, r3, #31
    1e94:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm5_en  |
    1e96:	4313      	orrs	r3, r2
    1e98:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm7_en  |
    1e9a:	230c      	movs	r3, #12
    1e9c:	18fb      	adds	r3, r7, r3
    1e9e:	781b      	ldrb	r3, [r3, #0]
    1ea0:	065b      	lsls	r3, r3, #25
    1ea2:	0fdb      	lsrs	r3, r3, #31
    1ea4:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm6_en  |
    1ea6:	4313      	orrs	r3, r2
    1ea8:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm8_en  |
    1eaa:	230c      	movs	r3, #12
    1eac:	18fb      	adds	r3, r7, r3
    1eae:	781b      	ldrb	r3, [r3, #0]
    1eb0:	061b      	lsls	r3, r3, #24
    1eb2:	0fdb      	lsrs	r3, r3, #31
    1eb4:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm7_en  |
    1eb6:	4313      	orrs	r3, r2
    1eb8:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm9_en  |
    1eba:	230c      	movs	r3, #12
    1ebc:	18fb      	adds	r3, r7, r3
    1ebe:	785b      	ldrb	r3, [r3, #1]
    1ec0:	07db      	lsls	r3, r3, #31
    1ec2:	0fdb      	lsrs	r3, r3, #31
    1ec4:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm8_en  |
    1ec6:	4313      	orrs	r3, r2
    1ec8:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm10_en |
    1eca:	230c      	movs	r3, #12
    1ecc:	18fb      	adds	r3, r7, r3
    1ece:	785b      	ldrb	r3, [r3, #1]
    1ed0:	079b      	lsls	r3, r3, #30
    1ed2:	0fdb      	lsrs	r3, r3, #31
    1ed4:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm9_en  |
    1ed6:	4313      	orrs	r3, r2
    1ed8:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm11_en |
    1eda:	230c      	movs	r3, #12
    1edc:	18fb      	adds	r3, r7, r3
    1ede:	785b      	ldrb	r3, [r3, #1]
    1ee0:	075b      	lsls	r3, r3, #29
    1ee2:	0fdb      	lsrs	r3, r3, #31
    1ee4:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm10_en |
    1ee6:	4313      	orrs	r3, r2
    1ee8:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm12_en |
    1eea:	230c      	movs	r3, #12
    1eec:	18fb      	adds	r3, r7, r3
    1eee:	785b      	ldrb	r3, [r3, #1]
    1ef0:	071b      	lsls	r3, r3, #28
    1ef2:	0fdb      	lsrs	r3, r3, #31
    1ef4:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm11_en |
    1ef6:	4313      	orrs	r3, r2
    1ef8:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm13_en |
    1efa:	230c      	movs	r3, #12
    1efc:	18fb      	adds	r3, r7, r3
    1efe:	785b      	ldrb	r3, [r3, #1]
    1f00:	06db      	lsls	r3, r3, #27
    1f02:	0fdb      	lsrs	r3, r3, #31
    1f04:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm12_en |
    1f06:	4313      	orrs	r3, r2
    1f08:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm14_en |
    1f0a:	230c      	movs	r3, #12
    1f0c:	18fb      	adds	r3, r7, r3
    1f0e:	785b      	ldrb	r3, [r3, #1]
    1f10:	069b      	lsls	r3, r3, #26
    1f12:	0fdb      	lsrs	r3, r3, #31
    1f14:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm13_en |
    1f16:	4313      	orrs	r3, r2
    1f18:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm15_en |
    1f1a:	230c      	movs	r3, #12
    1f1c:	18fb      	adds	r3, r7, r3
    1f1e:	785b      	ldrb	r3, [r3, #1]
    1f20:	065b      	lsls	r3, r3, #25
    1f22:	0fdb      	lsrs	r3, r3, #31
    1f24:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm14_en |
    1f26:	4313      	orrs	r3, r2
    1f28:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm16_en) == PROPERTY_ENABLE)
    1f2a:	230c      	movs	r3, #12
    1f2c:	18fb      	adds	r3, r7, r3
    1f2e:	785b      	ldrb	r3, [r3, #1]
    1f30:	061b      	lsls	r3, r3, #24
    1f32:	0fdb      	lsrs	r3, r3, #31
    1f34:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm15_en |
    1f36:	4313      	orrs	r3, r2
    1f38:	b2db      	uxtb	r3, r3
    if ((fsm_enable.fsm_enable_a.fsm1_en  |
    1f3a:	2b01      	cmp	r3, #1
    1f3c:	d000      	beq.n	1f40 <lsm6dso_xl_data_rate_set+0x134>
    1f3e:	e092      	b.n	2066 <STACK_SIZE+0x66>
    {
      ret =  lsm6dso_fsm_data_rate_get(ctx, &fsm_odr);
    1f40:	230b      	movs	r3, #11
    1f42:	18fa      	adds	r2, r7, r3
    1f44:	687b      	ldr	r3, [r7, #4]
    1f46:	0011      	movs	r1, r2
    1f48:	0018      	movs	r0, r3
    1f4a:	4b5e      	ldr	r3, [pc, #376]	; (20c4 <STACK_SIZE+0xc4>)
    1f4c:	4798      	blx	r3
    1f4e:	0003      	movs	r3, r0
    1f50:	613b      	str	r3, [r7, #16]

      if (ret == 0)
    1f52:	693b      	ldr	r3, [r7, #16]
    1f54:	2b00      	cmp	r3, #0
    1f56:	d000      	beq.n	1f5a <lsm6dso_xl_data_rate_set+0x14e>
    1f58:	e085      	b.n	2066 <STACK_SIZE+0x66>
      {
        switch (fsm_odr)
    1f5a:	230b      	movs	r3, #11
    1f5c:	18fb      	adds	r3, r7, r3
    1f5e:	781b      	ldrb	r3, [r3, #0]
    1f60:	2b01      	cmp	r3, #1
    1f62:	d017      	beq.n	1f94 <lsm6dso_xl_data_rate_set+0x188>
    1f64:	dc02      	bgt.n	1f6c <lsm6dso_xl_data_rate_set+0x160>
    1f66:	2b00      	cmp	r3, #0
    1f68:	d005      	beq.n	1f76 <lsm6dso_xl_data_rate_set+0x16a>
    1f6a:	e076      	b.n	205a <STACK_SIZE+0x5a>
    1f6c:	2b02      	cmp	r3, #2
    1f6e:	d029      	beq.n	1fc4 <lsm6dso_xl_data_rate_set+0x1b8>
    1f70:	2b03      	cmp	r3, #3
    1f72:	d048      	beq.n	2006 <STACK_SIZE+0x6>
    1f74:	e071      	b.n	205a <STACK_SIZE+0x5a>
        {
          case LSM6DSO_ODR_FSM_12Hz5:
            if (val == LSM6DSO_XL_ODR_OFF)
    1f76:	1cfb      	adds	r3, r7, #3
    1f78:	781b      	ldrb	r3, [r3, #0]
    1f7a:	2b00      	cmp	r3, #0
    1f7c:	d104      	bne.n	1f88 <lsm6dso_xl_data_rate_set+0x17c>
            {
              odr_xl = LSM6DSO_XL_ODR_12Hz5;
    1f7e:	2317      	movs	r3, #23
    1f80:	18fb      	adds	r3, r7, r3
    1f82:	2201      	movs	r2, #1
    1f84:	701a      	strb	r2, [r3, #0]
            else
            {
              odr_xl = val;
            }

            break;
    1f86:	e06e      	b.n	2066 <STACK_SIZE+0x66>
              odr_xl = val;
    1f88:	2317      	movs	r3, #23
    1f8a:	18fb      	adds	r3, r7, r3
    1f8c:	1cfa      	adds	r2, r7, #3
    1f8e:	7812      	ldrb	r2, [r2, #0]
    1f90:	701a      	strb	r2, [r3, #0]
            break;
    1f92:	e068      	b.n	2066 <STACK_SIZE+0x66>

          case LSM6DSO_ODR_FSM_26Hz:
            if (val == LSM6DSO_XL_ODR_OFF)
    1f94:	1cfb      	adds	r3, r7, #3
    1f96:	781b      	ldrb	r3, [r3, #0]
    1f98:	2b00      	cmp	r3, #0
    1f9a:	d104      	bne.n	1fa6 <lsm6dso_xl_data_rate_set+0x19a>
            {
              odr_xl = LSM6DSO_XL_ODR_26Hz;
    1f9c:	2317      	movs	r3, #23
    1f9e:	18fb      	adds	r3, r7, r3
    1fa0:	2202      	movs	r2, #2
    1fa2:	701a      	strb	r2, [r3, #0]
            else
            {
              odr_xl = val;
            }

            break;
    1fa4:	e05f      	b.n	2066 <STACK_SIZE+0x66>
            else if (val == LSM6DSO_XL_ODR_12Hz5)
    1fa6:	1cfb      	adds	r3, r7, #3
    1fa8:	781b      	ldrb	r3, [r3, #0]
    1faa:	2b01      	cmp	r3, #1
    1fac:	d104      	bne.n	1fb8 <lsm6dso_xl_data_rate_set+0x1ac>
              odr_xl = LSM6DSO_XL_ODR_26Hz;
    1fae:	2317      	movs	r3, #23
    1fb0:	18fb      	adds	r3, r7, r3
    1fb2:	2202      	movs	r2, #2
    1fb4:	701a      	strb	r2, [r3, #0]
            break;
    1fb6:	e056      	b.n	2066 <STACK_SIZE+0x66>
              odr_xl = val;
    1fb8:	2317      	movs	r3, #23
    1fba:	18fb      	adds	r3, r7, r3
    1fbc:	1cfa      	adds	r2, r7, #3
    1fbe:	7812      	ldrb	r2, [r2, #0]
    1fc0:	701a      	strb	r2, [r3, #0]
            break;
    1fc2:	e050      	b.n	2066 <STACK_SIZE+0x66>

          case LSM6DSO_ODR_FSM_52Hz:
            if (val == LSM6DSO_XL_ODR_OFF)
    1fc4:	1cfb      	adds	r3, r7, #3
    1fc6:	781b      	ldrb	r3, [r3, #0]
    1fc8:	2b00      	cmp	r3, #0
    1fca:	d104      	bne.n	1fd6 <lsm6dso_xl_data_rate_set+0x1ca>
            {
              odr_xl = LSM6DSO_XL_ODR_52Hz;
    1fcc:	2317      	movs	r3, #23
    1fce:	18fb      	adds	r3, r7, r3
    1fd0:	2203      	movs	r2, #3
    1fd2:	701a      	strb	r2, [r3, #0]
            else
            {
              odr_xl = val;
            }

            break;
    1fd4:	e047      	b.n	2066 <STACK_SIZE+0x66>
            else if (val == LSM6DSO_XL_ODR_12Hz5)
    1fd6:	1cfb      	adds	r3, r7, #3
    1fd8:	781b      	ldrb	r3, [r3, #0]
    1fda:	2b01      	cmp	r3, #1
    1fdc:	d104      	bne.n	1fe8 <lsm6dso_xl_data_rate_set+0x1dc>
              odr_xl = LSM6DSO_XL_ODR_52Hz;
    1fde:	2317      	movs	r3, #23
    1fe0:	18fb      	adds	r3, r7, r3
    1fe2:	2203      	movs	r2, #3
    1fe4:	701a      	strb	r2, [r3, #0]
            break;
    1fe6:	e03e      	b.n	2066 <STACK_SIZE+0x66>
            else if (val == LSM6DSO_XL_ODR_26Hz)
    1fe8:	1cfb      	adds	r3, r7, #3
    1fea:	781b      	ldrb	r3, [r3, #0]
    1fec:	2b02      	cmp	r3, #2
    1fee:	d104      	bne.n	1ffa <lsm6dso_xl_data_rate_set+0x1ee>
              odr_xl = LSM6DSO_XL_ODR_52Hz;
    1ff0:	2317      	movs	r3, #23
    1ff2:	18fb      	adds	r3, r7, r3
    1ff4:	2203      	movs	r2, #3
    1ff6:	701a      	strb	r2, [r3, #0]
            break;
    1ff8:	e035      	b.n	2066 <STACK_SIZE+0x66>
              odr_xl = val;
    1ffa:	2317      	movs	r3, #23
    1ffc:	18fb      	adds	r3, r7, r3
    1ffe:	1cfa      	adds	r2, r7, #3
    2000:	7812      	ldrb	r2, [r2, #0]
    2002:	701a      	strb	r2, [r3, #0]
            break;
    2004:	e02f      	b.n	2066 <STACK_SIZE+0x66>

          case LSM6DSO_ODR_FSM_104Hz:
            if (val == LSM6DSO_XL_ODR_OFF)
    2006:	1cfb      	adds	r3, r7, #3
    2008:	781b      	ldrb	r3, [r3, #0]
    200a:	2b00      	cmp	r3, #0
    200c:	d104      	bne.n	2018 <STACK_SIZE+0x18>
            {
              odr_xl = LSM6DSO_XL_ODR_104Hz;
    200e:	2317      	movs	r3, #23
    2010:	18fb      	adds	r3, r7, r3
    2012:	2204      	movs	r2, #4
    2014:	701a      	strb	r2, [r3, #0]
            else
            {
              odr_xl = val;
            }

            break;
    2016:	e026      	b.n	2066 <STACK_SIZE+0x66>
            else if (val == LSM6DSO_XL_ODR_12Hz5)
    2018:	1cfb      	adds	r3, r7, #3
    201a:	781b      	ldrb	r3, [r3, #0]
    201c:	2b01      	cmp	r3, #1
    201e:	d104      	bne.n	202a <STACK_SIZE+0x2a>
              odr_xl = LSM6DSO_XL_ODR_104Hz;
    2020:	2317      	movs	r3, #23
    2022:	18fb      	adds	r3, r7, r3
    2024:	2204      	movs	r2, #4
    2026:	701a      	strb	r2, [r3, #0]
            break;
    2028:	e01d      	b.n	2066 <STACK_SIZE+0x66>
            else if (val == LSM6DSO_XL_ODR_26Hz)
    202a:	1cfb      	adds	r3, r7, #3
    202c:	781b      	ldrb	r3, [r3, #0]
    202e:	2b02      	cmp	r3, #2
    2030:	d104      	bne.n	203c <STACK_SIZE+0x3c>
              odr_xl = LSM6DSO_XL_ODR_104Hz;
    2032:	2317      	movs	r3, #23
    2034:	18fb      	adds	r3, r7, r3
    2036:	2204      	movs	r2, #4
    2038:	701a      	strb	r2, [r3, #0]
            break;
    203a:	e014      	b.n	2066 <STACK_SIZE+0x66>
            else if (val == LSM6DSO_XL_ODR_52Hz)
    203c:	1cfb      	adds	r3, r7, #3
    203e:	781b      	ldrb	r3, [r3, #0]
    2040:	2b03      	cmp	r3, #3
    2042:	d104      	bne.n	204e <STACK_SIZE+0x4e>
              odr_xl = LSM6DSO_XL_ODR_104Hz;
    2044:	2317      	movs	r3, #23
    2046:	18fb      	adds	r3, r7, r3
    2048:	2204      	movs	r2, #4
    204a:	701a      	strb	r2, [r3, #0]
            break;
    204c:	e00b      	b.n	2066 <STACK_SIZE+0x66>
              odr_xl = val;
    204e:	2317      	movs	r3, #23
    2050:	18fb      	adds	r3, r7, r3
    2052:	1cfa      	adds	r2, r7, #3
    2054:	7812      	ldrb	r2, [r2, #0]
    2056:	701a      	strb	r2, [r3, #0]
            break;
    2058:	e005      	b.n	2066 <STACK_SIZE+0x66>

          default:
            odr_xl = val;
    205a:	2317      	movs	r3, #23
    205c:	18fb      	adds	r3, r7, r3
    205e:	1cfa      	adds	r2, r7, #3
    2060:	7812      	ldrb	r2, [r2, #0]
    2062:	701a      	strb	r2, [r3, #0]
            break;
    2064:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }

  if (ret == 0)
    2066:	693b      	ldr	r3, [r7, #16]
    2068:	2b00      	cmp	r3, #0
    206a:	d108      	bne.n	207e <STACK_SIZE+0x7e>
  {
    ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL1_XL, (uint8_t *)&reg, 1);
    206c:	2308      	movs	r3, #8
    206e:	18fa      	adds	r2, r7, r3
    2070:	6878      	ldr	r0, [r7, #4]
    2072:	2301      	movs	r3, #1
    2074:	2110      	movs	r1, #16
    2076:	4c14      	ldr	r4, [pc, #80]	; (20c8 <STACK_SIZE+0xc8>)
    2078:	47a0      	blx	r4
    207a:	0003      	movs	r3, r0
    207c:	613b      	str	r3, [r7, #16]
  }

  if (ret == 0)
    207e:	693b      	ldr	r3, [r7, #16]
    2080:	2b00      	cmp	r3, #0
    2082:	d118      	bne.n	20b6 <STACK_SIZE+0xb6>
  {
    reg.odr_xl = (uint8_t) odr_xl;
    2084:	2317      	movs	r3, #23
    2086:	18fb      	adds	r3, r7, r3
    2088:	781b      	ldrb	r3, [r3, #0]
    208a:	220f      	movs	r2, #15
    208c:	4013      	ands	r3, r2
    208e:	b2da      	uxtb	r2, r3
    2090:	2308      	movs	r3, #8
    2092:	18fb      	adds	r3, r7, r3
    2094:	0110      	lsls	r0, r2, #4
    2096:	781a      	ldrb	r2, [r3, #0]
    2098:	210f      	movs	r1, #15
    209a:	400a      	ands	r2, r1
    209c:	1c11      	adds	r1, r2, #0
    209e:	1c02      	adds	r2, r0, #0
    20a0:	430a      	orrs	r2, r1
    20a2:	701a      	strb	r2, [r3, #0]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_CTRL1_XL, (uint8_t *)&reg, 1);
    20a4:	2308      	movs	r3, #8
    20a6:	18fa      	adds	r2, r7, r3
    20a8:	6878      	ldr	r0, [r7, #4]
    20aa:	2301      	movs	r3, #1
    20ac:	2110      	movs	r1, #16
    20ae:	4c07      	ldr	r4, [pc, #28]	; (20cc <STACK_SIZE+0xcc>)
    20b0:	47a0      	blx	r4
    20b2:	0003      	movs	r3, r0
    20b4:	613b      	str	r3, [r7, #16]
  }

  return ret;
    20b6:	693b      	ldr	r3, [r7, #16]
}
    20b8:	0018      	movs	r0, r3
    20ba:	46bd      	mov	sp, r7
    20bc:	b007      	add	sp, #28
    20be:	bd90      	pop	{r4, r7, pc}
    20c0:	000028e9 	.word	0x000028e9
    20c4:	0000293d 	.word	0x0000293d
    20c8:	00001cdd 	.word	0x00001cdd
    20cc:	00001d23 	.word	0x00001d23

000020d0 <lsm6dso_gy_full_scale_set>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_gy_full_scale_set(stmdev_ctx_t *ctx,
                                  lsm6dso_fs_g_t val)
{
    20d0:	b590      	push	{r4, r7, lr}
    20d2:	b085      	sub	sp, #20
    20d4:	af00      	add	r7, sp, #0
    20d6:	6078      	str	r0, [r7, #4]
    20d8:	000a      	movs	r2, r1
    20da:	1cfb      	adds	r3, r7, #3
    20dc:	701a      	strb	r2, [r3, #0]
  lsm6dso_ctrl2_g_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL2_G, (uint8_t *)&reg, 1);
    20de:	2308      	movs	r3, #8
    20e0:	18fa      	adds	r2, r7, r3
    20e2:	6878      	ldr	r0, [r7, #4]
    20e4:	2301      	movs	r3, #1
    20e6:	2111      	movs	r1, #17
    20e8:	4c12      	ldr	r4, [pc, #72]	; (2134 <lsm6dso_gy_full_scale_set+0x64>)
    20ea:	47a0      	blx	r4
    20ec:	0003      	movs	r3, r0
    20ee:	60fb      	str	r3, [r7, #12]

  if (ret == 0)
    20f0:	68fb      	ldr	r3, [r7, #12]
    20f2:	2b00      	cmp	r3, #0
    20f4:	d119      	bne.n	212a <lsm6dso_gy_full_scale_set+0x5a>
  {
    reg.fs_g = (uint8_t) val;
    20f6:	1cfb      	adds	r3, r7, #3
    20f8:	781b      	ldrb	r3, [r3, #0]
    20fa:	2207      	movs	r2, #7
    20fc:	4013      	ands	r3, r2
    20fe:	b2da      	uxtb	r2, r3
    2100:	2308      	movs	r3, #8
    2102:	18fb      	adds	r3, r7, r3
    2104:	2107      	movs	r1, #7
    2106:	400a      	ands	r2, r1
    2108:	1890      	adds	r0, r2, r2
    210a:	781a      	ldrb	r2, [r3, #0]
    210c:	210e      	movs	r1, #14
    210e:	438a      	bics	r2, r1
    2110:	1c11      	adds	r1, r2, #0
    2112:	1c02      	adds	r2, r0, #0
    2114:	430a      	orrs	r2, r1
    2116:	701a      	strb	r2, [r3, #0]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_CTRL2_G, (uint8_t *)&reg, 1);
    2118:	2308      	movs	r3, #8
    211a:	18fa      	adds	r2, r7, r3
    211c:	6878      	ldr	r0, [r7, #4]
    211e:	2301      	movs	r3, #1
    2120:	2111      	movs	r1, #17
    2122:	4c05      	ldr	r4, [pc, #20]	; (2138 <lsm6dso_gy_full_scale_set+0x68>)
    2124:	47a0      	blx	r4
    2126:	0003      	movs	r3, r0
    2128:	60fb      	str	r3, [r7, #12]
  }

  return ret;
    212a:	68fb      	ldr	r3, [r7, #12]
}
    212c:	0018      	movs	r0, r3
    212e:	46bd      	mov	sp, r7
    2130:	b005      	add	sp, #20
    2132:	bd90      	pop	{r4, r7, pc}
    2134:	00001cdd 	.word	0x00001cdd
    2138:	00001d23 	.word	0x00001d23

0000213c <lsm6dso_gy_data_rate_set>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_gy_data_rate_set(stmdev_ctx_t *ctx,
                                 lsm6dso_odr_g_t val)
{
    213c:	b590      	push	{r4, r7, lr}
    213e:	b087      	sub	sp, #28
    2140:	af00      	add	r7, sp, #0
    2142:	6078      	str	r0, [r7, #4]
    2144:	000a      	movs	r2, r1
    2146:	1cfb      	adds	r3, r7, #3
    2148:	701a      	strb	r2, [r3, #0]
  lsm6dso_odr_g_t odr_gy =  val;
    214a:	2317      	movs	r3, #23
    214c:	18fb      	adds	r3, r7, r3
    214e:	1cfa      	adds	r2, r7, #3
    2150:	7812      	ldrb	r2, [r2, #0]
    2152:	701a      	strb	r2, [r3, #0]
  lsm6dso_fsm_odr_t fsm_odr;
  lsm6dso_ctrl2_g_t reg;
  int32_t ret;

  /* Check the Finite State Machine data rate constraints */
  ret =  lsm6dso_fsm_enable_get(ctx, &fsm_enable);
    2154:	230c      	movs	r3, #12
    2156:	18fa      	adds	r2, r7, r3
    2158:	687b      	ldr	r3, [r7, #4]
    215a:	0011      	movs	r1, r2
    215c:	0018      	movs	r0, r3
    215e:	4ba4      	ldr	r3, [pc, #656]	; (23f0 <lsm6dso_gy_data_rate_set+0x2b4>)
    2160:	4798      	blx	r3
    2162:	0003      	movs	r3, r0
    2164:	613b      	str	r3, [r7, #16]

  if (ret == 0)
    2166:	693b      	ldr	r3, [r7, #16]
    2168:	2b00      	cmp	r3, #0
    216a:	d000      	beq.n	216e <lsm6dso_gy_data_rate_set+0x32>
    216c:	e113      	b.n	2396 <lsm6dso_gy_data_rate_set+0x25a>
  {
    if ((fsm_enable.fsm_enable_a.fsm1_en  |
    216e:	230c      	movs	r3, #12
    2170:	18fb      	adds	r3, r7, r3
    2172:	781b      	ldrb	r3, [r3, #0]
    2174:	07db      	lsls	r3, r3, #31
    2176:	0fdb      	lsrs	r3, r3, #31
    2178:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm2_en  |
    217a:	230c      	movs	r3, #12
    217c:	18fb      	adds	r3, r7, r3
    217e:	781b      	ldrb	r3, [r3, #0]
    2180:	079b      	lsls	r3, r3, #30
    2182:	0fdb      	lsrs	r3, r3, #31
    2184:	b2db      	uxtb	r3, r3
    if ((fsm_enable.fsm_enable_a.fsm1_en  |
    2186:	4313      	orrs	r3, r2
    2188:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm3_en  |
    218a:	230c      	movs	r3, #12
    218c:	18fb      	adds	r3, r7, r3
    218e:	781b      	ldrb	r3, [r3, #0]
    2190:	075b      	lsls	r3, r3, #29
    2192:	0fdb      	lsrs	r3, r3, #31
    2194:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm2_en  |
    2196:	4313      	orrs	r3, r2
    2198:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm4_en  |
    219a:	230c      	movs	r3, #12
    219c:	18fb      	adds	r3, r7, r3
    219e:	781b      	ldrb	r3, [r3, #0]
    21a0:	071b      	lsls	r3, r3, #28
    21a2:	0fdb      	lsrs	r3, r3, #31
    21a4:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm3_en  |
    21a6:	4313      	orrs	r3, r2
    21a8:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm5_en  |
    21aa:	230c      	movs	r3, #12
    21ac:	18fb      	adds	r3, r7, r3
    21ae:	781b      	ldrb	r3, [r3, #0]
    21b0:	06db      	lsls	r3, r3, #27
    21b2:	0fdb      	lsrs	r3, r3, #31
    21b4:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm4_en  |
    21b6:	4313      	orrs	r3, r2
    21b8:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm6_en  |
    21ba:	230c      	movs	r3, #12
    21bc:	18fb      	adds	r3, r7, r3
    21be:	781b      	ldrb	r3, [r3, #0]
    21c0:	069b      	lsls	r3, r3, #26
    21c2:	0fdb      	lsrs	r3, r3, #31
    21c4:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm5_en  |
    21c6:	4313      	orrs	r3, r2
    21c8:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm7_en  |
    21ca:	230c      	movs	r3, #12
    21cc:	18fb      	adds	r3, r7, r3
    21ce:	781b      	ldrb	r3, [r3, #0]
    21d0:	065b      	lsls	r3, r3, #25
    21d2:	0fdb      	lsrs	r3, r3, #31
    21d4:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm6_en  |
    21d6:	4313      	orrs	r3, r2
    21d8:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm8_en  |
    21da:	230c      	movs	r3, #12
    21dc:	18fb      	adds	r3, r7, r3
    21de:	781b      	ldrb	r3, [r3, #0]
    21e0:	061b      	lsls	r3, r3, #24
    21e2:	0fdb      	lsrs	r3, r3, #31
    21e4:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm7_en  |
    21e6:	4313      	orrs	r3, r2
    21e8:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm9_en  |
    21ea:	230c      	movs	r3, #12
    21ec:	18fb      	adds	r3, r7, r3
    21ee:	785b      	ldrb	r3, [r3, #1]
    21f0:	07db      	lsls	r3, r3, #31
    21f2:	0fdb      	lsrs	r3, r3, #31
    21f4:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm8_en  |
    21f6:	4313      	orrs	r3, r2
    21f8:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm10_en |
    21fa:	230c      	movs	r3, #12
    21fc:	18fb      	adds	r3, r7, r3
    21fe:	785b      	ldrb	r3, [r3, #1]
    2200:	079b      	lsls	r3, r3, #30
    2202:	0fdb      	lsrs	r3, r3, #31
    2204:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm9_en  |
    2206:	4313      	orrs	r3, r2
    2208:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm11_en |
    220a:	230c      	movs	r3, #12
    220c:	18fb      	adds	r3, r7, r3
    220e:	785b      	ldrb	r3, [r3, #1]
    2210:	075b      	lsls	r3, r3, #29
    2212:	0fdb      	lsrs	r3, r3, #31
    2214:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm10_en |
    2216:	4313      	orrs	r3, r2
    2218:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm12_en |
    221a:	230c      	movs	r3, #12
    221c:	18fb      	adds	r3, r7, r3
    221e:	785b      	ldrb	r3, [r3, #1]
    2220:	071b      	lsls	r3, r3, #28
    2222:	0fdb      	lsrs	r3, r3, #31
    2224:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm11_en |
    2226:	4313      	orrs	r3, r2
    2228:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm13_en |
    222a:	230c      	movs	r3, #12
    222c:	18fb      	adds	r3, r7, r3
    222e:	785b      	ldrb	r3, [r3, #1]
    2230:	06db      	lsls	r3, r3, #27
    2232:	0fdb      	lsrs	r3, r3, #31
    2234:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm12_en |
    2236:	4313      	orrs	r3, r2
    2238:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm14_en |
    223a:	230c      	movs	r3, #12
    223c:	18fb      	adds	r3, r7, r3
    223e:	785b      	ldrb	r3, [r3, #1]
    2240:	069b      	lsls	r3, r3, #26
    2242:	0fdb      	lsrs	r3, r3, #31
    2244:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm13_en |
    2246:	4313      	orrs	r3, r2
    2248:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm15_en |
    224a:	230c      	movs	r3, #12
    224c:	18fb      	adds	r3, r7, r3
    224e:	785b      	ldrb	r3, [r3, #1]
    2250:	065b      	lsls	r3, r3, #25
    2252:	0fdb      	lsrs	r3, r3, #31
    2254:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm14_en |
    2256:	4313      	orrs	r3, r2
    2258:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm16_en) == PROPERTY_ENABLE)
    225a:	230c      	movs	r3, #12
    225c:	18fb      	adds	r3, r7, r3
    225e:	785b      	ldrb	r3, [r3, #1]
    2260:	061b      	lsls	r3, r3, #24
    2262:	0fdb      	lsrs	r3, r3, #31
    2264:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm15_en |
    2266:	4313      	orrs	r3, r2
    2268:	b2db      	uxtb	r3, r3
    if ((fsm_enable.fsm_enable_a.fsm1_en  |
    226a:	2b01      	cmp	r3, #1
    226c:	d000      	beq.n	2270 <lsm6dso_gy_data_rate_set+0x134>
    226e:	e092      	b.n	2396 <lsm6dso_gy_data_rate_set+0x25a>
    {
      ret =  lsm6dso_fsm_data_rate_get(ctx, &fsm_odr);
    2270:	230b      	movs	r3, #11
    2272:	18fa      	adds	r2, r7, r3
    2274:	687b      	ldr	r3, [r7, #4]
    2276:	0011      	movs	r1, r2
    2278:	0018      	movs	r0, r3
    227a:	4b5e      	ldr	r3, [pc, #376]	; (23f4 <lsm6dso_gy_data_rate_set+0x2b8>)
    227c:	4798      	blx	r3
    227e:	0003      	movs	r3, r0
    2280:	613b      	str	r3, [r7, #16]

      if (ret == 0)
    2282:	693b      	ldr	r3, [r7, #16]
    2284:	2b00      	cmp	r3, #0
    2286:	d000      	beq.n	228a <lsm6dso_gy_data_rate_set+0x14e>
    2288:	e085      	b.n	2396 <lsm6dso_gy_data_rate_set+0x25a>
      {
        switch (fsm_odr)
    228a:	230b      	movs	r3, #11
    228c:	18fb      	adds	r3, r7, r3
    228e:	781b      	ldrb	r3, [r3, #0]
    2290:	2b01      	cmp	r3, #1
    2292:	d017      	beq.n	22c4 <lsm6dso_gy_data_rate_set+0x188>
    2294:	dc02      	bgt.n	229c <lsm6dso_gy_data_rate_set+0x160>
    2296:	2b00      	cmp	r3, #0
    2298:	d005      	beq.n	22a6 <lsm6dso_gy_data_rate_set+0x16a>
    229a:	e076      	b.n	238a <lsm6dso_gy_data_rate_set+0x24e>
    229c:	2b02      	cmp	r3, #2
    229e:	d029      	beq.n	22f4 <lsm6dso_gy_data_rate_set+0x1b8>
    22a0:	2b03      	cmp	r3, #3
    22a2:	d048      	beq.n	2336 <lsm6dso_gy_data_rate_set+0x1fa>
    22a4:	e071      	b.n	238a <lsm6dso_gy_data_rate_set+0x24e>
        {
          case LSM6DSO_ODR_FSM_12Hz5:
            if (val == LSM6DSO_GY_ODR_OFF)
    22a6:	1cfb      	adds	r3, r7, #3
    22a8:	781b      	ldrb	r3, [r3, #0]
    22aa:	2b00      	cmp	r3, #0
    22ac:	d104      	bne.n	22b8 <lsm6dso_gy_data_rate_set+0x17c>
            {
              odr_gy = LSM6DSO_GY_ODR_12Hz5;
    22ae:	2317      	movs	r3, #23
    22b0:	18fb      	adds	r3, r7, r3
    22b2:	2201      	movs	r2, #1
    22b4:	701a      	strb	r2, [r3, #0]
            else
            {
              odr_gy = val;
            }

            break;
    22b6:	e06e      	b.n	2396 <lsm6dso_gy_data_rate_set+0x25a>
              odr_gy = val;
    22b8:	2317      	movs	r3, #23
    22ba:	18fb      	adds	r3, r7, r3
    22bc:	1cfa      	adds	r2, r7, #3
    22be:	7812      	ldrb	r2, [r2, #0]
    22c0:	701a      	strb	r2, [r3, #0]
            break;
    22c2:	e068      	b.n	2396 <lsm6dso_gy_data_rate_set+0x25a>

          case LSM6DSO_ODR_FSM_26Hz:
            if (val == LSM6DSO_GY_ODR_OFF)
    22c4:	1cfb      	adds	r3, r7, #3
    22c6:	781b      	ldrb	r3, [r3, #0]
    22c8:	2b00      	cmp	r3, #0
    22ca:	d104      	bne.n	22d6 <lsm6dso_gy_data_rate_set+0x19a>
            {
              odr_gy = LSM6DSO_GY_ODR_26Hz;
    22cc:	2317      	movs	r3, #23
    22ce:	18fb      	adds	r3, r7, r3
    22d0:	2202      	movs	r2, #2
    22d2:	701a      	strb	r2, [r3, #0]
            else
            {
              odr_gy = val;
            }

            break;
    22d4:	e05f      	b.n	2396 <lsm6dso_gy_data_rate_set+0x25a>
            else if (val == LSM6DSO_GY_ODR_12Hz5)
    22d6:	1cfb      	adds	r3, r7, #3
    22d8:	781b      	ldrb	r3, [r3, #0]
    22da:	2b01      	cmp	r3, #1
    22dc:	d104      	bne.n	22e8 <lsm6dso_gy_data_rate_set+0x1ac>
              odr_gy = LSM6DSO_GY_ODR_26Hz;
    22de:	2317      	movs	r3, #23
    22e0:	18fb      	adds	r3, r7, r3
    22e2:	2202      	movs	r2, #2
    22e4:	701a      	strb	r2, [r3, #0]
            break;
    22e6:	e056      	b.n	2396 <lsm6dso_gy_data_rate_set+0x25a>
              odr_gy = val;
    22e8:	2317      	movs	r3, #23
    22ea:	18fb      	adds	r3, r7, r3
    22ec:	1cfa      	adds	r2, r7, #3
    22ee:	7812      	ldrb	r2, [r2, #0]
    22f0:	701a      	strb	r2, [r3, #0]
            break;
    22f2:	e050      	b.n	2396 <lsm6dso_gy_data_rate_set+0x25a>

          case LSM6DSO_ODR_FSM_52Hz:
            if (val == LSM6DSO_GY_ODR_OFF)
    22f4:	1cfb      	adds	r3, r7, #3
    22f6:	781b      	ldrb	r3, [r3, #0]
    22f8:	2b00      	cmp	r3, #0
    22fa:	d104      	bne.n	2306 <lsm6dso_gy_data_rate_set+0x1ca>
            {
              odr_gy = LSM6DSO_GY_ODR_52Hz;
    22fc:	2317      	movs	r3, #23
    22fe:	18fb      	adds	r3, r7, r3
    2300:	2203      	movs	r2, #3
    2302:	701a      	strb	r2, [r3, #0]
            else
            {
              odr_gy = val;
            }

            break;
    2304:	e047      	b.n	2396 <lsm6dso_gy_data_rate_set+0x25a>
            else if (val == LSM6DSO_GY_ODR_12Hz5)
    2306:	1cfb      	adds	r3, r7, #3
    2308:	781b      	ldrb	r3, [r3, #0]
    230a:	2b01      	cmp	r3, #1
    230c:	d104      	bne.n	2318 <lsm6dso_gy_data_rate_set+0x1dc>
              odr_gy = LSM6DSO_GY_ODR_52Hz;
    230e:	2317      	movs	r3, #23
    2310:	18fb      	adds	r3, r7, r3
    2312:	2203      	movs	r2, #3
    2314:	701a      	strb	r2, [r3, #0]
            break;
    2316:	e03e      	b.n	2396 <lsm6dso_gy_data_rate_set+0x25a>
            else if (val == LSM6DSO_GY_ODR_26Hz)
    2318:	1cfb      	adds	r3, r7, #3
    231a:	781b      	ldrb	r3, [r3, #0]
    231c:	2b02      	cmp	r3, #2
    231e:	d104      	bne.n	232a <lsm6dso_gy_data_rate_set+0x1ee>
              odr_gy = LSM6DSO_GY_ODR_52Hz;
    2320:	2317      	movs	r3, #23
    2322:	18fb      	adds	r3, r7, r3
    2324:	2203      	movs	r2, #3
    2326:	701a      	strb	r2, [r3, #0]
            break;
    2328:	e035      	b.n	2396 <lsm6dso_gy_data_rate_set+0x25a>
              odr_gy = val;
    232a:	2317      	movs	r3, #23
    232c:	18fb      	adds	r3, r7, r3
    232e:	1cfa      	adds	r2, r7, #3
    2330:	7812      	ldrb	r2, [r2, #0]
    2332:	701a      	strb	r2, [r3, #0]
            break;
    2334:	e02f      	b.n	2396 <lsm6dso_gy_data_rate_set+0x25a>

          case LSM6DSO_ODR_FSM_104Hz:
            if (val == LSM6DSO_GY_ODR_OFF)
    2336:	1cfb      	adds	r3, r7, #3
    2338:	781b      	ldrb	r3, [r3, #0]
    233a:	2b00      	cmp	r3, #0
    233c:	d104      	bne.n	2348 <lsm6dso_gy_data_rate_set+0x20c>
            {
              odr_gy = LSM6DSO_GY_ODR_104Hz;
    233e:	2317      	movs	r3, #23
    2340:	18fb      	adds	r3, r7, r3
    2342:	2204      	movs	r2, #4
    2344:	701a      	strb	r2, [r3, #0]
            else
            {
              odr_gy = val;
            }

            break;
    2346:	e026      	b.n	2396 <lsm6dso_gy_data_rate_set+0x25a>
            else if (val == LSM6DSO_GY_ODR_12Hz5)
    2348:	1cfb      	adds	r3, r7, #3
    234a:	781b      	ldrb	r3, [r3, #0]
    234c:	2b01      	cmp	r3, #1
    234e:	d104      	bne.n	235a <lsm6dso_gy_data_rate_set+0x21e>
              odr_gy = LSM6DSO_GY_ODR_104Hz;
    2350:	2317      	movs	r3, #23
    2352:	18fb      	adds	r3, r7, r3
    2354:	2204      	movs	r2, #4
    2356:	701a      	strb	r2, [r3, #0]
            break;
    2358:	e01d      	b.n	2396 <lsm6dso_gy_data_rate_set+0x25a>
            else if (val == LSM6DSO_GY_ODR_26Hz)
    235a:	1cfb      	adds	r3, r7, #3
    235c:	781b      	ldrb	r3, [r3, #0]
    235e:	2b02      	cmp	r3, #2
    2360:	d104      	bne.n	236c <lsm6dso_gy_data_rate_set+0x230>
              odr_gy = LSM6DSO_GY_ODR_104Hz;
    2362:	2317      	movs	r3, #23
    2364:	18fb      	adds	r3, r7, r3
    2366:	2204      	movs	r2, #4
    2368:	701a      	strb	r2, [r3, #0]
            break;
    236a:	e014      	b.n	2396 <lsm6dso_gy_data_rate_set+0x25a>
            else if (val == LSM6DSO_GY_ODR_52Hz)
    236c:	1cfb      	adds	r3, r7, #3
    236e:	781b      	ldrb	r3, [r3, #0]
    2370:	2b03      	cmp	r3, #3
    2372:	d104      	bne.n	237e <lsm6dso_gy_data_rate_set+0x242>
              odr_gy = LSM6DSO_GY_ODR_104Hz;
    2374:	2317      	movs	r3, #23
    2376:	18fb      	adds	r3, r7, r3
    2378:	2204      	movs	r2, #4
    237a:	701a      	strb	r2, [r3, #0]
            break;
    237c:	e00b      	b.n	2396 <lsm6dso_gy_data_rate_set+0x25a>
              odr_gy = val;
    237e:	2317      	movs	r3, #23
    2380:	18fb      	adds	r3, r7, r3
    2382:	1cfa      	adds	r2, r7, #3
    2384:	7812      	ldrb	r2, [r2, #0]
    2386:	701a      	strb	r2, [r3, #0]
            break;
    2388:	e005      	b.n	2396 <lsm6dso_gy_data_rate_set+0x25a>

          default:
            odr_gy = val;
    238a:	2317      	movs	r3, #23
    238c:	18fb      	adds	r3, r7, r3
    238e:	1cfa      	adds	r2, r7, #3
    2390:	7812      	ldrb	r2, [r2, #0]
    2392:	701a      	strb	r2, [r3, #0]
            break;
    2394:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }

  if (ret == 0)
    2396:	693b      	ldr	r3, [r7, #16]
    2398:	2b00      	cmp	r3, #0
    239a:	d108      	bne.n	23ae <lsm6dso_gy_data_rate_set+0x272>
  {
    ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL2_G, (uint8_t *)&reg, 1);
    239c:	2308      	movs	r3, #8
    239e:	18fa      	adds	r2, r7, r3
    23a0:	6878      	ldr	r0, [r7, #4]
    23a2:	2301      	movs	r3, #1
    23a4:	2111      	movs	r1, #17
    23a6:	4c14      	ldr	r4, [pc, #80]	; (23f8 <lsm6dso_gy_data_rate_set+0x2bc>)
    23a8:	47a0      	blx	r4
    23aa:	0003      	movs	r3, r0
    23ac:	613b      	str	r3, [r7, #16]
  }

  if (ret == 0)
    23ae:	693b      	ldr	r3, [r7, #16]
    23b0:	2b00      	cmp	r3, #0
    23b2:	d118      	bne.n	23e6 <lsm6dso_gy_data_rate_set+0x2aa>
  {
    reg.odr_g = (uint8_t) odr_gy;
    23b4:	2317      	movs	r3, #23
    23b6:	18fb      	adds	r3, r7, r3
    23b8:	781b      	ldrb	r3, [r3, #0]
    23ba:	220f      	movs	r2, #15
    23bc:	4013      	ands	r3, r2
    23be:	b2da      	uxtb	r2, r3
    23c0:	2308      	movs	r3, #8
    23c2:	18fb      	adds	r3, r7, r3
    23c4:	0110      	lsls	r0, r2, #4
    23c6:	781a      	ldrb	r2, [r3, #0]
    23c8:	210f      	movs	r1, #15
    23ca:	400a      	ands	r2, r1
    23cc:	1c11      	adds	r1, r2, #0
    23ce:	1c02      	adds	r2, r0, #0
    23d0:	430a      	orrs	r2, r1
    23d2:	701a      	strb	r2, [r3, #0]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_CTRL2_G, (uint8_t *)&reg, 1);
    23d4:	2308      	movs	r3, #8
    23d6:	18fa      	adds	r2, r7, r3
    23d8:	6878      	ldr	r0, [r7, #4]
    23da:	2301      	movs	r3, #1
    23dc:	2111      	movs	r1, #17
    23de:	4c07      	ldr	r4, [pc, #28]	; (23fc <lsm6dso_gy_data_rate_set+0x2c0>)
    23e0:	47a0      	blx	r4
    23e2:	0003      	movs	r3, r0
    23e4:	613b      	str	r3, [r7, #16]
  }

  return ret;
    23e6:	693b      	ldr	r3, [r7, #16]
}
    23e8:	0018      	movs	r0, r3
    23ea:	46bd      	mov	sp, r7
    23ec:	b007      	add	sp, #28
    23ee:	bd90      	pop	{r4, r7, pc}
    23f0:	000028e9 	.word	0x000028e9
    23f4:	0000293d 	.word	0x0000293d
    23f8:	00001cdd 	.word	0x00001cdd
    23fc:	00001d23 	.word	0x00001d23

00002400 <lsm6dso_block_data_update_set>:
  * @param  val      change the values of bdu in reg CTRL3_C
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_block_data_update_set(stmdev_ctx_t *ctx, uint8_t val)
{
    2400:	b590      	push	{r4, r7, lr}
    2402:	b085      	sub	sp, #20
    2404:	af00      	add	r7, sp, #0
    2406:	6078      	str	r0, [r7, #4]
    2408:	000a      	movs	r2, r1
    240a:	1cfb      	adds	r3, r7, #3
    240c:	701a      	strb	r2, [r3, #0]
  lsm6dso_ctrl3_c_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL3_C, (uint8_t *)&reg, 1);
    240e:	2308      	movs	r3, #8
    2410:	18fa      	adds	r2, r7, r3
    2412:	6878      	ldr	r0, [r7, #4]
    2414:	2301      	movs	r3, #1
    2416:	2112      	movs	r1, #18
    2418:	4c12      	ldr	r4, [pc, #72]	; (2464 <lsm6dso_block_data_update_set+0x64>)
    241a:	47a0      	blx	r4
    241c:	0003      	movs	r3, r0
    241e:	60fb      	str	r3, [r7, #12]

  if (ret == 0)
    2420:	68fb      	ldr	r3, [r7, #12]
    2422:	2b00      	cmp	r3, #0
    2424:	d119      	bne.n	245a <lsm6dso_block_data_update_set+0x5a>
  {
    reg.bdu = val;
    2426:	1cfb      	adds	r3, r7, #3
    2428:	781b      	ldrb	r3, [r3, #0]
    242a:	2201      	movs	r2, #1
    242c:	4013      	ands	r3, r2
    242e:	b2da      	uxtb	r2, r3
    2430:	2308      	movs	r3, #8
    2432:	18fb      	adds	r3, r7, r3
    2434:	2101      	movs	r1, #1
    2436:	400a      	ands	r2, r1
    2438:	0190      	lsls	r0, r2, #6
    243a:	781a      	ldrb	r2, [r3, #0]
    243c:	2140      	movs	r1, #64	; 0x40
    243e:	438a      	bics	r2, r1
    2440:	1c11      	adds	r1, r2, #0
    2442:	1c02      	adds	r2, r0, #0
    2444:	430a      	orrs	r2, r1
    2446:	701a      	strb	r2, [r3, #0]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_CTRL3_C, (uint8_t *)&reg, 1);
    2448:	2308      	movs	r3, #8
    244a:	18fa      	adds	r2, r7, r3
    244c:	6878      	ldr	r0, [r7, #4]
    244e:	2301      	movs	r3, #1
    2450:	2112      	movs	r1, #18
    2452:	4c05      	ldr	r4, [pc, #20]	; (2468 <lsm6dso_block_data_update_set+0x68>)
    2454:	47a0      	blx	r4
    2456:	0003      	movs	r3, r0
    2458:	60fb      	str	r3, [r7, #12]
  }

  return ret;
    245a:	68fb      	ldr	r3, [r7, #12]
}
    245c:	0018      	movs	r0, r3
    245e:	46bd      	mov	sp, r7
    2460:	b005      	add	sp, #20
    2462:	bd90      	pop	{r4, r7, pc}
    2464:	00001cdd 	.word	0x00001cdd
    2468:	00001d23 	.word	0x00001d23

0000246c <lsm6dso_xl_offset_weight_set>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_xl_offset_weight_set(stmdev_ctx_t *ctx,
                                     lsm6dso_usr_off_w_t val)
{
    246c:	b590      	push	{r4, r7, lr}
    246e:	b085      	sub	sp, #20
    2470:	af00      	add	r7, sp, #0
    2472:	6078      	str	r0, [r7, #4]
    2474:	000a      	movs	r2, r1
    2476:	1cfb      	adds	r3, r7, #3
    2478:	701a      	strb	r2, [r3, #0]
  lsm6dso_ctrl6_c_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL6_C, (uint8_t *)&reg, 1);
    247a:	2308      	movs	r3, #8
    247c:	18fa      	adds	r2, r7, r3
    247e:	6878      	ldr	r0, [r7, #4]
    2480:	2301      	movs	r3, #1
    2482:	2115      	movs	r1, #21
    2484:	4c12      	ldr	r4, [pc, #72]	; (24d0 <lsm6dso_xl_offset_weight_set+0x64>)
    2486:	47a0      	blx	r4
    2488:	0003      	movs	r3, r0
    248a:	60fb      	str	r3, [r7, #12]

  if (ret == 0)
    248c:	68fb      	ldr	r3, [r7, #12]
    248e:	2b00      	cmp	r3, #0
    2490:	d119      	bne.n	24c6 <lsm6dso_xl_offset_weight_set+0x5a>
  {
    reg.usr_off_w = (uint8_t)val;
    2492:	1cfb      	adds	r3, r7, #3
    2494:	781b      	ldrb	r3, [r3, #0]
    2496:	2201      	movs	r2, #1
    2498:	4013      	ands	r3, r2
    249a:	b2da      	uxtb	r2, r3
    249c:	2308      	movs	r3, #8
    249e:	18fb      	adds	r3, r7, r3
    24a0:	2101      	movs	r1, #1
    24a2:	400a      	ands	r2, r1
    24a4:	00d0      	lsls	r0, r2, #3
    24a6:	781a      	ldrb	r2, [r3, #0]
    24a8:	2108      	movs	r1, #8
    24aa:	438a      	bics	r2, r1
    24ac:	1c11      	adds	r1, r2, #0
    24ae:	1c02      	adds	r2, r0, #0
    24b0:	430a      	orrs	r2, r1
    24b2:	701a      	strb	r2, [r3, #0]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_CTRL6_C, (uint8_t *)&reg, 1);
    24b4:	2308      	movs	r3, #8
    24b6:	18fa      	adds	r2, r7, r3
    24b8:	6878      	ldr	r0, [r7, #4]
    24ba:	2301      	movs	r3, #1
    24bc:	2115      	movs	r1, #21
    24be:	4c05      	ldr	r4, [pc, #20]	; (24d4 <lsm6dso_xl_offset_weight_set+0x68>)
    24c0:	47a0      	blx	r4
    24c2:	0003      	movs	r3, r0
    24c4:	60fb      	str	r3, [r7, #12]
  }

  return ret;
    24c6:	68fb      	ldr	r3, [r7, #12]
}
    24c8:	0018      	movs	r0, r3
    24ca:	46bd      	mov	sp, r7
    24cc:	b005      	add	sp, #20
    24ce:	bd90      	pop	{r4, r7, pc}
    24d0:	00001cdd 	.word	0x00001cdd
    24d4:	00001d23 	.word	0x00001d23

000024d8 <lsm6dso_xl_flag_data_ready_get>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_xl_flag_data_ready_get(stmdev_ctx_t *ctx,
                                       uint8_t *val)
{
    24d8:	b590      	push	{r4, r7, lr}
    24da:	b085      	sub	sp, #20
    24dc:	af00      	add	r7, sp, #0
    24de:	6078      	str	r0, [r7, #4]
    24e0:	6039      	str	r1, [r7, #0]
  lsm6dso_status_reg_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_STATUS_REG, (uint8_t *)&reg, 1);
    24e2:	2308      	movs	r3, #8
    24e4:	18fa      	adds	r2, r7, r3
    24e6:	6878      	ldr	r0, [r7, #4]
    24e8:	2301      	movs	r3, #1
    24ea:	211e      	movs	r1, #30
    24ec:	4c08      	ldr	r4, [pc, #32]	; (2510 <lsm6dso_xl_flag_data_ready_get+0x38>)
    24ee:	47a0      	blx	r4
    24f0:	0003      	movs	r3, r0
    24f2:	60fb      	str	r3, [r7, #12]
  *val = reg.xlda;
    24f4:	2308      	movs	r3, #8
    24f6:	18fb      	adds	r3, r7, r3
    24f8:	781b      	ldrb	r3, [r3, #0]
    24fa:	07db      	lsls	r3, r3, #31
    24fc:	0fdb      	lsrs	r3, r3, #31
    24fe:	b2db      	uxtb	r3, r3
    2500:	001a      	movs	r2, r3
    2502:	683b      	ldr	r3, [r7, #0]
    2504:	701a      	strb	r2, [r3, #0]

  return ret;
    2506:	68fb      	ldr	r3, [r7, #12]
}
    2508:	0018      	movs	r0, r3
    250a:	46bd      	mov	sp, r7
    250c:	b005      	add	sp, #20
    250e:	bd90      	pop	{r4, r7, pc}
    2510:	00001cdd 	.word	0x00001cdd

00002514 <lsm6dso_acceleration_raw_get>:
  * @param  buff     buffer that stores data read
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_acceleration_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
    2514:	b590      	push	{r4, r7, lr}
    2516:	b087      	sub	sp, #28
    2518:	af00      	add	r7, sp, #0
    251a:	6078      	str	r0, [r7, #4]
    251c:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_OUTX_L_A, buff, 6);
    251e:	230c      	movs	r3, #12
    2520:	18fa      	adds	r2, r7, r3
    2522:	6878      	ldr	r0, [r7, #4]
    2524:	2306      	movs	r3, #6
    2526:	2128      	movs	r1, #40	; 0x28
    2528:	4c26      	ldr	r4, [pc, #152]	; (25c4 <lsm6dso_acceleration_raw_get+0xb0>)
    252a:	47a0      	blx	r4
    252c:	0003      	movs	r3, r0
    252e:	617b      	str	r3, [r7, #20]
  val[0] = (int16_t)buff[1];
    2530:	230c      	movs	r3, #12
    2532:	18fb      	adds	r3, r7, r3
    2534:	785b      	ldrb	r3, [r3, #1]
    2536:	b21a      	sxth	r2, r3
    2538:	683b      	ldr	r3, [r7, #0]
    253a:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
    253c:	683b      	ldr	r3, [r7, #0]
    253e:	2200      	movs	r2, #0
    2540:	5e9b      	ldrsh	r3, [r3, r2]
    2542:	b29b      	uxth	r3, r3
    2544:	021b      	lsls	r3, r3, #8
    2546:	b29a      	uxth	r2, r3
    2548:	230c      	movs	r3, #12
    254a:	18fb      	adds	r3, r7, r3
    254c:	781b      	ldrb	r3, [r3, #0]
    254e:	b29b      	uxth	r3, r3
    2550:	18d3      	adds	r3, r2, r3
    2552:	b29b      	uxth	r3, r3
    2554:	b21a      	sxth	r2, r3
    2556:	683b      	ldr	r3, [r7, #0]
    2558:	801a      	strh	r2, [r3, #0]
  val[1] = (int16_t)buff[3];
    255a:	683b      	ldr	r3, [r7, #0]
    255c:	3302      	adds	r3, #2
    255e:	220c      	movs	r2, #12
    2560:	18ba      	adds	r2, r7, r2
    2562:	78d2      	ldrb	r2, [r2, #3]
    2564:	b212      	sxth	r2, r2
    2566:	801a      	strh	r2, [r3, #0]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
    2568:	683b      	ldr	r3, [r7, #0]
    256a:	3302      	adds	r3, #2
    256c:	683a      	ldr	r2, [r7, #0]
    256e:	3202      	adds	r2, #2
    2570:	2100      	movs	r1, #0
    2572:	5e52      	ldrsh	r2, [r2, r1]
    2574:	b292      	uxth	r2, r2
    2576:	0212      	lsls	r2, r2, #8
    2578:	b291      	uxth	r1, r2
    257a:	220c      	movs	r2, #12
    257c:	18ba      	adds	r2, r7, r2
    257e:	7892      	ldrb	r2, [r2, #2]
    2580:	b292      	uxth	r2, r2
    2582:	188a      	adds	r2, r1, r2
    2584:	b292      	uxth	r2, r2
    2586:	b212      	sxth	r2, r2
    2588:	801a      	strh	r2, [r3, #0]
  val[2] = (int16_t)buff[5];
    258a:	683b      	ldr	r3, [r7, #0]
    258c:	3304      	adds	r3, #4
    258e:	220c      	movs	r2, #12
    2590:	18ba      	adds	r2, r7, r2
    2592:	7952      	ldrb	r2, [r2, #5]
    2594:	b212      	sxth	r2, r2
    2596:	801a      	strh	r2, [r3, #0]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
    2598:	683b      	ldr	r3, [r7, #0]
    259a:	3304      	adds	r3, #4
    259c:	683a      	ldr	r2, [r7, #0]
    259e:	3204      	adds	r2, #4
    25a0:	2100      	movs	r1, #0
    25a2:	5e52      	ldrsh	r2, [r2, r1]
    25a4:	b292      	uxth	r2, r2
    25a6:	0212      	lsls	r2, r2, #8
    25a8:	b291      	uxth	r1, r2
    25aa:	220c      	movs	r2, #12
    25ac:	18ba      	adds	r2, r7, r2
    25ae:	7912      	ldrb	r2, [r2, #4]
    25b0:	b292      	uxth	r2, r2
    25b2:	188a      	adds	r2, r1, r2
    25b4:	b292      	uxth	r2, r2
    25b6:	b212      	sxth	r2, r2
    25b8:	801a      	strh	r2, [r3, #0]

  return ret;
    25ba:	697b      	ldr	r3, [r7, #20]
}
    25bc:	0018      	movs	r0, r3
    25be:	46bd      	mov	sp, r7
    25c0:	b007      	add	sp, #28
    25c2:	bd90      	pop	{r4, r7, pc}
    25c4:	00001cdd 	.word	0x00001cdd

000025c8 <lsm6dso_mem_bank_set>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_mem_bank_set(stmdev_ctx_t *ctx,
                             lsm6dso_reg_access_t val)
{
    25c8:	b590      	push	{r4, r7, lr}
    25ca:	b085      	sub	sp, #20
    25cc:	af00      	add	r7, sp, #0
    25ce:	6078      	str	r0, [r7, #4]
    25d0:	000a      	movs	r2, r1
    25d2:	1cfb      	adds	r3, r7, #3
    25d4:	701a      	strb	r2, [r3, #0]
  lsm6dso_func_cfg_access_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_FUNC_CFG_ACCESS, (uint8_t *)&reg, 1);
    25d6:	2308      	movs	r3, #8
    25d8:	18fa      	adds	r2, r7, r3
    25da:	6878      	ldr	r0, [r7, #4]
    25dc:	2301      	movs	r3, #1
    25de:	2101      	movs	r1, #1
    25e0:	4c11      	ldr	r4, [pc, #68]	; (2628 <lsm6dso_mem_bank_set+0x60>)
    25e2:	47a0      	blx	r4
    25e4:	0003      	movs	r3, r0
    25e6:	60fb      	str	r3, [r7, #12]

  if (ret == 0)
    25e8:	68fb      	ldr	r3, [r7, #12]
    25ea:	2b00      	cmp	r3, #0
    25ec:	d117      	bne.n	261e <lsm6dso_mem_bank_set+0x56>
  {
    reg.reg_access = (uint8_t)val;
    25ee:	1cfb      	adds	r3, r7, #3
    25f0:	781b      	ldrb	r3, [r3, #0]
    25f2:	2203      	movs	r2, #3
    25f4:	4013      	ands	r3, r2
    25f6:	b2da      	uxtb	r2, r3
    25f8:	2308      	movs	r3, #8
    25fa:	18fb      	adds	r3, r7, r3
    25fc:	0190      	lsls	r0, r2, #6
    25fe:	781a      	ldrb	r2, [r3, #0]
    2600:	213f      	movs	r1, #63	; 0x3f
    2602:	400a      	ands	r2, r1
    2604:	1c11      	adds	r1, r2, #0
    2606:	1c02      	adds	r2, r0, #0
    2608:	430a      	orrs	r2, r1
    260a:	701a      	strb	r2, [r3, #0]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_FUNC_CFG_ACCESS, (uint8_t *)&reg, 1);
    260c:	2308      	movs	r3, #8
    260e:	18fa      	adds	r2, r7, r3
    2610:	6878      	ldr	r0, [r7, #4]
    2612:	2301      	movs	r3, #1
    2614:	2101      	movs	r1, #1
    2616:	4c05      	ldr	r4, [pc, #20]	; (262c <lsm6dso_mem_bank_set+0x64>)
    2618:	47a0      	blx	r4
    261a:	0003      	movs	r3, r0
    261c:	60fb      	str	r3, [r7, #12]
  }

  return ret;
    261e:	68fb      	ldr	r3, [r7, #12]
}
    2620:	0018      	movs	r0, r3
    2622:	46bd      	mov	sp, r7
    2624:	b005      	add	sp, #20
    2626:	bd90      	pop	{r4, r7, pc}
    2628:	00001cdd 	.word	0x00001cdd
    262c:	00001d23 	.word	0x00001d23

00002630 <lsm6dso_device_id_get>:
  * @param  buff     buffer that stores data read
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_device_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
    2630:	b590      	push	{r4, r7, lr}
    2632:	b085      	sub	sp, #20
    2634:	af00      	add	r7, sp, #0
    2636:	6078      	str	r0, [r7, #4]
    2638:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_WHO_AM_I, buff, 1);
    263a:	683a      	ldr	r2, [r7, #0]
    263c:	6878      	ldr	r0, [r7, #4]
    263e:	2301      	movs	r3, #1
    2640:	210f      	movs	r1, #15
    2642:	4c04      	ldr	r4, [pc, #16]	; (2654 <lsm6dso_device_id_get+0x24>)
    2644:	47a0      	blx	r4
    2646:	0003      	movs	r3, r0
    2648:	60fb      	str	r3, [r7, #12]

  return ret;
    264a:	68fb      	ldr	r3, [r7, #12]
}
    264c:	0018      	movs	r0, r3
    264e:	46bd      	mov	sp, r7
    2650:	b005      	add	sp, #20
    2652:	bd90      	pop	{r4, r7, pc}
    2654:	00001cdd 	.word	0x00001cdd

00002658 <lsm6dso_reset_set>:
  * @param  val      change the values of sw_reset in reg CTRL3_C
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_reset_set(stmdev_ctx_t *ctx, uint8_t val)
{
    2658:	b590      	push	{r4, r7, lr}
    265a:	b085      	sub	sp, #20
    265c:	af00      	add	r7, sp, #0
    265e:	6078      	str	r0, [r7, #4]
    2660:	000a      	movs	r2, r1
    2662:	1cfb      	adds	r3, r7, #3
    2664:	701a      	strb	r2, [r3, #0]
  lsm6dso_ctrl3_c_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL3_C, (uint8_t *)&reg, 1);
    2666:	2308      	movs	r3, #8
    2668:	18fa      	adds	r2, r7, r3
    266a:	6878      	ldr	r0, [r7, #4]
    266c:	2301      	movs	r3, #1
    266e:	2112      	movs	r1, #18
    2670:	4c12      	ldr	r4, [pc, #72]	; (26bc <lsm6dso_reset_set+0x64>)
    2672:	47a0      	blx	r4
    2674:	0003      	movs	r3, r0
    2676:	60fb      	str	r3, [r7, #12]

  if (ret == 0)
    2678:	68fb      	ldr	r3, [r7, #12]
    267a:	2b00      	cmp	r3, #0
    267c:	d119      	bne.n	26b2 <lsm6dso_reset_set+0x5a>
  {
    reg.sw_reset = val;
    267e:	1cfb      	adds	r3, r7, #3
    2680:	781b      	ldrb	r3, [r3, #0]
    2682:	2201      	movs	r2, #1
    2684:	4013      	ands	r3, r2
    2686:	b2da      	uxtb	r2, r3
    2688:	2308      	movs	r3, #8
    268a:	18fb      	adds	r3, r7, r3
    268c:	2101      	movs	r1, #1
    268e:	400a      	ands	r2, r1
    2690:	0010      	movs	r0, r2
    2692:	781a      	ldrb	r2, [r3, #0]
    2694:	2101      	movs	r1, #1
    2696:	438a      	bics	r2, r1
    2698:	1c11      	adds	r1, r2, #0
    269a:	1c02      	adds	r2, r0, #0
    269c:	430a      	orrs	r2, r1
    269e:	701a      	strb	r2, [r3, #0]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_CTRL3_C, (uint8_t *)&reg, 1);
    26a0:	2308      	movs	r3, #8
    26a2:	18fa      	adds	r2, r7, r3
    26a4:	6878      	ldr	r0, [r7, #4]
    26a6:	2301      	movs	r3, #1
    26a8:	2112      	movs	r1, #18
    26aa:	4c05      	ldr	r4, [pc, #20]	; (26c0 <lsm6dso_reset_set+0x68>)
    26ac:	47a0      	blx	r4
    26ae:	0003      	movs	r3, r0
    26b0:	60fb      	str	r3, [r7, #12]
  }

  return ret;
    26b2:	68fb      	ldr	r3, [r7, #12]
}
    26b4:	0018      	movs	r0, r3
    26b6:	46bd      	mov	sp, r7
    26b8:	b005      	add	sp, #20
    26ba:	bd90      	pop	{r4, r7, pc}
    26bc:	00001cdd 	.word	0x00001cdd
    26c0:	00001d23 	.word	0x00001d23

000026c4 <lsm6dso_reset_get>:
  * @param  val      change the values of sw_reset in reg CTRL3_C
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_reset_get(stmdev_ctx_t *ctx, uint8_t *val)
{
    26c4:	b590      	push	{r4, r7, lr}
    26c6:	b085      	sub	sp, #20
    26c8:	af00      	add	r7, sp, #0
    26ca:	6078      	str	r0, [r7, #4]
    26cc:	6039      	str	r1, [r7, #0]
  lsm6dso_ctrl3_c_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL3_C, (uint8_t *)&reg, 1);
    26ce:	2308      	movs	r3, #8
    26d0:	18fa      	adds	r2, r7, r3
    26d2:	6878      	ldr	r0, [r7, #4]
    26d4:	2301      	movs	r3, #1
    26d6:	2112      	movs	r1, #18
    26d8:	4c08      	ldr	r4, [pc, #32]	; (26fc <lsm6dso_reset_get+0x38>)
    26da:	47a0      	blx	r4
    26dc:	0003      	movs	r3, r0
    26de:	60fb      	str	r3, [r7, #12]
  *val = reg.sw_reset;
    26e0:	2308      	movs	r3, #8
    26e2:	18fb      	adds	r3, r7, r3
    26e4:	781b      	ldrb	r3, [r3, #0]
    26e6:	07db      	lsls	r3, r3, #31
    26e8:	0fdb      	lsrs	r3, r3, #31
    26ea:	b2db      	uxtb	r3, r3
    26ec:	001a      	movs	r2, r3
    26ee:	683b      	ldr	r3, [r7, #0]
    26f0:	701a      	strb	r2, [r3, #0]

  return ret;
    26f2:	68fb      	ldr	r3, [r7, #12]
}
    26f4:	0018      	movs	r0, r3
    26f6:	46bd      	mov	sp, r7
    26f8:	b005      	add	sp, #20
    26fa:	bd90      	pop	{r4, r7, pc}
    26fc:	00001cdd 	.word	0x00001cdd

00002700 <lsm6dso_xl_filter_lp2_set>:
  * @param  val      change the values of lpf2_xl_en in reg CTRL1_XL
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_xl_filter_lp2_set(stmdev_ctx_t *ctx, uint8_t val)
{
    2700:	b590      	push	{r4, r7, lr}
    2702:	b085      	sub	sp, #20
    2704:	af00      	add	r7, sp, #0
    2706:	6078      	str	r0, [r7, #4]
    2708:	000a      	movs	r2, r1
    270a:	1cfb      	adds	r3, r7, #3
    270c:	701a      	strb	r2, [r3, #0]
  lsm6dso_ctrl1_xl_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL1_XL, (uint8_t *)&reg, 1);
    270e:	2308      	movs	r3, #8
    2710:	18fa      	adds	r2, r7, r3
    2712:	6878      	ldr	r0, [r7, #4]
    2714:	2301      	movs	r3, #1
    2716:	2110      	movs	r1, #16
    2718:	4c12      	ldr	r4, [pc, #72]	; (2764 <lsm6dso_xl_filter_lp2_set+0x64>)
    271a:	47a0      	blx	r4
    271c:	0003      	movs	r3, r0
    271e:	60fb      	str	r3, [r7, #12]

  if (ret == 0)
    2720:	68fb      	ldr	r3, [r7, #12]
    2722:	2b00      	cmp	r3, #0
    2724:	d119      	bne.n	275a <lsm6dso_xl_filter_lp2_set+0x5a>
  {
    reg.lpf2_xl_en = val;
    2726:	1cfb      	adds	r3, r7, #3
    2728:	781b      	ldrb	r3, [r3, #0]
    272a:	2201      	movs	r2, #1
    272c:	4013      	ands	r3, r2
    272e:	b2da      	uxtb	r2, r3
    2730:	2308      	movs	r3, #8
    2732:	18fb      	adds	r3, r7, r3
    2734:	2101      	movs	r1, #1
    2736:	400a      	ands	r2, r1
    2738:	1890      	adds	r0, r2, r2
    273a:	781a      	ldrb	r2, [r3, #0]
    273c:	2102      	movs	r1, #2
    273e:	438a      	bics	r2, r1
    2740:	1c11      	adds	r1, r2, #0
    2742:	1c02      	adds	r2, r0, #0
    2744:	430a      	orrs	r2, r1
    2746:	701a      	strb	r2, [r3, #0]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_CTRL1_XL, (uint8_t *)&reg, 1);
    2748:	2308      	movs	r3, #8
    274a:	18fa      	adds	r2, r7, r3
    274c:	6878      	ldr	r0, [r7, #4]
    274e:	2301      	movs	r3, #1
    2750:	2110      	movs	r1, #16
    2752:	4c05      	ldr	r4, [pc, #20]	; (2768 <lsm6dso_xl_filter_lp2_set+0x68>)
    2754:	47a0      	blx	r4
    2756:	0003      	movs	r3, r0
    2758:	60fb      	str	r3, [r7, #12]
  }

  return ret;
    275a:	68fb      	ldr	r3, [r7, #12]
}
    275c:	0018      	movs	r0, r3
    275e:	46bd      	mov	sp, r7
    2760:	b005      	add	sp, #20
    2762:	bd90      	pop	{r4, r7, pc}
    2764:	00001cdd 	.word	0x00001cdd
    2768:	00001d23 	.word	0x00001d23

0000276c <lsm6dso_xl_hp_path_on_out_set>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_xl_hp_path_on_out_set(stmdev_ctx_t *ctx,
                                      lsm6dso_hp_slope_xl_en_t val)
{
    276c:	b590      	push	{r4, r7, lr}
    276e:	b085      	sub	sp, #20
    2770:	af00      	add	r7, sp, #0
    2772:	6078      	str	r0, [r7, #4]
    2774:	000a      	movs	r2, r1
    2776:	1cfb      	adds	r3, r7, #3
    2778:	701a      	strb	r2, [r3, #0]
  lsm6dso_ctrl8_xl_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL8_XL, (uint8_t *)&reg, 1);
    277a:	2308      	movs	r3, #8
    277c:	18fa      	adds	r2, r7, r3
    277e:	6878      	ldr	r0, [r7, #4]
    2780:	2301      	movs	r3, #1
    2782:	2117      	movs	r1, #23
    2784:	4c25      	ldr	r4, [pc, #148]	; (281c <lsm6dso_xl_hp_path_on_out_set+0xb0>)
    2786:	47a0      	blx	r4
    2788:	0003      	movs	r3, r0
    278a:	60fb      	str	r3, [r7, #12]

  if (ret == 0)
    278c:	68fb      	ldr	r3, [r7, #12]
    278e:	2b00      	cmp	r3, #0
    2790:	d13f      	bne.n	2812 <lsm6dso_xl_hp_path_on_out_set+0xa6>
  {
    reg.hp_slope_xl_en = ((uint8_t)val & 0x10U) >> 4;
    2792:	1cfb      	adds	r3, r7, #3
    2794:	781b      	ldrb	r3, [r3, #0]
    2796:	091b      	lsrs	r3, r3, #4
    2798:	b2db      	uxtb	r3, r3
    279a:	1c1a      	adds	r2, r3, #0
    279c:	2301      	movs	r3, #1
    279e:	4013      	ands	r3, r2
    27a0:	b2da      	uxtb	r2, r3
    27a2:	2308      	movs	r3, #8
    27a4:	18fb      	adds	r3, r7, r3
    27a6:	2101      	movs	r1, #1
    27a8:	400a      	ands	r2, r1
    27aa:	0090      	lsls	r0, r2, #2
    27ac:	781a      	ldrb	r2, [r3, #0]
    27ae:	2104      	movs	r1, #4
    27b0:	438a      	bics	r2, r1
    27b2:	1c11      	adds	r1, r2, #0
    27b4:	1c02      	adds	r2, r0, #0
    27b6:	430a      	orrs	r2, r1
    27b8:	701a      	strb	r2, [r3, #0]
    reg.hp_ref_mode_xl = ((uint8_t)val & 0x20U) >> 5;
    27ba:	1cfb      	adds	r3, r7, #3
    27bc:	781b      	ldrb	r3, [r3, #0]
    27be:	095b      	lsrs	r3, r3, #5
    27c0:	b2db      	uxtb	r3, r3
    27c2:	1c1a      	adds	r2, r3, #0
    27c4:	2301      	movs	r3, #1
    27c6:	4013      	ands	r3, r2
    27c8:	b2da      	uxtb	r2, r3
    27ca:	2308      	movs	r3, #8
    27cc:	18fb      	adds	r3, r7, r3
    27ce:	2101      	movs	r1, #1
    27d0:	400a      	ands	r2, r1
    27d2:	0110      	lsls	r0, r2, #4
    27d4:	781a      	ldrb	r2, [r3, #0]
    27d6:	2110      	movs	r1, #16
    27d8:	438a      	bics	r2, r1
    27da:	1c11      	adds	r1, r2, #0
    27dc:	1c02      	adds	r2, r0, #0
    27de:	430a      	orrs	r2, r1
    27e0:	701a      	strb	r2, [r3, #0]
    reg.hpcf_xl = (uint8_t)val & 0x07U;
    27e2:	1cfb      	adds	r3, r7, #3
    27e4:	781b      	ldrb	r3, [r3, #0]
    27e6:	2207      	movs	r2, #7
    27e8:	4013      	ands	r3, r2
    27ea:	b2da      	uxtb	r2, r3
    27ec:	2308      	movs	r3, #8
    27ee:	18fb      	adds	r3, r7, r3
    27f0:	0150      	lsls	r0, r2, #5
    27f2:	781a      	ldrb	r2, [r3, #0]
    27f4:	211f      	movs	r1, #31
    27f6:	400a      	ands	r2, r1
    27f8:	1c11      	adds	r1, r2, #0
    27fa:	1c02      	adds	r2, r0, #0
    27fc:	430a      	orrs	r2, r1
    27fe:	701a      	strb	r2, [r3, #0]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_CTRL8_XL, (uint8_t *)&reg, 1);
    2800:	2308      	movs	r3, #8
    2802:	18fa      	adds	r2, r7, r3
    2804:	6878      	ldr	r0, [r7, #4]
    2806:	2301      	movs	r3, #1
    2808:	2117      	movs	r1, #23
    280a:	4c05      	ldr	r4, [pc, #20]	; (2820 <lsm6dso_xl_hp_path_on_out_set+0xb4>)
    280c:	47a0      	blx	r4
    280e:	0003      	movs	r3, r0
    2810:	60fb      	str	r3, [r7, #12]
  }

  return ret;
    2812:	68fb      	ldr	r3, [r7, #12]
}
    2814:	0018      	movs	r0, r3
    2816:	46bd      	mov	sp, r7
    2818:	b005      	add	sp, #20
    281a:	bd90      	pop	{r4, r7, pc}
    281c:	00001cdd 	.word	0x00001cdd
    2820:	00001d23 	.word	0x00001d23

00002824 <lsm6dso_i3c_disable_set>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_i3c_disable_set(stmdev_ctx_t *ctx,
                                lsm6dso_i3c_disable_t val)
{
    2824:	b590      	push	{r4, r7, lr}
    2826:	b087      	sub	sp, #28
    2828:	af00      	add	r7, sp, #0
    282a:	6078      	str	r0, [r7, #4]
    282c:	000a      	movs	r2, r1
    282e:	1cfb      	adds	r3, r7, #3
    2830:	701a      	strb	r2, [r3, #0]
  lsm6dso_i3c_bus_avb_t i3c_bus_avb;
  lsm6dso_ctrl9_xl_t ctrl9_xl;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL9_XL, (uint8_t *)&ctrl9_xl, 1);
    2832:	230c      	movs	r3, #12
    2834:	18fa      	adds	r2, r7, r3
    2836:	6878      	ldr	r0, [r7, #4]
    2838:	2301      	movs	r3, #1
    283a:	2118      	movs	r1, #24
    283c:	4c28      	ldr	r4, [pc, #160]	; (28e0 <lsm6dso_i3c_disable_set+0xbc>)
    283e:	47a0      	blx	r4
    2840:	0003      	movs	r3, r0
    2842:	617b      	str	r3, [r7, #20]

  if (ret == 0)
    2844:	697b      	ldr	r3, [r7, #20]
    2846:	2b00      	cmp	r3, #0
    2848:	d11c      	bne.n	2884 <lsm6dso_i3c_disable_set+0x60>
  {
    ctrl9_xl.i3c_disable = ((uint8_t)val & 0x80U) >> 7;
    284a:	1cfb      	adds	r3, r7, #3
    284c:	781b      	ldrb	r3, [r3, #0]
    284e:	09db      	lsrs	r3, r3, #7
    2850:	b2db      	uxtb	r3, r3
    2852:	1c1a      	adds	r2, r3, #0
    2854:	2301      	movs	r3, #1
    2856:	4013      	ands	r3, r2
    2858:	b2da      	uxtb	r2, r3
    285a:	230c      	movs	r3, #12
    285c:	18fb      	adds	r3, r7, r3
    285e:	2101      	movs	r1, #1
    2860:	400a      	ands	r2, r1
    2862:	1890      	adds	r0, r2, r2
    2864:	781a      	ldrb	r2, [r3, #0]
    2866:	2102      	movs	r1, #2
    2868:	438a      	bics	r2, r1
    286a:	1c11      	adds	r1, r2, #0
    286c:	1c02      	adds	r2, r0, #0
    286e:	430a      	orrs	r2, r1
    2870:	701a      	strb	r2, [r3, #0]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_CTRL9_XL, (uint8_t *)&ctrl9_xl, 1);
    2872:	230c      	movs	r3, #12
    2874:	18fa      	adds	r2, r7, r3
    2876:	6878      	ldr	r0, [r7, #4]
    2878:	2301      	movs	r3, #1
    287a:	2118      	movs	r1, #24
    287c:	4c19      	ldr	r4, [pc, #100]	; (28e4 <lsm6dso_i3c_disable_set+0xc0>)
    287e:	47a0      	blx	r4
    2880:	0003      	movs	r3, r0
    2882:	617b      	str	r3, [r7, #20]
  }

  if (ret == 0)
    2884:	697b      	ldr	r3, [r7, #20]
    2886:	2b00      	cmp	r3, #0
    2888:	d108      	bne.n	289c <lsm6dso_i3c_disable_set+0x78>
  {
    ret = lsm6dso_read_reg(ctx, LSM6DSO_I3C_BUS_AVB,
    288a:	2310      	movs	r3, #16
    288c:	18fa      	adds	r2, r7, r3
    288e:	6878      	ldr	r0, [r7, #4]
    2890:	2301      	movs	r3, #1
    2892:	2162      	movs	r1, #98	; 0x62
    2894:	4c12      	ldr	r4, [pc, #72]	; (28e0 <lsm6dso_i3c_disable_set+0xbc>)
    2896:	47a0      	blx	r4
    2898:	0003      	movs	r3, r0
    289a:	617b      	str	r3, [r7, #20]
                           (uint8_t *)&i3c_bus_avb, 1);
  }

  if (ret == 0)
    289c:	697b      	ldr	r3, [r7, #20]
    289e:	2b00      	cmp	r3, #0
    28a0:	d119      	bne.n	28d6 <lsm6dso_i3c_disable_set+0xb2>
  {
    i3c_bus_avb.i3c_bus_avb_sel = (uint8_t)val & 0x03U;
    28a2:	1cfb      	adds	r3, r7, #3
    28a4:	781b      	ldrb	r3, [r3, #0]
    28a6:	2203      	movs	r2, #3
    28a8:	4013      	ands	r3, r2
    28aa:	b2da      	uxtb	r2, r3
    28ac:	2310      	movs	r3, #16
    28ae:	18fb      	adds	r3, r7, r3
    28b0:	2103      	movs	r1, #3
    28b2:	400a      	ands	r2, r1
    28b4:	00d0      	lsls	r0, r2, #3
    28b6:	781a      	ldrb	r2, [r3, #0]
    28b8:	2118      	movs	r1, #24
    28ba:	438a      	bics	r2, r1
    28bc:	1c11      	adds	r1, r2, #0
    28be:	1c02      	adds	r2, r0, #0
    28c0:	430a      	orrs	r2, r1
    28c2:	701a      	strb	r2, [r3, #0]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_I3C_BUS_AVB,
    28c4:	2310      	movs	r3, #16
    28c6:	18fa      	adds	r2, r7, r3
    28c8:	6878      	ldr	r0, [r7, #4]
    28ca:	2301      	movs	r3, #1
    28cc:	2162      	movs	r1, #98	; 0x62
    28ce:	4c05      	ldr	r4, [pc, #20]	; (28e4 <lsm6dso_i3c_disable_set+0xc0>)
    28d0:	47a0      	blx	r4
    28d2:	0003      	movs	r3, r0
    28d4:	617b      	str	r3, [r7, #20]
                            (uint8_t *)&i3c_bus_avb, 1);
  }

  return ret;
    28d6:	697b      	ldr	r3, [r7, #20]
}
    28d8:	0018      	movs	r0, r3
    28da:	46bd      	mov	sp, r7
    28dc:	b007      	add	sp, #28
    28de:	bd90      	pop	{r4, r7, pc}
    28e0:	00001cdd 	.word	0x00001cdd
    28e4:	00001d23 	.word	0x00001d23

000028e8 <lsm6dso_fsm_enable_get>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_fsm_enable_get(stmdev_ctx_t *ctx,
                               lsm6dso_emb_fsm_enable_t *val)
{
    28e8:	b590      	push	{r4, r7, lr}
    28ea:	b085      	sub	sp, #20
    28ec:	af00      	add	r7, sp, #0
    28ee:	6078      	str	r0, [r7, #4]
    28f0:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = lsm6dso_mem_bank_set(ctx, LSM6DSO_EMBEDDED_FUNC_BANK);
    28f2:	687b      	ldr	r3, [r7, #4]
    28f4:	2102      	movs	r1, #2
    28f6:	0018      	movs	r0, r3
    28f8:	4b0e      	ldr	r3, [pc, #56]	; (2934 <lsm6dso_fsm_enable_get+0x4c>)
    28fa:	4798      	blx	r3
    28fc:	0003      	movs	r3, r0
    28fe:	60fb      	str	r3, [r7, #12]

  if (ret == 0)
    2900:	68fb      	ldr	r3, [r7, #12]
    2902:	2b00      	cmp	r3, #0
    2904:	d107      	bne.n	2916 <lsm6dso_fsm_enable_get+0x2e>
  {
    ret = lsm6dso_read_reg(ctx, LSM6DSO_FSM_ENABLE_A, (uint8_t *) val, 2);
    2906:	683a      	ldr	r2, [r7, #0]
    2908:	6878      	ldr	r0, [r7, #4]
    290a:	2302      	movs	r3, #2
    290c:	2146      	movs	r1, #70	; 0x46
    290e:	4c0a      	ldr	r4, [pc, #40]	; (2938 <lsm6dso_fsm_enable_get+0x50>)
    2910:	47a0      	blx	r4
    2912:	0003      	movs	r3, r0
    2914:	60fb      	str	r3, [r7, #12]
  }

  if (ret == 0)
    2916:	68fb      	ldr	r3, [r7, #12]
    2918:	2b00      	cmp	r3, #0
    291a:	d106      	bne.n	292a <lsm6dso_fsm_enable_get+0x42>
  {
    ret = lsm6dso_mem_bank_set(ctx, LSM6DSO_USER_BANK);
    291c:	687b      	ldr	r3, [r7, #4]
    291e:	2100      	movs	r1, #0
    2920:	0018      	movs	r0, r3
    2922:	4b04      	ldr	r3, [pc, #16]	; (2934 <lsm6dso_fsm_enable_get+0x4c>)
    2924:	4798      	blx	r3
    2926:	0003      	movs	r3, r0
    2928:	60fb      	str	r3, [r7, #12]
  }

  return ret;
    292a:	68fb      	ldr	r3, [r7, #12]
}
    292c:	0018      	movs	r0, r3
    292e:	46bd      	mov	sp, r7
    2930:	b005      	add	sp, #20
    2932:	bd90      	pop	{r4, r7, pc}
    2934:	000025c9 	.word	0x000025c9
    2938:	00001cdd 	.word	0x00001cdd

0000293c <lsm6dso_fsm_data_rate_get>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_fsm_data_rate_get(stmdev_ctx_t *ctx,
                                  lsm6dso_fsm_odr_t *val)
{
    293c:	b590      	push	{r4, r7, lr}
    293e:	b085      	sub	sp, #20
    2940:	af00      	add	r7, sp, #0
    2942:	6078      	str	r0, [r7, #4]
    2944:	6039      	str	r1, [r7, #0]
  lsm6dso_emb_func_odr_cfg_b_t reg;
  int32_t ret;

  ret = lsm6dso_mem_bank_set(ctx, LSM6DSO_EMBEDDED_FUNC_BANK);
    2946:	687b      	ldr	r3, [r7, #4]
    2948:	2102      	movs	r1, #2
    294a:	0018      	movs	r0, r3
    294c:	4b21      	ldr	r3, [pc, #132]	; (29d4 <lsm6dso_fsm_data_rate_get+0x98>)
    294e:	4798      	blx	r3
    2950:	0003      	movs	r3, r0
    2952:	60fb      	str	r3, [r7, #12]

  if (ret == 0)
    2954:	68fb      	ldr	r3, [r7, #12]
    2956:	2b00      	cmp	r3, #0
    2958:	d108      	bne.n	296c <lsm6dso_fsm_data_rate_get+0x30>
  {
    ret = lsm6dso_read_reg(ctx, LSM6DSO_EMB_FUNC_ODR_CFG_B,
    295a:	2308      	movs	r3, #8
    295c:	18fa      	adds	r2, r7, r3
    295e:	6878      	ldr	r0, [r7, #4]
    2960:	2301      	movs	r3, #1
    2962:	215f      	movs	r1, #95	; 0x5f
    2964:	4c1c      	ldr	r4, [pc, #112]	; (29d8 <lsm6dso_fsm_data_rate_get+0x9c>)
    2966:	47a0      	blx	r4
    2968:	0003      	movs	r3, r0
    296a:	60fb      	str	r3, [r7, #12]
                           (uint8_t *)&reg, 1);
  }

  if (ret == 0)
    296c:	68fb      	ldr	r3, [r7, #12]
    296e:	2b00      	cmp	r3, #0
    2970:	d12b      	bne.n	29ca <lsm6dso_fsm_data_rate_get+0x8e>
  {
    switch (reg.fsm_odr)
    2972:	2308      	movs	r3, #8
    2974:	18fb      	adds	r3, r7, r3
    2976:	781b      	ldrb	r3, [r3, #0]
    2978:	06db      	lsls	r3, r3, #27
    297a:	0f9b      	lsrs	r3, r3, #30
    297c:	b2db      	uxtb	r3, r3
    297e:	2b01      	cmp	r3, #1
    2980:	d00c      	beq.n	299c <lsm6dso_fsm_data_rate_get+0x60>
    2982:	dc02      	bgt.n	298a <lsm6dso_fsm_data_rate_get+0x4e>
    2984:	2b00      	cmp	r3, #0
    2986:	d005      	beq.n	2994 <lsm6dso_fsm_data_rate_get+0x58>
    2988:	e014      	b.n	29b4 <lsm6dso_fsm_data_rate_get+0x78>
    298a:	2b02      	cmp	r3, #2
    298c:	d00a      	beq.n	29a4 <lsm6dso_fsm_data_rate_get+0x68>
    298e:	2b03      	cmp	r3, #3
    2990:	d00c      	beq.n	29ac <lsm6dso_fsm_data_rate_get+0x70>
    2992:	e00f      	b.n	29b4 <lsm6dso_fsm_data_rate_get+0x78>
    {
      case LSM6DSO_ODR_FSM_12Hz5:
        *val = LSM6DSO_ODR_FSM_12Hz5;
    2994:	683b      	ldr	r3, [r7, #0]
    2996:	2200      	movs	r2, #0
    2998:	701a      	strb	r2, [r3, #0]
        break;
    299a:	e00f      	b.n	29bc <lsm6dso_fsm_data_rate_get+0x80>

      case LSM6DSO_ODR_FSM_26Hz:
        *val = LSM6DSO_ODR_FSM_26Hz;
    299c:	683b      	ldr	r3, [r7, #0]
    299e:	2201      	movs	r2, #1
    29a0:	701a      	strb	r2, [r3, #0]
        break;
    29a2:	e00b      	b.n	29bc <lsm6dso_fsm_data_rate_get+0x80>

      case LSM6DSO_ODR_FSM_52Hz:
        *val = LSM6DSO_ODR_FSM_52Hz;
    29a4:	683b      	ldr	r3, [r7, #0]
    29a6:	2202      	movs	r2, #2
    29a8:	701a      	strb	r2, [r3, #0]
        break;
    29aa:	e007      	b.n	29bc <lsm6dso_fsm_data_rate_get+0x80>

      case LSM6DSO_ODR_FSM_104Hz:
        *val = LSM6DSO_ODR_FSM_104Hz;
    29ac:	683b      	ldr	r3, [r7, #0]
    29ae:	2203      	movs	r2, #3
    29b0:	701a      	strb	r2, [r3, #0]
        break;
    29b2:	e003      	b.n	29bc <lsm6dso_fsm_data_rate_get+0x80>

      default:
        *val = LSM6DSO_ODR_FSM_12Hz5;
    29b4:	683b      	ldr	r3, [r7, #0]
    29b6:	2200      	movs	r2, #0
    29b8:	701a      	strb	r2, [r3, #0]
        break;
    29ba:	46c0      	nop			; (mov r8, r8)
    }

    ret = lsm6dso_mem_bank_set(ctx, LSM6DSO_USER_BANK);
    29bc:	687b      	ldr	r3, [r7, #4]
    29be:	2100      	movs	r1, #0
    29c0:	0018      	movs	r0, r3
    29c2:	4b04      	ldr	r3, [pc, #16]	; (29d4 <lsm6dso_fsm_data_rate_get+0x98>)
    29c4:	4798      	blx	r3
    29c6:	0003      	movs	r3, r0
    29c8:	60fb      	str	r3, [r7, #12]
  }

  return ret;
    29ca:	68fb      	ldr	r3, [r7, #12]
}
    29cc:	0018      	movs	r0, r3
    29ce:	46bd      	mov	sp, r7
    29d0:	b005      	add	sp, #20
    29d2:	bd90      	pop	{r4, r7, pc}
    29d4:	000025c9 	.word	0x000025c9
    29d8:	00001cdd 	.word	0x00001cdd

000029dc <platform_write>:
 * @param[in]   len Length of the data sent
 * @return      Returns what the function "I2cWriteDataWait" returns
 * @note        STUDENTS TO FILL  
*****************************************************************************/
static int32_t platform_write(void *handle, uint8_t reg, uint8_t *bufp, uint16_t len)
{
    29dc:	b580      	push	{r7, lr}
    29de:	b086      	sub	sp, #24
    29e0:	af00      	add	r7, sp, #0
    29e2:	60f8      	str	r0, [r7, #12]
    29e4:	0008      	movs	r0, r1
    29e6:	607a      	str	r2, [r7, #4]
    29e8:	0019      	movs	r1, r3
    29ea:	230b      	movs	r3, #11
    29ec:	18fb      	adds	r3, r7, r3
    29ee:	1c02      	adds	r2, r0, #0
    29f0:	701a      	strb	r2, [r3, #0]
    29f2:	2308      	movs	r3, #8
    29f4:	18fb      	adds	r3, r7, r3
    29f6:	1c0a      	adds	r2, r1, #0
    29f8:	801a      	strh	r2, [r3, #0]
	//YOUR JOB: Fill out the structure "imuData" to send to the device
	//TIP: Use the array "msgOutImu" to copy the data to be sent. Remember that the position [0] of the array you send must be the register, and
	//starting from position [1] you can copy the data to be sent. Remember to adjust the length accordingly
  // First position reg
  msgOutImu[0] = reg;
    29fa:	4b22      	ldr	r3, [pc, #136]	; (2a84 <platform_write+0xa8>)
    29fc:	220b      	movs	r2, #11
    29fe:	18ba      	adds	r2, r7, r2
    2a00:	7812      	ldrb	r2, [r2, #0]
    2a02:	701a      	strb	r2, [r3, #0]
	for(uint16_t i=0; i < len; i++){
    2a04:	2316      	movs	r3, #22
    2a06:	18fb      	adds	r3, r7, r3
    2a08:	2200      	movs	r2, #0
    2a0a:	801a      	strh	r2, [r3, #0]
    2a0c:	e012      	b.n	2a34 <platform_write+0x58>
		msgOutImu[i+1] = bufp[i];
    2a0e:	2316      	movs	r3, #22
    2a10:	18fb      	adds	r3, r7, r3
    2a12:	881b      	ldrh	r3, [r3, #0]
    2a14:	3301      	adds	r3, #1
    2a16:	2216      	movs	r2, #22
    2a18:	18ba      	adds	r2, r7, r2
    2a1a:	8812      	ldrh	r2, [r2, #0]
    2a1c:	6879      	ldr	r1, [r7, #4]
    2a1e:	188a      	adds	r2, r1, r2
    2a20:	7811      	ldrb	r1, [r2, #0]
    2a22:	4a18      	ldr	r2, [pc, #96]	; (2a84 <platform_write+0xa8>)
    2a24:	54d1      	strb	r1, [r2, r3]
	for(uint16_t i=0; i < len; i++){
    2a26:	2316      	movs	r3, #22
    2a28:	18fb      	adds	r3, r7, r3
    2a2a:	881a      	ldrh	r2, [r3, #0]
    2a2c:	2316      	movs	r3, #22
    2a2e:	18fb      	adds	r3, r7, r3
    2a30:	3201      	adds	r2, #1
    2a32:	801a      	strh	r2, [r3, #0]
    2a34:	2316      	movs	r3, #22
    2a36:	18fa      	adds	r2, r7, r3
    2a38:	2308      	movs	r3, #8
    2a3a:	18fb      	adds	r3, r7, r3
    2a3c:	8812      	ldrh	r2, [r2, #0]
    2a3e:	881b      	ldrh	r3, [r3, #0]
    2a40:	429a      	cmp	r2, r3
    2a42:	d3e4      	bcc.n	2a0e <platform_write+0x32>
	}
	imuData.address = 0x6B;
    2a44:	4b10      	ldr	r3, [pc, #64]	; (2a88 <platform_write+0xac>)
    2a46:	226b      	movs	r2, #107	; 0x6b
    2a48:	701a      	strb	r2, [r3, #0]
	imuData.msgOut = &msgOutImu;
    2a4a:	4b0f      	ldr	r3, [pc, #60]	; (2a88 <platform_write+0xac>)
    2a4c:	4a0d      	ldr	r2, [pc, #52]	; (2a84 <platform_write+0xa8>)
    2a4e:	605a      	str	r2, [r3, #4]
	imuData.lenOut = len + 1;
    2a50:	2308      	movs	r3, #8
    2a52:	18fb      	adds	r3, r7, r3
    2a54:	881b      	ldrh	r3, [r3, #0]
    2a56:	3301      	adds	r3, #1
    2a58:	b29a      	uxth	r2, r3
    2a5a:	4b0b      	ldr	r3, [pc, #44]	; (2a88 <platform_write+0xac>)
    2a5c:	81da      	strh	r2, [r3, #14]
	imuData.lenIn = len;
    2a5e:	4b0a      	ldr	r3, [pc, #40]	; (2a88 <platform_write+0xac>)
    2a60:	2208      	movs	r2, #8
    2a62:	18ba      	adds	r2, r7, r2
    2a64:	8812      	ldrh	r2, [r2, #0]
    2a66:	819a      	strh	r2, [r3, #12]
	imuData.msgIn = bufp;
    2a68:	4b07      	ldr	r3, [pc, #28]	; (2a88 <platform_write+0xac>)
    2a6a:	687a      	ldr	r2, [r7, #4]
    2a6c:	609a      	str	r2, [r3, #8]
  return I2cWriteDataWait(&imuData, 100);
    2a6e:	4b06      	ldr	r3, [pc, #24]	; (2a88 <platform_write+0xac>)
    2a70:	2164      	movs	r1, #100	; 0x64
    2a72:	0018      	movs	r0, r3
    2a74:	4b05      	ldr	r3, [pc, #20]	; (2a8c <platform_write+0xb0>)
    2a76:	4798      	blx	r3
    2a78:	0003      	movs	r3, r0
}
    2a7a:	0018      	movs	r0, r3
    2a7c:	46bd      	mov	sp, r7
    2a7e:	b006      	add	sp, #24
    2a80:	bd80      	pop	{r7, pc}
    2a82:	46c0      	nop			; (mov r8, r8)
    2a84:	20004240 	.word	0x20004240
    2a88:	20004280 	.word	0x20004280
    2a8c:	00001aed 	.word	0x00001aed

00002a90 <platform_read>:
 * @param[in]   len Length of the data to be read
 * @return      Returns what the function "I2cReadDataWait" returns
 * @note        STUDENTS TO FILL  
*****************************************************************************/
static  int32_t platform_read(void *handle, uint8_t reg, uint8_t *bufp, uint16_t len)
{
    2a90:	b580      	push	{r7, lr}
    2a92:	b084      	sub	sp, #16
    2a94:	af00      	add	r7, sp, #0
    2a96:	60f8      	str	r0, [r7, #12]
    2a98:	0008      	movs	r0, r1
    2a9a:	607a      	str	r2, [r7, #4]
    2a9c:	0019      	movs	r1, r3
    2a9e:	230b      	movs	r3, #11
    2aa0:	18fb      	adds	r3, r7, r3
    2aa2:	1c02      	adds	r2, r0, #0
    2aa4:	701a      	strb	r2, [r3, #0]
    2aa6:	2308      	movs	r3, #8
    2aa8:	18fb      	adds	r3, r7, r3
    2aaa:	1c0a      	adds	r2, r1, #0
    2aac:	801a      	strh	r2, [r3, #0]
	//YOUR JOB: Fill out the structure "imuData" to send to the device
	//TIP: Check the structure "imuData" and notice that it has a msgOut and msgIn parameter. How do we fill this to our advantage?
	msgOutImu[0] = reg;
    2aae:	4b10      	ldr	r3, [pc, #64]	; (2af0 <platform_read+0x60>)
    2ab0:	220b      	movs	r2, #11
    2ab2:	18ba      	adds	r2, r7, r2
    2ab4:	7812      	ldrb	r2, [r2, #0]
    2ab6:	701a      	strb	r2, [r3, #0]
	imuData.address = 0x6B;
    2ab8:	4b0e      	ldr	r3, [pc, #56]	; (2af4 <platform_read+0x64>)
    2aba:	226b      	movs	r2, #107	; 0x6b
    2abc:	701a      	strb	r2, [r3, #0]
	imuData.msgIn = bufp;
    2abe:	4b0d      	ldr	r3, [pc, #52]	; (2af4 <platform_read+0x64>)
    2ac0:	687a      	ldr	r2, [r7, #4]
    2ac2:	609a      	str	r2, [r3, #8]
	imuData.lenIn = len;
    2ac4:	4b0b      	ldr	r3, [pc, #44]	; (2af4 <platform_read+0x64>)
    2ac6:	2208      	movs	r2, #8
    2ac8:	18ba      	adds	r2, r7, r2
    2aca:	8812      	ldrh	r2, [r2, #0]
    2acc:	819a      	strh	r2, [r3, #12]
	imuData.lenOut = 1;
    2ace:	4b09      	ldr	r3, [pc, #36]	; (2af4 <platform_read+0x64>)
    2ad0:	2201      	movs	r2, #1
    2ad2:	81da      	strh	r2, [r3, #14]
	imuData.msgOut = &msgOutImu;
    2ad4:	4b07      	ldr	r3, [pc, #28]	; (2af4 <platform_read+0x64>)
    2ad6:	4a06      	ldr	r2, [pc, #24]	; (2af0 <platform_read+0x60>)
    2ad8:	605a      	str	r2, [r3, #4]
	
	return I2cReadDataWait(&imuData, 100, 100);
    2ada:	4b06      	ldr	r3, [pc, #24]	; (2af4 <platform_read+0x64>)
    2adc:	2264      	movs	r2, #100	; 0x64
    2ade:	2164      	movs	r1, #100	; 0x64
    2ae0:	0018      	movs	r0, r3
    2ae2:	4b05      	ldr	r3, [pc, #20]	; (2af8 <platform_read+0x68>)
    2ae4:	4798      	blx	r3
    2ae6:	0003      	movs	r3, r0
}
    2ae8:	0018      	movs	r0, r3
    2aea:	46bd      	mov	sp, r7
    2aec:	b004      	add	sp, #16
    2aee:	bd80      	pop	{r7, pc}
    2af0:	20004240 	.word	0x20004240
    2af4:	20004280 	.word	0x20004280
    2af8:	00001bc5 	.word	0x00001bc5

00002afc <GetImuStruct>:


stmdev_ctx_t * GetImuStruct(void)
{
    2afc:	b580      	push	{r7, lr}
    2afe:	af00      	add	r7, sp, #0
return &dev_ctx;
    2b00:	4b01      	ldr	r3, [pc, #4]	; (2b08 <GetImuStruct+0xc>)
}
    2b02:	0018      	movs	r0, r3
    2b04:	46bd      	mov	sp, r7
    2b06:	bd80      	pop	{r7, pc}
    2b08:	20000014 	.word	0x20000014

00002b0c <InitImu>:



int32_t InitImu(void)
{
    2b0c:	b580      	push	{r7, lr}
    2b0e:	b082      	sub	sp, #8
    2b10:	af00      	add	r7, sp, #0
uint8_t rst;
int32_t error = 0;
    2b12:	2300      	movs	r3, #0
    2b14:	607b      	str	r3, [r7, #4]
/*
   * Restore default configuration
   */
  error = lsm6dso_reset_set(&dev_ctx, PROPERTY_ENABLE);
    2b16:	4b23      	ldr	r3, [pc, #140]	; (2ba4 <InitImu+0x98>)
    2b18:	2101      	movs	r1, #1
    2b1a:	0018      	movs	r0, r3
    2b1c:	4b22      	ldr	r3, [pc, #136]	; (2ba8 <InitImu+0x9c>)
    2b1e:	4798      	blx	r3
    2b20:	0003      	movs	r3, r0
    2b22:	607b      	str	r3, [r7, #4]
  do {
    error |= lsm6dso_reset_get(&dev_ctx, &rst);
    2b24:	1cfa      	adds	r2, r7, #3
    2b26:	4b1f      	ldr	r3, [pc, #124]	; (2ba4 <InitImu+0x98>)
    2b28:	0011      	movs	r1, r2
    2b2a:	0018      	movs	r0, r3
    2b2c:	4b1f      	ldr	r3, [pc, #124]	; (2bac <InitImu+0xa0>)
    2b2e:	4798      	blx	r3
    2b30:	0002      	movs	r2, r0
    2b32:	687b      	ldr	r3, [r7, #4]
    2b34:	4313      	orrs	r3, r2
    2b36:	607b      	str	r3, [r7, #4]
  } while (rst);
    2b38:	1cfb      	adds	r3, r7, #3
    2b3a:	781b      	ldrb	r3, [r3, #0]
    2b3c:	2b00      	cmp	r3, #0
    2b3e:	d1f1      	bne.n	2b24 <InitImu+0x18>

  /* Disable I3C interface */
  lsm6dso_i3c_disable_set(&dev_ctx, LSM6DSO_I3C_DISABLE);
    2b40:	4b18      	ldr	r3, [pc, #96]	; (2ba4 <InitImu+0x98>)
    2b42:	2180      	movs	r1, #128	; 0x80
    2b44:	0018      	movs	r0, r3
    2b46:	4b1a      	ldr	r3, [pc, #104]	; (2bb0 <InitImu+0xa4>)
    2b48:	4798      	blx	r3
  /* Enable Block Data Update */
  lsm6dso_block_data_update_set(&dev_ctx, PROPERTY_ENABLE);
    2b4a:	4b16      	ldr	r3, [pc, #88]	; (2ba4 <InitImu+0x98>)
    2b4c:	2101      	movs	r1, #1
    2b4e:	0018      	movs	r0, r3
    2b50:	4b18      	ldr	r3, [pc, #96]	; (2bb4 <InitImu+0xa8>)
    2b52:	4798      	blx	r3
  /* Weight of XL user offset to 2^(-10) g/LSB */
  lsm6dso_xl_offset_weight_set(&dev_ctx, LSM6DSO_LSb_1mg);
    2b54:	4b13      	ldr	r3, [pc, #76]	; (2ba4 <InitImu+0x98>)
    2b56:	2100      	movs	r1, #0
    2b58:	0018      	movs	r0, r3
    2b5a:	4b17      	ldr	r3, [pc, #92]	; (2bb8 <InitImu+0xac>)
    2b5c:	4798      	blx	r3
  /* Accelerometer X,Y,Z axis user offset correction expressed
   * in two’s complement. Set X to 48mg, Y tp 64 mg, Z to -127 mg
   */

  /* Set Output Data Rate */
  lsm6dso_xl_data_rate_set(&dev_ctx, LSM6DSO_XL_ODR_12Hz5);
    2b5e:	4b11      	ldr	r3, [pc, #68]	; (2ba4 <InitImu+0x98>)
    2b60:	2101      	movs	r1, #1
    2b62:	0018      	movs	r0, r3
    2b64:	4b15      	ldr	r3, [pc, #84]	; (2bbc <InitImu+0xb0>)
    2b66:	4798      	blx	r3
  lsm6dso_gy_data_rate_set(&dev_ctx, LSM6DSO_GY_ODR_12Hz5);
    2b68:	4b0e      	ldr	r3, [pc, #56]	; (2ba4 <InitImu+0x98>)
    2b6a:	2101      	movs	r1, #1
    2b6c:	0018      	movs	r0, r3
    2b6e:	4b14      	ldr	r3, [pc, #80]	; (2bc0 <InitImu+0xb4>)
    2b70:	4798      	blx	r3
  /* Set full scale */
  lsm6dso_xl_full_scale_set(&dev_ctx, LSM6DSO_2g);
    2b72:	4b0c      	ldr	r3, [pc, #48]	; (2ba4 <InitImu+0x98>)
    2b74:	2100      	movs	r1, #0
    2b76:	0018      	movs	r0, r3
    2b78:	4b12      	ldr	r3, [pc, #72]	; (2bc4 <InitImu+0xb8>)
    2b7a:	4798      	blx	r3
  lsm6dso_gy_full_scale_set(&dev_ctx, LSM6DSO_2000dps);
    2b7c:	4b09      	ldr	r3, [pc, #36]	; (2ba4 <InitImu+0x98>)
    2b7e:	2106      	movs	r1, #6
    2b80:	0018      	movs	r0, r3
    2b82:	4b11      	ldr	r3, [pc, #68]	; (2bc8 <InitImu+0xbc>)
    2b84:	4798      	blx	r3
  /* Configure filtering chain(No aux interface). */
  /* Accelerometer - LPF1 + LPF2 path */
  lsm6dso_xl_hp_path_on_out_set(&dev_ctx, LSM6DSO_LP_ODR_DIV_100);
    2b86:	4b07      	ldr	r3, [pc, #28]	; (2ba4 <InitImu+0x98>)
    2b88:	2104      	movs	r1, #4
    2b8a:	0018      	movs	r0, r3
    2b8c:	4b0f      	ldr	r3, [pc, #60]	; (2bcc <InitImu+0xc0>)
    2b8e:	4798      	blx	r3
  lsm6dso_xl_filter_lp2_set(&dev_ctx, PROPERTY_ENABLE);
    2b90:	4b04      	ldr	r3, [pc, #16]	; (2ba4 <InitImu+0x98>)
    2b92:	2101      	movs	r1, #1
    2b94:	0018      	movs	r0, r3
    2b96:	4b0e      	ldr	r3, [pc, #56]	; (2bd0 <InitImu+0xc4>)
    2b98:	4798      	blx	r3

  return error;
    2b9a:	687b      	ldr	r3, [r7, #4]
}
    2b9c:	0018      	movs	r0, r3
    2b9e:	46bd      	mov	sp, r7
    2ba0:	b002      	add	sp, #8
    2ba2:	bd80      	pop	{r7, pc}
    2ba4:	20000014 	.word	0x20000014
    2ba8:	00002659 	.word	0x00002659
    2bac:	000026c5 	.word	0x000026c5
    2bb0:	00002825 	.word	0x00002825
    2bb4:	00002401 	.word	0x00002401
    2bb8:	0000246d 	.word	0x0000246d
    2bbc:	00001e0d 	.word	0x00001e0d
    2bc0:	0000213d 	.word	0x0000213d
    2bc4:	00001da1 	.word	0x00001da1
    2bc8:	000020d1 	.word	0x000020d1
    2bcc:	0000276d 	.word	0x0000276d
    2bd0:	00002701 	.word	0x00002701

00002bd4 <system_pinmux_get_group_from_gpio_pin>:
 *
 * \return Base address of the associated PORT module.
 */
static inline PortGroup* system_pinmux_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
    2bd4:	b580      	push	{r7, lr}
    2bd6:	b084      	sub	sp, #16
    2bd8:	af00      	add	r7, sp, #0
    2bda:	0002      	movs	r2, r0
    2bdc:	1dfb      	adds	r3, r7, #7
    2bde:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
    2be0:	230f      	movs	r3, #15
    2be2:	18fb      	adds	r3, r7, r3
    2be4:	1dfa      	adds	r2, r7, #7
    2be6:	7812      	ldrb	r2, [r2, #0]
    2be8:	09d2      	lsrs	r2, r2, #7
    2bea:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
    2bec:	230e      	movs	r3, #14
    2bee:	18fb      	adds	r3, r7, r3
    2bf0:	1dfa      	adds	r2, r7, #7
    2bf2:	7812      	ldrb	r2, [r2, #0]
    2bf4:	0952      	lsrs	r2, r2, #5
    2bf6:	701a      	strb	r2, [r3, #0]

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
    2bf8:	4b0d      	ldr	r3, [pc, #52]	; (2c30 <system_pinmux_get_group_from_gpio_pin+0x5c>)
    2bfa:	60bb      	str	r3, [r7, #8]

	if (port_index < PORT_INST_NUM) {
    2bfc:	230f      	movs	r3, #15
    2bfe:	18fb      	adds	r3, r7, r3
    2c00:	781b      	ldrb	r3, [r3, #0]
    2c02:	2b00      	cmp	r3, #0
    2c04:	d10f      	bne.n	2c26 <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
    2c06:	230f      	movs	r3, #15
    2c08:	18fb      	adds	r3, r7, r3
    2c0a:	781b      	ldrb	r3, [r3, #0]
    2c0c:	009b      	lsls	r3, r3, #2
    2c0e:	2210      	movs	r2, #16
    2c10:	4694      	mov	ip, r2
    2c12:	44bc      	add	ip, r7
    2c14:	4463      	add	r3, ip
    2c16:	3b08      	subs	r3, #8
    2c18:	681a      	ldr	r2, [r3, #0]
    2c1a:	230e      	movs	r3, #14
    2c1c:	18fb      	adds	r3, r7, r3
    2c1e:	781b      	ldrb	r3, [r3, #0]
    2c20:	01db      	lsls	r3, r3, #7
    2c22:	18d3      	adds	r3, r2, r3
    2c24:	e000      	b.n	2c28 <system_pinmux_get_group_from_gpio_pin+0x54>
	} else {
		Assert(false);
		return NULL;
    2c26:	2300      	movs	r3, #0
	}
}
    2c28:	0018      	movs	r0, r3
    2c2a:	46bd      	mov	sp, r7
    2c2c:	b004      	add	sp, #16
    2c2e:	bd80      	pop	{r7, pc}
    2c30:	41004400 	.word	0x41004400

00002c34 <port_get_group_from_gpio_pin>:
 *
 *  \return Base address of the associated PORT module.
 */
static inline PortGroup* port_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
    2c34:	b580      	push	{r7, lr}
    2c36:	b082      	sub	sp, #8
    2c38:	af00      	add	r7, sp, #0
    2c3a:	0002      	movs	r2, r0
    2c3c:	1dfb      	adds	r3, r7, #7
    2c3e:	701a      	strb	r2, [r3, #0]
	return system_pinmux_get_group_from_gpio_pin(gpio_pin);
    2c40:	1dfb      	adds	r3, r7, #7
    2c42:	781b      	ldrb	r3, [r3, #0]
    2c44:	0018      	movs	r0, r3
    2c46:	4b03      	ldr	r3, [pc, #12]	; (2c54 <port_get_group_from_gpio_pin+0x20>)
    2c48:	4798      	blx	r3
    2c4a:	0003      	movs	r3, r0
}
    2c4c:	0018      	movs	r0, r3
    2c4e:	46bd      	mov	sp, r7
    2c50:	b002      	add	sp, #8
    2c52:	bd80      	pop	{r7, pc}
    2c54:	00002bd5 	.word	0x00002bd5

00002c58 <port_pin_set_output_level>:
 *  \param[in] level     Logical level to set the given pin to
 */
static inline void port_pin_set_output_level(
		const uint8_t gpio_pin,
		const bool level)
{
    2c58:	b580      	push	{r7, lr}
    2c5a:	b084      	sub	sp, #16
    2c5c:	af00      	add	r7, sp, #0
    2c5e:	0002      	movs	r2, r0
    2c60:	1dfb      	adds	r3, r7, #7
    2c62:	701a      	strb	r2, [r3, #0]
    2c64:	1dbb      	adds	r3, r7, #6
    2c66:	1c0a      	adds	r2, r1, #0
    2c68:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
    2c6a:	1dfb      	adds	r3, r7, #7
    2c6c:	781b      	ldrb	r3, [r3, #0]
    2c6e:	0018      	movs	r0, r3
    2c70:	4b0d      	ldr	r3, [pc, #52]	; (2ca8 <port_pin_set_output_level+0x50>)
    2c72:	4798      	blx	r3
    2c74:	0003      	movs	r3, r0
    2c76:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    2c78:	1dfb      	adds	r3, r7, #7
    2c7a:	781b      	ldrb	r3, [r3, #0]
    2c7c:	221f      	movs	r2, #31
    2c7e:	4013      	ands	r3, r2
    2c80:	2201      	movs	r2, #1
    2c82:	409a      	lsls	r2, r3
    2c84:	0013      	movs	r3, r2
    2c86:	60bb      	str	r3, [r7, #8]

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
    2c88:	1dbb      	adds	r3, r7, #6
    2c8a:	781b      	ldrb	r3, [r3, #0]
    2c8c:	2b00      	cmp	r3, #0
    2c8e:	d003      	beq.n	2c98 <port_pin_set_output_level+0x40>
		port_base->OUTSET.reg = pin_mask;
    2c90:	68fb      	ldr	r3, [r7, #12]
    2c92:	68ba      	ldr	r2, [r7, #8]
    2c94:	619a      	str	r2, [r3, #24]
	} else {
		port_base->OUTCLR.reg = pin_mask;
	}
}
    2c96:	e002      	b.n	2c9e <port_pin_set_output_level+0x46>
		port_base->OUTCLR.reg = pin_mask;
    2c98:	68fb      	ldr	r3, [r7, #12]
    2c9a:	68ba      	ldr	r2, [r7, #8]
    2c9c:	615a      	str	r2, [r3, #20]
}
    2c9e:	46c0      	nop			; (mov r8, r8)
    2ca0:	46bd      	mov	sp, r7
    2ca2:	b004      	add	sp, #16
    2ca4:	bd80      	pop	{r7, pc}
    2ca6:	46c0      	nop			; (mov r8, r8)
    2ca8:	00002c35 	.word	0x00002c35

00002cac <init_state>:

/**
 * \brief Initialize download state to not ready.
 */
static void init_state(void)
{
    2cac:	b580      	push	{r7, lr}
    2cae:	af00      	add	r7, sp, #0
    down_state = NOT_READY;
    2cb0:	4b02      	ldr	r3, [pc, #8]	; (2cbc <init_state+0x10>)
    2cb2:	2200      	movs	r2, #0
    2cb4:	701a      	strb	r2, [r3, #0]
}
    2cb6:	46c0      	nop			; (mov r8, r8)
    2cb8:	46bd      	mov	sp, r7
    2cba:	bd80      	pop	{r7, pc}
    2cbc:	2000049d 	.word	0x2000049d

00002cc0 <clear_state>:
/**
 * \brief Clear state parameter at download processing state.
 * \param[in] mask Check download_state.
 */
static void clear_state(download_state mask)
{
    2cc0:	b580      	push	{r7, lr}
    2cc2:	b082      	sub	sp, #8
    2cc4:	af00      	add	r7, sp, #0
    2cc6:	0002      	movs	r2, r0
    2cc8:	1dfb      	adds	r3, r7, #7
    2cca:	701a      	strb	r2, [r3, #0]
    down_state &= ~mask;
    2ccc:	1dfb      	adds	r3, r7, #7
    2cce:	781b      	ldrb	r3, [r3, #0]
    2cd0:	b25b      	sxtb	r3, r3
    2cd2:	43db      	mvns	r3, r3
    2cd4:	b25b      	sxtb	r3, r3
    2cd6:	4a06      	ldr	r2, [pc, #24]	; (2cf0 <clear_state+0x30>)
    2cd8:	7812      	ldrb	r2, [r2, #0]
    2cda:	b252      	sxtb	r2, r2
    2cdc:	4013      	ands	r3, r2
    2cde:	b25b      	sxtb	r3, r3
    2ce0:	b2da      	uxtb	r2, r3
    2ce2:	4b03      	ldr	r3, [pc, #12]	; (2cf0 <clear_state+0x30>)
    2ce4:	701a      	strb	r2, [r3, #0]
}
    2ce6:	46c0      	nop			; (mov r8, r8)
    2ce8:	46bd      	mov	sp, r7
    2cea:	b002      	add	sp, #8
    2cec:	bd80      	pop	{r7, pc}
    2cee:	46c0      	nop			; (mov r8, r8)
    2cf0:	2000049d 	.word	0x2000049d

00002cf4 <add_state>:
/**
 * \brief Add state parameter at download processing state.
 * \param[in] mask Check download_state.
 */
static void add_state(download_state mask)
{
    2cf4:	b580      	push	{r7, lr}
    2cf6:	b082      	sub	sp, #8
    2cf8:	af00      	add	r7, sp, #0
    2cfa:	0002      	movs	r2, r0
    2cfc:	1dfb      	adds	r3, r7, #7
    2cfe:	701a      	strb	r2, [r3, #0]
    down_state |= mask;
    2d00:	4b05      	ldr	r3, [pc, #20]	; (2d18 <add_state+0x24>)
    2d02:	781a      	ldrb	r2, [r3, #0]
    2d04:	1dfb      	adds	r3, r7, #7
    2d06:	781b      	ldrb	r3, [r3, #0]
    2d08:	4313      	orrs	r3, r2
    2d0a:	b2da      	uxtb	r2, r3
    2d0c:	4b02      	ldr	r3, [pc, #8]	; (2d18 <add_state+0x24>)
    2d0e:	701a      	strb	r2, [r3, #0]
}
    2d10:	46c0      	nop			; (mov r8, r8)
    2d12:	46bd      	mov	sp, r7
    2d14:	b002      	add	sp, #8
    2d16:	bd80      	pop	{r7, pc}
    2d18:	2000049d 	.word	0x2000049d

00002d1c <is_state_set>:
 * \param[in] mask Check download_state.
 * \return true if this state is set, false otherwise.
 */

static inline bool is_state_set(download_state mask)
{
    2d1c:	b580      	push	{r7, lr}
    2d1e:	b082      	sub	sp, #8
    2d20:	af00      	add	r7, sp, #0
    2d22:	0002      	movs	r2, r0
    2d24:	1dfb      	adds	r3, r7, #7
    2d26:	701a      	strb	r2, [r3, #0]
    return ((down_state & mask) != 0);
    2d28:	4b06      	ldr	r3, [pc, #24]	; (2d44 <is_state_set+0x28>)
    2d2a:	781b      	ldrb	r3, [r3, #0]
    2d2c:	1dfa      	adds	r2, r7, #7
    2d2e:	7812      	ldrb	r2, [r2, #0]
    2d30:	4013      	ands	r3, r2
    2d32:	b2db      	uxtb	r3, r3
    2d34:	1e5a      	subs	r2, r3, #1
    2d36:	4193      	sbcs	r3, r2
    2d38:	b2db      	uxtb	r3, r3
}
    2d3a:	0018      	movs	r0, r3
    2d3c:	46bd      	mov	sp, r7
    2d3e:	b002      	add	sp, #8
    2d40:	bd80      	pop	{r7, pc}
    2d42:	46c0      	nop			; (mov r8, r8)
    2d44:	2000049d 	.word	0x2000049d

00002d48 <is_exist_file>:
 * \param[in] fp The file pointer to check.
 * \param[in] file_path_name The file name to check.
 * \return true if this file name is exist, false otherwise.
 */
static bool is_exist_file(FIL *fp, const char *file_path_name)
{
    2d48:	b590      	push	{r4, r7, lr}
    2d4a:	b085      	sub	sp, #20
    2d4c:	af00      	add	r7, sp, #0
    2d4e:	6078      	str	r0, [r7, #4]
    2d50:	6039      	str	r1, [r7, #0]
    if (fp == NULL || file_path_name == NULL) {
    2d52:	687b      	ldr	r3, [r7, #4]
    2d54:	2b00      	cmp	r3, #0
    2d56:	d002      	beq.n	2d5e <is_exist_file+0x16>
    2d58:	683b      	ldr	r3, [r7, #0]
    2d5a:	2b00      	cmp	r3, #0
    2d5c:	d101      	bne.n	2d62 <is_exist_file+0x1a>
        return false;
    2d5e:	2300      	movs	r3, #0
    2d60:	e013      	b.n	2d8a <is_exist_file+0x42>
    }

    FRESULT ret = f_open(&file_object, (char const *)file_path_name, FA_OPEN_EXISTING);
    2d62:	230f      	movs	r3, #15
    2d64:	18fc      	adds	r4, r7, r3
    2d66:	6839      	ldr	r1, [r7, #0]
    2d68:	4b0a      	ldr	r3, [pc, #40]	; (2d94 <is_exist_file+0x4c>)
    2d6a:	2200      	movs	r2, #0
    2d6c:	0018      	movs	r0, r3
    2d6e:	4b0a      	ldr	r3, [pc, #40]	; (2d98 <is_exist_file+0x50>)
    2d70:	4798      	blx	r3
    2d72:	0003      	movs	r3, r0
    2d74:	7023      	strb	r3, [r4, #0]
    f_close(&file_object);
    2d76:	4b07      	ldr	r3, [pc, #28]	; (2d94 <is_exist_file+0x4c>)
    2d78:	0018      	movs	r0, r3
    2d7a:	4b08      	ldr	r3, [pc, #32]	; (2d9c <is_exist_file+0x54>)
    2d7c:	4798      	blx	r3
    return (ret == FR_OK);
    2d7e:	230f      	movs	r3, #15
    2d80:	18fb      	adds	r3, r7, r3
    2d82:	781b      	ldrb	r3, [r3, #0]
    2d84:	425a      	negs	r2, r3
    2d86:	4153      	adcs	r3, r2
    2d88:	b2db      	uxtb	r3, r3
}
    2d8a:	0018      	movs	r0, r3
    2d8c:	46bd      	mov	sp, r7
    2d8e:	b005      	add	sp, #20
    2d90:	bd90      	pop	{r4, r7, pc}
    2d92:	46c0      	nop			; (mov r8, r8)
    2d94:	200006d0 	.word	0x200006d0
    2d98:	0001a831 	.word	0x0001a831
    2d9c:	0001b231 	.word	0x0001b231

00002da0 <rename_to_unique>:
 * \param[out] file_path_name The file name change to uniquely and changed name is returned to this buffer.
 * \param[in] max_len Maximum file name length.
 * \return true if this file name is unique, false otherwise.
 */
static bool rename_to_unique(FIL *fp, char *file_path_name, uint8_t max_len)
{
    2da0:	b580      	push	{r7, lr}
    2da2:	b09e      	sub	sp, #120	; 0x78
    2da4:	af00      	add	r7, sp, #0
    2da6:	60f8      	str	r0, [r7, #12]
    2da8:	60b9      	str	r1, [r7, #8]
    2daa:	1dfb      	adds	r3, r7, #7
    2dac:	701a      	strb	r2, [r3, #0]
#define NUMBRING_MAX (3)
#define ADDITION_SIZE (NUMBRING_MAX + 1) /* '-' character is added before the number. */
    uint16_t i = 1, name_len = 0, ext_len = 0, count = 0;
    2dae:	2376      	movs	r3, #118	; 0x76
    2db0:	18fb      	adds	r3, r7, r3
    2db2:	2201      	movs	r2, #1
    2db4:	801a      	strh	r2, [r3, #0]
    2db6:	2374      	movs	r3, #116	; 0x74
    2db8:	18fb      	adds	r3, r7, r3
    2dba:	2200      	movs	r2, #0
    2dbc:	801a      	strh	r2, [r3, #0]
    2dbe:	236e      	movs	r3, #110	; 0x6e
    2dc0:	18fb      	adds	r3, r7, r3
    2dc2:	2200      	movs	r2, #0
    2dc4:	801a      	strh	r2, [r3, #0]
    2dc6:	2372      	movs	r3, #114	; 0x72
    2dc8:	18fb      	adds	r3, r7, r3
    2dca:	2200      	movs	r2, #0
    2dcc:	801a      	strh	r2, [r3, #0]
    char name[MAIN_MAX_FILE_NAME_LENGTH + 1] = {0};
    2dce:	2324      	movs	r3, #36	; 0x24
    2dd0:	18fb      	adds	r3, r7, r3
    2dd2:	0018      	movs	r0, r3
    2dd4:	2341      	movs	r3, #65	; 0x41
    2dd6:	001a      	movs	r2, r3
    2dd8:	2100      	movs	r1, #0
    2dda:	4b92      	ldr	r3, [pc, #584]	; (3024 <rename_to_unique+0x284>)
    2ddc:	4798      	blx	r3
    char ext[MAIN_MAX_FILE_EXT_LENGTH + 1] = {0};
    2dde:	2318      	movs	r3, #24
    2de0:	18fb      	adds	r3, r7, r3
    2de2:	0018      	movs	r0, r3
    2de4:	2309      	movs	r3, #9
    2de6:	001a      	movs	r2, r3
    2de8:	2100      	movs	r1, #0
    2dea:	4b8e      	ldr	r3, [pc, #568]	; (3024 <rename_to_unique+0x284>)
    2dec:	4798      	blx	r3
    char numbering[NUMBRING_MAX + 1] = {0};
    2dee:	2314      	movs	r3, #20
    2df0:	18fb      	adds	r3, r7, r3
    2df2:	2200      	movs	r2, #0
    2df4:	601a      	str	r2, [r3, #0]
    char *p = NULL;
    2df6:	2300      	movs	r3, #0
    2df8:	66bb      	str	r3, [r7, #104]	; 0x68
    bool valid_ext = false;
    2dfa:	2371      	movs	r3, #113	; 0x71
    2dfc:	18fb      	adds	r3, r7, r3
    2dfe:	2200      	movs	r2, #0
    2e00:	701a      	strb	r2, [r3, #0]

    if (file_path_name == NULL) {
    2e02:	68bb      	ldr	r3, [r7, #8]
    2e04:	2b00      	cmp	r3, #0
    2e06:	d101      	bne.n	2e0c <rename_to_unique+0x6c>
        return false;
    2e08:	2300      	movs	r3, #0
    2e0a:	e106      	b.n	301a <rename_to_unique+0x27a>
    }

    if (!is_exist_file(fp, file_path_name)) {
    2e0c:	68ba      	ldr	r2, [r7, #8]
    2e0e:	68fb      	ldr	r3, [r7, #12]
    2e10:	0011      	movs	r1, r2
    2e12:	0018      	movs	r0, r3
    2e14:	4b84      	ldr	r3, [pc, #528]	; (3028 <rename_to_unique+0x288>)
    2e16:	4798      	blx	r3
    2e18:	0003      	movs	r3, r0
    2e1a:	001a      	movs	r2, r3
    2e1c:	2301      	movs	r3, #1
    2e1e:	4053      	eors	r3, r2
    2e20:	b2db      	uxtb	r3, r3
    2e22:	2b00      	cmp	r3, #0
    2e24:	d001      	beq.n	2e2a <rename_to_unique+0x8a>
        return true;
    2e26:	2301      	movs	r3, #1
    2e28:	e0f7      	b.n	301a <rename_to_unique+0x27a>
    } else if (strlen(file_path_name) > MAIN_MAX_FILE_NAME_LENGTH) {
    2e2a:	68bb      	ldr	r3, [r7, #8]
    2e2c:	0018      	movs	r0, r3
    2e2e:	4b7f      	ldr	r3, [pc, #508]	; (302c <rename_to_unique+0x28c>)
    2e30:	4798      	blx	r3
    2e32:	0003      	movs	r3, r0
    2e34:	2b40      	cmp	r3, #64	; 0x40
    2e36:	d901      	bls.n	2e3c <rename_to_unique+0x9c>
        return false;
    2e38:	2300      	movs	r3, #0
    2e3a:	e0ee      	b.n	301a <rename_to_unique+0x27a>
    }

    p = strrchr(file_path_name, '.');
    2e3c:	68bb      	ldr	r3, [r7, #8]
    2e3e:	212e      	movs	r1, #46	; 0x2e
    2e40:	0018      	movs	r0, r3
    2e42:	4b7b      	ldr	r3, [pc, #492]	; (3030 <rename_to_unique+0x290>)
    2e44:	4798      	blx	r3
    2e46:	0003      	movs	r3, r0
    2e48:	66bb      	str	r3, [r7, #104]	; 0x68
    if (p != NULL) {
    2e4a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
    2e4c:	2b00      	cmp	r3, #0
    2e4e:	d052      	beq.n	2ef6 <rename_to_unique+0x156>
        ext_len = strlen(p);
    2e50:	6ebb      	ldr	r3, [r7, #104]	; 0x68
    2e52:	0018      	movs	r0, r3
    2e54:	4b75      	ldr	r3, [pc, #468]	; (302c <rename_to_unique+0x28c>)
    2e56:	4798      	blx	r3
    2e58:	0002      	movs	r2, r0
    2e5a:	236e      	movs	r3, #110	; 0x6e
    2e5c:	18fb      	adds	r3, r7, r3
    2e5e:	801a      	strh	r2, [r3, #0]
        if (ext_len < MAIN_MAX_FILE_EXT_LENGTH) {
    2e60:	236e      	movs	r3, #110	; 0x6e
    2e62:	18fb      	adds	r3, r7, r3
    2e64:	881b      	ldrh	r3, [r3, #0]
    2e66:	2b07      	cmp	r3, #7
    2e68:	d837      	bhi.n	2eda <rename_to_unique+0x13a>
            valid_ext = true;
    2e6a:	2371      	movs	r3, #113	; 0x71
    2e6c:	18fb      	adds	r3, r7, r3
    2e6e:	2201      	movs	r2, #1
    2e70:	701a      	strb	r2, [r3, #0]
            strcpy(ext, p);
    2e72:	6eba      	ldr	r2, [r7, #104]	; 0x68
    2e74:	2318      	movs	r3, #24
    2e76:	18fb      	adds	r3, r7, r3
    2e78:	0011      	movs	r1, r2
    2e7a:	0018      	movs	r0, r3
    2e7c:	4b6d      	ldr	r3, [pc, #436]	; (3034 <rename_to_unique+0x294>)
    2e7e:	4798      	blx	r3
            if (strlen(file_path_name) - ext_len > MAIN_MAX_FILE_NAME_LENGTH - ADDITION_SIZE) {
    2e80:	68bb      	ldr	r3, [r7, #8]
    2e82:	0018      	movs	r0, r3
    2e84:	4b69      	ldr	r3, [pc, #420]	; (302c <rename_to_unique+0x28c>)
    2e86:	4798      	blx	r3
    2e88:	0002      	movs	r2, r0
    2e8a:	236e      	movs	r3, #110	; 0x6e
    2e8c:	18fb      	adds	r3, r7, r3
    2e8e:	881b      	ldrh	r3, [r3, #0]
    2e90:	1ad3      	subs	r3, r2, r3
    2e92:	2b3c      	cmp	r3, #60	; 0x3c
    2e94:	d911      	bls.n	2eba <rename_to_unique+0x11a>
                name_len = MAIN_MAX_FILE_NAME_LENGTH - ADDITION_SIZE - ext_len;
    2e96:	2374      	movs	r3, #116	; 0x74
    2e98:	18fb      	adds	r3, r7, r3
    2e9a:	226e      	movs	r2, #110	; 0x6e
    2e9c:	18ba      	adds	r2, r7, r2
    2e9e:	8812      	ldrh	r2, [r2, #0]
    2ea0:	213c      	movs	r1, #60	; 0x3c
    2ea2:	1a8a      	subs	r2, r1, r2
    2ea4:	801a      	strh	r2, [r3, #0]
                strncpy(name, file_path_name, name_len);
    2ea6:	2374      	movs	r3, #116	; 0x74
    2ea8:	18fb      	adds	r3, r7, r3
    2eaa:	881a      	ldrh	r2, [r3, #0]
    2eac:	68b9      	ldr	r1, [r7, #8]
    2eae:	2324      	movs	r3, #36	; 0x24
    2eb0:	18fb      	adds	r3, r7, r3
    2eb2:	0018      	movs	r0, r3
    2eb4:	4b60      	ldr	r3, [pc, #384]	; (3038 <rename_to_unique+0x298>)
    2eb6:	4798      	blx	r3
    2eb8:	e02a      	b.n	2f10 <rename_to_unique+0x170>
            } else {
                name_len = (p - file_path_name);
    2eba:	6eba      	ldr	r2, [r7, #104]	; 0x68
    2ebc:	68bb      	ldr	r3, [r7, #8]
    2ebe:	1ad2      	subs	r2, r2, r3
    2ec0:	2374      	movs	r3, #116	; 0x74
    2ec2:	18fb      	adds	r3, r7, r3
    2ec4:	801a      	strh	r2, [r3, #0]
                strncpy(name, file_path_name, name_len);
    2ec6:	2374      	movs	r3, #116	; 0x74
    2ec8:	18fb      	adds	r3, r7, r3
    2eca:	881a      	ldrh	r2, [r3, #0]
    2ecc:	68b9      	ldr	r1, [r7, #8]
    2ece:	2324      	movs	r3, #36	; 0x24
    2ed0:	18fb      	adds	r3, r7, r3
    2ed2:	0018      	movs	r0, r3
    2ed4:	4b58      	ldr	r3, [pc, #352]	; (3038 <rename_to_unique+0x298>)
    2ed6:	4798      	blx	r3
    2ed8:	e01a      	b.n	2f10 <rename_to_unique+0x170>
            }
        } else {
            name_len = MAIN_MAX_FILE_NAME_LENGTH - ADDITION_SIZE;
    2eda:	2374      	movs	r3, #116	; 0x74
    2edc:	18fb      	adds	r3, r7, r3
    2ede:	223c      	movs	r2, #60	; 0x3c
    2ee0:	801a      	strh	r2, [r3, #0]
            strncpy(name, file_path_name, name_len);
    2ee2:	2374      	movs	r3, #116	; 0x74
    2ee4:	18fb      	adds	r3, r7, r3
    2ee6:	881a      	ldrh	r2, [r3, #0]
    2ee8:	68b9      	ldr	r1, [r7, #8]
    2eea:	2324      	movs	r3, #36	; 0x24
    2eec:	18fb      	adds	r3, r7, r3
    2eee:	0018      	movs	r0, r3
    2ef0:	4b51      	ldr	r3, [pc, #324]	; (3038 <rename_to_unique+0x298>)
    2ef2:	4798      	blx	r3
    2ef4:	e00c      	b.n	2f10 <rename_to_unique+0x170>
        }
    } else {
        name_len = MAIN_MAX_FILE_NAME_LENGTH - ADDITION_SIZE;
    2ef6:	2374      	movs	r3, #116	; 0x74
    2ef8:	18fb      	adds	r3, r7, r3
    2efa:	223c      	movs	r2, #60	; 0x3c
    2efc:	801a      	strh	r2, [r3, #0]
        strncpy(name, file_path_name, name_len);
    2efe:	2374      	movs	r3, #116	; 0x74
    2f00:	18fb      	adds	r3, r7, r3
    2f02:	881a      	ldrh	r2, [r3, #0]
    2f04:	68b9      	ldr	r1, [r7, #8]
    2f06:	2324      	movs	r3, #36	; 0x24
    2f08:	18fb      	adds	r3, r7, r3
    2f0a:	0018      	movs	r0, r3
    2f0c:	4b4a      	ldr	r3, [pc, #296]	; (3038 <rename_to_unique+0x298>)
    2f0e:	4798      	blx	r3
    }

    name[name_len++] = '-';
    2f10:	2374      	movs	r3, #116	; 0x74
    2f12:	18fb      	adds	r3, r7, r3
    2f14:	881b      	ldrh	r3, [r3, #0]
    2f16:	2274      	movs	r2, #116	; 0x74
    2f18:	18ba      	adds	r2, r7, r2
    2f1a:	1c59      	adds	r1, r3, #1
    2f1c:	8011      	strh	r1, [r2, #0]
    2f1e:	001a      	movs	r2, r3
    2f20:	2324      	movs	r3, #36	; 0x24
    2f22:	18fb      	adds	r3, r7, r3
    2f24:	212d      	movs	r1, #45	; 0x2d
    2f26:	5499      	strb	r1, [r3, r2]

    for (i = 0, count = 1; i < NUMBRING_MAX; i++) {
    2f28:	2376      	movs	r3, #118	; 0x76
    2f2a:	18fb      	adds	r3, r7, r3
    2f2c:	2200      	movs	r2, #0
    2f2e:	801a      	strh	r2, [r3, #0]
    2f30:	2372      	movs	r3, #114	; 0x72
    2f32:	18fb      	adds	r3, r7, r3
    2f34:	2201      	movs	r2, #1
    2f36:	801a      	strh	r2, [r3, #0]
    2f38:	e010      	b.n	2f5c <rename_to_unique+0x1bc>
        count *= 10;
    2f3a:	2372      	movs	r3, #114	; 0x72
    2f3c:	18fa      	adds	r2, r7, r3
    2f3e:	2372      	movs	r3, #114	; 0x72
    2f40:	18fb      	adds	r3, r7, r3
    2f42:	881b      	ldrh	r3, [r3, #0]
    2f44:	1c19      	adds	r1, r3, #0
    2f46:	0089      	lsls	r1, r1, #2
    2f48:	18cb      	adds	r3, r1, r3
    2f4a:	18db      	adds	r3, r3, r3
    2f4c:	8013      	strh	r3, [r2, #0]
    for (i = 0, count = 1; i < NUMBRING_MAX; i++) {
    2f4e:	2376      	movs	r3, #118	; 0x76
    2f50:	18fb      	adds	r3, r7, r3
    2f52:	881a      	ldrh	r2, [r3, #0]
    2f54:	2376      	movs	r3, #118	; 0x76
    2f56:	18fb      	adds	r3, r7, r3
    2f58:	3201      	adds	r2, #1
    2f5a:	801a      	strh	r2, [r3, #0]
    2f5c:	2376      	movs	r3, #118	; 0x76
    2f5e:	18fb      	adds	r3, r7, r3
    2f60:	881b      	ldrh	r3, [r3, #0]
    2f62:	2b02      	cmp	r3, #2
    2f64:	d9e9      	bls.n	2f3a <rename_to_unique+0x19a>
    }
    for (i = 1; i < count; i++) {
    2f66:	2376      	movs	r3, #118	; 0x76
    2f68:	18fb      	adds	r3, r7, r3
    2f6a:	2201      	movs	r2, #1
    2f6c:	801a      	strh	r2, [r3, #0]
    2f6e:	e04b      	b.n	3008 <rename_to_unique+0x268>
        sprintf(numbering, MAIN_ZERO_FMT(NUMBRING_MAX), i);
    2f70:	2376      	movs	r3, #118	; 0x76
    2f72:	18fb      	adds	r3, r7, r3
    2f74:	881a      	ldrh	r2, [r3, #0]
    2f76:	4931      	ldr	r1, [pc, #196]	; (303c <rename_to_unique+0x29c>)
    2f78:	2314      	movs	r3, #20
    2f7a:	18fb      	adds	r3, r7, r3
    2f7c:	0018      	movs	r0, r3
    2f7e:	4b30      	ldr	r3, [pc, #192]	; (3040 <rename_to_unique+0x2a0>)
    2f80:	4798      	blx	r3
        strncpy(&name[name_len], numbering, NUMBRING_MAX);
    2f82:	2374      	movs	r3, #116	; 0x74
    2f84:	18fb      	adds	r3, r7, r3
    2f86:	881b      	ldrh	r3, [r3, #0]
    2f88:	2224      	movs	r2, #36	; 0x24
    2f8a:	18ba      	adds	r2, r7, r2
    2f8c:	18d3      	adds	r3, r2, r3
    2f8e:	2214      	movs	r2, #20
    2f90:	18b9      	adds	r1, r7, r2
    2f92:	2203      	movs	r2, #3
    2f94:	0018      	movs	r0, r3
    2f96:	4b28      	ldr	r3, [pc, #160]	; (3038 <rename_to_unique+0x298>)
    2f98:	4798      	blx	r3
        if (valid_ext) {
    2f9a:	2371      	movs	r3, #113	; 0x71
    2f9c:	18fb      	adds	r3, r7, r3
    2f9e:	781b      	ldrb	r3, [r3, #0]
    2fa0:	2b00      	cmp	r3, #0
    2fa2:	d00c      	beq.n	2fbe <rename_to_unique+0x21e>
            strcpy(&name[name_len + NUMBRING_MAX], ext);
    2fa4:	2374      	movs	r3, #116	; 0x74
    2fa6:	18fb      	adds	r3, r7, r3
    2fa8:	881b      	ldrh	r3, [r3, #0]
    2faa:	3303      	adds	r3, #3
    2fac:	2224      	movs	r2, #36	; 0x24
    2fae:	18ba      	adds	r2, r7, r2
    2fb0:	18d3      	adds	r3, r2, r3
    2fb2:	2218      	movs	r2, #24
    2fb4:	18ba      	adds	r2, r7, r2
    2fb6:	0011      	movs	r1, r2
    2fb8:	0018      	movs	r0, r3
    2fba:	4b1e      	ldr	r3, [pc, #120]	; (3034 <rename_to_unique+0x294>)
    2fbc:	4798      	blx	r3
        }

        if (!is_exist_file(fp, name)) {
    2fbe:	2324      	movs	r3, #36	; 0x24
    2fc0:	18fa      	adds	r2, r7, r3
    2fc2:	68fb      	ldr	r3, [r7, #12]
    2fc4:	0011      	movs	r1, r2
    2fc6:	0018      	movs	r0, r3
    2fc8:	4b17      	ldr	r3, [pc, #92]	; (3028 <rename_to_unique+0x288>)
    2fca:	4798      	blx	r3
    2fcc:	0003      	movs	r3, r0
    2fce:	001a      	movs	r2, r3
    2fd0:	2301      	movs	r3, #1
    2fd2:	4053      	eors	r3, r2
    2fd4:	b2db      	uxtb	r3, r3
    2fd6:	2b00      	cmp	r3, #0
    2fd8:	d00f      	beq.n	2ffa <rename_to_unique+0x25a>
            memset(file_path_name, 0, max_len);
    2fda:	1dfb      	adds	r3, r7, #7
    2fdc:	781a      	ldrb	r2, [r3, #0]
    2fde:	68bb      	ldr	r3, [r7, #8]
    2fe0:	2100      	movs	r1, #0
    2fe2:	0018      	movs	r0, r3
    2fe4:	4b0f      	ldr	r3, [pc, #60]	; (3024 <rename_to_unique+0x284>)
    2fe6:	4798      	blx	r3
            strcpy(file_path_name, name);
    2fe8:	2324      	movs	r3, #36	; 0x24
    2fea:	18fa      	adds	r2, r7, r3
    2fec:	68bb      	ldr	r3, [r7, #8]
    2fee:	0011      	movs	r1, r2
    2ff0:	0018      	movs	r0, r3
    2ff2:	4b10      	ldr	r3, [pc, #64]	; (3034 <rename_to_unique+0x294>)
    2ff4:	4798      	blx	r3
            return true;
    2ff6:	2301      	movs	r3, #1
    2ff8:	e00f      	b.n	301a <rename_to_unique+0x27a>
    for (i = 1; i < count; i++) {
    2ffa:	2376      	movs	r3, #118	; 0x76
    2ffc:	18fb      	adds	r3, r7, r3
    2ffe:	881a      	ldrh	r2, [r3, #0]
    3000:	2376      	movs	r3, #118	; 0x76
    3002:	18fb      	adds	r3, r7, r3
    3004:	3201      	adds	r2, #1
    3006:	801a      	strh	r2, [r3, #0]
    3008:	2376      	movs	r3, #118	; 0x76
    300a:	18fa      	adds	r2, r7, r3
    300c:	2372      	movs	r3, #114	; 0x72
    300e:	18fb      	adds	r3, r7, r3
    3010:	8812      	ldrh	r2, [r2, #0]
    3012:	881b      	ldrh	r3, [r3, #0]
    3014:	429a      	cmp	r2, r3
    3016:	d3ab      	bcc.n	2f70 <rename_to_unique+0x1d0>
        }
    }
    return false;
    3018:	2300      	movs	r3, #0
}
    301a:	0018      	movs	r0, r3
    301c:	46bd      	mov	sp, r7
    301e:	b01e      	add	sp, #120	; 0x78
    3020:	bd80      	pop	{r7, pc}
    3022:	46c0      	nop			; (mov r8, r8)
    3024:	0002181b 	.word	0x0002181b
    3028:	00002d49 	.word	0x00002d49
    302c:	00021bd3 	.word	0x00021bd3
    3030:	00021c2d 	.word	0x00021c2d
    3034:	00021b87 	.word	0x00021b87
    3038:	00021c03 	.word	0x00021c03
    303c:	00022ee0 	.word	0x00022ee0
    3040:	00021ad9 	.word	0x00021ad9

00003044 <start_download>:

/**
 * \brief Start file download via HTTP connection.
 */
static void start_download(void)
{
    3044:	b590      	push	{r4, r7, lr}
    3046:	b085      	sub	sp, #20
    3048:	af02      	add	r7, sp, #8
    if (!is_state_set(STORAGE_READY)) {
    304a:	2001      	movs	r0, #1
    304c:	4b23      	ldr	r3, [pc, #140]	; (30dc <start_download+0x98>)
    304e:	4798      	blx	r3
    3050:	0003      	movs	r3, r0
    3052:	001a      	movs	r2, r3
    3054:	2301      	movs	r3, #1
    3056:	4053      	eors	r3, r2
    3058:	b2db      	uxtb	r3, r3
    305a:	2b00      	cmp	r3, #0
    305c:	d005      	beq.n	306a <start_download+0x26>
        LogMessage(LOG_DEBUG_LVL, "start_download: MMC storage not ready.\r\n");
    305e:	4b20      	ldr	r3, [pc, #128]	; (30e0 <start_download+0x9c>)
    3060:	0019      	movs	r1, r3
    3062:	2001      	movs	r0, #1
    3064:	4b1f      	ldr	r3, [pc, #124]	; (30e4 <start_download+0xa0>)
    3066:	4798      	blx	r3
        return;
    3068:	e034      	b.n	30d4 <start_download+0x90>
    }

    if (!is_state_set(WIFI_CONNECTED)) {
    306a:	2002      	movs	r0, #2
    306c:	4b1b      	ldr	r3, [pc, #108]	; (30dc <start_download+0x98>)
    306e:	4798      	blx	r3
    3070:	0003      	movs	r3, r0
    3072:	001a      	movs	r2, r3
    3074:	2301      	movs	r3, #1
    3076:	4053      	eors	r3, r2
    3078:	b2db      	uxtb	r3, r3
    307a:	2b00      	cmp	r3, #0
    307c:	d005      	beq.n	308a <start_download+0x46>
        LogMessage(LOG_DEBUG_LVL, "start_download: Wi-Fi is not connected.\r\n");
    307e:	4b1a      	ldr	r3, [pc, #104]	; (30e8 <start_download+0xa4>)
    3080:	0019      	movs	r1, r3
    3082:	2001      	movs	r0, #1
    3084:	4b17      	ldr	r3, [pc, #92]	; (30e4 <start_download+0xa0>)
    3086:	4798      	blx	r3
        return;
    3088:	e024      	b.n	30d4 <start_download+0x90>
    }

    if (is_state_set(GET_REQUESTED)) {
    308a:	2004      	movs	r0, #4
    308c:	4b13      	ldr	r3, [pc, #76]	; (30dc <start_download+0x98>)
    308e:	4798      	blx	r3
    3090:	1e03      	subs	r3, r0, #0
    3092:	d005      	beq.n	30a0 <start_download+0x5c>
        LogMessage(LOG_DEBUG_LVL, "start_download: request is sent already.\r\n");
    3094:	4b15      	ldr	r3, [pc, #84]	; (30ec <start_download+0xa8>)
    3096:	0019      	movs	r1, r3
    3098:	2001      	movs	r0, #1
    309a:	4b12      	ldr	r3, [pc, #72]	; (30e4 <start_download+0xa0>)
    309c:	4798      	blx	r3
        return;
    309e:	e019      	b.n	30d4 <start_download+0x90>
    }

    if (is_state_set(DOWNLOADING)) {
    30a0:	2008      	movs	r0, #8
    30a2:	4b0e      	ldr	r3, [pc, #56]	; (30dc <start_download+0x98>)
    30a4:	4798      	blx	r3
    30a6:	1e03      	subs	r3, r0, #0
    30a8:	d005      	beq.n	30b6 <start_download+0x72>
        LogMessage(LOG_DEBUG_LVL, "start_download: running download already.\r\n");
    30aa:	4b11      	ldr	r3, [pc, #68]	; (30f0 <start_download+0xac>)
    30ac:	0019      	movs	r1, r3
    30ae:	2001      	movs	r0, #1
    30b0:	4b0c      	ldr	r3, [pc, #48]	; (30e4 <start_download+0xa0>)
    30b2:	4798      	blx	r3
        return;
    30b4:	e00e      	b.n	30d4 <start_download+0x90>
    }

    /* Send the HTTP request. */
    LogMessage(LOG_DEBUG_LVL, "start_download: sending HTTP request...\r\n");
    30b6:	4b0f      	ldr	r3, [pc, #60]	; (30f4 <start_download+0xb0>)
    30b8:	0019      	movs	r1, r3
    30ba:	2001      	movs	r0, #1
    30bc:	4b09      	ldr	r3, [pc, #36]	; (30e4 <start_download+0xa0>)
    30be:	4798      	blx	r3
    int http_req_status = http_client_send_request(&http_client_module_inst, MAIN_HTTP_FILE_URL, HTTP_METHOD_GET, NULL, NULL);
    30c0:	490d      	ldr	r1, [pc, #52]	; (30f8 <start_download+0xb4>)
    30c2:	480e      	ldr	r0, [pc, #56]	; (30fc <start_download+0xb8>)
    30c4:	2300      	movs	r3, #0
    30c6:	9300      	str	r3, [sp, #0]
    30c8:	2300      	movs	r3, #0
    30ca:	2201      	movs	r2, #1
    30cc:	4c0c      	ldr	r4, [pc, #48]	; (3100 <start_download+0xbc>)
    30ce:	47a0      	blx	r4
    30d0:	0003      	movs	r3, r0
    30d2:	607b      	str	r3, [r7, #4]
}
    30d4:	46bd      	mov	sp, r7
    30d6:	b003      	add	sp, #12
    30d8:	bd90      	pop	{r4, r7, pc}
    30da:	46c0      	nop			; (mov r8, r8)
    30dc:	00002d1d 	.word	0x00002d1d
    30e0:	00022ee8 	.word	0x00022ee8
    30e4:	0000ad85 	.word	0x0000ad85
    30e8:	00022f14 	.word	0x00022f14
    30ec:	00022f40 	.word	0x00022f40
    30f0:	00022f6c 	.word	0x00022f6c
    30f4:	00022f98 	.word	0x00022f98
    30f8:	00022fc4 	.word	0x00022fc4
    30fc:	200042e8 	.word	0x200042e8
    3100:	0001de85 	.word	0x0001de85

00003104 <store_file_packet>:
 * \brief Store received packet to file.
 * \param[in] data Packet data.
 * \param[in] length Packet data length.
 */
static void store_file_packet(char *data, uint32_t length)
{
    3104:	b5b0      	push	{r4, r5, r7, lr}
    3106:	b086      	sub	sp, #24
    3108:	af00      	add	r7, sp, #0
    310a:	6078      	str	r0, [r7, #4]
    310c:	6039      	str	r1, [r7, #0]
    FRESULT ret;
    if ((data == NULL) || (length < 1)) {
    310e:	687b      	ldr	r3, [r7, #4]
    3110:	2b00      	cmp	r3, #0
    3112:	d002      	beq.n	311a <store_file_packet+0x16>
    3114:	683b      	ldr	r3, [r7, #0]
    3116:	2b00      	cmp	r3, #0
    3118:	d105      	bne.n	3126 <store_file_packet+0x22>
        LogMessage(LOG_DEBUG_LVL, "store_file_packet: empty data.\r\n");
    311a:	4b58      	ldr	r3, [pc, #352]	; (327c <store_file_packet+0x178>)
    311c:	0019      	movs	r1, r3
    311e:	2001      	movs	r0, #1
    3120:	4b57      	ldr	r3, [pc, #348]	; (3280 <store_file_packet+0x17c>)
    3122:	4798      	blx	r3
        return;
    3124:	e0a6      	b.n	3274 <store_file_packet+0x170>
    }

    if (!is_state_set(DOWNLOADING)) {
    3126:	2008      	movs	r0, #8
    3128:	4b56      	ldr	r3, [pc, #344]	; (3284 <store_file_packet+0x180>)
    312a:	4798      	blx	r3
    312c:	0003      	movs	r3, r0
    312e:	001a      	movs	r2, r3
    3130:	2301      	movs	r3, #1
    3132:	4053      	eors	r3, r2
    3134:	b2db      	uxtb	r3, r3
    3136:	2b00      	cmp	r3, #0
    3138:	d055      	beq.n	31e6 <store_file_packet+0xe2>
        char *cp = NULL;
    313a:	2300      	movs	r3, #0
    313c:	617b      	str	r3, [r7, #20]
        save_file_name[0] = LUN_ID_SD_MMC_0_MEM + '0';
    313e:	4b52      	ldr	r3, [pc, #328]	; (3288 <store_file_packet+0x184>)
    3140:	2230      	movs	r2, #48	; 0x30
    3142:	701a      	strb	r2, [r3, #0]
        save_file_name[1] = ':';
    3144:	4b50      	ldr	r3, [pc, #320]	; (3288 <store_file_packet+0x184>)
    3146:	223a      	movs	r2, #58	; 0x3a
    3148:	705a      	strb	r2, [r3, #1]
        cp = (char *)(MAIN_HTTP_FILE_URL + strlen(MAIN_HTTP_FILE_URL));
    314a:	4b50      	ldr	r3, [pc, #320]	; (328c <store_file_packet+0x188>)
    314c:	617b      	str	r3, [r7, #20]
        while (*cp != '/') {
    314e:	e002      	b.n	3156 <store_file_packet+0x52>
            cp--;
    3150:	697b      	ldr	r3, [r7, #20]
    3152:	3b01      	subs	r3, #1
    3154:	617b      	str	r3, [r7, #20]
        while (*cp != '/') {
    3156:	697b      	ldr	r3, [r7, #20]
    3158:	781b      	ldrb	r3, [r3, #0]
    315a:	2b2f      	cmp	r3, #47	; 0x2f
    315c:	d1f8      	bne.n	3150 <store_file_packet+0x4c>
        }
        if (strlen(cp) > 1) {
    315e:	697b      	ldr	r3, [r7, #20]
    3160:	0018      	movs	r0, r3
    3162:	4b4b      	ldr	r3, [pc, #300]	; (3290 <store_file_packet+0x18c>)
    3164:	4798      	blx	r3
    3166:	0003      	movs	r3, r0
    3168:	2b01      	cmp	r3, #1
    316a:	d924      	bls.n	31b6 <store_file_packet+0xb2>
            cp++;
    316c:	697b      	ldr	r3, [r7, #20]
    316e:	3301      	adds	r3, #1
    3170:	617b      	str	r3, [r7, #20]
            strcpy(&save_file_name[2], cp);
    3172:	697a      	ldr	r2, [r7, #20]
    3174:	4b47      	ldr	r3, [pc, #284]	; (3294 <store_file_packet+0x190>)
    3176:	0011      	movs	r1, r2
    3178:	0018      	movs	r0, r3
    317a:	4b47      	ldr	r3, [pc, #284]	; (3298 <store_file_packet+0x194>)
    317c:	4798      	blx	r3
            LogMessage(LOG_DEBUG_LVL, "store_file_packet: file name is invalid. Download canceled.\r\n");
            add_state(CANCELED);
            return;
        }

        rename_to_unique(&file_object, save_file_name, MAIN_MAX_FILE_NAME_LENGTH);
    317e:	4942      	ldr	r1, [pc, #264]	; (3288 <store_file_packet+0x184>)
    3180:	4b46      	ldr	r3, [pc, #280]	; (329c <store_file_packet+0x198>)
    3182:	2240      	movs	r2, #64	; 0x40
    3184:	0018      	movs	r0, r3
    3186:	4b46      	ldr	r3, [pc, #280]	; (32a0 <store_file_packet+0x19c>)
    3188:	4798      	blx	r3
        LogMessage(LOG_DEBUG_LVL, "store_file_packet: creating file [%s]\r\n", save_file_name);
    318a:	4a3f      	ldr	r2, [pc, #252]	; (3288 <store_file_packet+0x184>)
    318c:	4b45      	ldr	r3, [pc, #276]	; (32a4 <store_file_packet+0x1a0>)
    318e:	0019      	movs	r1, r3
    3190:	2001      	movs	r0, #1
    3192:	4b3b      	ldr	r3, [pc, #236]	; (3280 <store_file_packet+0x17c>)
    3194:	4798      	blx	r3
        ret = f_open(&file_object, (char const *)save_file_name, FA_CREATE_ALWAYS | FA_WRITE);
    3196:	2313      	movs	r3, #19
    3198:	18fc      	adds	r4, r7, r3
    319a:	493b      	ldr	r1, [pc, #236]	; (3288 <store_file_packet+0x184>)
    319c:	4b3f      	ldr	r3, [pc, #252]	; (329c <store_file_packet+0x198>)
    319e:	220a      	movs	r2, #10
    31a0:	0018      	movs	r0, r3
    31a2:	4b41      	ldr	r3, [pc, #260]	; (32a8 <store_file_packet+0x1a4>)
    31a4:	4798      	blx	r3
    31a6:	0003      	movs	r3, r0
    31a8:	7023      	strb	r3, [r4, #0]
        if (ret != FR_OK) {
    31aa:	2313      	movs	r3, #19
    31ac:	18fb      	adds	r3, r7, r3
    31ae:	781b      	ldrb	r3, [r3, #0]
    31b0:	2b00      	cmp	r3, #0
    31b2:	d012      	beq.n	31da <store_file_packet+0xd6>
    31b4:	e008      	b.n	31c8 <store_file_packet+0xc4>
            LogMessage(LOG_DEBUG_LVL, "store_file_packet: file name is invalid. Download canceled.\r\n");
    31b6:	4b3d      	ldr	r3, [pc, #244]	; (32ac <store_file_packet+0x1a8>)
    31b8:	0019      	movs	r1, r3
    31ba:	2001      	movs	r0, #1
    31bc:	4b30      	ldr	r3, [pc, #192]	; (3280 <store_file_packet+0x17c>)
    31be:	4798      	blx	r3
            add_state(CANCELED);
    31c0:	2020      	movs	r0, #32
    31c2:	4b3b      	ldr	r3, [pc, #236]	; (32b0 <store_file_packet+0x1ac>)
    31c4:	4798      	blx	r3
            return;
    31c6:	e055      	b.n	3274 <store_file_packet+0x170>
            LogMessage(LOG_DEBUG_LVL, "store_file_packet: file creation error! ret:%d\r\n", ret);
    31c8:	2313      	movs	r3, #19
    31ca:	18fb      	adds	r3, r7, r3
    31cc:	781a      	ldrb	r2, [r3, #0]
    31ce:	4b39      	ldr	r3, [pc, #228]	; (32b4 <store_file_packet+0x1b0>)
    31d0:	0019      	movs	r1, r3
    31d2:	2001      	movs	r0, #1
    31d4:	4b2a      	ldr	r3, [pc, #168]	; (3280 <store_file_packet+0x17c>)
    31d6:	4798      	blx	r3
            return;
    31d8:	e04c      	b.n	3274 <store_file_packet+0x170>
        }

        received_file_size = 0;
    31da:	4b37      	ldr	r3, [pc, #220]	; (32b8 <store_file_packet+0x1b4>)
    31dc:	2200      	movs	r2, #0
    31de:	601a      	str	r2, [r3, #0]
        add_state(DOWNLOADING);
    31e0:	2008      	movs	r0, #8
    31e2:	4b33      	ldr	r3, [pc, #204]	; (32b0 <store_file_packet+0x1ac>)
    31e4:	4798      	blx	r3
    }

    if (data != NULL) {
    31e6:	687b      	ldr	r3, [r7, #4]
    31e8:	2b00      	cmp	r3, #0
    31ea:	d043      	beq.n	3274 <store_file_packet+0x170>
        UINT wsize = 0;
    31ec:	2300      	movs	r3, #0
    31ee:	60fb      	str	r3, [r7, #12]
        ret = f_write(&file_object, (const void *)data, length, &wsize);
    31f0:	2313      	movs	r3, #19
    31f2:	18fc      	adds	r4, r7, r3
    31f4:	230c      	movs	r3, #12
    31f6:	18fb      	adds	r3, r7, r3
    31f8:	683a      	ldr	r2, [r7, #0]
    31fa:	6879      	ldr	r1, [r7, #4]
    31fc:	4827      	ldr	r0, [pc, #156]	; (329c <store_file_packet+0x198>)
    31fe:	4d2f      	ldr	r5, [pc, #188]	; (32bc <store_file_packet+0x1b8>)
    3200:	47a8      	blx	r5
    3202:	0003      	movs	r3, r0
    3204:	7023      	strb	r3, [r4, #0]
        if (ret != FR_OK) {
    3206:	2313      	movs	r3, #19
    3208:	18fb      	adds	r3, r7, r3
    320a:	781b      	ldrb	r3, [r3, #0]
    320c:	2b00      	cmp	r3, #0
    320e:	d00c      	beq.n	322a <store_file_packet+0x126>
            f_close(&file_object);
    3210:	4b22      	ldr	r3, [pc, #136]	; (329c <store_file_packet+0x198>)
    3212:	0018      	movs	r0, r3
    3214:	4b2a      	ldr	r3, [pc, #168]	; (32c0 <store_file_packet+0x1bc>)
    3216:	4798      	blx	r3
            add_state(CANCELED);
    3218:	2020      	movs	r0, #32
    321a:	4b25      	ldr	r3, [pc, #148]	; (32b0 <store_file_packet+0x1ac>)
    321c:	4798      	blx	r3
            LogMessage(LOG_DEBUG_LVL, "store_file_packet: file write error, download canceled.\r\n");
    321e:	4b29      	ldr	r3, [pc, #164]	; (32c4 <store_file_packet+0x1c0>)
    3220:	0019      	movs	r1, r3
    3222:	2001      	movs	r0, #1
    3224:	4b16      	ldr	r3, [pc, #88]	; (3280 <store_file_packet+0x17c>)
    3226:	4798      	blx	r3
            return;
    3228:	e024      	b.n	3274 <store_file_packet+0x170>
        }

        received_file_size += wsize;
    322a:	4b23      	ldr	r3, [pc, #140]	; (32b8 <store_file_packet+0x1b4>)
    322c:	681a      	ldr	r2, [r3, #0]
    322e:	68fb      	ldr	r3, [r7, #12]
    3230:	18d2      	adds	r2, r2, r3
    3232:	4b21      	ldr	r3, [pc, #132]	; (32b8 <store_file_packet+0x1b4>)
    3234:	601a      	str	r2, [r3, #0]
        LogMessage(LOG_DEBUG_LVL, "store_file_packet: received[%lu], file size[%lu]\r\n", (unsigned long)received_file_size, (unsigned long)http_file_size);
    3236:	4b20      	ldr	r3, [pc, #128]	; (32b8 <store_file_packet+0x1b4>)
    3238:	681a      	ldr	r2, [r3, #0]
    323a:	4b23      	ldr	r3, [pc, #140]	; (32c8 <store_file_packet+0x1c4>)
    323c:	681b      	ldr	r3, [r3, #0]
    323e:	4923      	ldr	r1, [pc, #140]	; (32cc <store_file_packet+0x1c8>)
    3240:	2001      	movs	r0, #1
    3242:	4c0f      	ldr	r4, [pc, #60]	; (3280 <store_file_packet+0x17c>)
    3244:	47a0      	blx	r4
        if (received_file_size >= http_file_size) {
    3246:	4b1c      	ldr	r3, [pc, #112]	; (32b8 <store_file_packet+0x1b4>)
    3248:	681a      	ldr	r2, [r3, #0]
    324a:	4b1f      	ldr	r3, [pc, #124]	; (32c8 <store_file_packet+0x1c4>)
    324c:	681b      	ldr	r3, [r3, #0]
    324e:	429a      	cmp	r2, r3
    3250:	d310      	bcc.n	3274 <store_file_packet+0x170>
            f_close(&file_object);
    3252:	4b12      	ldr	r3, [pc, #72]	; (329c <store_file_packet+0x198>)
    3254:	0018      	movs	r0, r3
    3256:	4b1a      	ldr	r3, [pc, #104]	; (32c0 <store_file_packet+0x1bc>)
    3258:	4798      	blx	r3
            LogMessage(LOG_DEBUG_LVL, "store_file_packet: file downloaded successfully.\r\n");
    325a:	4b1d      	ldr	r3, [pc, #116]	; (32d0 <store_file_packet+0x1cc>)
    325c:	0019      	movs	r1, r3
    325e:	2001      	movs	r0, #1
    3260:	4b07      	ldr	r3, [pc, #28]	; (3280 <store_file_packet+0x17c>)
    3262:	4798      	blx	r3
            port_pin_set_output_level(LED_0_PIN, false);
    3264:	2100      	movs	r1, #0
    3266:	2017      	movs	r0, #23
    3268:	4b1a      	ldr	r3, [pc, #104]	; (32d4 <store_file_packet+0x1d0>)
    326a:	4798      	blx	r3
            add_state(COMPLETED);
    326c:	2010      	movs	r0, #16
    326e:	4b10      	ldr	r3, [pc, #64]	; (32b0 <store_file_packet+0x1ac>)
    3270:	4798      	blx	r3
            return;
    3272:	46c0      	nop			; (mov r8, r8)
        }
    }
}
    3274:	46bd      	mov	sp, r7
    3276:	b006      	add	sp, #24
    3278:	bdb0      	pop	{r4, r5, r7, pc}
    327a:	46c0      	nop			; (mov r8, r8)
    327c:	00022fe4 	.word	0x00022fe4
    3280:	0000ad85 	.word	0x0000ad85
    3284:	00002d1d 	.word	0x00002d1d
    3288:	200000a4 	.word	0x200000a4
    328c:	00022fe1 	.word	0x00022fe1
    3290:	00021bd3 	.word	0x00021bd3
    3294:	200000a6 	.word	0x200000a6
    3298:	00021b87 	.word	0x00021b87
    329c:	200006d0 	.word	0x200006d0
    32a0:	00002da1 	.word	0x00002da1
    32a4:	00023048 	.word	0x00023048
    32a8:	0001a831 	.word	0x0001a831
    32ac:	00023008 	.word	0x00023008
    32b0:	00002cf5 	.word	0x00002cf5
    32b4:	00023070 	.word	0x00023070
    32b8:	200006f8 	.word	0x200006f8
    32bc:	0001ad61 	.word	0x0001ad61
    32c0:	0001b231 	.word	0x0001b231
    32c4:	000230a4 	.word	0x000230a4
    32c8:	200006f4 	.word	0x200006f4
    32cc:	000230e0 	.word	0x000230e0
    32d0:	00023114 	.word	0x00023114
    32d4:	00002c59 	.word	0x00002c59

000032d8 <http_client_callback>:
 * \param[in]  module_inst     Module instance of HTTP client module.
 * \param[in]  type            Type of event.
 * \param[in]  data            Data structure of the event. \refer http_client_data
 */
static void http_client_callback(struct http_client_module *module_inst, int type, union http_client_data *data)
{
    32d8:	b590      	push	{r4, r7, lr}
    32da:	b085      	sub	sp, #20
    32dc:	af00      	add	r7, sp, #0
    32de:	60f8      	str	r0, [r7, #12]
    32e0:	60b9      	str	r1, [r7, #8]
    32e2:	607a      	str	r2, [r7, #4]
    switch (type) {
    32e4:	68bb      	ldr	r3, [r7, #8]
    32e6:	2b04      	cmp	r3, #4
    32e8:	d900      	bls.n	32ec <http_client_callback+0x14>
    32ea:	e077      	b.n	33dc <http_client_callback+0x104>
    32ec:	68bb      	ldr	r3, [r7, #8]
    32ee:	009a      	lsls	r2, r3, #2
    32f0:	4b3c      	ldr	r3, [pc, #240]	; (33e4 <http_client_callback+0x10c>)
    32f2:	18d3      	adds	r3, r2, r3
    32f4:	681b      	ldr	r3, [r3, #0]
    32f6:	469f      	mov	pc, r3
        case HTTP_CLIENT_CALLBACK_SOCK_CONNECTED:
            LogMessage(LOG_DEBUG_LVL, "http_client_callback: HTTP client socket connected.\r\n");
    32f8:	4b3b      	ldr	r3, [pc, #236]	; (33e8 <http_client_callback+0x110>)
    32fa:	0019      	movs	r1, r3
    32fc:	2001      	movs	r0, #1
    32fe:	4b3b      	ldr	r3, [pc, #236]	; (33ec <http_client_callback+0x114>)
    3300:	4798      	blx	r3
            break;
    3302:	e06b      	b.n	33dc <http_client_callback+0x104>

        case HTTP_CLIENT_CALLBACK_REQUESTED:
            LogMessage(LOG_DEBUG_LVL, "http_client_callback: request completed.\r\n");
    3304:	4b3a      	ldr	r3, [pc, #232]	; (33f0 <http_client_callback+0x118>)
    3306:	0019      	movs	r1, r3
    3308:	2001      	movs	r0, #1
    330a:	4b38      	ldr	r3, [pc, #224]	; (33ec <http_client_callback+0x114>)
    330c:	4798      	blx	r3
            add_state(GET_REQUESTED);
    330e:	2004      	movs	r0, #4
    3310:	4b38      	ldr	r3, [pc, #224]	; (33f4 <http_client_callback+0x11c>)
    3312:	4798      	blx	r3
            break;
    3314:	e062      	b.n	33dc <http_client_callback+0x104>

        case HTTP_CLIENT_CALLBACK_RECV_RESPONSE:
            LogMessage(LOG_DEBUG_LVL, "http_client_callback: received response %u data size %u\r\n", (unsigned int)data->recv_response.response_code, (unsigned int)data->recv_response.content_length);
    3316:	687b      	ldr	r3, [r7, #4]
    3318:	881b      	ldrh	r3, [r3, #0]
    331a:	001a      	movs	r2, r3
    331c:	687b      	ldr	r3, [r7, #4]
    331e:	685b      	ldr	r3, [r3, #4]
    3320:	4935      	ldr	r1, [pc, #212]	; (33f8 <http_client_callback+0x120>)
    3322:	2001      	movs	r0, #1
    3324:	4c31      	ldr	r4, [pc, #196]	; (33ec <http_client_callback+0x114>)
    3326:	47a0      	blx	r4
            if ((unsigned int)data->recv_response.response_code == 200) {
    3328:	687b      	ldr	r3, [r7, #4]
    332a:	881b      	ldrh	r3, [r3, #0]
    332c:	2bc8      	cmp	r3, #200	; 0xc8
    332e:	d10d      	bne.n	334c <http_client_callback+0x74>
                http_file_size = data->recv_response.content_length;
    3330:	687b      	ldr	r3, [r7, #4]
    3332:	685a      	ldr	r2, [r3, #4]
    3334:	4b31      	ldr	r3, [pc, #196]	; (33fc <http_client_callback+0x124>)
    3336:	601a      	str	r2, [r3, #0]
                received_file_size = 0;
    3338:	4b31      	ldr	r3, [pc, #196]	; (3400 <http_client_callback+0x128>)
    333a:	2200      	movs	r2, #0
    333c:	601a      	str	r2, [r3, #0]
            } else {
                add_state(CANCELED);
                return;
            }
            if (data->recv_response.content_length <= MAIN_BUFFER_MAX_SIZE) {
    333e:	687b      	ldr	r3, [r7, #4]
    3340:	685a      	ldr	r2, [r3, #4]
    3342:	2380      	movs	r3, #128	; 0x80
    3344:	009b      	lsls	r3, r3, #2
    3346:	429a      	cmp	r2, r3
    3348:	d843      	bhi.n	33d2 <http_client_callback+0xfa>
    334a:	e003      	b.n	3354 <http_client_callback+0x7c>
                add_state(CANCELED);
    334c:	2020      	movs	r0, #32
    334e:	4b29      	ldr	r3, [pc, #164]	; (33f4 <http_client_callback+0x11c>)
    3350:	4798      	blx	r3
                return;
    3352:	e043      	b.n	33dc <http_client_callback+0x104>
                store_file_packet(data->recv_response.content, data->recv_response.content_length);
    3354:	687b      	ldr	r3, [r7, #4]
    3356:	689a      	ldr	r2, [r3, #8]
    3358:	687b      	ldr	r3, [r7, #4]
    335a:	685b      	ldr	r3, [r3, #4]
    335c:	0019      	movs	r1, r3
    335e:	0010      	movs	r0, r2
    3360:	4b28      	ldr	r3, [pc, #160]	; (3404 <http_client_callback+0x12c>)
    3362:	4798      	blx	r3
                add_state(COMPLETED);
    3364:	2010      	movs	r0, #16
    3366:	4b23      	ldr	r3, [pc, #140]	; (33f4 <http_client_callback+0x11c>)
    3368:	4798      	blx	r3
            }
            break;
    336a:	e032      	b.n	33d2 <http_client_callback+0xfa>

        case HTTP_CLIENT_CALLBACK_RECV_CHUNKED_DATA:
            store_file_packet(data->recv_chunked_data.data, data->recv_chunked_data.length);
    336c:	687b      	ldr	r3, [r7, #4]
    336e:	685a      	ldr	r2, [r3, #4]
    3370:	687b      	ldr	r3, [r7, #4]
    3372:	681b      	ldr	r3, [r3, #0]
    3374:	0019      	movs	r1, r3
    3376:	0010      	movs	r0, r2
    3378:	4b22      	ldr	r3, [pc, #136]	; (3404 <http_client_callback+0x12c>)
    337a:	4798      	blx	r3
            if (data->recv_chunked_data.is_complete) {
    337c:	687b      	ldr	r3, [r7, #4]
    337e:	7a1b      	ldrb	r3, [r3, #8]
    3380:	2b00      	cmp	r3, #0
    3382:	d028      	beq.n	33d6 <http_client_callback+0xfe>
                add_state(COMPLETED);
    3384:	2010      	movs	r0, #16
    3386:	4b1b      	ldr	r3, [pc, #108]	; (33f4 <http_client_callback+0x11c>)
    3388:	4798      	blx	r3
            }

            break;
    338a:	e024      	b.n	33d6 <http_client_callback+0xfe>

        case HTTP_CLIENT_CALLBACK_DISCONNECTED:
            LogMessage(LOG_DEBUG_LVL, "http_client_callback: disconnection reason:%d\r\n", data->disconnected.reason);
    338c:	687b      	ldr	r3, [r7, #4]
    338e:	681a      	ldr	r2, [r3, #0]
    3390:	4b1d      	ldr	r3, [pc, #116]	; (3408 <http_client_callback+0x130>)
    3392:	0019      	movs	r1, r3
    3394:	2001      	movs	r0, #1
    3396:	4b15      	ldr	r3, [pc, #84]	; (33ec <http_client_callback+0x114>)
    3398:	4798      	blx	r3

            /* If disconnect reason is equal to -ECONNRESET(-104),
             * It means the server has closed the connection (timeout).
             * This is normal operation.
             */
            if (data->disconnected.reason == -EAGAIN) {
    339a:	687b      	ldr	r3, [r7, #4]
    339c:	681b      	ldr	r3, [r3, #0]
    339e:	330b      	adds	r3, #11
    33a0:	d11b      	bne.n	33da <http_client_callback+0x102>
                /* Server has not responded. Retry immediately. */
                if (is_state_set(DOWNLOADING)) {
    33a2:	2008      	movs	r0, #8
    33a4:	4b19      	ldr	r3, [pc, #100]	; (340c <http_client_callback+0x134>)
    33a6:	4798      	blx	r3
    33a8:	1e03      	subs	r3, r0, #0
    33aa:	d006      	beq.n	33ba <http_client_callback+0xe2>
                    f_close(&file_object);
    33ac:	4b18      	ldr	r3, [pc, #96]	; (3410 <http_client_callback+0x138>)
    33ae:	0018      	movs	r0, r3
    33b0:	4b18      	ldr	r3, [pc, #96]	; (3414 <http_client_callback+0x13c>)
    33b2:	4798      	blx	r3
                    clear_state(DOWNLOADING);
    33b4:	2008      	movs	r0, #8
    33b6:	4b18      	ldr	r3, [pc, #96]	; (3418 <http_client_callback+0x140>)
    33b8:	4798      	blx	r3
                }

                if (is_state_set(GET_REQUESTED)) {
    33ba:	2004      	movs	r0, #4
    33bc:	4b13      	ldr	r3, [pc, #76]	; (340c <http_client_callback+0x134>)
    33be:	4798      	blx	r3
    33c0:	1e03      	subs	r3, r0, #0
    33c2:	d002      	beq.n	33ca <http_client_callback+0xf2>
                    clear_state(GET_REQUESTED);
    33c4:	2004      	movs	r0, #4
    33c6:	4b14      	ldr	r3, [pc, #80]	; (3418 <http_client_callback+0x140>)
    33c8:	4798      	blx	r3
                }

                start_download();
    33ca:	4b14      	ldr	r3, [pc, #80]	; (341c <http_client_callback+0x144>)
    33cc:	4798      	blx	r3
            }

            break;
    33ce:	46c0      	nop			; (mov r8, r8)
    33d0:	e003      	b.n	33da <http_client_callback+0x102>
            break;
    33d2:	46c0      	nop			; (mov r8, r8)
    33d4:	e002      	b.n	33dc <http_client_callback+0x104>
            break;
    33d6:	46c0      	nop			; (mov r8, r8)
    33d8:	e000      	b.n	33dc <http_client_callback+0x104>
            break;
    33da:	46c0      	nop			; (mov r8, r8)
    }
}
    33dc:	46bd      	mov	sp, r7
    33de:	b005      	add	sp, #20
    33e0:	bd90      	pop	{r4, r7, pc}
    33e2:	46c0      	nop			; (mov r8, r8)
    33e4:	00023854 	.word	0x00023854
    33e8:	00023148 	.word	0x00023148
    33ec:	0000ad85 	.word	0x0000ad85
    33f0:	00023180 	.word	0x00023180
    33f4:	00002cf5 	.word	0x00002cf5
    33f8:	000231ac 	.word	0x000231ac
    33fc:	200006f4 	.word	0x200006f4
    3400:	200006f8 	.word	0x200006f8
    3404:	00003105 	.word	0x00003105
    3408:	000231e8 	.word	0x000231e8
    340c:	00002d1d 	.word	0x00002d1d
    3410:	200006d0 	.word	0x200006d0
    3414:	0001b231 	.word	0x0001b231
    3418:	00002cc1 	.word	0x00002cc1
    341c:	00003045 	.word	0x00003045

00003420 <socket_cb>:
 *  - tstrSocketAcceptMsg
 *  - tstrSocketConnectMsg
 *  - tstrSocketRecvMsg
 */
static void socket_cb(SOCKET sock, uint8_t u8Msg, void *pvMsg)
{
    3420:	b580      	push	{r7, lr}
    3422:	b082      	sub	sp, #8
    3424:	af00      	add	r7, sp, #0
    3426:	603a      	str	r2, [r7, #0]
    3428:	1dfb      	adds	r3, r7, #7
    342a:	1c02      	adds	r2, r0, #0
    342c:	701a      	strb	r2, [r3, #0]
    342e:	1dbb      	adds	r3, r7, #6
    3430:	1c0a      	adds	r2, r1, #0
    3432:	701a      	strb	r2, [r3, #0]
    http_client_socket_event_handler(sock, u8Msg, pvMsg);
    3434:	683a      	ldr	r2, [r7, #0]
    3436:	1dbb      	adds	r3, r7, #6
    3438:	7819      	ldrb	r1, [r3, #0]
    343a:	1dfb      	adds	r3, r7, #7
    343c:	781b      	ldrb	r3, [r3, #0]
    343e:	b25b      	sxtb	r3, r3
    3440:	0018      	movs	r0, r3
    3442:	4b03      	ldr	r3, [pc, #12]	; (3450 <socket_cb+0x30>)
    3444:	4798      	blx	r3
}
    3446:	46c0      	nop			; (mov r8, r8)
    3448:	46bd      	mov	sp, r7
    344a:	b002      	add	sp, #8
    344c:	bd80      	pop	{r7, pc}
    344e:	46c0      	nop			; (mov r8, r8)
    3450:	0001db95 	.word	0x0001db95

00003454 <resolve_cb>:
 * \brief Callback for the gethostbyname function (DNS Resolution callback).
 * \param[in] pu8DomainName Domain name of the host.
 * \param[in] u32ServerIP Server IPv4 address encoded in NW byte order format. If it is Zero, then the DNS resolution failed.
 */
static void resolve_cb(uint8_t *pu8DomainName, uint32_t u32ServerIP)
{
    3454:	b5b0      	push	{r4, r5, r7, lr}
    3456:	b086      	sub	sp, #24
    3458:	af04      	add	r7, sp, #16
    345a:	6078      	str	r0, [r7, #4]
    345c:	6039      	str	r1, [r7, #0]
    LogMessage(LOG_DEBUG_LVL,
               "resolve_cb: %s IP address is %d.%d.%d.%d\r\n\r\n",
               pu8DomainName,
               (int)IPV4_BYTE(u32ServerIP, 0),
    345e:	683b      	ldr	r3, [r7, #0]
    LogMessage(LOG_DEBUG_LVL,
    3460:	22ff      	movs	r2, #255	; 0xff
    3462:	4013      	ands	r3, r2
    3464:	001c      	movs	r4, r3
               (int)IPV4_BYTE(u32ServerIP, 1),
    3466:	683b      	ldr	r3, [r7, #0]
    3468:	0a1b      	lsrs	r3, r3, #8
    346a:	001a      	movs	r2, r3
    LogMessage(LOG_DEBUG_LVL,
    346c:	23ff      	movs	r3, #255	; 0xff
    346e:	4013      	ands	r3, r2
               (int)IPV4_BYTE(u32ServerIP, 2),
    3470:	683a      	ldr	r2, [r7, #0]
    3472:	0c12      	lsrs	r2, r2, #16
    3474:	0011      	movs	r1, r2
    LogMessage(LOG_DEBUG_LVL,
    3476:	22ff      	movs	r2, #255	; 0xff
    3478:	400a      	ands	r2, r1
               (int)IPV4_BYTE(u32ServerIP, 3));
    347a:	6839      	ldr	r1, [r7, #0]
    347c:	0e09      	lsrs	r1, r1, #24
    LogMessage(LOG_DEBUG_LVL,
    347e:	000d      	movs	r5, r1
    3480:	6878      	ldr	r0, [r7, #4]
    3482:	4909      	ldr	r1, [pc, #36]	; (34a8 <resolve_cb+0x54>)
    3484:	9502      	str	r5, [sp, #8]
    3486:	9201      	str	r2, [sp, #4]
    3488:	9300      	str	r3, [sp, #0]
    348a:	0023      	movs	r3, r4
    348c:	0002      	movs	r2, r0
    348e:	2001      	movs	r0, #1
    3490:	4c06      	ldr	r4, [pc, #24]	; (34ac <resolve_cb+0x58>)
    3492:	47a0      	blx	r4
    http_client_socket_resolve_handler(pu8DomainName, u32ServerIP);
    3494:	683a      	ldr	r2, [r7, #0]
    3496:	687b      	ldr	r3, [r7, #4]
    3498:	0011      	movs	r1, r2
    349a:	0018      	movs	r0, r3
    349c:	4b04      	ldr	r3, [pc, #16]	; (34b0 <resolve_cb+0x5c>)
    349e:	4798      	blx	r3
}
    34a0:	46c0      	nop			; (mov r8, r8)
    34a2:	46bd      	mov	sp, r7
    34a4:	b002      	add	sp, #8
    34a6:	bdb0      	pop	{r4, r5, r7, pc}
    34a8:	00023218 	.word	0x00023218
    34ac:	0000ad85 	.word	0x0000ad85
    34b0:	0001dcf9 	.word	0x0001dcf9

000034b4 <wifi_cb>:
 *  - tstrM2MAPResp
 *  - tstrM2mScanDone
 *  - tstrM2mWifiscanResult
 */
static void wifi_cb(uint8_t u8MsgType, void *pvMsg)
{
    34b4:	b590      	push	{r4, r7, lr}
    34b6:	b087      	sub	sp, #28
    34b8:	af02      	add	r7, sp, #8
    34ba:	0002      	movs	r2, r0
    34bc:	6039      	str	r1, [r7, #0]
    34be:	1dfb      	adds	r3, r7, #7
    34c0:	701a      	strb	r2, [r3, #0]
    switch (u8MsgType) {
    34c2:	1dfb      	adds	r3, r7, #7
    34c4:	781b      	ldrb	r3, [r3, #0]
    34c6:	2b2c      	cmp	r3, #44	; 0x2c
    34c8:	d002      	beq.n	34d0 <wifi_cb+0x1c>
    34ca:	2b32      	cmp	r3, #50	; 0x32
    34cc:	d03d      	beq.n	354a <wifi_cb+0x96>
                }
            }
        } break;

        default:
            break;
    34ce:	e06f      	b.n	35b0 <wifi_cb+0xfc>
            tstrM2mWifiStateChanged *pstrWifiState = (tstrM2mWifiStateChanged *)pvMsg;
    34d0:	683b      	ldr	r3, [r7, #0]
    34d2:	60fb      	str	r3, [r7, #12]
            if (pstrWifiState->u8CurrState == M2M_WIFI_CONNECTED) {
    34d4:	68fb      	ldr	r3, [r7, #12]
    34d6:	781b      	ldrb	r3, [r3, #0]
    34d8:	2b01      	cmp	r3, #1
    34da:	d107      	bne.n	34ec <wifi_cb+0x38>
                LogMessage(LOG_DEBUG_LVL, "wifi_cb: M2M_WIFI_CONNECTED\r\n");
    34dc:	4b36      	ldr	r3, [pc, #216]	; (35b8 <wifi_cb+0x104>)
    34de:	0019      	movs	r1, r3
    34e0:	2001      	movs	r0, #1
    34e2:	4b36      	ldr	r3, [pc, #216]	; (35bc <wifi_cb+0x108>)
    34e4:	4798      	blx	r3
                m2m_wifi_request_dhcp_client();
    34e6:	4b36      	ldr	r3, [pc, #216]	; (35c0 <wifi_cb+0x10c>)
    34e8:	4798      	blx	r3
            break;
    34ea:	e05e      	b.n	35aa <wifi_cb+0xf6>
            } else if (pstrWifiState->u8CurrState == M2M_WIFI_DISCONNECTED) {
    34ec:	68fb      	ldr	r3, [r7, #12]
    34ee:	781b      	ldrb	r3, [r3, #0]
    34f0:	2b00      	cmp	r3, #0
    34f2:	d15a      	bne.n	35aa <wifi_cb+0xf6>
                LogMessage(LOG_DEBUG_LVL, "wifi_cb: M2M_WIFI_DISCONNECTED\r\n");
    34f4:	4b33      	ldr	r3, [pc, #204]	; (35c4 <wifi_cb+0x110>)
    34f6:	0019      	movs	r1, r3
    34f8:	2001      	movs	r0, #1
    34fa:	4b30      	ldr	r3, [pc, #192]	; (35bc <wifi_cb+0x108>)
    34fc:	4798      	blx	r3
                clear_state(WIFI_CONNECTED);
    34fe:	2002      	movs	r0, #2
    3500:	4b31      	ldr	r3, [pc, #196]	; (35c8 <wifi_cb+0x114>)
    3502:	4798      	blx	r3
                if (is_state_set(DOWNLOADING)) {
    3504:	2008      	movs	r0, #8
    3506:	4b31      	ldr	r3, [pc, #196]	; (35cc <wifi_cb+0x118>)
    3508:	4798      	blx	r3
    350a:	1e03      	subs	r3, r0, #0
    350c:	d006      	beq.n	351c <wifi_cb+0x68>
                    f_close(&file_object);
    350e:	4b30      	ldr	r3, [pc, #192]	; (35d0 <wifi_cb+0x11c>)
    3510:	0018      	movs	r0, r3
    3512:	4b30      	ldr	r3, [pc, #192]	; (35d4 <wifi_cb+0x120>)
    3514:	4798      	blx	r3
                    clear_state(DOWNLOADING);
    3516:	2008      	movs	r0, #8
    3518:	4b2b      	ldr	r3, [pc, #172]	; (35c8 <wifi_cb+0x114>)
    351a:	4798      	blx	r3
                if (is_state_set(GET_REQUESTED)) {
    351c:	2004      	movs	r0, #4
    351e:	4b2b      	ldr	r3, [pc, #172]	; (35cc <wifi_cb+0x118>)
    3520:	4798      	blx	r3
    3522:	1e03      	subs	r3, r0, #0
    3524:	d002      	beq.n	352c <wifi_cb+0x78>
                    clear_state(GET_REQUESTED);
    3526:	2004      	movs	r0, #4
    3528:	4b27      	ldr	r3, [pc, #156]	; (35c8 <wifi_cb+0x114>)
    352a:	4798      	blx	r3
                mqtt_disconnect(&mqtt_inst, 1);
    352c:	4b2a      	ldr	r3, [pc, #168]	; (35d8 <wifi_cb+0x124>)
    352e:	2101      	movs	r1, #1
    3530:	0018      	movs	r0, r3
    3532:	4b2a      	ldr	r3, [pc, #168]	; (35dc <wifi_cb+0x128>)
    3534:	4798      	blx	r3
                m2m_wifi_connect((char *)MAIN_WLAN_SSID, sizeof(MAIN_WLAN_SSID), MAIN_WLAN_AUTH, (char *)MAIN_WLAN_PSK, M2M_WIFI_CH_ALL);
    3536:	4a2a      	ldr	r2, [pc, #168]	; (35e0 <wifi_cb+0x12c>)
    3538:	482a      	ldr	r0, [pc, #168]	; (35e4 <wifi_cb+0x130>)
    353a:	23ff      	movs	r3, #255	; 0xff
    353c:	9300      	str	r3, [sp, #0]
    353e:	0013      	movs	r3, r2
    3540:	2202      	movs	r2, #2
    3542:	2111      	movs	r1, #17
    3544:	4c28      	ldr	r4, [pc, #160]	; (35e8 <wifi_cb+0x134>)
    3546:	47a0      	blx	r4
            break;
    3548:	e02f      	b.n	35aa <wifi_cb+0xf6>
            uint8_t *pu8IPAddress = (uint8_t *)pvMsg;
    354a:	683b      	ldr	r3, [r7, #0]
    354c:	60bb      	str	r3, [r7, #8]
            LogMessage(LOG_DEBUG_LVL, "wifi_cb: IP address is %u.%u.%u.%u\r\n", pu8IPAddress[0], pu8IPAddress[1], pu8IPAddress[2], pu8IPAddress[3]);
    354e:	68bb      	ldr	r3, [r7, #8]
    3550:	781b      	ldrb	r3, [r3, #0]
    3552:	0018      	movs	r0, r3
    3554:	68bb      	ldr	r3, [r7, #8]
    3556:	3301      	adds	r3, #1
    3558:	781b      	ldrb	r3, [r3, #0]
    355a:	001c      	movs	r4, r3
    355c:	68bb      	ldr	r3, [r7, #8]
    355e:	3302      	adds	r3, #2
    3560:	781b      	ldrb	r3, [r3, #0]
    3562:	001a      	movs	r2, r3
    3564:	68bb      	ldr	r3, [r7, #8]
    3566:	3303      	adds	r3, #3
    3568:	781b      	ldrb	r3, [r3, #0]
    356a:	4920      	ldr	r1, [pc, #128]	; (35ec <wifi_cb+0x138>)
    356c:	9301      	str	r3, [sp, #4]
    356e:	9200      	str	r2, [sp, #0]
    3570:	0023      	movs	r3, r4
    3572:	0002      	movs	r2, r0
    3574:	2001      	movs	r0, #1
    3576:	4c11      	ldr	r4, [pc, #68]	; (35bc <wifi_cb+0x108>)
    3578:	47a0      	blx	r4
            add_state(WIFI_CONNECTED);
    357a:	2002      	movs	r0, #2
    357c:	4b1c      	ldr	r3, [pc, #112]	; (35f0 <wifi_cb+0x13c>)
    357e:	4798      	blx	r3
            if (do_download_flag == 1) {
    3580:	4b1c      	ldr	r3, [pc, #112]	; (35f4 <wifi_cb+0x140>)
    3582:	781b      	ldrb	r3, [r3, #0]
    3584:	2b01      	cmp	r3, #1
    3586:	d102      	bne.n	358e <wifi_cb+0xda>
                start_download();
    3588:	4b1b      	ldr	r3, [pc, #108]	; (35f8 <wifi_cb+0x144>)
    358a:	4798      	blx	r3
        } break;
    358c:	e00f      	b.n	35ae <wifi_cb+0xfa>
                if (mqtt_connect(&mqtt_inst, main_mqtt_broker)) {
    358e:	4a1b      	ldr	r2, [pc, #108]	; (35fc <wifi_cb+0x148>)
    3590:	4b11      	ldr	r3, [pc, #68]	; (35d8 <wifi_cb+0x124>)
    3592:	0011      	movs	r1, r2
    3594:	0018      	movs	r0, r3
    3596:	4b1a      	ldr	r3, [pc, #104]	; (3600 <wifi_cb+0x14c>)
    3598:	4798      	blx	r3
    359a:	1e03      	subs	r3, r0, #0
    359c:	d007      	beq.n	35ae <wifi_cb+0xfa>
                    LogMessage(LOG_DEBUG_LVL, "Error connecting to MQTT Broker!\r\n");
    359e:	4b19      	ldr	r3, [pc, #100]	; (3604 <wifi_cb+0x150>)
    35a0:	0019      	movs	r1, r3
    35a2:	2001      	movs	r0, #1
    35a4:	4b05      	ldr	r3, [pc, #20]	; (35bc <wifi_cb+0x108>)
    35a6:	4798      	blx	r3
        } break;
    35a8:	e001      	b.n	35ae <wifi_cb+0xfa>
            break;
    35aa:	46c0      	nop			; (mov r8, r8)
    35ac:	e000      	b.n	35b0 <wifi_cb+0xfc>
        } break;
    35ae:	46c0      	nop			; (mov r8, r8)
    }
}
    35b0:	46c0      	nop			; (mov r8, r8)
    35b2:	46bd      	mov	sp, r7
    35b4:	b005      	add	sp, #20
    35b6:	bd90      	pop	{r4, r7, pc}
    35b8:	00023248 	.word	0x00023248
    35bc:	0000ad85 	.word	0x0000ad85
    35c0:	0000f365 	.word	0x0000f365
    35c4:	00023268 	.word	0x00023268
    35c8:	00002cc1 	.word	0x00002cc1
    35cc:	00002d1d 	.word	0x00002d1d
    35d0:	200006d0 	.word	0x200006d0
    35d4:	0001b231 	.word	0x0001b231
    35d8:	200006fc 	.word	0x200006fc
    35dc:	0001c841 	.word	0x0001c841
    35e0:	0002328c 	.word	0x0002328c
    35e4:	0002329c 	.word	0x0002329c
    35e8:	0000ee91 	.word	0x0000ee91
    35ec:	000232b0 	.word	0x000232b0
    35f0:	00002cf5 	.word	0x00002cf5
    35f4:	2000049c 	.word	0x2000049c
    35f8:	00003045 	.word	0x00003045
    35fc:	00022ecc 	.word	0x00022ecc
    3600:	0001c70d 	.word	0x0001c70d
    3604:	000232d8 	.word	0x000232d8

00003608 <init_storage>:

/**
 * \brief Initialize SD/MMC storage.
 */
void init_storage(void)
{
    3608:	b590      	push	{r4, r7, lr}
    360a:	b083      	sub	sp, #12
    360c:	af00      	add	r7, sp, #0
    FRESULT res;
    Ctrl_status status;

    /* Initialize SD/MMC stack. */
    sd_mmc_init();
    360e:	4b29      	ldr	r3, [pc, #164]	; (36b4 <init_storage+0xac>)
    3610:	4798      	blx	r3
    while (true) {
        LogMessage(LOG_DEBUG_LVL, "init_storage: please plug an SD/MMC card in slot...\r\n");
    3612:	4b29      	ldr	r3, [pc, #164]	; (36b8 <init_storage+0xb0>)
    3614:	0019      	movs	r1, r3
    3616:	2001      	movs	r0, #1
    3618:	4b28      	ldr	r3, [pc, #160]	; (36bc <init_storage+0xb4>)
    361a:	4798      	blx	r3

        /* Wait card present and ready. */
        do {
            status = sd_mmc_test_unit_ready(0);
    361c:	1dfc      	adds	r4, r7, #7
    361e:	2000      	movs	r0, #0
    3620:	4b27      	ldr	r3, [pc, #156]	; (36c0 <init_storage+0xb8>)
    3622:	4798      	blx	r3
    3624:	0003      	movs	r3, r0
    3626:	7023      	strb	r3, [r4, #0]
            if (CTRL_FAIL == status) {
    3628:	1dfb      	adds	r3, r7, #7
    362a:	781b      	ldrb	r3, [r3, #0]
    362c:	2b01      	cmp	r3, #1
    362e:	d110      	bne.n	3652 <init_storage+0x4a>
                LogMessage(LOG_DEBUG_LVL, "init_storage: SD Card install failed.\r\n");
    3630:	4b24      	ldr	r3, [pc, #144]	; (36c4 <init_storage+0xbc>)
    3632:	0019      	movs	r1, r3
    3634:	2001      	movs	r0, #1
    3636:	4b21      	ldr	r3, [pc, #132]	; (36bc <init_storage+0xb4>)
    3638:	4798      	blx	r3
                LogMessage(LOG_DEBUG_LVL, "init_storage: try unplug and re-plug the card.\r\n");
    363a:	4b23      	ldr	r3, [pc, #140]	; (36c8 <init_storage+0xc0>)
    363c:	0019      	movs	r1, r3
    363e:	2001      	movs	r0, #1
    3640:	4b1e      	ldr	r3, [pc, #120]	; (36bc <init_storage+0xb4>)
    3642:	4798      	blx	r3
                while (CTRL_NO_PRESENT != sd_mmc_check(0)) {
    3644:	46c0      	nop			; (mov r8, r8)
    3646:	2000      	movs	r0, #0
    3648:	4b20      	ldr	r3, [pc, #128]	; (36cc <init_storage+0xc4>)
    364a:	4798      	blx	r3
    364c:	0003      	movs	r3, r0
    364e:	2b02      	cmp	r3, #2
    3650:	d1f9      	bne.n	3646 <init_storage+0x3e>
                }
            }
        } while (CTRL_GOOD != status);
    3652:	1dfb      	adds	r3, r7, #7
    3654:	781b      	ldrb	r3, [r3, #0]
    3656:	2b00      	cmp	r3, #0
    3658:	d1e0      	bne.n	361c <init_storage+0x14>

        LogMessage(LOG_DEBUG_LVL, "init_storage: mounting SD card...\r\n");
    365a:	4b1d      	ldr	r3, [pc, #116]	; (36d0 <init_storage+0xc8>)
    365c:	0019      	movs	r1, r3
    365e:	2001      	movs	r0, #1
    3660:	4b16      	ldr	r3, [pc, #88]	; (36bc <init_storage+0xb4>)
    3662:	4798      	blx	r3
        memset(&fatfs, 0, sizeof(FATFS));
    3664:	238c      	movs	r3, #140	; 0x8c
    3666:	009a      	lsls	r2, r3, #2
    3668:	4b1a      	ldr	r3, [pc, #104]	; (36d4 <init_storage+0xcc>)
    366a:	2100      	movs	r1, #0
    366c:	0018      	movs	r0, r3
    366e:	4b1a      	ldr	r3, [pc, #104]	; (36d8 <init_storage+0xd0>)
    3670:	4798      	blx	r3
        res = f_mount(LUN_ID_SD_MMC_0_MEM, &fatfs);
    3672:	1dbc      	adds	r4, r7, #6
    3674:	4b17      	ldr	r3, [pc, #92]	; (36d4 <init_storage+0xcc>)
    3676:	0019      	movs	r1, r3
    3678:	2000      	movs	r0, #0
    367a:	4b18      	ldr	r3, [pc, #96]	; (36dc <init_storage+0xd4>)
    367c:	4798      	blx	r3
    367e:	0003      	movs	r3, r0
    3680:	7023      	strb	r3, [r4, #0]
        if (FR_INVALID_DRIVE == res) {
    3682:	1dbb      	adds	r3, r7, #6
    3684:	781b      	ldrb	r3, [r3, #0]
    3686:	2b0b      	cmp	r3, #11
    3688:	d107      	bne.n	369a <init_storage+0x92>
            LogMessage(LOG_DEBUG_LVL, "init_storage: SD card mount failed! (res %d)\r\n", res);
    368a:	1dbb      	adds	r3, r7, #6
    368c:	781a      	ldrb	r2, [r3, #0]
    368e:	4b14      	ldr	r3, [pc, #80]	; (36e0 <init_storage+0xd8>)
    3690:	0019      	movs	r1, r3
    3692:	2001      	movs	r0, #1
    3694:	4b09      	ldr	r3, [pc, #36]	; (36bc <init_storage+0xb4>)
    3696:	4798      	blx	r3
            return;
    3698:	e008      	b.n	36ac <init_storage+0xa4>
        }

        LogMessage(LOG_DEBUG_LVL, "init_storage: SD card mount OK.\r\n");
    369a:	4b12      	ldr	r3, [pc, #72]	; (36e4 <init_storage+0xdc>)
    369c:	0019      	movs	r1, r3
    369e:	2001      	movs	r0, #1
    36a0:	4b06      	ldr	r3, [pc, #24]	; (36bc <init_storage+0xb4>)
    36a2:	4798      	blx	r3
        add_state(STORAGE_READY);
    36a4:	2001      	movs	r0, #1
    36a6:	4b10      	ldr	r3, [pc, #64]	; (36e8 <init_storage+0xe0>)
    36a8:	4798      	blx	r3
        return;
    36aa:	46c0      	nop			; (mov r8, r8)
    }
}
    36ac:	46bd      	mov	sp, r7
    36ae:	b003      	add	sp, #12
    36b0:	bd90      	pop	{r4, r7, pc}
    36b2:	46c0      	nop			; (mov r8, r8)
    36b4:	0000bb9d 	.word	0x0000bb9d
    36b8:	000232fc 	.word	0x000232fc
    36bc:	0000ad85 	.word	0x0000ad85
    36c0:	0000c079 	.word	0x0000c079
    36c4:	00023334 	.word	0x00023334
    36c8:	0002335c 	.word	0x0002335c
    36cc:	0000bbed 	.word	0x0000bbed
    36d0:	00023390 	.word	0x00023390
    36d4:	200004a0 	.word	0x200004a0
    36d8:	0002181b 	.word	0x0002181b
    36dc:	0001a7d9 	.word	0x0001a7d9
    36e0:	000233b4 	.word	0x000233b4
    36e4:	000233e4 	.word	0x000233e4
    36e8:	00002cf5 	.word	0x00002cf5

000036ec <configure_timer>:

/**
 * \brief Configure Timer module.
 */
static void configure_timer(void)
{
    36ec:	b580      	push	{r7, lr}
    36ee:	b082      	sub	sp, #8
    36f0:	af00      	add	r7, sp, #0
    struct sw_timer_config swt_conf;
    sw_timer_get_config_defaults(&swt_conf);
    36f2:	1d3b      	adds	r3, r7, #4
    36f4:	0018      	movs	r0, r3
    36f6:	4b08      	ldr	r3, [pc, #32]	; (3718 <configure_timer+0x2c>)
    36f8:	4798      	blx	r3

    sw_timer_init(&swt_module_inst, &swt_conf);
    36fa:	1d3a      	adds	r2, r7, #4
    36fc:	4b07      	ldr	r3, [pc, #28]	; (371c <configure_timer+0x30>)
    36fe:	0011      	movs	r1, r2
    3700:	0018      	movs	r0, r3
    3702:	4b07      	ldr	r3, [pc, #28]	; (3720 <configure_timer+0x34>)
    3704:	4798      	blx	r3
    sw_timer_enable(&swt_module_inst);
    3706:	4b05      	ldr	r3, [pc, #20]	; (371c <configure_timer+0x30>)
    3708:	0018      	movs	r0, r3
    370a:	4b06      	ldr	r3, [pc, #24]	; (3724 <configure_timer+0x38>)
    370c:	4798      	blx	r3
}
    370e:	46c0      	nop			; (mov r8, r8)
    3710:	46bd      	mov	sp, r7
    3712:	b002      	add	sp, #8
    3714:	bd80      	pop	{r7, pc}
    3716:	46c0      	nop			; (mov r8, r8)
    3718:	0001f329 	.word	0x0001f329
    371c:	20004290 	.word	0x20004290
    3720:	0001f34d 	.word	0x0001f34d
    3724:	0001f439 	.word	0x0001f439

00003728 <configure_http_client>:

/**
 * \brief Configure HTTP client module.
 */
static void configure_http_client(void)
{
    3728:	b580      	push	{r7, lr}
    372a:	b088      	sub	sp, #32
    372c:	af00      	add	r7, sp, #0
    struct http_client_config httpc_conf;
    int ret;

    http_client_get_config_defaults(&httpc_conf);
    372e:	003b      	movs	r3, r7
    3730:	0018      	movs	r0, r3
    3732:	4b16      	ldr	r3, [pc, #88]	; (378c <configure_http_client+0x64>)
    3734:	4798      	blx	r3

    httpc_conf.recv_buffer_size = MAIN_BUFFER_MAX_SIZE;
    3736:	003b      	movs	r3, r7
    3738:	2280      	movs	r2, #128	; 0x80
    373a:	0092      	lsls	r2, r2, #2
    373c:	611a      	str	r2, [r3, #16]
    httpc_conf.timer_inst = &swt_module_inst;
    373e:	003b      	movs	r3, r7
    3740:	4a13      	ldr	r2, [pc, #76]	; (3790 <configure_http_client+0x68>)
    3742:	605a      	str	r2, [r3, #4]
    httpc_conf.port = 443;
    3744:	003b      	movs	r3, r7
    3746:	22bc      	movs	r2, #188	; 0xbc
    3748:	32ff      	adds	r2, #255	; 0xff
    374a:	801a      	strh	r2, [r3, #0]
    httpc_conf.tls = 1;
    374c:	003b      	movs	r3, r7
    374e:	2201      	movs	r2, #1
    3750:	709a      	strb	r2, [r3, #2]

    ret = http_client_init(&http_client_module_inst, &httpc_conf);
    3752:	003a      	movs	r2, r7
    3754:	4b0f      	ldr	r3, [pc, #60]	; (3794 <configure_http_client+0x6c>)
    3756:	0011      	movs	r1, r2
    3758:	0018      	movs	r0, r3
    375a:	4b0f      	ldr	r3, [pc, #60]	; (3798 <configure_http_client+0x70>)
    375c:	4798      	blx	r3
    375e:	0003      	movs	r3, r0
    3760:	61fb      	str	r3, [r7, #28]
    if (ret < 0) {
    3762:	69fb      	ldr	r3, [r7, #28]
    3764:	2b00      	cmp	r3, #0
    3766:	da06      	bge.n	3776 <configure_http_client+0x4e>
        LogMessage(LOG_DEBUG_LVL, "configure_http_client: HTTP client initialization failed! (res %d)\r\n", ret);
    3768:	69fa      	ldr	r2, [r7, #28]
    376a:	4b0c      	ldr	r3, [pc, #48]	; (379c <configure_http_client+0x74>)
    376c:	0019      	movs	r1, r3
    376e:	2001      	movs	r0, #1
    3770:	4b0b      	ldr	r3, [pc, #44]	; (37a0 <configure_http_client+0x78>)
    3772:	4798      	blx	r3
        while (1) {
    3774:	e7fe      	b.n	3774 <configure_http_client+0x4c>
        } /* Loop forever. */
    }

    http_client_register_callback(&http_client_module_inst, http_client_callback);
    3776:	4a0b      	ldr	r2, [pc, #44]	; (37a4 <configure_http_client+0x7c>)
    3778:	4b06      	ldr	r3, [pc, #24]	; (3794 <configure_http_client+0x6c>)
    377a:	0011      	movs	r1, r2
    377c:	0018      	movs	r0, r3
    377e:	4b0a      	ldr	r3, [pc, #40]	; (37a8 <configure_http_client+0x80>)
    3780:	4798      	blx	r3
}
    3782:	46c0      	nop			; (mov r8, r8)
    3784:	46bd      	mov	sp, r7
    3786:	b008      	add	sp, #32
    3788:	bd80      	pop	{r7, pc}
    378a:	46c0      	nop			; (mov r8, r8)
    378c:	0001d9bd 	.word	0x0001d9bd
    3790:	20004290 	.word	0x20004290
    3794:	200042e8 	.word	0x200042e8
    3798:	0001da09 	.word	0x0001da09
    379c:	00023408 	.word	0x00023408
    37a0:	0000ad85 	.word	0x0000ad85
    37a4:	000032d9 	.word	0x000032d9
    37a8:	0001daf5 	.word	0x0001daf5

000037ac <socket_event_handler>:
 *  - [SOCKET_MSG_SENDTO](@ref SOCKET_MSG_SENDTO)
 *  - [SOCKET_MSG_RECVFROM](@ref SOCKET_MSG_RECVFROM)
 * \param[in] msg_data A structure contains notification informations.
 */
static void socket_event_handler(SOCKET sock, uint8_t msg_type, void *msg_data)
{
    37ac:	b580      	push	{r7, lr}
    37ae:	b082      	sub	sp, #8
    37b0:	af00      	add	r7, sp, #0
    37b2:	603a      	str	r2, [r7, #0]
    37b4:	1dfb      	adds	r3, r7, #7
    37b6:	1c02      	adds	r2, r0, #0
    37b8:	701a      	strb	r2, [r3, #0]
    37ba:	1dbb      	adds	r3, r7, #6
    37bc:	1c0a      	adds	r2, r1, #0
    37be:	701a      	strb	r2, [r3, #0]
    mqtt_socket_event_handler(sock, msg_type, msg_data);
    37c0:	683a      	ldr	r2, [r7, #0]
    37c2:	1dbb      	adds	r3, r7, #6
    37c4:	7819      	ldrb	r1, [r3, #0]
    37c6:	1dfb      	adds	r3, r7, #7
    37c8:	781b      	ldrb	r3, [r3, #0]
    37ca:	b25b      	sxtb	r3, r3
    37cc:	0018      	movs	r0, r3
    37ce:	4b03      	ldr	r3, [pc, #12]	; (37dc <socket_event_handler+0x30>)
    37d0:	4798      	blx	r3
}
    37d2:	46c0      	nop			; (mov r8, r8)
    37d4:	46bd      	mov	sp, r7
    37d6:	b002      	add	sp, #8
    37d8:	bd80      	pop	{r7, pc}
    37da:	46c0      	nop			; (mov r8, r8)
    37dc:	0001c6b5 	.word	0x0001c6b5

000037e0 <socket_resolve_handler>:
 *
 * \param[in] doamin_name Domain name.
 * \param[in] server_ip IP of server.
 */
static void socket_resolve_handler(uint8_t *doamin_name, uint32_t server_ip)
{
    37e0:	b580      	push	{r7, lr}
    37e2:	b082      	sub	sp, #8
    37e4:	af00      	add	r7, sp, #0
    37e6:	6078      	str	r0, [r7, #4]
    37e8:	6039      	str	r1, [r7, #0]
    mqtt_socket_resolve_handler(doamin_name, server_ip);
    37ea:	683a      	ldr	r2, [r7, #0]
    37ec:	687b      	ldr	r3, [r7, #4]
    37ee:	0011      	movs	r1, r2
    37f0:	0018      	movs	r0, r3
    37f2:	4b03      	ldr	r3, [pc, #12]	; (3800 <socket_resolve_handler+0x20>)
    37f4:	4798      	blx	r3
}
    37f6:	46c0      	nop			; (mov r8, r8)
    37f8:	46bd      	mov	sp, r7
    37fa:	b002      	add	sp, #8
    37fc:	bd80      	pop	{r7, pc}
    37fe:	46c0      	nop			; (mov r8, r8)
    3800:	0001c6e9 	.word	0x0001c6e9

00003804 <SubscribeHandlerLedTopic>:
 *
 * \param[in] msgData Data to be received.
 */

void SubscribeHandlerLedTopic(MessageData *msgData)
{
    3804:	b590      	push	{r4, r7, lr}
    3806:	b089      	sub	sp, #36	; 0x24
    3808:	af02      	add	r7, sp, #8
    380a:	6078      	str	r0, [r7, #4]
    uint8_t rgb[3] = {0, 0, 0};
    380c:	2310      	movs	r3, #16
    380e:	18fb      	adds	r3, r7, r3
    3810:	2200      	movs	r2, #0
    3812:	701a      	strb	r2, [r3, #0]
    3814:	2310      	movs	r3, #16
    3816:	18fb      	adds	r3, r7, r3
    3818:	2200      	movs	r2, #0
    381a:	705a      	strb	r2, [r3, #1]
    381c:	2310      	movs	r3, #16
    381e:	18fb      	adds	r3, r7, r3
    3820:	2200      	movs	r2, #0
    3822:	709a      	strb	r2, [r3, #2]
    LogMessage(LOG_DEBUG_LVL, "\r\n %.*s", msgData->topicName->lenstring.len, msgData->topicName->lenstring.data);
    3824:	687b      	ldr	r3, [r7, #4]
    3826:	685b      	ldr	r3, [r3, #4]
    3828:	685a      	ldr	r2, [r3, #4]
    382a:	687b      	ldr	r3, [r7, #4]
    382c:	685b      	ldr	r3, [r3, #4]
    382e:	689b      	ldr	r3, [r3, #8]
    3830:	4924      	ldr	r1, [pc, #144]	; (38c4 <SubscribeHandlerLedTopic+0xc0>)
    3832:	2001      	movs	r0, #1
    3834:	4c24      	ldr	r4, [pc, #144]	; (38c8 <SubscribeHandlerLedTopic+0xc4>)
    3836:	47a0      	blx	r4
    // Will receive something of the style "rgb(222, 224, 189)"
    if (strncmp(msgData->message->payload, "rgb(", 4) == 0) {
    3838:	687b      	ldr	r3, [r7, #4]
    383a:	681b      	ldr	r3, [r3, #0]
    383c:	689b      	ldr	r3, [r3, #8]
    383e:	4923      	ldr	r1, [pc, #140]	; (38cc <SubscribeHandlerLedTopic+0xc8>)
    3840:	2204      	movs	r2, #4
    3842:	0018      	movs	r0, r3
    3844:	4b22      	ldr	r3, [pc, #136]	; (38d0 <SubscribeHandlerLedTopic+0xcc>)
    3846:	4798      	blx	r3
    3848:	1e03      	subs	r3, r0, #0
    384a:	d137      	bne.n	38bc <SubscribeHandlerLedTopic+0xb8>
        char *p = (char *)&msgData->message->payload[4];
    384c:	687b      	ldr	r3, [r7, #4]
    384e:	681b      	ldr	r3, [r3, #0]
    3850:	689b      	ldr	r3, [r3, #8]
    3852:	3304      	adds	r3, #4
    3854:	60fb      	str	r3, [r7, #12]
        int nb = 0;
    3856:	2300      	movs	r3, #0
    3858:	617b      	str	r3, [r7, #20]
        while (nb <= 2 && *p) {
    385a:	e015      	b.n	3888 <SubscribeHandlerLedTopic+0x84>
            rgb[nb++] = strtol(p, &p, 10);
    385c:	697c      	ldr	r4, [r7, #20]
    385e:	1c63      	adds	r3, r4, #1
    3860:	617b      	str	r3, [r7, #20]
    3862:	68fb      	ldr	r3, [r7, #12]
    3864:	220c      	movs	r2, #12
    3866:	18b9      	adds	r1, r7, r2
    3868:	220a      	movs	r2, #10
    386a:	0018      	movs	r0, r3
    386c:	4b19      	ldr	r3, [pc, #100]	; (38d4 <SubscribeHandlerLedTopic+0xd0>)
    386e:	4798      	blx	r3
    3870:	0003      	movs	r3, r0
    3872:	b2da      	uxtb	r2, r3
    3874:	2310      	movs	r3, #16
    3876:	18fb      	adds	r3, r7, r3
    3878:	551a      	strb	r2, [r3, r4]
            if (*p != ',') break;
    387a:	68fb      	ldr	r3, [r7, #12]
    387c:	781b      	ldrb	r3, [r3, #0]
    387e:	2b2c      	cmp	r3, #44	; 0x2c
    3880:	d10a      	bne.n	3898 <SubscribeHandlerLedTopic+0x94>
            p++; /* skip, */
    3882:	68fb      	ldr	r3, [r7, #12]
    3884:	3301      	adds	r3, #1
    3886:	60fb      	str	r3, [r7, #12]
        while (nb <= 2 && *p) {
    3888:	697b      	ldr	r3, [r7, #20]
    388a:	2b02      	cmp	r3, #2
    388c:	dc05      	bgt.n	389a <SubscribeHandlerLedTopic+0x96>
    388e:	68fb      	ldr	r3, [r7, #12]
    3890:	781b      	ldrb	r3, [r3, #0]
    3892:	2b00      	cmp	r3, #0
    3894:	d1e2      	bne.n	385c <SubscribeHandlerLedTopic+0x58>
    3896:	e000      	b.n	389a <SubscribeHandlerLedTopic+0x96>
            if (*p != ',') break;
    3898:	46c0      	nop			; (mov r8, r8)
        }
        LogMessage(LOG_DEBUG_LVL, "\r\nRGB %d %d %d\r\n", rgb[0], rgb[1], rgb[2]);
    389a:	2310      	movs	r3, #16
    389c:	18fb      	adds	r3, r7, r3
    389e:	781b      	ldrb	r3, [r3, #0]
    38a0:	001a      	movs	r2, r3
    38a2:	2310      	movs	r3, #16
    38a4:	18fb      	adds	r3, r7, r3
    38a6:	785b      	ldrb	r3, [r3, #1]
    38a8:	0018      	movs	r0, r3
    38aa:	2310      	movs	r3, #16
    38ac:	18fb      	adds	r3, r7, r3
    38ae:	789b      	ldrb	r3, [r3, #2]
    38b0:	4909      	ldr	r1, [pc, #36]	; (38d8 <SubscribeHandlerLedTopic+0xd4>)
    38b2:	9300      	str	r3, [sp, #0]
    38b4:	0003      	movs	r3, r0
    38b6:	2001      	movs	r0, #1
    38b8:	4c03      	ldr	r4, [pc, #12]	; (38c8 <SubscribeHandlerLedTopic+0xc4>)
    38ba:	47a0      	blx	r4
    }
}
    38bc:	46c0      	nop			; (mov r8, r8)
    38be:	46bd      	mov	sp, r7
    38c0:	b007      	add	sp, #28
    38c2:	bd90      	pop	{r4, r7, pc}
    38c4:	00023450 	.word	0x00023450
    38c8:	0000ad85 	.word	0x0000ad85
    38cc:	00023458 	.word	0x00023458
    38d0:	00021be1 	.word	0x00021be1
    38d4:	00021d8d 	.word	0x00021d8d
    38d8:	00023460 	.word	0x00023460

000038dc <SubscribeHandlerGameTopic>:

void SubscribeHandlerGameTopic(MessageData *msgData)
{
    38dc:	b590      	push	{r4, r7, lr}
    38de:	b08b      	sub	sp, #44	; 0x2c
    38e0:	af00      	add	r7, sp, #0
    38e2:	6078      	str	r0, [r7, #4]
    struct GameDataPacket game;
    memset(game.game, 0xff, sizeof(game.game));
    38e4:	230c      	movs	r3, #12
    38e6:	18fb      	adds	r3, r7, r3
    38e8:	2214      	movs	r2, #20
    38ea:	21ff      	movs	r1, #255	; 0xff
    38ec:	0018      	movs	r0, r3
    38ee:	4b41      	ldr	r3, [pc, #260]	; (39f4 <SubscribeHandlerGameTopic+0x118>)
    38f0:	4798      	blx	r3

    // Parse input. The start string must be '{"game":['
    if (strncmp(msgData->message->payload, "{\"game\":[", 9) == 0) {
    38f2:	687b      	ldr	r3, [r7, #4]
    38f4:	681b      	ldr	r3, [r3, #0]
    38f6:	689b      	ldr	r3, [r3, #8]
    38f8:	493f      	ldr	r1, [pc, #252]	; (39f8 <SubscribeHandlerGameTopic+0x11c>)
    38fa:	2209      	movs	r2, #9
    38fc:	0018      	movs	r0, r3
    38fe:	4b3f      	ldr	r3, [pc, #252]	; (39fc <SubscribeHandlerGameTopic+0x120>)
    3900:	4798      	blx	r3
    3902:	1e03      	subs	r3, r0, #0
    3904:	d159      	bne.n	39ba <SubscribeHandlerGameTopic+0xde>
        LogMessage(LOG_DEBUG_LVL, "\r\nGame message received!\r\n");
    3906:	4b3e      	ldr	r3, [pc, #248]	; (3a00 <SubscribeHandlerGameTopic+0x124>)
    3908:	0019      	movs	r1, r3
    390a:	2001      	movs	r0, #1
    390c:	4b3d      	ldr	r3, [pc, #244]	; (3a04 <SubscribeHandlerGameTopic+0x128>)
    390e:	4798      	blx	r3
        LogMessage(LOG_DEBUG_LVL, "\r\n %.*s", msgData->topicName->lenstring.len, msgData->topicName->lenstring.data);
    3910:	687b      	ldr	r3, [r7, #4]
    3912:	685b      	ldr	r3, [r3, #4]
    3914:	685a      	ldr	r2, [r3, #4]
    3916:	687b      	ldr	r3, [r7, #4]
    3918:	685b      	ldr	r3, [r3, #4]
    391a:	689b      	ldr	r3, [r3, #8]
    391c:	493a      	ldr	r1, [pc, #232]	; (3a08 <SubscribeHandlerGameTopic+0x12c>)
    391e:	2001      	movs	r0, #1
    3920:	4c38      	ldr	r4, [pc, #224]	; (3a04 <SubscribeHandlerGameTopic+0x128>)
    3922:	47a0      	blx	r4
        LogMessage(LOG_DEBUG_LVL, "%.*s", msgData->message->payloadlen, (char *)msgData->message->payload);
    3924:	687b      	ldr	r3, [r7, #4]
    3926:	681b      	ldr	r3, [r3, #0]
    3928:	68da      	ldr	r2, [r3, #12]
    392a:	687b      	ldr	r3, [r7, #4]
    392c:	681b      	ldr	r3, [r3, #0]
    392e:	689b      	ldr	r3, [r3, #8]
    3930:	4936      	ldr	r1, [pc, #216]	; (3a0c <SubscribeHandlerGameTopic+0x130>)
    3932:	2001      	movs	r0, #1
    3934:	4c33      	ldr	r4, [pc, #204]	; (3a04 <SubscribeHandlerGameTopic+0x128>)
    3936:	47a0      	blx	r4

        int nb = 0;
    3938:	2300      	movs	r3, #0
    393a:	627b      	str	r3, [r7, #36]	; 0x24
        char *p = &msgData->message->payload[9];
    393c:	687b      	ldr	r3, [r7, #4]
    393e:	681b      	ldr	r3, [r3, #0]
    3940:	689b      	ldr	r3, [r3, #8]
    3942:	3309      	adds	r3, #9
    3944:	60bb      	str	r3, [r7, #8]
        while (nb < GAME_SIZE && *p) {
    3946:	e015      	b.n	3974 <SubscribeHandlerGameTopic+0x98>
            game.game[nb++] = strtol(p, &p, 10);
    3948:	6a7c      	ldr	r4, [r7, #36]	; 0x24
    394a:	1c63      	adds	r3, r4, #1
    394c:	627b      	str	r3, [r7, #36]	; 0x24
    394e:	68bb      	ldr	r3, [r7, #8]
    3950:	2208      	movs	r2, #8
    3952:	18b9      	adds	r1, r7, r2
    3954:	220a      	movs	r2, #10
    3956:	0018      	movs	r0, r3
    3958:	4b2d      	ldr	r3, [pc, #180]	; (3a10 <SubscribeHandlerGameTopic+0x134>)
    395a:	4798      	blx	r3
    395c:	0003      	movs	r3, r0
    395e:	b2da      	uxtb	r2, r3
    3960:	230c      	movs	r3, #12
    3962:	18fb      	adds	r3, r7, r3
    3964:	551a      	strb	r2, [r3, r4]
            if (*p != ',') break;
    3966:	68bb      	ldr	r3, [r7, #8]
    3968:	781b      	ldrb	r3, [r3, #0]
    396a:	2b2c      	cmp	r3, #44	; 0x2c
    396c:	d10a      	bne.n	3984 <SubscribeHandlerGameTopic+0xa8>
            p++; /* skip, */
    396e:	68bb      	ldr	r3, [r7, #8]
    3970:	3301      	adds	r3, #1
    3972:	60bb      	str	r3, [r7, #8]
        while (nb < GAME_SIZE && *p) {
    3974:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    3976:	2b13      	cmp	r3, #19
    3978:	dc05      	bgt.n	3986 <SubscribeHandlerGameTopic+0xaa>
    397a:	68bb      	ldr	r3, [r7, #8]
    397c:	781b      	ldrb	r3, [r3, #0]
    397e:	2b00      	cmp	r3, #0
    3980:	d1e2      	bne.n	3948 <SubscribeHandlerGameTopic+0x6c>
    3982:	e000      	b.n	3986 <SubscribeHandlerGameTopic+0xaa>
            if (*p != ',') break;
    3984:	46c0      	nop			; (mov r8, r8)
        }
        LogMessage(LOG_DEBUG_LVL, "\r\nParsed Command: ");
    3986:	4b23      	ldr	r3, [pc, #140]	; (3a14 <SubscribeHandlerGameTopic+0x138>)
    3988:	0019      	movs	r1, r3
    398a:	2001      	movs	r0, #1
    398c:	4b1d      	ldr	r3, [pc, #116]	; (3a04 <SubscribeHandlerGameTopic+0x128>)
    398e:	4798      	blx	r3
        for (int i = 0; i < GAME_SIZE; i++) {
    3990:	2300      	movs	r3, #0
    3992:	623b      	str	r3, [r7, #32]
    3994:	e00d      	b.n	39b2 <SubscribeHandlerGameTopic+0xd6>
            LogMessage(LOG_DEBUG_LVL, "%d,", game.game[i]);
    3996:	230c      	movs	r3, #12
    3998:	18fa      	adds	r2, r7, r3
    399a:	6a3b      	ldr	r3, [r7, #32]
    399c:	18d3      	adds	r3, r2, r3
    399e:	781b      	ldrb	r3, [r3, #0]
    39a0:	001a      	movs	r2, r3
    39a2:	4b1d      	ldr	r3, [pc, #116]	; (3a18 <SubscribeHandlerGameTopic+0x13c>)
    39a4:	0019      	movs	r1, r3
    39a6:	2001      	movs	r0, #1
    39a8:	4b16      	ldr	r3, [pc, #88]	; (3a04 <SubscribeHandlerGameTopic+0x128>)
    39aa:	4798      	blx	r3
        for (int i = 0; i < GAME_SIZE; i++) {
    39ac:	6a3b      	ldr	r3, [r7, #32]
    39ae:	3301      	adds	r3, #1
    39b0:	623b      	str	r3, [r7, #32]
    39b2:	6a3b      	ldr	r3, [r7, #32]
    39b4:	2b13      	cmp	r3, #19
    39b6:	ddee      	ble.n	3996 <SubscribeHandlerGameTopic+0xba>
    } else {
        LogMessage(LOG_DEBUG_LVL, "\r\nGame message received but not understood!\r\n");
        LogMessage(LOG_DEBUG_LVL, "\r\n %.*s", msgData->topicName->lenstring.len, msgData->topicName->lenstring.data);
        LogMessage(LOG_DEBUG_LVL, "%.*s", msgData->message->payloadlen, (char *)msgData->message->payload);
    }
}
    39b8:	e018      	b.n	39ec <SubscribeHandlerGameTopic+0x110>
        LogMessage(LOG_DEBUG_LVL, "\r\nGame message received but not understood!\r\n");
    39ba:	4b18      	ldr	r3, [pc, #96]	; (3a1c <SubscribeHandlerGameTopic+0x140>)
    39bc:	0019      	movs	r1, r3
    39be:	2001      	movs	r0, #1
    39c0:	4b10      	ldr	r3, [pc, #64]	; (3a04 <SubscribeHandlerGameTopic+0x128>)
    39c2:	4798      	blx	r3
        LogMessage(LOG_DEBUG_LVL, "\r\n %.*s", msgData->topicName->lenstring.len, msgData->topicName->lenstring.data);
    39c4:	687b      	ldr	r3, [r7, #4]
    39c6:	685b      	ldr	r3, [r3, #4]
    39c8:	685a      	ldr	r2, [r3, #4]
    39ca:	687b      	ldr	r3, [r7, #4]
    39cc:	685b      	ldr	r3, [r3, #4]
    39ce:	689b      	ldr	r3, [r3, #8]
    39d0:	490d      	ldr	r1, [pc, #52]	; (3a08 <SubscribeHandlerGameTopic+0x12c>)
    39d2:	2001      	movs	r0, #1
    39d4:	4c0b      	ldr	r4, [pc, #44]	; (3a04 <SubscribeHandlerGameTopic+0x128>)
    39d6:	47a0      	blx	r4
        LogMessage(LOG_DEBUG_LVL, "%.*s", msgData->message->payloadlen, (char *)msgData->message->payload);
    39d8:	687b      	ldr	r3, [r7, #4]
    39da:	681b      	ldr	r3, [r3, #0]
    39dc:	68da      	ldr	r2, [r3, #12]
    39de:	687b      	ldr	r3, [r7, #4]
    39e0:	681b      	ldr	r3, [r3, #0]
    39e2:	689b      	ldr	r3, [r3, #8]
    39e4:	4909      	ldr	r1, [pc, #36]	; (3a0c <SubscribeHandlerGameTopic+0x130>)
    39e6:	2001      	movs	r0, #1
    39e8:	4c06      	ldr	r4, [pc, #24]	; (3a04 <SubscribeHandlerGameTopic+0x128>)
    39ea:	47a0      	blx	r4
}
    39ec:	46c0      	nop			; (mov r8, r8)
    39ee:	46bd      	mov	sp, r7
    39f0:	b00b      	add	sp, #44	; 0x2c
    39f2:	bd90      	pop	{r4, r7, pc}
    39f4:	0002181b 	.word	0x0002181b
    39f8:	00023474 	.word	0x00023474
    39fc:	00021be1 	.word	0x00021be1
    3a00:	00023480 	.word	0x00023480
    3a04:	0000ad85 	.word	0x0000ad85
    3a08:	00023450 	.word	0x00023450
    3a0c:	0002349c 	.word	0x0002349c
    3a10:	00021d8d 	.word	0x00021d8d
    3a14:	000234a4 	.word	0x000234a4
    3a18:	000234b8 	.word	0x000234b8
    3a1c:	000234bc 	.word	0x000234bc

00003a20 <SubscribeHandlerImuTopic>:

void SubscribeHandlerImuTopic(MessageData *msgData)
{
    3a20:	b590      	push	{r4, r7, lr}
    3a22:	b083      	sub	sp, #12
    3a24:	af00      	add	r7, sp, #0
    3a26:	6078      	str	r0, [r7, #4]
    LogMessage(LOG_DEBUG_LVL, "\r\nIMU topic received!\r\n");
    3a28:	4b09      	ldr	r3, [pc, #36]	; (3a50 <SubscribeHandlerImuTopic+0x30>)
    3a2a:	0019      	movs	r1, r3
    3a2c:	2001      	movs	r0, #1
    3a2e:	4b09      	ldr	r3, [pc, #36]	; (3a54 <SubscribeHandlerImuTopic+0x34>)
    3a30:	4798      	blx	r3
    LogMessage(LOG_DEBUG_LVL, "\r\n %.*s", msgData->topicName->lenstring.len, msgData->topicName->lenstring.data);
    3a32:	687b      	ldr	r3, [r7, #4]
    3a34:	685b      	ldr	r3, [r3, #4]
    3a36:	685a      	ldr	r2, [r3, #4]
    3a38:	687b      	ldr	r3, [r7, #4]
    3a3a:	685b      	ldr	r3, [r3, #4]
    3a3c:	689b      	ldr	r3, [r3, #8]
    3a3e:	4906      	ldr	r1, [pc, #24]	; (3a58 <SubscribeHandlerImuTopic+0x38>)
    3a40:	2001      	movs	r0, #1
    3a42:	4c04      	ldr	r4, [pc, #16]	; (3a54 <SubscribeHandlerImuTopic+0x34>)
    3a44:	47a0      	blx	r4
}
    3a46:	46c0      	nop			; (mov r8, r8)
    3a48:	46bd      	mov	sp, r7
    3a4a:	b003      	add	sp, #12
    3a4c:	bd90      	pop	{r4, r7, pc}
    3a4e:	46c0      	nop			; (mov r8, r8)
    3a50:	000234ec 	.word	0x000234ec
    3a54:	0000ad85 	.word	0x0000ad85
    3a58:	00023450 	.word	0x00023450

00003a5c <mqtt_callback>:
 *  - [MQTT_CALLBACK_DISCONNECTED](@ref MQTT_CALLBACK_DISCONNECTED)
 *  - [MQTT_CALLBACK_RECV_PUBLISH](@ref MQTT_CALLBACK_RECV_PUBLISH)
 * \param[in] data A structure contains notification informations. @ref mqtt_data
 */
static void mqtt_callback(struct mqtt_module *module_inst, int type, union mqtt_data *data)
{
    3a5c:	b590      	push	{r4, r7, lr}
    3a5e:	b08b      	sub	sp, #44	; 0x2c
    3a60:	af06      	add	r7, sp, #24
    3a62:	60f8      	str	r0, [r7, #12]
    3a64:	60b9      	str	r1, [r7, #8]
    3a66:	607a      	str	r2, [r7, #4]
    switch (type) {
    3a68:	68bb      	ldr	r3, [r7, #8]
    3a6a:	2b01      	cmp	r3, #1
    3a6c:	d03b      	beq.n	3ae6 <mqtt_callback+0x8a>
    3a6e:	2b05      	cmp	r3, #5
    3a70:	d05e      	beq.n	3b30 <mqtt_callback+0xd4>
    3a72:	2b00      	cmp	r3, #0
    3a74:	d000      	beq.n	3a78 <mqtt_callback+0x1c>
            /* Stop timer and USART callback. */
            LogMessage(LOG_DEBUG_LVL, "MQTT disconnected\r\n");
            // usart_disable_callback(&cdc_uart_module, USART_CALLBACK_BUFFER_RECEIVED);
            break;
    }
}
    3a76:	e061      	b.n	3b3c <mqtt_callback+0xe0>
            if (data->sock_connected.result >= 0) {
    3a78:	687b      	ldr	r3, [r7, #4]
    3a7a:	681b      	ldr	r3, [r3, #0]
    3a7c:	2b00      	cmp	r3, #0
    3a7e:	db25      	blt.n	3acc <mqtt_callback+0x70>
                LogMessage(LOG_DEBUG_LVL, "\r\nConnecting to Broker...");
    3a80:	4b30      	ldr	r3, [pc, #192]	; (3b44 <mqtt_callback+0xe8>)
    3a82:	0019      	movs	r1, r3
    3a84:	2001      	movs	r0, #1
    3a86:	4b30      	ldr	r3, [pc, #192]	; (3b48 <mqtt_callback+0xec>)
    3a88:	4798      	blx	r3
                if (0 != mqtt_connect_broker(module_inst, 1, CLOUDMQTT_USER_ID, CLOUDMQTT_USER_PASSWORD, CLOUDMQTT_USER_ID, NULL, NULL, 0, 0, 0)) {
    3a8a:	4930      	ldr	r1, [pc, #192]	; (3b4c <mqtt_callback+0xf0>)
    3a8c:	4a30      	ldr	r2, [pc, #192]	; (3b50 <mqtt_callback+0xf4>)
    3a8e:	68f8      	ldr	r0, [r7, #12]
    3a90:	2300      	movs	r3, #0
    3a92:	9305      	str	r3, [sp, #20]
    3a94:	2300      	movs	r3, #0
    3a96:	9304      	str	r3, [sp, #16]
    3a98:	2300      	movs	r3, #0
    3a9a:	9303      	str	r3, [sp, #12]
    3a9c:	2300      	movs	r3, #0
    3a9e:	9302      	str	r3, [sp, #8]
    3aa0:	2300      	movs	r3, #0
    3aa2:	9301      	str	r3, [sp, #4]
    3aa4:	4b2a      	ldr	r3, [pc, #168]	; (3b50 <mqtt_callback+0xf4>)
    3aa6:	9300      	str	r3, [sp, #0]
    3aa8:	000b      	movs	r3, r1
    3aaa:	2101      	movs	r1, #1
    3aac:	4c29      	ldr	r4, [pc, #164]	; (3b54 <mqtt_callback+0xf8>)
    3aae:	47a0      	blx	r4
    3ab0:	1e03      	subs	r3, r0, #0
    3ab2:	d005      	beq.n	3ac0 <mqtt_callback+0x64>
                    LogMessage(LOG_DEBUG_LVL, "MQTT  Error - NOT Connected to broker\r\n");
    3ab4:	4b28      	ldr	r3, [pc, #160]	; (3b58 <mqtt_callback+0xfc>)
    3ab6:	0019      	movs	r1, r3
    3ab8:	2001      	movs	r0, #1
    3aba:	4b23      	ldr	r3, [pc, #140]	; (3b48 <mqtt_callback+0xec>)
    3abc:	4798      	blx	r3
        } break;
    3abe:	e03d      	b.n	3b3c <mqtt_callback+0xe0>
                    LogMessage(LOG_DEBUG_LVL, "MQTT Connected to broker\r\n");
    3ac0:	4b26      	ldr	r3, [pc, #152]	; (3b5c <mqtt_callback+0x100>)
    3ac2:	0019      	movs	r1, r3
    3ac4:	2001      	movs	r0, #1
    3ac6:	4b20      	ldr	r3, [pc, #128]	; (3b48 <mqtt_callback+0xec>)
    3ac8:	4798      	blx	r3
        } break;
    3aca:	e037      	b.n	3b3c <mqtt_callback+0xe0>
                LogMessage(LOG_DEBUG_LVL, "Connect fail to server(%s)! retry it automatically.\r\n", main_mqtt_broker);
    3acc:	4a24      	ldr	r2, [pc, #144]	; (3b60 <mqtt_callback+0x104>)
    3ace:	4b25      	ldr	r3, [pc, #148]	; (3b64 <mqtt_callback+0x108>)
    3ad0:	0019      	movs	r1, r3
    3ad2:	2001      	movs	r0, #1
    3ad4:	4b1c      	ldr	r3, [pc, #112]	; (3b48 <mqtt_callback+0xec>)
    3ad6:	4798      	blx	r3
                mqtt_connect(module_inst, main_mqtt_broker); /* Retry that. */
    3ad8:	4a21      	ldr	r2, [pc, #132]	; (3b60 <mqtt_callback+0x104>)
    3ada:	68fb      	ldr	r3, [r7, #12]
    3adc:	0011      	movs	r1, r2
    3ade:	0018      	movs	r0, r3
    3ae0:	4b21      	ldr	r3, [pc, #132]	; (3b68 <mqtt_callback+0x10c>)
    3ae2:	4798      	blx	r3
        } break;
    3ae4:	e02a      	b.n	3b3c <mqtt_callback+0xe0>
            if (data->connected.result == MQTT_CONN_RESULT_ACCEPT) {
    3ae6:	687b      	ldr	r3, [r7, #4]
    3ae8:	781b      	ldrb	r3, [r3, #0]
    3aea:	2b00      	cmp	r3, #0
    3aec:	d117      	bne.n	3b1e <mqtt_callback+0xc2>
                mqtt_subscribe(module_inst, GAME_TOPIC_IN, 2, SubscribeHandlerGameTopic);
    3aee:	4b1f      	ldr	r3, [pc, #124]	; (3b6c <mqtt_callback+0x110>)
    3af0:	491f      	ldr	r1, [pc, #124]	; (3b70 <mqtt_callback+0x114>)
    3af2:	68f8      	ldr	r0, [r7, #12]
    3af4:	2202      	movs	r2, #2
    3af6:	4c1f      	ldr	r4, [pc, #124]	; (3b74 <mqtt_callback+0x118>)
    3af8:	47a0      	blx	r4
                mqtt_subscribe(module_inst, LED_TOPIC, 2, SubscribeHandlerLedTopic);
    3afa:	4b1f      	ldr	r3, [pc, #124]	; (3b78 <mqtt_callback+0x11c>)
    3afc:	491f      	ldr	r1, [pc, #124]	; (3b7c <mqtt_callback+0x120>)
    3afe:	68f8      	ldr	r0, [r7, #12]
    3b00:	2202      	movs	r2, #2
    3b02:	4c1c      	ldr	r4, [pc, #112]	; (3b74 <mqtt_callback+0x118>)
    3b04:	47a0      	blx	r4
                mqtt_subscribe(module_inst, IMU_TOPIC, 2, SubscribeHandlerImuTopic);
    3b06:	4b1e      	ldr	r3, [pc, #120]	; (3b80 <mqtt_callback+0x124>)
    3b08:	491e      	ldr	r1, [pc, #120]	; (3b84 <mqtt_callback+0x128>)
    3b0a:	68f8      	ldr	r0, [r7, #12]
    3b0c:	2202      	movs	r2, #2
    3b0e:	4c19      	ldr	r4, [pc, #100]	; (3b74 <mqtt_callback+0x118>)
    3b10:	47a0      	blx	r4
                LogMessage(LOG_DEBUG_LVL, "MQTT Connected\r\n");
    3b12:	4b1d      	ldr	r3, [pc, #116]	; (3b88 <mqtt_callback+0x12c>)
    3b14:	0019      	movs	r1, r3
    3b16:	2001      	movs	r0, #1
    3b18:	4b0b      	ldr	r3, [pc, #44]	; (3b48 <mqtt_callback+0xec>)
    3b1a:	4798      	blx	r3
            break;
    3b1c:	e00e      	b.n	3b3c <mqtt_callback+0xe0>
                LogMessage(LOG_DEBUG_LVL, "MQTT broker decline your access! error code %d\r\n", data->connected.result);
    3b1e:	687b      	ldr	r3, [r7, #4]
    3b20:	781b      	ldrb	r3, [r3, #0]
    3b22:	001a      	movs	r2, r3
    3b24:	4b19      	ldr	r3, [pc, #100]	; (3b8c <mqtt_callback+0x130>)
    3b26:	0019      	movs	r1, r3
    3b28:	2001      	movs	r0, #1
    3b2a:	4b07      	ldr	r3, [pc, #28]	; (3b48 <mqtt_callback+0xec>)
    3b2c:	4798      	blx	r3
            break;
    3b2e:	e005      	b.n	3b3c <mqtt_callback+0xe0>
            LogMessage(LOG_DEBUG_LVL, "MQTT disconnected\r\n");
    3b30:	4b17      	ldr	r3, [pc, #92]	; (3b90 <mqtt_callback+0x134>)
    3b32:	0019      	movs	r1, r3
    3b34:	2001      	movs	r0, #1
    3b36:	4b04      	ldr	r3, [pc, #16]	; (3b48 <mqtt_callback+0xec>)
    3b38:	4798      	blx	r3
            break;
    3b3a:	46c0      	nop			; (mov r8, r8)
}
    3b3c:	46c0      	nop			; (mov r8, r8)
    3b3e:	46bd      	mov	sp, r7
    3b40:	b005      	add	sp, #20
    3b42:	bd90      	pop	{r4, r7, pc}
    3b44:	00023550 	.word	0x00023550
    3b48:	0000ad85 	.word	0x0000ad85
    3b4c:	0002356c 	.word	0x0002356c
    3b50:	0002357c 	.word	0x0002357c
    3b54:	0001c755 	.word	0x0001c755
    3b58:	00023588 	.word	0x00023588
    3b5c:	000235b0 	.word	0x000235b0
    3b60:	00022ecc 	.word	0x00022ecc
    3b64:	000235cc 	.word	0x000235cc
    3b68:	0001c70d 	.word	0x0001c70d
    3b6c:	000038dd 	.word	0x000038dd
    3b70:	00023604 	.word	0x00023604
    3b74:	0001c8f5 	.word	0x0001c8f5
    3b78:	00003805 	.word	0x00003805
    3b7c:	0002352c 	.word	0x0002352c
    3b80:	00003a21 	.word	0x00003a21
    3b84:	00023618 	.word	0x00023618
    3b88:	0002362c 	.word	0x0002362c
    3b8c:	00023640 	.word	0x00023640
    3b90:	00023674 	.word	0x00023674

00003b94 <configure_mqtt>:

/**
 * \brief Configure MQTT service.
 */
static void configure_mqtt(void)
{
    3b94:	b580      	push	{r7, lr}
    3b96:	b088      	sub	sp, #32
    3b98:	af00      	add	r7, sp, #0
    struct mqtt_config mqtt_conf;
    int result;

    mqtt_get_config_defaults(&mqtt_conf);
    3b9a:	1d3b      	adds	r3, r7, #4
    3b9c:	0018      	movs	r0, r3
    3b9e:	4b1f      	ldr	r3, [pc, #124]	; (3c1c <configure_mqtt+0x88>)
    3ba0:	4798      	blx	r3
    /* To use the MQTT service, it is necessary to always set the buffer and the timer. */
    mqtt_conf.read_buffer = mqtt_read_buffer;
    3ba2:	1d3b      	adds	r3, r7, #4
    3ba4:	4a1e      	ldr	r2, [pc, #120]	; (3c20 <configure_mqtt+0x8c>)
    3ba6:	609a      	str	r2, [r3, #8]
    mqtt_conf.read_buffer_size = MAIN_MQTT_BUFFER_SIZE;
    3ba8:	1d3b      	adds	r3, r7, #4
    3baa:	2280      	movs	r2, #128	; 0x80
    3bac:	0092      	lsls	r2, r2, #2
    3bae:	60da      	str	r2, [r3, #12]
    mqtt_conf.send_buffer = mqtt_send_buffer;
    3bb0:	1d3b      	adds	r3, r7, #4
    3bb2:	4a1c      	ldr	r2, [pc, #112]	; (3c24 <configure_mqtt+0x90>)
    3bb4:	611a      	str	r2, [r3, #16]
    mqtt_conf.send_buffer_size = MAIN_MQTT_BUFFER_SIZE;
    3bb6:	1d3b      	adds	r3, r7, #4
    3bb8:	2280      	movs	r2, #128	; 0x80
    3bba:	0092      	lsls	r2, r2, #2
    3bbc:	615a      	str	r2, [r3, #20]
    mqtt_conf.port = CLOUDMQTT_PORT;
    3bbe:	1d3b      	adds	r3, r7, #4
    3bc0:	4a19      	ldr	r2, [pc, #100]	; (3c28 <configure_mqtt+0x94>)
    3bc2:	801a      	strh	r2, [r3, #0]
    mqtt_conf.keep_alive = 6000;
    3bc4:	1d3b      	adds	r3, r7, #4
    3bc6:	4a19      	ldr	r2, [pc, #100]	; (3c2c <configure_mqtt+0x98>)
    3bc8:	809a      	strh	r2, [r3, #4]

    result = mqtt_init(&mqtt_inst, &mqtt_conf);
    3bca:	1d3a      	adds	r2, r7, #4
    3bcc:	4b18      	ldr	r3, [pc, #96]	; (3c30 <configure_mqtt+0x9c>)
    3bce:	0011      	movs	r1, r2
    3bd0:	0018      	movs	r0, r3
    3bd2:	4b18      	ldr	r3, [pc, #96]	; (3c34 <configure_mqtt+0xa0>)
    3bd4:	4798      	blx	r3
    3bd6:	0003      	movs	r3, r0
    3bd8:	61fb      	str	r3, [r7, #28]
    if (result < 0) {
    3bda:	69fb      	ldr	r3, [r7, #28]
    3bdc:	2b00      	cmp	r3, #0
    3bde:	da06      	bge.n	3bee <configure_mqtt+0x5a>
        LogMessage(LOG_DEBUG_LVL, "MQTT initialization failed. Error code is (%d)\r\n", result);
    3be0:	69fa      	ldr	r2, [r7, #28]
    3be2:	4b15      	ldr	r3, [pc, #84]	; (3c38 <configure_mqtt+0xa4>)
    3be4:	0019      	movs	r1, r3
    3be6:	2001      	movs	r0, #1
    3be8:	4b14      	ldr	r3, [pc, #80]	; (3c3c <configure_mqtt+0xa8>)
    3bea:	4798      	blx	r3
        while (1) {
    3bec:	e7fe      	b.n	3bec <configure_mqtt+0x58>
        }
    }

    result = mqtt_register_callback(&mqtt_inst, mqtt_callback);
    3bee:	4a14      	ldr	r2, [pc, #80]	; (3c40 <configure_mqtt+0xac>)
    3bf0:	4b0f      	ldr	r3, [pc, #60]	; (3c30 <configure_mqtt+0x9c>)
    3bf2:	0011      	movs	r1, r2
    3bf4:	0018      	movs	r0, r3
    3bf6:	4b13      	ldr	r3, [pc, #76]	; (3c44 <configure_mqtt+0xb0>)
    3bf8:	4798      	blx	r3
    3bfa:	0003      	movs	r3, r0
    3bfc:	61fb      	str	r3, [r7, #28]
    if (result < 0) {
    3bfe:	69fb      	ldr	r3, [r7, #28]
    3c00:	2b00      	cmp	r3, #0
    3c02:	da06      	bge.n	3c12 <configure_mqtt+0x7e>
        LogMessage(LOG_DEBUG_LVL, "MQTT register callback failed. Error code is (%d)\r\n", result);
    3c04:	69fa      	ldr	r2, [r7, #28]
    3c06:	4b10      	ldr	r3, [pc, #64]	; (3c48 <configure_mqtt+0xb4>)
    3c08:	0019      	movs	r1, r3
    3c0a:	2001      	movs	r0, #1
    3c0c:	4b0b      	ldr	r3, [pc, #44]	; (3c3c <configure_mqtt+0xa8>)
    3c0e:	4798      	blx	r3
        while (1) {
    3c10:	e7fe      	b.n	3c10 <configure_mqtt+0x7c>
        }
    }
}
    3c12:	46c0      	nop			; (mov r8, r8)
    3c14:	46bd      	mov	sp, r7
    3c16:	b008      	add	sp, #32
    3c18:	bd80      	pop	{r7, pc}
    3c1a:	46c0      	nop			; (mov r8, r8)
    3c1c:	0001c64d 	.word	0x0001c64d
    3c20:	20000734 	.word	0x20000734
    3c24:	20000934 	.word	0x20000934
    3c28:	0000075b 	.word	0x0000075b
    3c2c:	00001770 	.word	0x00001770
    3c30:	200006fc 	.word	0x200006fc
    3c34:	0001c59d 	.word	0x0001c59d
    3c38:	00023688 	.word	0x00023688
    3c3c:	0000ad85 	.word	0x0000ad85
    3c40:	00003a5d 	.word	0x00003a5d
    3c44:	0001c68d 	.word	0x0001c68d
    3c48:	000236bc 	.word	0x000236bc

00003c4c <configure_extint_channel>:

// SETUP FOR EXTERNAL BUTTON INTERRUPT -- Used to send an MQTT Message

void configure_extint_channel(void)
{
    3c4c:	b580      	push	{r7, lr}
    3c4e:	b084      	sub	sp, #16
    3c50:	af00      	add	r7, sp, #0
    struct extint_chan_conf config_extint_chan;
    extint_chan_get_config_defaults(&config_extint_chan);
    3c52:	1d3b      	adds	r3, r7, #4
    3c54:	0018      	movs	r0, r3
    3c56:	4b0b      	ldr	r3, [pc, #44]	; (3c84 <configure_extint_channel+0x38>)
    3c58:	4798      	blx	r3
    config_extint_chan.gpio_pin = BUTTON_0_EIC_PIN;
    3c5a:	1d3b      	adds	r3, r7, #4
    3c5c:	2237      	movs	r2, #55	; 0x37
    3c5e:	601a      	str	r2, [r3, #0]
    config_extint_chan.gpio_pin_mux = BUTTON_0_EIC_MUX;
    3c60:	1d3b      	adds	r3, r7, #4
    3c62:	2200      	movs	r2, #0
    3c64:	605a      	str	r2, [r3, #4]
    config_extint_chan.gpio_pin_pull = EXTINT_PULL_UP;
    3c66:	1d3b      	adds	r3, r7, #4
    3c68:	2201      	movs	r2, #1
    3c6a:	721a      	strb	r2, [r3, #8]
    config_extint_chan.detection_criteria = EXTINT_DETECT_FALLING;
    3c6c:	1d3b      	adds	r3, r7, #4
    3c6e:	2202      	movs	r2, #2
    3c70:	72da      	strb	r2, [r3, #11]
    extint_chan_set_config(BUTTON_0_EIC_LINE, &config_extint_chan);
    3c72:	1d3b      	adds	r3, r7, #4
    3c74:	0019      	movs	r1, r3
    3c76:	2007      	movs	r0, #7
    3c78:	4b03      	ldr	r3, [pc, #12]	; (3c88 <configure_extint_channel+0x3c>)
    3c7a:	4798      	blx	r3
}
    3c7c:	46c0      	nop			; (mov r8, r8)
    3c7e:	46bd      	mov	sp, r7
    3c80:	b004      	add	sp, #16
    3c82:	bd80      	pop	{r7, pc}
    3c84:	00013785 	.word	0x00013785
    3c88:	000137b9 	.word	0x000137b9

00003c8c <configure_extint_callbacks>:

void extint_detection_callback(void);
void configure_extint_callbacks(void)
{
    3c8c:	b580      	push	{r7, lr}
    3c8e:	af00      	add	r7, sp, #0
    extint_register_callback(extint_detection_callback, BUTTON_0_EIC_LINE, EXTINT_CALLBACK_TYPE_DETECT);
    3c90:	4b06      	ldr	r3, [pc, #24]	; (3cac <configure_extint_callbacks+0x20>)
    3c92:	2200      	movs	r2, #0
    3c94:	2107      	movs	r1, #7
    3c96:	0018      	movs	r0, r3
    3c98:	4b05      	ldr	r3, [pc, #20]	; (3cb0 <configure_extint_callbacks+0x24>)
    3c9a:	4798      	blx	r3
    extint_chan_enable_callback(BUTTON_0_EIC_LINE, EXTINT_CALLBACK_TYPE_DETECT);
    3c9c:	2100      	movs	r1, #0
    3c9e:	2007      	movs	r0, #7
    3ca0:	4b04      	ldr	r3, [pc, #16]	; (3cb4 <configure_extint_callbacks+0x28>)
    3ca2:	4798      	blx	r3
}
    3ca4:	46c0      	nop			; (mov r8, r8)
    3ca6:	46bd      	mov	sp, r7
    3ca8:	bd80      	pop	{r7, pc}
    3caa:	46c0      	nop			; (mov r8, r8)
    3cac:	00003cb9 	.word	0x00003cb9
    3cb0:	00013385 	.word	0x00013385
    3cb4:	000133e9 	.word	0x000133e9

00003cb8 <extint_detection_callback>:

volatile bool isPressed = false;
void extint_detection_callback(void)
{
    3cb8:	b5b0      	push	{r4, r5, r7, lr}
    3cba:	af00      	add	r7, sp, #0
    // Publish some data after a button press and release. Note: just an example! This is not the most elegant way of doing this!
    temperature++;
    3cbc:	4b0c      	ldr	r3, [pc, #48]	; (3cf0 <extint_detection_callback+0x38>)
    3cbe:	681b      	ldr	r3, [r3, #0]
    3cc0:	1c5a      	adds	r2, r3, #1
    3cc2:	4b0b      	ldr	r3, [pc, #44]	; (3cf0 <extint_detection_callback+0x38>)
    3cc4:	601a      	str	r2, [r3, #0]
    if (temperature > 40) temperature = 1;
    3cc6:	4b0a      	ldr	r3, [pc, #40]	; (3cf0 <extint_detection_callback+0x38>)
    3cc8:	681b      	ldr	r3, [r3, #0]
    3cca:	2b28      	cmp	r3, #40	; 0x28
    3ccc:	d902      	bls.n	3cd4 <extint_detection_callback+0x1c>
    3cce:	4b08      	ldr	r3, [pc, #32]	; (3cf0 <extint_detection_callback+0x38>)
    3cd0:	2201      	movs	r2, #1
    3cd2:	601a      	str	r2, [r3, #0]
    snprintf(mqtt_msg_temp, 63, "{\"d\":{\"temp\":%d}}", temperature);
    3cd4:	4b06      	ldr	r3, [pc, #24]	; (3cf0 <extint_detection_callback+0x38>)
    3cd6:	681b      	ldr	r3, [r3, #0]
    3cd8:	4a06      	ldr	r2, [pc, #24]	; (3cf4 <extint_detection_callback+0x3c>)
    3cda:	4807      	ldr	r0, [pc, #28]	; (3cf8 <extint_detection_callback+0x40>)
    3cdc:	213f      	movs	r1, #63	; 0x3f
    3cde:	4c07      	ldr	r4, [pc, #28]	; (3cfc <extint_detection_callback+0x44>)
    3ce0:	47a0      	blx	r4
    isPressed = true;
    3ce2:	4b07      	ldr	r3, [pc, #28]	; (3d00 <extint_detection_callback+0x48>)
    3ce4:	2201      	movs	r2, #1
    3ce6:	701a      	strb	r2, [r3, #0]
    // Published in the Wifi thread main loop
}
    3ce8:	46c0      	nop			; (mov r8, r8)
    3cea:	46bd      	mov	sp, r7
    3cec:	bdb0      	pop	{r4, r5, r7, pc}
    3cee:	46c0      	nop			; (mov r8, r8)
    3cf0:	200000a0 	.word	0x200000a0
    3cf4:	000236f0 	.word	0x000236f0
    3cf8:	20000060 	.word	0x20000060
    3cfc:	00021a75 	.word	0x00021a75
    3d00:	20000b34 	.word	0x20000b34

00003d04 <HTTP_DownloadFileInit>:
 * @brief	Routine to initialize HTTP download of the OTAU file
 * @note

*/
static void HTTP_DownloadFileInit(void)
{
    3d04:	b580      	push	{r7, lr}
    3d06:	af00      	add	r7, sp, #0
    if (mqtt_disconnect(&mqtt_inst, main_mqtt_broker)) {
    3d08:	4a15      	ldr	r2, [pc, #84]	; (3d60 <HTTP_DownloadFileInit+0x5c>)
    3d0a:	4b16      	ldr	r3, [pc, #88]	; (3d64 <HTTP_DownloadFileInit+0x60>)
    3d0c:	0011      	movs	r1, r2
    3d0e:	0018      	movs	r0, r3
    3d10:	4b15      	ldr	r3, [pc, #84]	; (3d68 <HTTP_DownloadFileInit+0x64>)
    3d12:	4798      	blx	r3
    3d14:	1e03      	subs	r3, r0, #0
    3d16:	d008      	beq.n	3d2a <HTTP_DownloadFileInit+0x26>
        LogMessage(LOG_DEBUG_LVL, "Error connecting to MQTT Broker!\r\n");
    3d18:	4b14      	ldr	r3, [pc, #80]	; (3d6c <HTTP_DownloadFileInit+0x68>)
    3d1a:	0019      	movs	r1, r3
    3d1c:	2001      	movs	r0, #1
    3d1e:	4b14      	ldr	r3, [pc, #80]	; (3d70 <HTTP_DownloadFileInit+0x6c>)
    3d20:	4798      	blx	r3
    }
    while ((mqtt_inst.isConnected)) {
    3d22:	e002      	b.n	3d2a <HTTP_DownloadFileInit+0x26>
        m2m_wifi_handle_events(NULL);
    3d24:	2000      	movs	r0, #0
    3d26:	4b13      	ldr	r3, [pc, #76]	; (3d74 <HTTP_DownloadFileInit+0x70>)
    3d28:	4798      	blx	r3
    while ((mqtt_inst.isConnected)) {
    3d2a:	4b0e      	ldr	r3, [pc, #56]	; (3d64 <HTTP_DownloadFileInit+0x60>)
    3d2c:	2234      	movs	r2, #52	; 0x34
    3d2e:	5c9b      	ldrb	r3, [r3, r2]
    3d30:	2b00      	cmp	r3, #0
    3d32:	d1f7      	bne.n	3d24 <HTTP_DownloadFileInit+0x20>
    }
    socketDeinit();
    3d34:	4b10      	ldr	r3, [pc, #64]	; (3d78 <HTTP_DownloadFileInit+0x74>)
    3d36:	4798      	blx	r3
    // DOWNLOAD A FILE
    do_download_flag = true;
    3d38:	4b10      	ldr	r3, [pc, #64]	; (3d7c <HTTP_DownloadFileInit+0x78>)
    3d3a:	2201      	movs	r2, #1
    3d3c:	701a      	strb	r2, [r3, #0]
    /* Register socket callback function. */
    registerSocketCallback(socket_cb, resolve_cb);
    3d3e:	4a10      	ldr	r2, [pc, #64]	; (3d80 <HTTP_DownloadFileInit+0x7c>)
    3d40:	4b10      	ldr	r3, [pc, #64]	; (3d84 <HTTP_DownloadFileInit+0x80>)
    3d42:	0011      	movs	r1, r2
    3d44:	0018      	movs	r0, r3
    3d46:	4b10      	ldr	r3, [pc, #64]	; (3d88 <HTTP_DownloadFileInit+0x84>)
    3d48:	4798      	blx	r3
    /* Initialize socket module. */
    socketInit();
    3d4a:	4b10      	ldr	r3, [pc, #64]	; (3d8c <HTTP_DownloadFileInit+0x88>)
    3d4c:	4798      	blx	r3

    start_download();
    3d4e:	4b10      	ldr	r3, [pc, #64]	; (3d90 <HTTP_DownloadFileInit+0x8c>)
    3d50:	4798      	blx	r3
    wifiStateMachine = WIFI_DOWNLOAD_HANDLE;
    3d52:	4b10      	ldr	r3, [pc, #64]	; (3d94 <HTTP_DownloadFileInit+0x90>)
    3d54:	2203      	movs	r2, #3
    3d56:	701a      	strb	r2, [r3, #0]
}
    3d58:	46c0      	nop			; (mov r8, r8)
    3d5a:	46bd      	mov	sp, r7
    3d5c:	bd80      	pop	{r7, pc}
    3d5e:	46c0      	nop			; (mov r8, r8)
    3d60:	00022ecc 	.word	0x00022ecc
    3d64:	200006fc 	.word	0x200006fc
    3d68:	0001c841 	.word	0x0001c841
    3d6c:	000232d8 	.word	0x000232d8
    3d70:	0000ad85 	.word	0x0000ad85
    3d74:	0000ee75 	.word	0x0000ee75
    3d78:	00012431 	.word	0x00012431
    3d7c:	2000049c 	.word	0x2000049c
    3d80:	00003455 	.word	0x00003455
    3d84:	00003421 	.word	0x00003421
    3d88:	00012479 	.word	0x00012479
    3d8c:	000123e1 	.word	0x000123e1
    3d90:	00003045 	.word	0x00003045
    3d94:	20000488 	.word	0x20000488

00003d98 <HTTP_DownloadFileTransaction>:
 * @brief	Routine to handle the HTTP transaction of downloading a file
 * @note

*/
static void HTTP_DownloadFileTransaction(void)
{
    3d98:	b590      	push	{r4, r7, lr}
    3d9a:	b085      	sub	sp, #20
    3d9c:	af00      	add	r7, sp, #0
    /* Connect to router. */
    while (!(is_state_set(COMPLETED) || is_state_set(CANCELED))) {
    3d9e:	e009      	b.n	3db4 <HTTP_DownloadFileTransaction+0x1c>
        /* Handle pending events from network controller. */
        m2m_wifi_handle_events(NULL);
    3da0:	2000      	movs	r0, #0
    3da2:	4b2a      	ldr	r3, [pc, #168]	; (3e4c <HTTP_DownloadFileTransaction+0xb4>)
    3da4:	4798      	blx	r3
        /* Checks the timer timeout. */
        sw_timer_task(&swt_module_inst);
    3da6:	4b2a      	ldr	r3, [pc, #168]	; (3e50 <HTTP_DownloadFileTransaction+0xb8>)
    3da8:	0018      	movs	r0, r3
    3daa:	4b2a      	ldr	r3, [pc, #168]	; (3e54 <HTTP_DownloadFileTransaction+0xbc>)
    3dac:	4798      	blx	r3
        vTaskDelay(5);
    3dae:	2005      	movs	r0, #5
    3db0:	4b29      	ldr	r3, [pc, #164]	; (3e58 <HTTP_DownloadFileTransaction+0xc0>)
    3db2:	4798      	blx	r3
    while (!(is_state_set(COMPLETED) || is_state_set(CANCELED))) {
    3db4:	2010      	movs	r0, #16
    3db6:	4b29      	ldr	r3, [pc, #164]	; (3e5c <HTTP_DownloadFileTransaction+0xc4>)
    3db8:	4798      	blx	r3
    3dba:	0003      	movs	r3, r0
    3dbc:	001a      	movs	r2, r3
    3dbe:	2301      	movs	r3, #1
    3dc0:	4053      	eors	r3, r2
    3dc2:	b2db      	uxtb	r3, r3
    3dc4:	2b00      	cmp	r3, #0
    3dc6:	d009      	beq.n	3ddc <HTTP_DownloadFileTransaction+0x44>
    3dc8:	2020      	movs	r0, #32
    3dca:	4b24      	ldr	r3, [pc, #144]	; (3e5c <HTTP_DownloadFileTransaction+0xc4>)
    3dcc:	4798      	blx	r3
    3dce:	0003      	movs	r3, r0
    3dd0:	001a      	movs	r2, r3
    3dd2:	2301      	movs	r3, #1
    3dd4:	4053      	eors	r3, r2
    3dd6:	b2db      	uxtb	r3, r3
    3dd8:	2b00      	cmp	r3, #0
    3dda:	d1e1      	bne.n	3da0 <HTTP_DownloadFileTransaction+0x8>
    }

    // Disable socket for HTTP Transfer
    socketDeinit();
    3ddc:	4b20      	ldr	r3, [pc, #128]	; (3e60 <HTTP_DownloadFileTransaction+0xc8>)
    3dde:	4798      	blx	r3
    vTaskDelay(1000);
    3de0:	23fa      	movs	r3, #250	; 0xfa
    3de2:	009b      	lsls	r3, r3, #2
    3de4:	0018      	movs	r0, r3
    3de6:	4b1c      	ldr	r3, [pc, #112]	; (3e58 <HTTP_DownloadFileTransaction+0xc0>)
    3de8:	4798      	blx	r3
    // CONNECT TO MQTT BROKER
    do_download_flag = false;
    3dea:	4b1e      	ldr	r3, [pc, #120]	; (3e64 <HTTP_DownloadFileTransaction+0xcc>)
    3dec:	2200      	movs	r2, #0
    3dee:	701a      	strb	r2, [r3, #0]

    // Write Flag
    char test_file_name[] = "0:FlagA.txt";
    3df0:	003b      	movs	r3, r7
    3df2:	4a1d      	ldr	r2, [pc, #116]	; (3e68 <HTTP_DownloadFileTransaction+0xd0>)
    3df4:	ca13      	ldmia	r2!, {r0, r1, r4}
    3df6:	c313      	stmia	r3!, {r0, r1, r4}
    test_file_name[0] = LUN_ID_SD_MMC_0_MEM + '0';
    3df8:	003b      	movs	r3, r7
    3dfa:	2230      	movs	r2, #48	; 0x30
    3dfc:	701a      	strb	r2, [r3, #0]
    FRESULT res = f_open(&file_object, (char const *)test_file_name, FA_CREATE_ALWAYS | FA_WRITE);
    3dfe:	230f      	movs	r3, #15
    3e00:	18fc      	adds	r4, r7, r3
    3e02:	0039      	movs	r1, r7
    3e04:	4b19      	ldr	r3, [pc, #100]	; (3e6c <HTTP_DownloadFileTransaction+0xd4>)
    3e06:	220a      	movs	r2, #10
    3e08:	0018      	movs	r0, r3
    3e0a:	4b19      	ldr	r3, [pc, #100]	; (3e70 <HTTP_DownloadFileTransaction+0xd8>)
    3e0c:	4798      	blx	r3
    3e0e:	0003      	movs	r3, r0
    3e10:	7023      	strb	r3, [r4, #0]

    if (res != FR_OK) {
    3e12:	230f      	movs	r3, #15
    3e14:	18fb      	adds	r3, r7, r3
    3e16:	781b      	ldrb	r3, [r3, #0]
    3e18:	2b00      	cmp	r3, #0
    3e1a:	d008      	beq.n	3e2e <HTTP_DownloadFileTransaction+0x96>
        LogMessage(LOG_INFO_LVL, "[FAIL] res %d\r\n", res);
    3e1c:	230f      	movs	r3, #15
    3e1e:	18fb      	adds	r3, r7, r3
    3e20:	781a      	ldrb	r2, [r3, #0]
    3e22:	4b14      	ldr	r3, [pc, #80]	; (3e74 <HTTP_DownloadFileTransaction+0xdc>)
    3e24:	0019      	movs	r1, r3
    3e26:	2000      	movs	r0, #0
    3e28:	4b13      	ldr	r3, [pc, #76]	; (3e78 <HTTP_DownloadFileTransaction+0xe0>)
    3e2a:	4798      	blx	r3
    3e2c:	e003      	b.n	3e36 <HTTP_DownloadFileTransaction+0x9e>
    } else {
        SerialConsoleWriteString("FlagA.txt added!\r\n");
    3e2e:	4b13      	ldr	r3, [pc, #76]	; (3e7c <HTTP_DownloadFileTransaction+0xe4>)
    3e30:	0018      	movs	r0, r3
    3e32:	4b13      	ldr	r3, [pc, #76]	; (3e80 <HTTP_DownloadFileTransaction+0xe8>)
    3e34:	4798      	blx	r3
    }

    f_close(&file_object);
    3e36:	4b0d      	ldr	r3, [pc, #52]	; (3e6c <HTTP_DownloadFileTransaction+0xd4>)
    3e38:	0018      	movs	r0, r3
    3e3a:	4b12      	ldr	r3, [pc, #72]	; (3e84 <HTTP_DownloadFileTransaction+0xec>)
    3e3c:	4798      	blx	r3
    wifiStateMachine = WIFI_MQTT_INIT;
    3e3e:	4b12      	ldr	r3, [pc, #72]	; (3e88 <HTTP_DownloadFileTransaction+0xf0>)
    3e40:	2200      	movs	r2, #0
    3e42:	701a      	strb	r2, [r3, #0]
}
    3e44:	46c0      	nop			; (mov r8, r8)
    3e46:	46bd      	mov	sp, r7
    3e48:	b005      	add	sp, #20
    3e4a:	bd90      	pop	{r4, r7, pc}
    3e4c:	0000ee75 	.word	0x0000ee75
    3e50:	20004290 	.word	0x20004290
    3e54:	0001f569 	.word	0x0001f569
    3e58:	00009045 	.word	0x00009045
    3e5c:	00002d1d 	.word	0x00002d1d
    3e60:	00012431 	.word	0x00012431
    3e64:	2000049c 	.word	0x2000049c
    3e68:	00023728 	.word	0x00023728
    3e6c:	200006d0 	.word	0x200006d0
    3e70:	0001a831 	.word	0x0001a831
    3e74:	00023704 	.word	0x00023704
    3e78:	0000ad85 	.word	0x0000ad85
    3e7c:	00023714 	.word	0x00023714
    3e80:	0000ac99 	.word	0x0000ac99
    3e84:	0001b231 	.word	0x0001b231
    3e88:	20000488 	.word	0x20000488

00003e8c <MQTT_InitRoutine>:
 * @brief	Routine to initialize the MQTT socket to prepare for MQTT transactions
 * @note

*/
static void MQTT_InitRoutine(void)
{
    3e8c:	b580      	push	{r7, lr}
    3e8e:	af00      	add	r7, sp, #0
    socketDeinit();
    3e90:	4b18      	ldr	r3, [pc, #96]	; (3ef4 <MQTT_InitRoutine+0x68>)
    3e92:	4798      	blx	r3
    configure_mqtt();
    3e94:	4b18      	ldr	r3, [pc, #96]	; (3ef8 <MQTT_InitRoutine+0x6c>)
    3e96:	4798      	blx	r3
    // Re-enable socket for MQTT Transfer
    registerSocketCallback(socket_event_handler, socket_resolve_handler);
    3e98:	4a18      	ldr	r2, [pc, #96]	; (3efc <MQTT_InitRoutine+0x70>)
    3e9a:	4b19      	ldr	r3, [pc, #100]	; (3f00 <MQTT_InitRoutine+0x74>)
    3e9c:	0011      	movs	r1, r2
    3e9e:	0018      	movs	r0, r3
    3ea0:	4b18      	ldr	r3, [pc, #96]	; (3f04 <MQTT_InitRoutine+0x78>)
    3ea2:	4798      	blx	r3
    socketInit();
    3ea4:	4b18      	ldr	r3, [pc, #96]	; (3f08 <MQTT_InitRoutine+0x7c>)
    3ea6:	4798      	blx	r3
    /* Connect to router. */
    if (!(mqtt_inst.isConnected)) {
    3ea8:	4b18      	ldr	r3, [pc, #96]	; (3f0c <MQTT_InitRoutine+0x80>)
    3eaa:	2234      	movs	r2, #52	; 0x34
    3eac:	5c9b      	ldrb	r3, [r3, r2]
    3eae:	2201      	movs	r2, #1
    3eb0:	4053      	eors	r3, r2
    3eb2:	b2db      	uxtb	r3, r3
    3eb4:	2b00      	cmp	r3, #0
    3eb6:	d00c      	beq.n	3ed2 <MQTT_InitRoutine+0x46>
        if (mqtt_connect(&mqtt_inst, main_mqtt_broker)) {
    3eb8:	4a15      	ldr	r2, [pc, #84]	; (3f10 <MQTT_InitRoutine+0x84>)
    3eba:	4b14      	ldr	r3, [pc, #80]	; (3f0c <MQTT_InitRoutine+0x80>)
    3ebc:	0011      	movs	r1, r2
    3ebe:	0018      	movs	r0, r3
    3ec0:	4b14      	ldr	r3, [pc, #80]	; (3f14 <MQTT_InitRoutine+0x88>)
    3ec2:	4798      	blx	r3
    3ec4:	1e03      	subs	r3, r0, #0
    3ec6:	d004      	beq.n	3ed2 <MQTT_InitRoutine+0x46>
            LogMessage(LOG_DEBUG_LVL, "Error connecting to MQTT Broker!\r\n");
    3ec8:	4b13      	ldr	r3, [pc, #76]	; (3f18 <MQTT_InitRoutine+0x8c>)
    3eca:	0019      	movs	r1, r3
    3ecc:	2001      	movs	r0, #1
    3ece:	4b13      	ldr	r3, [pc, #76]	; (3f1c <MQTT_InitRoutine+0x90>)
    3ed0:	4798      	blx	r3
        }
    }

    if (mqtt_inst.isConnected) {
    3ed2:	4b0e      	ldr	r3, [pc, #56]	; (3f0c <MQTT_InitRoutine+0x80>)
    3ed4:	2234      	movs	r2, #52	; 0x34
    3ed6:	5c9b      	ldrb	r3, [r3, r2]
    3ed8:	2b00      	cmp	r3, #0
    3eda:	d004      	beq.n	3ee6 <MQTT_InitRoutine+0x5a>
        LogMessage(LOG_DEBUG_LVL, "Connected to MQTT Broker!\r\n");
    3edc:	4b10      	ldr	r3, [pc, #64]	; (3f20 <MQTT_InitRoutine+0x94>)
    3ede:	0019      	movs	r1, r3
    3ee0:	2001      	movs	r0, #1
    3ee2:	4b0e      	ldr	r3, [pc, #56]	; (3f1c <MQTT_InitRoutine+0x90>)
    3ee4:	4798      	blx	r3
    }
    wifiStateMachine = WIFI_MQTT_HANDLE;
    3ee6:	4b0f      	ldr	r3, [pc, #60]	; (3f24 <MQTT_InitRoutine+0x98>)
    3ee8:	2201      	movs	r2, #1
    3eea:	701a      	strb	r2, [r3, #0]
}
    3eec:	46c0      	nop			; (mov r8, r8)
    3eee:	46bd      	mov	sp, r7
    3ef0:	bd80      	pop	{r7, pc}
    3ef2:	46c0      	nop			; (mov r8, r8)
    3ef4:	00012431 	.word	0x00012431
    3ef8:	00003b95 	.word	0x00003b95
    3efc:	000037e1 	.word	0x000037e1
    3f00:	000037ad 	.word	0x000037ad
    3f04:	00012479 	.word	0x00012479
    3f08:	000123e1 	.word	0x000123e1
    3f0c:	200006fc 	.word	0x200006fc
    3f10:	00022ecc 	.word	0x00022ecc
    3f14:	0001c70d 	.word	0x0001c70d
    3f18:	000232d8 	.word	0x000232d8
    3f1c:	0000ad85 	.word	0x0000ad85
    3f20:	00023734 	.word	0x00023734
    3f24:	20000488 	.word	0x20000488

00003f28 <MQTT_HandleTransactions>:
 * @brief	Routine to handle MQTT transactions
 * @note

*/
static void MQTT_HandleTransactions(void)
{
    3f28:	b580      	push	{r7, lr}
    3f2a:	af00      	add	r7, sp, #0
    /* Handle pending events from network controller. */
    m2m_wifi_handle_events(NULL);
    3f2c:	2000      	movs	r0, #0
    3f2e:	4b0b      	ldr	r3, [pc, #44]	; (3f5c <MQTT_HandleTransactions+0x34>)
    3f30:	4798      	blx	r3
    sw_timer_task(&swt_module_inst);
    3f32:	4b0b      	ldr	r3, [pc, #44]	; (3f60 <MQTT_HandleTransactions+0x38>)
    3f34:	0018      	movs	r0, r3
    3f36:	4b0b      	ldr	r3, [pc, #44]	; (3f64 <MQTT_HandleTransactions+0x3c>)
    3f38:	4798      	blx	r3

    // Check if data has to be sent!
    MQTT_HandleGameMessages();
    3f3a:	4b0b      	ldr	r3, [pc, #44]	; (3f68 <MQTT_HandleTransactions+0x40>)
    3f3c:	4798      	blx	r3
    MQTT_HandleImuMessages();
    3f3e:	4b0b      	ldr	r3, [pc, #44]	; (3f6c <MQTT_HandleTransactions+0x44>)
    3f40:	4798      	blx	r3

    // Handle MQTT messages
    if (mqtt_inst.isConnected) mqtt_yield(&mqtt_inst, 100);
    3f42:	4b0b      	ldr	r3, [pc, #44]	; (3f70 <MQTT_HandleTransactions+0x48>)
    3f44:	2234      	movs	r2, #52	; 0x34
    3f46:	5c9b      	ldrb	r3, [r3, r2]
    3f48:	2b00      	cmp	r3, #0
    3f4a:	d004      	beq.n	3f56 <MQTT_HandleTransactions+0x2e>
    3f4c:	4b08      	ldr	r3, [pc, #32]	; (3f70 <MQTT_HandleTransactions+0x48>)
    3f4e:	2164      	movs	r1, #100	; 0x64
    3f50:	0018      	movs	r0, r3
    3f52:	4b08      	ldr	r3, [pc, #32]	; (3f74 <MQTT_HandleTransactions+0x4c>)
    3f54:	4798      	blx	r3
}
    3f56:	46c0      	nop			; (mov r8, r8)
    3f58:	46bd      	mov	sp, r7
    3f5a:	bd80      	pop	{r7, pc}
    3f5c:	0000ee75 	.word	0x0000ee75
    3f60:	20004290 	.word	0x20004290
    3f64:	0001f569 	.word	0x0001f569
    3f68:	00004005 	.word	0x00004005
    3f6c:	00003f79 	.word	0x00003f79
    3f70:	200006fc 	.word	0x200006fc
    3f74:	0001c93d 	.word	0x0001c93d

00003f78 <MQTT_HandleImuMessages>:

static void MQTT_HandleImuMessages(void)
{
    3f78:	b590      	push	{r4, r7, lr}
    3f7a:	b085      	sub	sp, #20
    3f7c:	af02      	add	r7, sp, #8
    struct ImuDataPacket imuDataVar;
    if (pdPASS == xQueueReceive(xQueueImuBuffer, &imuDataVar, 0)) {
    3f7e:	4b18      	ldr	r3, [pc, #96]	; (3fe0 <MQTT_HandleImuMessages+0x68>)
    3f80:	681b      	ldr	r3, [r3, #0]
    3f82:	0039      	movs	r1, r7
    3f84:	2200      	movs	r2, #0
    3f86:	0018      	movs	r0, r3
    3f88:	4b16      	ldr	r3, [pc, #88]	; (3fe4 <MQTT_HandleImuMessages+0x6c>)
    3f8a:	4798      	blx	r3
    3f8c:	0003      	movs	r3, r0
    3f8e:	2b01      	cmp	r3, #1
    3f90:	d121      	bne.n	3fd6 <MQTT_HandleImuMessages+0x5e>
        snprintf(mqtt_msg, 63, "{\"imux\":%d, \"imuy\": %d, \"imuz\": %d}", imuDataVar.xmg, imuDataVar.ymg, imuDataVar.zmg);
    3f92:	003b      	movs	r3, r7
    3f94:	2200      	movs	r2, #0
    3f96:	5e9b      	ldrsh	r3, [r3, r2]
    3f98:	001c      	movs	r4, r3
    3f9a:	003b      	movs	r3, r7
    3f9c:	2202      	movs	r2, #2
    3f9e:	5e9b      	ldrsh	r3, [r3, r2]
    3fa0:	0019      	movs	r1, r3
    3fa2:	003b      	movs	r3, r7
    3fa4:	2204      	movs	r2, #4
    3fa6:	5e9b      	ldrsh	r3, [r3, r2]
    3fa8:	4a0f      	ldr	r2, [pc, #60]	; (3fe8 <MQTT_HandleImuMessages+0x70>)
    3faa:	4810      	ldr	r0, [pc, #64]	; (3fec <MQTT_HandleImuMessages+0x74>)
    3fac:	9301      	str	r3, [sp, #4]
    3fae:	9100      	str	r1, [sp, #0]
    3fb0:	0023      	movs	r3, r4
    3fb2:	213f      	movs	r1, #63	; 0x3f
    3fb4:	4c0e      	ldr	r4, [pc, #56]	; (3ff0 <MQTT_HandleImuMessages+0x78>)
    3fb6:	47a0      	blx	r4
        mqtt_publish(&mqtt_inst, IMU_TOPIC, mqtt_msg, strlen(mqtt_msg), 1, 0);
    3fb8:	4b0c      	ldr	r3, [pc, #48]	; (3fec <MQTT_HandleImuMessages+0x74>)
    3fba:	0018      	movs	r0, r3
    3fbc:	4b0d      	ldr	r3, [pc, #52]	; (3ff4 <MQTT_HandleImuMessages+0x7c>)
    3fbe:	4798      	blx	r3
    3fc0:	0004      	movs	r4, r0
    3fc2:	4a0a      	ldr	r2, [pc, #40]	; (3fec <MQTT_HandleImuMessages+0x74>)
    3fc4:	490c      	ldr	r1, [pc, #48]	; (3ff8 <MQTT_HandleImuMessages+0x80>)
    3fc6:	480d      	ldr	r0, [pc, #52]	; (3ffc <MQTT_HandleImuMessages+0x84>)
    3fc8:	2300      	movs	r3, #0
    3fca:	9301      	str	r3, [sp, #4]
    3fcc:	2301      	movs	r3, #1
    3fce:	9300      	str	r3, [sp, #0]
    3fd0:	0023      	movs	r3, r4
    3fd2:	4c0b      	ldr	r4, [pc, #44]	; (4000 <MQTT_HandleImuMessages+0x88>)
    3fd4:	47a0      	blx	r4
    }
}
    3fd6:	46c0      	nop			; (mov r8, r8)
    3fd8:	46bd      	mov	sp, r7
    3fda:	b003      	add	sp, #12
    3fdc:	bd90      	pop	{r4, r7, pc}
    3fde:	46c0      	nop			; (mov r8, r8)
    3fe0:	20000494 	.word	0x20000494
    3fe4:	00007e99 	.word	0x00007e99
    3fe8:	00023750 	.word	0x00023750
    3fec:	20000020 	.word	0x20000020
    3ff0:	00021a75 	.word	0x00021a75
    3ff4:	00021bd3 	.word	0x00021bd3
    3ff8:	00023618 	.word	0x00023618
    3ffc:	200006fc 	.word	0x200006fc
    4000:	0001c889 	.word	0x0001c889

00004004 <MQTT_HandleGameMessages>:

static void MQTT_HandleGameMessages(void)
{
    4004:	b590      	push	{r4, r7, lr}
    4006:	b08b      	sub	sp, #44	; 0x2c
    4008:	af02      	add	r7, sp, #8
    struct GameDataPacket gamePacket;
    if (pdPASS == xQueueReceive(xQueueGameBuffer, &gamePacket, 0)) {
    400a:	4b39      	ldr	r3, [pc, #228]	; (40f0 <MQTT_HandleGameMessages+0xec>)
    400c:	681b      	ldr	r3, [r3, #0]
    400e:	2208      	movs	r2, #8
    4010:	18b9      	adds	r1, r7, r2
    4012:	2200      	movs	r2, #0
    4014:	0018      	movs	r0, r3
    4016:	4b37      	ldr	r3, [pc, #220]	; (40f4 <MQTT_HandleGameMessages+0xf0>)
    4018:	4798      	blx	r3
    401a:	0003      	movs	r3, r0
    401c:	2b01      	cmp	r3, #1
    401e:	d163      	bne.n	40e8 <MQTT_HandleGameMessages+0xe4>
        snprintf(mqtt_msg, 63, "{\"game\":[");
    4020:	4b35      	ldr	r3, [pc, #212]	; (40f8 <MQTT_HandleGameMessages+0xf4>)
    4022:	4a36      	ldr	r2, [pc, #216]	; (40fc <MQTT_HandleGameMessages+0xf8>)
    4024:	ca03      	ldmia	r2!, {r0, r1}
    4026:	c303      	stmia	r3!, {r0, r1}
    4028:	8812      	ldrh	r2, [r2, #0]
    402a:	801a      	strh	r2, [r3, #0]
        for (int iter = 0; iter < GAME_SIZE; iter++) {
    402c:	2300      	movs	r3, #0
    402e:	61fb      	str	r3, [r7, #28]
    4030:	e02d      	b.n	408e <MQTT_HandleGameMessages+0x8a>
            char numGame[5];
            if (gamePacket.game[iter] != 0xFF) {
    4032:	2308      	movs	r3, #8
    4034:	18fa      	adds	r2, r7, r3
    4036:	69fb      	ldr	r3, [r7, #28]
    4038:	18d3      	adds	r3, r2, r3
    403a:	781b      	ldrb	r3, [r3, #0]
    403c:	2bff      	cmp	r3, #255	; 0xff
    403e:	d02a      	beq.n	4096 <MQTT_HandleGameMessages+0x92>
                snprintf(numGame, 3, "%d", gamePacket.game[iter]);
    4040:	2308      	movs	r3, #8
    4042:	18fa      	adds	r2, r7, r3
    4044:	69fb      	ldr	r3, [r7, #28]
    4046:	18d3      	adds	r3, r2, r3
    4048:	781b      	ldrb	r3, [r3, #0]
    404a:	4a2d      	ldr	r2, [pc, #180]	; (4100 <MQTT_HandleGameMessages+0xfc>)
    404c:	0038      	movs	r0, r7
    404e:	2103      	movs	r1, #3
    4050:	4c2c      	ldr	r4, [pc, #176]	; (4104 <MQTT_HandleGameMessages+0x100>)
    4052:	47a0      	blx	r4
                strcat(mqtt_msg, numGame);
    4054:	003a      	movs	r2, r7
    4056:	4b28      	ldr	r3, [pc, #160]	; (40f8 <MQTT_HandleGameMessages+0xf4>)
    4058:	0011      	movs	r1, r2
    405a:	0018      	movs	r0, r3
    405c:	4b2a      	ldr	r3, [pc, #168]	; (4108 <MQTT_HandleGameMessages+0x104>)
    405e:	4798      	blx	r3
                if (gamePacket.game[iter + 1] != 0xFF && iter + 1 < GAME_SIZE) {
    4060:	69fb      	ldr	r3, [r7, #28]
    4062:	3301      	adds	r3, #1
    4064:	2208      	movs	r2, #8
    4066:	18ba      	adds	r2, r7, r2
    4068:	5cd3      	ldrb	r3, [r2, r3]
    406a:	2bff      	cmp	r3, #255	; 0xff
    406c:	d00c      	beq.n	4088 <MQTT_HandleGameMessages+0x84>
    406e:	69fb      	ldr	r3, [r7, #28]
    4070:	3301      	adds	r3, #1
    4072:	2b13      	cmp	r3, #19
    4074:	dc08      	bgt.n	4088 <MQTT_HandleGameMessages+0x84>
                    snprintf(numGame, 5, ",");
    4076:	003b      	movs	r3, r7
    4078:	222c      	movs	r2, #44	; 0x2c
    407a:	801a      	strh	r2, [r3, #0]
                    strcat(mqtt_msg, numGame);
    407c:	003a      	movs	r2, r7
    407e:	4b1e      	ldr	r3, [pc, #120]	; (40f8 <MQTT_HandleGameMessages+0xf4>)
    4080:	0011      	movs	r1, r2
    4082:	0018      	movs	r0, r3
    4084:	4b20      	ldr	r3, [pc, #128]	; (4108 <MQTT_HandleGameMessages+0x104>)
    4086:	4798      	blx	r3
        for (int iter = 0; iter < GAME_SIZE; iter++) {
    4088:	69fb      	ldr	r3, [r7, #28]
    408a:	3301      	adds	r3, #1
    408c:	61fb      	str	r3, [r7, #28]
    408e:	69fb      	ldr	r3, [r7, #28]
    4090:	2b13      	cmp	r3, #19
    4092:	ddce      	ble.n	4032 <MQTT_HandleGameMessages+0x2e>
    4094:	e000      	b.n	4098 <MQTT_HandleGameMessages+0x94>
                }
            } else {
                break;
    4096:	46c0      	nop			; (mov r8, r8)
            }
        }
        strcat(mqtt_msg, "]}");
    4098:	4b17      	ldr	r3, [pc, #92]	; (40f8 <MQTT_HandleGameMessages+0xf4>)
    409a:	0018      	movs	r0, r3
    409c:	4b1b      	ldr	r3, [pc, #108]	; (410c <MQTT_HandleGameMessages+0x108>)
    409e:	4798      	blx	r3
    40a0:	0003      	movs	r3, r0
    40a2:	001a      	movs	r2, r3
    40a4:	4b14      	ldr	r3, [pc, #80]	; (40f8 <MQTT_HandleGameMessages+0xf4>)
    40a6:	18d2      	adds	r2, r2, r3
    40a8:	4b19      	ldr	r3, [pc, #100]	; (4110 <MQTT_HandleGameMessages+0x10c>)
    40aa:	0010      	movs	r0, r2
    40ac:	0019      	movs	r1, r3
    40ae:	2303      	movs	r3, #3
    40b0:	001a      	movs	r2, r3
    40b2:	4b18      	ldr	r3, [pc, #96]	; (4114 <MQTT_HandleGameMessages+0x110>)
    40b4:	4798      	blx	r3
        LogMessage(LOG_DEBUG_LVL, mqtt_msg);
    40b6:	4b10      	ldr	r3, [pc, #64]	; (40f8 <MQTT_HandleGameMessages+0xf4>)
    40b8:	0019      	movs	r1, r3
    40ba:	2001      	movs	r0, #1
    40bc:	4b16      	ldr	r3, [pc, #88]	; (4118 <MQTT_HandleGameMessages+0x114>)
    40be:	4798      	blx	r3
        LogMessage(LOG_DEBUG_LVL, "\r\n");
    40c0:	4b16      	ldr	r3, [pc, #88]	; (411c <MQTT_HandleGameMessages+0x118>)
    40c2:	0019      	movs	r1, r3
    40c4:	2001      	movs	r0, #1
    40c6:	4b14      	ldr	r3, [pc, #80]	; (4118 <MQTT_HandleGameMessages+0x114>)
    40c8:	4798      	blx	r3
        mqtt_publish(&mqtt_inst, GAME_TOPIC_OUT, mqtt_msg, strlen(mqtt_msg), 1, 0);
    40ca:	4b0b      	ldr	r3, [pc, #44]	; (40f8 <MQTT_HandleGameMessages+0xf4>)
    40cc:	0018      	movs	r0, r3
    40ce:	4b0f      	ldr	r3, [pc, #60]	; (410c <MQTT_HandleGameMessages+0x108>)
    40d0:	4798      	blx	r3
    40d2:	0004      	movs	r4, r0
    40d4:	4a08      	ldr	r2, [pc, #32]	; (40f8 <MQTT_HandleGameMessages+0xf4>)
    40d6:	4912      	ldr	r1, [pc, #72]	; (4120 <MQTT_HandleGameMessages+0x11c>)
    40d8:	4812      	ldr	r0, [pc, #72]	; (4124 <MQTT_HandleGameMessages+0x120>)
    40da:	2300      	movs	r3, #0
    40dc:	9301      	str	r3, [sp, #4]
    40de:	2301      	movs	r3, #1
    40e0:	9300      	str	r3, [sp, #0]
    40e2:	0023      	movs	r3, r4
    40e4:	4c10      	ldr	r4, [pc, #64]	; (4128 <MQTT_HandleGameMessages+0x124>)
    40e6:	47a0      	blx	r4
    }
}
    40e8:	46c0      	nop			; (mov r8, r8)
    40ea:	46bd      	mov	sp, r7
    40ec:	b009      	add	sp, #36	; 0x24
    40ee:	bd90      	pop	{r4, r7, pc}
    40f0:	20000490 	.word	0x20000490
    40f4:	00007e99 	.word	0x00007e99
    40f8:	20000020 	.word	0x20000020
    40fc:	00023474 	.word	0x00023474
    4100:	00023774 	.word	0x00023774
    4104:	00021a75 	.word	0x00021a75
    4108:	00021b59 	.word	0x00021b59
    410c:	00021bd3 	.word	0x00021bd3
    4110:	00023778 	.word	0x00023778
    4114:	000217e5 	.word	0x000217e5
    4118:	0000ad85 	.word	0x0000ad85
    411c:	0002377c 	.word	0x0002377c
    4120:	00023780 	.word	0x00023780
    4124:	200006fc 	.word	0x200006fc
    4128:	0001c889 	.word	0x0001c889

0000412c <vWifiTask>:
 * Application entry point.
 *
 * \return program return value.
 */
void vWifiTask(void *pvParameters)
{
    412c:	b590      	push	{r4, r7, lr}
    412e:	b08d      	sub	sp, #52	; 0x34
    4130:	af02      	add	r7, sp, #8
    4132:	6078      	str	r0, [r7, #4]
    tstrWifiInitParam param;
    int8_t ret;
    vTaskDelay(100);
    4134:	2064      	movs	r0, #100	; 0x64
    4136:	4b79      	ldr	r3, [pc, #484]	; (431c <vWifiTask+0x1f0>)
    4138:	4798      	blx	r3
    init_state();
    413a:	4b79      	ldr	r3, [pc, #484]	; (4320 <vWifiTask+0x1f4>)
    413c:	4798      	blx	r3
    // Create buffers to send data
    xQueueWifiState = xQueueCreate(5, sizeof(uint32_t));
    413e:	2200      	movs	r2, #0
    4140:	2104      	movs	r1, #4
    4142:	2005      	movs	r0, #5
    4144:	4b77      	ldr	r3, [pc, #476]	; (4324 <vWifiTask+0x1f8>)
    4146:	4798      	blx	r3
    4148:	0002      	movs	r2, r0
    414a:	4b77      	ldr	r3, [pc, #476]	; (4328 <vWifiTask+0x1fc>)
    414c:	601a      	str	r2, [r3, #0]
    xQueueImuBuffer = xQueueCreate(5, sizeof(struct ImuDataPacket));
    414e:	2200      	movs	r2, #0
    4150:	2106      	movs	r1, #6
    4152:	2005      	movs	r0, #5
    4154:	4b73      	ldr	r3, [pc, #460]	; (4324 <vWifiTask+0x1f8>)
    4156:	4798      	blx	r3
    4158:	0002      	movs	r2, r0
    415a:	4b74      	ldr	r3, [pc, #464]	; (432c <vWifiTask+0x200>)
    415c:	601a      	str	r2, [r3, #0]
    xQueueGameBuffer = xQueueCreate(2, sizeof(struct GameDataPacket));
    415e:	2200      	movs	r2, #0
    4160:	2114      	movs	r1, #20
    4162:	2002      	movs	r0, #2
    4164:	4b6f      	ldr	r3, [pc, #444]	; (4324 <vWifiTask+0x1f8>)
    4166:	4798      	blx	r3
    4168:	0002      	movs	r2, r0
    416a:	4b71      	ldr	r3, [pc, #452]	; (4330 <vWifiTask+0x204>)
    416c:	601a      	str	r2, [r3, #0]
    xQueueDistanceBuffer = xQueueCreate(5, sizeof(uint16_t));
    416e:	2200      	movs	r2, #0
    4170:	2102      	movs	r1, #2
    4172:	2005      	movs	r0, #5
    4174:	4b6b      	ldr	r3, [pc, #428]	; (4324 <vWifiTask+0x1f8>)
    4176:	4798      	blx	r3
    4178:	0002      	movs	r2, r0
    417a:	4b6e      	ldr	r3, [pc, #440]	; (4334 <vWifiTask+0x208>)
    417c:	601a      	str	r2, [r3, #0]

    if (xQueueWifiState == NULL || xQueueImuBuffer == NULL || xQueueGameBuffer == NULL || xQueueDistanceBuffer == NULL) {
    417e:	4b6a      	ldr	r3, [pc, #424]	; (4328 <vWifiTask+0x1fc>)
    4180:	681b      	ldr	r3, [r3, #0]
    4182:	2b00      	cmp	r3, #0
    4184:	d00b      	beq.n	419e <vWifiTask+0x72>
    4186:	4b69      	ldr	r3, [pc, #420]	; (432c <vWifiTask+0x200>)
    4188:	681b      	ldr	r3, [r3, #0]
    418a:	2b00      	cmp	r3, #0
    418c:	d007      	beq.n	419e <vWifiTask+0x72>
    418e:	4b68      	ldr	r3, [pc, #416]	; (4330 <vWifiTask+0x204>)
    4190:	681b      	ldr	r3, [r3, #0]
    4192:	2b00      	cmp	r3, #0
    4194:	d003      	beq.n	419e <vWifiTask+0x72>
    4196:	4b67      	ldr	r3, [pc, #412]	; (4334 <vWifiTask+0x208>)
    4198:	681b      	ldr	r3, [r3, #0]
    419a:	2b00      	cmp	r3, #0
    419c:	d103      	bne.n	41a6 <vWifiTask+0x7a>
        SerialConsoleWriteString("ERROR Initializing Wifi Data queues!\r\n");
    419e:	4b66      	ldr	r3, [pc, #408]	; (4338 <vWifiTask+0x20c>)
    41a0:	0018      	movs	r0, r3
    41a2:	4b66      	ldr	r3, [pc, #408]	; (433c <vWifiTask+0x210>)
    41a4:	4798      	blx	r3
    }

    SerialConsoleWriteString("ESE516 - Wifi Init Code\r\n");
    41a6:	4b66      	ldr	r3, [pc, #408]	; (4340 <vWifiTask+0x214>)
    41a8:	0018      	movs	r0, r3
    41aa:	4b64      	ldr	r3, [pc, #400]	; (433c <vWifiTask+0x210>)
    41ac:	4798      	blx	r3
    /* Initialize the Timer. */
    configure_timer();
    41ae:	4b65      	ldr	r3, [pc, #404]	; (4344 <vWifiTask+0x218>)
    41b0:	4798      	blx	r3

    /* Initialize the HTTP client service. */
    configure_http_client();
    41b2:	4b65      	ldr	r3, [pc, #404]	; (4348 <vWifiTask+0x21c>)
    41b4:	4798      	blx	r3

    /* Initialize the MQTT service. */
    configure_mqtt();
    41b6:	4b65      	ldr	r3, [pc, #404]	; (434c <vWifiTask+0x220>)
    41b8:	4798      	blx	r3

    /* Initialize SD/MMC storage. */
    init_storage();
    41ba:	4b65      	ldr	r3, [pc, #404]	; (4350 <vWifiTask+0x224>)
    41bc:	4798      	blx	r3

    /*Initialize BUTTON 0 as an external interrupt*/
    configure_extint_channel();
    41be:	4b65      	ldr	r3, [pc, #404]	; (4354 <vWifiTask+0x228>)
    41c0:	4798      	blx	r3
    configure_extint_callbacks();
    41c2:	4b65      	ldr	r3, [pc, #404]	; (4358 <vWifiTask+0x22c>)
    41c4:	4798      	blx	r3

    /* Initialize Wi-Fi parameters structure. */
    memset((uint8_t *)&param, 0, sizeof(tstrWifiInitParam));
    41c6:	230c      	movs	r3, #12
    41c8:	18fb      	adds	r3, r7, r3
    41ca:	2218      	movs	r2, #24
    41cc:	2100      	movs	r1, #0
    41ce:	0018      	movs	r0, r3
    41d0:	4b62      	ldr	r3, [pc, #392]	; (435c <vWifiTask+0x230>)
    41d2:	4798      	blx	r3

    nm_bsp_init();
    41d4:	4b62      	ldr	r3, [pc, #392]	; (4360 <vWifiTask+0x234>)
    41d6:	4798      	blx	r3

    /* Initialize Wi-Fi driver with data and status callbacks. */
    param.pfAppWifiCb = wifi_cb;
    41d8:	230c      	movs	r3, #12
    41da:	18fb      	adds	r3, r7, r3
    41dc:	4a61      	ldr	r2, [pc, #388]	; (4364 <vWifiTask+0x238>)
    41de:	601a      	str	r2, [r3, #0]
    ret = m2m_wifi_init(&param);
    41e0:	2327      	movs	r3, #39	; 0x27
    41e2:	18fc      	adds	r4, r7, r3
    41e4:	230c      	movs	r3, #12
    41e6:	18fb      	adds	r3, r7, r3
    41e8:	0018      	movs	r0, r3
    41ea:	4b5f      	ldr	r3, [pc, #380]	; (4368 <vWifiTask+0x23c>)
    41ec:	4798      	blx	r3
    41ee:	0003      	movs	r3, r0
    41f0:	7023      	strb	r3, [r4, #0]
    if (M2M_SUCCESS != ret) {
    41f2:	2327      	movs	r3, #39	; 0x27
    41f4:	18fb      	adds	r3, r7, r3
    41f6:	781b      	ldrb	r3, [r3, #0]
    41f8:	b25b      	sxtb	r3, r3
    41fa:	2b00      	cmp	r3, #0
    41fc:	d009      	beq.n	4212 <vWifiTask+0xe6>
        LogMessage(LOG_DEBUG_LVL, "main: m2m_wifi_init call error! (res %d)\r\n", ret);
    41fe:	2327      	movs	r3, #39	; 0x27
    4200:	18fb      	adds	r3, r7, r3
    4202:	2200      	movs	r2, #0
    4204:	569a      	ldrsb	r2, [r3, r2]
    4206:	4b59      	ldr	r3, [pc, #356]	; (436c <vWifiTask+0x240>)
    4208:	0019      	movs	r1, r3
    420a:	2001      	movs	r0, #1
    420c:	4b58      	ldr	r3, [pc, #352]	; (4370 <vWifiTask+0x244>)
    420e:	4798      	blx	r3
        while (1) {
    4210:	e7fe      	b.n	4210 <vWifiTask+0xe4>
        }
    }

    LogMessage(LOG_DEBUG_LVL, "main: connecting to WiFi AP %s...\r\n", (char *)MAIN_WLAN_SSID);
    4212:	4a58      	ldr	r2, [pc, #352]	; (4374 <vWifiTask+0x248>)
    4214:	4b58      	ldr	r3, [pc, #352]	; (4378 <vWifiTask+0x24c>)
    4216:	0019      	movs	r1, r3
    4218:	2001      	movs	r0, #1
    421a:	4b55      	ldr	r3, [pc, #340]	; (4370 <vWifiTask+0x244>)
    421c:	4798      	blx	r3

    // Re-enable socket for MQTT Transfer
    socketInit();
    421e:	4b57      	ldr	r3, [pc, #348]	; (437c <vWifiTask+0x250>)
    4220:	4798      	blx	r3
    registerSocketCallback(socket_event_handler, socket_resolve_handler);
    4222:	4a57      	ldr	r2, [pc, #348]	; (4380 <vWifiTask+0x254>)
    4224:	4b57      	ldr	r3, [pc, #348]	; (4384 <vWifiTask+0x258>)
    4226:	0011      	movs	r1, r2
    4228:	0018      	movs	r0, r3
    422a:	4b57      	ldr	r3, [pc, #348]	; (4388 <vWifiTask+0x25c>)
    422c:	4798      	blx	r3

    m2m_wifi_connect((char *)MAIN_WLAN_SSID, sizeof(MAIN_WLAN_SSID), MAIN_WLAN_AUTH, (char *)MAIN_WLAN_PSK, M2M_WIFI_CH_ALL);
    422e:	4a57      	ldr	r2, [pc, #348]	; (438c <vWifiTask+0x260>)
    4230:	4850      	ldr	r0, [pc, #320]	; (4374 <vWifiTask+0x248>)
    4232:	23ff      	movs	r3, #255	; 0xff
    4234:	9300      	str	r3, [sp, #0]
    4236:	0013      	movs	r3, r2
    4238:	2202      	movs	r2, #2
    423a:	2111      	movs	r1, #17
    423c:	4c54      	ldr	r4, [pc, #336]	; (4390 <vWifiTask+0x264>)
    423e:	47a0      	blx	r4

    while (!(is_state_set(WIFI_CONNECTED))) {
    4240:	e006      	b.n	4250 <vWifiTask+0x124>
        /* Handle pending events from network controller. */
        m2m_wifi_handle_events(NULL);
    4242:	2000      	movs	r0, #0
    4244:	4b53      	ldr	r3, [pc, #332]	; (4394 <vWifiTask+0x268>)
    4246:	4798      	blx	r3
        /* Checks the timer timeout. */
        sw_timer_task(&swt_module_inst);
    4248:	4b53      	ldr	r3, [pc, #332]	; (4398 <vWifiTask+0x26c>)
    424a:	0018      	movs	r0, r3
    424c:	4b53      	ldr	r3, [pc, #332]	; (439c <vWifiTask+0x270>)
    424e:	4798      	blx	r3
    while (!(is_state_set(WIFI_CONNECTED))) {
    4250:	2002      	movs	r0, #2
    4252:	4b53      	ldr	r3, [pc, #332]	; (43a0 <vWifiTask+0x274>)
    4254:	4798      	blx	r3
    4256:	0003      	movs	r3, r0
    4258:	001a      	movs	r2, r3
    425a:	2301      	movs	r3, #1
    425c:	4053      	eors	r3, r2
    425e:	b2db      	uxtb	r3, r3
    4260:	2b00      	cmp	r3, #0
    4262:	d1ee      	bne.n	4242 <vWifiTask+0x116>
    }

    vTaskDelay(1000);
    4264:	23fa      	movs	r3, #250	; 0xfa
    4266:	009b      	lsls	r3, r3, #2
    4268:	0018      	movs	r0, r3
    426a:	4b2c      	ldr	r3, [pc, #176]	; (431c <vWifiTask+0x1f0>)
    426c:	4798      	blx	r3

    wifiStateMachine = WIFI_MQTT_HANDLE;
    426e:	4b4d      	ldr	r3, [pc, #308]	; (43a4 <vWifiTask+0x278>)
    4270:	2201      	movs	r2, #1
    4272:	701a      	strb	r2, [r3, #0]
    while (1) {
        switch (wifiStateMachine) {
    4274:	4b4b      	ldr	r3, [pc, #300]	; (43a4 <vWifiTask+0x278>)
    4276:	781b      	ldrb	r3, [r3, #0]
    4278:	b25b      	sxtb	r3, r3
    427a:	2b01      	cmp	r3, #1
    427c:	d00b      	beq.n	4296 <vWifiTask+0x16a>
    427e:	dc02      	bgt.n	4286 <vWifiTask+0x15a>
    4280:	2b00      	cmp	r3, #0
    4282:	d005      	beq.n	4290 <vWifiTask+0x164>
    4284:	e010      	b.n	42a8 <vWifiTask+0x17c>
    4286:	2b02      	cmp	r3, #2
    4288:	d008      	beq.n	429c <vWifiTask+0x170>
    428a:	2b03      	cmp	r3, #3
    428c:	d009      	beq.n	42a2 <vWifiTask+0x176>
    428e:	e00b      	b.n	42a8 <vWifiTask+0x17c>
            case (WIFI_MQTT_INIT): {
                MQTT_InitRoutine();
    4290:	4b45      	ldr	r3, [pc, #276]	; (43a8 <vWifiTask+0x27c>)
    4292:	4798      	blx	r3

                break;
    4294:	e00c      	b.n	42b0 <vWifiTask+0x184>
            }

            case (WIFI_MQTT_HANDLE): {
                MQTT_HandleTransactions();
    4296:	4b45      	ldr	r3, [pc, #276]	; (43ac <vWifiTask+0x280>)
    4298:	4798      	blx	r3
                break;
    429a:	e009      	b.n	42b0 <vWifiTask+0x184>
            }

            case (WIFI_DOWNLOAD_INIT): {
                HTTP_DownloadFileInit();
    429c:	4b44      	ldr	r3, [pc, #272]	; (43b0 <vWifiTask+0x284>)
    429e:	4798      	blx	r3
                break;
    42a0:	e006      	b.n	42b0 <vWifiTask+0x184>
            }

            case (WIFI_DOWNLOAD_HANDLE): {
                HTTP_DownloadFileTransaction();
    42a2:	4b44      	ldr	r3, [pc, #272]	; (43b4 <vWifiTask+0x288>)
    42a4:	4798      	blx	r3
                break;
    42a6:	e003      	b.n	42b0 <vWifiTask+0x184>
            }

            default:
                wifiStateMachine = WIFI_MQTT_INIT;
    42a8:	4b3e      	ldr	r3, [pc, #248]	; (43a4 <vWifiTask+0x278>)
    42aa:	2200      	movs	r2, #0
    42ac:	701a      	strb	r2, [r3, #0]
                break;
    42ae:	46c0      	nop			; (mov r8, r8)
        }
        // Check if a new state was called
        uint8_t DataToReceive = 0;
    42b0:	230b      	movs	r3, #11
    42b2:	18fb      	adds	r3, r7, r3
    42b4:	2200      	movs	r2, #0
    42b6:	701a      	strb	r2, [r3, #0]
        if (pdPASS == xQueueReceive(xQueueWifiState, &DataToReceive, 0)) {
    42b8:	4b1b      	ldr	r3, [pc, #108]	; (4328 <vWifiTask+0x1fc>)
    42ba:	681b      	ldr	r3, [r3, #0]
    42bc:	220b      	movs	r2, #11
    42be:	18b9      	adds	r1, r7, r2
    42c0:	2200      	movs	r2, #0
    42c2:	0018      	movs	r0, r3
    42c4:	4b3c      	ldr	r3, [pc, #240]	; (43b8 <vWifiTask+0x28c>)
    42c6:	4798      	blx	r3
    42c8:	0003      	movs	r3, r0
    42ca:	2b01      	cmp	r3, #1
    42cc:	d105      	bne.n	42da <vWifiTask+0x1ae>
            wifiStateMachine = DataToReceive;  // Update new state
    42ce:	230b      	movs	r3, #11
    42d0:	18fb      	adds	r3, r7, r3
    42d2:	781b      	ldrb	r3, [r3, #0]
    42d4:	b25a      	sxtb	r2, r3
    42d6:	4b33      	ldr	r3, [pc, #204]	; (43a4 <vWifiTask+0x278>)
    42d8:	701a      	strb	r2, [r3, #0]
        }

        // Check if we need to publish something. In this example, we publish the "temperature" when the button was pressed.
        if (isPressed) {
    42da:	4b38      	ldr	r3, [pc, #224]	; (43bc <vWifiTask+0x290>)
    42dc:	781b      	ldrb	r3, [r3, #0]
    42de:	b2db      	uxtb	r3, r3
    42e0:	2b00      	cmp	r3, #0
    42e2:	d017      	beq.n	4314 <vWifiTask+0x1e8>
            mqtt_publish(&mqtt_inst, TEMPERATURE_TOPIC, mqtt_msg_temp, strlen(mqtt_msg_temp), 1, 0);
    42e4:	4b36      	ldr	r3, [pc, #216]	; (43c0 <vWifiTask+0x294>)
    42e6:	0018      	movs	r0, r3
    42e8:	4b36      	ldr	r3, [pc, #216]	; (43c4 <vWifiTask+0x298>)
    42ea:	4798      	blx	r3
    42ec:	0004      	movs	r4, r0
    42ee:	4a34      	ldr	r2, [pc, #208]	; (43c0 <vWifiTask+0x294>)
    42f0:	4935      	ldr	r1, [pc, #212]	; (43c8 <vWifiTask+0x29c>)
    42f2:	4836      	ldr	r0, [pc, #216]	; (43cc <vWifiTask+0x2a0>)
    42f4:	2300      	movs	r3, #0
    42f6:	9301      	str	r3, [sp, #4]
    42f8:	2301      	movs	r3, #1
    42fa:	9300      	str	r3, [sp, #0]
    42fc:	0023      	movs	r3, r4
    42fe:	4c34      	ldr	r4, [pc, #208]	; (43d0 <vWifiTask+0x2a4>)
    4300:	47a0      	blx	r4
            LogMessage(LOG_DEBUG_LVL, "MQTT send %s\r\n", mqtt_msg_temp);
    4302:	4a2f      	ldr	r2, [pc, #188]	; (43c0 <vWifiTask+0x294>)
    4304:	4b33      	ldr	r3, [pc, #204]	; (43d4 <vWifiTask+0x2a8>)
    4306:	0019      	movs	r1, r3
    4308:	2001      	movs	r0, #1
    430a:	4b19      	ldr	r3, [pc, #100]	; (4370 <vWifiTask+0x244>)
    430c:	4798      	blx	r3
            isPressed = false;
    430e:	4b2b      	ldr	r3, [pc, #172]	; (43bc <vWifiTask+0x290>)
    4310:	2200      	movs	r2, #0
    4312:	701a      	strb	r2, [r3, #0]
        }

        vTaskDelay(100);
    4314:	2064      	movs	r0, #100	; 0x64
    4316:	4b01      	ldr	r3, [pc, #4]	; (431c <vWifiTask+0x1f0>)
    4318:	4798      	blx	r3
    while (1) {
    431a:	e7ab      	b.n	4274 <vWifiTask+0x148>
    431c:	00009045 	.word	0x00009045
    4320:	00002cad 	.word	0x00002cad
    4324:	00007339 	.word	0x00007339
    4328:	2000048c 	.word	0x2000048c
    432c:	20000494 	.word	0x20000494
    4330:	20000490 	.word	0x20000490
    4334:	20000498 	.word	0x20000498
    4338:	00023794 	.word	0x00023794
    433c:	0000ac99 	.word	0x0000ac99
    4340:	000237bc 	.word	0x000237bc
    4344:	000036ed 	.word	0x000036ed
    4348:	00003729 	.word	0x00003729
    434c:	00003b95 	.word	0x00003b95
    4350:	00003609 	.word	0x00003609
    4354:	00003c4d 	.word	0x00003c4d
    4358:	00003c8d 	.word	0x00003c8d
    435c:	0002181b 	.word	0x0002181b
    4360:	0000d1a9 	.word	0x0000d1a9
    4364:	000034b5 	.word	0x000034b5
    4368:	0000ec81 	.word	0x0000ec81
    436c:	000237d8 	.word	0x000237d8
    4370:	0000ad85 	.word	0x0000ad85
    4374:	0002329c 	.word	0x0002329c
    4378:	00023804 	.word	0x00023804
    437c:	000123e1 	.word	0x000123e1
    4380:	000037e1 	.word	0x000037e1
    4384:	000037ad 	.word	0x000037ad
    4388:	00012479 	.word	0x00012479
    438c:	0002328c 	.word	0x0002328c
    4390:	0000ee91 	.word	0x0000ee91
    4394:	0000ee75 	.word	0x0000ee75
    4398:	20004290 	.word	0x20004290
    439c:	0001f569 	.word	0x0001f569
    43a0:	00002d1d 	.word	0x00002d1d
    43a4:	20000488 	.word	0x20000488
    43a8:	00003e8d 	.word	0x00003e8d
    43ac:	00003f29 	.word	0x00003f29
    43b0:	00003d05 	.word	0x00003d05
    43b4:	00003d99 	.word	0x00003d99
    43b8:	00007e99 	.word	0x00007e99
    43bc:	20000b34 	.word	0x20000b34
    43c0:	20000060 	.word	0x20000060
    43c4:	00021bd3 	.word	0x00021bd3
    43c8:	00023828 	.word	0x00023828
    43cc:	200006fc 	.word	0x200006fc
    43d0:	0001c889 	.word	0x0001c889
    43d4:	00023844 	.word	0x00023844

000043d8 <WifiHandlerSetState>:
    }
    return;
}

void WifiHandlerSetState(uint8_t state)
{
    43d8:	b590      	push	{r4, r7, lr}
    43da:	b083      	sub	sp, #12
    43dc:	af00      	add	r7, sp, #0
    43de:	0002      	movs	r2, r0
    43e0:	1dfb      	adds	r3, r7, #7
    43e2:	701a      	strb	r2, [r3, #0]
    if (state <= WIFI_DOWNLOAD_HANDLE) {
    43e4:	1dfb      	adds	r3, r7, #7
    43e6:	781b      	ldrb	r3, [r3, #0]
    43e8:	2b03      	cmp	r3, #3
    43ea:	d806      	bhi.n	43fa <WifiHandlerSetState+0x22>
        xQueueSend(xQueueWifiState, &state, (TickType_t)10);
    43ec:	4b05      	ldr	r3, [pc, #20]	; (4404 <WifiHandlerSetState+0x2c>)
    43ee:	6818      	ldr	r0, [r3, #0]
    43f0:	1df9      	adds	r1, r7, #7
    43f2:	2300      	movs	r3, #0
    43f4:	220a      	movs	r2, #10
    43f6:	4c04      	ldr	r4, [pc, #16]	; (4408 <WifiHandlerSetState+0x30>)
    43f8:	47a0      	blx	r4
    }
}
    43fa:	46c0      	nop			; (mov r8, r8)
    43fc:	46bd      	mov	sp, r7
    43fe:	b003      	add	sp, #12
    4400:	bd90      	pop	{r4, r7, pc}
    4402:	46c0      	nop			; (mov r8, r8)
    4404:	2000048c 	.word	0x2000048c
    4408:	000075e1 	.word	0x000075e1

0000440c <system_gclk_chan_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void system_gclk_chan_get_config_defaults(
		struct system_gclk_chan_config *const config)
{
    440c:	b580      	push	{r7, lr}
    440e:	b082      	sub	sp, #8
    4410:	af00      	add	r7, sp, #0
    4412:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->source_generator = GCLK_GENERATOR_0;
    4414:	687b      	ldr	r3, [r7, #4]
    4416:	2200      	movs	r2, #0
    4418:	701a      	strb	r2, [r3, #0]
}
    441a:	46c0      	nop			; (mov r8, r8)
    441c:	46bd      	mov	sp, r7
    441e:	b002      	add	sp, #8
    4420:	bd80      	pop	{r7, pc}
	...

00004424 <system_apb_clock_set_mask>:
{
    4424:	b580      	push	{r7, lr}
    4426:	b082      	sub	sp, #8
    4428:	af00      	add	r7, sp, #0
    442a:	0002      	movs	r2, r0
    442c:	6039      	str	r1, [r7, #0]
    442e:	1dfb      	adds	r3, r7, #7
    4430:	701a      	strb	r2, [r3, #0]
	switch (bus) {
    4432:	1dfb      	adds	r3, r7, #7
    4434:	781b      	ldrb	r3, [r3, #0]
    4436:	2b01      	cmp	r3, #1
    4438:	d00a      	beq.n	4450 <system_apb_clock_set_mask+0x2c>
    443a:	2b02      	cmp	r3, #2
    443c:	d00f      	beq.n	445e <system_apb_clock_set_mask+0x3a>
    443e:	2b00      	cmp	r3, #0
    4440:	d114      	bne.n	446c <system_apb_clock_set_mask+0x48>
			PM->APBAMASK.reg |= mask;
    4442:	4b0e      	ldr	r3, [pc, #56]	; (447c <system_apb_clock_set_mask+0x58>)
    4444:	4a0d      	ldr	r2, [pc, #52]	; (447c <system_apb_clock_set_mask+0x58>)
    4446:	6991      	ldr	r1, [r2, #24]
    4448:	683a      	ldr	r2, [r7, #0]
    444a:	430a      	orrs	r2, r1
    444c:	619a      	str	r2, [r3, #24]
			break;
    444e:	e00f      	b.n	4470 <system_apb_clock_set_mask+0x4c>
			PM->APBBMASK.reg |= mask;
    4450:	4b0a      	ldr	r3, [pc, #40]	; (447c <system_apb_clock_set_mask+0x58>)
    4452:	4a0a      	ldr	r2, [pc, #40]	; (447c <system_apb_clock_set_mask+0x58>)
    4454:	69d1      	ldr	r1, [r2, #28]
    4456:	683a      	ldr	r2, [r7, #0]
    4458:	430a      	orrs	r2, r1
    445a:	61da      	str	r2, [r3, #28]
			break;
    445c:	e008      	b.n	4470 <system_apb_clock_set_mask+0x4c>
			PM->APBCMASK.reg |= mask;
    445e:	4b07      	ldr	r3, [pc, #28]	; (447c <system_apb_clock_set_mask+0x58>)
    4460:	4a06      	ldr	r2, [pc, #24]	; (447c <system_apb_clock_set_mask+0x58>)
    4462:	6a11      	ldr	r1, [r2, #32]
    4464:	683a      	ldr	r2, [r7, #0]
    4466:	430a      	orrs	r2, r1
    4468:	621a      	str	r2, [r3, #32]
			break;
    446a:	e001      	b.n	4470 <system_apb_clock_set_mask+0x4c>
			return STATUS_ERR_INVALID_ARG;
    446c:	2317      	movs	r3, #23
    446e:	e000      	b.n	4472 <system_apb_clock_set_mask+0x4e>
	return STATUS_OK;
    4470:	2300      	movs	r3, #0
}
    4472:	0018      	movs	r0, r3
    4474:	46bd      	mov	sp, r7
    4476:	b002      	add	sp, #8
    4478:	bd80      	pop	{r7, pc}
    447a:	46c0      	nop			; (mov r8, r8)
    447c:	40000400 	.word	0x40000400

00004480 <system_pinmux_get_config_defaults>:
{
    4480:	b580      	push	{r7, lr}
    4482:	b082      	sub	sp, #8
    4484:	af00      	add	r7, sp, #0
    4486:	6078      	str	r0, [r7, #4]
	config->mux_position = SYSTEM_PINMUX_GPIO;
    4488:	687b      	ldr	r3, [r7, #4]
    448a:	2280      	movs	r2, #128	; 0x80
    448c:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    448e:	687b      	ldr	r3, [r7, #4]
    4490:	2200      	movs	r2, #0
    4492:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    4494:	687b      	ldr	r3, [r7, #4]
    4496:	2201      	movs	r2, #1
    4498:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
    449a:	687b      	ldr	r3, [r7, #4]
    449c:	2200      	movs	r2, #0
    449e:	70da      	strb	r2, [r3, #3]
}
    44a0:	46c0      	nop			; (mov r8, r8)
    44a2:	46bd      	mov	sp, r7
    44a4:	b002      	add	sp, #8
    44a6:	bd80      	pop	{r7, pc}

000044a8 <system_is_debugger_present>:
 * \retval true  Debugger is connected to the system
 * \retval false Debugger is not connected to the system
 *
 */
static inline bool system_is_debugger_present(void)
{
    44a8:	b580      	push	{r7, lr}
    44aa:	af00      	add	r7, sp, #0
	return DSU->STATUSB.reg & DSU_STATUSB_DBGPRES;
    44ac:	4b05      	ldr	r3, [pc, #20]	; (44c4 <system_is_debugger_present+0x1c>)
    44ae:	789b      	ldrb	r3, [r3, #2]
    44b0:	b2db      	uxtb	r3, r3
    44b2:	001a      	movs	r2, r3
    44b4:	2302      	movs	r3, #2
    44b6:	4013      	ands	r3, r2
    44b8:	1e5a      	subs	r2, r3, #1
    44ba:	4193      	sbcs	r3, r2
    44bc:	b2db      	uxtb	r3, r3
}
    44be:	0018      	movs	r0, r3
    44c0:	46bd      	mov	sp, r7
    44c2:	bd80      	pop	{r7, pc}
    44c4:	41002000 	.word	0x41002000

000044c8 <system_interrupt_enter_critical_section>:
{
    44c8:	b580      	push	{r7, lr}
    44ca:	af00      	add	r7, sp, #0
	cpu_irq_enter_critical();
    44cc:	4b02      	ldr	r3, [pc, #8]	; (44d8 <system_interrupt_enter_critical_section+0x10>)
    44ce:	4798      	blx	r3
}
    44d0:	46c0      	nop			; (mov r8, r8)
    44d2:	46bd      	mov	sp, r7
    44d4:	bd80      	pop	{r7, pc}
    44d6:	46c0      	nop			; (mov r8, r8)
    44d8:	000130d9 	.word	0x000130d9

000044dc <system_interrupt_leave_critical_section>:
{
    44dc:	b580      	push	{r7, lr}
    44de:	af00      	add	r7, sp, #0
	cpu_irq_leave_critical();
    44e0:	4b02      	ldr	r3, [pc, #8]	; (44ec <system_interrupt_leave_critical_section+0x10>)
    44e2:	4798      	blx	r3
}
    44e4:	46c0      	nop			; (mov r8, r8)
    44e6:	46bd      	mov	sp, r7
    44e8:	bd80      	pop	{r7, pc}
    44ea:	46c0      	nop			; (mov r8, r8)
    44ec:	0001312d 	.word	0x0001312d

000044f0 <system_interrupt_disable>:
{
    44f0:	b580      	push	{r7, lr}
    44f2:	b082      	sub	sp, #8
    44f4:	af00      	add	r7, sp, #0
    44f6:	0002      	movs	r2, r0
    44f8:	1dfb      	adds	r3, r7, #7
    44fa:	701a      	strb	r2, [r3, #0]
	NVIC->ICER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    44fc:	4a07      	ldr	r2, [pc, #28]	; (451c <system_interrupt_disable+0x2c>)
    44fe:	1dfb      	adds	r3, r7, #7
    4500:	781b      	ldrb	r3, [r3, #0]
    4502:	0019      	movs	r1, r3
    4504:	231f      	movs	r3, #31
    4506:	400b      	ands	r3, r1
    4508:	2101      	movs	r1, #1
    450a:	4099      	lsls	r1, r3
    450c:	000b      	movs	r3, r1
    450e:	0019      	movs	r1, r3
    4510:	2380      	movs	r3, #128	; 0x80
    4512:	50d1      	str	r1, [r2, r3]
}
    4514:	46c0      	nop			; (mov r8, r8)
    4516:	46bd      	mov	sp, r7
    4518:	b002      	add	sp, #8
    451a:	bd80      	pop	{r7, pc}
    451c:	e000e100 	.word	0xe000e100

00004520 <i2c_master_is_syncing>:
{
    4520:	b580      	push	{r7, lr}
    4522:	b084      	sub	sp, #16
    4524:	af00      	add	r7, sp, #0
    4526:	6078      	str	r0, [r7, #4]
	SercomI2cm *const i2c_hw = &(module->hw->I2CM);
    4528:	687b      	ldr	r3, [r7, #4]
    452a:	681b      	ldr	r3, [r3, #0]
    452c:	60fb      	str	r3, [r7, #12]
	return (i2c_hw->SYNCBUSY.reg & SERCOM_I2CM_SYNCBUSY_MASK);
    452e:	68fb      	ldr	r3, [r7, #12]
    4530:	69db      	ldr	r3, [r3, #28]
    4532:	2207      	movs	r2, #7
    4534:	4013      	ands	r3, r2
    4536:	1e5a      	subs	r2, r3, #1
    4538:	4193      	sbcs	r3, r2
    453a:	b2db      	uxtb	r3, r3
}
    453c:	0018      	movs	r0, r3
    453e:	46bd      	mov	sp, r7
    4540:	b004      	add	sp, #16
    4542:	bd80      	pop	{r7, pc}

00004544 <_i2c_master_wait_for_sync>:
{
    4544:	b580      	push	{r7, lr}
    4546:	b082      	sub	sp, #8
    4548:	af00      	add	r7, sp, #0
    454a:	6078      	str	r0, [r7, #4]
	while (i2c_master_is_syncing(module)) {
    454c:	46c0      	nop			; (mov r8, r8)
    454e:	687b      	ldr	r3, [r7, #4]
    4550:	0018      	movs	r0, r3
    4552:	4b04      	ldr	r3, [pc, #16]	; (4564 <_i2c_master_wait_for_sync+0x20>)
    4554:	4798      	blx	r3
    4556:	1e03      	subs	r3, r0, #0
    4558:	d1f9      	bne.n	454e <_i2c_master_wait_for_sync+0xa>
}
    455a:	46c0      	nop			; (mov r8, r8)
    455c:	46bd      	mov	sp, r7
    455e:	b002      	add	sp, #8
    4560:	bd80      	pop	{r7, pc}
    4562:	46c0      	nop			; (mov r8, r8)
    4564:	00004521 	.word	0x00004521

00004568 <i2c_master_disable>:
 *
 * \param[in]  module  Pointer to the software module struct
 */
static inline void i2c_master_disable(
		const struct i2c_master_module *const module)
{
    4568:	b580      	push	{r7, lr}
    456a:	b084      	sub	sp, #16
    456c:	af00      	add	r7, sp, #0
    456e:	6078      	str	r0, [r7, #4]
	/* Sanity check of arguments */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    4570:	687b      	ldr	r3, [r7, #4]
    4572:	681b      	ldr	r3, [r3, #0]
    4574:	60fb      	str	r3, [r7, #12]

#if I2C_MASTER_CALLBACK_MODE == true
		/* Disable module interrupts */
		system_interrupt_disable(_sercom_get_interrupt_vector(module->hw));
    4576:	687b      	ldr	r3, [r7, #4]
    4578:	681b      	ldr	r3, [r3, #0]
    457a:	0018      	movs	r0, r3
    457c:	4b0d      	ldr	r3, [pc, #52]	; (45b4 <i2c_master_disable+0x4c>)
    457e:	4798      	blx	r3
    4580:	0003      	movs	r3, r0
    4582:	0018      	movs	r0, r3
    4584:	4b0c      	ldr	r3, [pc, #48]	; (45b8 <i2c_master_disable+0x50>)
    4586:	4798      	blx	r3
#endif

	/* Wait for module to sync */
	_i2c_master_wait_for_sync(module);
    4588:	687b      	ldr	r3, [r7, #4]
    458a:	0018      	movs	r0, r3
    458c:	4b0b      	ldr	r3, [pc, #44]	; (45bc <i2c_master_disable+0x54>)
    458e:	4798      	blx	r3

	/* Disbale interrupt */
	i2c_module->INTENCLR.reg = SERCOM_I2CM_INTENCLR_MASK;
    4590:	68fb      	ldr	r3, [r7, #12]
    4592:	2283      	movs	r2, #131	; 0x83
    4594:	751a      	strb	r2, [r3, #20]
	/* Clear interrupt flag */
	i2c_module->INTFLAG.reg = SERCOM_I2CM_INTFLAG_MASK;
    4596:	68fb      	ldr	r3, [r7, #12]
    4598:	2283      	movs	r2, #131	; 0x83
    459a:	761a      	strb	r2, [r3, #24]

	/* Disable module */
	i2c_module->CTRLA.reg &= ~SERCOM_I2CM_CTRLA_ENABLE;
    459c:	68fb      	ldr	r3, [r7, #12]
    459e:	681b      	ldr	r3, [r3, #0]
    45a0:	2202      	movs	r2, #2
    45a2:	4393      	bics	r3, r2
    45a4:	001a      	movs	r2, r3
    45a6:	68fb      	ldr	r3, [r7, #12]
    45a8:	601a      	str	r2, [r3, #0]

}
    45aa:	46c0      	nop			; (mov r8, r8)
    45ac:	46bd      	mov	sp, r7
    45ae:	b004      	add	sp, #16
    45b0:	bd80      	pop	{r7, pc}
    45b2:	46c0      	nop			; (mov r8, r8)
    45b4:	000145ad 	.word	0x000145ad
    45b8:	000044f1 	.word	0x000044f1
    45bc:	00004545 	.word	0x00004545

000045c0 <_i2c_master_set_config>:
 *                                          with set GCLK frequency
 */
static enum status_code _i2c_master_set_config(
		struct i2c_master_module *const module,
		const struct i2c_master_config *const config)
{
    45c0:	b5f0      	push	{r4, r5, r6, r7, lr}
    45c2:	b097      	sub	sp, #92	; 0x5c
    45c4:	af00      	add	r7, sp, #0
    45c6:	6178      	str	r0, [r7, #20]
    45c8:	6139      	str	r1, [r7, #16]
	Assert(module->hw);
	Assert(config);

	/* Temporary variables. */
	uint32_t tmp_ctrla;
	int32_t tmp_baud = 0;
    45ca:	2300      	movs	r3, #0
    45cc:	63fb      	str	r3, [r7, #60]	; 0x3c
	int32_t tmp_baud_hs = 0;
    45ce:	2300      	movs	r3, #0
    45d0:	653b      	str	r3, [r7, #80]	; 0x50
	int32_t tmp_baudlow_hs = 0;
    45d2:	2300      	movs	r3, #0
    45d4:	64fb      	str	r3, [r7, #76]	; 0x4c
	enum status_code tmp_status_code = STATUS_OK;
    45d6:	233b      	movs	r3, #59	; 0x3b
    45d8:	2210      	movs	r2, #16
    45da:	4694      	mov	ip, r2
    45dc:	44bc      	add	ip, r7
    45de:	4463      	add	r3, ip
    45e0:	2200      	movs	r2, #0
    45e2:	701a      	strb	r2, [r3, #0]

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    45e4:	697b      	ldr	r3, [r7, #20]
    45e6:	681b      	ldr	r3, [r3, #0]
    45e8:	63bb      	str	r3, [r7, #56]	; 0x38
	Sercom *const sercom_hw = module->hw;
    45ea:	697b      	ldr	r3, [r7, #20]
    45ec:	681b      	ldr	r3, [r3, #0]
    45ee:	637b      	str	r3, [r7, #52]	; 0x34

	uint8_t sercom_index = _sercom_get_sercom_inst_index(sercom_hw);
    45f0:	2323      	movs	r3, #35	; 0x23
    45f2:	2210      	movs	r2, #16
    45f4:	18ba      	adds	r2, r7, r2
    45f6:	18d4      	adds	r4, r2, r3
    45f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    45fa:	0018      	movs	r0, r3
    45fc:	4bc0      	ldr	r3, [pc, #768]	; (4900 <_i2c_master_set_config+0x340>)
    45fe:	4798      	blx	r3
    4600:	0003      	movs	r3, r0
    4602:	7023      	strb	r3, [r4, #0]

	/* Pin configuration */
	struct system_pinmux_config pin_conf;
	system_pinmux_get_config_defaults(&pin_conf);
    4604:	230c      	movs	r3, #12
    4606:	2210      	movs	r2, #16
    4608:	4694      	mov	ip, r2
    460a:	44bc      	add	ip, r7
    460c:	4463      	add	r3, ip
    460e:	0018      	movs	r0, r3
    4610:	4bbc      	ldr	r3, [pc, #752]	; (4904 <_i2c_master_set_config+0x344>)
    4612:	4798      	blx	r3

	uint32_t pad0 = config->pinmux_pad0;
    4614:	693b      	ldr	r3, [r7, #16]
    4616:	69db      	ldr	r3, [r3, #28]
    4618:	647b      	str	r3, [r7, #68]	; 0x44
	uint32_t pad1 = config->pinmux_pad1;
    461a:	693b      	ldr	r3, [r7, #16]
    461c:	6a1b      	ldr	r3, [r3, #32]
    461e:	643b      	str	r3, [r7, #64]	; 0x40

	/* SERCOM PAD0 - SDA */
	if (pad0 == PINMUX_DEFAULT) {
    4620:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    4622:	2b00      	cmp	r3, #0
    4624:	d106      	bne.n	4634 <_i2c_master_set_config+0x74>
		pad0 = _sercom_get_default_pad(sercom_hw, 0);
    4626:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    4628:	2100      	movs	r1, #0
    462a:	0018      	movs	r0, r3
    462c:	4bb6      	ldr	r3, [pc, #728]	; (4908 <_i2c_master_set_config+0x348>)
    462e:	4798      	blx	r3
    4630:	0003      	movs	r3, r0
    4632:	647b      	str	r3, [r7, #68]	; 0x44
	}
	pin_conf.mux_position = pad0 & 0xFFFF;
    4634:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    4636:	b2da      	uxtb	r2, r3
    4638:	230c      	movs	r3, #12
    463a:	2110      	movs	r1, #16
    463c:	468c      	mov	ip, r1
    463e:	44bc      	add	ip, r7
    4640:	4463      	add	r3, ip
    4642:	701a      	strb	r2, [r3, #0]
	pin_conf.direction    = SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK;
    4644:	230c      	movs	r3, #12
    4646:	2210      	movs	r2, #16
    4648:	4694      	mov	ip, r2
    464a:	44bc      	add	ip, r7
    464c:	4463      	add	r3, ip
    464e:	2202      	movs	r2, #2
    4650:	705a      	strb	r2, [r3, #1]
	system_pinmux_pin_set_config(pad0 >> 16, &pin_conf);
    4652:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    4654:	0c1b      	lsrs	r3, r3, #16
    4656:	b2db      	uxtb	r3, r3
    4658:	220c      	movs	r2, #12
    465a:	2110      	movs	r1, #16
    465c:	468c      	mov	ip, r1
    465e:	44bc      	add	ip, r7
    4660:	4462      	add	r2, ip
    4662:	0011      	movs	r1, r2
    4664:	0018      	movs	r0, r3
    4666:	4ba9      	ldr	r3, [pc, #676]	; (490c <_i2c_master_set_config+0x34c>)
    4668:	4798      	blx	r3

	/* SERCOM PAD1 - SCL */
	if (pad1 == PINMUX_DEFAULT) {
    466a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    466c:	2b00      	cmp	r3, #0
    466e:	d106      	bne.n	467e <_i2c_master_set_config+0xbe>
		pad1 = _sercom_get_default_pad(sercom_hw, 1);
    4670:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    4672:	2101      	movs	r1, #1
    4674:	0018      	movs	r0, r3
    4676:	4ba4      	ldr	r3, [pc, #656]	; (4908 <_i2c_master_set_config+0x348>)
    4678:	4798      	blx	r3
    467a:	0003      	movs	r3, r0
    467c:	643b      	str	r3, [r7, #64]	; 0x40
	}
	pin_conf.mux_position = pad1 & 0xFFFF;
    467e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    4680:	b2da      	uxtb	r2, r3
    4682:	230c      	movs	r3, #12
    4684:	2110      	movs	r1, #16
    4686:	468c      	mov	ip, r1
    4688:	44bc      	add	ip, r7
    468a:	4463      	add	r3, ip
    468c:	701a      	strb	r2, [r3, #0]
	pin_conf.direction    = SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK;
    468e:	230c      	movs	r3, #12
    4690:	2210      	movs	r2, #16
    4692:	4694      	mov	ip, r2
    4694:	44bc      	add	ip, r7
    4696:	4463      	add	r3, ip
    4698:	2202      	movs	r2, #2
    469a:	705a      	strb	r2, [r3, #1]
	system_pinmux_pin_set_config(pad1 >> 16, &pin_conf);
    469c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    469e:	0c1b      	lsrs	r3, r3, #16
    46a0:	b2db      	uxtb	r3, r3
    46a2:	220c      	movs	r2, #12
    46a4:	2110      	movs	r1, #16
    46a6:	468c      	mov	ip, r1
    46a8:	44bc      	add	ip, r7
    46aa:	4462      	add	r2, ip
    46ac:	0011      	movs	r1, r2
    46ae:	0018      	movs	r0, r3
    46b0:	4b96      	ldr	r3, [pc, #600]	; (490c <_i2c_master_set_config+0x34c>)
    46b2:	4798      	blx	r3

	/* Save timeout on unknown bus state in software module. */
	module->unknown_bus_state_timeout = config->unknown_bus_state_timeout;
    46b4:	693b      	ldr	r3, [r7, #16]
    46b6:	8a9a      	ldrh	r2, [r3, #20]
    46b8:	697b      	ldr	r3, [r7, #20]
    46ba:	80da      	strh	r2, [r3, #6]

	/* Save timeout on buffer write. */
	module->buffer_timeout = config->buffer_timeout;
    46bc:	693b      	ldr	r3, [r7, #16]
    46be:	8ada      	ldrh	r2, [r3, #22]
    46c0:	697b      	ldr	r3, [r7, #20]
    46c2:	811a      	strh	r2, [r3, #8]

	/* Set whether module should run in standby. */
	if (config->run_in_standby || system_is_debugger_present()) {
    46c4:	693b      	ldr	r3, [r7, #16]
    46c6:	7e1b      	ldrb	r3, [r3, #24]
    46c8:	2b00      	cmp	r3, #0
    46ca:	d103      	bne.n	46d4 <_i2c_master_set_config+0x114>
    46cc:	4b90      	ldr	r3, [pc, #576]	; (4910 <_i2c_master_set_config+0x350>)
    46ce:	4798      	blx	r3
    46d0:	1e03      	subs	r3, r0, #0
    46d2:	d002      	beq.n	46da <_i2c_master_set_config+0x11a>
		tmp_ctrla = SERCOM_I2CM_CTRLA_RUNSTDBY;
    46d4:	2380      	movs	r3, #128	; 0x80
    46d6:	657b      	str	r3, [r7, #84]	; 0x54
    46d8:	e001      	b.n	46de <_i2c_master_set_config+0x11e>
	} else {
		tmp_ctrla = 0;
    46da:	2300      	movs	r3, #0
    46dc:	657b      	str	r3, [r7, #84]	; 0x54
	}

	/* Check and set start data hold timeout. */
	if (config->start_hold_time != I2C_MASTER_START_HOLD_TIME_DISABLED) {
    46de:	693b      	ldr	r3, [r7, #16]
    46e0:	691b      	ldr	r3, [r3, #16]
    46e2:	2b00      	cmp	r3, #0
    46e4:	d004      	beq.n	46f0 <_i2c_master_set_config+0x130>
		tmp_ctrla |= config->start_hold_time;
    46e6:	693b      	ldr	r3, [r7, #16]
    46e8:	691b      	ldr	r3, [r3, #16]
    46ea:	6d7a      	ldr	r2, [r7, #84]	; 0x54
    46ec:	4313      	orrs	r3, r2
    46ee:	657b      	str	r3, [r7, #84]	; 0x54
	}

	/* Check and set transfer speed */
	tmp_ctrla |= config->transfer_speed;
    46f0:	693b      	ldr	r3, [r7, #16]
    46f2:	689b      	ldr	r3, [r3, #8]
    46f4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
    46f6:	4313      	orrs	r3, r2
    46f8:	657b      	str	r3, [r7, #84]	; 0x54

	/* Check and set SCL low timeout. */
	if (config->scl_low_timeout) {
    46fa:	693b      	ldr	r3, [r7, #16]
    46fc:	2224      	movs	r2, #36	; 0x24
    46fe:	5c9b      	ldrb	r3, [r3, r2]
    4700:	2b00      	cmp	r3, #0
    4702:	d004      	beq.n	470e <_i2c_master_set_config+0x14e>
		tmp_ctrla |= SERCOM_I2CM_CTRLA_LOWTOUTEN;
    4704:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    4706:	2280      	movs	r2, #128	; 0x80
    4708:	05d2      	lsls	r2, r2, #23
    470a:	4313      	orrs	r3, r2
    470c:	657b      	str	r3, [r7, #84]	; 0x54
	}

	/* Check and set inactive bus timeout. */
	if (config->inactive_timeout != I2C_MASTER_INACTIVE_TIMEOUT_DISABLED) {
    470e:	693b      	ldr	r3, [r7, #16]
    4710:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    4712:	2b00      	cmp	r3, #0
    4714:	d004      	beq.n	4720 <_i2c_master_set_config+0x160>
		tmp_ctrla |= config->inactive_timeout;
    4716:	693b      	ldr	r3, [r7, #16]
    4718:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    471a:	6d7a      	ldr	r2, [r7, #84]	; 0x54
    471c:	4313      	orrs	r3, r2
    471e:	657b      	str	r3, [r7, #84]	; 0x54
	}

	/* Check and set SCL clock stretch mode. */
	if (config->scl_stretch_only_after_ack_bit || (config->transfer_speed == I2C_MASTER_SPEED_HIGH_SPEED)) {
    4720:	693b      	ldr	r3, [r7, #16]
    4722:	222c      	movs	r2, #44	; 0x2c
    4724:	5c9b      	ldrb	r3, [r3, r2]
    4726:	2b00      	cmp	r3, #0
    4728:	d105      	bne.n	4736 <_i2c_master_set_config+0x176>
    472a:	693b      	ldr	r3, [r7, #16]
    472c:	689a      	ldr	r2, [r3, #8]
    472e:	2380      	movs	r3, #128	; 0x80
    4730:	049b      	lsls	r3, r3, #18
    4732:	429a      	cmp	r2, r3
    4734:	d104      	bne.n	4740 <_i2c_master_set_config+0x180>
		tmp_ctrla |= SERCOM_I2CM_CTRLA_SCLSM;
    4736:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    4738:	2280      	movs	r2, #128	; 0x80
    473a:	0512      	lsls	r2, r2, #20
    473c:	4313      	orrs	r3, r2
    473e:	657b      	str	r3, [r7, #84]	; 0x54
	}

	/* Check and set slave SCL low extend timeout. */
	if (config->slave_scl_low_extend_timeout) {
    4740:	693b      	ldr	r3, [r7, #16]
    4742:	222d      	movs	r2, #45	; 0x2d
    4744:	5c9b      	ldrb	r3, [r3, r2]
    4746:	2b00      	cmp	r3, #0
    4748:	d004      	beq.n	4754 <_i2c_master_set_config+0x194>
		tmp_ctrla |= SERCOM_I2CM_CTRLA_SEXTTOEN;
    474a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    474c:	2280      	movs	r2, #128	; 0x80
    474e:	0412      	lsls	r2, r2, #16
    4750:	4313      	orrs	r3, r2
    4752:	657b      	str	r3, [r7, #84]	; 0x54
	}

	/* Check and set master SCL low extend timeout. */
	if (config->master_scl_low_extend_timeout) {
    4754:	693b      	ldr	r3, [r7, #16]
    4756:	222e      	movs	r2, #46	; 0x2e
    4758:	5c9b      	ldrb	r3, [r3, r2]
    475a:	2b00      	cmp	r3, #0
    475c:	d004      	beq.n	4768 <_i2c_master_set_config+0x1a8>
		tmp_ctrla |= SERCOM_I2CM_CTRLA_MEXTTOEN;
    475e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    4760:	2280      	movs	r2, #128	; 0x80
    4762:	03d2      	lsls	r2, r2, #15
    4764:	4313      	orrs	r3, r2
    4766:	657b      	str	r3, [r7, #84]	; 0x54
	}

	/* Write config to register CTRLA. */
	i2c_module->CTRLA.reg |= tmp_ctrla;
    4768:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    476a:	681a      	ldr	r2, [r3, #0]
    476c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    476e:	431a      	orrs	r2, r3
    4770:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    4772:	601a      	str	r2, [r3, #0]

	/* Set configurations in CTRLB. */
	i2c_module->CTRLB.reg = SERCOM_I2CM_CTRLB_SMEN;
    4774:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    4776:	2280      	movs	r2, #128	; 0x80
    4778:	0052      	lsls	r2, r2, #1
    477a:	605a      	str	r2, [r3, #4]

	/* Find and set baudrate, considering sda/scl rise time */
	uint32_t fgclk       = system_gclk_chan_get_hz(SERCOM0_GCLK_ID_CORE + sercom_index);
    477c:	2323      	movs	r3, #35	; 0x23
    477e:	2210      	movs	r2, #16
    4780:	4694      	mov	ip, r2
    4782:	44bc      	add	ip, r7
    4784:	4463      	add	r3, ip
    4786:	781b      	ldrb	r3, [r3, #0]
    4788:	3314      	adds	r3, #20
    478a:	b2db      	uxtb	r3, r3
    478c:	0018      	movs	r0, r3
    478e:	4b61      	ldr	r3, [pc, #388]	; (4914 <_i2c_master_set_config+0x354>)
    4790:	4798      	blx	r3
    4792:	0003      	movs	r3, r0
    4794:	62fb      	str	r3, [r7, #44]	; 0x2c
	uint32_t fscl        = 1000 * config->baud_rate;
    4796:	693b      	ldr	r3, [r7, #16]
    4798:	681b      	ldr	r3, [r3, #0]
    479a:	22fa      	movs	r2, #250	; 0xfa
    479c:	0092      	lsls	r2, r2, #2
    479e:	4353      	muls	r3, r2
    47a0:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t fscl_hs     = 1000 * config->baud_rate_high_speed;
    47a2:	693b      	ldr	r3, [r7, #16]
    47a4:	685b      	ldr	r3, [r3, #4]
    47a6:	22fa      	movs	r2, #250	; 0xfa
    47a8:	0092      	lsls	r2, r2, #2
    47aa:	4353      	muls	r3, r2
    47ac:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t trise       = config->sda_scl_rise_time_ns;
    47ae:	693b      	ldr	r3, [r7, #16]
    47b0:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
    47b2:	623b      	str	r3, [r7, #32]
	
	tmp_baud = (int32_t)(div_ceil(
    47b4:	4b58      	ldr	r3, [pc, #352]	; (4918 <_i2c_master_set_config+0x358>)
    47b6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
    47b8:	4798      	blx	r3
    47ba:	0005      	movs	r5, r0
    47bc:	000e      	movs	r6, r1
    47be:	4b56      	ldr	r3, [pc, #344]	; (4918 <_i2c_master_set_config+0x358>)
    47c0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
    47c2:	4798      	blx	r3
    47c4:	60b8      	str	r0, [r7, #8]
    47c6:	60f9      	str	r1, [r7, #12]
    47c8:	4b53      	ldr	r3, [pc, #332]	; (4918 <_i2c_master_set_config+0x358>)
    47ca:	6af8      	ldr	r0, [r7, #44]	; 0x2c
    47cc:	4798      	blx	r3
    47ce:	4c53      	ldr	r4, [pc, #332]	; (491c <_i2c_master_set_config+0x35c>)
    47d0:	4a53      	ldr	r2, [pc, #332]	; (4920 <_i2c_master_set_config+0x360>)
    47d2:	4b54      	ldr	r3, [pc, #336]	; (4924 <_i2c_master_set_config+0x364>)
    47d4:	47a0      	blx	r4
    47d6:	0003      	movs	r3, r0
    47d8:	000c      	movs	r4, r1
    47da:	603b      	str	r3, [r7, #0]
    47dc:	607c      	str	r4, [r7, #4]
    47de:	4b4e      	ldr	r3, [pc, #312]	; (4918 <_i2c_master_set_config+0x358>)
    47e0:	6a38      	ldr	r0, [r7, #32]
    47e2:	4798      	blx	r3
    47e4:	0002      	movs	r2, r0
    47e6:	000b      	movs	r3, r1
    47e8:	4c4c      	ldr	r4, [pc, #304]	; (491c <_i2c_master_set_config+0x35c>)
    47ea:	6838      	ldr	r0, [r7, #0]
    47ec:	6879      	ldr	r1, [r7, #4]
    47ee:	47a0      	blx	r4
    47f0:	0003      	movs	r3, r0
    47f2:	000c      	movs	r4, r1
    47f4:	0018      	movs	r0, r3
    47f6:	0021      	movs	r1, r4
    47f8:	4c4b      	ldr	r4, [pc, #300]	; (4928 <_i2c_master_set_config+0x368>)
    47fa:	2200      	movs	r2, #0
    47fc:	4b4b      	ldr	r3, [pc, #300]	; (492c <_i2c_master_set_config+0x36c>)
    47fe:	47a0      	blx	r4
    4800:	0003      	movs	r3, r0
    4802:	000c      	movs	r4, r1
    4804:	001a      	movs	r2, r3
    4806:	0023      	movs	r3, r4
    4808:	4c44      	ldr	r4, [pc, #272]	; (491c <_i2c_master_set_config+0x35c>)
    480a:	68b8      	ldr	r0, [r7, #8]
    480c:	68f9      	ldr	r1, [r7, #12]
    480e:	47a0      	blx	r4
    4810:	0003      	movs	r3, r0
    4812:	000c      	movs	r4, r1
    4814:	001a      	movs	r2, r3
    4816:	0023      	movs	r3, r4
    4818:	4c45      	ldr	r4, [pc, #276]	; (4930 <_i2c_master_set_config+0x370>)
    481a:	0028      	movs	r0, r5
    481c:	0031      	movs	r1, r6
    481e:	47a0      	blx	r4
    4820:	0003      	movs	r3, r0
    4822:	000c      	movs	r4, r1
    4824:	001d      	movs	r5, r3
    4826:	0026      	movs	r6, r4
    4828:	6abb      	ldr	r3, [r7, #40]	; 0x28
    482a:	005a      	lsls	r2, r3, #1
    482c:	4b3a      	ldr	r3, [pc, #232]	; (4918 <_i2c_master_set_config+0x358>)
    482e:	0010      	movs	r0, r2
    4830:	4798      	blx	r3
    4832:	0002      	movs	r2, r0
    4834:	000b      	movs	r3, r1
    4836:	4c3c      	ldr	r4, [pc, #240]	; (4928 <_i2c_master_set_config+0x368>)
    4838:	0028      	movs	r0, r5
    483a:	0031      	movs	r1, r6
    483c:	47a0      	blx	r4
    483e:	0003      	movs	r3, r0
    4840:	000c      	movs	r4, r1
    4842:	0018      	movs	r0, r3
    4844:	0021      	movs	r1, r4
    4846:	4c3a      	ldr	r4, [pc, #232]	; (4930 <_i2c_master_set_config+0x370>)
    4848:	2200      	movs	r2, #0
    484a:	4b3a      	ldr	r3, [pc, #232]	; (4934 <_i2c_master_set_config+0x374>)
    484c:	47a0      	blx	r4
    484e:	0003      	movs	r3, r0
    4850:	000c      	movs	r4, r1
    4852:	001d      	movs	r5, r3
    4854:	0026      	movs	r6, r4
    4856:	6abb      	ldr	r3, [r7, #40]	; 0x28
    4858:	005a      	lsls	r2, r3, #1
    485a:	4b2f      	ldr	r3, [pc, #188]	; (4918 <_i2c_master_set_config+0x358>)
    485c:	0010      	movs	r0, r2
    485e:	4798      	blx	r3
    4860:	0002      	movs	r2, r0
    4862:	000b      	movs	r3, r1
    4864:	4c34      	ldr	r4, [pc, #208]	; (4938 <_i2c_master_set_config+0x378>)
    4866:	0028      	movs	r0, r5
    4868:	0031      	movs	r1, r6
    486a:	47a0      	blx	r4
    486c:	0003      	movs	r3, r0
    486e:	000c      	movs	r4, r1
    4870:	0019      	movs	r1, r3
    4872:	0022      	movs	r2, r4
    4874:	4b31      	ldr	r3, [pc, #196]	; (493c <_i2c_master_set_config+0x37c>)
    4876:	0008      	movs	r0, r1
    4878:	0011      	movs	r1, r2
    487a:	4798      	blx	r3
    487c:	0003      	movs	r3, r0
    487e:	63fb      	str	r3, [r7, #60]	; 0x3c
			fgclk - fscl * (10 + (fgclk * 0.000000001)* trise), 2 * fscl));
	
	/* For High speed mode, set the SCL ratio of high:low to 1:2. */
	if (config->transfer_speed == I2C_MASTER_SPEED_HIGH_SPEED) {
    4880:	693b      	ldr	r3, [r7, #16]
    4882:	689a      	ldr	r2, [r3, #8]
    4884:	2380      	movs	r3, #128	; 0x80
    4886:	049b      	lsls	r3, r3, #18
    4888:	429a      	cmp	r2, r3
    488a:	d16a      	bne.n	4962 <_i2c_master_set_config+0x3a2>
		tmp_baudlow_hs = (int32_t)((fgclk * 2.0) / (3.0 * fscl_hs) - 1);
    488c:	4b22      	ldr	r3, [pc, #136]	; (4918 <_i2c_master_set_config+0x358>)
    488e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
    4890:	4798      	blx	r3
    4892:	4c25      	ldr	r4, [pc, #148]	; (4928 <_i2c_master_set_config+0x368>)
    4894:	0002      	movs	r2, r0
    4896:	000b      	movs	r3, r1
    4898:	47a0      	blx	r4
    489a:	0003      	movs	r3, r0
    489c:	000c      	movs	r4, r1
    489e:	001d      	movs	r5, r3
    48a0:	0026      	movs	r6, r4
    48a2:	4b1d      	ldr	r3, [pc, #116]	; (4918 <_i2c_master_set_config+0x358>)
    48a4:	6a78      	ldr	r0, [r7, #36]	; 0x24
    48a6:	4798      	blx	r3
    48a8:	4c1c      	ldr	r4, [pc, #112]	; (491c <_i2c_master_set_config+0x35c>)
    48aa:	2200      	movs	r2, #0
    48ac:	4b24      	ldr	r3, [pc, #144]	; (4940 <_i2c_master_set_config+0x380>)
    48ae:	47a0      	blx	r4
    48b0:	0003      	movs	r3, r0
    48b2:	000c      	movs	r4, r1
    48b4:	001a      	movs	r2, r3
    48b6:	0023      	movs	r3, r4
    48b8:	4c1f      	ldr	r4, [pc, #124]	; (4938 <_i2c_master_set_config+0x378>)
    48ba:	0028      	movs	r0, r5
    48bc:	0031      	movs	r1, r6
    48be:	47a0      	blx	r4
    48c0:	0003      	movs	r3, r0
    48c2:	000c      	movs	r4, r1
    48c4:	0018      	movs	r0, r3
    48c6:	0021      	movs	r1, r4
    48c8:	4c19      	ldr	r4, [pc, #100]	; (4930 <_i2c_master_set_config+0x370>)
    48ca:	2200      	movs	r2, #0
    48cc:	4b19      	ldr	r3, [pc, #100]	; (4934 <_i2c_master_set_config+0x374>)
    48ce:	47a0      	blx	r4
    48d0:	0003      	movs	r3, r0
    48d2:	000c      	movs	r4, r1
    48d4:	0019      	movs	r1, r3
    48d6:	0022      	movs	r2, r4
    48d8:	4b18      	ldr	r3, [pc, #96]	; (493c <_i2c_master_set_config+0x37c>)
    48da:	0008      	movs	r0, r1
    48dc:	0011      	movs	r1, r2
    48de:	4798      	blx	r3
    48e0:	0003      	movs	r3, r0
    48e2:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (tmp_baudlow_hs) {
    48e4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    48e6:	2b00      	cmp	r3, #0
    48e8:	d02e      	beq.n	4948 <_i2c_master_set_config+0x388>
			tmp_baud_hs = (int32_t)(fgclk / fscl_hs) - 2 - tmp_baudlow_hs;
    48ea:	4b16      	ldr	r3, [pc, #88]	; (4944 <_i2c_master_set_config+0x384>)
    48ec:	6a79      	ldr	r1, [r7, #36]	; 0x24
    48ee:	6af8      	ldr	r0, [r7, #44]	; 0x2c
    48f0:	4798      	blx	r3
    48f2:	0003      	movs	r3, r0
    48f4:	1e9a      	subs	r2, r3, #2
    48f6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    48f8:	1ad3      	subs	r3, r2, r3
    48fa:	653b      	str	r3, [r7, #80]	; 0x50
    48fc:	e031      	b.n	4962 <_i2c_master_set_config+0x3a2>
    48fe:	46c0      	nop			; (mov r8, r8)
    4900:	000144dd 	.word	0x000144dd
    4904:	00004481 	.word	0x00004481
    4908:	00014321 	.word	0x00014321
    490c:	000170cd 	.word	0x000170cd
    4910:	000044a9 	.word	0x000044a9
    4914:	00016e91 	.word	0x00016e91
    4918:	000216bd 	.word	0x000216bd
    491c:	00020b29 	.word	0x00020b29
    4920:	e826d695 	.word	0xe826d695
    4924:	3e112e0b 	.word	0x3e112e0b
    4928:	0001fea1 	.word	0x0001fea1
    492c:	40240000 	.word	0x40240000
    4930:	00021029 	.word	0x00021029
    4934:	3ff00000 	.word	0x3ff00000
    4938:	000204c1 	.word	0x000204c1
    493c:	00021655 	.word	0x00021655
    4940:	40080000 	.word	0x40080000
    4944:	0001f841 	.word	0x0001f841
		} else {
			tmp_baud_hs = (int32_t)(div_ceil(fgclk, 2 * fscl_hs)) - 1;
    4948:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    494a:	005a      	lsls	r2, r3, #1
    494c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    494e:	18d3      	adds	r3, r2, r3
    4950:	1e5a      	subs	r2, r3, #1
    4952:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    4954:	0059      	lsls	r1, r3, #1
    4956:	4b1d      	ldr	r3, [pc, #116]	; (49cc <_i2c_master_set_config+0x40c>)
    4958:	0010      	movs	r0, r2
    495a:	4798      	blx	r3
    495c:	0003      	movs	r3, r0
    495e:	3b01      	subs	r3, #1
    4960:	653b      	str	r3, [r7, #80]	; 0x50
		}
	}

	/* Check that baudrate is supported at current speed. */
	if (tmp_baud > 255 || tmp_baud < 0 || tmp_baud_hs > 255 || tmp_baud_hs < 0) {
    4962:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    4964:	2bff      	cmp	r3, #255	; 0xff
    4966:	dc08      	bgt.n	497a <_i2c_master_set_config+0x3ba>
    4968:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    496a:	2b00      	cmp	r3, #0
    496c:	db05      	blt.n	497a <_i2c_master_set_config+0x3ba>
    496e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
    4970:	2bff      	cmp	r3, #255	; 0xff
    4972:	dc02      	bgt.n	497a <_i2c_master_set_config+0x3ba>
    4974:	6d3b      	ldr	r3, [r7, #80]	; 0x50
    4976:	2b00      	cmp	r3, #0
    4978:	da06      	bge.n	4988 <_i2c_master_set_config+0x3c8>
		/* Baud rate not supported. */
		tmp_status_code = STATUS_ERR_BAUDRATE_UNAVAILABLE;
    497a:	233b      	movs	r3, #59	; 0x3b
    497c:	2210      	movs	r2, #16
    497e:	4694      	mov	ip, r2
    4980:	44bc      	add	ip, r7
    4982:	4463      	add	r3, ip
    4984:	2240      	movs	r2, #64	; 0x40
    4986:	701a      	strb	r2, [r3, #0]
	}
	if (tmp_status_code != STATUS_ERR_BAUDRATE_UNAVAILABLE) {
    4988:	233b      	movs	r3, #59	; 0x3b
    498a:	2210      	movs	r2, #16
    498c:	4694      	mov	ip, r2
    498e:	44bc      	add	ip, r7
    4990:	4463      	add	r3, ip
    4992:	781b      	ldrb	r3, [r3, #0]
    4994:	2b40      	cmp	r3, #64	; 0x40
    4996:	d00e      	beq.n	49b6 <_i2c_master_set_config+0x3f6>
		/* Baud rate acceptable. */
		i2c_module->BAUD.reg = SERCOM_I2CM_BAUD_BAUD(tmp_baud) |
    4998:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    499a:	22ff      	movs	r2, #255	; 0xff
    499c:	401a      	ands	r2, r3
			SERCOM_I2CM_BAUD_HSBAUD(tmp_baud_hs) | SERCOM_I2CM_BAUD_HSBAUDLOW(tmp_baudlow_hs);
    499e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
    49a0:	041b      	lsls	r3, r3, #16
    49a2:	0019      	movs	r1, r3
    49a4:	23ff      	movs	r3, #255	; 0xff
    49a6:	041b      	lsls	r3, r3, #16
    49a8:	400b      	ands	r3, r1
		i2c_module->BAUD.reg = SERCOM_I2CM_BAUD_BAUD(tmp_baud) |
    49aa:	4313      	orrs	r3, r2
			SERCOM_I2CM_BAUD_HSBAUD(tmp_baud_hs) | SERCOM_I2CM_BAUD_HSBAUDLOW(tmp_baudlow_hs);
    49ac:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
    49ae:	0612      	lsls	r2, r2, #24
    49b0:	431a      	orrs	r2, r3
		i2c_module->BAUD.reg = SERCOM_I2CM_BAUD_BAUD(tmp_baud) |
    49b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    49b4:	60da      	str	r2, [r3, #12]
	}

	return tmp_status_code;
    49b6:	233b      	movs	r3, #59	; 0x3b
    49b8:	2210      	movs	r2, #16
    49ba:	4694      	mov	ip, r2
    49bc:	44bc      	add	ip, r7
    49be:	4463      	add	r3, ip
    49c0:	781b      	ldrb	r3, [r3, #0]
}
    49c2:	0018      	movs	r0, r3
    49c4:	46bd      	mov	sp, r7
    49c6:	b017      	add	sp, #92	; 0x5c
    49c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    49ca:	46c0      	nop			; (mov r8, r8)
    49cc:	0001f841 	.word	0x0001f841

000049d0 <i2c_master_init>:
 */
enum status_code i2c_master_init(
		struct i2c_master_module *const module,
		Sercom *const hw,
		const struct i2c_master_config *const config)
{
    49d0:	b590      	push	{r4, r7, lr}
    49d2:	b08b      	sub	sp, #44	; 0x2c
    49d4:	af00      	add	r7, sp, #0
    49d6:	60f8      	str	r0, [r7, #12]
    49d8:	60b9      	str	r1, [r7, #8]
    49da:	607a      	str	r2, [r7, #4]
	Assert(module);
	Assert(hw);
	Assert(config);

	/* Initialize software module */
	module->hw = hw;
    49dc:	68fb      	ldr	r3, [r7, #12]
    49de:	68ba      	ldr	r2, [r7, #8]
    49e0:	601a      	str	r2, [r3, #0]

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    49e2:	68fb      	ldr	r3, [r7, #12]
    49e4:	681b      	ldr	r3, [r3, #0]
    49e6:	627b      	str	r3, [r7, #36]	; 0x24

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    49e8:	68fb      	ldr	r3, [r7, #12]
    49ea:	681b      	ldr	r3, [r3, #0]
    49ec:	0018      	movs	r0, r3
    49ee:	4b3b      	ldr	r3, [pc, #236]	; (4adc <i2c_master_init+0x10c>)
    49f0:	4798      	blx	r3
    49f2:	0003      	movs	r3, r0
    49f4:	623b      	str	r3, [r7, #32]
		gclk_index   = SERCOM5_GCLK_ID_CORE;
	} else {
		gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
	}
#else
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
    49f6:	6a3b      	ldr	r3, [r7, #32]
    49f8:	3302      	adds	r3, #2
    49fa:	61fb      	str	r3, [r7, #28]
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    49fc:	6a3b      	ldr	r3, [r7, #32]
    49fe:	3314      	adds	r3, #20
    4a00:	61bb      	str	r3, [r7, #24]
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBD, 1 << pm_index);
	} else {
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
	}
#else
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
    4a02:	2201      	movs	r2, #1
    4a04:	69fb      	ldr	r3, [r7, #28]
    4a06:	409a      	lsls	r2, r3
    4a08:	0013      	movs	r3, r2
    4a0a:	0019      	movs	r1, r3
    4a0c:	2002      	movs	r0, #2
    4a0e:	4b34      	ldr	r3, [pc, #208]	; (4ae0 <i2c_master_init+0x110>)
    4a10:	4798      	blx	r3
#endif

	/* Set up the GCLK for the module */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
    4a12:	2314      	movs	r3, #20
    4a14:	18fb      	adds	r3, r7, r3
    4a16:	0018      	movs	r0, r3
    4a18:	4b32      	ldr	r3, [pc, #200]	; (4ae4 <i2c_master_init+0x114>)
    4a1a:	4798      	blx	r3
	gclk_chan_conf.source_generator = config->generator_source;
    4a1c:	687b      	ldr	r3, [r7, #4]
    4a1e:	7b1a      	ldrb	r2, [r3, #12]
    4a20:	2314      	movs	r3, #20
    4a22:	18fb      	adds	r3, r7, r3
    4a24:	701a      	strb	r2, [r3, #0]
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
    4a26:	69bb      	ldr	r3, [r7, #24]
    4a28:	b2db      	uxtb	r3, r3
    4a2a:	2214      	movs	r2, #20
    4a2c:	18ba      	adds	r2, r7, r2
    4a2e:	0011      	movs	r1, r2
    4a30:	0018      	movs	r0, r3
    4a32:	4b2d      	ldr	r3, [pc, #180]	; (4ae8 <i2c_master_init+0x118>)
    4a34:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
    4a36:	69bb      	ldr	r3, [r7, #24]
    4a38:	b2db      	uxtb	r3, r3
    4a3a:	0018      	movs	r0, r3
    4a3c:	4b2b      	ldr	r3, [pc, #172]	; (4aec <i2c_master_init+0x11c>)
    4a3e:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
    4a40:	687b      	ldr	r3, [r7, #4]
    4a42:	7b1b      	ldrb	r3, [r3, #12]
    4a44:	2100      	movs	r1, #0
    4a46:	0018      	movs	r0, r3
    4a48:	4b29      	ldr	r3, [pc, #164]	; (4af0 <i2c_master_init+0x120>)
    4a4a:	4798      	blx	r3

	/* Check if module is enabled. */
	if (i2c_module->CTRLA.reg & SERCOM_I2CM_CTRLA_ENABLE) {
    4a4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    4a4e:	681b      	ldr	r3, [r3, #0]
    4a50:	2202      	movs	r2, #2
    4a52:	4013      	ands	r3, r2
    4a54:	d001      	beq.n	4a5a <i2c_master_init+0x8a>
		return STATUS_ERR_DENIED;
    4a56:	231c      	movs	r3, #28
    4a58:	e03b      	b.n	4ad2 <i2c_master_init+0x102>
	}

	/* Check if reset is in progress. */
	if (i2c_module->CTRLA.reg & SERCOM_I2CM_CTRLA_SWRST) {
    4a5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    4a5c:	681b      	ldr	r3, [r3, #0]
    4a5e:	2201      	movs	r2, #1
    4a60:	4013      	ands	r3, r2
    4a62:	d001      	beq.n	4a68 <i2c_master_init+0x98>
		return STATUS_BUSY;
    4a64:	2305      	movs	r3, #5
    4a66:	e034      	b.n	4ad2 <i2c_master_init+0x102>
	}

#if I2C_MASTER_CALLBACK_MODE == true
	/* Get sercom instance index and register callback. */
	uint8_t instance_index = _sercom_get_sercom_inst_index(module->hw);
    4a68:	68fb      	ldr	r3, [r7, #12]
    4a6a:	681b      	ldr	r3, [r3, #0]
    4a6c:	2217      	movs	r2, #23
    4a6e:	18bc      	adds	r4, r7, r2
    4a70:	0018      	movs	r0, r3
    4a72:	4b1a      	ldr	r3, [pc, #104]	; (4adc <i2c_master_init+0x10c>)
    4a74:	4798      	blx	r3
    4a76:	0003      	movs	r3, r0
    4a78:	7023      	strb	r3, [r4, #0]
	_sercom_set_handler(instance_index, _i2c_master_interrupt_handler);
    4a7a:	4a1e      	ldr	r2, [pc, #120]	; (4af4 <i2c_master_init+0x124>)
    4a7c:	2317      	movs	r3, #23
    4a7e:	18fb      	adds	r3, r7, r3
    4a80:	781b      	ldrb	r3, [r3, #0]
    4a82:	0011      	movs	r1, r2
    4a84:	0018      	movs	r0, r3
    4a86:	4b1c      	ldr	r3, [pc, #112]	; (4af8 <i2c_master_init+0x128>)
    4a88:	4798      	blx	r3
	_sercom_instances[instance_index] = module;
    4a8a:	2317      	movs	r3, #23
    4a8c:	18fb      	adds	r3, r7, r3
    4a8e:	781a      	ldrb	r2, [r3, #0]
    4a90:	4b1a      	ldr	r3, [pc, #104]	; (4afc <i2c_master_init+0x12c>)
    4a92:	0092      	lsls	r2, r2, #2
    4a94:	68f9      	ldr	r1, [r7, #12]
    4a96:	50d1      	str	r1, [r2, r3]

	/* Initialize values in module. */
	module->registered_callback = 0;
    4a98:	68fb      	ldr	r3, [r7, #12]
    4a9a:	2200      	movs	r2, #0
    4a9c:	761a      	strb	r2, [r3, #24]
	module->enabled_callback = 0;
    4a9e:	68fb      	ldr	r3, [r7, #12]
    4aa0:	2200      	movs	r2, #0
    4aa2:	765a      	strb	r2, [r3, #25]
	module->buffer_length = 0;
    4aa4:	68fb      	ldr	r3, [r7, #12]
    4aa6:	2200      	movs	r2, #0
    4aa8:	835a      	strh	r2, [r3, #26]
	module->buffer_remaining = 0;
    4aaa:	68fb      	ldr	r3, [r7, #12]
    4aac:	2200      	movs	r2, #0
    4aae:	839a      	strh	r2, [r3, #28]

	module->status = STATUS_OK;
    4ab0:	68fb      	ldr	r3, [r7, #12]
    4ab2:	2225      	movs	r2, #37	; 0x25
    4ab4:	2100      	movs	r1, #0
    4ab6:	5499      	strb	r1, [r3, r2]
	module->buffer = NULL;
    4ab8:	68fb      	ldr	r3, [r7, #12]
    4aba:	2200      	movs	r2, #0
    4abc:	621a      	str	r2, [r3, #32]
#endif

	/* Set sercom module to operate in I2C master mode. */
	i2c_module->CTRLA.reg = SERCOM_I2CM_CTRLA_MODE(0x5);
    4abe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    4ac0:	2214      	movs	r2, #20
    4ac2:	601a      	str	r2, [r3, #0]

	/* Set config and return status. */
	return _i2c_master_set_config(module, config);
    4ac4:	687a      	ldr	r2, [r7, #4]
    4ac6:	68fb      	ldr	r3, [r7, #12]
    4ac8:	0011      	movs	r1, r2
    4aca:	0018      	movs	r0, r3
    4acc:	4b0c      	ldr	r3, [pc, #48]	; (4b00 <i2c_master_init+0x130>)
    4ace:	4798      	blx	r3
    4ad0:	0003      	movs	r3, r0
}
    4ad2:	0018      	movs	r0, r3
    4ad4:	46bd      	mov	sp, r7
    4ad6:	b00b      	add	sp, #44	; 0x2c
    4ad8:	bd90      	pop	{r4, r7, pc}
    4ada:	46c0      	nop			; (mov r8, r8)
    4adc:	000144dd 	.word	0x000144dd
    4ae0:	00004425 	.word	0x00004425
    4ae4:	0000440d 	.word	0x0000440d
    4ae8:	00016d6d 	.word	0x00016d6d
    4aec:	00016db1 	.word	0x00016db1
    4af0:	00014295 	.word	0x00014295
    4af4:	00000bcd 	.word	0x00000bcd
    4af8:	00014541 	.word	0x00014541
    4afc:	200055e8 	.word	0x200055e8
    4b00:	000045c1 	.word	0x000045c1

00004b04 <i2c_master_reset>:
 * Reset the module to hardware defaults.
 *
 * \param[in,out] module Pointer to software module structure
 */
void i2c_master_reset(struct i2c_master_module *const module)
{
    4b04:	b580      	push	{r7, lr}
    4b06:	b084      	sub	sp, #16
    4b08:	af00      	add	r7, sp, #0
    4b0a:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    4b0c:	687b      	ldr	r3, [r7, #4]
    4b0e:	681b      	ldr	r3, [r3, #0]
    4b10:	60fb      	str	r3, [r7, #12]

	/* Wait for sync */
	_i2c_master_wait_for_sync(module);
    4b12:	687b      	ldr	r3, [r7, #4]
    4b14:	0018      	movs	r0, r3
    4b16:	4b0f      	ldr	r3, [pc, #60]	; (4b54 <i2c_master_reset+0x50>)
    4b18:	4798      	blx	r3

	/* Disable module */
	i2c_master_disable(module);
    4b1a:	687b      	ldr	r3, [r7, #4]
    4b1c:	0018      	movs	r0, r3
    4b1e:	4b0e      	ldr	r3, [pc, #56]	; (4b58 <i2c_master_reset+0x54>)
    4b20:	4798      	blx	r3

#if I2C_MASTER_CALLBACK_MODE == true
	/* Clear all pending interrupts */
	system_interrupt_enter_critical_section();
    4b22:	4b0e      	ldr	r3, [pc, #56]	; (4b5c <i2c_master_reset+0x58>)
    4b24:	4798      	blx	r3
	system_interrupt_clear_pending(_sercom_get_interrupt_vector(module->hw));
    4b26:	687b      	ldr	r3, [r7, #4]
    4b28:	681b      	ldr	r3, [r3, #0]
    4b2a:	0018      	movs	r0, r3
    4b2c:	4b0c      	ldr	r3, [pc, #48]	; (4b60 <i2c_master_reset+0x5c>)
    4b2e:	4798      	blx	r3
    4b30:	0003      	movs	r3, r0
    4b32:	0018      	movs	r0, r3
    4b34:	4b0b      	ldr	r3, [pc, #44]	; (4b64 <i2c_master_reset+0x60>)
    4b36:	4798      	blx	r3
	system_interrupt_leave_critical_section();
    4b38:	4b0b      	ldr	r3, [pc, #44]	; (4b68 <i2c_master_reset+0x64>)
    4b3a:	4798      	blx	r3
#endif

	/* Wait for sync */
	_i2c_master_wait_for_sync(module);
    4b3c:	687b      	ldr	r3, [r7, #4]
    4b3e:	0018      	movs	r0, r3
    4b40:	4b04      	ldr	r3, [pc, #16]	; (4b54 <i2c_master_reset+0x50>)
    4b42:	4798      	blx	r3

	/* Reset module */
	i2c_module->CTRLA.reg = SERCOM_I2CM_CTRLA_SWRST;
    4b44:	68fb      	ldr	r3, [r7, #12]
    4b46:	2201      	movs	r2, #1
    4b48:	601a      	str	r2, [r3, #0]
}
    4b4a:	46c0      	nop			; (mov r8, r8)
    4b4c:	46bd      	mov	sp, r7
    4b4e:	b004      	add	sp, #16
    4b50:	bd80      	pop	{r7, pc}
    4b52:	46c0      	nop			; (mov r8, r8)
    4b54:	00004545 	.word	0x00004545
    4b58:	00004569 	.word	0x00004569
    4b5c:	000044c9 	.word	0x000044c9
    4b60:	000145ad 	.word	0x000145ad
    4b64:	00016ee9 	.word	0x00016ee9
    4b68:	000044dd 	.word	0x000044dd

00004b6c <_i2c_master_address_response>:
 * \retval STATUS_ERR_BAD_ADDRESS       If slave is busy, or no slave
 *                                      acknowledged the address
 */
enum status_code _i2c_master_address_response(
		struct i2c_master_module *const module)
{
    4b6c:	b580      	push	{r7, lr}
    4b6e:	b084      	sub	sp, #16
    4b70:	af00      	add	r7, sp, #0
    4b72:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    4b74:	687b      	ldr	r3, [r7, #4]
    4b76:	681b      	ldr	r3, [r3, #0]
    4b78:	60fb      	str	r3, [r7, #12]

	/* Check for error and ignore bus-error; workaround for BUSSTATE stuck in
	 * BUSY */
	if (i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB) {
    4b7a:	68fb      	ldr	r3, [r7, #12]
    4b7c:	7e1b      	ldrb	r3, [r3, #24]
    4b7e:	b2db      	uxtb	r3, r3
    4b80:	001a      	movs	r2, r3
    4b82:	2302      	movs	r3, #2
    4b84:	4013      	ands	r3, r2
    4b86:	d00b      	beq.n	4ba0 <_i2c_master_address_response+0x34>

		/* Clear write interrupt flag */
		i2c_module->INTFLAG.reg = SERCOM_I2CM_INTFLAG_SB;
    4b88:	68fb      	ldr	r3, [r7, #12]
    4b8a:	2202      	movs	r2, #2
    4b8c:	761a      	strb	r2, [r3, #24]

		/* Check arbitration. */
		if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_ARBLOST) {
    4b8e:	68fb      	ldr	r3, [r7, #12]
    4b90:	8b5b      	ldrh	r3, [r3, #26]
    4b92:	b29b      	uxth	r3, r3
    4b94:	001a      	movs	r2, r3
    4b96:	2302      	movs	r3, #2
    4b98:	4013      	ands	r3, r2
    4b9a:	d011      	beq.n	4bc0 <_i2c_master_address_response+0x54>
			/* Return packet collision. */
			return STATUS_ERR_PACKET_COLLISION;
    4b9c:	2341      	movs	r3, #65	; 0x41
    4b9e:	e010      	b.n	4bc2 <_i2c_master_address_response+0x56>
		}
	/* Check that slave responded with ack. */
	} else if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_RXNACK) {
    4ba0:	68fb      	ldr	r3, [r7, #12]
    4ba2:	8b5b      	ldrh	r3, [r3, #26]
    4ba4:	b29b      	uxth	r3, r3
    4ba6:	001a      	movs	r2, r3
    4ba8:	2304      	movs	r3, #4
    4baa:	4013      	ands	r3, r2
    4bac:	d008      	beq.n	4bc0 <_i2c_master_address_response+0x54>
		/* Slave busy. Issue ack and stop command. */
		i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
    4bae:	68fb      	ldr	r3, [r7, #12]
    4bb0:	685b      	ldr	r3, [r3, #4]
    4bb2:	22c0      	movs	r2, #192	; 0xc0
    4bb4:	0292      	lsls	r2, r2, #10
    4bb6:	431a      	orrs	r2, r3
    4bb8:	68fb      	ldr	r3, [r7, #12]
    4bba:	605a      	str	r2, [r3, #4]

		/* Return bad address value. */
		return STATUS_ERR_BAD_ADDRESS;
    4bbc:	2318      	movs	r3, #24
    4bbe:	e000      	b.n	4bc2 <_i2c_master_address_response+0x56>
	}

	return STATUS_OK;
    4bc0:	2300      	movs	r3, #0
}
    4bc2:	0018      	movs	r0, r3
    4bc4:	46bd      	mov	sp, r7
    4bc6:	b004      	add	sp, #16
    4bc8:	bd80      	pop	{r7, pc}

00004bca <_i2c_master_wait_for_bus>:
 * \retval STATUS_ERR_TIMEOUT  If no response was given within specified timeout
 *                             period
 */
enum status_code _i2c_master_wait_for_bus(
		struct i2c_master_module *const module)
{
    4bca:	b580      	push	{r7, lr}
    4bcc:	b084      	sub	sp, #16
    4bce:	af00      	add	r7, sp, #0
    4bd0:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    4bd2:	687b      	ldr	r3, [r7, #4]
    4bd4:	681b      	ldr	r3, [r3, #0]
    4bd6:	60bb      	str	r3, [r7, #8]

	/* Wait for reply. */
	uint16_t timeout_counter = 0;
    4bd8:	230e      	movs	r3, #14
    4bda:	18fb      	adds	r3, r7, r3
    4bdc:	2200      	movs	r2, #0
    4bde:	801a      	strh	r2, [r3, #0]
	while (!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB) &&
    4be0:	e00f      	b.n	4c02 <_i2c_master_wait_for_bus+0x38>
			!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB)) {

		/* Check timeout condition. */
		if (++timeout_counter >= module->buffer_timeout) {
    4be2:	230e      	movs	r3, #14
    4be4:	18fb      	adds	r3, r7, r3
    4be6:	220e      	movs	r2, #14
    4be8:	18ba      	adds	r2, r7, r2
    4bea:	8812      	ldrh	r2, [r2, #0]
    4bec:	3201      	adds	r2, #1
    4bee:	801a      	strh	r2, [r3, #0]
    4bf0:	687b      	ldr	r3, [r7, #4]
    4bf2:	891b      	ldrh	r3, [r3, #8]
    4bf4:	220e      	movs	r2, #14
    4bf6:	18ba      	adds	r2, r7, r2
    4bf8:	8812      	ldrh	r2, [r2, #0]
    4bfa:	429a      	cmp	r2, r3
    4bfc:	d301      	bcc.n	4c02 <_i2c_master_wait_for_bus+0x38>
			return STATUS_ERR_TIMEOUT;
    4bfe:	2312      	movs	r3, #18
    4c00:	e00e      	b.n	4c20 <_i2c_master_wait_for_bus+0x56>
	while (!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB) &&
    4c02:	68bb      	ldr	r3, [r7, #8]
    4c04:	7e1b      	ldrb	r3, [r3, #24]
    4c06:	b2db      	uxtb	r3, r3
    4c08:	001a      	movs	r2, r3
    4c0a:	2301      	movs	r3, #1
    4c0c:	4013      	ands	r3, r2
    4c0e:	d106      	bne.n	4c1e <_i2c_master_wait_for_bus+0x54>
			!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB)) {
    4c10:	68bb      	ldr	r3, [r7, #8]
    4c12:	7e1b      	ldrb	r3, [r3, #24]
    4c14:	b2db      	uxtb	r3, r3
    4c16:	001a      	movs	r2, r3
    4c18:	2302      	movs	r3, #2
    4c1a:	4013      	ands	r3, r2
	while (!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB) &&
    4c1c:	d0e1      	beq.n	4be2 <_i2c_master_wait_for_bus+0x18>
		}
	}
	return STATUS_OK;
    4c1e:	2300      	movs	r3, #0
}
    4c20:	0018      	movs	r0, r3
    4c22:	46bd      	mov	sp, r7
    4c24:	b004      	add	sp, #16
    4c26:	bd80      	pop	{r7, pc}

00004c28 <_i2c_master_send_hs_master_code>:
 * \retval STATUS_OK           No error happen
 */
enum status_code _i2c_master_send_hs_master_code(
		struct i2c_master_module *const module,
		uint8_t hs_master_code)
{
    4c28:	b590      	push	{r4, r7, lr}
    4c2a:	b085      	sub	sp, #20
    4c2c:	af00      	add	r7, sp, #0
    4c2e:	6078      	str	r0, [r7, #4]
    4c30:	000a      	movs	r2, r1
    4c32:	1cfb      	adds	r3, r7, #3
    4c34:	701a      	strb	r2, [r3, #0]
	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    4c36:	687b      	ldr	r3, [r7, #4]
    4c38:	681b      	ldr	r3, [r3, #0]
    4c3a:	60fb      	str	r3, [r7, #12]
	/* Return value. */
	enum status_code tmp_status;

	/* Set NACK for high speed code */
	i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
    4c3c:	68fb      	ldr	r3, [r7, #12]
    4c3e:	685b      	ldr	r3, [r3, #4]
    4c40:	2280      	movs	r2, #128	; 0x80
    4c42:	02d2      	lsls	r2, r2, #11
    4c44:	431a      	orrs	r2, r3
    4c46:	68fb      	ldr	r3, [r7, #12]
    4c48:	605a      	str	r2, [r3, #4]
	/* Send high speed code */
	i2c_module->ADDR.reg = hs_master_code;
    4c4a:	1cfb      	adds	r3, r7, #3
    4c4c:	781a      	ldrb	r2, [r3, #0]
    4c4e:	68fb      	ldr	r3, [r7, #12]
    4c50:	625a      	str	r2, [r3, #36]	; 0x24
	/* Wait for response on bus. */
	tmp_status = _i2c_master_wait_for_bus(module);
    4c52:	230b      	movs	r3, #11
    4c54:	18fc      	adds	r4, r7, r3
    4c56:	687b      	ldr	r3, [r7, #4]
    4c58:	0018      	movs	r0, r3
    4c5a:	4b07      	ldr	r3, [pc, #28]	; (4c78 <_i2c_master_send_hs_master_code+0x50>)
    4c5c:	4798      	blx	r3
    4c5e:	0003      	movs	r3, r0
    4c60:	7023      	strb	r3, [r4, #0]
	/* Clear write interrupt flag */
	i2c_module->INTFLAG.reg = SERCOM_I2CM_INTENCLR_MB;
    4c62:	68fb      	ldr	r3, [r7, #12]
    4c64:	2201      	movs	r2, #1
    4c66:	761a      	strb	r2, [r3, #24]

	return tmp_status;
    4c68:	230b      	movs	r3, #11
    4c6a:	18fb      	adds	r3, r7, r3
    4c6c:	781b      	ldrb	r3, [r3, #0]
}
    4c6e:	0018      	movs	r0, r3
    4c70:	46bd      	mov	sp, r7
    4c72:	b005      	add	sp, #20
    4c74:	bd90      	pop	{r4, r7, pc}
    4c76:	46c0      	nop			; (mov r8, r8)
    4c78:	00004bcb 	.word	0x00004bcb

00004c7c <TC3_Handler>:
#if (SAML21E) || (SAML21G) || (SAMR30E) || (SAMR30G)
	_TC_INTERRUPT_HANDLER(0,0)
	_TC_INTERRUPT_HANDLER(1,1)
	_TC_INTERRUPT_HANDLER(4,2)
#else
	MRECURSION(TC_INST_NUM, _TC_INTERRUPT_HANDLER, TC_INST_MAX_ID)
    4c7c:	b580      	push	{r7, lr}
    4c7e:	af00      	add	r7, sp, #0
    4c80:	2000      	movs	r0, #0
    4c82:	4b02      	ldr	r3, [pc, #8]	; (4c8c <TC3_Handler+0x10>)
    4c84:	4798      	blx	r3
    4c86:	46c0      	nop			; (mov r8, r8)
    4c88:	46bd      	mov	sp, r7
    4c8a:	bd80      	pop	{r7, pc}
    4c8c:	00004cb9 	.word	0x00004cb9

00004c90 <TC4_Handler>:
    4c90:	b580      	push	{r7, lr}
    4c92:	af00      	add	r7, sp, #0
    4c94:	2001      	movs	r0, #1
    4c96:	4b02      	ldr	r3, [pc, #8]	; (4ca0 <TC4_Handler+0x10>)
    4c98:	4798      	blx	r3
    4c9a:	46c0      	nop			; (mov r8, r8)
    4c9c:	46bd      	mov	sp, r7
    4c9e:	bd80      	pop	{r7, pc}
    4ca0:	00004cb9 	.word	0x00004cb9

00004ca4 <TC5_Handler>:
    4ca4:	b580      	push	{r7, lr}
    4ca6:	af00      	add	r7, sp, #0
    4ca8:	2002      	movs	r0, #2
    4caa:	4b02      	ldr	r3, [pc, #8]	; (4cb4 <TC5_Handler+0x10>)
    4cac:	4798      	blx	r3
    4cae:	46c0      	nop			; (mov r8, r8)
    4cb0:	46bd      	mov	sp, r7
    4cb2:	bd80      	pop	{r7, pc}
    4cb4:	00004cb9 	.word	0x00004cb9

00004cb8 <_tc_interrupt_handler>:
 * \param[in]  instance  ID of the TC instance calling the interrupt
 *                       handler
 */
void _tc_interrupt_handler(
		uint8_t instance)
{
    4cb8:	b580      	push	{r7, lr}
    4cba:	b084      	sub	sp, #16
    4cbc:	af00      	add	r7, sp, #0
    4cbe:	0002      	movs	r2, r0
    4cc0:	1dfb      	adds	r3, r7, #7
    4cc2:	701a      	strb	r2, [r3, #0]
	/* Temporary variable */
	uint8_t interrupt_and_callback_status_mask;

	/* Get device instance from the look-up table */
	struct tc_module *module
			= (struct tc_module *)_tc_instances[instance];
    4cc4:	1dfb      	adds	r3, r7, #7
    4cc6:	781a      	ldrb	r2, [r3, #0]
	struct tc_module *module
    4cc8:	4b28      	ldr	r3, [pc, #160]	; (4d6c <_tc_interrupt_handler+0xb4>)
    4cca:	0092      	lsls	r2, r2, #2
    4ccc:	58d3      	ldr	r3, [r2, r3]
    4cce:	60fb      	str	r3, [r7, #12]

	/* Read and mask interrupt flag register */
	interrupt_and_callback_status_mask = module->hw->COUNT8.INTFLAG.reg &
    4cd0:	68fb      	ldr	r3, [r7, #12]
    4cd2:	681b      	ldr	r3, [r3, #0]
    4cd4:	7b9b      	ldrb	r3, [r3, #14]
    4cd6:	b2db      	uxtb	r3, r3
			module->register_callback_mask &
    4cd8:	68fa      	ldr	r2, [r7, #12]
    4cda:	7e12      	ldrb	r2, [r2, #24]
	interrupt_and_callback_status_mask = module->hw->COUNT8.INTFLAG.reg &
    4cdc:	4013      	ands	r3, r2
    4cde:	b2da      	uxtb	r2, r3
			module->enable_callback_mask;
    4ce0:	68fb      	ldr	r3, [r7, #12]
    4ce2:	7e59      	ldrb	r1, [r3, #25]
	interrupt_and_callback_status_mask = module->hw->COUNT8.INTFLAG.reg &
    4ce4:	230b      	movs	r3, #11
    4ce6:	18fb      	adds	r3, r7, r3
    4ce8:	400a      	ands	r2, r1
    4cea:	701a      	strb	r2, [r3, #0]

	/* Check if an Overflow interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_OVF) {
    4cec:	230b      	movs	r3, #11
    4cee:	18fb      	adds	r3, r7, r3
    4cf0:	781b      	ldrb	r3, [r3, #0]
    4cf2:	2201      	movs	r2, #1
    4cf4:	4013      	ands	r3, r2
    4cf6:	d008      	beq.n	4d0a <_tc_interrupt_handler+0x52>
		/* Invoke registered and enabled callback function */
		(module->callback[TC_CALLBACK_OVERFLOW])(module);
    4cf8:	68fb      	ldr	r3, [r7, #12]
    4cfa:	689b      	ldr	r3, [r3, #8]
    4cfc:	68fa      	ldr	r2, [r7, #12]
    4cfe:	0010      	movs	r0, r2
    4d00:	4798      	blx	r3
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_OVF;
    4d02:	68fb      	ldr	r3, [r7, #12]
    4d04:	681b      	ldr	r3, [r3, #0]
    4d06:	2201      	movs	r2, #1
    4d08:	739a      	strb	r2, [r3, #14]
	}

	/* Check if an Error interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_ERR) {
    4d0a:	230b      	movs	r3, #11
    4d0c:	18fb      	adds	r3, r7, r3
    4d0e:	781b      	ldrb	r3, [r3, #0]
    4d10:	2202      	movs	r2, #2
    4d12:	4013      	ands	r3, r2
    4d14:	d008      	beq.n	4d28 <_tc_interrupt_handler+0x70>
		/* Invoke registered and enabled callback function */
		(module->callback[TC_CALLBACK_ERROR])(module);
    4d16:	68fb      	ldr	r3, [r7, #12]
    4d18:	68db      	ldr	r3, [r3, #12]
    4d1a:	68fa      	ldr	r2, [r7, #12]
    4d1c:	0010      	movs	r0, r2
    4d1e:	4798      	blx	r3
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_ERR;
    4d20:	68fb      	ldr	r3, [r7, #12]
    4d22:	681b      	ldr	r3, [r3, #0]
    4d24:	2202      	movs	r2, #2
    4d26:	739a      	strb	r2, [r3, #14]
	}

	/* Check if an Match/Capture Channel 0 interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_MC(1)) {
    4d28:	230b      	movs	r3, #11
    4d2a:	18fb      	adds	r3, r7, r3
    4d2c:	781b      	ldrb	r3, [r3, #0]
    4d2e:	2210      	movs	r2, #16
    4d30:	4013      	ands	r3, r2
    4d32:	d008      	beq.n	4d46 <_tc_interrupt_handler+0x8e>
		/* Invoke registered and enabled callback function */
		(module->callback[TC_CALLBACK_CC_CHANNEL0])(module);
    4d34:	68fb      	ldr	r3, [r7, #12]
    4d36:	691b      	ldr	r3, [r3, #16]
    4d38:	68fa      	ldr	r2, [r7, #12]
    4d3a:	0010      	movs	r0, r2
    4d3c:	4798      	blx	r3
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_MC(1);
    4d3e:	68fb      	ldr	r3, [r7, #12]
    4d40:	681b      	ldr	r3, [r3, #0]
    4d42:	2210      	movs	r2, #16
    4d44:	739a      	strb	r2, [r3, #14]
	}

	/* Check if an Match/Capture Channel 1 interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_MC(2)) {
    4d46:	230b      	movs	r3, #11
    4d48:	18fb      	adds	r3, r7, r3
    4d4a:	781b      	ldrb	r3, [r3, #0]
    4d4c:	2220      	movs	r2, #32
    4d4e:	4013      	ands	r3, r2
    4d50:	d008      	beq.n	4d64 <_tc_interrupt_handler+0xac>
		/* Invoke registered and enabled callback function */
		(module->callback[TC_CALLBACK_CC_CHANNEL1])(module);
    4d52:	68fb      	ldr	r3, [r7, #12]
    4d54:	695b      	ldr	r3, [r3, #20]
    4d56:	68fa      	ldr	r2, [r7, #12]
    4d58:	0010      	movs	r0, r2
    4d5a:	4798      	blx	r3
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_MC(2);
    4d5c:	68fb      	ldr	r3, [r7, #12]
    4d5e:	681b      	ldr	r3, [r3, #0]
    4d60:	2220      	movs	r2, #32
    4d62:	739a      	strb	r2, [r3, #14]
	}
}
    4d64:	46c0      	nop			; (mov r8, r8)
    4d66:	46bd      	mov	sp, r7
    4d68:	b004      	add	sp, #16
    4d6a:	bd80      	pop	{r7, pc}
    4d6c:	200043d0 	.word	0x200043d0

00004d70 <FreeRTOS_CLIRegisterCommand>:


/*-----------------------------------------------------------*/

BaseType_t FreeRTOS_CLIRegisterCommand( const CLI_Command_Definition_t * const pxCommandToRegister )
{
    4d70:	b580      	push	{r7, lr}
    4d72:	b084      	sub	sp, #16
    4d74:	af00      	add	r7, sp, #0
    4d76:	6078      	str	r0, [r7, #4]
static CLI_Definition_List_Item_t *pxLastCommandInList = &xRegisteredCommands;
CLI_Definition_List_Item_t *pxNewListItem;
BaseType_t xReturn = pdFAIL;
    4d78:	2300      	movs	r3, #0
    4d7a:	60fb      	str	r3, [r7, #12]

	/* Check the parameter is not NULL. */
	configASSERT( pxCommandToRegister );
    4d7c:	687b      	ldr	r3, [r7, #4]
    4d7e:	2b00      	cmp	r3, #0
    4d80:	d101      	bne.n	4d86 <FreeRTOS_CLIRegisterCommand+0x16>
    4d82:	b672      	cpsid	i
    4d84:	e7fe      	b.n	4d84 <FreeRTOS_CLIRegisterCommand+0x14>

	/* Create a new list item that will reference the command being registered. */
	pxNewListItem = ( CLI_Definition_List_Item_t * ) pvPortMalloc( sizeof( CLI_Definition_List_Item_t ) );
    4d86:	2008      	movs	r0, #8
    4d88:	4b11      	ldr	r3, [pc, #68]	; (4dd0 <FreeRTOS_CLIRegisterCommand+0x60>)
    4d8a:	4798      	blx	r3
    4d8c:	0003      	movs	r3, r0
    4d8e:	60bb      	str	r3, [r7, #8]
	configASSERT( pxNewListItem );
    4d90:	68bb      	ldr	r3, [r7, #8]
    4d92:	2b00      	cmp	r3, #0
    4d94:	d101      	bne.n	4d9a <FreeRTOS_CLIRegisterCommand+0x2a>
    4d96:	b672      	cpsid	i
    4d98:	e7fe      	b.n	4d98 <FreeRTOS_CLIRegisterCommand+0x28>

	if( pxNewListItem != NULL )
    4d9a:	68bb      	ldr	r3, [r7, #8]
    4d9c:	2b00      	cmp	r3, #0
    4d9e:	d012      	beq.n	4dc6 <FreeRTOS_CLIRegisterCommand+0x56>
	{
		taskENTER_CRITICAL();
    4da0:	4b0c      	ldr	r3, [pc, #48]	; (4dd4 <FreeRTOS_CLIRegisterCommand+0x64>)
    4da2:	4798      	blx	r3
		{
			/* Reference the command being registered from the newly created
			list item. */
			pxNewListItem->pxCommandLineDefinition = pxCommandToRegister;
    4da4:	68bb      	ldr	r3, [r7, #8]
    4da6:	687a      	ldr	r2, [r7, #4]
    4da8:	601a      	str	r2, [r3, #0]

			/* The new list item will get added to the end of the list, so
			pxNext has nowhere to point. */
			pxNewListItem->pxNext = NULL;
    4daa:	68bb      	ldr	r3, [r7, #8]
    4dac:	2200      	movs	r2, #0
    4dae:	605a      	str	r2, [r3, #4]

			/* Add the newly created list item to the end of the already existing
			list. */
			pxLastCommandInList->pxNext = pxNewListItem;
    4db0:	4b09      	ldr	r3, [pc, #36]	; (4dd8 <FreeRTOS_CLIRegisterCommand+0x68>)
    4db2:	681b      	ldr	r3, [r3, #0]
    4db4:	68ba      	ldr	r2, [r7, #8]
    4db6:	605a      	str	r2, [r3, #4]

			/* Set the end of list marker to the new list item. */
			pxLastCommandInList = pxNewListItem;
    4db8:	4b07      	ldr	r3, [pc, #28]	; (4dd8 <FreeRTOS_CLIRegisterCommand+0x68>)
    4dba:	68ba      	ldr	r2, [r7, #8]
    4dbc:	601a      	str	r2, [r3, #0]
		}
		taskEXIT_CRITICAL();
    4dbe:	4b07      	ldr	r3, [pc, #28]	; (4ddc <FreeRTOS_CLIRegisterCommand+0x6c>)
    4dc0:	4798      	blx	r3

		xReturn = pdPASS;
    4dc2:	2301      	movs	r3, #1
    4dc4:	60fb      	str	r3, [r7, #12]
	}

	return xReturn;
    4dc6:	68fb      	ldr	r3, [r7, #12]
}
    4dc8:	0018      	movs	r0, r3
    4dca:	46bd      	mov	sp, r7
    4dcc:	b004      	add	sp, #16
    4dce:	bd80      	pop	{r7, pc}
    4dd0:	00007181 	.word	0x00007181
    4dd4:	00007049 	.word	0x00007049
    4dd8:	200000f0 	.word	0x200000f0
    4ddc:	0000706d 	.word	0x0000706d

00004de0 <FreeRTOS_CLIProcessCommand>:
/*-----------------------------------------------------------*/

BaseType_t FreeRTOS_CLIProcessCommand( const char * const pcCommandInput, char * pcWriteBuffer, size_t xWriteBufferLen  )
{
    4de0:	b580      	push	{r7, lr}
    4de2:	b088      	sub	sp, #32
    4de4:	af00      	add	r7, sp, #0
    4de6:	60f8      	str	r0, [r7, #12]
    4de8:	60b9      	str	r1, [r7, #8]
    4dea:	607a      	str	r2, [r7, #4]
static const CLI_Definition_List_Item_t *pxCommand = NULL;
BaseType_t xReturn = pdTRUE;
    4dec:	2301      	movs	r3, #1
    4dee:	61fb      	str	r3, [r7, #28]
size_t xCommandStringLength;

	/* Note:  This function is not re-entrant.  It must not be called from more
	thank one task. */

	if( pxCommand == NULL )
    4df0:	4b3d      	ldr	r3, [pc, #244]	; (4ee8 <FreeRTOS_CLIProcessCommand+0x108>)
    4df2:	681b      	ldr	r3, [r3, #0]
    4df4:	2b00      	cmp	r3, #0
    4df6:	d144      	bne.n	4e82 <FreeRTOS_CLIProcessCommand+0xa2>
	{
		/* Search for the command string in the list of registered commands. */
		for( pxCommand = &xRegisteredCommands; pxCommand != NULL; pxCommand = pxCommand->pxNext )
    4df8:	4b3b      	ldr	r3, [pc, #236]	; (4ee8 <FreeRTOS_CLIProcessCommand+0x108>)
    4dfa:	4a3c      	ldr	r2, [pc, #240]	; (4eec <FreeRTOS_CLIProcessCommand+0x10c>)
    4dfc:	601a      	str	r2, [r3, #0]
    4dfe:	e03a      	b.n	4e76 <FreeRTOS_CLIProcessCommand+0x96>
		{
			pcRegisteredCommandString = pxCommand->pxCommandLineDefinition->pcCommand;
    4e00:	4b39      	ldr	r3, [pc, #228]	; (4ee8 <FreeRTOS_CLIProcessCommand+0x108>)
    4e02:	681b      	ldr	r3, [r3, #0]
    4e04:	681b      	ldr	r3, [r3, #0]
    4e06:	681b      	ldr	r3, [r3, #0]
    4e08:	61bb      	str	r3, [r7, #24]
			xCommandStringLength = strlen( pcRegisteredCommandString );
    4e0a:	69bb      	ldr	r3, [r7, #24]
    4e0c:	0018      	movs	r0, r3
    4e0e:	4b38      	ldr	r3, [pc, #224]	; (4ef0 <FreeRTOS_CLIProcessCommand+0x110>)
    4e10:	4798      	blx	r3
    4e12:	0003      	movs	r3, r0
    4e14:	617b      	str	r3, [r7, #20]

			/* To ensure the string lengths match exactly, so as not to pick up
			a sub-string of a longer command, check the byte after the expected
			end of the string is either the end of the string or a space before
			a parameter. */
			if( ( pcCommandInput[ xCommandStringLength ] == ' ' ) || ( pcCommandInput[ xCommandStringLength ] == 0x00 ) )
    4e16:	68fa      	ldr	r2, [r7, #12]
    4e18:	697b      	ldr	r3, [r7, #20]
    4e1a:	18d3      	adds	r3, r2, r3
    4e1c:	781b      	ldrb	r3, [r3, #0]
    4e1e:	2b20      	cmp	r3, #32
    4e20:	d005      	beq.n	4e2e <FreeRTOS_CLIProcessCommand+0x4e>
    4e22:	68fa      	ldr	r2, [r7, #12]
    4e24:	697b      	ldr	r3, [r7, #20]
    4e26:	18d3      	adds	r3, r2, r3
    4e28:	781b      	ldrb	r3, [r3, #0]
    4e2a:	2b00      	cmp	r3, #0
    4e2c:	d11e      	bne.n	4e6c <FreeRTOS_CLIProcessCommand+0x8c>
			{
				if( strncmp( pcCommandInput, pcRegisteredCommandString, xCommandStringLength ) == 0 )
    4e2e:	697a      	ldr	r2, [r7, #20]
    4e30:	69b9      	ldr	r1, [r7, #24]
    4e32:	68fb      	ldr	r3, [r7, #12]
    4e34:	0018      	movs	r0, r3
    4e36:	4b2f      	ldr	r3, [pc, #188]	; (4ef4 <FreeRTOS_CLIProcessCommand+0x114>)
    4e38:	4798      	blx	r3
    4e3a:	1e03      	subs	r3, r0, #0
    4e3c:	d116      	bne.n	4e6c <FreeRTOS_CLIProcessCommand+0x8c>
				{
					/* The command has been found.  Check it has the expected
					number of parameters.  If cExpectedNumberOfParameters is -1,
					then there could be a variable number of parameters and no
					check is made. */
					if( pxCommand->pxCommandLineDefinition->cExpectedNumberOfParameters >= 0 )
    4e3e:	4b2a      	ldr	r3, [pc, #168]	; (4ee8 <FreeRTOS_CLIProcessCommand+0x108>)
    4e40:	681b      	ldr	r3, [r3, #0]
    4e42:	681b      	ldr	r3, [r3, #0]
    4e44:	7b1b      	ldrb	r3, [r3, #12]
    4e46:	b25b      	sxtb	r3, r3
    4e48:	2b00      	cmp	r3, #0
    4e4a:	db19      	blt.n	4e80 <FreeRTOS_CLIProcessCommand+0xa0>
					{
						if( prvGetNumberOfParameters( pcCommandInput ) != pxCommand->pxCommandLineDefinition->cExpectedNumberOfParameters )
    4e4c:	68fb      	ldr	r3, [r7, #12]
    4e4e:	0018      	movs	r0, r3
    4e50:	4b29      	ldr	r3, [pc, #164]	; (4ef8 <FreeRTOS_CLIProcessCommand+0x118>)
    4e52:	4798      	blx	r3
    4e54:	0003      	movs	r3, r0
    4e56:	001a      	movs	r2, r3
    4e58:	4b23      	ldr	r3, [pc, #140]	; (4ee8 <FreeRTOS_CLIProcessCommand+0x108>)
    4e5a:	681b      	ldr	r3, [r3, #0]
    4e5c:	681b      	ldr	r3, [r3, #0]
    4e5e:	7b1b      	ldrb	r3, [r3, #12]
    4e60:	b25b      	sxtb	r3, r3
    4e62:	429a      	cmp	r2, r3
    4e64:	d00c      	beq.n	4e80 <FreeRTOS_CLIProcessCommand+0xa0>
						{
							xReturn = pdFALSE;
    4e66:	2300      	movs	r3, #0
    4e68:	61fb      	str	r3, [r7, #28]
						}
					}

					break;
    4e6a:	e009      	b.n	4e80 <FreeRTOS_CLIProcessCommand+0xa0>
		for( pxCommand = &xRegisteredCommands; pxCommand != NULL; pxCommand = pxCommand->pxNext )
    4e6c:	4b1e      	ldr	r3, [pc, #120]	; (4ee8 <FreeRTOS_CLIProcessCommand+0x108>)
    4e6e:	681b      	ldr	r3, [r3, #0]
    4e70:	685a      	ldr	r2, [r3, #4]
    4e72:	4b1d      	ldr	r3, [pc, #116]	; (4ee8 <FreeRTOS_CLIProcessCommand+0x108>)
    4e74:	601a      	str	r2, [r3, #0]
    4e76:	4b1c      	ldr	r3, [pc, #112]	; (4ee8 <FreeRTOS_CLIProcessCommand+0x108>)
    4e78:	681b      	ldr	r3, [r3, #0]
    4e7a:	2b00      	cmp	r3, #0
    4e7c:	d1c0      	bne.n	4e00 <FreeRTOS_CLIProcessCommand+0x20>
    4e7e:	e000      	b.n	4e82 <FreeRTOS_CLIProcessCommand+0xa2>
					break;
    4e80:	46c0      	nop			; (mov r8, r8)
				}
			}
		}
	}

	if( ( pxCommand != NULL ) && ( xReturn == pdFALSE ) )
    4e82:	4b19      	ldr	r3, [pc, #100]	; (4ee8 <FreeRTOS_CLIProcessCommand+0x108>)
    4e84:	681b      	ldr	r3, [r3, #0]
    4e86:	2b00      	cmp	r3, #0
    4e88:	d00c      	beq.n	4ea4 <FreeRTOS_CLIProcessCommand+0xc4>
    4e8a:	69fb      	ldr	r3, [r7, #28]
    4e8c:	2b00      	cmp	r3, #0
    4e8e:	d109      	bne.n	4ea4 <FreeRTOS_CLIProcessCommand+0xc4>
	{
		/* The command was found, but the number of parameters with the command
		was incorrect. */
		strncpy( pcWriteBuffer, "Incorrect command parameter(s).  Enter \"help\" to view a list of available commands.\r\n\r\n", xWriteBufferLen );
    4e90:	687a      	ldr	r2, [r7, #4]
    4e92:	491a      	ldr	r1, [pc, #104]	; (4efc <FreeRTOS_CLIProcessCommand+0x11c>)
    4e94:	68bb      	ldr	r3, [r7, #8]
    4e96:	0018      	movs	r0, r3
    4e98:	4b19      	ldr	r3, [pc, #100]	; (4f00 <FreeRTOS_CLIProcessCommand+0x120>)
    4e9a:	4798      	blx	r3
		pxCommand = NULL;
    4e9c:	4b12      	ldr	r3, [pc, #72]	; (4ee8 <FreeRTOS_CLIProcessCommand+0x108>)
    4e9e:	2200      	movs	r2, #0
    4ea0:	601a      	str	r2, [r3, #0]
    4ea2:	e01c      	b.n	4ede <FreeRTOS_CLIProcessCommand+0xfe>
	}
	else if( pxCommand != NULL )
    4ea4:	4b10      	ldr	r3, [pc, #64]	; (4ee8 <FreeRTOS_CLIProcessCommand+0x108>)
    4ea6:	681b      	ldr	r3, [r3, #0]
    4ea8:	2b00      	cmp	r3, #0
    4eaa:	d010      	beq.n	4ece <FreeRTOS_CLIProcessCommand+0xee>
	{
		/* Call the callback function that is registered to this command. */
		xReturn = pxCommand->pxCommandLineDefinition->pxCommandInterpreter( pcWriteBuffer, xWriteBufferLen, pcCommandInput );
    4eac:	4b0e      	ldr	r3, [pc, #56]	; (4ee8 <FreeRTOS_CLIProcessCommand+0x108>)
    4eae:	681b      	ldr	r3, [r3, #0]
    4eb0:	681b      	ldr	r3, [r3, #0]
    4eb2:	689b      	ldr	r3, [r3, #8]
    4eb4:	68fa      	ldr	r2, [r7, #12]
    4eb6:	6879      	ldr	r1, [r7, #4]
    4eb8:	68b8      	ldr	r0, [r7, #8]
    4eba:	4798      	blx	r3
    4ebc:	0003      	movs	r3, r0
    4ebe:	61fb      	str	r3, [r7, #28]

		/* If xReturn is pdFALSE, then no further strings will be returned
		after this one, and	pxCommand can be reset to NULL ready to search
		for the next entered command. */
		if( xReturn == pdFALSE )
    4ec0:	69fb      	ldr	r3, [r7, #28]
    4ec2:	2b00      	cmp	r3, #0
    4ec4:	d10b      	bne.n	4ede <FreeRTOS_CLIProcessCommand+0xfe>
		{
			pxCommand = NULL;
    4ec6:	4b08      	ldr	r3, [pc, #32]	; (4ee8 <FreeRTOS_CLIProcessCommand+0x108>)
    4ec8:	2200      	movs	r2, #0
    4eca:	601a      	str	r2, [r3, #0]
    4ecc:	e007      	b.n	4ede <FreeRTOS_CLIProcessCommand+0xfe>
		}
	}
	else
	{
		/* pxCommand was NULL, the command was not found. */
		strncpy( pcWriteBuffer, "Command not recognised.  Enter 'help' to view a list of available commands.\r\n\r\n", xWriteBufferLen );
    4ece:	687a      	ldr	r2, [r7, #4]
    4ed0:	490c      	ldr	r1, [pc, #48]	; (4f04 <FreeRTOS_CLIProcessCommand+0x124>)
    4ed2:	68bb      	ldr	r3, [r7, #8]
    4ed4:	0018      	movs	r0, r3
    4ed6:	4b0a      	ldr	r3, [pc, #40]	; (4f00 <FreeRTOS_CLIProcessCommand+0x120>)
    4ed8:	4798      	blx	r3
		xReturn = pdFALSE;
    4eda:	2300      	movs	r3, #0
    4edc:	61fb      	str	r3, [r7, #28]
	}

	return xReturn;
    4ede:	69fb      	ldr	r3, [r7, #28]
}
    4ee0:	0018      	movs	r0, r3
    4ee2:	46bd      	mov	sp, r7
    4ee4:	b008      	add	sp, #32
    4ee6:	bd80      	pop	{r7, pc}
    4ee8:	20000b38 	.word	0x20000b38
    4eec:	200000e8 	.word	0x200000e8
    4ef0:	00021bd3 	.word	0x00021bd3
    4ef4:	00021be1 	.word	0x00021be1
    4ef8:	00004f69 	.word	0x00004f69
    4efc:	000238a0 	.word	0x000238a0
    4f00:	00021c03 	.word	0x00021c03
    4f04:	000238f8 	.word	0x000238f8

00004f08 <prvHelpCommand>:
	return pcReturn;
}
/*-----------------------------------------------------------*/

static BaseType_t prvHelpCommand( char *pcWriteBuffer, size_t xWriteBufferLen, const char *pcCommandString )
{
    4f08:	b580      	push	{r7, lr}
    4f0a:	b086      	sub	sp, #24
    4f0c:	af00      	add	r7, sp, #0
    4f0e:	60f8      	str	r0, [r7, #12]
    4f10:	60b9      	str	r1, [r7, #8]
    4f12:	607a      	str	r2, [r7, #4]
static const CLI_Definition_List_Item_t * pxCommand = NULL;
BaseType_t xReturn;

	( void ) pcCommandString;

	if( pxCommand == NULL )
    4f14:	4b11      	ldr	r3, [pc, #68]	; (4f5c <prvHelpCommand+0x54>)
    4f16:	681b      	ldr	r3, [r3, #0]
    4f18:	2b00      	cmp	r3, #0
    4f1a:	d102      	bne.n	4f22 <prvHelpCommand+0x1a>
	{
		/* Reset the pxCommand pointer back to the start of the list. */
		pxCommand = &xRegisteredCommands;
    4f1c:	4b0f      	ldr	r3, [pc, #60]	; (4f5c <prvHelpCommand+0x54>)
    4f1e:	4a10      	ldr	r2, [pc, #64]	; (4f60 <prvHelpCommand+0x58>)
    4f20:	601a      	str	r2, [r3, #0]
	}

	/* Return the next command help string, before moving the pointer on to
	the next command in the list. */
	strncpy( pcWriteBuffer, pxCommand->pxCommandLineDefinition->pcHelpString, xWriteBufferLen );
    4f22:	4b0e      	ldr	r3, [pc, #56]	; (4f5c <prvHelpCommand+0x54>)
    4f24:	681b      	ldr	r3, [r3, #0]
    4f26:	681b      	ldr	r3, [r3, #0]
    4f28:	6859      	ldr	r1, [r3, #4]
    4f2a:	68ba      	ldr	r2, [r7, #8]
    4f2c:	68fb      	ldr	r3, [r7, #12]
    4f2e:	0018      	movs	r0, r3
    4f30:	4b0c      	ldr	r3, [pc, #48]	; (4f64 <prvHelpCommand+0x5c>)
    4f32:	4798      	blx	r3
	pxCommand = pxCommand->pxNext;
    4f34:	4b09      	ldr	r3, [pc, #36]	; (4f5c <prvHelpCommand+0x54>)
    4f36:	681b      	ldr	r3, [r3, #0]
    4f38:	685a      	ldr	r2, [r3, #4]
    4f3a:	4b08      	ldr	r3, [pc, #32]	; (4f5c <prvHelpCommand+0x54>)
    4f3c:	601a      	str	r2, [r3, #0]

	if( pxCommand == NULL )
    4f3e:	4b07      	ldr	r3, [pc, #28]	; (4f5c <prvHelpCommand+0x54>)
    4f40:	681b      	ldr	r3, [r3, #0]
    4f42:	2b00      	cmp	r3, #0
    4f44:	d102      	bne.n	4f4c <prvHelpCommand+0x44>
	{
		/* There are no more commands in the list, so there will be no more
		strings to return after this one and pdFALSE should be returned. */
		xReturn = pdFALSE;
    4f46:	2300      	movs	r3, #0
    4f48:	617b      	str	r3, [r7, #20]
    4f4a:	e001      	b.n	4f50 <prvHelpCommand+0x48>
	}
	else
	{
		xReturn = pdTRUE;
    4f4c:	2301      	movs	r3, #1
    4f4e:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
    4f50:	697b      	ldr	r3, [r7, #20]
}
    4f52:	0018      	movs	r0, r3
    4f54:	46bd      	mov	sp, r7
    4f56:	b006      	add	sp, #24
    4f58:	bd80      	pop	{r7, pc}
    4f5a:	46c0      	nop			; (mov r8, r8)
    4f5c:	20000b3c 	.word	0x20000b3c
    4f60:	200000e8 	.word	0x200000e8
    4f64:	00021c03 	.word	0x00021c03

00004f68 <prvGetNumberOfParameters>:
/*-----------------------------------------------------------*/

static int8_t prvGetNumberOfParameters( const char *pcCommandString )
{
    4f68:	b580      	push	{r7, lr}
    4f6a:	b084      	sub	sp, #16
    4f6c:	af00      	add	r7, sp, #0
    4f6e:	6078      	str	r0, [r7, #4]
int8_t cParameters = 0;
    4f70:	230f      	movs	r3, #15
    4f72:	18fb      	adds	r3, r7, r3
    4f74:	2200      	movs	r2, #0
    4f76:	701a      	strb	r2, [r3, #0]
BaseType_t xLastCharacterWasSpace = pdFALSE;
    4f78:	2300      	movs	r3, #0
    4f7a:	60bb      	str	r3, [r7, #8]

	/* Count the number of space delimited words in pcCommandString. */
	while( *pcCommandString != 0x00 )
    4f7c:	e018      	b.n	4fb0 <prvGetNumberOfParameters+0x48>
	{
		if( ( *pcCommandString ) == ' ' )
    4f7e:	687b      	ldr	r3, [r7, #4]
    4f80:	781b      	ldrb	r3, [r3, #0]
    4f82:	2b20      	cmp	r3, #32
    4f84:	d10f      	bne.n	4fa6 <prvGetNumberOfParameters+0x3e>
		{
			if( xLastCharacterWasSpace != pdTRUE )
    4f86:	68bb      	ldr	r3, [r7, #8]
    4f88:	2b01      	cmp	r3, #1
    4f8a:	d00e      	beq.n	4faa <prvGetNumberOfParameters+0x42>
			{
				cParameters++;
    4f8c:	230f      	movs	r3, #15
    4f8e:	18fb      	adds	r3, r7, r3
    4f90:	781b      	ldrb	r3, [r3, #0]
    4f92:	b25b      	sxtb	r3, r3
    4f94:	b2db      	uxtb	r3, r3
    4f96:	3301      	adds	r3, #1
    4f98:	b2da      	uxtb	r2, r3
    4f9a:	230f      	movs	r3, #15
    4f9c:	18fb      	adds	r3, r7, r3
    4f9e:	701a      	strb	r2, [r3, #0]
				xLastCharacterWasSpace = pdTRUE;
    4fa0:	2301      	movs	r3, #1
    4fa2:	60bb      	str	r3, [r7, #8]
    4fa4:	e001      	b.n	4faa <prvGetNumberOfParameters+0x42>
			}
		}
		else
		{
			xLastCharacterWasSpace = pdFALSE;
    4fa6:	2300      	movs	r3, #0
    4fa8:	60bb      	str	r3, [r7, #8]
		}

		pcCommandString++;
    4faa:	687b      	ldr	r3, [r7, #4]
    4fac:	3301      	adds	r3, #1
    4fae:	607b      	str	r3, [r7, #4]
	while( *pcCommandString != 0x00 )
    4fb0:	687b      	ldr	r3, [r7, #4]
    4fb2:	781b      	ldrb	r3, [r3, #0]
    4fb4:	2b00      	cmp	r3, #0
    4fb6:	d1e2      	bne.n	4f7e <prvGetNumberOfParameters+0x16>
	}

	/* If the command string ended with spaces, then there will have been too
	many parameters counted. */
	if( xLastCharacterWasSpace == pdTRUE )
    4fb8:	68bb      	ldr	r3, [r7, #8]
    4fba:	2b01      	cmp	r3, #1
    4fbc:	d109      	bne.n	4fd2 <prvGetNumberOfParameters+0x6a>
	{
		cParameters--;
    4fbe:	230f      	movs	r3, #15
    4fc0:	18fb      	adds	r3, r7, r3
    4fc2:	781b      	ldrb	r3, [r3, #0]
    4fc4:	b25b      	sxtb	r3, r3
    4fc6:	b2db      	uxtb	r3, r3
    4fc8:	3b01      	subs	r3, #1
    4fca:	b2da      	uxtb	r2, r3
    4fcc:	230f      	movs	r3, #15
    4fce:	18fb      	adds	r3, r7, r3
    4fd0:	701a      	strb	r2, [r3, #0]
	}

	/* The value returned is one less than the number of space delimited words,
	as the first word should be the command itself. */
	return cParameters;
    4fd2:	230f      	movs	r3, #15
    4fd4:	18fb      	adds	r3, r7, r3
    4fd6:	781b      	ldrb	r3, [r3, #0]
    4fd8:	b25b      	sxtb	r3, r3
}
    4fda:	0018      	movs	r0, r3
    4fdc:	46bd      	mov	sp, r7
    4fde:	b004      	add	sp, #16
    4fe0:	bd80      	pop	{r7, pc}
	...

00004fe4 <prvTraceGetQueueNumber>:
{
	return (uint32_t)ucQueueGetQueueNumber(handle);
}
#else 
uint32_t prvTraceGetQueueNumber(void* handle)
{
    4fe4:	b580      	push	{r7, lr}
    4fe6:	b082      	sub	sp, #8
    4fe8:	af00      	add	r7, sp, #0
    4fea:	6078      	str	r0, [r7, #4]
	return (uint32_t)uxQueueGetQueueNumber(handle);
    4fec:	687b      	ldr	r3, [r7, #4]
    4fee:	0018      	movs	r0, r3
    4ff0:	4b03      	ldr	r3, [pc, #12]	; (5000 <prvTraceGetQueueNumber+0x1c>)
    4ff2:	4798      	blx	r3
    4ff4:	0003      	movs	r3, r0
}
    4ff6:	0018      	movs	r0, r3
    4ff8:	46bd      	mov	sp, r7
    4ffa:	b002      	add	sp, #8
    4ffc:	bd80      	pop	{r7, pc}
    4ffe:	46c0      	nop			; (mov r8, r8)
    5000:	000087a9 	.word	0x000087a9

00005004 <prvTraceGetQueueType>:
#endif /* (TRC_CFG_FREERTOS_VERSION < TRC_FREERTOS_VERSION_8_X) */

uint8_t prvTraceGetQueueType(void* handle)
{
    5004:	b580      	push	{r7, lr}
    5006:	b082      	sub	sp, #8
    5008:	af00      	add	r7, sp, #0
    500a:	6078      	str	r0, [r7, #4]
	// This is either declared in header file in FreeRTOS 8 and later, or as extern above
	return ucQueueGetQueueType(handle);
    500c:	687b      	ldr	r3, [r7, #4]
    500e:	0018      	movs	r0, r3
    5010:	4b03      	ldr	r3, [pc, #12]	; (5020 <prvTraceGetQueueType+0x1c>)
    5012:	4798      	blx	r3
    5014:	0003      	movs	r3, r0
}
    5016:	0018      	movs	r0, r3
    5018:	46bd      	mov	sp, r7
    501a:	b002      	add	sp, #8
    501c:	bd80      	pop	{r7, pc}
    501e:	46c0      	nop			; (mov r8, r8)
    5020:	000087d5 	.word	0x000087d5

00005024 <prvTraceGetTaskNumberLow16>:

/* Tasks */
uint16_t prvTraceGetTaskNumberLow16(void* handle)
{
    5024:	b580      	push	{r7, lr}
    5026:	b082      	sub	sp, #8
    5028:	af00      	add	r7, sp, #0
    502a:	6078      	str	r0, [r7, #4]
	return TRACE_GET_LOW16(uxTaskGetTaskNumber(handle));
    502c:	687b      	ldr	r3, [r7, #4]
    502e:	0018      	movs	r0, r3
    5030:	4b03      	ldr	r3, [pc, #12]	; (5040 <prvTraceGetTaskNumberLow16+0x1c>)
    5032:	4798      	blx	r3
    5034:	0003      	movs	r3, r0
    5036:	b29b      	uxth	r3, r3
}
    5038:	0018      	movs	r0, r3
    503a:	46bd      	mov	sp, r7
    503c:	b002      	add	sp, #8
    503e:	bd80      	pop	{r7, pc}
    5040:	00009b05 	.word	0x00009b05

00005044 <prvTraceGetTaskNumberHigh16>:

uint16_t prvTraceGetTaskNumberHigh16(void* handle)
{
    5044:	b580      	push	{r7, lr}
    5046:	b082      	sub	sp, #8
    5048:	af00      	add	r7, sp, #0
    504a:	6078      	str	r0, [r7, #4]
	return TRACE_GET_HIGH16(uxTaskGetTaskNumber(handle));
    504c:	687b      	ldr	r3, [r7, #4]
    504e:	0018      	movs	r0, r3
    5050:	4b04      	ldr	r3, [pc, #16]	; (5064 <prvTraceGetTaskNumberHigh16+0x20>)
    5052:	4798      	blx	r3
    5054:	0003      	movs	r3, r0
    5056:	0c1b      	lsrs	r3, r3, #16
    5058:	b29b      	uxth	r3, r3
}
    505a:	0018      	movs	r0, r3
    505c:	46bd      	mov	sp, r7
    505e:	b002      	add	sp, #8
    5060:	bd80      	pop	{r7, pc}
    5062:	46c0      	nop			; (mov r8, r8)
    5064:	00009b05 	.word	0x00009b05

00005068 <prvTraceSetTaskNumberLow16>:

void prvTraceSetTaskNumberLow16(void* handle, uint16_t value)
{
    5068:	b580      	push	{r7, lr}
    506a:	b082      	sub	sp, #8
    506c:	af00      	add	r7, sp, #0
    506e:	6078      	str	r0, [r7, #4]
    5070:	000a      	movs	r2, r1
    5072:	1cbb      	adds	r3, r7, #2
    5074:	801a      	strh	r2, [r3, #0]
	vTaskSetTaskNumber(handle, TRACE_SET_LOW16(uxTaskGetTaskNumber(handle), value));
    5076:	687b      	ldr	r3, [r7, #4]
    5078:	0018      	movs	r0, r3
    507a:	4b08      	ldr	r3, [pc, #32]	; (509c <prvTraceSetTaskNumberLow16+0x34>)
    507c:	4798      	blx	r3
    507e:	0003      	movs	r3, r0
    5080:	0c1b      	lsrs	r3, r3, #16
    5082:	041a      	lsls	r2, r3, #16
    5084:	1cbb      	adds	r3, r7, #2
    5086:	881b      	ldrh	r3, [r3, #0]
    5088:	431a      	orrs	r2, r3
    508a:	687b      	ldr	r3, [r7, #4]
    508c:	0011      	movs	r1, r2
    508e:	0018      	movs	r0, r3
    5090:	4b03      	ldr	r3, [pc, #12]	; (50a0 <prvTraceSetTaskNumberLow16+0x38>)
    5092:	4798      	blx	r3
}
    5094:	46c0      	nop			; (mov r8, r8)
    5096:	46bd      	mov	sp, r7
    5098:	b002      	add	sp, #8
    509a:	bd80      	pop	{r7, pc}
    509c:	00009b05 	.word	0x00009b05
    50a0:	00009b2d 	.word	0x00009b2d

000050a4 <prvTraceSetTaskNumberHigh16>:

void prvTraceSetTaskNumberHigh16(void* handle, uint16_t value)
{
    50a4:	b580      	push	{r7, lr}
    50a6:	b082      	sub	sp, #8
    50a8:	af00      	add	r7, sp, #0
    50aa:	6078      	str	r0, [r7, #4]
    50ac:	000a      	movs	r2, r1
    50ae:	1cbb      	adds	r3, r7, #2
    50b0:	801a      	strh	r2, [r3, #0]
	vTaskSetTaskNumber(handle, TRACE_SET_HIGH16(uxTaskGetTaskNumber(handle), value));
    50b2:	687b      	ldr	r3, [r7, #4]
    50b4:	0018      	movs	r0, r3
    50b6:	4b09      	ldr	r3, [pc, #36]	; (50dc <prvTraceSetTaskNumberHigh16+0x38>)
    50b8:	4798      	blx	r3
    50ba:	0003      	movs	r3, r0
    50bc:	041b      	lsls	r3, r3, #16
    50be:	0c1a      	lsrs	r2, r3, #16
    50c0:	1cbb      	adds	r3, r7, #2
    50c2:	881b      	ldrh	r3, [r3, #0]
    50c4:	041b      	lsls	r3, r3, #16
    50c6:	431a      	orrs	r2, r3
    50c8:	687b      	ldr	r3, [r7, #4]
    50ca:	0011      	movs	r1, r2
    50cc:	0018      	movs	r0, r3
    50ce:	4b04      	ldr	r3, [pc, #16]	; (50e0 <prvTraceSetTaskNumberHigh16+0x3c>)
    50d0:	4798      	blx	r3
}
    50d2:	46c0      	nop			; (mov r8, r8)
    50d4:	46bd      	mov	sp, r7
    50d6:	b002      	add	sp, #8
    50d8:	bd80      	pop	{r7, pc}
    50da:	46c0      	nop			; (mov r8, r8)
    50dc:	00009b05 	.word	0x00009b05
    50e0:	00009b2d 	.word	0x00009b2d

000050e4 <prvTraceGetQueueNumberLow16>:

uint16_t prvTraceGetQueueNumberLow16(void* handle)
{
    50e4:	b580      	push	{r7, lr}
    50e6:	b082      	sub	sp, #8
    50e8:	af00      	add	r7, sp, #0
    50ea:	6078      	str	r0, [r7, #4]
	return TRACE_GET_LOW16(prvTraceGetQueueNumber(handle));
    50ec:	687b      	ldr	r3, [r7, #4]
    50ee:	0018      	movs	r0, r3
    50f0:	4b03      	ldr	r3, [pc, #12]	; (5100 <prvTraceGetQueueNumberLow16+0x1c>)
    50f2:	4798      	blx	r3
    50f4:	0003      	movs	r3, r0
    50f6:	b29b      	uxth	r3, r3
}
    50f8:	0018      	movs	r0, r3
    50fa:	46bd      	mov	sp, r7
    50fc:	b002      	add	sp, #8
    50fe:	bd80      	pop	{r7, pc}
    5100:	00004fe5 	.word	0x00004fe5

00005104 <prvTraceGetQueueNumberHigh16>:

uint16_t prvTraceGetQueueNumberHigh16(void* handle)
{
    5104:	b580      	push	{r7, lr}
    5106:	b082      	sub	sp, #8
    5108:	af00      	add	r7, sp, #0
    510a:	6078      	str	r0, [r7, #4]
	return TRACE_GET_HIGH16(prvTraceGetQueueNumber(handle));
    510c:	687b      	ldr	r3, [r7, #4]
    510e:	0018      	movs	r0, r3
    5110:	4b04      	ldr	r3, [pc, #16]	; (5124 <prvTraceGetQueueNumberHigh16+0x20>)
    5112:	4798      	blx	r3
    5114:	0003      	movs	r3, r0
    5116:	0c1b      	lsrs	r3, r3, #16
    5118:	b29b      	uxth	r3, r3
}
    511a:	0018      	movs	r0, r3
    511c:	46bd      	mov	sp, r7
    511e:	b002      	add	sp, #8
    5120:	bd80      	pop	{r7, pc}
    5122:	46c0      	nop			; (mov r8, r8)
    5124:	00004fe5 	.word	0x00004fe5

00005128 <prvTraceSetQueueNumberLow16>:

void prvTraceSetQueueNumberLow16(void* handle, uint16_t value)
{
    5128:	b580      	push	{r7, lr}
    512a:	b082      	sub	sp, #8
    512c:	af00      	add	r7, sp, #0
    512e:	6078      	str	r0, [r7, #4]
    5130:	000a      	movs	r2, r1
    5132:	1cbb      	adds	r3, r7, #2
    5134:	801a      	strh	r2, [r3, #0]
	vQueueSetQueueNumber(handle, TRACE_SET_LOW16(prvTraceGetQueueNumber(handle), value));
    5136:	687b      	ldr	r3, [r7, #4]
    5138:	0018      	movs	r0, r3
    513a:	4b08      	ldr	r3, [pc, #32]	; (515c <prvTraceSetQueueNumberLow16+0x34>)
    513c:	4798      	blx	r3
    513e:	0003      	movs	r3, r0
    5140:	0c1b      	lsrs	r3, r3, #16
    5142:	041a      	lsls	r2, r3, #16
    5144:	1cbb      	adds	r3, r7, #2
    5146:	881b      	ldrh	r3, [r3, #0]
    5148:	431a      	orrs	r2, r3
    514a:	687b      	ldr	r3, [r7, #4]
    514c:	0011      	movs	r1, r2
    514e:	0018      	movs	r0, r3
    5150:	4b03      	ldr	r3, [pc, #12]	; (5160 <prvTraceSetQueueNumberLow16+0x38>)
    5152:	4798      	blx	r3
}
    5154:	46c0      	nop			; (mov r8, r8)
    5156:	46bd      	mov	sp, r7
    5158:	b002      	add	sp, #8
    515a:	bd80      	pop	{r7, pc}
    515c:	00004fe5 	.word	0x00004fe5
    5160:	000087bd 	.word	0x000087bd

00005164 <prvTraceSetQueueNumberHigh16>:

void prvTraceSetQueueNumberHigh16(void* handle, uint16_t value)
{
    5164:	b580      	push	{r7, lr}
    5166:	b082      	sub	sp, #8
    5168:	af00      	add	r7, sp, #0
    516a:	6078      	str	r0, [r7, #4]
    516c:	000a      	movs	r2, r1
    516e:	1cbb      	adds	r3, r7, #2
    5170:	801a      	strh	r2, [r3, #0]
	vQueueSetQueueNumber(handle, TRACE_SET_HIGH16(prvTraceGetQueueNumber(handle), value));
    5172:	687b      	ldr	r3, [r7, #4]
    5174:	0018      	movs	r0, r3
    5176:	4b09      	ldr	r3, [pc, #36]	; (519c <prvTraceSetQueueNumberHigh16+0x38>)
    5178:	4798      	blx	r3
    517a:	0003      	movs	r3, r0
    517c:	041b      	lsls	r3, r3, #16
    517e:	0c1a      	lsrs	r2, r3, #16
    5180:	1cbb      	adds	r3, r7, #2
    5182:	881b      	ldrh	r3, [r3, #0]
    5184:	041b      	lsls	r3, r3, #16
    5186:	431a      	orrs	r2, r3
    5188:	687b      	ldr	r3, [r7, #4]
    518a:	0011      	movs	r1, r2
    518c:	0018      	movs	r0, r3
    518e:	4b04      	ldr	r3, [pc, #16]	; (51a0 <prvTraceSetQueueNumberHigh16+0x3c>)
    5190:	4798      	blx	r3
}
    5192:	46c0      	nop			; (mov r8, r8)
    5194:	46bd      	mov	sp, r7
    5196:	b002      	add	sp, #8
    5198:	bd80      	pop	{r7, pc}
    519a:	46c0      	nop			; (mov r8, r8)
    519c:	00004fe5 	.word	0x00004fe5
    51a0:	000087bd 	.word	0x000087bd

000051a4 <prvAddTaskToStackMonitor>:
TaskStackMonitorEntry_t tasksInStackMonitor[TRC_CFG_STACK_MONITOR_MAX_TASKS] = { NULL };

int tasksNotIncluded = 0;

void prvAddTaskToStackMonitor(void* task)
{
    51a4:	b580      	push	{r7, lr}
    51a6:	b084      	sub	sp, #16
    51a8:	af00      	add	r7, sp, #0
    51aa:	6078      	str	r0, [r7, #4]
	int foundEmptySlot = 0;
    51ac:	2300      	movs	r3, #0
    51ae:	60fb      	str	r3, [r7, #12]

	// find an empty slot
	for (int i = 0; i < TRC_CFG_STACK_MONITOR_MAX_TASKS; i++)
    51b0:	2300      	movs	r3, #0
    51b2:	60bb      	str	r3, [r7, #8]
    51b4:	e018      	b.n	51e8 <prvAddTaskToStackMonitor+0x44>
	{
		if (tasksInStackMonitor[i].tcb == NULL)
    51b6:	4b14      	ldr	r3, [pc, #80]	; (5208 <prvAddTaskToStackMonitor+0x64>)
    51b8:	68ba      	ldr	r2, [r7, #8]
    51ba:	00d2      	lsls	r2, r2, #3
    51bc:	58d3      	ldr	r3, [r2, r3]
    51be:	2b00      	cmp	r3, #0
    51c0:	d10f      	bne.n	51e2 <prvAddTaskToStackMonitor+0x3e>
		{
			tasksInStackMonitor[i].tcb = task;
    51c2:	4b11      	ldr	r3, [pc, #68]	; (5208 <prvAddTaskToStackMonitor+0x64>)
    51c4:	68ba      	ldr	r2, [r7, #8]
    51c6:	00d2      	lsls	r2, r2, #3
    51c8:	6879      	ldr	r1, [r7, #4]
    51ca:	50d1      	str	r1, [r2, r3]
			tasksInStackMonitor[i].uiPreviousLowMark = 0xFFFFFFFF;
    51cc:	4a0e      	ldr	r2, [pc, #56]	; (5208 <prvAddTaskToStackMonitor+0x64>)
    51ce:	68bb      	ldr	r3, [r7, #8]
    51d0:	00db      	lsls	r3, r3, #3
    51d2:	18d3      	adds	r3, r2, r3
    51d4:	3304      	adds	r3, #4
    51d6:	2201      	movs	r2, #1
    51d8:	4252      	negs	r2, r2
    51da:	601a      	str	r2, [r3, #0]
			foundEmptySlot = 1;
    51dc:	2301      	movs	r3, #1
    51de:	60fb      	str	r3, [r7, #12]
			break;
    51e0:	e005      	b.n	51ee <prvAddTaskToStackMonitor+0x4a>
	for (int i = 0; i < TRC_CFG_STACK_MONITOR_MAX_TASKS; i++)
    51e2:	68bb      	ldr	r3, [r7, #8]
    51e4:	3301      	adds	r3, #1
    51e6:	60bb      	str	r3, [r7, #8]
    51e8:	68bb      	ldr	r3, [r7, #8]
    51ea:	2b09      	cmp	r3, #9
    51ec:	dde3      	ble.n	51b6 <prvAddTaskToStackMonitor+0x12>
		}
	}

	if (foundEmptySlot == 0)
    51ee:	68fb      	ldr	r3, [r7, #12]
    51f0:	2b00      	cmp	r3, #0
    51f2:	d104      	bne.n	51fe <prvAddTaskToStackMonitor+0x5a>
	{
		tasksNotIncluded++;
    51f4:	4b05      	ldr	r3, [pc, #20]	; (520c <prvAddTaskToStackMonitor+0x68>)
    51f6:	681b      	ldr	r3, [r3, #0]
    51f8:	1c5a      	adds	r2, r3, #1
    51fa:	4b04      	ldr	r3, [pc, #16]	; (520c <prvAddTaskToStackMonitor+0x68>)
    51fc:	601a      	str	r2, [r3, #0]
	}
}
    51fe:	46c0      	nop			; (mov r8, r8)
    5200:	46bd      	mov	sp, r7
    5202:	b004      	add	sp, #16
    5204:	bd80      	pop	{r7, pc}
    5206:	46c0      	nop			; (mov r8, r8)
    5208:	20000b44 	.word	0x20000b44
    520c:	20000b94 	.word	0x20000b94

00005210 <prvReportStackUsage>:
		}
	}
}

void prvReportStackUsage()
{
    5210:	b590      	push	{r4, r7, lr}
    5212:	b085      	sub	sp, #20
    5214:	af00      	add	r7, sp, #0
	static int i = 0;	/* Static index used to loop over the monitored tasks */
	int count = 0;		/* The number of generated reports */
    5216:	2300      	movs	r3, #0
    5218:	60fb      	str	r3, [r7, #12]
	int initial = i;	/* Used to make sure we break if we are back at the inital value */
    521a:	4b2b      	ldr	r3, [pc, #172]	; (52c8 <prvReportStackUsage+0xb8>)
    521c:	681b      	ldr	r3, [r3, #0]
    521e:	60bb      	str	r3, [r7, #8]
	
	do
	{
		/* Check the current spot */
		if (tasksInStackMonitor[i].tcb != NULL)
    5220:	4b29      	ldr	r3, [pc, #164]	; (52c8 <prvReportStackUsage+0xb8>)
    5222:	681a      	ldr	r2, [r3, #0]
    5224:	4b29      	ldr	r3, [pc, #164]	; (52cc <prvReportStackUsage+0xbc>)
    5226:	00d2      	lsls	r2, r2, #3
    5228:	58d3      	ldr	r3, [r2, r3]
    522a:	2b00      	cmp	r3, #0
    522c:	d035      	beq.n	529a <prvReportStackUsage+0x8a>
		{
			/* Get the amount of unused stack */
			uint32_t unusedStackSpace = uxTaskGetStackHighWaterMark((TaskType)tasksInStackMonitor[i].tcb);
    522e:	4b26      	ldr	r3, [pc, #152]	; (52c8 <prvReportStackUsage+0xb8>)
    5230:	681a      	ldr	r2, [r3, #0]
    5232:	4b26      	ldr	r3, [pc, #152]	; (52cc <prvReportStackUsage+0xbc>)
    5234:	00d2      	lsls	r2, r2, #3
    5236:	58d3      	ldr	r3, [r2, r3]
    5238:	0018      	movs	r0, r3
    523a:	4b25      	ldr	r3, [pc, #148]	; (52d0 <prvReportStackUsage+0xc0>)
    523c:	4798      	blx	r3
    523e:	0003      	movs	r3, r0
    5240:	607b      	str	r3, [r7, #4]

			/* Store for later use */
			if (tasksInStackMonitor[i].uiPreviousLowMark > unusedStackSpace)
    5242:	4b21      	ldr	r3, [pc, #132]	; (52c8 <prvReportStackUsage+0xb8>)
    5244:	681b      	ldr	r3, [r3, #0]
    5246:	4a21      	ldr	r2, [pc, #132]	; (52cc <prvReportStackUsage+0xbc>)
    5248:	00db      	lsls	r3, r3, #3
    524a:	18d3      	adds	r3, r2, r3
    524c:	3304      	adds	r3, #4
    524e:	681a      	ldr	r2, [r3, #0]
    5250:	687b      	ldr	r3, [r7, #4]
    5252:	429a      	cmp	r2, r3
    5254:	d907      	bls.n	5266 <prvReportStackUsage+0x56>
				tasksInStackMonitor[i].uiPreviousLowMark = unusedStackSpace;
    5256:	4b1c      	ldr	r3, [pc, #112]	; (52c8 <prvReportStackUsage+0xb8>)
    5258:	681b      	ldr	r3, [r3, #0]
    525a:	4a1c      	ldr	r2, [pc, #112]	; (52cc <prvReportStackUsage+0xbc>)
    525c:	00db      	lsls	r3, r3, #3
    525e:	18d3      	adds	r3, r2, r3
    5260:	3304      	adds	r3, #4
    5262:	687a      	ldr	r2, [r7, #4]
    5264:	601a      	str	r2, [r3, #0]

#if TRC_CFG_RECORDER_MODE == TRC_RECORDER_MODE_SNAPSHOT
			prvTraceStoreKernelCallWithParam(TRACE_UNUSED_STACK, TRACE_CLASS_TASK, TRACE_GET_TASK_NUMBER(tasksInStackMonitor[i].tcb), tasksInStackMonitor[i].uiPreviousLowMark);
    5266:	4b18      	ldr	r3, [pc, #96]	; (52c8 <prvReportStackUsage+0xb8>)
    5268:	681a      	ldr	r2, [r3, #0]
    526a:	4b18      	ldr	r3, [pc, #96]	; (52cc <prvReportStackUsage+0xbc>)
    526c:	00d2      	lsls	r2, r2, #3
    526e:	58d3      	ldr	r3, [r2, r3]
    5270:	0018      	movs	r0, r3
    5272:	4b18      	ldr	r3, [pc, #96]	; (52d4 <prvReportStackUsage+0xc4>)
    5274:	4798      	blx	r3
    5276:	0003      	movs	r3, r0
    5278:	b2db      	uxtb	r3, r3
    527a:	0019      	movs	r1, r3
    527c:	4b12      	ldr	r3, [pc, #72]	; (52c8 <prvReportStackUsage+0xb8>)
    527e:	681b      	ldr	r3, [r3, #0]
    5280:	4a12      	ldr	r2, [pc, #72]	; (52cc <prvReportStackUsage+0xbc>)
    5282:	00db      	lsls	r3, r3, #3
    5284:	18d3      	adds	r3, r2, r3
    5286:	3304      	adds	r3, #4
    5288:	681b      	ldr	r3, [r3, #0]
    528a:	000a      	movs	r2, r1
    528c:	2103      	movs	r1, #3
    528e:	20ea      	movs	r0, #234	; 0xea
    5290:	4c11      	ldr	r4, [pc, #68]	; (52d8 <prvReportStackUsage+0xc8>)
    5292:	47a0      	blx	r4
#else /* TRC_CFG_RECORDER_MODE == TRC_RECORDER_MODE_SNAPSHOT */
			prvTraceStoreEvent2(PSF_EVENT_UNUSED_STACK, (uint32_t)tasksInStackMonitor[i].tcb, tasksInStackMonitor[i].uiPreviousLowMark);
#endif /* TRC_CFG_RECORDER_MODE == TRC_RECORDER_MODE_SNAPSHOT */

			count++;
    5294:	68fb      	ldr	r3, [r7, #12]
    5296:	3301      	adds	r3, #1
    5298:	60fb      	str	r3, [r7, #12]
		}

		i = (i + 1) % TRC_CFG_STACK_MONITOR_MAX_TASKS; // Move i beyond this task
    529a:	4b0b      	ldr	r3, [pc, #44]	; (52c8 <prvReportStackUsage+0xb8>)
    529c:	681b      	ldr	r3, [r3, #0]
    529e:	1c5a      	adds	r2, r3, #1
    52a0:	4b0e      	ldr	r3, [pc, #56]	; (52dc <prvReportStackUsage+0xcc>)
    52a2:	210a      	movs	r1, #10
    52a4:	0010      	movs	r0, r2
    52a6:	4798      	blx	r3
    52a8:	000b      	movs	r3, r1
    52aa:	001a      	movs	r2, r3
    52ac:	4b06      	ldr	r3, [pc, #24]	; (52c8 <prvReportStackUsage+0xb8>)
    52ae:	601a      	str	r2, [r3, #0]
	} while (count < TRC_CFG_STACK_MONITOR_MAX_REPORTS && i != initial);
    52b0:	68fb      	ldr	r3, [r7, #12]
    52b2:	2b00      	cmp	r3, #0
    52b4:	dc04      	bgt.n	52c0 <prvReportStackUsage+0xb0>
    52b6:	4b04      	ldr	r3, [pc, #16]	; (52c8 <prvReportStackUsage+0xb8>)
    52b8:	681a      	ldr	r2, [r3, #0]
    52ba:	68bb      	ldr	r3, [r7, #8]
    52bc:	429a      	cmp	r2, r3
    52be:	d1af      	bne.n	5220 <prvReportStackUsage+0x10>
}
    52c0:	46c0      	nop			; (mov r8, r8)
    52c2:	46bd      	mov	sp, r7
    52c4:	b005      	add	sp, #20
    52c6:	bd90      	pop	{r4, r7, pc}
    52c8:	20000b98 	.word	0x20000b98
    52cc:	20000b44 	.word	0x20000b44
    52d0:	00009ca5 	.word	0x00009ca5
    52d4:	00005025 	.word	0x00005025
    52d8:	00005b6d 	.word	0x00005b6d
    52dc:	0001fb21 	.word	0x0001fb21

000052e0 <prvTraceGetCurrentTaskHandle>:
#endif /* (TRC_CFG_INCLUDE_STREAM_BUFFER_EVENTS == 1 && TRC_CFG_FREERTOS_VERSION >= TRC_FREERTOS_VERSION_10_0_0) */

#endif /* (TRC_CFG_SCHEDULING_ONLY == 0) */

void* prvTraceGetCurrentTaskHandle()
{
    52e0:	b580      	push	{r7, lr}
    52e2:	af00      	add	r7, sp, #0
	return xTaskGetCurrentTaskHandle();
    52e4:	4b02      	ldr	r3, [pc, #8]	; (52f0 <prvTraceGetCurrentTaskHandle+0x10>)
    52e6:	4798      	blx	r3
    52e8:	0003      	movs	r3, r0
}
    52ea:	0018      	movs	r0, r3
    52ec:	46bd      	mov	sp, r7
    52ee:	bd80      	pop	{r7, pc}
    52f0:	00009d51 	.word	0x00009d51

000052f4 <vTraceEnable>:
*
*
* Note: See other implementation of vTraceEnable in trcStreamingRecorder.c
******************************************************************************/
void vTraceEnable(int startOption)
{
    52f4:	b590      	push	{r4, r7, lr}
    52f6:	b085      	sub	sp, #20
    52f8:	af02      	add	r7, sp, #8
    52fa:	6078      	str	r0, [r7, #4]
	prvTraceInitTraceData();
    52fc:	4b14      	ldr	r3, [pc, #80]	; (5350 <vTraceEnable+0x5c>)
    52fe:	4798      	blx	r3

	if (startOption == TRC_START)
    5300:	687b      	ldr	r3, [r7, #4]
    5302:	2b01      	cmp	r3, #1
    5304:	d102      	bne.n	530c <vTraceEnable+0x18>
	{
		vTraceStart();
    5306:	4b13      	ldr	r3, [pc, #76]	; (5354 <vTraceEnable+0x60>)
    5308:	4798      	blx	r3
    530a:	e00e      	b.n	532a <vTraceEnable+0x36>
	}
	else if (startOption == TRC_START_AWAIT_HOST)
    530c:	687b      	ldr	r3, [r7, #4]
    530e:	2b02      	cmp	r3, #2
    5310:	d104      	bne.n	531c <vTraceEnable+0x28>
	{
		prvTraceError("vTraceEnable(TRC_START_AWAIT_HOST) not allowed in Snapshot mode");
    5312:	4b11      	ldr	r3, [pc, #68]	; (5358 <vTraceEnable+0x64>)
    5314:	0018      	movs	r0, r3
    5316:	4b11      	ldr	r3, [pc, #68]	; (535c <vTraceEnable+0x68>)
    5318:	4798      	blx	r3
    531a:	e006      	b.n	532a <vTraceEnable+0x36>
	}
	else if (startOption != TRC_INIT)
    531c:	687b      	ldr	r3, [r7, #4]
    531e:	2b00      	cmp	r3, #0
    5320:	d003      	beq.n	532a <vTraceEnable+0x36>
	{
		prvTraceError("Unexpected argument to vTraceEnable (snapshot mode)");
    5322:	4b0f      	ldr	r3, [pc, #60]	; (5360 <vTraceEnable+0x6c>)
    5324:	0018      	movs	r0, r3
    5326:	4b0d      	ldr	r3, [pc, #52]	; (535c <vTraceEnable+0x68>)
    5328:	4798      	blx	r3
	}

#if defined(TRC_CFG_ENABLE_STACK_MONITOR) && (TRC_CFG_ENABLE_STACK_MONITOR == 1) && (TRC_CFG_SCHEDULING_ONLY == 0)
	/* Creates the TzCtrl task - reports unsed stack */
	if (HandleTzCtrl == NULL)
    532a:	4b0e      	ldr	r3, [pc, #56]	; (5364 <vTraceEnable+0x70>)
    532c:	681b      	ldr	r3, [r3, #0]
    532e:	2b00      	cmp	r3, #0
    5330:	d109      	bne.n	5346 <vTraceEnable+0x52>
	{
#if defined(configSUPPORT_STATIC_ALLOCATION) && (configSUPPORT_STATIC_ALLOCATION == 1)
		HandleTzCtrl = xTaskCreateStatic(TzCtrl, STRING_CAST("TzCtrl"), TRC_CFG_CTRL_TASK_STACK_SIZE, NULL, TRC_CFG_CTRL_TASK_PRIORITY, stackTzCtrl, &tcbTzCtrl);
#else /* defined(configSUPPORT_STATIC_ALLOCATION) && (configSUPPORT_STATIC_ALLOCATION == 1) */
		xTaskCreate(TzCtrl, STRING_CAST("TzCtrl"), TRC_CFG_CTRL_TASK_STACK_SIZE, NULL, TRC_CFG_CTRL_TASK_PRIORITY, &HandleTzCtrl);
    5332:	490d      	ldr	r1, [pc, #52]	; (5368 <vTraceEnable+0x74>)
    5334:	480d      	ldr	r0, [pc, #52]	; (536c <vTraceEnable+0x78>)
    5336:	4b0b      	ldr	r3, [pc, #44]	; (5364 <vTraceEnable+0x70>)
    5338:	9301      	str	r3, [sp, #4]
    533a:	2304      	movs	r3, #4
    533c:	9300      	str	r3, [sp, #0]
    533e:	2300      	movs	r3, #0
    5340:	22c8      	movs	r2, #200	; 0xc8
    5342:	4c0b      	ldr	r4, [pc, #44]	; (5370 <vTraceEnable+0x7c>)
    5344:	47a0      	blx	r4
#endif /* defined(configSUPPORT_STATIC_ALLOCATION) && (configSUPPORT_STATIC_ALLOCATION == 1) */
	}

#endif /* defined(TRC_CFG_ENABLE_STACK_MONITOR) && (TRC_CFG_ENABLE_STACK_MONITOR == 1) && (TRC_CFG_SCHEDULING_ONLY == 0) */
}
    5346:	46c0      	nop			; (mov r8, r8)
    5348:	46bd      	mov	sp, r7
    534a:	b003      	add	sp, #12
    534c:	bd90      	pop	{r4, r7, pc}
    534e:	46c0      	nop			; (mov r8, r8)
    5350:	00006239 	.word	0x00006239
    5354:	00005791 	.word	0x00005791
    5358:	00023958 	.word	0x00023958
    535c:	000068e1 	.word	0x000068e1
    5360:	00023998 	.word	0x00023998
    5364:	20000b40 	.word	0x20000b40
    5368:	000239cc 	.word	0x000239cc
    536c:	00005375 	.word	0x00005375
    5370:	00008ca9 	.word	0x00008ca9

00005374 <TzCtrl>:
* interface (assuming TRC_STREAM_PORT_USE_INTERNAL_BUFFER == 1) and for
* receiving commands from Tracealyzer. Also does some diagnostics.
******************************************************************************/
#if defined(TRC_CFG_ENABLE_STACK_MONITOR) && (TRC_CFG_ENABLE_STACK_MONITOR == 1) && (TRC_CFG_SCHEDULING_ONLY == 0)
static portTASK_FUNCTION(TzCtrl, pvParameters)
{
    5374:	b580      	push	{r7, lr}
    5376:	b082      	sub	sp, #8
    5378:	af00      	add	r7, sp, #0
    537a:	6078      	str	r0, [r7, #4]
	(void)pvParameters;

	while (1)
	{
		if (xTraceIsRecordingEnabled())
    537c:	4b04      	ldr	r3, [pc, #16]	; (5390 <TzCtrl+0x1c>)
    537e:	4798      	blx	r3
    5380:	1e03      	subs	r3, r0, #0
    5382:	d001      	beq.n	5388 <TzCtrl+0x14>
		{
			prvReportStackUsage();
    5384:	4b03      	ldr	r3, [pc, #12]	; (5394 <TzCtrl+0x20>)
    5386:	4798      	blx	r3
		}

		vTaskDelay(TRC_CFG_CTRL_TASK_DELAY);
    5388:	2004      	movs	r0, #4
    538a:	4b03      	ldr	r3, [pc, #12]	; (5398 <TzCtrl+0x24>)
    538c:	4798      	blx	r3
		if (xTraceIsRecordingEnabled())
    538e:	e7f5      	b.n	537c <TzCtrl+0x8>
    5390:	000057d5 	.word	0x000057d5
    5394:	00005211 	.word	0x00005211
    5398:	00009045 	.word	0x00009045

0000539c <vTraceInitObjectPropertyTable>:
}
#endif

/* Initialization of the object property table */
void vTraceInitObjectPropertyTable()
{
    539c:	b580      	push	{r7, lr}
    539e:	af00      	add	r7, sp, #0
	RecorderDataPtr->ObjectPropertyTable.NumberOfObjectClasses = TRACE_NCLASSES;
    53a0:	4b60      	ldr	r3, [pc, #384]	; (5524 <vTraceInitObjectPropertyTable+0x188>)
    53a2:	681b      	ldr	r3, [r3, #0]
    53a4:	2209      	movs	r2, #9
    53a6:	65da      	str	r2, [r3, #92]	; 0x5c
	RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[0] = TRC_CFG_NQUEUE;
    53a8:	4b5e      	ldr	r3, [pc, #376]	; (5524 <vTraceInitObjectPropertyTable+0x188>)
    53aa:	681b      	ldr	r3, [r3, #0]
    53ac:	2264      	movs	r2, #100	; 0x64
    53ae:	210a      	movs	r1, #10
    53b0:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[1] = TRC_CFG_NSEMAPHORE;
    53b2:	4b5c      	ldr	r3, [pc, #368]	; (5524 <vTraceInitObjectPropertyTable+0x188>)
    53b4:	681b      	ldr	r3, [r3, #0]
    53b6:	2265      	movs	r2, #101	; 0x65
    53b8:	210a      	movs	r1, #10
    53ba:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[2] = TRC_CFG_NMUTEX;
    53bc:	4b59      	ldr	r3, [pc, #356]	; (5524 <vTraceInitObjectPropertyTable+0x188>)
    53be:	681b      	ldr	r3, [r3, #0]
    53c0:	2266      	movs	r2, #102	; 0x66
    53c2:	210a      	movs	r1, #10
    53c4:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[3] = TRC_CFG_NTASK;
    53c6:	4b57      	ldr	r3, [pc, #348]	; (5524 <vTraceInitObjectPropertyTable+0x188>)
    53c8:	681b      	ldr	r3, [r3, #0]
    53ca:	2267      	movs	r2, #103	; 0x67
    53cc:	210f      	movs	r1, #15
    53ce:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[4] = TRC_CFG_NISR;
    53d0:	4b54      	ldr	r3, [pc, #336]	; (5524 <vTraceInitObjectPropertyTable+0x188>)
    53d2:	681b      	ldr	r3, [r3, #0]
    53d4:	2268      	movs	r2, #104	; 0x68
    53d6:	2105      	movs	r1, #5
    53d8:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[5] = TRC_CFG_NTIMER;
    53da:	4b52      	ldr	r3, [pc, #328]	; (5524 <vTraceInitObjectPropertyTable+0x188>)
    53dc:	681b      	ldr	r3, [r3, #0]
    53de:	2269      	movs	r2, #105	; 0x69
    53e0:	2105      	movs	r1, #5
    53e2:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[6] = TRC_CFG_NEVENTGROUP;
    53e4:	4b4f      	ldr	r3, [pc, #316]	; (5524 <vTraceInitObjectPropertyTable+0x188>)
    53e6:	681b      	ldr	r3, [r3, #0]
    53e8:	226a      	movs	r2, #106	; 0x6a
    53ea:	2105      	movs	r1, #5
    53ec:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[7] = TRC_CFG_NSTREAMBUFFER;
    53ee:	4b4d      	ldr	r3, [pc, #308]	; (5524 <vTraceInitObjectPropertyTable+0x188>)
    53f0:	681b      	ldr	r3, [r3, #0]
    53f2:	226b      	movs	r2, #107	; 0x6b
    53f4:	2105      	movs	r1, #5
    53f6:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[8] = TRC_CFG_NMESSAGEBUFFER;
    53f8:	4b4a      	ldr	r3, [pc, #296]	; (5524 <vTraceInitObjectPropertyTable+0x188>)
    53fa:	681b      	ldr	r3, [r3, #0]
    53fc:	226c      	movs	r2, #108	; 0x6c
    53fe:	2105      	movs	r1, #5
    5400:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.NameLengthPerClass[0] = TRC_CFG_NAME_LEN_QUEUE;
    5402:	4b48      	ldr	r3, [pc, #288]	; (5524 <vTraceInitObjectPropertyTable+0x188>)
    5404:	681b      	ldr	r3, [r3, #0]
    5406:	2270      	movs	r2, #112	; 0x70
    5408:	210f      	movs	r1, #15
    540a:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.NameLengthPerClass[1] = TRC_CFG_NAME_LEN_SEMAPHORE;
    540c:	4b45      	ldr	r3, [pc, #276]	; (5524 <vTraceInitObjectPropertyTable+0x188>)
    540e:	681b      	ldr	r3, [r3, #0]
    5410:	2271      	movs	r2, #113	; 0x71
    5412:	210f      	movs	r1, #15
    5414:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.NameLengthPerClass[2] = TRC_CFG_NAME_LEN_MUTEX;
    5416:	4b43      	ldr	r3, [pc, #268]	; (5524 <vTraceInitObjectPropertyTable+0x188>)
    5418:	681b      	ldr	r3, [r3, #0]
    541a:	2272      	movs	r2, #114	; 0x72
    541c:	210f      	movs	r1, #15
    541e:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.NameLengthPerClass[3] = TRC_CFG_NAME_LEN_TASK;
    5420:	4b40      	ldr	r3, [pc, #256]	; (5524 <vTraceInitObjectPropertyTable+0x188>)
    5422:	681b      	ldr	r3, [r3, #0]
    5424:	2273      	movs	r2, #115	; 0x73
    5426:	210f      	movs	r1, #15
    5428:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.NameLengthPerClass[4] = TRC_CFG_NAME_LEN_ISR;
    542a:	4b3e      	ldr	r3, [pc, #248]	; (5524 <vTraceInitObjectPropertyTable+0x188>)
    542c:	681b      	ldr	r3, [r3, #0]
    542e:	2274      	movs	r2, #116	; 0x74
    5430:	210f      	movs	r1, #15
    5432:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.NameLengthPerClass[5] = TRC_CFG_NAME_LEN_TIMER;
    5434:	4b3b      	ldr	r3, [pc, #236]	; (5524 <vTraceInitObjectPropertyTable+0x188>)
    5436:	681b      	ldr	r3, [r3, #0]
    5438:	2275      	movs	r2, #117	; 0x75
    543a:	210f      	movs	r1, #15
    543c:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.NameLengthPerClass[6] = TRC_CFG_NAME_LEN_EVENTGROUP;
    543e:	4b39      	ldr	r3, [pc, #228]	; (5524 <vTraceInitObjectPropertyTable+0x188>)
    5440:	681b      	ldr	r3, [r3, #0]
    5442:	2276      	movs	r2, #118	; 0x76
    5444:	210f      	movs	r1, #15
    5446:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.NameLengthPerClass[7] = TRC_CFG_NAME_LEN_STREAMBUFFER;
    5448:	4b36      	ldr	r3, [pc, #216]	; (5524 <vTraceInitObjectPropertyTable+0x188>)
    544a:	681b      	ldr	r3, [r3, #0]
    544c:	2277      	movs	r2, #119	; 0x77
    544e:	210f      	movs	r1, #15
    5450:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.NameLengthPerClass[8] = TRC_CFG_NAME_LEN_MESSAGEBUFFER;
    5452:	4b34      	ldr	r3, [pc, #208]	; (5524 <vTraceInitObjectPropertyTable+0x188>)
    5454:	681b      	ldr	r3, [r3, #0]
    5456:	2278      	movs	r2, #120	; 0x78
    5458:	210f      	movs	r1, #15
    545a:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[0] = PropertyTableSizeQueue;
    545c:	4b31      	ldr	r3, [pc, #196]	; (5524 <vTraceInitObjectPropertyTable+0x188>)
    545e:	681b      	ldr	r3, [r3, #0]
    5460:	227c      	movs	r2, #124	; 0x7c
    5462:	2110      	movs	r1, #16
    5464:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[1] = PropertyTableSizeSemaphore;
    5466:	4b2f      	ldr	r3, [pc, #188]	; (5524 <vTraceInitObjectPropertyTable+0x188>)
    5468:	681b      	ldr	r3, [r3, #0]
    546a:	227d      	movs	r2, #125	; 0x7d
    546c:	2110      	movs	r1, #16
    546e:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[2] = PropertyTableSizeMutex;
    5470:	4b2c      	ldr	r3, [pc, #176]	; (5524 <vTraceInitObjectPropertyTable+0x188>)
    5472:	681b      	ldr	r3, [r3, #0]
    5474:	227e      	movs	r2, #126	; 0x7e
    5476:	2110      	movs	r1, #16
    5478:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[3] = PropertyTableSizeTask;
    547a:	4b2a      	ldr	r3, [pc, #168]	; (5524 <vTraceInitObjectPropertyTable+0x188>)
    547c:	681b      	ldr	r3, [r3, #0]
    547e:	227f      	movs	r2, #127	; 0x7f
    5480:	2113      	movs	r1, #19
    5482:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[4] = PropertyTableSizeISR;
    5484:	4b27      	ldr	r3, [pc, #156]	; (5524 <vTraceInitObjectPropertyTable+0x188>)
    5486:	681b      	ldr	r3, [r3, #0]
    5488:	2280      	movs	r2, #128	; 0x80
    548a:	2111      	movs	r1, #17
    548c:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[5] = PropertyTableSizeTimer;
    548e:	4b25      	ldr	r3, [pc, #148]	; (5524 <vTraceInitObjectPropertyTable+0x188>)
    5490:	681b      	ldr	r3, [r3, #0]
    5492:	2281      	movs	r2, #129	; 0x81
    5494:	2110      	movs	r1, #16
    5496:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[6] = PropertyTableSizeEventGroup;
    5498:	4b22      	ldr	r3, [pc, #136]	; (5524 <vTraceInitObjectPropertyTable+0x188>)
    549a:	681b      	ldr	r3, [r3, #0]
    549c:	2282      	movs	r2, #130	; 0x82
    549e:	2113      	movs	r1, #19
    54a0:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[7] = PropertyTableSizeStreamBuffer;
    54a2:	4b20      	ldr	r3, [pc, #128]	; (5524 <vTraceInitObjectPropertyTable+0x188>)
    54a4:	681b      	ldr	r3, [r3, #0]
    54a6:	2283      	movs	r2, #131	; 0x83
    54a8:	2113      	movs	r1, #19
    54aa:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[8] = PropertyTableSizeMessageBuffer;
    54ac:	4b1d      	ldr	r3, [pc, #116]	; (5524 <vTraceInitObjectPropertyTable+0x188>)
    54ae:	681b      	ldr	r3, [r3, #0]
    54b0:	2284      	movs	r2, #132	; 0x84
    54b2:	2113      	movs	r1, #19
    54b4:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[0] = StartIndexQueue;
    54b6:	4b1b      	ldr	r3, [pc, #108]	; (5524 <vTraceInitObjectPropertyTable+0x188>)
    54b8:	681b      	ldr	r3, [r3, #0]
    54ba:	2288      	movs	r2, #136	; 0x88
    54bc:	2100      	movs	r1, #0
    54be:	5299      	strh	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[1] = StartIndexSemaphore;
    54c0:	4b18      	ldr	r3, [pc, #96]	; (5524 <vTraceInitObjectPropertyTable+0x188>)
    54c2:	681b      	ldr	r3, [r3, #0]
    54c4:	228a      	movs	r2, #138	; 0x8a
    54c6:	21a0      	movs	r1, #160	; 0xa0
    54c8:	5299      	strh	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[2] = StartIndexMutex;
    54ca:	4b16      	ldr	r3, [pc, #88]	; (5524 <vTraceInitObjectPropertyTable+0x188>)
    54cc:	681b      	ldr	r3, [r3, #0]
    54ce:	228c      	movs	r2, #140	; 0x8c
    54d0:	21a0      	movs	r1, #160	; 0xa0
    54d2:	0049      	lsls	r1, r1, #1
    54d4:	5299      	strh	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[3] = StartIndexTask;
    54d6:	4b13      	ldr	r3, [pc, #76]	; (5524 <vTraceInitObjectPropertyTable+0x188>)
    54d8:	681b      	ldr	r3, [r3, #0]
    54da:	228e      	movs	r2, #142	; 0x8e
    54dc:	21f0      	movs	r1, #240	; 0xf0
    54de:	0049      	lsls	r1, r1, #1
    54e0:	5299      	strh	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[4] = StartIndexISR;
    54e2:	4b10      	ldr	r3, [pc, #64]	; (5524 <vTraceInitObjectPropertyTable+0x188>)
    54e4:	681b      	ldr	r3, [r3, #0]
    54e6:	2290      	movs	r2, #144	; 0x90
    54e8:	490f      	ldr	r1, [pc, #60]	; (5528 <vTraceInitObjectPropertyTable+0x18c>)
    54ea:	5299      	strh	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[5] = StartIndexTimer;
    54ec:	4b0d      	ldr	r3, [pc, #52]	; (5524 <vTraceInitObjectPropertyTable+0x188>)
    54ee:	681b      	ldr	r3, [r3, #0]
    54f0:	2292      	movs	r2, #146	; 0x92
    54f2:	490e      	ldr	r1, [pc, #56]	; (552c <vTraceInitObjectPropertyTable+0x190>)
    54f4:	5299      	strh	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[6] = StartIndexEventGroup;
    54f6:	4b0b      	ldr	r3, [pc, #44]	; (5524 <vTraceInitObjectPropertyTable+0x188>)
    54f8:	681b      	ldr	r3, [r3, #0]
    54fa:	2294      	movs	r2, #148	; 0x94
    54fc:	490c      	ldr	r1, [pc, #48]	; (5530 <vTraceInitObjectPropertyTable+0x194>)
    54fe:	5299      	strh	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[7] = StartIndexStreamBuffer;
    5500:	4b08      	ldr	r3, [pc, #32]	; (5524 <vTraceInitObjectPropertyTable+0x188>)
    5502:	681b      	ldr	r3, [r3, #0]
    5504:	2296      	movs	r2, #150	; 0x96
    5506:	490b      	ldr	r1, [pc, #44]	; (5534 <vTraceInitObjectPropertyTable+0x198>)
    5508:	5299      	strh	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[8] = StartIndexMessageBuffer;
    550a:	4b06      	ldr	r3, [pc, #24]	; (5524 <vTraceInitObjectPropertyTable+0x188>)
    550c:	681b      	ldr	r3, [r3, #0]
    550e:	2298      	movs	r2, #152	; 0x98
    5510:	218c      	movs	r1, #140	; 0x8c
    5512:	00c9      	lsls	r1, r1, #3
    5514:	5299      	strh	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.ObjectPropertyTableSizeInBytes = TRACE_OBJECT_TABLE_SIZE;
    5516:	4b03      	ldr	r3, [pc, #12]	; (5524 <vTraceInitObjectPropertyTable+0x188>)
    5518:	681b      	ldr	r3, [r3, #0]
    551a:	4a07      	ldr	r2, [pc, #28]	; (5538 <vTraceInitObjectPropertyTable+0x19c>)
    551c:	661a      	str	r2, [r3, #96]	; 0x60
}
    551e:	46c0      	nop			; (mov r8, r8)
    5520:	46bd      	mov	sp, r7
    5522:	bd80      	pop	{r7, pc}
    5524:	20000c58 	.word	0x20000c58
    5528:	000002fd 	.word	0x000002fd
    552c:	00000352 	.word	0x00000352
    5530:	000003a2 	.word	0x000003a2
    5534:	00000401 	.word	0x00000401
    5538:	000004bf 	.word	0x000004bf

0000553c <vTraceInitObjectHandleStack>:

/* Initialization of the handle mechanism, see e.g, prvTraceGetObjectHandle */
void vTraceInitObjectHandleStack()
{
    553c:	b580      	push	{r7, lr}
    553e:	af00      	add	r7, sp, #0
	objectHandleStacks.indexOfNextAvailableHandle[0] = objectHandleStacks.lowestIndexOfClass[0] = 0;
    5540:	4b2e      	ldr	r3, [pc, #184]	; (55fc <vTraceInitObjectHandleStack+0xc0>)
    5542:	2200      	movs	r2, #0
    5544:	825a      	strh	r2, [r3, #18]
    5546:	4b2d      	ldr	r3, [pc, #180]	; (55fc <vTraceInitObjectHandleStack+0xc0>)
    5548:	8a5a      	ldrh	r2, [r3, #18]
    554a:	4b2c      	ldr	r3, [pc, #176]	; (55fc <vTraceInitObjectHandleStack+0xc0>)
    554c:	801a      	strh	r2, [r3, #0]
	objectHandleStacks.indexOfNextAvailableHandle[1] = objectHandleStacks.lowestIndexOfClass[1] = (TRC_CFG_NQUEUE);
    554e:	4b2b      	ldr	r3, [pc, #172]	; (55fc <vTraceInitObjectHandleStack+0xc0>)
    5550:	220a      	movs	r2, #10
    5552:	829a      	strh	r2, [r3, #20]
    5554:	4b29      	ldr	r3, [pc, #164]	; (55fc <vTraceInitObjectHandleStack+0xc0>)
    5556:	8a9a      	ldrh	r2, [r3, #20]
    5558:	4b28      	ldr	r3, [pc, #160]	; (55fc <vTraceInitObjectHandleStack+0xc0>)
    555a:	805a      	strh	r2, [r3, #2]
	objectHandleStacks.indexOfNextAvailableHandle[2] = objectHandleStacks.lowestIndexOfClass[2] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE);
    555c:	4b27      	ldr	r3, [pc, #156]	; (55fc <vTraceInitObjectHandleStack+0xc0>)
    555e:	2214      	movs	r2, #20
    5560:	82da      	strh	r2, [r3, #22]
    5562:	4b26      	ldr	r3, [pc, #152]	; (55fc <vTraceInitObjectHandleStack+0xc0>)
    5564:	8ada      	ldrh	r2, [r3, #22]
    5566:	4b25      	ldr	r3, [pc, #148]	; (55fc <vTraceInitObjectHandleStack+0xc0>)
    5568:	809a      	strh	r2, [r3, #4]
	objectHandleStacks.indexOfNextAvailableHandle[3] = objectHandleStacks.lowestIndexOfClass[3] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX);
    556a:	4b24      	ldr	r3, [pc, #144]	; (55fc <vTraceInitObjectHandleStack+0xc0>)
    556c:	221e      	movs	r2, #30
    556e:	831a      	strh	r2, [r3, #24]
    5570:	4b22      	ldr	r3, [pc, #136]	; (55fc <vTraceInitObjectHandleStack+0xc0>)
    5572:	8b1a      	ldrh	r2, [r3, #24]
    5574:	4b21      	ldr	r3, [pc, #132]	; (55fc <vTraceInitObjectHandleStack+0xc0>)
    5576:	80da      	strh	r2, [r3, #6]
	objectHandleStacks.indexOfNextAvailableHandle[4] = objectHandleStacks.lowestIndexOfClass[4] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) + (TRC_CFG_NTASK);
    5578:	4b20      	ldr	r3, [pc, #128]	; (55fc <vTraceInitObjectHandleStack+0xc0>)
    557a:	222d      	movs	r2, #45	; 0x2d
    557c:	835a      	strh	r2, [r3, #26]
    557e:	4b1f      	ldr	r3, [pc, #124]	; (55fc <vTraceInitObjectHandleStack+0xc0>)
    5580:	8b5a      	ldrh	r2, [r3, #26]
    5582:	4b1e      	ldr	r3, [pc, #120]	; (55fc <vTraceInitObjectHandleStack+0xc0>)
    5584:	811a      	strh	r2, [r3, #8]
	objectHandleStacks.indexOfNextAvailableHandle[5] = objectHandleStacks.lowestIndexOfClass[5] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) + (TRC_CFG_NTASK) + (TRC_CFG_NISR);
    5586:	4b1d      	ldr	r3, [pc, #116]	; (55fc <vTraceInitObjectHandleStack+0xc0>)
    5588:	2232      	movs	r2, #50	; 0x32
    558a:	839a      	strh	r2, [r3, #28]
    558c:	4b1b      	ldr	r3, [pc, #108]	; (55fc <vTraceInitObjectHandleStack+0xc0>)
    558e:	8b9a      	ldrh	r2, [r3, #28]
    5590:	4b1a      	ldr	r3, [pc, #104]	; (55fc <vTraceInitObjectHandleStack+0xc0>)
    5592:	815a      	strh	r2, [r3, #10]
	objectHandleStacks.indexOfNextAvailableHandle[6] = objectHandleStacks.lowestIndexOfClass[6] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) + (TRC_CFG_NTASK) + (TRC_CFG_NISR) + (TRC_CFG_NTIMER);
    5594:	4b19      	ldr	r3, [pc, #100]	; (55fc <vTraceInitObjectHandleStack+0xc0>)
    5596:	2237      	movs	r2, #55	; 0x37
    5598:	83da      	strh	r2, [r3, #30]
    559a:	4b18      	ldr	r3, [pc, #96]	; (55fc <vTraceInitObjectHandleStack+0xc0>)
    559c:	8bda      	ldrh	r2, [r3, #30]
    559e:	4b17      	ldr	r3, [pc, #92]	; (55fc <vTraceInitObjectHandleStack+0xc0>)
    55a0:	819a      	strh	r2, [r3, #12]
	objectHandleStacks.indexOfNextAvailableHandle[7] = objectHandleStacks.lowestIndexOfClass[7] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) + (TRC_CFG_NTASK) + (TRC_CFG_NISR) + (TRC_CFG_NTIMER) + (TRC_CFG_NEVENTGROUP);
    55a2:	4b16      	ldr	r3, [pc, #88]	; (55fc <vTraceInitObjectHandleStack+0xc0>)
    55a4:	223c      	movs	r2, #60	; 0x3c
    55a6:	841a      	strh	r2, [r3, #32]
    55a8:	4b14      	ldr	r3, [pc, #80]	; (55fc <vTraceInitObjectHandleStack+0xc0>)
    55aa:	8c1a      	ldrh	r2, [r3, #32]
    55ac:	4b13      	ldr	r3, [pc, #76]	; (55fc <vTraceInitObjectHandleStack+0xc0>)
    55ae:	81da      	strh	r2, [r3, #14]
	objectHandleStacks.indexOfNextAvailableHandle[8] = objectHandleStacks.lowestIndexOfClass[8] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) + (TRC_CFG_NTASK) + (TRC_CFG_NISR) + (TRC_CFG_NTIMER) + (TRC_CFG_NEVENTGROUP) + (TRC_CFG_NSTREAMBUFFER);
    55b0:	4b12      	ldr	r3, [pc, #72]	; (55fc <vTraceInitObjectHandleStack+0xc0>)
    55b2:	2241      	movs	r2, #65	; 0x41
    55b4:	845a      	strh	r2, [r3, #34]	; 0x22
    55b6:	4b11      	ldr	r3, [pc, #68]	; (55fc <vTraceInitObjectHandleStack+0xc0>)
    55b8:	8c5a      	ldrh	r2, [r3, #34]	; 0x22
    55ba:	4b10      	ldr	r3, [pc, #64]	; (55fc <vTraceInitObjectHandleStack+0xc0>)
    55bc:	821a      	strh	r2, [r3, #16]

	objectHandleStacks.highestIndexOfClass[0] = (TRC_CFG_NQUEUE) - 1;
    55be:	4b0f      	ldr	r3, [pc, #60]	; (55fc <vTraceInitObjectHandleStack+0xc0>)
    55c0:	2209      	movs	r2, #9
    55c2:	849a      	strh	r2, [r3, #36]	; 0x24
	objectHandleStacks.highestIndexOfClass[1] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) - 1;
    55c4:	4b0d      	ldr	r3, [pc, #52]	; (55fc <vTraceInitObjectHandleStack+0xc0>)
    55c6:	2213      	movs	r2, #19
    55c8:	84da      	strh	r2, [r3, #38]	; 0x26
	objectHandleStacks.highestIndexOfClass[2] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) - 1;
    55ca:	4b0c      	ldr	r3, [pc, #48]	; (55fc <vTraceInitObjectHandleStack+0xc0>)
    55cc:	221d      	movs	r2, #29
    55ce:	851a      	strh	r2, [r3, #40]	; 0x28
	objectHandleStacks.highestIndexOfClass[3] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) + (TRC_CFG_NTASK) - 1;
    55d0:	4b0a      	ldr	r3, [pc, #40]	; (55fc <vTraceInitObjectHandleStack+0xc0>)
    55d2:	222c      	movs	r2, #44	; 0x2c
    55d4:	855a      	strh	r2, [r3, #42]	; 0x2a
	objectHandleStacks.highestIndexOfClass[4] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) + (TRC_CFG_NTASK) + (TRC_CFG_NISR) - 1;
    55d6:	4b09      	ldr	r3, [pc, #36]	; (55fc <vTraceInitObjectHandleStack+0xc0>)
    55d8:	2231      	movs	r2, #49	; 0x31
    55da:	859a      	strh	r2, [r3, #44]	; 0x2c
	objectHandleStacks.highestIndexOfClass[5] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) + (TRC_CFG_NTASK) + (TRC_CFG_NISR) + (TRC_CFG_NTIMER) - 1;
    55dc:	4b07      	ldr	r3, [pc, #28]	; (55fc <vTraceInitObjectHandleStack+0xc0>)
    55de:	2236      	movs	r2, #54	; 0x36
    55e0:	85da      	strh	r2, [r3, #46]	; 0x2e
	objectHandleStacks.highestIndexOfClass[6] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) + (TRC_CFG_NTASK) + (TRC_CFG_NISR) + (TRC_CFG_NTIMER) + (TRC_CFG_NEVENTGROUP) - 1;
    55e2:	4b06      	ldr	r3, [pc, #24]	; (55fc <vTraceInitObjectHandleStack+0xc0>)
    55e4:	223b      	movs	r2, #59	; 0x3b
    55e6:	861a      	strh	r2, [r3, #48]	; 0x30
	objectHandleStacks.highestIndexOfClass[7] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) + (TRC_CFG_NTASK) + (TRC_CFG_NISR) + (TRC_CFG_NTIMER) + (TRC_CFG_NEVENTGROUP) + (TRC_CFG_NSTREAMBUFFER) - 1;
    55e8:	4b04      	ldr	r3, [pc, #16]	; (55fc <vTraceInitObjectHandleStack+0xc0>)
    55ea:	2240      	movs	r2, #64	; 0x40
    55ec:	865a      	strh	r2, [r3, #50]	; 0x32
	objectHandleStacks.highestIndexOfClass[8] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) + (TRC_CFG_NTASK) + (TRC_CFG_NISR) + (TRC_CFG_NTIMER) + (TRC_CFG_NEVENTGROUP) + (TRC_CFG_NSTREAMBUFFER) + (TRC_CFG_NMESSAGEBUFFER) - 1;
    55ee:	4b03      	ldr	r3, [pc, #12]	; (55fc <vTraceInitObjectHandleStack+0xc0>)
    55f0:	2245      	movs	r2, #69	; 0x45
    55f2:	869a      	strh	r2, [r3, #52]	; 0x34
}
    55f4:	46c0      	nop			; (mov r8, r8)
    55f6:	46bd      	mov	sp, r7
    55f8:	bd80      	pop	{r7, pc}
    55fa:	46c0      	nop			; (mov r8, r8)
    55fc:	20000bc8 	.word	0x20000bc8

00005600 <pszTraceGetErrorNotEnoughHandles>:

/* Returns the "Not enough handles" error message for this object class */
const char* pszTraceGetErrorNotEnoughHandles(traceObjectClass objectclass)
{
    5600:	b580      	push	{r7, lr}
    5602:	b082      	sub	sp, #8
    5604:	af00      	add	r7, sp, #0
    5606:	0002      	movs	r2, r0
    5608:	1dfb      	adds	r3, r7, #7
    560a:	701a      	strb	r2, [r3, #0]
	switch(objectclass)
    560c:	1dfb      	adds	r3, r7, #7
    560e:	781b      	ldrb	r3, [r3, #0]
    5610:	2b08      	cmp	r3, #8
    5612:	d816      	bhi.n	5642 <pszTraceGetErrorNotEnoughHandles+0x42>
    5614:	009a      	lsls	r2, r3, #2
    5616:	4b0d      	ldr	r3, [pc, #52]	; (564c <pszTraceGetErrorNotEnoughHandles+0x4c>)
    5618:	18d3      	adds	r3, r2, r3
    561a:	681b      	ldr	r3, [r3, #0]
    561c:	469f      	mov	pc, r3
	{
	case TRACE_CLASS_TASK:
		return "Not enough TASK handles - increase TRC_CFG_NTASK in trcSnapshotConfig.h";
    561e:	4b0c      	ldr	r3, [pc, #48]	; (5650 <pszTraceGetErrorNotEnoughHandles+0x50>)
    5620:	e010      	b.n	5644 <pszTraceGetErrorNotEnoughHandles+0x44>
	case TRACE_CLASS_ISR:
		return "Not enough ISR handles - increase TRC_CFG_NISR in trcSnapshotConfig.h";
    5622:	4b0c      	ldr	r3, [pc, #48]	; (5654 <pszTraceGetErrorNotEnoughHandles+0x54>)
    5624:	e00e      	b.n	5644 <pszTraceGetErrorNotEnoughHandles+0x44>
	case TRACE_CLASS_SEMAPHORE:
		return "Not enough SEMAPHORE handles - increase TRC_CFG_NSEMAPHORE in trcSnapshotConfig.h";
    5626:	4b0c      	ldr	r3, [pc, #48]	; (5658 <pszTraceGetErrorNotEnoughHandles+0x58>)
    5628:	e00c      	b.n	5644 <pszTraceGetErrorNotEnoughHandles+0x44>
	case TRACE_CLASS_MUTEX:
		return "Not enough MUTEX handles - increase TRC_CFG_NMUTEX in trcSnapshotConfig.h";
    562a:	4b0c      	ldr	r3, [pc, #48]	; (565c <pszTraceGetErrorNotEnoughHandles+0x5c>)
    562c:	e00a      	b.n	5644 <pszTraceGetErrorNotEnoughHandles+0x44>
	case TRACE_CLASS_QUEUE:
		return "Not enough QUEUE handles - increase TRC_CFG_NQUEUE in trcSnapshotConfig.h";
    562e:	4b0c      	ldr	r3, [pc, #48]	; (5660 <pszTraceGetErrorNotEnoughHandles+0x60>)
    5630:	e008      	b.n	5644 <pszTraceGetErrorNotEnoughHandles+0x44>
	case TRACE_CLASS_TIMER:
		return "Not enough TIMER handles - increase TRC_CFG_NTIMER in trcSnapshotConfig.h";
    5632:	4b0c      	ldr	r3, [pc, #48]	; (5664 <pszTraceGetErrorNotEnoughHandles+0x64>)
    5634:	e006      	b.n	5644 <pszTraceGetErrorNotEnoughHandles+0x44>
	case TRACE_CLASS_EVENTGROUP:
		return "Not enough EVENTGROUP handles - increase TRC_CFG_NEVENTGROUP in trcSnapshotConfig.h";
    5636:	4b0c      	ldr	r3, [pc, #48]	; (5668 <pszTraceGetErrorNotEnoughHandles+0x68>)
    5638:	e004      	b.n	5644 <pszTraceGetErrorNotEnoughHandles+0x44>
	case TRACE_CLASS_STREAMBUFFER:
		return "Not enough STREAMBUFFER handles - increase TRC_CFG_NSTREAMBUFFER in trcSnapshotConfig.h";
    563a:	4b0c      	ldr	r3, [pc, #48]	; (566c <pszTraceGetErrorNotEnoughHandles+0x6c>)
    563c:	e002      	b.n	5644 <pszTraceGetErrorNotEnoughHandles+0x44>
	case TRACE_CLASS_MESSAGEBUFFER:
		return "Not enough MESSAGEBUFFER handles - increase TRC_CFG_NMESSAGEBUFFER in trcSnapshotConfig.h";
    563e:	4b0c      	ldr	r3, [pc, #48]	; (5670 <pszTraceGetErrorNotEnoughHandles+0x70>)
    5640:	e000      	b.n	5644 <pszTraceGetErrorNotEnoughHandles+0x44>
	default:
		return "pszTraceGetErrorHandles: Invalid objectclass!";
    5642:	4b0c      	ldr	r3, [pc, #48]	; (5674 <pszTraceGetErrorNotEnoughHandles+0x74>)
	}
}
    5644:	0018      	movs	r0, r3
    5646:	46bd      	mov	sp, r7
    5648:	b002      	add	sp, #8
    564a:	bd80      	pop	{r7, pc}
    564c:	00023cd4 	.word	0x00023cd4
    5650:	000239d4 	.word	0x000239d4
    5654:	00023a1c 	.word	0x00023a1c
    5658:	00023a64 	.word	0x00023a64
    565c:	00023ab8 	.word	0x00023ab8
    5660:	00023b04 	.word	0x00023b04
    5664:	00023b50 	.word	0x00023b50
    5668:	00023b9c 	.word	0x00023b9c
    566c:	00023bf0 	.word	0x00023bf0
    5670:	00023c48 	.word	0x00023c48
    5674:	00023ca4 	.word	0x00023ca4

00005678 <uiTraceStart>:
 *
 * This function is obsolete, but has been saved for backwards compatibility.
 * We recommend using vTraceEnable instead.
 ******************************************************************************/
uint32_t uiTraceStart(void)
{
    5678:	b590      	push	{r4, r7, lr}
    567a:	b087      	sub	sp, #28
    567c:	af00      	add	r7, sp, #0
	traceHandle handle;
	TRACE_ALLOC_CRITICAL_SECTION();

	handle = 0;
    567e:	2317      	movs	r3, #23
    5680:	18fb      	adds	r3, r7, r3
    5682:	2200      	movs	r2, #0
    5684:	701a      	strb	r2, [r3, #0]

	if (RecorderDataPtr == NULL)
    5686:	4b36      	ldr	r3, [pc, #216]	; (5760 <uiTraceStart+0xe8>)
    5688:	681b      	ldr	r3, [r3, #0]
    568a:	2b00      	cmp	r3, #0
    568c:	d10b      	bne.n	56a6 <uiTraceStart+0x2e>
	{
		TRACE_ASSERT(RecorderDataPtr != NULL, "Recorder not initialized. Use vTraceEnable() instead!", 0);
    568e:	4b34      	ldr	r3, [pc, #208]	; (5760 <uiTraceStart+0xe8>)
    5690:	681b      	ldr	r3, [r3, #0]
    5692:	2b00      	cmp	r3, #0
    5694:	d105      	bne.n	56a2 <uiTraceStart+0x2a>
    5696:	4b33      	ldr	r3, [pc, #204]	; (5764 <uiTraceStart+0xec>)
    5698:	0018      	movs	r0, r3
    569a:	4b33      	ldr	r3, [pc, #204]	; (5768 <uiTraceStart+0xf0>)
    569c:	4798      	blx	r3
    569e:	2300      	movs	r3, #0
    56a0:	e059      	b.n	5756 <uiTraceStart+0xde>
		return 0;
    56a2:	2300      	movs	r3, #0
    56a4:	e057      	b.n	5756 <uiTraceStart+0xde>
	}
	
	if (RecorderDataPtr->recorderActive == 1)
    56a6:	4b2e      	ldr	r3, [pc, #184]	; (5760 <uiTraceStart+0xe8>)
    56a8:	681b      	ldr	r3, [r3, #0]
    56aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    56ac:	2b01      	cmp	r3, #1
    56ae:	d101      	bne.n	56b4 <uiTraceStart+0x3c>
		return 1; /* Already running */
    56b0:	2301      	movs	r3, #1
    56b2:	e050      	b.n	5756 <uiTraceStart+0xde>

	if (traceErrorMessage == NULL)
    56b4:	4b2d      	ldr	r3, [pc, #180]	; (576c <uiTraceStart+0xf4>)
    56b6:	681b      	ldr	r3, [r3, #0]
    56b8:	2b00      	cmp	r3, #0
    56ba:	d149      	bne.n	5750 <uiTraceStart+0xd8>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    56bc:	f3ef 8310 	mrs	r3, PRIMASK
    56c0:	60bb      	str	r3, [r7, #8]
  return(result);
    56c2:	68bb      	ldr	r3, [r7, #8]
	{
		trcCRITICAL_SECTION_BEGIN();
    56c4:	613b      	str	r3, [r7, #16]
    56c6:	2301      	movs	r3, #1
    56c8:	60fb      	str	r3, [r7, #12]

    \param [in]    priMask  Priority Mask
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
    56ca:	68fb      	ldr	r3, [r7, #12]
    56cc:	f383 8810 	msr	PRIMASK, r3
    56d0:	4b27      	ldr	r3, [pc, #156]	; (5770 <uiTraceStart+0xf8>)
    56d2:	681b      	ldr	r3, [r3, #0]
    56d4:	1c5a      	adds	r2, r3, #1
    56d6:	4b26      	ldr	r3, [pc, #152]	; (5770 <uiTraceStart+0xf8>)
    56d8:	601a      	str	r2, [r3, #0]
		RecorderDataPtr->recorderActive = 1;
    56da:	4b21      	ldr	r3, [pc, #132]	; (5760 <uiTraceStart+0xe8>)
    56dc:	681b      	ldr	r3, [r3, #0]
    56de:	2201      	movs	r2, #1
    56e0:	631a      	str	r2, [r3, #48]	; 0x30

		handle = TRACE_GET_TASK_NUMBER(TRACE_GET_CURRENT_TASK());
    56e2:	4b24      	ldr	r3, [pc, #144]	; (5774 <uiTraceStart+0xfc>)
    56e4:	4798      	blx	r3
    56e6:	0003      	movs	r3, r0
    56e8:	0018      	movs	r0, r3
    56ea:	4b23      	ldr	r3, [pc, #140]	; (5778 <uiTraceStart+0x100>)
    56ec:	4798      	blx	r3
    56ee:	0003      	movs	r3, r0
    56f0:	001a      	movs	r2, r3
    56f2:	2317      	movs	r3, #23
    56f4:	18fb      	adds	r3, r7, r3
    56f6:	701a      	strb	r2, [r3, #0]
		if (handle == 0)
    56f8:	2317      	movs	r3, #23
    56fa:	18fb      	adds	r3, r7, r3
    56fc:	781b      	ldrb	r3, [r3, #0]
    56fe:	2b00      	cmp	r3, #0
    5700:	d116      	bne.n	5730 <uiTraceStart+0xb8>
		{
			/* This occurs if the scheduler is not yet started.
			This creates a dummy "(startup)" task entry internally in the
			recorder */
			handle = prvTraceGetObjectHandle(TRACE_CLASS_TASK);
    5702:	2317      	movs	r3, #23
    5704:	18fc      	adds	r4, r7, r3
    5706:	2003      	movs	r0, #3
    5708:	4b1c      	ldr	r3, [pc, #112]	; (577c <uiTraceStart+0x104>)
    570a:	4798      	blx	r3
    570c:	0003      	movs	r3, r0
    570e:	7023      	strb	r3, [r4, #0]
			prvTraceSetObjectName(TRACE_CLASS_TASK, handle, "(startup)");
    5710:	4a1b      	ldr	r2, [pc, #108]	; (5780 <uiTraceStart+0x108>)
    5712:	2317      	movs	r3, #23
    5714:	18fb      	adds	r3, r7, r3
    5716:	781b      	ldrb	r3, [r3, #0]
    5718:	0019      	movs	r1, r3
    571a:	2003      	movs	r0, #3
    571c:	4b19      	ldr	r3, [pc, #100]	; (5784 <uiTraceStart+0x10c>)
    571e:	4798      	blx	r3

			prvTraceSetPriorityProperty(TRACE_CLASS_TASK, handle, 0);
    5720:	2317      	movs	r3, #23
    5722:	18fb      	adds	r3, r7, r3
    5724:	781b      	ldrb	r3, [r3, #0]
    5726:	2200      	movs	r2, #0
    5728:	0019      	movs	r1, r3
    572a:	2003      	movs	r0, #3
    572c:	4b16      	ldr	r3, [pc, #88]	; (5788 <uiTraceStart+0x110>)
    572e:	4798      	blx	r3
		}

		prvTraceStoreTaskswitch(handle); /* Register the currently running task */
    5730:	2317      	movs	r3, #23
    5732:	18fb      	adds	r3, r7, r3
    5734:	781b      	ldrb	r3, [r3, #0]
    5736:	0018      	movs	r0, r3
    5738:	4b14      	ldr	r3, [pc, #80]	; (578c <uiTraceStart+0x114>)
    573a:	4798      	blx	r3
		trcCRITICAL_SECTION_END();
    573c:	4b0c      	ldr	r3, [pc, #48]	; (5770 <uiTraceStart+0xf8>)
    573e:	681b      	ldr	r3, [r3, #0]
    5740:	1e5a      	subs	r2, r3, #1
    5742:	4b0b      	ldr	r3, [pc, #44]	; (5770 <uiTraceStart+0xf8>)
    5744:	601a      	str	r2, [r3, #0]
    5746:	693b      	ldr	r3, [r7, #16]
    5748:	607b      	str	r3, [r7, #4]
    574a:	687b      	ldr	r3, [r7, #4]
    574c:	f383 8810 	msr	PRIMASK, r3
	}

	return RecorderDataPtr->recorderActive;
    5750:	4b03      	ldr	r3, [pc, #12]	; (5760 <uiTraceStart+0xe8>)
    5752:	681b      	ldr	r3, [r3, #0]
    5754:	6b1b      	ldr	r3, [r3, #48]	; 0x30
}
    5756:	0018      	movs	r0, r3
    5758:	46bd      	mov	sp, r7
    575a:	b007      	add	sp, #28
    575c:	bd90      	pop	{r4, r7, pc}
    575e:	46c0      	nop			; (mov r8, r8)
    5760:	20000c58 	.word	0x20000c58
    5764:	00023cf8 	.word	0x00023cf8
    5768:	000068e1 	.word	0x000068e1
    576c:	20000bb8 	.word	0x20000bb8
    5770:	20000bb0 	.word	0x20000bb0
    5774:	000052e1 	.word	0x000052e1
    5778:	00005025 	.word	0x00005025
    577c:	000065c5 	.word	0x000065c5
    5780:	00023d3c 	.word	0x00023d3c
    5784:	000067f5 	.word	0x000067f5
    5788:	00005f59 	.word	0x00005f59
    578c:	00005e41 	.word	0x00005e41

00005790 <vTraceStart>:
 *
 * This function is obsolete, but has been saved for backwards compatibility.
 * We recommend using vTraceEnable instead.
 ******************************************************************************/
void vTraceStart(void)
{
    5790:	b580      	push	{r7, lr}
    5792:	af00      	add	r7, sp, #0
	(void)uiTraceStart();
    5794:	4b02      	ldr	r3, [pc, #8]	; (57a0 <vTraceStart+0x10>)
    5796:	4798      	blx	r3
}
    5798:	46c0      	nop			; (mov r8, r8)
    579a:	46bd      	mov	sp, r7
    579c:	bd80      	pop	{r7, pc}
    579e:	46c0      	nop			; (mov r8, r8)
    57a0:	00005679 	.word	0x00005679

000057a4 <vTraceStop>:
 *
 * Stops the recorder. The recording can be resumed by calling vTraceStart.
 * This does not reset the recorder. Use vTraceClear if that is desired.
 ******************************************************************************/
void vTraceStop(void)
{
    57a4:	b580      	push	{r7, lr}
    57a6:	af00      	add	r7, sp, #0
	if (RecorderDataPtr != NULL)
    57a8:	4b08      	ldr	r3, [pc, #32]	; (57cc <vTraceStop+0x28>)
    57aa:	681b      	ldr	r3, [r3, #0]
    57ac:	2b00      	cmp	r3, #0
    57ae:	d003      	beq.n	57b8 <vTraceStop+0x14>
	{
		RecorderDataPtr->recorderActive = 0;
    57b0:	4b06      	ldr	r3, [pc, #24]	; (57cc <vTraceStop+0x28>)
    57b2:	681b      	ldr	r3, [r3, #0]
    57b4:	2200      	movs	r2, #0
    57b6:	631a      	str	r2, [r3, #48]	; 0x30
	}

	if (vTraceStopHookPtr != (TRACE_STOP_HOOK)0)
    57b8:	4b05      	ldr	r3, [pc, #20]	; (57d0 <vTraceStop+0x2c>)
    57ba:	681b      	ldr	r3, [r3, #0]
    57bc:	2b00      	cmp	r3, #0
    57be:	d002      	beq.n	57c6 <vTraceStop+0x22>
	{
		(*vTraceStopHookPtr)();			/* An application call-back function. */
    57c0:	4b03      	ldr	r3, [pc, #12]	; (57d0 <vTraceStop+0x2c>)
    57c2:	681b      	ldr	r3, [r3, #0]
    57c4:	4798      	blx	r3
	}
}
    57c6:	46c0      	nop			; (mov r8, r8)
    57c8:	46bd      	mov	sp, r7
    57ca:	bd80      	pop	{r7, pc}
    57cc:	20000c58 	.word	0x20000c58
    57d0:	20000bc0 	.word	0x20000bc0

000057d4 <xTraceIsRecordingEnabled>:
/*******************************************************************************
* xTraceIsRecordingEnabled
* Returns true (1) if the recorder is enabled (i.e. is recording), otherwise 0.
******************************************************************************/
int xTraceIsRecordingEnabled(void)
{
    57d4:	b580      	push	{r7, lr}
    57d6:	af00      	add	r7, sp, #0
	if (RecorderDataPtr != NULL)
    57d8:	4b05      	ldr	r3, [pc, #20]	; (57f0 <xTraceIsRecordingEnabled+0x1c>)
    57da:	681b      	ldr	r3, [r3, #0]
    57dc:	2b00      	cmp	r3, #0
    57de:	d003      	beq.n	57e8 <xTraceIsRecordingEnabled+0x14>
	{
		return (int)RecorderDataPtr->recorderActive;
    57e0:	4b03      	ldr	r3, [pc, #12]	; (57f0 <xTraceIsRecordingEnabled+0x1c>)
    57e2:	681b      	ldr	r3, [r3, #0]
    57e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    57e6:	e000      	b.n	57ea <xTraceIsRecordingEnabled+0x16>
	}
	else
	{
		return 0;
    57e8:	2300      	movs	r3, #0
	}
}
    57ea:	0018      	movs	r0, r3
    57ec:	46bd      	mov	sp, r7
    57ee:	bd80      	pop	{r7, pc}
    57f0:	20000c58 	.word	0x20000c58

000057f4 <prvTraceStoreTaskReady>:
 * prvTraceStoreTaskReady
 *
 * This function stores a ready state for the task handle sent in as parameter.
 ******************************************************************************/
void prvTraceStoreTaskReady(traceHandle handle) 
{
    57f4:	b590      	push	{r4, r7, lr}
    57f6:	b089      	sub	sp, #36	; 0x24
    57f8:	af00      	add	r7, sp, #0
    57fa:	0002      	movs	r2, r0
    57fc:	1dfb      	adds	r3, r7, #7
    57fe:	701a      	strb	r2, [r3, #0]
	TREvent* tr;
	uint8_t hnd8;

	TRACE_ALLOC_CRITICAL_SECTION();

	if (handle == 0)
    5800:	1dfb      	adds	r3, r7, #7
    5802:	781b      	ldrb	r3, [r3, #0]
    5804:	2b00      	cmp	r3, #0
    5806:	d057      	beq.n	58b8 <prvTraceStoreTaskReady+0xc4>
		/*  On FreeRTOS v7.3.0, this occurs when creating tasks due to a bad
		placement of the trace macro. In that case, the events are ignored. */
		return;
	}
	
	if (! readyEventsEnabled)
    5808:	4b2e      	ldr	r3, [pc, #184]	; (58c4 <prvTraceStoreTaskReady+0xd0>)
    580a:	681b      	ldr	r3, [r3, #0]
    580c:	2b00      	cmp	r3, #0
    580e:	d055      	beq.n	58bc <prvTraceStoreTaskReady+0xc8>
		a "hidden" (not traced) task, we must therefore disable recording 
		of ready events to avoid an undesired ready event... */
		return;
	}

	TRACE_ASSERT(handle <= (TRC_CFG_NTASK), "prvTraceStoreTaskReady: Invalid value for handle", TRC_UNUSED);
    5810:	1dfb      	adds	r3, r7, #7
    5812:	781b      	ldrb	r3, [r3, #0]
    5814:	2b0f      	cmp	r3, #15
    5816:	d904      	bls.n	5822 <prvTraceStoreTaskReady+0x2e>
    5818:	4b2b      	ldr	r3, [pc, #172]	; (58c8 <prvTraceStoreTaskReady+0xd4>)
    581a:	0018      	movs	r0, r3
    581c:	4b2b      	ldr	r3, [pc, #172]	; (58cc <prvTraceStoreTaskReady+0xd8>)
    581e:	4798      	blx	r3
    5820:	e04d      	b.n	58be <prvTraceStoreTaskReady+0xca>

	if (recorder_busy)
    5822:	4b2b      	ldr	r3, [pc, #172]	; (58d0 <prvTraceStoreTaskReady+0xdc>)
    5824:	681b      	ldr	r3, [r3, #0]
    5826:	2b00      	cmp	r3, #0
    5828:	d004      	beq.n	5834 <prvTraceStoreTaskReady+0x40>
		* TRACE_EXIT_CRITICAL_SECTION). They must disable the RTOS tick interrupt
		* and any other ISRs that calls the trace recorder directly or via
		* traced kernel functions. The ARM port disables all interrupts using the
		* PRIMASK register to avoid this issue.
		*************************************************************************/
		prvTraceError("Recorder busy - high priority ISR using syscall? (1)");
    582a:	4b2a      	ldr	r3, [pc, #168]	; (58d4 <prvTraceStoreTaskReady+0xe0>)
    582c:	0018      	movs	r0, r3
    582e:	4b27      	ldr	r3, [pc, #156]	; (58cc <prvTraceStoreTaskReady+0xd8>)
    5830:	4798      	blx	r3
		return;
    5832:	e044      	b.n	58be <prvTraceStoreTaskReady+0xca>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    5834:	f3ef 8310 	mrs	r3, PRIMASK
    5838:	60fb      	str	r3, [r7, #12]
  return(result);
    583a:	68fb      	ldr	r3, [r7, #12]
	}

	trcCRITICAL_SECTION_BEGIN();
    583c:	61fb      	str	r3, [r7, #28]
    583e:	2301      	movs	r3, #1
    5840:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
    5842:	693b      	ldr	r3, [r7, #16]
    5844:	f383 8810 	msr	PRIMASK, r3
    5848:	4b21      	ldr	r3, [pc, #132]	; (58d0 <prvTraceStoreTaskReady+0xdc>)
    584a:	681b      	ldr	r3, [r3, #0]
    584c:	1c5a      	adds	r2, r3, #1
    584e:	4b20      	ldr	r3, [pc, #128]	; (58d0 <prvTraceStoreTaskReady+0xdc>)
    5850:	601a      	str	r2, [r3, #0]
	if (RecorderDataPtr->recorderActive) /* Need to repeat this check! */
    5852:	4b21      	ldr	r3, [pc, #132]	; (58d8 <prvTraceStoreTaskReady+0xe4>)
    5854:	681b      	ldr	r3, [r3, #0]
    5856:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    5858:	2b00      	cmp	r3, #0
    585a:	d022      	beq.n	58a2 <prvTraceStoreTaskReady+0xae>
	{
		dts3 = (uint16_t)prvTraceGetDTS(0xFFFF);
    585c:	231a      	movs	r3, #26
    585e:	18fc      	adds	r4, r7, r3
    5860:	4b1e      	ldr	r3, [pc, #120]	; (58dc <prvTraceStoreTaskReady+0xe8>)
    5862:	0018      	movs	r0, r3
    5864:	4b1e      	ldr	r3, [pc, #120]	; (58e0 <prvTraceStoreTaskReady+0xec>)
    5866:	4798      	blx	r3
    5868:	0003      	movs	r3, r0
    586a:	8023      	strh	r3, [r4, #0]
		hnd8 = prvTraceGet8BitHandle(handle);
    586c:	2319      	movs	r3, #25
    586e:	18fb      	adds	r3, r7, r3
    5870:	1dfa      	adds	r2, r7, #7
    5872:	7812      	ldrb	r2, [r2, #0]
    5874:	701a      	strb	r2, [r3, #0]
		tr = (TREvent*)prvTraceNextFreeEventBufferSlot();
    5876:	4b1b      	ldr	r3, [pc, #108]	; (58e4 <prvTraceStoreTaskReady+0xf0>)
    5878:	4798      	blx	r3
    587a:	0003      	movs	r3, r0
    587c:	617b      	str	r3, [r7, #20]
		if (tr != NULL)
    587e:	697b      	ldr	r3, [r7, #20]
    5880:	2b00      	cmp	r3, #0
    5882:	d00e      	beq.n	58a2 <prvTraceStoreTaskReady+0xae>
		{
			tr->type = DIV_TASK_READY;
    5884:	697b      	ldr	r3, [r7, #20]
    5886:	2202      	movs	r2, #2
    5888:	701a      	strb	r2, [r3, #0]
			tr->dts = dts3;
    588a:	697b      	ldr	r3, [r7, #20]
    588c:	221a      	movs	r2, #26
    588e:	18ba      	adds	r2, r7, r2
    5890:	8812      	ldrh	r2, [r2, #0]
    5892:	805a      	strh	r2, [r3, #2]
			tr->objHandle = hnd8;
    5894:	697b      	ldr	r3, [r7, #20]
    5896:	2219      	movs	r2, #25
    5898:	18ba      	adds	r2, r7, r2
    589a:	7812      	ldrb	r2, [r2, #0]
    589c:	705a      	strb	r2, [r3, #1]
			prvTraceUpdateCounters();
    589e:	4b12      	ldr	r3, [pc, #72]	; (58e8 <prvTraceStoreTaskReady+0xf4>)
    58a0:	4798      	blx	r3
		}
	}
	trcCRITICAL_SECTION_END();
    58a2:	4b0b      	ldr	r3, [pc, #44]	; (58d0 <prvTraceStoreTaskReady+0xdc>)
    58a4:	681b      	ldr	r3, [r3, #0]
    58a6:	1e5a      	subs	r2, r3, #1
    58a8:	4b09      	ldr	r3, [pc, #36]	; (58d0 <prvTraceStoreTaskReady+0xdc>)
    58aa:	601a      	str	r2, [r3, #0]
    58ac:	69fb      	ldr	r3, [r7, #28]
    58ae:	60bb      	str	r3, [r7, #8]
    58b0:	68bb      	ldr	r3, [r7, #8]
    58b2:	f383 8810 	msr	PRIMASK, r3
    58b6:	e002      	b.n	58be <prvTraceStoreTaskReady+0xca>
		return;
    58b8:	46c0      	nop			; (mov r8, r8)
    58ba:	e000      	b.n	58be <prvTraceStoreTaskReady+0xca>
		return;
    58bc:	46c0      	nop			; (mov r8, r8)
}
    58be:	46bd      	mov	sp, r7
    58c0:	b009      	add	sp, #36	; 0x24
    58c2:	bd90      	pop	{r4, r7, pc}
    58c4:	200000fc 	.word	0x200000fc
    58c8:	000240a4 	.word	0x000240a4
    58cc:	000068e1 	.word	0x000068e1
    58d0:	20000bb0 	.word	0x20000bb0
    58d4:	000240e4 	.word	0x000240e4
    58d8:	20000c58 	.word	0x20000c58
    58dc:	0000ffff 	.word	0x0000ffff
    58e0:	00006af5 	.word	0x00006af5
    58e4:	00006499 	.word	0x00006499
    58e8:	00006a9d 	.word	0x00006a9d

000058ec <vTraceStoreMemMangEvent>:
 * Note: On "free" calls, the signed_size parameter should be negative.
 ******************************************************************************/
#if (TRC_CFG_INCLUDE_MEMMANG_EVENTS == 1)
#if (TRC_CFG_SCHEDULING_ONLY == 0)
void vTraceStoreMemMangEvent(uint32_t ecode, uint32_t address, int32_t signed_size)
{
    58ec:	b580      	push	{r7, lr}
    58ee:	b08e      	sub	sp, #56	; 0x38
    58f0:	af00      	add	r7, sp, #0
    58f2:	60f8      	str	r0, [r7, #12]
    58f4:	60b9      	str	r1, [r7, #8]
    58f6:	607a      	str	r2, [r7, #4]
	uint16_t addr_low;
	uint8_t addr_high;
	uint32_t size;
	TRACE_ALLOC_CRITICAL_SECTION();

	if (RecorderDataPtr == NULL)
    58f8:	4b48      	ldr	r3, [pc, #288]	; (5a1c <vTraceStoreMemMangEvent+0x130>)
    58fa:	681b      	ldr	r3, [r3, #0]
    58fc:	2b00      	cmp	r3, #0
    58fe:	d100      	bne.n	5902 <vTraceStoreMemMangEvent+0x16>
    5900:	e088      	b.n	5a14 <vTraceStoreMemMangEvent+0x128>
	{
		/* Occurs in vTraceInitTraceData, if using dynamic allocation. */
		return;
	}
	
	if (signed_size < 0)
    5902:	687b      	ldr	r3, [r7, #4]
    5904:	2b00      	cmp	r3, #0
    5906:	da03      	bge.n	5910 <vTraceStoreMemMangEvent+0x24>
		size = (uint32_t)(- signed_size);
    5908:	687b      	ldr	r3, [r7, #4]
    590a:	425b      	negs	r3, r3
    590c:	637b      	str	r3, [r7, #52]	; 0x34
    590e:	e001      	b.n	5914 <vTraceStoreMemMangEvent+0x28>
	else
		size = (uint32_t)(signed_size);
    5910:	687b      	ldr	r3, [r7, #4]
    5912:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    5914:	f3ef 8310 	mrs	r3, PRIMASK
    5918:	61bb      	str	r3, [r7, #24]
  return(result);
    591a:	69bb      	ldr	r3, [r7, #24]

	trcCRITICAL_SECTION_BEGIN();
    591c:	633b      	str	r3, [r7, #48]	; 0x30
    591e:	2301      	movs	r3, #1
    5920:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
    5922:	69fb      	ldr	r3, [r7, #28]
    5924:	f383 8810 	msr	PRIMASK, r3
    5928:	4b3d      	ldr	r3, [pc, #244]	; (5a20 <vTraceStoreMemMangEvent+0x134>)
    592a:	681b      	ldr	r3, [r3, #0]
    592c:	1c5a      	adds	r2, r3, #1
    592e:	4b3c      	ldr	r3, [pc, #240]	; (5a20 <vTraceStoreMemMangEvent+0x134>)
    5930:	601a      	str	r2, [r3, #0]
	
	/* Only update heapMemUsage if we have a valid address */
	if (address != 0)
    5932:	68bb      	ldr	r3, [r7, #8]
    5934:	2b00      	cmp	r3, #0
    5936:	d005      	beq.n	5944 <vTraceStoreMemMangEvent+0x58>
		heapMemUsage += (uint32_t)signed_size;
    5938:	4b3a      	ldr	r3, [pc, #232]	; (5a24 <vTraceStoreMemMangEvent+0x138>)
    593a:	681a      	ldr	r2, [r3, #0]
    593c:	687b      	ldr	r3, [r7, #4]
    593e:	18d2      	adds	r2, r2, r3
    5940:	4b38      	ldr	r3, [pc, #224]	; (5a24 <vTraceStoreMemMangEvent+0x138>)
    5942:	601a      	str	r2, [r3, #0]
	
	if (RecorderDataPtr->recorderActive)
    5944:	4b35      	ldr	r3, [pc, #212]	; (5a1c <vTraceStoreMemMangEvent+0x130>)
    5946:	681b      	ldr	r3, [r3, #0]
    5948:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    594a:	2b00      	cmp	r3, #0
    594c:	d057      	beq.n	59fe <vTraceStoreMemMangEvent+0x112>
	{
		dts1 = (uint8_t)prvTraceGetDTS(0xFF);
    594e:	20ff      	movs	r0, #255	; 0xff
    5950:	4b35      	ldr	r3, [pc, #212]	; (5a28 <vTraceStoreMemMangEvent+0x13c>)
    5952:	4798      	blx	r3
    5954:	0003      	movs	r3, r0
    5956:	001a      	movs	r2, r3
    5958:	232f      	movs	r3, #47	; 0x2f
    595a:	18fb      	adds	r3, r7, r3
    595c:	701a      	strb	r2, [r3, #0]
		size_low = (uint16_t)prvTraceGetParam(0xFFFF, size);
    595e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    5960:	4a32      	ldr	r2, [pc, #200]	; (5a2c <vTraceStoreMemMangEvent+0x140>)
    5962:	0019      	movs	r1, r3
    5964:	0010      	movs	r0, r2
    5966:	4b32      	ldr	r3, [pc, #200]	; (5a30 <vTraceStoreMemMangEvent+0x144>)
    5968:	4798      	blx	r3
    596a:	0002      	movs	r2, r0
    596c:	232c      	movs	r3, #44	; 0x2c
    596e:	18fb      	adds	r3, r7, r3
    5970:	801a      	strh	r2, [r3, #0]
		ms = (MemEventSize *)prvTraceNextFreeEventBufferSlot();
    5972:	4b30      	ldr	r3, [pc, #192]	; (5a34 <vTraceStoreMemMangEvent+0x148>)
    5974:	4798      	blx	r3
    5976:	0003      	movs	r3, r0
    5978:	62bb      	str	r3, [r7, #40]	; 0x28

		if (ms != NULL)
    597a:	6abb      	ldr	r3, [r7, #40]	; 0x28
    597c:	2b00      	cmp	r3, #0
    597e:	d03e      	beq.n	59fe <vTraceStoreMemMangEvent+0x112>
		{
			ms->dts = dts1;
    5980:	6abb      	ldr	r3, [r7, #40]	; 0x28
    5982:	222f      	movs	r2, #47	; 0x2f
    5984:	18ba      	adds	r2, r7, r2
    5986:	7812      	ldrb	r2, [r2, #0]
    5988:	705a      	strb	r2, [r3, #1]
			ms->type = NULL_EVENT; /* Updated when all events are written */
    598a:	6abb      	ldr	r3, [r7, #40]	; 0x28
    598c:	2200      	movs	r2, #0
    598e:	701a      	strb	r2, [r3, #0]
			ms->size = size_low;
    5990:	6abb      	ldr	r3, [r7, #40]	; 0x28
    5992:	222c      	movs	r2, #44	; 0x2c
    5994:	18ba      	adds	r2, r7, r2
    5996:	8812      	ldrh	r2, [r2, #0]
    5998:	805a      	strh	r2, [r3, #2]
			prvTraceUpdateCounters();
    599a:	4b27      	ldr	r3, [pc, #156]	; (5a38 <vTraceStoreMemMangEvent+0x14c>)
    599c:	4798      	blx	r3
				addr_low = address & 0xFFFF;          
				addr_high = (address >> 16) & 0xFF;
			#else
				/* The whole 32 bit address is stored using a second event record
				for the upper 16 bit */
				addr_low = (uint16_t)prvTraceGetParam(0xFFFF, address);
    599e:	68bb      	ldr	r3, [r7, #8]
    59a0:	4a22      	ldr	r2, [pc, #136]	; (5a2c <vTraceStoreMemMangEvent+0x140>)
    59a2:	0019      	movs	r1, r3
    59a4:	0010      	movs	r0, r2
    59a6:	4b22      	ldr	r3, [pc, #136]	; (5a30 <vTraceStoreMemMangEvent+0x144>)
    59a8:	4798      	blx	r3
    59aa:	0002      	movs	r2, r0
    59ac:	2326      	movs	r3, #38	; 0x26
    59ae:	18fb      	adds	r3, r7, r3
    59b0:	801a      	strh	r2, [r3, #0]
				addr_high = 0;
    59b2:	2325      	movs	r3, #37	; 0x25
    59b4:	18fb      	adds	r3, r7, r3
    59b6:	2200      	movs	r2, #0
    59b8:	701a      	strb	r2, [r3, #0]
			#endif

			ma = (MemEventAddr *) prvTraceNextFreeEventBufferSlot();
    59ba:	4b1e      	ldr	r3, [pc, #120]	; (5a34 <vTraceStoreMemMangEvent+0x148>)
    59bc:	4798      	blx	r3
    59be:	0003      	movs	r3, r0
    59c0:	623b      	str	r3, [r7, #32]
			if (ma != NULL)
    59c2:	6a3b      	ldr	r3, [r7, #32]
    59c4:	2b00      	cmp	r3, #0
    59c6:	d01a      	beq.n	59fe <vTraceStoreMemMangEvent+0x112>
			{
				ma->addr_low = addr_low;
    59c8:	6a3b      	ldr	r3, [r7, #32]
    59ca:	2226      	movs	r2, #38	; 0x26
    59cc:	18ba      	adds	r2, r7, r2
    59ce:	8812      	ldrh	r2, [r2, #0]
    59d0:	805a      	strh	r2, [r3, #2]
				ma->addr_high = addr_high;
    59d2:	6a3b      	ldr	r3, [r7, #32]
    59d4:	2225      	movs	r2, #37	; 0x25
    59d6:	18ba      	adds	r2, r7, r2
    59d8:	7812      	ldrb	r2, [r2, #0]
    59da:	705a      	strb	r2, [r3, #1]
				ma->type = (uint8_t) (ecode  + 1); /* Note this! */
    59dc:	68fb      	ldr	r3, [r7, #12]
    59de:	b2db      	uxtb	r3, r3
    59e0:	3301      	adds	r3, #1
    59e2:	b2da      	uxtb	r2, r3
    59e4:	6a3b      	ldr	r3, [r7, #32]
    59e6:	701a      	strb	r2, [r3, #0]
				ms->type = (uint8_t) ecode;
    59e8:	68fb      	ldr	r3, [r7, #12]
    59ea:	b2da      	uxtb	r2, r3
    59ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
    59ee:	701a      	strb	r2, [r3, #0]
				prvTraceUpdateCounters();					
    59f0:	4b11      	ldr	r3, [pc, #68]	; (5a38 <vTraceStoreMemMangEvent+0x14c>)
    59f2:	4798      	blx	r3
				RecorderDataPtr->heapMemUsage = heapMemUsage;
    59f4:	4b09      	ldr	r3, [pc, #36]	; (5a1c <vTraceStoreMemMangEvent+0x130>)
    59f6:	681b      	ldr	r3, [r3, #0]
    59f8:	4a0a      	ldr	r2, [pc, #40]	; (5a24 <vTraceStoreMemMangEvent+0x138>)
    59fa:	6812      	ldr	r2, [r2, #0]
    59fc:	651a      	str	r2, [r3, #80]	; 0x50
			}
		}
	}
	trcCRITICAL_SECTION_END();
    59fe:	4b08      	ldr	r3, [pc, #32]	; (5a20 <vTraceStoreMemMangEvent+0x134>)
    5a00:	681b      	ldr	r3, [r3, #0]
    5a02:	1e5a      	subs	r2, r3, #1
    5a04:	4b06      	ldr	r3, [pc, #24]	; (5a20 <vTraceStoreMemMangEvent+0x134>)
    5a06:	601a      	str	r2, [r3, #0]
    5a08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    5a0a:	617b      	str	r3, [r7, #20]
    5a0c:	697b      	ldr	r3, [r7, #20]
    5a0e:	f383 8810 	msr	PRIMASK, r3
    5a12:	e000      	b.n	5a16 <vTraceStoreMemMangEvent+0x12a>
		return;
    5a14:	46c0      	nop			; (mov r8, r8)
}
    5a16:	46bd      	mov	sp, r7
    5a18:	b00e      	add	sp, #56	; 0x38
    5a1a:	bd80      	pop	{r7, pc}
    5a1c:	20000c58 	.word	0x20000c58
    5a20:	20000bb0 	.word	0x20000bb0
    5a24:	20000bc4 	.word	0x20000bc4
    5a28:	00006af5 	.word	0x00006af5
    5a2c:	0000ffff 	.word	0x0000ffff
    5a30:	00005cb9 	.word	0x00005cb9
    5a34:	00006499 	.word	0x00006499
    5a38:	00006a9d 	.word	0x00006a9d

00005a3c <prvTraceStoreKernelCall>:
 * This is the main integration point for storing kernel calls, and
 * is called by the hooks in trcKernelHooks.h (see trcKernelPort.h for event codes).
 ******************************************************************************/
#if (TRC_CFG_SCHEDULING_ONLY == 0)
void prvTraceStoreKernelCall(uint32_t ecode, traceObjectClass objectClass, uint32_t objectNumber)
{
    5a3c:	b590      	push	{r4, r7, lr}
    5a3e:	b08b      	sub	sp, #44	; 0x2c
    5a40:	af00      	add	r7, sp, #0
    5a42:	60f8      	str	r0, [r7, #12]
    5a44:	607a      	str	r2, [r7, #4]
    5a46:	230b      	movs	r3, #11
    5a48:	18fb      	adds	r3, r7, r3
    5a4a:	1c0a      	adds	r2, r1, #0
    5a4c:	701a      	strb	r2, [r3, #0]
	KernelCall * kse;
	uint16_t dts1;
	uint8_t hnd8;
	TRACE_ALLOC_CRITICAL_SECTION();

	TRACE_ASSERT(ecode < 0xFF, "prvTraceStoreKernelCall: ecode >= 0xFF", TRC_UNUSED);
    5a4e:	68fb      	ldr	r3, [r7, #12]
    5a50:	2bfe      	cmp	r3, #254	; 0xfe
    5a52:	d904      	bls.n	5a5e <prvTraceStoreKernelCall+0x22>
    5a54:	4b39      	ldr	r3, [pc, #228]	; (5b3c <prvTraceStoreKernelCall+0x100>)
    5a56:	0018      	movs	r0, r3
    5a58:	4b39      	ldr	r3, [pc, #228]	; (5b40 <prvTraceStoreKernelCall+0x104>)
    5a5a:	4798      	blx	r3
    5a5c:	e06b      	b.n	5b36 <prvTraceStoreKernelCall+0xfa>
	TRACE_ASSERT(objectClass < TRACE_NCLASSES, "prvTraceStoreKernelCall: objectClass >= TRACE_NCLASSES", TRC_UNUSED);
    5a5e:	230b      	movs	r3, #11
    5a60:	18fb      	adds	r3, r7, r3
    5a62:	781b      	ldrb	r3, [r3, #0]
    5a64:	2b08      	cmp	r3, #8
    5a66:	d904      	bls.n	5a72 <prvTraceStoreKernelCall+0x36>
    5a68:	4b36      	ldr	r3, [pc, #216]	; (5b44 <prvTraceStoreKernelCall+0x108>)
    5a6a:	0018      	movs	r0, r3
    5a6c:	4b34      	ldr	r3, [pc, #208]	; (5b40 <prvTraceStoreKernelCall+0x104>)
    5a6e:	4798      	blx	r3
    5a70:	e061      	b.n	5b36 <prvTraceStoreKernelCall+0xfa>
	TRACE_ASSERT(objectNumber <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[objectClass], "prvTraceStoreKernelCall: Invalid value for objectNumber", TRC_UNUSED);
    5a72:	4b35      	ldr	r3, [pc, #212]	; (5b48 <prvTraceStoreKernelCall+0x10c>)
    5a74:	681a      	ldr	r2, [r3, #0]
    5a76:	230b      	movs	r3, #11
    5a78:	18fb      	adds	r3, r7, r3
    5a7a:	781b      	ldrb	r3, [r3, #0]
    5a7c:	2164      	movs	r1, #100	; 0x64
    5a7e:	18d3      	adds	r3, r2, r3
    5a80:	185b      	adds	r3, r3, r1
    5a82:	781b      	ldrb	r3, [r3, #0]
    5a84:	001a      	movs	r2, r3
    5a86:	687b      	ldr	r3, [r7, #4]
    5a88:	429a      	cmp	r2, r3
    5a8a:	d204      	bcs.n	5a96 <prvTraceStoreKernelCall+0x5a>
    5a8c:	4b2f      	ldr	r3, [pc, #188]	; (5b4c <prvTraceStoreKernelCall+0x110>)
    5a8e:	0018      	movs	r0, r3
    5a90:	4b2b      	ldr	r3, [pc, #172]	; (5b40 <prvTraceStoreKernelCall+0x104>)
    5a92:	4798      	blx	r3
    5a94:	e04f      	b.n	5b36 <prvTraceStoreKernelCall+0xfa>

	if (recorder_busy)
    5a96:	4b2e      	ldr	r3, [pc, #184]	; (5b50 <prvTraceStoreKernelCall+0x114>)
    5a98:	681b      	ldr	r3, [r3, #0]
    5a9a:	2b00      	cmp	r3, #0
    5a9c:	d004      	beq.n	5aa8 <prvTraceStoreKernelCall+0x6c>
		* TRACE_EXIT_CRITICAL_SECTION). They must disable the RTOS tick interrupt
		* and any other ISRs that calls the trace recorder directly or via
		* traced kernel functions. The ARM port disables all interrupts using the
		* PRIMASK register to avoid this issue.
		*************************************************************************/
		prvTraceError("Recorder busy - high priority ISR using syscall? (2)");
    5a9e:	4b2d      	ldr	r3, [pc, #180]	; (5b54 <prvTraceStoreKernelCall+0x118>)
    5aa0:	0018      	movs	r0, r3
    5aa2:	4b27      	ldr	r3, [pc, #156]	; (5b40 <prvTraceStoreKernelCall+0x104>)
    5aa4:	4798      	blx	r3
		return;
    5aa6:	e046      	b.n	5b36 <prvTraceStoreKernelCall+0xfa>
	}

	if (handle_of_last_logged_task == 0)
    5aa8:	4b2b      	ldr	r3, [pc, #172]	; (5b58 <prvTraceStoreKernelCall+0x11c>)
    5aaa:	781b      	ldrb	r3, [r3, #0]
    5aac:	2b00      	cmp	r3, #0
    5aae:	d041      	beq.n	5b34 <prvTraceStoreKernelCall+0xf8>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    5ab0:	f3ef 8310 	mrs	r3, PRIMASK
    5ab4:	617b      	str	r3, [r7, #20]
  return(result);
    5ab6:	697b      	ldr	r3, [r7, #20]
	{
		return;
	}

	trcCRITICAL_SECTION_BEGIN();
    5ab8:	627b      	str	r3, [r7, #36]	; 0x24
    5aba:	2301      	movs	r3, #1
    5abc:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
    5abe:	69bb      	ldr	r3, [r7, #24]
    5ac0:	f383 8810 	msr	PRIMASK, r3
    5ac4:	4b22      	ldr	r3, [pc, #136]	; (5b50 <prvTraceStoreKernelCall+0x114>)
    5ac6:	681b      	ldr	r3, [r3, #0]
    5ac8:	1c5a      	adds	r2, r3, #1
    5aca:	4b21      	ldr	r3, [pc, #132]	; (5b50 <prvTraceStoreKernelCall+0x114>)
    5acc:	601a      	str	r2, [r3, #0]
	if (RecorderDataPtr->recorderActive)
    5ace:	4b1e      	ldr	r3, [pc, #120]	; (5b48 <prvTraceStoreKernelCall+0x10c>)
    5ad0:	681b      	ldr	r3, [r3, #0]
    5ad2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    5ad4:	2b00      	cmp	r3, #0
    5ad6:	d022      	beq.n	5b1e <prvTraceStoreKernelCall+0xe2>
	{
		dts1 = (uint16_t)prvTraceGetDTS(0xFFFF);
    5ad8:	2322      	movs	r3, #34	; 0x22
    5ada:	18fc      	adds	r4, r7, r3
    5adc:	4b1f      	ldr	r3, [pc, #124]	; (5b5c <prvTraceStoreKernelCall+0x120>)
    5ade:	0018      	movs	r0, r3
    5ae0:	4b1f      	ldr	r3, [pc, #124]	; (5b60 <prvTraceStoreKernelCall+0x124>)
    5ae2:	4798      	blx	r3
    5ae4:	0003      	movs	r3, r0
    5ae6:	8023      	strh	r3, [r4, #0]
		hnd8 = prvTraceGet8BitHandle((traceHandle)objectNumber);
    5ae8:	2321      	movs	r3, #33	; 0x21
    5aea:	18fb      	adds	r3, r7, r3
    5aec:	687a      	ldr	r2, [r7, #4]
    5aee:	701a      	strb	r2, [r3, #0]
		kse = (KernelCall*) prvTraceNextFreeEventBufferSlot();
    5af0:	4b1c      	ldr	r3, [pc, #112]	; (5b64 <prvTraceStoreKernelCall+0x128>)
    5af2:	4798      	blx	r3
    5af4:	0003      	movs	r3, r0
    5af6:	61fb      	str	r3, [r7, #28]
		if (kse != NULL)
    5af8:	69fb      	ldr	r3, [r7, #28]
    5afa:	2b00      	cmp	r3, #0
    5afc:	d00f      	beq.n	5b1e <prvTraceStoreKernelCall+0xe2>
		{
			kse->dts = dts1;
    5afe:	69fb      	ldr	r3, [r7, #28]
    5b00:	2222      	movs	r2, #34	; 0x22
    5b02:	18ba      	adds	r2, r7, r2
    5b04:	8812      	ldrh	r2, [r2, #0]
    5b06:	805a      	strh	r2, [r3, #2]
			kse->type = (uint8_t)ecode;
    5b08:	68fb      	ldr	r3, [r7, #12]
    5b0a:	b2da      	uxtb	r2, r3
    5b0c:	69fb      	ldr	r3, [r7, #28]
    5b0e:	701a      	strb	r2, [r3, #0]
			kse->objHandle = hnd8;
    5b10:	69fb      	ldr	r3, [r7, #28]
    5b12:	2221      	movs	r2, #33	; 0x21
    5b14:	18ba      	adds	r2, r7, r2
    5b16:	7812      	ldrb	r2, [r2, #0]
    5b18:	705a      	strb	r2, [r3, #1]
			prvTraceUpdateCounters();
    5b1a:	4b13      	ldr	r3, [pc, #76]	; (5b68 <prvTraceStoreKernelCall+0x12c>)
    5b1c:	4798      	blx	r3
		}
	}
	trcCRITICAL_SECTION_END();
    5b1e:	4b0c      	ldr	r3, [pc, #48]	; (5b50 <prvTraceStoreKernelCall+0x114>)
    5b20:	681b      	ldr	r3, [r3, #0]
    5b22:	1e5a      	subs	r2, r3, #1
    5b24:	4b0a      	ldr	r3, [pc, #40]	; (5b50 <prvTraceStoreKernelCall+0x114>)
    5b26:	601a      	str	r2, [r3, #0]
    5b28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    5b2a:	613b      	str	r3, [r7, #16]
    5b2c:	693b      	ldr	r3, [r7, #16]
    5b2e:	f383 8810 	msr	PRIMASK, r3
    5b32:	e000      	b.n	5b36 <prvTraceStoreKernelCall+0xfa>
		return;
    5b34:	46c0      	nop			; (mov r8, r8)
}
    5b36:	46bd      	mov	sp, r7
    5b38:	b00b      	add	sp, #44	; 0x2c
    5b3a:	bd90      	pop	{r4, r7, pc}
    5b3c:	00024154 	.word	0x00024154
    5b40:	000068e1 	.word	0x000068e1
    5b44:	0002418c 	.word	0x0002418c
    5b48:	20000c58 	.word	0x20000c58
    5b4c:	000241d4 	.word	0x000241d4
    5b50:	20000bb0 	.word	0x20000bb0
    5b54:	0002421c 	.word	0x0002421c
    5b58:	20000bbc 	.word	0x20000bbc
    5b5c:	0000ffff 	.word	0x0000ffff
    5b60:	00006af5 	.word	0x00006af5
    5b64:	00006499 	.word	0x00006499
    5b68:	00006a9d 	.word	0x00006a9d

00005b6c <prvTraceStoreKernelCallWithParam>:
#if (TRC_CFG_SCHEDULING_ONLY == 0)
void prvTraceStoreKernelCallWithParam(uint32_t evtcode,
									traceObjectClass objectClass,
									uint32_t objectNumber,
									uint32_t param)
{
    5b6c:	b580      	push	{r7, lr}
    5b6e:	b08a      	sub	sp, #40	; 0x28
    5b70:	af00      	add	r7, sp, #0
    5b72:	60f8      	str	r0, [r7, #12]
    5b74:	607a      	str	r2, [r7, #4]
    5b76:	603b      	str	r3, [r7, #0]
    5b78:	230b      	movs	r3, #11
    5b7a:	18fb      	adds	r3, r7, r3
    5b7c:	1c0a      	adds	r2, r1, #0
    5b7e:	701a      	strb	r2, [r3, #0]
	uint8_t dts2;
	uint8_t hnd8;
	uint8_t p8;
	TRACE_ALLOC_CRITICAL_SECTION();

	TRACE_ASSERT(evtcode < 0xFF, "prvTraceStoreKernelCallWithParam: evtcode >= 0xFF", TRC_UNUSED);
    5b80:	68fb      	ldr	r3, [r7, #12]
    5b82:	2bfe      	cmp	r3, #254	; 0xfe
    5b84:	d904      	bls.n	5b90 <prvTraceStoreKernelCallWithParam+0x24>
    5b86:	4b40      	ldr	r3, [pc, #256]	; (5c88 <prvTraceStoreKernelCallWithParam+0x11c>)
    5b88:	0018      	movs	r0, r3
    5b8a:	4b40      	ldr	r3, [pc, #256]	; (5c8c <prvTraceStoreKernelCallWithParam+0x120>)
    5b8c:	4798      	blx	r3
    5b8e:	e077      	b.n	5c80 <prvTraceStoreKernelCallWithParam+0x114>
	TRACE_ASSERT(objectClass < TRACE_NCLASSES, "prvTraceStoreKernelCallWithParam: objectClass >= TRACE_NCLASSES", TRC_UNUSED);
    5b90:	230b      	movs	r3, #11
    5b92:	18fb      	adds	r3, r7, r3
    5b94:	781b      	ldrb	r3, [r3, #0]
    5b96:	2b08      	cmp	r3, #8
    5b98:	d904      	bls.n	5ba4 <prvTraceStoreKernelCallWithParam+0x38>
    5b9a:	4b3d      	ldr	r3, [pc, #244]	; (5c90 <prvTraceStoreKernelCallWithParam+0x124>)
    5b9c:	0018      	movs	r0, r3
    5b9e:	4b3b      	ldr	r3, [pc, #236]	; (5c8c <prvTraceStoreKernelCallWithParam+0x120>)
    5ba0:	4798      	blx	r3
    5ba2:	e06d      	b.n	5c80 <prvTraceStoreKernelCallWithParam+0x114>
	TRACE_ASSERT(objectNumber <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[objectClass], "prvTraceStoreKernelCallWithParam: Invalid value for objectNumber", TRC_UNUSED);
    5ba4:	4b3b      	ldr	r3, [pc, #236]	; (5c94 <prvTraceStoreKernelCallWithParam+0x128>)
    5ba6:	681a      	ldr	r2, [r3, #0]
    5ba8:	230b      	movs	r3, #11
    5baa:	18fb      	adds	r3, r7, r3
    5bac:	781b      	ldrb	r3, [r3, #0]
    5bae:	2164      	movs	r1, #100	; 0x64
    5bb0:	18d3      	adds	r3, r2, r3
    5bb2:	185b      	adds	r3, r3, r1
    5bb4:	781b      	ldrb	r3, [r3, #0]
    5bb6:	001a      	movs	r2, r3
    5bb8:	687b      	ldr	r3, [r7, #4]
    5bba:	429a      	cmp	r2, r3
    5bbc:	d204      	bcs.n	5bc8 <prvTraceStoreKernelCallWithParam+0x5c>
    5bbe:	4b36      	ldr	r3, [pc, #216]	; (5c98 <prvTraceStoreKernelCallWithParam+0x12c>)
    5bc0:	0018      	movs	r0, r3
    5bc2:	4b32      	ldr	r3, [pc, #200]	; (5c8c <prvTraceStoreKernelCallWithParam+0x120>)
    5bc4:	4798      	blx	r3
    5bc6:	e05b      	b.n	5c80 <prvTraceStoreKernelCallWithParam+0x114>

	if (recorder_busy)
    5bc8:	4b34      	ldr	r3, [pc, #208]	; (5c9c <prvTraceStoreKernelCallWithParam+0x130>)
    5bca:	681b      	ldr	r3, [r3, #0]
    5bcc:	2b00      	cmp	r3, #0
    5bce:	d004      	beq.n	5bda <prvTraceStoreKernelCallWithParam+0x6e>
		* TRACE_EXIT_CRITICAL_SECTION). They must disable the RTOS tick interrupt
		* and any other ISRs that calls the trace recorder directly or via
		* traced kernel functions. The ARM port disables all interrupts using the
		* PRIMASK register to avoid this issue.
		*************************************************************************/
		prvTraceError("Recorder busy - high priority ISR using syscall? (3)");
    5bd0:	4b33      	ldr	r3, [pc, #204]	; (5ca0 <prvTraceStoreKernelCallWithParam+0x134>)
    5bd2:	0018      	movs	r0, r3
    5bd4:	4b2d      	ldr	r3, [pc, #180]	; (5c8c <prvTraceStoreKernelCallWithParam+0x120>)
    5bd6:	4798      	blx	r3
		return;
    5bd8:	e052      	b.n	5c80 <prvTraceStoreKernelCallWithParam+0x114>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    5bda:	f3ef 8310 	mrs	r3, PRIMASK
    5bde:	617b      	str	r3, [r7, #20]
  return(result);
    5be0:	697b      	ldr	r3, [r7, #20]
	}

	trcCRITICAL_SECTION_BEGIN();
    5be2:	627b      	str	r3, [r7, #36]	; 0x24
    5be4:	2301      	movs	r3, #1
    5be6:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
    5be8:	69bb      	ldr	r3, [r7, #24]
    5bea:	f383 8810 	msr	PRIMASK, r3
    5bee:	4b2b      	ldr	r3, [pc, #172]	; (5c9c <prvTraceStoreKernelCallWithParam+0x130>)
    5bf0:	681b      	ldr	r3, [r3, #0]
    5bf2:	1c5a      	adds	r2, r3, #1
    5bf4:	4b29      	ldr	r3, [pc, #164]	; (5c9c <prvTraceStoreKernelCallWithParam+0x130>)
    5bf6:	601a      	str	r2, [r3, #0]
	if (RecorderDataPtr->recorderActive && handle_of_last_logged_task)
    5bf8:	4b26      	ldr	r3, [pc, #152]	; (5c94 <prvTraceStoreKernelCallWithParam+0x128>)
    5bfa:	681b      	ldr	r3, [r3, #0]
    5bfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    5bfe:	2b00      	cmp	r3, #0
    5c00:	d034      	beq.n	5c6c <prvTraceStoreKernelCallWithParam+0x100>
    5c02:	4b28      	ldr	r3, [pc, #160]	; (5ca4 <prvTraceStoreKernelCallWithParam+0x138>)
    5c04:	781b      	ldrb	r3, [r3, #0]
    5c06:	2b00      	cmp	r3, #0
    5c08:	d030      	beq.n	5c6c <prvTraceStoreKernelCallWithParam+0x100>
	{
		dts2 = (uint8_t)prvTraceGetDTS(0xFF);
    5c0a:	20ff      	movs	r0, #255	; 0xff
    5c0c:	4b26      	ldr	r3, [pc, #152]	; (5ca8 <prvTraceStoreKernelCallWithParam+0x13c>)
    5c0e:	4798      	blx	r3
    5c10:	0003      	movs	r3, r0
    5c12:	001a      	movs	r2, r3
    5c14:	2323      	movs	r3, #35	; 0x23
    5c16:	18fb      	adds	r3, r7, r3
    5c18:	701a      	strb	r2, [r3, #0]
		p8 = (uint8_t) prvTraceGetParam(0xFF, param);
    5c1a:	683b      	ldr	r3, [r7, #0]
    5c1c:	0019      	movs	r1, r3
    5c1e:	20ff      	movs	r0, #255	; 0xff
    5c20:	4b22      	ldr	r3, [pc, #136]	; (5cac <prvTraceStoreKernelCallWithParam+0x140>)
    5c22:	4798      	blx	r3
    5c24:	0002      	movs	r2, r0
    5c26:	2322      	movs	r3, #34	; 0x22
    5c28:	18fb      	adds	r3, r7, r3
    5c2a:	701a      	strb	r2, [r3, #0]
		hnd8 = prvTraceGet8BitHandle((traceHandle)objectNumber);
    5c2c:	2321      	movs	r3, #33	; 0x21
    5c2e:	18fb      	adds	r3, r7, r3
    5c30:	687a      	ldr	r2, [r7, #4]
    5c32:	701a      	strb	r2, [r3, #0]
		kse = (KernelCallWithParamAndHandle*) prvTraceNextFreeEventBufferSlot();
    5c34:	4b1e      	ldr	r3, [pc, #120]	; (5cb0 <prvTraceStoreKernelCallWithParam+0x144>)
    5c36:	4798      	blx	r3
    5c38:	0003      	movs	r3, r0
    5c3a:	61fb      	str	r3, [r7, #28]
		if (kse != NULL)
    5c3c:	69fb      	ldr	r3, [r7, #28]
    5c3e:	2b00      	cmp	r3, #0
    5c40:	d014      	beq.n	5c6c <prvTraceStoreKernelCallWithParam+0x100>
		{
			kse->dts = dts2;
    5c42:	69fb      	ldr	r3, [r7, #28]
    5c44:	2223      	movs	r2, #35	; 0x23
    5c46:	18ba      	adds	r2, r7, r2
    5c48:	7812      	ldrb	r2, [r2, #0]
    5c4a:	70da      	strb	r2, [r3, #3]
			kse->type = (uint8_t)evtcode;
    5c4c:	68fb      	ldr	r3, [r7, #12]
    5c4e:	b2da      	uxtb	r2, r3
    5c50:	69fb      	ldr	r3, [r7, #28]
    5c52:	701a      	strb	r2, [r3, #0]
			kse->objHandle = hnd8;
    5c54:	69fb      	ldr	r3, [r7, #28]
    5c56:	2221      	movs	r2, #33	; 0x21
    5c58:	18ba      	adds	r2, r7, r2
    5c5a:	7812      	ldrb	r2, [r2, #0]
    5c5c:	705a      	strb	r2, [r3, #1]
			kse->param = p8;
    5c5e:	69fb      	ldr	r3, [r7, #28]
    5c60:	2222      	movs	r2, #34	; 0x22
    5c62:	18ba      	adds	r2, r7, r2
    5c64:	7812      	ldrb	r2, [r2, #0]
    5c66:	709a      	strb	r2, [r3, #2]
			prvTraceUpdateCounters();
    5c68:	4b12      	ldr	r3, [pc, #72]	; (5cb4 <prvTraceStoreKernelCallWithParam+0x148>)
    5c6a:	4798      	blx	r3
		}
	}
	trcCRITICAL_SECTION_END();
    5c6c:	4b0b      	ldr	r3, [pc, #44]	; (5c9c <prvTraceStoreKernelCallWithParam+0x130>)
    5c6e:	681b      	ldr	r3, [r3, #0]
    5c70:	1e5a      	subs	r2, r3, #1
    5c72:	4b0a      	ldr	r3, [pc, #40]	; (5c9c <prvTraceStoreKernelCallWithParam+0x130>)
    5c74:	601a      	str	r2, [r3, #0]
    5c76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    5c78:	613b      	str	r3, [r7, #16]
    5c7a:	693b      	ldr	r3, [r7, #16]
    5c7c:	f383 8810 	msr	PRIMASK, r3
}
    5c80:	46bd      	mov	sp, r7
    5c82:	b00a      	add	sp, #40	; 0x28
    5c84:	bd80      	pop	{r7, pc}
    5c86:	46c0      	nop			; (mov r8, r8)
    5c88:	00024254 	.word	0x00024254
    5c8c:	000068e1 	.word	0x000068e1
    5c90:	00024294 	.word	0x00024294
    5c94:	20000c58 	.word	0x20000c58
    5c98:	000242e4 	.word	0x000242e4
    5c9c:	20000bb0 	.word	0x20000bb0
    5ca0:	00024334 	.word	0x00024334
    5ca4:	20000bbc 	.word	0x20000bbc
    5ca8:	00006af5 	.word	0x00006af5
    5cac:	00005cb9 	.word	0x00005cb9
    5cb0:	00006499 	.word	0x00006499
    5cb4:	00006a9d 	.word	0x00006a9d

00005cb8 <prvTraceGetParam>:
 *
 * May only be called within a critical section!
 ******************************************************************************/
#if (TRC_CFG_SCHEDULING_ONLY == 0)
static uint32_t prvTraceGetParam(uint32_t param_max, uint32_t param)
{
    5cb8:	b580      	push	{r7, lr}
    5cba:	b084      	sub	sp, #16
    5cbc:	af00      	add	r7, sp, #0
    5cbe:	6078      	str	r0, [r7, #4]
    5cc0:	6039      	str	r1, [r7, #0]
	XPSEvent* xps;

	TRACE_ASSERT(param_max == 0xFF || param_max == 0xFFFF,
    5cc2:	687b      	ldr	r3, [r7, #4]
    5cc4:	2bff      	cmp	r3, #255	; 0xff
    5cc6:	d009      	beq.n	5cdc <prvTraceGetParam+0x24>
    5cc8:	687b      	ldr	r3, [r7, #4]
    5cca:	4a19      	ldr	r2, [pc, #100]	; (5d30 <prvTraceGetParam+0x78>)
    5ccc:	4293      	cmp	r3, r2
    5cce:	d005      	beq.n	5cdc <prvTraceGetParam+0x24>
    5cd0:	4b18      	ldr	r3, [pc, #96]	; (5d34 <prvTraceGetParam+0x7c>)
    5cd2:	0018      	movs	r0, r3
    5cd4:	4b18      	ldr	r3, [pc, #96]	; (5d38 <prvTraceGetParam+0x80>)
    5cd6:	4798      	blx	r3
    5cd8:	683b      	ldr	r3, [r7, #0]
    5cda:	e024      	b.n	5d26 <prvTraceGetParam+0x6e>
		"prvTraceGetParam: Invalid value for param_max", param);

	if (param <= param_max)
    5cdc:	683a      	ldr	r2, [r7, #0]
    5cde:	687b      	ldr	r3, [r7, #4]
    5ce0:	429a      	cmp	r2, r3
    5ce2:	d801      	bhi.n	5ce8 <prvTraceGetParam+0x30>
	{
		return param;
    5ce4:	683b      	ldr	r3, [r7, #0]
    5ce6:	e01e      	b.n	5d26 <prvTraceGetParam+0x6e>
	}
	else
	{
		xps = (XPSEvent*) prvTraceNextFreeEventBufferSlot();
    5ce8:	4b14      	ldr	r3, [pc, #80]	; (5d3c <prvTraceGetParam+0x84>)
    5cea:	4798      	blx	r3
    5cec:	0003      	movs	r3, r0
    5cee:	60fb      	str	r3, [r7, #12]
		if (xps != NULL)
    5cf0:	68fb      	ldr	r3, [r7, #12]
    5cf2:	2b00      	cmp	r3, #0
    5cf4:	d014      	beq.n	5d20 <prvTraceGetParam+0x68>
		{
			xps->type = DIV_XPS;
    5cf6:	68fb      	ldr	r3, [r7, #12]
    5cf8:	2201      	movs	r2, #1
    5cfa:	701a      	strb	r2, [r3, #0]
			xps->xps_8 = (uint8_t)((param & (0xFF00 & ~param_max)) >> 8);
    5cfc:	687b      	ldr	r3, [r7, #4]
    5cfe:	43db      	mvns	r3, r3
    5d00:	683a      	ldr	r2, [r7, #0]
    5d02:	4013      	ands	r3, r2
    5d04:	0a1b      	lsrs	r3, r3, #8
    5d06:	b2da      	uxtb	r2, r3
    5d08:	68fb      	ldr	r3, [r7, #12]
    5d0a:	705a      	strb	r2, [r3, #1]
			xps->xps_16 = (uint16_t)((param & (0xFFFF0000 & ~param_max)) >> 16);
    5d0c:	687b      	ldr	r3, [r7, #4]
    5d0e:	43db      	mvns	r3, r3
    5d10:	683a      	ldr	r2, [r7, #0]
    5d12:	4013      	ands	r3, r2
    5d14:	0c1b      	lsrs	r3, r3, #16
    5d16:	b29a      	uxth	r2, r3
    5d18:	68fb      	ldr	r3, [r7, #12]
    5d1a:	805a      	strh	r2, [r3, #2]
			prvTraceUpdateCounters();
    5d1c:	4b08      	ldr	r3, [pc, #32]	; (5d40 <prvTraceGetParam+0x88>)
    5d1e:	4798      	blx	r3
		}

		return param & param_max;
    5d20:	683b      	ldr	r3, [r7, #0]
    5d22:	687a      	ldr	r2, [r7, #4]
    5d24:	4013      	ands	r3, r2
	}
}
    5d26:	0018      	movs	r0, r3
    5d28:	46bd      	mov	sp, r7
    5d2a:	b004      	add	sp, #16
    5d2c:	bd80      	pop	{r7, pc}
    5d2e:	46c0      	nop			; (mov r8, r8)
    5d30:	0000ffff 	.word	0x0000ffff
    5d34:	0002436c 	.word	0x0002436c
    5d38:	000068e1 	.word	0x000068e1
    5d3c:	00006499 	.word	0x00006499
    5d40:	00006a9d 	.word	0x00006a9d

00005d44 <prvTraceStoreKernelCallWithNumericParamOnly>:
 * Used for storing kernel calls with numeric parameters only. This is
 * only used for traceTASK_DELAY and traceDELAY_UNTIL at the moment.
 ******************************************************************************/
#if (TRC_CFG_SCHEDULING_ONLY == 0)
void prvTraceStoreKernelCallWithNumericParamOnly(uint32_t evtcode, uint32_t param)
{
    5d44:	b580      	push	{r7, lr}
    5d46:	b08a      	sub	sp, #40	; 0x28
    5d48:	af00      	add	r7, sp, #0
    5d4a:	6078      	str	r0, [r7, #4]
    5d4c:	6039      	str	r1, [r7, #0]
	KernelCallWithParam16 * kse;
	uint8_t dts6;
	uint16_t restParam;
	TRACE_ALLOC_CRITICAL_SECTION();

	restParam = 0;
    5d4e:	2326      	movs	r3, #38	; 0x26
    5d50:	18fb      	adds	r3, r7, r3
    5d52:	2200      	movs	r2, #0
    5d54:	801a      	strh	r2, [r3, #0]

	TRACE_ASSERT(evtcode < 0xFF, "prvTraceStoreKernelCallWithNumericParamOnly: Invalid value for evtcode", TRC_UNUSED);
    5d56:	687b      	ldr	r3, [r7, #4]
    5d58:	2bfe      	cmp	r3, #254	; 0xfe
    5d5a:	d904      	bls.n	5d66 <prvTraceStoreKernelCallWithNumericParamOnly+0x22>
    5d5c:	4b2d      	ldr	r3, [pc, #180]	; (5e14 <prvTraceStoreKernelCallWithNumericParamOnly+0xd0>)
    5d5e:	0018      	movs	r0, r3
    5d60:	4b2d      	ldr	r3, [pc, #180]	; (5e18 <prvTraceStoreKernelCallWithNumericParamOnly+0xd4>)
    5d62:	4798      	blx	r3
    5d64:	e053      	b.n	5e0e <prvTraceStoreKernelCallWithNumericParamOnly+0xca>

	if (recorder_busy)
    5d66:	4b2d      	ldr	r3, [pc, #180]	; (5e1c <prvTraceStoreKernelCallWithNumericParamOnly+0xd8>)
    5d68:	681b      	ldr	r3, [r3, #0]
    5d6a:	2b00      	cmp	r3, #0
    5d6c:	d004      	beq.n	5d78 <prvTraceStoreKernelCallWithNumericParamOnly+0x34>
		* TRACE_EXIT_CRITICAL_SECTION). They must disable the RTOS tick interrupt
		* and any other ISRs that calls the trace recorder directly or via
		* traced kernel functions. The ARM port disables all interrupts using the
		* PRIMASK register to avoid this issue.
		*************************************************************************/
		prvTraceError("Recorder busy - high priority ISR using syscall? (4)");
    5d6e:	4b2c      	ldr	r3, [pc, #176]	; (5e20 <prvTraceStoreKernelCallWithNumericParamOnly+0xdc>)
    5d70:	0018      	movs	r0, r3
    5d72:	4b29      	ldr	r3, [pc, #164]	; (5e18 <prvTraceStoreKernelCallWithNumericParamOnly+0xd4>)
    5d74:	4798      	blx	r3
		return;
    5d76:	e04a      	b.n	5e0e <prvTraceStoreKernelCallWithNumericParamOnly+0xca>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    5d78:	f3ef 8310 	mrs	r3, PRIMASK
    5d7c:	613b      	str	r3, [r7, #16]
  return(result);
    5d7e:	693b      	ldr	r3, [r7, #16]
	}

	trcCRITICAL_SECTION_BEGIN();
    5d80:	623b      	str	r3, [r7, #32]
    5d82:	2301      	movs	r3, #1
    5d84:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
    5d86:	697b      	ldr	r3, [r7, #20]
    5d88:	f383 8810 	msr	PRIMASK, r3
    5d8c:	4b23      	ldr	r3, [pc, #140]	; (5e1c <prvTraceStoreKernelCallWithNumericParamOnly+0xd8>)
    5d8e:	681b      	ldr	r3, [r3, #0]
    5d90:	1c5a      	adds	r2, r3, #1
    5d92:	4b22      	ldr	r3, [pc, #136]	; (5e1c <prvTraceStoreKernelCallWithNumericParamOnly+0xd8>)
    5d94:	601a      	str	r2, [r3, #0]
	if (RecorderDataPtr->recorderActive && handle_of_last_logged_task)
    5d96:	4b23      	ldr	r3, [pc, #140]	; (5e24 <prvTraceStoreKernelCallWithNumericParamOnly+0xe0>)
    5d98:	681b      	ldr	r3, [r3, #0]
    5d9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    5d9c:	2b00      	cmp	r3, #0
    5d9e:	d02c      	beq.n	5dfa <prvTraceStoreKernelCallWithNumericParamOnly+0xb6>
    5da0:	4b21      	ldr	r3, [pc, #132]	; (5e28 <prvTraceStoreKernelCallWithNumericParamOnly+0xe4>)
    5da2:	781b      	ldrb	r3, [r3, #0]
    5da4:	2b00      	cmp	r3, #0
    5da6:	d028      	beq.n	5dfa <prvTraceStoreKernelCallWithNumericParamOnly+0xb6>
	{
		dts6 = (uint8_t)prvTraceGetDTS(0xFF);
    5da8:	20ff      	movs	r0, #255	; 0xff
    5daa:	4b20      	ldr	r3, [pc, #128]	; (5e2c <prvTraceStoreKernelCallWithNumericParamOnly+0xe8>)
    5dac:	4798      	blx	r3
    5dae:	0003      	movs	r3, r0
    5db0:	001a      	movs	r2, r3
    5db2:	231f      	movs	r3, #31
    5db4:	18fb      	adds	r3, r7, r3
    5db6:	701a      	strb	r2, [r3, #0]
		restParam = (uint16_t)prvTraceGetParam(0xFFFF, param);
    5db8:	683b      	ldr	r3, [r7, #0]
    5dba:	4a1d      	ldr	r2, [pc, #116]	; (5e30 <prvTraceStoreKernelCallWithNumericParamOnly+0xec>)
    5dbc:	0019      	movs	r1, r3
    5dbe:	0010      	movs	r0, r2
    5dc0:	4b1c      	ldr	r3, [pc, #112]	; (5e34 <prvTraceStoreKernelCallWithNumericParamOnly+0xf0>)
    5dc2:	4798      	blx	r3
    5dc4:	0002      	movs	r2, r0
    5dc6:	2326      	movs	r3, #38	; 0x26
    5dc8:	18fb      	adds	r3, r7, r3
    5dca:	801a      	strh	r2, [r3, #0]
		kse = (KernelCallWithParam16*) prvTraceNextFreeEventBufferSlot();
    5dcc:	4b1a      	ldr	r3, [pc, #104]	; (5e38 <prvTraceStoreKernelCallWithNumericParamOnly+0xf4>)
    5dce:	4798      	blx	r3
    5dd0:	0003      	movs	r3, r0
    5dd2:	61bb      	str	r3, [r7, #24]
		if (kse != NULL)
    5dd4:	69bb      	ldr	r3, [r7, #24]
    5dd6:	2b00      	cmp	r3, #0
    5dd8:	d00f      	beq.n	5dfa <prvTraceStoreKernelCallWithNumericParamOnly+0xb6>
		{
			kse->dts = dts6;
    5dda:	69bb      	ldr	r3, [r7, #24]
    5ddc:	221f      	movs	r2, #31
    5dde:	18ba      	adds	r2, r7, r2
    5de0:	7812      	ldrb	r2, [r2, #0]
    5de2:	705a      	strb	r2, [r3, #1]
			kse->type = (uint8_t)evtcode;
    5de4:	687b      	ldr	r3, [r7, #4]
    5de6:	b2da      	uxtb	r2, r3
    5de8:	69bb      	ldr	r3, [r7, #24]
    5dea:	701a      	strb	r2, [r3, #0]
			kse->param = restParam;
    5dec:	69bb      	ldr	r3, [r7, #24]
    5dee:	2226      	movs	r2, #38	; 0x26
    5df0:	18ba      	adds	r2, r7, r2
    5df2:	8812      	ldrh	r2, [r2, #0]
    5df4:	805a      	strh	r2, [r3, #2]
			prvTraceUpdateCounters();
    5df6:	4b11      	ldr	r3, [pc, #68]	; (5e3c <prvTraceStoreKernelCallWithNumericParamOnly+0xf8>)
    5df8:	4798      	blx	r3
		}
	}
	trcCRITICAL_SECTION_END();
    5dfa:	4b08      	ldr	r3, [pc, #32]	; (5e1c <prvTraceStoreKernelCallWithNumericParamOnly+0xd8>)
    5dfc:	681b      	ldr	r3, [r3, #0]
    5dfe:	1e5a      	subs	r2, r3, #1
    5e00:	4b06      	ldr	r3, [pc, #24]	; (5e1c <prvTraceStoreKernelCallWithNumericParamOnly+0xd8>)
    5e02:	601a      	str	r2, [r3, #0]
    5e04:	6a3b      	ldr	r3, [r7, #32]
    5e06:	60fb      	str	r3, [r7, #12]
    5e08:	68fb      	ldr	r3, [r7, #12]
    5e0a:	f383 8810 	msr	PRIMASK, r3
}
    5e0e:	46bd      	mov	sp, r7
    5e10:	b00a      	add	sp, #40	; 0x28
    5e12:	bd80      	pop	{r7, pc}
    5e14:	000243a8 	.word	0x000243a8
    5e18:	000068e1 	.word	0x000068e1
    5e1c:	20000bb0 	.word	0x20000bb0
    5e20:	00024400 	.word	0x00024400
    5e24:	20000c58 	.word	0x20000c58
    5e28:	20000bbc 	.word	0x20000bbc
    5e2c:	00006af5 	.word	0x00006af5
    5e30:	0000ffff 	.word	0x0000ffff
    5e34:	00005cb9 	.word	0x00005cb9
    5e38:	00006499 	.word	0x00006499
    5e3c:	00006a9d 	.word	0x00006a9d

00005e40 <prvTraceStoreTaskswitch>:
 * prvTraceStoreTaskswitch
 * Called by the scheduler from the SWITCHED_OUT hook, and by uiTraceStart.
 * At this point interrupts are assumed to be disabled!
 ******************************************************************************/
void prvTraceStoreTaskswitch(traceHandle task_handle)
{
    5e40:	b590      	push	{r4, r7, lr}
    5e42:	b089      	sub	sp, #36	; 0x24
    5e44:	af00      	add	r7, sp, #0
    5e46:	0002      	movs	r2, r0
    5e48:	1dfb      	adds	r3, r7, #7
    5e4a:	701a      	strb	r2, [r3, #0]
#if (TRC_CFG_INCLUDE_ISR_TRACING == 1)
	extern int32_t isPendingContextSwitch;
#endif
	trcSR_ALLOC_CRITICAL_SECTION_ON_CORTEX_M_ONLY();

	TRACE_ASSERT(task_handle <= (TRC_CFG_NTASK),
    5e4c:	1dfb      	adds	r3, r7, #7
    5e4e:	781b      	ldrb	r3, [r3, #0]
    5e50:	2b0f      	cmp	r3, #15
    5e52:	d904      	bls.n	5e5e <prvTraceStoreTaskswitch+0x1e>
    5e54:	4b34      	ldr	r3, [pc, #208]	; (5f28 <prvTraceStoreTaskswitch+0xe8>)
    5e56:	0018      	movs	r0, r3
    5e58:	4b34      	ldr	r3, [pc, #208]	; (5f2c <prvTraceStoreTaskswitch+0xec>)
    5e5a:	4798      	blx	r3
    5e5c:	e061      	b.n	5f22 <prvTraceStoreTaskswitch+0xe2>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    5e5e:	f3ef 8310 	mrs	r3, PRIMASK
    5e62:	60fb      	str	r3, [r7, #12]
  return(result);
    5e64:	68fb      	ldr	r3, [r7, #12]
		"prvTraceStoreTaskswitch: Invalid value for task_handle", TRC_UNUSED);

	trcCRITICAL_SECTION_BEGIN_ON_CORTEX_M_ONLY();
    5e66:	61fb      	str	r3, [r7, #28]
    5e68:	2301      	movs	r3, #1
    5e6a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
    5e6c:	693b      	ldr	r3, [r7, #16]
    5e6e:	f383 8810 	msr	PRIMASK, r3
    5e72:	4b2f      	ldr	r3, [pc, #188]	; (5f30 <prvTraceStoreTaskswitch+0xf0>)
    5e74:	681b      	ldr	r3, [r3, #0]
    5e76:	1c5a      	adds	r2, r3, #1
    5e78:	4b2d      	ldr	r3, [pc, #180]	; (5f30 <prvTraceStoreTaskswitch+0xf0>)
    5e7a:	601a      	str	r2, [r3, #0]

	if ((task_handle != handle_of_last_logged_task) && (RecorderDataPtr->recorderActive))
    5e7c:	4b2d      	ldr	r3, [pc, #180]	; (5f34 <prvTraceStoreTaskswitch+0xf4>)
    5e7e:	781b      	ldrb	r3, [r3, #0]
    5e80:	1dfa      	adds	r2, r7, #7
    5e82:	7812      	ldrb	r2, [r2, #0]
    5e84:	429a      	cmp	r2, r3
    5e86:	d042      	beq.n	5f0e <prvTraceStoreTaskswitch+0xce>
    5e88:	4b2b      	ldr	r3, [pc, #172]	; (5f38 <prvTraceStoreTaskswitch+0xf8>)
    5e8a:	681b      	ldr	r3, [r3, #0]
    5e8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    5e8e:	2b00      	cmp	r3, #0
    5e90:	d03d      	beq.n	5f0e <prvTraceStoreTaskswitch+0xce>
	{
#if (TRC_CFG_INCLUDE_ISR_TRACING == 1)
		isPendingContextSwitch = 0;
    5e92:	4b2a      	ldr	r3, [pc, #168]	; (5f3c <prvTraceStoreTaskswitch+0xfc>)
    5e94:	2200      	movs	r2, #0
    5e96:	601a      	str	r2, [r3, #0]
#endif

		dts3 = (uint16_t)prvTraceGetDTS(0xFFFF);
    5e98:	231a      	movs	r3, #26
    5e9a:	18fc      	adds	r4, r7, r3
    5e9c:	4b28      	ldr	r3, [pc, #160]	; (5f40 <prvTraceStoreTaskswitch+0x100>)
    5e9e:	0018      	movs	r0, r3
    5ea0:	4b28      	ldr	r3, [pc, #160]	; (5f44 <prvTraceStoreTaskswitch+0x104>)
    5ea2:	4798      	blx	r3
    5ea4:	0003      	movs	r3, r0
    5ea6:	8023      	strh	r3, [r4, #0]
		handle_of_last_logged_task = task_handle;
    5ea8:	4b22      	ldr	r3, [pc, #136]	; (5f34 <prvTraceStoreTaskswitch+0xf4>)
    5eaa:	1dfa      	adds	r2, r7, #7
    5eac:	7812      	ldrb	r2, [r2, #0]
    5eae:	701a      	strb	r2, [r3, #0]
		hnd8 = prvTraceGet8BitHandle(handle_of_last_logged_task);
    5eb0:	2319      	movs	r3, #25
    5eb2:	18fb      	adds	r3, r7, r3
    5eb4:	4a1f      	ldr	r2, [pc, #124]	; (5f34 <prvTraceStoreTaskswitch+0xf4>)
    5eb6:	7812      	ldrb	r2, [r2, #0]
    5eb8:	701a      	strb	r2, [r3, #0]
		ts = (TSEvent*)prvTraceNextFreeEventBufferSlot();
    5eba:	4b23      	ldr	r3, [pc, #140]	; (5f48 <prvTraceStoreTaskswitch+0x108>)
    5ebc:	4798      	blx	r3
    5ebe:	0003      	movs	r3, r0
    5ec0:	617b      	str	r3, [r7, #20]

		if (ts != NULL)
    5ec2:	697b      	ldr	r3, [r7, #20]
    5ec4:	2b00      	cmp	r3, #0
    5ec6:	d022      	beq.n	5f0e <prvTraceStoreTaskswitch+0xce>
		{
			if (prvTraceGetObjectState(TRACE_CLASS_TASK,
    5ec8:	4b1a      	ldr	r3, [pc, #104]	; (5f34 <prvTraceStoreTaskswitch+0xf4>)
    5eca:	781b      	ldrb	r3, [r3, #0]
    5ecc:	0019      	movs	r1, r3
    5ece:	2003      	movs	r0, #3
    5ed0:	4b1e      	ldr	r3, [pc, #120]	; (5f4c <prvTraceStoreTaskswitch+0x10c>)
    5ed2:	4798      	blx	r3
    5ed4:	0003      	movs	r3, r0
    5ed6:	2b01      	cmp	r3, #1
    5ed8:	d103      	bne.n	5ee2 <prvTraceStoreTaskswitch+0xa2>
				handle_of_last_logged_task) == TASK_STATE_INSTANCE_ACTIVE)
			{
				ts->type = TS_TASK_RESUME;
    5eda:	697b      	ldr	r3, [r7, #20]
    5edc:	2207      	movs	r2, #7
    5ede:	701a      	strb	r2, [r3, #0]
    5ee0:	e002      	b.n	5ee8 <prvTraceStoreTaskswitch+0xa8>
			}
			else
			{
				ts->type = TS_TASK_BEGIN;
    5ee2:	697b      	ldr	r3, [r7, #20]
    5ee4:	2206      	movs	r2, #6
    5ee6:	701a      	strb	r2, [r3, #0]
			}

			ts->dts = dts3;
    5ee8:	697b      	ldr	r3, [r7, #20]
    5eea:	221a      	movs	r2, #26
    5eec:	18ba      	adds	r2, r7, r2
    5eee:	8812      	ldrh	r2, [r2, #0]
    5ef0:	805a      	strh	r2, [r3, #2]
			ts->objHandle = hnd8;
    5ef2:	697b      	ldr	r3, [r7, #20]
    5ef4:	2219      	movs	r2, #25
    5ef6:	18ba      	adds	r2, r7, r2
    5ef8:	7812      	ldrb	r2, [r2, #0]
    5efa:	705a      	strb	r2, [r3, #1]

			prvTraceSetObjectState(TRACE_CLASS_TASK,
    5efc:	4b0d      	ldr	r3, [pc, #52]	; (5f34 <prvTraceStoreTaskswitch+0xf4>)
    5efe:	781b      	ldrb	r3, [r3, #0]
    5f00:	2201      	movs	r2, #1
    5f02:	0019      	movs	r1, r3
    5f04:	2003      	movs	r0, #3
    5f06:	4b12      	ldr	r3, [pc, #72]	; (5f50 <prvTraceStoreTaskswitch+0x110>)
    5f08:	4798      	blx	r3
									handle_of_last_logged_task,
									TASK_STATE_INSTANCE_ACTIVE);

			prvTraceUpdateCounters();
    5f0a:	4b12      	ldr	r3, [pc, #72]	; (5f54 <prvTraceStoreTaskswitch+0x114>)
    5f0c:	4798      	blx	r3
		}
	}

	trcCRITICAL_SECTION_END_ON_CORTEX_M_ONLY();
    5f0e:	4b08      	ldr	r3, [pc, #32]	; (5f30 <prvTraceStoreTaskswitch+0xf0>)
    5f10:	681b      	ldr	r3, [r3, #0]
    5f12:	1e5a      	subs	r2, r3, #1
    5f14:	4b06      	ldr	r3, [pc, #24]	; (5f30 <prvTraceStoreTaskswitch+0xf0>)
    5f16:	601a      	str	r2, [r3, #0]
    5f18:	69fb      	ldr	r3, [r7, #28]
    5f1a:	60bb      	str	r3, [r7, #8]
    5f1c:	68bb      	ldr	r3, [r7, #8]
    5f1e:	f383 8810 	msr	PRIMASK, r3
}
    5f22:	46bd      	mov	sp, r7
    5f24:	b009      	add	sp, #36	; 0x24
    5f26:	bd90      	pop	{r4, r7, pc}
    5f28:	00024438 	.word	0x00024438
    5f2c:	000068e1 	.word	0x000068e1
    5f30:	20000bb0 	.word	0x20000bb0
    5f34:	20000bbc 	.word	0x20000bbc
    5f38:	20000c58 	.word	0x20000c58
    5f3c:	20000b9c 	.word	0x20000b9c
    5f40:	0000ffff 	.word	0x0000ffff
    5f44:	00006af5 	.word	0x00006af5
    5f48:	00006499 	.word	0x00006499
    5f4c:	0000613d 	.word	0x0000613d
    5f50:	00006099 	.word	0x00006099
    5f54:	00006a9d 	.word	0x00006a9d

00005f58 <prvTraceSetPriorityProperty>:
		}
	}
}

void prvTraceSetPriorityProperty(uint8_t objectclass, traceHandle id, uint8_t value)
{
    5f58:	b590      	push	{r4, r7, lr}
    5f5a:	b083      	sub	sp, #12
    5f5c:	af00      	add	r7, sp, #0
    5f5e:	0004      	movs	r4, r0
    5f60:	0008      	movs	r0, r1
    5f62:	0011      	movs	r1, r2
    5f64:	1dfb      	adds	r3, r7, #7
    5f66:	1c22      	adds	r2, r4, #0
    5f68:	701a      	strb	r2, [r3, #0]
    5f6a:	1dbb      	adds	r3, r7, #6
    5f6c:	1c02      	adds	r2, r0, #0
    5f6e:	701a      	strb	r2, [r3, #0]
    5f70:	1d7b      	adds	r3, r7, #5
    5f72:	1c0a      	adds	r2, r1, #0
    5f74:	701a      	strb	r2, [r3, #0]
	TRACE_ASSERT(objectclass < TRACE_NCLASSES,
    5f76:	1dfb      	adds	r3, r7, #7
    5f78:	781b      	ldrb	r3, [r3, #0]
    5f7a:	2b08      	cmp	r3, #8
    5f7c:	d904      	bls.n	5f88 <prvTraceSetPriorityProperty+0x30>
    5f7e:	4b1a      	ldr	r3, [pc, #104]	; (5fe8 <prvTraceSetPriorityProperty+0x90>)
    5f80:	0018      	movs	r0, r3
    5f82:	4b1a      	ldr	r3, [pc, #104]	; (5fec <prvTraceSetPriorityProperty+0x94>)
    5f84:	4798      	blx	r3
    5f86:	e02c      	b.n	5fe2 <prvTraceSetPriorityProperty+0x8a>
		"prvTraceSetPriorityProperty: objectclass >= TRACE_NCLASSES", TRC_UNUSED);
	TRACE_ASSERT(id <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[objectclass],
    5f88:	4b19      	ldr	r3, [pc, #100]	; (5ff0 <prvTraceSetPriorityProperty+0x98>)
    5f8a:	681a      	ldr	r2, [r3, #0]
    5f8c:	1dfb      	adds	r3, r7, #7
    5f8e:	781b      	ldrb	r3, [r3, #0]
    5f90:	2164      	movs	r1, #100	; 0x64
    5f92:	18d3      	adds	r3, r2, r3
    5f94:	185b      	adds	r3, r3, r1
    5f96:	781b      	ldrb	r3, [r3, #0]
    5f98:	1dba      	adds	r2, r7, #6
    5f9a:	7812      	ldrb	r2, [r2, #0]
    5f9c:	429a      	cmp	r2, r3
    5f9e:	d904      	bls.n	5faa <prvTraceSetPriorityProperty+0x52>
    5fa0:	4b14      	ldr	r3, [pc, #80]	; (5ff4 <prvTraceSetPriorityProperty+0x9c>)
    5fa2:	0018      	movs	r0, r3
    5fa4:	4b11      	ldr	r3, [pc, #68]	; (5fec <prvTraceSetPriorityProperty+0x94>)
    5fa6:	4798      	blx	r3
    5fa8:	e01b      	b.n	5fe2 <prvTraceSetPriorityProperty+0x8a>
		"prvTraceSetPriorityProperty: Invalid value for id", TRC_UNUSED);

	TRACE_PROPERTY_ACTOR_PRIORITY(objectclass, id) = value;
    5faa:	4b11      	ldr	r3, [pc, #68]	; (5ff0 <prvTraceSetPriorityProperty+0x98>)
    5fac:	681c      	ldr	r4, [r3, #0]
    5fae:	1dfb      	adds	r3, r7, #7
    5fb0:	781a      	ldrb	r2, [r3, #0]
    5fb2:	1dbb      	adds	r3, r7, #6
    5fb4:	781b      	ldrb	r3, [r3, #0]
    5fb6:	0011      	movs	r1, r2
    5fb8:	0018      	movs	r0, r3
    5fba:	4b0f      	ldr	r3, [pc, #60]	; (5ff8 <prvTraceSetPriorityProperty+0xa0>)
    5fbc:	4798      	blx	r3
    5fbe:	0003      	movs	r3, r0
    5fc0:	0018      	movs	r0, r3
    5fc2:	4b0b      	ldr	r3, [pc, #44]	; (5ff0 <prvTraceSetPriorityProperty+0x98>)
    5fc4:	681a      	ldr	r2, [r3, #0]
    5fc6:	1dfb      	adds	r3, r7, #7
    5fc8:	781b      	ldrb	r3, [r3, #0]
    5fca:	2170      	movs	r1, #112	; 0x70
    5fcc:	18d3      	adds	r3, r2, r3
    5fce:	185b      	adds	r3, r3, r1
    5fd0:	781b      	ldrb	r3, [r3, #0]
    5fd2:	18c3      	adds	r3, r0, r3
    5fd4:	3301      	adds	r3, #1
    5fd6:	229c      	movs	r2, #156	; 0x9c
    5fd8:	18e3      	adds	r3, r4, r3
    5fda:	189b      	adds	r3, r3, r2
    5fdc:	1d7a      	adds	r2, r7, #5
    5fde:	7812      	ldrb	r2, [r2, #0]
    5fe0:	701a      	strb	r2, [r3, #0]
}
    5fe2:	46bd      	mov	sp, r7
    5fe4:	b003      	add	sp, #12
    5fe6:	bd90      	pop	{r4, r7, pc}
    5fe8:	000245cc 	.word	0x000245cc
    5fec:	000068e1 	.word	0x000068e1
    5ff0:	20000c58 	.word	0x20000c58
    5ff4:	00024618 	.word	0x00024618
    5ff8:	000064ed 	.word	0x000064ed

00005ffc <prvTraceGetPriorityProperty>:

uint8_t prvTraceGetPriorityProperty(uint8_t objectclass, traceHandle id)
{
    5ffc:	b590      	push	{r4, r7, lr}
    5ffe:	b083      	sub	sp, #12
    6000:	af00      	add	r7, sp, #0
    6002:	0002      	movs	r2, r0
    6004:	1dfb      	adds	r3, r7, #7
    6006:	701a      	strb	r2, [r3, #0]
    6008:	1dbb      	adds	r3, r7, #6
    600a:	1c0a      	adds	r2, r1, #0
    600c:	701a      	strb	r2, [r3, #0]
	TRACE_ASSERT(objectclass < TRACE_NCLASSES,
    600e:	1dfb      	adds	r3, r7, #7
    6010:	781b      	ldrb	r3, [r3, #0]
    6012:	2b08      	cmp	r3, #8
    6014:	d905      	bls.n	6022 <prvTraceGetPriorityProperty+0x26>
    6016:	4b1b      	ldr	r3, [pc, #108]	; (6084 <prvTraceGetPriorityProperty+0x88>)
    6018:	0018      	movs	r0, r3
    601a:	4b1b      	ldr	r3, [pc, #108]	; (6088 <prvTraceGetPriorityProperty+0x8c>)
    601c:	4798      	blx	r3
    601e:	2300      	movs	r3, #0
    6020:	e02b      	b.n	607a <prvTraceGetPriorityProperty+0x7e>
		"prvTraceGetPriorityProperty: objectclass >= TRACE_NCLASSES", 0);
	TRACE_ASSERT(id <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[objectclass],
    6022:	4b1a      	ldr	r3, [pc, #104]	; (608c <prvTraceGetPriorityProperty+0x90>)
    6024:	681a      	ldr	r2, [r3, #0]
    6026:	1dfb      	adds	r3, r7, #7
    6028:	781b      	ldrb	r3, [r3, #0]
    602a:	2164      	movs	r1, #100	; 0x64
    602c:	18d3      	adds	r3, r2, r3
    602e:	185b      	adds	r3, r3, r1
    6030:	781b      	ldrb	r3, [r3, #0]
    6032:	1dba      	adds	r2, r7, #6
    6034:	7812      	ldrb	r2, [r2, #0]
    6036:	429a      	cmp	r2, r3
    6038:	d905      	bls.n	6046 <prvTraceGetPriorityProperty+0x4a>
    603a:	4b15      	ldr	r3, [pc, #84]	; (6090 <prvTraceGetPriorityProperty+0x94>)
    603c:	0018      	movs	r0, r3
    603e:	4b12      	ldr	r3, [pc, #72]	; (6088 <prvTraceGetPriorityProperty+0x8c>)
    6040:	4798      	blx	r3
    6042:	2300      	movs	r3, #0
    6044:	e019      	b.n	607a <prvTraceGetPriorityProperty+0x7e>
		"prvTraceGetPriorityProperty: Invalid value for id", 0);

	return TRACE_PROPERTY_ACTOR_PRIORITY(objectclass, id);
    6046:	4b11      	ldr	r3, [pc, #68]	; (608c <prvTraceGetPriorityProperty+0x90>)
    6048:	681c      	ldr	r4, [r3, #0]
    604a:	1dfb      	adds	r3, r7, #7
    604c:	781a      	ldrb	r2, [r3, #0]
    604e:	1dbb      	adds	r3, r7, #6
    6050:	781b      	ldrb	r3, [r3, #0]
    6052:	0011      	movs	r1, r2
    6054:	0018      	movs	r0, r3
    6056:	4b0f      	ldr	r3, [pc, #60]	; (6094 <prvTraceGetPriorityProperty+0x98>)
    6058:	4798      	blx	r3
    605a:	0003      	movs	r3, r0
    605c:	0018      	movs	r0, r3
    605e:	4b0b      	ldr	r3, [pc, #44]	; (608c <prvTraceGetPriorityProperty+0x90>)
    6060:	681a      	ldr	r2, [r3, #0]
    6062:	1dfb      	adds	r3, r7, #7
    6064:	781b      	ldrb	r3, [r3, #0]
    6066:	2170      	movs	r1, #112	; 0x70
    6068:	18d3      	adds	r3, r2, r3
    606a:	185b      	adds	r3, r3, r1
    606c:	781b      	ldrb	r3, [r3, #0]
    606e:	18c3      	adds	r3, r0, r3
    6070:	3301      	adds	r3, #1
    6072:	229c      	movs	r2, #156	; 0x9c
    6074:	18e3      	adds	r3, r4, r3
    6076:	189b      	adds	r3, r3, r2
    6078:	781b      	ldrb	r3, [r3, #0]
}
    607a:	0018      	movs	r0, r3
    607c:	46bd      	mov	sp, r7
    607e:	b003      	add	sp, #12
    6080:	bd90      	pop	{r4, r7, pc}
    6082:	46c0      	nop			; (mov r8, r8)
    6084:	00024658 	.word	0x00024658
    6088:	000068e1 	.word	0x000068e1
    608c:	20000c58 	.word	0x20000c58
    6090:	000246a4 	.word	0x000246a4
    6094:	000064ed 	.word	0x000064ed

00006098 <prvTraceSetObjectState>:

void prvTraceSetObjectState(uint8_t objectclass, traceHandle id, uint8_t value)
{
    6098:	b590      	push	{r4, r7, lr}
    609a:	b083      	sub	sp, #12
    609c:	af00      	add	r7, sp, #0
    609e:	0004      	movs	r4, r0
    60a0:	0008      	movs	r0, r1
    60a2:	0011      	movs	r1, r2
    60a4:	1dfb      	adds	r3, r7, #7
    60a6:	1c22      	adds	r2, r4, #0
    60a8:	701a      	strb	r2, [r3, #0]
    60aa:	1dbb      	adds	r3, r7, #6
    60ac:	1c02      	adds	r2, r0, #0
    60ae:	701a      	strb	r2, [r3, #0]
    60b0:	1d7b      	adds	r3, r7, #5
    60b2:	1c0a      	adds	r2, r1, #0
    60b4:	701a      	strb	r2, [r3, #0]
	TRACE_ASSERT(objectclass < TRACE_NCLASSES,
    60b6:	1dfb      	adds	r3, r7, #7
    60b8:	781b      	ldrb	r3, [r3, #0]
    60ba:	2b08      	cmp	r3, #8
    60bc:	d904      	bls.n	60c8 <prvTraceSetObjectState+0x30>
    60be:	4b1a      	ldr	r3, [pc, #104]	; (6128 <prvTraceSetObjectState+0x90>)
    60c0:	0018      	movs	r0, r3
    60c2:	4b1a      	ldr	r3, [pc, #104]	; (612c <prvTraceSetObjectState+0x94>)
    60c4:	4798      	blx	r3
    60c6:	e02b      	b.n	6120 <prvTraceSetObjectState+0x88>
		"prvTraceSetObjectState: objectclass >= TRACE_NCLASSES", TRC_UNUSED);
	TRACE_ASSERT(id <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[objectclass],
    60c8:	4b19      	ldr	r3, [pc, #100]	; (6130 <prvTraceSetObjectState+0x98>)
    60ca:	681a      	ldr	r2, [r3, #0]
    60cc:	1dfb      	adds	r3, r7, #7
    60ce:	781b      	ldrb	r3, [r3, #0]
    60d0:	2164      	movs	r1, #100	; 0x64
    60d2:	18d3      	adds	r3, r2, r3
    60d4:	185b      	adds	r3, r3, r1
    60d6:	781b      	ldrb	r3, [r3, #0]
    60d8:	1dba      	adds	r2, r7, #6
    60da:	7812      	ldrb	r2, [r2, #0]
    60dc:	429a      	cmp	r2, r3
    60de:	d904      	bls.n	60ea <prvTraceSetObjectState+0x52>
    60e0:	4b14      	ldr	r3, [pc, #80]	; (6134 <prvTraceSetObjectState+0x9c>)
    60e2:	0018      	movs	r0, r3
    60e4:	4b11      	ldr	r3, [pc, #68]	; (612c <prvTraceSetObjectState+0x94>)
    60e6:	4798      	blx	r3
    60e8:	e01a      	b.n	6120 <prvTraceSetObjectState+0x88>
		"prvTraceSetObjectState: Invalid value for id", TRC_UNUSED);

	TRACE_PROPERTY_OBJECT_STATE(objectclass, id) = value;
    60ea:	4b11      	ldr	r3, [pc, #68]	; (6130 <prvTraceSetObjectState+0x98>)
    60ec:	681c      	ldr	r4, [r3, #0]
    60ee:	1dfb      	adds	r3, r7, #7
    60f0:	781a      	ldrb	r2, [r3, #0]
    60f2:	1dbb      	adds	r3, r7, #6
    60f4:	781b      	ldrb	r3, [r3, #0]
    60f6:	0011      	movs	r1, r2
    60f8:	0018      	movs	r0, r3
    60fa:	4b0f      	ldr	r3, [pc, #60]	; (6138 <prvTraceSetObjectState+0xa0>)
    60fc:	4798      	blx	r3
    60fe:	0003      	movs	r3, r0
    6100:	0018      	movs	r0, r3
    6102:	4b0b      	ldr	r3, [pc, #44]	; (6130 <prvTraceSetObjectState+0x98>)
    6104:	681a      	ldr	r2, [r3, #0]
    6106:	1dfb      	adds	r3, r7, #7
    6108:	781b      	ldrb	r3, [r3, #0]
    610a:	2170      	movs	r1, #112	; 0x70
    610c:	18d3      	adds	r3, r2, r3
    610e:	185b      	adds	r3, r3, r1
    6110:	781b      	ldrb	r3, [r3, #0]
    6112:	18c3      	adds	r3, r0, r3
    6114:	229c      	movs	r2, #156	; 0x9c
    6116:	18e3      	adds	r3, r4, r3
    6118:	189b      	adds	r3, r3, r2
    611a:	1d7a      	adds	r2, r7, #5
    611c:	7812      	ldrb	r2, [r2, #0]
    611e:	701a      	strb	r2, [r3, #0]
}
    6120:	46bd      	mov	sp, r7
    6122:	b003      	add	sp, #12
    6124:	bd90      	pop	{r4, r7, pc}
    6126:	46c0      	nop			; (mov r8, r8)
    6128:	000246e4 	.word	0x000246e4
    612c:	000068e1 	.word	0x000068e1
    6130:	20000c58 	.word	0x20000c58
    6134:	00024728 	.word	0x00024728
    6138:	000064ed 	.word	0x000064ed

0000613c <prvTraceGetObjectState>:

uint8_t prvTraceGetObjectState(uint8_t objectclass, traceHandle id)
{
    613c:	b590      	push	{r4, r7, lr}
    613e:	b083      	sub	sp, #12
    6140:	af00      	add	r7, sp, #0
    6142:	0002      	movs	r2, r0
    6144:	1dfb      	adds	r3, r7, #7
    6146:	701a      	strb	r2, [r3, #0]
    6148:	1dbb      	adds	r3, r7, #6
    614a:	1c0a      	adds	r2, r1, #0
    614c:	701a      	strb	r2, [r3, #0]
	TRACE_ASSERT(objectclass < TRACE_NCLASSES,
    614e:	1dfb      	adds	r3, r7, #7
    6150:	781b      	ldrb	r3, [r3, #0]
    6152:	2b08      	cmp	r3, #8
    6154:	d905      	bls.n	6162 <prvTraceGetObjectState+0x26>
    6156:	4b1a      	ldr	r3, [pc, #104]	; (61c0 <prvTraceGetObjectState+0x84>)
    6158:	0018      	movs	r0, r3
    615a:	4b1a      	ldr	r3, [pc, #104]	; (61c4 <prvTraceGetObjectState+0x88>)
    615c:	4798      	blx	r3
    615e:	2300      	movs	r3, #0
    6160:	e02a      	b.n	61b8 <prvTraceGetObjectState+0x7c>
		"prvTraceGetObjectState: objectclass >= TRACE_NCLASSES", 0);
	TRACE_ASSERT(id <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[objectclass],
    6162:	4b19      	ldr	r3, [pc, #100]	; (61c8 <prvTraceGetObjectState+0x8c>)
    6164:	681a      	ldr	r2, [r3, #0]
    6166:	1dfb      	adds	r3, r7, #7
    6168:	781b      	ldrb	r3, [r3, #0]
    616a:	2164      	movs	r1, #100	; 0x64
    616c:	18d3      	adds	r3, r2, r3
    616e:	185b      	adds	r3, r3, r1
    6170:	781b      	ldrb	r3, [r3, #0]
    6172:	1dba      	adds	r2, r7, #6
    6174:	7812      	ldrb	r2, [r2, #0]
    6176:	429a      	cmp	r2, r3
    6178:	d905      	bls.n	6186 <prvTraceGetObjectState+0x4a>
    617a:	4b14      	ldr	r3, [pc, #80]	; (61cc <prvTraceGetObjectState+0x90>)
    617c:	0018      	movs	r0, r3
    617e:	4b11      	ldr	r3, [pc, #68]	; (61c4 <prvTraceGetObjectState+0x88>)
    6180:	4798      	blx	r3
    6182:	2300      	movs	r3, #0
    6184:	e018      	b.n	61b8 <prvTraceGetObjectState+0x7c>
		"prvTraceGetObjectState: Invalid value for id", 0);

	return TRACE_PROPERTY_OBJECT_STATE(objectclass, id);
    6186:	4b10      	ldr	r3, [pc, #64]	; (61c8 <prvTraceGetObjectState+0x8c>)
    6188:	681c      	ldr	r4, [r3, #0]
    618a:	1dfb      	adds	r3, r7, #7
    618c:	781a      	ldrb	r2, [r3, #0]
    618e:	1dbb      	adds	r3, r7, #6
    6190:	781b      	ldrb	r3, [r3, #0]
    6192:	0011      	movs	r1, r2
    6194:	0018      	movs	r0, r3
    6196:	4b0e      	ldr	r3, [pc, #56]	; (61d0 <prvTraceGetObjectState+0x94>)
    6198:	4798      	blx	r3
    619a:	0003      	movs	r3, r0
    619c:	0018      	movs	r0, r3
    619e:	4b0a      	ldr	r3, [pc, #40]	; (61c8 <prvTraceGetObjectState+0x8c>)
    61a0:	681a      	ldr	r2, [r3, #0]
    61a2:	1dfb      	adds	r3, r7, #7
    61a4:	781b      	ldrb	r3, [r3, #0]
    61a6:	2170      	movs	r1, #112	; 0x70
    61a8:	18d3      	adds	r3, r2, r3
    61aa:	185b      	adds	r3, r3, r1
    61ac:	781b      	ldrb	r3, [r3, #0]
    61ae:	18c3      	adds	r3, r0, r3
    61b0:	229c      	movs	r2, #156	; 0x9c
    61b2:	18e3      	adds	r3, r4, r3
    61b4:	189b      	adds	r3, r3, r2
    61b6:	781b      	ldrb	r3, [r3, #0]
}
    61b8:	0018      	movs	r0, r3
    61ba:	46bd      	mov	sp, r7
    61bc:	b003      	add	sp, #12
    61be:	bd90      	pop	{r4, r7, pc}
    61c0:	00024764 	.word	0x00024764
    61c4:	000068e1 	.word	0x000068e1
    61c8:	20000c58 	.word	0x20000c58
    61cc:	000247a8 	.word	0x000247a8
    61d0:	000064ed 	.word	0x000064ed

000061d4 <prvTraceSetTaskInstanceFinished>:

void prvTraceSetTaskInstanceFinished(traceHandle handle)
{
    61d4:	b590      	push	{r4, r7, lr}
    61d6:	b083      	sub	sp, #12
    61d8:	af00      	add	r7, sp, #0
    61da:	0002      	movs	r2, r0
    61dc:	1dfb      	adds	r3, r7, #7
    61de:	701a      	strb	r2, [r3, #0]
	TRACE_ASSERT(handle <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[TRACE_CLASS_TASK],
    61e0:	4b11      	ldr	r3, [pc, #68]	; (6228 <prvTraceSetTaskInstanceFinished+0x54>)
    61e2:	681b      	ldr	r3, [r3, #0]
    61e4:	2267      	movs	r2, #103	; 0x67
    61e6:	5c9b      	ldrb	r3, [r3, r2]
    61e8:	1dfa      	adds	r2, r7, #7
    61ea:	7812      	ldrb	r2, [r2, #0]
    61ec:	429a      	cmp	r2, r3
    61ee:	d904      	bls.n	61fa <prvTraceSetTaskInstanceFinished+0x26>
    61f0:	4b0e      	ldr	r3, [pc, #56]	; (622c <prvTraceSetTaskInstanceFinished+0x58>)
    61f2:	0018      	movs	r0, r3
    61f4:	4b0e      	ldr	r3, [pc, #56]	; (6230 <prvTraceSetTaskInstanceFinished+0x5c>)
    61f6:	4798      	blx	r3
    61f8:	e013      	b.n	6222 <prvTraceSetTaskInstanceFinished+0x4e>
		"prvTraceSetTaskInstanceFinished: Invalid value for handle", TRC_UNUSED);

#if (TRC_CFG_USE_IMPLICIT_IFE_RULES == 1)
	TRACE_PROPERTY_OBJECT_STATE(TRACE_CLASS_TASK, handle) = 0;
    61fa:	4b0b      	ldr	r3, [pc, #44]	; (6228 <prvTraceSetTaskInstanceFinished+0x54>)
    61fc:	681c      	ldr	r4, [r3, #0]
    61fe:	1dfb      	adds	r3, r7, #7
    6200:	781b      	ldrb	r3, [r3, #0]
    6202:	2103      	movs	r1, #3
    6204:	0018      	movs	r0, r3
    6206:	4b0b      	ldr	r3, [pc, #44]	; (6234 <prvTraceSetTaskInstanceFinished+0x60>)
    6208:	4798      	blx	r3
    620a:	0003      	movs	r3, r0
    620c:	0019      	movs	r1, r3
    620e:	4b06      	ldr	r3, [pc, #24]	; (6228 <prvTraceSetTaskInstanceFinished+0x54>)
    6210:	681b      	ldr	r3, [r3, #0]
    6212:	2273      	movs	r2, #115	; 0x73
    6214:	5c9b      	ldrb	r3, [r3, r2]
    6216:	18cb      	adds	r3, r1, r3
    6218:	229c      	movs	r2, #156	; 0x9c
    621a:	18e3      	adds	r3, r4, r3
    621c:	189b      	adds	r3, r3, r2
    621e:	2200      	movs	r2, #0
    6220:	701a      	strb	r2, [r3, #0]
#endif
}
    6222:	46bd      	mov	sp, r7
    6224:	b003      	add	sp, #12
    6226:	bd90      	pop	{r4, r7, pc}
    6228:	20000c58 	.word	0x20000c58
    622c:	000247e4 	.word	0x000247e4
    6230:	000068e1 	.word	0x000068e1
    6234:	000064ed 	.word	0x000064ed

00006238 <prvTraceInitTraceData>:
 ******************************************************************************/
RecorderDataType* RecorderDataPtr = NULL;

/* This version of the function dynamically allocates the trace data */
void prvTraceInitTraceData()
{	
    6238:	b580      	push	{r7, lr}
    623a:	af00      	add	r7, sp, #0
	
	if (RecorderDataPtr == NULL)
    623c:	4b75      	ldr	r3, [pc, #468]	; (6414 <prvTraceInitTraceData+0x1dc>)
    623e:	681b      	ldr	r3, [r3, #0]
    6240:	2b00      	cmp	r3, #0
    6242:	d103      	bne.n	624c <prvTraceInitTraceData+0x14>
	{
#if (TRC_CFG_RECORDER_BUFFER_ALLOCATION == TRC_RECORDER_BUFFER_ALLOCATION_STATIC)
	RecorderDataPtr = &RecorderData;
    6244:	4b73      	ldr	r3, [pc, #460]	; (6414 <prvTraceInitTraceData+0x1dc>)
    6246:	4a74      	ldr	r2, [pc, #464]	; (6418 <prvTraceInitTraceData+0x1e0>)
    6248:	601a      	str	r2, [r3, #0]
    624a:	e006      	b.n	625a <prvTraceInitTraceData+0x22>
		}
#endif
	}
	else
	{
		if (RecorderDataPtr->startmarker0 == 1)
    624c:	4b71      	ldr	r3, [pc, #452]	; (6414 <prvTraceInitTraceData+0x1dc>)
    624e:	681b      	ldr	r3, [r3, #0]
    6250:	781b      	ldrb	r3, [r3, #0]
    6252:	b2db      	uxtb	r3, r3
    6254:	2b01      	cmp	r3, #1
    6256:	d100      	bne.n	625a <prvTraceInitTraceData+0x22>
    6258:	e0d8      	b.n	640c <prvTraceInitTraceData+0x1d4>
			/* Already initialized */
			return;
		}
	}
	
	init_hwtc_count = TRC_HWTC_COUNT;
    625a:	4b70      	ldr	r3, [pc, #448]	; (641c <prvTraceInitTraceData+0x1e4>)
    625c:	681a      	ldr	r2, [r3, #0]
    625e:	4b70      	ldr	r3, [pc, #448]	; (6420 <prvTraceInitTraceData+0x1e8>)
    6260:	601a      	str	r2, [r3, #0]
		
	(void)memset(RecorderDataPtr, 0, sizeof(RecorderDataType));
    6262:	4b6c      	ldr	r3, [pc, #432]	; (6414 <prvTraceInitTraceData+0x1dc>)
    6264:	6818      	ldr	r0, [r3, #0]
    6266:	23bd      	movs	r3, #189	; 0xbd
    6268:	011b      	lsls	r3, r3, #4
    626a:	001a      	movs	r2, r3
    626c:	2100      	movs	r1, #0
    626e:	4b6d      	ldr	r3, [pc, #436]	; (6424 <prvTraceInitTraceData+0x1ec>)
    6270:	4798      	blx	r3
	
	RecorderDataPtr->version = TRACE_KERNEL_VERSION;
    6272:	4b68      	ldr	r3, [pc, #416]	; (6414 <prvTraceInitTraceData+0x1dc>)
    6274:	681b      	ldr	r3, [r3, #0]
    6276:	4a6c      	ldr	r2, [pc, #432]	; (6428 <prvTraceInitTraceData+0x1f0>)
    6278:	819a      	strh	r2, [r3, #12]
	RecorderDataPtr->minor_version = TRACE_MINOR_VERSION;
    627a:	4b66      	ldr	r3, [pc, #408]	; (6414 <prvTraceInitTraceData+0x1dc>)
    627c:	681b      	ldr	r3, [r3, #0]
    627e:	2205      	movs	r2, #5
    6280:	739a      	strb	r2, [r3, #14]
	RecorderDataPtr->irq_priority_order = TRC_IRQ_PRIORITY_ORDER;
    6282:	4b64      	ldr	r3, [pc, #400]	; (6414 <prvTraceInitTraceData+0x1dc>)
    6284:	681b      	ldr	r3, [r3, #0]
    6286:	2200      	movs	r2, #0
    6288:	73da      	strb	r2, [r3, #15]
	RecorderDataPtr->filesize = sizeof(RecorderDataType);
    628a:	4b62      	ldr	r3, [pc, #392]	; (6414 <prvTraceInitTraceData+0x1dc>)
    628c:	681b      	ldr	r3, [r3, #0]
    628e:	22bd      	movs	r2, #189	; 0xbd
    6290:	0112      	lsls	r2, r2, #4
    6292:	611a      	str	r2, [r3, #16]
	RecorderDataPtr->maxEvents = (TRC_CFG_EVENT_BUFFER_SIZE);
    6294:	4b5f      	ldr	r3, [pc, #380]	; (6414 <prvTraceInitTraceData+0x1dc>)
    6296:	681b      	ldr	r3, [r3, #0]
    6298:	2296      	movs	r2, #150	; 0x96
    629a:	0052      	lsls	r2, r2, #1
    629c:	619a      	str	r2, [r3, #24]
	RecorderDataPtr->debugMarker0 = (int32_t) 0xF0F0F0F0;
    629e:	4b5d      	ldr	r3, [pc, #372]	; (6414 <prvTraceInitTraceData+0x1dc>)
    62a0:	681b      	ldr	r3, [r3, #0]
    62a2:	4a62      	ldr	r2, [pc, #392]	; (642c <prvTraceInitTraceData+0x1f4>)
    62a4:	655a      	str	r2, [r3, #84]	; 0x54
	RecorderDataPtr->isUsing16bitHandles = TRC_CFG_USE_16BIT_OBJECT_HANDLES;
    62a6:	4b5b      	ldr	r3, [pc, #364]	; (6414 <prvTraceInitTraceData+0x1dc>)
    62a8:	681b      	ldr	r3, [r3, #0]
    62aa:	2200      	movs	r2, #0
    62ac:	659a      	str	r2, [r3, #88]	; 0x58
	RecorderDataPtr->isrTailchainingThreshold = TRC_CFG_ISR_TAILCHAINING_THRESHOLD;
    62ae:	4b59      	ldr	r3, [pc, #356]	; (6414 <prvTraceInitTraceData+0x1dc>)
    62b0:	681b      	ldr	r3, [r3, #0]
    62b2:	2200      	movs	r2, #0
    62b4:	635a      	str	r2, [r3, #52]	; 0x34

	/* This function is kernel specific */
	vTraceInitObjectPropertyTable();
    62b6:	4b5e      	ldr	r3, [pc, #376]	; (6430 <prvTraceInitTraceData+0x1f8>)
    62b8:	4798      	blx	r3

	RecorderDataPtr->debugMarker1 = (int32_t)0xF1F1F1F1;
    62ba:	4b56      	ldr	r3, [pc, #344]	; (6414 <prvTraceInitTraceData+0x1dc>)
    62bc:	681b      	ldr	r3, [r3, #0]
    62be:	4a5d      	ldr	r2, [pc, #372]	; (6434 <prvTraceInitTraceData+0x1fc>)
    62c0:	495d      	ldr	r1, [pc, #372]	; (6438 <prvTraceInitTraceData+0x200>)
    62c2:	5099      	str	r1, [r3, r2]
	RecorderDataPtr->SymbolTable.symTableSize = (TRC_CFG_SYMBOL_TABLE_SIZE);
    62c4:	4b53      	ldr	r3, [pc, #332]	; (6414 <prvTraceInitTraceData+0x1dc>)
    62c6:	681a      	ldr	r2, [r3, #0]
    62c8:	23ac      	movs	r3, #172	; 0xac
    62ca:	00db      	lsls	r3, r3, #3
    62cc:	21c8      	movs	r1, #200	; 0xc8
    62ce:	50d1      	str	r1, [r2, r3]
	RecorderDataPtr->SymbolTable.nextFreeSymbolIndex = 1;
    62d0:	4b50      	ldr	r3, [pc, #320]	; (6414 <prvTraceInitTraceData+0x1dc>)
    62d2:	681b      	ldr	r3, [r3, #0]
    62d4:	4a59      	ldr	r2, [pc, #356]	; (643c <prvTraceInitTraceData+0x204>)
    62d6:	2101      	movs	r1, #1
    62d8:	5099      	str	r1, [r3, r2]
#if (TRC_CFG_INCLUDE_FLOAT_SUPPORT == 1)
	RecorderDataPtr->exampleFloatEncoding = 1.0f; /* otherwise already zero */
#endif
	RecorderDataPtr->debugMarker2 = (int32_t)0xF2F2F2F2;
    62da:	4b4e      	ldr	r3, [pc, #312]	; (6414 <prvTraceInitTraceData+0x1dc>)
    62dc:	681a      	ldr	r2, [r3, #0]
    62de:	23d7      	movs	r3, #215	; 0xd7
    62e0:	00db      	lsls	r3, r3, #3
    62e2:	4957      	ldr	r1, [pc, #348]	; (6440 <prvTraceInitTraceData+0x208>)
    62e4:	50d1      	str	r1, [r2, r3]
	prvStrncpy(RecorderDataPtr->systemInfo, "Trace Recorder Demo", 80);
    62e6:	4b4b      	ldr	r3, [pc, #300]	; (6414 <prvTraceInitTraceData+0x1dc>)
    62e8:	681b      	ldr	r3, [r3, #0]
    62ea:	4a56      	ldr	r2, [pc, #344]	; (6444 <prvTraceInitTraceData+0x20c>)
    62ec:	4694      	mov	ip, r2
    62ee:	4463      	add	r3, ip
    62f0:	4955      	ldr	r1, [pc, #340]	; (6448 <prvTraceInitTraceData+0x210>)
    62f2:	2250      	movs	r2, #80	; 0x50
    62f4:	0018      	movs	r0, r3
    62f6:	4b55      	ldr	r3, [pc, #340]	; (644c <prvTraceInitTraceData+0x214>)
    62f8:	4798      	blx	r3
	RecorderDataPtr->debugMarker3 = (int32_t)0xF3F3F3F3;
    62fa:	4b46      	ldr	r3, [pc, #280]	; (6414 <prvTraceInitTraceData+0x1dc>)
    62fc:	681b      	ldr	r3, [r3, #0]
    62fe:	4a54      	ldr	r2, [pc, #336]	; (6450 <prvTraceInitTraceData+0x218>)
    6300:	4954      	ldr	r1, [pc, #336]	; (6454 <prvTraceInitTraceData+0x21c>)
    6302:	5099      	str	r1, [r3, r2]
	RecorderDataPtr->endmarker0 = 0x0A;
    6304:	4b43      	ldr	r3, [pc, #268]	; (6414 <prvTraceInitTraceData+0x1dc>)
    6306:	681b      	ldr	r3, [r3, #0]
    6308:	4a53      	ldr	r2, [pc, #332]	; (6458 <prvTraceInitTraceData+0x220>)
    630a:	210a      	movs	r1, #10
    630c:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->endmarker1 = 0x0B;
    630e:	4b41      	ldr	r3, [pc, #260]	; (6414 <prvTraceInitTraceData+0x1dc>)
    6310:	681b      	ldr	r3, [r3, #0]
    6312:	4a52      	ldr	r2, [pc, #328]	; (645c <prvTraceInitTraceData+0x224>)
    6314:	210b      	movs	r1, #11
    6316:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->endmarker2 = 0x0C;
    6318:	4b3e      	ldr	r3, [pc, #248]	; (6414 <prvTraceInitTraceData+0x1dc>)
    631a:	681b      	ldr	r3, [r3, #0]
    631c:	4a50      	ldr	r2, [pc, #320]	; (6460 <prvTraceInitTraceData+0x228>)
    631e:	210c      	movs	r1, #12
    6320:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->endmarker3 = 0x0D;
    6322:	4b3c      	ldr	r3, [pc, #240]	; (6414 <prvTraceInitTraceData+0x1dc>)
    6324:	681b      	ldr	r3, [r3, #0]
    6326:	4a4f      	ldr	r2, [pc, #316]	; (6464 <prvTraceInitTraceData+0x22c>)
    6328:	210d      	movs	r1, #13
    632a:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->endmarker4 = 0x71;
    632c:	4b39      	ldr	r3, [pc, #228]	; (6414 <prvTraceInitTraceData+0x1dc>)
    632e:	681b      	ldr	r3, [r3, #0]
    6330:	4a4d      	ldr	r2, [pc, #308]	; (6468 <prvTraceInitTraceData+0x230>)
    6332:	2171      	movs	r1, #113	; 0x71
    6334:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->endmarker5 = 0x72;
    6336:	4b37      	ldr	r3, [pc, #220]	; (6414 <prvTraceInitTraceData+0x1dc>)
    6338:	681b      	ldr	r3, [r3, #0]
    633a:	4a4c      	ldr	r2, [pc, #304]	; (646c <prvTraceInitTraceData+0x234>)
    633c:	2172      	movs	r1, #114	; 0x72
    633e:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->endmarker6 = 0x73;
    6340:	4b34      	ldr	r3, [pc, #208]	; (6414 <prvTraceInitTraceData+0x1dc>)
    6342:	681b      	ldr	r3, [r3, #0]
    6344:	4a4a      	ldr	r2, [pc, #296]	; (6470 <prvTraceInitTraceData+0x238>)
    6346:	2173      	movs	r1, #115	; 0x73
    6348:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->endmarker7 = 0x74;
    634a:	4b32      	ldr	r3, [pc, #200]	; (6414 <prvTraceInitTraceData+0x1dc>)
    634c:	681b      	ldr	r3, [r3, #0]
    634e:	4a49      	ldr	r2, [pc, #292]	; (6474 <prvTraceInitTraceData+0x23c>)
    6350:	2174      	movs	r1, #116	; 0x74
    6352:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->endmarker8 = 0xF1;
    6354:	4b2f      	ldr	r3, [pc, #188]	; (6414 <prvTraceInitTraceData+0x1dc>)
    6356:	681b      	ldr	r3, [r3, #0]
    6358:	4a47      	ldr	r2, [pc, #284]	; (6478 <prvTraceInitTraceData+0x240>)
    635a:	21f1      	movs	r1, #241	; 0xf1
    635c:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->endmarker9 = 0xF2;
    635e:	4b2d      	ldr	r3, [pc, #180]	; (6414 <prvTraceInitTraceData+0x1dc>)
    6360:	681b      	ldr	r3, [r3, #0]
    6362:	4a46      	ldr	r2, [pc, #280]	; (647c <prvTraceInitTraceData+0x244>)
    6364:	21f2      	movs	r1, #242	; 0xf2
    6366:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->endmarker10 = 0xF3;
    6368:	4b2a      	ldr	r3, [pc, #168]	; (6414 <prvTraceInitTraceData+0x1dc>)
    636a:	681b      	ldr	r3, [r3, #0]
    636c:	4a44      	ldr	r2, [pc, #272]	; (6480 <prvTraceInitTraceData+0x248>)
    636e:	21f3      	movs	r1, #243	; 0xf3
    6370:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->endmarker11 = 0xF4;
    6372:	4b28      	ldr	r3, [pc, #160]	; (6414 <prvTraceInitTraceData+0x1dc>)
    6374:	681b      	ldr	r3, [r3, #0]
    6376:	4a43      	ldr	r2, [pc, #268]	; (6484 <prvTraceInitTraceData+0x24c>)
    6378:	21f4      	movs	r1, #244	; 0xf4
    637a:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->userEventBuffer.numberOfSlots = (TRC_CFG_SEPARATE_USER_EVENT_BUFFER_SIZE);
	RecorderDataPtr->userEventBuffer.numberOfChannels = (TRC_CFG_UB_CHANNELS) + 1;
#endif

	/* Kernel specific initialization of the objectHandleStacks variable */
	vTraceInitObjectHandleStack();
    637c:	4b42      	ldr	r3, [pc, #264]	; (6488 <prvTraceInitTraceData+0x250>)
    637e:	4798      	blx	r3
	and the fields are volatile to ensure this assignment order. This to avoid any 
	chance of accidental duplicates of this elsewhere in memory.
	
	Moreover, the fields are set byte-by-byte to avoid endian issues.*/
	
	RecorderDataPtr->startmarker11 = 0xF4;
    6380:	4b24      	ldr	r3, [pc, #144]	; (6414 <prvTraceInitTraceData+0x1dc>)
    6382:	681b      	ldr	r3, [r3, #0]
    6384:	22f4      	movs	r2, #244	; 0xf4
    6386:	72da      	strb	r2, [r3, #11]
	RecorderDataPtr->startmarker10 = 0xF3;
    6388:	4b22      	ldr	r3, [pc, #136]	; (6414 <prvTraceInitTraceData+0x1dc>)
    638a:	681b      	ldr	r3, [r3, #0]
    638c:	22f3      	movs	r2, #243	; 0xf3
    638e:	729a      	strb	r2, [r3, #10]
	RecorderDataPtr->startmarker9 = 0xF2;
    6390:	4b20      	ldr	r3, [pc, #128]	; (6414 <prvTraceInitTraceData+0x1dc>)
    6392:	681b      	ldr	r3, [r3, #0]
    6394:	22f2      	movs	r2, #242	; 0xf2
    6396:	725a      	strb	r2, [r3, #9]
	RecorderDataPtr->startmarker8 = 0xF1;
    6398:	4b1e      	ldr	r3, [pc, #120]	; (6414 <prvTraceInitTraceData+0x1dc>)
    639a:	681b      	ldr	r3, [r3, #0]
    639c:	22f1      	movs	r2, #241	; 0xf1
    639e:	721a      	strb	r2, [r3, #8]
	RecorderDataPtr->startmarker7 = 0x74;
    63a0:	4b1c      	ldr	r3, [pc, #112]	; (6414 <prvTraceInitTraceData+0x1dc>)
    63a2:	681b      	ldr	r3, [r3, #0]
    63a4:	2274      	movs	r2, #116	; 0x74
    63a6:	71da      	strb	r2, [r3, #7]
	RecorderDataPtr->startmarker6 = 0x73;
    63a8:	4b1a      	ldr	r3, [pc, #104]	; (6414 <prvTraceInitTraceData+0x1dc>)
    63aa:	681b      	ldr	r3, [r3, #0]
    63ac:	2273      	movs	r2, #115	; 0x73
    63ae:	719a      	strb	r2, [r3, #6]
	RecorderDataPtr->startmarker5 = 0x72;
    63b0:	4b18      	ldr	r3, [pc, #96]	; (6414 <prvTraceInitTraceData+0x1dc>)
    63b2:	681b      	ldr	r3, [r3, #0]
    63b4:	2272      	movs	r2, #114	; 0x72
    63b6:	715a      	strb	r2, [r3, #5]
	RecorderDataPtr->startmarker4 = 0x71;
    63b8:	4b16      	ldr	r3, [pc, #88]	; (6414 <prvTraceInitTraceData+0x1dc>)
    63ba:	681b      	ldr	r3, [r3, #0]
    63bc:	2271      	movs	r2, #113	; 0x71
    63be:	711a      	strb	r2, [r3, #4]
	RecorderDataPtr->startmarker3 = 0x04;
    63c0:	4b14      	ldr	r3, [pc, #80]	; (6414 <prvTraceInitTraceData+0x1dc>)
    63c2:	681b      	ldr	r3, [r3, #0]
    63c4:	2204      	movs	r2, #4
    63c6:	70da      	strb	r2, [r3, #3]
	RecorderDataPtr->startmarker2 = 0x03;
    63c8:	4b12      	ldr	r3, [pc, #72]	; (6414 <prvTraceInitTraceData+0x1dc>)
    63ca:	681b      	ldr	r3, [r3, #0]
    63cc:	2203      	movs	r2, #3
    63ce:	709a      	strb	r2, [r3, #2]
	RecorderDataPtr->startmarker1 = 0x02;	
    63d0:	4b10      	ldr	r3, [pc, #64]	; (6414 <prvTraceInitTraceData+0x1dc>)
    63d2:	681b      	ldr	r3, [r3, #0]
    63d4:	2202      	movs	r2, #2
    63d6:	705a      	strb	r2, [r3, #1]
	RecorderDataPtr->startmarker0 = 0x01; 
    63d8:	4b0e      	ldr	r3, [pc, #56]	; (6414 <prvTraceInitTraceData+0x1dc>)
    63da:	681b      	ldr	r3, [r3, #0]
    63dc:	2201      	movs	r2, #1
    63de:	701a      	strb	r2, [r3, #0]

	if (traceErrorMessage != NULL)
    63e0:	4b2a      	ldr	r3, [pc, #168]	; (648c <prvTraceInitTraceData+0x254>)
    63e2:	681b      	ldr	r3, [r3, #0]
    63e4:	2b00      	cmp	r3, #0
    63e6:	d012      	beq.n	640e <prvTraceInitTraceData+0x1d6>
	{
		// An error was detected before vTraceEnable was called, make sure this is stored in the trace data.
		prvStrncpy(RecorderDataPtr->systemInfo, traceErrorMessage, 80);
    63e8:	4b0a      	ldr	r3, [pc, #40]	; (6414 <prvTraceInitTraceData+0x1dc>)
    63ea:	681b      	ldr	r3, [r3, #0]
    63ec:	4a15      	ldr	r2, [pc, #84]	; (6444 <prvTraceInitTraceData+0x20c>)
    63ee:	1898      	adds	r0, r3, r2
    63f0:	4b26      	ldr	r3, [pc, #152]	; (648c <prvTraceInitTraceData+0x254>)
    63f2:	681b      	ldr	r3, [r3, #0]
    63f4:	2250      	movs	r2, #80	; 0x50
    63f6:	0019      	movs	r1, r3
    63f8:	4b14      	ldr	r3, [pc, #80]	; (644c <prvTraceInitTraceData+0x214>)
    63fa:	4798      	blx	r3
		RecorderDataPtr->internalErrorOccured = 1;
    63fc:	4b05      	ldr	r3, [pc, #20]	; (6414 <prvTraceInitTraceData+0x1dc>)
    63fe:	681b      	ldr	r3, [r3, #0]
    6400:	4a23      	ldr	r2, [pc, #140]	; (6490 <prvTraceInitTraceData+0x258>)
    6402:	2101      	movs	r1, #1
    6404:	5099      	str	r1, [r3, r2]
		vTraceStop();
    6406:	4b23      	ldr	r3, [pc, #140]	; (6494 <prvTraceInitTraceData+0x25c>)
    6408:	4798      	blx	r3
    640a:	e000      	b.n	640e <prvTraceInitTraceData+0x1d6>
			return;
    640c:	46c0      	nop			; (mov r8, r8)

	
#ifdef TRC_PORT_SPECIFIC_INIT
	TRC_PORT_SPECIFIC_INIT();
#endif
}
    640e:	46bd      	mov	sp, r7
    6410:	bd80      	pop	{r7, pc}
    6412:	46c0      	nop			; (mov r8, r8)
    6414:	20000c58 	.word	0x20000c58
    6418:	200043dc 	.word	0x200043dc
    641c:	e000e018 	.word	0xe000e018
    6420:	20004fac 	.word	0x20004fac
    6424:	0002181b 	.word	0x0002181b
    6428:	00001aa1 	.word	0x00001aa1
    642c:	f0f0f0f0 	.word	0xf0f0f0f0
    6430:	0000539d 	.word	0x0000539d
    6434:	0000055c 	.word	0x0000055c
    6438:	f1f1f1f1 	.word	0xf1f1f1f1
    643c:	00000564 	.word	0x00000564
    6440:	f2f2f2f2 	.word	0xf2f2f2f2
    6444:	000006bc 	.word	0x000006bc
    6448:	0002482c 	.word	0x0002482c
    644c:	000067ad 	.word	0x000067ad
    6450:	0000070c 	.word	0x0000070c
    6454:	f3f3f3f3 	.word	0xf3f3f3f3
    6458:	00000bc4 	.word	0x00000bc4
    645c:	00000bc5 	.word	0x00000bc5
    6460:	00000bc6 	.word	0x00000bc6
    6464:	00000bc7 	.word	0x00000bc7
    6468:	00000bc8 	.word	0x00000bc8
    646c:	00000bc9 	.word	0x00000bc9
    6470:	00000bca 	.word	0x00000bca
    6474:	00000bcb 	.word	0x00000bcb
    6478:	00000bcc 	.word	0x00000bcc
    647c:	00000bcd 	.word	0x00000bcd
    6480:	00000bce 	.word	0x00000bce
    6484:	00000bcf 	.word	0x00000bcf
    6488:	0000553d 	.word	0x0000553d
    648c:	20000bb8 	.word	0x20000bb8
    6490:	000006b4 	.word	0x000006b4
    6494:	000057a5 	.word	0x000057a5

00006498 <prvTraceNextFreeEventBufferSlot>:


void* prvTraceNextFreeEventBufferSlot(void)
{
    6498:	b580      	push	{r7, lr}
    649a:	af00      	add	r7, sp, #0
	if (! RecorderDataPtr->recorderActive)
    649c:	4b10      	ldr	r3, [pc, #64]	; (64e0 <prvTraceNextFreeEventBufferSlot+0x48>)
    649e:	681b      	ldr	r3, [r3, #0]
    64a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    64a2:	2b00      	cmp	r3, #0
    64a4:	d101      	bne.n	64aa <prvTraceNextFreeEventBufferSlot+0x12>
	{
		/* If an XTS or XPS event prior to the main event has filled the buffer
		before saving the main event, and store mode is "stop when full". */
		return NULL;
    64a6:	2300      	movs	r3, #0
    64a8:	e017      	b.n	64da <prvTraceNextFreeEventBufferSlot+0x42>
	}

	if (RecorderDataPtr->nextFreeIndex >= (TRC_CFG_EVENT_BUFFER_SIZE))
    64aa:	4b0d      	ldr	r3, [pc, #52]	; (64e0 <prvTraceNextFreeEventBufferSlot+0x48>)
    64ac:	681b      	ldr	r3, [r3, #0]
    64ae:	69da      	ldr	r2, [r3, #28]
    64b0:	232c      	movs	r3, #44	; 0x2c
    64b2:	33ff      	adds	r3, #255	; 0xff
    64b4:	429a      	cmp	r2, r3
    64b6:	d905      	bls.n	64c4 <prvTraceNextFreeEventBufferSlot+0x2c>
	{
		prvTraceError("Attempt to index outside event buffer!");
    64b8:	4b0a      	ldr	r3, [pc, #40]	; (64e4 <prvTraceNextFreeEventBufferSlot+0x4c>)
    64ba:	0018      	movs	r0, r3
    64bc:	4b0a      	ldr	r3, [pc, #40]	; (64e8 <prvTraceNextFreeEventBufferSlot+0x50>)
    64be:	4798      	blx	r3
		return NULL;
    64c0:	2300      	movs	r3, #0
    64c2:	e00a      	b.n	64da <prvTraceNextFreeEventBufferSlot+0x42>
	}
	return (void*)(&RecorderDataPtr->eventData[RecorderDataPtr->nextFreeIndex*4]);
    64c4:	4b06      	ldr	r3, [pc, #24]	; (64e0 <prvTraceNextFreeEventBufferSlot+0x48>)
    64c6:	681a      	ldr	r2, [r3, #0]
    64c8:	4b05      	ldr	r3, [pc, #20]	; (64e0 <prvTraceNextFreeEventBufferSlot+0x48>)
    64ca:	681b      	ldr	r3, [r3, #0]
    64cc:	69db      	ldr	r3, [r3, #28]
    64ce:	009b      	lsls	r3, r3, #2
    64d0:	21e2      	movs	r1, #226	; 0xe2
    64d2:	00c9      	lsls	r1, r1, #3
    64d4:	468c      	mov	ip, r1
    64d6:	4463      	add	r3, ip
    64d8:	18d3      	adds	r3, r2, r3
}
    64da:	0018      	movs	r0, r3
    64dc:	46bd      	mov	sp, r7
    64de:	bd80      	pop	{r7, pc}
    64e0:	20000c58 	.word	0x20000c58
    64e4:	00024840 	.word	0x00024840
    64e8:	000068e1 	.word	0x000068e1

000064ec <uiIndexOfObject>:

uint16_t uiIndexOfObject(traceHandle objecthandle, uint8_t objectclass)
{
    64ec:	b580      	push	{r7, lr}
    64ee:	b082      	sub	sp, #8
    64f0:	af00      	add	r7, sp, #0
    64f2:	0002      	movs	r2, r0
    64f4:	1dfb      	adds	r3, r7, #7
    64f6:	701a      	strb	r2, [r3, #0]
    64f8:	1dbb      	adds	r3, r7, #6
    64fa:	1c0a      	adds	r2, r1, #0
    64fc:	701a      	strb	r2, [r3, #0]
	TRACE_ASSERT(objectclass < TRACE_NCLASSES, 
    64fe:	1dbb      	adds	r3, r7, #6
    6500:	781b      	ldrb	r3, [r3, #0]
    6502:	2b08      	cmp	r3, #8
    6504:	d905      	bls.n	6512 <uiIndexOfObject+0x26>
    6506:	4b2a      	ldr	r3, [pc, #168]	; (65b0 <uiIndexOfObject+0xc4>)
    6508:	0018      	movs	r0, r3
    650a:	4b2a      	ldr	r3, [pc, #168]	; (65b4 <uiIndexOfObject+0xc8>)
    650c:	4798      	blx	r3
    650e:	2300      	movs	r3, #0
    6510:	e049      	b.n	65a6 <uiIndexOfObject+0xba>
		"uiIndexOfObject: Invalid value for objectclass", 0);
	TRACE_ASSERT(objecthandle > 0 && objecthandle <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[objectclass], 
    6512:	1dfb      	adds	r3, r7, #7
    6514:	781b      	ldrb	r3, [r3, #0]
    6516:	2b00      	cmp	r3, #0
    6518:	d00b      	beq.n	6532 <uiIndexOfObject+0x46>
    651a:	4b27      	ldr	r3, [pc, #156]	; (65b8 <uiIndexOfObject+0xcc>)
    651c:	681a      	ldr	r2, [r3, #0]
    651e:	1dbb      	adds	r3, r7, #6
    6520:	781b      	ldrb	r3, [r3, #0]
    6522:	2164      	movs	r1, #100	; 0x64
    6524:	18d3      	adds	r3, r2, r3
    6526:	185b      	adds	r3, r3, r1
    6528:	781b      	ldrb	r3, [r3, #0]
    652a:	1dfa      	adds	r2, r7, #7
    652c:	7812      	ldrb	r2, [r2, #0]
    652e:	429a      	cmp	r2, r3
    6530:	d905      	bls.n	653e <uiIndexOfObject+0x52>
    6532:	4b22      	ldr	r3, [pc, #136]	; (65bc <uiIndexOfObject+0xd0>)
    6534:	0018      	movs	r0, r3
    6536:	4b1f      	ldr	r3, [pc, #124]	; (65b4 <uiIndexOfObject+0xc8>)
    6538:	4798      	blx	r3
    653a:	2300      	movs	r3, #0
    653c:	e033      	b.n	65a6 <uiIndexOfObject+0xba>
		"uiIndexOfObject: Invalid value for objecthandle", 0);

	if ((objectclass < TRACE_NCLASSES) && (objecthandle > 0) && 
    653e:	1dbb      	adds	r3, r7, #6
    6540:	781b      	ldrb	r3, [r3, #0]
    6542:	2b08      	cmp	r3, #8
    6544:	d82a      	bhi.n	659c <uiIndexOfObject+0xb0>
    6546:	1dfb      	adds	r3, r7, #7
    6548:	781b      	ldrb	r3, [r3, #0]
    654a:	2b00      	cmp	r3, #0
    654c:	d026      	beq.n	659c <uiIndexOfObject+0xb0>
		(objecthandle <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[objectclass]))
    654e:	4b1a      	ldr	r3, [pc, #104]	; (65b8 <uiIndexOfObject+0xcc>)
    6550:	681a      	ldr	r2, [r3, #0]
    6552:	1dbb      	adds	r3, r7, #6
    6554:	781b      	ldrb	r3, [r3, #0]
    6556:	2164      	movs	r1, #100	; 0x64
    6558:	18d3      	adds	r3, r2, r3
    655a:	185b      	adds	r3, r3, r1
    655c:	781b      	ldrb	r3, [r3, #0]
	if ((objectclass < TRACE_NCLASSES) && (objecthandle > 0) && 
    655e:	1dfa      	adds	r2, r7, #7
    6560:	7812      	ldrb	r2, [r2, #0]
    6562:	429a      	cmp	r2, r3
    6564:	d81a      	bhi.n	659c <uiIndexOfObject+0xb0>
	{
		return (uint16_t)(RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[objectclass] + 
    6566:	4b14      	ldr	r3, [pc, #80]	; (65b8 <uiIndexOfObject+0xcc>)
    6568:	681a      	ldr	r2, [r3, #0]
    656a:	1dbb      	adds	r3, r7, #6
    656c:	781b      	ldrb	r3, [r3, #0]
    656e:	3340      	adds	r3, #64	; 0x40
    6570:	005b      	lsls	r3, r3, #1
    6572:	18d3      	adds	r3, r2, r3
    6574:	3308      	adds	r3, #8
    6576:	881a      	ldrh	r2, [r3, #0]
			(RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[objectclass] * (objecthandle-1)));
    6578:	4b0f      	ldr	r3, [pc, #60]	; (65b8 <uiIndexOfObject+0xcc>)
    657a:	6819      	ldr	r1, [r3, #0]
    657c:	1dbb      	adds	r3, r7, #6
    657e:	781b      	ldrb	r3, [r3, #0]
    6580:	207c      	movs	r0, #124	; 0x7c
    6582:	18cb      	adds	r3, r1, r3
    6584:	181b      	adds	r3, r3, r0
    6586:	781b      	ldrb	r3, [r3, #0]
		return (uint16_t)(RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[objectclass] + 
    6588:	b29b      	uxth	r3, r3
			(RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[objectclass] * (objecthandle-1)));
    658a:	1df9      	adds	r1, r7, #7
    658c:	7809      	ldrb	r1, [r1, #0]
    658e:	3901      	subs	r1, #1
		return (uint16_t)(RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[objectclass] + 
    6590:	b289      	uxth	r1, r1
    6592:	434b      	muls	r3, r1
    6594:	b29b      	uxth	r3, r3
    6596:	18d3      	adds	r3, r2, r3
    6598:	b29b      	uxth	r3, r3
    659a:	e004      	b.n	65a6 <uiIndexOfObject+0xba>
	}

	prvTraceError("Object table lookup with invalid object handle or object class!");
    659c:	4b08      	ldr	r3, [pc, #32]	; (65c0 <uiIndexOfObject+0xd4>)
    659e:	0018      	movs	r0, r3
    65a0:	4b04      	ldr	r3, [pc, #16]	; (65b4 <uiIndexOfObject+0xc8>)
    65a2:	4798      	blx	r3
	return 0;
    65a4:	2300      	movs	r3, #0
}
    65a6:	0018      	movs	r0, r3
    65a8:	46bd      	mov	sp, r7
    65aa:	b002      	add	sp, #8
    65ac:	bd80      	pop	{r7, pc}
    65ae:	46c0      	nop			; (mov r8, r8)
    65b0:	00024868 	.word	0x00024868
    65b4:	000068e1 	.word	0x000068e1
    65b8:	20000c58 	.word	0x20000c58
    65bc:	000248a8 	.word	0x000248a8
    65c0:	000248e8 	.word	0x000248e8

000065c4 <prvTraceGetObjectHandle>:

traceHandle prvTraceGetObjectHandle(traceObjectClass objectclass)
{
    65c4:	b580      	push	{r7, lr}
    65c6:	b088      	sub	sp, #32
    65c8:	af00      	add	r7, sp, #0
    65ca:	0002      	movs	r2, r0
    65cc:	1dfb      	adds	r3, r7, #7
    65ce:	701a      	strb	r2, [r3, #0]
	traceHandle handle;
	static int indexOfHandle;

	TRACE_ALLOC_CRITICAL_SECTION();

	TRACE_ASSERT(RecorderDataPtr != NULL, "Recorder not initialized, call vTraceEnable() first!", (traceHandle)0);
    65d0:	4b5a      	ldr	r3, [pc, #360]	; (673c <prvTraceGetObjectHandle+0x178>)
    65d2:	681b      	ldr	r3, [r3, #0]
    65d4:	2b00      	cmp	r3, #0
    65d6:	d105      	bne.n	65e4 <prvTraceGetObjectHandle+0x20>
    65d8:	4b59      	ldr	r3, [pc, #356]	; (6740 <prvTraceGetObjectHandle+0x17c>)
    65da:	0018      	movs	r0, r3
    65dc:	4b59      	ldr	r3, [pc, #356]	; (6744 <prvTraceGetObjectHandle+0x180>)
    65de:	4798      	blx	r3
    65e0:	2300      	movs	r3, #0
    65e2:	e0a7      	b.n	6734 <prvTraceGetObjectHandle+0x170>
	
	TRACE_ASSERT(objectclass < TRACE_NCLASSES, 
    65e4:	1dfb      	adds	r3, r7, #7
    65e6:	781b      	ldrb	r3, [r3, #0]
    65e8:	2b08      	cmp	r3, #8
    65ea:	d905      	bls.n	65f8 <prvTraceGetObjectHandle+0x34>
    65ec:	4b56      	ldr	r3, [pc, #344]	; (6748 <prvTraceGetObjectHandle+0x184>)
    65ee:	0018      	movs	r0, r3
    65f0:	4b54      	ldr	r3, [pc, #336]	; (6744 <prvTraceGetObjectHandle+0x180>)
    65f2:	4798      	blx	r3
    65f4:	2300      	movs	r3, #0
    65f6:	e09d      	b.n	6734 <prvTraceGetObjectHandle+0x170>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    65f8:	f3ef 8310 	mrs	r3, PRIMASK
    65fc:	60fb      	str	r3, [r7, #12]
  return(result);
    65fe:	68fb      	ldr	r3, [r7, #12]
		"prvTraceGetObjectHandle: Invalid value for objectclass", (traceHandle)0);

	trcCRITICAL_SECTION_BEGIN();
    6600:	61bb      	str	r3, [r7, #24]
    6602:	2301      	movs	r3, #1
    6604:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
    6606:	693b      	ldr	r3, [r7, #16]
    6608:	f383 8810 	msr	PRIMASK, r3
    660c:	4b4f      	ldr	r3, [pc, #316]	; (674c <prvTraceGetObjectHandle+0x188>)
    660e:	681b      	ldr	r3, [r3, #0]
    6610:	1c5a      	adds	r2, r3, #1
    6612:	4b4e      	ldr	r3, [pc, #312]	; (674c <prvTraceGetObjectHandle+0x188>)
    6614:	601a      	str	r2, [r3, #0]
	indexOfHandle = objectHandleStacks.indexOfNextAvailableHandle[objectclass];
    6616:	1dfb      	adds	r3, r7, #7
    6618:	781a      	ldrb	r2, [r3, #0]
    661a:	4b4d      	ldr	r3, [pc, #308]	; (6750 <prvTraceGetObjectHandle+0x18c>)
    661c:	0052      	lsls	r2, r2, #1
    661e:	5ad3      	ldrh	r3, [r2, r3]
    6620:	001a      	movs	r2, r3
    6622:	4b4c      	ldr	r3, [pc, #304]	; (6754 <prvTraceGetObjectHandle+0x190>)
    6624:	601a      	str	r2, [r3, #0]
	if (objectHandleStacks.objectHandles[indexOfHandle] == 0)
    6626:	4b4b      	ldr	r3, [pc, #300]	; (6754 <prvTraceGetObjectHandle+0x190>)
    6628:	681b      	ldr	r3, [r3, #0]
    662a:	4a49      	ldr	r2, [pc, #292]	; (6750 <prvTraceGetObjectHandle+0x18c>)
    662c:	2148      	movs	r1, #72	; 0x48
    662e:	18d3      	adds	r3, r2, r3
    6630:	185b      	adds	r3, r3, r1
    6632:	781b      	ldrb	r3, [r3, #0]
    6634:	2b00      	cmp	r3, #0
    6636:	d117      	bne.n	6668 <prvTraceGetObjectHandle+0xa4>
	{
		/* Zero is used to indicate a never before used handle, i.e.,
			new slots in the handle stack. The handle slot needs to
			be initialized here (starts at 1). */
		objectHandleStacks.objectHandles[indexOfHandle] =
    6638:	4b46      	ldr	r3, [pc, #280]	; (6754 <prvTraceGetObjectHandle+0x190>)
    663a:	681a      	ldr	r2, [r3, #0]
			(traceHandle)(1 + indexOfHandle -
    663c:	4b45      	ldr	r3, [pc, #276]	; (6754 <prvTraceGetObjectHandle+0x190>)
    663e:	681b      	ldr	r3, [r3, #0]
    6640:	b2d9      	uxtb	r1, r3
			objectHandleStacks.lowestIndexOfClass[objectclass]);
    6642:	1dfb      	adds	r3, r7, #7
    6644:	781b      	ldrb	r3, [r3, #0]
    6646:	4842      	ldr	r0, [pc, #264]	; (6750 <prvTraceGetObjectHandle+0x18c>)
    6648:	3308      	adds	r3, #8
    664a:	005b      	lsls	r3, r3, #1
    664c:	18c3      	adds	r3, r0, r3
    664e:	3302      	adds	r3, #2
    6650:	881b      	ldrh	r3, [r3, #0]
			(traceHandle)(1 + indexOfHandle -
    6652:	b2db      	uxtb	r3, r3
    6654:	1acb      	subs	r3, r1, r3
    6656:	b2db      	uxtb	r3, r3
    6658:	3301      	adds	r3, #1
    665a:	b2d8      	uxtb	r0, r3
		objectHandleStacks.objectHandles[indexOfHandle] =
    665c:	4b3c      	ldr	r3, [pc, #240]	; (6750 <prvTraceGetObjectHandle+0x18c>)
    665e:	2148      	movs	r1, #72	; 0x48
    6660:	189b      	adds	r3, r3, r2
    6662:	185b      	adds	r3, r3, r1
    6664:	1c02      	adds	r2, r0, #0
    6666:	701a      	strb	r2, [r3, #0]
	}

	handle = objectHandleStacks.objectHandles[indexOfHandle];
    6668:	4b3a      	ldr	r3, [pc, #232]	; (6754 <prvTraceGetObjectHandle+0x190>)
    666a:	681a      	ldr	r2, [r3, #0]
    666c:	231f      	movs	r3, #31
    666e:	18fb      	adds	r3, r7, r3
    6670:	4937      	ldr	r1, [pc, #220]	; (6750 <prvTraceGetObjectHandle+0x18c>)
    6672:	2048      	movs	r0, #72	; 0x48
    6674:	188a      	adds	r2, r1, r2
    6676:	1812      	adds	r2, r2, r0
    6678:	7812      	ldrb	r2, [r2, #0]
    667a:	701a      	strb	r2, [r3, #0]

	if (objectHandleStacks.indexOfNextAvailableHandle[objectclass]
    667c:	1dfb      	adds	r3, r7, #7
    667e:	781a      	ldrb	r2, [r3, #0]
    6680:	4b33      	ldr	r3, [pc, #204]	; (6750 <prvTraceGetObjectHandle+0x18c>)
    6682:	0052      	lsls	r2, r2, #1
    6684:	5ad2      	ldrh	r2, [r2, r3]
		> objectHandleStacks.highestIndexOfClass[objectclass])
    6686:	1dfb      	adds	r3, r7, #7
    6688:	781b      	ldrb	r3, [r3, #0]
    668a:	4931      	ldr	r1, [pc, #196]	; (6750 <prvTraceGetObjectHandle+0x18c>)
    668c:	3310      	adds	r3, #16
    668e:	005b      	lsls	r3, r3, #1
    6690:	18cb      	adds	r3, r1, r3
    6692:	3304      	adds	r3, #4
    6694:	881b      	ldrh	r3, [r3, #0]
	if (objectHandleStacks.indexOfNextAvailableHandle[objectclass]
    6696:	429a      	cmp	r2, r3
    6698:	d90d      	bls.n	66b6 <prvTraceGetObjectHandle+0xf2>
	{
		prvTraceError(pszTraceGetErrorNotEnoughHandles(objectclass));
    669a:	1dfb      	adds	r3, r7, #7
    669c:	781b      	ldrb	r3, [r3, #0]
    669e:	0018      	movs	r0, r3
    66a0:	4b2d      	ldr	r3, [pc, #180]	; (6758 <prvTraceGetObjectHandle+0x194>)
    66a2:	4798      	blx	r3
    66a4:	0003      	movs	r3, r0
    66a6:	0018      	movs	r0, r3
    66a8:	4b26      	ldr	r3, [pc, #152]	; (6744 <prvTraceGetObjectHandle+0x180>)
    66aa:	4798      	blx	r3
		handle = 0;
    66ac:	231f      	movs	r3, #31
    66ae:	18fb      	adds	r3, r7, r3
    66b0:	2200      	movs	r2, #0
    66b2:	701a      	strb	r2, [r3, #0]
    66b4:	e031      	b.n	671a <prvTraceGetObjectHandle+0x156>
	}
	else
	{
		int hndCount;
		objectHandleStacks.indexOfNextAvailableHandle[objectclass]++;
    66b6:	1dfb      	adds	r3, r7, #7
    66b8:	781b      	ldrb	r3, [r3, #0]
    66ba:	4a25      	ldr	r2, [pc, #148]	; (6750 <prvTraceGetObjectHandle+0x18c>)
    66bc:	0059      	lsls	r1, r3, #1
    66be:	5a8a      	ldrh	r2, [r1, r2]
    66c0:	3201      	adds	r2, #1
    66c2:	b291      	uxth	r1, r2
    66c4:	4a22      	ldr	r2, [pc, #136]	; (6750 <prvTraceGetObjectHandle+0x18c>)
    66c6:	005b      	lsls	r3, r3, #1
    66c8:	5299      	strh	r1, [r3, r2]

		hndCount = objectHandleStacks.indexOfNextAvailableHandle[objectclass] -
    66ca:	1dfb      	adds	r3, r7, #7
    66cc:	781a      	ldrb	r2, [r3, #0]
    66ce:	4b20      	ldr	r3, [pc, #128]	; (6750 <prvTraceGetObjectHandle+0x18c>)
    66d0:	0052      	lsls	r2, r2, #1
    66d2:	5ad3      	ldrh	r3, [r2, r3]
    66d4:	0019      	movs	r1, r3
			objectHandleStacks.lowestIndexOfClass[objectclass];
    66d6:	1dfb      	adds	r3, r7, #7
    66d8:	781b      	ldrb	r3, [r3, #0]
    66da:	4a1d      	ldr	r2, [pc, #116]	; (6750 <prvTraceGetObjectHandle+0x18c>)
    66dc:	3308      	adds	r3, #8
    66de:	005b      	lsls	r3, r3, #1
    66e0:	18d3      	adds	r3, r2, r3
    66e2:	3302      	adds	r3, #2
    66e4:	881b      	ldrh	r3, [r3, #0]
		hndCount = objectHandleStacks.indexOfNextAvailableHandle[objectclass] -
    66e6:	1acb      	subs	r3, r1, r3
    66e8:	617b      	str	r3, [r7, #20]

		if (hndCount >
			objectHandleStacks.handleCountWaterMarksOfClass[objectclass])
    66ea:	1dfb      	adds	r3, r7, #7
    66ec:	781b      	ldrb	r3, [r3, #0]
    66ee:	4a18      	ldr	r2, [pc, #96]	; (6750 <prvTraceGetObjectHandle+0x18c>)
    66f0:	3318      	adds	r3, #24
    66f2:	005b      	lsls	r3, r3, #1
    66f4:	18d3      	adds	r3, r2, r3
    66f6:	3306      	adds	r3, #6
    66f8:	881b      	ldrh	r3, [r3, #0]
    66fa:	001a      	movs	r2, r3
		if (hndCount >
    66fc:	697b      	ldr	r3, [r7, #20]
    66fe:	429a      	cmp	r2, r3
    6700:	da0b      	bge.n	671a <prvTraceGetObjectHandle+0x156>
		{
			objectHandleStacks.handleCountWaterMarksOfClass[objectclass] =
    6702:	1dfb      	adds	r3, r7, #7
    6704:	781b      	ldrb	r3, [r3, #0]
				(traceHandle)hndCount;
    6706:	697a      	ldr	r2, [r7, #20]
    6708:	b2d2      	uxtb	r2, r2
    670a:	b291      	uxth	r1, r2
			objectHandleStacks.handleCountWaterMarksOfClass[objectclass] =
    670c:	4a10      	ldr	r2, [pc, #64]	; (6750 <prvTraceGetObjectHandle+0x18c>)
    670e:	3318      	adds	r3, #24
    6710:	005b      	lsls	r3, r3, #1
    6712:	18d3      	adds	r3, r2, r3
    6714:	3306      	adds	r3, #6
    6716:	1c0a      	adds	r2, r1, #0
    6718:	801a      	strh	r2, [r3, #0]
		}
	}
	trcCRITICAL_SECTION_END();
    671a:	4b0c      	ldr	r3, [pc, #48]	; (674c <prvTraceGetObjectHandle+0x188>)
    671c:	681b      	ldr	r3, [r3, #0]
    671e:	1e5a      	subs	r2, r3, #1
    6720:	4b0a      	ldr	r3, [pc, #40]	; (674c <prvTraceGetObjectHandle+0x188>)
    6722:	601a      	str	r2, [r3, #0]
    6724:	69bb      	ldr	r3, [r7, #24]
    6726:	60bb      	str	r3, [r7, #8]
    6728:	68bb      	ldr	r3, [r7, #8]
    672a:	f383 8810 	msr	PRIMASK, r3

	return handle;
    672e:	231f      	movs	r3, #31
    6730:	18fb      	adds	r3, r7, r3
    6732:	781b      	ldrb	r3, [r3, #0]
}
    6734:	0018      	movs	r0, r3
    6736:	46bd      	mov	sp, r7
    6738:	b008      	add	sp, #32
    673a:	bd80      	pop	{r7, pc}
    673c:	20000c58 	.word	0x20000c58
    6740:	00023d48 	.word	0x00023d48
    6744:	000068e1 	.word	0x000068e1
    6748:	00024928 	.word	0x00024928
    674c:	20000bb0 	.word	0x20000bb0
    6750:	20000bc8 	.word	0x20000bc8
    6754:	20000c5c 	.word	0x20000c5c
    6758:	00005601 	.word	0x00005601

0000675c <prvMarkObjectAsUsed>:
 * Sets an "is used flag" on object creation, using the first byte of the name
 * field. This allows for counting the number of used Object Table slots, even
 * if no names have been set.
 ******************************************************************************/
void prvMarkObjectAsUsed(traceObjectClass objectclass, traceHandle handle)
{
    675c:	b590      	push	{r4, r7, lr}
    675e:	b085      	sub	sp, #20
    6760:	af00      	add	r7, sp, #0
    6762:	0002      	movs	r2, r0
    6764:	1dfb      	adds	r3, r7, #7
    6766:	701a      	strb	r2, [r3, #0]
    6768:	1dbb      	adds	r3, r7, #6
    676a:	1c0a      	adds	r2, r1, #0
    676c:	701a      	strb	r2, [r3, #0]
	uint16_t idx = uiIndexOfObject(handle, objectclass);
    676e:	230e      	movs	r3, #14
    6770:	18fc      	adds	r4, r7, r3
    6772:	1dfb      	adds	r3, r7, #7
    6774:	781a      	ldrb	r2, [r3, #0]
    6776:	1dbb      	adds	r3, r7, #6
    6778:	781b      	ldrb	r3, [r3, #0]
    677a:	0011      	movs	r1, r2
    677c:	0018      	movs	r0, r3
    677e:	4b09      	ldr	r3, [pc, #36]	; (67a4 <prvMarkObjectAsUsed+0x48>)
    6780:	4798      	blx	r3
    6782:	0003      	movs	r3, r0
    6784:	8023      	strh	r3, [r4, #0]
	RecorderDataPtr->ObjectPropertyTable.objbytes[idx] = 1;
    6786:	4b08      	ldr	r3, [pc, #32]	; (67a8 <prvMarkObjectAsUsed+0x4c>)
    6788:	681a      	ldr	r2, [r3, #0]
    678a:	230e      	movs	r3, #14
    678c:	18fb      	adds	r3, r7, r3
    678e:	881b      	ldrh	r3, [r3, #0]
    6790:	219c      	movs	r1, #156	; 0x9c
    6792:	18d3      	adds	r3, r2, r3
    6794:	185b      	adds	r3, r3, r1
    6796:	2201      	movs	r2, #1
    6798:	701a      	strb	r2, [r3, #0]
}
    679a:	46c0      	nop			; (mov r8, r8)
    679c:	46bd      	mov	sp, r7
    679e:	b005      	add	sp, #20
    67a0:	bd90      	pop	{r4, r7, pc}
    67a2:	46c0      	nop			; (mov r8, r8)
    67a4:	000064ed 	.word	0x000064ed
    67a8:	20000c58 	.word	0x20000c58

000067ac <prvStrncpy>:
 * prvStrncpy
 *
 * Private string copy function, to improve portability between compilers.
 ******************************************************************************/
static void prvStrncpy(char* dst, const char* src, uint32_t maxLength)
{
    67ac:	b580      	push	{r7, lr}
    67ae:	b086      	sub	sp, #24
    67b0:	af00      	add	r7, sp, #0
    67b2:	60f8      	str	r0, [r7, #12]
    67b4:	60b9      	str	r1, [r7, #8]
    67b6:	607a      	str	r2, [r7, #4]
	uint32_t i;
	for (i = 0; i < maxLength; i++)
    67b8:	2300      	movs	r3, #0
    67ba:	617b      	str	r3, [r7, #20]
    67bc:	e010      	b.n	67e0 <prvStrncpy+0x34>
	{
		dst[i] = src[i];
    67be:	68fa      	ldr	r2, [r7, #12]
    67c0:	697b      	ldr	r3, [r7, #20]
    67c2:	18d3      	adds	r3, r2, r3
    67c4:	68b9      	ldr	r1, [r7, #8]
    67c6:	697a      	ldr	r2, [r7, #20]
    67c8:	188a      	adds	r2, r1, r2
    67ca:	7812      	ldrb	r2, [r2, #0]
    67cc:	701a      	strb	r2, [r3, #0]
		if (src[i] == 0)
    67ce:	68ba      	ldr	r2, [r7, #8]
    67d0:	697b      	ldr	r3, [r7, #20]
    67d2:	18d3      	adds	r3, r2, r3
    67d4:	781b      	ldrb	r3, [r3, #0]
    67d6:	2b00      	cmp	r3, #0
    67d8:	d007      	beq.n	67ea <prvStrncpy+0x3e>
	for (i = 0; i < maxLength; i++)
    67da:	697b      	ldr	r3, [r7, #20]
    67dc:	3301      	adds	r3, #1
    67de:	617b      	str	r3, [r7, #20]
    67e0:	697a      	ldr	r2, [r7, #20]
    67e2:	687b      	ldr	r3, [r7, #4]
    67e4:	429a      	cmp	r2, r3
    67e6:	d3ea      	bcc.n	67be <prvStrncpy+0x12>
			break;
	}
}
    67e8:	e000      	b.n	67ec <prvStrncpy+0x40>
			break;
    67ea:	46c0      	nop			; (mov r8, r8)
}
    67ec:	46c0      	nop			; (mov r8, r8)
    67ee:	46bd      	mov	sp, r7
    67f0:	b006      	add	sp, #24
    67f2:	bd80      	pop	{r7, pc}

000067f4 <prvTraceSetObjectName>:
 * recorder's Object Property Table, at the given handle and object class.
 ******************************************************************************/
void prvTraceSetObjectName(traceObjectClass objectclass,
						 traceHandle handle,
						 const char* name)
{
    67f4:	b580      	push	{r7, lr}
    67f6:	b082      	sub	sp, #8
    67f8:	af00      	add	r7, sp, #0
    67fa:	603a      	str	r2, [r7, #0]
    67fc:	1dfb      	adds	r3, r7, #7
    67fe:	1c02      	adds	r2, r0, #0
    6800:	701a      	strb	r2, [r3, #0]
    6802:	1dbb      	adds	r3, r7, #6
    6804:	1c0a      	adds	r2, r1, #0
    6806:	701a      	strb	r2, [r3, #0]
	static uint16_t idx;

	TRACE_ASSERT(name != NULL, "prvTraceSetObjectName: name == NULL", TRC_UNUSED);
    6808:	683b      	ldr	r3, [r7, #0]
    680a:	2b00      	cmp	r3, #0
    680c:	d104      	bne.n	6818 <prvTraceSetObjectName+0x24>
    680e:	4b2a      	ldr	r3, [pc, #168]	; (68b8 <prvTraceSetObjectName+0xc4>)
    6810:	0018      	movs	r0, r3
    6812:	4b2a      	ldr	r3, [pc, #168]	; (68bc <prvTraceSetObjectName+0xc8>)
    6814:	4798      	blx	r3
    6816:	e04b      	b.n	68b0 <prvTraceSetObjectName+0xbc>

	if (objectclass >= TRACE_NCLASSES)
    6818:	1dfb      	adds	r3, r7, #7
    681a:	781b      	ldrb	r3, [r3, #0]
    681c:	2b08      	cmp	r3, #8
    681e:	d904      	bls.n	682a <prvTraceSetObjectName+0x36>
	{
		prvTraceError("Illegal object class in prvTraceSetObjectName");
    6820:	4b27      	ldr	r3, [pc, #156]	; (68c0 <prvTraceSetObjectName+0xcc>)
    6822:	0018      	movs	r0, r3
    6824:	4b25      	ldr	r3, [pc, #148]	; (68bc <prvTraceSetObjectName+0xc8>)
    6826:	4798      	blx	r3
		return;
    6828:	e042      	b.n	68b0 <prvTraceSetObjectName+0xbc>
	}

	if (handle == 0)
    682a:	1dbb      	adds	r3, r7, #6
    682c:	781b      	ldrb	r3, [r3, #0]
    682e:	2b00      	cmp	r3, #0
    6830:	d104      	bne.n	683c <prvTraceSetObjectName+0x48>
	{
		prvTraceError("Illegal handle (0) in prvTraceSetObjectName.");
    6832:	4b24      	ldr	r3, [pc, #144]	; (68c4 <prvTraceSetObjectName+0xd0>)
    6834:	0018      	movs	r0, r3
    6836:	4b21      	ldr	r3, [pc, #132]	; (68bc <prvTraceSetObjectName+0xc8>)
    6838:	4798      	blx	r3
		return;
    683a:	e039      	b.n	68b0 <prvTraceSetObjectName+0xbc>
	}

	if (handle > RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[objectclass])
    683c:	4b22      	ldr	r3, [pc, #136]	; (68c8 <prvTraceSetObjectName+0xd4>)
    683e:	681a      	ldr	r2, [r3, #0]
    6840:	1dfb      	adds	r3, r7, #7
    6842:	781b      	ldrb	r3, [r3, #0]
    6844:	2164      	movs	r1, #100	; 0x64
    6846:	18d3      	adds	r3, r2, r3
    6848:	185b      	adds	r3, r3, r1
    684a:	781b      	ldrb	r3, [r3, #0]
    684c:	1dba      	adds	r2, r7, #6
    684e:	7812      	ldrb	r2, [r2, #0]
    6850:	429a      	cmp	r2, r3
    6852:	d909      	bls.n	6868 <prvTraceSetObjectName+0x74>
	{
		/* ERROR */
		prvTraceError(pszTraceGetErrorNotEnoughHandles(objectclass));
    6854:	1dfb      	adds	r3, r7, #7
    6856:	781b      	ldrb	r3, [r3, #0]
    6858:	0018      	movs	r0, r3
    685a:	4b1c      	ldr	r3, [pc, #112]	; (68cc <prvTraceSetObjectName+0xd8>)
    685c:	4798      	blx	r3
    685e:	0003      	movs	r3, r0
    6860:	0018      	movs	r0, r3
    6862:	4b16      	ldr	r3, [pc, #88]	; (68bc <prvTraceSetObjectName+0xc8>)
    6864:	4798      	blx	r3
    6866:	e023      	b.n	68b0 <prvTraceSetObjectName+0xbc>
	}
	else
	{
		idx = uiIndexOfObject(handle, objectclass);
    6868:	1dfb      	adds	r3, r7, #7
    686a:	781a      	ldrb	r2, [r3, #0]
    686c:	1dbb      	adds	r3, r7, #6
    686e:	781b      	ldrb	r3, [r3, #0]
    6870:	0011      	movs	r1, r2
    6872:	0018      	movs	r0, r3
    6874:	4b16      	ldr	r3, [pc, #88]	; (68d0 <prvTraceSetObjectName+0xdc>)
    6876:	4798      	blx	r3
    6878:	0003      	movs	r3, r0
    687a:	001a      	movs	r2, r3
    687c:	4b15      	ldr	r3, [pc, #84]	; (68d4 <prvTraceSetObjectName+0xe0>)
    687e:	801a      	strh	r2, [r3, #0]

		if (traceErrorMessage == NULL)
    6880:	4b15      	ldr	r3, [pc, #84]	; (68d8 <prvTraceSetObjectName+0xe4>)
    6882:	681b      	ldr	r3, [r3, #0]
    6884:	2b00      	cmp	r3, #0
    6886:	d113      	bne.n	68b0 <prvTraceSetObjectName+0xbc>
		{
			prvStrncpy((char*)&(RecorderDataPtr->ObjectPropertyTable.objbytes[idx]),
    6888:	4b0f      	ldr	r3, [pc, #60]	; (68c8 <prvTraceSetObjectName+0xd4>)
    688a:	681a      	ldr	r2, [r3, #0]
    688c:	4b11      	ldr	r3, [pc, #68]	; (68d4 <prvTraceSetObjectName+0xe0>)
    688e:	881b      	ldrh	r3, [r3, #0]
    6890:	3398      	adds	r3, #152	; 0x98
    6892:	18d3      	adds	r3, r2, r3
    6894:	1d18      	adds	r0, r3, #4
				name,
				RecorderDataPtr->ObjectPropertyTable.NameLengthPerClass[ objectclass ]);
    6896:	4b0c      	ldr	r3, [pc, #48]	; (68c8 <prvTraceSetObjectName+0xd4>)
    6898:	681a      	ldr	r2, [r3, #0]
    689a:	1dfb      	adds	r3, r7, #7
    689c:	781b      	ldrb	r3, [r3, #0]
    689e:	2170      	movs	r1, #112	; 0x70
    68a0:	18d3      	adds	r3, r2, r3
    68a2:	185b      	adds	r3, r3, r1
    68a4:	781b      	ldrb	r3, [r3, #0]
			prvStrncpy((char*)&(RecorderDataPtr->ObjectPropertyTable.objbytes[idx]),
    68a6:	001a      	movs	r2, r3
    68a8:	683b      	ldr	r3, [r7, #0]
    68aa:	0019      	movs	r1, r3
    68ac:	4b0b      	ldr	r3, [pc, #44]	; (68dc <prvTraceSetObjectName+0xe8>)
    68ae:	4798      	blx	r3
		}
	}
}
    68b0:	46bd      	mov	sp, r7
    68b2:	b002      	add	sp, #8
    68b4:	bd80      	pop	{r7, pc}
    68b6:	46c0      	nop			; (mov r8, r8)
    68b8:	00024a2c 	.word	0x00024a2c
    68bc:	000068e1 	.word	0x000068e1
    68c0:	00024a60 	.word	0x00024a60
    68c4:	00024a90 	.word	0x00024a90
    68c8:	20000c58 	.word	0x20000c58
    68cc:	00005601 	.word	0x00005601
    68d0:	000064ed 	.word	0x000064ed
    68d4:	20000c60 	.word	0x20000c60
    68d8:	20000bb8 	.word	0x20000bb8
    68dc:	000067ad 	.word	0x000067ad

000068e0 <prvTraceError>:
 * Note: If a recorder error is registered before vTraceStart is called, the
 * trace start will be aborted. This can occur if any of the Nxxxx constants
 * (e.g., TRC_CFG_NTASK) in trcConfig.h is too small.
 ******************************************************************************/
void prvTraceError(const char* msg)
{
    68e0:	b580      	push	{r7, lr}
    68e2:	b082      	sub	sp, #8
    68e4:	af00      	add	r7, sp, #0
    68e6:	6078      	str	r0, [r7, #4]
	/* Stop the recorder */
	if (RecorderDataPtr != NULL)
    68e8:	4b11      	ldr	r3, [pc, #68]	; (6930 <prvTraceError+0x50>)
    68ea:	681b      	ldr	r3, [r3, #0]
    68ec:	2b00      	cmp	r3, #0
    68ee:	d001      	beq.n	68f4 <prvTraceError+0x14>
	{
		vTraceStop();
    68f0:	4b10      	ldr	r3, [pc, #64]	; (6934 <prvTraceError+0x54>)
    68f2:	4798      	blx	r3
	}

	/* If first error only... */
	if (traceErrorMessage == NULL)
    68f4:	4b10      	ldr	r3, [pc, #64]	; (6938 <prvTraceError+0x58>)
    68f6:	681b      	ldr	r3, [r3, #0]
    68f8:	2b00      	cmp	r3, #0
    68fa:	d115      	bne.n	6928 <prvTraceError+0x48>
	{
		traceErrorMessage = (char*)(intptr_t) msg;
    68fc:	4b0e      	ldr	r3, [pc, #56]	; (6938 <prvTraceError+0x58>)
    68fe:	687a      	ldr	r2, [r7, #4]
    6900:	601a      	str	r2, [r3, #0]
		if (RecorderDataPtr != NULL)
    6902:	4b0b      	ldr	r3, [pc, #44]	; (6930 <prvTraceError+0x50>)
    6904:	681b      	ldr	r3, [r3, #0]
    6906:	2b00      	cmp	r3, #0
    6908:	d00e      	beq.n	6928 <prvTraceError+0x48>
		{
			prvStrncpy(RecorderDataPtr->systemInfo, traceErrorMessage, 80);
    690a:	4b09      	ldr	r3, [pc, #36]	; (6930 <prvTraceError+0x50>)
    690c:	681b      	ldr	r3, [r3, #0]
    690e:	4a0b      	ldr	r2, [pc, #44]	; (693c <prvTraceError+0x5c>)
    6910:	1898      	adds	r0, r3, r2
    6912:	4b09      	ldr	r3, [pc, #36]	; (6938 <prvTraceError+0x58>)
    6914:	681b      	ldr	r3, [r3, #0]
    6916:	2250      	movs	r2, #80	; 0x50
    6918:	0019      	movs	r1, r3
    691a:	4b09      	ldr	r3, [pc, #36]	; (6940 <prvTraceError+0x60>)
    691c:	4798      	blx	r3
			RecorderDataPtr->internalErrorOccured = 1;
    691e:	4b04      	ldr	r3, [pc, #16]	; (6930 <prvTraceError+0x50>)
    6920:	681b      	ldr	r3, [r3, #0]
    6922:	4a08      	ldr	r2, [pc, #32]	; (6944 <prvTraceError+0x64>)
    6924:	2101      	movs	r1, #1
    6926:	5099      	str	r1, [r3, r2]
		}
	}
}
    6928:	46c0      	nop			; (mov r8, r8)
    692a:	46bd      	mov	sp, r7
    692c:	b002      	add	sp, #8
    692e:	bd80      	pop	{r7, pc}
    6930:	20000c58 	.word	0x20000c58
    6934:	000057a5 	.word	0x000057a5
    6938:	20000bb8 	.word	0x20000bb8
    693c:	000006bc 	.word	0x000006bc
    6940:	000067ad 	.word	0x000067ad
    6944:	000006b4 	.word	0x000006b4

00006948 <prvCheckDataToBeOverwrittenForMultiEntryEvents>:
 * This is assumed to execute within a critical section...
 *****************************************************************************/

#if (TRC_CFG_SNAPSHOT_MODE == TRC_SNAPSHOT_MODE_RING_BUFFER)
void prvCheckDataToBeOverwrittenForMultiEntryEvents(uint8_t nofEntriesToCheck)
{
    6948:	b580      	push	{r7, lr}
    694a:	b086      	sub	sp, #24
    694c:	af00      	add	r7, sp, #0
    694e:	0002      	movs	r2, r0
    6950:	1dfb      	adds	r3, r7, #7
    6952:	701a      	strb	r2, [r3, #0]
	/* Generic "int" type is desired - should be 16 bit variable on 16 bit HW */
	unsigned int i = 0;
    6954:	2300      	movs	r3, #0
    6956:	617b      	str	r3, [r7, #20]
	unsigned int e = 0;
    6958:	2300      	movs	r3, #0
    695a:	613b      	str	r3, [r7, #16]

	TRACE_ASSERT(nofEntriesToCheck != 0, 
    695c:	1dfb      	adds	r3, r7, #7
    695e:	781b      	ldrb	r3, [r3, #0]
    6960:	2b00      	cmp	r3, #0
    6962:	d000      	beq.n	6966 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x1e>
    6964:	e089      	b.n	6a7a <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x132>
    6966:	4b49      	ldr	r3, [pc, #292]	; (6a8c <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x144>)
    6968:	0018      	movs	r0, r3
    696a:	4b49      	ldr	r3, [pc, #292]	; (6a90 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x148>)
    696c:	4798      	blx	r3
    696e:	e08a      	b.n	6a86 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x13e>
		"prvCheckDataToBeOverwrittenForMultiEntryEvents: nofEntriesToCheck == 0", TRC_UNUSED);

	while (i < nofEntriesToCheck)
	{
		e = RecorderDataPtr->nextFreeIndex + i;
    6970:	4b48      	ldr	r3, [pc, #288]	; (6a94 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x14c>)
    6972:	681b      	ldr	r3, [r3, #0]
    6974:	69da      	ldr	r2, [r3, #28]
    6976:	697b      	ldr	r3, [r7, #20]
    6978:	18d3      	adds	r3, r2, r3
    697a:	613b      	str	r3, [r7, #16]
		if ((RecorderDataPtr->eventData[e*4] > USER_EVENT) &&
    697c:	4b45      	ldr	r3, [pc, #276]	; (6a94 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x14c>)
    697e:	6819      	ldr	r1, [r3, #0]
    6980:	693b      	ldr	r3, [r7, #16]
    6982:	009a      	lsls	r2, r3, #2
    6984:	23e2      	movs	r3, #226	; 0xe2
    6986:	00db      	lsls	r3, r3, #3
    6988:	188a      	adds	r2, r1, r2
    698a:	18d3      	adds	r3, r2, r3
    698c:	781b      	ldrb	r3, [r3, #0]
    698e:	2b98      	cmp	r3, #152	; 0x98
    6990:	d934      	bls.n	69fc <prvCheckDataToBeOverwrittenForMultiEntryEvents+0xb4>
			(RecorderDataPtr->eventData[e*4] < USER_EVENT + 16))
    6992:	4b40      	ldr	r3, [pc, #256]	; (6a94 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x14c>)
    6994:	6819      	ldr	r1, [r3, #0]
    6996:	693b      	ldr	r3, [r7, #16]
    6998:	009a      	lsls	r2, r3, #2
    699a:	23e2      	movs	r3, #226	; 0xe2
    699c:	00db      	lsls	r3, r3, #3
    699e:	188a      	adds	r2, r1, r2
    69a0:	18d3      	adds	r3, r2, r3
    69a2:	781b      	ldrb	r3, [r3, #0]
		if ((RecorderDataPtr->eventData[e*4] > USER_EVENT) &&
    69a4:	2ba7      	cmp	r3, #167	; 0xa7
    69a6:	d829      	bhi.n	69fc <prvCheckDataToBeOverwrittenForMultiEntryEvents+0xb4>
		{
			uint8_t nDataEvents = (uint8_t)(RecorderDataPtr->eventData[e*4] - USER_EVENT);
    69a8:	4b3a      	ldr	r3, [pc, #232]	; (6a94 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x14c>)
    69aa:	6819      	ldr	r1, [r3, #0]
    69ac:	693b      	ldr	r3, [r7, #16]
    69ae:	009a      	lsls	r2, r3, #2
    69b0:	23e2      	movs	r3, #226	; 0xe2
    69b2:	00db      	lsls	r3, r3, #3
    69b4:	188a      	adds	r2, r1, r2
    69b6:	18d3      	adds	r3, r2, r3
    69b8:	781a      	ldrb	r2, [r3, #0]
    69ba:	230f      	movs	r3, #15
    69bc:	18fb      	adds	r3, r7, r3
    69be:	3268      	adds	r2, #104	; 0x68
    69c0:	701a      	strb	r2, [r3, #0]
			if ((e + nDataEvents) < RecorderDataPtr->maxEvents)
    69c2:	230f      	movs	r3, #15
    69c4:	18fb      	adds	r3, r7, r3
    69c6:	781a      	ldrb	r2, [r3, #0]
    69c8:	693b      	ldr	r3, [r7, #16]
    69ca:	18d2      	adds	r2, r2, r3
    69cc:	4b31      	ldr	r3, [pc, #196]	; (6a94 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x14c>)
    69ce:	681b      	ldr	r3, [r3, #0]
    69d0:	699b      	ldr	r3, [r3, #24]
    69d2:	429a      	cmp	r2, r3
    69d4:	d24d      	bcs.n	6a72 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x12a>
			{
				(void)memset(& RecorderDataPtr->eventData[e*4], 0, (size_t) (4 + 4 * nDataEvents));
    69d6:	4b2f      	ldr	r3, [pc, #188]	; (6a94 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x14c>)
    69d8:	681a      	ldr	r2, [r3, #0]
    69da:	693b      	ldr	r3, [r7, #16]
    69dc:	009b      	lsls	r3, r3, #2
    69de:	21e2      	movs	r1, #226	; 0xe2
    69e0:	00c9      	lsls	r1, r1, #3
    69e2:	468c      	mov	ip, r1
    69e4:	4463      	add	r3, ip
    69e6:	18d0      	adds	r0, r2, r3
    69e8:	230f      	movs	r3, #15
    69ea:	18fb      	adds	r3, r7, r3
    69ec:	781b      	ldrb	r3, [r3, #0]
    69ee:	3301      	adds	r3, #1
    69f0:	009b      	lsls	r3, r3, #2
    69f2:	001a      	movs	r2, r3
    69f4:	2100      	movs	r1, #0
    69f6:	4b28      	ldr	r3, [pc, #160]	; (6a98 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x150>)
    69f8:	4798      	blx	r3
		{
    69fa:	e03a      	b.n	6a72 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x12a>
			}
		}
		else if (RecorderDataPtr->eventData[e*4] == DIV_XPS)
    69fc:	4b25      	ldr	r3, [pc, #148]	; (6a94 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x14c>)
    69fe:	6819      	ldr	r1, [r3, #0]
    6a00:	693b      	ldr	r3, [r7, #16]
    6a02:	009a      	lsls	r2, r3, #2
    6a04:	23e2      	movs	r3, #226	; 0xe2
    6a06:	00db      	lsls	r3, r3, #3
    6a08:	188a      	adds	r2, r1, r2
    6a0a:	18d3      	adds	r3, r2, r3
    6a0c:	781b      	ldrb	r3, [r3, #0]
    6a0e:	2b01      	cmp	r3, #1
    6a10:	d130      	bne.n	6a74 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x12c>
		{
			if ((e + 1) < RecorderDataPtr->maxEvents)
    6a12:	693b      	ldr	r3, [r7, #16]
    6a14:	1c5a      	adds	r2, r3, #1
    6a16:	4b1f      	ldr	r3, [pc, #124]	; (6a94 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x14c>)
    6a18:	681b      	ldr	r3, [r3, #0]
    6a1a:	699b      	ldr	r3, [r3, #24]
    6a1c:	429a      	cmp	r2, r3
    6a1e:	d20e      	bcs.n	6a3e <prvCheckDataToBeOverwrittenForMultiEntryEvents+0xf6>
			{
				/* Clear 8 bytes */
				(void)memset(& RecorderDataPtr->eventData[e*4], 0, 4 + 4);
    6a20:	4b1c      	ldr	r3, [pc, #112]	; (6a94 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x14c>)
    6a22:	681a      	ldr	r2, [r3, #0]
    6a24:	693b      	ldr	r3, [r7, #16]
    6a26:	009b      	lsls	r3, r3, #2
    6a28:	21e2      	movs	r1, #226	; 0xe2
    6a2a:	00c9      	lsls	r1, r1, #3
    6a2c:	468c      	mov	ip, r1
    6a2e:	4463      	add	r3, ip
    6a30:	18d3      	adds	r3, r2, r3
    6a32:	2208      	movs	r2, #8
    6a34:	2100      	movs	r1, #0
    6a36:	0018      	movs	r0, r3
    6a38:	4b17      	ldr	r3, [pc, #92]	; (6a98 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x150>)
    6a3a:	4798      	blx	r3
    6a3c:	e01a      	b.n	6a74 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x12c>
			}
			else
			{
				/* Clear 8 bytes, 4 first and 4 last */
				(void)memset(& RecorderDataPtr->eventData[0], 0, 4);
    6a3e:	4b15      	ldr	r3, [pc, #84]	; (6a94 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x14c>)
    6a40:	681b      	ldr	r3, [r3, #0]
    6a42:	22e2      	movs	r2, #226	; 0xe2
    6a44:	00d2      	lsls	r2, r2, #3
    6a46:	4694      	mov	ip, r2
    6a48:	4463      	add	r3, ip
    6a4a:	2204      	movs	r2, #4
    6a4c:	2100      	movs	r1, #0
    6a4e:	0018      	movs	r0, r3
    6a50:	4b11      	ldr	r3, [pc, #68]	; (6a98 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x150>)
    6a52:	4798      	blx	r3
				(void)memset(& RecorderDataPtr->eventData[e*4], 0, 4);
    6a54:	4b0f      	ldr	r3, [pc, #60]	; (6a94 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x14c>)
    6a56:	681a      	ldr	r2, [r3, #0]
    6a58:	693b      	ldr	r3, [r7, #16]
    6a5a:	009b      	lsls	r3, r3, #2
    6a5c:	21e2      	movs	r1, #226	; 0xe2
    6a5e:	00c9      	lsls	r1, r1, #3
    6a60:	468c      	mov	ip, r1
    6a62:	4463      	add	r3, ip
    6a64:	18d3      	adds	r3, r2, r3
    6a66:	2204      	movs	r2, #4
    6a68:	2100      	movs	r1, #0
    6a6a:	0018      	movs	r0, r3
    6a6c:	4b0a      	ldr	r3, [pc, #40]	; (6a98 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x150>)
    6a6e:	4798      	blx	r3
    6a70:	e000      	b.n	6a74 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x12c>
		{
    6a72:	46c0      	nop			; (mov r8, r8)
			}
		}
		i++;
    6a74:	697b      	ldr	r3, [r7, #20]
    6a76:	3301      	adds	r3, #1
    6a78:	617b      	str	r3, [r7, #20]
	while (i < nofEntriesToCheck)
    6a7a:	1dfb      	adds	r3, r7, #7
    6a7c:	781a      	ldrb	r2, [r3, #0]
    6a7e:	697b      	ldr	r3, [r7, #20]
    6a80:	429a      	cmp	r2, r3
    6a82:	d900      	bls.n	6a86 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x13e>
    6a84:	e774      	b.n	6970 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x28>
	}
}
    6a86:	46bd      	mov	sp, r7
    6a88:	b006      	add	sp, #24
    6a8a:	bd80      	pop	{r7, pc}
    6a8c:	00024af0 	.word	0x00024af0
    6a90:	000068e1 	.word	0x000068e1
    6a94:	20000c58 	.word	0x20000c58
    6a98:	0002181b 	.word	0x0002181b

00006a9c <prvTraceUpdateCounters>:
 * prvTraceUpdateCounters
 *
 * Updates the index of the event buffer.
 ******************************************************************************/
void prvTraceUpdateCounters(void)
{	
    6a9c:	b580      	push	{r7, lr}
    6a9e:	af00      	add	r7, sp, #0
	if (RecorderDataPtr->recorderActive == 0)
    6aa0:	4b12      	ldr	r3, [pc, #72]	; (6aec <prvTraceUpdateCounters+0x50>)
    6aa2:	681b      	ldr	r3, [r3, #0]
    6aa4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    6aa6:	2b00      	cmp	r3, #0
    6aa8:	d01c      	beq.n	6ae4 <prvTraceUpdateCounters+0x48>
	{
		return;
	}
	
	RecorderDataPtr->numEvents++;
    6aaa:	4b10      	ldr	r3, [pc, #64]	; (6aec <prvTraceUpdateCounters+0x50>)
    6aac:	681b      	ldr	r3, [r3, #0]
    6aae:	695a      	ldr	r2, [r3, #20]
    6ab0:	3201      	adds	r2, #1
    6ab2:	615a      	str	r2, [r3, #20]

	RecorderDataPtr->nextFreeIndex++;
    6ab4:	4b0d      	ldr	r3, [pc, #52]	; (6aec <prvTraceUpdateCounters+0x50>)
    6ab6:	681b      	ldr	r3, [r3, #0]
    6ab8:	69da      	ldr	r2, [r3, #28]
    6aba:	3201      	adds	r2, #1
    6abc:	61da      	str	r2, [r3, #28]

	if (RecorderDataPtr->nextFreeIndex >= (TRC_CFG_EVENT_BUFFER_SIZE))
    6abe:	4b0b      	ldr	r3, [pc, #44]	; (6aec <prvTraceUpdateCounters+0x50>)
    6ac0:	681b      	ldr	r3, [r3, #0]
    6ac2:	69da      	ldr	r2, [r3, #28]
    6ac4:	232c      	movs	r3, #44	; 0x2c
    6ac6:	33ff      	adds	r3, #255	; 0xff
    6ac8:	429a      	cmp	r2, r3
    6aca:	d907      	bls.n	6adc <prvTraceUpdateCounters+0x40>
	{
#if (TRC_CFG_SNAPSHOT_MODE == TRC_SNAPSHOT_MODE_RING_BUFFER)
		RecorderDataPtr->bufferIsFull = 1;
    6acc:	4b07      	ldr	r3, [pc, #28]	; (6aec <prvTraceUpdateCounters+0x50>)
    6ace:	681b      	ldr	r3, [r3, #0]
    6ad0:	2201      	movs	r2, #1
    6ad2:	621a      	str	r2, [r3, #32]
		RecorderDataPtr->nextFreeIndex = 0;
    6ad4:	4b05      	ldr	r3, [pc, #20]	; (6aec <prvTraceUpdateCounters+0x50>)
    6ad6:	681b      	ldr	r3, [r3, #0]
    6ad8:	2200      	movs	r2, #0
    6ada:	61da      	str	r2, [r3, #28]
		vTraceStop();
#endif
	}

#if (TRC_CFG_SNAPSHOT_MODE == TRC_SNAPSHOT_MODE_RING_BUFFER)
	prvCheckDataToBeOverwrittenForMultiEntryEvents(1);
    6adc:	2001      	movs	r0, #1
    6ade:	4b04      	ldr	r3, [pc, #16]	; (6af0 <prvTraceUpdateCounters+0x54>)
    6ae0:	4798      	blx	r3
    6ae2:	e000      	b.n	6ae6 <prvTraceUpdateCounters+0x4a>
		return;
    6ae4:	46c0      	nop			; (mov r8, r8)
#endif
}
    6ae6:	46bd      	mov	sp, r7
    6ae8:	bd80      	pop	{r7, pc}
    6aea:	46c0      	nop			; (mov r8, r8)
    6aec:	20000c58 	.word	0x20000c58
    6af0:	00006949 	.word	0x00006949

00006af4 <prvTraceGetDTS>:
 *
 * The parameter param_maxDTS should be 0xFF for 8-bit dts or 0xFFFF for
 * events with 16-bit dts fields.
 *****************************************************************************/
uint16_t prvTraceGetDTS(uint16_t param_maxDTS)
{
    6af4:	b5b0      	push	{r4, r5, r7, lr}
    6af6:	b086      	sub	sp, #24
    6af8:	af00      	add	r7, sp, #0
    6afa:	0002      	movs	r2, r0
    6afc:	1dbb      	adds	r3, r7, #6
    6afe:	801a      	strh	r2, [r3, #0]
	static uint32_t old_timestamp = 0;
	XTSEvent* xts = 0;
    6b00:	2300      	movs	r3, #0
    6b02:	617b      	str	r3, [r7, #20]
	uint32_t dts = 0;
    6b04:	2300      	movs	r3, #0
    6b06:	613b      	str	r3, [r7, #16]
	uint32_t timestamp = 0;
    6b08:	2300      	movs	r3, #0
    6b0a:	60fb      	str	r3, [r7, #12]

	TRACE_ASSERT(param_maxDTS == 0xFF || param_maxDTS == 0xFFFF, "prvTraceGetDTS: Invalid value for param_maxDTS", 0);
    6b0c:	1dbb      	adds	r3, r7, #6
    6b0e:	881b      	ldrh	r3, [r3, #0]
    6b10:	2bff      	cmp	r3, #255	; 0xff
    6b12:	d00a      	beq.n	6b2a <prvTraceGetDTS+0x36>
    6b14:	1dbb      	adds	r3, r7, #6
    6b16:	881b      	ldrh	r3, [r3, #0]
    6b18:	4a60      	ldr	r2, [pc, #384]	; (6c9c <prvTraceGetDTS+0x1a8>)
    6b1a:	4293      	cmp	r3, r2
    6b1c:	d005      	beq.n	6b2a <prvTraceGetDTS+0x36>
    6b1e:	4b60      	ldr	r3, [pc, #384]	; (6ca0 <prvTraceGetDTS+0x1ac>)
    6b20:	0018      	movs	r0, r3
    6b22:	4b60      	ldr	r3, [pc, #384]	; (6ca4 <prvTraceGetDTS+0x1b0>)
    6b24:	4798      	blx	r3
    6b26:	2300      	movs	r3, #0
    6b28:	e0b3      	b.n	6c92 <prvTraceGetDTS+0x19e>

	
	if (RecorderDataPtr->frequency == 0)
    6b2a:	4b5f      	ldr	r3, [pc, #380]	; (6ca8 <prvTraceGetDTS+0x1b4>)
    6b2c:	681b      	ldr	r3, [r3, #0]
    6b2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    6b30:	2b00      	cmp	r3, #0
    6b32:	d118      	bne.n	6b66 <prvTraceGetDTS+0x72>
	{	
		if (timestampFrequency != 0)
    6b34:	4b5d      	ldr	r3, [pc, #372]	; (6cac <prvTraceGetDTS+0x1b8>)
    6b36:	681b      	ldr	r3, [r3, #0]
    6b38:	2b00      	cmp	r3, #0
    6b3a:	d006      	beq.n	6b4a <prvTraceGetDTS+0x56>
		{
			/* If to override default TRC_HWTC_FREQ_HZ value with value set by vTraceSetFrequency */
			RecorderDataPtr->frequency = timestampFrequency / (TRC_HWTC_DIVISOR);
    6b3c:	4b5a      	ldr	r3, [pc, #360]	; (6ca8 <prvTraceGetDTS+0x1b4>)
    6b3e:	681b      	ldr	r3, [r3, #0]
    6b40:	4a5a      	ldr	r2, [pc, #360]	; (6cac <prvTraceGetDTS+0x1b8>)
    6b42:	6812      	ldr	r2, [r2, #0]
    6b44:	0892      	lsrs	r2, r2, #2
    6b46:	625a      	str	r2, [r3, #36]	; 0x24
    6b48:	e00d      	b.n	6b66 <prvTraceGetDTS+0x72>
		} 
		else if (init_hwtc_count != (TRC_HWTC_COUNT))
    6b4a:	4b59      	ldr	r3, [pc, #356]	; (6cb0 <prvTraceGetDTS+0x1bc>)
    6b4c:	681a      	ldr	r2, [r3, #0]
    6b4e:	4b59      	ldr	r3, [pc, #356]	; (6cb4 <prvTraceGetDTS+0x1c0>)
    6b50:	681b      	ldr	r3, [r3, #0]
    6b52:	429a      	cmp	r2, r3
    6b54:	d007      	beq.n	6b66 <prvTraceGetDTS+0x72>
			/* If using default value and timer has been started. 
			Note: If the default frequency value set here would be incorrect, e.g.,
			if the timer has actually not been configured yet, override this 
			with vTraceSetFrequency.
			*/
			RecorderDataPtr->frequency = (TRC_HWTC_FREQ_HZ) / (TRC_HWTC_DIVISOR);		
    6b56:	4b54      	ldr	r3, [pc, #336]	; (6ca8 <prvTraceGetDTS+0x1b4>)
    6b58:	681c      	ldr	r4, [r3, #0]
    6b5a:	2000      	movs	r0, #0
    6b5c:	4b56      	ldr	r3, [pc, #344]	; (6cb8 <prvTraceGetDTS+0x1c4>)
    6b5e:	4798      	blx	r3
    6b60:	0003      	movs	r3, r0
    6b62:	089b      	lsrs	r3, r3, #2
    6b64:	6263      	str	r3, [r4, #36]	; 0x24
	* The below statements read the timestamp from the timer port module.
	* If necessary, whole seconds are extracted using division while the rest
	* comes from the modulo operation.
	**************************************************************************/
	
	prvTracePortGetTimeStamp(&timestamp);	
    6b66:	230c      	movs	r3, #12
    6b68:	18fb      	adds	r3, r7, r3
    6b6a:	0018      	movs	r0, r3
    6b6c:	4b53      	ldr	r3, [pc, #332]	; (6cbc <prvTraceGetDTS+0x1c8>)
    6b6e:	4798      	blx	r3
	
	/***************************************************************************
	* Since dts is unsigned the result will be correct even if timestamp has
	* wrapped around.
	***************************************************************************/
	dts = timestamp - old_timestamp;
    6b70:	68fa      	ldr	r2, [r7, #12]
    6b72:	4b53      	ldr	r3, [pc, #332]	; (6cc0 <prvTraceGetDTS+0x1cc>)
    6b74:	681b      	ldr	r3, [r3, #0]
    6b76:	1ad3      	subs	r3, r2, r3
    6b78:	613b      	str	r3, [r7, #16]
	old_timestamp = timestamp;
    6b7a:	68fa      	ldr	r2, [r7, #12]
    6b7c:	4b50      	ldr	r3, [pc, #320]	; (6cc0 <prvTraceGetDTS+0x1cc>)
    6b7e:	601a      	str	r2, [r3, #0]

	if (RecorderDataPtr->frequency > 0)
    6b80:	4b49      	ldr	r3, [pc, #292]	; (6ca8 <prvTraceGetDTS+0x1b4>)
    6b82:	681b      	ldr	r3, [r3, #0]
    6b84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    6b86:	2b00      	cmp	r3, #0
    6b88:	d044      	beq.n	6c14 <prvTraceGetDTS+0x120>
	{
		/* Check if dts > 1 second */
		if (dts > RecorderDataPtr->frequency)
    6b8a:	4b47      	ldr	r3, [pc, #284]	; (6ca8 <prvTraceGetDTS+0x1b4>)
    6b8c:	681b      	ldr	r3, [r3, #0]
    6b8e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    6b90:	693b      	ldr	r3, [r7, #16]
    6b92:	429a      	cmp	r2, r3
    6b94:	d21e      	bcs.n	6bd4 <prvTraceGetDTS+0xe0>
		{
			/* More than 1 second has passed */
			RecorderDataPtr->absTimeLastEventSecond += dts / RecorderDataPtr->frequency;
    6b96:	4b44      	ldr	r3, [pc, #272]	; (6ca8 <prvTraceGetDTS+0x1b4>)
    6b98:	681c      	ldr	r4, [r3, #0]
    6b9a:	4b43      	ldr	r3, [pc, #268]	; (6ca8 <prvTraceGetDTS+0x1b4>)
    6b9c:	681b      	ldr	r3, [r3, #0]
    6b9e:	6add      	ldr	r5, [r3, #44]	; 0x2c
    6ba0:	4b41      	ldr	r3, [pc, #260]	; (6ca8 <prvTraceGetDTS+0x1b4>)
    6ba2:	681b      	ldr	r3, [r3, #0]
    6ba4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    6ba6:	4b47      	ldr	r3, [pc, #284]	; (6cc4 <prvTraceGetDTS+0x1d0>)
    6ba8:	0011      	movs	r1, r2
    6baa:	6938      	ldr	r0, [r7, #16]
    6bac:	4798      	blx	r3
    6bae:	0003      	movs	r3, r0
    6bb0:	18eb      	adds	r3, r5, r3
    6bb2:	62e3      	str	r3, [r4, #44]	; 0x2c
			/* The part that is not an entire second is added to absTimeLastEvent */
			RecorderDataPtr->absTimeLastEvent += dts % RecorderDataPtr->frequency;
    6bb4:	4b3c      	ldr	r3, [pc, #240]	; (6ca8 <prvTraceGetDTS+0x1b4>)
    6bb6:	681c      	ldr	r4, [r3, #0]
    6bb8:	4b3b      	ldr	r3, [pc, #236]	; (6ca8 <prvTraceGetDTS+0x1b4>)
    6bba:	681b      	ldr	r3, [r3, #0]
    6bbc:	6a9d      	ldr	r5, [r3, #40]	; 0x28
    6bbe:	4b3a      	ldr	r3, [pc, #232]	; (6ca8 <prvTraceGetDTS+0x1b4>)
    6bc0:	681b      	ldr	r3, [r3, #0]
    6bc2:	6a59      	ldr	r1, [r3, #36]	; 0x24
    6bc4:	693a      	ldr	r2, [r7, #16]
    6bc6:	4b40      	ldr	r3, [pc, #256]	; (6cc8 <prvTraceGetDTS+0x1d4>)
    6bc8:	0010      	movs	r0, r2
    6bca:	4798      	blx	r3
    6bcc:	000b      	movs	r3, r1
    6bce:	18eb      	adds	r3, r5, r3
    6bd0:	62a3      	str	r3, [r4, #40]	; 0x28
    6bd2:	e007      	b.n	6be4 <prvTraceGetDTS+0xf0>
		}
		else
		{
			RecorderDataPtr->absTimeLastEvent += dts;
    6bd4:	4b34      	ldr	r3, [pc, #208]	; (6ca8 <prvTraceGetDTS+0x1b4>)
    6bd6:	681b      	ldr	r3, [r3, #0]
    6bd8:	4a33      	ldr	r2, [pc, #204]	; (6ca8 <prvTraceGetDTS+0x1b4>)
    6bda:	6812      	ldr	r2, [r2, #0]
    6bdc:	6a91      	ldr	r1, [r2, #40]	; 0x28
    6bde:	693a      	ldr	r2, [r7, #16]
    6be0:	188a      	adds	r2, r1, r2
    6be2:	629a      	str	r2, [r3, #40]	; 0x28
		}

		/* Check if absTimeLastEvent >= 1 second */
		if (RecorderDataPtr->absTimeLastEvent >= RecorderDataPtr->frequency)
    6be4:	4b30      	ldr	r3, [pc, #192]	; (6ca8 <prvTraceGetDTS+0x1b4>)
    6be6:	681b      	ldr	r3, [r3, #0]
    6be8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    6bea:	4b2f      	ldr	r3, [pc, #188]	; (6ca8 <prvTraceGetDTS+0x1b4>)
    6bec:	681b      	ldr	r3, [r3, #0]
    6bee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    6bf0:	429a      	cmp	r2, r3
    6bf2:	d313      	bcc.n	6c1c <prvTraceGetDTS+0x128>
		{
			/* RecorderDataPtr->absTimeLastEvent is more than or equal to 1 second, but always less than 2 seconds */
			RecorderDataPtr->absTimeLastEventSecond++;
    6bf4:	4b2c      	ldr	r3, [pc, #176]	; (6ca8 <prvTraceGetDTS+0x1b4>)
    6bf6:	681b      	ldr	r3, [r3, #0]
    6bf8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    6bfa:	3201      	adds	r2, #1
    6bfc:	62da      	str	r2, [r3, #44]	; 0x2c
			RecorderDataPtr->absTimeLastEvent -= RecorderDataPtr->frequency;
    6bfe:	4b2a      	ldr	r3, [pc, #168]	; (6ca8 <prvTraceGetDTS+0x1b4>)
    6c00:	681b      	ldr	r3, [r3, #0]
    6c02:	4a29      	ldr	r2, [pc, #164]	; (6ca8 <prvTraceGetDTS+0x1b4>)
    6c04:	6812      	ldr	r2, [r2, #0]
    6c06:	6a91      	ldr	r1, [r2, #40]	; 0x28
    6c08:	4a27      	ldr	r2, [pc, #156]	; (6ca8 <prvTraceGetDTS+0x1b4>)
    6c0a:	6812      	ldr	r2, [r2, #0]
    6c0c:	6a52      	ldr	r2, [r2, #36]	; 0x24
    6c0e:	1a8a      	subs	r2, r1, r2
    6c10:	629a      	str	r2, [r3, #40]	; 0x28
    6c12:	e003      	b.n	6c1c <prvTraceGetDTS+0x128>
		}
	}
	else
	{
		/* Special case if the recorder has not yet started (frequency may be uninitialized, i.e., zero) */
		RecorderDataPtr->absTimeLastEvent = timestamp;
    6c14:	4b24      	ldr	r3, [pc, #144]	; (6ca8 <prvTraceGetDTS+0x1b4>)
    6c16:	681b      	ldr	r3, [r3, #0]
    6c18:	68fa      	ldr	r2, [r7, #12]
    6c1a:	629a      	str	r2, [r3, #40]	; 0x28
	}

	/* If the dts (time since last event) does not fit in event->dts (only 8 or 16 bits) */
	if (dts > param_maxDTS)
    6c1c:	1dbb      	adds	r3, r7, #6
    6c1e:	881a      	ldrh	r2, [r3, #0]
    6c20:	693b      	ldr	r3, [r7, #16]
    6c22:	429a      	cmp	r2, r3
    6c24:	d22f      	bcs.n	6c86 <prvTraceGetDTS+0x192>
	{
		/* Create an XTS event (eXtended TimeStamp) containing the higher dts bits*/
		xts = (XTSEvent*) prvTraceNextFreeEventBufferSlot();
    6c26:	4b29      	ldr	r3, [pc, #164]	; (6ccc <prvTraceGetDTS+0x1d8>)
    6c28:	4798      	blx	r3
    6c2a:	0003      	movs	r3, r0
    6c2c:	617b      	str	r3, [r7, #20]

		if (xts != NULL)
    6c2e:	697b      	ldr	r3, [r7, #20]
    6c30:	2b00      	cmp	r3, #0
    6c32:	d028      	beq.n	6c86 <prvTraceGetDTS+0x192>
		{
			if (param_maxDTS == 0xFFFF)
    6c34:	1dbb      	adds	r3, r7, #6
    6c36:	881b      	ldrh	r3, [r3, #0]
    6c38:	4a18      	ldr	r2, [pc, #96]	; (6c9c <prvTraceGetDTS+0x1a8>)
    6c3a:	4293      	cmp	r3, r2
    6c3c:	d10b      	bne.n	6c56 <prvTraceGetDTS+0x162>
			{
				xts->type = XTS16;
    6c3e:	697b      	ldr	r3, [r7, #20]
    6c40:	22a9      	movs	r2, #169	; 0xa9
    6c42:	701a      	strb	r2, [r3, #0]
				xts->xts_16 = (uint16_t)((dts / 0x10000) & 0xFFFF);
    6c44:	693b      	ldr	r3, [r7, #16]
    6c46:	0c1b      	lsrs	r3, r3, #16
    6c48:	b29a      	uxth	r2, r3
    6c4a:	697b      	ldr	r3, [r7, #20]
    6c4c:	805a      	strh	r2, [r3, #2]
				xts->xts_8 = 0;
    6c4e:	697b      	ldr	r3, [r7, #20]
    6c50:	2200      	movs	r2, #0
    6c52:	705a      	strb	r2, [r3, #1]
    6c54:	e015      	b.n	6c82 <prvTraceGetDTS+0x18e>
			}
			else if (param_maxDTS == 0xFF)
    6c56:	1dbb      	adds	r3, r7, #6
    6c58:	881b      	ldrh	r3, [r3, #0]
    6c5a:	2bff      	cmp	r3, #255	; 0xff
    6c5c:	d10d      	bne.n	6c7a <prvTraceGetDTS+0x186>
			{
				xts->type = XTS8;
    6c5e:	697b      	ldr	r3, [r7, #20]
    6c60:	22a8      	movs	r2, #168	; 0xa8
    6c62:	701a      	strb	r2, [r3, #0]
				xts->xts_16 = (uint16_t)((dts / 0x100) & 0xFFFF);
    6c64:	693b      	ldr	r3, [r7, #16]
    6c66:	0a1b      	lsrs	r3, r3, #8
    6c68:	b29a      	uxth	r2, r3
    6c6a:	697b      	ldr	r3, [r7, #20]
    6c6c:	805a      	strh	r2, [r3, #2]
				xts->xts_8 = (uint8_t)((dts / 0x1000000) & 0xFF);
    6c6e:	693b      	ldr	r3, [r7, #16]
    6c70:	0e1b      	lsrs	r3, r3, #24
    6c72:	b2da      	uxtb	r2, r3
    6c74:	697b      	ldr	r3, [r7, #20]
    6c76:	705a      	strb	r2, [r3, #1]
    6c78:	e003      	b.n	6c82 <prvTraceGetDTS+0x18e>
			}
			else
			{
				prvTraceError("Bad param_maxDTS in prvTraceGetDTS");
    6c7a:	4b15      	ldr	r3, [pc, #84]	; (6cd0 <prvTraceGetDTS+0x1dc>)
    6c7c:	0018      	movs	r0, r3
    6c7e:	4b09      	ldr	r3, [pc, #36]	; (6ca4 <prvTraceGetDTS+0x1b0>)
    6c80:	4798      	blx	r3
			}
			prvTraceUpdateCounters();
    6c82:	4b14      	ldr	r3, [pc, #80]	; (6cd4 <prvTraceGetDTS+0x1e0>)
    6c84:	4798      	blx	r3
		}
	}

	return (uint16_t)dts & param_maxDTS;
    6c86:	693b      	ldr	r3, [r7, #16]
    6c88:	b29b      	uxth	r3, r3
    6c8a:	1dba      	adds	r2, r7, #6
    6c8c:	8812      	ldrh	r2, [r2, #0]
    6c8e:	4013      	ands	r3, r2
    6c90:	b29b      	uxth	r3, r3
}
    6c92:	0018      	movs	r0, r3
    6c94:	46bd      	mov	sp, r7
    6c96:	b006      	add	sp, #24
    6c98:	bdb0      	pop	{r4, r5, r7, pc}
    6c9a:	46c0      	nop			; (mov r8, r8)
    6c9c:	0000ffff 	.word	0x0000ffff
    6ca0:	00024b48 	.word	0x00024b48
    6ca4:	000068e1 	.word	0x000068e1
    6ca8:	20000c58 	.word	0x20000c58
    6cac:	20000bb4 	.word	0x20000bb4
    6cb0:	e000e018 	.word	0xe000e018
    6cb4:	20004fac 	.word	0x20004fac
    6cb8:	00016c95 	.word	0x00016c95
    6cbc:	00006cd9 	.word	0x00006cd9
    6cc0:	20000c64 	.word	0x20000c64
    6cc4:	0001f841 	.word	0x0001f841
    6cc8:	0001f94d 	.word	0x0001f94d
    6ccc:	00006499 	.word	0x00006499
    6cd0:	00024b88 	.word	0x00024b88
    6cd4:	00006a9d 	.word	0x00006a9d

00006cd8 <prvTracePortGetTimeStamp>:
 * or the trace recorder library. Typically you should not need to change
 * the code of prvTracePortGetTimeStamp if using the HWTC macros.
 *
 ******************************************************************************/
void prvTracePortGetTimeStamp(uint32_t *pTimestamp)
{
    6cd8:	b580      	push	{r7, lr}
    6cda:	b084      	sub	sp, #16
    6cdc:	af00      	add	r7, sp, #0
    6cde:	6078      	str	r0, [r7, #4]
	static uint32_t last_hwtc_count = 0;
	uint32_t hwtc_count = 0;
    6ce0:	2300      	movs	r3, #0
    6ce2:	60bb      	str	r3, [r7, #8]

#if TRC_HWTC_TYPE == TRC_OS_TIMER_INCR || TRC_HWTC_TYPE == TRC_OS_TIMER_DECR
	/* systick based timer */
	static uint32_t last_traceTickCount = 0;
	uint32_t traceTickCount = 0;
    6ce4:	2300      	movs	r3, #0
    6ce6:	60fb      	str	r3, [r7, #12]
	static uint32_t last_hwtc_rest = 0;
	uint32_t diff = 0;
	uint32_t diff_scaled = 0;
#endif /*TRC_HWTC_TYPE == TRC_OS_TIMER_INCR || TRC_HWTC_TYPE == TRC_OS_TIMER_DECR*/

	if (trace_disable_timestamp == 1)
    6ce8:	4b2d      	ldr	r3, [pc, #180]	; (6da0 <prvTracePortGetTimeStamp+0xc8>)
    6cea:	681b      	ldr	r3, [r3, #0]
    6cec:	2b01      	cmp	r3, #1
    6cee:	d107      	bne.n	6d00 <prvTracePortGetTimeStamp+0x28>
	{
		if (pTimestamp)
    6cf0:	687b      	ldr	r3, [r7, #4]
    6cf2:	2b00      	cmp	r3, #0
    6cf4:	d04f      	beq.n	6d96 <prvTracePortGetTimeStamp+0xbe>
			*pTimestamp = last_timestamp;
    6cf6:	4b2b      	ldr	r3, [pc, #172]	; (6da4 <prvTracePortGetTimeStamp+0xcc>)
    6cf8:	681a      	ldr	r2, [r3, #0]
    6cfa:	687b      	ldr	r3, [r7, #4]
    6cfc:	601a      	str	r2, [r3, #0]
		return;
    6cfe:	e04a      	b.n	6d96 <prvTracePortGetTimeStamp+0xbe>
#if (TRC_HWTC_TYPE == TRC_OS_TIMER_INCR || TRC_HWTC_TYPE == TRC_FREE_RUNNING_32BIT_INCR)
	/* Get the increasing tick count */
	hwtc_count = (TRC_HWTC_COUNT);
#elif (TRC_HWTC_TYPE == TRC_OS_TIMER_DECR || TRC_HWTC_TYPE == TRC_FREE_RUNNING_32BIT_DECR)
	/* Convert decreasing tick count into increasing tick count */
	hwtc_count = (TRC_HWTC_PERIOD) - (TRC_HWTC_COUNT);
    6d00:	4b29      	ldr	r3, [pc, #164]	; (6da8 <prvTracePortGetTimeStamp+0xd0>)
    6d02:	681a      	ldr	r2, [r3, #0]
    6d04:	4b29      	ldr	r3, [pc, #164]	; (6dac <prvTracePortGetTimeStamp+0xd4>)
    6d06:	681b      	ldr	r3, [r3, #0]
    6d08:	1ad3      	subs	r3, r2, r3
    6d0a:	3301      	adds	r3, #1
    6d0c:	60bb      	str	r3, [r7, #8]
	}
#endif

#if (TRC_HWTC_TYPE == TRC_OS_TIMER_INCR || TRC_HWTC_TYPE == TRC_OS_TIMER_DECR)
	/* Timestamping is based on a timer that wraps at TRC_HWTC_PERIOD */
	if (last_traceTickCount - uiTraceTickCount - 1 < 0x80000000)
    6d0e:	4b28      	ldr	r3, [pc, #160]	; (6db0 <prvTracePortGetTimeStamp+0xd8>)
    6d10:	681a      	ldr	r2, [r3, #0]
    6d12:	4b28      	ldr	r3, [pc, #160]	; (6db4 <prvTracePortGetTimeStamp+0xdc>)
    6d14:	681b      	ldr	r3, [r3, #0]
    6d16:	1ad3      	subs	r3, r2, r3
    6d18:	3b01      	subs	r3, #1
    6d1a:	2b00      	cmp	r3, #0
    6d1c:	db03      	blt.n	6d26 <prvTracePortGetTimeStamp+0x4e>
	{
		/* This means last_traceTickCount is higher than uiTraceTickCount,
		so we have previously compensated for a missed tick.
		Therefore we use the last stored value because that is more accurate. */
		traceTickCount = last_traceTickCount;
    6d1e:	4b24      	ldr	r3, [pc, #144]	; (6db0 <prvTracePortGetTimeStamp+0xd8>)
    6d20:	681b      	ldr	r3, [r3, #0]
    6d22:	60fb      	str	r3, [r7, #12]
    6d24:	e002      	b.n	6d2c <prvTracePortGetTimeStamp+0x54>
	}
	else
	{
		/* Business as usual */
		traceTickCount = uiTraceTickCount;
    6d26:	4b23      	ldr	r3, [pc, #140]	; (6db4 <prvTracePortGetTimeStamp+0xdc>)
    6d28:	681b      	ldr	r3, [r3, #0]
    6d2a:	60fb      	str	r3, [r7, #12]
	}

	/* Check for overflow. May occur if the update of uiTraceTickCount has been
	delayed due to disabled interrupts. */
	if (traceTickCount == last_traceTickCount && hwtc_count < last_hwtc_count)
    6d2c:	4b20      	ldr	r3, [pc, #128]	; (6db0 <prvTracePortGetTimeStamp+0xd8>)
    6d2e:	681b      	ldr	r3, [r3, #0]
    6d30:	68fa      	ldr	r2, [r7, #12]
    6d32:	429a      	cmp	r2, r3
    6d34:	d107      	bne.n	6d46 <prvTracePortGetTimeStamp+0x6e>
    6d36:	4b20      	ldr	r3, [pc, #128]	; (6db8 <prvTracePortGetTimeStamp+0xe0>)
    6d38:	681b      	ldr	r3, [r3, #0]
    6d3a:	68ba      	ldr	r2, [r7, #8]
    6d3c:	429a      	cmp	r2, r3
    6d3e:	d202      	bcs.n	6d46 <prvTracePortGetTimeStamp+0x6e>
	{
		/* A trace tick has occurred but not been executed by the kernel, so we compensate manually. */
		traceTickCount++;
    6d40:	68fb      	ldr	r3, [r7, #12]
    6d42:	3301      	adds	r3, #1
    6d44:	60fb      	str	r3, [r7, #12]
	}

	/* Check if the return address is OK, then we perform the calculation. */
	if (pTimestamp)
    6d46:	687b      	ldr	r3, [r7, #4]
    6d48:	2b00      	cmp	r3, #0
    6d4a:	d016      	beq.n	6d7a <prvTracePortGetTimeStamp+0xa2>
	{
		/* Get timestamp from trace ticks. Scale down the period to avoid unwanted overflows. */
		last_timestamp = traceTickCount * ((TRC_HWTC_PERIOD) / (TRC_HWTC_DIVISOR));
    6d4c:	4b16      	ldr	r3, [pc, #88]	; (6da8 <prvTracePortGetTimeStamp+0xd0>)
    6d4e:	681b      	ldr	r3, [r3, #0]
    6d50:	3301      	adds	r3, #1
    6d52:	089b      	lsrs	r3, r3, #2
    6d54:	68fa      	ldr	r2, [r7, #12]
    6d56:	435a      	muls	r2, r3
    6d58:	4b12      	ldr	r3, [pc, #72]	; (6da4 <prvTracePortGetTimeStamp+0xcc>)
    6d5a:	601a      	str	r2, [r3, #0]
		/* Increase timestamp by (hwtc_count + "lost hardware ticks from scaling down period") / TRC_HWTC_DIVISOR. */
		last_timestamp += (hwtc_count + traceTickCount * ((TRC_HWTC_PERIOD) % (TRC_HWTC_DIVISOR))) / (TRC_HWTC_DIVISOR);
    6d5c:	4b12      	ldr	r3, [pc, #72]	; (6da8 <prvTracePortGetTimeStamp+0xd0>)
    6d5e:	681b      	ldr	r3, [r3, #0]
    6d60:	3301      	adds	r3, #1
    6d62:	2203      	movs	r2, #3
    6d64:	4013      	ands	r3, r2
    6d66:	68fa      	ldr	r2, [r7, #12]
    6d68:	435a      	muls	r2, r3
    6d6a:	68bb      	ldr	r3, [r7, #8]
    6d6c:	18d3      	adds	r3, r2, r3
    6d6e:	089a      	lsrs	r2, r3, #2
    6d70:	4b0c      	ldr	r3, [pc, #48]	; (6da4 <prvTracePortGetTimeStamp+0xcc>)
    6d72:	681b      	ldr	r3, [r3, #0]
    6d74:	18d2      	adds	r2, r2, r3
    6d76:	4b0b      	ldr	r3, [pc, #44]	; (6da4 <prvTracePortGetTimeStamp+0xcc>)
    6d78:	601a      	str	r2, [r3, #0]
	}
	/* Store the previous value */
	last_traceTickCount = traceTickCount;
    6d7a:	4b0d      	ldr	r3, [pc, #52]	; (6db0 <prvTracePortGetTimeStamp+0xd8>)
    6d7c:	68fa      	ldr	r2, [r7, #12]
    6d7e:	601a      	str	r2, [r3, #0]
	/* We increase the scaled timestamp by the scaled amount */
	last_timestamp += diff_scaled;
#endif /*(TRC_HWTC_TYPE == TRC_OS_TIMER_INCR || TRC_HWTC_TYPE == TRC_OS_TIMER_DECR)*/

	/* Is anyone interested in the results? */
	if (pTimestamp)
    6d80:	687b      	ldr	r3, [r7, #4]
    6d82:	2b00      	cmp	r3, #0
    6d84:	d003      	beq.n	6d8e <prvTracePortGetTimeStamp+0xb6>
		*pTimestamp = last_timestamp;
    6d86:	4b07      	ldr	r3, [pc, #28]	; (6da4 <prvTracePortGetTimeStamp+0xcc>)
    6d88:	681a      	ldr	r2, [r3, #0]
    6d8a:	687b      	ldr	r3, [r7, #4]
    6d8c:	601a      	str	r2, [r3, #0]

	/* Store the previous value */
	last_hwtc_count = hwtc_count;
    6d8e:	4b0a      	ldr	r3, [pc, #40]	; (6db8 <prvTracePortGetTimeStamp+0xe0>)
    6d90:	68ba      	ldr	r2, [r7, #8]
    6d92:	601a      	str	r2, [r3, #0]
    6d94:	e000      	b.n	6d98 <prvTracePortGetTimeStamp+0xc0>
		return;
    6d96:	46c0      	nop			; (mov r8, r8)
}
    6d98:	46bd      	mov	sp, r7
    6d9a:	b004      	add	sp, #16
    6d9c:	bd80      	pop	{r7, pc}
    6d9e:	46c0      	nop			; (mov r8, r8)
    6da0:	20000ba4 	.word	0x20000ba4
    6da4:	20000ba8 	.word	0x20000ba8
    6da8:	e000e014 	.word	0xe000e014
    6dac:	e000e018 	.word	0xe000e018
    6db0:	20000c68 	.word	0x20000c68
    6db4:	20000ba0 	.word	0x20000ba0
    6db8:	20000c6c 	.word	0x20000c6c

00006dbc <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
    6dbc:	b580      	push	{r7, lr}
    6dbe:	b082      	sub	sp, #8
    6dc0:	af00      	add	r7, sp, #0
    6dc2:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
    6dc4:	687b      	ldr	r3, [r7, #4]
    6dc6:	3308      	adds	r3, #8
    6dc8:	001a      	movs	r2, r3
    6dca:	687b      	ldr	r3, [r7, #4]
    6dcc:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
    6dce:	687b      	ldr	r3, [r7, #4]
    6dd0:	2201      	movs	r2, #1
    6dd2:	4252      	negs	r2, r2
    6dd4:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
    6dd6:	687b      	ldr	r3, [r7, #4]
    6dd8:	3308      	adds	r3, #8
    6dda:	001a      	movs	r2, r3
    6ddc:	687b      	ldr	r3, [r7, #4]
    6dde:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
    6de0:	687b      	ldr	r3, [r7, #4]
    6de2:	3308      	adds	r3, #8
    6de4:	001a      	movs	r2, r3
    6de6:	687b      	ldr	r3, [r7, #4]
    6de8:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
    6dea:	687b      	ldr	r3, [r7, #4]
    6dec:	2200      	movs	r2, #0
    6dee:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
    6df0:	46c0      	nop			; (mov r8, r8)
    6df2:	46bd      	mov	sp, r7
    6df4:	b002      	add	sp, #8
    6df6:	bd80      	pop	{r7, pc}

00006df8 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
    6df8:	b580      	push	{r7, lr}
    6dfa:	b082      	sub	sp, #8
    6dfc:	af00      	add	r7, sp, #0
    6dfe:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
    6e00:	687b      	ldr	r3, [r7, #4]
    6e02:	2200      	movs	r2, #0
    6e04:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
    6e06:	46c0      	nop			; (mov r8, r8)
    6e08:	46bd      	mov	sp, r7
    6e0a:	b002      	add	sp, #8
    6e0c:	bd80      	pop	{r7, pc}

00006e0e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
    6e0e:	b580      	push	{r7, lr}
    6e10:	b084      	sub	sp, #16
    6e12:	af00      	add	r7, sp, #0
    6e14:	6078      	str	r0, [r7, #4]
    6e16:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
    6e18:	687b      	ldr	r3, [r7, #4]
    6e1a:	685b      	ldr	r3, [r3, #4]
    6e1c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
    6e1e:	683b      	ldr	r3, [r7, #0]
    6e20:	68fa      	ldr	r2, [r7, #12]
    6e22:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
    6e24:	68fb      	ldr	r3, [r7, #12]
    6e26:	689a      	ldr	r2, [r3, #8]
    6e28:	683b      	ldr	r3, [r7, #0]
    6e2a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
    6e2c:	68fb      	ldr	r3, [r7, #12]
    6e2e:	689b      	ldr	r3, [r3, #8]
    6e30:	683a      	ldr	r2, [r7, #0]
    6e32:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
    6e34:	68fb      	ldr	r3, [r7, #12]
    6e36:	683a      	ldr	r2, [r7, #0]
    6e38:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
    6e3a:	683b      	ldr	r3, [r7, #0]
    6e3c:	687a      	ldr	r2, [r7, #4]
    6e3e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
    6e40:	687b      	ldr	r3, [r7, #4]
    6e42:	681b      	ldr	r3, [r3, #0]
    6e44:	1c5a      	adds	r2, r3, #1
    6e46:	687b      	ldr	r3, [r7, #4]
    6e48:	601a      	str	r2, [r3, #0]
}
    6e4a:	46c0      	nop			; (mov r8, r8)
    6e4c:	46bd      	mov	sp, r7
    6e4e:	b004      	add	sp, #16
    6e50:	bd80      	pop	{r7, pc}

00006e52 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
    6e52:	b580      	push	{r7, lr}
    6e54:	b084      	sub	sp, #16
    6e56:	af00      	add	r7, sp, #0
    6e58:	6078      	str	r0, [r7, #4]
    6e5a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
    6e5c:	683b      	ldr	r3, [r7, #0]
    6e5e:	681b      	ldr	r3, [r3, #0]
    6e60:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
    6e62:	68bb      	ldr	r3, [r7, #8]
    6e64:	3301      	adds	r3, #1
    6e66:	d103      	bne.n	6e70 <vListInsert+0x1e>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
    6e68:	687b      	ldr	r3, [r7, #4]
    6e6a:	691b      	ldr	r3, [r3, #16]
    6e6c:	60fb      	str	r3, [r7, #12]
    6e6e:	e00c      	b.n	6e8a <vListInsert+0x38>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
    6e70:	687b      	ldr	r3, [r7, #4]
    6e72:	3308      	adds	r3, #8
    6e74:	60fb      	str	r3, [r7, #12]
    6e76:	e002      	b.n	6e7e <vListInsert+0x2c>
    6e78:	68fb      	ldr	r3, [r7, #12]
    6e7a:	685b      	ldr	r3, [r3, #4]
    6e7c:	60fb      	str	r3, [r7, #12]
    6e7e:	68fb      	ldr	r3, [r7, #12]
    6e80:	685b      	ldr	r3, [r3, #4]
    6e82:	681a      	ldr	r2, [r3, #0]
    6e84:	68bb      	ldr	r3, [r7, #8]
    6e86:	429a      	cmp	r2, r3
    6e88:	d9f6      	bls.n	6e78 <vListInsert+0x26>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
    6e8a:	68fb      	ldr	r3, [r7, #12]
    6e8c:	685a      	ldr	r2, [r3, #4]
    6e8e:	683b      	ldr	r3, [r7, #0]
    6e90:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
    6e92:	683b      	ldr	r3, [r7, #0]
    6e94:	685b      	ldr	r3, [r3, #4]
    6e96:	683a      	ldr	r2, [r7, #0]
    6e98:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
    6e9a:	683b      	ldr	r3, [r7, #0]
    6e9c:	68fa      	ldr	r2, [r7, #12]
    6e9e:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
    6ea0:	68fb      	ldr	r3, [r7, #12]
    6ea2:	683a      	ldr	r2, [r7, #0]
    6ea4:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
    6ea6:	683b      	ldr	r3, [r7, #0]
    6ea8:	687a      	ldr	r2, [r7, #4]
    6eaa:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
    6eac:	687b      	ldr	r3, [r7, #4]
    6eae:	681b      	ldr	r3, [r3, #0]
    6eb0:	1c5a      	adds	r2, r3, #1
    6eb2:	687b      	ldr	r3, [r7, #4]
    6eb4:	601a      	str	r2, [r3, #0]
}
    6eb6:	46c0      	nop			; (mov r8, r8)
    6eb8:	46bd      	mov	sp, r7
    6eba:	b004      	add	sp, #16
    6ebc:	bd80      	pop	{r7, pc}

00006ebe <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
    6ebe:	b580      	push	{r7, lr}
    6ec0:	b084      	sub	sp, #16
    6ec2:	af00      	add	r7, sp, #0
    6ec4:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
    6ec6:	687b      	ldr	r3, [r7, #4]
    6ec8:	691b      	ldr	r3, [r3, #16]
    6eca:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
    6ecc:	687b      	ldr	r3, [r7, #4]
    6ece:	685b      	ldr	r3, [r3, #4]
    6ed0:	687a      	ldr	r2, [r7, #4]
    6ed2:	6892      	ldr	r2, [r2, #8]
    6ed4:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
    6ed6:	687b      	ldr	r3, [r7, #4]
    6ed8:	689b      	ldr	r3, [r3, #8]
    6eda:	687a      	ldr	r2, [r7, #4]
    6edc:	6852      	ldr	r2, [r2, #4]
    6ede:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
    6ee0:	68fb      	ldr	r3, [r7, #12]
    6ee2:	685a      	ldr	r2, [r3, #4]
    6ee4:	687b      	ldr	r3, [r7, #4]
    6ee6:	429a      	cmp	r2, r3
    6ee8:	d103      	bne.n	6ef2 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
    6eea:	687b      	ldr	r3, [r7, #4]
    6eec:	689a      	ldr	r2, [r3, #8]
    6eee:	68fb      	ldr	r3, [r7, #12]
    6ef0:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
    6ef2:	687b      	ldr	r3, [r7, #4]
    6ef4:	2200      	movs	r2, #0
    6ef6:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
    6ef8:	68fb      	ldr	r3, [r7, #12]
    6efa:	681b      	ldr	r3, [r3, #0]
    6efc:	1e5a      	subs	r2, r3, #1
    6efe:	68fb      	ldr	r3, [r7, #12]
    6f00:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
    6f02:	68fb      	ldr	r3, [r7, #12]
    6f04:	681b      	ldr	r3, [r3, #0]
}
    6f06:	0018      	movs	r0, r3
    6f08:	46bd      	mov	sp, r7
    6f0a:	b004      	add	sp, #16
    6f0c:	bd80      	pop	{r7, pc}
	...

00006f10 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
    6f10:	b580      	push	{r7, lr}
    6f12:	b084      	sub	sp, #16
    6f14:	af00      	add	r7, sp, #0
    6f16:	60f8      	str	r0, [r7, #12]
    6f18:	60b9      	str	r1, [r7, #8]
    6f1a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
    6f1c:	68fb      	ldr	r3, [r7, #12]
    6f1e:	3b04      	subs	r3, #4
    6f20:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
    6f22:	68fb      	ldr	r3, [r7, #12]
    6f24:	2280      	movs	r2, #128	; 0x80
    6f26:	0452      	lsls	r2, r2, #17
    6f28:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
    6f2a:	68fb      	ldr	r3, [r7, #12]
    6f2c:	3b04      	subs	r3, #4
    6f2e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pxCode;	/* PC */
    6f30:	68ba      	ldr	r2, [r7, #8]
    6f32:	68fb      	ldr	r3, [r7, #12]
    6f34:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
    6f36:	68fb      	ldr	r3, [r7, #12]
    6f38:	3b04      	subs	r3, #4
    6f3a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
    6f3c:	4a08      	ldr	r2, [pc, #32]	; (6f60 <pxPortInitialiseStack+0x50>)
    6f3e:	68fb      	ldr	r3, [r7, #12]
    6f40:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
    6f42:	68fb      	ldr	r3, [r7, #12]
    6f44:	3b14      	subs	r3, #20
    6f46:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
    6f48:	687a      	ldr	r2, [r7, #4]
    6f4a:	68fb      	ldr	r3, [r7, #12]
    6f4c:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8; /* R11..R4. */
    6f4e:	68fb      	ldr	r3, [r7, #12]
    6f50:	3b20      	subs	r3, #32
    6f52:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
    6f54:	68fb      	ldr	r3, [r7, #12]
}
    6f56:	0018      	movs	r0, r3
    6f58:	46bd      	mov	sp, r7
    6f5a:	b004      	add	sp, #16
    6f5c:	bd80      	pop	{r7, pc}
    6f5e:	46c0      	nop			; (mov r8, r8)
    6f60:	00006f65 	.word	0x00006f65

00006f64 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
    6f64:	b580      	push	{r7, lr}
    6f66:	b082      	sub	sp, #8
    6f68:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
    6f6a:	2300      	movs	r3, #0
    6f6c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
    6f6e:	4b07      	ldr	r3, [pc, #28]	; (6f8c <prvTaskExitError+0x28>)
    6f70:	681b      	ldr	r3, [r3, #0]
    6f72:	3301      	adds	r3, #1
    6f74:	d001      	beq.n	6f7a <prvTaskExitError+0x16>
    6f76:	b672      	cpsid	i
    6f78:	e7fe      	b.n	6f78 <prvTaskExitError+0x14>
	portDISABLE_INTERRUPTS();
    6f7a:	b672      	cpsid	i
	while( ulDummy == 0 )
    6f7c:	46c0      	nop			; (mov r8, r8)
    6f7e:	687b      	ldr	r3, [r7, #4]
    6f80:	2b00      	cmp	r3, #0
    6f82:	d0fc      	beq.n	6f7e <prvTaskExitError+0x1a>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
    6f84:	46c0      	nop			; (mov r8, r8)
    6f86:	46bd      	mov	sp, r7
    6f88:	b002      	add	sp, #8
    6f8a:	bd80      	pop	{r7, pc}
    6f8c:	20000104 	.word	0x20000104

00006f90 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    6f90:	b580      	push	{r7, lr}
    6f92:	af00      	add	r7, sp, #0
	/* This function is no longer used, but retained for backward
	compatibility. */
}
    6f94:	46c0      	nop			; (mov r8, r8)
    6f96:	46bd      	mov	sp, r7
    6f98:	bd80      	pop	{r7, pc}
    6f9a:	0000      	movs	r0, r0
    6f9c:	0000      	movs	r0, r0
	...

00006fa0 <vPortStartFirstTask>:
void vPortStartFirstTask( void )
{
	/* The MSP stack is not reset as, unlike on M3/4 parts, there is no vector
	table offset register that can be used to locate the initial stack value.
	Not all M0 parts have the application vector table at address 0. */
	__asm volatile(
    6fa0:	4a0b      	ldr	r2, [pc, #44]	; (6fd0 <pxCurrentTCBConst2>)
    6fa2:	6813      	ldr	r3, [r2, #0]
    6fa4:	6818      	ldr	r0, [r3, #0]
    6fa6:	3020      	adds	r0, #32
    6fa8:	f380 8809 	msr	PSP, r0
    6fac:	2002      	movs	r0, #2
    6fae:	f380 8814 	msr	CONTROL, r0
    6fb2:	f3bf 8f6f 	isb	sy
    6fb6:	bc3f      	pop	{r0, r1, r2, r3, r4, r5}
    6fb8:	46ae      	mov	lr, r5
    6fba:	bc08      	pop	{r3}
    6fbc:	bc04      	pop	{r2}
    6fbe:	b662      	cpsie	i
    6fc0:	4718      	bx	r3
    6fc2:	46c0      	nop			; (mov r8, r8)
    6fc4:	46c0      	nop			; (mov r8, r8)
    6fc6:	46c0      	nop			; (mov r8, r8)
    6fc8:	46c0      	nop			; (mov r8, r8)
    6fca:	46c0      	nop			; (mov r8, r8)
    6fcc:	46c0      	nop			; (mov r8, r8)
    6fce:	46c0      	nop			; (mov r8, r8)

00006fd0 <pxCurrentTCBConst2>:
    6fd0:	20003b58 	.word	0x20003b58
	"	bx   r3						\n" /* Finally, jump to the user defined task code. */
	"								\n"
	"	.align 4					\n"
	"pxCurrentTCBConst2: .word pxCurrentTCB	  "
				  );
}
    6fd4:	46c0      	nop			; (mov r8, r8)
    6fd6:	46c0      	nop			; (mov r8, r8)

00006fd8 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
    6fd8:	b580      	push	{r7, lr}
    6fda:	af00      	add	r7, sp, #0
	/* Make PendSV, CallSV and SysTick the same priroity as the kernel. */
	*(portNVIC_SYSPRI2) |= portNVIC_PENDSV_PRI;
    6fdc:	4b0e      	ldr	r3, [pc, #56]	; (7018 <xPortStartScheduler+0x40>)
    6fde:	4a0e      	ldr	r2, [pc, #56]	; (7018 <xPortStartScheduler+0x40>)
    6fe0:	6812      	ldr	r2, [r2, #0]
    6fe2:	21ff      	movs	r1, #255	; 0xff
    6fe4:	0409      	lsls	r1, r1, #16
    6fe6:	430a      	orrs	r2, r1
    6fe8:	601a      	str	r2, [r3, #0]
	*(portNVIC_SYSPRI2) |= portNVIC_SYSTICK_PRI;
    6fea:	4b0b      	ldr	r3, [pc, #44]	; (7018 <xPortStartScheduler+0x40>)
    6fec:	4a0a      	ldr	r2, [pc, #40]	; (7018 <xPortStartScheduler+0x40>)
    6fee:	6812      	ldr	r2, [r2, #0]
    6ff0:	21ff      	movs	r1, #255	; 0xff
    6ff2:	0609      	lsls	r1, r1, #24
    6ff4:	430a      	orrs	r2, r1
    6ff6:	601a      	str	r2, [r3, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	prvSetupTimerInterrupt();
    6ff8:	4b08      	ldr	r3, [pc, #32]	; (701c <xPortStartScheduler+0x44>)
    6ffa:	4798      	blx	r3

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
    6ffc:	4b08      	ldr	r3, [pc, #32]	; (7020 <xPortStartScheduler+0x48>)
    6ffe:	2200      	movs	r2, #0
    7000:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	vPortStartFirstTask();
    7002:	4b08      	ldr	r3, [pc, #32]	; (7024 <xPortStartScheduler+0x4c>)
    7004:	4798      	blx	r3
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
    7006:	4b08      	ldr	r3, [pc, #32]	; (7028 <xPortStartScheduler+0x50>)
    7008:	4798      	blx	r3
	prvTaskExitError();
    700a:	4b08      	ldr	r3, [pc, #32]	; (702c <xPortStartScheduler+0x54>)
    700c:	4798      	blx	r3

	/* Should not get here! */
	return 0;
    700e:	2300      	movs	r3, #0
}
    7010:	0018      	movs	r0, r3
    7012:	46bd      	mov	sp, r7
    7014:	bd80      	pop	{r7, pc}
    7016:	46c0      	nop			; (mov r8, r8)
    7018:	e000ed20 	.word	0xe000ed20
    701c:	00007139 	.word	0x00007139
    7020:	20000104 	.word	0x20000104
    7024:	00006fa1 	.word	0x00006fa1
    7028:	00009699 	.word	0x00009699
    702c:	00006f65 	.word	0x00006f65

00007030 <vPortYield>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortYield( void )
{
    7030:	b580      	push	{r7, lr}
    7032:	af00      	add	r7, sp, #0
	/* Set a PendSV to request a context switch. */
	*( portNVIC_INT_CTRL ) = portNVIC_PENDSVSET;
    7034:	4b03      	ldr	r3, [pc, #12]	; (7044 <vPortYield+0x14>)
    7036:	2280      	movs	r2, #128	; 0x80
    7038:	0552      	lsls	r2, r2, #21
    703a:	601a      	str	r2, [r3, #0]

	/* Barriers are normally not required but do ensure the code is completely
	within the specified behaviour for the architecture. */
	//__asm volatile( "dsb" ::: "memory" );
	//__asm volatile( "isb" );
}
    703c:	46c0      	nop			; (mov r8, r8)
    703e:	46bd      	mov	sp, r7
    7040:	bd80      	pop	{r7, pc}
    7042:	46c0      	nop			; (mov r8, r8)
    7044:	e000ed04 	.word	0xe000ed04

00007048 <vPortEnterCritical>:
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
    7048:	b580      	push	{r7, lr}
    704a:	af00      	add	r7, sp, #0
    portDISABLE_INTERRUPTS();
    704c:	b672      	cpsid	i
    uxCriticalNesting++;
    704e:	4b06      	ldr	r3, [pc, #24]	; (7068 <vPortEnterCritical+0x20>)
    7050:	681b      	ldr	r3, [r3, #0]
    7052:	1c5a      	adds	r2, r3, #1
    7054:	4b04      	ldr	r3, [pc, #16]	; (7068 <vPortEnterCritical+0x20>)
    7056:	601a      	str	r2, [r3, #0]
	__asm volatile( "dsb" ::: "memory" );
    7058:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
    705c:	f3bf 8f6f 	isb	sy
}
    7060:	46c0      	nop			; (mov r8, r8)
    7062:	46bd      	mov	sp, r7
    7064:	bd80      	pop	{r7, pc}
    7066:	46c0      	nop			; (mov r8, r8)
    7068:	20000104 	.word	0x20000104

0000706c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
    706c:	b580      	push	{r7, lr}
    706e:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
    7070:	4b09      	ldr	r3, [pc, #36]	; (7098 <vPortExitCritical+0x2c>)
    7072:	681b      	ldr	r3, [r3, #0]
    7074:	2b00      	cmp	r3, #0
    7076:	d101      	bne.n	707c <vPortExitCritical+0x10>
    7078:	b672      	cpsid	i
    707a:	e7fe      	b.n	707a <vPortExitCritical+0xe>
    uxCriticalNesting--;
    707c:	4b06      	ldr	r3, [pc, #24]	; (7098 <vPortExitCritical+0x2c>)
    707e:	681b      	ldr	r3, [r3, #0]
    7080:	1e5a      	subs	r2, r3, #1
    7082:	4b05      	ldr	r3, [pc, #20]	; (7098 <vPortExitCritical+0x2c>)
    7084:	601a      	str	r2, [r3, #0]
    if( uxCriticalNesting == 0 )
    7086:	4b04      	ldr	r3, [pc, #16]	; (7098 <vPortExitCritical+0x2c>)
    7088:	681b      	ldr	r3, [r3, #0]
    708a:	2b00      	cmp	r3, #0
    708c:	d100      	bne.n	7090 <vPortExitCritical+0x24>
    {
        portENABLE_INTERRUPTS();
    708e:	b662      	cpsie	i
    }
}
    7090:	46c0      	nop			; (mov r8, r8)
    7092:	46bd      	mov	sp, r7
    7094:	bd80      	pop	{r7, pc}
    7096:	46c0      	nop			; (mov r8, r8)
    7098:	20000104 	.word	0x20000104

0000709c <ulSetInterruptMaskFromISR>:
/*-----------------------------------------------------------*/

uint32_t ulSetInterruptMaskFromISR( void )
{
	__asm volatile(
    709c:	f3ef 8010 	mrs	r0, PRIMASK
    70a0:	b672      	cpsid	i
    70a2:	4770      	bx	lr
	/* To avoid compiler warnings.  The return statement will nevere be reached,
	but some compilers warn if it is not included, while others won't compile if
	it is. */
	return 0;
#endif
}
    70a4:	46c0      	nop			; (mov r8, r8)
    70a6:	0018      	movs	r0, r3

000070a8 <vClearInterruptMaskFromISR>:
/*-----------------------------------------------------------*/

void vClearInterruptMaskFromISR( __attribute__( ( unused ) ) uint32_t ulMask )
{
	__asm volatile(
    70a8:	f380 8810 	msr	PRIMASK, r0
    70ac:	4770      	bx	lr
	/* Just to avoid compiler warning.  ulMask is used from the asm code but
	the compiler can't see that.  Some compilers generate warnings without the
	following line, while others generate warnings if the line is included. */
	( void ) ulMask;
#endif
}
    70ae:	46c0      	nop			; (mov r8, r8)

000070b0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
    70b0:	f3ef 8009 	mrs	r0, PSP
    70b4:	4b0e      	ldr	r3, [pc, #56]	; (70f0 <pxCurrentTCBConst>)
    70b6:	681a      	ldr	r2, [r3, #0]
    70b8:	3820      	subs	r0, #32
    70ba:	6010      	str	r0, [r2, #0]
    70bc:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
    70be:	4644      	mov	r4, r8
    70c0:	464d      	mov	r5, r9
    70c2:	4656      	mov	r6, sl
    70c4:	465f      	mov	r7, fp
    70c6:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
    70c8:	b508      	push	{r3, lr}
    70ca:	b672      	cpsid	i
    70cc:	f002 fae4 	bl	9698 <vTaskSwitchContext>
    70d0:	b662      	cpsie	i
    70d2:	bc0c      	pop	{r2, r3}
    70d4:	6811      	ldr	r1, [r2, #0]
    70d6:	6808      	ldr	r0, [r1, #0]
    70d8:	3010      	adds	r0, #16
    70da:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
    70dc:	46a0      	mov	r8, r4
    70de:	46a9      	mov	r9, r5
    70e0:	46b2      	mov	sl, r6
    70e2:	46bb      	mov	fp, r7
    70e4:	f380 8809 	msr	PSP, r0
    70e8:	3820      	subs	r0, #32
    70ea:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
    70ec:	4718      	bx	r3
    70ee:	46c0      	nop			; (mov r8, r8)

000070f0 <pxCurrentTCBConst>:
    70f0:	20003b58 	.word	0x20003b58
	"	bx r3								\n"
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	  "
	);
}
    70f4:	46c0      	nop			; (mov r8, r8)
    70f6:	46c0      	nop			; (mov r8, r8)

000070f8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
    70f8:	b580      	push	{r7, lr}
    70fa:	b082      	sub	sp, #8
    70fc:	af00      	add	r7, sp, #0
uint32_t ulPreviousMask;

	ulPreviousMask = portSET_INTERRUPT_MASK_FROM_ISR();
    70fe:	4b0a      	ldr	r3, [pc, #40]	; (7128 <SysTick_Handler+0x30>)
    7100:	4798      	blx	r3
    7102:	0003      	movs	r3, r0
    7104:	607b      	str	r3, [r7, #4]
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
    7106:	4b09      	ldr	r3, [pc, #36]	; (712c <SysTick_Handler+0x34>)
    7108:	4798      	blx	r3
    710a:	1e03      	subs	r3, r0, #0
    710c:	d003      	beq.n	7116 <SysTick_Handler+0x1e>
		{
			/* Pend a context switch. */
			*(portNVIC_INT_CTRL) = portNVIC_PENDSVSET;
    710e:	4b08      	ldr	r3, [pc, #32]	; (7130 <SysTick_Handler+0x38>)
    7110:	2280      	movs	r2, #128	; 0x80
    7112:	0552      	lsls	r2, r2, #21
    7114:	601a      	str	r2, [r3, #0]
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( ulPreviousMask );
    7116:	687b      	ldr	r3, [r7, #4]
    7118:	0018      	movs	r0, r3
    711a:	4b06      	ldr	r3, [pc, #24]	; (7134 <SysTick_Handler+0x3c>)
    711c:	4798      	blx	r3
}
    711e:	46c0      	nop			; (mov r8, r8)
    7120:	46bd      	mov	sp, r7
    7122:	b002      	add	sp, #8
    7124:	bd80      	pop	{r7, pc}
    7126:	46c0      	nop			; (mov r8, r8)
    7128:	0000709d 	.word	0x0000709d
    712c:	000094a9 	.word	0x000094a9
    7130:	e000ed04 	.word	0xe000ed04
    7134:	000070a9 	.word	0x000070a9

00007138 <prvSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
void prvSetupTimerInterrupt( void )
{
    7138:	b5b0      	push	{r4, r5, r7, lr}
    713a:	af00      	add	r7, sp, #0
	/* Stop and reset the SysTick. */
	*(portNVIC_SYSTICK_CTRL) = 0UL;
    713c:	4b0b      	ldr	r3, [pc, #44]	; (716c <prvSetupTimerInterrupt+0x34>)
    713e:	2200      	movs	r2, #0
    7140:	601a      	str	r2, [r3, #0]
	*(portNVIC_SYSTICK_CURRENT_VALUE) = 0UL;
    7142:	4b0b      	ldr	r3, [pc, #44]	; (7170 <prvSetupTimerInterrupt+0x38>)
    7144:	2200      	movs	r2, #0
    7146:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	*(portNVIC_SYSTICK_LOAD) = ( configCPU_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
    7148:	4c0a      	ldr	r4, [pc, #40]	; (7174 <prvSetupTimerInterrupt+0x3c>)
    714a:	2000      	movs	r0, #0
    714c:	4b0a      	ldr	r3, [pc, #40]	; (7178 <prvSetupTimerInterrupt+0x40>)
    714e:	4798      	blx	r3
    7150:	4b0a      	ldr	r3, [pc, #40]	; (717c <prvSetupTimerInterrupt+0x44>)
    7152:	22fa      	movs	r2, #250	; 0xfa
    7154:	0091      	lsls	r1, r2, #2
    7156:	4798      	blx	r3
    7158:	0003      	movs	r3, r0
    715a:	3b01      	subs	r3, #1
    715c:	6023      	str	r3, [r4, #0]
	*(portNVIC_SYSTICK_CTRL) = portNVIC_SYSTICK_CLK | portNVIC_SYSTICK_INT | portNVIC_SYSTICK_ENABLE;
    715e:	4b03      	ldr	r3, [pc, #12]	; (716c <prvSetupTimerInterrupt+0x34>)
    7160:	2207      	movs	r2, #7
    7162:	601a      	str	r2, [r3, #0]
}
    7164:	46c0      	nop			; (mov r8, r8)
    7166:	46bd      	mov	sp, r7
    7168:	bdb0      	pop	{r4, r5, r7, pc}
    716a:	46c0      	nop			; (mov r8, r8)
    716c:	e000e010 	.word	0xe000e010
    7170:	e000e018 	.word	0xe000e018
    7174:	e000e014 	.word	0xe000e014
    7178:	00016c95 	.word	0x00016c95
    717c:	0001f841 	.word	0x0001f841

00007180 <pvPortMalloc>:
static size_t xNextFreeByte = ( size_t ) 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
    7180:	b580      	push	{r7, lr}
    7182:	b084      	sub	sp, #16
    7184:	af00      	add	r7, sp, #0
    7186:	6078      	str	r0, [r7, #4]
void *pvReturn = NULL;
    7188:	2300      	movs	r3, #0
    718a:	60fb      	str	r3, [r7, #12]
static uint8_t *pucAlignedHeap = NULL;

	/* Ensure that blocks are always aligned to the required number of bytes. */
	#if( portBYTE_ALIGNMENT != 1 )
	{
		if( xWantedSize & portBYTE_ALIGNMENT_MASK )
    718c:	687b      	ldr	r3, [r7, #4]
    718e:	2207      	movs	r2, #7
    7190:	4013      	ands	r3, r2
    7192:	d004      	beq.n	719e <pvPortMalloc+0x1e>
		{
			/* Byte alignment required. */
			xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
    7194:	687b      	ldr	r3, [r7, #4]
    7196:	2207      	movs	r2, #7
    7198:	4393      	bics	r3, r2
    719a:	3308      	adds	r3, #8
    719c:	607b      	str	r3, [r7, #4]
		}
	}
	#endif

	vTaskSuspendAll();
    719e:	4b21      	ldr	r3, [pc, #132]	; (7224 <pvPortMalloc+0xa4>)
    71a0:	4798      	blx	r3
	{
		if( pucAlignedHeap == NULL )
    71a2:	4b21      	ldr	r3, [pc, #132]	; (7228 <pvPortMalloc+0xa8>)
    71a4:	681b      	ldr	r3, [r3, #0]
    71a6:	2b00      	cmp	r3, #0
    71a8:	d105      	bne.n	71b6 <pvPortMalloc+0x36>
		{
			/* Ensure the heap starts on a correctly aligned boundary. */
			pucAlignedHeap = ( uint8_t * ) ( ( ( portPOINTER_SIZE_TYPE ) &ucHeap[ portBYTE_ALIGNMENT ] ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );
    71aa:	4b20      	ldr	r3, [pc, #128]	; (722c <pvPortMalloc+0xac>)
    71ac:	2207      	movs	r2, #7
    71ae:	4393      	bics	r3, r2
    71b0:	001a      	movs	r2, r3
    71b2:	4b1d      	ldr	r3, [pc, #116]	; (7228 <pvPortMalloc+0xa8>)
    71b4:	601a      	str	r2, [r3, #0]
		}

		/* Check there is enough room left for the allocation. */
		if( ( ( xNextFreeByte + xWantedSize ) < configADJUSTED_HEAP_SIZE ) &&
    71b6:	4b1e      	ldr	r3, [pc, #120]	; (7230 <pvPortMalloc+0xb0>)
    71b8:	681a      	ldr	r2, [r3, #0]
    71ba:	687b      	ldr	r3, [r7, #4]
    71bc:	18d3      	adds	r3, r2, r3
    71be:	4a1d      	ldr	r2, [pc, #116]	; (7234 <pvPortMalloc+0xb4>)
    71c0:	4293      	cmp	r3, r2
    71c2:	d813      	bhi.n	71ec <pvPortMalloc+0x6c>
			( ( xNextFreeByte + xWantedSize ) > xNextFreeByte )	)/* Check for overflow. */
    71c4:	4b1a      	ldr	r3, [pc, #104]	; (7230 <pvPortMalloc+0xb0>)
    71c6:	681a      	ldr	r2, [r3, #0]
    71c8:	687b      	ldr	r3, [r7, #4]
    71ca:	18d2      	adds	r2, r2, r3
    71cc:	4b18      	ldr	r3, [pc, #96]	; (7230 <pvPortMalloc+0xb0>)
    71ce:	681b      	ldr	r3, [r3, #0]
		if( ( ( xNextFreeByte + xWantedSize ) < configADJUSTED_HEAP_SIZE ) &&
    71d0:	429a      	cmp	r2, r3
    71d2:	d90b      	bls.n	71ec <pvPortMalloc+0x6c>
		{
			/* Return the next free byte then increment the index past this
			block. */
			pvReturn = pucAlignedHeap + xNextFreeByte;
    71d4:	4b14      	ldr	r3, [pc, #80]	; (7228 <pvPortMalloc+0xa8>)
    71d6:	681a      	ldr	r2, [r3, #0]
    71d8:	4b15      	ldr	r3, [pc, #84]	; (7230 <pvPortMalloc+0xb0>)
    71da:	681b      	ldr	r3, [r3, #0]
    71dc:	18d3      	adds	r3, r2, r3
    71de:	60fb      	str	r3, [r7, #12]
			xNextFreeByte += xWantedSize;
    71e0:	4b13      	ldr	r3, [pc, #76]	; (7230 <pvPortMalloc+0xb0>)
    71e2:	681a      	ldr	r2, [r3, #0]
    71e4:	687b      	ldr	r3, [r7, #4]
    71e6:	18d2      	adds	r2, r2, r3
    71e8:	4b11      	ldr	r3, [pc, #68]	; (7230 <pvPortMalloc+0xb0>)
    71ea:	601a      	str	r2, [r3, #0]
		}

		traceMALLOC( pvReturn, xWantedSize );
    71ec:	68fb      	ldr	r3, [r7, #12]
    71ee:	2b00      	cmp	r3, #0
    71f0:	d006      	beq.n	7200 <pvPortMalloc+0x80>
    71f2:	68fb      	ldr	r3, [r7, #12]
    71f4:	687a      	ldr	r2, [r7, #4]
    71f6:	0019      	movs	r1, r3
    71f8:	2094      	movs	r0, #148	; 0x94
    71fa:	4b0f      	ldr	r3, [pc, #60]	; (7238 <pvPortMalloc+0xb8>)
    71fc:	4798      	blx	r3
    71fe:	e005      	b.n	720c <pvPortMalloc+0x8c>
    7200:	68fb      	ldr	r3, [r7, #12]
    7202:	687a      	ldr	r2, [r7, #4]
    7204:	0019      	movs	r1, r3
    7206:	20e8      	movs	r0, #232	; 0xe8
    7208:	4b0b      	ldr	r3, [pc, #44]	; (7238 <pvPortMalloc+0xb8>)
    720a:	4798      	blx	r3
	}
	( void ) xTaskResumeAll();
    720c:	4b0b      	ldr	r3, [pc, #44]	; (723c <pvPortMalloc+0xbc>)
    720e:	4798      	blx	r3

	#if( configUSE_MALLOC_FAILED_HOOK == 1 )
	{
		if( pvReturn == NULL )
    7210:	68fb      	ldr	r3, [r7, #12]
    7212:	2b00      	cmp	r3, #0
    7214:	d101      	bne.n	721a <pvPortMalloc+0x9a>
		{
			extern void vApplicationMallocFailedHook( void );
			vApplicationMallocFailedHook();
    7216:	4b0a      	ldr	r3, [pc, #40]	; (7240 <pvPortMalloc+0xc0>)
    7218:	4798      	blx	r3
		}
	}
	#endif

	return pvReturn;
    721a:	68fb      	ldr	r3, [r7, #12]
}
    721c:	0018      	movs	r0, r3
    721e:	46bd      	mov	sp, r7
    7220:	b004      	add	sp, #16
    7222:	bd80      	pop	{r7, pc}
    7224:	00009305 	.word	0x00009305
    7228:	20003b54 	.word	0x20003b54
    722c:	20000c78 	.word	0x20000c78
    7230:	20003b50 	.word	0x20003b50
    7234:	00002ed7 	.word	0x00002ed7
    7238:	000058ed 	.word	0x000058ed
    723c:	0000931d 	.word	0x0000931d
    7240:	0001f811 	.word	0x0001f811

00007244 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
    7244:	b580      	push	{r7, lr}
    7246:	b082      	sub	sp, #8
    7248:	af00      	add	r7, sp, #0
    724a:	6078      	str	r0, [r7, #4]
	heap_4.c for alternative implementations, and the memory management pages of
	http://www.FreeRTOS.org for more information. */
	( void ) pv;

	/* Force an assert as it is invalid to call this function. */
	configASSERT( pv == NULL );
    724c:	687b      	ldr	r3, [r7, #4]
    724e:	2b00      	cmp	r3, #0
    7250:	d001      	beq.n	7256 <vPortFree+0x12>
    7252:	b672      	cpsid	i
    7254:	e7fe      	b.n	7254 <vPortFree+0x10>
}
    7256:	46c0      	nop			; (mov r8, r8)
    7258:	46bd      	mov	sp, r7
    725a:	b002      	add	sp, #8
    725c:	bd80      	pop	{r7, pc}
	...

00007260 <xPortGetFreeHeapSize>:
	xNextFreeByte = ( size_t ) 0;
}
/*-----------------------------------------------------------*/

size_t xPortGetFreeHeapSize( void )
{
    7260:	b580      	push	{r7, lr}
    7262:	af00      	add	r7, sp, #0
	return ( configADJUSTED_HEAP_SIZE - xNextFreeByte );
    7264:	4b03      	ldr	r3, [pc, #12]	; (7274 <xPortGetFreeHeapSize+0x14>)
    7266:	681b      	ldr	r3, [r3, #0]
    7268:	4a03      	ldr	r2, [pc, #12]	; (7278 <xPortGetFreeHeapSize+0x18>)
    726a:	1ad3      	subs	r3, r2, r3
}
    726c:	0018      	movs	r0, r3
    726e:	46bd      	mov	sp, r7
    7270:	bd80      	pop	{r7, pc}
    7272:	46c0      	nop			; (mov r8, r8)
    7274:	20003b50 	.word	0x20003b50
    7278:	00002ed8 	.word	0x00002ed8

0000727c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
    727c:	b580      	push	{r7, lr}
    727e:	b084      	sub	sp, #16
    7280:	af00      	add	r7, sp, #0
    7282:	6078      	str	r0, [r7, #4]
    7284:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
    7286:	687b      	ldr	r3, [r7, #4]
    7288:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
    728a:	68fb      	ldr	r3, [r7, #12]
    728c:	2b00      	cmp	r3, #0
    728e:	d101      	bne.n	7294 <xQueueGenericReset+0x18>
    7290:	b672      	cpsid	i
    7292:	e7fe      	b.n	7292 <xQueueGenericReset+0x16>

	taskENTER_CRITICAL();
    7294:	4b23      	ldr	r3, [pc, #140]	; (7324 <xQueueGenericReset+0xa8>)
    7296:	4798      	blx	r3
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
    7298:	68fb      	ldr	r3, [r7, #12]
    729a:	681a      	ldr	r2, [r3, #0]
    729c:	68fb      	ldr	r3, [r7, #12]
    729e:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
    72a0:	68fb      	ldr	r3, [r7, #12]
    72a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    72a4:	434b      	muls	r3, r1
    72a6:	18d2      	adds	r2, r2, r3
    72a8:	68fb      	ldr	r3, [r7, #12]
    72aa:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
    72ac:	68fb      	ldr	r3, [r7, #12]
    72ae:	2200      	movs	r2, #0
    72b0:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
    72b2:	68fb      	ldr	r3, [r7, #12]
    72b4:	681a      	ldr	r2, [r3, #0]
    72b6:	68fb      	ldr	r3, [r7, #12]
    72b8:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
    72ba:	68fb      	ldr	r3, [r7, #12]
    72bc:	681a      	ldr	r2, [r3, #0]
    72be:	68fb      	ldr	r3, [r7, #12]
    72c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    72c2:	1e59      	subs	r1, r3, #1
    72c4:	68fb      	ldr	r3, [r7, #12]
    72c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    72c8:	434b      	muls	r3, r1
    72ca:	18d2      	adds	r2, r2, r3
    72cc:	68fb      	ldr	r3, [r7, #12]
    72ce:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
    72d0:	68fb      	ldr	r3, [r7, #12]
    72d2:	2244      	movs	r2, #68	; 0x44
    72d4:	21ff      	movs	r1, #255	; 0xff
    72d6:	5499      	strb	r1, [r3, r2]
		pxQueue->cTxLock = queueUNLOCKED;
    72d8:	68fb      	ldr	r3, [r7, #12]
    72da:	2245      	movs	r2, #69	; 0x45
    72dc:	21ff      	movs	r1, #255	; 0xff
    72de:	5499      	strb	r1, [r3, r2]

		if( xNewQueue == pdFALSE )
    72e0:	683b      	ldr	r3, [r7, #0]
    72e2:	2b00      	cmp	r3, #0
    72e4:	d10d      	bne.n	7302 <xQueueGenericReset+0x86>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
    72e6:	68fb      	ldr	r3, [r7, #12]
    72e8:	691b      	ldr	r3, [r3, #16]
    72ea:	2b00      	cmp	r3, #0
    72ec:	d013      	beq.n	7316 <xQueueGenericReset+0x9a>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
    72ee:	68fb      	ldr	r3, [r7, #12]
    72f0:	3310      	adds	r3, #16
    72f2:	0018      	movs	r0, r3
    72f4:	4b0c      	ldr	r3, [pc, #48]	; (7328 <xQueueGenericReset+0xac>)
    72f6:	4798      	blx	r3
    72f8:	1e03      	subs	r3, r0, #0
    72fa:	d00c      	beq.n	7316 <xQueueGenericReset+0x9a>
				{
					queueYIELD_IF_USING_PREEMPTION();
    72fc:	4b0b      	ldr	r3, [pc, #44]	; (732c <xQueueGenericReset+0xb0>)
    72fe:	4798      	blx	r3
    7300:	e009      	b.n	7316 <xQueueGenericReset+0x9a>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
    7302:	68fb      	ldr	r3, [r7, #12]
    7304:	3310      	adds	r3, #16
    7306:	0018      	movs	r0, r3
    7308:	4b09      	ldr	r3, [pc, #36]	; (7330 <xQueueGenericReset+0xb4>)
    730a:	4798      	blx	r3
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
    730c:	68fb      	ldr	r3, [r7, #12]
    730e:	3324      	adds	r3, #36	; 0x24
    7310:	0018      	movs	r0, r3
    7312:	4b07      	ldr	r3, [pc, #28]	; (7330 <xQueueGenericReset+0xb4>)
    7314:	4798      	blx	r3
		}
	}
	taskEXIT_CRITICAL();
    7316:	4b07      	ldr	r3, [pc, #28]	; (7334 <xQueueGenericReset+0xb8>)
    7318:	4798      	blx	r3

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
    731a:	2301      	movs	r3, #1
}
    731c:	0018      	movs	r0, r3
    731e:	46bd      	mov	sp, r7
    7320:	b004      	add	sp, #16
    7322:	bd80      	pop	{r7, pc}
    7324:	00007049 	.word	0x00007049
    7328:	000098dd 	.word	0x000098dd
    732c:	00007031 	.word	0x00007031
    7330:	00006dbd 	.word	0x00006dbd
    7334:	0000706d 	.word	0x0000706d

00007338 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
    7338:	b590      	push	{r4, r7, lr}
    733a:	b08b      	sub	sp, #44	; 0x2c
    733c:	af02      	add	r7, sp, #8
    733e:	60f8      	str	r0, [r7, #12]
    7340:	60b9      	str	r1, [r7, #8]
    7342:	1dfb      	adds	r3, r7, #7
    7344:	701a      	strb	r2, [r3, #0]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
    7346:	68fb      	ldr	r3, [r7, #12]
    7348:	2b00      	cmp	r3, #0
    734a:	d101      	bne.n	7350 <xQueueGenericCreate+0x18>
    734c:	b672      	cpsid	i
    734e:	e7fe      	b.n	734e <xQueueGenericCreate+0x16>

		if( uxItemSize == ( UBaseType_t ) 0 )
    7350:	68bb      	ldr	r3, [r7, #8]
    7352:	2b00      	cmp	r3, #0
    7354:	d102      	bne.n	735c <xQueueGenericCreate+0x24>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
    7356:	2300      	movs	r3, #0
    7358:	61fb      	str	r3, [r7, #28]
    735a:	e003      	b.n	7364 <xQueueGenericCreate+0x2c>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    735c:	68fb      	ldr	r3, [r7, #12]
    735e:	68ba      	ldr	r2, [r7, #8]
    7360:	4353      	muls	r3, r2
    7362:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
    7364:	69fb      	ldr	r3, [r7, #28]
    7366:	3354      	adds	r3, #84	; 0x54
    7368:	0018      	movs	r0, r3
    736a:	4b19      	ldr	r3, [pc, #100]	; (73d0 <xQueueGenericCreate+0x98>)
    736c:	4798      	blx	r3
    736e:	0003      	movs	r3, r0
    7370:	61bb      	str	r3, [r7, #24]

		if( pxNewQueue != NULL )
    7372:	69bb      	ldr	r3, [r7, #24]
    7374:	2b00      	cmp	r3, #0
    7376:	d00d      	beq.n	7394 <xQueueGenericCreate+0x5c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
    7378:	69bb      	ldr	r3, [r7, #24]
    737a:	3354      	adds	r3, #84	; 0x54
    737c:	617b      	str	r3, [r7, #20]
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
    737e:	1dfb      	adds	r3, r7, #7
    7380:	781c      	ldrb	r4, [r3, #0]
    7382:	697a      	ldr	r2, [r7, #20]
    7384:	68b9      	ldr	r1, [r7, #8]
    7386:	68f8      	ldr	r0, [r7, #12]
    7388:	69bb      	ldr	r3, [r7, #24]
    738a:	9300      	str	r3, [sp, #0]
    738c:	0023      	movs	r3, r4
    738e:	4c11      	ldr	r4, [pc, #68]	; (73d4 <xQueueGenericCreate+0x9c>)
    7390:	47a0      	blx	r4
    7392:	e017      	b.n	73c4 <xQueueGenericCreate+0x8c>
		}
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
    7394:	4b10      	ldr	r3, [pc, #64]	; (73d8 <xQueueGenericCreate+0xa0>)
    7396:	4798      	blx	r3
    7398:	0003      	movs	r3, r0
    739a:	0018      	movs	r0, r3
    739c:	4b0f      	ldr	r3, [pc, #60]	; (73dc <xQueueGenericCreate+0xa4>)
    739e:	4798      	blx	r3
    73a0:	0003      	movs	r3, r0
    73a2:	001a      	movs	r2, r3
    73a4:	4b0e      	ldr	r3, [pc, #56]	; (73e0 <xQueueGenericCreate+0xa8>)
    73a6:	881b      	ldrh	r3, [r3, #0]
    73a8:	4013      	ands	r3, r2
    73aa:	b29b      	uxth	r3, r3
    73ac:	2b00      	cmp	r3, #0
    73ae:	d009      	beq.n	73c4 <xQueueGenericCreate+0x8c>
    73b0:	1dfb      	adds	r3, r7, #7
    73b2:	781b      	ldrb	r3, [r3, #0]
    73b4:	4a0b      	ldr	r2, [pc, #44]	; (73e4 <xQueueGenericCreate+0xac>)
    73b6:	5cd3      	ldrb	r3, [r2, r3]
    73b8:	3340      	adds	r3, #64	; 0x40
    73ba:	b2db      	uxtb	r3, r3
    73bc:	2100      	movs	r1, #0
    73be:	0018      	movs	r0, r3
    73c0:	4b09      	ldr	r3, [pc, #36]	; (73e8 <xQueueGenericCreate+0xb0>)
    73c2:	4798      	blx	r3
		}

		return pxNewQueue;
    73c4:	69bb      	ldr	r3, [r7, #24]
	}
    73c6:	0018      	movs	r0, r3
    73c8:	46bd      	mov	sp, r7
    73ca:	b009      	add	sp, #36	; 0x24
    73cc:	bd90      	pop	{r4, r7, pc}
    73ce:	46c0      	nop			; (mov r8, r8)
    73d0:	00007181 	.word	0x00007181
    73d4:	000073ed 	.word	0x000073ed
    73d8:	000052e1 	.word	0x000052e1
    73dc:	00005045 	.word	0x00005045
    73e0:	20000100 	.word	0x20000100
    73e4:	200000f4 	.word	0x200000f4
    73e8:	00005d45 	.word	0x00005d45

000073ec <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
    73ec:	b5b0      	push	{r4, r5, r7, lr}
    73ee:	b084      	sub	sp, #16
    73f0:	af00      	add	r7, sp, #0
    73f2:	60f8      	str	r0, [r7, #12]
    73f4:	60b9      	str	r1, [r7, #8]
    73f6:	607a      	str	r2, [r7, #4]
    73f8:	001a      	movs	r2, r3
    73fa:	1cfb      	adds	r3, r7, #3
    73fc:	701a      	strb	r2, [r3, #0]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
    73fe:	68bb      	ldr	r3, [r7, #8]
    7400:	2b00      	cmp	r3, #0
    7402:	d103      	bne.n	740c <prvInitialiseNewQueue+0x20>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
    7404:	6a3b      	ldr	r3, [r7, #32]
    7406:	6a3a      	ldr	r2, [r7, #32]
    7408:	601a      	str	r2, [r3, #0]
    740a:	e002      	b.n	7412 <prvInitialiseNewQueue+0x26>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
    740c:	6a3b      	ldr	r3, [r7, #32]
    740e:	687a      	ldr	r2, [r7, #4]
    7410:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
    7412:	6a3b      	ldr	r3, [r7, #32]
    7414:	68fa      	ldr	r2, [r7, #12]
    7416:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
    7418:	6a3b      	ldr	r3, [r7, #32]
    741a:	68ba      	ldr	r2, [r7, #8]
    741c:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
    741e:	6a3b      	ldr	r3, [r7, #32]
    7420:	2101      	movs	r1, #1
    7422:	0018      	movs	r0, r3
    7424:	4b41      	ldr	r3, [pc, #260]	; (752c <prvInitialiseNewQueue+0x140>)
    7426:	4798      	blx	r3

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
    7428:	6a3b      	ldr	r3, [r7, #32]
    742a:	1cfa      	adds	r2, r7, #3
    742c:	2150      	movs	r1, #80	; 0x50
    742e:	7812      	ldrb	r2, [r2, #0]
    7430:	545a      	strb	r2, [r3, r1]
	}
	#endif /* configUSE_TRACE_FACILITY */

	#if( configUSE_QUEUE_SETS == 1 )
	{
		pxNewQueue->pxQueueSetContainer = NULL;
    7432:	6a3b      	ldr	r3, [r7, #32]
    7434:	2200      	movs	r2, #0
    7436:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
    7438:	6a3b      	ldr	r3, [r7, #32]
    743a:	0018      	movs	r0, r3
    743c:	4b3c      	ldr	r3, [pc, #240]	; (7530 <prvInitialiseNewQueue+0x144>)
    743e:	4798      	blx	r3
    7440:	0003      	movs	r3, r0
    7442:	001a      	movs	r2, r3
    7444:	4b3b      	ldr	r3, [pc, #236]	; (7534 <prvInitialiseNewQueue+0x148>)
    7446:	5c9b      	ldrb	r3, [r3, r2]
    7448:	0018      	movs	r0, r3
    744a:	4b3b      	ldr	r3, [pc, #236]	; (7538 <prvInitialiseNewQueue+0x14c>)
    744c:	4798      	blx	r3
    744e:	0003      	movs	r3, r0
    7450:	b29a      	uxth	r2, r3
    7452:	6a3b      	ldr	r3, [r7, #32]
    7454:	0011      	movs	r1, r2
    7456:	0018      	movs	r0, r3
    7458:	4b38      	ldr	r3, [pc, #224]	; (753c <prvInitialiseNewQueue+0x150>)
    745a:	4798      	blx	r3
    745c:	4b38      	ldr	r3, [pc, #224]	; (7540 <prvInitialiseNewQueue+0x154>)
    745e:	881a      	ldrh	r2, [r3, #0]
    7460:	6a3b      	ldr	r3, [r7, #32]
    7462:	0011      	movs	r1, r2
    7464:	0018      	movs	r0, r3
    7466:	4b37      	ldr	r3, [pc, #220]	; (7544 <prvInitialiseNewQueue+0x158>)
    7468:	4798      	blx	r3
    746a:	6a3b      	ldr	r3, [r7, #32]
    746c:	0018      	movs	r0, r3
    746e:	4b30      	ldr	r3, [pc, #192]	; (7530 <prvInitialiseNewQueue+0x144>)
    7470:	4798      	blx	r3
    7472:	0003      	movs	r3, r0
    7474:	001a      	movs	r2, r3
    7476:	4b2f      	ldr	r3, [pc, #188]	; (7534 <prvInitialiseNewQueue+0x148>)
    7478:	5c9c      	ldrb	r4, [r3, r2]
    747a:	6a3b      	ldr	r3, [r7, #32]
    747c:	0018      	movs	r0, r3
    747e:	4b32      	ldr	r3, [pc, #200]	; (7548 <prvInitialiseNewQueue+0x15c>)
    7480:	4798      	blx	r3
    7482:	0003      	movs	r3, r0
    7484:	b2db      	uxtb	r3, r3
    7486:	0019      	movs	r1, r3
    7488:	0020      	movs	r0, r4
    748a:	4b30      	ldr	r3, [pc, #192]	; (754c <prvInitialiseNewQueue+0x160>)
    748c:	4798      	blx	r3
    748e:	4b30      	ldr	r3, [pc, #192]	; (7550 <prvInitialiseNewQueue+0x164>)
    7490:	4798      	blx	r3
    7492:	0003      	movs	r3, r0
    7494:	0018      	movs	r0, r3
    7496:	4b2f      	ldr	r3, [pc, #188]	; (7554 <prvInitialiseNewQueue+0x168>)
    7498:	4798      	blx	r3
    749a:	0003      	movs	r3, r0
    749c:	001a      	movs	r2, r3
    749e:	4b2e      	ldr	r3, [pc, #184]	; (7558 <prvInitialiseNewQueue+0x16c>)
    74a0:	881b      	ldrh	r3, [r3, #0]
    74a2:	4013      	ands	r3, r2
    74a4:	b29b      	uxth	r3, r3
    74a6:	2b00      	cmp	r3, #0
    74a8:	d029      	beq.n	74fe <prvInitialiseNewQueue+0x112>
    74aa:	6a3b      	ldr	r3, [r7, #32]
    74ac:	0018      	movs	r0, r3
    74ae:	4b2b      	ldr	r3, [pc, #172]	; (755c <prvInitialiseNewQueue+0x170>)
    74b0:	4798      	blx	r3
    74b2:	0003      	movs	r3, r0
    74b4:	001a      	movs	r2, r3
    74b6:	4b28      	ldr	r3, [pc, #160]	; (7558 <prvInitialiseNewQueue+0x16c>)
    74b8:	881b      	ldrh	r3, [r3, #0]
    74ba:	4013      	ands	r3, r2
    74bc:	b29b      	uxth	r3, r3
    74be:	2b00      	cmp	r3, #0
    74c0:	d01d      	beq.n	74fe <prvInitialiseNewQueue+0x112>
    74c2:	6a3b      	ldr	r3, [r7, #32]
    74c4:	0018      	movs	r0, r3
    74c6:	4b1a      	ldr	r3, [pc, #104]	; (7530 <prvInitialiseNewQueue+0x144>)
    74c8:	4798      	blx	r3
    74ca:	0003      	movs	r3, r0
    74cc:	001a      	movs	r2, r3
    74ce:	4b19      	ldr	r3, [pc, #100]	; (7534 <prvInitialiseNewQueue+0x148>)
    74d0:	5c9b      	ldrb	r3, [r3, r2]
    74d2:	3318      	adds	r3, #24
    74d4:	b2db      	uxtb	r3, r3
    74d6:	001d      	movs	r5, r3
    74d8:	6a3b      	ldr	r3, [r7, #32]
    74da:	0018      	movs	r0, r3
    74dc:	4b14      	ldr	r3, [pc, #80]	; (7530 <prvInitialiseNewQueue+0x144>)
    74de:	4798      	blx	r3
    74e0:	0003      	movs	r3, r0
    74e2:	001a      	movs	r2, r3
    74e4:	4b13      	ldr	r3, [pc, #76]	; (7534 <prvInitialiseNewQueue+0x148>)
    74e6:	5c9c      	ldrb	r4, [r3, r2]
    74e8:	6a3b      	ldr	r3, [r7, #32]
    74ea:	0018      	movs	r0, r3
    74ec:	4b16      	ldr	r3, [pc, #88]	; (7548 <prvInitialiseNewQueue+0x15c>)
    74ee:	4798      	blx	r3
    74f0:	0003      	movs	r3, r0
    74f2:	b2db      	uxtb	r3, r3
    74f4:	001a      	movs	r2, r3
    74f6:	0021      	movs	r1, r4
    74f8:	0028      	movs	r0, r5
    74fa:	4b19      	ldr	r3, [pc, #100]	; (7560 <prvInitialiseNewQueue+0x174>)
    74fc:	4798      	blx	r3
    74fe:	6a3b      	ldr	r3, [r7, #32]
    7500:	0018      	movs	r0, r3
    7502:	4b0b      	ldr	r3, [pc, #44]	; (7530 <prvInitialiseNewQueue+0x144>)
    7504:	4798      	blx	r3
    7506:	0003      	movs	r3, r0
    7508:	001a      	movs	r2, r3
    750a:	4b0a      	ldr	r3, [pc, #40]	; (7534 <prvInitialiseNewQueue+0x148>)
    750c:	5c9c      	ldrb	r4, [r3, r2]
    750e:	6a3b      	ldr	r3, [r7, #32]
    7510:	0018      	movs	r0, r3
    7512:	4b0d      	ldr	r3, [pc, #52]	; (7548 <prvInitialiseNewQueue+0x15c>)
    7514:	4798      	blx	r3
    7516:	0003      	movs	r3, r0
    7518:	b2db      	uxtb	r3, r3
    751a:	2200      	movs	r2, #0
    751c:	0019      	movs	r1, r3
    751e:	0020      	movs	r0, r4
    7520:	4b10      	ldr	r3, [pc, #64]	; (7564 <prvInitialiseNewQueue+0x178>)
    7522:	4798      	blx	r3
}
    7524:	46c0      	nop			; (mov r8, r8)
    7526:	46bd      	mov	sp, r7
    7528:	b004      	add	sp, #16
    752a:	bdb0      	pop	{r4, r5, r7, pc}
    752c:	0000727d 	.word	0x0000727d
    7530:	00005005 	.word	0x00005005
    7534:	200000f4 	.word	0x200000f4
    7538:	000065c5 	.word	0x000065c5
    753c:	00005129 	.word	0x00005129
    7540:	20000102 	.word	0x20000102
    7544:	00005165 	.word	0x00005165
    7548:	000050e5 	.word	0x000050e5
    754c:	0000675d 	.word	0x0000675d
    7550:	000052e1 	.word	0x000052e1
    7554:	00005045 	.word	0x00005045
    7558:	20000100 	.word	0x20000100
    755c:	00005105 	.word	0x00005105
    7560:	00005a3d 	.word	0x00005a3d
    7564:	00006099 	.word	0x00006099

00007568 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
    7568:	b590      	push	{r4, r7, lr}
    756a:	b083      	sub	sp, #12
    756c:	af00      	add	r7, sp, #0
    756e:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
    7570:	687b      	ldr	r3, [r7, #4]
    7572:	2b00      	cmp	r3, #0
    7574:	d00e      	beq.n	7594 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->pxMutexHolder = NULL;
    7576:	687b      	ldr	r3, [r7, #4]
    7578:	2200      	movs	r2, #0
    757a:	605a      	str	r2, [r3, #4]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
    757c:	687b      	ldr	r3, [r7, #4]
    757e:	2200      	movs	r2, #0
    7580:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.uxRecursiveCallCount = 0;
    7582:	687b      	ldr	r3, [r7, #4]
    7584:	2200      	movs	r2, #0
    7586:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
    7588:	6878      	ldr	r0, [r7, #4]
    758a:	2300      	movs	r3, #0
    758c:	2200      	movs	r2, #0
    758e:	2100      	movs	r1, #0
    7590:	4c02      	ldr	r4, [pc, #8]	; (759c <prvInitialiseMutex+0x34>)
    7592:	47a0      	blx	r4
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
    7594:	46c0      	nop			; (mov r8, r8)
    7596:	46bd      	mov	sp, r7
    7598:	b003      	add	sp, #12
    759a:	bd90      	pop	{r4, r7, pc}
    759c:	000075e1 	.word	0x000075e1

000075a0 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
    75a0:	b580      	push	{r7, lr}
    75a2:	b086      	sub	sp, #24
    75a4:	af00      	add	r7, sp, #0
    75a6:	0002      	movs	r2, r0
    75a8:	1dfb      	adds	r3, r7, #7
    75aa:	701a      	strb	r2, [r3, #0]
	Queue_t *pxNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
    75ac:	2301      	movs	r3, #1
    75ae:	617b      	str	r3, [r7, #20]
    75b0:	2300      	movs	r3, #0
    75b2:	613b      	str	r3, [r7, #16]

		pxNewQueue = ( Queue_t * ) xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
    75b4:	1dfb      	adds	r3, r7, #7
    75b6:	781a      	ldrb	r2, [r3, #0]
    75b8:	6939      	ldr	r1, [r7, #16]
    75ba:	697b      	ldr	r3, [r7, #20]
    75bc:	0018      	movs	r0, r3
    75be:	4b06      	ldr	r3, [pc, #24]	; (75d8 <xQueueCreateMutex+0x38>)
    75c0:	4798      	blx	r3
    75c2:	0003      	movs	r3, r0
    75c4:	60fb      	str	r3, [r7, #12]
		prvInitialiseMutex( pxNewQueue );
    75c6:	68fb      	ldr	r3, [r7, #12]
    75c8:	0018      	movs	r0, r3
    75ca:	4b04      	ldr	r3, [pc, #16]	; (75dc <xQueueCreateMutex+0x3c>)
    75cc:	4798      	blx	r3

		return pxNewQueue;
    75ce:	68fb      	ldr	r3, [r7, #12]
	}
    75d0:	0018      	movs	r0, r3
    75d2:	46bd      	mov	sp, r7
    75d4:	b006      	add	sp, #24
    75d6:	bd80      	pop	{r7, pc}
    75d8:	00007339 	.word	0x00007339
    75dc:	00007569 	.word	0x00007569

000075e0 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
    75e0:	b5b0      	push	{r4, r5, r7, lr}
    75e2:	b08a      	sub	sp, #40	; 0x28
    75e4:	af00      	add	r7, sp, #0
    75e6:	60f8      	str	r0, [r7, #12]
    75e8:	60b9      	str	r1, [r7, #8]
    75ea:	607a      	str	r2, [r7, #4]
    75ec:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
    75ee:	2300      	movs	r3, #0
    75f0:	627b      	str	r3, [r7, #36]	; 0x24
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
    75f2:	68fb      	ldr	r3, [r7, #12]
    75f4:	623b      	str	r3, [r7, #32]

	configASSERT( pxQueue );
    75f6:	6a3b      	ldr	r3, [r7, #32]
    75f8:	2b00      	cmp	r3, #0
    75fa:	d101      	bne.n	7600 <xQueueGenericSend+0x20>
    75fc:	b672      	cpsid	i
    75fe:	e7fe      	b.n	75fe <xQueueGenericSend+0x1e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
    7600:	68bb      	ldr	r3, [r7, #8]
    7602:	2b00      	cmp	r3, #0
    7604:	d103      	bne.n	760e <xQueueGenericSend+0x2e>
    7606:	6a3b      	ldr	r3, [r7, #32]
    7608:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    760a:	2b00      	cmp	r3, #0
    760c:	d101      	bne.n	7612 <xQueueGenericSend+0x32>
    760e:	2301      	movs	r3, #1
    7610:	e000      	b.n	7614 <xQueueGenericSend+0x34>
    7612:	2300      	movs	r3, #0
    7614:	2b00      	cmp	r3, #0
    7616:	d101      	bne.n	761c <xQueueGenericSend+0x3c>
    7618:	b672      	cpsid	i
    761a:	e7fe      	b.n	761a <xQueueGenericSend+0x3a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
    761c:	683b      	ldr	r3, [r7, #0]
    761e:	2b02      	cmp	r3, #2
    7620:	d103      	bne.n	762a <xQueueGenericSend+0x4a>
    7622:	6a3b      	ldr	r3, [r7, #32]
    7624:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    7626:	2b01      	cmp	r3, #1
    7628:	d101      	bne.n	762e <xQueueGenericSend+0x4e>
    762a:	2301      	movs	r3, #1
    762c:	e000      	b.n	7630 <xQueueGenericSend+0x50>
    762e:	2300      	movs	r3, #0
    7630:	2b00      	cmp	r3, #0
    7632:	d101      	bne.n	7638 <xQueueGenericSend+0x58>
    7634:	b672      	cpsid	i
    7636:	e7fe      	b.n	7636 <xQueueGenericSend+0x56>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
    7638:	4bbc      	ldr	r3, [pc, #752]	; (792c <xQueueGenericSend+0x34c>)
    763a:	4798      	blx	r3
    763c:	1e03      	subs	r3, r0, #0
    763e:	d102      	bne.n	7646 <xQueueGenericSend+0x66>
    7640:	687b      	ldr	r3, [r7, #4]
    7642:	2b00      	cmp	r3, #0
    7644:	d101      	bne.n	764a <xQueueGenericSend+0x6a>
    7646:	2301      	movs	r3, #1
    7648:	e000      	b.n	764c <xQueueGenericSend+0x6c>
    764a:	2300      	movs	r3, #0
    764c:	2b00      	cmp	r3, #0
    764e:	d101      	bne.n	7654 <xQueueGenericSend+0x74>
    7650:	b672      	cpsid	i
    7652:	e7fe      	b.n	7652 <xQueueGenericSend+0x72>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
    7654:	4bb6      	ldr	r3, [pc, #728]	; (7930 <xQueueGenericSend+0x350>)
    7656:	4798      	blx	r3
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
    7658:	6a3b      	ldr	r3, [r7, #32]
    765a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    765c:	6a3b      	ldr	r3, [r7, #32]
    765e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    7660:	429a      	cmp	r2, r3
    7662:	d303      	bcc.n	766c <xQueueGenericSend+0x8c>
    7664:	683b      	ldr	r3, [r7, #0]
    7666:	2b02      	cmp	r3, #2
    7668:	d000      	beq.n	766c <xQueueGenericSend+0x8c>
    766a:	e08e      	b.n	778a <xQueueGenericSend+0x1aa>
			{
				traceQUEUE_SEND( pxQueue );
    766c:	4bb1      	ldr	r3, [pc, #708]	; (7934 <xQueueGenericSend+0x354>)
    766e:	4798      	blx	r3
    7670:	0003      	movs	r3, r0
    7672:	0018      	movs	r0, r3
    7674:	4bb0      	ldr	r3, [pc, #704]	; (7938 <xQueueGenericSend+0x358>)
    7676:	4798      	blx	r3
    7678:	0003      	movs	r3, r0
    767a:	001a      	movs	r2, r3
    767c:	4baf      	ldr	r3, [pc, #700]	; (793c <xQueueGenericSend+0x35c>)
    767e:	881b      	ldrh	r3, [r3, #0]
    7680:	4013      	ands	r3, r2
    7682:	b29b      	uxth	r3, r3
    7684:	2b00      	cmp	r3, #0
    7686:	d02e      	beq.n	76e6 <xQueueGenericSend+0x106>
    7688:	6a3b      	ldr	r3, [r7, #32]
    768a:	0018      	movs	r0, r3
    768c:	4bac      	ldr	r3, [pc, #688]	; (7940 <xQueueGenericSend+0x360>)
    768e:	4798      	blx	r3
    7690:	0003      	movs	r3, r0
    7692:	001a      	movs	r2, r3
    7694:	4ba9      	ldr	r3, [pc, #676]	; (793c <xQueueGenericSend+0x35c>)
    7696:	881b      	ldrh	r3, [r3, #0]
    7698:	4013      	ands	r3, r2
    769a:	b29b      	uxth	r3, r3
    769c:	2b00      	cmp	r3, #0
    769e:	d022      	beq.n	76e6 <xQueueGenericSend+0x106>
    76a0:	683b      	ldr	r3, [r7, #0]
    76a2:	2b00      	cmp	r3, #0
    76a4:	d10b      	bne.n	76be <xQueueGenericSend+0xde>
    76a6:	6a3b      	ldr	r3, [r7, #32]
    76a8:	0018      	movs	r0, r3
    76aa:	4ba6      	ldr	r3, [pc, #664]	; (7944 <xQueueGenericSend+0x364>)
    76ac:	4798      	blx	r3
    76ae:	0003      	movs	r3, r0
    76b0:	001a      	movs	r2, r3
    76b2:	4ba5      	ldr	r3, [pc, #660]	; (7948 <xQueueGenericSend+0x368>)
    76b4:	5c9b      	ldrb	r3, [r3, r2]
    76b6:	3320      	adds	r3, #32
    76b8:	b2db      	uxtb	r3, r3
    76ba:	001d      	movs	r5, r3
    76bc:	e000      	b.n	76c0 <xQueueGenericSend+0xe0>
    76be:	2525      	movs	r5, #37	; 0x25
    76c0:	6a3b      	ldr	r3, [r7, #32]
    76c2:	0018      	movs	r0, r3
    76c4:	4b9f      	ldr	r3, [pc, #636]	; (7944 <xQueueGenericSend+0x364>)
    76c6:	4798      	blx	r3
    76c8:	0003      	movs	r3, r0
    76ca:	001a      	movs	r2, r3
    76cc:	4b9e      	ldr	r3, [pc, #632]	; (7948 <xQueueGenericSend+0x368>)
    76ce:	5c9c      	ldrb	r4, [r3, r2]
    76d0:	6a3b      	ldr	r3, [r7, #32]
    76d2:	0018      	movs	r0, r3
    76d4:	4b9d      	ldr	r3, [pc, #628]	; (794c <xQueueGenericSend+0x36c>)
    76d6:	4798      	blx	r3
    76d8:	0003      	movs	r3, r0
    76da:	b2db      	uxtb	r3, r3
    76dc:	001a      	movs	r2, r3
    76de:	0021      	movs	r1, r4
    76e0:	0028      	movs	r0, r5
    76e2:	4b9b      	ldr	r3, [pc, #620]	; (7950 <xQueueGenericSend+0x370>)
    76e4:	4798      	blx	r3
    76e6:	6a3b      	ldr	r3, [r7, #32]
    76e8:	0018      	movs	r0, r3
    76ea:	4b96      	ldr	r3, [pc, #600]	; (7944 <xQueueGenericSend+0x364>)
    76ec:	4798      	blx	r3
    76ee:	0003      	movs	r3, r0
    76f0:	001a      	movs	r2, r3
    76f2:	4b95      	ldr	r3, [pc, #596]	; (7948 <xQueueGenericSend+0x368>)
    76f4:	5c9c      	ldrb	r4, [r3, r2]
    76f6:	6a3b      	ldr	r3, [r7, #32]
    76f8:	0018      	movs	r0, r3
    76fa:	4b94      	ldr	r3, [pc, #592]	; (794c <xQueueGenericSend+0x36c>)
    76fc:	4798      	blx	r3
    76fe:	0003      	movs	r3, r0
    7700:	b2dd      	uxtb	r5, r3
    7702:	6a3b      	ldr	r3, [r7, #32]
    7704:	0018      	movs	r0, r3
    7706:	4b8f      	ldr	r3, [pc, #572]	; (7944 <xQueueGenericSend+0x364>)
    7708:	4798      	blx	r3
    770a:	0003      	movs	r3, r0
    770c:	001a      	movs	r2, r3
    770e:	4b8e      	ldr	r3, [pc, #568]	; (7948 <xQueueGenericSend+0x368>)
    7710:	5c9b      	ldrb	r3, [r3, r2]
    7712:	2b02      	cmp	r3, #2
    7714:	d005      	beq.n	7722 <xQueueGenericSend+0x142>
    7716:	6a3b      	ldr	r3, [r7, #32]
    7718:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    771a:	b2db      	uxtb	r3, r3
    771c:	3301      	adds	r3, #1
    771e:	b2db      	uxtb	r3, r3
    7720:	e000      	b.n	7724 <xQueueGenericSend+0x144>
    7722:	2300      	movs	r3, #0
    7724:	001a      	movs	r2, r3
    7726:	0029      	movs	r1, r5
    7728:	0020      	movs	r0, r4
    772a:	4b8a      	ldr	r3, [pc, #552]	; (7954 <xQueueGenericSend+0x374>)
    772c:	4798      	blx	r3
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
    772e:	683a      	ldr	r2, [r7, #0]
    7730:	68b9      	ldr	r1, [r7, #8]
    7732:	6a3b      	ldr	r3, [r7, #32]
    7734:	0018      	movs	r0, r3
    7736:	4b88      	ldr	r3, [pc, #544]	; (7958 <xQueueGenericSend+0x378>)
    7738:	4798      	blx	r3
    773a:	0003      	movs	r3, r0
    773c:	61fb      	str	r3, [r7, #28]

				#if ( configUSE_QUEUE_SETS == 1 )
				{
					if( pxQueue->pxQueueSetContainer != NULL )
    773e:	6a3b      	ldr	r3, [r7, #32]
    7740:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    7742:	2b00      	cmp	r3, #0
    7744:	d00a      	beq.n	775c <xQueueGenericSend+0x17c>
					{
						if( prvNotifyQueueSetContainer( pxQueue, xCopyPosition ) != pdFALSE )
    7746:	683a      	ldr	r2, [r7, #0]
    7748:	6a3b      	ldr	r3, [r7, #32]
    774a:	0011      	movs	r1, r2
    774c:	0018      	movs	r0, r3
    774e:	4b83      	ldr	r3, [pc, #524]	; (795c <xQueueGenericSend+0x37c>)
    7750:	4798      	blx	r3
    7752:	1e03      	subs	r3, r0, #0
    7754:	d015      	beq.n	7782 <xQueueGenericSend+0x1a2>
						{
							/* The queue is a member of a queue set, and posting
							to the queue set caused a higher priority task to
							unblock. A context switch is required. */
							queueYIELD_IF_USING_PREEMPTION();
    7756:	4b82      	ldr	r3, [pc, #520]	; (7960 <xQueueGenericSend+0x380>)
    7758:	4798      	blx	r3
    775a:	e012      	b.n	7782 <xQueueGenericSend+0x1a2>
					}
					else
					{
						/* If there was a task waiting for data to arrive on the
						queue then unblock it now. */
						if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    775c:	6a3b      	ldr	r3, [r7, #32]
    775e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    7760:	2b00      	cmp	r3, #0
    7762:	d009      	beq.n	7778 <xQueueGenericSend+0x198>
						{
							if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
    7764:	6a3b      	ldr	r3, [r7, #32]
    7766:	3324      	adds	r3, #36	; 0x24
    7768:	0018      	movs	r0, r3
    776a:	4b7e      	ldr	r3, [pc, #504]	; (7964 <xQueueGenericSend+0x384>)
    776c:	4798      	blx	r3
    776e:	1e03      	subs	r3, r0, #0
    7770:	d007      	beq.n	7782 <xQueueGenericSend+0x1a2>
							{
								/* The unblocked task has a priority higher than
								our own so yield immediately.  Yes it is ok to
								do this from within the critical section - the
								kernel takes care of that. */
								queueYIELD_IF_USING_PREEMPTION();
    7772:	4b7b      	ldr	r3, [pc, #492]	; (7960 <xQueueGenericSend+0x380>)
    7774:	4798      	blx	r3
    7776:	e004      	b.n	7782 <xQueueGenericSend+0x1a2>
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
						}
						else if( xYieldRequired != pdFALSE )
    7778:	69fb      	ldr	r3, [r7, #28]
    777a:	2b00      	cmp	r3, #0
    777c:	d001      	beq.n	7782 <xQueueGenericSend+0x1a2>
						{
							/* This path is a special case that will only get
							executed if the task was holding multiple mutexes
							and the mutexes were given back in an order that is
							different to that in which they were taken. */
							queueYIELD_IF_USING_PREEMPTION();
    777e:	4b78      	ldr	r3, [pc, #480]	; (7960 <xQueueGenericSend+0x380>)
    7780:	4798      	blx	r3
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
    7782:	4b79      	ldr	r3, [pc, #484]	; (7968 <xQueueGenericSend+0x388>)
    7784:	4798      	blx	r3
				return pdPASS;
    7786:	2301      	movs	r3, #1
    7788:	e142      	b.n	7a10 <xQueueGenericSend+0x430>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
    778a:	687b      	ldr	r3, [r7, #4]
    778c:	2b00      	cmp	r3, #0
    778e:	d140      	bne.n	7812 <xQueueGenericSend+0x232>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
    7790:	4b75      	ldr	r3, [pc, #468]	; (7968 <xQueueGenericSend+0x388>)
    7792:	4798      	blx	r3

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
    7794:	4b67      	ldr	r3, [pc, #412]	; (7934 <xQueueGenericSend+0x354>)
    7796:	4798      	blx	r3
    7798:	0003      	movs	r3, r0
    779a:	0018      	movs	r0, r3
    779c:	4b66      	ldr	r3, [pc, #408]	; (7938 <xQueueGenericSend+0x358>)
    779e:	4798      	blx	r3
    77a0:	0003      	movs	r3, r0
    77a2:	001a      	movs	r2, r3
    77a4:	4b65      	ldr	r3, [pc, #404]	; (793c <xQueueGenericSend+0x35c>)
    77a6:	881b      	ldrh	r3, [r3, #0]
    77a8:	4013      	ands	r3, r2
    77aa:	b29b      	uxth	r3, r3
    77ac:	2b00      	cmp	r3, #0
    77ae:	d02e      	beq.n	780e <xQueueGenericSend+0x22e>
    77b0:	6a3b      	ldr	r3, [r7, #32]
    77b2:	0018      	movs	r0, r3
    77b4:	4b62      	ldr	r3, [pc, #392]	; (7940 <xQueueGenericSend+0x360>)
    77b6:	4798      	blx	r3
    77b8:	0003      	movs	r3, r0
    77ba:	001a      	movs	r2, r3
    77bc:	4b5f      	ldr	r3, [pc, #380]	; (793c <xQueueGenericSend+0x35c>)
    77be:	881b      	ldrh	r3, [r3, #0]
    77c0:	4013      	ands	r3, r2
    77c2:	b29b      	uxth	r3, r3
    77c4:	2b00      	cmp	r3, #0
    77c6:	d022      	beq.n	780e <xQueueGenericSend+0x22e>
    77c8:	683b      	ldr	r3, [r7, #0]
    77ca:	2b00      	cmp	r3, #0
    77cc:	d10b      	bne.n	77e6 <xQueueGenericSend+0x206>
    77ce:	6a3b      	ldr	r3, [r7, #32]
    77d0:	0018      	movs	r0, r3
    77d2:	4b5c      	ldr	r3, [pc, #368]	; (7944 <xQueueGenericSend+0x364>)
    77d4:	4798      	blx	r3
    77d6:	0003      	movs	r3, r0
    77d8:	001a      	movs	r2, r3
    77da:	4b5b      	ldr	r3, [pc, #364]	; (7948 <xQueueGenericSend+0x368>)
    77dc:	5c9b      	ldrb	r3, [r3, r2]
    77de:	3348      	adds	r3, #72	; 0x48
    77e0:	b2db      	uxtb	r3, r3
    77e2:	001d      	movs	r5, r3
    77e4:	e000      	b.n	77e8 <xQueueGenericSend+0x208>
    77e6:	254d      	movs	r5, #77	; 0x4d
    77e8:	6a3b      	ldr	r3, [r7, #32]
    77ea:	0018      	movs	r0, r3
    77ec:	4b55      	ldr	r3, [pc, #340]	; (7944 <xQueueGenericSend+0x364>)
    77ee:	4798      	blx	r3
    77f0:	0003      	movs	r3, r0
    77f2:	001a      	movs	r2, r3
    77f4:	4b54      	ldr	r3, [pc, #336]	; (7948 <xQueueGenericSend+0x368>)
    77f6:	5c9c      	ldrb	r4, [r3, r2]
    77f8:	6a3b      	ldr	r3, [r7, #32]
    77fa:	0018      	movs	r0, r3
    77fc:	4b53      	ldr	r3, [pc, #332]	; (794c <xQueueGenericSend+0x36c>)
    77fe:	4798      	blx	r3
    7800:	0003      	movs	r3, r0
    7802:	b2db      	uxtb	r3, r3
    7804:	001a      	movs	r2, r3
    7806:	0021      	movs	r1, r4
    7808:	0028      	movs	r0, r5
    780a:	4b51      	ldr	r3, [pc, #324]	; (7950 <xQueueGenericSend+0x370>)
    780c:	4798      	blx	r3
					return errQUEUE_FULL;
    780e:	2300      	movs	r3, #0
    7810:	e0fe      	b.n	7a10 <xQueueGenericSend+0x430>
				}
				else if( xEntryTimeSet == pdFALSE )
    7812:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    7814:	2b00      	cmp	r3, #0
    7816:	d106      	bne.n	7826 <xQueueGenericSend+0x246>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
    7818:	2314      	movs	r3, #20
    781a:	18fb      	adds	r3, r7, r3
    781c:	0018      	movs	r0, r3
    781e:	4b53      	ldr	r3, [pc, #332]	; (796c <xQueueGenericSend+0x38c>)
    7820:	4798      	blx	r3
					xEntryTimeSet = pdTRUE;
    7822:	2301      	movs	r3, #1
    7824:	627b      	str	r3, [r7, #36]	; 0x24
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
    7826:	4b50      	ldr	r3, [pc, #320]	; (7968 <xQueueGenericSend+0x388>)
    7828:	4798      	blx	r3

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
    782a:	4b51      	ldr	r3, [pc, #324]	; (7970 <xQueueGenericSend+0x390>)
    782c:	4798      	blx	r3
		prvLockQueue( pxQueue );
    782e:	4b40      	ldr	r3, [pc, #256]	; (7930 <xQueueGenericSend+0x350>)
    7830:	4798      	blx	r3
    7832:	6a3b      	ldr	r3, [r7, #32]
    7834:	2244      	movs	r2, #68	; 0x44
    7836:	5c9b      	ldrb	r3, [r3, r2]
    7838:	b25b      	sxtb	r3, r3
    783a:	3301      	adds	r3, #1
    783c:	d103      	bne.n	7846 <xQueueGenericSend+0x266>
    783e:	6a3b      	ldr	r3, [r7, #32]
    7840:	2244      	movs	r2, #68	; 0x44
    7842:	2100      	movs	r1, #0
    7844:	5499      	strb	r1, [r3, r2]
    7846:	6a3b      	ldr	r3, [r7, #32]
    7848:	2245      	movs	r2, #69	; 0x45
    784a:	5c9b      	ldrb	r3, [r3, r2]
    784c:	b25b      	sxtb	r3, r3
    784e:	3301      	adds	r3, #1
    7850:	d103      	bne.n	785a <xQueueGenericSend+0x27a>
    7852:	6a3b      	ldr	r3, [r7, #32]
    7854:	2245      	movs	r2, #69	; 0x45
    7856:	2100      	movs	r1, #0
    7858:	5499      	strb	r1, [r3, r2]
    785a:	4b43      	ldr	r3, [pc, #268]	; (7968 <xQueueGenericSend+0x388>)
    785c:	4798      	blx	r3

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
    785e:	1d3a      	adds	r2, r7, #4
    7860:	2314      	movs	r3, #20
    7862:	18fb      	adds	r3, r7, r3
    7864:	0011      	movs	r1, r2
    7866:	0018      	movs	r0, r3
    7868:	4b42      	ldr	r3, [pc, #264]	; (7974 <xQueueGenericSend+0x394>)
    786a:	4798      	blx	r3
    786c:	1e03      	subs	r3, r0, #0
    786e:	d000      	beq.n	7872 <xQueueGenericSend+0x292>
    7870:	e08a      	b.n	7988 <xQueueGenericSend+0x3a8>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
    7872:	6a3b      	ldr	r3, [r7, #32]
    7874:	0018      	movs	r0, r3
    7876:	4b40      	ldr	r3, [pc, #256]	; (7978 <xQueueGenericSend+0x398>)
    7878:	4798      	blx	r3
    787a:	1e03      	subs	r3, r0, #0
    787c:	d04f      	beq.n	791e <xQueueGenericSend+0x33e>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
    787e:	4b2d      	ldr	r3, [pc, #180]	; (7934 <xQueueGenericSend+0x354>)
    7880:	4798      	blx	r3
    7882:	0003      	movs	r3, r0
    7884:	0018      	movs	r0, r3
    7886:	4b2c      	ldr	r3, [pc, #176]	; (7938 <xQueueGenericSend+0x358>)
    7888:	4798      	blx	r3
    788a:	0003      	movs	r3, r0
    788c:	001a      	movs	r2, r3
    788e:	4b2b      	ldr	r3, [pc, #172]	; (793c <xQueueGenericSend+0x35c>)
    7890:	881b      	ldrh	r3, [r3, #0]
    7892:	4013      	ands	r3, r2
    7894:	b29b      	uxth	r3, r3
    7896:	2b00      	cmp	r3, #0
    7898:	d02e      	beq.n	78f8 <xQueueGenericSend+0x318>
    789a:	6a3b      	ldr	r3, [r7, #32]
    789c:	0018      	movs	r0, r3
    789e:	4b28      	ldr	r3, [pc, #160]	; (7940 <xQueueGenericSend+0x360>)
    78a0:	4798      	blx	r3
    78a2:	0003      	movs	r3, r0
    78a4:	001a      	movs	r2, r3
    78a6:	4b25      	ldr	r3, [pc, #148]	; (793c <xQueueGenericSend+0x35c>)
    78a8:	881b      	ldrh	r3, [r3, #0]
    78aa:	4013      	ands	r3, r2
    78ac:	b29b      	uxth	r3, r3
    78ae:	2b00      	cmp	r3, #0
    78b0:	d022      	beq.n	78f8 <xQueueGenericSend+0x318>
    78b2:	683b      	ldr	r3, [r7, #0]
    78b4:	2b00      	cmp	r3, #0
    78b6:	d10b      	bne.n	78d0 <xQueueGenericSend+0x2f0>
    78b8:	6a3b      	ldr	r3, [r7, #32]
    78ba:	0018      	movs	r0, r3
    78bc:	4b21      	ldr	r3, [pc, #132]	; (7944 <xQueueGenericSend+0x364>)
    78be:	4798      	blx	r3
    78c0:	0003      	movs	r3, r0
    78c2:	001a      	movs	r2, r3
    78c4:	4b20      	ldr	r3, [pc, #128]	; (7948 <xQueueGenericSend+0x368>)
    78c6:	5c9b      	ldrb	r3, [r3, r2]
    78c8:	3370      	adds	r3, #112	; 0x70
    78ca:	b2db      	uxtb	r3, r3
    78cc:	001d      	movs	r5, r3
    78ce:	e000      	b.n	78d2 <xQueueGenericSend+0x2f2>
    78d0:	2575      	movs	r5, #117	; 0x75
    78d2:	6a3b      	ldr	r3, [r7, #32]
    78d4:	0018      	movs	r0, r3
    78d6:	4b1b      	ldr	r3, [pc, #108]	; (7944 <xQueueGenericSend+0x364>)
    78d8:	4798      	blx	r3
    78da:	0003      	movs	r3, r0
    78dc:	001a      	movs	r2, r3
    78de:	4b1a      	ldr	r3, [pc, #104]	; (7948 <xQueueGenericSend+0x368>)
    78e0:	5c9c      	ldrb	r4, [r3, r2]
    78e2:	6a3b      	ldr	r3, [r7, #32]
    78e4:	0018      	movs	r0, r3
    78e6:	4b19      	ldr	r3, [pc, #100]	; (794c <xQueueGenericSend+0x36c>)
    78e8:	4798      	blx	r3
    78ea:	0003      	movs	r3, r0
    78ec:	b2db      	uxtb	r3, r3
    78ee:	001a      	movs	r2, r3
    78f0:	0021      	movs	r1, r4
    78f2:	0028      	movs	r0, r5
    78f4:	4b16      	ldr	r3, [pc, #88]	; (7950 <xQueueGenericSend+0x370>)
    78f6:	4798      	blx	r3
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
    78f8:	6a3b      	ldr	r3, [r7, #32]
    78fa:	3310      	adds	r3, #16
    78fc:	687a      	ldr	r2, [r7, #4]
    78fe:	0011      	movs	r1, r2
    7900:	0018      	movs	r0, r3
    7902:	4b1e      	ldr	r3, [pc, #120]	; (797c <xQueueGenericSend+0x39c>)
    7904:	4798      	blx	r3
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
    7906:	6a3b      	ldr	r3, [r7, #32]
    7908:	0018      	movs	r0, r3
    790a:	4b1d      	ldr	r3, [pc, #116]	; (7980 <xQueueGenericSend+0x3a0>)
    790c:	4798      	blx	r3
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
    790e:	4b1d      	ldr	r3, [pc, #116]	; (7984 <xQueueGenericSend+0x3a4>)
    7910:	4798      	blx	r3
    7912:	1e03      	subs	r3, r0, #0
    7914:	d000      	beq.n	7918 <xQueueGenericSend+0x338>
    7916:	e69d      	b.n	7654 <xQueueGenericSend+0x74>
				{
					portYIELD_WITHIN_API();
    7918:	4b11      	ldr	r3, [pc, #68]	; (7960 <xQueueGenericSend+0x380>)
    791a:	4798      	blx	r3
    791c:	e69a      	b.n	7654 <xQueueGenericSend+0x74>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
    791e:	6a3b      	ldr	r3, [r7, #32]
    7920:	0018      	movs	r0, r3
    7922:	4b17      	ldr	r3, [pc, #92]	; (7980 <xQueueGenericSend+0x3a0>)
    7924:	4798      	blx	r3
				( void ) xTaskResumeAll();
    7926:	4b17      	ldr	r3, [pc, #92]	; (7984 <xQueueGenericSend+0x3a4>)
    7928:	4798      	blx	r3
    792a:	e693      	b.n	7654 <xQueueGenericSend+0x74>
    792c:	00009d6d 	.word	0x00009d6d
    7930:	00007049 	.word	0x00007049
    7934:	000052e1 	.word	0x000052e1
    7938:	00005045 	.word	0x00005045
    793c:	20000100 	.word	0x20000100
    7940:	00005105 	.word	0x00005105
    7944:	00005005 	.word	0x00005005
    7948:	200000f4 	.word	0x200000f4
    794c:	000050e5 	.word	0x000050e5
    7950:	00005a3d 	.word	0x00005a3d
    7954:	00006099 	.word	0x00006099
    7958:	00008819 	.word	0x00008819
    795c:	00008b1d 	.word	0x00008b1d
    7960:	00007031 	.word	0x00007031
    7964:	000098dd 	.word	0x000098dd
    7968:	0000706d 	.word	0x0000706d
    796c:	00009a1d 	.word	0x00009a1d
    7970:	00009305 	.word	0x00009305
    7974:	00009a45 	.word	0x00009a45
    7978:	00008a6d 	.word	0x00008a6d
    797c:	000097b9 	.word	0x000097b9
    7980:	00008949 	.word	0x00008949
    7984:	0000931d 	.word	0x0000931d
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
    7988:	6a3b      	ldr	r3, [r7, #32]
    798a:	0018      	movs	r0, r3
    798c:	4b22      	ldr	r3, [pc, #136]	; (7a18 <xQueueGenericSend+0x438>)
    798e:	4798      	blx	r3
			( void ) xTaskResumeAll();
    7990:	4b22      	ldr	r3, [pc, #136]	; (7a1c <xQueueGenericSend+0x43c>)
    7992:	4798      	blx	r3

			traceQUEUE_SEND_FAILED( pxQueue );
    7994:	4b22      	ldr	r3, [pc, #136]	; (7a20 <xQueueGenericSend+0x440>)
    7996:	4798      	blx	r3
    7998:	0003      	movs	r3, r0
    799a:	0018      	movs	r0, r3
    799c:	4b21      	ldr	r3, [pc, #132]	; (7a24 <xQueueGenericSend+0x444>)
    799e:	4798      	blx	r3
    79a0:	0003      	movs	r3, r0
    79a2:	001a      	movs	r2, r3
    79a4:	4b20      	ldr	r3, [pc, #128]	; (7a28 <xQueueGenericSend+0x448>)
    79a6:	881b      	ldrh	r3, [r3, #0]
    79a8:	4013      	ands	r3, r2
    79aa:	b29b      	uxth	r3, r3
    79ac:	2b00      	cmp	r3, #0
    79ae:	d02e      	beq.n	7a0e <xQueueGenericSend+0x42e>
    79b0:	6a3b      	ldr	r3, [r7, #32]
    79b2:	0018      	movs	r0, r3
    79b4:	4b1d      	ldr	r3, [pc, #116]	; (7a2c <xQueueGenericSend+0x44c>)
    79b6:	4798      	blx	r3
    79b8:	0003      	movs	r3, r0
    79ba:	001a      	movs	r2, r3
    79bc:	4b1a      	ldr	r3, [pc, #104]	; (7a28 <xQueueGenericSend+0x448>)
    79be:	881b      	ldrh	r3, [r3, #0]
    79c0:	4013      	ands	r3, r2
    79c2:	b29b      	uxth	r3, r3
    79c4:	2b00      	cmp	r3, #0
    79c6:	d022      	beq.n	7a0e <xQueueGenericSend+0x42e>
    79c8:	683b      	ldr	r3, [r7, #0]
    79ca:	2b00      	cmp	r3, #0
    79cc:	d10b      	bne.n	79e6 <xQueueGenericSend+0x406>
    79ce:	6a3b      	ldr	r3, [r7, #32]
    79d0:	0018      	movs	r0, r3
    79d2:	4b17      	ldr	r3, [pc, #92]	; (7a30 <xQueueGenericSend+0x450>)
    79d4:	4798      	blx	r3
    79d6:	0003      	movs	r3, r0
    79d8:	001a      	movs	r2, r3
    79da:	4b16      	ldr	r3, [pc, #88]	; (7a34 <xQueueGenericSend+0x454>)
    79dc:	5c9b      	ldrb	r3, [r3, r2]
    79de:	3348      	adds	r3, #72	; 0x48
    79e0:	b2db      	uxtb	r3, r3
    79e2:	001d      	movs	r5, r3
    79e4:	e000      	b.n	79e8 <xQueueGenericSend+0x408>
    79e6:	254d      	movs	r5, #77	; 0x4d
    79e8:	6a3b      	ldr	r3, [r7, #32]
    79ea:	0018      	movs	r0, r3
    79ec:	4b10      	ldr	r3, [pc, #64]	; (7a30 <xQueueGenericSend+0x450>)
    79ee:	4798      	blx	r3
    79f0:	0003      	movs	r3, r0
    79f2:	001a      	movs	r2, r3
    79f4:	4b0f      	ldr	r3, [pc, #60]	; (7a34 <xQueueGenericSend+0x454>)
    79f6:	5c9c      	ldrb	r4, [r3, r2]
    79f8:	6a3b      	ldr	r3, [r7, #32]
    79fa:	0018      	movs	r0, r3
    79fc:	4b0e      	ldr	r3, [pc, #56]	; (7a38 <xQueueGenericSend+0x458>)
    79fe:	4798      	blx	r3
    7a00:	0003      	movs	r3, r0
    7a02:	b2db      	uxtb	r3, r3
    7a04:	001a      	movs	r2, r3
    7a06:	0021      	movs	r1, r4
    7a08:	0028      	movs	r0, r5
    7a0a:	4b0c      	ldr	r3, [pc, #48]	; (7a3c <xQueueGenericSend+0x45c>)
    7a0c:	4798      	blx	r3
			return errQUEUE_FULL;
    7a0e:	2300      	movs	r3, #0
		}
	}
}
    7a10:	0018      	movs	r0, r3
    7a12:	46bd      	mov	sp, r7
    7a14:	b00a      	add	sp, #40	; 0x28
    7a16:	bdb0      	pop	{r4, r5, r7, pc}
    7a18:	00008949 	.word	0x00008949
    7a1c:	0000931d 	.word	0x0000931d
    7a20:	000052e1 	.word	0x000052e1
    7a24:	00005045 	.word	0x00005045
    7a28:	20000100 	.word	0x20000100
    7a2c:	00005105 	.word	0x00005105
    7a30:	00005005 	.word	0x00005005
    7a34:	200000f4 	.word	0x200000f4
    7a38:	000050e5 	.word	0x000050e5
    7a3c:	00005a3d 	.word	0x00005a3d

00007a40 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
    7a40:	b5b0      	push	{r4, r5, r7, lr}
    7a42:	b088      	sub	sp, #32
    7a44:	af00      	add	r7, sp, #0
    7a46:	60f8      	str	r0, [r7, #12]
    7a48:	60b9      	str	r1, [r7, #8]
    7a4a:	607a      	str	r2, [r7, #4]
    7a4c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
    7a4e:	68fb      	ldr	r3, [r7, #12]
    7a50:	61bb      	str	r3, [r7, #24]

	configASSERT( pxQueue );
    7a52:	69bb      	ldr	r3, [r7, #24]
    7a54:	2b00      	cmp	r3, #0
    7a56:	d101      	bne.n	7a5c <xQueueGenericSendFromISR+0x1c>
    7a58:	b672      	cpsid	i
    7a5a:	e7fe      	b.n	7a5a <xQueueGenericSendFromISR+0x1a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
    7a5c:	68bb      	ldr	r3, [r7, #8]
    7a5e:	2b00      	cmp	r3, #0
    7a60:	d103      	bne.n	7a6a <xQueueGenericSendFromISR+0x2a>
    7a62:	69bb      	ldr	r3, [r7, #24]
    7a64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    7a66:	2b00      	cmp	r3, #0
    7a68:	d101      	bne.n	7a6e <xQueueGenericSendFromISR+0x2e>
    7a6a:	2301      	movs	r3, #1
    7a6c:	e000      	b.n	7a70 <xQueueGenericSendFromISR+0x30>
    7a6e:	2300      	movs	r3, #0
    7a70:	2b00      	cmp	r3, #0
    7a72:	d101      	bne.n	7a78 <xQueueGenericSendFromISR+0x38>
    7a74:	b672      	cpsid	i
    7a76:	e7fe      	b.n	7a76 <xQueueGenericSendFromISR+0x36>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
    7a78:	683b      	ldr	r3, [r7, #0]
    7a7a:	2b02      	cmp	r3, #2
    7a7c:	d103      	bne.n	7a86 <xQueueGenericSendFromISR+0x46>
    7a7e:	69bb      	ldr	r3, [r7, #24]
    7a80:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    7a82:	2b01      	cmp	r3, #1
    7a84:	d101      	bne.n	7a8a <xQueueGenericSendFromISR+0x4a>
    7a86:	2301      	movs	r3, #1
    7a88:	e000      	b.n	7a8c <xQueueGenericSendFromISR+0x4c>
    7a8a:	2300      	movs	r3, #0
    7a8c:	2b00      	cmp	r3, #0
    7a8e:	d101      	bne.n	7a94 <xQueueGenericSendFromISR+0x54>
    7a90:	b672      	cpsid	i
    7a92:	e7fe      	b.n	7a92 <xQueueGenericSendFromISR+0x52>
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
    7a94:	4b68      	ldr	r3, [pc, #416]	; (7c38 <xQueueGenericSendFromISR+0x1f8>)
    7a96:	4798      	blx	r3
    7a98:	0003      	movs	r3, r0
    7a9a:	617b      	str	r3, [r7, #20]
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
    7a9c:	69bb      	ldr	r3, [r7, #24]
    7a9e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    7aa0:	69bb      	ldr	r3, [r7, #24]
    7aa2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    7aa4:	429a      	cmp	r2, r3
    7aa6:	d303      	bcc.n	7ab0 <xQueueGenericSendFromISR+0x70>
    7aa8:	683b      	ldr	r3, [r7, #0]
    7aaa:	2b02      	cmp	r3, #2
    7aac:	d000      	beq.n	7ab0 <xQueueGenericSendFromISR+0x70>
    7aae:	e088      	b.n	7bc2 <xQueueGenericSendFromISR+0x182>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
    7ab0:	2313      	movs	r3, #19
    7ab2:	18fb      	adds	r3, r7, r3
    7ab4:	69ba      	ldr	r2, [r7, #24]
    7ab6:	2145      	movs	r1, #69	; 0x45
    7ab8:	5c52      	ldrb	r2, [r2, r1]
    7aba:	701a      	strb	r2, [r3, #0]

			traceQUEUE_SEND_FROM_ISR( pxQueue );
    7abc:	69bb      	ldr	r3, [r7, #24]
    7abe:	0018      	movs	r0, r3
    7ac0:	4b5e      	ldr	r3, [pc, #376]	; (7c3c <xQueueGenericSendFromISR+0x1fc>)
    7ac2:	4798      	blx	r3
    7ac4:	0003      	movs	r3, r0
    7ac6:	001a      	movs	r2, r3
    7ac8:	4b5d      	ldr	r3, [pc, #372]	; (7c40 <xQueueGenericSendFromISR+0x200>)
    7aca:	881b      	ldrh	r3, [r3, #0]
    7acc:	4013      	ands	r3, r2
    7ace:	b29b      	uxth	r3, r3
    7ad0:	2b00      	cmp	r3, #0
    7ad2:	d022      	beq.n	7b1a <xQueueGenericSendFromISR+0xda>
    7ad4:	683b      	ldr	r3, [r7, #0]
    7ad6:	2b00      	cmp	r3, #0
    7ad8:	d10b      	bne.n	7af2 <xQueueGenericSendFromISR+0xb2>
    7ada:	69bb      	ldr	r3, [r7, #24]
    7adc:	0018      	movs	r0, r3
    7ade:	4b59      	ldr	r3, [pc, #356]	; (7c44 <xQueueGenericSendFromISR+0x204>)
    7ae0:	4798      	blx	r3
    7ae2:	0003      	movs	r3, r0
    7ae4:	001a      	movs	r2, r3
    7ae6:	4b58      	ldr	r3, [pc, #352]	; (7c48 <xQueueGenericSendFromISR+0x208>)
    7ae8:	5c9b      	ldrb	r3, [r3, r2]
    7aea:	3330      	adds	r3, #48	; 0x30
    7aec:	b2db      	uxtb	r3, r3
    7aee:	001d      	movs	r5, r3
    7af0:	e000      	b.n	7af4 <xQueueGenericSendFromISR+0xb4>
    7af2:	2535      	movs	r5, #53	; 0x35
    7af4:	69bb      	ldr	r3, [r7, #24]
    7af6:	0018      	movs	r0, r3
    7af8:	4b52      	ldr	r3, [pc, #328]	; (7c44 <xQueueGenericSendFromISR+0x204>)
    7afa:	4798      	blx	r3
    7afc:	0003      	movs	r3, r0
    7afe:	001a      	movs	r2, r3
    7b00:	4b51      	ldr	r3, [pc, #324]	; (7c48 <xQueueGenericSendFromISR+0x208>)
    7b02:	5c9c      	ldrb	r4, [r3, r2]
    7b04:	69bb      	ldr	r3, [r7, #24]
    7b06:	0018      	movs	r0, r3
    7b08:	4b50      	ldr	r3, [pc, #320]	; (7c4c <xQueueGenericSendFromISR+0x20c>)
    7b0a:	4798      	blx	r3
    7b0c:	0003      	movs	r3, r0
    7b0e:	b2db      	uxtb	r3, r3
    7b10:	001a      	movs	r2, r3
    7b12:	0021      	movs	r1, r4
    7b14:	0028      	movs	r0, r5
    7b16:	4b4e      	ldr	r3, [pc, #312]	; (7c50 <xQueueGenericSendFromISR+0x210>)
    7b18:	4798      	blx	r3
    7b1a:	69bb      	ldr	r3, [r7, #24]
    7b1c:	0018      	movs	r0, r3
    7b1e:	4b49      	ldr	r3, [pc, #292]	; (7c44 <xQueueGenericSendFromISR+0x204>)
    7b20:	4798      	blx	r3
    7b22:	0003      	movs	r3, r0
    7b24:	001a      	movs	r2, r3
    7b26:	4b48      	ldr	r3, [pc, #288]	; (7c48 <xQueueGenericSendFromISR+0x208>)
    7b28:	5c9c      	ldrb	r4, [r3, r2]
    7b2a:	69bb      	ldr	r3, [r7, #24]
    7b2c:	0018      	movs	r0, r3
    7b2e:	4b47      	ldr	r3, [pc, #284]	; (7c4c <xQueueGenericSendFromISR+0x20c>)
    7b30:	4798      	blx	r3
    7b32:	0003      	movs	r3, r0
    7b34:	b2d9      	uxtb	r1, r3
    7b36:	69bb      	ldr	r3, [r7, #24]
    7b38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    7b3a:	b2db      	uxtb	r3, r3
    7b3c:	3301      	adds	r3, #1
    7b3e:	b2db      	uxtb	r3, r3
    7b40:	001a      	movs	r2, r3
    7b42:	0020      	movs	r0, r4
    7b44:	4b43      	ldr	r3, [pc, #268]	; (7c54 <xQueueGenericSendFromISR+0x214>)
    7b46:	4798      	blx	r3
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
    7b48:	683a      	ldr	r2, [r7, #0]
    7b4a:	68b9      	ldr	r1, [r7, #8]
    7b4c:	69bb      	ldr	r3, [r7, #24]
    7b4e:	0018      	movs	r0, r3
    7b50:	4b41      	ldr	r3, [pc, #260]	; (7c58 <xQueueGenericSendFromISR+0x218>)
    7b52:	4798      	blx	r3

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
    7b54:	2313      	movs	r3, #19
    7b56:	18fb      	adds	r3, r7, r3
    7b58:	781b      	ldrb	r3, [r3, #0]
    7b5a:	b25b      	sxtb	r3, r3
    7b5c:	3301      	adds	r3, #1
    7b5e:	d124      	bne.n	7baa <xQueueGenericSendFromISR+0x16a>
			{
				#if ( configUSE_QUEUE_SETS == 1 )
				{
					if( pxQueue->pxQueueSetContainer != NULL )
    7b60:	69bb      	ldr	r3, [r7, #24]
    7b62:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    7b64:	2b00      	cmp	r3, #0
    7b66:	d00e      	beq.n	7b86 <xQueueGenericSendFromISR+0x146>
					{
						if( prvNotifyQueueSetContainer( pxQueue, xCopyPosition ) != pdFALSE )
    7b68:	683a      	ldr	r2, [r7, #0]
    7b6a:	69bb      	ldr	r3, [r7, #24]
    7b6c:	0011      	movs	r1, r2
    7b6e:	0018      	movs	r0, r3
    7b70:	4b3a      	ldr	r3, [pc, #232]	; (7c5c <xQueueGenericSendFromISR+0x21c>)
    7b72:	4798      	blx	r3
    7b74:	1e03      	subs	r3, r0, #0
    7b76:	d021      	beq.n	7bbc <xQueueGenericSendFromISR+0x17c>
						{
							/* The queue is a member of a queue set, and posting
							to the queue set caused a higher priority task to
							unblock.  A context switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
    7b78:	687b      	ldr	r3, [r7, #4]
    7b7a:	2b00      	cmp	r3, #0
    7b7c:	d01e      	beq.n	7bbc <xQueueGenericSendFromISR+0x17c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
    7b7e:	687b      	ldr	r3, [r7, #4]
    7b80:	2201      	movs	r2, #1
    7b82:	601a      	str	r2, [r3, #0]
    7b84:	e01a      	b.n	7bbc <xQueueGenericSendFromISR+0x17c>
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else
					{
						if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    7b86:	69bb      	ldr	r3, [r7, #24]
    7b88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    7b8a:	2b00      	cmp	r3, #0
    7b8c:	d016      	beq.n	7bbc <xQueueGenericSendFromISR+0x17c>
						{
							if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
    7b8e:	69bb      	ldr	r3, [r7, #24]
    7b90:	3324      	adds	r3, #36	; 0x24
    7b92:	0018      	movs	r0, r3
    7b94:	4b32      	ldr	r3, [pc, #200]	; (7c60 <xQueueGenericSendFromISR+0x220>)
    7b96:	4798      	blx	r3
    7b98:	1e03      	subs	r3, r0, #0
    7b9a:	d00f      	beq.n	7bbc <xQueueGenericSendFromISR+0x17c>
							{
								/* The task waiting has a higher priority so
								record that a context switch is required. */
								if( pxHigherPriorityTaskWoken != NULL )
    7b9c:	687b      	ldr	r3, [r7, #4]
    7b9e:	2b00      	cmp	r3, #0
    7ba0:	d00c      	beq.n	7bbc <xQueueGenericSendFromISR+0x17c>
								{
									*pxHigherPriorityTaskWoken = pdTRUE;
    7ba2:	687b      	ldr	r3, [r7, #4]
    7ba4:	2201      	movs	r2, #1
    7ba6:	601a      	str	r2, [r3, #0]
    7ba8:	e008      	b.n	7bbc <xQueueGenericSendFromISR+0x17c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
    7baa:	2313      	movs	r3, #19
    7bac:	18fb      	adds	r3, r7, r3
    7bae:	781b      	ldrb	r3, [r3, #0]
    7bb0:	3301      	adds	r3, #1
    7bb2:	b2db      	uxtb	r3, r3
    7bb4:	b259      	sxtb	r1, r3
    7bb6:	69bb      	ldr	r3, [r7, #24]
    7bb8:	2245      	movs	r2, #69	; 0x45
    7bba:	5499      	strb	r1, [r3, r2]
			}

			xReturn = pdPASS;
    7bbc:	2301      	movs	r3, #1
    7bbe:	61fb      	str	r3, [r7, #28]
		{
    7bc0:	e030      	b.n	7c24 <xQueueGenericSendFromISR+0x1e4>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
    7bc2:	69bb      	ldr	r3, [r7, #24]
    7bc4:	0018      	movs	r0, r3
    7bc6:	4b1d      	ldr	r3, [pc, #116]	; (7c3c <xQueueGenericSendFromISR+0x1fc>)
    7bc8:	4798      	blx	r3
    7bca:	0003      	movs	r3, r0
    7bcc:	001a      	movs	r2, r3
    7bce:	4b1c      	ldr	r3, [pc, #112]	; (7c40 <xQueueGenericSendFromISR+0x200>)
    7bd0:	881b      	ldrh	r3, [r3, #0]
    7bd2:	4013      	ands	r3, r2
    7bd4:	b29b      	uxth	r3, r3
    7bd6:	2b00      	cmp	r3, #0
    7bd8:	d022      	beq.n	7c20 <xQueueGenericSendFromISR+0x1e0>
    7bda:	683b      	ldr	r3, [r7, #0]
    7bdc:	2b00      	cmp	r3, #0
    7bde:	d10b      	bne.n	7bf8 <xQueueGenericSendFromISR+0x1b8>
    7be0:	69bb      	ldr	r3, [r7, #24]
    7be2:	0018      	movs	r0, r3
    7be4:	4b17      	ldr	r3, [pc, #92]	; (7c44 <xQueueGenericSendFromISR+0x204>)
    7be6:	4798      	blx	r3
    7be8:	0003      	movs	r3, r0
    7bea:	001a      	movs	r2, r3
    7bec:	4b16      	ldr	r3, [pc, #88]	; (7c48 <xQueueGenericSendFromISR+0x208>)
    7bee:	5c9b      	ldrb	r3, [r3, r2]
    7bf0:	3358      	adds	r3, #88	; 0x58
    7bf2:	b2db      	uxtb	r3, r3
    7bf4:	001d      	movs	r5, r3
    7bf6:	e000      	b.n	7bfa <xQueueGenericSendFromISR+0x1ba>
    7bf8:	255d      	movs	r5, #93	; 0x5d
    7bfa:	69bb      	ldr	r3, [r7, #24]
    7bfc:	0018      	movs	r0, r3
    7bfe:	4b11      	ldr	r3, [pc, #68]	; (7c44 <xQueueGenericSendFromISR+0x204>)
    7c00:	4798      	blx	r3
    7c02:	0003      	movs	r3, r0
    7c04:	001a      	movs	r2, r3
    7c06:	4b10      	ldr	r3, [pc, #64]	; (7c48 <xQueueGenericSendFromISR+0x208>)
    7c08:	5c9c      	ldrb	r4, [r3, r2]
    7c0a:	69bb      	ldr	r3, [r7, #24]
    7c0c:	0018      	movs	r0, r3
    7c0e:	4b0f      	ldr	r3, [pc, #60]	; (7c4c <xQueueGenericSendFromISR+0x20c>)
    7c10:	4798      	blx	r3
    7c12:	0003      	movs	r3, r0
    7c14:	b2db      	uxtb	r3, r3
    7c16:	001a      	movs	r2, r3
    7c18:	0021      	movs	r1, r4
    7c1a:	0028      	movs	r0, r5
    7c1c:	4b0c      	ldr	r3, [pc, #48]	; (7c50 <xQueueGenericSendFromISR+0x210>)
    7c1e:	4798      	blx	r3
			xReturn = errQUEUE_FULL;
    7c20:	2300      	movs	r3, #0
    7c22:	61fb      	str	r3, [r7, #28]
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
    7c24:	697b      	ldr	r3, [r7, #20]
    7c26:	0018      	movs	r0, r3
    7c28:	4b0e      	ldr	r3, [pc, #56]	; (7c64 <xQueueGenericSendFromISR+0x224>)
    7c2a:	4798      	blx	r3

	return xReturn;
    7c2c:	69fb      	ldr	r3, [r7, #28]
}
    7c2e:	0018      	movs	r0, r3
    7c30:	46bd      	mov	sp, r7
    7c32:	b008      	add	sp, #32
    7c34:	bdb0      	pop	{r4, r5, r7, pc}
    7c36:	46c0      	nop			; (mov r8, r8)
    7c38:	0000709d 	.word	0x0000709d
    7c3c:	00005105 	.word	0x00005105
    7c40:	20000100 	.word	0x20000100
    7c44:	00005005 	.word	0x00005005
    7c48:	200000f4 	.word	0x200000f4
    7c4c:	000050e5 	.word	0x000050e5
    7c50:	00005a3d 	.word	0x00005a3d
    7c54:	00006099 	.word	0x00006099
    7c58:	00008819 	.word	0x00008819
    7c5c:	00008b1d 	.word	0x00008b1d
    7c60:	000098dd 	.word	0x000098dd
    7c64:	000070a9 	.word	0x000070a9

00007c68 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
    7c68:	b580      	push	{r7, lr}
    7c6a:	b082      	sub	sp, #8
    7c6c:	af00      	add	r7, sp, #0
    7c6e:	6078      	str	r0, [r7, #4]
    7c70:	6039      	str	r1, [r7, #0]
    7c72:	6839      	ldr	r1, [r7, #0]
    7c74:	687b      	ldr	r3, [r7, #4]
    7c76:	2200      	movs	r2, #0
    7c78:	0018      	movs	r0, r3
    7c7a:	4b03      	ldr	r3, [pc, #12]	; (7c88 <xQueueGiveFromISR+0x20>)
    7c7c:	4798      	blx	r3
    7c7e:	0003      	movs	r3, r0
    7c80:	0018      	movs	r0, r3
    7c82:	46bd      	mov	sp, r7
    7c84:	b002      	add	sp, #8
    7c86:	bd80      	pop	{r7, pc}
    7c88:	00007c8d 	.word	0x00007c8d

00007c8c <MyWrapper>:
{
    7c8c:	b5b0      	push	{r4, r5, r7, lr}
    7c8e:	b08a      	sub	sp, #40	; 0x28
    7c90:	af00      	add	r7, sp, #0
    7c92:	60f8      	str	r0, [r7, #12]
    7c94:	60b9      	str	r1, [r7, #8]
    7c96:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
    7c98:	68fb      	ldr	r3, [r7, #12]
    7c9a:	623b      	str	r3, [r7, #32]
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
    7c9c:	6a3b      	ldr	r3, [r7, #32]
    7c9e:	2b00      	cmp	r3, #0
    7ca0:	d101      	bne.n	7ca6 <MyWrapper+0x1a>
    7ca2:	b672      	cpsid	i
    7ca4:	e7fe      	b.n	7ca4 <MyWrapper+0x18>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
    7ca6:	6a3b      	ldr	r3, [r7, #32]
    7ca8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    7caa:	2b00      	cmp	r3, #0
    7cac:	d001      	beq.n	7cb2 <MyWrapper+0x26>
    7cae:	b672      	cpsid	i
    7cb0:	e7fe      	b.n	7cb0 <MyWrapper+0x24>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->pxMutexHolder != NULL ) ) );
    7cb2:	6a3b      	ldr	r3, [r7, #32]
    7cb4:	681b      	ldr	r3, [r3, #0]
    7cb6:	2b00      	cmp	r3, #0
    7cb8:	d103      	bne.n	7cc2 <MyWrapper+0x36>
    7cba:	6a3b      	ldr	r3, [r7, #32]
    7cbc:	685b      	ldr	r3, [r3, #4]
    7cbe:	2b00      	cmp	r3, #0
    7cc0:	d101      	bne.n	7cc6 <MyWrapper+0x3a>
    7cc2:	2301      	movs	r3, #1
    7cc4:	e000      	b.n	7cc8 <MyWrapper+0x3c>
    7cc6:	2300      	movs	r3, #0
    7cc8:	2b00      	cmp	r3, #0
    7cca:	d101      	bne.n	7cd0 <MyWrapper+0x44>
    7ccc:	b672      	cpsid	i
    7cce:	e7fe      	b.n	7cce <MyWrapper+0x42>
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
    7cd0:	4b66      	ldr	r3, [pc, #408]	; (7e6c <MyWrapper+0x1e0>)
    7cd2:	4798      	blx	r3
    7cd4:	0003      	movs	r3, r0
    7cd6:	61fb      	str	r3, [r7, #28]
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
    7cd8:	6a3b      	ldr	r3, [r7, #32]
    7cda:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    7cdc:	61bb      	str	r3, [r7, #24]

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
    7cde:	6a3b      	ldr	r3, [r7, #32]
    7ce0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
    7ce2:	69bb      	ldr	r3, [r7, #24]
    7ce4:	429a      	cmp	r2, r3
    7ce6:	d800      	bhi.n	7cea <MyWrapper+0x5e>
    7ce8:	e085      	b.n	7df6 <MyWrapper+0x16a>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
    7cea:	2317      	movs	r3, #23
    7cec:	18fb      	adds	r3, r7, r3
    7cee:	6a3a      	ldr	r2, [r7, #32]
    7cf0:	2145      	movs	r1, #69	; 0x45
    7cf2:	5c52      	ldrb	r2, [r2, r1]
    7cf4:	701a      	strb	r2, [r3, #0]

			traceQUEUE_SEND_FROM_ISR( pxQueue );
    7cf6:	6a3b      	ldr	r3, [r7, #32]
    7cf8:	0018      	movs	r0, r3
    7cfa:	4b5d      	ldr	r3, [pc, #372]	; (7e70 <MyWrapper+0x1e4>)
    7cfc:	4798      	blx	r3
    7cfe:	0003      	movs	r3, r0
    7d00:	001a      	movs	r2, r3
    7d02:	4b5c      	ldr	r3, [pc, #368]	; (7e74 <MyWrapper+0x1e8>)
    7d04:	881b      	ldrh	r3, [r3, #0]
    7d06:	4013      	ands	r3, r2
    7d08:	b29b      	uxth	r3, r3
    7d0a:	2b00      	cmp	r3, #0
    7d0c:	d022      	beq.n	7d54 <MyWrapper+0xc8>
    7d0e:	687b      	ldr	r3, [r7, #4]
    7d10:	2b00      	cmp	r3, #0
    7d12:	d10b      	bne.n	7d2c <MyWrapper+0xa0>
    7d14:	6a3b      	ldr	r3, [r7, #32]
    7d16:	0018      	movs	r0, r3
    7d18:	4b57      	ldr	r3, [pc, #348]	; (7e78 <MyWrapper+0x1ec>)
    7d1a:	4798      	blx	r3
    7d1c:	0003      	movs	r3, r0
    7d1e:	001a      	movs	r2, r3
    7d20:	4b56      	ldr	r3, [pc, #344]	; (7e7c <MyWrapper+0x1f0>)
    7d22:	5c9b      	ldrb	r3, [r3, r2]
    7d24:	3330      	adds	r3, #48	; 0x30
    7d26:	b2db      	uxtb	r3, r3
    7d28:	001d      	movs	r5, r3
    7d2a:	e000      	b.n	7d2e <MyWrapper+0xa2>
    7d2c:	2535      	movs	r5, #53	; 0x35
    7d2e:	6a3b      	ldr	r3, [r7, #32]
    7d30:	0018      	movs	r0, r3
    7d32:	4b51      	ldr	r3, [pc, #324]	; (7e78 <MyWrapper+0x1ec>)
    7d34:	4798      	blx	r3
    7d36:	0003      	movs	r3, r0
    7d38:	001a      	movs	r2, r3
    7d3a:	4b50      	ldr	r3, [pc, #320]	; (7e7c <MyWrapper+0x1f0>)
    7d3c:	5c9c      	ldrb	r4, [r3, r2]
    7d3e:	6a3b      	ldr	r3, [r7, #32]
    7d40:	0018      	movs	r0, r3
    7d42:	4b4f      	ldr	r3, [pc, #316]	; (7e80 <MyWrapper+0x1f4>)
    7d44:	4798      	blx	r3
    7d46:	0003      	movs	r3, r0
    7d48:	b2db      	uxtb	r3, r3
    7d4a:	001a      	movs	r2, r3
    7d4c:	0021      	movs	r1, r4
    7d4e:	0028      	movs	r0, r5
    7d50:	4b4c      	ldr	r3, [pc, #304]	; (7e84 <MyWrapper+0x1f8>)
    7d52:	4798      	blx	r3
    7d54:	6a3b      	ldr	r3, [r7, #32]
    7d56:	0018      	movs	r0, r3
    7d58:	4b47      	ldr	r3, [pc, #284]	; (7e78 <MyWrapper+0x1ec>)
    7d5a:	4798      	blx	r3
    7d5c:	0003      	movs	r3, r0
    7d5e:	001a      	movs	r2, r3
    7d60:	4b46      	ldr	r3, [pc, #280]	; (7e7c <MyWrapper+0x1f0>)
    7d62:	5c9c      	ldrb	r4, [r3, r2]
    7d64:	6a3b      	ldr	r3, [r7, #32]
    7d66:	0018      	movs	r0, r3
    7d68:	4b45      	ldr	r3, [pc, #276]	; (7e80 <MyWrapper+0x1f4>)
    7d6a:	4798      	blx	r3
    7d6c:	0003      	movs	r3, r0
    7d6e:	b2d9      	uxtb	r1, r3
    7d70:	6a3b      	ldr	r3, [r7, #32]
    7d72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    7d74:	b2db      	uxtb	r3, r3
    7d76:	3301      	adds	r3, #1
    7d78:	b2db      	uxtb	r3, r3
    7d7a:	001a      	movs	r2, r3
    7d7c:	0020      	movs	r0, r4
    7d7e:	4b42      	ldr	r3, [pc, #264]	; (7e88 <MyWrapper+0x1fc>)
    7d80:	4798      	blx	r3
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
    7d82:	69bb      	ldr	r3, [r7, #24]
    7d84:	1c5a      	adds	r2, r3, #1
    7d86:	6a3b      	ldr	r3, [r7, #32]
    7d88:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
    7d8a:	2317      	movs	r3, #23
    7d8c:	18fb      	adds	r3, r7, r3
    7d8e:	781b      	ldrb	r3, [r3, #0]
    7d90:	b25b      	sxtb	r3, r3
    7d92:	3301      	adds	r3, #1
    7d94:	d123      	bne.n	7dde <MyWrapper+0x152>
			{
				#if ( configUSE_QUEUE_SETS == 1 )
				{
					if( pxQueue->pxQueueSetContainer != NULL )
    7d96:	6a3b      	ldr	r3, [r7, #32]
    7d98:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    7d9a:	2b00      	cmp	r3, #0
    7d9c:	d00d      	beq.n	7dba <MyWrapper+0x12e>
					{
						if( prvNotifyQueueSetContainer( pxQueue, queueSEND_TO_BACK ) != pdFALSE )
    7d9e:	6a3b      	ldr	r3, [r7, #32]
    7da0:	2100      	movs	r1, #0
    7da2:	0018      	movs	r0, r3
    7da4:	4b39      	ldr	r3, [pc, #228]	; (7e8c <MyWrapper+0x200>)
    7da6:	4798      	blx	r3
    7da8:	1e03      	subs	r3, r0, #0
    7daa:	d021      	beq.n	7df0 <MyWrapper+0x164>
						{
							/* The semaphore is a member of a queue set, and
							posting	to the queue set caused a higher priority
							task to	unblock.  A context switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
    7dac:	68bb      	ldr	r3, [r7, #8]
    7dae:	2b00      	cmp	r3, #0
    7db0:	d01e      	beq.n	7df0 <MyWrapper+0x164>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
    7db2:	68bb      	ldr	r3, [r7, #8]
    7db4:	2201      	movs	r2, #1
    7db6:	601a      	str	r2, [r3, #0]
    7db8:	e01a      	b.n	7df0 <MyWrapper+0x164>
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else
					{
						if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    7dba:	6a3b      	ldr	r3, [r7, #32]
    7dbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    7dbe:	2b00      	cmp	r3, #0
    7dc0:	d016      	beq.n	7df0 <MyWrapper+0x164>
						{
							if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
    7dc2:	6a3b      	ldr	r3, [r7, #32]
    7dc4:	3324      	adds	r3, #36	; 0x24
    7dc6:	0018      	movs	r0, r3
    7dc8:	4b31      	ldr	r3, [pc, #196]	; (7e90 <MyWrapper+0x204>)
    7dca:	4798      	blx	r3
    7dcc:	1e03      	subs	r3, r0, #0
    7dce:	d00f      	beq.n	7df0 <MyWrapper+0x164>
							{
								/* The task waiting has a higher priority so
								record that a context switch is required. */
								if( pxHigherPriorityTaskWoken != NULL )
    7dd0:	68bb      	ldr	r3, [r7, #8]
    7dd2:	2b00      	cmp	r3, #0
    7dd4:	d00c      	beq.n	7df0 <MyWrapper+0x164>
								{
									*pxHigherPriorityTaskWoken = pdTRUE;
    7dd6:	68bb      	ldr	r3, [r7, #8]
    7dd8:	2201      	movs	r2, #1
    7dda:	601a      	str	r2, [r3, #0]
    7ddc:	e008      	b.n	7df0 <MyWrapper+0x164>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
    7dde:	2317      	movs	r3, #23
    7de0:	18fb      	adds	r3, r7, r3
    7de2:	781b      	ldrb	r3, [r3, #0]
    7de4:	3301      	adds	r3, #1
    7de6:	b2db      	uxtb	r3, r3
    7de8:	b259      	sxtb	r1, r3
    7dea:	6a3b      	ldr	r3, [r7, #32]
    7dec:	2245      	movs	r2, #69	; 0x45
    7dee:	5499      	strb	r1, [r3, r2]
			}

			xReturn = pdPASS;
    7df0:	2301      	movs	r3, #1
    7df2:	627b      	str	r3, [r7, #36]	; 0x24
    7df4:	e030      	b.n	7e58 <MyWrapper+0x1cc>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
    7df6:	6a3b      	ldr	r3, [r7, #32]
    7df8:	0018      	movs	r0, r3
    7dfa:	4b1d      	ldr	r3, [pc, #116]	; (7e70 <MyWrapper+0x1e4>)
    7dfc:	4798      	blx	r3
    7dfe:	0003      	movs	r3, r0
    7e00:	001a      	movs	r2, r3
    7e02:	4b1c      	ldr	r3, [pc, #112]	; (7e74 <MyWrapper+0x1e8>)
    7e04:	881b      	ldrh	r3, [r3, #0]
    7e06:	4013      	ands	r3, r2
    7e08:	b29b      	uxth	r3, r3
    7e0a:	2b00      	cmp	r3, #0
    7e0c:	d022      	beq.n	7e54 <MyWrapper+0x1c8>
    7e0e:	687b      	ldr	r3, [r7, #4]
    7e10:	2b00      	cmp	r3, #0
    7e12:	d10b      	bne.n	7e2c <MyWrapper+0x1a0>
    7e14:	6a3b      	ldr	r3, [r7, #32]
    7e16:	0018      	movs	r0, r3
    7e18:	4b17      	ldr	r3, [pc, #92]	; (7e78 <MyWrapper+0x1ec>)
    7e1a:	4798      	blx	r3
    7e1c:	0003      	movs	r3, r0
    7e1e:	001a      	movs	r2, r3
    7e20:	4b16      	ldr	r3, [pc, #88]	; (7e7c <MyWrapper+0x1f0>)
    7e22:	5c9b      	ldrb	r3, [r3, r2]
    7e24:	3358      	adds	r3, #88	; 0x58
    7e26:	b2db      	uxtb	r3, r3
    7e28:	001d      	movs	r5, r3
    7e2a:	e000      	b.n	7e2e <MyWrapper+0x1a2>
    7e2c:	255d      	movs	r5, #93	; 0x5d
    7e2e:	6a3b      	ldr	r3, [r7, #32]
    7e30:	0018      	movs	r0, r3
    7e32:	4b11      	ldr	r3, [pc, #68]	; (7e78 <MyWrapper+0x1ec>)
    7e34:	4798      	blx	r3
    7e36:	0003      	movs	r3, r0
    7e38:	001a      	movs	r2, r3
    7e3a:	4b10      	ldr	r3, [pc, #64]	; (7e7c <MyWrapper+0x1f0>)
    7e3c:	5c9c      	ldrb	r4, [r3, r2]
    7e3e:	6a3b      	ldr	r3, [r7, #32]
    7e40:	0018      	movs	r0, r3
    7e42:	4b0f      	ldr	r3, [pc, #60]	; (7e80 <MyWrapper+0x1f4>)
    7e44:	4798      	blx	r3
    7e46:	0003      	movs	r3, r0
    7e48:	b2db      	uxtb	r3, r3
    7e4a:	001a      	movs	r2, r3
    7e4c:	0021      	movs	r1, r4
    7e4e:	0028      	movs	r0, r5
    7e50:	4b0c      	ldr	r3, [pc, #48]	; (7e84 <MyWrapper+0x1f8>)
    7e52:	4798      	blx	r3
			xReturn = errQUEUE_FULL;
    7e54:	2300      	movs	r3, #0
    7e56:	627b      	str	r3, [r7, #36]	; 0x24
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
    7e58:	69fb      	ldr	r3, [r7, #28]
    7e5a:	0018      	movs	r0, r3
    7e5c:	4b0d      	ldr	r3, [pc, #52]	; (7e94 <MyWrapper+0x208>)
    7e5e:	4798      	blx	r3

	return xReturn;
    7e60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
    7e62:	0018      	movs	r0, r3
    7e64:	46bd      	mov	sp, r7
    7e66:	b00a      	add	sp, #40	; 0x28
    7e68:	bdb0      	pop	{r4, r5, r7, pc}
    7e6a:	46c0      	nop			; (mov r8, r8)
    7e6c:	0000709d 	.word	0x0000709d
    7e70:	00005105 	.word	0x00005105
    7e74:	20000100 	.word	0x20000100
    7e78:	00005005 	.word	0x00005005
    7e7c:	200000f4 	.word	0x200000f4
    7e80:	000050e5 	.word	0x000050e5
    7e84:	00005a3d 	.word	0x00005a3d
    7e88:	00006099 	.word	0x00006099
    7e8c:	00008b1d 	.word	0x00008b1d
    7e90:	000098dd 	.word	0x000098dd
    7e94:	000070a9 	.word	0x000070a9

00007e98 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
    7e98:	b5b0      	push	{r4, r5, r7, lr}
    7e9a:	b08a      	sub	sp, #40	; 0x28
    7e9c:	af00      	add	r7, sp, #0
    7e9e:	60f8      	str	r0, [r7, #12]
    7ea0:	60b9      	str	r1, [r7, #8]
    7ea2:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
    7ea4:	2300      	movs	r3, #0
    7ea6:	627b      	str	r3, [r7, #36]	; 0x24
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
    7ea8:	68fb      	ldr	r3, [r7, #12]
    7eaa:	623b      	str	r3, [r7, #32]

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
    7eac:	6a3b      	ldr	r3, [r7, #32]
    7eae:	2b00      	cmp	r3, #0
    7eb0:	d101      	bne.n	7eb6 <xQueueReceive+0x1e>
    7eb2:	b672      	cpsid	i
    7eb4:	e7fe      	b.n	7eb4 <xQueueReceive+0x1c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
    7eb6:	68bb      	ldr	r3, [r7, #8]
    7eb8:	2b00      	cmp	r3, #0
    7eba:	d103      	bne.n	7ec4 <xQueueReceive+0x2c>
    7ebc:	6a3b      	ldr	r3, [r7, #32]
    7ebe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    7ec0:	2b00      	cmp	r3, #0
    7ec2:	d101      	bne.n	7ec8 <xQueueReceive+0x30>
    7ec4:	2301      	movs	r3, #1
    7ec6:	e000      	b.n	7eca <xQueueReceive+0x32>
    7ec8:	2300      	movs	r3, #0
    7eca:	2b00      	cmp	r3, #0
    7ecc:	d101      	bne.n	7ed2 <xQueueReceive+0x3a>
    7ece:	b672      	cpsid	i
    7ed0:	e7fe      	b.n	7ed0 <xQueueReceive+0x38>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
    7ed2:	4bbf      	ldr	r3, [pc, #764]	; (81d0 <xQueueReceive+0x338>)
    7ed4:	4798      	blx	r3
    7ed6:	1e03      	subs	r3, r0, #0
    7ed8:	d102      	bne.n	7ee0 <xQueueReceive+0x48>
    7eda:	687b      	ldr	r3, [r7, #4]
    7edc:	2b00      	cmp	r3, #0
    7ede:	d101      	bne.n	7ee4 <xQueueReceive+0x4c>
    7ee0:	2301      	movs	r3, #1
    7ee2:	e000      	b.n	7ee6 <xQueueReceive+0x4e>
    7ee4:	2300      	movs	r3, #0
    7ee6:	2b00      	cmp	r3, #0
    7ee8:	d101      	bne.n	7eee <xQueueReceive+0x56>
    7eea:	b672      	cpsid	i
    7eec:	e7fe      	b.n	7eec <xQueueReceive+0x54>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
    7eee:	4bb9      	ldr	r3, [pc, #740]	; (81d4 <xQueueReceive+0x33c>)
    7ef0:	4798      	blx	r3
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
    7ef2:	6a3b      	ldr	r3, [r7, #32]
    7ef4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    7ef6:	61fb      	str	r3, [r7, #28]

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
    7ef8:	69fb      	ldr	r3, [r7, #28]
    7efa:	2b00      	cmp	r3, #0
    7efc:	d100      	bne.n	7f00 <xQueueReceive+0x68>
    7efe:	e07d      	b.n	7ffc <xQueueReceive+0x164>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
    7f00:	68ba      	ldr	r2, [r7, #8]
    7f02:	6a3b      	ldr	r3, [r7, #32]
    7f04:	0011      	movs	r1, r2
    7f06:	0018      	movs	r0, r3
    7f08:	4bb3      	ldr	r3, [pc, #716]	; (81d8 <xQueueReceive+0x340>)
    7f0a:	4798      	blx	r3
				traceQUEUE_RECEIVE( pxQueue );
    7f0c:	4bb3      	ldr	r3, [pc, #716]	; (81dc <xQueueReceive+0x344>)
    7f0e:	4798      	blx	r3
    7f10:	0003      	movs	r3, r0
    7f12:	0018      	movs	r0, r3
    7f14:	4bb2      	ldr	r3, [pc, #712]	; (81e0 <xQueueReceive+0x348>)
    7f16:	4798      	blx	r3
    7f18:	0003      	movs	r3, r0
    7f1a:	001a      	movs	r2, r3
    7f1c:	4bb1      	ldr	r3, [pc, #708]	; (81e4 <xQueueReceive+0x34c>)
    7f1e:	881b      	ldrh	r3, [r3, #0]
    7f20:	4013      	ands	r3, r2
    7f22:	b29b      	uxth	r3, r3
    7f24:	2b00      	cmp	r3, #0
    7f26:	d029      	beq.n	7f7c <xQueueReceive+0xe4>
    7f28:	6a3b      	ldr	r3, [r7, #32]
    7f2a:	0018      	movs	r0, r3
    7f2c:	4bae      	ldr	r3, [pc, #696]	; (81e8 <xQueueReceive+0x350>)
    7f2e:	4798      	blx	r3
    7f30:	0003      	movs	r3, r0
    7f32:	001a      	movs	r2, r3
    7f34:	4bab      	ldr	r3, [pc, #684]	; (81e4 <xQueueReceive+0x34c>)
    7f36:	881b      	ldrh	r3, [r3, #0]
    7f38:	4013      	ands	r3, r2
    7f3a:	b29b      	uxth	r3, r3
    7f3c:	2b00      	cmp	r3, #0
    7f3e:	d01d      	beq.n	7f7c <xQueueReceive+0xe4>
    7f40:	6a3b      	ldr	r3, [r7, #32]
    7f42:	0018      	movs	r0, r3
    7f44:	4ba9      	ldr	r3, [pc, #676]	; (81ec <xQueueReceive+0x354>)
    7f46:	4798      	blx	r3
    7f48:	0003      	movs	r3, r0
    7f4a:	001a      	movs	r2, r3
    7f4c:	4ba8      	ldr	r3, [pc, #672]	; (81f0 <xQueueReceive+0x358>)
    7f4e:	5c9b      	ldrb	r3, [r3, r2]
    7f50:	3328      	adds	r3, #40	; 0x28
    7f52:	b2db      	uxtb	r3, r3
    7f54:	001d      	movs	r5, r3
    7f56:	6a3b      	ldr	r3, [r7, #32]
    7f58:	0018      	movs	r0, r3
    7f5a:	4ba4      	ldr	r3, [pc, #656]	; (81ec <xQueueReceive+0x354>)
    7f5c:	4798      	blx	r3
    7f5e:	0003      	movs	r3, r0
    7f60:	001a      	movs	r2, r3
    7f62:	4ba3      	ldr	r3, [pc, #652]	; (81f0 <xQueueReceive+0x358>)
    7f64:	5c9c      	ldrb	r4, [r3, r2]
    7f66:	6a3b      	ldr	r3, [r7, #32]
    7f68:	0018      	movs	r0, r3
    7f6a:	4ba2      	ldr	r3, [pc, #648]	; (81f4 <xQueueReceive+0x35c>)
    7f6c:	4798      	blx	r3
    7f6e:	0003      	movs	r3, r0
    7f70:	b2db      	uxtb	r3, r3
    7f72:	001a      	movs	r2, r3
    7f74:	0021      	movs	r1, r4
    7f76:	0028      	movs	r0, r5
    7f78:	4b9f      	ldr	r3, [pc, #636]	; (81f8 <xQueueReceive+0x360>)
    7f7a:	4798      	blx	r3
    7f7c:	6a3b      	ldr	r3, [r7, #32]
    7f7e:	0018      	movs	r0, r3
    7f80:	4b9a      	ldr	r3, [pc, #616]	; (81ec <xQueueReceive+0x354>)
    7f82:	4798      	blx	r3
    7f84:	0003      	movs	r3, r0
    7f86:	001a      	movs	r2, r3
    7f88:	4b99      	ldr	r3, [pc, #612]	; (81f0 <xQueueReceive+0x358>)
    7f8a:	5c9c      	ldrb	r4, [r3, r2]
    7f8c:	6a3b      	ldr	r3, [r7, #32]
    7f8e:	0018      	movs	r0, r3
    7f90:	4b98      	ldr	r3, [pc, #608]	; (81f4 <xQueueReceive+0x35c>)
    7f92:	4798      	blx	r3
    7f94:	0003      	movs	r3, r0
    7f96:	b2dd      	uxtb	r5, r3
    7f98:	6a3b      	ldr	r3, [r7, #32]
    7f9a:	0018      	movs	r0, r3
    7f9c:	4b93      	ldr	r3, [pc, #588]	; (81ec <xQueueReceive+0x354>)
    7f9e:	4798      	blx	r3
    7fa0:	0003      	movs	r3, r0
    7fa2:	001a      	movs	r2, r3
    7fa4:	4b92      	ldr	r3, [pc, #584]	; (81f0 <xQueueReceive+0x358>)
    7fa6:	5c9b      	ldrb	r3, [r3, r2]
    7fa8:	2b02      	cmp	r3, #2
    7faa:	d108      	bne.n	7fbe <xQueueReceive+0x126>
    7fac:	4b8b      	ldr	r3, [pc, #556]	; (81dc <xQueueReceive+0x344>)
    7fae:	4798      	blx	r3
    7fb0:	0003      	movs	r3, r0
    7fb2:	0018      	movs	r0, r3
    7fb4:	4b91      	ldr	r3, [pc, #580]	; (81fc <xQueueReceive+0x364>)
    7fb6:	4798      	blx	r3
    7fb8:	0003      	movs	r3, r0
    7fba:	b2db      	uxtb	r3, r3
    7fbc:	e004      	b.n	7fc8 <xQueueReceive+0x130>
    7fbe:	6a3b      	ldr	r3, [r7, #32]
    7fc0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    7fc2:	b2db      	uxtb	r3, r3
    7fc4:	3b01      	subs	r3, #1
    7fc6:	b2db      	uxtb	r3, r3
    7fc8:	001a      	movs	r2, r3
    7fca:	0029      	movs	r1, r5
    7fcc:	0020      	movs	r0, r4
    7fce:	4b8c      	ldr	r3, [pc, #560]	; (8200 <xQueueReceive+0x368>)
    7fd0:	4798      	blx	r3
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
    7fd2:	69fb      	ldr	r3, [r7, #28]
    7fd4:	1e5a      	subs	r2, r3, #1
    7fd6:	6a3b      	ldr	r3, [r7, #32]
    7fd8:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
    7fda:	6a3b      	ldr	r3, [r7, #32]
    7fdc:	691b      	ldr	r3, [r3, #16]
    7fde:	2b00      	cmp	r3, #0
    7fe0:	d008      	beq.n	7ff4 <xQueueReceive+0x15c>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
    7fe2:	6a3b      	ldr	r3, [r7, #32]
    7fe4:	3310      	adds	r3, #16
    7fe6:	0018      	movs	r0, r3
    7fe8:	4b86      	ldr	r3, [pc, #536]	; (8204 <xQueueReceive+0x36c>)
    7fea:	4798      	blx	r3
    7fec:	1e03      	subs	r3, r0, #0
    7fee:	d001      	beq.n	7ff4 <xQueueReceive+0x15c>
					{
						queueYIELD_IF_USING_PREEMPTION();
    7ff0:	4b85      	ldr	r3, [pc, #532]	; (8208 <xQueueReceive+0x370>)
    7ff2:	4798      	blx	r3
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
    7ff4:	4b85      	ldr	r3, [pc, #532]	; (820c <xQueueReceive+0x374>)
    7ff6:	4798      	blx	r3
				return pdPASS;
    7ff8:	2301      	movs	r3, #1
    7ffa:	e15f      	b.n	82bc <xQueueReceive+0x424>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
    7ffc:	687b      	ldr	r3, [r7, #4]
    7ffe:	2b00      	cmp	r3, #0
    8000:	d13b      	bne.n	807a <xQueueReceive+0x1e2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
    8002:	4b82      	ldr	r3, [pc, #520]	; (820c <xQueueReceive+0x374>)
    8004:	4798      	blx	r3
					traceQUEUE_RECEIVE_FAILED( pxQueue );
    8006:	4b75      	ldr	r3, [pc, #468]	; (81dc <xQueueReceive+0x344>)
    8008:	4798      	blx	r3
    800a:	0003      	movs	r3, r0
    800c:	0018      	movs	r0, r3
    800e:	4b74      	ldr	r3, [pc, #464]	; (81e0 <xQueueReceive+0x348>)
    8010:	4798      	blx	r3
    8012:	0003      	movs	r3, r0
    8014:	001a      	movs	r2, r3
    8016:	4b73      	ldr	r3, [pc, #460]	; (81e4 <xQueueReceive+0x34c>)
    8018:	881b      	ldrh	r3, [r3, #0]
    801a:	4013      	ands	r3, r2
    801c:	b29b      	uxth	r3, r3
    801e:	2b00      	cmp	r3, #0
    8020:	d029      	beq.n	8076 <xQueueReceive+0x1de>
    8022:	6a3b      	ldr	r3, [r7, #32]
    8024:	0018      	movs	r0, r3
    8026:	4b70      	ldr	r3, [pc, #448]	; (81e8 <xQueueReceive+0x350>)
    8028:	4798      	blx	r3
    802a:	0003      	movs	r3, r0
    802c:	001a      	movs	r2, r3
    802e:	4b6d      	ldr	r3, [pc, #436]	; (81e4 <xQueueReceive+0x34c>)
    8030:	881b      	ldrh	r3, [r3, #0]
    8032:	4013      	ands	r3, r2
    8034:	b29b      	uxth	r3, r3
    8036:	2b00      	cmp	r3, #0
    8038:	d01d      	beq.n	8076 <xQueueReceive+0x1de>
    803a:	6a3b      	ldr	r3, [r7, #32]
    803c:	0018      	movs	r0, r3
    803e:	4b6b      	ldr	r3, [pc, #428]	; (81ec <xQueueReceive+0x354>)
    8040:	4798      	blx	r3
    8042:	0003      	movs	r3, r0
    8044:	001a      	movs	r2, r3
    8046:	4b6a      	ldr	r3, [pc, #424]	; (81f0 <xQueueReceive+0x358>)
    8048:	5c9b      	ldrb	r3, [r3, r2]
    804a:	3350      	adds	r3, #80	; 0x50
    804c:	b2db      	uxtb	r3, r3
    804e:	001d      	movs	r5, r3
    8050:	6a3b      	ldr	r3, [r7, #32]
    8052:	0018      	movs	r0, r3
    8054:	4b65      	ldr	r3, [pc, #404]	; (81ec <xQueueReceive+0x354>)
    8056:	4798      	blx	r3
    8058:	0003      	movs	r3, r0
    805a:	001a      	movs	r2, r3
    805c:	4b64      	ldr	r3, [pc, #400]	; (81f0 <xQueueReceive+0x358>)
    805e:	5c9c      	ldrb	r4, [r3, r2]
    8060:	6a3b      	ldr	r3, [r7, #32]
    8062:	0018      	movs	r0, r3
    8064:	4b63      	ldr	r3, [pc, #396]	; (81f4 <xQueueReceive+0x35c>)
    8066:	4798      	blx	r3
    8068:	0003      	movs	r3, r0
    806a:	b2db      	uxtb	r3, r3
    806c:	001a      	movs	r2, r3
    806e:	0021      	movs	r1, r4
    8070:	0028      	movs	r0, r5
    8072:	4b61      	ldr	r3, [pc, #388]	; (81f8 <xQueueReceive+0x360>)
    8074:	4798      	blx	r3
					return errQUEUE_EMPTY;
    8076:	2300      	movs	r3, #0
    8078:	e120      	b.n	82bc <xQueueReceive+0x424>
				}
				else if( xEntryTimeSet == pdFALSE )
    807a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    807c:	2b00      	cmp	r3, #0
    807e:	d106      	bne.n	808e <xQueueReceive+0x1f6>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
    8080:	2314      	movs	r3, #20
    8082:	18fb      	adds	r3, r7, r3
    8084:	0018      	movs	r0, r3
    8086:	4b62      	ldr	r3, [pc, #392]	; (8210 <xQueueReceive+0x378>)
    8088:	4798      	blx	r3
					xEntryTimeSet = pdTRUE;
    808a:	2301      	movs	r3, #1
    808c:	627b      	str	r3, [r7, #36]	; 0x24
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
    808e:	4b5f      	ldr	r3, [pc, #380]	; (820c <xQueueReceive+0x374>)
    8090:	4798      	blx	r3

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
    8092:	4b60      	ldr	r3, [pc, #384]	; (8214 <xQueueReceive+0x37c>)
    8094:	4798      	blx	r3
		prvLockQueue( pxQueue );
    8096:	4b4f      	ldr	r3, [pc, #316]	; (81d4 <xQueueReceive+0x33c>)
    8098:	4798      	blx	r3
    809a:	6a3b      	ldr	r3, [r7, #32]
    809c:	2244      	movs	r2, #68	; 0x44
    809e:	5c9b      	ldrb	r3, [r3, r2]
    80a0:	b25b      	sxtb	r3, r3
    80a2:	3301      	adds	r3, #1
    80a4:	d103      	bne.n	80ae <xQueueReceive+0x216>
    80a6:	6a3b      	ldr	r3, [r7, #32]
    80a8:	2244      	movs	r2, #68	; 0x44
    80aa:	2100      	movs	r1, #0
    80ac:	5499      	strb	r1, [r3, r2]
    80ae:	6a3b      	ldr	r3, [r7, #32]
    80b0:	2245      	movs	r2, #69	; 0x45
    80b2:	5c9b      	ldrb	r3, [r3, r2]
    80b4:	b25b      	sxtb	r3, r3
    80b6:	3301      	adds	r3, #1
    80b8:	d103      	bne.n	80c2 <xQueueReceive+0x22a>
    80ba:	6a3b      	ldr	r3, [r7, #32]
    80bc:	2245      	movs	r2, #69	; 0x45
    80be:	2100      	movs	r1, #0
    80c0:	5499      	strb	r1, [r3, r2]
    80c2:	4b52      	ldr	r3, [pc, #328]	; (820c <xQueueReceive+0x374>)
    80c4:	4798      	blx	r3

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
    80c6:	1d3a      	adds	r2, r7, #4
    80c8:	2314      	movs	r3, #20
    80ca:	18fb      	adds	r3, r7, r3
    80cc:	0011      	movs	r1, r2
    80ce:	0018      	movs	r0, r3
    80d0:	4b51      	ldr	r3, [pc, #324]	; (8218 <xQueueReceive+0x380>)
    80d2:	4798      	blx	r3
    80d4:	1e03      	subs	r3, r0, #0
    80d6:	d000      	beq.n	80da <xQueueReceive+0x242>
    80d8:	e0aa      	b.n	8230 <xQueueReceive+0x398>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
    80da:	6a3b      	ldr	r3, [r7, #32]
    80dc:	0018      	movs	r0, r3
    80de:	4b4f      	ldr	r3, [pc, #316]	; (821c <xQueueReceive+0x384>)
    80e0:	4798      	blx	r3
    80e2:	1e03      	subs	r3, r0, #0
    80e4:	d06d      	beq.n	81c2 <xQueueReceive+0x32a>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
    80e6:	4b3d      	ldr	r3, [pc, #244]	; (81dc <xQueueReceive+0x344>)
    80e8:	4798      	blx	r3
    80ea:	0003      	movs	r3, r0
    80ec:	0018      	movs	r0, r3
    80ee:	4b3c      	ldr	r3, [pc, #240]	; (81e0 <xQueueReceive+0x348>)
    80f0:	4798      	blx	r3
    80f2:	0003      	movs	r3, r0
    80f4:	001a      	movs	r2, r3
    80f6:	4b3b      	ldr	r3, [pc, #236]	; (81e4 <xQueueReceive+0x34c>)
    80f8:	881b      	ldrh	r3, [r3, #0]
    80fa:	4013      	ands	r3, r2
    80fc:	b29b      	uxth	r3, r3
    80fe:	2b00      	cmp	r3, #0
    8100:	d029      	beq.n	8156 <xQueueReceive+0x2be>
    8102:	6a3b      	ldr	r3, [r7, #32]
    8104:	0018      	movs	r0, r3
    8106:	4b38      	ldr	r3, [pc, #224]	; (81e8 <xQueueReceive+0x350>)
    8108:	4798      	blx	r3
    810a:	0003      	movs	r3, r0
    810c:	001a      	movs	r2, r3
    810e:	4b35      	ldr	r3, [pc, #212]	; (81e4 <xQueueReceive+0x34c>)
    8110:	881b      	ldrh	r3, [r3, #0]
    8112:	4013      	ands	r3, r2
    8114:	b29b      	uxth	r3, r3
    8116:	2b00      	cmp	r3, #0
    8118:	d01d      	beq.n	8156 <xQueueReceive+0x2be>
    811a:	6a3b      	ldr	r3, [r7, #32]
    811c:	0018      	movs	r0, r3
    811e:	4b33      	ldr	r3, [pc, #204]	; (81ec <xQueueReceive+0x354>)
    8120:	4798      	blx	r3
    8122:	0003      	movs	r3, r0
    8124:	001a      	movs	r2, r3
    8126:	4b32      	ldr	r3, [pc, #200]	; (81f0 <xQueueReceive+0x358>)
    8128:	5c9b      	ldrb	r3, [r3, r2]
    812a:	3368      	adds	r3, #104	; 0x68
    812c:	b2db      	uxtb	r3, r3
    812e:	001d      	movs	r5, r3
    8130:	6a3b      	ldr	r3, [r7, #32]
    8132:	0018      	movs	r0, r3
    8134:	4b2d      	ldr	r3, [pc, #180]	; (81ec <xQueueReceive+0x354>)
    8136:	4798      	blx	r3
    8138:	0003      	movs	r3, r0
    813a:	001a      	movs	r2, r3
    813c:	4b2c      	ldr	r3, [pc, #176]	; (81f0 <xQueueReceive+0x358>)
    813e:	5c9c      	ldrb	r4, [r3, r2]
    8140:	6a3b      	ldr	r3, [r7, #32]
    8142:	0018      	movs	r0, r3
    8144:	4b2b      	ldr	r3, [pc, #172]	; (81f4 <xQueueReceive+0x35c>)
    8146:	4798      	blx	r3
    8148:	0003      	movs	r3, r0
    814a:	b2db      	uxtb	r3, r3
    814c:	001a      	movs	r2, r3
    814e:	0021      	movs	r1, r4
    8150:	0028      	movs	r0, r5
    8152:	4b29      	ldr	r3, [pc, #164]	; (81f8 <xQueueReceive+0x360>)
    8154:	4798      	blx	r3
    8156:	6a3b      	ldr	r3, [r7, #32]
    8158:	0018      	movs	r0, r3
    815a:	4b24      	ldr	r3, [pc, #144]	; (81ec <xQueueReceive+0x354>)
    815c:	4798      	blx	r3
    815e:	0003      	movs	r3, r0
    8160:	001a      	movs	r2, r3
    8162:	4b23      	ldr	r3, [pc, #140]	; (81f0 <xQueueReceive+0x358>)
    8164:	5c9b      	ldrb	r3, [r3, r2]
    8166:	2b02      	cmp	r3, #2
    8168:	d018      	beq.n	819c <xQueueReceive+0x304>
    816a:	4b1c      	ldr	r3, [pc, #112]	; (81dc <xQueueReceive+0x344>)
    816c:	4798      	blx	r3
    816e:	0003      	movs	r3, r0
    8170:	0018      	movs	r0, r3
    8172:	4b1b      	ldr	r3, [pc, #108]	; (81e0 <xQueueReceive+0x348>)
    8174:	4798      	blx	r3
    8176:	0003      	movs	r3, r0
    8178:	001a      	movs	r2, r3
    817a:	4b1a      	ldr	r3, [pc, #104]	; (81e4 <xQueueReceive+0x34c>)
    817c:	881b      	ldrh	r3, [r3, #0]
    817e:	4013      	ands	r3, r2
    8180:	b29b      	uxth	r3, r3
    8182:	2b00      	cmp	r3, #0
    8184:	d00a      	beq.n	819c <xQueueReceive+0x304>
    8186:	4b15      	ldr	r3, [pc, #84]	; (81dc <xQueueReceive+0x344>)
    8188:	4798      	blx	r3
    818a:	0003      	movs	r3, r0
    818c:	0018      	movs	r0, r3
    818e:	4b1b      	ldr	r3, [pc, #108]	; (81fc <xQueueReceive+0x364>)
    8190:	4798      	blx	r3
    8192:	0003      	movs	r3, r0
    8194:	b2db      	uxtb	r3, r3
    8196:	0018      	movs	r0, r3
    8198:	4b21      	ldr	r3, [pc, #132]	; (8220 <xQueueReceive+0x388>)
    819a:	4798      	blx	r3
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
    819c:	6a3b      	ldr	r3, [r7, #32]
    819e:	3324      	adds	r3, #36	; 0x24
    81a0:	687a      	ldr	r2, [r7, #4]
    81a2:	0011      	movs	r1, r2
    81a4:	0018      	movs	r0, r3
    81a6:	4b1f      	ldr	r3, [pc, #124]	; (8224 <xQueueReceive+0x38c>)
    81a8:	4798      	blx	r3
				prvUnlockQueue( pxQueue );
    81aa:	6a3b      	ldr	r3, [r7, #32]
    81ac:	0018      	movs	r0, r3
    81ae:	4b1e      	ldr	r3, [pc, #120]	; (8228 <xQueueReceive+0x390>)
    81b0:	4798      	blx	r3
				if( xTaskResumeAll() == pdFALSE )
    81b2:	4b1e      	ldr	r3, [pc, #120]	; (822c <xQueueReceive+0x394>)
    81b4:	4798      	blx	r3
    81b6:	1e03      	subs	r3, r0, #0
    81b8:	d000      	beq.n	81bc <xQueueReceive+0x324>
    81ba:	e698      	b.n	7eee <xQueueReceive+0x56>
				{
					portYIELD_WITHIN_API();
    81bc:	4b12      	ldr	r3, [pc, #72]	; (8208 <xQueueReceive+0x370>)
    81be:	4798      	blx	r3
    81c0:	e695      	b.n	7eee <xQueueReceive+0x56>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
    81c2:	6a3b      	ldr	r3, [r7, #32]
    81c4:	0018      	movs	r0, r3
    81c6:	4b18      	ldr	r3, [pc, #96]	; (8228 <xQueueReceive+0x390>)
    81c8:	4798      	blx	r3
				( void ) xTaskResumeAll();
    81ca:	4b18      	ldr	r3, [pc, #96]	; (822c <xQueueReceive+0x394>)
    81cc:	4798      	blx	r3
    81ce:	e68e      	b.n	7eee <xQueueReceive+0x56>
    81d0:	00009d6d 	.word	0x00009d6d
    81d4:	00007049 	.word	0x00007049
    81d8:	000088f9 	.word	0x000088f9
    81dc:	000052e1 	.word	0x000052e1
    81e0:	00005045 	.word	0x00005045
    81e4:	20000100 	.word	0x20000100
    81e8:	00005105 	.word	0x00005105
    81ec:	00005005 	.word	0x00005005
    81f0:	200000f4 	.word	0x200000f4
    81f4:	000050e5 	.word	0x000050e5
    81f8:	00005a3d 	.word	0x00005a3d
    81fc:	00005025 	.word	0x00005025
    8200:	00006099 	.word	0x00006099
    8204:	000098dd 	.word	0x000098dd
    8208:	00007031 	.word	0x00007031
    820c:	0000706d 	.word	0x0000706d
    8210:	00009a1d 	.word	0x00009a1d
    8214:	00009305 	.word	0x00009305
    8218:	00009a45 	.word	0x00009a45
    821c:	00008a39 	.word	0x00008a39
    8220:	000061d5 	.word	0x000061d5
    8224:	000097b9 	.word	0x000097b9
    8228:	00008949 	.word	0x00008949
    822c:	0000931d 	.word	0x0000931d
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
    8230:	6a3b      	ldr	r3, [r7, #32]
    8232:	0018      	movs	r0, r3
    8234:	4b23      	ldr	r3, [pc, #140]	; (82c4 <xQueueReceive+0x42c>)
    8236:	4798      	blx	r3
			( void ) xTaskResumeAll();
    8238:	4b23      	ldr	r3, [pc, #140]	; (82c8 <xQueueReceive+0x430>)
    823a:	4798      	blx	r3

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
    823c:	6a3b      	ldr	r3, [r7, #32]
    823e:	0018      	movs	r0, r3
    8240:	4b22      	ldr	r3, [pc, #136]	; (82cc <xQueueReceive+0x434>)
    8242:	4798      	blx	r3
    8244:	1e03      	subs	r3, r0, #0
    8246:	d100      	bne.n	824a <xQueueReceive+0x3b2>
    8248:	e651      	b.n	7eee <xQueueReceive+0x56>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
    824a:	4b21      	ldr	r3, [pc, #132]	; (82d0 <xQueueReceive+0x438>)
    824c:	4798      	blx	r3
    824e:	0003      	movs	r3, r0
    8250:	0018      	movs	r0, r3
    8252:	4b20      	ldr	r3, [pc, #128]	; (82d4 <xQueueReceive+0x43c>)
    8254:	4798      	blx	r3
    8256:	0003      	movs	r3, r0
    8258:	001a      	movs	r2, r3
    825a:	4b1f      	ldr	r3, [pc, #124]	; (82d8 <xQueueReceive+0x440>)
    825c:	881b      	ldrh	r3, [r3, #0]
    825e:	4013      	ands	r3, r2
    8260:	b29b      	uxth	r3, r3
    8262:	2b00      	cmp	r3, #0
    8264:	d029      	beq.n	82ba <xQueueReceive+0x422>
    8266:	6a3b      	ldr	r3, [r7, #32]
    8268:	0018      	movs	r0, r3
    826a:	4b1c      	ldr	r3, [pc, #112]	; (82dc <xQueueReceive+0x444>)
    826c:	4798      	blx	r3
    826e:	0003      	movs	r3, r0
    8270:	001a      	movs	r2, r3
    8272:	4b19      	ldr	r3, [pc, #100]	; (82d8 <xQueueReceive+0x440>)
    8274:	881b      	ldrh	r3, [r3, #0]
    8276:	4013      	ands	r3, r2
    8278:	b29b      	uxth	r3, r3
    827a:	2b00      	cmp	r3, #0
    827c:	d01d      	beq.n	82ba <xQueueReceive+0x422>
    827e:	6a3b      	ldr	r3, [r7, #32]
    8280:	0018      	movs	r0, r3
    8282:	4b17      	ldr	r3, [pc, #92]	; (82e0 <xQueueReceive+0x448>)
    8284:	4798      	blx	r3
    8286:	0003      	movs	r3, r0
    8288:	001a      	movs	r2, r3
    828a:	4b16      	ldr	r3, [pc, #88]	; (82e4 <xQueueReceive+0x44c>)
    828c:	5c9b      	ldrb	r3, [r3, r2]
    828e:	3350      	adds	r3, #80	; 0x50
    8290:	b2db      	uxtb	r3, r3
    8292:	001d      	movs	r5, r3
    8294:	6a3b      	ldr	r3, [r7, #32]
    8296:	0018      	movs	r0, r3
    8298:	4b11      	ldr	r3, [pc, #68]	; (82e0 <xQueueReceive+0x448>)
    829a:	4798      	blx	r3
    829c:	0003      	movs	r3, r0
    829e:	001a      	movs	r2, r3
    82a0:	4b10      	ldr	r3, [pc, #64]	; (82e4 <xQueueReceive+0x44c>)
    82a2:	5c9c      	ldrb	r4, [r3, r2]
    82a4:	6a3b      	ldr	r3, [r7, #32]
    82a6:	0018      	movs	r0, r3
    82a8:	4b0f      	ldr	r3, [pc, #60]	; (82e8 <xQueueReceive+0x450>)
    82aa:	4798      	blx	r3
    82ac:	0003      	movs	r3, r0
    82ae:	b2db      	uxtb	r3, r3
    82b0:	001a      	movs	r2, r3
    82b2:	0021      	movs	r1, r4
    82b4:	0028      	movs	r0, r5
    82b6:	4b0d      	ldr	r3, [pc, #52]	; (82ec <xQueueReceive+0x454>)
    82b8:	4798      	blx	r3
				return errQUEUE_EMPTY;
    82ba:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
    82bc:	0018      	movs	r0, r3
    82be:	46bd      	mov	sp, r7
    82c0:	b00a      	add	sp, #40	; 0x28
    82c2:	bdb0      	pop	{r4, r5, r7, pc}
    82c4:	00008949 	.word	0x00008949
    82c8:	0000931d 	.word	0x0000931d
    82cc:	00008a39 	.word	0x00008a39
    82d0:	000052e1 	.word	0x000052e1
    82d4:	00005045 	.word	0x00005045
    82d8:	20000100 	.word	0x20000100
    82dc:	00005105 	.word	0x00005105
    82e0:	00005005 	.word	0x00005005
    82e4:	200000f4 	.word	0x200000f4
    82e8:	000050e5 	.word	0x000050e5
    82ec:	00005a3d 	.word	0x00005a3d

000082f0 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
    82f0:	b5b0      	push	{r4, r5, r7, lr}
    82f2:	b08a      	sub	sp, #40	; 0x28
    82f4:	af00      	add	r7, sp, #0
    82f6:	6078      	str	r0, [r7, #4]
    82f8:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
    82fa:	2300      	movs	r3, #0
    82fc:	627b      	str	r3, [r7, #36]	; 0x24
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
    82fe:	687b      	ldr	r3, [r7, #4]
    8300:	61fb      	str	r3, [r7, #28]

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
    8302:	2300      	movs	r3, #0
    8304:	623b      	str	r3, [r7, #32]
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
    8306:	69fb      	ldr	r3, [r7, #28]
    8308:	2b00      	cmp	r3, #0
    830a:	d101      	bne.n	8310 <xQueueSemaphoreTake+0x20>
    830c:	b672      	cpsid	i
    830e:	e7fe      	b.n	830e <xQueueSemaphoreTake+0x1e>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
    8310:	69fb      	ldr	r3, [r7, #28]
    8312:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    8314:	2b00      	cmp	r3, #0
    8316:	d001      	beq.n	831c <xQueueSemaphoreTake+0x2c>
    8318:	b672      	cpsid	i
    831a:	e7fe      	b.n	831a <xQueueSemaphoreTake+0x2a>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
    831c:	4bcb      	ldr	r3, [pc, #812]	; (864c <xQueueSemaphoreTake+0x35c>)
    831e:	4798      	blx	r3
    8320:	1e03      	subs	r3, r0, #0
    8322:	d102      	bne.n	832a <xQueueSemaphoreTake+0x3a>
    8324:	683b      	ldr	r3, [r7, #0]
    8326:	2b00      	cmp	r3, #0
    8328:	d101      	bne.n	832e <xQueueSemaphoreTake+0x3e>
    832a:	2301      	movs	r3, #1
    832c:	e000      	b.n	8330 <xQueueSemaphoreTake+0x40>
    832e:	2300      	movs	r3, #0
    8330:	2b00      	cmp	r3, #0
    8332:	d101      	bne.n	8338 <xQueueSemaphoreTake+0x48>
    8334:	b672      	cpsid	i
    8336:	e7fe      	b.n	8336 <xQueueSemaphoreTake+0x46>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
    8338:	4bc5      	ldr	r3, [pc, #788]	; (8650 <xQueueSemaphoreTake+0x360>)
    833a:	4798      	blx	r3
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
    833c:	69fb      	ldr	r3, [r7, #28]
    833e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    8340:	61bb      	str	r3, [r7, #24]

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
    8342:	69bb      	ldr	r3, [r7, #24]
    8344:	2b00      	cmp	r3, #0
    8346:	d100      	bne.n	834a <xQueueSemaphoreTake+0x5a>
    8348:	e080      	b.n	844c <xQueueSemaphoreTake+0x15c>
			{
				traceQUEUE_RECEIVE( pxQueue );
    834a:	4bc2      	ldr	r3, [pc, #776]	; (8654 <xQueueSemaphoreTake+0x364>)
    834c:	4798      	blx	r3
    834e:	0003      	movs	r3, r0
    8350:	0018      	movs	r0, r3
    8352:	4bc1      	ldr	r3, [pc, #772]	; (8658 <xQueueSemaphoreTake+0x368>)
    8354:	4798      	blx	r3
    8356:	0003      	movs	r3, r0
    8358:	001a      	movs	r2, r3
    835a:	4bc0      	ldr	r3, [pc, #768]	; (865c <xQueueSemaphoreTake+0x36c>)
    835c:	881b      	ldrh	r3, [r3, #0]
    835e:	4013      	ands	r3, r2
    8360:	b29b      	uxth	r3, r3
    8362:	2b00      	cmp	r3, #0
    8364:	d029      	beq.n	83ba <xQueueSemaphoreTake+0xca>
    8366:	69fb      	ldr	r3, [r7, #28]
    8368:	0018      	movs	r0, r3
    836a:	4bbd      	ldr	r3, [pc, #756]	; (8660 <xQueueSemaphoreTake+0x370>)
    836c:	4798      	blx	r3
    836e:	0003      	movs	r3, r0
    8370:	001a      	movs	r2, r3
    8372:	4bba      	ldr	r3, [pc, #744]	; (865c <xQueueSemaphoreTake+0x36c>)
    8374:	881b      	ldrh	r3, [r3, #0]
    8376:	4013      	ands	r3, r2
    8378:	b29b      	uxth	r3, r3
    837a:	2b00      	cmp	r3, #0
    837c:	d01d      	beq.n	83ba <xQueueSemaphoreTake+0xca>
    837e:	69fb      	ldr	r3, [r7, #28]
    8380:	0018      	movs	r0, r3
    8382:	4bb8      	ldr	r3, [pc, #736]	; (8664 <xQueueSemaphoreTake+0x374>)
    8384:	4798      	blx	r3
    8386:	0003      	movs	r3, r0
    8388:	001a      	movs	r2, r3
    838a:	4bb7      	ldr	r3, [pc, #732]	; (8668 <xQueueSemaphoreTake+0x378>)
    838c:	5c9b      	ldrb	r3, [r3, r2]
    838e:	3328      	adds	r3, #40	; 0x28
    8390:	b2db      	uxtb	r3, r3
    8392:	001d      	movs	r5, r3
    8394:	69fb      	ldr	r3, [r7, #28]
    8396:	0018      	movs	r0, r3
    8398:	4bb2      	ldr	r3, [pc, #712]	; (8664 <xQueueSemaphoreTake+0x374>)
    839a:	4798      	blx	r3
    839c:	0003      	movs	r3, r0
    839e:	001a      	movs	r2, r3
    83a0:	4bb1      	ldr	r3, [pc, #708]	; (8668 <xQueueSemaphoreTake+0x378>)
    83a2:	5c9c      	ldrb	r4, [r3, r2]
    83a4:	69fb      	ldr	r3, [r7, #28]
    83a6:	0018      	movs	r0, r3
    83a8:	4bb0      	ldr	r3, [pc, #704]	; (866c <xQueueSemaphoreTake+0x37c>)
    83aa:	4798      	blx	r3
    83ac:	0003      	movs	r3, r0
    83ae:	b2db      	uxtb	r3, r3
    83b0:	001a      	movs	r2, r3
    83b2:	0021      	movs	r1, r4
    83b4:	0028      	movs	r0, r5
    83b6:	4bae      	ldr	r3, [pc, #696]	; (8670 <xQueueSemaphoreTake+0x380>)
    83b8:	4798      	blx	r3
    83ba:	69fb      	ldr	r3, [r7, #28]
    83bc:	0018      	movs	r0, r3
    83be:	4ba9      	ldr	r3, [pc, #676]	; (8664 <xQueueSemaphoreTake+0x374>)
    83c0:	4798      	blx	r3
    83c2:	0003      	movs	r3, r0
    83c4:	001a      	movs	r2, r3
    83c6:	4ba8      	ldr	r3, [pc, #672]	; (8668 <xQueueSemaphoreTake+0x378>)
    83c8:	5c9c      	ldrb	r4, [r3, r2]
    83ca:	69fb      	ldr	r3, [r7, #28]
    83cc:	0018      	movs	r0, r3
    83ce:	4ba7      	ldr	r3, [pc, #668]	; (866c <xQueueSemaphoreTake+0x37c>)
    83d0:	4798      	blx	r3
    83d2:	0003      	movs	r3, r0
    83d4:	b2dd      	uxtb	r5, r3
    83d6:	69fb      	ldr	r3, [r7, #28]
    83d8:	0018      	movs	r0, r3
    83da:	4ba2      	ldr	r3, [pc, #648]	; (8664 <xQueueSemaphoreTake+0x374>)
    83dc:	4798      	blx	r3
    83de:	0003      	movs	r3, r0
    83e0:	001a      	movs	r2, r3
    83e2:	4ba1      	ldr	r3, [pc, #644]	; (8668 <xQueueSemaphoreTake+0x378>)
    83e4:	5c9b      	ldrb	r3, [r3, r2]
    83e6:	2b02      	cmp	r3, #2
    83e8:	d108      	bne.n	83fc <xQueueSemaphoreTake+0x10c>
    83ea:	4b9a      	ldr	r3, [pc, #616]	; (8654 <xQueueSemaphoreTake+0x364>)
    83ec:	4798      	blx	r3
    83ee:	0003      	movs	r3, r0
    83f0:	0018      	movs	r0, r3
    83f2:	4ba0      	ldr	r3, [pc, #640]	; (8674 <xQueueSemaphoreTake+0x384>)
    83f4:	4798      	blx	r3
    83f6:	0003      	movs	r3, r0
    83f8:	b2db      	uxtb	r3, r3
    83fa:	e004      	b.n	8406 <xQueueSemaphoreTake+0x116>
    83fc:	69fb      	ldr	r3, [r7, #28]
    83fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    8400:	b2db      	uxtb	r3, r3
    8402:	3b01      	subs	r3, #1
    8404:	b2db      	uxtb	r3, r3
    8406:	001a      	movs	r2, r3
    8408:	0029      	movs	r1, r5
    840a:	0020      	movs	r0, r4
    840c:	4b9a      	ldr	r3, [pc, #616]	; (8678 <xQueueSemaphoreTake+0x388>)
    840e:	4798      	blx	r3

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
    8410:	69bb      	ldr	r3, [r7, #24]
    8412:	1e5a      	subs	r2, r3, #1
    8414:	69fb      	ldr	r3, [r7, #28]
    8416:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
    8418:	69fb      	ldr	r3, [r7, #28]
    841a:	681b      	ldr	r3, [r3, #0]
    841c:	2b00      	cmp	r3, #0
    841e:	d104      	bne.n	842a <xQueueSemaphoreTake+0x13a>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
    8420:	4b96      	ldr	r3, [pc, #600]	; (867c <xQueueSemaphoreTake+0x38c>)
    8422:	4798      	blx	r3
    8424:	0002      	movs	r2, r0
    8426:	69fb      	ldr	r3, [r7, #28]
    8428:	605a      	str	r2, [r3, #4]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
    842a:	69fb      	ldr	r3, [r7, #28]
    842c:	691b      	ldr	r3, [r3, #16]
    842e:	2b00      	cmp	r3, #0
    8430:	d008      	beq.n	8444 <xQueueSemaphoreTake+0x154>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
    8432:	69fb      	ldr	r3, [r7, #28]
    8434:	3310      	adds	r3, #16
    8436:	0018      	movs	r0, r3
    8438:	4b91      	ldr	r3, [pc, #580]	; (8680 <xQueueSemaphoreTake+0x390>)
    843a:	4798      	blx	r3
    843c:	1e03      	subs	r3, r0, #0
    843e:	d001      	beq.n	8444 <xQueueSemaphoreTake+0x154>
					{
						queueYIELD_IF_USING_PREEMPTION();
    8440:	4b90      	ldr	r3, [pc, #576]	; (8684 <xQueueSemaphoreTake+0x394>)
    8442:	4798      	blx	r3
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
    8444:	4b90      	ldr	r3, [pc, #576]	; (8688 <xQueueSemaphoreTake+0x398>)
    8446:	4798      	blx	r3
				return pdPASS;
    8448:	2301      	movs	r3, #1
    844a:	e18b      	b.n	8764 <xQueueSemaphoreTake+0x474>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
    844c:	683b      	ldr	r3, [r7, #0]
    844e:	2b00      	cmp	r3, #0
    8450:	d140      	bne.n	84d4 <xQueueSemaphoreTake+0x1e4>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
    8452:	6a3b      	ldr	r3, [r7, #32]
    8454:	2b00      	cmp	r3, #0
    8456:	d001      	beq.n	845c <xQueueSemaphoreTake+0x16c>
    8458:	b672      	cpsid	i
    845a:	e7fe      	b.n	845a <xQueueSemaphoreTake+0x16a>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
    845c:	4b8a      	ldr	r3, [pc, #552]	; (8688 <xQueueSemaphoreTake+0x398>)
    845e:	4798      	blx	r3
					traceQUEUE_RECEIVE_FAILED( pxQueue );
    8460:	4b7c      	ldr	r3, [pc, #496]	; (8654 <xQueueSemaphoreTake+0x364>)
    8462:	4798      	blx	r3
    8464:	0003      	movs	r3, r0
    8466:	0018      	movs	r0, r3
    8468:	4b7b      	ldr	r3, [pc, #492]	; (8658 <xQueueSemaphoreTake+0x368>)
    846a:	4798      	blx	r3
    846c:	0003      	movs	r3, r0
    846e:	001a      	movs	r2, r3
    8470:	4b7a      	ldr	r3, [pc, #488]	; (865c <xQueueSemaphoreTake+0x36c>)
    8472:	881b      	ldrh	r3, [r3, #0]
    8474:	4013      	ands	r3, r2
    8476:	b29b      	uxth	r3, r3
    8478:	2b00      	cmp	r3, #0
    847a:	d029      	beq.n	84d0 <xQueueSemaphoreTake+0x1e0>
    847c:	69fb      	ldr	r3, [r7, #28]
    847e:	0018      	movs	r0, r3
    8480:	4b77      	ldr	r3, [pc, #476]	; (8660 <xQueueSemaphoreTake+0x370>)
    8482:	4798      	blx	r3
    8484:	0003      	movs	r3, r0
    8486:	001a      	movs	r2, r3
    8488:	4b74      	ldr	r3, [pc, #464]	; (865c <xQueueSemaphoreTake+0x36c>)
    848a:	881b      	ldrh	r3, [r3, #0]
    848c:	4013      	ands	r3, r2
    848e:	b29b      	uxth	r3, r3
    8490:	2b00      	cmp	r3, #0
    8492:	d01d      	beq.n	84d0 <xQueueSemaphoreTake+0x1e0>
    8494:	69fb      	ldr	r3, [r7, #28]
    8496:	0018      	movs	r0, r3
    8498:	4b72      	ldr	r3, [pc, #456]	; (8664 <xQueueSemaphoreTake+0x374>)
    849a:	4798      	blx	r3
    849c:	0003      	movs	r3, r0
    849e:	001a      	movs	r2, r3
    84a0:	4b71      	ldr	r3, [pc, #452]	; (8668 <xQueueSemaphoreTake+0x378>)
    84a2:	5c9b      	ldrb	r3, [r3, r2]
    84a4:	3350      	adds	r3, #80	; 0x50
    84a6:	b2db      	uxtb	r3, r3
    84a8:	001d      	movs	r5, r3
    84aa:	69fb      	ldr	r3, [r7, #28]
    84ac:	0018      	movs	r0, r3
    84ae:	4b6d      	ldr	r3, [pc, #436]	; (8664 <xQueueSemaphoreTake+0x374>)
    84b0:	4798      	blx	r3
    84b2:	0003      	movs	r3, r0
    84b4:	001a      	movs	r2, r3
    84b6:	4b6c      	ldr	r3, [pc, #432]	; (8668 <xQueueSemaphoreTake+0x378>)
    84b8:	5c9c      	ldrb	r4, [r3, r2]
    84ba:	69fb      	ldr	r3, [r7, #28]
    84bc:	0018      	movs	r0, r3
    84be:	4b6b      	ldr	r3, [pc, #428]	; (866c <xQueueSemaphoreTake+0x37c>)
    84c0:	4798      	blx	r3
    84c2:	0003      	movs	r3, r0
    84c4:	b2db      	uxtb	r3, r3
    84c6:	001a      	movs	r2, r3
    84c8:	0021      	movs	r1, r4
    84ca:	0028      	movs	r0, r5
    84cc:	4b68      	ldr	r3, [pc, #416]	; (8670 <xQueueSemaphoreTake+0x380>)
    84ce:	4798      	blx	r3
					return errQUEUE_EMPTY;
    84d0:	2300      	movs	r3, #0
    84d2:	e147      	b.n	8764 <xQueueSemaphoreTake+0x474>
				}
				else if( xEntryTimeSet == pdFALSE )
    84d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    84d6:	2b00      	cmp	r3, #0
    84d8:	d106      	bne.n	84e8 <xQueueSemaphoreTake+0x1f8>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
    84da:	230c      	movs	r3, #12
    84dc:	18fb      	adds	r3, r7, r3
    84de:	0018      	movs	r0, r3
    84e0:	4b6a      	ldr	r3, [pc, #424]	; (868c <xQueueSemaphoreTake+0x39c>)
    84e2:	4798      	blx	r3
					xEntryTimeSet = pdTRUE;
    84e4:	2301      	movs	r3, #1
    84e6:	627b      	str	r3, [r7, #36]	; 0x24
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
    84e8:	4b67      	ldr	r3, [pc, #412]	; (8688 <xQueueSemaphoreTake+0x398>)
    84ea:	4798      	blx	r3

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
    84ec:	4b68      	ldr	r3, [pc, #416]	; (8690 <xQueueSemaphoreTake+0x3a0>)
    84ee:	4798      	blx	r3
		prvLockQueue( pxQueue );
    84f0:	4b57      	ldr	r3, [pc, #348]	; (8650 <xQueueSemaphoreTake+0x360>)
    84f2:	4798      	blx	r3
    84f4:	69fb      	ldr	r3, [r7, #28]
    84f6:	2244      	movs	r2, #68	; 0x44
    84f8:	5c9b      	ldrb	r3, [r3, r2]
    84fa:	b25b      	sxtb	r3, r3
    84fc:	3301      	adds	r3, #1
    84fe:	d103      	bne.n	8508 <xQueueSemaphoreTake+0x218>
    8500:	69fb      	ldr	r3, [r7, #28]
    8502:	2244      	movs	r2, #68	; 0x44
    8504:	2100      	movs	r1, #0
    8506:	5499      	strb	r1, [r3, r2]
    8508:	69fb      	ldr	r3, [r7, #28]
    850a:	2245      	movs	r2, #69	; 0x45
    850c:	5c9b      	ldrb	r3, [r3, r2]
    850e:	b25b      	sxtb	r3, r3
    8510:	3301      	adds	r3, #1
    8512:	d103      	bne.n	851c <xQueueSemaphoreTake+0x22c>
    8514:	69fb      	ldr	r3, [r7, #28]
    8516:	2245      	movs	r2, #69	; 0x45
    8518:	2100      	movs	r1, #0
    851a:	5499      	strb	r1, [r3, r2]
    851c:	4b5a      	ldr	r3, [pc, #360]	; (8688 <xQueueSemaphoreTake+0x398>)
    851e:	4798      	blx	r3

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
    8520:	003a      	movs	r2, r7
    8522:	230c      	movs	r3, #12
    8524:	18fb      	adds	r3, r7, r3
    8526:	0011      	movs	r1, r2
    8528:	0018      	movs	r0, r3
    852a:	4b5a      	ldr	r3, [pc, #360]	; (8694 <xQueueSemaphoreTake+0x3a4>)
    852c:	4798      	blx	r3
    852e:	1e03      	subs	r3, r0, #0
    8530:	d000      	beq.n	8534 <xQueueSemaphoreTake+0x244>
    8532:	e0bd      	b.n	86b0 <xQueueSemaphoreTake+0x3c0>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
    8534:	69fb      	ldr	r3, [r7, #28]
    8536:	0018      	movs	r0, r3
    8538:	4b57      	ldr	r3, [pc, #348]	; (8698 <xQueueSemaphoreTake+0x3a8>)
    853a:	4798      	blx	r3
    853c:	1e03      	subs	r3, r0, #0
    853e:	d100      	bne.n	8542 <xQueueSemaphoreTake+0x252>
    8540:	e07c      	b.n	863c <xQueueSemaphoreTake+0x34c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
    8542:	4b44      	ldr	r3, [pc, #272]	; (8654 <xQueueSemaphoreTake+0x364>)
    8544:	4798      	blx	r3
    8546:	0003      	movs	r3, r0
    8548:	0018      	movs	r0, r3
    854a:	4b43      	ldr	r3, [pc, #268]	; (8658 <xQueueSemaphoreTake+0x368>)
    854c:	4798      	blx	r3
    854e:	0003      	movs	r3, r0
    8550:	001a      	movs	r2, r3
    8552:	4b42      	ldr	r3, [pc, #264]	; (865c <xQueueSemaphoreTake+0x36c>)
    8554:	881b      	ldrh	r3, [r3, #0]
    8556:	4013      	ands	r3, r2
    8558:	b29b      	uxth	r3, r3
    855a:	2b00      	cmp	r3, #0
    855c:	d029      	beq.n	85b2 <xQueueSemaphoreTake+0x2c2>
    855e:	69fb      	ldr	r3, [r7, #28]
    8560:	0018      	movs	r0, r3
    8562:	4b3f      	ldr	r3, [pc, #252]	; (8660 <xQueueSemaphoreTake+0x370>)
    8564:	4798      	blx	r3
    8566:	0003      	movs	r3, r0
    8568:	001a      	movs	r2, r3
    856a:	4b3c      	ldr	r3, [pc, #240]	; (865c <xQueueSemaphoreTake+0x36c>)
    856c:	881b      	ldrh	r3, [r3, #0]
    856e:	4013      	ands	r3, r2
    8570:	b29b      	uxth	r3, r3
    8572:	2b00      	cmp	r3, #0
    8574:	d01d      	beq.n	85b2 <xQueueSemaphoreTake+0x2c2>
    8576:	69fb      	ldr	r3, [r7, #28]
    8578:	0018      	movs	r0, r3
    857a:	4b3a      	ldr	r3, [pc, #232]	; (8664 <xQueueSemaphoreTake+0x374>)
    857c:	4798      	blx	r3
    857e:	0003      	movs	r3, r0
    8580:	001a      	movs	r2, r3
    8582:	4b39      	ldr	r3, [pc, #228]	; (8668 <xQueueSemaphoreTake+0x378>)
    8584:	5c9b      	ldrb	r3, [r3, r2]
    8586:	3368      	adds	r3, #104	; 0x68
    8588:	b2db      	uxtb	r3, r3
    858a:	001d      	movs	r5, r3
    858c:	69fb      	ldr	r3, [r7, #28]
    858e:	0018      	movs	r0, r3
    8590:	4b34      	ldr	r3, [pc, #208]	; (8664 <xQueueSemaphoreTake+0x374>)
    8592:	4798      	blx	r3
    8594:	0003      	movs	r3, r0
    8596:	001a      	movs	r2, r3
    8598:	4b33      	ldr	r3, [pc, #204]	; (8668 <xQueueSemaphoreTake+0x378>)
    859a:	5c9c      	ldrb	r4, [r3, r2]
    859c:	69fb      	ldr	r3, [r7, #28]
    859e:	0018      	movs	r0, r3
    85a0:	4b32      	ldr	r3, [pc, #200]	; (866c <xQueueSemaphoreTake+0x37c>)
    85a2:	4798      	blx	r3
    85a4:	0003      	movs	r3, r0
    85a6:	b2db      	uxtb	r3, r3
    85a8:	001a      	movs	r2, r3
    85aa:	0021      	movs	r1, r4
    85ac:	0028      	movs	r0, r5
    85ae:	4b30      	ldr	r3, [pc, #192]	; (8670 <xQueueSemaphoreTake+0x380>)
    85b0:	4798      	blx	r3
    85b2:	69fb      	ldr	r3, [r7, #28]
    85b4:	0018      	movs	r0, r3
    85b6:	4b2b      	ldr	r3, [pc, #172]	; (8664 <xQueueSemaphoreTake+0x374>)
    85b8:	4798      	blx	r3
    85ba:	0003      	movs	r3, r0
    85bc:	001a      	movs	r2, r3
    85be:	4b2a      	ldr	r3, [pc, #168]	; (8668 <xQueueSemaphoreTake+0x378>)
    85c0:	5c9b      	ldrb	r3, [r3, r2]
    85c2:	2b02      	cmp	r3, #2
    85c4:	d018      	beq.n	85f8 <xQueueSemaphoreTake+0x308>
    85c6:	4b23      	ldr	r3, [pc, #140]	; (8654 <xQueueSemaphoreTake+0x364>)
    85c8:	4798      	blx	r3
    85ca:	0003      	movs	r3, r0
    85cc:	0018      	movs	r0, r3
    85ce:	4b22      	ldr	r3, [pc, #136]	; (8658 <xQueueSemaphoreTake+0x368>)
    85d0:	4798      	blx	r3
    85d2:	0003      	movs	r3, r0
    85d4:	001a      	movs	r2, r3
    85d6:	4b21      	ldr	r3, [pc, #132]	; (865c <xQueueSemaphoreTake+0x36c>)
    85d8:	881b      	ldrh	r3, [r3, #0]
    85da:	4013      	ands	r3, r2
    85dc:	b29b      	uxth	r3, r3
    85de:	2b00      	cmp	r3, #0
    85e0:	d00a      	beq.n	85f8 <xQueueSemaphoreTake+0x308>
    85e2:	4b1c      	ldr	r3, [pc, #112]	; (8654 <xQueueSemaphoreTake+0x364>)
    85e4:	4798      	blx	r3
    85e6:	0003      	movs	r3, r0
    85e8:	0018      	movs	r0, r3
    85ea:	4b22      	ldr	r3, [pc, #136]	; (8674 <xQueueSemaphoreTake+0x384>)
    85ec:	4798      	blx	r3
    85ee:	0003      	movs	r3, r0
    85f0:	b2db      	uxtb	r3, r3
    85f2:	0018      	movs	r0, r3
    85f4:	4b29      	ldr	r3, [pc, #164]	; (869c <xQueueSemaphoreTake+0x3ac>)
    85f6:	4798      	blx	r3

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
    85f8:	69fb      	ldr	r3, [r7, #28]
    85fa:	681b      	ldr	r3, [r3, #0]
    85fc:	2b00      	cmp	r3, #0
    85fe:	d10a      	bne.n	8616 <xQueueSemaphoreTake+0x326>
					{
						taskENTER_CRITICAL();
    8600:	4b13      	ldr	r3, [pc, #76]	; (8650 <xQueueSemaphoreTake+0x360>)
    8602:	4798      	blx	r3
						{
							xInheritanceOccurred = xTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
    8604:	69fb      	ldr	r3, [r7, #28]
    8606:	685b      	ldr	r3, [r3, #4]
    8608:	0018      	movs	r0, r3
    860a:	4b25      	ldr	r3, [pc, #148]	; (86a0 <xQueueSemaphoreTake+0x3b0>)
    860c:	4798      	blx	r3
    860e:	0003      	movs	r3, r0
    8610:	623b      	str	r3, [r7, #32]
						}
						taskEXIT_CRITICAL();
    8612:	4b1d      	ldr	r3, [pc, #116]	; (8688 <xQueueSemaphoreTake+0x398>)
    8614:	4798      	blx	r3
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
    8616:	69fb      	ldr	r3, [r7, #28]
    8618:	3324      	adds	r3, #36	; 0x24
    861a:	683a      	ldr	r2, [r7, #0]
    861c:	0011      	movs	r1, r2
    861e:	0018      	movs	r0, r3
    8620:	4b20      	ldr	r3, [pc, #128]	; (86a4 <xQueueSemaphoreTake+0x3b4>)
    8622:	4798      	blx	r3
				prvUnlockQueue( pxQueue );
    8624:	69fb      	ldr	r3, [r7, #28]
    8626:	0018      	movs	r0, r3
    8628:	4b1f      	ldr	r3, [pc, #124]	; (86a8 <xQueueSemaphoreTake+0x3b8>)
    862a:	4798      	blx	r3
				if( xTaskResumeAll() == pdFALSE )
    862c:	4b1f      	ldr	r3, [pc, #124]	; (86ac <xQueueSemaphoreTake+0x3bc>)
    862e:	4798      	blx	r3
    8630:	1e03      	subs	r3, r0, #0
    8632:	d000      	beq.n	8636 <xQueueSemaphoreTake+0x346>
    8634:	e680      	b.n	8338 <xQueueSemaphoreTake+0x48>
				{
					portYIELD_WITHIN_API();
    8636:	4b13      	ldr	r3, [pc, #76]	; (8684 <xQueueSemaphoreTake+0x394>)
    8638:	4798      	blx	r3
    863a:	e67d      	b.n	8338 <xQueueSemaphoreTake+0x48>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
    863c:	69fb      	ldr	r3, [r7, #28]
    863e:	0018      	movs	r0, r3
    8640:	4b19      	ldr	r3, [pc, #100]	; (86a8 <xQueueSemaphoreTake+0x3b8>)
    8642:	4798      	blx	r3
				( void ) xTaskResumeAll();
    8644:	4b19      	ldr	r3, [pc, #100]	; (86ac <xQueueSemaphoreTake+0x3bc>)
    8646:	4798      	blx	r3
    8648:	e676      	b.n	8338 <xQueueSemaphoreTake+0x48>
    864a:	46c0      	nop			; (mov r8, r8)
    864c:	00009d6d 	.word	0x00009d6d
    8650:	00007049 	.word	0x00007049
    8654:	000052e1 	.word	0x000052e1
    8658:	00005045 	.word	0x00005045
    865c:	20000100 	.word	0x20000100
    8660:	00005105 	.word	0x00005105
    8664:	00005005 	.word	0x00005005
    8668:	200000f4 	.word	0x200000f4
    866c:	000050e5 	.word	0x000050e5
    8670:	00005a3d 	.word	0x00005a3d
    8674:	00005025 	.word	0x00005025
    8678:	00006099 	.word	0x00006099
    867c:	0000a239 	.word	0x0000a239
    8680:	000098dd 	.word	0x000098dd
    8684:	00007031 	.word	0x00007031
    8688:	0000706d 	.word	0x0000706d
    868c:	00009a1d 	.word	0x00009a1d
    8690:	00009305 	.word	0x00009305
    8694:	00009a45 	.word	0x00009a45
    8698:	00008a39 	.word	0x00008a39
    869c:	000061d5 	.word	0x000061d5
    86a0:	00009da5 	.word	0x00009da5
    86a4:	000097b9 	.word	0x000097b9
    86a8:	00008949 	.word	0x00008949
    86ac:	0000931d 	.word	0x0000931d
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
    86b0:	69fb      	ldr	r3, [r7, #28]
    86b2:	0018      	movs	r0, r3
    86b4:	4b2d      	ldr	r3, [pc, #180]	; (876c <xQueueSemaphoreTake+0x47c>)
    86b6:	4798      	blx	r3
			( void ) xTaskResumeAll();
    86b8:	4b2d      	ldr	r3, [pc, #180]	; (8770 <xQueueSemaphoreTake+0x480>)
    86ba:	4798      	blx	r3

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
    86bc:	69fb      	ldr	r3, [r7, #28]
    86be:	0018      	movs	r0, r3
    86c0:	4b2c      	ldr	r3, [pc, #176]	; (8774 <xQueueSemaphoreTake+0x484>)
    86c2:	4798      	blx	r3
    86c4:	1e03      	subs	r3, r0, #0
    86c6:	d100      	bne.n	86ca <xQueueSemaphoreTake+0x3da>
    86c8:	e636      	b.n	8338 <xQueueSemaphoreTake+0x48>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
    86ca:	6a3b      	ldr	r3, [r7, #32]
    86cc:	2b00      	cmp	r3, #0
    86ce:	d010      	beq.n	86f2 <xQueueSemaphoreTake+0x402>
					{
						taskENTER_CRITICAL();
    86d0:	4b29      	ldr	r3, [pc, #164]	; (8778 <xQueueSemaphoreTake+0x488>)
    86d2:	4798      	blx	r3
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
    86d4:	69fb      	ldr	r3, [r7, #28]
    86d6:	0018      	movs	r0, r3
    86d8:	4b28      	ldr	r3, [pc, #160]	; (877c <xQueueSemaphoreTake+0x48c>)
    86da:	4798      	blx	r3
    86dc:	0003      	movs	r3, r0
    86de:	617b      	str	r3, [r7, #20]
							vTaskPriorityDisinheritAfterTimeout( ( void * ) pxQueue->pxMutexHolder, uxHighestWaitingPriority );
    86e0:	69fb      	ldr	r3, [r7, #28]
    86e2:	685b      	ldr	r3, [r3, #4]
    86e4:	697a      	ldr	r2, [r7, #20]
    86e6:	0011      	movs	r1, r2
    86e8:	0018      	movs	r0, r3
    86ea:	4b25      	ldr	r3, [pc, #148]	; (8780 <xQueueSemaphoreTake+0x490>)
    86ec:	4798      	blx	r3
						}
						taskEXIT_CRITICAL();
    86ee:	4b25      	ldr	r3, [pc, #148]	; (8784 <xQueueSemaphoreTake+0x494>)
    86f0:	4798      	blx	r3
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
    86f2:	4b25      	ldr	r3, [pc, #148]	; (8788 <xQueueSemaphoreTake+0x498>)
    86f4:	4798      	blx	r3
    86f6:	0003      	movs	r3, r0
    86f8:	0018      	movs	r0, r3
    86fa:	4b24      	ldr	r3, [pc, #144]	; (878c <xQueueSemaphoreTake+0x49c>)
    86fc:	4798      	blx	r3
    86fe:	0003      	movs	r3, r0
    8700:	001a      	movs	r2, r3
    8702:	4b23      	ldr	r3, [pc, #140]	; (8790 <xQueueSemaphoreTake+0x4a0>)
    8704:	881b      	ldrh	r3, [r3, #0]
    8706:	4013      	ands	r3, r2
    8708:	b29b      	uxth	r3, r3
    870a:	2b00      	cmp	r3, #0
    870c:	d029      	beq.n	8762 <xQueueSemaphoreTake+0x472>
    870e:	69fb      	ldr	r3, [r7, #28]
    8710:	0018      	movs	r0, r3
    8712:	4b20      	ldr	r3, [pc, #128]	; (8794 <xQueueSemaphoreTake+0x4a4>)
    8714:	4798      	blx	r3
    8716:	0003      	movs	r3, r0
    8718:	001a      	movs	r2, r3
    871a:	4b1d      	ldr	r3, [pc, #116]	; (8790 <xQueueSemaphoreTake+0x4a0>)
    871c:	881b      	ldrh	r3, [r3, #0]
    871e:	4013      	ands	r3, r2
    8720:	b29b      	uxth	r3, r3
    8722:	2b00      	cmp	r3, #0
    8724:	d01d      	beq.n	8762 <xQueueSemaphoreTake+0x472>
    8726:	69fb      	ldr	r3, [r7, #28]
    8728:	0018      	movs	r0, r3
    872a:	4b1b      	ldr	r3, [pc, #108]	; (8798 <xQueueSemaphoreTake+0x4a8>)
    872c:	4798      	blx	r3
    872e:	0003      	movs	r3, r0
    8730:	001a      	movs	r2, r3
    8732:	4b1a      	ldr	r3, [pc, #104]	; (879c <xQueueSemaphoreTake+0x4ac>)
    8734:	5c9b      	ldrb	r3, [r3, r2]
    8736:	3350      	adds	r3, #80	; 0x50
    8738:	b2db      	uxtb	r3, r3
    873a:	001d      	movs	r5, r3
    873c:	69fb      	ldr	r3, [r7, #28]
    873e:	0018      	movs	r0, r3
    8740:	4b15      	ldr	r3, [pc, #84]	; (8798 <xQueueSemaphoreTake+0x4a8>)
    8742:	4798      	blx	r3
    8744:	0003      	movs	r3, r0
    8746:	001a      	movs	r2, r3
    8748:	4b14      	ldr	r3, [pc, #80]	; (879c <xQueueSemaphoreTake+0x4ac>)
    874a:	5c9c      	ldrb	r4, [r3, r2]
    874c:	69fb      	ldr	r3, [r7, #28]
    874e:	0018      	movs	r0, r3
    8750:	4b13      	ldr	r3, [pc, #76]	; (87a0 <xQueueSemaphoreTake+0x4b0>)
    8752:	4798      	blx	r3
    8754:	0003      	movs	r3, r0
    8756:	b2db      	uxtb	r3, r3
    8758:	001a      	movs	r2, r3
    875a:	0021      	movs	r1, r4
    875c:	0028      	movs	r0, r5
    875e:	4b11      	ldr	r3, [pc, #68]	; (87a4 <xQueueSemaphoreTake+0x4b4>)
    8760:	4798      	blx	r3
				return errQUEUE_EMPTY;
    8762:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
    8764:	0018      	movs	r0, r3
    8766:	46bd      	mov	sp, r7
    8768:	b00a      	add	sp, #40	; 0x28
    876a:	bdb0      	pop	{r4, r5, r7, pc}
    876c:	00008949 	.word	0x00008949
    8770:	0000931d 	.word	0x0000931d
    8774:	00008a39 	.word	0x00008a39
    8778:	00007049 	.word	0x00007049
    877c:	000087eb 	.word	0x000087eb
    8780:	0000a09d 	.word	0x0000a09d
    8784:	0000706d 	.word	0x0000706d
    8788:	000052e1 	.word	0x000052e1
    878c:	00005045 	.word	0x00005045
    8790:	20000100 	.word	0x20000100
    8794:	00005105 	.word	0x00005105
    8798:	00005005 	.word	0x00005005
    879c:	200000f4 	.word	0x200000f4
    87a0:	000050e5 	.word	0x000050e5
    87a4:	00005a3d 	.word	0x00005a3d

000087a8 <uxQueueGetQueueNumber>:
/*-----------------------------------------------------------*/

#if ( configUSE_TRACE_FACILITY == 1 )

	UBaseType_t uxQueueGetQueueNumber( QueueHandle_t xQueue )
	{
    87a8:	b580      	push	{r7, lr}
    87aa:	b082      	sub	sp, #8
    87ac:	af00      	add	r7, sp, #0
    87ae:	6078      	str	r0, [r7, #4]
		return ( ( Queue_t * ) xQueue )->uxQueueNumber;
    87b0:	687b      	ldr	r3, [r7, #4]
    87b2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
	}
    87b4:	0018      	movs	r0, r3
    87b6:	46bd      	mov	sp, r7
    87b8:	b002      	add	sp, #8
    87ba:	bd80      	pop	{r7, pc}

000087bc <vQueueSetQueueNumber>:
/*-----------------------------------------------------------*/

#if ( configUSE_TRACE_FACILITY == 1 )

	void vQueueSetQueueNumber( QueueHandle_t xQueue, UBaseType_t uxQueueNumber )
	{
    87bc:	b580      	push	{r7, lr}
    87be:	b082      	sub	sp, #8
    87c0:	af00      	add	r7, sp, #0
    87c2:	6078      	str	r0, [r7, #4]
    87c4:	6039      	str	r1, [r7, #0]
		( ( Queue_t * ) xQueue )->uxQueueNumber = uxQueueNumber;
    87c6:	687b      	ldr	r3, [r7, #4]
    87c8:	683a      	ldr	r2, [r7, #0]
    87ca:	64da      	str	r2, [r3, #76]	; 0x4c
	}
    87cc:	46c0      	nop			; (mov r8, r8)
    87ce:	46bd      	mov	sp, r7
    87d0:	b002      	add	sp, #8
    87d2:	bd80      	pop	{r7, pc}

000087d4 <ucQueueGetQueueType>:
/*-----------------------------------------------------------*/

#if ( configUSE_TRACE_FACILITY == 1 )

	uint8_t ucQueueGetQueueType( QueueHandle_t xQueue )
	{
    87d4:	b580      	push	{r7, lr}
    87d6:	b082      	sub	sp, #8
    87d8:	af00      	add	r7, sp, #0
    87da:	6078      	str	r0, [r7, #4]
		return ( ( Queue_t * ) xQueue )->ucQueueType;
    87dc:	687b      	ldr	r3, [r7, #4]
    87de:	2250      	movs	r2, #80	; 0x50
    87e0:	5c9b      	ldrb	r3, [r3, r2]
	}
    87e2:	0018      	movs	r0, r3
    87e4:	46bd      	mov	sp, r7
    87e6:	b002      	add	sp, #8
    87e8:	bd80      	pop	{r7, pc}

000087ea <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
    87ea:	b580      	push	{r7, lr}
    87ec:	b084      	sub	sp, #16
    87ee:	af00      	add	r7, sp, #0
    87f0:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0 )
    87f2:	687b      	ldr	r3, [r7, #4]
    87f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    87f6:	2b00      	cmp	r3, #0
    87f8:	d006      	beq.n	8808 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = configMAX_PRIORITIES - listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
    87fa:	687b      	ldr	r3, [r7, #4]
    87fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    87fe:	681b      	ldr	r3, [r3, #0]
    8800:	2205      	movs	r2, #5
    8802:	1ad3      	subs	r3, r2, r3
    8804:	60fb      	str	r3, [r7, #12]
    8806:	e001      	b.n	880c <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
    8808:	2300      	movs	r3, #0
    880a:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
    880c:	68fb      	ldr	r3, [r7, #12]
	}
    880e:	0018      	movs	r0, r3
    8810:	46bd      	mov	sp, r7
    8812:	b004      	add	sp, #16
    8814:	bd80      	pop	{r7, pc}
	...

00008818 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
    8818:	b580      	push	{r7, lr}
    881a:	b086      	sub	sp, #24
    881c:	af00      	add	r7, sp, #0
    881e:	60f8      	str	r0, [r7, #12]
    8820:	60b9      	str	r1, [r7, #8]
    8822:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
    8824:	2300      	movs	r3, #0
    8826:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
    8828:	68fb      	ldr	r3, [r7, #12]
    882a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    882c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
    882e:	68fb      	ldr	r3, [r7, #12]
    8830:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    8832:	2b00      	cmp	r3, #0
    8834:	d10e      	bne.n	8854 <prvCopyDataToQueue+0x3c>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
    8836:	68fb      	ldr	r3, [r7, #12]
    8838:	681b      	ldr	r3, [r3, #0]
    883a:	2b00      	cmp	r3, #0
    883c:	d14e      	bne.n	88dc <prvCopyDataToQueue+0xc4>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
    883e:	68fb      	ldr	r3, [r7, #12]
    8840:	685b      	ldr	r3, [r3, #4]
    8842:	0018      	movs	r0, r3
    8844:	4b2a      	ldr	r3, [pc, #168]	; (88f0 <prvCopyDataToQueue+0xd8>)
    8846:	4798      	blx	r3
    8848:	0003      	movs	r3, r0
    884a:	617b      	str	r3, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
    884c:	68fb      	ldr	r3, [r7, #12]
    884e:	2200      	movs	r2, #0
    8850:	605a      	str	r2, [r3, #4]
    8852:	e043      	b.n	88dc <prvCopyDataToQueue+0xc4>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
    8854:	687b      	ldr	r3, [r7, #4]
    8856:	2b00      	cmp	r3, #0
    8858:	d119      	bne.n	888e <prvCopyDataToQueue+0x76>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
    885a:	68fb      	ldr	r3, [r7, #12]
    885c:	6898      	ldr	r0, [r3, #8]
    885e:	68fb      	ldr	r3, [r7, #12]
    8860:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    8862:	68bb      	ldr	r3, [r7, #8]
    8864:	0019      	movs	r1, r3
    8866:	4b23      	ldr	r3, [pc, #140]	; (88f4 <prvCopyDataToQueue+0xdc>)
    8868:	4798      	blx	r3
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
    886a:	68fb      	ldr	r3, [r7, #12]
    886c:	689a      	ldr	r2, [r3, #8]
    886e:	68fb      	ldr	r3, [r7, #12]
    8870:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    8872:	18d2      	adds	r2, r2, r3
    8874:	68fb      	ldr	r3, [r7, #12]
    8876:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
    8878:	68fb      	ldr	r3, [r7, #12]
    887a:	689a      	ldr	r2, [r3, #8]
    887c:	68fb      	ldr	r3, [r7, #12]
    887e:	685b      	ldr	r3, [r3, #4]
    8880:	429a      	cmp	r2, r3
    8882:	d32b      	bcc.n	88dc <prvCopyDataToQueue+0xc4>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
    8884:	68fb      	ldr	r3, [r7, #12]
    8886:	681a      	ldr	r2, [r3, #0]
    8888:	68fb      	ldr	r3, [r7, #12]
    888a:	609a      	str	r2, [r3, #8]
    888c:	e026      	b.n	88dc <prvCopyDataToQueue+0xc4>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    888e:	68fb      	ldr	r3, [r7, #12]
    8890:	68d8      	ldr	r0, [r3, #12]
    8892:	68fb      	ldr	r3, [r7, #12]
    8894:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    8896:	68bb      	ldr	r3, [r7, #8]
    8898:	0019      	movs	r1, r3
    889a:	4b16      	ldr	r3, [pc, #88]	; (88f4 <prvCopyDataToQueue+0xdc>)
    889c:	4798      	blx	r3
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
    889e:	68fb      	ldr	r3, [r7, #12]
    88a0:	68da      	ldr	r2, [r3, #12]
    88a2:	68fb      	ldr	r3, [r7, #12]
    88a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    88a6:	425b      	negs	r3, r3
    88a8:	18d2      	adds	r2, r2, r3
    88aa:	68fb      	ldr	r3, [r7, #12]
    88ac:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
    88ae:	68fb      	ldr	r3, [r7, #12]
    88b0:	68da      	ldr	r2, [r3, #12]
    88b2:	68fb      	ldr	r3, [r7, #12]
    88b4:	681b      	ldr	r3, [r3, #0]
    88b6:	429a      	cmp	r2, r3
    88b8:	d207      	bcs.n	88ca <prvCopyDataToQueue+0xb2>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
    88ba:	68fb      	ldr	r3, [r7, #12]
    88bc:	685a      	ldr	r2, [r3, #4]
    88be:	68fb      	ldr	r3, [r7, #12]
    88c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    88c2:	425b      	negs	r3, r3
    88c4:	18d2      	adds	r2, r2, r3
    88c6:	68fb      	ldr	r3, [r7, #12]
    88c8:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
    88ca:	687b      	ldr	r3, [r7, #4]
    88cc:	2b02      	cmp	r3, #2
    88ce:	d105      	bne.n	88dc <prvCopyDataToQueue+0xc4>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
    88d0:	693b      	ldr	r3, [r7, #16]
    88d2:	2b00      	cmp	r3, #0
    88d4:	d002      	beq.n	88dc <prvCopyDataToQueue+0xc4>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
    88d6:	693b      	ldr	r3, [r7, #16]
    88d8:	3b01      	subs	r3, #1
    88da:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
    88dc:	693b      	ldr	r3, [r7, #16]
    88de:	1c5a      	adds	r2, r3, #1
    88e0:	68fb      	ldr	r3, [r7, #12]
    88e2:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
    88e4:	697b      	ldr	r3, [r7, #20]
}
    88e6:	0018      	movs	r0, r3
    88e8:	46bd      	mov	sp, r7
    88ea:	b006      	add	sp, #24
    88ec:	bd80      	pop	{r7, pc}
    88ee:	46c0      	nop			; (mov r8, r8)
    88f0:	00009f35 	.word	0x00009f35
    88f4:	000217e5 	.word	0x000217e5

000088f8 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
    88f8:	b580      	push	{r7, lr}
    88fa:	b082      	sub	sp, #8
    88fc:	af00      	add	r7, sp, #0
    88fe:	6078      	str	r0, [r7, #4]
    8900:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
    8902:	687b      	ldr	r3, [r7, #4]
    8904:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    8906:	2b00      	cmp	r3, #0
    8908:	d018      	beq.n	893c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
    890a:	687b      	ldr	r3, [r7, #4]
    890c:	68da      	ldr	r2, [r3, #12]
    890e:	687b      	ldr	r3, [r7, #4]
    8910:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    8912:	18d2      	adds	r2, r2, r3
    8914:	687b      	ldr	r3, [r7, #4]
    8916:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
    8918:	687b      	ldr	r3, [r7, #4]
    891a:	68da      	ldr	r2, [r3, #12]
    891c:	687b      	ldr	r3, [r7, #4]
    891e:	685b      	ldr	r3, [r3, #4]
    8920:	429a      	cmp	r2, r3
    8922:	d303      	bcc.n	892c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
    8924:	687b      	ldr	r3, [r7, #4]
    8926:	681a      	ldr	r2, [r3, #0]
    8928:	687b      	ldr	r3, [r7, #4]
    892a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
    892c:	687b      	ldr	r3, [r7, #4]
    892e:	68d9      	ldr	r1, [r3, #12]
    8930:	687b      	ldr	r3, [r7, #4]
    8932:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    8934:	683b      	ldr	r3, [r7, #0]
    8936:	0018      	movs	r0, r3
    8938:	4b02      	ldr	r3, [pc, #8]	; (8944 <prvCopyDataFromQueue+0x4c>)
    893a:	4798      	blx	r3
	}
}
    893c:	46c0      	nop			; (mov r8, r8)
    893e:	46bd      	mov	sp, r7
    8940:	b002      	add	sp, #8
    8942:	bd80      	pop	{r7, pc}
    8944:	000217e5 	.word	0x000217e5

00008948 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
    8948:	b580      	push	{r7, lr}
    894a:	b084      	sub	sp, #16
    894c:	af00      	add	r7, sp, #0
    894e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
    8950:	4b34      	ldr	r3, [pc, #208]	; (8a24 <prvUnlockQueue+0xdc>)
    8952:	4798      	blx	r3
	{
		int8_t cTxLock = pxQueue->cTxLock;
    8954:	230f      	movs	r3, #15
    8956:	18fb      	adds	r3, r7, r3
    8958:	687a      	ldr	r2, [r7, #4]
    895a:	2145      	movs	r1, #69	; 0x45
    895c:	5c52      	ldrb	r2, [r2, r1]
    895e:	701a      	strb	r2, [r3, #0]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
    8960:	e022      	b.n	89a8 <prvUnlockQueue+0x60>
		{
			/* Data was posted while the queue was locked.  Are any tasks
			blocked waiting for data to become available? */
			#if ( configUSE_QUEUE_SETS == 1 )
			{
				if( pxQueue->pxQueueSetContainer != NULL )
    8962:	687b      	ldr	r3, [r7, #4]
    8964:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    8966:	2b00      	cmp	r3, #0
    8968:	d009      	beq.n	897e <prvUnlockQueue+0x36>
				{
					if( prvNotifyQueueSetContainer( pxQueue, queueSEND_TO_BACK ) != pdFALSE )
    896a:	687b      	ldr	r3, [r7, #4]
    896c:	2100      	movs	r1, #0
    896e:	0018      	movs	r0, r3
    8970:	4b2d      	ldr	r3, [pc, #180]	; (8a28 <prvUnlockQueue+0xe0>)
    8972:	4798      	blx	r3
    8974:	1e03      	subs	r3, r0, #0
    8976:	d00f      	beq.n	8998 <prvUnlockQueue+0x50>
					{
						/* The queue is a member of a queue set, and posting to
						the queue set caused a higher priority task to unblock.
						A context switch is required. */
						vTaskMissedYield();
    8978:	4b2c      	ldr	r3, [pc, #176]	; (8a2c <prvUnlockQueue+0xe4>)
    897a:	4798      	blx	r3
    897c:	e00c      	b.n	8998 <prvUnlockQueue+0x50>
				else
				{
					/* Tasks that are removed from the event list will get
					added to the pending ready list as the scheduler is still
					suspended. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    897e:	687b      	ldr	r3, [r7, #4]
    8980:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    8982:	2b00      	cmp	r3, #0
    8984:	d017      	beq.n	89b6 <prvUnlockQueue+0x6e>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
    8986:	687b      	ldr	r3, [r7, #4]
    8988:	3324      	adds	r3, #36	; 0x24
    898a:	0018      	movs	r0, r3
    898c:	4b28      	ldr	r3, [pc, #160]	; (8a30 <prvUnlockQueue+0xe8>)
    898e:	4798      	blx	r3
    8990:	1e03      	subs	r3, r0, #0
    8992:	d001      	beq.n	8998 <prvUnlockQueue+0x50>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							vTaskMissedYield();
    8994:	4b25      	ldr	r3, [pc, #148]	; (8a2c <prvUnlockQueue+0xe4>)
    8996:	4798      	blx	r3
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
    8998:	230f      	movs	r3, #15
    899a:	18fb      	adds	r3, r7, r3
    899c:	781b      	ldrb	r3, [r3, #0]
    899e:	3b01      	subs	r3, #1
    89a0:	b2da      	uxtb	r2, r3
    89a2:	230f      	movs	r3, #15
    89a4:	18fb      	adds	r3, r7, r3
    89a6:	701a      	strb	r2, [r3, #0]
		while( cTxLock > queueLOCKED_UNMODIFIED )
    89a8:	230f      	movs	r3, #15
    89aa:	18fb      	adds	r3, r7, r3
    89ac:	781b      	ldrb	r3, [r3, #0]
    89ae:	b25b      	sxtb	r3, r3
    89b0:	2b00      	cmp	r3, #0
    89b2:	dcd6      	bgt.n	8962 <prvUnlockQueue+0x1a>
    89b4:	e000      	b.n	89b8 <prvUnlockQueue+0x70>
						break;
    89b6:	46c0      	nop			; (mov r8, r8)
		}

		pxQueue->cTxLock = queueUNLOCKED;
    89b8:	687b      	ldr	r3, [r7, #4]
    89ba:	2245      	movs	r2, #69	; 0x45
    89bc:	21ff      	movs	r1, #255	; 0xff
    89be:	5499      	strb	r1, [r3, r2]
	}
	taskEXIT_CRITICAL();
    89c0:	4b1c      	ldr	r3, [pc, #112]	; (8a34 <prvUnlockQueue+0xec>)
    89c2:	4798      	blx	r3

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
    89c4:	4b17      	ldr	r3, [pc, #92]	; (8a24 <prvUnlockQueue+0xdc>)
    89c6:	4798      	blx	r3
	{
		int8_t cRxLock = pxQueue->cRxLock;
    89c8:	230e      	movs	r3, #14
    89ca:	18fb      	adds	r3, r7, r3
    89cc:	687a      	ldr	r2, [r7, #4]
    89ce:	2144      	movs	r1, #68	; 0x44
    89d0:	5c52      	ldrb	r2, [r2, r1]
    89d2:	701a      	strb	r2, [r3, #0]

		while( cRxLock > queueLOCKED_UNMODIFIED )
    89d4:	e014      	b.n	8a00 <prvUnlockQueue+0xb8>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
    89d6:	687b      	ldr	r3, [r7, #4]
    89d8:	691b      	ldr	r3, [r3, #16]
    89da:	2b00      	cmp	r3, #0
    89dc:	d017      	beq.n	8a0e <prvUnlockQueue+0xc6>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
    89de:	687b      	ldr	r3, [r7, #4]
    89e0:	3310      	adds	r3, #16
    89e2:	0018      	movs	r0, r3
    89e4:	4b12      	ldr	r3, [pc, #72]	; (8a30 <prvUnlockQueue+0xe8>)
    89e6:	4798      	blx	r3
    89e8:	1e03      	subs	r3, r0, #0
    89ea:	d001      	beq.n	89f0 <prvUnlockQueue+0xa8>
				{
					vTaskMissedYield();
    89ec:	4b0f      	ldr	r3, [pc, #60]	; (8a2c <prvUnlockQueue+0xe4>)
    89ee:	4798      	blx	r3
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
    89f0:	230e      	movs	r3, #14
    89f2:	18fb      	adds	r3, r7, r3
    89f4:	781b      	ldrb	r3, [r3, #0]
    89f6:	3b01      	subs	r3, #1
    89f8:	b2da      	uxtb	r2, r3
    89fa:	230e      	movs	r3, #14
    89fc:	18fb      	adds	r3, r7, r3
    89fe:	701a      	strb	r2, [r3, #0]
		while( cRxLock > queueLOCKED_UNMODIFIED )
    8a00:	230e      	movs	r3, #14
    8a02:	18fb      	adds	r3, r7, r3
    8a04:	781b      	ldrb	r3, [r3, #0]
    8a06:	b25b      	sxtb	r3, r3
    8a08:	2b00      	cmp	r3, #0
    8a0a:	dce4      	bgt.n	89d6 <prvUnlockQueue+0x8e>
    8a0c:	e000      	b.n	8a10 <prvUnlockQueue+0xc8>
			}
			else
			{
				break;
    8a0e:	46c0      	nop			; (mov r8, r8)
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
    8a10:	687b      	ldr	r3, [r7, #4]
    8a12:	2244      	movs	r2, #68	; 0x44
    8a14:	21ff      	movs	r1, #255	; 0xff
    8a16:	5499      	strb	r1, [r3, r2]
	}
	taskEXIT_CRITICAL();
    8a18:	4b06      	ldr	r3, [pc, #24]	; (8a34 <prvUnlockQueue+0xec>)
    8a1a:	4798      	blx	r3
}
    8a1c:	46c0      	nop			; (mov r8, r8)
    8a1e:	46bd      	mov	sp, r7
    8a20:	b004      	add	sp, #16
    8a22:	bd80      	pop	{r7, pc}
    8a24:	00007049 	.word	0x00007049
    8a28:	00008b1d 	.word	0x00008b1d
    8a2c:	00009af1 	.word	0x00009af1
    8a30:	000098dd 	.word	0x000098dd
    8a34:	0000706d 	.word	0x0000706d

00008a38 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
    8a38:	b580      	push	{r7, lr}
    8a3a:	b084      	sub	sp, #16
    8a3c:	af00      	add	r7, sp, #0
    8a3e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
    8a40:	4b08      	ldr	r3, [pc, #32]	; (8a64 <prvIsQueueEmpty+0x2c>)
    8a42:	4798      	blx	r3
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
    8a44:	687b      	ldr	r3, [r7, #4]
    8a46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    8a48:	2b00      	cmp	r3, #0
    8a4a:	d102      	bne.n	8a52 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
    8a4c:	2301      	movs	r3, #1
    8a4e:	60fb      	str	r3, [r7, #12]
    8a50:	e001      	b.n	8a56 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
    8a52:	2300      	movs	r3, #0
    8a54:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
    8a56:	4b04      	ldr	r3, [pc, #16]	; (8a68 <prvIsQueueEmpty+0x30>)
    8a58:	4798      	blx	r3

	return xReturn;
    8a5a:	68fb      	ldr	r3, [r7, #12]
}
    8a5c:	0018      	movs	r0, r3
    8a5e:	46bd      	mov	sp, r7
    8a60:	b004      	add	sp, #16
    8a62:	bd80      	pop	{r7, pc}
    8a64:	00007049 	.word	0x00007049
    8a68:	0000706d 	.word	0x0000706d

00008a6c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
    8a6c:	b580      	push	{r7, lr}
    8a6e:	b084      	sub	sp, #16
    8a70:	af00      	add	r7, sp, #0
    8a72:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
    8a74:	4b09      	ldr	r3, [pc, #36]	; (8a9c <prvIsQueueFull+0x30>)
    8a76:	4798      	blx	r3
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
    8a78:	687b      	ldr	r3, [r7, #4]
    8a7a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    8a7c:	687b      	ldr	r3, [r7, #4]
    8a7e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    8a80:	429a      	cmp	r2, r3
    8a82:	d102      	bne.n	8a8a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
    8a84:	2301      	movs	r3, #1
    8a86:	60fb      	str	r3, [r7, #12]
    8a88:	e001      	b.n	8a8e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
    8a8a:	2300      	movs	r3, #0
    8a8c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
    8a8e:	4b04      	ldr	r3, [pc, #16]	; (8aa0 <prvIsQueueFull+0x34>)
    8a90:	4798      	blx	r3

	return xReturn;
    8a92:	68fb      	ldr	r3, [r7, #12]
}
    8a94:	0018      	movs	r0, r3
    8a96:	46bd      	mov	sp, r7
    8a98:	b004      	add	sp, #16
    8a9a:	bd80      	pop	{r7, pc}
    8a9c:	00007049 	.word	0x00007049
    8aa0:	0000706d 	.word	0x0000706d

00008aa4 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
    8aa4:	b580      	push	{r7, lr}
    8aa6:	b086      	sub	sp, #24
    8aa8:	af00      	add	r7, sp, #0
    8aaa:	60f8      	str	r0, [r7, #12]
    8aac:	60b9      	str	r1, [r7, #8]
    8aae:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
    8ab0:	68fb      	ldr	r3, [r7, #12]
    8ab2:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
    8ab4:	4b15      	ldr	r3, [pc, #84]	; (8b0c <vQueueWaitForMessageRestricted+0x68>)
    8ab6:	4798      	blx	r3
    8ab8:	697b      	ldr	r3, [r7, #20]
    8aba:	2244      	movs	r2, #68	; 0x44
    8abc:	5c9b      	ldrb	r3, [r3, r2]
    8abe:	b25b      	sxtb	r3, r3
    8ac0:	3301      	adds	r3, #1
    8ac2:	d103      	bne.n	8acc <vQueueWaitForMessageRestricted+0x28>
    8ac4:	697b      	ldr	r3, [r7, #20]
    8ac6:	2244      	movs	r2, #68	; 0x44
    8ac8:	2100      	movs	r1, #0
    8aca:	5499      	strb	r1, [r3, r2]
    8acc:	697b      	ldr	r3, [r7, #20]
    8ace:	2245      	movs	r2, #69	; 0x45
    8ad0:	5c9b      	ldrb	r3, [r3, r2]
    8ad2:	b25b      	sxtb	r3, r3
    8ad4:	3301      	adds	r3, #1
    8ad6:	d103      	bne.n	8ae0 <vQueueWaitForMessageRestricted+0x3c>
    8ad8:	697b      	ldr	r3, [r7, #20]
    8ada:	2245      	movs	r2, #69	; 0x45
    8adc:	2100      	movs	r1, #0
    8ade:	5499      	strb	r1, [r3, r2]
    8ae0:	4b0b      	ldr	r3, [pc, #44]	; (8b10 <vQueueWaitForMessageRestricted+0x6c>)
    8ae2:	4798      	blx	r3
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
    8ae4:	697b      	ldr	r3, [r7, #20]
    8ae6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    8ae8:	2b00      	cmp	r3, #0
    8aea:	d106      	bne.n	8afa <vQueueWaitForMessageRestricted+0x56>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
    8aec:	697b      	ldr	r3, [r7, #20]
    8aee:	3324      	adds	r3, #36	; 0x24
    8af0:	687a      	ldr	r2, [r7, #4]
    8af2:	68b9      	ldr	r1, [r7, #8]
    8af4:	0018      	movs	r0, r3
    8af6:	4b07      	ldr	r3, [pc, #28]	; (8b14 <vQueueWaitForMessageRestricted+0x70>)
    8af8:	4798      	blx	r3
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
    8afa:	697b      	ldr	r3, [r7, #20]
    8afc:	0018      	movs	r0, r3
    8afe:	4b06      	ldr	r3, [pc, #24]	; (8b18 <vQueueWaitForMessageRestricted+0x74>)
    8b00:	4798      	blx	r3
	}
    8b02:	46c0      	nop			; (mov r8, r8)
    8b04:	46bd      	mov	sp, r7
    8b06:	b006      	add	sp, #24
    8b08:	bd80      	pop	{r7, pc}
    8b0a:	46c0      	nop			; (mov r8, r8)
    8b0c:	00007049 	.word	0x00007049
    8b10:	0000706d 	.word	0x0000706d
    8b14:	000097fd 	.word	0x000097fd
    8b18:	00008949 	.word	0x00008949

00008b1c <prvNotifyQueueSetContainer>:
/*-----------------------------------------------------------*/

#if ( configUSE_QUEUE_SETS == 1 )

	static BaseType_t prvNotifyQueueSetContainer( const Queue_t * const pxQueue, const BaseType_t xCopyPosition )
	{
    8b1c:	b5b0      	push	{r4, r5, r7, lr}
    8b1e:	b086      	sub	sp, #24
    8b20:	af00      	add	r7, sp, #0
    8b22:	6078      	str	r0, [r7, #4]
    8b24:	6039      	str	r1, [r7, #0]
	Queue_t *pxQueueSetContainer = pxQueue->pxQueueSetContainer;
    8b26:	687b      	ldr	r3, [r7, #4]
    8b28:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    8b2a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
    8b2c:	2300      	movs	r3, #0
    8b2e:	617b      	str	r3, [r7, #20]

		/* This function must be called form a critical section. */

		configASSERT( pxQueueSetContainer );
    8b30:	693b      	ldr	r3, [r7, #16]
    8b32:	2b00      	cmp	r3, #0
    8b34:	d101      	bne.n	8b3a <prvNotifyQueueSetContainer+0x1e>
    8b36:	b672      	cpsid	i
    8b38:	e7fe      	b.n	8b38 <prvNotifyQueueSetContainer+0x1c>
		configASSERT( pxQueueSetContainer->uxMessagesWaiting < pxQueueSetContainer->uxLength );
    8b3a:	693b      	ldr	r3, [r7, #16]
    8b3c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    8b3e:	693b      	ldr	r3, [r7, #16]
    8b40:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    8b42:	429a      	cmp	r2, r3
    8b44:	d301      	bcc.n	8b4a <prvNotifyQueueSetContainer+0x2e>
    8b46:	b672      	cpsid	i
    8b48:	e7fe      	b.n	8b48 <prvNotifyQueueSetContainer+0x2c>

		if( pxQueueSetContainer->uxMessagesWaiting < pxQueueSetContainer->uxLength )
    8b4a:	693b      	ldr	r3, [r7, #16]
    8b4c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    8b4e:	693b      	ldr	r3, [r7, #16]
    8b50:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    8b52:	429a      	cmp	r2, r3
    8b54:	d300      	bcc.n	8b58 <prvNotifyQueueSetContainer+0x3c>
    8b56:	e08b      	b.n	8c70 <prvNotifyQueueSetContainer+0x154>
		{
			const int8_t cTxLock = pxQueueSetContainer->cTxLock;
    8b58:	230f      	movs	r3, #15
    8b5a:	18fb      	adds	r3, r7, r3
    8b5c:	693a      	ldr	r2, [r7, #16]
    8b5e:	2145      	movs	r1, #69	; 0x45
    8b60:	5c52      	ldrb	r2, [r2, r1]
    8b62:	701a      	strb	r2, [r3, #0]

			traceQUEUE_SEND( pxQueueSetContainer );
    8b64:	4b45      	ldr	r3, [pc, #276]	; (8c7c <prvNotifyQueueSetContainer+0x160>)
    8b66:	4798      	blx	r3
    8b68:	0003      	movs	r3, r0
    8b6a:	0018      	movs	r0, r3
    8b6c:	4b44      	ldr	r3, [pc, #272]	; (8c80 <prvNotifyQueueSetContainer+0x164>)
    8b6e:	4798      	blx	r3
    8b70:	0003      	movs	r3, r0
    8b72:	001a      	movs	r2, r3
    8b74:	4b43      	ldr	r3, [pc, #268]	; (8c84 <prvNotifyQueueSetContainer+0x168>)
    8b76:	881b      	ldrh	r3, [r3, #0]
    8b78:	4013      	ands	r3, r2
    8b7a:	b29b      	uxth	r3, r3
    8b7c:	2b00      	cmp	r3, #0
    8b7e:	d02e      	beq.n	8bde <prvNotifyQueueSetContainer+0xc2>
    8b80:	693b      	ldr	r3, [r7, #16]
    8b82:	0018      	movs	r0, r3
    8b84:	4b40      	ldr	r3, [pc, #256]	; (8c88 <prvNotifyQueueSetContainer+0x16c>)
    8b86:	4798      	blx	r3
    8b88:	0003      	movs	r3, r0
    8b8a:	001a      	movs	r2, r3
    8b8c:	4b3d      	ldr	r3, [pc, #244]	; (8c84 <prvNotifyQueueSetContainer+0x168>)
    8b8e:	881b      	ldrh	r3, [r3, #0]
    8b90:	4013      	ands	r3, r2
    8b92:	b29b      	uxth	r3, r3
    8b94:	2b00      	cmp	r3, #0
    8b96:	d022      	beq.n	8bde <prvNotifyQueueSetContainer+0xc2>
    8b98:	683b      	ldr	r3, [r7, #0]
    8b9a:	2b00      	cmp	r3, #0
    8b9c:	d10b      	bne.n	8bb6 <prvNotifyQueueSetContainer+0x9a>
    8b9e:	693b      	ldr	r3, [r7, #16]
    8ba0:	0018      	movs	r0, r3
    8ba2:	4b3a      	ldr	r3, [pc, #232]	; (8c8c <prvNotifyQueueSetContainer+0x170>)
    8ba4:	4798      	blx	r3
    8ba6:	0003      	movs	r3, r0
    8ba8:	001a      	movs	r2, r3
    8baa:	4b39      	ldr	r3, [pc, #228]	; (8c90 <prvNotifyQueueSetContainer+0x174>)
    8bac:	5c9b      	ldrb	r3, [r3, r2]
    8bae:	3320      	adds	r3, #32
    8bb0:	b2db      	uxtb	r3, r3
    8bb2:	001d      	movs	r5, r3
    8bb4:	e000      	b.n	8bb8 <prvNotifyQueueSetContainer+0x9c>
    8bb6:	2525      	movs	r5, #37	; 0x25
    8bb8:	693b      	ldr	r3, [r7, #16]
    8bba:	0018      	movs	r0, r3
    8bbc:	4b33      	ldr	r3, [pc, #204]	; (8c8c <prvNotifyQueueSetContainer+0x170>)
    8bbe:	4798      	blx	r3
    8bc0:	0003      	movs	r3, r0
    8bc2:	001a      	movs	r2, r3
    8bc4:	4b32      	ldr	r3, [pc, #200]	; (8c90 <prvNotifyQueueSetContainer+0x174>)
    8bc6:	5c9c      	ldrb	r4, [r3, r2]
    8bc8:	693b      	ldr	r3, [r7, #16]
    8bca:	0018      	movs	r0, r3
    8bcc:	4b31      	ldr	r3, [pc, #196]	; (8c94 <prvNotifyQueueSetContainer+0x178>)
    8bce:	4798      	blx	r3
    8bd0:	0003      	movs	r3, r0
    8bd2:	b2db      	uxtb	r3, r3
    8bd4:	001a      	movs	r2, r3
    8bd6:	0021      	movs	r1, r4
    8bd8:	0028      	movs	r0, r5
    8bda:	4b2f      	ldr	r3, [pc, #188]	; (8c98 <prvNotifyQueueSetContainer+0x17c>)
    8bdc:	4798      	blx	r3
    8bde:	693b      	ldr	r3, [r7, #16]
    8be0:	0018      	movs	r0, r3
    8be2:	4b2a      	ldr	r3, [pc, #168]	; (8c8c <prvNotifyQueueSetContainer+0x170>)
    8be4:	4798      	blx	r3
    8be6:	0003      	movs	r3, r0
    8be8:	001a      	movs	r2, r3
    8bea:	4b29      	ldr	r3, [pc, #164]	; (8c90 <prvNotifyQueueSetContainer+0x174>)
    8bec:	5c9c      	ldrb	r4, [r3, r2]
    8bee:	693b      	ldr	r3, [r7, #16]
    8bf0:	0018      	movs	r0, r3
    8bf2:	4b28      	ldr	r3, [pc, #160]	; (8c94 <prvNotifyQueueSetContainer+0x178>)
    8bf4:	4798      	blx	r3
    8bf6:	0003      	movs	r3, r0
    8bf8:	b2dd      	uxtb	r5, r3
    8bfa:	693b      	ldr	r3, [r7, #16]
    8bfc:	0018      	movs	r0, r3
    8bfe:	4b23      	ldr	r3, [pc, #140]	; (8c8c <prvNotifyQueueSetContainer+0x170>)
    8c00:	4798      	blx	r3
    8c02:	0003      	movs	r3, r0
    8c04:	001a      	movs	r2, r3
    8c06:	4b22      	ldr	r3, [pc, #136]	; (8c90 <prvNotifyQueueSetContainer+0x174>)
    8c08:	5c9b      	ldrb	r3, [r3, r2]
    8c0a:	2b02      	cmp	r3, #2
    8c0c:	d005      	beq.n	8c1a <prvNotifyQueueSetContainer+0xfe>
    8c0e:	693b      	ldr	r3, [r7, #16]
    8c10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    8c12:	b2db      	uxtb	r3, r3
    8c14:	3301      	adds	r3, #1
    8c16:	b2db      	uxtb	r3, r3
    8c18:	e000      	b.n	8c1c <prvNotifyQueueSetContainer+0x100>
    8c1a:	2300      	movs	r3, #0
    8c1c:	001a      	movs	r2, r3
    8c1e:	0029      	movs	r1, r5
    8c20:	0020      	movs	r0, r4
    8c22:	4b1e      	ldr	r3, [pc, #120]	; (8c9c <prvNotifyQueueSetContainer+0x180>)
    8c24:	4798      	blx	r3

			/* The data copied is the handle of the queue that contains data. */
			xReturn = prvCopyDataToQueue( pxQueueSetContainer, &pxQueue, xCopyPosition );
    8c26:	683a      	ldr	r2, [r7, #0]
    8c28:	1d39      	adds	r1, r7, #4
    8c2a:	693b      	ldr	r3, [r7, #16]
    8c2c:	0018      	movs	r0, r3
    8c2e:	4b1c      	ldr	r3, [pc, #112]	; (8ca0 <prvNotifyQueueSetContainer+0x184>)
    8c30:	4798      	blx	r3
    8c32:	0003      	movs	r3, r0
    8c34:	617b      	str	r3, [r7, #20]

			if( cTxLock == queueUNLOCKED )
    8c36:	230f      	movs	r3, #15
    8c38:	18fb      	adds	r3, r7, r3
    8c3a:	781b      	ldrb	r3, [r3, #0]
    8c3c:	b25b      	sxtb	r3, r3
    8c3e:	3301      	adds	r3, #1
    8c40:	d10d      	bne.n	8c5e <prvNotifyQueueSetContainer+0x142>
			{
				if( listLIST_IS_EMPTY( &( pxQueueSetContainer->xTasksWaitingToReceive ) ) == pdFALSE )
    8c42:	693b      	ldr	r3, [r7, #16]
    8c44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    8c46:	2b00      	cmp	r3, #0
    8c48:	d012      	beq.n	8c70 <prvNotifyQueueSetContainer+0x154>
				{
					if( xTaskRemoveFromEventList( &( pxQueueSetContainer->xTasksWaitingToReceive ) ) != pdFALSE )
    8c4a:	693b      	ldr	r3, [r7, #16]
    8c4c:	3324      	adds	r3, #36	; 0x24
    8c4e:	0018      	movs	r0, r3
    8c50:	4b14      	ldr	r3, [pc, #80]	; (8ca4 <prvNotifyQueueSetContainer+0x188>)
    8c52:	4798      	blx	r3
    8c54:	1e03      	subs	r3, r0, #0
    8c56:	d00b      	beq.n	8c70 <prvNotifyQueueSetContainer+0x154>
					{
						/* The task waiting has a higher priority. */
						xReturn = pdTRUE;
    8c58:	2301      	movs	r3, #1
    8c5a:	617b      	str	r3, [r7, #20]
    8c5c:	e008      	b.n	8c70 <prvNotifyQueueSetContainer+0x154>
					mtCOVERAGE_TEST_MARKER();
				}
			}
			else
			{
				pxQueueSetContainer->cTxLock = ( int8_t ) ( cTxLock + 1 );
    8c5e:	230f      	movs	r3, #15
    8c60:	18fb      	adds	r3, r7, r3
    8c62:	781b      	ldrb	r3, [r3, #0]
    8c64:	3301      	adds	r3, #1
    8c66:	b2db      	uxtb	r3, r3
    8c68:	b259      	sxtb	r1, r3
    8c6a:	693b      	ldr	r3, [r7, #16]
    8c6c:	2245      	movs	r2, #69	; 0x45
    8c6e:	5499      	strb	r1, [r3, r2]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
    8c70:	697b      	ldr	r3, [r7, #20]
	}
    8c72:	0018      	movs	r0, r3
    8c74:	46bd      	mov	sp, r7
    8c76:	b006      	add	sp, #24
    8c78:	bdb0      	pop	{r4, r5, r7, pc}
    8c7a:	46c0      	nop			; (mov r8, r8)
    8c7c:	000052e1 	.word	0x000052e1
    8c80:	00005045 	.word	0x00005045
    8c84:	20000100 	.word	0x20000100
    8c88:	00005105 	.word	0x00005105
    8c8c:	00005005 	.word	0x00005005
    8c90:	200000f4 	.word	0x200000f4
    8c94:	000050e5 	.word	0x000050e5
    8c98:	00005a3d 	.word	0x00005a3d
    8c9c:	00006099 	.word	0x00006099
    8ca0:	00008819 	.word	0x00008819
    8ca4:	000098dd 	.word	0x000098dd

00008ca8 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
    8ca8:	b590      	push	{r4, r7, lr}
    8caa:	b08d      	sub	sp, #52	; 0x34
    8cac:	af04      	add	r7, sp, #16
    8cae:	60f8      	str	r0, [r7, #12]
    8cb0:	60b9      	str	r1, [r7, #8]
    8cb2:	603b      	str	r3, [r7, #0]
    8cb4:	1dbb      	adds	r3, r7, #6
    8cb6:	801a      	strh	r2, [r3, #0]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    8cb8:	1dbb      	adds	r3, r7, #6
    8cba:	881b      	ldrh	r3, [r3, #0]
    8cbc:	009b      	lsls	r3, r3, #2
    8cbe:	0018      	movs	r0, r3
    8cc0:	4b1d      	ldr	r3, [pc, #116]	; (8d38 <xTaskCreate+0x90>)
    8cc2:	4798      	blx	r3
    8cc4:	0003      	movs	r3, r0
    8cc6:	617b      	str	r3, [r7, #20]

			if( pxStack != NULL )
    8cc8:	697b      	ldr	r3, [r7, #20]
    8cca:	2b00      	cmp	r3, #0
    8ccc:	d010      	beq.n	8cf0 <xTaskCreate+0x48>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
    8cce:	2054      	movs	r0, #84	; 0x54
    8cd0:	4b19      	ldr	r3, [pc, #100]	; (8d38 <xTaskCreate+0x90>)
    8cd2:	4798      	blx	r3
    8cd4:	0003      	movs	r3, r0
    8cd6:	61fb      	str	r3, [r7, #28]

				if( pxNewTCB != NULL )
    8cd8:	69fb      	ldr	r3, [r7, #28]
    8cda:	2b00      	cmp	r3, #0
    8cdc:	d003      	beq.n	8ce6 <xTaskCreate+0x3e>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
    8cde:	69fb      	ldr	r3, [r7, #28]
    8ce0:	697a      	ldr	r2, [r7, #20]
    8ce2:	631a      	str	r2, [r3, #48]	; 0x30
    8ce4:	e006      	b.n	8cf4 <xTaskCreate+0x4c>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
    8ce6:	697b      	ldr	r3, [r7, #20]
    8ce8:	0018      	movs	r0, r3
    8cea:	4b14      	ldr	r3, [pc, #80]	; (8d3c <xTaskCreate+0x94>)
    8cec:	4798      	blx	r3
    8cee:	e001      	b.n	8cf4 <xTaskCreate+0x4c>
				}
			}
			else
			{
				pxNewTCB = NULL;
    8cf0:	2300      	movs	r3, #0
    8cf2:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
    8cf4:	69fb      	ldr	r3, [r7, #28]
    8cf6:	2b00      	cmp	r3, #0
    8cf8:	d016      	beq.n	8d28 <xTaskCreate+0x80>
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
    8cfa:	1dbb      	adds	r3, r7, #6
    8cfc:	881a      	ldrh	r2, [r3, #0]
    8cfe:	683c      	ldr	r4, [r7, #0]
    8d00:	68b9      	ldr	r1, [r7, #8]
    8d02:	68f8      	ldr	r0, [r7, #12]
    8d04:	2300      	movs	r3, #0
    8d06:	9303      	str	r3, [sp, #12]
    8d08:	69fb      	ldr	r3, [r7, #28]
    8d0a:	9302      	str	r3, [sp, #8]
    8d0c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    8d0e:	9301      	str	r3, [sp, #4]
    8d10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    8d12:	9300      	str	r3, [sp, #0]
    8d14:	0023      	movs	r3, r4
    8d16:	4c0a      	ldr	r4, [pc, #40]	; (8d40 <xTaskCreate+0x98>)
    8d18:	47a0      	blx	r4
			prvAddNewTaskToReadyList( pxNewTCB );
    8d1a:	69fb      	ldr	r3, [r7, #28]
    8d1c:	0018      	movs	r0, r3
    8d1e:	4b09      	ldr	r3, [pc, #36]	; (8d44 <xTaskCreate+0x9c>)
    8d20:	4798      	blx	r3
			xReturn = pdPASS;
    8d22:	2301      	movs	r3, #1
    8d24:	61bb      	str	r3, [r7, #24]
    8d26:	e002      	b.n	8d2e <xTaskCreate+0x86>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
    8d28:	2301      	movs	r3, #1
    8d2a:	425b      	negs	r3, r3
    8d2c:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
    8d2e:	69bb      	ldr	r3, [r7, #24]
	}
    8d30:	0018      	movs	r0, r3
    8d32:	46bd      	mov	sp, r7
    8d34:	b009      	add	sp, #36	; 0x24
    8d36:	bd90      	pop	{r4, r7, pc}
    8d38:	00007181 	.word	0x00007181
    8d3c:	00007245 	.word	0x00007245
    8d40:	00008d49 	.word	0x00008d49
    8d44:	00008e59 	.word	0x00008e59

00008d48 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
    8d48:	b580      	push	{r7, lr}
    8d4a:	b086      	sub	sp, #24
    8d4c:	af00      	add	r7, sp, #0
    8d4e:	60f8      	str	r0, [r7, #12]
    8d50:	60b9      	str	r1, [r7, #8]
    8d52:	607a      	str	r2, [r7, #4]
    8d54:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
    8d56:	6abb      	ldr	r3, [r7, #40]	; 0x28
    8d58:	6b18      	ldr	r0, [r3, #48]	; 0x30
    8d5a:	687b      	ldr	r3, [r7, #4]
    8d5c:	009b      	lsls	r3, r3, #2
    8d5e:	001a      	movs	r2, r3
    8d60:	21a5      	movs	r1, #165	; 0xa5
    8d62:	4b39      	ldr	r3, [pc, #228]	; (8e48 <prvInitialiseNewTask+0x100>)
    8d64:	4798      	blx	r3
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
    8d66:	6abb      	ldr	r3, [r7, #40]	; 0x28
    8d68:	6b1a      	ldr	r2, [r3, #48]	; 0x30
    8d6a:	687b      	ldr	r3, [r7, #4]
    8d6c:	4937      	ldr	r1, [pc, #220]	; (8e4c <prvInitialiseNewTask+0x104>)
    8d6e:	468c      	mov	ip, r1
    8d70:	4463      	add	r3, ip
    8d72:	009b      	lsls	r3, r3, #2
    8d74:	18d3      	adds	r3, r2, r3
    8d76:	613b      	str	r3, [r7, #16]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
    8d78:	693b      	ldr	r3, [r7, #16]
    8d7a:	2207      	movs	r2, #7
    8d7c:	4393      	bics	r3, r2
    8d7e:	613b      	str	r3, [r7, #16]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
    8d80:	693b      	ldr	r3, [r7, #16]
    8d82:	2207      	movs	r2, #7
    8d84:	4013      	ands	r3, r2
    8d86:	d001      	beq.n	8d8c <prvInitialiseNewTask+0x44>
    8d88:	b672      	cpsid	i
    8d8a:	e7fe      	b.n	8d8a <prvInitialiseNewTask+0x42>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
    8d8c:	2300      	movs	r3, #0
    8d8e:	617b      	str	r3, [r7, #20]
    8d90:	e013      	b.n	8dba <prvInitialiseNewTask+0x72>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
    8d92:	68ba      	ldr	r2, [r7, #8]
    8d94:	697b      	ldr	r3, [r7, #20]
    8d96:	18d3      	adds	r3, r2, r3
    8d98:	7818      	ldrb	r0, [r3, #0]
    8d9a:	6aba      	ldr	r2, [r7, #40]	; 0x28
    8d9c:	2134      	movs	r1, #52	; 0x34
    8d9e:	697b      	ldr	r3, [r7, #20]
    8da0:	18d3      	adds	r3, r2, r3
    8da2:	185b      	adds	r3, r3, r1
    8da4:	1c02      	adds	r2, r0, #0
    8da6:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
    8da8:	68ba      	ldr	r2, [r7, #8]
    8daa:	697b      	ldr	r3, [r7, #20]
    8dac:	18d3      	adds	r3, r2, r3
    8dae:	781b      	ldrb	r3, [r3, #0]
    8db0:	2b00      	cmp	r3, #0
    8db2:	d006      	beq.n	8dc2 <prvInitialiseNewTask+0x7a>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
    8db4:	697b      	ldr	r3, [r7, #20]
    8db6:	3301      	adds	r3, #1
    8db8:	617b      	str	r3, [r7, #20]
    8dba:	697b      	ldr	r3, [r7, #20]
    8dbc:	2b07      	cmp	r3, #7
    8dbe:	d9e8      	bls.n	8d92 <prvInitialiseNewTask+0x4a>
    8dc0:	e000      	b.n	8dc4 <prvInitialiseNewTask+0x7c>
		{
			break;
    8dc2:	46c0      	nop			; (mov r8, r8)
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
    8dc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
    8dc6:	223b      	movs	r2, #59	; 0x3b
    8dc8:	2100      	movs	r1, #0
    8dca:	5499      	strb	r1, [r3, r2]

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
    8dcc:	6a3b      	ldr	r3, [r7, #32]
    8dce:	2b04      	cmp	r3, #4
    8dd0:	d901      	bls.n	8dd6 <prvInitialiseNewTask+0x8e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
    8dd2:	2304      	movs	r3, #4
    8dd4:	623b      	str	r3, [r7, #32]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
    8dd6:	6abb      	ldr	r3, [r7, #40]	; 0x28
    8dd8:	6a3a      	ldr	r2, [r7, #32]
    8dda:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
    8ddc:	6abb      	ldr	r3, [r7, #40]	; 0x28
    8dde:	6a3a      	ldr	r2, [r7, #32]
    8de0:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
    8de2:	6abb      	ldr	r3, [r7, #40]	; 0x28
    8de4:	2200      	movs	r2, #0
    8de6:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
    8de8:	6abb      	ldr	r3, [r7, #40]	; 0x28
    8dea:	3304      	adds	r3, #4
    8dec:	0018      	movs	r0, r3
    8dee:	4b18      	ldr	r3, [pc, #96]	; (8e50 <prvInitialiseNewTask+0x108>)
    8df0:	4798      	blx	r3
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
    8df2:	6abb      	ldr	r3, [r7, #40]	; 0x28
    8df4:	3318      	adds	r3, #24
    8df6:	0018      	movs	r0, r3
    8df8:	4b15      	ldr	r3, [pc, #84]	; (8e50 <prvInitialiseNewTask+0x108>)
    8dfa:	4798      	blx	r3

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
    8dfc:	6abb      	ldr	r3, [r7, #40]	; 0x28
    8dfe:	6aba      	ldr	r2, [r7, #40]	; 0x28
    8e00:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    8e02:	6a3b      	ldr	r3, [r7, #32]
    8e04:	2205      	movs	r2, #5
    8e06:	1ad2      	subs	r2, r2, r3
    8e08:	6abb      	ldr	r3, [r7, #40]	; 0x28
    8e0a:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
    8e0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
    8e0e:	6aba      	ldr	r2, [r7, #40]	; 0x28
    8e10:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
    8e12:	6abb      	ldr	r3, [r7, #40]	; 0x28
    8e14:	2200      	movs	r2, #0
    8e16:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
    8e18:	6abb      	ldr	r3, [r7, #40]	; 0x28
    8e1a:	2250      	movs	r2, #80	; 0x50
    8e1c:	2100      	movs	r1, #0
    8e1e:	5499      	strb	r1, [r3, r2]
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
    8e20:	683a      	ldr	r2, [r7, #0]
    8e22:	68f9      	ldr	r1, [r7, #12]
    8e24:	693b      	ldr	r3, [r7, #16]
    8e26:	0018      	movs	r0, r3
    8e28:	4b0a      	ldr	r3, [pc, #40]	; (8e54 <prvInitialiseNewTask+0x10c>)
    8e2a:	4798      	blx	r3
    8e2c:	0002      	movs	r2, r0
    8e2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
    8e30:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
    8e32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    8e34:	2b00      	cmp	r3, #0
    8e36:	d002      	beq.n	8e3e <prvInitialiseNewTask+0xf6>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
    8e38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    8e3a:	6aba      	ldr	r2, [r7, #40]	; 0x28
    8e3c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
    8e3e:	46c0      	nop			; (mov r8, r8)
    8e40:	46bd      	mov	sp, r7
    8e42:	b006      	add	sp, #24
    8e44:	bd80      	pop	{r7, pc}
    8e46:	46c0      	nop			; (mov r8, r8)
    8e48:	0002181b 	.word	0x0002181b
    8e4c:	3fffffff 	.word	0x3fffffff
    8e50:	00006df9 	.word	0x00006df9
    8e54:	00006f11 	.word	0x00006f11

00008e58 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
    8e58:	b580      	push	{r7, lr}
    8e5a:	b082      	sub	sp, #8
    8e5c:	af00      	add	r7, sp, #0
    8e5e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
    8e60:	4b60      	ldr	r3, [pc, #384]	; (8fe4 <prvAddNewTaskToReadyList+0x18c>)
    8e62:	4798      	blx	r3
	{
		uxCurrentNumberOfTasks++;
    8e64:	4b60      	ldr	r3, [pc, #384]	; (8fe8 <prvAddNewTaskToReadyList+0x190>)
    8e66:	681b      	ldr	r3, [r3, #0]
    8e68:	1c5a      	adds	r2, r3, #1
    8e6a:	4b5f      	ldr	r3, [pc, #380]	; (8fe8 <prvAddNewTaskToReadyList+0x190>)
    8e6c:	601a      	str	r2, [r3, #0]
		if( pxCurrentTCB == NULL )
    8e6e:	4b5f      	ldr	r3, [pc, #380]	; (8fec <prvAddNewTaskToReadyList+0x194>)
    8e70:	681b      	ldr	r3, [r3, #0]
    8e72:	2b00      	cmp	r3, #0
    8e74:	d109      	bne.n	8e8a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
    8e76:	4b5d      	ldr	r3, [pc, #372]	; (8fec <prvAddNewTaskToReadyList+0x194>)
    8e78:	687a      	ldr	r2, [r7, #4]
    8e7a:	601a      	str	r2, [r3, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
    8e7c:	4b5a      	ldr	r3, [pc, #360]	; (8fe8 <prvAddNewTaskToReadyList+0x190>)
    8e7e:	681b      	ldr	r3, [r3, #0]
    8e80:	2b01      	cmp	r3, #1
    8e82:	d110      	bne.n	8ea6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
    8e84:	4b5a      	ldr	r3, [pc, #360]	; (8ff0 <prvAddNewTaskToReadyList+0x198>)
    8e86:	4798      	blx	r3
    8e88:	e00d      	b.n	8ea6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
    8e8a:	4b5a      	ldr	r3, [pc, #360]	; (8ff4 <prvAddNewTaskToReadyList+0x19c>)
    8e8c:	681b      	ldr	r3, [r3, #0]
    8e8e:	2b00      	cmp	r3, #0
    8e90:	d109      	bne.n	8ea6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
    8e92:	4b56      	ldr	r3, [pc, #344]	; (8fec <prvAddNewTaskToReadyList+0x194>)
    8e94:	681b      	ldr	r3, [r3, #0]
    8e96:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    8e98:	687b      	ldr	r3, [r7, #4]
    8e9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    8e9c:	429a      	cmp	r2, r3
    8e9e:	d802      	bhi.n	8ea6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
    8ea0:	4b52      	ldr	r3, [pc, #328]	; (8fec <prvAddNewTaskToReadyList+0x194>)
    8ea2:	687a      	ldr	r2, [r7, #4]
    8ea4:	601a      	str	r2, [r3, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
    8ea6:	4b54      	ldr	r3, [pc, #336]	; (8ff8 <prvAddNewTaskToReadyList+0x1a0>)
    8ea8:	681b      	ldr	r3, [r3, #0]
    8eaa:	1c5a      	adds	r2, r3, #1
    8eac:	4b52      	ldr	r3, [pc, #328]	; (8ff8 <prvAddNewTaskToReadyList+0x1a0>)
    8eae:	601a      	str	r2, [r3, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
    8eb0:	4b51      	ldr	r3, [pc, #324]	; (8ff8 <prvAddNewTaskToReadyList+0x1a0>)
    8eb2:	681a      	ldr	r2, [r3, #0]
    8eb4:	687b      	ldr	r3, [r7, #4]
    8eb6:	63da      	str	r2, [r3, #60]	; 0x3c
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );
    8eb8:	687b      	ldr	r3, [r7, #4]
    8eba:	2b00      	cmp	r3, #0
    8ebc:	d052      	beq.n	8f64 <prvAddNewTaskToReadyList+0x10c>
    8ebe:	2003      	movs	r0, #3
    8ec0:	4b4e      	ldr	r3, [pc, #312]	; (8ffc <prvAddNewTaskToReadyList+0x1a4>)
    8ec2:	4798      	blx	r3
    8ec4:	0003      	movs	r3, r0
    8ec6:	b29a      	uxth	r2, r3
    8ec8:	687b      	ldr	r3, [r7, #4]
    8eca:	0011      	movs	r1, r2
    8ecc:	0018      	movs	r0, r3
    8ece:	4b4c      	ldr	r3, [pc, #304]	; (9000 <prvAddNewTaskToReadyList+0x1a8>)
    8ed0:	4798      	blx	r3
    8ed2:	4b4c      	ldr	r3, [pc, #304]	; (9004 <prvAddNewTaskToReadyList+0x1ac>)
    8ed4:	881a      	ldrh	r2, [r3, #0]
    8ed6:	687b      	ldr	r3, [r7, #4]
    8ed8:	0011      	movs	r1, r2
    8eda:	0018      	movs	r0, r3
    8edc:	4b4a      	ldr	r3, [pc, #296]	; (9008 <prvAddNewTaskToReadyList+0x1b0>)
    8ede:	4798      	blx	r3
    8ee0:	687b      	ldr	r3, [r7, #4]
    8ee2:	0018      	movs	r0, r3
    8ee4:	4b49      	ldr	r3, [pc, #292]	; (900c <prvAddNewTaskToReadyList+0x1b4>)
    8ee6:	4798      	blx	r3
    8ee8:	0003      	movs	r3, r0
    8eea:	b2d9      	uxtb	r1, r3
    8eec:	687b      	ldr	r3, [r7, #4]
    8eee:	3334      	adds	r3, #52	; 0x34
    8ef0:	001a      	movs	r2, r3
    8ef2:	2003      	movs	r0, #3
    8ef4:	4b46      	ldr	r3, [pc, #280]	; (9010 <prvAddNewTaskToReadyList+0x1b8>)
    8ef6:	4798      	blx	r3
    8ef8:	687b      	ldr	r3, [r7, #4]
    8efa:	0018      	movs	r0, r3
    8efc:	4b43      	ldr	r3, [pc, #268]	; (900c <prvAddNewTaskToReadyList+0x1b4>)
    8efe:	4798      	blx	r3
    8f00:	0003      	movs	r3, r0
    8f02:	b2d9      	uxtb	r1, r3
    8f04:	687b      	ldr	r3, [r7, #4]
    8f06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    8f08:	b2db      	uxtb	r3, r3
    8f0a:	001a      	movs	r2, r3
    8f0c:	2003      	movs	r0, #3
    8f0e:	4b41      	ldr	r3, [pc, #260]	; (9014 <prvAddNewTaskToReadyList+0x1bc>)
    8f10:	4798      	blx	r3
    8f12:	4b41      	ldr	r3, [pc, #260]	; (9018 <prvAddNewTaskToReadyList+0x1c0>)
    8f14:	4798      	blx	r3
    8f16:	0003      	movs	r3, r0
    8f18:	0018      	movs	r0, r3
    8f1a:	4b40      	ldr	r3, [pc, #256]	; (901c <prvAddNewTaskToReadyList+0x1c4>)
    8f1c:	4798      	blx	r3
    8f1e:	0003      	movs	r3, r0
    8f20:	001a      	movs	r2, r3
    8f22:	4b3f      	ldr	r3, [pc, #252]	; (9020 <prvAddNewTaskToReadyList+0x1c8>)
    8f24:	881b      	ldrh	r3, [r3, #0]
    8f26:	4013      	ands	r3, r2
    8f28:	b29b      	uxth	r3, r3
    8f2a:	2b00      	cmp	r3, #0
    8f2c:	d016      	beq.n	8f5c <prvAddNewTaskToReadyList+0x104>
    8f2e:	687b      	ldr	r3, [r7, #4]
    8f30:	0018      	movs	r0, r3
    8f32:	4b3a      	ldr	r3, [pc, #232]	; (901c <prvAddNewTaskToReadyList+0x1c4>)
    8f34:	4798      	blx	r3
    8f36:	0003      	movs	r3, r0
    8f38:	001a      	movs	r2, r3
    8f3a:	4b39      	ldr	r3, [pc, #228]	; (9020 <prvAddNewTaskToReadyList+0x1c8>)
    8f3c:	881b      	ldrh	r3, [r3, #0]
    8f3e:	4013      	ands	r3, r2
    8f40:	b29b      	uxth	r3, r3
    8f42:	2b00      	cmp	r3, #0
    8f44:	d00a      	beq.n	8f5c <prvAddNewTaskToReadyList+0x104>
    8f46:	687b      	ldr	r3, [r7, #4]
    8f48:	0018      	movs	r0, r3
    8f4a:	4b30      	ldr	r3, [pc, #192]	; (900c <prvAddNewTaskToReadyList+0x1b4>)
    8f4c:	4798      	blx	r3
    8f4e:	0003      	movs	r3, r0
    8f50:	b2db      	uxtb	r3, r3
    8f52:	001a      	movs	r2, r3
    8f54:	2103      	movs	r1, #3
    8f56:	201b      	movs	r0, #27
    8f58:	4b32      	ldr	r3, [pc, #200]	; (9024 <prvAddNewTaskToReadyList+0x1cc>)
    8f5a:	4798      	blx	r3
    8f5c:	687b      	ldr	r3, [r7, #4]
    8f5e:	0018      	movs	r0, r3
    8f60:	4b31      	ldr	r3, [pc, #196]	; (9028 <prvAddNewTaskToReadyList+0x1d0>)
    8f62:	4798      	blx	r3

		prvAddTaskToReadyList( pxNewTCB );
    8f64:	687b      	ldr	r3, [r7, #4]
    8f66:	0018      	movs	r0, r3
    8f68:	4b2c      	ldr	r3, [pc, #176]	; (901c <prvAddNewTaskToReadyList+0x1c4>)
    8f6a:	4798      	blx	r3
    8f6c:	0003      	movs	r3, r0
    8f6e:	001a      	movs	r2, r3
    8f70:	4b2b      	ldr	r3, [pc, #172]	; (9020 <prvAddNewTaskToReadyList+0x1c8>)
    8f72:	881b      	ldrh	r3, [r3, #0]
    8f74:	4013      	ands	r3, r2
    8f76:	b29b      	uxth	r3, r3
    8f78:	2b00      	cmp	r3, #0
    8f7a:	d008      	beq.n	8f8e <prvAddNewTaskToReadyList+0x136>
    8f7c:	687b      	ldr	r3, [r7, #4]
    8f7e:	0018      	movs	r0, r3
    8f80:	4b22      	ldr	r3, [pc, #136]	; (900c <prvAddNewTaskToReadyList+0x1b4>)
    8f82:	4798      	blx	r3
    8f84:	0003      	movs	r3, r0
    8f86:	b2db      	uxtb	r3, r3
    8f88:	0018      	movs	r0, r3
    8f8a:	4b28      	ldr	r3, [pc, #160]	; (902c <prvAddNewTaskToReadyList+0x1d4>)
    8f8c:	4798      	blx	r3
    8f8e:	687b      	ldr	r3, [r7, #4]
    8f90:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    8f92:	4b27      	ldr	r3, [pc, #156]	; (9030 <prvAddNewTaskToReadyList+0x1d8>)
    8f94:	681b      	ldr	r3, [r3, #0]
    8f96:	429a      	cmp	r2, r3
    8f98:	d903      	bls.n	8fa2 <prvAddNewTaskToReadyList+0x14a>
    8f9a:	687b      	ldr	r3, [r7, #4]
    8f9c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    8f9e:	4b24      	ldr	r3, [pc, #144]	; (9030 <prvAddNewTaskToReadyList+0x1d8>)
    8fa0:	601a      	str	r2, [r3, #0]
    8fa2:	687b      	ldr	r3, [r7, #4]
    8fa4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    8fa6:	0013      	movs	r3, r2
    8fa8:	009b      	lsls	r3, r3, #2
    8faa:	189b      	adds	r3, r3, r2
    8fac:	009b      	lsls	r3, r3, #2
    8fae:	4a21      	ldr	r2, [pc, #132]	; (9034 <prvAddNewTaskToReadyList+0x1dc>)
    8fb0:	189a      	adds	r2, r3, r2
    8fb2:	687b      	ldr	r3, [r7, #4]
    8fb4:	3304      	adds	r3, #4
    8fb6:	0019      	movs	r1, r3
    8fb8:	0010      	movs	r0, r2
    8fba:	4b1f      	ldr	r3, [pc, #124]	; (9038 <prvAddNewTaskToReadyList+0x1e0>)
    8fbc:	4798      	blx	r3

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
    8fbe:	4b1f      	ldr	r3, [pc, #124]	; (903c <prvAddNewTaskToReadyList+0x1e4>)
    8fc0:	4798      	blx	r3

	if( xSchedulerRunning != pdFALSE )
    8fc2:	4b0c      	ldr	r3, [pc, #48]	; (8ff4 <prvAddNewTaskToReadyList+0x19c>)
    8fc4:	681b      	ldr	r3, [r3, #0]
    8fc6:	2b00      	cmp	r3, #0
    8fc8:	d008      	beq.n	8fdc <prvAddNewTaskToReadyList+0x184>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
    8fca:	4b08      	ldr	r3, [pc, #32]	; (8fec <prvAddNewTaskToReadyList+0x194>)
    8fcc:	681b      	ldr	r3, [r3, #0]
    8fce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    8fd0:	687b      	ldr	r3, [r7, #4]
    8fd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    8fd4:	429a      	cmp	r2, r3
    8fd6:	d201      	bcs.n	8fdc <prvAddNewTaskToReadyList+0x184>
		{
			taskYIELD_IF_USING_PREEMPTION();
    8fd8:	4b19      	ldr	r3, [pc, #100]	; (9040 <prvAddNewTaskToReadyList+0x1e8>)
    8fda:	4798      	blx	r3
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
    8fdc:	46c0      	nop			; (mov r8, r8)
    8fde:	46bd      	mov	sp, r7
    8fe0:	b002      	add	sp, #8
    8fe2:	bd80      	pop	{r7, pc}
    8fe4:	00007049 	.word	0x00007049
    8fe8:	20003c30 	.word	0x20003c30
    8fec:	20003b58 	.word	0x20003b58
    8ff0:	00009b79 	.word	0x00009b79
    8ff4:	20003c3c 	.word	0x20003c3c
    8ff8:	20003c4c 	.word	0x20003c4c
    8ffc:	000065c5 	.word	0x000065c5
    9000:	00005069 	.word	0x00005069
    9004:	20000102 	.word	0x20000102
    9008:	000050a5 	.word	0x000050a5
    900c:	00005025 	.word	0x00005025
    9010:	000067f5 	.word	0x000067f5
    9014:	00005f59 	.word	0x00005f59
    9018:	000052e1 	.word	0x000052e1
    901c:	00005045 	.word	0x00005045
    9020:	20000100 	.word	0x20000100
    9024:	00005a3d 	.word	0x00005a3d
    9028:	000051a5 	.word	0x000051a5
    902c:	000057f5 	.word	0x000057f5
    9030:	20003c38 	.word	0x20003c38
    9034:	20003b5c 	.word	0x20003b5c
    9038:	00006e0f 	.word	0x00006e0f
    903c:	0000706d 	.word	0x0000706d
    9040:	00007031 	.word	0x00007031

00009044 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
    9044:	b580      	push	{r7, lr}
    9046:	b084      	sub	sp, #16
    9048:	af00      	add	r7, sp, #0
    904a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
    904c:	2300      	movs	r3, #0
    904e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
    9050:	687b      	ldr	r3, [r7, #4]
    9052:	2b00      	cmp	r3, #0
    9054:	d045      	beq.n	90e2 <vTaskDelay+0x9e>
		{
			configASSERT( uxSchedulerSuspended == 0 );
    9056:	4b27      	ldr	r3, [pc, #156]	; (90f4 <vTaskDelay+0xb0>)
    9058:	681b      	ldr	r3, [r3, #0]
    905a:	2b00      	cmp	r3, #0
    905c:	d001      	beq.n	9062 <vTaskDelay+0x1e>
    905e:	b672      	cpsid	i
    9060:	e7fe      	b.n	9060 <vTaskDelay+0x1c>
			vTaskSuspendAll();
    9062:	4b25      	ldr	r3, [pc, #148]	; (90f8 <vTaskDelay+0xb4>)
    9064:	4798      	blx	r3
			{
				traceTASK_DELAY();
    9066:	4b25      	ldr	r3, [pc, #148]	; (90fc <vTaskDelay+0xb8>)
    9068:	681b      	ldr	r3, [r3, #0]
    906a:	0018      	movs	r0, r3
    906c:	4b24      	ldr	r3, [pc, #144]	; (9100 <vTaskDelay+0xbc>)
    906e:	4798      	blx	r3
    9070:	0003      	movs	r3, r0
    9072:	001a      	movs	r2, r3
    9074:	4b23      	ldr	r3, [pc, #140]	; (9104 <vTaskDelay+0xc0>)
    9076:	881b      	ldrh	r3, [r3, #0]
    9078:	4013      	ands	r3, r2
    907a:	b29b      	uxth	r3, r3
    907c:	2b00      	cmp	r3, #0
    907e:	d00e      	beq.n	909e <vTaskDelay+0x5a>
    9080:	687b      	ldr	r3, [r7, #4]
    9082:	0019      	movs	r1, r3
    9084:	2089      	movs	r0, #137	; 0x89
    9086:	4b20      	ldr	r3, [pc, #128]	; (9108 <vTaskDelay+0xc4>)
    9088:	4798      	blx	r3
    908a:	4b1c      	ldr	r3, [pc, #112]	; (90fc <vTaskDelay+0xb8>)
    908c:	681b      	ldr	r3, [r3, #0]
    908e:	0018      	movs	r0, r3
    9090:	4b1e      	ldr	r3, [pc, #120]	; (910c <vTaskDelay+0xc8>)
    9092:	4798      	blx	r3
    9094:	0003      	movs	r3, r0
    9096:	b2db      	uxtb	r3, r3
    9098:	0018      	movs	r0, r3
    909a:	4b1d      	ldr	r3, [pc, #116]	; (9110 <vTaskDelay+0xcc>)
    909c:	4798      	blx	r3
    909e:	4b1d      	ldr	r3, [pc, #116]	; (9114 <vTaskDelay+0xd0>)
    90a0:	4798      	blx	r3
    90a2:	0003      	movs	r3, r0
    90a4:	0018      	movs	r0, r3
    90a6:	4b16      	ldr	r3, [pc, #88]	; (9100 <vTaskDelay+0xbc>)
    90a8:	4798      	blx	r3
    90aa:	0003      	movs	r3, r0
    90ac:	001a      	movs	r2, r3
    90ae:	4b15      	ldr	r3, [pc, #84]	; (9104 <vTaskDelay+0xc0>)
    90b0:	881b      	ldrh	r3, [r3, #0]
    90b2:	4013      	ands	r3, r2
    90b4:	b29b      	uxth	r3, r3
    90b6:	2b00      	cmp	r3, #0
    90b8:	d00a      	beq.n	90d0 <vTaskDelay+0x8c>
    90ba:	4b16      	ldr	r3, [pc, #88]	; (9114 <vTaskDelay+0xd0>)
    90bc:	4798      	blx	r3
    90be:	0003      	movs	r3, r0
    90c0:	0018      	movs	r0, r3
    90c2:	4b12      	ldr	r3, [pc, #72]	; (910c <vTaskDelay+0xc8>)
    90c4:	4798      	blx	r3
    90c6:	0003      	movs	r3, r0
    90c8:	b2db      	uxtb	r3, r3
    90ca:	0018      	movs	r0, r3
    90cc:	4b10      	ldr	r3, [pc, #64]	; (9110 <vTaskDelay+0xcc>)
    90ce:	4798      	blx	r3
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
    90d0:	687b      	ldr	r3, [r7, #4]
    90d2:	2100      	movs	r1, #0
    90d4:	0018      	movs	r0, r3
    90d6:	4b10      	ldr	r3, [pc, #64]	; (9118 <vTaskDelay+0xd4>)
    90d8:	4798      	blx	r3
			}
			xAlreadyYielded = xTaskResumeAll();
    90da:	4b10      	ldr	r3, [pc, #64]	; (911c <vTaskDelay+0xd8>)
    90dc:	4798      	blx	r3
    90de:	0003      	movs	r3, r0
    90e0:	60fb      	str	r3, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
    90e2:	68fb      	ldr	r3, [r7, #12]
    90e4:	2b00      	cmp	r3, #0
    90e6:	d101      	bne.n	90ec <vTaskDelay+0xa8>
		{
			portYIELD_WITHIN_API();
    90e8:	4b0d      	ldr	r3, [pc, #52]	; (9120 <vTaskDelay+0xdc>)
    90ea:	4798      	blx	r3
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
    90ec:	46c0      	nop			; (mov r8, r8)
    90ee:	46bd      	mov	sp, r7
    90f0:	b004      	add	sp, #16
    90f2:	bd80      	pop	{r7, pc}
    90f4:	20003c58 	.word	0x20003c58
    90f8:	00009305 	.word	0x00009305
    90fc:	20003b58 	.word	0x20003b58
    9100:	00005045 	.word	0x00005045
    9104:	20000100 	.word	0x20000100
    9108:	00005d45 	.word	0x00005d45
    910c:	00005025 	.word	0x00005025
    9110:	000061d5 	.word	0x000061d5
    9114:	000052e1 	.word	0x000052e1
    9118:	0000a25d 	.word	0x0000a25d
    911c:	0000931d 	.word	0x0000931d
    9120:	00007031 	.word	0x00007031

00009124 <vTaskSuspend>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskSuspend( TaskHandle_t xTaskToSuspend )
	{
    9124:	b580      	push	{r7, lr}
    9126:	b084      	sub	sp, #16
    9128:	af00      	add	r7, sp, #0
    912a:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
    912c:	4b42      	ldr	r3, [pc, #264]	; (9238 <vTaskSuspend+0x114>)
    912e:	4798      	blx	r3
		{
			/* If null is passed in here then it is the running task that is
			being suspended. */
			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
    9130:	687b      	ldr	r3, [r7, #4]
    9132:	2b00      	cmp	r3, #0
    9134:	d102      	bne.n	913c <vTaskSuspend+0x18>
    9136:	4b41      	ldr	r3, [pc, #260]	; (923c <vTaskSuspend+0x118>)
    9138:	681b      	ldr	r3, [r3, #0]
    913a:	e000      	b.n	913e <vTaskSuspend+0x1a>
    913c:	687b      	ldr	r3, [r7, #4]
    913e:	60fb      	str	r3, [r7, #12]

			traceTASK_SUSPEND( pxTCB );
    9140:	4b3f      	ldr	r3, [pc, #252]	; (9240 <vTaskSuspend+0x11c>)
    9142:	4798      	blx	r3
    9144:	0003      	movs	r3, r0
    9146:	0018      	movs	r0, r3
    9148:	4b3e      	ldr	r3, [pc, #248]	; (9244 <vTaskSuspend+0x120>)
    914a:	4798      	blx	r3
    914c:	0003      	movs	r3, r0
    914e:	001a      	movs	r2, r3
    9150:	4b3d      	ldr	r3, [pc, #244]	; (9248 <vTaskSuspend+0x124>)
    9152:	881b      	ldrh	r3, [r3, #0]
    9154:	4013      	ands	r3, r2
    9156:	b29b      	uxth	r3, r3
    9158:	2b00      	cmp	r3, #0
    915a:	d016      	beq.n	918a <vTaskSuspend+0x66>
    915c:	68fb      	ldr	r3, [r7, #12]
    915e:	0018      	movs	r0, r3
    9160:	4b38      	ldr	r3, [pc, #224]	; (9244 <vTaskSuspend+0x120>)
    9162:	4798      	blx	r3
    9164:	0003      	movs	r3, r0
    9166:	001a      	movs	r2, r3
    9168:	4b37      	ldr	r3, [pc, #220]	; (9248 <vTaskSuspend+0x124>)
    916a:	881b      	ldrh	r3, [r3, #0]
    916c:	4013      	ands	r3, r2
    916e:	b29b      	uxth	r3, r3
    9170:	2b00      	cmp	r3, #0
    9172:	d00a      	beq.n	918a <vTaskSuspend+0x66>
    9174:	68fb      	ldr	r3, [r7, #12]
    9176:	0018      	movs	r0, r3
    9178:	4b34      	ldr	r3, [pc, #208]	; (924c <vTaskSuspend+0x128>)
    917a:	4798      	blx	r3
    917c:	0003      	movs	r3, r0
    917e:	b2db      	uxtb	r3, r3
    9180:	001a      	movs	r2, r3
    9182:	2103      	movs	r1, #3
    9184:	208a      	movs	r0, #138	; 0x8a
    9186:	4b32      	ldr	r3, [pc, #200]	; (9250 <vTaskSuspend+0x12c>)
    9188:	4798      	blx	r3
    918a:	68fb      	ldr	r3, [r7, #12]
    918c:	0018      	movs	r0, r3
    918e:	4b2f      	ldr	r3, [pc, #188]	; (924c <vTaskSuspend+0x128>)
    9190:	4798      	blx	r3
    9192:	0003      	movs	r3, r0
    9194:	b2db      	uxtb	r3, r3
    9196:	0018      	movs	r0, r3
    9198:	4b2e      	ldr	r3, [pc, #184]	; (9254 <vTaskSuspend+0x130>)
    919a:	4798      	blx	r3

			/* Remove task from the ready/delayed list and place in the
			suspended list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
    919c:	68fb      	ldr	r3, [r7, #12]
    919e:	3304      	adds	r3, #4
    91a0:	0018      	movs	r0, r3
    91a2:	4b2d      	ldr	r3, [pc, #180]	; (9258 <vTaskSuspend+0x134>)
    91a4:	4798      	blx	r3
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
    91a6:	68fb      	ldr	r3, [r7, #12]
    91a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    91aa:	2b00      	cmp	r3, #0
    91ac:	d004      	beq.n	91b8 <vTaskSuspend+0x94>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
    91ae:	68fb      	ldr	r3, [r7, #12]
    91b0:	3318      	adds	r3, #24
    91b2:	0018      	movs	r0, r3
    91b4:	4b28      	ldr	r3, [pc, #160]	; (9258 <vTaskSuspend+0x134>)
    91b6:	4798      	blx	r3
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
    91b8:	68fb      	ldr	r3, [r7, #12]
    91ba:	1d1a      	adds	r2, r3, #4
    91bc:	4b27      	ldr	r3, [pc, #156]	; (925c <vTaskSuspend+0x138>)
    91be:	0011      	movs	r1, r2
    91c0:	0018      	movs	r0, r3
    91c2:	4b27      	ldr	r3, [pc, #156]	; (9260 <vTaskSuspend+0x13c>)
    91c4:	4798      	blx	r3

			#if( configUSE_TASK_NOTIFICATIONS == 1 )
			{
				if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
    91c6:	68fb      	ldr	r3, [r7, #12]
    91c8:	2250      	movs	r2, #80	; 0x50
    91ca:	5c9b      	ldrb	r3, [r3, r2]
    91cc:	b2db      	uxtb	r3, r3
    91ce:	2b01      	cmp	r3, #1
    91d0:	d103      	bne.n	91da <vTaskSuspend+0xb6>
				{
					/* The task was blocked to wait for a notification, but is
					now suspended, so no notification was received. */
					pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
    91d2:	68fb      	ldr	r3, [r7, #12]
    91d4:	2250      	movs	r2, #80	; 0x50
    91d6:	2100      	movs	r1, #0
    91d8:	5499      	strb	r1, [r3, r2]
				}
			}
			#endif
		}
		taskEXIT_CRITICAL();
    91da:	4b22      	ldr	r3, [pc, #136]	; (9264 <vTaskSuspend+0x140>)
    91dc:	4798      	blx	r3

		if( xSchedulerRunning != pdFALSE )
    91de:	4b22      	ldr	r3, [pc, #136]	; (9268 <vTaskSuspend+0x144>)
    91e0:	681b      	ldr	r3, [r3, #0]
    91e2:	2b00      	cmp	r3, #0
    91e4:	d005      	beq.n	91f2 <vTaskSuspend+0xce>
		{
			/* Reset the next expected unblock time in case it referred to the
			task that is now in the Suspended state. */
			taskENTER_CRITICAL();
    91e6:	4b14      	ldr	r3, [pc, #80]	; (9238 <vTaskSuspend+0x114>)
    91e8:	4798      	blx	r3
			{
				prvResetNextTaskUnblockTime();
    91ea:	4b20      	ldr	r3, [pc, #128]	; (926c <vTaskSuspend+0x148>)
    91ec:	4798      	blx	r3
			}
			taskEXIT_CRITICAL();
    91ee:	4b1d      	ldr	r3, [pc, #116]	; (9264 <vTaskSuspend+0x140>)
    91f0:	4798      	blx	r3
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( pxTCB == pxCurrentTCB )
    91f2:	4b12      	ldr	r3, [pc, #72]	; (923c <vTaskSuspend+0x118>)
    91f4:	681b      	ldr	r3, [r3, #0]
    91f6:	68fa      	ldr	r2, [r7, #12]
    91f8:	429a      	cmp	r2, r3
    91fa:	d118      	bne.n	922e <vTaskSuspend+0x10a>
		{
			if( xSchedulerRunning != pdFALSE )
    91fc:	4b1a      	ldr	r3, [pc, #104]	; (9268 <vTaskSuspend+0x144>)
    91fe:	681b      	ldr	r3, [r3, #0]
    9200:	2b00      	cmp	r3, #0
    9202:	d008      	beq.n	9216 <vTaskSuspend+0xf2>
			{
				/* The current task has just been suspended. */
				configASSERT( uxSchedulerSuspended == 0 );
    9204:	4b1a      	ldr	r3, [pc, #104]	; (9270 <vTaskSuspend+0x14c>)
    9206:	681b      	ldr	r3, [r3, #0]
    9208:	2b00      	cmp	r3, #0
    920a:	d001      	beq.n	9210 <vTaskSuspend+0xec>
    920c:	b672      	cpsid	i
    920e:	e7fe      	b.n	920e <vTaskSuspend+0xea>
				portYIELD_WITHIN_API();
    9210:	4b18      	ldr	r3, [pc, #96]	; (9274 <vTaskSuspend+0x150>)
    9212:	4798      	blx	r3
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
    9214:	e00b      	b.n	922e <vTaskSuspend+0x10a>
				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks )
    9216:	4b11      	ldr	r3, [pc, #68]	; (925c <vTaskSuspend+0x138>)
    9218:	681a      	ldr	r2, [r3, #0]
    921a:	4b17      	ldr	r3, [pc, #92]	; (9278 <vTaskSuspend+0x154>)
    921c:	681b      	ldr	r3, [r3, #0]
    921e:	429a      	cmp	r2, r3
    9220:	d103      	bne.n	922a <vTaskSuspend+0x106>
					pxCurrentTCB = NULL;
    9222:	4b06      	ldr	r3, [pc, #24]	; (923c <vTaskSuspend+0x118>)
    9224:	2200      	movs	r2, #0
    9226:	601a      	str	r2, [r3, #0]
	}
    9228:	e001      	b.n	922e <vTaskSuspend+0x10a>
					vTaskSwitchContext();
    922a:	4b14      	ldr	r3, [pc, #80]	; (927c <vTaskSuspend+0x158>)
    922c:	4798      	blx	r3
	}
    922e:	46c0      	nop			; (mov r8, r8)
    9230:	46bd      	mov	sp, r7
    9232:	b004      	add	sp, #16
    9234:	bd80      	pop	{r7, pc}
    9236:	46c0      	nop			; (mov r8, r8)
    9238:	00007049 	.word	0x00007049
    923c:	20003b58 	.word	0x20003b58
    9240:	000052e1 	.word	0x000052e1
    9244:	00005045 	.word	0x00005045
    9248:	20000100 	.word	0x20000100
    924c:	00005025 	.word	0x00005025
    9250:	00005a3d 	.word	0x00005a3d
    9254:	000061d5 	.word	0x000061d5
    9258:	00006ebf 	.word	0x00006ebf
    925c:	20003c1c 	.word	0x20003c1c
    9260:	00006e0f 	.word	0x00006e0f
    9264:	0000706d 	.word	0x0000706d
    9268:	20003c3c 	.word	0x20003c3c
    926c:	00009d09 	.word	0x00009d09
    9270:	20003c58 	.word	0x20003c58
    9274:	00007031 	.word	0x00007031
    9278:	20003c30 	.word	0x20003c30
    927c:	00009699 	.word	0x00009699

00009280 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
    9280:	b590      	push	{r4, r7, lr}
    9282:	b085      	sub	sp, #20
    9284:	af02      	add	r7, sp, #8
		}
	}
	#else
	{
		/* The Idle task is being created using dynamically allocated RAM. */
		xReturn = xTaskCreate(	prvIdleTask,
    9286:	4916      	ldr	r1, [pc, #88]	; (92e0 <vTaskStartScheduler+0x60>)
    9288:	4816      	ldr	r0, [pc, #88]	; (92e4 <vTaskStartScheduler+0x64>)
    928a:	4b17      	ldr	r3, [pc, #92]	; (92e8 <vTaskStartScheduler+0x68>)
    928c:	9301      	str	r3, [sp, #4]
    928e:	2300      	movs	r3, #0
    9290:	9300      	str	r3, [sp, #0]
    9292:	2300      	movs	r3, #0
    9294:	2264      	movs	r2, #100	; 0x64
    9296:	4c15      	ldr	r4, [pc, #84]	; (92ec <vTaskStartScheduler+0x6c>)
    9298:	47a0      	blx	r4
    929a:	0003      	movs	r3, r0
    929c:	607b      	str	r3, [r7, #4]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
    929e:	687b      	ldr	r3, [r7, #4]
    92a0:	2b01      	cmp	r3, #1
    92a2:	d103      	bne.n	92ac <vTaskStartScheduler+0x2c>
		{
			xReturn = xTimerCreateTimerTask();
    92a4:	4b12      	ldr	r3, [pc, #72]	; (92f0 <vTaskStartScheduler+0x70>)
    92a6:	4798      	blx	r3
    92a8:	0003      	movs	r3, r0
    92aa:	607b      	str	r3, [r7, #4]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
    92ac:	687b      	ldr	r3, [r7, #4]
    92ae:	2b01      	cmp	r3, #1
    92b0:	d10d      	bne.n	92ce <vTaskStartScheduler+0x4e>
		/* Interrupts are turned off here, to ensure a tick does not occur
		before or during the call to xPortStartScheduler().  The stacks of
		the created tasks contain a status word with interrupts switched on
		so interrupts will automatically get re-enabled when the first task
		starts to run. */
		portDISABLE_INTERRUPTS();
    92b2:	b672      	cpsid	i
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
    92b4:	4b0f      	ldr	r3, [pc, #60]	; (92f4 <vTaskStartScheduler+0x74>)
    92b6:	2201      	movs	r2, #1
    92b8:	4252      	negs	r2, r2
    92ba:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
    92bc:	4b0e      	ldr	r3, [pc, #56]	; (92f8 <vTaskStartScheduler+0x78>)
    92be:	2201      	movs	r2, #1
    92c0:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
    92c2:	4b0e      	ldr	r3, [pc, #56]	; (92fc <vTaskStartScheduler+0x7c>)
    92c4:	2200      	movs	r2, #0
    92c6:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
    92c8:	4b0d      	ldr	r3, [pc, #52]	; (9300 <vTaskStartScheduler+0x80>)
    92ca:	4798      	blx	r3
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
    92cc:	e004      	b.n	92d8 <vTaskStartScheduler+0x58>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
    92ce:	687b      	ldr	r3, [r7, #4]
    92d0:	3301      	adds	r3, #1
    92d2:	d101      	bne.n	92d8 <vTaskStartScheduler+0x58>
    92d4:	b672      	cpsid	i
    92d6:	e7fe      	b.n	92d6 <vTaskStartScheduler+0x56>
}
    92d8:	46c0      	nop			; (mov r8, r8)
    92da:	46bd      	mov	sp, r7
    92dc:	b003      	add	sp, #12
    92de:	bd90      	pop	{r4, r7, pc}
    92e0:	00024d74 	.word	0x00024d74
    92e4:	00009b51 	.word	0x00009b51
    92e8:	20003c54 	.word	0x20003c54
    92ec:	00008ca9 	.word	0x00008ca9
    92f0:	0000a311 	.word	0x0000a311
    92f4:	20003c50 	.word	0x20003c50
    92f8:	20003c3c 	.word	0x20003c3c
    92fc:	20003c34 	.word	0x20003c34
    9300:	00006fd9 	.word	0x00006fd9

00009304 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
    9304:	b580      	push	{r7, lr}
    9306:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
    9308:	4b03      	ldr	r3, [pc, #12]	; (9318 <vTaskSuspendAll+0x14>)
    930a:	681b      	ldr	r3, [r3, #0]
    930c:	1c5a      	adds	r2, r3, #1
    930e:	4b02      	ldr	r3, [pc, #8]	; (9318 <vTaskSuspendAll+0x14>)
    9310:	601a      	str	r2, [r3, #0]
}
    9312:	46c0      	nop			; (mov r8, r8)
    9314:	46bd      	mov	sp, r7
    9316:	bd80      	pop	{r7, pc}
    9318:	20003c58 	.word	0x20003c58

0000931c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
    931c:	b580      	push	{r7, lr}
    931e:	b084      	sub	sp, #16
    9320:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
    9322:	2300      	movs	r3, #0
    9324:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
    9326:	2300      	movs	r3, #0
    9328:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
    932a:	4b45      	ldr	r3, [pc, #276]	; (9440 <xTaskResumeAll+0x124>)
    932c:	681b      	ldr	r3, [r3, #0]
    932e:	2b00      	cmp	r3, #0
    9330:	d101      	bne.n	9336 <xTaskResumeAll+0x1a>
    9332:	b672      	cpsid	i
    9334:	e7fe      	b.n	9334 <xTaskResumeAll+0x18>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
    9336:	4b43      	ldr	r3, [pc, #268]	; (9444 <xTaskResumeAll+0x128>)
    9338:	4798      	blx	r3
	{
		--uxSchedulerSuspended;
    933a:	4b41      	ldr	r3, [pc, #260]	; (9440 <xTaskResumeAll+0x124>)
    933c:	681b      	ldr	r3, [r3, #0]
    933e:	1e5a      	subs	r2, r3, #1
    9340:	4b3f      	ldr	r3, [pc, #252]	; (9440 <xTaskResumeAll+0x124>)
    9342:	601a      	str	r2, [r3, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
    9344:	4b3e      	ldr	r3, [pc, #248]	; (9440 <xTaskResumeAll+0x124>)
    9346:	681b      	ldr	r3, [r3, #0]
    9348:	2b00      	cmp	r3, #0
    934a:	d000      	beq.n	934e <xTaskResumeAll+0x32>
    934c:	e071      	b.n	9432 <xTaskResumeAll+0x116>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
    934e:	4b3e      	ldr	r3, [pc, #248]	; (9448 <xTaskResumeAll+0x12c>)
    9350:	681b      	ldr	r3, [r3, #0]
    9352:	2b00      	cmp	r3, #0
    9354:	d100      	bne.n	9358 <xTaskResumeAll+0x3c>
    9356:	e06c      	b.n	9432 <xTaskResumeAll+0x116>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
    9358:	e044      	b.n	93e4 <xTaskResumeAll+0xc8>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
    935a:	4b3c      	ldr	r3, [pc, #240]	; (944c <xTaskResumeAll+0x130>)
    935c:	68db      	ldr	r3, [r3, #12]
    935e:	68db      	ldr	r3, [r3, #12]
    9360:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
    9362:	68fb      	ldr	r3, [r7, #12]
    9364:	3318      	adds	r3, #24
    9366:	0018      	movs	r0, r3
    9368:	4b39      	ldr	r3, [pc, #228]	; (9450 <xTaskResumeAll+0x134>)
    936a:	4798      	blx	r3
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
    936c:	68fb      	ldr	r3, [r7, #12]
    936e:	3304      	adds	r3, #4
    9370:	0018      	movs	r0, r3
    9372:	4b37      	ldr	r3, [pc, #220]	; (9450 <xTaskResumeAll+0x134>)
    9374:	4798      	blx	r3
					prvAddTaskToReadyList( pxTCB );
    9376:	68fb      	ldr	r3, [r7, #12]
    9378:	0018      	movs	r0, r3
    937a:	4b36      	ldr	r3, [pc, #216]	; (9454 <xTaskResumeAll+0x138>)
    937c:	4798      	blx	r3
    937e:	0003      	movs	r3, r0
    9380:	001a      	movs	r2, r3
    9382:	4b35      	ldr	r3, [pc, #212]	; (9458 <xTaskResumeAll+0x13c>)
    9384:	881b      	ldrh	r3, [r3, #0]
    9386:	4013      	ands	r3, r2
    9388:	b29b      	uxth	r3, r3
    938a:	2b00      	cmp	r3, #0
    938c:	d008      	beq.n	93a0 <xTaskResumeAll+0x84>
    938e:	68fb      	ldr	r3, [r7, #12]
    9390:	0018      	movs	r0, r3
    9392:	4b32      	ldr	r3, [pc, #200]	; (945c <xTaskResumeAll+0x140>)
    9394:	4798      	blx	r3
    9396:	0003      	movs	r3, r0
    9398:	b2db      	uxtb	r3, r3
    939a:	0018      	movs	r0, r3
    939c:	4b30      	ldr	r3, [pc, #192]	; (9460 <xTaskResumeAll+0x144>)
    939e:	4798      	blx	r3
    93a0:	68fb      	ldr	r3, [r7, #12]
    93a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    93a4:	4b2f      	ldr	r3, [pc, #188]	; (9464 <xTaskResumeAll+0x148>)
    93a6:	681b      	ldr	r3, [r3, #0]
    93a8:	429a      	cmp	r2, r3
    93aa:	d903      	bls.n	93b4 <xTaskResumeAll+0x98>
    93ac:	68fb      	ldr	r3, [r7, #12]
    93ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    93b0:	4b2c      	ldr	r3, [pc, #176]	; (9464 <xTaskResumeAll+0x148>)
    93b2:	601a      	str	r2, [r3, #0]
    93b4:	68fb      	ldr	r3, [r7, #12]
    93b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    93b8:	0013      	movs	r3, r2
    93ba:	009b      	lsls	r3, r3, #2
    93bc:	189b      	adds	r3, r3, r2
    93be:	009b      	lsls	r3, r3, #2
    93c0:	4a29      	ldr	r2, [pc, #164]	; (9468 <xTaskResumeAll+0x14c>)
    93c2:	189a      	adds	r2, r3, r2
    93c4:	68fb      	ldr	r3, [r7, #12]
    93c6:	3304      	adds	r3, #4
    93c8:	0019      	movs	r1, r3
    93ca:	0010      	movs	r0, r2
    93cc:	4b27      	ldr	r3, [pc, #156]	; (946c <xTaskResumeAll+0x150>)
    93ce:	4798      	blx	r3

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
    93d0:	68fb      	ldr	r3, [r7, #12]
    93d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    93d4:	4b26      	ldr	r3, [pc, #152]	; (9470 <xTaskResumeAll+0x154>)
    93d6:	681b      	ldr	r3, [r3, #0]
    93d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    93da:	429a      	cmp	r2, r3
    93dc:	d302      	bcc.n	93e4 <xTaskResumeAll+0xc8>
					{
						xYieldPending = pdTRUE;
    93de:	4b25      	ldr	r3, [pc, #148]	; (9474 <xTaskResumeAll+0x158>)
    93e0:	2201      	movs	r2, #1
    93e2:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
    93e4:	4b19      	ldr	r3, [pc, #100]	; (944c <xTaskResumeAll+0x130>)
    93e6:	681b      	ldr	r3, [r3, #0]
    93e8:	2b00      	cmp	r3, #0
    93ea:	d1b6      	bne.n	935a <xTaskResumeAll+0x3e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
    93ec:	68fb      	ldr	r3, [r7, #12]
    93ee:	2b00      	cmp	r3, #0
    93f0:	d001      	beq.n	93f6 <xTaskResumeAll+0xda>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
    93f2:	4b21      	ldr	r3, [pc, #132]	; (9478 <xTaskResumeAll+0x15c>)
    93f4:	4798      	blx	r3
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
    93f6:	4b21      	ldr	r3, [pc, #132]	; (947c <xTaskResumeAll+0x160>)
    93f8:	681b      	ldr	r3, [r3, #0]
    93fa:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
    93fc:	687b      	ldr	r3, [r7, #4]
    93fe:	2b00      	cmp	r3, #0
    9400:	d00f      	beq.n	9422 <xTaskResumeAll+0x106>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
    9402:	4b1f      	ldr	r3, [pc, #124]	; (9480 <xTaskResumeAll+0x164>)
    9404:	4798      	blx	r3
    9406:	1e03      	subs	r3, r0, #0
    9408:	d002      	beq.n	9410 <xTaskResumeAll+0xf4>
							{
								xYieldPending = pdTRUE;
    940a:	4b1a      	ldr	r3, [pc, #104]	; (9474 <xTaskResumeAll+0x158>)
    940c:	2201      	movs	r2, #1
    940e:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
    9410:	687b      	ldr	r3, [r7, #4]
    9412:	3b01      	subs	r3, #1
    9414:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
    9416:	687b      	ldr	r3, [r7, #4]
    9418:	2b00      	cmp	r3, #0
    941a:	d1f2      	bne.n	9402 <xTaskResumeAll+0xe6>

						uxPendedTicks = 0;
    941c:	4b17      	ldr	r3, [pc, #92]	; (947c <xTaskResumeAll+0x160>)
    941e:	2200      	movs	r2, #0
    9420:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
    9422:	4b14      	ldr	r3, [pc, #80]	; (9474 <xTaskResumeAll+0x158>)
    9424:	681b      	ldr	r3, [r3, #0]
    9426:	2b00      	cmp	r3, #0
    9428:	d003      	beq.n	9432 <xTaskResumeAll+0x116>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
    942a:	2301      	movs	r3, #1
    942c:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
    942e:	4b15      	ldr	r3, [pc, #84]	; (9484 <xTaskResumeAll+0x168>)
    9430:	4798      	blx	r3
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
    9432:	4b15      	ldr	r3, [pc, #84]	; (9488 <xTaskResumeAll+0x16c>)
    9434:	4798      	blx	r3

	return xAlreadyYielded;
    9436:	68bb      	ldr	r3, [r7, #8]
}
    9438:	0018      	movs	r0, r3
    943a:	46bd      	mov	sp, r7
    943c:	b004      	add	sp, #16
    943e:	bd80      	pop	{r7, pc}
    9440:	20003c58 	.word	0x20003c58
    9444:	00007049 	.word	0x00007049
    9448:	20003c30 	.word	0x20003c30
    944c:	20003bf0 	.word	0x20003bf0
    9450:	00006ebf 	.word	0x00006ebf
    9454:	00005045 	.word	0x00005045
    9458:	20000100 	.word	0x20000100
    945c:	00005025 	.word	0x00005025
    9460:	000057f5 	.word	0x000057f5
    9464:	20003c38 	.word	0x20003c38
    9468:	20003b5c 	.word	0x20003b5c
    946c:	00006e0f 	.word	0x00006e0f
    9470:	20003b58 	.word	0x20003b58
    9474:	20003c44 	.word	0x20003c44
    9478:	00009d09 	.word	0x00009d09
    947c:	20003c40 	.word	0x20003c40
    9480:	000094a9 	.word	0x000094a9
    9484:	00007031 	.word	0x00007031
    9488:	0000706d 	.word	0x0000706d

0000948c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
    948c:	b580      	push	{r7, lr}
    948e:	b082      	sub	sp, #8
    9490:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
    9492:	4b04      	ldr	r3, [pc, #16]	; (94a4 <xTaskGetTickCount+0x18>)
    9494:	681b      	ldr	r3, [r3, #0]
    9496:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
    9498:	687b      	ldr	r3, [r7, #4]
}
    949a:	0018      	movs	r0, r3
    949c:	46bd      	mov	sp, r7
    949e:	b002      	add	sp, #8
    94a0:	bd80      	pop	{r7, pc}
    94a2:	46c0      	nop			; (mov r8, r8)
    94a4:	20003c34 	.word	0x20003c34

000094a8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
    94a8:	b580      	push	{r7, lr}
    94aa:	b086      	sub	sp, #24
    94ac:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
    94ae:	2300      	movs	r3, #0
    94b0:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
    94b2:	4b64      	ldr	r3, [pc, #400]	; (9644 <xTaskIncrementTick+0x19c>)
    94b4:	681b      	ldr	r3, [r3, #0]
    94b6:	2b01      	cmp	r3, #1
    94b8:	d003      	beq.n	94c2 <xTaskIncrementTick+0x1a>
    94ba:	4b63      	ldr	r3, [pc, #396]	; (9648 <xTaskIncrementTick+0x1a0>)
    94bc:	681b      	ldr	r3, [r3, #0]
    94be:	2b00      	cmp	r3, #0
    94c0:	d107      	bne.n	94d2 <xTaskIncrementTick+0x2a>
    94c2:	4b62      	ldr	r3, [pc, #392]	; (964c <xTaskIncrementTick+0x1a4>)
    94c4:	681b      	ldr	r3, [r3, #0]
    94c6:	1c5a      	adds	r2, r3, #1
    94c8:	4b60      	ldr	r3, [pc, #384]	; (964c <xTaskIncrementTick+0x1a4>)
    94ca:	601a      	str	r2, [r3, #0]
    94cc:	2000      	movs	r0, #0
    94ce:	4b60      	ldr	r3, [pc, #384]	; (9650 <xTaskIncrementTick+0x1a8>)
    94d0:	4798      	blx	r3
    94d2:	4b5c      	ldr	r3, [pc, #368]	; (9644 <xTaskIncrementTick+0x19c>)
    94d4:	681b      	ldr	r3, [r3, #0]
    94d6:	2b00      	cmp	r3, #0
    94d8:	d106      	bne.n	94e8 <xTaskIncrementTick+0x40>
    94da:	4b5e      	ldr	r3, [pc, #376]	; (9654 <xTaskIncrementTick+0x1ac>)
    94dc:	681b      	ldr	r3, [r3, #0]
    94de:	3301      	adds	r3, #1
    94e0:	0019      	movs	r1, r3
    94e2:	2003      	movs	r0, #3
    94e4:	4b5c      	ldr	r3, [pc, #368]	; (9658 <xTaskIncrementTick+0x1b0>)
    94e6:	4798      	blx	r3
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
    94e8:	4b56      	ldr	r3, [pc, #344]	; (9644 <xTaskIncrementTick+0x19c>)
    94ea:	681b      	ldr	r3, [r3, #0]
    94ec:	2b00      	cmp	r3, #0
    94ee:	d000      	beq.n	94f2 <xTaskIncrementTick+0x4a>
    94f0:	e098      	b.n	9624 <xTaskIncrementTick+0x17c>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
    94f2:	4b58      	ldr	r3, [pc, #352]	; (9654 <xTaskIncrementTick+0x1ac>)
    94f4:	681b      	ldr	r3, [r3, #0]
    94f6:	3301      	adds	r3, #1
    94f8:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
    94fa:	4b56      	ldr	r3, [pc, #344]	; (9654 <xTaskIncrementTick+0x1ac>)
    94fc:	693a      	ldr	r2, [r7, #16]
    94fe:	601a      	str	r2, [r3, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
    9500:	693b      	ldr	r3, [r7, #16]
    9502:	2b00      	cmp	r3, #0
    9504:	d117      	bne.n	9536 <xTaskIncrementTick+0x8e>
		{
			taskSWITCH_DELAYED_LISTS();
    9506:	4b55      	ldr	r3, [pc, #340]	; (965c <xTaskIncrementTick+0x1b4>)
    9508:	681b      	ldr	r3, [r3, #0]
    950a:	681b      	ldr	r3, [r3, #0]
    950c:	2b00      	cmp	r3, #0
    950e:	d001      	beq.n	9514 <xTaskIncrementTick+0x6c>
    9510:	b672      	cpsid	i
    9512:	e7fe      	b.n	9512 <xTaskIncrementTick+0x6a>
    9514:	4b51      	ldr	r3, [pc, #324]	; (965c <xTaskIncrementTick+0x1b4>)
    9516:	681b      	ldr	r3, [r3, #0]
    9518:	60fb      	str	r3, [r7, #12]
    951a:	4b51      	ldr	r3, [pc, #324]	; (9660 <xTaskIncrementTick+0x1b8>)
    951c:	681a      	ldr	r2, [r3, #0]
    951e:	4b4f      	ldr	r3, [pc, #316]	; (965c <xTaskIncrementTick+0x1b4>)
    9520:	601a      	str	r2, [r3, #0]
    9522:	4b4f      	ldr	r3, [pc, #316]	; (9660 <xTaskIncrementTick+0x1b8>)
    9524:	68fa      	ldr	r2, [r7, #12]
    9526:	601a      	str	r2, [r3, #0]
    9528:	4b4e      	ldr	r3, [pc, #312]	; (9664 <xTaskIncrementTick+0x1bc>)
    952a:	681b      	ldr	r3, [r3, #0]
    952c:	1c5a      	adds	r2, r3, #1
    952e:	4b4d      	ldr	r3, [pc, #308]	; (9664 <xTaskIncrementTick+0x1bc>)
    9530:	601a      	str	r2, [r3, #0]
    9532:	4b4d      	ldr	r3, [pc, #308]	; (9668 <xTaskIncrementTick+0x1c0>)
    9534:	4798      	blx	r3

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
    9536:	4b4d      	ldr	r3, [pc, #308]	; (966c <xTaskIncrementTick+0x1c4>)
    9538:	681b      	ldr	r3, [r3, #0]
    953a:	693a      	ldr	r2, [r7, #16]
    953c:	429a      	cmp	r2, r3
    953e:	d363      	bcc.n	9608 <xTaskIncrementTick+0x160>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
    9540:	4b46      	ldr	r3, [pc, #280]	; (965c <xTaskIncrementTick+0x1b4>)
    9542:	681b      	ldr	r3, [r3, #0]
    9544:	681b      	ldr	r3, [r3, #0]
    9546:	2b00      	cmp	r3, #0
    9548:	d101      	bne.n	954e <xTaskIncrementTick+0xa6>
    954a:	2301      	movs	r3, #1
    954c:	e000      	b.n	9550 <xTaskIncrementTick+0xa8>
    954e:	2300      	movs	r3, #0
    9550:	2b00      	cmp	r3, #0
    9552:	d004      	beq.n	955e <xTaskIncrementTick+0xb6>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    9554:	4b45      	ldr	r3, [pc, #276]	; (966c <xTaskIncrementTick+0x1c4>)
    9556:	2201      	movs	r2, #1
    9558:	4252      	negs	r2, r2
    955a:	601a      	str	r2, [r3, #0]
					break;
    955c:	e054      	b.n	9608 <xTaskIncrementTick+0x160>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
    955e:	4b3f      	ldr	r3, [pc, #252]	; (965c <xTaskIncrementTick+0x1b4>)
    9560:	681b      	ldr	r3, [r3, #0]
    9562:	68db      	ldr	r3, [r3, #12]
    9564:	68db      	ldr	r3, [r3, #12]
    9566:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
    9568:	68bb      	ldr	r3, [r7, #8]
    956a:	685b      	ldr	r3, [r3, #4]
    956c:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
    956e:	693a      	ldr	r2, [r7, #16]
    9570:	687b      	ldr	r3, [r7, #4]
    9572:	429a      	cmp	r2, r3
    9574:	d203      	bcs.n	957e <xTaskIncrementTick+0xd6>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
    9576:	4b3d      	ldr	r3, [pc, #244]	; (966c <xTaskIncrementTick+0x1c4>)
    9578:	687a      	ldr	r2, [r7, #4]
    957a:	601a      	str	r2, [r3, #0]
						break;
    957c:	e044      	b.n	9608 <xTaskIncrementTick+0x160>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
    957e:	68bb      	ldr	r3, [r7, #8]
    9580:	3304      	adds	r3, #4
    9582:	0018      	movs	r0, r3
    9584:	4b3a      	ldr	r3, [pc, #232]	; (9670 <xTaskIncrementTick+0x1c8>)
    9586:	4798      	blx	r3

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
    9588:	68bb      	ldr	r3, [r7, #8]
    958a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    958c:	2b00      	cmp	r3, #0
    958e:	d004      	beq.n	959a <xTaskIncrementTick+0xf2>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
    9590:	68bb      	ldr	r3, [r7, #8]
    9592:	3318      	adds	r3, #24
    9594:	0018      	movs	r0, r3
    9596:	4b36      	ldr	r3, [pc, #216]	; (9670 <xTaskIncrementTick+0x1c8>)
    9598:	4798      	blx	r3
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
    959a:	68bb      	ldr	r3, [r7, #8]
    959c:	0018      	movs	r0, r3
    959e:	4b35      	ldr	r3, [pc, #212]	; (9674 <xTaskIncrementTick+0x1cc>)
    95a0:	4798      	blx	r3
    95a2:	0003      	movs	r3, r0
    95a4:	001a      	movs	r2, r3
    95a6:	4b34      	ldr	r3, [pc, #208]	; (9678 <xTaskIncrementTick+0x1d0>)
    95a8:	881b      	ldrh	r3, [r3, #0]
    95aa:	4013      	ands	r3, r2
    95ac:	b29b      	uxth	r3, r3
    95ae:	2b00      	cmp	r3, #0
    95b0:	d008      	beq.n	95c4 <xTaskIncrementTick+0x11c>
    95b2:	68bb      	ldr	r3, [r7, #8]
    95b4:	0018      	movs	r0, r3
    95b6:	4b31      	ldr	r3, [pc, #196]	; (967c <xTaskIncrementTick+0x1d4>)
    95b8:	4798      	blx	r3
    95ba:	0003      	movs	r3, r0
    95bc:	b2db      	uxtb	r3, r3
    95be:	0018      	movs	r0, r3
    95c0:	4b2f      	ldr	r3, [pc, #188]	; (9680 <xTaskIncrementTick+0x1d8>)
    95c2:	4798      	blx	r3
    95c4:	68bb      	ldr	r3, [r7, #8]
    95c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    95c8:	4b2e      	ldr	r3, [pc, #184]	; (9684 <xTaskIncrementTick+0x1dc>)
    95ca:	681b      	ldr	r3, [r3, #0]
    95cc:	429a      	cmp	r2, r3
    95ce:	d903      	bls.n	95d8 <xTaskIncrementTick+0x130>
    95d0:	68bb      	ldr	r3, [r7, #8]
    95d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    95d4:	4b2b      	ldr	r3, [pc, #172]	; (9684 <xTaskIncrementTick+0x1dc>)
    95d6:	601a      	str	r2, [r3, #0]
    95d8:	68bb      	ldr	r3, [r7, #8]
    95da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    95dc:	0013      	movs	r3, r2
    95de:	009b      	lsls	r3, r3, #2
    95e0:	189b      	adds	r3, r3, r2
    95e2:	009b      	lsls	r3, r3, #2
    95e4:	4a28      	ldr	r2, [pc, #160]	; (9688 <xTaskIncrementTick+0x1e0>)
    95e6:	189a      	adds	r2, r3, r2
    95e8:	68bb      	ldr	r3, [r7, #8]
    95ea:	3304      	adds	r3, #4
    95ec:	0019      	movs	r1, r3
    95ee:	0010      	movs	r0, r2
    95f0:	4b26      	ldr	r3, [pc, #152]	; (968c <xTaskIncrementTick+0x1e4>)
    95f2:	4798      	blx	r3
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
    95f4:	68bb      	ldr	r3, [r7, #8]
    95f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    95f8:	4b25      	ldr	r3, [pc, #148]	; (9690 <xTaskIncrementTick+0x1e8>)
    95fa:	681b      	ldr	r3, [r3, #0]
    95fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    95fe:	429a      	cmp	r2, r3
    9600:	d39e      	bcc.n	9540 <xTaskIncrementTick+0x98>
						{
							xSwitchRequired = pdTRUE;
    9602:	2301      	movs	r3, #1
    9604:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
    9606:	e79b      	b.n	9540 <xTaskIncrementTick+0x98>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
    9608:	4b21      	ldr	r3, [pc, #132]	; (9690 <xTaskIncrementTick+0x1e8>)
    960a:	681b      	ldr	r3, [r3, #0]
    960c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    960e:	491e      	ldr	r1, [pc, #120]	; (9688 <xTaskIncrementTick+0x1e0>)
    9610:	0013      	movs	r3, r2
    9612:	009b      	lsls	r3, r3, #2
    9614:	189b      	adds	r3, r3, r2
    9616:	009b      	lsls	r3, r3, #2
    9618:	585b      	ldr	r3, [r3, r1]
    961a:	2b01      	cmp	r3, #1
    961c:	d907      	bls.n	962e <xTaskIncrementTick+0x186>
			{
				xSwitchRequired = pdTRUE;
    961e:	2301      	movs	r3, #1
    9620:	617b      	str	r3, [r7, #20]
    9622:	e004      	b.n	962e <xTaskIncrementTick+0x186>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
    9624:	4b08      	ldr	r3, [pc, #32]	; (9648 <xTaskIncrementTick+0x1a0>)
    9626:	681b      	ldr	r3, [r3, #0]
    9628:	1c5a      	adds	r2, r3, #1
    962a:	4b07      	ldr	r3, [pc, #28]	; (9648 <xTaskIncrementTick+0x1a0>)
    962c:	601a      	str	r2, [r3, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
    962e:	4b19      	ldr	r3, [pc, #100]	; (9694 <xTaskIncrementTick+0x1ec>)
    9630:	681b      	ldr	r3, [r3, #0]
    9632:	2b00      	cmp	r3, #0
    9634:	d001      	beq.n	963a <xTaskIncrementTick+0x192>
		{
			xSwitchRequired = pdTRUE;
    9636:	2301      	movs	r3, #1
    9638:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
    963a:	697b      	ldr	r3, [r7, #20]
}
    963c:	0018      	movs	r0, r3
    963e:	46bd      	mov	sp, r7
    9640:	b006      	add	sp, #24
    9642:	bd80      	pop	{r7, pc}
    9644:	20003c58 	.word	0x20003c58
    9648:	20003c40 	.word	0x20003c40
    964c:	20000ba0 	.word	0x20000ba0
    9650:	00006cd9 	.word	0x00006cd9
    9654:	20003c34 	.word	0x20003c34
    9658:	00005d45 	.word	0x00005d45
    965c:	20003be8 	.word	0x20003be8
    9660:	20003bec 	.word	0x20003bec
    9664:	20003c48 	.word	0x20003c48
    9668:	00009d09 	.word	0x00009d09
    966c:	20003c50 	.word	0x20003c50
    9670:	00006ebf 	.word	0x00006ebf
    9674:	00005045 	.word	0x00005045
    9678:	20000100 	.word	0x20000100
    967c:	00005025 	.word	0x00005025
    9680:	000057f5 	.word	0x000057f5
    9684:	20003c38 	.word	0x20003c38
    9688:	20003b5c 	.word	0x20003b5c
    968c:	00006e0f 	.word	0x00006e0f
    9690:	20003b58 	.word	0x20003b58
    9694:	20003c44 	.word	0x20003c44

00009698 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
    9698:	b580      	push	{r7, lr}
    969a:	b082      	sub	sp, #8
    969c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
    969e:	4b3a      	ldr	r3, [pc, #232]	; (9788 <vTaskSwitchContext+0xf0>)
    96a0:	681b      	ldr	r3, [r3, #0]
    96a2:	2b00      	cmp	r3, #0
    96a4:	d003      	beq.n	96ae <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
    96a6:	4b39      	ldr	r3, [pc, #228]	; (978c <vTaskSwitchContext+0xf4>)
    96a8:	2201      	movs	r2, #1
    96aa:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
    96ac:	e067      	b.n	977e <vTaskSwitchContext+0xe6>
		xYieldPending = pdFALSE;
    96ae:	4b37      	ldr	r3, [pc, #220]	; (978c <vTaskSwitchContext+0xf4>)
    96b0:	2200      	movs	r2, #0
    96b2:	601a      	str	r2, [r3, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
    96b4:	4b36      	ldr	r3, [pc, #216]	; (9790 <vTaskSwitchContext+0xf8>)
    96b6:	681b      	ldr	r3, [r3, #0]
    96b8:	681a      	ldr	r2, [r3, #0]
    96ba:	4b35      	ldr	r3, [pc, #212]	; (9790 <vTaskSwitchContext+0xf8>)
    96bc:	681b      	ldr	r3, [r3, #0]
    96be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    96c0:	429a      	cmp	r2, r3
    96c2:	d808      	bhi.n	96d6 <vTaskSwitchContext+0x3e>
    96c4:	4b32      	ldr	r3, [pc, #200]	; (9790 <vTaskSwitchContext+0xf8>)
    96c6:	681a      	ldr	r2, [r3, #0]
    96c8:	4b31      	ldr	r3, [pc, #196]	; (9790 <vTaskSwitchContext+0xf8>)
    96ca:	681b      	ldr	r3, [r3, #0]
    96cc:	3334      	adds	r3, #52	; 0x34
    96ce:	0019      	movs	r1, r3
    96d0:	0010      	movs	r0, r2
    96d2:	4b30      	ldr	r3, [pc, #192]	; (9794 <vTaskSwitchContext+0xfc>)
    96d4:	4798      	blx	r3
		taskSELECT_HIGHEST_PRIORITY_TASK();
    96d6:	4b30      	ldr	r3, [pc, #192]	; (9798 <vTaskSwitchContext+0x100>)
    96d8:	681b      	ldr	r3, [r3, #0]
    96da:	607b      	str	r3, [r7, #4]
    96dc:	e007      	b.n	96ee <vTaskSwitchContext+0x56>
    96de:	687b      	ldr	r3, [r7, #4]
    96e0:	2b00      	cmp	r3, #0
    96e2:	d101      	bne.n	96e8 <vTaskSwitchContext+0x50>
    96e4:	b672      	cpsid	i
    96e6:	e7fe      	b.n	96e6 <vTaskSwitchContext+0x4e>
    96e8:	687b      	ldr	r3, [r7, #4]
    96ea:	3b01      	subs	r3, #1
    96ec:	607b      	str	r3, [r7, #4]
    96ee:	492b      	ldr	r1, [pc, #172]	; (979c <vTaskSwitchContext+0x104>)
    96f0:	687a      	ldr	r2, [r7, #4]
    96f2:	0013      	movs	r3, r2
    96f4:	009b      	lsls	r3, r3, #2
    96f6:	189b      	adds	r3, r3, r2
    96f8:	009b      	lsls	r3, r3, #2
    96fa:	585b      	ldr	r3, [r3, r1]
    96fc:	2b00      	cmp	r3, #0
    96fe:	d0ee      	beq.n	96de <vTaskSwitchContext+0x46>
    9700:	687a      	ldr	r2, [r7, #4]
    9702:	0013      	movs	r3, r2
    9704:	009b      	lsls	r3, r3, #2
    9706:	189b      	adds	r3, r3, r2
    9708:	009b      	lsls	r3, r3, #2
    970a:	4a24      	ldr	r2, [pc, #144]	; (979c <vTaskSwitchContext+0x104>)
    970c:	189b      	adds	r3, r3, r2
    970e:	603b      	str	r3, [r7, #0]
    9710:	683b      	ldr	r3, [r7, #0]
    9712:	685b      	ldr	r3, [r3, #4]
    9714:	685a      	ldr	r2, [r3, #4]
    9716:	683b      	ldr	r3, [r7, #0]
    9718:	605a      	str	r2, [r3, #4]
    971a:	683b      	ldr	r3, [r7, #0]
    971c:	685a      	ldr	r2, [r3, #4]
    971e:	683b      	ldr	r3, [r7, #0]
    9720:	3308      	adds	r3, #8
    9722:	429a      	cmp	r2, r3
    9724:	d104      	bne.n	9730 <vTaskSwitchContext+0x98>
    9726:	683b      	ldr	r3, [r7, #0]
    9728:	685b      	ldr	r3, [r3, #4]
    972a:	685a      	ldr	r2, [r3, #4]
    972c:	683b      	ldr	r3, [r7, #0]
    972e:	605a      	str	r2, [r3, #4]
    9730:	683b      	ldr	r3, [r7, #0]
    9732:	685b      	ldr	r3, [r3, #4]
    9734:	68da      	ldr	r2, [r3, #12]
    9736:	4b16      	ldr	r3, [pc, #88]	; (9790 <vTaskSwitchContext+0xf8>)
    9738:	601a      	str	r2, [r3, #0]
    973a:	4b17      	ldr	r3, [pc, #92]	; (9798 <vTaskSwitchContext+0x100>)
    973c:	687a      	ldr	r2, [r7, #4]
    973e:	601a      	str	r2, [r3, #0]
		traceTASK_SWITCHED_IN();
    9740:	4b17      	ldr	r3, [pc, #92]	; (97a0 <vTaskSwitchContext+0x108>)
    9742:	2201      	movs	r2, #1
    9744:	601a      	str	r2, [r3, #0]
    9746:	4b17      	ldr	r3, [pc, #92]	; (97a4 <vTaskSwitchContext+0x10c>)
    9748:	4798      	blx	r3
    974a:	0003      	movs	r3, r0
    974c:	0018      	movs	r0, r3
    974e:	4b16      	ldr	r3, [pc, #88]	; (97a8 <vTaskSwitchContext+0x110>)
    9750:	4798      	blx	r3
    9752:	0003      	movs	r3, r0
    9754:	001a      	movs	r2, r3
    9756:	4b15      	ldr	r3, [pc, #84]	; (97ac <vTaskSwitchContext+0x114>)
    9758:	881b      	ldrh	r3, [r3, #0]
    975a:	4013      	ands	r3, r2
    975c:	b29b      	uxth	r3, r3
    975e:	2b00      	cmp	r3, #0
    9760:	d00a      	beq.n	9778 <vTaskSwitchContext+0xe0>
    9762:	4b10      	ldr	r3, [pc, #64]	; (97a4 <vTaskSwitchContext+0x10c>)
    9764:	4798      	blx	r3
    9766:	0003      	movs	r3, r0
    9768:	0018      	movs	r0, r3
    976a:	4b11      	ldr	r3, [pc, #68]	; (97b0 <vTaskSwitchContext+0x118>)
    976c:	4798      	blx	r3
    976e:	0003      	movs	r3, r0
    9770:	b2db      	uxtb	r3, r3
    9772:	0018      	movs	r0, r3
    9774:	4b0f      	ldr	r3, [pc, #60]	; (97b4 <vTaskSwitchContext+0x11c>)
    9776:	4798      	blx	r3
    9778:	4b09      	ldr	r3, [pc, #36]	; (97a0 <vTaskSwitchContext+0x108>)
    977a:	2202      	movs	r2, #2
    977c:	601a      	str	r2, [r3, #0]
}
    977e:	46c0      	nop			; (mov r8, r8)
    9780:	46bd      	mov	sp, r7
    9782:	b002      	add	sp, #8
    9784:	bd80      	pop	{r7, pc}
    9786:	46c0      	nop			; (mov r8, r8)
    9788:	20003c58 	.word	0x20003c58
    978c:	20003c44 	.word	0x20003c44
    9790:	20003b58 	.word	0x20003b58
    9794:	0001f829 	.word	0x0001f829
    9798:	20003c38 	.word	0x20003c38
    979c:	20003b5c 	.word	0x20003b5c
    97a0:	20000bac 	.word	0x20000bac
    97a4:	000052e1 	.word	0x000052e1
    97a8:	00005045 	.word	0x00005045
    97ac:	20000100 	.word	0x20000100
    97b0:	00005025 	.word	0x00005025
    97b4:	00005e41 	.word	0x00005e41

000097b8 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
    97b8:	b580      	push	{r7, lr}
    97ba:	b082      	sub	sp, #8
    97bc:	af00      	add	r7, sp, #0
    97be:	6078      	str	r0, [r7, #4]
    97c0:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
    97c2:	687b      	ldr	r3, [r7, #4]
    97c4:	2b00      	cmp	r3, #0
    97c6:	d101      	bne.n	97cc <vTaskPlaceOnEventList+0x14>
    97c8:	b672      	cpsid	i
    97ca:	e7fe      	b.n	97ca <vTaskPlaceOnEventList+0x12>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
    97cc:	4b08      	ldr	r3, [pc, #32]	; (97f0 <vTaskPlaceOnEventList+0x38>)
    97ce:	681b      	ldr	r3, [r3, #0]
    97d0:	3318      	adds	r3, #24
    97d2:	001a      	movs	r2, r3
    97d4:	687b      	ldr	r3, [r7, #4]
    97d6:	0011      	movs	r1, r2
    97d8:	0018      	movs	r0, r3
    97da:	4b06      	ldr	r3, [pc, #24]	; (97f4 <vTaskPlaceOnEventList+0x3c>)
    97dc:	4798      	blx	r3

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
    97de:	683b      	ldr	r3, [r7, #0]
    97e0:	2101      	movs	r1, #1
    97e2:	0018      	movs	r0, r3
    97e4:	4b04      	ldr	r3, [pc, #16]	; (97f8 <vTaskPlaceOnEventList+0x40>)
    97e6:	4798      	blx	r3
}
    97e8:	46c0      	nop			; (mov r8, r8)
    97ea:	46bd      	mov	sp, r7
    97ec:	b002      	add	sp, #8
    97ee:	bd80      	pop	{r7, pc}
    97f0:	20003b58 	.word	0x20003b58
    97f4:	00006e53 	.word	0x00006e53
    97f8:	0000a25d 	.word	0x0000a25d

000097fc <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
    97fc:	b580      	push	{r7, lr}
    97fe:	b084      	sub	sp, #16
    9800:	af00      	add	r7, sp, #0
    9802:	60f8      	str	r0, [r7, #12]
    9804:	60b9      	str	r1, [r7, #8]
    9806:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
    9808:	68fb      	ldr	r3, [r7, #12]
    980a:	2b00      	cmp	r3, #0
    980c:	d101      	bne.n	9812 <vTaskPlaceOnEventListRestricted+0x16>
    980e:	b672      	cpsid	i
    9810:	e7fe      	b.n	9810 <vTaskPlaceOnEventListRestricted+0x14>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
    9812:	4b28      	ldr	r3, [pc, #160]	; (98b4 <vTaskPlaceOnEventListRestricted+0xb8>)
    9814:	681b      	ldr	r3, [r3, #0]
    9816:	3318      	adds	r3, #24
    9818:	001a      	movs	r2, r3
    981a:	68fb      	ldr	r3, [r7, #12]
    981c:	0011      	movs	r1, r2
    981e:	0018      	movs	r0, r3
    9820:	4b25      	ldr	r3, [pc, #148]	; (98b8 <vTaskPlaceOnEventListRestricted+0xbc>)
    9822:	4798      	blx	r3

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
    9824:	687b      	ldr	r3, [r7, #4]
    9826:	2b00      	cmp	r3, #0
    9828:	d002      	beq.n	9830 <vTaskPlaceOnEventListRestricted+0x34>
		{
			xTicksToWait = portMAX_DELAY;
    982a:	2301      	movs	r3, #1
    982c:	425b      	negs	r3, r3
    982e:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
    9830:	4b20      	ldr	r3, [pc, #128]	; (98b4 <vTaskPlaceOnEventListRestricted+0xb8>)
    9832:	681b      	ldr	r3, [r3, #0]
    9834:	0018      	movs	r0, r3
    9836:	4b21      	ldr	r3, [pc, #132]	; (98bc <vTaskPlaceOnEventListRestricted+0xc0>)
    9838:	4798      	blx	r3
    983a:	0003      	movs	r3, r0
    983c:	001a      	movs	r2, r3
    983e:	4b20      	ldr	r3, [pc, #128]	; (98c0 <vTaskPlaceOnEventListRestricted+0xc4>)
    9840:	881b      	ldrh	r3, [r3, #0]
    9842:	4013      	ands	r3, r2
    9844:	b29b      	uxth	r3, r3
    9846:	2b00      	cmp	r3, #0
    9848:	d011      	beq.n	986e <vTaskPlaceOnEventListRestricted+0x72>
    984a:	4b1e      	ldr	r3, [pc, #120]	; (98c4 <vTaskPlaceOnEventListRestricted+0xc8>)
    984c:	681a      	ldr	r2, [r3, #0]
    984e:	68bb      	ldr	r3, [r7, #8]
    9850:	18d3      	adds	r3, r2, r3
    9852:	0019      	movs	r1, r3
    9854:	2088      	movs	r0, #136	; 0x88
    9856:	4b1c      	ldr	r3, [pc, #112]	; (98c8 <vTaskPlaceOnEventListRestricted+0xcc>)
    9858:	4798      	blx	r3
    985a:	4b16      	ldr	r3, [pc, #88]	; (98b4 <vTaskPlaceOnEventListRestricted+0xb8>)
    985c:	681b      	ldr	r3, [r3, #0]
    985e:	0018      	movs	r0, r3
    9860:	4b1a      	ldr	r3, [pc, #104]	; (98cc <vTaskPlaceOnEventListRestricted+0xd0>)
    9862:	4798      	blx	r3
    9864:	0003      	movs	r3, r0
    9866:	b2db      	uxtb	r3, r3
    9868:	0018      	movs	r0, r3
    986a:	4b19      	ldr	r3, [pc, #100]	; (98d0 <vTaskPlaceOnEventListRestricted+0xd4>)
    986c:	4798      	blx	r3
    986e:	4b19      	ldr	r3, [pc, #100]	; (98d4 <vTaskPlaceOnEventListRestricted+0xd8>)
    9870:	4798      	blx	r3
    9872:	0003      	movs	r3, r0
    9874:	0018      	movs	r0, r3
    9876:	4b11      	ldr	r3, [pc, #68]	; (98bc <vTaskPlaceOnEventListRestricted+0xc0>)
    9878:	4798      	blx	r3
    987a:	0003      	movs	r3, r0
    987c:	001a      	movs	r2, r3
    987e:	4b10      	ldr	r3, [pc, #64]	; (98c0 <vTaskPlaceOnEventListRestricted+0xc4>)
    9880:	881b      	ldrh	r3, [r3, #0]
    9882:	4013      	ands	r3, r2
    9884:	b29b      	uxth	r3, r3
    9886:	2b00      	cmp	r3, #0
    9888:	d00a      	beq.n	98a0 <vTaskPlaceOnEventListRestricted+0xa4>
    988a:	4b12      	ldr	r3, [pc, #72]	; (98d4 <vTaskPlaceOnEventListRestricted+0xd8>)
    988c:	4798      	blx	r3
    988e:	0003      	movs	r3, r0
    9890:	0018      	movs	r0, r3
    9892:	4b0e      	ldr	r3, [pc, #56]	; (98cc <vTaskPlaceOnEventListRestricted+0xd0>)
    9894:	4798      	blx	r3
    9896:	0003      	movs	r3, r0
    9898:	b2db      	uxtb	r3, r3
    989a:	0018      	movs	r0, r3
    989c:	4b0c      	ldr	r3, [pc, #48]	; (98d0 <vTaskPlaceOnEventListRestricted+0xd4>)
    989e:	4798      	blx	r3
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
    98a0:	687a      	ldr	r2, [r7, #4]
    98a2:	68bb      	ldr	r3, [r7, #8]
    98a4:	0011      	movs	r1, r2
    98a6:	0018      	movs	r0, r3
    98a8:	4b0b      	ldr	r3, [pc, #44]	; (98d8 <vTaskPlaceOnEventListRestricted+0xdc>)
    98aa:	4798      	blx	r3
	}
    98ac:	46c0      	nop			; (mov r8, r8)
    98ae:	46bd      	mov	sp, r7
    98b0:	b004      	add	sp, #16
    98b2:	bd80      	pop	{r7, pc}
    98b4:	20003b58 	.word	0x20003b58
    98b8:	00006e0f 	.word	0x00006e0f
    98bc:	00005045 	.word	0x00005045
    98c0:	20000100 	.word	0x20000100
    98c4:	20003c34 	.word	0x20003c34
    98c8:	00005d45 	.word	0x00005d45
    98cc:	00005025 	.word	0x00005025
    98d0:	000061d5 	.word	0x000061d5
    98d4:	000052e1 	.word	0x000052e1
    98d8:	0000a25d 	.word	0x0000a25d

000098dc <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
    98dc:	b580      	push	{r7, lr}
    98de:	b084      	sub	sp, #16
    98e0:	af00      	add	r7, sp, #0
    98e2:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
    98e4:	687b      	ldr	r3, [r7, #4]
    98e6:	68db      	ldr	r3, [r3, #12]
    98e8:	68db      	ldr	r3, [r3, #12]
    98ea:	60bb      	str	r3, [r7, #8]
	configASSERT( pxUnblockedTCB );
    98ec:	68bb      	ldr	r3, [r7, #8]
    98ee:	2b00      	cmp	r3, #0
    98f0:	d101      	bne.n	98f6 <xTaskRemoveFromEventList+0x1a>
    98f2:	b672      	cpsid	i
    98f4:	e7fe      	b.n	98f4 <xTaskRemoveFromEventList+0x18>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
    98f6:	68bb      	ldr	r3, [r7, #8]
    98f8:	3318      	adds	r3, #24
    98fa:	0018      	movs	r0, r3
    98fc:	4b2a      	ldr	r3, [pc, #168]	; (99a8 <xTaskRemoveFromEventList+0xcc>)
    98fe:	4798      	blx	r3

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
    9900:	4b2a      	ldr	r3, [pc, #168]	; (99ac <xTaskRemoveFromEventList+0xd0>)
    9902:	681b      	ldr	r3, [r3, #0]
    9904:	2b00      	cmp	r3, #0
    9906:	d132      	bne.n	996e <xTaskRemoveFromEventList+0x92>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
    9908:	68bb      	ldr	r3, [r7, #8]
    990a:	3304      	adds	r3, #4
    990c:	0018      	movs	r0, r3
    990e:	4b26      	ldr	r3, [pc, #152]	; (99a8 <xTaskRemoveFromEventList+0xcc>)
    9910:	4798      	blx	r3
		prvAddTaskToReadyList( pxUnblockedTCB );
    9912:	68bb      	ldr	r3, [r7, #8]
    9914:	0018      	movs	r0, r3
    9916:	4b26      	ldr	r3, [pc, #152]	; (99b0 <xTaskRemoveFromEventList+0xd4>)
    9918:	4798      	blx	r3
    991a:	0003      	movs	r3, r0
    991c:	001a      	movs	r2, r3
    991e:	4b25      	ldr	r3, [pc, #148]	; (99b4 <xTaskRemoveFromEventList+0xd8>)
    9920:	881b      	ldrh	r3, [r3, #0]
    9922:	4013      	ands	r3, r2
    9924:	b29b      	uxth	r3, r3
    9926:	2b00      	cmp	r3, #0
    9928:	d008      	beq.n	993c <xTaskRemoveFromEventList+0x60>
    992a:	68bb      	ldr	r3, [r7, #8]
    992c:	0018      	movs	r0, r3
    992e:	4b22      	ldr	r3, [pc, #136]	; (99b8 <xTaskRemoveFromEventList+0xdc>)
    9930:	4798      	blx	r3
    9932:	0003      	movs	r3, r0
    9934:	b2db      	uxtb	r3, r3
    9936:	0018      	movs	r0, r3
    9938:	4b20      	ldr	r3, [pc, #128]	; (99bc <xTaskRemoveFromEventList+0xe0>)
    993a:	4798      	blx	r3
    993c:	68bb      	ldr	r3, [r7, #8]
    993e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    9940:	4b1f      	ldr	r3, [pc, #124]	; (99c0 <xTaskRemoveFromEventList+0xe4>)
    9942:	681b      	ldr	r3, [r3, #0]
    9944:	429a      	cmp	r2, r3
    9946:	d903      	bls.n	9950 <xTaskRemoveFromEventList+0x74>
    9948:	68bb      	ldr	r3, [r7, #8]
    994a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    994c:	4b1c      	ldr	r3, [pc, #112]	; (99c0 <xTaskRemoveFromEventList+0xe4>)
    994e:	601a      	str	r2, [r3, #0]
    9950:	68bb      	ldr	r3, [r7, #8]
    9952:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    9954:	0013      	movs	r3, r2
    9956:	009b      	lsls	r3, r3, #2
    9958:	189b      	adds	r3, r3, r2
    995a:	009b      	lsls	r3, r3, #2
    995c:	4a19      	ldr	r2, [pc, #100]	; (99c4 <xTaskRemoveFromEventList+0xe8>)
    995e:	189a      	adds	r2, r3, r2
    9960:	68bb      	ldr	r3, [r7, #8]
    9962:	3304      	adds	r3, #4
    9964:	0019      	movs	r1, r3
    9966:	0010      	movs	r0, r2
    9968:	4b17      	ldr	r3, [pc, #92]	; (99c8 <xTaskRemoveFromEventList+0xec>)
    996a:	4798      	blx	r3
    996c:	e007      	b.n	997e <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
    996e:	68bb      	ldr	r3, [r7, #8]
    9970:	3318      	adds	r3, #24
    9972:	001a      	movs	r2, r3
    9974:	4b15      	ldr	r3, [pc, #84]	; (99cc <xTaskRemoveFromEventList+0xf0>)
    9976:	0011      	movs	r1, r2
    9978:	0018      	movs	r0, r3
    997a:	4b13      	ldr	r3, [pc, #76]	; (99c8 <xTaskRemoveFromEventList+0xec>)
    997c:	4798      	blx	r3
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
    997e:	68bb      	ldr	r3, [r7, #8]
    9980:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    9982:	4b13      	ldr	r3, [pc, #76]	; (99d0 <xTaskRemoveFromEventList+0xf4>)
    9984:	681b      	ldr	r3, [r3, #0]
    9986:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    9988:	429a      	cmp	r2, r3
    998a:	d905      	bls.n	9998 <xTaskRemoveFromEventList+0xbc>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
    998c:	2301      	movs	r3, #1
    998e:	60fb      	str	r3, [r7, #12]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
    9990:	4b10      	ldr	r3, [pc, #64]	; (99d4 <xTaskRemoveFromEventList+0xf8>)
    9992:	2201      	movs	r2, #1
    9994:	601a      	str	r2, [r3, #0]
    9996:	e001      	b.n	999c <xTaskRemoveFromEventList+0xc0>
	}
	else
	{
		xReturn = pdFALSE;
    9998:	2300      	movs	r3, #0
    999a:	60fb      	str	r3, [r7, #12]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
    999c:	68fb      	ldr	r3, [r7, #12]
}
    999e:	0018      	movs	r0, r3
    99a0:	46bd      	mov	sp, r7
    99a2:	b004      	add	sp, #16
    99a4:	bd80      	pop	{r7, pc}
    99a6:	46c0      	nop			; (mov r8, r8)
    99a8:	00006ebf 	.word	0x00006ebf
    99ac:	20003c58 	.word	0x20003c58
    99b0:	00005045 	.word	0x00005045
    99b4:	20000100 	.word	0x20000100
    99b8:	00005025 	.word	0x00005025
    99bc:	000057f5 	.word	0x000057f5
    99c0:	20003c38 	.word	0x20003c38
    99c4:	20003b5c 	.word	0x20003b5c
    99c8:	00006e0f 	.word	0x00006e0f
    99cc:	20003bf0 	.word	0x20003bf0
    99d0:	20003b58 	.word	0x20003b58
    99d4:	20003c44 	.word	0x20003c44

000099d8 <vTaskSetTimeOutState>:
	}
}
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( TimeOut_t * const pxTimeOut )
{
    99d8:	b580      	push	{r7, lr}
    99da:	b082      	sub	sp, #8
    99dc:	af00      	add	r7, sp, #0
    99de:	6078      	str	r0, [r7, #4]
	configASSERT( pxTimeOut );
    99e0:	687b      	ldr	r3, [r7, #4]
    99e2:	2b00      	cmp	r3, #0
    99e4:	d101      	bne.n	99ea <vTaskSetTimeOutState+0x12>
    99e6:	b672      	cpsid	i
    99e8:	e7fe      	b.n	99e8 <vTaskSetTimeOutState+0x10>
	taskENTER_CRITICAL();
    99ea:	4b08      	ldr	r3, [pc, #32]	; (9a0c <vTaskSetTimeOutState+0x34>)
    99ec:	4798      	blx	r3
	{
		pxTimeOut->xOverflowCount = xNumOfOverflows;
    99ee:	4b08      	ldr	r3, [pc, #32]	; (9a10 <vTaskSetTimeOutState+0x38>)
    99f0:	681a      	ldr	r2, [r3, #0]
    99f2:	687b      	ldr	r3, [r7, #4]
    99f4:	601a      	str	r2, [r3, #0]
		pxTimeOut->xTimeOnEntering = xTickCount;
    99f6:	4b07      	ldr	r3, [pc, #28]	; (9a14 <vTaskSetTimeOutState+0x3c>)
    99f8:	681a      	ldr	r2, [r3, #0]
    99fa:	687b      	ldr	r3, [r7, #4]
    99fc:	605a      	str	r2, [r3, #4]
	}
	taskEXIT_CRITICAL();
    99fe:	4b06      	ldr	r3, [pc, #24]	; (9a18 <vTaskSetTimeOutState+0x40>)
    9a00:	4798      	blx	r3
}
    9a02:	46c0      	nop			; (mov r8, r8)
    9a04:	46bd      	mov	sp, r7
    9a06:	b002      	add	sp, #8
    9a08:	bd80      	pop	{r7, pc}
    9a0a:	46c0      	nop			; (mov r8, r8)
    9a0c:	00007049 	.word	0x00007049
    9a10:	20003c48 	.word	0x20003c48
    9a14:	20003c34 	.word	0x20003c34
    9a18:	0000706d 	.word	0x0000706d

00009a1c <vTaskInternalSetTimeOutState>:
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
    9a1c:	b580      	push	{r7, lr}
    9a1e:	b082      	sub	sp, #8
    9a20:	af00      	add	r7, sp, #0
    9a22:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
    9a24:	4b05      	ldr	r3, [pc, #20]	; (9a3c <vTaskInternalSetTimeOutState+0x20>)
    9a26:	681a      	ldr	r2, [r3, #0]
    9a28:	687b      	ldr	r3, [r7, #4]
    9a2a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
    9a2c:	4b04      	ldr	r3, [pc, #16]	; (9a40 <vTaskInternalSetTimeOutState+0x24>)
    9a2e:	681a      	ldr	r2, [r3, #0]
    9a30:	687b      	ldr	r3, [r7, #4]
    9a32:	605a      	str	r2, [r3, #4]
}
    9a34:	46c0      	nop			; (mov r8, r8)
    9a36:	46bd      	mov	sp, r7
    9a38:	b002      	add	sp, #8
    9a3a:	bd80      	pop	{r7, pc}
    9a3c:	20003c48 	.word	0x20003c48
    9a40:	20003c34 	.word	0x20003c34

00009a44 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
    9a44:	b580      	push	{r7, lr}
    9a46:	b086      	sub	sp, #24
    9a48:	af00      	add	r7, sp, #0
    9a4a:	6078      	str	r0, [r7, #4]
    9a4c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
    9a4e:	687b      	ldr	r3, [r7, #4]
    9a50:	2b00      	cmp	r3, #0
    9a52:	d101      	bne.n	9a58 <xTaskCheckForTimeOut+0x14>
    9a54:	b672      	cpsid	i
    9a56:	e7fe      	b.n	9a56 <xTaskCheckForTimeOut+0x12>
	configASSERT( pxTicksToWait );
    9a58:	683b      	ldr	r3, [r7, #0]
    9a5a:	2b00      	cmp	r3, #0
    9a5c:	d101      	bne.n	9a62 <xTaskCheckForTimeOut+0x1e>
    9a5e:	b672      	cpsid	i
    9a60:	e7fe      	b.n	9a60 <xTaskCheckForTimeOut+0x1c>

	taskENTER_CRITICAL();
    9a62:	4b1e      	ldr	r3, [pc, #120]	; (9adc <xTaskCheckForTimeOut+0x98>)
    9a64:	4798      	blx	r3
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
    9a66:	4b1e      	ldr	r3, [pc, #120]	; (9ae0 <xTaskCheckForTimeOut+0x9c>)
    9a68:	681b      	ldr	r3, [r3, #0]
    9a6a:	613b      	str	r3, [r7, #16]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
    9a6c:	687b      	ldr	r3, [r7, #4]
    9a6e:	685b      	ldr	r3, [r3, #4]
    9a70:	693a      	ldr	r2, [r7, #16]
    9a72:	1ad3      	subs	r3, r2, r3
    9a74:	60fb      	str	r3, [r7, #12]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
    9a76:	683b      	ldr	r3, [r7, #0]
    9a78:	681b      	ldr	r3, [r3, #0]
    9a7a:	3301      	adds	r3, #1
    9a7c:	d102      	bne.n	9a84 <xTaskCheckForTimeOut+0x40>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
    9a7e:	2300      	movs	r3, #0
    9a80:	617b      	str	r3, [r7, #20]
    9a82:	e024      	b.n	9ace <xTaskCheckForTimeOut+0x8a>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
    9a84:	687b      	ldr	r3, [r7, #4]
    9a86:	681a      	ldr	r2, [r3, #0]
    9a88:	4b16      	ldr	r3, [pc, #88]	; (9ae4 <xTaskCheckForTimeOut+0xa0>)
    9a8a:	681b      	ldr	r3, [r3, #0]
    9a8c:	429a      	cmp	r2, r3
    9a8e:	d007      	beq.n	9aa0 <xTaskCheckForTimeOut+0x5c>
    9a90:	687b      	ldr	r3, [r7, #4]
    9a92:	685a      	ldr	r2, [r3, #4]
    9a94:	693b      	ldr	r3, [r7, #16]
    9a96:	429a      	cmp	r2, r3
    9a98:	d802      	bhi.n	9aa0 <xTaskCheckForTimeOut+0x5c>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
    9a9a:	2301      	movs	r3, #1
    9a9c:	617b      	str	r3, [r7, #20]
    9a9e:	e016      	b.n	9ace <xTaskCheckForTimeOut+0x8a>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
    9aa0:	683b      	ldr	r3, [r7, #0]
    9aa2:	681a      	ldr	r2, [r3, #0]
    9aa4:	68fb      	ldr	r3, [r7, #12]
    9aa6:	429a      	cmp	r2, r3
    9aa8:	d90c      	bls.n	9ac4 <xTaskCheckForTimeOut+0x80>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
    9aaa:	683b      	ldr	r3, [r7, #0]
    9aac:	681a      	ldr	r2, [r3, #0]
    9aae:	68fb      	ldr	r3, [r7, #12]
    9ab0:	1ad2      	subs	r2, r2, r3
    9ab2:	683b      	ldr	r3, [r7, #0]
    9ab4:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
    9ab6:	687b      	ldr	r3, [r7, #4]
    9ab8:	0018      	movs	r0, r3
    9aba:	4b0b      	ldr	r3, [pc, #44]	; (9ae8 <xTaskCheckForTimeOut+0xa4>)
    9abc:	4798      	blx	r3
			xReturn = pdFALSE;
    9abe:	2300      	movs	r3, #0
    9ac0:	617b      	str	r3, [r7, #20]
    9ac2:	e004      	b.n	9ace <xTaskCheckForTimeOut+0x8a>
		}
		else
		{
			*pxTicksToWait = 0;
    9ac4:	683b      	ldr	r3, [r7, #0]
    9ac6:	2200      	movs	r2, #0
    9ac8:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
    9aca:	2301      	movs	r3, #1
    9acc:	617b      	str	r3, [r7, #20]
		}
	}
	taskEXIT_CRITICAL();
    9ace:	4b07      	ldr	r3, [pc, #28]	; (9aec <xTaskCheckForTimeOut+0xa8>)
    9ad0:	4798      	blx	r3

	return xReturn;
    9ad2:	697b      	ldr	r3, [r7, #20]
}
    9ad4:	0018      	movs	r0, r3
    9ad6:	46bd      	mov	sp, r7
    9ad8:	b006      	add	sp, #24
    9ada:	bd80      	pop	{r7, pc}
    9adc:	00007049 	.word	0x00007049
    9ae0:	20003c34 	.word	0x20003c34
    9ae4:	20003c48 	.word	0x20003c48
    9ae8:	00009a1d 	.word	0x00009a1d
    9aec:	0000706d 	.word	0x0000706d

00009af0 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
    9af0:	b580      	push	{r7, lr}
    9af2:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
    9af4:	4b02      	ldr	r3, [pc, #8]	; (9b00 <vTaskMissedYield+0x10>)
    9af6:	2201      	movs	r2, #1
    9af8:	601a      	str	r2, [r3, #0]
}
    9afa:	46c0      	nop			; (mov r8, r8)
    9afc:	46bd      	mov	sp, r7
    9afe:	bd80      	pop	{r7, pc}
    9b00:	20003c44 	.word	0x20003c44

00009b04 <uxTaskGetTaskNumber>:
/*-----------------------------------------------------------*/

#if ( configUSE_TRACE_FACILITY == 1 )

	UBaseType_t uxTaskGetTaskNumber( TaskHandle_t xTask )
	{
    9b04:	b580      	push	{r7, lr}
    9b06:	b084      	sub	sp, #16
    9b08:	af00      	add	r7, sp, #0
    9b0a:	6078      	str	r0, [r7, #4]
	UBaseType_t uxReturn;
	TCB_t *pxTCB;

		if( xTask != NULL )
    9b0c:	687b      	ldr	r3, [r7, #4]
    9b0e:	2b00      	cmp	r3, #0
    9b10:	d005      	beq.n	9b1e <uxTaskGetTaskNumber+0x1a>
		{
			pxTCB = ( TCB_t * ) xTask;
    9b12:	687b      	ldr	r3, [r7, #4]
    9b14:	60bb      	str	r3, [r7, #8]
			uxReturn = pxTCB->uxTaskNumber;
    9b16:	68bb      	ldr	r3, [r7, #8]
    9b18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    9b1a:	60fb      	str	r3, [r7, #12]
    9b1c:	e001      	b.n	9b22 <uxTaskGetTaskNumber+0x1e>
		}
		else
		{
			uxReturn = 0U;
    9b1e:	2300      	movs	r3, #0
    9b20:	60fb      	str	r3, [r7, #12]
		}

		return uxReturn;
    9b22:	68fb      	ldr	r3, [r7, #12]
	}
    9b24:	0018      	movs	r0, r3
    9b26:	46bd      	mov	sp, r7
    9b28:	b004      	add	sp, #16
    9b2a:	bd80      	pop	{r7, pc}

00009b2c <vTaskSetTaskNumber>:
/*-----------------------------------------------------------*/

#if ( configUSE_TRACE_FACILITY == 1 )

	void vTaskSetTaskNumber( TaskHandle_t xTask, const UBaseType_t uxHandle )
	{
    9b2c:	b580      	push	{r7, lr}
    9b2e:	b084      	sub	sp, #16
    9b30:	af00      	add	r7, sp, #0
    9b32:	6078      	str	r0, [r7, #4]
    9b34:	6039      	str	r1, [r7, #0]
	TCB_t *pxTCB;

		if( xTask != NULL )
    9b36:	687b      	ldr	r3, [r7, #4]
    9b38:	2b00      	cmp	r3, #0
    9b3a:	d004      	beq.n	9b46 <vTaskSetTaskNumber+0x1a>
		{
			pxTCB = ( TCB_t * ) xTask;
    9b3c:	687b      	ldr	r3, [r7, #4]
    9b3e:	60fb      	str	r3, [r7, #12]
			pxTCB->uxTaskNumber = uxHandle;
    9b40:	68fb      	ldr	r3, [r7, #12]
    9b42:	683a      	ldr	r2, [r7, #0]
    9b44:	641a      	str	r2, [r3, #64]	; 0x40
		}
	}
    9b46:	46c0      	nop			; (mov r8, r8)
    9b48:	46bd      	mov	sp, r7
    9b4a:	b004      	add	sp, #16
    9b4c:	bd80      	pop	{r7, pc}
	...

00009b50 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
    9b50:	b580      	push	{r7, lr}
    9b52:	b082      	sub	sp, #8
    9b54:	af00      	add	r7, sp, #0
    9b56:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
    9b58:	4b04      	ldr	r3, [pc, #16]	; (9b6c <prvIdleTask+0x1c>)
    9b5a:	4798      	blx	r3

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
    9b5c:	4b04      	ldr	r3, [pc, #16]	; (9b70 <prvIdleTask+0x20>)
    9b5e:	681b      	ldr	r3, [r3, #0]
    9b60:	2b01      	cmp	r3, #1
    9b62:	d9f9      	bls.n	9b58 <prvIdleTask+0x8>
			{
				taskYIELD();
    9b64:	4b03      	ldr	r3, [pc, #12]	; (9b74 <prvIdleTask+0x24>)
    9b66:	4798      	blx	r3
		prvCheckTasksWaitingTermination();
    9b68:	e7f6      	b.n	9b58 <prvIdleTask+0x8>
    9b6a:	46c0      	nop			; (mov r8, r8)
    9b6c:	00009c05 	.word	0x00009c05
    9b70:	20003b5c 	.word	0x20003b5c
    9b74:	00007031 	.word	0x00007031

00009b78 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
    9b78:	b580      	push	{r7, lr}
    9b7a:	b082      	sub	sp, #8
    9b7c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
    9b7e:	2300      	movs	r3, #0
    9b80:	607b      	str	r3, [r7, #4]
    9b82:	e00c      	b.n	9b9e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
    9b84:	687a      	ldr	r2, [r7, #4]
    9b86:	0013      	movs	r3, r2
    9b88:	009b      	lsls	r3, r3, #2
    9b8a:	189b      	adds	r3, r3, r2
    9b8c:	009b      	lsls	r3, r3, #2
    9b8e:	4a14      	ldr	r2, [pc, #80]	; (9be0 <prvInitialiseTaskLists+0x68>)
    9b90:	189b      	adds	r3, r3, r2
    9b92:	0018      	movs	r0, r3
    9b94:	4b13      	ldr	r3, [pc, #76]	; (9be4 <prvInitialiseTaskLists+0x6c>)
    9b96:	4798      	blx	r3
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
    9b98:	687b      	ldr	r3, [r7, #4]
    9b9a:	3301      	adds	r3, #1
    9b9c:	607b      	str	r3, [r7, #4]
    9b9e:	687b      	ldr	r3, [r7, #4]
    9ba0:	2b04      	cmp	r3, #4
    9ba2:	d9ef      	bls.n	9b84 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
    9ba4:	4b10      	ldr	r3, [pc, #64]	; (9be8 <prvInitialiseTaskLists+0x70>)
    9ba6:	0018      	movs	r0, r3
    9ba8:	4b0e      	ldr	r3, [pc, #56]	; (9be4 <prvInitialiseTaskLists+0x6c>)
    9baa:	4798      	blx	r3
	vListInitialise( &xDelayedTaskList2 );
    9bac:	4b0f      	ldr	r3, [pc, #60]	; (9bec <prvInitialiseTaskLists+0x74>)
    9bae:	0018      	movs	r0, r3
    9bb0:	4b0c      	ldr	r3, [pc, #48]	; (9be4 <prvInitialiseTaskLists+0x6c>)
    9bb2:	4798      	blx	r3
	vListInitialise( &xPendingReadyList );
    9bb4:	4b0e      	ldr	r3, [pc, #56]	; (9bf0 <prvInitialiseTaskLists+0x78>)
    9bb6:	0018      	movs	r0, r3
    9bb8:	4b0a      	ldr	r3, [pc, #40]	; (9be4 <prvInitialiseTaskLists+0x6c>)
    9bba:	4798      	blx	r3

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
    9bbc:	4b0d      	ldr	r3, [pc, #52]	; (9bf4 <prvInitialiseTaskLists+0x7c>)
    9bbe:	0018      	movs	r0, r3
    9bc0:	4b08      	ldr	r3, [pc, #32]	; (9be4 <prvInitialiseTaskLists+0x6c>)
    9bc2:	4798      	blx	r3
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
    9bc4:	4b0c      	ldr	r3, [pc, #48]	; (9bf8 <prvInitialiseTaskLists+0x80>)
    9bc6:	0018      	movs	r0, r3
    9bc8:	4b06      	ldr	r3, [pc, #24]	; (9be4 <prvInitialiseTaskLists+0x6c>)
    9bca:	4798      	blx	r3
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
    9bcc:	4b0b      	ldr	r3, [pc, #44]	; (9bfc <prvInitialiseTaskLists+0x84>)
    9bce:	4a06      	ldr	r2, [pc, #24]	; (9be8 <prvInitialiseTaskLists+0x70>)
    9bd0:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
    9bd2:	4b0b      	ldr	r3, [pc, #44]	; (9c00 <prvInitialiseTaskLists+0x88>)
    9bd4:	4a05      	ldr	r2, [pc, #20]	; (9bec <prvInitialiseTaskLists+0x74>)
    9bd6:	601a      	str	r2, [r3, #0]
}
    9bd8:	46c0      	nop			; (mov r8, r8)
    9bda:	46bd      	mov	sp, r7
    9bdc:	b002      	add	sp, #8
    9bde:	bd80      	pop	{r7, pc}
    9be0:	20003b5c 	.word	0x20003b5c
    9be4:	00006dbd 	.word	0x00006dbd
    9be8:	20003bc0 	.word	0x20003bc0
    9bec:	20003bd4 	.word	0x20003bd4
    9bf0:	20003bf0 	.word	0x20003bf0
    9bf4:	20003c04 	.word	0x20003c04
    9bf8:	20003c1c 	.word	0x20003c1c
    9bfc:	20003be8 	.word	0x20003be8
    9c00:	20003bec 	.word	0x20003bec

00009c04 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
    9c04:	b580      	push	{r7, lr}
    9c06:	b082      	sub	sp, #8
    9c08:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
    9c0a:	e01a      	b.n	9c42 <prvCheckTasksWaitingTermination+0x3e>
		{
			taskENTER_CRITICAL();
    9c0c:	4b11      	ldr	r3, [pc, #68]	; (9c54 <prvCheckTasksWaitingTermination+0x50>)
    9c0e:	4798      	blx	r3
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
    9c10:	4b11      	ldr	r3, [pc, #68]	; (9c58 <prvCheckTasksWaitingTermination+0x54>)
    9c12:	68db      	ldr	r3, [r3, #12]
    9c14:	68db      	ldr	r3, [r3, #12]
    9c16:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
    9c18:	687b      	ldr	r3, [r7, #4]
    9c1a:	3304      	adds	r3, #4
    9c1c:	0018      	movs	r0, r3
    9c1e:	4b0f      	ldr	r3, [pc, #60]	; (9c5c <prvCheckTasksWaitingTermination+0x58>)
    9c20:	4798      	blx	r3
				--uxCurrentNumberOfTasks;
    9c22:	4b0f      	ldr	r3, [pc, #60]	; (9c60 <prvCheckTasksWaitingTermination+0x5c>)
    9c24:	681b      	ldr	r3, [r3, #0]
    9c26:	1e5a      	subs	r2, r3, #1
    9c28:	4b0d      	ldr	r3, [pc, #52]	; (9c60 <prvCheckTasksWaitingTermination+0x5c>)
    9c2a:	601a      	str	r2, [r3, #0]
				--uxDeletedTasksWaitingCleanUp;
    9c2c:	4b0d      	ldr	r3, [pc, #52]	; (9c64 <prvCheckTasksWaitingTermination+0x60>)
    9c2e:	681b      	ldr	r3, [r3, #0]
    9c30:	1e5a      	subs	r2, r3, #1
    9c32:	4b0c      	ldr	r3, [pc, #48]	; (9c64 <prvCheckTasksWaitingTermination+0x60>)
    9c34:	601a      	str	r2, [r3, #0]
			}
			taskEXIT_CRITICAL();
    9c36:	4b0c      	ldr	r3, [pc, #48]	; (9c68 <prvCheckTasksWaitingTermination+0x64>)
    9c38:	4798      	blx	r3

			prvDeleteTCB( pxTCB );
    9c3a:	687b      	ldr	r3, [r7, #4]
    9c3c:	0018      	movs	r0, r3
    9c3e:	4b0b      	ldr	r3, [pc, #44]	; (9c6c <prvCheckTasksWaitingTermination+0x68>)
    9c40:	4798      	blx	r3
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
    9c42:	4b08      	ldr	r3, [pc, #32]	; (9c64 <prvCheckTasksWaitingTermination+0x60>)
    9c44:	681b      	ldr	r3, [r3, #0]
    9c46:	2b00      	cmp	r3, #0
    9c48:	d1e0      	bne.n	9c0c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
    9c4a:	46c0      	nop			; (mov r8, r8)
    9c4c:	46bd      	mov	sp, r7
    9c4e:	b002      	add	sp, #8
    9c50:	bd80      	pop	{r7, pc}
    9c52:	46c0      	nop			; (mov r8, r8)
    9c54:	00007049 	.word	0x00007049
    9c58:	20003c04 	.word	0x20003c04
    9c5c:	00006ebf 	.word	0x00006ebf
    9c60:	20003c30 	.word	0x20003c30
    9c64:	20003c18 	.word	0x20003c18
    9c68:	0000706d 	.word	0x0000706d
    9c6c:	00009ce1 	.word	0x00009ce1

00009c70 <prvTaskCheckFreeStackSpace>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) )

	static uint16_t prvTaskCheckFreeStackSpace( const uint8_t * pucStackByte )
	{
    9c70:	b580      	push	{r7, lr}
    9c72:	b084      	sub	sp, #16
    9c74:	af00      	add	r7, sp, #0
    9c76:	6078      	str	r0, [r7, #4]
	uint32_t ulCount = 0U;
    9c78:	2300      	movs	r3, #0
    9c7a:	60fb      	str	r3, [r7, #12]

		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
    9c7c:	e005      	b.n	9c8a <prvTaskCheckFreeStackSpace+0x1a>
		{
			pucStackByte -= portSTACK_GROWTH;
    9c7e:	687b      	ldr	r3, [r7, #4]
    9c80:	3301      	adds	r3, #1
    9c82:	607b      	str	r3, [r7, #4]
			ulCount++;
    9c84:	68fb      	ldr	r3, [r7, #12]
    9c86:	3301      	adds	r3, #1
    9c88:	60fb      	str	r3, [r7, #12]
		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
    9c8a:	687b      	ldr	r3, [r7, #4]
    9c8c:	781b      	ldrb	r3, [r3, #0]
    9c8e:	2ba5      	cmp	r3, #165	; 0xa5
    9c90:	d0f5      	beq.n	9c7e <prvTaskCheckFreeStackSpace+0xe>
		}

		ulCount /= ( uint32_t ) sizeof( StackType_t ); /*lint !e961 Casting is not redundant on smaller architectures. */
    9c92:	68fb      	ldr	r3, [r7, #12]
    9c94:	089b      	lsrs	r3, r3, #2
    9c96:	60fb      	str	r3, [r7, #12]

		return ( uint16_t ) ulCount;
    9c98:	68fb      	ldr	r3, [r7, #12]
    9c9a:	b29b      	uxth	r3, r3
	}
    9c9c:	0018      	movs	r0, r3
    9c9e:	46bd      	mov	sp, r7
    9ca0:	b004      	add	sp, #16
    9ca2:	bd80      	pop	{r7, pc}

00009ca4 <uxTaskGetStackHighWaterMark>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_uxTaskGetStackHighWaterMark == 1 )

	UBaseType_t uxTaskGetStackHighWaterMark( TaskHandle_t xTask )
	{
    9ca4:	b580      	push	{r7, lr}
    9ca6:	b086      	sub	sp, #24
    9ca8:	af00      	add	r7, sp, #0
    9caa:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;
	uint8_t *pucEndOfStack;
	UBaseType_t uxReturn;

		pxTCB = prvGetTCBFromHandle( xTask );
    9cac:	687b      	ldr	r3, [r7, #4]
    9cae:	2b00      	cmp	r3, #0
    9cb0:	d102      	bne.n	9cb8 <uxTaskGetStackHighWaterMark+0x14>
    9cb2:	4b09      	ldr	r3, [pc, #36]	; (9cd8 <uxTaskGetStackHighWaterMark+0x34>)
    9cb4:	681b      	ldr	r3, [r3, #0]
    9cb6:	e000      	b.n	9cba <uxTaskGetStackHighWaterMark+0x16>
    9cb8:	687b      	ldr	r3, [r7, #4]
    9cba:	617b      	str	r3, [r7, #20]

		#if portSTACK_GROWTH < 0
		{
			pucEndOfStack = ( uint8_t * ) pxTCB->pxStack;
    9cbc:	697b      	ldr	r3, [r7, #20]
    9cbe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    9cc0:	613b      	str	r3, [r7, #16]
		{
			pucEndOfStack = ( uint8_t * ) pxTCB->pxEndOfStack;
		}
		#endif

		uxReturn = ( UBaseType_t ) prvTaskCheckFreeStackSpace( pucEndOfStack );
    9cc2:	693b      	ldr	r3, [r7, #16]
    9cc4:	0018      	movs	r0, r3
    9cc6:	4b05      	ldr	r3, [pc, #20]	; (9cdc <uxTaskGetStackHighWaterMark+0x38>)
    9cc8:	4798      	blx	r3
    9cca:	0003      	movs	r3, r0
    9ccc:	60fb      	str	r3, [r7, #12]

		return uxReturn;
    9cce:	68fb      	ldr	r3, [r7, #12]
	}
    9cd0:	0018      	movs	r0, r3
    9cd2:	46bd      	mov	sp, r7
    9cd4:	b006      	add	sp, #24
    9cd6:	bd80      	pop	{r7, pc}
    9cd8:	20003b58 	.word	0x20003b58
    9cdc:	00009c71 	.word	0x00009c71

00009ce0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
    9ce0:	b580      	push	{r7, lr}
    9ce2:	b082      	sub	sp, #8
    9ce4:	af00      	add	r7, sp, #0
    9ce6:	6078      	str	r0, [r7, #4]

		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
		{
			/* The task can only have been allocated dynamically - free both
			the stack and TCB. */
			vPortFree( pxTCB->pxStack );
    9ce8:	687b      	ldr	r3, [r7, #4]
    9cea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    9cec:	0018      	movs	r0, r3
    9cee:	4b05      	ldr	r3, [pc, #20]	; (9d04 <prvDeleteTCB+0x24>)
    9cf0:	4798      	blx	r3
			vPortFree( pxTCB );
    9cf2:	687b      	ldr	r3, [r7, #4]
    9cf4:	0018      	movs	r0, r3
    9cf6:	4b03      	ldr	r3, [pc, #12]	; (9d04 <prvDeleteTCB+0x24>)
    9cf8:	4798      	blx	r3
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
    9cfa:	46c0      	nop			; (mov r8, r8)
    9cfc:	46bd      	mov	sp, r7
    9cfe:	b002      	add	sp, #8
    9d00:	bd80      	pop	{r7, pc}
    9d02:	46c0      	nop			; (mov r8, r8)
    9d04:	00007245 	.word	0x00007245

00009d08 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
    9d08:	b580      	push	{r7, lr}
    9d0a:	b082      	sub	sp, #8
    9d0c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
    9d0e:	4b0e      	ldr	r3, [pc, #56]	; (9d48 <prvResetNextTaskUnblockTime+0x40>)
    9d10:	681b      	ldr	r3, [r3, #0]
    9d12:	681b      	ldr	r3, [r3, #0]
    9d14:	2b00      	cmp	r3, #0
    9d16:	d101      	bne.n	9d1c <prvResetNextTaskUnblockTime+0x14>
    9d18:	2301      	movs	r3, #1
    9d1a:	e000      	b.n	9d1e <prvResetNextTaskUnblockTime+0x16>
    9d1c:	2300      	movs	r3, #0
    9d1e:	2b00      	cmp	r3, #0
    9d20:	d004      	beq.n	9d2c <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
    9d22:	4b0a      	ldr	r3, [pc, #40]	; (9d4c <prvResetNextTaskUnblockTime+0x44>)
    9d24:	2201      	movs	r2, #1
    9d26:	4252      	negs	r2, r2
    9d28:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
    9d2a:	e008      	b.n	9d3e <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
    9d2c:	4b06      	ldr	r3, [pc, #24]	; (9d48 <prvResetNextTaskUnblockTime+0x40>)
    9d2e:	681b      	ldr	r3, [r3, #0]
    9d30:	68db      	ldr	r3, [r3, #12]
    9d32:	68db      	ldr	r3, [r3, #12]
    9d34:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
    9d36:	687b      	ldr	r3, [r7, #4]
    9d38:	685a      	ldr	r2, [r3, #4]
    9d3a:	4b04      	ldr	r3, [pc, #16]	; (9d4c <prvResetNextTaskUnblockTime+0x44>)
    9d3c:	601a      	str	r2, [r3, #0]
}
    9d3e:	46c0      	nop			; (mov r8, r8)
    9d40:	46bd      	mov	sp, r7
    9d42:	b002      	add	sp, #8
    9d44:	bd80      	pop	{r7, pc}
    9d46:	46c0      	nop			; (mov r8, r8)
    9d48:	20003be8 	.word	0x20003be8
    9d4c:	20003c50 	.word	0x20003c50

00009d50 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
    9d50:	b580      	push	{r7, lr}
    9d52:	b082      	sub	sp, #8
    9d54:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
    9d56:	4b04      	ldr	r3, [pc, #16]	; (9d68 <xTaskGetCurrentTaskHandle+0x18>)
    9d58:	681b      	ldr	r3, [r3, #0]
    9d5a:	607b      	str	r3, [r7, #4]

		return xReturn;
    9d5c:	687b      	ldr	r3, [r7, #4]
	}
    9d5e:	0018      	movs	r0, r3
    9d60:	46bd      	mov	sp, r7
    9d62:	b002      	add	sp, #8
    9d64:	bd80      	pop	{r7, pc}
    9d66:	46c0      	nop			; (mov r8, r8)
    9d68:	20003b58 	.word	0x20003b58

00009d6c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
    9d6c:	b580      	push	{r7, lr}
    9d6e:	b082      	sub	sp, #8
    9d70:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
    9d72:	4b0a      	ldr	r3, [pc, #40]	; (9d9c <xTaskGetSchedulerState+0x30>)
    9d74:	681b      	ldr	r3, [r3, #0]
    9d76:	2b00      	cmp	r3, #0
    9d78:	d102      	bne.n	9d80 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
    9d7a:	2301      	movs	r3, #1
    9d7c:	607b      	str	r3, [r7, #4]
    9d7e:	e008      	b.n	9d92 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
    9d80:	4b07      	ldr	r3, [pc, #28]	; (9da0 <xTaskGetSchedulerState+0x34>)
    9d82:	681b      	ldr	r3, [r3, #0]
    9d84:	2b00      	cmp	r3, #0
    9d86:	d102      	bne.n	9d8e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
    9d88:	2302      	movs	r3, #2
    9d8a:	607b      	str	r3, [r7, #4]
    9d8c:	e001      	b.n	9d92 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
    9d8e:	2300      	movs	r3, #0
    9d90:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
    9d92:	687b      	ldr	r3, [r7, #4]
	}
    9d94:	0018      	movs	r0, r3
    9d96:	46bd      	mov	sp, r7
    9d98:	b002      	add	sp, #8
    9d9a:	bd80      	pop	{r7, pc}
    9d9c:	20003c3c 	.word	0x20003c3c
    9da0:	20003c58 	.word	0x20003c58

00009da4 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
    9da4:	b590      	push	{r4, r7, lr}
    9da6:	b085      	sub	sp, #20
    9da8:	af00      	add	r7, sp, #0
    9daa:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = ( TCB_t * ) pxMutexHolder;
    9dac:	687b      	ldr	r3, [r7, #4]
    9dae:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
    9db0:	2300      	movs	r3, #0
    9db2:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
    9db4:	687b      	ldr	r3, [r7, #4]
    9db6:	2b00      	cmp	r3, #0
    9db8:	d100      	bne.n	9dbc <xTaskPriorityInherit+0x18>
    9dba:	e09d      	b.n	9ef8 <xTaskPriorityInherit+0x154>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
    9dbc:	68bb      	ldr	r3, [r7, #8]
    9dbe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    9dc0:	4b50      	ldr	r3, [pc, #320]	; (9f04 <xTaskPriorityInherit+0x160>)
    9dc2:	681b      	ldr	r3, [r3, #0]
    9dc4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    9dc6:	429a      	cmp	r2, r3
    9dc8:	d300      	bcc.n	9dcc <xTaskPriorityInherit+0x28>
    9dca:	e08c      	b.n	9ee6 <xTaskPriorityInherit+0x142>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
    9dcc:	68bb      	ldr	r3, [r7, #8]
    9dce:	699b      	ldr	r3, [r3, #24]
    9dd0:	2b00      	cmp	r3, #0
    9dd2:	db06      	blt.n	9de2 <xTaskPriorityInherit+0x3e>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    9dd4:	4b4b      	ldr	r3, [pc, #300]	; (9f04 <xTaskPriorityInherit+0x160>)
    9dd6:	681b      	ldr	r3, [r3, #0]
    9dd8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    9dda:	2205      	movs	r2, #5
    9ddc:	1ad2      	subs	r2, r2, r3
    9dde:	68bb      	ldr	r3, [r7, #8]
    9de0:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
    9de2:	68bb      	ldr	r3, [r7, #8]
    9de4:	6959      	ldr	r1, [r3, #20]
    9de6:	68bb      	ldr	r3, [r7, #8]
    9de8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    9dea:	0013      	movs	r3, r2
    9dec:	009b      	lsls	r3, r3, #2
    9dee:	189b      	adds	r3, r3, r2
    9df0:	009b      	lsls	r3, r3, #2
    9df2:	4a45      	ldr	r2, [pc, #276]	; (9f08 <xTaskPriorityInherit+0x164>)
    9df4:	189b      	adds	r3, r3, r2
    9df6:	4299      	cmp	r1, r3
    9df8:	d101      	bne.n	9dfe <xTaskPriorityInherit+0x5a>
    9dfa:	2301      	movs	r3, #1
    9dfc:	e000      	b.n	9e00 <xTaskPriorityInherit+0x5c>
    9dfe:	2300      	movs	r3, #0
    9e00:	2b00      	cmp	r3, #0
    9e02:	d037      	beq.n	9e74 <xTaskPriorityInherit+0xd0>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
    9e04:	68bb      	ldr	r3, [r7, #8]
    9e06:	3304      	adds	r3, #4
    9e08:	0018      	movs	r0, r3
    9e0a:	4b40      	ldr	r3, [pc, #256]	; (9f0c <xTaskPriorityInherit+0x168>)
    9e0c:	4798      	blx	r3
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
    9e0e:	4b3d      	ldr	r3, [pc, #244]	; (9f04 <xTaskPriorityInherit+0x160>)
    9e10:	681b      	ldr	r3, [r3, #0]
    9e12:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    9e14:	68bb      	ldr	r3, [r7, #8]
    9e16:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
    9e18:	68bb      	ldr	r3, [r7, #8]
    9e1a:	0018      	movs	r0, r3
    9e1c:	4b3c      	ldr	r3, [pc, #240]	; (9f10 <xTaskPriorityInherit+0x16c>)
    9e1e:	4798      	blx	r3
    9e20:	0003      	movs	r3, r0
    9e22:	001a      	movs	r2, r3
    9e24:	4b3b      	ldr	r3, [pc, #236]	; (9f14 <xTaskPriorityInherit+0x170>)
    9e26:	881b      	ldrh	r3, [r3, #0]
    9e28:	4013      	ands	r3, r2
    9e2a:	b29b      	uxth	r3, r3
    9e2c:	2b00      	cmp	r3, #0
    9e2e:	d008      	beq.n	9e42 <xTaskPriorityInherit+0x9e>
    9e30:	68bb      	ldr	r3, [r7, #8]
    9e32:	0018      	movs	r0, r3
    9e34:	4b38      	ldr	r3, [pc, #224]	; (9f18 <xTaskPriorityInherit+0x174>)
    9e36:	4798      	blx	r3
    9e38:	0003      	movs	r3, r0
    9e3a:	b2db      	uxtb	r3, r3
    9e3c:	0018      	movs	r0, r3
    9e3e:	4b37      	ldr	r3, [pc, #220]	; (9f1c <xTaskPriorityInherit+0x178>)
    9e40:	4798      	blx	r3
    9e42:	68bb      	ldr	r3, [r7, #8]
    9e44:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    9e46:	4b36      	ldr	r3, [pc, #216]	; (9f20 <xTaskPriorityInherit+0x17c>)
    9e48:	681b      	ldr	r3, [r3, #0]
    9e4a:	429a      	cmp	r2, r3
    9e4c:	d903      	bls.n	9e56 <xTaskPriorityInherit+0xb2>
    9e4e:	68bb      	ldr	r3, [r7, #8]
    9e50:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    9e52:	4b33      	ldr	r3, [pc, #204]	; (9f20 <xTaskPriorityInherit+0x17c>)
    9e54:	601a      	str	r2, [r3, #0]
    9e56:	68bb      	ldr	r3, [r7, #8]
    9e58:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    9e5a:	0013      	movs	r3, r2
    9e5c:	009b      	lsls	r3, r3, #2
    9e5e:	189b      	adds	r3, r3, r2
    9e60:	009b      	lsls	r3, r3, #2
    9e62:	4a29      	ldr	r2, [pc, #164]	; (9f08 <xTaskPriorityInherit+0x164>)
    9e64:	189a      	adds	r2, r3, r2
    9e66:	68bb      	ldr	r3, [r7, #8]
    9e68:	3304      	adds	r3, #4
    9e6a:	0019      	movs	r1, r3
    9e6c:	0010      	movs	r0, r2
    9e6e:	4b2d      	ldr	r3, [pc, #180]	; (9f24 <xTaskPriorityInherit+0x180>)
    9e70:	4798      	blx	r3
    9e72:	e004      	b.n	9e7e <xTaskPriorityInherit+0xda>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
    9e74:	4b23      	ldr	r3, [pc, #140]	; (9f04 <xTaskPriorityInherit+0x160>)
    9e76:	681b      	ldr	r3, [r3, #0]
    9e78:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    9e7a:	68bb      	ldr	r3, [r7, #8]
    9e7c:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );
    9e7e:	68bb      	ldr	r3, [r7, #8]
    9e80:	0018      	movs	r0, r3
    9e82:	4b23      	ldr	r3, [pc, #140]	; (9f10 <xTaskPriorityInherit+0x16c>)
    9e84:	4798      	blx	r3
    9e86:	0003      	movs	r3, r0
    9e88:	001a      	movs	r2, r3
    9e8a:	4b22      	ldr	r3, [pc, #136]	; (9f14 <xTaskPriorityInherit+0x170>)
    9e8c:	881b      	ldrh	r3, [r3, #0]
    9e8e:	4013      	ands	r3, r2
    9e90:	b29b      	uxth	r3, r3
    9e92:	2b00      	cmp	r3, #0
    9e94:	d024      	beq.n	9ee0 <xTaskPriorityInherit+0x13c>
    9e96:	68bb      	ldr	r3, [r7, #8]
    9e98:	0018      	movs	r0, r3
    9e9a:	4b1f      	ldr	r3, [pc, #124]	; (9f18 <xTaskPriorityInherit+0x174>)
    9e9c:	4798      	blx	r3
    9e9e:	0003      	movs	r3, r0
    9ea0:	b2db      	uxtb	r3, r3
    9ea2:	001c      	movs	r4, r3
    9ea4:	68bb      	ldr	r3, [r7, #8]
    9ea6:	0018      	movs	r0, r3
    9ea8:	4b1b      	ldr	r3, [pc, #108]	; (9f18 <xTaskPriorityInherit+0x174>)
    9eaa:	4798      	blx	r3
    9eac:	0003      	movs	r3, r0
    9eae:	b2db      	uxtb	r3, r3
    9eb0:	0019      	movs	r1, r3
    9eb2:	2003      	movs	r0, #3
    9eb4:	4b1c      	ldr	r3, [pc, #112]	; (9f28 <xTaskPriorityInherit+0x184>)
    9eb6:	4798      	blx	r3
    9eb8:	0003      	movs	r3, r0
    9eba:	0022      	movs	r2, r4
    9ebc:	2103      	movs	r1, #3
    9ebe:	208e      	movs	r0, #142	; 0x8e
    9ec0:	4c1a      	ldr	r4, [pc, #104]	; (9f2c <xTaskPriorityInherit+0x188>)
    9ec2:	47a0      	blx	r4
    9ec4:	68bb      	ldr	r3, [r7, #8]
    9ec6:	0018      	movs	r0, r3
    9ec8:	4b13      	ldr	r3, [pc, #76]	; (9f18 <xTaskPriorityInherit+0x174>)
    9eca:	4798      	blx	r3
    9ecc:	0003      	movs	r3, r0
    9ece:	b2d9      	uxtb	r1, r3
    9ed0:	4b0c      	ldr	r3, [pc, #48]	; (9f04 <xTaskPriorityInherit+0x160>)
    9ed2:	681b      	ldr	r3, [r3, #0]
    9ed4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    9ed6:	b2db      	uxtb	r3, r3
    9ed8:	001a      	movs	r2, r3
    9eda:	2003      	movs	r0, #3
    9edc:	4b14      	ldr	r3, [pc, #80]	; (9f30 <xTaskPriorityInherit+0x18c>)
    9ede:	4798      	blx	r3

				/* Inheritance occurred. */
				xReturn = pdTRUE;
    9ee0:	2301      	movs	r3, #1
    9ee2:	60fb      	str	r3, [r7, #12]
    9ee4:	e008      	b.n	9ef8 <xTaskPriorityInherit+0x154>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
    9ee6:	68bb      	ldr	r3, [r7, #8]
    9ee8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    9eea:	4b06      	ldr	r3, [pc, #24]	; (9f04 <xTaskPriorityInherit+0x160>)
    9eec:	681b      	ldr	r3, [r3, #0]
    9eee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    9ef0:	429a      	cmp	r2, r3
    9ef2:	d201      	bcs.n	9ef8 <xTaskPriorityInherit+0x154>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
    9ef4:	2301      	movs	r3, #1
    9ef6:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
    9ef8:	68fb      	ldr	r3, [r7, #12]
	}
    9efa:	0018      	movs	r0, r3
    9efc:	46bd      	mov	sp, r7
    9efe:	b005      	add	sp, #20
    9f00:	bd90      	pop	{r4, r7, pc}
    9f02:	46c0      	nop			; (mov r8, r8)
    9f04:	20003b58 	.word	0x20003b58
    9f08:	20003b5c 	.word	0x20003b5c
    9f0c:	00006ebf 	.word	0x00006ebf
    9f10:	00005045 	.word	0x00005045
    9f14:	20000100 	.word	0x20000100
    9f18:	00005025 	.word	0x00005025
    9f1c:	000057f5 	.word	0x000057f5
    9f20:	20003c38 	.word	0x20003c38
    9f24:	00006e0f 	.word	0x00006e0f
    9f28:	00005ffd 	.word	0x00005ffd
    9f2c:	00005b6d 	.word	0x00005b6d
    9f30:	00005f59 	.word	0x00005f59

00009f34 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
    9f34:	b590      	push	{r4, r7, lr}
    9f36:	b085      	sub	sp, #20
    9f38:	af00      	add	r7, sp, #0
    9f3a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
    9f3c:	687b      	ldr	r3, [r7, #4]
    9f3e:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
    9f40:	2300      	movs	r3, #0
    9f42:	60fb      	str	r3, [r7, #12]

		if( pxMutexHolder != NULL )
    9f44:	687b      	ldr	r3, [r7, #4]
    9f46:	2b00      	cmp	r3, #0
    9f48:	d100      	bne.n	9f4c <xTaskPriorityDisinherit+0x18>
    9f4a:	e089      	b.n	a060 <xTaskPriorityDisinherit+0x12c>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
    9f4c:	4b47      	ldr	r3, [pc, #284]	; (a06c <xTaskPriorityDisinherit+0x138>)
    9f4e:	681b      	ldr	r3, [r3, #0]
    9f50:	68ba      	ldr	r2, [r7, #8]
    9f52:	429a      	cmp	r2, r3
    9f54:	d001      	beq.n	9f5a <xTaskPriorityDisinherit+0x26>
    9f56:	b672      	cpsid	i
    9f58:	e7fe      	b.n	9f58 <xTaskPriorityDisinherit+0x24>
			configASSERT( pxTCB->uxMutexesHeld );
    9f5a:	68bb      	ldr	r3, [r7, #8]
    9f5c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    9f5e:	2b00      	cmp	r3, #0
    9f60:	d101      	bne.n	9f66 <xTaskPriorityDisinherit+0x32>
    9f62:	b672      	cpsid	i
    9f64:	e7fe      	b.n	9f64 <xTaskPriorityDisinherit+0x30>
			( pxTCB->uxMutexesHeld )--;
    9f66:	68bb      	ldr	r3, [r7, #8]
    9f68:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    9f6a:	1e5a      	subs	r2, r3, #1
    9f6c:	68bb      	ldr	r3, [r7, #8]
    9f6e:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
    9f70:	68bb      	ldr	r3, [r7, #8]
    9f72:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    9f74:	68bb      	ldr	r3, [r7, #8]
    9f76:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    9f78:	429a      	cmp	r2, r3
    9f7a:	d071      	beq.n	a060 <xTaskPriorityDisinherit+0x12c>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
    9f7c:	68bb      	ldr	r3, [r7, #8]
    9f7e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    9f80:	2b00      	cmp	r3, #0
    9f82:	d16d      	bne.n	a060 <xTaskPriorityDisinherit+0x12c>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
    9f84:	68bb      	ldr	r3, [r7, #8]
    9f86:	3304      	adds	r3, #4
    9f88:	0018      	movs	r0, r3
    9f8a:	4b39      	ldr	r3, [pc, #228]	; (a070 <xTaskPriorityDisinherit+0x13c>)
    9f8c:	4798      	blx	r3
						mtCOVERAGE_TEST_MARKER();
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
    9f8e:	68bb      	ldr	r3, [r7, #8]
    9f90:	0018      	movs	r0, r3
    9f92:	4b38      	ldr	r3, [pc, #224]	; (a074 <xTaskPriorityDisinherit+0x140>)
    9f94:	4798      	blx	r3
    9f96:	0003      	movs	r3, r0
    9f98:	001a      	movs	r2, r3
    9f9a:	4b37      	ldr	r3, [pc, #220]	; (a078 <xTaskPriorityDisinherit+0x144>)
    9f9c:	881b      	ldrh	r3, [r3, #0]
    9f9e:	4013      	ands	r3, r2
    9fa0:	b29b      	uxth	r3, r3
    9fa2:	2b00      	cmp	r3, #0
    9fa4:	d023      	beq.n	9fee <xTaskPriorityDisinherit+0xba>
    9fa6:	68bb      	ldr	r3, [r7, #8]
    9fa8:	0018      	movs	r0, r3
    9faa:	4b34      	ldr	r3, [pc, #208]	; (a07c <xTaskPriorityDisinherit+0x148>)
    9fac:	4798      	blx	r3
    9fae:	0003      	movs	r3, r0
    9fb0:	b2db      	uxtb	r3, r3
    9fb2:	001c      	movs	r4, r3
    9fb4:	68bb      	ldr	r3, [r7, #8]
    9fb6:	0018      	movs	r0, r3
    9fb8:	4b30      	ldr	r3, [pc, #192]	; (a07c <xTaskPriorityDisinherit+0x148>)
    9fba:	4798      	blx	r3
    9fbc:	0003      	movs	r3, r0
    9fbe:	b2db      	uxtb	r3, r3
    9fc0:	0019      	movs	r1, r3
    9fc2:	2003      	movs	r0, #3
    9fc4:	4b2e      	ldr	r3, [pc, #184]	; (a080 <xTaskPriorityDisinherit+0x14c>)
    9fc6:	4798      	blx	r3
    9fc8:	0003      	movs	r3, r0
    9fca:	0022      	movs	r2, r4
    9fcc:	2103      	movs	r1, #3
    9fce:	208f      	movs	r0, #143	; 0x8f
    9fd0:	4c2c      	ldr	r4, [pc, #176]	; (a084 <xTaskPriorityDisinherit+0x150>)
    9fd2:	47a0      	blx	r4
    9fd4:	68bb      	ldr	r3, [r7, #8]
    9fd6:	0018      	movs	r0, r3
    9fd8:	4b28      	ldr	r3, [pc, #160]	; (a07c <xTaskPriorityDisinherit+0x148>)
    9fda:	4798      	blx	r3
    9fdc:	0003      	movs	r3, r0
    9fde:	b2d9      	uxtb	r1, r3
    9fe0:	68bb      	ldr	r3, [r7, #8]
    9fe2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    9fe4:	b2db      	uxtb	r3, r3
    9fe6:	001a      	movs	r2, r3
    9fe8:	2003      	movs	r0, #3
    9fea:	4b27      	ldr	r3, [pc, #156]	; (a088 <xTaskPriorityDisinherit+0x154>)
    9fec:	4798      	blx	r3
					pxTCB->uxPriority = pxTCB->uxBasePriority;
    9fee:	68bb      	ldr	r3, [r7, #8]
    9ff0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    9ff2:	68bb      	ldr	r3, [r7, #8]
    9ff4:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    9ff6:	68bb      	ldr	r3, [r7, #8]
    9ff8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    9ffa:	2205      	movs	r2, #5
    9ffc:	1ad2      	subs	r2, r2, r3
    9ffe:	68bb      	ldr	r3, [r7, #8]
    a000:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
    a002:	68bb      	ldr	r3, [r7, #8]
    a004:	0018      	movs	r0, r3
    a006:	4b1b      	ldr	r3, [pc, #108]	; (a074 <xTaskPriorityDisinherit+0x140>)
    a008:	4798      	blx	r3
    a00a:	0003      	movs	r3, r0
    a00c:	001a      	movs	r2, r3
    a00e:	4b1a      	ldr	r3, [pc, #104]	; (a078 <xTaskPriorityDisinherit+0x144>)
    a010:	881b      	ldrh	r3, [r3, #0]
    a012:	4013      	ands	r3, r2
    a014:	b29b      	uxth	r3, r3
    a016:	2b00      	cmp	r3, #0
    a018:	d008      	beq.n	a02c <xTaskPriorityDisinherit+0xf8>
    a01a:	68bb      	ldr	r3, [r7, #8]
    a01c:	0018      	movs	r0, r3
    a01e:	4b17      	ldr	r3, [pc, #92]	; (a07c <xTaskPriorityDisinherit+0x148>)
    a020:	4798      	blx	r3
    a022:	0003      	movs	r3, r0
    a024:	b2db      	uxtb	r3, r3
    a026:	0018      	movs	r0, r3
    a028:	4b18      	ldr	r3, [pc, #96]	; (a08c <xTaskPriorityDisinherit+0x158>)
    a02a:	4798      	blx	r3
    a02c:	68bb      	ldr	r3, [r7, #8]
    a02e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    a030:	4b17      	ldr	r3, [pc, #92]	; (a090 <xTaskPriorityDisinherit+0x15c>)
    a032:	681b      	ldr	r3, [r3, #0]
    a034:	429a      	cmp	r2, r3
    a036:	d903      	bls.n	a040 <xTaskPriorityDisinherit+0x10c>
    a038:	68bb      	ldr	r3, [r7, #8]
    a03a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    a03c:	4b14      	ldr	r3, [pc, #80]	; (a090 <xTaskPriorityDisinherit+0x15c>)
    a03e:	601a      	str	r2, [r3, #0]
    a040:	68bb      	ldr	r3, [r7, #8]
    a042:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    a044:	0013      	movs	r3, r2
    a046:	009b      	lsls	r3, r3, #2
    a048:	189b      	adds	r3, r3, r2
    a04a:	009b      	lsls	r3, r3, #2
    a04c:	4a11      	ldr	r2, [pc, #68]	; (a094 <xTaskPriorityDisinherit+0x160>)
    a04e:	189a      	adds	r2, r3, r2
    a050:	68bb      	ldr	r3, [r7, #8]
    a052:	3304      	adds	r3, #4
    a054:	0019      	movs	r1, r3
    a056:	0010      	movs	r0, r2
    a058:	4b0f      	ldr	r3, [pc, #60]	; (a098 <xTaskPriorityDisinherit+0x164>)
    a05a:	4798      	blx	r3
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
    a05c:	2301      	movs	r3, #1
    a05e:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
    a060:	68fb      	ldr	r3, [r7, #12]
	}
    a062:	0018      	movs	r0, r3
    a064:	46bd      	mov	sp, r7
    a066:	b005      	add	sp, #20
    a068:	bd90      	pop	{r4, r7, pc}
    a06a:	46c0      	nop			; (mov r8, r8)
    a06c:	20003b58 	.word	0x20003b58
    a070:	00006ebf 	.word	0x00006ebf
    a074:	00005045 	.word	0x00005045
    a078:	20000100 	.word	0x20000100
    a07c:	00005025 	.word	0x00005025
    a080:	00005ffd 	.word	0x00005ffd
    a084:	00005b6d 	.word	0x00005b6d
    a088:	00005f59 	.word	0x00005f59
    a08c:	000057f5 	.word	0x000057f5
    a090:	20003c38 	.word	0x20003c38
    a094:	20003b5c 	.word	0x20003b5c
    a098:	00006e0f 	.word	0x00006e0f

0000a09c <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
    a09c:	b590      	push	{r4, r7, lr}
    a09e:	b087      	sub	sp, #28
    a0a0:	af00      	add	r7, sp, #0
    a0a2:	6078      	str	r0, [r7, #4]
    a0a4:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
    a0a6:	687b      	ldr	r3, [r7, #4]
    a0a8:	613b      	str	r3, [r7, #16]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
    a0aa:	2301      	movs	r3, #1
    a0ac:	60fb      	str	r3, [r7, #12]

		if( pxMutexHolder != NULL )
    a0ae:	687b      	ldr	r3, [r7, #4]
    a0b0:	2b00      	cmp	r3, #0
    a0b2:	d100      	bne.n	a0b6 <vTaskPriorityDisinheritAfterTimeout+0x1a>
    a0b4:	e0a4      	b.n	a200 <vTaskPriorityDisinheritAfterTimeout+0x164>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
    a0b6:	693b      	ldr	r3, [r7, #16]
    a0b8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    a0ba:	2b00      	cmp	r3, #0
    a0bc:	d101      	bne.n	a0c2 <vTaskPriorityDisinheritAfterTimeout+0x26>
    a0be:	b672      	cpsid	i
    a0c0:	e7fe      	b.n	a0c0 <vTaskPriorityDisinheritAfterTimeout+0x24>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
    a0c2:	693b      	ldr	r3, [r7, #16]
    a0c4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    a0c6:	683b      	ldr	r3, [r7, #0]
    a0c8:	429a      	cmp	r2, r3
    a0ca:	d202      	bcs.n	a0d2 <vTaskPriorityDisinheritAfterTimeout+0x36>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
    a0cc:	683b      	ldr	r3, [r7, #0]
    a0ce:	617b      	str	r3, [r7, #20]
    a0d0:	e002      	b.n	a0d8 <vTaskPriorityDisinheritAfterTimeout+0x3c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
    a0d2:	693b      	ldr	r3, [r7, #16]
    a0d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    a0d6:	617b      	str	r3, [r7, #20]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
    a0d8:	693b      	ldr	r3, [r7, #16]
    a0da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    a0dc:	697b      	ldr	r3, [r7, #20]
    a0de:	429a      	cmp	r2, r3
    a0e0:	d100      	bne.n	a0e4 <vTaskPriorityDisinheritAfterTimeout+0x48>
    a0e2:	e08d      	b.n	a200 <vTaskPriorityDisinheritAfterTimeout+0x164>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
    a0e4:	693b      	ldr	r3, [r7, #16]
    a0e6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
    a0e8:	68fb      	ldr	r3, [r7, #12]
    a0ea:	429a      	cmp	r2, r3
    a0ec:	d000      	beq.n	a0f0 <vTaskPriorityDisinheritAfterTimeout+0x54>
    a0ee:	e087      	b.n	a200 <vTaskPriorityDisinheritAfterTimeout+0x164>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
    a0f0:	4b45      	ldr	r3, [pc, #276]	; (a208 <vTaskPriorityDisinheritAfterTimeout+0x16c>)
    a0f2:	681b      	ldr	r3, [r3, #0]
    a0f4:	693a      	ldr	r2, [r7, #16]
    a0f6:	429a      	cmp	r2, r3
    a0f8:	d101      	bne.n	a0fe <vTaskPriorityDisinheritAfterTimeout+0x62>
    a0fa:	b672      	cpsid	i
    a0fc:	e7fe      	b.n	a0fc <vTaskPriorityDisinheritAfterTimeout+0x60>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
    a0fe:	693b      	ldr	r3, [r7, #16]
    a100:	0018      	movs	r0, r3
    a102:	4b42      	ldr	r3, [pc, #264]	; (a20c <vTaskPriorityDisinheritAfterTimeout+0x170>)
    a104:	4798      	blx	r3
    a106:	0003      	movs	r3, r0
    a108:	001a      	movs	r2, r3
    a10a:	4b41      	ldr	r3, [pc, #260]	; (a210 <vTaskPriorityDisinheritAfterTimeout+0x174>)
    a10c:	881b      	ldrh	r3, [r3, #0]
    a10e:	4013      	ands	r3, r2
    a110:	b29b      	uxth	r3, r3
    a112:	2b00      	cmp	r3, #0
    a114:	d023      	beq.n	a15e <vTaskPriorityDisinheritAfterTimeout+0xc2>
    a116:	693b      	ldr	r3, [r7, #16]
    a118:	0018      	movs	r0, r3
    a11a:	4b3e      	ldr	r3, [pc, #248]	; (a214 <vTaskPriorityDisinheritAfterTimeout+0x178>)
    a11c:	4798      	blx	r3
    a11e:	0003      	movs	r3, r0
    a120:	b2db      	uxtb	r3, r3
    a122:	001c      	movs	r4, r3
    a124:	693b      	ldr	r3, [r7, #16]
    a126:	0018      	movs	r0, r3
    a128:	4b3a      	ldr	r3, [pc, #232]	; (a214 <vTaskPriorityDisinheritAfterTimeout+0x178>)
    a12a:	4798      	blx	r3
    a12c:	0003      	movs	r3, r0
    a12e:	b2db      	uxtb	r3, r3
    a130:	0019      	movs	r1, r3
    a132:	2003      	movs	r0, #3
    a134:	4b38      	ldr	r3, [pc, #224]	; (a218 <vTaskPriorityDisinheritAfterTimeout+0x17c>)
    a136:	4798      	blx	r3
    a138:	0003      	movs	r3, r0
    a13a:	0022      	movs	r2, r4
    a13c:	2103      	movs	r1, #3
    a13e:	208f      	movs	r0, #143	; 0x8f
    a140:	4c36      	ldr	r4, [pc, #216]	; (a21c <vTaskPriorityDisinheritAfterTimeout+0x180>)
    a142:	47a0      	blx	r4
    a144:	693b      	ldr	r3, [r7, #16]
    a146:	0018      	movs	r0, r3
    a148:	4b32      	ldr	r3, [pc, #200]	; (a214 <vTaskPriorityDisinheritAfterTimeout+0x178>)
    a14a:	4798      	blx	r3
    a14c:	0003      	movs	r3, r0
    a14e:	b2d9      	uxtb	r1, r3
    a150:	693b      	ldr	r3, [r7, #16]
    a152:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    a154:	b2db      	uxtb	r3, r3
    a156:	001a      	movs	r2, r3
    a158:	2003      	movs	r0, #3
    a15a:	4b31      	ldr	r3, [pc, #196]	; (a220 <vTaskPriorityDisinheritAfterTimeout+0x184>)
    a15c:	4798      	blx	r3
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
    a15e:	693b      	ldr	r3, [r7, #16]
    a160:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    a162:	60bb      	str	r3, [r7, #8]
					pxTCB->uxPriority = uxPriorityToUse;
    a164:	693b      	ldr	r3, [r7, #16]
    a166:	697a      	ldr	r2, [r7, #20]
    a168:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
    a16a:	693b      	ldr	r3, [r7, #16]
    a16c:	699b      	ldr	r3, [r3, #24]
    a16e:	2b00      	cmp	r3, #0
    a170:	db04      	blt.n	a17c <vTaskPriorityDisinheritAfterTimeout+0xe0>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    a172:	697b      	ldr	r3, [r7, #20]
    a174:	2205      	movs	r2, #5
    a176:	1ad2      	subs	r2, r2, r3
    a178:	693b      	ldr	r3, [r7, #16]
    a17a:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
    a17c:	693b      	ldr	r3, [r7, #16]
    a17e:	6959      	ldr	r1, [r3, #20]
    a180:	68ba      	ldr	r2, [r7, #8]
    a182:	0013      	movs	r3, r2
    a184:	009b      	lsls	r3, r3, #2
    a186:	189b      	adds	r3, r3, r2
    a188:	009b      	lsls	r3, r3, #2
    a18a:	4a26      	ldr	r2, [pc, #152]	; (a224 <vTaskPriorityDisinheritAfterTimeout+0x188>)
    a18c:	189b      	adds	r3, r3, r2
    a18e:	4299      	cmp	r1, r3
    a190:	d101      	bne.n	a196 <vTaskPriorityDisinheritAfterTimeout+0xfa>
    a192:	2301      	movs	r3, #1
    a194:	e000      	b.n	a198 <vTaskPriorityDisinheritAfterTimeout+0xfc>
    a196:	2300      	movs	r3, #0
    a198:	2b00      	cmp	r3, #0
    a19a:	d031      	beq.n	a200 <vTaskPriorityDisinheritAfterTimeout+0x164>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
    a19c:	693b      	ldr	r3, [r7, #16]
    a19e:	3304      	adds	r3, #4
    a1a0:	0018      	movs	r0, r3
    a1a2:	4b21      	ldr	r3, [pc, #132]	; (a228 <vTaskPriorityDisinheritAfterTimeout+0x18c>)
    a1a4:	4798      	blx	r3
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
    a1a6:	693b      	ldr	r3, [r7, #16]
    a1a8:	0018      	movs	r0, r3
    a1aa:	4b18      	ldr	r3, [pc, #96]	; (a20c <vTaskPriorityDisinheritAfterTimeout+0x170>)
    a1ac:	4798      	blx	r3
    a1ae:	0003      	movs	r3, r0
    a1b0:	001a      	movs	r2, r3
    a1b2:	4b17      	ldr	r3, [pc, #92]	; (a210 <vTaskPriorityDisinheritAfterTimeout+0x174>)
    a1b4:	881b      	ldrh	r3, [r3, #0]
    a1b6:	4013      	ands	r3, r2
    a1b8:	b29b      	uxth	r3, r3
    a1ba:	2b00      	cmp	r3, #0
    a1bc:	d008      	beq.n	a1d0 <vTaskPriorityDisinheritAfterTimeout+0x134>
    a1be:	693b      	ldr	r3, [r7, #16]
    a1c0:	0018      	movs	r0, r3
    a1c2:	4b14      	ldr	r3, [pc, #80]	; (a214 <vTaskPriorityDisinheritAfterTimeout+0x178>)
    a1c4:	4798      	blx	r3
    a1c6:	0003      	movs	r3, r0
    a1c8:	b2db      	uxtb	r3, r3
    a1ca:	0018      	movs	r0, r3
    a1cc:	4b17      	ldr	r3, [pc, #92]	; (a22c <vTaskPriorityDisinheritAfterTimeout+0x190>)
    a1ce:	4798      	blx	r3
    a1d0:	693b      	ldr	r3, [r7, #16]
    a1d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    a1d4:	4b16      	ldr	r3, [pc, #88]	; (a230 <vTaskPriorityDisinheritAfterTimeout+0x194>)
    a1d6:	681b      	ldr	r3, [r3, #0]
    a1d8:	429a      	cmp	r2, r3
    a1da:	d903      	bls.n	a1e4 <vTaskPriorityDisinheritAfterTimeout+0x148>
    a1dc:	693b      	ldr	r3, [r7, #16]
    a1de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    a1e0:	4b13      	ldr	r3, [pc, #76]	; (a230 <vTaskPriorityDisinheritAfterTimeout+0x194>)
    a1e2:	601a      	str	r2, [r3, #0]
    a1e4:	693b      	ldr	r3, [r7, #16]
    a1e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    a1e8:	0013      	movs	r3, r2
    a1ea:	009b      	lsls	r3, r3, #2
    a1ec:	189b      	adds	r3, r3, r2
    a1ee:	009b      	lsls	r3, r3, #2
    a1f0:	4a0c      	ldr	r2, [pc, #48]	; (a224 <vTaskPriorityDisinheritAfterTimeout+0x188>)
    a1f2:	189a      	adds	r2, r3, r2
    a1f4:	693b      	ldr	r3, [r7, #16]
    a1f6:	3304      	adds	r3, #4
    a1f8:	0019      	movs	r1, r3
    a1fa:	0010      	movs	r0, r2
    a1fc:	4b0d      	ldr	r3, [pc, #52]	; (a234 <vTaskPriorityDisinheritAfterTimeout+0x198>)
    a1fe:	4798      	blx	r3
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
    a200:	46c0      	nop			; (mov r8, r8)
    a202:	46bd      	mov	sp, r7
    a204:	b007      	add	sp, #28
    a206:	bd90      	pop	{r4, r7, pc}
    a208:	20003b58 	.word	0x20003b58
    a20c:	00005045 	.word	0x00005045
    a210:	20000100 	.word	0x20000100
    a214:	00005025 	.word	0x00005025
    a218:	00005ffd 	.word	0x00005ffd
    a21c:	00005b6d 	.word	0x00005b6d
    a220:	00005f59 	.word	0x00005f59
    a224:	20003b5c 	.word	0x20003b5c
    a228:	00006ebf 	.word	0x00006ebf
    a22c:	000057f5 	.word	0x000057f5
    a230:	20003c38 	.word	0x20003c38
    a234:	00006e0f 	.word	0x00006e0f

0000a238 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void *pvTaskIncrementMutexHeldCount( void )
	{
    a238:	b580      	push	{r7, lr}
    a23a:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
    a23c:	4b06      	ldr	r3, [pc, #24]	; (a258 <pvTaskIncrementMutexHeldCount+0x20>)
    a23e:	681b      	ldr	r3, [r3, #0]
    a240:	2b00      	cmp	r3, #0
    a242:	d004      	beq.n	a24e <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
    a244:	4b04      	ldr	r3, [pc, #16]	; (a258 <pvTaskIncrementMutexHeldCount+0x20>)
    a246:	681b      	ldr	r3, [r3, #0]
    a248:	6c9a      	ldr	r2, [r3, #72]	; 0x48
    a24a:	3201      	adds	r2, #1
    a24c:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
    a24e:	4b02      	ldr	r3, [pc, #8]	; (a258 <pvTaskIncrementMutexHeldCount+0x20>)
    a250:	681b      	ldr	r3, [r3, #0]
	}
    a252:	0018      	movs	r0, r3
    a254:	46bd      	mov	sp, r7
    a256:	bd80      	pop	{r7, pc}
    a258:	20003b58 	.word	0x20003b58

0000a25c <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
    a25c:	b580      	push	{r7, lr}
    a25e:	b084      	sub	sp, #16
    a260:	af00      	add	r7, sp, #0
    a262:	6078      	str	r0, [r7, #4]
    a264:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
    a266:	4b21      	ldr	r3, [pc, #132]	; (a2ec <prvAddCurrentTaskToDelayedList+0x90>)
    a268:	681b      	ldr	r3, [r3, #0]
    a26a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
    a26c:	4b20      	ldr	r3, [pc, #128]	; (a2f0 <prvAddCurrentTaskToDelayedList+0x94>)
    a26e:	681b      	ldr	r3, [r3, #0]
    a270:	3304      	adds	r3, #4
    a272:	0018      	movs	r0, r3
    a274:	4b1f      	ldr	r3, [pc, #124]	; (a2f4 <prvAddCurrentTaskToDelayedList+0x98>)
    a276:	4798      	blx	r3
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
    a278:	687b      	ldr	r3, [r7, #4]
    a27a:	3301      	adds	r3, #1
    a27c:	d10b      	bne.n	a296 <prvAddCurrentTaskToDelayedList+0x3a>
    a27e:	683b      	ldr	r3, [r7, #0]
    a280:	2b00      	cmp	r3, #0
    a282:	d008      	beq.n	a296 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
    a284:	4b1a      	ldr	r3, [pc, #104]	; (a2f0 <prvAddCurrentTaskToDelayedList+0x94>)
    a286:	681b      	ldr	r3, [r3, #0]
    a288:	1d1a      	adds	r2, r3, #4
    a28a:	4b1b      	ldr	r3, [pc, #108]	; (a2f8 <prvAddCurrentTaskToDelayedList+0x9c>)
    a28c:	0011      	movs	r1, r2
    a28e:	0018      	movs	r0, r3
    a290:	4b1a      	ldr	r3, [pc, #104]	; (a2fc <prvAddCurrentTaskToDelayedList+0xa0>)
    a292:	4798      	blx	r3

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
    a294:	e026      	b.n	a2e4 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
    a296:	68fa      	ldr	r2, [r7, #12]
    a298:	687b      	ldr	r3, [r7, #4]
    a29a:	18d3      	adds	r3, r2, r3
    a29c:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
    a29e:	4b14      	ldr	r3, [pc, #80]	; (a2f0 <prvAddCurrentTaskToDelayedList+0x94>)
    a2a0:	681b      	ldr	r3, [r3, #0]
    a2a2:	68ba      	ldr	r2, [r7, #8]
    a2a4:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
    a2a6:	68ba      	ldr	r2, [r7, #8]
    a2a8:	68fb      	ldr	r3, [r7, #12]
    a2aa:	429a      	cmp	r2, r3
    a2ac:	d209      	bcs.n	a2c2 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
    a2ae:	4b14      	ldr	r3, [pc, #80]	; (a300 <prvAddCurrentTaskToDelayedList+0xa4>)
    a2b0:	681a      	ldr	r2, [r3, #0]
    a2b2:	4b0f      	ldr	r3, [pc, #60]	; (a2f0 <prvAddCurrentTaskToDelayedList+0x94>)
    a2b4:	681b      	ldr	r3, [r3, #0]
    a2b6:	3304      	adds	r3, #4
    a2b8:	0019      	movs	r1, r3
    a2ba:	0010      	movs	r0, r2
    a2bc:	4b11      	ldr	r3, [pc, #68]	; (a304 <prvAddCurrentTaskToDelayedList+0xa8>)
    a2be:	4798      	blx	r3
}
    a2c0:	e010      	b.n	a2e4 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
    a2c2:	4b11      	ldr	r3, [pc, #68]	; (a308 <prvAddCurrentTaskToDelayedList+0xac>)
    a2c4:	681a      	ldr	r2, [r3, #0]
    a2c6:	4b0a      	ldr	r3, [pc, #40]	; (a2f0 <prvAddCurrentTaskToDelayedList+0x94>)
    a2c8:	681b      	ldr	r3, [r3, #0]
    a2ca:	3304      	adds	r3, #4
    a2cc:	0019      	movs	r1, r3
    a2ce:	0010      	movs	r0, r2
    a2d0:	4b0c      	ldr	r3, [pc, #48]	; (a304 <prvAddCurrentTaskToDelayedList+0xa8>)
    a2d2:	4798      	blx	r3
				if( xTimeToWake < xNextTaskUnblockTime )
    a2d4:	4b0d      	ldr	r3, [pc, #52]	; (a30c <prvAddCurrentTaskToDelayedList+0xb0>)
    a2d6:	681b      	ldr	r3, [r3, #0]
    a2d8:	68ba      	ldr	r2, [r7, #8]
    a2da:	429a      	cmp	r2, r3
    a2dc:	d202      	bcs.n	a2e4 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
    a2de:	4b0b      	ldr	r3, [pc, #44]	; (a30c <prvAddCurrentTaskToDelayedList+0xb0>)
    a2e0:	68ba      	ldr	r2, [r7, #8]
    a2e2:	601a      	str	r2, [r3, #0]
}
    a2e4:	46c0      	nop			; (mov r8, r8)
    a2e6:	46bd      	mov	sp, r7
    a2e8:	b004      	add	sp, #16
    a2ea:	bd80      	pop	{r7, pc}
    a2ec:	20003c34 	.word	0x20003c34
    a2f0:	20003b58 	.word	0x20003b58
    a2f4:	00006ebf 	.word	0x00006ebf
    a2f8:	20003c1c 	.word	0x20003c1c
    a2fc:	00006e0f 	.word	0x00006e0f
    a300:	20003bec 	.word	0x20003bec
    a304:	00006e53 	.word	0x00006e53
    a308:	20003be8 	.word	0x20003be8
    a30c:	20003c50 	.word	0x20003c50

0000a310 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
    a310:	b590      	push	{r4, r7, lr}
    a312:	b085      	sub	sp, #20
    a314:	af02      	add	r7, sp, #8
BaseType_t xReturn = pdFAIL;
    a316:	2300      	movs	r3, #0
    a318:	607b      	str	r3, [r7, #4]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
    a31a:	4b0e      	ldr	r3, [pc, #56]	; (a354 <xTimerCreateTimerTask+0x44>)
    a31c:	4798      	blx	r3

	if( xTimerQueue != NULL )
    a31e:	4b0e      	ldr	r3, [pc, #56]	; (a358 <xTimerCreateTimerTask+0x48>)
    a320:	681b      	ldr	r3, [r3, #0]
    a322:	2b00      	cmp	r3, #0
    a324:	d00b      	beq.n	a33e <xTimerCreateTimerTask+0x2e>
				xReturn = pdPASS;
			}
		}
		#else
		{
			xReturn = xTaskCreate(	prvTimerTask,
    a326:	490d      	ldr	r1, [pc, #52]	; (a35c <xTimerCreateTimerTask+0x4c>)
    a328:	480d      	ldr	r0, [pc, #52]	; (a360 <xTimerCreateTimerTask+0x50>)
    a32a:	4b0e      	ldr	r3, [pc, #56]	; (a364 <xTimerCreateTimerTask+0x54>)
    a32c:	9301      	str	r3, [sp, #4]
    a32e:	2302      	movs	r3, #2
    a330:	9300      	str	r3, [sp, #0]
    a332:	2300      	movs	r3, #0
    a334:	2280      	movs	r2, #128	; 0x80
    a336:	4c0c      	ldr	r4, [pc, #48]	; (a368 <xTimerCreateTimerTask+0x58>)
    a338:	47a0      	blx	r4
    a33a:	0003      	movs	r3, r0
    a33c:	607b      	str	r3, [r7, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
    a33e:	687b      	ldr	r3, [r7, #4]
    a340:	2b00      	cmp	r3, #0
    a342:	d101      	bne.n	a348 <xTimerCreateTimerTask+0x38>
    a344:	b672      	cpsid	i
    a346:	e7fe      	b.n	a346 <xTimerCreateTimerTask+0x36>
	return xReturn;
    a348:	687b      	ldr	r3, [r7, #4]
}
    a34a:	0018      	movs	r0, r3
    a34c:	46bd      	mov	sp, r7
    a34e:	b003      	add	sp, #12
    a350:	bd90      	pop	{r4, r7, pc}
    a352:	46c0      	nop			; (mov r8, r8)
    a354:	0000a859 	.word	0x0000a859
    a358:	20003c8c 	.word	0x20003c8c
    a35c:	00024d7c 	.word	0x00024d7c
    a360:	0000a491 	.word	0x0000a491
    a364:	20003c90 	.word	0x20003c90
    a368:	00008ca9 	.word	0x00008ca9

0000a36c <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
    a36c:	b590      	push	{r4, r7, lr}
    a36e:	b089      	sub	sp, #36	; 0x24
    a370:	af00      	add	r7, sp, #0
    a372:	60f8      	str	r0, [r7, #12]
    a374:	60b9      	str	r1, [r7, #8]
    a376:	607a      	str	r2, [r7, #4]
    a378:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
    a37a:	2300      	movs	r3, #0
    a37c:	61fb      	str	r3, [r7, #28]
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
    a37e:	68fb      	ldr	r3, [r7, #12]
    a380:	2b00      	cmp	r3, #0
    a382:	d101      	bne.n	a388 <xTimerGenericCommand+0x1c>
    a384:	b672      	cpsid	i
    a386:	e7fe      	b.n	a386 <xTimerGenericCommand+0x1a>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
    a388:	4b1e      	ldr	r3, [pc, #120]	; (a404 <xTimerGenericCommand+0x98>)
    a38a:	681b      	ldr	r3, [r3, #0]
    a38c:	2b00      	cmp	r3, #0
    a38e:	d033      	beq.n	a3f8 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
    a390:	2310      	movs	r3, #16
    a392:	18fb      	adds	r3, r7, r3
    a394:	68ba      	ldr	r2, [r7, #8]
    a396:	601a      	str	r2, [r3, #0]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
    a398:	2310      	movs	r3, #16
    a39a:	18fb      	adds	r3, r7, r3
    a39c:	687a      	ldr	r2, [r7, #4]
    a39e:	605a      	str	r2, [r3, #4]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
    a3a0:	2310      	movs	r3, #16
    a3a2:	18fb      	adds	r3, r7, r3
    a3a4:	68fa      	ldr	r2, [r7, #12]
    a3a6:	609a      	str	r2, [r3, #8]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
    a3a8:	68bb      	ldr	r3, [r7, #8]
    a3aa:	2b05      	cmp	r3, #5
    a3ac:	dc1a      	bgt.n	a3e4 <xTimerGenericCommand+0x78>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
    a3ae:	4b16      	ldr	r3, [pc, #88]	; (a408 <xTimerGenericCommand+0x9c>)
    a3b0:	4798      	blx	r3
    a3b2:	0003      	movs	r3, r0
    a3b4:	2b02      	cmp	r3, #2
    a3b6:	d10a      	bne.n	a3ce <xTimerGenericCommand+0x62>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
    a3b8:	4b12      	ldr	r3, [pc, #72]	; (a404 <xTimerGenericCommand+0x98>)
    a3ba:	6818      	ldr	r0, [r3, #0]
    a3bc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
    a3be:	2310      	movs	r3, #16
    a3c0:	18f9      	adds	r1, r7, r3
    a3c2:	2300      	movs	r3, #0
    a3c4:	4c11      	ldr	r4, [pc, #68]	; (a40c <xTimerGenericCommand+0xa0>)
    a3c6:	47a0      	blx	r4
    a3c8:	0003      	movs	r3, r0
    a3ca:	61fb      	str	r3, [r7, #28]
    a3cc:	e014      	b.n	a3f8 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
    a3ce:	4b0d      	ldr	r3, [pc, #52]	; (a404 <xTimerGenericCommand+0x98>)
    a3d0:	6818      	ldr	r0, [r3, #0]
    a3d2:	2310      	movs	r3, #16
    a3d4:	18f9      	adds	r1, r7, r3
    a3d6:	2300      	movs	r3, #0
    a3d8:	2200      	movs	r2, #0
    a3da:	4c0c      	ldr	r4, [pc, #48]	; (a40c <xTimerGenericCommand+0xa0>)
    a3dc:	47a0      	blx	r4
    a3de:	0003      	movs	r3, r0
    a3e0:	61fb      	str	r3, [r7, #28]
    a3e2:	e009      	b.n	a3f8 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
    a3e4:	4b07      	ldr	r3, [pc, #28]	; (a404 <xTimerGenericCommand+0x98>)
    a3e6:	6818      	ldr	r0, [r3, #0]
    a3e8:	683a      	ldr	r2, [r7, #0]
    a3ea:	2310      	movs	r3, #16
    a3ec:	18f9      	adds	r1, r7, r3
    a3ee:	2300      	movs	r3, #0
    a3f0:	4c07      	ldr	r4, [pc, #28]	; (a410 <xTimerGenericCommand+0xa4>)
    a3f2:	47a0      	blx	r4
    a3f4:	0003      	movs	r3, r0
    a3f6:	61fb      	str	r3, [r7, #28]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
    a3f8:	69fb      	ldr	r3, [r7, #28]
}
    a3fa:	0018      	movs	r0, r3
    a3fc:	46bd      	mov	sp, r7
    a3fe:	b009      	add	sp, #36	; 0x24
    a400:	bd90      	pop	{r4, r7, pc}
    a402:	46c0      	nop			; (mov r8, r8)
    a404:	20003c8c 	.word	0x20003c8c
    a408:	00009d6d 	.word	0x00009d6d
    a40c:	000075e1 	.word	0x000075e1
    a410:	00007a41 	.word	0x00007a41

0000a414 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
    a414:	b590      	push	{r4, r7, lr}
    a416:	b087      	sub	sp, #28
    a418:	af02      	add	r7, sp, #8
    a41a:	6078      	str	r0, [r7, #4]
    a41c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
    a41e:	4b18      	ldr	r3, [pc, #96]	; (a480 <prvProcessExpiredTimer+0x6c>)
    a420:	681b      	ldr	r3, [r3, #0]
    a422:	68db      	ldr	r3, [r3, #12]
    a424:	68db      	ldr	r3, [r3, #12]
    a426:	60fb      	str	r3, [r7, #12]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
    a428:	68fb      	ldr	r3, [r7, #12]
    a42a:	3304      	adds	r3, #4
    a42c:	0018      	movs	r0, r3
    a42e:	4b15      	ldr	r3, [pc, #84]	; (a484 <prvProcessExpiredTimer+0x70>)
    a430:	4798      	blx	r3
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
    a432:	68fb      	ldr	r3, [r7, #12]
    a434:	69db      	ldr	r3, [r3, #28]
    a436:	2b01      	cmp	r3, #1
    a438:	d119      	bne.n	a46e <prvProcessExpiredTimer+0x5a>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
    a43a:	68fb      	ldr	r3, [r7, #12]
    a43c:	699a      	ldr	r2, [r3, #24]
    a43e:	687b      	ldr	r3, [r7, #4]
    a440:	18d1      	adds	r1, r2, r3
    a442:	687b      	ldr	r3, [r7, #4]
    a444:	683a      	ldr	r2, [r7, #0]
    a446:	68f8      	ldr	r0, [r7, #12]
    a448:	4c0f      	ldr	r4, [pc, #60]	; (a488 <prvProcessExpiredTimer+0x74>)
    a44a:	47a0      	blx	r4
    a44c:	1e03      	subs	r3, r0, #0
    a44e:	d00e      	beq.n	a46e <prvProcessExpiredTimer+0x5a>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
    a450:	687a      	ldr	r2, [r7, #4]
    a452:	68f8      	ldr	r0, [r7, #12]
    a454:	2300      	movs	r3, #0
    a456:	9300      	str	r3, [sp, #0]
    a458:	2300      	movs	r3, #0
    a45a:	2100      	movs	r1, #0
    a45c:	4c0b      	ldr	r4, [pc, #44]	; (a48c <prvProcessExpiredTimer+0x78>)
    a45e:	47a0      	blx	r4
    a460:	0003      	movs	r3, r0
    a462:	60bb      	str	r3, [r7, #8]
			configASSERT( xResult );
    a464:	68bb      	ldr	r3, [r7, #8]
    a466:	2b00      	cmp	r3, #0
    a468:	d101      	bne.n	a46e <prvProcessExpiredTimer+0x5a>
    a46a:	b672      	cpsid	i
    a46c:	e7fe      	b.n	a46c <prvProcessExpiredTimer+0x58>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
    a46e:	68fb      	ldr	r3, [r7, #12]
    a470:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    a472:	68fa      	ldr	r2, [r7, #12]
    a474:	0010      	movs	r0, r2
    a476:	4798      	blx	r3
}
    a478:	46c0      	nop			; (mov r8, r8)
    a47a:	46bd      	mov	sp, r7
    a47c:	b005      	add	sp, #20
    a47e:	bd90      	pop	{r4, r7, pc}
    a480:	20003c84 	.word	0x20003c84
    a484:	00006ebf 	.word	0x00006ebf
    a488:	0000a5f9 	.word	0x0000a5f9
    a48c:	0000a36d 	.word	0x0000a36d

0000a490 <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
    a490:	b580      	push	{r7, lr}
    a492:	b084      	sub	sp, #16
    a494:	af00      	add	r7, sp, #0
    a496:	6078      	str	r0, [r7, #4]

		/* Allow the application writer to execute some code in the context of
		this task at the point the task starts executing.  This is useful if the
		application includes initialisation code that would benefit from
		executing after the scheduler has been started. */
		vApplicationDaemonTaskStartupHook();
    a498:	4b08      	ldr	r3, [pc, #32]	; (a4bc <prvTimerTask+0x2c>)
    a49a:	4798      	blx	r3

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
    a49c:	2308      	movs	r3, #8
    a49e:	18fb      	adds	r3, r7, r3
    a4a0:	0018      	movs	r0, r3
    a4a2:	4b07      	ldr	r3, [pc, #28]	; (a4c0 <prvTimerTask+0x30>)
    a4a4:	4798      	blx	r3
    a4a6:	0003      	movs	r3, r0
    a4a8:	60fb      	str	r3, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
    a4aa:	68ba      	ldr	r2, [r7, #8]
    a4ac:	68fb      	ldr	r3, [r7, #12]
    a4ae:	0011      	movs	r1, r2
    a4b0:	0018      	movs	r0, r3
    a4b2:	4b04      	ldr	r3, [pc, #16]	; (a4c4 <prvTimerTask+0x34>)
    a4b4:	4798      	blx	r3

		/* Empty the command queue. */
		prvProcessReceivedCommands();
    a4b6:	4b04      	ldr	r3, [pc, #16]	; (a4c8 <prvTimerTask+0x38>)
    a4b8:	4798      	blx	r3
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
    a4ba:	e7ef      	b.n	a49c <prvTimerTask+0xc>
    a4bc:	0001f661 	.word	0x0001f661
    a4c0:	0000a571 	.word	0x0000a571
    a4c4:	0000a4cd 	.word	0x0000a4cd
    a4c8:	0000a681 	.word	0x0000a681

0000a4cc <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
    a4cc:	b580      	push	{r7, lr}
    a4ce:	b084      	sub	sp, #16
    a4d0:	af00      	add	r7, sp, #0
    a4d2:	6078      	str	r0, [r7, #4]
    a4d4:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
    a4d6:	4b1e      	ldr	r3, [pc, #120]	; (a550 <prvProcessTimerOrBlockTask+0x84>)
    a4d8:	4798      	blx	r3
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
    a4da:	2308      	movs	r3, #8
    a4dc:	18fb      	adds	r3, r7, r3
    a4de:	0018      	movs	r0, r3
    a4e0:	4b1c      	ldr	r3, [pc, #112]	; (a554 <prvProcessTimerOrBlockTask+0x88>)
    a4e2:	4798      	blx	r3
    a4e4:	0003      	movs	r3, r0
    a4e6:	60fb      	str	r3, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
    a4e8:	68bb      	ldr	r3, [r7, #8]
    a4ea:	2b00      	cmp	r3, #0
    a4ec:	d129      	bne.n	a542 <prvProcessTimerOrBlockTask+0x76>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
    a4ee:	683b      	ldr	r3, [r7, #0]
    a4f0:	2b00      	cmp	r3, #0
    a4f2:	d10c      	bne.n	a50e <prvProcessTimerOrBlockTask+0x42>
    a4f4:	687a      	ldr	r2, [r7, #4]
    a4f6:	68fb      	ldr	r3, [r7, #12]
    a4f8:	429a      	cmp	r2, r3
    a4fa:	d808      	bhi.n	a50e <prvProcessTimerOrBlockTask+0x42>
			{
				( void ) xTaskResumeAll();
    a4fc:	4b16      	ldr	r3, [pc, #88]	; (a558 <prvProcessTimerOrBlockTask+0x8c>)
    a4fe:	4798      	blx	r3
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
    a500:	68fa      	ldr	r2, [r7, #12]
    a502:	687b      	ldr	r3, [r7, #4]
    a504:	0011      	movs	r1, r2
    a506:	0018      	movs	r0, r3
    a508:	4b14      	ldr	r3, [pc, #80]	; (a55c <prvProcessTimerOrBlockTask+0x90>)
    a50a:	4798      	blx	r3
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
    a50c:	e01b      	b.n	a546 <prvProcessTimerOrBlockTask+0x7a>
				if( xListWasEmpty != pdFALSE )
    a50e:	683b      	ldr	r3, [r7, #0]
    a510:	2b00      	cmp	r3, #0
    a512:	d006      	beq.n	a522 <prvProcessTimerOrBlockTask+0x56>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
    a514:	4b12      	ldr	r3, [pc, #72]	; (a560 <prvProcessTimerOrBlockTask+0x94>)
    a516:	681b      	ldr	r3, [r3, #0]
    a518:	681b      	ldr	r3, [r3, #0]
    a51a:	425a      	negs	r2, r3
    a51c:	4153      	adcs	r3, r2
    a51e:	b2db      	uxtb	r3, r3
    a520:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
    a522:	4b10      	ldr	r3, [pc, #64]	; (a564 <prvProcessTimerOrBlockTask+0x98>)
    a524:	6818      	ldr	r0, [r3, #0]
    a526:	687a      	ldr	r2, [r7, #4]
    a528:	68fb      	ldr	r3, [r7, #12]
    a52a:	1ad3      	subs	r3, r2, r3
    a52c:	683a      	ldr	r2, [r7, #0]
    a52e:	0019      	movs	r1, r3
    a530:	4b0d      	ldr	r3, [pc, #52]	; (a568 <prvProcessTimerOrBlockTask+0x9c>)
    a532:	4798      	blx	r3
				if( xTaskResumeAll() == pdFALSE )
    a534:	4b08      	ldr	r3, [pc, #32]	; (a558 <prvProcessTimerOrBlockTask+0x8c>)
    a536:	4798      	blx	r3
    a538:	1e03      	subs	r3, r0, #0
    a53a:	d104      	bne.n	a546 <prvProcessTimerOrBlockTask+0x7a>
					portYIELD_WITHIN_API();
    a53c:	4b0b      	ldr	r3, [pc, #44]	; (a56c <prvProcessTimerOrBlockTask+0xa0>)
    a53e:	4798      	blx	r3
}
    a540:	e001      	b.n	a546 <prvProcessTimerOrBlockTask+0x7a>
			( void ) xTaskResumeAll();
    a542:	4b05      	ldr	r3, [pc, #20]	; (a558 <prvProcessTimerOrBlockTask+0x8c>)
    a544:	4798      	blx	r3
}
    a546:	46c0      	nop			; (mov r8, r8)
    a548:	46bd      	mov	sp, r7
    a54a:	b004      	add	sp, #16
    a54c:	bd80      	pop	{r7, pc}
    a54e:	46c0      	nop			; (mov r8, r8)
    a550:	00009305 	.word	0x00009305
    a554:	0000a5b1 	.word	0x0000a5b1
    a558:	0000931d 	.word	0x0000931d
    a55c:	0000a415 	.word	0x0000a415
    a560:	20003c88 	.word	0x20003c88
    a564:	20003c8c 	.word	0x20003c8c
    a568:	00008aa5 	.word	0x00008aa5
    a56c:	00007031 	.word	0x00007031

0000a570 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
    a570:	b580      	push	{r7, lr}
    a572:	b084      	sub	sp, #16
    a574:	af00      	add	r7, sp, #0
    a576:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
    a578:	4b0c      	ldr	r3, [pc, #48]	; (a5ac <prvGetNextExpireTime+0x3c>)
    a57a:	681b      	ldr	r3, [r3, #0]
    a57c:	681b      	ldr	r3, [r3, #0]
    a57e:	425a      	negs	r2, r3
    a580:	4153      	adcs	r3, r2
    a582:	b2db      	uxtb	r3, r3
    a584:	001a      	movs	r2, r3
    a586:	687b      	ldr	r3, [r7, #4]
    a588:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
    a58a:	687b      	ldr	r3, [r7, #4]
    a58c:	681b      	ldr	r3, [r3, #0]
    a58e:	2b00      	cmp	r3, #0
    a590:	d105      	bne.n	a59e <prvGetNextExpireTime+0x2e>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
    a592:	4b06      	ldr	r3, [pc, #24]	; (a5ac <prvGetNextExpireTime+0x3c>)
    a594:	681b      	ldr	r3, [r3, #0]
    a596:	68db      	ldr	r3, [r3, #12]
    a598:	681b      	ldr	r3, [r3, #0]
    a59a:	60fb      	str	r3, [r7, #12]
    a59c:	e001      	b.n	a5a2 <prvGetNextExpireTime+0x32>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
    a59e:	2300      	movs	r3, #0
    a5a0:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
    a5a2:	68fb      	ldr	r3, [r7, #12]
}
    a5a4:	0018      	movs	r0, r3
    a5a6:	46bd      	mov	sp, r7
    a5a8:	b004      	add	sp, #16
    a5aa:	bd80      	pop	{r7, pc}
    a5ac:	20003c84 	.word	0x20003c84

0000a5b0 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
    a5b0:	b580      	push	{r7, lr}
    a5b2:	b084      	sub	sp, #16
    a5b4:	af00      	add	r7, sp, #0
    a5b6:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
    a5b8:	4b0c      	ldr	r3, [pc, #48]	; (a5ec <prvSampleTimeNow+0x3c>)
    a5ba:	4798      	blx	r3
    a5bc:	0003      	movs	r3, r0
    a5be:	60fb      	str	r3, [r7, #12]

	if( xTimeNow < xLastTime )
    a5c0:	4b0b      	ldr	r3, [pc, #44]	; (a5f0 <prvSampleTimeNow+0x40>)
    a5c2:	681b      	ldr	r3, [r3, #0]
    a5c4:	68fa      	ldr	r2, [r7, #12]
    a5c6:	429a      	cmp	r2, r3
    a5c8:	d205      	bcs.n	a5d6 <prvSampleTimeNow+0x26>
	{
		prvSwitchTimerLists();
    a5ca:	4b0a      	ldr	r3, [pc, #40]	; (a5f4 <prvSampleTimeNow+0x44>)
    a5cc:	4798      	blx	r3
		*pxTimerListsWereSwitched = pdTRUE;
    a5ce:	687b      	ldr	r3, [r7, #4]
    a5d0:	2201      	movs	r2, #1
    a5d2:	601a      	str	r2, [r3, #0]
    a5d4:	e002      	b.n	a5dc <prvSampleTimeNow+0x2c>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
    a5d6:	687b      	ldr	r3, [r7, #4]
    a5d8:	2200      	movs	r2, #0
    a5da:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
    a5dc:	4b04      	ldr	r3, [pc, #16]	; (a5f0 <prvSampleTimeNow+0x40>)
    a5de:	68fa      	ldr	r2, [r7, #12]
    a5e0:	601a      	str	r2, [r3, #0]

	return xTimeNow;
    a5e2:	68fb      	ldr	r3, [r7, #12]
}
    a5e4:	0018      	movs	r0, r3
    a5e6:	46bd      	mov	sp, r7
    a5e8:	b004      	add	sp, #16
    a5ea:	bd80      	pop	{r7, pc}
    a5ec:	0000948d 	.word	0x0000948d
    a5f0:	20003c94 	.word	0x20003c94
    a5f4:	0000a799 	.word	0x0000a799

0000a5f8 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
    a5f8:	b580      	push	{r7, lr}
    a5fa:	b086      	sub	sp, #24
    a5fc:	af00      	add	r7, sp, #0
    a5fe:	60f8      	str	r0, [r7, #12]
    a600:	60b9      	str	r1, [r7, #8]
    a602:	607a      	str	r2, [r7, #4]
    a604:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
    a606:	2300      	movs	r3, #0
    a608:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
    a60a:	68fb      	ldr	r3, [r7, #12]
    a60c:	68ba      	ldr	r2, [r7, #8]
    a60e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
    a610:	68fb      	ldr	r3, [r7, #12]
    a612:	68fa      	ldr	r2, [r7, #12]
    a614:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
    a616:	68ba      	ldr	r2, [r7, #8]
    a618:	687b      	ldr	r3, [r7, #4]
    a61a:	429a      	cmp	r2, r3
    a61c:	d812      	bhi.n	a644 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    a61e:	687a      	ldr	r2, [r7, #4]
    a620:	683b      	ldr	r3, [r7, #0]
    a622:	1ad2      	subs	r2, r2, r3
    a624:	68fb      	ldr	r3, [r7, #12]
    a626:	699b      	ldr	r3, [r3, #24]
    a628:	429a      	cmp	r2, r3
    a62a:	d302      	bcc.n	a632 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
    a62c:	2301      	movs	r3, #1
    a62e:	617b      	str	r3, [r7, #20]
    a630:	e01b      	b.n	a66a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
    a632:	4b10      	ldr	r3, [pc, #64]	; (a674 <prvInsertTimerInActiveList+0x7c>)
    a634:	681a      	ldr	r2, [r3, #0]
    a636:	68fb      	ldr	r3, [r7, #12]
    a638:	3304      	adds	r3, #4
    a63a:	0019      	movs	r1, r3
    a63c:	0010      	movs	r0, r2
    a63e:	4b0e      	ldr	r3, [pc, #56]	; (a678 <prvInsertTimerInActiveList+0x80>)
    a640:	4798      	blx	r3
    a642:	e012      	b.n	a66a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
    a644:	687a      	ldr	r2, [r7, #4]
    a646:	683b      	ldr	r3, [r7, #0]
    a648:	429a      	cmp	r2, r3
    a64a:	d206      	bcs.n	a65a <prvInsertTimerInActiveList+0x62>
    a64c:	68ba      	ldr	r2, [r7, #8]
    a64e:	683b      	ldr	r3, [r7, #0]
    a650:	429a      	cmp	r2, r3
    a652:	d302      	bcc.n	a65a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
    a654:	2301      	movs	r3, #1
    a656:	617b      	str	r3, [r7, #20]
    a658:	e007      	b.n	a66a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
    a65a:	4b08      	ldr	r3, [pc, #32]	; (a67c <prvInsertTimerInActiveList+0x84>)
    a65c:	681a      	ldr	r2, [r3, #0]
    a65e:	68fb      	ldr	r3, [r7, #12]
    a660:	3304      	adds	r3, #4
    a662:	0019      	movs	r1, r3
    a664:	0010      	movs	r0, r2
    a666:	4b04      	ldr	r3, [pc, #16]	; (a678 <prvInsertTimerInActiveList+0x80>)
    a668:	4798      	blx	r3
		}
	}

	return xProcessTimerNow;
    a66a:	697b      	ldr	r3, [r7, #20]
}
    a66c:	0018      	movs	r0, r3
    a66e:	46bd      	mov	sp, r7
    a670:	b006      	add	sp, #24
    a672:	bd80      	pop	{r7, pc}
    a674:	20003c88 	.word	0x20003c88
    a678:	00006e53 	.word	0x00006e53
    a67c:	20003c84 	.word	0x20003c84

0000a680 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
    a680:	b590      	push	{r4, r7, lr}
    a682:	b08b      	sub	sp, #44	; 0x2c
    a684:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
    a686:	e068      	b.n	a75a <prvProcessReceivedCommands+0xda>
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
    a688:	2308      	movs	r3, #8
    a68a:	18fb      	adds	r3, r7, r3
    a68c:	681b      	ldr	r3, [r3, #0]
    a68e:	2b00      	cmp	r3, #0
    a690:	db63      	blt.n	a75a <prvProcessReceivedCommands+0xda>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
    a692:	2308      	movs	r3, #8
    a694:	18fb      	adds	r3, r7, r3
    a696:	689b      	ldr	r3, [r3, #8]
    a698:	61fb      	str	r3, [r7, #28]

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
    a69a:	69fb      	ldr	r3, [r7, #28]
    a69c:	695b      	ldr	r3, [r3, #20]
    a69e:	2b00      	cmp	r3, #0
    a6a0:	d004      	beq.n	a6ac <prvProcessReceivedCommands+0x2c>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
    a6a2:	69fb      	ldr	r3, [r7, #28]
    a6a4:	3304      	adds	r3, #4
    a6a6:	0018      	movs	r0, r3
    a6a8:	4b33      	ldr	r3, [pc, #204]	; (a778 <prvProcessReceivedCommands+0xf8>)
    a6aa:	4798      	blx	r3
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
    a6ac:	1d3b      	adds	r3, r7, #4
    a6ae:	0018      	movs	r0, r3
    a6b0:	4b32      	ldr	r3, [pc, #200]	; (a77c <prvProcessReceivedCommands+0xfc>)
    a6b2:	4798      	blx	r3
    a6b4:	0003      	movs	r3, r0
    a6b6:	61bb      	str	r3, [r7, #24]

			switch( xMessage.xMessageID )
    a6b8:	2308      	movs	r3, #8
    a6ba:	18fb      	adds	r3, r7, r3
    a6bc:	681b      	ldr	r3, [r3, #0]
    a6be:	2b09      	cmp	r3, #9
    a6c0:	d84a      	bhi.n	a758 <prvProcessReceivedCommands+0xd8>
    a6c2:	009a      	lsls	r2, r3, #2
    a6c4:	4b2e      	ldr	r3, [pc, #184]	; (a780 <prvProcessReceivedCommands+0x100>)
    a6c6:	18d3      	adds	r3, r2, r3
    a6c8:	681b      	ldr	r3, [r3, #0]
    a6ca:	469f      	mov	pc, r3
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
    a6cc:	2308      	movs	r3, #8
    a6ce:	18fb      	adds	r3, r7, r3
    a6d0:	685a      	ldr	r2, [r3, #4]
    a6d2:	69fb      	ldr	r3, [r7, #28]
    a6d4:	699b      	ldr	r3, [r3, #24]
    a6d6:	18d1      	adds	r1, r2, r3
    a6d8:	2308      	movs	r3, #8
    a6da:	18fb      	adds	r3, r7, r3
    a6dc:	685b      	ldr	r3, [r3, #4]
    a6de:	69ba      	ldr	r2, [r7, #24]
    a6e0:	69f8      	ldr	r0, [r7, #28]
    a6e2:	4c28      	ldr	r4, [pc, #160]	; (a784 <prvProcessReceivedCommands+0x104>)
    a6e4:	47a0      	blx	r4
    a6e6:	1e03      	subs	r3, r0, #0
    a6e8:	d037      	beq.n	a75a <prvProcessReceivedCommands+0xda>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
    a6ea:	69fb      	ldr	r3, [r7, #28]
    a6ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    a6ee:	69fa      	ldr	r2, [r7, #28]
    a6f0:	0010      	movs	r0, r2
    a6f2:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
    a6f4:	69fb      	ldr	r3, [r7, #28]
    a6f6:	69db      	ldr	r3, [r3, #28]
    a6f8:	2b01      	cmp	r3, #1
    a6fa:	d12e      	bne.n	a75a <prvProcessReceivedCommands+0xda>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
    a6fc:	2308      	movs	r3, #8
    a6fe:	18fb      	adds	r3, r7, r3
    a700:	685a      	ldr	r2, [r3, #4]
    a702:	69fb      	ldr	r3, [r7, #28]
    a704:	699b      	ldr	r3, [r3, #24]
    a706:	18d2      	adds	r2, r2, r3
    a708:	69f8      	ldr	r0, [r7, #28]
    a70a:	2300      	movs	r3, #0
    a70c:	9300      	str	r3, [sp, #0]
    a70e:	2300      	movs	r3, #0
    a710:	2100      	movs	r1, #0
    a712:	4c1d      	ldr	r4, [pc, #116]	; (a788 <prvProcessReceivedCommands+0x108>)
    a714:	47a0      	blx	r4
    a716:	0003      	movs	r3, r0
    a718:	617b      	str	r3, [r7, #20]
							configASSERT( xResult );
    a71a:	697b      	ldr	r3, [r7, #20]
    a71c:	2b00      	cmp	r3, #0
    a71e:	d11c      	bne.n	a75a <prvProcessReceivedCommands+0xda>
    a720:	b672      	cpsid	i
    a722:	e7fe      	b.n	a722 <prvProcessReceivedCommands+0xa2>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
    a724:	2308      	movs	r3, #8
    a726:	18fb      	adds	r3, r7, r3
    a728:	685a      	ldr	r2, [r3, #4]
    a72a:	69fb      	ldr	r3, [r7, #28]
    a72c:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
    a72e:	69fb      	ldr	r3, [r7, #28]
    a730:	699b      	ldr	r3, [r3, #24]
    a732:	2b00      	cmp	r3, #0
    a734:	d101      	bne.n	a73a <prvProcessReceivedCommands+0xba>
    a736:	b672      	cpsid	i
    a738:	e7fe      	b.n	a738 <prvProcessReceivedCommands+0xb8>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
    a73a:	69fb      	ldr	r3, [r7, #28]
    a73c:	699a      	ldr	r2, [r3, #24]
    a73e:	69bb      	ldr	r3, [r7, #24]
    a740:	18d1      	adds	r1, r2, r3
    a742:	69bb      	ldr	r3, [r7, #24]
    a744:	69ba      	ldr	r2, [r7, #24]
    a746:	69f8      	ldr	r0, [r7, #28]
    a748:	4c0e      	ldr	r4, [pc, #56]	; (a784 <prvProcessReceivedCommands+0x104>)
    a74a:	47a0      	blx	r4
					break;
    a74c:	e005      	b.n	a75a <prvProcessReceivedCommands+0xda>
					allocated. */
					#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) )
					{
						/* The timer can only have been allocated dynamically -
						free it again. */
						vPortFree( pxTimer );
    a74e:	69fb      	ldr	r3, [r7, #28]
    a750:	0018      	movs	r0, r3
    a752:	4b0e      	ldr	r3, [pc, #56]	; (a78c <prvProcessReceivedCommands+0x10c>)
    a754:	4798      	blx	r3
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
    a756:	e000      	b.n	a75a <prvProcessReceivedCommands+0xda>

				default	:
					/* Don't expect to get here. */
					break;
    a758:	46c0      	nop			; (mov r8, r8)
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
    a75a:	4b0d      	ldr	r3, [pc, #52]	; (a790 <prvProcessReceivedCommands+0x110>)
    a75c:	681b      	ldr	r3, [r3, #0]
    a75e:	2208      	movs	r2, #8
    a760:	18b9      	adds	r1, r7, r2
    a762:	2200      	movs	r2, #0
    a764:	0018      	movs	r0, r3
    a766:	4b0b      	ldr	r3, [pc, #44]	; (a794 <prvProcessReceivedCommands+0x114>)
    a768:	4798      	blx	r3
    a76a:	1e03      	subs	r3, r0, #0
    a76c:	d18c      	bne.n	a688 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
    a76e:	46c0      	nop			; (mov r8, r8)
    a770:	46bd      	mov	sp, r7
    a772:	b009      	add	sp, #36	; 0x24
    a774:	bd90      	pop	{r4, r7, pc}
    a776:	46c0      	nop			; (mov r8, r8)
    a778:	00006ebf 	.word	0x00006ebf
    a77c:	0000a5b1 	.word	0x0000a5b1
    a780:	00024d84 	.word	0x00024d84
    a784:	0000a5f9 	.word	0x0000a5f9
    a788:	0000a36d 	.word	0x0000a36d
    a78c:	00007245 	.word	0x00007245
    a790:	20003c8c 	.word	0x20003c8c
    a794:	00007e99 	.word	0x00007e99

0000a798 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
    a798:	b590      	push	{r4, r7, lr}
    a79a:	b089      	sub	sp, #36	; 0x24
    a79c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
    a79e:	e03e      	b.n	a81e <prvSwitchTimerLists+0x86>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
    a7a0:	4b28      	ldr	r3, [pc, #160]	; (a844 <prvSwitchTimerLists+0xac>)
    a7a2:	681b      	ldr	r3, [r3, #0]
    a7a4:	68db      	ldr	r3, [r3, #12]
    a7a6:	681b      	ldr	r3, [r3, #0]
    a7a8:	617b      	str	r3, [r7, #20]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
    a7aa:	4b26      	ldr	r3, [pc, #152]	; (a844 <prvSwitchTimerLists+0xac>)
    a7ac:	681b      	ldr	r3, [r3, #0]
    a7ae:	68db      	ldr	r3, [r3, #12]
    a7b0:	68db      	ldr	r3, [r3, #12]
    a7b2:	613b      	str	r3, [r7, #16]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
    a7b4:	693b      	ldr	r3, [r7, #16]
    a7b6:	3304      	adds	r3, #4
    a7b8:	0018      	movs	r0, r3
    a7ba:	4b23      	ldr	r3, [pc, #140]	; (a848 <prvSwitchTimerLists+0xb0>)
    a7bc:	4798      	blx	r3
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
    a7be:	693b      	ldr	r3, [r7, #16]
    a7c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    a7c2:	693a      	ldr	r2, [r7, #16]
    a7c4:	0010      	movs	r0, r2
    a7c6:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
    a7c8:	693b      	ldr	r3, [r7, #16]
    a7ca:	69db      	ldr	r3, [r3, #28]
    a7cc:	2b01      	cmp	r3, #1
    a7ce:	d126      	bne.n	a81e <prvSwitchTimerLists+0x86>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
    a7d0:	693b      	ldr	r3, [r7, #16]
    a7d2:	699a      	ldr	r2, [r3, #24]
    a7d4:	697b      	ldr	r3, [r7, #20]
    a7d6:	18d3      	adds	r3, r2, r3
    a7d8:	60fb      	str	r3, [r7, #12]
			if( xReloadTime > xNextExpireTime )
    a7da:	68fa      	ldr	r2, [r7, #12]
    a7dc:	697b      	ldr	r3, [r7, #20]
    a7de:	429a      	cmp	r2, r3
    a7e0:	d90e      	bls.n	a800 <prvSwitchTimerLists+0x68>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
    a7e2:	693b      	ldr	r3, [r7, #16]
    a7e4:	68fa      	ldr	r2, [r7, #12]
    a7e6:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
    a7e8:	693b      	ldr	r3, [r7, #16]
    a7ea:	693a      	ldr	r2, [r7, #16]
    a7ec:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
    a7ee:	4b15      	ldr	r3, [pc, #84]	; (a844 <prvSwitchTimerLists+0xac>)
    a7f0:	681a      	ldr	r2, [r3, #0]
    a7f2:	693b      	ldr	r3, [r7, #16]
    a7f4:	3304      	adds	r3, #4
    a7f6:	0019      	movs	r1, r3
    a7f8:	0010      	movs	r0, r2
    a7fa:	4b14      	ldr	r3, [pc, #80]	; (a84c <prvSwitchTimerLists+0xb4>)
    a7fc:	4798      	blx	r3
    a7fe:	e00e      	b.n	a81e <prvSwitchTimerLists+0x86>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
    a800:	697a      	ldr	r2, [r7, #20]
    a802:	6938      	ldr	r0, [r7, #16]
    a804:	2300      	movs	r3, #0
    a806:	9300      	str	r3, [sp, #0]
    a808:	2300      	movs	r3, #0
    a80a:	2100      	movs	r1, #0
    a80c:	4c10      	ldr	r4, [pc, #64]	; (a850 <prvSwitchTimerLists+0xb8>)
    a80e:	47a0      	blx	r4
    a810:	0003      	movs	r3, r0
    a812:	60bb      	str	r3, [r7, #8]
				configASSERT( xResult );
    a814:	68bb      	ldr	r3, [r7, #8]
    a816:	2b00      	cmp	r3, #0
    a818:	d101      	bne.n	a81e <prvSwitchTimerLists+0x86>
    a81a:	b672      	cpsid	i
    a81c:	e7fe      	b.n	a81c <prvSwitchTimerLists+0x84>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
    a81e:	4b09      	ldr	r3, [pc, #36]	; (a844 <prvSwitchTimerLists+0xac>)
    a820:	681b      	ldr	r3, [r3, #0]
    a822:	681b      	ldr	r3, [r3, #0]
    a824:	2b00      	cmp	r3, #0
    a826:	d1bb      	bne.n	a7a0 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
    a828:	4b06      	ldr	r3, [pc, #24]	; (a844 <prvSwitchTimerLists+0xac>)
    a82a:	681b      	ldr	r3, [r3, #0]
    a82c:	607b      	str	r3, [r7, #4]
	pxCurrentTimerList = pxOverflowTimerList;
    a82e:	4b09      	ldr	r3, [pc, #36]	; (a854 <prvSwitchTimerLists+0xbc>)
    a830:	681a      	ldr	r2, [r3, #0]
    a832:	4b04      	ldr	r3, [pc, #16]	; (a844 <prvSwitchTimerLists+0xac>)
    a834:	601a      	str	r2, [r3, #0]
	pxOverflowTimerList = pxTemp;
    a836:	4b07      	ldr	r3, [pc, #28]	; (a854 <prvSwitchTimerLists+0xbc>)
    a838:	687a      	ldr	r2, [r7, #4]
    a83a:	601a      	str	r2, [r3, #0]
}
    a83c:	46c0      	nop			; (mov r8, r8)
    a83e:	46bd      	mov	sp, r7
    a840:	b007      	add	sp, #28
    a842:	bd90      	pop	{r4, r7, pc}
    a844:	20003c84 	.word	0x20003c84
    a848:	00006ebf 	.word	0x00006ebf
    a84c:	00006e53 	.word	0x00006e53
    a850:	0000a36d 	.word	0x0000a36d
    a854:	20003c88 	.word	0x20003c88

0000a858 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
    a858:	b580      	push	{r7, lr}
    a85a:	af00      	add	r7, sp, #0
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
    a85c:	4b10      	ldr	r3, [pc, #64]	; (a8a0 <prvCheckForValidListAndQueue+0x48>)
    a85e:	4798      	blx	r3
	{
		if( xTimerQueue == NULL )
    a860:	4b10      	ldr	r3, [pc, #64]	; (a8a4 <prvCheckForValidListAndQueue+0x4c>)
    a862:	681b      	ldr	r3, [r3, #0]
    a864:	2b00      	cmp	r3, #0
    a866:	d115      	bne.n	a894 <prvCheckForValidListAndQueue+0x3c>
		{
			vListInitialise( &xActiveTimerList1 );
    a868:	4b0f      	ldr	r3, [pc, #60]	; (a8a8 <prvCheckForValidListAndQueue+0x50>)
    a86a:	0018      	movs	r0, r3
    a86c:	4b0f      	ldr	r3, [pc, #60]	; (a8ac <prvCheckForValidListAndQueue+0x54>)
    a86e:	4798      	blx	r3
			vListInitialise( &xActiveTimerList2 );
    a870:	4b0f      	ldr	r3, [pc, #60]	; (a8b0 <prvCheckForValidListAndQueue+0x58>)
    a872:	0018      	movs	r0, r3
    a874:	4b0d      	ldr	r3, [pc, #52]	; (a8ac <prvCheckForValidListAndQueue+0x54>)
    a876:	4798      	blx	r3
			pxCurrentTimerList = &xActiveTimerList1;
    a878:	4b0e      	ldr	r3, [pc, #56]	; (a8b4 <prvCheckForValidListAndQueue+0x5c>)
    a87a:	4a0b      	ldr	r2, [pc, #44]	; (a8a8 <prvCheckForValidListAndQueue+0x50>)
    a87c:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
    a87e:	4b0e      	ldr	r3, [pc, #56]	; (a8b8 <prvCheckForValidListAndQueue+0x60>)
    a880:	4a0b      	ldr	r2, [pc, #44]	; (a8b0 <prvCheckForValidListAndQueue+0x58>)
    a882:	601a      	str	r2, [r3, #0]

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
			}
			#else
			{
				xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
    a884:	2200      	movs	r2, #0
    a886:	210c      	movs	r1, #12
    a888:	2005      	movs	r0, #5
    a88a:	4b0c      	ldr	r3, [pc, #48]	; (a8bc <prvCheckForValidListAndQueue+0x64>)
    a88c:	4798      	blx	r3
    a88e:	0002      	movs	r2, r0
    a890:	4b04      	ldr	r3, [pc, #16]	; (a8a4 <prvCheckForValidListAndQueue+0x4c>)
    a892:	601a      	str	r2, [r3, #0]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
    a894:	4b0a      	ldr	r3, [pc, #40]	; (a8c0 <prvCheckForValidListAndQueue+0x68>)
    a896:	4798      	blx	r3
}
    a898:	46c0      	nop			; (mov r8, r8)
    a89a:	46bd      	mov	sp, r7
    a89c:	bd80      	pop	{r7, pc}
    a89e:	46c0      	nop			; (mov r8, r8)
    a8a0:	00007049 	.word	0x00007049
    a8a4:	20003c8c 	.word	0x20003c8c
    a8a8:	20003c5c 	.word	0x20003c5c
    a8ac:	00006dbd 	.word	0x00006dbd
    a8b0:	20003c70 	.word	0x20003c70
    a8b4:	20003c84 	.word	0x20003c84
    a8b8:	20003c88 	.word	0x20003c88
    a8bc:	00007339 	.word	0x00007339
    a8c0:	0000706d 	.word	0x0000706d

0000a8c4 <advance_pointer>:
 };

 #pragma mark - Private Functions -

 static void advance_pointer(cbuf_handle_t cbuf)
 {
    a8c4:	b580      	push	{r7, lr}
    a8c6:	b082      	sub	sp, #8
    a8c8:	af00      	add	r7, sp, #0
    a8ca:	6078      	str	r0, [r7, #4]
	 //assert(cbuf);

	 if(cbuf->full)
    a8cc:	687b      	ldr	r3, [r7, #4]
    a8ce:	7c1b      	ldrb	r3, [r3, #16]
    a8d0:	2b00      	cmp	r3, #0
    a8d2:	d00b      	beq.n	a8ec <advance_pointer+0x28>
	 {
		 cbuf->tail = (cbuf->tail + 1) % cbuf->max;
    a8d4:	687b      	ldr	r3, [r7, #4]
    a8d6:	689b      	ldr	r3, [r3, #8]
    a8d8:	1c5a      	adds	r2, r3, #1
    a8da:	687b      	ldr	r3, [r7, #4]
    a8dc:	68d9      	ldr	r1, [r3, #12]
    a8de:	4b10      	ldr	r3, [pc, #64]	; (a920 <advance_pointer+0x5c>)
    a8e0:	0010      	movs	r0, r2
    a8e2:	4798      	blx	r3
    a8e4:	000b      	movs	r3, r1
    a8e6:	001a      	movs	r2, r3
    a8e8:	687b      	ldr	r3, [r7, #4]
    a8ea:	609a      	str	r2, [r3, #8]
	 }

	 cbuf->head = (cbuf->head + 1) % cbuf->max;
    a8ec:	687b      	ldr	r3, [r7, #4]
    a8ee:	685b      	ldr	r3, [r3, #4]
    a8f0:	1c5a      	adds	r2, r3, #1
    a8f2:	687b      	ldr	r3, [r7, #4]
    a8f4:	68d9      	ldr	r1, [r3, #12]
    a8f6:	4b0a      	ldr	r3, [pc, #40]	; (a920 <advance_pointer+0x5c>)
    a8f8:	0010      	movs	r0, r2
    a8fa:	4798      	blx	r3
    a8fc:	000b      	movs	r3, r1
    a8fe:	001a      	movs	r2, r3
    a900:	687b      	ldr	r3, [r7, #4]
    a902:	605a      	str	r2, [r3, #4]

	 // We mark full because we will advance tail on the next time around
	 cbuf->full = (cbuf->head == cbuf->tail);
    a904:	687b      	ldr	r3, [r7, #4]
    a906:	685a      	ldr	r2, [r3, #4]
    a908:	687b      	ldr	r3, [r7, #4]
    a90a:	689b      	ldr	r3, [r3, #8]
    a90c:	1ad3      	subs	r3, r2, r3
    a90e:	425a      	negs	r2, r3
    a910:	4153      	adcs	r3, r2
    a912:	b2da      	uxtb	r2, r3
    a914:	687b      	ldr	r3, [r7, #4]
    a916:	741a      	strb	r2, [r3, #16]
 }
    a918:	46c0      	nop			; (mov r8, r8)
    a91a:	46bd      	mov	sp, r7
    a91c:	b002      	add	sp, #8
    a91e:	bd80      	pop	{r7, pc}
    a920:	0001f94d 	.word	0x0001f94d

0000a924 <retreat_pointer>:

 static void retreat_pointer(cbuf_handle_t cbuf)
 {
    a924:	b580      	push	{r7, lr}
    a926:	b082      	sub	sp, #8
    a928:	af00      	add	r7, sp, #0
    a92a:	6078      	str	r0, [r7, #4]
	 //assert(cbuf);

	 cbuf->full = false;
    a92c:	687b      	ldr	r3, [r7, #4]
    a92e:	2200      	movs	r2, #0
    a930:	741a      	strb	r2, [r3, #16]
	 cbuf->tail = (cbuf->tail + 1) % cbuf->max;
    a932:	687b      	ldr	r3, [r7, #4]
    a934:	689b      	ldr	r3, [r3, #8]
    a936:	1c5a      	adds	r2, r3, #1
    a938:	687b      	ldr	r3, [r7, #4]
    a93a:	68d9      	ldr	r1, [r3, #12]
    a93c:	4b05      	ldr	r3, [pc, #20]	; (a954 <retreat_pointer+0x30>)
    a93e:	0010      	movs	r0, r2
    a940:	4798      	blx	r3
    a942:	000b      	movs	r3, r1
    a944:	001a      	movs	r2, r3
    a946:	687b      	ldr	r3, [r7, #4]
    a948:	609a      	str	r2, [r3, #8]
 }
    a94a:	46c0      	nop			; (mov r8, r8)
    a94c:	46bd      	mov	sp, r7
    a94e:	b002      	add	sp, #8
    a950:	bd80      	pop	{r7, pc}
    a952:	46c0      	nop			; (mov r8, r8)
    a954:	0001f94d 	.word	0x0001f94d

0000a958 <circular_buf_init>:

 #pragma mark - APIs -

 cbuf_handle_t circular_buf_init(uint8_t* buffer, size_t size)
 {
    a958:	b580      	push	{r7, lr}
    a95a:	b084      	sub	sp, #16
    a95c:	af00      	add	r7, sp, #0
    a95e:	6078      	str	r0, [r7, #4]
    a960:	6039      	str	r1, [r7, #0]
	// assert(buffer && size);

	 cbuf_handle_t cbuf = malloc(sizeof(circular_buf_t));
    a962:	2014      	movs	r0, #20
    a964:	4b09      	ldr	r3, [pc, #36]	; (a98c <circular_buf_init+0x34>)
    a966:	4798      	blx	r3
    a968:	0003      	movs	r3, r0
    a96a:	60fb      	str	r3, [r7, #12]
	 //assert(cbuf);

	 cbuf->buffer = buffer;
    a96c:	68fb      	ldr	r3, [r7, #12]
    a96e:	687a      	ldr	r2, [r7, #4]
    a970:	601a      	str	r2, [r3, #0]
	 cbuf->max = size;
    a972:	68fb      	ldr	r3, [r7, #12]
    a974:	683a      	ldr	r2, [r7, #0]
    a976:	60da      	str	r2, [r3, #12]
	 circular_buf_reset(cbuf);
    a978:	68fb      	ldr	r3, [r7, #12]
    a97a:	0018      	movs	r0, r3
    a97c:	4b04      	ldr	r3, [pc, #16]	; (a990 <circular_buf_init+0x38>)
    a97e:	4798      	blx	r3

	// assert(circular_buf_empty(cbuf));

	 return cbuf;
    a980:	68fb      	ldr	r3, [r7, #12]
 }
    a982:	0018      	movs	r0, r3
    a984:	46bd      	mov	sp, r7
    a986:	b004      	add	sp, #16
    a988:	bd80      	pop	{r7, pc}
    a98a:	46c0      	nop			; (mov r8, r8)
    a98c:	000217bd 	.word	0x000217bd
    a990:	0000a995 	.word	0x0000a995

0000a994 <circular_buf_reset>:
	// assert(cbuf);
	 free(cbuf);
 }

 void circular_buf_reset(cbuf_handle_t cbuf)
 {
    a994:	b580      	push	{r7, lr}
    a996:	b082      	sub	sp, #8
    a998:	af00      	add	r7, sp, #0
    a99a:	6078      	str	r0, [r7, #4]
	// assert(cbuf);

	 cbuf->head = 0;
    a99c:	687b      	ldr	r3, [r7, #4]
    a99e:	2200      	movs	r2, #0
    a9a0:	605a      	str	r2, [r3, #4]
	 cbuf->tail = 0;
    a9a2:	687b      	ldr	r3, [r7, #4]
    a9a4:	2200      	movs	r2, #0
    a9a6:	609a      	str	r2, [r3, #8]
	 cbuf->full = false;
    a9a8:	687b      	ldr	r3, [r7, #4]
    a9aa:	2200      	movs	r2, #0
    a9ac:	741a      	strb	r2, [r3, #16]
 }
    a9ae:	46c0      	nop			; (mov r8, r8)
    a9b0:	46bd      	mov	sp, r7
    a9b2:	b002      	add	sp, #8
    a9b4:	bd80      	pop	{r7, pc}
	...

0000a9b8 <circular_buf_put>:

	 return cbuf->max;
 }

 void circular_buf_put(cbuf_handle_t cbuf, uint8_t data)
 {
    a9b8:	b580      	push	{r7, lr}
    a9ba:	b082      	sub	sp, #8
    a9bc:	af00      	add	r7, sp, #0
    a9be:	6078      	str	r0, [r7, #4]
    a9c0:	000a      	movs	r2, r1
    a9c2:	1cfb      	adds	r3, r7, #3
    a9c4:	701a      	strb	r2, [r3, #0]
	 //assert(cbuf && cbuf->buffer);

	 cbuf->buffer[cbuf->head] = data;
    a9c6:	687b      	ldr	r3, [r7, #4]
    a9c8:	681a      	ldr	r2, [r3, #0]
    a9ca:	687b      	ldr	r3, [r7, #4]
    a9cc:	685b      	ldr	r3, [r3, #4]
    a9ce:	18d3      	adds	r3, r2, r3
    a9d0:	1cfa      	adds	r2, r7, #3
    a9d2:	7812      	ldrb	r2, [r2, #0]
    a9d4:	701a      	strb	r2, [r3, #0]

	 advance_pointer(cbuf);
    a9d6:	687b      	ldr	r3, [r7, #4]
    a9d8:	0018      	movs	r0, r3
    a9da:	4b03      	ldr	r3, [pc, #12]	; (a9e8 <circular_buf_put+0x30>)
    a9dc:	4798      	blx	r3
 }
    a9de:	46c0      	nop			; (mov r8, r8)
    a9e0:	46bd      	mov	sp, r7
    a9e2:	b002      	add	sp, #8
    a9e4:	bd80      	pop	{r7, pc}
    a9e6:	46c0      	nop			; (mov r8, r8)
    a9e8:	0000a8c5 	.word	0x0000a8c5

0000a9ec <circular_buf_get>:

	 return r;
 }

 int circular_buf_get(cbuf_handle_t cbuf, uint8_t * data)
 {
    a9ec:	b580      	push	{r7, lr}
    a9ee:	b084      	sub	sp, #16
    a9f0:	af00      	add	r7, sp, #0
    a9f2:	6078      	str	r0, [r7, #4]
    a9f4:	6039      	str	r1, [r7, #0]
	 //assert(cbuf && data && cbuf->buffer);
	 
	 int r = -1;
    a9f6:	2301      	movs	r3, #1
    a9f8:	425b      	negs	r3, r3
    a9fa:	60fb      	str	r3, [r7, #12]

	 if(!circular_buf_empty(cbuf))
    a9fc:	687b      	ldr	r3, [r7, #4]
    a9fe:	0018      	movs	r0, r3
    aa00:	4b0d      	ldr	r3, [pc, #52]	; (aa38 <circular_buf_get+0x4c>)
    aa02:	4798      	blx	r3
    aa04:	0003      	movs	r3, r0
    aa06:	001a      	movs	r2, r3
    aa08:	2301      	movs	r3, #1
    aa0a:	4053      	eors	r3, r2
    aa0c:	b2db      	uxtb	r3, r3
    aa0e:	2b00      	cmp	r3, #0
    aa10:	d00d      	beq.n	aa2e <circular_buf_get+0x42>
	 {
		 *data = cbuf->buffer[cbuf->tail];
    aa12:	687b      	ldr	r3, [r7, #4]
    aa14:	681a      	ldr	r2, [r3, #0]
    aa16:	687b      	ldr	r3, [r7, #4]
    aa18:	689b      	ldr	r3, [r3, #8]
    aa1a:	18d3      	adds	r3, r2, r3
    aa1c:	781a      	ldrb	r2, [r3, #0]
    aa1e:	683b      	ldr	r3, [r7, #0]
    aa20:	701a      	strb	r2, [r3, #0]
		 retreat_pointer(cbuf);
    aa22:	687b      	ldr	r3, [r7, #4]
    aa24:	0018      	movs	r0, r3
    aa26:	4b05      	ldr	r3, [pc, #20]	; (aa3c <circular_buf_get+0x50>)
    aa28:	4798      	blx	r3

		 r = 0;
    aa2a:	2300      	movs	r3, #0
    aa2c:	60fb      	str	r3, [r7, #12]
	 }

	 return r;
    aa2e:	68fb      	ldr	r3, [r7, #12]
 }
    aa30:	0018      	movs	r0, r3
    aa32:	46bd      	mov	sp, r7
    aa34:	b004      	add	sp, #16
    aa36:	bd80      	pop	{r7, pc}
    aa38:	0000aa41 	.word	0x0000aa41
    aa3c:	0000a925 	.word	0x0000a925

0000aa40 <circular_buf_empty>:

 bool circular_buf_empty(cbuf_handle_t cbuf)
 {
    aa40:	b580      	push	{r7, lr}
    aa42:	b082      	sub	sp, #8
    aa44:	af00      	add	r7, sp, #0
    aa46:	6078      	str	r0, [r7, #4]
	 //assert(cbuf);

	 return (!cbuf->full && (cbuf->head == cbuf->tail));
    aa48:	687b      	ldr	r3, [r7, #4]
    aa4a:	7c1b      	ldrb	r3, [r3, #16]
    aa4c:	2201      	movs	r2, #1
    aa4e:	4053      	eors	r3, r2
    aa50:	b2db      	uxtb	r3, r3
    aa52:	2b00      	cmp	r3, #0
    aa54:	d007      	beq.n	aa66 <circular_buf_empty+0x26>
    aa56:	687b      	ldr	r3, [r7, #4]
    aa58:	685a      	ldr	r2, [r3, #4]
    aa5a:	687b      	ldr	r3, [r7, #4]
    aa5c:	689b      	ldr	r3, [r3, #8]
    aa5e:	429a      	cmp	r2, r3
    aa60:	d101      	bne.n	aa66 <circular_buf_empty+0x26>
    aa62:	2301      	movs	r3, #1
    aa64:	e000      	b.n	aa68 <circular_buf_empty+0x28>
    aa66:	2300      	movs	r3, #0
    aa68:	1c1a      	adds	r2, r3, #0
    aa6a:	2301      	movs	r3, #1
    aa6c:	4013      	ands	r3, r2
    aa6e:	b2db      	uxtb	r3, r3
 }
    aa70:	0018      	movs	r0, r3
    aa72:	46bd      	mov	sp, r7
    aa74:	b002      	add	sp, #8
    aa76:	bd80      	pop	{r7, pc}

0000aa78 <system_interrupt_enable>:
 *
 * \param[in] vector Interrupt vector to enable
 */
static inline void system_interrupt_enable(
		const enum system_interrupt_vector vector)
{
    aa78:	b580      	push	{r7, lr}
    aa7a:	b082      	sub	sp, #8
    aa7c:	af00      	add	r7, sp, #0
    aa7e:	0002      	movs	r2, r0
    aa80:	1dfb      	adds	r3, r7, #7
    aa82:	701a      	strb	r2, [r3, #0]
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    aa84:	4b06      	ldr	r3, [pc, #24]	; (aaa0 <system_interrupt_enable+0x28>)
    aa86:	1dfa      	adds	r2, r7, #7
    aa88:	7812      	ldrb	r2, [r2, #0]
    aa8a:	0011      	movs	r1, r2
    aa8c:	221f      	movs	r2, #31
    aa8e:	400a      	ands	r2, r1
    aa90:	2101      	movs	r1, #1
    aa92:	4091      	lsls	r1, r2
    aa94:	000a      	movs	r2, r1
    aa96:	601a      	str	r2, [r3, #0]
}
    aa98:	46c0      	nop			; (mov r8, r8)
    aa9a:	46bd      	mov	sp, r7
    aa9c:	b002      	add	sp, #8
    aa9e:	bd80      	pop	{r7, pc}
    aaa0:	e000e100 	.word	0xe000e100

0000aaa4 <usart_is_syncing>:
 * \retval false  Peripheral is not busy syncing and can be read/written without
 *                stalling the bus
 */
static inline bool usart_is_syncing(
		const struct usart_module *const module)
{
    aaa4:	b580      	push	{r7, lr}
    aaa6:	b084      	sub	sp, #16
    aaa8:	af00      	add	r7, sp, #0
    aaaa:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);
    aaac:	687b      	ldr	r3, [r7, #4]
    aaae:	681b      	ldr	r3, [r3, #0]
    aab0:	60fb      	str	r3, [r7, #12]

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
    aab2:	68fb      	ldr	r3, [r7, #12]
    aab4:	69db      	ldr	r3, [r3, #28]
    aab6:	1e5a      	subs	r2, r3, #1
    aab8:	4193      	sbcs	r3, r2
    aaba:	b2db      	uxtb	r3, r3
#else
	return (usart_hw->STATUS.reg & SERCOM_USART_STATUS_SYNCBUSY);
#endif
}
    aabc:	0018      	movs	r0, r3
    aabe:	46bd      	mov	sp, r7
    aac0:	b004      	add	sp, #16
    aac2:	bd80      	pop	{r7, pc}

0000aac4 <_usart_wait_for_sync>:
 * \internal
 * Waits until synchronization is complete
 */
static inline void _usart_wait_for_sync(
		const struct usart_module *const module)
{
    aac4:	b580      	push	{r7, lr}
    aac6:	b082      	sub	sp, #8
    aac8:	af00      	add	r7, sp, #0
    aaca:	6078      	str	r0, [r7, #4]
	/* Sanity check */
	Assert(module);

	while (usart_is_syncing(module)) {
    aacc:	46c0      	nop			; (mov r8, r8)
    aace:	687b      	ldr	r3, [r7, #4]
    aad0:	0018      	movs	r0, r3
    aad2:	4b04      	ldr	r3, [pc, #16]	; (aae4 <_usart_wait_for_sync+0x20>)
    aad4:	4798      	blx	r3
    aad6:	1e03      	subs	r3, r0, #0
    aad8:	d1f9      	bne.n	aace <_usart_wait_for_sync+0xa>
		/* Wait until the synchronization is complete */
	}
}
    aada:	46c0      	nop			; (mov r8, r8)
    aadc:	46bd      	mov	sp, r7
    aade:	b002      	add	sp, #8
    aae0:	bd80      	pop	{r7, pc}
    aae2:	46c0      	nop			; (mov r8, r8)
    aae4:	0000aaa5 	.word	0x0000aaa5

0000aae8 <usart_get_config_defaults>:
 *
 * \param[in,out] config  Pointer to configuration struct
 */
static inline void usart_get_config_defaults(
		struct usart_config *const config)
{
    aae8:	b580      	push	{r7, lr}
    aaea:	b082      	sub	sp, #8
    aaec:	af00      	add	r7, sp, #0
    aaee:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Set default config in the config struct */
	config->data_order       = USART_DATAORDER_LSB;
    aaf0:	687b      	ldr	r3, [r7, #4]
    aaf2:	2280      	movs	r2, #128	; 0x80
    aaf4:	05d2      	lsls	r2, r2, #23
    aaf6:	601a      	str	r2, [r3, #0]
	config->transfer_mode    = USART_TRANSFER_ASYNCHRONOUSLY;
    aaf8:	687b      	ldr	r3, [r7, #4]
    aafa:	2200      	movs	r2, #0
    aafc:	605a      	str	r2, [r3, #4]
	config->parity           = USART_PARITY_NONE;
    aafe:	687b      	ldr	r3, [r7, #4]
    ab00:	22ff      	movs	r2, #255	; 0xff
    ab02:	811a      	strh	r2, [r3, #8]
	config->stopbits         = USART_STOPBITS_1;
    ab04:	687b      	ldr	r3, [r7, #4]
    ab06:	2200      	movs	r2, #0
    ab08:	729a      	strb	r2, [r3, #10]
	config->character_size   = USART_CHARACTER_SIZE_8BIT;
    ab0a:	687b      	ldr	r3, [r7, #4]
    ab0c:	2200      	movs	r2, #0
    ab0e:	72da      	strb	r2, [r3, #11]
	config->baudrate         = 9600;
    ab10:	687b      	ldr	r3, [r7, #4]
    ab12:	2296      	movs	r2, #150	; 0x96
    ab14:	0192      	lsls	r2, r2, #6
    ab16:	621a      	str	r2, [r3, #32]
	config->receiver_enable  = true;
    ab18:	687b      	ldr	r3, [r7, #4]
    ab1a:	2224      	movs	r2, #36	; 0x24
    ab1c:	2101      	movs	r1, #1
    ab1e:	5499      	strb	r1, [r3, r2]
	config->transmitter_enable = true;
    ab20:	687b      	ldr	r3, [r7, #4]
    ab22:	2225      	movs	r2, #37	; 0x25
    ab24:	2101      	movs	r1, #1
    ab26:	5499      	strb	r1, [r3, r2]
	config->clock_polarity_inverted = false;
    ab28:	687b      	ldr	r3, [r7, #4]
    ab2a:	2226      	movs	r2, #38	; 0x26
    ab2c:	2100      	movs	r1, #0
    ab2e:	5499      	strb	r1, [r3, r2]
	config->use_external_clock = false;
    ab30:	687b      	ldr	r3, [r7, #4]
    ab32:	2227      	movs	r2, #39	; 0x27
    ab34:	2100      	movs	r1, #0
    ab36:	5499      	strb	r1, [r3, r2]
	config->ext_clock_freq   = 0;
    ab38:	687b      	ldr	r3, [r7, #4]
    ab3a:	2200      	movs	r2, #0
    ab3c:	629a      	str	r2, [r3, #40]	; 0x28
	config->mux_setting      = USART_RX_1_TX_2_XCK_3;
    ab3e:	687b      	ldr	r3, [r7, #4]
    ab40:	2288      	movs	r2, #136	; 0x88
    ab42:	0352      	lsls	r2, r2, #13
    ab44:	60da      	str	r2, [r3, #12]
	config->run_in_standby   = false;
    ab46:	687b      	ldr	r3, [r7, #4]
    ab48:	222c      	movs	r2, #44	; 0x2c
    ab4a:	2100      	movs	r1, #0
    ab4c:	5499      	strb	r1, [r3, r2]
	config->generator_source = GCLK_GENERATOR_0;
    ab4e:	687b      	ldr	r3, [r7, #4]
    ab50:	222d      	movs	r2, #45	; 0x2d
    ab52:	2100      	movs	r1, #0
    ab54:	5499      	strb	r1, [r3, r2]
	config->pinmux_pad0      = PINMUX_DEFAULT;
    ab56:	687b      	ldr	r3, [r7, #4]
    ab58:	2200      	movs	r2, #0
    ab5a:	631a      	str	r2, [r3, #48]	; 0x30
	config->pinmux_pad1      = PINMUX_DEFAULT;
    ab5c:	687b      	ldr	r3, [r7, #4]
    ab5e:	2200      	movs	r2, #0
    ab60:	635a      	str	r2, [r3, #52]	; 0x34
	config->pinmux_pad2      = PINMUX_DEFAULT;
    ab62:	687b      	ldr	r3, [r7, #4]
    ab64:	2200      	movs	r2, #0
    ab66:	639a      	str	r2, [r3, #56]	; 0x38
	config->pinmux_pad3      = PINMUX_DEFAULT;
    ab68:	687b      	ldr	r3, [r7, #4]
    ab6a:	2200      	movs	r2, #0
    ab6c:	63da      	str	r2, [r3, #60]	; 0x3c
#ifdef FEATURE_USART_OVER_SAMPLE
	config->sample_adjustment     = USART_SAMPLE_ADJUSTMENT_7_8_9;
    ab6e:	687b      	ldr	r3, [r7, #4]
    ab70:	2200      	movs	r2, #0
    ab72:	615a      	str	r2, [r3, #20]
	config->sample_rate           = USART_SAMPLE_RATE_16X_ARITHMETIC;
    ab74:	687b      	ldr	r3, [r7, #4]
    ab76:	2200      	movs	r2, #0
    ab78:	821a      	strh	r2, [r3, #16]
#endif
#ifdef FEATURE_USART_LIN_SLAVE
	config->lin_slave_enable      = false;
    ab7a:	687b      	ldr	r3, [r7, #4]
    ab7c:	2200      	movs	r2, #0
    ab7e:	76da      	strb	r2, [r3, #27]
	config->lin_header_delay = LIN_MASTER_HEADER_DELAY_0;
	config->lin_break_length = LIN_MASTER_BREAK_LENGTH_13_BIT;
#endif

#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
	config->immediate_buffer_overflow_notification  = false;
    ab80:	687b      	ldr	r3, [r7, #4]
    ab82:	2200      	movs	r2, #0
    ab84:	761a      	strb	r2, [r3, #24]
#endif
#ifdef FEATURE_USART_START_FRAME_DECTION
	config->start_frame_detection_enable            = false;
    ab86:	687b      	ldr	r3, [r7, #4]
    ab88:	2200      	movs	r2, #0
    ab8a:	771a      	strb	r2, [r3, #28]
#endif
#ifdef FEATURE_USART_IRDA
	config->encoding_format_enable                  = false;
    ab8c:	687b      	ldr	r3, [r7, #4]
    ab8e:	2200      	movs	r2, #0
    ab90:	765a      	strb	r2, [r3, #25]
	config->receive_pulse_length                    = 19;
    ab92:	687b      	ldr	r3, [r7, #4]
    ab94:	2213      	movs	r2, #19
    ab96:	769a      	strb	r2, [r3, #26]
	config->iso7816_config.inhibit_nack             = ISO7816_INHIBIT_NACK_DISABLE;
	config->iso7816_config.successive_recv_nack     = ISO7816_SUCCESSIVE_RECV_NACK_DISABLE;
	config->iso7816_config.max_iterations           = 7;
#endif
#ifdef FEATURE_USART_COLLISION_DECTION
	config->collision_detection_enable              = false;
    ab98:	687b      	ldr	r3, [r7, #4]
    ab9a:	2200      	movs	r2, #0
    ab9c:	775a      	strb	r2, [r3, #29]
#endif
#ifdef FEATURE_USART_RS485
	config->rs485_guard_time = RS485_GUARD_TIME_0_BIT;
#endif
}
    ab9e:	46c0      	nop			; (mov r8, r8)
    aba0:	46bd      	mov	sp, r7
    aba2:	b002      	add	sp, #8
    aba4:	bd80      	pop	{r7, pc}
	...

0000aba8 <usart_enable>:
 *
 * \param[in]  module  Pointer to USART software instance struct
 */
static inline void usart_enable(
		const struct usart_module *const module)
{
    aba8:	b580      	push	{r7, lr}
    abaa:	b084      	sub	sp, #16
    abac:	af00      	add	r7, sp, #0
    abae:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    abb0:	687b      	ldr	r3, [r7, #4]
    abb2:	681b      	ldr	r3, [r3, #0]
    abb4:	60fb      	str	r3, [r7, #12]

#if USART_CALLBACK_MODE == true
	/* Enable Global interrupt for module */
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
    abb6:	687b      	ldr	r3, [r7, #4]
    abb8:	681b      	ldr	r3, [r3, #0]
    abba:	0018      	movs	r0, r3
    abbc:	4b09      	ldr	r3, [pc, #36]	; (abe4 <usart_enable+0x3c>)
    abbe:	4798      	blx	r3
    abc0:	0003      	movs	r3, r0
    abc2:	0018      	movs	r0, r3
    abc4:	4b08      	ldr	r3, [pc, #32]	; (abe8 <usart_enable+0x40>)
    abc6:	4798      	blx	r3
#endif

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);
    abc8:	687b      	ldr	r3, [r7, #4]
    abca:	0018      	movs	r0, r3
    abcc:	4b07      	ldr	r3, [pc, #28]	; (abec <usart_enable+0x44>)
    abce:	4798      	blx	r3

	/* Enable USART module */
	usart_hw->CTRLA.reg |= SERCOM_USART_CTRLA_ENABLE;
    abd0:	68fb      	ldr	r3, [r7, #12]
    abd2:	681b      	ldr	r3, [r3, #0]
    abd4:	2202      	movs	r2, #2
    abd6:	431a      	orrs	r2, r3
    abd8:	68fb      	ldr	r3, [r7, #12]
    abda:	601a      	str	r2, [r3, #0]
}
    abdc:	46c0      	nop			; (mov r8, r8)
    abde:	46bd      	mov	sp, r7
    abe0:	b004      	add	sp, #16
    abe2:	bd80      	pop	{r7, pc}
    abe4:	000145ad 	.word	0x000145ad
    abe8:	0000aa79 	.word	0x0000aa79
    abec:	0000aac5 	.word	0x0000aac5

0000abf0 <usart_enable_callback>:
 * \param[in]  callback_type  Callback type given by an enum
 */
static inline void usart_enable_callback(
		struct usart_module *const module,
		enum usart_callback callback_type)
{
    abf0:	b580      	push	{r7, lr}
    abf2:	b082      	sub	sp, #8
    abf4:	af00      	add	r7, sp, #0
    abf6:	6078      	str	r0, [r7, #4]
    abf8:	000a      	movs	r2, r1
    abfa:	1cfb      	adds	r3, r7, #3
    abfc:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);

	/* Enable callback */
	module->callback_enable_mask |= (1 << callback_type);
    abfe:	687b      	ldr	r3, [r7, #4]
    ac00:	2231      	movs	r2, #49	; 0x31
    ac02:	5c9b      	ldrb	r3, [r3, r2]
    ac04:	b25a      	sxtb	r2, r3
    ac06:	1cfb      	adds	r3, r7, #3
    ac08:	781b      	ldrb	r3, [r3, #0]
    ac0a:	2101      	movs	r1, #1
    ac0c:	4099      	lsls	r1, r3
    ac0e:	000b      	movs	r3, r1
    ac10:	b25b      	sxtb	r3, r3
    ac12:	4313      	orrs	r3, r2
    ac14:	b25b      	sxtb	r3, r3
    ac16:	b2d9      	uxtb	r1, r3
    ac18:	687b      	ldr	r3, [r7, #4]
    ac1a:	2231      	movs	r2, #49	; 0x31
    ac1c:	5499      	strb	r1, [r3, r2]

}
    ac1e:	46c0      	nop			; (mov r8, r8)
    ac20:	46bd      	mov	sp, r7
    ac22:	b002      	add	sp, #8
    ac24:	bd80      	pop	{r7, pc}
	...

0000ac28 <InitializeSerialConsole>:
 *				asynchronous reads and writes.
 * @note			Call from main once to initialize Hardware.
 */

void InitializeSerialConsole(void)
{
    ac28:	b580      	push	{r7, lr}
    ac2a:	af00      	add	r7, sp, #0
    // Initialize circular buffers for RX and TX
    cbufRx = circular_buf_init((uint8_t *)rxCharacterBuffer, RX_BUFFER_SIZE);
    ac2c:	2380      	movs	r3, #128	; 0x80
    ac2e:	009a      	lsls	r2, r3, #2
    ac30:	4b0f      	ldr	r3, [pc, #60]	; (ac70 <InitializeSerialConsole+0x48>)
    ac32:	0011      	movs	r1, r2
    ac34:	0018      	movs	r0, r3
    ac36:	4b0f      	ldr	r3, [pc, #60]	; (ac74 <InitializeSerialConsole+0x4c>)
    ac38:	4798      	blx	r3
    ac3a:	0002      	movs	r2, r0
    ac3c:	4b0e      	ldr	r3, [pc, #56]	; (ac78 <InitializeSerialConsole+0x50>)
    ac3e:	601a      	str	r2, [r3, #0]
    cbufTx = circular_buf_init((uint8_t *)txCharacterBuffer, RX_BUFFER_SIZE);
    ac40:	2380      	movs	r3, #128	; 0x80
    ac42:	009a      	lsls	r2, r3, #2
    ac44:	4b0d      	ldr	r3, [pc, #52]	; (ac7c <InitializeSerialConsole+0x54>)
    ac46:	0011      	movs	r1, r2
    ac48:	0018      	movs	r0, r3
    ac4a:	4b0a      	ldr	r3, [pc, #40]	; (ac74 <InitializeSerialConsole+0x4c>)
    ac4c:	4798      	blx	r3
    ac4e:	0002      	movs	r2, r0
    ac50:	4b0b      	ldr	r3, [pc, #44]	; (ac80 <InitializeSerialConsole+0x58>)
    ac52:	601a      	str	r2, [r3, #0]

    // Configure USART and Callbacks
    configure_usart();
    ac54:	4b0b      	ldr	r3, [pc, #44]	; (ac84 <InitializeSerialConsole+0x5c>)
    ac56:	4798      	blx	r3
    configure_usart_callbacks();
    ac58:	4b0b      	ldr	r3, [pc, #44]	; (ac88 <InitializeSerialConsole+0x60>)
    ac5a:	4798      	blx	r3

    usart_read_buffer_job(&usart_instance, (uint8_t *)&latestRx, 1);  // Kicks off constant reading of characters
    ac5c:	490b      	ldr	r1, [pc, #44]	; (ac8c <InitializeSerialConsole+0x64>)
    ac5e:	4b0c      	ldr	r3, [pc, #48]	; (ac90 <InitializeSerialConsole+0x68>)
    ac60:	2201      	movs	r2, #1
    ac62:	0018      	movs	r0, r3
    ac64:	4b0b      	ldr	r3, [pc, #44]	; (ac94 <InitializeSerialConsole+0x6c>)
    ac66:	4798      	blx	r3

    // Add any other calls you need to do to initialize your Serial Console
}
    ac68:	46c0      	nop			; (mov r8, r8)
    ac6a:	46bd      	mov	sp, r7
    ac6c:	bd80      	pop	{r7, pc}
    ac6e:	46c0      	nop			; (mov r8, r8)
    ac70:	2000526c 	.word	0x2000526c
    ac74:	0000a959 	.word	0x0000a959
    ac78:	20005064 	.word	0x20005064
    ac7c:	2000506c 	.word	0x2000506c
    ac80:	20005470 	.word	0x20005470
    ac84:	0000adfd 	.word	0x0000adfd
    ac88:	0000ae75 	.word	0x0000ae75
    ac8c:	20005068 	.word	0x20005068
    ac90:	20005030 	.word	0x20005030
    ac94:	00015e55 	.word	0x00015e55

0000ac98 <SerialConsoleWriteString>:
 * @details		Uses the ringbuffer 'cbufTx', which in turn uses the array 'txCharacterBuffer'. Modified to be
 *thread safe.
 * @note			Use to send a string of characters to the user via UART
 */
void SerialConsoleWriteString(const char *string)
{
    ac98:	b580      	push	{r7, lr}
    ac9a:	b084      	sub	sp, #16
    ac9c:	af00      	add	r7, sp, #0
    ac9e:	6078      	str	r0, [r7, #4]
    vTaskSuspendAll();
    aca0:	4b1a      	ldr	r3, [pc, #104]	; (ad0c <SerialConsoleWriteString+0x74>)
    aca2:	4798      	blx	r3
    if (string != NULL) {
    aca4:	687b      	ldr	r3, [r7, #4]
    aca6:	2b00      	cmp	r3, #0
    aca8:	d02a      	beq.n	ad00 <SerialConsoleWriteString+0x68>
        for (size_t iter = 0; iter < strlen(string); iter++) {
    acaa:	2300      	movs	r3, #0
    acac:	60fb      	str	r3, [r7, #12]
    acae:	e00b      	b.n	acc8 <SerialConsoleWriteString+0x30>
            circular_buf_put(cbufTx, string[iter]);
    acb0:	4b17      	ldr	r3, [pc, #92]	; (ad10 <SerialConsoleWriteString+0x78>)
    acb2:	6818      	ldr	r0, [r3, #0]
    acb4:	687a      	ldr	r2, [r7, #4]
    acb6:	68fb      	ldr	r3, [r7, #12]
    acb8:	18d3      	adds	r3, r2, r3
    acba:	781b      	ldrb	r3, [r3, #0]
    acbc:	0019      	movs	r1, r3
    acbe:	4b15      	ldr	r3, [pc, #84]	; (ad14 <SerialConsoleWriteString+0x7c>)
    acc0:	4798      	blx	r3
        for (size_t iter = 0; iter < strlen(string); iter++) {
    acc2:	68fb      	ldr	r3, [r7, #12]
    acc4:	3301      	adds	r3, #1
    acc6:	60fb      	str	r3, [r7, #12]
    acc8:	687b      	ldr	r3, [r7, #4]
    acca:	0018      	movs	r0, r3
    accc:	4b12      	ldr	r3, [pc, #72]	; (ad18 <SerialConsoleWriteString+0x80>)
    acce:	4798      	blx	r3
    acd0:	0002      	movs	r2, r0
    acd2:	68fb      	ldr	r3, [r7, #12]
    acd4:	429a      	cmp	r2, r3
    acd6:	d8eb      	bhi.n	acb0 <SerialConsoleWriteString+0x18>
        }

        if (usart_get_job_status(&usart_instance, USART_TRANSCEIVER_TX) == STATUS_OK) {
    acd8:	4b10      	ldr	r3, [pc, #64]	; (ad1c <SerialConsoleWriteString+0x84>)
    acda:	2101      	movs	r1, #1
    acdc:	0018      	movs	r0, r3
    acde:	4b10      	ldr	r3, [pc, #64]	; (ad20 <SerialConsoleWriteString+0x88>)
    ace0:	4798      	blx	r3
    ace2:	1e03      	subs	r3, r0, #0
    ace4:	d10c      	bne.n	ad00 <SerialConsoleWriteString+0x68>
            circular_buf_get(cbufTx, (uint8_t *)&latestTx);  // Perform only if the SERCOM TX is free (not busy)
    ace6:	4b0a      	ldr	r3, [pc, #40]	; (ad10 <SerialConsoleWriteString+0x78>)
    ace8:	681b      	ldr	r3, [r3, #0]
    acea:	4a0e      	ldr	r2, [pc, #56]	; (ad24 <SerialConsoleWriteString+0x8c>)
    acec:	0011      	movs	r1, r2
    acee:	0018      	movs	r0, r3
    acf0:	4b0d      	ldr	r3, [pc, #52]	; (ad28 <SerialConsoleWriteString+0x90>)
    acf2:	4798      	blx	r3
            usart_write_buffer_job(&usart_instance, (uint8_t *)&latestTx, 1);
    acf4:	490b      	ldr	r1, [pc, #44]	; (ad24 <SerialConsoleWriteString+0x8c>)
    acf6:	4b09      	ldr	r3, [pc, #36]	; (ad1c <SerialConsoleWriteString+0x84>)
    acf8:	2201      	movs	r2, #1
    acfa:	0018      	movs	r0, r3
    acfc:	4b0b      	ldr	r3, [pc, #44]	; (ad2c <SerialConsoleWriteString+0x94>)
    acfe:	4798      	blx	r3
        }
    }
    xTaskResumeAll();
    ad00:	4b0b      	ldr	r3, [pc, #44]	; (ad30 <SerialConsoleWriteString+0x98>)
    ad02:	4798      	blx	r3
}
    ad04:	46c0      	nop			; (mov r8, r8)
    ad06:	46bd      	mov	sp, r7
    ad08:	b004      	add	sp, #16
    ad0a:	bd80      	pop	{r7, pc}
    ad0c:	00009305 	.word	0x00009305
    ad10:	20005470 	.word	0x20005470
    ad14:	0000a9b9 	.word	0x0000a9b9
    ad18:	00021bd3 	.word	0x00021bd3
    ad1c:	20005030 	.word	0x20005030
    ad20:	00015e9d 	.word	0x00015e9d
    ad24:	2000546c 	.word	0x2000546c
    ad28:	0000a9ed 	.word	0x0000a9ed
    ad2c:	00015e0d 	.word	0x00015e0d
    ad30:	0000931d 	.word	0x0000931d

0000ad34 <SerialConsoleReadCharacter>:
 * @param[in]	Pointer to a character. This function will return the character from the RX buffer into this pointer
 * @return		Returns -1 if there are no characters in the buffer
 * @note			Use to receive characters from the RX buffer (FIFO)
 */
int SerialConsoleReadCharacter(uint8_t *rxChar)
{
    ad34:	b580      	push	{r7, lr}
    ad36:	b084      	sub	sp, #16
    ad38:	af00      	add	r7, sp, #0
    ad3a:	6078      	str	r0, [r7, #4]
    vTaskSuspendAll();
    ad3c:	4b08      	ldr	r3, [pc, #32]	; (ad60 <SerialConsoleReadCharacter+0x2c>)
    ad3e:	4798      	blx	r3
    int a = circular_buf_get(cbufRx, (uint8_t *)rxChar);
    ad40:	4b08      	ldr	r3, [pc, #32]	; (ad64 <SerialConsoleReadCharacter+0x30>)
    ad42:	681b      	ldr	r3, [r3, #0]
    ad44:	687a      	ldr	r2, [r7, #4]
    ad46:	0011      	movs	r1, r2
    ad48:	0018      	movs	r0, r3
    ad4a:	4b07      	ldr	r3, [pc, #28]	; (ad68 <SerialConsoleReadCharacter+0x34>)
    ad4c:	4798      	blx	r3
    ad4e:	0003      	movs	r3, r0
    ad50:	60fb      	str	r3, [r7, #12]
    xTaskResumeAll();
    ad52:	4b06      	ldr	r3, [pc, #24]	; (ad6c <SerialConsoleReadCharacter+0x38>)
    ad54:	4798      	blx	r3
    return a;
    ad56:	68fb      	ldr	r3, [r7, #12]
}
    ad58:	0018      	movs	r0, r3
    ad5a:	46bd      	mov	sp, r7
    ad5c:	b004      	add	sp, #16
    ad5e:	bd80      	pop	{r7, pc}
    ad60:	00009305 	.word	0x00009305
    ad64:	20005064 	.word	0x20005064
    ad68:	0000a9ed 	.word	0x0000a9ed
    ad6c:	0000931d 	.word	0x0000931d

0000ad70 <getLogLevel>:
 * @return		Returns the current debug level of the system.
 * @note
 */

enum eDebugLogLevels getLogLevel(void)
{
    ad70:	b580      	push	{r7, lr}
    ad72:	af00      	add	r7, sp, #0
    return currentDebugLevel;
    ad74:	4b02      	ldr	r3, [pc, #8]	; (ad80 <getLogLevel+0x10>)
    ad76:	781b      	ldrb	r3, [r3, #0]
}
    ad78:	0018      	movs	r0, r3
    ad7a:	46bd      	mov	sp, r7
    ad7c:	bd80      	pop	{r7, pc}
    ad7e:	46c0      	nop			; (mov r8, r8)
    ad80:	20003c98 	.word	0x20003c98

0000ad84 <LogMessage>:
 * @fn			LogMessage (Students to fill out this)
 * @brief
 * @note
 */
void LogMessage(enum eDebugLogLevels level, const char *format, ...)
{
    ad84:	b40e      	push	{r1, r2, r3}
    ad86:	b590      	push	{r4, r7, lr}
    ad88:	b084      	sub	sp, #16
    ad8a:	af00      	add	r7, sp, #0
    ad8c:	0002      	movs	r2, r0
    ad8e:	1dfb      	adds	r3, r7, #7
    ad90:	701a      	strb	r2, [r3, #0]
    if (getLogLevel() <= level) {
    ad92:	4b0e      	ldr	r3, [pc, #56]	; (adcc <LogMessage+0x48>)
    ad94:	4798      	blx	r3
    ad96:	0003      	movs	r3, r0
    ad98:	001a      	movs	r2, r3
    ad9a:	1dfb      	adds	r3, r7, #7
    ad9c:	781b      	ldrb	r3, [r3, #0]
    ad9e:	4293      	cmp	r3, r2
    ada0:	d30c      	bcc.n	adbc <LogMessage+0x38>
        va_list ap;
        va_start(ap, format);
    ada2:	2320      	movs	r3, #32
    ada4:	18fb      	adds	r3, r7, r3
    ada6:	60fb      	str	r3, [r7, #12]
        vsnprintf(debugBuffer, 127, format, ap);
    ada8:	68fb      	ldr	r3, [r7, #12]
    adaa:	69fa      	ldr	r2, [r7, #28]
    adac:	4808      	ldr	r0, [pc, #32]	; (add0 <LogMessage+0x4c>)
    adae:	217f      	movs	r1, #127	; 0x7f
    adb0:	4c08      	ldr	r4, [pc, #32]	; (add4 <LogMessage+0x50>)
    adb2:	47a0      	blx	r4
        SerialConsoleWriteString(debugBuffer);
    adb4:	4b06      	ldr	r3, [pc, #24]	; (add0 <LogMessage+0x4c>)
    adb6:	0018      	movs	r0, r3
    adb8:	4b07      	ldr	r3, [pc, #28]	; (add8 <LogMessage+0x54>)
    adba:	4798      	blx	r3
        va_end(ap);
    }
};
    adbc:	46c0      	nop			; (mov r8, r8)
    adbe:	46bd      	mov	sp, r7
    adc0:	b004      	add	sp, #16
    adc2:	bc90      	pop	{r4, r7}
    adc4:	bc08      	pop	{r3}
    adc6:	b003      	add	sp, #12
    adc8:	4718      	bx	r3
    adca:	46c0      	nop			; (mov r8, r8)
    adcc:	0000ad71 	.word	0x0000ad71
    add0:	20004fb0 	.word	0x20004fb0
    add4:	00021e0d 	.word	0x00021e0d
    add8:	0000ac99 	.word	0x0000ac99

0000addc <LogMessageDebug>:
 * @fn			LogMessage Debug
 * @brief
 * @note
 */
void LogMessageDebug(const char *format, ...)
{
    addc:	b40f      	push	{r0, r1, r2, r3}
    adde:	b580      	push	{r7, lr}
    ade0:	af00      	add	r7, sp, #0
    LogMessage(LOG_DEBUG_LVL, format);
    ade2:	68bb      	ldr	r3, [r7, #8]
    ade4:	0019      	movs	r1, r3
    ade6:	2001      	movs	r0, #1
    ade8:	4b03      	ldr	r3, [pc, #12]	; (adf8 <LogMessageDebug+0x1c>)
    adea:	4798      	blx	r3
};
    adec:	46c0      	nop			; (mov r8, r8)
    adee:	46bd      	mov	sp, r7
    adf0:	bc80      	pop	{r7}
    adf2:	bc08      	pop	{r3}
    adf4:	b004      	add	sp, #16
    adf6:	4718      	bx	r3
    adf8:	0000ad85 	.word	0x0000ad85

0000adfc <configure_usart>:
 * @fn			static void configure_usart(void)
 * @brief		Code to configure the SERCOM "EDBG_CDC_MODULE" to be a UART channel running at 115200 8N1
 * @note
 */
static void configure_usart(void)
{
    adfc:	b580      	push	{r7, lr}
    adfe:	b090      	sub	sp, #64	; 0x40
    ae00:	af00      	add	r7, sp, #0
    struct usart_config config_usart;
    usart_get_config_defaults(&config_usart);
    ae02:	003b      	movs	r3, r7
    ae04:	0018      	movs	r0, r3
    ae06:	4b14      	ldr	r3, [pc, #80]	; (ae58 <configure_usart+0x5c>)
    ae08:	4798      	blx	r3

    config_usart.baudrate = 115200;
    ae0a:	003b      	movs	r3, r7
    ae0c:	22e1      	movs	r2, #225	; 0xe1
    ae0e:	0252      	lsls	r2, r2, #9
    ae10:	621a      	str	r2, [r3, #32]
    config_usart.mux_setting = EDBG_CDC_SERCOM_MUX_SETTING;
    ae12:	003b      	movs	r3, r7
    ae14:	22c4      	movs	r2, #196	; 0xc4
    ae16:	0392      	lsls	r2, r2, #14
    ae18:	60da      	str	r2, [r3, #12]
    config_usart.pinmux_pad0 = EDBG_CDC_SERCOM_PINMUX_PAD0;
    ae1a:	003b      	movs	r3, r7
    ae1c:	2201      	movs	r2, #1
    ae1e:	4252      	negs	r2, r2
    ae20:	631a      	str	r2, [r3, #48]	; 0x30
    config_usart.pinmux_pad1 = EDBG_CDC_SERCOM_PINMUX_PAD1;
    ae22:	003b      	movs	r3, r7
    ae24:	2201      	movs	r2, #1
    ae26:	4252      	negs	r2, r2
    ae28:	635a      	str	r2, [r3, #52]	; 0x34
    config_usart.pinmux_pad2 = EDBG_CDC_SERCOM_PINMUX_PAD2;
    ae2a:	003b      	movs	r3, r7
    ae2c:	4a0b      	ldr	r2, [pc, #44]	; (ae5c <configure_usart+0x60>)
    ae2e:	639a      	str	r2, [r3, #56]	; 0x38
    config_usart.pinmux_pad3 = EDBG_CDC_SERCOM_PINMUX_PAD3;
    ae30:	003b      	movs	r3, r7
    ae32:	4a0b      	ldr	r2, [pc, #44]	; (ae60 <configure_usart+0x64>)
    ae34:	63da      	str	r2, [r3, #60]	; 0x3c
    while (usart_init(&usart_instance, EDBG_CDC_MODULE, &config_usart) != STATUS_OK) {
    ae36:	46c0      	nop			; (mov r8, r8)
    ae38:	003a      	movs	r2, r7
    ae3a:	490a      	ldr	r1, [pc, #40]	; (ae64 <configure_usart+0x68>)
    ae3c:	4b0a      	ldr	r3, [pc, #40]	; (ae68 <configure_usart+0x6c>)
    ae3e:	0018      	movs	r0, r3
    ae40:	4b0a      	ldr	r3, [pc, #40]	; (ae6c <configure_usart+0x70>)
    ae42:	4798      	blx	r3
    ae44:	1e03      	subs	r3, r0, #0
    ae46:	d1f7      	bne.n	ae38 <configure_usart+0x3c>
    }

    usart_enable(&usart_instance);
    ae48:	4b07      	ldr	r3, [pc, #28]	; (ae68 <configure_usart+0x6c>)
    ae4a:	0018      	movs	r0, r3
    ae4c:	4b08      	ldr	r3, [pc, #32]	; (ae70 <configure_usart+0x74>)
    ae4e:	4798      	blx	r3
}
    ae50:	46c0      	nop			; (mov r8, r8)
    ae52:	46bd      	mov	sp, r7
    ae54:	b010      	add	sp, #64	; 0x40
    ae56:	bd80      	pop	{r7, pc}
    ae58:	0000aae9 	.word	0x0000aae9
    ae5c:	002a0003 	.word	0x002a0003
    ae60:	002b0003 	.word	0x002b0003
    ae64:	42001800 	.word	0x42001800
    ae68:	20005030 	.word	0x20005030
    ae6c:	00015a11 	.word	0x00015a11
    ae70:	0000aba9 	.word	0x0000aba9

0000ae74 <configure_usart_callbacks>:
 * @fn			static void configure_usart_callbacks(void)
 * @brief		Code to register callbacks
 * @note
 */
static void configure_usart_callbacks(void)
{
    ae74:	b580      	push	{r7, lr}
    ae76:	af00      	add	r7, sp, #0
    usart_register_callback(&usart_instance, usart_write_callback, USART_CALLBACK_BUFFER_TRANSMITTED);
    ae78:	490c      	ldr	r1, [pc, #48]	; (aeac <configure_usart_callbacks+0x38>)
    ae7a:	4b0d      	ldr	r3, [pc, #52]	; (aeb0 <configure_usart_callbacks+0x3c>)
    ae7c:	2200      	movs	r2, #0
    ae7e:	0018      	movs	r0, r3
    ae80:	4b0c      	ldr	r3, [pc, #48]	; (aeb4 <configure_usart_callbacks+0x40>)
    ae82:	4798      	blx	r3
    usart_register_callback(&usart_instance, usart_read_callback, USART_CALLBACK_BUFFER_RECEIVED);
    ae84:	490c      	ldr	r1, [pc, #48]	; (aeb8 <configure_usart_callbacks+0x44>)
    ae86:	4b0a      	ldr	r3, [pc, #40]	; (aeb0 <configure_usart_callbacks+0x3c>)
    ae88:	2201      	movs	r2, #1
    ae8a:	0018      	movs	r0, r3
    ae8c:	4b09      	ldr	r3, [pc, #36]	; (aeb4 <configure_usart_callbacks+0x40>)
    ae8e:	4798      	blx	r3
    usart_enable_callback(&usart_instance, USART_CALLBACK_BUFFER_TRANSMITTED);
    ae90:	4b07      	ldr	r3, [pc, #28]	; (aeb0 <configure_usart_callbacks+0x3c>)
    ae92:	2100      	movs	r1, #0
    ae94:	0018      	movs	r0, r3
    ae96:	4b09      	ldr	r3, [pc, #36]	; (aebc <configure_usart_callbacks+0x48>)
    ae98:	4798      	blx	r3
    usart_enable_callback(&usart_instance, USART_CALLBACK_BUFFER_RECEIVED);
    ae9a:	4b05      	ldr	r3, [pc, #20]	; (aeb0 <configure_usart_callbacks+0x3c>)
    ae9c:	2101      	movs	r1, #1
    ae9e:	0018      	movs	r0, r3
    aea0:	4b06      	ldr	r3, [pc, #24]	; (aebc <configure_usart_callbacks+0x48>)
    aea2:	4798      	blx	r3
}
    aea4:	46c0      	nop			; (mov r8, r8)
    aea6:	46bd      	mov	sp, r7
    aea8:	bd80      	pop	{r7, pc}
    aeaa:	46c0      	nop			; (mov r8, r8)
    aeac:	0000af09 	.word	0x0000af09
    aeb0:	20005030 	.word	0x20005030
    aeb4:	00015dc5 	.word	0x00015dc5
    aeb8:	0000aec1 	.word	0x0000aec1
    aebc:	0000abf1 	.word	0x0000abf1

0000aec0 <usart_read_callback>:
 * @fn			void usart_read_callback(struct usart_module *const usart_module)
 * @brief		Callback called when the system finishes receives all the bytes requested from a UART read job
 * @note
 */
void usart_read_callback(struct usart_module *const usart_module)
{
    aec0:	b580      	push	{r7, lr}
    aec2:	b082      	sub	sp, #8
    aec4:	af00      	add	r7, sp, #0
    aec6:	6078      	str	r0, [r7, #4]
    circular_buf_put(cbufRx, (uint8_t)latestRx);                      // Add the latest read character into the RX circular Buffer
    aec8:	4b09      	ldr	r3, [pc, #36]	; (aef0 <usart_read_callback+0x30>)
    aeca:	681a      	ldr	r2, [r3, #0]
    aecc:	4b09      	ldr	r3, [pc, #36]	; (aef4 <usart_read_callback+0x34>)
    aece:	781b      	ldrb	r3, [r3, #0]
    aed0:	0019      	movs	r1, r3
    aed2:	0010      	movs	r0, r2
    aed4:	4b08      	ldr	r3, [pc, #32]	; (aef8 <usart_read_callback+0x38>)
    aed6:	4798      	blx	r3
    usart_read_buffer_job(&usart_instance, (uint8_t *)&latestRx, 1);  // Order the MCU to keep reading
    aed8:	4906      	ldr	r1, [pc, #24]	; (aef4 <usart_read_callback+0x34>)
    aeda:	4b08      	ldr	r3, [pc, #32]	; (aefc <usart_read_callback+0x3c>)
    aedc:	2201      	movs	r2, #1
    aede:	0018      	movs	r0, r3
    aee0:	4b07      	ldr	r3, [pc, #28]	; (af00 <usart_read_callback+0x40>)
    aee2:	4798      	blx	r3
    CliCharReadySemaphoreGiveFromISR();                               // Give binary semaphore
    aee4:	4b07      	ldr	r3, [pc, #28]	; (af04 <usart_read_callback+0x44>)
    aee6:	4798      	blx	r3
}
    aee8:	46c0      	nop			; (mov r8, r8)
    aeea:	46bd      	mov	sp, r7
    aeec:	b002      	add	sp, #8
    aeee:	bd80      	pop	{r7, pc}
    aef0:	20005064 	.word	0x20005064
    aef4:	20005068 	.word	0x20005068
    aef8:	0000a9b9 	.word	0x0000a9b9
    aefc:	20005030 	.word	0x20005030
    af00:	00015e55 	.word	0x00015e55
    af04:	000011b5 	.word	0x000011b5

0000af08 <usart_write_callback>:
 * @fn			void usart_write_callback(struct usart_module *const usart_module)
 * @brief		Callback called when the system finishes sending all the bytes requested from a UART read job
 * @note
 */
void usart_write_callback(struct usart_module *const usart_module)
{
    af08:	b580      	push	{r7, lr}
    af0a:	b082      	sub	sp, #8
    af0c:	af00      	add	r7, sp, #0
    af0e:	6078      	str	r0, [r7, #4]
    if (circular_buf_get(cbufTx, (uint8_t *)&latestTx) != -1)  // Only continue if there are more characters to send
    af10:	4b09      	ldr	r3, [pc, #36]	; (af38 <usart_write_callback+0x30>)
    af12:	681b      	ldr	r3, [r3, #0]
    af14:	4a09      	ldr	r2, [pc, #36]	; (af3c <usart_write_callback+0x34>)
    af16:	0011      	movs	r1, r2
    af18:	0018      	movs	r0, r3
    af1a:	4b09      	ldr	r3, [pc, #36]	; (af40 <usart_write_callback+0x38>)
    af1c:	4798      	blx	r3
    af1e:	0003      	movs	r3, r0
    af20:	3301      	adds	r3, #1
    af22:	d005      	beq.n	af30 <usart_write_callback+0x28>
    {
        usart_write_buffer_job(&usart_instance, (uint8_t *)&latestTx, 1);
    af24:	4905      	ldr	r1, [pc, #20]	; (af3c <usart_write_callback+0x34>)
    af26:	4b07      	ldr	r3, [pc, #28]	; (af44 <usart_write_callback+0x3c>)
    af28:	2201      	movs	r2, #1
    af2a:	0018      	movs	r0, r3
    af2c:	4b06      	ldr	r3, [pc, #24]	; (af48 <usart_write_callback+0x40>)
    af2e:	4798      	blx	r3
    }
}
    af30:	46c0      	nop			; (mov r8, r8)
    af32:	46bd      	mov	sp, r7
    af34:	b002      	add	sp, #8
    af36:	bd80      	pop	{r7, pc}
    af38:	20005470 	.word	0x20005470
    af3c:	2000546c 	.word	0x2000546c
    af40:	0000a9ed 	.word	0x0000a9ed
    af44:	20005030 	.word	0x20005030
    af48:	00015e0d 	.word	0x00015e0d

0000af4c <SDMMC_UNSTUFF_BITS>:
 * \brief Macro function to extract a bits field from a large SD MMC register
 * Used by : CSD, SCR, Switch status
 */
static inline uint32_t SDMMC_UNSTUFF_BITS(uint8_t *reg, uint16_t reg_size,
		uint16_t pos, uint8_t size)
{
    af4c:	b590      	push	{r4, r7, lr}
    af4e:	b087      	sub	sp, #28
    af50:	af00      	add	r7, sp, #0
    af52:	60f8      	str	r0, [r7, #12]
    af54:	000c      	movs	r4, r1
    af56:	0010      	movs	r0, r2
    af58:	0019      	movs	r1, r3
    af5a:	230a      	movs	r3, #10
    af5c:	18fb      	adds	r3, r7, r3
    af5e:	1c22      	adds	r2, r4, #0
    af60:	801a      	strh	r2, [r3, #0]
    af62:	2308      	movs	r3, #8
    af64:	18fb      	adds	r3, r7, r3
    af66:	1c02      	adds	r2, r0, #0
    af68:	801a      	strh	r2, [r3, #0]
    af6a:	1dfb      	adds	r3, r7, #7
    af6c:	1c0a      	adds	r2, r1, #0
    af6e:	701a      	strb	r2, [r3, #0]
	uint32_t value;
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
    af70:	230a      	movs	r3, #10
    af72:	18fb      	adds	r3, r7, r3
    af74:	881a      	ldrh	r2, [r3, #0]
    af76:	2308      	movs	r3, #8
    af78:	18fb      	adds	r3, r7, r3
    af7a:	881b      	ldrh	r3, [r3, #0]
    af7c:	1ad3      	subs	r3, r2, r3
    af7e:	3307      	adds	r3, #7
    af80:	2b00      	cmp	r3, #0
    af82:	da00      	bge.n	af86 <SDMMC_UNSTUFF_BITS+0x3a>
    af84:	3307      	adds	r3, #7
    af86:	10db      	asrs	r3, r3, #3
    af88:	3b01      	subs	r3, #1
    af8a:	68fa      	ldr	r2, [r7, #12]
    af8c:	18d3      	adds	r3, r2, r3
    af8e:	781b      	ldrb	r3, [r3, #0]
    af90:	0019      	movs	r1, r3
    af92:	2308      	movs	r3, #8
    af94:	18fb      	adds	r3, r7, r3
    af96:	881b      	ldrh	r3, [r3, #0]
    af98:	2207      	movs	r2, #7
    af9a:	4013      	ands	r3, r2
    af9c:	4119      	asrs	r1, r3
    af9e:	000b      	movs	r3, r1
    afa0:	617b      	str	r3, [r7, #20]
	if (((pos % 8) + size) > 8) {
    afa2:	2308      	movs	r3, #8
    afa4:	18fb      	adds	r3, r7, r3
    afa6:	881b      	ldrh	r3, [r3, #0]
    afa8:	2207      	movs	r2, #7
    afaa:	401a      	ands	r2, r3
    afac:	1dfb      	adds	r3, r7, #7
    afae:	781b      	ldrb	r3, [r3, #0]
    afb0:	18d3      	adds	r3, r2, r3
    afb2:	2b08      	cmp	r3, #8
    afb4:	dd1c      	ble.n	aff0 <SDMMC_UNSTUFF_BITS+0xa4>
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 2] << (8 - (pos % 8));
    afb6:	230a      	movs	r3, #10
    afb8:	18fb      	adds	r3, r7, r3
    afba:	881a      	ldrh	r2, [r3, #0]
    afbc:	2308      	movs	r3, #8
    afbe:	18fb      	adds	r3, r7, r3
    afc0:	881b      	ldrh	r3, [r3, #0]
    afc2:	1ad3      	subs	r3, r2, r3
    afc4:	3307      	adds	r3, #7
    afc6:	2b00      	cmp	r3, #0
    afc8:	da00      	bge.n	afcc <SDMMC_UNSTUFF_BITS+0x80>
    afca:	3307      	adds	r3, #7
    afcc:	10db      	asrs	r3, r3, #3
    afce:	3b02      	subs	r3, #2
    afd0:	68fa      	ldr	r2, [r7, #12]
    afd2:	18d3      	adds	r3, r2, r3
    afd4:	781b      	ldrb	r3, [r3, #0]
    afd6:	0019      	movs	r1, r3
    afd8:	2308      	movs	r3, #8
    afda:	18fb      	adds	r3, r7, r3
    afdc:	881b      	ldrh	r3, [r3, #0]
    afde:	2207      	movs	r2, #7
    afe0:	4013      	ands	r3, r2
    afe2:	2208      	movs	r2, #8
    afe4:	1ad3      	subs	r3, r2, r3
    afe6:	4099      	lsls	r1, r3
    afe8:	000b      	movs	r3, r1
    afea:	697a      	ldr	r2, [r7, #20]
    afec:	4313      	orrs	r3, r2
    afee:	617b      	str	r3, [r7, #20]
	}
	if (((pos % 8) + size) > 16) {
    aff0:	2308      	movs	r3, #8
    aff2:	18fb      	adds	r3, r7, r3
    aff4:	881b      	ldrh	r3, [r3, #0]
    aff6:	2207      	movs	r2, #7
    aff8:	401a      	ands	r2, r3
    affa:	1dfb      	adds	r3, r7, #7
    affc:	781b      	ldrb	r3, [r3, #0]
    affe:	18d3      	adds	r3, r2, r3
    b000:	2b10      	cmp	r3, #16
    b002:	dd1c      	ble.n	b03e <SDMMC_UNSTUFF_BITS+0xf2>
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
    b004:	230a      	movs	r3, #10
    b006:	18fb      	adds	r3, r7, r3
    b008:	881a      	ldrh	r2, [r3, #0]
    b00a:	2308      	movs	r3, #8
    b00c:	18fb      	adds	r3, r7, r3
    b00e:	881b      	ldrh	r3, [r3, #0]
    b010:	1ad3      	subs	r3, r2, r3
    b012:	3307      	adds	r3, #7
    b014:	2b00      	cmp	r3, #0
    b016:	da00      	bge.n	b01a <SDMMC_UNSTUFF_BITS+0xce>
    b018:	3307      	adds	r3, #7
    b01a:	10db      	asrs	r3, r3, #3
    b01c:	3b03      	subs	r3, #3
    b01e:	68fa      	ldr	r2, [r7, #12]
    b020:	18d3      	adds	r3, r2, r3
    b022:	781b      	ldrb	r3, [r3, #0]
    b024:	0019      	movs	r1, r3
    b026:	2308      	movs	r3, #8
    b028:	18fb      	adds	r3, r7, r3
    b02a:	881b      	ldrh	r3, [r3, #0]
    b02c:	2207      	movs	r2, #7
    b02e:	4013      	ands	r3, r2
    b030:	2210      	movs	r2, #16
    b032:	1ad3      	subs	r3, r2, r3
    b034:	4099      	lsls	r1, r3
    b036:	000b      	movs	r3, r1
    b038:	697a      	ldr	r2, [r7, #20]
    b03a:	4313      	orrs	r3, r2
    b03c:	617b      	str	r3, [r7, #20]
	}
	if (((pos % 8) + size) > 16) {
    b03e:	2308      	movs	r3, #8
    b040:	18fb      	adds	r3, r7, r3
    b042:	881b      	ldrh	r3, [r3, #0]
    b044:	2207      	movs	r2, #7
    b046:	401a      	ands	r2, r3
    b048:	1dfb      	adds	r3, r7, #7
    b04a:	781b      	ldrb	r3, [r3, #0]
    b04c:	18d3      	adds	r3, r2, r3
    b04e:	2b10      	cmp	r3, #16
    b050:	dd1c      	ble.n	b08c <SDMMC_UNSTUFF_BITS+0x140>
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
    b052:	230a      	movs	r3, #10
    b054:	18fb      	adds	r3, r7, r3
    b056:	881a      	ldrh	r2, [r3, #0]
    b058:	2308      	movs	r3, #8
    b05a:	18fb      	adds	r3, r7, r3
    b05c:	881b      	ldrh	r3, [r3, #0]
    b05e:	1ad3      	subs	r3, r2, r3
    b060:	3307      	adds	r3, #7
    b062:	2b00      	cmp	r3, #0
    b064:	da00      	bge.n	b068 <SDMMC_UNSTUFF_BITS+0x11c>
    b066:	3307      	adds	r3, #7
    b068:	10db      	asrs	r3, r3, #3
    b06a:	3b03      	subs	r3, #3
    b06c:	68fa      	ldr	r2, [r7, #12]
    b06e:	18d3      	adds	r3, r2, r3
    b070:	781b      	ldrb	r3, [r3, #0]
    b072:	0019      	movs	r1, r3
    b074:	2308      	movs	r3, #8
    b076:	18fb      	adds	r3, r7, r3
    b078:	881b      	ldrh	r3, [r3, #0]
    b07a:	2207      	movs	r2, #7
    b07c:	4013      	ands	r3, r2
    b07e:	2210      	movs	r2, #16
    b080:	1ad3      	subs	r3, r2, r3
    b082:	4099      	lsls	r1, r3
    b084:	000b      	movs	r3, r1
    b086:	697a      	ldr	r2, [r7, #20]
    b088:	4313      	orrs	r3, r2
    b08a:	617b      	str	r3, [r7, #20]
	}
	value &=  ((uint32_t)1 << size) - 1;
    b08c:	1dfb      	adds	r3, r7, #7
    b08e:	781b      	ldrb	r3, [r3, #0]
    b090:	2201      	movs	r2, #1
    b092:	409a      	lsls	r2, r3
    b094:	0013      	movs	r3, r2
    b096:	1e5a      	subs	r2, r3, #1
    b098:	697b      	ldr	r3, [r7, #20]
    b09a:	4013      	ands	r3, r2
    b09c:	617b      	str	r3, [r7, #20]
	return value;
    b09e:	697b      	ldr	r3, [r7, #20]
}
    b0a0:	0018      	movs	r0, r3
    b0a2:	46bd      	mov	sp, r7
    b0a4:	b007      	add	sp, #28
    b0a6:	bd90      	pop	{r4, r7, pc}

0000b0a8 <mmc_spi_op_cond>:
 * - CMD58 reads OCR
 *
 * \return true if success, otherwise false
 */
static bool mmc_spi_op_cond(void)
{
    b0a8:	b580      	push	{r7, lr}
    b0aa:	b082      	sub	sp, #8
    b0ac:	af00      	add	r7, sp, #0
	/*
	 * Timeout 1s = 400KHz / ((6+1)*8) cylces = 7150 retry
	 * 6 = cmd byte size
	 * 1 = response byte size
	 */
	retry = 7150;
    b0ae:	4b23      	ldr	r3, [pc, #140]	; (b13c <mmc_spi_op_cond+0x94>)
    b0b0:	607b      	str	r3, [r7, #4]
	do {
		if (!driver_send_cmd(MMC_SPI_CMD1_SEND_OP_COND, 0)) {
    b0b2:	4b23      	ldr	r3, [pc, #140]	; (b140 <mmc_spi_op_cond+0x98>)
    b0b4:	2100      	movs	r1, #0
    b0b6:	0018      	movs	r0, r3
    b0b8:	4b22      	ldr	r3, [pc, #136]	; (b144 <mmc_spi_op_cond+0x9c>)
    b0ba:	4798      	blx	r3
    b0bc:	0003      	movs	r3, r0
    b0be:	001a      	movs	r2, r3
    b0c0:	2301      	movs	r3, #1
    b0c2:	4053      	eors	r3, r2
    b0c4:	b2db      	uxtb	r3, r3
    b0c6:	2b00      	cmp	r3, #0
    b0c8:	d001      	beq.n	b0ce <mmc_spi_op_cond+0x26>
			sd_mmc_debug("%s: CMD1 SPI Fail - Busy retry %d\n\r",
					__func__, (int)(7150 - retry));
			return false;
    b0ca:	2300      	movs	r3, #0
    b0cc:	e031      	b.n	b132 <mmc_spi_op_cond+0x8a>
		}
		// Check busy flag
		resp = driver_get_response();
    b0ce:	4b1e      	ldr	r3, [pc, #120]	; (b148 <mmc_spi_op_cond+0xa0>)
    b0d0:	4798      	blx	r3
    b0d2:	0003      	movs	r3, r0
    b0d4:	603b      	str	r3, [r7, #0]
		if (!(resp & R1_SPI_IDLE)) {
    b0d6:	683b      	ldr	r3, [r7, #0]
    b0d8:	2201      	movs	r2, #1
    b0da:	4013      	ands	r3, r2
    b0dc:	d006      	beq.n	b0ec <mmc_spi_op_cond+0x44>
			break;
		}
		if (retry-- == 0) {
    b0de:	687b      	ldr	r3, [r7, #4]
    b0e0:	1e5a      	subs	r2, r3, #1
    b0e2:	607a      	str	r2, [r7, #4]
    b0e4:	2b00      	cmp	r3, #0
    b0e6:	d1e4      	bne.n	b0b2 <mmc_spi_op_cond+0xa>
			sd_mmc_debug("%s: CMD1 Timeout on busy\n\r", __func__);
			return false;
    b0e8:	2300      	movs	r3, #0
    b0ea:	e022      	b.n	b132 <mmc_spi_op_cond+0x8a>
			break;
    b0ec:	46c0      	nop			; (mov r8, r8)
		}
	} while (1);

	// Read OCR for SPI mode
	if (!driver_send_cmd(SDMMC_SPI_CMD58_READ_OCR, 0)) {
    b0ee:	4b17      	ldr	r3, [pc, #92]	; (b14c <mmc_spi_op_cond+0xa4>)
    b0f0:	2100      	movs	r1, #0
    b0f2:	0018      	movs	r0, r3
    b0f4:	4b13      	ldr	r3, [pc, #76]	; (b144 <mmc_spi_op_cond+0x9c>)
    b0f6:	4798      	blx	r3
    b0f8:	0003      	movs	r3, r0
    b0fa:	001a      	movs	r2, r3
    b0fc:	2301      	movs	r3, #1
    b0fe:	4053      	eors	r3, r2
    b100:	b2db      	uxtb	r3, r3
    b102:	2b00      	cmp	r3, #0
    b104:	d001      	beq.n	b10a <mmc_spi_op_cond+0x62>
		sd_mmc_debug("%s: CMD58 Fail\n\r", __func__);
		return false;
    b106:	2300      	movs	r3, #0
    b108:	e013      	b.n	b132 <mmc_spi_op_cond+0x8a>
	}
	// Check OCR value
	if ((driver_get_response() & OCR_ACCESS_MODE_MASK)
    b10a:	4b0f      	ldr	r3, [pc, #60]	; (b148 <mmc_spi_op_cond+0xa0>)
    b10c:	4798      	blx	r3
    b10e:	0002      	movs	r2, r0
    b110:	23c0      	movs	r3, #192	; 0xc0
    b112:	05db      	lsls	r3, r3, #23
    b114:	401a      	ands	r2, r3
    b116:	2380      	movs	r3, #128	; 0x80
    b118:	05db      	lsls	r3, r3, #23
    b11a:	429a      	cmp	r2, r3
    b11c:	d108      	bne.n	b130 <mmc_spi_op_cond+0x88>
			== OCR_ACCESS_MODE_SECTOR) {
		sd_mmc_card->type |= CARD_TYPE_HC;
    b11e:	4b0c      	ldr	r3, [pc, #48]	; (b150 <mmc_spi_op_cond+0xa8>)
    b120:	681a      	ldr	r2, [r3, #0]
    b122:	4b0b      	ldr	r3, [pc, #44]	; (b150 <mmc_spi_op_cond+0xa8>)
    b124:	681b      	ldr	r3, [r3, #0]
    b126:	7adb      	ldrb	r3, [r3, #11]
    b128:	2108      	movs	r1, #8
    b12a:	430b      	orrs	r3, r1
    b12c:	b2db      	uxtb	r3, r3
    b12e:	72d3      	strb	r3, [r2, #11]
	}
	return true;
    b130:	2301      	movs	r3, #1
}
    b132:	0018      	movs	r0, r3
    b134:	46bd      	mov	sp, r7
    b136:	b002      	add	sp, #8
    b138:	bd80      	pop	{r7, pc}
    b13a:	46c0      	nop			; (mov r8, r8)
    b13c:	00001bee 	.word	0x00001bee
    b140:	00001101 	.word	0x00001101
    b144:	0000cb25 	.word	0x0000cb25
    b148:	0000cd65 	.word	0x0000cd65
    b14c:	0000053a 	.word	0x0000053a
    b150:	20003cc0 	.word	0x20003cc0

0000b154 <sd_spi_op_cond>:
 * \param v2   Shall be 1 if it is a SD card V2
 *
 * \return true if success, otherwise false
 */
static bool sd_spi_op_cond(uint8_t v2)
{
    b154:	b580      	push	{r7, lr}
    b156:	b086      	sub	sp, #24
    b158:	af00      	add	r7, sp, #0
    b15a:	0002      	movs	r2, r0
    b15c:	1dfb      	adds	r3, r7, #7
    b15e:	701a      	strb	r2, [r3, #0]
	/*
	 * Timeout 1s = 400KHz / ((6+1)*8) cylces = 7150 retry
	 * 6 = cmd byte size
	 * 1 = response byte size
	 */
	retry = 7150;
    b160:	4b2e      	ldr	r3, [pc, #184]	; (b21c <sd_spi_op_cond+0xc8>)
    b162:	613b      	str	r3, [r7, #16]
	do {
		// CMD55 - Indicate to the card that the next command is an
		// application specific command rather than a standard command.
		if (!driver_send_cmd(SDMMC_CMD55_APP_CMD, 0)) {
    b164:	4b2e      	ldr	r3, [pc, #184]	; (b220 <sd_spi_op_cond+0xcc>)
    b166:	2100      	movs	r1, #0
    b168:	0018      	movs	r0, r3
    b16a:	4b2e      	ldr	r3, [pc, #184]	; (b224 <sd_spi_op_cond+0xd0>)
    b16c:	4798      	blx	r3
    b16e:	0003      	movs	r3, r0
    b170:	001a      	movs	r2, r3
    b172:	2301      	movs	r3, #1
    b174:	4053      	eors	r3, r2
    b176:	b2db      	uxtb	r3, r3
    b178:	2b00      	cmp	r3, #0
    b17a:	d001      	beq.n	b180 <sd_spi_op_cond+0x2c>
			sd_mmc_debug("%s: CMD55 Fail\n\r", __func__);
			return false;
    b17c:	2300      	movs	r3, #0
    b17e:	e048      	b.n	b212 <sd_spi_op_cond+0xbe>
		}

		// (ACMD41) Sends host OCR register
		arg = 0;
    b180:	2300      	movs	r3, #0
    b182:	617b      	str	r3, [r7, #20]
		if (v2) {
    b184:	1dfb      	adds	r3, r7, #7
    b186:	781b      	ldrb	r3, [r3, #0]
    b188:	2b00      	cmp	r3, #0
    b18a:	d004      	beq.n	b196 <sd_spi_op_cond+0x42>
			arg |= SD_ACMD41_HCS;
    b18c:	697b      	ldr	r3, [r7, #20]
    b18e:	2280      	movs	r2, #128	; 0x80
    b190:	05d2      	lsls	r2, r2, #23
    b192:	4313      	orrs	r3, r2
    b194:	617b      	str	r3, [r7, #20]
		}
		// Check response
		if (!driver_send_cmd(SD_SPI_ACMD41_SD_SEND_OP_COND, arg)) {
    b196:	697b      	ldr	r3, [r7, #20]
    b198:	4a23      	ldr	r2, [pc, #140]	; (b228 <sd_spi_op_cond+0xd4>)
    b19a:	0019      	movs	r1, r3
    b19c:	0010      	movs	r0, r2
    b19e:	4b21      	ldr	r3, [pc, #132]	; (b224 <sd_spi_op_cond+0xd0>)
    b1a0:	4798      	blx	r3
    b1a2:	0003      	movs	r3, r0
    b1a4:	001a      	movs	r2, r3
    b1a6:	2301      	movs	r3, #1
    b1a8:	4053      	eors	r3, r2
    b1aa:	b2db      	uxtb	r3, r3
    b1ac:	2b00      	cmp	r3, #0
    b1ae:	d001      	beq.n	b1b4 <sd_spi_op_cond+0x60>
			sd_mmc_debug("%s: ACMD41 Fail\n\r", __func__);
			return false;
    b1b0:	2300      	movs	r3, #0
    b1b2:	e02e      	b.n	b212 <sd_spi_op_cond+0xbe>
		}
		resp = driver_get_response();
    b1b4:	4b1d      	ldr	r3, [pc, #116]	; (b22c <sd_spi_op_cond+0xd8>)
    b1b6:	4798      	blx	r3
    b1b8:	0003      	movs	r3, r0
    b1ba:	60fb      	str	r3, [r7, #12]
		if (!(resp & R1_SPI_IDLE)) {
    b1bc:	68fb      	ldr	r3, [r7, #12]
    b1be:	2201      	movs	r2, #1
    b1c0:	4013      	ands	r3, r2
    b1c2:	d006      	beq.n	b1d2 <sd_spi_op_cond+0x7e>
			// Card is ready
			break;
		}
		if (retry-- == 0) {
    b1c4:	693b      	ldr	r3, [r7, #16]
    b1c6:	1e5a      	subs	r2, r3, #1
    b1c8:	613a      	str	r2, [r7, #16]
    b1ca:	2b00      	cmp	r3, #0
    b1cc:	d1ca      	bne.n	b164 <sd_spi_op_cond+0x10>
			sd_mmc_debug("%s: ACMD41 Timeout on busy, resp32 0x%08x \n\r",
					__func__, resp);
			return false;
    b1ce:	2300      	movs	r3, #0
    b1d0:	e01f      	b.n	b212 <sd_spi_op_cond+0xbe>
			break;
    b1d2:	46c0      	nop			; (mov r8, r8)
		}
	} while (1);

	// Read OCR for SPI mode
	if (!driver_send_cmd(SDMMC_SPI_CMD58_READ_OCR, 0)) {
    b1d4:	4b16      	ldr	r3, [pc, #88]	; (b230 <sd_spi_op_cond+0xdc>)
    b1d6:	2100      	movs	r1, #0
    b1d8:	0018      	movs	r0, r3
    b1da:	4b12      	ldr	r3, [pc, #72]	; (b224 <sd_spi_op_cond+0xd0>)
    b1dc:	4798      	blx	r3
    b1de:	0003      	movs	r3, r0
    b1e0:	001a      	movs	r2, r3
    b1e2:	2301      	movs	r3, #1
    b1e4:	4053      	eors	r3, r2
    b1e6:	b2db      	uxtb	r3, r3
    b1e8:	2b00      	cmp	r3, #0
    b1ea:	d001      	beq.n	b1f0 <sd_spi_op_cond+0x9c>
		sd_mmc_debug("%s: CMD58 Fail\n\r", __func__);
		return false;
    b1ec:	2300      	movs	r3, #0
    b1ee:	e010      	b.n	b212 <sd_spi_op_cond+0xbe>
	}
	if ((driver_get_response() & OCR_CCS) != 0) {
    b1f0:	4b0e      	ldr	r3, [pc, #56]	; (b22c <sd_spi_op_cond+0xd8>)
    b1f2:	4798      	blx	r3
    b1f4:	0002      	movs	r2, r0
    b1f6:	2380      	movs	r3, #128	; 0x80
    b1f8:	05db      	lsls	r3, r3, #23
    b1fa:	4013      	ands	r3, r2
    b1fc:	d008      	beq.n	b210 <sd_spi_op_cond+0xbc>
		sd_mmc_card->type |= CARD_TYPE_HC;
    b1fe:	4b0d      	ldr	r3, [pc, #52]	; (b234 <sd_spi_op_cond+0xe0>)
    b200:	681a      	ldr	r2, [r3, #0]
    b202:	4b0c      	ldr	r3, [pc, #48]	; (b234 <sd_spi_op_cond+0xe0>)
    b204:	681b      	ldr	r3, [r3, #0]
    b206:	7adb      	ldrb	r3, [r3, #11]
    b208:	2108      	movs	r1, #8
    b20a:	430b      	orrs	r3, r1
    b20c:	b2db      	uxtb	r3, r3
    b20e:	72d3      	strb	r3, [r2, #11]
	}
	return true;
    b210:	2301      	movs	r3, #1
}
    b212:	0018      	movs	r0, r3
    b214:	46bd      	mov	sp, r7
    b216:	b006      	add	sp, #24
    b218:	bd80      	pop	{r7, pc}
    b21a:	46c0      	nop			; (mov r8, r8)
    b21c:	00001bee 	.word	0x00001bee
    b220:	00001137 	.word	0x00001137
    b224:	0000cb25 	.word	0x0000cb25
    b228:	00001129 	.word	0x00001129
    b22c:	0000cd65 	.word	0x0000cd65
    b230:	0000053a 	.word	0x0000053a
    b234:	20003cc0 	.word	0x20003cc0

0000b238 <sdio_op_cond>:
	return true;
}

#else
static bool sdio_op_cond(void)
{
    b238:	b580      	push	{r7, lr}
    b23a:	af00      	add	r7, sp, #0
	return true; // No error but card type not updated
    b23c:	2301      	movs	r3, #1
}
    b23e:	0018      	movs	r0, r3
    b240:	46bd      	mov	sp, r7
    b242:	bd80      	pop	{r7, pc}

0000b244 <sd_cmd8>:
 *
 * \return true if success, otherwise false
 *         with a update of \ref sd_mmc_err.
 */
static bool sd_cmd8(uint8_t * v2)
{
    b244:	b580      	push	{r7, lr}
    b246:	b084      	sub	sp, #16
    b248:	af00      	add	r7, sp, #0
    b24a:	6078      	str	r0, [r7, #4]
	uint32_t resp;

	*v2 = 0;
    b24c:	687b      	ldr	r3, [r7, #4]
    b24e:	2200      	movs	r2, #0
    b250:	701a      	strb	r2, [r3, #0]
	// Test for SD version 2
	if (!driver_send_cmd(SD_CMD8_SEND_IF_COND,
    b252:	23d5      	movs	r3, #213	; 0xd5
    b254:	005b      	lsls	r3, r3, #1
    b256:	4a14      	ldr	r2, [pc, #80]	; (b2a8 <sd_cmd8+0x64>)
    b258:	0019      	movs	r1, r3
    b25a:	0010      	movs	r0, r2
    b25c:	4b13      	ldr	r3, [pc, #76]	; (b2ac <sd_cmd8+0x68>)
    b25e:	4798      	blx	r3
    b260:	0003      	movs	r3, r0
    b262:	001a      	movs	r2, r3
    b264:	2301      	movs	r3, #1
    b266:	4053      	eors	r3, r2
    b268:	b2db      	uxtb	r3, r3
    b26a:	2b00      	cmp	r3, #0
    b26c:	d001      	beq.n	b272 <sd_cmd8+0x2e>
			SD_CMD8_PATTERN | SD_CMD8_HIGH_VOLTAGE)) {
		return true; // It is not a V2
    b26e:	2301      	movs	r3, #1
    b270:	e015      	b.n	b29e <sd_cmd8+0x5a>
	}
	// Check R7 response
	resp = driver_get_response();
    b272:	4b0f      	ldr	r3, [pc, #60]	; (b2b0 <sd_cmd8+0x6c>)
    b274:	4798      	blx	r3
    b276:	0003      	movs	r3, r0
    b278:	60fb      	str	r3, [r7, #12]
	if (resp == 0xFFFFFFFF) {
    b27a:	68fb      	ldr	r3, [r7, #12]
    b27c:	3301      	adds	r3, #1
    b27e:	d101      	bne.n	b284 <sd_cmd8+0x40>
		// No compliance R7 value
		return true; // It is not a V2
    b280:	2301      	movs	r3, #1
    b282:	e00c      	b.n	b29e <sd_cmd8+0x5a>
	}
	if ((resp & (SD_CMD8_MASK_PATTERN | SD_CMD8_MASK_VOLTAGE))
    b284:	68fb      	ldr	r3, [r7, #12]
    b286:	051b      	lsls	r3, r3, #20
    b288:	0d1a      	lsrs	r2, r3, #20
    b28a:	23d5      	movs	r3, #213	; 0xd5
    b28c:	005b      	lsls	r3, r3, #1
    b28e:	429a      	cmp	r2, r3
    b290:	d001      	beq.n	b296 <sd_cmd8+0x52>
				!= (SD_CMD8_PATTERN | SD_CMD8_HIGH_VOLTAGE)) {
		sd_mmc_debug("%s: CMD8 resp32 0x%08x UNUSABLE CARD\n\r",
				__func__, resp);
		return false;
    b292:	2300      	movs	r3, #0
    b294:	e003      	b.n	b29e <sd_cmd8+0x5a>
	}
	sd_mmc_debug("SD card V2\n\r");
	*v2 = 1;
    b296:	687b      	ldr	r3, [r7, #4]
    b298:	2201      	movs	r2, #1
    b29a:	701a      	strb	r2, [r3, #0]
	return true;
    b29c:	2301      	movs	r3, #1
}
    b29e:	0018      	movs	r0, r3
    b2a0:	46bd      	mov	sp, r7
    b2a2:	b004      	add	sp, #16
    b2a4:	bd80      	pop	{r7, pc}
    b2a6:	46c0      	nop			; (mov r8, r8)
    b2a8:	00005508 	.word	0x00005508
    b2ac:	0000cb25 	.word	0x0000cb25
    b2b0:	0000cd65 	.word	0x0000cd65

0000b2b4 <mmc_cmd8>:
 * support information
 *
 * \return true if success, otherwise false
 */
static bool mmc_cmd8(uint8_t *b_authorize_high_speed)
{
    b2b4:	b590      	push	{r4, r7, lr}
    b2b6:	b089      	sub	sp, #36	; 0x24
    b2b8:	af02      	add	r7, sp, #8
    b2ba:	6078      	str	r0, [r7, #4]
	uint16_t i;
	uint32_t ext_csd;
	uint32_t sec_count;

	if (!driver_adtc_start(MMC_CMD8_SEND_EXT_CSD, 0,
    b2bc:	2380      	movs	r3, #128	; 0x80
    b2be:	009a      	lsls	r2, r3, #2
    b2c0:	4841      	ldr	r0, [pc, #260]	; (b3c8 <mmc_cmd8+0x114>)
    b2c2:	2300      	movs	r3, #0
    b2c4:	9300      	str	r3, [sp, #0]
    b2c6:	2301      	movs	r3, #1
    b2c8:	2100      	movs	r1, #0
    b2ca:	4c40      	ldr	r4, [pc, #256]	; (b3cc <mmc_cmd8+0x118>)
    b2cc:	47a0      	blx	r4
    b2ce:	0003      	movs	r3, r0
    b2d0:	001a      	movs	r2, r3
    b2d2:	2301      	movs	r3, #1
    b2d4:	4053      	eors	r3, r2
    b2d6:	b2db      	uxtb	r3, r3
    b2d8:	2b00      	cmp	r3, #0
    b2da:	d001      	beq.n	b2e0 <mmc_cmd8+0x2c>
			EXT_CSD_BSIZE, 1, false)) {
		return false;
    b2dc:	2300      	movs	r3, #0
    b2de:	e06e      	b.n	b3be <mmc_cmd8+0x10a>
	//** Read and decode Extended Extended CSD
	// Note: The read access is done in byte to avoid a buffer
	// of EXT_CSD_BSIZE Byte in stack.

	// Read card type
	for (i = 0; i < (EXT_CSD_CARD_TYPE_INDEX + 4) / 4; i++) {
    b2e0:	2316      	movs	r3, #22
    b2e2:	18fb      	adds	r3, r7, r3
    b2e4:	2200      	movs	r2, #0
    b2e6:	801a      	strh	r2, [r3, #0]
    b2e8:	e014      	b.n	b314 <mmc_cmd8+0x60>
		if (!driver_read_word(&ext_csd)) {
    b2ea:	2310      	movs	r3, #16
    b2ec:	18fb      	adds	r3, r7, r3
    b2ee:	0018      	movs	r0, r3
    b2f0:	4b37      	ldr	r3, [pc, #220]	; (b3d0 <mmc_cmd8+0x11c>)
    b2f2:	4798      	blx	r3
    b2f4:	0003      	movs	r3, r0
    b2f6:	001a      	movs	r2, r3
    b2f8:	2301      	movs	r3, #1
    b2fa:	4053      	eors	r3, r2
    b2fc:	b2db      	uxtb	r3, r3
    b2fe:	2b00      	cmp	r3, #0
    b300:	d001      	beq.n	b306 <mmc_cmd8+0x52>
			return false;
    b302:	2300      	movs	r3, #0
    b304:	e05b      	b.n	b3be <mmc_cmd8+0x10a>
	for (i = 0; i < (EXT_CSD_CARD_TYPE_INDEX + 4) / 4; i++) {
    b306:	2316      	movs	r3, #22
    b308:	18fb      	adds	r3, r7, r3
    b30a:	881a      	ldrh	r2, [r3, #0]
    b30c:	2316      	movs	r3, #22
    b30e:	18fb      	adds	r3, r7, r3
    b310:	3201      	adds	r2, #1
    b312:	801a      	strh	r2, [r3, #0]
    b314:	2316      	movs	r3, #22
    b316:	18fb      	adds	r3, r7, r3
    b318:	881b      	ldrh	r3, [r3, #0]
    b31a:	2b31      	cmp	r3, #49	; 0x31
    b31c:	d9e5      	bls.n	b2ea <mmc_cmd8+0x36>
		}
	}
	*b_authorize_high_speed = (ext_csd >> ((EXT_CSD_CARD_TYPE_INDEX % 4) * 8))
			& MMC_CTYPE_52MHZ;
    b31e:	693b      	ldr	r3, [r7, #16]
    b320:	b2db      	uxtb	r3, r3
    b322:	2202      	movs	r2, #2
    b324:	4013      	ands	r3, r2
    b326:	b2da      	uxtb	r2, r3
	*b_authorize_high_speed = (ext_csd >> ((EXT_CSD_CARD_TYPE_INDEX % 4) * 8))
    b328:	687b      	ldr	r3, [r7, #4]
    b32a:	701a      	strb	r2, [r3, #0]

	if (MMC_CSD_C_SIZE(sd_mmc_card->csd) == 0xFFF) {
    b32c:	4b29      	ldr	r3, [pc, #164]	; (b3d4 <mmc_cmd8+0x120>)
    b32e:	681b      	ldr	r3, [r3, #0]
    b330:	330e      	adds	r3, #14
    b332:	0018      	movs	r0, r3
    b334:	230c      	movs	r3, #12
    b336:	223e      	movs	r2, #62	; 0x3e
    b338:	2180      	movs	r1, #128	; 0x80
    b33a:	4c27      	ldr	r4, [pc, #156]	; (b3d8 <mmc_cmd8+0x124>)
    b33c:	47a0      	blx	r4
    b33e:	0002      	movs	r2, r0
    b340:	4b26      	ldr	r3, [pc, #152]	; (b3dc <mmc_cmd8+0x128>)
    b342:	429a      	cmp	r2, r3
    b344:	d135      	bne.n	b3b2 <mmc_cmd8+0xfe>
		// For high capacity SD/MMC card,
		// memory capacity = SEC_COUNT * 512 byte
		for (; i <(EXT_CSD_SEC_COUNT_INDEX + 4) / 4; i++) {
    b346:	e014      	b.n	b372 <mmc_cmd8+0xbe>
			if (!driver_read_word(&sec_count)) {
    b348:	230c      	movs	r3, #12
    b34a:	18fb      	adds	r3, r7, r3
    b34c:	0018      	movs	r0, r3
    b34e:	4b20      	ldr	r3, [pc, #128]	; (b3d0 <mmc_cmd8+0x11c>)
    b350:	4798      	blx	r3
    b352:	0003      	movs	r3, r0
    b354:	001a      	movs	r2, r3
    b356:	2301      	movs	r3, #1
    b358:	4053      	eors	r3, r2
    b35a:	b2db      	uxtb	r3, r3
    b35c:	2b00      	cmp	r3, #0
    b35e:	d001      	beq.n	b364 <mmc_cmd8+0xb0>
				return false;
    b360:	2300      	movs	r3, #0
    b362:	e02c      	b.n	b3be <mmc_cmd8+0x10a>
		for (; i <(EXT_CSD_SEC_COUNT_INDEX + 4) / 4; i++) {
    b364:	2316      	movs	r3, #22
    b366:	18fb      	adds	r3, r7, r3
    b368:	881a      	ldrh	r2, [r3, #0]
    b36a:	2316      	movs	r3, #22
    b36c:	18fb      	adds	r3, r7, r3
    b36e:	3201      	adds	r2, #1
    b370:	801a      	strh	r2, [r3, #0]
    b372:	2316      	movs	r3, #22
    b374:	18fb      	adds	r3, r7, r3
    b376:	881b      	ldrh	r3, [r3, #0]
    b378:	2b35      	cmp	r3, #53	; 0x35
    b37a:	d9e5      	bls.n	b348 <mmc_cmd8+0x94>
			}
		}
		sd_mmc_card->capacity = sec_count / 2;
    b37c:	4b15      	ldr	r3, [pc, #84]	; (b3d4 <mmc_cmd8+0x120>)
    b37e:	681b      	ldr	r3, [r3, #0]
    b380:	68fa      	ldr	r2, [r7, #12]
    b382:	0852      	lsrs	r2, r2, #1
    b384:	605a      	str	r2, [r3, #4]
	}
	for (; i < EXT_CSD_BSIZE / 4; i++) {
    b386:	e014      	b.n	b3b2 <mmc_cmd8+0xfe>
		if (!driver_read_word(&sec_count)) {
    b388:	230c      	movs	r3, #12
    b38a:	18fb      	adds	r3, r7, r3
    b38c:	0018      	movs	r0, r3
    b38e:	4b10      	ldr	r3, [pc, #64]	; (b3d0 <mmc_cmd8+0x11c>)
    b390:	4798      	blx	r3
    b392:	0003      	movs	r3, r0
    b394:	001a      	movs	r2, r3
    b396:	2301      	movs	r3, #1
    b398:	4053      	eors	r3, r2
    b39a:	b2db      	uxtb	r3, r3
    b39c:	2b00      	cmp	r3, #0
    b39e:	d001      	beq.n	b3a4 <mmc_cmd8+0xf0>
			return false;
    b3a0:	2300      	movs	r3, #0
    b3a2:	e00c      	b.n	b3be <mmc_cmd8+0x10a>
	for (; i < EXT_CSD_BSIZE / 4; i++) {
    b3a4:	2316      	movs	r3, #22
    b3a6:	18fb      	adds	r3, r7, r3
    b3a8:	881a      	ldrh	r2, [r3, #0]
    b3aa:	2316      	movs	r3, #22
    b3ac:	18fb      	adds	r3, r7, r3
    b3ae:	3201      	adds	r2, #1
    b3b0:	801a      	strh	r2, [r3, #0]
    b3b2:	2316      	movs	r3, #22
    b3b4:	18fb      	adds	r3, r7, r3
    b3b6:	881b      	ldrh	r3, [r3, #0]
    b3b8:	2b7f      	cmp	r3, #127	; 0x7f
    b3ba:	d9e5      	bls.n	b388 <mmc_cmd8+0xd4>
		}
	}
	return true;
    b3bc:	2301      	movs	r3, #1
}
    b3be:	0018      	movs	r0, r3
    b3c0:	46bd      	mov	sp, r7
    b3c2:	b007      	add	sp, #28
    b3c4:	bd90      	pop	{r4, r7, pc}
    b3c6:	46c0      	nop			; (mov r8, r8)
    b3c8:	00081108 	.word	0x00081108
    b3cc:	0000cb4d 	.word	0x0000cb4d
    b3d0:	0000cd79 	.word	0x0000cd79
    b3d4:	20003cc0 	.word	0x20003cc0
    b3d8:	0000af4d 	.word	0x0000af4d
    b3dc:	00000fff 	.word	0x00000fff

0000b3e0 <sd_mmc_cmd9_spi>:
 * data (CSD) on the CMD line spi.
 *
 * \return true if success, otherwise false
 */
static bool sd_mmc_cmd9_spi(void)
{
    b3e0:	b590      	push	{r4, r7, lr}
    b3e2:	b083      	sub	sp, #12
    b3e4:	af02      	add	r7, sp, #8
	if (!driver_adtc_start(SDMMC_SPI_CMD9_SEND_CSD, (uint32_t)sd_mmc_card->rca << 16,
    b3e6:	4b15      	ldr	r3, [pc, #84]	; (b43c <sd_mmc_cmd9_spi+0x5c>)
    b3e8:	681b      	ldr	r3, [r3, #0]
    b3ea:	891b      	ldrh	r3, [r3, #8]
    b3ec:	0419      	lsls	r1, r3, #16
    b3ee:	4814      	ldr	r0, [pc, #80]	; (b440 <sd_mmc_cmd9_spi+0x60>)
    b3f0:	2301      	movs	r3, #1
    b3f2:	9300      	str	r3, [sp, #0]
    b3f4:	2301      	movs	r3, #1
    b3f6:	2210      	movs	r2, #16
    b3f8:	4c12      	ldr	r4, [pc, #72]	; (b444 <sd_mmc_cmd9_spi+0x64>)
    b3fa:	47a0      	blx	r4
    b3fc:	0003      	movs	r3, r0
    b3fe:	001a      	movs	r2, r3
    b400:	2301      	movs	r3, #1
    b402:	4053      	eors	r3, r2
    b404:	b2db      	uxtb	r3, r3
    b406:	2b00      	cmp	r3, #0
    b408:	d001      	beq.n	b40e <sd_mmc_cmd9_spi+0x2e>
			CSD_REG_BSIZE, 1, true)) {
		return false;
    b40a:	2300      	movs	r3, #0
    b40c:	e012      	b.n	b434 <sd_mmc_cmd9_spi+0x54>
	}
	if (!driver_start_read_blocks(sd_mmc_card->csd, 1)) {
    b40e:	4b0b      	ldr	r3, [pc, #44]	; (b43c <sd_mmc_cmd9_spi+0x5c>)
    b410:	681b      	ldr	r3, [r3, #0]
    b412:	330e      	adds	r3, #14
    b414:	2101      	movs	r1, #1
    b416:	0018      	movs	r0, r3
    b418:	4b0b      	ldr	r3, [pc, #44]	; (b448 <sd_mmc_cmd9_spi+0x68>)
    b41a:	4798      	blx	r3
    b41c:	0003      	movs	r3, r0
    b41e:	001a      	movs	r2, r3
    b420:	2301      	movs	r3, #1
    b422:	4053      	eors	r3, r2
    b424:	b2db      	uxtb	r3, r3
    b426:	2b00      	cmp	r3, #0
    b428:	d001      	beq.n	b42e <sd_mmc_cmd9_spi+0x4e>
		return false;
    b42a:	2300      	movs	r3, #0
    b42c:	e002      	b.n	b434 <sd_mmc_cmd9_spi+0x54>
	}
	return driver_wait_end_of_read_blocks();
    b42e:	4b07      	ldr	r3, [pc, #28]	; (b44c <sd_mmc_cmd9_spi+0x6c>)
    b430:	4798      	blx	r3
    b432:	0003      	movs	r3, r0
}
    b434:	0018      	movs	r0, r3
    b436:	46bd      	mov	sp, r7
    b438:	b001      	add	sp, #4
    b43a:	bd90      	pop	{r4, r7, pc}
    b43c:	20003cc0 	.word	0x20003cc0
    b440:	00081109 	.word	0x00081109
    b444:	0000cb4d 	.word	0x0000cb4d
    b448:	0000ce1d 	.word	0x0000ce1d
    b44c:	0000cec1 	.word	0x0000cec1

0000b450 <mmc_decode_csd>:

/**
 * \brief Decodes MMC CSD register
 */
static void mmc_decode_csd(void)
{
    b450:	b5b0      	push	{r4, r5, r7, lr}
    b452:	b084      	sub	sp, #16
    b454:	af00      	add	r7, sp, #0
 	uint32_t unit;
	uint32_t mul;
	uint32_t tran_speed;

	// Get MMC System Specification version supported by the card
	switch (MMC_CSD_SPEC_VERS(sd_mmc_card->csd)) {
    b456:	4b45      	ldr	r3, [pc, #276]	; (b56c <mmc_decode_csd+0x11c>)
    b458:	681b      	ldr	r3, [r3, #0]
    b45a:	330e      	adds	r3, #14
    b45c:	0018      	movs	r0, r3
    b45e:	2304      	movs	r3, #4
    b460:	227a      	movs	r2, #122	; 0x7a
    b462:	2180      	movs	r1, #128	; 0x80
    b464:	4c42      	ldr	r4, [pc, #264]	; (b570 <mmc_decode_csd+0x120>)
    b466:	47a0      	blx	r4
    b468:	0003      	movs	r3, r0
    b46a:	2b02      	cmp	r3, #2
    b46c:	d011      	beq.n	b492 <mmc_decode_csd+0x42>
    b46e:	d802      	bhi.n	b476 <mmc_decode_csd+0x26>
    b470:	2b01      	cmp	r3, #1
    b472:	d009      	beq.n	b488 <mmc_decode_csd+0x38>
    b474:	e003      	b.n	b47e <mmc_decode_csd+0x2e>
    b476:	2b03      	cmp	r3, #3
    b478:	d010      	beq.n	b49c <mmc_decode_csd+0x4c>
    b47a:	2b04      	cmp	r3, #4
    b47c:	d013      	beq.n	b4a6 <mmc_decode_csd+0x56>
	default:
	case 0:
		sd_mmc_card->version = CARD_VER_MMC_1_2;
    b47e:	4b3b      	ldr	r3, [pc, #236]	; (b56c <mmc_decode_csd+0x11c>)
    b480:	681b      	ldr	r3, [r3, #0]
    b482:	2212      	movs	r2, #18
    b484:	731a      	strb	r2, [r3, #12]
		break;
    b486:	e013      	b.n	b4b0 <mmc_decode_csd+0x60>

	case 1:
		sd_mmc_card->version = CARD_VER_MMC_1_4;
    b488:	4b38      	ldr	r3, [pc, #224]	; (b56c <mmc_decode_csd+0x11c>)
    b48a:	681b      	ldr	r3, [r3, #0]
    b48c:	2214      	movs	r2, #20
    b48e:	731a      	strb	r2, [r3, #12]
		break;
    b490:	e00e      	b.n	b4b0 <mmc_decode_csd+0x60>

	case 2:
		sd_mmc_card->version = CARD_VER_MMC_2_2;
    b492:	4b36      	ldr	r3, [pc, #216]	; (b56c <mmc_decode_csd+0x11c>)
    b494:	681b      	ldr	r3, [r3, #0]
    b496:	2222      	movs	r2, #34	; 0x22
    b498:	731a      	strb	r2, [r3, #12]
		break;
    b49a:	e009      	b.n	b4b0 <mmc_decode_csd+0x60>

	case 3:
		sd_mmc_card->version = CARD_VER_MMC_3;
    b49c:	4b33      	ldr	r3, [pc, #204]	; (b56c <mmc_decode_csd+0x11c>)
    b49e:	681b      	ldr	r3, [r3, #0]
    b4a0:	2230      	movs	r2, #48	; 0x30
    b4a2:	731a      	strb	r2, [r3, #12]
		break;
    b4a4:	e004      	b.n	b4b0 <mmc_decode_csd+0x60>

	case 4:
		sd_mmc_card->version = CARD_VER_MMC_4;
    b4a6:	4b31      	ldr	r3, [pc, #196]	; (b56c <mmc_decode_csd+0x11c>)
    b4a8:	681b      	ldr	r3, [r3, #0]
    b4aa:	2240      	movs	r2, #64	; 0x40
    b4ac:	731a      	strb	r2, [r3, #12]
		break;
    b4ae:	46c0      	nop			; (mov r8, r8)
	}

	// Get MMC memory max transfer speed in Hz.
	tran_speed = CSD_TRAN_SPEED(sd_mmc_card->csd);
    b4b0:	4b2e      	ldr	r3, [pc, #184]	; (b56c <mmc_decode_csd+0x11c>)
    b4b2:	681b      	ldr	r3, [r3, #0]
    b4b4:	330e      	adds	r3, #14
    b4b6:	0018      	movs	r0, r3
    b4b8:	2308      	movs	r3, #8
    b4ba:	2260      	movs	r2, #96	; 0x60
    b4bc:	2180      	movs	r1, #128	; 0x80
    b4be:	4c2c      	ldr	r4, [pc, #176]	; (b570 <mmc_decode_csd+0x120>)
    b4c0:	47a0      	blx	r4
    b4c2:	0003      	movs	r3, r0
    b4c4:	60fb      	str	r3, [r7, #12]
	unit = sd_mmc_trans_units[tran_speed & 0x7];
    b4c6:	68fb      	ldr	r3, [r7, #12]
    b4c8:	2207      	movs	r2, #7
    b4ca:	401a      	ands	r2, r3
    b4cc:	4b29      	ldr	r3, [pc, #164]	; (b574 <mmc_decode_csd+0x124>)
    b4ce:	0092      	lsls	r2, r2, #2
    b4d0:	58d3      	ldr	r3, [r2, r3]
    b4d2:	60bb      	str	r3, [r7, #8]
	mul = mmc_trans_multipliers[(tran_speed >> 3) & 0xF];
    b4d4:	68fb      	ldr	r3, [r7, #12]
    b4d6:	08db      	lsrs	r3, r3, #3
    b4d8:	220f      	movs	r2, #15
    b4da:	401a      	ands	r2, r3
    b4dc:	4b26      	ldr	r3, [pc, #152]	; (b578 <mmc_decode_csd+0x128>)
    b4de:	0092      	lsls	r2, r2, #2
    b4e0:	58d3      	ldr	r3, [r2, r3]
    b4e2:	607b      	str	r3, [r7, #4]
	sd_mmc_card->clock = unit * mul * 1000;
    b4e4:	4b21      	ldr	r3, [pc, #132]	; (b56c <mmc_decode_csd+0x11c>)
    b4e6:	681b      	ldr	r3, [r3, #0]
    b4e8:	68ba      	ldr	r2, [r7, #8]
    b4ea:	6879      	ldr	r1, [r7, #4]
    b4ec:	434a      	muls	r2, r1
    b4ee:	21fa      	movs	r1, #250	; 0xfa
    b4f0:	0089      	lsls	r1, r1, #2
    b4f2:	434a      	muls	r2, r1
    b4f4:	601a      	str	r2, [r3, #0]
	 * BLOCK_LEN = 2 ^ READ_BL_LEN      (READ_BL_LEN < 12)
	 * ----------------------------------------------------
	 * For high capacity SD/MMC card:
	 * memory capacity = SEC_COUNT * 512 byte
	 */
	if (MMC_CSD_C_SIZE(sd_mmc_card->csd) != 0xFFF) {
    b4f6:	4b1d      	ldr	r3, [pc, #116]	; (b56c <mmc_decode_csd+0x11c>)
    b4f8:	681b      	ldr	r3, [r3, #0]
    b4fa:	330e      	adds	r3, #14
    b4fc:	0018      	movs	r0, r3
    b4fe:	230c      	movs	r3, #12
    b500:	223e      	movs	r2, #62	; 0x3e
    b502:	2180      	movs	r1, #128	; 0x80
    b504:	4c1a      	ldr	r4, [pc, #104]	; (b570 <mmc_decode_csd+0x120>)
    b506:	47a0      	blx	r4
    b508:	0002      	movs	r2, r0
    b50a:	4b1c      	ldr	r3, [pc, #112]	; (b57c <mmc_decode_csd+0x12c>)
    b50c:	429a      	cmp	r2, r3
    b50e:	d028      	beq.n	b562 <mmc_decode_csd+0x112>
		uint32_t blocknr = ((MMC_CSD_C_SIZE(sd_mmc_card->csd) + 1) *
    b510:	4b16      	ldr	r3, [pc, #88]	; (b56c <mmc_decode_csd+0x11c>)
    b512:	681b      	ldr	r3, [r3, #0]
    b514:	330e      	adds	r3, #14
    b516:	0018      	movs	r0, r3
    b518:	230c      	movs	r3, #12
    b51a:	223e      	movs	r2, #62	; 0x3e
    b51c:	2180      	movs	r1, #128	; 0x80
    b51e:	4c14      	ldr	r4, [pc, #80]	; (b570 <mmc_decode_csd+0x120>)
    b520:	47a0      	blx	r4
    b522:	0003      	movs	r3, r0
    b524:	1c5c      	adds	r4, r3, #1
			(1 << (MMC_CSD_C_SIZE_MULT(sd_mmc_card->csd) + 2)));
    b526:	4b11      	ldr	r3, [pc, #68]	; (b56c <mmc_decode_csd+0x11c>)
    b528:	681b      	ldr	r3, [r3, #0]
    b52a:	330e      	adds	r3, #14
    b52c:	0018      	movs	r0, r3
    b52e:	2303      	movs	r3, #3
    b530:	222f      	movs	r2, #47	; 0x2f
    b532:	2180      	movs	r1, #128	; 0x80
    b534:	4d0e      	ldr	r5, [pc, #56]	; (b570 <mmc_decode_csd+0x120>)
    b536:	47a8      	blx	r5
    b538:	0003      	movs	r3, r0
    b53a:	3302      	adds	r3, #2
		uint32_t blocknr = ((MMC_CSD_C_SIZE(sd_mmc_card->csd) + 1) *
    b53c:	409c      	lsls	r4, r3
    b53e:	0023      	movs	r3, r4
    b540:	603b      	str	r3, [r7, #0]
		sd_mmc_card->capacity = blocknr *
    b542:	4b0a      	ldr	r3, [pc, #40]	; (b56c <mmc_decode_csd+0x11c>)
    b544:	681c      	ldr	r4, [r3, #0]
			(1 << MMC_CSD_READ_BL_LEN(sd_mmc_card->csd)) / 1024;
    b546:	4b09      	ldr	r3, [pc, #36]	; (b56c <mmc_decode_csd+0x11c>)
    b548:	681b      	ldr	r3, [r3, #0]
    b54a:	330e      	adds	r3, #14
    b54c:	0018      	movs	r0, r3
    b54e:	2304      	movs	r3, #4
    b550:	2250      	movs	r2, #80	; 0x50
    b552:	2180      	movs	r1, #128	; 0x80
    b554:	4d06      	ldr	r5, [pc, #24]	; (b570 <mmc_decode_csd+0x120>)
    b556:	47a8      	blx	r5
    b558:	0002      	movs	r2, r0
		sd_mmc_card->capacity = blocknr *
    b55a:	683b      	ldr	r3, [r7, #0]
    b55c:	4093      	lsls	r3, r2
			(1 << MMC_CSD_READ_BL_LEN(sd_mmc_card->csd)) / 1024;
    b55e:	0a9b      	lsrs	r3, r3, #10
		sd_mmc_card->capacity = blocknr *
    b560:	6063      	str	r3, [r4, #4]
	}
}
    b562:	46c0      	nop			; (mov r8, r8)
    b564:	46bd      	mov	sp, r7
    b566:	b004      	add	sp, #16
    b568:	bdb0      	pop	{r4, r5, r7, pc}
    b56a:	46c0      	nop			; (mov r8, r8)
    b56c:	20003cc0 	.word	0x20003cc0
    b570:	0000af4d 	.word	0x0000af4d
    b574:	00024dac 	.word	0x00024dac
    b578:	00024e08 	.word	0x00024e08
    b57c:	00000fff 	.word	0x00000fff

0000b580 <sd_decode_csd>:

/**
 * \brief Decodes SD CSD register
 */
static void sd_decode_csd(void)
{
    b580:	b5b0      	push	{r4, r5, r7, lr}
    b582:	b084      	sub	sp, #16
    b584:	af00      	add	r7, sp, #0
 	uint32_t unit;
	uint32_t mul;
	uint32_t tran_speed;

	// Get SD memory maximum transfer speed in Hz.
	tran_speed = CSD_TRAN_SPEED(sd_mmc_card->csd);
    b586:	4b35      	ldr	r3, [pc, #212]	; (b65c <sd_decode_csd+0xdc>)
    b588:	681b      	ldr	r3, [r3, #0]
    b58a:	330e      	adds	r3, #14
    b58c:	0018      	movs	r0, r3
    b58e:	2308      	movs	r3, #8
    b590:	2260      	movs	r2, #96	; 0x60
    b592:	2180      	movs	r1, #128	; 0x80
    b594:	4c32      	ldr	r4, [pc, #200]	; (b660 <sd_decode_csd+0xe0>)
    b596:	47a0      	blx	r4
    b598:	0003      	movs	r3, r0
    b59a:	60fb      	str	r3, [r7, #12]
	unit = sd_mmc_trans_units[tran_speed & 0x7];
    b59c:	68fb      	ldr	r3, [r7, #12]
    b59e:	2207      	movs	r2, #7
    b5a0:	401a      	ands	r2, r3
    b5a2:	4b30      	ldr	r3, [pc, #192]	; (b664 <sd_decode_csd+0xe4>)
    b5a4:	0092      	lsls	r2, r2, #2
    b5a6:	58d3      	ldr	r3, [r2, r3]
    b5a8:	60bb      	str	r3, [r7, #8]
	mul = sd_trans_multipliers[(tran_speed >> 3) & 0xF];
    b5aa:	68fb      	ldr	r3, [r7, #12]
    b5ac:	08db      	lsrs	r3, r3, #3
    b5ae:	220f      	movs	r2, #15
    b5b0:	401a      	ands	r2, r3
    b5b2:	4b2d      	ldr	r3, [pc, #180]	; (b668 <sd_decode_csd+0xe8>)
    b5b4:	0092      	lsls	r2, r2, #2
    b5b6:	58d3      	ldr	r3, [r2, r3]
    b5b8:	607b      	str	r3, [r7, #4]
	sd_mmc_card->clock = unit * mul * 1000;
    b5ba:	4b28      	ldr	r3, [pc, #160]	; (b65c <sd_decode_csd+0xdc>)
    b5bc:	681b      	ldr	r3, [r3, #0]
    b5be:	68ba      	ldr	r2, [r7, #8]
    b5c0:	6879      	ldr	r1, [r7, #4]
    b5c2:	434a      	muls	r2, r1
    b5c4:	21fa      	movs	r1, #250	; 0xfa
    b5c6:	0089      	lsls	r1, r1, #2
    b5c8:	434a      	muls	r2, r1
    b5ca:	601a      	str	r2, [r3, #0]
	 * BLOCK_LEN = 2 ^ READ_BL_LEN      (READ_BL_LEN < 12)
	 * ----------------------------------------------------
	 * For high capacity SD card:
	 * memory capacity = (C_SIZE+1) * 512K byte
	 */
	if (CSD_STRUCTURE_VERSION(sd_mmc_card->csd) >= SD_CSD_VER_2_0) {
    b5cc:	4b23      	ldr	r3, [pc, #140]	; (b65c <sd_decode_csd+0xdc>)
    b5ce:	681b      	ldr	r3, [r3, #0]
    b5d0:	330e      	adds	r3, #14
    b5d2:	0018      	movs	r0, r3
    b5d4:	2302      	movs	r3, #2
    b5d6:	227e      	movs	r2, #126	; 0x7e
    b5d8:	2180      	movs	r1, #128	; 0x80
    b5da:	4c21      	ldr	r4, [pc, #132]	; (b660 <sd_decode_csd+0xe0>)
    b5dc:	47a0      	blx	r4
    b5de:	1e03      	subs	r3, r0, #0
    b5e0:	d00f      	beq.n	b602 <sd_decode_csd+0x82>
		sd_mmc_card->capacity =
    b5e2:	4b1e      	ldr	r3, [pc, #120]	; (b65c <sd_decode_csd+0xdc>)
    b5e4:	681c      	ldr	r4, [r3, #0]
				(SD_CSD_2_0_C_SIZE(sd_mmc_card->csd) + 1)
    b5e6:	4b1d      	ldr	r3, [pc, #116]	; (b65c <sd_decode_csd+0xdc>)
    b5e8:	681b      	ldr	r3, [r3, #0]
    b5ea:	330e      	adds	r3, #14
    b5ec:	0018      	movs	r0, r3
    b5ee:	2316      	movs	r3, #22
    b5f0:	2230      	movs	r2, #48	; 0x30
    b5f2:	2180      	movs	r1, #128	; 0x80
    b5f4:	4d1a      	ldr	r5, [pc, #104]	; (b660 <sd_decode_csd+0xe0>)
    b5f6:	47a8      	blx	r5
    b5f8:	0003      	movs	r3, r0
				* 512;
    b5fa:	3301      	adds	r3, #1
    b5fc:	025b      	lsls	r3, r3, #9
		sd_mmc_card->capacity =
    b5fe:	6063      	str	r3, [r4, #4]
				(1 << (SD_CSD_1_0_C_SIZE_MULT(sd_mmc_card->csd) + 2)));
		sd_mmc_card->capacity = blocknr *
				(1 << SD_CSD_1_0_READ_BL_LEN(sd_mmc_card->csd))
				/ 1024;
	}
}
    b600:	e028      	b.n	b654 <sd_decode_csd+0xd4>
		uint32_t blocknr = ((SD_CSD_1_0_C_SIZE(sd_mmc_card->csd) + 1) *
    b602:	4b16      	ldr	r3, [pc, #88]	; (b65c <sd_decode_csd+0xdc>)
    b604:	681b      	ldr	r3, [r3, #0]
    b606:	330e      	adds	r3, #14
    b608:	0018      	movs	r0, r3
    b60a:	230c      	movs	r3, #12
    b60c:	223e      	movs	r2, #62	; 0x3e
    b60e:	2180      	movs	r1, #128	; 0x80
    b610:	4c13      	ldr	r4, [pc, #76]	; (b660 <sd_decode_csd+0xe0>)
    b612:	47a0      	blx	r4
    b614:	0003      	movs	r3, r0
    b616:	1c5c      	adds	r4, r3, #1
				(1 << (SD_CSD_1_0_C_SIZE_MULT(sd_mmc_card->csd) + 2)));
    b618:	4b10      	ldr	r3, [pc, #64]	; (b65c <sd_decode_csd+0xdc>)
    b61a:	681b      	ldr	r3, [r3, #0]
    b61c:	330e      	adds	r3, #14
    b61e:	0018      	movs	r0, r3
    b620:	2303      	movs	r3, #3
    b622:	222f      	movs	r2, #47	; 0x2f
    b624:	2180      	movs	r1, #128	; 0x80
    b626:	4d0e      	ldr	r5, [pc, #56]	; (b660 <sd_decode_csd+0xe0>)
    b628:	47a8      	blx	r5
    b62a:	0003      	movs	r3, r0
    b62c:	3302      	adds	r3, #2
		uint32_t blocknr = ((SD_CSD_1_0_C_SIZE(sd_mmc_card->csd) + 1) *
    b62e:	409c      	lsls	r4, r3
    b630:	0023      	movs	r3, r4
    b632:	603b      	str	r3, [r7, #0]
		sd_mmc_card->capacity = blocknr *
    b634:	4b09      	ldr	r3, [pc, #36]	; (b65c <sd_decode_csd+0xdc>)
    b636:	681c      	ldr	r4, [r3, #0]
				(1 << SD_CSD_1_0_READ_BL_LEN(sd_mmc_card->csd))
    b638:	4b08      	ldr	r3, [pc, #32]	; (b65c <sd_decode_csd+0xdc>)
    b63a:	681b      	ldr	r3, [r3, #0]
    b63c:	330e      	adds	r3, #14
    b63e:	0018      	movs	r0, r3
    b640:	2304      	movs	r3, #4
    b642:	2250      	movs	r2, #80	; 0x50
    b644:	2180      	movs	r1, #128	; 0x80
    b646:	4d06      	ldr	r5, [pc, #24]	; (b660 <sd_decode_csd+0xe0>)
    b648:	47a8      	blx	r5
    b64a:	0002      	movs	r2, r0
		sd_mmc_card->capacity = blocknr *
    b64c:	683b      	ldr	r3, [r7, #0]
    b64e:	4093      	lsls	r3, r2
				/ 1024;
    b650:	0a9b      	lsrs	r3, r3, #10
		sd_mmc_card->capacity = blocknr *
    b652:	6063      	str	r3, [r4, #4]
}
    b654:	46c0      	nop			; (mov r8, r8)
    b656:	46bd      	mov	sp, r7
    b658:	b004      	add	sp, #16
    b65a:	bdb0      	pop	{r4, r5, r7, pc}
    b65c:	20003cc0 	.word	0x20003cc0
    b660:	0000af4d 	.word	0x0000af4d
    b664:	00024dac 	.word	0x00024dac
    b668:	00024dc8 	.word	0x00024dc8

0000b66c <sd_mmc_cmd13>:
 * This function waits the clear of the busy flag
 *
 * \return true if success, otherwise false
 */
static bool sd_mmc_cmd13(void)
{
    b66c:	b580      	push	{r7, lr}
    b66e:	b082      	sub	sp, #8
    b670:	af00      	add	r7, sp, #0
	/* Wait for data ready status.
	 * Nec timing: 0 to unlimited
	 * However a timeout is used.
	 * 200 000 * 8 cycles
	 */
	nec_timeout = 200000;
    b672:	4b11      	ldr	r3, [pc, #68]	; (b6b8 <sd_mmc_cmd13+0x4c>)
    b674:	607b      	str	r3, [r7, #4]
	do {
		if (sd_mmc_is_spi()) {
			if (!driver_send_cmd(SDMMC_SPI_CMD13_SEND_STATUS, 0)) {
    b676:	4b11      	ldr	r3, [pc, #68]	; (b6bc <sd_mmc_cmd13+0x50>)
    b678:	2100      	movs	r1, #0
    b67a:	0018      	movs	r0, r3
    b67c:	4b10      	ldr	r3, [pc, #64]	; (b6c0 <sd_mmc_cmd13+0x54>)
    b67e:	4798      	blx	r3
    b680:	0003      	movs	r3, r0
    b682:	001a      	movs	r2, r3
    b684:	2301      	movs	r3, #1
    b686:	4053      	eors	r3, r2
    b688:	b2db      	uxtb	r3, r3
    b68a:	2b00      	cmp	r3, #0
    b68c:	d001      	beq.n	b692 <sd_mmc_cmd13+0x26>
				return false;
    b68e:	2300      	movs	r3, #0
    b690:	e00e      	b.n	b6b0 <sd_mmc_cmd13+0x44>
			}
			// Check busy flag
			if (!(driver_get_response() & 0xFF)) {
    b692:	4b0c      	ldr	r3, [pc, #48]	; (b6c4 <sd_mmc_cmd13+0x58>)
    b694:	4798      	blx	r3
    b696:	0002      	movs	r2, r0
    b698:	23ff      	movs	r3, #255	; 0xff
    b69a:	4013      	ands	r3, r2
    b69c:	d006      	beq.n	b6ac <sd_mmc_cmd13+0x40>
			// Check busy flag
			if (driver_get_response() & CARD_STATUS_READY_FOR_DATA) {
				break;
			}
		}
		if (nec_timeout-- == 0) {
    b69e:	687b      	ldr	r3, [r7, #4]
    b6a0:	1e5a      	subs	r2, r3, #1
    b6a2:	607a      	str	r2, [r7, #4]
    b6a4:	2b00      	cmp	r3, #0
    b6a6:	d1e6      	bne.n	b676 <sd_mmc_cmd13+0xa>
			sd_mmc_debug("%s: CMD13 Busy timeout\n\r", __func__);
			return false;
    b6a8:	2300      	movs	r3, #0
    b6aa:	e001      	b.n	b6b0 <sd_mmc_cmd13+0x44>
				break;
    b6ac:	46c0      	nop			; (mov r8, r8)
		}
	} while (1);

	return true;
    b6ae:	2301      	movs	r3, #1
}
    b6b0:	0018      	movs	r0, r3
    b6b2:	46bd      	mov	sp, r7
    b6b4:	b002      	add	sp, #8
    b6b6:	bd80      	pop	{r7, pc}
    b6b8:	00030d40 	.word	0x00030d40
    b6bc:	00001b0d 	.word	0x00001b0d
    b6c0:	0000cb25 	.word	0x0000cb25
    b6c4:	0000cd65 	.word	0x0000cd65

0000b6c8 <sd_acmd51>:
 *
 *
 * \return true if success, otherwise false
 */
static bool sd_acmd51(void)
{
    b6c8:	b590      	push	{r4, r7, lr}
    b6ca:	b085      	sub	sp, #20
    b6cc:	af02      	add	r7, sp, #8
	uint8_t scr[SD_SCR_REG_BSIZE];

	// CMD55 - Indicate to the card that the next command is an
	// application specific command rather than a standard command.
	if (!driver_send_cmd(SDMMC_CMD55_APP_CMD, (uint32_t)sd_mmc_card->rca << 16)) {
    b6ce:	4b38      	ldr	r3, [pc, #224]	; (b7b0 <sd_acmd51+0xe8>)
    b6d0:	681b      	ldr	r3, [r3, #0]
    b6d2:	891b      	ldrh	r3, [r3, #8]
    b6d4:	041b      	lsls	r3, r3, #16
    b6d6:	4a37      	ldr	r2, [pc, #220]	; (b7b4 <sd_acmd51+0xec>)
    b6d8:	0019      	movs	r1, r3
    b6da:	0010      	movs	r0, r2
    b6dc:	4b36      	ldr	r3, [pc, #216]	; (b7b8 <sd_acmd51+0xf0>)
    b6de:	4798      	blx	r3
    b6e0:	0003      	movs	r3, r0
    b6e2:	001a      	movs	r2, r3
    b6e4:	2301      	movs	r3, #1
    b6e6:	4053      	eors	r3, r2
    b6e8:	b2db      	uxtb	r3, r3
    b6ea:	2b00      	cmp	r3, #0
    b6ec:	d001      	beq.n	b6f2 <sd_acmd51+0x2a>
		return false;
    b6ee:	2300      	movs	r3, #0
    b6f0:	e059      	b.n	b7a6 <sd_acmd51+0xde>
	}
	if (!driver_adtc_start(SD_ACMD51_SEND_SCR, 0,
    b6f2:	4832      	ldr	r0, [pc, #200]	; (b7bc <sd_acmd51+0xf4>)
    b6f4:	2301      	movs	r3, #1
    b6f6:	9300      	str	r3, [sp, #0]
    b6f8:	2301      	movs	r3, #1
    b6fa:	2208      	movs	r2, #8
    b6fc:	2100      	movs	r1, #0
    b6fe:	4c30      	ldr	r4, [pc, #192]	; (b7c0 <sd_acmd51+0xf8>)
    b700:	47a0      	blx	r4
    b702:	0003      	movs	r3, r0
    b704:	001a      	movs	r2, r3
    b706:	2301      	movs	r3, #1
    b708:	4053      	eors	r3, r2
    b70a:	b2db      	uxtb	r3, r3
    b70c:	2b00      	cmp	r3, #0
    b70e:	d001      	beq.n	b714 <sd_acmd51+0x4c>
			SD_SCR_REG_BSIZE, 1, true)) {
		return false;
    b710:	2300      	movs	r3, #0
    b712:	e048      	b.n	b7a6 <sd_acmd51+0xde>
	}
	if (!driver_start_read_blocks(scr, 1)) {
    b714:	003b      	movs	r3, r7
    b716:	2101      	movs	r1, #1
    b718:	0018      	movs	r0, r3
    b71a:	4b2a      	ldr	r3, [pc, #168]	; (b7c4 <sd_acmd51+0xfc>)
    b71c:	4798      	blx	r3
    b71e:	0003      	movs	r3, r0
    b720:	001a      	movs	r2, r3
    b722:	2301      	movs	r3, #1
    b724:	4053      	eors	r3, r2
    b726:	b2db      	uxtb	r3, r3
    b728:	2b00      	cmp	r3, #0
    b72a:	d001      	beq.n	b730 <sd_acmd51+0x68>
		return false;
    b72c:	2300      	movs	r3, #0
    b72e:	e03a      	b.n	b7a6 <sd_acmd51+0xde>
	}
	if (!driver_wait_end_of_read_blocks()) {
    b730:	4b25      	ldr	r3, [pc, #148]	; (b7c8 <sd_acmd51+0x100>)
    b732:	4798      	blx	r3
    b734:	0003      	movs	r3, r0
    b736:	001a      	movs	r2, r3
    b738:	2301      	movs	r3, #1
    b73a:	4053      	eors	r3, r2
    b73c:	b2db      	uxtb	r3, r3
    b73e:	2b00      	cmp	r3, #0
    b740:	d001      	beq.n	b746 <sd_acmd51+0x7e>
		return false;
    b742:	2300      	movs	r3, #0
    b744:	e02f      	b.n	b7a6 <sd_acmd51+0xde>
	}

	// Get SD Memory Card - Spec. Version
	switch (SD_SCR_SD_SPEC(scr)) {
    b746:	0038      	movs	r0, r7
    b748:	2304      	movs	r3, #4
    b74a:	2238      	movs	r2, #56	; 0x38
    b74c:	2140      	movs	r1, #64	; 0x40
    b74e:	4c1f      	ldr	r4, [pc, #124]	; (b7cc <sd_acmd51+0x104>)
    b750:	47a0      	blx	r4
    b752:	0003      	movs	r3, r0
    b754:	2b01      	cmp	r3, #1
    b756:	d008      	beq.n	b76a <sd_acmd51+0xa2>
    b758:	d302      	bcc.n	b760 <sd_acmd51+0x98>
    b75a:	2b02      	cmp	r3, #2
    b75c:	d00a      	beq.n	b774 <sd_acmd51+0xac>
    b75e:	e01c      	b.n	b79a <sd_acmd51+0xd2>
	case SD_SCR_SD_SPEC_1_0_01:
		sd_mmc_card->version = CARD_VER_SD_1_0;
    b760:	4b13      	ldr	r3, [pc, #76]	; (b7b0 <sd_acmd51+0xe8>)
    b762:	681b      	ldr	r3, [r3, #0]
    b764:	2210      	movs	r2, #16
    b766:	731a      	strb	r2, [r3, #12]
		break;
    b768:	e01c      	b.n	b7a4 <sd_acmd51+0xdc>

	case SD_SCR_SD_SPEC_1_10:
		sd_mmc_card->version = CARD_VER_SD_1_10;
    b76a:	4b11      	ldr	r3, [pc, #68]	; (b7b0 <sd_acmd51+0xe8>)
    b76c:	681b      	ldr	r3, [r3, #0]
    b76e:	221a      	movs	r2, #26
    b770:	731a      	strb	r2, [r3, #12]
		break;
    b772:	e017      	b.n	b7a4 <sd_acmd51+0xdc>

	case SD_SCR_SD_SPEC_2_00:
		if (SD_SCR_SD_SPEC3(scr) == SD_SCR_SD_SPEC_3_00) {
    b774:	0038      	movs	r0, r7
    b776:	2301      	movs	r3, #1
    b778:	222f      	movs	r2, #47	; 0x2f
    b77a:	2140      	movs	r1, #64	; 0x40
    b77c:	4c13      	ldr	r4, [pc, #76]	; (b7cc <sd_acmd51+0x104>)
    b77e:	47a0      	blx	r4
    b780:	0003      	movs	r3, r0
    b782:	2b01      	cmp	r3, #1
    b784:	d104      	bne.n	b790 <sd_acmd51+0xc8>
			sd_mmc_card->version = CARD_VER_SD_3_0;
    b786:	4b0a      	ldr	r3, [pc, #40]	; (b7b0 <sd_acmd51+0xe8>)
    b788:	681b      	ldr	r3, [r3, #0]
    b78a:	2230      	movs	r2, #48	; 0x30
    b78c:	731a      	strb	r2, [r3, #12]
		} else {
			sd_mmc_card->version = CARD_VER_SD_2_0;
		}
		break;
    b78e:	e009      	b.n	b7a4 <sd_acmd51+0xdc>
			sd_mmc_card->version = CARD_VER_SD_2_0;
    b790:	4b07      	ldr	r3, [pc, #28]	; (b7b0 <sd_acmd51+0xe8>)
    b792:	681b      	ldr	r3, [r3, #0]
    b794:	2220      	movs	r2, #32
    b796:	731a      	strb	r2, [r3, #12]
		break;
    b798:	e004      	b.n	b7a4 <sd_acmd51+0xdc>

	default:
		sd_mmc_card->version = CARD_VER_SD_1_0;
    b79a:	4b05      	ldr	r3, [pc, #20]	; (b7b0 <sd_acmd51+0xe8>)
    b79c:	681b      	ldr	r3, [r3, #0]
    b79e:	2210      	movs	r2, #16
    b7a0:	731a      	strb	r2, [r3, #12]
		break;
    b7a2:	46c0      	nop			; (mov r8, r8)
	}
	return true;
    b7a4:	2301      	movs	r3, #1
}
    b7a6:	0018      	movs	r0, r3
    b7a8:	46bd      	mov	sp, r7
    b7aa:	b003      	add	sp, #12
    b7ac:	bd90      	pop	{r4, r7, pc}
    b7ae:	46c0      	nop			; (mov r8, r8)
    b7b0:	20003cc0 	.word	0x20003cc0
    b7b4:	00001137 	.word	0x00001137
    b7b8:	0000cb25 	.word	0x0000cb25
    b7bc:	00081133 	.word	0x00081133
    b7c0:	0000cb4d 	.word	0x0000cb4d
    b7c4:	0000ce1d 	.word	0x0000ce1d
    b7c8:	0000cec1 	.word	0x0000cec1
    b7cc:	0000af4d 	.word	0x0000af4d

0000b7d0 <sd_mmc_select_slot>:
 * \retval SD_MMC_ERR_UNUSABLE Unusable card
 * \retval SD_MMC_INIT_ONGOING Card initialization requested
 * \retval SD_MMC_OK           Card present
 */
static sd_mmc_err_t sd_mmc_select_slot(uint8_t slot)
{
    b7d0:	b580      	push	{r7, lr}
    b7d2:	b082      	sub	sp, #8
    b7d4:	af00      	add	r7, sp, #0
    b7d6:	0002      	movs	r2, r0
    b7d8:	1dfb      	adds	r3, r7, #7
    b7da:	701a      	strb	r2, [r3, #0]
	if (slot >= SD_MMC_MEM_CNT) {
    b7dc:	1dfb      	adds	r3, r7, #7
    b7de:	781b      	ldrb	r3, [r3, #0]
    b7e0:	2b00      	cmp	r3, #0
    b7e2:	d001      	beq.n	b7e8 <sd_mmc_select_slot+0x18>
		return SD_MMC_ERR_SLOT;
    b7e4:	2304      	movs	r3, #4
    b7e6:	e047      	b.n	b878 <sd_mmc_select_slot+0xa8>
	if (sd_mmc_cards[slot].state == SD_MMC_CARD_STATE_UNUSABLE) {
		return SD_MMC_ERR_UNUSABLE;
	}
#else
	// No pin card detection, then always try to install it
	if ((sd_mmc_cards[slot].state == SD_MMC_CARD_STATE_NO_CARD)
    b7e8:	1dfb      	adds	r3, r7, #7
    b7ea:	781b      	ldrb	r3, [r3, #0]
    b7ec:	4a24      	ldr	r2, [pc, #144]	; (b880 <sd_mmc_select_slot+0xb0>)
    b7ee:	015b      	lsls	r3, r3, #5
    b7f0:	18d3      	adds	r3, r2, r3
    b7f2:	330a      	adds	r3, #10
    b7f4:	781b      	ldrb	r3, [r3, #0]
    b7f6:	2b04      	cmp	r3, #4
    b7f8:	d008      	beq.n	b80c <sd_mmc_select_slot+0x3c>
			|| (sd_mmc_cards[slot].state == SD_MMC_CARD_STATE_UNUSABLE)) {
    b7fa:	1dfb      	adds	r3, r7, #7
    b7fc:	781b      	ldrb	r3, [r3, #0]
    b7fe:	4a20      	ldr	r2, [pc, #128]	; (b880 <sd_mmc_select_slot+0xb0>)
    b800:	015b      	lsls	r3, r3, #5
    b802:	18d3      	adds	r3, r2, r3
    b804:	330a      	adds	r3, #10
    b806:	781b      	ldrb	r3, [r3, #0]
    b808:	2b03      	cmp	r3, #3
    b80a:	d11d      	bne.n	b848 <sd_mmc_select_slot+0x78>
		// Card is not initialized
		sd_mmc_cards[slot].state = SD_MMC_CARD_STATE_INIT;
    b80c:	1dfb      	adds	r3, r7, #7
    b80e:	781b      	ldrb	r3, [r3, #0]
    b810:	4a1b      	ldr	r2, [pc, #108]	; (b880 <sd_mmc_select_slot+0xb0>)
    b812:	015b      	lsls	r3, r3, #5
    b814:	18d3      	adds	r3, r2, r3
    b816:	330a      	adds	r3, #10
    b818:	2202      	movs	r2, #2
    b81a:	701a      	strb	r2, [r3, #0]
		// Set 1-bit bus width and low clock for initialization
		sd_mmc_cards[slot].clock = SDMMC_CLOCK_INIT;
    b81c:	1dfb      	adds	r3, r7, #7
    b81e:	781a      	ldrb	r2, [r3, #0]
    b820:	4b17      	ldr	r3, [pc, #92]	; (b880 <sd_mmc_select_slot+0xb0>)
    b822:	0152      	lsls	r2, r2, #5
    b824:	4917      	ldr	r1, [pc, #92]	; (b884 <sd_mmc_select_slot+0xb4>)
    b826:	50d1      	str	r1, [r2, r3]
		sd_mmc_cards[slot].bus_width = 1;
    b828:	1dfb      	adds	r3, r7, #7
    b82a:	781b      	ldrb	r3, [r3, #0]
    b82c:	4a14      	ldr	r2, [pc, #80]	; (b880 <sd_mmc_select_slot+0xb0>)
    b82e:	015b      	lsls	r3, r3, #5
    b830:	18d3      	adds	r3, r2, r3
    b832:	330d      	adds	r3, #13
    b834:	2201      	movs	r2, #1
    b836:	701a      	strb	r2, [r3, #0]
		sd_mmc_cards[slot].high_speed = 0;
    b838:	1dfb      	adds	r3, r7, #7
    b83a:	781b      	ldrb	r3, [r3, #0]
    b83c:	4a10      	ldr	r2, [pc, #64]	; (b880 <sd_mmc_select_slot+0xb0>)
    b83e:	015b      	lsls	r3, r3, #5
    b840:	18d3      	adds	r3, r2, r3
    b842:	331e      	adds	r3, #30
    b844:	2200      	movs	r2, #0
    b846:	701a      	strb	r2, [r3, #0]
	}
#endif

	// Initialize interface
	sd_mmc_slot_sel = slot;
    b848:	4b0f      	ldr	r3, [pc, #60]	; (b888 <sd_mmc_select_slot+0xb8>)
    b84a:	1dfa      	adds	r2, r7, #7
    b84c:	7812      	ldrb	r2, [r2, #0]
    b84e:	701a      	strb	r2, [r3, #0]
	sd_mmc_card = &sd_mmc_cards[slot];
    b850:	1dfb      	adds	r3, r7, #7
    b852:	781b      	ldrb	r3, [r3, #0]
    b854:	015a      	lsls	r2, r3, #5
    b856:	4b0a      	ldr	r3, [pc, #40]	; (b880 <sd_mmc_select_slot+0xb0>)
    b858:	18d2      	adds	r2, r2, r3
    b85a:	4b0c      	ldr	r3, [pc, #48]	; (b88c <sd_mmc_select_slot+0xbc>)
    b85c:	601a      	str	r2, [r3, #0]
	sd_mmc_configure_slot();
    b85e:	4b0c      	ldr	r3, [pc, #48]	; (b890 <sd_mmc_select_slot+0xc0>)
    b860:	4798      	blx	r3
	return (sd_mmc_cards[slot].state == SD_MMC_CARD_STATE_INIT) ?
    b862:	1dfb      	adds	r3, r7, #7
    b864:	781b      	ldrb	r3, [r3, #0]
    b866:	4a06      	ldr	r2, [pc, #24]	; (b880 <sd_mmc_select_slot+0xb0>)
    b868:	015b      	lsls	r3, r3, #5
    b86a:	18d3      	adds	r3, r2, r3
    b86c:	330a      	adds	r3, #10
    b86e:	781b      	ldrb	r3, [r3, #0]
			SD_MMC_INIT_ONGOING : SD_MMC_OK;
    b870:	3b02      	subs	r3, #2
    b872:	425a      	negs	r2, r3
    b874:	4153      	adcs	r3, r2
    b876:	b2db      	uxtb	r3, r3
}
    b878:	0018      	movs	r0, r3
    b87a:	46bd      	mov	sp, r7
    b87c:	b002      	add	sp, #8
    b87e:	bd80      	pop	{r7, pc}
    b880:	20003c9c 	.word	0x20003c9c
    b884:	00061a80 	.word	0x00061a80
    b888:	20003cbc 	.word	0x20003cbc
    b88c:	20003cc0 	.word	0x20003cc0
    b890:	0000b895 	.word	0x0000b895

0000b894 <sd_mmc_configure_slot>:

/**
 * \brief Configures the driver with the selected card configuration
 */
static void sd_mmc_configure_slot(void)
{
    b894:	b5b0      	push	{r4, r5, r7, lr}
    b896:	af00      	add	r7, sp, #0
	driver_select_device(sd_mmc_slot_sel, sd_mmc_card->clock,
    b898:	4b09      	ldr	r3, [pc, #36]	; (b8c0 <sd_mmc_configure_slot+0x2c>)
    b89a:	7818      	ldrb	r0, [r3, #0]
    b89c:	4b09      	ldr	r3, [pc, #36]	; (b8c4 <sd_mmc_configure_slot+0x30>)
    b89e:	681b      	ldr	r3, [r3, #0]
    b8a0:	6819      	ldr	r1, [r3, #0]
			sd_mmc_card->bus_width, sd_mmc_card->high_speed);
    b8a2:	4b08      	ldr	r3, [pc, #32]	; (b8c4 <sd_mmc_configure_slot+0x30>)
    b8a4:	681b      	ldr	r3, [r3, #0]
	driver_select_device(sd_mmc_slot_sel, sd_mmc_card->clock,
    b8a6:	7b5a      	ldrb	r2, [r3, #13]
			sd_mmc_card->bus_width, sd_mmc_card->high_speed);
    b8a8:	4b06      	ldr	r3, [pc, #24]	; (b8c4 <sd_mmc_configure_slot+0x30>)
    b8aa:	681b      	ldr	r3, [r3, #0]
    b8ac:	7f9b      	ldrb	r3, [r3, #30]
	driver_select_device(sd_mmc_slot_sel, sd_mmc_card->clock,
    b8ae:	1e5c      	subs	r4, r3, #1
    b8b0:	41a3      	sbcs	r3, r4
    b8b2:	b2db      	uxtb	r3, r3
    b8b4:	4c04      	ldr	r4, [pc, #16]	; (b8c8 <sd_mmc_configure_slot+0x34>)
    b8b6:	47a0      	blx	r4
}
    b8b8:	46c0      	nop			; (mov r8, r8)
    b8ba:	46bd      	mov	sp, r7
    b8bc:	bdb0      	pop	{r4, r5, r7, pc}
    b8be:	46c0      	nop			; (mov r8, r8)
    b8c0:	20003cbc 	.word	0x20003cbc
    b8c4:	20003cc0 	.word	0x20003cc0
    b8c8:	0000ca0d 	.word	0x0000ca0d

0000b8cc <sd_mmc_deselect_slot>:

/**
 * \brief Deselect the current card slot
 */
static void sd_mmc_deselect_slot(void)
{
    b8cc:	b580      	push	{r7, lr}
    b8ce:	af00      	add	r7, sp, #0
	if (sd_mmc_slot_sel < SD_MMC_MEM_CNT) {
    b8d0:	4b05      	ldr	r3, [pc, #20]	; (b8e8 <sd_mmc_deselect_slot+0x1c>)
    b8d2:	781b      	ldrb	r3, [r3, #0]
    b8d4:	2b00      	cmp	r3, #0
    b8d6:	d104      	bne.n	b8e2 <sd_mmc_deselect_slot+0x16>
		driver_deselect_device(sd_mmc_slot_sel);
    b8d8:	4b03      	ldr	r3, [pc, #12]	; (b8e8 <sd_mmc_deselect_slot+0x1c>)
    b8da:	781b      	ldrb	r3, [r3, #0]
    b8dc:	0018      	movs	r0, r3
    b8de:	4b03      	ldr	r3, [pc, #12]	; (b8ec <sd_mmc_deselect_slot+0x20>)
    b8e0:	4798      	blx	r3
	}
}
    b8e2:	46c0      	nop			; (mov r8, r8)
    b8e4:	46bd      	mov	sp, r7
    b8e6:	bd80      	pop	{r7, pc}
    b8e8:	20003cbc 	.word	0x20003cbc
    b8ec:	0000ca95 	.word	0x0000ca95

0000b8f0 <sd_mmc_spi_card_init>:
 * At last, it will automaticly enable maximum bus width and transfer speed.
 *
 * \return true if success, otherwise false
 */
static bool sd_mmc_spi_card_init(void)
{
    b8f0:	b580      	push	{r7, lr}
    b8f2:	b082      	sub	sp, #8
    b8f4:	af00      	add	r7, sp, #0
	uint8_t v2 = 0;
    b8f6:	1dfb      	adds	r3, r7, #7
    b8f8:	2200      	movs	r2, #0
    b8fa:	701a      	strb	r2, [r3, #0]

	// In first, try to install SD/SDIO card
	sd_mmc_card->type = CARD_TYPE_SD;
    b8fc:	4b59      	ldr	r3, [pc, #356]	; (ba64 <sd_mmc_spi_card_init+0x174>)
    b8fe:	681b      	ldr	r3, [r3, #0]
    b900:	2201      	movs	r2, #1
    b902:	72da      	strb	r2, [r3, #11]
	sd_mmc_card->version = CARD_VER_UNKNOWN;
    b904:	4b57      	ldr	r3, [pc, #348]	; (ba64 <sd_mmc_spi_card_init+0x174>)
    b906:	681b      	ldr	r3, [r3, #0]
    b908:	2200      	movs	r2, #0
    b90a:	731a      	strb	r2, [r3, #12]
	sd_mmc_card->rca = 0;
    b90c:	4b55      	ldr	r3, [pc, #340]	; (ba64 <sd_mmc_spi_card_init+0x174>)
    b90e:	681b      	ldr	r3, [r3, #0]
    b910:	2200      	movs	r2, #0
    b912:	811a      	strh	r2, [r3, #8]
	sd_mmc_debug("Start SD card install\n\r");

	// Card need of 74 cycles clock minimum to start
	driver_send_clock();
    b914:	4b54      	ldr	r3, [pc, #336]	; (ba68 <sd_mmc_spi_card_init+0x178>)
    b916:	4798      	blx	r3

	// CMD0 - Reset all cards to idle state.
	if (!driver_send_cmd(SDMMC_SPI_CMD0_GO_IDLE_STATE, 0)) {
    b918:	2388      	movs	r3, #136	; 0x88
    b91a:	015b      	lsls	r3, r3, #5
    b91c:	2100      	movs	r1, #0
    b91e:	0018      	movs	r0, r3
    b920:	4b52      	ldr	r3, [pc, #328]	; (ba6c <sd_mmc_spi_card_init+0x17c>)
    b922:	4798      	blx	r3
    b924:	0003      	movs	r3, r0
    b926:	001a      	movs	r2, r3
    b928:	2301      	movs	r3, #1
    b92a:	4053      	eors	r3, r2
    b92c:	b2db      	uxtb	r3, r3
    b92e:	2b00      	cmp	r3, #0
    b930:	d001      	beq.n	b936 <sd_mmc_spi_card_init+0x46>
		return false;
    b932:	2300      	movs	r3, #0
    b934:	e092      	b.n	ba5c <sd_mmc_spi_card_init+0x16c>
	}
	if (!sd_cmd8(&v2)) {
    b936:	1dfb      	adds	r3, r7, #7
    b938:	0018      	movs	r0, r3
    b93a:	4b4d      	ldr	r3, [pc, #308]	; (ba70 <sd_mmc_spi_card_init+0x180>)
    b93c:	4798      	blx	r3
    b93e:	0003      	movs	r3, r0
    b940:	001a      	movs	r2, r3
    b942:	2301      	movs	r3, #1
    b944:	4053      	eors	r3, r2
    b946:	b2db      	uxtb	r3, r3
    b948:	2b00      	cmp	r3, #0
    b94a:	d001      	beq.n	b950 <sd_mmc_spi_card_init+0x60>
		return false;
    b94c:	2300      	movs	r3, #0
    b94e:	e085      	b.n	ba5c <sd_mmc_spi_card_init+0x16c>
	}
	// Try to get the SDIO card's operating condition
	if (!sdio_op_cond()) {
    b950:	4b48      	ldr	r3, [pc, #288]	; (ba74 <sd_mmc_spi_card_init+0x184>)
    b952:	4798      	blx	r3
    b954:	0003      	movs	r3, r0
    b956:	001a      	movs	r2, r3
    b958:	2301      	movs	r3, #1
    b95a:	4053      	eors	r3, r2
    b95c:	b2db      	uxtb	r3, r3
    b95e:	2b00      	cmp	r3, #0
    b960:	d001      	beq.n	b966 <sd_mmc_spi_card_init+0x76>
		return false;
    b962:	2300      	movs	r3, #0
    b964:	e07a      	b.n	ba5c <sd_mmc_spi_card_init+0x16c>
	}

	if (sd_mmc_card->type & CARD_TYPE_SD) {
    b966:	4b3f      	ldr	r3, [pc, #252]	; (ba64 <sd_mmc_spi_card_init+0x174>)
    b968:	681b      	ldr	r3, [r3, #0]
    b96a:	7adb      	ldrb	r3, [r3, #11]
    b96c:	001a      	movs	r2, r3
    b96e:	2301      	movs	r3, #1
    b970:	4013      	ands	r3, r2
    b972:	d021      	beq.n	b9b8 <sd_mmc_spi_card_init+0xc8>
		// Try to get the SD card's operating condition
		if (!sd_spi_op_cond(v2)) {
    b974:	1dfb      	adds	r3, r7, #7
    b976:	781b      	ldrb	r3, [r3, #0]
    b978:	0018      	movs	r0, r3
    b97a:	4b3f      	ldr	r3, [pc, #252]	; (ba78 <sd_mmc_spi_card_init+0x188>)
    b97c:	4798      	blx	r3
    b97e:	0003      	movs	r3, r0
    b980:	001a      	movs	r2, r3
    b982:	2301      	movs	r3, #1
    b984:	4053      	eors	r3, r2
    b986:	b2db      	uxtb	r3, r3
    b988:	2b00      	cmp	r3, #0
    b98a:	d007      	beq.n	b99c <sd_mmc_spi_card_init+0xac>
			// It is not a SD card
			sd_mmc_debug("Start MMC Install\n\r");
			sd_mmc_card->type = CARD_TYPE_MMC;
    b98c:	4b35      	ldr	r3, [pc, #212]	; (ba64 <sd_mmc_spi_card_init+0x174>)
    b98e:	681b      	ldr	r3, [r3, #0]
    b990:	2202      	movs	r2, #2
    b992:	72da      	strb	r2, [r3, #11]
			return sd_mmc_spi_install_mmc();
    b994:	4b39      	ldr	r3, [pc, #228]	; (ba7c <sd_mmc_spi_card_init+0x18c>)
    b996:	4798      	blx	r3
    b998:	0003      	movs	r3, r0
    b99a:	e05f      	b.n	ba5c <sd_mmc_spi_card_init+0x16c>
		 * However, to be sure, the CRC OFF command is send.
		 * Unfortunately, specific SDIO card does not support it
		 * (H&D wireless card - HDG104 WiFi SIP)
		 * and the command is send only on SD card.
		 */
		if (!driver_send_cmd(SDMMC_SPI_CMD59_CRC_ON_OFF, 0)) {
    b99c:	4b38      	ldr	r3, [pc, #224]	; (ba80 <sd_mmc_spi_card_init+0x190>)
    b99e:	2100      	movs	r1, #0
    b9a0:	0018      	movs	r0, r3
    b9a2:	4b32      	ldr	r3, [pc, #200]	; (ba6c <sd_mmc_spi_card_init+0x17c>)
    b9a4:	4798      	blx	r3
    b9a6:	0003      	movs	r3, r0
    b9a8:	001a      	movs	r2, r3
    b9aa:	2301      	movs	r3, #1
    b9ac:	4053      	eors	r3, r2
    b9ae:	b2db      	uxtb	r3, r3
    b9b0:	2b00      	cmp	r3, #0
    b9b2:	d001      	beq.n	b9b8 <sd_mmc_spi_card_init+0xc8>
			return false;
    b9b4:	2300      	movs	r3, #0
    b9b6:	e051      	b.n	ba5c <sd_mmc_spi_card_init+0x16c>
		}
	}
	// SD MEMORY
	if (sd_mmc_card->type & CARD_TYPE_SD) {
    b9b8:	4b2a      	ldr	r3, [pc, #168]	; (ba64 <sd_mmc_spi_card_init+0x174>)
    b9ba:	681b      	ldr	r3, [r3, #0]
    b9bc:	7adb      	ldrb	r3, [r3, #11]
    b9be:	001a      	movs	r2, r3
    b9c0:	2301      	movs	r3, #1
    b9c2:	4013      	ands	r3, r2
    b9c4:	d017      	beq.n	b9f6 <sd_mmc_spi_card_init+0x106>
		// Get the Card-Specific Data
		if (!sd_mmc_cmd9_spi()) {
    b9c6:	4b2f      	ldr	r3, [pc, #188]	; (ba84 <sd_mmc_spi_card_init+0x194>)
    b9c8:	4798      	blx	r3
    b9ca:	0003      	movs	r3, r0
    b9cc:	001a      	movs	r2, r3
    b9ce:	2301      	movs	r3, #1
    b9d0:	4053      	eors	r3, r2
    b9d2:	b2db      	uxtb	r3, r3
    b9d4:	2b00      	cmp	r3, #0
    b9d6:	d001      	beq.n	b9dc <sd_mmc_spi_card_init+0xec>
			return false;
    b9d8:	2300      	movs	r3, #0
    b9da:	e03f      	b.n	ba5c <sd_mmc_spi_card_init+0x16c>
		}
		sd_decode_csd();
    b9dc:	4b2a      	ldr	r3, [pc, #168]	; (ba88 <sd_mmc_spi_card_init+0x198>)
    b9de:	4798      	blx	r3
		// Read the SCR to get card version
		if (!sd_acmd51()) {
    b9e0:	4b2a      	ldr	r3, [pc, #168]	; (ba8c <sd_mmc_spi_card_init+0x19c>)
    b9e2:	4798      	blx	r3
    b9e4:	0003      	movs	r3, r0
    b9e6:	001a      	movs	r2, r3
    b9e8:	2301      	movs	r3, #1
    b9ea:	4053      	eors	r3, r2
    b9ec:	b2db      	uxtb	r3, r3
    b9ee:	2b00      	cmp	r3, #0
    b9f0:	d001      	beq.n	b9f6 <sd_mmc_spi_card_init+0x106>
			return false;
    b9f2:	2300      	movs	r3, #0
    b9f4:	e032      	b.n	ba5c <sd_mmc_spi_card_init+0x16c>
		if (!sdio_get_max_speed()) {
			return false;
		}
	}
	// SD MEMORY not HC, Set default block size
	if ((sd_mmc_card->type & CARD_TYPE_SD) &&
    b9f6:	4b1b      	ldr	r3, [pc, #108]	; (ba64 <sd_mmc_spi_card_init+0x174>)
    b9f8:	681b      	ldr	r3, [r3, #0]
    b9fa:	7adb      	ldrb	r3, [r3, #11]
    b9fc:	001a      	movs	r2, r3
    b9fe:	2301      	movs	r3, #1
    ba00:	4013      	ands	r3, r2
    ba02:	d016      	beq.n	ba32 <sd_mmc_spi_card_init+0x142>
			(0 == (sd_mmc_card->type & CARD_TYPE_HC))) {
    ba04:	4b17      	ldr	r3, [pc, #92]	; (ba64 <sd_mmc_spi_card_init+0x174>)
    ba06:	681b      	ldr	r3, [r3, #0]
    ba08:	7adb      	ldrb	r3, [r3, #11]
    ba0a:	001a      	movs	r2, r3
    ba0c:	2308      	movs	r3, #8
    ba0e:	4013      	ands	r3, r2
	if ((sd_mmc_card->type & CARD_TYPE_SD) &&
    ba10:	d10f      	bne.n	ba32 <sd_mmc_spi_card_init+0x142>
		if (!driver_send_cmd(SDMMC_CMD16_SET_BLOCKLEN, SD_MMC_BLOCK_SIZE)) {
    ba12:	2380      	movs	r3, #128	; 0x80
    ba14:	009b      	lsls	r3, r3, #2
    ba16:	4a1e      	ldr	r2, [pc, #120]	; (ba90 <sd_mmc_spi_card_init+0x1a0>)
    ba18:	0019      	movs	r1, r3
    ba1a:	0010      	movs	r0, r2
    ba1c:	4b13      	ldr	r3, [pc, #76]	; (ba6c <sd_mmc_spi_card_init+0x17c>)
    ba1e:	4798      	blx	r3
    ba20:	0003      	movs	r3, r0
    ba22:	001a      	movs	r2, r3
    ba24:	2301      	movs	r3, #1
    ba26:	4053      	eors	r3, r2
    ba28:	b2db      	uxtb	r3, r3
    ba2a:	2b00      	cmp	r3, #0
    ba2c:	d001      	beq.n	ba32 <sd_mmc_spi_card_init+0x142>
			return false;
    ba2e:	2300      	movs	r3, #0
    ba30:	e014      	b.n	ba5c <sd_mmc_spi_card_init+0x16c>
		}
	}
	// Check communication
	if (sd_mmc_card->type & CARD_TYPE_SD) {
    ba32:	4b0c      	ldr	r3, [pc, #48]	; (ba64 <sd_mmc_spi_card_init+0x174>)
    ba34:	681b      	ldr	r3, [r3, #0]
    ba36:	7adb      	ldrb	r3, [r3, #11]
    ba38:	001a      	movs	r2, r3
    ba3a:	2301      	movs	r3, #1
    ba3c:	4013      	ands	r3, r2
    ba3e:	d00a      	beq.n	ba56 <sd_mmc_spi_card_init+0x166>
		if (!sd_mmc_cmd13()) {
    ba40:	4b14      	ldr	r3, [pc, #80]	; (ba94 <sd_mmc_spi_card_init+0x1a4>)
    ba42:	4798      	blx	r3
    ba44:	0003      	movs	r3, r0
    ba46:	001a      	movs	r2, r3
    ba48:	2301      	movs	r3, #1
    ba4a:	4053      	eors	r3, r2
    ba4c:	b2db      	uxtb	r3, r3
    ba4e:	2b00      	cmp	r3, #0
    ba50:	d001      	beq.n	ba56 <sd_mmc_spi_card_init+0x166>
			return false;
    ba52:	2300      	movs	r3, #0
    ba54:	e002      	b.n	ba5c <sd_mmc_spi_card_init+0x16c>
		}
	}
	// Reinitialize the slot with the new speed
	sd_mmc_configure_slot();
    ba56:	4b10      	ldr	r3, [pc, #64]	; (ba98 <sd_mmc_spi_card_init+0x1a8>)
    ba58:	4798      	blx	r3
	return true;
    ba5a:	2301      	movs	r3, #1
}
    ba5c:	0018      	movs	r0, r3
    ba5e:	46bd      	mov	sp, r7
    ba60:	b002      	add	sp, #8
    ba62:	bd80      	pop	{r7, pc}
    ba64:	20003cc0 	.word	0x20003cc0
    ba68:	0000cad9 	.word	0x0000cad9
    ba6c:	0000cb25 	.word	0x0000cb25
    ba70:	0000b245 	.word	0x0000b245
    ba74:	0000b239 	.word	0x0000b239
    ba78:	0000b155 	.word	0x0000b155
    ba7c:	0000ba9d 	.word	0x0000ba9d
    ba80:	0000113b 	.word	0x0000113b
    ba84:	0000b3e1 	.word	0x0000b3e1
    ba88:	0000b581 	.word	0x0000b581
    ba8c:	0000b6c9 	.word	0x0000b6c9
    ba90:	00001110 	.word	0x00001110
    ba94:	0000b66d 	.word	0x0000b66d
    ba98:	0000b895 	.word	0x0000b895

0000ba9c <sd_mmc_spi_install_mmc>:
 * At last, it will automaticly enable maximum bus width and transfer speed.
 *
 * \return true if success, otherwise false
 */
static bool sd_mmc_spi_install_mmc(void)
{
    ba9c:	b580      	push	{r7, lr}
    ba9e:	b082      	sub	sp, #8
    baa0:	af00      	add	r7, sp, #0
	uint8_t b_authorize_high_speed;

	// CMD0 - Reset all cards to idle state.
	if (!driver_send_cmd(SDMMC_SPI_CMD0_GO_IDLE_STATE, 0)) {
    baa2:	2388      	movs	r3, #136	; 0x88
    baa4:	015b      	lsls	r3, r3, #5
    baa6:	2100      	movs	r1, #0
    baa8:	0018      	movs	r0, r3
    baaa:	4b32      	ldr	r3, [pc, #200]	; (bb74 <sd_mmc_spi_install_mmc+0xd8>)
    baac:	4798      	blx	r3
    baae:	0003      	movs	r3, r0
    bab0:	001a      	movs	r2, r3
    bab2:	2301      	movs	r3, #1
    bab4:	4053      	eors	r3, r2
    bab6:	b2db      	uxtb	r3, r3
    bab8:	2b00      	cmp	r3, #0
    baba:	d001      	beq.n	bac0 <sd_mmc_spi_install_mmc+0x24>
		return false;
    babc:	2300      	movs	r3, #0
    babe:	e055      	b.n	bb6c <sd_mmc_spi_install_mmc+0xd0>
	}

	if (!mmc_spi_op_cond()) {
    bac0:	4b2d      	ldr	r3, [pc, #180]	; (bb78 <sd_mmc_spi_install_mmc+0xdc>)
    bac2:	4798      	blx	r3
    bac4:	0003      	movs	r3, r0
    bac6:	001a      	movs	r2, r3
    bac8:	2301      	movs	r3, #1
    baca:	4053      	eors	r3, r2
    bacc:	b2db      	uxtb	r3, r3
    bace:	2b00      	cmp	r3, #0
    bad0:	d001      	beq.n	bad6 <sd_mmc_spi_install_mmc+0x3a>
		return false;
    bad2:	2300      	movs	r3, #0
    bad4:	e04a      	b.n	bb6c <sd_mmc_spi_install_mmc+0xd0>
	}

	// Disable CRC check for SPI mode
	if (!driver_send_cmd(SDMMC_SPI_CMD59_CRC_ON_OFF, 0)) {
    bad6:	4b29      	ldr	r3, [pc, #164]	; (bb7c <sd_mmc_spi_install_mmc+0xe0>)
    bad8:	2100      	movs	r1, #0
    bada:	0018      	movs	r0, r3
    badc:	4b25      	ldr	r3, [pc, #148]	; (bb74 <sd_mmc_spi_install_mmc+0xd8>)
    bade:	4798      	blx	r3
    bae0:	0003      	movs	r3, r0
    bae2:	001a      	movs	r2, r3
    bae4:	2301      	movs	r3, #1
    bae6:	4053      	eors	r3, r2
    bae8:	b2db      	uxtb	r3, r3
    baea:	2b00      	cmp	r3, #0
    baec:	d001      	beq.n	baf2 <sd_mmc_spi_install_mmc+0x56>
		return false;
    baee:	2300      	movs	r3, #0
    baf0:	e03c      	b.n	bb6c <sd_mmc_spi_install_mmc+0xd0>
	}
	// Get the Card-Specific Data
	if (!sd_mmc_cmd9_spi()) {
    baf2:	4b23      	ldr	r3, [pc, #140]	; (bb80 <sd_mmc_spi_install_mmc+0xe4>)
    baf4:	4798      	blx	r3
    baf6:	0003      	movs	r3, r0
    baf8:	001a      	movs	r2, r3
    bafa:	2301      	movs	r3, #1
    bafc:	4053      	eors	r3, r2
    bafe:	b2db      	uxtb	r3, r3
    bb00:	2b00      	cmp	r3, #0
    bb02:	d001      	beq.n	bb08 <sd_mmc_spi_install_mmc+0x6c>
		return false;
    bb04:	2300      	movs	r3, #0
    bb06:	e031      	b.n	bb6c <sd_mmc_spi_install_mmc+0xd0>
	}
	mmc_decode_csd();
    bb08:	4b1e      	ldr	r3, [pc, #120]	; (bb84 <sd_mmc_spi_install_mmc+0xe8>)
    bb0a:	4798      	blx	r3
	// For MMC 4.0 Higher version
	if (sd_mmc_card->version >= CARD_VER_MMC_4) {
    bb0c:	4b1e      	ldr	r3, [pc, #120]	; (bb88 <sd_mmc_spi_install_mmc+0xec>)
    bb0e:	681b      	ldr	r3, [r3, #0]
    bb10:	7b1b      	ldrb	r3, [r3, #12]
    bb12:	2b3f      	cmp	r3, #63	; 0x3f
    bb14:	d90c      	bls.n	bb30 <sd_mmc_spi_install_mmc+0x94>
		// Get EXT_CSD
		if (!mmc_cmd8(&b_authorize_high_speed)) {
    bb16:	1dfb      	adds	r3, r7, #7
    bb18:	0018      	movs	r0, r3
    bb1a:	4b1c      	ldr	r3, [pc, #112]	; (bb8c <sd_mmc_spi_install_mmc+0xf0>)
    bb1c:	4798      	blx	r3
    bb1e:	0003      	movs	r3, r0
    bb20:	001a      	movs	r2, r3
    bb22:	2301      	movs	r3, #1
    bb24:	4053      	eors	r3, r2
    bb26:	b2db      	uxtb	r3, r3
    bb28:	2b00      	cmp	r3, #0
    bb2a:	d001      	beq.n	bb30 <sd_mmc_spi_install_mmc+0x94>
			return false;
    bb2c:	2300      	movs	r3, #0
    bb2e:	e01d      	b.n	bb6c <sd_mmc_spi_install_mmc+0xd0>
		}
	}
	// Set default block size
	if (!driver_send_cmd(SDMMC_CMD16_SET_BLOCKLEN, SD_MMC_BLOCK_SIZE)) {
    bb30:	2380      	movs	r3, #128	; 0x80
    bb32:	009b      	lsls	r3, r3, #2
    bb34:	4a16      	ldr	r2, [pc, #88]	; (bb90 <sd_mmc_spi_install_mmc+0xf4>)
    bb36:	0019      	movs	r1, r3
    bb38:	0010      	movs	r0, r2
    bb3a:	4b0e      	ldr	r3, [pc, #56]	; (bb74 <sd_mmc_spi_install_mmc+0xd8>)
    bb3c:	4798      	blx	r3
    bb3e:	0003      	movs	r3, r0
    bb40:	001a      	movs	r2, r3
    bb42:	2301      	movs	r3, #1
    bb44:	4053      	eors	r3, r2
    bb46:	b2db      	uxtb	r3, r3
    bb48:	2b00      	cmp	r3, #0
    bb4a:	d001      	beq.n	bb50 <sd_mmc_spi_install_mmc+0xb4>
		return false;
    bb4c:	2300      	movs	r3, #0
    bb4e:	e00d      	b.n	bb6c <sd_mmc_spi_install_mmc+0xd0>
	}
	// Check communication
	if (!sd_mmc_cmd13()) {
    bb50:	4b10      	ldr	r3, [pc, #64]	; (bb94 <sd_mmc_spi_install_mmc+0xf8>)
    bb52:	4798      	blx	r3
    bb54:	0003      	movs	r3, r0
    bb56:	001a      	movs	r2, r3
    bb58:	2301      	movs	r3, #1
    bb5a:	4053      	eors	r3, r2
    bb5c:	b2db      	uxtb	r3, r3
    bb5e:	2b00      	cmp	r3, #0
    bb60:	d001      	beq.n	bb66 <sd_mmc_spi_install_mmc+0xca>
		return false;
    bb62:	2300      	movs	r3, #0
    bb64:	e002      	b.n	bb6c <sd_mmc_spi_install_mmc+0xd0>
	}
	// Reinitialize the slot with the new speed
	sd_mmc_configure_slot();
    bb66:	4b0c      	ldr	r3, [pc, #48]	; (bb98 <sd_mmc_spi_install_mmc+0xfc>)
    bb68:	4798      	blx	r3
	return true;
    bb6a:	2301      	movs	r3, #1
}
    bb6c:	0018      	movs	r0, r3
    bb6e:	46bd      	mov	sp, r7
    bb70:	b002      	add	sp, #8
    bb72:	bd80      	pop	{r7, pc}
    bb74:	0000cb25 	.word	0x0000cb25
    bb78:	0000b0a9 	.word	0x0000b0a9
    bb7c:	0000113b 	.word	0x0000113b
    bb80:	0000b3e1 	.word	0x0000b3e1
    bb84:	0000b451 	.word	0x0000b451
    bb88:	20003cc0 	.word	0x20003cc0
    bb8c:	0000b2b5 	.word	0x0000b2b5
    bb90:	00001110 	.word	0x00001110
    bb94:	0000b66d 	.word	0x0000b66d
    bb98:	0000b895 	.word	0x0000b895

0000bb9c <sd_mmc_init>:

//-------------------------------------------------------------------
//--------------------- PUBLIC FUNCTIONS ----------------------------

void sd_mmc_init(void)
{
    bb9c:	b580      	push	{r7, lr}
    bb9e:	b082      	sub	sp, #8
    bba0:	af00      	add	r7, sp, #0
# define SD_MMC_ENABLE_WP_PIN(slot, unused) \
	pmc_enable_periph_clk(SD_MMC_##slot##_WP_PIO_ID);
	MREPEAT(SD_MMC_MEM_CNT, SD_MMC_ENABLE_WP_PIN, ~)
# undef SD_MMC_ENABLE_WP_PIN
#endif
	for (uint8_t slot = 0; slot < SD_MMC_MEM_CNT; slot++) {
    bba2:	1dfb      	adds	r3, r7, #7
    bba4:	2200      	movs	r2, #0
    bba6:	701a      	strb	r2, [r3, #0]
    bba8:	e00c      	b.n	bbc4 <sd_mmc_init+0x28>
		sd_mmc_cards[slot].state = SD_MMC_CARD_STATE_NO_CARD;
    bbaa:	1dfb      	adds	r3, r7, #7
    bbac:	781b      	ldrb	r3, [r3, #0]
    bbae:	4a0c      	ldr	r2, [pc, #48]	; (bbe0 <sd_mmc_init+0x44>)
    bbb0:	015b      	lsls	r3, r3, #5
    bbb2:	18d3      	adds	r3, r2, r3
    bbb4:	330a      	adds	r3, #10
    bbb6:	2204      	movs	r2, #4
    bbb8:	701a      	strb	r2, [r3, #0]
	for (uint8_t slot = 0; slot < SD_MMC_MEM_CNT; slot++) {
    bbba:	1dfb      	adds	r3, r7, #7
    bbbc:	781a      	ldrb	r2, [r3, #0]
    bbbe:	1dfb      	adds	r3, r7, #7
    bbc0:	3201      	adds	r2, #1
    bbc2:	701a      	strb	r2, [r3, #0]
    bbc4:	1dfb      	adds	r3, r7, #7
    bbc6:	781b      	ldrb	r3, [r3, #0]
    bbc8:	2b00      	cmp	r3, #0
    bbca:	d0ee      	beq.n	bbaa <sd_mmc_init+0xe>
	}
	sd_mmc_slot_sel = 0xFF; // No slot configurated
    bbcc:	4b05      	ldr	r3, [pc, #20]	; (bbe4 <sd_mmc_init+0x48>)
    bbce:	22ff      	movs	r2, #255	; 0xff
    bbd0:	701a      	strb	r2, [r3, #0]
	driver_init();
    bbd2:	4b05      	ldr	r3, [pc, #20]	; (bbe8 <sd_mmc_init+0x4c>)
    bbd4:	4798      	blx	r3
}
    bbd6:	46c0      	nop			; (mov r8, r8)
    bbd8:	46bd      	mov	sp, r7
    bbda:	b002      	add	sp, #8
    bbdc:	bd80      	pop	{r7, pc}
    bbde:	46c0      	nop			; (mov r8, r8)
    bbe0:	20003c9c 	.word	0x20003c9c
    bbe4:	20003cbc 	.word	0x20003cbc
    bbe8:	0000c945 	.word	0x0000c945

0000bbec <sd_mmc_check>:
{
	return SD_MMC_MEM_CNT;
}

sd_mmc_err_t sd_mmc_check(uint8_t slot)
{
    bbec:	b590      	push	{r4, r7, lr}
    bbee:	b085      	sub	sp, #20
    bbf0:	af00      	add	r7, sp, #0
    bbf2:	0002      	movs	r2, r0
    bbf4:	1dfb      	adds	r3, r7, #7
    bbf6:	701a      	strb	r2, [r3, #0]
	sd_mmc_err_t sd_mmc_err;

	sd_mmc_err = sd_mmc_select_slot(slot);
    bbf8:	230f      	movs	r3, #15
    bbfa:	18fc      	adds	r4, r7, r3
    bbfc:	1dfb      	adds	r3, r7, #7
    bbfe:	781b      	ldrb	r3, [r3, #0]
    bc00:	0018      	movs	r0, r3
    bc02:	4b13      	ldr	r3, [pc, #76]	; (bc50 <sd_mmc_check+0x64>)
    bc04:	4798      	blx	r3
    bc06:	0003      	movs	r3, r0
    bc08:	7023      	strb	r3, [r4, #0]
	if (sd_mmc_err != SD_MMC_INIT_ONGOING) {
    bc0a:	230f      	movs	r3, #15
    bc0c:	18fb      	adds	r3, r7, r3
    bc0e:	781b      	ldrb	r3, [r3, #0]
    bc10:	2b01      	cmp	r3, #1
    bc12:	d005      	beq.n	bc20 <sd_mmc_check+0x34>
		sd_mmc_deselect_slot();
    bc14:	4b0f      	ldr	r3, [pc, #60]	; (bc54 <sd_mmc_check+0x68>)
    bc16:	4798      	blx	r3
		return sd_mmc_err;
    bc18:	230f      	movs	r3, #15
    bc1a:	18fb      	adds	r3, r7, r3
    bc1c:	781b      	ldrb	r3, [r3, #0]
    bc1e:	e012      	b.n	bc46 <sd_mmc_check+0x5a>
	}

	// Initialization of the card requested
	if (sd_mmc_is_spi()? sd_mmc_spi_card_init()
    bc20:	4b0d      	ldr	r3, [pc, #52]	; (bc58 <sd_mmc_check+0x6c>)
    bc22:	4798      	blx	r3
    bc24:	1e03      	subs	r3, r0, #0
    bc26:	d007      	beq.n	bc38 <sd_mmc_check+0x4c>
			: sd_mmc_mci_card_init()) {
		sd_mmc_debug("SD/MMC card ready\n\r");
		sd_mmc_card->state = SD_MMC_CARD_STATE_READY;
    bc28:	4b0c      	ldr	r3, [pc, #48]	; (bc5c <sd_mmc_check+0x70>)
    bc2a:	681b      	ldr	r3, [r3, #0]
    bc2c:	2200      	movs	r2, #0
    bc2e:	729a      	strb	r2, [r3, #10]
		sd_mmc_deselect_slot();
    bc30:	4b08      	ldr	r3, [pc, #32]	; (bc54 <sd_mmc_check+0x68>)
    bc32:	4798      	blx	r3
		// To notify that the card has been just initialized
		// It is necessary for USB Device MSC
		return SD_MMC_INIT_ONGOING;
    bc34:	2301      	movs	r3, #1
    bc36:	e006      	b.n	bc46 <sd_mmc_check+0x5a>
	}
	sd_mmc_debug("SD/MMC card initialization failed\n\r");
	sd_mmc_card->state = SD_MMC_CARD_STATE_UNUSABLE;
    bc38:	4b08      	ldr	r3, [pc, #32]	; (bc5c <sd_mmc_check+0x70>)
    bc3a:	681b      	ldr	r3, [r3, #0]
    bc3c:	2203      	movs	r2, #3
    bc3e:	729a      	strb	r2, [r3, #10]
	sd_mmc_deselect_slot();
    bc40:	4b04      	ldr	r3, [pc, #16]	; (bc54 <sd_mmc_check+0x68>)
    bc42:	4798      	blx	r3
	return SD_MMC_ERR_UNUSABLE;
    bc44:	2303      	movs	r3, #3
}
    bc46:	0018      	movs	r0, r3
    bc48:	46bd      	mov	sp, r7
    bc4a:	b005      	add	sp, #20
    bc4c:	bd90      	pop	{r4, r7, pc}
    bc4e:	46c0      	nop			; (mov r8, r8)
    bc50:	0000b7d1 	.word	0x0000b7d1
    bc54:	0000b8cd 	.word	0x0000b8cd
    bc58:	0000b8f1 	.word	0x0000b8f1
    bc5c:	20003cc0 	.word	0x20003cc0

0000bc60 <sd_mmc_get_type>:

card_type_t sd_mmc_get_type(uint8_t slot)
{
    bc60:	b580      	push	{r7, lr}
    bc62:	b082      	sub	sp, #8
    bc64:	af00      	add	r7, sp, #0
    bc66:	0002      	movs	r2, r0
    bc68:	1dfb      	adds	r3, r7, #7
    bc6a:	701a      	strb	r2, [r3, #0]
	if (SD_MMC_OK != sd_mmc_select_slot(slot)) {
    bc6c:	1dfb      	adds	r3, r7, #7
    bc6e:	781b      	ldrb	r3, [r3, #0]
    bc70:	0018      	movs	r0, r3
    bc72:	4b07      	ldr	r3, [pc, #28]	; (bc90 <sd_mmc_get_type+0x30>)
    bc74:	4798      	blx	r3
    bc76:	1e03      	subs	r3, r0, #0
    bc78:	d001      	beq.n	bc7e <sd_mmc_get_type+0x1e>
		return CARD_TYPE_UNKNOWN;
    bc7a:	2300      	movs	r3, #0
    bc7c:	e004      	b.n	bc88 <sd_mmc_get_type+0x28>
	}
	sd_mmc_deselect_slot();
    bc7e:	4b05      	ldr	r3, [pc, #20]	; (bc94 <sd_mmc_get_type+0x34>)
    bc80:	4798      	blx	r3
	return sd_mmc_card->type;
    bc82:	4b05      	ldr	r3, [pc, #20]	; (bc98 <sd_mmc_get_type+0x38>)
    bc84:	681b      	ldr	r3, [r3, #0]
    bc86:	7adb      	ldrb	r3, [r3, #11]
}
    bc88:	0018      	movs	r0, r3
    bc8a:	46bd      	mov	sp, r7
    bc8c:	b002      	add	sp, #8
    bc8e:	bd80      	pop	{r7, pc}
    bc90:	0000b7d1 	.word	0x0000b7d1
    bc94:	0000b8cd 	.word	0x0000b8cd
    bc98:	20003cc0 	.word	0x20003cc0

0000bc9c <sd_mmc_get_capacity>:
	sd_mmc_deselect_slot();
	return sd_mmc_card->version;
}

uint32_t sd_mmc_get_capacity(uint8_t slot)
{
    bc9c:	b580      	push	{r7, lr}
    bc9e:	b082      	sub	sp, #8
    bca0:	af00      	add	r7, sp, #0
    bca2:	0002      	movs	r2, r0
    bca4:	1dfb      	adds	r3, r7, #7
    bca6:	701a      	strb	r2, [r3, #0]
	if (SD_MMC_OK != sd_mmc_select_slot(slot)) {
    bca8:	1dfb      	adds	r3, r7, #7
    bcaa:	781b      	ldrb	r3, [r3, #0]
    bcac:	0018      	movs	r0, r3
    bcae:	4b07      	ldr	r3, [pc, #28]	; (bccc <sd_mmc_get_capacity+0x30>)
    bcb0:	4798      	blx	r3
    bcb2:	1e03      	subs	r3, r0, #0
    bcb4:	d001      	beq.n	bcba <sd_mmc_get_capacity+0x1e>
		return 0;
    bcb6:	2300      	movs	r3, #0
    bcb8:	e004      	b.n	bcc4 <sd_mmc_get_capacity+0x28>
	}
	sd_mmc_deselect_slot();
    bcba:	4b05      	ldr	r3, [pc, #20]	; (bcd0 <sd_mmc_get_capacity+0x34>)
    bcbc:	4798      	blx	r3
	return sd_mmc_card->capacity;
    bcbe:	4b05      	ldr	r3, [pc, #20]	; (bcd4 <sd_mmc_get_capacity+0x38>)
    bcc0:	681b      	ldr	r3, [r3, #0]
    bcc2:	685b      	ldr	r3, [r3, #4]
}
    bcc4:	0018      	movs	r0, r3
    bcc6:	46bd      	mov	sp, r7
    bcc8:	b002      	add	sp, #8
    bcca:	bd80      	pop	{r7, pc}
    bccc:	0000b7d1 	.word	0x0000b7d1
    bcd0:	0000b8cd 	.word	0x0000b8cd
    bcd4:	20003cc0 	.word	0x20003cc0

0000bcd8 <sd_mmc_is_write_protected>:

bool sd_mmc_is_write_protected(uint8_t slot)
{
    bcd8:	b580      	push	{r7, lr}
    bcda:	b082      	sub	sp, #8
    bcdc:	af00      	add	r7, sp, #0
    bcde:	0002      	movs	r2, r0
    bce0:	1dfb      	adds	r3, r7, #7
    bce2:	701a      	strb	r2, [r3, #0]
	if (port_pin_get_input_level(sd_mmc_cards[slot].wp_gpio)
			== SD_MMC_0_WP_DETECT_VALUE) {
		return true;
	}
#endif
	return false;
    bce4:	2300      	movs	r3, #0
}
    bce6:	0018      	movs	r0, r3
    bce8:	46bd      	mov	sp, r7
    bcea:	b002      	add	sp, #8
    bcec:	bd80      	pop	{r7, pc}
	...

0000bcf0 <sd_mmc_init_read_blocks>:

sd_mmc_err_t sd_mmc_init_read_blocks(uint8_t slot, uint32_t start,
		uint16_t nb_block)
{
    bcf0:	b590      	push	{r4, r7, lr}
    bcf2:	b089      	sub	sp, #36	; 0x24
    bcf4:	af02      	add	r7, sp, #8
    bcf6:	6039      	str	r1, [r7, #0]
    bcf8:	0011      	movs	r1, r2
    bcfa:	1dfb      	adds	r3, r7, #7
    bcfc:	1c02      	adds	r2, r0, #0
    bcfe:	701a      	strb	r2, [r3, #0]
    bd00:	1d3b      	adds	r3, r7, #4
    bd02:	1c0a      	adds	r2, r1, #0
    bd04:	801a      	strh	r2, [r3, #0]
	sd_mmc_err_t sd_mmc_err;
	uint32_t cmd, arg, resp;

	sd_mmc_err = sd_mmc_select_slot(slot);
    bd06:	230f      	movs	r3, #15
    bd08:	18fc      	adds	r4, r7, r3
    bd0a:	1dfb      	adds	r3, r7, #7
    bd0c:	781b      	ldrb	r3, [r3, #0]
    bd0e:	0018      	movs	r0, r3
    bd10:	4b29      	ldr	r3, [pc, #164]	; (bdb8 <sd_mmc_init_read_blocks+0xc8>)
    bd12:	4798      	blx	r3
    bd14:	0003      	movs	r3, r0
    bd16:	7023      	strb	r3, [r4, #0]
	if (sd_mmc_err != SD_MMC_OK) {
    bd18:	230f      	movs	r3, #15
    bd1a:	18fb      	adds	r3, r7, r3
    bd1c:	781b      	ldrb	r3, [r3, #0]
    bd1e:	2b00      	cmp	r3, #0
    bd20:	d003      	beq.n	bd2a <sd_mmc_init_read_blocks+0x3a>
		return sd_mmc_err;
    bd22:	230f      	movs	r3, #15
    bd24:	18fb      	adds	r3, r7, r3
    bd26:	781b      	ldrb	r3, [r3, #0]
    bd28:	e041      	b.n	bdae <sd_mmc_init_read_blocks+0xbe>
	}

	// Wait for data ready status
	if (!sd_mmc_cmd13()) {
    bd2a:	4b24      	ldr	r3, [pc, #144]	; (bdbc <sd_mmc_init_read_blocks+0xcc>)
    bd2c:	4798      	blx	r3
    bd2e:	0003      	movs	r3, r0
    bd30:	001a      	movs	r2, r3
    bd32:	2301      	movs	r3, #1
    bd34:	4053      	eors	r3, r2
    bd36:	b2db      	uxtb	r3, r3
    bd38:	2b00      	cmp	r3, #0
    bd3a:	d003      	beq.n	bd44 <sd_mmc_init_read_blocks+0x54>
		sd_mmc_deselect_slot();
    bd3c:	4b20      	ldr	r3, [pc, #128]	; (bdc0 <sd_mmc_init_read_blocks+0xd0>)
    bd3e:	4798      	blx	r3
		return SD_MMC_ERR_COMM;
    bd40:	2305      	movs	r3, #5
    bd42:	e034      	b.n	bdae <sd_mmc_init_read_blocks+0xbe>
	}

	if (nb_block > 1) {
    bd44:	1d3b      	adds	r3, r7, #4
    bd46:	881b      	ldrh	r3, [r3, #0]
    bd48:	2b01      	cmp	r3, #1
    bd4a:	d902      	bls.n	bd52 <sd_mmc_init_read_blocks+0x62>
		cmd = SDMMC_CMD18_READ_MULTIPLE_BLOCK;
    bd4c:	4b1d      	ldr	r3, [pc, #116]	; (bdc4 <sd_mmc_init_read_blocks+0xd4>)
    bd4e:	617b      	str	r3, [r7, #20]
    bd50:	e001      	b.n	bd56 <sd_mmc_init_read_blocks+0x66>
	} else {
		cmd = SDMMC_CMD17_READ_SINGLE_BLOCK;
    bd52:	4b1d      	ldr	r3, [pc, #116]	; (bdc8 <sd_mmc_init_read_blocks+0xd8>)
    bd54:	617b      	str	r3, [r7, #20]
	}
	/*
	 * SDSC Card (CCS=0) uses byte unit address,
	 * SDHC and SDXC Cards (CCS=1) use block unit address (512 Bytes unit).
	 */
	if (sd_mmc_card->type & CARD_TYPE_HC) {
    bd56:	4b1d      	ldr	r3, [pc, #116]	; (bdcc <sd_mmc_init_read_blocks+0xdc>)
    bd58:	681b      	ldr	r3, [r3, #0]
    bd5a:	7adb      	ldrb	r3, [r3, #11]
    bd5c:	001a      	movs	r2, r3
    bd5e:	2308      	movs	r3, #8
    bd60:	4013      	ands	r3, r2
    bd62:	d002      	beq.n	bd6a <sd_mmc_init_read_blocks+0x7a>
		arg = start;
    bd64:	683b      	ldr	r3, [r7, #0]
    bd66:	613b      	str	r3, [r7, #16]
    bd68:	e002      	b.n	bd70 <sd_mmc_init_read_blocks+0x80>
	} else {
		arg = (start * SD_MMC_BLOCK_SIZE);
    bd6a:	683b      	ldr	r3, [r7, #0]
    bd6c:	025b      	lsls	r3, r3, #9
    bd6e:	613b      	str	r3, [r7, #16]
	}

	if (!driver_adtc_start(cmd, arg, SD_MMC_BLOCK_SIZE, nb_block, true)) {
    bd70:	1d3b      	adds	r3, r7, #4
    bd72:	881c      	ldrh	r4, [r3, #0]
    bd74:	2380      	movs	r3, #128	; 0x80
    bd76:	009a      	lsls	r2, r3, #2
    bd78:	6939      	ldr	r1, [r7, #16]
    bd7a:	6978      	ldr	r0, [r7, #20]
    bd7c:	2301      	movs	r3, #1
    bd7e:	9300      	str	r3, [sp, #0]
    bd80:	0023      	movs	r3, r4
    bd82:	4c13      	ldr	r4, [pc, #76]	; (bdd0 <sd_mmc_init_read_blocks+0xe0>)
    bd84:	47a0      	blx	r4
    bd86:	0003      	movs	r3, r0
    bd88:	001a      	movs	r2, r3
    bd8a:	2301      	movs	r3, #1
    bd8c:	4053      	eors	r3, r2
    bd8e:	b2db      	uxtb	r3, r3
    bd90:	2b00      	cmp	r3, #0
    bd92:	d003      	beq.n	bd9c <sd_mmc_init_read_blocks+0xac>
		sd_mmc_deselect_slot();
    bd94:	4b0a      	ldr	r3, [pc, #40]	; (bdc0 <sd_mmc_init_read_blocks+0xd0>)
    bd96:	4798      	blx	r3
		return SD_MMC_ERR_COMM;
    bd98:	2305      	movs	r3, #5
    bd9a:	e008      	b.n	bdae <sd_mmc_init_read_blocks+0xbe>
					__func__, (int)SDMMC_CMD_GET_INDEX(cmd), resp);
			sd_mmc_deselect_slot();
			return SD_MMC_ERR_COMM;
		}
	}
	sd_mmc_nb_block_remaining = nb_block;
    bd9c:	4b0d      	ldr	r3, [pc, #52]	; (bdd4 <sd_mmc_init_read_blocks+0xe4>)
    bd9e:	1d3a      	adds	r2, r7, #4
    bda0:	8812      	ldrh	r2, [r2, #0]
    bda2:	801a      	strh	r2, [r3, #0]
	sd_mmc_nb_block_to_tranfer = nb_block;
    bda4:	4b0c      	ldr	r3, [pc, #48]	; (bdd8 <sd_mmc_init_read_blocks+0xe8>)
    bda6:	1d3a      	adds	r2, r7, #4
    bda8:	8812      	ldrh	r2, [r2, #0]
    bdaa:	801a      	strh	r2, [r3, #0]
	return SD_MMC_OK;
    bdac:	2300      	movs	r3, #0
}
    bdae:	0018      	movs	r0, r3
    bdb0:	46bd      	mov	sp, r7
    bdb2:	b007      	add	sp, #28
    bdb4:	bd90      	pop	{r4, r7, pc}
    bdb6:	46c0      	nop			; (mov r8, r8)
    bdb8:	0000b7d1 	.word	0x0000b7d1
    bdbc:	0000b66d 	.word	0x0000b66d
    bdc0:	0000b8cd 	.word	0x0000b8cd
    bdc4:	00101112 	.word	0x00101112
    bdc8:	00081111 	.word	0x00081111
    bdcc:	20003cc0 	.word	0x20003cc0
    bdd0:	0000cb4d 	.word	0x0000cb4d
    bdd4:	20003cc6 	.word	0x20003cc6
    bdd8:	20003cc4 	.word	0x20003cc4

0000bddc <sd_mmc_start_read_blocks>:

sd_mmc_err_t sd_mmc_start_read_blocks(void *dest, uint16_t nb_block)
{
    bddc:	b580      	push	{r7, lr}
    bdde:	b082      	sub	sp, #8
    bde0:	af00      	add	r7, sp, #0
    bde2:	6078      	str	r0, [r7, #4]
    bde4:	000a      	movs	r2, r1
    bde6:	1cbb      	adds	r3, r7, #2
    bde8:	801a      	strh	r2, [r3, #0]
	Assert(sd_mmc_nb_block_remaining >= nb_block);

	if (!driver_start_read_blocks(dest, nb_block)) {
    bdea:	1cbb      	adds	r3, r7, #2
    bdec:	881a      	ldrh	r2, [r3, #0]
    bdee:	687b      	ldr	r3, [r7, #4]
    bdf0:	0011      	movs	r1, r2
    bdf2:	0018      	movs	r0, r3
    bdf4:	4b0d      	ldr	r3, [pc, #52]	; (be2c <sd_mmc_start_read_blocks+0x50>)
    bdf6:	4798      	blx	r3
    bdf8:	0003      	movs	r3, r0
    bdfa:	001a      	movs	r2, r3
    bdfc:	2301      	movs	r3, #1
    bdfe:	4053      	eors	r3, r2
    be00:	b2db      	uxtb	r3, r3
    be02:	2b00      	cmp	r3, #0
    be04:	d004      	beq.n	be10 <sd_mmc_start_read_blocks+0x34>
		sd_mmc_nb_block_remaining = 0;
    be06:	4b0a      	ldr	r3, [pc, #40]	; (be30 <sd_mmc_start_read_blocks+0x54>)
    be08:	2200      	movs	r2, #0
    be0a:	801a      	strh	r2, [r3, #0]
		return SD_MMC_ERR_COMM;
    be0c:	2305      	movs	r3, #5
    be0e:	e008      	b.n	be22 <sd_mmc_start_read_blocks+0x46>
	}
	sd_mmc_nb_block_remaining -= nb_block;
    be10:	4b07      	ldr	r3, [pc, #28]	; (be30 <sd_mmc_start_read_blocks+0x54>)
    be12:	881a      	ldrh	r2, [r3, #0]
    be14:	1cbb      	adds	r3, r7, #2
    be16:	881b      	ldrh	r3, [r3, #0]
    be18:	1ad3      	subs	r3, r2, r3
    be1a:	b29a      	uxth	r2, r3
    be1c:	4b04      	ldr	r3, [pc, #16]	; (be30 <sd_mmc_start_read_blocks+0x54>)
    be1e:	801a      	strh	r2, [r3, #0]
	return SD_MMC_OK;
    be20:	2300      	movs	r3, #0
}
    be22:	0018      	movs	r0, r3
    be24:	46bd      	mov	sp, r7
    be26:	b002      	add	sp, #8
    be28:	bd80      	pop	{r7, pc}
    be2a:	46c0      	nop			; (mov r8, r8)
    be2c:	0000ce1d 	.word	0x0000ce1d
    be30:	20003cc6 	.word	0x20003cc6

0000be34 <sd_mmc_wait_end_of_read_blocks>:

sd_mmc_err_t sd_mmc_wait_end_of_read_blocks(bool abort)
{
    be34:	b580      	push	{r7, lr}
    be36:	b082      	sub	sp, #8
    be38:	af00      	add	r7, sp, #0
    be3a:	0002      	movs	r2, r0
    be3c:	1dfb      	adds	r3, r7, #7
    be3e:	701a      	strb	r2, [r3, #0]
	if (!driver_wait_end_of_read_blocks()) {
    be40:	4b1c      	ldr	r3, [pc, #112]	; (beb4 <sd_mmc_wait_end_of_read_blocks+0x80>)
    be42:	4798      	blx	r3
    be44:	0003      	movs	r3, r0
    be46:	001a      	movs	r2, r3
    be48:	2301      	movs	r3, #1
    be4a:	4053      	eors	r3, r2
    be4c:	b2db      	uxtb	r3, r3
    be4e:	2b00      	cmp	r3, #0
    be50:	d001      	beq.n	be56 <sd_mmc_wait_end_of_read_blocks+0x22>
		return SD_MMC_ERR_COMM;
    be52:	2305      	movs	r3, #5
    be54:	e029      	b.n	beaa <sd_mmc_wait_end_of_read_blocks+0x76>
	}
	if (abort) {
    be56:	1dfb      	adds	r3, r7, #7
    be58:	781b      	ldrb	r3, [r3, #0]
    be5a:	2b00      	cmp	r3, #0
    be5c:	d003      	beq.n	be66 <sd_mmc_wait_end_of_read_blocks+0x32>
		sd_mmc_nb_block_remaining = 0;
    be5e:	4b16      	ldr	r3, [pc, #88]	; (beb8 <sd_mmc_wait_end_of_read_blocks+0x84>)
    be60:	2200      	movs	r2, #0
    be62:	801a      	strh	r2, [r3, #0]
    be64:	e005      	b.n	be72 <sd_mmc_wait_end_of_read_blocks+0x3e>
	} else if (sd_mmc_nb_block_remaining) {
    be66:	4b14      	ldr	r3, [pc, #80]	; (beb8 <sd_mmc_wait_end_of_read_blocks+0x84>)
    be68:	881b      	ldrh	r3, [r3, #0]
    be6a:	2b00      	cmp	r3, #0
    be6c:	d001      	beq.n	be72 <sd_mmc_wait_end_of_read_blocks+0x3e>
		return SD_MMC_OK;
    be6e:	2300      	movs	r3, #0
    be70:	e01b      	b.n	beaa <sd_mmc_wait_end_of_read_blocks+0x76>
	}

	// All blocks are transfered then stop read operation
	if (sd_mmc_nb_block_to_tranfer == 1) {
    be72:	4b12      	ldr	r3, [pc, #72]	; (bebc <sd_mmc_wait_end_of_read_blocks+0x88>)
    be74:	881b      	ldrh	r3, [r3, #0]
    be76:	2b01      	cmp	r3, #1
    be78:	d103      	bne.n	be82 <sd_mmc_wait_end_of_read_blocks+0x4e>
		// Single block transfer, then nothing to do
		sd_mmc_deselect_slot();
    be7a:	4b11      	ldr	r3, [pc, #68]	; (bec0 <sd_mmc_wait_end_of_read_blocks+0x8c>)
    be7c:	4798      	blx	r3
		return SD_MMC_OK;
    be7e:	2300      	movs	r3, #0
    be80:	e013      	b.n	beaa <sd_mmc_wait_end_of_read_blocks+0x76>
	}
	// WORKAROUND for no compliance card (Atmel Internal ref. !MMC7 !SD19):
	// The errors on this command must be ignored
	// and one retry can be necessary in SPI mode for no compliance card.
	if (!driver_adtc_stop(SDMMC_CMD12_STOP_TRANSMISSION, 0)) {
    be82:	4b10      	ldr	r3, [pc, #64]	; (bec4 <sd_mmc_wait_end_of_read_blocks+0x90>)
    be84:	2100      	movs	r1, #0
    be86:	0018      	movs	r0, r3
    be88:	4b0f      	ldr	r3, [pc, #60]	; (bec8 <sd_mmc_wait_end_of_read_blocks+0x94>)
    be8a:	4798      	blx	r3
    be8c:	0003      	movs	r3, r0
    be8e:	001a      	movs	r2, r3
    be90:	2301      	movs	r3, #1
    be92:	4053      	eors	r3, r2
    be94:	b2db      	uxtb	r3, r3
    be96:	2b00      	cmp	r3, #0
    be98:	d004      	beq.n	bea4 <sd_mmc_wait_end_of_read_blocks+0x70>
		driver_adtc_stop(SDMMC_CMD12_STOP_TRANSMISSION, 0);
    be9a:	4b0a      	ldr	r3, [pc, #40]	; (bec4 <sd_mmc_wait_end_of_read_blocks+0x90>)
    be9c:	2100      	movs	r1, #0
    be9e:	0018      	movs	r0, r3
    bea0:	4b09      	ldr	r3, [pc, #36]	; (bec8 <sd_mmc_wait_end_of_read_blocks+0x94>)
    bea2:	4798      	blx	r3
	}
	sd_mmc_deselect_slot();
    bea4:	4b06      	ldr	r3, [pc, #24]	; (bec0 <sd_mmc_wait_end_of_read_blocks+0x8c>)
    bea6:	4798      	blx	r3
	return SD_MMC_OK;
    bea8:	2300      	movs	r3, #0
}
    beaa:	0018      	movs	r0, r3
    beac:	46bd      	mov	sp, r7
    beae:	b002      	add	sp, #8
    beb0:	bd80      	pop	{r7, pc}
    beb2:	46c0      	nop			; (mov r8, r8)
    beb4:	0000cec1 	.word	0x0000cec1
    beb8:	20003cc6 	.word	0x20003cc6
    bebc:	20003cc4 	.word	0x20003cc4
    bec0:	0000b8cd 	.word	0x0000b8cd
    bec4:	0000310c 	.word	0x0000310c
    bec8:	0000cb25 	.word	0x0000cb25

0000becc <sd_mmc_init_write_blocks>:

sd_mmc_err_t sd_mmc_init_write_blocks(uint8_t slot, uint32_t start,
		uint16_t nb_block)
{
    becc:	b590      	push	{r4, r7, lr}
    bece:	b089      	sub	sp, #36	; 0x24
    bed0:	af02      	add	r7, sp, #8
    bed2:	6039      	str	r1, [r7, #0]
    bed4:	0011      	movs	r1, r2
    bed6:	1dfb      	adds	r3, r7, #7
    bed8:	1c02      	adds	r2, r0, #0
    beda:	701a      	strb	r2, [r3, #0]
    bedc:	1d3b      	adds	r3, r7, #4
    bede:	1c0a      	adds	r2, r1, #0
    bee0:	801a      	strh	r2, [r3, #0]
	sd_mmc_err_t sd_mmc_err;
	uint32_t cmd, arg, resp;

	sd_mmc_err = sd_mmc_select_slot(slot);
    bee2:	230f      	movs	r3, #15
    bee4:	18fc      	adds	r4, r7, r3
    bee6:	1dfb      	adds	r3, r7, #7
    bee8:	781b      	ldrb	r3, [r3, #0]
    beea:	0018      	movs	r0, r3
    beec:	4b28      	ldr	r3, [pc, #160]	; (bf90 <sd_mmc_init_write_blocks+0xc4>)
    beee:	4798      	blx	r3
    bef0:	0003      	movs	r3, r0
    bef2:	7023      	strb	r3, [r4, #0]
	if (sd_mmc_err != SD_MMC_OK) {
    bef4:	230f      	movs	r3, #15
    bef6:	18fb      	adds	r3, r7, r3
    bef8:	781b      	ldrb	r3, [r3, #0]
    befa:	2b00      	cmp	r3, #0
    befc:	d003      	beq.n	bf06 <sd_mmc_init_write_blocks+0x3a>
		return sd_mmc_err;
    befe:	230f      	movs	r3, #15
    bf00:	18fb      	adds	r3, r7, r3
    bf02:	781b      	ldrb	r3, [r3, #0]
    bf04:	e03f      	b.n	bf86 <sd_mmc_init_write_blocks+0xba>
	}
	if (sd_mmc_is_write_protected(slot)) {
    bf06:	1dfb      	adds	r3, r7, #7
    bf08:	781b      	ldrb	r3, [r3, #0]
    bf0a:	0018      	movs	r0, r3
    bf0c:	4b21      	ldr	r3, [pc, #132]	; (bf94 <sd_mmc_init_write_blocks+0xc8>)
    bf0e:	4798      	blx	r3
    bf10:	1e03      	subs	r3, r0, #0
    bf12:	d003      	beq.n	bf1c <sd_mmc_init_write_blocks+0x50>
		sd_mmc_deselect_slot();
    bf14:	4b20      	ldr	r3, [pc, #128]	; (bf98 <sd_mmc_init_write_blocks+0xcc>)
    bf16:	4798      	blx	r3
		return SD_MMC_ERR_WP;
    bf18:	2307      	movs	r3, #7
    bf1a:	e034      	b.n	bf86 <sd_mmc_init_write_blocks+0xba>
	}

	if (nb_block > 1) {
    bf1c:	1d3b      	adds	r3, r7, #4
    bf1e:	881b      	ldrh	r3, [r3, #0]
    bf20:	2b01      	cmp	r3, #1
    bf22:	d902      	bls.n	bf2a <sd_mmc_init_write_blocks+0x5e>
		cmd = SDMMC_CMD25_WRITE_MULTIPLE_BLOCK;
    bf24:	4b1d      	ldr	r3, [pc, #116]	; (bf9c <sd_mmc_init_write_blocks+0xd0>)
    bf26:	617b      	str	r3, [r7, #20]
    bf28:	e001      	b.n	bf2e <sd_mmc_init_write_blocks+0x62>
	} else {
		cmd = SDMMC_CMD24_WRITE_BLOCK;
    bf2a:	4b1d      	ldr	r3, [pc, #116]	; (bfa0 <sd_mmc_init_write_blocks+0xd4>)
    bf2c:	617b      	str	r3, [r7, #20]
	}
	/*
	 * SDSC Card (CCS=0) uses byte unit address,
	 * SDHC and SDXC Cards (CCS=1) use block unit address (512 Bytes unit).
	 */
	if (sd_mmc_card->type & CARD_TYPE_HC) {
    bf2e:	4b1d      	ldr	r3, [pc, #116]	; (bfa4 <sd_mmc_init_write_blocks+0xd8>)
    bf30:	681b      	ldr	r3, [r3, #0]
    bf32:	7adb      	ldrb	r3, [r3, #11]
    bf34:	001a      	movs	r2, r3
    bf36:	2308      	movs	r3, #8
    bf38:	4013      	ands	r3, r2
    bf3a:	d002      	beq.n	bf42 <sd_mmc_init_write_blocks+0x76>
		arg = start;
    bf3c:	683b      	ldr	r3, [r7, #0]
    bf3e:	613b      	str	r3, [r7, #16]
    bf40:	e002      	b.n	bf48 <sd_mmc_init_write_blocks+0x7c>
	} else {
		arg = (start * SD_MMC_BLOCK_SIZE);
    bf42:	683b      	ldr	r3, [r7, #0]
    bf44:	025b      	lsls	r3, r3, #9
    bf46:	613b      	str	r3, [r7, #16]
	}
	if (!driver_adtc_start(cmd, arg, SD_MMC_BLOCK_SIZE, nb_block, true)) {
    bf48:	1d3b      	adds	r3, r7, #4
    bf4a:	881c      	ldrh	r4, [r3, #0]
    bf4c:	2380      	movs	r3, #128	; 0x80
    bf4e:	009a      	lsls	r2, r3, #2
    bf50:	6939      	ldr	r1, [r7, #16]
    bf52:	6978      	ldr	r0, [r7, #20]
    bf54:	2301      	movs	r3, #1
    bf56:	9300      	str	r3, [sp, #0]
    bf58:	0023      	movs	r3, r4
    bf5a:	4c13      	ldr	r4, [pc, #76]	; (bfa8 <sd_mmc_init_write_blocks+0xdc>)
    bf5c:	47a0      	blx	r4
    bf5e:	0003      	movs	r3, r0
    bf60:	001a      	movs	r2, r3
    bf62:	2301      	movs	r3, #1
    bf64:	4053      	eors	r3, r2
    bf66:	b2db      	uxtb	r3, r3
    bf68:	2b00      	cmp	r3, #0
    bf6a:	d003      	beq.n	bf74 <sd_mmc_init_write_blocks+0xa8>
		sd_mmc_deselect_slot();
    bf6c:	4b0a      	ldr	r3, [pc, #40]	; (bf98 <sd_mmc_init_write_blocks+0xcc>)
    bf6e:	4798      	blx	r3
		return SD_MMC_ERR_COMM;
    bf70:	2305      	movs	r3, #5
    bf72:	e008      	b.n	bf86 <sd_mmc_init_write_blocks+0xba>
					__func__, (int)SDMMC_CMD_GET_INDEX(cmd), resp);
			sd_mmc_deselect_slot();
			return SD_MMC_ERR_COMM;
		}
	}
	sd_mmc_nb_block_remaining = nb_block;
    bf74:	4b0d      	ldr	r3, [pc, #52]	; (bfac <sd_mmc_init_write_blocks+0xe0>)
    bf76:	1d3a      	adds	r2, r7, #4
    bf78:	8812      	ldrh	r2, [r2, #0]
    bf7a:	801a      	strh	r2, [r3, #0]
	sd_mmc_nb_block_to_tranfer = nb_block;
    bf7c:	4b0c      	ldr	r3, [pc, #48]	; (bfb0 <sd_mmc_init_write_blocks+0xe4>)
    bf7e:	1d3a      	adds	r2, r7, #4
    bf80:	8812      	ldrh	r2, [r2, #0]
    bf82:	801a      	strh	r2, [r3, #0]
	return SD_MMC_OK;
    bf84:	2300      	movs	r3, #0
}
    bf86:	0018      	movs	r0, r3
    bf88:	46bd      	mov	sp, r7
    bf8a:	b007      	add	sp, #28
    bf8c:	bd90      	pop	{r4, r7, pc}
    bf8e:	46c0      	nop			; (mov r8, r8)
    bf90:	0000b7d1 	.word	0x0000b7d1
    bf94:	0000bcd9 	.word	0x0000bcd9
    bf98:	0000b8cd 	.word	0x0000b8cd
    bf9c:	00109119 	.word	0x00109119
    bfa0:	00089118 	.word	0x00089118
    bfa4:	20003cc0 	.word	0x20003cc0
    bfa8:	0000cb4d 	.word	0x0000cb4d
    bfac:	20003cc6 	.word	0x20003cc6
    bfb0:	20003cc4 	.word	0x20003cc4

0000bfb4 <sd_mmc_start_write_blocks>:

sd_mmc_err_t sd_mmc_start_write_blocks(const void *src, uint16_t nb_block)
{
    bfb4:	b580      	push	{r7, lr}
    bfb6:	b082      	sub	sp, #8
    bfb8:	af00      	add	r7, sp, #0
    bfba:	6078      	str	r0, [r7, #4]
    bfbc:	000a      	movs	r2, r1
    bfbe:	1cbb      	adds	r3, r7, #2
    bfc0:	801a      	strh	r2, [r3, #0]
	Assert(sd_mmc_nb_block_remaining >= nb_block);
	if (!driver_start_write_blocks(src, nb_block)) {
    bfc2:	1cbb      	adds	r3, r7, #2
    bfc4:	881a      	ldrh	r2, [r3, #0]
    bfc6:	687b      	ldr	r3, [r7, #4]
    bfc8:	0011      	movs	r1, r2
    bfca:	0018      	movs	r0, r3
    bfcc:	4b0d      	ldr	r3, [pc, #52]	; (c004 <sd_mmc_start_write_blocks+0x50>)
    bfce:	4798      	blx	r3
    bfd0:	0003      	movs	r3, r0
    bfd2:	001a      	movs	r2, r3
    bfd4:	2301      	movs	r3, #1
    bfd6:	4053      	eors	r3, r2
    bfd8:	b2db      	uxtb	r3, r3
    bfda:	2b00      	cmp	r3, #0
    bfdc:	d004      	beq.n	bfe8 <sd_mmc_start_write_blocks+0x34>
		sd_mmc_nb_block_remaining = 0;
    bfde:	4b0a      	ldr	r3, [pc, #40]	; (c008 <sd_mmc_start_write_blocks+0x54>)
    bfe0:	2200      	movs	r2, #0
    bfe2:	801a      	strh	r2, [r3, #0]
		return SD_MMC_ERR_COMM;
    bfe4:	2305      	movs	r3, #5
    bfe6:	e008      	b.n	bffa <sd_mmc_start_write_blocks+0x46>
	}
	sd_mmc_nb_block_remaining -= nb_block;
    bfe8:	4b07      	ldr	r3, [pc, #28]	; (c008 <sd_mmc_start_write_blocks+0x54>)
    bfea:	881a      	ldrh	r2, [r3, #0]
    bfec:	1cbb      	adds	r3, r7, #2
    bfee:	881b      	ldrh	r3, [r3, #0]
    bff0:	1ad3      	subs	r3, r2, r3
    bff2:	b29a      	uxth	r2, r3
    bff4:	4b04      	ldr	r3, [pc, #16]	; (c008 <sd_mmc_start_write_blocks+0x54>)
    bff6:	801a      	strh	r2, [r3, #0]
	return SD_MMC_OK;
    bff8:	2300      	movs	r3, #0
}
    bffa:	0018      	movs	r0, r3
    bffc:	46bd      	mov	sp, r7
    bffe:	b002      	add	sp, #8
    c000:	bd80      	pop	{r7, pc}
    c002:	46c0      	nop			; (mov r8, r8)
    c004:	0000cecd 	.word	0x0000cecd
    c008:	20003cc6 	.word	0x20003cc6

0000c00c <sd_mmc_wait_end_of_write_blocks>:

sd_mmc_err_t sd_mmc_wait_end_of_write_blocks(bool abort)
{
    c00c:	b580      	push	{r7, lr}
    c00e:	b082      	sub	sp, #8
    c010:	af00      	add	r7, sp, #0
    c012:	0002      	movs	r2, r0
    c014:	1dfb      	adds	r3, r7, #7
    c016:	701a      	strb	r2, [r3, #0]
	if (!driver_wait_end_of_write_blocks()) {
    c018:	4b13      	ldr	r3, [pc, #76]	; (c068 <sd_mmc_wait_end_of_write_blocks+0x5c>)
    c01a:	4798      	blx	r3
    c01c:	0003      	movs	r3, r0
    c01e:	001a      	movs	r2, r3
    c020:	2301      	movs	r3, #1
    c022:	4053      	eors	r3, r2
    c024:	b2db      	uxtb	r3, r3
    c026:	2b00      	cmp	r3, #0
    c028:	d001      	beq.n	c02e <sd_mmc_wait_end_of_write_blocks+0x22>
		return SD_MMC_ERR_COMM;
    c02a:	2305      	movs	r3, #5
    c02c:	e018      	b.n	c060 <sd_mmc_wait_end_of_write_blocks+0x54>
	}
	if (abort) {
    c02e:	1dfb      	adds	r3, r7, #7
    c030:	781b      	ldrb	r3, [r3, #0]
    c032:	2b00      	cmp	r3, #0
    c034:	d003      	beq.n	c03e <sd_mmc_wait_end_of_write_blocks+0x32>
		sd_mmc_nb_block_remaining = 0;
    c036:	4b0d      	ldr	r3, [pc, #52]	; (c06c <sd_mmc_wait_end_of_write_blocks+0x60>)
    c038:	2200      	movs	r2, #0
    c03a:	801a      	strh	r2, [r3, #0]
    c03c:	e005      	b.n	c04a <sd_mmc_wait_end_of_write_blocks+0x3e>
	} else if (sd_mmc_nb_block_remaining) {
    c03e:	4b0b      	ldr	r3, [pc, #44]	; (c06c <sd_mmc_wait_end_of_write_blocks+0x60>)
    c040:	881b      	ldrh	r3, [r3, #0]
    c042:	2b00      	cmp	r3, #0
    c044:	d001      	beq.n	c04a <sd_mmc_wait_end_of_write_blocks+0x3e>
		return SD_MMC_OK;
    c046:	2300      	movs	r3, #0
    c048:	e00a      	b.n	c060 <sd_mmc_wait_end_of_write_blocks+0x54>
	}

	// All blocks are transfered then stop write operation
	if (sd_mmc_nb_block_to_tranfer == 1) {
    c04a:	4b09      	ldr	r3, [pc, #36]	; (c070 <sd_mmc_wait_end_of_write_blocks+0x64>)
    c04c:	881b      	ldrh	r3, [r3, #0]
    c04e:	2b01      	cmp	r3, #1
    c050:	d103      	bne.n	c05a <sd_mmc_wait_end_of_write_blocks+0x4e>
		// Single block transfer, then nothing to do
		sd_mmc_deselect_slot();
    c052:	4b08      	ldr	r3, [pc, #32]	; (c074 <sd_mmc_wait_end_of_write_blocks+0x68>)
    c054:	4798      	blx	r3
		return SD_MMC_OK;
    c056:	2300      	movs	r3, #0
    c058:	e002      	b.n	c060 <sd_mmc_wait_end_of_write_blocks+0x54>
		if (!driver_adtc_stop(SDMMC_CMD12_STOP_TRANSMISSION, 0)) {
			sd_mmc_deselect_slot();
			return SD_MMC_ERR_COMM;
		}
	}
	sd_mmc_deselect_slot();
    c05a:	4b06      	ldr	r3, [pc, #24]	; (c074 <sd_mmc_wait_end_of_write_blocks+0x68>)
    c05c:	4798      	blx	r3
	return SD_MMC_OK;
    c05e:	2300      	movs	r3, #0
}
    c060:	0018      	movs	r0, r3
    c062:	46bd      	mov	sp, r7
    c064:	b002      	add	sp, #8
    c066:	bd80      	pop	{r7, pc}
    c068:	0000cf8d 	.word	0x0000cf8d
    c06c:	20003cc6 	.word	0x20003cc6
    c070:	20003cc4 	.word	0x20003cc4
    c074:	0000b8cd 	.word	0x0000b8cd

0000c078 <sd_mmc_test_unit_ready>:
 */

static bool sd_mmc_ejected[2] = {false, false};

Ctrl_status sd_mmc_test_unit_ready(uint8_t slot)
{
    c078:	b580      	push	{r7, lr}
    c07a:	b082      	sub	sp, #8
    c07c:	af00      	add	r7, sp, #0
    c07e:	0002      	movs	r2, r0
    c080:	1dfb      	adds	r3, r7, #7
    c082:	701a      	strb	r2, [r3, #0]
	switch (sd_mmc_check(slot))
    c084:	1dfb      	adds	r3, r7, #7
    c086:	781b      	ldrb	r3, [r3, #0]
    c088:	0018      	movs	r0, r3
    c08a:	4b16      	ldr	r3, [pc, #88]	; (c0e4 <sd_mmc_test_unit_ready+0x6c>)
    c08c:	4798      	blx	r3
    c08e:	0003      	movs	r3, r0
    c090:	2b01      	cmp	r3, #1
    c092:	d019      	beq.n	c0c8 <sd_mmc_test_unit_ready+0x50>
    c094:	2b02      	cmp	r3, #2
    c096:	d019      	beq.n	c0cc <sd_mmc_test_unit_ready+0x54>
    c098:	2b00      	cmp	r3, #0
    c09a:	d11e      	bne.n	c0da <sd_mmc_test_unit_ready+0x62>
	{
	case SD_MMC_OK:
		if (sd_mmc_ejected[slot]) {
    c09c:	1dfb      	adds	r3, r7, #7
    c09e:	781b      	ldrb	r3, [r3, #0]
    c0a0:	4a11      	ldr	r2, [pc, #68]	; (c0e8 <sd_mmc_test_unit_ready+0x70>)
    c0a2:	5cd3      	ldrb	r3, [r2, r3]
    c0a4:	2b00      	cmp	r3, #0
    c0a6:	d001      	beq.n	c0ac <sd_mmc_test_unit_ready+0x34>
			return CTRL_NO_PRESENT;
    c0a8:	2302      	movs	r3, #2
    c0aa:	e017      	b.n	c0dc <sd_mmc_test_unit_ready+0x64>
		}
		if (sd_mmc_get_type(slot) & (CARD_TYPE_SD | CARD_TYPE_MMC)) {
    c0ac:	1dfb      	adds	r3, r7, #7
    c0ae:	781b      	ldrb	r3, [r3, #0]
    c0b0:	0018      	movs	r0, r3
    c0b2:	4b0e      	ldr	r3, [pc, #56]	; (c0ec <sd_mmc_test_unit_ready+0x74>)
    c0b4:	4798      	blx	r3
    c0b6:	0003      	movs	r3, r0
    c0b8:	001a      	movs	r2, r3
    c0ba:	2303      	movs	r3, #3
    c0bc:	4013      	ands	r3, r2
    c0be:	d001      	beq.n	c0c4 <sd_mmc_test_unit_ready+0x4c>
			return CTRL_GOOD;
    c0c0:	2300      	movs	r3, #0
    c0c2:	e00b      	b.n	c0dc <sd_mmc_test_unit_ready+0x64>
		}
		// It is not a memory card
		return CTRL_NO_PRESENT;
    c0c4:	2302      	movs	r3, #2
    c0c6:	e009      	b.n	c0dc <sd_mmc_test_unit_ready+0x64>

	case SD_MMC_INIT_ONGOING:
		return CTRL_BUSY;
    c0c8:	2303      	movs	r3, #3
    c0ca:	e007      	b.n	c0dc <sd_mmc_test_unit_ready+0x64>

	case SD_MMC_ERR_NO_CARD:
		sd_mmc_ejected[slot] = false;
    c0cc:	1dfb      	adds	r3, r7, #7
    c0ce:	781b      	ldrb	r3, [r3, #0]
    c0d0:	4a05      	ldr	r2, [pc, #20]	; (c0e8 <sd_mmc_test_unit_ready+0x70>)
    c0d2:	2100      	movs	r1, #0
    c0d4:	54d1      	strb	r1, [r2, r3]
		return CTRL_NO_PRESENT;
    c0d6:	2302      	movs	r3, #2
    c0d8:	e000      	b.n	c0dc <sd_mmc_test_unit_ready+0x64>

	default:
		return CTRL_FAIL;
    c0da:	2301      	movs	r3, #1
	}
}
    c0dc:	0018      	movs	r0, r3
    c0de:	46bd      	mov	sp, r7
    c0e0:	b002      	add	sp, #8
    c0e2:	bd80      	pop	{r7, pc}
    c0e4:	0000bbed 	.word	0x0000bbed
    c0e8:	20003cc8 	.word	0x20003cc8
    c0ec:	0000bc61 	.word	0x0000bc61

0000c0f0 <sd_mmc_test_unit_ready_0>:

Ctrl_status sd_mmc_test_unit_ready_0(void)
{
    c0f0:	b580      	push	{r7, lr}
    c0f2:	af00      	add	r7, sp, #0
	return sd_mmc_test_unit_ready(0);
    c0f4:	2000      	movs	r0, #0
    c0f6:	4b03      	ldr	r3, [pc, #12]	; (c104 <sd_mmc_test_unit_ready_0+0x14>)
    c0f8:	4798      	blx	r3
    c0fa:	0003      	movs	r3, r0
}
    c0fc:	0018      	movs	r0, r3
    c0fe:	46bd      	mov	sp, r7
    c100:	bd80      	pop	{r7, pc}
    c102:	46c0      	nop			; (mov r8, r8)
    c104:	0000c079 	.word	0x0000c079

0000c108 <sd_mmc_read_capacity>:
{
	return sd_mmc_test_unit_ready(1);
}

Ctrl_status sd_mmc_read_capacity(uint8_t slot, uint32_t *nb_sector)
{
    c108:	b580      	push	{r7, lr}
    c10a:	b082      	sub	sp, #8
    c10c:	af00      	add	r7, sp, #0
    c10e:	0002      	movs	r2, r0
    c110:	6039      	str	r1, [r7, #0]
    c112:	1dfb      	adds	r3, r7, #7
    c114:	701a      	strb	r2, [r3, #0]
	// Return last sector address (-1)
	*nb_sector = (sd_mmc_get_capacity(slot) * 2) - 1;
    c116:	1dfb      	adds	r3, r7, #7
    c118:	781b      	ldrb	r3, [r3, #0]
    c11a:	0018      	movs	r0, r3
    c11c:	4b08      	ldr	r3, [pc, #32]	; (c140 <sd_mmc_read_capacity+0x38>)
    c11e:	4798      	blx	r3
    c120:	0003      	movs	r3, r0
    c122:	005b      	lsls	r3, r3, #1
    c124:	1e5a      	subs	r2, r3, #1
    c126:	683b      	ldr	r3, [r7, #0]
    c128:	601a      	str	r2, [r3, #0]
	return sd_mmc_test_unit_ready(slot);
    c12a:	1dfb      	adds	r3, r7, #7
    c12c:	781b      	ldrb	r3, [r3, #0]
    c12e:	0018      	movs	r0, r3
    c130:	4b04      	ldr	r3, [pc, #16]	; (c144 <sd_mmc_read_capacity+0x3c>)
    c132:	4798      	blx	r3
    c134:	0003      	movs	r3, r0
}
    c136:	0018      	movs	r0, r3
    c138:	46bd      	mov	sp, r7
    c13a:	b002      	add	sp, #8
    c13c:	bd80      	pop	{r7, pc}
    c13e:	46c0      	nop			; (mov r8, r8)
    c140:	0000bc9d 	.word	0x0000bc9d
    c144:	0000c079 	.word	0x0000c079

0000c148 <sd_mmc_read_capacity_0>:

Ctrl_status sd_mmc_read_capacity_0(uint32_t *nb_sector)
{
    c148:	b580      	push	{r7, lr}
    c14a:	b082      	sub	sp, #8
    c14c:	af00      	add	r7, sp, #0
    c14e:	6078      	str	r0, [r7, #4]
	return sd_mmc_read_capacity(0, nb_sector);
    c150:	687b      	ldr	r3, [r7, #4]
    c152:	0019      	movs	r1, r3
    c154:	2000      	movs	r0, #0
    c156:	4b03      	ldr	r3, [pc, #12]	; (c164 <sd_mmc_read_capacity_0+0x1c>)
    c158:	4798      	blx	r3
    c15a:	0003      	movs	r3, r0
}
    c15c:	0018      	movs	r0, r3
    c15e:	46bd      	mov	sp, r7
    c160:	b002      	add	sp, #8
    c162:	bd80      	pop	{r7, pc}
    c164:	0000c109 	.word	0x0000c109

0000c168 <sd_mmc_unload>:
{
	return sd_mmc_read_capacity(1, nb_sector);
}

bool sd_mmc_unload(uint8_t slot, bool unload)
{
    c168:	b580      	push	{r7, lr}
    c16a:	b082      	sub	sp, #8
    c16c:	af00      	add	r7, sp, #0
    c16e:	0002      	movs	r2, r0
    c170:	1dfb      	adds	r3, r7, #7
    c172:	701a      	strb	r2, [r3, #0]
    c174:	1dbb      	adds	r3, r7, #6
    c176:	1c0a      	adds	r2, r1, #0
    c178:	701a      	strb	r2, [r3, #0]
	sd_mmc_ejected[slot] = unload;
    c17a:	1dfb      	adds	r3, r7, #7
    c17c:	781b      	ldrb	r3, [r3, #0]
    c17e:	4a04      	ldr	r2, [pc, #16]	; (c190 <sd_mmc_unload+0x28>)
    c180:	1db9      	adds	r1, r7, #6
    c182:	7809      	ldrb	r1, [r1, #0]
    c184:	54d1      	strb	r1, [r2, r3]
	return true;
    c186:	2301      	movs	r3, #1
}
    c188:	0018      	movs	r0, r3
    c18a:	46bd      	mov	sp, r7
    c18c:	b002      	add	sp, #8
    c18e:	bd80      	pop	{r7, pc}
    c190:	20003cc8 	.word	0x20003cc8

0000c194 <sd_mmc_unload_0>:

bool sd_mmc_unload_0(bool unload)
{
    c194:	b580      	push	{r7, lr}
    c196:	b082      	sub	sp, #8
    c198:	af00      	add	r7, sp, #0
    c19a:	0002      	movs	r2, r0
    c19c:	1dfb      	adds	r3, r7, #7
    c19e:	701a      	strb	r2, [r3, #0]
	return sd_mmc_unload(0, unload);
    c1a0:	1dfb      	adds	r3, r7, #7
    c1a2:	781b      	ldrb	r3, [r3, #0]
    c1a4:	0019      	movs	r1, r3
    c1a6:	2000      	movs	r0, #0
    c1a8:	4b03      	ldr	r3, [pc, #12]	; (c1b8 <sd_mmc_unload_0+0x24>)
    c1aa:	4798      	blx	r3
    c1ac:	0003      	movs	r3, r0
}
    c1ae:	0018      	movs	r0, r3
    c1b0:	46bd      	mov	sp, r7
    c1b2:	b002      	add	sp, #8
    c1b4:	bd80      	pop	{r7, pc}
    c1b6:	46c0      	nop			; (mov r8, r8)
    c1b8:	0000c169 	.word	0x0000c169

0000c1bc <sd_mmc_wr_protect>:
{
	return sd_mmc_unload(1, unload);
}

bool sd_mmc_wr_protect(uint8_t slot)
{
    c1bc:	b580      	push	{r7, lr}
    c1be:	b082      	sub	sp, #8
    c1c0:	af00      	add	r7, sp, #0
    c1c2:	0002      	movs	r2, r0
    c1c4:	1dfb      	adds	r3, r7, #7
    c1c6:	701a      	strb	r2, [r3, #0]
	return sd_mmc_is_write_protected(slot);
    c1c8:	1dfb      	adds	r3, r7, #7
    c1ca:	781b      	ldrb	r3, [r3, #0]
    c1cc:	0018      	movs	r0, r3
    c1ce:	4b03      	ldr	r3, [pc, #12]	; (c1dc <sd_mmc_wr_protect+0x20>)
    c1d0:	4798      	blx	r3
    c1d2:	0003      	movs	r3, r0
}
    c1d4:	0018      	movs	r0, r3
    c1d6:	46bd      	mov	sp, r7
    c1d8:	b002      	add	sp, #8
    c1da:	bd80      	pop	{r7, pc}
    c1dc:	0000bcd9 	.word	0x0000bcd9

0000c1e0 <sd_mmc_wr_protect_0>:

bool sd_mmc_wr_protect_0(void)
{
    c1e0:	b580      	push	{r7, lr}
    c1e2:	af00      	add	r7, sp, #0
	return sd_mmc_wr_protect(0);
    c1e4:	2000      	movs	r0, #0
    c1e6:	4b03      	ldr	r3, [pc, #12]	; (c1f4 <sd_mmc_wr_protect_0+0x14>)
    c1e8:	4798      	blx	r3
    c1ea:	0003      	movs	r3, r0
}
    c1ec:	0018      	movs	r0, r3
    c1ee:	46bd      	mov	sp, r7
    c1f0:	bd80      	pop	{r7, pc}
    c1f2:	46c0      	nop			; (mov r8, r8)
    c1f4:	0000c1bd 	.word	0x0000c1bd

0000c1f8 <sd_mmc_removal>:
{
	return sd_mmc_wr_protect(1);
}

bool sd_mmc_removal(uint8_t slot)
{
    c1f8:	b580      	push	{r7, lr}
    c1fa:	b082      	sub	sp, #8
    c1fc:	af00      	add	r7, sp, #0
    c1fe:	0002      	movs	r2, r0
    c200:	1dfb      	adds	r3, r7, #7
    c202:	701a      	strb	r2, [r3, #0]
	UNUSED(slot);
	return true;
    c204:	2301      	movs	r3, #1
}
    c206:	0018      	movs	r0, r3
    c208:	46bd      	mov	sp, r7
    c20a:	b002      	add	sp, #8
    c20c:	bd80      	pop	{r7, pc}
	...

0000c210 <sd_mmc_removal_0>:

bool sd_mmc_removal_0(void)
{
    c210:	b580      	push	{r7, lr}
    c212:	af00      	add	r7, sp, #0
	return sd_mmc_removal(0);
    c214:	2000      	movs	r0, #0
    c216:	4b03      	ldr	r3, [pc, #12]	; (c224 <sd_mmc_removal_0+0x14>)
    c218:	4798      	blx	r3
    c21a:	0003      	movs	r3, r0
}
    c21c:	0018      	movs	r0, r3
    c21e:	46bd      	mov	sp, r7
    c220:	bd80      	pop	{r7, pc}
    c222:	46c0      	nop			; (mov r8, r8)
    c224:	0000c1f9 	.word	0x0000c1f9

0000c228 <sd_mmc_mem_2_ram>:
/**
 * \name MEM <-> RAM Interface
 * @{
 */
Ctrl_status sd_mmc_mem_2_ram(uint8_t slot, uint32_t addr, void *ram)
{
    c228:	b580      	push	{r7, lr}
    c22a:	b084      	sub	sp, #16
    c22c:	af00      	add	r7, sp, #0
    c22e:	60b9      	str	r1, [r7, #8]
    c230:	607a      	str	r2, [r7, #4]
    c232:	230f      	movs	r3, #15
    c234:	18fb      	adds	r3, r7, r3
    c236:	1c02      	adds	r2, r0, #0
    c238:	701a      	strb	r2, [r3, #0]
	switch (sd_mmc_init_read_blocks(slot, addr, 1)) {
    c23a:	68b9      	ldr	r1, [r7, #8]
    c23c:	230f      	movs	r3, #15
    c23e:	18fb      	adds	r3, r7, r3
    c240:	781b      	ldrb	r3, [r3, #0]
    c242:	2201      	movs	r2, #1
    c244:	0018      	movs	r0, r3
    c246:	4b10      	ldr	r3, [pc, #64]	; (c288 <sd_mmc_mem_2_ram+0x60>)
    c248:	4798      	blx	r3
    c24a:	1e03      	subs	r3, r0, #0
    c24c:	d005      	beq.n	c25a <sd_mmc_mem_2_ram+0x32>
    c24e:	2b02      	cmp	r3, #2
    c250:	d101      	bne.n	c256 <sd_mmc_mem_2_ram+0x2e>
	case SD_MMC_OK:
		break;
	case SD_MMC_ERR_NO_CARD:
		return CTRL_NO_PRESENT;
    c252:	2302      	movs	r3, #2
    c254:	e013      	b.n	c27e <sd_mmc_mem_2_ram+0x56>
	default:
		return CTRL_FAIL;
    c256:	2301      	movs	r3, #1
    c258:	e011      	b.n	c27e <sd_mmc_mem_2_ram+0x56>
		break;
    c25a:	46c0      	nop			; (mov r8, r8)
	}
	if (SD_MMC_OK != sd_mmc_start_read_blocks(ram, 1)) {
    c25c:	687b      	ldr	r3, [r7, #4]
    c25e:	2101      	movs	r1, #1
    c260:	0018      	movs	r0, r3
    c262:	4b0a      	ldr	r3, [pc, #40]	; (c28c <sd_mmc_mem_2_ram+0x64>)
    c264:	4798      	blx	r3
    c266:	1e03      	subs	r3, r0, #0
    c268:	d001      	beq.n	c26e <sd_mmc_mem_2_ram+0x46>
		return CTRL_FAIL;
    c26a:	2301      	movs	r3, #1
    c26c:	e007      	b.n	c27e <sd_mmc_mem_2_ram+0x56>
	}
	if (SD_MMC_OK != sd_mmc_wait_end_of_read_blocks(false)) {
    c26e:	2000      	movs	r0, #0
    c270:	4b07      	ldr	r3, [pc, #28]	; (c290 <sd_mmc_mem_2_ram+0x68>)
    c272:	4798      	blx	r3
    c274:	1e03      	subs	r3, r0, #0
    c276:	d001      	beq.n	c27c <sd_mmc_mem_2_ram+0x54>
		return CTRL_FAIL;
    c278:	2301      	movs	r3, #1
    c27a:	e000      	b.n	c27e <sd_mmc_mem_2_ram+0x56>
	}
	return CTRL_GOOD;
    c27c:	2300      	movs	r3, #0
}
    c27e:	0018      	movs	r0, r3
    c280:	46bd      	mov	sp, r7
    c282:	b004      	add	sp, #16
    c284:	bd80      	pop	{r7, pc}
    c286:	46c0      	nop			; (mov r8, r8)
    c288:	0000bcf1 	.word	0x0000bcf1
    c28c:	0000bddd 	.word	0x0000bddd
    c290:	0000be35 	.word	0x0000be35

0000c294 <sd_mmc_mem_2_ram_0>:

Ctrl_status sd_mmc_mem_2_ram_0(uint32_t addr, void *ram)
{
    c294:	b580      	push	{r7, lr}
    c296:	b082      	sub	sp, #8
    c298:	af00      	add	r7, sp, #0
    c29a:	6078      	str	r0, [r7, #4]
    c29c:	6039      	str	r1, [r7, #0]
	return sd_mmc_mem_2_ram(0, addr, ram);
    c29e:	683a      	ldr	r2, [r7, #0]
    c2a0:	687b      	ldr	r3, [r7, #4]
    c2a2:	0019      	movs	r1, r3
    c2a4:	2000      	movs	r0, #0
    c2a6:	4b03      	ldr	r3, [pc, #12]	; (c2b4 <sd_mmc_mem_2_ram_0+0x20>)
    c2a8:	4798      	blx	r3
    c2aa:	0003      	movs	r3, r0
}
    c2ac:	0018      	movs	r0, r3
    c2ae:	46bd      	mov	sp, r7
    c2b0:	b002      	add	sp, #8
    c2b2:	bd80      	pop	{r7, pc}
    c2b4:	0000c229 	.word	0x0000c229

0000c2b8 <sd_mmc_ram_2_mem>:
{
	return sd_mmc_mem_2_ram(1, addr, ram);
}

Ctrl_status sd_mmc_ram_2_mem(uint8_t slot, uint32_t addr, const void *ram)
{
    c2b8:	b580      	push	{r7, lr}
    c2ba:	b084      	sub	sp, #16
    c2bc:	af00      	add	r7, sp, #0
    c2be:	60b9      	str	r1, [r7, #8]
    c2c0:	607a      	str	r2, [r7, #4]
    c2c2:	230f      	movs	r3, #15
    c2c4:	18fb      	adds	r3, r7, r3
    c2c6:	1c02      	adds	r2, r0, #0
    c2c8:	701a      	strb	r2, [r3, #0]
	switch (sd_mmc_init_write_blocks(slot, addr, 1)) {
    c2ca:	68b9      	ldr	r1, [r7, #8]
    c2cc:	230f      	movs	r3, #15
    c2ce:	18fb      	adds	r3, r7, r3
    c2d0:	781b      	ldrb	r3, [r3, #0]
    c2d2:	2201      	movs	r2, #1
    c2d4:	0018      	movs	r0, r3
    c2d6:	4b10      	ldr	r3, [pc, #64]	; (c318 <sd_mmc_ram_2_mem+0x60>)
    c2d8:	4798      	blx	r3
    c2da:	1e03      	subs	r3, r0, #0
    c2dc:	d005      	beq.n	c2ea <sd_mmc_ram_2_mem+0x32>
    c2de:	2b02      	cmp	r3, #2
    c2e0:	d101      	bne.n	c2e6 <sd_mmc_ram_2_mem+0x2e>
	case SD_MMC_OK:
		break;
	case SD_MMC_ERR_NO_CARD:
		return CTRL_NO_PRESENT;
    c2e2:	2302      	movs	r3, #2
    c2e4:	e013      	b.n	c30e <sd_mmc_ram_2_mem+0x56>
	default:
		return CTRL_FAIL;
    c2e6:	2301      	movs	r3, #1
    c2e8:	e011      	b.n	c30e <sd_mmc_ram_2_mem+0x56>
		break;
    c2ea:	46c0      	nop			; (mov r8, r8)
	}
	if (SD_MMC_OK != sd_mmc_start_write_blocks(ram, 1)) {
    c2ec:	687b      	ldr	r3, [r7, #4]
    c2ee:	2101      	movs	r1, #1
    c2f0:	0018      	movs	r0, r3
    c2f2:	4b0a      	ldr	r3, [pc, #40]	; (c31c <sd_mmc_ram_2_mem+0x64>)
    c2f4:	4798      	blx	r3
    c2f6:	1e03      	subs	r3, r0, #0
    c2f8:	d001      	beq.n	c2fe <sd_mmc_ram_2_mem+0x46>
		return CTRL_FAIL;
    c2fa:	2301      	movs	r3, #1
    c2fc:	e007      	b.n	c30e <sd_mmc_ram_2_mem+0x56>
	}
	if (SD_MMC_OK != sd_mmc_wait_end_of_write_blocks(false)) {
    c2fe:	2000      	movs	r0, #0
    c300:	4b07      	ldr	r3, [pc, #28]	; (c320 <sd_mmc_ram_2_mem+0x68>)
    c302:	4798      	blx	r3
    c304:	1e03      	subs	r3, r0, #0
    c306:	d001      	beq.n	c30c <sd_mmc_ram_2_mem+0x54>
		return CTRL_FAIL;
    c308:	2301      	movs	r3, #1
    c30a:	e000      	b.n	c30e <sd_mmc_ram_2_mem+0x56>
	}
	return CTRL_GOOD;
    c30c:	2300      	movs	r3, #0
}
    c30e:	0018      	movs	r0, r3
    c310:	46bd      	mov	sp, r7
    c312:	b004      	add	sp, #16
    c314:	bd80      	pop	{r7, pc}
    c316:	46c0      	nop			; (mov r8, r8)
    c318:	0000becd 	.word	0x0000becd
    c31c:	0000bfb5 	.word	0x0000bfb5
    c320:	0000c00d 	.word	0x0000c00d

0000c324 <sd_mmc_ram_2_mem_0>:

Ctrl_status sd_mmc_ram_2_mem_0(uint32_t addr, const void *ram)
{
    c324:	b580      	push	{r7, lr}
    c326:	b082      	sub	sp, #8
    c328:	af00      	add	r7, sp, #0
    c32a:	6078      	str	r0, [r7, #4]
    c32c:	6039      	str	r1, [r7, #0]
	return sd_mmc_ram_2_mem(0, addr, ram);
    c32e:	683a      	ldr	r2, [r7, #0]
    c330:	687b      	ldr	r3, [r7, #4]
    c332:	0019      	movs	r1, r3
    c334:	2000      	movs	r0, #0
    c336:	4b03      	ldr	r3, [pc, #12]	; (c344 <sd_mmc_ram_2_mem_0+0x20>)
    c338:	4798      	blx	r3
    c33a:	0003      	movs	r3, r0
}
    c33c:	0018      	movs	r0, r3
    c33e:	46bd      	mov	sp, r7
    c340:	b002      	add	sp, #8
    c342:	bd80      	pop	{r7, pc}
    c344:	0000c2b9 	.word	0x0000c2b9

0000c348 <system_pinmux_get_group_from_gpio_pin>:
{
    c348:	b580      	push	{r7, lr}
    c34a:	b084      	sub	sp, #16
    c34c:	af00      	add	r7, sp, #0
    c34e:	0002      	movs	r2, r0
    c350:	1dfb      	adds	r3, r7, #7
    c352:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
    c354:	230f      	movs	r3, #15
    c356:	18fb      	adds	r3, r7, r3
    c358:	1dfa      	adds	r2, r7, #7
    c35a:	7812      	ldrb	r2, [r2, #0]
    c35c:	09d2      	lsrs	r2, r2, #7
    c35e:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
    c360:	230e      	movs	r3, #14
    c362:	18fb      	adds	r3, r7, r3
    c364:	1dfa      	adds	r2, r7, #7
    c366:	7812      	ldrb	r2, [r2, #0]
    c368:	0952      	lsrs	r2, r2, #5
    c36a:	701a      	strb	r2, [r3, #0]
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
    c36c:	4b0d      	ldr	r3, [pc, #52]	; (c3a4 <system_pinmux_get_group_from_gpio_pin+0x5c>)
    c36e:	60bb      	str	r3, [r7, #8]
	if (port_index < PORT_INST_NUM) {
    c370:	230f      	movs	r3, #15
    c372:	18fb      	adds	r3, r7, r3
    c374:	781b      	ldrb	r3, [r3, #0]
    c376:	2b00      	cmp	r3, #0
    c378:	d10f      	bne.n	c39a <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
    c37a:	230f      	movs	r3, #15
    c37c:	18fb      	adds	r3, r7, r3
    c37e:	781b      	ldrb	r3, [r3, #0]
    c380:	009b      	lsls	r3, r3, #2
    c382:	2210      	movs	r2, #16
    c384:	4694      	mov	ip, r2
    c386:	44bc      	add	ip, r7
    c388:	4463      	add	r3, ip
    c38a:	3b08      	subs	r3, #8
    c38c:	681a      	ldr	r2, [r3, #0]
    c38e:	230e      	movs	r3, #14
    c390:	18fb      	adds	r3, r7, r3
    c392:	781b      	ldrb	r3, [r3, #0]
    c394:	01db      	lsls	r3, r3, #7
    c396:	18d3      	adds	r3, r2, r3
    c398:	e000      	b.n	c39c <system_pinmux_get_group_from_gpio_pin+0x54>
		return NULL;
    c39a:	2300      	movs	r3, #0
}
    c39c:	0018      	movs	r0, r3
    c39e:	46bd      	mov	sp, r7
    c3a0:	b004      	add	sp, #16
    c3a2:	bd80      	pop	{r7, pc}
    c3a4:	41004400 	.word	0x41004400

0000c3a8 <system_interrupt_enable>:
{
    c3a8:	b580      	push	{r7, lr}
    c3aa:	b082      	sub	sp, #8
    c3ac:	af00      	add	r7, sp, #0
    c3ae:	0002      	movs	r2, r0
    c3b0:	1dfb      	adds	r3, r7, #7
    c3b2:	701a      	strb	r2, [r3, #0]
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    c3b4:	4b06      	ldr	r3, [pc, #24]	; (c3d0 <system_interrupt_enable+0x28>)
    c3b6:	1dfa      	adds	r2, r7, #7
    c3b8:	7812      	ldrb	r2, [r2, #0]
    c3ba:	0011      	movs	r1, r2
    c3bc:	221f      	movs	r2, #31
    c3be:	400a      	ands	r2, r1
    c3c0:	2101      	movs	r1, #1
    c3c2:	4091      	lsls	r1, r2
    c3c4:	000a      	movs	r2, r1
    c3c6:	601a      	str	r2, [r3, #0]
}
    c3c8:	46c0      	nop			; (mov r8, r8)
    c3ca:	46bd      	mov	sp, r7
    c3cc:	b002      	add	sp, #8
    c3ce:	bd80      	pop	{r7, pc}
    c3d0:	e000e100 	.word	0xe000e100

0000c3d4 <port_get_group_from_gpio_pin>:
{
    c3d4:	b580      	push	{r7, lr}
    c3d6:	b082      	sub	sp, #8
    c3d8:	af00      	add	r7, sp, #0
    c3da:	0002      	movs	r2, r0
    c3dc:	1dfb      	adds	r3, r7, #7
    c3de:	701a      	strb	r2, [r3, #0]
	return system_pinmux_get_group_from_gpio_pin(gpio_pin);
    c3e0:	1dfb      	adds	r3, r7, #7
    c3e2:	781b      	ldrb	r3, [r3, #0]
    c3e4:	0018      	movs	r0, r3
    c3e6:	4b03      	ldr	r3, [pc, #12]	; (c3f4 <port_get_group_from_gpio_pin+0x20>)
    c3e8:	4798      	blx	r3
    c3ea:	0003      	movs	r3, r0
}
    c3ec:	0018      	movs	r0, r3
    c3ee:	46bd      	mov	sp, r7
    c3f0:	b002      	add	sp, #8
    c3f2:	bd80      	pop	{r7, pc}
    c3f4:	0000c349 	.word	0x0000c349

0000c3f8 <port_get_config_defaults>:
{
    c3f8:	b580      	push	{r7, lr}
    c3fa:	b082      	sub	sp, #8
    c3fc:	af00      	add	r7, sp, #0
    c3fe:	6078      	str	r0, [r7, #4]
	config->direction  = PORT_PIN_DIR_INPUT;
    c400:	687b      	ldr	r3, [r7, #4]
    c402:	2200      	movs	r2, #0
    c404:	701a      	strb	r2, [r3, #0]
	config->input_pull = PORT_PIN_PULL_UP;
    c406:	687b      	ldr	r3, [r7, #4]
    c408:	2201      	movs	r2, #1
    c40a:	705a      	strb	r2, [r3, #1]
	config->powersave  = false;
    c40c:	687b      	ldr	r3, [r7, #4]
    c40e:	2200      	movs	r2, #0
    c410:	709a      	strb	r2, [r3, #2]
}
    c412:	46c0      	nop			; (mov r8, r8)
    c414:	46bd      	mov	sp, r7
    c416:	b002      	add	sp, #8
    c418:	bd80      	pop	{r7, pc}
	...

0000c41c <port_pin_set_output_level>:
{
    c41c:	b580      	push	{r7, lr}
    c41e:	b084      	sub	sp, #16
    c420:	af00      	add	r7, sp, #0
    c422:	0002      	movs	r2, r0
    c424:	1dfb      	adds	r3, r7, #7
    c426:	701a      	strb	r2, [r3, #0]
    c428:	1dbb      	adds	r3, r7, #6
    c42a:	1c0a      	adds	r2, r1, #0
    c42c:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
    c42e:	1dfb      	adds	r3, r7, #7
    c430:	781b      	ldrb	r3, [r3, #0]
    c432:	0018      	movs	r0, r3
    c434:	4b0d      	ldr	r3, [pc, #52]	; (c46c <port_pin_set_output_level+0x50>)
    c436:	4798      	blx	r3
    c438:	0003      	movs	r3, r0
    c43a:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    c43c:	1dfb      	adds	r3, r7, #7
    c43e:	781b      	ldrb	r3, [r3, #0]
    c440:	221f      	movs	r2, #31
    c442:	4013      	ands	r3, r2
    c444:	2201      	movs	r2, #1
    c446:	409a      	lsls	r2, r3
    c448:	0013      	movs	r3, r2
    c44a:	60bb      	str	r3, [r7, #8]
	if (level) {
    c44c:	1dbb      	adds	r3, r7, #6
    c44e:	781b      	ldrb	r3, [r3, #0]
    c450:	2b00      	cmp	r3, #0
    c452:	d003      	beq.n	c45c <port_pin_set_output_level+0x40>
		port_base->OUTSET.reg = pin_mask;
    c454:	68fb      	ldr	r3, [r7, #12]
    c456:	68ba      	ldr	r2, [r7, #8]
    c458:	619a      	str	r2, [r3, #24]
}
    c45a:	e002      	b.n	c462 <port_pin_set_output_level+0x46>
		port_base->OUTCLR.reg = pin_mask;
    c45c:	68fb      	ldr	r3, [r7, #12]
    c45e:	68ba      	ldr	r2, [r7, #8]
    c460:	615a      	str	r2, [r3, #20]
}
    c462:	46c0      	nop			; (mov r8, r8)
    c464:	46bd      	mov	sp, r7
    c466:	b004      	add	sp, #16
    c468:	bd80      	pop	{r7, pc}
    c46a:	46c0      	nop			; (mov r8, r8)
    c46c:	0000c3d5 	.word	0x0000c3d5

0000c470 <spi_is_syncing>:
 * \retval false  Module synchronization is not ongoing
 *
 */
static inline bool spi_is_syncing(
		struct spi_module *const module)
{
    c470:	b580      	push	{r7, lr}
    c472:	b084      	sub	sp, #16
    c474:	af00      	add	r7, sp, #0
    c476:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    c478:	687b      	ldr	r3, [r7, #4]
    c47a:	681b      	ldr	r3, [r3, #0]
    c47c:	60fb      	str	r3, [r7, #12]

#  ifdef FEATURE_SPI_SYNC_SCHEME_VERSION_2
	/* Return synchronization status */
	return (spi_module->SYNCBUSY.reg);
    c47e:	68fb      	ldr	r3, [r7, #12]
    c480:	69db      	ldr	r3, [r3, #28]
    c482:	1e5a      	subs	r2, r3, #1
    c484:	4193      	sbcs	r3, r2
    c486:	b2db      	uxtb	r3, r3
#  else
	/* Return synchronization status */
	return (spi_module->STATUS.reg & SERCOM_SPI_STATUS_SYNCBUSY);
#  endif
}
    c488:	0018      	movs	r0, r3
    c48a:	46bd      	mov	sp, r7
    c48c:	b004      	add	sp, #16
    c48e:	bd80      	pop	{r7, pc}

0000c490 <spi_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void spi_get_config_defaults(
		struct spi_config *const config)
{
    c490:	b580      	push	{r7, lr}
    c492:	b082      	sub	sp, #8
    c494:	af00      	add	r7, sp, #0
    c496:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mode             = SPI_MODE_MASTER;
    c498:	687b      	ldr	r3, [r7, #4]
    c49a:	2201      	movs	r2, #1
    c49c:	701a      	strb	r2, [r3, #0]
	config->data_order       = SPI_DATA_ORDER_MSB;
    c49e:	687b      	ldr	r3, [r7, #4]
    c4a0:	2200      	movs	r2, #0
    c4a2:	605a      	str	r2, [r3, #4]
	config->transfer_mode    = SPI_TRANSFER_MODE_0;
    c4a4:	687b      	ldr	r3, [r7, #4]
    c4a6:	2200      	movs	r2, #0
    c4a8:	609a      	str	r2, [r3, #8]
	config->mux_setting      = SPI_SIGNAL_MUX_SETTING_D;
    c4aa:	687b      	ldr	r3, [r7, #4]
    c4ac:	22c0      	movs	r2, #192	; 0xc0
    c4ae:	0392      	lsls	r2, r2, #14
    c4b0:	60da      	str	r2, [r3, #12]
	config->character_size   = SPI_CHARACTER_SIZE_8BIT;
    c4b2:	687b      	ldr	r3, [r7, #4]
    c4b4:	2200      	movs	r2, #0
    c4b6:	741a      	strb	r2, [r3, #16]
	config->run_in_standby   = false;
    c4b8:	687b      	ldr	r3, [r7, #4]
    c4ba:	2200      	movs	r2, #0
    c4bc:	745a      	strb	r2, [r3, #17]
	config->receiver_enable  = true;
    c4be:	687b      	ldr	r3, [r7, #4]
    c4c0:	2201      	movs	r2, #1
    c4c2:	749a      	strb	r2, [r3, #18]
#  ifdef FEATURE_SPI_SLAVE_SELECT_LOW_DETECT
	config->select_slave_low_detect_enable= true;
    c4c4:	687b      	ldr	r3, [r7, #4]
    c4c6:	2201      	movs	r2, #1
    c4c8:	74da      	strb	r2, [r3, #19]
#  endif
#  ifdef FEATURE_SPI_HARDWARE_SLAVE_SELECT
	config->master_slave_select_enable= false;
    c4ca:	687b      	ldr	r3, [r7, #4]
    c4cc:	2200      	movs	r2, #0
    c4ce:	751a      	strb	r2, [r3, #20]
#  endif
	config->generator_source = GCLK_GENERATOR_0;
    c4d0:	687b      	ldr	r3, [r7, #4]
    c4d2:	2224      	movs	r2, #36	; 0x24
    c4d4:	2100      	movs	r1, #0
    c4d6:	5499      	strb	r1, [r3, r2]

	/* Clear mode specific config */
	memset(&(config->mode_specific), 0, sizeof(config->mode_specific));
    c4d8:	687b      	ldr	r3, [r7, #4]
    c4da:	3318      	adds	r3, #24
    c4dc:	220c      	movs	r2, #12
    c4de:	2100      	movs	r1, #0
    c4e0:	0018      	movs	r0, r3
    c4e2:	4b0a      	ldr	r3, [pc, #40]	; (c50c <spi_get_config_defaults+0x7c>)
    c4e4:	4798      	blx	r3

	/* Master config defaults */
	config->mode_specific.master.baudrate = 100000;
    c4e6:	687b      	ldr	r3, [r7, #4]
    c4e8:	4a09      	ldr	r2, [pc, #36]	; (c510 <spi_get_config_defaults+0x80>)
    c4ea:	619a      	str	r2, [r3, #24]

	/* pinmux config defaults */
	config->pinmux_pad0 = PINMUX_DEFAULT;
    c4ec:	687b      	ldr	r3, [r7, #4]
    c4ee:	2200      	movs	r2, #0
    c4f0:	629a      	str	r2, [r3, #40]	; 0x28
	config->pinmux_pad1 = PINMUX_DEFAULT;
    c4f2:	687b      	ldr	r3, [r7, #4]
    c4f4:	2200      	movs	r2, #0
    c4f6:	62da      	str	r2, [r3, #44]	; 0x2c
	config->pinmux_pad2 = PINMUX_DEFAULT;
    c4f8:	687b      	ldr	r3, [r7, #4]
    c4fa:	2200      	movs	r2, #0
    c4fc:	631a      	str	r2, [r3, #48]	; 0x30
	config->pinmux_pad3 = PINMUX_DEFAULT;
    c4fe:	687b      	ldr	r3, [r7, #4]
    c500:	2200      	movs	r2, #0
    c502:	635a      	str	r2, [r3, #52]	; 0x34

};
    c504:	46c0      	nop			; (mov r8, r8)
    c506:	46bd      	mov	sp, r7
    c508:	b002      	add	sp, #8
    c50a:	bd80      	pop	{r7, pc}
    c50c:	0002181b 	.word	0x0002181b
    c510:	000186a0 	.word	0x000186a0

0000c514 <spi_slave_inst_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void spi_slave_inst_get_config_defaults(
		struct spi_slave_inst_config *const config)
{
    c514:	b580      	push	{r7, lr}
    c516:	b082      	sub	sp, #8
    c518:	af00      	add	r7, sp, #0
    c51a:	6078      	str	r0, [r7, #4]
	Assert(config);

	config->ss_pin          = 10;
    c51c:	687b      	ldr	r3, [r7, #4]
    c51e:	220a      	movs	r2, #10
    c520:	701a      	strb	r2, [r3, #0]
	config->address_enabled = false;
    c522:	687b      	ldr	r3, [r7, #4]
    c524:	2200      	movs	r2, #0
    c526:	705a      	strb	r2, [r3, #1]
	config->address         = 0;
    c528:	687b      	ldr	r3, [r7, #4]
    c52a:	2200      	movs	r2, #0
    c52c:	709a      	strb	r2, [r3, #2]
}
    c52e:	46c0      	nop			; (mov r8, r8)
    c530:	46bd      	mov	sp, r7
    c532:	b002      	add	sp, #8
    c534:	bd80      	pop	{r7, pc}
	...

0000c538 <spi_attach_slave>:
 *
 */
static inline void spi_attach_slave(
		struct spi_slave_inst *const slave,
		const struct spi_slave_inst_config *const config)
{
    c538:	b580      	push	{r7, lr}
    c53a:	b084      	sub	sp, #16
    c53c:	af00      	add	r7, sp, #0
    c53e:	6078      	str	r0, [r7, #4]
    c540:	6039      	str	r1, [r7, #0]
	Assert(slave);
	Assert(config);

	slave->ss_pin          = config->ss_pin;
    c542:	683b      	ldr	r3, [r7, #0]
    c544:	781a      	ldrb	r2, [r3, #0]
    c546:	687b      	ldr	r3, [r7, #4]
    c548:	701a      	strb	r2, [r3, #0]
	slave->address_enabled = config->address_enabled;
    c54a:	683b      	ldr	r3, [r7, #0]
    c54c:	785a      	ldrb	r2, [r3, #1]
    c54e:	687b      	ldr	r3, [r7, #4]
    c550:	705a      	strb	r2, [r3, #1]
	slave->address         = config->address;
    c552:	683b      	ldr	r3, [r7, #0]
    c554:	789a      	ldrb	r2, [r3, #2]
    c556:	687b      	ldr	r3, [r7, #4]
    c558:	709a      	strb	r2, [r3, #2]

	/* Get default config for pin */
	struct port_config pin_conf;
	port_get_config_defaults(&pin_conf);
    c55a:	230c      	movs	r3, #12
    c55c:	18fb      	adds	r3, r7, r3
    c55e:	0018      	movs	r0, r3
    c560:	4b0b      	ldr	r3, [pc, #44]	; (c590 <spi_attach_slave+0x58>)
    c562:	4798      	blx	r3

	/* Edit config to set the pin as output */
	pin_conf.direction = PORT_PIN_DIR_OUTPUT;
    c564:	230c      	movs	r3, #12
    c566:	18fb      	adds	r3, r7, r3
    c568:	2201      	movs	r2, #1
    c56a:	701a      	strb	r2, [r3, #0]

	/* Set config on Slave Select pin */
	port_pin_set_config(slave->ss_pin, &pin_conf);
    c56c:	687b      	ldr	r3, [r7, #4]
    c56e:	781b      	ldrb	r3, [r3, #0]
    c570:	220c      	movs	r2, #12
    c572:	18ba      	adds	r2, r7, r2
    c574:	0011      	movs	r1, r2
    c576:	0018      	movs	r0, r3
    c578:	4b06      	ldr	r3, [pc, #24]	; (c594 <spi_attach_slave+0x5c>)
    c57a:	4798      	blx	r3
	port_pin_set_output_level(slave->ss_pin, true);
    c57c:	687b      	ldr	r3, [r7, #4]
    c57e:	781b      	ldrb	r3, [r3, #0]
    c580:	2101      	movs	r1, #1
    c582:	0018      	movs	r0, r3
    c584:	4b04      	ldr	r3, [pc, #16]	; (c598 <spi_attach_slave+0x60>)
    c586:	4798      	blx	r3
}
    c588:	46c0      	nop			; (mov r8, r8)
    c58a:	46bd      	mov	sp, r7
    c58c:	b004      	add	sp, #16
    c58e:	bd80      	pop	{r7, pc}
    c590:	0000c3f9 	.word	0x0000c3f9
    c594:	000138dd 	.word	0x000138dd
    c598:	0000c41d 	.word	0x0000c41d

0000c59c <spi_enable>:
 *
 * \param[in,out] module  Pointer to the software instance struct
 */
static inline void spi_enable(
		struct spi_module *const module)
{
    c59c:	b580      	push	{r7, lr}
    c59e:	b084      	sub	sp, #16
    c5a0:	af00      	add	r7, sp, #0
    c5a2:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    c5a4:	687b      	ldr	r3, [r7, #4]
    c5a6:	681b      	ldr	r3, [r3, #0]
    c5a8:	60fb      	str	r3, [r7, #12]

#  if SPI_CALLBACK_MODE == true
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
    c5aa:	687b      	ldr	r3, [r7, #4]
    c5ac:	681b      	ldr	r3, [r3, #0]
    c5ae:	0018      	movs	r0, r3
    c5b0:	4b0b      	ldr	r3, [pc, #44]	; (c5e0 <spi_enable+0x44>)
    c5b2:	4798      	blx	r3
    c5b4:	0003      	movs	r3, r0
    c5b6:	0018      	movs	r0, r3
    c5b8:	4b0a      	ldr	r3, [pc, #40]	; (c5e4 <spi_enable+0x48>)
    c5ba:	4798      	blx	r3
#  endif

	while (spi_is_syncing(module)) {
    c5bc:	46c0      	nop			; (mov r8, r8)
    c5be:	687b      	ldr	r3, [r7, #4]
    c5c0:	0018      	movs	r0, r3
    c5c2:	4b09      	ldr	r3, [pc, #36]	; (c5e8 <spi_enable+0x4c>)
    c5c4:	4798      	blx	r3
    c5c6:	1e03      	subs	r3, r0, #0
    c5c8:	d1f9      	bne.n	c5be <spi_enable+0x22>
		/* Wait until the synchronization is complete */
	}

	/* Enable SPI */
	spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_ENABLE;
    c5ca:	68fb      	ldr	r3, [r7, #12]
    c5cc:	681b      	ldr	r3, [r3, #0]
    c5ce:	2202      	movs	r2, #2
    c5d0:	431a      	orrs	r2, r3
    c5d2:	68fb      	ldr	r3, [r7, #12]
    c5d4:	601a      	str	r2, [r3, #0]
}
    c5d6:	46c0      	nop			; (mov r8, r8)
    c5d8:	46bd      	mov	sp, r7
    c5da:	b004      	add	sp, #16
    c5dc:	bd80      	pop	{r7, pc}
    c5de:	46c0      	nop			; (mov r8, r8)
    c5e0:	000145ad 	.word	0x000145ad
    c5e4:	0000c3a9 	.word	0x0000c3a9
    c5e8:	0000c471 	.word	0x0000c471

0000c5ec <sd_mmc_spi_crc7>:
 * \param size    Size of buffer data
 *
 * \return CRC7 computed
 */
static uint8_t sd_mmc_spi_crc7(uint8_t * buf, uint8_t size)
{
    c5ec:	b580      	push	{r7, lr}
    c5ee:	b084      	sub	sp, #16
    c5f0:	af00      	add	r7, sp, #0
    c5f2:	6078      	str	r0, [r7, #4]
    c5f4:	000a      	movs	r2, r1
    c5f6:	1cfb      	adds	r3, r7, #3
    c5f8:	701a      	strb	r2, [r3, #0]
	uint8_t crc, value, i;

	crc = 0;
    c5fa:	230f      	movs	r3, #15
    c5fc:	18fb      	adds	r3, r7, r3
    c5fe:	2200      	movs	r2, #0
    c600:	701a      	strb	r2, [r3, #0]
	while (size--) {
    c602:	e038      	b.n	c676 <sd_mmc_spi_crc7+0x8a>
		value = *buf++;
    c604:	687b      	ldr	r3, [r7, #4]
    c606:	1c5a      	adds	r2, r3, #1
    c608:	607a      	str	r2, [r7, #4]
    c60a:	220e      	movs	r2, #14
    c60c:	18ba      	adds	r2, r7, r2
    c60e:	781b      	ldrb	r3, [r3, #0]
    c610:	7013      	strb	r3, [r2, #0]
		for (i = 0; i < 8; i++) {
    c612:	230d      	movs	r3, #13
    c614:	18fb      	adds	r3, r7, r3
    c616:	2200      	movs	r2, #0
    c618:	701a      	strb	r2, [r3, #0]
    c61a:	e027      	b.n	c66c <sd_mmc_spi_crc7+0x80>
			crc <<= 1;
    c61c:	230f      	movs	r3, #15
    c61e:	18fa      	adds	r2, r7, r3
    c620:	230f      	movs	r3, #15
    c622:	18fb      	adds	r3, r7, r3
    c624:	781b      	ldrb	r3, [r3, #0]
    c626:	18db      	adds	r3, r3, r3
    c628:	7013      	strb	r3, [r2, #0]
			if ((value & 0x80) ^ (crc & 0x80)) {
    c62a:	230e      	movs	r3, #14
    c62c:	18fa      	adds	r2, r7, r3
    c62e:	230f      	movs	r3, #15
    c630:	18fb      	adds	r3, r7, r3
    c632:	7812      	ldrb	r2, [r2, #0]
    c634:	781b      	ldrb	r3, [r3, #0]
    c636:	4053      	eors	r3, r2
    c638:	b2db      	uxtb	r3, r3
    c63a:	b25b      	sxtb	r3, r3
    c63c:	2b00      	cmp	r3, #0
    c63e:	da07      	bge.n	c650 <sd_mmc_spi_crc7+0x64>
				crc ^= 0x09;
    c640:	230f      	movs	r3, #15
    c642:	18fb      	adds	r3, r7, r3
    c644:	220f      	movs	r2, #15
    c646:	18ba      	adds	r2, r7, r2
    c648:	7812      	ldrb	r2, [r2, #0]
    c64a:	2109      	movs	r1, #9
    c64c:	404a      	eors	r2, r1
    c64e:	701a      	strb	r2, [r3, #0]
			}
			value <<= 1;
    c650:	230e      	movs	r3, #14
    c652:	18fa      	adds	r2, r7, r3
    c654:	230e      	movs	r3, #14
    c656:	18fb      	adds	r3, r7, r3
    c658:	781b      	ldrb	r3, [r3, #0]
    c65a:	18db      	adds	r3, r3, r3
    c65c:	7013      	strb	r3, [r2, #0]
		for (i = 0; i < 8; i++) {
    c65e:	230d      	movs	r3, #13
    c660:	18fb      	adds	r3, r7, r3
    c662:	781a      	ldrb	r2, [r3, #0]
    c664:	230d      	movs	r3, #13
    c666:	18fb      	adds	r3, r7, r3
    c668:	3201      	adds	r2, #1
    c66a:	701a      	strb	r2, [r3, #0]
    c66c:	230d      	movs	r3, #13
    c66e:	18fb      	adds	r3, r7, r3
    c670:	781b      	ldrb	r3, [r3, #0]
    c672:	2b07      	cmp	r3, #7
    c674:	d9d2      	bls.n	c61c <sd_mmc_spi_crc7+0x30>
	while (size--) {
    c676:	1cfb      	adds	r3, r7, #3
    c678:	781b      	ldrb	r3, [r3, #0]
    c67a:	1cfa      	adds	r2, r7, #3
    c67c:	1e59      	subs	r1, r3, #1
    c67e:	7011      	strb	r1, [r2, #0]
    c680:	2b00      	cmp	r3, #0
    c682:	d1bf      	bne.n	c604 <sd_mmc_spi_crc7+0x18>
		}
	}
	crc = (crc << 1) | 1;
    c684:	230f      	movs	r3, #15
    c686:	18fb      	adds	r3, r7, r3
    c688:	781b      	ldrb	r3, [r3, #0]
    c68a:	005b      	lsls	r3, r3, #1
    c68c:	b25b      	sxtb	r3, r3
    c68e:	2201      	movs	r2, #1
    c690:	4313      	orrs	r3, r2
    c692:	b25a      	sxtb	r2, r3
    c694:	230f      	movs	r3, #15
    c696:	18fb      	adds	r3, r7, r3
    c698:	701a      	strb	r2, [r3, #0]
	return crc;
    c69a:	230f      	movs	r3, #15
    c69c:	18fb      	adds	r3, r7, r3
    c69e:	781b      	ldrb	r3, [r3, #0]
}
    c6a0:	0018      	movs	r0, r3
    c6a2:	46bd      	mov	sp, r7
    c6a4:	b004      	add	sp, #16
    c6a6:	bd80      	pop	{r7, pc}

0000c6a8 <sd_mmc_spi_wait_busy>:
 * \brief Wait the end of busy on DAT0 line
 *
 * \return true if success, otherwise false
 */
static bool sd_mmc_spi_wait_busy(void)
{
    c6a8:	b590      	push	{r4, r7, lr}
    c6aa:	b083      	sub	sp, #12
    c6ac:	af00      	add	r7, sp, #0
	uint8_t line = 0xFF;
    c6ae:	1c7b      	adds	r3, r7, #1
    c6b0:	22ff      	movs	r2, #255	; 0xff
    c6b2:	701a      	strb	r2, [r3, #0]
	uint16_t dummy = 0xFF;
    c6b4:	1cbb      	adds	r3, r7, #2
    c6b6:	22ff      	movs	r2, #255	; 0xff
    c6b8:	801a      	strh	r2, [r3, #0]

	/* Delay before check busy
	 * Nbr timing minimum = 8 cylces
	 */
	spi_read_buffer_wait(&sd_mmc_master, &line, 1,
    c6ba:	1cbb      	adds	r3, r7, #2
    c6bc:	881b      	ldrh	r3, [r3, #0]
    c6be:	1c79      	adds	r1, r7, #1
    c6c0:	4811      	ldr	r0, [pc, #68]	; (c708 <sd_mmc_spi_wait_busy+0x60>)
    c6c2:	2201      	movs	r2, #1
    c6c4:	4c11      	ldr	r4, [pc, #68]	; (c70c <sd_mmc_spi_wait_busy+0x64>)
    c6c6:	47a0      	blx	r4
	/* Wait end of busy signal
	 * Nec timing: 0 to unlimited
	 * However a timeout is used.
	 * 200 000 * 8 cycles
	 */
	uint32_t nec_timeout = 200000;
    c6c8:	4b11      	ldr	r3, [pc, #68]	; (c710 <sd_mmc_spi_wait_busy+0x68>)
    c6ca:	607b      	str	r3, [r7, #4]
	spi_read_buffer_wait(&sd_mmc_master, &line, 1,
    c6cc:	1cbb      	adds	r3, r7, #2
    c6ce:	881b      	ldrh	r3, [r3, #0]
    c6d0:	1c79      	adds	r1, r7, #1
    c6d2:	480d      	ldr	r0, [pc, #52]	; (c708 <sd_mmc_spi_wait_busy+0x60>)
    c6d4:	2201      	movs	r2, #1
    c6d6:	4c0d      	ldr	r4, [pc, #52]	; (c70c <sd_mmc_spi_wait_busy+0x64>)
    c6d8:	47a0      	blx	r4
			dummy);
	do {
		spi_read_buffer_wait(&sd_mmc_master, &line, 1,
    c6da:	1cbb      	adds	r3, r7, #2
    c6dc:	881b      	ldrh	r3, [r3, #0]
    c6de:	1c79      	adds	r1, r7, #1
    c6e0:	4809      	ldr	r0, [pc, #36]	; (c708 <sd_mmc_spi_wait_busy+0x60>)
    c6e2:	2201      	movs	r2, #1
    c6e4:	4c09      	ldr	r4, [pc, #36]	; (c70c <sd_mmc_spi_wait_busy+0x64>)
    c6e6:	47a0      	blx	r4
			dummy);
		if (!(nec_timeout--)) {
    c6e8:	687b      	ldr	r3, [r7, #4]
    c6ea:	1e5a      	subs	r2, r3, #1
    c6ec:	607a      	str	r2, [r7, #4]
    c6ee:	2b00      	cmp	r3, #0
    c6f0:	d101      	bne.n	c6f6 <sd_mmc_spi_wait_busy+0x4e>
			return false;
    c6f2:	2300      	movs	r3, #0
    c6f4:	e004      	b.n	c700 <sd_mmc_spi_wait_busy+0x58>
		}
	} while (line != 0xFF);
    c6f6:	1c7b      	adds	r3, r7, #1
    c6f8:	781b      	ldrb	r3, [r3, #0]
    c6fa:	2bff      	cmp	r3, #255	; 0xff
    c6fc:	d1ed      	bne.n	c6da <sd_mmc_spi_wait_busy+0x32>
	return true;
    c6fe:	2301      	movs	r3, #1
}
    c700:	0018      	movs	r0, r3
    c702:	46bd      	mov	sp, r7
    c704:	b003      	add	sp, #12
    c706:	bd90      	pop	{r4, r7, pc}
    c708:	20003ccc 	.word	0x20003ccc
    c70c:	00014eed 	.word	0x00014eed
    c710:	00030d40 	.word	0x00030d40

0000c714 <sd_mmc_spi_start_read_block>:
 *
 * \return true if success, otherwise false
 *         with a update of \ref sd_mmc_spi_err.
 */
static bool sd_mmc_spi_start_read_block(void)
{
    c714:	b590      	push	{r4, r7, lr}
    c716:	b083      	sub	sp, #12
    c718:	af00      	add	r7, sp, #0
	uint32_t i;
	uint8_t token;
	uint16_t dummy = 0xFF;
    c71a:	1cbb      	adds	r3, r7, #2
    c71c:	22ff      	movs	r2, #255	; 0xff
    c71e:	801a      	strh	r2, [r3, #0]
	 * Compute the maximum timeout:
	 * Frequency maximum = 25MHz
	 * 1 byte = 8 cycles
	 * 100ms = 312500 x spi_read_buffer_wait() maximum
	 */
	token = 0;
    c720:	1c7b      	adds	r3, r7, #1
    c722:	2200      	movs	r2, #0
    c724:	701a      	strb	r2, [r3, #0]
	i = 500000;
    c726:	4b18      	ldr	r3, [pc, #96]	; (c788 <sd_mmc_spi_start_read_block+0x74>)
    c728:	607b      	str	r3, [r7, #4]
	do {
		if (i-- == 0) {
    c72a:	687b      	ldr	r3, [r7, #4]
    c72c:	1e5a      	subs	r2, r3, #1
    c72e:	607a      	str	r2, [r7, #4]
    c730:	2b00      	cmp	r3, #0
    c732:	d104      	bne.n	c73e <sd_mmc_spi_start_read_block+0x2a>
			sd_mmc_spi_err = SD_MMC_SPI_ERR_READ_TIMEOUT;
    c734:	4b15      	ldr	r3, [pc, #84]	; (c78c <sd_mmc_spi_start_read_block+0x78>)
    c736:	2204      	movs	r2, #4
    c738:	701a      	strb	r2, [r3, #0]
			sd_mmc_spi_debug("%s: Read blocks timeout\n\r", __func__);
			return false;
    c73a:	2300      	movs	r3, #0
    c73c:	e020      	b.n	c780 <sd_mmc_spi_start_read_block+0x6c>
		}
		spi_read_buffer_wait(&sd_mmc_master, &token, 1,
    c73e:	1cbb      	adds	r3, r7, #2
    c740:	881b      	ldrh	r3, [r3, #0]
    c742:	1c79      	adds	r1, r7, #1
    c744:	4812      	ldr	r0, [pc, #72]	; (c790 <sd_mmc_spi_start_read_block+0x7c>)
    c746:	2201      	movs	r2, #1
    c748:	4c12      	ldr	r4, [pc, #72]	; (c794 <sd_mmc_spi_start_read_block+0x80>)
    c74a:	47a0      	blx	r4
			dummy);
		if (SPI_TOKEN_DATA_ERROR_VALID(token)) {
    c74c:	1c7b      	adds	r3, r7, #1
    c74e:	781b      	ldrb	r3, [r3, #0]
    c750:	001a      	movs	r2, r3
    c752:	23f0      	movs	r3, #240	; 0xf0
    c754:	4013      	ands	r3, r2
    c756:	d10e      	bne.n	c776 <sd_mmc_spi_start_read_block+0x62>
			Assert(SPI_TOKEN_DATA_ERROR_ERRORS & token);
			if (token & (SPI_TOKEN_DATA_ERROR_ERROR
    c758:	1c7b      	adds	r3, r7, #1
    c75a:	781b      	ldrb	r3, [r3, #0]
    c75c:	001a      	movs	r2, r3
    c75e:	2307      	movs	r3, #7
    c760:	4013      	ands	r3, r2
    c762:	d003      	beq.n	c76c <sd_mmc_spi_start_read_block+0x58>
					| SPI_TOKEN_DATA_ERROR_ECC_ERROR
					| SPI_TOKEN_DATA_ERROR_CC_ERROR)) {
				sd_mmc_spi_debug("%s: CRC data error token\n\r", __func__);
				sd_mmc_spi_err = SD_MMC_SPI_ERR_READ_CRC;
    c764:	4b09      	ldr	r3, [pc, #36]	; (c78c <sd_mmc_spi_start_read_block+0x78>)
    c766:	2207      	movs	r2, #7
    c768:	701a      	strb	r2, [r3, #0]
    c76a:	e002      	b.n	c772 <sd_mmc_spi_start_read_block+0x5e>
			} else {
				sd_mmc_spi_debug("%s: Out of range data error token\n\r", __func__);
				sd_mmc_spi_err = SD_MMC_SPI_ERR_OUT_OF_RANGE;
    c76c:	4b07      	ldr	r3, [pc, #28]	; (c78c <sd_mmc_spi_start_read_block+0x78>)
    c76e:	220b      	movs	r2, #11
    c770:	701a      	strb	r2, [r3, #0]
			}
			return false;
    c772:	2300      	movs	r3, #0
    c774:	e004      	b.n	c780 <sd_mmc_spi_start_read_block+0x6c>
		}
	} while (token != SPI_TOKEN_SINGLE_MULTI_READ);
    c776:	1c7b      	adds	r3, r7, #1
    c778:	781b      	ldrb	r3, [r3, #0]
    c77a:	2bfe      	cmp	r3, #254	; 0xfe
    c77c:	d1d5      	bne.n	c72a <sd_mmc_spi_start_read_block+0x16>

	return true;
    c77e:	2301      	movs	r3, #1
}
    c780:	0018      	movs	r0, r3
    c782:	46bd      	mov	sp, r7
    c784:	b003      	add	sp, #12
    c786:	bd90      	pop	{r4, r7, pc}
    c788:	0007a120 	.word	0x0007a120
    c78c:	20003d0f 	.word	0x20003d0f
    c790:	20003ccc 	.word	0x20003ccc
    c794:	00014eed 	.word	0x00014eed

0000c798 <sd_mmc_spi_stop_read_block>:

/**
 * \brief Executed the end of a read block transfer
 */
static void sd_mmc_spi_stop_read_block(void)
{
    c798:	b590      	push	{r4, r7, lr}
    c79a:	b083      	sub	sp, #12
    c79c:	af00      	add	r7, sp, #0
	uint8_t crc[2];
	uint16_t dummy = 0xFF;
    c79e:	1dbb      	adds	r3, r7, #6
    c7a0:	22ff      	movs	r2, #255	; 0xff
    c7a2:	801a      	strh	r2, [r3, #0]
	// Read 16-bit CRC (not cheked)
	spi_read_buffer_wait(&sd_mmc_master, crc, 2,
    c7a4:	1dbb      	adds	r3, r7, #6
    c7a6:	881b      	ldrh	r3, [r3, #0]
    c7a8:	1d39      	adds	r1, r7, #4
    c7aa:	4804      	ldr	r0, [pc, #16]	; (c7bc <sd_mmc_spi_stop_read_block+0x24>)
    c7ac:	2202      	movs	r2, #2
    c7ae:	4c04      	ldr	r4, [pc, #16]	; (c7c0 <sd_mmc_spi_stop_read_block+0x28>)
    c7b0:	47a0      	blx	r4
			dummy);
}
    c7b2:	46c0      	nop			; (mov r8, r8)
    c7b4:	46bd      	mov	sp, r7
    c7b6:	b003      	add	sp, #12
    c7b8:	bd90      	pop	{r4, r7, pc}
    c7ba:	46c0      	nop			; (mov r8, r8)
    c7bc:	20003ccc 	.word	0x20003ccc
    c7c0:	00014eed 	.word	0x00014eed

0000c7c4 <sd_mmc_spi_start_write_block>:

/**
 * \brief Sends the correct TOKEN on the line to start a write block transfer
 */
static void sd_mmc_spi_start_write_block(void)
{
    c7c4:	b580      	push	{r7, lr}
    c7c6:	b082      	sub	sp, #8
    c7c8:	af00      	add	r7, sp, #0
	uint8_t dummy = 0xFF;
    c7ca:	1dfb      	adds	r3, r7, #7
    c7cc:	22ff      	movs	r2, #255	; 0xff
    c7ce:	701a      	strb	r2, [r3, #0]
	Assert(!(sd_mmc_spi_transfert_pos % sd_mmc_spi_block_size));
	// Delay before start write block:
	// Nwr timing minimum = 8 cylces
	spi_write_buffer_wait(&sd_mmc_master,&dummy, 1);
    c7d0:	1df9      	adds	r1, r7, #7
    c7d2:	4b0d      	ldr	r3, [pc, #52]	; (c808 <sd_mmc_spi_start_write_block+0x44>)
    c7d4:	2201      	movs	r2, #1
    c7d6:	0018      	movs	r0, r3
    c7d8:	4b0c      	ldr	r3, [pc, #48]	; (c80c <sd_mmc_spi_start_write_block+0x48>)
    c7da:	4798      	blx	r3
	// Send start token
	uint8_t token;
	if (1 == sd_mmc_spi_nb_block) {
    c7dc:	4b0c      	ldr	r3, [pc, #48]	; (c810 <sd_mmc_spi_start_write_block+0x4c>)
    c7de:	881b      	ldrh	r3, [r3, #0]
    c7e0:	2b01      	cmp	r3, #1
    c7e2:	d103      	bne.n	c7ec <sd_mmc_spi_start_write_block+0x28>
		token = SPI_TOKEN_SINGLE_WRITE;
    c7e4:	1dbb      	adds	r3, r7, #6
    c7e6:	22fe      	movs	r2, #254	; 0xfe
    c7e8:	701a      	strb	r2, [r3, #0]
    c7ea:	e002      	b.n	c7f2 <sd_mmc_spi_start_write_block+0x2e>
	} else {
		token = SPI_TOKEN_MULTI_WRITE;
    c7ec:	1dbb      	adds	r3, r7, #6
    c7ee:	22fc      	movs	r2, #252	; 0xfc
    c7f0:	701a      	strb	r2, [r3, #0]
	}
	spi_write_buffer_wait(&sd_mmc_master,&token, 1);
    c7f2:	1db9      	adds	r1, r7, #6
    c7f4:	4b04      	ldr	r3, [pc, #16]	; (c808 <sd_mmc_spi_start_write_block+0x44>)
    c7f6:	2201      	movs	r2, #1
    c7f8:	0018      	movs	r0, r3
    c7fa:	4b04      	ldr	r3, [pc, #16]	; (c80c <sd_mmc_spi_start_write_block+0x48>)
    c7fc:	4798      	blx	r3
}
    c7fe:	46c0      	nop			; (mov r8, r8)
    c800:	46bd      	mov	sp, r7
    c802:	b002      	add	sp, #8
    c804:	bd80      	pop	{r7, pc}
    c806:	46c0      	nop			; (mov r8, r8)
    c808:	20003ccc 	.word	0x20003ccc
    c80c:	00015111 	.word	0x00015111
    c810:	20003d1a 	.word	0x20003d1a

0000c814 <sd_mmc_spi_stop_write_block>:
 *
 * \return true if success, otherwise false
 *         with a update of \ref sd_mmc_spi_err.
 */
static bool sd_mmc_spi_stop_write_block(void)
{
    c814:	b590      	push	{r4, r7, lr}
    c816:	b083      	sub	sp, #12
    c818:	af00      	add	r7, sp, #0
	uint8_t resp;
	uint16_t crc;
	uint16_t dummy = 0xFF;
    c81a:	1dbb      	adds	r3, r7, #6
    c81c:	22ff      	movs	r2, #255	; 0xff
    c81e:	801a      	strh	r2, [r3, #0]

	// Send CRC
	crc = 0xFFFF; /// CRC is disabled in SPI mode
    c820:	1cbb      	adds	r3, r7, #2
    c822:	2201      	movs	r2, #1
    c824:	4252      	negs	r2, r2
    c826:	801a      	strh	r2, [r3, #0]
	spi_write_buffer_wait(&sd_mmc_master, (uint8_t *)&crc, 2);
    c828:	1cb9      	adds	r1, r7, #2
    c82a:	4b1b      	ldr	r3, [pc, #108]	; (c898 <sd_mmc_spi_stop_write_block+0x84>)
    c82c:	2202      	movs	r2, #2
    c82e:	0018      	movs	r0, r3
    c830:	4b1a      	ldr	r3, [pc, #104]	; (c89c <sd_mmc_spi_stop_write_block+0x88>)
    c832:	4798      	blx	r3
	// Receiv data response token
	spi_read_buffer_wait(&sd_mmc_master, &resp, 1,
    c834:	1dbb      	adds	r3, r7, #6
    c836:	881b      	ldrh	r3, [r3, #0]
    c838:	1d79      	adds	r1, r7, #5
    c83a:	4817      	ldr	r0, [pc, #92]	; (c898 <sd_mmc_spi_stop_write_block+0x84>)
    c83c:	2201      	movs	r2, #1
    c83e:	4c18      	ldr	r4, [pc, #96]	; (c8a0 <sd_mmc_spi_stop_write_block+0x8c>)
    c840:	47a0      	blx	r4
			dummy);
	if (!SPI_TOKEN_DATA_RESP_VALID(resp)) {
    c842:	1d7b      	adds	r3, r7, #5
    c844:	781b      	ldrb	r3, [r3, #0]
    c846:	001a      	movs	r2, r3
    c848:	2310      	movs	r3, #16
    c84a:	4013      	ands	r3, r2
    c84c:	d105      	bne.n	c85a <sd_mmc_spi_stop_write_block+0x46>
    c84e:	1d7b      	adds	r3, r7, #5
    c850:	781b      	ldrb	r3, [r3, #0]
    c852:	001a      	movs	r2, r3
    c854:	2301      	movs	r3, #1
    c856:	4013      	ands	r3, r2
    c858:	d104      	bne.n	c864 <sd_mmc_spi_stop_write_block+0x50>
		sd_mmc_spi_err = SD_MMC_SPI_ERR;
    c85a:	4b12      	ldr	r3, [pc, #72]	; (c8a4 <sd_mmc_spi_stop_write_block+0x90>)
    c85c:	2201      	movs	r2, #1
    c85e:	701a      	strb	r2, [r3, #0]
		sd_mmc_spi_debug("%s: Invalid Data Response Token 0x%x\n\r", __func__, resp);
		return false;
    c860:	2300      	movs	r3, #0
    c862:	e014      	b.n	c88e <sd_mmc_spi_stop_write_block+0x7a>
	}
	// Check data response
	switch (SPI_TOKEN_DATA_RESP_CODE(resp)) {
    c864:	1d7b      	adds	r3, r7, #5
    c866:	781b      	ldrb	r3, [r3, #0]
    c868:	001a      	movs	r2, r3
    c86a:	231e      	movs	r3, #30
    c86c:	4013      	ands	r3, r2
    c86e:	2b04      	cmp	r3, #4
    c870:	d00b      	beq.n	c88a <sd_mmc_spi_stop_write_block+0x76>
    c872:	2b0a      	cmp	r3, #10
    c874:	d104      	bne.n	c880 <sd_mmc_spi_stop_write_block+0x6c>
	case SPI_TOKEN_DATA_RESP_ACCEPTED:
		break;
	case SPI_TOKEN_DATA_RESP_CRC_ERR:
		sd_mmc_spi_err = SD_MMC_SPI_ERR_WRITE_CRC;
    c876:	4b0b      	ldr	r3, [pc, #44]	; (c8a4 <sd_mmc_spi_stop_write_block+0x90>)
    c878:	2208      	movs	r2, #8
    c87a:	701a      	strb	r2, [r3, #0]
		sd_mmc_spi_debug("%s: Write blocks, SD_MMC_SPI_ERR_CRC, resp 0x%x\n\r",
				__func__, resp);
		return false;
    c87c:	2300      	movs	r3, #0
    c87e:	e006      	b.n	c88e <sd_mmc_spi_stop_write_block+0x7a>
	case SPI_TOKEN_DATA_RESP_WRITE_ERR:
	default:
		sd_mmc_spi_err = SD_MMC_SPI_ERR_WRITE;
    c880:	4b08      	ldr	r3, [pc, #32]	; (c8a4 <sd_mmc_spi_stop_write_block+0x90>)
    c882:	220a      	movs	r2, #10
    c884:	701a      	strb	r2, [r3, #0]
		sd_mmc_spi_debug("%s: Write blocks SD_MMC_SPI_ERR_WR, resp 0x%x\n\r",
				__func__, resp);
		return false;
    c886:	2300      	movs	r3, #0
    c888:	e001      	b.n	c88e <sd_mmc_spi_stop_write_block+0x7a>
		break;
    c88a:	46c0      	nop			; (mov r8, r8)
	}
	return true;
    c88c:	2301      	movs	r3, #1
}
    c88e:	0018      	movs	r0, r3
    c890:	46bd      	mov	sp, r7
    c892:	b003      	add	sp, #12
    c894:	bd90      	pop	{r4, r7, pc}
    c896:	46c0      	nop			; (mov r8, r8)
    c898:	20003ccc 	.word	0x20003ccc
    c89c:	00015111 	.word	0x00015111
    c8a0:	00014eed 	.word	0x00014eed
    c8a4:	20003d0f 	.word	0x20003d0f

0000c8a8 <sd_mmc_spi_stop_multiwrite_block>:
 *
 * \return true if success, otherwise false
 *         with a update of \ref sd_mmc_spi_err.
 */
static bool sd_mmc_spi_stop_multiwrite_block(void)
{
    c8a8:	b590      	push	{r4, r7, lr}
    c8aa:	b083      	sub	sp, #12
    c8ac:	af00      	add	r7, sp, #0
	uint8_t value;

	if (1 == sd_mmc_spi_nb_block) {
    c8ae:	4b1d      	ldr	r3, [pc, #116]	; (c924 <sd_mmc_spi_stop_multiwrite_block+0x7c>)
    c8b0:	881b      	ldrh	r3, [r3, #0]
    c8b2:	2b01      	cmp	r3, #1
    c8b4:	d101      	bne.n	c8ba <sd_mmc_spi_stop_multiwrite_block+0x12>
		return true; // Single block write
    c8b6:	2301      	movs	r3, #1
    c8b8:	e030      	b.n	c91c <sd_mmc_spi_stop_multiwrite_block+0x74>
	}
	if (sd_mmc_spi_nb_block >
    c8ba:	4b1a      	ldr	r3, [pc, #104]	; (c924 <sd_mmc_spi_stop_multiwrite_block+0x7c>)
    c8bc:	881b      	ldrh	r3, [r3, #0]
    c8be:	001c      	movs	r4, r3
		(sd_mmc_spi_transfert_pos / sd_mmc_spi_block_size)) {
    c8c0:	4b19      	ldr	r3, [pc, #100]	; (c928 <sd_mmc_spi_stop_multiwrite_block+0x80>)
    c8c2:	681a      	ldr	r2, [r3, #0]
    c8c4:	4b19      	ldr	r3, [pc, #100]	; (c92c <sd_mmc_spi_stop_multiwrite_block+0x84>)
    c8c6:	881b      	ldrh	r3, [r3, #0]
    c8c8:	0019      	movs	r1, r3
    c8ca:	4b19      	ldr	r3, [pc, #100]	; (c930 <sd_mmc_spi_stop_multiwrite_block+0x88>)
    c8cc:	0010      	movs	r0, r2
    c8ce:	4798      	blx	r3
    c8d0:	0003      	movs	r3, r0
	if (sd_mmc_spi_nb_block >
    c8d2:	429c      	cmp	r4, r3
    c8d4:	d901      	bls.n	c8da <sd_mmc_spi_stop_multiwrite_block+0x32>
		return true; // It is not the End of multi write
    c8d6:	2301      	movs	r3, #1
    c8d8:	e020      	b.n	c91c <sd_mmc_spi_stop_multiwrite_block+0x74>
	}

	// Delay before start write block:
	// Nwr timing minimum = 8 cylces
	value = 0xFF;
    c8da:	1dfb      	adds	r3, r7, #7
    c8dc:	22ff      	movs	r2, #255	; 0xff
    c8de:	701a      	strb	r2, [r3, #0]
	spi_write_buffer_wait(&sd_mmc_master, &value, 1);
    c8e0:	1df9      	adds	r1, r7, #7
    c8e2:	4b14      	ldr	r3, [pc, #80]	; (c934 <sd_mmc_spi_stop_multiwrite_block+0x8c>)
    c8e4:	2201      	movs	r2, #1
    c8e6:	0018      	movs	r0, r3
    c8e8:	4b13      	ldr	r3, [pc, #76]	; (c938 <sd_mmc_spi_stop_multiwrite_block+0x90>)
    c8ea:	4798      	blx	r3
	// Send stop token
	value = SPI_TOKEN_STOP_TRAN;
    c8ec:	1dfb      	adds	r3, r7, #7
    c8ee:	22fd      	movs	r2, #253	; 0xfd
    c8f0:	701a      	strb	r2, [r3, #0]
	spi_write_buffer_wait(&sd_mmc_master, &value, 1);
    c8f2:	1df9      	adds	r1, r7, #7
    c8f4:	4b0f      	ldr	r3, [pc, #60]	; (c934 <sd_mmc_spi_stop_multiwrite_block+0x8c>)
    c8f6:	2201      	movs	r2, #1
    c8f8:	0018      	movs	r0, r3
    c8fa:	4b0f      	ldr	r3, [pc, #60]	; (c938 <sd_mmc_spi_stop_multiwrite_block+0x90>)
    c8fc:	4798      	blx	r3
	// Wait busy
	if (!sd_mmc_spi_wait_busy()) {
    c8fe:	4b0f      	ldr	r3, [pc, #60]	; (c93c <sd_mmc_spi_stop_multiwrite_block+0x94>)
    c900:	4798      	blx	r3
    c902:	0003      	movs	r3, r0
    c904:	001a      	movs	r2, r3
    c906:	2301      	movs	r3, #1
    c908:	4053      	eors	r3, r2
    c90a:	b2db      	uxtb	r3, r3
    c90c:	2b00      	cmp	r3, #0
    c90e:	d004      	beq.n	c91a <sd_mmc_spi_stop_multiwrite_block+0x72>
		sd_mmc_spi_err = SD_MMC_SPI_ERR_WRITE_TIMEOUT;
    c910:	4b0b      	ldr	r3, [pc, #44]	; (c940 <sd_mmc_spi_stop_multiwrite_block+0x98>)
    c912:	2205      	movs	r2, #5
    c914:	701a      	strb	r2, [r3, #0]
		sd_mmc_spi_debug("%s: Stop write blocks timeout\n\r",
				__func__);
		return false;
    c916:	2300      	movs	r3, #0
    c918:	e000      	b.n	c91c <sd_mmc_spi_stop_multiwrite_block+0x74>
	}
	return true;
    c91a:	2301      	movs	r3, #1
}
    c91c:	0018      	movs	r0, r3
    c91e:	46bd      	mov	sp, r7
    c920:	b003      	add	sp, #12
    c922:	bd90      	pop	{r4, r7, pc}
    c924:	20003d1a 	.word	0x20003d1a
    c928:	20003d14 	.word	0x20003d14
    c92c:	20003d18 	.word	0x20003d18
    c930:	0001f841 	.word	0x0001f841
    c934:	20003ccc 	.word	0x20003ccc
    c938:	00015111 	.word	0x00015111
    c93c:	0000c6a9 	.word	0x0000c6a9
    c940:	20003d0f 	.word	0x20003d0f

0000c944 <sd_mmc_spi_init>:
{
	return sd_mmc_spi_err;
}

void sd_mmc_spi_init(void)
{
    c944:	b580      	push	{r7, lr}
    c946:	b090      	sub	sp, #64	; 0x40
    c948:	af00      	add	r7, sp, #0
	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
    c94a:	4b1f      	ldr	r3, [pc, #124]	; (c9c8 <sd_mmc_spi_init+0x84>)
    c94c:	2200      	movs	r2, #0
    c94e:	701a      	strb	r2, [r3, #0]

	// Initialize card detect pin
	struct port_config pin_conf;
	port_get_config_defaults(&pin_conf);
    c950:	233c      	movs	r3, #60	; 0x3c
    c952:	18fb      	adds	r3, r7, r3
    c954:	0018      	movs	r0, r3
    c956:	4b1d      	ldr	r3, [pc, #116]	; (c9cc <sd_mmc_spi_init+0x88>)
    c958:	4798      	blx	r3
	port_pin_set_config(SD_MMC_0_CD_GPIO, &pin_conf);
	#endif

	// Initialize SPI interface and enable it
	struct spi_config config;
	spi_get_config_defaults(&config);
    c95a:	1d3b      	adds	r3, r7, #4
    c95c:	0018      	movs	r0, r3
    c95e:	4b1c      	ldr	r3, [pc, #112]	; (c9d0 <sd_mmc_spi_init+0x8c>)
    c960:	4798      	blx	r3

	config.mux_setting = SD_MMC_SPI_PINMUX_SETTING;
    c962:	1d3b      	adds	r3, r7, #4
    c964:	2280      	movs	r2, #128	; 0x80
    c966:	0252      	lsls	r2, r2, #9
    c968:	60da      	str	r2, [r3, #12]
	config.pinmux_pad0 = SD_MMC_SPI_PINMUX_PAD0;
    c96a:	1d3b      	adds	r3, r7, #4
    c96c:	4a19      	ldr	r2, [pc, #100]	; (c9d4 <sd_mmc_spi_init+0x90>)
    c96e:	629a      	str	r2, [r3, #40]	; 0x28
	config.pinmux_pad1 = SD_MMC_SPI_PINMUX_PAD1;
    c970:	1d3b      	adds	r3, r7, #4
    c972:	4a19      	ldr	r2, [pc, #100]	; (c9d8 <sd_mmc_spi_init+0x94>)
    c974:	62da      	str	r2, [r3, #44]	; 0x2c
	config.pinmux_pad2 = SD_MMC_SPI_PINMUX_PAD2;
    c976:	1d3b      	adds	r3, r7, #4
    c978:	4a18      	ldr	r2, [pc, #96]	; (c9dc <sd_mmc_spi_init+0x98>)
    c97a:	631a      	str	r2, [r3, #48]	; 0x30
	config.pinmux_pad3 = SD_MMC_SPI_PINMUX_PAD3;
    c97c:	1d3b      	adds	r3, r7, #4
    c97e:	4a18      	ldr	r2, [pc, #96]	; (c9e0 <sd_mmc_spi_init+0x9c>)
    c980:	635a      	str	r2, [r3, #52]	; 0x34
	config.generator_source = SD_MMC_SPI_SOURCE_CLOCK;
    c982:	1d3b      	adds	r3, r7, #4
    c984:	2224      	movs	r2, #36	; 0x24
    c986:	2100      	movs	r1, #0
    c988:	5499      	strb	r1, [r3, r2]
	config.mode_specific.master.baudrate = SDMMC_CLOCK_INIT;
    c98a:	1d3b      	adds	r3, r7, #4
    c98c:	4a15      	ldr	r2, [pc, #84]	; (c9e4 <sd_mmc_spi_init+0xa0>)
    c98e:	619a      	str	r2, [r3, #24]

	spi_init(&sd_mmc_master, SD_MMC_SPI, &config);
    c990:	1d3a      	adds	r2, r7, #4
    c992:	4915      	ldr	r1, [pc, #84]	; (c9e8 <sd_mmc_spi_init+0xa4>)
    c994:	4b15      	ldr	r3, [pc, #84]	; (c9ec <sd_mmc_spi_init+0xa8>)
    c996:	0018      	movs	r0, r3
    c998:	4b15      	ldr	r3, [pc, #84]	; (c9f0 <sd_mmc_spi_init+0xac>)
    c99a:	4798      	blx	r3
	spi_enable(&sd_mmc_master);
    c99c:	4b13      	ldr	r3, [pc, #76]	; (c9ec <sd_mmc_spi_init+0xa8>)
    c99e:	0018      	movs	r0, r3
    c9a0:	4b14      	ldr	r3, [pc, #80]	; (c9f4 <sd_mmc_spi_init+0xb0>)
    c9a2:	4798      	blx	r3

	spi_slave_inst_get_config_defaults(&slave_configs[0]);
    c9a4:	4b14      	ldr	r3, [pc, #80]	; (c9f8 <sd_mmc_spi_init+0xb4>)
    c9a6:	0018      	movs	r0, r3
    c9a8:	4b14      	ldr	r3, [pc, #80]	; (c9fc <sd_mmc_spi_init+0xb8>)
    c9aa:	4798      	blx	r3
	slave_configs[0].ss_pin = ss_pins[0];
    c9ac:	4b14      	ldr	r3, [pc, #80]	; (ca00 <sd_mmc_spi_init+0xbc>)
    c9ae:	781a      	ldrb	r2, [r3, #0]
    c9b0:	4b11      	ldr	r3, [pc, #68]	; (c9f8 <sd_mmc_spi_init+0xb4>)
    c9b2:	701a      	strb	r2, [r3, #0]
	spi_attach_slave(&sd_mmc_spi_devices[0], &slave_configs[0]);
    c9b4:	4a10      	ldr	r2, [pc, #64]	; (c9f8 <sd_mmc_spi_init+0xb4>)
    c9b6:	4b13      	ldr	r3, [pc, #76]	; (ca04 <sd_mmc_spi_init+0xc0>)
    c9b8:	0011      	movs	r1, r2
    c9ba:	0018      	movs	r0, r3
    c9bc:	4b12      	ldr	r3, [pc, #72]	; (ca08 <sd_mmc_spi_init+0xc4>)
    c9be:	4798      	blx	r3
}
    c9c0:	46c0      	nop			; (mov r8, r8)
    c9c2:	46bd      	mov	sp, r7
    c9c4:	b010      	add	sp, #64	; 0x40
    c9c6:	bd80      	pop	{r7, pc}
    c9c8:	20003d0f 	.word	0x20003d0f
    c9cc:	0000c3f9 	.word	0x0000c3f9
    c9d0:	0000c491 	.word	0x0000c491
    c9d4:	00100002 	.word	0x00100002
    c9d8:	00110002 	.word	0x00110002
    c9dc:	00120002 	.word	0x00120002
    c9e0:	00130002 	.word	0x00130002
    c9e4:	00061a80 	.word	0x00061a80
    c9e8:	42000c00 	.word	0x42000c00
    c9ec:	20003ccc 	.word	0x20003ccc
    c9f0:	00014d5d 	.word	0x00014d5d
    c9f4:	0000c59d 	.word	0x0000c59d
    c9f8:	20003d0c 	.word	0x20003d0c
    c9fc:	0000c515 	.word	0x0000c515
    ca00:	20000108 	.word	0x20000108
    ca04:	20003d08 	.word	0x20003d08
    ca08:	0000c539 	.word	0x0000c539

0000ca0c <sd_mmc_spi_select_device>:

void sd_mmc_spi_select_device(uint8_t slot, uint32_t clock, uint8_t bus_width,
		bool high_speed)
{
    ca0c:	b590      	push	{r4, r7, lr}
    ca0e:	b083      	sub	sp, #12
    ca10:	af00      	add	r7, sp, #0
    ca12:	0004      	movs	r4, r0
    ca14:	6039      	str	r1, [r7, #0]
    ca16:	0010      	movs	r0, r2
    ca18:	0019      	movs	r1, r3
    ca1a:	1dfb      	adds	r3, r7, #7
    ca1c:	1c22      	adds	r2, r4, #0
    ca1e:	701a      	strb	r2, [r3, #0]
    ca20:	1dbb      	adds	r3, r7, #6
    ca22:	1c02      	adds	r2, r0, #0
    ca24:	701a      	strb	r2, [r3, #0]
    ca26:	1d7b      	adds	r3, r7, #5
    ca28:	1c0a      	adds	r2, r1, #0
    ca2a:	701a      	strb	r2, [r3, #0]
	UNUSED(bus_width);
	UNUSED(high_speed);
	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
    ca2c:	4b13      	ldr	r3, [pc, #76]	; (ca7c <sd_mmc_spi_select_device+0x70>)
    ca2e:	2200      	movs	r2, #0
    ca30:	701a      	strb	r2, [r3, #0]

#ifdef SD_MMC_SPI_MAX_CLOCK
	if (clock > SD_MMC_SPI_MAX_CLOCK) {
    ca32:	683b      	ldr	r3, [r7, #0]
    ca34:	4a12      	ldr	r2, [pc, #72]	; (ca80 <sd_mmc_spi_select_device+0x74>)
    ca36:	4293      	cmp	r3, r2
    ca38:	d907      	bls.n	ca4a <sd_mmc_spi_select_device+0x3e>
		clock = SD_MMC_SPI_MAX_CLOCK;
    ca3a:	4b11      	ldr	r3, [pc, #68]	; (ca80 <sd_mmc_spi_select_device+0x74>)
    ca3c:	603b      	str	r3, [r7, #0]
	}
#endif
	while (STATUS_ERR_INVALID_ARG == spi_set_baudrate(&sd_mmc_master, clock)) {
    ca3e:	e004      	b.n	ca4a <sd_mmc_spi_select_device+0x3e>
		clock -= clock / 8;
    ca40:	683b      	ldr	r3, [r7, #0]
    ca42:	08db      	lsrs	r3, r3, #3
    ca44:	683a      	ldr	r2, [r7, #0]
    ca46:	1ad3      	subs	r3, r2, r3
    ca48:	603b      	str	r3, [r7, #0]
	while (STATUS_ERR_INVALID_ARG == spi_set_baudrate(&sd_mmc_master, clock)) {
    ca4a:	683a      	ldr	r2, [r7, #0]
    ca4c:	4b0d      	ldr	r3, [pc, #52]	; (ca84 <sd_mmc_spi_select_device+0x78>)
    ca4e:	0011      	movs	r1, r2
    ca50:	0018      	movs	r0, r3
    ca52:	4b0d      	ldr	r3, [pc, #52]	; (ca88 <sd_mmc_spi_select_device+0x7c>)
    ca54:	4798      	blx	r3
    ca56:	0003      	movs	r3, r0
    ca58:	2b17      	cmp	r3, #23
    ca5a:	d0f1      	beq.n	ca40 <sd_mmc_spi_select_device+0x34>
	}
	spi_select_slave(&sd_mmc_master, &sd_mmc_spi_devices[slot], true);
    ca5c:	1dfb      	adds	r3, r7, #7
    ca5e:	781a      	ldrb	r2, [r3, #0]
    ca60:	0013      	movs	r3, r2
    ca62:	005b      	lsls	r3, r3, #1
    ca64:	189b      	adds	r3, r3, r2
    ca66:	4a09      	ldr	r2, [pc, #36]	; (ca8c <sd_mmc_spi_select_device+0x80>)
    ca68:	1899      	adds	r1, r3, r2
    ca6a:	4b06      	ldr	r3, [pc, #24]	; (ca84 <sd_mmc_spi_select_device+0x78>)
    ca6c:	2201      	movs	r2, #1
    ca6e:	0018      	movs	r0, r3
    ca70:	4b07      	ldr	r3, [pc, #28]	; (ca90 <sd_mmc_spi_select_device+0x84>)
    ca72:	4798      	blx	r3
}
    ca74:	46c0      	nop			; (mov r8, r8)
    ca76:	46bd      	mov	sp, r7
    ca78:	b003      	add	sp, #12
    ca7a:	bd90      	pop	{r4, r7, pc}
    ca7c:	20003d0f 	.word	0x20003d0f
    ca80:	00989680 	.word	0x00989680
    ca84:	20003ccc 	.word	0x20003ccc
    ca88:	00014a85 	.word	0x00014a85
    ca8c:	20003d08 	.word	0x20003d08
    ca90:	00015021 	.word	0x00015021

0000ca94 <sd_mmc_spi_deselect_device>:

void sd_mmc_spi_deselect_device(uint8_t slot)
{
    ca94:	b580      	push	{r7, lr}
    ca96:	b082      	sub	sp, #8
    ca98:	af00      	add	r7, sp, #0
    ca9a:	0002      	movs	r2, r0
    ca9c:	1dfb      	adds	r3, r7, #7
    ca9e:	701a      	strb	r2, [r3, #0]
	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
    caa0:	4b09      	ldr	r3, [pc, #36]	; (cac8 <sd_mmc_spi_deselect_device+0x34>)
    caa2:	2200      	movs	r2, #0
    caa4:	701a      	strb	r2, [r3, #0]
	spi_select_slave(&sd_mmc_master, &sd_mmc_spi_devices[slot], false);
    caa6:	1dfb      	adds	r3, r7, #7
    caa8:	781a      	ldrb	r2, [r3, #0]
    caaa:	0013      	movs	r3, r2
    caac:	005b      	lsls	r3, r3, #1
    caae:	189b      	adds	r3, r3, r2
    cab0:	4a06      	ldr	r2, [pc, #24]	; (cacc <sd_mmc_spi_deselect_device+0x38>)
    cab2:	1899      	adds	r1, r3, r2
    cab4:	4b06      	ldr	r3, [pc, #24]	; (cad0 <sd_mmc_spi_deselect_device+0x3c>)
    cab6:	2200      	movs	r2, #0
    cab8:	0018      	movs	r0, r3
    caba:	4b06      	ldr	r3, [pc, #24]	; (cad4 <sd_mmc_spi_deselect_device+0x40>)
    cabc:	4798      	blx	r3
}
    cabe:	46c0      	nop			; (mov r8, r8)
    cac0:	46bd      	mov	sp, r7
    cac2:	b002      	add	sp, #8
    cac4:	bd80      	pop	{r7, pc}
    cac6:	46c0      	nop			; (mov r8, r8)
    cac8:	20003d0f 	.word	0x20003d0f
    cacc:	20003d08 	.word	0x20003d08
    cad0:	20003ccc 	.word	0x20003ccc
    cad4:	00015021 	.word	0x00015021

0000cad8 <sd_mmc_spi_send_clock>:

void sd_mmc_spi_send_clock(void)
{
    cad8:	b580      	push	{r7, lr}
    cada:	b082      	sub	sp, #8
    cadc:	af00      	add	r7, sp, #0
	uint8_t i;
	uint8_t dummy = 0xFF;
    cade:	1dbb      	adds	r3, r7, #6
    cae0:	22ff      	movs	r2, #255	; 0xff
    cae2:	701a      	strb	r2, [r3, #0]

	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
    cae4:	4b0c      	ldr	r3, [pc, #48]	; (cb18 <sd_mmc_spi_send_clock+0x40>)
    cae6:	2200      	movs	r2, #0
    cae8:	701a      	strb	r2, [r3, #0]
	//! Send 80 cycles
	for (i = 0; i < 10; i++) {
    caea:	1dfb      	adds	r3, r7, #7
    caec:	2200      	movs	r2, #0
    caee:	701a      	strb	r2, [r3, #0]
    caf0:	e00a      	b.n	cb08 <sd_mmc_spi_send_clock+0x30>
		spi_write_buffer_wait(&sd_mmc_master, &dummy, 1); // 8 cycles
    caf2:	1db9      	adds	r1, r7, #6
    caf4:	4b09      	ldr	r3, [pc, #36]	; (cb1c <sd_mmc_spi_send_clock+0x44>)
    caf6:	2201      	movs	r2, #1
    caf8:	0018      	movs	r0, r3
    cafa:	4b09      	ldr	r3, [pc, #36]	; (cb20 <sd_mmc_spi_send_clock+0x48>)
    cafc:	4798      	blx	r3
	for (i = 0; i < 10; i++) {
    cafe:	1dfb      	adds	r3, r7, #7
    cb00:	781a      	ldrb	r2, [r3, #0]
    cb02:	1dfb      	adds	r3, r7, #7
    cb04:	3201      	adds	r2, #1
    cb06:	701a      	strb	r2, [r3, #0]
    cb08:	1dfb      	adds	r3, r7, #7
    cb0a:	781b      	ldrb	r3, [r3, #0]
    cb0c:	2b09      	cmp	r3, #9
    cb0e:	d9f0      	bls.n	caf2 <sd_mmc_spi_send_clock+0x1a>
	}
}
    cb10:	46c0      	nop			; (mov r8, r8)
    cb12:	46bd      	mov	sp, r7
    cb14:	b002      	add	sp, #8
    cb16:	bd80      	pop	{r7, pc}
    cb18:	20003d0f 	.word	0x20003d0f
    cb1c:	20003ccc 	.word	0x20003ccc
    cb20:	00015111 	.word	0x00015111

0000cb24 <sd_mmc_spi_send_cmd>:

bool sd_mmc_spi_send_cmd(sdmmc_cmd_def_t cmd, uint32_t arg)
{
    cb24:	b590      	push	{r4, r7, lr}
    cb26:	b085      	sub	sp, #20
    cb28:	af02      	add	r7, sp, #8
    cb2a:	6078      	str	r0, [r7, #4]
    cb2c:	6039      	str	r1, [r7, #0]
	return sd_mmc_spi_adtc_start(cmd, arg, 0, 0, false);
    cb2e:	6839      	ldr	r1, [r7, #0]
    cb30:	6878      	ldr	r0, [r7, #4]
    cb32:	2300      	movs	r3, #0
    cb34:	9300      	str	r3, [sp, #0]
    cb36:	2300      	movs	r3, #0
    cb38:	2200      	movs	r2, #0
    cb3a:	4c03      	ldr	r4, [pc, #12]	; (cb48 <sd_mmc_spi_send_cmd+0x24>)
    cb3c:	47a0      	blx	r4
    cb3e:	0003      	movs	r3, r0
}
    cb40:	0018      	movs	r0, r3
    cb42:	46bd      	mov	sp, r7
    cb44:	b003      	add	sp, #12
    cb46:	bd90      	pop	{r4, r7, pc}
    cb48:	0000cb4d 	.word	0x0000cb4d

0000cb4c <sd_mmc_spi_adtc_start>:

bool sd_mmc_spi_adtc_start(sdmmc_cmd_def_t cmd, uint32_t arg,
		uint16_t block_size, uint16_t nb_block, bool access_block)
{
    cb4c:	b590      	push	{r4, r7, lr}
    cb4e:	b089      	sub	sp, #36	; 0x24
    cb50:	af00      	add	r7, sp, #0
    cb52:	60f8      	str	r0, [r7, #12]
    cb54:	60b9      	str	r1, [r7, #8]
    cb56:	0019      	movs	r1, r3
    cb58:	1dbb      	adds	r3, r7, #6
    cb5a:	801a      	strh	r2, [r3, #0]
    cb5c:	1d3b      	adds	r3, r7, #4
    cb5e:	1c0a      	adds	r2, r1, #0
    cb60:	801a      	strh	r2, [r3, #0]
	uint8_t dummy = 0xFF;
    cb62:	231b      	movs	r3, #27
    cb64:	18fb      	adds	r3, r7, r3
    cb66:	22ff      	movs	r2, #255	; 0xff
    cb68:	701a      	strb	r2, [r3, #0]
	uint8_t cmd_token[6];
	uint8_t ncr_timeout;
	uint8_t r1; //! R1 response
	uint16_t dummy2 = 0xFF;
    cb6a:	231c      	movs	r3, #28
    cb6c:	18fb      	adds	r3, r7, r3
    cb6e:	22ff      	movs	r2, #255	; 0xff
    cb70:	801a      	strh	r2, [r3, #0]

	UNUSED(access_block);
	Assert(cmd & SDMMC_RESP_PRESENT); // Always a response in SPI mode
	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
    cb72:	4b72      	ldr	r3, [pc, #456]	; (cd3c <sd_mmc_spi_adtc_start+0x1f0>)
    cb74:	2200      	movs	r2, #0
    cb76:	701a      	strb	r2, [r3, #0]

	// Encode SPI command
	cmd_token[0] = SPI_CMD_ENCODE(SDMMC_CMD_GET_INDEX(cmd));
    cb78:	68fb      	ldr	r3, [r7, #12]
    cb7a:	b2db      	uxtb	r3, r3
    cb7c:	223f      	movs	r2, #63	; 0x3f
    cb7e:	4013      	ands	r3, r2
    cb80:	b2db      	uxtb	r3, r3
    cb82:	2240      	movs	r2, #64	; 0x40
    cb84:	4313      	orrs	r3, r2
    cb86:	b2da      	uxtb	r2, r3
    cb88:	2314      	movs	r3, #20
    cb8a:	18fb      	adds	r3, r7, r3
    cb8c:	701a      	strb	r2, [r3, #0]
	cmd_token[1] = arg >> 24;
    cb8e:	68bb      	ldr	r3, [r7, #8]
    cb90:	0e1b      	lsrs	r3, r3, #24
    cb92:	b2da      	uxtb	r2, r3
    cb94:	2314      	movs	r3, #20
    cb96:	18fb      	adds	r3, r7, r3
    cb98:	705a      	strb	r2, [r3, #1]
	cmd_token[2] = arg >> 16;
    cb9a:	68bb      	ldr	r3, [r7, #8]
    cb9c:	0c1b      	lsrs	r3, r3, #16
    cb9e:	b2da      	uxtb	r2, r3
    cba0:	2314      	movs	r3, #20
    cba2:	18fb      	adds	r3, r7, r3
    cba4:	709a      	strb	r2, [r3, #2]
	cmd_token[3] = arg >> 8;
    cba6:	68bb      	ldr	r3, [r7, #8]
    cba8:	0a1b      	lsrs	r3, r3, #8
    cbaa:	b2da      	uxtb	r2, r3
    cbac:	2314      	movs	r3, #20
    cbae:	18fb      	adds	r3, r7, r3
    cbb0:	70da      	strb	r2, [r3, #3]
	cmd_token[4] = arg;
    cbb2:	68bb      	ldr	r3, [r7, #8]
    cbb4:	b2da      	uxtb	r2, r3
    cbb6:	2314      	movs	r3, #20
    cbb8:	18fb      	adds	r3, r7, r3
    cbba:	711a      	strb	r2, [r3, #4]
	cmd_token[5] = sd_mmc_spi_crc7(cmd_token, 5);
    cbbc:	2314      	movs	r3, #20
    cbbe:	18fb      	adds	r3, r7, r3
    cbc0:	2105      	movs	r1, #5
    cbc2:	0018      	movs	r0, r3
    cbc4:	4b5e      	ldr	r3, [pc, #376]	; (cd40 <sd_mmc_spi_adtc_start+0x1f4>)
    cbc6:	4798      	blx	r3
    cbc8:	0003      	movs	r3, r0
    cbca:	001a      	movs	r2, r3
    cbcc:	2314      	movs	r3, #20
    cbce:	18fb      	adds	r3, r7, r3
    cbd0:	715a      	strb	r2, [r3, #5]

	// 8 cycles to respect Ncs timing
	// Note: This byte does not include start bit "0",
	// thus it is ignored by card.
	spi_write_buffer_wait(&sd_mmc_master, &dummy, 1);
    cbd2:	231b      	movs	r3, #27
    cbd4:	18f9      	adds	r1, r7, r3
    cbd6:	4b5b      	ldr	r3, [pc, #364]	; (cd44 <sd_mmc_spi_adtc_start+0x1f8>)
    cbd8:	2201      	movs	r2, #1
    cbda:	0018      	movs	r0, r3
    cbdc:	4b5a      	ldr	r3, [pc, #360]	; (cd48 <sd_mmc_spi_adtc_start+0x1fc>)
    cbde:	4798      	blx	r3
	// Send command
	spi_write_buffer_wait(&sd_mmc_master, cmd_token, sizeof(cmd_token));
    cbe0:	2314      	movs	r3, #20
    cbe2:	18f9      	adds	r1, r7, r3
    cbe4:	4b57      	ldr	r3, [pc, #348]	; (cd44 <sd_mmc_spi_adtc_start+0x1f8>)
    cbe6:	2206      	movs	r2, #6
    cbe8:	0018      	movs	r0, r3
    cbea:	4b57      	ldr	r3, [pc, #348]	; (cd48 <sd_mmc_spi_adtc_start+0x1fc>)
    cbec:	4798      	blx	r3

	// Wait for response
	// Two retry will be done to manage the Ncr timing between command and reponse
	// Ncr: Min. 1x8 clock  cycle, Max. 8x8 clock cycles
	// WORKAROUND for no compliance card (Atmel Internal ref. SD13):
	r1 = 0xFF;
    cbee:	2313      	movs	r3, #19
    cbf0:	18fb      	adds	r3, r7, r3
    cbf2:	22ff      	movs	r2, #255	; 0xff
    cbf4:	701a      	strb	r2, [r3, #0]
	// Ignore first byte because Ncr min. = 8 clock cylces
	spi_read_buffer_wait(&sd_mmc_master, &r1, 1,
    cbf6:	231c      	movs	r3, #28
    cbf8:	18fb      	adds	r3, r7, r3
    cbfa:	881b      	ldrh	r3, [r3, #0]
    cbfc:	2213      	movs	r2, #19
    cbfe:	18b9      	adds	r1, r7, r2
    cc00:	4850      	ldr	r0, [pc, #320]	; (cd44 <sd_mmc_spi_adtc_start+0x1f8>)
    cc02:	2201      	movs	r2, #1
    cc04:	4c51      	ldr	r4, [pc, #324]	; (cd4c <sd_mmc_spi_adtc_start+0x200>)
    cc06:	47a0      	blx	r4
			dummy2);
	ncr_timeout = 7;
    cc08:	231f      	movs	r3, #31
    cc0a:	18fb      	adds	r3, r7, r3
    cc0c:	2207      	movs	r2, #7
    cc0e:	701a      	strb	r2, [r3, #0]
	while (1) {
		spi_read_buffer_wait(&sd_mmc_master, &r1, 1,
    cc10:	231c      	movs	r3, #28
    cc12:	18fb      	adds	r3, r7, r3
    cc14:	881b      	ldrh	r3, [r3, #0]
    cc16:	2213      	movs	r2, #19
    cc18:	18b9      	adds	r1, r7, r2
    cc1a:	484a      	ldr	r0, [pc, #296]	; (cd44 <sd_mmc_spi_adtc_start+0x1f8>)
    cc1c:	2201      	movs	r2, #1
    cc1e:	4c4b      	ldr	r4, [pc, #300]	; (cd4c <sd_mmc_spi_adtc_start+0x200>)
    cc20:	47a0      	blx	r4
			dummy2); // 8 cycles
		if ((r1 & R1_SPI_ERROR) == 0) {
    cc22:	2313      	movs	r3, #19
    cc24:	18fb      	adds	r3, r7, r3
    cc26:	781b      	ldrb	r3, [r3, #0]
    cc28:	b25b      	sxtb	r3, r3
    cc2a:	2b00      	cmp	r3, #0
    cc2c:	da10      	bge.n	cc50 <sd_mmc_spi_adtc_start+0x104>
			// Valid R1 response
			break;
		}
		if (--ncr_timeout == 0) {
    cc2e:	231f      	movs	r3, #31
    cc30:	18fb      	adds	r3, r7, r3
    cc32:	221f      	movs	r2, #31
    cc34:	18ba      	adds	r2, r7, r2
    cc36:	7812      	ldrb	r2, [r2, #0]
    cc38:	3a01      	subs	r2, #1
    cc3a:	701a      	strb	r2, [r3, #0]
    cc3c:	231f      	movs	r3, #31
    cc3e:	18fb      	adds	r3, r7, r3
    cc40:	781b      	ldrb	r3, [r3, #0]
    cc42:	2b00      	cmp	r3, #0
    cc44:	d1e4      	bne.n	cc10 <sd_mmc_spi_adtc_start+0xc4>
			// Here Valid R1 response received
			sd_mmc_spi_debug("%s: cmd %02d, arg 0x%08lX, R1 timeout\n\r",
					__func__, (int)SDMMC_CMD_GET_INDEX(cmd), arg);
			sd_mmc_spi_err = SD_MMC_SPI_ERR_RESP_TIMEOUT;
    cc46:	4b3d      	ldr	r3, [pc, #244]	; (cd3c <sd_mmc_spi_adtc_start+0x1f0>)
    cc48:	2202      	movs	r2, #2
    cc4a:	701a      	strb	r2, [r3, #0]
			return false;
    cc4c:	2300      	movs	r3, #0
    cc4e:	e070      	b.n	cd32 <sd_mmc_spi_adtc_start+0x1e6>
			break;
    cc50:	46c0      	nop			; (mov r8, r8)
		}
	}

	// Save R1 (Specific to SPI interface) in 32 bit response
	// The R1_SPI_IDLE bit can be checked by high level
	sd_mmc_spi_response_32 = r1;
    cc52:	2313      	movs	r3, #19
    cc54:	18fb      	adds	r3, r7, r3
    cc56:	781b      	ldrb	r3, [r3, #0]
    cc58:	001a      	movs	r2, r3
    cc5a:	4b3d      	ldr	r3, [pc, #244]	; (cd50 <sd_mmc_spi_adtc_start+0x204>)
    cc5c:	601a      	str	r2, [r3, #0]

	// Manage error in R1
	if (r1 & R1_SPI_COM_CRC) {
    cc5e:	2313      	movs	r3, #19
    cc60:	18fb      	adds	r3, r7, r3
    cc62:	781b      	ldrb	r3, [r3, #0]
    cc64:	001a      	movs	r2, r3
    cc66:	2308      	movs	r3, #8
    cc68:	4013      	ands	r3, r2
    cc6a:	d004      	beq.n	cc76 <sd_mmc_spi_adtc_start+0x12a>
		sd_mmc_spi_debug("%s: cmd %02d, arg 0x%08lx, r1 0x%02x, R1_SPI_COM_CRC\n\r",
				__func__, (int)SDMMC_CMD_GET_INDEX(cmd), arg, r1);
		sd_mmc_spi_err = SD_MMC_SPI_ERR_RESP_CRC;
    cc6c:	4b33      	ldr	r3, [pc, #204]	; (cd3c <sd_mmc_spi_adtc_start+0x1f0>)
    cc6e:	2206      	movs	r2, #6
    cc70:	701a      	strb	r2, [r3, #0]
		return false;
    cc72:	2300      	movs	r3, #0
    cc74:	e05d      	b.n	cd32 <sd_mmc_spi_adtc_start+0x1e6>
	}
	if (r1 & R1_SPI_ILLEGAL_COMMAND) {
    cc76:	2313      	movs	r3, #19
    cc78:	18fb      	adds	r3, r7, r3
    cc7a:	781b      	ldrb	r3, [r3, #0]
    cc7c:	001a      	movs	r2, r3
    cc7e:	2304      	movs	r3, #4
    cc80:	4013      	ands	r3, r2
    cc82:	d004      	beq.n	cc8e <sd_mmc_spi_adtc_start+0x142>
		sd_mmc_spi_debug("%s: cmd %02d, arg 0x%08lx, r1 0x%x, R1 ILLEGAL_COMMAND\n\r",
				__func__, (int)SDMMC_CMD_GET_INDEX(cmd), arg, r1);
		sd_mmc_spi_err = SD_MMC_SPI_ERR_ILLEGAL_COMMAND;
    cc84:	4b2d      	ldr	r3, [pc, #180]	; (cd3c <sd_mmc_spi_adtc_start+0x1f0>)
    cc86:	2209      	movs	r2, #9
    cc88:	701a      	strb	r2, [r3, #0]
		return false;
    cc8a:	2300      	movs	r3, #0
    cc8c:	e051      	b.n	cd32 <sd_mmc_spi_adtc_start+0x1e6>
	}
	if (r1 & ~R1_SPI_IDLE) {
    cc8e:	2313      	movs	r3, #19
    cc90:	18fb      	adds	r3, r7, r3
    cc92:	781b      	ldrb	r3, [r3, #0]
    cc94:	001a      	movs	r2, r3
    cc96:	2301      	movs	r3, #1
    cc98:	439a      	bics	r2, r3
    cc9a:	1e13      	subs	r3, r2, #0
    cc9c:	d004      	beq.n	cca8 <sd_mmc_spi_adtc_start+0x15c>
		// Other error
		sd_mmc_spi_debug("%s: cmd %02d, arg 0x%08lx, r1 0x%x, R1 error\n\r",
				__func__, (int)SDMMC_CMD_GET_INDEX(cmd), arg, r1);
		sd_mmc_spi_err = SD_MMC_SPI_ERR;
    cc9e:	4b27      	ldr	r3, [pc, #156]	; (cd3c <sd_mmc_spi_adtc_start+0x1f0>)
    cca0:	2201      	movs	r2, #1
    cca2:	701a      	strb	r2, [r3, #0]
		return false;
    cca4:	2300      	movs	r3, #0
    cca6:	e044      	b.n	cd32 <sd_mmc_spi_adtc_start+0x1e6>
	}

	// Manage other responses
	if (cmd & SDMMC_RESP_BUSY) {
    cca8:	68fa      	ldr	r2, [r7, #12]
    ccaa:	2380      	movs	r3, #128	; 0x80
    ccac:	019b      	lsls	r3, r3, #6
    ccae:	4013      	ands	r3, r2
    ccb0:	d00d      	beq.n	ccce <sd_mmc_spi_adtc_start+0x182>
		if (!sd_mmc_spi_wait_busy()) {
    ccb2:	4b28      	ldr	r3, [pc, #160]	; (cd54 <sd_mmc_spi_adtc_start+0x208>)
    ccb4:	4798      	blx	r3
    ccb6:	0003      	movs	r3, r0
    ccb8:	001a      	movs	r2, r3
    ccba:	2301      	movs	r3, #1
    ccbc:	4053      	eors	r3, r2
    ccbe:	b2db      	uxtb	r3, r3
    ccc0:	2b00      	cmp	r3, #0
    ccc2:	d004      	beq.n	ccce <sd_mmc_spi_adtc_start+0x182>
			sd_mmc_spi_err = SD_MMC_SPI_ERR_RESP_BUSY_TIMEOUT;
    ccc4:	4b1d      	ldr	r3, [pc, #116]	; (cd3c <sd_mmc_spi_adtc_start+0x1f0>)
    ccc6:	2203      	movs	r2, #3
    ccc8:	701a      	strb	r2, [r3, #0]
			sd_mmc_spi_debug("%s: cmd %02d, arg 0x%08lx, Busy signal always high\n\r",
					__func__, (int)SDMMC_CMD_GET_INDEX(cmd), arg);
			return false;
    ccca:	2300      	movs	r3, #0
    cccc:	e031      	b.n	cd32 <sd_mmc_spi_adtc_start+0x1e6>
		}
	}
	if (cmd & SDMMC_RESP_8) {
    ccce:	68fa      	ldr	r2, [r7, #12]
    ccd0:	2380      	movs	r3, #128	; 0x80
    ccd2:	009b      	lsls	r3, r3, #2
    ccd4:	4013      	ands	r3, r2
    ccd6:	d00e      	beq.n	ccf6 <sd_mmc_spi_adtc_start+0x1aa>
		sd_mmc_spi_response_32 = 0;
    ccd8:	4b1d      	ldr	r3, [pc, #116]	; (cd50 <sd_mmc_spi_adtc_start+0x204>)
    ccda:	2200      	movs	r2, #0
    ccdc:	601a      	str	r2, [r3, #0]
		spi_read_buffer_wait(&sd_mmc_master, (uint8_t *)&sd_mmc_spi_response_32, 1,
    ccde:	231c      	movs	r3, #28
    cce0:	18fb      	adds	r3, r7, r3
    cce2:	881b      	ldrh	r3, [r3, #0]
    cce4:	491a      	ldr	r1, [pc, #104]	; (cd50 <sd_mmc_spi_adtc_start+0x204>)
    cce6:	4817      	ldr	r0, [pc, #92]	; (cd44 <sd_mmc_spi_adtc_start+0x1f8>)
    cce8:	2201      	movs	r2, #1
    ccea:	4c18      	ldr	r4, [pc, #96]	; (cd4c <sd_mmc_spi_adtc_start+0x200>)
    ccec:	47a0      	blx	r4
			dummy2);
		sd_mmc_spi_response_32 = le32_to_cpu(sd_mmc_spi_response_32);
    ccee:	4b18      	ldr	r3, [pc, #96]	; (cd50 <sd_mmc_spi_adtc_start+0x204>)
    ccf0:	681a      	ldr	r2, [r3, #0]
    ccf2:	4b17      	ldr	r3, [pc, #92]	; (cd50 <sd_mmc_spi_adtc_start+0x204>)
    ccf4:	601a      	str	r2, [r3, #0]
	}
	if (cmd & SDMMC_RESP_32) {
    ccf6:	68fa      	ldr	r2, [r7, #12]
    ccf8:	2380      	movs	r3, #128	; 0x80
    ccfa:	00db      	lsls	r3, r3, #3
    ccfc:	4013      	ands	r3, r2
    ccfe:	d00c      	beq.n	cd1a <sd_mmc_spi_adtc_start+0x1ce>
		spi_read_buffer_wait(&sd_mmc_master, (uint8_t *)&sd_mmc_spi_response_32, 4,
    cd00:	231c      	movs	r3, #28
    cd02:	18fb      	adds	r3, r7, r3
    cd04:	881b      	ldrh	r3, [r3, #0]
    cd06:	4912      	ldr	r1, [pc, #72]	; (cd50 <sd_mmc_spi_adtc_start+0x204>)
    cd08:	480e      	ldr	r0, [pc, #56]	; (cd44 <sd_mmc_spi_adtc_start+0x1f8>)
    cd0a:	2204      	movs	r2, #4
    cd0c:	4c0f      	ldr	r4, [pc, #60]	; (cd4c <sd_mmc_spi_adtc_start+0x200>)
    cd0e:	47a0      	blx	r4
			dummy2);
		sd_mmc_spi_response_32 = be32_to_cpu(sd_mmc_spi_response_32);
    cd10:	4b0f      	ldr	r3, [pc, #60]	; (cd50 <sd_mmc_spi_adtc_start+0x204>)
    cd12:	681b      	ldr	r3, [r3, #0]
    cd14:	ba1a      	rev	r2, r3
    cd16:	4b0e      	ldr	r3, [pc, #56]	; (cd50 <sd_mmc_spi_adtc_start+0x204>)
    cd18:	601a      	str	r2, [r3, #0]
	}

	sd_mmc_spi_block_size = block_size;
    cd1a:	4b0f      	ldr	r3, [pc, #60]	; (cd58 <sd_mmc_spi_adtc_start+0x20c>)
    cd1c:	1dba      	adds	r2, r7, #6
    cd1e:	8812      	ldrh	r2, [r2, #0]
    cd20:	801a      	strh	r2, [r3, #0]
	sd_mmc_spi_nb_block = nb_block;
    cd22:	4b0e      	ldr	r3, [pc, #56]	; (cd5c <sd_mmc_spi_adtc_start+0x210>)
    cd24:	1d3a      	adds	r2, r7, #4
    cd26:	8812      	ldrh	r2, [r2, #0]
    cd28:	801a      	strh	r2, [r3, #0]
	sd_mmc_spi_transfert_pos = 0;
    cd2a:	4b0d      	ldr	r3, [pc, #52]	; (cd60 <sd_mmc_spi_adtc_start+0x214>)
    cd2c:	2200      	movs	r2, #0
    cd2e:	601a      	str	r2, [r3, #0]
	return true; // Command complete
    cd30:	2301      	movs	r3, #1
}
    cd32:	0018      	movs	r0, r3
    cd34:	46bd      	mov	sp, r7
    cd36:	b009      	add	sp, #36	; 0x24
    cd38:	bd90      	pop	{r4, r7, pc}
    cd3a:	46c0      	nop			; (mov r8, r8)
    cd3c:	20003d0f 	.word	0x20003d0f
    cd40:	0000c5ed 	.word	0x0000c5ed
    cd44:	20003ccc 	.word	0x20003ccc
    cd48:	00015111 	.word	0x00015111
    cd4c:	00014eed 	.word	0x00014eed
    cd50:	20003d10 	.word	0x20003d10
    cd54:	0000c6a9 	.word	0x0000c6a9
    cd58:	20003d18 	.word	0x20003d18
    cd5c:	20003d1a 	.word	0x20003d1a
    cd60:	20003d14 	.word	0x20003d14

0000cd64 <sd_mmc_spi_get_response>:

uint32_t sd_mmc_spi_get_response(void)
{
    cd64:	b580      	push	{r7, lr}
    cd66:	af00      	add	r7, sp, #0
	return sd_mmc_spi_response_32;
    cd68:	4b02      	ldr	r3, [pc, #8]	; (cd74 <sd_mmc_spi_get_response+0x10>)
    cd6a:	681b      	ldr	r3, [r3, #0]
}
    cd6c:	0018      	movs	r0, r3
    cd6e:	46bd      	mov	sp, r7
    cd70:	bd80      	pop	{r7, pc}
    cd72:	46c0      	nop			; (mov r8, r8)
    cd74:	20003d10 	.word	0x20003d10

0000cd78 <sd_mmc_spi_read_word>:

bool sd_mmc_spi_read_word(uint32_t* value)
{
    cd78:	b590      	push	{r4, r7, lr}
    cd7a:	b085      	sub	sp, #20
    cd7c:	af00      	add	r7, sp, #0
    cd7e:	6078      	str	r0, [r7, #4]
	uint16_t dummy = 0xFF;
    cd80:	230e      	movs	r3, #14
    cd82:	18fb      	adds	r3, r7, r3
    cd84:	22ff      	movs	r2, #255	; 0xff
    cd86:	801a      	strh	r2, [r3, #0]

	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
    cd88:	4b1c      	ldr	r3, [pc, #112]	; (cdfc <sd_mmc_spi_read_word+0x84>)
    cd8a:	2200      	movs	r2, #0
    cd8c:	701a      	strb	r2, [r3, #0]
	Assert(sd_mmc_spi_nb_block >
			(sd_mmc_spi_transfert_pos / sd_mmc_spi_block_size));

	if (!(sd_mmc_spi_transfert_pos % sd_mmc_spi_block_size)) {
    cd8e:	4b1c      	ldr	r3, [pc, #112]	; (ce00 <sd_mmc_spi_read_word+0x88>)
    cd90:	681a      	ldr	r2, [r3, #0]
    cd92:	4b1c      	ldr	r3, [pc, #112]	; (ce04 <sd_mmc_spi_read_word+0x8c>)
    cd94:	881b      	ldrh	r3, [r3, #0]
    cd96:	0019      	movs	r1, r3
    cd98:	4b1b      	ldr	r3, [pc, #108]	; (ce08 <sd_mmc_spi_read_word+0x90>)
    cd9a:	0010      	movs	r0, r2
    cd9c:	4798      	blx	r3
    cd9e:	1e0b      	subs	r3, r1, #0
    cda0:	d10a      	bne.n	cdb8 <sd_mmc_spi_read_word+0x40>
		// New block
		if (!sd_mmc_spi_start_read_block()) {
    cda2:	4b1a      	ldr	r3, [pc, #104]	; (ce0c <sd_mmc_spi_read_word+0x94>)
    cda4:	4798      	blx	r3
    cda6:	0003      	movs	r3, r0
    cda8:	001a      	movs	r2, r3
    cdaa:	2301      	movs	r3, #1
    cdac:	4053      	eors	r3, r2
    cdae:	b2db      	uxtb	r3, r3
    cdb0:	2b00      	cmp	r3, #0
    cdb2:	d001      	beq.n	cdb8 <sd_mmc_spi_read_word+0x40>
			return false;
    cdb4:	2300      	movs	r3, #0
    cdb6:	e01d      	b.n	cdf4 <sd_mmc_spi_read_word+0x7c>
		}
	}
	// Read data
	spi_read_buffer_wait(&sd_mmc_master, (uint8_t *)&value, 4,
    cdb8:	230e      	movs	r3, #14
    cdba:	18fb      	adds	r3, r7, r3
    cdbc:	881b      	ldrh	r3, [r3, #0]
    cdbe:	1d39      	adds	r1, r7, #4
    cdc0:	4813      	ldr	r0, [pc, #76]	; (ce10 <sd_mmc_spi_read_word+0x98>)
    cdc2:	2204      	movs	r2, #4
    cdc4:	4c13      	ldr	r4, [pc, #76]	; (ce14 <sd_mmc_spi_read_word+0x9c>)
    cdc6:	47a0      	blx	r4
			dummy);
	*value = le32_to_cpu(*value);
    cdc8:	687b      	ldr	r3, [r7, #4]
    cdca:	687a      	ldr	r2, [r7, #4]
    cdcc:	6812      	ldr	r2, [r2, #0]
    cdce:	601a      	str	r2, [r3, #0]
	sd_mmc_spi_transfert_pos += 4;
    cdd0:	4b0b      	ldr	r3, [pc, #44]	; (ce00 <sd_mmc_spi_read_word+0x88>)
    cdd2:	681b      	ldr	r3, [r3, #0]
    cdd4:	1d1a      	adds	r2, r3, #4
    cdd6:	4b0a      	ldr	r3, [pc, #40]	; (ce00 <sd_mmc_spi_read_word+0x88>)
    cdd8:	601a      	str	r2, [r3, #0]

	if (!(sd_mmc_spi_transfert_pos % sd_mmc_spi_block_size)) {
    cdda:	4b09      	ldr	r3, [pc, #36]	; (ce00 <sd_mmc_spi_read_word+0x88>)
    cddc:	681a      	ldr	r2, [r3, #0]
    cdde:	4b09      	ldr	r3, [pc, #36]	; (ce04 <sd_mmc_spi_read_word+0x8c>)
    cde0:	881b      	ldrh	r3, [r3, #0]
    cde2:	0019      	movs	r1, r3
    cde4:	4b08      	ldr	r3, [pc, #32]	; (ce08 <sd_mmc_spi_read_word+0x90>)
    cde6:	0010      	movs	r0, r2
    cde8:	4798      	blx	r3
    cdea:	1e0b      	subs	r3, r1, #0
    cdec:	d101      	bne.n	cdf2 <sd_mmc_spi_read_word+0x7a>
		// End of block
		sd_mmc_spi_stop_read_block();
    cdee:	4b0a      	ldr	r3, [pc, #40]	; (ce18 <sd_mmc_spi_read_word+0xa0>)
    cdf0:	4798      	blx	r3
	}
	return true;
    cdf2:	2301      	movs	r3, #1
}
    cdf4:	0018      	movs	r0, r3
    cdf6:	46bd      	mov	sp, r7
    cdf8:	b005      	add	sp, #20
    cdfa:	bd90      	pop	{r4, r7, pc}
    cdfc:	20003d0f 	.word	0x20003d0f
    ce00:	20003d14 	.word	0x20003d14
    ce04:	20003d18 	.word	0x20003d18
    ce08:	0001f94d 	.word	0x0001f94d
    ce0c:	0000c715 	.word	0x0000c715
    ce10:	20003ccc 	.word	0x20003ccc
    ce14:	00014eed 	.word	0x00014eed
    ce18:	0000c799 	.word	0x0000c799

0000ce1c <sd_mmc_spi_start_read_blocks>:
	}
	return sd_mmc_spi_stop_multiwrite_block();
}

bool sd_mmc_spi_start_read_blocks(void *dest, uint16_t nb_block)
{
    ce1c:	b590      	push	{r4, r7, lr}
    ce1e:	b085      	sub	sp, #20
    ce20:	af00      	add	r7, sp, #0
    ce22:	6078      	str	r0, [r7, #4]
    ce24:	000a      	movs	r2, r1
    ce26:	1cbb      	adds	r3, r7, #2
    ce28:	801a      	strh	r2, [r3, #0]
	uint32_t pos;
	uint16_t dummy = 0xFF;
    ce2a:	230a      	movs	r3, #10
    ce2c:	18fb      	adds	r3, r7, r3
    ce2e:	22ff      	movs	r2, #255	; 0xff
    ce30:	801a      	strh	r2, [r3, #0]

	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
    ce32:	4b1c      	ldr	r3, [pc, #112]	; (cea4 <sd_mmc_spi_start_read_blocks+0x88>)
    ce34:	2200      	movs	r2, #0
    ce36:	701a      	strb	r2, [r3, #0]
	pos = 0;
    ce38:	2300      	movs	r3, #0
    ce3a:	60fb      	str	r3, [r7, #12]
	while (nb_block--) {
    ce3c:	e025      	b.n	ce8a <sd_mmc_spi_start_read_blocks+0x6e>
		Assert(sd_mmc_spi_nb_block >
				(sd_mmc_spi_transfert_pos / sd_mmc_spi_block_size));
		if (!sd_mmc_spi_start_read_block()) {
    ce3e:	4b1a      	ldr	r3, [pc, #104]	; (cea8 <sd_mmc_spi_start_read_blocks+0x8c>)
    ce40:	4798      	blx	r3
    ce42:	0003      	movs	r3, r0
    ce44:	001a      	movs	r2, r3
    ce46:	2301      	movs	r3, #1
    ce48:	4053      	eors	r3, r2
    ce4a:	b2db      	uxtb	r3, r3
    ce4c:	2b00      	cmp	r3, #0
    ce4e:	d001      	beq.n	ce54 <sd_mmc_spi_start_read_blocks+0x38>
			return false;
    ce50:	2300      	movs	r3, #0
    ce52:	e022      	b.n	ce9a <sd_mmc_spi_start_read_blocks+0x7e>
		}

		// Read block
		spi_read_buffer_wait(&sd_mmc_master, &((uint8_t*)dest)[pos],
    ce54:	687a      	ldr	r2, [r7, #4]
    ce56:	68fb      	ldr	r3, [r7, #12]
    ce58:	18d1      	adds	r1, r2, r3
    ce5a:	4b14      	ldr	r3, [pc, #80]	; (ceac <sd_mmc_spi_start_read_blocks+0x90>)
    ce5c:	881a      	ldrh	r2, [r3, #0]
    ce5e:	230a      	movs	r3, #10
    ce60:	18fb      	adds	r3, r7, r3
    ce62:	881b      	ldrh	r3, [r3, #0]
    ce64:	4812      	ldr	r0, [pc, #72]	; (ceb0 <sd_mmc_spi_start_read_blocks+0x94>)
    ce66:	4c13      	ldr	r4, [pc, #76]	; (ceb4 <sd_mmc_spi_start_read_blocks+0x98>)
    ce68:	47a0      	blx	r4
			sd_mmc_spi_block_size, dummy);
		pos += sd_mmc_spi_block_size;
    ce6a:	4b10      	ldr	r3, [pc, #64]	; (ceac <sd_mmc_spi_start_read_blocks+0x90>)
    ce6c:	881b      	ldrh	r3, [r3, #0]
    ce6e:	001a      	movs	r2, r3
    ce70:	68fb      	ldr	r3, [r7, #12]
    ce72:	189b      	adds	r3, r3, r2
    ce74:	60fb      	str	r3, [r7, #12]
		sd_mmc_spi_transfert_pos += sd_mmc_spi_block_size;
    ce76:	4b0d      	ldr	r3, [pc, #52]	; (ceac <sd_mmc_spi_start_read_blocks+0x90>)
    ce78:	881b      	ldrh	r3, [r3, #0]
    ce7a:	001a      	movs	r2, r3
    ce7c:	4b0e      	ldr	r3, [pc, #56]	; (ceb8 <sd_mmc_spi_start_read_blocks+0x9c>)
    ce7e:	681b      	ldr	r3, [r3, #0]
    ce80:	18d2      	adds	r2, r2, r3
    ce82:	4b0d      	ldr	r3, [pc, #52]	; (ceb8 <sd_mmc_spi_start_read_blocks+0x9c>)
    ce84:	601a      	str	r2, [r3, #0]

		sd_mmc_spi_stop_read_block();
    ce86:	4b0d      	ldr	r3, [pc, #52]	; (cebc <sd_mmc_spi_start_read_blocks+0xa0>)
    ce88:	4798      	blx	r3
	while (nb_block--) {
    ce8a:	1cbb      	adds	r3, r7, #2
    ce8c:	881b      	ldrh	r3, [r3, #0]
    ce8e:	1cba      	adds	r2, r7, #2
    ce90:	1e59      	subs	r1, r3, #1
    ce92:	8011      	strh	r1, [r2, #0]
    ce94:	2b00      	cmp	r3, #0
    ce96:	d1d2      	bne.n	ce3e <sd_mmc_spi_start_read_blocks+0x22>
	}
	return true;
    ce98:	2301      	movs	r3, #1
}
    ce9a:	0018      	movs	r0, r3
    ce9c:	46bd      	mov	sp, r7
    ce9e:	b005      	add	sp, #20
    cea0:	bd90      	pop	{r4, r7, pc}
    cea2:	46c0      	nop			; (mov r8, r8)
    cea4:	20003d0f 	.word	0x20003d0f
    cea8:	0000c715 	.word	0x0000c715
    ceac:	20003d18 	.word	0x20003d18
    ceb0:	20003ccc 	.word	0x20003ccc
    ceb4:	00014eed 	.word	0x00014eed
    ceb8:	20003d14 	.word	0x20003d14
    cebc:	0000c799 	.word	0x0000c799

0000cec0 <sd_mmc_spi_wait_end_of_read_blocks>:

bool sd_mmc_spi_wait_end_of_read_blocks(void)
{
    cec0:	b580      	push	{r7, lr}
    cec2:	af00      	add	r7, sp, #0
	return true;
    cec4:	2301      	movs	r3, #1
}
    cec6:	0018      	movs	r0, r3
    cec8:	46bd      	mov	sp, r7
    ceca:	bd80      	pop	{r7, pc}

0000cecc <sd_mmc_spi_start_write_blocks>:

bool sd_mmc_spi_start_write_blocks(const void *src, uint16_t nb_block)
{
    cecc:	b580      	push	{r7, lr}
    cece:	b084      	sub	sp, #16
    ced0:	af00      	add	r7, sp, #0
    ced2:	6078      	str	r0, [r7, #4]
    ced4:	000a      	movs	r2, r1
    ced6:	1cbb      	adds	r3, r7, #2
    ced8:	801a      	strh	r2, [r3, #0]
	uint32_t pos;

	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
    ceda:	4b24      	ldr	r3, [pc, #144]	; (cf6c <sd_mmc_spi_start_write_blocks+0xa0>)
    cedc:	2200      	movs	r2, #0
    cede:	701a      	strb	r2, [r3, #0]
	pos = 0;
    cee0:	2300      	movs	r3, #0
    cee2:	60fb      	str	r3, [r7, #12]
	while (nb_block--) {
    cee4:	e035      	b.n	cf52 <sd_mmc_spi_start_write_blocks+0x86>
		Assert(sd_mmc_spi_nb_block >
				(sd_mmc_spi_transfert_pos / sd_mmc_spi_block_size));
		sd_mmc_spi_start_write_block();
    cee6:	4b22      	ldr	r3, [pc, #136]	; (cf70 <sd_mmc_spi_start_write_blocks+0xa4>)
    cee8:	4798      	blx	r3

		// Write block
		spi_write_buffer_wait(&sd_mmc_master, &((uint8_t*)src)[pos],
    ceea:	687a      	ldr	r2, [r7, #4]
    ceec:	68fb      	ldr	r3, [r7, #12]
    ceee:	18d1      	adds	r1, r2, r3
    cef0:	4b20      	ldr	r3, [pc, #128]	; (cf74 <sd_mmc_spi_start_write_blocks+0xa8>)
    cef2:	881a      	ldrh	r2, [r3, #0]
    cef4:	4b20      	ldr	r3, [pc, #128]	; (cf78 <sd_mmc_spi_start_write_blocks+0xac>)
    cef6:	0018      	movs	r0, r3
    cef8:	4b20      	ldr	r3, [pc, #128]	; (cf7c <sd_mmc_spi_start_write_blocks+0xb0>)
    cefa:	4798      	blx	r3
				sd_mmc_spi_block_size);
		pos += sd_mmc_spi_block_size;
    cefc:	4b1d      	ldr	r3, [pc, #116]	; (cf74 <sd_mmc_spi_start_write_blocks+0xa8>)
    cefe:	881b      	ldrh	r3, [r3, #0]
    cf00:	001a      	movs	r2, r3
    cf02:	68fb      	ldr	r3, [r7, #12]
    cf04:	189b      	adds	r3, r3, r2
    cf06:	60fb      	str	r3, [r7, #12]
		sd_mmc_spi_transfert_pos += sd_mmc_spi_block_size;
    cf08:	4b1a      	ldr	r3, [pc, #104]	; (cf74 <sd_mmc_spi_start_write_blocks+0xa8>)
    cf0a:	881b      	ldrh	r3, [r3, #0]
    cf0c:	001a      	movs	r2, r3
    cf0e:	4b1c      	ldr	r3, [pc, #112]	; (cf80 <sd_mmc_spi_start_write_blocks+0xb4>)
    cf10:	681b      	ldr	r3, [r3, #0]
    cf12:	18d2      	adds	r2, r2, r3
    cf14:	4b1a      	ldr	r3, [pc, #104]	; (cf80 <sd_mmc_spi_start_write_blocks+0xb4>)
    cf16:	601a      	str	r2, [r3, #0]

		if (!sd_mmc_spi_stop_write_block()) {
    cf18:	4b1a      	ldr	r3, [pc, #104]	; (cf84 <sd_mmc_spi_start_write_blocks+0xb8>)
    cf1a:	4798      	blx	r3
    cf1c:	0003      	movs	r3, r0
    cf1e:	001a      	movs	r2, r3
    cf20:	2301      	movs	r3, #1
    cf22:	4053      	eors	r3, r2
    cf24:	b2db      	uxtb	r3, r3
    cf26:	2b00      	cmp	r3, #0
    cf28:	d001      	beq.n	cf2e <sd_mmc_spi_start_write_blocks+0x62>
			return false;
    cf2a:	2300      	movs	r3, #0
    cf2c:	e019      	b.n	cf62 <sd_mmc_spi_start_write_blocks+0x96>
		}
		// Do not check busy of last block
		// but delay it to mci_wait_end_of_write_blocks()
		if (nb_block) {
    cf2e:	1cbb      	adds	r3, r7, #2
    cf30:	881b      	ldrh	r3, [r3, #0]
    cf32:	2b00      	cmp	r3, #0
    cf34:	d00d      	beq.n	cf52 <sd_mmc_spi_start_write_blocks+0x86>
			// Wait busy due to data programmation
			if (!sd_mmc_spi_wait_busy()) {
    cf36:	4b14      	ldr	r3, [pc, #80]	; (cf88 <sd_mmc_spi_start_write_blocks+0xbc>)
    cf38:	4798      	blx	r3
    cf3a:	0003      	movs	r3, r0
    cf3c:	001a      	movs	r2, r3
    cf3e:	2301      	movs	r3, #1
    cf40:	4053      	eors	r3, r2
    cf42:	b2db      	uxtb	r3, r3
    cf44:	2b00      	cmp	r3, #0
    cf46:	d004      	beq.n	cf52 <sd_mmc_spi_start_write_blocks+0x86>
				sd_mmc_spi_err = SD_MMC_SPI_ERR_WRITE_TIMEOUT;
    cf48:	4b08      	ldr	r3, [pc, #32]	; (cf6c <sd_mmc_spi_start_write_blocks+0xa0>)
    cf4a:	2205      	movs	r2, #5
    cf4c:	701a      	strb	r2, [r3, #0]
				sd_mmc_spi_debug("%s: Write blocks timeout\n\r", __func__);
				return false;
    cf4e:	2300      	movs	r3, #0
    cf50:	e007      	b.n	cf62 <sd_mmc_spi_start_write_blocks+0x96>
	while (nb_block--) {
    cf52:	1cbb      	adds	r3, r7, #2
    cf54:	881b      	ldrh	r3, [r3, #0]
    cf56:	1cba      	adds	r2, r7, #2
    cf58:	1e59      	subs	r1, r3, #1
    cf5a:	8011      	strh	r1, [r2, #0]
    cf5c:	2b00      	cmp	r3, #0
    cf5e:	d1c2      	bne.n	cee6 <sd_mmc_spi_start_write_blocks+0x1a>
			}
		}
	}
	return true;
    cf60:	2301      	movs	r3, #1
}
    cf62:	0018      	movs	r0, r3
    cf64:	46bd      	mov	sp, r7
    cf66:	b004      	add	sp, #16
    cf68:	bd80      	pop	{r7, pc}
    cf6a:	46c0      	nop			; (mov r8, r8)
    cf6c:	20003d0f 	.word	0x20003d0f
    cf70:	0000c7c5 	.word	0x0000c7c5
    cf74:	20003d18 	.word	0x20003d18
    cf78:	20003ccc 	.word	0x20003ccc
    cf7c:	00015111 	.word	0x00015111
    cf80:	20003d14 	.word	0x20003d14
    cf84:	0000c815 	.word	0x0000c815
    cf88:	0000c6a9 	.word	0x0000c6a9

0000cf8c <sd_mmc_spi_wait_end_of_write_blocks>:

bool sd_mmc_spi_wait_end_of_write_blocks(void)
{
    cf8c:	b580      	push	{r7, lr}
    cf8e:	af00      	add	r7, sp, #0
	// Wait busy due to data programmation of last block writed
	if (!sd_mmc_spi_wait_busy()) {
    cf90:	4b09      	ldr	r3, [pc, #36]	; (cfb8 <sd_mmc_spi_wait_end_of_write_blocks+0x2c>)
    cf92:	4798      	blx	r3
    cf94:	0003      	movs	r3, r0
    cf96:	001a      	movs	r2, r3
    cf98:	2301      	movs	r3, #1
    cf9a:	4053      	eors	r3, r2
    cf9c:	b2db      	uxtb	r3, r3
    cf9e:	2b00      	cmp	r3, #0
    cfa0:	d004      	beq.n	cfac <sd_mmc_spi_wait_end_of_write_blocks+0x20>
		sd_mmc_spi_err = SD_MMC_SPI_ERR_WRITE_TIMEOUT;
    cfa2:	4b06      	ldr	r3, [pc, #24]	; (cfbc <sd_mmc_spi_wait_end_of_write_blocks+0x30>)
    cfa4:	2205      	movs	r2, #5
    cfa6:	701a      	strb	r2, [r3, #0]
		sd_mmc_spi_debug("%s: Write blocks timeout\n\r", __func__);
		return false;
    cfa8:	2300      	movs	r3, #0
    cfaa:	e002      	b.n	cfb2 <sd_mmc_spi_wait_end_of_write_blocks+0x26>
	}
	return sd_mmc_spi_stop_multiwrite_block();
    cfac:	4b04      	ldr	r3, [pc, #16]	; (cfc0 <sd_mmc_spi_wait_end_of_write_blocks+0x34>)
    cfae:	4798      	blx	r3
    cfb0:	0003      	movs	r3, r0
}
    cfb2:	0018      	movs	r0, r3
    cfb4:	46bd      	mov	sp, r7
    cfb6:	bd80      	pop	{r7, pc}
    cfb8:	0000c6a9 	.word	0x0000c6a9
    cfbc:	20003d0f 	.word	0x20003d0f
    cfc0:	0000c8a9 	.word	0x0000c8a9

0000cfc4 <delay_init>:
 *
 * This must be called during start up to initialize the delay routine with
 * the current used main clock. It must run any time the main CPU clock is changed.
 */
void delay_init(void)
{
    cfc4:	b580      	push	{r7, lr}
    cfc6:	af00      	add	r7, sp, #0
	cycles_per_ms = system_gclk_gen_get_hz(0);
    cfc8:	2000      	movs	r0, #0
    cfca:	4b0f      	ldr	r3, [pc, #60]	; (d008 <delay_init+0x44>)
    cfcc:	4798      	blx	r3
    cfce:	0002      	movs	r2, r0
    cfd0:	4b0e      	ldr	r3, [pc, #56]	; (d00c <delay_init+0x48>)
    cfd2:	601a      	str	r2, [r3, #0]
	cycles_per_ms /= 1000;
    cfd4:	4b0d      	ldr	r3, [pc, #52]	; (d00c <delay_init+0x48>)
    cfd6:	6818      	ldr	r0, [r3, #0]
    cfd8:	4b0d      	ldr	r3, [pc, #52]	; (d010 <delay_init+0x4c>)
    cfda:	22fa      	movs	r2, #250	; 0xfa
    cfdc:	0091      	lsls	r1, r2, #2
    cfde:	4798      	blx	r3
    cfe0:	0003      	movs	r3, r0
    cfe2:	001a      	movs	r2, r3
    cfe4:	4b09      	ldr	r3, [pc, #36]	; (d00c <delay_init+0x48>)
    cfe6:	601a      	str	r2, [r3, #0]
	cycles_per_us = cycles_per_ms / 1000;
    cfe8:	4b08      	ldr	r3, [pc, #32]	; (d00c <delay_init+0x48>)
    cfea:	6818      	ldr	r0, [r3, #0]
    cfec:	4b08      	ldr	r3, [pc, #32]	; (d010 <delay_init+0x4c>)
    cfee:	22fa      	movs	r2, #250	; 0xfa
    cff0:	0091      	lsls	r1, r2, #2
    cff2:	4798      	blx	r3
    cff4:	0003      	movs	r3, r0
    cff6:	001a      	movs	r2, r3
    cff8:	4b06      	ldr	r3, [pc, #24]	; (d014 <delay_init+0x50>)
    cffa:	601a      	str	r2, [r3, #0]

	SysTick->CTRL = SysTick_CTRL_CLKSOURCE_Msk | SysTick_CTRL_ENABLE_Msk;
    cffc:	4b06      	ldr	r3, [pc, #24]	; (d018 <delay_init+0x54>)
    cffe:	2205      	movs	r2, #5
    d000:	601a      	str	r2, [r3, #0]
}
    d002:	46c0      	nop			; (mov r8, r8)
    d004:	46bd      	mov	sp, r7
    d006:	bd80      	pop	{r7, pc}
    d008:	00016c95 	.word	0x00016c95
    d00c:	2000010c 	.word	0x2000010c
    d010:	0001f841 	.word	0x0001f841
    d014:	20000110 	.word	0x20000110
    d018:	e000e010 	.word	0xe000e010

0000d01c <system_pinmux_get_group_from_gpio_pin>:
{
    d01c:	b580      	push	{r7, lr}
    d01e:	b084      	sub	sp, #16
    d020:	af00      	add	r7, sp, #0
    d022:	0002      	movs	r2, r0
    d024:	1dfb      	adds	r3, r7, #7
    d026:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
    d028:	230f      	movs	r3, #15
    d02a:	18fb      	adds	r3, r7, r3
    d02c:	1dfa      	adds	r2, r7, #7
    d02e:	7812      	ldrb	r2, [r2, #0]
    d030:	09d2      	lsrs	r2, r2, #7
    d032:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
    d034:	230e      	movs	r3, #14
    d036:	18fb      	adds	r3, r7, r3
    d038:	1dfa      	adds	r2, r7, #7
    d03a:	7812      	ldrb	r2, [r2, #0]
    d03c:	0952      	lsrs	r2, r2, #5
    d03e:	701a      	strb	r2, [r3, #0]
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
    d040:	4b0d      	ldr	r3, [pc, #52]	; (d078 <system_pinmux_get_group_from_gpio_pin+0x5c>)
    d042:	60bb      	str	r3, [r7, #8]
	if (port_index < PORT_INST_NUM) {
    d044:	230f      	movs	r3, #15
    d046:	18fb      	adds	r3, r7, r3
    d048:	781b      	ldrb	r3, [r3, #0]
    d04a:	2b00      	cmp	r3, #0
    d04c:	d10f      	bne.n	d06e <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
    d04e:	230f      	movs	r3, #15
    d050:	18fb      	adds	r3, r7, r3
    d052:	781b      	ldrb	r3, [r3, #0]
    d054:	009b      	lsls	r3, r3, #2
    d056:	2210      	movs	r2, #16
    d058:	4694      	mov	ip, r2
    d05a:	44bc      	add	ip, r7
    d05c:	4463      	add	r3, ip
    d05e:	3b08      	subs	r3, #8
    d060:	681a      	ldr	r2, [r3, #0]
    d062:	230e      	movs	r3, #14
    d064:	18fb      	adds	r3, r7, r3
    d066:	781b      	ldrb	r3, [r3, #0]
    d068:	01db      	lsls	r3, r3, #7
    d06a:	18d3      	adds	r3, r2, r3
    d06c:	e000      	b.n	d070 <system_pinmux_get_group_from_gpio_pin+0x54>
		return NULL;
    d06e:	2300      	movs	r3, #0
}
    d070:	0018      	movs	r0, r3
    d072:	46bd      	mov	sp, r7
    d074:	b004      	add	sp, #16
    d076:	bd80      	pop	{r7, pc}
    d078:	41004400 	.word	0x41004400

0000d07c <system_interrupt_enable_global>:
{
    d07c:	b580      	push	{r7, lr}
    d07e:	af00      	add	r7, sp, #0
	cpu_irq_enable();
    d080:	4b04      	ldr	r3, [pc, #16]	; (d094 <system_interrupt_enable_global+0x18>)
    d082:	2201      	movs	r2, #1
    d084:	701a      	strb	r2, [r3, #0]
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
    d086:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    d08a:	b662      	cpsie	i
}
    d08c:	46c0      	nop			; (mov r8, r8)
    d08e:	46bd      	mov	sp, r7
    d090:	bd80      	pop	{r7, pc}
    d092:	46c0      	nop			; (mov r8, r8)
    d094:	20000116 	.word	0x20000116

0000d098 <port_get_group_from_gpio_pin>:
{
    d098:	b580      	push	{r7, lr}
    d09a:	b082      	sub	sp, #8
    d09c:	af00      	add	r7, sp, #0
    d09e:	0002      	movs	r2, r0
    d0a0:	1dfb      	adds	r3, r7, #7
    d0a2:	701a      	strb	r2, [r3, #0]
	return system_pinmux_get_group_from_gpio_pin(gpio_pin);
    d0a4:	1dfb      	adds	r3, r7, #7
    d0a6:	781b      	ldrb	r3, [r3, #0]
    d0a8:	0018      	movs	r0, r3
    d0aa:	4b03      	ldr	r3, [pc, #12]	; (d0b8 <port_get_group_from_gpio_pin+0x20>)
    d0ac:	4798      	blx	r3
    d0ae:	0003      	movs	r3, r0
}
    d0b0:	0018      	movs	r0, r3
    d0b2:	46bd      	mov	sp, r7
    d0b4:	b002      	add	sp, #8
    d0b6:	bd80      	pop	{r7, pc}
    d0b8:	0000d01d 	.word	0x0000d01d

0000d0bc <port_get_config_defaults>:
{
    d0bc:	b580      	push	{r7, lr}
    d0be:	b082      	sub	sp, #8
    d0c0:	af00      	add	r7, sp, #0
    d0c2:	6078      	str	r0, [r7, #4]
	config->direction  = PORT_PIN_DIR_INPUT;
    d0c4:	687b      	ldr	r3, [r7, #4]
    d0c6:	2200      	movs	r2, #0
    d0c8:	701a      	strb	r2, [r3, #0]
	config->input_pull = PORT_PIN_PULL_UP;
    d0ca:	687b      	ldr	r3, [r7, #4]
    d0cc:	2201      	movs	r2, #1
    d0ce:	705a      	strb	r2, [r3, #1]
	config->powersave  = false;
    d0d0:	687b      	ldr	r3, [r7, #4]
    d0d2:	2200      	movs	r2, #0
    d0d4:	709a      	strb	r2, [r3, #2]
}
    d0d6:	46c0      	nop			; (mov r8, r8)
    d0d8:	46bd      	mov	sp, r7
    d0da:	b002      	add	sp, #8
    d0dc:	bd80      	pop	{r7, pc}
	...

0000d0e0 <port_pin_set_output_level>:
{
    d0e0:	b580      	push	{r7, lr}
    d0e2:	b084      	sub	sp, #16
    d0e4:	af00      	add	r7, sp, #0
    d0e6:	0002      	movs	r2, r0
    d0e8:	1dfb      	adds	r3, r7, #7
    d0ea:	701a      	strb	r2, [r3, #0]
    d0ec:	1dbb      	adds	r3, r7, #6
    d0ee:	1c0a      	adds	r2, r1, #0
    d0f0:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
    d0f2:	1dfb      	adds	r3, r7, #7
    d0f4:	781b      	ldrb	r3, [r3, #0]
    d0f6:	0018      	movs	r0, r3
    d0f8:	4b0d      	ldr	r3, [pc, #52]	; (d130 <port_pin_set_output_level+0x50>)
    d0fa:	4798      	blx	r3
    d0fc:	0003      	movs	r3, r0
    d0fe:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    d100:	1dfb      	adds	r3, r7, #7
    d102:	781b      	ldrb	r3, [r3, #0]
    d104:	221f      	movs	r2, #31
    d106:	4013      	ands	r3, r2
    d108:	2201      	movs	r2, #1
    d10a:	409a      	lsls	r2, r3
    d10c:	0013      	movs	r3, r2
    d10e:	60bb      	str	r3, [r7, #8]
	if (level) {
    d110:	1dbb      	adds	r3, r7, #6
    d112:	781b      	ldrb	r3, [r3, #0]
    d114:	2b00      	cmp	r3, #0
    d116:	d003      	beq.n	d120 <port_pin_set_output_level+0x40>
		port_base->OUTSET.reg = pin_mask;
    d118:	68fb      	ldr	r3, [r7, #12]
    d11a:	68ba      	ldr	r2, [r7, #8]
    d11c:	619a      	str	r2, [r3, #24]
}
    d11e:	e002      	b.n	d126 <port_pin_set_output_level+0x46>
		port_base->OUTCLR.reg = pin_mask;
    d120:	68fb      	ldr	r3, [r7, #12]
    d122:	68ba      	ldr	r2, [r7, #8]
    d124:	615a      	str	r2, [r3, #20]
}
    d126:	46c0      	nop			; (mov r8, r8)
    d128:	46bd      	mov	sp, r7
    d12a:	b004      	add	sp, #16
    d12c:	bd80      	pop	{r7, pc}
    d12e:	46c0      	nop			; (mov r8, r8)
    d130:	0000d099 	.word	0x0000d099

0000d134 <chip_isr>:
#include "conf_winc.h"

static tpfNmBspIsr gpfIsr;

static void chip_isr(void)
{
    d134:	b580      	push	{r7, lr}
    d136:	af00      	add	r7, sp, #0
	if (gpfIsr) {
    d138:	4b04      	ldr	r3, [pc, #16]	; (d14c <chip_isr+0x18>)
    d13a:	681b      	ldr	r3, [r3, #0]
    d13c:	2b00      	cmp	r3, #0
    d13e:	d002      	beq.n	d146 <chip_isr+0x12>
		gpfIsr();
    d140:	4b02      	ldr	r3, [pc, #8]	; (d14c <chip_isr+0x18>)
    d142:	681b      	ldr	r3, [r3, #0]
    d144:	4798      	blx	r3
	}
}
    d146:	46c0      	nop			; (mov r8, r8)
    d148:	46bd      	mov	sp, r7
    d14a:	bd80      	pop	{r7, pc}
    d14c:	20003d1c 	.word	0x20003d1c

0000d150 <init_chip_pins>:
/*
 *	@fn		init_chip_pins
 *	@brief	Initialize reset, chip enable and wake pin
 */
static void init_chip_pins(void)
{
    d150:	b580      	push	{r7, lr}
    d152:	b082      	sub	sp, #8
    d154:	af00      	add	r7, sp, #0
	struct port_config pin_conf;

	port_get_config_defaults(&pin_conf);
    d156:	1d3b      	adds	r3, r7, #4
    d158:	0018      	movs	r0, r3
    d15a:	4b10      	ldr	r3, [pc, #64]	; (d19c <init_chip_pins+0x4c>)
    d15c:	4798      	blx	r3

	/* Configure control pins as output. */
	pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
    d15e:	1d3b      	adds	r3, r7, #4
    d160:	2201      	movs	r2, #1
    d162:	701a      	strb	r2, [r3, #0]
	port_pin_set_config(CONF_WINC_PIN_RESET, &pin_conf);
    d164:	1d3b      	adds	r3, r7, #4
    d166:	0019      	movs	r1, r3
    d168:	201b      	movs	r0, #27
    d16a:	4b0d      	ldr	r3, [pc, #52]	; (d1a0 <init_chip_pins+0x50>)
    d16c:	4798      	blx	r3
	port_pin_set_config(CONF_WINC_PIN_CHIP_ENABLE, &pin_conf);
    d16e:	1d3b      	adds	r3, r7, #4
    d170:	0019      	movs	r1, r3
    d172:	201c      	movs	r0, #28
    d174:	4b0a      	ldr	r3, [pc, #40]	; (d1a0 <init_chip_pins+0x50>)
    d176:	4798      	blx	r3
	port_pin_set_config(CONF_WINC_PIN_WAKE, &pin_conf);
    d178:	1d3b      	adds	r3, r7, #4
    d17a:	0019      	movs	r1, r3
    d17c:	2028      	movs	r0, #40	; 0x28
    d17e:	4b08      	ldr	r3, [pc, #32]	; (d1a0 <init_chip_pins+0x50>)
    d180:	4798      	blx	r3
	port_pin_set_output_level(CONF_WINC_PIN_CHIP_ENABLE, false);
    d182:	2100      	movs	r1, #0
    d184:	201c      	movs	r0, #28
    d186:	4b07      	ldr	r3, [pc, #28]	; (d1a4 <init_chip_pins+0x54>)
    d188:	4798      	blx	r3
	port_pin_set_output_level(CONF_WINC_PIN_RESET, false);
    d18a:	2100      	movs	r1, #0
    d18c:	201b      	movs	r0, #27
    d18e:	4b05      	ldr	r3, [pc, #20]	; (d1a4 <init_chip_pins+0x54>)
    d190:	4798      	blx	r3
}
    d192:	46c0      	nop			; (mov r8, r8)
    d194:	46bd      	mov	sp, r7
    d196:	b002      	add	sp, #8
    d198:	bd80      	pop	{r7, pc}
    d19a:	46c0      	nop			; (mov r8, r8)
    d19c:	0000d0bd 	.word	0x0000d0bd
    d1a0:	000138dd 	.word	0x000138dd
    d1a4:	0000d0e1 	.word	0x0000d0e1

0000d1a8 <nm_bsp_init>:
 *	@fn		nm_bsp_init
 *	@brief	Initialize BSP
 *	@return	0 in case of success and -1 in case of failure
 */
sint8 nm_bsp_init(void)
{
    d1a8:	b580      	push	{r7, lr}
    d1aa:	af00      	add	r7, sp, #0
	gpfIsr = NULL;
    d1ac:	4b0b      	ldr	r3, [pc, #44]	; (d1dc <nm_bsp_init+0x34>)
    d1ae:	2200      	movs	r2, #0
    d1b0:	601a      	str	r2, [r3, #0]

	/* Initialize chip IOs. */
	init_chip_pins();
    d1b2:	4b0b      	ldr	r3, [pc, #44]	; (d1e0 <nm_bsp_init+0x38>)
    d1b4:	4798      	blx	r3

    /* Make sure a 1ms Systick is configured. */
    if (!(SysTick->CTRL & SysTick_CTRL_ENABLE_Msk && SysTick->CTRL & SysTick_CTRL_TICKINT_Msk)) {
    d1b6:	4b0b      	ldr	r3, [pc, #44]	; (d1e4 <nm_bsp_init+0x3c>)
    d1b8:	681b      	ldr	r3, [r3, #0]
    d1ba:	2201      	movs	r2, #1
    d1bc:	4013      	ands	r3, r2
    d1be:	d004      	beq.n	d1ca <nm_bsp_init+0x22>
    d1c0:	4b08      	ldr	r3, [pc, #32]	; (d1e4 <nm_bsp_init+0x3c>)
    d1c2:	681b      	ldr	r3, [r3, #0]
    d1c4:	2202      	movs	r2, #2
    d1c6:	4013      	ands	r3, r2
    d1c8:	d101      	bne.n	d1ce <nm_bsp_init+0x26>
	    delay_init();
    d1ca:	4b07      	ldr	r3, [pc, #28]	; (d1e8 <nm_bsp_init+0x40>)
    d1cc:	4798      	blx	r3
    }

	system_interrupt_enable_global();
    d1ce:	4b07      	ldr	r3, [pc, #28]	; (d1ec <nm_bsp_init+0x44>)
    d1d0:	4798      	blx	r3

	return M2M_SUCCESS;
    d1d2:	2300      	movs	r3, #0
}
    d1d4:	0018      	movs	r0, r3
    d1d6:	46bd      	mov	sp, r7
    d1d8:	bd80      	pop	{r7, pc}
    d1da:	46c0      	nop			; (mov r8, r8)
    d1dc:	20003d1c 	.word	0x20003d1c
    d1e0:	0000d151 	.word	0x0000d151
    d1e4:	e000e010 	.word	0xe000e010
    d1e8:	0000cfc5 	.word	0x0000cfc5
    d1ec:	0000d07d 	.word	0x0000d07d

0000d1f0 <nm_bsp_reset>:
 *	@fn		nm_bsp_reset
 *	@brief	Reset NMC1500 SoC by setting CHIP_EN and RESET_N signals low,
 *           CHIP_EN high then RESET_N high
 */
void nm_bsp_reset(void)
{
    d1f0:	b580      	push	{r7, lr}
    d1f2:	af00      	add	r7, sp, #0
	port_pin_set_output_level(CONF_WINC_PIN_CHIP_ENABLE, false);
    d1f4:	2100      	movs	r1, #0
    d1f6:	201c      	movs	r0, #28
    d1f8:	4b0b      	ldr	r3, [pc, #44]	; (d228 <nm_bsp_reset+0x38>)
    d1fa:	4798      	blx	r3
	port_pin_set_output_level(CONF_WINC_PIN_RESET, false);
    d1fc:	2100      	movs	r1, #0
    d1fe:	201b      	movs	r0, #27
    d200:	4b09      	ldr	r3, [pc, #36]	; (d228 <nm_bsp_reset+0x38>)
    d202:	4798      	blx	r3
	nm_bsp_sleep(1);
    d204:	2001      	movs	r0, #1
    d206:	4b09      	ldr	r3, [pc, #36]	; (d22c <nm_bsp_reset+0x3c>)
    d208:	4798      	blx	r3
	port_pin_set_output_level(CONF_WINC_PIN_CHIP_ENABLE, true);
    d20a:	2101      	movs	r1, #1
    d20c:	201c      	movs	r0, #28
    d20e:	4b06      	ldr	r3, [pc, #24]	; (d228 <nm_bsp_reset+0x38>)
    d210:	4798      	blx	r3
	nm_bsp_sleep(10);
    d212:	200a      	movs	r0, #10
    d214:	4b05      	ldr	r3, [pc, #20]	; (d22c <nm_bsp_reset+0x3c>)
    d216:	4798      	blx	r3
	port_pin_set_output_level(CONF_WINC_PIN_RESET, true);
    d218:	2101      	movs	r1, #1
    d21a:	201b      	movs	r0, #27
    d21c:	4b02      	ldr	r3, [pc, #8]	; (d228 <nm_bsp_reset+0x38>)
    d21e:	4798      	blx	r3
}
    d220:	46c0      	nop			; (mov r8, r8)
    d222:	46bd      	mov	sp, r7
    d224:	bd80      	pop	{r7, pc}
    d226:	46c0      	nop			; (mov r8, r8)
    d228:	0000d0e1 	.word	0x0000d0e1
    d22c:	0000d231 	.word	0x0000d231

0000d230 <nm_bsp_sleep>:
 *	@brief	Sleep in units of mSec
 *	@param[IN]	u32TimeMsec
 *				Time in milliseconds
 */
void nm_bsp_sleep(uint32 u32TimeMsec)
{
    d230:	b580      	push	{r7, lr}
    d232:	b082      	sub	sp, #8
    d234:	af00      	add	r7, sp, #0
    d236:	6078      	str	r0, [r7, #4]
#ifdef __FREERTOS__
	vTaskDelay(u32TimeMsec);
    d238:	687b      	ldr	r3, [r7, #4]
    d23a:	0018      	movs	r0, r3
    d23c:	4b02      	ldr	r3, [pc, #8]	; (d248 <nm_bsp_sleep+0x18>)
    d23e:	4798      	blx	r3
	while (u32TimeMsec--) {
		delay_ms(1);
	}
	
#endif
}
    d240:	46c0      	nop			; (mov r8, r8)
    d242:	46bd      	mov	sp, r7
    d244:	b002      	add	sp, #8
    d246:	bd80      	pop	{r7, pc}
    d248:	00009045 	.word	0x00009045

0000d24c <nm_bsp_register_isr>:
 *	@brief	Register interrupt service routine
 *	@param[IN]	pfIsr
 *				Pointer to ISR handler
 */
void nm_bsp_register_isr(tpfNmBspIsr pfIsr)
{
    d24c:	b580      	push	{r7, lr}
    d24e:	b086      	sub	sp, #24
    d250:	af00      	add	r7, sp, #0
    d252:	6078      	str	r0, [r7, #4]
	struct extint_chan_conf config_extint_chan;

	gpfIsr = pfIsr;
    d254:	4b15      	ldr	r3, [pc, #84]	; (d2ac <nm_bsp_register_isr+0x60>)
    d256:	687a      	ldr	r2, [r7, #4]
    d258:	601a      	str	r2, [r3, #0]

	extint_chan_get_config_defaults(&config_extint_chan);
    d25a:	230c      	movs	r3, #12
    d25c:	18fb      	adds	r3, r7, r3
    d25e:	0018      	movs	r0, r3
    d260:	4b13      	ldr	r3, [pc, #76]	; (d2b0 <nm_bsp_register_isr+0x64>)
    d262:	4798      	blx	r3
	config_extint_chan.gpio_pin = CONF_WINC_SPI_INT_PIN;
    d264:	230c      	movs	r3, #12
    d266:	18fb      	adds	r3, r7, r3
    d268:	2229      	movs	r2, #41	; 0x29
    d26a:	601a      	str	r2, [r3, #0]
	config_extint_chan.gpio_pin_mux = CONF_WINC_SPI_INT_MUX;
    d26c:	230c      	movs	r3, #12
    d26e:	18fb      	adds	r3, r7, r3
    d270:	2200      	movs	r2, #0
    d272:	605a      	str	r2, [r3, #4]
	config_extint_chan.gpio_pin_pull = EXTINT_PULL_UP;
    d274:	230c      	movs	r3, #12
    d276:	18fb      	adds	r3, r7, r3
    d278:	2201      	movs	r2, #1
    d27a:	721a      	strb	r2, [r3, #8]
	config_extint_chan.detection_criteria = EXTINT_DETECT_FALLING;
    d27c:	230c      	movs	r3, #12
    d27e:	18fb      	adds	r3, r7, r3
    d280:	2202      	movs	r2, #2
    d282:	72da      	strb	r2, [r3, #11]

	extint_chan_set_config(CONF_WINC_SPI_INT_EIC, &config_extint_chan);
    d284:	230c      	movs	r3, #12
    d286:	18fb      	adds	r3, r7, r3
    d288:	0019      	movs	r1, r3
    d28a:	2009      	movs	r0, #9
    d28c:	4b09      	ldr	r3, [pc, #36]	; (d2b4 <nm_bsp_register_isr+0x68>)
    d28e:	4798      	blx	r3
	extint_register_callback(chip_isr, CONF_WINC_SPI_INT_EIC,
    d290:	4b09      	ldr	r3, [pc, #36]	; (d2b8 <nm_bsp_register_isr+0x6c>)
    d292:	2200      	movs	r2, #0
    d294:	2109      	movs	r1, #9
    d296:	0018      	movs	r0, r3
    d298:	4b08      	ldr	r3, [pc, #32]	; (d2bc <nm_bsp_register_isr+0x70>)
    d29a:	4798      	blx	r3
			EXTINT_CALLBACK_TYPE_DETECT);
	extint_chan_enable_callback(CONF_WINC_SPI_INT_EIC,
    d29c:	2100      	movs	r1, #0
    d29e:	2009      	movs	r0, #9
    d2a0:	4b07      	ldr	r3, [pc, #28]	; (d2c0 <nm_bsp_register_isr+0x74>)
    d2a2:	4798      	blx	r3
			EXTINT_CALLBACK_TYPE_DETECT);
}
    d2a4:	46c0      	nop			; (mov r8, r8)
    d2a6:	46bd      	mov	sp, r7
    d2a8:	b006      	add	sp, #24
    d2aa:	bd80      	pop	{r7, pc}
    d2ac:	20003d1c 	.word	0x20003d1c
    d2b0:	00013785 	.word	0x00013785
    d2b4:	000137b9 	.word	0x000137b9
    d2b8:	0000d135 	.word	0x0000d135
    d2bc:	00013385 	.word	0x00013385
    d2c0:	000133e9 	.word	0x000133e9

0000d2c4 <nm_bsp_interrupt_ctrl>:
 *	@brief	Enable/Disable interrupts
 *	@param[IN]	u8Enable
 *				'0' disable interrupts. '1' enable interrupts
 */
void nm_bsp_interrupt_ctrl(uint8 u8Enable)
{
    d2c4:	b580      	push	{r7, lr}
    d2c6:	b082      	sub	sp, #8
    d2c8:	af00      	add	r7, sp, #0
    d2ca:	0002      	movs	r2, r0
    d2cc:	1dfb      	adds	r3, r7, #7
    d2ce:	701a      	strb	r2, [r3, #0]
	if (u8Enable) {
    d2d0:	1dfb      	adds	r3, r7, #7
    d2d2:	781b      	ldrb	r3, [r3, #0]
    d2d4:	2b00      	cmp	r3, #0
    d2d6:	d004      	beq.n	d2e2 <nm_bsp_interrupt_ctrl+0x1e>
		extint_chan_enable_callback(CONF_WINC_SPI_INT_EIC,
    d2d8:	2100      	movs	r1, #0
    d2da:	2009      	movs	r0, #9
    d2dc:	4b05      	ldr	r3, [pc, #20]	; (d2f4 <nm_bsp_interrupt_ctrl+0x30>)
    d2de:	4798      	blx	r3
				EXTINT_CALLBACK_TYPE_DETECT);
	} else {
		extint_chan_disable_callback(CONF_WINC_SPI_INT_EIC,
				EXTINT_CALLBACK_TYPE_DETECT);
	}
}
    d2e0:	e003      	b.n	d2ea <nm_bsp_interrupt_ctrl+0x26>
		extint_chan_disable_callback(CONF_WINC_SPI_INT_EIC,
    d2e2:	2100      	movs	r1, #0
    d2e4:	2009      	movs	r0, #9
    d2e6:	4b04      	ldr	r3, [pc, #16]	; (d2f8 <nm_bsp_interrupt_ctrl+0x34>)
    d2e8:	4798      	blx	r3
}
    d2ea:	46c0      	nop			; (mov r8, r8)
    d2ec:	46bd      	mov	sp, r7
    d2ee:	b002      	add	sp, #8
    d2f0:	bd80      	pop	{r7, pc}
    d2f2:	46c0      	nop			; (mov r8, r8)
    d2f4:	000133e9 	.word	0x000133e9
    d2f8:	00013431 	.word	0x00013431

0000d2fc <system_pinmux_get_group_from_gpio_pin>:
{
    d2fc:	b580      	push	{r7, lr}
    d2fe:	b084      	sub	sp, #16
    d300:	af00      	add	r7, sp, #0
    d302:	0002      	movs	r2, r0
    d304:	1dfb      	adds	r3, r7, #7
    d306:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
    d308:	230f      	movs	r3, #15
    d30a:	18fb      	adds	r3, r7, r3
    d30c:	1dfa      	adds	r2, r7, #7
    d30e:	7812      	ldrb	r2, [r2, #0]
    d310:	09d2      	lsrs	r2, r2, #7
    d312:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
    d314:	230e      	movs	r3, #14
    d316:	18fb      	adds	r3, r7, r3
    d318:	1dfa      	adds	r2, r7, #7
    d31a:	7812      	ldrb	r2, [r2, #0]
    d31c:	0952      	lsrs	r2, r2, #5
    d31e:	701a      	strb	r2, [r3, #0]
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
    d320:	4b0d      	ldr	r3, [pc, #52]	; (d358 <system_pinmux_get_group_from_gpio_pin+0x5c>)
    d322:	60bb      	str	r3, [r7, #8]
	if (port_index < PORT_INST_NUM) {
    d324:	230f      	movs	r3, #15
    d326:	18fb      	adds	r3, r7, r3
    d328:	781b      	ldrb	r3, [r3, #0]
    d32a:	2b00      	cmp	r3, #0
    d32c:	d10f      	bne.n	d34e <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
    d32e:	230f      	movs	r3, #15
    d330:	18fb      	adds	r3, r7, r3
    d332:	781b      	ldrb	r3, [r3, #0]
    d334:	009b      	lsls	r3, r3, #2
    d336:	2210      	movs	r2, #16
    d338:	4694      	mov	ip, r2
    d33a:	44bc      	add	ip, r7
    d33c:	4463      	add	r3, ip
    d33e:	3b08      	subs	r3, #8
    d340:	681a      	ldr	r2, [r3, #0]
    d342:	230e      	movs	r3, #14
    d344:	18fb      	adds	r3, r7, r3
    d346:	781b      	ldrb	r3, [r3, #0]
    d348:	01db      	lsls	r3, r3, #7
    d34a:	18d3      	adds	r3, r2, r3
    d34c:	e000      	b.n	d350 <system_pinmux_get_group_from_gpio_pin+0x54>
		return NULL;
    d34e:	2300      	movs	r3, #0
}
    d350:	0018      	movs	r0, r3
    d352:	46bd      	mov	sp, r7
    d354:	b004      	add	sp, #16
    d356:	bd80      	pop	{r7, pc}
    d358:	41004400 	.word	0x41004400

0000d35c <system_interrupt_enable>:
{
    d35c:	b580      	push	{r7, lr}
    d35e:	b082      	sub	sp, #8
    d360:	af00      	add	r7, sp, #0
    d362:	0002      	movs	r2, r0
    d364:	1dfb      	adds	r3, r7, #7
    d366:	701a      	strb	r2, [r3, #0]
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    d368:	4b06      	ldr	r3, [pc, #24]	; (d384 <system_interrupt_enable+0x28>)
    d36a:	1dfa      	adds	r2, r7, #7
    d36c:	7812      	ldrb	r2, [r2, #0]
    d36e:	0011      	movs	r1, r2
    d370:	221f      	movs	r2, #31
    d372:	400a      	ands	r2, r1
    d374:	2101      	movs	r1, #1
    d376:	4091      	lsls	r1, r2
    d378:	000a      	movs	r2, r1
    d37a:	601a      	str	r2, [r3, #0]
}
    d37c:	46c0      	nop			; (mov r8, r8)
    d37e:	46bd      	mov	sp, r7
    d380:	b002      	add	sp, #8
    d382:	bd80      	pop	{r7, pc}
    d384:	e000e100 	.word	0xe000e100

0000d388 <system_interrupt_disable>:
{
    d388:	b580      	push	{r7, lr}
    d38a:	b082      	sub	sp, #8
    d38c:	af00      	add	r7, sp, #0
    d38e:	0002      	movs	r2, r0
    d390:	1dfb      	adds	r3, r7, #7
    d392:	701a      	strb	r2, [r3, #0]
	NVIC->ICER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    d394:	4a07      	ldr	r2, [pc, #28]	; (d3b4 <system_interrupt_disable+0x2c>)
    d396:	1dfb      	adds	r3, r7, #7
    d398:	781b      	ldrb	r3, [r3, #0]
    d39a:	0019      	movs	r1, r3
    d39c:	231f      	movs	r3, #31
    d39e:	400b      	ands	r3, r1
    d3a0:	2101      	movs	r1, #1
    d3a2:	4099      	lsls	r1, r3
    d3a4:	000b      	movs	r3, r1
    d3a6:	0019      	movs	r1, r3
    d3a8:	2380      	movs	r3, #128	; 0x80
    d3aa:	50d1      	str	r1, [r2, r3]
}
    d3ac:	46c0      	nop			; (mov r8, r8)
    d3ae:	46bd      	mov	sp, r7
    d3b0:	b002      	add	sp, #8
    d3b2:	bd80      	pop	{r7, pc}
    d3b4:	e000e100 	.word	0xe000e100

0000d3b8 <port_get_group_from_gpio_pin>:
{
    d3b8:	b580      	push	{r7, lr}
    d3ba:	b082      	sub	sp, #8
    d3bc:	af00      	add	r7, sp, #0
    d3be:	0002      	movs	r2, r0
    d3c0:	1dfb      	adds	r3, r7, #7
    d3c2:	701a      	strb	r2, [r3, #0]
	return system_pinmux_get_group_from_gpio_pin(gpio_pin);
    d3c4:	1dfb      	adds	r3, r7, #7
    d3c6:	781b      	ldrb	r3, [r3, #0]
    d3c8:	0018      	movs	r0, r3
    d3ca:	4b03      	ldr	r3, [pc, #12]	; (d3d8 <port_get_group_from_gpio_pin+0x20>)
    d3cc:	4798      	blx	r3
    d3ce:	0003      	movs	r3, r0
}
    d3d0:	0018      	movs	r0, r3
    d3d2:	46bd      	mov	sp, r7
    d3d4:	b002      	add	sp, #8
    d3d6:	bd80      	pop	{r7, pc}
    d3d8:	0000d2fd 	.word	0x0000d2fd

0000d3dc <port_get_config_defaults>:
{
    d3dc:	b580      	push	{r7, lr}
    d3de:	b082      	sub	sp, #8
    d3e0:	af00      	add	r7, sp, #0
    d3e2:	6078      	str	r0, [r7, #4]
	config->direction  = PORT_PIN_DIR_INPUT;
    d3e4:	687b      	ldr	r3, [r7, #4]
    d3e6:	2200      	movs	r2, #0
    d3e8:	701a      	strb	r2, [r3, #0]
	config->input_pull = PORT_PIN_PULL_UP;
    d3ea:	687b      	ldr	r3, [r7, #4]
    d3ec:	2201      	movs	r2, #1
    d3ee:	705a      	strb	r2, [r3, #1]
	config->powersave  = false;
    d3f0:	687b      	ldr	r3, [r7, #4]
    d3f2:	2200      	movs	r2, #0
    d3f4:	709a      	strb	r2, [r3, #2]
}
    d3f6:	46c0      	nop			; (mov r8, r8)
    d3f8:	46bd      	mov	sp, r7
    d3fa:	b002      	add	sp, #8
    d3fc:	bd80      	pop	{r7, pc}
	...

0000d400 <port_pin_set_output_level>:
{
    d400:	b580      	push	{r7, lr}
    d402:	b084      	sub	sp, #16
    d404:	af00      	add	r7, sp, #0
    d406:	0002      	movs	r2, r0
    d408:	1dfb      	adds	r3, r7, #7
    d40a:	701a      	strb	r2, [r3, #0]
    d40c:	1dbb      	adds	r3, r7, #6
    d40e:	1c0a      	adds	r2, r1, #0
    d410:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
    d412:	1dfb      	adds	r3, r7, #7
    d414:	781b      	ldrb	r3, [r3, #0]
    d416:	0018      	movs	r0, r3
    d418:	4b0d      	ldr	r3, [pc, #52]	; (d450 <port_pin_set_output_level+0x50>)
    d41a:	4798      	blx	r3
    d41c:	0003      	movs	r3, r0
    d41e:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    d420:	1dfb      	adds	r3, r7, #7
    d422:	781b      	ldrb	r3, [r3, #0]
    d424:	221f      	movs	r2, #31
    d426:	4013      	ands	r3, r2
    d428:	2201      	movs	r2, #1
    d42a:	409a      	lsls	r2, r3
    d42c:	0013      	movs	r3, r2
    d42e:	60bb      	str	r3, [r7, #8]
	if (level) {
    d430:	1dbb      	adds	r3, r7, #6
    d432:	781b      	ldrb	r3, [r3, #0]
    d434:	2b00      	cmp	r3, #0
    d436:	d003      	beq.n	d440 <port_pin_set_output_level+0x40>
		port_base->OUTSET.reg = pin_mask;
    d438:	68fb      	ldr	r3, [r7, #12]
    d43a:	68ba      	ldr	r2, [r7, #8]
    d43c:	619a      	str	r2, [r3, #24]
}
    d43e:	e002      	b.n	d446 <port_pin_set_output_level+0x46>
		port_base->OUTCLR.reg = pin_mask;
    d440:	68fb      	ldr	r3, [r7, #12]
    d442:	68ba      	ldr	r2, [r7, #8]
    d444:	615a      	str	r2, [r3, #20]
}
    d446:	46c0      	nop			; (mov r8, r8)
    d448:	46bd      	mov	sp, r7
    d44a:	b004      	add	sp, #16
    d44c:	bd80      	pop	{r7, pc}
    d44e:	46c0      	nop			; (mov r8, r8)
    d450:	0000d3b9 	.word	0x0000d3b9

0000d454 <spi_is_syncing>:
{
    d454:	b580      	push	{r7, lr}
    d456:	b084      	sub	sp, #16
    d458:	af00      	add	r7, sp, #0
    d45a:	6078      	str	r0, [r7, #4]
	SercomSpi *const spi_module = &(module->hw->SPI);
    d45c:	687b      	ldr	r3, [r7, #4]
    d45e:	681b      	ldr	r3, [r3, #0]
    d460:	60fb      	str	r3, [r7, #12]
	return (spi_module->SYNCBUSY.reg);
    d462:	68fb      	ldr	r3, [r7, #12]
    d464:	69db      	ldr	r3, [r3, #28]
    d466:	1e5a      	subs	r2, r3, #1
    d468:	4193      	sbcs	r3, r2
    d46a:	b2db      	uxtb	r3, r3
}
    d46c:	0018      	movs	r0, r3
    d46e:	46bd      	mov	sp, r7
    d470:	b004      	add	sp, #16
    d472:	bd80      	pop	{r7, pc}

0000d474 <spi_get_config_defaults>:
{
    d474:	b580      	push	{r7, lr}
    d476:	b082      	sub	sp, #8
    d478:	af00      	add	r7, sp, #0
    d47a:	6078      	str	r0, [r7, #4]
	config->mode             = SPI_MODE_MASTER;
    d47c:	687b      	ldr	r3, [r7, #4]
    d47e:	2201      	movs	r2, #1
    d480:	701a      	strb	r2, [r3, #0]
	config->data_order       = SPI_DATA_ORDER_MSB;
    d482:	687b      	ldr	r3, [r7, #4]
    d484:	2200      	movs	r2, #0
    d486:	605a      	str	r2, [r3, #4]
	config->transfer_mode    = SPI_TRANSFER_MODE_0;
    d488:	687b      	ldr	r3, [r7, #4]
    d48a:	2200      	movs	r2, #0
    d48c:	609a      	str	r2, [r3, #8]
	config->mux_setting      = SPI_SIGNAL_MUX_SETTING_D;
    d48e:	687b      	ldr	r3, [r7, #4]
    d490:	22c0      	movs	r2, #192	; 0xc0
    d492:	0392      	lsls	r2, r2, #14
    d494:	60da      	str	r2, [r3, #12]
	config->character_size   = SPI_CHARACTER_SIZE_8BIT;
    d496:	687b      	ldr	r3, [r7, #4]
    d498:	2200      	movs	r2, #0
    d49a:	741a      	strb	r2, [r3, #16]
	config->run_in_standby   = false;
    d49c:	687b      	ldr	r3, [r7, #4]
    d49e:	2200      	movs	r2, #0
    d4a0:	745a      	strb	r2, [r3, #17]
	config->receiver_enable  = true;
    d4a2:	687b      	ldr	r3, [r7, #4]
    d4a4:	2201      	movs	r2, #1
    d4a6:	749a      	strb	r2, [r3, #18]
	config->select_slave_low_detect_enable= true;
    d4a8:	687b      	ldr	r3, [r7, #4]
    d4aa:	2201      	movs	r2, #1
    d4ac:	74da      	strb	r2, [r3, #19]
	config->master_slave_select_enable= false;
    d4ae:	687b      	ldr	r3, [r7, #4]
    d4b0:	2200      	movs	r2, #0
    d4b2:	751a      	strb	r2, [r3, #20]
	config->generator_source = GCLK_GENERATOR_0;
    d4b4:	687b      	ldr	r3, [r7, #4]
    d4b6:	2224      	movs	r2, #36	; 0x24
    d4b8:	2100      	movs	r1, #0
    d4ba:	5499      	strb	r1, [r3, r2]
	memset(&(config->mode_specific), 0, sizeof(config->mode_specific));
    d4bc:	687b      	ldr	r3, [r7, #4]
    d4be:	3318      	adds	r3, #24
    d4c0:	220c      	movs	r2, #12
    d4c2:	2100      	movs	r1, #0
    d4c4:	0018      	movs	r0, r3
    d4c6:	4b0a      	ldr	r3, [pc, #40]	; (d4f0 <spi_get_config_defaults+0x7c>)
    d4c8:	4798      	blx	r3
	config->mode_specific.master.baudrate = 100000;
    d4ca:	687b      	ldr	r3, [r7, #4]
    d4cc:	4a09      	ldr	r2, [pc, #36]	; (d4f4 <spi_get_config_defaults+0x80>)
    d4ce:	619a      	str	r2, [r3, #24]
	config->pinmux_pad0 = PINMUX_DEFAULT;
    d4d0:	687b      	ldr	r3, [r7, #4]
    d4d2:	2200      	movs	r2, #0
    d4d4:	629a      	str	r2, [r3, #40]	; 0x28
	config->pinmux_pad1 = PINMUX_DEFAULT;
    d4d6:	687b      	ldr	r3, [r7, #4]
    d4d8:	2200      	movs	r2, #0
    d4da:	62da      	str	r2, [r3, #44]	; 0x2c
	config->pinmux_pad2 = PINMUX_DEFAULT;
    d4dc:	687b      	ldr	r3, [r7, #4]
    d4de:	2200      	movs	r2, #0
    d4e0:	631a      	str	r2, [r3, #48]	; 0x30
	config->pinmux_pad3 = PINMUX_DEFAULT;
    d4e2:	687b      	ldr	r3, [r7, #4]
    d4e4:	2200      	movs	r2, #0
    d4e6:	635a      	str	r2, [r3, #52]	; 0x34
};
    d4e8:	46c0      	nop			; (mov r8, r8)
    d4ea:	46bd      	mov	sp, r7
    d4ec:	b002      	add	sp, #8
    d4ee:	bd80      	pop	{r7, pc}
    d4f0:	0002181b 	.word	0x0002181b
    d4f4:	000186a0 	.word	0x000186a0

0000d4f8 <spi_slave_inst_get_config_defaults>:
{
    d4f8:	b580      	push	{r7, lr}
    d4fa:	b082      	sub	sp, #8
    d4fc:	af00      	add	r7, sp, #0
    d4fe:	6078      	str	r0, [r7, #4]
	config->ss_pin          = 10;
    d500:	687b      	ldr	r3, [r7, #4]
    d502:	220a      	movs	r2, #10
    d504:	701a      	strb	r2, [r3, #0]
	config->address_enabled = false;
    d506:	687b      	ldr	r3, [r7, #4]
    d508:	2200      	movs	r2, #0
    d50a:	705a      	strb	r2, [r3, #1]
	config->address         = 0;
    d50c:	687b      	ldr	r3, [r7, #4]
    d50e:	2200      	movs	r2, #0
    d510:	709a      	strb	r2, [r3, #2]
}
    d512:	46c0      	nop			; (mov r8, r8)
    d514:	46bd      	mov	sp, r7
    d516:	b002      	add	sp, #8
    d518:	bd80      	pop	{r7, pc}
	...

0000d51c <spi_attach_slave>:
{
    d51c:	b580      	push	{r7, lr}
    d51e:	b084      	sub	sp, #16
    d520:	af00      	add	r7, sp, #0
    d522:	6078      	str	r0, [r7, #4]
    d524:	6039      	str	r1, [r7, #0]
	slave->ss_pin          = config->ss_pin;
    d526:	683b      	ldr	r3, [r7, #0]
    d528:	781a      	ldrb	r2, [r3, #0]
    d52a:	687b      	ldr	r3, [r7, #4]
    d52c:	701a      	strb	r2, [r3, #0]
	slave->address_enabled = config->address_enabled;
    d52e:	683b      	ldr	r3, [r7, #0]
    d530:	785a      	ldrb	r2, [r3, #1]
    d532:	687b      	ldr	r3, [r7, #4]
    d534:	705a      	strb	r2, [r3, #1]
	slave->address         = config->address;
    d536:	683b      	ldr	r3, [r7, #0]
    d538:	789a      	ldrb	r2, [r3, #2]
    d53a:	687b      	ldr	r3, [r7, #4]
    d53c:	709a      	strb	r2, [r3, #2]
	port_get_config_defaults(&pin_conf);
    d53e:	230c      	movs	r3, #12
    d540:	18fb      	adds	r3, r7, r3
    d542:	0018      	movs	r0, r3
    d544:	4b0b      	ldr	r3, [pc, #44]	; (d574 <spi_attach_slave+0x58>)
    d546:	4798      	blx	r3
	pin_conf.direction = PORT_PIN_DIR_OUTPUT;
    d548:	230c      	movs	r3, #12
    d54a:	18fb      	adds	r3, r7, r3
    d54c:	2201      	movs	r2, #1
    d54e:	701a      	strb	r2, [r3, #0]
	port_pin_set_config(slave->ss_pin, &pin_conf);
    d550:	687b      	ldr	r3, [r7, #4]
    d552:	781b      	ldrb	r3, [r3, #0]
    d554:	220c      	movs	r2, #12
    d556:	18ba      	adds	r2, r7, r2
    d558:	0011      	movs	r1, r2
    d55a:	0018      	movs	r0, r3
    d55c:	4b06      	ldr	r3, [pc, #24]	; (d578 <spi_attach_slave+0x5c>)
    d55e:	4798      	blx	r3
	port_pin_set_output_level(slave->ss_pin, true);
    d560:	687b      	ldr	r3, [r7, #4]
    d562:	781b      	ldrb	r3, [r3, #0]
    d564:	2101      	movs	r1, #1
    d566:	0018      	movs	r0, r3
    d568:	4b04      	ldr	r3, [pc, #16]	; (d57c <spi_attach_slave+0x60>)
    d56a:	4798      	blx	r3
}
    d56c:	46c0      	nop			; (mov r8, r8)
    d56e:	46bd      	mov	sp, r7
    d570:	b004      	add	sp, #16
    d572:	bd80      	pop	{r7, pc}
    d574:	0000d3dd 	.word	0x0000d3dd
    d578:	000138dd 	.word	0x000138dd
    d57c:	0000d401 	.word	0x0000d401

0000d580 <spi_enable>:
{
    d580:	b580      	push	{r7, lr}
    d582:	b084      	sub	sp, #16
    d584:	af00      	add	r7, sp, #0
    d586:	6078      	str	r0, [r7, #4]
	SercomSpi *const spi_module = &(module->hw->SPI);
    d588:	687b      	ldr	r3, [r7, #4]
    d58a:	681b      	ldr	r3, [r3, #0]
    d58c:	60fb      	str	r3, [r7, #12]
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
    d58e:	687b      	ldr	r3, [r7, #4]
    d590:	681b      	ldr	r3, [r3, #0]
    d592:	0018      	movs	r0, r3
    d594:	4b0b      	ldr	r3, [pc, #44]	; (d5c4 <spi_enable+0x44>)
    d596:	4798      	blx	r3
    d598:	0003      	movs	r3, r0
    d59a:	0018      	movs	r0, r3
    d59c:	4b0a      	ldr	r3, [pc, #40]	; (d5c8 <spi_enable+0x48>)
    d59e:	4798      	blx	r3
	while (spi_is_syncing(module)) {
    d5a0:	46c0      	nop			; (mov r8, r8)
    d5a2:	687b      	ldr	r3, [r7, #4]
    d5a4:	0018      	movs	r0, r3
    d5a6:	4b09      	ldr	r3, [pc, #36]	; (d5cc <spi_enable+0x4c>)
    d5a8:	4798      	blx	r3
    d5aa:	1e03      	subs	r3, r0, #0
    d5ac:	d1f9      	bne.n	d5a2 <spi_enable+0x22>
	spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_ENABLE;
    d5ae:	68fb      	ldr	r3, [r7, #12]
    d5b0:	681b      	ldr	r3, [r3, #0]
    d5b2:	2202      	movs	r2, #2
    d5b4:	431a      	orrs	r2, r3
    d5b6:	68fb      	ldr	r3, [r7, #12]
    d5b8:	601a      	str	r2, [r3, #0]
}
    d5ba:	46c0      	nop			; (mov r8, r8)
    d5bc:	46bd      	mov	sp, r7
    d5be:	b004      	add	sp, #16
    d5c0:	bd80      	pop	{r7, pc}
    d5c2:	46c0      	nop			; (mov r8, r8)
    d5c4:	000145ad 	.word	0x000145ad
    d5c8:	0000d35d 	.word	0x0000d35d
    d5cc:	0000d455 	.word	0x0000d455

0000d5d0 <spi_disable>:
 *
 * \param[in,out] module  Pointer to the software instance struct
 */
static inline void spi_disable(
		struct spi_module *const module)
{
    d5d0:	b580      	push	{r7, lr}
    d5d2:	b084      	sub	sp, #16
    d5d4:	af00      	add	r7, sp, #0
    d5d6:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    d5d8:	687b      	ldr	r3, [r7, #4]
    d5da:	681b      	ldr	r3, [r3, #0]
    d5dc:	60fb      	str	r3, [r7, #12]

#  if SPI_CALLBACK_MODE == true
	system_interrupt_disable(_sercom_get_interrupt_vector(module->hw));
    d5de:	687b      	ldr	r3, [r7, #4]
    d5e0:	681b      	ldr	r3, [r3, #0]
    d5e2:	0018      	movs	r0, r3
    d5e4:	4b0e      	ldr	r3, [pc, #56]	; (d620 <spi_disable+0x50>)
    d5e6:	4798      	blx	r3
    d5e8:	0003      	movs	r3, r0
    d5ea:	0018      	movs	r0, r3
    d5ec:	4b0d      	ldr	r3, [pc, #52]	; (d624 <spi_disable+0x54>)
    d5ee:	4798      	blx	r3
#  endif

	while (spi_is_syncing(module)) {
    d5f0:	46c0      	nop			; (mov r8, r8)
    d5f2:	687b      	ldr	r3, [r7, #4]
    d5f4:	0018      	movs	r0, r3
    d5f6:	4b0c      	ldr	r3, [pc, #48]	; (d628 <spi_disable+0x58>)
    d5f8:	4798      	blx	r3
    d5fa:	1e03      	subs	r3, r0, #0
    d5fc:	d1f9      	bne.n	d5f2 <spi_disable+0x22>
		/* Wait until the synchronization is complete */
	}

	/* Disbale interrupt */
	spi_module->INTENCLR.reg = SERCOM_SPI_INTENCLR_MASK;
    d5fe:	68fb      	ldr	r3, [r7, #12]
    d600:	228f      	movs	r2, #143	; 0x8f
    d602:	751a      	strb	r2, [r3, #20]
	/* Clear interrupt flag */
	spi_module->INTFLAG.reg = SERCOM_SPI_INTFLAG_MASK;
    d604:	68fb      	ldr	r3, [r7, #12]
    d606:	228f      	movs	r2, #143	; 0x8f
    d608:	761a      	strb	r2, [r3, #24]

	/* Disable SPI */
	spi_module->CTRLA.reg &= ~SERCOM_SPI_CTRLA_ENABLE;
    d60a:	68fb      	ldr	r3, [r7, #12]
    d60c:	681b      	ldr	r3, [r3, #0]
    d60e:	2202      	movs	r2, #2
    d610:	4393      	bics	r3, r2
    d612:	001a      	movs	r2, r3
    d614:	68fb      	ldr	r3, [r7, #12]
    d616:	601a      	str	r2, [r3, #0]
}
    d618:	46c0      	nop			; (mov r8, r8)
    d61a:	46bd      	mov	sp, r7
    d61c:	b004      	add	sp, #16
    d61e:	bd80      	pop	{r7, pc}
    d620:	000145ad 	.word	0x000145ad
    d624:	0000d389 	.word	0x0000d389
    d628:	0000d455 	.word	0x0000d455

0000d62c <spi_is_write_complete>:
 *                has been drawn high for SPI slave
 * \retval false  If the SPI master module has not shifted out data
 */
static inline bool spi_is_write_complete(
		struct spi_module *const module)
{
    d62c:	b580      	push	{r7, lr}
    d62e:	b084      	sub	sp, #16
    d630:	af00      	add	r7, sp, #0
    d632:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    d634:	687b      	ldr	r3, [r7, #4]
    d636:	681b      	ldr	r3, [r3, #0]
    d638:	60fb      	str	r3, [r7, #12]

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    d63a:	68fb      	ldr	r3, [r7, #12]
    d63c:	7e1b      	ldrb	r3, [r3, #24]
    d63e:	b2db      	uxtb	r3, r3
    d640:	001a      	movs	r2, r3
    d642:	2302      	movs	r3, #2
    d644:	4013      	ands	r3, r2
    d646:	1e5a      	subs	r2, r3, #1
    d648:	4193      	sbcs	r3, r2
    d64a:	b2db      	uxtb	r3, r3
}
    d64c:	0018      	movs	r0, r3
    d64e:	46bd      	mov	sp, r7
    d650:	b004      	add	sp, #16
    d652:	bd80      	pop	{r7, pc}

0000d654 <spi_is_ready_to_write>:
 * \retval true   If the SPI module is ready to write data
 * \retval false  If the SPI module is not ready to write data
 */
static inline bool spi_is_ready_to_write(
		struct spi_module *const module)
{
    d654:	b580      	push	{r7, lr}
    d656:	b084      	sub	sp, #16
    d658:	af00      	add	r7, sp, #0
    d65a:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    d65c:	687b      	ldr	r3, [r7, #4]
    d65e:	681b      	ldr	r3, [r3, #0]
    d660:	60fb      	str	r3, [r7, #12]

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    d662:	68fb      	ldr	r3, [r7, #12]
    d664:	7e1b      	ldrb	r3, [r3, #24]
    d666:	b2db      	uxtb	r3, r3
    d668:	001a      	movs	r2, r3
    d66a:	2301      	movs	r3, #1
    d66c:	4013      	ands	r3, r2
    d66e:	1e5a      	subs	r2, r3, #1
    d670:	4193      	sbcs	r3, r2
    d672:	b2db      	uxtb	r3, r3
}
    d674:	0018      	movs	r0, r3
    d676:	46bd      	mov	sp, r7
    d678:	b004      	add	sp, #16
    d67a:	bd80      	pop	{r7, pc}

0000d67c <spi_is_ready_to_read>:
 * \retval true   If the SPI module is ready to read data
 * \retval false  If the SPI module is not ready to read data
 */
static inline bool spi_is_ready_to_read(
		struct spi_module *const module)
{
    d67c:	b580      	push	{r7, lr}
    d67e:	b084      	sub	sp, #16
    d680:	af00      	add	r7, sp, #0
    d682:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    d684:	687b      	ldr	r3, [r7, #4]
    d686:	681b      	ldr	r3, [r3, #0]
    d688:	60fb      	str	r3, [r7, #12]

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    d68a:	68fb      	ldr	r3, [r7, #12]
    d68c:	7e1b      	ldrb	r3, [r3, #24]
    d68e:	b2db      	uxtb	r3, r3
    d690:	001a      	movs	r2, r3
    d692:	2304      	movs	r3, #4
    d694:	4013      	ands	r3, r2
    d696:	1e5a      	subs	r2, r3, #1
    d698:	4193      	sbcs	r3, r2
    d69a:	b2db      	uxtb	r3, r3
}
    d69c:	0018      	movs	r0, r3
    d69e:	46bd      	mov	sp, r7
    d6a0:	b004      	add	sp, #16
    d6a2:	bd80      	pop	{r7, pc}

0000d6a4 <spi_write>:
 * \retval STATUS_BUSY  If the last write was not completed
 */
static inline enum status_code spi_write(
		struct spi_module *module,
		uint16_t tx_data)
{
    d6a4:	b580      	push	{r7, lr}
    d6a6:	b084      	sub	sp, #16
    d6a8:	af00      	add	r7, sp, #0
    d6aa:	6078      	str	r0, [r7, #4]
    d6ac:	000a      	movs	r2, r1
    d6ae:	1cbb      	adds	r3, r7, #2
    d6b0:	801a      	strh	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    d6b2:	687b      	ldr	r3, [r7, #4]
    d6b4:	681b      	ldr	r3, [r3, #0]
    d6b6:	60fb      	str	r3, [r7, #12]

	/* Check if the data register has been copied to the shift register */
	if (!spi_is_ready_to_write(module)) {
    d6b8:	687b      	ldr	r3, [r7, #4]
    d6ba:	0018      	movs	r0, r3
    d6bc:	4b0a      	ldr	r3, [pc, #40]	; (d6e8 <spi_write+0x44>)
    d6be:	4798      	blx	r3
    d6c0:	0003      	movs	r3, r0
    d6c2:	001a      	movs	r2, r3
    d6c4:	2301      	movs	r3, #1
    d6c6:	4053      	eors	r3, r2
    d6c8:	b2db      	uxtb	r3, r3
    d6ca:	2b00      	cmp	r3, #0
    d6cc:	d001      	beq.n	d6d2 <spi_write+0x2e>
		/* Data register has not been copied to the shift register, return */
		return STATUS_BUSY;
    d6ce:	2305      	movs	r3, #5
    d6d0:	e006      	b.n	d6e0 <spi_write+0x3c>
	}

	/* Write the character to the DATA register */
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    d6d2:	1cbb      	adds	r3, r7, #2
    d6d4:	881b      	ldrh	r3, [r3, #0]
    d6d6:	05db      	lsls	r3, r3, #23
    d6d8:	0dda      	lsrs	r2, r3, #23
    d6da:	68fb      	ldr	r3, [r7, #12]
    d6dc:	629a      	str	r2, [r3, #40]	; 0x28

	return STATUS_OK;
    d6de:	2300      	movs	r3, #0
}
    d6e0:	0018      	movs	r0, r3
    d6e2:	46bd      	mov	sp, r7
    d6e4:	b004      	add	sp, #16
    d6e6:	bd80      	pop	{r7, pc}
    d6e8:	0000d655 	.word	0x0000d655

0000d6ec <spi_read>:
 * \retval STATUS_ERR_OVERFLOW  If the data is overflown
 */
static inline enum status_code spi_read(
		struct spi_module *const module,
		uint16_t *rx_data)
{
    d6ec:	b580      	push	{r7, lr}
    d6ee:	b084      	sub	sp, #16
    d6f0:	af00      	add	r7, sp, #0
    d6f2:	6078      	str	r0, [r7, #4]
    d6f4:	6039      	str	r1, [r7, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    d6f6:	687b      	ldr	r3, [r7, #4]
    d6f8:	681b      	ldr	r3, [r3, #0]
    d6fa:	60bb      	str	r3, [r7, #8]

	/* Check if data is ready to be read */
	if (!spi_is_ready_to_read(module)) {
    d6fc:	687b      	ldr	r3, [r7, #4]
    d6fe:	0018      	movs	r0, r3
    d700:	4b1b      	ldr	r3, [pc, #108]	; (d770 <spi_read+0x84>)
    d702:	4798      	blx	r3
    d704:	0003      	movs	r3, r0
    d706:	001a      	movs	r2, r3
    d708:	2301      	movs	r3, #1
    d70a:	4053      	eors	r3, r2
    d70c:	b2db      	uxtb	r3, r3
    d70e:	2b00      	cmp	r3, #0
    d710:	d001      	beq.n	d716 <spi_read+0x2a>
		/* No data has been received, return */
		return STATUS_ERR_IO;
    d712:	2310      	movs	r3, #16
    d714:	e027      	b.n	d766 <spi_read+0x7a>
	}

	/* Return value */
	enum status_code retval = STATUS_OK;
    d716:	230f      	movs	r3, #15
    d718:	18fb      	adds	r3, r7, r3
    d71a:	2200      	movs	r2, #0
    d71c:	701a      	strb	r2, [r3, #0]

	/* Check if data is overflown */
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    d71e:	68bb      	ldr	r3, [r7, #8]
    d720:	8b5b      	ldrh	r3, [r3, #26]
    d722:	b29b      	uxth	r3, r3
    d724:	001a      	movs	r2, r3
    d726:	2304      	movs	r3, #4
    d728:	4013      	ands	r3, r2
    d72a:	d006      	beq.n	d73a <spi_read+0x4e>
		retval = STATUS_ERR_OVERFLOW;
    d72c:	230f      	movs	r3, #15
    d72e:	18fb      	adds	r3, r7, r3
    d730:	221e      	movs	r2, #30
    d732:	701a      	strb	r2, [r3, #0]
		/* Clear overflow flag */
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    d734:	68bb      	ldr	r3, [r7, #8]
    d736:	2204      	movs	r2, #4
    d738:	835a      	strh	r2, [r3, #26]
	}

	/* Read the character from the DATA register */
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    d73a:	687b      	ldr	r3, [r7, #4]
    d73c:	799b      	ldrb	r3, [r3, #6]
    d73e:	2b01      	cmp	r3, #1
    d740:	d108      	bne.n	d754 <spi_read+0x68>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    d742:	68bb      	ldr	r3, [r7, #8]
    d744:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    d746:	b29b      	uxth	r3, r3
    d748:	05db      	lsls	r3, r3, #23
    d74a:	0ddb      	lsrs	r3, r3, #23
    d74c:	b29a      	uxth	r2, r3
    d74e:	683b      	ldr	r3, [r7, #0]
    d750:	801a      	strh	r2, [r3, #0]
    d752:	e005      	b.n	d760 <spi_read+0x74>
	} else {
		*rx_data = (uint8_t)spi_module->DATA.reg;
    d754:	68bb      	ldr	r3, [r7, #8]
    d756:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    d758:	b2db      	uxtb	r3, r3
    d75a:	b29a      	uxth	r2, r3
    d75c:	683b      	ldr	r3, [r7, #0]
    d75e:	801a      	strh	r2, [r3, #0]
	}

	return retval;
    d760:	230f      	movs	r3, #15
    d762:	18fb      	adds	r3, r7, r3
    d764:	781b      	ldrb	r3, [r3, #0]
}
    d766:	0018      	movs	r0, r3
    d768:	46bd      	mov	sp, r7
    d76a:	b004      	add	sp, #16
    d76c:	bd80      	pop	{r7, pc}
    d76e:	46c0      	nop			; (mov r8, r8)
    d770:	0000d67d 	.word	0x0000d67d

0000d774 <spi_rw>:

struct spi_module master;
struct spi_slave_inst slave_inst;

static sint8 spi_rw(uint8* pu8Mosi, uint8* pu8Miso, uint16 u16Sz)
{
    d774:	b580      	push	{r7, lr}
    d776:	b086      	sub	sp, #24
    d778:	af00      	add	r7, sp, #0
    d77a:	60f8      	str	r0, [r7, #12]
    d77c:	60b9      	str	r1, [r7, #8]
    d77e:	1dbb      	adds	r3, r7, #6
    d780:	801a      	strh	r2, [r3, #0]
	uint8 u8Dummy = 0xFF;
    d782:	2313      	movs	r3, #19
    d784:	18fb      	adds	r3, r7, r3
    d786:	22ff      	movs	r2, #255	; 0xff
    d788:	701a      	strb	r2, [r3, #0]
	uint8 u8SkipMosi = 0, u8SkipMiso = 0;
    d78a:	2317      	movs	r3, #23
    d78c:	18fb      	adds	r3, r7, r3
    d78e:	2200      	movs	r2, #0
    d790:	701a      	strb	r2, [r3, #0]
    d792:	2316      	movs	r3, #22
    d794:	18fb      	adds	r3, r7, r3
    d796:	2200      	movs	r2, #0
    d798:	701a      	strb	r2, [r3, #0]
	uint16_t txd_data = 0;
    d79a:	2314      	movs	r3, #20
    d79c:	18fb      	adds	r3, r7, r3
    d79e:	2200      	movs	r2, #0
    d7a0:	801a      	strh	r2, [r3, #0]
	uint16_t rxd_data = 0;
    d7a2:	2310      	movs	r3, #16
    d7a4:	18fb      	adds	r3, r7, r3
    d7a6:	2200      	movs	r2, #0
    d7a8:	801a      	strh	r2, [r3, #0]

	if(((pu8Miso == NULL) && (pu8Mosi == NULL)) ||(u16Sz == 0)) {
    d7aa:	68bb      	ldr	r3, [r7, #8]
    d7ac:	2b00      	cmp	r3, #0
    d7ae:	d102      	bne.n	d7b6 <spi_rw+0x42>
    d7b0:	68fb      	ldr	r3, [r7, #12]
    d7b2:	2b00      	cmp	r3, #0
    d7b4:	d003      	beq.n	d7be <spi_rw+0x4a>
    d7b6:	1dbb      	adds	r3, r7, #6
    d7b8:	881b      	ldrh	r3, [r3, #0]
    d7ba:	2b00      	cmp	r3, #0
    d7bc:	d102      	bne.n	d7c4 <spi_rw+0x50>
		return M2M_ERR_INVALID_ARG;
    d7be:	230f      	movs	r3, #15
    d7c0:	425b      	negs	r3, r3
    d7c2:	e07e      	b.n	d8c2 <spi_rw+0x14e>
	}

	if (pu8Mosi == NULL) {
    d7c4:	68fb      	ldr	r3, [r7, #12]
    d7c6:	2b00      	cmp	r3, #0
    d7c8:	d106      	bne.n	d7d8 <spi_rw+0x64>
		pu8Mosi = &u8Dummy;
    d7ca:	2313      	movs	r3, #19
    d7cc:	18fb      	adds	r3, r7, r3
    d7ce:	60fb      	str	r3, [r7, #12]
		u8SkipMosi = 1;
    d7d0:	2317      	movs	r3, #23
    d7d2:	18fb      	adds	r3, r7, r3
    d7d4:	2201      	movs	r2, #1
    d7d6:	701a      	strb	r2, [r3, #0]
	}
	if(pu8Miso == NULL) {
    d7d8:	68bb      	ldr	r3, [r7, #8]
    d7da:	2b00      	cmp	r3, #0
    d7dc:	d106      	bne.n	d7ec <spi_rw+0x78>
		pu8Miso = &u8Dummy;
    d7de:	2313      	movs	r3, #19
    d7e0:	18fb      	adds	r3, r7, r3
    d7e2:	60bb      	str	r3, [r7, #8]
		u8SkipMiso = 1;
    d7e4:	2316      	movs	r3, #22
    d7e6:	18fb      	adds	r3, r7, r3
    d7e8:	2201      	movs	r2, #1
    d7ea:	701a      	strb	r2, [r3, #0]
	}

	spi_select_slave(&master, &slave_inst, true);
    d7ec:	4937      	ldr	r1, [pc, #220]	; (d8cc <spi_rw+0x158>)
    d7ee:	4b38      	ldr	r3, [pc, #224]	; (d8d0 <spi_rw+0x15c>)
    d7f0:	2201      	movs	r2, #1
    d7f2:	0018      	movs	r0, r3
    d7f4:	4b37      	ldr	r3, [pc, #220]	; (d8d4 <spi_rw+0x160>)
    d7f6:	4798      	blx	r3

	while (u16Sz) {
    d7f8:	e04c      	b.n	d894 <spi_rw+0x120>
		txd_data = *pu8Mosi;
    d7fa:	68fb      	ldr	r3, [r7, #12]
    d7fc:	781a      	ldrb	r2, [r3, #0]
    d7fe:	2314      	movs	r3, #20
    d800:	18fb      	adds	r3, r7, r3
    d802:	801a      	strh	r2, [r3, #0]
		while (!spi_is_ready_to_write(&master))
    d804:	46c0      	nop			; (mov r8, r8)
    d806:	4b32      	ldr	r3, [pc, #200]	; (d8d0 <spi_rw+0x15c>)
    d808:	0018      	movs	r0, r3
    d80a:	4b33      	ldr	r3, [pc, #204]	; (d8d8 <spi_rw+0x164>)
    d80c:	4798      	blx	r3
    d80e:	0003      	movs	r3, r0
    d810:	001a      	movs	r2, r3
    d812:	2301      	movs	r3, #1
    d814:	4053      	eors	r3, r2
    d816:	b2db      	uxtb	r3, r3
    d818:	2b00      	cmp	r3, #0
    d81a:	d1f4      	bne.n	d806 <spi_rw+0x92>
			;
		while(spi_write(&master, txd_data) != STATUS_OK)
    d81c:	46c0      	nop			; (mov r8, r8)
    d81e:	2314      	movs	r3, #20
    d820:	18fb      	adds	r3, r7, r3
    d822:	881a      	ldrh	r2, [r3, #0]
    d824:	4b2a      	ldr	r3, [pc, #168]	; (d8d0 <spi_rw+0x15c>)
    d826:	0011      	movs	r1, r2
    d828:	0018      	movs	r0, r3
    d82a:	4b2c      	ldr	r3, [pc, #176]	; (d8dc <spi_rw+0x168>)
    d82c:	4798      	blx	r3
    d82e:	1e03      	subs	r3, r0, #0
    d830:	d1f5      	bne.n	d81e <spi_rw+0xaa>
			;

		/* Read SPI master data register. */
		while (!spi_is_ready_to_read(&master))
    d832:	46c0      	nop			; (mov r8, r8)
    d834:	4b26      	ldr	r3, [pc, #152]	; (d8d0 <spi_rw+0x15c>)
    d836:	0018      	movs	r0, r3
    d838:	4b29      	ldr	r3, [pc, #164]	; (d8e0 <spi_rw+0x16c>)
    d83a:	4798      	blx	r3
    d83c:	0003      	movs	r3, r0
    d83e:	001a      	movs	r2, r3
    d840:	2301      	movs	r3, #1
    d842:	4053      	eors	r3, r2
    d844:	b2db      	uxtb	r3, r3
    d846:	2b00      	cmp	r3, #0
    d848:	d1f4      	bne.n	d834 <spi_rw+0xc0>
			;
		while (spi_read(&master, &rxd_data) != STATUS_OK)
    d84a:	46c0      	nop			; (mov r8, r8)
    d84c:	2310      	movs	r3, #16
    d84e:	18fa      	adds	r2, r7, r3
    d850:	4b1f      	ldr	r3, [pc, #124]	; (d8d0 <spi_rw+0x15c>)
    d852:	0011      	movs	r1, r2
    d854:	0018      	movs	r0, r3
    d856:	4b23      	ldr	r3, [pc, #140]	; (d8e4 <spi_rw+0x170>)
    d858:	4798      	blx	r3
    d85a:	1e03      	subs	r3, r0, #0
    d85c:	d1f6      	bne.n	d84c <spi_rw+0xd8>
			;
		*pu8Miso = rxd_data;
    d85e:	2310      	movs	r3, #16
    d860:	18fb      	adds	r3, r7, r3
    d862:	881b      	ldrh	r3, [r3, #0]
    d864:	b2da      	uxtb	r2, r3
    d866:	68bb      	ldr	r3, [r7, #8]
    d868:	701a      	strb	r2, [r3, #0]
			
		u16Sz--;
    d86a:	1dbb      	adds	r3, r7, #6
    d86c:	881a      	ldrh	r2, [r3, #0]
    d86e:	1dbb      	adds	r3, r7, #6
    d870:	3a01      	subs	r2, #1
    d872:	801a      	strh	r2, [r3, #0]
		if (!u8SkipMiso)
    d874:	2316      	movs	r3, #22
    d876:	18fb      	adds	r3, r7, r3
    d878:	781b      	ldrb	r3, [r3, #0]
    d87a:	2b00      	cmp	r3, #0
    d87c:	d102      	bne.n	d884 <spi_rw+0x110>
			pu8Miso++;
    d87e:	68bb      	ldr	r3, [r7, #8]
    d880:	3301      	adds	r3, #1
    d882:	60bb      	str	r3, [r7, #8]
		if (!u8SkipMosi)
    d884:	2317      	movs	r3, #23
    d886:	18fb      	adds	r3, r7, r3
    d888:	781b      	ldrb	r3, [r3, #0]
    d88a:	2b00      	cmp	r3, #0
    d88c:	d102      	bne.n	d894 <spi_rw+0x120>
			pu8Mosi++;
    d88e:	68fb      	ldr	r3, [r7, #12]
    d890:	3301      	adds	r3, #1
    d892:	60fb      	str	r3, [r7, #12]
	while (u16Sz) {
    d894:	1dbb      	adds	r3, r7, #6
    d896:	881b      	ldrh	r3, [r3, #0]
    d898:	2b00      	cmp	r3, #0
    d89a:	d1ae      	bne.n	d7fa <spi_rw+0x86>
	}

	while (!spi_is_write_complete(&master))
    d89c:	46c0      	nop			; (mov r8, r8)
    d89e:	4b0c      	ldr	r3, [pc, #48]	; (d8d0 <spi_rw+0x15c>)
    d8a0:	0018      	movs	r0, r3
    d8a2:	4b11      	ldr	r3, [pc, #68]	; (d8e8 <spi_rw+0x174>)
    d8a4:	4798      	blx	r3
    d8a6:	0003      	movs	r3, r0
    d8a8:	001a      	movs	r2, r3
    d8aa:	2301      	movs	r3, #1
    d8ac:	4053      	eors	r3, r2
    d8ae:	b2db      	uxtb	r3, r3
    d8b0:	2b00      	cmp	r3, #0
    d8b2:	d1f4      	bne.n	d89e <spi_rw+0x12a>
		;

	spi_select_slave(&master, &slave_inst, false);
    d8b4:	4905      	ldr	r1, [pc, #20]	; (d8cc <spi_rw+0x158>)
    d8b6:	4b06      	ldr	r3, [pc, #24]	; (d8d0 <spi_rw+0x15c>)
    d8b8:	2200      	movs	r2, #0
    d8ba:	0018      	movs	r0, r3
    d8bc:	4b05      	ldr	r3, [pc, #20]	; (d8d4 <spi_rw+0x160>)
    d8be:	4798      	blx	r3

	return M2M_SUCCESS;
    d8c0:	2300      	movs	r3, #0
}
    d8c2:	0018      	movs	r0, r3
    d8c4:	46bd      	mov	sp, r7
    d8c6:	b006      	add	sp, #24
    d8c8:	bd80      	pop	{r7, pc}
    d8ca:	46c0      	nop			; (mov r8, r8)
    d8cc:	20005474 	.word	0x20005474
    d8d0:	20005478 	.word	0x20005478
    d8d4:	00015021 	.word	0x00015021
    d8d8:	0000d655 	.word	0x0000d655
    d8dc:	0000d6a5 	.word	0x0000d6a5
    d8e0:	0000d67d 	.word	0x0000d67d
    d8e4:	0000d6ed 	.word	0x0000d6ed
    d8e8:	0000d62d 	.word	0x0000d62d

0000d8ec <nm_bus_init>:
*	@fn		nm_bus_init
*	@brief	Initialize the bus wrapper
*	@return	M2M_SUCCESS in case of success and M2M_ERR_BUS_FAIL in case of failure
*/
sint8 nm_bus_init(void *pvinit)
{
    d8ec:	b580      	push	{r7, lr}
    d8ee:	b092      	sub	sp, #72	; 0x48
    d8f0:	af00      	add	r7, sp, #0
    d8f2:	6078      	str	r0, [r7, #4]
	sint8 result = M2M_SUCCESS;
    d8f4:	2347      	movs	r3, #71	; 0x47
    d8f6:	18fb      	adds	r3, r7, r3
    d8f8:	2200      	movs	r2, #0
    d8fa:	701a      	strb	r2, [r3, #0]
	struct spi_config config;
	struct spi_slave_inst_config slave_config;

	/* Select SPI slave CS pin. */
	/* This step will set the CS high */
	spi_slave_inst_get_config_defaults(&slave_config);
    d8fc:	2308      	movs	r3, #8
    d8fe:	18fb      	adds	r3, r7, r3
    d900:	0018      	movs	r0, r3
    d902:	4b26      	ldr	r3, [pc, #152]	; (d99c <nm_bus_init+0xb0>)
    d904:	4798      	blx	r3
	slave_config.ss_pin = CONF_WINC_SPI_CS_PIN;
    d906:	2308      	movs	r3, #8
    d908:	18fb      	adds	r3, r7, r3
    d90a:	220e      	movs	r2, #14
    d90c:	701a      	strb	r2, [r3, #0]
	spi_attach_slave(&slave_inst, &slave_config);
    d90e:	2308      	movs	r3, #8
    d910:	18fa      	adds	r2, r7, r3
    d912:	4b23      	ldr	r3, [pc, #140]	; (d9a0 <nm_bus_init+0xb4>)
    d914:	0011      	movs	r1, r2
    d916:	0018      	movs	r0, r3
    d918:	4b22      	ldr	r3, [pc, #136]	; (d9a4 <nm_bus_init+0xb8>)
    d91a:	4798      	blx	r3

	/* Configure the SPI master. */
	spi_get_config_defaults(&config);
    d91c:	230c      	movs	r3, #12
    d91e:	18fb      	adds	r3, r7, r3
    d920:	0018      	movs	r0, r3
    d922:	4b21      	ldr	r3, [pc, #132]	; (d9a8 <nm_bus_init+0xbc>)
    d924:	4798      	blx	r3
	config.mux_setting = CONF_WINC_SPI_SERCOM_MUX;
    d926:	230c      	movs	r3, #12
    d928:	18fb      	adds	r3, r7, r3
    d92a:	22c0      	movs	r2, #192	; 0xc0
    d92c:	0392      	lsls	r2, r2, #14
    d92e:	60da      	str	r2, [r3, #12]
	config.pinmux_pad0 = CONF_WINC_SPI_PINMUX_PAD0;
    d930:	230c      	movs	r3, #12
    d932:	18fb      	adds	r3, r7, r3
    d934:	4a1d      	ldr	r2, [pc, #116]	; (d9ac <nm_bus_init+0xc0>)
    d936:	629a      	str	r2, [r3, #40]	; 0x28
	config.pinmux_pad1 = CONF_WINC_SPI_PINMUX_PAD1;
    d938:	230c      	movs	r3, #12
    d93a:	18fb      	adds	r3, r7, r3
    d93c:	4a1c      	ldr	r2, [pc, #112]	; (d9b0 <nm_bus_init+0xc4>)
    d93e:	62da      	str	r2, [r3, #44]	; 0x2c
	config.pinmux_pad2 = CONF_WINC_SPI_PINMUX_PAD2;
    d940:	230c      	movs	r3, #12
    d942:	18fb      	adds	r3, r7, r3
    d944:	2201      	movs	r2, #1
    d946:	4252      	negs	r2, r2
    d948:	631a      	str	r2, [r3, #48]	; 0x30
	config.pinmux_pad3 = CONF_WINC_SPI_PINMUX_PAD3;
    d94a:	230c      	movs	r3, #12
    d94c:	18fb      	adds	r3, r7, r3
    d94e:	4a19      	ldr	r2, [pc, #100]	; (d9b4 <nm_bus_init+0xc8>)
    d950:	635a      	str	r2, [r3, #52]	; 0x34
	config.master_slave_select_enable = false;
    d952:	230c      	movs	r3, #12
    d954:	18fb      	adds	r3, r7, r3
    d956:	2200      	movs	r2, #0
    d958:	751a      	strb	r2, [r3, #20]
	
	config.mode_specific.master.baudrate = CONF_WINC_SPI_CLOCK;
    d95a:	230c      	movs	r3, #12
    d95c:	18fb      	adds	r3, r7, r3
    d95e:	4a16      	ldr	r2, [pc, #88]	; (d9b8 <nm_bus_init+0xcc>)
    d960:	619a      	str	r2, [r3, #24]
	if (spi_init(&master, CONF_WINC_SPI_MODULE, &config) != STATUS_OK) {
    d962:	230c      	movs	r3, #12
    d964:	18fa      	adds	r2, r7, r3
    d966:	4915      	ldr	r1, [pc, #84]	; (d9bc <nm_bus_init+0xd0>)
    d968:	4b15      	ldr	r3, [pc, #84]	; (d9c0 <nm_bus_init+0xd4>)
    d96a:	0018      	movs	r0, r3
    d96c:	4b15      	ldr	r3, [pc, #84]	; (d9c4 <nm_bus_init+0xd8>)
    d96e:	4798      	blx	r3
    d970:	1e03      	subs	r3, r0, #0
    d972:	d002      	beq.n	d97a <nm_bus_init+0x8e>
		return M2M_ERR_BUS_FAIL;
    d974:	2306      	movs	r3, #6
    d976:	425b      	negs	r3, r3
    d978:	e00c      	b.n	d994 <nm_bus_init+0xa8>
	}

	/* Enable the SPI master. */
	spi_enable(&master);
    d97a:	4b11      	ldr	r3, [pc, #68]	; (d9c0 <nm_bus_init+0xd4>)
    d97c:	0018      	movs	r0, r3
    d97e:	4b12      	ldr	r3, [pc, #72]	; (d9c8 <nm_bus_init+0xdc>)
    d980:	4798      	blx	r3

	nm_bsp_reset();
    d982:	4b12      	ldr	r3, [pc, #72]	; (d9cc <nm_bus_init+0xe0>)
    d984:	4798      	blx	r3
	nm_bsp_sleep(1);
    d986:	2001      	movs	r0, #1
    d988:	4b11      	ldr	r3, [pc, #68]	; (d9d0 <nm_bus_init+0xe4>)
    d98a:	4798      	blx	r3
#endif
	return result;
    d98c:	2347      	movs	r3, #71	; 0x47
    d98e:	18fb      	adds	r3, r7, r3
    d990:	781b      	ldrb	r3, [r3, #0]
    d992:	b25b      	sxtb	r3, r3
}
    d994:	0018      	movs	r0, r3
    d996:	46bd      	mov	sp, r7
    d998:	b012      	add	sp, #72	; 0x48
    d99a:	bd80      	pop	{r7, pc}
    d99c:	0000d4f9 	.word	0x0000d4f9
    d9a0:	20005474 	.word	0x20005474
    d9a4:	0000d51d 	.word	0x0000d51d
    d9a8:	0000d475 	.word	0x0000d475
    d9ac:	000c0002 	.word	0x000c0002
    d9b0:	000d0002 	.word	0x000d0002
    d9b4:	000f0002 	.word	0x000f0002
    d9b8:	00124f80 	.word	0x00124f80
    d9bc:	42001000 	.word	0x42001000
    d9c0:	20005478 	.word	0x20005478
    d9c4:	00014d5d 	.word	0x00014d5d
    d9c8:	0000d581 	.word	0x0000d581
    d9cc:	0000d1f1 	.word	0x0000d1f1
    d9d0:	0000d231 	.word	0x0000d231

0000d9d4 <nm_bus_ioctl>:
*					Arbitrary parameter depenging on IOCTL
*	@return	M2M_SUCCESS in case of success and M2M_ERR_BUS_FAIL in case of failure
*	@note	For SPI only, it's important to be able to send/receive at the same time
*/
sint8 nm_bus_ioctl(uint8 u8Cmd, void* pvParameter)
{
    d9d4:	b590      	push	{r4, r7, lr}
    d9d6:	b085      	sub	sp, #20
    d9d8:	af00      	add	r7, sp, #0
    d9da:	0002      	movs	r2, r0
    d9dc:	6039      	str	r1, [r7, #0]
    d9de:	1dfb      	adds	r3, r7, #7
    d9e0:	701a      	strb	r2, [r3, #0]
	sint8 s8Ret = 0;
    d9e2:	230f      	movs	r3, #15
    d9e4:	18fb      	adds	r3, r7, r3
    d9e6:	2200      	movs	r2, #0
    d9e8:	701a      	strb	r2, [r3, #0]
	switch(u8Cmd)
    d9ea:	1dfb      	adds	r3, r7, #7
    d9ec:	781b      	ldrb	r3, [r3, #0]
    d9ee:	2b03      	cmp	r3, #3
    d9f0:	d10f      	bne.n	da12 <nm_bus_ioctl+0x3e>
			s8Ret = nm_i2c_write_special(pstrParam->pu8Buf1, pstrParam->u16Sz1, pstrParam->pu8Buf2, pstrParam->u16Sz2);
		}
		break;
#elif defined CONF_WINC_USE_SPI
		case NM_BUS_IOCTL_RW: {
			tstrNmSpiRw *pstrParam = (tstrNmSpiRw *)pvParameter;
    d9f2:	683b      	ldr	r3, [r7, #0]
    d9f4:	60bb      	str	r3, [r7, #8]
			s8Ret = spi_rw(pstrParam->pu8InBuf, pstrParam->pu8OutBuf, pstrParam->u16Sz);
    d9f6:	68bb      	ldr	r3, [r7, #8]
    d9f8:	6818      	ldr	r0, [r3, #0]
    d9fa:	68bb      	ldr	r3, [r7, #8]
    d9fc:	6859      	ldr	r1, [r3, #4]
    d9fe:	68bb      	ldr	r3, [r7, #8]
    da00:	891b      	ldrh	r3, [r3, #8]
    da02:	220f      	movs	r2, #15
    da04:	18bc      	adds	r4, r7, r2
    da06:	001a      	movs	r2, r3
    da08:	4b10      	ldr	r3, [pc, #64]	; (da4c <nm_bus_ioctl+0x78>)
    da0a:	4798      	blx	r3
    da0c:	0003      	movs	r3, r0
    da0e:	7023      	strb	r3, [r4, #0]
		}
		break;
    da10:	e013      	b.n	da3a <nm_bus_ioctl+0x66>
#endif
		default:
			s8Ret = -1;
    da12:	230f      	movs	r3, #15
    da14:	18fb      	adds	r3, r7, r3
    da16:	22ff      	movs	r2, #255	; 0xff
    da18:	701a      	strb	r2, [r3, #0]
			M2M_ERR("invalide ioclt cmd\n");
    da1a:	2383      	movs	r3, #131	; 0x83
    da1c:	005a      	lsls	r2, r3, #1
    da1e:	490c      	ldr	r1, [pc, #48]	; (da50 <nm_bus_ioctl+0x7c>)
    da20:	4b0c      	ldr	r3, [pc, #48]	; (da54 <nm_bus_ioctl+0x80>)
    da22:	0018      	movs	r0, r3
    da24:	4b0c      	ldr	r3, [pc, #48]	; (da58 <nm_bus_ioctl+0x84>)
    da26:	4798      	blx	r3
    da28:	4b0c      	ldr	r3, [pc, #48]	; (da5c <nm_bus_ioctl+0x88>)
    da2a:	0018      	movs	r0, r3
    da2c:	4b0a      	ldr	r3, [pc, #40]	; (da58 <nm_bus_ioctl+0x84>)
    da2e:	4798      	blx	r3
    da30:	4b0b      	ldr	r3, [pc, #44]	; (da60 <nm_bus_ioctl+0x8c>)
    da32:	0018      	movs	r0, r3
    da34:	4b08      	ldr	r3, [pc, #32]	; (da58 <nm_bus_ioctl+0x84>)
    da36:	4798      	blx	r3
			break;
    da38:	46c0      	nop			; (mov r8, r8)
	}

	return s8Ret;
    da3a:	230f      	movs	r3, #15
    da3c:	18fb      	adds	r3, r7, r3
    da3e:	781b      	ldrb	r3, [r3, #0]
    da40:	b25b      	sxtb	r3, r3
}
    da42:	0018      	movs	r0, r3
    da44:	46bd      	mov	sp, r7
    da46:	b005      	add	sp, #20
    da48:	bd90      	pop	{r4, r7, pc}
    da4a:	46c0      	nop			; (mov r8, r8)
    da4c:	0000d775 	.word	0x0000d775
    da50:	00024e74 	.word	0x00024e74
    da54:	00024e48 	.word	0x00024e48
    da58:	0000addd 	.word	0x0000addd
    da5c:	00024e5c 	.word	0x00024e5c
    da60:	00024e70 	.word	0x00024e70

0000da64 <nm_bus_deinit>:
/*
*	@fn		nm_bus_deinit
*	@brief	De-initialize the bus wrapper
*/
sint8 nm_bus_deinit(void)
{
    da64:	b580      	push	{r7, lr}
    da66:	b082      	sub	sp, #8
    da68:	af00      	add	r7, sp, #0
	sint8 result = M2M_SUCCESS;
    da6a:	1dfb      	adds	r3, r7, #7
    da6c:	2200      	movs	r2, #0
    da6e:	701a      	strb	r2, [r3, #0]
	struct port_config pin_conf;
		
	port_get_config_defaults(&pin_conf);
    da70:	1d3b      	adds	r3, r7, #4
    da72:	0018      	movs	r0, r3
    da74:	4b13      	ldr	r3, [pc, #76]	; (dac4 <nm_bus_deinit+0x60>)
    da76:	4798      	blx	r3
	/* Configure control pins as input no pull up. */
	pin_conf.direction  = PORT_PIN_DIR_INPUT;
    da78:	1d3b      	adds	r3, r7, #4
    da7a:	2200      	movs	r2, #0
    da7c:	701a      	strb	r2, [r3, #0]
	pin_conf.input_pull = PORT_PIN_PULL_NONE;
    da7e:	1d3b      	adds	r3, r7, #4
    da80:	2200      	movs	r2, #0
    da82:	705a      	strb	r2, [r3, #1]
	i2c_master_disable(&i2c_master_instance);
	port_pin_set_config(CONF_WINC_I2C_SCL, &pin_conf);
	port_pin_set_config(CONF_WINC_I2C_SDA, &pin_conf);
#endif /* CONF_WINC_USE_I2C */
#ifdef CONF_WINC_USE_SPI
	spi_disable(&master);
    da84:	4b10      	ldr	r3, [pc, #64]	; (dac8 <nm_bus_deinit+0x64>)
    da86:	0018      	movs	r0, r3
    da88:	4b10      	ldr	r3, [pc, #64]	; (dacc <nm_bus_deinit+0x68>)
    da8a:	4798      	blx	r3
	port_pin_set_config(CONF_WINC_SPI_MOSI, &pin_conf);
    da8c:	1d3b      	adds	r3, r7, #4
    da8e:	0019      	movs	r1, r3
    da90:	200c      	movs	r0, #12
    da92:	4b0f      	ldr	r3, [pc, #60]	; (dad0 <nm_bus_deinit+0x6c>)
    da94:	4798      	blx	r3
	port_pin_set_config(CONF_WINC_SPI_MISO, &pin_conf);
    da96:	1d3b      	adds	r3, r7, #4
    da98:	0019      	movs	r1, r3
    da9a:	200f      	movs	r0, #15
    da9c:	4b0c      	ldr	r3, [pc, #48]	; (dad0 <nm_bus_deinit+0x6c>)
    da9e:	4798      	blx	r3
	port_pin_set_config(CONF_WINC_SPI_SCK,  &pin_conf);
    daa0:	1d3b      	adds	r3, r7, #4
    daa2:	0019      	movs	r1, r3
    daa4:	200d      	movs	r0, #13
    daa6:	4b0a      	ldr	r3, [pc, #40]	; (dad0 <nm_bus_deinit+0x6c>)
    daa8:	4798      	blx	r3
	port_pin_set_config(CONF_WINC_SPI_SS,   &pin_conf);
    daaa:	1d3b      	adds	r3, r7, #4
    daac:	0019      	movs	r1, r3
    daae:	200e      	movs	r0, #14
    dab0:	4b07      	ldr	r3, [pc, #28]	; (dad0 <nm_bus_deinit+0x6c>)
    dab2:	4798      	blx	r3
	//port_pin_set_output_level(CONF_WINC_SPI_MOSI, false);
	//port_pin_set_output_level(CONF_WINC_SPI_MISO, false);
	//port_pin_set_output_level(CONF_WINC_SPI_SCK,  false);
	//port_pin_set_output_level(CONF_WINC_SPI_SS,   false);
#endif /* CONF_WINC_USE_SPI */
	return result;
    dab4:	1dfb      	adds	r3, r7, #7
    dab6:	781b      	ldrb	r3, [r3, #0]
    dab8:	b25b      	sxtb	r3, r3
}
    daba:	0018      	movs	r0, r3
    dabc:	46bd      	mov	sp, r7
    dabe:	b002      	add	sp, #8
    dac0:	bd80      	pop	{r7, pc}
    dac2:	46c0      	nop			; (mov r8, r8)
    dac4:	0000d3dd 	.word	0x0000d3dd
    dac8:	20005478 	.word	0x20005478
    dacc:	0000d5d1 	.word	0x0000d5d1
    dad0:	000138dd 	.word	0x000138dd

0000dad4 <m2m_memcpy>:
 *
 */
#include "common/include/nm_common.h"

void m2m_memcpy(uint8* pDst,uint8* pSrc,uint32 sz)
{
    dad4:	b580      	push	{r7, lr}
    dad6:	b084      	sub	sp, #16
    dad8:	af00      	add	r7, sp, #0
    dada:	60f8      	str	r0, [r7, #12]
    dadc:	60b9      	str	r1, [r7, #8]
    dade:	607a      	str	r2, [r7, #4]
	if(sz == 0) return;
    dae0:	687b      	ldr	r3, [r7, #4]
    dae2:	2b00      	cmp	r3, #0
    dae4:	d010      	beq.n	db08 <m2m_memcpy+0x34>
	do
	{
		*pDst = *pSrc;
    dae6:	68bb      	ldr	r3, [r7, #8]
    dae8:	781a      	ldrb	r2, [r3, #0]
    daea:	68fb      	ldr	r3, [r7, #12]
    daec:	701a      	strb	r2, [r3, #0]
		pDst++;
    daee:	68fb      	ldr	r3, [r7, #12]
    daf0:	3301      	adds	r3, #1
    daf2:	60fb      	str	r3, [r7, #12]
		pSrc++;
    daf4:	68bb      	ldr	r3, [r7, #8]
    daf6:	3301      	adds	r3, #1
    daf8:	60bb      	str	r3, [r7, #8]
	}while(--sz);
    dafa:	687b      	ldr	r3, [r7, #4]
    dafc:	3b01      	subs	r3, #1
    dafe:	607b      	str	r3, [r7, #4]
    db00:	687b      	ldr	r3, [r7, #4]
    db02:	2b00      	cmp	r3, #0
    db04:	d1ef      	bne.n	dae6 <m2m_memcpy+0x12>
    db06:	e000      	b.n	db0a <m2m_memcpy+0x36>
	if(sz == 0) return;
    db08:	46c0      	nop			; (mov r8, r8)
}
    db0a:	46bd      	mov	sp, r7
    db0c:	b004      	add	sp, #16
    db0e:	bd80      	pop	{r7, pc}

0000db10 <m2m_memset>:

	return cs;
}

void m2m_memset(uint8* pBuf,uint8 val,uint32 sz)
{
    db10:	b580      	push	{r7, lr}
    db12:	b084      	sub	sp, #16
    db14:	af00      	add	r7, sp, #0
    db16:	60f8      	str	r0, [r7, #12]
    db18:	607a      	str	r2, [r7, #4]
    db1a:	230b      	movs	r3, #11
    db1c:	18fb      	adds	r3, r7, r3
    db1e:	1c0a      	adds	r2, r1, #0
    db20:	701a      	strb	r2, [r3, #0]
	if(sz == 0) return;
    db22:	687b      	ldr	r3, [r7, #4]
    db24:	2b00      	cmp	r3, #0
    db26:	d00e      	beq.n	db46 <m2m_memset+0x36>
	do
	{
		*pBuf = val;
    db28:	68fb      	ldr	r3, [r7, #12]
    db2a:	220b      	movs	r2, #11
    db2c:	18ba      	adds	r2, r7, r2
    db2e:	7812      	ldrb	r2, [r2, #0]
    db30:	701a      	strb	r2, [r3, #0]
		pBuf++;
    db32:	68fb      	ldr	r3, [r7, #12]
    db34:	3301      	adds	r3, #1
    db36:	60fb      	str	r3, [r7, #12]
	}while(--sz);
    db38:	687b      	ldr	r3, [r7, #4]
    db3a:	3b01      	subs	r3, #1
    db3c:	607b      	str	r3, [r7, #4]
    db3e:	687b      	ldr	r3, [r7, #4]
    db40:	2b00      	cmp	r3, #0
    db42:	d1f1      	bne.n	db28 <m2m_memset+0x18>
    db44:	e000      	b.n	db48 <m2m_memset+0x38>
	if(sz == 0) return;
    db46:	46c0      	nop			; (mov r8, r8)
}
    db48:	46bd      	mov	sp, r7
    db4a:	b004      	add	sp, #16
    db4c:	bd80      	pop	{r7, pc}

0000db4e <m2m_strlen>:

uint16 m2m_strlen(uint8 * pcStr)
{
    db4e:	b580      	push	{r7, lr}
    db50:	b084      	sub	sp, #16
    db52:	af00      	add	r7, sp, #0
    db54:	6078      	str	r0, [r7, #4]
	uint16	u16StrLen = 0;
    db56:	230e      	movs	r3, #14
    db58:	18fb      	adds	r3, r7, r3
    db5a:	2200      	movs	r2, #0
    db5c:	801a      	strh	r2, [r3, #0]
	while(*pcStr)
    db5e:	e009      	b.n	db74 <m2m_strlen+0x26>
	{
		u16StrLen ++;
    db60:	230e      	movs	r3, #14
    db62:	18fb      	adds	r3, r7, r3
    db64:	881a      	ldrh	r2, [r3, #0]
    db66:	230e      	movs	r3, #14
    db68:	18fb      	adds	r3, r7, r3
    db6a:	3201      	adds	r2, #1
    db6c:	801a      	strh	r2, [r3, #0]
		pcStr++;
    db6e:	687b      	ldr	r3, [r7, #4]
    db70:	3301      	adds	r3, #1
    db72:	607b      	str	r3, [r7, #4]
	while(*pcStr)
    db74:	687b      	ldr	r3, [r7, #4]
    db76:	781b      	ldrb	r3, [r3, #0]
    db78:	2b00      	cmp	r3, #0
    db7a:	d1f1      	bne.n	db60 <m2m_strlen+0x12>
	}
	return u16StrLen;
    db7c:	230e      	movs	r3, #14
    db7e:	18fb      	adds	r3, r7, r3
    db80:	881b      	ldrh	r3, [r3, #0]
}
    db82:	0018      	movs	r0, r3
    db84:	46bd      	mov	sp, r7
    db86:	b004      	add	sp, #16
    db88:	bd80      	pop	{r7, pc}
	...

0000db8c <isr>:
#ifdef ETH_MODE
extern void os_hook_isr(void);
#endif

static void isr(void)
{
    db8c:	b580      	push	{r7, lr}
    db8e:	af00      	add	r7, sp, #0
	gstrHifCxt.u8Interrupt++;
    db90:	4b04      	ldr	r3, [pc, #16]	; (dba4 <isr+0x18>)
    db92:	78db      	ldrb	r3, [r3, #3]
    db94:	b2db      	uxtb	r3, r3
    db96:	3301      	adds	r3, #1
    db98:	b2da      	uxtb	r2, r3
    db9a:	4b02      	ldr	r3, [pc, #8]	; (dba4 <isr+0x18>)
    db9c:	70da      	strb	r2, [r3, #3]
	nm_bsp_interrupt_ctrl(0);
#endif
#ifdef ETH_MODE
	os_hook_isr();
#endif
}
    db9e:	46c0      	nop			; (mov r8, r8)
    dba0:	46bd      	mov	sp, r7
    dba2:	bd80      	pop	{r7, pc}
    dba4:	200054b4 	.word	0x200054b4

0000dba8 <hif_set_rx_done>:
static sint8 hif_set_rx_done(void)
{
    dba8:	b590      	push	{r4, r7, lr}
    dbaa:	b083      	sub	sp, #12
    dbac:	af00      	add	r7, sp, #0
	uint32 reg;
	sint8 ret = M2M_SUCCESS;
    dbae:	1dfb      	adds	r3, r7, #7
    dbb0:	2200      	movs	r2, #0
    dbb2:	701a      	strb	r2, [r3, #0]

	gstrHifCxt.u8HifRXDone = 0;
    dbb4:	4b14      	ldr	r3, [pc, #80]	; (dc08 <hif_set_rx_done+0x60>)
    dbb6:	2200      	movs	r2, #0
    dbb8:	709a      	strb	r2, [r3, #2]
#ifdef NM_EDGE_INTERRUPT
	nm_bsp_interrupt_ctrl(1);
    dbba:	2001      	movs	r0, #1
    dbbc:	4b13      	ldr	r3, [pc, #76]	; (dc0c <hif_set_rx_done+0x64>)
    dbbe:	4798      	blx	r3
#endif
	ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_0,&reg);
    dbc0:	1dfc      	adds	r4, r7, #7
    dbc2:	003b      	movs	r3, r7
    dbc4:	4a12      	ldr	r2, [pc, #72]	; (dc10 <hif_set_rx_done+0x68>)
    dbc6:	0019      	movs	r1, r3
    dbc8:	0010      	movs	r0, r2
    dbca:	4b12      	ldr	r3, [pc, #72]	; (dc14 <hif_set_rx_done+0x6c>)
    dbcc:	4798      	blx	r3
    dbce:	0003      	movs	r3, r0
    dbd0:	7023      	strb	r3, [r4, #0]
	if(ret != M2M_SUCCESS)goto ERR1;
    dbd2:	1dfb      	adds	r3, r7, #7
    dbd4:	781b      	ldrb	r3, [r3, #0]
    dbd6:	b25b      	sxtb	r3, r3
    dbd8:	2b00      	cmp	r3, #0
    dbda:	d10d      	bne.n	dbf8 <hif_set_rx_done+0x50>
	/* Set RX Done */
	reg |= NBIT1;
    dbdc:	683b      	ldr	r3, [r7, #0]
    dbde:	2202      	movs	r2, #2
    dbe0:	4313      	orrs	r3, r2
    dbe2:	603b      	str	r3, [r7, #0]
	ret = nm_write_reg(WIFI_HOST_RCV_CTRL_0,reg);
    dbe4:	683b      	ldr	r3, [r7, #0]
    dbe6:	1dfc      	adds	r4, r7, #7
    dbe8:	4a09      	ldr	r2, [pc, #36]	; (dc10 <hif_set_rx_done+0x68>)
    dbea:	0019      	movs	r1, r3
    dbec:	0010      	movs	r0, r2
    dbee:	4b0a      	ldr	r3, [pc, #40]	; (dc18 <hif_set_rx_done+0x70>)
    dbf0:	4798      	blx	r3
    dbf2:	0003      	movs	r3, r0
    dbf4:	7023      	strb	r3, [r4, #0]
    dbf6:	e000      	b.n	dbfa <hif_set_rx_done+0x52>
	if(ret != M2M_SUCCESS)goto ERR1;
    dbf8:	46c0      	nop			; (mov r8, r8)
	if(ret != M2M_SUCCESS)goto ERR1;
#ifdef NM_LEVEL_INTERRUPT
	nm_bsp_interrupt_ctrl(1);
#endif
ERR1:
	return ret;
    dbfa:	1dfb      	adds	r3, r7, #7
    dbfc:	781b      	ldrb	r3, [r3, #0]
    dbfe:	b25b      	sxtb	r3, r3

}
    dc00:	0018      	movs	r0, r3
    dc02:	46bd      	mov	sp, r7
    dc04:	b003      	add	sp, #12
    dc06:	bd90      	pop	{r4, r7, pc}
    dc08:	200054b4 	.word	0x200054b4
    dc0c:	0000d2c5 	.word	0x0000d2c5
    dc10:	00001070 	.word	0x00001070
    dc14:	0000fba1 	.word	0x0000fba1
    dc18:	0000fbc5 	.word	0x0000fbc5

0000dc1c <m2m_hif_cb>:
*	@author
*	@date
*	@version	1.0
*/
static void m2m_hif_cb(uint8 u8OpCode, uint16 u16DataSize, uint32 u32Addr)
{
    dc1c:	b580      	push	{r7, lr}
    dc1e:	b082      	sub	sp, #8
    dc20:	af00      	add	r7, sp, #0
    dc22:	603a      	str	r2, [r7, #0]
    dc24:	1dfb      	adds	r3, r7, #7
    dc26:	1c02      	adds	r2, r0, #0
    dc28:	701a      	strb	r2, [r3, #0]
    dc2a:	1d3b      	adds	r3, r7, #4
    dc2c:	1c0a      	adds	r2, r1, #0
    dc2e:	801a      	strh	r2, [r3, #0]


}
    dc30:	46c0      	nop			; (mov r8, r8)
    dc32:	46bd      	mov	sp, r7
    dc34:	b002      	add	sp, #8
    dc36:	bd80      	pop	{r7, pc}

0000dc38 <hif_chip_wake>:
*	@brief	To Wakeup the chip.
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_chip_wake(void)
{
    dc38:	b590      	push	{r4, r7, lr}
    dc3a:	b083      	sub	sp, #12
    dc3c:	af00      	add	r7, sp, #0
	sint8 ret = M2M_SUCCESS;
    dc3e:	1dfb      	adds	r3, r7, #7
    dc40:	2200      	movs	r2, #0
    dc42:	701a      	strb	r2, [r3, #0]
	if(gstrHifCxt.u8HifRXDone)
    dc44:	4b16      	ldr	r3, [pc, #88]	; (dca0 <hif_chip_wake+0x68>)
    dc46:	789b      	ldrb	r3, [r3, #2]
    dc48:	b2db      	uxtb	r3, r3
    dc4a:	2b00      	cmp	r3, #0
    dc4c:	d003      	beq.n	dc56 <hif_chip_wake+0x1e>
	{
		/*chip already wake for the rx not done no need to send wake request*/
		return ret;
    dc4e:	1dfb      	adds	r3, r7, #7
    dc50:	781b      	ldrb	r3, [r3, #0]
    dc52:	b25b      	sxtb	r3, r3
    dc54:	e01f      	b.n	dc96 <hif_chip_wake+0x5e>
	}
	if(gstrHifCxt.u8ChipSleep == 0)
    dc56:	4b12      	ldr	r3, [pc, #72]	; (dca0 <hif_chip_wake+0x68>)
    dc58:	785b      	ldrb	r3, [r3, #1]
    dc5a:	b2db      	uxtb	r3, r3
    dc5c:	2b00      	cmp	r3, #0
    dc5e:	d10e      	bne.n	dc7e <hif_chip_wake+0x46>
	{
		if(gstrHifCxt.u8ChipMode != M2M_NO_PS)
    dc60:	4b0f      	ldr	r3, [pc, #60]	; (dca0 <hif_chip_wake+0x68>)
    dc62:	781b      	ldrb	r3, [r3, #0]
    dc64:	b2db      	uxtb	r3, r3
    dc66:	2b00      	cmp	r3, #0
    dc68:	d009      	beq.n	dc7e <hif_chip_wake+0x46>
		{
			ret = chip_wake();
    dc6a:	1dfc      	adds	r4, r7, #7
    dc6c:	4b0d      	ldr	r3, [pc, #52]	; (dca4 <hif_chip_wake+0x6c>)
    dc6e:	4798      	blx	r3
    dc70:	0003      	movs	r3, r0
    dc72:	7023      	strb	r3, [r4, #0]
			if(ret != M2M_SUCCESS)goto ERR1;
    dc74:	1dfb      	adds	r3, r7, #7
    dc76:	781b      	ldrb	r3, [r3, #0]
    dc78:	b25b      	sxtb	r3, r3
    dc7a:	2b00      	cmp	r3, #0
    dc7c:	d107      	bne.n	dc8e <hif_chip_wake+0x56>
		}
		else
		{
		}
	}
	gstrHifCxt.u8ChipSleep++;
    dc7e:	4b08      	ldr	r3, [pc, #32]	; (dca0 <hif_chip_wake+0x68>)
    dc80:	785b      	ldrb	r3, [r3, #1]
    dc82:	b2db      	uxtb	r3, r3
    dc84:	3301      	adds	r3, #1
    dc86:	b2da      	uxtb	r2, r3
    dc88:	4b05      	ldr	r3, [pc, #20]	; (dca0 <hif_chip_wake+0x68>)
    dc8a:	705a      	strb	r2, [r3, #1]
    dc8c:	e000      	b.n	dc90 <hif_chip_wake+0x58>
			if(ret != M2M_SUCCESS)goto ERR1;
    dc8e:	46c0      	nop			; (mov r8, r8)
ERR1:
	return ret;
    dc90:	1dfb      	adds	r3, r7, #7
    dc92:	781b      	ldrb	r3, [r3, #0]
    dc94:	b25b      	sxtb	r3, r3
}
    dc96:	0018      	movs	r0, r3
    dc98:	46bd      	mov	sp, r7
    dc9a:	b003      	add	sp, #12
    dc9c:	bd90      	pop	{r4, r7, pc}
    dc9e:	46c0      	nop			; (mov r8, r8)
    dca0:	200054b4 	.word	0x200054b4
    dca4:	0000f671 	.word	0x0000f671

0000dca8 <hif_chip_sleep_sc>:
*	@brief	To clear the chip sleep but keep the chip sleep
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_chip_sleep_sc(void)
{
    dca8:	b580      	push	{r7, lr}
    dcaa:	af00      	add	r7, sp, #0
	if(gstrHifCxt.u8ChipSleep >= 1)
    dcac:	4b07      	ldr	r3, [pc, #28]	; (dccc <hif_chip_sleep_sc+0x24>)
    dcae:	785b      	ldrb	r3, [r3, #1]
    dcb0:	b2db      	uxtb	r3, r3
    dcb2:	2b00      	cmp	r3, #0
    dcb4:	d006      	beq.n	dcc4 <hif_chip_sleep_sc+0x1c>
	{
		gstrHifCxt.u8ChipSleep--;
    dcb6:	4b05      	ldr	r3, [pc, #20]	; (dccc <hif_chip_sleep_sc+0x24>)
    dcb8:	785b      	ldrb	r3, [r3, #1]
    dcba:	b2db      	uxtb	r3, r3
    dcbc:	3b01      	subs	r3, #1
    dcbe:	b2da      	uxtb	r2, r3
    dcc0:	4b02      	ldr	r3, [pc, #8]	; (dccc <hif_chip_sleep_sc+0x24>)
    dcc2:	705a      	strb	r2, [r3, #1]
	}
	return M2M_SUCCESS;
    dcc4:	2300      	movs	r3, #0
}
    dcc6:	0018      	movs	r0, r3
    dcc8:	46bd      	mov	sp, r7
    dcca:	bd80      	pop	{r7, pc}
    dccc:	200054b4 	.word	0x200054b4

0000dcd0 <hif_chip_sleep>:
*	@brief	To make the chip sleep.
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_chip_sleep(void)
{
    dcd0:	b590      	push	{r4, r7, lr}
    dcd2:	b083      	sub	sp, #12
    dcd4:	af00      	add	r7, sp, #0
	sint8 ret = M2M_SUCCESS;
    dcd6:	1dfb      	adds	r3, r7, #7
    dcd8:	2200      	movs	r2, #0
    dcda:	701a      	strb	r2, [r3, #0]

	if(gstrHifCxt.u8ChipSleep >= 1)
    dcdc:	4b10      	ldr	r3, [pc, #64]	; (dd20 <hif_chip_sleep+0x50>)
    dcde:	785b      	ldrb	r3, [r3, #1]
    dce0:	b2db      	uxtb	r3, r3
    dce2:	2b00      	cmp	r3, #0
    dce4:	d006      	beq.n	dcf4 <hif_chip_sleep+0x24>
	{
		gstrHifCxt.u8ChipSleep--;
    dce6:	4b0e      	ldr	r3, [pc, #56]	; (dd20 <hif_chip_sleep+0x50>)
    dce8:	785b      	ldrb	r3, [r3, #1]
    dcea:	b2db      	uxtb	r3, r3
    dcec:	3b01      	subs	r3, #1
    dcee:	b2da      	uxtb	r2, r3
    dcf0:	4b0b      	ldr	r3, [pc, #44]	; (dd20 <hif_chip_sleep+0x50>)
    dcf2:	705a      	strb	r2, [r3, #1]
	}
	
	if(gstrHifCxt.u8ChipSleep == 0)
    dcf4:	4b0a      	ldr	r3, [pc, #40]	; (dd20 <hif_chip_sleep+0x50>)
    dcf6:	785b      	ldrb	r3, [r3, #1]
    dcf8:	b2db      	uxtb	r3, r3
    dcfa:	2b00      	cmp	r3, #0
    dcfc:	d109      	bne.n	dd12 <hif_chip_sleep+0x42>
	{
		if(gstrHifCxt.u8ChipMode != M2M_NO_PS)
    dcfe:	4b08      	ldr	r3, [pc, #32]	; (dd20 <hif_chip_sleep+0x50>)
    dd00:	781b      	ldrb	r3, [r3, #0]
    dd02:	b2db      	uxtb	r3, r3
    dd04:	2b00      	cmp	r3, #0
    dd06:	d004      	beq.n	dd12 <hif_chip_sleep+0x42>
		{
			ret = chip_sleep();
    dd08:	1dfc      	adds	r4, r7, #7
    dd0a:	4b06      	ldr	r3, [pc, #24]	; (dd24 <hif_chip_sleep+0x54>)
    dd0c:	4798      	blx	r3
    dd0e:	0003      	movs	r3, r0
    dd10:	7023      	strb	r3, [r4, #0]
		else
		{
		}
	}
ERR1:
	return ret;
    dd12:	1dfb      	adds	r3, r7, #7
    dd14:	781b      	ldrb	r3, [r3, #0]
    dd16:	b25b      	sxtb	r3, r3
}
    dd18:	0018      	movs	r0, r3
    dd1a:	46bd      	mov	sp, r7
    dd1c:	b003      	add	sp, #12
    dd1e:	bd90      	pop	{r4, r7, pc}
    dd20:	200054b4 	.word	0x200054b4
    dd24:	0000f599 	.word	0x0000f599

0000dd28 <hif_init>:
*				Pointer to the arguments.
*   @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_init(void * arg)
{
    dd28:	b580      	push	{r7, lr}
    dd2a:	b082      	sub	sp, #8
    dd2c:	af00      	add	r7, sp, #0
    dd2e:	6078      	str	r0, [r7, #4]
	m2m_memset((uint8*)&gstrHifCxt,0,sizeof(tstrHifContext));
    dd30:	4b09      	ldr	r3, [pc, #36]	; (dd58 <hif_init+0x30>)
    dd32:	222c      	movs	r2, #44	; 0x2c
    dd34:	2100      	movs	r1, #0
    dd36:	0018      	movs	r0, r3
    dd38:	4b08      	ldr	r3, [pc, #32]	; (dd5c <hif_init+0x34>)
    dd3a:	4798      	blx	r3
	nm_bsp_register_isr(isr);
    dd3c:	4b08      	ldr	r3, [pc, #32]	; (dd60 <hif_init+0x38>)
    dd3e:	0018      	movs	r0, r3
    dd40:	4b08      	ldr	r3, [pc, #32]	; (dd64 <hif_init+0x3c>)
    dd42:	4798      	blx	r3
	hif_register_cb(M2M_REQ_GROUP_HIF,m2m_hif_cb);
    dd44:	4b08      	ldr	r3, [pc, #32]	; (dd68 <hif_init+0x40>)
    dd46:	0019      	movs	r1, r3
    dd48:	2003      	movs	r0, #3
    dd4a:	4b08      	ldr	r3, [pc, #32]	; (dd6c <hif_init+0x44>)
    dd4c:	4798      	blx	r3
	return M2M_SUCCESS;
    dd4e:	2300      	movs	r3, #0
}
    dd50:	0018      	movs	r0, r3
    dd52:	46bd      	mov	sp, r7
    dd54:	b002      	add	sp, #8
    dd56:	bd80      	pop	{r7, pc}
    dd58:	200054b4 	.word	0x200054b4
    dd5c:	0000db11 	.word	0x0000db11
    dd60:	0000db8d 	.word	0x0000db8d
    dd64:	0000d24d 	.word	0x0000d24d
    dd68:	0000dc1d 	.word	0x0000dc1d
    dd6c:	0000e80d 	.word	0x0000e80d

0000dd70 <hif_send>:
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_send(uint8 u8Gid,uint8 u8Opcode,uint8 *pu8CtrlBuf,uint16 u16CtrlBufSize,
			   uint8 *pu8DataBuf,uint16 u16DataSize, uint16 u16DataOffset)
{
    dd70:	b590      	push	{r4, r7, lr}
    dd72:	b089      	sub	sp, #36	; 0x24
    dd74:	af00      	add	r7, sp, #0
    dd76:	0004      	movs	r4, r0
    dd78:	0008      	movs	r0, r1
    dd7a:	603a      	str	r2, [r7, #0]
    dd7c:	0019      	movs	r1, r3
    dd7e:	1dfb      	adds	r3, r7, #7
    dd80:	1c22      	adds	r2, r4, #0
    dd82:	701a      	strb	r2, [r3, #0]
    dd84:	1dbb      	adds	r3, r7, #6
    dd86:	1c02      	adds	r2, r0, #0
    dd88:	701a      	strb	r2, [r3, #0]
    dd8a:	1d3b      	adds	r3, r7, #4
    dd8c:	1c0a      	adds	r2, r1, #0
    dd8e:	801a      	strh	r2, [r3, #0]
	sint8		ret = M2M_ERR_SEND;
    dd90:	231f      	movs	r3, #31
    dd92:	18fb      	adds	r3, r7, r3
    dd94:	22ff      	movs	r2, #255	; 0xff
    dd96:	701a      	strb	r2, [r3, #0]
	volatile tstrHifHdr	strHif;

	strHif.u8Opcode		= u8Opcode&(~NBIT7);
    dd98:	1dbb      	adds	r3, r7, #6
    dd9a:	781b      	ldrb	r3, [r3, #0]
    dd9c:	227f      	movs	r2, #127	; 0x7f
    dd9e:	4013      	ands	r3, r2
    dda0:	b2da      	uxtb	r2, r3
    dda2:	2318      	movs	r3, #24
    dda4:	18fb      	adds	r3, r7, r3
    dda6:	705a      	strb	r2, [r3, #1]
	strHif.u8Gid		= u8Gid;
    dda8:	2318      	movs	r3, #24
    ddaa:	18fb      	adds	r3, r7, r3
    ddac:	1dfa      	adds	r2, r7, #7
    ddae:	7812      	ldrb	r2, [r2, #0]
    ddb0:	701a      	strb	r2, [r3, #0]
	strHif.u16Length	= M2M_HIF_HDR_OFFSET;
    ddb2:	2318      	movs	r3, #24
    ddb4:	18fb      	adds	r3, r7, r3
    ddb6:	2208      	movs	r2, #8
    ddb8:	805a      	strh	r2, [r3, #2]
	if(pu8DataBuf != NULL)
    ddba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    ddbc:	2b00      	cmp	r3, #0
    ddbe:	d011      	beq.n	dde4 <hif_send+0x74>
	{
		strHif.u16Length += u16DataOffset + u16DataSize;
    ddc0:	2318      	movs	r3, #24
    ddc2:	18fb      	adds	r3, r7, r3
    ddc4:	885b      	ldrh	r3, [r3, #2]
    ddc6:	b29a      	uxth	r2, r3
    ddc8:	2338      	movs	r3, #56	; 0x38
    ddca:	18f9      	adds	r1, r7, r3
    ddcc:	2334      	movs	r3, #52	; 0x34
    ddce:	18fb      	adds	r3, r7, r3
    ddd0:	8809      	ldrh	r1, [r1, #0]
    ddd2:	881b      	ldrh	r3, [r3, #0]
    ddd4:	18cb      	adds	r3, r1, r3
    ddd6:	b29b      	uxth	r3, r3
    ddd8:	18d3      	adds	r3, r2, r3
    ddda:	b29a      	uxth	r2, r3
    dddc:	2318      	movs	r3, #24
    ddde:	18fb      	adds	r3, r7, r3
    dde0:	805a      	strh	r2, [r3, #2]
    dde2:	e00a      	b.n	ddfa <hif_send+0x8a>
	}
	else
	{
		strHif.u16Length += u16CtrlBufSize;
    dde4:	2318      	movs	r3, #24
    dde6:	18fb      	adds	r3, r7, r3
    dde8:	885b      	ldrh	r3, [r3, #2]
    ddea:	b29a      	uxth	r2, r3
    ddec:	1d3b      	adds	r3, r7, #4
    ddee:	881b      	ldrh	r3, [r3, #0]
    ddf0:	18d3      	adds	r3, r2, r3
    ddf2:	b29a      	uxth	r2, r3
    ddf4:	2318      	movs	r3, #24
    ddf6:	18fb      	adds	r3, r7, r3
    ddf8:	805a      	strh	r2, [r3, #2]
	}
	ret = hif_chip_wake();
    ddfa:	231f      	movs	r3, #31
    ddfc:	18fc      	adds	r4, r7, r3
    ddfe:	4bb2      	ldr	r3, [pc, #712]	; (e0c8 <hif_send+0x358>)
    de00:	4798      	blx	r3
    de02:	0003      	movs	r3, r0
    de04:	7023      	strb	r3, [r4, #0]
	if(ret == M2M_SUCCESS)
    de06:	231f      	movs	r3, #31
    de08:	18fb      	adds	r3, r7, r3
    de0a:	781b      	ldrb	r3, [r3, #0]
    de0c:	b25b      	sxtb	r3, r3
    de0e:	2b00      	cmp	r3, #0
    de10:	d000      	beq.n	de14 <hif_send+0xa4>
    de12:	e129      	b.n	e068 <hif_send+0x2f8>
	{
		volatile uint32 reg, dma_addr = 0;
    de14:	2300      	movs	r3, #0
    de16:	613b      	str	r3, [r7, #16]
		volatile uint16 cnt = 0;
    de18:	230e      	movs	r3, #14
    de1a:	18fb      	adds	r3, r7, r3
    de1c:	2200      	movs	r2, #0
    de1e:	801a      	strh	r2, [r3, #0]
//#define OPTIMIZE_BUS 
/*please define in firmware also*/
#ifndef OPTIMIZE_BUS
		reg = 0UL;
    de20:	2300      	movs	r3, #0
    de22:	617b      	str	r3, [r7, #20]
		reg |= (uint32)u8Gid;
    de24:	1dfb      	adds	r3, r7, #7
    de26:	781a      	ldrb	r2, [r3, #0]
    de28:	697b      	ldr	r3, [r7, #20]
    de2a:	4313      	orrs	r3, r2
    de2c:	617b      	str	r3, [r7, #20]
		reg |= ((uint32)u8Opcode<<8);
    de2e:	1dbb      	adds	r3, r7, #6
    de30:	781b      	ldrb	r3, [r3, #0]
    de32:	021a      	lsls	r2, r3, #8
    de34:	697b      	ldr	r3, [r7, #20]
    de36:	4313      	orrs	r3, r2
    de38:	617b      	str	r3, [r7, #20]
		reg |= ((uint32)strHif.u16Length<<16);
    de3a:	2318      	movs	r3, #24
    de3c:	18fb      	adds	r3, r7, r3
    de3e:	885b      	ldrh	r3, [r3, #2]
    de40:	b29b      	uxth	r3, r3
    de42:	041a      	lsls	r2, r3, #16
    de44:	697b      	ldr	r3, [r7, #20]
    de46:	4313      	orrs	r3, r2
    de48:	617b      	str	r3, [r7, #20]
		ret = nm_write_reg(NMI_STATE_REG,reg);
    de4a:	697b      	ldr	r3, [r7, #20]
    de4c:	221f      	movs	r2, #31
    de4e:	18bc      	adds	r4, r7, r2
    de50:	4a9e      	ldr	r2, [pc, #632]	; (e0cc <hif_send+0x35c>)
    de52:	0019      	movs	r1, r3
    de54:	0010      	movs	r0, r2
    de56:	4b9e      	ldr	r3, [pc, #632]	; (e0d0 <hif_send+0x360>)
    de58:	4798      	blx	r3
    de5a:	0003      	movs	r3, r0
    de5c:	7023      	strb	r3, [r4, #0]
		if(M2M_SUCCESS != ret) goto ERR1;
    de5e:	231f      	movs	r3, #31
    de60:	18fb      	adds	r3, r7, r3
    de62:	781b      	ldrb	r3, [r3, #0]
    de64:	b25b      	sxtb	r3, r3
    de66:	2b00      	cmp	r3, #0
    de68:	d000      	beq.n	de6c <hif_send+0xfc>
    de6a:	e119      	b.n	e0a0 <hif_send+0x330>

		reg = 0UL;
    de6c:	2300      	movs	r3, #0
    de6e:	617b      	str	r3, [r7, #20]
		reg |= NBIT1;
    de70:	697b      	ldr	r3, [r7, #20]
    de72:	2202      	movs	r2, #2
    de74:	4313      	orrs	r3, r2
    de76:	617b      	str	r3, [r7, #20]
		ret = nm_write_reg(WIFI_HOST_RCV_CTRL_2, reg);
    de78:	697b      	ldr	r3, [r7, #20]
    de7a:	221f      	movs	r2, #31
    de7c:	18bc      	adds	r4, r7, r2
    de7e:	4a95      	ldr	r2, [pc, #596]	; (e0d4 <hif_send+0x364>)
    de80:	0019      	movs	r1, r3
    de82:	0010      	movs	r0, r2
    de84:	4b92      	ldr	r3, [pc, #584]	; (e0d0 <hif_send+0x360>)
    de86:	4798      	blx	r3
    de88:	0003      	movs	r3, r0
    de8a:	7023      	strb	r3, [r4, #0]
		if(M2M_SUCCESS != ret) goto ERR1;
    de8c:	231f      	movs	r3, #31
    de8e:	18fb      	adds	r3, r7, r3
    de90:	781b      	ldrb	r3, [r3, #0]
    de92:	b25b      	sxtb	r3, r3
    de94:	2b00      	cmp	r3, #0
    de96:	d000      	beq.n	de9a <hif_send+0x12a>
    de98:	e104      	b.n	e0a4 <hif_send+0x334>
		reg |= (u8Gid == M2M_REQ_GROUP_IP) ? (NBIT3):(0); /*IP = 1 or non IP*/
		reg |= ((uint32)strHif.u16Length << 4); /*length of pkt max = 4096*/
		ret = nm_write_reg(WIFI_HOST_RCV_CTRL_2, reg);
		if(M2M_SUCCESS != ret) goto ERR1;
#endif
		dma_addr = 0;
    de9a:	2300      	movs	r3, #0
    de9c:	613b      	str	r3, [r7, #16]
		
		for(cnt = 0; cnt < 1000; cnt ++)
    de9e:	230e      	movs	r3, #14
    dea0:	18fb      	adds	r3, r7, r3
    dea2:	2200      	movs	r2, #0
    dea4:	801a      	strh	r2, [r3, #0]
    dea6:	e050      	b.n	df4a <hif_send+0x1da>
		{
			ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_2,(uint32 *)&reg);
    dea8:	231f      	movs	r3, #31
    deaa:	18fc      	adds	r4, r7, r3
    deac:	2314      	movs	r3, #20
    deae:	18fb      	adds	r3, r7, r3
    deb0:	4a88      	ldr	r2, [pc, #544]	; (e0d4 <hif_send+0x364>)
    deb2:	0019      	movs	r1, r3
    deb4:	0010      	movs	r0, r2
    deb6:	4b88      	ldr	r3, [pc, #544]	; (e0d8 <hif_send+0x368>)
    deb8:	4798      	blx	r3
    deba:	0003      	movs	r3, r0
    debc:	7023      	strb	r3, [r4, #0]
			if(ret != M2M_SUCCESS) break;
    debe:	231f      	movs	r3, #31
    dec0:	18fb      	adds	r3, r7, r3
    dec2:	781b      	ldrb	r3, [r3, #0]
    dec4:	b25b      	sxtb	r3, r3
    dec6:	2b00      	cmp	r3, #0
    dec8:	d147      	bne.n	df5a <hif_send+0x1ea>
			/*
			 * If it takes too long to get a response, the slow down to 
			 * avoid back-to-back register read operations.
			 */
			if(cnt >= 500) {
    deca:	230e      	movs	r3, #14
    decc:	18fb      	adds	r3, r7, r3
    dece:	881b      	ldrh	r3, [r3, #0]
    ded0:	b29a      	uxth	r2, r3
    ded2:	23f4      	movs	r3, #244	; 0xf4
    ded4:	33ff      	adds	r3, #255	; 0xff
    ded6:	429a      	cmp	r2, r3
    ded8:	d916      	bls.n	df08 <hif_send+0x198>
				if(cnt < 501) {
    deda:	230e      	movs	r3, #14
    dedc:	18fb      	adds	r3, r7, r3
    dede:	881b      	ldrh	r3, [r3, #0]
    dee0:	b29a      	uxth	r2, r3
    dee2:	23fa      	movs	r3, #250	; 0xfa
    dee4:	005b      	lsls	r3, r3, #1
    dee6:	429a      	cmp	r2, r3
    dee8:	d80b      	bhi.n	df02 <hif_send+0x192>
					M2M_INFO("Slowing down...\n");
    deea:	4b7c      	ldr	r3, [pc, #496]	; (e0dc <hif_send+0x36c>)
    deec:	0018      	movs	r0, r3
    deee:	4b7c      	ldr	r3, [pc, #496]	; (e0e0 <hif_send+0x370>)
    def0:	4798      	blx	r3
    def2:	4b7c      	ldr	r3, [pc, #496]	; (e0e4 <hif_send+0x374>)
    def4:	0018      	movs	r0, r3
    def6:	4b7a      	ldr	r3, [pc, #488]	; (e0e0 <hif_send+0x370>)
    def8:	4798      	blx	r3
    defa:	4b7b      	ldr	r3, [pc, #492]	; (e0e8 <hif_send+0x378>)
    defc:	0018      	movs	r0, r3
    defe:	4b78      	ldr	r3, [pc, #480]	; (e0e0 <hif_send+0x370>)
    df00:	4798      	blx	r3
				}
				nm_bsp_sleep(1);
    df02:	2001      	movs	r0, #1
    df04:	4b79      	ldr	r3, [pc, #484]	; (e0ec <hif_send+0x37c>)
    df06:	4798      	blx	r3
			}
			if (!(reg & NBIT1))
    df08:	697b      	ldr	r3, [r7, #20]
    df0a:	2202      	movs	r2, #2
    df0c:	4013      	ands	r3, r2
    df0e:	d113      	bne.n	df38 <hif_send+0x1c8>
			{
				ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_4,(uint32 *)&dma_addr);
    df10:	231f      	movs	r3, #31
    df12:	18fc      	adds	r4, r7, r3
    df14:	2310      	movs	r3, #16
    df16:	18fb      	adds	r3, r7, r3
    df18:	4a75      	ldr	r2, [pc, #468]	; (e0f0 <hif_send+0x380>)
    df1a:	0019      	movs	r1, r3
    df1c:	0010      	movs	r0, r2
    df1e:	4b6e      	ldr	r3, [pc, #440]	; (e0d8 <hif_send+0x368>)
    df20:	4798      	blx	r3
    df22:	0003      	movs	r3, r0
    df24:	7023      	strb	r3, [r4, #0]
				if(ret != M2M_SUCCESS) {
    df26:	231f      	movs	r3, #31
    df28:	18fb      	adds	r3, r7, r3
    df2a:	781b      	ldrb	r3, [r3, #0]
    df2c:	b25b      	sxtb	r3, r3
    df2e:	2b00      	cmp	r3, #0
    df30:	d015      	beq.n	df5e <hif_send+0x1ee>
					/*in case of read error clear the DMA address and return error*/
					dma_addr = 0;
    df32:	2300      	movs	r3, #0
    df34:	613b      	str	r3, [r7, #16]
					goto ERR1;
    df36:	e0bc      	b.n	e0b2 <hif_send+0x342>
		for(cnt = 0; cnt < 1000; cnt ++)
    df38:	230e      	movs	r3, #14
    df3a:	18fb      	adds	r3, r7, r3
    df3c:	881b      	ldrh	r3, [r3, #0]
    df3e:	b29b      	uxth	r3, r3
    df40:	3301      	adds	r3, #1
    df42:	b29a      	uxth	r2, r3
    df44:	230e      	movs	r3, #14
    df46:	18fb      	adds	r3, r7, r3
    df48:	801a      	strh	r2, [r3, #0]
    df4a:	230e      	movs	r3, #14
    df4c:	18fb      	adds	r3, r7, r3
    df4e:	881b      	ldrh	r3, [r3, #0]
    df50:	b29b      	uxth	r3, r3
    df52:	4a68      	ldr	r2, [pc, #416]	; (e0f4 <hif_send+0x384>)
    df54:	4293      	cmp	r3, r2
    df56:	d9a7      	bls.n	dea8 <hif_send+0x138>
    df58:	e002      	b.n	df60 <hif_send+0x1f0>
			if(ret != M2M_SUCCESS) break;
    df5a:	46c0      	nop			; (mov r8, r8)
    df5c:	e000      	b.n	df60 <hif_send+0x1f0>
				}
				/*in case of success break */
				break;
    df5e:	46c0      	nop			; (mov r8, r8)
			}
		}

		if (dma_addr != 0)
    df60:	693b      	ldr	r3, [r7, #16]
    df62:	2b00      	cmp	r3, #0
    df64:	d100      	bne.n	df68 <hif_send+0x1f8>
    df66:	e074      	b.n	e052 <hif_send+0x2e2>
		{
			volatile uint32	u32CurrAddr;
			u32CurrAddr = dma_addr;
    df68:	693b      	ldr	r3, [r7, #16]
    df6a:	60bb      	str	r3, [r7, #8]
			strHif.u16Length=NM_BSP_B_L_16(strHif.u16Length);
    df6c:	2318      	movs	r3, #24
    df6e:	18fb      	adds	r3, r7, r3
    df70:	885b      	ldrh	r3, [r3, #2]
    df72:	b29a      	uxth	r2, r3
    df74:	2318      	movs	r3, #24
    df76:	18fb      	adds	r3, r7, r3
    df78:	805a      	strh	r2, [r3, #2]
			ret = nm_write_block(u32CurrAddr, (uint8*)&strHif, M2M_HIF_HDR_OFFSET);
    df7a:	68bb      	ldr	r3, [r7, #8]
    df7c:	221f      	movs	r2, #31
    df7e:	18bc      	adds	r4, r7, r2
    df80:	2218      	movs	r2, #24
    df82:	18b9      	adds	r1, r7, r2
    df84:	2208      	movs	r2, #8
    df86:	0018      	movs	r0, r3
    df88:	4b5b      	ldr	r3, [pc, #364]	; (e0f8 <hif_send+0x388>)
    df8a:	4798      	blx	r3
    df8c:	0003      	movs	r3, r0
    df8e:	7023      	strb	r3, [r4, #0]
			if(M2M_SUCCESS != ret) goto ERR1;
    df90:	231f      	movs	r3, #31
    df92:	18fb      	adds	r3, r7, r3
    df94:	781b      	ldrb	r3, [r3, #0]
    df96:	b25b      	sxtb	r3, r3
    df98:	2b00      	cmp	r3, #0
    df9a:	d000      	beq.n	df9e <hif_send+0x22e>
    df9c:	e084      	b.n	e0a8 <hif_send+0x338>
			u32CurrAddr += M2M_HIF_HDR_OFFSET;
    df9e:	68bb      	ldr	r3, [r7, #8]
    dfa0:	3308      	adds	r3, #8
    dfa2:	60bb      	str	r3, [r7, #8]
			if(pu8CtrlBuf != NULL)
    dfa4:	683b      	ldr	r3, [r7, #0]
    dfa6:	2b00      	cmp	r3, #0
    dfa8:	d016      	beq.n	dfd8 <hif_send+0x268>
			{
				ret = nm_write_block(u32CurrAddr, pu8CtrlBuf, u16CtrlBufSize);
    dfaa:	68b8      	ldr	r0, [r7, #8]
    dfac:	1d3b      	adds	r3, r7, #4
    dfae:	881a      	ldrh	r2, [r3, #0]
    dfb0:	231f      	movs	r3, #31
    dfb2:	18fc      	adds	r4, r7, r3
    dfb4:	683b      	ldr	r3, [r7, #0]
    dfb6:	0019      	movs	r1, r3
    dfb8:	4b4f      	ldr	r3, [pc, #316]	; (e0f8 <hif_send+0x388>)
    dfba:	4798      	blx	r3
    dfbc:	0003      	movs	r3, r0
    dfbe:	7023      	strb	r3, [r4, #0]
				if(M2M_SUCCESS != ret) goto ERR1;
    dfc0:	231f      	movs	r3, #31
    dfc2:	18fb      	adds	r3, r7, r3
    dfc4:	781b      	ldrb	r3, [r3, #0]
    dfc6:	b25b      	sxtb	r3, r3
    dfc8:	2b00      	cmp	r3, #0
    dfca:	d000      	beq.n	dfce <hif_send+0x25e>
    dfcc:	e06e      	b.n	e0ac <hif_send+0x33c>
				u32CurrAddr += u16CtrlBufSize;
    dfce:	1d3b      	adds	r3, r7, #4
    dfd0:	881a      	ldrh	r2, [r3, #0]
    dfd2:	68bb      	ldr	r3, [r7, #8]
    dfd4:	18d3      	adds	r3, r2, r3
    dfd6:	60bb      	str	r3, [r7, #8]
			}
			if(pu8DataBuf != NULL)
    dfd8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    dfda:	2b00      	cmp	r3, #0
    dfdc:	d021      	beq.n	e022 <hif_send+0x2b2>
			{
				u32CurrAddr += (u16DataOffset - u16CtrlBufSize);
    dfde:	2338      	movs	r3, #56	; 0x38
    dfe0:	18fb      	adds	r3, r7, r3
    dfe2:	881a      	ldrh	r2, [r3, #0]
    dfe4:	1d3b      	adds	r3, r7, #4
    dfe6:	881b      	ldrh	r3, [r3, #0]
    dfe8:	1ad3      	subs	r3, r2, r3
    dfea:	001a      	movs	r2, r3
    dfec:	68bb      	ldr	r3, [r7, #8]
    dfee:	18d3      	adds	r3, r2, r3
    dff0:	60bb      	str	r3, [r7, #8]
				ret = nm_write_block(u32CurrAddr, pu8DataBuf, u16DataSize);
    dff2:	68b8      	ldr	r0, [r7, #8]
    dff4:	2334      	movs	r3, #52	; 0x34
    dff6:	18fb      	adds	r3, r7, r3
    dff8:	881a      	ldrh	r2, [r3, #0]
    dffa:	231f      	movs	r3, #31
    dffc:	18fc      	adds	r4, r7, r3
    dffe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    e000:	0019      	movs	r1, r3
    e002:	4b3d      	ldr	r3, [pc, #244]	; (e0f8 <hif_send+0x388>)
    e004:	4798      	blx	r3
    e006:	0003      	movs	r3, r0
    e008:	7023      	strb	r3, [r4, #0]
				if(M2M_SUCCESS != ret) goto ERR1;
    e00a:	231f      	movs	r3, #31
    e00c:	18fb      	adds	r3, r7, r3
    e00e:	781b      	ldrb	r3, [r3, #0]
    e010:	b25b      	sxtb	r3, r3
    e012:	2b00      	cmp	r3, #0
    e014:	d14c      	bne.n	e0b0 <hif_send+0x340>
				u32CurrAddr += u16DataSize;
    e016:	2334      	movs	r3, #52	; 0x34
    e018:	18fb      	adds	r3, r7, r3
    e01a:	881a      	ldrh	r2, [r3, #0]
    e01c:	68bb      	ldr	r3, [r7, #8]
    e01e:	18d3      	adds	r3, r2, r3
    e020:	60bb      	str	r3, [r7, #8]
			}

			reg = dma_addr << 2;
    e022:	693b      	ldr	r3, [r7, #16]
    e024:	009b      	lsls	r3, r3, #2
    e026:	617b      	str	r3, [r7, #20]
			reg |= NBIT1;
    e028:	697b      	ldr	r3, [r7, #20]
    e02a:	2202      	movs	r2, #2
    e02c:	4313      	orrs	r3, r2
    e02e:	617b      	str	r3, [r7, #20]
			ret = nm_write_reg(WIFI_HOST_RCV_CTRL_3, reg);
    e030:	697b      	ldr	r3, [r7, #20]
    e032:	221f      	movs	r2, #31
    e034:	18bc      	adds	r4, r7, r2
    e036:	4a31      	ldr	r2, [pc, #196]	; (e0fc <hif_send+0x38c>)
    e038:	0019      	movs	r1, r3
    e03a:	0010      	movs	r0, r2
    e03c:	4b24      	ldr	r3, [pc, #144]	; (e0d0 <hif_send+0x360>)
    e03e:	4798      	blx	r3
    e040:	0003      	movs	r3, r0
    e042:	7023      	strb	r3, [r4, #0]
			if(M2M_SUCCESS != ret) goto ERR1;
    e044:	231f      	movs	r3, #31
    e046:	18fb      	adds	r3, r7, r3
    e048:	781b      	ldrb	r3, [r3, #0]
    e04a:	b25b      	sxtb	r3, r3
    e04c:	2b00      	cmp	r3, #0
    e04e:	d01c      	beq.n	e08a <hif_send+0x31a>
    e050:	e02f      	b.n	e0b2 <hif_send+0x342>
		}
		else
		{
			ret = hif_chip_sleep();
    e052:	231f      	movs	r3, #31
    e054:	18fc      	adds	r4, r7, r3
    e056:	4b2a      	ldr	r3, [pc, #168]	; (e100 <hif_send+0x390>)
    e058:	4798      	blx	r3
    e05a:	0003      	movs	r3, r0
    e05c:	7023      	strb	r3, [r4, #0]
			M2M_DBG("Failed to alloc rx size %d\r",ret);
			ret = M2M_ERR_MEM_ALLOC;
    e05e:	231f      	movs	r3, #31
    e060:	18fb      	adds	r3, r7, r3
    e062:	22fd      	movs	r2, #253	; 0xfd
    e064:	701a      	strb	r2, [r3, #0]
			goto ERR2;
    e066:	e026      	b.n	e0b6 <hif_send+0x346>
		}

	}
	else
	{
		M2M_ERR("(HIF)Fail to wakup the chip\n");
    e068:	2398      	movs	r3, #152	; 0x98
    e06a:	33ff      	adds	r3, #255	; 0xff
    e06c:	001a      	movs	r2, r3
    e06e:	4925      	ldr	r1, [pc, #148]	; (e104 <hif_send+0x394>)
    e070:	4b25      	ldr	r3, [pc, #148]	; (e108 <hif_send+0x398>)
    e072:	0018      	movs	r0, r3
    e074:	4b1a      	ldr	r3, [pc, #104]	; (e0e0 <hif_send+0x370>)
    e076:	4798      	blx	r3
    e078:	4b24      	ldr	r3, [pc, #144]	; (e10c <hif_send+0x39c>)
    e07a:	0018      	movs	r0, r3
    e07c:	4b18      	ldr	r3, [pc, #96]	; (e0e0 <hif_send+0x370>)
    e07e:	4798      	blx	r3
    e080:	4b19      	ldr	r3, [pc, #100]	; (e0e8 <hif_send+0x378>)
    e082:	0018      	movs	r0, r3
    e084:	4b16      	ldr	r3, [pc, #88]	; (e0e0 <hif_send+0x370>)
    e086:	4798      	blx	r3
		goto ERR2;
    e088:	e015      	b.n	e0b6 <hif_send+0x346>
	}
	/*actual sleep ret = M2M_SUCCESS*/
 	ret = hif_chip_sleep();
    e08a:	231f      	movs	r3, #31
    e08c:	18fc      	adds	r4, r7, r3
    e08e:	4b1c      	ldr	r3, [pc, #112]	; (e100 <hif_send+0x390>)
    e090:	4798      	blx	r3
    e092:	0003      	movs	r3, r0
    e094:	7023      	strb	r3, [r4, #0]
	return ret;
    e096:	231f      	movs	r3, #31
    e098:	18fb      	adds	r3, r7, r3
    e09a:	781b      	ldrb	r3, [r3, #0]
    e09c:	b25b      	sxtb	r3, r3
    e09e:	e00e      	b.n	e0be <hif_send+0x34e>
		if(M2M_SUCCESS != ret) goto ERR1;
    e0a0:	46c0      	nop			; (mov r8, r8)
    e0a2:	e006      	b.n	e0b2 <hif_send+0x342>
		if(M2M_SUCCESS != ret) goto ERR1;
    e0a4:	46c0      	nop			; (mov r8, r8)
    e0a6:	e004      	b.n	e0b2 <hif_send+0x342>
			if(M2M_SUCCESS != ret) goto ERR1;
    e0a8:	46c0      	nop			; (mov r8, r8)
    e0aa:	e002      	b.n	e0b2 <hif_send+0x342>
				if(M2M_SUCCESS != ret) goto ERR1;
    e0ac:	46c0      	nop			; (mov r8, r8)
    e0ae:	e000      	b.n	e0b2 <hif_send+0x342>
				if(M2M_SUCCESS != ret) goto ERR1;
    e0b0:	46c0      	nop			; (mov r8, r8)
ERR1:
	/*reset the count but no actual sleep as it already bus error*/
	hif_chip_sleep_sc();
    e0b2:	4b17      	ldr	r3, [pc, #92]	; (e110 <hif_send+0x3a0>)
    e0b4:	4798      	blx	r3
ERR2:
	/*logical error*/
	return ret;
    e0b6:	231f      	movs	r3, #31
    e0b8:	18fb      	adds	r3, r7, r3
    e0ba:	781b      	ldrb	r3, [r3, #0]
    e0bc:	b25b      	sxtb	r3, r3
}
    e0be:	0018      	movs	r0, r3
    e0c0:	46bd      	mov	sp, r7
    e0c2:	b009      	add	sp, #36	; 0x24
    e0c4:	bd90      	pop	{r4, r7, pc}
    e0c6:	46c0      	nop			; (mov r8, r8)
    e0c8:	0000dc39 	.word	0x0000dc39
    e0cc:	0000108c 	.word	0x0000108c
    e0d0:	0000fbc5 	.word	0x0000fbc5
    e0d4:	00001078 	.word	0x00001078
    e0d8:	0000fba1 	.word	0x0000fba1
    e0dc:	00024e84 	.word	0x00024e84
    e0e0:	0000addd 	.word	0x0000addd
    e0e4:	00024e90 	.word	0x00024e90
    e0e8:	00024ea4 	.word	0x00024ea4
    e0ec:	0000d231 	.word	0x0000d231
    e0f0:	00150400 	.word	0x00150400
    e0f4:	000003e7 	.word	0x000003e7
    e0f8:	0000fd0d 	.word	0x0000fd0d
    e0fc:	0000106c 	.word	0x0000106c
    e100:	0000dcd1 	.word	0x0000dcd1
    e104:	000251ac 	.word	0x000251ac
    e108:	00024ea8 	.word	0x00024ea8
    e10c:	00024ebc 	.word	0x00024ebc
    e110:	0000dca9 	.word	0x0000dca9

0000e114 <hif_isr>:
*	@date	15 July 2012
*	@return	1 in case of interrupt received else 0 will be returned
*	@version	1.0
*/
static sint8 hif_isr(void)
{
    e114:	b590      	push	{r4, r7, lr}
    e116:	b087      	sub	sp, #28
    e118:	af02      	add	r7, sp, #8
	sint8 ret = M2M_SUCCESS;
    e11a:	230f      	movs	r3, #15
    e11c:	18fb      	adds	r3, r7, r3
    e11e:	2200      	movs	r2, #0
    e120:	701a      	strb	r2, [r3, #0]
	uint32 reg;
	volatile tstrHifHdr strHif;

	ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_0, &reg);
    e122:	230f      	movs	r3, #15
    e124:	18fc      	adds	r4, r7, r3
    e126:	2308      	movs	r3, #8
    e128:	18fb      	adds	r3, r7, r3
    e12a:	4adc      	ldr	r2, [pc, #880]	; (e49c <hif_isr+0x388>)
    e12c:	0019      	movs	r1, r3
    e12e:	0010      	movs	r0, r2
    e130:	4bdb      	ldr	r3, [pc, #876]	; (e4a0 <hif_isr+0x38c>)
    e132:	4798      	blx	r3
    e134:	0003      	movs	r3, r0
    e136:	7023      	strb	r3, [r4, #0]
	if(M2M_SUCCESS == ret)
    e138:	230f      	movs	r3, #15
    e13a:	18fb      	adds	r3, r7, r3
    e13c:	781b      	ldrb	r3, [r3, #0]
    e13e:	b25b      	sxtb	r3, r3
    e140:	2b00      	cmp	r3, #0
    e142:	d000      	beq.n	e146 <hif_isr+0x32>
    e144:	e21e      	b.n	e584 <hif_isr+0x470>
	{
		if(reg & 0x1)	/* New interrupt has been received */
    e146:	68bb      	ldr	r3, [r7, #8]
    e148:	2201      	movs	r2, #1
    e14a:	4013      	ands	r3, r2
    e14c:	d100      	bne.n	e150 <hif_isr+0x3c>
    e14e:	e204      	b.n	e55a <hif_isr+0x446>
		{
			uint16 size;

			nm_bsp_interrupt_ctrl(0);
    e150:	2000      	movs	r0, #0
    e152:	4bd4      	ldr	r3, [pc, #848]	; (e4a4 <hif_isr+0x390>)
    e154:	4798      	blx	r3
			/*Clearing RX interrupt*/
			reg &= ~NBIT0;
    e156:	68bb      	ldr	r3, [r7, #8]
    e158:	2201      	movs	r2, #1
    e15a:	4393      	bics	r3, r2
    e15c:	60bb      	str	r3, [r7, #8]
			ret = nm_write_reg(WIFI_HOST_RCV_CTRL_0,reg);
    e15e:	68bb      	ldr	r3, [r7, #8]
    e160:	220f      	movs	r2, #15
    e162:	18bc      	adds	r4, r7, r2
    e164:	4acd      	ldr	r2, [pc, #820]	; (e49c <hif_isr+0x388>)
    e166:	0019      	movs	r1, r3
    e168:	0010      	movs	r0, r2
    e16a:	4bcf      	ldr	r3, [pc, #828]	; (e4a8 <hif_isr+0x394>)
    e16c:	4798      	blx	r3
    e16e:	0003      	movs	r3, r0
    e170:	7023      	strb	r3, [r4, #0]
			if(ret != M2M_SUCCESS)goto ERR1;
    e172:	230f      	movs	r3, #15
    e174:	18fb      	adds	r3, r7, r3
    e176:	781b      	ldrb	r3, [r3, #0]
    e178:	b25b      	sxtb	r3, r3
    e17a:	2b00      	cmp	r3, #0
    e17c:	d000      	beq.n	e180 <hif_isr+0x6c>
    e17e:	e210      	b.n	e5a2 <hif_isr+0x48e>
			gstrHifCxt.u8HifRXDone = 1;
    e180:	4bca      	ldr	r3, [pc, #808]	; (e4ac <hif_isr+0x398>)
    e182:	2201      	movs	r2, #1
    e184:	709a      	strb	r2, [r3, #2]
			size = (uint16)((reg >> 2) & 0xfff);
    e186:	68bb      	ldr	r3, [r7, #8]
    e188:	089b      	lsrs	r3, r3, #2
    e18a:	b29a      	uxth	r2, r3
    e18c:	230c      	movs	r3, #12
    e18e:	18fb      	adds	r3, r7, r3
    e190:	0512      	lsls	r2, r2, #20
    e192:	0d12      	lsrs	r2, r2, #20
    e194:	801a      	strh	r2, [r3, #0]
			if (size > 0) {
    e196:	230c      	movs	r3, #12
    e198:	18fb      	adds	r3, r7, r3
    e19a:	881b      	ldrh	r3, [r3, #0]
    e19c:	2b00      	cmp	r3, #0
    e19e:	d100      	bne.n	e1a2 <hif_isr+0x8e>
    e1a0:	e1c8      	b.n	e534 <hif_isr+0x420>
				uint32 address = 0;
    e1a2:	2300      	movs	r3, #0
    e1a4:	603b      	str	r3, [r7, #0]
				/**
				start bus transfer
				**/
				ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_1, &address);
    e1a6:	230f      	movs	r3, #15
    e1a8:	18fc      	adds	r4, r7, r3
    e1aa:	003b      	movs	r3, r7
    e1ac:	4ac0      	ldr	r2, [pc, #768]	; (e4b0 <hif_isr+0x39c>)
    e1ae:	0019      	movs	r1, r3
    e1b0:	0010      	movs	r0, r2
    e1b2:	4bbb      	ldr	r3, [pc, #748]	; (e4a0 <hif_isr+0x38c>)
    e1b4:	4798      	blx	r3
    e1b6:	0003      	movs	r3, r0
    e1b8:	7023      	strb	r3, [r4, #0]
				if(M2M_SUCCESS != ret)
    e1ba:	230f      	movs	r3, #15
    e1bc:	18fb      	adds	r3, r7, r3
    e1be:	781b      	ldrb	r3, [r3, #0]
    e1c0:	b25b      	sxtb	r3, r3
    e1c2:	2b00      	cmp	r3, #0
    e1c4:	d012      	beq.n	e1ec <hif_isr+0xd8>
				{
					M2M_ERR("(hif) WIFI_HOST_RCV_CTRL_1 bus fail\n");
    e1c6:	23e4      	movs	r3, #228	; 0xe4
    e1c8:	005a      	lsls	r2, r3, #1
    e1ca:	49ba      	ldr	r1, [pc, #744]	; (e4b4 <hif_isr+0x3a0>)
    e1cc:	4bba      	ldr	r3, [pc, #744]	; (e4b8 <hif_isr+0x3a4>)
    e1ce:	0018      	movs	r0, r3
    e1d0:	4bba      	ldr	r3, [pc, #744]	; (e4bc <hif_isr+0x3a8>)
    e1d2:	4798      	blx	r3
    e1d4:	4bba      	ldr	r3, [pc, #744]	; (e4c0 <hif_isr+0x3ac>)
    e1d6:	0018      	movs	r0, r3
    e1d8:	4bb8      	ldr	r3, [pc, #736]	; (e4bc <hif_isr+0x3a8>)
    e1da:	4798      	blx	r3
    e1dc:	4bb9      	ldr	r3, [pc, #740]	; (e4c4 <hif_isr+0x3b0>)
    e1de:	0018      	movs	r0, r3
    e1e0:	4bb6      	ldr	r3, [pc, #728]	; (e4bc <hif_isr+0x3a8>)
    e1e2:	4798      	blx	r3
					nm_bsp_interrupt_ctrl(1);
    e1e4:	2001      	movs	r0, #1
    e1e6:	4baf      	ldr	r3, [pc, #700]	; (e4a4 <hif_isr+0x390>)
    e1e8:	4798      	blx	r3
					goto ERR1;
    e1ea:	e1db      	b.n	e5a4 <hif_isr+0x490>
				}
				gstrHifCxt.u32RxAddr = address;
    e1ec:	683a      	ldr	r2, [r7, #0]
    e1ee:	4baf      	ldr	r3, [pc, #700]	; (e4ac <hif_isr+0x398>)
    e1f0:	609a      	str	r2, [r3, #8]
				gstrHifCxt.u32RxSize = size;
    e1f2:	230c      	movs	r3, #12
    e1f4:	18fb      	adds	r3, r7, r3
    e1f6:	881a      	ldrh	r2, [r3, #0]
    e1f8:	4bac      	ldr	r3, [pc, #688]	; (e4ac <hif_isr+0x398>)
    e1fa:	60da      	str	r2, [r3, #12]
				ret = nm_read_block(address, (uint8*)&strHif, sizeof(tstrHifHdr));
    e1fc:	683b      	ldr	r3, [r7, #0]
    e1fe:	220f      	movs	r2, #15
    e200:	18bc      	adds	r4, r7, r2
    e202:	1d39      	adds	r1, r7, #4
    e204:	2204      	movs	r2, #4
    e206:	0018      	movs	r0, r3
    e208:	4baf      	ldr	r3, [pc, #700]	; (e4c8 <hif_isr+0x3b4>)
    e20a:	4798      	blx	r3
    e20c:	0003      	movs	r3, r0
    e20e:	7023      	strb	r3, [r4, #0]
				strHif.u16Length = NM_BSP_B_L_16(strHif.u16Length);
    e210:	1d3b      	adds	r3, r7, #4
    e212:	885b      	ldrh	r3, [r3, #2]
    e214:	b29a      	uxth	r2, r3
    e216:	1d3b      	adds	r3, r7, #4
    e218:	805a      	strh	r2, [r3, #2]
				if(M2M_SUCCESS != ret)
    e21a:	230f      	movs	r3, #15
    e21c:	18fb      	adds	r3, r7, r3
    e21e:	781b      	ldrb	r3, [r3, #0]
    e220:	b25b      	sxtb	r3, r3
    e222:	2b00      	cmp	r3, #0
    e224:	d012      	beq.n	e24c <hif_isr+0x138>
				{
					M2M_ERR("(hif) address bus fail\n");
    e226:	23e9      	movs	r3, #233	; 0xe9
    e228:	005a      	lsls	r2, r3, #1
    e22a:	49a2      	ldr	r1, [pc, #648]	; (e4b4 <hif_isr+0x3a0>)
    e22c:	4ba2      	ldr	r3, [pc, #648]	; (e4b8 <hif_isr+0x3a4>)
    e22e:	0018      	movs	r0, r3
    e230:	4ba2      	ldr	r3, [pc, #648]	; (e4bc <hif_isr+0x3a8>)
    e232:	4798      	blx	r3
    e234:	4ba5      	ldr	r3, [pc, #660]	; (e4cc <hif_isr+0x3b8>)
    e236:	0018      	movs	r0, r3
    e238:	4ba0      	ldr	r3, [pc, #640]	; (e4bc <hif_isr+0x3a8>)
    e23a:	4798      	blx	r3
    e23c:	4ba1      	ldr	r3, [pc, #644]	; (e4c4 <hif_isr+0x3b0>)
    e23e:	0018      	movs	r0, r3
    e240:	4b9e      	ldr	r3, [pc, #632]	; (e4bc <hif_isr+0x3a8>)
    e242:	4798      	blx	r3
					nm_bsp_interrupt_ctrl(1);
    e244:	2001      	movs	r0, #1
    e246:	4b97      	ldr	r3, [pc, #604]	; (e4a4 <hif_isr+0x390>)
    e248:	4798      	blx	r3
					goto ERR1;
    e24a:	e1ab      	b.n	e5a4 <hif_isr+0x490>
				}
				if(strHif.u16Length != size)
    e24c:	1d3b      	adds	r3, r7, #4
    e24e:	885b      	ldrh	r3, [r3, #2]
    e250:	b29b      	uxth	r3, r3
    e252:	220c      	movs	r2, #12
    e254:	18ba      	adds	r2, r7, r2
    e256:	8812      	ldrh	r2, [r2, #0]
    e258:	429a      	cmp	r2, r3
    e25a:	d02f      	beq.n	e2bc <hif_isr+0x1a8>
				{
					if((size - strHif.u16Length) > 4)
    e25c:	230c      	movs	r3, #12
    e25e:	18fb      	adds	r3, r7, r3
    e260:	881b      	ldrh	r3, [r3, #0]
    e262:	1d3a      	adds	r2, r7, #4
    e264:	8852      	ldrh	r2, [r2, #2]
    e266:	b292      	uxth	r2, r2
    e268:	1a9b      	subs	r3, r3, r2
    e26a:	2b04      	cmp	r3, #4
    e26c:	dd26      	ble.n	e2bc <hif_isr+0x1a8>
					{
						M2M_ERR("(hif) Corrupted packet Size = %u <L = %u, G = %u, OP = %02X>\n",
    e26e:	23dc      	movs	r3, #220	; 0xdc
    e270:	33ff      	adds	r3, #255	; 0xff
    e272:	001a      	movs	r2, r3
    e274:	498f      	ldr	r1, [pc, #572]	; (e4b4 <hif_isr+0x3a0>)
    e276:	4b90      	ldr	r3, [pc, #576]	; (e4b8 <hif_isr+0x3a4>)
    e278:	0018      	movs	r0, r3
    e27a:	4b90      	ldr	r3, [pc, #576]	; (e4bc <hif_isr+0x3a8>)
    e27c:	4798      	blx	r3
    e27e:	230c      	movs	r3, #12
    e280:	18fb      	adds	r3, r7, r3
    e282:	8819      	ldrh	r1, [r3, #0]
    e284:	1d3b      	adds	r3, r7, #4
    e286:	885b      	ldrh	r3, [r3, #2]
    e288:	b29b      	uxth	r3, r3
    e28a:	001a      	movs	r2, r3
    e28c:	1d3b      	adds	r3, r7, #4
    e28e:	781b      	ldrb	r3, [r3, #0]
    e290:	b2db      	uxtb	r3, r3
    e292:	001c      	movs	r4, r3
    e294:	1d3b      	adds	r3, r7, #4
    e296:	785b      	ldrb	r3, [r3, #1]
    e298:	b2db      	uxtb	r3, r3
    e29a:	488d      	ldr	r0, [pc, #564]	; (e4d0 <hif_isr+0x3bc>)
    e29c:	9300      	str	r3, [sp, #0]
    e29e:	0023      	movs	r3, r4
    e2a0:	4c86      	ldr	r4, [pc, #536]	; (e4bc <hif_isr+0x3a8>)
    e2a2:	47a0      	blx	r4
    e2a4:	4b87      	ldr	r3, [pc, #540]	; (e4c4 <hif_isr+0x3b0>)
    e2a6:	0018      	movs	r0, r3
    e2a8:	4b84      	ldr	r3, [pc, #528]	; (e4bc <hif_isr+0x3a8>)
    e2aa:	4798      	blx	r3
							size, strHif.u16Length, strHif.u8Gid, strHif.u8Opcode);
						nm_bsp_interrupt_ctrl(1);
    e2ac:	2001      	movs	r0, #1
    e2ae:	4b7d      	ldr	r3, [pc, #500]	; (e4a4 <hif_isr+0x390>)
    e2b0:	4798      	blx	r3
						ret = M2M_ERR_BUS_FAIL;
    e2b2:	230f      	movs	r3, #15
    e2b4:	18fb      	adds	r3, r7, r3
    e2b6:	22fa      	movs	r2, #250	; 0xfa
    e2b8:	701a      	strb	r2, [r3, #0]
						goto ERR1;
    e2ba:	e173      	b.n	e5a4 <hif_isr+0x490>
					}
				}

				if(M2M_REQ_GROUP_WIFI == strHif.u8Gid)
    e2bc:	1d3b      	adds	r3, r7, #4
    e2be:	781b      	ldrb	r3, [r3, #0]
    e2c0:	b2db      	uxtb	r3, r3
    e2c2:	2b01      	cmp	r3, #1
    e2c4:	d122      	bne.n	e30c <hif_isr+0x1f8>
				{
					if(gstrHifCxt.pfWifiCb)
    e2c6:	4b79      	ldr	r3, [pc, #484]	; (e4ac <hif_isr+0x398>)
    e2c8:	691b      	ldr	r3, [r3, #16]
    e2ca:	2b00      	cmp	r3, #0
    e2cc:	d00d      	beq.n	e2ea <hif_isr+0x1d6>
						gstrHifCxt.pfWifiCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
    e2ce:	4b77      	ldr	r3, [pc, #476]	; (e4ac <hif_isr+0x398>)
    e2d0:	691b      	ldr	r3, [r3, #16]
    e2d2:	1d3a      	adds	r2, r7, #4
    e2d4:	7852      	ldrb	r2, [r2, #1]
    e2d6:	b2d0      	uxtb	r0, r2
    e2d8:	1d3a      	adds	r2, r7, #4
    e2da:	8852      	ldrh	r2, [r2, #2]
    e2dc:	b292      	uxth	r2, r2
    e2de:	3a08      	subs	r2, #8
    e2e0:	b291      	uxth	r1, r2
    e2e2:	683a      	ldr	r2, [r7, #0]
    e2e4:	3208      	adds	r2, #8
    e2e6:	4798      	blx	r3
    e2e8:	e102      	b.n	e4f0 <hif_isr+0x3dc>
					else
						M2M_ERR("WIFI callback is not registered\n");
    e2ea:	23e8      	movs	r3, #232	; 0xe8
    e2ec:	33ff      	adds	r3, #255	; 0xff
    e2ee:	001a      	movs	r2, r3
    e2f0:	4970      	ldr	r1, [pc, #448]	; (e4b4 <hif_isr+0x3a0>)
    e2f2:	4b71      	ldr	r3, [pc, #452]	; (e4b8 <hif_isr+0x3a4>)
    e2f4:	0018      	movs	r0, r3
    e2f6:	4b71      	ldr	r3, [pc, #452]	; (e4bc <hif_isr+0x3a8>)
    e2f8:	4798      	blx	r3
    e2fa:	4b76      	ldr	r3, [pc, #472]	; (e4d4 <hif_isr+0x3c0>)
    e2fc:	0018      	movs	r0, r3
    e2fe:	4b6f      	ldr	r3, [pc, #444]	; (e4bc <hif_isr+0x3a8>)
    e300:	4798      	blx	r3
    e302:	4b70      	ldr	r3, [pc, #448]	; (e4c4 <hif_isr+0x3b0>)
    e304:	0018      	movs	r0, r3
    e306:	4b6d      	ldr	r3, [pc, #436]	; (e4bc <hif_isr+0x3a8>)
    e308:	4798      	blx	r3
    e30a:	e0f1      	b.n	e4f0 <hif_isr+0x3dc>

				}
				else if(M2M_REQ_GROUP_IP == strHif.u8Gid)
    e30c:	1d3b      	adds	r3, r7, #4
    e30e:	781b      	ldrb	r3, [r3, #0]
    e310:	b2db      	uxtb	r3, r3
    e312:	2b02      	cmp	r3, #2
    e314:	d122      	bne.n	e35c <hif_isr+0x248>
				{
					if(gstrHifCxt.pfIpCb)
    e316:	4b65      	ldr	r3, [pc, #404]	; (e4ac <hif_isr+0x398>)
    e318:	695b      	ldr	r3, [r3, #20]
    e31a:	2b00      	cmp	r3, #0
    e31c:	d00d      	beq.n	e33a <hif_isr+0x226>
						gstrHifCxt.pfIpCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
    e31e:	4b63      	ldr	r3, [pc, #396]	; (e4ac <hif_isr+0x398>)
    e320:	695b      	ldr	r3, [r3, #20]
    e322:	1d3a      	adds	r2, r7, #4
    e324:	7852      	ldrb	r2, [r2, #1]
    e326:	b2d0      	uxtb	r0, r2
    e328:	1d3a      	adds	r2, r7, #4
    e32a:	8852      	ldrh	r2, [r2, #2]
    e32c:	b292      	uxth	r2, r2
    e32e:	3a08      	subs	r2, #8
    e330:	b291      	uxth	r1, r2
    e332:	683a      	ldr	r2, [r7, #0]
    e334:	3208      	adds	r2, #8
    e336:	4798      	blx	r3
    e338:	e0da      	b.n	e4f0 <hif_isr+0x3dc>
					else
						M2M_ERR("Scoket callback is not registered\n");
    e33a:	23f0      	movs	r3, #240	; 0xf0
    e33c:	33ff      	adds	r3, #255	; 0xff
    e33e:	001a      	movs	r2, r3
    e340:	495c      	ldr	r1, [pc, #368]	; (e4b4 <hif_isr+0x3a0>)
    e342:	4b5d      	ldr	r3, [pc, #372]	; (e4b8 <hif_isr+0x3a4>)
    e344:	0018      	movs	r0, r3
    e346:	4b5d      	ldr	r3, [pc, #372]	; (e4bc <hif_isr+0x3a8>)
    e348:	4798      	blx	r3
    e34a:	4b63      	ldr	r3, [pc, #396]	; (e4d8 <hif_isr+0x3c4>)
    e34c:	0018      	movs	r0, r3
    e34e:	4b5b      	ldr	r3, [pc, #364]	; (e4bc <hif_isr+0x3a8>)
    e350:	4798      	blx	r3
    e352:	4b5c      	ldr	r3, [pc, #368]	; (e4c4 <hif_isr+0x3b0>)
    e354:	0018      	movs	r0, r3
    e356:	4b59      	ldr	r3, [pc, #356]	; (e4bc <hif_isr+0x3a8>)
    e358:	4798      	blx	r3
    e35a:	e0c9      	b.n	e4f0 <hif_isr+0x3dc>

				}
				else if(M2M_REQ_GROUP_OTA == strHif.u8Gid)
    e35c:	1d3b      	adds	r3, r7, #4
    e35e:	781b      	ldrb	r3, [r3, #0]
    e360:	b2db      	uxtb	r3, r3
    e362:	2b04      	cmp	r3, #4
    e364:	d122      	bne.n	e3ac <hif_isr+0x298>
				{
					if(gstrHifCxt.pfOtaCb)
    e366:	4b51      	ldr	r3, [pc, #324]	; (e4ac <hif_isr+0x398>)
    e368:	699b      	ldr	r3, [r3, #24]
    e36a:	2b00      	cmp	r3, #0
    e36c:	d00d      	beq.n	e38a <hif_isr+0x276>
						gstrHifCxt.pfOtaCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
    e36e:	4b4f      	ldr	r3, [pc, #316]	; (e4ac <hif_isr+0x398>)
    e370:	699b      	ldr	r3, [r3, #24]
    e372:	1d3a      	adds	r2, r7, #4
    e374:	7852      	ldrb	r2, [r2, #1]
    e376:	b2d0      	uxtb	r0, r2
    e378:	1d3a      	adds	r2, r7, #4
    e37a:	8852      	ldrh	r2, [r2, #2]
    e37c:	b292      	uxth	r2, r2
    e37e:	3a08      	subs	r2, #8
    e380:	b291      	uxth	r1, r2
    e382:	683a      	ldr	r2, [r7, #0]
    e384:	3208      	adds	r2, #8
    e386:	4798      	blx	r3
    e388:	e0b2      	b.n	e4f0 <hif_isr+0x3dc>
					else
						M2M_ERR("Ota callback is not registered\n");
    e38a:	23f8      	movs	r3, #248	; 0xf8
    e38c:	33ff      	adds	r3, #255	; 0xff
    e38e:	001a      	movs	r2, r3
    e390:	4948      	ldr	r1, [pc, #288]	; (e4b4 <hif_isr+0x3a0>)
    e392:	4b49      	ldr	r3, [pc, #292]	; (e4b8 <hif_isr+0x3a4>)
    e394:	0018      	movs	r0, r3
    e396:	4b49      	ldr	r3, [pc, #292]	; (e4bc <hif_isr+0x3a8>)
    e398:	4798      	blx	r3
    e39a:	4b50      	ldr	r3, [pc, #320]	; (e4dc <hif_isr+0x3c8>)
    e39c:	0018      	movs	r0, r3
    e39e:	4b47      	ldr	r3, [pc, #284]	; (e4bc <hif_isr+0x3a8>)
    e3a0:	4798      	blx	r3
    e3a2:	4b48      	ldr	r3, [pc, #288]	; (e4c4 <hif_isr+0x3b0>)
    e3a4:	0018      	movs	r0, r3
    e3a6:	4b45      	ldr	r3, [pc, #276]	; (e4bc <hif_isr+0x3a8>)
    e3a8:	4798      	blx	r3
    e3aa:	e0a1      	b.n	e4f0 <hif_isr+0x3dc>

				}
				else if(M2M_REQ_GROUP_CRYPTO == strHif.u8Gid)
    e3ac:	1d3b      	adds	r3, r7, #4
    e3ae:	781b      	ldrb	r3, [r3, #0]
    e3b0:	b2db      	uxtb	r3, r3
    e3b2:	2b06      	cmp	r3, #6
    e3b4:	d121      	bne.n	e3fa <hif_isr+0x2e6>
				{
					if(gstrHifCxt.pfCryptoCb)
    e3b6:	4b3d      	ldr	r3, [pc, #244]	; (e4ac <hif_isr+0x398>)
    e3b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    e3ba:	2b00      	cmp	r3, #0
    e3bc:	d00d      	beq.n	e3da <hif_isr+0x2c6>
						gstrHifCxt.pfCryptoCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
    e3be:	4b3b      	ldr	r3, [pc, #236]	; (e4ac <hif_isr+0x398>)
    e3c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    e3c2:	1d3a      	adds	r2, r7, #4
    e3c4:	7852      	ldrb	r2, [r2, #1]
    e3c6:	b2d0      	uxtb	r0, r2
    e3c8:	1d3a      	adds	r2, r7, #4
    e3ca:	8852      	ldrh	r2, [r2, #2]
    e3cc:	b292      	uxth	r2, r2
    e3ce:	3a08      	subs	r2, #8
    e3d0:	b291      	uxth	r1, r2
    e3d2:	683a      	ldr	r2, [r7, #0]
    e3d4:	3208      	adds	r2, #8
    e3d6:	4798      	blx	r3
    e3d8:	e08a      	b.n	e4f0 <hif_isr+0x3dc>

					else
						M2M_ERR("Crypto callback is not registered\n");
    e3da:	2380      	movs	r3, #128	; 0x80
    e3dc:	009a      	lsls	r2, r3, #2
    e3de:	4935      	ldr	r1, [pc, #212]	; (e4b4 <hif_isr+0x3a0>)
    e3e0:	4b35      	ldr	r3, [pc, #212]	; (e4b8 <hif_isr+0x3a4>)
    e3e2:	0018      	movs	r0, r3
    e3e4:	4b35      	ldr	r3, [pc, #212]	; (e4bc <hif_isr+0x3a8>)
    e3e6:	4798      	blx	r3
    e3e8:	4b3d      	ldr	r3, [pc, #244]	; (e4e0 <hif_isr+0x3cc>)
    e3ea:	0018      	movs	r0, r3
    e3ec:	4b33      	ldr	r3, [pc, #204]	; (e4bc <hif_isr+0x3a8>)
    e3ee:	4798      	blx	r3
    e3f0:	4b34      	ldr	r3, [pc, #208]	; (e4c4 <hif_isr+0x3b0>)
    e3f2:	0018      	movs	r0, r3
    e3f4:	4b31      	ldr	r3, [pc, #196]	; (e4bc <hif_isr+0x3a8>)
    e3f6:	4798      	blx	r3
    e3f8:	e07a      	b.n	e4f0 <hif_isr+0x3dc>
				}
				else if(M2M_REQ_GROUP_SIGMA == strHif.u8Gid)
    e3fa:	1d3b      	adds	r3, r7, #4
    e3fc:	781b      	ldrb	r3, [r3, #0]
    e3fe:	b2db      	uxtb	r3, r3
    e400:	2b07      	cmp	r3, #7
    e402:	d120      	bne.n	e446 <hif_isr+0x332>
				{
					if(gstrHifCxt.pfSigmaCb)
    e404:	4b29      	ldr	r3, [pc, #164]	; (e4ac <hif_isr+0x398>)
    e406:	69db      	ldr	r3, [r3, #28]
    e408:	2b00      	cmp	r3, #0
    e40a:	d00d      	beq.n	e428 <hif_isr+0x314>
						gstrHifCxt.pfSigmaCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
    e40c:	4b27      	ldr	r3, [pc, #156]	; (e4ac <hif_isr+0x398>)
    e40e:	69db      	ldr	r3, [r3, #28]
    e410:	1d3a      	adds	r2, r7, #4
    e412:	7852      	ldrb	r2, [r2, #1]
    e414:	b2d0      	uxtb	r0, r2
    e416:	1d3a      	adds	r2, r7, #4
    e418:	8852      	ldrh	r2, [r2, #2]
    e41a:	b292      	uxth	r2, r2
    e41c:	3a08      	subs	r2, #8
    e41e:	b291      	uxth	r1, r2
    e420:	683a      	ldr	r2, [r7, #0]
    e422:	3208      	adds	r2, #8
    e424:	4798      	blx	r3
    e426:	e063      	b.n	e4f0 <hif_isr+0x3dc>
					else
						M2M_ERR("Sigma callback is not registered\n");
    e428:	4a2e      	ldr	r2, [pc, #184]	; (e4e4 <hif_isr+0x3d0>)
    e42a:	4922      	ldr	r1, [pc, #136]	; (e4b4 <hif_isr+0x3a0>)
    e42c:	4b22      	ldr	r3, [pc, #136]	; (e4b8 <hif_isr+0x3a4>)
    e42e:	0018      	movs	r0, r3
    e430:	4b22      	ldr	r3, [pc, #136]	; (e4bc <hif_isr+0x3a8>)
    e432:	4798      	blx	r3
    e434:	4b2c      	ldr	r3, [pc, #176]	; (e4e8 <hif_isr+0x3d4>)
    e436:	0018      	movs	r0, r3
    e438:	4b20      	ldr	r3, [pc, #128]	; (e4bc <hif_isr+0x3a8>)
    e43a:	4798      	blx	r3
    e43c:	4b21      	ldr	r3, [pc, #132]	; (e4c4 <hif_isr+0x3b0>)
    e43e:	0018      	movs	r0, r3
    e440:	4b1e      	ldr	r3, [pc, #120]	; (e4bc <hif_isr+0x3a8>)
    e442:	4798      	blx	r3
    e444:	e054      	b.n	e4f0 <hif_isr+0x3dc>
				}
				else if(M2M_REQ_GROUP_SSL == strHif.u8Gid)
    e446:	1d3b      	adds	r3, r7, #4
    e448:	781b      	ldrb	r3, [r3, #0]
    e44a:	b2db      	uxtb	r3, r3
    e44c:	2b05      	cmp	r3, #5
    e44e:	d111      	bne.n	e474 <hif_isr+0x360>
				{
				    if(gstrHifCxt.pfSslCb)
    e450:	4b16      	ldr	r3, [pc, #88]	; (e4ac <hif_isr+0x398>)
    e452:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    e454:	2b00      	cmp	r3, #0
    e456:	d04b      	beq.n	e4f0 <hif_isr+0x3dc>
						gstrHifCxt.pfSslCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
    e458:	4b14      	ldr	r3, [pc, #80]	; (e4ac <hif_isr+0x398>)
    e45a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    e45c:	1d3a      	adds	r2, r7, #4
    e45e:	7852      	ldrb	r2, [r2, #1]
    e460:	b2d0      	uxtb	r0, r2
    e462:	1d3a      	adds	r2, r7, #4
    e464:	8852      	ldrh	r2, [r2, #2]
    e466:	b292      	uxth	r2, r2
    e468:	3a08      	subs	r2, #8
    e46a:	b291      	uxth	r1, r2
    e46c:	683a      	ldr	r2, [r7, #0]
    e46e:	3208      	adds	r2, #8
    e470:	4798      	blx	r3
    e472:	e03d      	b.n	e4f0 <hif_isr+0x3dc>
				}
				else
				{
					M2M_ERR("(hif) invalid group ID\n");
    e474:	2384      	movs	r3, #132	; 0x84
    e476:	009a      	lsls	r2, r3, #2
    e478:	490e      	ldr	r1, [pc, #56]	; (e4b4 <hif_isr+0x3a0>)
    e47a:	4b0f      	ldr	r3, [pc, #60]	; (e4b8 <hif_isr+0x3a4>)
    e47c:	0018      	movs	r0, r3
    e47e:	4b0f      	ldr	r3, [pc, #60]	; (e4bc <hif_isr+0x3a8>)
    e480:	4798      	blx	r3
    e482:	4b1a      	ldr	r3, [pc, #104]	; (e4ec <hif_isr+0x3d8>)
    e484:	0018      	movs	r0, r3
    e486:	4b0d      	ldr	r3, [pc, #52]	; (e4bc <hif_isr+0x3a8>)
    e488:	4798      	blx	r3
    e48a:	4b0e      	ldr	r3, [pc, #56]	; (e4c4 <hif_isr+0x3b0>)
    e48c:	0018      	movs	r0, r3
    e48e:	4b0b      	ldr	r3, [pc, #44]	; (e4bc <hif_isr+0x3a8>)
    e490:	4798      	blx	r3
					ret = M2M_ERR_BUS_FAIL;
    e492:	230f      	movs	r3, #15
    e494:	18fb      	adds	r3, r7, r3
    e496:	22fa      	movs	r2, #250	; 0xfa
    e498:	701a      	strb	r2, [r3, #0]
					goto ERR1;
    e49a:	e083      	b.n	e5a4 <hif_isr+0x490>
    e49c:	00001070 	.word	0x00001070
    e4a0:	0000fba1 	.word	0x0000fba1
    e4a4:	0000d2c5 	.word	0x0000d2c5
    e4a8:	0000fbc5 	.word	0x0000fbc5
    e4ac:	200054b4 	.word	0x200054b4
    e4b0:	00001084 	.word	0x00001084
    e4b4:	000251b8 	.word	0x000251b8
    e4b8:	00024ea8 	.word	0x00024ea8
    e4bc:	0000addd 	.word	0x0000addd
    e4c0:	00024edc 	.word	0x00024edc
    e4c4:	00024ea4 	.word	0x00024ea4
    e4c8:	0000fc15 	.word	0x0000fc15
    e4cc:	00024f04 	.word	0x00024f04
    e4d0:	00024f1c 	.word	0x00024f1c
    e4d4:	00024f5c 	.word	0x00024f5c
    e4d8:	00024f80 	.word	0x00024f80
    e4dc:	00024fa4 	.word	0x00024fa4
    e4e0:	00024fc4 	.word	0x00024fc4
    e4e4:	00000207 	.word	0x00000207
    e4e8:	00024fe8 	.word	0x00024fe8
    e4ec:	0002500c 	.word	0x0002500c
				}
				if(gstrHifCxt.u8HifRXDone)
    e4f0:	4b30      	ldr	r3, [pc, #192]	; (e5b4 <hif_isr+0x4a0>)
    e4f2:	789b      	ldrb	r3, [r3, #2]
    e4f4:	b2db      	uxtb	r3, r3
    e4f6:	2b00      	cmp	r3, #0
    e4f8:	d054      	beq.n	e5a4 <hif_isr+0x490>
				{
					M2M_ERR("(hif) host app didn't set RX Done <%u><%X>\n", strHif.u8Gid, strHif.u8Opcode);
    e4fa:	4a2f      	ldr	r2, [pc, #188]	; (e5b8 <hif_isr+0x4a4>)
    e4fc:	492f      	ldr	r1, [pc, #188]	; (e5bc <hif_isr+0x4a8>)
    e4fe:	4b30      	ldr	r3, [pc, #192]	; (e5c0 <hif_isr+0x4ac>)
    e500:	0018      	movs	r0, r3
    e502:	4b30      	ldr	r3, [pc, #192]	; (e5c4 <hif_isr+0x4b0>)
    e504:	4798      	blx	r3
    e506:	1d3b      	adds	r3, r7, #4
    e508:	781b      	ldrb	r3, [r3, #0]
    e50a:	b2db      	uxtb	r3, r3
    e50c:	0019      	movs	r1, r3
    e50e:	1d3b      	adds	r3, r7, #4
    e510:	785b      	ldrb	r3, [r3, #1]
    e512:	b2db      	uxtb	r3, r3
    e514:	001a      	movs	r2, r3
    e516:	4b2c      	ldr	r3, [pc, #176]	; (e5c8 <hif_isr+0x4b4>)
    e518:	0018      	movs	r0, r3
    e51a:	4b2a      	ldr	r3, [pc, #168]	; (e5c4 <hif_isr+0x4b0>)
    e51c:	4798      	blx	r3
    e51e:	4b2b      	ldr	r3, [pc, #172]	; (e5cc <hif_isr+0x4b8>)
    e520:	0018      	movs	r0, r3
    e522:	4b28      	ldr	r3, [pc, #160]	; (e5c4 <hif_isr+0x4b0>)
    e524:	4798      	blx	r3
					ret = hif_set_rx_done();
    e526:	230f      	movs	r3, #15
    e528:	18fc      	adds	r4, r7, r3
    e52a:	4b29      	ldr	r3, [pc, #164]	; (e5d0 <hif_isr+0x4bc>)
    e52c:	4798      	blx	r3
    e52e:	0003      	movs	r3, r0
    e530:	7023      	strb	r3, [r4, #0]
    e532:	e037      	b.n	e5a4 <hif_isr+0x490>
					if(ret != M2M_SUCCESS) goto ERR1;
				}
			}
			else
			{
				M2M_ERR("(hif) Wrong Size\n");
    e534:	4a27      	ldr	r2, [pc, #156]	; (e5d4 <hif_isr+0x4c0>)
    e536:	4921      	ldr	r1, [pc, #132]	; (e5bc <hif_isr+0x4a8>)
    e538:	4b21      	ldr	r3, [pc, #132]	; (e5c0 <hif_isr+0x4ac>)
    e53a:	0018      	movs	r0, r3
    e53c:	4b21      	ldr	r3, [pc, #132]	; (e5c4 <hif_isr+0x4b0>)
    e53e:	4798      	blx	r3
    e540:	4b25      	ldr	r3, [pc, #148]	; (e5d8 <hif_isr+0x4c4>)
    e542:	0018      	movs	r0, r3
    e544:	4b1f      	ldr	r3, [pc, #124]	; (e5c4 <hif_isr+0x4b0>)
    e546:	4798      	blx	r3
    e548:	4b20      	ldr	r3, [pc, #128]	; (e5cc <hif_isr+0x4b8>)
    e54a:	0018      	movs	r0, r3
    e54c:	4b1d      	ldr	r3, [pc, #116]	; (e5c4 <hif_isr+0x4b0>)
    e54e:	4798      	blx	r3
				ret = M2M_ERR_RCV;
    e550:	230f      	movs	r3, #15
    e552:	18fb      	adds	r3, r7, r3
    e554:	22fe      	movs	r2, #254	; 0xfe
    e556:	701a      	strb	r2, [r3, #0]
				goto ERR1;
    e558:	e024      	b.n	e5a4 <hif_isr+0x490>
			}
		}
		else
		{
#ifndef WIN32
			M2M_ERR("(hif) False interrupt %lx",reg);
    e55a:	4a20      	ldr	r2, [pc, #128]	; (e5dc <hif_isr+0x4c8>)
    e55c:	4917      	ldr	r1, [pc, #92]	; (e5bc <hif_isr+0x4a8>)
    e55e:	4b18      	ldr	r3, [pc, #96]	; (e5c0 <hif_isr+0x4ac>)
    e560:	0018      	movs	r0, r3
    e562:	4b18      	ldr	r3, [pc, #96]	; (e5c4 <hif_isr+0x4b0>)
    e564:	4798      	blx	r3
    e566:	68ba      	ldr	r2, [r7, #8]
    e568:	4b1d      	ldr	r3, [pc, #116]	; (e5e0 <hif_isr+0x4cc>)
    e56a:	0011      	movs	r1, r2
    e56c:	0018      	movs	r0, r3
    e56e:	4b15      	ldr	r3, [pc, #84]	; (e5c4 <hif_isr+0x4b0>)
    e570:	4798      	blx	r3
    e572:	4b16      	ldr	r3, [pc, #88]	; (e5cc <hif_isr+0x4b8>)
    e574:	0018      	movs	r0, r3
    e576:	4b13      	ldr	r3, [pc, #76]	; (e5c4 <hif_isr+0x4b0>)
    e578:	4798      	blx	r3
			ret = M2M_ERR_FAIL;
    e57a:	230f      	movs	r3, #15
    e57c:	18fb      	adds	r3, r7, r3
    e57e:	22f4      	movs	r2, #244	; 0xf4
    e580:	701a      	strb	r2, [r3, #0]
			goto ERR1;
    e582:	e00f      	b.n	e5a4 <hif_isr+0x490>
#endif
		}
	}
	else
	{
		M2M_ERR("(hif) Fail to Read interrupt reg\n");
    e584:	4a17      	ldr	r2, [pc, #92]	; (e5e4 <hif_isr+0x4d0>)
    e586:	490d      	ldr	r1, [pc, #52]	; (e5bc <hif_isr+0x4a8>)
    e588:	4b0d      	ldr	r3, [pc, #52]	; (e5c0 <hif_isr+0x4ac>)
    e58a:	0018      	movs	r0, r3
    e58c:	4b0d      	ldr	r3, [pc, #52]	; (e5c4 <hif_isr+0x4b0>)
    e58e:	4798      	blx	r3
    e590:	4b15      	ldr	r3, [pc, #84]	; (e5e8 <hif_isr+0x4d4>)
    e592:	0018      	movs	r0, r3
    e594:	4b0b      	ldr	r3, [pc, #44]	; (e5c4 <hif_isr+0x4b0>)
    e596:	4798      	blx	r3
    e598:	4b0c      	ldr	r3, [pc, #48]	; (e5cc <hif_isr+0x4b8>)
    e59a:	0018      	movs	r0, r3
    e59c:	4b09      	ldr	r3, [pc, #36]	; (e5c4 <hif_isr+0x4b0>)
    e59e:	4798      	blx	r3
		goto ERR1;
    e5a0:	e000      	b.n	e5a4 <hif_isr+0x490>
			if(ret != M2M_SUCCESS)goto ERR1;
    e5a2:	46c0      	nop			; (mov r8, r8)
	}

ERR1:
	return ret;
    e5a4:	230f      	movs	r3, #15
    e5a6:	18fb      	adds	r3, r7, r3
    e5a8:	781b      	ldrb	r3, [r3, #0]
    e5aa:	b25b      	sxtb	r3, r3
}
    e5ac:	0018      	movs	r0, r3
    e5ae:	46bd      	mov	sp, r7
    e5b0:	b005      	add	sp, #20
    e5b2:	bd90      	pop	{r4, r7, pc}
    e5b4:	200054b4 	.word	0x200054b4
    e5b8:	00000216 	.word	0x00000216
    e5bc:	000251b8 	.word	0x000251b8
    e5c0:	00024ea8 	.word	0x00024ea8
    e5c4:	0000addd 	.word	0x0000addd
    e5c8:	00025024 	.word	0x00025024
    e5cc:	00024ea4 	.word	0x00024ea4
    e5d0:	0000dba9 	.word	0x0000dba9
    e5d4:	0000021d 	.word	0x0000021d
    e5d8:	00025050 	.word	0x00025050
    e5dc:	00000225 	.word	0x00000225
    e5e0:	00025064 	.word	0x00025064
    e5e4:	0000022e 	.word	0x0000022e
    e5e8:	00025080 	.word	0x00025080

0000e5ec <hif_handle_isr>:
*	@brief	Handle interrupt received from NMC1500 firmware.
*   @return     The function SHALL return 0 for success and a negative value otherwise.
*/

sint8 hif_handle_isr(void)
{
    e5ec:	b590      	push	{r4, r7, lr}
    e5ee:	b083      	sub	sp, #12
    e5f0:	af00      	add	r7, sp, #0
	sint8 ret = M2M_SUCCESS;	
    e5f2:	1dfb      	adds	r3, r7, #7
    e5f4:	2200      	movs	r2, #0
    e5f6:	701a      	strb	r2, [r3, #0]
	
	gstrHifCxt.u8Yield = 0;
    e5f8:	4b1c      	ldr	r3, [pc, #112]	; (e66c <hif_handle_isr+0x80>)
    e5fa:	2200      	movs	r2, #0
    e5fc:	711a      	strb	r2, [r3, #4]
	while (gstrHifCxt.u8Interrupt && !gstrHifCxt.u8Yield) {
    e5fe:	e024      	b.n	e64a <hif_handle_isr+0x5e>
		/*must be at that place because of the race of interrupt increment and that decrement*/
		/*when the interrupt enabled*/
		gstrHifCxt.u8Interrupt--;
    e600:	4b1a      	ldr	r3, [pc, #104]	; (e66c <hif_handle_isr+0x80>)
    e602:	78db      	ldrb	r3, [r3, #3]
    e604:	b2db      	uxtb	r3, r3
    e606:	3b01      	subs	r3, #1
    e608:	b2da      	uxtb	r2, r3
    e60a:	4b18      	ldr	r3, [pc, #96]	; (e66c <hif_handle_isr+0x80>)
    e60c:	70da      	strb	r2, [r3, #3]
		while(1)
		{
			ret = hif_isr();
    e60e:	1dfc      	adds	r4, r7, #7
    e610:	4b17      	ldr	r3, [pc, #92]	; (e670 <hif_handle_isr+0x84>)
    e612:	4798      	blx	r3
    e614:	0003      	movs	r3, r0
    e616:	7023      	strb	r3, [r4, #0]
			if(ret == M2M_SUCCESS) {
    e618:	1dfb      	adds	r3, r7, #7
    e61a:	781b      	ldrb	r3, [r3, #0]
    e61c:	b25b      	sxtb	r3, r3
    e61e:	2b00      	cmp	r3, #0
    e620:	d100      	bne.n	e624 <hif_handle_isr+0x38>
				/*we will try forever untill we get that interrupt*/
				/*Fail return errors here due to bus errors (reading expected values)*/
				break;
    e622:	e012      	b.n	e64a <hif_handle_isr+0x5e>
			} else {
				M2M_ERR("(HIF) Fail to handle interrupt %d try Again..\n",ret);
    e624:	4a13      	ldr	r2, [pc, #76]	; (e674 <hif_handle_isr+0x88>)
    e626:	4914      	ldr	r1, [pc, #80]	; (e678 <hif_handle_isr+0x8c>)
    e628:	4b14      	ldr	r3, [pc, #80]	; (e67c <hif_handle_isr+0x90>)
    e62a:	0018      	movs	r0, r3
    e62c:	4b14      	ldr	r3, [pc, #80]	; (e680 <hif_handle_isr+0x94>)
    e62e:	4798      	blx	r3
    e630:	1dfb      	adds	r3, r7, #7
    e632:	2200      	movs	r2, #0
    e634:	569a      	ldrsb	r2, [r3, r2]
    e636:	4b13      	ldr	r3, [pc, #76]	; (e684 <hif_handle_isr+0x98>)
    e638:	0011      	movs	r1, r2
    e63a:	0018      	movs	r0, r3
    e63c:	4b10      	ldr	r3, [pc, #64]	; (e680 <hif_handle_isr+0x94>)
    e63e:	4798      	blx	r3
    e640:	4b11      	ldr	r3, [pc, #68]	; (e688 <hif_handle_isr+0x9c>)
    e642:	0018      	movs	r0, r3
    e644:	4b0e      	ldr	r3, [pc, #56]	; (e680 <hif_handle_isr+0x94>)
    e646:	4798      	blx	r3
			ret = hif_isr();
    e648:	e7e1      	b.n	e60e <hif_handle_isr+0x22>
	while (gstrHifCxt.u8Interrupt && !gstrHifCxt.u8Yield) {
    e64a:	4b08      	ldr	r3, [pc, #32]	; (e66c <hif_handle_isr+0x80>)
    e64c:	78db      	ldrb	r3, [r3, #3]
    e64e:	b2db      	uxtb	r3, r3
    e650:	2b00      	cmp	r3, #0
    e652:	d004      	beq.n	e65e <hif_handle_isr+0x72>
    e654:	4b05      	ldr	r3, [pc, #20]	; (e66c <hif_handle_isr+0x80>)
    e656:	791b      	ldrb	r3, [r3, #4]
    e658:	b2db      	uxtb	r3, r3
    e65a:	2b00      	cmp	r3, #0
    e65c:	d0d0      	beq.n	e600 <hif_handle_isr+0x14>
			}
		}
	}

	return ret;
    e65e:	1dfb      	adds	r3, r7, #7
    e660:	781b      	ldrb	r3, [r3, #0]
    e662:	b25b      	sxtb	r3, r3
}
    e664:	0018      	movs	r0, r3
    e666:	46bd      	mov	sp, r7
    e668:	b003      	add	sp, #12
    e66a:	bd90      	pop	{r4, r7, pc}
    e66c:	200054b4 	.word	0x200054b4
    e670:	0000e115 	.word	0x0000e115
    e674:	00000257 	.word	0x00000257
    e678:	000251c0 	.word	0x000251c0
    e67c:	00024ea8 	.word	0x00024ea8
    e680:	0000addd 	.word	0x0000addd
    e684:	000250a4 	.word	0x000250a4
    e688:	00024ea4 	.word	0x00024ea4

0000e68c <hif_receive>:
*	@param [in]	isDone
*				If you don't need any more packets send True otherwise send false
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/
sint8 hif_receive(uint32 u32Addr, uint8 *pu8Buf, uint16 u16Sz, uint8 isDone)
{
    e68c:	b590      	push	{r4, r7, lr}
    e68e:	b087      	sub	sp, #28
    e690:	af00      	add	r7, sp, #0
    e692:	60f8      	str	r0, [r7, #12]
    e694:	60b9      	str	r1, [r7, #8]
    e696:	0019      	movs	r1, r3
    e698:	1dbb      	adds	r3, r7, #6
    e69a:	801a      	strh	r2, [r3, #0]
    e69c:	1d7b      	adds	r3, r7, #5
    e69e:	1c0a      	adds	r2, r1, #0
    e6a0:	701a      	strb	r2, [r3, #0]
	sint8 ret = M2M_SUCCESS;
    e6a2:	2317      	movs	r3, #23
    e6a4:	18fb      	adds	r3, r7, r3
    e6a6:	2200      	movs	r2, #0
    e6a8:	701a      	strb	r2, [r3, #0]
	if((u32Addr == 0)||(pu8Buf == NULL) || (u16Sz == 0))
    e6aa:	68fb      	ldr	r3, [r7, #12]
    e6ac:	2b00      	cmp	r3, #0
    e6ae:	d006      	beq.n	e6be <hif_receive+0x32>
    e6b0:	68bb      	ldr	r3, [r7, #8]
    e6b2:	2b00      	cmp	r3, #0
    e6b4:	d003      	beq.n	e6be <hif_receive+0x32>
    e6b6:	1dbb      	adds	r3, r7, #6
    e6b8:	881b      	ldrh	r3, [r3, #0]
    e6ba:	2b00      	cmp	r3, #0
    e6bc:	d11e      	bne.n	e6fc <hif_receive+0x70>
	{
		if(isDone)
    e6be:	1d7b      	adds	r3, r7, #5
    e6c0:	781b      	ldrb	r3, [r3, #0]
    e6c2:	2b00      	cmp	r3, #0
    e6c4:	d006      	beq.n	e6d4 <hif_receive+0x48>
		{			
			/* set RX done */
			ret = hif_set_rx_done();
    e6c6:	2317      	movs	r3, #23
    e6c8:	18fc      	adds	r4, r7, r3
    e6ca:	4b45      	ldr	r3, [pc, #276]	; (e7e0 <hif_receive+0x154>)
    e6cc:	4798      	blx	r3
    e6ce:	0003      	movs	r3, r0
    e6d0:	7023      	strb	r3, [r4, #0]
		else
		{
			ret = M2M_ERR_FAIL;
			M2M_ERR(" hif_receive: Invalid argument\n");
		}
		goto ERR1;
    e6d2:	e07c      	b.n	e7ce <hif_receive+0x142>
			ret = M2M_ERR_FAIL;
    e6d4:	2317      	movs	r3, #23
    e6d6:	18fb      	adds	r3, r7, r3
    e6d8:	22f4      	movs	r2, #244	; 0xf4
    e6da:	701a      	strb	r2, [r3, #0]
			M2M_ERR(" hif_receive: Invalid argument\n");
    e6dc:	239e      	movs	r3, #158	; 0x9e
    e6de:	009a      	lsls	r2, r3, #2
    e6e0:	4940      	ldr	r1, [pc, #256]	; (e7e4 <hif_receive+0x158>)
    e6e2:	4b41      	ldr	r3, [pc, #260]	; (e7e8 <hif_receive+0x15c>)
    e6e4:	0018      	movs	r0, r3
    e6e6:	4b41      	ldr	r3, [pc, #260]	; (e7ec <hif_receive+0x160>)
    e6e8:	4798      	blx	r3
    e6ea:	4b41      	ldr	r3, [pc, #260]	; (e7f0 <hif_receive+0x164>)
    e6ec:	0018      	movs	r0, r3
    e6ee:	4b3f      	ldr	r3, [pc, #252]	; (e7ec <hif_receive+0x160>)
    e6f0:	4798      	blx	r3
    e6f2:	4b40      	ldr	r3, [pc, #256]	; (e7f4 <hif_receive+0x168>)
    e6f4:	0018      	movs	r0, r3
    e6f6:	4b3d      	ldr	r3, [pc, #244]	; (e7ec <hif_receive+0x160>)
    e6f8:	4798      	blx	r3
		goto ERR1;
    e6fa:	e068      	b.n	e7ce <hif_receive+0x142>
	}

	if(u16Sz > gstrHifCxt.u32RxSize)
    e6fc:	1dbb      	adds	r3, r7, #6
    e6fe:	881a      	ldrh	r2, [r3, #0]
    e700:	4b3d      	ldr	r3, [pc, #244]	; (e7f8 <hif_receive+0x16c>)
    e702:	68db      	ldr	r3, [r3, #12]
    e704:	429a      	cmp	r2, r3
    e706:	d917      	bls.n	e738 <hif_receive+0xac>
	{
		ret = M2M_ERR_FAIL;
    e708:	2317      	movs	r3, #23
    e70a:	18fb      	adds	r3, r7, r3
    e70c:	22f4      	movs	r2, #244	; 0xf4
    e70e:	701a      	strb	r2, [r3, #0]
		M2M_ERR("APP Requested Size is larger than the recived buffer size <%u><%lu>\n",u16Sz, gstrHifCxt.u32RxSize);
    e710:	23a0      	movs	r3, #160	; 0xa0
    e712:	009a      	lsls	r2, r3, #2
    e714:	4933      	ldr	r1, [pc, #204]	; (e7e4 <hif_receive+0x158>)
    e716:	4b34      	ldr	r3, [pc, #208]	; (e7e8 <hif_receive+0x15c>)
    e718:	0018      	movs	r0, r3
    e71a:	4b34      	ldr	r3, [pc, #208]	; (e7ec <hif_receive+0x160>)
    e71c:	4798      	blx	r3
    e71e:	1dbb      	adds	r3, r7, #6
    e720:	8819      	ldrh	r1, [r3, #0]
    e722:	4b35      	ldr	r3, [pc, #212]	; (e7f8 <hif_receive+0x16c>)
    e724:	68da      	ldr	r2, [r3, #12]
    e726:	4b35      	ldr	r3, [pc, #212]	; (e7fc <hif_receive+0x170>)
    e728:	0018      	movs	r0, r3
    e72a:	4b30      	ldr	r3, [pc, #192]	; (e7ec <hif_receive+0x160>)
    e72c:	4798      	blx	r3
    e72e:	4b31      	ldr	r3, [pc, #196]	; (e7f4 <hif_receive+0x168>)
    e730:	0018      	movs	r0, r3
    e732:	4b2e      	ldr	r3, [pc, #184]	; (e7ec <hif_receive+0x160>)
    e734:	4798      	blx	r3
		goto ERR1;
    e736:	e04a      	b.n	e7ce <hif_receive+0x142>
	}
	if((u32Addr < gstrHifCxt.u32RxAddr)||((u32Addr + u16Sz)>(gstrHifCxt.u32RxAddr + gstrHifCxt.u32RxSize)))
    e738:	4b2f      	ldr	r3, [pc, #188]	; (e7f8 <hif_receive+0x16c>)
    e73a:	689a      	ldr	r2, [r3, #8]
    e73c:	68fb      	ldr	r3, [r7, #12]
    e73e:	429a      	cmp	r2, r3
    e740:	d80a      	bhi.n	e758 <hif_receive+0xcc>
    e742:	1dbb      	adds	r3, r7, #6
    e744:	881a      	ldrh	r2, [r3, #0]
    e746:	68fb      	ldr	r3, [r7, #12]
    e748:	18d2      	adds	r2, r2, r3
    e74a:	4b2b      	ldr	r3, [pc, #172]	; (e7f8 <hif_receive+0x16c>)
    e74c:	6899      	ldr	r1, [r3, #8]
    e74e:	4b2a      	ldr	r3, [pc, #168]	; (e7f8 <hif_receive+0x16c>)
    e750:	68db      	ldr	r3, [r3, #12]
    e752:	18cb      	adds	r3, r1, r3
    e754:	429a      	cmp	r2, r3
    e756:	d912      	bls.n	e77e <hif_receive+0xf2>
	{
		ret = M2M_ERR_FAIL;
    e758:	2317      	movs	r3, #23
    e75a:	18fb      	adds	r3, r7, r3
    e75c:	22f4      	movs	r2, #244	; 0xf4
    e75e:	701a      	strb	r2, [r3, #0]
		M2M_ERR("APP Requested Address beyond the recived buffer address and length\n");
    e760:	4a27      	ldr	r2, [pc, #156]	; (e800 <hif_receive+0x174>)
    e762:	4920      	ldr	r1, [pc, #128]	; (e7e4 <hif_receive+0x158>)
    e764:	4b20      	ldr	r3, [pc, #128]	; (e7e8 <hif_receive+0x15c>)
    e766:	0018      	movs	r0, r3
    e768:	4b20      	ldr	r3, [pc, #128]	; (e7ec <hif_receive+0x160>)
    e76a:	4798      	blx	r3
    e76c:	4b25      	ldr	r3, [pc, #148]	; (e804 <hif_receive+0x178>)
    e76e:	0018      	movs	r0, r3
    e770:	4b1e      	ldr	r3, [pc, #120]	; (e7ec <hif_receive+0x160>)
    e772:	4798      	blx	r3
    e774:	4b1f      	ldr	r3, [pc, #124]	; (e7f4 <hif_receive+0x168>)
    e776:	0018      	movs	r0, r3
    e778:	4b1c      	ldr	r3, [pc, #112]	; (e7ec <hif_receive+0x160>)
    e77a:	4798      	blx	r3
		goto ERR1;
    e77c:	e027      	b.n	e7ce <hif_receive+0x142>
	}
	
	/* Receive the payload */
	ret = nm_read_block(u32Addr, pu8Buf, u16Sz);
    e77e:	1dbb      	adds	r3, r7, #6
    e780:	881a      	ldrh	r2, [r3, #0]
    e782:	2317      	movs	r3, #23
    e784:	18fc      	adds	r4, r7, r3
    e786:	68b9      	ldr	r1, [r7, #8]
    e788:	68fb      	ldr	r3, [r7, #12]
    e78a:	0018      	movs	r0, r3
    e78c:	4b1e      	ldr	r3, [pc, #120]	; (e808 <hif_receive+0x17c>)
    e78e:	4798      	blx	r3
    e790:	0003      	movs	r3, r0
    e792:	7023      	strb	r3, [r4, #0]
	if(ret != M2M_SUCCESS)goto ERR1;
    e794:	2317      	movs	r3, #23
    e796:	18fb      	adds	r3, r7, r3
    e798:	781b      	ldrb	r3, [r3, #0]
    e79a:	b25b      	sxtb	r3, r3
    e79c:	2b00      	cmp	r3, #0
    e79e:	d115      	bne.n	e7cc <hif_receive+0x140>

	/* check if this is the last packet */
	if((((gstrHifCxt.u32RxAddr + gstrHifCxt.u32RxSize) - (u32Addr + u16Sz)) <= 0) || isDone)
    e7a0:	4b15      	ldr	r3, [pc, #84]	; (e7f8 <hif_receive+0x16c>)
    e7a2:	689a      	ldr	r2, [r3, #8]
    e7a4:	4b14      	ldr	r3, [pc, #80]	; (e7f8 <hif_receive+0x16c>)
    e7a6:	68db      	ldr	r3, [r3, #12]
    e7a8:	18d2      	adds	r2, r2, r3
    e7aa:	1dbb      	adds	r3, r7, #6
    e7ac:	8819      	ldrh	r1, [r3, #0]
    e7ae:	68fb      	ldr	r3, [r7, #12]
    e7b0:	18cb      	adds	r3, r1, r3
    e7b2:	429a      	cmp	r2, r3
    e7b4:	d003      	beq.n	e7be <hif_receive+0x132>
    e7b6:	1d7b      	adds	r3, r7, #5
    e7b8:	781b      	ldrb	r3, [r3, #0]
    e7ba:	2b00      	cmp	r3, #0
    e7bc:	d007      	beq.n	e7ce <hif_receive+0x142>
	{
		/* set RX done */
		ret = hif_set_rx_done();
    e7be:	2317      	movs	r3, #23
    e7c0:	18fc      	adds	r4, r7, r3
    e7c2:	4b07      	ldr	r3, [pc, #28]	; (e7e0 <hif_receive+0x154>)
    e7c4:	4798      	blx	r3
    e7c6:	0003      	movs	r3, r0
    e7c8:	7023      	strb	r3, [r4, #0]
    e7ca:	e000      	b.n	e7ce <hif_receive+0x142>
	if(ret != M2M_SUCCESS)goto ERR1;
    e7cc:	46c0      	nop			; (mov r8, r8)
	}

ERR1:
	return ret;
    e7ce:	2317      	movs	r3, #23
    e7d0:	18fb      	adds	r3, r7, r3
    e7d2:	781b      	ldrb	r3, [r3, #0]
    e7d4:	b25b      	sxtb	r3, r3
}
    e7d6:	0018      	movs	r0, r3
    e7d8:	46bd      	mov	sp, r7
    e7da:	b007      	add	sp, #28
    e7dc:	bd90      	pop	{r4, r7, pc}
    e7de:	46c0      	nop			; (mov r8, r8)
    e7e0:	0000dba9 	.word	0x0000dba9
    e7e4:	000251d0 	.word	0x000251d0
    e7e8:	00024ea8 	.word	0x00024ea8
    e7ec:	0000addd 	.word	0x0000addd
    e7f0:	000250d4 	.word	0x000250d4
    e7f4:	00024ea4 	.word	0x00024ea4
    e7f8:	200054b4 	.word	0x200054b4
    e7fc:	000250f4 	.word	0x000250f4
    e800:	00000286 	.word	0x00000286
    e804:	0002513c 	.word	0x0002513c
    e808:	0000fc15 	.word	0x0000fc15

0000e80c <hif_register_cb>:
*				function to be set
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_register_cb(uint8 u8Grp,tpfHifCallBack fn)
{
    e80c:	b580      	push	{r7, lr}
    e80e:	b084      	sub	sp, #16
    e810:	af00      	add	r7, sp, #0
    e812:	0002      	movs	r2, r0
    e814:	6039      	str	r1, [r7, #0]
    e816:	1dfb      	adds	r3, r7, #7
    e818:	701a      	strb	r2, [r3, #0]
	sint8 ret = M2M_SUCCESS;
    e81a:	230f      	movs	r3, #15
    e81c:	18fb      	adds	r3, r7, r3
    e81e:	2200      	movs	r2, #0
    e820:	701a      	strb	r2, [r3, #0]
	switch(u8Grp)
    e822:	1dfb      	adds	r3, r7, #7
    e824:	781b      	ldrb	r3, [r3, #0]
    e826:	2b07      	cmp	r3, #7
    e828:	d820      	bhi.n	e86c <hif_register_cb+0x60>
    e82a:	009a      	lsls	r2, r3, #2
    e82c:	4b1e      	ldr	r3, [pc, #120]	; (e8a8 <hif_register_cb+0x9c>)
    e82e:	18d3      	adds	r3, r2, r3
    e830:	681b      	ldr	r3, [r3, #0]
    e832:	469f      	mov	pc, r3
	{
		case M2M_REQ_GROUP_IP:
			gstrHifCxt.pfIpCb = fn;
    e834:	4b1d      	ldr	r3, [pc, #116]	; (e8ac <hif_register_cb+0xa0>)
    e836:	683a      	ldr	r2, [r7, #0]
    e838:	615a      	str	r2, [r3, #20]
			break;
    e83a:	e02d      	b.n	e898 <hif_register_cb+0x8c>
		case M2M_REQ_GROUP_WIFI:
			gstrHifCxt.pfWifiCb = fn;
    e83c:	4b1b      	ldr	r3, [pc, #108]	; (e8ac <hif_register_cb+0xa0>)
    e83e:	683a      	ldr	r2, [r7, #0]
    e840:	611a      	str	r2, [r3, #16]
			break;
    e842:	e029      	b.n	e898 <hif_register_cb+0x8c>
		case M2M_REQ_GROUP_OTA:
			gstrHifCxt.pfOtaCb = fn;
    e844:	4b19      	ldr	r3, [pc, #100]	; (e8ac <hif_register_cb+0xa0>)
    e846:	683a      	ldr	r2, [r7, #0]
    e848:	619a      	str	r2, [r3, #24]
			break;
    e84a:	e025      	b.n	e898 <hif_register_cb+0x8c>
		case M2M_REQ_GROUP_HIF:
			gstrHifCxt.pfHifCb = fn;
    e84c:	4b17      	ldr	r3, [pc, #92]	; (e8ac <hif_register_cb+0xa0>)
    e84e:	683a      	ldr	r2, [r7, #0]
    e850:	621a      	str	r2, [r3, #32]
			break;
    e852:	e021      	b.n	e898 <hif_register_cb+0x8c>
		case M2M_REQ_GROUP_CRYPTO:
			gstrHifCxt.pfCryptoCb = fn;
    e854:	4b15      	ldr	r3, [pc, #84]	; (e8ac <hif_register_cb+0xa0>)
    e856:	683a      	ldr	r2, [r7, #0]
    e858:	625a      	str	r2, [r3, #36]	; 0x24
			break;
    e85a:	e01d      	b.n	e898 <hif_register_cb+0x8c>
		case M2M_REQ_GROUP_SIGMA:
			gstrHifCxt.pfSigmaCb = fn;
    e85c:	4b13      	ldr	r3, [pc, #76]	; (e8ac <hif_register_cb+0xa0>)
    e85e:	683a      	ldr	r2, [r7, #0]
    e860:	61da      	str	r2, [r3, #28]
			break;
    e862:	e019      	b.n	e898 <hif_register_cb+0x8c>
		case M2M_REQ_GROUP_SSL:
			gstrHifCxt.pfSslCb = fn;
    e864:	4b11      	ldr	r3, [pc, #68]	; (e8ac <hif_register_cb+0xa0>)
    e866:	683a      	ldr	r2, [r7, #0]
    e868:	629a      	str	r2, [r3, #40]	; 0x28
			break;
    e86a:	e015      	b.n	e898 <hif_register_cb+0x8c>
		default:
			M2M_ERR("GRp ? %d\n",u8Grp);
    e86c:	4a10      	ldr	r2, [pc, #64]	; (e8b0 <hif_register_cb+0xa4>)
    e86e:	4911      	ldr	r1, [pc, #68]	; (e8b4 <hif_register_cb+0xa8>)
    e870:	4b11      	ldr	r3, [pc, #68]	; (e8b8 <hif_register_cb+0xac>)
    e872:	0018      	movs	r0, r3
    e874:	4b11      	ldr	r3, [pc, #68]	; (e8bc <hif_register_cb+0xb0>)
    e876:	4798      	blx	r3
    e878:	1dfb      	adds	r3, r7, #7
    e87a:	781a      	ldrb	r2, [r3, #0]
    e87c:	4b10      	ldr	r3, [pc, #64]	; (e8c0 <hif_register_cb+0xb4>)
    e87e:	0011      	movs	r1, r2
    e880:	0018      	movs	r0, r3
    e882:	4b0e      	ldr	r3, [pc, #56]	; (e8bc <hif_register_cb+0xb0>)
    e884:	4798      	blx	r3
    e886:	4b0f      	ldr	r3, [pc, #60]	; (e8c4 <hif_register_cb+0xb8>)
    e888:	0018      	movs	r0, r3
    e88a:	4b0c      	ldr	r3, [pc, #48]	; (e8bc <hif_register_cb+0xb0>)
    e88c:	4798      	blx	r3
			ret = M2M_ERR_FAIL;
    e88e:	230f      	movs	r3, #15
    e890:	18fb      	adds	r3, r7, r3
    e892:	22f4      	movs	r2, #244	; 0xf4
    e894:	701a      	strb	r2, [r3, #0]
			break;
    e896:	46c0      	nop			; (mov r8, r8)
	}
	return ret;
    e898:	230f      	movs	r3, #15
    e89a:	18fb      	adds	r3, r7, r3
    e89c:	781b      	ldrb	r3, [r3, #0]
    e89e:	b25b      	sxtb	r3, r3
}
    e8a0:	0018      	movs	r0, r3
    e8a2:	46bd      	mov	sp, r7
    e8a4:	b004      	add	sp, #16
    e8a6:	bd80      	pop	{r7, pc}
    e8a8:	0002518c 	.word	0x0002518c
    e8ac:	200054b4 	.word	0x200054b4
    e8b0:	000002be 	.word	0x000002be
    e8b4:	000251dc 	.word	0x000251dc
    e8b8:	00024ea8 	.word	0x00024ea8
    e8bc:	0000addd 	.word	0x0000addd
    e8c0:	00025180 	.word	0x00025180
    e8c4:	00024ea4 	.word	0x00024ea4

0000e8c8 <m2m_wifi_cb>:
*	@author
*	@date
*	@version	1.0
*/
static void m2m_wifi_cb(uint8 u8OpCode, uint16 u16DataSize, uint32 u32Addr)
{
    e8c8:	b590      	push	{r4, r7, lr}
    e8ca:	b0af      	sub	sp, #188	; 0xbc
    e8cc:	af02      	add	r7, sp, #8
    e8ce:	603a      	str	r2, [r7, #0]
    e8d0:	1dfb      	adds	r3, r7, #7
    e8d2:	1c02      	adds	r2, r0, #0
    e8d4:	701a      	strb	r2, [r3, #0]
    e8d6:	1d3b      	adds	r3, r7, #4
    e8d8:	1c0a      	adds	r2, r1, #0
    e8da:	801a      	strh	r2, [r3, #0]
	uint8 rx_buf[8];
	if (u8OpCode == M2M_WIFI_RESP_CON_STATE_CHANGED)
    e8dc:	1dfb      	adds	r3, r7, #7
    e8de:	781b      	ldrb	r3, [r3, #0]
    e8e0:	2b2c      	cmp	r3, #44	; 0x2c
    e8e2:	d116      	bne.n	e912 <m2m_wifi_cb+0x4a>
	{
		tstrM2mWifiStateChanged strState;
		if (hif_receive(u32Addr, (uint8*) &strState,sizeof(tstrM2mWifiStateChanged), 0) == M2M_SUCCESS)
    e8e4:	23a4      	movs	r3, #164	; 0xa4
    e8e6:	18f9      	adds	r1, r7, r3
    e8e8:	6838      	ldr	r0, [r7, #0]
    e8ea:	2300      	movs	r3, #0
    e8ec:	2204      	movs	r2, #4
    e8ee:	4cca      	ldr	r4, [pc, #808]	; (ec18 <m2m_wifi_cb+0x350>)
    e8f0:	47a0      	blx	r4
    e8f2:	1e03      	subs	r3, r0, #0
    e8f4:	d000      	beq.n	e8f8 <m2m_wifi_cb+0x30>
    e8f6:	e1b4      	b.n	ec62 <m2m_wifi_cb+0x39a>
		{
			if (gpfAppWifiCb)
    e8f8:	4bc8      	ldr	r3, [pc, #800]	; (ec1c <m2m_wifi_cb+0x354>)
    e8fa:	681b      	ldr	r3, [r3, #0]
    e8fc:	2b00      	cmp	r3, #0
    e8fe:	d100      	bne.n	e902 <m2m_wifi_cb+0x3a>
    e900:	e1af      	b.n	ec62 <m2m_wifi_cb+0x39a>
				gpfAppWifiCb(M2M_WIFI_RESP_CON_STATE_CHANGED, &strState);
    e902:	4bc6      	ldr	r3, [pc, #792]	; (ec1c <m2m_wifi_cb+0x354>)
    e904:	681b      	ldr	r3, [r3, #0]
    e906:	22a4      	movs	r2, #164	; 0xa4
    e908:	18ba      	adds	r2, r7, r2
    e90a:	0011      	movs	r1, r2
    e90c:	202c      	movs	r0, #44	; 0x2c
    e90e:	4798      	blx	r3
#endif
	else
	{
		M2M_ERR("REQ Not defined %d\n",u8OpCode);
	}
}
    e910:	e1a7      	b.n	ec62 <m2m_wifi_cb+0x39a>
	else if (u8OpCode == M2M_WIFI_RESP_GET_SYS_TIME)
    e912:	1dfb      	adds	r3, r7, #7
    e914:	781b      	ldrb	r3, [r3, #0]
    e916:	2b1b      	cmp	r3, #27
    e918:	d116      	bne.n	e948 <m2m_wifi_cb+0x80>
		if (hif_receive(u32Addr, (uint8*) &strSysTime,sizeof(tstrSystemTime), 0) == M2M_SUCCESS)
    e91a:	239c      	movs	r3, #156	; 0x9c
    e91c:	18f9      	adds	r1, r7, r3
    e91e:	6838      	ldr	r0, [r7, #0]
    e920:	2300      	movs	r3, #0
    e922:	2208      	movs	r2, #8
    e924:	4cbc      	ldr	r4, [pc, #752]	; (ec18 <m2m_wifi_cb+0x350>)
    e926:	47a0      	blx	r4
    e928:	1e03      	subs	r3, r0, #0
    e92a:	d000      	beq.n	e92e <m2m_wifi_cb+0x66>
    e92c:	e199      	b.n	ec62 <m2m_wifi_cb+0x39a>
			if (gpfAppWifiCb)
    e92e:	4bbb      	ldr	r3, [pc, #748]	; (ec1c <m2m_wifi_cb+0x354>)
    e930:	681b      	ldr	r3, [r3, #0]
    e932:	2b00      	cmp	r3, #0
    e934:	d100      	bne.n	e938 <m2m_wifi_cb+0x70>
    e936:	e194      	b.n	ec62 <m2m_wifi_cb+0x39a>
				gpfAppWifiCb(M2M_WIFI_RESP_GET_SYS_TIME, &strSysTime);
    e938:	4bb8      	ldr	r3, [pc, #736]	; (ec1c <m2m_wifi_cb+0x354>)
    e93a:	681b      	ldr	r3, [r3, #0]
    e93c:	229c      	movs	r2, #156	; 0x9c
    e93e:	18ba      	adds	r2, r7, r2
    e940:	0011      	movs	r1, r2
    e942:	201b      	movs	r0, #27
    e944:	4798      	blx	r3
}
    e946:	e18c      	b.n	ec62 <m2m_wifi_cb+0x39a>
	else if(u8OpCode == M2M_WIFI_RESP_CONN_INFO)
    e948:	1dfb      	adds	r3, r7, #7
    e94a:	781b      	ldrb	r3, [r3, #0]
    e94c:	2b06      	cmp	r3, #6
    e94e:	d116      	bne.n	e97e <m2m_wifi_cb+0xb6>
		if(hif_receive(u32Addr, (uint8*)&strConnInfo, sizeof(tstrM2MConnInfo), 1) == M2M_SUCCESS)
    e950:	230c      	movs	r3, #12
    e952:	18f9      	adds	r1, r7, r3
    e954:	6838      	ldr	r0, [r7, #0]
    e956:	2301      	movs	r3, #1
    e958:	2230      	movs	r2, #48	; 0x30
    e95a:	4caf      	ldr	r4, [pc, #700]	; (ec18 <m2m_wifi_cb+0x350>)
    e95c:	47a0      	blx	r4
    e95e:	1e03      	subs	r3, r0, #0
    e960:	d000      	beq.n	e964 <m2m_wifi_cb+0x9c>
    e962:	e17e      	b.n	ec62 <m2m_wifi_cb+0x39a>
			if(gpfAppWifiCb)
    e964:	4bad      	ldr	r3, [pc, #692]	; (ec1c <m2m_wifi_cb+0x354>)
    e966:	681b      	ldr	r3, [r3, #0]
    e968:	2b00      	cmp	r3, #0
    e96a:	d100      	bne.n	e96e <m2m_wifi_cb+0xa6>
    e96c:	e179      	b.n	ec62 <m2m_wifi_cb+0x39a>
				gpfAppWifiCb(M2M_WIFI_RESP_CONN_INFO, &strConnInfo);
    e96e:	4bab      	ldr	r3, [pc, #684]	; (ec1c <m2m_wifi_cb+0x354>)
    e970:	681b      	ldr	r3, [r3, #0]
    e972:	220c      	movs	r2, #12
    e974:	18ba      	adds	r2, r7, r2
    e976:	0011      	movs	r1, r2
    e978:	2006      	movs	r0, #6
    e97a:	4798      	blx	r3
}
    e97c:	e171      	b.n	ec62 <m2m_wifi_cb+0x39a>
	else if (u8OpCode == M2M_WIFI_RESP_MEMORY_RECOVER)
    e97e:	1dfb      	adds	r3, r7, #7
    e980:	781b      	ldrb	r3, [r3, #0]
    e982:	2b0e      	cmp	r3, #14
    e984:	d100      	bne.n	e988 <m2m_wifi_cb+0xc0>
    e986:	e16c      	b.n	ec62 <m2m_wifi_cb+0x39a>
	else if (u8OpCode == M2M_WIFI_REQ_DHCP_CONF)
    e988:	1dfb      	adds	r3, r7, #7
    e98a:	781b      	ldrb	r3, [r3, #0]
    e98c:	2b32      	cmp	r3, #50	; 0x32
    e98e:	d116      	bne.n	e9be <m2m_wifi_cb+0xf6>
		if (hif_receive(u32Addr, (uint8 *)&strIpConfig, sizeof(tstrM2MIPConfig), 0) == M2M_SUCCESS)
    e990:	2384      	movs	r3, #132	; 0x84
    e992:	18f9      	adds	r1, r7, r3
    e994:	6838      	ldr	r0, [r7, #0]
    e996:	2300      	movs	r3, #0
    e998:	2218      	movs	r2, #24
    e99a:	4c9f      	ldr	r4, [pc, #636]	; (ec18 <m2m_wifi_cb+0x350>)
    e99c:	47a0      	blx	r4
    e99e:	1e03      	subs	r3, r0, #0
    e9a0:	d000      	beq.n	e9a4 <m2m_wifi_cb+0xdc>
    e9a2:	e15e      	b.n	ec62 <m2m_wifi_cb+0x39a>
			if (gpfAppWifiCb)
    e9a4:	4b9d      	ldr	r3, [pc, #628]	; (ec1c <m2m_wifi_cb+0x354>)
    e9a6:	681b      	ldr	r3, [r3, #0]
    e9a8:	2b00      	cmp	r3, #0
    e9aa:	d100      	bne.n	e9ae <m2m_wifi_cb+0xe6>
    e9ac:	e159      	b.n	ec62 <m2m_wifi_cb+0x39a>
				gpfAppWifiCb(M2M_WIFI_REQ_DHCP_CONF, (uint8 *)&strIpConfig);
    e9ae:	4b9b      	ldr	r3, [pc, #620]	; (ec1c <m2m_wifi_cb+0x354>)
    e9b0:	681b      	ldr	r3, [r3, #0]
    e9b2:	2284      	movs	r2, #132	; 0x84
    e9b4:	18ba      	adds	r2, r7, r2
    e9b6:	0011      	movs	r1, r2
    e9b8:	2032      	movs	r0, #50	; 0x32
    e9ba:	4798      	blx	r3
}
    e9bc:	e151      	b.n	ec62 <m2m_wifi_cb+0x39a>
	else if (u8OpCode == M2M_WIFI_REQ_WPS)
    e9be:	1dfb      	adds	r3, r7, #7
    e9c0:	781b      	ldrb	r3, [r3, #0]
    e9c2:	2b2f      	cmp	r3, #47	; 0x2f
    e9c4:	d11d      	bne.n	ea02 <m2m_wifi_cb+0x13a>
		m2m_memset((uint8*)&strWps,0,sizeof(tstrM2MWPSInfo));
    e9c6:	230c      	movs	r3, #12
    e9c8:	18fb      	adds	r3, r7, r3
    e9ca:	2264      	movs	r2, #100	; 0x64
    e9cc:	2100      	movs	r1, #0
    e9ce:	0018      	movs	r0, r3
    e9d0:	4b93      	ldr	r3, [pc, #588]	; (ec20 <m2m_wifi_cb+0x358>)
    e9d2:	4798      	blx	r3
		if(hif_receive(u32Addr, (uint8*)&strWps, sizeof(tstrM2MWPSInfo), 0) == M2M_SUCCESS)
    e9d4:	230c      	movs	r3, #12
    e9d6:	18f9      	adds	r1, r7, r3
    e9d8:	6838      	ldr	r0, [r7, #0]
    e9da:	2300      	movs	r3, #0
    e9dc:	2264      	movs	r2, #100	; 0x64
    e9de:	4c8e      	ldr	r4, [pc, #568]	; (ec18 <m2m_wifi_cb+0x350>)
    e9e0:	47a0      	blx	r4
    e9e2:	1e03      	subs	r3, r0, #0
    e9e4:	d000      	beq.n	e9e8 <m2m_wifi_cb+0x120>
    e9e6:	e13c      	b.n	ec62 <m2m_wifi_cb+0x39a>
			if (gpfAppWifiCb)
    e9e8:	4b8c      	ldr	r3, [pc, #560]	; (ec1c <m2m_wifi_cb+0x354>)
    e9ea:	681b      	ldr	r3, [r3, #0]
    e9ec:	2b00      	cmp	r3, #0
    e9ee:	d100      	bne.n	e9f2 <m2m_wifi_cb+0x12a>
    e9f0:	e137      	b.n	ec62 <m2m_wifi_cb+0x39a>
				gpfAppWifiCb(M2M_WIFI_REQ_WPS, &strWps);
    e9f2:	4b8a      	ldr	r3, [pc, #552]	; (ec1c <m2m_wifi_cb+0x354>)
    e9f4:	681b      	ldr	r3, [r3, #0]
    e9f6:	220c      	movs	r2, #12
    e9f8:	18ba      	adds	r2, r7, r2
    e9fa:	0011      	movs	r1, r2
    e9fc:	202f      	movs	r0, #47	; 0x2f
    e9fe:	4798      	blx	r3
}
    ea00:	e12f      	b.n	ec62 <m2m_wifi_cb+0x39a>
	else if (u8OpCode == M2M_WIFI_RESP_IP_CONFLICT)
    ea02:	1dfb      	adds	r3, r7, #7
    ea04:	781b      	ldrb	r3, [r3, #0]
    ea06:	2b34      	cmp	r3, #52	; 0x34
    ea08:	d137      	bne.n	ea7a <m2m_wifi_cb+0x1b2>
		if(hif_receive(u32Addr, (uint8 *)&u32ConflictedIP, sizeof(u32ConflictedIP), 0) == M2M_SUCCESS)
    ea0a:	2380      	movs	r3, #128	; 0x80
    ea0c:	18f9      	adds	r1, r7, r3
    ea0e:	6838      	ldr	r0, [r7, #0]
    ea10:	2300      	movs	r3, #0
    ea12:	2204      	movs	r2, #4
    ea14:	4c80      	ldr	r4, [pc, #512]	; (ec18 <m2m_wifi_cb+0x350>)
    ea16:	47a0      	blx	r4
    ea18:	1e03      	subs	r3, r0, #0
    ea1a:	d000      	beq.n	ea1e <m2m_wifi_cb+0x156>
    ea1c:	e121      	b.n	ec62 <m2m_wifi_cb+0x39a>
			M2M_INFO("Conflicted IP \" %u.%u.%u.%u \" \n", 
    ea1e:	4b81      	ldr	r3, [pc, #516]	; (ec24 <m2m_wifi_cb+0x35c>)
    ea20:	0018      	movs	r0, r3
    ea22:	4b81      	ldr	r3, [pc, #516]	; (ec28 <m2m_wifi_cb+0x360>)
    ea24:	4798      	blx	r3
    ea26:	2380      	movs	r3, #128	; 0x80
    ea28:	18fb      	adds	r3, r7, r3
    ea2a:	681b      	ldr	r3, [r3, #0]
    ea2c:	0e1b      	lsrs	r3, r3, #24
    ea2e:	b2db      	uxtb	r3, r3
    ea30:	0019      	movs	r1, r3
    ea32:	2380      	movs	r3, #128	; 0x80
    ea34:	18fb      	adds	r3, r7, r3
    ea36:	681b      	ldr	r3, [r3, #0]
    ea38:	0c1b      	lsrs	r3, r3, #16
    ea3a:	b2db      	uxtb	r3, r3
    ea3c:	001a      	movs	r2, r3
    ea3e:	2380      	movs	r3, #128	; 0x80
    ea40:	18fb      	adds	r3, r7, r3
    ea42:	681b      	ldr	r3, [r3, #0]
    ea44:	0a1b      	lsrs	r3, r3, #8
    ea46:	b2db      	uxtb	r3, r3
    ea48:	001c      	movs	r4, r3
    ea4a:	2380      	movs	r3, #128	; 0x80
    ea4c:	18fb      	adds	r3, r7, r3
    ea4e:	681b      	ldr	r3, [r3, #0]
    ea50:	b2db      	uxtb	r3, r3
    ea52:	4876      	ldr	r0, [pc, #472]	; (ec2c <m2m_wifi_cb+0x364>)
    ea54:	9300      	str	r3, [sp, #0]
    ea56:	0023      	movs	r3, r4
    ea58:	4c73      	ldr	r4, [pc, #460]	; (ec28 <m2m_wifi_cb+0x360>)
    ea5a:	47a0      	blx	r4
    ea5c:	4b74      	ldr	r3, [pc, #464]	; (ec30 <m2m_wifi_cb+0x368>)
    ea5e:	0018      	movs	r0, r3
    ea60:	4b71      	ldr	r3, [pc, #452]	; (ec28 <m2m_wifi_cb+0x360>)
    ea62:	4798      	blx	r3
			if (gpfAppWifiCb)
    ea64:	4b6d      	ldr	r3, [pc, #436]	; (ec1c <m2m_wifi_cb+0x354>)
    ea66:	681b      	ldr	r3, [r3, #0]
    ea68:	2b00      	cmp	r3, #0
    ea6a:	d100      	bne.n	ea6e <m2m_wifi_cb+0x1a6>
    ea6c:	e0f9      	b.n	ec62 <m2m_wifi_cb+0x39a>
				gpfAppWifiCb(M2M_WIFI_RESP_IP_CONFLICT, NULL);
    ea6e:	4b6b      	ldr	r3, [pc, #428]	; (ec1c <m2m_wifi_cb+0x354>)
    ea70:	681b      	ldr	r3, [r3, #0]
    ea72:	2100      	movs	r1, #0
    ea74:	2034      	movs	r0, #52	; 0x34
    ea76:	4798      	blx	r3
}
    ea78:	e0f3      	b.n	ec62 <m2m_wifi_cb+0x39a>
	else if (u8OpCode == M2M_WIFI_RESP_SCAN_DONE)
    ea7a:	1dfb      	adds	r3, r7, #7
    ea7c:	781b      	ldrb	r3, [r3, #0]
    ea7e:	2b11      	cmp	r3, #17
    ea80:	d11e      	bne.n	eac0 <m2m_wifi_cb+0x1f8>
		gu8scanInProgress = 0;
    ea82:	4b6c      	ldr	r3, [pc, #432]	; (ec34 <m2m_wifi_cb+0x36c>)
    ea84:	2200      	movs	r2, #0
    ea86:	701a      	strb	r2, [r3, #0]
		if(hif_receive(u32Addr, (uint8*)&strState, sizeof(tstrM2mScanDone), 0) == M2M_SUCCESS)
    ea88:	237c      	movs	r3, #124	; 0x7c
    ea8a:	18f9      	adds	r1, r7, r3
    ea8c:	6838      	ldr	r0, [r7, #0]
    ea8e:	2300      	movs	r3, #0
    ea90:	2204      	movs	r2, #4
    ea92:	4c61      	ldr	r4, [pc, #388]	; (ec18 <m2m_wifi_cb+0x350>)
    ea94:	47a0      	blx	r4
    ea96:	1e03      	subs	r3, r0, #0
    ea98:	d000      	beq.n	ea9c <m2m_wifi_cb+0x1d4>
    ea9a:	e0e2      	b.n	ec62 <m2m_wifi_cb+0x39a>
			gu8ChNum = strState.u8NumofCh;
    ea9c:	237c      	movs	r3, #124	; 0x7c
    ea9e:	18fb      	adds	r3, r7, r3
    eaa0:	781a      	ldrb	r2, [r3, #0]
    eaa2:	4b65      	ldr	r3, [pc, #404]	; (ec38 <m2m_wifi_cb+0x370>)
    eaa4:	701a      	strb	r2, [r3, #0]
			if (gpfAppWifiCb)
    eaa6:	4b5d      	ldr	r3, [pc, #372]	; (ec1c <m2m_wifi_cb+0x354>)
    eaa8:	681b      	ldr	r3, [r3, #0]
    eaaa:	2b00      	cmp	r3, #0
    eaac:	d100      	bne.n	eab0 <m2m_wifi_cb+0x1e8>
    eaae:	e0d8      	b.n	ec62 <m2m_wifi_cb+0x39a>
				gpfAppWifiCb(M2M_WIFI_RESP_SCAN_DONE, &strState);
    eab0:	4b5a      	ldr	r3, [pc, #360]	; (ec1c <m2m_wifi_cb+0x354>)
    eab2:	681b      	ldr	r3, [r3, #0]
    eab4:	227c      	movs	r2, #124	; 0x7c
    eab6:	18ba      	adds	r2, r7, r2
    eab8:	0011      	movs	r1, r2
    eaba:	2011      	movs	r0, #17
    eabc:	4798      	blx	r3
}
    eabe:	e0d0      	b.n	ec62 <m2m_wifi_cb+0x39a>
	else if (u8OpCode == M2M_WIFI_RESP_SCAN_RESULT)
    eac0:	1dfb      	adds	r3, r7, #7
    eac2:	781b      	ldrb	r3, [r3, #0]
    eac4:	2b13      	cmp	r3, #19
    eac6:	d116      	bne.n	eaf6 <m2m_wifi_cb+0x22e>
		if(hif_receive(u32Addr, (uint8*)&strScanResult, sizeof(tstrM2mWifiscanResult), 0) == M2M_SUCCESS)
    eac8:	230c      	movs	r3, #12
    eaca:	18f9      	adds	r1, r7, r3
    eacc:	6838      	ldr	r0, [r7, #0]
    eace:	2300      	movs	r3, #0
    ead0:	222c      	movs	r2, #44	; 0x2c
    ead2:	4c51      	ldr	r4, [pc, #324]	; (ec18 <m2m_wifi_cb+0x350>)
    ead4:	47a0      	blx	r4
    ead6:	1e03      	subs	r3, r0, #0
    ead8:	d000      	beq.n	eadc <m2m_wifi_cb+0x214>
    eada:	e0c2      	b.n	ec62 <m2m_wifi_cb+0x39a>
			if (gpfAppWifiCb)
    eadc:	4b4f      	ldr	r3, [pc, #316]	; (ec1c <m2m_wifi_cb+0x354>)
    eade:	681b      	ldr	r3, [r3, #0]
    eae0:	2b00      	cmp	r3, #0
    eae2:	d100      	bne.n	eae6 <m2m_wifi_cb+0x21e>
    eae4:	e0bd      	b.n	ec62 <m2m_wifi_cb+0x39a>
				gpfAppWifiCb(M2M_WIFI_RESP_SCAN_RESULT, &strScanResult);
    eae6:	4b4d      	ldr	r3, [pc, #308]	; (ec1c <m2m_wifi_cb+0x354>)
    eae8:	681b      	ldr	r3, [r3, #0]
    eaea:	220c      	movs	r2, #12
    eaec:	18ba      	adds	r2, r7, r2
    eaee:	0011      	movs	r1, r2
    eaf0:	2013      	movs	r0, #19
    eaf2:	4798      	blx	r3
}
    eaf4:	e0b5      	b.n	ec62 <m2m_wifi_cb+0x39a>
	else if (u8OpCode == M2M_WIFI_RESP_CURRENT_RSSI)
    eaf6:	1dfb      	adds	r3, r7, #7
    eaf8:	781b      	ldrb	r3, [r3, #0]
    eafa:	2b04      	cmp	r3, #4
    eafc:	d116      	bne.n	eb2c <m2m_wifi_cb+0x264>
		if (hif_receive(u32Addr, rx_buf, 4, 0) == M2M_SUCCESS)
    eafe:	23a8      	movs	r3, #168	; 0xa8
    eb00:	18f9      	adds	r1, r7, r3
    eb02:	6838      	ldr	r0, [r7, #0]
    eb04:	2300      	movs	r3, #0
    eb06:	2204      	movs	r2, #4
    eb08:	4c43      	ldr	r4, [pc, #268]	; (ec18 <m2m_wifi_cb+0x350>)
    eb0a:	47a0      	blx	r4
    eb0c:	1e03      	subs	r3, r0, #0
    eb0e:	d000      	beq.n	eb12 <m2m_wifi_cb+0x24a>
    eb10:	e0a7      	b.n	ec62 <m2m_wifi_cb+0x39a>
			if (gpfAppWifiCb)
    eb12:	4b42      	ldr	r3, [pc, #264]	; (ec1c <m2m_wifi_cb+0x354>)
    eb14:	681b      	ldr	r3, [r3, #0]
    eb16:	2b00      	cmp	r3, #0
    eb18:	d100      	bne.n	eb1c <m2m_wifi_cb+0x254>
    eb1a:	e0a2      	b.n	ec62 <m2m_wifi_cb+0x39a>
				gpfAppWifiCb(M2M_WIFI_RESP_CURRENT_RSSI, rx_buf);
    eb1c:	4b3f      	ldr	r3, [pc, #252]	; (ec1c <m2m_wifi_cb+0x354>)
    eb1e:	681b      	ldr	r3, [r3, #0]
    eb20:	22a8      	movs	r2, #168	; 0xa8
    eb22:	18ba      	adds	r2, r7, r2
    eb24:	0011      	movs	r1, r2
    eb26:	2004      	movs	r0, #4
    eb28:	4798      	blx	r3
}
    eb2a:	e09a      	b.n	ec62 <m2m_wifi_cb+0x39a>
	else if (u8OpCode == M2M_WIFI_RESP_CLIENT_INFO)
    eb2c:	1dfb      	adds	r3, r7, #7
    eb2e:	781b      	ldrb	r3, [r3, #0]
    eb30:	2b65      	cmp	r3, #101	; 0x65
    eb32:	d116      	bne.n	eb62 <m2m_wifi_cb+0x29a>
		if (hif_receive(u32Addr, rx_buf, 4, 0) == M2M_SUCCESS)
    eb34:	23a8      	movs	r3, #168	; 0xa8
    eb36:	18f9      	adds	r1, r7, r3
    eb38:	6838      	ldr	r0, [r7, #0]
    eb3a:	2300      	movs	r3, #0
    eb3c:	2204      	movs	r2, #4
    eb3e:	4c36      	ldr	r4, [pc, #216]	; (ec18 <m2m_wifi_cb+0x350>)
    eb40:	47a0      	blx	r4
    eb42:	1e03      	subs	r3, r0, #0
    eb44:	d000      	beq.n	eb48 <m2m_wifi_cb+0x280>
    eb46:	e08c      	b.n	ec62 <m2m_wifi_cb+0x39a>
			if (gpfAppWifiCb)
    eb48:	4b34      	ldr	r3, [pc, #208]	; (ec1c <m2m_wifi_cb+0x354>)
    eb4a:	681b      	ldr	r3, [r3, #0]
    eb4c:	2b00      	cmp	r3, #0
    eb4e:	d100      	bne.n	eb52 <m2m_wifi_cb+0x28a>
    eb50:	e087      	b.n	ec62 <m2m_wifi_cb+0x39a>
				gpfAppWifiCb(M2M_WIFI_RESP_CLIENT_INFO, rx_buf);
    eb52:	4b32      	ldr	r3, [pc, #200]	; (ec1c <m2m_wifi_cb+0x354>)
    eb54:	681b      	ldr	r3, [r3, #0]
    eb56:	22a8      	movs	r2, #168	; 0xa8
    eb58:	18ba      	adds	r2, r7, r2
    eb5a:	0011      	movs	r1, r2
    eb5c:	2065      	movs	r0, #101	; 0x65
    eb5e:	4798      	blx	r3
}
    eb60:	e07f      	b.n	ec62 <m2m_wifi_cb+0x39a>
	else if(u8OpCode == M2M_WIFI_RESP_PROVISION_INFO)
    eb62:	1dfb      	adds	r3, r7, #7
    eb64:	781b      	ldrb	r3, [r3, #0]
    eb66:	2b09      	cmp	r3, #9
    eb68:	d116      	bne.n	eb98 <m2m_wifi_cb+0x2d0>
		if(hif_receive(u32Addr, (uint8*)&strProvInfo, sizeof(tstrM2MProvisionInfo), 1) == M2M_SUCCESS)
    eb6a:	230c      	movs	r3, #12
    eb6c:	18f9      	adds	r1, r7, r3
    eb6e:	6838      	ldr	r0, [r7, #0]
    eb70:	2301      	movs	r3, #1
    eb72:	2264      	movs	r2, #100	; 0x64
    eb74:	4c28      	ldr	r4, [pc, #160]	; (ec18 <m2m_wifi_cb+0x350>)
    eb76:	47a0      	blx	r4
    eb78:	1e03      	subs	r3, r0, #0
    eb7a:	d000      	beq.n	eb7e <m2m_wifi_cb+0x2b6>
    eb7c:	e071      	b.n	ec62 <m2m_wifi_cb+0x39a>
			if(gpfAppWifiCb)
    eb7e:	4b27      	ldr	r3, [pc, #156]	; (ec1c <m2m_wifi_cb+0x354>)
    eb80:	681b      	ldr	r3, [r3, #0]
    eb82:	2b00      	cmp	r3, #0
    eb84:	d100      	bne.n	eb88 <m2m_wifi_cb+0x2c0>
    eb86:	e06c      	b.n	ec62 <m2m_wifi_cb+0x39a>
				gpfAppWifiCb(M2M_WIFI_RESP_PROVISION_INFO, &strProvInfo);
    eb88:	4b24      	ldr	r3, [pc, #144]	; (ec1c <m2m_wifi_cb+0x354>)
    eb8a:	681b      	ldr	r3, [r3, #0]
    eb8c:	220c      	movs	r2, #12
    eb8e:	18ba      	adds	r2, r7, r2
    eb90:	0011      	movs	r1, r2
    eb92:	2009      	movs	r0, #9
    eb94:	4798      	blx	r3
}
    eb96:	e064      	b.n	ec62 <m2m_wifi_cb+0x39a>
	else if(u8OpCode == M2M_WIFI_RESP_DEFAULT_CONNECT)
    eb98:	1dfb      	adds	r3, r7, #7
    eb9a:	781b      	ldrb	r3, [r3, #0]
    eb9c:	2b2a      	cmp	r3, #42	; 0x2a
    eb9e:	d114      	bne.n	ebca <m2m_wifi_cb+0x302>
		if(hif_receive(u32Addr, (uint8*)&strResp, sizeof(tstrM2MDefaultConnResp), 1) == M2M_SUCCESS)
    eba0:	2378      	movs	r3, #120	; 0x78
    eba2:	18f9      	adds	r1, r7, r3
    eba4:	6838      	ldr	r0, [r7, #0]
    eba6:	2301      	movs	r3, #1
    eba8:	2204      	movs	r2, #4
    ebaa:	4c1b      	ldr	r4, [pc, #108]	; (ec18 <m2m_wifi_cb+0x350>)
    ebac:	47a0      	blx	r4
    ebae:	1e03      	subs	r3, r0, #0
    ebb0:	d157      	bne.n	ec62 <m2m_wifi_cb+0x39a>
			if(gpfAppWifiCb)
    ebb2:	4b1a      	ldr	r3, [pc, #104]	; (ec1c <m2m_wifi_cb+0x354>)
    ebb4:	681b      	ldr	r3, [r3, #0]
    ebb6:	2b00      	cmp	r3, #0
    ebb8:	d053      	beq.n	ec62 <m2m_wifi_cb+0x39a>
				gpfAppWifiCb(M2M_WIFI_RESP_DEFAULT_CONNECT, &strResp);
    ebba:	4b18      	ldr	r3, [pc, #96]	; (ec1c <m2m_wifi_cb+0x354>)
    ebbc:	681b      	ldr	r3, [r3, #0]
    ebbe:	2278      	movs	r2, #120	; 0x78
    ebc0:	18ba      	adds	r2, r7, r2
    ebc2:	0011      	movs	r1, r2
    ebc4:	202a      	movs	r0, #42	; 0x2a
    ebc6:	4798      	blx	r3
}
    ebc8:	e04b      	b.n	ec62 <m2m_wifi_cb+0x39a>
	else if(u8OpCode == M2M_WIFI_RESP_GET_PRNG)
    ebca:	1dfb      	adds	r3, r7, #7
    ebcc:	781b      	ldrb	r3, [r3, #0]
    ebce:	2b20      	cmp	r3, #32
    ebd0:	d134      	bne.n	ec3c <m2m_wifi_cb+0x374>
		if(hif_receive(u32Addr, (uint8*)&strPrng,sizeof(tstrPrng), 0) == M2M_SUCCESS)
    ebd2:	2370      	movs	r3, #112	; 0x70
    ebd4:	18f9      	adds	r1, r7, r3
    ebd6:	6838      	ldr	r0, [r7, #0]
    ebd8:	2300      	movs	r3, #0
    ebda:	2208      	movs	r2, #8
    ebdc:	4c0e      	ldr	r4, [pc, #56]	; (ec18 <m2m_wifi_cb+0x350>)
    ebde:	47a0      	blx	r4
    ebe0:	1e03      	subs	r3, r0, #0
    ebe2:	d13e      	bne.n	ec62 <m2m_wifi_cb+0x39a>
			if(hif_receive(u32Addr + sizeof(tstrPrng),strPrng.pu8RngBuff,strPrng.u16PrngSize, 1) == M2M_SUCCESS)
    ebe4:	683b      	ldr	r3, [r7, #0]
    ebe6:	3308      	adds	r3, #8
    ebe8:	0018      	movs	r0, r3
    ebea:	2370      	movs	r3, #112	; 0x70
    ebec:	18fb      	adds	r3, r7, r3
    ebee:	6819      	ldr	r1, [r3, #0]
    ebf0:	2370      	movs	r3, #112	; 0x70
    ebf2:	18fb      	adds	r3, r7, r3
    ebf4:	889a      	ldrh	r2, [r3, #4]
    ebf6:	2301      	movs	r3, #1
    ebf8:	4c07      	ldr	r4, [pc, #28]	; (ec18 <m2m_wifi_cb+0x350>)
    ebfa:	47a0      	blx	r4
    ebfc:	1e03      	subs	r3, r0, #0
    ebfe:	d130      	bne.n	ec62 <m2m_wifi_cb+0x39a>
				if(gpfAppWifiCb)
    ec00:	4b06      	ldr	r3, [pc, #24]	; (ec1c <m2m_wifi_cb+0x354>)
    ec02:	681b      	ldr	r3, [r3, #0]
    ec04:	2b00      	cmp	r3, #0
    ec06:	d02c      	beq.n	ec62 <m2m_wifi_cb+0x39a>
					gpfAppWifiCb(M2M_WIFI_RESP_GET_PRNG,&strPrng);
    ec08:	4b04      	ldr	r3, [pc, #16]	; (ec1c <m2m_wifi_cb+0x354>)
    ec0a:	681b      	ldr	r3, [r3, #0]
    ec0c:	2270      	movs	r2, #112	; 0x70
    ec0e:	18ba      	adds	r2, r7, r2
    ec10:	0011      	movs	r1, r2
    ec12:	2020      	movs	r0, #32
    ec14:	4798      	blx	r3
}
    ec16:	e024      	b.n	ec62 <m2m_wifi_cb+0x39a>
    ec18:	0000e68d 	.word	0x0000e68d
    ec1c:	20003d24 	.word	0x20003d24
    ec20:	0000db11 	.word	0x0000db11
    ec24:	000251ec 	.word	0x000251ec
    ec28:	0000addd 	.word	0x0000addd
    ec2c:	000251f8 	.word	0x000251f8
    ec30:	00025218 	.word	0x00025218
    ec34:	20003d21 	.word	0x20003d21
    ec38:	20003d20 	.word	0x20003d20
		M2M_ERR("REQ Not defined %d\n",u8OpCode);
    ec3c:	2324      	movs	r3, #36	; 0x24
    ec3e:	33ff      	adds	r3, #255	; 0xff
    ec40:	001a      	movs	r2, r3
    ec42:	490a      	ldr	r1, [pc, #40]	; (ec6c <m2m_wifi_cb+0x3a4>)
    ec44:	4b0a      	ldr	r3, [pc, #40]	; (ec70 <m2m_wifi_cb+0x3a8>)
    ec46:	0018      	movs	r0, r3
    ec48:	4b0a      	ldr	r3, [pc, #40]	; (ec74 <m2m_wifi_cb+0x3ac>)
    ec4a:	4798      	blx	r3
    ec4c:	1dfb      	adds	r3, r7, #7
    ec4e:	781a      	ldrb	r2, [r3, #0]
    ec50:	4b09      	ldr	r3, [pc, #36]	; (ec78 <m2m_wifi_cb+0x3b0>)
    ec52:	0011      	movs	r1, r2
    ec54:	0018      	movs	r0, r3
    ec56:	4b07      	ldr	r3, [pc, #28]	; (ec74 <m2m_wifi_cb+0x3ac>)
    ec58:	4798      	blx	r3
    ec5a:	4b08      	ldr	r3, [pc, #32]	; (ec7c <m2m_wifi_cb+0x3b4>)
    ec5c:	0018      	movs	r0, r3
    ec5e:	4b05      	ldr	r3, [pc, #20]	; (ec74 <m2m_wifi_cb+0x3ac>)
    ec60:	4798      	blx	r3
}
    ec62:	46c0      	nop			; (mov r8, r8)
    ec64:	46bd      	mov	sp, r7
    ec66:	b02d      	add	sp, #180	; 0xb4
    ec68:	bd90      	pop	{r4, r7, pc}
    ec6a:	46c0      	nop			; (mov r8, r8)
    ec6c:	000255b8 	.word	0x000255b8
    ec70:	0002521c 	.word	0x0002521c
    ec74:	0000addd 	.word	0x0000addd
    ec78:	00025230 	.word	0x00025230
    ec7c:	00025218 	.word	0x00025218

0000ec80 <m2m_wifi_init>:
	s8Ret = hif_send(M2M_REQ_GROUP_SSL, M2M_SSL_IND_CRL|M2M_REQ_DATA_PKT, NULL, 0, (uint8*)pCRL, sizeof(tstrTlsCrlInfo), 0);
	return s8Ret;
}

sint8 m2m_wifi_init(tstrWifiInitParam * param)
{
    ec80:	b590      	push	{r4, r7, lr}
    ec82:	b091      	sub	sp, #68	; 0x44
    ec84:	af02      	add	r7, sp, #8
    ec86:	6078      	str	r0, [r7, #4]
	tstrM2mRev strtmp;
	sint8 ret = M2M_SUCCESS;
    ec88:	2337      	movs	r3, #55	; 0x37
    ec8a:	18fb      	adds	r3, r7, r3
    ec8c:	2200      	movs	r2, #0
    ec8e:	701a      	strb	r2, [r3, #0]
	uint8 u8WifiMode = M2M_WIFI_MODE_NORMAL;
    ec90:	230b      	movs	r3, #11
    ec92:	18fb      	adds	r3, r7, r3
    ec94:	2201      	movs	r2, #1
    ec96:	701a      	strb	r2, [r3, #0]
	
	if(param == NULL) {
    ec98:	687b      	ldr	r3, [r7, #4]
    ec9a:	2b00      	cmp	r3, #0
    ec9c:	d104      	bne.n	eca8 <m2m_wifi_init+0x28>
		ret = M2M_ERR_FAIL;
    ec9e:	2337      	movs	r3, #55	; 0x37
    eca0:	18fb      	adds	r3, r7, r3
    eca2:	22f4      	movs	r2, #244	; 0xf4
    eca4:	701a      	strb	r2, [r3, #0]
		goto _EXIT0;
    eca6:	e0b3      	b.n	ee10 <m2m_wifi_init+0x190>
	}
	
	gpfAppWifiCb = param->pfAppWifiCb;
    eca8:	687b      	ldr	r3, [r7, #4]
    ecaa:	681a      	ldr	r2, [r3, #0]
    ecac:	4b5c      	ldr	r3, [pc, #368]	; (ee20 <m2m_wifi_init+0x1a0>)
    ecae:	601a      	str	r2, [r3, #0]
#endif /* ETH_MODE */

#ifdef CONF_MGMT
	gpfAppMonCb  = param->pfAppMonCb;
#endif
	gu8scanInProgress = 0;
    ecb0:	4b5c      	ldr	r3, [pc, #368]	; (ee24 <m2m_wifi_init+0x1a4>)
    ecb2:	2200      	movs	r2, #0
    ecb4:	701a      	strb	r2, [r3, #0]
	/* Apply device specific initialization. */
	ret = nm_drv_init(&u8WifiMode);
    ecb6:	2337      	movs	r3, #55	; 0x37
    ecb8:	18fc      	adds	r4, r7, r3
    ecba:	230b      	movs	r3, #11
    ecbc:	18fb      	adds	r3, r7, r3
    ecbe:	0018      	movs	r0, r3
    ecc0:	4b59      	ldr	r3, [pc, #356]	; (ee28 <m2m_wifi_init+0x1a8>)
    ecc2:	4798      	blx	r3
    ecc4:	0003      	movs	r3, r0
    ecc6:	7023      	strb	r3, [r4, #0]
	if(ret != M2M_SUCCESS) 	goto _EXIT0;
    ecc8:	2337      	movs	r3, #55	; 0x37
    ecca:	18fb      	adds	r3, r7, r3
    eccc:	781b      	ldrb	r3, [r3, #0]
    ecce:	b25b      	sxtb	r3, r3
    ecd0:	2b00      	cmp	r3, #0
    ecd2:	d000      	beq.n	ecd6 <m2m_wifi_init+0x56>
    ecd4:	e099      	b.n	ee0a <m2m_wifi_init+0x18a>
	/* Initialize host interface module */
	ret = hif_init(NULL);
    ecd6:	2337      	movs	r3, #55	; 0x37
    ecd8:	18fc      	adds	r4, r7, r3
    ecda:	2000      	movs	r0, #0
    ecdc:	4b53      	ldr	r3, [pc, #332]	; (ee2c <m2m_wifi_init+0x1ac>)
    ecde:	4798      	blx	r3
    ece0:	0003      	movs	r3, r0
    ece2:	7023      	strb	r3, [r4, #0]
	if(ret != M2M_SUCCESS) 	goto _EXIT1;
    ece4:	2337      	movs	r3, #55	; 0x37
    ece6:	18fb      	adds	r3, r7, r3
    ece8:	781b      	ldrb	r3, [r3, #0]
    ecea:	b25b      	sxtb	r3, r3
    ecec:	2b00      	cmp	r3, #0
    ecee:	d000      	beq.n	ecf2 <m2m_wifi_init+0x72>
    ecf0:	e086      	b.n	ee00 <m2m_wifi_init+0x180>

	hif_register_cb(M2M_REQ_GROUP_WIFI,m2m_wifi_cb);
    ecf2:	4b4f      	ldr	r3, [pc, #316]	; (ee30 <m2m_wifi_init+0x1b0>)
    ecf4:	0019      	movs	r1, r3
    ecf6:	2001      	movs	r0, #1
    ecf8:	4b4e      	ldr	r3, [pc, #312]	; (ee34 <m2m_wifi_init+0x1b4>)
    ecfa:	4798      	blx	r3

	ret = nm_get_firmware_full_info(&strtmp);
    ecfc:	2337      	movs	r3, #55	; 0x37
    ecfe:	18fc      	adds	r4, r7, r3
    ed00:	230c      	movs	r3, #12
    ed02:	18fb      	adds	r3, r7, r3
    ed04:	0018      	movs	r0, r3
    ed06:	4b4c      	ldr	r3, [pc, #304]	; (ee38 <m2m_wifi_init+0x1b8>)
    ed08:	4798      	blx	r3
    ed0a:	0003      	movs	r3, r0
    ed0c:	7023      	strb	r3, [r4, #0]

	M2M_INFO("Firmware ver   : %u.%u.%u Svnrev %u\n", strtmp.u8FirmwareMajor, strtmp.u8FirmwareMinor, strtmp.u8FirmwarePatch,strtmp.u16FirmwareSvnNum);
    ed0e:	4b4b      	ldr	r3, [pc, #300]	; (ee3c <m2m_wifi_init+0x1bc>)
    ed10:	0018      	movs	r0, r3
    ed12:	4b4b      	ldr	r3, [pc, #300]	; (ee40 <m2m_wifi_init+0x1c0>)
    ed14:	4798      	blx	r3
    ed16:	230c      	movs	r3, #12
    ed18:	18fb      	adds	r3, r7, r3
    ed1a:	791b      	ldrb	r3, [r3, #4]
    ed1c:	0019      	movs	r1, r3
    ed1e:	230c      	movs	r3, #12
    ed20:	18fb      	adds	r3, r7, r3
    ed22:	795b      	ldrb	r3, [r3, #5]
    ed24:	001a      	movs	r2, r3
    ed26:	230c      	movs	r3, #12
    ed28:	18fb      	adds	r3, r7, r3
    ed2a:	799b      	ldrb	r3, [r3, #6]
    ed2c:	001c      	movs	r4, r3
    ed2e:	230c      	movs	r3, #12
    ed30:	18fb      	adds	r3, r7, r3
    ed32:	8c1b      	ldrh	r3, [r3, #32]
    ed34:	4843      	ldr	r0, [pc, #268]	; (ee44 <m2m_wifi_init+0x1c4>)
    ed36:	9300      	str	r3, [sp, #0]
    ed38:	0023      	movs	r3, r4
    ed3a:	4c41      	ldr	r4, [pc, #260]	; (ee40 <m2m_wifi_init+0x1c0>)
    ed3c:	47a0      	blx	r4
    ed3e:	4b42      	ldr	r3, [pc, #264]	; (ee48 <m2m_wifi_init+0x1c8>)
    ed40:	0018      	movs	r0, r3
    ed42:	4b3f      	ldr	r3, [pc, #252]	; (ee40 <m2m_wifi_init+0x1c0>)
    ed44:	4798      	blx	r3
	M2M_INFO("Firmware Build %s Time %s\n",strtmp.BuildDate,strtmp.BuildTime);
    ed46:	4b3d      	ldr	r3, [pc, #244]	; (ee3c <m2m_wifi_init+0x1bc>)
    ed48:	0018      	movs	r0, r3
    ed4a:	4b3d      	ldr	r3, [pc, #244]	; (ee40 <m2m_wifi_init+0x1c0>)
    ed4c:	4798      	blx	r3
    ed4e:	230c      	movs	r3, #12
    ed50:	18fb      	adds	r3, r7, r3
    ed52:	3316      	adds	r3, #22
    ed54:	001a      	movs	r2, r3
    ed56:	230c      	movs	r3, #12
    ed58:	18fb      	adds	r3, r7, r3
    ed5a:	330a      	adds	r3, #10
    ed5c:	0019      	movs	r1, r3
    ed5e:	4b3b      	ldr	r3, [pc, #236]	; (ee4c <m2m_wifi_init+0x1cc>)
    ed60:	0018      	movs	r0, r3
    ed62:	4b37      	ldr	r3, [pc, #220]	; (ee40 <m2m_wifi_init+0x1c0>)
    ed64:	4798      	blx	r3
    ed66:	4b38      	ldr	r3, [pc, #224]	; (ee48 <m2m_wifi_init+0x1c8>)
    ed68:	0018      	movs	r0, r3
    ed6a:	4b35      	ldr	r3, [pc, #212]	; (ee40 <m2m_wifi_init+0x1c0>)
    ed6c:	4798      	blx	r3
	M2M_INFO("Firmware Min driver ver : %u.%u.%u\n", strtmp.u8DriverMajor, strtmp.u8DriverMinor, strtmp.u8DriverPatch);
    ed6e:	4b33      	ldr	r3, [pc, #204]	; (ee3c <m2m_wifi_init+0x1bc>)
    ed70:	0018      	movs	r0, r3
    ed72:	4b33      	ldr	r3, [pc, #204]	; (ee40 <m2m_wifi_init+0x1c0>)
    ed74:	4798      	blx	r3
    ed76:	230c      	movs	r3, #12
    ed78:	18fb      	adds	r3, r7, r3
    ed7a:	79db      	ldrb	r3, [r3, #7]
    ed7c:	0019      	movs	r1, r3
    ed7e:	230c      	movs	r3, #12
    ed80:	18fb      	adds	r3, r7, r3
    ed82:	7a1b      	ldrb	r3, [r3, #8]
    ed84:	001a      	movs	r2, r3
    ed86:	230c      	movs	r3, #12
    ed88:	18fb      	adds	r3, r7, r3
    ed8a:	7a5b      	ldrb	r3, [r3, #9]
    ed8c:	4830      	ldr	r0, [pc, #192]	; (ee50 <m2m_wifi_init+0x1d0>)
    ed8e:	4c2c      	ldr	r4, [pc, #176]	; (ee40 <m2m_wifi_init+0x1c0>)
    ed90:	47a0      	blx	r4
    ed92:	4b2d      	ldr	r3, [pc, #180]	; (ee48 <m2m_wifi_init+0x1c8>)
    ed94:	0018      	movs	r0, r3
    ed96:	4b2a      	ldr	r3, [pc, #168]	; (ee40 <m2m_wifi_init+0x1c0>)
    ed98:	4798      	blx	r3
	M2M_INFO("Driver ver: %u.%u.%u\n", M2M_RELEASE_VERSION_MAJOR_NO, M2M_RELEASE_VERSION_MINOR_NO, M2M_RELEASE_VERSION_PATCH_NO);
    ed9a:	4b28      	ldr	r3, [pc, #160]	; (ee3c <m2m_wifi_init+0x1bc>)
    ed9c:	0018      	movs	r0, r3
    ed9e:	4b28      	ldr	r3, [pc, #160]	; (ee40 <m2m_wifi_init+0x1c0>)
    eda0:	4798      	blx	r3
    eda2:	482c      	ldr	r0, [pc, #176]	; (ee54 <m2m_wifi_init+0x1d4>)
    eda4:	2304      	movs	r3, #4
    eda6:	2205      	movs	r2, #5
    eda8:	2113      	movs	r1, #19
    edaa:	4c25      	ldr	r4, [pc, #148]	; (ee40 <m2m_wifi_init+0x1c0>)
    edac:	47a0      	blx	r4
    edae:	4b26      	ldr	r3, [pc, #152]	; (ee48 <m2m_wifi_init+0x1c8>)
    edb0:	0018      	movs	r0, r3
    edb2:	4b23      	ldr	r3, [pc, #140]	; (ee40 <m2m_wifi_init+0x1c0>)
    edb4:	4798      	blx	r3
	M2M_INFO("Driver built at %s\t%s\n",__DATE__,__TIME__);
    edb6:	4b21      	ldr	r3, [pc, #132]	; (ee3c <m2m_wifi_init+0x1bc>)
    edb8:	0018      	movs	r0, r3
    edba:	4b21      	ldr	r3, [pc, #132]	; (ee40 <m2m_wifi_init+0x1c0>)
    edbc:	4798      	blx	r3
    edbe:	4a26      	ldr	r2, [pc, #152]	; (ee58 <m2m_wifi_init+0x1d8>)
    edc0:	4926      	ldr	r1, [pc, #152]	; (ee5c <m2m_wifi_init+0x1dc>)
    edc2:	4b27      	ldr	r3, [pc, #156]	; (ee60 <m2m_wifi_init+0x1e0>)
    edc4:	0018      	movs	r0, r3
    edc6:	4b1e      	ldr	r3, [pc, #120]	; (ee40 <m2m_wifi_init+0x1c0>)
    edc8:	4798      	blx	r3
    edca:	4b1f      	ldr	r3, [pc, #124]	; (ee48 <m2m_wifi_init+0x1c8>)
    edcc:	0018      	movs	r0, r3
    edce:	4b1c      	ldr	r3, [pc, #112]	; (ee40 <m2m_wifi_init+0x1c0>)
    edd0:	4798      	blx	r3
	if(M2M_ERR_FW_VER_MISMATCH == ret)
    edd2:	2337      	movs	r3, #55	; 0x37
    edd4:	18fb      	adds	r3, r7, r3
    edd6:	781b      	ldrb	r3, [r3, #0]
    edd8:	b25b      	sxtb	r3, r3
    edda:	330d      	adds	r3, #13
    eddc:	d117      	bne.n	ee0e <m2m_wifi_init+0x18e>
	{
		M2M_ERR("Mismatch Firmawre Version\n");
    edde:	23e8      	movs	r3, #232	; 0xe8
    ede0:	33ff      	adds	r3, #255	; 0xff
    ede2:	001a      	movs	r2, r3
    ede4:	491f      	ldr	r1, [pc, #124]	; (ee64 <m2m_wifi_init+0x1e4>)
    ede6:	4b20      	ldr	r3, [pc, #128]	; (ee68 <m2m_wifi_init+0x1e8>)
    ede8:	0018      	movs	r0, r3
    edea:	4b15      	ldr	r3, [pc, #84]	; (ee40 <m2m_wifi_init+0x1c0>)
    edec:	4798      	blx	r3
    edee:	4b1f      	ldr	r3, [pc, #124]	; (ee6c <m2m_wifi_init+0x1ec>)
    edf0:	0018      	movs	r0, r3
    edf2:	4b13      	ldr	r3, [pc, #76]	; (ee40 <m2m_wifi_init+0x1c0>)
    edf4:	4798      	blx	r3
    edf6:	4b14      	ldr	r3, [pc, #80]	; (ee48 <m2m_wifi_init+0x1c8>)
    edf8:	0018      	movs	r0, r3
    edfa:	4b11      	ldr	r3, [pc, #68]	; (ee40 <m2m_wifi_init+0x1c0>)
    edfc:	4798      	blx	r3
	}

	goto _EXIT0;
    edfe:	e006      	b.n	ee0e <m2m_wifi_init+0x18e>
	if(ret != M2M_SUCCESS) 	goto _EXIT1;
    ee00:	46c0      	nop			; (mov r8, r8)

_EXIT1:
	nm_drv_deinit(NULL);
    ee02:	2000      	movs	r0, #0
    ee04:	4b1a      	ldr	r3, [pc, #104]	; (ee70 <m2m_wifi_init+0x1f0>)
    ee06:	4798      	blx	r3
    ee08:	e002      	b.n	ee10 <m2m_wifi_init+0x190>
	if(ret != M2M_SUCCESS) 	goto _EXIT0;
    ee0a:	46c0      	nop			; (mov r8, r8)
    ee0c:	e000      	b.n	ee10 <m2m_wifi_init+0x190>
	goto _EXIT0;
    ee0e:	46c0      	nop			; (mov r8, r8)
_EXIT0:
	return ret;
    ee10:	2337      	movs	r3, #55	; 0x37
    ee12:	18fb      	adds	r3, r7, r3
    ee14:	781b      	ldrb	r3, [r3, #0]
    ee16:	b25b      	sxtb	r3, r3
}
    ee18:	0018      	movs	r0, r3
    ee1a:	46bd      	mov	sp, r7
    ee1c:	b00f      	add	sp, #60	; 0x3c
    ee1e:	bd90      	pop	{r4, r7, pc}
    ee20:	20003d24 	.word	0x20003d24
    ee24:	20003d21 	.word	0x20003d21
    ee28:	0000ffa5 	.word	0x0000ffa5
    ee2c:	0000dd29 	.word	0x0000dd29
    ee30:	0000e8c9 	.word	0x0000e8c9
    ee34:	0000e80d 	.word	0x0000e80d
    ee38:	0000fdd9 	.word	0x0000fdd9
    ee3c:	000251ec 	.word	0x000251ec
    ee40:	0000addd 	.word	0x0000addd
    ee44:	00025390 	.word	0x00025390
    ee48:	00025218 	.word	0x00025218
    ee4c:	000253b8 	.word	0x000253b8
    ee50:	000253d4 	.word	0x000253d4
    ee54:	000253f8 	.word	0x000253f8
    ee58:	00025410 	.word	0x00025410
    ee5c:	0002541c 	.word	0x0002541c
    ee60:	00025428 	.word	0x00025428
    ee64:	000255c4 	.word	0x000255c4
    ee68:	0002521c 	.word	0x0002521c
    ee6c:	00025440 	.word	0x00025440
    ee70:	00010135 	.word	0x00010135

0000ee74 <m2m_wifi_handle_events>:
{
	hif_yield();
}

sint8 m2m_wifi_handle_events(void * arg)
{
    ee74:	b580      	push	{r7, lr}
    ee76:	b082      	sub	sp, #8
    ee78:	af00      	add	r7, sp, #0
    ee7a:	6078      	str	r0, [r7, #4]
	return hif_handle_isr();
    ee7c:	4b03      	ldr	r3, [pc, #12]	; (ee8c <m2m_wifi_handle_events+0x18>)
    ee7e:	4798      	blx	r3
    ee80:	0003      	movs	r3, r0
}
    ee82:	0018      	movs	r0, r3
    ee84:	46bd      	mov	sp, r7
    ee86:	b002      	add	sp, #8
    ee88:	bd80      	pop	{r7, pc}
    ee8a:	46c0      	nop			; (mov r8, r8)
    ee8c:	0000e5ed 	.word	0x0000e5ed

0000ee90 <m2m_wifi_connect>:
{
	return hif_send(M2M_REQ_GROUP_WIFI, M2M_WIFI_REQ_DEFAULT_CONNECT, NULL, 0,NULL, 0,0);
}

sint8 m2m_wifi_connect(char *pcSsid, uint8 u8SsidLen, uint8 u8SecType, void *pvAuthInfo, uint16 u16Ch)
{
    ee90:	b590      	push	{r4, r7, lr}
    ee92:	b087      	sub	sp, #28
    ee94:	af02      	add	r7, sp, #8
    ee96:	60f8      	str	r0, [r7, #12]
    ee98:	0008      	movs	r0, r1
    ee9a:	0011      	movs	r1, r2
    ee9c:	607b      	str	r3, [r7, #4]
    ee9e:	230b      	movs	r3, #11
    eea0:	18fb      	adds	r3, r7, r3
    eea2:	1c02      	adds	r2, r0, #0
    eea4:	701a      	strb	r2, [r3, #0]
    eea6:	230a      	movs	r3, #10
    eea8:	18fb      	adds	r3, r7, r3
    eeaa:	1c0a      	adds	r2, r1, #0
    eeac:	701a      	strb	r2, [r3, #0]
	return m2m_wifi_connect_sc(pcSsid, u8SsidLen, u8SecType, pvAuthInfo,  u16Ch,0);
    eeae:	687c      	ldr	r4, [r7, #4]
    eeb0:	230a      	movs	r3, #10
    eeb2:	18fb      	adds	r3, r7, r3
    eeb4:	781a      	ldrb	r2, [r3, #0]
    eeb6:	230b      	movs	r3, #11
    eeb8:	18fb      	adds	r3, r7, r3
    eeba:	7819      	ldrb	r1, [r3, #0]
    eebc:	68f8      	ldr	r0, [r7, #12]
    eebe:	2300      	movs	r3, #0
    eec0:	9301      	str	r3, [sp, #4]
    eec2:	2320      	movs	r3, #32
    eec4:	18fb      	adds	r3, r7, r3
    eec6:	881b      	ldrh	r3, [r3, #0]
    eec8:	9300      	str	r3, [sp, #0]
    eeca:	0023      	movs	r3, r4
    eecc:	4c03      	ldr	r4, [pc, #12]	; (eedc <m2m_wifi_connect+0x4c>)
    eece:	47a0      	blx	r4
    eed0:	0003      	movs	r3, r0
}
    eed2:	0018      	movs	r0, r3
    eed4:	46bd      	mov	sp, r7
    eed6:	b005      	add	sp, #20
    eed8:	bd90      	pop	{r4, r7, pc}
    eeda:	46c0      	nop			; (mov r8, r8)
    eedc:	0000eee1 	.word	0x0000eee1

0000eee0 <m2m_wifi_connect_sc>:
sint8 m2m_wifi_connect_sc(char *pcSsid, uint8 u8SsidLen, uint8 u8SecType, void *pvAuthInfo, uint16 u16Ch, uint8 u8NoSaveCred)
{
    eee0:	b5b0      	push	{r4, r5, r7, lr}
    eee2:	b0aa      	sub	sp, #168	; 0xa8
    eee4:	af04      	add	r7, sp, #16
    eee6:	60f8      	str	r0, [r7, #12]
    eee8:	0008      	movs	r0, r1
    eeea:	0011      	movs	r1, r2
    eeec:	607b      	str	r3, [r7, #4]
    eeee:	230b      	movs	r3, #11
    eef0:	18fb      	adds	r3, r7, r3
    eef2:	1c02      	adds	r2, r0, #0
    eef4:	701a      	strb	r2, [r3, #0]
    eef6:	230a      	movs	r3, #10
    eef8:	18fb      	adds	r3, r7, r3
    eefa:	1c0a      	adds	r2, r1, #0
    eefc:	701a      	strb	r2, [r3, #0]
	sint8				ret = M2M_SUCCESS;
    eefe:	2397      	movs	r3, #151	; 0x97
    ef00:	18fb      	adds	r3, r7, r3
    ef02:	2200      	movs	r2, #0
    ef04:	701a      	strb	r2, [r3, #0]
	tstrM2mWifiConnect	strConnect;
	tstrM2MWifiSecInfo	*pstrAuthInfo;

	if(u8SecType != M2M_WIFI_SEC_OPEN)
    ef06:	230a      	movs	r3, #10
    ef08:	18fb      	adds	r3, r7, r3
    ef0a:	781b      	ldrb	r3, [r3, #0]
    ef0c:	2b01      	cmp	r3, #1
    ef0e:	d100      	bne.n	ef12 <m2m_wifi_connect_sc+0x32>
    ef10:	e085      	b.n	f01e <m2m_wifi_connect_sc+0x13e>
	{
		if(pvAuthInfo == NULL)
    ef12:	687b      	ldr	r3, [r7, #4]
    ef14:	2b00      	cmp	r3, #0
    ef16:	d112      	bne.n	ef3e <m2m_wifi_connect_sc+0x5e>
		{
			M2M_ERR("Key is not valid\n");
    ef18:	4ad8      	ldr	r2, [pc, #864]	; (f27c <m2m_wifi_connect_sc+0x39c>)
    ef1a:	49d9      	ldr	r1, [pc, #868]	; (f280 <m2m_wifi_connect_sc+0x3a0>)
    ef1c:	4bd9      	ldr	r3, [pc, #868]	; (f284 <m2m_wifi_connect_sc+0x3a4>)
    ef1e:	0018      	movs	r0, r3
    ef20:	4bd9      	ldr	r3, [pc, #868]	; (f288 <m2m_wifi_connect_sc+0x3a8>)
    ef22:	4798      	blx	r3
    ef24:	4bd9      	ldr	r3, [pc, #868]	; (f28c <m2m_wifi_connect_sc+0x3ac>)
    ef26:	0018      	movs	r0, r3
    ef28:	4bd7      	ldr	r3, [pc, #860]	; (f288 <m2m_wifi_connect_sc+0x3a8>)
    ef2a:	4798      	blx	r3
    ef2c:	4bd8      	ldr	r3, [pc, #864]	; (f290 <m2m_wifi_connect_sc+0x3b0>)
    ef2e:	0018      	movs	r0, r3
    ef30:	4bd5      	ldr	r3, [pc, #852]	; (f288 <m2m_wifi_connect_sc+0x3a8>)
    ef32:	4798      	blx	r3
			ret = M2M_ERR_FAIL;
    ef34:	2397      	movs	r3, #151	; 0x97
    ef36:	18fb      	adds	r3, r7, r3
    ef38:	22f4      	movs	r2, #244	; 0xf4
    ef3a:	701a      	strb	r2, [r3, #0]
			goto ERR1;
    ef3c:	e1f9      	b.n	f332 <m2m_wifi_connect_sc+0x452>
		}
		if((u8SecType == M2M_WIFI_SEC_WPA_PSK) && (m2m_strlen(pvAuthInfo) == (M2M_MAX_PSK_LEN-1)))
    ef3e:	230a      	movs	r3, #10
    ef40:	18fb      	adds	r3, r7, r3
    ef42:	781b      	ldrb	r3, [r3, #0]
    ef44:	2b02      	cmp	r3, #2
    ef46:	d16a      	bne.n	f01e <m2m_wifi_connect_sc+0x13e>
    ef48:	687b      	ldr	r3, [r7, #4]
    ef4a:	0018      	movs	r0, r3
    ef4c:	4bd1      	ldr	r3, [pc, #836]	; (f294 <m2m_wifi_connect_sc+0x3b4>)
    ef4e:	4798      	blx	r3
    ef50:	0003      	movs	r3, r0
    ef52:	2b40      	cmp	r3, #64	; 0x40
    ef54:	d163      	bne.n	f01e <m2m_wifi_connect_sc+0x13e>
		{
			uint8 i = 0;
    ef56:	2396      	movs	r3, #150	; 0x96
    ef58:	18fb      	adds	r3, r7, r3
    ef5a:	2200      	movs	r2, #0
    ef5c:	701a      	strb	r2, [r3, #0]
			uint8* pu8Psk = (uint8*)pvAuthInfo;
    ef5e:	687b      	ldr	r3, [r7, #4]
    ef60:	2290      	movs	r2, #144	; 0x90
    ef62:	18ba      	adds	r2, r7, r2
    ef64:	6013      	str	r3, [r2, #0]
			while(i < (M2M_MAX_PSK_LEN-1))
    ef66:	e055      	b.n	f014 <m2m_wifi_connect_sc+0x134>
			{
				if(pu8Psk[i]<'0' || (pu8Psk[i]>'9' && pu8Psk[i] < 'A')|| (pu8Psk[i]>'F' && pu8Psk[i] < 'a') || pu8Psk[i] > 'f')
    ef68:	2396      	movs	r3, #150	; 0x96
    ef6a:	18fb      	adds	r3, r7, r3
    ef6c:	781b      	ldrb	r3, [r3, #0]
    ef6e:	2290      	movs	r2, #144	; 0x90
    ef70:	18ba      	adds	r2, r7, r2
    ef72:	6812      	ldr	r2, [r2, #0]
    ef74:	18d3      	adds	r3, r2, r3
    ef76:	781b      	ldrb	r3, [r3, #0]
    ef78:	2b2f      	cmp	r3, #47	; 0x2f
    ef7a:	d931      	bls.n	efe0 <m2m_wifi_connect_sc+0x100>
    ef7c:	2396      	movs	r3, #150	; 0x96
    ef7e:	18fb      	adds	r3, r7, r3
    ef80:	781b      	ldrb	r3, [r3, #0]
    ef82:	2290      	movs	r2, #144	; 0x90
    ef84:	18ba      	adds	r2, r7, r2
    ef86:	6812      	ldr	r2, [r2, #0]
    ef88:	18d3      	adds	r3, r2, r3
    ef8a:	781b      	ldrb	r3, [r3, #0]
    ef8c:	2b39      	cmp	r3, #57	; 0x39
    ef8e:	d909      	bls.n	efa4 <m2m_wifi_connect_sc+0xc4>
    ef90:	2396      	movs	r3, #150	; 0x96
    ef92:	18fb      	adds	r3, r7, r3
    ef94:	781b      	ldrb	r3, [r3, #0]
    ef96:	2290      	movs	r2, #144	; 0x90
    ef98:	18ba      	adds	r2, r7, r2
    ef9a:	6812      	ldr	r2, [r2, #0]
    ef9c:	18d3      	adds	r3, r2, r3
    ef9e:	781b      	ldrb	r3, [r3, #0]
    efa0:	2b40      	cmp	r3, #64	; 0x40
    efa2:	d91d      	bls.n	efe0 <m2m_wifi_connect_sc+0x100>
    efa4:	2396      	movs	r3, #150	; 0x96
    efa6:	18fb      	adds	r3, r7, r3
    efa8:	781b      	ldrb	r3, [r3, #0]
    efaa:	2290      	movs	r2, #144	; 0x90
    efac:	18ba      	adds	r2, r7, r2
    efae:	6812      	ldr	r2, [r2, #0]
    efb0:	18d3      	adds	r3, r2, r3
    efb2:	781b      	ldrb	r3, [r3, #0]
    efb4:	2b46      	cmp	r3, #70	; 0x46
    efb6:	d909      	bls.n	efcc <m2m_wifi_connect_sc+0xec>
    efb8:	2396      	movs	r3, #150	; 0x96
    efba:	18fb      	adds	r3, r7, r3
    efbc:	781b      	ldrb	r3, [r3, #0]
    efbe:	2290      	movs	r2, #144	; 0x90
    efc0:	18ba      	adds	r2, r7, r2
    efc2:	6812      	ldr	r2, [r2, #0]
    efc4:	18d3      	adds	r3, r2, r3
    efc6:	781b      	ldrb	r3, [r3, #0]
    efc8:	2b60      	cmp	r3, #96	; 0x60
    efca:	d909      	bls.n	efe0 <m2m_wifi_connect_sc+0x100>
    efcc:	2396      	movs	r3, #150	; 0x96
    efce:	18fb      	adds	r3, r7, r3
    efd0:	781b      	ldrb	r3, [r3, #0]
    efd2:	2290      	movs	r2, #144	; 0x90
    efd4:	18ba      	adds	r2, r7, r2
    efd6:	6812      	ldr	r2, [r2, #0]
    efd8:	18d3      	adds	r3, r2, r3
    efda:	781b      	ldrb	r3, [r3, #0]
    efdc:	2b66      	cmp	r3, #102	; 0x66
    efde:	d912      	bls.n	f006 <m2m_wifi_connect_sc+0x126>
				{
					M2M_ERR("Invalid Key\n");
    efe0:	4aad      	ldr	r2, [pc, #692]	; (f298 <m2m_wifi_connect_sc+0x3b8>)
    efe2:	49a7      	ldr	r1, [pc, #668]	; (f280 <m2m_wifi_connect_sc+0x3a0>)
    efe4:	4ba7      	ldr	r3, [pc, #668]	; (f284 <m2m_wifi_connect_sc+0x3a4>)
    efe6:	0018      	movs	r0, r3
    efe8:	4ba7      	ldr	r3, [pc, #668]	; (f288 <m2m_wifi_connect_sc+0x3a8>)
    efea:	4798      	blx	r3
    efec:	4bab      	ldr	r3, [pc, #684]	; (f29c <m2m_wifi_connect_sc+0x3bc>)
    efee:	0018      	movs	r0, r3
    eff0:	4ba5      	ldr	r3, [pc, #660]	; (f288 <m2m_wifi_connect_sc+0x3a8>)
    eff2:	4798      	blx	r3
    eff4:	4ba6      	ldr	r3, [pc, #664]	; (f290 <m2m_wifi_connect_sc+0x3b0>)
    eff6:	0018      	movs	r0, r3
    eff8:	4ba3      	ldr	r3, [pc, #652]	; (f288 <m2m_wifi_connect_sc+0x3a8>)
    effa:	4798      	blx	r3
					ret = M2M_ERR_FAIL;
    effc:	2397      	movs	r3, #151	; 0x97
    effe:	18fb      	adds	r3, r7, r3
    f000:	22f4      	movs	r2, #244	; 0xf4
    f002:	701a      	strb	r2, [r3, #0]
					goto ERR1;
    f004:	e195      	b.n	f332 <m2m_wifi_connect_sc+0x452>
				}
				i++;
    f006:	2396      	movs	r3, #150	; 0x96
    f008:	18fb      	adds	r3, r7, r3
    f00a:	781a      	ldrb	r2, [r3, #0]
    f00c:	2396      	movs	r3, #150	; 0x96
    f00e:	18fb      	adds	r3, r7, r3
    f010:	3201      	adds	r2, #1
    f012:	701a      	strb	r2, [r3, #0]
			while(i < (M2M_MAX_PSK_LEN-1))
    f014:	2396      	movs	r3, #150	; 0x96
    f016:	18fb      	adds	r3, r7, r3
    f018:	781b      	ldrb	r3, [r3, #0]
    f01a:	2b3f      	cmp	r3, #63	; 0x3f
    f01c:	d9a4      	bls.n	ef68 <m2m_wifi_connect_sc+0x88>
			}
		}
	}
	if((u8SsidLen<=0)||(u8SsidLen>=M2M_MAX_SSID_LEN))
    f01e:	230b      	movs	r3, #11
    f020:	18fb      	adds	r3, r7, r3
    f022:	781b      	ldrb	r3, [r3, #0]
    f024:	2b00      	cmp	r3, #0
    f026:	d004      	beq.n	f032 <m2m_wifi_connect_sc+0x152>
    f028:	230b      	movs	r3, #11
    f02a:	18fb      	adds	r3, r7, r3
    f02c:	781b      	ldrb	r3, [r3, #0]
    f02e:	2b20      	cmp	r3, #32
    f030:	d913      	bls.n	f05a <m2m_wifi_connect_sc+0x17a>
	{
		M2M_ERR("SSID LEN INVALID\n");
    f032:	238c      	movs	r3, #140	; 0x8c
    f034:	009a      	lsls	r2, r3, #2
    f036:	4992      	ldr	r1, [pc, #584]	; (f280 <m2m_wifi_connect_sc+0x3a0>)
    f038:	4b92      	ldr	r3, [pc, #584]	; (f284 <m2m_wifi_connect_sc+0x3a4>)
    f03a:	0018      	movs	r0, r3
    f03c:	4b92      	ldr	r3, [pc, #584]	; (f288 <m2m_wifi_connect_sc+0x3a8>)
    f03e:	4798      	blx	r3
    f040:	4b97      	ldr	r3, [pc, #604]	; (f2a0 <m2m_wifi_connect_sc+0x3c0>)
    f042:	0018      	movs	r0, r3
    f044:	4b90      	ldr	r3, [pc, #576]	; (f288 <m2m_wifi_connect_sc+0x3a8>)
    f046:	4798      	blx	r3
    f048:	4b91      	ldr	r3, [pc, #580]	; (f290 <m2m_wifi_connect_sc+0x3b0>)
    f04a:	0018      	movs	r0, r3
    f04c:	4b8e      	ldr	r3, [pc, #568]	; (f288 <m2m_wifi_connect_sc+0x3a8>)
    f04e:	4798      	blx	r3
		ret = M2M_ERR_FAIL;
    f050:	2397      	movs	r3, #151	; 0x97
    f052:	18fb      	adds	r3, r7, r3
    f054:	22f4      	movs	r2, #244	; 0xf4
    f056:	701a      	strb	r2, [r3, #0]
		goto ERR1;
    f058:	e16b      	b.n	f332 <m2m_wifi_connect_sc+0x452>
	}

	if(u16Ch < M2M_WIFI_CH_1|| u16Ch > M2M_WIFI_CH_14)
    f05a:	23a8      	movs	r3, #168	; 0xa8
    f05c:	18fb      	adds	r3, r7, r3
    f05e:	881b      	ldrh	r3, [r3, #0]
    f060:	2b00      	cmp	r3, #0
    f062:	d004      	beq.n	f06e <m2m_wifi_connect_sc+0x18e>
    f064:	23a8      	movs	r3, #168	; 0xa8
    f066:	18fb      	adds	r3, r7, r3
    f068:	881b      	ldrh	r3, [r3, #0]
    f06a:	2b0e      	cmp	r3, #14
    f06c:	d917      	bls.n	f09e <m2m_wifi_connect_sc+0x1be>
	{
		if(u16Ch!=M2M_WIFI_CH_ALL)
    f06e:	23a8      	movs	r3, #168	; 0xa8
    f070:	18fb      	adds	r3, r7, r3
    f072:	881b      	ldrh	r3, [r3, #0]
    f074:	2bff      	cmp	r3, #255	; 0xff
    f076:	d012      	beq.n	f09e <m2m_wifi_connect_sc+0x1be>
		{
			M2M_ERR("CH INVALID\n");
    f078:	4a8a      	ldr	r2, [pc, #552]	; (f2a4 <m2m_wifi_connect_sc+0x3c4>)
    f07a:	4981      	ldr	r1, [pc, #516]	; (f280 <m2m_wifi_connect_sc+0x3a0>)
    f07c:	4b81      	ldr	r3, [pc, #516]	; (f284 <m2m_wifi_connect_sc+0x3a4>)
    f07e:	0018      	movs	r0, r3
    f080:	4b81      	ldr	r3, [pc, #516]	; (f288 <m2m_wifi_connect_sc+0x3a8>)
    f082:	4798      	blx	r3
    f084:	4b88      	ldr	r3, [pc, #544]	; (f2a8 <m2m_wifi_connect_sc+0x3c8>)
    f086:	0018      	movs	r0, r3
    f088:	4b7f      	ldr	r3, [pc, #508]	; (f288 <m2m_wifi_connect_sc+0x3a8>)
    f08a:	4798      	blx	r3
    f08c:	4b80      	ldr	r3, [pc, #512]	; (f290 <m2m_wifi_connect_sc+0x3b0>)
    f08e:	0018      	movs	r0, r3
    f090:	4b7d      	ldr	r3, [pc, #500]	; (f288 <m2m_wifi_connect_sc+0x3a8>)
    f092:	4798      	blx	r3
			ret = M2M_ERR_FAIL;
    f094:	2397      	movs	r3, #151	; 0x97
    f096:	18fb      	adds	r3, r7, r3
    f098:	22f4      	movs	r2, #244	; 0xf4
    f09a:	701a      	strb	r2, [r3, #0]
			goto ERR1;
    f09c:	e149      	b.n	f332 <m2m_wifi_connect_sc+0x452>
		}
	}


	m2m_memcpy(strConnect.au8SSID, (uint8*)pcSsid, u8SsidLen);
    f09e:	230b      	movs	r3, #11
    f0a0:	18fb      	adds	r3, r7, r3
    f0a2:	781a      	ldrb	r2, [r3, #0]
    f0a4:	68f9      	ldr	r1, [r7, #12]
    f0a6:	2314      	movs	r3, #20
    f0a8:	18fb      	adds	r3, r7, r3
    f0aa:	3346      	adds	r3, #70	; 0x46
    f0ac:	0018      	movs	r0, r3
    f0ae:	4b7f      	ldr	r3, [pc, #508]	; (f2ac <m2m_wifi_connect_sc+0x3cc>)
    f0b0:	4798      	blx	r3
	strConnect.au8SSID[u8SsidLen]	= 0;
    f0b2:	230b      	movs	r3, #11
    f0b4:	18fb      	adds	r3, r7, r3
    f0b6:	781b      	ldrb	r3, [r3, #0]
    f0b8:	2214      	movs	r2, #20
    f0ba:	18ba      	adds	r2, r7, r2
    f0bc:	2146      	movs	r1, #70	; 0x46
    f0be:	18d3      	adds	r3, r2, r3
    f0c0:	185b      	adds	r3, r3, r1
    f0c2:	2200      	movs	r2, #0
    f0c4:	701a      	strb	r2, [r3, #0]
	strConnect.u16Ch				= NM_BSP_B_L_16(u16Ch);
    f0c6:	2314      	movs	r3, #20
    f0c8:	18fb      	adds	r3, r7, r3
    f0ca:	22a8      	movs	r2, #168	; 0xa8
    f0cc:	18ba      	adds	r2, r7, r2
    f0ce:	2144      	movs	r1, #68	; 0x44
    f0d0:	8812      	ldrh	r2, [r2, #0]
    f0d2:	525a      	strh	r2, [r3, r1]
	/* Credentials will be Not be saved if u8NoSaveCred is set */ 
	strConnect.u8NoSaveCred 			= u8NoSaveCred ? 1:0;
    f0d4:	23ac      	movs	r3, #172	; 0xac
    f0d6:	18fb      	adds	r3, r7, r3
    f0d8:	781b      	ldrb	r3, [r3, #0]
    f0da:	1e5a      	subs	r2, r3, #1
    f0dc:	4193      	sbcs	r3, r2
    f0de:	b2db      	uxtb	r3, r3
    f0e0:	0019      	movs	r1, r3
    f0e2:	2314      	movs	r3, #20
    f0e4:	18fb      	adds	r3, r7, r3
    f0e6:	2267      	movs	r2, #103	; 0x67
    f0e8:	5499      	strb	r1, [r3, r2]
	pstrAuthInfo = &strConnect.strSec;
    f0ea:	2314      	movs	r3, #20
    f0ec:	18fb      	adds	r3, r7, r3
    f0ee:	228c      	movs	r2, #140	; 0x8c
    f0f0:	18ba      	adds	r2, r7, r2
    f0f2:	6013      	str	r3, [r2, #0]
	pstrAuthInfo->u8SecType		= u8SecType;
    f0f4:	238c      	movs	r3, #140	; 0x8c
    f0f6:	18fb      	adds	r3, r7, r3
    f0f8:	681b      	ldr	r3, [r3, #0]
    f0fa:	220a      	movs	r2, #10
    f0fc:	18ba      	adds	r2, r7, r2
    f0fe:	2141      	movs	r1, #65	; 0x41
    f100:	7812      	ldrb	r2, [r2, #0]
    f102:	545a      	strb	r2, [r3, r1]

	if(u8SecType == M2M_WIFI_SEC_WEP)
    f104:	230a      	movs	r3, #10
    f106:	18fb      	adds	r3, r7, r3
    f108:	781b      	ldrb	r3, [r3, #0]
    f10a:	2b03      	cmp	r3, #3
    f10c:	d000      	beq.n	f110 <m2m_wifi_connect_sc+0x230>
    f10e:	e07d      	b.n	f20c <m2m_wifi_connect_sc+0x32c>
	{
		tstrM2mWifiWepParams	* pstrWepParams = (tstrM2mWifiWepParams*)pvAuthInfo;
    f110:	687b      	ldr	r3, [r7, #4]
    f112:	2288      	movs	r2, #136	; 0x88
    f114:	18ba      	adds	r2, r7, r2
    f116:	6013      	str	r3, [r2, #0]
		tstrM2mWifiWepParams	*pstrWep = &pstrAuthInfo->uniAuth.strWepInfo;
    f118:	238c      	movs	r3, #140	; 0x8c
    f11a:	18fb      	adds	r3, r7, r3
    f11c:	681b      	ldr	r3, [r3, #0]
    f11e:	2284      	movs	r2, #132	; 0x84
    f120:	18ba      	adds	r2, r7, r2
    f122:	6013      	str	r3, [r2, #0]
		pstrWep->u8KeyIndx =pstrWepParams->u8KeyIndx-1;
    f124:	2388      	movs	r3, #136	; 0x88
    f126:	18fb      	adds	r3, r7, r3
    f128:	681b      	ldr	r3, [r3, #0]
    f12a:	781b      	ldrb	r3, [r3, #0]
    f12c:	3b01      	subs	r3, #1
    f12e:	b2da      	uxtb	r2, r3
    f130:	2384      	movs	r3, #132	; 0x84
    f132:	18fb      	adds	r3, r7, r3
    f134:	681b      	ldr	r3, [r3, #0]
    f136:	701a      	strb	r2, [r3, #0]

		if(pstrWep->u8KeyIndx >= WEP_KEY_MAX_INDEX)
    f138:	2384      	movs	r3, #132	; 0x84
    f13a:	18fb      	adds	r3, r7, r3
    f13c:	681b      	ldr	r3, [r3, #0]
    f13e:	781b      	ldrb	r3, [r3, #0]
    f140:	2b03      	cmp	r3, #3
    f142:	d919      	bls.n	f178 <m2m_wifi_connect_sc+0x298>
		{
			M2M_ERR("Invalid Wep key index %d\n", pstrWep->u8KeyIndx);
    f144:	2394      	movs	r3, #148	; 0x94
    f146:	009a      	lsls	r2, r3, #2
    f148:	494d      	ldr	r1, [pc, #308]	; (f280 <m2m_wifi_connect_sc+0x3a0>)
    f14a:	4b4e      	ldr	r3, [pc, #312]	; (f284 <m2m_wifi_connect_sc+0x3a4>)
    f14c:	0018      	movs	r0, r3
    f14e:	4b4e      	ldr	r3, [pc, #312]	; (f288 <m2m_wifi_connect_sc+0x3a8>)
    f150:	4798      	blx	r3
    f152:	2384      	movs	r3, #132	; 0x84
    f154:	18fb      	adds	r3, r7, r3
    f156:	681b      	ldr	r3, [r3, #0]
    f158:	781b      	ldrb	r3, [r3, #0]
    f15a:	001a      	movs	r2, r3
    f15c:	4b54      	ldr	r3, [pc, #336]	; (f2b0 <m2m_wifi_connect_sc+0x3d0>)
    f15e:	0011      	movs	r1, r2
    f160:	0018      	movs	r0, r3
    f162:	4b49      	ldr	r3, [pc, #292]	; (f288 <m2m_wifi_connect_sc+0x3a8>)
    f164:	4798      	blx	r3
    f166:	4b4a      	ldr	r3, [pc, #296]	; (f290 <m2m_wifi_connect_sc+0x3b0>)
    f168:	0018      	movs	r0, r3
    f16a:	4b47      	ldr	r3, [pc, #284]	; (f288 <m2m_wifi_connect_sc+0x3a8>)
    f16c:	4798      	blx	r3
			ret = M2M_ERR_FAIL;
    f16e:	2397      	movs	r3, #151	; 0x97
    f170:	18fb      	adds	r3, r7, r3
    f172:	22f4      	movs	r2, #244	; 0xf4
    f174:	701a      	strb	r2, [r3, #0]
			goto ERR1;
    f176:	e0dc      	b.n	f332 <m2m_wifi_connect_sc+0x452>
		}
		pstrWep->u8KeySz = pstrWepParams->u8KeySz-1;
    f178:	2388      	movs	r3, #136	; 0x88
    f17a:	18fb      	adds	r3, r7, r3
    f17c:	681b      	ldr	r3, [r3, #0]
    f17e:	785b      	ldrb	r3, [r3, #1]
    f180:	3b01      	subs	r3, #1
    f182:	b2da      	uxtb	r2, r3
    f184:	2384      	movs	r3, #132	; 0x84
    f186:	18fb      	adds	r3, r7, r3
    f188:	681b      	ldr	r3, [r3, #0]
    f18a:	705a      	strb	r2, [r3, #1]
		if ((pstrWep->u8KeySz != WEP_40_KEY_STRING_SIZE)&& (pstrWep->u8KeySz != WEP_104_KEY_STRING_SIZE))
    f18c:	2384      	movs	r3, #132	; 0x84
    f18e:	18fb      	adds	r3, r7, r3
    f190:	681b      	ldr	r3, [r3, #0]
    f192:	785b      	ldrb	r3, [r3, #1]
    f194:	2b0a      	cmp	r3, #10
    f196:	d01e      	beq.n	f1d6 <m2m_wifi_connect_sc+0x2f6>
    f198:	2384      	movs	r3, #132	; 0x84
    f19a:	18fb      	adds	r3, r7, r3
    f19c:	681b      	ldr	r3, [r3, #0]
    f19e:	785b      	ldrb	r3, [r3, #1]
    f1a0:	2b1a      	cmp	r3, #26
    f1a2:	d018      	beq.n	f1d6 <m2m_wifi_connect_sc+0x2f6>
		{
			M2M_ERR("Invalid Wep key length %d\n", pstrWep->u8KeySz);
    f1a4:	4a43      	ldr	r2, [pc, #268]	; (f2b4 <m2m_wifi_connect_sc+0x3d4>)
    f1a6:	4936      	ldr	r1, [pc, #216]	; (f280 <m2m_wifi_connect_sc+0x3a0>)
    f1a8:	4b36      	ldr	r3, [pc, #216]	; (f284 <m2m_wifi_connect_sc+0x3a4>)
    f1aa:	0018      	movs	r0, r3
    f1ac:	4b36      	ldr	r3, [pc, #216]	; (f288 <m2m_wifi_connect_sc+0x3a8>)
    f1ae:	4798      	blx	r3
    f1b0:	2384      	movs	r3, #132	; 0x84
    f1b2:	18fb      	adds	r3, r7, r3
    f1b4:	681b      	ldr	r3, [r3, #0]
    f1b6:	785b      	ldrb	r3, [r3, #1]
    f1b8:	001a      	movs	r2, r3
    f1ba:	4b3f      	ldr	r3, [pc, #252]	; (f2b8 <m2m_wifi_connect_sc+0x3d8>)
    f1bc:	0011      	movs	r1, r2
    f1be:	0018      	movs	r0, r3
    f1c0:	4b31      	ldr	r3, [pc, #196]	; (f288 <m2m_wifi_connect_sc+0x3a8>)
    f1c2:	4798      	blx	r3
    f1c4:	4b32      	ldr	r3, [pc, #200]	; (f290 <m2m_wifi_connect_sc+0x3b0>)
    f1c6:	0018      	movs	r0, r3
    f1c8:	4b2f      	ldr	r3, [pc, #188]	; (f288 <m2m_wifi_connect_sc+0x3a8>)
    f1ca:	4798      	blx	r3
			ret = M2M_ERR_FAIL;
    f1cc:	2397      	movs	r3, #151	; 0x97
    f1ce:	18fb      	adds	r3, r7, r3
    f1d0:	22f4      	movs	r2, #244	; 0xf4
    f1d2:	701a      	strb	r2, [r3, #0]
			goto ERR1;
    f1d4:	e0ad      	b.n	f332 <m2m_wifi_connect_sc+0x452>
		}
		m2m_memcpy((uint8*)pstrWep->au8WepKey,(uint8*)pstrWepParams->au8WepKey, pstrWepParams->u8KeySz);
    f1d6:	2384      	movs	r3, #132	; 0x84
    f1d8:	18fb      	adds	r3, r7, r3
    f1da:	681b      	ldr	r3, [r3, #0]
    f1dc:	1c98      	adds	r0, r3, #2
    f1de:	2388      	movs	r3, #136	; 0x88
    f1e0:	18fb      	adds	r3, r7, r3
    f1e2:	681b      	ldr	r3, [r3, #0]
    f1e4:	1c99      	adds	r1, r3, #2
    f1e6:	2388      	movs	r3, #136	; 0x88
    f1e8:	18fb      	adds	r3, r7, r3
    f1ea:	681b      	ldr	r3, [r3, #0]
    f1ec:	785b      	ldrb	r3, [r3, #1]
    f1ee:	001a      	movs	r2, r3
    f1f0:	4b2e      	ldr	r3, [pc, #184]	; (f2ac <m2m_wifi_connect_sc+0x3cc>)
    f1f2:	4798      	blx	r3
		pstrWep->au8WepKey[pstrWepParams->u8KeySz] = 0;
    f1f4:	2388      	movs	r3, #136	; 0x88
    f1f6:	18fb      	adds	r3, r7, r3
    f1f8:	681b      	ldr	r3, [r3, #0]
    f1fa:	785b      	ldrb	r3, [r3, #1]
    f1fc:	001a      	movs	r2, r3
    f1fe:	2384      	movs	r3, #132	; 0x84
    f200:	18fb      	adds	r3, r7, r3
    f202:	681b      	ldr	r3, [r3, #0]
    f204:	189b      	adds	r3, r3, r2
    f206:	2200      	movs	r2, #0
    f208:	709a      	strb	r2, [r3, #2]
    f20a:	e081      	b.n	f310 <m2m_wifi_connect_sc+0x430>

	}


	else if(u8SecType == M2M_WIFI_SEC_WPA_PSK)
    f20c:	230a      	movs	r3, #10
    f20e:	18fb      	adds	r3, r7, r3
    f210:	781b      	ldrb	r3, [r3, #0]
    f212:	2b02      	cmp	r3, #2
    f214:	d156      	bne.n	f2c4 <m2m_wifi_connect_sc+0x3e4>
	{
		uint16	u16KeyLen = m2m_strlen((uint8*)pvAuthInfo);
    f216:	2382      	movs	r3, #130	; 0x82
    f218:	18fc      	adds	r4, r7, r3
    f21a:	687b      	ldr	r3, [r7, #4]
    f21c:	0018      	movs	r0, r3
    f21e:	4b1d      	ldr	r3, [pc, #116]	; (f294 <m2m_wifi_connect_sc+0x3b4>)
    f220:	4798      	blx	r3
    f222:	0003      	movs	r3, r0
    f224:	8023      	strh	r3, [r4, #0]
		if((u16KeyLen <= 0)||(u16KeyLen >= M2M_MAX_PSK_LEN))
    f226:	2382      	movs	r3, #130	; 0x82
    f228:	18fb      	adds	r3, r7, r3
    f22a:	881b      	ldrh	r3, [r3, #0]
    f22c:	2b00      	cmp	r3, #0
    f22e:	d004      	beq.n	f23a <m2m_wifi_connect_sc+0x35a>
    f230:	2382      	movs	r3, #130	; 0x82
    f232:	18fb      	adds	r3, r7, r3
    f234:	881b      	ldrh	r3, [r3, #0]
    f236:	2b40      	cmp	r3, #64	; 0x40
    f238:	d912      	bls.n	f260 <m2m_wifi_connect_sc+0x380>
		{
			M2M_ERR("Incorrect PSK key length\n");
    f23a:	4a20      	ldr	r2, [pc, #128]	; (f2bc <m2m_wifi_connect_sc+0x3dc>)
    f23c:	4910      	ldr	r1, [pc, #64]	; (f280 <m2m_wifi_connect_sc+0x3a0>)
    f23e:	4b11      	ldr	r3, [pc, #68]	; (f284 <m2m_wifi_connect_sc+0x3a4>)
    f240:	0018      	movs	r0, r3
    f242:	4b11      	ldr	r3, [pc, #68]	; (f288 <m2m_wifi_connect_sc+0x3a8>)
    f244:	4798      	blx	r3
    f246:	4b1e      	ldr	r3, [pc, #120]	; (f2c0 <m2m_wifi_connect_sc+0x3e0>)
    f248:	0018      	movs	r0, r3
    f24a:	4b0f      	ldr	r3, [pc, #60]	; (f288 <m2m_wifi_connect_sc+0x3a8>)
    f24c:	4798      	blx	r3
    f24e:	4b10      	ldr	r3, [pc, #64]	; (f290 <m2m_wifi_connect_sc+0x3b0>)
    f250:	0018      	movs	r0, r3
    f252:	4b0d      	ldr	r3, [pc, #52]	; (f288 <m2m_wifi_connect_sc+0x3a8>)
    f254:	4798      	blx	r3
			ret = M2M_ERR_FAIL;
    f256:	2397      	movs	r3, #151	; 0x97
    f258:	18fb      	adds	r3, r7, r3
    f25a:	22f4      	movs	r2, #244	; 0xf4
    f25c:	701a      	strb	r2, [r3, #0]
			goto ERR1;
    f25e:	e068      	b.n	f332 <m2m_wifi_connect_sc+0x452>
		}
		m2m_memcpy(pstrAuthInfo->uniAuth.au8PSK, (uint8*)pvAuthInfo, u16KeyLen + 1);
    f260:	238c      	movs	r3, #140	; 0x8c
    f262:	18fb      	adds	r3, r7, r3
    f264:	6818      	ldr	r0, [r3, #0]
    f266:	2382      	movs	r3, #130	; 0x82
    f268:	18fb      	adds	r3, r7, r3
    f26a:	881b      	ldrh	r3, [r3, #0]
    f26c:	3301      	adds	r3, #1
    f26e:	001a      	movs	r2, r3
    f270:	687b      	ldr	r3, [r7, #4]
    f272:	0019      	movs	r1, r3
    f274:	4b0d      	ldr	r3, [pc, #52]	; (f2ac <m2m_wifi_connect_sc+0x3cc>)
    f276:	4798      	blx	r3
    f278:	e04a      	b.n	f310 <m2m_wifi_connect_sc+0x430>
    f27a:	46c0      	nop			; (mov r8, r8)
    f27c:	0000021a 	.word	0x0000021a
    f280:	000255d4 	.word	0x000255d4
    f284:	0002521c 	.word	0x0002521c
    f288:	0000addd 	.word	0x0000addd
    f28c:	0002545c 	.word	0x0002545c
    f290:	00025218 	.word	0x00025218
    f294:	0000db4f 	.word	0x0000db4f
    f298:	00000226 	.word	0x00000226
    f29c:	00025470 	.word	0x00025470
    f2a0:	00025480 	.word	0x00025480
    f2a4:	00000239 	.word	0x00000239
    f2a8:	00025494 	.word	0x00025494
    f2ac:	0000dad5 	.word	0x0000dad5
    f2b0:	000254a0 	.word	0x000254a0
    f2b4:	00000257 	.word	0x00000257
    f2b8:	000254bc 	.word	0x000254bc
    f2bc:	00000266 	.word	0x00000266
    f2c0:	000254d8 	.word	0x000254d8
	}
	else if(u8SecType == M2M_WIFI_SEC_802_1X)
    f2c4:	230a      	movs	r3, #10
    f2c6:	18fb      	adds	r3, r7, r3
    f2c8:	781b      	ldrb	r3, [r3, #0]
    f2ca:	2b04      	cmp	r3, #4
    f2cc:	d108      	bne.n	f2e0 <m2m_wifi_connect_sc+0x400>
	{
		m2m_memcpy((uint8*)&pstrAuthInfo->uniAuth.strCred1x, (uint8*)pvAuthInfo, sizeof(tstr1xAuthCredentials));
    f2ce:	238c      	movs	r3, #140	; 0x8c
    f2d0:	18fb      	adds	r3, r7, r3
    f2d2:	681b      	ldr	r3, [r3, #0]
    f2d4:	6879      	ldr	r1, [r7, #4]
    f2d6:	223e      	movs	r2, #62	; 0x3e
    f2d8:	0018      	movs	r0, r3
    f2da:	4b1a      	ldr	r3, [pc, #104]	; (f344 <m2m_wifi_connect_sc+0x464>)
    f2dc:	4798      	blx	r3
    f2de:	e017      	b.n	f310 <m2m_wifi_connect_sc+0x430>
	}
	else if(u8SecType == M2M_WIFI_SEC_OPEN)
    f2e0:	230a      	movs	r3, #10
    f2e2:	18fb      	adds	r3, r7, r3
    f2e4:	781b      	ldrb	r3, [r3, #0]
    f2e6:	2b01      	cmp	r3, #1
    f2e8:	d012      	beq.n	f310 <m2m_wifi_connect_sc+0x430>
	{

	}
	else
	{
		M2M_ERR("undefined sec type\n");
    f2ea:	4a17      	ldr	r2, [pc, #92]	; (f348 <m2m_wifi_connect_sc+0x468>)
    f2ec:	4917      	ldr	r1, [pc, #92]	; (f34c <m2m_wifi_connect_sc+0x46c>)
    f2ee:	4b18      	ldr	r3, [pc, #96]	; (f350 <m2m_wifi_connect_sc+0x470>)
    f2f0:	0018      	movs	r0, r3
    f2f2:	4b18      	ldr	r3, [pc, #96]	; (f354 <m2m_wifi_connect_sc+0x474>)
    f2f4:	4798      	blx	r3
    f2f6:	4b18      	ldr	r3, [pc, #96]	; (f358 <m2m_wifi_connect_sc+0x478>)
    f2f8:	0018      	movs	r0, r3
    f2fa:	4b16      	ldr	r3, [pc, #88]	; (f354 <m2m_wifi_connect_sc+0x474>)
    f2fc:	4798      	blx	r3
    f2fe:	4b17      	ldr	r3, [pc, #92]	; (f35c <m2m_wifi_connect_sc+0x47c>)
    f300:	0018      	movs	r0, r3
    f302:	4b14      	ldr	r3, [pc, #80]	; (f354 <m2m_wifi_connect_sc+0x474>)
    f304:	4798      	blx	r3
		ret = M2M_ERR_FAIL;
    f306:	2397      	movs	r3, #151	; 0x97
    f308:	18fb      	adds	r3, r7, r3
    f30a:	22f4      	movs	r2, #244	; 0xf4
    f30c:	701a      	strb	r2, [r3, #0]
		goto ERR1;
    f30e:	e010      	b.n	f332 <m2m_wifi_connect_sc+0x452>
	}

	ret = hif_send(M2M_REQ_GROUP_WIFI, M2M_WIFI_REQ_CONNECT, (uint8*)&strConnect, sizeof(tstrM2mWifiConnect),NULL, 0,0);
    f310:	2397      	movs	r3, #151	; 0x97
    f312:	18fc      	adds	r4, r7, r3
    f314:	2314      	movs	r3, #20
    f316:	18fa      	adds	r2, r7, r3
    f318:	2300      	movs	r3, #0
    f31a:	9302      	str	r3, [sp, #8]
    f31c:	2300      	movs	r3, #0
    f31e:	9301      	str	r3, [sp, #4]
    f320:	2300      	movs	r3, #0
    f322:	9300      	str	r3, [sp, #0]
    f324:	236c      	movs	r3, #108	; 0x6c
    f326:	2128      	movs	r1, #40	; 0x28
    f328:	2001      	movs	r0, #1
    f32a:	4d0d      	ldr	r5, [pc, #52]	; (f360 <m2m_wifi_connect_sc+0x480>)
    f32c:	47a8      	blx	r5
    f32e:	0003      	movs	r3, r0
    f330:	7023      	strb	r3, [r4, #0]

ERR1:
	return ret;
    f332:	2397      	movs	r3, #151	; 0x97
    f334:	18fb      	adds	r3, r7, r3
    f336:	781b      	ldrb	r3, [r3, #0]
    f338:	b25b      	sxtb	r3, r3
}
    f33a:	0018      	movs	r0, r3
    f33c:	46bd      	mov	sp, r7
    f33e:	b026      	add	sp, #152	; 0x98
    f340:	bdb0      	pop	{r4, r5, r7, pc}
    f342:	46c0      	nop			; (mov r8, r8)
    f344:	0000dad5 	.word	0x0000dad5
    f348:	00000276 	.word	0x00000276
    f34c:	000255d4 	.word	0x000255d4
    f350:	0002521c 	.word	0x0002521c
    f354:	0000addd 	.word	0x0000addd
    f358:	000254f4 	.word	0x000254f4
    f35c:	00025218 	.word	0x00025218
    f360:	0000dd71 	.word	0x0000dd71

0000f364 <m2m_wifi_request_dhcp_client>:
	return hif_send(M2M_REQ_GROUP_IP, M2M_IP_REQ_STATIC_IP_CONF,
		(uint8*) pstrStaticIPConf, sizeof(tstrM2MIPConfig), NULL, 0,0);
}

sint8 m2m_wifi_request_dhcp_client(void)
{
    f364:	b580      	push	{r7, lr}
    f366:	af00      	add	r7, sp, #0
	/*legacy API should be removed */
	return 0;
    f368:	2300      	movs	r3, #0
}
    f36a:	0018      	movs	r0, r3
    f36c:	46bd      	mov	sp, r7
    f36e:	bd80      	pop	{r7, pc}

0000f370 <chip_apply_conf>:

#define TIMEOUT						(0xfffffffful)
#define WAKUP_TRAILS_TIMEOUT		(4)

sint8 chip_apply_conf(uint32 u32Conf)
{
    f370:	b590      	push	{r4, r7, lr}
    f372:	b087      	sub	sp, #28
    f374:	af00      	add	r7, sp, #0
    f376:	6078      	str	r0, [r7, #4]
	sint8 ret = M2M_SUCCESS;
    f378:	2317      	movs	r3, #23
    f37a:	18fb      	adds	r3, r7, r3
    f37c:	2200      	movs	r2, #0
    f37e:	701a      	strb	r2, [r3, #0]
	uint32 val32 = u32Conf;
    f380:	687b      	ldr	r3, [r7, #4]
    f382:	613b      	str	r3, [r7, #16]
#endif
#if defined CONF_WINC_XO_XTALGM2_DIS
	val32 |= rHAVE_XO_XTALGM2_DIS_BIT;
#endif

	val32 |= rHAVE_RESERVED1_BIT;
    f384:	693b      	ldr	r3, [r7, #16]
    f386:	2280      	movs	r2, #128	; 0x80
    f388:	0052      	lsls	r2, r2, #1
    f38a:	4313      	orrs	r3, r2
    f38c:	613b      	str	r3, [r7, #16]
	do  {
		nm_write_reg(rNMI_GP_REG_1, val32);
    f38e:	693a      	ldr	r2, [r7, #16]
    f390:	23a5      	movs	r3, #165	; 0xa5
    f392:	015b      	lsls	r3, r3, #5
    f394:	0011      	movs	r1, r2
    f396:	0018      	movs	r0, r3
    f398:	4b12      	ldr	r3, [pc, #72]	; (f3e4 <chip_apply_conf+0x74>)
    f39a:	4798      	blx	r3
		if(val32 != 0) {		
    f39c:	693b      	ldr	r3, [r7, #16]
    f39e:	2b00      	cmp	r3, #0
    f3a0:	d018      	beq.n	f3d4 <chip_apply_conf+0x64>
			uint32 reg = 0;
    f3a2:	2300      	movs	r3, #0
    f3a4:	60fb      	str	r3, [r7, #12]
			ret = nm_read_reg_with_ret(rNMI_GP_REG_1, &reg);
    f3a6:	2317      	movs	r3, #23
    f3a8:	18fc      	adds	r4, r7, r3
    f3aa:	230c      	movs	r3, #12
    f3ac:	18fa      	adds	r2, r7, r3
    f3ae:	23a5      	movs	r3, #165	; 0xa5
    f3b0:	015b      	lsls	r3, r3, #5
    f3b2:	0011      	movs	r1, r2
    f3b4:	0018      	movs	r0, r3
    f3b6:	4b0c      	ldr	r3, [pc, #48]	; (f3e8 <chip_apply_conf+0x78>)
    f3b8:	4798      	blx	r3
    f3ba:	0003      	movs	r3, r0
    f3bc:	7023      	strb	r3, [r4, #0]
			if(ret == M2M_SUCCESS) {
    f3be:	2317      	movs	r3, #23
    f3c0:	18fb      	adds	r3, r7, r3
    f3c2:	781b      	ldrb	r3, [r3, #0]
    f3c4:	b25b      	sxtb	r3, r3
    f3c6:	2b00      	cmp	r3, #0
    f3c8:	d1e1      	bne.n	f38e <chip_apply_conf+0x1e>
				if(reg == val32)
    f3ca:	68fa      	ldr	r2, [r7, #12]
    f3cc:	693b      	ldr	r3, [r7, #16]
    f3ce:	429a      	cmp	r2, r3
    f3d0:	d002      	beq.n	f3d8 <chip_apply_conf+0x68>
		nm_write_reg(rNMI_GP_REG_1, val32);
    f3d2:	e7dc      	b.n	f38e <chip_apply_conf+0x1e>
					break;
			}
		} else {
			break;
    f3d4:	46c0      	nop			; (mov r8, r8)
    f3d6:	e000      	b.n	f3da <chip_apply_conf+0x6a>
					break;
    f3d8:	46c0      	nop			; (mov r8, r8)
		}
	} while(1);

	return M2M_SUCCESS;
    f3da:	2300      	movs	r3, #0
}
    f3dc:	0018      	movs	r0, r3
    f3de:	46bd      	mov	sp, r7
    f3e0:	b007      	add	sp, #28
    f3e2:	bd90      	pop	{r4, r7, pc}
    f3e4:	0000fbc5 	.word	0x0000fbc5
    f3e8:	0000fba1 	.word	0x0000fba1

0000f3ec <enable_interrupts>:
		nm_write_reg(WAKE_CLK_REG, reg);
	}
}

sint8 enable_interrupts(void)
{
    f3ec:	b590      	push	{r4, r7, lr}
    f3ee:	b083      	sub	sp, #12
    f3f0:	af00      	add	r7, sp, #0
	uint32 reg = 0;
    f3f2:	2300      	movs	r3, #0
    f3f4:	603b      	str	r3, [r7, #0]
	sint8 ret = M2M_SUCCESS;
    f3f6:	1dfb      	adds	r3, r7, #7
    f3f8:	2200      	movs	r2, #0
    f3fa:	701a      	strb	r2, [r3, #0]
	/**
	interrupt pin mux select
	**/
	ret = nm_read_reg_with_ret(NMI_PIN_MUX_0, &reg);
    f3fc:	1dfc      	adds	r4, r7, #7
    f3fe:	003b      	movs	r3, r7
    f400:	4a24      	ldr	r2, [pc, #144]	; (f494 <enable_interrupts+0xa8>)
    f402:	0019      	movs	r1, r3
    f404:	0010      	movs	r0, r2
    f406:	4b24      	ldr	r3, [pc, #144]	; (f498 <enable_interrupts+0xac>)
    f408:	4798      	blx	r3
    f40a:	0003      	movs	r3, r0
    f40c:	7023      	strb	r3, [r4, #0]
	if (M2M_SUCCESS != ret) goto ERR1;
    f40e:	1dfb      	adds	r3, r7, #7
    f410:	781b      	ldrb	r3, [r3, #0]
    f412:	b25b      	sxtb	r3, r3
    f414:	2b00      	cmp	r3, #0
    f416:	d131      	bne.n	f47c <enable_interrupts+0x90>
	
	reg |= ((uint32) 1 << 8);
    f418:	683b      	ldr	r3, [r7, #0]
    f41a:	2280      	movs	r2, #128	; 0x80
    f41c:	0052      	lsls	r2, r2, #1
    f41e:	4313      	orrs	r3, r2
    f420:	603b      	str	r3, [r7, #0]
	ret = nm_write_reg(NMI_PIN_MUX_0, reg);
    f422:	683b      	ldr	r3, [r7, #0]
    f424:	1dfc      	adds	r4, r7, #7
    f426:	4a1b      	ldr	r2, [pc, #108]	; (f494 <enable_interrupts+0xa8>)
    f428:	0019      	movs	r1, r3
    f42a:	0010      	movs	r0, r2
    f42c:	4b1b      	ldr	r3, [pc, #108]	; (f49c <enable_interrupts+0xb0>)
    f42e:	4798      	blx	r3
    f430:	0003      	movs	r3, r0
    f432:	7023      	strb	r3, [r4, #0]
	if (M2M_SUCCESS != ret) goto ERR1;
    f434:	1dfb      	adds	r3, r7, #7
    f436:	781b      	ldrb	r3, [r3, #0]
    f438:	b25b      	sxtb	r3, r3
    f43a:	2b00      	cmp	r3, #0
    f43c:	d120      	bne.n	f480 <enable_interrupts+0x94>
	
	/**
	interrupt enable
	**/
	ret = nm_read_reg_with_ret(NMI_INTR_ENABLE, &reg);
    f43e:	1dfc      	adds	r4, r7, #7
    f440:	003a      	movs	r2, r7
    f442:	23d0      	movs	r3, #208	; 0xd0
    f444:	015b      	lsls	r3, r3, #5
    f446:	0011      	movs	r1, r2
    f448:	0018      	movs	r0, r3
    f44a:	4b13      	ldr	r3, [pc, #76]	; (f498 <enable_interrupts+0xac>)
    f44c:	4798      	blx	r3
    f44e:	0003      	movs	r3, r0
    f450:	7023      	strb	r3, [r4, #0]
	if (M2M_SUCCESS != ret) goto ERR1;
    f452:	1dfb      	adds	r3, r7, #7
    f454:	781b      	ldrb	r3, [r3, #0]
    f456:	b25b      	sxtb	r3, r3
    f458:	2b00      	cmp	r3, #0
    f45a:	d113      	bne.n	f484 <enable_interrupts+0x98>
	
	reg |= ((uint32) 1 << 16);
    f45c:	683b      	ldr	r3, [r7, #0]
    f45e:	2280      	movs	r2, #128	; 0x80
    f460:	0252      	lsls	r2, r2, #9
    f462:	4313      	orrs	r3, r2
    f464:	603b      	str	r3, [r7, #0]
	ret = nm_write_reg(NMI_INTR_ENABLE, reg);
    f466:	683a      	ldr	r2, [r7, #0]
    f468:	1dfc      	adds	r4, r7, #7
    f46a:	23d0      	movs	r3, #208	; 0xd0
    f46c:	015b      	lsls	r3, r3, #5
    f46e:	0011      	movs	r1, r2
    f470:	0018      	movs	r0, r3
    f472:	4b0a      	ldr	r3, [pc, #40]	; (f49c <enable_interrupts+0xb0>)
    f474:	4798      	blx	r3
    f476:	0003      	movs	r3, r0
    f478:	7023      	strb	r3, [r4, #0]
    f47a:	e004      	b.n	f486 <enable_interrupts+0x9a>
	if (M2M_SUCCESS != ret) goto ERR1;
    f47c:	46c0      	nop			; (mov r8, r8)
    f47e:	e002      	b.n	f486 <enable_interrupts+0x9a>
	if (M2M_SUCCESS != ret) goto ERR1;
    f480:	46c0      	nop			; (mov r8, r8)
    f482:	e000      	b.n	f486 <enable_interrupts+0x9a>
	if (M2M_SUCCESS != ret) goto ERR1;
    f484:	46c0      	nop			; (mov r8, r8)
	if (M2M_SUCCESS != ret) goto ERR1;
ERR1:	
	return ret;
    f486:	1dfb      	adds	r3, r7, #7
    f488:	781b      	ldrb	r3, [r3, #0]
    f48a:	b25b      	sxtb	r3, r3
}
    f48c:	0018      	movs	r0, r3
    f48e:	46bd      	mov	sp, r7
    f490:	b003      	add	sp, #12
    f492:	bd90      	pop	{r4, r7, pc}
    f494:	00001408 	.word	0x00001408
    f498:	0000fba1 	.word	0x0000fba1
    f49c:	0000fbc5 	.word	0x0000fbc5

0000f4a0 <nmi_get_chipid>:
	nm_bsp_sleep(1);
	return ret;
}

uint32 nmi_get_chipid(void)
{
    f4a0:	b580      	push	{r7, lr}
    f4a2:	b082      	sub	sp, #8
    f4a4:	af00      	add	r7, sp, #0
	static uint32 chipid = 0;

	if (chipid == 0) {
    f4a6:	4b32      	ldr	r3, [pc, #200]	; (f570 <nmi_get_chipid+0xd0>)
    f4a8:	681b      	ldr	r3, [r3, #0]
    f4aa:	2b00      	cmp	r3, #0
    f4ac:	d159      	bne.n	f562 <nmi_get_chipid+0xc2>
		uint32 rfrevid;
		
		if((nm_read_reg_with_ret(0x1000, &chipid)) != M2M_SUCCESS) {
    f4ae:	4a30      	ldr	r2, [pc, #192]	; (f570 <nmi_get_chipid+0xd0>)
    f4b0:	2380      	movs	r3, #128	; 0x80
    f4b2:	015b      	lsls	r3, r3, #5
    f4b4:	0011      	movs	r1, r2
    f4b6:	0018      	movs	r0, r3
    f4b8:	4b2e      	ldr	r3, [pc, #184]	; (f574 <nmi_get_chipid+0xd4>)
    f4ba:	4798      	blx	r3
    f4bc:	1e03      	subs	r3, r0, #0
    f4be:	d004      	beq.n	f4ca <nmi_get_chipid+0x2a>
			chipid = 0;
    f4c0:	4b2b      	ldr	r3, [pc, #172]	; (f570 <nmi_get_chipid+0xd0>)
    f4c2:	2200      	movs	r2, #0
    f4c4:	601a      	str	r2, [r3, #0]
			return 0;
    f4c6:	2300      	movs	r3, #0
    f4c8:	e04d      	b.n	f566 <nmi_get_chipid+0xc6>
		}
		//if((ret = nm_read_reg_with_ret(0x11fc, &revid)) != M2M_SUCCESS) {
		//	return 0;
		//}
		if((nm_read_reg_with_ret(0x13f4, &rfrevid)) != M2M_SUCCESS) {
    f4ca:	1d3b      	adds	r3, r7, #4
    f4cc:	4a2a      	ldr	r2, [pc, #168]	; (f578 <nmi_get_chipid+0xd8>)
    f4ce:	0019      	movs	r1, r3
    f4d0:	0010      	movs	r0, r2
    f4d2:	4b28      	ldr	r3, [pc, #160]	; (f574 <nmi_get_chipid+0xd4>)
    f4d4:	4798      	blx	r3
    f4d6:	1e03      	subs	r3, r0, #0
    f4d8:	d004      	beq.n	f4e4 <nmi_get_chipid+0x44>
			chipid = 0;
    f4da:	4b25      	ldr	r3, [pc, #148]	; (f570 <nmi_get_chipid+0xd0>)
    f4dc:	2200      	movs	r2, #0
    f4de:	601a      	str	r2, [r3, #0]
			return 0;
    f4e0:	2300      	movs	r3, #0
    f4e2:	e040      	b.n	f566 <nmi_get_chipid+0xc6>
		}

		if (chipid == 0x1002a0)  {
    f4e4:	4b22      	ldr	r3, [pc, #136]	; (f570 <nmi_get_chipid+0xd0>)
    f4e6:	681b      	ldr	r3, [r3, #0]
    f4e8:	4a24      	ldr	r2, [pc, #144]	; (f57c <nmi_get_chipid+0xdc>)
    f4ea:	4293      	cmp	r3, r2
    f4ec:	d106      	bne.n	f4fc <nmi_get_chipid+0x5c>
			if (rfrevid == 0x1) { /* 1002A0 */
    f4ee:	687b      	ldr	r3, [r7, #4]
    f4f0:	2b01      	cmp	r3, #1
    f4f2:	d029      	beq.n	f548 <nmi_get_chipid+0xa8>
			} else /* if (rfrevid == 0x2) */ { /* 1002A1 */
				chipid = 0x1002a1;
    f4f4:	4b1e      	ldr	r3, [pc, #120]	; (f570 <nmi_get_chipid+0xd0>)
    f4f6:	4a22      	ldr	r2, [pc, #136]	; (f580 <nmi_get_chipid+0xe0>)
    f4f8:	601a      	str	r2, [r3, #0]
    f4fa:	e025      	b.n	f548 <nmi_get_chipid+0xa8>
			}
		} else if(chipid == 0x1002b0) {
    f4fc:	4b1c      	ldr	r3, [pc, #112]	; (f570 <nmi_get_chipid+0xd0>)
    f4fe:	681b      	ldr	r3, [r3, #0]
    f500:	4a20      	ldr	r2, [pc, #128]	; (f584 <nmi_get_chipid+0xe4>)
    f502:	4293      	cmp	r3, r2
    f504:	d10d      	bne.n	f522 <nmi_get_chipid+0x82>
			if(rfrevid == 3) { /* 1002B0 */
    f506:	687b      	ldr	r3, [r7, #4]
    f508:	2b03      	cmp	r3, #3
    f50a:	d01d      	beq.n	f548 <nmi_get_chipid+0xa8>
			} else if(rfrevid == 4) { /* 1002B1 */
    f50c:	687b      	ldr	r3, [r7, #4]
    f50e:	2b04      	cmp	r3, #4
    f510:	d103      	bne.n	f51a <nmi_get_chipid+0x7a>
				chipid = 0x1002b1;
    f512:	4b17      	ldr	r3, [pc, #92]	; (f570 <nmi_get_chipid+0xd0>)
    f514:	4a1c      	ldr	r2, [pc, #112]	; (f588 <nmi_get_chipid+0xe8>)
    f516:	601a      	str	r2, [r3, #0]
    f518:	e016      	b.n	f548 <nmi_get_chipid+0xa8>
			} else /* if(rfrevid == 5) */ { /* 1002B2 */
				chipid = 0x1002b2;
    f51a:	4b15      	ldr	r3, [pc, #84]	; (f570 <nmi_get_chipid+0xd0>)
    f51c:	4a1b      	ldr	r2, [pc, #108]	; (f58c <nmi_get_chipid+0xec>)
    f51e:	601a      	str	r2, [r3, #0]
    f520:	e012      	b.n	f548 <nmi_get_chipid+0xa8>
			}
		}else if(chipid == 0x1000F0) { 
    f522:	4b13      	ldr	r3, [pc, #76]	; (f570 <nmi_get_chipid+0xd0>)
    f524:	681b      	ldr	r3, [r3, #0]
    f526:	4a1a      	ldr	r2, [pc, #104]	; (f590 <nmi_get_chipid+0xf0>)
    f528:	4293      	cmp	r3, r2
    f52a:	d10d      	bne.n	f548 <nmi_get_chipid+0xa8>
			if((nm_read_reg_with_ret(0x3B0000, &chipid)) != M2M_SUCCESS) {
    f52c:	4a10      	ldr	r2, [pc, #64]	; (f570 <nmi_get_chipid+0xd0>)
    f52e:	23ec      	movs	r3, #236	; 0xec
    f530:	039b      	lsls	r3, r3, #14
    f532:	0011      	movs	r1, r2
    f534:	0018      	movs	r0, r3
    f536:	4b0f      	ldr	r3, [pc, #60]	; (f574 <nmi_get_chipid+0xd4>)
    f538:	4798      	blx	r3
    f53a:	1e03      	subs	r3, r0, #0
    f53c:	d004      	beq.n	f548 <nmi_get_chipid+0xa8>
			chipid = 0;
    f53e:	4b0c      	ldr	r3, [pc, #48]	; (f570 <nmi_get_chipid+0xd0>)
    f540:	2200      	movs	r2, #0
    f542:	601a      	str	r2, [r3, #0]
			return 0;
    f544:	2300      	movs	r3, #0
    f546:	e00e      	b.n	f566 <nmi_get_chipid+0xc6>
				chipid |= 0x050000;
			}
		}
#else
		/*M2M is by default have SPI flash*/
		chipid &= ~(0x0f0000);
    f548:	4b09      	ldr	r3, [pc, #36]	; (f570 <nmi_get_chipid+0xd0>)
    f54a:	681b      	ldr	r3, [r3, #0]
    f54c:	4a11      	ldr	r2, [pc, #68]	; (f594 <nmi_get_chipid+0xf4>)
    f54e:	401a      	ands	r2, r3
    f550:	4b07      	ldr	r3, [pc, #28]	; (f570 <nmi_get_chipid+0xd0>)
    f552:	601a      	str	r2, [r3, #0]
		chipid |= 0x050000;
    f554:	4b06      	ldr	r3, [pc, #24]	; (f570 <nmi_get_chipid+0xd0>)
    f556:	681b      	ldr	r3, [r3, #0]
    f558:	22a0      	movs	r2, #160	; 0xa0
    f55a:	02d2      	lsls	r2, r2, #11
    f55c:	431a      	orrs	r2, r3
    f55e:	4b04      	ldr	r3, [pc, #16]	; (f570 <nmi_get_chipid+0xd0>)
    f560:	601a      	str	r2, [r3, #0]
#endif /* PROBE_FLASH */
	}
	return chipid;
    f562:	4b03      	ldr	r3, [pc, #12]	; (f570 <nmi_get_chipid+0xd0>)
    f564:	681b      	ldr	r3, [r3, #0]
}
    f566:	0018      	movs	r0, r3
    f568:	46bd      	mov	sp, r7
    f56a:	b002      	add	sp, #8
    f56c:	bd80      	pop	{r7, pc}
    f56e:	46c0      	nop			; (mov r8, r8)
    f570:	20003d28 	.word	0x20003d28
    f574:	0000fba1 	.word	0x0000fba1
    f578:	000013f4 	.word	0x000013f4
    f57c:	001002a0 	.word	0x001002a0
    f580:	001002a1 	.word	0x001002a1
    f584:	001002b0 	.word	0x001002b0
    f588:	001002b1 	.word	0x001002b1
    f58c:	001002b2 	.word	0x001002b2
    f590:	001000f0 	.word	0x001000f0
    f594:	fff0ffff 	.word	0xfff0ffff

0000f598 <chip_sleep>:

	/* Do PLL update */
	nmi_update_pll();
}
sint8 chip_sleep(void)
{
    f598:	b590      	push	{r4, r7, lr}
    f59a:	b083      	sub	sp, #12
    f59c:	af00      	add	r7, sp, #0
	uint32 reg;
	sint8 ret = M2M_SUCCESS;
    f59e:	1dfb      	adds	r3, r7, #7
    f5a0:	2200      	movs	r2, #0
    f5a2:	701a      	strb	r2, [r3, #0]
	
	while(1)
	{
		ret = nm_read_reg_with_ret(CORT_HOST_COMM,&reg);
    f5a4:	1dfc      	adds	r4, r7, #7
    f5a6:	003b      	movs	r3, r7
    f5a8:	0019      	movs	r1, r3
    f5aa:	2010      	movs	r0, #16
    f5ac:	4b2e      	ldr	r3, [pc, #184]	; (f668 <chip_sleep+0xd0>)
    f5ae:	4798      	blx	r3
    f5b0:	0003      	movs	r3, r0
    f5b2:	7023      	strb	r3, [r4, #0]
		if(ret != M2M_SUCCESS) goto ERR1;
    f5b4:	1dfb      	adds	r3, r7, #7
    f5b6:	781b      	ldrb	r3, [r3, #0]
    f5b8:	b25b      	sxtb	r3, r3
    f5ba:	2b00      	cmp	r3, #0
    f5bc:	d145      	bne.n	f64a <chip_sleep+0xb2>
		if((reg & NBIT0) == 0) break;
    f5be:	683b      	ldr	r3, [r7, #0]
    f5c0:	2201      	movs	r2, #1
    f5c2:	4013      	ands	r3, r2
    f5c4:	d000      	beq.n	f5c8 <chip_sleep+0x30>
		ret = nm_read_reg_with_ret(CORT_HOST_COMM,&reg);
    f5c6:	e7ed      	b.n	f5a4 <chip_sleep+0xc>
		if((reg & NBIT0) == 0) break;
    f5c8:	46c0      	nop			; (mov r8, r8)
	}
	
	/* Clear bit 1 */
	ret = nm_read_reg_with_ret(WAKE_CLK_REG, &reg);
    f5ca:	1dfc      	adds	r4, r7, #7
    f5cc:	003b      	movs	r3, r7
    f5ce:	0019      	movs	r1, r3
    f5d0:	2001      	movs	r0, #1
    f5d2:	4b25      	ldr	r3, [pc, #148]	; (f668 <chip_sleep+0xd0>)
    f5d4:	4798      	blx	r3
    f5d6:	0003      	movs	r3, r0
    f5d8:	7023      	strb	r3, [r4, #0]
	if(ret != M2M_SUCCESS)goto ERR1;
    f5da:	1dfb      	adds	r3, r7, #7
    f5dc:	781b      	ldrb	r3, [r3, #0]
    f5de:	b25b      	sxtb	r3, r3
    f5e0:	2b00      	cmp	r3, #0
    f5e2:	d134      	bne.n	f64e <chip_sleep+0xb6>
	if(reg & NBIT1)
    f5e4:	683b      	ldr	r3, [r7, #0]
    f5e6:	2202      	movs	r2, #2
    f5e8:	4013      	ands	r3, r2
    f5ea:	d010      	beq.n	f60e <chip_sleep+0x76>
	{
		reg &=~NBIT1;
    f5ec:	683b      	ldr	r3, [r7, #0]
    f5ee:	2202      	movs	r2, #2
    f5f0:	4393      	bics	r3, r2
    f5f2:	603b      	str	r3, [r7, #0]
		ret = nm_write_reg(WAKE_CLK_REG, reg);
    f5f4:	683b      	ldr	r3, [r7, #0]
    f5f6:	1dfc      	adds	r4, r7, #7
    f5f8:	0019      	movs	r1, r3
    f5fa:	2001      	movs	r0, #1
    f5fc:	4b1b      	ldr	r3, [pc, #108]	; (f66c <chip_sleep+0xd4>)
    f5fe:	4798      	blx	r3
    f600:	0003      	movs	r3, r0
    f602:	7023      	strb	r3, [r4, #0]
		if(ret != M2M_SUCCESS)goto ERR1;
    f604:	1dfb      	adds	r3, r7, #7
    f606:	781b      	ldrb	r3, [r3, #0]
    f608:	b25b      	sxtb	r3, r3
    f60a:	2b00      	cmp	r3, #0
    f60c:	d121      	bne.n	f652 <chip_sleep+0xba>
	}
	
	ret = nm_read_reg_with_ret(HOST_CORT_COMM, &reg);
    f60e:	1dfc      	adds	r4, r7, #7
    f610:	003b      	movs	r3, r7
    f612:	0019      	movs	r1, r3
    f614:	200b      	movs	r0, #11
    f616:	4b14      	ldr	r3, [pc, #80]	; (f668 <chip_sleep+0xd0>)
    f618:	4798      	blx	r3
    f61a:	0003      	movs	r3, r0
    f61c:	7023      	strb	r3, [r4, #0]
	if(ret != M2M_SUCCESS)goto ERR1;
    f61e:	1dfb      	adds	r3, r7, #7
    f620:	781b      	ldrb	r3, [r3, #0]
    f622:	b25b      	sxtb	r3, r3
    f624:	2b00      	cmp	r3, #0
    f626:	d116      	bne.n	f656 <chip_sleep+0xbe>
	if(reg & NBIT0)
    f628:	683b      	ldr	r3, [r7, #0]
    f62a:	2201      	movs	r2, #1
    f62c:	4013      	ands	r3, r2
    f62e:	d013      	beq.n	f658 <chip_sleep+0xc0>
	{
		reg &= ~NBIT0;
    f630:	683b      	ldr	r3, [r7, #0]
    f632:	2201      	movs	r2, #1
    f634:	4393      	bics	r3, r2
    f636:	603b      	str	r3, [r7, #0]
		ret = nm_write_reg(HOST_CORT_COMM, reg);
    f638:	683b      	ldr	r3, [r7, #0]
    f63a:	1dfc      	adds	r4, r7, #7
    f63c:	0019      	movs	r1, r3
    f63e:	200b      	movs	r0, #11
    f640:	4b0a      	ldr	r3, [pc, #40]	; (f66c <chip_sleep+0xd4>)
    f642:	4798      	blx	r3
    f644:	0003      	movs	r3, r0
    f646:	7023      	strb	r3, [r4, #0]
    f648:	e006      	b.n	f658 <chip_sleep+0xc0>
		if(ret != M2M_SUCCESS) goto ERR1;
    f64a:	46c0      	nop			; (mov r8, r8)
    f64c:	e004      	b.n	f658 <chip_sleep+0xc0>
	if(ret != M2M_SUCCESS)goto ERR1;
    f64e:	46c0      	nop			; (mov r8, r8)
    f650:	e002      	b.n	f658 <chip_sleep+0xc0>
		if(ret != M2M_SUCCESS)goto ERR1;
    f652:	46c0      	nop			; (mov r8, r8)
    f654:	e000      	b.n	f658 <chip_sleep+0xc0>
	if(ret != M2M_SUCCESS)goto ERR1;
    f656:	46c0      	nop			; (mov r8, r8)
		if(ret != M2M_SUCCESS)goto ERR1;
	}

ERR1:
	return ret;
    f658:	1dfb      	adds	r3, r7, #7
    f65a:	781b      	ldrb	r3, [r3, #0]
    f65c:	b25b      	sxtb	r3, r3
}
    f65e:	0018      	movs	r0, r3
    f660:	46bd      	mov	sp, r7
    f662:	b003      	add	sp, #12
    f664:	bd90      	pop	{r4, r7, pc}
    f666:	46c0      	nop			; (mov r8, r8)
    f668:	0000fba1 	.word	0x0000fba1
    f66c:	0000fbc5 	.word	0x0000fbc5

0000f670 <chip_wake>:
sint8 chip_wake(void)
{
    f670:	b590      	push	{r4, r7, lr}
    f672:	b085      	sub	sp, #20
    f674:	af00      	add	r7, sp, #0
	sint8 ret = M2M_SUCCESS;
    f676:	230f      	movs	r3, #15
    f678:	18fb      	adds	r3, r7, r3
    f67a:	2200      	movs	r2, #0
    f67c:	701a      	strb	r2, [r3, #0]
	uint32 reg = 0, clk_status_reg = 0,trials = 0;
    f67e:	2300      	movs	r3, #0
    f680:	607b      	str	r3, [r7, #4]
    f682:	2300      	movs	r3, #0
    f684:	603b      	str	r3, [r7, #0]
    f686:	2300      	movs	r3, #0
    f688:	60bb      	str	r3, [r7, #8]

	ret = nm_read_reg_with_ret(HOST_CORT_COMM, &reg);
    f68a:	230f      	movs	r3, #15
    f68c:	18fc      	adds	r4, r7, r3
    f68e:	1d3b      	adds	r3, r7, #4
    f690:	0019      	movs	r1, r3
    f692:	200b      	movs	r0, #11
    f694:	4b4e      	ldr	r3, [pc, #312]	; (f7d0 <chip_wake+0x160>)
    f696:	4798      	blx	r3
    f698:	0003      	movs	r3, r0
    f69a:	7023      	strb	r3, [r4, #0]
	if(ret != M2M_SUCCESS)goto _WAKE_EXIT;
    f69c:	230f      	movs	r3, #15
    f69e:	18fb      	adds	r3, r7, r3
    f6a0:	781b      	ldrb	r3, [r3, #0]
    f6a2:	b25b      	sxtb	r3, r3
    f6a4:	2b00      	cmp	r3, #0
    f6a6:	d000      	beq.n	f6aa <chip_wake+0x3a>
    f6a8:	e082      	b.n	f7b0 <chip_wake+0x140>
	
	if(!(reg & NBIT0))
    f6aa:	687b      	ldr	r3, [r7, #4]
    f6ac:	2201      	movs	r2, #1
    f6ae:	4013      	ands	r3, r2
    f6b0:	d111      	bne.n	f6d6 <chip_wake+0x66>
	{
		/*USE bit 0 to indicate host wakeup*/
		ret = nm_write_reg(HOST_CORT_COMM, reg|NBIT0);
    f6b2:	687b      	ldr	r3, [r7, #4]
    f6b4:	2201      	movs	r2, #1
    f6b6:	4313      	orrs	r3, r2
    f6b8:	220f      	movs	r2, #15
    f6ba:	18bc      	adds	r4, r7, r2
    f6bc:	0019      	movs	r1, r3
    f6be:	200b      	movs	r0, #11
    f6c0:	4b44      	ldr	r3, [pc, #272]	; (f7d4 <chip_wake+0x164>)
    f6c2:	4798      	blx	r3
    f6c4:	0003      	movs	r3, r0
    f6c6:	7023      	strb	r3, [r4, #0]
		if(ret != M2M_SUCCESS)goto _WAKE_EXIT;
    f6c8:	230f      	movs	r3, #15
    f6ca:	18fb      	adds	r3, r7, r3
    f6cc:	781b      	ldrb	r3, [r3, #0]
    f6ce:	b25b      	sxtb	r3, r3
    f6d0:	2b00      	cmp	r3, #0
    f6d2:	d000      	beq.n	f6d6 <chip_wake+0x66>
    f6d4:	e06e      	b.n	f7b4 <chip_wake+0x144>
	}
		
	ret = nm_read_reg_with_ret(WAKE_CLK_REG, &reg);
    f6d6:	230f      	movs	r3, #15
    f6d8:	18fc      	adds	r4, r7, r3
    f6da:	1d3b      	adds	r3, r7, #4
    f6dc:	0019      	movs	r1, r3
    f6de:	2001      	movs	r0, #1
    f6e0:	4b3b      	ldr	r3, [pc, #236]	; (f7d0 <chip_wake+0x160>)
    f6e2:	4798      	blx	r3
    f6e4:	0003      	movs	r3, r0
    f6e6:	7023      	strb	r3, [r4, #0]
	if(ret != M2M_SUCCESS)goto _WAKE_EXIT;
    f6e8:	230f      	movs	r3, #15
    f6ea:	18fb      	adds	r3, r7, r3
    f6ec:	781b      	ldrb	r3, [r3, #0]
    f6ee:	b25b      	sxtb	r3, r3
    f6f0:	2b00      	cmp	r3, #0
    f6f2:	d161      	bne.n	f7b8 <chip_wake+0x148>
	/* Set bit 1 */
	if(!(reg & NBIT1))
    f6f4:	687b      	ldr	r3, [r7, #4]
    f6f6:	2202      	movs	r2, #2
    f6f8:	4013      	ands	r3, r2
    f6fa:	d110      	bne.n	f71e <chip_wake+0xae>
	{
		ret = nm_write_reg(WAKE_CLK_REG, reg | NBIT1);
    f6fc:	687b      	ldr	r3, [r7, #4]
    f6fe:	2202      	movs	r2, #2
    f700:	4313      	orrs	r3, r2
    f702:	220f      	movs	r2, #15
    f704:	18bc      	adds	r4, r7, r2
    f706:	0019      	movs	r1, r3
    f708:	2001      	movs	r0, #1
    f70a:	4b32      	ldr	r3, [pc, #200]	; (f7d4 <chip_wake+0x164>)
    f70c:	4798      	blx	r3
    f70e:	0003      	movs	r3, r0
    f710:	7023      	strb	r3, [r4, #0]
		if(ret != M2M_SUCCESS) goto _WAKE_EXIT;	
    f712:	230f      	movs	r3, #15
    f714:	18fb      	adds	r3, r7, r3
    f716:	781b      	ldrb	r3, [r3, #0]
    f718:	b25b      	sxtb	r3, r3
    f71a:	2b00      	cmp	r3, #0
    f71c:	d14e      	bne.n	f7bc <chip_wake+0x14c>
	}

	do
	{
		ret = nm_read_reg_with_ret(CLOCKS_EN_REG, &clk_status_reg);
    f71e:	230f      	movs	r3, #15
    f720:	18fc      	adds	r4, r7, r3
    f722:	003b      	movs	r3, r7
    f724:	0019      	movs	r1, r3
    f726:	200f      	movs	r0, #15
    f728:	4b29      	ldr	r3, [pc, #164]	; (f7d0 <chip_wake+0x160>)
    f72a:	4798      	blx	r3
    f72c:	0003      	movs	r3, r0
    f72e:	7023      	strb	r3, [r4, #0]
		if(ret != M2M_SUCCESS) {
    f730:	230f      	movs	r3, #15
    f732:	18fb      	adds	r3, r7, r3
    f734:	781b      	ldrb	r3, [r3, #0]
    f736:	b25b      	sxtb	r3, r3
    f738:	2b00      	cmp	r3, #0
    f73a:	d014      	beq.n	f766 <chip_wake+0xf6>
			M2M_ERR("Bus error (5).%d %lx\n",ret,clk_status_reg);
    f73c:	23a8      	movs	r3, #168	; 0xa8
    f73e:	005a      	lsls	r2, r3, #1
    f740:	4925      	ldr	r1, [pc, #148]	; (f7d8 <chip_wake+0x168>)
    f742:	4b26      	ldr	r3, [pc, #152]	; (f7dc <chip_wake+0x16c>)
    f744:	0018      	movs	r0, r3
    f746:	4b26      	ldr	r3, [pc, #152]	; (f7e0 <chip_wake+0x170>)
    f748:	4798      	blx	r3
    f74a:	230f      	movs	r3, #15
    f74c:	18fb      	adds	r3, r7, r3
    f74e:	2100      	movs	r1, #0
    f750:	5659      	ldrsb	r1, [r3, r1]
    f752:	683a      	ldr	r2, [r7, #0]
    f754:	4b23      	ldr	r3, [pc, #140]	; (f7e4 <chip_wake+0x174>)
    f756:	0018      	movs	r0, r3
    f758:	4b21      	ldr	r3, [pc, #132]	; (f7e0 <chip_wake+0x170>)
    f75a:	4798      	blx	r3
    f75c:	4b22      	ldr	r3, [pc, #136]	; (f7e8 <chip_wake+0x178>)
    f75e:	0018      	movs	r0, r3
    f760:	4b1f      	ldr	r3, [pc, #124]	; (f7e0 <chip_wake+0x170>)
    f762:	4798      	blx	r3
			goto _WAKE_EXIT;
    f764:	e02b      	b.n	f7be <chip_wake+0x14e>
		}
		if(clk_status_reg & NBIT2) {
    f766:	683b      	ldr	r3, [r7, #0]
    f768:	2204      	movs	r2, #4
    f76a:	4013      	ands	r3, r2
    f76c:	d11c      	bne.n	f7a8 <chip_wake+0x138>
			break;
		}
		nm_bsp_sleep(2);
    f76e:	2002      	movs	r0, #2
    f770:	4b1e      	ldr	r3, [pc, #120]	; (f7ec <chip_wake+0x17c>)
    f772:	4798      	blx	r3
		trials++;
    f774:	68bb      	ldr	r3, [r7, #8]
    f776:	3301      	adds	r3, #1
    f778:	60bb      	str	r3, [r7, #8]
		if(trials > WAKUP_TRAILS_TIMEOUT)
    f77a:	68bb      	ldr	r3, [r7, #8]
    f77c:	2b04      	cmp	r3, #4
    f77e:	d9ce      	bls.n	f71e <chip_wake+0xae>
		{
			M2M_ERR("Failed to wakup the chip\n");
    f780:	23ad      	movs	r3, #173	; 0xad
    f782:	005a      	lsls	r2, r3, #1
    f784:	4914      	ldr	r1, [pc, #80]	; (f7d8 <chip_wake+0x168>)
    f786:	4b15      	ldr	r3, [pc, #84]	; (f7dc <chip_wake+0x16c>)
    f788:	0018      	movs	r0, r3
    f78a:	4b15      	ldr	r3, [pc, #84]	; (f7e0 <chip_wake+0x170>)
    f78c:	4798      	blx	r3
    f78e:	4b18      	ldr	r3, [pc, #96]	; (f7f0 <chip_wake+0x180>)
    f790:	0018      	movs	r0, r3
    f792:	4b13      	ldr	r3, [pc, #76]	; (f7e0 <chip_wake+0x170>)
    f794:	4798      	blx	r3
    f796:	4b14      	ldr	r3, [pc, #80]	; (f7e8 <chip_wake+0x178>)
    f798:	0018      	movs	r0, r3
    f79a:	4b11      	ldr	r3, [pc, #68]	; (f7e0 <chip_wake+0x170>)
    f79c:	4798      	blx	r3
			ret = M2M_ERR_TIME_OUT;
    f79e:	230f      	movs	r3, #15
    f7a0:	18fb      	adds	r3, r7, r3
    f7a2:	22fc      	movs	r2, #252	; 0xfc
    f7a4:	701a      	strb	r2, [r3, #0]
			goto _WAKE_EXIT;
    f7a6:	e00a      	b.n	f7be <chip_wake+0x14e>
			break;
    f7a8:	46c0      	nop			; (mov r8, r8)
		}
	}while(1);
	
	/*workaround sometimes spi fail to read clock regs after reading/writing clockless registers*/
	nm_bus_reset();
    f7aa:	4b12      	ldr	r3, [pc, #72]	; (f7f4 <chip_wake+0x184>)
    f7ac:	4798      	blx	r3
    f7ae:	e006      	b.n	f7be <chip_wake+0x14e>
	if(ret != M2M_SUCCESS)goto _WAKE_EXIT;
    f7b0:	46c0      	nop			; (mov r8, r8)
    f7b2:	e004      	b.n	f7be <chip_wake+0x14e>
		if(ret != M2M_SUCCESS)goto _WAKE_EXIT;
    f7b4:	46c0      	nop			; (mov r8, r8)
    f7b6:	e002      	b.n	f7be <chip_wake+0x14e>
	if(ret != M2M_SUCCESS)goto _WAKE_EXIT;
    f7b8:	46c0      	nop			; (mov r8, r8)
    f7ba:	e000      	b.n	f7be <chip_wake+0x14e>
		if(ret != M2M_SUCCESS) goto _WAKE_EXIT;	
    f7bc:	46c0      	nop			; (mov r8, r8)
	
_WAKE_EXIT:
	return ret;
    f7be:	230f      	movs	r3, #15
    f7c0:	18fb      	adds	r3, r7, r3
    f7c2:	781b      	ldrb	r3, [r3, #0]
    f7c4:	b25b      	sxtb	r3, r3
}
    f7c6:	0018      	movs	r0, r3
    f7c8:	46bd      	mov	sp, r7
    f7ca:	b005      	add	sp, #20
    f7cc:	bd90      	pop	{r4, r7, pc}
    f7ce:	46c0      	nop			; (mov r8, r8)
    f7d0:	0000fba1 	.word	0x0000fba1
    f7d4:	0000fbc5 	.word	0x0000fbc5
    f7d8:	00025674 	.word	0x00025674
    f7dc:	000255e8 	.word	0x000255e8
    f7e0:	0000addd 	.word	0x0000addd
    f7e4:	000255fc 	.word	0x000255fc
    f7e8:	00025614 	.word	0x00025614
    f7ec:	0000d231 	.word	0x0000d231
    f7f0:	00025618 	.word	0x00025618
    f7f4:	0000fb61 	.word	0x0000fb61

0000f7f8 <wait_for_bootrom>:
	nm_bsp_sleep(50);
	return ret;
}

sint8 wait_for_bootrom(uint8 arg)
{
    f7f8:	b580      	push	{r7, lr}
    f7fa:	b088      	sub	sp, #32
    f7fc:	af00      	add	r7, sp, #0
    f7fe:	0002      	movs	r2, r0
    f800:	1dfb      	adds	r3, r7, #7
    f802:	701a      	strb	r2, [r3, #0]
	sint8 ret = M2M_SUCCESS;
    f804:	2313      	movs	r3, #19
    f806:	18fb      	adds	r3, r7, r3
    f808:	2200      	movs	r2, #0
    f80a:	701a      	strb	r2, [r3, #0]
	uint32 reg = 0, cnt = 0;
    f80c:	2300      	movs	r3, #0
    f80e:	61fb      	str	r3, [r7, #28]
    f810:	2300      	movs	r3, #0
    f812:	61bb      	str	r3, [r7, #24]
	uint32 u32GpReg1 = 0;
    f814:	2300      	movs	r3, #0
    f816:	617b      	str	r3, [r7, #20]
	uint32 u32DriverVerInfo = M2M_MAKE_VERSION_INFO(M2M_RELEASE_VERSION_MAJOR_NO,\
    f818:	4b4a      	ldr	r3, [pc, #296]	; (f944 <wait_for_bootrom+0x14c>)
    f81a:	60fb      	str	r3, [r7, #12]
				M2M_RELEASE_VERSION_MINOR_NO, M2M_RELEASE_VERSION_PATCH_NO,\
				M2M_MIN_REQ_DRV_VERSION_MAJOR_NO, M2M_MIN_REQ_DRV_VERSION_MINOR_NO,\
				M2M_MIN_REQ_DRV_VERSION_PATCH_NO);


	reg = 0;
    f81c:	2300      	movs	r3, #0
    f81e:	61fb      	str	r3, [r7, #28]
	while(1) {
		reg = nm_read_reg(0x1014);	/* wait for efuse loading done */
    f820:	4b49      	ldr	r3, [pc, #292]	; (f948 <wait_for_bootrom+0x150>)
    f822:	0018      	movs	r0, r3
    f824:	4b49      	ldr	r3, [pc, #292]	; (f94c <wait_for_bootrom+0x154>)
    f826:	4798      	blx	r3
    f828:	0003      	movs	r3, r0
    f82a:	61fb      	str	r3, [r7, #28]
		if (reg & 0x80000000) {
    f82c:	69fb      	ldr	r3, [r7, #28]
    f82e:	2b00      	cmp	r3, #0
    f830:	db03      	blt.n	f83a <wait_for_bootrom+0x42>
			break;
		}
		nm_bsp_sleep(1); /* TODO: Why bus error if this delay is not here. */
    f832:	2001      	movs	r0, #1
    f834:	4b46      	ldr	r3, [pc, #280]	; (f950 <wait_for_bootrom+0x158>)
    f836:	4798      	blx	r3
		reg = nm_read_reg(0x1014);	/* wait for efuse loading done */
    f838:	e7f2      	b.n	f820 <wait_for_bootrom+0x28>
			break;
    f83a:	46c0      	nop			; (mov r8, r8)
	}
	reg = nm_read_reg(M2M_WAIT_FOR_HOST_REG);
    f83c:	4b45      	ldr	r3, [pc, #276]	; (f954 <wait_for_bootrom+0x15c>)
    f83e:	0018      	movs	r0, r3
    f840:	4b42      	ldr	r3, [pc, #264]	; (f94c <wait_for_bootrom+0x154>)
    f842:	4798      	blx	r3
    f844:	0003      	movs	r3, r0
    f846:	61fb      	str	r3, [r7, #28]
	reg &= 0x1;
    f848:	69fb      	ldr	r3, [r7, #28]
    f84a:	2201      	movs	r2, #1
    f84c:	4013      	ands	r3, r2
    f84e:	61fb      	str	r3, [r7, #28]

	/* check if waiting for the host will be skipped or not */
	if(reg == 0)
    f850:	69fb      	ldr	r3, [r7, #28]
    f852:	2b00      	cmp	r3, #0
    f854:	d112      	bne.n	f87c <wait_for_bootrom+0x84>
	{
		reg = 0;
    f856:	2300      	movs	r3, #0
    f858:	61fb      	str	r3, [r7, #28]
		while(reg != M2M_FINISH_BOOT_ROM)
    f85a:	e00b      	b.n	f874 <wait_for_bootrom+0x7c>
		{
			nm_bsp_sleep(1);
    f85c:	2001      	movs	r0, #1
    f85e:	4b3c      	ldr	r3, [pc, #240]	; (f950 <wait_for_bootrom+0x158>)
    f860:	4798      	blx	r3
			reg = nm_read_reg(BOOTROM_REG);
    f862:	4b3d      	ldr	r3, [pc, #244]	; (f958 <wait_for_bootrom+0x160>)
    f864:	0018      	movs	r0, r3
    f866:	4b39      	ldr	r3, [pc, #228]	; (f94c <wait_for_bootrom+0x154>)
    f868:	4798      	blx	r3
    f86a:	0003      	movs	r3, r0
    f86c:	61fb      	str	r3, [r7, #28]

			if(++cnt > TIMEOUT)
    f86e:	69bb      	ldr	r3, [r7, #24]
    f870:	3301      	adds	r3, #1
    f872:	61bb      	str	r3, [r7, #24]
		while(reg != M2M_FINISH_BOOT_ROM)
    f874:	69fb      	ldr	r3, [r7, #28]
    f876:	4a39      	ldr	r2, [pc, #228]	; (f95c <wait_for_bootrom+0x164>)
    f878:	4293      	cmp	r3, r2
    f87a:	d1ef      	bne.n	f85c <wait_for_bootrom+0x64>
				goto ERR2;
			}
		}
	}
	
	if(M2M_WIFI_MODE_ATE_HIGH == arg) {
    f87c:	1dfb      	adds	r3, r7, #7
    f87e:	781b      	ldrb	r3, [r3, #0]
    f880:	2b02      	cmp	r3, #2
    f882:	d10d      	bne.n	f8a0 <wait_for_bootrom+0xa8>
		nm_write_reg(NMI_REV_REG, M2M_ATE_FW_START_VALUE);
    f884:	4a36      	ldr	r2, [pc, #216]	; (f960 <wait_for_bootrom+0x168>)
    f886:	4b37      	ldr	r3, [pc, #220]	; (f964 <wait_for_bootrom+0x16c>)
    f888:	0011      	movs	r1, r2
    f88a:	0018      	movs	r0, r3
    f88c:	4b36      	ldr	r3, [pc, #216]	; (f968 <wait_for_bootrom+0x170>)
    f88e:	4798      	blx	r3
		nm_write_reg(NMI_STATE_REG, NBIT20);
    f890:	2380      	movs	r3, #128	; 0x80
    f892:	035b      	lsls	r3, r3, #13
    f894:	4a35      	ldr	r2, [pc, #212]	; (f96c <wait_for_bootrom+0x174>)
    f896:	0019      	movs	r1, r3
    f898:	0010      	movs	r0, r2
    f89a:	4b33      	ldr	r3, [pc, #204]	; (f968 <wait_for_bootrom+0x170>)
    f89c:	4798      	blx	r3
    f89e:	e022      	b.n	f8e6 <wait_for_bootrom+0xee>
	}else if(M2M_WIFI_MODE_ATE_LOW == arg) {
    f8a0:	1dfb      	adds	r3, r7, #7
    f8a2:	781b      	ldrb	r3, [r3, #0]
    f8a4:	2b03      	cmp	r3, #3
    f8a6:	d10b      	bne.n	f8c0 <wait_for_bootrom+0xc8>
		nm_write_reg(NMI_REV_REG, M2M_ATE_FW_START_VALUE);
    f8a8:	4a2d      	ldr	r2, [pc, #180]	; (f960 <wait_for_bootrom+0x168>)
    f8aa:	4b2e      	ldr	r3, [pc, #184]	; (f964 <wait_for_bootrom+0x16c>)
    f8ac:	0011      	movs	r1, r2
    f8ae:	0018      	movs	r0, r3
    f8b0:	4b2d      	ldr	r3, [pc, #180]	; (f968 <wait_for_bootrom+0x170>)
    f8b2:	4798      	blx	r3
		nm_write_reg(NMI_STATE_REG, 0);
    f8b4:	4b2d      	ldr	r3, [pc, #180]	; (f96c <wait_for_bootrom+0x174>)
    f8b6:	2100      	movs	r1, #0
    f8b8:	0018      	movs	r0, r3
    f8ba:	4b2b      	ldr	r3, [pc, #172]	; (f968 <wait_for_bootrom+0x170>)
    f8bc:	4798      	blx	r3
    f8be:	e012      	b.n	f8e6 <wait_for_bootrom+0xee>
	}else if(M2M_WIFI_MODE_ETHERNET == arg){
    f8c0:	1dfb      	adds	r3, r7, #7
    f8c2:	781b      	ldrb	r3, [r3, #0]
    f8c4:	2b04      	cmp	r3, #4
    f8c6:	d108      	bne.n	f8da <wait_for_bootrom+0xe2>
		u32GpReg1 = rHAVE_ETHERNET_MODE_BIT;
    f8c8:	2380      	movs	r3, #128	; 0x80
    f8ca:	617b      	str	r3, [r7, #20]
		nm_write_reg(NMI_STATE_REG, u32DriverVerInfo);
    f8cc:	68fb      	ldr	r3, [r7, #12]
    f8ce:	4a27      	ldr	r2, [pc, #156]	; (f96c <wait_for_bootrom+0x174>)
    f8d0:	0019      	movs	r1, r3
    f8d2:	0010      	movs	r0, r2
    f8d4:	4b24      	ldr	r3, [pc, #144]	; (f968 <wait_for_bootrom+0x170>)
    f8d6:	4798      	blx	r3
    f8d8:	e005      	b.n	f8e6 <wait_for_bootrom+0xee>
	} else {
		/*bypass this step*/
		nm_write_reg(NMI_STATE_REG, u32DriverVerInfo);
    f8da:	68fb      	ldr	r3, [r7, #12]
    f8dc:	4a23      	ldr	r2, [pc, #140]	; (f96c <wait_for_bootrom+0x174>)
    f8de:	0019      	movs	r1, r3
    f8e0:	0010      	movs	r0, r2
    f8e2:	4b21      	ldr	r3, [pc, #132]	; (f968 <wait_for_bootrom+0x170>)
    f8e4:	4798      	blx	r3
	}

	if(REV(nmi_get_chipid()) >= REV_3A0){
    f8e6:	4b22      	ldr	r3, [pc, #136]	; (f970 <wait_for_bootrom+0x178>)
    f8e8:	4798      	blx	r3
    f8ea:	0003      	movs	r3, r0
    f8ec:	051b      	lsls	r3, r3, #20
    f8ee:	0d1b      	lsrs	r3, r3, #20
    f8f0:	4a20      	ldr	r2, [pc, #128]	; (f974 <wait_for_bootrom+0x17c>)
    f8f2:	4293      	cmp	r3, r2
    f8f4:	d906      	bls.n	f904 <wait_for_bootrom+0x10c>
		chip_apply_conf(u32GpReg1 | rHAVE_USE_PMU_BIT);
    f8f6:	697b      	ldr	r3, [r7, #20]
    f8f8:	2202      	movs	r2, #2
    f8fa:	4313      	orrs	r3, r2
    f8fc:	0018      	movs	r0, r3
    f8fe:	4b1e      	ldr	r3, [pc, #120]	; (f978 <wait_for_bootrom+0x180>)
    f900:	4798      	blx	r3
    f902:	e003      	b.n	f90c <wait_for_bootrom+0x114>
	} else {
		chip_apply_conf(u32GpReg1);
    f904:	697b      	ldr	r3, [r7, #20]
    f906:	0018      	movs	r0, r3
    f908:	4b1b      	ldr	r3, [pc, #108]	; (f978 <wait_for_bootrom+0x180>)
    f90a:	4798      	blx	r3
	}
	M2M_INFO("DriverVerInfo: 0x%08lx\n",u32DriverVerInfo);
    f90c:	4b1b      	ldr	r3, [pc, #108]	; (f97c <wait_for_bootrom+0x184>)
    f90e:	0018      	movs	r0, r3
    f910:	4b1b      	ldr	r3, [pc, #108]	; (f980 <wait_for_bootrom+0x188>)
    f912:	4798      	blx	r3
    f914:	68fa      	ldr	r2, [r7, #12]
    f916:	4b1b      	ldr	r3, [pc, #108]	; (f984 <wait_for_bootrom+0x18c>)
    f918:	0011      	movs	r1, r2
    f91a:	0018      	movs	r0, r3
    f91c:	4b18      	ldr	r3, [pc, #96]	; (f980 <wait_for_bootrom+0x188>)
    f91e:	4798      	blx	r3
    f920:	4b19      	ldr	r3, [pc, #100]	; (f988 <wait_for_bootrom+0x190>)
    f922:	0018      	movs	r0, r3
    f924:	4b16      	ldr	r3, [pc, #88]	; (f980 <wait_for_bootrom+0x188>)
    f926:	4798      	blx	r3

	nm_write_reg(BOOTROM_REG,M2M_START_FIRMWARE);
    f928:	4a18      	ldr	r2, [pc, #96]	; (f98c <wait_for_bootrom+0x194>)
    f92a:	4b0b      	ldr	r3, [pc, #44]	; (f958 <wait_for_bootrom+0x160>)
    f92c:	0011      	movs	r1, r2
    f92e:	0018      	movs	r0, r3
    f930:	4b0d      	ldr	r3, [pc, #52]	; (f968 <wait_for_bootrom+0x170>)
    f932:	4798      	blx	r3
#ifdef __ROM_TEST__
	rom_test();
#endif /* __ROM_TEST__ */

ERR2:
	return ret;
    f934:	2313      	movs	r3, #19
    f936:	18fb      	adds	r3, r7, r3
    f938:	781b      	ldrb	r3, [r3, #0]
    f93a:	b25b      	sxtb	r3, r3
}
    f93c:	0018      	movs	r0, r3
    f93e:	46bd      	mov	sp, r7
    f940:	b008      	add	sp, #32
    f942:	bd80      	pop	{r7, pc}
    f944:	13301354 	.word	0x13301354
    f948:	00001014 	.word	0x00001014
    f94c:	0000fb81 	.word	0x0000fb81
    f950:	0000d231 	.word	0x0000d231
    f954:	000207bc 	.word	0x000207bc
    f958:	000c000c 	.word	0x000c000c
    f95c:	10add09e 	.word	0x10add09e
    f960:	3c1cd57d 	.word	0x3c1cd57d
    f964:	000207ac 	.word	0x000207ac
    f968:	0000fbc5 	.word	0x0000fbc5
    f96c:	0000108c 	.word	0x0000108c
    f970:	0000f4a1 	.word	0x0000f4a1
    f974:	0000039f 	.word	0x0000039f
    f978:	0000f371 	.word	0x0000f371
    f97c:	00025634 	.word	0x00025634
    f980:	0000addd 	.word	0x0000addd
    f984:	00025640 	.word	0x00025640
    f988:	00025614 	.word	0x00025614
    f98c:	ef522f61 	.word	0xef522f61

0000f990 <wait_for_firmware_start>:

sint8 wait_for_firmware_start(uint8 arg)
{
    f990:	b580      	push	{r7, lr}
    f992:	b088      	sub	sp, #32
    f994:	af00      	add	r7, sp, #0
    f996:	0002      	movs	r2, r0
    f998:	1dfb      	adds	r3, r7, #7
    f99a:	701a      	strb	r2, [r3, #0]
	sint8 ret = M2M_SUCCESS;
    f99c:	231f      	movs	r3, #31
    f99e:	18fb      	adds	r3, r7, r3
    f9a0:	2200      	movs	r2, #0
    f9a2:	701a      	strb	r2, [r3, #0]
	uint32 reg = 0, cnt = 0;
    f9a4:	2300      	movs	r3, #0
    f9a6:	61bb      	str	r3, [r7, #24]
    f9a8:	2300      	movs	r3, #0
    f9aa:	617b      	str	r3, [r7, #20]
	uint32 u32Timeout = TIMEOUT;
    f9ac:	2301      	movs	r3, #1
    f9ae:	425b      	negs	r3, r3
    f9b0:	613b      	str	r3, [r7, #16]
	volatile uint32 regAddress = NMI_STATE_REG;
    f9b2:	4b1d      	ldr	r3, [pc, #116]	; (fa28 <wait_for_firmware_start+0x98>)
    f9b4:	60fb      	str	r3, [r7, #12]
	volatile uint32 checkValue = M2M_FINISH_INIT_STATE;
    f9b6:	4b1d      	ldr	r3, [pc, #116]	; (fa2c <wait_for_firmware_start+0x9c>)
    f9b8:	60bb      	str	r3, [r7, #8]
	
	if((M2M_WIFI_MODE_ATE_HIGH == arg)||(M2M_WIFI_MODE_ATE_LOW == arg)) {
    f9ba:	1dfb      	adds	r3, r7, #7
    f9bc:	781b      	ldrb	r3, [r3, #0]
    f9be:	2b02      	cmp	r3, #2
    f9c0:	d003      	beq.n	f9ca <wait_for_firmware_start+0x3a>
    f9c2:	1dfb      	adds	r3, r7, #7
    f9c4:	781b      	ldrb	r3, [r3, #0]
    f9c6:	2b03      	cmp	r3, #3
    f9c8:	d119      	bne.n	f9fe <wait_for_firmware_start+0x6e>
		regAddress = NMI_REV_REG;
    f9ca:	4b19      	ldr	r3, [pc, #100]	; (fa30 <wait_for_firmware_start+0xa0>)
    f9cc:	60fb      	str	r3, [r7, #12]
		checkValue = M2M_ATE_FW_IS_UP_VALUE;
    f9ce:	4b19      	ldr	r3, [pc, #100]	; (fa34 <wait_for_firmware_start+0xa4>)
    f9d0:	60bb      	str	r3, [r7, #8]
	} else {
		/*bypass this step*/
	}
	
	
	while (checkValue != reg)
    f9d2:	e014      	b.n	f9fe <wait_for_firmware_start+0x6e>
	{
		nm_bsp_sleep(2); /* TODO: Why bus error if this delay is not here. */
    f9d4:	2002      	movs	r0, #2
    f9d6:	4b18      	ldr	r3, [pc, #96]	; (fa38 <wait_for_firmware_start+0xa8>)
    f9d8:	4798      	blx	r3
		M2M_DBG("%x %x %x\n",(unsigned int)nm_read_reg(0x108c),(unsigned int)nm_read_reg(0x108c),(unsigned int)nm_read_reg(0x14A0));
		reg = nm_read_reg(regAddress);
    f9da:	68fb      	ldr	r3, [r7, #12]
    f9dc:	0018      	movs	r0, r3
    f9de:	4b17      	ldr	r3, [pc, #92]	; (fa3c <wait_for_firmware_start+0xac>)
    f9e0:	4798      	blx	r3
    f9e2:	0003      	movs	r3, r0
    f9e4:	61bb      	str	r3, [r7, #24]
		if(++cnt >= u32Timeout)
    f9e6:	697b      	ldr	r3, [r7, #20]
    f9e8:	3301      	adds	r3, #1
    f9ea:	617b      	str	r3, [r7, #20]
    f9ec:	697a      	ldr	r2, [r7, #20]
    f9ee:	693b      	ldr	r3, [r7, #16]
    f9f0:	429a      	cmp	r2, r3
    f9f2:	d304      	bcc.n	f9fe <wait_for_firmware_start+0x6e>
		{
			M2M_DBG("Time out for wait firmware Run\n");
			ret = M2M_ERR_INIT;
    f9f4:	231f      	movs	r3, #31
    f9f6:	18fb      	adds	r3, r7, r3
    f9f8:	22fb      	movs	r2, #251	; 0xfb
    f9fa:	701a      	strb	r2, [r3, #0]
			goto ERR;
    f9fc:	e00c      	b.n	fa18 <wait_for_firmware_start+0x88>
	while (checkValue != reg)
    f9fe:	68ba      	ldr	r2, [r7, #8]
    fa00:	69bb      	ldr	r3, [r7, #24]
    fa02:	429a      	cmp	r2, r3
    fa04:	d1e6      	bne.n	f9d4 <wait_for_firmware_start+0x44>
		}
	}
	if(M2M_FINISH_INIT_STATE == checkValue)
    fa06:	68bb      	ldr	r3, [r7, #8]
    fa08:	4a08      	ldr	r2, [pc, #32]	; (fa2c <wait_for_firmware_start+0x9c>)
    fa0a:	4293      	cmp	r3, r2
    fa0c:	d104      	bne.n	fa18 <wait_for_firmware_start+0x88>
	{
		nm_write_reg(NMI_STATE_REG, 0);
    fa0e:	4b06      	ldr	r3, [pc, #24]	; (fa28 <wait_for_firmware_start+0x98>)
    fa10:	2100      	movs	r1, #0
    fa12:	0018      	movs	r0, r3
    fa14:	4b0a      	ldr	r3, [pc, #40]	; (fa40 <wait_for_firmware_start+0xb0>)
    fa16:	4798      	blx	r3
	}
ERR:
	return ret;
    fa18:	231f      	movs	r3, #31
    fa1a:	18fb      	adds	r3, r7, r3
    fa1c:	781b      	ldrb	r3, [r3, #0]
    fa1e:	b25b      	sxtb	r3, r3
}
    fa20:	0018      	movs	r0, r3
    fa22:	46bd      	mov	sp, r7
    fa24:	b008      	add	sp, #32
    fa26:	bd80      	pop	{r7, pc}
    fa28:	0000108c 	.word	0x0000108c
    fa2c:	02532636 	.word	0x02532636
    fa30:	000207ac 	.word	0x000207ac
    fa34:	d75dc1c3 	.word	0xd75dc1c3
    fa38:	0000d231 	.word	0x0000d231
    fa3c:	0000fb81 	.word	0x0000fb81
    fa40:	0000fbc5 	.word	0x0000fbc5

0000fa44 <chip_deinit>:

sint8 chip_deinit(void)
{
    fa44:	b590      	push	{r4, r7, lr}
    fa46:	b083      	sub	sp, #12
    fa48:	af00      	add	r7, sp, #0
	uint32 reg = 0;
    fa4a:	2300      	movs	r3, #0
    fa4c:	603b      	str	r3, [r7, #0]
	sint8 ret;

	/**
	stop the firmware, need a re-download
	**/
	ret = nm_read_reg_with_ret(NMI_GLB_RESET_0, &reg);
    fa4e:	1dfc      	adds	r4, r7, #7
    fa50:	003a      	movs	r2, r7
    fa52:	23a0      	movs	r3, #160	; 0xa0
    fa54:	015b      	lsls	r3, r3, #5
    fa56:	0011      	movs	r1, r2
    fa58:	0018      	movs	r0, r3
    fa5a:	4b20      	ldr	r3, [pc, #128]	; (fadc <chip_deinit+0x98>)
    fa5c:	4798      	blx	r3
    fa5e:	0003      	movs	r3, r0
    fa60:	7023      	strb	r3, [r4, #0]
	if (ret != M2M_SUCCESS) {
    fa62:	1dfb      	adds	r3, r7, #7
    fa64:	781b      	ldrb	r3, [r3, #0]
    fa66:	b25b      	sxtb	r3, r3
    fa68:	2b00      	cmp	r3, #0
    fa6a:	d00e      	beq.n	fa8a <chip_deinit+0x46>
		M2M_ERR("failed to de-initialize\n");
    fa6c:	4a1c      	ldr	r2, [pc, #112]	; (fae0 <chip_deinit+0x9c>)
    fa6e:	491d      	ldr	r1, [pc, #116]	; (fae4 <chip_deinit+0xa0>)
    fa70:	4b1d      	ldr	r3, [pc, #116]	; (fae8 <chip_deinit+0xa4>)
    fa72:	0018      	movs	r0, r3
    fa74:	4b1d      	ldr	r3, [pc, #116]	; (faec <chip_deinit+0xa8>)
    fa76:	4798      	blx	r3
    fa78:	4b1d      	ldr	r3, [pc, #116]	; (faf0 <chip_deinit+0xac>)
    fa7a:	0018      	movs	r0, r3
    fa7c:	4b1b      	ldr	r3, [pc, #108]	; (faec <chip_deinit+0xa8>)
    fa7e:	4798      	blx	r3
    fa80:	4b1c      	ldr	r3, [pc, #112]	; (faf4 <chip_deinit+0xb0>)
    fa82:	0018      	movs	r0, r3
    fa84:	4b19      	ldr	r3, [pc, #100]	; (faec <chip_deinit+0xa8>)
    fa86:	4798      	blx	r3
		goto ERR1;
    fa88:	e021      	b.n	face <chip_deinit+0x8a>
	}
	reg &= ~(1 << 10);
    fa8a:	683b      	ldr	r3, [r7, #0]
    fa8c:	4a1a      	ldr	r2, [pc, #104]	; (faf8 <chip_deinit+0xb4>)
    fa8e:	4013      	ands	r3, r2
    fa90:	603b      	str	r3, [r7, #0]
	ret = nm_write_reg(NMI_GLB_RESET_0, reg);
    fa92:	683a      	ldr	r2, [r7, #0]
    fa94:	1dfc      	adds	r4, r7, #7
    fa96:	23a0      	movs	r3, #160	; 0xa0
    fa98:	015b      	lsls	r3, r3, #5
    fa9a:	0011      	movs	r1, r2
    fa9c:	0018      	movs	r0, r3
    fa9e:	4b17      	ldr	r3, [pc, #92]	; (fafc <chip_deinit+0xb8>)
    faa0:	4798      	blx	r3
    faa2:	0003      	movs	r3, r0
    faa4:	7023      	strb	r3, [r4, #0]
	if (ret != M2M_SUCCESS) {
    faa6:	1dfb      	adds	r3, r7, #7
    faa8:	781b      	ldrb	r3, [r3, #0]
    faaa:	b25b      	sxtb	r3, r3
    faac:	2b00      	cmp	r3, #0
    faae:	d00e      	beq.n	face <chip_deinit+0x8a>
		M2M_ERR("failed to de-initialize\n");
    fab0:	4a13      	ldr	r2, [pc, #76]	; (fb00 <chip_deinit+0xbc>)
    fab2:	490c      	ldr	r1, [pc, #48]	; (fae4 <chip_deinit+0xa0>)
    fab4:	4b0c      	ldr	r3, [pc, #48]	; (fae8 <chip_deinit+0xa4>)
    fab6:	0018      	movs	r0, r3
    fab8:	4b0c      	ldr	r3, [pc, #48]	; (faec <chip_deinit+0xa8>)
    faba:	4798      	blx	r3
    fabc:	4b0c      	ldr	r3, [pc, #48]	; (faf0 <chip_deinit+0xac>)
    fabe:	0018      	movs	r0, r3
    fac0:	4b0a      	ldr	r3, [pc, #40]	; (faec <chip_deinit+0xa8>)
    fac2:	4798      	blx	r3
    fac4:	4b0b      	ldr	r3, [pc, #44]	; (faf4 <chip_deinit+0xb0>)
    fac6:	0018      	movs	r0, r3
    fac8:	4b08      	ldr	r3, [pc, #32]	; (faec <chip_deinit+0xa8>)
    faca:	4798      	blx	r3
		goto ERR1;
    facc:	46c0      	nop			; (mov r8, r8)
	}

ERR1:
	return ret;
    face:	1dfb      	adds	r3, r7, #7
    fad0:	781b      	ldrb	r3, [r3, #0]
    fad2:	b25b      	sxtb	r3, r3
}
    fad4:	0018      	movs	r0, r3
    fad6:	46bd      	mov	sp, r7
    fad8:	b003      	add	sp, #12
    fada:	bd90      	pop	{r4, r7, pc}
    fadc:	0000fba1 	.word	0x0000fba1
    fae0:	00000201 	.word	0x00000201
    fae4:	00025680 	.word	0x00025680
    fae8:	000255e8 	.word	0x000255e8
    faec:	0000addd 	.word	0x0000addd
    faf0:	00025658 	.word	0x00025658
    faf4:	00025614 	.word	0x00025614
    faf8:	fffffbff 	.word	0xfffffbff
    fafc:	0000fbc5 	.word	0x0000fbc5
    fb00:	00000207 	.word	0x00000207

0000fb04 <nm_bus_iface_init>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_bus_iface_init(void *pvInitVal)
{
    fb04:	b590      	push	{r4, r7, lr}
    fb06:	b085      	sub	sp, #20
    fb08:	af00      	add	r7, sp, #0
    fb0a:	6078      	str	r0, [r7, #4]
	sint8 ret = M2M_SUCCESS;
    fb0c:	230f      	movs	r3, #15
    fb0e:	18fb      	adds	r3, r7, r3
    fb10:	2200      	movs	r2, #0
    fb12:	701a      	strb	r2, [r3, #0]
	ret = nm_bus_init(pvInitVal);
    fb14:	230f      	movs	r3, #15
    fb16:	18fc      	adds	r4, r7, r3
    fb18:	687b      	ldr	r3, [r7, #4]
    fb1a:	0018      	movs	r0, r3
    fb1c:	4b05      	ldr	r3, [pc, #20]	; (fb34 <nm_bus_iface_init+0x30>)
    fb1e:	4798      	blx	r3
    fb20:	0003      	movs	r3, r0
    fb22:	7023      	strb	r3, [r4, #0]
	return ret;
    fb24:	230f      	movs	r3, #15
    fb26:	18fb      	adds	r3, r7, r3
    fb28:	781b      	ldrb	r3, [r3, #0]
    fb2a:	b25b      	sxtb	r3, r3
}
    fb2c:	0018      	movs	r0, r3
    fb2e:	46bd      	mov	sp, r7
    fb30:	b005      	add	sp, #20
    fb32:	bd90      	pop	{r4, r7, pc}
    fb34:	0000d8ed 	.word	0x0000d8ed

0000fb38 <nm_bus_iface_deinit>:
*	@author	Samer Sarhan
*	@date	07 April 2014
*	@version	1.0
*/
sint8 nm_bus_iface_deinit(void)
{
    fb38:	b590      	push	{r4, r7, lr}
    fb3a:	b083      	sub	sp, #12
    fb3c:	af00      	add	r7, sp, #0
	sint8 ret = M2M_SUCCESS;
    fb3e:	1dfb      	adds	r3, r7, #7
    fb40:	2200      	movs	r2, #0
    fb42:	701a      	strb	r2, [r3, #0]
	ret = nm_bus_deinit();
    fb44:	1dfc      	adds	r4, r7, #7
    fb46:	4b05      	ldr	r3, [pc, #20]	; (fb5c <nm_bus_iface_deinit+0x24>)
    fb48:	4798      	blx	r3
    fb4a:	0003      	movs	r3, r0
    fb4c:	7023      	strb	r3, [r4, #0]

	return ret;
    fb4e:	1dfb      	adds	r3, r7, #7
    fb50:	781b      	ldrb	r3, [r3, #0]
    fb52:	b25b      	sxtb	r3, r3
}
    fb54:	0018      	movs	r0, r3
    fb56:	46bd      	mov	sp, r7
    fb58:	b003      	add	sp, #12
    fb5a:	bd90      	pop	{r4, r7, pc}
    fb5c:	0000da65 	.word	0x0000da65

0000fb60 <nm_bus_reset>:
*	@brief	reset bus interface
*	@return	M2M_SUCCESS in case of success and M2M_ERR_BUS_FAIL in case of failure
*	@version	1.0
*/
sint8 nm_bus_reset(void)
{
    fb60:	b580      	push	{r7, lr}
    fb62:	b082      	sub	sp, #8
    fb64:	af00      	add	r7, sp, #0
	sint8 ret = M2M_SUCCESS;
    fb66:	1dfb      	adds	r3, r7, #7
    fb68:	2200      	movs	r2, #0
    fb6a:	701a      	strb	r2, [r3, #0]
#ifdef CONF_WINC_USE_UART
#elif defined (CONF_WINC_USE_SPI)
	return nm_spi_reset();
    fb6c:	4b03      	ldr	r3, [pc, #12]	; (fb7c <nm_bus_reset+0x1c>)
    fb6e:	4798      	blx	r3
    fb70:	0003      	movs	r3, r0
#else
#error "Plesae define bus usage"
#endif

	return ret;
}
    fb72:	0018      	movs	r0, r3
    fb74:	46bd      	mov	sp, r7
    fb76:	b002      	add	sp, #8
    fb78:	bd80      	pop	{r7, pc}
    fb7a:	46c0      	nop			; (mov r8, r8)
    fb7c:	0001198d 	.word	0x0001198d

0000fb80 <nm_read_reg>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
uint32 nm_read_reg(uint32 u32Addr)
{
    fb80:	b580      	push	{r7, lr}
    fb82:	b082      	sub	sp, #8
    fb84:	af00      	add	r7, sp, #0
    fb86:	6078      	str	r0, [r7, #4]
#ifdef CONF_WINC_USE_UART
	return nm_uart_read_reg(u32Addr);
#elif defined (CONF_WINC_USE_SPI)
	return nm_spi_read_reg(u32Addr);
    fb88:	687b      	ldr	r3, [r7, #4]
    fb8a:	0018      	movs	r0, r3
    fb8c:	4b03      	ldr	r3, [pc, #12]	; (fb9c <nm_read_reg+0x1c>)
    fb8e:	4798      	blx	r3
    fb90:	0003      	movs	r3, r0
	return nm_i2c_read_reg(u32Addr);
#else
#error "Plesae define bus usage"
#endif

}
    fb92:	0018      	movs	r0, r3
    fb94:	46bd      	mov	sp, r7
    fb96:	b002      	add	sp, #8
    fb98:	bd80      	pop	{r7, pc}
    fb9a:	46c0      	nop			; (mov r8, r8)
    fb9c:	00011b21 	.word	0x00011b21

0000fba0 <nm_read_reg_with_ret>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_read_reg_with_ret(uint32 u32Addr, uint32* pu32RetVal)
{
    fba0:	b580      	push	{r7, lr}
    fba2:	b082      	sub	sp, #8
    fba4:	af00      	add	r7, sp, #0
    fba6:	6078      	str	r0, [r7, #4]
    fba8:	6039      	str	r1, [r7, #0]
#ifdef CONF_WINC_USE_UART
	return nm_uart_read_reg_with_ret(u32Addr,pu32RetVal);
#elif defined (CONF_WINC_USE_SPI)
	return nm_spi_read_reg_with_ret(u32Addr,pu32RetVal);
    fbaa:	683a      	ldr	r2, [r7, #0]
    fbac:	687b      	ldr	r3, [r7, #4]
    fbae:	0011      	movs	r1, r2
    fbb0:	0018      	movs	r0, r3
    fbb2:	4b03      	ldr	r3, [pc, #12]	; (fbc0 <nm_read_reg_with_ret+0x20>)
    fbb4:	4798      	blx	r3
    fbb6:	0003      	movs	r3, r0
#elif defined (CONF_WINC_USE_I2C)
	return nm_i2c_read_reg_with_ret(u32Addr,pu32RetVal);
#else
#error "Plesae define bus usage"
#endif
}
    fbb8:	0018      	movs	r0, r3
    fbba:	46bd      	mov	sp, r7
    fbbc:	b002      	add	sp, #8
    fbbe:	bd80      	pop	{r7, pc}
    fbc0:	00011b45 	.word	0x00011b45

0000fbc4 <nm_write_reg>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_write_reg(uint32 u32Addr, uint32 u32Val)
{
    fbc4:	b580      	push	{r7, lr}
    fbc6:	b082      	sub	sp, #8
    fbc8:	af00      	add	r7, sp, #0
    fbca:	6078      	str	r0, [r7, #4]
    fbcc:	6039      	str	r1, [r7, #0]
#ifdef CONF_WINC_USE_UART
	return nm_uart_write_reg(u32Addr,u32Val);
#elif defined (CONF_WINC_USE_SPI)
	return nm_spi_write_reg(u32Addr,u32Val);
    fbce:	683a      	ldr	r2, [r7, #0]
    fbd0:	687b      	ldr	r3, [r7, #4]
    fbd2:	0011      	movs	r1, r2
    fbd4:	0018      	movs	r0, r3
    fbd6:	4b03      	ldr	r3, [pc, #12]	; (fbe4 <nm_write_reg+0x20>)
    fbd8:	4798      	blx	r3
    fbda:	0003      	movs	r3, r0
#elif defined (CONF_WINC_USE_I2C)
	return nm_i2c_write_reg(u32Addr,u32Val);
#else
#error "Plesae define bus usage"
#endif
}
    fbdc:	0018      	movs	r0, r3
    fbde:	46bd      	mov	sp, r7
    fbe0:	b002      	add	sp, #8
    fbe2:	bd80      	pop	{r7, pc}
    fbe4:	00011b95 	.word	0x00011b95

0000fbe8 <p_nm_read_block>:

static sint8 p_nm_read_block(uint32 u32Addr, uint8 *puBuf, uint16 u16Sz)
{
    fbe8:	b580      	push	{r7, lr}
    fbea:	b084      	sub	sp, #16
    fbec:	af00      	add	r7, sp, #0
    fbee:	60f8      	str	r0, [r7, #12]
    fbf0:	60b9      	str	r1, [r7, #8]
    fbf2:	1dbb      	adds	r3, r7, #6
    fbf4:	801a      	strh	r2, [r3, #0]
#ifdef CONF_WINC_USE_UART
	return nm_uart_read_block(u32Addr,puBuf,u16Sz);
#elif defined (CONF_WINC_USE_SPI)
	return nm_spi_read_block(u32Addr,puBuf,u16Sz);
    fbf6:	1dbb      	adds	r3, r7, #6
    fbf8:	881a      	ldrh	r2, [r3, #0]
    fbfa:	68b9      	ldr	r1, [r7, #8]
    fbfc:	68fb      	ldr	r3, [r7, #12]
    fbfe:	0018      	movs	r0, r3
    fc00:	4b03      	ldr	r3, [pc, #12]	; (fc10 <p_nm_read_block+0x28>)
    fc02:	4798      	blx	r3
    fc04:	0003      	movs	r3, r0
	return nm_i2c_read_block(u32Addr,puBuf,u16Sz);
#else
#error "Plesae define bus usage"
#endif

}
    fc06:	0018      	movs	r0, r3
    fc08:	46bd      	mov	sp, r7
    fc0a:	b004      	add	sp, #16
    fc0c:	bd80      	pop	{r7, pc}
    fc0e:	46c0      	nop			; (mov r8, r8)
    fc10:	00011be5 	.word	0x00011be5

0000fc14 <nm_read_block>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/ 
sint8 nm_read_block(uint32 u32Addr, uint8 *puBuf, uint32 u32Sz)
{
    fc14:	b580      	push	{r7, lr}
    fc16:	b086      	sub	sp, #24
    fc18:	af00      	add	r7, sp, #0
    fc1a:	60f8      	str	r0, [r7, #12]
    fc1c:	60b9      	str	r1, [r7, #8]
    fc1e:	607a      	str	r2, [r7, #4]
	uint16 u16MaxTrxSz = egstrNmBusCapabilities.u16MaxTrxSz - MAX_TRX_CFG_SZ;
    fc20:	4b2d      	ldr	r3, [pc, #180]	; (fcd8 <nm_read_block+0xc4>)
    fc22:	881a      	ldrh	r2, [r3, #0]
    fc24:	2310      	movs	r3, #16
    fc26:	18fb      	adds	r3, r7, r3
    fc28:	3a08      	subs	r2, #8
    fc2a:	801a      	strh	r2, [r3, #0]
	uint32 off = 0;
    fc2c:	2300      	movs	r3, #0
    fc2e:	617b      	str	r3, [r7, #20]
	sint8 s8Ret = M2M_SUCCESS;
    fc30:	2313      	movs	r3, #19
    fc32:	18fb      	adds	r3, r7, r3
    fc34:	2200      	movs	r2, #0
    fc36:	701a      	strb	r2, [r3, #0]

	for(;;)
	{
		if(u32Sz <= u16MaxTrxSz)
    fc38:	2310      	movs	r3, #16
    fc3a:	18fb      	adds	r3, r7, r3
    fc3c:	881a      	ldrh	r2, [r3, #0]
    fc3e:	687b      	ldr	r3, [r7, #4]
    fc40:	429a      	cmp	r2, r3
    fc42:	d313      	bcc.n	fc6c <nm_read_block+0x58>
		{
			s8Ret += p_nm_read_block(u32Addr, &puBuf[off], (uint16)u32Sz);	
    fc44:	68ba      	ldr	r2, [r7, #8]
    fc46:	697b      	ldr	r3, [r7, #20]
    fc48:	18d1      	adds	r1, r2, r3
    fc4a:	687b      	ldr	r3, [r7, #4]
    fc4c:	b29a      	uxth	r2, r3
    fc4e:	68fb      	ldr	r3, [r7, #12]
    fc50:	0018      	movs	r0, r3
    fc52:	4b22      	ldr	r3, [pc, #136]	; (fcdc <nm_read_block+0xc8>)
    fc54:	4798      	blx	r3
    fc56:	0003      	movs	r3, r0
    fc58:	b2da      	uxtb	r2, r3
    fc5a:	2313      	movs	r3, #19
    fc5c:	18fb      	adds	r3, r7, r3
    fc5e:	781b      	ldrb	r3, [r3, #0]
    fc60:	18d3      	adds	r3, r2, r3
    fc62:	b2da      	uxtb	r2, r3
    fc64:	2313      	movs	r3, #19
    fc66:	18fb      	adds	r3, r7, r3
    fc68:	701a      	strb	r2, [r3, #0]
			break;
    fc6a:	e02d      	b.n	fcc8 <nm_read_block+0xb4>
		}
		else
		{
			s8Ret += p_nm_read_block(u32Addr, &puBuf[off], u16MaxTrxSz);
    fc6c:	68ba      	ldr	r2, [r7, #8]
    fc6e:	697b      	ldr	r3, [r7, #20]
    fc70:	18d1      	adds	r1, r2, r3
    fc72:	2310      	movs	r3, #16
    fc74:	18fb      	adds	r3, r7, r3
    fc76:	881a      	ldrh	r2, [r3, #0]
    fc78:	68fb      	ldr	r3, [r7, #12]
    fc7a:	0018      	movs	r0, r3
    fc7c:	4b17      	ldr	r3, [pc, #92]	; (fcdc <nm_read_block+0xc8>)
    fc7e:	4798      	blx	r3
    fc80:	0003      	movs	r3, r0
    fc82:	b2da      	uxtb	r2, r3
    fc84:	2313      	movs	r3, #19
    fc86:	18fb      	adds	r3, r7, r3
    fc88:	781b      	ldrb	r3, [r3, #0]
    fc8a:	18d3      	adds	r3, r2, r3
    fc8c:	b2da      	uxtb	r2, r3
    fc8e:	2313      	movs	r3, #19
    fc90:	18fb      	adds	r3, r7, r3
    fc92:	701a      	strb	r2, [r3, #0]
			if(M2M_SUCCESS != s8Ret) break;
    fc94:	2313      	movs	r3, #19
    fc96:	18fb      	adds	r3, r7, r3
    fc98:	781b      	ldrb	r3, [r3, #0]
    fc9a:	b25b      	sxtb	r3, r3
    fc9c:	2b00      	cmp	r3, #0
    fc9e:	d112      	bne.n	fcc6 <nm_read_block+0xb2>
			u32Sz -= u16MaxTrxSz;
    fca0:	2310      	movs	r3, #16
    fca2:	18fb      	adds	r3, r7, r3
    fca4:	881b      	ldrh	r3, [r3, #0]
    fca6:	687a      	ldr	r2, [r7, #4]
    fca8:	1ad3      	subs	r3, r2, r3
    fcaa:	607b      	str	r3, [r7, #4]
			off += u16MaxTrxSz;
    fcac:	2310      	movs	r3, #16
    fcae:	18fb      	adds	r3, r7, r3
    fcb0:	881b      	ldrh	r3, [r3, #0]
    fcb2:	697a      	ldr	r2, [r7, #20]
    fcb4:	18d3      	adds	r3, r2, r3
    fcb6:	617b      	str	r3, [r7, #20]
			u32Addr += u16MaxTrxSz;
    fcb8:	2310      	movs	r3, #16
    fcba:	18fb      	adds	r3, r7, r3
    fcbc:	881b      	ldrh	r3, [r3, #0]
    fcbe:	68fa      	ldr	r2, [r7, #12]
    fcc0:	18d3      	adds	r3, r2, r3
    fcc2:	60fb      	str	r3, [r7, #12]
		if(u32Sz <= u16MaxTrxSz)
    fcc4:	e7b8      	b.n	fc38 <nm_read_block+0x24>
			if(M2M_SUCCESS != s8Ret) break;
    fcc6:	46c0      	nop			; (mov r8, r8)
		}
	}

	return s8Ret;
    fcc8:	2313      	movs	r3, #19
    fcca:	18fb      	adds	r3, r7, r3
    fccc:	781b      	ldrb	r3, [r3, #0]
    fcce:	b25b      	sxtb	r3, r3
}
    fcd0:	0018      	movs	r0, r3
    fcd2:	46bd      	mov	sp, r7
    fcd4:	b006      	add	sp, #24
    fcd6:	bd80      	pop	{r7, pc}
    fcd8:	20000114 	.word	0x20000114
    fcdc:	0000fbe9 	.word	0x0000fbe9

0000fce0 <p_nm_write_block>:

static sint8 p_nm_write_block(uint32 u32Addr, uint8 *puBuf, uint16 u16Sz)
{
    fce0:	b580      	push	{r7, lr}
    fce2:	b084      	sub	sp, #16
    fce4:	af00      	add	r7, sp, #0
    fce6:	60f8      	str	r0, [r7, #12]
    fce8:	60b9      	str	r1, [r7, #8]
    fcea:	1dbb      	adds	r3, r7, #6
    fcec:	801a      	strh	r2, [r3, #0]
#ifdef CONF_WINC_USE_UART
	return nm_uart_write_block(u32Addr,puBuf,u16Sz);
#elif defined (CONF_WINC_USE_SPI)
	return nm_spi_write_block(u32Addr,puBuf,u16Sz);
    fcee:	1dbb      	adds	r3, r7, #6
    fcf0:	881a      	ldrh	r2, [r3, #0]
    fcf2:	68b9      	ldr	r1, [r7, #8]
    fcf4:	68fb      	ldr	r3, [r7, #12]
    fcf6:	0018      	movs	r0, r3
    fcf8:	4b03      	ldr	r3, [pc, #12]	; (fd08 <p_nm_write_block+0x28>)
    fcfa:	4798      	blx	r3
    fcfc:	0003      	movs	r3, r0
	return nm_i2c_write_block(u32Addr,puBuf,u16Sz);
#else
#error "Plesae define bus usage"
#endif

}
    fcfe:	0018      	movs	r0, r3
    fd00:	46bd      	mov	sp, r7
    fd02:	b004      	add	sp, #16
    fd04:	bd80      	pop	{r7, pc}
    fd06:	46c0      	nop			; (mov r8, r8)
    fd08:	00011c3d 	.word	0x00011c3d

0000fd0c <nm_write_block>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/ 
sint8 nm_write_block(uint32 u32Addr, uint8 *puBuf, uint32 u32Sz)
{
    fd0c:	b580      	push	{r7, lr}
    fd0e:	b086      	sub	sp, #24
    fd10:	af00      	add	r7, sp, #0
    fd12:	60f8      	str	r0, [r7, #12]
    fd14:	60b9      	str	r1, [r7, #8]
    fd16:	607a      	str	r2, [r7, #4]
	uint16 u16MaxTrxSz = egstrNmBusCapabilities.u16MaxTrxSz - MAX_TRX_CFG_SZ;
    fd18:	4b2d      	ldr	r3, [pc, #180]	; (fdd0 <nm_write_block+0xc4>)
    fd1a:	881a      	ldrh	r2, [r3, #0]
    fd1c:	2310      	movs	r3, #16
    fd1e:	18fb      	adds	r3, r7, r3
    fd20:	3a08      	subs	r2, #8
    fd22:	801a      	strh	r2, [r3, #0]
	uint32 off = 0;
    fd24:	2300      	movs	r3, #0
    fd26:	617b      	str	r3, [r7, #20]
	sint8 s8Ret = M2M_SUCCESS;
    fd28:	2313      	movs	r3, #19
    fd2a:	18fb      	adds	r3, r7, r3
    fd2c:	2200      	movs	r2, #0
    fd2e:	701a      	strb	r2, [r3, #0]

	for(;;)
	{
		if(u32Sz <= u16MaxTrxSz)
    fd30:	2310      	movs	r3, #16
    fd32:	18fb      	adds	r3, r7, r3
    fd34:	881a      	ldrh	r2, [r3, #0]
    fd36:	687b      	ldr	r3, [r7, #4]
    fd38:	429a      	cmp	r2, r3
    fd3a:	d313      	bcc.n	fd64 <nm_write_block+0x58>
		{
			s8Ret += p_nm_write_block(u32Addr, &puBuf[off], (uint16)u32Sz);	
    fd3c:	68ba      	ldr	r2, [r7, #8]
    fd3e:	697b      	ldr	r3, [r7, #20]
    fd40:	18d1      	adds	r1, r2, r3
    fd42:	687b      	ldr	r3, [r7, #4]
    fd44:	b29a      	uxth	r2, r3
    fd46:	68fb      	ldr	r3, [r7, #12]
    fd48:	0018      	movs	r0, r3
    fd4a:	4b22      	ldr	r3, [pc, #136]	; (fdd4 <nm_write_block+0xc8>)
    fd4c:	4798      	blx	r3
    fd4e:	0003      	movs	r3, r0
    fd50:	b2da      	uxtb	r2, r3
    fd52:	2313      	movs	r3, #19
    fd54:	18fb      	adds	r3, r7, r3
    fd56:	781b      	ldrb	r3, [r3, #0]
    fd58:	18d3      	adds	r3, r2, r3
    fd5a:	b2da      	uxtb	r2, r3
    fd5c:	2313      	movs	r3, #19
    fd5e:	18fb      	adds	r3, r7, r3
    fd60:	701a      	strb	r2, [r3, #0]
			break;
    fd62:	e02d      	b.n	fdc0 <nm_write_block+0xb4>
		}
		else
		{
			s8Ret += p_nm_write_block(u32Addr, &puBuf[off], u16MaxTrxSz);
    fd64:	68ba      	ldr	r2, [r7, #8]
    fd66:	697b      	ldr	r3, [r7, #20]
    fd68:	18d1      	adds	r1, r2, r3
    fd6a:	2310      	movs	r3, #16
    fd6c:	18fb      	adds	r3, r7, r3
    fd6e:	881a      	ldrh	r2, [r3, #0]
    fd70:	68fb      	ldr	r3, [r7, #12]
    fd72:	0018      	movs	r0, r3
    fd74:	4b17      	ldr	r3, [pc, #92]	; (fdd4 <nm_write_block+0xc8>)
    fd76:	4798      	blx	r3
    fd78:	0003      	movs	r3, r0
    fd7a:	b2da      	uxtb	r2, r3
    fd7c:	2313      	movs	r3, #19
    fd7e:	18fb      	adds	r3, r7, r3
    fd80:	781b      	ldrb	r3, [r3, #0]
    fd82:	18d3      	adds	r3, r2, r3
    fd84:	b2da      	uxtb	r2, r3
    fd86:	2313      	movs	r3, #19
    fd88:	18fb      	adds	r3, r7, r3
    fd8a:	701a      	strb	r2, [r3, #0]
			if(M2M_SUCCESS != s8Ret) break;
    fd8c:	2313      	movs	r3, #19
    fd8e:	18fb      	adds	r3, r7, r3
    fd90:	781b      	ldrb	r3, [r3, #0]
    fd92:	b25b      	sxtb	r3, r3
    fd94:	2b00      	cmp	r3, #0
    fd96:	d112      	bne.n	fdbe <nm_write_block+0xb2>
			u32Sz -= u16MaxTrxSz;
    fd98:	2310      	movs	r3, #16
    fd9a:	18fb      	adds	r3, r7, r3
    fd9c:	881b      	ldrh	r3, [r3, #0]
    fd9e:	687a      	ldr	r2, [r7, #4]
    fda0:	1ad3      	subs	r3, r2, r3
    fda2:	607b      	str	r3, [r7, #4]
			off += u16MaxTrxSz;
    fda4:	2310      	movs	r3, #16
    fda6:	18fb      	adds	r3, r7, r3
    fda8:	881b      	ldrh	r3, [r3, #0]
    fdaa:	697a      	ldr	r2, [r7, #20]
    fdac:	18d3      	adds	r3, r2, r3
    fdae:	617b      	str	r3, [r7, #20]
			u32Addr += u16MaxTrxSz;
    fdb0:	2310      	movs	r3, #16
    fdb2:	18fb      	adds	r3, r7, r3
    fdb4:	881b      	ldrh	r3, [r3, #0]
    fdb6:	68fa      	ldr	r2, [r7, #12]
    fdb8:	18d3      	adds	r3, r2, r3
    fdba:	60fb      	str	r3, [r7, #12]
		if(u32Sz <= u16MaxTrxSz)
    fdbc:	e7b8      	b.n	fd30 <nm_write_block+0x24>
			if(M2M_SUCCESS != s8Ret) break;
    fdbe:	46c0      	nop			; (mov r8, r8)
		}
	}

	return s8Ret;
    fdc0:	2313      	movs	r3, #19
    fdc2:	18fb      	adds	r3, r7, r3
    fdc4:	781b      	ldrb	r3, [r3, #0]
    fdc6:	b25b      	sxtb	r3, r3
}
    fdc8:	0018      	movs	r0, r3
    fdca:	46bd      	mov	sp, r7
    fdcc:	b006      	add	sp, #24
    fdce:	bd80      	pop	{r7, pc}
    fdd0:	20000114 	.word	0x20000114
    fdd4:	0000fce1 	.word	0x0000fce1

0000fdd8 <nm_get_firmware_full_info>:
*	@param [out]	M2mRev
*			    pointer holds address of structure "tstrM2mRev" that contains the firmware version parameters
*	@version	1.0
*/
sint8 nm_get_firmware_full_info(tstrM2mRev* pstrRev)
{
    fdd8:	b590      	push	{r4, r7, lr}
    fdda:	b089      	sub	sp, #36	; 0x24
    fddc:	af00      	add	r7, sp, #0
    fdde:	6078      	str	r0, [r7, #4]
	uint16  curr_drv_ver, min_req_drv_ver,curr_firm_ver;
	uint32	reg = 0;
    fde0:	2300      	movs	r3, #0
    fde2:	617b      	str	r3, [r7, #20]
	sint8	ret = M2M_SUCCESS;
    fde4:	231f      	movs	r3, #31
    fde6:	18fb      	adds	r3, r7, r3
    fde8:	2200      	movs	r2, #0
    fdea:	701a      	strb	r2, [r3, #0]
	tstrGpRegs strgp = {0};
    fdec:	230c      	movs	r3, #12
    fdee:	18fb      	adds	r3, r7, r3
    fdf0:	0018      	movs	r0, r3
    fdf2:	2308      	movs	r3, #8
    fdf4:	001a      	movs	r2, r3
    fdf6:	2100      	movs	r1, #0
    fdf8:	4b64      	ldr	r3, [pc, #400]	; (ff8c <nm_get_firmware_full_info+0x1b4>)
    fdfa:	4798      	blx	r3
	if (pstrRev != NULL)
    fdfc:	687b      	ldr	r3, [r7, #4]
    fdfe:	2b00      	cmp	r3, #0
    fe00:	d100      	bne.n	fe04 <nm_get_firmware_full_info+0x2c>
    fe02:	e0ba      	b.n	ff7a <nm_get_firmware_full_info+0x1a2>
	{
		m2m_memset((uint8*)pstrRev,0,sizeof(tstrM2mRev));
    fe04:	687b      	ldr	r3, [r7, #4]
    fe06:	2228      	movs	r2, #40	; 0x28
    fe08:	2100      	movs	r1, #0
    fe0a:	0018      	movs	r0, r3
    fe0c:	4b60      	ldr	r3, [pc, #384]	; (ff90 <nm_get_firmware_full_info+0x1b8>)
    fe0e:	4798      	blx	r3
		ret = nm_read_reg_with_ret(rNMI_GP_REG_2, &reg);
    fe10:	231f      	movs	r3, #31
    fe12:	18fc      	adds	r4, r7, r3
    fe14:	2314      	movs	r3, #20
    fe16:	18fb      	adds	r3, r7, r3
    fe18:	4a5e      	ldr	r2, [pc, #376]	; (ff94 <nm_get_firmware_full_info+0x1bc>)
    fe1a:	0019      	movs	r1, r3
    fe1c:	0010      	movs	r0, r2
    fe1e:	4b5e      	ldr	r3, [pc, #376]	; (ff98 <nm_get_firmware_full_info+0x1c0>)
    fe20:	4798      	blx	r3
    fe22:	0003      	movs	r3, r0
    fe24:	7023      	strb	r3, [r4, #0]
		if(ret == M2M_SUCCESS)
    fe26:	231f      	movs	r3, #31
    fe28:	18fb      	adds	r3, r7, r3
    fe2a:	781b      	ldrb	r3, [r3, #0]
    fe2c:	b25b      	sxtb	r3, r3
    fe2e:	2b00      	cmp	r3, #0
    fe30:	d000      	beq.n	fe34 <nm_get_firmware_full_info+0x5c>
    fe32:	e0a2      	b.n	ff7a <nm_get_firmware_full_info+0x1a2>
		{
			if(reg != 0)
    fe34:	697b      	ldr	r3, [r7, #20]
    fe36:	2b00      	cmp	r3, #0
    fe38:	d100      	bne.n	fe3c <nm_get_firmware_full_info+0x64>
    fe3a:	e09a      	b.n	ff72 <nm_get_firmware_full_info+0x19a>
			{
				ret = nm_read_block(reg|0x30000,(uint8*)&strgp,sizeof(tstrGpRegs));
    fe3c:	697b      	ldr	r3, [r7, #20]
    fe3e:	22c0      	movs	r2, #192	; 0xc0
    fe40:	0292      	lsls	r2, r2, #10
    fe42:	4313      	orrs	r3, r2
    fe44:	221f      	movs	r2, #31
    fe46:	18bc      	adds	r4, r7, r2
    fe48:	220c      	movs	r2, #12
    fe4a:	18b9      	adds	r1, r7, r2
    fe4c:	2208      	movs	r2, #8
    fe4e:	0018      	movs	r0, r3
    fe50:	4b52      	ldr	r3, [pc, #328]	; (ff9c <nm_get_firmware_full_info+0x1c4>)
    fe52:	4798      	blx	r3
    fe54:	0003      	movs	r3, r0
    fe56:	7023      	strb	r3, [r4, #0]
				if(ret == M2M_SUCCESS)
    fe58:	231f      	movs	r3, #31
    fe5a:	18fb      	adds	r3, r7, r3
    fe5c:	781b      	ldrb	r3, [r3, #0]
    fe5e:	b25b      	sxtb	r3, r3
    fe60:	2b00      	cmp	r3, #0
    fe62:	d000      	beq.n	fe66 <nm_get_firmware_full_info+0x8e>
    fe64:	e089      	b.n	ff7a <nm_get_firmware_full_info+0x1a2>
				{
					reg = strgp.u32Firmware_Ota_rev;
    fe66:	230c      	movs	r3, #12
    fe68:	18fb      	adds	r3, r7, r3
    fe6a:	685b      	ldr	r3, [r3, #4]
    fe6c:	617b      	str	r3, [r7, #20]
					reg &= 0x0000ffff;
    fe6e:	697b      	ldr	r3, [r7, #20]
    fe70:	041b      	lsls	r3, r3, #16
    fe72:	0c1b      	lsrs	r3, r3, #16
    fe74:	617b      	str	r3, [r7, #20]
					if(reg != 0)
    fe76:	697b      	ldr	r3, [r7, #20]
    fe78:	2b00      	cmp	r3, #0
    fe7a:	d100      	bne.n	fe7e <nm_get_firmware_full_info+0xa6>
    fe7c:	e074      	b.n	ff68 <nm_get_firmware_full_info+0x190>
					{
						ret = nm_read_block(reg|0x30000,(uint8*)pstrRev,sizeof(tstrM2mRev));
    fe7e:	697b      	ldr	r3, [r7, #20]
    fe80:	22c0      	movs	r2, #192	; 0xc0
    fe82:	0292      	lsls	r2, r2, #10
    fe84:	4313      	orrs	r3, r2
    fe86:	221f      	movs	r2, #31
    fe88:	18bc      	adds	r4, r7, r2
    fe8a:	6879      	ldr	r1, [r7, #4]
    fe8c:	2228      	movs	r2, #40	; 0x28
    fe8e:	0018      	movs	r0, r3
    fe90:	4b42      	ldr	r3, [pc, #264]	; (ff9c <nm_get_firmware_full_info+0x1c4>)
    fe92:	4798      	blx	r3
    fe94:	0003      	movs	r3, r0
    fe96:	7023      	strb	r3, [r4, #0]
						if(ret == M2M_SUCCESS)
    fe98:	231f      	movs	r3, #31
    fe9a:	18fb      	adds	r3, r7, r3
    fe9c:	781b      	ldrb	r3, [r3, #0]
    fe9e:	b25b      	sxtb	r3, r3
    fea0:	2b00      	cmp	r3, #0
    fea2:	d16a      	bne.n	ff7a <nm_get_firmware_full_info+0x1a2>
						{
							curr_firm_ver   = M2M_MAKE_VERSION(pstrRev->u8FirmwareMajor, pstrRev->u8FirmwareMinor,pstrRev->u8FirmwarePatch);
    fea4:	687b      	ldr	r3, [r7, #4]
    fea6:	791b      	ldrb	r3, [r3, #4]
    fea8:	021b      	lsls	r3, r3, #8
    feaa:	b21a      	sxth	r2, r3
    feac:	687b      	ldr	r3, [r7, #4]
    feae:	795b      	ldrb	r3, [r3, #5]
    feb0:	011b      	lsls	r3, r3, #4
    feb2:	b21b      	sxth	r3, r3
    feb4:	21ff      	movs	r1, #255	; 0xff
    feb6:	400b      	ands	r3, r1
    feb8:	b21b      	sxth	r3, r3
    feba:	4313      	orrs	r3, r2
    febc:	b21a      	sxth	r2, r3
    febe:	687b      	ldr	r3, [r7, #4]
    fec0:	799b      	ldrb	r3, [r3, #6]
    fec2:	b21b      	sxth	r3, r3
    fec4:	210f      	movs	r1, #15
    fec6:	400b      	ands	r3, r1
    fec8:	b21b      	sxth	r3, r3
    feca:	4313      	orrs	r3, r2
    fecc:	b21a      	sxth	r2, r3
    fece:	231c      	movs	r3, #28
    fed0:	18fb      	adds	r3, r7, r3
    fed2:	801a      	strh	r2, [r3, #0]
							curr_drv_ver    = M2M_MAKE_VERSION(M2M_RELEASE_VERSION_MAJOR_NO, M2M_RELEASE_VERSION_MINOR_NO, M2M_RELEASE_VERSION_PATCH_NO);
    fed4:	231a      	movs	r3, #26
    fed6:	18fb      	adds	r3, r7, r3
    fed8:	4a31      	ldr	r2, [pc, #196]	; (ffa0 <nm_get_firmware_full_info+0x1c8>)
    feda:	801a      	strh	r2, [r3, #0]
							min_req_drv_ver = M2M_MAKE_VERSION(pstrRev->u8DriverMajor, pstrRev->u8DriverMinor,pstrRev->u8DriverPatch);
    fedc:	687b      	ldr	r3, [r7, #4]
    fede:	79db      	ldrb	r3, [r3, #7]
    fee0:	021b      	lsls	r3, r3, #8
    fee2:	b21a      	sxth	r2, r3
    fee4:	687b      	ldr	r3, [r7, #4]
    fee6:	7a1b      	ldrb	r3, [r3, #8]
    fee8:	011b      	lsls	r3, r3, #4
    feea:	b21b      	sxth	r3, r3
    feec:	21ff      	movs	r1, #255	; 0xff
    feee:	400b      	ands	r3, r1
    fef0:	b21b      	sxth	r3, r3
    fef2:	4313      	orrs	r3, r2
    fef4:	b21a      	sxth	r2, r3
    fef6:	687b      	ldr	r3, [r7, #4]
    fef8:	7a5b      	ldrb	r3, [r3, #9]
    fefa:	b21b      	sxth	r3, r3
    fefc:	210f      	movs	r1, #15
    fefe:	400b      	ands	r3, r1
    ff00:	b21b      	sxth	r3, r3
    ff02:	4313      	orrs	r3, r2
    ff04:	b21a      	sxth	r2, r3
    ff06:	2318      	movs	r3, #24
    ff08:	18fb      	adds	r3, r7, r3
    ff0a:	801a      	strh	r2, [r3, #0]
							if((curr_firm_ver == 0)||(min_req_drv_ver == 0)||(min_req_drv_ver == 0)){
    ff0c:	231c      	movs	r3, #28
    ff0e:	18fb      	adds	r3, r7, r3
    ff10:	881b      	ldrh	r3, [r3, #0]
    ff12:	2b00      	cmp	r3, #0
    ff14:	d009      	beq.n	ff2a <nm_get_firmware_full_info+0x152>
    ff16:	2318      	movs	r3, #24
    ff18:	18fb      	adds	r3, r7, r3
    ff1a:	881b      	ldrh	r3, [r3, #0]
    ff1c:	2b00      	cmp	r3, #0
    ff1e:	d004      	beq.n	ff2a <nm_get_firmware_full_info+0x152>
    ff20:	2318      	movs	r3, #24
    ff22:	18fb      	adds	r3, r7, r3
    ff24:	881b      	ldrh	r3, [r3, #0]
    ff26:	2b00      	cmp	r3, #0
    ff28:	d104      	bne.n	ff34 <nm_get_firmware_full_info+0x15c>
								ret = M2M_ERR_FAIL;
    ff2a:	231f      	movs	r3, #31
    ff2c:	18fb      	adds	r3, r7, r3
    ff2e:	22f4      	movs	r2, #244	; 0xf4
    ff30:	701a      	strb	r2, [r3, #0]
								goto EXIT;
    ff32:	e022      	b.n	ff7a <nm_get_firmware_full_info+0x1a2>
							}
							if(curr_drv_ver <  min_req_drv_ver) {
    ff34:	231a      	movs	r3, #26
    ff36:	18fa      	adds	r2, r7, r3
    ff38:	2318      	movs	r3, #24
    ff3a:	18fb      	adds	r3, r7, r3
    ff3c:	8812      	ldrh	r2, [r2, #0]
    ff3e:	881b      	ldrh	r3, [r3, #0]
    ff40:	429a      	cmp	r2, r3
    ff42:	d204      	bcs.n	ff4e <nm_get_firmware_full_info+0x176>
								/*The current driver version should be larger or equal 
								than the min driver that the current firmware support  */
								ret = M2M_ERR_FW_VER_MISMATCH;
    ff44:	231f      	movs	r3, #31
    ff46:	18fb      	adds	r3, r7, r3
    ff48:	22f3      	movs	r2, #243	; 0xf3
    ff4a:	701a      	strb	r2, [r3, #0]
								goto EXIT;
    ff4c:	e015      	b.n	ff7a <nm_get_firmware_full_info+0x1a2>
							}
							if(curr_drv_ver >  curr_firm_ver) {
    ff4e:	231a      	movs	r3, #26
    ff50:	18fa      	adds	r2, r7, r3
    ff52:	231c      	movs	r3, #28
    ff54:	18fb      	adds	r3, r7, r3
    ff56:	8812      	ldrh	r2, [r2, #0]
    ff58:	881b      	ldrh	r3, [r3, #0]
    ff5a:	429a      	cmp	r2, r3
    ff5c:	d90d      	bls.n	ff7a <nm_get_firmware_full_info+0x1a2>
								/*The current driver should be equal or less than the firmware version*/
								ret = M2M_ERR_FW_VER_MISMATCH;
    ff5e:	231f      	movs	r3, #31
    ff60:	18fb      	adds	r3, r7, r3
    ff62:	22f3      	movs	r2, #243	; 0xf3
    ff64:	701a      	strb	r2, [r3, #0]
								goto EXIT;
    ff66:	e008      	b.n	ff7a <nm_get_firmware_full_info+0x1a2>
							}
						}
					}else {
						ret = M2M_ERR_FAIL;
    ff68:	231f      	movs	r3, #31
    ff6a:	18fb      	adds	r3, r7, r3
    ff6c:	22f4      	movs	r2, #244	; 0xf4
    ff6e:	701a      	strb	r2, [r3, #0]
    ff70:	e003      	b.n	ff7a <nm_get_firmware_full_info+0x1a2>
					}
				}
			}else{
				ret = M2M_ERR_FAIL;
    ff72:	231f      	movs	r3, #31
    ff74:	18fb      	adds	r3, r7, r3
    ff76:	22f4      	movs	r2, #244	; 0xf4
    ff78:	701a      	strb	r2, [r3, #0]
			}
		}
	}
EXIT:
	return ret;
    ff7a:	231f      	movs	r3, #31
    ff7c:	18fb      	adds	r3, r7, r3
    ff7e:	781b      	ldrb	r3, [r3, #0]
    ff80:	b25b      	sxtb	r3, r3
}
    ff82:	0018      	movs	r0, r3
    ff84:	46bd      	mov	sp, r7
    ff86:	b009      	add	sp, #36	; 0x24
    ff88:	bd90      	pop	{r4, r7, pc}
    ff8a:	46c0      	nop			; (mov r8, r8)
    ff8c:	0002181b 	.word	0x0002181b
    ff90:	0000db11 	.word	0x0000db11
    ff94:	000c0008 	.word	0x000c0008
    ff98:	0000fba1 	.word	0x0000fba1
    ff9c:	0000fc15 	.word	0x0000fc15
    ffa0:	00001354 	.word	0x00001354

0000ffa4 <nm_drv_init>:
*	@author	M. Abdelmawla
*	@date	15 July 2012
*	@version	1.0
*/
sint8 nm_drv_init(void * arg)
{
    ffa4:	b590      	push	{r4, r7, lr}
    ffa6:	b085      	sub	sp, #20
    ffa8:	af00      	add	r7, sp, #0
    ffaa:	6078      	str	r0, [r7, #4]
	sint8 ret = M2M_SUCCESS;
    ffac:	230f      	movs	r3, #15
    ffae:	18fb      	adds	r3, r7, r3
    ffb0:	2200      	movs	r2, #0
    ffb2:	701a      	strb	r2, [r3, #0]
	uint8 u8Mode;
	
	if(NULL != arg) {
    ffb4:	687b      	ldr	r3, [r7, #4]
    ffb6:	2b00      	cmp	r3, #0
    ffb8:	d013      	beq.n	ffe2 <nm_drv_init+0x3e>
		u8Mode = *((uint8 *)arg);
    ffba:	230e      	movs	r3, #14
    ffbc:	18fb      	adds	r3, r7, r3
    ffbe:	687a      	ldr	r2, [r7, #4]
    ffc0:	7812      	ldrb	r2, [r2, #0]
    ffc2:	701a      	strb	r2, [r3, #0]
		if((u8Mode < M2M_WIFI_MODE_NORMAL)||(u8Mode >= M2M_WIFI_MODE_MAX)) {
    ffc4:	230e      	movs	r3, #14
    ffc6:	18fb      	adds	r3, r7, r3
    ffc8:	781b      	ldrb	r3, [r3, #0]
    ffca:	2b00      	cmp	r3, #0
    ffcc:	d004      	beq.n	ffd8 <nm_drv_init+0x34>
    ffce:	230e      	movs	r3, #14
    ffd0:	18fb      	adds	r3, r7, r3
    ffd2:	781b      	ldrb	r3, [r3, #0]
    ffd4:	2b04      	cmp	r3, #4
    ffd6:	d908      	bls.n	ffea <nm_drv_init+0x46>
			u8Mode = M2M_WIFI_MODE_NORMAL;
    ffd8:	230e      	movs	r3, #14
    ffda:	18fb      	adds	r3, r7, r3
    ffdc:	2201      	movs	r2, #1
    ffde:	701a      	strb	r2, [r3, #0]
    ffe0:	e003      	b.n	ffea <nm_drv_init+0x46>
		}
	} else {
		u8Mode = M2M_WIFI_MODE_NORMAL;
    ffe2:	230e      	movs	r3, #14
    ffe4:	18fb      	adds	r3, r7, r3
    ffe6:	2201      	movs	r2, #1
    ffe8:	701a      	strb	r2, [r3, #0]
	}
	
	ret = nm_bus_iface_init(NULL);
    ffea:	230f      	movs	r3, #15
    ffec:	18fc      	adds	r4, r7, r3
    ffee:	2000      	movs	r0, #0
    fff0:	4b41      	ldr	r3, [pc, #260]	; (100f8 <nm_drv_init+0x154>)
    fff2:	4798      	blx	r3
    fff4:	0003      	movs	r3, r0
    fff6:	7023      	strb	r3, [r4, #0]
	if (M2M_SUCCESS != ret) {
    fff8:	230f      	movs	r3, #15
    fffa:	18fb      	adds	r3, r7, r3
    fffc:	781b      	ldrb	r3, [r3, #0]
    fffe:	b25b      	sxtb	r3, r3
   10000:	2b00      	cmp	r3, #0
   10002:	d00f      	beq.n	10024 <nm_drv_init+0x80>
		M2M_ERR("[nmi start]: fail init bus\n");
   10004:	2390      	movs	r3, #144	; 0x90
   10006:	005a      	lsls	r2, r3, #1
   10008:	493c      	ldr	r1, [pc, #240]	; (100fc <nm_drv_init+0x158>)
   1000a:	4b3d      	ldr	r3, [pc, #244]	; (10100 <nm_drv_init+0x15c>)
   1000c:	0018      	movs	r0, r3
   1000e:	4b3d      	ldr	r3, [pc, #244]	; (10104 <nm_drv_init+0x160>)
   10010:	4798      	blx	r3
   10012:	4b3d      	ldr	r3, [pc, #244]	; (10108 <nm_drv_init+0x164>)
   10014:	0018      	movs	r0, r3
   10016:	4b3b      	ldr	r3, [pc, #236]	; (10104 <nm_drv_init+0x160>)
   10018:	4798      	blx	r3
   1001a:	4b3c      	ldr	r3, [pc, #240]	; (1010c <nm_drv_init+0x168>)
   1001c:	0018      	movs	r0, r3
   1001e:	4b39      	ldr	r3, [pc, #228]	; (10104 <nm_drv_init+0x160>)
   10020:	4798      	blx	r3
		goto ERR1;
   10022:	e061      	b.n	100e8 <nm_drv_init+0x144>
	ret = chip_reset();
	if (M2M_SUCCESS != ret) {
		goto ERR2;
	}
#endif
	M2M_INFO("Chip ID %lx\n", nmi_get_chipid());
   10024:	4b3a      	ldr	r3, [pc, #232]	; (10110 <nm_drv_init+0x16c>)
   10026:	0018      	movs	r0, r3
   10028:	4b36      	ldr	r3, [pc, #216]	; (10104 <nm_drv_init+0x160>)
   1002a:	4798      	blx	r3
   1002c:	4b39      	ldr	r3, [pc, #228]	; (10114 <nm_drv_init+0x170>)
   1002e:	4798      	blx	r3
   10030:	0002      	movs	r2, r0
   10032:	4b39      	ldr	r3, [pc, #228]	; (10118 <nm_drv_init+0x174>)
   10034:	0011      	movs	r1, r2
   10036:	0018      	movs	r0, r3
   10038:	4b32      	ldr	r3, [pc, #200]	; (10104 <nm_drv_init+0x160>)
   1003a:	4798      	blx	r3
   1003c:	4b33      	ldr	r3, [pc, #204]	; (1010c <nm_drv_init+0x168>)
   1003e:	0018      	movs	r0, r3
   10040:	4b30      	ldr	r3, [pc, #192]	; (10104 <nm_drv_init+0x160>)
   10042:	4798      	blx	r3
#ifdef CONF_WINC_USE_SPI
	/* Must do this after global reset to set SPI data packet size. */
	nm_spi_init();
   10044:	4b35      	ldr	r3, [pc, #212]	; (1011c <nm_drv_init+0x178>)
   10046:	4798      	blx	r3
#endif
	ret = wait_for_bootrom(u8Mode);
   10048:	230f      	movs	r3, #15
   1004a:	18fc      	adds	r4, r7, r3
   1004c:	230e      	movs	r3, #14
   1004e:	18fb      	adds	r3, r7, r3
   10050:	781b      	ldrb	r3, [r3, #0]
   10052:	0018      	movs	r0, r3
   10054:	4b32      	ldr	r3, [pc, #200]	; (10120 <nm_drv_init+0x17c>)
   10056:	4798      	blx	r3
   10058:	0003      	movs	r3, r0
   1005a:	7023      	strb	r3, [r4, #0]
	if (M2M_SUCCESS != ret) {
   1005c:	230f      	movs	r3, #15
   1005e:	18fb      	adds	r3, r7, r3
   10060:	781b      	ldrb	r3, [r3, #0]
   10062:	b25b      	sxtb	r3, r3
   10064:	2b00      	cmp	r3, #0
   10066:	d13a      	bne.n	100de <nm_drv_init+0x13a>
		goto ERR2;
	}
		
	ret = wait_for_firmware_start(u8Mode);
   10068:	230f      	movs	r3, #15
   1006a:	18fc      	adds	r4, r7, r3
   1006c:	230e      	movs	r3, #14
   1006e:	18fb      	adds	r3, r7, r3
   10070:	781b      	ldrb	r3, [r3, #0]
   10072:	0018      	movs	r0, r3
   10074:	4b2b      	ldr	r3, [pc, #172]	; (10124 <nm_drv_init+0x180>)
   10076:	4798      	blx	r3
   10078:	0003      	movs	r3, r0
   1007a:	7023      	strb	r3, [r4, #0]
	if (M2M_SUCCESS != ret) {
   1007c:	230f      	movs	r3, #15
   1007e:	18fb      	adds	r3, r7, r3
   10080:	781b      	ldrb	r3, [r3, #0]
   10082:	b25b      	sxtb	r3, r3
   10084:	2b00      	cmp	r3, #0
   10086:	d12c      	bne.n	100e2 <nm_drv_init+0x13e>
		goto ERR2;
	}
	
	if((M2M_WIFI_MODE_ATE_HIGH == u8Mode)||(M2M_WIFI_MODE_ATE_LOW == u8Mode)) {
   10088:	230e      	movs	r3, #14
   1008a:	18fb      	adds	r3, r7, r3
   1008c:	781b      	ldrb	r3, [r3, #0]
   1008e:	2b02      	cmp	r3, #2
   10090:	d02a      	beq.n	100e8 <nm_drv_init+0x144>
   10092:	230e      	movs	r3, #14
   10094:	18fb      	adds	r3, r7, r3
   10096:	781b      	ldrb	r3, [r3, #0]
   10098:	2b03      	cmp	r3, #3
   1009a:	d025      	beq.n	100e8 <nm_drv_init+0x144>
		goto ERR1;
	} else {
		/*continue running*/
	}
	
	ret = enable_interrupts();
   1009c:	230f      	movs	r3, #15
   1009e:	18fc      	adds	r4, r7, r3
   100a0:	4b21      	ldr	r3, [pc, #132]	; (10128 <nm_drv_init+0x184>)
   100a2:	4798      	blx	r3
   100a4:	0003      	movs	r3, r0
   100a6:	7023      	strb	r3, [r4, #0]
	if (M2M_SUCCESS != ret) {
   100a8:	230f      	movs	r3, #15
   100aa:	18fb      	adds	r3, r7, r3
   100ac:	781b      	ldrb	r3, [r3, #0]
   100ae:	b25b      	sxtb	r3, r3
   100b0:	2b00      	cmp	r3, #0
   100b2:	d00f      	beq.n	100d4 <nm_drv_init+0x130>
		M2M_ERR("failed to enable interrupts..\n");
   100b4:	23a7      	movs	r3, #167	; 0xa7
   100b6:	005a      	lsls	r2, r3, #1
   100b8:	4910      	ldr	r1, [pc, #64]	; (100fc <nm_drv_init+0x158>)
   100ba:	4b11      	ldr	r3, [pc, #68]	; (10100 <nm_drv_init+0x15c>)
   100bc:	0018      	movs	r0, r3
   100be:	4b11      	ldr	r3, [pc, #68]	; (10104 <nm_drv_init+0x160>)
   100c0:	4798      	blx	r3
   100c2:	4b1a      	ldr	r3, [pc, #104]	; (1012c <nm_drv_init+0x188>)
   100c4:	0018      	movs	r0, r3
   100c6:	4b0f      	ldr	r3, [pc, #60]	; (10104 <nm_drv_init+0x160>)
   100c8:	4798      	blx	r3
   100ca:	4b10      	ldr	r3, [pc, #64]	; (1010c <nm_drv_init+0x168>)
   100cc:	0018      	movs	r0, r3
   100ce:	4b0d      	ldr	r3, [pc, #52]	; (10104 <nm_drv_init+0x160>)
   100d0:	4798      	blx	r3
		goto ERR2;
   100d2:	e007      	b.n	100e4 <nm_drv_init+0x140>
	}
	return ret;
   100d4:	230f      	movs	r3, #15
   100d6:	18fb      	adds	r3, r7, r3
   100d8:	781b      	ldrb	r3, [r3, #0]
   100da:	b25b      	sxtb	r3, r3
   100dc:	e008      	b.n	100f0 <nm_drv_init+0x14c>
		goto ERR2;
   100de:	46c0      	nop			; (mov r8, r8)
   100e0:	e000      	b.n	100e4 <nm_drv_init+0x140>
		goto ERR2;
   100e2:	46c0      	nop			; (mov r8, r8)
ERR2:
	nm_bus_iface_deinit();
   100e4:	4b12      	ldr	r3, [pc, #72]	; (10130 <nm_drv_init+0x18c>)
   100e6:	4798      	blx	r3
ERR1:
	return ret;
   100e8:	230f      	movs	r3, #15
   100ea:	18fb      	adds	r3, r7, r3
   100ec:	781b      	ldrb	r3, [r3, #0]
   100ee:	b25b      	sxtb	r3, r3
}
   100f0:	0018      	movs	r0, r3
   100f2:	46bd      	mov	sp, r7
   100f4:	b005      	add	sp, #20
   100f6:	bd90      	pop	{r4, r7, pc}
   100f8:	0000fb05 	.word	0x0000fb05
   100fc:	0002575c 	.word	0x0002575c
   10100:	0002568c 	.word	0x0002568c
   10104:	0000addd 	.word	0x0000addd
   10108:	000256a0 	.word	0x000256a0
   1010c:	000256bc 	.word	0x000256bc
   10110:	000256c0 	.word	0x000256c0
   10114:	0000f4a1 	.word	0x0000f4a1
   10118:	000256cc 	.word	0x000256cc
   1011c:	000119bd 	.word	0x000119bd
   10120:	0000f7f9 	.word	0x0000f7f9
   10124:	0000f991 	.word	0x0000f991
   10128:	0000f3ed 	.word	0x0000f3ed
   1012c:	000256dc 	.word	0x000256dc
   10130:	0000fb39 	.word	0x0000fb39

00010134 <nm_drv_deinit>:
*	@author	M. Abdelmawla
*	@date	17 July 2012
*	@version	1.0
*/
sint8 nm_drv_deinit(void * arg)
{
   10134:	b590      	push	{r4, r7, lr}
   10136:	b085      	sub	sp, #20
   10138:	af00      	add	r7, sp, #0
   1013a:	6078      	str	r0, [r7, #4]
	sint8 ret;

	ret = chip_deinit();
   1013c:	230f      	movs	r3, #15
   1013e:	18fc      	adds	r4, r7, r3
   10140:	4b2e      	ldr	r3, [pc, #184]	; (101fc <nm_drv_deinit+0xc8>)
   10142:	4798      	blx	r3
   10144:	0003      	movs	r3, r0
   10146:	7023      	strb	r3, [r4, #0]
	if (M2M_SUCCESS != ret) {
   10148:	230f      	movs	r3, #15
   1014a:	18fb      	adds	r3, r7, r3
   1014c:	781b      	ldrb	r3, [r3, #0]
   1014e:	b25b      	sxtb	r3, r3
   10150:	2b00      	cmp	r3, #0
   10152:	d010      	beq.n	10176 <nm_drv_deinit+0x42>
		M2M_ERR("[nmi stop]: chip_deinit fail\n");
   10154:	2366      	movs	r3, #102	; 0x66
   10156:	33ff      	adds	r3, #255	; 0xff
   10158:	001a      	movs	r2, r3
   1015a:	4929      	ldr	r1, [pc, #164]	; (10200 <nm_drv_deinit+0xcc>)
   1015c:	4b29      	ldr	r3, [pc, #164]	; (10204 <nm_drv_deinit+0xd0>)
   1015e:	0018      	movs	r0, r3
   10160:	4b29      	ldr	r3, [pc, #164]	; (10208 <nm_drv_deinit+0xd4>)
   10162:	4798      	blx	r3
   10164:	4b29      	ldr	r3, [pc, #164]	; (1020c <nm_drv_deinit+0xd8>)
   10166:	0018      	movs	r0, r3
   10168:	4b27      	ldr	r3, [pc, #156]	; (10208 <nm_drv_deinit+0xd4>)
   1016a:	4798      	blx	r3
   1016c:	4b28      	ldr	r3, [pc, #160]	; (10210 <nm_drv_deinit+0xdc>)
   1016e:	0018      	movs	r0, r3
   10170:	4b25      	ldr	r3, [pc, #148]	; (10208 <nm_drv_deinit+0xd4>)
   10172:	4798      	blx	r3
		goto ERR1;
   10174:	e03a      	b.n	101ec <nm_drv_deinit+0xb8>
	}
	
	/* Disable SPI flash to save power when the chip is off */
	ret = spi_flash_enable(0);
   10176:	230f      	movs	r3, #15
   10178:	18fc      	adds	r4, r7, r3
   1017a:	2000      	movs	r0, #0
   1017c:	4b25      	ldr	r3, [pc, #148]	; (10214 <nm_drv_deinit+0xe0>)
   1017e:	4798      	blx	r3
   10180:	0003      	movs	r3, r0
   10182:	7023      	strb	r3, [r4, #0]
	if (M2M_SUCCESS != ret) {
   10184:	230f      	movs	r3, #15
   10186:	18fb      	adds	r3, r7, r3
   10188:	781b      	ldrb	r3, [r3, #0]
   1018a:	b25b      	sxtb	r3, r3
   1018c:	2b00      	cmp	r3, #0
   1018e:	d00f      	beq.n	101b0 <nm_drv_deinit+0x7c>
		M2M_ERR("[nmi stop]: SPI flash disable fail\n");
   10190:	23b6      	movs	r3, #182	; 0xb6
   10192:	005a      	lsls	r2, r3, #1
   10194:	491a      	ldr	r1, [pc, #104]	; (10200 <nm_drv_deinit+0xcc>)
   10196:	4b1b      	ldr	r3, [pc, #108]	; (10204 <nm_drv_deinit+0xd0>)
   10198:	0018      	movs	r0, r3
   1019a:	4b1b      	ldr	r3, [pc, #108]	; (10208 <nm_drv_deinit+0xd4>)
   1019c:	4798      	blx	r3
   1019e:	4b1e      	ldr	r3, [pc, #120]	; (10218 <nm_drv_deinit+0xe4>)
   101a0:	0018      	movs	r0, r3
   101a2:	4b19      	ldr	r3, [pc, #100]	; (10208 <nm_drv_deinit+0xd4>)
   101a4:	4798      	blx	r3
   101a6:	4b1a      	ldr	r3, [pc, #104]	; (10210 <nm_drv_deinit+0xdc>)
   101a8:	0018      	movs	r0, r3
   101aa:	4b17      	ldr	r3, [pc, #92]	; (10208 <nm_drv_deinit+0xd4>)
   101ac:	4798      	blx	r3
		goto ERR1;
   101ae:	e01d      	b.n	101ec <nm_drv_deinit+0xb8>
	}

	ret = nm_bus_iface_deinit();
   101b0:	230f      	movs	r3, #15
   101b2:	18fc      	adds	r4, r7, r3
   101b4:	4b19      	ldr	r3, [pc, #100]	; (1021c <nm_drv_deinit+0xe8>)
   101b6:	4798      	blx	r3
   101b8:	0003      	movs	r3, r0
   101ba:	7023      	strb	r3, [r4, #0]
	if (M2M_SUCCESS != ret) {
   101bc:	230f      	movs	r3, #15
   101be:	18fb      	adds	r3, r7, r3
   101c0:	781b      	ldrb	r3, [r3, #0]
   101c2:	b25b      	sxtb	r3, r3
   101c4:	2b00      	cmp	r3, #0
   101c6:	d00f      	beq.n	101e8 <nm_drv_deinit+0xb4>
		M2M_ERR("[nmi stop]: fail init bus\n");
   101c8:	23b9      	movs	r3, #185	; 0xb9
   101ca:	005a      	lsls	r2, r3, #1
   101cc:	490c      	ldr	r1, [pc, #48]	; (10200 <nm_drv_deinit+0xcc>)
   101ce:	4b0d      	ldr	r3, [pc, #52]	; (10204 <nm_drv_deinit+0xd0>)
   101d0:	0018      	movs	r0, r3
   101d2:	4b0d      	ldr	r3, [pc, #52]	; (10208 <nm_drv_deinit+0xd4>)
   101d4:	4798      	blx	r3
   101d6:	4b12      	ldr	r3, [pc, #72]	; (10220 <nm_drv_deinit+0xec>)
   101d8:	0018      	movs	r0, r3
   101da:	4b0b      	ldr	r3, [pc, #44]	; (10208 <nm_drv_deinit+0xd4>)
   101dc:	4798      	blx	r3
   101de:	4b0c      	ldr	r3, [pc, #48]	; (10210 <nm_drv_deinit+0xdc>)
   101e0:	0018      	movs	r0, r3
   101e2:	4b09      	ldr	r3, [pc, #36]	; (10208 <nm_drv_deinit+0xd4>)
   101e4:	4798      	blx	r3
		goto ERR1;
   101e6:	e001      	b.n	101ec <nm_drv_deinit+0xb8>
	}
#ifdef CONF_WINC_USE_SPI
	/* Must do this after global reset to set SPI data packet size. */
	nm_spi_deinit();
   101e8:	4b0e      	ldr	r3, [pc, #56]	; (10224 <nm_drv_deinit+0xf0>)
   101ea:	4798      	blx	r3
#endif

ERR1:
	return ret;
   101ec:	230f      	movs	r3, #15
   101ee:	18fb      	adds	r3, r7, r3
   101f0:	781b      	ldrb	r3, [r3, #0]
   101f2:	b25b      	sxtb	r3, r3
}
   101f4:	0018      	movs	r0, r3
   101f6:	46bd      	mov	sp, r7
   101f8:	b005      	add	sp, #20
   101fa:	bd90      	pop	{r4, r7, pc}
   101fc:	0000fa45 	.word	0x0000fa45
   10200:	00025768 	.word	0x00025768
   10204:	0002568c 	.word	0x0002568c
   10208:	0000addd 	.word	0x0000addd
   1020c:	000256fc 	.word	0x000256fc
   10210:	000256bc 	.word	0x000256bc
   10214:	00012e65 	.word	0x00012e65
   10218:	0002571c 	.word	0x0002571c
   1021c:	0000fb39 	.word	0x0000fb39
   10220:	00025740 	.word	0x00025740
   10224:	00011b09 	.word	0x00011b09

00010228 <nmi_spi_read>:
#define DATA_PKT_SZ				DATA_PKT_SZ_8K

static uint8 	gu8Crc_off	=   0;

static sint8 nmi_spi_read(uint8* b, uint16 sz)
{
   10228:	b580      	push	{r7, lr}
   1022a:	b086      	sub	sp, #24
   1022c:	af00      	add	r7, sp, #0
   1022e:	6078      	str	r0, [r7, #4]
   10230:	000a      	movs	r2, r1
   10232:	1cbb      	adds	r3, r7, #2
   10234:	801a      	strh	r2, [r3, #0]
	tstrNmSpiRw spi;
	spi.pu8InBuf = NULL;
   10236:	230c      	movs	r3, #12
   10238:	18fb      	adds	r3, r7, r3
   1023a:	2200      	movs	r2, #0
   1023c:	601a      	str	r2, [r3, #0]
	spi.pu8OutBuf = b;
   1023e:	230c      	movs	r3, #12
   10240:	18fb      	adds	r3, r7, r3
   10242:	687a      	ldr	r2, [r7, #4]
   10244:	605a      	str	r2, [r3, #4]
	spi.u16Sz = sz;
   10246:	230c      	movs	r3, #12
   10248:	18fb      	adds	r3, r7, r3
   1024a:	1cba      	adds	r2, r7, #2
   1024c:	8812      	ldrh	r2, [r2, #0]
   1024e:	811a      	strh	r2, [r3, #8]
	return nm_bus_ioctl(NM_BUS_IOCTL_RW, &spi);
   10250:	230c      	movs	r3, #12
   10252:	18fb      	adds	r3, r7, r3
   10254:	0019      	movs	r1, r3
   10256:	2003      	movs	r0, #3
   10258:	4b03      	ldr	r3, [pc, #12]	; (10268 <nmi_spi_read+0x40>)
   1025a:	4798      	blx	r3
   1025c:	0003      	movs	r3, r0
}
   1025e:	0018      	movs	r0, r3
   10260:	46bd      	mov	sp, r7
   10262:	b006      	add	sp, #24
   10264:	bd80      	pop	{r7, pc}
   10266:	46c0      	nop			; (mov r8, r8)
   10268:	0000d9d5 	.word	0x0000d9d5

0001026c <nmi_spi_write>:

static sint8 nmi_spi_write(uint8* b, uint16 sz)
{
   1026c:	b580      	push	{r7, lr}
   1026e:	b086      	sub	sp, #24
   10270:	af00      	add	r7, sp, #0
   10272:	6078      	str	r0, [r7, #4]
   10274:	000a      	movs	r2, r1
   10276:	1cbb      	adds	r3, r7, #2
   10278:	801a      	strh	r2, [r3, #0]
	tstrNmSpiRw spi;
	spi.pu8InBuf = b;
   1027a:	230c      	movs	r3, #12
   1027c:	18fb      	adds	r3, r7, r3
   1027e:	687a      	ldr	r2, [r7, #4]
   10280:	601a      	str	r2, [r3, #0]
	spi.pu8OutBuf = NULL;
   10282:	230c      	movs	r3, #12
   10284:	18fb      	adds	r3, r7, r3
   10286:	2200      	movs	r2, #0
   10288:	605a      	str	r2, [r3, #4]
	spi.u16Sz = sz;
   1028a:	230c      	movs	r3, #12
   1028c:	18fb      	adds	r3, r7, r3
   1028e:	1cba      	adds	r2, r7, #2
   10290:	8812      	ldrh	r2, [r2, #0]
   10292:	811a      	strh	r2, [r3, #8]
	return nm_bus_ioctl(NM_BUS_IOCTL_RW, &spi);
   10294:	230c      	movs	r3, #12
   10296:	18fb      	adds	r3, r7, r3
   10298:	0019      	movs	r1, r3
   1029a:	2003      	movs	r0, #3
   1029c:	4b03      	ldr	r3, [pc, #12]	; (102ac <nmi_spi_write+0x40>)
   1029e:	4798      	blx	r3
   102a0:	0003      	movs	r3, r0
}
   102a2:	0018      	movs	r0, r3
   102a4:	46bd      	mov	sp, r7
   102a6:	b006      	add	sp, #24
   102a8:	bd80      	pop	{r7, pc}
   102aa:	46c0      	nop			; (mov r8, r8)
   102ac:	0000d9d5 	.word	0x0000d9d5

000102b0 <nmi_spi_rw>:
#ifndef USE_OLD_SPI_SW
static sint8 nmi_spi_rw(uint8 *bin,uint8* bout,uint16 sz)
{
   102b0:	b580      	push	{r7, lr}
   102b2:	b088      	sub	sp, #32
   102b4:	af00      	add	r7, sp, #0
   102b6:	60f8      	str	r0, [r7, #12]
   102b8:	60b9      	str	r1, [r7, #8]
   102ba:	1dbb      	adds	r3, r7, #6
   102bc:	801a      	strh	r2, [r3, #0]
	tstrNmSpiRw spi;
	spi.pu8InBuf = bin;
   102be:	2314      	movs	r3, #20
   102c0:	18fb      	adds	r3, r7, r3
   102c2:	68fa      	ldr	r2, [r7, #12]
   102c4:	601a      	str	r2, [r3, #0]
	spi.pu8OutBuf = bout;
   102c6:	2314      	movs	r3, #20
   102c8:	18fb      	adds	r3, r7, r3
   102ca:	68ba      	ldr	r2, [r7, #8]
   102cc:	605a      	str	r2, [r3, #4]
	spi.u16Sz = sz;
   102ce:	2314      	movs	r3, #20
   102d0:	18fb      	adds	r3, r7, r3
   102d2:	1dba      	adds	r2, r7, #6
   102d4:	8812      	ldrh	r2, [r2, #0]
   102d6:	811a      	strh	r2, [r3, #8]
	return nm_bus_ioctl(NM_BUS_IOCTL_RW, &spi);	
   102d8:	2314      	movs	r3, #20
   102da:	18fb      	adds	r3, r7, r3
   102dc:	0019      	movs	r1, r3
   102de:	2003      	movs	r0, #3
   102e0:	4b03      	ldr	r3, [pc, #12]	; (102f0 <nmi_spi_rw+0x40>)
   102e2:	4798      	blx	r3
   102e4:	0003      	movs	r3, r0
}
   102e6:	0018      	movs	r0, r3
   102e8:	46bd      	mov	sp, r7
   102ea:	b008      	add	sp, #32
   102ec:	bd80      	pop	{r7, pc}
   102ee:	46c0      	nop			; (mov r8, r8)
   102f0:	0000d9d5 	.word	0x0000d9d5

000102f4 <crc7_byte>:
	0x46, 0x4f, 0x54, 0x5d, 0x62, 0x6b, 0x70, 0x79
};


static uint8 crc7_byte(uint8 crc, uint8 data)
{
   102f4:	b580      	push	{r7, lr}
   102f6:	b082      	sub	sp, #8
   102f8:	af00      	add	r7, sp, #0
   102fa:	0002      	movs	r2, r0
   102fc:	1dfb      	adds	r3, r7, #7
   102fe:	701a      	strb	r2, [r3, #0]
   10300:	1dbb      	adds	r3, r7, #6
   10302:	1c0a      	adds	r2, r1, #0
   10304:	701a      	strb	r2, [r3, #0]
	return crc7_syndrome_table[(crc << 1) ^ data];
   10306:	1dfb      	adds	r3, r7, #7
   10308:	781b      	ldrb	r3, [r3, #0]
   1030a:	005a      	lsls	r2, r3, #1
   1030c:	1dbb      	adds	r3, r7, #6
   1030e:	781b      	ldrb	r3, [r3, #0]
   10310:	4053      	eors	r3, r2
   10312:	4a03      	ldr	r2, [pc, #12]	; (10320 <crc7_byte+0x2c>)
   10314:	5cd3      	ldrb	r3, [r2, r3]
}
   10316:	0018      	movs	r0, r3
   10318:	46bd      	mov	sp, r7
   1031a:	b002      	add	sp, #8
   1031c:	bd80      	pop	{r7, pc}
   1031e:	46c0      	nop			; (mov r8, r8)
   10320:	00025778 	.word	0x00025778

00010324 <crc7>:

static uint8 crc7(uint8 crc, const uint8 *buffer, uint32 len)
{
   10324:	b590      	push	{r4, r7, lr}
   10326:	b085      	sub	sp, #20
   10328:	af00      	add	r7, sp, #0
   1032a:	60b9      	str	r1, [r7, #8]
   1032c:	607a      	str	r2, [r7, #4]
   1032e:	230f      	movs	r3, #15
   10330:	18fb      	adds	r3, r7, r3
   10332:	1c02      	adds	r2, r0, #0
   10334:	701a      	strb	r2, [r3, #0]
	while (len--)
   10336:	e00e      	b.n	10356 <crc7+0x32>
		crc = crc7_byte(crc, *buffer++);
   10338:	68bb      	ldr	r3, [r7, #8]
   1033a:	1c5a      	adds	r2, r3, #1
   1033c:	60ba      	str	r2, [r7, #8]
   1033e:	781a      	ldrb	r2, [r3, #0]
   10340:	230f      	movs	r3, #15
   10342:	18fc      	adds	r4, r7, r3
   10344:	230f      	movs	r3, #15
   10346:	18fb      	adds	r3, r7, r3
   10348:	781b      	ldrb	r3, [r3, #0]
   1034a:	0011      	movs	r1, r2
   1034c:	0018      	movs	r0, r3
   1034e:	4b08      	ldr	r3, [pc, #32]	; (10370 <crc7+0x4c>)
   10350:	4798      	blx	r3
   10352:	0003      	movs	r3, r0
   10354:	7023      	strb	r3, [r4, #0]
	while (len--)
   10356:	687b      	ldr	r3, [r7, #4]
   10358:	1e5a      	subs	r2, r3, #1
   1035a:	607a      	str	r2, [r7, #4]
   1035c:	2b00      	cmp	r3, #0
   1035e:	d1eb      	bne.n	10338 <crc7+0x14>
	return crc;
   10360:	230f      	movs	r3, #15
   10362:	18fb      	adds	r3, r7, r3
   10364:	781b      	ldrb	r3, [r3, #0]
}
   10366:	0018      	movs	r0, r3
   10368:	46bd      	mov	sp, r7
   1036a:	b005      	add	sp, #20
   1036c:	bd90      	pop	{r4, r7, pc}
   1036e:	46c0      	nop			; (mov r8, r8)
   10370:	000102f5 	.word	0x000102f5

00010374 <spi_cmd>:
#define DATA_PKT_SZ_4K			(4 * 1024)
#define DATA_PKT_SZ_8K			(8 * 1024)
#define DATA_PKT_SZ				DATA_PKT_SZ_8K

static sint8 spi_cmd(uint8 cmd, uint32 adr, uint32 u32data, uint32 sz,uint8 clockless)
{
   10374:	b590      	push	{r4, r7, lr}
   10376:	b089      	sub	sp, #36	; 0x24
   10378:	af00      	add	r7, sp, #0
   1037a:	60b9      	str	r1, [r7, #8]
   1037c:	607a      	str	r2, [r7, #4]
   1037e:	603b      	str	r3, [r7, #0]
   10380:	230f      	movs	r3, #15
   10382:	18fb      	adds	r3, r7, r3
   10384:	1c02      	adds	r2, r0, #0
   10386:	701a      	strb	r2, [r3, #0]
	uint8 bc[9];
	uint8 len = 5;
   10388:	231f      	movs	r3, #31
   1038a:	18fb      	adds	r3, r7, r3
   1038c:	2205      	movs	r2, #5
   1038e:	701a      	strb	r2, [r3, #0]
	sint8 result = N_OK;
   10390:	231e      	movs	r3, #30
   10392:	18fb      	adds	r3, r7, r3
   10394:	2201      	movs	r2, #1
   10396:	701a      	strb	r2, [r3, #0]

	bc[0] = cmd;
   10398:	2314      	movs	r3, #20
   1039a:	18fb      	adds	r3, r7, r3
   1039c:	220f      	movs	r2, #15
   1039e:	18ba      	adds	r2, r7, r2
   103a0:	7812      	ldrb	r2, [r2, #0]
   103a2:	701a      	strb	r2, [r3, #0]
	switch (cmd) {
   103a4:	230f      	movs	r3, #15
   103a6:	18fb      	adds	r3, r7, r3
   103a8:	781b      	ldrb	r3, [r3, #0]
   103aa:	3bc1      	subs	r3, #193	; 0xc1
   103ac:	2b0e      	cmp	r3, #14
   103ae:	d900      	bls.n	103b2 <spi_cmd+0x3e>
   103b0:	e11b      	b.n	105ea <spi_cmd+0x276>
   103b2:	009a      	lsls	r2, r3, #2
   103b4:	4bb6      	ldr	r3, [pc, #728]	; (10690 <spi_cmd+0x31c>)
   103b6:	18d3      	adds	r3, r2, r3
   103b8:	681b      	ldr	r3, [r3, #0]
   103ba:	469f      	mov	pc, r3
	case CMD_SINGLE_READ:				/* single word (4 bytes) read */
		bc[1] = (uint8)(adr >> 16);
   103bc:	68bb      	ldr	r3, [r7, #8]
   103be:	0c1b      	lsrs	r3, r3, #16
   103c0:	b2da      	uxtb	r2, r3
   103c2:	2314      	movs	r3, #20
   103c4:	18fb      	adds	r3, r7, r3
   103c6:	705a      	strb	r2, [r3, #1]
		bc[2] = (uint8)(adr >> 8);
   103c8:	68bb      	ldr	r3, [r7, #8]
   103ca:	0a1b      	lsrs	r3, r3, #8
   103cc:	b2da      	uxtb	r2, r3
   103ce:	2314      	movs	r3, #20
   103d0:	18fb      	adds	r3, r7, r3
   103d2:	709a      	strb	r2, [r3, #2]
		bc[3] = (uint8)adr;
   103d4:	68bb      	ldr	r3, [r7, #8]
   103d6:	b2da      	uxtb	r2, r3
   103d8:	2314      	movs	r3, #20
   103da:	18fb      	adds	r3, r7, r3
   103dc:	70da      	strb	r2, [r3, #3]
		len = 5;
   103de:	231f      	movs	r3, #31
   103e0:	18fb      	adds	r3, r7, r3
   103e2:	2205      	movs	r2, #5
   103e4:	701a      	strb	r2, [r3, #0]
		break;
   103e6:	e105      	b.n	105f4 <spi_cmd+0x280>
	case CMD_INTERNAL_READ:			/* internal register read */
		bc[1] = (uint8)(adr >> 8);
   103e8:	68bb      	ldr	r3, [r7, #8]
   103ea:	0a1b      	lsrs	r3, r3, #8
   103ec:	b2da      	uxtb	r2, r3
   103ee:	2314      	movs	r3, #20
   103f0:	18fb      	adds	r3, r7, r3
   103f2:	705a      	strb	r2, [r3, #1]
		if(clockless)  bc[1] |= (1 << 7);
   103f4:	2330      	movs	r3, #48	; 0x30
   103f6:	18fb      	adds	r3, r7, r3
   103f8:	781b      	ldrb	r3, [r3, #0]
   103fa:	2b00      	cmp	r3, #0
   103fc:	d009      	beq.n	10412 <spi_cmd+0x9e>
   103fe:	2314      	movs	r3, #20
   10400:	18fb      	adds	r3, r7, r3
   10402:	785b      	ldrb	r3, [r3, #1]
   10404:	2280      	movs	r2, #128	; 0x80
   10406:	4252      	negs	r2, r2
   10408:	4313      	orrs	r3, r2
   1040a:	b2da      	uxtb	r2, r3
   1040c:	2314      	movs	r3, #20
   1040e:	18fb      	adds	r3, r7, r3
   10410:	705a      	strb	r2, [r3, #1]
		bc[2] = (uint8)adr;
   10412:	68bb      	ldr	r3, [r7, #8]
   10414:	b2da      	uxtb	r2, r3
   10416:	2314      	movs	r3, #20
   10418:	18fb      	adds	r3, r7, r3
   1041a:	709a      	strb	r2, [r3, #2]
		bc[3] = 0x00;
   1041c:	2314      	movs	r3, #20
   1041e:	18fb      	adds	r3, r7, r3
   10420:	2200      	movs	r2, #0
   10422:	70da      	strb	r2, [r3, #3]
		len = 5;
   10424:	231f      	movs	r3, #31
   10426:	18fb      	adds	r3, r7, r3
   10428:	2205      	movs	r2, #5
   1042a:	701a      	strb	r2, [r3, #0]
		break;
   1042c:	e0e2      	b.n	105f4 <spi_cmd+0x280>
	case CMD_TERMINATE:					/* termination */
		bc[1] = 0x00;
   1042e:	2314      	movs	r3, #20
   10430:	18fb      	adds	r3, r7, r3
   10432:	2200      	movs	r2, #0
   10434:	705a      	strb	r2, [r3, #1]
		bc[2] = 0x00;
   10436:	2314      	movs	r3, #20
   10438:	18fb      	adds	r3, r7, r3
   1043a:	2200      	movs	r2, #0
   1043c:	709a      	strb	r2, [r3, #2]
		bc[3] = 0x00;
   1043e:	2314      	movs	r3, #20
   10440:	18fb      	adds	r3, r7, r3
   10442:	2200      	movs	r2, #0
   10444:	70da      	strb	r2, [r3, #3]
		len = 5;
   10446:	231f      	movs	r3, #31
   10448:	18fb      	adds	r3, r7, r3
   1044a:	2205      	movs	r2, #5
   1044c:	701a      	strb	r2, [r3, #0]
		break;
   1044e:	e0d1      	b.n	105f4 <spi_cmd+0x280>
	case CMD_REPEAT:						/* repeat */
		bc[1] = 0x00;
   10450:	2314      	movs	r3, #20
   10452:	18fb      	adds	r3, r7, r3
   10454:	2200      	movs	r2, #0
   10456:	705a      	strb	r2, [r3, #1]
		bc[2] = 0x00;
   10458:	2314      	movs	r3, #20
   1045a:	18fb      	adds	r3, r7, r3
   1045c:	2200      	movs	r2, #0
   1045e:	709a      	strb	r2, [r3, #2]
		bc[3] = 0x00;
   10460:	2314      	movs	r3, #20
   10462:	18fb      	adds	r3, r7, r3
   10464:	2200      	movs	r2, #0
   10466:	70da      	strb	r2, [r3, #3]
		len = 5;
   10468:	231f      	movs	r3, #31
   1046a:	18fb      	adds	r3, r7, r3
   1046c:	2205      	movs	r2, #5
   1046e:	701a      	strb	r2, [r3, #0]
		break;
   10470:	e0c0      	b.n	105f4 <spi_cmd+0x280>
	case CMD_RESET:							/* reset */
		bc[1] = 0xff;
   10472:	2314      	movs	r3, #20
   10474:	18fb      	adds	r3, r7, r3
   10476:	22ff      	movs	r2, #255	; 0xff
   10478:	705a      	strb	r2, [r3, #1]
		bc[2] = 0xff;
   1047a:	2314      	movs	r3, #20
   1047c:	18fb      	adds	r3, r7, r3
   1047e:	22ff      	movs	r2, #255	; 0xff
   10480:	709a      	strb	r2, [r3, #2]
		bc[3] = 0xff;
   10482:	2314      	movs	r3, #20
   10484:	18fb      	adds	r3, r7, r3
   10486:	22ff      	movs	r2, #255	; 0xff
   10488:	70da      	strb	r2, [r3, #3]
		len = 5;
   1048a:	231f      	movs	r3, #31
   1048c:	18fb      	adds	r3, r7, r3
   1048e:	2205      	movs	r2, #5
   10490:	701a      	strb	r2, [r3, #0]
		break;
   10492:	e0af      	b.n	105f4 <spi_cmd+0x280>
	case CMD_DMA_WRITE:					/* dma write */
	case CMD_DMA_READ:					/* dma read */
		bc[1] = (uint8)(adr >> 16);
   10494:	68bb      	ldr	r3, [r7, #8]
   10496:	0c1b      	lsrs	r3, r3, #16
   10498:	b2da      	uxtb	r2, r3
   1049a:	2314      	movs	r3, #20
   1049c:	18fb      	adds	r3, r7, r3
   1049e:	705a      	strb	r2, [r3, #1]
		bc[2] = (uint8)(adr >> 8);
   104a0:	68bb      	ldr	r3, [r7, #8]
   104a2:	0a1b      	lsrs	r3, r3, #8
   104a4:	b2da      	uxtb	r2, r3
   104a6:	2314      	movs	r3, #20
   104a8:	18fb      	adds	r3, r7, r3
   104aa:	709a      	strb	r2, [r3, #2]
		bc[3] = (uint8)adr;
   104ac:	68bb      	ldr	r3, [r7, #8]
   104ae:	b2da      	uxtb	r2, r3
   104b0:	2314      	movs	r3, #20
   104b2:	18fb      	adds	r3, r7, r3
   104b4:	70da      	strb	r2, [r3, #3]
		bc[4] = (uint8)(sz >> 8);
   104b6:	683b      	ldr	r3, [r7, #0]
   104b8:	0a1b      	lsrs	r3, r3, #8
   104ba:	b2da      	uxtb	r2, r3
   104bc:	2314      	movs	r3, #20
   104be:	18fb      	adds	r3, r7, r3
   104c0:	711a      	strb	r2, [r3, #4]
		bc[5] = (uint8)(sz);
   104c2:	683b      	ldr	r3, [r7, #0]
   104c4:	b2da      	uxtb	r2, r3
   104c6:	2314      	movs	r3, #20
   104c8:	18fb      	adds	r3, r7, r3
   104ca:	715a      	strb	r2, [r3, #5]
		len = 7;
   104cc:	231f      	movs	r3, #31
   104ce:	18fb      	adds	r3, r7, r3
   104d0:	2207      	movs	r2, #7
   104d2:	701a      	strb	r2, [r3, #0]
		break;
   104d4:	e08e      	b.n	105f4 <spi_cmd+0x280>
	case CMD_DMA_EXT_WRITE:		/* dma extended write */
	case CMD_DMA_EXT_READ:			/* dma extended read */
		bc[1] = (uint8)(adr >> 16);
   104d6:	68bb      	ldr	r3, [r7, #8]
   104d8:	0c1b      	lsrs	r3, r3, #16
   104da:	b2da      	uxtb	r2, r3
   104dc:	2314      	movs	r3, #20
   104de:	18fb      	adds	r3, r7, r3
   104e0:	705a      	strb	r2, [r3, #1]
		bc[2] = (uint8)(adr >> 8);
   104e2:	68bb      	ldr	r3, [r7, #8]
   104e4:	0a1b      	lsrs	r3, r3, #8
   104e6:	b2da      	uxtb	r2, r3
   104e8:	2314      	movs	r3, #20
   104ea:	18fb      	adds	r3, r7, r3
   104ec:	709a      	strb	r2, [r3, #2]
		bc[3] = (uint8)adr;
   104ee:	68bb      	ldr	r3, [r7, #8]
   104f0:	b2da      	uxtb	r2, r3
   104f2:	2314      	movs	r3, #20
   104f4:	18fb      	adds	r3, r7, r3
   104f6:	70da      	strb	r2, [r3, #3]
		bc[4] = (uint8)(sz >> 16);
   104f8:	683b      	ldr	r3, [r7, #0]
   104fa:	0c1b      	lsrs	r3, r3, #16
   104fc:	b2da      	uxtb	r2, r3
   104fe:	2314      	movs	r3, #20
   10500:	18fb      	adds	r3, r7, r3
   10502:	711a      	strb	r2, [r3, #4]
		bc[5] = (uint8)(sz >> 8);
   10504:	683b      	ldr	r3, [r7, #0]
   10506:	0a1b      	lsrs	r3, r3, #8
   10508:	b2da      	uxtb	r2, r3
   1050a:	2314      	movs	r3, #20
   1050c:	18fb      	adds	r3, r7, r3
   1050e:	715a      	strb	r2, [r3, #5]
		bc[6] = (uint8)(sz);
   10510:	683b      	ldr	r3, [r7, #0]
   10512:	b2da      	uxtb	r2, r3
   10514:	2314      	movs	r3, #20
   10516:	18fb      	adds	r3, r7, r3
   10518:	719a      	strb	r2, [r3, #6]
		len = 8;
   1051a:	231f      	movs	r3, #31
   1051c:	18fb      	adds	r3, r7, r3
   1051e:	2208      	movs	r2, #8
   10520:	701a      	strb	r2, [r3, #0]
		break;
   10522:	e067      	b.n	105f4 <spi_cmd+0x280>
	case CMD_INTERNAL_WRITE:		/* internal register write */
		bc[1] = (uint8)(adr >> 8);
   10524:	68bb      	ldr	r3, [r7, #8]
   10526:	0a1b      	lsrs	r3, r3, #8
   10528:	b2da      	uxtb	r2, r3
   1052a:	2314      	movs	r3, #20
   1052c:	18fb      	adds	r3, r7, r3
   1052e:	705a      	strb	r2, [r3, #1]
		if(clockless)  bc[1] |= (1 << 7);
   10530:	2330      	movs	r3, #48	; 0x30
   10532:	18fb      	adds	r3, r7, r3
   10534:	781b      	ldrb	r3, [r3, #0]
   10536:	2b00      	cmp	r3, #0
   10538:	d009      	beq.n	1054e <spi_cmd+0x1da>
   1053a:	2314      	movs	r3, #20
   1053c:	18fb      	adds	r3, r7, r3
   1053e:	785b      	ldrb	r3, [r3, #1]
   10540:	2280      	movs	r2, #128	; 0x80
   10542:	4252      	negs	r2, r2
   10544:	4313      	orrs	r3, r2
   10546:	b2da      	uxtb	r2, r3
   10548:	2314      	movs	r3, #20
   1054a:	18fb      	adds	r3, r7, r3
   1054c:	705a      	strb	r2, [r3, #1]
		bc[2] = (uint8)(adr);
   1054e:	68bb      	ldr	r3, [r7, #8]
   10550:	b2da      	uxtb	r2, r3
   10552:	2314      	movs	r3, #20
   10554:	18fb      	adds	r3, r7, r3
   10556:	709a      	strb	r2, [r3, #2]
		bc[3] = (uint8)(u32data >> 24);
   10558:	687b      	ldr	r3, [r7, #4]
   1055a:	0e1b      	lsrs	r3, r3, #24
   1055c:	b2da      	uxtb	r2, r3
   1055e:	2314      	movs	r3, #20
   10560:	18fb      	adds	r3, r7, r3
   10562:	70da      	strb	r2, [r3, #3]
		bc[4] = (uint8)(u32data >> 16);
   10564:	687b      	ldr	r3, [r7, #4]
   10566:	0c1b      	lsrs	r3, r3, #16
   10568:	b2da      	uxtb	r2, r3
   1056a:	2314      	movs	r3, #20
   1056c:	18fb      	adds	r3, r7, r3
   1056e:	711a      	strb	r2, [r3, #4]
		bc[5] = (uint8)(u32data >> 8);
   10570:	687b      	ldr	r3, [r7, #4]
   10572:	0a1b      	lsrs	r3, r3, #8
   10574:	b2da      	uxtb	r2, r3
   10576:	2314      	movs	r3, #20
   10578:	18fb      	adds	r3, r7, r3
   1057a:	715a      	strb	r2, [r3, #5]
		bc[6] = (uint8)(u32data);
   1057c:	687b      	ldr	r3, [r7, #4]
   1057e:	b2da      	uxtb	r2, r3
   10580:	2314      	movs	r3, #20
   10582:	18fb      	adds	r3, r7, r3
   10584:	719a      	strb	r2, [r3, #6]
		len = 8;
   10586:	231f      	movs	r3, #31
   10588:	18fb      	adds	r3, r7, r3
   1058a:	2208      	movs	r2, #8
   1058c:	701a      	strb	r2, [r3, #0]
		break;
   1058e:	e031      	b.n	105f4 <spi_cmd+0x280>
	case CMD_SINGLE_WRITE:			/* single word write */
		bc[1] = (uint8)(adr >> 16);
   10590:	68bb      	ldr	r3, [r7, #8]
   10592:	0c1b      	lsrs	r3, r3, #16
   10594:	b2da      	uxtb	r2, r3
   10596:	2314      	movs	r3, #20
   10598:	18fb      	adds	r3, r7, r3
   1059a:	705a      	strb	r2, [r3, #1]
		bc[2] = (uint8)(adr >> 8);
   1059c:	68bb      	ldr	r3, [r7, #8]
   1059e:	0a1b      	lsrs	r3, r3, #8
   105a0:	b2da      	uxtb	r2, r3
   105a2:	2314      	movs	r3, #20
   105a4:	18fb      	adds	r3, r7, r3
   105a6:	709a      	strb	r2, [r3, #2]
		bc[3] = (uint8)(adr);
   105a8:	68bb      	ldr	r3, [r7, #8]
   105aa:	b2da      	uxtb	r2, r3
   105ac:	2314      	movs	r3, #20
   105ae:	18fb      	adds	r3, r7, r3
   105b0:	70da      	strb	r2, [r3, #3]
		bc[4] = (uint8)(u32data >> 24);
   105b2:	687b      	ldr	r3, [r7, #4]
   105b4:	0e1b      	lsrs	r3, r3, #24
   105b6:	b2da      	uxtb	r2, r3
   105b8:	2314      	movs	r3, #20
   105ba:	18fb      	adds	r3, r7, r3
   105bc:	711a      	strb	r2, [r3, #4]
		bc[5] = (uint8)(u32data >> 16);
   105be:	687b      	ldr	r3, [r7, #4]
   105c0:	0c1b      	lsrs	r3, r3, #16
   105c2:	b2da      	uxtb	r2, r3
   105c4:	2314      	movs	r3, #20
   105c6:	18fb      	adds	r3, r7, r3
   105c8:	715a      	strb	r2, [r3, #5]
		bc[6] = (uint8)(u32data >> 8);
   105ca:	687b      	ldr	r3, [r7, #4]
   105cc:	0a1b      	lsrs	r3, r3, #8
   105ce:	b2da      	uxtb	r2, r3
   105d0:	2314      	movs	r3, #20
   105d2:	18fb      	adds	r3, r7, r3
   105d4:	719a      	strb	r2, [r3, #6]
		bc[7] = (uint8)(u32data);
   105d6:	687b      	ldr	r3, [r7, #4]
   105d8:	b2da      	uxtb	r2, r3
   105da:	2314      	movs	r3, #20
   105dc:	18fb      	adds	r3, r7, r3
   105de:	71da      	strb	r2, [r3, #7]
		len = 9;
   105e0:	231f      	movs	r3, #31
   105e2:	18fb      	adds	r3, r7, r3
   105e4:	2209      	movs	r2, #9
   105e6:	701a      	strb	r2, [r3, #0]
		break;
   105e8:	e004      	b.n	105f4 <spi_cmd+0x280>
	default:
		result = N_FAIL;
   105ea:	231e      	movs	r3, #30
   105ec:	18fb      	adds	r3, r7, r3
   105ee:	2200      	movs	r2, #0
   105f0:	701a      	strb	r2, [r3, #0]
		break;
   105f2:	46c0      	nop			; (mov r8, r8)
	}

	if (result) {
   105f4:	231e      	movs	r3, #30
   105f6:	18fb      	adds	r3, r7, r3
   105f8:	781b      	ldrb	r3, [r3, #0]
   105fa:	b25b      	sxtb	r3, r3
   105fc:	2b00      	cmp	r3, #0
   105fe:	d03f      	beq.n	10680 <spi_cmd+0x30c>
		if (!gu8Crc_off)
   10600:	4b24      	ldr	r3, [pc, #144]	; (10694 <spi_cmd+0x320>)
   10602:	781b      	ldrb	r3, [r3, #0]
   10604:	2b00      	cmp	r3, #0
   10606:	d115      	bne.n	10634 <spi_cmd+0x2c0>
			bc[len-1] = (crc7(0x7f, (const uint8 *)&bc[0], len-1)) << 1;
   10608:	231f      	movs	r3, #31
   1060a:	18fb      	adds	r3, r7, r3
   1060c:	781b      	ldrb	r3, [r3, #0]
   1060e:	1e5c      	subs	r4, r3, #1
   10610:	231f      	movs	r3, #31
   10612:	18fb      	adds	r3, r7, r3
   10614:	781b      	ldrb	r3, [r3, #0]
   10616:	3b01      	subs	r3, #1
   10618:	001a      	movs	r2, r3
   1061a:	2314      	movs	r3, #20
   1061c:	18fb      	adds	r3, r7, r3
   1061e:	0019      	movs	r1, r3
   10620:	207f      	movs	r0, #127	; 0x7f
   10622:	4b1d      	ldr	r3, [pc, #116]	; (10698 <spi_cmd+0x324>)
   10624:	4798      	blx	r3
   10626:	0003      	movs	r3, r0
   10628:	18db      	adds	r3, r3, r3
   1062a:	b2da      	uxtb	r2, r3
   1062c:	2314      	movs	r3, #20
   1062e:	18fb      	adds	r3, r7, r3
   10630:	551a      	strb	r2, [r3, r4]
   10632:	e006      	b.n	10642 <spi_cmd+0x2ce>
		else
			len-=1;
   10634:	231f      	movs	r3, #31
   10636:	18fb      	adds	r3, r7, r3
   10638:	221f      	movs	r2, #31
   1063a:	18ba      	adds	r2, r7, r2
   1063c:	7812      	ldrb	r2, [r2, #0]
   1063e:	3a01      	subs	r2, #1
   10640:	701a      	strb	r2, [r3, #0]

		if (M2M_SUCCESS != nmi_spi_write(bc, len)) {
   10642:	231f      	movs	r3, #31
   10644:	18fb      	adds	r3, r7, r3
   10646:	781b      	ldrb	r3, [r3, #0]
   10648:	b29a      	uxth	r2, r3
   1064a:	2314      	movs	r3, #20
   1064c:	18fb      	adds	r3, r7, r3
   1064e:	0011      	movs	r1, r2
   10650:	0018      	movs	r0, r3
   10652:	4b12      	ldr	r3, [pc, #72]	; (1069c <spi_cmd+0x328>)
   10654:	4798      	blx	r3
   10656:	1e03      	subs	r3, r0, #0
   10658:	d012      	beq.n	10680 <spi_cmd+0x30c>
			M2M_ERR("[nmi spi]: Failed cmd write, bus error...\n");
   1065a:	2390      	movs	r3, #144	; 0x90
   1065c:	005a      	lsls	r2, r3, #1
   1065e:	4910      	ldr	r1, [pc, #64]	; (106a0 <spi_cmd+0x32c>)
   10660:	4b10      	ldr	r3, [pc, #64]	; (106a4 <spi_cmd+0x330>)
   10662:	0018      	movs	r0, r3
   10664:	4b10      	ldr	r3, [pc, #64]	; (106a8 <spi_cmd+0x334>)
   10666:	4798      	blx	r3
   10668:	4b10      	ldr	r3, [pc, #64]	; (106ac <spi_cmd+0x338>)
   1066a:	0018      	movs	r0, r3
   1066c:	4b0e      	ldr	r3, [pc, #56]	; (106a8 <spi_cmd+0x334>)
   1066e:	4798      	blx	r3
   10670:	4b0f      	ldr	r3, [pc, #60]	; (106b0 <spi_cmd+0x33c>)
   10672:	0018      	movs	r0, r3
   10674:	4b0c      	ldr	r3, [pc, #48]	; (106a8 <spi_cmd+0x334>)
   10676:	4798      	blx	r3
			result = N_FAIL;
   10678:	231e      	movs	r3, #30
   1067a:	18fb      	adds	r3, r7, r3
   1067c:	2200      	movs	r2, #0
   1067e:	701a      	strb	r2, [r3, #0]
		}
	}

	return result;
   10680:	231e      	movs	r3, #30
   10682:	18fb      	adds	r3, r7, r3
   10684:	781b      	ldrb	r3, [r3, #0]
   10686:	b25b      	sxtb	r3, r3
}
   10688:	0018      	movs	r0, r3
   1068a:	46bd      	mov	sp, r7
   1068c:	b009      	add	sp, #36	; 0x24
   1068e:	bd90      	pop	{r4, r7, pc}
   10690:	00025df0 	.word	0x00025df0
   10694:	20003d2c 	.word	0x20003d2c
   10698:	00010325 	.word	0x00010325
   1069c:	0001026d 	.word	0x0001026d
   106a0:	00025e68 	.word	0x00025e68
   106a4:	00025878 	.word	0x00025878
   106a8:	0000addd 	.word	0x0000addd
   106ac:	0002588c 	.word	0x0002588c
   106b0:	000258b8 	.word	0x000258b8

000106b4 <spi_data_rsp>:

static sint8 spi_data_rsp(uint8 cmd)
{
   106b4:	b590      	push	{r4, r7, lr}
   106b6:	b085      	sub	sp, #20
   106b8:	af00      	add	r7, sp, #0
   106ba:	0002      	movs	r2, r0
   106bc:	1dfb      	adds	r3, r7, #7
   106be:	701a      	strb	r2, [r3, #0]
	uint8 len;
	uint8 rsp[3];
	sint8 result = N_OK;
   106c0:	230e      	movs	r3, #14
   106c2:	18fb      	adds	r3, r7, r3
   106c4:	2201      	movs	r2, #1
   106c6:	701a      	strb	r2, [r3, #0]

    if (!gu8Crc_off)
   106c8:	4b32      	ldr	r3, [pc, #200]	; (10794 <spi_data_rsp+0xe0>)
   106ca:	781b      	ldrb	r3, [r3, #0]
   106cc:	2b00      	cmp	r3, #0
   106ce:	d104      	bne.n	106da <spi_data_rsp+0x26>
		len = 2;
   106d0:	230f      	movs	r3, #15
   106d2:	18fb      	adds	r3, r7, r3
   106d4:	2202      	movs	r2, #2
   106d6:	701a      	strb	r2, [r3, #0]
   106d8:	e003      	b.n	106e2 <spi_data_rsp+0x2e>
	else
		len = 3;
   106da:	230f      	movs	r3, #15
   106dc:	18fb      	adds	r3, r7, r3
   106de:	2203      	movs	r2, #3
   106e0:	701a      	strb	r2, [r3, #0]

	if (M2M_SUCCESS != nmi_spi_read(&rsp[0], len)) {
   106e2:	230f      	movs	r3, #15
   106e4:	18fb      	adds	r3, r7, r3
   106e6:	781b      	ldrb	r3, [r3, #0]
   106e8:	b29a      	uxth	r2, r3
   106ea:	2308      	movs	r3, #8
   106ec:	18fb      	adds	r3, r7, r3
   106ee:	0011      	movs	r1, r2
   106f0:	0018      	movs	r0, r3
   106f2:	4b29      	ldr	r3, [pc, #164]	; (10798 <spi_data_rsp+0xe4>)
   106f4:	4798      	blx	r3
   106f6:	1e03      	subs	r3, r0, #0
   106f8:	d013      	beq.n	10722 <spi_data_rsp+0x6e>
		M2M_ERR("[nmi spi]: Failed bus error...\n");
   106fa:	239a      	movs	r3, #154	; 0x9a
   106fc:	005a      	lsls	r2, r3, #1
   106fe:	4927      	ldr	r1, [pc, #156]	; (1079c <spi_data_rsp+0xe8>)
   10700:	4b27      	ldr	r3, [pc, #156]	; (107a0 <spi_data_rsp+0xec>)
   10702:	0018      	movs	r0, r3
   10704:	4b27      	ldr	r3, [pc, #156]	; (107a4 <spi_data_rsp+0xf0>)
   10706:	4798      	blx	r3
   10708:	4b27      	ldr	r3, [pc, #156]	; (107a8 <spi_data_rsp+0xf4>)
   1070a:	0018      	movs	r0, r3
   1070c:	4b25      	ldr	r3, [pc, #148]	; (107a4 <spi_data_rsp+0xf0>)
   1070e:	4798      	blx	r3
   10710:	4b26      	ldr	r3, [pc, #152]	; (107ac <spi_data_rsp+0xf8>)
   10712:	0018      	movs	r0, r3
   10714:	4b23      	ldr	r3, [pc, #140]	; (107a4 <spi_data_rsp+0xf0>)
   10716:	4798      	blx	r3
		result = N_FAIL;
   10718:	230e      	movs	r3, #14
   1071a:	18fb      	adds	r3, r7, r3
   1071c:	2200      	movs	r2, #0
   1071e:	701a      	strb	r2, [r3, #0]
		goto _fail_;
   10720:	e030      	b.n	10784 <spi_data_rsp+0xd0>
	}
		
	if((rsp[len-1] != 0)||(rsp[len-2] != 0xC3))
   10722:	230f      	movs	r3, #15
   10724:	18fb      	adds	r3, r7, r3
   10726:	781b      	ldrb	r3, [r3, #0]
   10728:	3b01      	subs	r3, #1
   1072a:	2208      	movs	r2, #8
   1072c:	18ba      	adds	r2, r7, r2
   1072e:	5cd3      	ldrb	r3, [r2, r3]
   10730:	2b00      	cmp	r3, #0
   10732:	d108      	bne.n	10746 <spi_data_rsp+0x92>
   10734:	230f      	movs	r3, #15
   10736:	18fb      	adds	r3, r7, r3
   10738:	781b      	ldrb	r3, [r3, #0]
   1073a:	3b02      	subs	r3, #2
   1073c:	2208      	movs	r2, #8
   1073e:	18ba      	adds	r2, r7, r2
   10740:	5cd3      	ldrb	r3, [r2, r3]
   10742:	2bc3      	cmp	r3, #195	; 0xc3
   10744:	d01e      	beq.n	10784 <spi_data_rsp+0xd0>
	{
		M2M_ERR("[nmi spi]: Failed data response read, %x %x %x\n",rsp[0],rsp[1],rsp[2]);
   10746:	233c      	movs	r3, #60	; 0x3c
   10748:	33ff      	adds	r3, #255	; 0xff
   1074a:	001a      	movs	r2, r3
   1074c:	4913      	ldr	r1, [pc, #76]	; (1079c <spi_data_rsp+0xe8>)
   1074e:	4b14      	ldr	r3, [pc, #80]	; (107a0 <spi_data_rsp+0xec>)
   10750:	0018      	movs	r0, r3
   10752:	4b14      	ldr	r3, [pc, #80]	; (107a4 <spi_data_rsp+0xf0>)
   10754:	4798      	blx	r3
   10756:	2308      	movs	r3, #8
   10758:	18fb      	adds	r3, r7, r3
   1075a:	781b      	ldrb	r3, [r3, #0]
   1075c:	0019      	movs	r1, r3
   1075e:	2308      	movs	r3, #8
   10760:	18fb      	adds	r3, r7, r3
   10762:	785b      	ldrb	r3, [r3, #1]
   10764:	001a      	movs	r2, r3
   10766:	2308      	movs	r3, #8
   10768:	18fb      	adds	r3, r7, r3
   1076a:	789b      	ldrb	r3, [r3, #2]
   1076c:	4810      	ldr	r0, [pc, #64]	; (107b0 <spi_data_rsp+0xfc>)
   1076e:	4c0d      	ldr	r4, [pc, #52]	; (107a4 <spi_data_rsp+0xf0>)
   10770:	47a0      	blx	r4
   10772:	4b0e      	ldr	r3, [pc, #56]	; (107ac <spi_data_rsp+0xf8>)
   10774:	0018      	movs	r0, r3
   10776:	4b0b      	ldr	r3, [pc, #44]	; (107a4 <spi_data_rsp+0xf0>)
   10778:	4798      	blx	r3
		result = N_FAIL;
   1077a:	230e      	movs	r3, #14
   1077c:	18fb      	adds	r3, r7, r3
   1077e:	2200      	movs	r2, #0
   10780:	701a      	strb	r2, [r3, #0]
		goto _fail_;
   10782:	46c0      	nop			; (mov r8, r8)
	}
_fail_:

	return result;
   10784:	230e      	movs	r3, #14
   10786:	18fb      	adds	r3, r7, r3
   10788:	781b      	ldrb	r3, [r3, #0]
   1078a:	b25b      	sxtb	r3, r3
}
   1078c:	0018      	movs	r0, r3
   1078e:	46bd      	mov	sp, r7
   10790:	b005      	add	sp, #20
   10792:	bd90      	pop	{r4, r7, pc}
   10794:	20003d2c 	.word	0x20003d2c
   10798:	00010229 	.word	0x00010229
   1079c:	00025e70 	.word	0x00025e70
   107a0:	00025878 	.word	0x00025878
   107a4:	0000addd 	.word	0x0000addd
   107a8:	000258bc 	.word	0x000258bc
   107ac:	000258b8 	.word	0x000258b8
   107b0:	000258dc 	.word	0x000258dc

000107b4 <spi_cmd_rsp>:

static sint8 spi_cmd_rsp(uint8 cmd)
{
   107b4:	b580      	push	{r7, lr}
   107b6:	b084      	sub	sp, #16
   107b8:	af00      	add	r7, sp, #0
   107ba:	0002      	movs	r2, r0
   107bc:	1dfb      	adds	r3, r7, #7
   107be:	701a      	strb	r2, [r3, #0]
	uint8 rsp;
	sint8 result = N_OK;
   107c0:	230f      	movs	r3, #15
   107c2:	18fb      	adds	r3, r7, r3
   107c4:	2201      	movs	r2, #1
   107c6:	701a      	strb	r2, [r3, #0]
	sint8 s8RetryCnt;

	/**
		Command/Control response
	**/
	if ((cmd == CMD_RESET) ||
   107c8:	1dfb      	adds	r3, r7, #7
   107ca:	781b      	ldrb	r3, [r3, #0]
   107cc:	2bcf      	cmp	r3, #207	; 0xcf
   107ce:	d007      	beq.n	107e0 <spi_cmd_rsp+0x2c>
   107d0:	1dfb      	adds	r3, r7, #7
   107d2:	781b      	ldrb	r3, [r3, #0]
   107d4:	2bc5      	cmp	r3, #197	; 0xc5
   107d6:	d003      	beq.n	107e0 <spi_cmd_rsp+0x2c>
		 (cmd == CMD_TERMINATE) ||
   107d8:	1dfb      	adds	r3, r7, #7
   107da:	781b      	ldrb	r3, [r3, #0]
   107dc:	2bc6      	cmp	r3, #198	; 0xc6
   107de:	d10c      	bne.n	107fa <spi_cmd_rsp+0x46>
		 (cmd == CMD_REPEAT)) {
		if (M2M_SUCCESS != nmi_spi_read(&rsp, 1)) {
   107e0:	230d      	movs	r3, #13
   107e2:	18fb      	adds	r3, r7, r3
   107e4:	2101      	movs	r1, #1
   107e6:	0018      	movs	r0, r3
   107e8:	4b3b      	ldr	r3, [pc, #236]	; (108d8 <spi_cmd_rsp+0x124>)
   107ea:	4798      	blx	r3
   107ec:	1e03      	subs	r3, r0, #0
   107ee:	d004      	beq.n	107fa <spi_cmd_rsp+0x46>
			result = N_FAIL;
   107f0:	230f      	movs	r3, #15
   107f2:	18fb      	adds	r3, r7, r3
   107f4:	2200      	movs	r2, #0
   107f6:	701a      	strb	r2, [r3, #0]
			goto _fail_;
   107f8:	e065      	b.n	108c6 <spi_cmd_rsp+0x112>
		}
	}

	/* wait for response */
	s8RetryCnt = SPI_RESP_RETRY_COUNT;
   107fa:	230e      	movs	r3, #14
   107fc:	18fb      	adds	r3, r7, r3
   107fe:	220a      	movs	r2, #10
   10800:	701a      	strb	r2, [r3, #0]
	do
	{
		if (M2M_SUCCESS != nmi_spi_read(&rsp, 1)) {
   10802:	230d      	movs	r3, #13
   10804:	18fb      	adds	r3, r7, r3
   10806:	2101      	movs	r1, #1
   10808:	0018      	movs	r0, r3
   1080a:	4b33      	ldr	r3, [pc, #204]	; (108d8 <spi_cmd_rsp+0x124>)
   1080c:	4798      	blx	r3
   1080e:	1e03      	subs	r3, r0, #0
   10810:	d014      	beq.n	1083c <spi_cmd_rsp+0x88>
			M2M_ERR("[nmi spi]: Failed cmd response read, bus error...\n");
   10812:	235c      	movs	r3, #92	; 0x5c
   10814:	33ff      	adds	r3, #255	; 0xff
   10816:	001a      	movs	r2, r3
   10818:	4930      	ldr	r1, [pc, #192]	; (108dc <spi_cmd_rsp+0x128>)
   1081a:	4b31      	ldr	r3, [pc, #196]	; (108e0 <spi_cmd_rsp+0x12c>)
   1081c:	0018      	movs	r0, r3
   1081e:	4b31      	ldr	r3, [pc, #196]	; (108e4 <spi_cmd_rsp+0x130>)
   10820:	4798      	blx	r3
   10822:	4b31      	ldr	r3, [pc, #196]	; (108e8 <spi_cmd_rsp+0x134>)
   10824:	0018      	movs	r0, r3
   10826:	4b2f      	ldr	r3, [pc, #188]	; (108e4 <spi_cmd_rsp+0x130>)
   10828:	4798      	blx	r3
   1082a:	4b30      	ldr	r3, [pc, #192]	; (108ec <spi_cmd_rsp+0x138>)
   1082c:	0018      	movs	r0, r3
   1082e:	4b2d      	ldr	r3, [pc, #180]	; (108e4 <spi_cmd_rsp+0x130>)
   10830:	4798      	blx	r3
			result = N_FAIL;
   10832:	230f      	movs	r3, #15
   10834:	18fb      	adds	r3, r7, r3
   10836:	2200      	movs	r2, #0
   10838:	701a      	strb	r2, [r3, #0]
			goto _fail_;
   1083a:	e044      	b.n	108c6 <spi_cmd_rsp+0x112>
		}
	} while((rsp != cmd) && (s8RetryCnt-- >0));
   1083c:	230d      	movs	r3, #13
   1083e:	18fb      	adds	r3, r7, r3
   10840:	781b      	ldrb	r3, [r3, #0]
   10842:	1dfa      	adds	r2, r7, #7
   10844:	7812      	ldrb	r2, [r2, #0]
   10846:	429a      	cmp	r2, r3
   10848:	d00b      	beq.n	10862 <spi_cmd_rsp+0xae>
   1084a:	230e      	movs	r3, #14
   1084c:	18fb      	adds	r3, r7, r3
   1084e:	781b      	ldrb	r3, [r3, #0]
   10850:	b25b      	sxtb	r3, r3
   10852:	b2da      	uxtb	r2, r3
   10854:	3a01      	subs	r2, #1
   10856:	b2d1      	uxtb	r1, r2
   10858:	220e      	movs	r2, #14
   1085a:	18ba      	adds	r2, r7, r2
   1085c:	7011      	strb	r1, [r2, #0]
   1085e:	2b00      	cmp	r3, #0
   10860:	dccf      	bgt.n	10802 <spi_cmd_rsp+0x4e>

	/**
		State response
	**/
	/* wait for response */
	s8RetryCnt = SPI_RESP_RETRY_COUNT;
   10862:	230e      	movs	r3, #14
   10864:	18fb      	adds	r3, r7, r3
   10866:	220a      	movs	r2, #10
   10868:	701a      	strb	r2, [r3, #0]
	do
	{
		if (M2M_SUCCESS != nmi_spi_read(&rsp, 1)) {
   1086a:	230d      	movs	r3, #13
   1086c:	18fb      	adds	r3, r7, r3
   1086e:	2101      	movs	r1, #1
   10870:	0018      	movs	r0, r3
   10872:	4b19      	ldr	r3, [pc, #100]	; (108d8 <spi_cmd_rsp+0x124>)
   10874:	4798      	blx	r3
   10876:	1e03      	subs	r3, r0, #0
   10878:	d014      	beq.n	108a4 <spi_cmd_rsp+0xf0>
			M2M_ERR("[nmi spi]: Failed cmd response read, bus error...\n");
   1087a:	236a      	movs	r3, #106	; 0x6a
   1087c:	33ff      	adds	r3, #255	; 0xff
   1087e:	001a      	movs	r2, r3
   10880:	4916      	ldr	r1, [pc, #88]	; (108dc <spi_cmd_rsp+0x128>)
   10882:	4b17      	ldr	r3, [pc, #92]	; (108e0 <spi_cmd_rsp+0x12c>)
   10884:	0018      	movs	r0, r3
   10886:	4b17      	ldr	r3, [pc, #92]	; (108e4 <spi_cmd_rsp+0x130>)
   10888:	4798      	blx	r3
   1088a:	4b17      	ldr	r3, [pc, #92]	; (108e8 <spi_cmd_rsp+0x134>)
   1088c:	0018      	movs	r0, r3
   1088e:	4b15      	ldr	r3, [pc, #84]	; (108e4 <spi_cmd_rsp+0x130>)
   10890:	4798      	blx	r3
   10892:	4b16      	ldr	r3, [pc, #88]	; (108ec <spi_cmd_rsp+0x138>)
   10894:	0018      	movs	r0, r3
   10896:	4b13      	ldr	r3, [pc, #76]	; (108e4 <spi_cmd_rsp+0x130>)
   10898:	4798      	blx	r3
			result = N_FAIL;
   1089a:	230f      	movs	r3, #15
   1089c:	18fb      	adds	r3, r7, r3
   1089e:	2200      	movs	r2, #0
   108a0:	701a      	strb	r2, [r3, #0]
			goto _fail_;
   108a2:	e010      	b.n	108c6 <spi_cmd_rsp+0x112>
		}
	} while((rsp != 0x00) && (s8RetryCnt-- >0));
   108a4:	230d      	movs	r3, #13
   108a6:	18fb      	adds	r3, r7, r3
   108a8:	781b      	ldrb	r3, [r3, #0]
   108aa:	2b00      	cmp	r3, #0
   108ac:	d00b      	beq.n	108c6 <spi_cmd_rsp+0x112>
   108ae:	230e      	movs	r3, #14
   108b0:	18fb      	adds	r3, r7, r3
   108b2:	781b      	ldrb	r3, [r3, #0]
   108b4:	b25b      	sxtb	r3, r3
   108b6:	b2da      	uxtb	r2, r3
   108b8:	3a01      	subs	r2, #1
   108ba:	b2d1      	uxtb	r1, r2
   108bc:	220e      	movs	r2, #14
   108be:	18ba      	adds	r2, r7, r2
   108c0:	7011      	strb	r1, [r2, #0]
   108c2:	2b00      	cmp	r3, #0
   108c4:	dcd1      	bgt.n	1086a <spi_cmd_rsp+0xb6>

_fail_:

	return result;
   108c6:	230f      	movs	r3, #15
   108c8:	18fb      	adds	r3, r7, r3
   108ca:	781b      	ldrb	r3, [r3, #0]
   108cc:	b25b      	sxtb	r3, r3
}
   108ce:	0018      	movs	r0, r3
   108d0:	46bd      	mov	sp, r7
   108d2:	b004      	add	sp, #16
   108d4:	bd80      	pop	{r7, pc}
   108d6:	46c0      	nop			; (mov r8, r8)
   108d8:	00010229 	.word	0x00010229
   108dc:	00025e80 	.word	0x00025e80
   108e0:	00025878 	.word	0x00025878
   108e4:	0000addd 	.word	0x0000addd
   108e8:	0002590c 	.word	0x0002590c
   108ec:	000258b8 	.word	0x000258b8

000108f0 <spi_cmd_complete>:
#ifndef USE_OLD_SPI_SW
static int spi_cmd_complete(uint8_t cmd, uint32_t adr, uint8_t *b, uint32_t sz, uint8_t clockless)
{
   108f0:	b590      	push	{r4, r7, lr}
   108f2:	b09f      	sub	sp, #124	; 0x7c
   108f4:	af00      	add	r7, sp, #0
   108f6:	60b9      	str	r1, [r7, #8]
   108f8:	607a      	str	r2, [r7, #4]
   108fa:	603b      	str	r3, [r7, #0]
   108fc:	230f      	movs	r3, #15
   108fe:	18fb      	adds	r3, r7, r3
   10900:	1c02      	adds	r2, r0, #0
   10902:	701a      	strb	r2, [r3, #0]
	uint8_t wb[32], rb[32];
	uint8_t wix, rix;
	uint32_t len2;
	uint8_t rsp;
	int len = 0;
   10904:	2300      	movs	r3, #0
   10906:	66fb      	str	r3, [r7, #108]	; 0x6c
	int result = N_OK;
   10908:	2301      	movs	r3, #1
   1090a:	66bb      	str	r3, [r7, #104]	; 0x68

	wb[0] = cmd;
   1090c:	2338      	movs	r3, #56	; 0x38
   1090e:	18fb      	adds	r3, r7, r3
   10910:	220f      	movs	r2, #15
   10912:	18ba      	adds	r2, r7, r2
   10914:	7812      	ldrb	r2, [r2, #0]
   10916:	701a      	strb	r2, [r3, #0]
	switch (cmd) {
   10918:	230f      	movs	r3, #15
   1091a:	18fb      	adds	r3, r7, r3
   1091c:	781b      	ldrb	r3, [r3, #0]
   1091e:	3bc1      	subs	r3, #193	; 0xc1
   10920:	2b0e      	cmp	r3, #14
   10922:	d900      	bls.n	10926 <spi_cmd_complete+0x36>
   10924:	e103      	b.n	10b2e <spi_cmd_complete+0x23e>
   10926:	009a      	lsls	r2, r3, #2
   10928:	4bd1      	ldr	r3, [pc, #836]	; (10c70 <spi_cmd_complete+0x380>)
   1092a:	18d3      	adds	r3, r2, r3
   1092c:	681b      	ldr	r3, [r3, #0]
   1092e:	469f      	mov	pc, r3
	case CMD_SINGLE_READ:				/* single word (4 bytes) read */
		wb[1] = (uint8_t)(adr >> 16);
   10930:	68bb      	ldr	r3, [r7, #8]
   10932:	0c1b      	lsrs	r3, r3, #16
   10934:	b2da      	uxtb	r2, r3
   10936:	2338      	movs	r3, #56	; 0x38
   10938:	18fb      	adds	r3, r7, r3
   1093a:	705a      	strb	r2, [r3, #1]
		wb[2] = (uint8_t)(adr >> 8);
   1093c:	68bb      	ldr	r3, [r7, #8]
   1093e:	0a1b      	lsrs	r3, r3, #8
   10940:	b2da      	uxtb	r2, r3
   10942:	2338      	movs	r3, #56	; 0x38
   10944:	18fb      	adds	r3, r7, r3
   10946:	709a      	strb	r2, [r3, #2]
		wb[3] = (uint8_t)adr;
   10948:	68bb      	ldr	r3, [r7, #8]
   1094a:	b2da      	uxtb	r2, r3
   1094c:	2338      	movs	r3, #56	; 0x38
   1094e:	18fb      	adds	r3, r7, r3
   10950:	70da      	strb	r2, [r3, #3]
		len = 5;
   10952:	2305      	movs	r3, #5
   10954:	66fb      	str	r3, [r7, #108]	; 0x6c
		break; 
   10956:	e0ed      	b.n	10b34 <spi_cmd_complete+0x244>
	case CMD_INTERNAL_READ:			/* internal register read */ 
		wb[1] = (uint8_t)(adr >> 8);
   10958:	68bb      	ldr	r3, [r7, #8]
   1095a:	0a1b      	lsrs	r3, r3, #8
   1095c:	b2da      	uxtb	r2, r3
   1095e:	2338      	movs	r3, #56	; 0x38
   10960:	18fb      	adds	r3, r7, r3
   10962:	705a      	strb	r2, [r3, #1]
		if(clockless == 1)  wb[1] |= (1 << 7);
   10964:	2388      	movs	r3, #136	; 0x88
   10966:	18fb      	adds	r3, r7, r3
   10968:	781b      	ldrb	r3, [r3, #0]
   1096a:	2b01      	cmp	r3, #1
   1096c:	d109      	bne.n	10982 <spi_cmd_complete+0x92>
   1096e:	2338      	movs	r3, #56	; 0x38
   10970:	18fb      	adds	r3, r7, r3
   10972:	785b      	ldrb	r3, [r3, #1]
   10974:	2280      	movs	r2, #128	; 0x80
   10976:	4252      	negs	r2, r2
   10978:	4313      	orrs	r3, r2
   1097a:	b2da      	uxtb	r2, r3
   1097c:	2338      	movs	r3, #56	; 0x38
   1097e:	18fb      	adds	r3, r7, r3
   10980:	705a      	strb	r2, [r3, #1]
		wb[2] = (uint8_t)adr;
   10982:	68bb      	ldr	r3, [r7, #8]
   10984:	b2da      	uxtb	r2, r3
   10986:	2338      	movs	r3, #56	; 0x38
   10988:	18fb      	adds	r3, r7, r3
   1098a:	709a      	strb	r2, [r3, #2]
		wb[3] = 0x00;
   1098c:	2338      	movs	r3, #56	; 0x38
   1098e:	18fb      	adds	r3, r7, r3
   10990:	2200      	movs	r2, #0
   10992:	70da      	strb	r2, [r3, #3]
		len = 5;
   10994:	2305      	movs	r3, #5
   10996:	66fb      	str	r3, [r7, #108]	; 0x6c
		break;
   10998:	e0cc      	b.n	10b34 <spi_cmd_complete+0x244>
	case CMD_TERMINATE:					/* termination */
		wb[1] = 0x00;
   1099a:	2338      	movs	r3, #56	; 0x38
   1099c:	18fb      	adds	r3, r7, r3
   1099e:	2200      	movs	r2, #0
   109a0:	705a      	strb	r2, [r3, #1]
		wb[2] = 0x00;
   109a2:	2338      	movs	r3, #56	; 0x38
   109a4:	18fb      	adds	r3, r7, r3
   109a6:	2200      	movs	r2, #0
   109a8:	709a      	strb	r2, [r3, #2]
		wb[3] = 0x00;
   109aa:	2338      	movs	r3, #56	; 0x38
   109ac:	18fb      	adds	r3, r7, r3
   109ae:	2200      	movs	r2, #0
   109b0:	70da      	strb	r2, [r3, #3]
		len = 5;
   109b2:	2305      	movs	r3, #5
   109b4:	66fb      	str	r3, [r7, #108]	; 0x6c
		break;
   109b6:	e0bd      	b.n	10b34 <spi_cmd_complete+0x244>
	case CMD_REPEAT:						/* repeat */
		wb[1] = 0x00;
   109b8:	2338      	movs	r3, #56	; 0x38
   109ba:	18fb      	adds	r3, r7, r3
   109bc:	2200      	movs	r2, #0
   109be:	705a      	strb	r2, [r3, #1]
		wb[2] = 0x00;
   109c0:	2338      	movs	r3, #56	; 0x38
   109c2:	18fb      	adds	r3, r7, r3
   109c4:	2200      	movs	r2, #0
   109c6:	709a      	strb	r2, [r3, #2]
		wb[3] = 0x00;
   109c8:	2338      	movs	r3, #56	; 0x38
   109ca:	18fb      	adds	r3, r7, r3
   109cc:	2200      	movs	r2, #0
   109ce:	70da      	strb	r2, [r3, #3]
		len = 5;
   109d0:	2305      	movs	r3, #5
   109d2:	66fb      	str	r3, [r7, #108]	; 0x6c
		break;
   109d4:	e0ae      	b.n	10b34 <spi_cmd_complete+0x244>
	case CMD_RESET:							/* reset */
		wb[1] = 0xff;
   109d6:	2338      	movs	r3, #56	; 0x38
   109d8:	18fb      	adds	r3, r7, r3
   109da:	22ff      	movs	r2, #255	; 0xff
   109dc:	705a      	strb	r2, [r3, #1]
		wb[2] = 0xff;
   109de:	2338      	movs	r3, #56	; 0x38
   109e0:	18fb      	adds	r3, r7, r3
   109e2:	22ff      	movs	r2, #255	; 0xff
   109e4:	709a      	strb	r2, [r3, #2]
		wb[3] = 0xff;
   109e6:	2338      	movs	r3, #56	; 0x38
   109e8:	18fb      	adds	r3, r7, r3
   109ea:	22ff      	movs	r2, #255	; 0xff
   109ec:	70da      	strb	r2, [r3, #3]
		len = 5;
   109ee:	2305      	movs	r3, #5
   109f0:	66fb      	str	r3, [r7, #108]	; 0x6c
		break;
   109f2:	e09f      	b.n	10b34 <spi_cmd_complete+0x244>
	case CMD_DMA_WRITE:					/* dma write */
	case CMD_DMA_READ:					/* dma read */
		wb[1] = (uint8_t)(adr >> 16);
   109f4:	68bb      	ldr	r3, [r7, #8]
   109f6:	0c1b      	lsrs	r3, r3, #16
   109f8:	b2da      	uxtb	r2, r3
   109fa:	2338      	movs	r3, #56	; 0x38
   109fc:	18fb      	adds	r3, r7, r3
   109fe:	705a      	strb	r2, [r3, #1]
		wb[2] = (uint8_t)(adr >> 8);
   10a00:	68bb      	ldr	r3, [r7, #8]
   10a02:	0a1b      	lsrs	r3, r3, #8
   10a04:	b2da      	uxtb	r2, r3
   10a06:	2338      	movs	r3, #56	; 0x38
   10a08:	18fb      	adds	r3, r7, r3
   10a0a:	709a      	strb	r2, [r3, #2]
		wb[3] = (uint8_t)adr;
   10a0c:	68bb      	ldr	r3, [r7, #8]
   10a0e:	b2da      	uxtb	r2, r3
   10a10:	2338      	movs	r3, #56	; 0x38
   10a12:	18fb      	adds	r3, r7, r3
   10a14:	70da      	strb	r2, [r3, #3]
		wb[4] = (uint8_t)(sz >> 8);
   10a16:	683b      	ldr	r3, [r7, #0]
   10a18:	0a1b      	lsrs	r3, r3, #8
   10a1a:	b2da      	uxtb	r2, r3
   10a1c:	2338      	movs	r3, #56	; 0x38
   10a1e:	18fb      	adds	r3, r7, r3
   10a20:	711a      	strb	r2, [r3, #4]
		wb[5] = (uint8_t)(sz);
   10a22:	683b      	ldr	r3, [r7, #0]
   10a24:	b2da      	uxtb	r2, r3
   10a26:	2338      	movs	r3, #56	; 0x38
   10a28:	18fb      	adds	r3, r7, r3
   10a2a:	715a      	strb	r2, [r3, #5]
		len = 7;
   10a2c:	2307      	movs	r3, #7
   10a2e:	66fb      	str	r3, [r7, #108]	; 0x6c
		break;
   10a30:	e080      	b.n	10b34 <spi_cmd_complete+0x244>
	case CMD_DMA_EXT_WRITE:		/* dma extended write */
	case CMD_DMA_EXT_READ:			/* dma extended read */
		wb[1] = (uint8_t)(adr >> 16);
   10a32:	68bb      	ldr	r3, [r7, #8]
   10a34:	0c1b      	lsrs	r3, r3, #16
   10a36:	b2da      	uxtb	r2, r3
   10a38:	2338      	movs	r3, #56	; 0x38
   10a3a:	18fb      	adds	r3, r7, r3
   10a3c:	705a      	strb	r2, [r3, #1]
		wb[2] = (uint8_t)(adr >> 8);
   10a3e:	68bb      	ldr	r3, [r7, #8]
   10a40:	0a1b      	lsrs	r3, r3, #8
   10a42:	b2da      	uxtb	r2, r3
   10a44:	2338      	movs	r3, #56	; 0x38
   10a46:	18fb      	adds	r3, r7, r3
   10a48:	709a      	strb	r2, [r3, #2]
		wb[3] = (uint8_t)adr;
   10a4a:	68bb      	ldr	r3, [r7, #8]
   10a4c:	b2da      	uxtb	r2, r3
   10a4e:	2338      	movs	r3, #56	; 0x38
   10a50:	18fb      	adds	r3, r7, r3
   10a52:	70da      	strb	r2, [r3, #3]
		wb[4] = (uint8_t)(sz >> 16);
   10a54:	683b      	ldr	r3, [r7, #0]
   10a56:	0c1b      	lsrs	r3, r3, #16
   10a58:	b2da      	uxtb	r2, r3
   10a5a:	2338      	movs	r3, #56	; 0x38
   10a5c:	18fb      	adds	r3, r7, r3
   10a5e:	711a      	strb	r2, [r3, #4]
		wb[5] = (uint8_t)(sz >> 8);
   10a60:	683b      	ldr	r3, [r7, #0]
   10a62:	0a1b      	lsrs	r3, r3, #8
   10a64:	b2da      	uxtb	r2, r3
   10a66:	2338      	movs	r3, #56	; 0x38
   10a68:	18fb      	adds	r3, r7, r3
   10a6a:	715a      	strb	r2, [r3, #5]
		wb[6] = (uint8_t)(sz);
   10a6c:	683b      	ldr	r3, [r7, #0]
   10a6e:	b2da      	uxtb	r2, r3
   10a70:	2338      	movs	r3, #56	; 0x38
   10a72:	18fb      	adds	r3, r7, r3
   10a74:	719a      	strb	r2, [r3, #6]
		len = 8;
   10a76:	2308      	movs	r3, #8
   10a78:	66fb      	str	r3, [r7, #108]	; 0x6c
		break;
   10a7a:	e05b      	b.n	10b34 <spi_cmd_complete+0x244>
	case CMD_INTERNAL_WRITE:		/* internal register write */
		wb[1] = (uint8_t)(adr >> 8);
   10a7c:	68bb      	ldr	r3, [r7, #8]
   10a7e:	0a1b      	lsrs	r3, r3, #8
   10a80:	b2da      	uxtb	r2, r3
   10a82:	2338      	movs	r3, #56	; 0x38
   10a84:	18fb      	adds	r3, r7, r3
   10a86:	705a      	strb	r2, [r3, #1]
		if(clockless == 1)  wb[1] |= (1 << 7);
   10a88:	2388      	movs	r3, #136	; 0x88
   10a8a:	18fb      	adds	r3, r7, r3
   10a8c:	781b      	ldrb	r3, [r3, #0]
   10a8e:	2b01      	cmp	r3, #1
   10a90:	d109      	bne.n	10aa6 <spi_cmd_complete+0x1b6>
   10a92:	2338      	movs	r3, #56	; 0x38
   10a94:	18fb      	adds	r3, r7, r3
   10a96:	785b      	ldrb	r3, [r3, #1]
   10a98:	2280      	movs	r2, #128	; 0x80
   10a9a:	4252      	negs	r2, r2
   10a9c:	4313      	orrs	r3, r2
   10a9e:	b2da      	uxtb	r2, r3
   10aa0:	2338      	movs	r3, #56	; 0x38
   10aa2:	18fb      	adds	r3, r7, r3
   10aa4:	705a      	strb	r2, [r3, #1]
		wb[2] = (uint8_t)(adr);
   10aa6:	68bb      	ldr	r3, [r7, #8]
   10aa8:	b2da      	uxtb	r2, r3
   10aaa:	2338      	movs	r3, #56	; 0x38
   10aac:	18fb      	adds	r3, r7, r3
   10aae:	709a      	strb	r2, [r3, #2]
		wb[3] = b[3];
   10ab0:	687b      	ldr	r3, [r7, #4]
   10ab2:	78da      	ldrb	r2, [r3, #3]
   10ab4:	2338      	movs	r3, #56	; 0x38
   10ab6:	18fb      	adds	r3, r7, r3
   10ab8:	70da      	strb	r2, [r3, #3]
		wb[4] = b[2];
   10aba:	687b      	ldr	r3, [r7, #4]
   10abc:	789a      	ldrb	r2, [r3, #2]
   10abe:	2338      	movs	r3, #56	; 0x38
   10ac0:	18fb      	adds	r3, r7, r3
   10ac2:	711a      	strb	r2, [r3, #4]
		wb[5] = b[1];
   10ac4:	687b      	ldr	r3, [r7, #4]
   10ac6:	785a      	ldrb	r2, [r3, #1]
   10ac8:	2338      	movs	r3, #56	; 0x38
   10aca:	18fb      	adds	r3, r7, r3
   10acc:	715a      	strb	r2, [r3, #5]
		wb[6] = b[0];
   10ace:	687b      	ldr	r3, [r7, #4]
   10ad0:	781a      	ldrb	r2, [r3, #0]
   10ad2:	2338      	movs	r3, #56	; 0x38
   10ad4:	18fb      	adds	r3, r7, r3
   10ad6:	719a      	strb	r2, [r3, #6]
		len = 8;
   10ad8:	2308      	movs	r3, #8
   10ada:	66fb      	str	r3, [r7, #108]	; 0x6c
		break;
   10adc:	e02a      	b.n	10b34 <spi_cmd_complete+0x244>
	case CMD_SINGLE_WRITE:			/* single word write */
		wb[1] = (uint8_t)(adr >> 16);
   10ade:	68bb      	ldr	r3, [r7, #8]
   10ae0:	0c1b      	lsrs	r3, r3, #16
   10ae2:	b2da      	uxtb	r2, r3
   10ae4:	2338      	movs	r3, #56	; 0x38
   10ae6:	18fb      	adds	r3, r7, r3
   10ae8:	705a      	strb	r2, [r3, #1]
		wb[2] = (uint8_t)(adr >> 8);
   10aea:	68bb      	ldr	r3, [r7, #8]
   10aec:	0a1b      	lsrs	r3, r3, #8
   10aee:	b2da      	uxtb	r2, r3
   10af0:	2338      	movs	r3, #56	; 0x38
   10af2:	18fb      	adds	r3, r7, r3
   10af4:	709a      	strb	r2, [r3, #2]
		wb[3] = (uint8_t)(adr);
   10af6:	68bb      	ldr	r3, [r7, #8]
   10af8:	b2da      	uxtb	r2, r3
   10afa:	2338      	movs	r3, #56	; 0x38
   10afc:	18fb      	adds	r3, r7, r3
   10afe:	70da      	strb	r2, [r3, #3]
		wb[4] = b[3];
   10b00:	687b      	ldr	r3, [r7, #4]
   10b02:	78da      	ldrb	r2, [r3, #3]
   10b04:	2338      	movs	r3, #56	; 0x38
   10b06:	18fb      	adds	r3, r7, r3
   10b08:	711a      	strb	r2, [r3, #4]
		wb[5] = b[2];
   10b0a:	687b      	ldr	r3, [r7, #4]
   10b0c:	789a      	ldrb	r2, [r3, #2]
   10b0e:	2338      	movs	r3, #56	; 0x38
   10b10:	18fb      	adds	r3, r7, r3
   10b12:	715a      	strb	r2, [r3, #5]
		wb[6] = b[1];
   10b14:	687b      	ldr	r3, [r7, #4]
   10b16:	785a      	ldrb	r2, [r3, #1]
   10b18:	2338      	movs	r3, #56	; 0x38
   10b1a:	18fb      	adds	r3, r7, r3
   10b1c:	719a      	strb	r2, [r3, #6]
		wb[7] = b[0];
   10b1e:	687b      	ldr	r3, [r7, #4]
   10b20:	781a      	ldrb	r2, [r3, #0]
   10b22:	2338      	movs	r3, #56	; 0x38
   10b24:	18fb      	adds	r3, r7, r3
   10b26:	71da      	strb	r2, [r3, #7]
		len = 9;
   10b28:	2309      	movs	r3, #9
   10b2a:	66fb      	str	r3, [r7, #108]	; 0x6c
		break;
   10b2c:	e002      	b.n	10b34 <spi_cmd_complete+0x244>
	default:
		result = N_FAIL;
   10b2e:	2300      	movs	r3, #0
   10b30:	66bb      	str	r3, [r7, #104]	; 0x68
		break;
   10b32:	46c0      	nop			; (mov r8, r8)
	}

	if (result != N_OK) {
   10b34:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   10b36:	2b01      	cmp	r3, #1
   10b38:	d001      	beq.n	10b3e <spi_cmd_complete+0x24e>
		return result;
   10b3a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   10b3c:	e33a      	b.n	111b4 <spi_cmd_complete+0x8c4>
	}

	if (!gu8Crc_off) {
   10b3e:	4b4d      	ldr	r3, [pc, #308]	; (10c74 <spi_cmd_complete+0x384>)
   10b40:	781b      	ldrb	r3, [r3, #0]
   10b42:	2b00      	cmp	r3, #0
   10b44:	d111      	bne.n	10b6a <spi_cmd_complete+0x27a>
		wb[len-1] = (crc7(0x7f, (const uint8_t *)&wb[0], len-1)) << 1;
   10b46:	6efb      	ldr	r3, [r7, #108]	; 0x6c
   10b48:	1e5c      	subs	r4, r3, #1
   10b4a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
   10b4c:	3b01      	subs	r3, #1
   10b4e:	001a      	movs	r2, r3
   10b50:	2338      	movs	r3, #56	; 0x38
   10b52:	18fb      	adds	r3, r7, r3
   10b54:	0019      	movs	r1, r3
   10b56:	207f      	movs	r0, #127	; 0x7f
   10b58:	4b47      	ldr	r3, [pc, #284]	; (10c78 <spi_cmd_complete+0x388>)
   10b5a:	4798      	blx	r3
   10b5c:	0003      	movs	r3, r0
   10b5e:	18db      	adds	r3, r3, r3
   10b60:	b2da      	uxtb	r2, r3
   10b62:	2338      	movs	r3, #56	; 0x38
   10b64:	18fb      	adds	r3, r7, r3
   10b66:	551a      	strb	r2, [r3, r4]
   10b68:	e002      	b.n	10b70 <spi_cmd_complete+0x280>
	} else {
		len -=1;
   10b6a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
   10b6c:	3b01      	subs	r3, #1
   10b6e:	66fb      	str	r3, [r7, #108]	; 0x6c
#define NUM_DATA_HDR_BYTES (1)
#define NUM_DATA_BYTES (4)
#define NUM_CRC_BYTES (2)
#define NUM_DUMMY_BYTES (3)

	if ((cmd == CMD_RESET) ||
   10b70:	230f      	movs	r3, #15
   10b72:	18fb      	adds	r3, r7, r3
   10b74:	781b      	ldrb	r3, [r3, #0]
   10b76:	2bcf      	cmp	r3, #207	; 0xcf
   10b78:	d009      	beq.n	10b8e <spi_cmd_complete+0x29e>
   10b7a:	230f      	movs	r3, #15
   10b7c:	18fb      	adds	r3, r7, r3
   10b7e:	781b      	ldrb	r3, [r3, #0]
   10b80:	2bc5      	cmp	r3, #197	; 0xc5
   10b82:	d004      	beq.n	10b8e <spi_cmd_complete+0x29e>
		(cmd == CMD_TERMINATE) ||
   10b84:	230f      	movs	r3, #15
   10b86:	18fb      	adds	r3, r7, r3
   10b88:	781b      	ldrb	r3, [r3, #0]
   10b8a:	2bc6      	cmp	r3, #198	; 0xc6
   10b8c:	d103      	bne.n	10b96 <spi_cmd_complete+0x2a6>
		(cmd == CMD_REPEAT)) {
			len2 = len + (NUM_SKIP_BYTES + NUM_RSP_BYTES + NUM_DUMMY_BYTES);
   10b8e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
   10b90:	3306      	adds	r3, #6
   10b92:	673b      	str	r3, [r7, #112]	; 0x70
   10b94:	e018      	b.n	10bc8 <spi_cmd_complete+0x2d8>
	} else if ((cmd == CMD_INTERNAL_READ) || (cmd == CMD_SINGLE_READ)) {
   10b96:	230f      	movs	r3, #15
   10b98:	18fb      	adds	r3, r7, r3
   10b9a:	781b      	ldrb	r3, [r3, #0]
   10b9c:	2bc4      	cmp	r3, #196	; 0xc4
   10b9e:	d004      	beq.n	10baa <spi_cmd_complete+0x2ba>
   10ba0:	230f      	movs	r3, #15
   10ba2:	18fb      	adds	r3, r7, r3
   10ba4:	781b      	ldrb	r3, [r3, #0]
   10ba6:	2bca      	cmp	r3, #202	; 0xca
   10ba8:	d10b      	bne.n	10bc2 <spi_cmd_complete+0x2d2>
		if (!gu8Crc_off) {
   10baa:	4b32      	ldr	r3, [pc, #200]	; (10c74 <spi_cmd_complete+0x384>)
   10bac:	781b      	ldrb	r3, [r3, #0]
   10bae:	2b00      	cmp	r3, #0
   10bb0:	d103      	bne.n	10bba <spi_cmd_complete+0x2ca>
			len2 = len + (NUM_RSP_BYTES + NUM_DATA_HDR_BYTES + NUM_DATA_BYTES 
   10bb2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
   10bb4:	330c      	adds	r3, #12
   10bb6:	673b      	str	r3, [r7, #112]	; 0x70
		if (!gu8Crc_off) {
   10bb8:	e006      	b.n	10bc8 <spi_cmd_complete+0x2d8>
			+ NUM_CRC_BYTES + NUM_DUMMY_BYTES);	
		} else {
			len2 = len + (NUM_RSP_BYTES + NUM_DATA_HDR_BYTES + NUM_DATA_BYTES 
   10bba:	6efb      	ldr	r3, [r7, #108]	; 0x6c
   10bbc:	330a      	adds	r3, #10
   10bbe:	673b      	str	r3, [r7, #112]	; 0x70
		if (!gu8Crc_off) {
   10bc0:	e002      	b.n	10bc8 <spi_cmd_complete+0x2d8>
			+ NUM_DUMMY_BYTES);
		}
	} else {
		len2 = len + (NUM_RSP_BYTES + NUM_DUMMY_BYTES);
   10bc2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
   10bc4:	3305      	adds	r3, #5
   10bc6:	673b      	str	r3, [r7, #112]	; 0x70
	}
#undef NUM_DUMMY_BYTES

	if(len2 > (sizeof(wb)/sizeof(wb[0]))) {
   10bc8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
   10bca:	2b20      	cmp	r3, #32
   10bcc:	d914      	bls.n	10bf8 <spi_cmd_complete+0x308>
		M2M_ERR("[nmi spi]: spi buffer size too small (%d) (%d)\n",
   10bce:	23f7      	movs	r3, #247	; 0xf7
   10bd0:	005a      	lsls	r2, r3, #1
   10bd2:	492a      	ldr	r1, [pc, #168]	; (10c7c <spi_cmd_complete+0x38c>)
   10bd4:	4b2a      	ldr	r3, [pc, #168]	; (10c80 <spi_cmd_complete+0x390>)
   10bd6:	0018      	movs	r0, r3
   10bd8:	4b2a      	ldr	r3, [pc, #168]	; (10c84 <spi_cmd_complete+0x394>)
   10bda:	4798      	blx	r3
   10bdc:	6f39      	ldr	r1, [r7, #112]	; 0x70
   10bde:	4b2a      	ldr	r3, [pc, #168]	; (10c88 <spi_cmd_complete+0x398>)
   10be0:	2220      	movs	r2, #32
   10be2:	0018      	movs	r0, r3
   10be4:	4b27      	ldr	r3, [pc, #156]	; (10c84 <spi_cmd_complete+0x394>)
   10be6:	4798      	blx	r3
   10be8:	4b28      	ldr	r3, [pc, #160]	; (10c8c <spi_cmd_complete+0x39c>)
   10bea:	0018      	movs	r0, r3
   10bec:	4b25      	ldr	r3, [pc, #148]	; (10c84 <spi_cmd_complete+0x394>)
   10bee:	4798      	blx	r3
			len2, (sizeof(wb)/sizeof(wb[0])));
		result = N_FAIL;
   10bf0:	2300      	movs	r3, #0
   10bf2:	66bb      	str	r3, [r7, #104]	; 0x68
		return result;
   10bf4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   10bf6:	e2dd      	b.n	111b4 <spi_cmd_complete+0x8c4>
	}
	/* zero spi write buffers. */
	for(wix = len; wix< len2; wix++) {
   10bf8:	2377      	movs	r3, #119	; 0x77
   10bfa:	18fb      	adds	r3, r7, r3
   10bfc:	6efa      	ldr	r2, [r7, #108]	; 0x6c
   10bfe:	701a      	strb	r2, [r3, #0]
   10c00:	e00d      	b.n	10c1e <spi_cmd_complete+0x32e>
		wb[wix] = 0;
   10c02:	2377      	movs	r3, #119	; 0x77
   10c04:	18fb      	adds	r3, r7, r3
   10c06:	781b      	ldrb	r3, [r3, #0]
   10c08:	2238      	movs	r2, #56	; 0x38
   10c0a:	18ba      	adds	r2, r7, r2
   10c0c:	2100      	movs	r1, #0
   10c0e:	54d1      	strb	r1, [r2, r3]
	for(wix = len; wix< len2; wix++) {
   10c10:	2377      	movs	r3, #119	; 0x77
   10c12:	18fb      	adds	r3, r7, r3
   10c14:	781a      	ldrb	r2, [r3, #0]
   10c16:	2377      	movs	r3, #119	; 0x77
   10c18:	18fb      	adds	r3, r7, r3
   10c1a:	3201      	adds	r2, #1
   10c1c:	701a      	strb	r2, [r3, #0]
   10c1e:	2377      	movs	r3, #119	; 0x77
   10c20:	18fb      	adds	r3, r7, r3
   10c22:	781a      	ldrb	r2, [r3, #0]
   10c24:	6f3b      	ldr	r3, [r7, #112]	; 0x70
   10c26:	429a      	cmp	r2, r3
   10c28:	d3eb      	bcc.n	10c02 <spi_cmd_complete+0x312>
	}
	rix = len;
   10c2a:	2376      	movs	r3, #118	; 0x76
   10c2c:	18fb      	adds	r3, r7, r3
   10c2e:	6efa      	ldr	r2, [r7, #108]	; 0x6c
   10c30:	701a      	strb	r2, [r3, #0]

	if (nmi_spi_rw(wb, rb, len2) != M2M_SUCCESS) {
   10c32:	6f3b      	ldr	r3, [r7, #112]	; 0x70
   10c34:	b29a      	uxth	r2, r3
   10c36:	2318      	movs	r3, #24
   10c38:	18f9      	adds	r1, r7, r3
   10c3a:	2338      	movs	r3, #56	; 0x38
   10c3c:	18fb      	adds	r3, r7, r3
   10c3e:	0018      	movs	r0, r3
   10c40:	4b13      	ldr	r3, [pc, #76]	; (10c90 <spi_cmd_complete+0x3a0>)
   10c42:	4798      	blx	r3
   10c44:	1e03      	subs	r3, r0, #0
   10c46:	d027      	beq.n	10c98 <spi_cmd_complete+0x3a8>
		M2M_ERR("[nmi spi]: Failed cmd write, bus error...\n");
   10c48:	23fa      	movs	r3, #250	; 0xfa
   10c4a:	33ff      	adds	r3, #255	; 0xff
   10c4c:	001a      	movs	r2, r3
   10c4e:	490b      	ldr	r1, [pc, #44]	; (10c7c <spi_cmd_complete+0x38c>)
   10c50:	4b0b      	ldr	r3, [pc, #44]	; (10c80 <spi_cmd_complete+0x390>)
   10c52:	0018      	movs	r0, r3
   10c54:	4b0b      	ldr	r3, [pc, #44]	; (10c84 <spi_cmd_complete+0x394>)
   10c56:	4798      	blx	r3
   10c58:	4b0e      	ldr	r3, [pc, #56]	; (10c94 <spi_cmd_complete+0x3a4>)
   10c5a:	0018      	movs	r0, r3
   10c5c:	4b09      	ldr	r3, [pc, #36]	; (10c84 <spi_cmd_complete+0x394>)
   10c5e:	4798      	blx	r3
   10c60:	4b0a      	ldr	r3, [pc, #40]	; (10c8c <spi_cmd_complete+0x39c>)
   10c62:	0018      	movs	r0, r3
   10c64:	4b07      	ldr	r3, [pc, #28]	; (10c84 <spi_cmd_complete+0x394>)
   10c66:	4798      	blx	r3
		result = N_FAIL;
   10c68:	2300      	movs	r3, #0
   10c6a:	66bb      	str	r3, [r7, #104]	; 0x68
		return result;
   10c6c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   10c6e:	e2a1      	b.n	111b4 <spi_cmd_complete+0x8c4>
   10c70:	00025e2c 	.word	0x00025e2c
   10c74:	20003d2c 	.word	0x20003d2c
   10c78:	00010325 	.word	0x00010325
   10c7c:	00025e8c 	.word	0x00025e8c
   10c80:	00025878 	.word	0x00025878
   10c84:	0000addd 	.word	0x0000addd
   10c88:	00025940 	.word	0x00025940
   10c8c:	000258b8 	.word	0x000258b8
   10c90:	000102b1 	.word	0x000102b1
   10c94:	0002588c 	.word	0x0002588c
#endif

	/**
	Command/Control response
	**/
	if ((cmd == CMD_RESET) ||
   10c98:	230f      	movs	r3, #15
   10c9a:	18fb      	adds	r3, r7, r3
   10c9c:	781b      	ldrb	r3, [r3, #0]
   10c9e:	2bcf      	cmp	r3, #207	; 0xcf
   10ca0:	d009      	beq.n	10cb6 <spi_cmd_complete+0x3c6>
   10ca2:	230f      	movs	r3, #15
   10ca4:	18fb      	adds	r3, r7, r3
   10ca6:	781b      	ldrb	r3, [r3, #0]
   10ca8:	2bc5      	cmp	r3, #197	; 0xc5
   10caa:	d004      	beq.n	10cb6 <spi_cmd_complete+0x3c6>
		(cmd == CMD_TERMINATE) ||
   10cac:	230f      	movs	r3, #15
   10cae:	18fb      	adds	r3, r7, r3
   10cb0:	781b      	ldrb	r3, [r3, #0]
   10cb2:	2bc6      	cmp	r3, #198	; 0xc6
   10cb4:	d106      	bne.n	10cc4 <spi_cmd_complete+0x3d4>
		(cmd == CMD_REPEAT)) {
			rix++; /* skip 1 byte */
   10cb6:	2376      	movs	r3, #118	; 0x76
   10cb8:	18fb      	adds	r3, r7, r3
   10cba:	781a      	ldrb	r2, [r3, #0]
   10cbc:	2376      	movs	r3, #118	; 0x76
   10cbe:	18fb      	adds	r3, r7, r3
   10cc0:	3201      	adds	r2, #1
   10cc2:	701a      	strb	r2, [r3, #0]
	}

	rsp = rb[rix++];
   10cc4:	2376      	movs	r3, #118	; 0x76
   10cc6:	18fb      	adds	r3, r7, r3
   10cc8:	781b      	ldrb	r3, [r3, #0]
   10cca:	2276      	movs	r2, #118	; 0x76
   10ccc:	18ba      	adds	r2, r7, r2
   10cce:	1c59      	adds	r1, r3, #1
   10cd0:	7011      	strb	r1, [r2, #0]
   10cd2:	001a      	movs	r2, r3
   10cd4:	2318      	movs	r3, #24
   10cd6:	18fb      	adds	r3, r7, r3
   10cd8:	5c9a      	ldrb	r2, [r3, r2]
   10cda:	2317      	movs	r3, #23
   10cdc:	18fb      	adds	r3, r7, r3
   10cde:	701a      	strb	r2, [r3, #0]


	if (rsp != cmd) {
   10ce0:	2317      	movs	r3, #23
   10ce2:	18fb      	adds	r3, r7, r3
   10ce4:	781b      	ldrb	r3, [r3, #0]
   10ce6:	220f      	movs	r2, #15
   10ce8:	18ba      	adds	r2, r7, r2
   10cea:	7812      	ldrb	r2, [r2, #0]
   10cec:	429a      	cmp	r2, r3
   10cee:	d018      	beq.n	10d22 <spi_cmd_complete+0x432>
		M2M_ERR("[nmi spi]: Failed cmd response, cmd (%02x), resp (%02x)\n", cmd, rsp);
   10cf0:	4add      	ldr	r2, [pc, #884]	; (11068 <spi_cmd_complete+0x778>)
   10cf2:	49de      	ldr	r1, [pc, #888]	; (1106c <spi_cmd_complete+0x77c>)
   10cf4:	4bde      	ldr	r3, [pc, #888]	; (11070 <spi_cmd_complete+0x780>)
   10cf6:	0018      	movs	r0, r3
   10cf8:	4bde      	ldr	r3, [pc, #888]	; (11074 <spi_cmd_complete+0x784>)
   10cfa:	4798      	blx	r3
   10cfc:	230f      	movs	r3, #15
   10cfe:	18fb      	adds	r3, r7, r3
   10d00:	7819      	ldrb	r1, [r3, #0]
   10d02:	2317      	movs	r3, #23
   10d04:	18fb      	adds	r3, r7, r3
   10d06:	781b      	ldrb	r3, [r3, #0]
   10d08:	001a      	movs	r2, r3
   10d0a:	4bdb      	ldr	r3, [pc, #876]	; (11078 <spi_cmd_complete+0x788>)
   10d0c:	0018      	movs	r0, r3
   10d0e:	4bd9      	ldr	r3, [pc, #868]	; (11074 <spi_cmd_complete+0x784>)
   10d10:	4798      	blx	r3
   10d12:	4bda      	ldr	r3, [pc, #872]	; (1107c <spi_cmd_complete+0x78c>)
   10d14:	0018      	movs	r0, r3
   10d16:	4bd7      	ldr	r3, [pc, #860]	; (11074 <spi_cmd_complete+0x784>)
   10d18:	4798      	blx	r3
		result = N_FAIL;
   10d1a:	2300      	movs	r3, #0
   10d1c:	66bb      	str	r3, [r7, #104]	; 0x68
		return result;
   10d1e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   10d20:	e248      	b.n	111b4 <spi_cmd_complete+0x8c4>
	}

	/**
	State response
	**/
	rsp = rb[rix++];
   10d22:	2376      	movs	r3, #118	; 0x76
   10d24:	18fb      	adds	r3, r7, r3
   10d26:	781b      	ldrb	r3, [r3, #0]
   10d28:	2276      	movs	r2, #118	; 0x76
   10d2a:	18ba      	adds	r2, r7, r2
   10d2c:	1c59      	adds	r1, r3, #1
   10d2e:	7011      	strb	r1, [r2, #0]
   10d30:	001a      	movs	r2, r3
   10d32:	2318      	movs	r3, #24
   10d34:	18fb      	adds	r3, r7, r3
   10d36:	5c9a      	ldrb	r2, [r3, r2]
   10d38:	2317      	movs	r3, #23
   10d3a:	18fb      	adds	r3, r7, r3
   10d3c:	701a      	strb	r2, [r3, #0]
	if (rsp != 0x00) {
   10d3e:	2317      	movs	r3, #23
   10d40:	18fb      	adds	r3, r7, r3
   10d42:	781b      	ldrb	r3, [r3, #0]
   10d44:	2b00      	cmp	r3, #0
   10d46:	d016      	beq.n	10d76 <spi_cmd_complete+0x486>
		M2M_ERR("[nmi spi]: Failed cmd state response state (%02x)\n", rsp);
   10d48:	4acd      	ldr	r2, [pc, #820]	; (11080 <spi_cmd_complete+0x790>)
   10d4a:	49c8      	ldr	r1, [pc, #800]	; (1106c <spi_cmd_complete+0x77c>)
   10d4c:	4bc8      	ldr	r3, [pc, #800]	; (11070 <spi_cmd_complete+0x780>)
   10d4e:	0018      	movs	r0, r3
   10d50:	4bc8      	ldr	r3, [pc, #800]	; (11074 <spi_cmd_complete+0x784>)
   10d52:	4798      	blx	r3
   10d54:	2317      	movs	r3, #23
   10d56:	18fb      	adds	r3, r7, r3
   10d58:	781b      	ldrb	r3, [r3, #0]
   10d5a:	001a      	movs	r2, r3
   10d5c:	4bc9      	ldr	r3, [pc, #804]	; (11084 <spi_cmd_complete+0x794>)
   10d5e:	0011      	movs	r1, r2
   10d60:	0018      	movs	r0, r3
   10d62:	4bc4      	ldr	r3, [pc, #784]	; (11074 <spi_cmd_complete+0x784>)
   10d64:	4798      	blx	r3
   10d66:	4bc5      	ldr	r3, [pc, #788]	; (1107c <spi_cmd_complete+0x78c>)
   10d68:	0018      	movs	r0, r3
   10d6a:	4bc2      	ldr	r3, [pc, #776]	; (11074 <spi_cmd_complete+0x784>)
   10d6c:	4798      	blx	r3
		result = N_FAIL;
   10d6e:	2300      	movs	r3, #0
   10d70:	66bb      	str	r3, [r7, #104]	; 0x68
		return result;
   10d72:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   10d74:	e21e      	b.n	111b4 <spi_cmd_complete+0x8c4>
	}

	if ((cmd == CMD_INTERNAL_READ) || (cmd == CMD_SINGLE_READ)
   10d76:	230f      	movs	r3, #15
   10d78:	18fb      	adds	r3, r7, r3
   10d7a:	781b      	ldrb	r3, [r3, #0]
   10d7c:	2bc4      	cmp	r3, #196	; 0xc4
   10d7e:	d00f      	beq.n	10da0 <spi_cmd_complete+0x4b0>
   10d80:	230f      	movs	r3, #15
   10d82:	18fb      	adds	r3, r7, r3
   10d84:	781b      	ldrb	r3, [r3, #0]
   10d86:	2bca      	cmp	r3, #202	; 0xca
   10d88:	d00a      	beq.n	10da0 <spi_cmd_complete+0x4b0>
		|| (cmd == CMD_DMA_READ) || (cmd == CMD_DMA_EXT_READ)) {
   10d8a:	230f      	movs	r3, #15
   10d8c:	18fb      	adds	r3, r7, r3
   10d8e:	781b      	ldrb	r3, [r3, #0]
   10d90:	2bc2      	cmp	r3, #194	; 0xc2
   10d92:	d005      	beq.n	10da0 <spi_cmd_complete+0x4b0>
   10d94:	230f      	movs	r3, #15
   10d96:	18fb      	adds	r3, r7, r3
   10d98:	781b      	ldrb	r3, [r3, #0]
   10d9a:	2bc8      	cmp	r3, #200	; 0xc8
   10d9c:	d000      	beq.n	10da0 <spi_cmd_complete+0x4b0>
   10d9e:	e208      	b.n	111b2 <spi_cmd_complete+0x8c2>
			//uint16_t crc1, crc2;
			uint8_t crc[2];
			/**
			Data Respnose header
			**/
			retry = SPI_RESP_RETRY_COUNT;
   10da0:	230a      	movs	r3, #10
   10da2:	667b      	str	r3, [r7, #100]	; 0x64
			do {
				/* ensure there is room in buffer later to read data and crc */
				if(rix < len2) { 
   10da4:	2376      	movs	r3, #118	; 0x76
   10da6:	18fb      	adds	r3, r7, r3
   10da8:	781a      	ldrb	r2, [r3, #0]
   10daa:	6f3b      	ldr	r3, [r7, #112]	; 0x70
   10dac:	429a      	cmp	r2, r3
   10dae:	d218      	bcs.n	10de2 <spi_cmd_complete+0x4f2>
					rsp = rb[rix++];
   10db0:	2376      	movs	r3, #118	; 0x76
   10db2:	18fb      	adds	r3, r7, r3
   10db4:	781b      	ldrb	r3, [r3, #0]
   10db6:	2276      	movs	r2, #118	; 0x76
   10db8:	18ba      	adds	r2, r7, r2
   10dba:	1c59      	adds	r1, r3, #1
   10dbc:	7011      	strb	r1, [r2, #0]
   10dbe:	001a      	movs	r2, r3
   10dc0:	2318      	movs	r3, #24
   10dc2:	18fb      	adds	r3, r7, r3
   10dc4:	5c9a      	ldrb	r2, [r3, r2]
   10dc6:	2317      	movs	r3, #23
   10dc8:	18fb      	adds	r3, r7, r3
   10dca:	701a      	strb	r2, [r3, #0]
				} else {
					retry = 0;
					break;
				}
				if (((rsp >> 4) & 0xf) == 0xf)
   10dcc:	2317      	movs	r3, #23
   10dce:	18fb      	adds	r3, r7, r3
   10dd0:	781b      	ldrb	r3, [r3, #0]
   10dd2:	091b      	lsrs	r3, r3, #4
   10dd4:	b2db      	uxtb	r3, r3
   10dd6:	001a      	movs	r2, r3
   10dd8:	230f      	movs	r3, #15
   10dda:	4013      	ands	r3, r2
   10ddc:	2b0f      	cmp	r3, #15
   10dde:	d103      	bne.n	10de8 <spi_cmd_complete+0x4f8>
					break;
   10de0:	e007      	b.n	10df2 <spi_cmd_complete+0x502>
					retry = 0;
   10de2:	2300      	movs	r3, #0
   10de4:	667b      	str	r3, [r7, #100]	; 0x64
					break;
   10de6:	e004      	b.n	10df2 <spi_cmd_complete+0x502>
			} while (retry--);
   10de8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   10dea:	1e5a      	subs	r2, r3, #1
   10dec:	667a      	str	r2, [r7, #100]	; 0x64
   10dee:	2b00      	cmp	r3, #0
   10df0:	d1d8      	bne.n	10da4 <spi_cmd_complete+0x4b4>

			if (retry <= 0) {
   10df2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   10df4:	2b00      	cmp	r3, #0
   10df6:	dc18      	bgt.n	10e2a <spi_cmd_complete+0x53a>
				M2M_ERR("[nmi spi]: Error, data read response (%02x)\n", rsp);
   10df8:	2395      	movs	r3, #149	; 0x95
   10dfa:	009a      	lsls	r2, r3, #2
   10dfc:	499b      	ldr	r1, [pc, #620]	; (1106c <spi_cmd_complete+0x77c>)
   10dfe:	4b9c      	ldr	r3, [pc, #624]	; (11070 <spi_cmd_complete+0x780>)
   10e00:	0018      	movs	r0, r3
   10e02:	4b9c      	ldr	r3, [pc, #624]	; (11074 <spi_cmd_complete+0x784>)
   10e04:	4798      	blx	r3
   10e06:	2317      	movs	r3, #23
   10e08:	18fb      	adds	r3, r7, r3
   10e0a:	781b      	ldrb	r3, [r3, #0]
   10e0c:	001a      	movs	r2, r3
   10e0e:	4b9e      	ldr	r3, [pc, #632]	; (11088 <spi_cmd_complete+0x798>)
   10e10:	0011      	movs	r1, r2
   10e12:	0018      	movs	r0, r3
   10e14:	4b97      	ldr	r3, [pc, #604]	; (11074 <spi_cmd_complete+0x784>)
   10e16:	4798      	blx	r3
   10e18:	4b98      	ldr	r3, [pc, #608]	; (1107c <spi_cmd_complete+0x78c>)
   10e1a:	0018      	movs	r0, r3
   10e1c:	4b95      	ldr	r3, [pc, #596]	; (11074 <spi_cmd_complete+0x784>)
   10e1e:	4798      	blx	r3
				result = N_RESET;
   10e20:	2301      	movs	r3, #1
   10e22:	425b      	negs	r3, r3
   10e24:	66bb      	str	r3, [r7, #104]	; 0x68
				return result;
   10e26:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   10e28:	e1c4      	b.n	111b4 <spi_cmd_complete+0x8c4>
			}

			if ((cmd == CMD_INTERNAL_READ) || (cmd == CMD_SINGLE_READ)) {
   10e2a:	230f      	movs	r3, #15
   10e2c:	18fb      	adds	r3, r7, r3
   10e2e:	781b      	ldrb	r3, [r3, #0]
   10e30:	2bc4      	cmp	r3, #196	; 0xc4
   10e32:	d005      	beq.n	10e40 <spi_cmd_complete+0x550>
   10e34:	230f      	movs	r3, #15
   10e36:	18fb      	adds	r3, r7, r3
   10e38:	781b      	ldrb	r3, [r3, #0]
   10e3a:	2bca      	cmp	r3, #202	; 0xca
   10e3c:	d000      	beq.n	10e40 <spi_cmd_complete+0x550>
   10e3e:	e08e      	b.n	10f5e <spi_cmd_complete+0x66e>
				/**
				Read bytes
				**/
				if((rix+3) < len2) { 
   10e40:	2376      	movs	r3, #118	; 0x76
   10e42:	18fb      	adds	r3, r7, r3
   10e44:	781b      	ldrb	r3, [r3, #0]
   10e46:	3303      	adds	r3, #3
   10e48:	001a      	movs	r2, r3
   10e4a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
   10e4c:	429a      	cmp	r2, r3
   10e4e:	d23c      	bcs.n	10eca <spi_cmd_complete+0x5da>
					b[0] = rb[rix++];
   10e50:	2376      	movs	r3, #118	; 0x76
   10e52:	18fb      	adds	r3, r7, r3
   10e54:	781b      	ldrb	r3, [r3, #0]
   10e56:	2276      	movs	r2, #118	; 0x76
   10e58:	18ba      	adds	r2, r7, r2
   10e5a:	1c59      	adds	r1, r3, #1
   10e5c:	7011      	strb	r1, [r2, #0]
   10e5e:	001a      	movs	r2, r3
   10e60:	2318      	movs	r3, #24
   10e62:	18fb      	adds	r3, r7, r3
   10e64:	5c9a      	ldrb	r2, [r3, r2]
   10e66:	687b      	ldr	r3, [r7, #4]
   10e68:	701a      	strb	r2, [r3, #0]
					b[1] = rb[rix++];
   10e6a:	687b      	ldr	r3, [r7, #4]
   10e6c:	1c5a      	adds	r2, r3, #1
   10e6e:	2376      	movs	r3, #118	; 0x76
   10e70:	18fb      	adds	r3, r7, r3
   10e72:	781b      	ldrb	r3, [r3, #0]
   10e74:	2176      	movs	r1, #118	; 0x76
   10e76:	1879      	adds	r1, r7, r1
   10e78:	1c58      	adds	r0, r3, #1
   10e7a:	7008      	strb	r0, [r1, #0]
   10e7c:	0019      	movs	r1, r3
   10e7e:	2318      	movs	r3, #24
   10e80:	18fb      	adds	r3, r7, r3
   10e82:	5c5b      	ldrb	r3, [r3, r1]
   10e84:	7013      	strb	r3, [r2, #0]
					b[2] = rb[rix++];
   10e86:	687b      	ldr	r3, [r7, #4]
   10e88:	1c9a      	adds	r2, r3, #2
   10e8a:	2376      	movs	r3, #118	; 0x76
   10e8c:	18fb      	adds	r3, r7, r3
   10e8e:	781b      	ldrb	r3, [r3, #0]
   10e90:	2176      	movs	r1, #118	; 0x76
   10e92:	1879      	adds	r1, r7, r1
   10e94:	1c58      	adds	r0, r3, #1
   10e96:	7008      	strb	r0, [r1, #0]
   10e98:	0019      	movs	r1, r3
   10e9a:	2318      	movs	r3, #24
   10e9c:	18fb      	adds	r3, r7, r3
   10e9e:	5c5b      	ldrb	r3, [r3, r1]
   10ea0:	7013      	strb	r3, [r2, #0]
					b[3] = rb[rix++];
   10ea2:	687b      	ldr	r3, [r7, #4]
   10ea4:	1cda      	adds	r2, r3, #3
   10ea6:	2376      	movs	r3, #118	; 0x76
   10ea8:	18fb      	adds	r3, r7, r3
   10eaa:	781b      	ldrb	r3, [r3, #0]
   10eac:	2176      	movs	r1, #118	; 0x76
   10eae:	1879      	adds	r1, r7, r1
   10eb0:	1c58      	adds	r0, r3, #1
   10eb2:	7008      	strb	r0, [r1, #0]
   10eb4:	0019      	movs	r1, r3
   10eb6:	2318      	movs	r3, #24
   10eb8:	18fb      	adds	r3, r7, r3
   10eba:	5c5b      	ldrb	r3, [r3, r1]
   10ebc:	7013      	strb	r3, [r2, #0]
					M2M_ERR("[nmi spi]: buffer overrun when reading data.\n");
					result = N_FAIL;
					return result;
				}

				if (!gu8Crc_off) {						
   10ebe:	4b73      	ldr	r3, [pc, #460]	; (1108c <spi_cmd_complete+0x79c>)
   10ec0:	781b      	ldrb	r3, [r3, #0]
   10ec2:	2b00      	cmp	r3, #0
   10ec4:	d000      	beq.n	10ec8 <spi_cmd_complete+0x5d8>
   10ec6:	e174      	b.n	111b2 <spi_cmd_complete+0x8c2>
   10ec8:	e011      	b.n	10eee <spi_cmd_complete+0x5fe>
					M2M_ERR("[nmi spi]: buffer overrun when reading data.\n");
   10eca:	4a71      	ldr	r2, [pc, #452]	; (11090 <spi_cmd_complete+0x7a0>)
   10ecc:	4967      	ldr	r1, [pc, #412]	; (1106c <spi_cmd_complete+0x77c>)
   10ece:	4b68      	ldr	r3, [pc, #416]	; (11070 <spi_cmd_complete+0x780>)
   10ed0:	0018      	movs	r0, r3
   10ed2:	4b68      	ldr	r3, [pc, #416]	; (11074 <spi_cmd_complete+0x784>)
   10ed4:	4798      	blx	r3
   10ed6:	4b6f      	ldr	r3, [pc, #444]	; (11094 <spi_cmd_complete+0x7a4>)
   10ed8:	0018      	movs	r0, r3
   10eda:	4b66      	ldr	r3, [pc, #408]	; (11074 <spi_cmd_complete+0x784>)
   10edc:	4798      	blx	r3
   10ede:	4b67      	ldr	r3, [pc, #412]	; (1107c <spi_cmd_complete+0x78c>)
   10ee0:	0018      	movs	r0, r3
   10ee2:	4b64      	ldr	r3, [pc, #400]	; (11074 <spi_cmd_complete+0x784>)
   10ee4:	4798      	blx	r3
					result = N_FAIL;
   10ee6:	2300      	movs	r3, #0
   10ee8:	66bb      	str	r3, [r7, #104]	; 0x68
					return result;
   10eea:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   10eec:	e162      	b.n	111b4 <spi_cmd_complete+0x8c4>
					/**
					Read Crc
					**/
					if((rix+1) < len2) { 
   10eee:	2376      	movs	r3, #118	; 0x76
   10ef0:	18fb      	adds	r3, r7, r3
   10ef2:	781b      	ldrb	r3, [r3, #0]
   10ef4:	3301      	adds	r3, #1
   10ef6:	001a      	movs	r2, r3
   10ef8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
   10efa:	429a      	cmp	r2, r3
   10efc:	d21c      	bcs.n	10f38 <spi_cmd_complete+0x648>
						crc[0] = rb[rix++];
   10efe:	2376      	movs	r3, #118	; 0x76
   10f00:	18fb      	adds	r3, r7, r3
   10f02:	781b      	ldrb	r3, [r3, #0]
   10f04:	2276      	movs	r2, #118	; 0x76
   10f06:	18ba      	adds	r2, r7, r2
   10f08:	1c59      	adds	r1, r3, #1
   10f0a:	7011      	strb	r1, [r2, #0]
   10f0c:	001a      	movs	r2, r3
   10f0e:	2318      	movs	r3, #24
   10f10:	18fb      	adds	r3, r7, r3
   10f12:	5c9a      	ldrb	r2, [r3, r2]
   10f14:	2314      	movs	r3, #20
   10f16:	18fb      	adds	r3, r7, r3
   10f18:	701a      	strb	r2, [r3, #0]
						crc[1] = rb[rix++];
   10f1a:	2376      	movs	r3, #118	; 0x76
   10f1c:	18fb      	adds	r3, r7, r3
   10f1e:	781b      	ldrb	r3, [r3, #0]
   10f20:	2276      	movs	r2, #118	; 0x76
   10f22:	18ba      	adds	r2, r7, r2
   10f24:	1c59      	adds	r1, r3, #1
   10f26:	7011      	strb	r1, [r2, #0]
   10f28:	001a      	movs	r2, r3
   10f2a:	2318      	movs	r3, #24
   10f2c:	18fb      	adds	r3, r7, r3
   10f2e:	5c9a      	ldrb	r2, [r3, r2]
   10f30:	2314      	movs	r3, #20
   10f32:	18fb      	adds	r3, r7, r3
   10f34:	705a      	strb	r2, [r3, #1]
				if (!gu8Crc_off) {						
   10f36:	e13c      	b.n	111b2 <spi_cmd_complete+0x8c2>
					} else {
						M2M_ERR("[nmi spi]: buffer overrun when reading crc.\n");
   10f38:	239c      	movs	r3, #156	; 0x9c
   10f3a:	009a      	lsls	r2, r3, #2
   10f3c:	494b      	ldr	r1, [pc, #300]	; (1106c <spi_cmd_complete+0x77c>)
   10f3e:	4b4c      	ldr	r3, [pc, #304]	; (11070 <spi_cmd_complete+0x780>)
   10f40:	0018      	movs	r0, r3
   10f42:	4b4c      	ldr	r3, [pc, #304]	; (11074 <spi_cmd_complete+0x784>)
   10f44:	4798      	blx	r3
   10f46:	4b54      	ldr	r3, [pc, #336]	; (11098 <spi_cmd_complete+0x7a8>)
   10f48:	0018      	movs	r0, r3
   10f4a:	4b4a      	ldr	r3, [pc, #296]	; (11074 <spi_cmd_complete+0x784>)
   10f4c:	4798      	blx	r3
   10f4e:	4b4b      	ldr	r3, [pc, #300]	; (1107c <spi_cmd_complete+0x78c>)
   10f50:	0018      	movs	r0, r3
   10f52:	4b48      	ldr	r3, [pc, #288]	; (11074 <spi_cmd_complete+0x784>)
   10f54:	4798      	blx	r3
						result = N_FAIL;
   10f56:	2300      	movs	r3, #0
   10f58:	66bb      	str	r3, [r7, #104]	; 0x68
						return result;
   10f5a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   10f5c:	e12a      	b.n	111b4 <spi_cmd_complete+0x8c4>
					}
				}
			} else if((cmd == CMD_DMA_READ) || (cmd == CMD_DMA_EXT_READ)) {
   10f5e:	230f      	movs	r3, #15
   10f60:	18fb      	adds	r3, r7, r3
   10f62:	781b      	ldrb	r3, [r3, #0]
   10f64:	2bc2      	cmp	r3, #194	; 0xc2
   10f66:	d005      	beq.n	10f74 <spi_cmd_complete+0x684>
   10f68:	230f      	movs	r3, #15
   10f6a:	18fb      	adds	r3, r7, r3
   10f6c:	781b      	ldrb	r3, [r3, #0]
   10f6e:	2bc8      	cmp	r3, #200	; 0xc8
   10f70:	d000      	beq.n	10f74 <spi_cmd_complete+0x684>
   10f72:	e11e      	b.n	111b2 <spi_cmd_complete+0x8c2>
				int ix;

				/* some data may be read in response to dummy bytes. */
				for(ix=0; (rix < len2) && (ix < sz);) {
   10f74:	2300      	movs	r3, #0
   10f76:	663b      	str	r3, [r7, #96]	; 0x60
   10f78:	e011      	b.n	10f9e <spi_cmd_complete+0x6ae>
					b[ix++] = rb[rix++];				
   10f7a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
   10f7c:	1c5a      	adds	r2, r3, #1
   10f7e:	663a      	str	r2, [r7, #96]	; 0x60
   10f80:	001a      	movs	r2, r3
   10f82:	687b      	ldr	r3, [r7, #4]
   10f84:	189a      	adds	r2, r3, r2
   10f86:	2376      	movs	r3, #118	; 0x76
   10f88:	18fb      	adds	r3, r7, r3
   10f8a:	781b      	ldrb	r3, [r3, #0]
   10f8c:	2176      	movs	r1, #118	; 0x76
   10f8e:	1879      	adds	r1, r7, r1
   10f90:	1c58      	adds	r0, r3, #1
   10f92:	7008      	strb	r0, [r1, #0]
   10f94:	0019      	movs	r1, r3
   10f96:	2318      	movs	r3, #24
   10f98:	18fb      	adds	r3, r7, r3
   10f9a:	5c5b      	ldrb	r3, [r3, r1]
   10f9c:	7013      	strb	r3, [r2, #0]
				for(ix=0; (rix < len2) && (ix < sz);) {
   10f9e:	2376      	movs	r3, #118	; 0x76
   10fa0:	18fb      	adds	r3, r7, r3
   10fa2:	781a      	ldrb	r2, [r3, #0]
   10fa4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
   10fa6:	429a      	cmp	r2, r3
   10fa8:	d203      	bcs.n	10fb2 <spi_cmd_complete+0x6c2>
   10faa:	6e3a      	ldr	r2, [r7, #96]	; 0x60
   10fac:	683b      	ldr	r3, [r7, #0]
   10fae:	429a      	cmp	r2, r3
   10fb0:	d3e3      	bcc.n	10f7a <spi_cmd_complete+0x68a>
				}
#if 0
				if(ix) M2M_INFO("ttt %d %d\n", sz, ix);
#endif
				sz -= ix;
   10fb2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
   10fb4:	683a      	ldr	r2, [r7, #0]
   10fb6:	1ad3      	subs	r3, r2, r3
   10fb8:	603b      	str	r3, [r7, #0]

				if(sz > 0) {
   10fba:	683b      	ldr	r3, [r7, #0]
   10fbc:	2b00      	cmp	r3, #0
   10fbe:	d100      	bne.n	10fc2 <spi_cmd_complete+0x6d2>
   10fc0:	e0f1      	b.n	111a6 <spi_cmd_complete+0x8b6>
					int nbytes;
					
					if (sz <= (DATA_PKT_SZ-ix)) {
   10fc2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
   10fc4:	2280      	movs	r2, #128	; 0x80
   10fc6:	0192      	lsls	r2, r2, #6
   10fc8:	1ad3      	subs	r3, r2, r3
   10fca:	001a      	movs	r2, r3
   10fcc:	683b      	ldr	r3, [r7, #0]
   10fce:	429a      	cmp	r2, r3
   10fd0:	d302      	bcc.n	10fd8 <spi_cmd_complete+0x6e8>
						nbytes = sz;
   10fd2:	683b      	ldr	r3, [r7, #0]
   10fd4:	65fb      	str	r3, [r7, #92]	; 0x5c
   10fd6:	e004      	b.n	10fe2 <spi_cmd_complete+0x6f2>
					} else {
						nbytes = DATA_PKT_SZ-ix;
   10fd8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
   10fda:	2280      	movs	r2, #128	; 0x80
   10fdc:	0192      	lsls	r2, r2, #6
   10fde:	1ad3      	subs	r3, r2, r3
   10fe0:	65fb      	str	r3, [r7, #92]	; 0x5c
					}

					/**
					Read bytes
					**/
					if (nmi_spi_read(&b[ix], nbytes) != M2M_SUCCESS) {
   10fe2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
   10fe4:	687a      	ldr	r2, [r7, #4]
   10fe6:	18d3      	adds	r3, r2, r3
   10fe8:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
   10fea:	b292      	uxth	r2, r2
   10fec:	0011      	movs	r1, r2
   10fee:	0018      	movs	r0, r3
   10ff0:	4b2a      	ldr	r3, [pc, #168]	; (1109c <spi_cmd_complete+0x7ac>)
   10ff2:	4798      	blx	r3
   10ff4:	1e03      	subs	r3, r0, #0
   10ff6:	d010      	beq.n	1101a <spi_cmd_complete+0x72a>
						M2M_ERR("[nmi spi]: Failed data block read, bus error...\n");
   10ff8:	4a29      	ldr	r2, [pc, #164]	; (110a0 <spi_cmd_complete+0x7b0>)
   10ffa:	491c      	ldr	r1, [pc, #112]	; (1106c <spi_cmd_complete+0x77c>)
   10ffc:	4b1c      	ldr	r3, [pc, #112]	; (11070 <spi_cmd_complete+0x780>)
   10ffe:	0018      	movs	r0, r3
   11000:	4b1c      	ldr	r3, [pc, #112]	; (11074 <spi_cmd_complete+0x784>)
   11002:	4798      	blx	r3
   11004:	4b27      	ldr	r3, [pc, #156]	; (110a4 <spi_cmd_complete+0x7b4>)
   11006:	0018      	movs	r0, r3
   11008:	4b1a      	ldr	r3, [pc, #104]	; (11074 <spi_cmd_complete+0x784>)
   1100a:	4798      	blx	r3
   1100c:	4b1b      	ldr	r3, [pc, #108]	; (1107c <spi_cmd_complete+0x78c>)
   1100e:	0018      	movs	r0, r3
   11010:	4b18      	ldr	r3, [pc, #96]	; (11074 <spi_cmd_complete+0x784>)
   11012:	4798      	blx	r3
						result = N_FAIL;
   11014:	2300      	movs	r3, #0
   11016:	66bb      	str	r3, [r7, #104]	; 0x68
						goto _error_;
   11018:	e0cb      	b.n	111b2 <spi_cmd_complete+0x8c2>
					}

					/**
					Read Crc
					**/
					if (!gu8Crc_off) {
   1101a:	4b1c      	ldr	r3, [pc, #112]	; (1108c <spi_cmd_complete+0x79c>)
   1101c:	781b      	ldrb	r3, [r3, #0]
   1101e:	2b00      	cmp	r3, #0
   11020:	d119      	bne.n	11056 <spi_cmd_complete+0x766>
						if (nmi_spi_read(crc, 2) != M2M_SUCCESS) {
   11022:	2314      	movs	r3, #20
   11024:	18fb      	adds	r3, r7, r3
   11026:	2102      	movs	r1, #2
   11028:	0018      	movs	r0, r3
   1102a:	4b1c      	ldr	r3, [pc, #112]	; (1109c <spi_cmd_complete+0x7ac>)
   1102c:	4798      	blx	r3
   1102e:	1e03      	subs	r3, r0, #0
   11030:	d011      	beq.n	11056 <spi_cmd_complete+0x766>
							M2M_ERR("[nmi spi]: Failed data block crc read, bus error...\n");
   11032:	23a6      	movs	r3, #166	; 0xa6
   11034:	009a      	lsls	r2, r3, #2
   11036:	490d      	ldr	r1, [pc, #52]	; (1106c <spi_cmd_complete+0x77c>)
   11038:	4b0d      	ldr	r3, [pc, #52]	; (11070 <spi_cmd_complete+0x780>)
   1103a:	0018      	movs	r0, r3
   1103c:	4b0d      	ldr	r3, [pc, #52]	; (11074 <spi_cmd_complete+0x784>)
   1103e:	4798      	blx	r3
   11040:	4b19      	ldr	r3, [pc, #100]	; (110a8 <spi_cmd_complete+0x7b8>)
   11042:	0018      	movs	r0, r3
   11044:	4b0b      	ldr	r3, [pc, #44]	; (11074 <spi_cmd_complete+0x784>)
   11046:	4798      	blx	r3
   11048:	4b0c      	ldr	r3, [pc, #48]	; (1107c <spi_cmd_complete+0x78c>)
   1104a:	0018      	movs	r0, r3
   1104c:	4b09      	ldr	r3, [pc, #36]	; (11074 <spi_cmd_complete+0x784>)
   1104e:	4798      	blx	r3
							result = N_FAIL;
   11050:	2300      	movs	r3, #0
   11052:	66bb      	str	r3, [r7, #104]	; 0x68
							goto _error_;
   11054:	e0ad      	b.n	111b2 <spi_cmd_complete+0x8c2>
						}
					}

					
					ix += nbytes;
   11056:	6e3a      	ldr	r2, [r7, #96]	; 0x60
   11058:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
   1105a:	18d3      	adds	r3, r2, r3
   1105c:	663b      	str	r3, [r7, #96]	; 0x60
					sz -= nbytes;
   1105e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
   11060:	683a      	ldr	r2, [r7, #0]
   11062:	1ad3      	subs	r3, r2, r3
   11064:	603b      	str	r3, [r7, #0]
				}

				/*  if any data in left unread, then read the rest using normal DMA code.*/	
				while(sz > 0) {
   11066:	e09e      	b.n	111a6 <spi_cmd_complete+0x8b6>
   11068:	0000022f 	.word	0x0000022f
   1106c:	00025e8c 	.word	0x00025e8c
   11070:	00025878 	.word	0x00025878
   11074:	0000addd 	.word	0x0000addd
   11078:	00025970 	.word	0x00025970
   1107c:	000258b8 	.word	0x000258b8
   11080:	00000239 	.word	0x00000239
   11084:	000259ac 	.word	0x000259ac
   11088:	000259e0 	.word	0x000259e0
   1108c:	20003d2c 	.word	0x20003d2c
   11090:	00000263 	.word	0x00000263
   11094:	00025a10 	.word	0x00025a10
   11098:	00025a40 	.word	0x00025a40
   1109c:	00010229 	.word	0x00010229
   110a0:	0000028e 	.word	0x0000028e
   110a4:	00025a70 	.word	0x00025a70
   110a8:	00025aa4 	.word	0x00025aa4
					int nbytes;
			
					if (sz <= DATA_PKT_SZ) {
   110ac:	683a      	ldr	r2, [r7, #0]
   110ae:	2380      	movs	r3, #128	; 0x80
   110b0:	019b      	lsls	r3, r3, #6
   110b2:	429a      	cmp	r2, r3
   110b4:	d802      	bhi.n	110bc <spi_cmd_complete+0x7cc>
						nbytes = sz;
   110b6:	683b      	ldr	r3, [r7, #0]
   110b8:	65bb      	str	r3, [r7, #88]	; 0x58
   110ba:	e002      	b.n	110c2 <spi_cmd_complete+0x7d2>
					} else {
						nbytes = DATA_PKT_SZ;
   110bc:	2380      	movs	r3, #128	; 0x80
   110be:	019b      	lsls	r3, r3, #6
   110c0:	65bb      	str	r3, [r7, #88]	; 0x58
					handled above for the first DMA.
					**/
					/**
					Data Respnose header
					**/
					retry = SPI_RESP_RETRY_COUNT;
   110c2:	230a      	movs	r3, #10
   110c4:	667b      	str	r3, [r7, #100]	; 0x64
					do {
						if (nmi_spi_read(&rsp, 1) != M2M_SUCCESS) {
   110c6:	2317      	movs	r3, #23
   110c8:	18fb      	adds	r3, r7, r3
   110ca:	2101      	movs	r1, #1
   110cc:	0018      	movs	r0, r3
   110ce:	4b3b      	ldr	r3, [pc, #236]	; (111bc <spi_cmd_complete+0x8cc>)
   110d0:	4798      	blx	r3
   110d2:	1e03      	subs	r3, r0, #0
   110d4:	d011      	beq.n	110fa <spi_cmd_complete+0x80a>
							M2M_ERR("[nmi spi]: Failed data response read, bus error...\n");
   110d6:	23ae      	movs	r3, #174	; 0xae
   110d8:	009a      	lsls	r2, r3, #2
   110da:	4939      	ldr	r1, [pc, #228]	; (111c0 <spi_cmd_complete+0x8d0>)
   110dc:	4b39      	ldr	r3, [pc, #228]	; (111c4 <spi_cmd_complete+0x8d4>)
   110de:	0018      	movs	r0, r3
   110e0:	4b39      	ldr	r3, [pc, #228]	; (111c8 <spi_cmd_complete+0x8d8>)
   110e2:	4798      	blx	r3
   110e4:	4b39      	ldr	r3, [pc, #228]	; (111cc <spi_cmd_complete+0x8dc>)
   110e6:	0018      	movs	r0, r3
   110e8:	4b37      	ldr	r3, [pc, #220]	; (111c8 <spi_cmd_complete+0x8d8>)
   110ea:	4798      	blx	r3
   110ec:	4b38      	ldr	r3, [pc, #224]	; (111d0 <spi_cmd_complete+0x8e0>)
   110ee:	0018      	movs	r0, r3
   110f0:	4b35      	ldr	r3, [pc, #212]	; (111c8 <spi_cmd_complete+0x8d8>)
   110f2:	4798      	blx	r3
							result = N_FAIL;
   110f4:	2300      	movs	r3, #0
   110f6:	66bb      	str	r3, [r7, #104]	; 0x68
							break;
   110f8:	e010      	b.n	1111c <spi_cmd_complete+0x82c>
						}
						if (((rsp >> 4) & 0xf) == 0xf)
   110fa:	2317      	movs	r3, #23
   110fc:	18fb      	adds	r3, r7, r3
   110fe:	781b      	ldrb	r3, [r3, #0]
   11100:	091b      	lsrs	r3, r3, #4
   11102:	b2db      	uxtb	r3, r3
   11104:	001a      	movs	r2, r3
   11106:	230f      	movs	r3, #15
   11108:	4013      	ands	r3, r2
   1110a:	2b0f      	cmp	r3, #15
   1110c:	d005      	beq.n	1111a <spi_cmd_complete+0x82a>
							break;
					} while (retry--);
   1110e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   11110:	1e5a      	subs	r2, r3, #1
   11112:	667a      	str	r2, [r7, #100]	; 0x64
   11114:	2b00      	cmp	r3, #0
   11116:	d1d6      	bne.n	110c6 <spi_cmd_complete+0x7d6>
   11118:	e000      	b.n	1111c <spi_cmd_complete+0x82c>
							break;
   1111a:	46c0      	nop			; (mov r8, r8)

					if (result == N_FAIL)
   1111c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   1111e:	2b00      	cmp	r3, #0
   11120:	d046      	beq.n	111b0 <spi_cmd_complete+0x8c0>


					/**
					Read bytes
					**/
					if (nmi_spi_read(&b[ix], nbytes) != M2M_SUCCESS) {
   11122:	6e3b      	ldr	r3, [r7, #96]	; 0x60
   11124:	687a      	ldr	r2, [r7, #4]
   11126:	18d3      	adds	r3, r2, r3
   11128:	6dba      	ldr	r2, [r7, #88]	; 0x58
   1112a:	b292      	uxth	r2, r2
   1112c:	0011      	movs	r1, r2
   1112e:	0018      	movs	r0, r3
   11130:	4b22      	ldr	r3, [pc, #136]	; (111bc <spi_cmd_complete+0x8cc>)
   11132:	4798      	blx	r3
   11134:	1e03      	subs	r3, r0, #0
   11136:	d011      	beq.n	1115c <spi_cmd_complete+0x86c>
						M2M_ERR("[nmi spi]: Failed data block read, bus error...\n");
   11138:	23b2      	movs	r3, #178	; 0xb2
   1113a:	009a      	lsls	r2, r3, #2
   1113c:	4920      	ldr	r1, [pc, #128]	; (111c0 <spi_cmd_complete+0x8d0>)
   1113e:	4b21      	ldr	r3, [pc, #132]	; (111c4 <spi_cmd_complete+0x8d4>)
   11140:	0018      	movs	r0, r3
   11142:	4b21      	ldr	r3, [pc, #132]	; (111c8 <spi_cmd_complete+0x8d8>)
   11144:	4798      	blx	r3
   11146:	4b23      	ldr	r3, [pc, #140]	; (111d4 <spi_cmd_complete+0x8e4>)
   11148:	0018      	movs	r0, r3
   1114a:	4b1f      	ldr	r3, [pc, #124]	; (111c8 <spi_cmd_complete+0x8d8>)
   1114c:	4798      	blx	r3
   1114e:	4b20      	ldr	r3, [pc, #128]	; (111d0 <spi_cmd_complete+0x8e0>)
   11150:	0018      	movs	r0, r3
   11152:	4b1d      	ldr	r3, [pc, #116]	; (111c8 <spi_cmd_complete+0x8d8>)
   11154:	4798      	blx	r3
						result = N_FAIL;
   11156:	2300      	movs	r3, #0
   11158:	66bb      	str	r3, [r7, #104]	; 0x68
						break;
   1115a:	e02a      	b.n	111b2 <spi_cmd_complete+0x8c2>
					}

					/**
					Read Crc
					**/
					if (!gu8Crc_off) {
   1115c:	4b1e      	ldr	r3, [pc, #120]	; (111d8 <spi_cmd_complete+0x8e8>)
   1115e:	781b      	ldrb	r3, [r3, #0]
   11160:	2b00      	cmp	r3, #0
   11162:	d118      	bne.n	11196 <spi_cmd_complete+0x8a6>
						if (nmi_spi_read(crc, 2) != M2M_SUCCESS) {
   11164:	2314      	movs	r3, #20
   11166:	18fb      	adds	r3, r7, r3
   11168:	2102      	movs	r1, #2
   1116a:	0018      	movs	r0, r3
   1116c:	4b13      	ldr	r3, [pc, #76]	; (111bc <spi_cmd_complete+0x8cc>)
   1116e:	4798      	blx	r3
   11170:	1e03      	subs	r3, r0, #0
   11172:	d010      	beq.n	11196 <spi_cmd_complete+0x8a6>
							M2M_ERR("[nmi spi]: Failed data block crc read, bus error...\n");
   11174:	4a19      	ldr	r2, [pc, #100]	; (111dc <spi_cmd_complete+0x8ec>)
   11176:	4912      	ldr	r1, [pc, #72]	; (111c0 <spi_cmd_complete+0x8d0>)
   11178:	4b12      	ldr	r3, [pc, #72]	; (111c4 <spi_cmd_complete+0x8d4>)
   1117a:	0018      	movs	r0, r3
   1117c:	4b12      	ldr	r3, [pc, #72]	; (111c8 <spi_cmd_complete+0x8d8>)
   1117e:	4798      	blx	r3
   11180:	4b17      	ldr	r3, [pc, #92]	; (111e0 <spi_cmd_complete+0x8f0>)
   11182:	0018      	movs	r0, r3
   11184:	4b10      	ldr	r3, [pc, #64]	; (111c8 <spi_cmd_complete+0x8d8>)
   11186:	4798      	blx	r3
   11188:	4b11      	ldr	r3, [pc, #68]	; (111d0 <spi_cmd_complete+0x8e0>)
   1118a:	0018      	movs	r0, r3
   1118c:	4b0e      	ldr	r3, [pc, #56]	; (111c8 <spi_cmd_complete+0x8d8>)
   1118e:	4798      	blx	r3
							result = N_FAIL;
   11190:	2300      	movs	r3, #0
   11192:	66bb      	str	r3, [r7, #104]	; 0x68
							break;
   11194:	e00d      	b.n	111b2 <spi_cmd_complete+0x8c2>
						}
					}

					ix += nbytes;
   11196:	6e3a      	ldr	r2, [r7, #96]	; 0x60
   11198:	6dbb      	ldr	r3, [r7, #88]	; 0x58
   1119a:	18d3      	adds	r3, r2, r3
   1119c:	663b      	str	r3, [r7, #96]	; 0x60
					sz -= nbytes;
   1119e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
   111a0:	683a      	ldr	r2, [r7, #0]
   111a2:	1ad3      	subs	r3, r2, r3
   111a4:	603b      	str	r3, [r7, #0]
				while(sz > 0) {
   111a6:	683b      	ldr	r3, [r7, #0]
   111a8:	2b00      	cmp	r3, #0
   111aa:	d000      	beq.n	111ae <spi_cmd_complete+0x8be>
   111ac:	e77e      	b.n	110ac <spi_cmd_complete+0x7bc>
   111ae:	e000      	b.n	111b2 <spi_cmd_complete+0x8c2>
						break;
   111b0:	46c0      	nop			; (mov r8, r8)
				}
			}
	}
_error_:
	return result;
   111b2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
}
   111b4:	0018      	movs	r0, r3
   111b6:	46bd      	mov	sp, r7
   111b8:	b01f      	add	sp, #124	; 0x7c
   111ba:	bd90      	pop	{r4, r7, pc}
   111bc:	00010229 	.word	0x00010229
   111c0:	00025e8c 	.word	0x00025e8c
   111c4:	00025878 	.word	0x00025878
   111c8:	0000addd 	.word	0x0000addd
   111cc:	00025adc 	.word	0x00025adc
   111d0:	000258b8 	.word	0x000258b8
   111d4:	00025a70 	.word	0x00025a70
   111d8:	20003d2c 	.word	0x20003d2c
   111dc:	000002d2 	.word	0x000002d2
   111e0:	00025aa4 	.word	0x00025aa4

000111e4 <spi_data_write>:

	return result;
}

static sint8 spi_data_write(uint8 *b, uint16 sz)
{
   111e4:	b580      	push	{r7, lr}
   111e6:	b086      	sub	sp, #24
   111e8:	af00      	add	r7, sp, #0
   111ea:	6078      	str	r0, [r7, #4]
   111ec:	000a      	movs	r2, r1
   111ee:	1cbb      	adds	r3, r7, #2
   111f0:	801a      	strh	r2, [r3, #0]
	sint16 ix;
	uint16 nbytes;
	sint8 result = 1;
   111f2:	2313      	movs	r3, #19
   111f4:	18fb      	adds	r3, r7, r3
   111f6:	2201      	movs	r2, #1
   111f8:	701a      	strb	r2, [r3, #0]
	uint8 cmd, order, crc[2] = {0};
   111fa:	230c      	movs	r3, #12
   111fc:	18fb      	adds	r3, r7, r3
   111fe:	2200      	movs	r2, #0
   11200:	801a      	strh	r2, [r3, #0]
	//uint8 rsp;

	/**
		Data
	**/
	ix = 0;
   11202:	2316      	movs	r3, #22
   11204:	18fb      	adds	r3, r7, r3
   11206:	2200      	movs	r2, #0
   11208:	801a      	strh	r2, [r3, #0]
	do {
		if (sz <= DATA_PKT_SZ)
   1120a:	1cbb      	adds	r3, r7, #2
   1120c:	881a      	ldrh	r2, [r3, #0]
   1120e:	2380      	movs	r3, #128	; 0x80
   11210:	019b      	lsls	r3, r3, #6
   11212:	429a      	cmp	r2, r3
   11214:	d805      	bhi.n	11222 <spi_data_write+0x3e>
			nbytes = sz;
   11216:	2314      	movs	r3, #20
   11218:	18fb      	adds	r3, r7, r3
   1121a:	1cba      	adds	r2, r7, #2
   1121c:	8812      	ldrh	r2, [r2, #0]
   1121e:	801a      	strh	r2, [r3, #0]
   11220:	e004      	b.n	1122c <spi_data_write+0x48>
		else
			nbytes = DATA_PKT_SZ;
   11222:	2314      	movs	r3, #20
   11224:	18fb      	adds	r3, r7, r3
   11226:	2280      	movs	r2, #128	; 0x80
   11228:	0192      	lsls	r2, r2, #6
   1122a:	801a      	strh	r2, [r3, #0]

		/**
			Write command
		**/
		cmd = 0xf0;
   1122c:	2311      	movs	r3, #17
   1122e:	18fb      	adds	r3, r7, r3
   11230:	22f0      	movs	r2, #240	; 0xf0
   11232:	701a      	strb	r2, [r3, #0]
		if (ix == 0)  {
   11234:	2316      	movs	r3, #22
   11236:	18fb      	adds	r3, r7, r3
   11238:	2200      	movs	r2, #0
   1123a:	5e9b      	ldrsh	r3, [r3, r2]
   1123c:	2b00      	cmp	r3, #0
   1123e:	d10f      	bne.n	11260 <spi_data_write+0x7c>
			if (sz <= DATA_PKT_SZ)
   11240:	1cbb      	adds	r3, r7, #2
   11242:	881a      	ldrh	r2, [r3, #0]
   11244:	2380      	movs	r3, #128	; 0x80
   11246:	019b      	lsls	r3, r3, #6
   11248:	429a      	cmp	r2, r3
   1124a:	d804      	bhi.n	11256 <spi_data_write+0x72>
				order = 0x3;
   1124c:	2312      	movs	r3, #18
   1124e:	18fb      	adds	r3, r7, r3
   11250:	2203      	movs	r2, #3
   11252:	701a      	strb	r2, [r3, #0]
   11254:	e013      	b.n	1127e <spi_data_write+0x9a>
			else
				order = 0x1;
   11256:	2312      	movs	r3, #18
   11258:	18fb      	adds	r3, r7, r3
   1125a:	2201      	movs	r2, #1
   1125c:	701a      	strb	r2, [r3, #0]
   1125e:	e00e      	b.n	1127e <spi_data_write+0x9a>
		} else {
			if (sz <= DATA_PKT_SZ)
   11260:	1cbb      	adds	r3, r7, #2
   11262:	881a      	ldrh	r2, [r3, #0]
   11264:	2380      	movs	r3, #128	; 0x80
   11266:	019b      	lsls	r3, r3, #6
   11268:	429a      	cmp	r2, r3
   1126a:	d804      	bhi.n	11276 <spi_data_write+0x92>
				order = 0x3;
   1126c:	2312      	movs	r3, #18
   1126e:	18fb      	adds	r3, r7, r3
   11270:	2203      	movs	r2, #3
   11272:	701a      	strb	r2, [r3, #0]
   11274:	e003      	b.n	1127e <spi_data_write+0x9a>
			else
				order = 0x2;
   11276:	2312      	movs	r3, #18
   11278:	18fb      	adds	r3, r7, r3
   1127a:	2202      	movs	r2, #2
   1127c:	701a      	strb	r2, [r3, #0]
		}
		cmd |= order;
   1127e:	2311      	movs	r3, #17
   11280:	18fb      	adds	r3, r7, r3
   11282:	781a      	ldrb	r2, [r3, #0]
   11284:	2312      	movs	r3, #18
   11286:	18fb      	adds	r3, r7, r3
   11288:	781b      	ldrb	r3, [r3, #0]
   1128a:	4313      	orrs	r3, r2
   1128c:	b2da      	uxtb	r2, r3
   1128e:	2311      	movs	r3, #17
   11290:	18fb      	adds	r3, r7, r3
   11292:	701a      	strb	r2, [r3, #0]
		if (M2M_SUCCESS != nmi_spi_write(&cmd, 1)) {
   11294:	2311      	movs	r3, #17
   11296:	18fb      	adds	r3, r7, r3
   11298:	2101      	movs	r1, #1
   1129a:	0018      	movs	r0, r3
   1129c:	4b3c      	ldr	r3, [pc, #240]	; (11390 <spi_data_write+0x1ac>)
   1129e:	4798      	blx	r3
   112a0:	1e03      	subs	r3, r0, #0
   112a2:	d012      	beq.n	112ca <spi_data_write+0xe6>
			M2M_ERR("[nmi spi]: Failed data block cmd write, bus error...\n");
   112a4:	4a3b      	ldr	r2, [pc, #236]	; (11394 <spi_data_write+0x1b0>)
   112a6:	493c      	ldr	r1, [pc, #240]	; (11398 <spi_data_write+0x1b4>)
   112a8:	4b3c      	ldr	r3, [pc, #240]	; (1139c <spi_data_write+0x1b8>)
   112aa:	0018      	movs	r0, r3
   112ac:	4b3c      	ldr	r3, [pc, #240]	; (113a0 <spi_data_write+0x1bc>)
   112ae:	4798      	blx	r3
   112b0:	4b3c      	ldr	r3, [pc, #240]	; (113a4 <spi_data_write+0x1c0>)
   112b2:	0018      	movs	r0, r3
   112b4:	4b3a      	ldr	r3, [pc, #232]	; (113a0 <spi_data_write+0x1bc>)
   112b6:	4798      	blx	r3
   112b8:	4b3b      	ldr	r3, [pc, #236]	; (113a8 <spi_data_write+0x1c4>)
   112ba:	0018      	movs	r0, r3
   112bc:	4b38      	ldr	r3, [pc, #224]	; (113a0 <spi_data_write+0x1bc>)
   112be:	4798      	blx	r3
			result = N_FAIL;
   112c0:	2313      	movs	r3, #19
   112c2:	18fb      	adds	r3, r7, r3
   112c4:	2200      	movs	r2, #0
   112c6:	701a      	strb	r2, [r3, #0]
			break;
   112c8:	e059      	b.n	1137e <spi_data_write+0x19a>
		}

		/**
			Write data
		**/
		if (M2M_SUCCESS != nmi_spi_write(&b[ix], nbytes)) {
   112ca:	2316      	movs	r3, #22
   112cc:	18fb      	adds	r3, r7, r3
   112ce:	2200      	movs	r2, #0
   112d0:	5e9b      	ldrsh	r3, [r3, r2]
   112d2:	687a      	ldr	r2, [r7, #4]
   112d4:	18d2      	adds	r2, r2, r3
   112d6:	2314      	movs	r3, #20
   112d8:	18fb      	adds	r3, r7, r3
   112da:	881b      	ldrh	r3, [r3, #0]
   112dc:	0019      	movs	r1, r3
   112de:	0010      	movs	r0, r2
   112e0:	4b2b      	ldr	r3, [pc, #172]	; (11390 <spi_data_write+0x1ac>)
   112e2:	4798      	blx	r3
   112e4:	1e03      	subs	r3, r0, #0
   112e6:	d012      	beq.n	1130e <spi_data_write+0x12a>
			M2M_ERR("[nmi spi]: Failed data block write, bus error...\n");
   112e8:	4a30      	ldr	r2, [pc, #192]	; (113ac <spi_data_write+0x1c8>)
   112ea:	492b      	ldr	r1, [pc, #172]	; (11398 <spi_data_write+0x1b4>)
   112ec:	4b2b      	ldr	r3, [pc, #172]	; (1139c <spi_data_write+0x1b8>)
   112ee:	0018      	movs	r0, r3
   112f0:	4b2b      	ldr	r3, [pc, #172]	; (113a0 <spi_data_write+0x1bc>)
   112f2:	4798      	blx	r3
   112f4:	4b2e      	ldr	r3, [pc, #184]	; (113b0 <spi_data_write+0x1cc>)
   112f6:	0018      	movs	r0, r3
   112f8:	4b29      	ldr	r3, [pc, #164]	; (113a0 <spi_data_write+0x1bc>)
   112fa:	4798      	blx	r3
   112fc:	4b2a      	ldr	r3, [pc, #168]	; (113a8 <spi_data_write+0x1c4>)
   112fe:	0018      	movs	r0, r3
   11300:	4b27      	ldr	r3, [pc, #156]	; (113a0 <spi_data_write+0x1bc>)
   11302:	4798      	blx	r3
			result = N_FAIL;
   11304:	2313      	movs	r3, #19
   11306:	18fb      	adds	r3, r7, r3
   11308:	2200      	movs	r2, #0
   1130a:	701a      	strb	r2, [r3, #0]
			break;
   1130c:	e037      	b.n	1137e <spi_data_write+0x19a>
		}

		/**
			Write Crc
		**/
		if (!gu8Crc_off) {
   1130e:	4b29      	ldr	r3, [pc, #164]	; (113b4 <spi_data_write+0x1d0>)
   11310:	781b      	ldrb	r3, [r3, #0]
   11312:	2b00      	cmp	r3, #0
   11314:	d11b      	bne.n	1134e <spi_data_write+0x16a>
			if (M2M_SUCCESS != nmi_spi_write(crc, 2)) {
   11316:	230c      	movs	r3, #12
   11318:	18fb      	adds	r3, r7, r3
   1131a:	2102      	movs	r1, #2
   1131c:	0018      	movs	r0, r3
   1131e:	4b1c      	ldr	r3, [pc, #112]	; (11390 <spi_data_write+0x1ac>)
   11320:	4798      	blx	r3
   11322:	1e03      	subs	r3, r0, #0
   11324:	d013      	beq.n	1134e <spi_data_write+0x16a>
				M2M_ERR("[nmi spi]: Failed data block crc write, bus error...\n");
   11326:	23d7      	movs	r3, #215	; 0xd7
   11328:	009a      	lsls	r2, r3, #2
   1132a:	491b      	ldr	r1, [pc, #108]	; (11398 <spi_data_write+0x1b4>)
   1132c:	4b1b      	ldr	r3, [pc, #108]	; (1139c <spi_data_write+0x1b8>)
   1132e:	0018      	movs	r0, r3
   11330:	4b1b      	ldr	r3, [pc, #108]	; (113a0 <spi_data_write+0x1bc>)
   11332:	4798      	blx	r3
   11334:	4b20      	ldr	r3, [pc, #128]	; (113b8 <spi_data_write+0x1d4>)
   11336:	0018      	movs	r0, r3
   11338:	4b19      	ldr	r3, [pc, #100]	; (113a0 <spi_data_write+0x1bc>)
   1133a:	4798      	blx	r3
   1133c:	4b1a      	ldr	r3, [pc, #104]	; (113a8 <spi_data_write+0x1c4>)
   1133e:	0018      	movs	r0, r3
   11340:	4b17      	ldr	r3, [pc, #92]	; (113a0 <spi_data_write+0x1bc>)
   11342:	4798      	blx	r3
				result = N_FAIL;
   11344:	2313      	movs	r3, #19
   11346:	18fb      	adds	r3, r7, r3
   11348:	2200      	movs	r2, #0
   1134a:	701a      	strb	r2, [r3, #0]
				break;
   1134c:	e017      	b.n	1137e <spi_data_write+0x19a>
			}
		}

		ix += nbytes;
   1134e:	2316      	movs	r3, #22
   11350:	18fb      	adds	r3, r7, r3
   11352:	881a      	ldrh	r2, [r3, #0]
   11354:	2314      	movs	r3, #20
   11356:	18fb      	adds	r3, r7, r3
   11358:	881b      	ldrh	r3, [r3, #0]
   1135a:	18d3      	adds	r3, r2, r3
   1135c:	b29a      	uxth	r2, r3
   1135e:	2316      	movs	r3, #22
   11360:	18fb      	adds	r3, r7, r3
   11362:	801a      	strh	r2, [r3, #0]
		sz -= nbytes;
   11364:	1cbb      	adds	r3, r7, #2
   11366:	1cb9      	adds	r1, r7, #2
   11368:	2214      	movs	r2, #20
   1136a:	18ba      	adds	r2, r7, r2
   1136c:	8809      	ldrh	r1, [r1, #0]
   1136e:	8812      	ldrh	r2, [r2, #0]
   11370:	1a8a      	subs	r2, r1, r2
   11372:	801a      	strh	r2, [r3, #0]
	} while (sz);
   11374:	1cbb      	adds	r3, r7, #2
   11376:	881b      	ldrh	r3, [r3, #0]
   11378:	2b00      	cmp	r3, #0
   1137a:	d000      	beq.n	1137e <spi_data_write+0x19a>
   1137c:	e745      	b.n	1120a <spi_data_write+0x26>


	return result;
   1137e:	2313      	movs	r3, #19
   11380:	18fb      	adds	r3, r7, r3
   11382:	781b      	ldrb	r3, [r3, #0]
   11384:	b25b      	sxtb	r3, r3
}
   11386:	0018      	movs	r0, r3
   11388:	46bd      	mov	sp, r7
   1138a:	b006      	add	sp, #24
   1138c:	bd80      	pop	{r7, pc}
   1138e:	46c0      	nop			; (mov r8, r8)
   11390:	0001026d 	.word	0x0001026d
   11394:	00000349 	.word	0x00000349
   11398:	00025ea0 	.word	0x00025ea0
   1139c:	00025878 	.word	0x00025878
   113a0:	0000addd 	.word	0x0000addd
   113a4:	00025b40 	.word	0x00025b40
   113a8:	000258b8 	.word	0x000258b8
   113ac:	00000352 	.word	0x00000352
   113b0:	00025b78 	.word	0x00025b78
   113b4:	20003d2c 	.word	0x20003d2c
   113b8:	00025bac 	.word	0x00025bac

000113bc <spi_write_reg>:
	Spi interfaces

********************************************/

static sint8 spi_write_reg(uint32 addr, uint32 u32data)
{
   113bc:	b590      	push	{r4, r7, lr}
   113be:	b087      	sub	sp, #28
   113c0:	af02      	add	r7, sp, #8
   113c2:	6078      	str	r0, [r7, #4]
   113c4:	6039      	str	r1, [r7, #0]
	uint8 retry = SPI_RETRY_COUNT;
   113c6:	230f      	movs	r3, #15
   113c8:	18fb      	adds	r3, r7, r3
   113ca:	220a      	movs	r2, #10
   113cc:	701a      	strb	r2, [r3, #0]
	sint8 result = N_OK;
   113ce:	230c      	movs	r3, #12
   113d0:	18fb      	adds	r3, r7, r3
   113d2:	2201      	movs	r2, #1
   113d4:	701a      	strb	r2, [r3, #0]
	uint8 cmd = CMD_SINGLE_WRITE;
   113d6:	230e      	movs	r3, #14
   113d8:	18fb      	adds	r3, r7, r3
   113da:	22c9      	movs	r2, #201	; 0xc9
   113dc:	701a      	strb	r2, [r3, #0]
	uint8 clockless = 0;
   113de:	230d      	movs	r3, #13
   113e0:	18fb      	adds	r3, r7, r3
   113e2:	2200      	movs	r2, #0
   113e4:	701a      	strb	r2, [r3, #0]
	
_RETRY_:	
	if (addr <= 0x30)
   113e6:	687b      	ldr	r3, [r7, #4]
   113e8:	2b30      	cmp	r3, #48	; 0x30
   113ea:	d808      	bhi.n	113fe <spi_write_reg+0x42>
	{
		/**
		NMC1000 clockless registers.
		**/
		cmd = CMD_INTERNAL_WRITE;
   113ec:	230e      	movs	r3, #14
   113ee:	18fb      	adds	r3, r7, r3
   113f0:	22c3      	movs	r2, #195	; 0xc3
   113f2:	701a      	strb	r2, [r3, #0]
		clockless = 1;
   113f4:	230d      	movs	r3, #13
   113f6:	18fb      	adds	r3, r7, r3
   113f8:	2201      	movs	r2, #1
   113fa:	701a      	strb	r2, [r3, #0]
   113fc:	e007      	b.n	1140e <spi_write_reg+0x52>
	}
	else
	{
		cmd = CMD_SINGLE_WRITE;
   113fe:	230e      	movs	r3, #14
   11400:	18fb      	adds	r3, r7, r3
   11402:	22c9      	movs	r2, #201	; 0xc9
   11404:	701a      	strb	r2, [r3, #0]
		clockless = 0;
   11406:	230d      	movs	r3, #13
   11408:	18fb      	adds	r3, r7, r3
   1140a:	2200      	movs	r2, #0
   1140c:	701a      	strb	r2, [r3, #0]
		goto _FAIL_;
	}

#else

	result = spi_cmd_complete(cmd, addr, (uint8*)&u32data, 4, clockless);
   1140e:	003a      	movs	r2, r7
   11410:	6879      	ldr	r1, [r7, #4]
   11412:	230e      	movs	r3, #14
   11414:	18fb      	adds	r3, r7, r3
   11416:	7818      	ldrb	r0, [r3, #0]
   11418:	230d      	movs	r3, #13
   1141a:	18fb      	adds	r3, r7, r3
   1141c:	781b      	ldrb	r3, [r3, #0]
   1141e:	9300      	str	r3, [sp, #0]
   11420:	2304      	movs	r3, #4
   11422:	4c2e      	ldr	r4, [pc, #184]	; (114dc <spi_write_reg+0x120>)
   11424:	47a0      	blx	r4
   11426:	0002      	movs	r2, r0
   11428:	230c      	movs	r3, #12
   1142a:	18fb      	adds	r3, r7, r3
   1142c:	701a      	strb	r2, [r3, #0]
	if (result != N_OK) {
   1142e:	230c      	movs	r3, #12
   11430:	18fb      	adds	r3, r7, r3
   11432:	781b      	ldrb	r3, [r3, #0]
   11434:	b25b      	sxtb	r3, r3
   11436:	2b01      	cmp	r3, #1
   11438:	d010      	beq.n	1145c <spi_write_reg+0xa0>
		M2M_ERR( "[nmi spi]: Failed cmd, write reg (%08x)...\n", addr);
   1143a:	4a29      	ldr	r2, [pc, #164]	; (114e0 <spi_write_reg+0x124>)
   1143c:	4929      	ldr	r1, [pc, #164]	; (114e4 <spi_write_reg+0x128>)
   1143e:	4b2a      	ldr	r3, [pc, #168]	; (114e8 <spi_write_reg+0x12c>)
   11440:	0018      	movs	r0, r3
   11442:	4b2a      	ldr	r3, [pc, #168]	; (114ec <spi_write_reg+0x130>)
   11444:	4798      	blx	r3
   11446:	687a      	ldr	r2, [r7, #4]
   11448:	4b29      	ldr	r3, [pc, #164]	; (114f0 <spi_write_reg+0x134>)
   1144a:	0011      	movs	r1, r2
   1144c:	0018      	movs	r0, r3
   1144e:	4b27      	ldr	r3, [pc, #156]	; (114ec <spi_write_reg+0x130>)
   11450:	4798      	blx	r3
   11452:	4b28      	ldr	r3, [pc, #160]	; (114f4 <spi_write_reg+0x138>)
   11454:	0018      	movs	r0, r3
   11456:	4b25      	ldr	r3, [pc, #148]	; (114ec <spi_write_reg+0x130>)
   11458:	4798      	blx	r3
		goto _FAIL_;
   1145a:	46c0      	nop			; (mov r8, r8)
	}

#endif
_FAIL_:
	if(result != N_OK)
   1145c:	230c      	movs	r3, #12
   1145e:	18fb      	adds	r3, r7, r3
   11460:	781b      	ldrb	r3, [r3, #0]
   11462:	b25b      	sxtb	r3, r3
   11464:	2b01      	cmp	r3, #1
   11466:	d030      	beq.n	114ca <spi_write_reg+0x10e>
	{
		nm_bsp_sleep(1);
   11468:	2001      	movs	r0, #1
   1146a:	4b23      	ldr	r3, [pc, #140]	; (114f8 <spi_write_reg+0x13c>)
   1146c:	4798      	blx	r3
		spi_cmd(CMD_RESET, 0, 0, 0, 0);
   1146e:	2300      	movs	r3, #0
   11470:	9300      	str	r3, [sp, #0]
   11472:	2300      	movs	r3, #0
   11474:	2200      	movs	r2, #0
   11476:	2100      	movs	r1, #0
   11478:	20cf      	movs	r0, #207	; 0xcf
   1147a:	4c20      	ldr	r4, [pc, #128]	; (114fc <spi_write_reg+0x140>)
   1147c:	47a0      	blx	r4
		spi_cmd_rsp(CMD_RESET);
   1147e:	20cf      	movs	r0, #207	; 0xcf
   11480:	4b1f      	ldr	r3, [pc, #124]	; (11500 <spi_write_reg+0x144>)
   11482:	4798      	blx	r3
		M2M_ERR("Reset and retry %d %lx %lx\n",retry,addr,u32data);
   11484:	23ea      	movs	r3, #234	; 0xea
   11486:	009a      	lsls	r2, r3, #2
   11488:	4916      	ldr	r1, [pc, #88]	; (114e4 <spi_write_reg+0x128>)
   1148a:	4b17      	ldr	r3, [pc, #92]	; (114e8 <spi_write_reg+0x12c>)
   1148c:	0018      	movs	r0, r3
   1148e:	4b17      	ldr	r3, [pc, #92]	; (114ec <spi_write_reg+0x130>)
   11490:	4798      	blx	r3
   11492:	230f      	movs	r3, #15
   11494:	18fb      	adds	r3, r7, r3
   11496:	7819      	ldrb	r1, [r3, #0]
   11498:	683b      	ldr	r3, [r7, #0]
   1149a:	687a      	ldr	r2, [r7, #4]
   1149c:	4819      	ldr	r0, [pc, #100]	; (11504 <spi_write_reg+0x148>)
   1149e:	4c13      	ldr	r4, [pc, #76]	; (114ec <spi_write_reg+0x130>)
   114a0:	47a0      	blx	r4
   114a2:	4b14      	ldr	r3, [pc, #80]	; (114f4 <spi_write_reg+0x138>)
   114a4:	0018      	movs	r0, r3
   114a6:	4b11      	ldr	r3, [pc, #68]	; (114ec <spi_write_reg+0x130>)
   114a8:	4798      	blx	r3
		nm_bsp_sleep(1);
   114aa:	2001      	movs	r0, #1
   114ac:	4b12      	ldr	r3, [pc, #72]	; (114f8 <spi_write_reg+0x13c>)
   114ae:	4798      	blx	r3
		retry--;
   114b0:	230f      	movs	r3, #15
   114b2:	18fb      	adds	r3, r7, r3
   114b4:	781a      	ldrb	r2, [r3, #0]
   114b6:	230f      	movs	r3, #15
   114b8:	18fb      	adds	r3, r7, r3
   114ba:	3a01      	subs	r2, #1
   114bc:	701a      	strb	r2, [r3, #0]
		if(retry) goto _RETRY_;
   114be:	230f      	movs	r3, #15
   114c0:	18fb      	adds	r3, r7, r3
   114c2:	781b      	ldrb	r3, [r3, #0]
   114c4:	2b00      	cmp	r3, #0
   114c6:	d000      	beq.n	114ca <spi_write_reg+0x10e>
   114c8:	e78d      	b.n	113e6 <spi_write_reg+0x2a>
	}

	return result;
   114ca:	230c      	movs	r3, #12
   114cc:	18fb      	adds	r3, r7, r3
   114ce:	781b      	ldrb	r3, [r3, #0]
   114d0:	b25b      	sxtb	r3, r3
}
   114d2:	0018      	movs	r0, r3
   114d4:	46bd      	mov	sp, r7
   114d6:	b005      	add	sp, #20
   114d8:	bd90      	pop	{r4, r7, pc}
   114da:	46c0      	nop			; (mov r8, r8)
   114dc:	000108f1 	.word	0x000108f1
   114e0:	0000039d 	.word	0x0000039d
   114e4:	00025eb0 	.word	0x00025eb0
   114e8:	00025878 	.word	0x00025878
   114ec:	0000addd 	.word	0x0000addd
   114f0:	00025be4 	.word	0x00025be4
   114f4:	000258b8 	.word	0x000258b8
   114f8:	0000d231 	.word	0x0000d231
   114fc:	00010375 	.word	0x00010375
   11500:	000107b5 	.word	0x000107b5
   11504:	00025c10 	.word	0x00025c10

00011508 <nm_spi_write>:

static sint8 nm_spi_write(uint32 addr, uint8 *buf, uint16 size)
{
   11508:	b590      	push	{r4, r7, lr}
   1150a:	b089      	sub	sp, #36	; 0x24
   1150c:	af02      	add	r7, sp, #8
   1150e:	60f8      	str	r0, [r7, #12]
   11510:	60b9      	str	r1, [r7, #8]
   11512:	1dbb      	adds	r3, r7, #6
   11514:	801a      	strh	r2, [r3, #0]
	sint8 result;
	uint8 retry = SPI_RETRY_COUNT;
   11516:	2316      	movs	r3, #22
   11518:	18fb      	adds	r3, r7, r3
   1151a:	220a      	movs	r2, #10
   1151c:	701a      	strb	r2, [r3, #0]
	uint8 cmd = CMD_DMA_EXT_WRITE;
   1151e:	2315      	movs	r3, #21
   11520:	18fb      	adds	r3, r7, r3
   11522:	22c7      	movs	r2, #199	; 0xc7
   11524:	701a      	strb	r2, [r3, #0]
	if (result != N_OK) {
		M2M_ERR("[nmi spi ]: Failed cmd response, write block (%08x)...\n", (unsigned int)addr);
		goto _FAIL_;
	}
#else
	result = spi_cmd_complete(cmd, addr, NULL, size, 0);
   11526:	1dbb      	adds	r3, r7, #6
   11528:	881a      	ldrh	r2, [r3, #0]
   1152a:	68f9      	ldr	r1, [r7, #12]
   1152c:	2315      	movs	r3, #21
   1152e:	18fb      	adds	r3, r7, r3
   11530:	7818      	ldrb	r0, [r3, #0]
   11532:	2300      	movs	r3, #0
   11534:	9300      	str	r3, [sp, #0]
   11536:	0013      	movs	r3, r2
   11538:	2200      	movs	r2, #0
   1153a:	4c4d      	ldr	r4, [pc, #308]	; (11670 <nm_spi_write+0x168>)
   1153c:	47a0      	blx	r4
   1153e:	0002      	movs	r2, r0
   11540:	2317      	movs	r3, #23
   11542:	18fb      	adds	r3, r7, r3
   11544:	701a      	strb	r2, [r3, #0]
	if (result != N_OK) {
   11546:	2317      	movs	r3, #23
   11548:	18fb      	adds	r3, r7, r3
   1154a:	781b      	ldrb	r3, [r3, #0]
   1154c:	b25b      	sxtb	r3, r3
   1154e:	2b01      	cmp	r3, #1
   11550:	d010      	beq.n	11574 <nm_spi_write+0x6c>
		M2M_ERR( "[nmi spi]: Failed cmd, write block (%08x)...\n", addr);
   11552:	4a48      	ldr	r2, [pc, #288]	; (11674 <nm_spi_write+0x16c>)
   11554:	4948      	ldr	r1, [pc, #288]	; (11678 <nm_spi_write+0x170>)
   11556:	4b49      	ldr	r3, [pc, #292]	; (1167c <nm_spi_write+0x174>)
   11558:	0018      	movs	r0, r3
   1155a:	4b49      	ldr	r3, [pc, #292]	; (11680 <nm_spi_write+0x178>)
   1155c:	4798      	blx	r3
   1155e:	68fa      	ldr	r2, [r7, #12]
   11560:	4b48      	ldr	r3, [pc, #288]	; (11684 <nm_spi_write+0x17c>)
   11562:	0011      	movs	r1, r2
   11564:	0018      	movs	r0, r3
   11566:	4b46      	ldr	r3, [pc, #280]	; (11680 <nm_spi_write+0x178>)
   11568:	4798      	blx	r3
   1156a:	4b47      	ldr	r3, [pc, #284]	; (11688 <nm_spi_write+0x180>)
   1156c:	0018      	movs	r0, r3
   1156e:	4b44      	ldr	r3, [pc, #272]	; (11680 <nm_spi_write+0x178>)
   11570:	4798      	blx	r3
		goto _FAIL_;
   11572:	e03e      	b.n	115f2 <nm_spi_write+0xea>
#endif

	/**
		Data
	**/
	result = spi_data_write(buf, size);
   11574:	2317      	movs	r3, #23
   11576:	18fc      	adds	r4, r7, r3
   11578:	1dbb      	adds	r3, r7, #6
   1157a:	881a      	ldrh	r2, [r3, #0]
   1157c:	68bb      	ldr	r3, [r7, #8]
   1157e:	0011      	movs	r1, r2
   11580:	0018      	movs	r0, r3
   11582:	4b42      	ldr	r3, [pc, #264]	; (1168c <nm_spi_write+0x184>)
   11584:	4798      	blx	r3
   11586:	0003      	movs	r3, r0
   11588:	7023      	strb	r3, [r4, #0]
	if (result != N_OK) {
   1158a:	2317      	movs	r3, #23
   1158c:	18fb      	adds	r3, r7, r3
   1158e:	781b      	ldrb	r3, [r3, #0]
   11590:	b25b      	sxtb	r3, r3
   11592:	2b01      	cmp	r3, #1
   11594:	d00e      	beq.n	115b4 <nm_spi_write+0xac>
		M2M_ERR("[nmi spi]: Failed block data write...\n");
   11596:	4a3e      	ldr	r2, [pc, #248]	; (11690 <nm_spi_write+0x188>)
   11598:	4937      	ldr	r1, [pc, #220]	; (11678 <nm_spi_write+0x170>)
   1159a:	4b38      	ldr	r3, [pc, #224]	; (1167c <nm_spi_write+0x174>)
   1159c:	0018      	movs	r0, r3
   1159e:	4b38      	ldr	r3, [pc, #224]	; (11680 <nm_spi_write+0x178>)
   115a0:	4798      	blx	r3
   115a2:	4b3c      	ldr	r3, [pc, #240]	; (11694 <nm_spi_write+0x18c>)
   115a4:	0018      	movs	r0, r3
   115a6:	4b36      	ldr	r3, [pc, #216]	; (11680 <nm_spi_write+0x178>)
   115a8:	4798      	blx	r3
   115aa:	4b37      	ldr	r3, [pc, #220]	; (11688 <nm_spi_write+0x180>)
   115ac:	0018      	movs	r0, r3
   115ae:	4b34      	ldr	r3, [pc, #208]	; (11680 <nm_spi_write+0x178>)
   115b0:	4798      	blx	r3
		goto _FAIL_;
   115b2:	e01e      	b.n	115f2 <nm_spi_write+0xea>
	}
	/**
		Data RESP
	**/
	result = spi_data_rsp(cmd);
   115b4:	2317      	movs	r3, #23
   115b6:	18fc      	adds	r4, r7, r3
   115b8:	2315      	movs	r3, #21
   115ba:	18fb      	adds	r3, r7, r3
   115bc:	781b      	ldrb	r3, [r3, #0]
   115be:	0018      	movs	r0, r3
   115c0:	4b35      	ldr	r3, [pc, #212]	; (11698 <nm_spi_write+0x190>)
   115c2:	4798      	blx	r3
   115c4:	0003      	movs	r3, r0
   115c6:	7023      	strb	r3, [r4, #0]
	if (result != N_OK) {
   115c8:	2317      	movs	r3, #23
   115ca:	18fb      	adds	r3, r7, r3
   115cc:	781b      	ldrb	r3, [r3, #0]
   115ce:	b25b      	sxtb	r3, r3
   115d0:	2b01      	cmp	r3, #1
   115d2:	d00e      	beq.n	115f2 <nm_spi_write+0xea>
		M2M_ERR("[nmi spi]: Failed block data write...\n");
   115d4:	4a31      	ldr	r2, [pc, #196]	; (1169c <nm_spi_write+0x194>)
   115d6:	4928      	ldr	r1, [pc, #160]	; (11678 <nm_spi_write+0x170>)
   115d8:	4b28      	ldr	r3, [pc, #160]	; (1167c <nm_spi_write+0x174>)
   115da:	0018      	movs	r0, r3
   115dc:	4b28      	ldr	r3, [pc, #160]	; (11680 <nm_spi_write+0x178>)
   115de:	4798      	blx	r3
   115e0:	4b2c      	ldr	r3, [pc, #176]	; (11694 <nm_spi_write+0x18c>)
   115e2:	0018      	movs	r0, r3
   115e4:	4b26      	ldr	r3, [pc, #152]	; (11680 <nm_spi_write+0x178>)
   115e6:	4798      	blx	r3
   115e8:	4b27      	ldr	r3, [pc, #156]	; (11688 <nm_spi_write+0x180>)
   115ea:	0018      	movs	r0, r3
   115ec:	4b24      	ldr	r3, [pc, #144]	; (11680 <nm_spi_write+0x178>)
   115ee:	4798      	blx	r3
		goto _FAIL_;
   115f0:	46c0      	nop			; (mov r8, r8)
	}
	
_FAIL_:
	if(result != N_OK)
   115f2:	2317      	movs	r3, #23
   115f4:	18fb      	adds	r3, r7, r3
   115f6:	781b      	ldrb	r3, [r3, #0]
   115f8:	b25b      	sxtb	r3, r3
   115fa:	2b01      	cmp	r3, #1
   115fc:	d030      	beq.n	11660 <nm_spi_write+0x158>
	{
		nm_bsp_sleep(1);
   115fe:	2001      	movs	r0, #1
   11600:	4b27      	ldr	r3, [pc, #156]	; (116a0 <nm_spi_write+0x198>)
   11602:	4798      	blx	r3
		spi_cmd(CMD_RESET, 0, 0, 0, 0);
   11604:	2300      	movs	r3, #0
   11606:	9300      	str	r3, [sp, #0]
   11608:	2300      	movs	r3, #0
   1160a:	2200      	movs	r2, #0
   1160c:	2100      	movs	r1, #0
   1160e:	20cf      	movs	r0, #207	; 0xcf
   11610:	4c24      	ldr	r4, [pc, #144]	; (116a4 <nm_spi_write+0x19c>)
   11612:	47a0      	blx	r4
		spi_cmd_rsp(CMD_RESET);
   11614:	20cf      	movs	r0, #207	; 0xcf
   11616:	4b24      	ldr	r3, [pc, #144]	; (116a8 <nm_spi_write+0x1a0>)
   11618:	4798      	blx	r3
		M2M_ERR("Reset and retry %d %lx %d\n",retry,addr,size);
   1161a:	4a24      	ldr	r2, [pc, #144]	; (116ac <nm_spi_write+0x1a4>)
   1161c:	4916      	ldr	r1, [pc, #88]	; (11678 <nm_spi_write+0x170>)
   1161e:	4b17      	ldr	r3, [pc, #92]	; (1167c <nm_spi_write+0x174>)
   11620:	0018      	movs	r0, r3
   11622:	4b17      	ldr	r3, [pc, #92]	; (11680 <nm_spi_write+0x178>)
   11624:	4798      	blx	r3
   11626:	2316      	movs	r3, #22
   11628:	18fb      	adds	r3, r7, r3
   1162a:	7819      	ldrb	r1, [r3, #0]
   1162c:	1dbb      	adds	r3, r7, #6
   1162e:	881b      	ldrh	r3, [r3, #0]
   11630:	68fa      	ldr	r2, [r7, #12]
   11632:	481f      	ldr	r0, [pc, #124]	; (116b0 <nm_spi_write+0x1a8>)
   11634:	4c12      	ldr	r4, [pc, #72]	; (11680 <nm_spi_write+0x178>)
   11636:	47a0      	blx	r4
   11638:	4b13      	ldr	r3, [pc, #76]	; (11688 <nm_spi_write+0x180>)
   1163a:	0018      	movs	r0, r3
   1163c:	4b10      	ldr	r3, [pc, #64]	; (11680 <nm_spi_write+0x178>)
   1163e:	4798      	blx	r3
		nm_bsp_sleep(1);
   11640:	2001      	movs	r0, #1
   11642:	4b17      	ldr	r3, [pc, #92]	; (116a0 <nm_spi_write+0x198>)
   11644:	4798      	blx	r3
		retry--;
   11646:	2316      	movs	r3, #22
   11648:	18fb      	adds	r3, r7, r3
   1164a:	781a      	ldrb	r2, [r3, #0]
   1164c:	2316      	movs	r3, #22
   1164e:	18fb      	adds	r3, r7, r3
   11650:	3a01      	subs	r2, #1
   11652:	701a      	strb	r2, [r3, #0]
		if(retry) goto _RETRY_;
   11654:	2316      	movs	r3, #22
   11656:	18fb      	adds	r3, r7, r3
   11658:	781b      	ldrb	r3, [r3, #0]
   1165a:	2b00      	cmp	r3, #0
   1165c:	d000      	beq.n	11660 <nm_spi_write+0x158>
   1165e:	e762      	b.n	11526 <nm_spi_write+0x1e>
	}


	return result;
   11660:	2317      	movs	r3, #23
   11662:	18fb      	adds	r3, r7, r3
   11664:	781b      	ldrb	r3, [r3, #0]
   11666:	b25b      	sxtb	r3, r3
}
   11668:	0018      	movs	r0, r3
   1166a:	46bd      	mov	sp, r7
   1166c:	b007      	add	sp, #28
   1166e:	bd90      	pop	{r4, r7, pc}
   11670:	000108f1 	.word	0x000108f1
   11674:	000003cf 	.word	0x000003cf
   11678:	00025ec0 	.word	0x00025ec0
   1167c:	00025878 	.word	0x00025878
   11680:	0000addd 	.word	0x0000addd
   11684:	00025c2c 	.word	0x00025c2c
   11688:	000258b8 	.word	0x000258b8
   1168c:	000111e5 	.word	0x000111e5
   11690:	000003d9 	.word	0x000003d9
   11694:	00025c5c 	.word	0x00025c5c
   11698:	000106b5 	.word	0x000106b5
   1169c:	000003e1 	.word	0x000003e1
   116a0:	0000d231 	.word	0x0000d231
   116a4:	00010375 	.word	0x00010375
   116a8:	000107b5 	.word	0x000107b5
   116ac:	000003eb 	.word	0x000003eb
   116b0:	00025c84 	.word	0x00025c84

000116b4 <spi_read_reg>:

static sint8 spi_read_reg(uint32 addr, uint32 *u32data)
{
   116b4:	b590      	push	{r4, r7, lr}
   116b6:	b087      	sub	sp, #28
   116b8:	af02      	add	r7, sp, #8
   116ba:	6078      	str	r0, [r7, #4]
   116bc:	6039      	str	r1, [r7, #0]
	uint8 retry = SPI_RETRY_COUNT;
   116be:	230f      	movs	r3, #15
   116c0:	18fb      	adds	r3, r7, r3
   116c2:	220a      	movs	r2, #10
   116c4:	701a      	strb	r2, [r3, #0]
	sint8 result = N_OK;
   116c6:	230c      	movs	r3, #12
   116c8:	18fb      	adds	r3, r7, r3
   116ca:	2201      	movs	r2, #1
   116cc:	701a      	strb	r2, [r3, #0]
	uint8 cmd = CMD_SINGLE_READ;
   116ce:	230e      	movs	r3, #14
   116d0:	18fb      	adds	r3, r7, r3
   116d2:	22ca      	movs	r2, #202	; 0xca
   116d4:	701a      	strb	r2, [r3, #0]
	uint8 tmp[4];
	uint8 clockless = 0;
   116d6:	230d      	movs	r3, #13
   116d8:	18fb      	adds	r3, r7, r3
   116da:	2200      	movs	r2, #0
   116dc:	701a      	strb	r2, [r3, #0]

_RETRY_:

	if (addr <= 0xff)
   116de:	687b      	ldr	r3, [r7, #4]
   116e0:	2bff      	cmp	r3, #255	; 0xff
   116e2:	d808      	bhi.n	116f6 <spi_read_reg+0x42>
	{
		/**
		NMC1000 clockless registers.
		**/
		cmd = CMD_INTERNAL_READ;
   116e4:	230e      	movs	r3, #14
   116e6:	18fb      	adds	r3, r7, r3
   116e8:	22c4      	movs	r2, #196	; 0xc4
   116ea:	701a      	strb	r2, [r3, #0]
		clockless = 1;
   116ec:	230d      	movs	r3, #13
   116ee:	18fb      	adds	r3, r7, r3
   116f0:	2201      	movs	r2, #1
   116f2:	701a      	strb	r2, [r3, #0]
   116f4:	e007      	b.n	11706 <spi_read_reg+0x52>
	}
	else
	{
		cmd = CMD_SINGLE_READ;
   116f6:	230e      	movs	r3, #14
   116f8:	18fb      	adds	r3, r7, r3
   116fa:	22ca      	movs	r2, #202	; 0xca
   116fc:	701a      	strb	r2, [r3, #0]
		clockless = 0;
   116fe:	230d      	movs	r3, #13
   11700:	18fb      	adds	r3, r7, r3
   11702:	2200      	movs	r2, #0
   11704:	701a      	strb	r2, [r3, #0]
	if (result != N_OK) {
		M2M_ERR("[nmi spi]: Failed data read...\n");
		goto _FAIL_;
	}
#else
	result = spi_cmd_complete(cmd, addr, (uint8*)&tmp[0], 4, clockless);
   11706:	2308      	movs	r3, #8
   11708:	18fa      	adds	r2, r7, r3
   1170a:	6879      	ldr	r1, [r7, #4]
   1170c:	230e      	movs	r3, #14
   1170e:	18fb      	adds	r3, r7, r3
   11710:	7818      	ldrb	r0, [r3, #0]
   11712:	230d      	movs	r3, #13
   11714:	18fb      	adds	r3, r7, r3
   11716:	781b      	ldrb	r3, [r3, #0]
   11718:	9300      	str	r3, [sp, #0]
   1171a:	2304      	movs	r3, #4
   1171c:	4c37      	ldr	r4, [pc, #220]	; (117fc <spi_read_reg+0x148>)
   1171e:	47a0      	blx	r4
   11720:	0002      	movs	r2, r0
   11722:	230c      	movs	r3, #12
   11724:	18fb      	adds	r3, r7, r3
   11726:	701a      	strb	r2, [r3, #0]
	if (result != N_OK) {
   11728:	230c      	movs	r3, #12
   1172a:	18fb      	adds	r3, r7, r3
   1172c:	781b      	ldrb	r3, [r3, #0]
   1172e:	b25b      	sxtb	r3, r3
   11730:	2b01      	cmp	r3, #1
   11732:	d010      	beq.n	11756 <spi_read_reg+0xa2>
		M2M_ERR( "[nmi spi]: Failed cmd, read reg (%08x)...\n", addr);
   11734:	4a32      	ldr	r2, [pc, #200]	; (11800 <spi_read_reg+0x14c>)
   11736:	4933      	ldr	r1, [pc, #204]	; (11804 <spi_read_reg+0x150>)
   11738:	4b33      	ldr	r3, [pc, #204]	; (11808 <spi_read_reg+0x154>)
   1173a:	0018      	movs	r0, r3
   1173c:	4b33      	ldr	r3, [pc, #204]	; (1180c <spi_read_reg+0x158>)
   1173e:	4798      	blx	r3
   11740:	687a      	ldr	r2, [r7, #4]
   11742:	4b33      	ldr	r3, [pc, #204]	; (11810 <spi_read_reg+0x15c>)
   11744:	0011      	movs	r1, r2
   11746:	0018      	movs	r0, r3
   11748:	4b30      	ldr	r3, [pc, #192]	; (1180c <spi_read_reg+0x158>)
   1174a:	4798      	blx	r3
   1174c:	4b31      	ldr	r3, [pc, #196]	; (11814 <spi_read_reg+0x160>)
   1174e:	0018      	movs	r0, r3
   11750:	4b2e      	ldr	r3, [pc, #184]	; (1180c <spi_read_reg+0x158>)
   11752:	4798      	blx	r3
		goto _FAIL_;
   11754:	e014      	b.n	11780 <spi_read_reg+0xcc>
	}

#endif

	*u32data = tmp[0] |
   11756:	2308      	movs	r3, #8
   11758:	18fb      	adds	r3, r7, r3
   1175a:	781b      	ldrb	r3, [r3, #0]
   1175c:	001a      	movs	r2, r3
		((uint32)tmp[1] << 8) |
   1175e:	2308      	movs	r3, #8
   11760:	18fb      	adds	r3, r7, r3
   11762:	785b      	ldrb	r3, [r3, #1]
   11764:	021b      	lsls	r3, r3, #8
	*u32data = tmp[0] |
   11766:	431a      	orrs	r2, r3
		((uint32)tmp[2] << 16) |
   11768:	2308      	movs	r3, #8
   1176a:	18fb      	adds	r3, r7, r3
   1176c:	789b      	ldrb	r3, [r3, #2]
   1176e:	041b      	lsls	r3, r3, #16
		((uint32)tmp[1] << 8) |
   11770:	431a      	orrs	r2, r3
		((uint32)tmp[3] << 24);
   11772:	2308      	movs	r3, #8
   11774:	18fb      	adds	r3, r7, r3
   11776:	78db      	ldrb	r3, [r3, #3]
   11778:	061b      	lsls	r3, r3, #24
		((uint32)tmp[2] << 16) |
   1177a:	431a      	orrs	r2, r3
	*u32data = tmp[0] |
   1177c:	683b      	ldr	r3, [r7, #0]
   1177e:	601a      	str	r2, [r3, #0]
		
_FAIL_:
	if(result != N_OK)
   11780:	230c      	movs	r3, #12
   11782:	18fb      	adds	r3, r7, r3
   11784:	781b      	ldrb	r3, [r3, #0]
   11786:	b25b      	sxtb	r3, r3
   11788:	2b01      	cmp	r3, #1
   1178a:	d02f      	beq.n	117ec <spi_read_reg+0x138>
	{
		
		nm_bsp_sleep(1);
   1178c:	2001      	movs	r0, #1
   1178e:	4b22      	ldr	r3, [pc, #136]	; (11818 <spi_read_reg+0x164>)
   11790:	4798      	blx	r3
		spi_cmd(CMD_RESET, 0, 0, 0, 0);
   11792:	2300      	movs	r3, #0
   11794:	9300      	str	r3, [sp, #0]
   11796:	2300      	movs	r3, #0
   11798:	2200      	movs	r2, #0
   1179a:	2100      	movs	r1, #0
   1179c:	20cf      	movs	r0, #207	; 0xcf
   1179e:	4c1f      	ldr	r4, [pc, #124]	; (1181c <spi_read_reg+0x168>)
   117a0:	47a0      	blx	r4
		spi_cmd_rsp(CMD_RESET);
   117a2:	20cf      	movs	r0, #207	; 0xcf
   117a4:	4b1e      	ldr	r3, [pc, #120]	; (11820 <spi_read_reg+0x16c>)
   117a6:	4798      	blx	r3
		M2M_ERR("Reset and retry %d %lx\n",retry,addr);
   117a8:	4a1e      	ldr	r2, [pc, #120]	; (11824 <spi_read_reg+0x170>)
   117aa:	4916      	ldr	r1, [pc, #88]	; (11804 <spi_read_reg+0x150>)
   117ac:	4b16      	ldr	r3, [pc, #88]	; (11808 <spi_read_reg+0x154>)
   117ae:	0018      	movs	r0, r3
   117b0:	4b16      	ldr	r3, [pc, #88]	; (1180c <spi_read_reg+0x158>)
   117b2:	4798      	blx	r3
   117b4:	230f      	movs	r3, #15
   117b6:	18fb      	adds	r3, r7, r3
   117b8:	7819      	ldrb	r1, [r3, #0]
   117ba:	687a      	ldr	r2, [r7, #4]
   117bc:	4b1a      	ldr	r3, [pc, #104]	; (11828 <spi_read_reg+0x174>)
   117be:	0018      	movs	r0, r3
   117c0:	4b12      	ldr	r3, [pc, #72]	; (1180c <spi_read_reg+0x158>)
   117c2:	4798      	blx	r3
   117c4:	4b13      	ldr	r3, [pc, #76]	; (11814 <spi_read_reg+0x160>)
   117c6:	0018      	movs	r0, r3
   117c8:	4b10      	ldr	r3, [pc, #64]	; (1180c <spi_read_reg+0x158>)
   117ca:	4798      	blx	r3
		nm_bsp_sleep(1);
   117cc:	2001      	movs	r0, #1
   117ce:	4b12      	ldr	r3, [pc, #72]	; (11818 <spi_read_reg+0x164>)
   117d0:	4798      	blx	r3
		retry--;
   117d2:	230f      	movs	r3, #15
   117d4:	18fb      	adds	r3, r7, r3
   117d6:	781a      	ldrb	r2, [r3, #0]
   117d8:	230f      	movs	r3, #15
   117da:	18fb      	adds	r3, r7, r3
   117dc:	3a01      	subs	r2, #1
   117de:	701a      	strb	r2, [r3, #0]
		if(retry) goto _RETRY_;
   117e0:	230f      	movs	r3, #15
   117e2:	18fb      	adds	r3, r7, r3
   117e4:	781b      	ldrb	r3, [r3, #0]
   117e6:	2b00      	cmp	r3, #0
   117e8:	d000      	beq.n	117ec <spi_read_reg+0x138>
   117ea:	e778      	b.n	116de <spi_read_reg+0x2a>
	}
		
	return result;
   117ec:	230c      	movs	r3, #12
   117ee:	18fb      	adds	r3, r7, r3
   117f0:	781b      	ldrb	r3, [r3, #0]
   117f2:	b25b      	sxtb	r3, r3
}
   117f4:	0018      	movs	r0, r3
   117f6:	46bd      	mov	sp, r7
   117f8:	b005      	add	sp, #20
   117fa:	bd90      	pop	{r4, r7, pc}
   117fc:	000108f1 	.word	0x000108f1
   11800:	00000423 	.word	0x00000423
   11804:	00025ed0 	.word	0x00025ed0
   11808:	00025878 	.word	0x00025878
   1180c:	0000addd 	.word	0x0000addd
   11810:	00025ca0 	.word	0x00025ca0
   11814:	000258b8 	.word	0x000258b8
   11818:	0000d231 	.word	0x0000d231
   1181c:	00010375 	.word	0x00010375
   11820:	000107b5 	.word	0x000107b5
   11824:	00000435 	.word	0x00000435
   11828:	00025ccc 	.word	0x00025ccc

0001182c <nm_spi_read>:

static sint8 nm_spi_read(uint32 addr, uint8 *buf, uint16 size)
{
   1182c:	b590      	push	{r4, r7, lr}
   1182e:	b089      	sub	sp, #36	; 0x24
   11830:	af02      	add	r7, sp, #8
   11832:	60f8      	str	r0, [r7, #12]
   11834:	60b9      	str	r1, [r7, #8]
   11836:	1dbb      	adds	r3, r7, #6
   11838:	801a      	strh	r2, [r3, #0]
	uint8 cmd = CMD_DMA_EXT_READ;
   1183a:	2316      	movs	r3, #22
   1183c:	18fb      	adds	r3, r7, r3
   1183e:	22c8      	movs	r2, #200	; 0xc8
   11840:	701a      	strb	r2, [r3, #0]
	sint8 result;
	uint8 retry = SPI_RETRY_COUNT;
   11842:	2317      	movs	r3, #23
   11844:	18fb      	adds	r3, r7, r3
   11846:	220a      	movs	r2, #10
   11848:	701a      	strb	r2, [r3, #0]
	if (result != N_OK) {
		M2M_ERR("[nmi spi]: Failed block data read...\n");
		goto _FAIL_;
	}
#else
	result = spi_cmd_complete(cmd, addr, buf, size, 0);
   1184a:	1dbb      	adds	r3, r7, #6
   1184c:	881c      	ldrh	r4, [r3, #0]
   1184e:	68ba      	ldr	r2, [r7, #8]
   11850:	68f9      	ldr	r1, [r7, #12]
   11852:	2316      	movs	r3, #22
   11854:	18fb      	adds	r3, r7, r3
   11856:	7818      	ldrb	r0, [r3, #0]
   11858:	2300      	movs	r3, #0
   1185a:	9300      	str	r3, [sp, #0]
   1185c:	0023      	movs	r3, r4
   1185e:	4c2e      	ldr	r4, [pc, #184]	; (11918 <nm_spi_read+0xec>)
   11860:	47a0      	blx	r4
   11862:	0002      	movs	r2, r0
   11864:	2315      	movs	r3, #21
   11866:	18fb      	adds	r3, r7, r3
   11868:	701a      	strb	r2, [r3, #0]
	if (result != N_OK) {
   1186a:	2315      	movs	r3, #21
   1186c:	18fb      	adds	r3, r7, r3
   1186e:	781b      	ldrb	r3, [r3, #0]
   11870:	b25b      	sxtb	r3, r3
   11872:	2b01      	cmp	r3, #1
   11874:	d010      	beq.n	11898 <nm_spi_read+0x6c>
		M2M_ERR("[nmi spi]: Failed cmd, read block (%08x)...\n", addr);
   11876:	4a29      	ldr	r2, [pc, #164]	; (1191c <nm_spi_read+0xf0>)
   11878:	4929      	ldr	r1, [pc, #164]	; (11920 <nm_spi_read+0xf4>)
   1187a:	4b2a      	ldr	r3, [pc, #168]	; (11924 <nm_spi_read+0xf8>)
   1187c:	0018      	movs	r0, r3
   1187e:	4b2a      	ldr	r3, [pc, #168]	; (11928 <nm_spi_read+0xfc>)
   11880:	4798      	blx	r3
   11882:	68fa      	ldr	r2, [r7, #12]
   11884:	4b29      	ldr	r3, [pc, #164]	; (1192c <nm_spi_read+0x100>)
   11886:	0011      	movs	r1, r2
   11888:	0018      	movs	r0, r3
   1188a:	4b27      	ldr	r3, [pc, #156]	; (11928 <nm_spi_read+0xfc>)
   1188c:	4798      	blx	r3
   1188e:	4b28      	ldr	r3, [pc, #160]	; (11930 <nm_spi_read+0x104>)
   11890:	0018      	movs	r0, r3
   11892:	4b25      	ldr	r3, [pc, #148]	; (11928 <nm_spi_read+0xfc>)
   11894:	4798      	blx	r3
		goto _FAIL_;
   11896:	46c0      	nop			; (mov r8, r8)
	}
#endif

_FAIL_:
	if(result != N_OK)
   11898:	2315      	movs	r3, #21
   1189a:	18fb      	adds	r3, r7, r3
   1189c:	781b      	ldrb	r3, [r3, #0]
   1189e:	b25b      	sxtb	r3, r3
   118a0:	2b01      	cmp	r3, #1
   118a2:	d030      	beq.n	11906 <nm_spi_read+0xda>
	{
		nm_bsp_sleep(1);
   118a4:	2001      	movs	r0, #1
   118a6:	4b23      	ldr	r3, [pc, #140]	; (11934 <nm_spi_read+0x108>)
   118a8:	4798      	blx	r3
		spi_cmd(CMD_RESET, 0, 0, 0, 0);
   118aa:	2300      	movs	r3, #0
   118ac:	9300      	str	r3, [sp, #0]
   118ae:	2300      	movs	r3, #0
   118b0:	2200      	movs	r2, #0
   118b2:	2100      	movs	r1, #0
   118b4:	20cf      	movs	r0, #207	; 0xcf
   118b6:	4c20      	ldr	r4, [pc, #128]	; (11938 <nm_spi_read+0x10c>)
   118b8:	47a0      	blx	r4
		spi_cmd_rsp(CMD_RESET);
   118ba:	20cf      	movs	r0, #207	; 0xcf
   118bc:	4b1f      	ldr	r3, [pc, #124]	; (1193c <nm_spi_read+0x110>)
   118be:	4798      	blx	r3
		M2M_ERR("Reset and retry %d %lx %d\n",retry,addr,size);
   118c0:	4a1f      	ldr	r2, [pc, #124]	; (11940 <nm_spi_read+0x114>)
   118c2:	4917      	ldr	r1, [pc, #92]	; (11920 <nm_spi_read+0xf4>)
   118c4:	4b17      	ldr	r3, [pc, #92]	; (11924 <nm_spi_read+0xf8>)
   118c6:	0018      	movs	r0, r3
   118c8:	4b17      	ldr	r3, [pc, #92]	; (11928 <nm_spi_read+0xfc>)
   118ca:	4798      	blx	r3
   118cc:	2317      	movs	r3, #23
   118ce:	18fb      	adds	r3, r7, r3
   118d0:	7819      	ldrb	r1, [r3, #0]
   118d2:	1dbb      	adds	r3, r7, #6
   118d4:	881b      	ldrh	r3, [r3, #0]
   118d6:	68fa      	ldr	r2, [r7, #12]
   118d8:	481a      	ldr	r0, [pc, #104]	; (11944 <nm_spi_read+0x118>)
   118da:	4c13      	ldr	r4, [pc, #76]	; (11928 <nm_spi_read+0xfc>)
   118dc:	47a0      	blx	r4
   118de:	4b14      	ldr	r3, [pc, #80]	; (11930 <nm_spi_read+0x104>)
   118e0:	0018      	movs	r0, r3
   118e2:	4b11      	ldr	r3, [pc, #68]	; (11928 <nm_spi_read+0xfc>)
   118e4:	4798      	blx	r3
		nm_bsp_sleep(1);
   118e6:	2001      	movs	r0, #1
   118e8:	4b12      	ldr	r3, [pc, #72]	; (11934 <nm_spi_read+0x108>)
   118ea:	4798      	blx	r3
		retry--;
   118ec:	2317      	movs	r3, #23
   118ee:	18fb      	adds	r3, r7, r3
   118f0:	781a      	ldrb	r2, [r3, #0]
   118f2:	2317      	movs	r3, #23
   118f4:	18fb      	adds	r3, r7, r3
   118f6:	3a01      	subs	r2, #1
   118f8:	701a      	strb	r2, [r3, #0]
		if(retry) goto _RETRY_;
   118fa:	2317      	movs	r3, #23
   118fc:	18fb      	adds	r3, r7, r3
   118fe:	781b      	ldrb	r3, [r3, #0]
   11900:	2b00      	cmp	r3, #0
   11902:	d000      	beq.n	11906 <nm_spi_read+0xda>
   11904:	e7a1      	b.n	1184a <nm_spi_read+0x1e>
	}

	return result;
   11906:	2315      	movs	r3, #21
   11908:	18fb      	adds	r3, r7, r3
   1190a:	781b      	ldrb	r3, [r3, #0]
   1190c:	b25b      	sxtb	r3, r3
}
   1190e:	0018      	movs	r0, r3
   11910:	46bd      	mov	sp, r7
   11912:	b007      	add	sp, #28
   11914:	bd90      	pop	{r4, r7, pc}
   11916:	46c0      	nop			; (mov r8, r8)
   11918:	000108f1 	.word	0x000108f1
   1191c:	00000472 	.word	0x00000472
   11920:	00025ee0 	.word	0x00025ee0
   11924:	00025878 	.word	0x00025878
   11928:	0000addd 	.word	0x0000addd
   1192c:	00025ce4 	.word	0x00025ce4
   11930:	000258b8 	.word	0x000258b8
   11934:	0000d231 	.word	0x0000d231
   11938:	00010375 	.word	0x00010375
   1193c:	000107b5 	.word	0x000107b5
   11940:	0000047d 	.word	0x0000047d
   11944:	00025c84 	.word	0x00025c84

00011948 <spi_init_pkt_sz>:
	Bus interfaces

********************************************/

static void spi_init_pkt_sz(void)
{
   11948:	b580      	push	{r7, lr}
   1194a:	b082      	sub	sp, #8
   1194c:	af00      	add	r7, sp, #0
	uint32 val32;

	/* Make sure SPI max. packet size fits the defined DATA_PKT_SZ.  */
	val32 = nm_spi_read_reg(SPI_BASE+0x24);
   1194e:	4b0c      	ldr	r3, [pc, #48]	; (11980 <spi_init_pkt_sz+0x38>)
   11950:	0018      	movs	r0, r3
   11952:	4b0c      	ldr	r3, [pc, #48]	; (11984 <spi_init_pkt_sz+0x3c>)
   11954:	4798      	blx	r3
   11956:	0003      	movs	r3, r0
   11958:	607b      	str	r3, [r7, #4]
	val32 &= ~(0x7 << 4);
   1195a:	687b      	ldr	r3, [r7, #4]
   1195c:	2270      	movs	r2, #112	; 0x70
   1195e:	4393      	bics	r3, r2
   11960:	607b      	str	r3, [r7, #4]
	case 256:  val32 |= (0 << 4); break;
	case 512:  val32 |= (1 << 4); break;
	case 1024: val32 |= (2 << 4); break;
	case 2048: val32 |= (3 << 4); break;
	case 4096: val32 |= (4 << 4); break;
	case 8192: val32 |= (5 << 4); break;
   11962:	687b      	ldr	r3, [r7, #4]
   11964:	2250      	movs	r2, #80	; 0x50
   11966:	4313      	orrs	r3, r2
   11968:	607b      	str	r3, [r7, #4]
   1196a:	46c0      	nop			; (mov r8, r8)

	}
	nm_spi_write_reg(SPI_BASE+0x24, val32);
   1196c:	687b      	ldr	r3, [r7, #4]
   1196e:	4a04      	ldr	r2, [pc, #16]	; (11980 <spi_init_pkt_sz+0x38>)
   11970:	0019      	movs	r1, r3
   11972:	0010      	movs	r0, r2
   11974:	4b04      	ldr	r3, [pc, #16]	; (11988 <spi_init_pkt_sz+0x40>)
   11976:	4798      	blx	r3
}
   11978:	46c0      	nop			; (mov r8, r8)
   1197a:	46bd      	mov	sp, r7
   1197c:	b002      	add	sp, #8
   1197e:	bd80      	pop	{r7, pc}
   11980:	0000e824 	.word	0x0000e824
   11984:	00011b21 	.word	0x00011b21
   11988:	00011b95 	.word	0x00011b95

0001198c <nm_spi_reset>:

sint8 nm_spi_reset(void)
{
   1198c:	b590      	push	{r4, r7, lr}
   1198e:	b083      	sub	sp, #12
   11990:	af02      	add	r7, sp, #8
	spi_cmd(CMD_RESET, 0, 0, 0, 0);
   11992:	2300      	movs	r3, #0
   11994:	9300      	str	r3, [sp, #0]
   11996:	2300      	movs	r3, #0
   11998:	2200      	movs	r2, #0
   1199a:	2100      	movs	r1, #0
   1199c:	20cf      	movs	r0, #207	; 0xcf
   1199e:	4c05      	ldr	r4, [pc, #20]	; (119b4 <nm_spi_reset+0x28>)
   119a0:	47a0      	blx	r4
	spi_cmd_rsp(CMD_RESET);
   119a2:	20cf      	movs	r0, #207	; 0xcf
   119a4:	4b04      	ldr	r3, [pc, #16]	; (119b8 <nm_spi_reset+0x2c>)
   119a6:	4798      	blx	r3
	return M2M_SUCCESS;
   119a8:	2300      	movs	r3, #0
}
   119aa:	0018      	movs	r0, r3
   119ac:	46bd      	mov	sp, r7
   119ae:	b001      	add	sp, #4
   119b0:	bd90      	pop	{r4, r7, pc}
   119b2:	46c0      	nop			; (mov r8, r8)
   119b4:	00010375 	.word	0x00010375
   119b8:	000107b5 	.word	0x000107b5

000119bc <nm_spi_init>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_spi_init(void)
{
   119bc:	b580      	push	{r7, lr}
   119be:	b082      	sub	sp, #8
   119c0:	af00      	add	r7, sp, #0
	uint32 chipid;
	uint32 reg = 0;
   119c2:	2300      	movs	r3, #0
   119c4:	603b      	str	r3, [r7, #0]
	

	/**
		configure protocol
	**/
	gu8Crc_off = 0;
   119c6:	4b40      	ldr	r3, [pc, #256]	; (11ac8 <nm_spi_init+0x10c>)
   119c8:	2200      	movs	r2, #0
   119ca:	701a      	strb	r2, [r3, #0]

	// TODO: We can remove the CRC trials if there is a definite way to reset
	// the SPI to it's initial value.
	if (!spi_read_reg(NMI_SPI_PROTOCOL_CONFIG, &reg)) {
   119cc:	003b      	movs	r3, r7
   119ce:	4a3f      	ldr	r2, [pc, #252]	; (11acc <nm_spi_init+0x110>)
   119d0:	0019      	movs	r1, r3
   119d2:	0010      	movs	r0, r2
   119d4:	4b3e      	ldr	r3, [pc, #248]	; (11ad0 <nm_spi_init+0x114>)
   119d6:	4798      	blx	r3
   119d8:	1e03      	subs	r3, r0, #0
   119da:	d129      	bne.n	11a30 <nm_spi_init+0x74>
		/* Read failed. Try with CRC off. This might happen when module
		is removed but chip isn't reset*/
		gu8Crc_off = 1;
   119dc:	4b3a      	ldr	r3, [pc, #232]	; (11ac8 <nm_spi_init+0x10c>)
   119de:	2201      	movs	r2, #1
   119e0:	701a      	strb	r2, [r3, #0]
		M2M_ERR("[nmi spi]: Failed internal read protocol with CRC on, retyring with CRC off...\n");
   119e2:	2398      	movs	r3, #152	; 0x98
   119e4:	00da      	lsls	r2, r3, #3
   119e6:	493b      	ldr	r1, [pc, #236]	; (11ad4 <nm_spi_init+0x118>)
   119e8:	4b3b      	ldr	r3, [pc, #236]	; (11ad8 <nm_spi_init+0x11c>)
   119ea:	0018      	movs	r0, r3
   119ec:	4b3b      	ldr	r3, [pc, #236]	; (11adc <nm_spi_init+0x120>)
   119ee:	4798      	blx	r3
   119f0:	4b3b      	ldr	r3, [pc, #236]	; (11ae0 <nm_spi_init+0x124>)
   119f2:	0018      	movs	r0, r3
   119f4:	4b39      	ldr	r3, [pc, #228]	; (11adc <nm_spi_init+0x120>)
   119f6:	4798      	blx	r3
   119f8:	4b3a      	ldr	r3, [pc, #232]	; (11ae4 <nm_spi_init+0x128>)
   119fa:	0018      	movs	r0, r3
   119fc:	4b37      	ldr	r3, [pc, #220]	; (11adc <nm_spi_init+0x120>)
   119fe:	4798      	blx	r3
		if (!spi_read_reg(NMI_SPI_PROTOCOL_CONFIG, &reg)){
   11a00:	003b      	movs	r3, r7
   11a02:	4a32      	ldr	r2, [pc, #200]	; (11acc <nm_spi_init+0x110>)
   11a04:	0019      	movs	r1, r3
   11a06:	0010      	movs	r0, r2
   11a08:	4b31      	ldr	r3, [pc, #196]	; (11ad0 <nm_spi_init+0x114>)
   11a0a:	4798      	blx	r3
   11a0c:	1e03      	subs	r3, r0, #0
   11a0e:	d10f      	bne.n	11a30 <nm_spi_init+0x74>
			// Reaad failed with both CRC on and off, something went bad
			M2M_ERR( "[nmi spi]: Failed internal read protocol...\n");
   11a10:	4a35      	ldr	r2, [pc, #212]	; (11ae8 <nm_spi_init+0x12c>)
   11a12:	4930      	ldr	r1, [pc, #192]	; (11ad4 <nm_spi_init+0x118>)
   11a14:	4b30      	ldr	r3, [pc, #192]	; (11ad8 <nm_spi_init+0x11c>)
   11a16:	0018      	movs	r0, r3
   11a18:	4b30      	ldr	r3, [pc, #192]	; (11adc <nm_spi_init+0x120>)
   11a1a:	4798      	blx	r3
   11a1c:	4b33      	ldr	r3, [pc, #204]	; (11aec <nm_spi_init+0x130>)
   11a1e:	0018      	movs	r0, r3
   11a20:	4b2e      	ldr	r3, [pc, #184]	; (11adc <nm_spi_init+0x120>)
   11a22:	4798      	blx	r3
   11a24:	4b2f      	ldr	r3, [pc, #188]	; (11ae4 <nm_spi_init+0x128>)
   11a26:	0018      	movs	r0, r3
   11a28:	4b2c      	ldr	r3, [pc, #176]	; (11adc <nm_spi_init+0x120>)
   11a2a:	4798      	blx	r3
			return 0;
   11a2c:	2300      	movs	r3, #0
   11a2e:	e047      	b.n	11ac0 <nm_spi_init+0x104>
		}
	}
	if(gu8Crc_off == 0)
   11a30:	4b25      	ldr	r3, [pc, #148]	; (11ac8 <nm_spi_init+0x10c>)
   11a32:	781b      	ldrb	r3, [r3, #0]
   11a34:	2b00      	cmp	r3, #0
   11a36:	d126      	bne.n	11a86 <nm_spi_init+0xca>
	{
		reg &= ~0xc;	/* disable crc checking */
   11a38:	683b      	ldr	r3, [r7, #0]
   11a3a:	220c      	movs	r2, #12
   11a3c:	4393      	bics	r3, r2
   11a3e:	603b      	str	r3, [r7, #0]
		reg &= ~0x70;
   11a40:	683b      	ldr	r3, [r7, #0]
   11a42:	2270      	movs	r2, #112	; 0x70
   11a44:	4393      	bics	r3, r2
   11a46:	603b      	str	r3, [r7, #0]
		reg |= (0x5 << 4);
   11a48:	683b      	ldr	r3, [r7, #0]
   11a4a:	2250      	movs	r2, #80	; 0x50
   11a4c:	4313      	orrs	r3, r2
   11a4e:	603b      	str	r3, [r7, #0]
		if (!spi_write_reg(NMI_SPI_PROTOCOL_CONFIG, reg)) {
   11a50:	683b      	ldr	r3, [r7, #0]
   11a52:	4a1e      	ldr	r2, [pc, #120]	; (11acc <nm_spi_init+0x110>)
   11a54:	0019      	movs	r1, r3
   11a56:	0010      	movs	r0, r2
   11a58:	4b25      	ldr	r3, [pc, #148]	; (11af0 <nm_spi_init+0x134>)
   11a5a:	4798      	blx	r3
   11a5c:	1e03      	subs	r3, r0, #0
   11a5e:	d10f      	bne.n	11a80 <nm_spi_init+0xc4>
			M2M_ERR( "[nmi spi]: Failed internal write protocol reg...\n");
   11a60:	4a24      	ldr	r2, [pc, #144]	; (11af4 <nm_spi_init+0x138>)
   11a62:	491c      	ldr	r1, [pc, #112]	; (11ad4 <nm_spi_init+0x118>)
   11a64:	4b1c      	ldr	r3, [pc, #112]	; (11ad8 <nm_spi_init+0x11c>)
   11a66:	0018      	movs	r0, r3
   11a68:	4b1c      	ldr	r3, [pc, #112]	; (11adc <nm_spi_init+0x120>)
   11a6a:	4798      	blx	r3
   11a6c:	4b22      	ldr	r3, [pc, #136]	; (11af8 <nm_spi_init+0x13c>)
   11a6e:	0018      	movs	r0, r3
   11a70:	4b1a      	ldr	r3, [pc, #104]	; (11adc <nm_spi_init+0x120>)
   11a72:	4798      	blx	r3
   11a74:	4b1b      	ldr	r3, [pc, #108]	; (11ae4 <nm_spi_init+0x128>)
   11a76:	0018      	movs	r0, r3
   11a78:	4b18      	ldr	r3, [pc, #96]	; (11adc <nm_spi_init+0x120>)
   11a7a:	4798      	blx	r3
			return 0;
   11a7c:	2300      	movs	r3, #0
   11a7e:	e01f      	b.n	11ac0 <nm_spi_init+0x104>
		}
		gu8Crc_off = 1;
   11a80:	4b11      	ldr	r3, [pc, #68]	; (11ac8 <nm_spi_init+0x10c>)
   11a82:	2201      	movs	r2, #1
   11a84:	701a      	strb	r2, [r3, #0]
	}

	/**
		make sure can read back chip id correctly
	**/
	if (!spi_read_reg(0x1000, &chipid)) {
   11a86:	1d3a      	adds	r2, r7, #4
   11a88:	2380      	movs	r3, #128	; 0x80
   11a8a:	015b      	lsls	r3, r3, #5
   11a8c:	0011      	movs	r1, r2
   11a8e:	0018      	movs	r0, r3
   11a90:	4b0f      	ldr	r3, [pc, #60]	; (11ad0 <nm_spi_init+0x114>)
   11a92:	4798      	blx	r3
   11a94:	1e03      	subs	r3, r0, #0
   11a96:	d110      	bne.n	11aba <nm_spi_init+0xfe>
		M2M_ERR("[nmi spi]: Fail cmd read chip id...\n");
   11a98:	4a18      	ldr	r2, [pc, #96]	; (11afc <nm_spi_init+0x140>)
   11a9a:	490e      	ldr	r1, [pc, #56]	; (11ad4 <nm_spi_init+0x118>)
   11a9c:	4b0e      	ldr	r3, [pc, #56]	; (11ad8 <nm_spi_init+0x11c>)
   11a9e:	0018      	movs	r0, r3
   11aa0:	4b0e      	ldr	r3, [pc, #56]	; (11adc <nm_spi_init+0x120>)
   11aa2:	4798      	blx	r3
   11aa4:	4b16      	ldr	r3, [pc, #88]	; (11b00 <nm_spi_init+0x144>)
   11aa6:	0018      	movs	r0, r3
   11aa8:	4b0c      	ldr	r3, [pc, #48]	; (11adc <nm_spi_init+0x120>)
   11aaa:	4798      	blx	r3
   11aac:	4b0d      	ldr	r3, [pc, #52]	; (11ae4 <nm_spi_init+0x128>)
   11aae:	0018      	movs	r0, r3
   11ab0:	4b0a      	ldr	r3, [pc, #40]	; (11adc <nm_spi_init+0x120>)
   11ab2:	4798      	blx	r3
		return M2M_ERR_BUS_FAIL;
   11ab4:	2306      	movs	r3, #6
   11ab6:	425b      	negs	r3, r3
   11ab8:	e002      	b.n	11ac0 <nm_spi_init+0x104>
	}

	M2M_DBG("[nmi spi]: chipid (%08x)\n", (unsigned int)chipid);
	spi_init_pkt_sz();
   11aba:	4b12      	ldr	r3, [pc, #72]	; (11b04 <nm_spi_init+0x148>)
   11abc:	4798      	blx	r3


	return M2M_SUCCESS;
   11abe:	2300      	movs	r3, #0
}
   11ac0:	0018      	movs	r0, r3
   11ac2:	46bd      	mov	sp, r7
   11ac4:	b002      	add	sp, #8
   11ac6:	bd80      	pop	{r7, pc}
   11ac8:	20003d2c 	.word	0x20003d2c
   11acc:	0000e824 	.word	0x0000e824
   11ad0:	000116b5 	.word	0x000116b5
   11ad4:	00025eec 	.word	0x00025eec
   11ad8:	00025878 	.word	0x00025878
   11adc:	0000addd 	.word	0x0000addd
   11ae0:	00025d14 	.word	0x00025d14
   11ae4:	000258b8 	.word	0x000258b8
   11ae8:	000004c3 	.word	0x000004c3
   11aec:	00025d64 	.word	0x00025d64
   11af0:	000113bd 	.word	0x000113bd
   11af4:	000004cd 	.word	0x000004cd
   11af8:	00025d94 	.word	0x00025d94
   11afc:	000004d7 	.word	0x000004d7
   11b00:	00025dc8 	.word	0x00025dc8
   11b04:	00011949 	.word	0x00011949

00011b08 <nm_spi_deinit>:
*	@author	Samer Sarhan
*	@date	27 Feb 2015
*	@version	1.0
*/ 
sint8 nm_spi_deinit(void)
{
   11b08:	b580      	push	{r7, lr}
   11b0a:	af00      	add	r7, sp, #0
	gu8Crc_off = 0;
   11b0c:	4b03      	ldr	r3, [pc, #12]	; (11b1c <nm_spi_deinit+0x14>)
   11b0e:	2200      	movs	r2, #0
   11b10:	701a      	strb	r2, [r3, #0]
	return M2M_SUCCESS;
   11b12:	2300      	movs	r3, #0
}
   11b14:	0018      	movs	r0, r3
   11b16:	46bd      	mov	sp, r7
   11b18:	bd80      	pop	{r7, pc}
   11b1a:	46c0      	nop			; (mov r8, r8)
   11b1c:	20003d2c 	.word	0x20003d2c

00011b20 <nm_spi_read_reg>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
uint32 nm_spi_read_reg(uint32 u32Addr)
{
   11b20:	b580      	push	{r7, lr}
   11b22:	b084      	sub	sp, #16
   11b24:	af00      	add	r7, sp, #0
   11b26:	6078      	str	r0, [r7, #4]
	uint32 u32Val;

	spi_read_reg(u32Addr, &u32Val);
   11b28:	230c      	movs	r3, #12
   11b2a:	18fa      	adds	r2, r7, r3
   11b2c:	687b      	ldr	r3, [r7, #4]
   11b2e:	0011      	movs	r1, r2
   11b30:	0018      	movs	r0, r3
   11b32:	4b03      	ldr	r3, [pc, #12]	; (11b40 <nm_spi_read_reg+0x20>)
   11b34:	4798      	blx	r3

	return u32Val;
   11b36:	68fb      	ldr	r3, [r7, #12]
}
   11b38:	0018      	movs	r0, r3
   11b3a:	46bd      	mov	sp, r7
   11b3c:	b004      	add	sp, #16
   11b3e:	bd80      	pop	{r7, pc}
   11b40:	000116b5 	.word	0x000116b5

00011b44 <nm_spi_read_reg_with_ret>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_spi_read_reg_with_ret(uint32 u32Addr, uint32* pu32RetVal)
{
   11b44:	b590      	push	{r4, r7, lr}
   11b46:	b085      	sub	sp, #20
   11b48:	af00      	add	r7, sp, #0
   11b4a:	6078      	str	r0, [r7, #4]
   11b4c:	6039      	str	r1, [r7, #0]
	sint8 s8Ret;

	s8Ret = spi_read_reg(u32Addr,pu32RetVal);
   11b4e:	230f      	movs	r3, #15
   11b50:	18fc      	adds	r4, r7, r3
   11b52:	683a      	ldr	r2, [r7, #0]
   11b54:	687b      	ldr	r3, [r7, #4]
   11b56:	0011      	movs	r1, r2
   11b58:	0018      	movs	r0, r3
   11b5a:	4b0d      	ldr	r3, [pc, #52]	; (11b90 <nm_spi_read_reg_with_ret+0x4c>)
   11b5c:	4798      	blx	r3
   11b5e:	0003      	movs	r3, r0
   11b60:	7023      	strb	r3, [r4, #0]

	if(N_OK == s8Ret) s8Ret = M2M_SUCCESS;
   11b62:	230f      	movs	r3, #15
   11b64:	18fb      	adds	r3, r7, r3
   11b66:	781b      	ldrb	r3, [r3, #0]
   11b68:	b25b      	sxtb	r3, r3
   11b6a:	2b01      	cmp	r3, #1
   11b6c:	d104      	bne.n	11b78 <nm_spi_read_reg_with_ret+0x34>
   11b6e:	230f      	movs	r3, #15
   11b70:	18fb      	adds	r3, r7, r3
   11b72:	2200      	movs	r2, #0
   11b74:	701a      	strb	r2, [r3, #0]
   11b76:	e003      	b.n	11b80 <nm_spi_read_reg_with_ret+0x3c>
	else s8Ret = M2M_ERR_BUS_FAIL;
   11b78:	230f      	movs	r3, #15
   11b7a:	18fb      	adds	r3, r7, r3
   11b7c:	22fa      	movs	r2, #250	; 0xfa
   11b7e:	701a      	strb	r2, [r3, #0]

	return s8Ret;
   11b80:	230f      	movs	r3, #15
   11b82:	18fb      	adds	r3, r7, r3
   11b84:	781b      	ldrb	r3, [r3, #0]
   11b86:	b25b      	sxtb	r3, r3
}
   11b88:	0018      	movs	r0, r3
   11b8a:	46bd      	mov	sp, r7
   11b8c:	b005      	add	sp, #20
   11b8e:	bd90      	pop	{r4, r7, pc}
   11b90:	000116b5 	.word	0x000116b5

00011b94 <nm_spi_write_reg>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_spi_write_reg(uint32 u32Addr, uint32 u32Val)
{
   11b94:	b590      	push	{r4, r7, lr}
   11b96:	b085      	sub	sp, #20
   11b98:	af00      	add	r7, sp, #0
   11b9a:	6078      	str	r0, [r7, #4]
   11b9c:	6039      	str	r1, [r7, #0]
	sint8 s8Ret;

	s8Ret = spi_write_reg(u32Addr, u32Val);
   11b9e:	230f      	movs	r3, #15
   11ba0:	18fc      	adds	r4, r7, r3
   11ba2:	683a      	ldr	r2, [r7, #0]
   11ba4:	687b      	ldr	r3, [r7, #4]
   11ba6:	0011      	movs	r1, r2
   11ba8:	0018      	movs	r0, r3
   11baa:	4b0d      	ldr	r3, [pc, #52]	; (11be0 <nm_spi_write_reg+0x4c>)
   11bac:	4798      	blx	r3
   11bae:	0003      	movs	r3, r0
   11bb0:	7023      	strb	r3, [r4, #0]

	if(N_OK == s8Ret) s8Ret = M2M_SUCCESS;
   11bb2:	230f      	movs	r3, #15
   11bb4:	18fb      	adds	r3, r7, r3
   11bb6:	781b      	ldrb	r3, [r3, #0]
   11bb8:	b25b      	sxtb	r3, r3
   11bba:	2b01      	cmp	r3, #1
   11bbc:	d104      	bne.n	11bc8 <nm_spi_write_reg+0x34>
   11bbe:	230f      	movs	r3, #15
   11bc0:	18fb      	adds	r3, r7, r3
   11bc2:	2200      	movs	r2, #0
   11bc4:	701a      	strb	r2, [r3, #0]
   11bc6:	e003      	b.n	11bd0 <nm_spi_write_reg+0x3c>
	else s8Ret = M2M_ERR_BUS_FAIL;
   11bc8:	230f      	movs	r3, #15
   11bca:	18fb      	adds	r3, r7, r3
   11bcc:	22fa      	movs	r2, #250	; 0xfa
   11bce:	701a      	strb	r2, [r3, #0]

	return s8Ret;
   11bd0:	230f      	movs	r3, #15
   11bd2:	18fb      	adds	r3, r7, r3
   11bd4:	781b      	ldrb	r3, [r3, #0]
   11bd6:	b25b      	sxtb	r3, r3
}
   11bd8:	0018      	movs	r0, r3
   11bda:	46bd      	mov	sp, r7
   11bdc:	b005      	add	sp, #20
   11bde:	bd90      	pop	{r4, r7, pc}
   11be0:	000113bd 	.word	0x000113bd

00011be4 <nm_spi_read_block>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_spi_read_block(uint32 u32Addr, uint8 *puBuf, uint16 u16Sz)
{
   11be4:	b590      	push	{r4, r7, lr}
   11be6:	b087      	sub	sp, #28
   11be8:	af00      	add	r7, sp, #0
   11bea:	60f8      	str	r0, [r7, #12]
   11bec:	60b9      	str	r1, [r7, #8]
   11bee:	1dbb      	adds	r3, r7, #6
   11bf0:	801a      	strh	r2, [r3, #0]
	sint8 s8Ret;

	s8Ret = nm_spi_read(u32Addr, puBuf, u16Sz);
   11bf2:	2317      	movs	r3, #23
   11bf4:	18fc      	adds	r4, r7, r3
   11bf6:	1dbb      	adds	r3, r7, #6
   11bf8:	881a      	ldrh	r2, [r3, #0]
   11bfa:	68b9      	ldr	r1, [r7, #8]
   11bfc:	68fb      	ldr	r3, [r7, #12]
   11bfe:	0018      	movs	r0, r3
   11c00:	4b0d      	ldr	r3, [pc, #52]	; (11c38 <nm_spi_read_block+0x54>)
   11c02:	4798      	blx	r3
   11c04:	0003      	movs	r3, r0
   11c06:	7023      	strb	r3, [r4, #0]

	if(N_OK == s8Ret) s8Ret = M2M_SUCCESS;
   11c08:	2317      	movs	r3, #23
   11c0a:	18fb      	adds	r3, r7, r3
   11c0c:	781b      	ldrb	r3, [r3, #0]
   11c0e:	b25b      	sxtb	r3, r3
   11c10:	2b01      	cmp	r3, #1
   11c12:	d104      	bne.n	11c1e <nm_spi_read_block+0x3a>
   11c14:	2317      	movs	r3, #23
   11c16:	18fb      	adds	r3, r7, r3
   11c18:	2200      	movs	r2, #0
   11c1a:	701a      	strb	r2, [r3, #0]
   11c1c:	e003      	b.n	11c26 <nm_spi_read_block+0x42>
	else s8Ret = M2M_ERR_BUS_FAIL;
   11c1e:	2317      	movs	r3, #23
   11c20:	18fb      	adds	r3, r7, r3
   11c22:	22fa      	movs	r2, #250	; 0xfa
   11c24:	701a      	strb	r2, [r3, #0]

	return s8Ret;
   11c26:	2317      	movs	r3, #23
   11c28:	18fb      	adds	r3, r7, r3
   11c2a:	781b      	ldrb	r3, [r3, #0]
   11c2c:	b25b      	sxtb	r3, r3
}
   11c2e:	0018      	movs	r0, r3
   11c30:	46bd      	mov	sp, r7
   11c32:	b007      	add	sp, #28
   11c34:	bd90      	pop	{r4, r7, pc}
   11c36:	46c0      	nop			; (mov r8, r8)
   11c38:	0001182d 	.word	0x0001182d

00011c3c <nm_spi_write_block>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_spi_write_block(uint32 u32Addr, uint8 *puBuf, uint16 u16Sz)
{
   11c3c:	b590      	push	{r4, r7, lr}
   11c3e:	b087      	sub	sp, #28
   11c40:	af00      	add	r7, sp, #0
   11c42:	60f8      	str	r0, [r7, #12]
   11c44:	60b9      	str	r1, [r7, #8]
   11c46:	1dbb      	adds	r3, r7, #6
   11c48:	801a      	strh	r2, [r3, #0]
	sint8 s8Ret;

	s8Ret = nm_spi_write(u32Addr, puBuf, u16Sz);
   11c4a:	2317      	movs	r3, #23
   11c4c:	18fc      	adds	r4, r7, r3
   11c4e:	1dbb      	adds	r3, r7, #6
   11c50:	881a      	ldrh	r2, [r3, #0]
   11c52:	68b9      	ldr	r1, [r7, #8]
   11c54:	68fb      	ldr	r3, [r7, #12]
   11c56:	0018      	movs	r0, r3
   11c58:	4b0d      	ldr	r3, [pc, #52]	; (11c90 <nm_spi_write_block+0x54>)
   11c5a:	4798      	blx	r3
   11c5c:	0003      	movs	r3, r0
   11c5e:	7023      	strb	r3, [r4, #0]

	if(N_OK == s8Ret) s8Ret = M2M_SUCCESS;
   11c60:	2317      	movs	r3, #23
   11c62:	18fb      	adds	r3, r7, r3
   11c64:	781b      	ldrb	r3, [r3, #0]
   11c66:	b25b      	sxtb	r3, r3
   11c68:	2b01      	cmp	r3, #1
   11c6a:	d104      	bne.n	11c76 <nm_spi_write_block+0x3a>
   11c6c:	2317      	movs	r3, #23
   11c6e:	18fb      	adds	r3, r7, r3
   11c70:	2200      	movs	r2, #0
   11c72:	701a      	strb	r2, [r3, #0]
   11c74:	e003      	b.n	11c7e <nm_spi_write_block+0x42>
	else s8Ret = M2M_ERR_BUS_FAIL;
   11c76:	2317      	movs	r3, #23
   11c78:	18fb      	adds	r3, r7, r3
   11c7a:	22fa      	movs	r2, #250	; 0xfa
   11c7c:	701a      	strb	r2, [r3, #0]

	return s8Ret;
   11c7e:	2317      	movs	r3, #23
   11c80:	18fb      	adds	r3, r7, r3
   11c82:	781b      	ldrb	r3, [r3, #0]
   11c84:	b25b      	sxtb	r3, r3
}
   11c86:	0018      	movs	r0, r3
   11c88:	46bd      	mov	sp, r7
   11c8a:	b007      	add	sp, #28
   11c8c:	bd90      	pop	{r4, r7, pc}
   11c8e:	46c0      	nop			; (mov r8, r8)
   11c90:	00011509 	.word	0x00011509

00011c94 <Socket_ReadSocketData>:
Date
		17 July 2012
*********************************************************************/
NMI_API void Socket_ReadSocketData(SOCKET sock, tstrSocketRecvMsg *pstrRecv,uint8 u8SocketMsg,
								  uint32 u32StartAddress,uint16 u16ReadCount)
{
   11c94:	b590      	push	{r4, r7, lr}
   11c96:	b089      	sub	sp, #36	; 0x24
   11c98:	af00      	add	r7, sp, #0
   11c9a:	60b9      	str	r1, [r7, #8]
   11c9c:	0011      	movs	r1, r2
   11c9e:	607b      	str	r3, [r7, #4]
   11ca0:	230f      	movs	r3, #15
   11ca2:	18fb      	adds	r3, r7, r3
   11ca4:	1c02      	adds	r2, r0, #0
   11ca6:	701a      	strb	r2, [r3, #0]
   11ca8:	230e      	movs	r3, #14
   11caa:	18fb      	adds	r3, r7, r3
   11cac:	1c0a      	adds	r2, r1, #0
   11cae:	701a      	strb	r2, [r3, #0]
	if((u16ReadCount > 0) && (gastrSockets[sock].pu8UserBuffer != NULL) && (gastrSockets[sock].u16UserBufferSize > 0) && (gastrSockets[sock].bIsUsed == 1))
   11cb0:	2330      	movs	r3, #48	; 0x30
   11cb2:	18fb      	adds	r3, r7, r3
   11cb4:	881b      	ldrh	r3, [r3, #0]
   11cb6:	2b00      	cmp	r3, #0
   11cb8:	d100      	bne.n	11cbc <Socket_ReadSocketData+0x28>
   11cba:	e0d7      	b.n	11e6c <Socket_ReadSocketData+0x1d8>
   11cbc:	230f      	movs	r3, #15
   11cbe:	18fb      	adds	r3, r7, r3
   11cc0:	2200      	movs	r2, #0
   11cc2:	569a      	ldrsb	r2, [r3, r2]
   11cc4:	4b6b      	ldr	r3, [pc, #428]	; (11e74 <Socket_ReadSocketData+0x1e0>)
   11cc6:	0112      	lsls	r2, r2, #4
   11cc8:	58d3      	ldr	r3, [r2, r3]
   11cca:	2b00      	cmp	r3, #0
   11ccc:	d100      	bne.n	11cd0 <Socket_ReadSocketData+0x3c>
   11cce:	e0cd      	b.n	11e6c <Socket_ReadSocketData+0x1d8>
   11cd0:	230f      	movs	r3, #15
   11cd2:	18fb      	adds	r3, r7, r3
   11cd4:	781b      	ldrb	r3, [r3, #0]
   11cd6:	b25b      	sxtb	r3, r3
   11cd8:	4a66      	ldr	r2, [pc, #408]	; (11e74 <Socket_ReadSocketData+0x1e0>)
   11cda:	011b      	lsls	r3, r3, #4
   11cdc:	18d3      	adds	r3, r2, r3
   11cde:	3304      	adds	r3, #4
   11ce0:	881b      	ldrh	r3, [r3, #0]
   11ce2:	b29b      	uxth	r3, r3
   11ce4:	2b00      	cmp	r3, #0
   11ce6:	d100      	bne.n	11cea <Socket_ReadSocketData+0x56>
   11ce8:	e0c0      	b.n	11e6c <Socket_ReadSocketData+0x1d8>
   11cea:	230f      	movs	r3, #15
   11cec:	18fb      	adds	r3, r7, r3
   11cee:	781b      	ldrb	r3, [r3, #0]
   11cf0:	b25b      	sxtb	r3, r3
   11cf2:	4a60      	ldr	r2, [pc, #384]	; (11e74 <Socket_ReadSocketData+0x1e0>)
   11cf4:	011b      	lsls	r3, r3, #4
   11cf6:	18d3      	adds	r3, r2, r3
   11cf8:	330a      	adds	r3, #10
   11cfa:	781b      	ldrb	r3, [r3, #0]
   11cfc:	b2db      	uxtb	r3, r3
   11cfe:	2b01      	cmp	r3, #1
   11d00:	d000      	beq.n	11d04 <Socket_ReadSocketData+0x70>
   11d02:	e0b3      	b.n	11e6c <Socket_ReadSocketData+0x1d8>
	{
		uint32	u32Address = u32StartAddress;
   11d04:	687b      	ldr	r3, [r7, #4]
   11d06:	61fb      	str	r3, [r7, #28]
		uint16	u16Read;
		sint16	s16Diff;
		uint8	u8SetRxDone;

		pstrRecv->u16RemainingSize = u16ReadCount;
   11d08:	68bb      	ldr	r3, [r7, #8]
   11d0a:	2230      	movs	r2, #48	; 0x30
   11d0c:	18ba      	adds	r2, r7, r2
   11d0e:	8812      	ldrh	r2, [r2, #0]
   11d10:	80da      	strh	r2, [r3, #6]
		do
		{
			u8SetRxDone = 1;
   11d12:	2319      	movs	r3, #25
   11d14:	18fb      	adds	r3, r7, r3
   11d16:	2201      	movs	r2, #1
   11d18:	701a      	strb	r2, [r3, #0]
			u16Read = u16ReadCount;
   11d1a:	231a      	movs	r3, #26
   11d1c:	18fb      	adds	r3, r7, r3
   11d1e:	2230      	movs	r2, #48	; 0x30
   11d20:	18ba      	adds	r2, r7, r2
   11d22:	8812      	ldrh	r2, [r2, #0]
   11d24:	801a      	strh	r2, [r3, #0]
			s16Diff	= u16Read - gastrSockets[sock].u16UserBufferSize;
   11d26:	230f      	movs	r3, #15
   11d28:	18fb      	adds	r3, r7, r3
   11d2a:	781b      	ldrb	r3, [r3, #0]
   11d2c:	b25b      	sxtb	r3, r3
   11d2e:	4a51      	ldr	r2, [pc, #324]	; (11e74 <Socket_ReadSocketData+0x1e0>)
   11d30:	011b      	lsls	r3, r3, #4
   11d32:	18d3      	adds	r3, r2, r3
   11d34:	3304      	adds	r3, #4
   11d36:	881b      	ldrh	r3, [r3, #0]
   11d38:	b29b      	uxth	r3, r3
   11d3a:	221a      	movs	r2, #26
   11d3c:	18ba      	adds	r2, r7, r2
   11d3e:	8812      	ldrh	r2, [r2, #0]
   11d40:	1ad3      	subs	r3, r2, r3
   11d42:	b29a      	uxth	r2, r3
   11d44:	2316      	movs	r3, #22
   11d46:	18fb      	adds	r3, r7, r3
   11d48:	801a      	strh	r2, [r3, #0]
			if(s16Diff > 0)
   11d4a:	2316      	movs	r3, #22
   11d4c:	18fb      	adds	r3, r7, r3
   11d4e:	2200      	movs	r2, #0
   11d50:	5e9b      	ldrsh	r3, [r3, r2]
   11d52:	2b00      	cmp	r3, #0
   11d54:	dd0f      	ble.n	11d76 <Socket_ReadSocketData+0xe2>
			{
				u8SetRxDone = 0;
   11d56:	2319      	movs	r3, #25
   11d58:	18fb      	adds	r3, r7, r3
   11d5a:	2200      	movs	r2, #0
   11d5c:	701a      	strb	r2, [r3, #0]
				u16Read		= gastrSockets[sock].u16UserBufferSize;
   11d5e:	230f      	movs	r3, #15
   11d60:	18fb      	adds	r3, r7, r3
   11d62:	2200      	movs	r2, #0
   11d64:	569a      	ldrsb	r2, [r3, r2]
   11d66:	231a      	movs	r3, #26
   11d68:	18fb      	adds	r3, r7, r3
   11d6a:	4942      	ldr	r1, [pc, #264]	; (11e74 <Socket_ReadSocketData+0x1e0>)
   11d6c:	0112      	lsls	r2, r2, #4
   11d6e:	188a      	adds	r2, r1, r2
   11d70:	3204      	adds	r2, #4
   11d72:	8812      	ldrh	r2, [r2, #0]
   11d74:	801a      	strh	r2, [r3, #0]
			}
			
			if(hif_receive(u32Address, gastrSockets[sock].pu8UserBuffer, u16Read, u8SetRxDone) == M2M_SUCCESS)
   11d76:	230f      	movs	r3, #15
   11d78:	18fb      	adds	r3, r7, r3
   11d7a:	2200      	movs	r2, #0
   11d7c:	569a      	ldrsb	r2, [r3, r2]
   11d7e:	4b3d      	ldr	r3, [pc, #244]	; (11e74 <Socket_ReadSocketData+0x1e0>)
   11d80:	0112      	lsls	r2, r2, #4
   11d82:	58d1      	ldr	r1, [r2, r3]
   11d84:	2319      	movs	r3, #25
   11d86:	18fb      	adds	r3, r7, r3
   11d88:	781c      	ldrb	r4, [r3, #0]
   11d8a:	231a      	movs	r3, #26
   11d8c:	18fb      	adds	r3, r7, r3
   11d8e:	881a      	ldrh	r2, [r3, #0]
   11d90:	69f8      	ldr	r0, [r7, #28]
   11d92:	0023      	movs	r3, r4
   11d94:	4c38      	ldr	r4, [pc, #224]	; (11e78 <Socket_ReadSocketData+0x1e4>)
   11d96:	47a0      	blx	r4
   11d98:	1e03      	subs	r3, r0, #0
   11d9a:	d14f      	bne.n	11e3c <Socket_ReadSocketData+0x1a8>
			{
				pstrRecv->pu8Buffer			= gastrSockets[sock].pu8UserBuffer;
   11d9c:	230f      	movs	r3, #15
   11d9e:	18fb      	adds	r3, r7, r3
   11da0:	2200      	movs	r2, #0
   11da2:	569a      	ldrsb	r2, [r3, r2]
   11da4:	4b33      	ldr	r3, [pc, #204]	; (11e74 <Socket_ReadSocketData+0x1e0>)
   11da6:	0112      	lsls	r2, r2, #4
   11da8:	58d2      	ldr	r2, [r2, r3]
   11daa:	68bb      	ldr	r3, [r7, #8]
   11dac:	601a      	str	r2, [r3, #0]
				pstrRecv->s16BufferSize		= u16Read;
   11dae:	231a      	movs	r3, #26
   11db0:	18fb      	adds	r3, r7, r3
   11db2:	2200      	movs	r2, #0
   11db4:	5e9a      	ldrsh	r2, [r3, r2]
   11db6:	68bb      	ldr	r3, [r7, #8]
   11db8:	809a      	strh	r2, [r3, #4]
				pstrRecv->u16RemainingSize	-= u16Read;
   11dba:	68bb      	ldr	r3, [r7, #8]
   11dbc:	88da      	ldrh	r2, [r3, #6]
   11dbe:	231a      	movs	r3, #26
   11dc0:	18fb      	adds	r3, r7, r3
   11dc2:	881b      	ldrh	r3, [r3, #0]
   11dc4:	1ad3      	subs	r3, r2, r3
   11dc6:	b29a      	uxth	r2, r3
   11dc8:	68bb      	ldr	r3, [r7, #8]
   11dca:	80da      	strh	r2, [r3, #6]

				if (gpfAppSocketCb)
   11dcc:	4b2b      	ldr	r3, [pc, #172]	; (11e7c <Socket_ReadSocketData+0x1e8>)
   11dce:	681b      	ldr	r3, [r3, #0]
   11dd0:	2b00      	cmp	r3, #0
   11dd2:	d00b      	beq.n	11dec <Socket_ReadSocketData+0x158>
					gpfAppSocketCb(sock,u8SocketMsg, pstrRecv);
   11dd4:	4b29      	ldr	r3, [pc, #164]	; (11e7c <Socket_ReadSocketData+0x1e8>)
   11dd6:	681b      	ldr	r3, [r3, #0]
   11dd8:	68bc      	ldr	r4, [r7, #8]
   11dda:	220e      	movs	r2, #14
   11ddc:	18ba      	adds	r2, r7, r2
   11dde:	7811      	ldrb	r1, [r2, #0]
   11de0:	220f      	movs	r2, #15
   11de2:	18ba      	adds	r2, r7, r2
   11de4:	2000      	movs	r0, #0
   11de6:	5610      	ldrsb	r0, [r2, r0]
   11de8:	0022      	movs	r2, r4
   11dea:	4798      	blx	r3

				u16ReadCount -= u16Read;
   11dec:	2330      	movs	r3, #48	; 0x30
   11dee:	18f9      	adds	r1, r7, r3
   11df0:	2330      	movs	r3, #48	; 0x30
   11df2:	18fa      	adds	r2, r7, r3
   11df4:	231a      	movs	r3, #26
   11df6:	18fb      	adds	r3, r7, r3
   11df8:	8812      	ldrh	r2, [r2, #0]
   11dfa:	881b      	ldrh	r3, [r3, #0]
   11dfc:	1ad3      	subs	r3, r2, r3
   11dfe:	800b      	strh	r3, [r1, #0]
				u32Address += u16Read;
   11e00:	231a      	movs	r3, #26
   11e02:	18fb      	adds	r3, r7, r3
   11e04:	881b      	ldrh	r3, [r3, #0]
   11e06:	69fa      	ldr	r2, [r7, #28]
   11e08:	18d3      	adds	r3, r2, r3
   11e0a:	61fb      	str	r3, [r7, #28]

				if((!gastrSockets[sock].bIsUsed) && (u16ReadCount))
   11e0c:	230f      	movs	r3, #15
   11e0e:	18fb      	adds	r3, r7, r3
   11e10:	781b      	ldrb	r3, [r3, #0]
   11e12:	b25b      	sxtb	r3, r3
   11e14:	4a17      	ldr	r2, [pc, #92]	; (11e74 <Socket_ReadSocketData+0x1e0>)
   11e16:	011b      	lsls	r3, r3, #4
   11e18:	18d3      	adds	r3, r2, r3
   11e1a:	330a      	adds	r3, #10
   11e1c:	781b      	ldrb	r3, [r3, #0]
   11e1e:	b2db      	uxtb	r3, r3
   11e20:	2b00      	cmp	r3, #0
   11e22:	d11c      	bne.n	11e5e <Socket_ReadSocketData+0x1ca>
   11e24:	2330      	movs	r3, #48	; 0x30
   11e26:	18fb      	adds	r3, r7, r3
   11e28:	881b      	ldrh	r3, [r3, #0]
   11e2a:	2b00      	cmp	r3, #0
   11e2c:	d017      	beq.n	11e5e <Socket_ReadSocketData+0x1ca>
				{
					M2M_DBG("Application Closed Socket While Rx Is not Complete\n");
					if(hif_receive(0, NULL, 0, 1) == M2M_SUCCESS)
   11e2e:	2301      	movs	r3, #1
   11e30:	2200      	movs	r2, #0
   11e32:	2100      	movs	r1, #0
   11e34:	2000      	movs	r0, #0
   11e36:	4c10      	ldr	r4, [pc, #64]	; (11e78 <Socket_ReadSocketData+0x1e4>)
   11e38:	47a0      	blx	r4
						M2M_DBG("hif_receive Success\n");
					else
						M2M_DBG("hif_receive Fail\n");
					break;
   11e3a:	e017      	b.n	11e6c <Socket_ReadSocketData+0x1d8>
				}
			}
			else
			{
				M2M_INFO("(ERRR)Current <%d>\n", u16ReadCount);
   11e3c:	4b10      	ldr	r3, [pc, #64]	; (11e80 <Socket_ReadSocketData+0x1ec>)
   11e3e:	0018      	movs	r0, r3
   11e40:	4b10      	ldr	r3, [pc, #64]	; (11e84 <Socket_ReadSocketData+0x1f0>)
   11e42:	4798      	blx	r3
   11e44:	2330      	movs	r3, #48	; 0x30
   11e46:	18fb      	adds	r3, r7, r3
   11e48:	881a      	ldrh	r2, [r3, #0]
   11e4a:	4b0f      	ldr	r3, [pc, #60]	; (11e88 <Socket_ReadSocketData+0x1f4>)
   11e4c:	0011      	movs	r1, r2
   11e4e:	0018      	movs	r0, r3
   11e50:	4b0c      	ldr	r3, [pc, #48]	; (11e84 <Socket_ReadSocketData+0x1f0>)
   11e52:	4798      	blx	r3
   11e54:	4b0d      	ldr	r3, [pc, #52]	; (11e8c <Socket_ReadSocketData+0x1f8>)
   11e56:	0018      	movs	r0, r3
   11e58:	4b0a      	ldr	r3, [pc, #40]	; (11e84 <Socket_ReadSocketData+0x1f0>)
   11e5a:	4798      	blx	r3
				break;
   11e5c:	e006      	b.n	11e6c <Socket_ReadSocketData+0x1d8>
			}
		}while(u16ReadCount != 0);
   11e5e:	2330      	movs	r3, #48	; 0x30
   11e60:	18fb      	adds	r3, r7, r3
   11e62:	881b      	ldrh	r3, [r3, #0]
   11e64:	2b00      	cmp	r3, #0
   11e66:	d000      	beq.n	11e6a <Socket_ReadSocketData+0x1d6>
   11e68:	e753      	b.n	11d12 <Socket_ReadSocketData+0x7e>
	}
}
   11e6a:	e7ff      	b.n	11e6c <Socket_ReadSocketData+0x1d8>
   11e6c:	46c0      	nop			; (mov r8, r8)
   11e6e:	46bd      	mov	sp, r7
   11e70:	b009      	add	sp, #36	; 0x24
   11e72:	bd90      	pop	{r4, r7, pc}
   11e74:	200054e4 	.word	0x200054e4
   11e78:	0000e68d 	.word	0x0000e68d
   11e7c:	20005594 	.word	0x20005594
   11e80:	00025ef8 	.word	0x00025ef8
   11e84:	0000addd 	.word	0x0000addd
   11e88:	00025f04 	.word	0x00025f04
   11e8c:	00025f18 	.word	0x00025f18

00011e90 <m2m_ip_cb>:

Date
		17 July 2012
*********************************************************************/
static void m2m_ip_cb(uint8 u8OpCode, uint16 u16BufferSize,uint32 u32Address)
{	
   11e90:	b590      	push	{r4, r7, lr}
   11e92:	b0bb      	sub	sp, #236	; 0xec
   11e94:	af02      	add	r7, sp, #8
   11e96:	603a      	str	r2, [r7, #0]
   11e98:	1dfb      	adds	r3, r7, #7
   11e9a:	1c02      	adds	r2, r0, #0
   11e9c:	701a      	strb	r2, [r3, #0]
   11e9e:	1d3b      	adds	r3, r7, #4
   11ea0:	1c0a      	adds	r2, r1, #0
   11ea2:	801a      	strh	r2, [r3, #0]
	if((u8OpCode == SOCKET_CMD_BIND) || (u8OpCode == SOCKET_CMD_SSL_BIND))
   11ea4:	1dfb      	adds	r3, r7, #7
   11ea6:	781b      	ldrb	r3, [r3, #0]
   11ea8:	2b41      	cmp	r3, #65	; 0x41
   11eaa:	d003      	beq.n	11eb4 <m2m_ip_cb+0x24>
   11eac:	1dfb      	adds	r3, r7, #7
   11eae:	781b      	ldrb	r3, [r3, #0]
   11eb0:	2b54      	cmp	r3, #84	; 0x54
   11eb2:	d120      	bne.n	11ef6 <m2m_ip_cb+0x66>
	{
		tstrBindReply		strBindReply;
		tstrSocketBindMsg	strBind;

		if(hif_receive(u32Address, (uint8*)&strBindReply, sizeof(tstrBindReply), 0) == M2M_SUCCESS)
   11eb4:	23cc      	movs	r3, #204	; 0xcc
   11eb6:	18f9      	adds	r1, r7, r3
   11eb8:	6838      	ldr	r0, [r7, #0]
   11eba:	2300      	movs	r3, #0
   11ebc:	2204      	movs	r2, #4
   11ebe:	4c98      	ldr	r4, [pc, #608]	; (12120 <m2m_ip_cb+0x290>)
   11ec0:	47a0      	blx	r4
   11ec2:	1e03      	subs	r3, r0, #0
   11ec4:	d000      	beq.n	11ec8 <m2m_ip_cb+0x38>
   11ec6:	e275      	b.n	123b4 <m2m_ip_cb+0x524>
		{
			strBind.status = strBindReply.s8Status;
   11ec8:	23cc      	movs	r3, #204	; 0xcc
   11eca:	18fb      	adds	r3, r7, r3
   11ecc:	2201      	movs	r2, #1
   11ece:	569a      	ldrsb	r2, [r3, r2]
   11ed0:	23c8      	movs	r3, #200	; 0xc8
   11ed2:	18fb      	adds	r3, r7, r3
   11ed4:	701a      	strb	r2, [r3, #0]
			if(gpfAppSocketCb)
   11ed6:	4b93      	ldr	r3, [pc, #588]	; (12124 <m2m_ip_cb+0x294>)
   11ed8:	681b      	ldr	r3, [r3, #0]
   11eda:	2b00      	cmp	r3, #0
   11edc:	d100      	bne.n	11ee0 <m2m_ip_cb+0x50>
   11ede:	e269      	b.n	123b4 <m2m_ip_cb+0x524>
				gpfAppSocketCb(strBindReply.sock,SOCKET_MSG_BIND,&strBind);
   11ee0:	4b90      	ldr	r3, [pc, #576]	; (12124 <m2m_ip_cb+0x294>)
   11ee2:	681b      	ldr	r3, [r3, #0]
   11ee4:	22cc      	movs	r2, #204	; 0xcc
   11ee6:	18ba      	adds	r2, r7, r2
   11ee8:	2000      	movs	r0, #0
   11eea:	5610      	ldrsb	r0, [r2, r0]
   11eec:	22c8      	movs	r2, #200	; 0xc8
   11eee:	18ba      	adds	r2, r7, r2
   11ef0:	2101      	movs	r1, #1
   11ef2:	4798      	blx	r3
	{
   11ef4:	e25e      	b.n	123b4 <m2m_ip_cb+0x524>
		}
	}
	else if(u8OpCode == SOCKET_CMD_LISTEN)
   11ef6:	1dfb      	adds	r3, r7, #7
   11ef8:	781b      	ldrb	r3, [r3, #0]
   11efa:	2b42      	cmp	r3, #66	; 0x42
   11efc:	d120      	bne.n	11f40 <m2m_ip_cb+0xb0>
	{
		tstrListenReply			strListenReply;
		tstrSocketListenMsg		strListen;
		if(hif_receive(u32Address, (uint8*)&strListenReply, sizeof(tstrListenReply), 0) == M2M_SUCCESS)
   11efe:	23c4      	movs	r3, #196	; 0xc4
   11f00:	18f9      	adds	r1, r7, r3
   11f02:	6838      	ldr	r0, [r7, #0]
   11f04:	2300      	movs	r3, #0
   11f06:	2204      	movs	r2, #4
   11f08:	4c85      	ldr	r4, [pc, #532]	; (12120 <m2m_ip_cb+0x290>)
   11f0a:	47a0      	blx	r4
   11f0c:	1e03      	subs	r3, r0, #0
   11f0e:	d000      	beq.n	11f12 <m2m_ip_cb+0x82>
   11f10:	e257      	b.n	123c2 <m2m_ip_cb+0x532>
		{
			strListen.status = strListenReply.s8Status;
   11f12:	23c4      	movs	r3, #196	; 0xc4
   11f14:	18fb      	adds	r3, r7, r3
   11f16:	2201      	movs	r2, #1
   11f18:	569a      	ldrsb	r2, [r3, r2]
   11f1a:	23c0      	movs	r3, #192	; 0xc0
   11f1c:	18fb      	adds	r3, r7, r3
   11f1e:	701a      	strb	r2, [r3, #0]
			if(gpfAppSocketCb)
   11f20:	4b80      	ldr	r3, [pc, #512]	; (12124 <m2m_ip_cb+0x294>)
   11f22:	681b      	ldr	r3, [r3, #0]
   11f24:	2b00      	cmp	r3, #0
   11f26:	d100      	bne.n	11f2a <m2m_ip_cb+0x9a>
   11f28:	e24b      	b.n	123c2 <m2m_ip_cb+0x532>
				gpfAppSocketCb(strListenReply.sock,SOCKET_MSG_LISTEN, &strListen);
   11f2a:	4b7e      	ldr	r3, [pc, #504]	; (12124 <m2m_ip_cb+0x294>)
   11f2c:	681b      	ldr	r3, [r3, #0]
   11f2e:	22c4      	movs	r2, #196	; 0xc4
   11f30:	18ba      	adds	r2, r7, r2
   11f32:	2000      	movs	r0, #0
   11f34:	5610      	ldrsb	r0, [r2, r0]
   11f36:	22c0      	movs	r2, #192	; 0xc0
   11f38:	18ba      	adds	r2, r7, r2
   11f3a:	2102      	movs	r1, #2
   11f3c:	4798      	blx	r3
			{
				gfpPingCb(strPingReply.u32IPAddr, strPingReply.u32RTT, strPingReply.u8ErrorCode);
			}
		}
	}
}
   11f3e:	e240      	b.n	123c2 <m2m_ip_cb+0x532>
	else if(u8OpCode == SOCKET_CMD_ACCEPT)
   11f40:	1dfb      	adds	r3, r7, #7
   11f42:	781b      	ldrb	r3, [r3, #0]
   11f44:	2b43      	cmp	r3, #67	; 0x43
   11f46:	d000      	beq.n	11f4a <m2m_ip_cb+0xba>
   11f48:	e086      	b.n	12058 <m2m_ip_cb+0x1c8>
		if(hif_receive(u32Address, (uint8*)&strAcceptReply, sizeof(tstrAcceptReply), 0) == M2M_SUCCESS)
   11f4a:	23b4      	movs	r3, #180	; 0xb4
   11f4c:	18f9      	adds	r1, r7, r3
   11f4e:	6838      	ldr	r0, [r7, #0]
   11f50:	2300      	movs	r3, #0
   11f52:	220c      	movs	r2, #12
   11f54:	4c72      	ldr	r4, [pc, #456]	; (12120 <m2m_ip_cb+0x290>)
   11f56:	47a0      	blx	r4
   11f58:	1e03      	subs	r3, r0, #0
   11f5a:	d000      	beq.n	11f5e <m2m_ip_cb+0xce>
   11f5c:	e231      	b.n	123c2 <m2m_ip_cb+0x532>
			if(strAcceptReply.sConnectedSock >= 0)
   11f5e:	23b4      	movs	r3, #180	; 0xb4
   11f60:	18fb      	adds	r3, r7, r3
   11f62:	7a5b      	ldrb	r3, [r3, #9]
   11f64:	b25b      	sxtb	r3, r3
   11f66:	2b00      	cmp	r3, #0
   11f68:	db4f      	blt.n	1200a <m2m_ip_cb+0x17a>
				gastrSockets[strAcceptReply.sConnectedSock].u8SSLFlags 		= gastrSockets[strAcceptReply.sListenSock].u8SSLFlags;
   11f6a:	23b4      	movs	r3, #180	; 0xb4
   11f6c:	18fb      	adds	r3, r7, r3
   11f6e:	7a5b      	ldrb	r3, [r3, #9]
   11f70:	b25b      	sxtb	r3, r3
   11f72:	0018      	movs	r0, r3
   11f74:	23b4      	movs	r3, #180	; 0xb4
   11f76:	18fb      	adds	r3, r7, r3
   11f78:	7a1b      	ldrb	r3, [r3, #8]
   11f7a:	b25b      	sxtb	r3, r3
   11f7c:	4a6a      	ldr	r2, [pc, #424]	; (12128 <m2m_ip_cb+0x298>)
   11f7e:	011b      	lsls	r3, r3, #4
   11f80:	18d3      	adds	r3, r2, r3
   11f82:	330b      	adds	r3, #11
   11f84:	781b      	ldrb	r3, [r3, #0]
   11f86:	b2d9      	uxtb	r1, r3
   11f88:	4a67      	ldr	r2, [pc, #412]	; (12128 <m2m_ip_cb+0x298>)
   11f8a:	0103      	lsls	r3, r0, #4
   11f8c:	18d3      	adds	r3, r2, r3
   11f8e:	330b      	adds	r3, #11
   11f90:	1c0a      	adds	r2, r1, #0
   11f92:	701a      	strb	r2, [r3, #0]
				gastrSockets[strAcceptReply.sConnectedSock].bIsUsed 		= 1;
   11f94:	23b4      	movs	r3, #180	; 0xb4
   11f96:	18fb      	adds	r3, r7, r3
   11f98:	7a5b      	ldrb	r3, [r3, #9]
   11f9a:	b25b      	sxtb	r3, r3
   11f9c:	4a62      	ldr	r2, [pc, #392]	; (12128 <m2m_ip_cb+0x298>)
   11f9e:	011b      	lsls	r3, r3, #4
   11fa0:	18d3      	adds	r3, r2, r3
   11fa2:	330a      	adds	r3, #10
   11fa4:	2201      	movs	r2, #1
   11fa6:	701a      	strb	r2, [r3, #0]
				gastrSockets[strAcceptReply.sConnectedSock].u16DataOffset 	= strAcceptReply.u16AppDataOffset - M2M_HIF_HDR_OFFSET;
   11fa8:	23b4      	movs	r3, #180	; 0xb4
   11faa:	18fb      	adds	r3, r7, r3
   11fac:	7a5b      	ldrb	r3, [r3, #9]
   11fae:	b25b      	sxtb	r3, r3
   11fb0:	0018      	movs	r0, r3
   11fb2:	23b4      	movs	r3, #180	; 0xb4
   11fb4:	18fb      	adds	r3, r7, r3
   11fb6:	895b      	ldrh	r3, [r3, #10]
   11fb8:	3b08      	subs	r3, #8
   11fba:	b299      	uxth	r1, r3
   11fbc:	4a5a      	ldr	r2, [pc, #360]	; (12128 <m2m_ip_cb+0x298>)
   11fbe:	0103      	lsls	r3, r0, #4
   11fc0:	18d3      	adds	r3, r2, r3
   11fc2:	3308      	adds	r3, #8
   11fc4:	1c0a      	adds	r2, r1, #0
   11fc6:	801a      	strh	r2, [r3, #0]
				++gu16SessionID;
   11fc8:	4b58      	ldr	r3, [pc, #352]	; (1212c <m2m_ip_cb+0x29c>)
   11fca:	881b      	ldrh	r3, [r3, #0]
   11fcc:	b29b      	uxth	r3, r3
   11fce:	3301      	adds	r3, #1
   11fd0:	b29a      	uxth	r2, r3
   11fd2:	4b56      	ldr	r3, [pc, #344]	; (1212c <m2m_ip_cb+0x29c>)
   11fd4:	801a      	strh	r2, [r3, #0]
				if(gu16SessionID == 0)
   11fd6:	4b55      	ldr	r3, [pc, #340]	; (1212c <m2m_ip_cb+0x29c>)
   11fd8:	881b      	ldrh	r3, [r3, #0]
   11fda:	b29b      	uxth	r3, r3
   11fdc:	2b00      	cmp	r3, #0
   11fde:	d106      	bne.n	11fee <m2m_ip_cb+0x15e>
					++gu16SessionID;
   11fe0:	4b52      	ldr	r3, [pc, #328]	; (1212c <m2m_ip_cb+0x29c>)
   11fe2:	881b      	ldrh	r3, [r3, #0]
   11fe4:	b29b      	uxth	r3, r3
   11fe6:	3301      	adds	r3, #1
   11fe8:	b29a      	uxth	r2, r3
   11fea:	4b50      	ldr	r3, [pc, #320]	; (1212c <m2m_ip_cb+0x29c>)
   11fec:	801a      	strh	r2, [r3, #0]
				gastrSockets[strAcceptReply.sConnectedSock].u16SessionID = gu16SessionID;
   11fee:	23b4      	movs	r3, #180	; 0xb4
   11ff0:	18fb      	adds	r3, r7, r3
   11ff2:	7a5b      	ldrb	r3, [r3, #9]
   11ff4:	b25b      	sxtb	r3, r3
   11ff6:	0018      	movs	r0, r3
   11ff8:	4b4c      	ldr	r3, [pc, #304]	; (1212c <m2m_ip_cb+0x29c>)
   11ffa:	881b      	ldrh	r3, [r3, #0]
   11ffc:	b299      	uxth	r1, r3
   11ffe:	4a4a      	ldr	r2, [pc, #296]	; (12128 <m2m_ip_cb+0x298>)
   12000:	0103      	lsls	r3, r0, #4
   12002:	18d3      	adds	r3, r2, r3
   12004:	3306      	adds	r3, #6
   12006:	1c0a      	adds	r2, r1, #0
   12008:	801a      	strh	r2, [r3, #0]
			strAccept.sock = strAcceptReply.sConnectedSock;
   1200a:	23b4      	movs	r3, #180	; 0xb4
   1200c:	18fb      	adds	r3, r7, r3
   1200e:	2209      	movs	r2, #9
   12010:	569a      	ldrsb	r2, [r3, r2]
   12012:	23a0      	movs	r3, #160	; 0xa0
   12014:	18fb      	adds	r3, r7, r3
   12016:	701a      	strb	r2, [r3, #0]
			strAccept.strAddr.sin_family		= AF_INET;
   12018:	23a0      	movs	r3, #160	; 0xa0
   1201a:	18fb      	adds	r3, r7, r3
   1201c:	2202      	movs	r2, #2
   1201e:	809a      	strh	r2, [r3, #4]
			strAccept.strAddr.sin_port = strAcceptReply.strAddr.u16Port;
   12020:	23b4      	movs	r3, #180	; 0xb4
   12022:	18fb      	adds	r3, r7, r3
   12024:	885a      	ldrh	r2, [r3, #2]
   12026:	23a0      	movs	r3, #160	; 0xa0
   12028:	18fb      	adds	r3, r7, r3
   1202a:	80da      	strh	r2, [r3, #6]
			strAccept.strAddr.sin_addr.s_addr = strAcceptReply.strAddr.u32IPAddr;
   1202c:	23b4      	movs	r3, #180	; 0xb4
   1202e:	18fb      	adds	r3, r7, r3
   12030:	685a      	ldr	r2, [r3, #4]
   12032:	23a0      	movs	r3, #160	; 0xa0
   12034:	18fb      	adds	r3, r7, r3
   12036:	609a      	str	r2, [r3, #8]
			if(gpfAppSocketCb)
   12038:	4b3a      	ldr	r3, [pc, #232]	; (12124 <m2m_ip_cb+0x294>)
   1203a:	681b      	ldr	r3, [r3, #0]
   1203c:	2b00      	cmp	r3, #0
   1203e:	d100      	bne.n	12042 <m2m_ip_cb+0x1b2>
   12040:	e1bf      	b.n	123c2 <m2m_ip_cb+0x532>
				gpfAppSocketCb(strAcceptReply.sListenSock, SOCKET_MSG_ACCEPT, &strAccept);
   12042:	4b38      	ldr	r3, [pc, #224]	; (12124 <m2m_ip_cb+0x294>)
   12044:	681b      	ldr	r3, [r3, #0]
   12046:	22b4      	movs	r2, #180	; 0xb4
   12048:	18ba      	adds	r2, r7, r2
   1204a:	2008      	movs	r0, #8
   1204c:	5610      	ldrsb	r0, [r2, r0]
   1204e:	22a0      	movs	r2, #160	; 0xa0
   12050:	18ba      	adds	r2, r7, r2
   12052:	2104      	movs	r1, #4
   12054:	4798      	blx	r3
}
   12056:	e1b4      	b.n	123c2 <m2m_ip_cb+0x532>
	else if((u8OpCode == SOCKET_CMD_CONNECT) || (u8OpCode == SOCKET_CMD_SSL_CONNECT))
   12058:	1dfb      	adds	r3, r7, #7
   1205a:	781b      	ldrb	r3, [r3, #0]
   1205c:	2b44      	cmp	r3, #68	; 0x44
   1205e:	d003      	beq.n	12068 <m2m_ip_cb+0x1d8>
   12060:	1dfb      	adds	r3, r7, #7
   12062:	781b      	ldrb	r3, [r3, #0]
   12064:	2b4b      	cmp	r3, #75	; 0x4b
   12066:	d13d      	bne.n	120e4 <m2m_ip_cb+0x254>
		if(hif_receive(u32Address, (uint8*)&strConnectReply, sizeof(tstrConnectReply), 0) == M2M_SUCCESS)
   12068:	239c      	movs	r3, #156	; 0x9c
   1206a:	18f9      	adds	r1, r7, r3
   1206c:	6838      	ldr	r0, [r7, #0]
   1206e:	2300      	movs	r3, #0
   12070:	2204      	movs	r2, #4
   12072:	4c2b      	ldr	r4, [pc, #172]	; (12120 <m2m_ip_cb+0x290>)
   12074:	47a0      	blx	r4
   12076:	1e03      	subs	r3, r0, #0
   12078:	d000      	beq.n	1207c <m2m_ip_cb+0x1ec>
   1207a:	e19d      	b.n	123b8 <m2m_ip_cb+0x528>
			strConnMsg.sock		= strConnectReply.sock;
   1207c:	239c      	movs	r3, #156	; 0x9c
   1207e:	18fb      	adds	r3, r7, r3
   12080:	2200      	movs	r2, #0
   12082:	569a      	ldrsb	r2, [r3, r2]
   12084:	2398      	movs	r3, #152	; 0x98
   12086:	18fb      	adds	r3, r7, r3
   12088:	701a      	strb	r2, [r3, #0]
			strConnMsg.s8Error	= strConnectReply.s8Error;
   1208a:	239c      	movs	r3, #156	; 0x9c
   1208c:	18fb      	adds	r3, r7, r3
   1208e:	2201      	movs	r2, #1
   12090:	569a      	ldrsb	r2, [r3, r2]
   12092:	2398      	movs	r3, #152	; 0x98
   12094:	18fb      	adds	r3, r7, r3
   12096:	705a      	strb	r2, [r3, #1]
			if(strConnectReply.s8Error == SOCK_ERR_NO_ERROR)
   12098:	239c      	movs	r3, #156	; 0x9c
   1209a:	18fb      	adds	r3, r7, r3
   1209c:	785b      	ldrb	r3, [r3, #1]
   1209e:	b25b      	sxtb	r3, r3
   120a0:	2b00      	cmp	r3, #0
   120a2:	d10f      	bne.n	120c4 <m2m_ip_cb+0x234>
				gastrSockets[strConnectReply.sock].u16DataOffset = strConnectReply.u16AppDataOffset - M2M_HIF_HDR_OFFSET;
   120a4:	239c      	movs	r3, #156	; 0x9c
   120a6:	18fb      	adds	r3, r7, r3
   120a8:	781b      	ldrb	r3, [r3, #0]
   120aa:	b25b      	sxtb	r3, r3
   120ac:	0018      	movs	r0, r3
   120ae:	239c      	movs	r3, #156	; 0x9c
   120b0:	18fb      	adds	r3, r7, r3
   120b2:	885b      	ldrh	r3, [r3, #2]
   120b4:	3b08      	subs	r3, #8
   120b6:	b299      	uxth	r1, r3
   120b8:	4a1b      	ldr	r2, [pc, #108]	; (12128 <m2m_ip_cb+0x298>)
   120ba:	0103      	lsls	r3, r0, #4
   120bc:	18d3      	adds	r3, r2, r3
   120be:	3308      	adds	r3, #8
   120c0:	1c0a      	adds	r2, r1, #0
   120c2:	801a      	strh	r2, [r3, #0]
			if(gpfAppSocketCb)
   120c4:	4b17      	ldr	r3, [pc, #92]	; (12124 <m2m_ip_cb+0x294>)
   120c6:	681b      	ldr	r3, [r3, #0]
   120c8:	2b00      	cmp	r3, #0
   120ca:	d100      	bne.n	120ce <m2m_ip_cb+0x23e>
   120cc:	e174      	b.n	123b8 <m2m_ip_cb+0x528>
				gpfAppSocketCb(strConnectReply.sock,SOCKET_MSG_CONNECT, &strConnMsg);
   120ce:	4b15      	ldr	r3, [pc, #84]	; (12124 <m2m_ip_cb+0x294>)
   120d0:	681b      	ldr	r3, [r3, #0]
   120d2:	229c      	movs	r2, #156	; 0x9c
   120d4:	18ba      	adds	r2, r7, r2
   120d6:	2000      	movs	r0, #0
   120d8:	5610      	ldrsb	r0, [r2, r0]
   120da:	2298      	movs	r2, #152	; 0x98
   120dc:	18ba      	adds	r2, r7, r2
   120de:	2105      	movs	r1, #5
   120e0:	4798      	blx	r3
	{
   120e2:	e169      	b.n	123b8 <m2m_ip_cb+0x528>
	else if(u8OpCode == SOCKET_CMD_DNS_RESOLVE)
   120e4:	1dfb      	adds	r3, r7, #7
   120e6:	781b      	ldrb	r3, [r3, #0]
   120e8:	2b4a      	cmp	r3, #74	; 0x4a
   120ea:	d123      	bne.n	12134 <m2m_ip_cb+0x2a4>
		if(hif_receive(u32Address, (uint8*)&strDnsReply, sizeof(tstrDnsReply), 0) == M2M_SUCCESS)
   120ec:	230c      	movs	r3, #12
   120ee:	18f9      	adds	r1, r7, r3
   120f0:	6838      	ldr	r0, [r7, #0]
   120f2:	2300      	movs	r3, #0
   120f4:	2244      	movs	r2, #68	; 0x44
   120f6:	4c0a      	ldr	r4, [pc, #40]	; (12120 <m2m_ip_cb+0x290>)
   120f8:	47a0      	blx	r4
   120fa:	1e03      	subs	r3, r0, #0
   120fc:	d000      	beq.n	12100 <m2m_ip_cb+0x270>
   120fe:	e160      	b.n	123c2 <m2m_ip_cb+0x532>
			if(gpfAppResolveCb)
   12100:	4b0b      	ldr	r3, [pc, #44]	; (12130 <m2m_ip_cb+0x2a0>)
   12102:	681b      	ldr	r3, [r3, #0]
   12104:	2b00      	cmp	r3, #0
   12106:	d100      	bne.n	1210a <m2m_ip_cb+0x27a>
   12108:	e15b      	b.n	123c2 <m2m_ip_cb+0x532>
				gpfAppResolveCb((uint8*)strDnsReply.acHostName, strDnsReply.u32HostIP);
   1210a:	4b09      	ldr	r3, [pc, #36]	; (12130 <m2m_ip_cb+0x2a0>)
   1210c:	681a      	ldr	r2, [r3, #0]
   1210e:	230c      	movs	r3, #12
   12110:	18fb      	adds	r3, r7, r3
   12112:	6c19      	ldr	r1, [r3, #64]	; 0x40
   12114:	230c      	movs	r3, #12
   12116:	18fb      	adds	r3, r7, r3
   12118:	0018      	movs	r0, r3
   1211a:	4790      	blx	r2
}
   1211c:	e151      	b.n	123c2 <m2m_ip_cb+0x532>
   1211e:	46c0      	nop			; (mov r8, r8)
   12120:	0000e68d 	.word	0x0000e68d
   12124:	20005594 	.word	0x20005594
   12128:	200054e4 	.word	0x200054e4
   1212c:	20003d2e 	.word	0x20003d2e
   12130:	2000559c 	.word	0x2000559c
	else if((u8OpCode == SOCKET_CMD_RECV) || (u8OpCode == SOCKET_CMD_RECVFROM) || (u8OpCode == SOCKET_CMD_SSL_RECV))
   12134:	1dfb      	adds	r3, r7, #7
   12136:	781b      	ldrb	r3, [r3, #0]
   12138:	2b46      	cmp	r3, #70	; 0x46
   1213a:	d008      	beq.n	1214e <m2m_ip_cb+0x2be>
   1213c:	1dfb      	adds	r3, r7, #7
   1213e:	781b      	ldrb	r3, [r3, #0]
   12140:	2b48      	cmp	r3, #72	; 0x48
   12142:	d004      	beq.n	1214e <m2m_ip_cb+0x2be>
   12144:	1dfb      	adds	r3, r7, #7
   12146:	781b      	ldrb	r3, [r3, #0]
   12148:	2b4d      	cmp	r3, #77	; 0x4d
   1214a:	d000      	beq.n	1214e <m2m_ip_cb+0x2be>
   1214c:	e0b4      	b.n	122b8 <m2m_ip_cb+0x428>
		uint8				u8CallbackMsgID = SOCKET_MSG_RECV;
   1214e:	23df      	movs	r3, #223	; 0xdf
   12150:	18fb      	adds	r3, r7, r3
   12152:	2206      	movs	r2, #6
   12154:	701a      	strb	r2, [r3, #0]
		if(u8OpCode == SOCKET_CMD_RECVFROM)
   12156:	1dfb      	adds	r3, r7, #7
   12158:	781b      	ldrb	r3, [r3, #0]
   1215a:	2b48      	cmp	r3, #72	; 0x48
   1215c:	d103      	bne.n	12166 <m2m_ip_cb+0x2d6>
			u8CallbackMsgID = SOCKET_MSG_RECVFROM;
   1215e:	23df      	movs	r3, #223	; 0xdf
   12160:	18fb      	adds	r3, r7, r3
   12162:	2209      	movs	r2, #9
   12164:	701a      	strb	r2, [r3, #0]
		u16ReadSize = sizeof(tstrRecvReply);
   12166:	23d8      	movs	r3, #216	; 0xd8
   12168:	18fb      	adds	r3, r7, r3
   1216a:	2210      	movs	r2, #16
   1216c:	801a      	strh	r2, [r3, #0]
		if(hif_receive(u32Address, (uint8*)&strRecvReply, u16ReadSize, 0) == M2M_SUCCESS)
   1216e:	23d8      	movs	r3, #216	; 0xd8
   12170:	18fb      	adds	r3, r7, r3
   12172:	881a      	ldrh	r2, [r3, #0]
   12174:	2388      	movs	r3, #136	; 0x88
   12176:	18f9      	adds	r1, r7, r3
   12178:	6838      	ldr	r0, [r7, #0]
   1217a:	2300      	movs	r3, #0
   1217c:	4c93      	ldr	r4, [pc, #588]	; (123cc <m2m_ip_cb+0x53c>)
   1217e:	47a0      	blx	r4
   12180:	1e03      	subs	r3, r0, #0
   12182:	d000      	beq.n	12186 <m2m_ip_cb+0x2f6>
   12184:	e11a      	b.n	123bc <m2m_ip_cb+0x52c>
			uint16 u16SessionID = 0;
   12186:	23d6      	movs	r3, #214	; 0xd6
   12188:	18fb      	adds	r3, r7, r3
   1218a:	2200      	movs	r2, #0
   1218c:	801a      	strh	r2, [r3, #0]
			sock			= strRecvReply.sock;
   1218e:	23d5      	movs	r3, #213	; 0xd5
   12190:	18fb      	adds	r3, r7, r3
   12192:	2288      	movs	r2, #136	; 0x88
   12194:	18ba      	adds	r2, r7, r2
   12196:	7b12      	ldrb	r2, [r2, #12]
   12198:	701a      	strb	r2, [r3, #0]
			u16SessionID = strRecvReply.u16SessionID;
   1219a:	23d6      	movs	r3, #214	; 0xd6
   1219c:	18fb      	adds	r3, r7, r3
   1219e:	2288      	movs	r2, #136	; 0x88
   121a0:	18ba      	adds	r2, r7, r2
   121a2:	89d2      	ldrh	r2, [r2, #14]
   121a4:	801a      	strh	r2, [r3, #0]
			gastrSockets[sock].bIsRecvPending = 0;
   121a6:	23d5      	movs	r3, #213	; 0xd5
   121a8:	18fb      	adds	r3, r7, r3
   121aa:	781b      	ldrb	r3, [r3, #0]
   121ac:	b25b      	sxtb	r3, r3
   121ae:	4a88      	ldr	r2, [pc, #544]	; (123d0 <m2m_ip_cb+0x540>)
   121b0:	011b      	lsls	r3, r3, #4
   121b2:	18d3      	adds	r3, r2, r3
   121b4:	330c      	adds	r3, #12
   121b6:	2200      	movs	r2, #0
   121b8:	701a      	strb	r2, [r3, #0]
			s16RecvStatus	= NM_BSP_B_L_16(strRecvReply.s16RecvStatus);
   121ba:	23d2      	movs	r3, #210	; 0xd2
   121bc:	18fb      	adds	r3, r7, r3
   121be:	2288      	movs	r2, #136	; 0x88
   121c0:	18ba      	adds	r2, r7, r2
   121c2:	8912      	ldrh	r2, [r2, #8]
   121c4:	801a      	strh	r2, [r3, #0]
			u16DataOffset	= NM_BSP_B_L_16(strRecvReply.u16DataOffset);
   121c6:	23d0      	movs	r3, #208	; 0xd0
   121c8:	18fb      	adds	r3, r7, r3
   121ca:	2288      	movs	r2, #136	; 0x88
   121cc:	18ba      	adds	r2, r7, r2
   121ce:	8952      	ldrh	r2, [r2, #10]
   121d0:	801a      	strh	r2, [r3, #0]
			strRecvMsg.strRemoteAddr.sin_port 			= strRecvReply.strRemoteAddr.u16Port;
   121d2:	2388      	movs	r3, #136	; 0x88
   121d4:	18fb      	adds	r3, r7, r3
   121d6:	885a      	ldrh	r2, [r3, #2]
   121d8:	2370      	movs	r3, #112	; 0x70
   121da:	18fb      	adds	r3, r7, r3
   121dc:	815a      	strh	r2, [r3, #10]
			strRecvMsg.strRemoteAddr.sin_addr.s_addr 	= strRecvReply.strRemoteAddr.u32IPAddr;
   121de:	2388      	movs	r3, #136	; 0x88
   121e0:	18fb      	adds	r3, r7, r3
   121e2:	685a      	ldr	r2, [r3, #4]
   121e4:	2370      	movs	r3, #112	; 0x70
   121e6:	18fb      	adds	r3, r7, r3
   121e8:	60da      	str	r2, [r3, #12]
			if(u16SessionID == gastrSockets[sock].u16SessionID)
   121ea:	23d5      	movs	r3, #213	; 0xd5
   121ec:	18fb      	adds	r3, r7, r3
   121ee:	781b      	ldrb	r3, [r3, #0]
   121f0:	b25b      	sxtb	r3, r3
   121f2:	4a77      	ldr	r2, [pc, #476]	; (123d0 <m2m_ip_cb+0x540>)
   121f4:	011b      	lsls	r3, r3, #4
   121f6:	18d3      	adds	r3, r2, r3
   121f8:	3306      	adds	r3, #6
   121fa:	881b      	ldrh	r3, [r3, #0]
   121fc:	b29b      	uxth	r3, r3
   121fe:	22d6      	movs	r2, #214	; 0xd6
   12200:	18ba      	adds	r2, r7, r2
   12202:	8812      	ldrh	r2, [r2, #0]
   12204:	429a      	cmp	r2, r3
   12206:	d148      	bne.n	1229a <m2m_ip_cb+0x40a>
				if((s16RecvStatus > 0) && (s16RecvStatus < u16BufferSize))
   12208:	23d2      	movs	r3, #210	; 0xd2
   1220a:	18fb      	adds	r3, r7, r3
   1220c:	2200      	movs	r2, #0
   1220e:	5e9b      	ldrsh	r3, [r3, r2]
   12210:	2b00      	cmp	r3, #0
   12212:	dd25      	ble.n	12260 <m2m_ip_cb+0x3d0>
   12214:	23d2      	movs	r3, #210	; 0xd2
   12216:	18fb      	adds	r3, r7, r3
   12218:	2200      	movs	r2, #0
   1221a:	5e9a      	ldrsh	r2, [r3, r2]
   1221c:	1d3b      	adds	r3, r7, #4
   1221e:	881b      	ldrh	r3, [r3, #0]
   12220:	429a      	cmp	r2, r3
   12222:	da1d      	bge.n	12260 <m2m_ip_cb+0x3d0>
					u32Address += u16DataOffset;
   12224:	23d0      	movs	r3, #208	; 0xd0
   12226:	18fb      	adds	r3, r7, r3
   12228:	881b      	ldrh	r3, [r3, #0]
   1222a:	683a      	ldr	r2, [r7, #0]
   1222c:	18d3      	adds	r3, r2, r3
   1222e:	603b      	str	r3, [r7, #0]
					u16ReadSize = (uint16)s16RecvStatus;
   12230:	23d8      	movs	r3, #216	; 0xd8
   12232:	18fb      	adds	r3, r7, r3
   12234:	22d2      	movs	r2, #210	; 0xd2
   12236:	18ba      	adds	r2, r7, r2
   12238:	8812      	ldrh	r2, [r2, #0]
   1223a:	801a      	strh	r2, [r3, #0]
					Socket_ReadSocketData(sock, &strRecvMsg, u8CallbackMsgID, u32Address, u16ReadSize);
   1223c:	683c      	ldr	r4, [r7, #0]
   1223e:	23df      	movs	r3, #223	; 0xdf
   12240:	18fb      	adds	r3, r7, r3
   12242:	781a      	ldrb	r2, [r3, #0]
   12244:	2370      	movs	r3, #112	; 0x70
   12246:	18f9      	adds	r1, r7, r3
   12248:	23d5      	movs	r3, #213	; 0xd5
   1224a:	18fb      	adds	r3, r7, r3
   1224c:	2000      	movs	r0, #0
   1224e:	5618      	ldrsb	r0, [r3, r0]
   12250:	23d8      	movs	r3, #216	; 0xd8
   12252:	18fb      	adds	r3, r7, r3
   12254:	881b      	ldrh	r3, [r3, #0]
   12256:	9300      	str	r3, [sp, #0]
   12258:	0023      	movs	r3, r4
   1225a:	4c5e      	ldr	r4, [pc, #376]	; (123d4 <m2m_ip_cb+0x544>)
   1225c:	47a0      	blx	r4
	{
   1225e:	e0ad      	b.n	123bc <m2m_ip_cb+0x52c>
					strRecvMsg.s16BufferSize	= s16RecvStatus;
   12260:	2370      	movs	r3, #112	; 0x70
   12262:	18fb      	adds	r3, r7, r3
   12264:	22d2      	movs	r2, #210	; 0xd2
   12266:	18ba      	adds	r2, r7, r2
   12268:	8812      	ldrh	r2, [r2, #0]
   1226a:	809a      	strh	r2, [r3, #4]
					strRecvMsg.pu8Buffer		= NULL;
   1226c:	2370      	movs	r3, #112	; 0x70
   1226e:	18fb      	adds	r3, r7, r3
   12270:	2200      	movs	r2, #0
   12272:	601a      	str	r2, [r3, #0]
					if(gpfAppSocketCb)
   12274:	4b58      	ldr	r3, [pc, #352]	; (123d8 <m2m_ip_cb+0x548>)
   12276:	681b      	ldr	r3, [r3, #0]
   12278:	2b00      	cmp	r3, #0
   1227a:	d100      	bne.n	1227e <m2m_ip_cb+0x3ee>
   1227c:	e09e      	b.n	123bc <m2m_ip_cb+0x52c>
						gpfAppSocketCb(sock,u8CallbackMsgID, &strRecvMsg);
   1227e:	4b56      	ldr	r3, [pc, #344]	; (123d8 <m2m_ip_cb+0x548>)
   12280:	681b      	ldr	r3, [r3, #0]
   12282:	2270      	movs	r2, #112	; 0x70
   12284:	18bc      	adds	r4, r7, r2
   12286:	22df      	movs	r2, #223	; 0xdf
   12288:	18ba      	adds	r2, r7, r2
   1228a:	7811      	ldrb	r1, [r2, #0]
   1228c:	22d5      	movs	r2, #213	; 0xd5
   1228e:	18ba      	adds	r2, r7, r2
   12290:	2000      	movs	r0, #0
   12292:	5610      	ldrsb	r0, [r2, r0]
   12294:	0022      	movs	r2, r4
   12296:	4798      	blx	r3
	{
   12298:	e090      	b.n	123bc <m2m_ip_cb+0x52c>
				if(u16ReadSize < u16BufferSize)
   1229a:	23d8      	movs	r3, #216	; 0xd8
   1229c:	18fa      	adds	r2, r7, r3
   1229e:	1d3b      	adds	r3, r7, #4
   122a0:	8812      	ldrh	r2, [r2, #0]
   122a2:	881b      	ldrh	r3, [r3, #0]
   122a4:	429a      	cmp	r2, r3
   122a6:	d300      	bcc.n	122aa <m2m_ip_cb+0x41a>
   122a8:	e088      	b.n	123bc <m2m_ip_cb+0x52c>
					if(hif_receive(0, NULL, 0, 1) == M2M_SUCCESS)
   122aa:	2301      	movs	r3, #1
   122ac:	2200      	movs	r2, #0
   122ae:	2100      	movs	r1, #0
   122b0:	2000      	movs	r0, #0
   122b2:	4c46      	ldr	r4, [pc, #280]	; (123cc <m2m_ip_cb+0x53c>)
   122b4:	47a0      	blx	r4
	{
   122b6:	e081      	b.n	123bc <m2m_ip_cb+0x52c>
	else if((u8OpCode == SOCKET_CMD_SEND) || (u8OpCode == SOCKET_CMD_SENDTO) || (u8OpCode == SOCKET_CMD_SSL_SEND))
   122b8:	1dfb      	adds	r3, r7, #7
   122ba:	781b      	ldrb	r3, [r3, #0]
   122bc:	2b45      	cmp	r3, #69	; 0x45
   122be:	d007      	beq.n	122d0 <m2m_ip_cb+0x440>
   122c0:	1dfb      	adds	r3, r7, #7
   122c2:	781b      	ldrb	r3, [r3, #0]
   122c4:	2b47      	cmp	r3, #71	; 0x47
   122c6:	d003      	beq.n	122d0 <m2m_ip_cb+0x440>
   122c8:	1dfb      	adds	r3, r7, #7
   122ca:	781b      	ldrb	r3, [r3, #0]
   122cc:	2b4c      	cmp	r3, #76	; 0x4c
   122ce:	d14c      	bne.n	1236a <m2m_ip_cb+0x4da>
		uint8			u8CallbackMsgID = SOCKET_MSG_SEND;
   122d0:	23de      	movs	r3, #222	; 0xde
   122d2:	18fb      	adds	r3, r7, r3
   122d4:	2207      	movs	r2, #7
   122d6:	701a      	strb	r2, [r3, #0]
		if(u8OpCode == SOCKET_CMD_SENDTO)
   122d8:	1dfb      	adds	r3, r7, #7
   122da:	781b      	ldrb	r3, [r3, #0]
   122dc:	2b47      	cmp	r3, #71	; 0x47
   122de:	d103      	bne.n	122e8 <m2m_ip_cb+0x458>
			u8CallbackMsgID = SOCKET_MSG_SENDTO;
   122e0:	23de      	movs	r3, #222	; 0xde
   122e2:	18fb      	adds	r3, r7, r3
   122e4:	2208      	movs	r2, #8
   122e6:	701a      	strb	r2, [r3, #0]
		if(hif_receive(u32Address, (uint8*)&strReply, sizeof(tstrSendReply), 0) == M2M_SUCCESS)
   122e8:	2364      	movs	r3, #100	; 0x64
   122ea:	18f9      	adds	r1, r7, r3
   122ec:	6838      	ldr	r0, [r7, #0]
   122ee:	2300      	movs	r3, #0
   122f0:	2208      	movs	r2, #8
   122f2:	4c36      	ldr	r4, [pc, #216]	; (123cc <m2m_ip_cb+0x53c>)
   122f4:	47a0      	blx	r4
   122f6:	1e03      	subs	r3, r0, #0
   122f8:	d162      	bne.n	123c0 <m2m_ip_cb+0x530>
			uint16 u16SessionID = 0;
   122fa:	23dc      	movs	r3, #220	; 0xdc
   122fc:	18fb      	adds	r3, r7, r3
   122fe:	2200      	movs	r2, #0
   12300:	801a      	strh	r2, [r3, #0]
			sock = strReply.sock;
   12302:	23db      	movs	r3, #219	; 0xdb
   12304:	18fb      	adds	r3, r7, r3
   12306:	2264      	movs	r2, #100	; 0x64
   12308:	18ba      	adds	r2, r7, r2
   1230a:	7812      	ldrb	r2, [r2, #0]
   1230c:	701a      	strb	r2, [r3, #0]
			u16SessionID = strReply.u16SessionID;
   1230e:	23dc      	movs	r3, #220	; 0xdc
   12310:	18fb      	adds	r3, r7, r3
   12312:	2264      	movs	r2, #100	; 0x64
   12314:	18ba      	adds	r2, r7, r2
   12316:	8892      	ldrh	r2, [r2, #4]
   12318:	801a      	strh	r2, [r3, #0]
			s16Rcvd = NM_BSP_B_L_16(strReply.s16SentBytes);
   1231a:	2364      	movs	r3, #100	; 0x64
   1231c:	18fb      	adds	r3, r7, r3
   1231e:	2202      	movs	r2, #2
   12320:	5e9a      	ldrsh	r2, [r3, r2]
   12322:	236e      	movs	r3, #110	; 0x6e
   12324:	18fb      	adds	r3, r7, r3
   12326:	801a      	strh	r2, [r3, #0]
			if(u16SessionID == gastrSockets[sock].u16SessionID)
   12328:	23db      	movs	r3, #219	; 0xdb
   1232a:	18fb      	adds	r3, r7, r3
   1232c:	781b      	ldrb	r3, [r3, #0]
   1232e:	b25b      	sxtb	r3, r3
   12330:	4a27      	ldr	r2, [pc, #156]	; (123d0 <m2m_ip_cb+0x540>)
   12332:	011b      	lsls	r3, r3, #4
   12334:	18d3      	adds	r3, r2, r3
   12336:	3306      	adds	r3, #6
   12338:	881b      	ldrh	r3, [r3, #0]
   1233a:	b29b      	uxth	r3, r3
   1233c:	22dc      	movs	r2, #220	; 0xdc
   1233e:	18ba      	adds	r2, r7, r2
   12340:	8812      	ldrh	r2, [r2, #0]
   12342:	429a      	cmp	r2, r3
   12344:	d13c      	bne.n	123c0 <m2m_ip_cb+0x530>
				if(gpfAppSocketCb)
   12346:	4b24      	ldr	r3, [pc, #144]	; (123d8 <m2m_ip_cb+0x548>)
   12348:	681b      	ldr	r3, [r3, #0]
   1234a:	2b00      	cmp	r3, #0
   1234c:	d038      	beq.n	123c0 <m2m_ip_cb+0x530>
					gpfAppSocketCb(sock,u8CallbackMsgID, &s16Rcvd);
   1234e:	4b22      	ldr	r3, [pc, #136]	; (123d8 <m2m_ip_cb+0x548>)
   12350:	681b      	ldr	r3, [r3, #0]
   12352:	226e      	movs	r2, #110	; 0x6e
   12354:	18bc      	adds	r4, r7, r2
   12356:	22de      	movs	r2, #222	; 0xde
   12358:	18ba      	adds	r2, r7, r2
   1235a:	7811      	ldrb	r1, [r2, #0]
   1235c:	22db      	movs	r2, #219	; 0xdb
   1235e:	18ba      	adds	r2, r7, r2
   12360:	2000      	movs	r0, #0
   12362:	5610      	ldrsb	r0, [r2, r0]
   12364:	0022      	movs	r2, r4
   12366:	4798      	blx	r3
	{
   12368:	e02a      	b.n	123c0 <m2m_ip_cb+0x530>
	else if(u8OpCode == SOCKET_CMD_PING)
   1236a:	1dfb      	adds	r3, r7, #7
   1236c:	781b      	ldrb	r3, [r3, #0]
   1236e:	2b52      	cmp	r3, #82	; 0x52
   12370:	d127      	bne.n	123c2 <m2m_ip_cb+0x532>
		if(hif_receive(u32Address, (uint8*)&strPingReply, sizeof(tstrPingReply), 1) == M2M_SUCCESS)
   12372:	2350      	movs	r3, #80	; 0x50
   12374:	18f9      	adds	r1, r7, r3
   12376:	6838      	ldr	r0, [r7, #0]
   12378:	2301      	movs	r3, #1
   1237a:	2214      	movs	r2, #20
   1237c:	4c13      	ldr	r4, [pc, #76]	; (123cc <m2m_ip_cb+0x53c>)
   1237e:	47a0      	blx	r4
   12380:	1e03      	subs	r3, r0, #0
   12382:	d11e      	bne.n	123c2 <m2m_ip_cb+0x532>
			gfpPingCb = (void (*)(uint32 , uint32 , uint8))strPingReply.u32CmdPrivate;
   12384:	2350      	movs	r3, #80	; 0x50
   12386:	18fb      	adds	r3, r7, r3
   12388:	685b      	ldr	r3, [r3, #4]
   1238a:	001a      	movs	r2, r3
   1238c:	4b13      	ldr	r3, [pc, #76]	; (123dc <m2m_ip_cb+0x54c>)
   1238e:	601a      	str	r2, [r3, #0]
			if(gfpPingCb != NULL)
   12390:	4b12      	ldr	r3, [pc, #72]	; (123dc <m2m_ip_cb+0x54c>)
   12392:	681b      	ldr	r3, [r3, #0]
   12394:	2b00      	cmp	r3, #0
   12396:	d014      	beq.n	123c2 <m2m_ip_cb+0x532>
				gfpPingCb(strPingReply.u32IPAddr, strPingReply.u32RTT, strPingReply.u8ErrorCode);
   12398:	4b10      	ldr	r3, [pc, #64]	; (123dc <m2m_ip_cb+0x54c>)
   1239a:	681c      	ldr	r4, [r3, #0]
   1239c:	2350      	movs	r3, #80	; 0x50
   1239e:	18fb      	adds	r3, r7, r3
   123a0:	6818      	ldr	r0, [r3, #0]
   123a2:	2350      	movs	r3, #80	; 0x50
   123a4:	18fb      	adds	r3, r7, r3
   123a6:	6899      	ldr	r1, [r3, #8]
   123a8:	2350      	movs	r3, #80	; 0x50
   123aa:	18fb      	adds	r3, r7, r3
   123ac:	7c1b      	ldrb	r3, [r3, #16]
   123ae:	001a      	movs	r2, r3
   123b0:	47a0      	blx	r4
}
   123b2:	e006      	b.n	123c2 <m2m_ip_cb+0x532>
	{
   123b4:	46c0      	nop			; (mov r8, r8)
   123b6:	e004      	b.n	123c2 <m2m_ip_cb+0x532>
	{
   123b8:	46c0      	nop			; (mov r8, r8)
   123ba:	e002      	b.n	123c2 <m2m_ip_cb+0x532>
	{
   123bc:	46c0      	nop			; (mov r8, r8)
   123be:	e000      	b.n	123c2 <m2m_ip_cb+0x532>
	{
   123c0:	46c0      	nop			; (mov r8, r8)
}
   123c2:	46c0      	nop			; (mov r8, r8)
   123c4:	46bd      	mov	sp, r7
   123c6:	b039      	add	sp, #228	; 0xe4
   123c8:	bd90      	pop	{r4, r7, pc}
   123ca:	46c0      	nop			; (mov r8, r8)
   123cc:	0000e68d 	.word	0x0000e68d
   123d0:	200054e4 	.word	0x200054e4
   123d4:	00011c95 	.word	0x00011c95
   123d8:	20005594 	.word	0x20005594
   123dc:	20005598 	.word	0x20005598

000123e0 <socketInit>:

Date
		4 June 2012
*********************************************************************/
void socketInit(void)
{
   123e0:	b580      	push	{r7, lr}
   123e2:	af00      	add	r7, sp, #0
	if(gbSocketInit == 0)
   123e4:	4b0c      	ldr	r3, [pc, #48]	; (12418 <socketInit+0x38>)
   123e6:	781b      	ldrb	r3, [r3, #0]
   123e8:	b2db      	uxtb	r3, r3
   123ea:	2b00      	cmp	r3, #0
   123ec:	d110      	bne.n	12410 <socketInit+0x30>
	{
		m2m_memset((uint8*)gastrSockets, 0, MAX_SOCKET * sizeof(tstrSocket));
   123ee:	4b0b      	ldr	r3, [pc, #44]	; (1241c <socketInit+0x3c>)
   123f0:	22b0      	movs	r2, #176	; 0xb0
   123f2:	2100      	movs	r1, #0
   123f4:	0018      	movs	r0, r3
   123f6:	4b0a      	ldr	r3, [pc, #40]	; (12420 <socketInit+0x40>)
   123f8:	4798      	blx	r3
		hif_register_cb(M2M_REQ_GROUP_IP,m2m_ip_cb);
   123fa:	4b0a      	ldr	r3, [pc, #40]	; (12424 <socketInit+0x44>)
   123fc:	0019      	movs	r1, r3
   123fe:	2002      	movs	r0, #2
   12400:	4b09      	ldr	r3, [pc, #36]	; (12428 <socketInit+0x48>)
   12402:	4798      	blx	r3
		gbSocketInit	= 1;
   12404:	4b04      	ldr	r3, [pc, #16]	; (12418 <socketInit+0x38>)
   12406:	2201      	movs	r2, #1
   12408:	701a      	strb	r2, [r3, #0]
		gu16SessionID	= 0;
   1240a:	4b08      	ldr	r3, [pc, #32]	; (1242c <socketInit+0x4c>)
   1240c:	2200      	movs	r2, #0
   1240e:	801a      	strh	r2, [r3, #0]
	}
}
   12410:	46c0      	nop			; (mov r8, r8)
   12412:	46bd      	mov	sp, r7
   12414:	bd80      	pop	{r7, pc}
   12416:	46c0      	nop			; (mov r8, r8)
   12418:	20003d30 	.word	0x20003d30
   1241c:	200054e4 	.word	0x200054e4
   12420:	0000db11 	.word	0x0000db11
   12424:	00011e91 	.word	0x00011e91
   12428:	0000e80d 	.word	0x0000e80d
   1242c:	20003d2e 	.word	0x20003d2e

00012430 <socketDeinit>:

Date
		27 Feb 2015
*********************************************************************/
void socketDeinit(void)
{	
   12430:	b580      	push	{r7, lr}
   12432:	af00      	add	r7, sp, #0
	m2m_memset((uint8*)gastrSockets, 0, MAX_SOCKET * sizeof(tstrSocket));
   12434:	4b0a      	ldr	r3, [pc, #40]	; (12460 <socketDeinit+0x30>)
   12436:	22b0      	movs	r2, #176	; 0xb0
   12438:	2100      	movs	r1, #0
   1243a:	0018      	movs	r0, r3
   1243c:	4b09      	ldr	r3, [pc, #36]	; (12464 <socketDeinit+0x34>)
   1243e:	4798      	blx	r3
	hif_register_cb(M2M_REQ_GROUP_IP, NULL);
   12440:	2100      	movs	r1, #0
   12442:	2002      	movs	r0, #2
   12444:	4b08      	ldr	r3, [pc, #32]	; (12468 <socketDeinit+0x38>)
   12446:	4798      	blx	r3
	gpfAppSocketCb	= NULL;
   12448:	4b08      	ldr	r3, [pc, #32]	; (1246c <socketDeinit+0x3c>)
   1244a:	2200      	movs	r2, #0
   1244c:	601a      	str	r2, [r3, #0]
	gpfAppResolveCb	= NULL;
   1244e:	4b08      	ldr	r3, [pc, #32]	; (12470 <socketDeinit+0x40>)
   12450:	2200      	movs	r2, #0
   12452:	601a      	str	r2, [r3, #0]
	gbSocketInit	= 0;
   12454:	4b07      	ldr	r3, [pc, #28]	; (12474 <socketDeinit+0x44>)
   12456:	2200      	movs	r2, #0
   12458:	701a      	strb	r2, [r3, #0]
}
   1245a:	46c0      	nop			; (mov r8, r8)
   1245c:	46bd      	mov	sp, r7
   1245e:	bd80      	pop	{r7, pc}
   12460:	200054e4 	.word	0x200054e4
   12464:	0000db11 	.word	0x0000db11
   12468:	0000e80d 	.word	0x0000e80d
   1246c:	20005594 	.word	0x20005594
   12470:	2000559c 	.word	0x2000559c
   12474:	20003d30 	.word	0x20003d30

00012478 <registerSocketCallback>:

Date
		4 June 2012
*********************************************************************/
void registerSocketCallback(tpfAppSocketCb pfAppSocketCb, tpfAppResolveCb pfAppResolveCb)
{
   12478:	b580      	push	{r7, lr}
   1247a:	b082      	sub	sp, #8
   1247c:	af00      	add	r7, sp, #0
   1247e:	6078      	str	r0, [r7, #4]
   12480:	6039      	str	r1, [r7, #0]
	gpfAppSocketCb = pfAppSocketCb;
   12482:	4b05      	ldr	r3, [pc, #20]	; (12498 <registerSocketCallback+0x20>)
   12484:	687a      	ldr	r2, [r7, #4]
   12486:	601a      	str	r2, [r3, #0]
	gpfAppResolveCb = pfAppResolveCb;
   12488:	4b04      	ldr	r3, [pc, #16]	; (1249c <registerSocketCallback+0x24>)
   1248a:	683a      	ldr	r2, [r7, #0]
   1248c:	601a      	str	r2, [r3, #0]
}
   1248e:	46c0      	nop			; (mov r8, r8)
   12490:	46bd      	mov	sp, r7
   12492:	b002      	add	sp, #8
   12494:	bd80      	pop	{r7, pc}
   12496:	46c0      	nop			; (mov r8, r8)
   12498:	20005594 	.word	0x20005594
   1249c:	2000559c 	.word	0x2000559c

000124a0 <socket>:

Date
		4 June 2012
*********************************************************************/
SOCKET socket(uint16 u16Domain, uint8 u8Type, uint8 u8Flags)
{
   124a0:	b590      	push	{r4, r7, lr}
   124a2:	b08d      	sub	sp, #52	; 0x34
   124a4:	af04      	add	r7, sp, #16
   124a6:	0004      	movs	r4, r0
   124a8:	0008      	movs	r0, r1
   124aa:	0011      	movs	r1, r2
   124ac:	1dbb      	adds	r3, r7, #6
   124ae:	1c22      	adds	r2, r4, #0
   124b0:	801a      	strh	r2, [r3, #0]
   124b2:	1d7b      	adds	r3, r7, #5
   124b4:	1c02      	adds	r2, r0, #0
   124b6:	701a      	strb	r2, [r3, #0]
   124b8:	1d3b      	adds	r3, r7, #4
   124ba:	1c0a      	adds	r2, r1, #0
   124bc:	701a      	strb	r2, [r3, #0]
	SOCKET					sock = -1;
   124be:	231f      	movs	r3, #31
   124c0:	18fb      	adds	r3, r7, r3
   124c2:	22ff      	movs	r2, #255	; 0xff
   124c4:	701a      	strb	r2, [r3, #0]
	volatile tstrSocket		*pstrSock;
	static volatile uint8	u8NextTcpSock	= 0;
	static volatile uint8	u8NextUdpSock	= 0;

	/* The only supported family is the AF_INET for UDP and TCP transport layer protocols. */
	if(u16Domain == AF_INET)
   124c6:	1dbb      	adds	r3, r7, #6
   124c8:	881b      	ldrh	r3, [r3, #0]
   124ca:	2b02      	cmp	r3, #2
   124cc:	d000      	beq.n	124d0 <socket+0x30>
   124ce:	e0ce      	b.n	1266e <socket+0x1ce>
	{
		if(u8Type == SOCK_STREAM)
   124d0:	1d7b      	adds	r3, r7, #5
   124d2:	781b      	ldrb	r3, [r3, #0]
   124d4:	2b01      	cmp	r3, #1
   124d6:	d135      	bne.n	12544 <socket+0xa4>
		{
			for(u8Count = 0; u8Count < TCP_SOCK_MAX; u8Count ++)
   124d8:	231e      	movs	r3, #30
   124da:	18fb      	adds	r3, r7, r3
   124dc:	2200      	movs	r2, #0
   124de:	701a      	strb	r2, [r3, #0]
   124e0:	e02a      	b.n	12538 <socket+0x98>
			{
				u8SockID	= u8NextTcpSock;
   124e2:	2317      	movs	r3, #23
   124e4:	18fb      	adds	r3, r7, r3
   124e6:	4a66      	ldr	r2, [pc, #408]	; (12680 <socket+0x1e0>)
   124e8:	7812      	ldrb	r2, [r2, #0]
   124ea:	701a      	strb	r2, [r3, #0]
				pstrSock	= &gastrSockets[u8NextTcpSock];
   124ec:	4b64      	ldr	r3, [pc, #400]	; (12680 <socket+0x1e0>)
   124ee:	781b      	ldrb	r3, [r3, #0]
   124f0:	b2db      	uxtb	r3, r3
   124f2:	011a      	lsls	r2, r3, #4
   124f4:	4b63      	ldr	r3, [pc, #396]	; (12684 <socket+0x1e4>)
   124f6:	18d3      	adds	r3, r2, r3
   124f8:	61bb      	str	r3, [r7, #24]
				u8NextTcpSock = (u8NextTcpSock + 1) % TCP_SOCK_MAX;
   124fa:	4b61      	ldr	r3, [pc, #388]	; (12680 <socket+0x1e0>)
   124fc:	781b      	ldrb	r3, [r3, #0]
   124fe:	b2db      	uxtb	r3, r3
   12500:	1c5a      	adds	r2, r3, #1
   12502:	4b61      	ldr	r3, [pc, #388]	; (12688 <socket+0x1e8>)
   12504:	2107      	movs	r1, #7
   12506:	0010      	movs	r0, r2
   12508:	4798      	blx	r3
   1250a:	000b      	movs	r3, r1
   1250c:	b2da      	uxtb	r2, r3
   1250e:	4b5c      	ldr	r3, [pc, #368]	; (12680 <socket+0x1e0>)
   12510:	701a      	strb	r2, [r3, #0]
				if(!pstrSock->bIsUsed)
   12512:	69bb      	ldr	r3, [r7, #24]
   12514:	7a9b      	ldrb	r3, [r3, #10]
   12516:	b2db      	uxtb	r3, r3
   12518:	2b00      	cmp	r3, #0
   1251a:	d106      	bne.n	1252a <socket+0x8a>
				{
					sock = (SOCKET)u8SockID;
   1251c:	231f      	movs	r3, #31
   1251e:	18fb      	adds	r3, r7, r3
   12520:	2217      	movs	r2, #23
   12522:	18ba      	adds	r2, r7, r2
   12524:	7812      	ldrb	r2, [r2, #0]
   12526:	701a      	strb	r2, [r3, #0]
					break;
   12528:	e04c      	b.n	125c4 <socket+0x124>
			for(u8Count = 0; u8Count < TCP_SOCK_MAX; u8Count ++)
   1252a:	231e      	movs	r3, #30
   1252c:	18fb      	adds	r3, r7, r3
   1252e:	781a      	ldrb	r2, [r3, #0]
   12530:	231e      	movs	r3, #30
   12532:	18fb      	adds	r3, r7, r3
   12534:	3201      	adds	r2, #1
   12536:	701a      	strb	r2, [r3, #0]
   12538:	231e      	movs	r3, #30
   1253a:	18fb      	adds	r3, r7, r3
   1253c:	781b      	ldrb	r3, [r3, #0]
   1253e:	2b06      	cmp	r3, #6
   12540:	d9cf      	bls.n	124e2 <socket+0x42>
   12542:	e03f      	b.n	125c4 <socket+0x124>
				}
			}
		}
		else if(u8Type == SOCK_DGRAM)
   12544:	1d7b      	adds	r3, r7, #5
   12546:	781b      	ldrb	r3, [r3, #0]
   12548:	2b02      	cmp	r3, #2
   1254a:	d13b      	bne.n	125c4 <socket+0x124>
		{
			volatile tstrSocket	*pastrUDPSockets = &gastrSockets[TCP_SOCK_MAX];
   1254c:	4b4f      	ldr	r3, [pc, #316]	; (1268c <socket+0x1ec>)
   1254e:	613b      	str	r3, [r7, #16]
			for(u8Count = 0; u8Count < UDP_SOCK_MAX; u8Count ++)
   12550:	231e      	movs	r3, #30
   12552:	18fb      	adds	r3, r7, r3
   12554:	2200      	movs	r2, #0
   12556:	701a      	strb	r2, [r3, #0]
   12558:	e02f      	b.n	125ba <socket+0x11a>
			{
				u8SockID		= u8NextUdpSock;
   1255a:	2317      	movs	r3, #23
   1255c:	18fb      	adds	r3, r7, r3
   1255e:	4a4c      	ldr	r2, [pc, #304]	; (12690 <socket+0x1f0>)
   12560:	7812      	ldrb	r2, [r2, #0]
   12562:	701a      	strb	r2, [r3, #0]
				pstrSock		= &pastrUDPSockets[u8NextUdpSock];
   12564:	4b4a      	ldr	r3, [pc, #296]	; (12690 <socket+0x1f0>)
   12566:	781b      	ldrb	r3, [r3, #0]
   12568:	b2db      	uxtb	r3, r3
   1256a:	011b      	lsls	r3, r3, #4
   1256c:	693a      	ldr	r2, [r7, #16]
   1256e:	18d3      	adds	r3, r2, r3
   12570:	61bb      	str	r3, [r7, #24]
				u8NextUdpSock	= (u8NextUdpSock + 1) % UDP_SOCK_MAX;
   12572:	4b47      	ldr	r3, [pc, #284]	; (12690 <socket+0x1f0>)
   12574:	781b      	ldrb	r3, [r3, #0]
   12576:	b2db      	uxtb	r3, r3
   12578:	3301      	adds	r3, #1
   1257a:	4a46      	ldr	r2, [pc, #280]	; (12694 <socket+0x1f4>)
   1257c:	4013      	ands	r3, r2
   1257e:	d504      	bpl.n	1258a <socket+0xea>
   12580:	3b01      	subs	r3, #1
   12582:	2204      	movs	r2, #4
   12584:	4252      	negs	r2, r2
   12586:	4313      	orrs	r3, r2
   12588:	3301      	adds	r3, #1
   1258a:	b2da      	uxtb	r2, r3
   1258c:	4b40      	ldr	r3, [pc, #256]	; (12690 <socket+0x1f0>)
   1258e:	701a      	strb	r2, [r3, #0]
				if(!pstrSock->bIsUsed)
   12590:	69bb      	ldr	r3, [r7, #24]
   12592:	7a9b      	ldrb	r3, [r3, #10]
   12594:	b2db      	uxtb	r3, r3
   12596:	2b00      	cmp	r3, #0
   12598:	d108      	bne.n	125ac <socket+0x10c>
				{
					sock = (SOCKET)(u8SockID + TCP_SOCK_MAX);
   1259a:	2317      	movs	r3, #23
   1259c:	18fb      	adds	r3, r7, r3
   1259e:	781b      	ldrb	r3, [r3, #0]
   125a0:	3307      	adds	r3, #7
   125a2:	b2da      	uxtb	r2, r3
   125a4:	231f      	movs	r3, #31
   125a6:	18fb      	adds	r3, r7, r3
   125a8:	701a      	strb	r2, [r3, #0]
					break;
   125aa:	e00b      	b.n	125c4 <socket+0x124>
			for(u8Count = 0; u8Count < UDP_SOCK_MAX; u8Count ++)
   125ac:	231e      	movs	r3, #30
   125ae:	18fb      	adds	r3, r7, r3
   125b0:	781a      	ldrb	r2, [r3, #0]
   125b2:	231e      	movs	r3, #30
   125b4:	18fb      	adds	r3, r7, r3
   125b6:	3201      	adds	r2, #1
   125b8:	701a      	strb	r2, [r3, #0]
   125ba:	231e      	movs	r3, #30
   125bc:	18fb      	adds	r3, r7, r3
   125be:	781b      	ldrb	r3, [r3, #0]
   125c0:	2b03      	cmp	r3, #3
   125c2:	d9ca      	bls.n	1255a <socket+0xba>
				}
			}
		}

		if(sock >= 0)
   125c4:	231f      	movs	r3, #31
   125c6:	18fb      	adds	r3, r7, r3
   125c8:	781b      	ldrb	r3, [r3, #0]
   125ca:	2b7f      	cmp	r3, #127	; 0x7f
   125cc:	d84f      	bhi.n	1266e <socket+0x1ce>
		{
			m2m_memset((uint8*)pstrSock, 0, sizeof(tstrSocket));
   125ce:	69bb      	ldr	r3, [r7, #24]
   125d0:	2210      	movs	r2, #16
   125d2:	2100      	movs	r1, #0
   125d4:	0018      	movs	r0, r3
   125d6:	4b30      	ldr	r3, [pc, #192]	; (12698 <socket+0x1f8>)
   125d8:	4798      	blx	r3
			pstrSock->bIsUsed = 1;
   125da:	69bb      	ldr	r3, [r7, #24]
   125dc:	2201      	movs	r2, #1
   125de:	729a      	strb	r2, [r3, #10]

			/* The session ID is used to distinguish different socket connections
				by comparing the assigned session ID to the one reported by the firmware*/
			++gu16SessionID;
   125e0:	4b2e      	ldr	r3, [pc, #184]	; (1269c <socket+0x1fc>)
   125e2:	881b      	ldrh	r3, [r3, #0]
   125e4:	b29b      	uxth	r3, r3
   125e6:	3301      	adds	r3, #1
   125e8:	b29a      	uxth	r2, r3
   125ea:	4b2c      	ldr	r3, [pc, #176]	; (1269c <socket+0x1fc>)
   125ec:	801a      	strh	r2, [r3, #0]
			if(gu16SessionID == 0)
   125ee:	4b2b      	ldr	r3, [pc, #172]	; (1269c <socket+0x1fc>)
   125f0:	881b      	ldrh	r3, [r3, #0]
   125f2:	b29b      	uxth	r3, r3
   125f4:	2b00      	cmp	r3, #0
   125f6:	d106      	bne.n	12606 <socket+0x166>
				++gu16SessionID;
   125f8:	4b28      	ldr	r3, [pc, #160]	; (1269c <socket+0x1fc>)
   125fa:	881b      	ldrh	r3, [r3, #0]
   125fc:	b29b      	uxth	r3, r3
   125fe:	3301      	adds	r3, #1
   12600:	b29a      	uxth	r2, r3
   12602:	4b26      	ldr	r3, [pc, #152]	; (1269c <socket+0x1fc>)
   12604:	801a      	strh	r2, [r3, #0]
				
			pstrSock->u16SessionID = gu16SessionID;
   12606:	4b25      	ldr	r3, [pc, #148]	; (1269c <socket+0x1fc>)
   12608:	881b      	ldrh	r3, [r3, #0]
   1260a:	b29a      	uxth	r2, r3
   1260c:	69bb      	ldr	r3, [r7, #24]
   1260e:	80da      	strh	r2, [r3, #6]
            M2M_INFO("Socket %d session ID = %d\r\n",sock, gu16SessionID );
   12610:	4b23      	ldr	r3, [pc, #140]	; (126a0 <socket+0x200>)
   12612:	0018      	movs	r0, r3
   12614:	4b23      	ldr	r3, [pc, #140]	; (126a4 <socket+0x204>)
   12616:	4798      	blx	r3
   12618:	231f      	movs	r3, #31
   1261a:	18fb      	adds	r3, r7, r3
   1261c:	2100      	movs	r1, #0
   1261e:	5659      	ldrsb	r1, [r3, r1]
   12620:	4b1e      	ldr	r3, [pc, #120]	; (1269c <socket+0x1fc>)
   12622:	881b      	ldrh	r3, [r3, #0]
   12624:	b29b      	uxth	r3, r3
   12626:	001a      	movs	r2, r3
   12628:	4b1f      	ldr	r3, [pc, #124]	; (126a8 <socket+0x208>)
   1262a:	0018      	movs	r0, r3
   1262c:	4b1d      	ldr	r3, [pc, #116]	; (126a4 <socket+0x204>)
   1262e:	4798      	blx	r3
   12630:	4b1e      	ldr	r3, [pc, #120]	; (126ac <socket+0x20c>)
   12632:	0018      	movs	r0, r3
   12634:	4b1b      	ldr	r3, [pc, #108]	; (126a4 <socket+0x204>)
   12636:	4798      	blx	r3

			if(u8Flags & SOCKET_FLAGS_SSL)
   12638:	1d3b      	adds	r3, r7, #4
   1263a:	781b      	ldrb	r3, [r3, #0]
   1263c:	2201      	movs	r2, #1
   1263e:	4013      	ands	r3, r2
   12640:	d015      	beq.n	1266e <socket+0x1ce>
			{
				tstrSSLSocketCreateCmd	strSSLCreate;
				strSSLCreate.sslSock = sock;
   12642:	230c      	movs	r3, #12
   12644:	18fb      	adds	r3, r7, r3
   12646:	221f      	movs	r2, #31
   12648:	18ba      	adds	r2, r7, r2
   1264a:	7812      	ldrb	r2, [r2, #0]
   1264c:	701a      	strb	r2, [r3, #0]
				pstrSock->u8SSLFlags = SSL_FLAGS_ACTIVE | SSL_FLAGS_NO_TX_COPY;
   1264e:	69bb      	ldr	r3, [r7, #24]
   12650:	2221      	movs	r2, #33	; 0x21
   12652:	72da      	strb	r2, [r3, #11]
				SOCKET_REQUEST(SOCKET_CMD_SSL_CREATE, (uint8*)&strSSLCreate, sizeof(tstrSSLSocketCreateCmd), 0, 0, 0);
   12654:	230c      	movs	r3, #12
   12656:	18fa      	adds	r2, r7, r3
   12658:	2300      	movs	r3, #0
   1265a:	9302      	str	r3, [sp, #8]
   1265c:	2300      	movs	r3, #0
   1265e:	9301      	str	r3, [sp, #4]
   12660:	2300      	movs	r3, #0
   12662:	9300      	str	r3, [sp, #0]
   12664:	2304      	movs	r3, #4
   12666:	2150      	movs	r1, #80	; 0x50
   12668:	2002      	movs	r0, #2
   1266a:	4c11      	ldr	r4, [pc, #68]	; (126b0 <socket+0x210>)
   1266c:	47a0      	blx	r4
			}
		}
	}
	return sock;
   1266e:	231f      	movs	r3, #31
   12670:	18fb      	adds	r3, r7, r3
   12672:	781b      	ldrb	r3, [r3, #0]
   12674:	b25b      	sxtb	r3, r3
}
   12676:	0018      	movs	r0, r3
   12678:	46bd      	mov	sp, r7
   1267a:	b009      	add	sp, #36	; 0x24
   1267c:	bd90      	pop	{r4, r7, pc}
   1267e:	46c0      	nop			; (mov r8, r8)
   12680:	20003d31 	.word	0x20003d31
   12684:	200054e4 	.word	0x200054e4
   12688:	0001fb21 	.word	0x0001fb21
   1268c:	20005554 	.word	0x20005554
   12690:	20003d32 	.word	0x20003d32
   12694:	80000003 	.word	0x80000003
   12698:	0000db11 	.word	0x0000db11
   1269c:	20003d2e 	.word	0x20003d2e
   126a0:	00025ef8 	.word	0x00025ef8
   126a4:	0000addd 	.word	0x0000addd
   126a8:	00025f1c 	.word	0x00025f1c
   126ac:	00025f18 	.word	0x00025f18
   126b0:	0000dd71 	.word	0x0000dd71

000126b4 <connect>:

Date
		5 June 2012
*********************************************************************/
sint8 connect(SOCKET sock, struct sockaddr *pstrAddr, uint8 u8AddrLen)
{
   126b4:	b5b0      	push	{r4, r5, r7, lr}
   126b6:	b08a      	sub	sp, #40	; 0x28
   126b8:	af04      	add	r7, sp, #16
   126ba:	6039      	str	r1, [r7, #0]
   126bc:	0011      	movs	r1, r2
   126be:	1dfb      	adds	r3, r7, #7
   126c0:	1c02      	adds	r2, r0, #0
   126c2:	701a      	strb	r2, [r3, #0]
   126c4:	1dbb      	adds	r3, r7, #6
   126c6:	1c0a      	adds	r2, r1, #0
   126c8:	701a      	strb	r2, [r3, #0]
	sint8	s8Ret = SOCK_ERR_INVALID_ARG;
   126ca:	2317      	movs	r3, #23
   126cc:	18fb      	adds	r3, r7, r3
   126ce:	22fa      	movs	r2, #250	; 0xfa
   126d0:	701a      	strb	r2, [r3, #0]
	if((sock >= 0) && (pstrAddr != NULL) && (gastrSockets[sock].bIsUsed == 1) && (u8AddrLen != 0))
   126d2:	1dfb      	adds	r3, r7, #7
   126d4:	781b      	ldrb	r3, [r3, #0]
   126d6:	2b7f      	cmp	r3, #127	; 0x7f
   126d8:	d867      	bhi.n	127aa <connect+0xf6>
   126da:	683b      	ldr	r3, [r7, #0]
   126dc:	2b00      	cmp	r3, #0
   126de:	d064      	beq.n	127aa <connect+0xf6>
   126e0:	1dfb      	adds	r3, r7, #7
   126e2:	781b      	ldrb	r3, [r3, #0]
   126e4:	b25b      	sxtb	r3, r3
   126e6:	4a35      	ldr	r2, [pc, #212]	; (127bc <connect+0x108>)
   126e8:	011b      	lsls	r3, r3, #4
   126ea:	18d3      	adds	r3, r2, r3
   126ec:	330a      	adds	r3, #10
   126ee:	781b      	ldrb	r3, [r3, #0]
   126f0:	b2db      	uxtb	r3, r3
   126f2:	2b01      	cmp	r3, #1
   126f4:	d159      	bne.n	127aa <connect+0xf6>
   126f6:	1dbb      	adds	r3, r7, #6
   126f8:	781b      	ldrb	r3, [r3, #0]
   126fa:	2b00      	cmp	r3, #0
   126fc:	d055      	beq.n	127aa <connect+0xf6>
	{
		tstrConnectCmd	strConnect;
		uint8			u8Cmd = SOCKET_CMD_CONNECT;
   126fe:	2316      	movs	r3, #22
   12700:	18fb      	adds	r3, r7, r3
   12702:	2244      	movs	r2, #68	; 0x44
   12704:	701a      	strb	r2, [r3, #0]
		if((gastrSockets[sock].u8SSLFlags) & SSL_FLAGS_ACTIVE)
   12706:	1dfb      	adds	r3, r7, #7
   12708:	781b      	ldrb	r3, [r3, #0]
   1270a:	b25b      	sxtb	r3, r3
   1270c:	4a2b      	ldr	r2, [pc, #172]	; (127bc <connect+0x108>)
   1270e:	011b      	lsls	r3, r3, #4
   12710:	18d3      	adds	r3, r2, r3
   12712:	330b      	adds	r3, #11
   12714:	781b      	ldrb	r3, [r3, #0]
   12716:	b2db      	uxtb	r3, r3
   12718:	001a      	movs	r2, r3
   1271a:	2301      	movs	r3, #1
   1271c:	4013      	ands	r3, r2
   1271e:	d00f      	beq.n	12740 <connect+0x8c>
		{
			u8Cmd = SOCKET_CMD_SSL_CONNECT;
   12720:	2316      	movs	r3, #22
   12722:	18fb      	adds	r3, r7, r3
   12724:	224b      	movs	r2, #75	; 0x4b
   12726:	701a      	strb	r2, [r3, #0]
			strConnect.u8SslFlags = gastrSockets[sock].u8SSLFlags;
   12728:	1dfb      	adds	r3, r7, #7
   1272a:	781b      	ldrb	r3, [r3, #0]
   1272c:	b25b      	sxtb	r3, r3
   1272e:	4a23      	ldr	r2, [pc, #140]	; (127bc <connect+0x108>)
   12730:	011b      	lsls	r3, r3, #4
   12732:	18d3      	adds	r3, r2, r3
   12734:	330b      	adds	r3, #11
   12736:	781b      	ldrb	r3, [r3, #0]
   12738:	b2da      	uxtb	r2, r3
   1273a:	2308      	movs	r3, #8
   1273c:	18fb      	adds	r3, r7, r3
   1273e:	725a      	strb	r2, [r3, #9]
		}
		strConnect.sock = sock;
   12740:	2308      	movs	r3, #8
   12742:	18fb      	adds	r3, r7, r3
   12744:	1dfa      	adds	r2, r7, #7
   12746:	7812      	ldrb	r2, [r2, #0]
   12748:	721a      	strb	r2, [r3, #8]
		m2m_memcpy((uint8 *)&strConnect.strAddr, (uint8 *)pstrAddr, sizeof(tstrSockAddr));
   1274a:	6839      	ldr	r1, [r7, #0]
   1274c:	2308      	movs	r3, #8
   1274e:	18fb      	adds	r3, r7, r3
   12750:	2208      	movs	r2, #8
   12752:	0018      	movs	r0, r3
   12754:	4b1a      	ldr	r3, [pc, #104]	; (127c0 <connect+0x10c>)
   12756:	4798      	blx	r3

		strConnect.u16SessionID		= gastrSockets[sock].u16SessionID;
   12758:	1dfb      	adds	r3, r7, #7
   1275a:	781b      	ldrb	r3, [r3, #0]
   1275c:	b25b      	sxtb	r3, r3
   1275e:	4a17      	ldr	r2, [pc, #92]	; (127bc <connect+0x108>)
   12760:	011b      	lsls	r3, r3, #4
   12762:	18d3      	adds	r3, r2, r3
   12764:	3306      	adds	r3, #6
   12766:	881b      	ldrh	r3, [r3, #0]
   12768:	b29a      	uxth	r2, r3
   1276a:	2308      	movs	r3, #8
   1276c:	18fb      	adds	r3, r7, r3
   1276e:	815a      	strh	r2, [r3, #10]
		s8Ret = SOCKET_REQUEST(u8Cmd, (uint8*)&strConnect,sizeof(tstrConnectCmd), NULL, 0, 0);
   12770:	2317      	movs	r3, #23
   12772:	18fc      	adds	r4, r7, r3
   12774:	2308      	movs	r3, #8
   12776:	18fa      	adds	r2, r7, r3
   12778:	2316      	movs	r3, #22
   1277a:	18fb      	adds	r3, r7, r3
   1277c:	7819      	ldrb	r1, [r3, #0]
   1277e:	2300      	movs	r3, #0
   12780:	9302      	str	r3, [sp, #8]
   12782:	2300      	movs	r3, #0
   12784:	9301      	str	r3, [sp, #4]
   12786:	2300      	movs	r3, #0
   12788:	9300      	str	r3, [sp, #0]
   1278a:	230c      	movs	r3, #12
   1278c:	2002      	movs	r0, #2
   1278e:	4d0d      	ldr	r5, [pc, #52]	; (127c4 <connect+0x110>)
   12790:	47a8      	blx	r5
   12792:	0003      	movs	r3, r0
   12794:	7023      	strb	r3, [r4, #0]
		if(s8Ret != SOCK_ERR_NO_ERROR)
   12796:	2317      	movs	r3, #23
   12798:	18fb      	adds	r3, r7, r3
   1279a:	781b      	ldrb	r3, [r3, #0]
   1279c:	b25b      	sxtb	r3, r3
   1279e:	2b00      	cmp	r3, #0
   127a0:	d003      	beq.n	127aa <connect+0xf6>
		{
			s8Ret = SOCK_ERR_INVALID;
   127a2:	2317      	movs	r3, #23
   127a4:	18fb      	adds	r3, r7, r3
   127a6:	22f7      	movs	r2, #247	; 0xf7
   127a8:	701a      	strb	r2, [r3, #0]
		}
	}
	return s8Ret;
   127aa:	2317      	movs	r3, #23
   127ac:	18fb      	adds	r3, r7, r3
   127ae:	781b      	ldrb	r3, [r3, #0]
   127b0:	b25b      	sxtb	r3, r3
}
   127b2:	0018      	movs	r0, r3
   127b4:	46bd      	mov	sp, r7
   127b6:	b006      	add	sp, #24
   127b8:	bdb0      	pop	{r4, r5, r7, pc}
   127ba:	46c0      	nop			; (mov r8, r8)
   127bc:	200054e4 	.word	0x200054e4
   127c0:	0000dad5 	.word	0x0000dad5
   127c4:	0000dd71 	.word	0x0000dd71

000127c8 <send>:

Date
		5 June 2012
*********************************************************************/
sint16 send(SOCKET sock, void *pvSendBuffer, uint16 u16SendLength, uint16 flags)
{
   127c8:	b590      	push	{r4, r7, lr}
   127ca:	b08f      	sub	sp, #60	; 0x3c
   127cc:	af04      	add	r7, sp, #16
   127ce:	0004      	movs	r4, r0
   127d0:	60b9      	str	r1, [r7, #8]
   127d2:	0010      	movs	r0, r2
   127d4:	0019      	movs	r1, r3
   127d6:	230f      	movs	r3, #15
   127d8:	18fb      	adds	r3, r7, r3
   127da:	1c22      	adds	r2, r4, #0
   127dc:	701a      	strb	r2, [r3, #0]
   127de:	230c      	movs	r3, #12
   127e0:	18fb      	adds	r3, r7, r3
   127e2:	1c02      	adds	r2, r0, #0
   127e4:	801a      	strh	r2, [r3, #0]
   127e6:	1dbb      	adds	r3, r7, #6
   127e8:	1c0a      	adds	r2, r1, #0
   127ea:	801a      	strh	r2, [r3, #0]
	sint16	s16Ret = SOCK_ERR_INVALID_ARG;
   127ec:	2326      	movs	r3, #38	; 0x26
   127ee:	18fb      	adds	r3, r7, r3
   127f0:	2206      	movs	r2, #6
   127f2:	4252      	negs	r2, r2
   127f4:	801a      	strh	r2, [r3, #0]
	
	if((sock >= 0) && (pvSendBuffer != NULL) && (u16SendLength <= SOCKET_BUFFER_MAX_LENGTH) && (gastrSockets[sock].bIsUsed == 1))
   127f6:	230f      	movs	r3, #15
   127f8:	18fb      	adds	r3, r7, r3
   127fa:	781b      	ldrb	r3, [r3, #0]
   127fc:	2b7f      	cmp	r3, #127	; 0x7f
   127fe:	d900      	bls.n	12802 <send+0x3a>
   12800:	e087      	b.n	12912 <send+0x14a>
   12802:	68bb      	ldr	r3, [r7, #8]
   12804:	2b00      	cmp	r3, #0
   12806:	d100      	bne.n	1280a <send+0x42>
   12808:	e083      	b.n	12912 <send+0x14a>
   1280a:	230c      	movs	r3, #12
   1280c:	18fb      	adds	r3, r7, r3
   1280e:	881a      	ldrh	r2, [r3, #0]
   12810:	23af      	movs	r3, #175	; 0xaf
   12812:	00db      	lsls	r3, r3, #3
   12814:	429a      	cmp	r2, r3
   12816:	d900      	bls.n	1281a <send+0x52>
   12818:	e07b      	b.n	12912 <send+0x14a>
   1281a:	230f      	movs	r3, #15
   1281c:	18fb      	adds	r3, r7, r3
   1281e:	781b      	ldrb	r3, [r3, #0]
   12820:	b25b      	sxtb	r3, r3
   12822:	4a40      	ldr	r2, [pc, #256]	; (12924 <send+0x15c>)
   12824:	011b      	lsls	r3, r3, #4
   12826:	18d3      	adds	r3, r2, r3
   12828:	330a      	adds	r3, #10
   1282a:	781b      	ldrb	r3, [r3, #0]
   1282c:	b2db      	uxtb	r3, r3
   1282e:	2b01      	cmp	r3, #1
   12830:	d16f      	bne.n	12912 <send+0x14a>
	{
		uint16			u16DataOffset;
		tstrSendCmd		strSend;
		uint8			u8Cmd;

		u8Cmd			= SOCKET_CMD_SEND;
   12832:	2323      	movs	r3, #35	; 0x23
   12834:	18fb      	adds	r3, r7, r3
   12836:	2245      	movs	r2, #69	; 0x45
   12838:	701a      	strb	r2, [r3, #0]
		u16DataOffset	= TCP_TX_PACKET_OFFSET;
   1283a:	2324      	movs	r3, #36	; 0x24
   1283c:	18fb      	adds	r3, r7, r3
   1283e:	2250      	movs	r2, #80	; 0x50
   12840:	801a      	strh	r2, [r3, #0]

		strSend.sock			= sock;
   12842:	2310      	movs	r3, #16
   12844:	18fb      	adds	r3, r7, r3
   12846:	220f      	movs	r2, #15
   12848:	18ba      	adds	r2, r7, r2
   1284a:	7812      	ldrb	r2, [r2, #0]
   1284c:	701a      	strb	r2, [r3, #0]
		strSend.u16DataSize		= NM_BSP_B_L_16(u16SendLength);
   1284e:	2310      	movs	r3, #16
   12850:	18fb      	adds	r3, r7, r3
   12852:	220c      	movs	r2, #12
   12854:	18ba      	adds	r2, r7, r2
   12856:	8812      	ldrh	r2, [r2, #0]
   12858:	805a      	strh	r2, [r3, #2]
		strSend.u16SessionID	= gastrSockets[sock].u16SessionID;
   1285a:	230f      	movs	r3, #15
   1285c:	18fb      	adds	r3, r7, r3
   1285e:	781b      	ldrb	r3, [r3, #0]
   12860:	b25b      	sxtb	r3, r3
   12862:	4a30      	ldr	r2, [pc, #192]	; (12924 <send+0x15c>)
   12864:	011b      	lsls	r3, r3, #4
   12866:	18d3      	adds	r3, r2, r3
   12868:	3306      	adds	r3, #6
   1286a:	881b      	ldrh	r3, [r3, #0]
   1286c:	b29a      	uxth	r2, r3
   1286e:	2310      	movs	r3, #16
   12870:	18fb      	adds	r3, r7, r3
   12872:	819a      	strh	r2, [r3, #12]

		if(sock >= TCP_SOCK_MAX)
   12874:	230f      	movs	r3, #15
   12876:	18fb      	adds	r3, r7, r3
   12878:	781b      	ldrb	r3, [r3, #0]
   1287a:	b25b      	sxtb	r3, r3
   1287c:	2b06      	cmp	r3, #6
   1287e:	dd03      	ble.n	12888 <send+0xc0>
		{
			u16DataOffset = UDP_TX_PACKET_OFFSET;
   12880:	2324      	movs	r3, #36	; 0x24
   12882:	18fb      	adds	r3, r7, r3
   12884:	2244      	movs	r2, #68	; 0x44
   12886:	801a      	strh	r2, [r3, #0]
		}
		if(gastrSockets[sock].u8SSLFlags & SSL_FLAGS_ACTIVE)
   12888:	230f      	movs	r3, #15
   1288a:	18fb      	adds	r3, r7, r3
   1288c:	781b      	ldrb	r3, [r3, #0]
   1288e:	b25b      	sxtb	r3, r3
   12890:	4a24      	ldr	r2, [pc, #144]	; (12924 <send+0x15c>)
   12892:	011b      	lsls	r3, r3, #4
   12894:	18d3      	adds	r3, r2, r3
   12896:	330b      	adds	r3, #11
   12898:	781b      	ldrb	r3, [r3, #0]
   1289a:	b2db      	uxtb	r3, r3
   1289c:	001a      	movs	r2, r3
   1289e:	2301      	movs	r3, #1
   128a0:	4013      	ands	r3, r2
   128a2:	d00f      	beq.n	128c4 <send+0xfc>
		{
			u8Cmd			= SOCKET_CMD_SSL_SEND;
   128a4:	2323      	movs	r3, #35	; 0x23
   128a6:	18fb      	adds	r3, r7, r3
   128a8:	224c      	movs	r2, #76	; 0x4c
   128aa:	701a      	strb	r2, [r3, #0]
			u16DataOffset	= gastrSockets[sock].u16DataOffset;
   128ac:	230f      	movs	r3, #15
   128ae:	18fb      	adds	r3, r7, r3
   128b0:	2200      	movs	r2, #0
   128b2:	569a      	ldrsb	r2, [r3, r2]
   128b4:	2324      	movs	r3, #36	; 0x24
   128b6:	18fb      	adds	r3, r7, r3
   128b8:	491a      	ldr	r1, [pc, #104]	; (12924 <send+0x15c>)
   128ba:	0112      	lsls	r2, r2, #4
   128bc:	188a      	adds	r2, r1, r2
   128be:	3208      	adds	r2, #8
   128c0:	8812      	ldrh	r2, [r2, #0]
   128c2:	801a      	strh	r2, [r3, #0]
		}

		s16Ret =  SOCKET_REQUEST(u8Cmd|M2M_REQ_DATA_PKT, (uint8*)&strSend, sizeof(tstrSendCmd), pvSendBuffer, u16SendLength, u16DataOffset);
   128c4:	2323      	movs	r3, #35	; 0x23
   128c6:	18fb      	adds	r3, r7, r3
   128c8:	781b      	ldrb	r3, [r3, #0]
   128ca:	2280      	movs	r2, #128	; 0x80
   128cc:	4252      	negs	r2, r2
   128ce:	4313      	orrs	r3, r2
   128d0:	b2d9      	uxtb	r1, r3
   128d2:	2310      	movs	r3, #16
   128d4:	18fa      	adds	r2, r7, r3
   128d6:	2324      	movs	r3, #36	; 0x24
   128d8:	18fb      	adds	r3, r7, r3
   128da:	881b      	ldrh	r3, [r3, #0]
   128dc:	9302      	str	r3, [sp, #8]
   128de:	230c      	movs	r3, #12
   128e0:	18fb      	adds	r3, r7, r3
   128e2:	881b      	ldrh	r3, [r3, #0]
   128e4:	9301      	str	r3, [sp, #4]
   128e6:	68bb      	ldr	r3, [r7, #8]
   128e8:	9300      	str	r3, [sp, #0]
   128ea:	2310      	movs	r3, #16
   128ec:	2002      	movs	r0, #2
   128ee:	4c0e      	ldr	r4, [pc, #56]	; (12928 <send+0x160>)
   128f0:	47a0      	blx	r4
   128f2:	0003      	movs	r3, r0
   128f4:	001a      	movs	r2, r3
   128f6:	2326      	movs	r3, #38	; 0x26
   128f8:	18fb      	adds	r3, r7, r3
   128fa:	801a      	strh	r2, [r3, #0]
		if(s16Ret != SOCK_ERR_NO_ERROR)
   128fc:	2326      	movs	r3, #38	; 0x26
   128fe:	18fb      	adds	r3, r7, r3
   12900:	2200      	movs	r2, #0
   12902:	5e9b      	ldrsh	r3, [r3, r2]
   12904:	2b00      	cmp	r3, #0
   12906:	d004      	beq.n	12912 <send+0x14a>
		{
			s16Ret = SOCK_ERR_BUFFER_FULL;
   12908:	2326      	movs	r3, #38	; 0x26
   1290a:	18fb      	adds	r3, r7, r3
   1290c:	220e      	movs	r2, #14
   1290e:	4252      	negs	r2, r2
   12910:	801a      	strh	r2, [r3, #0]
		}
	}
	return s16Ret;
   12912:	2326      	movs	r3, #38	; 0x26
   12914:	18fb      	adds	r3, r7, r3
   12916:	2200      	movs	r2, #0
   12918:	5e9b      	ldrsh	r3, [r3, r2]
}
   1291a:	0018      	movs	r0, r3
   1291c:	46bd      	mov	sp, r7
   1291e:	b00b      	add	sp, #44	; 0x2c
   12920:	bd90      	pop	{r4, r7, pc}
   12922:	46c0      	nop			; (mov r8, r8)
   12924:	200054e4 	.word	0x200054e4
   12928:	0000dd71 	.word	0x0000dd71

0001292c <recv>:

Date
		5 June 2012
*********************************************************************/
sint16 recv(SOCKET sock, void *pvRecvBuf, uint16 u16BufLen, uint32 u32Timeoutmsec)
{
   1292c:	b590      	push	{r4, r7, lr}
   1292e:	b08d      	sub	sp, #52	; 0x34
   12930:	af04      	add	r7, sp, #16
   12932:	60b9      	str	r1, [r7, #8]
   12934:	0011      	movs	r1, r2
   12936:	607b      	str	r3, [r7, #4]
   12938:	230f      	movs	r3, #15
   1293a:	18fb      	adds	r3, r7, r3
   1293c:	1c02      	adds	r2, r0, #0
   1293e:	701a      	strb	r2, [r3, #0]
   12940:	230c      	movs	r3, #12
   12942:	18fb      	adds	r3, r7, r3
   12944:	1c0a      	adds	r2, r1, #0
   12946:	801a      	strh	r2, [r3, #0]
	sint16	s16Ret = SOCK_ERR_INVALID_ARG;
   12948:	231e      	movs	r3, #30
   1294a:	18fb      	adds	r3, r7, r3
   1294c:	2206      	movs	r2, #6
   1294e:	4252      	negs	r2, r2
   12950:	801a      	strh	r2, [r3, #0]
	
	if((sock >= 0) && (pvRecvBuf != NULL) && (u16BufLen != 0) && (gastrSockets[sock].bIsUsed == 1))
   12952:	230f      	movs	r3, #15
   12954:	18fb      	adds	r3, r7, r3
   12956:	781b      	ldrb	r3, [r3, #0]
   12958:	2b7f      	cmp	r3, #127	; 0x7f
   1295a:	d900      	bls.n	1295e <recv+0x32>
   1295c:	e099      	b.n	12a92 <recv+0x166>
   1295e:	68bb      	ldr	r3, [r7, #8]
   12960:	2b00      	cmp	r3, #0
   12962:	d100      	bne.n	12966 <recv+0x3a>
   12964:	e095      	b.n	12a92 <recv+0x166>
   12966:	230c      	movs	r3, #12
   12968:	18fb      	adds	r3, r7, r3
   1296a:	881b      	ldrh	r3, [r3, #0]
   1296c:	2b00      	cmp	r3, #0
   1296e:	d100      	bne.n	12972 <recv+0x46>
   12970:	e08f      	b.n	12a92 <recv+0x166>
   12972:	230f      	movs	r3, #15
   12974:	18fb      	adds	r3, r7, r3
   12976:	781b      	ldrb	r3, [r3, #0]
   12978:	b25b      	sxtb	r3, r3
   1297a:	4a4a      	ldr	r2, [pc, #296]	; (12aa4 <recv+0x178>)
   1297c:	011b      	lsls	r3, r3, #4
   1297e:	18d3      	adds	r3, r2, r3
   12980:	330a      	adds	r3, #10
   12982:	781b      	ldrb	r3, [r3, #0]
   12984:	b2db      	uxtb	r3, r3
   12986:	2b01      	cmp	r3, #1
   12988:	d000      	beq.n	1298c <recv+0x60>
   1298a:	e082      	b.n	12a92 <recv+0x166>
	{
		s16Ret = SOCK_ERR_NO_ERROR;
   1298c:	231e      	movs	r3, #30
   1298e:	18fb      	adds	r3, r7, r3
   12990:	2200      	movs	r2, #0
   12992:	801a      	strh	r2, [r3, #0]
		gastrSockets[sock].pu8UserBuffer 		= (uint8*)pvRecvBuf;
   12994:	230f      	movs	r3, #15
   12996:	18fb      	adds	r3, r7, r3
   12998:	2200      	movs	r2, #0
   1299a:	569a      	ldrsb	r2, [r3, r2]
   1299c:	4b41      	ldr	r3, [pc, #260]	; (12aa4 <recv+0x178>)
   1299e:	0112      	lsls	r2, r2, #4
   129a0:	68b9      	ldr	r1, [r7, #8]
   129a2:	50d1      	str	r1, [r2, r3]
		gastrSockets[sock].u16UserBufferSize 	= u16BufLen;
   129a4:	230f      	movs	r3, #15
   129a6:	18fb      	adds	r3, r7, r3
   129a8:	781b      	ldrb	r3, [r3, #0]
   129aa:	b25b      	sxtb	r3, r3
   129ac:	4a3d      	ldr	r2, [pc, #244]	; (12aa4 <recv+0x178>)
   129ae:	011b      	lsls	r3, r3, #4
   129b0:	18d3      	adds	r3, r2, r3
   129b2:	3304      	adds	r3, #4
   129b4:	220c      	movs	r2, #12
   129b6:	18ba      	adds	r2, r7, r2
   129b8:	8812      	ldrh	r2, [r2, #0]
   129ba:	801a      	strh	r2, [r3, #0]

		if(!gastrSockets[sock].bIsRecvPending)
   129bc:	230f      	movs	r3, #15
   129be:	18fb      	adds	r3, r7, r3
   129c0:	781b      	ldrb	r3, [r3, #0]
   129c2:	b25b      	sxtb	r3, r3
   129c4:	4a37      	ldr	r2, [pc, #220]	; (12aa4 <recv+0x178>)
   129c6:	011b      	lsls	r3, r3, #4
   129c8:	18d3      	adds	r3, r2, r3
   129ca:	330c      	adds	r3, #12
   129cc:	781b      	ldrb	r3, [r3, #0]
   129ce:	b2db      	uxtb	r3, r3
   129d0:	2b00      	cmp	r3, #0
   129d2:	d15e      	bne.n	12a92 <recv+0x166>
		{
			tstrRecvCmd	strRecv;
			uint8		u8Cmd = SOCKET_CMD_RECV;
   129d4:	231d      	movs	r3, #29
   129d6:	18fb      	adds	r3, r7, r3
   129d8:	2246      	movs	r2, #70	; 0x46
   129da:	701a      	strb	r2, [r3, #0]

			gastrSockets[sock].bIsRecvPending = 1;
   129dc:	230f      	movs	r3, #15
   129de:	18fb      	adds	r3, r7, r3
   129e0:	781b      	ldrb	r3, [r3, #0]
   129e2:	b25b      	sxtb	r3, r3
   129e4:	4a2f      	ldr	r2, [pc, #188]	; (12aa4 <recv+0x178>)
   129e6:	011b      	lsls	r3, r3, #4
   129e8:	18d3      	adds	r3, r2, r3
   129ea:	330c      	adds	r3, #12
   129ec:	2201      	movs	r2, #1
   129ee:	701a      	strb	r2, [r3, #0]
			if(gastrSockets[sock].u8SSLFlags & SSL_FLAGS_ACTIVE)
   129f0:	230f      	movs	r3, #15
   129f2:	18fb      	adds	r3, r7, r3
   129f4:	781b      	ldrb	r3, [r3, #0]
   129f6:	b25b      	sxtb	r3, r3
   129f8:	4a2a      	ldr	r2, [pc, #168]	; (12aa4 <recv+0x178>)
   129fa:	011b      	lsls	r3, r3, #4
   129fc:	18d3      	adds	r3, r2, r3
   129fe:	330b      	adds	r3, #11
   12a00:	781b      	ldrb	r3, [r3, #0]
   12a02:	b2db      	uxtb	r3, r3
   12a04:	001a      	movs	r2, r3
   12a06:	2301      	movs	r3, #1
   12a08:	4013      	ands	r3, r2
   12a0a:	d003      	beq.n	12a14 <recv+0xe8>
			{
				u8Cmd = SOCKET_CMD_SSL_RECV;
   12a0c:	231d      	movs	r3, #29
   12a0e:	18fb      	adds	r3, r7, r3
   12a10:	224d      	movs	r2, #77	; 0x4d
   12a12:	701a      	strb	r2, [r3, #0]
			}

			/* Check the timeout value. */
			if(u32Timeoutmsec == 0)
   12a14:	687b      	ldr	r3, [r7, #4]
   12a16:	2b00      	cmp	r3, #0
   12a18:	d105      	bne.n	12a26 <recv+0xfa>
				strRecv.u32Timeoutmsec = 0xFFFFFFFF;
   12a1a:	2314      	movs	r3, #20
   12a1c:	18fb      	adds	r3, r7, r3
   12a1e:	2201      	movs	r2, #1
   12a20:	4252      	negs	r2, r2
   12a22:	601a      	str	r2, [r3, #0]
   12a24:	e003      	b.n	12a2e <recv+0x102>
			else
				strRecv.u32Timeoutmsec = NM_BSP_B_L_32(u32Timeoutmsec);
   12a26:	2314      	movs	r3, #20
   12a28:	18fb      	adds	r3, r7, r3
   12a2a:	687a      	ldr	r2, [r7, #4]
   12a2c:	601a      	str	r2, [r3, #0]
			strRecv.sock = sock;
   12a2e:	2314      	movs	r3, #20
   12a30:	18fb      	adds	r3, r7, r3
   12a32:	220f      	movs	r2, #15
   12a34:	18ba      	adds	r2, r7, r2
   12a36:	7812      	ldrb	r2, [r2, #0]
   12a38:	711a      	strb	r2, [r3, #4]
			strRecv.u16SessionID		= gastrSockets[sock].u16SessionID;
   12a3a:	230f      	movs	r3, #15
   12a3c:	18fb      	adds	r3, r7, r3
   12a3e:	781b      	ldrb	r3, [r3, #0]
   12a40:	b25b      	sxtb	r3, r3
   12a42:	4a18      	ldr	r2, [pc, #96]	; (12aa4 <recv+0x178>)
   12a44:	011b      	lsls	r3, r3, #4
   12a46:	18d3      	adds	r3, r2, r3
   12a48:	3306      	adds	r3, #6
   12a4a:	881b      	ldrh	r3, [r3, #0]
   12a4c:	b29a      	uxth	r2, r3
   12a4e:	2314      	movs	r3, #20
   12a50:	18fb      	adds	r3, r7, r3
   12a52:	80da      	strh	r2, [r3, #6]
		
			s16Ret = SOCKET_REQUEST(u8Cmd, (uint8*)&strRecv, sizeof(tstrRecvCmd), NULL , 0, 0);
   12a54:	2314      	movs	r3, #20
   12a56:	18fa      	adds	r2, r7, r3
   12a58:	231d      	movs	r3, #29
   12a5a:	18fb      	adds	r3, r7, r3
   12a5c:	7819      	ldrb	r1, [r3, #0]
   12a5e:	2300      	movs	r3, #0
   12a60:	9302      	str	r3, [sp, #8]
   12a62:	2300      	movs	r3, #0
   12a64:	9301      	str	r3, [sp, #4]
   12a66:	2300      	movs	r3, #0
   12a68:	9300      	str	r3, [sp, #0]
   12a6a:	2308      	movs	r3, #8
   12a6c:	2002      	movs	r0, #2
   12a6e:	4c0e      	ldr	r4, [pc, #56]	; (12aa8 <recv+0x17c>)
   12a70:	47a0      	blx	r4
   12a72:	0003      	movs	r3, r0
   12a74:	001a      	movs	r2, r3
   12a76:	231e      	movs	r3, #30
   12a78:	18fb      	adds	r3, r7, r3
   12a7a:	801a      	strh	r2, [r3, #0]
			if(s16Ret != SOCK_ERR_NO_ERROR)
   12a7c:	231e      	movs	r3, #30
   12a7e:	18fb      	adds	r3, r7, r3
   12a80:	2200      	movs	r2, #0
   12a82:	5e9b      	ldrsh	r3, [r3, r2]
   12a84:	2b00      	cmp	r3, #0
   12a86:	d004      	beq.n	12a92 <recv+0x166>
			{
				s16Ret = SOCK_ERR_BUFFER_FULL;
   12a88:	231e      	movs	r3, #30
   12a8a:	18fb      	adds	r3, r7, r3
   12a8c:	220e      	movs	r2, #14
   12a8e:	4252      	negs	r2, r2
   12a90:	801a      	strh	r2, [r3, #0]
			}
		}
	}
	return s16Ret;
   12a92:	231e      	movs	r3, #30
   12a94:	18fb      	adds	r3, r7, r3
   12a96:	2200      	movs	r2, #0
   12a98:	5e9b      	ldrsh	r3, [r3, r2]
}
   12a9a:	0018      	movs	r0, r3
   12a9c:	46bd      	mov	sp, r7
   12a9e:	b009      	add	sp, #36	; 0x24
   12aa0:	bd90      	pop	{r4, r7, pc}
   12aa2:	46c0      	nop			; (mov r8, r8)
   12aa4:	200054e4 	.word	0x200054e4
   12aa8:	0000dd71 	.word	0x0000dd71

00012aac <close>:

Date
		4 June 2012
*********************************************************************/
sint8 close(SOCKET sock)
{
   12aac:	b5b0      	push	{r4, r5, r7, lr}
   12aae:	b088      	sub	sp, #32
   12ab0:	af04      	add	r7, sp, #16
   12ab2:	0002      	movs	r2, r0
   12ab4:	1dfb      	adds	r3, r7, #7
   12ab6:	701a      	strb	r2, [r3, #0]
	sint8	s8Ret = SOCK_ERR_INVALID_ARG;
   12ab8:	230f      	movs	r3, #15
   12aba:	18fb      	adds	r3, r7, r3
   12abc:	22fa      	movs	r2, #250	; 0xfa
   12abe:	701a      	strb	r2, [r3, #0]
    M2M_INFO("Sock to delete <%d>\n", sock);
   12ac0:	4b43      	ldr	r3, [pc, #268]	; (12bd0 <close+0x124>)
   12ac2:	0018      	movs	r0, r3
   12ac4:	4b43      	ldr	r3, [pc, #268]	; (12bd4 <close+0x128>)
   12ac6:	4798      	blx	r3
   12ac8:	1dfb      	adds	r3, r7, #7
   12aca:	2200      	movs	r2, #0
   12acc:	569a      	ldrsb	r2, [r3, r2]
   12ace:	4b42      	ldr	r3, [pc, #264]	; (12bd8 <close+0x12c>)
   12ad0:	0011      	movs	r1, r2
   12ad2:	0018      	movs	r0, r3
   12ad4:	4b3f      	ldr	r3, [pc, #252]	; (12bd4 <close+0x128>)
   12ad6:	4798      	blx	r3
   12ad8:	4b40      	ldr	r3, [pc, #256]	; (12bdc <close+0x130>)
   12ada:	0018      	movs	r0, r3
   12adc:	4b3d      	ldr	r3, [pc, #244]	; (12bd4 <close+0x128>)
   12ade:	4798      	blx	r3
	if(sock >= 0 && (gastrSockets[sock].bIsUsed == 1))
   12ae0:	1dfb      	adds	r3, r7, #7
   12ae2:	781b      	ldrb	r3, [r3, #0]
   12ae4:	2b7f      	cmp	r3, #127	; 0x7f
   12ae6:	d86a      	bhi.n	12bbe <close+0x112>
   12ae8:	1dfb      	adds	r3, r7, #7
   12aea:	781b      	ldrb	r3, [r3, #0]
   12aec:	b25b      	sxtb	r3, r3
   12aee:	4a3c      	ldr	r2, [pc, #240]	; (12be0 <close+0x134>)
   12af0:	011b      	lsls	r3, r3, #4
   12af2:	18d3      	adds	r3, r2, r3
   12af4:	330a      	adds	r3, #10
   12af6:	781b      	ldrb	r3, [r3, #0]
   12af8:	b2db      	uxtb	r3, r3
   12afa:	2b01      	cmp	r3, #1
   12afc:	d15f      	bne.n	12bbe <close+0x112>
	{
		uint8	u8Cmd = SOCKET_CMD_CLOSE;
   12afe:	230e      	movs	r3, #14
   12b00:	18fb      	adds	r3, r7, r3
   12b02:	2249      	movs	r2, #73	; 0x49
   12b04:	701a      	strb	r2, [r3, #0]
		tstrCloseCmd strclose;
		strclose.sock = sock; 
   12b06:	2308      	movs	r3, #8
   12b08:	18fb      	adds	r3, r7, r3
   12b0a:	1dfa      	adds	r2, r7, #7
   12b0c:	7812      	ldrb	r2, [r2, #0]
   12b0e:	701a      	strb	r2, [r3, #0]
		strclose.u16SessionID		= gastrSockets[sock].u16SessionID;
   12b10:	1dfb      	adds	r3, r7, #7
   12b12:	781b      	ldrb	r3, [r3, #0]
   12b14:	b25b      	sxtb	r3, r3
   12b16:	4a32      	ldr	r2, [pc, #200]	; (12be0 <close+0x134>)
   12b18:	011b      	lsls	r3, r3, #4
   12b1a:	18d3      	adds	r3, r2, r3
   12b1c:	3306      	adds	r3, #6
   12b1e:	881b      	ldrh	r3, [r3, #0]
   12b20:	b29a      	uxth	r2, r3
   12b22:	2308      	movs	r3, #8
   12b24:	18fb      	adds	r3, r7, r3
   12b26:	805a      	strh	r2, [r3, #2]
		
		gastrSockets[sock].bIsUsed = 0;
   12b28:	1dfb      	adds	r3, r7, #7
   12b2a:	781b      	ldrb	r3, [r3, #0]
   12b2c:	b25b      	sxtb	r3, r3
   12b2e:	4a2c      	ldr	r2, [pc, #176]	; (12be0 <close+0x134>)
   12b30:	011b      	lsls	r3, r3, #4
   12b32:	18d3      	adds	r3, r2, r3
   12b34:	330a      	adds	r3, #10
   12b36:	2200      	movs	r2, #0
   12b38:	701a      	strb	r2, [r3, #0]
		gastrSockets[sock].u16SessionID =0;
   12b3a:	1dfb      	adds	r3, r7, #7
   12b3c:	781b      	ldrb	r3, [r3, #0]
   12b3e:	b25b      	sxtb	r3, r3
   12b40:	4a27      	ldr	r2, [pc, #156]	; (12be0 <close+0x134>)
   12b42:	011b      	lsls	r3, r3, #4
   12b44:	18d3      	adds	r3, r2, r3
   12b46:	3306      	adds	r3, #6
   12b48:	2200      	movs	r2, #0
   12b4a:	801a      	strh	r2, [r3, #0]
		
		if(gastrSockets[sock].u8SSLFlags & SSL_FLAGS_ACTIVE)
   12b4c:	1dfb      	adds	r3, r7, #7
   12b4e:	781b      	ldrb	r3, [r3, #0]
   12b50:	b25b      	sxtb	r3, r3
   12b52:	4a23      	ldr	r2, [pc, #140]	; (12be0 <close+0x134>)
   12b54:	011b      	lsls	r3, r3, #4
   12b56:	18d3      	adds	r3, r2, r3
   12b58:	330b      	adds	r3, #11
   12b5a:	781b      	ldrb	r3, [r3, #0]
   12b5c:	b2db      	uxtb	r3, r3
   12b5e:	001a      	movs	r2, r3
   12b60:	2301      	movs	r3, #1
   12b62:	4013      	ands	r3, r2
   12b64:	d003      	beq.n	12b6e <close+0xc2>
		{
			u8Cmd = SOCKET_CMD_SSL_CLOSE;
   12b66:	230e      	movs	r3, #14
   12b68:	18fb      	adds	r3, r7, r3
   12b6a:	224e      	movs	r2, #78	; 0x4e
   12b6c:	701a      	strb	r2, [r3, #0]
		}
		s8Ret = SOCKET_REQUEST(u8Cmd, (uint8*)&strclose, sizeof(tstrCloseCmd), NULL,0, 0);
   12b6e:	230f      	movs	r3, #15
   12b70:	18fc      	adds	r4, r7, r3
   12b72:	2308      	movs	r3, #8
   12b74:	18fa      	adds	r2, r7, r3
   12b76:	230e      	movs	r3, #14
   12b78:	18fb      	adds	r3, r7, r3
   12b7a:	7819      	ldrb	r1, [r3, #0]
   12b7c:	2300      	movs	r3, #0
   12b7e:	9302      	str	r3, [sp, #8]
   12b80:	2300      	movs	r3, #0
   12b82:	9301      	str	r3, [sp, #4]
   12b84:	2300      	movs	r3, #0
   12b86:	9300      	str	r3, [sp, #0]
   12b88:	2304      	movs	r3, #4
   12b8a:	2002      	movs	r0, #2
   12b8c:	4d15      	ldr	r5, [pc, #84]	; (12be4 <close+0x138>)
   12b8e:	47a8      	blx	r5
   12b90:	0003      	movs	r3, r0
   12b92:	7023      	strb	r3, [r4, #0]
		if(s8Ret != SOCK_ERR_NO_ERROR)
   12b94:	230f      	movs	r3, #15
   12b96:	18fb      	adds	r3, r7, r3
   12b98:	781b      	ldrb	r3, [r3, #0]
   12b9a:	b25b      	sxtb	r3, r3
   12b9c:	2b00      	cmp	r3, #0
   12b9e:	d003      	beq.n	12ba8 <close+0xfc>
		{
			s8Ret = SOCK_ERR_INVALID;
   12ba0:	230f      	movs	r3, #15
   12ba2:	18fb      	adds	r3, r7, r3
   12ba4:	22f7      	movs	r2, #247	; 0xf7
   12ba6:	701a      	strb	r2, [r3, #0]
		}
		m2m_memset((uint8*)&gastrSockets[sock], 0, sizeof(tstrSocket));
   12ba8:	1dfb      	adds	r3, r7, #7
   12baa:	781b      	ldrb	r3, [r3, #0]
   12bac:	b25b      	sxtb	r3, r3
   12bae:	011a      	lsls	r2, r3, #4
   12bb0:	4b0b      	ldr	r3, [pc, #44]	; (12be0 <close+0x134>)
   12bb2:	18d3      	adds	r3, r2, r3
   12bb4:	2210      	movs	r2, #16
   12bb6:	2100      	movs	r1, #0
   12bb8:	0018      	movs	r0, r3
   12bba:	4b0b      	ldr	r3, [pc, #44]	; (12be8 <close+0x13c>)
   12bbc:	4798      	blx	r3
	}
	return s8Ret;
   12bbe:	230f      	movs	r3, #15
   12bc0:	18fb      	adds	r3, r7, r3
   12bc2:	781b      	ldrb	r3, [r3, #0]
   12bc4:	b25b      	sxtb	r3, r3
}
   12bc6:	0018      	movs	r0, r3
   12bc8:	46bd      	mov	sp, r7
   12bca:	b004      	add	sp, #16
   12bcc:	bdb0      	pop	{r4, r5, r7, pc}
   12bce:	46c0      	nop			; (mov r8, r8)
   12bd0:	00025ef8 	.word	0x00025ef8
   12bd4:	0000addd 	.word	0x0000addd
   12bd8:	00025f38 	.word	0x00025f38
   12bdc:	00025f18 	.word	0x00025f18
   12be0:	200054e4 	.word	0x200054e4
   12be4:	0000dd71 	.word	0x0000dd71
   12be8:	0000db11 	.word	0x0000db11

00012bec <nmi_inet_addr>:

Date
		4 June 2012
*********************************************************************/
uint32 nmi_inet_addr(char *pcIpAddr)
{
   12bec:	b580      	push	{r7, lr}
   12bee:	b086      	sub	sp, #24
   12bf0:	af00      	add	r7, sp, #0
   12bf2:	6078      	str	r0, [r7, #4]
	uint8	tmp;
	uint32	u32IP = 0;
   12bf4:	2300      	movs	r3, #0
   12bf6:	613b      	str	r3, [r7, #16]
	uint8	au8IP[4];
	uint8 	c;
	uint8	i, j;

	tmp = 0;
   12bf8:	2317      	movs	r3, #23
   12bfa:	18fb      	adds	r3, r7, r3
   12bfc:	2200      	movs	r2, #0
   12bfe:	701a      	strb	r2, [r3, #0]

	for(i = 0; i < 4; ++i)
   12c00:	2316      	movs	r3, #22
   12c02:	18fb      	adds	r3, r7, r3
   12c04:	2200      	movs	r2, #0
   12c06:	701a      	strb	r2, [r3, #0]
   12c08:	e060      	b.n	12ccc <nmi_inet_addr+0xe0>
	{
		j = 0;
   12c0a:	2315      	movs	r3, #21
   12c0c:	18fb      	adds	r3, r7, r3
   12c0e:	2200      	movs	r2, #0
   12c10:	701a      	strb	r2, [r3, #0]
		do
		{
			c = *pcIpAddr;
   12c12:	2314      	movs	r3, #20
   12c14:	18fb      	adds	r3, r7, r3
   12c16:	687a      	ldr	r2, [r7, #4]
   12c18:	7812      	ldrb	r2, [r2, #0]
   12c1a:	701a      	strb	r2, [r3, #0]
			++j;
   12c1c:	2315      	movs	r3, #21
   12c1e:	18fb      	adds	r3, r7, r3
   12c20:	2215      	movs	r2, #21
   12c22:	18ba      	adds	r2, r7, r2
   12c24:	7812      	ldrb	r2, [r2, #0]
   12c26:	3201      	adds	r2, #1
   12c28:	701a      	strb	r2, [r3, #0]
			if(j > 4)
   12c2a:	2315      	movs	r3, #21
   12c2c:	18fb      	adds	r3, r7, r3
   12c2e:	781b      	ldrb	r3, [r3, #0]
   12c30:	2b04      	cmp	r3, #4
   12c32:	d901      	bls.n	12c38 <nmi_inet_addr+0x4c>
			{
				return 0;
   12c34:	2300      	movs	r3, #0
   12c36:	e057      	b.n	12ce8 <nmi_inet_addr+0xfc>
			}
			if(c == '.' || c == 0)
   12c38:	2314      	movs	r3, #20
   12c3a:	18fb      	adds	r3, r7, r3
   12c3c:	781b      	ldrb	r3, [r3, #0]
   12c3e:	2b2e      	cmp	r3, #46	; 0x2e
   12c40:	d004      	beq.n	12c4c <nmi_inet_addr+0x60>
   12c42:	2314      	movs	r3, #20
   12c44:	18fb      	adds	r3, r7, r3
   12c46:	781b      	ldrb	r3, [r3, #0]
   12c48:	2b00      	cmp	r3, #0
   12c4a:	d10d      	bne.n	12c68 <nmi_inet_addr+0x7c>
			{
				au8IP[i] = tmp;
   12c4c:	2316      	movs	r3, #22
   12c4e:	18fb      	adds	r3, r7, r3
   12c50:	781b      	ldrb	r3, [r3, #0]
   12c52:	220c      	movs	r2, #12
   12c54:	18ba      	adds	r2, r7, r2
   12c56:	2117      	movs	r1, #23
   12c58:	1879      	adds	r1, r7, r1
   12c5a:	7809      	ldrb	r1, [r1, #0]
   12c5c:	54d1      	strb	r1, [r2, r3]
				tmp = 0;
   12c5e:	2317      	movs	r3, #23
   12c60:	18fb      	adds	r3, r7, r3
   12c62:	2200      	movs	r2, #0
   12c64:	701a      	strb	r2, [r3, #0]
   12c66:	e01d      	b.n	12ca4 <nmi_inet_addr+0xb8>
			}
			else if(c >= '0' && c <= '9')
   12c68:	2314      	movs	r3, #20
   12c6a:	18fb      	adds	r3, r7, r3
   12c6c:	781b      	ldrb	r3, [r3, #0]
   12c6e:	2b2f      	cmp	r3, #47	; 0x2f
   12c70:	d916      	bls.n	12ca0 <nmi_inet_addr+0xb4>
   12c72:	2314      	movs	r3, #20
   12c74:	18fb      	adds	r3, r7, r3
   12c76:	781b      	ldrb	r3, [r3, #0]
   12c78:	2b39      	cmp	r3, #57	; 0x39
   12c7a:	d811      	bhi.n	12ca0 <nmi_inet_addr+0xb4>
			{
				tmp = (tmp * 10) + (c - '0');
   12c7c:	2317      	movs	r3, #23
   12c7e:	18fb      	adds	r3, r7, r3
   12c80:	781b      	ldrb	r3, [r3, #0]
   12c82:	1c1a      	adds	r2, r3, #0
   12c84:	0092      	lsls	r2, r2, #2
   12c86:	18d3      	adds	r3, r2, r3
   12c88:	18db      	adds	r3, r3, r3
   12c8a:	b2da      	uxtb	r2, r3
   12c8c:	2314      	movs	r3, #20
   12c8e:	18fb      	adds	r3, r7, r3
   12c90:	781b      	ldrb	r3, [r3, #0]
   12c92:	18d3      	adds	r3, r2, r3
   12c94:	b2da      	uxtb	r2, r3
   12c96:	2317      	movs	r3, #23
   12c98:	18fb      	adds	r3, r7, r3
   12c9a:	3a30      	subs	r2, #48	; 0x30
   12c9c:	701a      	strb	r2, [r3, #0]
   12c9e:	e001      	b.n	12ca4 <nmi_inet_addr+0xb8>
			}
			else
			{
				return 0;
   12ca0:	2300      	movs	r3, #0
   12ca2:	e021      	b.n	12ce8 <nmi_inet_addr+0xfc>
			}
			++pcIpAddr;
   12ca4:	687b      	ldr	r3, [r7, #4]
   12ca6:	3301      	adds	r3, #1
   12ca8:	607b      	str	r3, [r7, #4]
		} while(c != '.' && c != 0);
   12caa:	2314      	movs	r3, #20
   12cac:	18fb      	adds	r3, r7, r3
   12cae:	781b      	ldrb	r3, [r3, #0]
   12cb0:	2b2e      	cmp	r3, #46	; 0x2e
   12cb2:	d004      	beq.n	12cbe <nmi_inet_addr+0xd2>
   12cb4:	2314      	movs	r3, #20
   12cb6:	18fb      	adds	r3, r7, r3
   12cb8:	781b      	ldrb	r3, [r3, #0]
   12cba:	2b00      	cmp	r3, #0
   12cbc:	d1a9      	bne.n	12c12 <nmi_inet_addr+0x26>
	for(i = 0; i < 4; ++i)
   12cbe:	2316      	movs	r3, #22
   12cc0:	18fb      	adds	r3, r7, r3
   12cc2:	2216      	movs	r2, #22
   12cc4:	18ba      	adds	r2, r7, r2
   12cc6:	7812      	ldrb	r2, [r2, #0]
   12cc8:	3201      	adds	r2, #1
   12cca:	701a      	strb	r2, [r3, #0]
   12ccc:	2316      	movs	r3, #22
   12cce:	18fb      	adds	r3, r7, r3
   12cd0:	781b      	ldrb	r3, [r3, #0]
   12cd2:	2b03      	cmp	r3, #3
   12cd4:	d999      	bls.n	12c0a <nmi_inet_addr+0x1e>
	}
	m2m_memcpy((uint8*)&u32IP, au8IP, 4);
   12cd6:	230c      	movs	r3, #12
   12cd8:	18f9      	adds	r1, r7, r3
   12cda:	2310      	movs	r3, #16
   12cdc:	18fb      	adds	r3, r7, r3
   12cde:	2204      	movs	r2, #4
   12ce0:	0018      	movs	r0, r3
   12ce2:	4b03      	ldr	r3, [pc, #12]	; (12cf0 <nmi_inet_addr+0x104>)
   12ce4:	4798      	blx	r3
	return u32IP;
   12ce6:	693b      	ldr	r3, [r7, #16]
}
   12ce8:	0018      	movs	r0, r3
   12cea:	46bd      	mov	sp, r7
   12cec:	b006      	add	sp, #24
   12cee:	bd80      	pop	{r7, pc}
   12cf0:	0000dad5 	.word	0x0000dad5

00012cf4 <gethostbyname>:

Date
		4 June 2012
*********************************************************************/
sint8 gethostbyname(uint8 * pcHostName)
{
   12cf4:	b5b0      	push	{r4, r5, r7, lr}
   12cf6:	b088      	sub	sp, #32
   12cf8:	af04      	add	r7, sp, #16
   12cfa:	6078      	str	r0, [r7, #4]
	sint8	s8Err = SOCK_ERR_INVALID_ARG;
   12cfc:	230f      	movs	r3, #15
   12cfe:	18fb      	adds	r3, r7, r3
   12d00:	22fa      	movs	r2, #250	; 0xfa
   12d02:	701a      	strb	r2, [r3, #0]
	uint8	u8HostNameSize = (uint8)m2m_strlen(pcHostName);
   12d04:	687b      	ldr	r3, [r7, #4]
   12d06:	0018      	movs	r0, r3
   12d08:	4b14      	ldr	r3, [pc, #80]	; (12d5c <gethostbyname+0x68>)
   12d0a:	4798      	blx	r3
   12d0c:	0003      	movs	r3, r0
   12d0e:	001a      	movs	r2, r3
   12d10:	230e      	movs	r3, #14
   12d12:	18fb      	adds	r3, r7, r3
   12d14:	701a      	strb	r2, [r3, #0]
	if(u8HostNameSize <= HOSTNAME_MAX_SIZE)
   12d16:	230e      	movs	r3, #14
   12d18:	18fb      	adds	r3, r7, r3
   12d1a:	781b      	ldrb	r3, [r3, #0]
   12d1c:	2b40      	cmp	r3, #64	; 0x40
   12d1e:	d815      	bhi.n	12d4c <gethostbyname+0x58>
	{
		s8Err = SOCKET_REQUEST(SOCKET_CMD_DNS_RESOLVE, (uint8*)pcHostName, u8HostNameSize + 1, NULL,0, 0);
   12d20:	230e      	movs	r3, #14
   12d22:	18fb      	adds	r3, r7, r3
   12d24:	781b      	ldrb	r3, [r3, #0]
   12d26:	b29b      	uxth	r3, r3
   12d28:	3301      	adds	r3, #1
   12d2a:	b299      	uxth	r1, r3
   12d2c:	230f      	movs	r3, #15
   12d2e:	18fc      	adds	r4, r7, r3
   12d30:	687a      	ldr	r2, [r7, #4]
   12d32:	2300      	movs	r3, #0
   12d34:	9302      	str	r3, [sp, #8]
   12d36:	2300      	movs	r3, #0
   12d38:	9301      	str	r3, [sp, #4]
   12d3a:	2300      	movs	r3, #0
   12d3c:	9300      	str	r3, [sp, #0]
   12d3e:	000b      	movs	r3, r1
   12d40:	214a      	movs	r1, #74	; 0x4a
   12d42:	2002      	movs	r0, #2
   12d44:	4d06      	ldr	r5, [pc, #24]	; (12d60 <gethostbyname+0x6c>)
   12d46:	47a8      	blx	r5
   12d48:	0003      	movs	r3, r0
   12d4a:	7023      	strb	r3, [r4, #0]
	}
	return s8Err;
   12d4c:	230f      	movs	r3, #15
   12d4e:	18fb      	adds	r3, r7, r3
   12d50:	781b      	ldrb	r3, [r3, #0]
   12d52:	b25b      	sxtb	r3, r3
}
   12d54:	0018      	movs	r0, r3
   12d56:	46bd      	mov	sp, r7
   12d58:	b004      	add	sp, #16
   12d5a:	bdb0      	pop	{r4, r5, r7, pc}
   12d5c:	0000db4f 	.word	0x0000db4f
   12d60:	0000dd71 	.word	0x0000dd71

00012d64 <spi_flash_enter_low_power_mode>:
		spi_flash_write_enable();
		spi_flash_gang_unblock();
	}
}
#endif
static void spi_flash_enter_low_power_mode(void) {
   12d64:	b580      	push	{r7, lr}
   12d66:	b082      	sub	sp, #8
   12d68:	af00      	add	r7, sp, #0
	volatile unsigned long tmp;
	unsigned char* cmd = (unsigned char*) &tmp;
   12d6a:	003b      	movs	r3, r7
   12d6c:	607b      	str	r3, [r7, #4]

	cmd[0] = 0xb9;
   12d6e:	687b      	ldr	r3, [r7, #4]
   12d70:	22b9      	movs	r2, #185	; 0xb9
   12d72:	701a      	strb	r2, [r3, #0]

	nm_write_reg(SPI_FLASH_DATA_CNT, 0);
   12d74:	4b13      	ldr	r3, [pc, #76]	; (12dc4 <spi_flash_enter_low_power_mode+0x60>)
   12d76:	2100      	movs	r1, #0
   12d78:	0018      	movs	r0, r3
   12d7a:	4b13      	ldr	r3, [pc, #76]	; (12dc8 <spi_flash_enter_low_power_mode+0x64>)
   12d7c:	4798      	blx	r3
	nm_write_reg(SPI_FLASH_BUF1, cmd[0]);
   12d7e:	687b      	ldr	r3, [r7, #4]
   12d80:	781b      	ldrb	r3, [r3, #0]
   12d82:	001a      	movs	r2, r3
   12d84:	4b11      	ldr	r3, [pc, #68]	; (12dcc <spi_flash_enter_low_power_mode+0x68>)
   12d86:	0011      	movs	r1, r2
   12d88:	0018      	movs	r0, r3
   12d8a:	4b0f      	ldr	r3, [pc, #60]	; (12dc8 <spi_flash_enter_low_power_mode+0x64>)
   12d8c:	4798      	blx	r3
	nm_write_reg(SPI_FLASH_BUF_DIR, 0x1);
   12d8e:	4b10      	ldr	r3, [pc, #64]	; (12dd0 <spi_flash_enter_low_power_mode+0x6c>)
   12d90:	2101      	movs	r1, #1
   12d92:	0018      	movs	r0, r3
   12d94:	4b0c      	ldr	r3, [pc, #48]	; (12dc8 <spi_flash_enter_low_power_mode+0x64>)
   12d96:	4798      	blx	r3
	nm_write_reg(SPI_FLASH_DMA_ADDR, 0);
   12d98:	4b0e      	ldr	r3, [pc, #56]	; (12dd4 <spi_flash_enter_low_power_mode+0x70>)
   12d9a:	2100      	movs	r1, #0
   12d9c:	0018      	movs	r0, r3
   12d9e:	4b0a      	ldr	r3, [pc, #40]	; (12dc8 <spi_flash_enter_low_power_mode+0x64>)
   12da0:	4798      	blx	r3
	nm_write_reg(SPI_FLASH_CMD_CNT, 1 | (1 << 7));
   12da2:	4b0d      	ldr	r3, [pc, #52]	; (12dd8 <spi_flash_enter_low_power_mode+0x74>)
   12da4:	2181      	movs	r1, #129	; 0x81
   12da6:	0018      	movs	r0, r3
   12da8:	4b07      	ldr	r3, [pc, #28]	; (12dc8 <spi_flash_enter_low_power_mode+0x64>)
   12daa:	4798      	blx	r3
	while(nm_read_reg(SPI_FLASH_TR_DONE) != 1);
   12dac:	46c0      	nop			; (mov r8, r8)
   12dae:	4b0b      	ldr	r3, [pc, #44]	; (12ddc <spi_flash_enter_low_power_mode+0x78>)
   12db0:	0018      	movs	r0, r3
   12db2:	4b0b      	ldr	r3, [pc, #44]	; (12de0 <spi_flash_enter_low_power_mode+0x7c>)
   12db4:	4798      	blx	r3
   12db6:	0003      	movs	r3, r0
   12db8:	2b01      	cmp	r3, #1
   12dba:	d1f8      	bne.n	12dae <spi_flash_enter_low_power_mode+0x4a>
}
   12dbc:	46c0      	nop			; (mov r8, r8)
   12dbe:	46bd      	mov	sp, r7
   12dc0:	b002      	add	sp, #8
   12dc2:	bd80      	pop	{r7, pc}
   12dc4:	00010208 	.word	0x00010208
   12dc8:	0000fbc5 	.word	0x0000fbc5
   12dcc:	0001020c 	.word	0x0001020c
   12dd0:	00010214 	.word	0x00010214
   12dd4:	0001021c 	.word	0x0001021c
   12dd8:	00010204 	.word	0x00010204
   12ddc:	00010218 	.word	0x00010218
   12de0:	0000fb81 	.word	0x0000fb81

00012de4 <spi_flash_leave_low_power_mode>:


static void spi_flash_leave_low_power_mode(void) {
   12de4:	b580      	push	{r7, lr}
   12de6:	b082      	sub	sp, #8
   12de8:	af00      	add	r7, sp, #0
	volatile unsigned long tmp;
	unsigned char* cmd = (unsigned char*) &tmp;
   12dea:	003b      	movs	r3, r7
   12dec:	607b      	str	r3, [r7, #4]

	cmd[0] = 0xab;
   12dee:	687b      	ldr	r3, [r7, #4]
   12df0:	22ab      	movs	r2, #171	; 0xab
   12df2:	701a      	strb	r2, [r3, #0]

	nm_write_reg(SPI_FLASH_DATA_CNT, 0);
   12df4:	4b13      	ldr	r3, [pc, #76]	; (12e44 <spi_flash_leave_low_power_mode+0x60>)
   12df6:	2100      	movs	r1, #0
   12df8:	0018      	movs	r0, r3
   12dfa:	4b13      	ldr	r3, [pc, #76]	; (12e48 <spi_flash_leave_low_power_mode+0x64>)
   12dfc:	4798      	blx	r3
	nm_write_reg(SPI_FLASH_BUF1, cmd[0]);
   12dfe:	687b      	ldr	r3, [r7, #4]
   12e00:	781b      	ldrb	r3, [r3, #0]
   12e02:	001a      	movs	r2, r3
   12e04:	4b11      	ldr	r3, [pc, #68]	; (12e4c <spi_flash_leave_low_power_mode+0x68>)
   12e06:	0011      	movs	r1, r2
   12e08:	0018      	movs	r0, r3
   12e0a:	4b0f      	ldr	r3, [pc, #60]	; (12e48 <spi_flash_leave_low_power_mode+0x64>)
   12e0c:	4798      	blx	r3
	nm_write_reg(SPI_FLASH_BUF_DIR, 0x1);
   12e0e:	4b10      	ldr	r3, [pc, #64]	; (12e50 <spi_flash_leave_low_power_mode+0x6c>)
   12e10:	2101      	movs	r1, #1
   12e12:	0018      	movs	r0, r3
   12e14:	4b0c      	ldr	r3, [pc, #48]	; (12e48 <spi_flash_leave_low_power_mode+0x64>)
   12e16:	4798      	blx	r3
	nm_write_reg(SPI_FLASH_DMA_ADDR, 0);
   12e18:	4b0e      	ldr	r3, [pc, #56]	; (12e54 <spi_flash_leave_low_power_mode+0x70>)
   12e1a:	2100      	movs	r1, #0
   12e1c:	0018      	movs	r0, r3
   12e1e:	4b0a      	ldr	r3, [pc, #40]	; (12e48 <spi_flash_leave_low_power_mode+0x64>)
   12e20:	4798      	blx	r3
	nm_write_reg(SPI_FLASH_CMD_CNT,  1 | (1 << 7));
   12e22:	4b0d      	ldr	r3, [pc, #52]	; (12e58 <spi_flash_leave_low_power_mode+0x74>)
   12e24:	2181      	movs	r1, #129	; 0x81
   12e26:	0018      	movs	r0, r3
   12e28:	4b07      	ldr	r3, [pc, #28]	; (12e48 <spi_flash_leave_low_power_mode+0x64>)
   12e2a:	4798      	blx	r3
	while(nm_read_reg(SPI_FLASH_TR_DONE) != 1);
   12e2c:	46c0      	nop			; (mov r8, r8)
   12e2e:	4b0b      	ldr	r3, [pc, #44]	; (12e5c <spi_flash_leave_low_power_mode+0x78>)
   12e30:	0018      	movs	r0, r3
   12e32:	4b0b      	ldr	r3, [pc, #44]	; (12e60 <spi_flash_leave_low_power_mode+0x7c>)
   12e34:	4798      	blx	r3
   12e36:	0003      	movs	r3, r0
   12e38:	2b01      	cmp	r3, #1
   12e3a:	d1f8      	bne.n	12e2e <spi_flash_leave_low_power_mode+0x4a>
}
   12e3c:	46c0      	nop			; (mov r8, r8)
   12e3e:	46bd      	mov	sp, r7
   12e40:	b002      	add	sp, #8
   12e42:	bd80      	pop	{r7, pc}
   12e44:	00010208 	.word	0x00010208
   12e48:	0000fbc5 	.word	0x0000fbc5
   12e4c:	0001020c 	.word	0x0001020c
   12e50:	00010214 	.word	0x00010214
   12e54:	0001021c 	.word	0x0001021c
   12e58:	00010204 	.word	0x00010204
   12e5c:	00010218 	.word	0x00010218
   12e60:	0000fb81 	.word	0x0000fb81

00012e64 <spi_flash_enable>:
 *	@brief	Enable spi flash operations
 *	@author	M. Abdelmawla
 *	@version	1.0
 */
sint8 spi_flash_enable(uint8 enable)
{
   12e64:	b590      	push	{r4, r7, lr}
   12e66:	b085      	sub	sp, #20
   12e68:	af00      	add	r7, sp, #0
   12e6a:	0002      	movs	r2, r0
   12e6c:	1dfb      	adds	r3, r7, #7
   12e6e:	701a      	strb	r2, [r3, #0]
	sint8 s8Ret = M2M_SUCCESS;
   12e70:	230f      	movs	r3, #15
   12e72:	18fb      	adds	r3, r7, r3
   12e74:	2200      	movs	r2, #0
   12e76:	701a      	strb	r2, [r3, #0]
	if(REV(nmi_get_chipid()) >= REV_3A0) {		
   12e78:	4b24      	ldr	r3, [pc, #144]	; (12f0c <spi_flash_enable+0xa8>)
   12e7a:	4798      	blx	r3
   12e7c:	0003      	movs	r3, r0
   12e7e:	051b      	lsls	r3, r3, #20
   12e80:	0d1b      	lsrs	r3, r3, #20
   12e82:	4a23      	ldr	r2, [pc, #140]	; (12f10 <spi_flash_enable+0xac>)
   12e84:	4293      	cmp	r3, r2
   12e86:	d938      	bls.n	12efa <spi_flash_enable+0x96>
		uint32 u32Val;
		
		/* Enable pinmux to SPI flash. */
		s8Ret = nm_read_reg_with_ret(0x1410, &u32Val);
   12e88:	230f      	movs	r3, #15
   12e8a:	18fc      	adds	r4, r7, r3
   12e8c:	2308      	movs	r3, #8
   12e8e:	18fb      	adds	r3, r7, r3
   12e90:	4a20      	ldr	r2, [pc, #128]	; (12f14 <spi_flash_enable+0xb0>)
   12e92:	0019      	movs	r1, r3
   12e94:	0010      	movs	r0, r2
   12e96:	4b20      	ldr	r3, [pc, #128]	; (12f18 <spi_flash_enable+0xb4>)
   12e98:	4798      	blx	r3
   12e9a:	0003      	movs	r3, r0
   12e9c:	7023      	strb	r3, [r4, #0]
		if(s8Ret != M2M_SUCCESS) {
   12e9e:	230f      	movs	r3, #15
   12ea0:	18fb      	adds	r3, r7, r3
   12ea2:	781b      	ldrb	r3, [r3, #0]
   12ea4:	b25b      	sxtb	r3, r3
   12ea6:	2b00      	cmp	r3, #0
   12ea8:	d126      	bne.n	12ef8 <spi_flash_enable+0x94>
			goto ERR1;
		}
		/* GPIO15/16/17/18 */
		u32Val &= ~((0x7777ul) << 12);
   12eaa:	68bb      	ldr	r3, [r7, #8]
   12eac:	4a1b      	ldr	r2, [pc, #108]	; (12f1c <spi_flash_enable+0xb8>)
   12eae:	4013      	ands	r3, r2
   12eb0:	60bb      	str	r3, [r7, #8]
		u32Val |= ((0x1111ul) << 12);
   12eb2:	68bb      	ldr	r3, [r7, #8]
   12eb4:	4a1a      	ldr	r2, [pc, #104]	; (12f20 <spi_flash_enable+0xbc>)
   12eb6:	4313      	orrs	r3, r2
   12eb8:	60bb      	str	r3, [r7, #8]
		nm_write_reg(0x1410, u32Val);
   12eba:	68bb      	ldr	r3, [r7, #8]
   12ebc:	4a15      	ldr	r2, [pc, #84]	; (12f14 <spi_flash_enable+0xb0>)
   12ebe:	0019      	movs	r1, r3
   12ec0:	0010      	movs	r0, r2
   12ec2:	4b18      	ldr	r3, [pc, #96]	; (12f24 <spi_flash_enable+0xc0>)
   12ec4:	4798      	blx	r3
		if(enable) {
   12ec6:	1dfb      	adds	r3, r7, #7
   12ec8:	781b      	ldrb	r3, [r3, #0]
   12eca:	2b00      	cmp	r3, #0
   12ecc:	d002      	beq.n	12ed4 <spi_flash_enable+0x70>
			spi_flash_leave_low_power_mode();
   12ece:	4b16      	ldr	r3, [pc, #88]	; (12f28 <spi_flash_enable+0xc4>)
   12ed0:	4798      	blx	r3
   12ed2:	e001      	b.n	12ed8 <spi_flash_enable+0x74>
		} else {
			spi_flash_enter_low_power_mode();
   12ed4:	4b15      	ldr	r3, [pc, #84]	; (12f2c <spi_flash_enable+0xc8>)
   12ed6:	4798      	blx	r3
		}
		/* Disable pinmux to SPI flash to minimize leakage. */
		u32Val &= ~((0x7777ul) << 12);
   12ed8:	68bb      	ldr	r3, [r7, #8]
   12eda:	4a10      	ldr	r2, [pc, #64]	; (12f1c <spi_flash_enable+0xb8>)
   12edc:	4013      	ands	r3, r2
   12ede:	60bb      	str	r3, [r7, #8]
		u32Val |= ((0x0010ul) << 12);
   12ee0:	68bb      	ldr	r3, [r7, #8]
   12ee2:	2280      	movs	r2, #128	; 0x80
   12ee4:	0252      	lsls	r2, r2, #9
   12ee6:	4313      	orrs	r3, r2
   12ee8:	60bb      	str	r3, [r7, #8]
		nm_write_reg(0x1410, u32Val);
   12eea:	68bb      	ldr	r3, [r7, #8]
   12eec:	4a09      	ldr	r2, [pc, #36]	; (12f14 <spi_flash_enable+0xb0>)
   12eee:	0019      	movs	r1, r3
   12ef0:	0010      	movs	r0, r2
   12ef2:	4b0c      	ldr	r3, [pc, #48]	; (12f24 <spi_flash_enable+0xc0>)
   12ef4:	4798      	blx	r3
   12ef6:	e000      	b.n	12efa <spi_flash_enable+0x96>
			goto ERR1;
   12ef8:	46c0      	nop			; (mov r8, r8)
	}
ERR1:
	return s8Ret;
   12efa:	230f      	movs	r3, #15
   12efc:	18fb      	adds	r3, r7, r3
   12efe:	781b      	ldrb	r3, [r3, #0]
   12f00:	b25b      	sxtb	r3, r3
}
   12f02:	0018      	movs	r0, r3
   12f04:	46bd      	mov	sp, r7
   12f06:	b005      	add	sp, #20
   12f08:	bd90      	pop	{r4, r7, pc}
   12f0a:	46c0      	nop			; (mov r8, r8)
   12f0c:	0000f4a1 	.word	0x0000f4a1
   12f10:	0000039f 	.word	0x0000039f
   12f14:	00001410 	.word	0x00001410
   12f18:	0000fba1 	.word	0x0000fba1
   12f1c:	f8888fff 	.word	0xf8888fff
   12f20:	01111000 	.word	0x01111000
   12f24:	0000fbc5 	.word	0x0000fbc5
   12f28:	00012de5 	.word	0x00012de5
   12f2c:	00012d65 	.word	0x00012d65

00012f30 <mem_test_unit_ready>:
  return LUN_ID_0;
}


Ctrl_status mem_test_unit_ready(U8 lun)
{
   12f30:	b580      	push	{r7, lr}
   12f32:	b084      	sub	sp, #16
   12f34:	af00      	add	r7, sp, #0
   12f36:	0002      	movs	r2, r0
   12f38:	1dfb      	adds	r3, r7, #7
   12f3a:	701a      	strb	r2, [r3, #0]

  if (!Ctrl_access_lock()) return CTRL_FAIL;

  status =
#if MAX_LUN
         (lun < MAX_LUN) ? lun_desc[lun].test_unit_ready() :
   12f3c:	1dfb      	adds	r3, r7, #7
   12f3e:	781b      	ldrb	r3, [r3, #0]
   12f40:	2b00      	cmp	r3, #0
   12f42:	d108      	bne.n	12f56 <mem_test_unit_ready+0x26>
   12f44:	1dfb      	adds	r3, r7, #7
   12f46:	781a      	ldrb	r2, [r3, #0]
   12f48:	4b08      	ldr	r3, [pc, #32]	; (12f6c <mem_test_unit_ready+0x3c>)
   12f4a:	0152      	lsls	r2, r2, #5
   12f4c:	58d3      	ldr	r3, [r2, r3]
   12f4e:	4798      	blx	r3
   12f50:	0003      	movs	r3, r0
   12f52:	001a      	movs	r2, r3
   12f54:	e000      	b.n	12f58 <mem_test_unit_ready+0x28>
   12f56:	2201      	movs	r2, #1
  status =
   12f58:	230f      	movs	r3, #15
   12f5a:	18fb      	adds	r3, r7, r3
   12f5c:	701a      	strb	r2, [r3, #0]
                             CTRL_FAIL;
#endif

  Ctrl_access_unlock();

  return status;
   12f5e:	230f      	movs	r3, #15
   12f60:	18fb      	adds	r3, r7, r3
   12f62:	781b      	ldrb	r3, [r3, #0]
}
   12f64:	0018      	movs	r0, r3
   12f66:	46bd      	mov	sp, r7
   12f68:	b004      	add	sp, #16
   12f6a:	bd80      	pop	{r7, pc}
   12f6c:	00025fc4 	.word	0x00025fc4

00012f70 <mem_read_capacity>:


Ctrl_status mem_read_capacity(U8 lun, U32 *u32_nb_sector)
{
   12f70:	b580      	push	{r7, lr}
   12f72:	b084      	sub	sp, #16
   12f74:	af00      	add	r7, sp, #0
   12f76:	0002      	movs	r2, r0
   12f78:	6039      	str	r1, [r7, #0]
   12f7a:	1dfb      	adds	r3, r7, #7
   12f7c:	701a      	strb	r2, [r3, #0]

  if (!Ctrl_access_lock()) return CTRL_FAIL;

  status =
#if MAX_LUN
         (lun < MAX_LUN) ? lun_desc[lun].read_capacity(u32_nb_sector) :
   12f7e:	1dfb      	adds	r3, r7, #7
   12f80:	781b      	ldrb	r3, [r3, #0]
   12f82:	2b00      	cmp	r3, #0
   12f84:	d10c      	bne.n	12fa0 <mem_read_capacity+0x30>
   12f86:	1dfb      	adds	r3, r7, #7
   12f88:	781b      	ldrb	r3, [r3, #0]
   12f8a:	4a0b      	ldr	r2, [pc, #44]	; (12fb8 <mem_read_capacity+0x48>)
   12f8c:	015b      	lsls	r3, r3, #5
   12f8e:	18d3      	adds	r3, r2, r3
   12f90:	3304      	adds	r3, #4
   12f92:	681b      	ldr	r3, [r3, #0]
   12f94:	683a      	ldr	r2, [r7, #0]
   12f96:	0010      	movs	r0, r2
   12f98:	4798      	blx	r3
   12f9a:	0003      	movs	r3, r0
   12f9c:	001a      	movs	r2, r3
   12f9e:	e000      	b.n	12fa2 <mem_read_capacity+0x32>
   12fa0:	2201      	movs	r2, #1
  status =
   12fa2:	230f      	movs	r3, #15
   12fa4:	18fb      	adds	r3, r7, r3
   12fa6:	701a      	strb	r2, [r3, #0]
                             CTRL_FAIL;
#endif

  Ctrl_access_unlock();

  return status;
   12fa8:	230f      	movs	r3, #15
   12faa:	18fb      	adds	r3, r7, r3
   12fac:	781b      	ldrb	r3, [r3, #0]
}
   12fae:	0018      	movs	r0, r3
   12fb0:	46bd      	mov	sp, r7
   12fb2:	b004      	add	sp, #16
   12fb4:	bd80      	pop	{r7, pc}
   12fb6:	46c0      	nop			; (mov r8, r8)
   12fb8:	00025fc4 	.word	0x00025fc4

00012fbc <mem_sector_size>:


U8 mem_sector_size(U8 lun)
{
   12fbc:	b580      	push	{r7, lr}
   12fbe:	b084      	sub	sp, #16
   12fc0:	af00      	add	r7, sp, #0
   12fc2:	0002      	movs	r2, r0
   12fc4:	1dfb      	adds	r3, r7, #7
   12fc6:	701a      	strb	r2, [r3, #0]

  if (!Ctrl_access_lock()) return 0;

  sector_size =
#if MAX_LUN
              (lun < MAX_LUN) ? 1 :
   12fc8:	1dfb      	adds	r3, r7, #7
   12fca:	781b      	ldrb	r3, [r3, #0]
   12fcc:	425a      	negs	r2, r3
   12fce:	4153      	adcs	r3, r2
   12fd0:	b2da      	uxtb	r2, r3
  sector_size =
   12fd2:	230f      	movs	r3, #15
   12fd4:	18fb      	adds	r3, r7, r3
   12fd6:	701a      	strb	r2, [r3, #0]
                                  0;
#endif

  Ctrl_access_unlock();

  return sector_size;
   12fd8:	230f      	movs	r3, #15
   12fda:	18fb      	adds	r3, r7, r3
   12fdc:	781b      	ldrb	r3, [r3, #0]
}
   12fde:	0018      	movs	r0, r3
   12fe0:	46bd      	mov	sp, r7
   12fe2:	b004      	add	sp, #16
   12fe4:	bd80      	pop	{r7, pc}
	...

00012fe8 <mem_wr_protect>:

  return unloaded;
}

bool mem_wr_protect(U8 lun)
{
   12fe8:	b580      	push	{r7, lr}
   12fea:	b084      	sub	sp, #16
   12fec:	af00      	add	r7, sp, #0
   12fee:	0002      	movs	r2, r0
   12ff0:	1dfb      	adds	r3, r7, #7
   12ff2:	701a      	strb	r2, [r3, #0]

  if (!Ctrl_access_lock()) return true;

  wr_protect =
#if MAX_LUN
             (lun < MAX_LUN) ? lun_desc[lun].wr_protect() :
   12ff4:	1dfb      	adds	r3, r7, #7
   12ff6:	781b      	ldrb	r3, [r3, #0]
   12ff8:	2b00      	cmp	r3, #0
   12ffa:	d109      	bne.n	13010 <mem_wr_protect+0x28>
   12ffc:	1dfb      	adds	r3, r7, #7
   12ffe:	781b      	ldrb	r3, [r3, #0]
   13000:	4a0a      	ldr	r2, [pc, #40]	; (1302c <mem_wr_protect+0x44>)
   13002:	015b      	lsls	r3, r3, #5
   13004:	18d3      	adds	r3, r2, r3
   13006:	330c      	adds	r3, #12
   13008:	681b      	ldr	r3, [r3, #0]
   1300a:	4798      	blx	r3
   1300c:	1e03      	subs	r3, r0, #0
   1300e:	d001      	beq.n	13014 <mem_wr_protect+0x2c>
   13010:	2201      	movs	r2, #1
   13012:	e000      	b.n	13016 <mem_wr_protect+0x2e>
   13014:	2200      	movs	r2, #0
  wr_protect =
   13016:	230f      	movs	r3, #15
   13018:	18fb      	adds	r3, r7, r3
   1301a:	701a      	strb	r2, [r3, #0]
                                 true;
#endif

  Ctrl_access_unlock();

  return wr_protect;
   1301c:	230f      	movs	r3, #15
   1301e:	18fb      	adds	r3, r7, r3
   13020:	781b      	ldrb	r3, [r3, #0]
}
   13022:	0018      	movs	r0, r3
   13024:	46bd      	mov	sp, r7
   13026:	b004      	add	sp, #16
   13028:	bd80      	pop	{r7, pc}
   1302a:	46c0      	nop			; (mov r8, r8)
   1302c:	00025fc4 	.word	0x00025fc4

00013030 <memory_2_ram>:
 */
//! @{


Ctrl_status memory_2_ram(U8 lun, U32 addr, void *ram)
{
   13030:	b580      	push	{r7, lr}
   13032:	b086      	sub	sp, #24
   13034:	af00      	add	r7, sp, #0
   13036:	60b9      	str	r1, [r7, #8]
   13038:	607a      	str	r2, [r7, #4]
   1303a:	230f      	movs	r3, #15
   1303c:	18fb      	adds	r3, r7, r3
   1303e:	1c02      	adds	r2, r0, #0
   13040:	701a      	strb	r2, [r3, #0]
  if (!Ctrl_access_lock()) return CTRL_FAIL;

  memory_start_read_action(1);
  status =
#if MAX_LUN
           (lun < MAX_LUN) ? lun_desc[lun].mem_2_ram(addr, ram) :
   13042:	230f      	movs	r3, #15
   13044:	18fb      	adds	r3, r7, r3
   13046:	781b      	ldrb	r3, [r3, #0]
   13048:	2b00      	cmp	r3, #0
   1304a:	d10e      	bne.n	1306a <memory_2_ram+0x3a>
   1304c:	230f      	movs	r3, #15
   1304e:	18fb      	adds	r3, r7, r3
   13050:	781b      	ldrb	r3, [r3, #0]
   13052:	4a0b      	ldr	r2, [pc, #44]	; (13080 <memory_2_ram+0x50>)
   13054:	015b      	lsls	r3, r3, #5
   13056:	18d3      	adds	r3, r2, r3
   13058:	3314      	adds	r3, #20
   1305a:	681b      	ldr	r3, [r3, #0]
   1305c:	6879      	ldr	r1, [r7, #4]
   1305e:	68ba      	ldr	r2, [r7, #8]
   13060:	0010      	movs	r0, r2
   13062:	4798      	blx	r3
   13064:	0003      	movs	r3, r0
   13066:	001a      	movs	r2, r3
   13068:	e000      	b.n	1306c <memory_2_ram+0x3c>
   1306a:	2201      	movs	r2, #1
  status =
   1306c:	2317      	movs	r3, #23
   1306e:	18fb      	adds	r3, r7, r3
   13070:	701a      	strb	r2, [r3, #0]
#endif
  memory_stop_read_action();

  Ctrl_access_unlock();

  return status;
   13072:	2317      	movs	r3, #23
   13074:	18fb      	adds	r3, r7, r3
   13076:	781b      	ldrb	r3, [r3, #0]
}
   13078:	0018      	movs	r0, r3
   1307a:	46bd      	mov	sp, r7
   1307c:	b006      	add	sp, #24
   1307e:	bd80      	pop	{r7, pc}
   13080:	00025fc4 	.word	0x00025fc4

00013084 <ram_2_memory>:


Ctrl_status ram_2_memory(U8 lun, U32 addr, const void *ram)
{
   13084:	b580      	push	{r7, lr}
   13086:	b086      	sub	sp, #24
   13088:	af00      	add	r7, sp, #0
   1308a:	60b9      	str	r1, [r7, #8]
   1308c:	607a      	str	r2, [r7, #4]
   1308e:	230f      	movs	r3, #15
   13090:	18fb      	adds	r3, r7, r3
   13092:	1c02      	adds	r2, r0, #0
   13094:	701a      	strb	r2, [r3, #0]
  if (!Ctrl_access_lock()) return CTRL_FAIL;

  memory_start_write_action(1);
  status =
#if MAX_LUN
           (lun < MAX_LUN) ? lun_desc[lun].ram_2_mem(addr, ram) :
   13096:	230f      	movs	r3, #15
   13098:	18fb      	adds	r3, r7, r3
   1309a:	781b      	ldrb	r3, [r3, #0]
   1309c:	2b00      	cmp	r3, #0
   1309e:	d10e      	bne.n	130be <ram_2_memory+0x3a>
   130a0:	230f      	movs	r3, #15
   130a2:	18fb      	adds	r3, r7, r3
   130a4:	781b      	ldrb	r3, [r3, #0]
   130a6:	4a0b      	ldr	r2, [pc, #44]	; (130d4 <ram_2_memory+0x50>)
   130a8:	015b      	lsls	r3, r3, #5
   130aa:	18d3      	adds	r3, r2, r3
   130ac:	3318      	adds	r3, #24
   130ae:	681b      	ldr	r3, [r3, #0]
   130b0:	6879      	ldr	r1, [r7, #4]
   130b2:	68ba      	ldr	r2, [r7, #8]
   130b4:	0010      	movs	r0, r2
   130b6:	4798      	blx	r3
   130b8:	0003      	movs	r3, r0
   130ba:	001a      	movs	r2, r3
   130bc:	e000      	b.n	130c0 <ram_2_memory+0x3c>
   130be:	2201      	movs	r2, #1
  status =
   130c0:	2317      	movs	r3, #23
   130c2:	18fb      	adds	r3, r7, r3
   130c4:	701a      	strb	r2, [r3, #0]
#endif
  memory_stop_write_action();

  Ctrl_access_unlock();

  return status;
   130c6:	2317      	movs	r3, #23
   130c8:	18fb      	adds	r3, r7, r3
   130ca:	781b      	ldrb	r3, [r3, #0]
}
   130cc:	0018      	movs	r0, r3
   130ce:	46bd      	mov	sp, r7
   130d0:	b006      	add	sp, #24
   130d2:	bd80      	pop	{r7, pc}
   130d4:	00025fc4 	.word	0x00025fc4

000130d8 <cpu_irq_enter_critical>:
 */
volatile bool g_interrupt_enabled = true;
#endif

void cpu_irq_enter_critical(void)
{
   130d8:	b580      	push	{r7, lr}
   130da:	b082      	sub	sp, #8
   130dc:	af00      	add	r7, sp, #0
	if (cpu_irq_critical_section_counter == 0) {
   130de:	4b10      	ldr	r3, [pc, #64]	; (13120 <cpu_irq_enter_critical+0x48>)
   130e0:	681b      	ldr	r3, [r3, #0]
   130e2:	2b00      	cmp	r3, #0
   130e4:	d112      	bne.n	1310c <cpu_irq_enter_critical+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   130e6:	f3ef 8310 	mrs	r3, PRIMASK
   130ea:	607b      	str	r3, [r7, #4]
  return(result);
   130ec:	687b      	ldr	r3, [r7, #4]
		if (cpu_irq_is_enabled()) {
   130ee:	2b00      	cmp	r3, #0
   130f0:	d109      	bne.n	13106 <cpu_irq_enter_critical+0x2e>
  __ASM volatile ("cpsid i" : : : "memory");
   130f2:	b672      	cpsid	i
   130f4:	f3bf 8f5f 	dmb	sy
			cpu_irq_disable();
   130f8:	4b0a      	ldr	r3, [pc, #40]	; (13124 <cpu_irq_enter_critical+0x4c>)
   130fa:	2200      	movs	r2, #0
   130fc:	701a      	strb	r2, [r3, #0]
			cpu_irq_prev_interrupt_state = true;
   130fe:	4b0a      	ldr	r3, [pc, #40]	; (13128 <cpu_irq_enter_critical+0x50>)
   13100:	2201      	movs	r2, #1
   13102:	701a      	strb	r2, [r3, #0]
   13104:	e002      	b.n	1310c <cpu_irq_enter_critical+0x34>
		} else {
			/* Make sure the to save the prev state as false */
			cpu_irq_prev_interrupt_state = false;
   13106:	4b08      	ldr	r3, [pc, #32]	; (13128 <cpu_irq_enter_critical+0x50>)
   13108:	2200      	movs	r2, #0
   1310a:	701a      	strb	r2, [r3, #0]
		}

	}

	cpu_irq_critical_section_counter++;
   1310c:	4b04      	ldr	r3, [pc, #16]	; (13120 <cpu_irq_enter_critical+0x48>)
   1310e:	681b      	ldr	r3, [r3, #0]
   13110:	1c5a      	adds	r2, r3, #1
   13112:	4b03      	ldr	r3, [pc, #12]	; (13120 <cpu_irq_enter_critical+0x48>)
   13114:	601a      	str	r2, [r3, #0]
}
   13116:	46c0      	nop			; (mov r8, r8)
   13118:	46bd      	mov	sp, r7
   1311a:	b002      	add	sp, #8
   1311c:	bd80      	pop	{r7, pc}
   1311e:	46c0      	nop			; (mov r8, r8)
   13120:	20003d34 	.word	0x20003d34
   13124:	20000116 	.word	0x20000116
   13128:	20003d38 	.word	0x20003d38

0001312c <cpu_irq_leave_critical>:

void cpu_irq_leave_critical(void)
{
   1312c:	b580      	push	{r7, lr}
   1312e:	af00      	add	r7, sp, #0
	/* Check if the user is trying to leave a critical section when not in a critical section */
	Assert(cpu_irq_critical_section_counter > 0);

	cpu_irq_critical_section_counter--;
   13130:	4b0b      	ldr	r3, [pc, #44]	; (13160 <cpu_irq_leave_critical+0x34>)
   13132:	681b      	ldr	r3, [r3, #0]
   13134:	1e5a      	subs	r2, r3, #1
   13136:	4b0a      	ldr	r3, [pc, #40]	; (13160 <cpu_irq_leave_critical+0x34>)
   13138:	601a      	str	r2, [r3, #0]

	/* Only enable global interrupts when the counter reaches 0 and the state of the global interrupt flag
	   was enabled when entering critical state */
	if ((cpu_irq_critical_section_counter == 0) && (cpu_irq_prev_interrupt_state)) {
   1313a:	4b09      	ldr	r3, [pc, #36]	; (13160 <cpu_irq_leave_critical+0x34>)
   1313c:	681b      	ldr	r3, [r3, #0]
   1313e:	2b00      	cmp	r3, #0
   13140:	d10a      	bne.n	13158 <cpu_irq_leave_critical+0x2c>
   13142:	4b08      	ldr	r3, [pc, #32]	; (13164 <cpu_irq_leave_critical+0x38>)
   13144:	781b      	ldrb	r3, [r3, #0]
   13146:	b2db      	uxtb	r3, r3
   13148:	2b00      	cmp	r3, #0
   1314a:	d005      	beq.n	13158 <cpu_irq_leave_critical+0x2c>
		cpu_irq_enable();
   1314c:	4b06      	ldr	r3, [pc, #24]	; (13168 <cpu_irq_leave_critical+0x3c>)
   1314e:	2201      	movs	r2, #1
   13150:	701a      	strb	r2, [r3, #0]
   13152:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
   13156:	b662      	cpsie	i
	}
}
   13158:	46c0      	nop			; (mov r8, r8)
   1315a:	46bd      	mov	sp, r7
   1315c:	bd80      	pop	{r7, pc}
   1315e:	46c0      	nop			; (mov r8, r8)
   13160:	20003d34 	.word	0x20003d34
   13164:	20003d38 	.word	0x20003d38
   13168:	20000116 	.word	0x20000116

0001316c <system_pinmux_get_group_from_gpio_pin>:
{
   1316c:	b580      	push	{r7, lr}
   1316e:	b084      	sub	sp, #16
   13170:	af00      	add	r7, sp, #0
   13172:	0002      	movs	r2, r0
   13174:	1dfb      	adds	r3, r7, #7
   13176:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
   13178:	230f      	movs	r3, #15
   1317a:	18fb      	adds	r3, r7, r3
   1317c:	1dfa      	adds	r2, r7, #7
   1317e:	7812      	ldrb	r2, [r2, #0]
   13180:	09d2      	lsrs	r2, r2, #7
   13182:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
   13184:	230e      	movs	r3, #14
   13186:	18fb      	adds	r3, r7, r3
   13188:	1dfa      	adds	r2, r7, #7
   1318a:	7812      	ldrb	r2, [r2, #0]
   1318c:	0952      	lsrs	r2, r2, #5
   1318e:	701a      	strb	r2, [r3, #0]
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
   13190:	4b0d      	ldr	r3, [pc, #52]	; (131c8 <system_pinmux_get_group_from_gpio_pin+0x5c>)
   13192:	60bb      	str	r3, [r7, #8]
	if (port_index < PORT_INST_NUM) {
   13194:	230f      	movs	r3, #15
   13196:	18fb      	adds	r3, r7, r3
   13198:	781b      	ldrb	r3, [r3, #0]
   1319a:	2b00      	cmp	r3, #0
   1319c:	d10f      	bne.n	131be <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
   1319e:	230f      	movs	r3, #15
   131a0:	18fb      	adds	r3, r7, r3
   131a2:	781b      	ldrb	r3, [r3, #0]
   131a4:	009b      	lsls	r3, r3, #2
   131a6:	2210      	movs	r2, #16
   131a8:	4694      	mov	ip, r2
   131aa:	44bc      	add	ip, r7
   131ac:	4463      	add	r3, ip
   131ae:	3b08      	subs	r3, #8
   131b0:	681a      	ldr	r2, [r3, #0]
   131b2:	230e      	movs	r3, #14
   131b4:	18fb      	adds	r3, r7, r3
   131b6:	781b      	ldrb	r3, [r3, #0]
   131b8:	01db      	lsls	r3, r3, #7
   131ba:	18d3      	adds	r3, r2, r3
   131bc:	e000      	b.n	131c0 <system_pinmux_get_group_from_gpio_pin+0x54>
		return NULL;
   131be:	2300      	movs	r3, #0
}
   131c0:	0018      	movs	r0, r3
   131c2:	46bd      	mov	sp, r7
   131c4:	b004      	add	sp, #16
   131c6:	bd80      	pop	{r7, pc}
   131c8:	41004400 	.word	0x41004400

000131cc <port_get_group_from_gpio_pin>:
{
   131cc:	b580      	push	{r7, lr}
   131ce:	b082      	sub	sp, #8
   131d0:	af00      	add	r7, sp, #0
   131d2:	0002      	movs	r2, r0
   131d4:	1dfb      	adds	r3, r7, #7
   131d6:	701a      	strb	r2, [r3, #0]
	return system_pinmux_get_group_from_gpio_pin(gpio_pin);
   131d8:	1dfb      	adds	r3, r7, #7
   131da:	781b      	ldrb	r3, [r3, #0]
   131dc:	0018      	movs	r0, r3
   131de:	4b03      	ldr	r3, [pc, #12]	; (131ec <port_get_group_from_gpio_pin+0x20>)
   131e0:	4798      	blx	r3
   131e2:	0003      	movs	r3, r0
}
   131e4:	0018      	movs	r0, r3
   131e6:	46bd      	mov	sp, r7
   131e8:	b002      	add	sp, #8
   131ea:	bd80      	pop	{r7, pc}
   131ec:	0001316d 	.word	0x0001316d

000131f0 <port_get_config_defaults>:
{
   131f0:	b580      	push	{r7, lr}
   131f2:	b082      	sub	sp, #8
   131f4:	af00      	add	r7, sp, #0
   131f6:	6078      	str	r0, [r7, #4]
	config->direction  = PORT_PIN_DIR_INPUT;
   131f8:	687b      	ldr	r3, [r7, #4]
   131fa:	2200      	movs	r2, #0
   131fc:	701a      	strb	r2, [r3, #0]
	config->input_pull = PORT_PIN_PULL_UP;
   131fe:	687b      	ldr	r3, [r7, #4]
   13200:	2201      	movs	r2, #1
   13202:	705a      	strb	r2, [r3, #1]
	config->powersave  = false;
   13204:	687b      	ldr	r3, [r7, #4]
   13206:	2200      	movs	r2, #0
   13208:	709a      	strb	r2, [r3, #2]
}
   1320a:	46c0      	nop			; (mov r8, r8)
   1320c:	46bd      	mov	sp, r7
   1320e:	b002      	add	sp, #8
   13210:	bd80      	pop	{r7, pc}
	...

00013214 <port_pin_set_output_level>:
{
   13214:	b580      	push	{r7, lr}
   13216:	b084      	sub	sp, #16
   13218:	af00      	add	r7, sp, #0
   1321a:	0002      	movs	r2, r0
   1321c:	1dfb      	adds	r3, r7, #7
   1321e:	701a      	strb	r2, [r3, #0]
   13220:	1dbb      	adds	r3, r7, #6
   13222:	1c0a      	adds	r2, r1, #0
   13224:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
   13226:	1dfb      	adds	r3, r7, #7
   13228:	781b      	ldrb	r3, [r3, #0]
   1322a:	0018      	movs	r0, r3
   1322c:	4b0d      	ldr	r3, [pc, #52]	; (13264 <port_pin_set_output_level+0x50>)
   1322e:	4798      	blx	r3
   13230:	0003      	movs	r3, r0
   13232:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
   13234:	1dfb      	adds	r3, r7, #7
   13236:	781b      	ldrb	r3, [r3, #0]
   13238:	221f      	movs	r2, #31
   1323a:	4013      	ands	r3, r2
   1323c:	2201      	movs	r2, #1
   1323e:	409a      	lsls	r2, r3
   13240:	0013      	movs	r3, r2
   13242:	60bb      	str	r3, [r7, #8]
	if (level) {
   13244:	1dbb      	adds	r3, r7, #6
   13246:	781b      	ldrb	r3, [r3, #0]
   13248:	2b00      	cmp	r3, #0
   1324a:	d003      	beq.n	13254 <port_pin_set_output_level+0x40>
		port_base->OUTSET.reg = pin_mask;
   1324c:	68fb      	ldr	r3, [r7, #12]
   1324e:	68ba      	ldr	r2, [r7, #8]
   13250:	619a      	str	r2, [r3, #24]
}
   13252:	e002      	b.n	1325a <port_pin_set_output_level+0x46>
		port_base->OUTCLR.reg = pin_mask;
   13254:	68fb      	ldr	r3, [r7, #12]
   13256:	68ba      	ldr	r2, [r7, #8]
   13258:	615a      	str	r2, [r3, #20]
}
   1325a:	46c0      	nop			; (mov r8, r8)
   1325c:	46bd      	mov	sp, r7
   1325e:	b004      	add	sp, #16
   13260:	bd80      	pop	{r7, pc}
   13262:	46c0      	nop			; (mov r8, r8)
   13264:	000131cd 	.word	0x000131cd

00013268 <system_board_init>:
void board_init(void);
#  pragma weak board_init=system_board_init
#endif

void system_board_init(void)
{
   13268:	b580      	push	{r7, lr}
   1326a:	b082      	sub	sp, #8
   1326c:	af00      	add	r7, sp, #0
	struct port_config pin_conf;
	port_get_config_defaults(&pin_conf);
   1326e:	1d3b      	adds	r3, r7, #4
   13270:	0018      	movs	r0, r3
   13272:	4b0e      	ldr	r3, [pc, #56]	; (132ac <system_board_init+0x44>)
   13274:	4798      	blx	r3

	/* Configure LEDs as outputs, turn them off */
	pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
   13276:	1d3b      	adds	r3, r7, #4
   13278:	2201      	movs	r2, #1
   1327a:	701a      	strb	r2, [r3, #0]
	port_pin_set_config(LED_0_PIN, &pin_conf);
   1327c:	1d3b      	adds	r3, r7, #4
   1327e:	0019      	movs	r1, r3
   13280:	2017      	movs	r0, #23
   13282:	4b0b      	ldr	r3, [pc, #44]	; (132b0 <system_board_init+0x48>)
   13284:	4798      	blx	r3
	port_pin_set_output_level(LED_0_PIN, LED_0_INACTIVE);
   13286:	2101      	movs	r1, #1
   13288:	2017      	movs	r0, #23
   1328a:	4b0a      	ldr	r3, [pc, #40]	; (132b4 <system_board_init+0x4c>)
   1328c:	4798      	blx	r3
	
	/* Set buttons as inputs */
	pin_conf.direction  = PORT_PIN_DIR_INPUT;
   1328e:	1d3b      	adds	r3, r7, #4
   13290:	2200      	movs	r2, #0
   13292:	701a      	strb	r2, [r3, #0]
	pin_conf.input_pull = PORT_PIN_PULL_UP;
   13294:	1d3b      	adds	r3, r7, #4
   13296:	2201      	movs	r2, #1
   13298:	705a      	strb	r2, [r3, #1]
	port_pin_set_config(BUTTON_0_PIN, &pin_conf);
   1329a:	1d3b      	adds	r3, r7, #4
   1329c:	0019      	movs	r1, r3
   1329e:	2037      	movs	r0, #55	; 0x37
   132a0:	4b03      	ldr	r3, [pc, #12]	; (132b0 <system_board_init+0x48>)
   132a2:	4798      	blx	r3
}
   132a4:	46c0      	nop			; (mov r8, r8)
   132a6:	46bd      	mov	sp, r7
   132a8:	b002      	add	sp, #8
   132aa:	bd80      	pop	{r7, pc}
   132ac:	000131f1 	.word	0x000131f1
   132b0:	000138dd 	.word	0x000138dd
   132b4:	00013215 	.word	0x00013215

000132b8 <_extint_get_eic_from_channel>:
 *
 * \return Base address of the associated EIC module.
 */
static inline Eic * _extint_get_eic_from_channel(
		const uint8_t channel)
{
   132b8:	b580      	push	{r7, lr}
   132ba:	b084      	sub	sp, #16
   132bc:	af00      	add	r7, sp, #0
   132be:	0002      	movs	r2, r0
   132c0:	1dfb      	adds	r3, r7, #7
   132c2:	701a      	strb	r2, [r3, #0]
	uint8_t eic_index = (channel / 32);
   132c4:	230f      	movs	r3, #15
   132c6:	18fb      	adds	r3, r7, r3
   132c8:	1dfa      	adds	r2, r7, #7
   132ca:	7812      	ldrb	r2, [r2, #0]
   132cc:	0952      	lsrs	r2, r2, #5
   132ce:	701a      	strb	r2, [r3, #0]

	if (eic_index < EIC_INST_NUM) {
   132d0:	230f      	movs	r3, #15
   132d2:	18fb      	adds	r3, r7, r3
   132d4:	781b      	ldrb	r3, [r3, #0]
   132d6:	2b00      	cmp	r3, #0
   132d8:	d10c      	bne.n	132f4 <_extint_get_eic_from_channel+0x3c>
		/* Array of available EICs */
		Eic *const eics[EIC_INST_NUM] = EIC_INSTS;
   132da:	4b09      	ldr	r3, [pc, #36]	; (13300 <_extint_get_eic_from_channel+0x48>)
   132dc:	60bb      	str	r3, [r7, #8]

		return eics[eic_index];
   132de:	230f      	movs	r3, #15
   132e0:	18fb      	adds	r3, r7, r3
   132e2:	781b      	ldrb	r3, [r3, #0]
   132e4:	009b      	lsls	r3, r3, #2
   132e6:	2210      	movs	r2, #16
   132e8:	4694      	mov	ip, r2
   132ea:	44bc      	add	ip, r7
   132ec:	4463      	add	r3, ip
   132ee:	3b08      	subs	r3, #8
   132f0:	681b      	ldr	r3, [r3, #0]
   132f2:	e000      	b.n	132f6 <_extint_get_eic_from_channel+0x3e>
	} else {
		Assert(false);
		return NULL;
   132f4:	2300      	movs	r3, #0
	}
}
   132f6:	0018      	movs	r0, r3
   132f8:	46bd      	mov	sp, r7
   132fa:	b004      	add	sp, #16
   132fc:	bd80      	pop	{r7, pc}
   132fe:	46c0      	nop			; (mov r8, r8)
   13300:	40001800 	.word	0x40001800

00013304 <extint_chan_is_detected>:
 *  \retval true   If the channel's edge/level detection criteria was met
 *  \retval false  If the channel has not detected its configured criteria
 */
static inline bool extint_chan_is_detected(
		const uint8_t channel)
{
   13304:	b580      	push	{r7, lr}
   13306:	b084      	sub	sp, #16
   13308:	af00      	add	r7, sp, #0
   1330a:	0002      	movs	r2, r0
   1330c:	1dfb      	adds	r3, r7, #7
   1330e:	701a      	strb	r2, [r3, #0]
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
   13310:	1dfb      	adds	r3, r7, #7
   13312:	781b      	ldrb	r3, [r3, #0]
   13314:	0018      	movs	r0, r3
   13316:	4b0b      	ldr	r3, [pc, #44]	; (13344 <extint_chan_is_detected+0x40>)
   13318:	4798      	blx	r3
   1331a:	0003      	movs	r3, r0
   1331c:	60fb      	str	r3, [r7, #12]
	uint32_t eic_mask   = (1UL << (channel % 32));
   1331e:	1dfb      	adds	r3, r7, #7
   13320:	781b      	ldrb	r3, [r3, #0]
   13322:	221f      	movs	r2, #31
   13324:	4013      	ands	r3, r2
   13326:	2201      	movs	r2, #1
   13328:	409a      	lsls	r2, r3
   1332a:	0013      	movs	r3, r2
   1332c:	60bb      	str	r3, [r7, #8]

	return (eic_module->INTFLAG.reg & eic_mask);
   1332e:	68fb      	ldr	r3, [r7, #12]
   13330:	691b      	ldr	r3, [r3, #16]
   13332:	68ba      	ldr	r2, [r7, #8]
   13334:	4013      	ands	r3, r2
   13336:	1e5a      	subs	r2, r3, #1
   13338:	4193      	sbcs	r3, r2
   1333a:	b2db      	uxtb	r3, r3
}
   1333c:	0018      	movs	r0, r3
   1333e:	46bd      	mov	sp, r7
   13340:	b004      	add	sp, #16
   13342:	bd80      	pop	{r7, pc}
   13344:	000132b9 	.word	0x000132b9

00013348 <extint_chan_clear_detected>:
 *
 *  \param[in] channel  External Interrupt channel index to check
 */
static inline void extint_chan_clear_detected(
		const uint8_t channel)
{
   13348:	b580      	push	{r7, lr}
   1334a:	b084      	sub	sp, #16
   1334c:	af00      	add	r7, sp, #0
   1334e:	0002      	movs	r2, r0
   13350:	1dfb      	adds	r3, r7, #7
   13352:	701a      	strb	r2, [r3, #0]
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
   13354:	1dfb      	adds	r3, r7, #7
   13356:	781b      	ldrb	r3, [r3, #0]
   13358:	0018      	movs	r0, r3
   1335a:	4b09      	ldr	r3, [pc, #36]	; (13380 <extint_chan_clear_detected+0x38>)
   1335c:	4798      	blx	r3
   1335e:	0003      	movs	r3, r0
   13360:	60fb      	str	r3, [r7, #12]
	uint32_t eic_mask   = (1UL << (channel % 32));
   13362:	1dfb      	adds	r3, r7, #7
   13364:	781b      	ldrb	r3, [r3, #0]
   13366:	221f      	movs	r2, #31
   13368:	4013      	ands	r3, r2
   1336a:	2201      	movs	r2, #1
   1336c:	409a      	lsls	r2, r3
   1336e:	0013      	movs	r3, r2
   13370:	60bb      	str	r3, [r7, #8]

	eic_module->INTFLAG.reg = eic_mask;
   13372:	68fb      	ldr	r3, [r7, #12]
   13374:	68ba      	ldr	r2, [r7, #8]
   13376:	611a      	str	r2, [r3, #16]
}
   13378:	46c0      	nop			; (mov r8, r8)
   1337a:	46bd      	mov	sp, r7
   1337c:	b004      	add	sp, #16
   1337e:	bd80      	pop	{r7, pc}
   13380:	000132b9 	.word	0x000132b9

00013384 <extint_register_callback>:
 */
enum status_code extint_register_callback(
	const extint_callback_t callback,
	const uint8_t channel,
	const enum extint_callback_type type)
{
   13384:	b580      	push	{r7, lr}
   13386:	b082      	sub	sp, #8
   13388:	af00      	add	r7, sp, #0
   1338a:	6078      	str	r0, [r7, #4]
   1338c:	0008      	movs	r0, r1
   1338e:	0011      	movs	r1, r2
   13390:	1cfb      	adds	r3, r7, #3
   13392:	1c02      	adds	r2, r0, #0
   13394:	701a      	strb	r2, [r3, #0]
   13396:	1cbb      	adds	r3, r7, #2
   13398:	1c0a      	adds	r2, r1, #0
   1339a:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(callback);

	if (type != EXTINT_CALLBACK_TYPE_DETECT) {
   1339c:	1cbb      	adds	r3, r7, #2
   1339e:	781b      	ldrb	r3, [r3, #0]
   133a0:	2b00      	cmp	r3, #0
   133a2:	d001      	beq.n	133a8 <extint_register_callback+0x24>
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
   133a4:	2317      	movs	r3, #23
   133a6:	e019      	b.n	133dc <extint_register_callback+0x58>
	}

	if (_extint_dev.callbacks[channel] == NULL) {
   133a8:	1cfb      	adds	r3, r7, #3
   133aa:	781a      	ldrb	r2, [r3, #0]
   133ac:	4b0d      	ldr	r3, [pc, #52]	; (133e4 <extint_register_callback+0x60>)
   133ae:	0092      	lsls	r2, r2, #2
   133b0:	58d3      	ldr	r3, [r2, r3]
   133b2:	2b00      	cmp	r3, #0
   133b4:	d107      	bne.n	133c6 <extint_register_callback+0x42>
		_extint_dev.callbacks[channel] = callback;
   133b6:	1cfb      	adds	r3, r7, #3
   133b8:	781a      	ldrb	r2, [r3, #0]
   133ba:	4b0a      	ldr	r3, [pc, #40]	; (133e4 <extint_register_callback+0x60>)
   133bc:	0092      	lsls	r2, r2, #2
   133be:	6879      	ldr	r1, [r7, #4]
   133c0:	50d1      	str	r1, [r2, r3]
		return STATUS_OK;
   133c2:	2300      	movs	r3, #0
   133c4:	e00a      	b.n	133dc <extint_register_callback+0x58>
	} else if (_extint_dev.callbacks[channel] == callback) {
   133c6:	1cfb      	adds	r3, r7, #3
   133c8:	781a      	ldrb	r2, [r3, #0]
   133ca:	4b06      	ldr	r3, [pc, #24]	; (133e4 <extint_register_callback+0x60>)
   133cc:	0092      	lsls	r2, r2, #2
   133ce:	58d2      	ldr	r2, [r2, r3]
   133d0:	687b      	ldr	r3, [r7, #4]
   133d2:	429a      	cmp	r2, r3
   133d4:	d101      	bne.n	133da <extint_register_callback+0x56>
		return STATUS_OK;
   133d6:	2300      	movs	r3, #0
   133d8:	e000      	b.n	133dc <extint_register_callback+0x58>
	}

	return STATUS_ERR_ALREADY_INITIALIZED;
   133da:	231d      	movs	r3, #29
}
   133dc:	0018      	movs	r0, r3
   133de:	46bd      	mov	sp, r7
   133e0:	b002      	add	sp, #8
   133e2:	bd80      	pop	{r7, pc}
   133e4:	200055a4 	.word	0x200055a4

000133e8 <extint_chan_enable_callback>:
 * \retval STATUS_ERR_INVALID_ARG  If an invalid callback type was supplied
 */
enum status_code extint_chan_enable_callback(
	const uint8_t channel,
	const enum extint_callback_type type)
{
   133e8:	b580      	push	{r7, lr}
   133ea:	b084      	sub	sp, #16
   133ec:	af00      	add	r7, sp, #0
   133ee:	0002      	movs	r2, r0
   133f0:	1dfb      	adds	r3, r7, #7
   133f2:	701a      	strb	r2, [r3, #0]
   133f4:	1dbb      	adds	r3, r7, #6
   133f6:	1c0a      	adds	r2, r1, #0
   133f8:	701a      	strb	r2, [r3, #0]
	if (type == EXTINT_CALLBACK_TYPE_DETECT) {
   133fa:	1dbb      	adds	r3, r7, #6
   133fc:	781b      	ldrb	r3, [r3, #0]
   133fe:	2b00      	cmp	r3, #0
   13400:	d10e      	bne.n	13420 <extint_chan_enable_callback+0x38>
		Eic *const eic = _extint_get_eic_from_channel(channel);
   13402:	1dfb      	adds	r3, r7, #7
   13404:	781b      	ldrb	r3, [r3, #0]
   13406:	0018      	movs	r0, r3
   13408:	4b08      	ldr	r3, [pc, #32]	; (1342c <extint_chan_enable_callback+0x44>)
   1340a:	4798      	blx	r3
   1340c:	0003      	movs	r3, r0
   1340e:	60fb      	str	r3, [r7, #12]

		eic->INTENSET.reg = (1UL << channel);
   13410:	1dfb      	adds	r3, r7, #7
   13412:	781b      	ldrb	r3, [r3, #0]
   13414:	2201      	movs	r2, #1
   13416:	409a      	lsls	r2, r3
   13418:	68fb      	ldr	r3, [r7, #12]
   1341a:	60da      	str	r2, [r3, #12]
	else {
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
   1341c:	2300      	movs	r3, #0
   1341e:	e000      	b.n	13422 <extint_chan_enable_callback+0x3a>
		return STATUS_ERR_INVALID_ARG;
   13420:	2317      	movs	r3, #23
}
   13422:	0018      	movs	r0, r3
   13424:	46bd      	mov	sp, r7
   13426:	b004      	add	sp, #16
   13428:	bd80      	pop	{r7, pc}
   1342a:	46c0      	nop			; (mov r8, r8)
   1342c:	000132b9 	.word	0x000132b9

00013430 <extint_chan_disable_callback>:
 * \retval STATUS_ERR_INVALID_ARG  If an invalid callback type was supplied
 */
enum status_code extint_chan_disable_callback(
	const uint8_t channel,
	const enum extint_callback_type type)
{
   13430:	b580      	push	{r7, lr}
   13432:	b084      	sub	sp, #16
   13434:	af00      	add	r7, sp, #0
   13436:	0002      	movs	r2, r0
   13438:	1dfb      	adds	r3, r7, #7
   1343a:	701a      	strb	r2, [r3, #0]
   1343c:	1dbb      	adds	r3, r7, #6
   1343e:	1c0a      	adds	r2, r1, #0
   13440:	701a      	strb	r2, [r3, #0]
	if (type == EXTINT_CALLBACK_TYPE_DETECT) {
   13442:	1dbb      	adds	r3, r7, #6
   13444:	781b      	ldrb	r3, [r3, #0]
   13446:	2b00      	cmp	r3, #0
   13448:	d10e      	bne.n	13468 <extint_chan_disable_callback+0x38>
		Eic *const eic = _extint_get_eic_from_channel(channel);
   1344a:	1dfb      	adds	r3, r7, #7
   1344c:	781b      	ldrb	r3, [r3, #0]
   1344e:	0018      	movs	r0, r3
   13450:	4b08      	ldr	r3, [pc, #32]	; (13474 <extint_chan_disable_callback+0x44>)
   13452:	4798      	blx	r3
   13454:	0003      	movs	r3, r0
   13456:	60fb      	str	r3, [r7, #12]

		eic->INTENCLR.reg = (1UL << channel);
   13458:	1dfb      	adds	r3, r7, #7
   1345a:	781b      	ldrb	r3, [r3, #0]
   1345c:	2201      	movs	r2, #1
   1345e:	409a      	lsls	r2, r3
   13460:	68fb      	ldr	r3, [r7, #12]
   13462:	609a      	str	r2, [r3, #8]
	else {
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
   13464:	2300      	movs	r3, #0
   13466:	e000      	b.n	1346a <extint_chan_disable_callback+0x3a>
		return STATUS_ERR_INVALID_ARG;
   13468:	2317      	movs	r3, #23
}
   1346a:	0018      	movs	r0, r3
   1346c:	46bd      	mov	sp, r7
   1346e:	b004      	add	sp, #16
   13470:	bd80      	pop	{r7, pc}
   13472:	46c0      	nop			; (mov r8, r8)
   13474:	000132b9 	.word	0x000132b9

00013478 <EIC_Handler>:
	return _current_channel;
}

/** Handler for the EXTINT hardware module interrupt. */
void EIC_Handler(void)
{
   13478:	b580      	push	{r7, lr}
   1347a:	af00      	add	r7, sp, #0
	/* Find any triggered channels, run associated callback handlers */
	for (_current_channel = 0; _current_channel < EIC_NUMBER_OF_INTERRUPTS ; _current_channel++) {
   1347c:	4b15      	ldr	r3, [pc, #84]	; (134d4 <EIC_Handler+0x5c>)
   1347e:	2200      	movs	r2, #0
   13480:	701a      	strb	r2, [r3, #0]
   13482:	e020      	b.n	134c6 <EIC_Handler+0x4e>
		if (extint_chan_is_detected(_current_channel)) {
   13484:	4b13      	ldr	r3, [pc, #76]	; (134d4 <EIC_Handler+0x5c>)
   13486:	781b      	ldrb	r3, [r3, #0]
   13488:	0018      	movs	r0, r3
   1348a:	4b13      	ldr	r3, [pc, #76]	; (134d8 <EIC_Handler+0x60>)
   1348c:	4798      	blx	r3
   1348e:	1e03      	subs	r3, r0, #0
   13490:	d013      	beq.n	134ba <EIC_Handler+0x42>
			/* Clear flag */
			extint_chan_clear_detected(_current_channel);
   13492:	4b10      	ldr	r3, [pc, #64]	; (134d4 <EIC_Handler+0x5c>)
   13494:	781b      	ldrb	r3, [r3, #0]
   13496:	0018      	movs	r0, r3
   13498:	4b10      	ldr	r3, [pc, #64]	; (134dc <EIC_Handler+0x64>)
   1349a:	4798      	blx	r3
			/* Find any associated callback entries in the callback table */
			if (_extint_dev.callbacks[_current_channel] != NULL) {
   1349c:	4b0d      	ldr	r3, [pc, #52]	; (134d4 <EIC_Handler+0x5c>)
   1349e:	781b      	ldrb	r3, [r3, #0]
   134a0:	001a      	movs	r2, r3
   134a2:	4b0f      	ldr	r3, [pc, #60]	; (134e0 <EIC_Handler+0x68>)
   134a4:	0092      	lsls	r2, r2, #2
   134a6:	58d3      	ldr	r3, [r2, r3]
   134a8:	2b00      	cmp	r3, #0
   134aa:	d006      	beq.n	134ba <EIC_Handler+0x42>
				/* Run the registered callback */
				_extint_dev.callbacks[_current_channel]();
   134ac:	4b09      	ldr	r3, [pc, #36]	; (134d4 <EIC_Handler+0x5c>)
   134ae:	781b      	ldrb	r3, [r3, #0]
   134b0:	001a      	movs	r2, r3
   134b2:	4b0b      	ldr	r3, [pc, #44]	; (134e0 <EIC_Handler+0x68>)
   134b4:	0092      	lsls	r2, r2, #2
   134b6:	58d3      	ldr	r3, [r2, r3]
   134b8:	4798      	blx	r3
	for (_current_channel = 0; _current_channel < EIC_NUMBER_OF_INTERRUPTS ; _current_channel++) {
   134ba:	4b06      	ldr	r3, [pc, #24]	; (134d4 <EIC_Handler+0x5c>)
   134bc:	781b      	ldrb	r3, [r3, #0]
   134be:	3301      	adds	r3, #1
   134c0:	b2da      	uxtb	r2, r3
   134c2:	4b04      	ldr	r3, [pc, #16]	; (134d4 <EIC_Handler+0x5c>)
   134c4:	701a      	strb	r2, [r3, #0]
   134c6:	4b03      	ldr	r3, [pc, #12]	; (134d4 <EIC_Handler+0x5c>)
   134c8:	781b      	ldrb	r3, [r3, #0]
   134ca:	2b0f      	cmp	r3, #15
   134cc:	d9da      	bls.n	13484 <EIC_Handler+0xc>
			}
		}
	}
}
   134ce:	46c0      	nop			; (mov r8, r8)
   134d0:	46bd      	mov	sp, r7
   134d2:	bd80      	pop	{r7, pc}
   134d4:	200055a0 	.word	0x200055a0
   134d8:	00013305 	.word	0x00013305
   134dc:	00013349 	.word	0x00013349
   134e0:	200055a4 	.word	0x200055a4

000134e4 <system_gclk_chan_get_config_defaults>:
{
   134e4:	b580      	push	{r7, lr}
   134e6:	b082      	sub	sp, #8
   134e8:	af00      	add	r7, sp, #0
   134ea:	6078      	str	r0, [r7, #4]
	config->source_generator = GCLK_GENERATOR_0;
   134ec:	687b      	ldr	r3, [r7, #4]
   134ee:	2200      	movs	r2, #0
   134f0:	701a      	strb	r2, [r3, #0]
}
   134f2:	46c0      	nop			; (mov r8, r8)
   134f4:	46bd      	mov	sp, r7
   134f6:	b002      	add	sp, #8
   134f8:	bd80      	pop	{r7, pc}
	...

000134fc <system_apb_clock_set_mask>:
{
   134fc:	b580      	push	{r7, lr}
   134fe:	b082      	sub	sp, #8
   13500:	af00      	add	r7, sp, #0
   13502:	0002      	movs	r2, r0
   13504:	6039      	str	r1, [r7, #0]
   13506:	1dfb      	adds	r3, r7, #7
   13508:	701a      	strb	r2, [r3, #0]
	switch (bus) {
   1350a:	1dfb      	adds	r3, r7, #7
   1350c:	781b      	ldrb	r3, [r3, #0]
   1350e:	2b01      	cmp	r3, #1
   13510:	d00a      	beq.n	13528 <system_apb_clock_set_mask+0x2c>
   13512:	2b02      	cmp	r3, #2
   13514:	d00f      	beq.n	13536 <system_apb_clock_set_mask+0x3a>
   13516:	2b00      	cmp	r3, #0
   13518:	d114      	bne.n	13544 <system_apb_clock_set_mask+0x48>
			PM->APBAMASK.reg |= mask;
   1351a:	4b0e      	ldr	r3, [pc, #56]	; (13554 <system_apb_clock_set_mask+0x58>)
   1351c:	4a0d      	ldr	r2, [pc, #52]	; (13554 <system_apb_clock_set_mask+0x58>)
   1351e:	6991      	ldr	r1, [r2, #24]
   13520:	683a      	ldr	r2, [r7, #0]
   13522:	430a      	orrs	r2, r1
   13524:	619a      	str	r2, [r3, #24]
			break;
   13526:	e00f      	b.n	13548 <system_apb_clock_set_mask+0x4c>
			PM->APBBMASK.reg |= mask;
   13528:	4b0a      	ldr	r3, [pc, #40]	; (13554 <system_apb_clock_set_mask+0x58>)
   1352a:	4a0a      	ldr	r2, [pc, #40]	; (13554 <system_apb_clock_set_mask+0x58>)
   1352c:	69d1      	ldr	r1, [r2, #28]
   1352e:	683a      	ldr	r2, [r7, #0]
   13530:	430a      	orrs	r2, r1
   13532:	61da      	str	r2, [r3, #28]
			break;
   13534:	e008      	b.n	13548 <system_apb_clock_set_mask+0x4c>
			PM->APBCMASK.reg |= mask;
   13536:	4b07      	ldr	r3, [pc, #28]	; (13554 <system_apb_clock_set_mask+0x58>)
   13538:	4a06      	ldr	r2, [pc, #24]	; (13554 <system_apb_clock_set_mask+0x58>)
   1353a:	6a11      	ldr	r1, [r2, #32]
   1353c:	683a      	ldr	r2, [r7, #0]
   1353e:	430a      	orrs	r2, r1
   13540:	621a      	str	r2, [r3, #32]
			break;
   13542:	e001      	b.n	13548 <system_apb_clock_set_mask+0x4c>
			return STATUS_ERR_INVALID_ARG;
   13544:	2317      	movs	r3, #23
   13546:	e000      	b.n	1354a <system_apb_clock_set_mask+0x4e>
	return STATUS_OK;
   13548:	2300      	movs	r3, #0
}
   1354a:	0018      	movs	r0, r3
   1354c:	46bd      	mov	sp, r7
   1354e:	b002      	add	sp, #8
   13550:	bd80      	pop	{r7, pc}
   13552:	46c0      	nop			; (mov r8, r8)
   13554:	40000400 	.word	0x40000400

00013558 <system_pinmux_get_config_defaults>:
{
   13558:	b580      	push	{r7, lr}
   1355a:	b082      	sub	sp, #8
   1355c:	af00      	add	r7, sp, #0
   1355e:	6078      	str	r0, [r7, #4]
	config->mux_position = SYSTEM_PINMUX_GPIO;
   13560:	687b      	ldr	r3, [r7, #4]
   13562:	2280      	movs	r2, #128	; 0x80
   13564:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
   13566:	687b      	ldr	r3, [r7, #4]
   13568:	2200      	movs	r2, #0
   1356a:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
   1356c:	687b      	ldr	r3, [r7, #4]
   1356e:	2201      	movs	r2, #1
   13570:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
   13572:	687b      	ldr	r3, [r7, #4]
   13574:	2200      	movs	r2, #0
   13576:	70da      	strb	r2, [r3, #3]
}
   13578:	46c0      	nop			; (mov r8, r8)
   1357a:	46bd      	mov	sp, r7
   1357c:	b002      	add	sp, #8
   1357e:	bd80      	pop	{r7, pc}

00013580 <system_interrupt_enable>:
{
   13580:	b580      	push	{r7, lr}
   13582:	b082      	sub	sp, #8
   13584:	af00      	add	r7, sp, #0
   13586:	0002      	movs	r2, r0
   13588:	1dfb      	adds	r3, r7, #7
   1358a:	701a      	strb	r2, [r3, #0]
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
   1358c:	4b06      	ldr	r3, [pc, #24]	; (135a8 <system_interrupt_enable+0x28>)
   1358e:	1dfa      	adds	r2, r7, #7
   13590:	7812      	ldrb	r2, [r2, #0]
   13592:	0011      	movs	r1, r2
   13594:	221f      	movs	r2, #31
   13596:	400a      	ands	r2, r1
   13598:	2101      	movs	r1, #1
   1359a:	4091      	lsls	r1, r2
   1359c:	000a      	movs	r2, r1
   1359e:	601a      	str	r2, [r3, #0]
}
   135a0:	46c0      	nop			; (mov r8, r8)
   135a2:	46bd      	mov	sp, r7
   135a4:	b002      	add	sp, #8
   135a6:	bd80      	pop	{r7, pc}
   135a8:	e000e100 	.word	0xe000e100

000135ac <_extint_get_eic_from_channel>:
{
   135ac:	b580      	push	{r7, lr}
   135ae:	b084      	sub	sp, #16
   135b0:	af00      	add	r7, sp, #0
   135b2:	0002      	movs	r2, r0
   135b4:	1dfb      	adds	r3, r7, #7
   135b6:	701a      	strb	r2, [r3, #0]
	uint8_t eic_index = (channel / 32);
   135b8:	230f      	movs	r3, #15
   135ba:	18fb      	adds	r3, r7, r3
   135bc:	1dfa      	adds	r2, r7, #7
   135be:	7812      	ldrb	r2, [r2, #0]
   135c0:	0952      	lsrs	r2, r2, #5
   135c2:	701a      	strb	r2, [r3, #0]
	if (eic_index < EIC_INST_NUM) {
   135c4:	230f      	movs	r3, #15
   135c6:	18fb      	adds	r3, r7, r3
   135c8:	781b      	ldrb	r3, [r3, #0]
   135ca:	2b00      	cmp	r3, #0
   135cc:	d10c      	bne.n	135e8 <_extint_get_eic_from_channel+0x3c>
		Eic *const eics[EIC_INST_NUM] = EIC_INSTS;
   135ce:	4b09      	ldr	r3, [pc, #36]	; (135f4 <_extint_get_eic_from_channel+0x48>)
   135d0:	60bb      	str	r3, [r7, #8]
		return eics[eic_index];
   135d2:	230f      	movs	r3, #15
   135d4:	18fb      	adds	r3, r7, r3
   135d6:	781b      	ldrb	r3, [r3, #0]
   135d8:	009b      	lsls	r3, r3, #2
   135da:	2210      	movs	r2, #16
   135dc:	4694      	mov	ip, r2
   135de:	44bc      	add	ip, r7
   135e0:	4463      	add	r3, ip
   135e2:	3b08      	subs	r3, #8
   135e4:	681b      	ldr	r3, [r3, #0]
   135e6:	e000      	b.n	135ea <_extint_get_eic_from_channel+0x3e>
		return NULL;
   135e8:	2300      	movs	r3, #0
}
   135ea:	0018      	movs	r0, r3
   135ec:	46bd      	mov	sp, r7
   135ee:	b004      	add	sp, #16
   135f0:	bd80      	pop	{r7, pc}
   135f2:	46c0      	nop			; (mov r8, r8)
   135f4:	40001800 	.word	0x40001800

000135f8 <extint_is_syncing>:
 *
 * \retval true  If the module synchronization is ongoing
 * \retval false If the module has completed synchronization
 */
static inline bool extint_is_syncing(void)
{
   135f8:	b580      	push	{r7, lr}
   135fa:	b082      	sub	sp, #8
   135fc:	af00      	add	r7, sp, #0
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;
   135fe:	4b0f      	ldr	r3, [pc, #60]	; (1363c <extint_is_syncing+0x44>)
   13600:	603b      	str	r3, [r7, #0]

	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
   13602:	2300      	movs	r3, #0
   13604:	607b      	str	r3, [r7, #4]
   13606:	e011      	b.n	1362c <extint_is_syncing+0x34>
		if (eics[i]->STATUS.reg & EIC_STATUS_SYNCBUSY) {
   13608:	687b      	ldr	r3, [r7, #4]
   1360a:	009b      	lsls	r3, r3, #2
   1360c:	2208      	movs	r2, #8
   1360e:	4694      	mov	ip, r2
   13610:	44bc      	add	ip, r7
   13612:	4463      	add	r3, ip
   13614:	3b08      	subs	r3, #8
   13616:	681b      	ldr	r3, [r3, #0]
   13618:	785b      	ldrb	r3, [r3, #1]
   1361a:	b2db      	uxtb	r3, r3
   1361c:	b25b      	sxtb	r3, r3
   1361e:	2b00      	cmp	r3, #0
   13620:	da01      	bge.n	13626 <extint_is_syncing+0x2e>
			return true;
   13622:	2301      	movs	r3, #1
   13624:	e006      	b.n	13634 <extint_is_syncing+0x3c>
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
   13626:	687b      	ldr	r3, [r7, #4]
   13628:	3301      	adds	r3, #1
   1362a:	607b      	str	r3, [r7, #4]
   1362c:	687b      	ldr	r3, [r7, #4]
   1362e:	2b00      	cmp	r3, #0
   13630:	d0ea      	beq.n	13608 <extint_is_syncing+0x10>
		}
	}
	return false;
   13632:	2300      	movs	r3, #0
}
   13634:	0018      	movs	r0, r3
   13636:	46bd      	mov	sp, r7
   13638:	b002      	add	sp, #8
   1363a:	bd80      	pop	{r7, pc}
   1363c:	40001800 	.word	0x40001800

00013640 <_system_extint_init>:
 * \note When SYSTEM module is used, this function will be invoked by
 * \ref system_init() automatically if the module is included.
 */
void _system_extint_init(void);
void _system_extint_init(void)
{
   13640:	b580      	push	{r7, lr}
   13642:	b084      	sub	sp, #16
   13644:	af00      	add	r7, sp, #0
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;
   13646:	4b2d      	ldr	r3, [pc, #180]	; (136fc <_system_extint_init+0xbc>)
   13648:	607b      	str	r3, [r7, #4]

	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, PM_APBAMASK_EIC);
   1364a:	2140      	movs	r1, #64	; 0x40
   1364c:	2000      	movs	r0, #0
   1364e:	4b2c      	ldr	r3, [pc, #176]	; (13700 <_system_extint_init+0xc0>)
   13650:	4798      	blx	r3

	/* Configure the generic clock for the module and enable it */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
   13652:	003b      	movs	r3, r7
   13654:	0018      	movs	r0, r3
   13656:	4b2b      	ldr	r3, [pc, #172]	; (13704 <_system_extint_init+0xc4>)
   13658:	4798      	blx	r3
	gclk_chan_conf.source_generator = EXTINT_CLOCK_SOURCE;
   1365a:	003b      	movs	r3, r7
   1365c:	2200      	movs	r2, #0
   1365e:	701a      	strb	r2, [r3, #0]
	system_gclk_chan_set_config(EIC_GCLK_ID, &gclk_chan_conf);
   13660:	003b      	movs	r3, r7
   13662:	0019      	movs	r1, r3
   13664:	2005      	movs	r0, #5
   13666:	4b28      	ldr	r3, [pc, #160]	; (13708 <_system_extint_init+0xc8>)
   13668:	4798      	blx	r3

	/* Enable the clock anyway, since when needed it will be requested
	 * by External Interrupt driver */
	system_gclk_chan_enable(EIC_GCLK_ID);
   1366a:	2005      	movs	r0, #5
   1366c:	4b27      	ldr	r3, [pc, #156]	; (1370c <_system_extint_init+0xcc>)
   1366e:	4798      	blx	r3

	/* Reset all EIC hardware modules. */
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
   13670:	2300      	movs	r3, #0
   13672:	60fb      	str	r3, [r7, #12]
   13674:	e018      	b.n	136a8 <_system_extint_init+0x68>
		eics[i]->CTRL.reg |= EIC_CTRL_SWRST;
   13676:	68fb      	ldr	r3, [r7, #12]
   13678:	009b      	lsls	r3, r3, #2
   1367a:	2210      	movs	r2, #16
   1367c:	4694      	mov	ip, r2
   1367e:	44bc      	add	ip, r7
   13680:	4463      	add	r3, ip
   13682:	3b0c      	subs	r3, #12
   13684:	681a      	ldr	r2, [r3, #0]
   13686:	68fb      	ldr	r3, [r7, #12]
   13688:	009b      	lsls	r3, r3, #2
   1368a:	2110      	movs	r1, #16
   1368c:	468c      	mov	ip, r1
   1368e:	44bc      	add	ip, r7
   13690:	4463      	add	r3, ip
   13692:	3b0c      	subs	r3, #12
   13694:	681b      	ldr	r3, [r3, #0]
   13696:	781b      	ldrb	r3, [r3, #0]
   13698:	b2db      	uxtb	r3, r3
   1369a:	2101      	movs	r1, #1
   1369c:	430b      	orrs	r3, r1
   1369e:	b2db      	uxtb	r3, r3
   136a0:	7013      	strb	r3, [r2, #0]
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
   136a2:	68fb      	ldr	r3, [r7, #12]
   136a4:	3301      	adds	r3, #1
   136a6:	60fb      	str	r3, [r7, #12]
   136a8:	68fb      	ldr	r3, [r7, #12]
   136aa:	2b00      	cmp	r3, #0
   136ac:	d0e3      	beq.n	13676 <_system_extint_init+0x36>
	}

	while (extint_is_syncing()) {
   136ae:	46c0      	nop			; (mov r8, r8)
   136b0:	4b17      	ldr	r3, [pc, #92]	; (13710 <_system_extint_init+0xd0>)
   136b2:	4798      	blx	r3
   136b4:	1e03      	subs	r3, r0, #0
   136b6:	d1fb      	bne.n	136b0 <_system_extint_init+0x70>
	}

	/* Reset the software module */
#if EXTINT_CALLBACK_MODE == true
	/* Clear callback registration table */
	for (uint8_t j = 0; j < EIC_NUMBER_OF_INTERRUPTS; j++) {
   136b8:	230b      	movs	r3, #11
   136ba:	18fb      	adds	r3, r7, r3
   136bc:	2200      	movs	r2, #0
   136be:	701a      	strb	r2, [r3, #0]
   136c0:	e00d      	b.n	136de <_system_extint_init+0x9e>
		_extint_dev.callbacks[j] = NULL;
   136c2:	230b      	movs	r3, #11
   136c4:	18fb      	adds	r3, r7, r3
   136c6:	781a      	ldrb	r2, [r3, #0]
   136c8:	4b12      	ldr	r3, [pc, #72]	; (13714 <_system_extint_init+0xd4>)
   136ca:	0092      	lsls	r2, r2, #2
   136cc:	2100      	movs	r1, #0
   136ce:	50d1      	str	r1, [r2, r3]
	for (uint8_t j = 0; j < EIC_NUMBER_OF_INTERRUPTS; j++) {
   136d0:	230b      	movs	r3, #11
   136d2:	18fb      	adds	r3, r7, r3
   136d4:	781a      	ldrb	r2, [r3, #0]
   136d6:	230b      	movs	r3, #11
   136d8:	18fb      	adds	r3, r7, r3
   136da:	3201      	adds	r2, #1
   136dc:	701a      	strb	r2, [r3, #0]
   136de:	230b      	movs	r3, #11
   136e0:	18fb      	adds	r3, r7, r3
   136e2:	781b      	ldrb	r3, [r3, #0]
   136e4:	2b0f      	cmp	r3, #15
   136e6:	d9ec      	bls.n	136c2 <_system_extint_init+0x82>
	}
	system_interrupt_enable(SYSTEM_INTERRUPT_MODULE_EIC);
   136e8:	2004      	movs	r0, #4
   136ea:	4b0b      	ldr	r3, [pc, #44]	; (13718 <_system_extint_init+0xd8>)
   136ec:	4798      	blx	r3
#endif

	/* Enables the driver for further use */
	_extint_enable();
   136ee:	4b0b      	ldr	r3, [pc, #44]	; (1371c <_system_extint_init+0xdc>)
   136f0:	4798      	blx	r3
}
   136f2:	46c0      	nop			; (mov r8, r8)
   136f4:	46bd      	mov	sp, r7
   136f6:	b004      	add	sp, #16
   136f8:	bd80      	pop	{r7, pc}
   136fa:	46c0      	nop			; (mov r8, r8)
   136fc:	40001800 	.word	0x40001800
   13700:	000134fd 	.word	0x000134fd
   13704:	000134e5 	.word	0x000134e5
   13708:	00016d6d 	.word	0x00016d6d
   1370c:	00016db1 	.word	0x00016db1
   13710:	000135f9 	.word	0x000135f9
   13714:	200055a4 	.word	0x200055a4
   13718:	00013581 	.word	0x00013581
   1371c:	00013721 	.word	0x00013721

00013720 <_extint_enable>:
 *
 * Enables EIC modules.
 * Registered callback list will not be affected if callback mode is used.
 */
void _extint_enable(void)
{
   13720:	b580      	push	{r7, lr}
   13722:	b082      	sub	sp, #8
   13724:	af00      	add	r7, sp, #0
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;
   13726:	4b15      	ldr	r3, [pc, #84]	; (1377c <_extint_enable+0x5c>)
   13728:	603b      	str	r3, [r7, #0]

	/* Enable all EIC hardware modules. */
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
   1372a:	2300      	movs	r3, #0
   1372c:	607b      	str	r3, [r7, #4]
   1372e:	e018      	b.n	13762 <_extint_enable+0x42>
		eics[i]->CTRL.reg |= EIC_CTRL_ENABLE;
   13730:	687b      	ldr	r3, [r7, #4]
   13732:	009b      	lsls	r3, r3, #2
   13734:	2208      	movs	r2, #8
   13736:	4694      	mov	ip, r2
   13738:	44bc      	add	ip, r7
   1373a:	4463      	add	r3, ip
   1373c:	3b08      	subs	r3, #8
   1373e:	681a      	ldr	r2, [r3, #0]
   13740:	687b      	ldr	r3, [r7, #4]
   13742:	009b      	lsls	r3, r3, #2
   13744:	2108      	movs	r1, #8
   13746:	468c      	mov	ip, r1
   13748:	44bc      	add	ip, r7
   1374a:	4463      	add	r3, ip
   1374c:	3b08      	subs	r3, #8
   1374e:	681b      	ldr	r3, [r3, #0]
   13750:	781b      	ldrb	r3, [r3, #0]
   13752:	b2db      	uxtb	r3, r3
   13754:	2102      	movs	r1, #2
   13756:	430b      	orrs	r3, r1
   13758:	b2db      	uxtb	r3, r3
   1375a:	7013      	strb	r3, [r2, #0]
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
   1375c:	687b      	ldr	r3, [r7, #4]
   1375e:	3301      	adds	r3, #1
   13760:	607b      	str	r3, [r7, #4]
   13762:	687b      	ldr	r3, [r7, #4]
   13764:	2b00      	cmp	r3, #0
   13766:	d0e3      	beq.n	13730 <_extint_enable+0x10>
	}

	while (extint_is_syncing()) {
   13768:	46c0      	nop			; (mov r8, r8)
   1376a:	4b05      	ldr	r3, [pc, #20]	; (13780 <_extint_enable+0x60>)
   1376c:	4798      	blx	r3
   1376e:	1e03      	subs	r3, r0, #0
   13770:	d1fb      	bne.n	1376a <_extint_enable+0x4a>
		/* Wait for all hardware modules to complete synchronization */
	}
}
   13772:	46c0      	nop			; (mov r8, r8)
   13774:	46bd      	mov	sp, r7
   13776:	b002      	add	sp, #8
   13778:	bd80      	pop	{r7, pc}
   1377a:	46c0      	nop			; (mov r8, r8)
   1377c:	40001800 	.word	0x40001800
   13780:	000135f9 	.word	0x000135f9

00013784 <extint_chan_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
void extint_chan_get_config_defaults(
		struct extint_chan_conf *const config)
{
   13784:	b580      	push	{r7, lr}
   13786:	b082      	sub	sp, #8
   13788:	af00      	add	r7, sp, #0
   1378a:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->gpio_pin            = 0;
   1378c:	687b      	ldr	r3, [r7, #4]
   1378e:	2200      	movs	r2, #0
   13790:	601a      	str	r2, [r3, #0]
	config->gpio_pin_mux        = 0;
   13792:	687b      	ldr	r3, [r7, #4]
   13794:	2200      	movs	r2, #0
   13796:	605a      	str	r2, [r3, #4]
	config->gpio_pin_pull       = EXTINT_PULL_UP;
   13798:	687b      	ldr	r3, [r7, #4]
   1379a:	2201      	movs	r2, #1
   1379c:	721a      	strb	r2, [r3, #8]
	config->wake_if_sleeping    = true;
   1379e:	687b      	ldr	r3, [r7, #4]
   137a0:	2201      	movs	r2, #1
   137a2:	725a      	strb	r2, [r3, #9]
	config->filter_input_signal = false;
   137a4:	687b      	ldr	r3, [r7, #4]
   137a6:	2200      	movs	r2, #0
   137a8:	729a      	strb	r2, [r3, #10]
	config->detection_criteria  = EXTINT_DETECT_FALLING;
   137aa:	687b      	ldr	r3, [r7, #4]
   137ac:	2202      	movs	r2, #2
   137ae:	72da      	strb	r2, [r3, #11]
}
   137b0:	46c0      	nop			; (mov r8, r8)
   137b2:	46bd      	mov	sp, r7
   137b4:	b002      	add	sp, #8
   137b6:	bd80      	pop	{r7, pc}

000137b8 <extint_chan_set_config>:

 */
void extint_chan_set_config(
		const uint8_t channel,
		const struct extint_chan_conf *const config)
{
   137b8:	b580      	push	{r7, lr}
   137ba:	b086      	sub	sp, #24
   137bc:	af00      	add	r7, sp, #0
   137be:	0002      	movs	r2, r0
   137c0:	6039      	str	r1, [r7, #0]
   137c2:	1dfb      	adds	r3, r7, #7
   137c4:	701a      	strb	r2, [r3, #0]
	Assert(!(!system_gclk_gen_is_enabled(EXTINT_CLOCK_SOURCE) &&
		_extint_is_gclk_required(config->filter_input_signal,
			config->detection_criteria)));

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);
   137c6:	2308      	movs	r3, #8
   137c8:	18fb      	adds	r3, r7, r3
   137ca:	0018      	movs	r0, r3
   137cc:	4b36      	ldr	r3, [pc, #216]	; (138a8 <extint_chan_set_config+0xf0>)
   137ce:	4798      	blx	r3

	pinmux_config.mux_position = config->gpio_pin_mux;
   137d0:	683b      	ldr	r3, [r7, #0]
   137d2:	685b      	ldr	r3, [r3, #4]
   137d4:	b2da      	uxtb	r2, r3
   137d6:	2308      	movs	r3, #8
   137d8:	18fb      	adds	r3, r7, r3
   137da:	701a      	strb	r2, [r3, #0]
	pinmux_config.direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
   137dc:	2308      	movs	r3, #8
   137de:	18fb      	adds	r3, r7, r3
   137e0:	2200      	movs	r2, #0
   137e2:	705a      	strb	r2, [r3, #1]
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->gpio_pin_pull;
   137e4:	683b      	ldr	r3, [r7, #0]
   137e6:	7a1a      	ldrb	r2, [r3, #8]
   137e8:	2308      	movs	r3, #8
   137ea:	18fb      	adds	r3, r7, r3
   137ec:	709a      	strb	r2, [r3, #2]
	system_pinmux_pin_set_config(config->gpio_pin, &pinmux_config);
   137ee:	683b      	ldr	r3, [r7, #0]
   137f0:	681b      	ldr	r3, [r3, #0]
   137f2:	b2db      	uxtb	r3, r3
   137f4:	2208      	movs	r2, #8
   137f6:	18ba      	adds	r2, r7, r2
   137f8:	0011      	movs	r1, r2
   137fa:	0018      	movs	r0, r3
   137fc:	4b2b      	ldr	r3, [pc, #172]	; (138ac <extint_chan_set_config+0xf4>)
   137fe:	4798      	blx	r3

	/* Get a pointer to the module hardware instance */
	Eic *const EIC_module = _extint_get_eic_from_channel(channel);
   13800:	1dfb      	adds	r3, r7, #7
   13802:	781b      	ldrb	r3, [r3, #0]
   13804:	0018      	movs	r0, r3
   13806:	4b2a      	ldr	r3, [pc, #168]	; (138b0 <extint_chan_set_config+0xf8>)
   13808:	4798      	blx	r3
   1380a:	0003      	movs	r3, r0
   1380c:	613b      	str	r3, [r7, #16]

	uint32_t config_pos = (4 * (channel % 8));
   1380e:	1dfb      	adds	r3, r7, #7
   13810:	781b      	ldrb	r3, [r3, #0]
   13812:	2207      	movs	r2, #7
   13814:	4013      	ands	r3, r2
   13816:	009b      	lsls	r3, r3, #2
   13818:	60fb      	str	r3, [r7, #12]
	uint32_t new_config;

	/* Determine the channel's new edge detection configuration */
	new_config = (config->detection_criteria << EIC_CONFIG_SENSE0_Pos);
   1381a:	683b      	ldr	r3, [r7, #0]
   1381c:	7adb      	ldrb	r3, [r3, #11]
   1381e:	617b      	str	r3, [r7, #20]

	/* Enable the hardware signal filter if requested in the config */
	if (config->filter_input_signal) {
   13820:	683b      	ldr	r3, [r7, #0]
   13822:	7a9b      	ldrb	r3, [r3, #10]
   13824:	2b00      	cmp	r3, #0
   13826:	d003      	beq.n	13830 <extint_chan_set_config+0x78>
		new_config |= EIC_CONFIG_FILTEN0;
   13828:	697b      	ldr	r3, [r7, #20]
   1382a:	2208      	movs	r2, #8
   1382c:	4313      	orrs	r3, r2
   1382e:	617b      	str	r3, [r7, #20]
	}

	/* Clear the existing and set the new channel configuration */
	EIC_module->CONFIG[channel / 8].reg
   13830:	1dfb      	adds	r3, r7, #7
   13832:	781b      	ldrb	r3, [r3, #0]
   13834:	08db      	lsrs	r3, r3, #3
   13836:	b2db      	uxtb	r3, r3
   13838:	0018      	movs	r0, r3
		= (EIC_module->CONFIG[channel / 8].reg &
   1383a:	1dfb      	adds	r3, r7, #7
   1383c:	781b      	ldrb	r3, [r3, #0]
   1383e:	08db      	lsrs	r3, r3, #3
   13840:	b2db      	uxtb	r3, r3
   13842:	001a      	movs	r2, r3
   13844:	693b      	ldr	r3, [r7, #16]
   13846:	3206      	adds	r2, #6
   13848:	0092      	lsls	r2, r2, #2
   1384a:	58d3      	ldr	r3, [r2, r3]
			~((EIC_CONFIG_SENSE0_Msk | EIC_CONFIG_FILTEN0) << config_pos)) |
   1384c:	210f      	movs	r1, #15
   1384e:	68fa      	ldr	r2, [r7, #12]
   13850:	4091      	lsls	r1, r2
   13852:	000a      	movs	r2, r1
   13854:	43d2      	mvns	r2, r2
		= (EIC_module->CONFIG[channel / 8].reg &
   13856:	401a      	ands	r2, r3
			(new_config << config_pos);
   13858:	6979      	ldr	r1, [r7, #20]
   1385a:	68fb      	ldr	r3, [r7, #12]
   1385c:	4099      	lsls	r1, r3
   1385e:	000b      	movs	r3, r1
			~((EIC_CONFIG_SENSE0_Msk | EIC_CONFIG_FILTEN0) << config_pos)) |
   13860:	431a      	orrs	r2, r3
   13862:	0011      	movs	r1, r2
		= (EIC_module->CONFIG[channel / 8].reg &
   13864:	693b      	ldr	r3, [r7, #16]
   13866:	1d82      	adds	r2, r0, #6
   13868:	0092      	lsls	r2, r2, #2
   1386a:	50d1      	str	r1, [r2, r3]

	/* Set the channel's new wake up mode setting */
	if (config->wake_if_sleeping) {
   1386c:	683b      	ldr	r3, [r7, #0]
   1386e:	7a5b      	ldrb	r3, [r3, #9]
   13870:	2b00      	cmp	r3, #0
   13872:	d00a      	beq.n	1388a <extint_chan_set_config+0xd2>
		EIC_module->WAKEUP.reg |=  (1UL << channel);
   13874:	693b      	ldr	r3, [r7, #16]
   13876:	695a      	ldr	r2, [r3, #20]
   13878:	1dfb      	adds	r3, r7, #7
   1387a:	781b      	ldrb	r3, [r3, #0]
   1387c:	2101      	movs	r1, #1
   1387e:	4099      	lsls	r1, r3
   13880:	000b      	movs	r3, r1
   13882:	431a      	orrs	r2, r3
   13884:	693b      	ldr	r3, [r7, #16]
   13886:	615a      	str	r2, [r3, #20]
	} else {
		EIC_module->WAKEUP.reg &= ~(1UL << channel);
	}
}
   13888:	e00a      	b.n	138a0 <extint_chan_set_config+0xe8>
		EIC_module->WAKEUP.reg &= ~(1UL << channel);
   1388a:	693b      	ldr	r3, [r7, #16]
   1388c:	695b      	ldr	r3, [r3, #20]
   1388e:	1dfa      	adds	r2, r7, #7
   13890:	7812      	ldrb	r2, [r2, #0]
   13892:	2101      	movs	r1, #1
   13894:	4091      	lsls	r1, r2
   13896:	000a      	movs	r2, r1
   13898:	43d2      	mvns	r2, r2
   1389a:	401a      	ands	r2, r3
   1389c:	693b      	ldr	r3, [r7, #16]
   1389e:	615a      	str	r2, [r3, #20]
}
   138a0:	46c0      	nop			; (mov r8, r8)
   138a2:	46bd      	mov	sp, r7
   138a4:	b006      	add	sp, #24
   138a6:	bd80      	pop	{r7, pc}
   138a8:	00013559 	.word	0x00013559
   138ac:	000170cd 	.word	0x000170cd
   138b0:	000135ad 	.word	0x000135ad

000138b4 <system_pinmux_get_config_defaults>:
{
   138b4:	b580      	push	{r7, lr}
   138b6:	b082      	sub	sp, #8
   138b8:	af00      	add	r7, sp, #0
   138ba:	6078      	str	r0, [r7, #4]
	config->mux_position = SYSTEM_PINMUX_GPIO;
   138bc:	687b      	ldr	r3, [r7, #4]
   138be:	2280      	movs	r2, #128	; 0x80
   138c0:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
   138c2:	687b      	ldr	r3, [r7, #4]
   138c4:	2200      	movs	r2, #0
   138c6:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
   138c8:	687b      	ldr	r3, [r7, #4]
   138ca:	2201      	movs	r2, #1
   138cc:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
   138ce:	687b      	ldr	r3, [r7, #4]
   138d0:	2200      	movs	r2, #0
   138d2:	70da      	strb	r2, [r3, #3]
}
   138d4:	46c0      	nop			; (mov r8, r8)
   138d6:	46bd      	mov	sp, r7
   138d8:	b002      	add	sp, #8
   138da:	bd80      	pop	{r7, pc}

000138dc <port_pin_set_config>:
 *  \param[in] config    Configuration settings for the pin
 */
void port_pin_set_config(
		const uint8_t gpio_pin,
		const struct port_config *const config)
{
   138dc:	b580      	push	{r7, lr}
   138de:	b084      	sub	sp, #16
   138e0:	af00      	add	r7, sp, #0
   138e2:	0002      	movs	r2, r0
   138e4:	6039      	str	r1, [r7, #0]
   138e6:	1dfb      	adds	r3, r7, #7
   138e8:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(config);

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);
   138ea:	230c      	movs	r3, #12
   138ec:	18fb      	adds	r3, r7, r3
   138ee:	0018      	movs	r0, r3
   138f0:	4b10      	ldr	r3, [pc, #64]	; (13934 <port_pin_set_config+0x58>)
   138f2:	4798      	blx	r3

	pinmux_config.mux_position = SYSTEM_PINMUX_GPIO;
   138f4:	230c      	movs	r3, #12
   138f6:	18fb      	adds	r3, r7, r3
   138f8:	2280      	movs	r2, #128	; 0x80
   138fa:	701a      	strb	r2, [r3, #0]
	pinmux_config.direction    = (enum system_pinmux_pin_dir)config->direction;
   138fc:	683b      	ldr	r3, [r7, #0]
   138fe:	781a      	ldrb	r2, [r3, #0]
   13900:	230c      	movs	r3, #12
   13902:	18fb      	adds	r3, r7, r3
   13904:	705a      	strb	r2, [r3, #1]
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->input_pull;
   13906:	683b      	ldr	r3, [r7, #0]
   13908:	785a      	ldrb	r2, [r3, #1]
   1390a:	230c      	movs	r3, #12
   1390c:	18fb      	adds	r3, r7, r3
   1390e:	709a      	strb	r2, [r3, #2]
	pinmux_config.powersave    = config->powersave;
   13910:	683b      	ldr	r3, [r7, #0]
   13912:	789a      	ldrb	r2, [r3, #2]
   13914:	230c      	movs	r3, #12
   13916:	18fb      	adds	r3, r7, r3
   13918:	70da      	strb	r2, [r3, #3]

	system_pinmux_pin_set_config(gpio_pin, &pinmux_config);
   1391a:	230c      	movs	r3, #12
   1391c:	18fa      	adds	r2, r7, r3
   1391e:	1dfb      	adds	r3, r7, #7
   13920:	781b      	ldrb	r3, [r3, #0]
   13922:	0011      	movs	r1, r2
   13924:	0018      	movs	r0, r3
   13926:	4b04      	ldr	r3, [pc, #16]	; (13938 <port_pin_set_config+0x5c>)
   13928:	4798      	blx	r3
}
   1392a:	46c0      	nop			; (mov r8, r8)
   1392c:	46bd      	mov	sp, r7
   1392e:	b004      	add	sp, #16
   13930:	bd80      	pop	{r7, pc}
   13932:	46c0      	nop			; (mov r8, r8)
   13934:	000138b5 	.word	0x000138b5
   13938:	000170cd 	.word	0x000170cd

0001393c <system_gclk_chan_get_config_defaults>:
{
   1393c:	b580      	push	{r7, lr}
   1393e:	b082      	sub	sp, #8
   13940:	af00      	add	r7, sp, #0
   13942:	6078      	str	r0, [r7, #4]
	config->source_generator = GCLK_GENERATOR_0;
   13944:	687b      	ldr	r3, [r7, #4]
   13946:	2200      	movs	r2, #0
   13948:	701a      	strb	r2, [r3, #0]
}
   1394a:	46c0      	nop			; (mov r8, r8)
   1394c:	46bd      	mov	sp, r7
   1394e:	b002      	add	sp, #8
   13950:	bd80      	pop	{r7, pc}
	...

00013954 <system_apb_clock_set_mask>:
{
   13954:	b580      	push	{r7, lr}
   13956:	b082      	sub	sp, #8
   13958:	af00      	add	r7, sp, #0
   1395a:	0002      	movs	r2, r0
   1395c:	6039      	str	r1, [r7, #0]
   1395e:	1dfb      	adds	r3, r7, #7
   13960:	701a      	strb	r2, [r3, #0]
	switch (bus) {
   13962:	1dfb      	adds	r3, r7, #7
   13964:	781b      	ldrb	r3, [r3, #0]
   13966:	2b01      	cmp	r3, #1
   13968:	d00a      	beq.n	13980 <system_apb_clock_set_mask+0x2c>
   1396a:	2b02      	cmp	r3, #2
   1396c:	d00f      	beq.n	1398e <system_apb_clock_set_mask+0x3a>
   1396e:	2b00      	cmp	r3, #0
   13970:	d114      	bne.n	1399c <system_apb_clock_set_mask+0x48>
			PM->APBAMASK.reg |= mask;
   13972:	4b0e      	ldr	r3, [pc, #56]	; (139ac <system_apb_clock_set_mask+0x58>)
   13974:	4a0d      	ldr	r2, [pc, #52]	; (139ac <system_apb_clock_set_mask+0x58>)
   13976:	6991      	ldr	r1, [r2, #24]
   13978:	683a      	ldr	r2, [r7, #0]
   1397a:	430a      	orrs	r2, r1
   1397c:	619a      	str	r2, [r3, #24]
			break;
   1397e:	e00f      	b.n	139a0 <system_apb_clock_set_mask+0x4c>
			PM->APBBMASK.reg |= mask;
   13980:	4b0a      	ldr	r3, [pc, #40]	; (139ac <system_apb_clock_set_mask+0x58>)
   13982:	4a0a      	ldr	r2, [pc, #40]	; (139ac <system_apb_clock_set_mask+0x58>)
   13984:	69d1      	ldr	r1, [r2, #28]
   13986:	683a      	ldr	r2, [r7, #0]
   13988:	430a      	orrs	r2, r1
   1398a:	61da      	str	r2, [r3, #28]
			break;
   1398c:	e008      	b.n	139a0 <system_apb_clock_set_mask+0x4c>
			PM->APBCMASK.reg |= mask;
   1398e:	4b07      	ldr	r3, [pc, #28]	; (139ac <system_apb_clock_set_mask+0x58>)
   13990:	4a06      	ldr	r2, [pc, #24]	; (139ac <system_apb_clock_set_mask+0x58>)
   13992:	6a11      	ldr	r1, [r2, #32]
   13994:	683a      	ldr	r2, [r7, #0]
   13996:	430a      	orrs	r2, r1
   13998:	621a      	str	r2, [r3, #32]
			break;
   1399a:	e001      	b.n	139a0 <system_apb_clock_set_mask+0x4c>
			return STATUS_ERR_INVALID_ARG;
   1399c:	2317      	movs	r3, #23
   1399e:	e000      	b.n	139a2 <system_apb_clock_set_mask+0x4e>
	return STATUS_OK;
   139a0:	2300      	movs	r3, #0
}
   139a2:	0018      	movs	r0, r3
   139a4:	46bd      	mov	sp, r7
   139a6:	b002      	add	sp, #8
   139a8:	bd80      	pop	{r7, pc}
   139aa:	46c0      	nop			; (mov r8, r8)
   139ac:	40000400 	.word	0x40000400

000139b0 <system_interrupt_enable>:
{
   139b0:	b580      	push	{r7, lr}
   139b2:	b082      	sub	sp, #8
   139b4:	af00      	add	r7, sp, #0
   139b6:	0002      	movs	r2, r0
   139b8:	1dfb      	adds	r3, r7, #7
   139ba:	701a      	strb	r2, [r3, #0]
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
   139bc:	4b06      	ldr	r3, [pc, #24]	; (139d8 <system_interrupt_enable+0x28>)
   139be:	1dfa      	adds	r2, r7, #7
   139c0:	7812      	ldrb	r2, [r2, #0]
   139c2:	0011      	movs	r1, r2
   139c4:	221f      	movs	r2, #31
   139c6:	400a      	ands	r2, r1
   139c8:	2101      	movs	r1, #1
   139ca:	4091      	lsls	r1, r2
   139cc:	000a      	movs	r2, r1
   139ce:	601a      	str	r2, [r3, #0]
}
   139d0:	46c0      	nop			; (mov r8, r8)
   139d2:	46bd      	mov	sp, r7
   139d4:	b002      	add	sp, #8
   139d6:	bd80      	pop	{r7, pc}
   139d8:	e000e100 	.word	0xe000e100

000139dc <system_interrupt_disable>:
{
   139dc:	b580      	push	{r7, lr}
   139de:	b082      	sub	sp, #8
   139e0:	af00      	add	r7, sp, #0
   139e2:	0002      	movs	r2, r0
   139e4:	1dfb      	adds	r3, r7, #7
   139e6:	701a      	strb	r2, [r3, #0]
	NVIC->ICER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
   139e8:	4a07      	ldr	r2, [pc, #28]	; (13a08 <system_interrupt_disable+0x2c>)
   139ea:	1dfb      	adds	r3, r7, #7
   139ec:	781b      	ldrb	r3, [r3, #0]
   139ee:	0019      	movs	r1, r3
   139f0:	231f      	movs	r3, #31
   139f2:	400b      	ands	r3, r1
   139f4:	2101      	movs	r1, #1
   139f6:	4099      	lsls	r1, r3
   139f8:	000b      	movs	r3, r1
   139fa:	0019      	movs	r1, r3
   139fc:	2380      	movs	r3, #128	; 0x80
   139fe:	50d1      	str	r1, [r2, r3]
}
   13a00:	46c0      	nop			; (mov r8, r8)
   13a02:	46bd      	mov	sp, r7
   13a04:	b002      	add	sp, #8
   13a06:	bd80      	pop	{r7, pc}
   13a08:	e000e100 	.word	0xe000e100

00013a0c <rtc_calendar_is_syncing>:
 *
 * \retval false If the module has completed synchronization
 * \retval true If the module synchronization is ongoing
 */
static inline bool rtc_calendar_is_syncing(struct rtc_module *const module)
{
   13a0c:	b580      	push	{r7, lr}
   13a0e:	b084      	sub	sp, #16
   13a10:	af00      	add	r7, sp, #0
   13a12:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
   13a14:	687b      	ldr	r3, [r7, #4]
   13a16:	681b      	ldr	r3, [r3, #0]
   13a18:	60fb      	str	r3, [r7, #12]

        if (rtc_module->MODE2.STATUS.reg & RTC_STATUS_SYNCBUSY) {
   13a1a:	68fb      	ldr	r3, [r7, #12]
   13a1c:	7a9b      	ldrb	r3, [r3, #10]
   13a1e:	b2db      	uxtb	r3, r3
   13a20:	b25b      	sxtb	r3, r3
   13a22:	2b00      	cmp	r3, #0
   13a24:	da01      	bge.n	13a2a <rtc_calendar_is_syncing+0x1e>
                return true;
   13a26:	2301      	movs	r3, #1
   13a28:	e000      	b.n	13a2c <rtc_calendar_is_syncing+0x20>
        }

        return false;
   13a2a:	2300      	movs	r3, #0
}
   13a2c:	0018      	movs	r0, r3
   13a2e:	46bd      	mov	sp, r7
   13a30:	b004      	add	sp, #16
   13a32:	bd80      	pop	{r7, pc}

00013a34 <rtc_calendar_enable>:
 * module configuration parameters cannot be altered while the module is enabled.
 *
 * \param[in,out] module  Pointer to the software instance struct
 */
void rtc_calendar_enable(struct rtc_module *const module)
{
   13a34:	b580      	push	{r7, lr}
   13a36:	b084      	sub	sp, #16
   13a38:	af00      	add	r7, sp, #0
   13a3a:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
   13a3c:	687b      	ldr	r3, [r7, #4]
   13a3e:	681b      	ldr	r3, [r3, #0]
   13a40:	60fb      	str	r3, [r7, #12]

#if RTC_CALENDAR_ASYNC == true
	system_interrupt_enable(SYSTEM_INTERRUPT_MODULE_RTC);
   13a42:	2003      	movs	r0, #3
   13a44:	4b0a      	ldr	r3, [pc, #40]	; (13a70 <rtc_calendar_enable+0x3c>)
   13a46:	4798      	blx	r3
#endif

	while (rtc_calendar_is_syncing(module)) {
   13a48:	46c0      	nop			; (mov r8, r8)
   13a4a:	687b      	ldr	r3, [r7, #4]
   13a4c:	0018      	movs	r0, r3
   13a4e:	4b09      	ldr	r3, [pc, #36]	; (13a74 <rtc_calendar_enable+0x40>)
   13a50:	4798      	blx	r3
   13a52:	1e03      	subs	r3, r0, #0
   13a54:	d1f9      	bne.n	13a4a <rtc_calendar_enable+0x16>
		/* Wait for synchronization */
	}

	/* Enable RTC module. */
	rtc_module->MODE2.CTRL.reg |= RTC_MODE2_CTRL_ENABLE;
   13a56:	68fb      	ldr	r3, [r7, #12]
   13a58:	881b      	ldrh	r3, [r3, #0]
   13a5a:	b29b      	uxth	r3, r3
   13a5c:	2202      	movs	r2, #2
   13a5e:	4313      	orrs	r3, r2
   13a60:	b29a      	uxth	r2, r3
   13a62:	68fb      	ldr	r3, [r7, #12]
   13a64:	801a      	strh	r2, [r3, #0]
}
   13a66:	46c0      	nop			; (mov r8, r8)
   13a68:	46bd      	mov	sp, r7
   13a6a:	b004      	add	sp, #16
   13a6c:	bd80      	pop	{r7, pc}
   13a6e:	46c0      	nop			; (mov r8, r8)
   13a70:	000139b1 	.word	0x000139b1
   13a74:	00013a0d 	.word	0x00013a0d

00013a78 <rtc_calendar_disable>:
 * Disables the RTC module.
 *
 * \param[in,out] module  Pointer to the software instance struct
 */
void rtc_calendar_disable(struct rtc_module *const module)
{
   13a78:	b580      	push	{r7, lr}
   13a7a:	b084      	sub	sp, #16
   13a7c:	af00      	add	r7, sp, #0
   13a7e:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
   13a80:	687b      	ldr	r3, [r7, #4]
   13a82:	681b      	ldr	r3, [r3, #0]
   13a84:	60fb      	str	r3, [r7, #12]

#if RTC_CALENDAR_ASYNC == true
	system_interrupt_disable(SYSTEM_INTERRUPT_MODULE_RTC);
   13a86:	2003      	movs	r0, #3
   13a88:	4b0d      	ldr	r3, [pc, #52]	; (13ac0 <rtc_calendar_disable+0x48>)
   13a8a:	4798      	blx	r3
#endif

	while (rtc_calendar_is_syncing(module)) {
   13a8c:	46c0      	nop			; (mov r8, r8)
   13a8e:	687b      	ldr	r3, [r7, #4]
   13a90:	0018      	movs	r0, r3
   13a92:	4b0c      	ldr	r3, [pc, #48]	; (13ac4 <rtc_calendar_disable+0x4c>)
   13a94:	4798      	blx	r3
   13a96:	1e03      	subs	r3, r0, #0
   13a98:	d1f9      	bne.n	13a8e <rtc_calendar_disable+0x16>
		/* Wait for synchronization */
	}

	/* Disbale interrupt */
	rtc_module->MODE2.INTENCLR.reg = RTC_MODE2_INTENCLR_MASK;
   13a9a:	68fb      	ldr	r3, [r7, #12]
   13a9c:	22c1      	movs	r2, #193	; 0xc1
   13a9e:	719a      	strb	r2, [r3, #6]
	/* Clear interrupt flag */
	rtc_module->MODE2.INTFLAG.reg = RTC_MODE2_INTFLAG_MASK;
   13aa0:	68fb      	ldr	r3, [r7, #12]
   13aa2:	22c1      	movs	r2, #193	; 0xc1
   13aa4:	721a      	strb	r2, [r3, #8]

	/* Disable RTC module. */
	rtc_module->MODE2.CTRL.reg &= ~RTC_MODE2_CTRL_ENABLE;
   13aa6:	68fb      	ldr	r3, [r7, #12]
   13aa8:	881b      	ldrh	r3, [r3, #0]
   13aaa:	b29b      	uxth	r3, r3
   13aac:	2202      	movs	r2, #2
   13aae:	4393      	bics	r3, r2
   13ab0:	b29a      	uxth	r2, r3
   13ab2:	68fb      	ldr	r3, [r7, #12]
   13ab4:	801a      	strh	r2, [r3, #0]
}
   13ab6:	46c0      	nop			; (mov r8, r8)
   13ab8:	46bd      	mov	sp, r7
   13aba:	b004      	add	sp, #16
   13abc:	bd80      	pop	{r7, pc}
   13abe:	46c0      	nop			; (mov r8, r8)
   13ac0:	000139dd 	.word	0x000139dd
   13ac4:	00013a0d 	.word	0x00013a0d

00013ac8 <rtc_calendar_reset>:
 * Resets the RTC module to hardware defaults.
 *
 * \param[in,out] module  Pointer to the software instance struct
 */
void rtc_calendar_reset(struct rtc_module *const module)
{
   13ac8:	b580      	push	{r7, lr}
   13aca:	b084      	sub	sp, #16
   13acc:	af00      	add	r7, sp, #0
   13ace:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
   13ad0:	687b      	ldr	r3, [r7, #4]
   13ad2:	681b      	ldr	r3, [r3, #0]
   13ad4:	60fb      	str	r3, [r7, #12]

	/* Disable module before reset. */
	rtc_calendar_disable(module);
   13ad6:	687b      	ldr	r3, [r7, #4]
   13ad8:	0018      	movs	r0, r3
   13ada:	4b0d      	ldr	r3, [pc, #52]	; (13b10 <rtc_calendar_reset+0x48>)
   13adc:	4798      	blx	r3

#if RTC_CALENDAR_ASYNC == true
	module->registered_callback = 0;
   13ade:	687b      	ldr	r3, [r7, #4]
   13ae0:	2200      	movs	r2, #0
   13ae2:	821a      	strh	r2, [r3, #16]
	module->enabled_callback    = 0;
   13ae4:	687b      	ldr	r3, [r7, #4]
   13ae6:	2200      	movs	r2, #0
   13ae8:	825a      	strh	r2, [r3, #18]
#endif

	while (rtc_calendar_is_syncing(module)) {
   13aea:	46c0      	nop			; (mov r8, r8)
   13aec:	687b      	ldr	r3, [r7, #4]
   13aee:	0018      	movs	r0, r3
   13af0:	4b08      	ldr	r3, [pc, #32]	; (13b14 <rtc_calendar_reset+0x4c>)
   13af2:	4798      	blx	r3
   13af4:	1e03      	subs	r3, r0, #0
   13af6:	d1f9      	bne.n	13aec <rtc_calendar_reset+0x24>
		/* Wait for synchronization */
	}

	/* Initiate software reset. */
	rtc_module->MODE2.CTRL.reg |= RTC_MODE2_CTRL_SWRST;
   13af8:	68fb      	ldr	r3, [r7, #12]
   13afa:	881b      	ldrh	r3, [r3, #0]
   13afc:	b29b      	uxth	r3, r3
   13afe:	2201      	movs	r2, #1
   13b00:	4313      	orrs	r3, r2
   13b02:	b29a      	uxth	r2, r3
   13b04:	68fb      	ldr	r3, [r7, #12]
   13b06:	801a      	strh	r2, [r3, #0]
}
   13b08:	46c0      	nop			; (mov r8, r8)
   13b0a:	46bd      	mov	sp, r7
   13b0c:	b004      	add	sp, #16
   13b0e:	bd80      	pop	{r7, pc}
   13b10:	00013a79 	.word	0x00013a79
   13b14:	00013a0d 	.word	0x00013a0d

00013b18 <rtc_calendar_time_to_register_value>:
 * \return 32-bit value.
 */
uint32_t rtc_calendar_time_to_register_value(
		struct rtc_module *const module,
		const struct rtc_calendar_time *const time)
{
   13b18:	b580      	push	{r7, lr}
   13b1a:	b084      	sub	sp, #16
   13b1c:	af00      	add	r7, sp, #0
   13b1e:	6078      	str	r0, [r7, #4]
   13b20:	6039      	str	r1, [r7, #0]
	/* Initialize return value. */
	uint32_t register_value;

	/* Set year value into register_value minus initial year. */
	register_value = (time->year - module->year_init_value) <<
   13b22:	683b      	ldr	r3, [r7, #0]
   13b24:	88db      	ldrh	r3, [r3, #6]
   13b26:	001a      	movs	r2, r3
   13b28:	687b      	ldr	r3, [r7, #4]
   13b2a:	88db      	ldrh	r3, [r3, #6]
   13b2c:	1ad3      	subs	r3, r2, r3
   13b2e:	069b      	lsls	r3, r3, #26
   13b30:	60fb      	str	r3, [r7, #12]
			RTC_MODE2_CLOCK_YEAR_Pos;

	/* Set month value into register_value. */
	register_value |= (time->month << RTC_MODE2_CLOCK_MONTH_Pos);
   13b32:	683b      	ldr	r3, [r7, #0]
   13b34:	795b      	ldrb	r3, [r3, #5]
   13b36:	059b      	lsls	r3, r3, #22
   13b38:	001a      	movs	r2, r3
   13b3a:	68fb      	ldr	r3, [r7, #12]
   13b3c:	4313      	orrs	r3, r2
   13b3e:	60fb      	str	r3, [r7, #12]

	/* Set day value into register_value. */
	register_value |= (time->day << RTC_MODE2_CLOCK_DAY_Pos);
   13b40:	683b      	ldr	r3, [r7, #0]
   13b42:	791b      	ldrb	r3, [r3, #4]
   13b44:	045b      	lsls	r3, r3, #17
   13b46:	001a      	movs	r2, r3
   13b48:	68fb      	ldr	r3, [r7, #12]
   13b4a:	4313      	orrs	r3, r2
   13b4c:	60fb      	str	r3, [r7, #12]

	/* Set 24 hour value into register_value. */
	register_value |= (time->hour << RTC_MODE2_CLOCK_HOUR_Pos);
   13b4e:	683b      	ldr	r3, [r7, #0]
   13b50:	789b      	ldrb	r3, [r3, #2]
   13b52:	031b      	lsls	r3, r3, #12
   13b54:	001a      	movs	r2, r3
   13b56:	68fb      	ldr	r3, [r7, #12]
   13b58:	4313      	orrs	r3, r2
   13b5a:	60fb      	str	r3, [r7, #12]

	/* Check if 24 h clock and set pm flag. */
	if (!(module->clock_24h) && (time->pm)) {
   13b5c:	687b      	ldr	r3, [r7, #4]
   13b5e:	791b      	ldrb	r3, [r3, #4]
   13b60:	2201      	movs	r2, #1
   13b62:	4053      	eors	r3, r2
   13b64:	b2db      	uxtb	r3, r3
   13b66:	2b00      	cmp	r3, #0
   13b68:	d008      	beq.n	13b7c <rtc_calendar_time_to_register_value+0x64>
   13b6a:	683b      	ldr	r3, [r7, #0]
   13b6c:	78db      	ldrb	r3, [r3, #3]
   13b6e:	2b00      	cmp	r3, #0
   13b70:	d004      	beq.n	13b7c <rtc_calendar_time_to_register_value+0x64>
		/* Set pm flag. */
		register_value |= RTC_MODE2_CLOCK_HOUR_PM;
   13b72:	68fb      	ldr	r3, [r7, #12]
   13b74:	2280      	movs	r2, #128	; 0x80
   13b76:	0252      	lsls	r2, r2, #9
   13b78:	4313      	orrs	r3, r2
   13b7a:	60fb      	str	r3, [r7, #12]
	}

	/* Set minute value into register_value. */
	register_value |= (time->minute << RTC_MODE2_CLOCK_MINUTE_Pos);
   13b7c:	683b      	ldr	r3, [r7, #0]
   13b7e:	785b      	ldrb	r3, [r3, #1]
   13b80:	019b      	lsls	r3, r3, #6
   13b82:	001a      	movs	r2, r3
   13b84:	68fb      	ldr	r3, [r7, #12]
   13b86:	4313      	orrs	r3, r2
   13b88:	60fb      	str	r3, [r7, #12]

	/* Set second value into register_value. */
	register_value |= (time->second << RTC_MODE2_CLOCK_SECOND_Pos);
   13b8a:	683b      	ldr	r3, [r7, #0]
   13b8c:	781b      	ldrb	r3, [r3, #0]
   13b8e:	001a      	movs	r2, r3
   13b90:	68fb      	ldr	r3, [r7, #12]
   13b92:	4313      	orrs	r3, r2
   13b94:	60fb      	str	r3, [r7, #12]

	return register_value;
   13b96:	68fb      	ldr	r3, [r7, #12]
}
   13b98:	0018      	movs	r0, r3
   13b9a:	46bd      	mov	sp, r7
   13b9c:	b004      	add	sp, #16
   13b9e:	bd80      	pop	{r7, pc}

00013ba0 <rtc_calendar_register_value_to_time>:
 */
void rtc_calendar_register_value_to_time(
		struct rtc_module *const module,
		const uint32_t register_value,
		struct rtc_calendar_time *const time)
{
   13ba0:	b580      	push	{r7, lr}
   13ba2:	b084      	sub	sp, #16
   13ba4:	af00      	add	r7, sp, #0
   13ba6:	60f8      	str	r0, [r7, #12]
   13ba8:	60b9      	str	r1, [r7, #8]
   13baa:	607a      	str	r2, [r7, #4]
	/* Set year plus value of initial year. */
	time->year = ((register_value & RTC_MODE2_CLOCK_YEAR_Msk) >>
   13bac:	68bb      	ldr	r3, [r7, #8]
   13bae:	0e9b      	lsrs	r3, r3, #26
			RTC_MODE2_CLOCK_YEAR_Pos) + module->year_init_value;
   13bb0:	b29a      	uxth	r2, r3
   13bb2:	68fb      	ldr	r3, [r7, #12]
   13bb4:	88db      	ldrh	r3, [r3, #6]
   13bb6:	18d3      	adds	r3, r2, r3
   13bb8:	b29a      	uxth	r2, r3
	time->year = ((register_value & RTC_MODE2_CLOCK_YEAR_Msk) >>
   13bba:	687b      	ldr	r3, [r7, #4]
   13bbc:	80da      	strh	r2, [r3, #6]

	/* Set month value into time struct. */
	time->month = ((register_value & RTC_MODE2_CLOCK_MONTH_Msk) >>
   13bbe:	68bb      	ldr	r3, [r7, #8]
   13bc0:	0d9b      	lsrs	r3, r3, #22
   13bc2:	b2db      	uxtb	r3, r3
   13bc4:	220f      	movs	r2, #15
   13bc6:	4013      	ands	r3, r2
   13bc8:	b2da      	uxtb	r2, r3
   13bca:	687b      	ldr	r3, [r7, #4]
   13bcc:	715a      	strb	r2, [r3, #5]
			RTC_MODE2_CLOCK_MONTH_Pos);

	/* Set day value into time struct. */
	time->day = ((register_value & RTC_MODE2_CLOCK_DAY_Msk) >>
   13bce:	68bb      	ldr	r3, [r7, #8]
   13bd0:	0c5b      	lsrs	r3, r3, #17
   13bd2:	b2db      	uxtb	r3, r3
   13bd4:	221f      	movs	r2, #31
   13bd6:	4013      	ands	r3, r2
   13bd8:	b2da      	uxtb	r2, r3
   13bda:	687b      	ldr	r3, [r7, #4]
   13bdc:	711a      	strb	r2, [r3, #4]
			RTC_MODE2_CLOCK_DAY_Pos);

	if (module->clock_24h) {
   13bde:	68fb      	ldr	r3, [r7, #12]
   13be0:	791b      	ldrb	r3, [r3, #4]
   13be2:	2b00      	cmp	r3, #0
   13be4:	d008      	beq.n	13bf8 <rtc_calendar_register_value_to_time+0x58>
		/* Set hour in 24h mode. */
		time->hour = ((register_value & RTC_MODE2_CLOCK_HOUR_Msk) >>
   13be6:	68bb      	ldr	r3, [r7, #8]
   13be8:	0b1b      	lsrs	r3, r3, #12
   13bea:	b2db      	uxtb	r3, r3
   13bec:	221f      	movs	r2, #31
   13bee:	4013      	ands	r3, r2
   13bf0:	b2da      	uxtb	r2, r3
   13bf2:	687b      	ldr	r3, [r7, #4]
   13bf4:	709a      	strb	r2, [r3, #2]
   13bf6:	e010      	b.n	13c1a <rtc_calendar_register_value_to_time+0x7a>
				RTC_MODE2_CLOCK_HOUR_Pos);
	} else {
		/* Set hour in 12h mode. */
		time->hour = ((register_value &
				(RTC_MODE2_CLOCK_HOUR_Msk & ~RTC_MODE2_CLOCK_HOUR_PM)) >>
   13bf8:	68bb      	ldr	r3, [r7, #8]
   13bfa:	0b1b      	lsrs	r3, r3, #12
   13bfc:	b2db      	uxtb	r3, r3
   13bfe:	220f      	movs	r2, #15
   13c00:	4013      	ands	r3, r2
   13c02:	b2da      	uxtb	r2, r3
		time->hour = ((register_value &
   13c04:	687b      	ldr	r3, [r7, #4]
   13c06:	709a      	strb	r2, [r3, #2]
				RTC_MODE2_CLOCK_HOUR_Pos);

		/* Set pm flag */
		time->pm = ((register_value & RTC_MODE2_CLOCK_HOUR_PM) != 0);
   13c08:	68ba      	ldr	r2, [r7, #8]
   13c0a:	2380      	movs	r3, #128	; 0x80
   13c0c:	025b      	lsls	r3, r3, #9
   13c0e:	4013      	ands	r3, r2
   13c10:	1e5a      	subs	r2, r3, #1
   13c12:	4193      	sbcs	r3, r2
   13c14:	b2da      	uxtb	r2, r3
   13c16:	687b      	ldr	r3, [r7, #4]
   13c18:	70da      	strb	r2, [r3, #3]
	}

	/* Set minute value into time struct. */
	time->minute = ((register_value & RTC_MODE2_CLOCK_MINUTE_Msk) >>
   13c1a:	68bb      	ldr	r3, [r7, #8]
   13c1c:	099b      	lsrs	r3, r3, #6
   13c1e:	b2db      	uxtb	r3, r3
   13c20:	223f      	movs	r2, #63	; 0x3f
   13c22:	4013      	ands	r3, r2
   13c24:	b2da      	uxtb	r2, r3
   13c26:	687b      	ldr	r3, [r7, #4]
   13c28:	705a      	strb	r2, [r3, #1]
			RTC_MODE2_CLOCK_MINUTE_Pos);

	/* Set second value into time struct. */
	time->second = ((register_value & RTC_MODE2_CLOCK_SECOND_Msk) >>
   13c2a:	68bb      	ldr	r3, [r7, #8]
   13c2c:	b2db      	uxtb	r3, r3
   13c2e:	223f      	movs	r2, #63	; 0x3f
   13c30:	4013      	ands	r3, r2
   13c32:	b2da      	uxtb	r2, r3
   13c34:	687b      	ldr	r3, [r7, #4]
   13c36:	701a      	strb	r2, [r3, #0]
			RTC_MODE2_CLOCK_SECOND_Pos);
}
   13c38:	46c0      	nop			; (mov r8, r8)
   13c3a:	46bd      	mov	sp, r7
   13c3c:	b004      	add	sp, #16
   13c3e:	bd80      	pop	{r7, pc}

00013c40 <_rtc_calendar_set_config>:
 * \param[in] config  Pointer to the configuration structure.
 */
static void _rtc_calendar_set_config(
		struct rtc_module *const module,
		const struct rtc_calendar_config *const config)
{
   13c40:	b580      	push	{r7, lr}
   13c42:	b084      	sub	sp, #16
   13c44:	af00      	add	r7, sp, #0
   13c46:	6078      	str	r0, [r7, #4]
   13c48:	6039      	str	r1, [r7, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
   13c4a:	687b      	ldr	r3, [r7, #4]
   13c4c:	681b      	ldr	r3, [r3, #0]
   13c4e:	60bb      	str	r3, [r7, #8]

	/* Set up temporary register value. */
	uint16_t tmp_reg;

	/* Set to calendar mode and set the prescaler. */
	tmp_reg = RTC_MODE2_CTRL_MODE(2) | config->prescaler;
   13c50:	683b      	ldr	r3, [r7, #0]
   13c52:	881a      	ldrh	r2, [r3, #0]
   13c54:	230e      	movs	r3, #14
   13c56:	18fb      	adds	r3, r7, r3
   13c58:	2108      	movs	r1, #8
   13c5a:	430a      	orrs	r2, r1
   13c5c:	801a      	strh	r2, [r3, #0]

	/* Check clock mode. */
	if (!(config->clock_24h)) {
   13c5e:	683b      	ldr	r3, [r7, #0]
   13c60:	791b      	ldrb	r3, [r3, #4]
   13c62:	2201      	movs	r2, #1
   13c64:	4053      	eors	r3, r2
   13c66:	b2db      	uxtb	r3, r3
   13c68:	2b00      	cmp	r3, #0
   13c6a:	d007      	beq.n	13c7c <_rtc_calendar_set_config+0x3c>
		/* Set clock mode 12h. */
		tmp_reg |= RTC_MODE2_CTRL_CLKREP;
   13c6c:	230e      	movs	r3, #14
   13c6e:	18fb      	adds	r3, r7, r3
   13c70:	220e      	movs	r2, #14
   13c72:	18ba      	adds	r2, r7, r2
   13c74:	8812      	ldrh	r2, [r2, #0]
   13c76:	2140      	movs	r1, #64	; 0x40
   13c78:	430a      	orrs	r2, r1
   13c7a:	801a      	strh	r2, [r3, #0]
	}

	/* Check for clear on compare match. */
	if (config->clear_on_match) {
   13c7c:	683b      	ldr	r3, [r7, #0]
   13c7e:	789b      	ldrb	r3, [r3, #2]
   13c80:	2b00      	cmp	r3, #0
   13c82:	d007      	beq.n	13c94 <_rtc_calendar_set_config+0x54>
		/* Set clear on compare match. */
		tmp_reg |= RTC_MODE2_CTRL_MATCHCLR;
   13c84:	230e      	movs	r3, #14
   13c86:	18fb      	adds	r3, r7, r3
   13c88:	220e      	movs	r2, #14
   13c8a:	18ba      	adds	r2, r7, r2
   13c8c:	8812      	ldrh	r2, [r2, #0]
   13c8e:	2180      	movs	r1, #128	; 0x80
   13c90:	430a      	orrs	r2, r1
   13c92:	801a      	strh	r2, [r3, #0]
	}

	/* Set temporary value to register. */
	rtc_module->MODE2.CTRL.reg = tmp_reg;
   13c94:	68bb      	ldr	r3, [r7, #8]
   13c96:	220e      	movs	r2, #14
   13c98:	18ba      	adds	r2, r7, r2
   13c9a:	8812      	ldrh	r2, [r2, #0]
   13c9c:	801a      	strh	r2, [r3, #0]

	/* Check to set continuously clock read update mode. */
	if (config->continuously_update) {
   13c9e:	683b      	ldr	r3, [r7, #0]
   13ca0:	78db      	ldrb	r3, [r3, #3]
   13ca2:	2b00      	cmp	r3, #0
   13ca4:	d008      	beq.n	13cb8 <_rtc_calendar_set_config+0x78>
		/* Set continuously mode. */
		rtc_module->MODE2.READREQ.reg |= RTC_READREQ_RCONT;
   13ca6:	68bb      	ldr	r3, [r7, #8]
   13ca8:	885b      	ldrh	r3, [r3, #2]
   13caa:	b29b      	uxth	r3, r3
   13cac:	2280      	movs	r2, #128	; 0x80
   13cae:	01d2      	lsls	r2, r2, #7
   13cb0:	4313      	orrs	r3, r2
   13cb2:	b29a      	uxth	r2, r3
   13cb4:	68bb      	ldr	r3, [r7, #8]
   13cb6:	805a      	strh	r2, [r3, #2]
	}

	/* Set alarm time registers. */
	for (uint8_t i = 0; i < RTC_NUM_OF_ALARMS; i++) {
   13cb8:	230d      	movs	r3, #13
   13cba:	18fb      	adds	r3, r7, r3
   13cbc:	2200      	movs	r2, #0
   13cbe:	701a      	strb	r2, [r3, #0]
   13cc0:	e017      	b.n	13cf2 <_rtc_calendar_set_config+0xb2>
		rtc_calendar_set_alarm(module, &(config->alarm[i]), (enum rtc_calendar_alarm)i);
   13cc2:	230d      	movs	r3, #13
   13cc4:	18fb      	adds	r3, r7, r3
   13cc6:	781a      	ldrb	r2, [r3, #0]
   13cc8:	0013      	movs	r3, r2
   13cca:	009b      	lsls	r3, r3, #2
   13ccc:	189b      	adds	r3, r3, r2
   13cce:	005b      	lsls	r3, r3, #1
   13cd0:	3308      	adds	r3, #8
   13cd2:	683a      	ldr	r2, [r7, #0]
   13cd4:	18d1      	adds	r1, r2, r3
   13cd6:	230d      	movs	r3, #13
   13cd8:	18fb      	adds	r3, r7, r3
   13cda:	781a      	ldrb	r2, [r3, #0]
   13cdc:	687b      	ldr	r3, [r7, #4]
   13cde:	0018      	movs	r0, r3
   13ce0:	4b08      	ldr	r3, [pc, #32]	; (13d04 <_rtc_calendar_set_config+0xc4>)
   13ce2:	4798      	blx	r3
	for (uint8_t i = 0; i < RTC_NUM_OF_ALARMS; i++) {
   13ce4:	230d      	movs	r3, #13
   13ce6:	18fb      	adds	r3, r7, r3
   13ce8:	781a      	ldrb	r2, [r3, #0]
   13cea:	230d      	movs	r3, #13
   13cec:	18fb      	adds	r3, r7, r3
   13cee:	3201      	adds	r2, #1
   13cf0:	701a      	strb	r2, [r3, #0]
   13cf2:	230d      	movs	r3, #13
   13cf4:	18fb      	adds	r3, r7, r3
   13cf6:	781b      	ldrb	r3, [r3, #0]
   13cf8:	2b00      	cmp	r3, #0
   13cfa:	d0e2      	beq.n	13cc2 <_rtc_calendar_set_config+0x82>
	}
}
   13cfc:	46c0      	nop			; (mov r8, r8)
   13cfe:	46bd      	mov	sp, r7
   13d00:	b004      	add	sp, #16
   13d02:	bd80      	pop	{r7, pc}
   13d04:	00013e29 	.word	0x00013e29

00013d08 <rtc_calendar_init>:
 */
void rtc_calendar_init(
		struct rtc_module *const module,
		Rtc *const hw,
		const struct rtc_calendar_config *const config)
{
   13d08:	b580      	push	{r7, lr}
   13d0a:	b086      	sub	sp, #24
   13d0c:	af00      	add	r7, sp, #0
   13d0e:	60f8      	str	r0, [r7, #12]
   13d10:	60b9      	str	r1, [r7, #8]
   13d12:	607a      	str	r2, [r7, #4]
	Assert(module);
	Assert(hw);
	Assert(config);

	/* Initialize device instance */
	module->hw = hw;
   13d14:	68fb      	ldr	r3, [r7, #12]
   13d16:	68ba      	ldr	r2, [r7, #8]
   13d18:	601a      	str	r2, [r3, #0]

	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, PM_APBAMASK_RTC);
   13d1a:	2120      	movs	r1, #32
   13d1c:	2000      	movs	r0, #0
   13d1e:	4b18      	ldr	r3, [pc, #96]	; (13d80 <rtc_calendar_init+0x78>)
   13d20:	4798      	blx	r3

	/* Set up GCLK */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
   13d22:	2314      	movs	r3, #20
   13d24:	18fb      	adds	r3, r7, r3
   13d26:	0018      	movs	r0, r3
   13d28:	4b16      	ldr	r3, [pc, #88]	; (13d84 <rtc_calendar_init+0x7c>)
   13d2a:	4798      	blx	r3
	gclk_chan_conf.source_generator = GCLK_GENERATOR_2;
   13d2c:	2314      	movs	r3, #20
   13d2e:	18fb      	adds	r3, r7, r3
   13d30:	2202      	movs	r2, #2
   13d32:	701a      	strb	r2, [r3, #0]
	system_gclk_chan_set_config(RTC_GCLK_ID, &gclk_chan_conf);
   13d34:	2314      	movs	r3, #20
   13d36:	18fb      	adds	r3, r7, r3
   13d38:	0019      	movs	r1, r3
   13d3a:	2004      	movs	r0, #4
   13d3c:	4b12      	ldr	r3, [pc, #72]	; (13d88 <rtc_calendar_init+0x80>)
   13d3e:	4798      	blx	r3
	system_gclk_chan_enable(RTC_GCLK_ID);
   13d40:	2004      	movs	r0, #4
   13d42:	4b12      	ldr	r3, [pc, #72]	; (13d8c <rtc_calendar_init+0x84>)
   13d44:	4798      	blx	r3

	/* Reset module to hardware defaults. */
	rtc_calendar_reset(module);
   13d46:	68fb      	ldr	r3, [r7, #12]
   13d48:	0018      	movs	r0, r3
   13d4a:	4b11      	ldr	r3, [pc, #68]	; (13d90 <rtc_calendar_init+0x88>)
   13d4c:	4798      	blx	r3

	/* Save conf_struct internally for continued use. */
	module->clock_24h           = config->clock_24h;
   13d4e:	687b      	ldr	r3, [r7, #4]
   13d50:	791a      	ldrb	r2, [r3, #4]
   13d52:	68fb      	ldr	r3, [r7, #12]
   13d54:	711a      	strb	r2, [r3, #4]
	module->continuously_update = config->continuously_update;
   13d56:	687b      	ldr	r3, [r7, #4]
   13d58:	78da      	ldrb	r2, [r3, #3]
   13d5a:	68fb      	ldr	r3, [r7, #12]
   13d5c:	715a      	strb	r2, [r3, #5]
	module->year_init_value     = config->year_init_value;
   13d5e:	687b      	ldr	r3, [r7, #4]
   13d60:	88da      	ldrh	r2, [r3, #6]
   13d62:	68fb      	ldr	r3, [r7, #12]
   13d64:	80da      	strh	r2, [r3, #6]

#if (RTC_INST_NUM == 1)
	_rtc_instance[0] = module;
   13d66:	4b0b      	ldr	r3, [pc, #44]	; (13d94 <rtc_calendar_init+0x8c>)
   13d68:	68fa      	ldr	r2, [r7, #12]
   13d6a:	601a      	str	r2, [r3, #0]
	/* Register this instance for callbacks*/
	_rtc_instance[_rtc_get_inst_index(hw)] = module;
#endif

	/* Set config. */
	_rtc_calendar_set_config(module, config);
   13d6c:	687a      	ldr	r2, [r7, #4]
   13d6e:	68fb      	ldr	r3, [r7, #12]
   13d70:	0011      	movs	r1, r2
   13d72:	0018      	movs	r0, r3
   13d74:	4b08      	ldr	r3, [pc, #32]	; (13d98 <rtc_calendar_init+0x90>)
   13d76:	4798      	blx	r3
}
   13d78:	46c0      	nop			; (mov r8, r8)
   13d7a:	46bd      	mov	sp, r7
   13d7c:	b006      	add	sp, #24
   13d7e:	bd80      	pop	{r7, pc}
   13d80:	00013955 	.word	0x00013955
   13d84:	0001393d 	.word	0x0001393d
   13d88:	00016d6d 	.word	0x00016d6d
   13d8c:	00016db1 	.word	0x00016db1
   13d90:	00013ac9 	.word	0x00013ac9
   13d94:	200055e4 	.word	0x200055e4
   13d98:	00013c41 	.word	0x00013c41

00013d9c <rtc_calendar_get_time>:
 * \param[out] time  Pointer to value that will be filled with current time
 */
void rtc_calendar_get_time(
		struct rtc_module *const module,
		struct rtc_calendar_time *const time)
{
   13d9c:	b580      	push	{r7, lr}
   13d9e:	b084      	sub	sp, #16
   13da0:	af00      	add	r7, sp, #0
   13da2:	6078      	str	r0, [r7, #4]
   13da4:	6039      	str	r1, [r7, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
   13da6:	687b      	ldr	r3, [r7, #4]
   13da8:	681b      	ldr	r3, [r3, #0]
   13daa:	60fb      	str	r3, [r7, #12]

	/* Change of read method based on value of continuously_update value in
	 * the configuration structure. */
	if (!(module->continuously_update)) {
   13dac:	687b      	ldr	r3, [r7, #4]
   13dae:	795b      	ldrb	r3, [r3, #5]
   13db0:	2201      	movs	r2, #1
   13db2:	4053      	eors	r3, r2
   13db4:	b2db      	uxtb	r3, r3
   13db6:	2b00      	cmp	r3, #0
   13db8:	d00a      	beq.n	13dd0 <rtc_calendar_get_time+0x34>
		/* Request read on CLOCK register. */
		rtc_module->MODE2.READREQ.reg = RTC_READREQ_RREQ;
   13dba:	68fb      	ldr	r3, [r7, #12]
   13dbc:	4a16      	ldr	r2, [pc, #88]	; (13e18 <rtc_calendar_get_time+0x7c>)
   13dbe:	805a      	strh	r2, [r3, #2]

		while (rtc_calendar_is_syncing(module)) {
   13dc0:	46c0      	nop			; (mov r8, r8)
   13dc2:	687b      	ldr	r3, [r7, #4]
   13dc4:	0018      	movs	r0, r3
   13dc6:	4b15      	ldr	r3, [pc, #84]	; (13e1c <rtc_calendar_get_time+0x80>)
   13dc8:	4798      	blx	r3
   13dca:	1e03      	subs	r3, r0, #0
   13dcc:	d1f9      	bne.n	13dc2 <rtc_calendar_get_time+0x26>
   13dce:	e016      	b.n	13dfe <rtc_calendar_get_time+0x62>
			/* Wait for synchronization */
		}
	} else if (!(rtc_module->MODE2.READREQ.reg & RTC_READREQ_RCONT)){
   13dd0:	68fb      	ldr	r3, [r7, #12]
   13dd2:	885b      	ldrh	r3, [r3, #2]
   13dd4:	b29b      	uxth	r3, r3
   13dd6:	001a      	movs	r2, r3
   13dd8:	2380      	movs	r3, #128	; 0x80
   13dda:	01db      	lsls	r3, r3, #7
   13ddc:	4013      	ands	r3, r2
   13dde:	d10e      	bne.n	13dfe <rtc_calendar_get_time+0x62>
		rtc_module->MODE2.READREQ.reg |= RTC_READREQ_RCONT | RTC_READREQ_RREQ;
   13de0:	68fb      	ldr	r3, [r7, #12]
   13de2:	885b      	ldrh	r3, [r3, #2]
   13de4:	b29b      	uxth	r3, r3
   13de6:	4a0e      	ldr	r2, [pc, #56]	; (13e20 <rtc_calendar_get_time+0x84>)
   13de8:	4313      	orrs	r3, r2
   13dea:	b29a      	uxth	r2, r3
   13dec:	68fb      	ldr	r3, [r7, #12]
   13dee:	805a      	strh	r2, [r3, #2]
		 /* wait that the first Read request finishes */
		while (rtc_calendar_is_syncing(module)) {
   13df0:	46c0      	nop			; (mov r8, r8)
   13df2:	687b      	ldr	r3, [r7, #4]
   13df4:	0018      	movs	r0, r3
   13df6:	4b09      	ldr	r3, [pc, #36]	; (13e1c <rtc_calendar_get_time+0x80>)
   13df8:	4798      	blx	r3
   13dfa:	1e03      	subs	r3, r0, #0
   13dfc:	d1f9      	bne.n	13df2 <rtc_calendar_get_time+0x56>
			/* Wait for synchronization */
		}
	}

	/* Read value. */
	uint32_t register_value = rtc_module->MODE2.CLOCK.reg;
   13dfe:	68fb      	ldr	r3, [r7, #12]
   13e00:	691b      	ldr	r3, [r3, #16]
   13e02:	60bb      	str	r3, [r7, #8]

	/* Convert value to time structure. */
	rtc_calendar_register_value_to_time(module, register_value, time);
   13e04:	683a      	ldr	r2, [r7, #0]
   13e06:	68b9      	ldr	r1, [r7, #8]
   13e08:	687b      	ldr	r3, [r7, #4]
   13e0a:	0018      	movs	r0, r3
   13e0c:	4b05      	ldr	r3, [pc, #20]	; (13e24 <rtc_calendar_get_time+0x88>)
   13e0e:	4798      	blx	r3
}
   13e10:	46c0      	nop			; (mov r8, r8)
   13e12:	46bd      	mov	sp, r7
   13e14:	b004      	add	sp, #16
   13e16:	bd80      	pop	{r7, pc}
   13e18:	ffff8000 	.word	0xffff8000
   13e1c:	00013a0d 	.word	0x00013a0d
   13e20:	ffffc000 	.word	0xffffc000
   13e24:	00013ba1 	.word	0x00013ba1

00013e28 <rtc_calendar_set_alarm>:
 */
enum status_code rtc_calendar_set_alarm(
		struct rtc_module *const module,
		const struct rtc_calendar_alarm_time *const alarm,
		const enum rtc_calendar_alarm alarm_index)
{
   13e28:	b580      	push	{r7, lr}
   13e2a:	b086      	sub	sp, #24
   13e2c:	af00      	add	r7, sp, #0
   13e2e:	60f8      	str	r0, [r7, #12]
   13e30:	60b9      	str	r1, [r7, #8]
   13e32:	1dfb      	adds	r3, r7, #7
   13e34:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
   13e36:	68fb      	ldr	r3, [r7, #12]
   13e38:	681b      	ldr	r3, [r3, #0]
   13e3a:	617b      	str	r3, [r7, #20]

	/* Sanity check. */
	if ((uint32_t)alarm_index > RTC_NUM_OF_ALARMS) {
   13e3c:	1dfb      	adds	r3, r7, #7
   13e3e:	781b      	ldrb	r3, [r3, #0]
   13e40:	2b01      	cmp	r3, #1
   13e42:	d901      	bls.n	13e48 <rtc_calendar_set_alarm+0x20>
		return STATUS_ERR_INVALID_ARG;
   13e44:	2317      	movs	r3, #23
   13e46:	e021      	b.n	13e8c <rtc_calendar_set_alarm+0x64>
	}

	/* Get register_value from time. */
	uint32_t register_value = rtc_calendar_time_to_register_value(module, &(alarm->time));
   13e48:	68ba      	ldr	r2, [r7, #8]
   13e4a:	68fb      	ldr	r3, [r7, #12]
   13e4c:	0011      	movs	r1, r2
   13e4e:	0018      	movs	r0, r3
   13e50:	4b10      	ldr	r3, [pc, #64]	; (13e94 <rtc_calendar_set_alarm+0x6c>)
   13e52:	4798      	blx	r3
   13e54:	0003      	movs	r3, r0
   13e56:	613b      	str	r3, [r7, #16]

	while (rtc_calendar_is_syncing(module)) {
   13e58:	46c0      	nop			; (mov r8, r8)
   13e5a:	68fb      	ldr	r3, [r7, #12]
   13e5c:	0018      	movs	r0, r3
   13e5e:	4b0e      	ldr	r3, [pc, #56]	; (13e98 <rtc_calendar_set_alarm+0x70>)
   13e60:	4798      	blx	r3
   13e62:	1e03      	subs	r3, r0, #0
   13e64:	d1f9      	bne.n	13e5a <rtc_calendar_set_alarm+0x32>
		/* Wait for synchronization */
	}

	/* Set alarm value. */
	rtc_module->MODE2.Mode2Alarm[alarm_index].ALARM.reg = register_value;
   13e66:	1dfb      	adds	r3, r7, #7
   13e68:	781a      	ldrb	r2, [r3, #0]
   13e6a:	697b      	ldr	r3, [r7, #20]
   13e6c:	3203      	adds	r2, #3
   13e6e:	00d2      	lsls	r2, r2, #3
   13e70:	6939      	ldr	r1, [r7, #16]
   13e72:	50d1      	str	r1, [r2, r3]

	/* Set alarm mask */
	rtc_module->MODE2.Mode2Alarm[alarm_index].MASK.reg = alarm->mask;
   13e74:	1dfb      	adds	r3, r7, #7
   13e76:	781b      	ldrb	r3, [r3, #0]
   13e78:	68ba      	ldr	r2, [r7, #8]
   13e7a:	7a11      	ldrb	r1, [r2, #8]
   13e7c:	697a      	ldr	r2, [r7, #20]
   13e7e:	3303      	adds	r3, #3
   13e80:	00db      	lsls	r3, r3, #3
   13e82:	18d3      	adds	r3, r2, r3
   13e84:	3304      	adds	r3, #4
   13e86:	1c0a      	adds	r2, r1, #0
   13e88:	701a      	strb	r2, [r3, #0]

	return STATUS_OK;
   13e8a:	2300      	movs	r3, #0
}
   13e8c:	0018      	movs	r0, r3
   13e8e:	46bd      	mov	sp, r7
   13e90:	b006      	add	sp, #24
   13e92:	bd80      	pop	{r7, pc}
   13e94:	00013b19 	.word	0x00013b19
   13e98:	00013a0d 	.word	0x00013a0d

00013e9c <_rtc_interrupt_handler>:
 * \internal Interrupt handler for RTC
 *
 * \param [in] instance_index  Default value 0
 */
static void _rtc_interrupt_handler(const uint32_t instance_index)
{
   13e9c:	b580      	push	{r7, lr}
   13e9e:	b086      	sub	sp, #24
   13ea0:	af00      	add	r7, sp, #0
   13ea2:	6078      	str	r0, [r7, #4]
	struct rtc_module *module = _rtc_instance[instance_index];
   13ea4:	4b28      	ldr	r3, [pc, #160]	; (13f48 <_rtc_interrupt_handler+0xac>)
   13ea6:	687a      	ldr	r2, [r7, #4]
   13ea8:	0092      	lsls	r2, r2, #2
   13eaa:	58d3      	ldr	r3, [r2, r3]
   13eac:	617b      	str	r3, [r7, #20]

	Rtc *const rtc_module = module->hw;
   13eae:	697b      	ldr	r3, [r7, #20]
   13eb0:	681b      	ldr	r3, [r3, #0]
   13eb2:	613b      	str	r3, [r7, #16]

	/* Combine callback registered and enabled masks */
	uint16_t callback_mask = module->enabled_callback;
   13eb4:	230e      	movs	r3, #14
   13eb6:	18fb      	adds	r3, r7, r3
   13eb8:	697a      	ldr	r2, [r7, #20]
   13eba:	8a52      	ldrh	r2, [r2, #18]
   13ebc:	801a      	strh	r2, [r3, #0]
	callback_mask &= module->registered_callback;
   13ebe:	697b      	ldr	r3, [r7, #20]
   13ec0:	8a1b      	ldrh	r3, [r3, #16]
   13ec2:	b29a      	uxth	r2, r3
   13ec4:	230e      	movs	r3, #14
   13ec6:	18fb      	adds	r3, r7, r3
   13ec8:	210e      	movs	r1, #14
   13eca:	1879      	adds	r1, r7, r1
   13ecc:	8809      	ldrh	r1, [r1, #0]
   13ece:	400a      	ands	r2, r1
   13ed0:	801a      	strh	r2, [r3, #0]

	/* Read and mask interrupt flag register */
	uint16_t interrupt_status = rtc_module->MODE2.INTFLAG.reg;
   13ed2:	693b      	ldr	r3, [r7, #16]
   13ed4:	7a1b      	ldrb	r3, [r3, #8]
   13ed6:	b2da      	uxtb	r2, r3
   13ed8:	230c      	movs	r3, #12
   13eda:	18fb      	adds	r3, r7, r3
   13edc:	801a      	strh	r2, [r3, #0]
	interrupt_status &= rtc_module->MODE2.INTENSET.reg;
   13ede:	693b      	ldr	r3, [r7, #16]
   13ee0:	79db      	ldrb	r3, [r3, #7]
   13ee2:	b2db      	uxtb	r3, r3
   13ee4:	b29a      	uxth	r2, r3
   13ee6:	230c      	movs	r3, #12
   13ee8:	18fb      	adds	r3, r7, r3
   13eea:	210c      	movs	r1, #12
   13eec:	1879      	adds	r1, r7, r1
   13eee:	8809      	ldrh	r1, [r1, #0]
   13ef0:	400a      	ands	r2, r1
   13ef2:	801a      	strh	r2, [r3, #0]

	if (interrupt_status & RTC_MODE2_INTFLAG_OVF) {
   13ef4:	230c      	movs	r3, #12
   13ef6:	18fb      	adds	r3, r7, r3
   13ef8:	881b      	ldrh	r3, [r3, #0]
   13efa:	2280      	movs	r2, #128	; 0x80
   13efc:	4013      	ands	r3, r2
   13efe:	d00c      	beq.n	13f1a <_rtc_interrupt_handler+0x7e>
		/* Overflow interrupt */
		if (callback_mask & (1 << RTC_CALENDAR_CALLBACK_OVERFLOW)) {
   13f00:	230e      	movs	r3, #14
   13f02:	18fb      	adds	r3, r7, r3
   13f04:	881b      	ldrh	r3, [r3, #0]
   13f06:	2202      	movs	r2, #2
   13f08:	4013      	ands	r3, r2
   13f0a:	d002      	beq.n	13f12 <_rtc_interrupt_handler+0x76>
			module->callbacks[RTC_CALENDAR_CALLBACK_OVERFLOW]();
   13f0c:	697b      	ldr	r3, [r7, #20]
   13f0e:	68db      	ldr	r3, [r3, #12]
   13f10:	4798      	blx	r3
		}

		/* Clear interrupt flag */
		rtc_module->MODE2.INTFLAG.reg = RTC_MODE2_INTFLAG_OVF;
   13f12:	693b      	ldr	r3, [r7, #16]
   13f14:	2280      	movs	r2, #128	; 0x80
   13f16:	721a      	strb	r2, [r3, #8]
		}
		/* Clear interrupt flag */
		rtc_module->MODE2.INTFLAG.reg = RTC_MODE2_INTFLAG_ALARM(1 << 3);
		#endif
	}
}
   13f18:	e011      	b.n	13f3e <_rtc_interrupt_handler+0xa2>
	} else if (interrupt_status & RTC_MODE2_INTFLAG_ALARM(1 << 0)) {
   13f1a:	230c      	movs	r3, #12
   13f1c:	18fb      	adds	r3, r7, r3
   13f1e:	881b      	ldrh	r3, [r3, #0]
   13f20:	2201      	movs	r2, #1
   13f22:	4013      	ands	r3, r2
   13f24:	d00b      	beq.n	13f3e <_rtc_interrupt_handler+0xa2>
		if (callback_mask & (1 << RTC_CALENDAR_CALLBACK_ALARM_0)) {
   13f26:	230e      	movs	r3, #14
   13f28:	18fb      	adds	r3, r7, r3
   13f2a:	881b      	ldrh	r3, [r3, #0]
   13f2c:	2201      	movs	r2, #1
   13f2e:	4013      	ands	r3, r2
   13f30:	d002      	beq.n	13f38 <_rtc_interrupt_handler+0x9c>
			module->callbacks[RTC_CALENDAR_CALLBACK_ALARM_0]();
   13f32:	697b      	ldr	r3, [r7, #20]
   13f34:	689b      	ldr	r3, [r3, #8]
   13f36:	4798      	blx	r3
		rtc_module->MODE2.INTFLAG.reg = RTC_MODE2_INTFLAG_ALARM(1 << 0);
   13f38:	693b      	ldr	r3, [r7, #16]
   13f3a:	2201      	movs	r2, #1
   13f3c:	721a      	strb	r2, [r3, #8]
}
   13f3e:	46c0      	nop			; (mov r8, r8)
   13f40:	46bd      	mov	sp, r7
   13f42:	b006      	add	sp, #24
   13f44:	bd80      	pop	{r7, pc}
   13f46:	46c0      	nop			; (mov r8, r8)
   13f48:	200055e4 	.word	0x200055e4

00013f4c <RTC_Handler>:
/**
 * \internal ISR handler for RTC
 */
#if (RTC_INST_NUM == 1)
void RTC_Handler(void)
{
   13f4c:	b580      	push	{r7, lr}
   13f4e:	af00      	add	r7, sp, #0
	_rtc_interrupt_handler(0);
   13f50:	2000      	movs	r0, #0
   13f52:	4b02      	ldr	r3, [pc, #8]	; (13f5c <RTC_Handler+0x10>)
   13f54:	4798      	blx	r3
}
   13f56:	46c0      	nop			; (mov r8, r8)
   13f58:	46bd      	mov	sp, r7
   13f5a:	bd80      	pop	{r7, pc}
   13f5c:	00013e9d 	.word	0x00013e9d

00013f60 <system_gclk_chan_get_config_defaults>:
{
   13f60:	b580      	push	{r7, lr}
   13f62:	b082      	sub	sp, #8
   13f64:	af00      	add	r7, sp, #0
   13f66:	6078      	str	r0, [r7, #4]
	config->source_generator = GCLK_GENERATOR_0;
   13f68:	687b      	ldr	r3, [r7, #4]
   13f6a:	2200      	movs	r2, #0
   13f6c:	701a      	strb	r2, [r3, #0]
}
   13f6e:	46c0      	nop			; (mov r8, r8)
   13f70:	46bd      	mov	sp, r7
   13f72:	b002      	add	sp, #8
   13f74:	bd80      	pop	{r7, pc}

00013f76 <long_division>:
/**
 * \internal Calculate 64 bit division, ref can be found in
 * http://en.wikipedia.org/wiki/Division_algorithm#Long_division
 */
static uint64_t long_division(uint64_t n, uint64_t d)
{
   13f76:	b5f0      	push	{r4, r5, r6, r7, lr}
   13f78:	b08d      	sub	sp, #52	; 0x34
   13f7a:	af00      	add	r7, sp, #0
   13f7c:	60b8      	str	r0, [r7, #8]
   13f7e:	60f9      	str	r1, [r7, #12]
   13f80:	603a      	str	r2, [r7, #0]
   13f82:	607b      	str	r3, [r7, #4]
	int32_t i;
	uint64_t q = 0, r = 0, bit_shift;
   13f84:	2300      	movs	r3, #0
   13f86:	2400      	movs	r4, #0
   13f88:	623b      	str	r3, [r7, #32]
   13f8a:	627c      	str	r4, [r7, #36]	; 0x24
   13f8c:	2300      	movs	r3, #0
   13f8e:	2400      	movs	r4, #0
   13f90:	61bb      	str	r3, [r7, #24]
   13f92:	61fc      	str	r4, [r7, #28]
	for (i = 63; i >= 0; i--) {
   13f94:	233f      	movs	r3, #63	; 0x3f
   13f96:	62fb      	str	r3, [r7, #44]	; 0x2c
   13f98:	e053      	b.n	14042 <long_division+0xcc>
		bit_shift = (uint64_t)1 << i;
   13f9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   13f9c:	3b20      	subs	r3, #32
   13f9e:	2b00      	cmp	r3, #0
   13fa0:	db04      	blt.n	13fac <long_division+0x36>
   13fa2:	2201      	movs	r2, #1
   13fa4:	409a      	lsls	r2, r3
   13fa6:	0013      	movs	r3, r2
   13fa8:	617b      	str	r3, [r7, #20]
   13faa:	e00b      	b.n	13fc4 <long_division+0x4e>
   13fac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   13fae:	2220      	movs	r2, #32
   13fb0:	1ad3      	subs	r3, r2, r3
   13fb2:	2201      	movs	r2, #1
   13fb4:	40da      	lsrs	r2, r3
   13fb6:	0013      	movs	r3, r2
   13fb8:	2100      	movs	r1, #0
   13fba:	6afa      	ldr	r2, [r7, #44]	; 0x2c
   13fbc:	4091      	lsls	r1, r2
   13fbe:	000a      	movs	r2, r1
   13fc0:	4313      	orrs	r3, r2
   13fc2:	617b      	str	r3, [r7, #20]
   13fc4:	2201      	movs	r2, #1
   13fc6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   13fc8:	409a      	lsls	r2, r3
   13fca:	0013      	movs	r3, r2
   13fcc:	613b      	str	r3, [r7, #16]

		r = r << 1;
   13fce:	69bb      	ldr	r3, [r7, #24]
   13fd0:	69fc      	ldr	r4, [r7, #28]
   13fd2:	18db      	adds	r3, r3, r3
   13fd4:	4164      	adcs	r4, r4
   13fd6:	61bb      	str	r3, [r7, #24]
   13fd8:	61fc      	str	r4, [r7, #28]

		if (n & bit_shift) {
   13fda:	68bb      	ldr	r3, [r7, #8]
   13fdc:	693a      	ldr	r2, [r7, #16]
   13fde:	401a      	ands	r2, r3
   13fe0:	0015      	movs	r5, r2
   13fe2:	68fb      	ldr	r3, [r7, #12]
   13fe4:	697a      	ldr	r2, [r7, #20]
   13fe6:	401a      	ands	r2, r3
   13fe8:	0016      	movs	r6, r2
   13fea:	002b      	movs	r3, r5
   13fec:	4333      	orrs	r3, r6
   13fee:	d007      	beq.n	14000 <long_division+0x8a>
			r |= 0x01;
   13ff0:	69bb      	ldr	r3, [r7, #24]
   13ff2:	2201      	movs	r2, #1
   13ff4:	4313      	orrs	r3, r2
   13ff6:	61bb      	str	r3, [r7, #24]
   13ff8:	69fb      	ldr	r3, [r7, #28]
   13ffa:	2200      	movs	r2, #0
   13ffc:	4313      	orrs	r3, r2
   13ffe:	61fb      	str	r3, [r7, #28]
		}

		if (r >= d) {
   14000:	687a      	ldr	r2, [r7, #4]
   14002:	69fb      	ldr	r3, [r7, #28]
   14004:	429a      	cmp	r2, r3
   14006:	d819      	bhi.n	1403c <long_division+0xc6>
   14008:	687a      	ldr	r2, [r7, #4]
   1400a:	69fb      	ldr	r3, [r7, #28]
   1400c:	429a      	cmp	r2, r3
   1400e:	d103      	bne.n	14018 <long_division+0xa2>
   14010:	683a      	ldr	r2, [r7, #0]
   14012:	69bb      	ldr	r3, [r7, #24]
   14014:	429a      	cmp	r2, r3
   14016:	d811      	bhi.n	1403c <long_division+0xc6>
			r = r - d;
   14018:	69b9      	ldr	r1, [r7, #24]
   1401a:	69fa      	ldr	r2, [r7, #28]
   1401c:	683b      	ldr	r3, [r7, #0]
   1401e:	687c      	ldr	r4, [r7, #4]
   14020:	1ac9      	subs	r1, r1, r3
   14022:	41a2      	sbcs	r2, r4
   14024:	000b      	movs	r3, r1
   14026:	0014      	movs	r4, r2
   14028:	61bb      	str	r3, [r7, #24]
   1402a:	61fc      	str	r4, [r7, #28]
			q |= bit_shift;
   1402c:	6a3a      	ldr	r2, [r7, #32]
   1402e:	693b      	ldr	r3, [r7, #16]
   14030:	4313      	orrs	r3, r2
   14032:	623b      	str	r3, [r7, #32]
   14034:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   14036:	697b      	ldr	r3, [r7, #20]
   14038:	4313      	orrs	r3, r2
   1403a:	627b      	str	r3, [r7, #36]	; 0x24
	for (i = 63; i >= 0; i--) {
   1403c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   1403e:	3b01      	subs	r3, #1
   14040:	62fb      	str	r3, [r7, #44]	; 0x2c
   14042:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   14044:	2b00      	cmp	r3, #0
   14046:	daa8      	bge.n	13f9a <long_division+0x24>
		}
	}

	return q;
   14048:	6a3b      	ldr	r3, [r7, #32]
   1404a:	6a7c      	ldr	r4, [r7, #36]	; 0x24
}
   1404c:	0018      	movs	r0, r3
   1404e:	0021      	movs	r1, r4
   14050:	46bd      	mov	sp, r7
   14052:	b00d      	add	sp, #52	; 0x34
   14054:	bdf0      	pop	{r4, r5, r6, r7, pc}

00014056 <_sercom_get_sync_baud_val>:
 */
enum status_code _sercom_get_sync_baud_val(
		const uint32_t baudrate,
		const uint32_t external_clock,
		uint16_t *const baudvalue)
{
   14056:	b580      	push	{r7, lr}
   14058:	b086      	sub	sp, #24
   1405a:	af00      	add	r7, sp, #0
   1405c:	60f8      	str	r0, [r7, #12]
   1405e:	60b9      	str	r1, [r7, #8]
   14060:	607a      	str	r2, [r7, #4]
	/* Baud value variable */
	uint16_t baud_calculated = 0;
   14062:	2316      	movs	r3, #22
   14064:	18fb      	adds	r3, r7, r3
   14066:	2200      	movs	r2, #0
   14068:	801a      	strh	r2, [r3, #0]
	uint32_t clock_value = external_clock;
   1406a:	68bb      	ldr	r3, [r7, #8]
   1406c:	613b      	str	r3, [r7, #16]


	/* Check if baudrate is outside of valid range */
	if (baudrate > (external_clock / 2)) {
   1406e:	68bb      	ldr	r3, [r7, #8]
   14070:	085a      	lsrs	r2, r3, #1
   14072:	68fb      	ldr	r3, [r7, #12]
   14074:	429a      	cmp	r2, r3
   14076:	d201      	bcs.n	1407c <_sercom_get_sync_baud_val+0x26>
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
   14078:	2340      	movs	r3, #64	; 0x40
   1407a:	e026      	b.n	140ca <_sercom_get_sync_baud_val+0x74>
	}

	/* Calculate BAUD value from clock frequency and baudrate */
	clock_value = external_clock / 2;
   1407c:	68bb      	ldr	r3, [r7, #8]
   1407e:	085b      	lsrs	r3, r3, #1
   14080:	613b      	str	r3, [r7, #16]
	while (clock_value >= baudrate) {
   14082:	e00a      	b.n	1409a <_sercom_get_sync_baud_val+0x44>
		clock_value = clock_value - baudrate;
   14084:	693a      	ldr	r2, [r7, #16]
   14086:	68fb      	ldr	r3, [r7, #12]
   14088:	1ad3      	subs	r3, r2, r3
   1408a:	613b      	str	r3, [r7, #16]
		baud_calculated++;
   1408c:	2316      	movs	r3, #22
   1408e:	18fb      	adds	r3, r7, r3
   14090:	881a      	ldrh	r2, [r3, #0]
   14092:	2316      	movs	r3, #22
   14094:	18fb      	adds	r3, r7, r3
   14096:	3201      	adds	r2, #1
   14098:	801a      	strh	r2, [r3, #0]
	while (clock_value >= baudrate) {
   1409a:	693a      	ldr	r2, [r7, #16]
   1409c:	68fb      	ldr	r3, [r7, #12]
   1409e:	429a      	cmp	r2, r3
   140a0:	d2f0      	bcs.n	14084 <_sercom_get_sync_baud_val+0x2e>
	}
	baud_calculated = baud_calculated - 1;
   140a2:	2316      	movs	r3, #22
   140a4:	18fb      	adds	r3, r7, r3
   140a6:	2216      	movs	r2, #22
   140a8:	18ba      	adds	r2, r7, r2
   140aa:	8812      	ldrh	r2, [r2, #0]
   140ac:	3a01      	subs	r2, #1
   140ae:	801a      	strh	r2, [r3, #0]

	/* Check if BAUD value is more than 255, which is maximum
	 * for synchronous mode */
	if (baud_calculated > 0xFF) {
   140b0:	2316      	movs	r3, #22
   140b2:	18fb      	adds	r3, r7, r3
   140b4:	881b      	ldrh	r3, [r3, #0]
   140b6:	2bff      	cmp	r3, #255	; 0xff
   140b8:	d901      	bls.n	140be <_sercom_get_sync_baud_val+0x68>
		/* Return with an error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
   140ba:	2340      	movs	r3, #64	; 0x40
   140bc:	e005      	b.n	140ca <_sercom_get_sync_baud_val+0x74>
	} else {
		*baudvalue = baud_calculated;
   140be:	687b      	ldr	r3, [r7, #4]
   140c0:	2216      	movs	r2, #22
   140c2:	18ba      	adds	r2, r7, r2
   140c4:	8812      	ldrh	r2, [r2, #0]
   140c6:	801a      	strh	r2, [r3, #0]
		return STATUS_OK;
   140c8:	2300      	movs	r3, #0
	}
}
   140ca:	0018      	movs	r0, r3
   140cc:	46bd      	mov	sp, r7
   140ce:	b006      	add	sp, #24
   140d0:	bd80      	pop	{r7, pc}
	...

000140d4 <_sercom_get_async_baud_val>:
		const uint32_t baudrate,
		const uint32_t peripheral_clock,
		uint16_t *const baudval,
		enum sercom_asynchronous_operation_mode mode,
		enum sercom_asynchronous_sample_num sample_num)
{
   140d4:	b5f0      	push	{r4, r5, r6, r7, lr}
   140d6:	b0a1      	sub	sp, #132	; 0x84
   140d8:	af00      	add	r7, sp, #0
   140da:	64f8      	str	r0, [r7, #76]	; 0x4c
   140dc:	64b9      	str	r1, [r7, #72]	; 0x48
   140de:	647a      	str	r2, [r7, #68]	; 0x44
   140e0:	2243      	movs	r2, #67	; 0x43
   140e2:	18ba      	adds	r2, r7, r2
   140e4:	7013      	strb	r3, [r2, #0]
	/* Temporary variables  */
	uint64_t ratio = 0;
   140e6:	2300      	movs	r3, #0
   140e8:	2400      	movs	r4, #0
   140ea:	673b      	str	r3, [r7, #112]	; 0x70
   140ec:	677c      	str	r4, [r7, #116]	; 0x74
	uint64_t scale = 0;
   140ee:	2300      	movs	r3, #0
   140f0:	2400      	movs	r4, #0
   140f2:	66bb      	str	r3, [r7, #104]	; 0x68
   140f4:	66fc      	str	r4, [r7, #108]	; 0x6c
	uint64_t baud_calculated = 0;
   140f6:	2300      	movs	r3, #0
   140f8:	2400      	movs	r4, #0
   140fa:	67bb      	str	r3, [r7, #120]	; 0x78
   140fc:	67fc      	str	r4, [r7, #124]	; 0x7c
	uint8_t baud_fp;
	uint32_t baud_int = 0;
   140fe:	2300      	movs	r3, #0
   14100:	667b      	str	r3, [r7, #100]	; 0x64
	uint64_t temp1;

	/* Check if the baudrate is outside of valid range */
	if ((baudrate * sample_num) > peripheral_clock) {
   14102:	2358      	movs	r3, #88	; 0x58
   14104:	2240      	movs	r2, #64	; 0x40
   14106:	4694      	mov	ip, r2
   14108:	44bc      	add	ip, r7
   1410a:	4463      	add	r3, ip
   1410c:	781a      	ldrb	r2, [r3, #0]
   1410e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   14110:	435a      	muls	r2, r3
   14112:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   14114:	429a      	cmp	r2, r3
   14116:	d901      	bls.n	1411c <_sercom_get_async_baud_val+0x48>
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
   14118:	2340      	movs	r3, #64	; 0x40
   1411a:	e0b3      	b.n	14284 <_sercom_get_async_baud_val+0x1b0>
	}

	if(mode == SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC) {
   1411c:	2343      	movs	r3, #67	; 0x43
   1411e:	18fb      	adds	r3, r7, r3
   14120:	781b      	ldrb	r3, [r3, #0]
   14122:	2b00      	cmp	r3, #0
   14124:	d13d      	bne.n	141a2 <_sercom_get_async_baud_val+0xce>
		/* Calculate the BAUD value */
		temp1 = ((sample_num * (uint64_t)baudrate) << SHIFT);
   14126:	2358      	movs	r3, #88	; 0x58
   14128:	2240      	movs	r2, #64	; 0x40
   1412a:	4694      	mov	ip, r2
   1412c:	44bc      	add	ip, r7
   1412e:	4463      	add	r3, ip
   14130:	781b      	ldrb	r3, [r3, #0]
   14132:	b2db      	uxtb	r3, r3
   14134:	613b      	str	r3, [r7, #16]
   14136:	2300      	movs	r3, #0
   14138:	617b      	str	r3, [r7, #20]
   1413a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   1413c:	60bb      	str	r3, [r7, #8]
   1413e:	2300      	movs	r3, #0
   14140:	60fb      	str	r3, [r7, #12]
   14142:	4c52      	ldr	r4, [pc, #328]	; (1428c <_sercom_get_async_baud_val+0x1b8>)
   14144:	68ba      	ldr	r2, [r7, #8]
   14146:	68fb      	ldr	r3, [r7, #12]
   14148:	6938      	ldr	r0, [r7, #16]
   1414a:	6979      	ldr	r1, [r7, #20]
   1414c:	47a0      	blx	r4
   1414e:	0003      	movs	r3, r0
   14150:	000c      	movs	r4, r1
   14152:	001b      	movs	r3, r3
   14154:	65fb      	str	r3, [r7, #92]	; 0x5c
   14156:	2300      	movs	r3, #0
   14158:	65bb      	str	r3, [r7, #88]	; 0x58
		ratio = long_division(temp1, peripheral_clock);
   1415a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   1415c:	603b      	str	r3, [r7, #0]
   1415e:	2300      	movs	r3, #0
   14160:	607b      	str	r3, [r7, #4]
   14162:	6db8      	ldr	r0, [r7, #88]	; 0x58
   14164:	6df9      	ldr	r1, [r7, #92]	; 0x5c
   14166:	683a      	ldr	r2, [r7, #0]
   14168:	687b      	ldr	r3, [r7, #4]
   1416a:	4c49      	ldr	r4, [pc, #292]	; (14290 <_sercom_get_async_baud_val+0x1bc>)
   1416c:	47a0      	blx	r4
   1416e:	0003      	movs	r3, r0
   14170:	000c      	movs	r4, r1
   14172:	673b      	str	r3, [r7, #112]	; 0x70
   14174:	677c      	str	r4, [r7, #116]	; 0x74
		scale = ((uint64_t)1 << SHIFT) - ratio;
   14176:	2100      	movs	r1, #0
   14178:	2201      	movs	r2, #1
   1417a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
   1417c:	6f7c      	ldr	r4, [r7, #116]	; 0x74
   1417e:	1ac9      	subs	r1, r1, r3
   14180:	41a2      	sbcs	r2, r4
   14182:	000b      	movs	r3, r1
   14184:	0014      	movs	r4, r2
   14186:	66bb      	str	r3, [r7, #104]	; 0x68
   14188:	66fc      	str	r4, [r7, #108]	; 0x6c
		baud_calculated = (65536 * scale) >> SHIFT;
   1418a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   1418c:	0c1b      	lsrs	r3, r3, #16
   1418e:	6efa      	ldr	r2, [r7, #108]	; 0x6c
   14190:	0416      	lsls	r6, r2, #16
   14192:	431e      	orrs	r6, r3
   14194:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   14196:	041d      	lsls	r5, r3, #16
   14198:	0033      	movs	r3, r6
   1419a:	67bb      	str	r3, [r7, #120]	; 0x78
   1419c:	2300      	movs	r3, #0
   1419e:	67fb      	str	r3, [r7, #124]	; 0x7c
   141a0:	e06a      	b.n	14278 <_sercom_get_async_baud_val+0x1a4>
	} else if(mode == SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL) {
   141a2:	2343      	movs	r3, #67	; 0x43
   141a4:	18fb      	adds	r3, r7, r3
   141a6:	781b      	ldrb	r3, [r3, #0]
   141a8:	2b01      	cmp	r3, #1
   141aa:	d165      	bne.n	14278 <_sercom_get_async_baud_val+0x1a4>
		temp1 = ((uint64_t)baudrate * sample_num);
   141ac:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   141ae:	633b      	str	r3, [r7, #48]	; 0x30
   141b0:	2300      	movs	r3, #0
   141b2:	637b      	str	r3, [r7, #52]	; 0x34
   141b4:	2358      	movs	r3, #88	; 0x58
   141b6:	2240      	movs	r2, #64	; 0x40
   141b8:	4694      	mov	ip, r2
   141ba:	44bc      	add	ip, r7
   141bc:	4463      	add	r3, ip
   141be:	781b      	ldrb	r3, [r3, #0]
   141c0:	b2db      	uxtb	r3, r3
   141c2:	62bb      	str	r3, [r7, #40]	; 0x28
   141c4:	2300      	movs	r3, #0
   141c6:	62fb      	str	r3, [r7, #44]	; 0x2c
   141c8:	4c30      	ldr	r4, [pc, #192]	; (1428c <_sercom_get_async_baud_val+0x1b8>)
   141ca:	6aba      	ldr	r2, [r7, #40]	; 0x28
   141cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   141ce:	6b38      	ldr	r0, [r7, #48]	; 0x30
   141d0:	6b79      	ldr	r1, [r7, #52]	; 0x34
   141d2:	47a0      	blx	r4
   141d4:	0003      	movs	r3, r0
   141d6:	000c      	movs	r4, r1
   141d8:	65bb      	str	r3, [r7, #88]	; 0x58
   141da:	65fc      	str	r4, [r7, #92]	; 0x5c
		baud_int = long_division( peripheral_clock, temp1);
   141dc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   141de:	623b      	str	r3, [r7, #32]
   141e0:	2300      	movs	r3, #0
   141e2:	627b      	str	r3, [r7, #36]	; 0x24
   141e4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
   141e6:	6dfc      	ldr	r4, [r7, #92]	; 0x5c
   141e8:	001a      	movs	r2, r3
   141ea:	0023      	movs	r3, r4
   141ec:	6a38      	ldr	r0, [r7, #32]
   141ee:	6a79      	ldr	r1, [r7, #36]	; 0x24
   141f0:	4c27      	ldr	r4, [pc, #156]	; (14290 <_sercom_get_async_baud_val+0x1bc>)
   141f2:	47a0      	blx	r4
   141f4:	0003      	movs	r3, r0
   141f6:	000c      	movs	r4, r1
   141f8:	667b      	str	r3, [r7, #100]	; 0x64
		if(baud_int > BAUD_INT_MAX) {
   141fa:	6e7a      	ldr	r2, [r7, #100]	; 0x64
   141fc:	2380      	movs	r3, #128	; 0x80
   141fe:	019b      	lsls	r3, r3, #6
   14200:	429a      	cmp	r2, r3
   14202:	d901      	bls.n	14208 <_sercom_get_async_baud_val+0x134>
				return STATUS_ERR_BAUDRATE_UNAVAILABLE;
   14204:	2340      	movs	r3, #64	; 0x40
   14206:	e03d      	b.n	14284 <_sercom_get_async_baud_val+0x1b0>
		}
		temp1 = long_division( 8 * (uint64_t)peripheral_clock, temp1);
   14208:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   1420a:	61bb      	str	r3, [r7, #24]
   1420c:	2300      	movs	r3, #0
   1420e:	61fb      	str	r3, [r7, #28]
   14210:	69b9      	ldr	r1, [r7, #24]
   14212:	69fa      	ldr	r2, [r7, #28]
   14214:	000b      	movs	r3, r1
   14216:	0f5b      	lsrs	r3, r3, #29
   14218:	0010      	movs	r0, r2
   1421a:	00c0      	lsls	r0, r0, #3
   1421c:	63f8      	str	r0, [r7, #60]	; 0x3c
   1421e:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
   14220:	4318      	orrs	r0, r3
   14222:	63f8      	str	r0, [r7, #60]	; 0x3c
   14224:	000b      	movs	r3, r1
   14226:	00db      	lsls	r3, r3, #3
   14228:	63bb      	str	r3, [r7, #56]	; 0x38
   1422a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
   1422c:	6dfc      	ldr	r4, [r7, #92]	; 0x5c
   1422e:	001a      	movs	r2, r3
   14230:	0023      	movs	r3, r4
   14232:	6bb8      	ldr	r0, [r7, #56]	; 0x38
   14234:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
   14236:	4c16      	ldr	r4, [pc, #88]	; (14290 <_sercom_get_async_baud_val+0x1bc>)
   14238:	47a0      	blx	r4
   1423a:	0003      	movs	r3, r0
   1423c:	000c      	movs	r4, r1
   1423e:	65bb      	str	r3, [r7, #88]	; 0x58
   14240:	65fc      	str	r4, [r7, #92]	; 0x5c
		baud_fp = temp1 - 8 * baud_int;
   14242:	6dbb      	ldr	r3, [r7, #88]	; 0x58
   14244:	6dfc      	ldr	r4, [r7, #92]	; 0x5c
   14246:	b2d9      	uxtb	r1, r3
   14248:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   1424a:	b2db      	uxtb	r3, r3
   1424c:	00db      	lsls	r3, r3, #3
   1424e:	b2da      	uxtb	r2, r3
   14250:	2317      	movs	r3, #23
   14252:	2040      	movs	r0, #64	; 0x40
   14254:	4684      	mov	ip, r0
   14256:	44bc      	add	ip, r7
   14258:	4463      	add	r3, ip
   1425a:	1a8a      	subs	r2, r1, r2
   1425c:	701a      	strb	r2, [r3, #0]
		baud_calculated = baud_int | (baud_fp << 13);
   1425e:	2317      	movs	r3, #23
   14260:	2240      	movs	r2, #64	; 0x40
   14262:	4694      	mov	ip, r2
   14264:	44bc      	add	ip, r7
   14266:	4463      	add	r3, ip
   14268:	781b      	ldrb	r3, [r3, #0]
   1426a:	035b      	lsls	r3, r3, #13
   1426c:	001a      	movs	r2, r3
   1426e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   14270:	4313      	orrs	r3, r2
   14272:	67bb      	str	r3, [r7, #120]	; 0x78
   14274:	2300      	movs	r3, #0
   14276:	67fb      	str	r3, [r7, #124]	; 0x7c
	}

	*baudval = baud_calculated;
   14278:	6fbb      	ldr	r3, [r7, #120]	; 0x78
   1427a:	6ffc      	ldr	r4, [r7, #124]	; 0x7c
   1427c:	b29a      	uxth	r2, r3
   1427e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   14280:	801a      	strh	r2, [r3, #0]
	return STATUS_OK;
   14282:	2300      	movs	r3, #0
}
   14284:	0018      	movs	r0, r3
   14286:	46bd      	mov	sp, r7
   14288:	b021      	add	sp, #132	; 0x84
   1428a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1428c:	0001fb2d 	.word	0x0001fb2d
   14290:	00013f77 	.word	0x00013f77

00014294 <sercom_set_gclk_generator>:
 *                                         forced.
 */
enum status_code sercom_set_gclk_generator(
		const enum gclk_generator generator_source,
		const bool force_change)
{
   14294:	b580      	push	{r7, lr}
   14296:	b084      	sub	sp, #16
   14298:	af00      	add	r7, sp, #0
   1429a:	0002      	movs	r2, r0
   1429c:	1dfb      	adds	r3, r7, #7
   1429e:	701a      	strb	r2, [r3, #0]
   142a0:	1dbb      	adds	r3, r7, #6
   142a2:	1c0a      	adds	r2, r1, #0
   142a4:	701a      	strb	r2, [r3, #0]
	/* Check if valid option */
	if (!_sercom_config.generator_is_set || force_change) {
   142a6:	4b1a      	ldr	r3, [pc, #104]	; (14310 <sercom_set_gclk_generator+0x7c>)
   142a8:	781b      	ldrb	r3, [r3, #0]
   142aa:	2201      	movs	r2, #1
   142ac:	4053      	eors	r3, r2
   142ae:	b2db      	uxtb	r3, r3
   142b0:	2b00      	cmp	r3, #0
   142b2:	d103      	bne.n	142bc <sercom_set_gclk_generator+0x28>
   142b4:	1dbb      	adds	r3, r7, #6
   142b6:	781b      	ldrb	r3, [r3, #0]
   142b8:	2b00      	cmp	r3, #0
   142ba:	d01b      	beq.n	142f4 <sercom_set_gclk_generator+0x60>
		/* Create and fill a GCLK configuration structure for the new config */
		struct system_gclk_chan_config gclk_chan_conf;
		system_gclk_chan_get_config_defaults(&gclk_chan_conf);
   142bc:	230c      	movs	r3, #12
   142be:	18fb      	adds	r3, r7, r3
   142c0:	0018      	movs	r0, r3
   142c2:	4b14      	ldr	r3, [pc, #80]	; (14314 <sercom_set_gclk_generator+0x80>)
   142c4:	4798      	blx	r3
		gclk_chan_conf.source_generator = generator_source;
   142c6:	230c      	movs	r3, #12
   142c8:	18fb      	adds	r3, r7, r3
   142ca:	1dfa      	adds	r2, r7, #7
   142cc:	7812      	ldrb	r2, [r2, #0]
   142ce:	701a      	strb	r2, [r3, #0]
		system_gclk_chan_set_config(SERCOM_GCLK_ID, &gclk_chan_conf);
   142d0:	230c      	movs	r3, #12
   142d2:	18fb      	adds	r3, r7, r3
   142d4:	0019      	movs	r1, r3
   142d6:	2013      	movs	r0, #19
   142d8:	4b0f      	ldr	r3, [pc, #60]	; (14318 <sercom_set_gclk_generator+0x84>)
   142da:	4798      	blx	r3
		system_gclk_chan_enable(SERCOM_GCLK_ID);
   142dc:	2013      	movs	r0, #19
   142de:	4b0f      	ldr	r3, [pc, #60]	; (1431c <sercom_set_gclk_generator+0x88>)
   142e0:	4798      	blx	r3

		/* Save config */
		_sercom_config.generator_source = generator_source;
   142e2:	4b0b      	ldr	r3, [pc, #44]	; (14310 <sercom_set_gclk_generator+0x7c>)
   142e4:	1dfa      	adds	r2, r7, #7
   142e6:	7812      	ldrb	r2, [r2, #0]
   142e8:	705a      	strb	r2, [r3, #1]
		_sercom_config.generator_is_set = true;
   142ea:	4b09      	ldr	r3, [pc, #36]	; (14310 <sercom_set_gclk_generator+0x7c>)
   142ec:	2201      	movs	r2, #1
   142ee:	701a      	strb	r2, [r3, #0]

		return STATUS_OK;
   142f0:	2300      	movs	r3, #0
   142f2:	e008      	b.n	14306 <sercom_set_gclk_generator+0x72>
	} else if (generator_source == _sercom_config.generator_source) {
   142f4:	4b06      	ldr	r3, [pc, #24]	; (14310 <sercom_set_gclk_generator+0x7c>)
   142f6:	785b      	ldrb	r3, [r3, #1]
   142f8:	1dfa      	adds	r2, r7, #7
   142fa:	7812      	ldrb	r2, [r2, #0]
   142fc:	429a      	cmp	r2, r3
   142fe:	d101      	bne.n	14304 <sercom_set_gclk_generator+0x70>
		/* Return status OK if same config */
		return STATUS_OK;
   14300:	2300      	movs	r3, #0
   14302:	e000      	b.n	14306 <sercom_set_gclk_generator+0x72>
	}

	/* Return invalid config to already initialized GCLK */
	return STATUS_ERR_ALREADY_INITIALIZED;
   14304:	231d      	movs	r3, #29
}
   14306:	0018      	movs	r0, r3
   14308:	46bd      	mov	sp, r7
   1430a:	b004      	add	sp, #16
   1430c:	bd80      	pop	{r7, pc}
   1430e:	46c0      	nop			; (mov r8, r8)
   14310:	20003d3c 	.word	0x20003d3c
   14314:	00013f61 	.word	0x00013f61
   14318:	00016d6d 	.word	0x00016d6d
   1431c:	00016db1 	.word	0x00016db1

00014320 <_sercom_get_default_pad>:
 *
 */
uint32_t _sercom_get_default_pad(
		Sercom *const sercom_module,
		const uint8_t pad)
{
   14320:	b580      	push	{r7, lr}
   14322:	b082      	sub	sp, #8
   14324:	af00      	add	r7, sp, #0
   14326:	6078      	str	r0, [r7, #4]
   14328:	000a      	movs	r2, r1
   1432a:	1cfb      	adds	r3, r7, #3
   1432c:	701a      	strb	r2, [r3, #0]
	switch ((uintptr_t)sercom_module) {
   1432e:	687b      	ldr	r3, [r7, #4]
   14330:	4a4d      	ldr	r2, [pc, #308]	; (14468 <_sercom_get_default_pad+0x148>)
   14332:	4293      	cmp	r3, r2
   14334:	d03f      	beq.n	143b6 <_sercom_get_default_pad+0x96>
   14336:	4a4c      	ldr	r2, [pc, #304]	; (14468 <_sercom_get_default_pad+0x148>)
   14338:	4293      	cmp	r3, r2
   1433a:	d806      	bhi.n	1434a <_sercom_get_default_pad+0x2a>
   1433c:	4a4b      	ldr	r2, [pc, #300]	; (1446c <_sercom_get_default_pad+0x14c>)
   1433e:	4293      	cmp	r3, r2
   14340:	d00f      	beq.n	14362 <_sercom_get_default_pad+0x42>
   14342:	4a4b      	ldr	r2, [pc, #300]	; (14470 <_sercom_get_default_pad+0x150>)
   14344:	4293      	cmp	r3, r2
   14346:	d021      	beq.n	1438c <_sercom_get_default_pad+0x6c>
   14348:	e089      	b.n	1445e <_sercom_get_default_pad+0x13e>
   1434a:	4a4a      	ldr	r2, [pc, #296]	; (14474 <_sercom_get_default_pad+0x154>)
   1434c:	4293      	cmp	r3, r2
   1434e:	d100      	bne.n	14352 <_sercom_get_default_pad+0x32>
   14350:	e05b      	b.n	1440a <_sercom_get_default_pad+0xea>
   14352:	4a49      	ldr	r2, [pc, #292]	; (14478 <_sercom_get_default_pad+0x158>)
   14354:	4293      	cmp	r3, r2
   14356:	d100      	bne.n	1435a <_sercom_get_default_pad+0x3a>
   14358:	e06c      	b.n	14434 <_sercom_get_default_pad+0x114>
   1435a:	4a48      	ldr	r2, [pc, #288]	; (1447c <_sercom_get_default_pad+0x15c>)
   1435c:	4293      	cmp	r3, r2
   1435e:	d03f      	beq.n	143e0 <_sercom_get_default_pad+0xc0>
   14360:	e07d      	b.n	1445e <_sercom_get_default_pad+0x13e>
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
   14362:	1cfb      	adds	r3, r7, #3
   14364:	781b      	ldrb	r3, [r3, #0]
   14366:	2b01      	cmp	r3, #1
   14368:	d00a      	beq.n	14380 <_sercom_get_default_pad+0x60>
   1436a:	dc02      	bgt.n	14372 <_sercom_get_default_pad+0x52>
   1436c:	2b00      	cmp	r3, #0
   1436e:	d005      	beq.n	1437c <_sercom_get_default_pad+0x5c>
   14370:	e075      	b.n	1445e <_sercom_get_default_pad+0x13e>
   14372:	2b02      	cmp	r3, #2
   14374:	d006      	beq.n	14384 <_sercom_get_default_pad+0x64>
   14376:	2b03      	cmp	r3, #3
   14378:	d006      	beq.n	14388 <_sercom_get_default_pad+0x68>
   1437a:	e070      	b.n	1445e <_sercom_get_default_pad+0x13e>
   1437c:	4b40      	ldr	r3, [pc, #256]	; (14480 <_sercom_get_default_pad+0x160>)
   1437e:	e06f      	b.n	14460 <_sercom_get_default_pad+0x140>
   14380:	4b40      	ldr	r3, [pc, #256]	; (14484 <_sercom_get_default_pad+0x164>)
   14382:	e06d      	b.n	14460 <_sercom_get_default_pad+0x140>
   14384:	4b40      	ldr	r3, [pc, #256]	; (14488 <_sercom_get_default_pad+0x168>)
   14386:	e06b      	b.n	14460 <_sercom_get_default_pad+0x140>
   14388:	4b40      	ldr	r3, [pc, #256]	; (1448c <_sercom_get_default_pad+0x16c>)
   1438a:	e069      	b.n	14460 <_sercom_get_default_pad+0x140>
   1438c:	1cfb      	adds	r3, r7, #3
   1438e:	781b      	ldrb	r3, [r3, #0]
   14390:	2b01      	cmp	r3, #1
   14392:	d00a      	beq.n	143aa <_sercom_get_default_pad+0x8a>
   14394:	dc02      	bgt.n	1439c <_sercom_get_default_pad+0x7c>
   14396:	2b00      	cmp	r3, #0
   14398:	d005      	beq.n	143a6 <_sercom_get_default_pad+0x86>
   1439a:	e060      	b.n	1445e <_sercom_get_default_pad+0x13e>
   1439c:	2b02      	cmp	r3, #2
   1439e:	d006      	beq.n	143ae <_sercom_get_default_pad+0x8e>
   143a0:	2b03      	cmp	r3, #3
   143a2:	d006      	beq.n	143b2 <_sercom_get_default_pad+0x92>
   143a4:	e05b      	b.n	1445e <_sercom_get_default_pad+0x13e>
   143a6:	2303      	movs	r3, #3
   143a8:	e05a      	b.n	14460 <_sercom_get_default_pad+0x140>
   143aa:	4b39      	ldr	r3, [pc, #228]	; (14490 <_sercom_get_default_pad+0x170>)
   143ac:	e058      	b.n	14460 <_sercom_get_default_pad+0x140>
   143ae:	4b39      	ldr	r3, [pc, #228]	; (14494 <_sercom_get_default_pad+0x174>)
   143b0:	e056      	b.n	14460 <_sercom_get_default_pad+0x140>
   143b2:	4b39      	ldr	r3, [pc, #228]	; (14498 <_sercom_get_default_pad+0x178>)
   143b4:	e054      	b.n	14460 <_sercom_get_default_pad+0x140>
   143b6:	1cfb      	adds	r3, r7, #3
   143b8:	781b      	ldrb	r3, [r3, #0]
   143ba:	2b01      	cmp	r3, #1
   143bc:	d00a      	beq.n	143d4 <_sercom_get_default_pad+0xb4>
   143be:	dc02      	bgt.n	143c6 <_sercom_get_default_pad+0xa6>
   143c0:	2b00      	cmp	r3, #0
   143c2:	d005      	beq.n	143d0 <_sercom_get_default_pad+0xb0>
   143c4:	e04b      	b.n	1445e <_sercom_get_default_pad+0x13e>
   143c6:	2b02      	cmp	r3, #2
   143c8:	d006      	beq.n	143d8 <_sercom_get_default_pad+0xb8>
   143ca:	2b03      	cmp	r3, #3
   143cc:	d006      	beq.n	143dc <_sercom_get_default_pad+0xbc>
   143ce:	e046      	b.n	1445e <_sercom_get_default_pad+0x13e>
   143d0:	4b32      	ldr	r3, [pc, #200]	; (1449c <_sercom_get_default_pad+0x17c>)
   143d2:	e045      	b.n	14460 <_sercom_get_default_pad+0x140>
   143d4:	4b32      	ldr	r3, [pc, #200]	; (144a0 <_sercom_get_default_pad+0x180>)
   143d6:	e043      	b.n	14460 <_sercom_get_default_pad+0x140>
   143d8:	4b32      	ldr	r3, [pc, #200]	; (144a4 <_sercom_get_default_pad+0x184>)
   143da:	e041      	b.n	14460 <_sercom_get_default_pad+0x140>
   143dc:	4b32      	ldr	r3, [pc, #200]	; (144a8 <_sercom_get_default_pad+0x188>)
   143de:	e03f      	b.n	14460 <_sercom_get_default_pad+0x140>
   143e0:	1cfb      	adds	r3, r7, #3
   143e2:	781b      	ldrb	r3, [r3, #0]
   143e4:	2b01      	cmp	r3, #1
   143e6:	d00a      	beq.n	143fe <_sercom_get_default_pad+0xde>
   143e8:	dc02      	bgt.n	143f0 <_sercom_get_default_pad+0xd0>
   143ea:	2b00      	cmp	r3, #0
   143ec:	d005      	beq.n	143fa <_sercom_get_default_pad+0xda>
   143ee:	e036      	b.n	1445e <_sercom_get_default_pad+0x13e>
   143f0:	2b02      	cmp	r3, #2
   143f2:	d006      	beq.n	14402 <_sercom_get_default_pad+0xe2>
   143f4:	2b03      	cmp	r3, #3
   143f6:	d006      	beq.n	14406 <_sercom_get_default_pad+0xe6>
   143f8:	e031      	b.n	1445e <_sercom_get_default_pad+0x13e>
   143fa:	4b2c      	ldr	r3, [pc, #176]	; (144ac <_sercom_get_default_pad+0x18c>)
   143fc:	e030      	b.n	14460 <_sercom_get_default_pad+0x140>
   143fe:	4b2c      	ldr	r3, [pc, #176]	; (144b0 <_sercom_get_default_pad+0x190>)
   14400:	e02e      	b.n	14460 <_sercom_get_default_pad+0x140>
   14402:	4b2c      	ldr	r3, [pc, #176]	; (144b4 <_sercom_get_default_pad+0x194>)
   14404:	e02c      	b.n	14460 <_sercom_get_default_pad+0x140>
   14406:	4b2c      	ldr	r3, [pc, #176]	; (144b8 <_sercom_get_default_pad+0x198>)
   14408:	e02a      	b.n	14460 <_sercom_get_default_pad+0x140>
   1440a:	1cfb      	adds	r3, r7, #3
   1440c:	781b      	ldrb	r3, [r3, #0]
   1440e:	2b01      	cmp	r3, #1
   14410:	d00a      	beq.n	14428 <_sercom_get_default_pad+0x108>
   14412:	dc02      	bgt.n	1441a <_sercom_get_default_pad+0xfa>
   14414:	2b00      	cmp	r3, #0
   14416:	d005      	beq.n	14424 <_sercom_get_default_pad+0x104>
   14418:	e021      	b.n	1445e <_sercom_get_default_pad+0x13e>
   1441a:	2b02      	cmp	r3, #2
   1441c:	d006      	beq.n	1442c <_sercom_get_default_pad+0x10c>
   1441e:	2b03      	cmp	r3, #3
   14420:	d006      	beq.n	14430 <_sercom_get_default_pad+0x110>
   14422:	e01c      	b.n	1445e <_sercom_get_default_pad+0x13e>
   14424:	4b25      	ldr	r3, [pc, #148]	; (144bc <_sercom_get_default_pad+0x19c>)
   14426:	e01b      	b.n	14460 <_sercom_get_default_pad+0x140>
   14428:	4b25      	ldr	r3, [pc, #148]	; (144c0 <_sercom_get_default_pad+0x1a0>)
   1442a:	e019      	b.n	14460 <_sercom_get_default_pad+0x140>
   1442c:	4b25      	ldr	r3, [pc, #148]	; (144c4 <_sercom_get_default_pad+0x1a4>)
   1442e:	e017      	b.n	14460 <_sercom_get_default_pad+0x140>
   14430:	4b25      	ldr	r3, [pc, #148]	; (144c8 <_sercom_get_default_pad+0x1a8>)
   14432:	e015      	b.n	14460 <_sercom_get_default_pad+0x140>
   14434:	1cfb      	adds	r3, r7, #3
   14436:	781b      	ldrb	r3, [r3, #0]
   14438:	2b01      	cmp	r3, #1
   1443a:	d00a      	beq.n	14452 <_sercom_get_default_pad+0x132>
   1443c:	dc02      	bgt.n	14444 <_sercom_get_default_pad+0x124>
   1443e:	2b00      	cmp	r3, #0
   14440:	d005      	beq.n	1444e <_sercom_get_default_pad+0x12e>
   14442:	e00c      	b.n	1445e <_sercom_get_default_pad+0x13e>
   14444:	2b02      	cmp	r3, #2
   14446:	d006      	beq.n	14456 <_sercom_get_default_pad+0x136>
   14448:	2b03      	cmp	r3, #3
   1444a:	d006      	beq.n	1445a <_sercom_get_default_pad+0x13a>
   1444c:	e007      	b.n	1445e <_sercom_get_default_pad+0x13e>
   1444e:	4b1f      	ldr	r3, [pc, #124]	; (144cc <_sercom_get_default_pad+0x1ac>)
   14450:	e006      	b.n	14460 <_sercom_get_default_pad+0x140>
   14452:	4b1f      	ldr	r3, [pc, #124]	; (144d0 <_sercom_get_default_pad+0x1b0>)
   14454:	e004      	b.n	14460 <_sercom_get_default_pad+0x140>
   14456:	4b1f      	ldr	r3, [pc, #124]	; (144d4 <_sercom_get_default_pad+0x1b4>)
   14458:	e002      	b.n	14460 <_sercom_get_default_pad+0x140>
   1445a:	4b1f      	ldr	r3, [pc, #124]	; (144d8 <_sercom_get_default_pad+0x1b8>)
   1445c:	e000      	b.n	14460 <_sercom_get_default_pad+0x140>
	}

	Assert(false);
	return 0;
   1445e:	2300      	movs	r3, #0
}
   14460:	0018      	movs	r0, r3
   14462:	46bd      	mov	sp, r7
   14464:	b002      	add	sp, #8
   14466:	bd80      	pop	{r7, pc}
   14468:	42001000 	.word	0x42001000
   1446c:	42000800 	.word	0x42000800
   14470:	42000c00 	.word	0x42000c00
   14474:	42001800 	.word	0x42001800
   14478:	42001c00 	.word	0x42001c00
   1447c:	42001400 	.word	0x42001400
   14480:	00040003 	.word	0x00040003
   14484:	00050003 	.word	0x00050003
   14488:	00060003 	.word	0x00060003
   1448c:	00070003 	.word	0x00070003
   14490:	00010003 	.word	0x00010003
   14494:	001e0003 	.word	0x001e0003
   14498:	001f0003 	.word	0x001f0003
   1449c:	00080003 	.word	0x00080003
   144a0:	00090003 	.word	0x00090003
   144a4:	000a0003 	.word	0x000a0003
   144a8:	000b0003 	.word	0x000b0003
   144ac:	00100003 	.word	0x00100003
   144b0:	00110003 	.word	0x00110003
   144b4:	00120003 	.word	0x00120003
   144b8:	00130003 	.word	0x00130003
   144bc:	000c0003 	.word	0x000c0003
   144c0:	000d0003 	.word	0x000d0003
   144c4:	000e0003 	.word	0x000e0003
   144c8:	000f0003 	.word	0x000f0003
   144cc:	00160003 	.word	0x00160003
   144d0:	00170003 	.word	0x00170003
   144d4:	00180003 	.word	0x00180003
   144d8:	00190003 	.word	0x00190003

000144dc <_sercom_get_sercom_inst_index>:
 *
 * \return Index of given instance.
 */
uint8_t _sercom_get_sercom_inst_index(
		Sercom *const sercom_instance)
{
   144dc:	b590      	push	{r4, r7, lr}
   144de:	b08b      	sub	sp, #44	; 0x2c
   144e0:	af00      	add	r7, sp, #0
   144e2:	6078      	str	r0, [r7, #4]
	/* Save all available SERCOM instances for compare */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;
   144e4:	230c      	movs	r3, #12
   144e6:	18fb      	adds	r3, r7, r3
   144e8:	4a0f      	ldr	r2, [pc, #60]	; (14528 <_sercom_get_sercom_inst_index+0x4c>)
   144ea:	ca13      	ldmia	r2!, {r0, r1, r4}
   144ec:	c313      	stmia	r3!, {r0, r1, r4}
   144ee:	ca13      	ldmia	r2!, {r0, r1, r4}
   144f0:	c313      	stmia	r3!, {r0, r1, r4}

	/* Find index for sercom instance */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
   144f2:	2300      	movs	r3, #0
   144f4:	627b      	str	r3, [r7, #36]	; 0x24
   144f6:	e00e      	b.n	14516 <_sercom_get_sercom_inst_index+0x3a>
		if ((uintptr_t)sercom_instance == (uintptr_t)sercom_instances[i]) {
   144f8:	230c      	movs	r3, #12
   144fa:	18fb      	adds	r3, r7, r3
   144fc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   144fe:	0092      	lsls	r2, r2, #2
   14500:	58d3      	ldr	r3, [r2, r3]
   14502:	001a      	movs	r2, r3
   14504:	687b      	ldr	r3, [r7, #4]
   14506:	429a      	cmp	r2, r3
   14508:	d102      	bne.n	14510 <_sercom_get_sercom_inst_index+0x34>
			return i;
   1450a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1450c:	b2db      	uxtb	r3, r3
   1450e:	e006      	b.n	1451e <_sercom_get_sercom_inst_index+0x42>
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
   14510:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   14512:	3301      	adds	r3, #1
   14514:	627b      	str	r3, [r7, #36]	; 0x24
   14516:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   14518:	2b05      	cmp	r3, #5
   1451a:	d9ed      	bls.n	144f8 <_sercom_get_sercom_inst_index+0x1c>
		}
	}

	/* Invalid data given */
	Assert(false);
	return 0;
   1451c:	2300      	movs	r3, #0
}
   1451e:	0018      	movs	r0, r3
   14520:	46bd      	mov	sp, r7
   14522:	b00b      	add	sp, #44	; 0x2c
   14524:	bd90      	pop	{r4, r7, pc}
   14526:	46c0      	nop			; (mov r8, r8)
   14528:	00025fe4 	.word	0x00025fe4

0001452c <_sercom_default_handler>:
 *
 * \param[in] instance SERCOM instance used.
 */
static void _sercom_default_handler(
		const uint8_t instance)
{
   1452c:	b580      	push	{r7, lr}
   1452e:	b082      	sub	sp, #8
   14530:	af00      	add	r7, sp, #0
   14532:	0002      	movs	r2, r0
   14534:	1dfb      	adds	r3, r7, #7
   14536:	701a      	strb	r2, [r3, #0]
	Assert(false);
}
   14538:	46c0      	nop			; (mov r8, r8)
   1453a:	46bd      	mov	sp, r7
   1453c:	b002      	add	sp, #8
   1453e:	bd80      	pop	{r7, pc}

00014540 <_sercom_set_handler>:
 * \param[in]  interrupt_handler  Pointer to instance callback handler.
 */
void _sercom_set_handler(
		const uint8_t instance,
		const sercom_handler_t interrupt_handler)
{
   14540:	b580      	push	{r7, lr}
   14542:	b084      	sub	sp, #16
   14544:	af00      	add	r7, sp, #0
   14546:	0002      	movs	r2, r0
   14548:	6039      	str	r1, [r7, #0]
   1454a:	1dfb      	adds	r3, r7, #7
   1454c:	701a      	strb	r2, [r3, #0]
	/* Initialize handlers with default handler and device instances with 0 */
	if (_handler_table_initialized == false) {
   1454e:	4b13      	ldr	r3, [pc, #76]	; (1459c <_sercom_set_handler+0x5c>)
   14550:	781b      	ldrb	r3, [r3, #0]
   14552:	2201      	movs	r2, #1
   14554:	4053      	eors	r3, r2
   14556:	b2db      	uxtb	r3, r3
   14558:	2b00      	cmp	r3, #0
   1455a:	d015      	beq.n	14588 <_sercom_set_handler+0x48>
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
   1455c:	2300      	movs	r3, #0
   1455e:	60fb      	str	r3, [r7, #12]
   14560:	e00c      	b.n	1457c <_sercom_set_handler+0x3c>
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
   14562:	4b0f      	ldr	r3, [pc, #60]	; (145a0 <_sercom_set_handler+0x60>)
   14564:	68fa      	ldr	r2, [r7, #12]
   14566:	0092      	lsls	r2, r2, #2
   14568:	490e      	ldr	r1, [pc, #56]	; (145a4 <_sercom_set_handler+0x64>)
   1456a:	50d1      	str	r1, [r2, r3]
			_sercom_instances[i] = NULL;
   1456c:	4b0e      	ldr	r3, [pc, #56]	; (145a8 <_sercom_set_handler+0x68>)
   1456e:	68fa      	ldr	r2, [r7, #12]
   14570:	0092      	lsls	r2, r2, #2
   14572:	2100      	movs	r1, #0
   14574:	50d1      	str	r1, [r2, r3]
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
   14576:	68fb      	ldr	r3, [r7, #12]
   14578:	3301      	adds	r3, #1
   1457a:	60fb      	str	r3, [r7, #12]
   1457c:	68fb      	ldr	r3, [r7, #12]
   1457e:	2b05      	cmp	r3, #5
   14580:	d9ef      	bls.n	14562 <_sercom_set_handler+0x22>
		}

		_handler_table_initialized = true;
   14582:	4b06      	ldr	r3, [pc, #24]	; (1459c <_sercom_set_handler+0x5c>)
   14584:	2201      	movs	r2, #1
   14586:	701a      	strb	r2, [r3, #0]
	}

	/* Save interrupt handler */
	_sercom_interrupt_handlers[instance] = interrupt_handler;
   14588:	1dfb      	adds	r3, r7, #7
   1458a:	781a      	ldrb	r2, [r3, #0]
   1458c:	4b04      	ldr	r3, [pc, #16]	; (145a0 <_sercom_set_handler+0x60>)
   1458e:	0092      	lsls	r2, r2, #2
   14590:	6839      	ldr	r1, [r7, #0]
   14592:	50d1      	str	r1, [r2, r3]
}
   14594:	46c0      	nop			; (mov r8, r8)
   14596:	46bd      	mov	sp, r7
   14598:	b004      	add	sp, #16
   1459a:	bd80      	pop	{r7, pc}
   1459c:	20003d3e 	.word	0x20003d3e
   145a0:	20003d40 	.word	0x20003d40
   145a4:	0001452d 	.word	0x0001452d
   145a8:	200055e8 	.word	0x200055e8

000145ac <_sercom_get_interrupt_vector>:
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM6
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM7
 */
enum system_interrupt_vector _sercom_get_interrupt_vector(
		Sercom *const sercom_instance)
{
   145ac:	b590      	push	{r4, r7, lr}
   145ae:	b085      	sub	sp, #20
   145b0:	af00      	add	r7, sp, #0
   145b2:	6078      	str	r0, [r7, #4]
	const uint8_t sercom_int_vectors[SERCOM_INST_NUM] =
   145b4:	2308      	movs	r3, #8
   145b6:	18fb      	adds	r3, r7, r3
   145b8:	4a0b      	ldr	r2, [pc, #44]	; (145e8 <_sercom_get_interrupt_vector+0x3c>)
   145ba:	6811      	ldr	r1, [r2, #0]
   145bc:	6019      	str	r1, [r3, #0]
   145be:	8892      	ldrh	r2, [r2, #4]
   145c0:	809a      	strh	r2, [r3, #4]
		{
			MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_VECT_NUM, ~)
		};

	/* Retrieve the index of the SERCOM being requested */
	uint8_t instance_index = _sercom_get_sercom_inst_index(sercom_instance);
   145c2:	230f      	movs	r3, #15
   145c4:	18fc      	adds	r4, r7, r3
   145c6:	687b      	ldr	r3, [r7, #4]
   145c8:	0018      	movs	r0, r3
   145ca:	4b08      	ldr	r3, [pc, #32]	; (145ec <_sercom_get_interrupt_vector+0x40>)
   145cc:	4798      	blx	r3
   145ce:	0003      	movs	r3, r0
   145d0:	7023      	strb	r3, [r4, #0]

	/* Get the vector number from the lookup table for the requested SERCOM */
	return (enum system_interrupt_vector)sercom_int_vectors[instance_index];
   145d2:	230f      	movs	r3, #15
   145d4:	18fb      	adds	r3, r7, r3
   145d6:	781b      	ldrb	r3, [r3, #0]
   145d8:	2208      	movs	r2, #8
   145da:	18ba      	adds	r2, r7, r2
   145dc:	5cd3      	ldrb	r3, [r2, r3]
   145de:	b25b      	sxtb	r3, r3
}
   145e0:	0018      	movs	r0, r3
   145e2:	46bd      	mov	sp, r7
   145e4:	b005      	add	sp, #20
   145e6:	bd90      	pop	{r4, r7, pc}
   145e8:	00025ffc 	.word	0x00025ffc
   145ec:	000144dd 	.word	0x000144dd

000145f0 <SERCOM0_Handler>:

/** Auto-generate a set of interrupt handlers for each SERCOM in the device */
MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_HANDLER, ~)
   145f0:	b580      	push	{r7, lr}
   145f2:	af00      	add	r7, sp, #0
   145f4:	4b03      	ldr	r3, [pc, #12]	; (14604 <SERCOM0_Handler+0x14>)
   145f6:	681b      	ldr	r3, [r3, #0]
   145f8:	2000      	movs	r0, #0
   145fa:	4798      	blx	r3
   145fc:	46c0      	nop			; (mov r8, r8)
   145fe:	46bd      	mov	sp, r7
   14600:	bd80      	pop	{r7, pc}
   14602:	46c0      	nop			; (mov r8, r8)
   14604:	20003d40 	.word	0x20003d40

00014608 <SERCOM1_Handler>:
   14608:	b580      	push	{r7, lr}
   1460a:	af00      	add	r7, sp, #0
   1460c:	4b03      	ldr	r3, [pc, #12]	; (1461c <SERCOM1_Handler+0x14>)
   1460e:	685b      	ldr	r3, [r3, #4]
   14610:	2001      	movs	r0, #1
   14612:	4798      	blx	r3
   14614:	46c0      	nop			; (mov r8, r8)
   14616:	46bd      	mov	sp, r7
   14618:	bd80      	pop	{r7, pc}
   1461a:	46c0      	nop			; (mov r8, r8)
   1461c:	20003d40 	.word	0x20003d40

00014620 <SERCOM2_Handler>:
   14620:	b580      	push	{r7, lr}
   14622:	af00      	add	r7, sp, #0
   14624:	4b03      	ldr	r3, [pc, #12]	; (14634 <SERCOM2_Handler+0x14>)
   14626:	689b      	ldr	r3, [r3, #8]
   14628:	2002      	movs	r0, #2
   1462a:	4798      	blx	r3
   1462c:	46c0      	nop			; (mov r8, r8)
   1462e:	46bd      	mov	sp, r7
   14630:	bd80      	pop	{r7, pc}
   14632:	46c0      	nop			; (mov r8, r8)
   14634:	20003d40 	.word	0x20003d40

00014638 <SERCOM3_Handler>:
   14638:	b580      	push	{r7, lr}
   1463a:	af00      	add	r7, sp, #0
   1463c:	4b03      	ldr	r3, [pc, #12]	; (1464c <SERCOM3_Handler+0x14>)
   1463e:	68db      	ldr	r3, [r3, #12]
   14640:	2003      	movs	r0, #3
   14642:	4798      	blx	r3
   14644:	46c0      	nop			; (mov r8, r8)
   14646:	46bd      	mov	sp, r7
   14648:	bd80      	pop	{r7, pc}
   1464a:	46c0      	nop			; (mov r8, r8)
   1464c:	20003d40 	.word	0x20003d40

00014650 <SERCOM4_Handler>:
   14650:	b580      	push	{r7, lr}
   14652:	af00      	add	r7, sp, #0
   14654:	4b03      	ldr	r3, [pc, #12]	; (14664 <SERCOM4_Handler+0x14>)
   14656:	691b      	ldr	r3, [r3, #16]
   14658:	2004      	movs	r0, #4
   1465a:	4798      	blx	r3
   1465c:	46c0      	nop			; (mov r8, r8)
   1465e:	46bd      	mov	sp, r7
   14660:	bd80      	pop	{r7, pc}
   14662:	46c0      	nop			; (mov r8, r8)
   14664:	20003d40 	.word	0x20003d40

00014668 <SERCOM5_Handler>:
   14668:	b580      	push	{r7, lr}
   1466a:	af00      	add	r7, sp, #0
   1466c:	4b03      	ldr	r3, [pc, #12]	; (1467c <SERCOM5_Handler+0x14>)
   1466e:	695b      	ldr	r3, [r3, #20]
   14670:	2005      	movs	r0, #5
   14672:	4798      	blx	r3
   14674:	46c0      	nop			; (mov r8, r8)
   14676:	46bd      	mov	sp, r7
   14678:	bd80      	pop	{r7, pc}
   1467a:	46c0      	nop			; (mov r8, r8)
   1467c:	20003d40 	.word	0x20003d40

00014680 <system_pinmux_get_config_defaults>:
{
   14680:	b580      	push	{r7, lr}
   14682:	b082      	sub	sp, #8
   14684:	af00      	add	r7, sp, #0
   14686:	6078      	str	r0, [r7, #4]
	config->mux_position = SYSTEM_PINMUX_GPIO;
   14688:	687b      	ldr	r3, [r7, #4]
   1468a:	2280      	movs	r2, #128	; 0x80
   1468c:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
   1468e:	687b      	ldr	r3, [r7, #4]
   14690:	2200      	movs	r2, #0
   14692:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
   14694:	687b      	ldr	r3, [r7, #4]
   14696:	2201      	movs	r2, #1
   14698:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
   1469a:	687b      	ldr	r3, [r7, #4]
   1469c:	2200      	movs	r2, #0
   1469e:	70da      	strb	r2, [r3, #3]
}
   146a0:	46c0      	nop			; (mov r8, r8)
   146a2:	46bd      	mov	sp, r7
   146a4:	b002      	add	sp, #8
   146a6:	bd80      	pop	{r7, pc}

000146a8 <system_pinmux_get_group_from_gpio_pin>:
{
   146a8:	b580      	push	{r7, lr}
   146aa:	b084      	sub	sp, #16
   146ac:	af00      	add	r7, sp, #0
   146ae:	0002      	movs	r2, r0
   146b0:	1dfb      	adds	r3, r7, #7
   146b2:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
   146b4:	230f      	movs	r3, #15
   146b6:	18fb      	adds	r3, r7, r3
   146b8:	1dfa      	adds	r2, r7, #7
   146ba:	7812      	ldrb	r2, [r2, #0]
   146bc:	09d2      	lsrs	r2, r2, #7
   146be:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
   146c0:	230e      	movs	r3, #14
   146c2:	18fb      	adds	r3, r7, r3
   146c4:	1dfa      	adds	r2, r7, #7
   146c6:	7812      	ldrb	r2, [r2, #0]
   146c8:	0952      	lsrs	r2, r2, #5
   146ca:	701a      	strb	r2, [r3, #0]
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
   146cc:	4b0d      	ldr	r3, [pc, #52]	; (14704 <system_pinmux_get_group_from_gpio_pin+0x5c>)
   146ce:	60bb      	str	r3, [r7, #8]
	if (port_index < PORT_INST_NUM) {
   146d0:	230f      	movs	r3, #15
   146d2:	18fb      	adds	r3, r7, r3
   146d4:	781b      	ldrb	r3, [r3, #0]
   146d6:	2b00      	cmp	r3, #0
   146d8:	d10f      	bne.n	146fa <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
   146da:	230f      	movs	r3, #15
   146dc:	18fb      	adds	r3, r7, r3
   146de:	781b      	ldrb	r3, [r3, #0]
   146e0:	009b      	lsls	r3, r3, #2
   146e2:	2210      	movs	r2, #16
   146e4:	4694      	mov	ip, r2
   146e6:	44bc      	add	ip, r7
   146e8:	4463      	add	r3, ip
   146ea:	3b08      	subs	r3, #8
   146ec:	681a      	ldr	r2, [r3, #0]
   146ee:	230e      	movs	r3, #14
   146f0:	18fb      	adds	r3, r7, r3
   146f2:	781b      	ldrb	r3, [r3, #0]
   146f4:	01db      	lsls	r3, r3, #7
   146f6:	18d3      	adds	r3, r2, r3
   146f8:	e000      	b.n	146fc <system_pinmux_get_group_from_gpio_pin+0x54>
		return NULL;
   146fa:	2300      	movs	r3, #0
}
   146fc:	0018      	movs	r0, r3
   146fe:	46bd      	mov	sp, r7
   14700:	b004      	add	sp, #16
   14702:	bd80      	pop	{r7, pc}
   14704:	41004400 	.word	0x41004400

00014708 <port_get_group_from_gpio_pin>:
{
   14708:	b580      	push	{r7, lr}
   1470a:	b082      	sub	sp, #8
   1470c:	af00      	add	r7, sp, #0
   1470e:	0002      	movs	r2, r0
   14710:	1dfb      	adds	r3, r7, #7
   14712:	701a      	strb	r2, [r3, #0]
	return system_pinmux_get_group_from_gpio_pin(gpio_pin);
   14714:	1dfb      	adds	r3, r7, #7
   14716:	781b      	ldrb	r3, [r3, #0]
   14718:	0018      	movs	r0, r3
   1471a:	4b03      	ldr	r3, [pc, #12]	; (14728 <port_get_group_from_gpio_pin+0x20>)
   1471c:	4798      	blx	r3
   1471e:	0003      	movs	r3, r0
}
   14720:	0018      	movs	r0, r3
   14722:	46bd      	mov	sp, r7
   14724:	b002      	add	sp, #8
   14726:	bd80      	pop	{r7, pc}
   14728:	000146a9 	.word	0x000146a9

0001472c <port_pin_set_output_level>:
{
   1472c:	b580      	push	{r7, lr}
   1472e:	b084      	sub	sp, #16
   14730:	af00      	add	r7, sp, #0
   14732:	0002      	movs	r2, r0
   14734:	1dfb      	adds	r3, r7, #7
   14736:	701a      	strb	r2, [r3, #0]
   14738:	1dbb      	adds	r3, r7, #6
   1473a:	1c0a      	adds	r2, r1, #0
   1473c:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
   1473e:	1dfb      	adds	r3, r7, #7
   14740:	781b      	ldrb	r3, [r3, #0]
   14742:	0018      	movs	r0, r3
   14744:	4b0d      	ldr	r3, [pc, #52]	; (1477c <port_pin_set_output_level+0x50>)
   14746:	4798      	blx	r3
   14748:	0003      	movs	r3, r0
   1474a:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
   1474c:	1dfb      	adds	r3, r7, #7
   1474e:	781b      	ldrb	r3, [r3, #0]
   14750:	221f      	movs	r2, #31
   14752:	4013      	ands	r3, r2
   14754:	2201      	movs	r2, #1
   14756:	409a      	lsls	r2, r3
   14758:	0013      	movs	r3, r2
   1475a:	60bb      	str	r3, [r7, #8]
	if (level) {
   1475c:	1dbb      	adds	r3, r7, #6
   1475e:	781b      	ldrb	r3, [r3, #0]
   14760:	2b00      	cmp	r3, #0
   14762:	d003      	beq.n	1476c <port_pin_set_output_level+0x40>
		port_base->OUTSET.reg = pin_mask;
   14764:	68fb      	ldr	r3, [r7, #12]
   14766:	68ba      	ldr	r2, [r7, #8]
   14768:	619a      	str	r2, [r3, #24]
}
   1476a:	e002      	b.n	14772 <port_pin_set_output_level+0x46>
		port_base->OUTCLR.reg = pin_mask;
   1476c:	68fb      	ldr	r3, [r7, #12]
   1476e:	68ba      	ldr	r2, [r7, #8]
   14770:	615a      	str	r2, [r3, #20]
}
   14772:	46c0      	nop			; (mov r8, r8)
   14774:	46bd      	mov	sp, r7
   14776:	b004      	add	sp, #16
   14778:	bd80      	pop	{r7, pc}
   1477a:	46c0      	nop			; (mov r8, r8)
   1477c:	00014709 	.word	0x00014709

00014780 <system_gclk_chan_get_config_defaults>:
{
   14780:	b580      	push	{r7, lr}
   14782:	b082      	sub	sp, #8
   14784:	af00      	add	r7, sp, #0
   14786:	6078      	str	r0, [r7, #4]
	config->source_generator = GCLK_GENERATOR_0;
   14788:	687b      	ldr	r3, [r7, #4]
   1478a:	2200      	movs	r2, #0
   1478c:	701a      	strb	r2, [r3, #0]
}
   1478e:	46c0      	nop			; (mov r8, r8)
   14790:	46bd      	mov	sp, r7
   14792:	b002      	add	sp, #8
   14794:	bd80      	pop	{r7, pc}
	...

00014798 <system_apb_clock_set_mask>:
{
   14798:	b580      	push	{r7, lr}
   1479a:	b082      	sub	sp, #8
   1479c:	af00      	add	r7, sp, #0
   1479e:	0002      	movs	r2, r0
   147a0:	6039      	str	r1, [r7, #0]
   147a2:	1dfb      	adds	r3, r7, #7
   147a4:	701a      	strb	r2, [r3, #0]
	switch (bus) {
   147a6:	1dfb      	adds	r3, r7, #7
   147a8:	781b      	ldrb	r3, [r3, #0]
   147aa:	2b01      	cmp	r3, #1
   147ac:	d00a      	beq.n	147c4 <system_apb_clock_set_mask+0x2c>
   147ae:	2b02      	cmp	r3, #2
   147b0:	d00f      	beq.n	147d2 <system_apb_clock_set_mask+0x3a>
   147b2:	2b00      	cmp	r3, #0
   147b4:	d114      	bne.n	147e0 <system_apb_clock_set_mask+0x48>
			PM->APBAMASK.reg |= mask;
   147b6:	4b0e      	ldr	r3, [pc, #56]	; (147f0 <system_apb_clock_set_mask+0x58>)
   147b8:	4a0d      	ldr	r2, [pc, #52]	; (147f0 <system_apb_clock_set_mask+0x58>)
   147ba:	6991      	ldr	r1, [r2, #24]
   147bc:	683a      	ldr	r2, [r7, #0]
   147be:	430a      	orrs	r2, r1
   147c0:	619a      	str	r2, [r3, #24]
			break;
   147c2:	e00f      	b.n	147e4 <system_apb_clock_set_mask+0x4c>
			PM->APBBMASK.reg |= mask;
   147c4:	4b0a      	ldr	r3, [pc, #40]	; (147f0 <system_apb_clock_set_mask+0x58>)
   147c6:	4a0a      	ldr	r2, [pc, #40]	; (147f0 <system_apb_clock_set_mask+0x58>)
   147c8:	69d1      	ldr	r1, [r2, #28]
   147ca:	683a      	ldr	r2, [r7, #0]
   147cc:	430a      	orrs	r2, r1
   147ce:	61da      	str	r2, [r3, #28]
			break;
   147d0:	e008      	b.n	147e4 <system_apb_clock_set_mask+0x4c>
			PM->APBCMASK.reg |= mask;
   147d2:	4b07      	ldr	r3, [pc, #28]	; (147f0 <system_apb_clock_set_mask+0x58>)
   147d4:	4a06      	ldr	r2, [pc, #24]	; (147f0 <system_apb_clock_set_mask+0x58>)
   147d6:	6a11      	ldr	r1, [r2, #32]
   147d8:	683a      	ldr	r2, [r7, #0]
   147da:	430a      	orrs	r2, r1
   147dc:	621a      	str	r2, [r3, #32]
			break;
   147de:	e001      	b.n	147e4 <system_apb_clock_set_mask+0x4c>
			return STATUS_ERR_INVALID_ARG;
   147e0:	2317      	movs	r3, #23
   147e2:	e000      	b.n	147e6 <system_apb_clock_set_mask+0x4e>
	return STATUS_OK;
   147e4:	2300      	movs	r3, #0
}
   147e6:	0018      	movs	r0, r3
   147e8:	46bd      	mov	sp, r7
   147ea:	b002      	add	sp, #8
   147ec:	bd80      	pop	{r7, pc}
   147ee:	46c0      	nop			; (mov r8, r8)
   147f0:	40000400 	.word	0x40000400

000147f4 <system_is_debugger_present>:
{
   147f4:	b580      	push	{r7, lr}
   147f6:	af00      	add	r7, sp, #0
	return DSU->STATUSB.reg & DSU_STATUSB_DBGPRES;
   147f8:	4b05      	ldr	r3, [pc, #20]	; (14810 <system_is_debugger_present+0x1c>)
   147fa:	789b      	ldrb	r3, [r3, #2]
   147fc:	b2db      	uxtb	r3, r3
   147fe:	001a      	movs	r2, r3
   14800:	2302      	movs	r3, #2
   14802:	4013      	ands	r3, r2
   14804:	1e5a      	subs	r2, r3, #1
   14806:	4193      	sbcs	r3, r2
   14808:	b2db      	uxtb	r3, r3
}
   1480a:	0018      	movs	r0, r3
   1480c:	46bd      	mov	sp, r7
   1480e:	bd80      	pop	{r7, pc}
   14810:	41002000 	.word	0x41002000

00014814 <system_interrupt_enable>:
{
   14814:	b580      	push	{r7, lr}
   14816:	b082      	sub	sp, #8
   14818:	af00      	add	r7, sp, #0
   1481a:	0002      	movs	r2, r0
   1481c:	1dfb      	adds	r3, r7, #7
   1481e:	701a      	strb	r2, [r3, #0]
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
   14820:	4b06      	ldr	r3, [pc, #24]	; (1483c <system_interrupt_enable+0x28>)
   14822:	1dfa      	adds	r2, r7, #7
   14824:	7812      	ldrb	r2, [r2, #0]
   14826:	0011      	movs	r1, r2
   14828:	221f      	movs	r2, #31
   1482a:	400a      	ands	r2, r1
   1482c:	2101      	movs	r1, #1
   1482e:	4091      	lsls	r1, r2
   14830:	000a      	movs	r2, r1
   14832:	601a      	str	r2, [r3, #0]
}
   14834:	46c0      	nop			; (mov r8, r8)
   14836:	46bd      	mov	sp, r7
   14838:	b002      	add	sp, #8
   1483a:	bd80      	pop	{r7, pc}
   1483c:	e000e100 	.word	0xe000e100

00014840 <system_interrupt_disable>:
{
   14840:	b580      	push	{r7, lr}
   14842:	b082      	sub	sp, #8
   14844:	af00      	add	r7, sp, #0
   14846:	0002      	movs	r2, r0
   14848:	1dfb      	adds	r3, r7, #7
   1484a:	701a      	strb	r2, [r3, #0]
	NVIC->ICER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
   1484c:	4a07      	ldr	r2, [pc, #28]	; (1486c <system_interrupt_disable+0x2c>)
   1484e:	1dfb      	adds	r3, r7, #7
   14850:	781b      	ldrb	r3, [r3, #0]
   14852:	0019      	movs	r1, r3
   14854:	231f      	movs	r3, #31
   14856:	400b      	ands	r3, r1
   14858:	2101      	movs	r1, #1
   1485a:	4099      	lsls	r1, r3
   1485c:	000b      	movs	r3, r1
   1485e:	0019      	movs	r1, r3
   14860:	2380      	movs	r3, #128	; 0x80
   14862:	50d1      	str	r1, [r2, r3]
}
   14864:	46c0      	nop			; (mov r8, r8)
   14866:	46bd      	mov	sp, r7
   14868:	b002      	add	sp, #8
   1486a:	bd80      	pop	{r7, pc}
   1486c:	e000e100 	.word	0xe000e100

00014870 <spi_is_syncing>:
{
   14870:	b580      	push	{r7, lr}
   14872:	b084      	sub	sp, #16
   14874:	af00      	add	r7, sp, #0
   14876:	6078      	str	r0, [r7, #4]
	SercomSpi *const spi_module = &(module->hw->SPI);
   14878:	687b      	ldr	r3, [r7, #4]
   1487a:	681b      	ldr	r3, [r3, #0]
   1487c:	60fb      	str	r3, [r7, #12]
	return (spi_module->SYNCBUSY.reg);
   1487e:	68fb      	ldr	r3, [r7, #12]
   14880:	69db      	ldr	r3, [r3, #28]
   14882:	1e5a      	subs	r2, r3, #1
   14884:	4193      	sbcs	r3, r2
   14886:	b2db      	uxtb	r3, r3
}
   14888:	0018      	movs	r0, r3
   1488a:	46bd      	mov	sp, r7
   1488c:	b004      	add	sp, #16
   1488e:	bd80      	pop	{r7, pc}

00014890 <spi_enable>:
{
   14890:	b580      	push	{r7, lr}
   14892:	b084      	sub	sp, #16
   14894:	af00      	add	r7, sp, #0
   14896:	6078      	str	r0, [r7, #4]
	SercomSpi *const spi_module = &(module->hw->SPI);
   14898:	687b      	ldr	r3, [r7, #4]
   1489a:	681b      	ldr	r3, [r3, #0]
   1489c:	60fb      	str	r3, [r7, #12]
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
   1489e:	687b      	ldr	r3, [r7, #4]
   148a0:	681b      	ldr	r3, [r3, #0]
   148a2:	0018      	movs	r0, r3
   148a4:	4b0b      	ldr	r3, [pc, #44]	; (148d4 <spi_enable+0x44>)
   148a6:	4798      	blx	r3
   148a8:	0003      	movs	r3, r0
   148aa:	0018      	movs	r0, r3
   148ac:	4b0a      	ldr	r3, [pc, #40]	; (148d8 <spi_enable+0x48>)
   148ae:	4798      	blx	r3
	while (spi_is_syncing(module)) {
   148b0:	46c0      	nop			; (mov r8, r8)
   148b2:	687b      	ldr	r3, [r7, #4]
   148b4:	0018      	movs	r0, r3
   148b6:	4b09      	ldr	r3, [pc, #36]	; (148dc <spi_enable+0x4c>)
   148b8:	4798      	blx	r3
   148ba:	1e03      	subs	r3, r0, #0
   148bc:	d1f9      	bne.n	148b2 <spi_enable+0x22>
	spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_ENABLE;
   148be:	68fb      	ldr	r3, [r7, #12]
   148c0:	681b      	ldr	r3, [r3, #0]
   148c2:	2202      	movs	r2, #2
   148c4:	431a      	orrs	r2, r3
   148c6:	68fb      	ldr	r3, [r7, #12]
   148c8:	601a      	str	r2, [r3, #0]
}
   148ca:	46c0      	nop			; (mov r8, r8)
   148cc:	46bd      	mov	sp, r7
   148ce:	b004      	add	sp, #16
   148d0:	bd80      	pop	{r7, pc}
   148d2:	46c0      	nop			; (mov r8, r8)
   148d4:	000145ad 	.word	0x000145ad
   148d8:	00014815 	.word	0x00014815
   148dc:	00014871 	.word	0x00014871

000148e0 <spi_disable>:
{
   148e0:	b580      	push	{r7, lr}
   148e2:	b084      	sub	sp, #16
   148e4:	af00      	add	r7, sp, #0
   148e6:	6078      	str	r0, [r7, #4]
	SercomSpi *const spi_module = &(module->hw->SPI);
   148e8:	687b      	ldr	r3, [r7, #4]
   148ea:	681b      	ldr	r3, [r3, #0]
   148ec:	60fb      	str	r3, [r7, #12]
	system_interrupt_disable(_sercom_get_interrupt_vector(module->hw));
   148ee:	687b      	ldr	r3, [r7, #4]
   148f0:	681b      	ldr	r3, [r3, #0]
   148f2:	0018      	movs	r0, r3
   148f4:	4b0e      	ldr	r3, [pc, #56]	; (14930 <spi_disable+0x50>)
   148f6:	4798      	blx	r3
   148f8:	0003      	movs	r3, r0
   148fa:	0018      	movs	r0, r3
   148fc:	4b0d      	ldr	r3, [pc, #52]	; (14934 <spi_disable+0x54>)
   148fe:	4798      	blx	r3
	while (spi_is_syncing(module)) {
   14900:	46c0      	nop			; (mov r8, r8)
   14902:	687b      	ldr	r3, [r7, #4]
   14904:	0018      	movs	r0, r3
   14906:	4b0c      	ldr	r3, [pc, #48]	; (14938 <spi_disable+0x58>)
   14908:	4798      	blx	r3
   1490a:	1e03      	subs	r3, r0, #0
   1490c:	d1f9      	bne.n	14902 <spi_disable+0x22>
	spi_module->INTENCLR.reg = SERCOM_SPI_INTENCLR_MASK;
   1490e:	68fb      	ldr	r3, [r7, #12]
   14910:	228f      	movs	r2, #143	; 0x8f
   14912:	751a      	strb	r2, [r3, #20]
	spi_module->INTFLAG.reg = SERCOM_SPI_INTFLAG_MASK;
   14914:	68fb      	ldr	r3, [r7, #12]
   14916:	228f      	movs	r2, #143	; 0x8f
   14918:	761a      	strb	r2, [r3, #24]
	spi_module->CTRLA.reg &= ~SERCOM_SPI_CTRLA_ENABLE;
   1491a:	68fb      	ldr	r3, [r7, #12]
   1491c:	681b      	ldr	r3, [r3, #0]
   1491e:	2202      	movs	r2, #2
   14920:	4393      	bics	r3, r2
   14922:	001a      	movs	r2, r3
   14924:	68fb      	ldr	r3, [r7, #12]
   14926:	601a      	str	r2, [r3, #0]
}
   14928:	46c0      	nop			; (mov r8, r8)
   1492a:	46bd      	mov	sp, r7
   1492c:	b004      	add	sp, #16
   1492e:	bd80      	pop	{r7, pc}
   14930:	000145ad 	.word	0x000145ad
   14934:	00014841 	.word	0x00014841
   14938:	00014871 	.word	0x00014871

0001493c <spi_is_write_complete>:
{
   1493c:	b580      	push	{r7, lr}
   1493e:	b084      	sub	sp, #16
   14940:	af00      	add	r7, sp, #0
   14942:	6078      	str	r0, [r7, #4]
	SercomSpi *const spi_module = &(module->hw->SPI);
   14944:	687b      	ldr	r3, [r7, #4]
   14946:	681b      	ldr	r3, [r3, #0]
   14948:	60fb      	str	r3, [r7, #12]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
   1494a:	68fb      	ldr	r3, [r7, #12]
   1494c:	7e1b      	ldrb	r3, [r3, #24]
   1494e:	b2db      	uxtb	r3, r3
   14950:	001a      	movs	r2, r3
   14952:	2302      	movs	r3, #2
   14954:	4013      	ands	r3, r2
   14956:	1e5a      	subs	r2, r3, #1
   14958:	4193      	sbcs	r3, r2
   1495a:	b2db      	uxtb	r3, r3
}
   1495c:	0018      	movs	r0, r3
   1495e:	46bd      	mov	sp, r7
   14960:	b004      	add	sp, #16
   14962:	bd80      	pop	{r7, pc}

00014964 <spi_is_ready_to_write>:
{
   14964:	b580      	push	{r7, lr}
   14966:	b084      	sub	sp, #16
   14968:	af00      	add	r7, sp, #0
   1496a:	6078      	str	r0, [r7, #4]
	SercomSpi *const spi_module = &(module->hw->SPI);
   1496c:	687b      	ldr	r3, [r7, #4]
   1496e:	681b      	ldr	r3, [r3, #0]
   14970:	60fb      	str	r3, [r7, #12]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
   14972:	68fb      	ldr	r3, [r7, #12]
   14974:	7e1b      	ldrb	r3, [r3, #24]
   14976:	b2db      	uxtb	r3, r3
   14978:	001a      	movs	r2, r3
   1497a:	2301      	movs	r3, #1
   1497c:	4013      	ands	r3, r2
   1497e:	1e5a      	subs	r2, r3, #1
   14980:	4193      	sbcs	r3, r2
   14982:	b2db      	uxtb	r3, r3
}
   14984:	0018      	movs	r0, r3
   14986:	46bd      	mov	sp, r7
   14988:	b004      	add	sp, #16
   1498a:	bd80      	pop	{r7, pc}

0001498c <spi_is_ready_to_read>:
{
   1498c:	b580      	push	{r7, lr}
   1498e:	b084      	sub	sp, #16
   14990:	af00      	add	r7, sp, #0
   14992:	6078      	str	r0, [r7, #4]
	SercomSpi *const spi_module = &(module->hw->SPI);
   14994:	687b      	ldr	r3, [r7, #4]
   14996:	681b      	ldr	r3, [r3, #0]
   14998:	60fb      	str	r3, [r7, #12]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
   1499a:	68fb      	ldr	r3, [r7, #12]
   1499c:	7e1b      	ldrb	r3, [r3, #24]
   1499e:	b2db      	uxtb	r3, r3
   149a0:	001a      	movs	r2, r3
   149a2:	2304      	movs	r3, #4
   149a4:	4013      	ands	r3, r2
   149a6:	1e5a      	subs	r2, r3, #1
   149a8:	4193      	sbcs	r3, r2
   149aa:	b2db      	uxtb	r3, r3
}
   149ac:	0018      	movs	r0, r3
   149ae:	46bd      	mov	sp, r7
   149b0:	b004      	add	sp, #16
   149b2:	bd80      	pop	{r7, pc}

000149b4 <spi_write>:
{
   149b4:	b580      	push	{r7, lr}
   149b6:	b084      	sub	sp, #16
   149b8:	af00      	add	r7, sp, #0
   149ba:	6078      	str	r0, [r7, #4]
   149bc:	000a      	movs	r2, r1
   149be:	1cbb      	adds	r3, r7, #2
   149c0:	801a      	strh	r2, [r3, #0]
	SercomSpi *const spi_module = &(module->hw->SPI);
   149c2:	687b      	ldr	r3, [r7, #4]
   149c4:	681b      	ldr	r3, [r3, #0]
   149c6:	60fb      	str	r3, [r7, #12]
	if (!spi_is_ready_to_write(module)) {
   149c8:	687b      	ldr	r3, [r7, #4]
   149ca:	0018      	movs	r0, r3
   149cc:	4b0a      	ldr	r3, [pc, #40]	; (149f8 <spi_write+0x44>)
   149ce:	4798      	blx	r3
   149d0:	0003      	movs	r3, r0
   149d2:	001a      	movs	r2, r3
   149d4:	2301      	movs	r3, #1
   149d6:	4053      	eors	r3, r2
   149d8:	b2db      	uxtb	r3, r3
   149da:	2b00      	cmp	r3, #0
   149dc:	d001      	beq.n	149e2 <spi_write+0x2e>
		return STATUS_BUSY;
   149de:	2305      	movs	r3, #5
   149e0:	e006      	b.n	149f0 <spi_write+0x3c>
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
   149e2:	1cbb      	adds	r3, r7, #2
   149e4:	881b      	ldrh	r3, [r3, #0]
   149e6:	05db      	lsls	r3, r3, #23
   149e8:	0dda      	lsrs	r2, r3, #23
   149ea:	68fb      	ldr	r3, [r7, #12]
   149ec:	629a      	str	r2, [r3, #40]	; 0x28
	return STATUS_OK;
   149ee:	2300      	movs	r3, #0
}
   149f0:	0018      	movs	r0, r3
   149f2:	46bd      	mov	sp, r7
   149f4:	b004      	add	sp, #16
   149f6:	bd80      	pop	{r7, pc}
   149f8:	00014965 	.word	0x00014965

000149fc <spi_read>:
{
   149fc:	b580      	push	{r7, lr}
   149fe:	b084      	sub	sp, #16
   14a00:	af00      	add	r7, sp, #0
   14a02:	6078      	str	r0, [r7, #4]
   14a04:	6039      	str	r1, [r7, #0]
	SercomSpi *const spi_module = &(module->hw->SPI);
   14a06:	687b      	ldr	r3, [r7, #4]
   14a08:	681b      	ldr	r3, [r3, #0]
   14a0a:	60bb      	str	r3, [r7, #8]
	if (!spi_is_ready_to_read(module)) {
   14a0c:	687b      	ldr	r3, [r7, #4]
   14a0e:	0018      	movs	r0, r3
   14a10:	4b1b      	ldr	r3, [pc, #108]	; (14a80 <spi_read+0x84>)
   14a12:	4798      	blx	r3
   14a14:	0003      	movs	r3, r0
   14a16:	001a      	movs	r2, r3
   14a18:	2301      	movs	r3, #1
   14a1a:	4053      	eors	r3, r2
   14a1c:	b2db      	uxtb	r3, r3
   14a1e:	2b00      	cmp	r3, #0
   14a20:	d001      	beq.n	14a26 <spi_read+0x2a>
		return STATUS_ERR_IO;
   14a22:	2310      	movs	r3, #16
   14a24:	e027      	b.n	14a76 <spi_read+0x7a>
	enum status_code retval = STATUS_OK;
   14a26:	230f      	movs	r3, #15
   14a28:	18fb      	adds	r3, r7, r3
   14a2a:	2200      	movs	r2, #0
   14a2c:	701a      	strb	r2, [r3, #0]
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
   14a2e:	68bb      	ldr	r3, [r7, #8]
   14a30:	8b5b      	ldrh	r3, [r3, #26]
   14a32:	b29b      	uxth	r3, r3
   14a34:	001a      	movs	r2, r3
   14a36:	2304      	movs	r3, #4
   14a38:	4013      	ands	r3, r2
   14a3a:	d006      	beq.n	14a4a <spi_read+0x4e>
		retval = STATUS_ERR_OVERFLOW;
   14a3c:	230f      	movs	r3, #15
   14a3e:	18fb      	adds	r3, r7, r3
   14a40:	221e      	movs	r2, #30
   14a42:	701a      	strb	r2, [r3, #0]
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
   14a44:	68bb      	ldr	r3, [r7, #8]
   14a46:	2204      	movs	r2, #4
   14a48:	835a      	strh	r2, [r3, #26]
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
   14a4a:	687b      	ldr	r3, [r7, #4]
   14a4c:	799b      	ldrb	r3, [r3, #6]
   14a4e:	2b01      	cmp	r3, #1
   14a50:	d108      	bne.n	14a64 <spi_read+0x68>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
   14a52:	68bb      	ldr	r3, [r7, #8]
   14a54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   14a56:	b29b      	uxth	r3, r3
   14a58:	05db      	lsls	r3, r3, #23
   14a5a:	0ddb      	lsrs	r3, r3, #23
   14a5c:	b29a      	uxth	r2, r3
   14a5e:	683b      	ldr	r3, [r7, #0]
   14a60:	801a      	strh	r2, [r3, #0]
   14a62:	e005      	b.n	14a70 <spi_read+0x74>
		*rx_data = (uint8_t)spi_module->DATA.reg;
   14a64:	68bb      	ldr	r3, [r7, #8]
   14a66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   14a68:	b2db      	uxtb	r3, r3
   14a6a:	b29a      	uxth	r2, r3
   14a6c:	683b      	ldr	r3, [r7, #0]
   14a6e:	801a      	strh	r2, [r3, #0]
	return retval;
   14a70:	230f      	movs	r3, #15
   14a72:	18fb      	adds	r3, r7, r3
   14a74:	781b      	ldrb	r3, [r3, #0]
}
   14a76:	0018      	movs	r0, r3
   14a78:	46bd      	mov	sp, r7
   14a7a:	b004      	add	sp, #16
   14a7c:	bd80      	pop	{r7, pc}
   14a7e:	46c0      	nop			; (mov r8, r8)
   14a80:	0001498d 	.word	0x0001498d

00014a84 <spi_set_baudrate>:
 * \retval STATUS_OK               If the configuration was written
 */
enum status_code spi_set_baudrate(
		struct spi_module *const module,
		uint32_t baudrate)
{
   14a84:	b590      	push	{r4, r7, lr}
   14a86:	b089      	sub	sp, #36	; 0x24
   14a88:	af00      	add	r7, sp, #0
   14a8a:	6078      	str	r0, [r7, #4]
   14a8c:	6039      	str	r1, [r7, #0]
	Assert(module);
	Assert(baudrate);
	Assert(module->hw);

	/* Value to write to BAUD register */
	uint16_t baud = 0;
   14a8e:	230c      	movs	r3, #12
   14a90:	18fb      	adds	r3, r7, r3
   14a92:	2200      	movs	r2, #0
   14a94:	801a      	strh	r2, [r3, #0]

	SercomSpi *const spi_module = &(module->hw->SPI);
   14a96:	687b      	ldr	r3, [r7, #4]
   14a98:	681b      	ldr	r3, [r3, #0]
   14a9a:	61fb      	str	r3, [r7, #28]

	/* Disable the module */
	spi_disable(module);
   14a9c:	687b      	ldr	r3, [r7, #4]
   14a9e:	0018      	movs	r0, r3
   14aa0:	4b24      	ldr	r3, [pc, #144]	; (14b34 <spi_set_baudrate+0xb0>)
   14aa2:	4798      	blx	r3

	while (spi_is_syncing(module)) {
   14aa4:	46c0      	nop			; (mov r8, r8)
   14aa6:	687b      	ldr	r3, [r7, #4]
   14aa8:	0018      	movs	r0, r3
   14aaa:	4b23      	ldr	r3, [pc, #140]	; (14b38 <spi_set_baudrate+0xb4>)
   14aac:	4798      	blx	r3
   14aae:	1e03      	subs	r3, r0, #0
   14ab0:	d1f9      	bne.n	14aa6 <spi_set_baudrate+0x22>
		/* Wait until the synchronization is complete */
	}

	/* Find frequency of the internal SERCOMi_GCLK_ID_CORE */
	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
   14ab2:	687b      	ldr	r3, [r7, #4]
   14ab4:	681b      	ldr	r3, [r3, #0]
   14ab6:	0018      	movs	r0, r3
   14ab8:	4b20      	ldr	r3, [pc, #128]	; (14b3c <spi_set_baudrate+0xb8>)
   14aba:	4798      	blx	r3
   14abc:	0003      	movs	r3, r0
   14abe:	61bb      	str	r3, [r7, #24]
	uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
   14ac0:	69bb      	ldr	r3, [r7, #24]
   14ac2:	3314      	adds	r3, #20
   14ac4:	617b      	str	r3, [r7, #20]
	uint32_t internal_clock = system_gclk_chan_get_hz(gclk_index);
   14ac6:	697b      	ldr	r3, [r7, #20]
   14ac8:	b2db      	uxtb	r3, r3
   14aca:	0018      	movs	r0, r3
   14acc:	4b1c      	ldr	r3, [pc, #112]	; (14b40 <spi_set_baudrate+0xbc>)
   14ace:	4798      	blx	r3
   14ad0:	0003      	movs	r3, r0
   14ad2:	613b      	str	r3, [r7, #16]

	/* Get baud value, based on baudrate and the internal clock frequency */
	enum status_code error_code = _sercom_get_sync_baud_val(
   14ad4:	230f      	movs	r3, #15
   14ad6:	18fc      	adds	r4, r7, r3
   14ad8:	230c      	movs	r3, #12
   14ada:	18fa      	adds	r2, r7, r3
   14adc:	6939      	ldr	r1, [r7, #16]
   14ade:	683b      	ldr	r3, [r7, #0]
   14ae0:	0018      	movs	r0, r3
   14ae2:	4b18      	ldr	r3, [pc, #96]	; (14b44 <spi_set_baudrate+0xc0>)
   14ae4:	4798      	blx	r3
   14ae6:	0003      	movs	r3, r0
   14ae8:	7023      	strb	r3, [r4, #0]
			baudrate, internal_clock, &baud);

	if (error_code != STATUS_OK) {
   14aea:	230f      	movs	r3, #15
   14aec:	18fb      	adds	r3, r7, r3
   14aee:	781b      	ldrb	r3, [r3, #0]
   14af0:	2b00      	cmp	r3, #0
   14af2:	d001      	beq.n	14af8 <spi_set_baudrate+0x74>
		/* Baud rate calculation error, return status code */
		return STATUS_ERR_INVALID_ARG;
   14af4:	2317      	movs	r3, #23
   14af6:	e018      	b.n	14b2a <spi_set_baudrate+0xa6>
	}

	spi_module->BAUD.reg = (uint8_t)baud;
   14af8:	230c      	movs	r3, #12
   14afa:	18fb      	adds	r3, r7, r3
   14afc:	881b      	ldrh	r3, [r3, #0]
   14afe:	b2da      	uxtb	r2, r3
   14b00:	69fb      	ldr	r3, [r7, #28]
   14b02:	731a      	strb	r2, [r3, #12]

	while (spi_is_syncing(module)) {
   14b04:	46c0      	nop			; (mov r8, r8)
   14b06:	687b      	ldr	r3, [r7, #4]
   14b08:	0018      	movs	r0, r3
   14b0a:	4b0b      	ldr	r3, [pc, #44]	; (14b38 <spi_set_baudrate+0xb4>)
   14b0c:	4798      	blx	r3
   14b0e:	1e03      	subs	r3, r0, #0
   14b10:	d1f9      	bne.n	14b06 <spi_set_baudrate+0x82>
		/* Wait until the synchronization is complete */
	}

	/* Enable the module */
	spi_enable(module);
   14b12:	687b      	ldr	r3, [r7, #4]
   14b14:	0018      	movs	r0, r3
   14b16:	4b0c      	ldr	r3, [pc, #48]	; (14b48 <spi_set_baudrate+0xc4>)
   14b18:	4798      	blx	r3

	while (spi_is_syncing(module)) {
   14b1a:	46c0      	nop			; (mov r8, r8)
   14b1c:	687b      	ldr	r3, [r7, #4]
   14b1e:	0018      	movs	r0, r3
   14b20:	4b05      	ldr	r3, [pc, #20]	; (14b38 <spi_set_baudrate+0xb4>)
   14b22:	4798      	blx	r3
   14b24:	1e03      	subs	r3, r0, #0
   14b26:	d1f9      	bne.n	14b1c <spi_set_baudrate+0x98>
		/* Wait until the synchronization is complete */
	}

	return STATUS_OK;
   14b28:	2300      	movs	r3, #0
}
   14b2a:	0018      	movs	r0, r3
   14b2c:	46bd      	mov	sp, r7
   14b2e:	b009      	add	sp, #36	; 0x24
   14b30:	bd90      	pop	{r4, r7, pc}
   14b32:	46c0      	nop			; (mov r8, r8)
   14b34:	000148e1 	.word	0x000148e1
   14b38:	00014871 	.word	0x00014871
   14b3c:	000144dd 	.word	0x000144dd
   14b40:	00016e91 	.word	0x00016e91
   14b44:	00014057 	.word	0x00014057
   14b48:	00014891 	.word	0x00014891

00014b4c <_spi_set_config>:
 * \retval STATUS_OK               If the configuration was written
 */
static enum status_code _spi_set_config(
		struct spi_module *const module,
		const struct spi_config *const config)
{
   14b4c:	b590      	push	{r4, r7, lr}
   14b4e:	b093      	sub	sp, #76	; 0x4c
   14b50:	af00      	add	r7, sp, #0
   14b52:	6078      	str	r0, [r7, #4]
   14b54:	6039      	str	r1, [r7, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(config);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
   14b56:	687b      	ldr	r3, [r7, #4]
   14b58:	681b      	ldr	r3, [r3, #0]
   14b5a:	637b      	str	r3, [r7, #52]	; 0x34
	Sercom *const hw = module->hw;
   14b5c:	687b      	ldr	r3, [r7, #4]
   14b5e:	681b      	ldr	r3, [r3, #0]
   14b60:	633b      	str	r3, [r7, #48]	; 0x30

	struct system_pinmux_config pin_conf;
	system_pinmux_get_config_defaults(&pin_conf);
   14b62:	231c      	movs	r3, #28
   14b64:	18fb      	adds	r3, r7, r3
   14b66:	0018      	movs	r0, r3
   14b68:	4b75      	ldr	r3, [pc, #468]	; (14d40 <_spi_set_config+0x1f4>)
   14b6a:	4798      	blx	r3
	pin_conf.direction = SYSTEM_PINMUX_PIN_DIR_INPUT;
   14b6c:	231c      	movs	r3, #28
   14b6e:	18fb      	adds	r3, r7, r3
   14b70:	2200      	movs	r2, #0
   14b72:	705a      	strb	r2, [r3, #1]
	if(config->mode == SPI_MODE_SLAVE) {
   14b74:	683b      	ldr	r3, [r7, #0]
   14b76:	781b      	ldrb	r3, [r3, #0]
   14b78:	2b00      	cmp	r3, #0
   14b7a:	d103      	bne.n	14b84 <_spi_set_config+0x38>
		pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
   14b7c:	231c      	movs	r3, #28
   14b7e:	18fb      	adds	r3, r7, r3
   14b80:	2200      	movs	r2, #0
   14b82:	709a      	strb	r2, [r3, #2]
	}

	uint32_t pad_pinmuxes[] = {
			config->pinmux_pad0, config->pinmux_pad1,
   14b84:	683b      	ldr	r3, [r7, #0]
   14b86:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	uint32_t pad_pinmuxes[] = {
   14b88:	230c      	movs	r3, #12
   14b8a:	18fb      	adds	r3, r7, r3
   14b8c:	601a      	str	r2, [r3, #0]
			config->pinmux_pad0, config->pinmux_pad1,
   14b8e:	683b      	ldr	r3, [r7, #0]
   14b90:	6ada      	ldr	r2, [r3, #44]	; 0x2c
	uint32_t pad_pinmuxes[] = {
   14b92:	230c      	movs	r3, #12
   14b94:	18fb      	adds	r3, r7, r3
   14b96:	605a      	str	r2, [r3, #4]
			config->pinmux_pad2, config->pinmux_pad3
   14b98:	683b      	ldr	r3, [r7, #0]
   14b9a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
	uint32_t pad_pinmuxes[] = {
   14b9c:	230c      	movs	r3, #12
   14b9e:	18fb      	adds	r3, r7, r3
   14ba0:	609a      	str	r2, [r3, #8]
			config->pinmux_pad2, config->pinmux_pad3
   14ba2:	683b      	ldr	r3, [r7, #0]
   14ba4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
	uint32_t pad_pinmuxes[] = {
   14ba6:	230c      	movs	r3, #12
   14ba8:	18fb      	adds	r3, r7, r3
   14baa:	60da      	str	r2, [r3, #12]
		};

	/* Configure the SERCOM pins according to the user configuration */
	for (uint8_t pad = 0; pad < 4; pad++) {
   14bac:	2347      	movs	r3, #71	; 0x47
   14bae:	18fb      	adds	r3, r7, r3
   14bb0:	2200      	movs	r2, #0
   14bb2:	701a      	strb	r2, [r3, #0]
   14bb4:	e02c      	b.n	14c10 <_spi_set_config+0xc4>
		uint32_t current_pinmux = pad_pinmuxes[pad];
   14bb6:	2347      	movs	r3, #71	; 0x47
   14bb8:	18fb      	adds	r3, r7, r3
   14bba:	781a      	ldrb	r2, [r3, #0]
   14bbc:	230c      	movs	r3, #12
   14bbe:	18fb      	adds	r3, r7, r3
   14bc0:	0092      	lsls	r2, r2, #2
   14bc2:	58d3      	ldr	r3, [r2, r3]
   14bc4:	643b      	str	r3, [r7, #64]	; 0x40

		if (current_pinmux == PINMUX_DEFAULT) {
   14bc6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   14bc8:	2b00      	cmp	r3, #0
   14bca:	d109      	bne.n	14be0 <_spi_set_config+0x94>
			current_pinmux = _sercom_get_default_pad(hw, pad);
   14bcc:	2347      	movs	r3, #71	; 0x47
   14bce:	18fb      	adds	r3, r7, r3
   14bd0:	781a      	ldrb	r2, [r3, #0]
   14bd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   14bd4:	0011      	movs	r1, r2
   14bd6:	0018      	movs	r0, r3
   14bd8:	4b5a      	ldr	r3, [pc, #360]	; (14d44 <_spi_set_config+0x1f8>)
   14bda:	4798      	blx	r3
   14bdc:	0003      	movs	r3, r0
   14bde:	643b      	str	r3, [r7, #64]	; 0x40
		}

		if (current_pinmux != PINMUX_UNUSED) {
   14be0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   14be2:	3301      	adds	r3, #1
   14be4:	d00d      	beq.n	14c02 <_spi_set_config+0xb6>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
   14be6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   14be8:	b2da      	uxtb	r2, r3
   14bea:	231c      	movs	r3, #28
   14bec:	18fb      	adds	r3, r7, r3
   14bee:	701a      	strb	r2, [r3, #0]
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
   14bf0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   14bf2:	0c1b      	lsrs	r3, r3, #16
   14bf4:	b2db      	uxtb	r3, r3
   14bf6:	221c      	movs	r2, #28
   14bf8:	18ba      	adds	r2, r7, r2
   14bfa:	0011      	movs	r1, r2
   14bfc:	0018      	movs	r0, r3
   14bfe:	4b52      	ldr	r3, [pc, #328]	; (14d48 <_spi_set_config+0x1fc>)
   14c00:	4798      	blx	r3
	for (uint8_t pad = 0; pad < 4; pad++) {
   14c02:	2347      	movs	r3, #71	; 0x47
   14c04:	18fb      	adds	r3, r7, r3
   14c06:	781a      	ldrb	r2, [r3, #0]
   14c08:	2347      	movs	r3, #71	; 0x47
   14c0a:	18fb      	adds	r3, r7, r3
   14c0c:	3201      	adds	r2, #1
   14c0e:	701a      	strb	r2, [r3, #0]
   14c10:	2347      	movs	r3, #71	; 0x47
   14c12:	18fb      	adds	r3, r7, r3
   14c14:	781b      	ldrb	r3, [r3, #0]
   14c16:	2b03      	cmp	r3, #3
   14c18:	d9cd      	bls.n	14bb6 <_spi_set_config+0x6a>
		}
	}

	module->mode             = config->mode;
   14c1a:	683b      	ldr	r3, [r7, #0]
   14c1c:	781a      	ldrb	r2, [r3, #0]
   14c1e:	687b      	ldr	r3, [r7, #4]
   14c20:	715a      	strb	r2, [r3, #5]
	module->character_size   = config->character_size;
   14c22:	683b      	ldr	r3, [r7, #0]
   14c24:	7c1a      	ldrb	r2, [r3, #16]
   14c26:	687b      	ldr	r3, [r7, #4]
   14c28:	719a      	strb	r2, [r3, #6]
	module->receiver_enabled = config->receiver_enable;
   14c2a:	683b      	ldr	r3, [r7, #0]
   14c2c:	7c9a      	ldrb	r2, [r3, #18]
   14c2e:	687b      	ldr	r3, [r7, #4]
   14c30:	71da      	strb	r2, [r3, #7]
#  ifdef FEATURE_SPI_HARDWARE_SLAVE_SELECT
	module->master_slave_select_enable = config->master_slave_select_enable;
   14c32:	683b      	ldr	r3, [r7, #0]
   14c34:	7d1a      	ldrb	r2, [r3, #20]
   14c36:	687b      	ldr	r3, [r7, #4]
   14c38:	721a      	strb	r2, [r3, #8]
#  endif

#  if CONF_SPI_MASTER_ENABLE == true
	/* Value to write to BAUD register */
	uint16_t baud = 0;
   14c3a:	230a      	movs	r3, #10
   14c3c:	18fb      	adds	r3, r7, r3
   14c3e:	2200      	movs	r2, #0
   14c40:	801a      	strh	r2, [r3, #0]
#  endif
	/* Value to write to CTRLA register */
	uint32_t ctrla = 0;
   14c42:	2300      	movs	r3, #0
   14c44:	63fb      	str	r3, [r7, #60]	; 0x3c
	/* Value to write to CTRLB register */
	uint32_t ctrlb = 0;
   14c46:	2300      	movs	r3, #0
   14c48:	63bb      	str	r3, [r7, #56]	; 0x38

# if CONF_SPI_MASTER_ENABLE == true
	/* Find baud value and write it */
	if (config->mode == SPI_MODE_MASTER) {
   14c4a:	683b      	ldr	r3, [r7, #0]
   14c4c:	781b      	ldrb	r3, [r3, #0]
   14c4e:	2b01      	cmp	r3, #1
   14c50:	d129      	bne.n	14ca6 <_spi_set_config+0x15a>
		/* Find frequency of the internal SERCOMi_GCLK_ID_CORE */
		uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
   14c52:	687b      	ldr	r3, [r7, #4]
   14c54:	681b      	ldr	r3, [r3, #0]
   14c56:	0018      	movs	r0, r3
   14c58:	4b3c      	ldr	r3, [pc, #240]	; (14d4c <_spi_set_config+0x200>)
   14c5a:	4798      	blx	r3
   14c5c:	0003      	movs	r3, r0
   14c5e:	62fb      	str	r3, [r7, #44]	; 0x2c
		uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
   14c60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   14c62:	3314      	adds	r3, #20
   14c64:	62bb      	str	r3, [r7, #40]	; 0x28
		uint32_t internal_clock = system_gclk_chan_get_hz(gclk_index);
   14c66:	6abb      	ldr	r3, [r7, #40]	; 0x28
   14c68:	b2db      	uxtb	r3, r3
   14c6a:	0018      	movs	r0, r3
   14c6c:	4b38      	ldr	r3, [pc, #224]	; (14d50 <_spi_set_config+0x204>)
   14c6e:	4798      	blx	r3
   14c70:	0003      	movs	r3, r0
   14c72:	627b      	str	r3, [r7, #36]	; 0x24

		/* Get baud value, based on baudrate and the internal clock frequency */
		enum status_code error_code = _sercom_get_sync_baud_val(
   14c74:	683b      	ldr	r3, [r7, #0]
   14c76:	699b      	ldr	r3, [r3, #24]
   14c78:	2223      	movs	r2, #35	; 0x23
   14c7a:	18bc      	adds	r4, r7, r2
   14c7c:	220a      	movs	r2, #10
   14c7e:	18ba      	adds	r2, r7, r2
   14c80:	6a79      	ldr	r1, [r7, #36]	; 0x24
   14c82:	0018      	movs	r0, r3
   14c84:	4b33      	ldr	r3, [pc, #204]	; (14d54 <_spi_set_config+0x208>)
   14c86:	4798      	blx	r3
   14c88:	0003      	movs	r3, r0
   14c8a:	7023      	strb	r3, [r4, #0]
				config->mode_specific.master.baudrate,
				internal_clock, &baud);

		if (error_code != STATUS_OK) {
   14c8c:	2323      	movs	r3, #35	; 0x23
   14c8e:	18fb      	adds	r3, r7, r3
   14c90:	781b      	ldrb	r3, [r3, #0]
   14c92:	2b00      	cmp	r3, #0
   14c94:	d001      	beq.n	14c9a <_spi_set_config+0x14e>
			/* Baud rate calculation error, return status code */
			return STATUS_ERR_INVALID_ARG;
   14c96:	2317      	movs	r3, #23
   14c98:	e04e      	b.n	14d38 <_spi_set_config+0x1ec>
		}

		spi_module->BAUD.reg = (uint8_t)baud;
   14c9a:	230a      	movs	r3, #10
   14c9c:	18fb      	adds	r3, r7, r3
   14c9e:	881b      	ldrh	r3, [r3, #0]
   14ca0:	b2da      	uxtb	r2, r3
   14ca2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   14ca4:	731a      	strb	r2, [r3, #12]
			ctrlb |= SERCOM_SPI_CTRLB_PLOADEN;
		}
	}
# endif
	/* Set data order */
	ctrla |= config->data_order;
   14ca6:	683b      	ldr	r3, [r7, #0]
   14ca8:	685b      	ldr	r3, [r3, #4]
   14caa:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
   14cac:	4313      	orrs	r3, r2
   14cae:	63fb      	str	r3, [r7, #60]	; 0x3c

	/* Set clock polarity and clock phase */
	ctrla |= config->transfer_mode;
   14cb0:	683b      	ldr	r3, [r7, #0]
   14cb2:	689b      	ldr	r3, [r3, #8]
   14cb4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
   14cb6:	4313      	orrs	r3, r2
   14cb8:	63fb      	str	r3, [r7, #60]	; 0x3c

	/* Set MUX setting */
	ctrla |= config->mux_setting;
   14cba:	683b      	ldr	r3, [r7, #0]
   14cbc:	68db      	ldr	r3, [r3, #12]
   14cbe:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
   14cc0:	4313      	orrs	r3, r2
   14cc2:	63fb      	str	r3, [r7, #60]	; 0x3c

	/* Set SPI character size */
	ctrlb |= config->character_size;
   14cc4:	683b      	ldr	r3, [r7, #0]
   14cc6:	7c1b      	ldrb	r3, [r3, #16]
   14cc8:	001a      	movs	r2, r3
   14cca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   14ccc:	4313      	orrs	r3, r2
   14cce:	63bb      	str	r3, [r7, #56]	; 0x38

	/* Set whether module should run in standby. */
	if (config->run_in_standby || system_is_debugger_present()) {
   14cd0:	683b      	ldr	r3, [r7, #0]
   14cd2:	7c5b      	ldrb	r3, [r3, #17]
   14cd4:	2b00      	cmp	r3, #0
   14cd6:	d103      	bne.n	14ce0 <_spi_set_config+0x194>
   14cd8:	4b1f      	ldr	r3, [pc, #124]	; (14d58 <_spi_set_config+0x20c>)
   14cda:	4798      	blx	r3
   14cdc:	1e03      	subs	r3, r0, #0
   14cde:	d003      	beq.n	14ce8 <_spi_set_config+0x19c>
		ctrla |= SERCOM_SPI_CTRLA_RUNSTDBY;
   14ce0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   14ce2:	2280      	movs	r2, #128	; 0x80
   14ce4:	4313      	orrs	r3, r2
   14ce6:	63fb      	str	r3, [r7, #60]	; 0x3c
	}

	if (config->receiver_enable) {
   14ce8:	683b      	ldr	r3, [r7, #0]
   14cea:	7c9b      	ldrb	r3, [r3, #18]
   14cec:	2b00      	cmp	r3, #0
   14cee:	d004      	beq.n	14cfa <_spi_set_config+0x1ae>
		/* Enable receiver */
		ctrlb |= SERCOM_SPI_CTRLB_RXEN;
   14cf0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   14cf2:	2280      	movs	r2, #128	; 0x80
   14cf4:	0292      	lsls	r2, r2, #10
   14cf6:	4313      	orrs	r3, r2
   14cf8:	63bb      	str	r3, [r7, #56]	; 0x38
	}
#  ifdef FEATURE_SPI_SLAVE_SELECT_LOW_DETECT
	if (config->select_slave_low_detect_enable) {
   14cfa:	683b      	ldr	r3, [r7, #0]
   14cfc:	7cdb      	ldrb	r3, [r3, #19]
   14cfe:	2b00      	cmp	r3, #0
   14d00:	d004      	beq.n	14d0c <_spi_set_config+0x1c0>
		/* Enable Slave Select Low Detect */
		ctrlb |= SERCOM_SPI_CTRLB_SSDE;
   14d02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   14d04:	2280      	movs	r2, #128	; 0x80
   14d06:	0092      	lsls	r2, r2, #2
   14d08:	4313      	orrs	r3, r2
   14d0a:	63bb      	str	r3, [r7, #56]	; 0x38
	}
#  endif
#  ifdef FEATURE_SPI_HARDWARE_SLAVE_SELECT
	if (config->master_slave_select_enable) {
   14d0c:	683b      	ldr	r3, [r7, #0]
   14d0e:	7d1b      	ldrb	r3, [r3, #20]
   14d10:	2b00      	cmp	r3, #0
   14d12:	d004      	beq.n	14d1e <_spi_set_config+0x1d2>
		/* Enable Master Slave Select */
		ctrlb |= SERCOM_SPI_CTRLB_MSSEN;
   14d14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   14d16:	2280      	movs	r2, #128	; 0x80
   14d18:	0192      	lsls	r2, r2, #6
   14d1a:	4313      	orrs	r3, r2
   14d1c:	63bb      	str	r3, [r7, #56]	; 0x38
	}
#  endif
	/* Write CTRLA register */
	spi_module->CTRLA.reg |= ctrla;
   14d1e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   14d20:	681a      	ldr	r2, [r3, #0]
   14d22:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   14d24:	431a      	orrs	r2, r3
   14d26:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   14d28:	601a      	str	r2, [r3, #0]

	/* Write CTRLB register */
	spi_module->CTRLB.reg |= ctrlb;
   14d2a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   14d2c:	685a      	ldr	r2, [r3, #4]
   14d2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   14d30:	431a      	orrs	r2, r3
   14d32:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   14d34:	605a      	str	r2, [r3, #4]

	return STATUS_OK;
   14d36:	2300      	movs	r3, #0
}
   14d38:	0018      	movs	r0, r3
   14d3a:	46bd      	mov	sp, r7
   14d3c:	b013      	add	sp, #76	; 0x4c
   14d3e:	bd90      	pop	{r4, r7, pc}
   14d40:	00014681 	.word	0x00014681
   14d44:	00014321 	.word	0x00014321
   14d48:	000170cd 	.word	0x000170cd
   14d4c:	000144dd 	.word	0x000144dd
   14d50:	00016e91 	.word	0x00016e91
   14d54:	00014057 	.word	0x00014057
   14d58:	000147f5 	.word	0x000147f5

00014d5c <spi_init>:
 */
enum status_code spi_init(
		struct spi_module *const module,
		Sercom *const hw,
		const struct spi_config *const config)
{
   14d5c:	b590      	push	{r4, r7, lr}
   14d5e:	b08b      	sub	sp, #44	; 0x2c
   14d60:	af00      	add	r7, sp, #0
   14d62:	60f8      	str	r0, [r7, #12]
   14d64:	60b9      	str	r1, [r7, #8]
   14d66:	607a      	str	r2, [r7, #4]
	Assert(module);
	Assert(hw);
	Assert(config);

	/* Initialize device instance */
	module->hw = hw;
   14d68:	68fb      	ldr	r3, [r7, #12]
   14d6a:	68ba      	ldr	r2, [r7, #8]
   14d6c:	601a      	str	r2, [r3, #0]

	SercomSpi *const spi_module = &(module->hw->SPI);
   14d6e:	68fb      	ldr	r3, [r7, #12]
   14d70:	681b      	ldr	r3, [r3, #0]
   14d72:	623b      	str	r3, [r7, #32]

	/* Check if module is enabled. */
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_ENABLE) {
   14d74:	6a3b      	ldr	r3, [r7, #32]
   14d76:	681b      	ldr	r3, [r3, #0]
   14d78:	2202      	movs	r2, #2
   14d7a:	4013      	ands	r3, r2
   14d7c:	d001      	beq.n	14d82 <spi_init+0x26>
#  if SPI_CALLBACK_MODE == false
		/* Check if config is valid */
		return _spi_check_config(module, config);
#  else
		return STATUS_ERR_DENIED;
   14d7e:	231c      	movs	r3, #28
   14d80:	e09c      	b.n	14ebc <spi_init+0x160>
#  endif
	}

	/* Check if reset is in progress. */
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_SWRST){
   14d82:	6a3b      	ldr	r3, [r7, #32]
   14d84:	681b      	ldr	r3, [r3, #0]
   14d86:	2201      	movs	r2, #1
   14d88:	4013      	ands	r3, r2
   14d8a:	d001      	beq.n	14d90 <spi_init+0x34>
		return STATUS_BUSY;
   14d8c:	2305      	movs	r3, #5
   14d8e:	e095      	b.n	14ebc <spi_init+0x160>
	}

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
   14d90:	68fb      	ldr	r3, [r7, #12]
   14d92:	681b      	ldr	r3, [r3, #0]
   14d94:	0018      	movs	r0, r3
   14d96:	4b4b      	ldr	r3, [pc, #300]	; (14ec4 <spi_init+0x168>)
   14d98:	4798      	blx	r3
   14d9a:	0003      	movs	r3, r0
   14d9c:	61fb      	str	r3, [r7, #28]
	}
#elif (SAMC20) || (SAML22)
	pm_index     = sercom_index + MCLK_APBCMASK_SERCOM0_Pos;
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
#else
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
   14d9e:	69fb      	ldr	r3, [r7, #28]
   14da0:	3302      	adds	r3, #2
   14da2:	61bb      	str	r3, [r7, #24]
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
   14da4:	69fb      	ldr	r3, [r7, #28]
   14da6:	3314      	adds	r3, #20
   14da8:	617b      	str	r3, [r7, #20]
#  endif
	} else {
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
	}
#else
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
   14daa:	2201      	movs	r2, #1
   14dac:	69bb      	ldr	r3, [r7, #24]
   14dae:	409a      	lsls	r2, r3
   14db0:	0013      	movs	r3, r2
   14db2:	0019      	movs	r1, r3
   14db4:	2002      	movs	r0, #2
   14db6:	4b44      	ldr	r3, [pc, #272]	; (14ec8 <spi_init+0x16c>)
   14db8:	4798      	blx	r3
#endif

	/* Set up the GCLK for the module */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
   14dba:	2310      	movs	r3, #16
   14dbc:	18fb      	adds	r3, r7, r3
   14dbe:	0018      	movs	r0, r3
   14dc0:	4b42      	ldr	r3, [pc, #264]	; (14ecc <spi_init+0x170>)
   14dc2:	4798      	blx	r3
	gclk_chan_conf.source_generator = config->generator_source;
   14dc4:	687b      	ldr	r3, [r7, #4]
   14dc6:	2224      	movs	r2, #36	; 0x24
   14dc8:	5c9a      	ldrb	r2, [r3, r2]
   14dca:	2310      	movs	r3, #16
   14dcc:	18fb      	adds	r3, r7, r3
   14dce:	701a      	strb	r2, [r3, #0]
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
   14dd0:	697b      	ldr	r3, [r7, #20]
   14dd2:	b2db      	uxtb	r3, r3
   14dd4:	2210      	movs	r2, #16
   14dd6:	18ba      	adds	r2, r7, r2
   14dd8:	0011      	movs	r1, r2
   14dda:	0018      	movs	r0, r3
   14ddc:	4b3c      	ldr	r3, [pc, #240]	; (14ed0 <spi_init+0x174>)
   14dde:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
   14de0:	697b      	ldr	r3, [r7, #20]
   14de2:	b2db      	uxtb	r3, r3
   14de4:	0018      	movs	r0, r3
   14de6:	4b3b      	ldr	r3, [pc, #236]	; (14ed4 <spi_init+0x178>)
   14de8:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
   14dea:	687b      	ldr	r3, [r7, #4]
   14dec:	2224      	movs	r2, #36	; 0x24
   14dee:	5c9b      	ldrb	r3, [r3, r2]
   14df0:	2100      	movs	r1, #0
   14df2:	0018      	movs	r0, r3
   14df4:	4b38      	ldr	r3, [pc, #224]	; (14ed8 <spi_init+0x17c>)
   14df6:	4798      	blx	r3

#  if CONF_SPI_MASTER_ENABLE == true
	if (config->mode == SPI_MODE_MASTER) {
   14df8:	687b      	ldr	r3, [r7, #4]
   14dfa:	781b      	ldrb	r3, [r3, #0]
   14dfc:	2b01      	cmp	r3, #1
   14dfe:	d105      	bne.n	14e0c <spi_init+0xb0>
		/* Set the SERCOM in SPI master mode */
		spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_MODE(0x3);
   14e00:	6a3b      	ldr	r3, [r7, #32]
   14e02:	681b      	ldr	r3, [r3, #0]
   14e04:	220c      	movs	r2, #12
   14e06:	431a      	orrs	r2, r3
   14e08:	6a3b      	ldr	r3, [r7, #32]
   14e0a:	601a      	str	r2, [r3, #0]
	/* Temporary variables */
	uint8_t i;
	uint8_t instance_index;

	/* Initialize parameters */
	for (i = 0; i < SPI_CALLBACK_N; i++) {
   14e0c:	2327      	movs	r3, #39	; 0x27
   14e0e:	18fb      	adds	r3, r7, r3
   14e10:	2200      	movs	r2, #0
   14e12:	701a      	strb	r2, [r3, #0]
   14e14:	e010      	b.n	14e38 <spi_init+0xdc>
		module->callback[i]        = NULL;
   14e16:	2327      	movs	r3, #39	; 0x27
   14e18:	18fb      	adds	r3, r7, r3
   14e1a:	781b      	ldrb	r3, [r3, #0]
   14e1c:	68fa      	ldr	r2, [r7, #12]
   14e1e:	3302      	adds	r3, #2
   14e20:	009b      	lsls	r3, r3, #2
   14e22:	18d3      	adds	r3, r2, r3
   14e24:	3304      	adds	r3, #4
   14e26:	2200      	movs	r2, #0
   14e28:	601a      	str	r2, [r3, #0]
	for (i = 0; i < SPI_CALLBACK_N; i++) {
   14e2a:	2327      	movs	r3, #39	; 0x27
   14e2c:	18fb      	adds	r3, r7, r3
   14e2e:	781a      	ldrb	r2, [r3, #0]
   14e30:	2327      	movs	r3, #39	; 0x27
   14e32:	18fb      	adds	r3, r7, r3
   14e34:	3201      	adds	r2, #1
   14e36:	701a      	strb	r2, [r3, #0]
   14e38:	2327      	movs	r3, #39	; 0x27
   14e3a:	18fb      	adds	r3, r7, r3
   14e3c:	781b      	ldrb	r3, [r3, #0]
   14e3e:	2b06      	cmp	r3, #6
   14e40:	d9e9      	bls.n	14e16 <spi_init+0xba>
	}
	module->tx_buffer_ptr              = NULL;
   14e42:	68fb      	ldr	r3, [r7, #12]
   14e44:	2200      	movs	r2, #0
   14e46:	62da      	str	r2, [r3, #44]	; 0x2c
	module->rx_buffer_ptr              = NULL;
   14e48:	68fb      	ldr	r3, [r7, #12]
   14e4a:	2200      	movs	r2, #0
   14e4c:	629a      	str	r2, [r3, #40]	; 0x28
	module->remaining_tx_buffer_length = 0x0000;
   14e4e:	68fb      	ldr	r3, [r7, #12]
   14e50:	2200      	movs	r2, #0
   14e52:	869a      	strh	r2, [r3, #52]	; 0x34
	module->remaining_rx_buffer_length = 0x0000;
   14e54:	68fb      	ldr	r3, [r7, #12]
   14e56:	2200      	movs	r2, #0
   14e58:	861a      	strh	r2, [r3, #48]	; 0x30
	module->registered_callback        = 0x00;
   14e5a:	68fb      	ldr	r3, [r7, #12]
   14e5c:	2236      	movs	r2, #54	; 0x36
   14e5e:	2100      	movs	r1, #0
   14e60:	5499      	strb	r1, [r3, r2]
	module->enabled_callback           = 0x00;
   14e62:	68fb      	ldr	r3, [r7, #12]
   14e64:	2237      	movs	r2, #55	; 0x37
   14e66:	2100      	movs	r1, #0
   14e68:	5499      	strb	r1, [r3, r2]
	module->status                     = STATUS_OK;
   14e6a:	68fb      	ldr	r3, [r7, #12]
   14e6c:	2238      	movs	r2, #56	; 0x38
   14e6e:	2100      	movs	r1, #0
   14e70:	5499      	strb	r1, [r3, r2]
	module->dir                        = SPI_DIRECTION_IDLE;
   14e72:	68fb      	ldr	r3, [r7, #12]
   14e74:	2203      	movs	r2, #3
   14e76:	725a      	strb	r2, [r3, #9]
	module->locked                     = false;
   14e78:	68fb      	ldr	r3, [r7, #12]
   14e7a:	2200      	movs	r2, #0
   14e7c:	711a      	strb	r2, [r3, #4]
	/*
	 * Set interrupt handler and register SPI software module struct in
	 * look-up table
	 */
	instance_index = _sercom_get_sercom_inst_index(module->hw);
   14e7e:	68fb      	ldr	r3, [r7, #12]
   14e80:	681b      	ldr	r3, [r3, #0]
   14e82:	2213      	movs	r2, #19
   14e84:	18bc      	adds	r4, r7, r2
   14e86:	0018      	movs	r0, r3
   14e88:	4b0e      	ldr	r3, [pc, #56]	; (14ec4 <spi_init+0x168>)
   14e8a:	4798      	blx	r3
   14e8c:	0003      	movs	r3, r0
   14e8e:	7023      	strb	r3, [r4, #0]
	_sercom_set_handler(instance_index, _spi_interrupt_handler);
   14e90:	4a12      	ldr	r2, [pc, #72]	; (14edc <spi_init+0x180>)
   14e92:	2313      	movs	r3, #19
   14e94:	18fb      	adds	r3, r7, r3
   14e96:	781b      	ldrb	r3, [r3, #0]
   14e98:	0011      	movs	r1, r2
   14e9a:	0018      	movs	r0, r3
   14e9c:	4b10      	ldr	r3, [pc, #64]	; (14ee0 <spi_init+0x184>)
   14e9e:	4798      	blx	r3
	_sercom_instances[instance_index] = module;
   14ea0:	2313      	movs	r3, #19
   14ea2:	18fb      	adds	r3, r7, r3
   14ea4:	781a      	ldrb	r2, [r3, #0]
   14ea6:	4b0f      	ldr	r3, [pc, #60]	; (14ee4 <spi_init+0x188>)
   14ea8:	0092      	lsls	r2, r2, #2
   14eaa:	68f9      	ldr	r1, [r7, #12]
   14eac:	50d1      	str	r1, [r2, r3]
#endif

	/* Write configuration to module and return status code */
	return _spi_set_config(module, config);
   14eae:	687a      	ldr	r2, [r7, #4]
   14eb0:	68fb      	ldr	r3, [r7, #12]
   14eb2:	0011      	movs	r1, r2
   14eb4:	0018      	movs	r0, r3
   14eb6:	4b0c      	ldr	r3, [pc, #48]	; (14ee8 <spi_init+0x18c>)
   14eb8:	4798      	blx	r3
   14eba:	0003      	movs	r3, r0
}
   14ebc:	0018      	movs	r0, r3
   14ebe:	46bd      	mov	sp, r7
   14ec0:	b00b      	add	sp, #44	; 0x2c
   14ec2:	bd90      	pop	{r4, r7, pc}
   14ec4:	000144dd 	.word	0x000144dd
   14ec8:	00014799 	.word	0x00014799
   14ecc:	00014781 	.word	0x00014781
   14ed0:	00016d6d 	.word	0x00016d6d
   14ed4:	00016db1 	.word	0x00016db1
   14ed8:	00014295 	.word	0x00014295
   14edc:	000153b5 	.word	0x000153b5
   14ee0:	00014541 	.word	0x00014541
   14ee4:	200055e8 	.word	0x200055e8
   14ee8:	00014b4d 	.word	0x00014b4d

00014eec <spi_read_buffer_wait>:
enum status_code spi_read_buffer_wait(
		struct spi_module *const module,
		uint8_t *rx_data,
		uint16_t length,
		uint16_t dummy)
{
   14eec:	b590      	push	{r4, r7, lr}
   14eee:	b087      	sub	sp, #28
   14ef0:	af00      	add	r7, sp, #0
   14ef2:	60f8      	str	r0, [r7, #12]
   14ef4:	60b9      	str	r1, [r7, #8]
   14ef6:	0019      	movs	r1, r3
   14ef8:	1dbb      	adds	r3, r7, #6
   14efa:	801a      	strh	r2, [r3, #0]
   14efc:	1d3b      	adds	r3, r7, #4
   14efe:	1c0a      	adds	r2, r1, #0
   14f00:	801a      	strh	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

#  if SPI_CALLBACK_MODE == true
	if (module->status == STATUS_BUSY) {
   14f02:	68fb      	ldr	r3, [r7, #12]
   14f04:	2238      	movs	r2, #56	; 0x38
   14f06:	5c9b      	ldrb	r3, [r3, r2]
   14f08:	b2db      	uxtb	r3, r3
   14f0a:	2b05      	cmp	r3, #5
   14f0c:	d101      	bne.n	14f12 <spi_read_buffer_wait+0x26>
		/* Check if the SPI module is busy with a job */
		return STATUS_BUSY;
   14f0e:	2305      	movs	r3, #5
   14f10:	e07a      	b.n	15008 <spi_read_buffer_wait+0x11c>
	}
#  endif

	/* Sanity check arguments */
	if (length == 0) {
   14f12:	1dbb      	adds	r3, r7, #6
   14f14:	881b      	ldrh	r3, [r3, #0]
   14f16:	2b00      	cmp	r3, #0
   14f18:	d101      	bne.n	14f1e <spi_read_buffer_wait+0x32>
		return STATUS_ERR_INVALID_ARG;
   14f1a:	2317      	movs	r3, #23
   14f1c:	e074      	b.n	15008 <spi_read_buffer_wait+0x11c>
	}

	if (!(module->receiver_enabled)) {
   14f1e:	68fb      	ldr	r3, [r7, #12]
   14f20:	79db      	ldrb	r3, [r3, #7]
   14f22:	2201      	movs	r2, #1
   14f24:	4053      	eors	r3, r2
   14f26:	b2db      	uxtb	r3, r3
   14f28:	2b00      	cmp	r3, #0
   14f2a:	d001      	beq.n	14f30 <spi_read_buffer_wait+0x44>
		return STATUS_ERR_DENIED;
   14f2c:	231c      	movs	r3, #28
   14f2e:	e06b      	b.n	15008 <spi_read_buffer_wait+0x11c>
	if ((module->mode == SPI_MODE_SLAVE) && (spi_is_write_complete(module))) {
		/* Clear TX complete flag */
		_spi_clear_tx_complete_flag(module);
	}
#  endif
	uint16_t rx_pos = 0;
   14f30:	2316      	movs	r3, #22
   14f32:	18fb      	adds	r3, r7, r3
   14f34:	2200      	movs	r2, #0
   14f36:	801a      	strh	r2, [r3, #0]

	while (length--) {
   14f38:	e05e      	b.n	14ff8 <spi_read_buffer_wait+0x10c>
#  if CONF_SPI_MASTER_ENABLE == true
		if (module->mode == SPI_MODE_MASTER) {
   14f3a:	68fb      	ldr	r3, [r7, #12]
   14f3c:	795b      	ldrb	r3, [r3, #5]
   14f3e:	2b01      	cmp	r3, #1
   14f40:	d112      	bne.n	14f68 <spi_read_buffer_wait+0x7c>
			/* Wait until the module is ready to write a character */
			while (!spi_is_ready_to_write(module)) {
   14f42:	46c0      	nop			; (mov r8, r8)
   14f44:	68fb      	ldr	r3, [r7, #12]
   14f46:	0018      	movs	r0, r3
   14f48:	4b31      	ldr	r3, [pc, #196]	; (15010 <spi_read_buffer_wait+0x124>)
   14f4a:	4798      	blx	r3
   14f4c:	0003      	movs	r3, r0
   14f4e:	001a      	movs	r2, r3
   14f50:	2301      	movs	r3, #1
   14f52:	4053      	eors	r3, r2
   14f54:	b2db      	uxtb	r3, r3
   14f56:	2b00      	cmp	r3, #0
   14f58:	d1f4      	bne.n	14f44 <spi_read_buffer_wait+0x58>
			}

			/* Send dummy SPI character to read in master mode */
			spi_write(module, dummy);
   14f5a:	1d3b      	adds	r3, r7, #4
   14f5c:	881a      	ldrh	r2, [r3, #0]
   14f5e:	68fb      	ldr	r3, [r7, #12]
   14f60:	0011      	movs	r1, r2
   14f62:	0018      	movs	r0, r3
   14f64:	4b2b      	ldr	r3, [pc, #172]	; (15014 <spi_read_buffer_wait+0x128>)
   14f66:	4798      	blx	r3
			}
		}
#  endif

		/* Wait until the module is ready to read a character */
		while (!spi_is_ready_to_read(module)) {
   14f68:	46c0      	nop			; (mov r8, r8)
   14f6a:	68fb      	ldr	r3, [r7, #12]
   14f6c:	0018      	movs	r0, r3
   14f6e:	4b2a      	ldr	r3, [pc, #168]	; (15018 <spi_read_buffer_wait+0x12c>)
   14f70:	4798      	blx	r3
   14f72:	0003      	movs	r3, r0
   14f74:	001a      	movs	r2, r3
   14f76:	2301      	movs	r3, #1
   14f78:	4053      	eors	r3, r2
   14f7a:	b2db      	uxtb	r3, r3
   14f7c:	2b00      	cmp	r3, #0
   14f7e:	d1f4      	bne.n	14f6a <spi_read_buffer_wait+0x7e>
		}

		uint16_t received_data = 0;
   14f80:	2312      	movs	r3, #18
   14f82:	18fb      	adds	r3, r7, r3
   14f84:	2200      	movs	r2, #0
   14f86:	801a      	strh	r2, [r3, #0]
		enum status_code retval = spi_read(module, &received_data);
   14f88:	2315      	movs	r3, #21
   14f8a:	18fc      	adds	r4, r7, r3
   14f8c:	2312      	movs	r3, #18
   14f8e:	18fa      	adds	r2, r7, r3
   14f90:	68fb      	ldr	r3, [r7, #12]
   14f92:	0011      	movs	r1, r2
   14f94:	0018      	movs	r0, r3
   14f96:	4b21      	ldr	r3, [pc, #132]	; (1501c <spi_read_buffer_wait+0x130>)
   14f98:	4798      	blx	r3
   14f9a:	0003      	movs	r3, r0
   14f9c:	7023      	strb	r3, [r4, #0]

		if (retval != STATUS_OK) {
   14f9e:	2315      	movs	r3, #21
   14fa0:	18fb      	adds	r3, r7, r3
   14fa2:	781b      	ldrb	r3, [r3, #0]
   14fa4:	2b00      	cmp	r3, #0
   14fa6:	d003      	beq.n	14fb0 <spi_read_buffer_wait+0xc4>
			/* Overflow, abort */
			return retval;
   14fa8:	2315      	movs	r3, #21
   14faa:	18fb      	adds	r3, r7, r3
   14fac:	781b      	ldrb	r3, [r3, #0]
   14fae:	e02b      	b.n	15008 <spi_read_buffer_wait+0x11c>
		}

		/* Read value will be at least 8-bits long */
		rx_data[rx_pos++] = received_data;
   14fb0:	2316      	movs	r3, #22
   14fb2:	18fb      	adds	r3, r7, r3
   14fb4:	881b      	ldrh	r3, [r3, #0]
   14fb6:	2216      	movs	r2, #22
   14fb8:	18ba      	adds	r2, r7, r2
   14fba:	1c59      	adds	r1, r3, #1
   14fbc:	8011      	strh	r1, [r2, #0]
   14fbe:	001a      	movs	r2, r3
   14fc0:	68bb      	ldr	r3, [r7, #8]
   14fc2:	189b      	adds	r3, r3, r2
   14fc4:	2212      	movs	r2, #18
   14fc6:	18ba      	adds	r2, r7, r2
   14fc8:	8812      	ldrh	r2, [r2, #0]
   14fca:	b2d2      	uxtb	r2, r2
   14fcc:	701a      	strb	r2, [r3, #0]

		/* If 9-bit data, write next received byte to the buffer */
		if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
   14fce:	68fb      	ldr	r3, [r7, #12]
   14fd0:	799b      	ldrb	r3, [r3, #6]
   14fd2:	2b01      	cmp	r3, #1
   14fd4:	d110      	bne.n	14ff8 <spi_read_buffer_wait+0x10c>
			rx_data[rx_pos++] = (received_data >> 8);
   14fd6:	2316      	movs	r3, #22
   14fd8:	18fb      	adds	r3, r7, r3
   14fda:	881b      	ldrh	r3, [r3, #0]
   14fdc:	2216      	movs	r2, #22
   14fde:	18ba      	adds	r2, r7, r2
   14fe0:	1c59      	adds	r1, r3, #1
   14fe2:	8011      	strh	r1, [r2, #0]
   14fe4:	001a      	movs	r2, r3
   14fe6:	68bb      	ldr	r3, [r7, #8]
   14fe8:	189b      	adds	r3, r3, r2
   14fea:	2212      	movs	r2, #18
   14fec:	18ba      	adds	r2, r7, r2
   14fee:	8812      	ldrh	r2, [r2, #0]
   14ff0:	0a12      	lsrs	r2, r2, #8
   14ff2:	b292      	uxth	r2, r2
   14ff4:	b2d2      	uxtb	r2, r2
   14ff6:	701a      	strb	r2, [r3, #0]
	while (length--) {
   14ff8:	1dbb      	adds	r3, r7, #6
   14ffa:	881b      	ldrh	r3, [r3, #0]
   14ffc:	1dba      	adds	r2, r7, #6
   14ffe:	1e59      	subs	r1, r3, #1
   15000:	8011      	strh	r1, [r2, #0]
   15002:	2b00      	cmp	r3, #0
   15004:	d199      	bne.n	14f3a <spi_read_buffer_wait+0x4e>
		}
	}

	return STATUS_OK;
   15006:	2300      	movs	r3, #0
}
   15008:	0018      	movs	r0, r3
   1500a:	46bd      	mov	sp, r7
   1500c:	b007      	add	sp, #28
   1500e:	bd90      	pop	{r4, r7, pc}
   15010:	00014965 	.word	0x00014965
   15014:	000149b5 	.word	0x000149b5
   15018:	0001498d 	.word	0x0001498d
   1501c:	000149fd 	.word	0x000149fd

00015020 <spi_select_slave>:
 */
enum status_code spi_select_slave(
		struct spi_module *const module,
		struct spi_slave_inst *const slave,
		const bool select)
{
   15020:	b580      	push	{r7, lr}
   15022:	b086      	sub	sp, #24
   15024:	af00      	add	r7, sp, #0
   15026:	60f8      	str	r0, [r7, #12]
   15028:	60b9      	str	r1, [r7, #8]
   1502a:	1dfb      	adds	r3, r7, #7
   1502c:	701a      	strb	r2, [r3, #0]
	Assert(module);
	Assert(module->hw);
	Assert(slave);

	/* Check that the SPI module is operating in master mode */
	if (module->mode != SPI_MODE_MASTER) {
   1502e:	68fb      	ldr	r3, [r7, #12]
   15030:	795b      	ldrb	r3, [r3, #5]
   15032:	2b01      	cmp	r3, #1
   15034:	d001      	beq.n	1503a <spi_select_slave+0x1a>
		return STATUS_ERR_UNSUPPORTED_DEV;
   15036:	2315      	movs	r3, #21
   15038:	e05c      	b.n	150f4 <spi_select_slave+0xd4>
	}
#  ifdef FEATURE_SPI_HARDWARE_SLAVE_SELECT
	if(!(module->master_slave_select_enable))
   1503a:	68fb      	ldr	r3, [r7, #12]
   1503c:	7a1b      	ldrb	r3, [r3, #8]
   1503e:	2201      	movs	r2, #1
   15040:	4053      	eors	r3, r2
   15042:	b2db      	uxtb	r3, r3
   15044:	2b00      	cmp	r3, #0
   15046:	d054      	beq.n	150f2 <spi_select_slave+0xd2>
#  endif
	{
		if (select) {
   15048:	1dfb      	adds	r3, r7, #7
   1504a:	781b      	ldrb	r3, [r3, #0]
   1504c:	2b00      	cmp	r3, #0
   1504e:	d04a      	beq.n	150e6 <spi_select_slave+0xc6>
			/* Check if address recognition is enabled */
			if (slave->address_enabled) {
   15050:	68bb      	ldr	r3, [r7, #8]
   15052:	785b      	ldrb	r3, [r3, #1]
   15054:	2b00      	cmp	r3, #0
   15056:	d03f      	beq.n	150d8 <spi_select_slave+0xb8>
				/* Check if the module is ready to write the address */
				if (!spi_is_ready_to_write(module)) {
   15058:	68fb      	ldr	r3, [r7, #12]
   1505a:	0018      	movs	r0, r3
   1505c:	4b27      	ldr	r3, [pc, #156]	; (150fc <spi_select_slave+0xdc>)
   1505e:	4798      	blx	r3
   15060:	0003      	movs	r3, r0
   15062:	001a      	movs	r2, r3
   15064:	2301      	movs	r3, #1
   15066:	4053      	eors	r3, r2
   15068:	b2db      	uxtb	r3, r3
   1506a:	2b00      	cmp	r3, #0
   1506c:	d007      	beq.n	1507e <spi_select_slave+0x5e>
					/* Not ready, do not select slave and return */
					port_pin_set_output_level(slave->ss_pin, true);
   1506e:	68bb      	ldr	r3, [r7, #8]
   15070:	781b      	ldrb	r3, [r3, #0]
   15072:	2101      	movs	r1, #1
   15074:	0018      	movs	r0, r3
   15076:	4b22      	ldr	r3, [pc, #136]	; (15100 <spi_select_slave+0xe0>)
   15078:	4798      	blx	r3
					return STATUS_BUSY;
   1507a:	2305      	movs	r3, #5
   1507c:	e03a      	b.n	150f4 <spi_select_slave+0xd4>
				}

				/* Drive Slave Select low */
				port_pin_set_output_level(slave->ss_pin, false);
   1507e:	68bb      	ldr	r3, [r7, #8]
   15080:	781b      	ldrb	r3, [r3, #0]
   15082:	2100      	movs	r1, #0
   15084:	0018      	movs	r0, r3
   15086:	4b1e      	ldr	r3, [pc, #120]	; (15100 <spi_select_slave+0xe0>)
   15088:	4798      	blx	r3

				/* Write address to slave */
				spi_write(module, slave->address);
   1508a:	68bb      	ldr	r3, [r7, #8]
   1508c:	789b      	ldrb	r3, [r3, #2]
   1508e:	b29a      	uxth	r2, r3
   15090:	68fb      	ldr	r3, [r7, #12]
   15092:	0011      	movs	r1, r2
   15094:	0018      	movs	r0, r3
   15096:	4b1b      	ldr	r3, [pc, #108]	; (15104 <spi_select_slave+0xe4>)
   15098:	4798      	blx	r3

				if (!(module->receiver_enabled)) {
   1509a:	68fb      	ldr	r3, [r7, #12]
   1509c:	79db      	ldrb	r3, [r3, #7]
   1509e:	2201      	movs	r2, #1
   150a0:	4053      	eors	r3, r2
   150a2:	b2db      	uxtb	r3, r3
   150a4:	2b00      	cmp	r3, #0
   150a6:	d024      	beq.n	150f2 <spi_select_slave+0xd2>
					/* Flush contents of shift register shifted back from slave */
					while (!spi_is_ready_to_read(module)) {
   150a8:	46c0      	nop			; (mov r8, r8)
   150aa:	68fb      	ldr	r3, [r7, #12]
   150ac:	0018      	movs	r0, r3
   150ae:	4b16      	ldr	r3, [pc, #88]	; (15108 <spi_select_slave+0xe8>)
   150b0:	4798      	blx	r3
   150b2:	0003      	movs	r3, r0
   150b4:	001a      	movs	r2, r3
   150b6:	2301      	movs	r3, #1
   150b8:	4053      	eors	r3, r2
   150ba:	b2db      	uxtb	r3, r3
   150bc:	2b00      	cmp	r3, #0
   150be:	d1f4      	bne.n	150aa <spi_select_slave+0x8a>
					}
					uint16_t flush = 0;
   150c0:	2316      	movs	r3, #22
   150c2:	18fb      	adds	r3, r7, r3
   150c4:	2200      	movs	r2, #0
   150c6:	801a      	strh	r2, [r3, #0]
					spi_read(module, &flush);
   150c8:	2316      	movs	r3, #22
   150ca:	18fa      	adds	r2, r7, r3
   150cc:	68fb      	ldr	r3, [r7, #12]
   150ce:	0011      	movs	r1, r2
   150d0:	0018      	movs	r0, r3
   150d2:	4b0e      	ldr	r3, [pc, #56]	; (1510c <spi_select_slave+0xec>)
   150d4:	4798      	blx	r3
   150d6:	e00c      	b.n	150f2 <spi_select_slave+0xd2>
				}
			} else {
				/* Drive Slave Select low */
				port_pin_set_output_level(slave->ss_pin, false);
   150d8:	68bb      	ldr	r3, [r7, #8]
   150da:	781b      	ldrb	r3, [r3, #0]
   150dc:	2100      	movs	r1, #0
   150de:	0018      	movs	r0, r3
   150e0:	4b07      	ldr	r3, [pc, #28]	; (15100 <spi_select_slave+0xe0>)
   150e2:	4798      	blx	r3
   150e4:	e005      	b.n	150f2 <spi_select_slave+0xd2>
			}
		} else {
			/* Drive Slave Select high */
			port_pin_set_output_level(slave->ss_pin, true);
   150e6:	68bb      	ldr	r3, [r7, #8]
   150e8:	781b      	ldrb	r3, [r3, #0]
   150ea:	2101      	movs	r1, #1
   150ec:	0018      	movs	r0, r3
   150ee:	4b04      	ldr	r3, [pc, #16]	; (15100 <spi_select_slave+0xe0>)
   150f0:	4798      	blx	r3
		}
	}
	return STATUS_OK;
   150f2:	2300      	movs	r3, #0
}
   150f4:	0018      	movs	r0, r3
   150f6:	46bd      	mov	sp, r7
   150f8:	b006      	add	sp, #24
   150fa:	bd80      	pop	{r7, pc}
   150fc:	00014965 	.word	0x00014965
   15100:	0001472d 	.word	0x0001472d
   15104:	000149b5 	.word	0x000149b5
   15108:	0001498d 	.word	0x0001498d
   1510c:	000149fd 	.word	0x000149fd

00015110 <spi_write_buffer_wait>:
 */
enum status_code spi_write_buffer_wait(
		struct spi_module *const module,
		const uint8_t *tx_data,
		uint16_t length)
{
   15110:	b580      	push	{r7, lr}
   15112:	b086      	sub	sp, #24
   15114:	af00      	add	r7, sp, #0
   15116:	60f8      	str	r0, [r7, #12]
   15118:	60b9      	str	r1, [r7, #8]
   1511a:	1dbb      	adds	r3, r7, #6
   1511c:	801a      	strh	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);

#  if SPI_CALLBACK_MODE == true
	if (module->status == STATUS_BUSY) {
   1511e:	68fb      	ldr	r3, [r7, #12]
   15120:	2238      	movs	r2, #56	; 0x38
   15122:	5c9b      	ldrb	r3, [r3, r2]
   15124:	b2db      	uxtb	r3, r3
   15126:	2b05      	cmp	r3, #5
   15128:	d101      	bne.n	1512e <spi_write_buffer_wait+0x1e>
		/* Check if the SPI module is busy with a job */
		return STATUS_BUSY;
   1512a:	2305      	movs	r3, #5
   1512c:	e087      	b.n	1523e <spi_write_buffer_wait+0x12e>
	}
#  endif

	if (length == 0) {
   1512e:	1dbb      	adds	r3, r7, #6
   15130:	881b      	ldrh	r3, [r3, #0]
   15132:	2b00      	cmp	r3, #0
   15134:	d101      	bne.n	1513a <spi_write_buffer_wait+0x2a>
		return STATUS_ERR_INVALID_ARG;
   15136:	2317      	movs	r3, #23
   15138:	e081      	b.n	1523e <spi_write_buffer_wait+0x12e>
		/* Clear TX complete flag */
		_spi_clear_tx_complete_flag(module);
	}
#  endif

	uint16_t tx_pos = 0;
   1513a:	2316      	movs	r3, #22
   1513c:	18fb      	adds	r3, r7, r3
   1513e:	2200      	movs	r2, #0
   15140:	801a      	strh	r2, [r3, #0]
	uint16_t flush_length = length;
   15142:	2314      	movs	r3, #20
   15144:	18fb      	adds	r3, r7, r3
   15146:	1dba      	adds	r2, r7, #6
   15148:	8812      	ldrh	r2, [r2, #0]
   1514a:	801a      	strh	r2, [r3, #0]

	/* Write block */
	while (length--) {
   1514c:	e05f      	b.n	1520e <spi_write_buffer_wait+0xfe>
			}
		}
#  endif

		/* Wait until the module is ready to write a character */
		while (!spi_is_ready_to_write(module)) {
   1514e:	46c0      	nop			; (mov r8, r8)
   15150:	68fb      	ldr	r3, [r7, #12]
   15152:	0018      	movs	r0, r3
   15154:	4b3c      	ldr	r3, [pc, #240]	; (15248 <spi_write_buffer_wait+0x138>)
   15156:	4798      	blx	r3
   15158:	0003      	movs	r3, r0
   1515a:	001a      	movs	r2, r3
   1515c:	2301      	movs	r3, #1
   1515e:	4053      	eors	r3, r2
   15160:	b2db      	uxtb	r3, r3
   15162:	2b00      	cmp	r3, #0
   15164:	d1f4      	bne.n	15150 <spi_write_buffer_wait+0x40>
		}

		/* Write value will be at least 8-bits long */
		uint16_t data_to_send = tx_data[tx_pos++];
   15166:	2316      	movs	r3, #22
   15168:	18fb      	adds	r3, r7, r3
   1516a:	881b      	ldrh	r3, [r3, #0]
   1516c:	2216      	movs	r2, #22
   1516e:	18ba      	adds	r2, r7, r2
   15170:	1c59      	adds	r1, r3, #1
   15172:	8011      	strh	r1, [r2, #0]
   15174:	001a      	movs	r2, r3
   15176:	68bb      	ldr	r3, [r7, #8]
   15178:	189b      	adds	r3, r3, r2
   1517a:	781a      	ldrb	r2, [r3, #0]
   1517c:	2312      	movs	r3, #18
   1517e:	18fb      	adds	r3, r7, r3
   15180:	801a      	strh	r2, [r3, #0]

		/* If 9-bit data, get next byte to send from the buffer */
		if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
   15182:	68fb      	ldr	r3, [r7, #12]
   15184:	799b      	ldrb	r3, [r3, #6]
   15186:	2b01      	cmp	r3, #1
   15188:	d115      	bne.n	151b6 <spi_write_buffer_wait+0xa6>
			data_to_send |= (tx_data[tx_pos++] << 8);
   1518a:	2316      	movs	r3, #22
   1518c:	18fb      	adds	r3, r7, r3
   1518e:	881b      	ldrh	r3, [r3, #0]
   15190:	2216      	movs	r2, #22
   15192:	18ba      	adds	r2, r7, r2
   15194:	1c59      	adds	r1, r3, #1
   15196:	8011      	strh	r1, [r2, #0]
   15198:	001a      	movs	r2, r3
   1519a:	68bb      	ldr	r3, [r7, #8]
   1519c:	189b      	adds	r3, r3, r2
   1519e:	781b      	ldrb	r3, [r3, #0]
   151a0:	021b      	lsls	r3, r3, #8
   151a2:	b21a      	sxth	r2, r3
   151a4:	2312      	movs	r3, #18
   151a6:	18fb      	adds	r3, r7, r3
   151a8:	2100      	movs	r1, #0
   151aa:	5e5b      	ldrsh	r3, [r3, r1]
   151ac:	4313      	orrs	r3, r2
   151ae:	b21a      	sxth	r2, r3
   151b0:	2312      	movs	r3, #18
   151b2:	18fb      	adds	r3, r7, r3
   151b4:	801a      	strh	r2, [r3, #0]
		}

		/* Write the data to send */
		spi_write(module, data_to_send);
   151b6:	2312      	movs	r3, #18
   151b8:	18fb      	adds	r3, r7, r3
   151ba:	881a      	ldrh	r2, [r3, #0]
   151bc:	68fb      	ldr	r3, [r7, #12]
   151be:	0011      	movs	r1, r2
   151c0:	0018      	movs	r0, r3
   151c2:	4b22      	ldr	r3, [pc, #136]	; (1524c <spi_write_buffer_wait+0x13c>)
   151c4:	4798      	blx	r3

		if (module->receiver_enabled) {
   151c6:	68fb      	ldr	r3, [r7, #12]
   151c8:	79db      	ldrb	r3, [r3, #7]
   151ca:	2214      	movs	r2, #20
   151cc:	18ba      	adds	r2, r7, r2
   151ce:	2114      	movs	r1, #20
   151d0:	1879      	adds	r1, r7, r1
   151d2:	8809      	ldrh	r1, [r1, #0]
   151d4:	8011      	strh	r1, [r2, #0]
   151d6:	2b00      	cmp	r3, #0
   151d8:	d019      	beq.n	1520e <spi_write_buffer_wait+0xfe>
					return STATUS_ERR_TIMEOUT;
				}
			}
#  endif

			while (!spi_is_ready_to_read(module)) {
   151da:	46c0      	nop			; (mov r8, r8)
   151dc:	68fb      	ldr	r3, [r7, #12]
   151de:	0018      	movs	r0, r3
   151e0:	4b1b      	ldr	r3, [pc, #108]	; (15250 <spi_write_buffer_wait+0x140>)
   151e2:	4798      	blx	r3
   151e4:	0003      	movs	r3, r0
   151e6:	001a      	movs	r2, r3
   151e8:	2301      	movs	r3, #1
   151ea:	4053      	eors	r3, r2
   151ec:	b2db      	uxtb	r3, r3
   151ee:	2b00      	cmp	r3, #0
   151f0:	d1f4      	bne.n	151dc <spi_write_buffer_wait+0xcc>
			}

			/* Flush read buffer */
			uint16_t flush;
			spi_read(module, &flush);
   151f2:	2310      	movs	r3, #16
   151f4:	18fa      	adds	r2, r7, r3
   151f6:	68fb      	ldr	r3, [r7, #12]
   151f8:	0011      	movs	r1, r2
   151fa:	0018      	movs	r0, r3
   151fc:	4b15      	ldr	r3, [pc, #84]	; (15254 <spi_write_buffer_wait+0x144>)
   151fe:	4798      	blx	r3
			flush_length--;
   15200:	2314      	movs	r3, #20
   15202:	18fb      	adds	r3, r7, r3
   15204:	881a      	ldrh	r2, [r3, #0]
   15206:	2314      	movs	r3, #20
   15208:	18fb      	adds	r3, r7, r3
   1520a:	3a01      	subs	r2, #1
   1520c:	801a      	strh	r2, [r3, #0]
	while (length--) {
   1520e:	1dbb      	adds	r3, r7, #6
   15210:	881b      	ldrh	r3, [r3, #0]
   15212:	1dba      	adds	r2, r7, #6
   15214:	1e59      	subs	r1, r3, #1
   15216:	8011      	strh	r1, [r2, #0]
   15218:	2b00      	cmp	r3, #0
   1521a:	d198      	bne.n	1514e <spi_write_buffer_wait+0x3e>
		}
	}

#  if CONF_SPI_MASTER_ENABLE == true
	if (module->mode == SPI_MODE_MASTER) {
   1521c:	68fb      	ldr	r3, [r7, #12]
   1521e:	795b      	ldrb	r3, [r3, #5]
   15220:	2b01      	cmp	r3, #1
   15222:	d10b      	bne.n	1523c <spi_write_buffer_wait+0x12c>
		/* Wait for last byte to be transferred */
		while (!spi_is_write_complete(module)) {
   15224:	46c0      	nop			; (mov r8, r8)
   15226:	68fb      	ldr	r3, [r7, #12]
   15228:	0018      	movs	r0, r3
   1522a:	4b0b      	ldr	r3, [pc, #44]	; (15258 <spi_write_buffer_wait+0x148>)
   1522c:	4798      	blx	r3
   1522e:	0003      	movs	r3, r0
   15230:	001a      	movs	r2, r3
   15232:	2301      	movs	r3, #1
   15234:	4053      	eors	r3, r2
   15236:	b2db      	uxtb	r3, r3
   15238:	2b00      	cmp	r3, #0
   1523a:	d1f4      	bne.n	15226 <spi_write_buffer_wait+0x116>
				flush_length--;
			}
		}
	}
#  endif
	return STATUS_OK;
   1523c:	2300      	movs	r3, #0
}
   1523e:	0018      	movs	r0, r3
   15240:	46bd      	mov	sp, r7
   15242:	b006      	add	sp, #24
   15244:	bd80      	pop	{r7, pc}
   15246:	46c0      	nop			; (mov r8, r8)
   15248:	00014965 	.word	0x00014965
   1524c:	000149b5 	.word	0x000149b5
   15250:	0001498d 	.word	0x0001498d
   15254:	000149fd 	.word	0x000149fd
   15258:	0001493d 	.word	0x0001493d

0001525c <_spi_write>:
 *
 * \param[in,out]  module  Pointer to SPI software instance struct
 */
static void _spi_write(
		struct spi_module *const module)
{
   1525c:	b580      	push	{r7, lr}
   1525e:	b084      	sub	sp, #16
   15260:	af00      	add	r7, sp, #0
   15262:	6078      	str	r0, [r7, #4]
	/* Pointer to the hardware module instance */
	SercomSpi *const spi_hw = &(module->hw->SPI);
   15264:	687b      	ldr	r3, [r7, #4]
   15266:	681b      	ldr	r3, [r3, #0]
   15268:	60bb      	str	r3, [r7, #8]

	/* Write value will be at least 8-bits long */
	uint16_t data_to_send = *(module->tx_buffer_ptr);
   1526a:	687b      	ldr	r3, [r7, #4]
   1526c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   1526e:	781b      	ldrb	r3, [r3, #0]
   15270:	b2da      	uxtb	r2, r3
   15272:	230e      	movs	r3, #14
   15274:	18fb      	adds	r3, r7, r3
   15276:	801a      	strh	r2, [r3, #0]
	/* Increment 8-bit pointer */
	(module->tx_buffer_ptr)++;
   15278:	687b      	ldr	r3, [r7, #4]
   1527a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   1527c:	1c5a      	adds	r2, r3, #1
   1527e:	687b      	ldr	r3, [r7, #4]
   15280:	62da      	str	r2, [r3, #44]	; 0x2c

	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
   15282:	687b      	ldr	r3, [r7, #4]
   15284:	799b      	ldrb	r3, [r3, #6]
   15286:	2b01      	cmp	r3, #1
   15288:	d113      	bne.n	152b2 <_spi_write+0x56>
		data_to_send |= ((*(module->tx_buffer_ptr)) << 8);
   1528a:	687b      	ldr	r3, [r7, #4]
   1528c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   1528e:	781b      	ldrb	r3, [r3, #0]
   15290:	b2db      	uxtb	r3, r3
   15292:	021b      	lsls	r3, r3, #8
   15294:	b21a      	sxth	r2, r3
   15296:	230e      	movs	r3, #14
   15298:	18fb      	adds	r3, r7, r3
   1529a:	2100      	movs	r1, #0
   1529c:	5e5b      	ldrsh	r3, [r3, r1]
   1529e:	4313      	orrs	r3, r2
   152a0:	b21a      	sxth	r2, r3
   152a2:	230e      	movs	r3, #14
   152a4:	18fb      	adds	r3, r7, r3
   152a6:	801a      	strh	r2, [r3, #0]
		/* Increment 8-bit pointer */
		(module->tx_buffer_ptr)++;
   152a8:	687b      	ldr	r3, [r7, #4]
   152aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   152ac:	1c5a      	adds	r2, r3, #1
   152ae:	687b      	ldr	r3, [r7, #4]
   152b0:	62da      	str	r2, [r3, #44]	; 0x2c
	}

	/* Write the data to send*/
	spi_hw->DATA.reg = data_to_send & SERCOM_SPI_DATA_MASK;
   152b2:	230e      	movs	r3, #14
   152b4:	18fb      	adds	r3, r7, r3
   152b6:	881b      	ldrh	r3, [r3, #0]
   152b8:	05db      	lsls	r3, r3, #23
   152ba:	0dda      	lsrs	r2, r3, #23
   152bc:	68bb      	ldr	r3, [r7, #8]
   152be:	629a      	str	r2, [r3, #40]	; 0x28

	/* Decrement remaining buffer length */
	(module->remaining_tx_buffer_length)--;
   152c0:	687b      	ldr	r3, [r7, #4]
   152c2:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
   152c4:	b29b      	uxth	r3, r3
   152c6:	3b01      	subs	r3, #1
   152c8:	b29a      	uxth	r2, r3
   152ca:	687b      	ldr	r3, [r7, #4]
   152cc:	869a      	strh	r2, [r3, #52]	; 0x34
}
   152ce:	46c0      	nop			; (mov r8, r8)
   152d0:	46bd      	mov	sp, r7
   152d2:	b004      	add	sp, #16
   152d4:	bd80      	pop	{r7, pc}
	...

000152d8 <_spi_write_dummy>:
 *
 * \param[in,out]  module  Pointer to SPI software instance struct
 */
static void _spi_write_dummy(
		struct spi_module *const module)
{
   152d8:	b580      	push	{r7, lr}
   152da:	b084      	sub	sp, #16
   152dc:	af00      	add	r7, sp, #0
   152de:	6078      	str	r0, [r7, #4]
	/* Pointer to the hardware module instance */
	SercomSpi *const spi_hw = &(module->hw->SPI);
   152e0:	687b      	ldr	r3, [r7, #4]
   152e2:	681b      	ldr	r3, [r3, #0]
   152e4:	60fb      	str	r3, [r7, #12]

	/* Write dummy byte */
	spi_hw->DATA.reg = dummy_write;
   152e6:	4b08      	ldr	r3, [pc, #32]	; (15308 <_spi_write_dummy+0x30>)
   152e8:	881b      	ldrh	r3, [r3, #0]
   152ea:	001a      	movs	r2, r3
   152ec:	68fb      	ldr	r3, [r7, #12]
   152ee:	629a      	str	r2, [r3, #40]	; 0x28

	/* Decrement remaining dummy buffer length */
	module->remaining_dummy_buffer_length--;
   152f0:	687b      	ldr	r3, [r7, #4]
   152f2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
   152f4:	b29b      	uxth	r3, r3
   152f6:	3b01      	subs	r3, #1
   152f8:	b29a      	uxth	r2, r3
   152fa:	687b      	ldr	r3, [r7, #4]
   152fc:	865a      	strh	r2, [r3, #50]	; 0x32
}
   152fe:	46c0      	nop			; (mov r8, r8)
   15300:	46bd      	mov	sp, r7
   15302:	b004      	add	sp, #16
   15304:	bd80      	pop	{r7, pc}
   15306:	46c0      	nop			; (mov r8, r8)
   15308:	20005600 	.word	0x20005600

0001530c <_spi_read_dummy>:
 *
 * \param[in,out]  module  Pointer to SPI software instance struct
 */
static void _spi_read_dummy(
		struct spi_module *const module)
{
   1530c:	b580      	push	{r7, lr}
   1530e:	b084      	sub	sp, #16
   15310:	af00      	add	r7, sp, #0
   15312:	6078      	str	r0, [r7, #4]
	/* Pointer to the hardware module instance */
	SercomSpi *const spi_hw = &(module->hw->SPI);
   15314:	687b      	ldr	r3, [r7, #4]
   15316:	681b      	ldr	r3, [r3, #0]
   15318:	60fb      	str	r3, [r7, #12]
	uint16_t flush = 0;
   1531a:	230a      	movs	r3, #10
   1531c:	18fb      	adds	r3, r7, r3
   1531e:	2200      	movs	r2, #0
   15320:	801a      	strh	r2, [r3, #0]

	/* Read dummy byte */
	flush = spi_hw->DATA.reg;
   15322:	68fb      	ldr	r3, [r7, #12]
   15324:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   15326:	230a      	movs	r3, #10
   15328:	18fb      	adds	r3, r7, r3
   1532a:	801a      	strh	r2, [r3, #0]
	UNUSED(flush);

	/* Decrement remaining dummy buffer length */
	module->remaining_dummy_buffer_length--;
   1532c:	687b      	ldr	r3, [r7, #4]
   1532e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
   15330:	b29b      	uxth	r3, r3
   15332:	3b01      	subs	r3, #1
   15334:	b29a      	uxth	r2, r3
   15336:	687b      	ldr	r3, [r7, #4]
   15338:	865a      	strh	r2, [r3, #50]	; 0x32
}
   1533a:	46c0      	nop			; (mov r8, r8)
   1533c:	46bd      	mov	sp, r7
   1533e:	b004      	add	sp, #16
   15340:	bd80      	pop	{r7, pc}

00015342 <_spi_read>:
 *
 * \param[in,out]  module  Pointer to SPI software instance struct
 */
static void _spi_read(
		struct spi_module *const module)
{
   15342:	b580      	push	{r7, lr}
   15344:	b084      	sub	sp, #16
   15346:	af00      	add	r7, sp, #0
   15348:	6078      	str	r0, [r7, #4]
	/* Pointer to the hardware module instance */
	SercomSpi *const spi_hw = &(module->hw->SPI);
   1534a:	687b      	ldr	r3, [r7, #4]
   1534c:	681b      	ldr	r3, [r3, #0]
   1534e:	60fb      	str	r3, [r7, #12]

	uint16_t received_data = (spi_hw->DATA.reg & SERCOM_SPI_DATA_MASK);
   15350:	68fb      	ldr	r3, [r7, #12]
   15352:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   15354:	b29a      	uxth	r2, r3
   15356:	230a      	movs	r3, #10
   15358:	18fb      	adds	r3, r7, r3
   1535a:	05d2      	lsls	r2, r2, #23
   1535c:	0dd2      	lsrs	r2, r2, #23
   1535e:	801a      	strh	r2, [r3, #0]

	/* Read value will be at least 8-bits long */
	*(module->rx_buffer_ptr) = received_data;
   15360:	687b      	ldr	r3, [r7, #4]
   15362:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   15364:	220a      	movs	r2, #10
   15366:	18ba      	adds	r2, r7, r2
   15368:	8812      	ldrh	r2, [r2, #0]
   1536a:	b2d2      	uxtb	r2, r2
   1536c:	701a      	strb	r2, [r3, #0]
	/* Increment 8-bit pointer */
	module->rx_buffer_ptr += 1;
   1536e:	687b      	ldr	r3, [r7, #4]
   15370:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   15372:	1c5a      	adds	r2, r3, #1
   15374:	687b      	ldr	r3, [r7, #4]
   15376:	629a      	str	r2, [r3, #40]	; 0x28

	if(module->character_size == SPI_CHARACTER_SIZE_9BIT) {
   15378:	687b      	ldr	r3, [r7, #4]
   1537a:	799b      	ldrb	r3, [r3, #6]
   1537c:	2b01      	cmp	r3, #1
   1537e:	d10d      	bne.n	1539c <_spi_read+0x5a>
		/* 9-bit data, write next received byte to the buffer */
		*(module->rx_buffer_ptr) = (received_data >> 8);
   15380:	687b      	ldr	r3, [r7, #4]
   15382:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   15384:	220a      	movs	r2, #10
   15386:	18ba      	adds	r2, r7, r2
   15388:	8812      	ldrh	r2, [r2, #0]
   1538a:	0a12      	lsrs	r2, r2, #8
   1538c:	b292      	uxth	r2, r2
   1538e:	b2d2      	uxtb	r2, r2
   15390:	701a      	strb	r2, [r3, #0]
		/* Increment 8-bit pointer */
		module->rx_buffer_ptr += 1;
   15392:	687b      	ldr	r3, [r7, #4]
   15394:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   15396:	1c5a      	adds	r2, r3, #1
   15398:	687b      	ldr	r3, [r7, #4]
   1539a:	629a      	str	r2, [r3, #40]	; 0x28
	}

	/* Decrement length of the remaining buffer */
	module->remaining_rx_buffer_length--;
   1539c:	687b      	ldr	r3, [r7, #4]
   1539e:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
   153a0:	b29b      	uxth	r3, r3
   153a2:	3b01      	subs	r3, #1
   153a4:	b29a      	uxth	r2, r3
   153a6:	687b      	ldr	r3, [r7, #4]
   153a8:	861a      	strh	r2, [r3, #48]	; 0x30
}
   153aa:	46c0      	nop			; (mov r8, r8)
   153ac:	46bd      	mov	sp, r7
   153ae:	b004      	add	sp, #16
   153b0:	bd80      	pop	{r7, pc}
	...

000153b4 <_spi_interrupt_handler>:
 * \param[in]  instance  ID of the SERCOM instance calling the interrupt
 *                       handler.
 */
void _spi_interrupt_handler(
		uint8_t instance)
{
   153b4:	b580      	push	{r7, lr}
   153b6:	b086      	sub	sp, #24
   153b8:	af00      	add	r7, sp, #0
   153ba:	0002      	movs	r2, r0
   153bc:	1dfb      	adds	r3, r7, #7
   153be:	701a      	strb	r2, [r3, #0]
	/* Get device instance from the look-up table */
	struct spi_module *module
		= (struct spi_module *)_sercom_instances[instance];
   153c0:	1dfb      	adds	r3, r7, #7
   153c2:	781a      	ldrb	r2, [r3, #0]
	struct spi_module *module
   153c4:	4b96      	ldr	r3, [pc, #600]	; (15620 <_spi_interrupt_handler+0x26c>)
   153c6:	0092      	lsls	r2, r2, #2
   153c8:	58d3      	ldr	r3, [r2, r3]
   153ca:	617b      	str	r3, [r7, #20]

	/* Pointer to the hardware module instance */
	SercomSpi *const spi_hw = &(module->hw->SPI);
   153cc:	697b      	ldr	r3, [r7, #20]
   153ce:	681b      	ldr	r3, [r3, #0]
   153d0:	613b      	str	r3, [r7, #16]

	/* Combine callback registered and enabled masks. */
	uint8_t callback_mask =
			module->enabled_callback & module->registered_callback;
   153d2:	697b      	ldr	r3, [r7, #20]
   153d4:	2237      	movs	r2, #55	; 0x37
   153d6:	5c9a      	ldrb	r2, [r3, r2]
   153d8:	697b      	ldr	r3, [r7, #20]
   153da:	2136      	movs	r1, #54	; 0x36
   153dc:	5c59      	ldrb	r1, [r3, r1]
	uint8_t callback_mask =
   153de:	230f      	movs	r3, #15
   153e0:	18fb      	adds	r3, r7, r3
   153e2:	400a      	ands	r2, r1
   153e4:	701a      	strb	r2, [r3, #0]

	/* Read and mask interrupt flag register */
	uint16_t interrupt_status = spi_hw->INTFLAG.reg;
   153e6:	693b      	ldr	r3, [r7, #16]
   153e8:	7e1b      	ldrb	r3, [r3, #24]
   153ea:	b2da      	uxtb	r2, r3
   153ec:	230c      	movs	r3, #12
   153ee:	18fb      	adds	r3, r7, r3
   153f0:	801a      	strh	r2, [r3, #0]
	interrupt_status &= spi_hw->INTENSET.reg;
   153f2:	693b      	ldr	r3, [r7, #16]
   153f4:	7d9b      	ldrb	r3, [r3, #22]
   153f6:	b2db      	uxtb	r3, r3
   153f8:	b29a      	uxth	r2, r3
   153fa:	230c      	movs	r3, #12
   153fc:	18fb      	adds	r3, r7, r3
   153fe:	210c      	movs	r1, #12
   15400:	1879      	adds	r1, r7, r1
   15402:	8809      	ldrh	r1, [r1, #0]
   15404:	400a      	ands	r2, r1
   15406:	801a      	strh	r2, [r3, #0]

	/* Data register empty interrupt */
	if (interrupt_status & SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY) {
   15408:	230c      	movs	r3, #12
   1540a:	18fb      	adds	r3, r7, r3
   1540c:	881b      	ldrh	r3, [r3, #0]
   1540e:	2201      	movs	r2, #1
   15410:	4013      	ands	r3, r2
   15412:	d038      	beq.n	15486 <_spi_interrupt_handler+0xd2>
#  if CONF_SPI_MASTER_ENABLE == true
		if ((module->mode == SPI_MODE_MASTER) &&
   15414:	697b      	ldr	r3, [r7, #20]
   15416:	795b      	ldrb	r3, [r3, #5]
   15418:	2b01      	cmp	r3, #1
   1541a:	d110      	bne.n	1543e <_spi_interrupt_handler+0x8a>
			(module->dir == SPI_DIRECTION_READ)) {
   1541c:	697b      	ldr	r3, [r7, #20]
   1541e:	7a5b      	ldrb	r3, [r3, #9]
   15420:	b2db      	uxtb	r3, r3
		if ((module->mode == SPI_MODE_MASTER) &&
   15422:	2b00      	cmp	r3, #0
   15424:	d10b      	bne.n	1543e <_spi_interrupt_handler+0x8a>
			/* Send dummy byte when reading in master mode */
			_spi_write_dummy(module);
   15426:	697b      	ldr	r3, [r7, #20]
   15428:	0018      	movs	r0, r3
   1542a:	4b7e      	ldr	r3, [pc, #504]	; (15624 <_spi_interrupt_handler+0x270>)
   1542c:	4798      	blx	r3
			if (module->remaining_dummy_buffer_length == 0) {
   1542e:	697b      	ldr	r3, [r7, #20]
   15430:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
   15432:	b29b      	uxth	r3, r3
   15434:	2b00      	cmp	r3, #0
   15436:	d102      	bne.n	1543e <_spi_interrupt_handler+0x8a>
				/* Disable the Data Register Empty Interrupt */
				spi_hw->INTENCLR.reg
						= SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY;
   15438:	693b      	ldr	r3, [r7, #16]
   1543a:	2201      	movs	r2, #1
   1543c:	751a      	strb	r2, [r3, #20]
		}
#  endif

		if (0
#  if CONF_SPI_MASTER_ENABLE == true
		|| ((module->mode == SPI_MODE_MASTER) &&
   1543e:	697b      	ldr	r3, [r7, #20]
   15440:	795b      	ldrb	r3, [r3, #5]
		if (0
   15442:	2b01      	cmp	r3, #1
   15444:	d11f      	bne.n	15486 <_spi_interrupt_handler+0xd2>
			(module->dir != SPI_DIRECTION_READ))
   15446:	697b      	ldr	r3, [r7, #20]
   15448:	7a5b      	ldrb	r3, [r3, #9]
   1544a:	b2db      	uxtb	r3, r3
		|| ((module->mode == SPI_MODE_MASTER) &&
   1544c:	2b00      	cmp	r3, #0
   1544e:	d01a      	beq.n	15486 <_spi_interrupt_handler+0xd2>
		|| ((module->mode == SPI_MODE_SLAVE) &&
			(module->dir != SPI_DIRECTION_READ))
#  endif
		) {
			/* Write next byte from buffer */
			_spi_write(module);
   15450:	697b      	ldr	r3, [r7, #20]
   15452:	0018      	movs	r0, r3
   15454:	4b74      	ldr	r3, [pc, #464]	; (15628 <_spi_interrupt_handler+0x274>)
   15456:	4798      	blx	r3
			if (module->remaining_tx_buffer_length == 0) {
   15458:	697b      	ldr	r3, [r7, #20]
   1545a:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
   1545c:	b29b      	uxth	r3, r3
   1545e:	2b00      	cmp	r3, #0
   15460:	d111      	bne.n	15486 <_spi_interrupt_handler+0xd2>
				/* Disable the Data Register Empty Interrupt */
				spi_hw->INTENCLR.reg
						= SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY;
   15462:	693b      	ldr	r3, [r7, #16]
   15464:	2201      	movs	r2, #1
   15466:	751a      	strb	r2, [r3, #20]

				if (module->dir == SPI_DIRECTION_WRITE &&
   15468:	697b      	ldr	r3, [r7, #20]
   1546a:	7a5b      	ldrb	r3, [r3, #9]
   1546c:	b2db      	uxtb	r3, r3
   1546e:	2b01      	cmp	r3, #1
   15470:	d109      	bne.n	15486 <_spi_interrupt_handler+0xd2>
						!(module->receiver_enabled)) {
   15472:	697b      	ldr	r3, [r7, #20]
   15474:	79db      	ldrb	r3, [r3, #7]
   15476:	2201      	movs	r2, #1
   15478:	4053      	eors	r3, r2
   1547a:	b2db      	uxtb	r3, r3
				if (module->dir == SPI_DIRECTION_WRITE &&
   1547c:	2b00      	cmp	r3, #0
   1547e:	d002      	beq.n	15486 <_spi_interrupt_handler+0xd2>
					/* Enable the Data Register transmit complete Interrupt */
					spi_hw->INTENSET.reg = SPI_INTERRUPT_FLAG_TX_COMPLETE;
   15480:	693b      	ldr	r3, [r7, #16]
   15482:	2202      	movs	r2, #2
   15484:	759a      	strb	r2, [r3, #22]
			}
		}
	}

	/* Receive complete interrupt*/
	if (interrupt_status & SPI_INTERRUPT_FLAG_RX_COMPLETE) {
   15486:	230c      	movs	r3, #12
   15488:	18fb      	adds	r3, r7, r3
   1548a:	881b      	ldrh	r3, [r3, #0]
   1548c:	2204      	movs	r2, #4
   1548e:	4013      	ands	r3, r2
   15490:	d100      	bne.n	15494 <_spi_interrupt_handler+0xe0>
   15492:	e07e      	b.n	15592 <_spi_interrupt_handler+0x1de>
		/* Check for overflow */
		if (spi_hw->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
   15494:	693b      	ldr	r3, [r7, #16]
   15496:	8b5b      	ldrh	r3, [r3, #26]
   15498:	b29b      	uxth	r3, r3
   1549a:	001a      	movs	r2, r3
   1549c:	2304      	movs	r3, #4
   1549e:	4013      	ands	r3, r2
   154a0:	d022      	beq.n	154e8 <_spi_interrupt_handler+0x134>
			if (module->dir != SPI_DIRECTION_WRITE) {
   154a2:	697b      	ldr	r3, [r7, #20]
   154a4:	7a5b      	ldrb	r3, [r3, #9]
   154a6:	b2db      	uxtb	r3, r3
   154a8:	2b01      	cmp	r3, #1
   154aa:	d014      	beq.n	154d6 <_spi_interrupt_handler+0x122>
				/* Store the error code */
				module->status = STATUS_ERR_OVERFLOW;
   154ac:	697b      	ldr	r3, [r7, #20]
   154ae:	2238      	movs	r2, #56	; 0x38
   154b0:	211e      	movs	r1, #30
   154b2:	5499      	strb	r1, [r3, r2]

				/* End transaction */
				module->dir = SPI_DIRECTION_IDLE;
   154b4:	697b      	ldr	r3, [r7, #20]
   154b6:	2203      	movs	r2, #3
   154b8:	725a      	strb	r2, [r3, #9]

				spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_RX_COMPLETE |
   154ba:	693b      	ldr	r3, [r7, #16]
   154bc:	2205      	movs	r2, #5
   154be:	751a      	strb	r2, [r3, #20]
						SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY;
				/* Run callback if registered and enabled */
				if (callback_mask & (1 << SPI_CALLBACK_ERROR)) {
   154c0:	230f      	movs	r3, #15
   154c2:	18fb      	adds	r3, r7, r3
   154c4:	781b      	ldrb	r3, [r3, #0]
   154c6:	2208      	movs	r2, #8
   154c8:	4013      	ands	r3, r2
   154ca:	d004      	beq.n	154d6 <_spi_interrupt_handler+0x122>
					(module->callback[SPI_CALLBACK_ERROR])(module);
   154cc:	697b      	ldr	r3, [r7, #20]
   154ce:	699b      	ldr	r3, [r3, #24]
   154d0:	697a      	ldr	r2, [r7, #20]
   154d2:	0010      	movs	r0, r2
   154d4:	4798      	blx	r3
				}
			}
			/* Flush */
			uint16_t flush = spi_hw->DATA.reg;
   154d6:	693b      	ldr	r3, [r7, #16]
   154d8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   154da:	230a      	movs	r3, #10
   154dc:	18fb      	adds	r3, r7, r3
   154de:	801a      	strh	r2, [r3, #0]
			UNUSED(flush);
			/* Clear overflow flag */
			spi_hw->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
   154e0:	693b      	ldr	r3, [r7, #16]
   154e2:	2204      	movs	r2, #4
   154e4:	835a      	strh	r2, [r3, #26]
   154e6:	e054      	b.n	15592 <_spi_interrupt_handler+0x1de>
		} else {
			if (module->dir == SPI_DIRECTION_WRITE) {
   154e8:	697b      	ldr	r3, [r7, #20]
   154ea:	7a5b      	ldrb	r3, [r3, #9]
   154ec:	b2db      	uxtb	r3, r3
   154ee:	2b01      	cmp	r3, #1
   154f0:	d11e      	bne.n	15530 <_spi_interrupt_handler+0x17c>
				/* Flush receive buffer when writing */
				_spi_read_dummy(module);
   154f2:	697b      	ldr	r3, [r7, #20]
   154f4:	0018      	movs	r0, r3
   154f6:	4b4d      	ldr	r3, [pc, #308]	; (1562c <_spi_interrupt_handler+0x278>)
   154f8:	4798      	blx	r3
				if (module->remaining_dummy_buffer_length == 0) {
   154fa:	697b      	ldr	r3, [r7, #20]
   154fc:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
   154fe:	b29b      	uxth	r3, r3
   15500:	2b00      	cmp	r3, #0
   15502:	d146      	bne.n	15592 <_spi_interrupt_handler+0x1de>
					spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_RX_COMPLETE;
   15504:	693b      	ldr	r3, [r7, #16]
   15506:	2204      	movs	r2, #4
   15508:	751a      	strb	r2, [r3, #20]
					module->status = STATUS_OK;
   1550a:	697b      	ldr	r3, [r7, #20]
   1550c:	2238      	movs	r2, #56	; 0x38
   1550e:	2100      	movs	r1, #0
   15510:	5499      	strb	r1, [r3, r2]
					module->dir = SPI_DIRECTION_IDLE;
   15512:	697b      	ldr	r3, [r7, #20]
   15514:	2203      	movs	r2, #3
   15516:	725a      	strb	r2, [r3, #9]
					/* Run callback if registered and enabled */
					if (callback_mask &
   15518:	230f      	movs	r3, #15
   1551a:	18fb      	adds	r3, r7, r3
   1551c:	781b      	ldrb	r3, [r3, #0]
   1551e:	2201      	movs	r2, #1
   15520:	4013      	ands	r3, r2
   15522:	d036      	beq.n	15592 <_spi_interrupt_handler+0x1de>
							(1 << SPI_CALLBACK_BUFFER_TRANSMITTED)){
						(module->callback[SPI_CALLBACK_BUFFER_TRANSMITTED])(module);
   15524:	697b      	ldr	r3, [r7, #20]
   15526:	68db      	ldr	r3, [r3, #12]
   15528:	697a      	ldr	r2, [r7, #20]
   1552a:	0010      	movs	r0, r2
   1552c:	4798      	blx	r3
   1552e:	e030      	b.n	15592 <_spi_interrupt_handler+0x1de>
					}
				}
			} else {
				/* Read data register */
				_spi_read(module);
   15530:	697b      	ldr	r3, [r7, #20]
   15532:	0018      	movs	r0, r3
   15534:	4b3e      	ldr	r3, [pc, #248]	; (15630 <_spi_interrupt_handler+0x27c>)
   15536:	4798      	blx	r3

				/* Check if the last character have been received */
				if (module->remaining_rx_buffer_length == 0) {
   15538:	697b      	ldr	r3, [r7, #20]
   1553a:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
   1553c:	b29b      	uxth	r3, r3
   1553e:	2b00      	cmp	r3, #0
   15540:	d127      	bne.n	15592 <_spi_interrupt_handler+0x1de>
					module->status = STATUS_OK;
   15542:	697b      	ldr	r3, [r7, #20]
   15544:	2238      	movs	r2, #56	; 0x38
   15546:	2100      	movs	r1, #0
   15548:	5499      	strb	r1, [r3, r2]
					/* Disable RX Complete Interrupt and set status */
					spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_RX_COMPLETE;
   1554a:	693b      	ldr	r3, [r7, #16]
   1554c:	2204      	movs	r2, #4
   1554e:	751a      	strb	r2, [r3, #20]
					if(module->dir == SPI_DIRECTION_BOTH) {
   15550:	697b      	ldr	r3, [r7, #20]
   15552:	7a5b      	ldrb	r3, [r3, #9]
   15554:	b2db      	uxtb	r3, r3
   15556:	2b02      	cmp	r3, #2
   15558:	d10b      	bne.n	15572 <_spi_interrupt_handler+0x1be>
						if (callback_mask & (1 << SPI_CALLBACK_BUFFER_TRANSCEIVED)) {
   1555a:	230f      	movs	r3, #15
   1555c:	18fb      	adds	r3, r7, r3
   1555e:	781b      	ldrb	r3, [r3, #0]
   15560:	2204      	movs	r2, #4
   15562:	4013      	ands	r3, r2
   15564:	d015      	beq.n	15592 <_spi_interrupt_handler+0x1de>
							(module->callback[SPI_CALLBACK_BUFFER_TRANSCEIVED])(module);
   15566:	697b      	ldr	r3, [r7, #20]
   15568:	695b      	ldr	r3, [r3, #20]
   1556a:	697a      	ldr	r2, [r7, #20]
   1556c:	0010      	movs	r0, r2
   1556e:	4798      	blx	r3
   15570:	e00f      	b.n	15592 <_spi_interrupt_handler+0x1de>
						}
					} else if (module->dir == SPI_DIRECTION_READ) {
   15572:	697b      	ldr	r3, [r7, #20]
   15574:	7a5b      	ldrb	r3, [r3, #9]
   15576:	b2db      	uxtb	r3, r3
   15578:	2b00      	cmp	r3, #0
   1557a:	d10a      	bne.n	15592 <_spi_interrupt_handler+0x1de>
						if (callback_mask & (1 << SPI_CALLBACK_BUFFER_RECEIVED)) {
   1557c:	230f      	movs	r3, #15
   1557e:	18fb      	adds	r3, r7, r3
   15580:	781b      	ldrb	r3, [r3, #0]
   15582:	2202      	movs	r2, #2
   15584:	4013      	ands	r3, r2
   15586:	d004      	beq.n	15592 <_spi_interrupt_handler+0x1de>
							(module->callback[SPI_CALLBACK_BUFFER_RECEIVED])(module);
   15588:	697b      	ldr	r3, [r7, #20]
   1558a:	691b      	ldr	r3, [r3, #16]
   1558c:	697a      	ldr	r2, [r7, #20]
   1558e:	0010      	movs	r0, r2
   15590:	4798      	blx	r3
			}
		}
	}

	/* Transmit complete */
	if (interrupt_status & SPI_INTERRUPT_FLAG_TX_COMPLETE) {
   15592:	230c      	movs	r3, #12
   15594:	18fb      	adds	r3, r7, r3
   15596:	881b      	ldrh	r3, [r3, #0]
   15598:	2202      	movs	r2, #2
   1559a:	4013      	ands	r3, r2
   1559c:	d024      	beq.n	155e8 <_spi_interrupt_handler+0x234>
			}

		}
#  endif
#  if CONF_SPI_MASTER_ENABLE == true
		if ((module->mode == SPI_MODE_MASTER) &&
   1559e:	697b      	ldr	r3, [r7, #20]
   155a0:	795b      	ldrb	r3, [r3, #5]
   155a2:	2b01      	cmp	r3, #1
   155a4:	d120      	bne.n	155e8 <_spi_interrupt_handler+0x234>
			(module->dir == SPI_DIRECTION_WRITE) && !(module->receiver_enabled)) {
   155a6:	697b      	ldr	r3, [r7, #20]
   155a8:	7a5b      	ldrb	r3, [r3, #9]
   155aa:	b2db      	uxtb	r3, r3
		if ((module->mode == SPI_MODE_MASTER) &&
   155ac:	2b01      	cmp	r3, #1
   155ae:	d11b      	bne.n	155e8 <_spi_interrupt_handler+0x234>
			(module->dir == SPI_DIRECTION_WRITE) && !(module->receiver_enabled)) {
   155b0:	697b      	ldr	r3, [r7, #20]
   155b2:	79db      	ldrb	r3, [r3, #7]
   155b4:	2201      	movs	r2, #1
   155b6:	4053      	eors	r3, r2
   155b8:	b2db      	uxtb	r3, r3
   155ba:	2b00      	cmp	r3, #0
   155bc:	d014      	beq.n	155e8 <_spi_interrupt_handler+0x234>
		  	/* Clear interrupt flag */
		 	spi_hw->INTENCLR.reg
					= SPI_INTERRUPT_FLAG_TX_COMPLETE;
   155be:	693b      	ldr	r3, [r7, #16]
   155c0:	2202      	movs	r2, #2
   155c2:	751a      	strb	r2, [r3, #20]
			/* Buffer sent with receiver disabled */
			module->dir = SPI_DIRECTION_IDLE;
   155c4:	697b      	ldr	r3, [r7, #20]
   155c6:	2203      	movs	r2, #3
   155c8:	725a      	strb	r2, [r3, #9]
			module->status = STATUS_OK;
   155ca:	697b      	ldr	r3, [r7, #20]
   155cc:	2238      	movs	r2, #56	; 0x38
   155ce:	2100      	movs	r1, #0
   155d0:	5499      	strb	r1, [r3, r2]
			/* Run callback if registered and enabled */
			if (callback_mask & (1 << SPI_CALLBACK_BUFFER_TRANSMITTED)){
   155d2:	230f      	movs	r3, #15
   155d4:	18fb      	adds	r3, r7, r3
   155d6:	781b      	ldrb	r3, [r3, #0]
   155d8:	2201      	movs	r2, #1
   155da:	4013      	ands	r3, r2
   155dc:	d004      	beq.n	155e8 <_spi_interrupt_handler+0x234>
				(module->callback[SPI_CALLBACK_BUFFER_TRANSMITTED])
   155de:	697b      	ldr	r3, [r7, #20]
   155e0:	68db      	ldr	r3, [r3, #12]
   155e2:	697a      	ldr	r2, [r7, #20]
   155e4:	0010      	movs	r0, r2
   155e6:	4798      	blx	r3
#  endif
#  endif

#  ifdef FEATURE_SPI_ERROR_INTERRUPT
	/* When combined error happen */
	if (interrupt_status & SPI_INTERRUPT_FLAG_COMBINED_ERROR) {
   155e8:	230c      	movs	r3, #12
   155ea:	18fb      	adds	r3, r7, r3
   155ec:	881b      	ldrh	r3, [r3, #0]
   155ee:	2280      	movs	r2, #128	; 0x80
   155f0:	4013      	ands	r3, r2
   155f2:	d010      	beq.n	15616 <_spi_interrupt_handler+0x262>
		/* Disable interrupts */
		spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_COMBINED_ERROR;
   155f4:	693b      	ldr	r3, [r7, #16]
   155f6:	2280      	movs	r2, #128	; 0x80
   155f8:	751a      	strb	r2, [r3, #20]
		/* Clear interrupt flag */
		spi_hw->INTFLAG.reg = SPI_INTERRUPT_FLAG_COMBINED_ERROR;
   155fa:	693b      	ldr	r3, [r7, #16]
   155fc:	2280      	movs	r2, #128	; 0x80
   155fe:	761a      	strb	r2, [r3, #24]

		if (callback_mask & (1 << SPI_CALLBACK_COMBINED_ERROR)) {
   15600:	230f      	movs	r3, #15
   15602:	18fb      	adds	r3, r7, r3
   15604:	781b      	ldrb	r3, [r3, #0]
   15606:	2240      	movs	r2, #64	; 0x40
   15608:	4013      	ands	r3, r2
   1560a:	d004      	beq.n	15616 <_spi_interrupt_handler+0x262>
			(module->callback[SPI_CALLBACK_COMBINED_ERROR])(module);
   1560c:	697b      	ldr	r3, [r7, #20]
   1560e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   15610:	697a      	ldr	r2, [r7, #20]
   15612:	0010      	movs	r0, r2
   15614:	4798      	blx	r3
		}
	}
#  endif
}
   15616:	46c0      	nop			; (mov r8, r8)
   15618:	46bd      	mov	sp, r7
   1561a:	b006      	add	sp, #24
   1561c:	bd80      	pop	{r7, pc}
   1561e:	46c0      	nop			; (mov r8, r8)
   15620:	200055e8 	.word	0x200055e8
   15624:	000152d9 	.word	0x000152d9
   15628:	0001525d 	.word	0x0001525d
   1562c:	0001530d 	.word	0x0001530d
   15630:	00015343 	.word	0x00015343

00015634 <system_gclk_chan_get_config_defaults>:
{
   15634:	b580      	push	{r7, lr}
   15636:	b082      	sub	sp, #8
   15638:	af00      	add	r7, sp, #0
   1563a:	6078      	str	r0, [r7, #4]
	config->source_generator = GCLK_GENERATOR_0;
   1563c:	687b      	ldr	r3, [r7, #4]
   1563e:	2200      	movs	r2, #0
   15640:	701a      	strb	r2, [r3, #0]
}
   15642:	46c0      	nop			; (mov r8, r8)
   15644:	46bd      	mov	sp, r7
   15646:	b002      	add	sp, #8
   15648:	bd80      	pop	{r7, pc}
	...

0001564c <system_apb_clock_set_mask>:
{
   1564c:	b580      	push	{r7, lr}
   1564e:	b082      	sub	sp, #8
   15650:	af00      	add	r7, sp, #0
   15652:	0002      	movs	r2, r0
   15654:	6039      	str	r1, [r7, #0]
   15656:	1dfb      	adds	r3, r7, #7
   15658:	701a      	strb	r2, [r3, #0]
	switch (bus) {
   1565a:	1dfb      	adds	r3, r7, #7
   1565c:	781b      	ldrb	r3, [r3, #0]
   1565e:	2b01      	cmp	r3, #1
   15660:	d00a      	beq.n	15678 <system_apb_clock_set_mask+0x2c>
   15662:	2b02      	cmp	r3, #2
   15664:	d00f      	beq.n	15686 <system_apb_clock_set_mask+0x3a>
   15666:	2b00      	cmp	r3, #0
   15668:	d114      	bne.n	15694 <system_apb_clock_set_mask+0x48>
			PM->APBAMASK.reg |= mask;
   1566a:	4b0e      	ldr	r3, [pc, #56]	; (156a4 <system_apb_clock_set_mask+0x58>)
   1566c:	4a0d      	ldr	r2, [pc, #52]	; (156a4 <system_apb_clock_set_mask+0x58>)
   1566e:	6991      	ldr	r1, [r2, #24]
   15670:	683a      	ldr	r2, [r7, #0]
   15672:	430a      	orrs	r2, r1
   15674:	619a      	str	r2, [r3, #24]
			break;
   15676:	e00f      	b.n	15698 <system_apb_clock_set_mask+0x4c>
			PM->APBBMASK.reg |= mask;
   15678:	4b0a      	ldr	r3, [pc, #40]	; (156a4 <system_apb_clock_set_mask+0x58>)
   1567a:	4a0a      	ldr	r2, [pc, #40]	; (156a4 <system_apb_clock_set_mask+0x58>)
   1567c:	69d1      	ldr	r1, [r2, #28]
   1567e:	683a      	ldr	r2, [r7, #0]
   15680:	430a      	orrs	r2, r1
   15682:	61da      	str	r2, [r3, #28]
			break;
   15684:	e008      	b.n	15698 <system_apb_clock_set_mask+0x4c>
			PM->APBCMASK.reg |= mask;
   15686:	4b07      	ldr	r3, [pc, #28]	; (156a4 <system_apb_clock_set_mask+0x58>)
   15688:	4a06      	ldr	r2, [pc, #24]	; (156a4 <system_apb_clock_set_mask+0x58>)
   1568a:	6a11      	ldr	r1, [r2, #32]
   1568c:	683a      	ldr	r2, [r7, #0]
   1568e:	430a      	orrs	r2, r1
   15690:	621a      	str	r2, [r3, #32]
			break;
   15692:	e001      	b.n	15698 <system_apb_clock_set_mask+0x4c>
			return STATUS_ERR_INVALID_ARG;
   15694:	2317      	movs	r3, #23
   15696:	e000      	b.n	1569a <system_apb_clock_set_mask+0x4e>
	return STATUS_OK;
   15698:	2300      	movs	r3, #0
}
   1569a:	0018      	movs	r0, r3
   1569c:	46bd      	mov	sp, r7
   1569e:	b002      	add	sp, #8
   156a0:	bd80      	pop	{r7, pc}
   156a2:	46c0      	nop			; (mov r8, r8)
   156a4:	40000400 	.word	0x40000400

000156a8 <system_pinmux_get_config_defaults>:
{
   156a8:	b580      	push	{r7, lr}
   156aa:	b082      	sub	sp, #8
   156ac:	af00      	add	r7, sp, #0
   156ae:	6078      	str	r0, [r7, #4]
	config->mux_position = SYSTEM_PINMUX_GPIO;
   156b0:	687b      	ldr	r3, [r7, #4]
   156b2:	2280      	movs	r2, #128	; 0x80
   156b4:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
   156b6:	687b      	ldr	r3, [r7, #4]
   156b8:	2200      	movs	r2, #0
   156ba:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
   156bc:	687b      	ldr	r3, [r7, #4]
   156be:	2201      	movs	r2, #1
   156c0:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
   156c2:	687b      	ldr	r3, [r7, #4]
   156c4:	2200      	movs	r2, #0
   156c6:	70da      	strb	r2, [r3, #3]
}
   156c8:	46c0      	nop			; (mov r8, r8)
   156ca:	46bd      	mov	sp, r7
   156cc:	b002      	add	sp, #8
   156ce:	bd80      	pop	{r7, pc}

000156d0 <system_is_debugger_present>:
{
   156d0:	b580      	push	{r7, lr}
   156d2:	af00      	add	r7, sp, #0
	return DSU->STATUSB.reg & DSU_STATUSB_DBGPRES;
   156d4:	4b05      	ldr	r3, [pc, #20]	; (156ec <system_is_debugger_present+0x1c>)
   156d6:	789b      	ldrb	r3, [r3, #2]
   156d8:	b2db      	uxtb	r3, r3
   156da:	001a      	movs	r2, r3
   156dc:	2302      	movs	r3, #2
   156de:	4013      	ands	r3, r2
   156e0:	1e5a      	subs	r2, r3, #1
   156e2:	4193      	sbcs	r3, r2
   156e4:	b2db      	uxtb	r3, r3
}
   156e6:	0018      	movs	r0, r3
   156e8:	46bd      	mov	sp, r7
   156ea:	bd80      	pop	{r7, pc}
   156ec:	41002000 	.word	0x41002000

000156f0 <usart_is_syncing>:
 * \retval false  Peripheral is not busy syncing and can be read/written without
 *                stalling the bus
 */
static inline bool usart_is_syncing(
		const struct usart_module *const module)
{
   156f0:	b580      	push	{r7, lr}
   156f2:	b084      	sub	sp, #16
   156f4:	af00      	add	r7, sp, #0
   156f6:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);
   156f8:	687b      	ldr	r3, [r7, #4]
   156fa:	681b      	ldr	r3, [r3, #0]
   156fc:	60fb      	str	r3, [r7, #12]

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
   156fe:	68fb      	ldr	r3, [r7, #12]
   15700:	69db      	ldr	r3, [r3, #28]
   15702:	1e5a      	subs	r2, r3, #1
   15704:	4193      	sbcs	r3, r2
   15706:	b2db      	uxtb	r3, r3
#else
	return (usart_hw->STATUS.reg & SERCOM_USART_STATUS_SYNCBUSY);
#endif
}
   15708:	0018      	movs	r0, r3
   1570a:	46bd      	mov	sp, r7
   1570c:	b004      	add	sp, #16
   1570e:	bd80      	pop	{r7, pc}

00015710 <_usart_wait_for_sync>:
 * \internal
 * Waits until synchronization is complete
 */
static inline void _usart_wait_for_sync(
		const struct usart_module *const module)
{
   15710:	b580      	push	{r7, lr}
   15712:	b082      	sub	sp, #8
   15714:	af00      	add	r7, sp, #0
   15716:	6078      	str	r0, [r7, #4]
	/* Sanity check */
	Assert(module);

	while (usart_is_syncing(module)) {
   15718:	46c0      	nop			; (mov r8, r8)
   1571a:	687b      	ldr	r3, [r7, #4]
   1571c:	0018      	movs	r0, r3
   1571e:	4b04      	ldr	r3, [pc, #16]	; (15730 <_usart_wait_for_sync+0x20>)
   15720:	4798      	blx	r3
   15722:	1e03      	subs	r3, r0, #0
   15724:	d1f9      	bne.n	1571a <_usart_wait_for_sync+0xa>
		/* Wait until the synchronization is complete */
	}
}
   15726:	46c0      	nop			; (mov r8, r8)
   15728:	46bd      	mov	sp, r7
   1572a:	b002      	add	sp, #8
   1572c:	bd80      	pop	{r7, pc}
   1572e:	46c0      	nop			; (mov r8, r8)
   15730:	000156f1 	.word	0x000156f1

00015734 <_usart_set_config>:
 * Set Configuration of the USART module
 */
static enum status_code _usart_set_config(
		struct usart_module *const module,
		const struct usart_config *const config)
{
   15734:	b5b0      	push	{r4, r5, r7, lr}
   15736:	b08c      	sub	sp, #48	; 0x30
   15738:	af02      	add	r7, sp, #8
   1573a:	6078      	str	r0, [r7, #4]
   1573c:	6039      	str	r1, [r7, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
   1573e:	687b      	ldr	r3, [r7, #4]
   15740:	681b      	ldr	r3, [r3, #0]
   15742:	61bb      	str	r3, [r7, #24]

	/* Index for generic clock */
	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
   15744:	687b      	ldr	r3, [r7, #4]
   15746:	681b      	ldr	r3, [r3, #0]
   15748:	0018      	movs	r0, r3
   1574a:	4bab      	ldr	r3, [pc, #684]	; (159f8 <_usart_set_config+0x2c4>)
   1574c:	4798      	blx	r3
   1574e:	0003      	movs	r3, r0
   15750:	617b      	str	r3, [r7, #20]
	uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
   15752:	697b      	ldr	r3, [r7, #20]
   15754:	3314      	adds	r3, #20
   15756:	613b      	str	r3, [r7, #16]

	/* Cache new register values to minimize the number of register writes */
	uint32_t ctrla = 0;
   15758:	2300      	movs	r3, #0
   1575a:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t ctrlb = 0;
   1575c:	2300      	movs	r3, #0
   1575e:	623b      	str	r3, [r7, #32]
#ifdef FEATURE_USART_ISO7816
	uint32_t ctrlc = 0;
#endif
	uint16_t baud  = 0;
   15760:	230a      	movs	r3, #10
   15762:	18fb      	adds	r3, r7, r3
   15764:	2200      	movs	r2, #0
   15766:	801a      	strh	r2, [r3, #0]
	uint32_t transfer_mode;

	enum sercom_asynchronous_operation_mode mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
   15768:	231f      	movs	r3, #31
   1576a:	18fb      	adds	r3, r7, r3
   1576c:	2200      	movs	r2, #0
   1576e:	701a      	strb	r2, [r3, #0]
	enum sercom_asynchronous_sample_num sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
   15770:	231e      	movs	r3, #30
   15772:	18fb      	adds	r3, r7, r3
   15774:	2210      	movs	r2, #16
   15776:	701a      	strb	r2, [r3, #0]

#ifdef FEATURE_USART_OVER_SAMPLE
	switch (config->sample_rate) {
   15778:	683b      	ldr	r3, [r7, #0]
   1577a:	8a1b      	ldrh	r3, [r3, #16]
   1577c:	2280      	movs	r2, #128	; 0x80
   1577e:	01d2      	lsls	r2, r2, #7
   15780:	4293      	cmp	r3, r2
   15782:	d01c      	beq.n	157be <_usart_set_config+0x8a>
   15784:	2280      	movs	r2, #128	; 0x80
   15786:	01d2      	lsls	r2, r2, #7
   15788:	4293      	cmp	r3, r2
   1578a:	dc06      	bgt.n	1579a <_usart_set_config+0x66>
   1578c:	2b00      	cmp	r3, #0
   1578e:	d00d      	beq.n	157ac <_usart_set_config+0x78>
   15790:	2280      	movs	r2, #128	; 0x80
   15792:	0192      	lsls	r2, r2, #6
   15794:	4293      	cmp	r3, r2
   15796:	d024      	beq.n	157e2 <_usart_set_config+0xae>
   15798:	e035      	b.n	15806 <_usart_set_config+0xd2>
   1579a:	22c0      	movs	r2, #192	; 0xc0
   1579c:	01d2      	lsls	r2, r2, #7
   1579e:	4293      	cmp	r3, r2
   157a0:	d028      	beq.n	157f4 <_usart_set_config+0xc0>
   157a2:	2280      	movs	r2, #128	; 0x80
   157a4:	0212      	lsls	r2, r2, #8
   157a6:	4293      	cmp	r3, r2
   157a8:	d012      	beq.n	157d0 <_usart_set_config+0x9c>
   157aa:	e02c      	b.n	15806 <_usart_set_config+0xd2>
		case USART_SAMPLE_RATE_16X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
   157ac:	231f      	movs	r3, #31
   157ae:	18fb      	adds	r3, r7, r3
   157b0:	2200      	movs	r2, #0
   157b2:	701a      	strb	r2, [r3, #0]
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
   157b4:	231e      	movs	r3, #30
   157b6:	18fb      	adds	r3, r7, r3
   157b8:	2210      	movs	r2, #16
   157ba:	701a      	strb	r2, [r3, #0]
			break;
   157bc:	e023      	b.n	15806 <_usart_set_config+0xd2>
		case USART_SAMPLE_RATE_8X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
   157be:	231f      	movs	r3, #31
   157c0:	18fb      	adds	r3, r7, r3
   157c2:	2200      	movs	r2, #0
   157c4:	701a      	strb	r2, [r3, #0]
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
   157c6:	231e      	movs	r3, #30
   157c8:	18fb      	adds	r3, r7, r3
   157ca:	2208      	movs	r2, #8
   157cc:	701a      	strb	r2, [r3, #0]
			break;
   157ce:	e01a      	b.n	15806 <_usart_set_config+0xd2>
		case USART_SAMPLE_RATE_3X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
   157d0:	231f      	movs	r3, #31
   157d2:	18fb      	adds	r3, r7, r3
   157d4:	2200      	movs	r2, #0
   157d6:	701a      	strb	r2, [r3, #0]
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_3;
   157d8:	231e      	movs	r3, #30
   157da:	18fb      	adds	r3, r7, r3
   157dc:	2203      	movs	r2, #3
   157de:	701a      	strb	r2, [r3, #0]
			break;
   157e0:	e011      	b.n	15806 <_usart_set_config+0xd2>
		case USART_SAMPLE_RATE_16X_FRACTIONAL:
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
   157e2:	231f      	movs	r3, #31
   157e4:	18fb      	adds	r3, r7, r3
   157e6:	2201      	movs	r2, #1
   157e8:	701a      	strb	r2, [r3, #0]
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
   157ea:	231e      	movs	r3, #30
   157ec:	18fb      	adds	r3, r7, r3
   157ee:	2210      	movs	r2, #16
   157f0:	701a      	strb	r2, [r3, #0]
			break;
   157f2:	e008      	b.n	15806 <_usart_set_config+0xd2>
		case USART_SAMPLE_RATE_8X_FRACTIONAL:
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
   157f4:	231f      	movs	r3, #31
   157f6:	18fb      	adds	r3, r7, r3
   157f8:	2201      	movs	r2, #1
   157fa:	701a      	strb	r2, [r3, #0]
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
   157fc:	231e      	movs	r3, #30
   157fe:	18fb      	adds	r3, r7, r3
   15800:	2208      	movs	r2, #8
   15802:	701a      	strb	r2, [r3, #0]
			break;
   15804:	46c0      	nop			; (mov r8, r8)
	}
#endif

	/* Set data order, internal muxing, and clock polarity */
	ctrla = (uint32_t)config->data_order |
   15806:	683b      	ldr	r3, [r7, #0]
   15808:	681a      	ldr	r2, [r3, #0]
		(uint32_t)config->mux_setting |
   1580a:	683b      	ldr	r3, [r7, #0]
   1580c:	68db      	ldr	r3, [r3, #12]
	ctrla = (uint32_t)config->data_order |
   1580e:	431a      	orrs	r2, r3
	#ifdef FEATURE_USART_OVER_SAMPLE
		config->sample_adjustment |
   15810:	683b      	ldr	r3, [r7, #0]
   15812:	695b      	ldr	r3, [r3, #20]
		(uint32_t)config->mux_setting |
   15814:	4313      	orrs	r3, r2
		config->sample_rate |
   15816:	683a      	ldr	r2, [r7, #0]
   15818:	8a12      	ldrh	r2, [r2, #16]
		config->sample_adjustment |
   1581a:	4313      	orrs	r3, r2
	#endif
	#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
   1581c:	683a      	ldr	r2, [r7, #0]
   1581e:	7e12      	ldrb	r2, [r2, #24]
   15820:	0212      	lsls	r2, r2, #8
		config->sample_rate |
   15822:	4313      	orrs	r3, r2
	#endif
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
   15824:	683a      	ldr	r2, [r7, #0]
   15826:	2126      	movs	r1, #38	; 0x26
   15828:	5c52      	ldrb	r2, [r2, r1]
   1582a:	0752      	lsls	r2, r2, #29
	ctrla = (uint32_t)config->data_order |
   1582c:	4313      	orrs	r3, r2
   1582e:	627b      	str	r3, [r7, #36]	; 0x24

	enum status_code status_code = STATUS_OK;
   15830:	231d      	movs	r3, #29
   15832:	18fb      	adds	r3, r7, r3
   15834:	2200      	movs	r2, #0
   15836:	701a      	strb	r2, [r3, #0]

	transfer_mode = (uint32_t)config->transfer_mode;
   15838:	683b      	ldr	r3, [r7, #0]
   1583a:	685b      	ldr	r3, [r3, #4]
   1583c:	60fb      	str	r3, [r7, #12]
#ifdef FEATURE_USART_ISO7816
	if(config->iso7816_config.enabled) {
		baud = config->baudrate;
	} else {
#endif
	switch (transfer_mode)
   1583e:	68fb      	ldr	r3, [r7, #12]
   15840:	2b00      	cmp	r3, #0
   15842:	d01e      	beq.n	15882 <_usart_set_config+0x14e>
   15844:	2280      	movs	r2, #128	; 0x80
   15846:	0552      	lsls	r2, r2, #21
   15848:	4293      	cmp	r3, r2
   1584a:	d14f      	bne.n	158ec <_usart_set_config+0x1b8>
	{
		case USART_TRANSFER_SYNCHRONOUSLY:
			if (!config->use_external_clock) {
   1584c:	683b      	ldr	r3, [r7, #0]
   1584e:	2227      	movs	r2, #39	; 0x27
   15850:	5c9b      	ldrb	r3, [r3, r2]
   15852:	2201      	movs	r2, #1
   15854:	4053      	eors	r3, r2
   15856:	b2db      	uxtb	r3, r3
   15858:	2b00      	cmp	r3, #0
   1585a:	d046      	beq.n	158ea <_usart_set_config+0x1b6>
				status_code = _sercom_get_sync_baud_val(config->baudrate,
   1585c:	683b      	ldr	r3, [r7, #0]
   1585e:	6a1d      	ldr	r5, [r3, #32]
   15860:	693b      	ldr	r3, [r7, #16]
   15862:	b2db      	uxtb	r3, r3
   15864:	0018      	movs	r0, r3
   15866:	4b65      	ldr	r3, [pc, #404]	; (159fc <_usart_set_config+0x2c8>)
   15868:	4798      	blx	r3
   1586a:	0001      	movs	r1, r0
   1586c:	231d      	movs	r3, #29
   1586e:	18fc      	adds	r4, r7, r3
   15870:	230a      	movs	r3, #10
   15872:	18fb      	adds	r3, r7, r3
   15874:	001a      	movs	r2, r3
   15876:	0028      	movs	r0, r5
   15878:	4b61      	ldr	r3, [pc, #388]	; (15a00 <_usart_set_config+0x2cc>)
   1587a:	4798      	blx	r3
   1587c:	0003      	movs	r3, r0
   1587e:	7023      	strb	r3, [r4, #0]
						system_gclk_chan_get_hz(gclk_index), &baud);
			}

			break;
   15880:	e033      	b.n	158ea <_usart_set_config+0x1b6>

		case USART_TRANSFER_ASYNCHRONOUSLY:
			if (config->use_external_clock) {
   15882:	683b      	ldr	r3, [r7, #0]
   15884:	2227      	movs	r2, #39	; 0x27
   15886:	5c9b      	ldrb	r3, [r3, r2]
   15888:	2b00      	cmp	r3, #0
   1588a:	d014      	beq.n	158b6 <_usart_set_config+0x182>
				status_code =
						_sercom_get_async_baud_val(config->baudrate,
   1588c:	683b      	ldr	r3, [r7, #0]
   1588e:	6a18      	ldr	r0, [r3, #32]
   15890:	683b      	ldr	r3, [r7, #0]
   15892:	6a99      	ldr	r1, [r3, #40]	; 0x28
				status_code =
   15894:	231d      	movs	r3, #29
   15896:	18fc      	adds	r4, r7, r3
   15898:	231f      	movs	r3, #31
   1589a:	18fb      	adds	r3, r7, r3
   1589c:	781d      	ldrb	r5, [r3, #0]
   1589e:	230a      	movs	r3, #10
   158a0:	18fa      	adds	r2, r7, r3
   158a2:	231e      	movs	r3, #30
   158a4:	18fb      	adds	r3, r7, r3
   158a6:	781b      	ldrb	r3, [r3, #0]
   158a8:	9300      	str	r3, [sp, #0]
   158aa:	002b      	movs	r3, r5
   158ac:	4d55      	ldr	r5, [pc, #340]	; (15a04 <_usart_set_config+0x2d0>)
   158ae:	47a8      	blx	r5
   158b0:	0003      	movs	r3, r0
   158b2:	7023      	strb	r3, [r4, #0]
				status_code =
						_sercom_get_async_baud_val(config->baudrate,
							system_gclk_chan_get_hz(gclk_index), &baud, mode, sample_num);
			}

			break;
   158b4:	e01a      	b.n	158ec <_usart_set_config+0x1b8>
						_sercom_get_async_baud_val(config->baudrate,
   158b6:	683b      	ldr	r3, [r7, #0]
   158b8:	6a1d      	ldr	r5, [r3, #32]
   158ba:	693b      	ldr	r3, [r7, #16]
   158bc:	b2db      	uxtb	r3, r3
   158be:	0018      	movs	r0, r3
   158c0:	4b4e      	ldr	r3, [pc, #312]	; (159fc <_usart_set_config+0x2c8>)
   158c2:	4798      	blx	r3
				status_code =
   158c4:	231d      	movs	r3, #29
   158c6:	18fc      	adds	r4, r7, r3
   158c8:	231f      	movs	r3, #31
   158ca:	18fb      	adds	r3, r7, r3
   158cc:	7819      	ldrb	r1, [r3, #0]
   158ce:	230a      	movs	r3, #10
   158d0:	18fa      	adds	r2, r7, r3
   158d2:	231e      	movs	r3, #30
   158d4:	18fb      	adds	r3, r7, r3
   158d6:	781b      	ldrb	r3, [r3, #0]
   158d8:	9300      	str	r3, [sp, #0]
   158da:	000b      	movs	r3, r1
   158dc:	0001      	movs	r1, r0
   158de:	0028      	movs	r0, r5
   158e0:	4d48      	ldr	r5, [pc, #288]	; (15a04 <_usart_set_config+0x2d0>)
   158e2:	47a8      	blx	r5
   158e4:	0003      	movs	r3, r0
   158e6:	7023      	strb	r3, [r4, #0]
			break;
   158e8:	e000      	b.n	158ec <_usart_set_config+0x1b8>
			break;
   158ea:	46c0      	nop			; (mov r8, r8)
	}

	/* Check if calculating the baudrate failed */
	if (status_code != STATUS_OK) {
   158ec:	231d      	movs	r3, #29
   158ee:	18fb      	adds	r3, r7, r3
   158f0:	781b      	ldrb	r3, [r3, #0]
   158f2:	2b00      	cmp	r3, #0
   158f4:	d003      	beq.n	158fe <_usart_set_config+0x1ca>
		/* Abort */
		return status_code;
   158f6:	231d      	movs	r3, #29
   158f8:	18fb      	adds	r3, r7, r3
   158fa:	781b      	ldrb	r3, [r3, #0]
   158fc:	e077      	b.n	159ee <_usart_set_config+0x2ba>
#ifdef FEATURE_USART_ISO7816
	}
#endif

#ifdef FEATURE_USART_IRDA
	if(config->encoding_format_enable) {
   158fe:	683b      	ldr	r3, [r7, #0]
   15900:	7e5b      	ldrb	r3, [r3, #25]
   15902:	2b00      	cmp	r3, #0
   15904:	d003      	beq.n	1590e <_usart_set_config+0x1da>
		usart_hw->RXPL.reg = config->receive_pulse_length;
   15906:	683b      	ldr	r3, [r7, #0]
   15908:	7e9a      	ldrb	r2, [r3, #26]
   1590a:	69bb      	ldr	r3, [r7, #24]
   1590c:	739a      	strb	r2, [r3, #14]
	}
#endif

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);
   1590e:	687b      	ldr	r3, [r7, #4]
   15910:	0018      	movs	r0, r3
   15912:	4b3d      	ldr	r3, [pc, #244]	; (15a08 <_usart_set_config+0x2d4>)
   15914:	4798      	blx	r3

	/*Set baud val */
	usart_hw->BAUD.reg = baud;
   15916:	230a      	movs	r3, #10
   15918:	18fb      	adds	r3, r7, r3
   1591a:	881a      	ldrh	r2, [r3, #0]
   1591c:	69bb      	ldr	r3, [r7, #24]
   1591e:	819a      	strh	r2, [r3, #12]

	/* Set sample mode */
	ctrla |= transfer_mode;
   15920:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   15922:	68fb      	ldr	r3, [r7, #12]
   15924:	4313      	orrs	r3, r2
   15926:	627b      	str	r3, [r7, #36]	; 0x24

	if (config->use_external_clock == false) {
   15928:	683b      	ldr	r3, [r7, #0]
   1592a:	2227      	movs	r2, #39	; 0x27
   1592c:	5c9b      	ldrb	r3, [r3, r2]
   1592e:	2201      	movs	r2, #1
   15930:	4053      	eors	r3, r2
   15932:	b2db      	uxtb	r3, r3
   15934:	2b00      	cmp	r3, #0
   15936:	d003      	beq.n	15940 <_usart_set_config+0x20c>
		ctrla |= SERCOM_USART_CTRLA_MODE(0x1);
   15938:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1593a:	2204      	movs	r2, #4
   1593c:	4313      	orrs	r3, r2
   1593e:	627b      	str	r3, [r7, #36]	; 0x24
	}

	/* Set stopbits and enable transceivers */
	ctrlb =  
		#ifdef FEATURE_USART_IRDA
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
   15940:	683b      	ldr	r3, [r7, #0]
   15942:	7e5b      	ldrb	r3, [r3, #25]
   15944:	029a      	lsls	r2, r3, #10
		#endif
		#ifdef FEATURE_USART_START_FRAME_DECTION
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
   15946:	683b      	ldr	r3, [r7, #0]
   15948:	7f1b      	ldrb	r3, [r3, #28]
   1594a:	025b      	lsls	r3, r3, #9
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
   1594c:	431a      	orrs	r2, r3
		#endif
		#ifdef FEATURE_USART_COLLISION_DECTION
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
   1594e:	683b      	ldr	r3, [r7, #0]
   15950:	7f5b      	ldrb	r3, [r3, #29]
   15952:	021b      	lsls	r3, r3, #8
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
   15954:	431a      	orrs	r2, r3
		#endif
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
   15956:	683b      	ldr	r3, [r7, #0]
   15958:	2124      	movs	r1, #36	; 0x24
   1595a:	5c5b      	ldrb	r3, [r3, r1]
   1595c:	045b      	lsls	r3, r3, #17
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
   1595e:	431a      	orrs	r2, r3
			(config->transmitter_enable << SERCOM_USART_CTRLB_TXEN_Pos);
   15960:	683b      	ldr	r3, [r7, #0]
   15962:	2125      	movs	r1, #37	; 0x25
   15964:	5c5b      	ldrb	r3, [r3, r1]
   15966:	041b      	lsls	r3, r3, #16
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
   15968:	4313      	orrs	r3, r2
	ctrlb =  
   1596a:	623b      	str	r3, [r7, #32]
				ctrlb |= USART_STOPBITS_1;
				break;		
		}
	} else {
#endif
	ctrlb |= (uint32_t)config->stopbits;
   1596c:	683b      	ldr	r3, [r7, #0]
   1596e:	7a9b      	ldrb	r3, [r3, #10]
   15970:	001a      	movs	r2, r3
   15972:	6a3b      	ldr	r3, [r7, #32]
   15974:	4313      	orrs	r3, r2
   15976:	623b      	str	r3, [r7, #32]
	ctrlb |= (uint32_t)config->character_size;
   15978:	683b      	ldr	r3, [r7, #0]
   1597a:	7adb      	ldrb	r3, [r3, #11]
   1597c:	001a      	movs	r2, r3
   1597e:	6a3b      	ldr	r3, [r7, #32]
   15980:	4313      	orrs	r3, r2
   15982:	623b      	str	r3, [r7, #32]
	/* Check parity mode bits */
	if (config->parity != USART_PARITY_NONE) {
   15984:	683b      	ldr	r3, [r7, #0]
   15986:	891b      	ldrh	r3, [r3, #8]
   15988:	2bff      	cmp	r3, #255	; 0xff
   1598a:	d00b      	beq.n	159a4 <_usart_set_config+0x270>
		ctrla |= SERCOM_USART_CTRLA_FORM(1);
   1598c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1598e:	2280      	movs	r2, #128	; 0x80
   15990:	0452      	lsls	r2, r2, #17
   15992:	4313      	orrs	r3, r2
   15994:	627b      	str	r3, [r7, #36]	; 0x24
		ctrlb |= config->parity;
   15996:	683b      	ldr	r3, [r7, #0]
   15998:	891b      	ldrh	r3, [r3, #8]
   1599a:	001a      	movs	r2, r3
   1599c:	6a3b      	ldr	r3, [r7, #32]
   1599e:	4313      	orrs	r3, r2
   159a0:	623b      	str	r3, [r7, #32]
   159a2:	e008      	b.n	159b6 <_usart_set_config+0x282>
	} else {
#ifdef FEATURE_USART_LIN_SLAVE
		if(config->lin_slave_enable) {
   159a4:	683b      	ldr	r3, [r7, #0]
   159a6:	7edb      	ldrb	r3, [r3, #27]
   159a8:	2b00      	cmp	r3, #0
   159aa:	d004      	beq.n	159b6 <_usart_set_config+0x282>
			ctrla |= SERCOM_USART_CTRLA_FORM(0x4);
   159ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   159ae:	2280      	movs	r2, #128	; 0x80
   159b0:	04d2      	lsls	r2, r2, #19
   159b2:	4313      	orrs	r3, r2
   159b4:	627b      	str	r3, [r7, #36]	; 0x24
		ctrla |= config->lin_node;
	}
#endif

	/* Set whether module should run in standby. */
	if (config->run_in_standby || system_is_debugger_present()) {
   159b6:	683b      	ldr	r3, [r7, #0]
   159b8:	222c      	movs	r2, #44	; 0x2c
   159ba:	5c9b      	ldrb	r3, [r3, r2]
   159bc:	2b00      	cmp	r3, #0
   159be:	d103      	bne.n	159c8 <_usart_set_config+0x294>
   159c0:	4b12      	ldr	r3, [pc, #72]	; (15a0c <_usart_set_config+0x2d8>)
   159c2:	4798      	blx	r3
   159c4:	1e03      	subs	r3, r0, #0
   159c6:	d003      	beq.n	159d0 <_usart_set_config+0x29c>
		ctrla |= SERCOM_USART_CTRLA_RUNSTDBY;
   159c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   159ca:	2280      	movs	r2, #128	; 0x80
   159cc:	4313      	orrs	r3, r2
   159ce:	627b      	str	r3, [r7, #36]	; 0x24
	}

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);
   159d0:	687b      	ldr	r3, [r7, #4]
   159d2:	0018      	movs	r0, r3
   159d4:	4b0c      	ldr	r3, [pc, #48]	; (15a08 <_usart_set_config+0x2d4>)
   159d6:	4798      	blx	r3

	/* Write configuration to CTRLB */
	usart_hw->CTRLB.reg = ctrlb;
   159d8:	69bb      	ldr	r3, [r7, #24]
   159da:	6a3a      	ldr	r2, [r7, #32]
   159dc:	605a      	str	r2, [r3, #4]

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);
   159de:	687b      	ldr	r3, [r7, #4]
   159e0:	0018      	movs	r0, r3
   159e2:	4b09      	ldr	r3, [pc, #36]	; (15a08 <_usart_set_config+0x2d4>)
   159e4:	4798      	blx	r3

	/* Write configuration to CTRLA */
	usart_hw->CTRLA.reg = ctrla;
   159e6:	69bb      	ldr	r3, [r7, #24]
   159e8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   159ea:	601a      	str	r2, [r3, #0]
		_usart_wait_for_sync(module);
		usart_hw->CTRLC.reg = ctrlc;
	}
#endif

	return STATUS_OK;
   159ec:	2300      	movs	r3, #0
}
   159ee:	0018      	movs	r0, r3
   159f0:	46bd      	mov	sp, r7
   159f2:	b00a      	add	sp, #40	; 0x28
   159f4:	bdb0      	pop	{r4, r5, r7, pc}
   159f6:	46c0      	nop			; (mov r8, r8)
   159f8:	000144dd 	.word	0x000144dd
   159fc:	00016e91 	.word	0x00016e91
   15a00:	00014057 	.word	0x00014057
   15a04:	000140d5 	.word	0x000140d5
   15a08:	00015711 	.word	0x00015711
   15a0c:	000156d1 	.word	0x000156d1

00015a10 <usart_init>:
 */
enum status_code usart_init(
		struct usart_module *const module,
		Sercom *const hw,
		const struct usart_config *const config)
{
   15a10:	b590      	push	{r4, r7, lr}
   15a12:	b093      	sub	sp, #76	; 0x4c
   15a14:	af00      	add	r7, sp, #0
   15a16:	60f8      	str	r0, [r7, #12]
   15a18:	60b9      	str	r1, [r7, #8]
   15a1a:	607a      	str	r2, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(hw);
	Assert(config);

	enum status_code status_code = STATUS_OK;
   15a1c:	233b      	movs	r3, #59	; 0x3b
   15a1e:	18fb      	adds	r3, r7, r3
   15a20:	2200      	movs	r2, #0
   15a22:	701a      	strb	r2, [r3, #0]

	/* Assign module pointer to software instance struct */
	module->hw = hw;
   15a24:	68fb      	ldr	r3, [r7, #12]
   15a26:	68ba      	ldr	r2, [r7, #8]
   15a28:	601a      	str	r2, [r3, #0]

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
   15a2a:	68fb      	ldr	r3, [r7, #12]
   15a2c:	681b      	ldr	r3, [r3, #0]
   15a2e:	637b      	str	r3, [r7, #52]	; 0x34

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
   15a30:	68fb      	ldr	r3, [r7, #12]
   15a32:	681b      	ldr	r3, [r3, #0]
   15a34:	0018      	movs	r0, r3
   15a36:	4b86      	ldr	r3, [pc, #536]	; (15c50 <usart_init+0x240>)
   15a38:	4798      	blx	r3
   15a3a:	0003      	movs	r3, r0
   15a3c:	633b      	str	r3, [r7, #48]	; 0x30
		gclk_index	= SERCOM5_GCLK_ID_CORE;
    } else {
    	gclk_index	= sercom_index + SERCOM0_GCLK_ID_CORE;
    }
#else
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
   15a3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   15a40:	3302      	adds	r3, #2
   15a42:	62fb      	str	r3, [r7, #44]	; 0x2c
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
   15a44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   15a46:	3314      	adds	r3, #20
   15a48:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
   15a4a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   15a4c:	681b      	ldr	r3, [r3, #0]
   15a4e:	2201      	movs	r2, #1
   15a50:	4013      	ands	r3, r2
   15a52:	d001      	beq.n	15a58 <usart_init+0x48>
		/* The module is busy resetting itself */
		return STATUS_BUSY;
   15a54:	2305      	movs	r3, #5
   15a56:	e0f6      	b.n	15c46 <usart_init+0x236>
	}

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_ENABLE) {
   15a58:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   15a5a:	681b      	ldr	r3, [r3, #0]
   15a5c:	2202      	movs	r2, #2
   15a5e:	4013      	ands	r3, r2
   15a60:	d001      	beq.n	15a66 <usart_init+0x56>
		/* Check the module is enabled */
		return STATUS_ERR_DENIED;
   15a62:	231c      	movs	r3, #28
   15a64:	e0ef      	b.n	15c46 <usart_init+0x236>
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBD, 1 << pm_index);
	} else {
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);	
	}
#else
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
   15a66:	2201      	movs	r2, #1
   15a68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   15a6a:	409a      	lsls	r2, r3
   15a6c:	0013      	movs	r3, r2
   15a6e:	0019      	movs	r1, r3
   15a70:	2002      	movs	r0, #2
   15a72:	4b78      	ldr	r3, [pc, #480]	; (15c54 <usart_init+0x244>)
   15a74:	4798      	blx	r3
#endif

	/* Set up the GCLK for the module */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
   15a76:	2324      	movs	r3, #36	; 0x24
   15a78:	18fb      	adds	r3, r7, r3
   15a7a:	0018      	movs	r0, r3
   15a7c:	4b76      	ldr	r3, [pc, #472]	; (15c58 <usart_init+0x248>)
   15a7e:	4798      	blx	r3
	gclk_chan_conf.source_generator = config->generator_source;
   15a80:	687b      	ldr	r3, [r7, #4]
   15a82:	222d      	movs	r2, #45	; 0x2d
   15a84:	5c9a      	ldrb	r2, [r3, r2]
   15a86:	2324      	movs	r3, #36	; 0x24
   15a88:	18fb      	adds	r3, r7, r3
   15a8a:	701a      	strb	r2, [r3, #0]
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
   15a8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
   15a8e:	b2db      	uxtb	r3, r3
   15a90:	2224      	movs	r2, #36	; 0x24
   15a92:	18ba      	adds	r2, r7, r2
   15a94:	0011      	movs	r1, r2
   15a96:	0018      	movs	r0, r3
   15a98:	4b70      	ldr	r3, [pc, #448]	; (15c5c <usart_init+0x24c>)
   15a9a:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
   15a9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
   15a9e:	b2db      	uxtb	r3, r3
   15aa0:	0018      	movs	r0, r3
   15aa2:	4b6f      	ldr	r3, [pc, #444]	; (15c60 <usart_init+0x250>)
   15aa4:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
   15aa6:	687b      	ldr	r3, [r7, #4]
   15aa8:	222d      	movs	r2, #45	; 0x2d
   15aaa:	5c9b      	ldrb	r3, [r3, r2]
   15aac:	2100      	movs	r1, #0
   15aae:	0018      	movs	r0, r3
   15ab0:	4b6c      	ldr	r3, [pc, #432]	; (15c64 <usart_init+0x254>)
   15ab2:	4798      	blx	r3

	/* Set character size */
	module->character_size = config->character_size;
   15ab4:	687b      	ldr	r3, [r7, #4]
   15ab6:	7ada      	ldrb	r2, [r3, #11]
   15ab8:	68fb      	ldr	r3, [r7, #12]
   15aba:	715a      	strb	r2, [r3, #5]

	/* Set transmitter and receiver status */
	module->receiver_enabled = config->receiver_enable;
   15abc:	687b      	ldr	r3, [r7, #4]
   15abe:	2224      	movs	r2, #36	; 0x24
   15ac0:	5c9a      	ldrb	r2, [r3, r2]
   15ac2:	68fb      	ldr	r3, [r7, #12]
   15ac4:	719a      	strb	r2, [r3, #6]
	module->transmitter_enabled = config->transmitter_enable;
   15ac6:	687b      	ldr	r3, [r7, #4]
   15ac8:	2225      	movs	r2, #37	; 0x25
   15aca:	5c9a      	ldrb	r2, [r3, r2]
   15acc:	68fb      	ldr	r3, [r7, #12]
   15ace:	71da      	strb	r2, [r3, #7]

#ifdef FEATURE_USART_LIN_SLAVE
	module->lin_slave_enabled = config->lin_slave_enable;
   15ad0:	687b      	ldr	r3, [r7, #4]
   15ad2:	7eda      	ldrb	r2, [r3, #27]
   15ad4:	68fb      	ldr	r3, [r7, #12]
   15ad6:	721a      	strb	r2, [r3, #8]
#endif
#ifdef FEATURE_USART_START_FRAME_DECTION
	module->start_frame_detection_enabled = config->start_frame_detection_enable;
   15ad8:	687b      	ldr	r3, [r7, #4]
   15ada:	7f1a      	ldrb	r2, [r3, #28]
   15adc:	68fb      	ldr	r3, [r7, #12]
   15ade:	725a      	strb	r2, [r3, #9]
#endif
#ifdef FEATURE_USART_ISO7816
	module->iso7816_mode_enabled = config->iso7816_config.enabled;
#endif
	/* Set configuration according to the config struct */
	status_code = _usart_set_config(module, config);
   15ae0:	233b      	movs	r3, #59	; 0x3b
   15ae2:	18fc      	adds	r4, r7, r3
   15ae4:	687a      	ldr	r2, [r7, #4]
   15ae6:	68fb      	ldr	r3, [r7, #12]
   15ae8:	0011      	movs	r1, r2
   15aea:	0018      	movs	r0, r3
   15aec:	4b5e      	ldr	r3, [pc, #376]	; (15c68 <usart_init+0x258>)
   15aee:	4798      	blx	r3
   15af0:	0003      	movs	r3, r0
   15af2:	7023      	strb	r3, [r4, #0]
	if(status_code != STATUS_OK) {
   15af4:	233b      	movs	r3, #59	; 0x3b
   15af6:	18fb      	adds	r3, r7, r3
   15af8:	781b      	ldrb	r3, [r3, #0]
   15afa:	2b00      	cmp	r3, #0
   15afc:	d003      	beq.n	15b06 <usart_init+0xf6>
		return status_code;
   15afe:	233b      	movs	r3, #59	; 0x3b
   15b00:	18fb      	adds	r3, r7, r3
   15b02:	781b      	ldrb	r3, [r3, #0]
   15b04:	e09f      	b.n	15c46 <usart_init+0x236>
	}

	struct system_pinmux_config pin_conf;
	system_pinmux_get_config_defaults(&pin_conf);
   15b06:	2320      	movs	r3, #32
   15b08:	18fb      	adds	r3, r7, r3
   15b0a:	0018      	movs	r0, r3
   15b0c:	4b57      	ldr	r3, [pc, #348]	; (15c6c <usart_init+0x25c>)
   15b0e:	4798      	blx	r3
	pin_conf.direction = SYSTEM_PINMUX_PIN_DIR_INPUT;
   15b10:	2320      	movs	r3, #32
   15b12:	18fb      	adds	r3, r7, r3
   15b14:	2200      	movs	r2, #0
   15b16:	705a      	strb	r2, [r3, #1]
	pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
   15b18:	2320      	movs	r3, #32
   15b1a:	18fb      	adds	r3, r7, r3
   15b1c:	2200      	movs	r2, #0
   15b1e:	709a      	strb	r2, [r3, #2]

	uint32_t pad_pinmuxes[] = {
			config->pinmux_pad0, config->pinmux_pad1,
   15b20:	687b      	ldr	r3, [r7, #4]
   15b22:	6b1a      	ldr	r2, [r3, #48]	; 0x30
	uint32_t pad_pinmuxes[] = {
   15b24:	2310      	movs	r3, #16
   15b26:	18fb      	adds	r3, r7, r3
   15b28:	601a      	str	r2, [r3, #0]
			config->pinmux_pad0, config->pinmux_pad1,
   15b2a:	687b      	ldr	r3, [r7, #4]
   15b2c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
	uint32_t pad_pinmuxes[] = {
   15b2e:	2310      	movs	r3, #16
   15b30:	18fb      	adds	r3, r7, r3
   15b32:	605a      	str	r2, [r3, #4]
			config->pinmux_pad2, config->pinmux_pad3
   15b34:	687b      	ldr	r3, [r7, #4]
   15b36:	6b9a      	ldr	r2, [r3, #56]	; 0x38
	uint32_t pad_pinmuxes[] = {
   15b38:	2310      	movs	r3, #16
   15b3a:	18fb      	adds	r3, r7, r3
   15b3c:	609a      	str	r2, [r3, #8]
			config->pinmux_pad2, config->pinmux_pad3
   15b3e:	687b      	ldr	r3, [r7, #4]
   15b40:	6bda      	ldr	r2, [r3, #60]	; 0x3c
	uint32_t pad_pinmuxes[] = {
   15b42:	2310      	movs	r3, #16
   15b44:	18fb      	adds	r3, r7, r3
   15b46:	60da      	str	r2, [r3, #12]
		};

	/* Configure the SERCOM pins according to the user configuration */
	for (uint8_t pad = 0; pad < 4; pad++) {
   15b48:	2347      	movs	r3, #71	; 0x47
   15b4a:	18fb      	adds	r3, r7, r3
   15b4c:	2200      	movs	r2, #0
   15b4e:	701a      	strb	r2, [r3, #0]
   15b50:	e02c      	b.n	15bac <usart_init+0x19c>
		uint32_t current_pinmux = pad_pinmuxes[pad];
   15b52:	2347      	movs	r3, #71	; 0x47
   15b54:	18fb      	adds	r3, r7, r3
   15b56:	781a      	ldrb	r2, [r3, #0]
   15b58:	2310      	movs	r3, #16
   15b5a:	18fb      	adds	r3, r7, r3
   15b5c:	0092      	lsls	r2, r2, #2
   15b5e:	58d3      	ldr	r3, [r2, r3]
   15b60:	643b      	str	r3, [r7, #64]	; 0x40

		if (current_pinmux == PINMUX_DEFAULT) {
   15b62:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   15b64:	2b00      	cmp	r3, #0
   15b66:	d109      	bne.n	15b7c <usart_init+0x16c>
			current_pinmux = _sercom_get_default_pad(hw, pad);
   15b68:	2347      	movs	r3, #71	; 0x47
   15b6a:	18fb      	adds	r3, r7, r3
   15b6c:	781a      	ldrb	r2, [r3, #0]
   15b6e:	68bb      	ldr	r3, [r7, #8]
   15b70:	0011      	movs	r1, r2
   15b72:	0018      	movs	r0, r3
   15b74:	4b3e      	ldr	r3, [pc, #248]	; (15c70 <usart_init+0x260>)
   15b76:	4798      	blx	r3
   15b78:	0003      	movs	r3, r0
   15b7a:	643b      	str	r3, [r7, #64]	; 0x40
		}

		if (current_pinmux != PINMUX_UNUSED) {
   15b7c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   15b7e:	3301      	adds	r3, #1
   15b80:	d00d      	beq.n	15b9e <usart_init+0x18e>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
   15b82:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   15b84:	b2da      	uxtb	r2, r3
   15b86:	2320      	movs	r3, #32
   15b88:	18fb      	adds	r3, r7, r3
   15b8a:	701a      	strb	r2, [r3, #0]
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
   15b8c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   15b8e:	0c1b      	lsrs	r3, r3, #16
   15b90:	b2db      	uxtb	r3, r3
   15b92:	2220      	movs	r2, #32
   15b94:	18ba      	adds	r2, r7, r2
   15b96:	0011      	movs	r1, r2
   15b98:	0018      	movs	r0, r3
   15b9a:	4b36      	ldr	r3, [pc, #216]	; (15c74 <usart_init+0x264>)
   15b9c:	4798      	blx	r3
	for (uint8_t pad = 0; pad < 4; pad++) {
   15b9e:	2347      	movs	r3, #71	; 0x47
   15ba0:	18fb      	adds	r3, r7, r3
   15ba2:	781a      	ldrb	r2, [r3, #0]
   15ba4:	2347      	movs	r3, #71	; 0x47
   15ba6:	18fb      	adds	r3, r7, r3
   15ba8:	3201      	adds	r2, #1
   15baa:	701a      	strb	r2, [r3, #0]
   15bac:	2347      	movs	r3, #71	; 0x47
   15bae:	18fb      	adds	r3, r7, r3
   15bb0:	781b      	ldrb	r3, [r3, #0]
   15bb2:	2b03      	cmp	r3, #3
   15bb4:	d9cd      	bls.n	15b52 <usart_init+0x142>
		}
	}

#if USART_CALLBACK_MODE == true
	/* Initialize parameters */
	for (uint32_t i = 0; i < USART_CALLBACK_N; i++) {
   15bb6:	2300      	movs	r3, #0
   15bb8:	63fb      	str	r3, [r7, #60]	; 0x3c
   15bba:	e00a      	b.n	15bd2 <usart_init+0x1c2>
		module->callback[i]            = NULL;
   15bbc:	68fa      	ldr	r2, [r7, #12]
   15bbe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   15bc0:	3302      	adds	r3, #2
   15bc2:	009b      	lsls	r3, r3, #2
   15bc4:	18d3      	adds	r3, r2, r3
   15bc6:	3304      	adds	r3, #4
   15bc8:	2200      	movs	r2, #0
   15bca:	601a      	str	r2, [r3, #0]
	for (uint32_t i = 0; i < USART_CALLBACK_N; i++) {
   15bcc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   15bce:	3301      	adds	r3, #1
   15bd0:	63fb      	str	r3, [r7, #60]	; 0x3c
   15bd2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   15bd4:	2b05      	cmp	r3, #5
   15bd6:	d9f1      	bls.n	15bbc <usart_init+0x1ac>
	}

	module->tx_buffer_ptr              = NULL;
   15bd8:	68fb      	ldr	r3, [r7, #12]
   15bda:	2200      	movs	r2, #0
   15bdc:	629a      	str	r2, [r3, #40]	; 0x28
	module->rx_buffer_ptr              = NULL;
   15bde:	68fb      	ldr	r3, [r7, #12]
   15be0:	2200      	movs	r2, #0
   15be2:	625a      	str	r2, [r3, #36]	; 0x24
	module->remaining_tx_buffer_length = 0x0000;
   15be4:	68fb      	ldr	r3, [r7, #12]
   15be6:	2200      	movs	r2, #0
   15be8:	85da      	strh	r2, [r3, #46]	; 0x2e
	module->remaining_rx_buffer_length = 0x0000;
   15bea:	68fb      	ldr	r3, [r7, #12]
   15bec:	2200      	movs	r2, #0
   15bee:	859a      	strh	r2, [r3, #44]	; 0x2c
	module->callback_reg_mask          = 0x00;
   15bf0:	68fb      	ldr	r3, [r7, #12]
   15bf2:	2230      	movs	r2, #48	; 0x30
   15bf4:	2100      	movs	r1, #0
   15bf6:	5499      	strb	r1, [r3, r2]
	module->callback_enable_mask       = 0x00;
   15bf8:	68fb      	ldr	r3, [r7, #12]
   15bfa:	2231      	movs	r2, #49	; 0x31
   15bfc:	2100      	movs	r1, #0
   15bfe:	5499      	strb	r1, [r3, r2]
	module->rx_status                  = STATUS_OK;
   15c00:	68fb      	ldr	r3, [r7, #12]
   15c02:	2232      	movs	r2, #50	; 0x32
   15c04:	2100      	movs	r1, #0
   15c06:	5499      	strb	r1, [r3, r2]
	module->tx_status                  = STATUS_OK;
   15c08:	68fb      	ldr	r3, [r7, #12]
   15c0a:	2233      	movs	r2, #51	; 0x33
   15c0c:	2100      	movs	r1, #0
   15c0e:	5499      	strb	r1, [r3, r2]

	/* Set interrupt handler and register USART software module struct in
	 * look-up table */
	uint8_t instance_index = _sercom_get_sercom_inst_index(module->hw);
   15c10:	68fb      	ldr	r3, [r7, #12]
   15c12:	681b      	ldr	r3, [r3, #0]
   15c14:	2227      	movs	r2, #39	; 0x27
   15c16:	18bc      	adds	r4, r7, r2
   15c18:	0018      	movs	r0, r3
   15c1a:	4b0d      	ldr	r3, [pc, #52]	; (15c50 <usart_init+0x240>)
   15c1c:	4798      	blx	r3
   15c1e:	0003      	movs	r3, r0
   15c20:	7023      	strb	r3, [r4, #0]
	_sercom_set_handler(instance_index, _usart_interrupt_handler);
   15c22:	4a15      	ldr	r2, [pc, #84]	; (15c78 <usart_init+0x268>)
   15c24:	2327      	movs	r3, #39	; 0x27
   15c26:	18fb      	adds	r3, r7, r3
   15c28:	781b      	ldrb	r3, [r3, #0]
   15c2a:	0011      	movs	r1, r2
   15c2c:	0018      	movs	r0, r3
   15c2e:	4b13      	ldr	r3, [pc, #76]	; (15c7c <usart_init+0x26c>)
   15c30:	4798      	blx	r3
	_sercom_instances[instance_index] = module;
   15c32:	2327      	movs	r3, #39	; 0x27
   15c34:	18fb      	adds	r3, r7, r3
   15c36:	781a      	ldrb	r2, [r3, #0]
   15c38:	4b11      	ldr	r3, [pc, #68]	; (15c80 <usart_init+0x270>)
   15c3a:	0092      	lsls	r2, r2, #2
   15c3c:	68f9      	ldr	r1, [r7, #12]
   15c3e:	50d1      	str	r1, [r2, r3]
#endif

	return status_code;
   15c40:	233b      	movs	r3, #59	; 0x3b
   15c42:	18fb      	adds	r3, r7, r3
   15c44:	781b      	ldrb	r3, [r3, #0]
}
   15c46:	0018      	movs	r0, r3
   15c48:	46bd      	mov	sp, r7
   15c4a:	b013      	add	sp, #76	; 0x4c
   15c4c:	bd90      	pop	{r4, r7, pc}
   15c4e:	46c0      	nop			; (mov r8, r8)
   15c50:	000144dd 	.word	0x000144dd
   15c54:	0001564d 	.word	0x0001564d
   15c58:	00015635 	.word	0x00015635
   15c5c:	00016d6d 	.word	0x00016d6d
   15c60:	00016db1 	.word	0x00016db1
   15c64:	00014295 	.word	0x00014295
   15c68:	00015735 	.word	0x00015735
   15c6c:	000156a9 	.word	0x000156a9
   15c70:	00014321 	.word	0x00014321
   15c74:	000170cd 	.word	0x000170cd
   15c78:	00015eed 	.word	0x00015eed
   15c7c:	00014541 	.word	0x00014541
   15c80:	200055e8 	.word	0x200055e8

00015c84 <system_interrupt_enter_critical_section>:
{
   15c84:	b580      	push	{r7, lr}
   15c86:	af00      	add	r7, sp, #0
	cpu_irq_enter_critical();
   15c88:	4b02      	ldr	r3, [pc, #8]	; (15c94 <system_interrupt_enter_critical_section+0x10>)
   15c8a:	4798      	blx	r3
}
   15c8c:	46c0      	nop			; (mov r8, r8)
   15c8e:	46bd      	mov	sp, r7
   15c90:	bd80      	pop	{r7, pc}
   15c92:	46c0      	nop			; (mov r8, r8)
   15c94:	000130d9 	.word	0x000130d9

00015c98 <system_interrupt_leave_critical_section>:
{
   15c98:	b580      	push	{r7, lr}
   15c9a:	af00      	add	r7, sp, #0
	cpu_irq_leave_critical();
   15c9c:	4b02      	ldr	r3, [pc, #8]	; (15ca8 <system_interrupt_leave_critical_section+0x10>)
   15c9e:	4798      	blx	r3
}
   15ca0:	46c0      	nop			; (mov r8, r8)
   15ca2:	46bd      	mov	sp, r7
   15ca4:	bd80      	pop	{r7, pc}
   15ca6:	46c0      	nop			; (mov r8, r8)
   15ca8:	0001312d 	.word	0x0001312d

00015cac <usart_is_syncing>:
{
   15cac:	b580      	push	{r7, lr}
   15cae:	b084      	sub	sp, #16
   15cb0:	af00      	add	r7, sp, #0
   15cb2:	6078      	str	r0, [r7, #4]
	SercomUsart *const usart_hw = &(module->hw->USART);
   15cb4:	687b      	ldr	r3, [r7, #4]
   15cb6:	681b      	ldr	r3, [r3, #0]
   15cb8:	60fb      	str	r3, [r7, #12]
	return (usart_hw->SYNCBUSY.reg);
   15cba:	68fb      	ldr	r3, [r7, #12]
   15cbc:	69db      	ldr	r3, [r3, #28]
   15cbe:	1e5a      	subs	r2, r3, #1
   15cc0:	4193      	sbcs	r3, r2
   15cc2:	b2db      	uxtb	r3, r3
}
   15cc4:	0018      	movs	r0, r3
   15cc6:	46bd      	mov	sp, r7
   15cc8:	b004      	add	sp, #16
   15cca:	bd80      	pop	{r7, pc}

00015ccc <_usart_wait_for_sync>:
{
   15ccc:	b580      	push	{r7, lr}
   15cce:	b082      	sub	sp, #8
   15cd0:	af00      	add	r7, sp, #0
   15cd2:	6078      	str	r0, [r7, #4]
	while (usart_is_syncing(module)) {
   15cd4:	46c0      	nop			; (mov r8, r8)
   15cd6:	687b      	ldr	r3, [r7, #4]
   15cd8:	0018      	movs	r0, r3
   15cda:	4b04      	ldr	r3, [pc, #16]	; (15cec <_usart_wait_for_sync+0x20>)
   15cdc:	4798      	blx	r3
   15cde:	1e03      	subs	r3, r0, #0
   15ce0:	d1f9      	bne.n	15cd6 <_usart_wait_for_sync+0xa>
}
   15ce2:	46c0      	nop			; (mov r8, r8)
   15ce4:	46bd      	mov	sp, r7
   15ce6:	b002      	add	sp, #8
   15ce8:	bd80      	pop	{r7, pc}
   15cea:	46c0      	nop			; (mov r8, r8)
   15cec:	00015cad 	.word	0x00015cad

00015cf0 <_usart_write_buffer>:
 */
enum status_code _usart_write_buffer(
		struct usart_module *const module,
		uint8_t *tx_data,
		uint16_t length)
{
   15cf0:	b580      	push	{r7, lr}
   15cf2:	b086      	sub	sp, #24
   15cf4:	af00      	add	r7, sp, #0
   15cf6:	60f8      	str	r0, [r7, #12]
   15cf8:	60b9      	str	r1, [r7, #8]
   15cfa:	1dbb      	adds	r3, r7, #6
   15cfc:	801a      	strh	r2, [r3, #0]
	Assert(module);
	Assert(module->hw);
	Assert(tx_data);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
   15cfe:	68fb      	ldr	r3, [r7, #12]
   15d00:	681b      	ldr	r3, [r3, #0]
   15d02:	617b      	str	r3, [r7, #20]

	system_interrupt_enter_critical_section();
   15d04:	4b0f      	ldr	r3, [pc, #60]	; (15d44 <_usart_write_buffer+0x54>)
   15d06:	4798      	blx	r3

	/* Check if the USART transmitter is busy */
	if (module->remaining_tx_buffer_length > 0) {
   15d08:	68fb      	ldr	r3, [r7, #12]
   15d0a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
   15d0c:	b29b      	uxth	r3, r3
   15d0e:	2b00      	cmp	r3, #0
   15d10:	d003      	beq.n	15d1a <_usart_write_buffer+0x2a>
		system_interrupt_leave_critical_section();
   15d12:	4b0d      	ldr	r3, [pc, #52]	; (15d48 <_usart_write_buffer+0x58>)
   15d14:	4798      	blx	r3
		return STATUS_BUSY;
   15d16:	2305      	movs	r3, #5
   15d18:	e010      	b.n	15d3c <_usart_write_buffer+0x4c>
	}

	/* Write parameters to the device instance */
	module->remaining_tx_buffer_length = length;
   15d1a:	68fb      	ldr	r3, [r7, #12]
   15d1c:	1dba      	adds	r2, r7, #6
   15d1e:	8812      	ldrh	r2, [r2, #0]
   15d20:	85da      	strh	r2, [r3, #46]	; 0x2e

	system_interrupt_leave_critical_section();
   15d22:	4b09      	ldr	r3, [pc, #36]	; (15d48 <_usart_write_buffer+0x58>)
   15d24:	4798      	blx	r3

	module->tx_buffer_ptr              = tx_data;
   15d26:	68fb      	ldr	r3, [r7, #12]
   15d28:	68ba      	ldr	r2, [r7, #8]
   15d2a:	629a      	str	r2, [r3, #40]	; 0x28
	module->tx_status                  = STATUS_BUSY;
   15d2c:	68fb      	ldr	r3, [r7, #12]
   15d2e:	2233      	movs	r2, #51	; 0x33
   15d30:	2105      	movs	r1, #5
   15d32:	5499      	strb	r1, [r3, r2]

	/* Enable the Data Register Empty Interrupt */
	usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_DRE;
   15d34:	697b      	ldr	r3, [r7, #20]
   15d36:	2201      	movs	r2, #1
   15d38:	759a      	strb	r2, [r3, #22]

	return STATUS_OK;
   15d3a:	2300      	movs	r3, #0
}
   15d3c:	0018      	movs	r0, r3
   15d3e:	46bd      	mov	sp, r7
   15d40:	b006      	add	sp, #24
   15d42:	bd80      	pop	{r7, pc}
   15d44:	00015c85 	.word	0x00015c85
   15d48:	00015c99 	.word	0x00015c99

00015d4c <_usart_read_buffer>:
 */
enum status_code _usart_read_buffer(
		struct usart_module *const module,
		uint8_t *rx_data,
		uint16_t length)
{
   15d4c:	b580      	push	{r7, lr}
   15d4e:	b086      	sub	sp, #24
   15d50:	af00      	add	r7, sp, #0
   15d52:	60f8      	str	r0, [r7, #12]
   15d54:	60b9      	str	r1, [r7, #8]
   15d56:	1dbb      	adds	r3, r7, #6
   15d58:	801a      	strh	r2, [r3, #0]
	Assert(module);
	Assert(module->hw);
	Assert(rx_data);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
   15d5a:	68fb      	ldr	r3, [r7, #12]
   15d5c:	681b      	ldr	r3, [r3, #0]
   15d5e:	617b      	str	r3, [r7, #20]

	system_interrupt_enter_critical_section();
   15d60:	4b16      	ldr	r3, [pc, #88]	; (15dbc <_usart_read_buffer+0x70>)
   15d62:	4798      	blx	r3

	/* Check if the USART receiver is busy */
	if (module->remaining_rx_buffer_length > 0) {
   15d64:	68fb      	ldr	r3, [r7, #12]
   15d66:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
   15d68:	b29b      	uxth	r3, r3
   15d6a:	2b00      	cmp	r3, #0
   15d6c:	d003      	beq.n	15d76 <_usart_read_buffer+0x2a>
		system_interrupt_leave_critical_section();
   15d6e:	4b14      	ldr	r3, [pc, #80]	; (15dc0 <_usart_read_buffer+0x74>)
   15d70:	4798      	blx	r3
		return STATUS_BUSY;
   15d72:	2305      	movs	r3, #5
   15d74:	e01e      	b.n	15db4 <_usart_read_buffer+0x68>
	}

	/* Set length for the buffer and the pointer, and let
	 * the interrupt handler do the rest */
	module->remaining_rx_buffer_length = length;
   15d76:	68fb      	ldr	r3, [r7, #12]
   15d78:	1dba      	adds	r2, r7, #6
   15d7a:	8812      	ldrh	r2, [r2, #0]
   15d7c:	859a      	strh	r2, [r3, #44]	; 0x2c

	system_interrupt_leave_critical_section();
   15d7e:	4b10      	ldr	r3, [pc, #64]	; (15dc0 <_usart_read_buffer+0x74>)
   15d80:	4798      	blx	r3

	module->rx_buffer_ptr              = rx_data;
   15d82:	68fb      	ldr	r3, [r7, #12]
   15d84:	68ba      	ldr	r2, [r7, #8]
   15d86:	625a      	str	r2, [r3, #36]	; 0x24
	module->rx_status                  = STATUS_BUSY;
   15d88:	68fb      	ldr	r3, [r7, #12]
   15d8a:	2232      	movs	r2, #50	; 0x32
   15d8c:	2105      	movs	r1, #5
   15d8e:	5499      	strb	r1, [r3, r2]

	/* Enable the RX Complete Interrupt */
	usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_RXC;
   15d90:	697b      	ldr	r3, [r7, #20]
   15d92:	2204      	movs	r2, #4
   15d94:	759a      	strb	r2, [r3, #22]

#ifdef FEATURE_USART_LIN_SLAVE
	/* Enable the break character is received Interrupt */
	if(module->lin_slave_enabled) {
   15d96:	68fb      	ldr	r3, [r7, #12]
   15d98:	7a1b      	ldrb	r3, [r3, #8]
   15d9a:	2b00      	cmp	r3, #0
   15d9c:	d002      	beq.n	15da4 <_usart_read_buffer+0x58>
		usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_RXBRK;
   15d9e:	697b      	ldr	r3, [r7, #20]
   15da0:	2220      	movs	r2, #32
   15da2:	759a      	strb	r2, [r3, #22]
	}
#endif

#ifdef FEATURE_USART_START_FRAME_DECTION
	/* Enable a start condition is detected Interrupt */
	if(module->start_frame_detection_enabled) {
   15da4:	68fb      	ldr	r3, [r7, #12]
   15da6:	7a5b      	ldrb	r3, [r3, #9]
   15da8:	2b00      	cmp	r3, #0
   15daa:	d002      	beq.n	15db2 <_usart_read_buffer+0x66>
		usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_RXS;
   15dac:	697b      	ldr	r3, [r7, #20]
   15dae:	2208      	movs	r2, #8
   15db0:	759a      	strb	r2, [r3, #22]
	}
#endif

	return STATUS_OK;
   15db2:	2300      	movs	r3, #0
}
   15db4:	0018      	movs	r0, r3
   15db6:	46bd      	mov	sp, r7
   15db8:	b006      	add	sp, #24
   15dba:	bd80      	pop	{r7, pc}
   15dbc:	00015c85 	.word	0x00015c85
   15dc0:	00015c99 	.word	0x00015c99

00015dc4 <usart_register_callback>:
 */
void usart_register_callback(
		struct usart_module *const module,
		usart_callback_t callback_func,
		enum usart_callback callback_type)
{
   15dc4:	b580      	push	{r7, lr}
   15dc6:	b084      	sub	sp, #16
   15dc8:	af00      	add	r7, sp, #0
   15dca:	60f8      	str	r0, [r7, #12]
   15dcc:	60b9      	str	r1, [r7, #8]
   15dce:	1dfb      	adds	r3, r7, #7
   15dd0:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(callback_func);

	/* Register callback function */
	module->callback[callback_type] = callback_func;
   15dd2:	1dfb      	adds	r3, r7, #7
   15dd4:	781b      	ldrb	r3, [r3, #0]
   15dd6:	68fa      	ldr	r2, [r7, #12]
   15dd8:	3302      	adds	r3, #2
   15dda:	009b      	lsls	r3, r3, #2
   15ddc:	18d3      	adds	r3, r2, r3
   15dde:	3304      	adds	r3, #4
   15de0:	68ba      	ldr	r2, [r7, #8]
   15de2:	601a      	str	r2, [r3, #0]

	/* Set the bit corresponding to the callback_type */
	module->callback_reg_mask |= (1 << callback_type);
   15de4:	68fb      	ldr	r3, [r7, #12]
   15de6:	2230      	movs	r2, #48	; 0x30
   15de8:	5c9b      	ldrb	r3, [r3, r2]
   15dea:	b25a      	sxtb	r2, r3
   15dec:	1dfb      	adds	r3, r7, #7
   15dee:	781b      	ldrb	r3, [r3, #0]
   15df0:	2101      	movs	r1, #1
   15df2:	4099      	lsls	r1, r3
   15df4:	000b      	movs	r3, r1
   15df6:	b25b      	sxtb	r3, r3
   15df8:	4313      	orrs	r3, r2
   15dfa:	b25b      	sxtb	r3, r3
   15dfc:	b2d9      	uxtb	r1, r3
   15dfe:	68fb      	ldr	r3, [r7, #12]
   15e00:	2230      	movs	r2, #48	; 0x30
   15e02:	5499      	strb	r1, [r3, r2]
}
   15e04:	46c0      	nop			; (mov r8, r8)
   15e06:	46bd      	mov	sp, r7
   15e08:	b004      	add	sp, #16
   15e0a:	bd80      	pop	{r7, pc}

00015e0c <usart_write_buffer_job>:
 */
enum status_code usart_write_buffer_job(
		struct usart_module *const module,
		uint8_t *tx_data,
		uint16_t length)
{
   15e0c:	b580      	push	{r7, lr}
   15e0e:	b084      	sub	sp, #16
   15e10:	af00      	add	r7, sp, #0
   15e12:	60f8      	str	r0, [r7, #12]
   15e14:	60b9      	str	r1, [r7, #8]
   15e16:	1dbb      	adds	r3, r7, #6
   15e18:	801a      	strh	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(tx_data);

	if (length == 0) {
   15e1a:	1dbb      	adds	r3, r7, #6
   15e1c:	881b      	ldrh	r3, [r3, #0]
   15e1e:	2b00      	cmp	r3, #0
   15e20:	d101      	bne.n	15e26 <usart_write_buffer_job+0x1a>
		return STATUS_ERR_INVALID_ARG;
   15e22:	2317      	movs	r3, #23
   15e24:	e010      	b.n	15e48 <usart_write_buffer_job+0x3c>
	}

	/* Check that the transmitter is enabled */
	if (!(module->transmitter_enabled)) {
   15e26:	68fb      	ldr	r3, [r7, #12]
   15e28:	79db      	ldrb	r3, [r3, #7]
   15e2a:	2201      	movs	r2, #1
   15e2c:	4053      	eors	r3, r2
   15e2e:	b2db      	uxtb	r3, r3
   15e30:	2b00      	cmp	r3, #0
   15e32:	d001      	beq.n	15e38 <usart_write_buffer_job+0x2c>
		return STATUS_ERR_DENIED;
   15e34:	231c      	movs	r3, #28
   15e36:	e007      	b.n	15e48 <usart_write_buffer_job+0x3c>
	}

	/* Issue internal asynchronous write */
	return _usart_write_buffer(module, tx_data, length);
   15e38:	1dbb      	adds	r3, r7, #6
   15e3a:	881a      	ldrh	r2, [r3, #0]
   15e3c:	68b9      	ldr	r1, [r7, #8]
   15e3e:	68fb      	ldr	r3, [r7, #12]
   15e40:	0018      	movs	r0, r3
   15e42:	4b03      	ldr	r3, [pc, #12]	; (15e50 <usart_write_buffer_job+0x44>)
   15e44:	4798      	blx	r3
   15e46:	0003      	movs	r3, r0
}
   15e48:	0018      	movs	r0, r3
   15e4a:	46bd      	mov	sp, r7
   15e4c:	b004      	add	sp, #16
   15e4e:	bd80      	pop	{r7, pc}
   15e50:	00015cf1 	.word	0x00015cf1

00015e54 <usart_read_buffer_job>:
 */
enum status_code usart_read_buffer_job(
		struct usart_module *const module,
		uint8_t *rx_data,
		uint16_t length)
{
   15e54:	b580      	push	{r7, lr}
   15e56:	b084      	sub	sp, #16
   15e58:	af00      	add	r7, sp, #0
   15e5a:	60f8      	str	r0, [r7, #12]
   15e5c:	60b9      	str	r1, [r7, #8]
   15e5e:	1dbb      	adds	r3, r7, #6
   15e60:	801a      	strh	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(rx_data);

	if (length == 0) {
   15e62:	1dbb      	adds	r3, r7, #6
   15e64:	881b      	ldrh	r3, [r3, #0]
   15e66:	2b00      	cmp	r3, #0
   15e68:	d101      	bne.n	15e6e <usart_read_buffer_job+0x1a>
		return STATUS_ERR_INVALID_ARG;
   15e6a:	2317      	movs	r3, #23
   15e6c:	e010      	b.n	15e90 <usart_read_buffer_job+0x3c>
	}

	/* Check that the receiver is enabled */
	if (!(module->receiver_enabled)) {
   15e6e:	68fb      	ldr	r3, [r7, #12]
   15e70:	799b      	ldrb	r3, [r3, #6]
   15e72:	2201      	movs	r2, #1
   15e74:	4053      	eors	r3, r2
   15e76:	b2db      	uxtb	r3, r3
   15e78:	2b00      	cmp	r3, #0
   15e7a:	d001      	beq.n	15e80 <usart_read_buffer_job+0x2c>
		return STATUS_ERR_DENIED;
   15e7c:	231c      	movs	r3, #28
   15e7e:	e007      	b.n	15e90 <usart_read_buffer_job+0x3c>
	}

	/* Issue internal asynchronous read */
	return _usart_read_buffer(module, rx_data, length);
   15e80:	1dbb      	adds	r3, r7, #6
   15e82:	881a      	ldrh	r2, [r3, #0]
   15e84:	68b9      	ldr	r1, [r7, #8]
   15e86:	68fb      	ldr	r3, [r7, #12]
   15e88:	0018      	movs	r0, r3
   15e8a:	4b03      	ldr	r3, [pc, #12]	; (15e98 <usart_read_buffer_job+0x44>)
   15e8c:	4798      	blx	r3
   15e8e:	0003      	movs	r3, r0
}
   15e90:	0018      	movs	r0, r3
   15e92:	46bd      	mov	sp, r7
   15e94:	b004      	add	sp, #16
   15e96:	bd80      	pop	{r7, pc}
   15e98:	00015d4d 	.word	0x00015d4d

00015e9c <usart_get_job_status>:
 * \retval STATUS_ERR_INVALID_ARG  An invalid transceiver enum given
 */
enum status_code usart_get_job_status(
		struct usart_module *const module,
		enum usart_transceiver_type transceiver_type)
{
   15e9c:	b580      	push	{r7, lr}
   15e9e:	b084      	sub	sp, #16
   15ea0:	af00      	add	r7, sp, #0
   15ea2:	6078      	str	r0, [r7, #4]
   15ea4:	000a      	movs	r2, r1
   15ea6:	1cfb      	adds	r3, r7, #3
   15ea8:	701a      	strb	r2, [r3, #0]
	Assert(module);

	/* Variable for status code */
	enum status_code status_code;

	switch(transceiver_type) {
   15eaa:	1cfb      	adds	r3, r7, #3
   15eac:	781b      	ldrb	r3, [r3, #0]
   15eae:	2b00      	cmp	r3, #0
   15eb0:	d002      	beq.n	15eb8 <usart_get_job_status+0x1c>
   15eb2:	2b01      	cmp	r3, #1
   15eb4:	d007      	beq.n	15ec6 <usart_get_job_status+0x2a>
   15eb6:	e00d      	b.n	15ed4 <usart_get_job_status+0x38>
	case USART_TRANSCEIVER_RX:
			status_code = module->rx_status;
   15eb8:	230f      	movs	r3, #15
   15eba:	18fb      	adds	r3, r7, r3
   15ebc:	687a      	ldr	r2, [r7, #4]
   15ebe:	2132      	movs	r1, #50	; 0x32
   15ec0:	5c52      	ldrb	r2, [r2, r1]
   15ec2:	701a      	strb	r2, [r3, #0]
			break;
   15ec4:	e00b      	b.n	15ede <usart_get_job_status+0x42>

	case USART_TRANSCEIVER_TX:
			status_code = module->tx_status;
   15ec6:	230f      	movs	r3, #15
   15ec8:	18fb      	adds	r3, r7, r3
   15eca:	687a      	ldr	r2, [r7, #4]
   15ecc:	2133      	movs	r1, #51	; 0x33
   15ece:	5c52      	ldrb	r2, [r2, r1]
   15ed0:	701a      	strb	r2, [r3, #0]
			break;
   15ed2:	e004      	b.n	15ede <usart_get_job_status+0x42>

	default:
			status_code = STATUS_ERR_INVALID_ARG;
   15ed4:	230f      	movs	r3, #15
   15ed6:	18fb      	adds	r3, r7, r3
   15ed8:	2217      	movs	r2, #23
   15eda:	701a      	strb	r2, [r3, #0]
			break;
   15edc:	46c0      	nop			; (mov r8, r8)
	}

	return status_code;
   15ede:	230f      	movs	r3, #15
   15ee0:	18fb      	adds	r3, r7, r3
   15ee2:	781b      	ldrb	r3, [r3, #0]
}
   15ee4:	0018      	movs	r0, r3
   15ee6:	46bd      	mov	sp, r7
   15ee8:	b004      	add	sp, #16
   15eea:	bd80      	pop	{r7, pc}

00015eec <_usart_interrupt_handler>:
 * \param[in]  instance  ID of the SERCOM instance calling the interrupt
 *                       handler.
 */
void _usart_interrupt_handler(
		uint8_t instance)
{
   15eec:	b580      	push	{r7, lr}
   15eee:	b088      	sub	sp, #32
   15ef0:	af00      	add	r7, sp, #0
   15ef2:	0002      	movs	r2, r0
   15ef4:	1dfb      	adds	r3, r7, #7
   15ef6:	701a      	strb	r2, [r3, #0]
	uint8_t error_code;


	/* Get device instance from the look-up table */
	struct usart_module *module
		= (struct usart_module *)_sercom_instances[instance];
   15ef8:	1dfb      	adds	r3, r7, #7
   15efa:	781a      	ldrb	r2, [r3, #0]
	struct usart_module *module
   15efc:	4ba3      	ldr	r3, [pc, #652]	; (1618c <_usart_interrupt_handler+0x2a0>)
   15efe:	0092      	lsls	r2, r2, #2
   15f00:	58d3      	ldr	r3, [r2, r3]
   15f02:	61bb      	str	r3, [r7, #24]

	/* Pointer to the hardware module instance */
	SercomUsart *const usart_hw
		= &(module->hw->USART);
   15f04:	69bb      	ldr	r3, [r7, #24]
   15f06:	681b      	ldr	r3, [r3, #0]
	SercomUsart *const usart_hw
   15f08:	617b      	str	r3, [r7, #20]

	/* Wait for the synchronization to complete */
	_usart_wait_for_sync(module);
   15f0a:	69bb      	ldr	r3, [r7, #24]
   15f0c:	0018      	movs	r0, r3
   15f0e:	4ba0      	ldr	r3, [pc, #640]	; (16190 <_usart_interrupt_handler+0x2a4>)
   15f10:	4798      	blx	r3

	/* Read and mask interrupt flag register */
	interrupt_status = usart_hw->INTFLAG.reg;
   15f12:	697b      	ldr	r3, [r7, #20]
   15f14:	7e1b      	ldrb	r3, [r3, #24]
   15f16:	b2da      	uxtb	r2, r3
   15f18:	2312      	movs	r3, #18
   15f1a:	18fb      	adds	r3, r7, r3
   15f1c:	801a      	strh	r2, [r3, #0]
	interrupt_status &= usart_hw->INTENSET.reg;
   15f1e:	697b      	ldr	r3, [r7, #20]
   15f20:	7d9b      	ldrb	r3, [r3, #22]
   15f22:	b2db      	uxtb	r3, r3
   15f24:	b29a      	uxth	r2, r3
   15f26:	2312      	movs	r3, #18
   15f28:	18fb      	adds	r3, r7, r3
   15f2a:	2112      	movs	r1, #18
   15f2c:	1879      	adds	r1, r7, r1
   15f2e:	8809      	ldrh	r1, [r1, #0]
   15f30:	400a      	ands	r2, r1
   15f32:	801a      	strh	r2, [r3, #0]
	callback_status = module->callback_reg_mask &
   15f34:	69bb      	ldr	r3, [r7, #24]
   15f36:	2230      	movs	r2, #48	; 0x30
   15f38:	5c9b      	ldrb	r3, [r3, r2]
			module->callback_enable_mask;
   15f3a:	69ba      	ldr	r2, [r7, #24]
   15f3c:	2131      	movs	r1, #49	; 0x31
   15f3e:	5c52      	ldrb	r2, [r2, r1]
	callback_status = module->callback_reg_mask &
   15f40:	4013      	ands	r3, r2
   15f42:	b2da      	uxtb	r2, r3
   15f44:	2310      	movs	r3, #16
   15f46:	18fb      	adds	r3, r7, r3
   15f48:	801a      	strh	r2, [r3, #0]

	/* Check if a DATA READY interrupt has occurred,
	 * and if there is more to transfer */
	if (interrupt_status & SERCOM_USART_INTFLAG_DRE) {
   15f4a:	2312      	movs	r3, #18
   15f4c:	18fb      	adds	r3, r7, r3
   15f4e:	881b      	ldrh	r3, [r3, #0]
   15f50:	2201      	movs	r2, #1
   15f52:	4013      	ands	r3, r2
   15f54:	d044      	beq.n	15fe0 <_usart_interrupt_handler+0xf4>
		if (module->remaining_tx_buffer_length) {
   15f56:	69bb      	ldr	r3, [r7, #24]
   15f58:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
   15f5a:	b29b      	uxth	r3, r3
   15f5c:	2b00      	cmp	r3, #0
   15f5e:	d03c      	beq.n	15fda <_usart_interrupt_handler+0xee>
			/* Write value will be at least 8-bits long */
			uint16_t data_to_send = *(module->tx_buffer_ptr);
   15f60:	69bb      	ldr	r3, [r7, #24]
   15f62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   15f64:	781b      	ldrb	r3, [r3, #0]
   15f66:	b2da      	uxtb	r2, r3
   15f68:	231c      	movs	r3, #28
   15f6a:	18fb      	adds	r3, r7, r3
   15f6c:	801a      	strh	r2, [r3, #0]
			/* Increment 8-bit pointer */
			(module->tx_buffer_ptr)++;
   15f6e:	69bb      	ldr	r3, [r7, #24]
   15f70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   15f72:	1c5a      	adds	r2, r3, #1
   15f74:	69bb      	ldr	r3, [r7, #24]
   15f76:	629a      	str	r2, [r3, #40]	; 0x28

			if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
   15f78:	69bb      	ldr	r3, [r7, #24]
   15f7a:	795b      	ldrb	r3, [r3, #5]
   15f7c:	2b01      	cmp	r3, #1
   15f7e:	d113      	bne.n	15fa8 <_usart_interrupt_handler+0xbc>
				data_to_send |= (*(module->tx_buffer_ptr) << 8);
   15f80:	69bb      	ldr	r3, [r7, #24]
   15f82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   15f84:	781b      	ldrb	r3, [r3, #0]
   15f86:	b2db      	uxtb	r3, r3
   15f88:	021b      	lsls	r3, r3, #8
   15f8a:	b21a      	sxth	r2, r3
   15f8c:	231c      	movs	r3, #28
   15f8e:	18fb      	adds	r3, r7, r3
   15f90:	2100      	movs	r1, #0
   15f92:	5e5b      	ldrsh	r3, [r3, r1]
   15f94:	4313      	orrs	r3, r2
   15f96:	b21a      	sxth	r2, r3
   15f98:	231c      	movs	r3, #28
   15f9a:	18fb      	adds	r3, r7, r3
   15f9c:	801a      	strh	r2, [r3, #0]
				/* Increment 8-bit pointer */
				(module->tx_buffer_ptr)++;
   15f9e:	69bb      	ldr	r3, [r7, #24]
   15fa0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   15fa2:	1c5a      	adds	r2, r3, #1
   15fa4:	69bb      	ldr	r3, [r7, #24]
   15fa6:	629a      	str	r2, [r3, #40]	; 0x28
			}
			/* Write the data to send */
			usart_hw->DATA.reg = (data_to_send & SERCOM_USART_DATA_MASK);
   15fa8:	231c      	movs	r3, #28
   15faa:	18fb      	adds	r3, r7, r3
   15fac:	881b      	ldrh	r3, [r3, #0]
   15fae:	05db      	lsls	r3, r3, #23
   15fb0:	0ddb      	lsrs	r3, r3, #23
   15fb2:	b29a      	uxth	r2, r3
   15fb4:	697b      	ldr	r3, [r7, #20]
   15fb6:	851a      	strh	r2, [r3, #40]	; 0x28

			if (--(module->remaining_tx_buffer_length) == 0) {
   15fb8:	69bb      	ldr	r3, [r7, #24]
   15fba:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
   15fbc:	b29b      	uxth	r3, r3
   15fbe:	3b01      	subs	r3, #1
   15fc0:	b29b      	uxth	r3, r3
   15fc2:	69ba      	ldr	r2, [r7, #24]
   15fc4:	1c19      	adds	r1, r3, #0
   15fc6:	85d1      	strh	r1, [r2, #46]	; 0x2e
   15fc8:	2b00      	cmp	r3, #0
   15fca:	d109      	bne.n	15fe0 <_usart_interrupt_handler+0xf4>
				/* Disable the Data Register Empty Interrupt */
				usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
   15fcc:	697b      	ldr	r3, [r7, #20]
   15fce:	2201      	movs	r2, #1
   15fd0:	751a      	strb	r2, [r3, #20]
				/* Enable Transmission Complete interrupt */
				usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_TXC;
   15fd2:	697b      	ldr	r3, [r7, #20]
   15fd4:	2202      	movs	r2, #2
   15fd6:	759a      	strb	r2, [r3, #22]
   15fd8:	e002      	b.n	15fe0 <_usart_interrupt_handler+0xf4>

			}
		} else {
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
   15fda:	697b      	ldr	r3, [r7, #20]
   15fdc:	2201      	movs	r2, #1
   15fde:	751a      	strb	r2, [r3, #20]
		}
	}

	/* Check if the Transmission Complete interrupt has occurred and
	 * that the transmit buffer is empty */
	if (interrupt_status & SERCOM_USART_INTFLAG_TXC) {
   15fe0:	2312      	movs	r3, #18
   15fe2:	18fb      	adds	r3, r7, r3
   15fe4:	881b      	ldrh	r3, [r3, #0]
   15fe6:	2202      	movs	r2, #2
   15fe8:	4013      	ands	r3, r2
   15fea:	d011      	beq.n	16010 <_usart_interrupt_handler+0x124>

		/* Disable TX Complete Interrupt, and set STATUS_OK */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_TXC;
   15fec:	697b      	ldr	r3, [r7, #20]
   15fee:	2202      	movs	r2, #2
   15ff0:	751a      	strb	r2, [r3, #20]
		module->tx_status = STATUS_OK;
   15ff2:	69bb      	ldr	r3, [r7, #24]
   15ff4:	2233      	movs	r2, #51	; 0x33
   15ff6:	2100      	movs	r1, #0
   15ff8:	5499      	strb	r1, [r3, r2]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BUFFER_TRANSMITTED)) {
   15ffa:	2310      	movs	r3, #16
   15ffc:	18fb      	adds	r3, r7, r3
   15ffe:	881b      	ldrh	r3, [r3, #0]
   16000:	2201      	movs	r2, #1
   16002:	4013      	ands	r3, r2
   16004:	d004      	beq.n	16010 <_usart_interrupt_handler+0x124>
			(*(module->callback[USART_CALLBACK_BUFFER_TRANSMITTED]))(module);
   16006:	69bb      	ldr	r3, [r7, #24]
   16008:	68db      	ldr	r3, [r3, #12]
   1600a:	69ba      	ldr	r2, [r7, #24]
   1600c:	0010      	movs	r0, r2
   1600e:	4798      	blx	r3
		}
	}

	/* Check if the Receive Complete interrupt has occurred, and that
	 * there's more data to receive */
	if (interrupt_status & SERCOM_USART_INTFLAG_RXC) {
   16010:	2312      	movs	r3, #18
   16012:	18fb      	adds	r3, r7, r3
   16014:	881b      	ldrh	r3, [r3, #0]
   16016:	2204      	movs	r2, #4
   16018:	4013      	ands	r3, r2
   1601a:	d100      	bne.n	1601e <_usart_interrupt_handler+0x132>
   1601c:	e0bd      	b.n	1619a <_usart_interrupt_handler+0x2ae>

		if (module->remaining_rx_buffer_length) {
   1601e:	69bb      	ldr	r3, [r7, #24]
   16020:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
   16022:	b29b      	uxth	r3, r3
   16024:	2b00      	cmp	r3, #0
   16026:	d100      	bne.n	1602a <_usart_interrupt_handler+0x13e>
   16028:	e0b4      	b.n	16194 <_usart_interrupt_handler+0x2a8>
			/* Read out the status code and mask away all but the 4 LSBs*/
			error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
   1602a:	697b      	ldr	r3, [r7, #20]
   1602c:	8b5b      	ldrh	r3, [r3, #26]
   1602e:	b29b      	uxth	r3, r3
   16030:	b2da      	uxtb	r2, r3
   16032:	231f      	movs	r3, #31
   16034:	18fb      	adds	r3, r7, r3
   16036:	213f      	movs	r1, #63	; 0x3f
   16038:	400a      	ands	r2, r1
   1603a:	701a      	strb	r2, [r3, #0]
#if !SAMD20
			/* CTS status should not be considered as an error */
			if(error_code & SERCOM_USART_STATUS_CTS) {
   1603c:	231f      	movs	r3, #31
   1603e:	18fb      	adds	r3, r7, r3
   16040:	781b      	ldrb	r3, [r3, #0]
   16042:	2208      	movs	r2, #8
   16044:	4013      	ands	r3, r2
   16046:	d007      	beq.n	16058 <_usart_interrupt_handler+0x16c>
				error_code &= ~SERCOM_USART_STATUS_CTS;
   16048:	231f      	movs	r3, #31
   1604a:	18fb      	adds	r3, r7, r3
   1604c:	221f      	movs	r2, #31
   1604e:	18ba      	adds	r2, r7, r2
   16050:	7812      	ldrb	r2, [r2, #0]
   16052:	2108      	movs	r1, #8
   16054:	438a      	bics	r2, r1
   16056:	701a      	strb	r2, [r3, #0]
			if(error_code & SERCOM_USART_STATUS_TXE) {
				error_code &= ~SERCOM_USART_STATUS_TXE;
			}
#endif
			/* Check if an error has occurred during the receiving */
			if (error_code) {
   16058:	231f      	movs	r3, #31
   1605a:	18fb      	adds	r3, r7, r3
   1605c:	781b      	ldrb	r3, [r3, #0]
   1605e:	2b00      	cmp	r3, #0
   16060:	d050      	beq.n	16104 <_usart_interrupt_handler+0x218>
				/* Check which error occurred */
				if (error_code & SERCOM_USART_STATUS_FERR) {
   16062:	231f      	movs	r3, #31
   16064:	18fb      	adds	r3, r7, r3
   16066:	781b      	ldrb	r3, [r3, #0]
   16068:	2202      	movs	r2, #2
   1606a:	4013      	ands	r3, r2
   1606c:	d007      	beq.n	1607e <_usart_interrupt_handler+0x192>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_BAD_FORMAT;
   1606e:	69bb      	ldr	r3, [r7, #24]
   16070:	2232      	movs	r2, #50	; 0x32
   16072:	211a      	movs	r1, #26
   16074:	5499      	strb	r1, [r3, r2]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_FERR;
   16076:	697b      	ldr	r3, [r7, #20]
   16078:	2202      	movs	r2, #2
   1607a:	835a      	strh	r2, [r3, #26]
   1607c:	e036      	b.n	160ec <_usart_interrupt_handler+0x200>
				} else if (error_code & SERCOM_USART_STATUS_BUFOVF) {
   1607e:	231f      	movs	r3, #31
   16080:	18fb      	adds	r3, r7, r3
   16082:	781b      	ldrb	r3, [r3, #0]
   16084:	2204      	movs	r2, #4
   16086:	4013      	ands	r3, r2
   16088:	d007      	beq.n	1609a <_usart_interrupt_handler+0x1ae>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_OVERFLOW;
   1608a:	69bb      	ldr	r3, [r7, #24]
   1608c:	2232      	movs	r2, #50	; 0x32
   1608e:	211e      	movs	r1, #30
   16090:	5499      	strb	r1, [r3, r2]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_BUFOVF;
   16092:	697b      	ldr	r3, [r7, #20]
   16094:	2204      	movs	r2, #4
   16096:	835a      	strh	r2, [r3, #26]
   16098:	e028      	b.n	160ec <_usart_interrupt_handler+0x200>
				} else if (error_code & SERCOM_USART_STATUS_PERR) {
   1609a:	231f      	movs	r3, #31
   1609c:	18fb      	adds	r3, r7, r3
   1609e:	781b      	ldrb	r3, [r3, #0]
   160a0:	2201      	movs	r2, #1
   160a2:	4013      	ands	r3, r2
   160a4:	d007      	beq.n	160b6 <_usart_interrupt_handler+0x1ca>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_BAD_DATA;
   160a6:	69bb      	ldr	r3, [r7, #24]
   160a8:	2232      	movs	r2, #50	; 0x32
   160aa:	2113      	movs	r1, #19
   160ac:	5499      	strb	r1, [r3, r2]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_PERR;
   160ae:	697b      	ldr	r3, [r7, #20]
   160b0:	2201      	movs	r2, #1
   160b2:	835a      	strh	r2, [r3, #26]
   160b4:	e01a      	b.n	160ec <_usart_interrupt_handler+0x200>
				}
#ifdef FEATURE_USART_LIN_SLAVE
				else if (error_code & SERCOM_USART_STATUS_ISF) {
   160b6:	231f      	movs	r3, #31
   160b8:	18fb      	adds	r3, r7, r3
   160ba:	781b      	ldrb	r3, [r3, #0]
   160bc:	2210      	movs	r2, #16
   160be:	4013      	ands	r3, r2
   160c0:	d007      	beq.n	160d2 <_usart_interrupt_handler+0x1e6>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_PROTOCOL;
   160c2:	69bb      	ldr	r3, [r7, #24]
   160c4:	2232      	movs	r2, #50	; 0x32
   160c6:	2142      	movs	r1, #66	; 0x42
   160c8:	5499      	strb	r1, [r3, r2]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_ISF;
   160ca:	697b      	ldr	r3, [r7, #20]
   160cc:	2210      	movs	r2, #16
   160ce:	835a      	strh	r2, [r3, #26]
   160d0:	e00c      	b.n	160ec <_usart_interrupt_handler+0x200>
				}
#endif
#ifdef FEATURE_USART_COLLISION_DECTION
				else if (error_code & SERCOM_USART_STATUS_COLL) {
   160d2:	231f      	movs	r3, #31
   160d4:	18fb      	adds	r3, r7, r3
   160d6:	781b      	ldrb	r3, [r3, #0]
   160d8:	2220      	movs	r2, #32
   160da:	4013      	ands	r3, r2
   160dc:	d006      	beq.n	160ec <_usart_interrupt_handler+0x200>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_PACKET_COLLISION;
   160de:	69bb      	ldr	r3, [r7, #24]
   160e0:	2232      	movs	r2, #50	; 0x32
   160e2:	2141      	movs	r1, #65	; 0x41
   160e4:	5499      	strb	r1, [r3, r2]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
   160e6:	697b      	ldr	r3, [r7, #20]
   160e8:	2220      	movs	r2, #32
   160ea:	835a      	strh	r2, [r3, #26]
				}
#endif

				/* Run callback if registered and enabled */
				if (callback_status
						& (1 << USART_CALLBACK_ERROR)) {
   160ec:	2310      	movs	r3, #16
   160ee:	18fb      	adds	r3, r7, r3
   160f0:	881b      	ldrh	r3, [r3, #0]
   160f2:	2204      	movs	r2, #4
   160f4:	4013      	ands	r3, r2
				if (callback_status
   160f6:	d050      	beq.n	1619a <_usart_interrupt_handler+0x2ae>
					(*(module->callback[USART_CALLBACK_ERROR]))(module);
   160f8:	69bb      	ldr	r3, [r7, #24]
   160fa:	695b      	ldr	r3, [r3, #20]
   160fc:	69ba      	ldr	r2, [r7, #24]
   160fe:	0010      	movs	r0, r2
   16100:	4798      	blx	r3
   16102:	e04a      	b.n	1619a <_usart_interrupt_handler+0x2ae>

			} else {

				/* Read current packet from DATA register,
				 * increment buffer pointer and decrement buffer length */
				uint16_t received_data = (usart_hw->DATA.reg & SERCOM_USART_DATA_MASK);
   16104:	697b      	ldr	r3, [r7, #20]
   16106:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
   16108:	b29a      	uxth	r2, r3
   1610a:	230e      	movs	r3, #14
   1610c:	18fb      	adds	r3, r7, r3
   1610e:	05d2      	lsls	r2, r2, #23
   16110:	0dd2      	lsrs	r2, r2, #23
   16112:	801a      	strh	r2, [r3, #0]

				/* Read value will be at least 8-bits long */
				*(module->rx_buffer_ptr) = received_data;
   16114:	69bb      	ldr	r3, [r7, #24]
   16116:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   16118:	220e      	movs	r2, #14
   1611a:	18ba      	adds	r2, r7, r2
   1611c:	8812      	ldrh	r2, [r2, #0]
   1611e:	b2d2      	uxtb	r2, r2
   16120:	701a      	strb	r2, [r3, #0]
				/* Increment 8-bit pointer */
				module->rx_buffer_ptr += 1;
   16122:	69bb      	ldr	r3, [r7, #24]
   16124:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   16126:	1c5a      	adds	r2, r3, #1
   16128:	69bb      	ldr	r3, [r7, #24]
   1612a:	625a      	str	r2, [r3, #36]	; 0x24

				if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
   1612c:	69bb      	ldr	r3, [r7, #24]
   1612e:	795b      	ldrb	r3, [r3, #5]
   16130:	2b01      	cmp	r3, #1
   16132:	d10d      	bne.n	16150 <_usart_interrupt_handler+0x264>
					/* 9-bit data, write next received byte to the buffer */
					*(module->rx_buffer_ptr) = (received_data >> 8);
   16134:	69bb      	ldr	r3, [r7, #24]
   16136:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   16138:	220e      	movs	r2, #14
   1613a:	18ba      	adds	r2, r7, r2
   1613c:	8812      	ldrh	r2, [r2, #0]
   1613e:	0a12      	lsrs	r2, r2, #8
   16140:	b292      	uxth	r2, r2
   16142:	b2d2      	uxtb	r2, r2
   16144:	701a      	strb	r2, [r3, #0]
					/* Increment 8-bit pointer */
					module->rx_buffer_ptr += 1;
   16146:	69bb      	ldr	r3, [r7, #24]
   16148:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   1614a:	1c5a      	adds	r2, r3, #1
   1614c:	69bb      	ldr	r3, [r7, #24]
   1614e:	625a      	str	r2, [r3, #36]	; 0x24
				}

				/* Check if the last character have been received */
				if(--(module->remaining_rx_buffer_length) == 0) {
   16150:	69bb      	ldr	r3, [r7, #24]
   16152:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
   16154:	b29b      	uxth	r3, r3
   16156:	3b01      	subs	r3, #1
   16158:	b29b      	uxth	r3, r3
   1615a:	69ba      	ldr	r2, [r7, #24]
   1615c:	1c19      	adds	r1, r3, #0
   1615e:	8591      	strh	r1, [r2, #44]	; 0x2c
   16160:	2b00      	cmp	r3, #0
   16162:	d11a      	bne.n	1619a <_usart_interrupt_handler+0x2ae>
					/* Disable RX Complete Interrupt,
					 * and set STATUS_OK */
					usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
   16164:	697b      	ldr	r3, [r7, #20]
   16166:	2204      	movs	r2, #4
   16168:	751a      	strb	r2, [r3, #20]
					module->rx_status = STATUS_OK;
   1616a:	69bb      	ldr	r3, [r7, #24]
   1616c:	2232      	movs	r2, #50	; 0x32
   1616e:	2100      	movs	r1, #0
   16170:	5499      	strb	r1, [r3, r2]

					/* Run callback if registered and enabled */
					if (callback_status
							& (1 << USART_CALLBACK_BUFFER_RECEIVED)) {
   16172:	2310      	movs	r3, #16
   16174:	18fb      	adds	r3, r7, r3
   16176:	881b      	ldrh	r3, [r3, #0]
   16178:	2202      	movs	r2, #2
   1617a:	4013      	ands	r3, r2
					if (callback_status
   1617c:	d00d      	beq.n	1619a <_usart_interrupt_handler+0x2ae>
						(*(module->callback[USART_CALLBACK_BUFFER_RECEIVED]))(module);
   1617e:	69bb      	ldr	r3, [r7, #24]
   16180:	691b      	ldr	r3, [r3, #16]
   16182:	69ba      	ldr	r2, [r7, #24]
   16184:	0010      	movs	r0, r2
   16186:	4798      	blx	r3
   16188:	e007      	b.n	1619a <_usart_interrupt_handler+0x2ae>
   1618a:	46c0      	nop			; (mov r8, r8)
   1618c:	200055e8 	.word	0x200055e8
   16190:	00015ccd 	.word	0x00015ccd
					}
				}
			}
		} else {
			/* This should not happen. Disable Receive Complete interrupt. */
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
   16194:	697b      	ldr	r3, [r7, #20]
   16196:	2204      	movs	r2, #4
   16198:	751a      	strb	r2, [r3, #20]
		}
	}

#ifdef FEATURE_USART_HARDWARE_FLOW_CONTROL
	if (interrupt_status & SERCOM_USART_INTFLAG_CTSIC) {
   1619a:	2312      	movs	r3, #18
   1619c:	18fb      	adds	r3, r7, r3
   1619e:	881b      	ldrh	r3, [r3, #0]
   161a0:	2210      	movs	r2, #16
   161a2:	4013      	ands	r3, r2
   161a4:	d010      	beq.n	161c8 <_usart_interrupt_handler+0x2dc>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_CTSIC;
   161a6:	697b      	ldr	r3, [r7, #20]
   161a8:	2210      	movs	r2, #16
   161aa:	751a      	strb	r2, [r3, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_CTSIC;
   161ac:	697b      	ldr	r3, [r7, #20]
   161ae:	2210      	movs	r2, #16
   161b0:	761a      	strb	r2, [r3, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_CTS_INPUT_CHANGE)) {
   161b2:	2310      	movs	r3, #16
   161b4:	18fb      	adds	r3, r7, r3
   161b6:	881b      	ldrh	r3, [r3, #0]
   161b8:	2210      	movs	r2, #16
   161ba:	4013      	ands	r3, r2
   161bc:	d004      	beq.n	161c8 <_usart_interrupt_handler+0x2dc>
			(*(module->callback[USART_CALLBACK_CTS_INPUT_CHANGE]))(module);
   161be:	69bb      	ldr	r3, [r7, #24]
   161c0:	69db      	ldr	r3, [r3, #28]
   161c2:	69ba      	ldr	r2, [r7, #24]
   161c4:	0010      	movs	r0, r2
   161c6:	4798      	blx	r3
		}
	}
#endif

#ifdef FEATURE_USART_LIN_SLAVE
	if (interrupt_status & SERCOM_USART_INTFLAG_RXBRK) {
   161c8:	2312      	movs	r3, #18
   161ca:	18fb      	adds	r3, r7, r3
   161cc:	881b      	ldrh	r3, [r3, #0]
   161ce:	2220      	movs	r2, #32
   161d0:	4013      	ands	r3, r2
   161d2:	d010      	beq.n	161f6 <_usart_interrupt_handler+0x30a>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXBRK;
   161d4:	697b      	ldr	r3, [r7, #20]
   161d6:	2220      	movs	r2, #32
   161d8:	751a      	strb	r2, [r3, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXBRK;
   161da:	697b      	ldr	r3, [r7, #20]
   161dc:	2220      	movs	r2, #32
   161de:	761a      	strb	r2, [r3, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BREAK_RECEIVED)) {
   161e0:	2310      	movs	r3, #16
   161e2:	18fb      	adds	r3, r7, r3
   161e4:	881b      	ldrh	r3, [r3, #0]
   161e6:	2208      	movs	r2, #8
   161e8:	4013      	ands	r3, r2
   161ea:	d004      	beq.n	161f6 <_usart_interrupt_handler+0x30a>
			(*(module->callback[USART_CALLBACK_BREAK_RECEIVED]))(module);
   161ec:	69bb      	ldr	r3, [r7, #24]
   161ee:	699b      	ldr	r3, [r3, #24]
   161f0:	69ba      	ldr	r2, [r7, #24]
   161f2:	0010      	movs	r0, r2
   161f4:	4798      	blx	r3
		}
	}
#endif

#ifdef FEATURE_USART_START_FRAME_DECTION
	if (interrupt_status & SERCOM_USART_INTFLAG_RXS) {
   161f6:	2312      	movs	r3, #18
   161f8:	18fb      	adds	r3, r7, r3
   161fa:	881b      	ldrh	r3, [r3, #0]
   161fc:	2208      	movs	r2, #8
   161fe:	4013      	ands	r3, r2
   16200:	d010      	beq.n	16224 <_usart_interrupt_handler+0x338>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXS;
   16202:	697b      	ldr	r3, [r7, #20]
   16204:	2208      	movs	r2, #8
   16206:	751a      	strb	r2, [r3, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXS;
   16208:	697b      	ldr	r3, [r7, #20]
   1620a:	2208      	movs	r2, #8
   1620c:	761a      	strb	r2, [r3, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_START_RECEIVED)) {
   1620e:	2310      	movs	r3, #16
   16210:	18fb      	adds	r3, r7, r3
   16212:	881b      	ldrh	r3, [r3, #0]
   16214:	2220      	movs	r2, #32
   16216:	4013      	ands	r3, r2
   16218:	d004      	beq.n	16224 <_usart_interrupt_handler+0x338>
			(*(module->callback[USART_CALLBACK_START_RECEIVED]))(module);
   1621a:	69bb      	ldr	r3, [r7, #24]
   1621c:	6a1b      	ldr	r3, [r3, #32]
   1621e:	69ba      	ldr	r2, [r7, #24]
   16220:	0010      	movs	r0, r2
   16222:	4798      	blx	r3
		}
	}
#endif
}
   16224:	46c0      	nop			; (mov r8, r8)
   16226:	46bd      	mov	sp, r7
   16228:	b008      	add	sp, #32
   1622a:	bd80      	pop	{r7, pc}

0001622c <system_gclk_gen_get_config_defaults>:
{
   1622c:	b580      	push	{r7, lr}
   1622e:	b082      	sub	sp, #8
   16230:	af00      	add	r7, sp, #0
   16232:	6078      	str	r0, [r7, #4]
	config->division_factor    = 1;
   16234:	687b      	ldr	r3, [r7, #4]
   16236:	2201      	movs	r2, #1
   16238:	605a      	str	r2, [r3, #4]
	config->high_when_disabled = false;
   1623a:	687b      	ldr	r3, [r7, #4]
   1623c:	2200      	movs	r2, #0
   1623e:	705a      	strb	r2, [r3, #1]
	config->source_clock       = GCLK_SOURCE_OSC8M;
   16240:	687b      	ldr	r3, [r7, #4]
   16242:	2206      	movs	r2, #6
   16244:	701a      	strb	r2, [r3, #0]
	config->run_in_standby     = false;
   16246:	687b      	ldr	r3, [r7, #4]
   16248:	2200      	movs	r2, #0
   1624a:	721a      	strb	r2, [r3, #8]
	config->output_enable      = false;
   1624c:	687b      	ldr	r3, [r7, #4]
   1624e:	2200      	movs	r2, #0
   16250:	725a      	strb	r2, [r3, #9]
}
   16252:	46c0      	nop			; (mov r8, r8)
   16254:	46bd      	mov	sp, r7
   16256:	b002      	add	sp, #8
   16258:	bd80      	pop	{r7, pc}

0001625a <system_gclk_chan_get_config_defaults>:
{
   1625a:	b580      	push	{r7, lr}
   1625c:	b082      	sub	sp, #8
   1625e:	af00      	add	r7, sp, #0
   16260:	6078      	str	r0, [r7, #4]
	config->source_generator = GCLK_GENERATOR_0;
   16262:	687b      	ldr	r3, [r7, #4]
   16264:	2200      	movs	r2, #0
   16266:	701a      	strb	r2, [r3, #0]
}
   16268:	46c0      	nop			; (mov r8, r8)
   1626a:	46bd      	mov	sp, r7
   1626c:	b002      	add	sp, #8
   1626e:	bd80      	pop	{r7, pc}

00016270 <system_clock_source_osc8m_get_config_defaults>:
{
   16270:	b580      	push	{r7, lr}
   16272:	b082      	sub	sp, #8
   16274:	af00      	add	r7, sp, #0
   16276:	6078      	str	r0, [r7, #4]
	config->prescaler       = SYSTEM_OSC8M_DIV_8;
   16278:	687b      	ldr	r3, [r7, #4]
   1627a:	2203      	movs	r2, #3
   1627c:	701a      	strb	r2, [r3, #0]
	config->run_in_standby  = false;
   1627e:	687b      	ldr	r3, [r7, #4]
   16280:	2200      	movs	r2, #0
   16282:	705a      	strb	r2, [r3, #1]
	config->on_demand       = true;
   16284:	687b      	ldr	r3, [r7, #4]
   16286:	2201      	movs	r2, #1
   16288:	709a      	strb	r2, [r3, #2]
}
   1628a:	46c0      	nop			; (mov r8, r8)
   1628c:	46bd      	mov	sp, r7
   1628e:	b002      	add	sp, #8
   16290:	bd80      	pop	{r7, pc}
	...

00016294 <system_cpu_clock_set_divider>:
{
   16294:	b580      	push	{r7, lr}
   16296:	b082      	sub	sp, #8
   16298:	af00      	add	r7, sp, #0
   1629a:	0002      	movs	r2, r0
   1629c:	1dfb      	adds	r3, r7, #7
   1629e:	701a      	strb	r2, [r3, #0]
	PM->CPUSEL.reg = (uint32_t)divider;
   162a0:	4a03      	ldr	r2, [pc, #12]	; (162b0 <system_cpu_clock_set_divider+0x1c>)
   162a2:	1dfb      	adds	r3, r7, #7
   162a4:	781b      	ldrb	r3, [r3, #0]
   162a6:	7213      	strb	r3, [r2, #8]
}
   162a8:	46c0      	nop			; (mov r8, r8)
   162aa:	46bd      	mov	sp, r7
   162ac:	b002      	add	sp, #8
   162ae:	bd80      	pop	{r7, pc}
   162b0:	40000400 	.word	0x40000400

000162b4 <system_apb_clock_set_divider>:
{
   162b4:	b580      	push	{r7, lr}
   162b6:	b082      	sub	sp, #8
   162b8:	af00      	add	r7, sp, #0
   162ba:	0002      	movs	r2, r0
   162bc:	1dfb      	adds	r3, r7, #7
   162be:	701a      	strb	r2, [r3, #0]
   162c0:	1dbb      	adds	r3, r7, #6
   162c2:	1c0a      	adds	r2, r1, #0
   162c4:	701a      	strb	r2, [r3, #0]
	switch (bus) {
   162c6:	1dfb      	adds	r3, r7, #7
   162c8:	781b      	ldrb	r3, [r3, #0]
   162ca:	2b01      	cmp	r3, #1
   162cc:	d008      	beq.n	162e0 <system_apb_clock_set_divider+0x2c>
   162ce:	2b02      	cmp	r3, #2
   162d0:	d00b      	beq.n	162ea <system_apb_clock_set_divider+0x36>
   162d2:	2b00      	cmp	r3, #0
   162d4:	d10e      	bne.n	162f4 <system_apb_clock_set_divider+0x40>
			PM->APBASEL.reg = (uint32_t)divider;
   162d6:	4a0b      	ldr	r2, [pc, #44]	; (16304 <system_apb_clock_set_divider+0x50>)
   162d8:	1dbb      	adds	r3, r7, #6
   162da:	781b      	ldrb	r3, [r3, #0]
   162dc:	7253      	strb	r3, [r2, #9]
			break;
   162de:	e00b      	b.n	162f8 <system_apb_clock_set_divider+0x44>
			PM->APBBSEL.reg = (uint32_t)divider;
   162e0:	4a08      	ldr	r2, [pc, #32]	; (16304 <system_apb_clock_set_divider+0x50>)
   162e2:	1dbb      	adds	r3, r7, #6
   162e4:	781b      	ldrb	r3, [r3, #0]
   162e6:	7293      	strb	r3, [r2, #10]
			break;
   162e8:	e006      	b.n	162f8 <system_apb_clock_set_divider+0x44>
			PM->APBCSEL.reg = (uint32_t)divider;
   162ea:	4a06      	ldr	r2, [pc, #24]	; (16304 <system_apb_clock_set_divider+0x50>)
   162ec:	1dbb      	adds	r3, r7, #6
   162ee:	781b      	ldrb	r3, [r3, #0]
   162f0:	72d3      	strb	r3, [r2, #11]
			break;
   162f2:	e001      	b.n	162f8 <system_apb_clock_set_divider+0x44>
			return STATUS_ERR_INVALID_ARG;
   162f4:	2317      	movs	r3, #23
   162f6:	e000      	b.n	162fa <system_apb_clock_set_divider+0x46>
	return STATUS_OK;
   162f8:	2300      	movs	r3, #0
}
   162fa:	0018      	movs	r0, r3
   162fc:	46bd      	mov	sp, r7
   162fe:	b002      	add	sp, #8
   16300:	bd80      	pop	{r7, pc}
   16302:	46c0      	nop			; (mov r8, r8)
   16304:	40000400 	.word	0x40000400

00016308 <system_clock_source_dpll_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to fill with default values
 */
static inline void system_clock_source_dpll_get_config_defaults(
		struct system_clock_source_dpll_config *const config)
{
   16308:	b580      	push	{r7, lr}
   1630a:	b082      	sub	sp, #8
   1630c:	af00      	add	r7, sp, #0
   1630e:	6078      	str	r0, [r7, #4]
	config->on_demand           = true;
   16310:	687b      	ldr	r3, [r7, #4]
   16312:	2201      	movs	r2, #1
   16314:	701a      	strb	r2, [r3, #0]
	config->run_in_standby      = false;
   16316:	687b      	ldr	r3, [r7, #4]
   16318:	2200      	movs	r2, #0
   1631a:	705a      	strb	r2, [r3, #1]
	config->lock_bypass         = false;
   1631c:	687b      	ldr	r3, [r7, #4]
   1631e:	2200      	movs	r2, #0
   16320:	709a      	strb	r2, [r3, #2]
	config->wake_up_fast        = false;
   16322:	687b      	ldr	r3, [r7, #4]
   16324:	2200      	movs	r2, #0
   16326:	70da      	strb	r2, [r3, #3]
	config->low_power_enable    = false;
   16328:	687b      	ldr	r3, [r7, #4]
   1632a:	2200      	movs	r2, #0
   1632c:	711a      	strb	r2, [r3, #4]

	config->output_frequency    = 48000000;
   1632e:	687b      	ldr	r3, [r7, #4]
   16330:	4a0a      	ldr	r2, [pc, #40]	; (1635c <system_clock_source_dpll_get_config_defaults+0x54>)
   16332:	609a      	str	r2, [r3, #8]
	config->reference_frequency = 32768;
   16334:	687b      	ldr	r3, [r7, #4]
   16336:	2280      	movs	r2, #128	; 0x80
   16338:	0212      	lsls	r2, r2, #8
   1633a:	60da      	str	r2, [r3, #12]
	config->reference_divider   = 1;
   1633c:	687b      	ldr	r3, [r7, #4]
   1633e:	2201      	movs	r2, #1
   16340:	821a      	strh	r2, [r3, #16]
	config->reference_clock     = SYSTEM_CLOCK_SOURCE_DPLL_REFERENCE_CLOCK_XOSC32K;
   16342:	687b      	ldr	r3, [r7, #4]
   16344:	2200      	movs	r2, #0
   16346:	751a      	strb	r2, [r3, #20]

	config->lock_time           = SYSTEM_CLOCK_SOURCE_DPLL_LOCK_TIME_DEFAULT;
   16348:	687b      	ldr	r3, [r7, #4]
   1634a:	2200      	movs	r2, #0
   1634c:	74da      	strb	r2, [r3, #19]
	config->filter              = SYSTEM_CLOCK_SOURCE_DPLL_FILTER_DEFAULT;
   1634e:	687b      	ldr	r3, [r7, #4]
   16350:	2200      	movs	r2, #0
   16352:	749a      	strb	r2, [r3, #18]
};
   16354:	46c0      	nop			; (mov r8, r8)
   16356:	46bd      	mov	sp, r7
   16358:	b002      	add	sp, #8
   1635a:	bd80      	pop	{r7, pc}
   1635c:	02dc6c00 	.word	0x02dc6c00

00016360 <system_flash_set_waitstates>:
 * can be found in the electrical characteristics of the device.
 *
 * \param[in] wait_states Number of wait states to use for internal flash
 */
static inline void system_flash_set_waitstates(uint8_t wait_states)
{
   16360:	b580      	push	{r7, lr}
   16362:	b082      	sub	sp, #8
   16364:	af00      	add	r7, sp, #0
   16366:	0002      	movs	r2, r0
   16368:	1dfb      	adds	r3, r7, #7
   1636a:	701a      	strb	r2, [r3, #0]
	Assert(NVMCTRL_CTRLB_RWS((uint32_t)wait_states) ==
			((uint32_t)wait_states << NVMCTRL_CTRLB_RWS_Pos));

	NVMCTRL->CTRLB.bit.RWS = wait_states;
   1636c:	4a08      	ldr	r2, [pc, #32]	; (16390 <system_flash_set_waitstates+0x30>)
   1636e:	1dfb      	adds	r3, r7, #7
   16370:	781b      	ldrb	r3, [r3, #0]
   16372:	210f      	movs	r1, #15
   16374:	400b      	ands	r3, r1
   16376:	b2d9      	uxtb	r1, r3
   16378:	6853      	ldr	r3, [r2, #4]
   1637a:	200f      	movs	r0, #15
   1637c:	4001      	ands	r1, r0
   1637e:	0049      	lsls	r1, r1, #1
   16380:	201e      	movs	r0, #30
   16382:	4383      	bics	r3, r0
   16384:	430b      	orrs	r3, r1
   16386:	6053      	str	r3, [r2, #4]
}
   16388:	46c0      	nop			; (mov r8, r8)
   1638a:	46bd      	mov	sp, r7
   1638c:	b002      	add	sp, #8
   1638e:	bd80      	pop	{r7, pc}
   16390:	41004000 	.word	0x41004000

00016394 <_system_dfll_wait_for_sync>:
/**
 * \internal
 * \brief Wait for sync to the DFLL control registers.
 */
static inline void _system_dfll_wait_for_sync(void)
{
   16394:	b580      	push	{r7, lr}
   16396:	af00      	add	r7, sp, #0
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
   16398:	46c0      	nop			; (mov r8, r8)
   1639a:	4b04      	ldr	r3, [pc, #16]	; (163ac <_system_dfll_wait_for_sync+0x18>)
   1639c:	68db      	ldr	r3, [r3, #12]
   1639e:	2210      	movs	r2, #16
   163a0:	4013      	ands	r3, r2
   163a2:	d0fa      	beq.n	1639a <_system_dfll_wait_for_sync+0x6>
		/* Wait for DFLL sync */
	}
}
   163a4:	46c0      	nop			; (mov r8, r8)
   163a6:	46bd      	mov	sp, r7
   163a8:	bd80      	pop	{r7, pc}
   163aa:	46c0      	nop			; (mov r8, r8)
   163ac:	40000800 	.word	0x40000800

000163b0 <_system_clock_source_dfll_set_config_errata_9905>:
		/* Wait for OSC32K sync */
	}
}

static inline void _system_clock_source_dfll_set_config_errata_9905(void)
{
   163b0:	b580      	push	{r7, lr}
   163b2:	af00      	add	r7, sp, #0

	/* Disable ONDEMAND mode while writing configurations */
	SYSCTRL->DFLLCTRL.reg = SYSCTRL_DFLLCTRL_ENABLE;
   163b4:	4b0c      	ldr	r3, [pc, #48]	; (163e8 <_system_clock_source_dfll_set_config_errata_9905+0x38>)
   163b6:	2202      	movs	r2, #2
   163b8:	849a      	strh	r2, [r3, #36]	; 0x24
	_system_dfll_wait_for_sync();
   163ba:	4b0c      	ldr	r3, [pc, #48]	; (163ec <_system_clock_source_dfll_set_config_errata_9905+0x3c>)
   163bc:	4798      	blx	r3

	SYSCTRL->DFLLMUL.reg = _system_clock_inst.dfll.mul;
   163be:	4a0a      	ldr	r2, [pc, #40]	; (163e8 <_system_clock_source_dfll_set_config_errata_9905+0x38>)
   163c0:	4b0b      	ldr	r3, [pc, #44]	; (163f0 <_system_clock_source_dfll_set_config_errata_9905+0x40>)
   163c2:	689b      	ldr	r3, [r3, #8]
   163c4:	62d3      	str	r3, [r2, #44]	; 0x2c
	SYSCTRL->DFLLVAL.reg = _system_clock_inst.dfll.val;
   163c6:	4a08      	ldr	r2, [pc, #32]	; (163e8 <_system_clock_source_dfll_set_config_errata_9905+0x38>)
   163c8:	4b09      	ldr	r3, [pc, #36]	; (163f0 <_system_clock_source_dfll_set_config_errata_9905+0x40>)
   163ca:	685b      	ldr	r3, [r3, #4]
   163cc:	6293      	str	r3, [r2, #40]	; 0x28

	/* Write full configuration to DFLL control register */
	SYSCTRL->DFLLCTRL.reg = 0;
   163ce:	4b06      	ldr	r3, [pc, #24]	; (163e8 <_system_clock_source_dfll_set_config_errata_9905+0x38>)
   163d0:	2200      	movs	r2, #0
   163d2:	849a      	strh	r2, [r3, #36]	; 0x24
	_system_dfll_wait_for_sync();
   163d4:	4b05      	ldr	r3, [pc, #20]	; (163ec <_system_clock_source_dfll_set_config_errata_9905+0x3c>)
   163d6:	4798      	blx	r3
	SYSCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control;
   163d8:	4a03      	ldr	r2, [pc, #12]	; (163e8 <_system_clock_source_dfll_set_config_errata_9905+0x38>)
   163da:	4b05      	ldr	r3, [pc, #20]	; (163f0 <_system_clock_source_dfll_set_config_errata_9905+0x40>)
   163dc:	681b      	ldr	r3, [r3, #0]
   163de:	b29b      	uxth	r3, r3
   163e0:	8493      	strh	r3, [r2, #36]	; 0x24
}
   163e2:	46c0      	nop			; (mov r8, r8)
   163e4:	46bd      	mov	sp, r7
   163e6:	bd80      	pop	{r7, pc}
   163e8:	40000800 	.word	0x40000800
   163ec:	00016395 	.word	0x00016395
   163f0:	20003d58 	.word	0x20003d58

000163f4 <system_clock_source_get_hz>:
 *
 * \returns Frequency of the given clock source, in Hz.
 */
uint32_t system_clock_source_get_hz(
		const enum system_clock_source clock_source)
{
   163f4:	b580      	push	{r7, lr}
   163f6:	b082      	sub	sp, #8
   163f8:	af00      	add	r7, sp, #0
   163fa:	0002      	movs	r2, r0
   163fc:	1dfb      	adds	r3, r7, #7
   163fe:	701a      	strb	r2, [r3, #0]
	switch (clock_source) {
   16400:	1dfb      	adds	r3, r7, #7
   16402:	781b      	ldrb	r3, [r3, #0]
   16404:	2b08      	cmp	r3, #8
   16406:	d841      	bhi.n	1648c <system_clock_source_get_hz+0x98>
   16408:	009a      	lsls	r2, r3, #2
   1640a:	4b23      	ldr	r3, [pc, #140]	; (16498 <system_clock_source_get_hz+0xa4>)
   1640c:	18d3      	adds	r3, r2, r3
   1640e:	681b      	ldr	r3, [r3, #0]
   16410:	469f      	mov	pc, r3
	case SYSTEM_CLOCK_SOURCE_XOSC:
		return _system_clock_inst.xosc.frequency;
   16412:	4b22      	ldr	r3, [pc, #136]	; (1649c <system_clock_source_get_hz+0xa8>)
   16414:	691b      	ldr	r3, [r3, #16]
   16416:	e03a      	b.n	1648e <system_clock_source_get_hz+0x9a>

	case SYSTEM_CLOCK_SOURCE_OSC8M:
		return 8000000UL >> SYSCTRL->OSC8M.bit.PRESC;
   16418:	4b21      	ldr	r3, [pc, #132]	; (164a0 <system_clock_source_get_hz+0xac>)
   1641a:	6a1b      	ldr	r3, [r3, #32]
   1641c:	059b      	lsls	r3, r3, #22
   1641e:	0f9b      	lsrs	r3, r3, #30
   16420:	b2db      	uxtb	r3, r3
   16422:	001a      	movs	r2, r3
   16424:	4b1f      	ldr	r3, [pc, #124]	; (164a4 <system_clock_source_get_hz+0xb0>)
   16426:	40d3      	lsrs	r3, r2
   16428:	e031      	b.n	1648e <system_clock_source_get_hz+0x9a>

	case SYSTEM_CLOCK_SOURCE_OSC32K:
		return 32768UL;
   1642a:	2380      	movs	r3, #128	; 0x80
   1642c:	021b      	lsls	r3, r3, #8
   1642e:	e02e      	b.n	1648e <system_clock_source_get_hz+0x9a>

	case SYSTEM_CLOCK_SOURCE_ULP32K:
		return 32768UL;
   16430:	2380      	movs	r3, #128	; 0x80
   16432:	021b      	lsls	r3, r3, #8
   16434:	e02b      	b.n	1648e <system_clock_source_get_hz+0x9a>

	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		return _system_clock_inst.xosc32k.frequency;
   16436:	4b19      	ldr	r3, [pc, #100]	; (1649c <system_clock_source_get_hz+0xa8>)
   16438:	695b      	ldr	r3, [r3, #20]
   1643a:	e028      	b.n	1648e <system_clock_source_get_hz+0x9a>

	case SYSTEM_CLOCK_SOURCE_DFLL:

		/* Check if the DFLL has been configured */
		if (!(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_ENABLE))
   1643c:	4b17      	ldr	r3, [pc, #92]	; (1649c <system_clock_source_get_hz+0xa8>)
   1643e:	681b      	ldr	r3, [r3, #0]
   16440:	2202      	movs	r2, #2
   16442:	4013      	ands	r3, r2
   16444:	d101      	bne.n	1644a <system_clock_source_get_hz+0x56>
			return 0;
   16446:	2300      	movs	r3, #0
   16448:	e021      	b.n	1648e <system_clock_source_get_hz+0x9a>

		/* Make sure that the DFLL module is ready */
		_system_dfll_wait_for_sync();
   1644a:	4b17      	ldr	r3, [pc, #92]	; (164a8 <system_clock_source_get_hz+0xb4>)
   1644c:	4798      	blx	r3

		/* Check if operating in closed loop (USB) mode */
		switch(_system_clock_inst.dfll.control &
   1644e:	4b13      	ldr	r3, [pc, #76]	; (1649c <system_clock_source_get_hz+0xa8>)
   16450:	681b      	ldr	r3, [r3, #0]
   16452:	2224      	movs	r2, #36	; 0x24
   16454:	4013      	ands	r3, r2
   16456:	2b04      	cmp	r3, #4
   16458:	d109      	bne.n	1646e <system_clock_source_get_hz+0x7a>
				(SYSCTRL_DFLLCTRL_MODE | SYSCTRL_DFLLCTRL_USBCRM)) {
		case SYSCTRL_DFLLCTRL_MODE:
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
   1645a:	2000      	movs	r0, #0
   1645c:	4b13      	ldr	r3, [pc, #76]	; (164ac <system_clock_source_get_hz+0xb8>)
   1645e:	4798      	blx	r3
   16460:	0002      	movs	r2, r0
					(_system_clock_inst.dfll.mul & 0xffff);
   16462:	4b0e      	ldr	r3, [pc, #56]	; (1649c <system_clock_source_get_hz+0xa8>)
   16464:	689b      	ldr	r3, [r3, #8]
   16466:	041b      	lsls	r3, r3, #16
   16468:	0c1b      	lsrs	r3, r3, #16
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
   1646a:	4353      	muls	r3, r2
   1646c:	e00f      	b.n	1648e <system_clock_source_get_hz+0x9a>
		default:
			return 48000000UL;
   1646e:	4b10      	ldr	r3, [pc, #64]	; (164b0 <system_clock_source_get_hz+0xbc>)
   16470:	e00d      	b.n	1648e <system_clock_source_get_hz+0x9a>
		}

#ifdef FEATURE_SYSTEM_CLOCK_DPLL
	case SYSTEM_CLOCK_SOURCE_DPLL:
		if (!(SYSCTRL->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_ENABLE)) {
   16472:	4a0b      	ldr	r2, [pc, #44]	; (164a0 <system_clock_source_get_hz+0xac>)
   16474:	2350      	movs	r3, #80	; 0x50
   16476:	5cd3      	ldrb	r3, [r2, r3]
   16478:	b2db      	uxtb	r3, r3
   1647a:	001a      	movs	r2, r3
   1647c:	2304      	movs	r3, #4
   1647e:	4013      	ands	r3, r2
   16480:	d101      	bne.n	16486 <system_clock_source_get_hz+0x92>
			return 0;
   16482:	2300      	movs	r3, #0
   16484:	e003      	b.n	1648e <system_clock_source_get_hz+0x9a>
		}

		return _system_clock_inst.dpll.frequency;
   16486:	4b05      	ldr	r3, [pc, #20]	; (1649c <system_clock_source_get_hz+0xa8>)
   16488:	68db      	ldr	r3, [r3, #12]
   1648a:	e000      	b.n	1648e <system_clock_source_get_hz+0x9a>
#endif

	default:
		return 0;
   1648c:	2300      	movs	r3, #0
	}
}
   1648e:	0018      	movs	r0, r3
   16490:	46bd      	mov	sp, r7
   16492:	b002      	add	sp, #8
   16494:	bd80      	pop	{r7, pc}
   16496:	46c0      	nop			; (mov r8, r8)
   16498:	00026004 	.word	0x00026004
   1649c:	20003d58 	.word	0x20003d58
   164a0:	40000800 	.word	0x40000800
   164a4:	007a1200 	.word	0x007a1200
   164a8:	00016395 	.word	0x00016395
   164ac:	00016e91 	.word	0x00016e91
   164b0:	02dc6c00 	.word	0x02dc6c00

000164b4 <system_clock_source_osc8m_set_config>:
 *
 * \param[in] config  OSC8M configuration structure containing the new config
 */
void system_clock_source_osc8m_set_config(
		struct system_clock_source_osc8m_config *const config)
{
   164b4:	b580      	push	{r7, lr}
   164b6:	b084      	sub	sp, #16
   164b8:	af00      	add	r7, sp, #0
   164ba:	6078      	str	r0, [r7, #4]
	SYSCTRL_OSC8M_Type temp = SYSCTRL->OSC8M;
   164bc:	4b1a      	ldr	r3, [pc, #104]	; (16528 <system_clock_source_osc8m_set_config+0x74>)
   164be:	6a1b      	ldr	r3, [r3, #32]
   164c0:	60fb      	str	r3, [r7, #12]

	/* Use temporary struct to reduce register access */
	temp.bit.PRESC    = config->prescaler;
   164c2:	687b      	ldr	r3, [r7, #4]
   164c4:	781b      	ldrb	r3, [r3, #0]
   164c6:	1c1a      	adds	r2, r3, #0
   164c8:	2303      	movs	r3, #3
   164ca:	4013      	ands	r3, r2
   164cc:	b2da      	uxtb	r2, r3
   164ce:	230d      	movs	r3, #13
   164d0:	18fb      	adds	r3, r7, r3
   164d2:	2103      	movs	r1, #3
   164d4:	400a      	ands	r2, r1
   164d6:	0010      	movs	r0, r2
   164d8:	781a      	ldrb	r2, [r3, #0]
   164da:	2103      	movs	r1, #3
   164dc:	438a      	bics	r2, r1
   164de:	1c11      	adds	r1, r2, #0
   164e0:	1c02      	adds	r2, r0, #0
   164e2:	430a      	orrs	r2, r1
   164e4:	701a      	strb	r2, [r3, #0]
	temp.bit.ONDEMAND = config->on_demand;
   164e6:	687b      	ldr	r3, [r7, #4]
   164e8:	789a      	ldrb	r2, [r3, #2]
   164ea:	230c      	movs	r3, #12
   164ec:	18fb      	adds	r3, r7, r3
   164ee:	01d0      	lsls	r0, r2, #7
   164f0:	781a      	ldrb	r2, [r3, #0]
   164f2:	217f      	movs	r1, #127	; 0x7f
   164f4:	400a      	ands	r2, r1
   164f6:	1c11      	adds	r1, r2, #0
   164f8:	1c02      	adds	r2, r0, #0
   164fa:	430a      	orrs	r2, r1
   164fc:	701a      	strb	r2, [r3, #0]
	temp.bit.RUNSTDBY = config->run_in_standby;
   164fe:	687b      	ldr	r3, [r7, #4]
   16500:	785a      	ldrb	r2, [r3, #1]
   16502:	230c      	movs	r3, #12
   16504:	18fb      	adds	r3, r7, r3
   16506:	2101      	movs	r1, #1
   16508:	400a      	ands	r2, r1
   1650a:	0190      	lsls	r0, r2, #6
   1650c:	781a      	ldrb	r2, [r3, #0]
   1650e:	2140      	movs	r1, #64	; 0x40
   16510:	438a      	bics	r2, r1
   16512:	1c11      	adds	r1, r2, #0
   16514:	1c02      	adds	r2, r0, #0
   16516:	430a      	orrs	r2, r1
   16518:	701a      	strb	r2, [r3, #0]

	SYSCTRL->OSC8M = temp;
   1651a:	4b03      	ldr	r3, [pc, #12]	; (16528 <system_clock_source_osc8m_set_config+0x74>)
   1651c:	68fa      	ldr	r2, [r7, #12]
   1651e:	621a      	str	r2, [r3, #32]
}
   16520:	46c0      	nop			; (mov r8, r8)
   16522:	46bd      	mov	sp, r7
   16524:	b004      	add	sp, #16
   16526:	bd80      	pop	{r7, pc}
   16528:	40000800 	.word	0x40000800

0001652c <system_clock_source_dpll_set_config>:
 *
 * \param[in] config  DPLL configuration structure containing the new config
 */
void system_clock_source_dpll_set_config(
		struct system_clock_source_dpll_config *const config)
{
   1652c:	b580      	push	{r7, lr}
   1652e:	b086      	sub	sp, #24
   16530:	af00      	add	r7, sp, #0
   16532:	6078      	str	r0, [r7, #4]

	uint32_t tmpldr;
	uint8_t  tmpldrfrac;
	uint32_t refclk;

	refclk = config->reference_frequency;
   16534:	687b      	ldr	r3, [r7, #4]
   16536:	68db      	ldr	r3, [r3, #12]
   16538:	617b      	str	r3, [r7, #20]

	/* Only reference clock REF1 can be divided */
	if (config->reference_clock == SYSTEM_CLOCK_SOURCE_DPLL_REFERENCE_CLOCK_XOSC) {
   1653a:	687b      	ldr	r3, [r7, #4]
   1653c:	7d1b      	ldrb	r3, [r3, #20]
   1653e:	2b01      	cmp	r3, #1
   16540:	d10a      	bne.n	16558 <system_clock_source_dpll_set_config+0x2c>
		refclk = refclk / (2 * (config->reference_divider + 1));
   16542:	687b      	ldr	r3, [r7, #4]
   16544:	8a1b      	ldrh	r3, [r3, #16]
   16546:	3301      	adds	r3, #1
   16548:	005b      	lsls	r3, r3, #1
   1654a:	001a      	movs	r2, r3
   1654c:	4b36      	ldr	r3, [pc, #216]	; (16628 <system_clock_source_dpll_set_config+0xfc>)
   1654e:	0011      	movs	r1, r2
   16550:	6978      	ldr	r0, [r7, #20]
   16552:	4798      	blx	r3
   16554:	0003      	movs	r3, r0
   16556:	617b      	str	r3, [r7, #20]
	}

	/* Calculate LDRFRAC and LDR */
	tmpldr = (config->output_frequency << 4) / refclk;
   16558:	687b      	ldr	r3, [r7, #4]
   1655a:	689b      	ldr	r3, [r3, #8]
   1655c:	011a      	lsls	r2, r3, #4
   1655e:	4b32      	ldr	r3, [pc, #200]	; (16628 <system_clock_source_dpll_set_config+0xfc>)
   16560:	6979      	ldr	r1, [r7, #20]
   16562:	0010      	movs	r0, r2
   16564:	4798      	blx	r3
   16566:	0003      	movs	r3, r0
   16568:	613b      	str	r3, [r7, #16]
	tmpldrfrac = tmpldr & 0x0f;
   1656a:	693b      	ldr	r3, [r7, #16]
   1656c:	b2da      	uxtb	r2, r3
   1656e:	230f      	movs	r3, #15
   16570:	18fb      	adds	r3, r7, r3
   16572:	210f      	movs	r1, #15
   16574:	400a      	ands	r2, r1
   16576:	701a      	strb	r2, [r3, #0]
	tmpldr = (tmpldr >> 4) - 1;
   16578:	693b      	ldr	r3, [r7, #16]
   1657a:	091b      	lsrs	r3, r3, #4
   1657c:	3b01      	subs	r3, #1
   1657e:	613b      	str	r3, [r7, #16]

	SYSCTRL->DPLLCTRLA.reg =
   16580:	492a      	ldr	r1, [pc, #168]	; (1662c <system_clock_source_dpll_set_config+0x100>)
			((uint32_t)config->on_demand << SYSCTRL_DPLLCTRLA_ONDEMAND_Pos) |
   16582:	687b      	ldr	r3, [r7, #4]
   16584:	781b      	ldrb	r3, [r3, #0]
   16586:	01db      	lsls	r3, r3, #7
   16588:	b2da      	uxtb	r2, r3
			((uint32_t)config->run_in_standby << SYSCTRL_DPLLCTRLA_RUNSTDBY_Pos);
   1658a:	687b      	ldr	r3, [r7, #4]
   1658c:	785b      	ldrb	r3, [r3, #1]
   1658e:	019b      	lsls	r3, r3, #6
   16590:	b2db      	uxtb	r3, r3
			((uint32_t)config->on_demand << SYSCTRL_DPLLCTRLA_ONDEMAND_Pos) |
   16592:	4313      	orrs	r3, r2
   16594:	b2da      	uxtb	r2, r3
	SYSCTRL->DPLLCTRLA.reg =
   16596:	2344      	movs	r3, #68	; 0x44
   16598:	54ca      	strb	r2, [r1, r3]

	SYSCTRL->DPLLRATIO.reg =
   1659a:	4b24      	ldr	r3, [pc, #144]	; (1662c <system_clock_source_dpll_set_config+0x100>)
			SYSCTRL_DPLLRATIO_LDRFRAC(tmpldrfrac) |
   1659c:	220f      	movs	r2, #15
   1659e:	18ba      	adds	r2, r7, r2
   165a0:	7812      	ldrb	r2, [r2, #0]
   165a2:	0412      	lsls	r2, r2, #16
   165a4:	0011      	movs	r1, r2
   165a6:	22f0      	movs	r2, #240	; 0xf0
   165a8:	0312      	lsls	r2, r2, #12
   165aa:	4011      	ands	r1, r2
			SYSCTRL_DPLLRATIO_LDR(tmpldr);
   165ac:	693a      	ldr	r2, [r7, #16]
   165ae:	0512      	lsls	r2, r2, #20
   165b0:	0d12      	lsrs	r2, r2, #20
			SYSCTRL_DPLLRATIO_LDRFRAC(tmpldrfrac) |
   165b2:	430a      	orrs	r2, r1
	SYSCTRL->DPLLRATIO.reg =
   165b4:	649a      	str	r2, [r3, #72]	; 0x48

	SYSCTRL->DPLLCTRLB.reg =
   165b6:	4b1d      	ldr	r3, [pc, #116]	; (1662c <system_clock_source_dpll_set_config+0x100>)
			SYSCTRL_DPLLCTRLB_DIV(config->reference_divider) |
   165b8:	687a      	ldr	r2, [r7, #4]
   165ba:	8a12      	ldrh	r2, [r2, #16]
   165bc:	0412      	lsls	r2, r2, #16
   165be:	0011      	movs	r1, r2
   165c0:	4a1b      	ldr	r2, [pc, #108]	; (16630 <system_clock_source_dpll_set_config+0x104>)
   165c2:	4011      	ands	r1, r2
			((uint32_t)config->lock_bypass << SYSCTRL_DPLLCTRLB_LBYPASS_Pos) |
   165c4:	687a      	ldr	r2, [r7, #4]
   165c6:	7892      	ldrb	r2, [r2, #2]
   165c8:	0312      	lsls	r2, r2, #12
			SYSCTRL_DPLLCTRLB_DIV(config->reference_divider) |
   165ca:	4311      	orrs	r1, r2
			SYSCTRL_DPLLCTRLB_LTIME(config->lock_time) |
   165cc:	687a      	ldr	r2, [r7, #4]
   165ce:	7cd2      	ldrb	r2, [r2, #19]
   165d0:	0212      	lsls	r2, r2, #8
   165d2:	0010      	movs	r0, r2
   165d4:	22e0      	movs	r2, #224	; 0xe0
   165d6:	00d2      	lsls	r2, r2, #3
   165d8:	4002      	ands	r2, r0
			((uint32_t)config->lock_bypass << SYSCTRL_DPLLCTRLB_LBYPASS_Pos) |
   165da:	4311      	orrs	r1, r2
			SYSCTRL_DPLLCTRLB_REFCLK(config->reference_clock) |
   165dc:	687a      	ldr	r2, [r7, #4]
   165de:	7d12      	ldrb	r2, [r2, #20]
   165e0:	0112      	lsls	r2, r2, #4
   165e2:	0010      	movs	r0, r2
   165e4:	2230      	movs	r2, #48	; 0x30
   165e6:	4002      	ands	r2, r0
			SYSCTRL_DPLLCTRLB_LTIME(config->lock_time) |
   165e8:	4311      	orrs	r1, r2
			((uint32_t)config->wake_up_fast << SYSCTRL_DPLLCTRLB_WUF_Pos) |
   165ea:	687a      	ldr	r2, [r7, #4]
   165ec:	78d2      	ldrb	r2, [r2, #3]
   165ee:	00d2      	lsls	r2, r2, #3
			SYSCTRL_DPLLCTRLB_REFCLK(config->reference_clock) |
   165f0:	4311      	orrs	r1, r2
			((uint32_t)config->low_power_enable << SYSCTRL_DPLLCTRLB_LPEN_Pos) |
   165f2:	687a      	ldr	r2, [r7, #4]
   165f4:	7912      	ldrb	r2, [r2, #4]
   165f6:	0092      	lsls	r2, r2, #2
			((uint32_t)config->wake_up_fast << SYSCTRL_DPLLCTRLB_WUF_Pos) |
   165f8:	4311      	orrs	r1, r2
			SYSCTRL_DPLLCTRLB_FILTER(config->filter);
   165fa:	687a      	ldr	r2, [r7, #4]
   165fc:	7c92      	ldrb	r2, [r2, #18]
   165fe:	0010      	movs	r0, r2
   16600:	2203      	movs	r2, #3
   16602:	4002      	ands	r2, r0
			((uint32_t)config->low_power_enable << SYSCTRL_DPLLCTRLB_LPEN_Pos) |
   16604:	430a      	orrs	r2, r1
	SYSCTRL->DPLLCTRLB.reg =
   16606:	64da      	str	r2, [r3, #76]	; 0x4c

	/*
	 * Fck = Fckrx * (LDR + 1 + LDRFRAC / 16)
	 */
	_system_clock_inst.dpll.frequency =
			(refclk * (((tmpldr + 1) << 4) + tmpldrfrac)) >> 4;
   16608:	693b      	ldr	r3, [r7, #16]
   1660a:	3301      	adds	r3, #1
   1660c:	011a      	lsls	r2, r3, #4
   1660e:	230f      	movs	r3, #15
   16610:	18fb      	adds	r3, r7, r3
   16612:	781b      	ldrb	r3, [r3, #0]
   16614:	18d3      	adds	r3, r2, r3
   16616:	697a      	ldr	r2, [r7, #20]
   16618:	4353      	muls	r3, r2
   1661a:	091a      	lsrs	r2, r3, #4
	_system_clock_inst.dpll.frequency =
   1661c:	4b05      	ldr	r3, [pc, #20]	; (16634 <system_clock_source_dpll_set_config+0x108>)
   1661e:	60da      	str	r2, [r3, #12]
}
   16620:	46c0      	nop			; (mov r8, r8)
   16622:	46bd      	mov	sp, r7
   16624:	b006      	add	sp, #24
   16626:	bd80      	pop	{r7, pc}
   16628:	0001f841 	.word	0x0001f841
   1662c:	40000800 	.word	0x40000800
   16630:	07ff0000 	.word	0x07ff0000
   16634:	20003d58 	.word	0x20003d58

00016638 <system_clock_source_enable>:
 * \retval STATUS_ERR_INVALID_ARG  The clock source is not available on this
 *                                 device
 */
enum status_code system_clock_source_enable(
		const enum system_clock_source clock_source)
{
   16638:	b580      	push	{r7, lr}
   1663a:	b082      	sub	sp, #8
   1663c:	af00      	add	r7, sp, #0
   1663e:	0002      	movs	r2, r0
   16640:	1dfb      	adds	r3, r7, #7
   16642:	701a      	strb	r2, [r3, #0]
	switch (clock_source) {
   16644:	1dfb      	adds	r3, r7, #7
   16646:	781b      	ldrb	r3, [r3, #0]
   16648:	2b08      	cmp	r3, #8
   1664a:	d83b      	bhi.n	166c4 <system_clock_source_enable+0x8c>
   1664c:	009a      	lsls	r2, r3, #2
   1664e:	4b21      	ldr	r3, [pc, #132]	; (166d4 <system_clock_source_enable+0x9c>)
   16650:	18d3      	adds	r3, r2, r3
   16652:	681b      	ldr	r3, [r3, #0]
   16654:	469f      	mov	pc, r3
	case SYSTEM_CLOCK_SOURCE_OSC8M:
		SYSCTRL->OSC8M.reg |= SYSCTRL_OSC8M_ENABLE;
   16656:	4b20      	ldr	r3, [pc, #128]	; (166d8 <system_clock_source_enable+0xa0>)
   16658:	4a1f      	ldr	r2, [pc, #124]	; (166d8 <system_clock_source_enable+0xa0>)
   1665a:	6a12      	ldr	r2, [r2, #32]
   1665c:	2102      	movs	r1, #2
   1665e:	430a      	orrs	r2, r1
   16660:	621a      	str	r2, [r3, #32]
		return STATUS_OK;
   16662:	2300      	movs	r3, #0
   16664:	e031      	b.n	166ca <system_clock_source_enable+0x92>

	case SYSTEM_CLOCK_SOURCE_OSC32K:
		SYSCTRL->OSC32K.reg |= SYSCTRL_OSC32K_ENABLE;
   16666:	4b1c      	ldr	r3, [pc, #112]	; (166d8 <system_clock_source_enable+0xa0>)
   16668:	4a1b      	ldr	r2, [pc, #108]	; (166d8 <system_clock_source_enable+0xa0>)
   1666a:	6992      	ldr	r2, [r2, #24]
   1666c:	2102      	movs	r1, #2
   1666e:	430a      	orrs	r2, r1
   16670:	619a      	str	r2, [r3, #24]
		break;
   16672:	e029      	b.n	166c8 <system_clock_source_enable+0x90>

	case SYSTEM_CLOCK_SOURCE_XOSC:
		SYSCTRL->XOSC.reg |= SYSCTRL_XOSC_ENABLE;
   16674:	4a18      	ldr	r2, [pc, #96]	; (166d8 <system_clock_source_enable+0xa0>)
   16676:	4b18      	ldr	r3, [pc, #96]	; (166d8 <system_clock_source_enable+0xa0>)
   16678:	8a1b      	ldrh	r3, [r3, #16]
   1667a:	b29b      	uxth	r3, r3
   1667c:	2102      	movs	r1, #2
   1667e:	430b      	orrs	r3, r1
   16680:	b29b      	uxth	r3, r3
   16682:	8213      	strh	r3, [r2, #16]
		break;
   16684:	e020      	b.n	166c8 <system_clock_source_enable+0x90>

	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		SYSCTRL->XOSC32K.reg |= SYSCTRL_XOSC32K_ENABLE;
   16686:	4a14      	ldr	r2, [pc, #80]	; (166d8 <system_clock_source_enable+0xa0>)
   16688:	4b13      	ldr	r3, [pc, #76]	; (166d8 <system_clock_source_enable+0xa0>)
   1668a:	8a9b      	ldrh	r3, [r3, #20]
   1668c:	b29b      	uxth	r3, r3
   1668e:	2102      	movs	r1, #2
   16690:	430b      	orrs	r3, r1
   16692:	b29b      	uxth	r3, r3
   16694:	8293      	strh	r3, [r2, #20]
		break;
   16696:	e017      	b.n	166c8 <system_clock_source_enable+0x90>

	case SYSTEM_CLOCK_SOURCE_DFLL:
		_system_clock_inst.dfll.control |= SYSCTRL_DFLLCTRL_ENABLE;
   16698:	4b10      	ldr	r3, [pc, #64]	; (166dc <system_clock_source_enable+0xa4>)
   1669a:	681b      	ldr	r3, [r3, #0]
   1669c:	2202      	movs	r2, #2
   1669e:	431a      	orrs	r2, r3
   166a0:	4b0e      	ldr	r3, [pc, #56]	; (166dc <system_clock_source_enable+0xa4>)
   166a2:	601a      	str	r2, [r3, #0]
		_system_clock_source_dfll_set_config_errata_9905();
   166a4:	4b0e      	ldr	r3, [pc, #56]	; (166e0 <system_clock_source_enable+0xa8>)
   166a6:	4798      	blx	r3
		break;
   166a8:	e00e      	b.n	166c8 <system_clock_source_enable+0x90>

#ifdef FEATURE_SYSTEM_CLOCK_DPLL
	case SYSTEM_CLOCK_SOURCE_DPLL:
		SYSCTRL->DPLLCTRLA.reg |= SYSCTRL_DPLLCTRLA_ENABLE;
   166aa:	4a0b      	ldr	r2, [pc, #44]	; (166d8 <system_clock_source_enable+0xa0>)
   166ac:	490a      	ldr	r1, [pc, #40]	; (166d8 <system_clock_source_enable+0xa0>)
   166ae:	2344      	movs	r3, #68	; 0x44
   166b0:	5ccb      	ldrb	r3, [r1, r3]
   166b2:	b2db      	uxtb	r3, r3
   166b4:	2102      	movs	r1, #2
   166b6:	430b      	orrs	r3, r1
   166b8:	b2d9      	uxtb	r1, r3
   166ba:	2344      	movs	r3, #68	; 0x44
   166bc:	54d1      	strb	r1, [r2, r3]
		break;
   166be:	e003      	b.n	166c8 <system_clock_source_enable+0x90>
#endif

	case SYSTEM_CLOCK_SOURCE_ULP32K:
		/* Always enabled */
		return STATUS_OK;
   166c0:	2300      	movs	r3, #0
   166c2:	e002      	b.n	166ca <system_clock_source_enable+0x92>

	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
   166c4:	2317      	movs	r3, #23
   166c6:	e000      	b.n	166ca <system_clock_source_enable+0x92>
	}

	return STATUS_OK;
   166c8:	2300      	movs	r3, #0
}
   166ca:	0018      	movs	r0, r3
   166cc:	46bd      	mov	sp, r7
   166ce:	b002      	add	sp, #8
   166d0:	bd80      	pop	{r7, pc}
   166d2:	46c0      	nop			; (mov r8, r8)
   166d4:	00026028 	.word	0x00026028
   166d8:	40000800 	.word	0x40000800
   166dc:	20003d58 	.word	0x20003d58
   166e0:	000163b1 	.word	0x000163b1

000166e4 <system_clock_source_is_ready>:
 * \retval true   Clock source is enabled and ready
 * \retval false  Clock source is disabled or not yet ready
 */
bool system_clock_source_is_ready(
		const enum system_clock_source clock_source)
{
   166e4:	b580      	push	{r7, lr}
   166e6:	b084      	sub	sp, #16
   166e8:	af00      	add	r7, sp, #0
   166ea:	0002      	movs	r2, r0
   166ec:	1dfb      	adds	r3, r7, #7
   166ee:	701a      	strb	r2, [r3, #0]
	uint32_t mask = 0;
   166f0:	2300      	movs	r3, #0
   166f2:	60fb      	str	r3, [r7, #12]

	switch (clock_source) {
   166f4:	1dfb      	adds	r3, r7, #7
   166f6:	781b      	ldrb	r3, [r3, #0]
   166f8:	2b08      	cmp	r3, #8
   166fa:	d821      	bhi.n	16740 <system_clock_source_is_ready+0x5c>
   166fc:	009a      	lsls	r2, r3, #2
   166fe:	4b18      	ldr	r3, [pc, #96]	; (16760 <system_clock_source_is_ready+0x7c>)
   16700:	18d3      	adds	r3, r2, r3
   16702:	681b      	ldr	r3, [r3, #0]
   16704:	469f      	mov	pc, r3
	case SYSTEM_CLOCK_SOURCE_OSC8M:
		mask = SYSCTRL_PCLKSR_OSC8MRDY;
   16706:	2308      	movs	r3, #8
   16708:	60fb      	str	r3, [r7, #12]
		break;
   1670a:	e01b      	b.n	16744 <system_clock_source_is_ready+0x60>

	case SYSTEM_CLOCK_SOURCE_OSC32K:
		mask = SYSCTRL_PCLKSR_OSC32KRDY;
   1670c:	2304      	movs	r3, #4
   1670e:	60fb      	str	r3, [r7, #12]
		break;
   16710:	e018      	b.n	16744 <system_clock_source_is_ready+0x60>

	case SYSTEM_CLOCK_SOURCE_XOSC:
		mask = SYSCTRL_PCLKSR_XOSCRDY;
   16712:	2301      	movs	r3, #1
   16714:	60fb      	str	r3, [r7, #12]
		break;
   16716:	e015      	b.n	16744 <system_clock_source_is_ready+0x60>

	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		mask = SYSCTRL_PCLKSR_XOSC32KRDY;
   16718:	2302      	movs	r3, #2
   1671a:	60fb      	str	r3, [r7, #12]
		break;
   1671c:	e012      	b.n	16744 <system_clock_source_is_ready+0x60>
	case SYSTEM_CLOCK_SOURCE_DFLL:
		if (CONF_CLOCK_DFLL_LOOP_MODE == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
			mask = (SYSCTRL_PCLKSR_DFLLRDY |
			        SYSCTRL_PCLKSR_DFLLLCKF | SYSCTRL_PCLKSR_DFLLLCKC);
		} else {
			mask = SYSCTRL_PCLKSR_DFLLRDY;
   1671e:	2310      	movs	r3, #16
   16720:	60fb      	str	r3, [r7, #12]
		}
		break;
   16722:	e00f      	b.n	16744 <system_clock_source_is_ready+0x60>

#ifdef FEATURE_SYSTEM_CLOCK_DPLL
	case SYSTEM_CLOCK_SOURCE_DPLL:
		return ((SYSCTRL->DPLLSTATUS.reg &
   16724:	4a0f      	ldr	r2, [pc, #60]	; (16764 <system_clock_source_is_ready+0x80>)
   16726:	2350      	movs	r3, #80	; 0x50
   16728:	5cd3      	ldrb	r3, [r2, r3]
   1672a:	b2db      	uxtb	r3, r3
   1672c:	001a      	movs	r2, r3
   1672e:	2303      	movs	r3, #3
   16730:	4013      	ands	r3, r2
				(SYSCTRL_DPLLSTATUS_CLKRDY | SYSCTRL_DPLLSTATUS_LOCK)) ==
   16732:	3b03      	subs	r3, #3
   16734:	425a      	negs	r2, r3
   16736:	4153      	adcs	r3, r2
   16738:	b2db      	uxtb	r3, r3
   1673a:	e00c      	b.n	16756 <system_clock_source_is_ready+0x72>
				(SYSCTRL_DPLLSTATUS_CLKRDY | SYSCTRL_DPLLSTATUS_LOCK));
#endif

	case SYSTEM_CLOCK_SOURCE_ULP32K:
		/* Not possible to disable */
		return true;
   1673c:	2301      	movs	r3, #1
   1673e:	e00a      	b.n	16756 <system_clock_source_is_ready+0x72>

	default:
		return false;
   16740:	2300      	movs	r3, #0
   16742:	e008      	b.n	16756 <system_clock_source_is_ready+0x72>
	}

	return ((SYSCTRL->PCLKSR.reg & mask) == mask);
   16744:	4b07      	ldr	r3, [pc, #28]	; (16764 <system_clock_source_is_ready+0x80>)
   16746:	68db      	ldr	r3, [r3, #12]
   16748:	68fa      	ldr	r2, [r7, #12]
   1674a:	401a      	ands	r2, r3
   1674c:	68fb      	ldr	r3, [r7, #12]
   1674e:	1ad3      	subs	r3, r2, r3
   16750:	425a      	negs	r2, r3
   16752:	4153      	adcs	r3, r2
   16754:	b2db      	uxtb	r3, r3
}
   16756:	0018      	movs	r0, r3
   16758:	46bd      	mov	sp, r7
   1675a:	b004      	add	sp, #16
   1675c:	bd80      	pop	{r7, pc}
   1675e:	46c0      	nop			; (mov r8, r8)
   16760:	0002604c 	.word	0x0002604c
   16764:	40000800 	.word	0x40000800

00016768 <_switch_peripheral_gclk>:
 *
 * Switch all peripheral clock to a not enabled general clock
 * to save power.
 */
static void _switch_peripheral_gclk(void)
{
   16768:	b580      	push	{r7, lr}
   1676a:	b082      	sub	sp, #8
   1676c:	af00      	add	r7, sp, #0
#if CONF_CLOCK_GCLK_1_ENABLE == false
	gclk_conf.source_generator = GCLK_GENERATOR_1;
#elif CONF_CLOCK_GCLK_2_ENABLE == false
	gclk_conf.source_generator = GCLK_GENERATOR_2;
#elif CONF_CLOCK_GCLK_3_ENABLE == false
	gclk_conf.source_generator = GCLK_GENERATOR_3;
   1676e:	003b      	movs	r3, r7
   16770:	2203      	movs	r2, #3
   16772:	701a      	strb	r2, [r3, #0]
	gclk_conf.source_generator = GCLK_GENERATOR_7;
#else
	gclk_conf.source_generator = GCLK_GENERATOR_7;
#endif

	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
   16774:	2300      	movs	r3, #0
   16776:	607b      	str	r3, [r7, #4]
   16778:	e009      	b.n	1678e <_switch_peripheral_gclk+0x26>
		system_gclk_chan_set_config(gclk_id, &gclk_conf);
   1677a:	687b      	ldr	r3, [r7, #4]
   1677c:	b2db      	uxtb	r3, r3
   1677e:	003a      	movs	r2, r7
   16780:	0011      	movs	r1, r2
   16782:	0018      	movs	r0, r3
   16784:	4b05      	ldr	r3, [pc, #20]	; (1679c <_switch_peripheral_gclk+0x34>)
   16786:	4798      	blx	r3
	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
   16788:	687b      	ldr	r3, [r7, #4]
   1678a:	3301      	adds	r3, #1
   1678c:	607b      	str	r3, [r7, #4]
   1678e:	687b      	ldr	r3, [r7, #4]
   16790:	2b24      	cmp	r3, #36	; 0x24
   16792:	d9f2      	bls.n	1677a <_switch_peripheral_gclk+0x12>
	}
}
   16794:	46c0      	nop			; (mov r8, r8)
   16796:	46bd      	mov	sp, r7
   16798:	b002      	add	sp, #8
   1679a:	bd80      	pop	{r7, pc}
   1679c:	00016d6d 	.word	0x00016d6d

000167a0 <system_clock_init>:
 * \note OSC8M is always enabled and if user selects other clocks for GCLK generators,
 * the OSC8M default enable can be disabled after system_clock_init. Make sure the
 * clock switch successfully before disabling OSC8M.
 */
void system_clock_init(void)
{
   167a0:	b580      	push	{r7, lr}
   167a2:	b0a6      	sub	sp, #152	; 0x98
   167a4:	af00      	add	r7, sp, #0
	/* Various bits in the INTFLAG register can be set to one at startup.
	   This will ensure that these bits are cleared */
	SYSCTRL->INTFLAG.reg = SYSCTRL_INTFLAG_BOD33RDY | SYSCTRL_INTFLAG_BOD33DET |
   167a6:	4b92      	ldr	r3, [pc, #584]	; (169f0 <system_clock_init+0x250>)
   167a8:	22c2      	movs	r2, #194	; 0xc2
   167aa:	00d2      	lsls	r2, r2, #3
   167ac:	609a      	str	r2, [r3, #8]
			SYSCTRL_INTFLAG_DFLLRDY;

	system_flash_set_waitstates(CONF_CLOCK_FLASH_WAIT_STATES);
   167ae:	2003      	movs	r0, #3
   167b0:	4b90      	ldr	r3, [pc, #576]	; (169f4 <system_clock_init+0x254>)
   167b2:	4798      	blx	r3

	/* Switch all peripheral clock to a not enabled general clock to save power. */
	_switch_peripheral_gclk();
   167b4:	4b90      	ldr	r3, [pc, #576]	; (169f8 <system_clock_init+0x258>)
   167b6:	4798      	blx	r3
#endif


	/* OSC8M */
	struct system_clock_source_osc8m_config osc8m_conf;
	system_clock_source_osc8m_get_config_defaults(&osc8m_conf);
   167b8:	2394      	movs	r3, #148	; 0x94
   167ba:	18fb      	adds	r3, r7, r3
   167bc:	0018      	movs	r0, r3
   167be:	4b8f      	ldr	r3, [pc, #572]	; (169fc <system_clock_init+0x25c>)
   167c0:	4798      	blx	r3

	osc8m_conf.prescaler       = CONF_CLOCK_OSC8M_PRESCALER;
   167c2:	2394      	movs	r3, #148	; 0x94
   167c4:	18fb      	adds	r3, r7, r3
   167c6:	2200      	movs	r2, #0
   167c8:	701a      	strb	r2, [r3, #0]
	osc8m_conf.on_demand       = CONF_CLOCK_OSC8M_ON_DEMAND;
   167ca:	2394      	movs	r3, #148	; 0x94
   167cc:	18fb      	adds	r3, r7, r3
   167ce:	2201      	movs	r2, #1
   167d0:	709a      	strb	r2, [r3, #2]
	osc8m_conf.run_in_standby  = CONF_CLOCK_OSC8M_RUN_IN_STANDBY;
   167d2:	2394      	movs	r3, #148	; 0x94
   167d4:	18fb      	adds	r3, r7, r3
   167d6:	2200      	movs	r2, #0
   167d8:	705a      	strb	r2, [r3, #1]

	system_clock_source_osc8m_set_config(&osc8m_conf);
   167da:	2394      	movs	r3, #148	; 0x94
   167dc:	18fb      	adds	r3, r7, r3
   167de:	0018      	movs	r0, r3
   167e0:	4b87      	ldr	r3, [pc, #540]	; (16a00 <system_clock_init+0x260>)
   167e2:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_OSC8M);
   167e4:	2006      	movs	r0, #6
   167e6:	4b87      	ldr	r3, [pc, #540]	; (16a04 <system_clock_init+0x264>)
   167e8:	4798      	blx	r3


	/* GCLK */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	system_gclk_init();
   167ea:	4b87      	ldr	r3, [pc, #540]	; (16a08 <system_clock_init+0x268>)
   167ec:	4798      	blx	r3

	/* Configure all GCLK generators except for the main generator, which
	 * is configured later after all other clock systems are set up */
	MREPEAT(GCLK_GEN_NUM, _CONF_CLOCK_GCLK_CONFIG_NONMAIN, ~);
   167ee:	2360      	movs	r3, #96	; 0x60
   167f0:	18fb      	adds	r3, r7, r3
   167f2:	0018      	movs	r0, r3
   167f4:	4b85      	ldr	r3, [pc, #532]	; (16a0c <system_clock_init+0x26c>)
   167f6:	4798      	blx	r3
   167f8:	2360      	movs	r3, #96	; 0x60
   167fa:	18fb      	adds	r3, r7, r3
   167fc:	2206      	movs	r2, #6
   167fe:	701a      	strb	r2, [r3, #0]
   16800:	2360      	movs	r3, #96	; 0x60
   16802:	18fb      	adds	r3, r7, r3
   16804:	2208      	movs	r2, #8
   16806:	605a      	str	r2, [r3, #4]
   16808:	2360      	movs	r3, #96	; 0x60
   1680a:	18fb      	adds	r3, r7, r3
   1680c:	2200      	movs	r2, #0
   1680e:	721a      	strb	r2, [r3, #8]
   16810:	2360      	movs	r3, #96	; 0x60
   16812:	18fb      	adds	r3, r7, r3
   16814:	2200      	movs	r2, #0
   16816:	725a      	strb	r2, [r3, #9]
   16818:	2360      	movs	r3, #96	; 0x60
   1681a:	18fb      	adds	r3, r7, r3
   1681c:	0019      	movs	r1, r3
   1681e:	2001      	movs	r0, #1
   16820:	4b7b      	ldr	r3, [pc, #492]	; (16a10 <system_clock_init+0x270>)
   16822:	4798      	blx	r3
   16824:	2001      	movs	r0, #1
   16826:	4b7b      	ldr	r3, [pc, #492]	; (16a14 <system_clock_init+0x274>)
   16828:	4798      	blx	r3
   1682a:	2354      	movs	r3, #84	; 0x54
   1682c:	18fb      	adds	r3, r7, r3
   1682e:	0018      	movs	r0, r3
   16830:	4b76      	ldr	r3, [pc, #472]	; (16a0c <system_clock_init+0x26c>)
   16832:	4798      	blx	r3
   16834:	2354      	movs	r3, #84	; 0x54
   16836:	18fb      	adds	r3, r7, r3
   16838:	2203      	movs	r2, #3
   1683a:	701a      	strb	r2, [r3, #0]
   1683c:	2354      	movs	r3, #84	; 0x54
   1683e:	18fb      	adds	r3, r7, r3
   16840:	2201      	movs	r2, #1
   16842:	605a      	str	r2, [r3, #4]
   16844:	2354      	movs	r3, #84	; 0x54
   16846:	18fb      	adds	r3, r7, r3
   16848:	2201      	movs	r2, #1
   1684a:	721a      	strb	r2, [r3, #8]
   1684c:	2354      	movs	r3, #84	; 0x54
   1684e:	18fb      	adds	r3, r7, r3
   16850:	2200      	movs	r2, #0
   16852:	725a      	strb	r2, [r3, #9]
   16854:	2354      	movs	r3, #84	; 0x54
   16856:	18fb      	adds	r3, r7, r3
   16858:	0019      	movs	r1, r3
   1685a:	2002      	movs	r0, #2
   1685c:	4b6c      	ldr	r3, [pc, #432]	; (16a10 <system_clock_init+0x270>)
   1685e:	4798      	blx	r3
   16860:	2002      	movs	r0, #2
   16862:	4b6c      	ldr	r3, [pc, #432]	; (16a14 <system_clock_init+0x274>)
   16864:	4798      	blx	r3
   16866:	233c      	movs	r3, #60	; 0x3c
   16868:	18fb      	adds	r3, r7, r3
   1686a:	0018      	movs	r0, r3
   1686c:	4b67      	ldr	r3, [pc, #412]	; (16a0c <system_clock_init+0x26c>)
   1686e:	4798      	blx	r3
   16870:	233c      	movs	r3, #60	; 0x3c
   16872:	18fb      	adds	r3, r7, r3
   16874:	2203      	movs	r2, #3
   16876:	701a      	strb	r2, [r3, #0]
   16878:	233c      	movs	r3, #60	; 0x3c
   1687a:	18fb      	adds	r3, r7, r3
   1687c:	2220      	movs	r2, #32
   1687e:	605a      	str	r2, [r3, #4]
   16880:	233c      	movs	r3, #60	; 0x3c
   16882:	18fb      	adds	r3, r7, r3
   16884:	2200      	movs	r2, #0
   16886:	721a      	strb	r2, [r3, #8]
   16888:	233c      	movs	r3, #60	; 0x3c
   1688a:	18fb      	adds	r3, r7, r3
   1688c:	2200      	movs	r2, #0
   1688e:	725a      	strb	r2, [r3, #9]
   16890:	233c      	movs	r3, #60	; 0x3c
   16892:	18fb      	adds	r3, r7, r3
   16894:	0019      	movs	r1, r3
   16896:	2004      	movs	r0, #4
   16898:	4b5d      	ldr	r3, [pc, #372]	; (16a10 <system_clock_init+0x270>)
   1689a:	4798      	blx	r3
   1689c:	2004      	movs	r0, #4
   1689e:	4b5d      	ldr	r3, [pc, #372]	; (16a14 <system_clock_init+0x274>)
   168a0:	4798      	blx	r3
   168a2:	2330      	movs	r3, #48	; 0x30
   168a4:	18fb      	adds	r3, r7, r3
   168a6:	0018      	movs	r0, r3
   168a8:	4b58      	ldr	r3, [pc, #352]	; (16a0c <system_clock_init+0x26c>)
   168aa:	4798      	blx	r3
   168ac:	2330      	movs	r3, #48	; 0x30
   168ae:	18fb      	adds	r3, r7, r3
   168b0:	2206      	movs	r2, #6
   168b2:	701a      	strb	r2, [r3, #0]
   168b4:	2330      	movs	r3, #48	; 0x30
   168b6:	18fb      	adds	r3, r7, r3
   168b8:	2201      	movs	r2, #1
   168ba:	605a      	str	r2, [r3, #4]
   168bc:	2330      	movs	r3, #48	; 0x30
   168be:	18fb      	adds	r3, r7, r3
   168c0:	2200      	movs	r2, #0
   168c2:	721a      	strb	r2, [r3, #8]
   168c4:	2330      	movs	r3, #48	; 0x30
   168c6:	18fb      	adds	r3, r7, r3
   168c8:	2200      	movs	r2, #0
   168ca:	725a      	strb	r2, [r3, #9]
   168cc:	2330      	movs	r3, #48	; 0x30
   168ce:	18fb      	adds	r3, r7, r3
   168d0:	0019      	movs	r1, r3
   168d2:	2005      	movs	r0, #5
   168d4:	4b4e      	ldr	r3, [pc, #312]	; (16a10 <system_clock_init+0x270>)
   168d6:	4798      	blx	r3
   168d8:	2005      	movs	r0, #5
   168da:	4b4e      	ldr	r3, [pc, #312]	; (16a14 <system_clock_init+0x274>)
   168dc:	4798      	blx	r3
#  endif

#  if CONF_CLOCK_DPLL_ENABLE == true
	/* Enable DPLL internal lock timer and reference clock */
	struct system_gclk_chan_config dpll_gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&dpll_gclk_chan_conf);
   168de:	2390      	movs	r3, #144	; 0x90
   168e0:	18fb      	adds	r3, r7, r3
   168e2:	0018      	movs	r0, r3
   168e4:	4b4c      	ldr	r3, [pc, #304]	; (16a18 <system_clock_init+0x278>)
   168e6:	4798      	blx	r3
		system_gclk_chan_set_config(SYSCTRL_GCLK_ID_FDPLL32K, &dpll_gclk_chan_conf);
		system_gclk_chan_enable(SYSCTRL_GCLK_ID_FDPLL32K);
	}

	if (CONF_CLOCK_DPLL_REFERENCE_CLOCK == SYSTEM_CLOCK_SOURCE_DPLL_REFERENCE_CLOCK_GCLK) {
		dpll_gclk_chan_conf.source_generator = CONF_CLOCK_DPLL_REFERENCE_GCLK_GENERATOR;
   168e8:	2390      	movs	r3, #144	; 0x90
   168ea:	18fb      	adds	r3, r7, r3
   168ec:	2201      	movs	r2, #1
   168ee:	701a      	strb	r2, [r3, #0]
		system_gclk_chan_set_config(SYSCTRL_GCLK_ID_FDPLL, &dpll_gclk_chan_conf);
   168f0:	2390      	movs	r3, #144	; 0x90
   168f2:	18fb      	adds	r3, r7, r3
   168f4:	0019      	movs	r1, r3
   168f6:	2001      	movs	r0, #1
   168f8:	4b48      	ldr	r3, [pc, #288]	; (16a1c <system_clock_init+0x27c>)
   168fa:	4798      	blx	r3
		system_gclk_chan_enable(SYSCTRL_GCLK_ID_FDPLL);
   168fc:	2001      	movs	r0, #1
   168fe:	4b48      	ldr	r3, [pc, #288]	; (16a20 <system_clock_init+0x280>)
   16900:	4798      	blx	r3
	else {
		Assert(false);
	}

	struct system_clock_source_dpll_config dpll_config;
	system_clock_source_dpll_get_config_defaults(&dpll_config);
   16902:	2378      	movs	r3, #120	; 0x78
   16904:	18fb      	adds	r3, r7, r3
   16906:	0018      	movs	r0, r3
   16908:	4b46      	ldr	r3, [pc, #280]	; (16a24 <system_clock_init+0x284>)
   1690a:	4798      	blx	r3

	dpll_config.on_demand        = false;
   1690c:	2378      	movs	r3, #120	; 0x78
   1690e:	18fb      	adds	r3, r7, r3
   16910:	2200      	movs	r2, #0
   16912:	701a      	strb	r2, [r3, #0]
	dpll_config.run_in_standby   = CONF_CLOCK_DPLL_RUN_IN_STANDBY;
   16914:	2378      	movs	r3, #120	; 0x78
   16916:	18fb      	adds	r3, r7, r3
   16918:	2200      	movs	r2, #0
   1691a:	705a      	strb	r2, [r3, #1]
	dpll_config.lock_bypass      = CONF_CLOCK_DPLL_LOCK_BYPASS;
   1691c:	2378      	movs	r3, #120	; 0x78
   1691e:	18fb      	adds	r3, r7, r3
   16920:	2200      	movs	r2, #0
   16922:	709a      	strb	r2, [r3, #2]
	dpll_config.wake_up_fast     = CONF_CLOCK_DPLL_WAKE_UP_FAST;
   16924:	2378      	movs	r3, #120	; 0x78
   16926:	18fb      	adds	r3, r7, r3
   16928:	2200      	movs	r2, #0
   1692a:	70da      	strb	r2, [r3, #3]
	dpll_config.low_power_enable = CONF_CLOCK_DPLL_LOW_POWER_ENABLE;
   1692c:	2378      	movs	r3, #120	; 0x78
   1692e:	18fb      	adds	r3, r7, r3
   16930:	2200      	movs	r2, #0
   16932:	711a      	strb	r2, [r3, #4]

	dpll_config.filter           = CONF_CLOCK_DPLL_FILTER;
   16934:	2378      	movs	r3, #120	; 0x78
   16936:	18fb      	adds	r3, r7, r3
   16938:	2200      	movs	r2, #0
   1693a:	749a      	strb	r2, [r3, #18]
	dpll_config.lock_time        = CONF_CLOCK_DPLL_LOCK_TIME;
   1693c:	2378      	movs	r3, #120	; 0x78
   1693e:	18fb      	adds	r3, r7, r3
   16940:	2200      	movs	r2, #0
   16942:	74da      	strb	r2, [r3, #19]

	dpll_config.reference_clock     = CONF_CLOCK_DPLL_REFERENCE_CLOCK;
   16944:	2378      	movs	r3, #120	; 0x78
   16946:	18fb      	adds	r3, r7, r3
   16948:	2202      	movs	r2, #2
   1694a:	751a      	strb	r2, [r3, #20]
	dpll_config.reference_frequency = CONF_CLOCK_DPLL_REFERENCE_FREQUENCY;
   1694c:	2378      	movs	r3, #120	; 0x78
   1694e:	18fb      	adds	r3, r7, r3
   16950:	4a35      	ldr	r2, [pc, #212]	; (16a28 <system_clock_init+0x288>)
   16952:	60da      	str	r2, [r3, #12]
	dpll_config.reference_divider   = CONF_CLOCK_DPLL_REFERENCE_DIVIDER;
   16954:	2378      	movs	r3, #120	; 0x78
   16956:	18fb      	adds	r3, r7, r3
   16958:	2201      	movs	r2, #1
   1695a:	821a      	strh	r2, [r3, #16]
	dpll_config.output_frequency    = CONF_CLOCK_DPLL_OUTPUT_FREQUENCY;
   1695c:	2378      	movs	r3, #120	; 0x78
   1695e:	18fb      	adds	r3, r7, r3
   16960:	4a32      	ldr	r2, [pc, #200]	; (16a2c <system_clock_init+0x28c>)
   16962:	609a      	str	r2, [r3, #8]

	system_clock_source_dpll_set_config(&dpll_config);
   16964:	2378      	movs	r3, #120	; 0x78
   16966:	18fb      	adds	r3, r7, r3
   16968:	0018      	movs	r0, r3
   1696a:	4b31      	ldr	r3, [pc, #196]	; (16a30 <system_clock_init+0x290>)
   1696c:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_DPLL);
   1696e:	2008      	movs	r0, #8
   16970:	4b24      	ldr	r3, [pc, #144]	; (16a04 <system_clock_init+0x264>)
   16972:	4798      	blx	r3
	while(!system_clock_source_is_ready(SYSTEM_CLOCK_SOURCE_DPLL));
   16974:	46c0      	nop			; (mov r8, r8)
   16976:	2008      	movs	r0, #8
   16978:	4b2e      	ldr	r3, [pc, #184]	; (16a34 <system_clock_init+0x294>)
   1697a:	4798      	blx	r3
   1697c:	0003      	movs	r3, r0
   1697e:	001a      	movs	r2, r3
   16980:	2301      	movs	r3, #1
   16982:	4053      	eors	r3, r2
   16984:	b2db      	uxtb	r3, r3
   16986:	2b00      	cmp	r3, #0
   16988:	d1f5      	bne.n	16976 <system_clock_init+0x1d6>
	if (CONF_CLOCK_DPLL_ON_DEMAND) {
		SYSCTRL->DPLLCTRLA.bit.ONDEMAND = 1;
   1698a:	4919      	ldr	r1, [pc, #100]	; (169f0 <system_clock_init+0x250>)
   1698c:	2244      	movs	r2, #68	; 0x44
   1698e:	5c8b      	ldrb	r3, [r1, r2]
   16990:	2080      	movs	r0, #128	; 0x80
   16992:	4240      	negs	r0, r0
   16994:	4303      	orrs	r3, r0
   16996:	548b      	strb	r3, [r1, r2]

#  endif
#endif

	/* CPU and BUS clocks */
	system_cpu_clock_set_divider(CONF_CLOCK_CPU_DIVIDER);
   16998:	2000      	movs	r0, #0
   1699a:	4b27      	ldr	r3, [pc, #156]	; (16a38 <system_clock_init+0x298>)
   1699c:	4798      	blx	r3

	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBA, CONF_CLOCK_APBA_DIVIDER);
   1699e:	2100      	movs	r1, #0
   169a0:	2000      	movs	r0, #0
   169a2:	4b26      	ldr	r3, [pc, #152]	; (16a3c <system_clock_init+0x29c>)
   169a4:	4798      	blx	r3
	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBB, CONF_CLOCK_APBB_DIVIDER);
   169a6:	2100      	movs	r1, #0
   169a8:	2001      	movs	r0, #1
   169aa:	4b24      	ldr	r3, [pc, #144]	; (16a3c <system_clock_init+0x29c>)
   169ac:	4798      	blx	r3
	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBC, CONF_CLOCK_APBC_DIVIDER);
   169ae:	2100      	movs	r1, #0
   169b0:	2002      	movs	r0, #2
   169b2:	4b22      	ldr	r3, [pc, #136]	; (16a3c <system_clock_init+0x29c>)
   169b4:	4798      	blx	r3

	/* GCLK 0 */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	/* Configure the main GCLK last as it might depend on other generators */
	_CONF_CLOCK_GCLK_CONFIG(0, ~);
   169b6:	003b      	movs	r3, r7
   169b8:	0018      	movs	r0, r3
   169ba:	4b14      	ldr	r3, [pc, #80]	; (16a0c <system_clock_init+0x26c>)
   169bc:	4798      	blx	r3
   169be:	003b      	movs	r3, r7
   169c0:	2208      	movs	r2, #8
   169c2:	701a      	strb	r2, [r3, #0]
   169c4:	003b      	movs	r3, r7
   169c6:	2201      	movs	r2, #1
   169c8:	605a      	str	r2, [r3, #4]
   169ca:	003b      	movs	r3, r7
   169cc:	2200      	movs	r2, #0
   169ce:	721a      	strb	r2, [r3, #8]
   169d0:	003b      	movs	r3, r7
   169d2:	2201      	movs	r2, #1
   169d4:	725a      	strb	r2, [r3, #9]
   169d6:	003b      	movs	r3, r7
   169d8:	0019      	movs	r1, r3
   169da:	2000      	movs	r0, #0
   169dc:	4b0c      	ldr	r3, [pc, #48]	; (16a10 <system_clock_init+0x270>)
   169de:	4798      	blx	r3
   169e0:	2000      	movs	r0, #0
   169e2:	4b0c      	ldr	r3, [pc, #48]	; (16a14 <system_clock_init+0x274>)
   169e4:	4798      	blx	r3
#endif
}
   169e6:	46c0      	nop			; (mov r8, r8)
   169e8:	46bd      	mov	sp, r7
   169ea:	b026      	add	sp, #152	; 0x98
   169ec:	bd80      	pop	{r7, pc}
   169ee:	46c0      	nop			; (mov r8, r8)
   169f0:	40000800 	.word	0x40000800
   169f4:	00016361 	.word	0x00016361
   169f8:	00016769 	.word	0x00016769
   169fc:	00016271 	.word	0x00016271
   16a00:	000164b5 	.word	0x000164b5
   16a04:	00016639 	.word	0x00016639
   16a08:	00016ae5 	.word	0x00016ae5
   16a0c:	0001622d 	.word	0x0001622d
   16a10:	00016b15 	.word	0x00016b15
   16a14:	00016c39 	.word	0x00016c39
   16a18:	0001625b 	.word	0x0001625b
   16a1c:	00016d6d 	.word	0x00016d6d
   16a20:	00016db1 	.word	0x00016db1
   16a24:	00016309 	.word	0x00016309
   16a28:	000f4240 	.word	0x000f4240
   16a2c:	02dc6c00 	.word	0x02dc6c00
   16a30:	0001652d 	.word	0x0001652d
   16a34:	000166e5 	.word	0x000166e5
   16a38:	00016295 	.word	0x00016295
   16a3c:	000162b5 	.word	0x000162b5

00016a40 <system_apb_clock_set_mask>:
{
   16a40:	b580      	push	{r7, lr}
   16a42:	b082      	sub	sp, #8
   16a44:	af00      	add	r7, sp, #0
   16a46:	0002      	movs	r2, r0
   16a48:	6039      	str	r1, [r7, #0]
   16a4a:	1dfb      	adds	r3, r7, #7
   16a4c:	701a      	strb	r2, [r3, #0]
	switch (bus) {
   16a4e:	1dfb      	adds	r3, r7, #7
   16a50:	781b      	ldrb	r3, [r3, #0]
   16a52:	2b01      	cmp	r3, #1
   16a54:	d00a      	beq.n	16a6c <system_apb_clock_set_mask+0x2c>
   16a56:	2b02      	cmp	r3, #2
   16a58:	d00f      	beq.n	16a7a <system_apb_clock_set_mask+0x3a>
   16a5a:	2b00      	cmp	r3, #0
   16a5c:	d114      	bne.n	16a88 <system_apb_clock_set_mask+0x48>
			PM->APBAMASK.reg |= mask;
   16a5e:	4b0e      	ldr	r3, [pc, #56]	; (16a98 <system_apb_clock_set_mask+0x58>)
   16a60:	4a0d      	ldr	r2, [pc, #52]	; (16a98 <system_apb_clock_set_mask+0x58>)
   16a62:	6991      	ldr	r1, [r2, #24]
   16a64:	683a      	ldr	r2, [r7, #0]
   16a66:	430a      	orrs	r2, r1
   16a68:	619a      	str	r2, [r3, #24]
			break;
   16a6a:	e00f      	b.n	16a8c <system_apb_clock_set_mask+0x4c>
			PM->APBBMASK.reg |= mask;
   16a6c:	4b0a      	ldr	r3, [pc, #40]	; (16a98 <system_apb_clock_set_mask+0x58>)
   16a6e:	4a0a      	ldr	r2, [pc, #40]	; (16a98 <system_apb_clock_set_mask+0x58>)
   16a70:	69d1      	ldr	r1, [r2, #28]
   16a72:	683a      	ldr	r2, [r7, #0]
   16a74:	430a      	orrs	r2, r1
   16a76:	61da      	str	r2, [r3, #28]
			break;
   16a78:	e008      	b.n	16a8c <system_apb_clock_set_mask+0x4c>
			PM->APBCMASK.reg |= mask;
   16a7a:	4b07      	ldr	r3, [pc, #28]	; (16a98 <system_apb_clock_set_mask+0x58>)
   16a7c:	4a06      	ldr	r2, [pc, #24]	; (16a98 <system_apb_clock_set_mask+0x58>)
   16a7e:	6a11      	ldr	r1, [r2, #32]
   16a80:	683a      	ldr	r2, [r7, #0]
   16a82:	430a      	orrs	r2, r1
   16a84:	621a      	str	r2, [r3, #32]
			break;
   16a86:	e001      	b.n	16a8c <system_apb_clock_set_mask+0x4c>
			return STATUS_ERR_INVALID_ARG;
   16a88:	2317      	movs	r3, #23
   16a8a:	e000      	b.n	16a8e <system_apb_clock_set_mask+0x4e>
	return STATUS_OK;
   16a8c:	2300      	movs	r3, #0
}
   16a8e:	0018      	movs	r0, r3
   16a90:	46bd      	mov	sp, r7
   16a92:	b002      	add	sp, #8
   16a94:	bd80      	pop	{r7, pc}
   16a96:	46c0      	nop			; (mov r8, r8)
   16a98:	40000400 	.word	0x40000400

00016a9c <system_interrupt_enter_critical_section>:
{
   16a9c:	b580      	push	{r7, lr}
   16a9e:	af00      	add	r7, sp, #0
	cpu_irq_enter_critical();
   16aa0:	4b02      	ldr	r3, [pc, #8]	; (16aac <system_interrupt_enter_critical_section+0x10>)
   16aa2:	4798      	blx	r3
}
   16aa4:	46c0      	nop			; (mov r8, r8)
   16aa6:	46bd      	mov	sp, r7
   16aa8:	bd80      	pop	{r7, pc}
   16aaa:	46c0      	nop			; (mov r8, r8)
   16aac:	000130d9 	.word	0x000130d9

00016ab0 <system_interrupt_leave_critical_section>:
{
   16ab0:	b580      	push	{r7, lr}
   16ab2:	af00      	add	r7, sp, #0
	cpu_irq_leave_critical();
   16ab4:	4b02      	ldr	r3, [pc, #8]	; (16ac0 <system_interrupt_leave_critical_section+0x10>)
   16ab6:	4798      	blx	r3
}
   16ab8:	46c0      	nop			; (mov r8, r8)
   16aba:	46bd      	mov	sp, r7
   16abc:	bd80      	pop	{r7, pc}
   16abe:	46c0      	nop			; (mov r8, r8)
   16ac0:	0001312d 	.word	0x0001312d

00016ac4 <system_gclk_is_syncing>:
 *
 * \retval false if the module has completed synchronization
 * \retval true if the module synchronization is ongoing
 */
static inline bool system_gclk_is_syncing(void)
{
   16ac4:	b580      	push	{r7, lr}
   16ac6:	af00      	add	r7, sp, #0
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
   16ac8:	4b05      	ldr	r3, [pc, #20]	; (16ae0 <system_gclk_is_syncing+0x1c>)
   16aca:	785b      	ldrb	r3, [r3, #1]
   16acc:	b2db      	uxtb	r3, r3
   16ace:	b25b      	sxtb	r3, r3
   16ad0:	2b00      	cmp	r3, #0
   16ad2:	da01      	bge.n	16ad8 <system_gclk_is_syncing+0x14>
		return true;
   16ad4:	2301      	movs	r3, #1
   16ad6:	e000      	b.n	16ada <system_gclk_is_syncing+0x16>
	}

	return false;
   16ad8:	2300      	movs	r3, #0
}
   16ada:	0018      	movs	r0, r3
   16adc:	46bd      	mov	sp, r7
   16ade:	bd80      	pop	{r7, pc}
   16ae0:	40000c00 	.word	0x40000c00

00016ae4 <system_gclk_init>:
 *
 * Initializes the Generic Clock module, disabling and resetting all active
 * Generic Clock Generators and Channels to their power-on default values.
 */
void system_gclk_init(void)
{
   16ae4:	b580      	push	{r7, lr}
   16ae6:	af00      	add	r7, sp, #0
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, PM_APBAMASK_GCLK);
   16ae8:	2108      	movs	r1, #8
   16aea:	2000      	movs	r0, #0
   16aec:	4b07      	ldr	r3, [pc, #28]	; (16b0c <system_gclk_init+0x28>)
   16aee:	4798      	blx	r3

	/* Software reset the module to ensure it is re-initialized correctly */
	GCLK->CTRL.reg = GCLK_CTRL_SWRST;
   16af0:	4b07      	ldr	r3, [pc, #28]	; (16b10 <system_gclk_init+0x2c>)
   16af2:	2201      	movs	r2, #1
   16af4:	701a      	strb	r2, [r3, #0]
	while (GCLK->CTRL.reg & GCLK_CTRL_SWRST) {
   16af6:	46c0      	nop			; (mov r8, r8)
   16af8:	4b05      	ldr	r3, [pc, #20]	; (16b10 <system_gclk_init+0x2c>)
   16afa:	781b      	ldrb	r3, [r3, #0]
   16afc:	b2db      	uxtb	r3, r3
   16afe:	001a      	movs	r2, r3
   16b00:	2301      	movs	r3, #1
   16b02:	4013      	ands	r3, r2
   16b04:	d1f8      	bne.n	16af8 <system_gclk_init+0x14>
		/* Wait for reset to complete */
	}
}
   16b06:	46c0      	nop			; (mov r8, r8)
   16b08:	46bd      	mov	sp, r7
   16b0a:	bd80      	pop	{r7, pc}
   16b0c:	00016a41 	.word	0x00016a41
   16b10:	40000c00 	.word	0x40000c00

00016b14 <system_gclk_gen_set_config>:
 * \param[in] config     Configuration settings for the generator
 */
void system_gclk_gen_set_config(
		const uint8_t generator,
		struct system_gclk_gen_config *const config)
{
   16b14:	b580      	push	{r7, lr}
   16b16:	b086      	sub	sp, #24
   16b18:	af00      	add	r7, sp, #0
   16b1a:	0002      	movs	r2, r0
   16b1c:	6039      	str	r1, [r7, #0]
   16b1e:	1dfb      	adds	r3, r7, #7
   16b20:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(config);

	/* Cache new register configurations to minimize sync requirements. */
	uint32_t new_genctrl_config = (generator << GCLK_GENCTRL_ID_Pos);
   16b22:	1dfb      	adds	r3, r7, #7
   16b24:	781b      	ldrb	r3, [r3, #0]
   16b26:	617b      	str	r3, [r7, #20]
	uint32_t new_gendiv_config  = (generator << GCLK_GENDIV_ID_Pos);
   16b28:	1dfb      	adds	r3, r7, #7
   16b2a:	781b      	ldrb	r3, [r3, #0]
   16b2c:	613b      	str	r3, [r7, #16]

	/* Select the requested source clock for the generator */
	new_genctrl_config |= config->source_clock << GCLK_GENCTRL_SRC_Pos;
   16b2e:	683b      	ldr	r3, [r7, #0]
   16b30:	781b      	ldrb	r3, [r3, #0]
   16b32:	021b      	lsls	r3, r3, #8
   16b34:	001a      	movs	r2, r3
   16b36:	697b      	ldr	r3, [r7, #20]
   16b38:	4313      	orrs	r3, r2
   16b3a:	617b      	str	r3, [r7, #20]

	/* Configure the clock to be either high or low when disabled */
	if (config->high_when_disabled) {
   16b3c:	683b      	ldr	r3, [r7, #0]
   16b3e:	785b      	ldrb	r3, [r3, #1]
   16b40:	2b00      	cmp	r3, #0
   16b42:	d004      	beq.n	16b4e <system_gclk_gen_set_config+0x3a>
		new_genctrl_config |= GCLK_GENCTRL_OOV;
   16b44:	697b      	ldr	r3, [r7, #20]
   16b46:	2280      	movs	r2, #128	; 0x80
   16b48:	02d2      	lsls	r2, r2, #11
   16b4a:	4313      	orrs	r3, r2
   16b4c:	617b      	str	r3, [r7, #20]
	}

	/* Configure if the clock output to I/O pin should be enabled. */
	if (config->output_enable) {
   16b4e:	683b      	ldr	r3, [r7, #0]
   16b50:	7a5b      	ldrb	r3, [r3, #9]
   16b52:	2b00      	cmp	r3, #0
   16b54:	d004      	beq.n	16b60 <system_gclk_gen_set_config+0x4c>
		new_genctrl_config |= GCLK_GENCTRL_OE;
   16b56:	697b      	ldr	r3, [r7, #20]
   16b58:	2280      	movs	r2, #128	; 0x80
   16b5a:	0312      	lsls	r2, r2, #12
   16b5c:	4313      	orrs	r3, r2
   16b5e:	617b      	str	r3, [r7, #20]
	}

	/* Set division factor */
	if (config->division_factor > 1) {
   16b60:	683b      	ldr	r3, [r7, #0]
   16b62:	685b      	ldr	r3, [r3, #4]
   16b64:	2b01      	cmp	r3, #1
   16b66:	d92c      	bls.n	16bc2 <system_gclk_gen_set_config+0xae>
		/* Check if division is a power of two */
		if (((config->division_factor & (config->division_factor - 1)) == 0)) {
   16b68:	683b      	ldr	r3, [r7, #0]
   16b6a:	685a      	ldr	r2, [r3, #4]
   16b6c:	683b      	ldr	r3, [r7, #0]
   16b6e:	685b      	ldr	r3, [r3, #4]
   16b70:	3b01      	subs	r3, #1
   16b72:	4013      	ands	r3, r2
   16b74:	d11a      	bne.n	16bac <system_gclk_gen_set_config+0x98>
			/* Determine the index of the highest bit set to get the
			 * division factor that must be loaded into the division
			 * register */

			uint32_t div2_count = 0;
   16b76:	2300      	movs	r3, #0
   16b78:	60fb      	str	r3, [r7, #12]

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
   16b7a:	2302      	movs	r3, #2
   16b7c:	60bb      	str	r3, [r7, #8]
   16b7e:	e005      	b.n	16b8c <system_gclk_gen_set_config+0x78>
						mask <<= 1) {
				div2_count++;
   16b80:	68fb      	ldr	r3, [r7, #12]
   16b82:	3301      	adds	r3, #1
   16b84:	60fb      	str	r3, [r7, #12]
						mask <<= 1) {
   16b86:	68bb      	ldr	r3, [r7, #8]
   16b88:	005b      	lsls	r3, r3, #1
   16b8a:	60bb      	str	r3, [r7, #8]
			for (mask = (1UL << 1); mask < config->division_factor;
   16b8c:	683b      	ldr	r3, [r7, #0]
   16b8e:	685a      	ldr	r2, [r3, #4]
   16b90:	68bb      	ldr	r3, [r7, #8]
   16b92:	429a      	cmp	r2, r3
   16b94:	d8f4      	bhi.n	16b80 <system_gclk_gen_set_config+0x6c>
			}

			/* Set binary divider power of 2 division factor */
			new_gendiv_config  |= div2_count << GCLK_GENDIV_DIV_Pos;
   16b96:	68fb      	ldr	r3, [r7, #12]
   16b98:	021b      	lsls	r3, r3, #8
   16b9a:	693a      	ldr	r2, [r7, #16]
   16b9c:	4313      	orrs	r3, r2
   16b9e:	613b      	str	r3, [r7, #16]
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
   16ba0:	697b      	ldr	r3, [r7, #20]
   16ba2:	2280      	movs	r2, #128	; 0x80
   16ba4:	0352      	lsls	r2, r2, #13
   16ba6:	4313      	orrs	r3, r2
   16ba8:	617b      	str	r3, [r7, #20]
   16baa:	e00a      	b.n	16bc2 <system_gclk_gen_set_config+0xae>
		} else {
			/* Set integer division factor */

			new_gendiv_config  |=
					(config->division_factor) << GCLK_GENDIV_DIV_Pos;
   16bac:	683b      	ldr	r3, [r7, #0]
   16bae:	685b      	ldr	r3, [r3, #4]
   16bb0:	021b      	lsls	r3, r3, #8
			new_gendiv_config  |=
   16bb2:	693a      	ldr	r2, [r7, #16]
   16bb4:	4313      	orrs	r3, r2
   16bb6:	613b      	str	r3, [r7, #16]

			/* Enable non-binary division with increased duty cycle accuracy */
			new_genctrl_config |= GCLK_GENCTRL_IDC;
   16bb8:	697b      	ldr	r3, [r7, #20]
   16bba:	2280      	movs	r2, #128	; 0x80
   16bbc:	0292      	lsls	r2, r2, #10
   16bbe:	4313      	orrs	r3, r2
   16bc0:	617b      	str	r3, [r7, #20]
		}

	}

	/* Enable or disable the clock in standby mode */
	if (config->run_in_standby) {
   16bc2:	683b      	ldr	r3, [r7, #0]
   16bc4:	7a1b      	ldrb	r3, [r3, #8]
   16bc6:	2b00      	cmp	r3, #0
   16bc8:	d004      	beq.n	16bd4 <system_gclk_gen_set_config+0xc0>
		new_genctrl_config |= GCLK_GENCTRL_RUNSTDBY;
   16bca:	697b      	ldr	r3, [r7, #20]
   16bcc:	2280      	movs	r2, #128	; 0x80
   16bce:	0392      	lsls	r2, r2, #14
   16bd0:	4313      	orrs	r3, r2
   16bd2:	617b      	str	r3, [r7, #20]
	}

	while (system_gclk_is_syncing()) {
   16bd4:	46c0      	nop			; (mov r8, r8)
   16bd6:	4b13      	ldr	r3, [pc, #76]	; (16c24 <system_gclk_gen_set_config+0x110>)
   16bd8:	4798      	blx	r3
   16bda:	1e03      	subs	r3, r0, #0
   16bdc:	d1fb      	bne.n	16bd6 <system_gclk_gen_set_config+0xc2>
		/* Wait for synchronization */
	};

	system_interrupt_enter_critical_section();
   16bde:	4b12      	ldr	r3, [pc, #72]	; (16c28 <system_gclk_gen_set_config+0x114>)
   16be0:	4798      	blx	r3

	/* Select the correct generator */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
   16be2:	4a12      	ldr	r2, [pc, #72]	; (16c2c <system_gclk_gen_set_config+0x118>)
   16be4:	1dfb      	adds	r3, r7, #7
   16be6:	781b      	ldrb	r3, [r3, #0]
   16be8:	7013      	strb	r3, [r2, #0]

	/* Write the new generator configuration */
	while (system_gclk_is_syncing()) {
   16bea:	46c0      	nop			; (mov r8, r8)
   16bec:	4b0d      	ldr	r3, [pc, #52]	; (16c24 <system_gclk_gen_set_config+0x110>)
   16bee:	4798      	blx	r3
   16bf0:	1e03      	subs	r3, r0, #0
   16bf2:	d1fb      	bne.n	16bec <system_gclk_gen_set_config+0xd8>
		/* Wait for synchronization */
	};
	GCLK->GENDIV.reg  = new_gendiv_config;
   16bf4:	4b0e      	ldr	r3, [pc, #56]	; (16c30 <system_gclk_gen_set_config+0x11c>)
   16bf6:	693a      	ldr	r2, [r7, #16]
   16bf8:	609a      	str	r2, [r3, #8]

	while (system_gclk_is_syncing()) {
   16bfa:	46c0      	nop			; (mov r8, r8)
   16bfc:	4b09      	ldr	r3, [pc, #36]	; (16c24 <system_gclk_gen_set_config+0x110>)
   16bfe:	4798      	blx	r3
   16c00:	1e03      	subs	r3, r0, #0
   16c02:	d1fb      	bne.n	16bfc <system_gclk_gen_set_config+0xe8>
		/* Wait for synchronization */
	};
	GCLK->GENCTRL.reg = new_genctrl_config | (GCLK->GENCTRL.reg & GCLK_GENCTRL_GENEN);
   16c04:	4b0a      	ldr	r3, [pc, #40]	; (16c30 <system_gclk_gen_set_config+0x11c>)
   16c06:	4a0a      	ldr	r2, [pc, #40]	; (16c30 <system_gclk_gen_set_config+0x11c>)
   16c08:	6851      	ldr	r1, [r2, #4]
   16c0a:	2280      	movs	r2, #128	; 0x80
   16c0c:	0252      	lsls	r2, r2, #9
   16c0e:	4011      	ands	r1, r2
   16c10:	697a      	ldr	r2, [r7, #20]
   16c12:	430a      	orrs	r2, r1
   16c14:	605a      	str	r2, [r3, #4]

	system_interrupt_leave_critical_section();
   16c16:	4b07      	ldr	r3, [pc, #28]	; (16c34 <system_gclk_gen_set_config+0x120>)
   16c18:	4798      	blx	r3
}
   16c1a:	46c0      	nop			; (mov r8, r8)
   16c1c:	46bd      	mov	sp, r7
   16c1e:	b006      	add	sp, #24
   16c20:	bd80      	pop	{r7, pc}
   16c22:	46c0      	nop			; (mov r8, r8)
   16c24:	00016ac5 	.word	0x00016ac5
   16c28:	00016a9d 	.word	0x00016a9d
   16c2c:	40000c08 	.word	0x40000c08
   16c30:	40000c00 	.word	0x40000c00
   16c34:	00016ab1 	.word	0x00016ab1

00016c38 <system_gclk_gen_enable>:
 *
 * \param[in] generator  Generic Clock Generator index to enable
 */
void system_gclk_gen_enable(
		const uint8_t generator)
{
   16c38:	b580      	push	{r7, lr}
   16c3a:	b082      	sub	sp, #8
   16c3c:	af00      	add	r7, sp, #0
   16c3e:	0002      	movs	r2, r0
   16c40:	1dfb      	adds	r3, r7, #7
   16c42:	701a      	strb	r2, [r3, #0]
	while (system_gclk_is_syncing()) {
   16c44:	46c0      	nop			; (mov r8, r8)
   16c46:	4b0e      	ldr	r3, [pc, #56]	; (16c80 <system_gclk_gen_enable+0x48>)
   16c48:	4798      	blx	r3
   16c4a:	1e03      	subs	r3, r0, #0
   16c4c:	d1fb      	bne.n	16c46 <system_gclk_gen_enable+0xe>
		/* Wait for synchronization */
	};

	system_interrupt_enter_critical_section();
   16c4e:	4b0d      	ldr	r3, [pc, #52]	; (16c84 <system_gclk_gen_enable+0x4c>)
   16c50:	4798      	blx	r3

	/* Select the requested generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
   16c52:	4a0d      	ldr	r2, [pc, #52]	; (16c88 <system_gclk_gen_enable+0x50>)
   16c54:	1dfb      	adds	r3, r7, #7
   16c56:	781b      	ldrb	r3, [r3, #0]
   16c58:	7013      	strb	r3, [r2, #0]
	while (system_gclk_is_syncing()) {
   16c5a:	46c0      	nop			; (mov r8, r8)
   16c5c:	4b08      	ldr	r3, [pc, #32]	; (16c80 <system_gclk_gen_enable+0x48>)
   16c5e:	4798      	blx	r3
   16c60:	1e03      	subs	r3, r0, #0
   16c62:	d1fb      	bne.n	16c5c <system_gclk_gen_enable+0x24>
		/* Wait for synchronization */
	};

	/* Enable generator */
	GCLK->GENCTRL.reg |= GCLK_GENCTRL_GENEN;
   16c64:	4b09      	ldr	r3, [pc, #36]	; (16c8c <system_gclk_gen_enable+0x54>)
   16c66:	4a09      	ldr	r2, [pc, #36]	; (16c8c <system_gclk_gen_enable+0x54>)
   16c68:	6852      	ldr	r2, [r2, #4]
   16c6a:	2180      	movs	r1, #128	; 0x80
   16c6c:	0249      	lsls	r1, r1, #9
   16c6e:	430a      	orrs	r2, r1
   16c70:	605a      	str	r2, [r3, #4]

	system_interrupt_leave_critical_section();
   16c72:	4b07      	ldr	r3, [pc, #28]	; (16c90 <system_gclk_gen_enable+0x58>)
   16c74:	4798      	blx	r3
}
   16c76:	46c0      	nop			; (mov r8, r8)
   16c78:	46bd      	mov	sp, r7
   16c7a:	b002      	add	sp, #8
   16c7c:	bd80      	pop	{r7, pc}
   16c7e:	46c0      	nop			; (mov r8, r8)
   16c80:	00016ac5 	.word	0x00016ac5
   16c84:	00016a9d 	.word	0x00016a9d
   16c88:	40000c04 	.word	0x40000c04
   16c8c:	40000c00 	.word	0x40000c00
   16c90:	00016ab1 	.word	0x00016ab1

00016c94 <system_gclk_gen_get_hz>:
 *
 * \return The frequency of the generic clock generator, in Hz.
 */
uint32_t system_gclk_gen_get_hz(
		const uint8_t generator)
{
   16c94:	b580      	push	{r7, lr}
   16c96:	b086      	sub	sp, #24
   16c98:	af00      	add	r7, sp, #0
   16c9a:	0002      	movs	r2, r0
   16c9c:	1dfb      	adds	r3, r7, #7
   16c9e:	701a      	strb	r2, [r3, #0]
	while (system_gclk_is_syncing()) {
   16ca0:	46c0      	nop			; (mov r8, r8)
   16ca2:	4b2a      	ldr	r3, [pc, #168]	; (16d4c <system_gclk_gen_get_hz+0xb8>)
   16ca4:	4798      	blx	r3
   16ca6:	1e03      	subs	r3, r0, #0
   16ca8:	d1fb      	bne.n	16ca2 <system_gclk_gen_get_hz+0xe>
		/* Wait for synchronization */
	};

	system_interrupt_enter_critical_section();
   16caa:	4b29      	ldr	r3, [pc, #164]	; (16d50 <system_gclk_gen_get_hz+0xbc>)
   16cac:	4798      	blx	r3

	/* Select the appropriate generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
   16cae:	4a29      	ldr	r2, [pc, #164]	; (16d54 <system_gclk_gen_get_hz+0xc0>)
   16cb0:	1dfb      	adds	r3, r7, #7
   16cb2:	781b      	ldrb	r3, [r3, #0]
   16cb4:	7013      	strb	r3, [r2, #0]
	while (system_gclk_is_syncing()) {
   16cb6:	46c0      	nop			; (mov r8, r8)
   16cb8:	4b24      	ldr	r3, [pc, #144]	; (16d4c <system_gclk_gen_get_hz+0xb8>)
   16cba:	4798      	blx	r3
   16cbc:	1e03      	subs	r3, r0, #0
   16cbe:	d1fb      	bne.n	16cb8 <system_gclk_gen_get_hz+0x24>
		/* Wait for synchronization */
	};

	/* Get the frequency of the source connected to the GCLK generator */
	uint32_t gen_input_hz = system_clock_source_get_hz(
			(enum system_clock_source)GCLK->GENCTRL.bit.SRC);
   16cc0:	4b25      	ldr	r3, [pc, #148]	; (16d58 <system_gclk_gen_get_hz+0xc4>)
   16cc2:	685b      	ldr	r3, [r3, #4]
   16cc4:	04db      	lsls	r3, r3, #19
   16cc6:	0edb      	lsrs	r3, r3, #27
   16cc8:	b2db      	uxtb	r3, r3
	uint32_t gen_input_hz = system_clock_source_get_hz(
   16cca:	0018      	movs	r0, r3
   16ccc:	4b23      	ldr	r3, [pc, #140]	; (16d5c <system_gclk_gen_get_hz+0xc8>)
   16cce:	4798      	blx	r3
   16cd0:	0003      	movs	r3, r0
   16cd2:	617b      	str	r3, [r7, #20]

	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
   16cd4:	4a1f      	ldr	r2, [pc, #124]	; (16d54 <system_gclk_gen_get_hz+0xc0>)
   16cd6:	1dfb      	adds	r3, r7, #7
   16cd8:	781b      	ldrb	r3, [r3, #0]
   16cda:	7013      	strb	r3, [r2, #0]

	uint8_t divsel = GCLK->GENCTRL.bit.DIVSEL;
   16cdc:	4b1e      	ldr	r3, [pc, #120]	; (16d58 <system_gclk_gen_get_hz+0xc4>)
   16cde:	685b      	ldr	r3, [r3, #4]
   16ce0:	02db      	lsls	r3, r3, #11
   16ce2:	0fdb      	lsrs	r3, r3, #31
   16ce4:	b2da      	uxtb	r2, r3
   16ce6:	2313      	movs	r3, #19
   16ce8:	18fb      	adds	r3, r7, r3
   16cea:	701a      	strb	r2, [r3, #0]

	/* Select the appropriate generator division register */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
   16cec:	4a1c      	ldr	r2, [pc, #112]	; (16d60 <system_gclk_gen_get_hz+0xcc>)
   16cee:	1dfb      	adds	r3, r7, #7
   16cf0:	781b      	ldrb	r3, [r3, #0]
   16cf2:	7013      	strb	r3, [r2, #0]
	while (system_gclk_is_syncing()) {
   16cf4:	46c0      	nop			; (mov r8, r8)
   16cf6:	4b15      	ldr	r3, [pc, #84]	; (16d4c <system_gclk_gen_get_hz+0xb8>)
   16cf8:	4798      	blx	r3
   16cfa:	1e03      	subs	r3, r0, #0
   16cfc:	d1fb      	bne.n	16cf6 <system_gclk_gen_get_hz+0x62>
		/* Wait for synchronization */
	};

	uint32_t divider = GCLK->GENDIV.bit.DIV;
   16cfe:	4b16      	ldr	r3, [pc, #88]	; (16d58 <system_gclk_gen_get_hz+0xc4>)
   16d00:	689b      	ldr	r3, [r3, #8]
   16d02:	021b      	lsls	r3, r3, #8
   16d04:	0c1b      	lsrs	r3, r3, #16
   16d06:	b29b      	uxth	r3, r3
   16d08:	60fb      	str	r3, [r7, #12]

	system_interrupt_leave_critical_section();
   16d0a:	4b16      	ldr	r3, [pc, #88]	; (16d64 <system_gclk_gen_get_hz+0xd0>)
   16d0c:	4798      	blx	r3

	/* Check if the generator is using fractional or binary division */
	if (!divsel && divider > 1) {
   16d0e:	2313      	movs	r3, #19
   16d10:	18fb      	adds	r3, r7, r3
   16d12:	781b      	ldrb	r3, [r3, #0]
   16d14:	2b00      	cmp	r3, #0
   16d16:	d109      	bne.n	16d2c <system_gclk_gen_get_hz+0x98>
   16d18:	68fb      	ldr	r3, [r7, #12]
   16d1a:	2b01      	cmp	r3, #1
   16d1c:	d906      	bls.n	16d2c <system_gclk_gen_get_hz+0x98>
		gen_input_hz /= divider;
   16d1e:	4b12      	ldr	r3, [pc, #72]	; (16d68 <system_gclk_gen_get_hz+0xd4>)
   16d20:	68f9      	ldr	r1, [r7, #12]
   16d22:	6978      	ldr	r0, [r7, #20]
   16d24:	4798      	blx	r3
   16d26:	0003      	movs	r3, r0
   16d28:	617b      	str	r3, [r7, #20]
   16d2a:	e00a      	b.n	16d42 <system_gclk_gen_get_hz+0xae>
	} else if (divsel) {
   16d2c:	2313      	movs	r3, #19
   16d2e:	18fb      	adds	r3, r7, r3
   16d30:	781b      	ldrb	r3, [r3, #0]
   16d32:	2b00      	cmp	r3, #0
   16d34:	d005      	beq.n	16d42 <system_gclk_gen_get_hz+0xae>
		gen_input_hz >>= (divider+1);
   16d36:	68fb      	ldr	r3, [r7, #12]
   16d38:	3301      	adds	r3, #1
   16d3a:	697a      	ldr	r2, [r7, #20]
   16d3c:	40da      	lsrs	r2, r3
   16d3e:	0013      	movs	r3, r2
   16d40:	617b      	str	r3, [r7, #20]
	}

	return gen_input_hz;
   16d42:	697b      	ldr	r3, [r7, #20]
}
   16d44:	0018      	movs	r0, r3
   16d46:	46bd      	mov	sp, r7
   16d48:	b006      	add	sp, #24
   16d4a:	bd80      	pop	{r7, pc}
   16d4c:	00016ac5 	.word	0x00016ac5
   16d50:	00016a9d 	.word	0x00016a9d
   16d54:	40000c04 	.word	0x40000c04
   16d58:	40000c00 	.word	0x40000c00
   16d5c:	000163f5 	.word	0x000163f5
   16d60:	40000c08 	.word	0x40000c08
   16d64:	00016ab1 	.word	0x00016ab1
   16d68:	0001f841 	.word	0x0001f841

00016d6c <system_gclk_chan_set_config>:
 *
 */
void system_gclk_chan_set_config(
		const uint8_t channel,
		struct system_gclk_chan_config *const config)
{
   16d6c:	b580      	push	{r7, lr}
   16d6e:	b084      	sub	sp, #16
   16d70:	af00      	add	r7, sp, #0
   16d72:	0002      	movs	r2, r0
   16d74:	6039      	str	r1, [r7, #0]
   16d76:	1dfb      	adds	r3, r7, #7
   16d78:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(config);

	/* Cache the new config to reduce sync requirements */
	uint32_t new_clkctrl_config = (channel << GCLK_CLKCTRL_ID_Pos);
   16d7a:	1dfb      	adds	r3, r7, #7
   16d7c:	781b      	ldrb	r3, [r3, #0]
   16d7e:	60fb      	str	r3, [r7, #12]

	/* Select the desired generic clock generator */
	new_clkctrl_config |= config->source_generator << GCLK_CLKCTRL_GEN_Pos;
   16d80:	683b      	ldr	r3, [r7, #0]
   16d82:	781b      	ldrb	r3, [r3, #0]
   16d84:	021b      	lsls	r3, r3, #8
   16d86:	001a      	movs	r2, r3
   16d88:	68fb      	ldr	r3, [r7, #12]
   16d8a:	4313      	orrs	r3, r2
   16d8c:	60fb      	str	r3, [r7, #12]

	/* Disable generic clock channel */
	system_gclk_chan_disable(channel);
   16d8e:	1dfb      	adds	r3, r7, #7
   16d90:	781b      	ldrb	r3, [r3, #0]
   16d92:	0018      	movs	r0, r3
   16d94:	4b04      	ldr	r3, [pc, #16]	; (16da8 <system_gclk_chan_set_config+0x3c>)
   16d96:	4798      	blx	r3

	/* Write the new configuration */
	GCLK->CLKCTRL.reg = new_clkctrl_config;
   16d98:	4b04      	ldr	r3, [pc, #16]	; (16dac <system_gclk_chan_set_config+0x40>)
   16d9a:	68fa      	ldr	r2, [r7, #12]
   16d9c:	b292      	uxth	r2, r2
   16d9e:	805a      	strh	r2, [r3, #2]
}
   16da0:	46c0      	nop			; (mov r8, r8)
   16da2:	46bd      	mov	sp, r7
   16da4:	b004      	add	sp, #16
   16da6:	bd80      	pop	{r7, pc}
   16da8:	00016df9 	.word	0x00016df9
   16dac:	40000c00 	.word	0x40000c00

00016db0 <system_gclk_chan_enable>:
 *
 * \param[in] channel   Generic Clock channel to enable
 */
void system_gclk_chan_enable(
		const uint8_t channel)
{
   16db0:	b580      	push	{r7, lr}
   16db2:	b082      	sub	sp, #8
   16db4:	af00      	add	r7, sp, #0
   16db6:	0002      	movs	r2, r0
   16db8:	1dfb      	adds	r3, r7, #7
   16dba:	701a      	strb	r2, [r3, #0]
	system_interrupt_enter_critical_section();
   16dbc:	4b0a      	ldr	r3, [pc, #40]	; (16de8 <system_gclk_chan_enable+0x38>)
   16dbe:	4798      	blx	r3

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
   16dc0:	4a0a      	ldr	r2, [pc, #40]	; (16dec <system_gclk_chan_enable+0x3c>)
   16dc2:	1dfb      	adds	r3, r7, #7
   16dc4:	781b      	ldrb	r3, [r3, #0]
   16dc6:	7013      	strb	r3, [r2, #0]

	/* Enable the generic clock */
	GCLK->CLKCTRL.reg |= GCLK_CLKCTRL_CLKEN;
   16dc8:	4909      	ldr	r1, [pc, #36]	; (16df0 <system_gclk_chan_enable+0x40>)
   16dca:	4b09      	ldr	r3, [pc, #36]	; (16df0 <system_gclk_chan_enable+0x40>)
   16dcc:	885b      	ldrh	r3, [r3, #2]
   16dce:	b29b      	uxth	r3, r3
   16dd0:	2280      	movs	r2, #128	; 0x80
   16dd2:	01d2      	lsls	r2, r2, #7
   16dd4:	4313      	orrs	r3, r2
   16dd6:	b29b      	uxth	r3, r3
   16dd8:	804b      	strh	r3, [r1, #2]

	system_interrupt_leave_critical_section();
   16dda:	4b06      	ldr	r3, [pc, #24]	; (16df4 <system_gclk_chan_enable+0x44>)
   16ddc:	4798      	blx	r3
}
   16dde:	46c0      	nop			; (mov r8, r8)
   16de0:	46bd      	mov	sp, r7
   16de2:	b002      	add	sp, #8
   16de4:	bd80      	pop	{r7, pc}
   16de6:	46c0      	nop			; (mov r8, r8)
   16de8:	00016a9d 	.word	0x00016a9d
   16dec:	40000c02 	.word	0x40000c02
   16df0:	40000c00 	.word	0x40000c00
   16df4:	00016ab1 	.word	0x00016ab1

00016df8 <system_gclk_chan_disable>:
 *
 * \param[in] channel  Generic Clock channel to disable
 */
void system_gclk_chan_disable(
		const uint8_t channel)
{
   16df8:	b580      	push	{r7, lr}
   16dfa:	b084      	sub	sp, #16
   16dfc:	af00      	add	r7, sp, #0
   16dfe:	0002      	movs	r2, r0
   16e00:	1dfb      	adds	r3, r7, #7
   16e02:	701a      	strb	r2, [r3, #0]
	system_interrupt_enter_critical_section();
   16e04:	4b1c      	ldr	r3, [pc, #112]	; (16e78 <system_gclk_chan_disable+0x80>)
   16e06:	4798      	blx	r3

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
   16e08:	4a1c      	ldr	r2, [pc, #112]	; (16e7c <system_gclk_chan_disable+0x84>)
   16e0a:	1dfb      	adds	r3, r7, #7
   16e0c:	781b      	ldrb	r3, [r3, #0]
   16e0e:	7013      	strb	r3, [r2, #0]

	/* Sanity check WRTLOCK */
	Assert(!GCLK->CLKCTRL.bit.WRTLOCK);

	/* Switch to known-working source so that the channel can be disabled */
	uint32_t prev_gen_id = GCLK->CLKCTRL.bit.GEN;
   16e10:	4b1b      	ldr	r3, [pc, #108]	; (16e80 <system_gclk_chan_disable+0x88>)
   16e12:	885b      	ldrh	r3, [r3, #2]
   16e14:	051b      	lsls	r3, r3, #20
   16e16:	0f1b      	lsrs	r3, r3, #28
   16e18:	b2db      	uxtb	r3, r3
   16e1a:	60fb      	str	r3, [r7, #12]
	GCLK->CLKCTRL.bit.GEN = 0;
   16e1c:	4a18      	ldr	r2, [pc, #96]	; (16e80 <system_gclk_chan_disable+0x88>)
   16e1e:	8853      	ldrh	r3, [r2, #2]
   16e20:	4918      	ldr	r1, [pc, #96]	; (16e84 <system_gclk_chan_disable+0x8c>)
   16e22:	400b      	ands	r3, r1
   16e24:	8053      	strh	r3, [r2, #2]

	/* Disable the generic clock */
	GCLK->CLKCTRL.reg &= ~GCLK_CLKCTRL_CLKEN;
   16e26:	4a16      	ldr	r2, [pc, #88]	; (16e80 <system_gclk_chan_disable+0x88>)
   16e28:	4b15      	ldr	r3, [pc, #84]	; (16e80 <system_gclk_chan_disable+0x88>)
   16e2a:	885b      	ldrh	r3, [r3, #2]
   16e2c:	b29b      	uxth	r3, r3
   16e2e:	4916      	ldr	r1, [pc, #88]	; (16e88 <system_gclk_chan_disable+0x90>)
   16e30:	400b      	ands	r3, r1
   16e32:	b29b      	uxth	r3, r3
   16e34:	8053      	strh	r3, [r2, #2]
	while (GCLK->CLKCTRL.reg & GCLK_CLKCTRL_CLKEN) {
   16e36:	46c0      	nop			; (mov r8, r8)
   16e38:	4b11      	ldr	r3, [pc, #68]	; (16e80 <system_gclk_chan_disable+0x88>)
   16e3a:	885b      	ldrh	r3, [r3, #2]
   16e3c:	b29b      	uxth	r3, r3
   16e3e:	001a      	movs	r2, r3
   16e40:	2380      	movs	r3, #128	; 0x80
   16e42:	01db      	lsls	r3, r3, #7
   16e44:	4013      	ands	r3, r2
   16e46:	d1f7      	bne.n	16e38 <system_gclk_chan_disable+0x40>
		/* Wait for clock to become disabled */
	}

	/* Restore previous configured clock generator */
	GCLK->CLKCTRL.bit.GEN = prev_gen_id;
   16e48:	4a0d      	ldr	r2, [pc, #52]	; (16e80 <system_gclk_chan_disable+0x88>)
   16e4a:	68fb      	ldr	r3, [r7, #12]
   16e4c:	b2db      	uxtb	r3, r3
   16e4e:	1c19      	adds	r1, r3, #0
   16e50:	230f      	movs	r3, #15
   16e52:	400b      	ands	r3, r1
   16e54:	b2d9      	uxtb	r1, r3
   16e56:	8853      	ldrh	r3, [r2, #2]
   16e58:	1c08      	adds	r0, r1, #0
   16e5a:	210f      	movs	r1, #15
   16e5c:	4001      	ands	r1, r0
   16e5e:	0208      	lsls	r0, r1, #8
   16e60:	4908      	ldr	r1, [pc, #32]	; (16e84 <system_gclk_chan_disable+0x8c>)
   16e62:	400b      	ands	r3, r1
   16e64:	1c19      	adds	r1, r3, #0
   16e66:	1c03      	adds	r3, r0, #0
   16e68:	430b      	orrs	r3, r1
   16e6a:	8053      	strh	r3, [r2, #2]

	system_interrupt_leave_critical_section();
   16e6c:	4b07      	ldr	r3, [pc, #28]	; (16e8c <system_gclk_chan_disable+0x94>)
   16e6e:	4798      	blx	r3
}
   16e70:	46c0      	nop			; (mov r8, r8)
   16e72:	46bd      	mov	sp, r7
   16e74:	b004      	add	sp, #16
   16e76:	bd80      	pop	{r7, pc}
   16e78:	00016a9d 	.word	0x00016a9d
   16e7c:	40000c02 	.word	0x40000c02
   16e80:	40000c00 	.word	0x40000c00
   16e84:	fffff0ff 	.word	0xfffff0ff
   16e88:	ffffbfff 	.word	0xffffbfff
   16e8c:	00016ab1 	.word	0x00016ab1

00016e90 <system_gclk_chan_get_hz>:
 *
 * \return The frequency of the generic clock channel, in Hz.
 */
uint32_t system_gclk_chan_get_hz(
		const uint8_t channel)
{
   16e90:	b580      	push	{r7, lr}
   16e92:	b084      	sub	sp, #16
   16e94:	af00      	add	r7, sp, #0
   16e96:	0002      	movs	r2, r0
   16e98:	1dfb      	adds	r3, r7, #7
   16e9a:	701a      	strb	r2, [r3, #0]
	uint8_t gen_id;

	system_interrupt_enter_critical_section();
   16e9c:	4b0d      	ldr	r3, [pc, #52]	; (16ed4 <system_gclk_chan_get_hz+0x44>)
   16e9e:	4798      	blx	r3

	/* Select the requested generic clock channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
   16ea0:	4a0d      	ldr	r2, [pc, #52]	; (16ed8 <system_gclk_chan_get_hz+0x48>)
   16ea2:	1dfb      	adds	r3, r7, #7
   16ea4:	781b      	ldrb	r3, [r3, #0]
   16ea6:	7013      	strb	r3, [r2, #0]
	gen_id = GCLK->CLKCTRL.bit.GEN;
   16ea8:	4b0c      	ldr	r3, [pc, #48]	; (16edc <system_gclk_chan_get_hz+0x4c>)
   16eaa:	885b      	ldrh	r3, [r3, #2]
   16eac:	051b      	lsls	r3, r3, #20
   16eae:	0f1b      	lsrs	r3, r3, #28
   16eb0:	b2da      	uxtb	r2, r3
   16eb2:	230f      	movs	r3, #15
   16eb4:	18fb      	adds	r3, r7, r3
   16eb6:	701a      	strb	r2, [r3, #0]

	system_interrupt_leave_critical_section();
   16eb8:	4b09      	ldr	r3, [pc, #36]	; (16ee0 <system_gclk_chan_get_hz+0x50>)
   16eba:	4798      	blx	r3

	/* Return the clock speed of the associated GCLK generator */
	return system_gclk_gen_get_hz(gen_id);
   16ebc:	230f      	movs	r3, #15
   16ebe:	18fb      	adds	r3, r7, r3
   16ec0:	781b      	ldrb	r3, [r3, #0]
   16ec2:	0018      	movs	r0, r3
   16ec4:	4b07      	ldr	r3, [pc, #28]	; (16ee4 <system_gclk_chan_get_hz+0x54>)
   16ec6:	4798      	blx	r3
   16ec8:	0003      	movs	r3, r0
}
   16eca:	0018      	movs	r0, r3
   16ecc:	46bd      	mov	sp, r7
   16ece:	b004      	add	sp, #16
   16ed0:	bd80      	pop	{r7, pc}
   16ed2:	46c0      	nop			; (mov r8, r8)
   16ed4:	00016a9d 	.word	0x00016a9d
   16ed8:	40000c02 	.word	0x40000c02
   16edc:	40000c00 	.word	0x40000c00
   16ee0:	00016ab1 	.word	0x00016ab1
   16ee4:	00016c95 	.word	0x00016c95

00016ee8 <system_interrupt_clear_pending>:
 * \retval STATUS_OK           If no error was detected
 * \retval STATUS_INVALID_ARG  If an unsupported interrupt vector number was given
 */
enum status_code system_interrupt_clear_pending(
		const enum system_interrupt_vector vector)
{
   16ee8:	b580      	push	{r7, lr}
   16eea:	b084      	sub	sp, #16
   16eec:	af00      	add	r7, sp, #0
   16eee:	0002      	movs	r2, r0
   16ef0:	1dfb      	adds	r3, r7, #7
   16ef2:	701a      	strb	r2, [r3, #0]
	enum status_code status = STATUS_OK;
   16ef4:	230f      	movs	r3, #15
   16ef6:	18fb      	adds	r3, r7, r3
   16ef8:	2200      	movs	r2, #0
   16efa:	701a      	strb	r2, [r3, #0]

	if (vector >= _SYSTEM_INTERRUPT_EXTERNAL_VECTOR_START) {
   16efc:	1dfb      	adds	r3, r7, #7
   16efe:	781b      	ldrb	r3, [r3, #0]
   16f00:	2b7f      	cmp	r3, #127	; 0x7f
   16f02:	d80b      	bhi.n	16f1c <system_interrupt_clear_pending+0x34>
		NVIC->ICPR[0] = (1 << vector);
   16f04:	4a13      	ldr	r2, [pc, #76]	; (16f54 <system_interrupt_clear_pending+0x6c>)
   16f06:	1dfb      	adds	r3, r7, #7
   16f08:	781b      	ldrb	r3, [r3, #0]
   16f0a:	b25b      	sxtb	r3, r3
   16f0c:	2101      	movs	r1, #1
   16f0e:	4099      	lsls	r1, r3
   16f10:	000b      	movs	r3, r1
   16f12:	0019      	movs	r1, r3
   16f14:	23c0      	movs	r3, #192	; 0xc0
   16f16:	005b      	lsls	r3, r3, #1
   16f18:	50d1      	str	r1, [r2, r3]
   16f1a:	e014      	b.n	16f46 <system_interrupt_clear_pending+0x5e>
	} else if (vector == SYSTEM_INTERRUPT_NON_MASKABLE) {
   16f1c:	1dfb      	adds	r3, r7, #7
   16f1e:	781b      	ldrb	r3, [r3, #0]
   16f20:	b25b      	sxtb	r3, r3
   16f22:	330e      	adds	r3, #14
   16f24:	d101      	bne.n	16f2a <system_interrupt_clear_pending+0x42>
		/* Note: Clearing of NMI pending interrupts does not make sense and is
		 * not supported by the device, as it has the highest priority and will
		 * always be executed at the moment it is set */
		return STATUS_ERR_INVALID_ARG;
   16f26:	2317      	movs	r3, #23
   16f28:	e010      	b.n	16f4c <system_interrupt_clear_pending+0x64>
	} else if (vector == SYSTEM_INTERRUPT_SYSTICK) {
   16f2a:	1dfb      	adds	r3, r7, #7
   16f2c:	781b      	ldrb	r3, [r3, #0]
   16f2e:	b25b      	sxtb	r3, r3
   16f30:	3301      	adds	r3, #1
   16f32:	d104      	bne.n	16f3e <system_interrupt_clear_pending+0x56>
		SCB->ICSR = SCB_ICSR_PENDSTCLR_Msk;
   16f34:	4b08      	ldr	r3, [pc, #32]	; (16f58 <system_interrupt_clear_pending+0x70>)
   16f36:	2280      	movs	r2, #128	; 0x80
   16f38:	0492      	lsls	r2, r2, #18
   16f3a:	605a      	str	r2, [r3, #4]
   16f3c:	e003      	b.n	16f46 <system_interrupt_clear_pending+0x5e>
	} else {
		Assert(false);
		status = STATUS_ERR_INVALID_ARG;
   16f3e:	230f      	movs	r3, #15
   16f40:	18fb      	adds	r3, r7, r3
   16f42:	2217      	movs	r2, #23
   16f44:	701a      	strb	r2, [r3, #0]
	}

	return status;
   16f46:	230f      	movs	r3, #15
   16f48:	18fb      	adds	r3, r7, r3
   16f4a:	781b      	ldrb	r3, [r3, #0]
}
   16f4c:	0018      	movs	r0, r3
   16f4e:	46bd      	mov	sp, r7
   16f50:	b004      	add	sp, #16
   16f52:	bd80      	pop	{r7, pc}
   16f54:	e000e100 	.word	0xe000e100
   16f58:	e000ed00 	.word	0xe000ed00

00016f5c <system_pinmux_get_group_from_gpio_pin>:
{
   16f5c:	b580      	push	{r7, lr}
   16f5e:	b084      	sub	sp, #16
   16f60:	af00      	add	r7, sp, #0
   16f62:	0002      	movs	r2, r0
   16f64:	1dfb      	adds	r3, r7, #7
   16f66:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
   16f68:	230f      	movs	r3, #15
   16f6a:	18fb      	adds	r3, r7, r3
   16f6c:	1dfa      	adds	r2, r7, #7
   16f6e:	7812      	ldrb	r2, [r2, #0]
   16f70:	09d2      	lsrs	r2, r2, #7
   16f72:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
   16f74:	230e      	movs	r3, #14
   16f76:	18fb      	adds	r3, r7, r3
   16f78:	1dfa      	adds	r2, r7, #7
   16f7a:	7812      	ldrb	r2, [r2, #0]
   16f7c:	0952      	lsrs	r2, r2, #5
   16f7e:	701a      	strb	r2, [r3, #0]
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
   16f80:	4b0d      	ldr	r3, [pc, #52]	; (16fb8 <system_pinmux_get_group_from_gpio_pin+0x5c>)
   16f82:	60bb      	str	r3, [r7, #8]
	if (port_index < PORT_INST_NUM) {
   16f84:	230f      	movs	r3, #15
   16f86:	18fb      	adds	r3, r7, r3
   16f88:	781b      	ldrb	r3, [r3, #0]
   16f8a:	2b00      	cmp	r3, #0
   16f8c:	d10f      	bne.n	16fae <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
   16f8e:	230f      	movs	r3, #15
   16f90:	18fb      	adds	r3, r7, r3
   16f92:	781b      	ldrb	r3, [r3, #0]
   16f94:	009b      	lsls	r3, r3, #2
   16f96:	2210      	movs	r2, #16
   16f98:	4694      	mov	ip, r2
   16f9a:	44bc      	add	ip, r7
   16f9c:	4463      	add	r3, ip
   16f9e:	3b08      	subs	r3, #8
   16fa0:	681a      	ldr	r2, [r3, #0]
   16fa2:	230e      	movs	r3, #14
   16fa4:	18fb      	adds	r3, r7, r3
   16fa6:	781b      	ldrb	r3, [r3, #0]
   16fa8:	01db      	lsls	r3, r3, #7
   16faa:	18d3      	adds	r3, r2, r3
   16fac:	e000      	b.n	16fb0 <system_pinmux_get_group_from_gpio_pin+0x54>
		return NULL;
   16fae:	2300      	movs	r3, #0
}
   16fb0:	0018      	movs	r0, r3
   16fb2:	46bd      	mov	sp, r7
   16fb4:	b004      	add	sp, #16
   16fb6:	bd80      	pop	{r7, pc}
   16fb8:	41004400 	.word	0x41004400

00016fbc <_system_pinmux_config>:
 */
static void _system_pinmux_config(
		PortGroup *const port,
		const uint32_t pin_mask,
		const struct system_pinmux_config *const config)
{
   16fbc:	b580      	push	{r7, lr}
   16fbe:	b088      	sub	sp, #32
   16fc0:	af00      	add	r7, sp, #0
   16fc2:	60f8      	str	r0, [r7, #12]
   16fc4:	60b9      	str	r1, [r7, #8]
   16fc6:	607a      	str	r2, [r7, #4]
	Assert(port);
	Assert(config);

	/* Track the configuration bits into a temporary variable before writing */
	uint32_t pin_cfg = 0;
   16fc8:	2300      	movs	r3, #0
   16fca:	61fb      	str	r3, [r7, #28]

	/* Enabled powersave mode, don't create configuration */
	if (!config->powersave) {
   16fcc:	687b      	ldr	r3, [r7, #4]
   16fce:	78db      	ldrb	r3, [r3, #3]
   16fd0:	2201      	movs	r2, #1
   16fd2:	4053      	eors	r3, r2
   16fd4:	b2db      	uxtb	r3, r3
   16fd6:	2b00      	cmp	r3, #0
   16fd8:	d035      	beq.n	17046 <_system_pinmux_config+0x8a>
		/* Enable the pin peripheral MUX flag if non-GPIO selected (pinmux will
		 * be written later) and store the new MUX mask */
		if (config->mux_position != SYSTEM_PINMUX_GPIO) {
   16fda:	687b      	ldr	r3, [r7, #4]
   16fdc:	781b      	ldrb	r3, [r3, #0]
   16fde:	2b80      	cmp	r3, #128	; 0x80
   16fe0:	d00b      	beq.n	16ffa <_system_pinmux_config+0x3e>
			pin_cfg |= PORT_WRCONFIG_PMUXEN;
   16fe2:	69fb      	ldr	r3, [r7, #28]
   16fe4:	2280      	movs	r2, #128	; 0x80
   16fe6:	0252      	lsls	r2, r2, #9
   16fe8:	4313      	orrs	r3, r2
   16fea:	61fb      	str	r3, [r7, #28]
			pin_cfg |= (config->mux_position << PORT_WRCONFIG_PMUX_Pos);
   16fec:	687b      	ldr	r3, [r7, #4]
   16fee:	781b      	ldrb	r3, [r3, #0]
   16ff0:	061b      	lsls	r3, r3, #24
   16ff2:	001a      	movs	r2, r3
   16ff4:	69fb      	ldr	r3, [r7, #28]
   16ff6:	4313      	orrs	r3, r2
   16ff8:	61fb      	str	r3, [r7, #28]
		}

		/* Check if the user has requested that the input buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
   16ffa:	687b      	ldr	r3, [r7, #4]
   16ffc:	785b      	ldrb	r3, [r3, #1]
   16ffe:	2b00      	cmp	r3, #0
   17000:	d003      	beq.n	1700a <_system_pinmux_config+0x4e>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
   17002:	687b      	ldr	r3, [r7, #4]
   17004:	785b      	ldrb	r3, [r3, #1]
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
   17006:	2b02      	cmp	r3, #2
   17008:	d110      	bne.n	1702c <_system_pinmux_config+0x70>
			/* Enable input buffer flag */
			pin_cfg |= PORT_WRCONFIG_INEN;
   1700a:	69fb      	ldr	r3, [r7, #28]
   1700c:	2280      	movs	r2, #128	; 0x80
   1700e:	0292      	lsls	r2, r2, #10
   17010:	4313      	orrs	r3, r2
   17012:	61fb      	str	r3, [r7, #28]

			/* Enable pull-up/pull-down control flag if requested */
			if (config->input_pull != SYSTEM_PINMUX_PIN_PULL_NONE) {
   17014:	687b      	ldr	r3, [r7, #4]
   17016:	789b      	ldrb	r3, [r3, #2]
   17018:	2b00      	cmp	r3, #0
   1701a:	d004      	beq.n	17026 <_system_pinmux_config+0x6a>
				pin_cfg |= PORT_WRCONFIG_PULLEN;
   1701c:	69fb      	ldr	r3, [r7, #28]
   1701e:	2280      	movs	r2, #128	; 0x80
   17020:	02d2      	lsls	r2, r2, #11
   17022:	4313      	orrs	r3, r2
   17024:	61fb      	str	r3, [r7, #28]
			}

			/* Clear the port DIR bits to disable the output buffer */
			port->DIRCLR.reg = pin_mask;
   17026:	68fb      	ldr	r3, [r7, #12]
   17028:	68ba      	ldr	r2, [r7, #8]
   1702a:	605a      	str	r2, [r3, #4]
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
   1702c:	687b      	ldr	r3, [r7, #4]
   1702e:	785b      	ldrb	r3, [r3, #1]
   17030:	2b01      	cmp	r3, #1
   17032:	d003      	beq.n	1703c <_system_pinmux_config+0x80>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
   17034:	687b      	ldr	r3, [r7, #4]
   17036:	785b      	ldrb	r3, [r3, #1]
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
   17038:	2b02      	cmp	r3, #2
   1703a:	d107      	bne.n	1704c <_system_pinmux_config+0x90>
			/* Cannot use a pull-up if the output driver is enabled,
			 * if requested the input buffer can only sample the current
			 * output state */
			pin_cfg &= ~PORT_WRCONFIG_PULLEN;
   1703c:	69fb      	ldr	r3, [r7, #28]
   1703e:	4a22      	ldr	r2, [pc, #136]	; (170c8 <_system_pinmux_config+0x10c>)
   17040:	4013      	ands	r3, r2
   17042:	61fb      	str	r3, [r7, #28]
   17044:	e002      	b.n	1704c <_system_pinmux_config+0x90>
		}
	} else {
		port->DIRCLR.reg = pin_mask;
   17046:	68fb      	ldr	r3, [r7, #12]
   17048:	68ba      	ldr	r2, [r7, #8]
   1704a:	605a      	str	r2, [r3, #4]
	}

	/* The Write Configuration register (WRCONFIG) requires the
	 * pins to to grouped into two 16-bit half-words - split them out here */
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
   1704c:	68bb      	ldr	r3, [r7, #8]
   1704e:	041b      	lsls	r3, r3, #16
   17050:	0c1b      	lsrs	r3, r3, #16
   17052:	61bb      	str	r3, [r7, #24]
	uint32_t upper_pin_mask = (pin_mask >> 16);
   17054:	68bb      	ldr	r3, [r7, #8]
   17056:	0c1b      	lsrs	r3, r3, #16
   17058:	617b      	str	r3, [r7, #20]

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
   1705a:	69ba      	ldr	r2, [r7, #24]
   1705c:	69fb      	ldr	r3, [r7, #28]
   1705e:	4313      	orrs	r3, r2
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
   17060:	22a0      	movs	r2, #160	; 0xa0
   17062:	05d2      	lsls	r2, r2, #23
   17064:	431a      	orrs	r2, r3
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
   17066:	68fb      	ldr	r3, [r7, #12]
   17068:	629a      	str	r2, [r3, #40]	; 0x28

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
   1706a:	697a      	ldr	r2, [r7, #20]
   1706c:	69fb      	ldr	r3, [r7, #28]
   1706e:	4313      	orrs	r3, r2
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
   17070:	22d0      	movs	r2, #208	; 0xd0
   17072:	0612      	lsls	r2, r2, #24
   17074:	431a      	orrs	r2, r3
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
   17076:	68fb      	ldr	r3, [r7, #12]
   17078:	629a      	str	r2, [r3, #40]	; 0x28
			PORT_WRCONFIG_HWSEL;

	if(!config->powersave) {
   1707a:	687b      	ldr	r3, [r7, #4]
   1707c:	78db      	ldrb	r3, [r3, #3]
   1707e:	2201      	movs	r2, #1
   17080:	4053      	eors	r3, r2
   17082:	b2db      	uxtb	r3, r3
   17084:	2b00      	cmp	r3, #0
   17086:	d01a      	beq.n	170be <_system_pinmux_config+0x102>
		/* Set the pull-up state once the port pins are configured if one was
		 * requested and it does not violate the valid set of port
		 * configurations */
		if (pin_cfg & PORT_WRCONFIG_PULLEN) {
   17088:	69fa      	ldr	r2, [r7, #28]
   1708a:	2380      	movs	r3, #128	; 0x80
   1708c:	02db      	lsls	r3, r3, #11
   1708e:	4013      	ands	r3, r2
   17090:	d00a      	beq.n	170a8 <_system_pinmux_config+0xec>
			/* Set the OUT register bits to enable the pull-up if requested,
			 * clear to enable pull-down */
			if (config->input_pull == SYSTEM_PINMUX_PIN_PULL_UP) {
   17092:	687b      	ldr	r3, [r7, #4]
   17094:	789b      	ldrb	r3, [r3, #2]
   17096:	2b01      	cmp	r3, #1
   17098:	d103      	bne.n	170a2 <_system_pinmux_config+0xe6>
				port->OUTSET.reg = pin_mask;
   1709a:	68fb      	ldr	r3, [r7, #12]
   1709c:	68ba      	ldr	r2, [r7, #8]
   1709e:	619a      	str	r2, [r3, #24]
   170a0:	e002      	b.n	170a8 <_system_pinmux_config+0xec>
			} else {
				port->OUTCLR.reg = pin_mask;
   170a2:	68fb      	ldr	r3, [r7, #12]
   170a4:	68ba      	ldr	r2, [r7, #8]
   170a6:	615a      	str	r2, [r3, #20]
			}
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
   170a8:	687b      	ldr	r3, [r7, #4]
   170aa:	785b      	ldrb	r3, [r3, #1]
   170ac:	2b01      	cmp	r3, #1
   170ae:	d003      	beq.n	170b8 <_system_pinmux_config+0xfc>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
   170b0:	687b      	ldr	r3, [r7, #4]
   170b2:	785b      	ldrb	r3, [r3, #1]
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
   170b4:	2b02      	cmp	r3, #2
   170b6:	d102      	bne.n	170be <_system_pinmux_config+0x102>
			/* Set the port DIR bits to enable the output buffer */
			port->DIRSET.reg = pin_mask;
   170b8:	68fb      	ldr	r3, [r7, #12]
   170ba:	68ba      	ldr	r2, [r7, #8]
   170bc:	609a      	str	r2, [r3, #8]
		}
	}
}
   170be:	46c0      	nop			; (mov r8, r8)
   170c0:	46bd      	mov	sp, r7
   170c2:	b008      	add	sp, #32
   170c4:	bd80      	pop	{r7, pc}
   170c6:	46c0      	nop			; (mov r8, r8)
   170c8:	fffbffff 	.word	0xfffbffff

000170cc <system_pinmux_pin_set_config>:
 * \param[in] config    Configuration settings for the pin
 */
void system_pinmux_pin_set_config(
		const uint8_t gpio_pin,
		const struct system_pinmux_config *const config)
{
   170cc:	b580      	push	{r7, lr}
   170ce:	b084      	sub	sp, #16
   170d0:	af00      	add	r7, sp, #0
   170d2:	0002      	movs	r2, r0
   170d4:	6039      	str	r1, [r7, #0]
   170d6:	1dfb      	adds	r3, r7, #7
   170d8:	701a      	strb	r2, [r3, #0]
	PortGroup *const port = system_pinmux_get_group_from_gpio_pin(gpio_pin);
   170da:	1dfb      	adds	r3, r7, #7
   170dc:	781b      	ldrb	r3, [r3, #0]
   170de:	0018      	movs	r0, r3
   170e0:	4b0a      	ldr	r3, [pc, #40]	; (1710c <system_pinmux_pin_set_config+0x40>)
   170e2:	4798      	blx	r3
   170e4:	0003      	movs	r3, r0
   170e6:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask = (1UL << (gpio_pin % 32));
   170e8:	1dfb      	adds	r3, r7, #7
   170ea:	781b      	ldrb	r3, [r3, #0]
   170ec:	221f      	movs	r2, #31
   170ee:	4013      	ands	r3, r2
   170f0:	2201      	movs	r2, #1
   170f2:	409a      	lsls	r2, r3
   170f4:	0013      	movs	r3, r2
   170f6:	60bb      	str	r3, [r7, #8]

	_system_pinmux_config(port, pin_mask, config);
   170f8:	683a      	ldr	r2, [r7, #0]
   170fa:	68b9      	ldr	r1, [r7, #8]
   170fc:	68fb      	ldr	r3, [r7, #12]
   170fe:	0018      	movs	r0, r3
   17100:	4b03      	ldr	r3, [pc, #12]	; (17110 <system_pinmux_pin_set_config+0x44>)
   17102:	4798      	blx	r3
}
   17104:	46c0      	nop			; (mov r8, r8)
   17106:	46bd      	mov	sp, r7
   17108:	b004      	add	sp, #16
   1710a:	bd80      	pop	{r7, pc}
   1710c:	00016f5d 	.word	0x00016f5d
   17110:	00016fbd 	.word	0x00016fbd

00017114 <_system_dummy_init>:
 * Dummy initialization function, used as a weak alias target for the various
 * init functions called by \ref system_init().
 */
void _system_dummy_init(void);
void _system_dummy_init(void)
{
   17114:	b580      	push	{r7, lr}
   17116:	af00      	add	r7, sp, #0
	return;
   17118:	46c0      	nop			; (mov r8, r8)
}
   1711a:	46bd      	mov	sp, r7
   1711c:	bd80      	pop	{r7, pc}
	...

00017120 <system_init>:
 *  - Board hardware initialization (via the Board module)
 *  - Event system driver initialization (via the EVSYS module)
 *  - External Interrupt driver initialization (via the EXTINT module)
 */
void system_init(void)
{
   17120:	b580      	push	{r7, lr}
   17122:	af00      	add	r7, sp, #0
	/* Configure GCLK and clock sources according to conf_clocks.h */
	system_clock_init();
   17124:	4b06      	ldr	r3, [pc, #24]	; (17140 <system_init+0x20>)
   17126:	4798      	blx	r3

	/* Initialize board hardware */
	system_board_init();
   17128:	4b06      	ldr	r3, [pc, #24]	; (17144 <system_init+0x24>)
   1712a:	4798      	blx	r3

	/* Initialize EVSYS hardware */
	_system_events_init();
   1712c:	4b06      	ldr	r3, [pc, #24]	; (17148 <system_init+0x28>)
   1712e:	4798      	blx	r3

	/* Initialize External hardware */
	_system_extint_init();
   17130:	4b06      	ldr	r3, [pc, #24]	; (1714c <system_init+0x2c>)
   17132:	4798      	blx	r3
	
	/* Initialize DIVAS hardware */
	_system_divas_init();
   17134:	4b06      	ldr	r3, [pc, #24]	; (17150 <system_init+0x30>)
   17136:	4798      	blx	r3
}
   17138:	46c0      	nop			; (mov r8, r8)
   1713a:	46bd      	mov	sp, r7
   1713c:	bd80      	pop	{r7, pc}
   1713e:	46c0      	nop			; (mov r8, r8)
   17140:	000167a1 	.word	0x000167a1
   17144:	00013269 	.word	0x00013269
   17148:	00000669 	.word	0x00000669
   1714c:	00013641 	.word	0x00013641
   17150:	00017115 	.word	0x00017115

00017154 <system_gclk_chan_get_config_defaults>:
{
   17154:	b580      	push	{r7, lr}
   17156:	b082      	sub	sp, #8
   17158:	af00      	add	r7, sp, #0
   1715a:	6078      	str	r0, [r7, #4]
	config->source_generator = GCLK_GENERATOR_0;
   1715c:	687b      	ldr	r3, [r7, #4]
   1715e:	2200      	movs	r2, #0
   17160:	701a      	strb	r2, [r3, #0]
}
   17162:	46c0      	nop			; (mov r8, r8)
   17164:	46bd      	mov	sp, r7
   17166:	b002      	add	sp, #8
   17168:	bd80      	pop	{r7, pc}
	...

0001716c <system_apb_clock_set_mask>:
{
   1716c:	b580      	push	{r7, lr}
   1716e:	b082      	sub	sp, #8
   17170:	af00      	add	r7, sp, #0
   17172:	0002      	movs	r2, r0
   17174:	6039      	str	r1, [r7, #0]
   17176:	1dfb      	adds	r3, r7, #7
   17178:	701a      	strb	r2, [r3, #0]
	switch (bus) {
   1717a:	1dfb      	adds	r3, r7, #7
   1717c:	781b      	ldrb	r3, [r3, #0]
   1717e:	2b01      	cmp	r3, #1
   17180:	d00a      	beq.n	17198 <system_apb_clock_set_mask+0x2c>
   17182:	2b02      	cmp	r3, #2
   17184:	d00f      	beq.n	171a6 <system_apb_clock_set_mask+0x3a>
   17186:	2b00      	cmp	r3, #0
   17188:	d114      	bne.n	171b4 <system_apb_clock_set_mask+0x48>
			PM->APBAMASK.reg |= mask;
   1718a:	4b0e      	ldr	r3, [pc, #56]	; (171c4 <system_apb_clock_set_mask+0x58>)
   1718c:	4a0d      	ldr	r2, [pc, #52]	; (171c4 <system_apb_clock_set_mask+0x58>)
   1718e:	6991      	ldr	r1, [r2, #24]
   17190:	683a      	ldr	r2, [r7, #0]
   17192:	430a      	orrs	r2, r1
   17194:	619a      	str	r2, [r3, #24]
			break;
   17196:	e00f      	b.n	171b8 <system_apb_clock_set_mask+0x4c>
			PM->APBBMASK.reg |= mask;
   17198:	4b0a      	ldr	r3, [pc, #40]	; (171c4 <system_apb_clock_set_mask+0x58>)
   1719a:	4a0a      	ldr	r2, [pc, #40]	; (171c4 <system_apb_clock_set_mask+0x58>)
   1719c:	69d1      	ldr	r1, [r2, #28]
   1719e:	683a      	ldr	r2, [r7, #0]
   171a0:	430a      	orrs	r2, r1
   171a2:	61da      	str	r2, [r3, #28]
			break;
   171a4:	e008      	b.n	171b8 <system_apb_clock_set_mask+0x4c>
			PM->APBCMASK.reg |= mask;
   171a6:	4b07      	ldr	r3, [pc, #28]	; (171c4 <system_apb_clock_set_mask+0x58>)
   171a8:	4a06      	ldr	r2, [pc, #24]	; (171c4 <system_apb_clock_set_mask+0x58>)
   171aa:	6a11      	ldr	r1, [r2, #32]
   171ac:	683a      	ldr	r2, [r7, #0]
   171ae:	430a      	orrs	r2, r1
   171b0:	621a      	str	r2, [r3, #32]
			break;
   171b2:	e001      	b.n	171b8 <system_apb_clock_set_mask+0x4c>
			return STATUS_ERR_INVALID_ARG;
   171b4:	2317      	movs	r3, #23
   171b6:	e000      	b.n	171ba <system_apb_clock_set_mask+0x4e>
	return STATUS_OK;
   171b8:	2300      	movs	r3, #0
}
   171ba:	0018      	movs	r0, r3
   171bc:	46bd      	mov	sp, r7
   171be:	b002      	add	sp, #8
   171c0:	bd80      	pop	{r7, pc}
   171c2:	46c0      	nop			; (mov r8, r8)
   171c4:	40000400 	.word	0x40000400

000171c8 <system_pinmux_get_config_defaults>:
{
   171c8:	b580      	push	{r7, lr}
   171ca:	b082      	sub	sp, #8
   171cc:	af00      	add	r7, sp, #0
   171ce:	6078      	str	r0, [r7, #4]
	config->mux_position = SYSTEM_PINMUX_GPIO;
   171d0:	687b      	ldr	r3, [r7, #4]
   171d2:	2280      	movs	r2, #128	; 0x80
   171d4:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
   171d6:	687b      	ldr	r3, [r7, #4]
   171d8:	2200      	movs	r2, #0
   171da:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
   171dc:	687b      	ldr	r3, [r7, #4]
   171de:	2201      	movs	r2, #1
   171e0:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
   171e2:	687b      	ldr	r3, [r7, #4]
   171e4:	2200      	movs	r2, #0
   171e6:	70da      	strb	r2, [r3, #3]
}
   171e8:	46c0      	nop			; (mov r8, r8)
   171ea:	46bd      	mov	sp, r7
   171ec:	b002      	add	sp, #8
   171ee:	bd80      	pop	{r7, pc}

000171f0 <_tcc_get_inst_index>:
 *
 * \return Index of the given TCC module instance.
 */
uint8_t _tcc_get_inst_index(
		Tcc *const hw)
{
   171f0:	b580      	push	{r7, lr}
   171f2:	b084      	sub	sp, #16
   171f4:	af00      	add	r7, sp, #0
   171f6:	6078      	str	r0, [r7, #4]
	/* Find index for TCC instance. */
	for (uint32_t i = 0; i < TCC_INST_NUM; i++) {
   171f8:	2300      	movs	r3, #0
   171fa:	60fb      	str	r3, [r7, #12]
   171fc:	e00c      	b.n	17218 <_tcc_get_inst_index+0x28>
		if (hw == tcc_modules[i]) {
   171fe:	4b0a      	ldr	r3, [pc, #40]	; (17228 <_tcc_get_inst_index+0x38>)
   17200:	68fa      	ldr	r2, [r7, #12]
   17202:	0092      	lsls	r2, r2, #2
   17204:	58d2      	ldr	r2, [r2, r3]
   17206:	687b      	ldr	r3, [r7, #4]
   17208:	429a      	cmp	r2, r3
   1720a:	d102      	bne.n	17212 <_tcc_get_inst_index+0x22>
			return i;
   1720c:	68fb      	ldr	r3, [r7, #12]
   1720e:	b2db      	uxtb	r3, r3
   17210:	e006      	b.n	17220 <_tcc_get_inst_index+0x30>
	for (uint32_t i = 0; i < TCC_INST_NUM; i++) {
   17212:	68fb      	ldr	r3, [r7, #12]
   17214:	3301      	adds	r3, #1
   17216:	60fb      	str	r3, [r7, #12]
   17218:	68fb      	ldr	r3, [r7, #12]
   1721a:	2b02      	cmp	r3, #2
   1721c:	d9ef      	bls.n	171fe <_tcc_get_inst_index+0xe>
		}
	}

	/* Invalid data given. */
	Assert(false);
	return 0;
   1721e:	2300      	movs	r3, #0
}
   17220:	0018      	movs	r0, r3
   17222:	46bd      	mov	sp, r7
   17224:	b004      	add	sp, #16
   17226:	bd80      	pop	{r7, pc}
   17228:	00026070 	.word	0x00026070

0001722c <tcc_get_config_defaults>:
 *
 */
void tcc_get_config_defaults(
		struct tcc_config *const config,
		Tcc *const hw)
{
   1722c:	b590      	push	{r4, r7, lr}
   1722e:	b085      	sub	sp, #20
   17230:	af00      	add	r7, sp, #0
   17232:	6078      	str	r0, [r7, #4]
   17234:	6039      	str	r1, [r7, #0]
	/* TCC instance index */
	uint8_t module_index = _tcc_get_inst_index(hw);
   17236:	230f      	movs	r3, #15
   17238:	18fc      	adds	r4, r7, r3
   1723a:	683b      	ldr	r3, [r7, #0]
   1723c:	0018      	movs	r0, r3
   1723e:	4bad      	ldr	r3, [pc, #692]	; (174f4 <tcc_get_config_defaults+0x2c8>)
   17240:	4798      	blx	r3
   17242:	0003      	movs	r3, r0
   17244:	7023      	strb	r3, [r4, #0]

	/* Base counter defaults */
	config->counter.count                  = 0;
   17246:	687b      	ldr	r3, [r7, #4]
   17248:	2200      	movs	r2, #0
   1724a:	601a      	str	r2, [r3, #0]

	config->counter.period                 = _tcc_maxs[module_index];
   1724c:	230f      	movs	r3, #15
   1724e:	18fb      	adds	r3, r7, r3
   17250:	781a      	ldrb	r2, [r3, #0]
   17252:	4ba9      	ldr	r3, [pc, #676]	; (174f8 <tcc_get_config_defaults+0x2cc>)
   17254:	0092      	lsls	r2, r2, #2
   17256:	58d2      	ldr	r2, [r2, r3]
   17258:	687b      	ldr	r3, [r7, #4]
   1725a:	605a      	str	r2, [r3, #4]

	config->counter.clock_source           = GCLK_GENERATOR_0;
   1725c:	687b      	ldr	r3, [r7, #4]
   1725e:	2200      	movs	r2, #0
   17260:	729a      	strb	r2, [r3, #10]
	config->counter.clock_prescaler        = TCC_CLOCK_PRESCALER_DIV1;
   17262:	687b      	ldr	r3, [r7, #4]
   17264:	2200      	movs	r2, #0
   17266:	72da      	strb	r2, [r3, #11]
	config->counter.reload_action          = TCC_RELOAD_ACTION_GCLK;
   17268:	687b      	ldr	r3, [r7, #4]
   1726a:	2200      	movs	r2, #0
   1726c:	731a      	strb	r2, [r3, #12]

	config->counter.direction              = TCC_COUNT_DIRECTION_UP;
   1726e:	687b      	ldr	r3, [r7, #4]
   17270:	2200      	movs	r2, #0
   17272:	725a      	strb	r2, [r3, #9]
	config->counter.oneshot                = false;
   17274:	687b      	ldr	r3, [r7, #4]
   17276:	2200      	movs	r2, #0
   17278:	721a      	strb	r2, [r3, #8]
#endif

	/* Match/Capture defaults */
#  define _TCC_CHANNEL_MATCH_VALUE_INIT(n, value) \
		config->compare.match[n] = value;
	MREPEAT(TCC_NUM_CHANNELS,
   1727a:	687b      	ldr	r3, [r7, #4]
   1727c:	2200      	movs	r2, #0
   1727e:	61da      	str	r2, [r3, #28]
   17280:	687b      	ldr	r3, [r7, #4]
   17282:	2200      	movs	r2, #0
   17284:	621a      	str	r2, [r3, #32]
   17286:	687b      	ldr	r3, [r7, #4]
   17288:	2200      	movs	r2, #0
   1728a:	625a      	str	r2, [r3, #36]	; 0x24
   1728c:	687b      	ldr	r3, [r7, #4]
   1728e:	2200      	movs	r2, #0
   17290:	629a      	str	r2, [r3, #40]	; 0x28
#  undef _TCC_CHANNEL_MATCH_VALUE_INIT

	/* Wave polarity defaults */
#  define _TCC_CHANNEL_WAVE_POLARITY_INIT(n, value) \
		config->compare.wave_polarity[n] = value;
	MREPEAT(TCC_NUM_CHANNELS,
   17292:	687b      	ldr	r3, [r7, #4]
   17294:	2200      	movs	r2, #0
   17296:	751a      	strb	r2, [r3, #20]
   17298:	687b      	ldr	r3, [r7, #4]
   1729a:	2200      	movs	r2, #0
   1729c:	755a      	strb	r2, [r3, #21]
   1729e:	687b      	ldr	r3, [r7, #4]
   172a0:	2200      	movs	r2, #0
   172a2:	759a      	strb	r2, [r3, #22]
   172a4:	687b      	ldr	r3, [r7, #4]
   172a6:	2200      	movs	r2, #0
   172a8:	75da      	strb	r2, [r3, #23]
		_TCC_CHANNEL_WAVE_POLARITY_INIT, TCC_WAVE_POLARITY_0)
#  undef _TCC_CHANNEL_WAVE_POLARITY_INIT

	config->compare.wave_generation = TCC_WAVE_GENERATION_NORMAL_FREQ;
   172aa:	687b      	ldr	r3, [r7, #4]
   172ac:	2200      	movs	r2, #0
   172ae:	761a      	strb	r2, [r3, #24]
	config->compare.wave_ramp       = TCC_RAMP_RAMP1;
   172b0:	687b      	ldr	r3, [r7, #4]
   172b2:	2200      	movs	r2, #0
   172b4:	765a      	strb	r2, [r3, #25]

#  define _TCC_CHANNEL_FUNCTION_INIT(n, value) \
		config->compare.channel_function[n] = value;
	MREPEAT(TCC_NUM_CHANNELS,
   172b6:	687b      	ldr	r3, [r7, #4]
   172b8:	2200      	movs	r2, #0
   172ba:	741a      	strb	r2, [r3, #16]
   172bc:	687b      	ldr	r3, [r7, #4]
   172be:	2200      	movs	r2, #0
   172c0:	745a      	strb	r2, [r3, #17]
   172c2:	687b      	ldr	r3, [r7, #4]
   172c4:	2200      	movs	r2, #0
   172c6:	749a      	strb	r2, [r3, #18]
   172c8:	687b      	ldr	r3, [r7, #4]
   172ca:	2200      	movs	r2, #0
   172cc:	74da      	strb	r2, [r3, #19]
		config->wave_ext.recoverable_fault[n].source = TCC_FAULT_SOURCE_DISABLE;           \
		config->wave_ext.recoverable_fault[n].blanking = TCC_FAULT_BLANKING_DISABLE;       \
		config->wave_ext.recoverable_fault[n].halt_action = TCC_FAULT_HALT_ACTION_DISABLE; \
		config->wave_ext.recoverable_fault[n].capture_action = TCC_FAULT_CAPTURE_DISABLE;  \
		config->wave_ext.recoverable_fault[n].capture_channel = TCC_FAULT_CAPTURE_CHANNEL_0;
	MREPEAT(TCC_NUM_FAULTS, _TCC_FAULT_FUNCTION_INIT, 0)
   172ce:	687b      	ldr	r3, [r7, #4]
   172d0:	222c      	movs	r2, #44	; 0x2c
   172d2:	2100      	movs	r1, #0
   172d4:	5499      	strb	r1, [r3, r2]
   172d6:	687b      	ldr	r3, [r7, #4]
   172d8:	222d      	movs	r2, #45	; 0x2d
   172da:	2100      	movs	r1, #0
   172dc:	5499      	strb	r1, [r3, r2]
   172de:	687b      	ldr	r3, [r7, #4]
   172e0:	222e      	movs	r2, #46	; 0x2e
   172e2:	2100      	movs	r1, #0
   172e4:	5499      	strb	r1, [r3, r2]
   172e6:	687b      	ldr	r3, [r7, #4]
   172e8:	222f      	movs	r2, #47	; 0x2f
   172ea:	2100      	movs	r1, #0
   172ec:	5499      	strb	r1, [r3, r2]
   172ee:	687b      	ldr	r3, [r7, #4]
   172f0:	2230      	movs	r2, #48	; 0x30
   172f2:	2100      	movs	r1, #0
   172f4:	5499      	strb	r1, [r3, r2]
   172f6:	687b      	ldr	r3, [r7, #4]
   172f8:	2231      	movs	r2, #49	; 0x31
   172fa:	2100      	movs	r1, #0
   172fc:	5499      	strb	r1, [r3, r2]
   172fe:	687b      	ldr	r3, [r7, #4]
   17300:	2232      	movs	r2, #50	; 0x32
   17302:	2100      	movs	r1, #0
   17304:	5499      	strb	r1, [r3, r2]
   17306:	687b      	ldr	r3, [r7, #4]
   17308:	2233      	movs	r2, #51	; 0x33
   1730a:	2100      	movs	r1, #0
   1730c:	5499      	strb	r1, [r3, r2]
   1730e:	687b      	ldr	r3, [r7, #4]
   17310:	2234      	movs	r2, #52	; 0x34
   17312:	2100      	movs	r1, #0
   17314:	5499      	strb	r1, [r3, r2]
   17316:	687b      	ldr	r3, [r7, #4]
   17318:	2235      	movs	r2, #53	; 0x35
   1731a:	2100      	movs	r1, #0
   1731c:	5499      	strb	r1, [r3, r2]
   1731e:	687b      	ldr	r3, [r7, #4]
   17320:	2236      	movs	r2, #54	; 0x36
   17322:	2100      	movs	r1, #0
   17324:	5499      	strb	r1, [r3, r2]
   17326:	687b      	ldr	r3, [r7, #4]
   17328:	2237      	movs	r2, #55	; 0x37
   1732a:	2100      	movs	r1, #0
   1732c:	5499      	strb	r1, [r3, r2]
   1732e:	687b      	ldr	r3, [r7, #4]
   17330:	2238      	movs	r2, #56	; 0x38
   17332:	2100      	movs	r1, #0
   17334:	5499      	strb	r1, [r3, r2]
   17336:	687b      	ldr	r3, [r7, #4]
   17338:	2239      	movs	r2, #57	; 0x39
   1733a:	2100      	movs	r1, #0
   1733c:	5499      	strb	r1, [r3, r2]
   1733e:	687b      	ldr	r3, [r7, #4]
   17340:	223a      	movs	r2, #58	; 0x3a
   17342:	2100      	movs	r1, #0
   17344:	5499      	strb	r1, [r3, r2]
   17346:	687b      	ldr	r3, [r7, #4]
   17348:	223b      	movs	r2, #59	; 0x3b
   1734a:	2100      	movs	r1, #0
   1734c:	5499      	strb	r1, [r3, r2]
   1734e:	687b      	ldr	r3, [r7, #4]
   17350:	223c      	movs	r2, #60	; 0x3c
   17352:	2100      	movs	r1, #0
   17354:	5499      	strb	r1, [r3, r2]
   17356:	687b      	ldr	r3, [r7, #4]
   17358:	223d      	movs	r2, #61	; 0x3d
   1735a:	2100      	movs	r1, #0
   1735c:	5499      	strb	r1, [r3, r2]
   1735e:	687b      	ldr	r3, [r7, #4]
   17360:	223e      	movs	r2, #62	; 0x3e
   17362:	2100      	movs	r1, #0
   17364:	5499      	strb	r1, [r3, r2]
   17366:	687b      	ldr	r3, [r7, #4]
   17368:	223f      	movs	r2, #63	; 0x3f
   1736a:	2100      	movs	r1, #0
   1736c:	5499      	strb	r1, [r3, r2]

	/* Non-recoverable fault defaults */
#  define _TCC_NRF_FUNCTION_INIT(n, dummy) \
		config->wave_ext.non_recoverable_fault[n].filter_value = 0; \
		config->wave_ext.non_recoverable_fault[n].output = TCC_FAULT_STATE_OUTPUT_OFF;
	MREPEAT(TCC_NUM_WAVE_OUTPUTS, _TCC_NRF_FUNCTION_INIT, 0)
   1736e:	687b      	ldr	r3, [r7, #4]
   17370:	2240      	movs	r2, #64	; 0x40
   17372:	2100      	movs	r1, #0
   17374:	5499      	strb	r1, [r3, r2]
   17376:	687b      	ldr	r3, [r7, #4]
   17378:	2241      	movs	r2, #65	; 0x41
   1737a:	2100      	movs	r1, #0
   1737c:	5499      	strb	r1, [r3, r2]
   1737e:	687b      	ldr	r3, [r7, #4]
   17380:	2242      	movs	r2, #66	; 0x42
   17382:	2100      	movs	r1, #0
   17384:	5499      	strb	r1, [r3, r2]
   17386:	687b      	ldr	r3, [r7, #4]
   17388:	2243      	movs	r2, #67	; 0x43
   1738a:	2100      	movs	r1, #0
   1738c:	5499      	strb	r1, [r3, r2]
   1738e:	687b      	ldr	r3, [r7, #4]
   17390:	2244      	movs	r2, #68	; 0x44
   17392:	2100      	movs	r1, #0
   17394:	5499      	strb	r1, [r3, r2]
   17396:	687b      	ldr	r3, [r7, #4]
   17398:	2245      	movs	r2, #69	; 0x45
   1739a:	2100      	movs	r1, #0
   1739c:	5499      	strb	r1, [r3, r2]
   1739e:	687b      	ldr	r3, [r7, #4]
   173a0:	2246      	movs	r2, #70	; 0x46
   173a2:	2100      	movs	r1, #0
   173a4:	5499      	strb	r1, [r3, r2]
   173a6:	687b      	ldr	r3, [r7, #4]
   173a8:	2247      	movs	r2, #71	; 0x47
   173aa:	2100      	movs	r1, #0
   173ac:	5499      	strb	r1, [r3, r2]
   173ae:	687b      	ldr	r3, [r7, #4]
   173b0:	2248      	movs	r2, #72	; 0x48
   173b2:	2100      	movs	r1, #0
   173b4:	5499      	strb	r1, [r3, r2]
   173b6:	687b      	ldr	r3, [r7, #4]
   173b8:	2249      	movs	r2, #73	; 0x49
   173ba:	2100      	movs	r1, #0
   173bc:	5499      	strb	r1, [r3, r2]
   173be:	687b      	ldr	r3, [r7, #4]
   173c0:	224a      	movs	r2, #74	; 0x4a
   173c2:	2100      	movs	r1, #0
   173c4:	5499      	strb	r1, [r3, r2]
   173c6:	687b      	ldr	r3, [r7, #4]
   173c8:	224b      	movs	r2, #75	; 0x4b
   173ca:	2100      	movs	r1, #0
   173cc:	5499      	strb	r1, [r3, r2]
   173ce:	687b      	ldr	r3, [r7, #4]
   173d0:	224c      	movs	r2, #76	; 0x4c
   173d2:	2100      	movs	r1, #0
   173d4:	5499      	strb	r1, [r3, r2]
   173d6:	687b      	ldr	r3, [r7, #4]
   173d8:	224d      	movs	r2, #77	; 0x4d
   173da:	2100      	movs	r1, #0
   173dc:	5499      	strb	r1, [r3, r2]
   173de:	687b      	ldr	r3, [r7, #4]
   173e0:	224e      	movs	r2, #78	; 0x4e
   173e2:	2100      	movs	r1, #0
   173e4:	5499      	strb	r1, [r3, r2]
   173e6:	687b      	ldr	r3, [r7, #4]
   173e8:	224f      	movs	r2, #79	; 0x4f
   173ea:	2100      	movs	r1, #0
   173ec:	5499      	strb	r1, [r3, r2]
#  undef _TCC_NRF_FUNCTION_INIT

	/* Output inversion defaults */
#  define _TCC_OUT_INVERT_INIT(n, value) \
		config->wave_ext.invert[n] = value;
	MREPEAT(TCC_NUM_WAVE_OUTPUTS, _TCC_OUT_INVERT_INIT, false)
   173ee:	687b      	ldr	r3, [r7, #4]
   173f0:	2250      	movs	r2, #80	; 0x50
   173f2:	2100      	movs	r1, #0
   173f4:	5499      	strb	r1, [r3, r2]
   173f6:	687b      	ldr	r3, [r7, #4]
   173f8:	2251      	movs	r2, #81	; 0x51
   173fa:	2100      	movs	r1, #0
   173fc:	5499      	strb	r1, [r3, r2]
   173fe:	687b      	ldr	r3, [r7, #4]
   17400:	2252      	movs	r2, #82	; 0x52
   17402:	2100      	movs	r1, #0
   17404:	5499      	strb	r1, [r3, r2]
   17406:	687b      	ldr	r3, [r7, #4]
   17408:	2253      	movs	r2, #83	; 0x53
   1740a:	2100      	movs	r1, #0
   1740c:	5499      	strb	r1, [r3, r2]
   1740e:	687b      	ldr	r3, [r7, #4]
   17410:	2254      	movs	r2, #84	; 0x54
   17412:	2100      	movs	r1, #0
   17414:	5499      	strb	r1, [r3, r2]
   17416:	687b      	ldr	r3, [r7, #4]
   17418:	2255      	movs	r2, #85	; 0x55
   1741a:	2100      	movs	r1, #0
   1741c:	5499      	strb	r1, [r3, r2]
   1741e:	687b      	ldr	r3, [r7, #4]
   17420:	2256      	movs	r2, #86	; 0x56
   17422:	2100      	movs	r1, #0
   17424:	5499      	strb	r1, [r3, r2]
   17426:	687b      	ldr	r3, [r7, #4]
   17428:	2257      	movs	r2, #87	; 0x57
   1742a:	2100      	movs	r1, #0
   1742c:	5499      	strb	r1, [r3, r2]

#  define _TCC_CHANNEL_OUT_PIN_INIT(n, dummy) \
		config->pins.enable_wave_out_pin[n]                = false;\
		config->pins.wave_out_pin[TCC_WAVE_OUTPUT_##n]     = 0;    \
		config->pins.wave_out_pin_mux[TCC_WAVE_OUTPUT_##n] = 0;
	MREPEAT(TCC_NUM_WAVE_OUTPUTS, _TCC_CHANNEL_OUT_PIN_INIT, 0)
   1742e:	687b      	ldr	r3, [r7, #4]
   17430:	2298      	movs	r2, #152	; 0x98
   17432:	2100      	movs	r1, #0
   17434:	5499      	strb	r1, [r3, r2]
   17436:	687b      	ldr	r3, [r7, #4]
   17438:	2200      	movs	r2, #0
   1743a:	659a      	str	r2, [r3, #88]	; 0x58
   1743c:	687b      	ldr	r3, [r7, #4]
   1743e:	2200      	movs	r2, #0
   17440:	679a      	str	r2, [r3, #120]	; 0x78
   17442:	687b      	ldr	r3, [r7, #4]
   17444:	2299      	movs	r2, #153	; 0x99
   17446:	2100      	movs	r1, #0
   17448:	5499      	strb	r1, [r3, r2]
   1744a:	687b      	ldr	r3, [r7, #4]
   1744c:	2200      	movs	r2, #0
   1744e:	65da      	str	r2, [r3, #92]	; 0x5c
   17450:	687b      	ldr	r3, [r7, #4]
   17452:	2200      	movs	r2, #0
   17454:	67da      	str	r2, [r3, #124]	; 0x7c
   17456:	687b      	ldr	r3, [r7, #4]
   17458:	229a      	movs	r2, #154	; 0x9a
   1745a:	2100      	movs	r1, #0
   1745c:	5499      	strb	r1, [r3, r2]
   1745e:	687b      	ldr	r3, [r7, #4]
   17460:	2200      	movs	r2, #0
   17462:	661a      	str	r2, [r3, #96]	; 0x60
   17464:	687b      	ldr	r3, [r7, #4]
   17466:	2280      	movs	r2, #128	; 0x80
   17468:	2100      	movs	r1, #0
   1746a:	5099      	str	r1, [r3, r2]
   1746c:	687b      	ldr	r3, [r7, #4]
   1746e:	229b      	movs	r2, #155	; 0x9b
   17470:	2100      	movs	r1, #0
   17472:	5499      	strb	r1, [r3, r2]
   17474:	687b      	ldr	r3, [r7, #4]
   17476:	2200      	movs	r2, #0
   17478:	665a      	str	r2, [r3, #100]	; 0x64
   1747a:	687b      	ldr	r3, [r7, #4]
   1747c:	2284      	movs	r2, #132	; 0x84
   1747e:	2100      	movs	r1, #0
   17480:	5099      	str	r1, [r3, r2]
   17482:	687b      	ldr	r3, [r7, #4]
   17484:	229c      	movs	r2, #156	; 0x9c
   17486:	2100      	movs	r1, #0
   17488:	5499      	strb	r1, [r3, r2]
   1748a:	687b      	ldr	r3, [r7, #4]
   1748c:	2200      	movs	r2, #0
   1748e:	669a      	str	r2, [r3, #104]	; 0x68
   17490:	687b      	ldr	r3, [r7, #4]
   17492:	2288      	movs	r2, #136	; 0x88
   17494:	2100      	movs	r1, #0
   17496:	5099      	str	r1, [r3, r2]
   17498:	687b      	ldr	r3, [r7, #4]
   1749a:	229d      	movs	r2, #157	; 0x9d
   1749c:	2100      	movs	r1, #0
   1749e:	5499      	strb	r1, [r3, r2]
   174a0:	687b      	ldr	r3, [r7, #4]
   174a2:	2200      	movs	r2, #0
   174a4:	66da      	str	r2, [r3, #108]	; 0x6c
   174a6:	687b      	ldr	r3, [r7, #4]
   174a8:	228c      	movs	r2, #140	; 0x8c
   174aa:	2100      	movs	r1, #0
   174ac:	5099      	str	r1, [r3, r2]
   174ae:	687b      	ldr	r3, [r7, #4]
   174b0:	229e      	movs	r2, #158	; 0x9e
   174b2:	2100      	movs	r1, #0
   174b4:	5499      	strb	r1, [r3, r2]
   174b6:	687b      	ldr	r3, [r7, #4]
   174b8:	2200      	movs	r2, #0
   174ba:	671a      	str	r2, [r3, #112]	; 0x70
   174bc:	687b      	ldr	r3, [r7, #4]
   174be:	2290      	movs	r2, #144	; 0x90
   174c0:	2100      	movs	r1, #0
   174c2:	5099      	str	r1, [r3, r2]
   174c4:	687b      	ldr	r3, [r7, #4]
   174c6:	229f      	movs	r2, #159	; 0x9f
   174c8:	2100      	movs	r1, #0
   174ca:	5499      	strb	r1, [r3, r2]
   174cc:	687b      	ldr	r3, [r7, #4]
   174ce:	2200      	movs	r2, #0
   174d0:	675a      	str	r2, [r3, #116]	; 0x74
   174d2:	687b      	ldr	r3, [r7, #4]
   174d4:	2294      	movs	r2, #148	; 0x94
   174d6:	2100      	movs	r1, #0
   174d8:	5099      	str	r1, [r3, r2]
#  undef _TCC_CHANNEL_OUT_PIN_INIT

	config->double_buffering_enabled  = true;
   174da:	687b      	ldr	r3, [r7, #4]
   174dc:	22a0      	movs	r2, #160	; 0xa0
   174de:	2101      	movs	r1, #1
   174e0:	5499      	strb	r1, [r3, r2]
	config->run_in_standby            = false;
   174e2:	687b      	ldr	r3, [r7, #4]
   174e4:	22a1      	movs	r2, #161	; 0xa1
   174e6:	2100      	movs	r1, #0
   174e8:	5499      	strb	r1, [r3, r2]
}
   174ea:	46c0      	nop			; (mov r8, r8)
   174ec:	46bd      	mov	sp, r7
   174ee:	b005      	add	sp, #20
   174f0:	bd90      	pop	{r4, r7, pc}
   174f2:	46c0      	nop			; (mov r8, r8)
   174f4:	000171f1 	.word	0x000171f1
   174f8:	0002608c 	.word	0x0002608c

000174fc <_tcc_build_ctrla>:
 */
static inline enum status_code _tcc_build_ctrla(
		const uint8_t module_index,
		const struct tcc_config *const config,
		uint32_t *value_buffer)
{
   174fc:	b580      	push	{r7, lr}
   174fe:	b086      	sub	sp, #24
   17500:	af00      	add	r7, sp, #0
   17502:	60b9      	str	r1, [r7, #8]
   17504:	607a      	str	r2, [r7, #4]
   17506:	230f      	movs	r3, #15
   17508:	18fb      	adds	r3, r7, r3
   1750a:	1c02      	adds	r2, r0, #0
   1750c:	701a      	strb	r2, [r3, #0]
	uint32_t ctrla = 0;
   1750e:	2300      	movs	r3, #0
   17510:	617b      	str	r3, [r7, #20]

	int i;
	for (i = 0; i < TCC_NUM_CHANNELS; i ++) {
   17512:	2300      	movs	r3, #0
   17514:	613b      	str	r3, [r7, #16]
   17516:	e01d      	b.n	17554 <_tcc_build_ctrla+0x58>
		if (config->capture.channel_function[i] ==
   17518:	68ba      	ldr	r2, [r7, #8]
   1751a:	693b      	ldr	r3, [r7, #16]
   1751c:	18d3      	adds	r3, r2, r3
   1751e:	3310      	adds	r3, #16
   17520:	781b      	ldrb	r3, [r3, #0]
   17522:	2b01      	cmp	r3, #1
   17524:	d113      	bne.n	1754e <_tcc_build_ctrla+0x52>
			TCC_CHANNEL_FUNCTION_CAPTURE) {

			if (i > _tcc_cc_nums[module_index]) {
   17526:	230f      	movs	r3, #15
   17528:	18fb      	adds	r3, r7, r3
   1752a:	781b      	ldrb	r3, [r3, #0]
   1752c:	4a1b      	ldr	r2, [pc, #108]	; (1759c <_tcc_build_ctrla+0xa0>)
   1752e:	5cd3      	ldrb	r3, [r2, r3]
   17530:	001a      	movs	r2, r3
   17532:	693b      	ldr	r3, [r7, #16]
   17534:	429a      	cmp	r2, r3
   17536:	da01      	bge.n	1753c <_tcc_build_ctrla+0x40>
				/* Channel not supported */
				return STATUS_ERR_INVALID_ARG;
   17538:	2317      	movs	r3, #23
   1753a:	e02a      	b.n	17592 <_tcc_build_ctrla+0x96>
			}
			ctrla |= (TCC_CTRLA_CPTEN0 << i);
   1753c:	2380      	movs	r3, #128	; 0x80
   1753e:	045a      	lsls	r2, r3, #17
   17540:	693b      	ldr	r3, [r7, #16]
   17542:	409a      	lsls	r2, r3
   17544:	0013      	movs	r3, r2
   17546:	001a      	movs	r2, r3
   17548:	697b      	ldr	r3, [r7, #20]
   1754a:	4313      	orrs	r3, r2
   1754c:	617b      	str	r3, [r7, #20]
	for (i = 0; i < TCC_NUM_CHANNELS; i ++) {
   1754e:	693b      	ldr	r3, [r7, #16]
   17550:	3301      	adds	r3, #1
   17552:	613b      	str	r3, [r7, #16]
   17554:	693b      	ldr	r3, [r7, #16]
   17556:	2b03      	cmp	r3, #3
   17558:	ddde      	ble.n	17518 <_tcc_build_ctrla+0x1c>
		}
	}

	if (config->run_in_standby) {
   1755a:	68bb      	ldr	r3, [r7, #8]
   1755c:	22a1      	movs	r2, #161	; 0xa1
   1755e:	5c9b      	ldrb	r3, [r3, r2]
   17560:	2b00      	cmp	r3, #0
   17562:	d004      	beq.n	1756e <_tcc_build_ctrla+0x72>
		ctrla |= TCC_CTRLA_RUNSTDBY;
   17564:	697b      	ldr	r3, [r7, #20]
   17566:	2280      	movs	r2, #128	; 0x80
   17568:	0112      	lsls	r2, r2, #4
   1756a:	4313      	orrs	r3, r2
   1756c:	617b      	str	r3, [r7, #20]
	}
	ctrla |= config->counter.reload_action << TCC_CTRLA_PRESCSYNC_Pos;
   1756e:	68bb      	ldr	r3, [r7, #8]
   17570:	7b1b      	ldrb	r3, [r3, #12]
   17572:	031b      	lsls	r3, r3, #12
   17574:	001a      	movs	r2, r3
   17576:	697b      	ldr	r3, [r7, #20]
   17578:	4313      	orrs	r3, r2
   1757a:	617b      	str	r3, [r7, #20]
	ctrla |= config->counter.clock_prescaler << TCC_CTRLA_PRESCALER_Pos;
   1757c:	68bb      	ldr	r3, [r7, #8]
   1757e:	7adb      	ldrb	r3, [r3, #11]
   17580:	021b      	lsls	r3, r3, #8
   17582:	001a      	movs	r2, r3
   17584:	697b      	ldr	r3, [r7, #20]
   17586:	4313      	orrs	r3, r2
   17588:	617b      	str	r3, [r7, #20]

	*value_buffer = ctrla;
   1758a:	687b      	ldr	r3, [r7, #4]
   1758c:	697a      	ldr	r2, [r7, #20]
   1758e:	601a      	str	r2, [r3, #0]
	return STATUS_OK;
   17590:	2300      	movs	r3, #0
}
   17592:	0018      	movs	r0, r3
   17594:	46bd      	mov	sp, r7
   17596:	b006      	add	sp, #24
   17598:	bd80      	pop	{r7, pc}
   1759a:	46c0      	nop			; (mov r8, r8)
   1759c:	00026098 	.word	0x00026098

000175a0 <_tcc_build_ctrlb>:
 */
static inline void _tcc_build_ctrlb(
		const uint8_t module_index,
		const struct tcc_config *const config,
		uint8_t *value_buffer)
{
   175a0:	b580      	push	{r7, lr}
   175a2:	b086      	sub	sp, #24
   175a4:	af00      	add	r7, sp, #0
   175a6:	60b9      	str	r1, [r7, #8]
   175a8:	607a      	str	r2, [r7, #4]
   175aa:	230f      	movs	r3, #15
   175ac:	18fb      	adds	r3, r7, r3
   175ae:	1c02      	adds	r2, r0, #0
   175b0:	701a      	strb	r2, [r3, #0]
	uint8_t ctrlb = 0;
   175b2:	2317      	movs	r3, #23
   175b4:	18fb      	adds	r3, r7, r3
   175b6:	2200      	movs	r2, #0
   175b8:	701a      	strb	r2, [r3, #0]

	if (config->counter.oneshot) {
   175ba:	68bb      	ldr	r3, [r7, #8]
   175bc:	7a1b      	ldrb	r3, [r3, #8]
   175be:	2b00      	cmp	r3, #0
   175c0:	d007      	beq.n	175d2 <_tcc_build_ctrlb+0x32>
		ctrlb |= TCC_CTRLBSET_ONESHOT;
   175c2:	2317      	movs	r3, #23
   175c4:	18fb      	adds	r3, r7, r3
   175c6:	2217      	movs	r2, #23
   175c8:	18ba      	adds	r2, r7, r2
   175ca:	7812      	ldrb	r2, [r2, #0]
   175cc:	2104      	movs	r1, #4
   175ce:	430a      	orrs	r2, r1
   175d0:	701a      	strb	r2, [r3, #0]
	}
	if (config->counter.direction == TCC_COUNT_DIRECTION_DOWN) {
   175d2:	68bb      	ldr	r3, [r7, #8]
   175d4:	7a5b      	ldrb	r3, [r3, #9]
   175d6:	2b01      	cmp	r3, #1
   175d8:	d107      	bne.n	175ea <_tcc_build_ctrlb+0x4a>
		ctrlb |= TCC_CTRLBSET_DIR;
   175da:	2317      	movs	r3, #23
   175dc:	18fb      	adds	r3, r7, r3
   175de:	2217      	movs	r2, #23
   175e0:	18ba      	adds	r2, r7, r2
   175e2:	7812      	ldrb	r2, [r2, #0]
   175e4:	2101      	movs	r1, #1
   175e6:	430a      	orrs	r2, r1
   175e8:	701a      	strb	r2, [r3, #0]
	}

	*value_buffer = ctrlb;
   175ea:	687b      	ldr	r3, [r7, #4]
   175ec:	2217      	movs	r2, #23
   175ee:	18ba      	adds	r2, r7, r2
   175f0:	7812      	ldrb	r2, [r2, #0]
   175f2:	701a      	strb	r2, [r3, #0]
}
   175f4:	46c0      	nop			; (mov r8, r8)
   175f6:	46bd      	mov	sp, r7
   175f8:	b006      	add	sp, #24
   175fa:	bd80      	pop	{r7, pc}

000175fc <_tcc_build_faults>:
 */
static inline enum status_code _tcc_build_faults(
		const uint8_t module_index,
		const struct tcc_config *const config,
		uint32_t *value_buffer)
{
   175fc:	b580      	push	{r7, lr}
   175fe:	b088      	sub	sp, #32
   17600:	af00      	add	r7, sp, #0
   17602:	60b9      	str	r1, [r7, #8]
   17604:	607a      	str	r2, [r7, #4]
   17606:	230f      	movs	r3, #15
   17608:	18fb      	adds	r3, r7, r3
   1760a:	1c02      	adds	r2, r0, #0
   1760c:	701a      	strb	r2, [r3, #0]
	struct tcc_recoverable_fault_config *cfg;
	uint8_t cc_num = _tcc_cc_nums[module_index];
   1760e:	230f      	movs	r3, #15
   17610:	18fb      	adds	r3, r7, r3
   17612:	781a      	ldrb	r2, [r3, #0]
   17614:	231b      	movs	r3, #27
   17616:	18fb      	adds	r3, r7, r3
   17618:	493e      	ldr	r1, [pc, #248]	; (17714 <_tcc_build_faults+0x118>)
   1761a:	5c8a      	ldrb	r2, [r1, r2]
   1761c:	701a      	strb	r2, [r3, #0]
	uint32_t fault;
	int i;
	for (i = 0; i < TCC_NUM_FAULTS; i ++) {
   1761e:	2300      	movs	r3, #0
   17620:	61fb      	str	r3, [r7, #28]
   17622:	e06e      	b.n	17702 <_tcc_build_faults+0x106>
		cfg = (struct tcc_recoverable_fault_config *)
   17624:	69fa      	ldr	r2, [r7, #28]
   17626:	0013      	movs	r3, r2
   17628:	009b      	lsls	r3, r3, #2
   1762a:	189b      	adds	r3, r3, r2
   1762c:	005b      	lsls	r3, r3, #1
   1762e:	3328      	adds	r3, #40	; 0x28
   17630:	68ba      	ldr	r2, [r7, #8]
   17632:	18d3      	adds	r3, r2, r3
   17634:	3304      	adds	r3, #4
   17636:	617b      	str	r3, [r7, #20]
				&config->wave_ext.recoverable_fault[i];
		if (cfg->capture_channel >= cc_num) {
   17638:	697b      	ldr	r3, [r7, #20]
   1763a:	7a5b      	ldrb	r3, [r3, #9]
   1763c:	221b      	movs	r2, #27
   1763e:	18ba      	adds	r2, r7, r2
   17640:	7812      	ldrb	r2, [r2, #0]
   17642:	429a      	cmp	r2, r3
   17644:	d801      	bhi.n	1764a <_tcc_build_faults+0x4e>
			return STATUS_ERR_INVALID_ARG;
   17646:	2317      	movs	r3, #23
   17648:	e05f      	b.n	1770a <_tcc_build_faults+0x10e>
		}
		if (cfg->filter_value > 0xF) {
   1764a:	697b      	ldr	r3, [r7, #20]
   1764c:	781b      	ldrb	r3, [r3, #0]
   1764e:	2b0f      	cmp	r3, #15
   17650:	d901      	bls.n	17656 <_tcc_build_faults+0x5a>
			return STATUS_ERR_INVALID_ARG;
   17652:	2317      	movs	r3, #23
   17654:	e059      	b.n	1770a <_tcc_build_faults+0x10e>
		}
		fault = TCC_FCTRLA_FILTERVAL(cfg->filter_value)
   17656:	697b      	ldr	r3, [r7, #20]
   17658:	781b      	ldrb	r3, [r3, #0]
   1765a:	061b      	lsls	r3, r3, #24
   1765c:	001a      	movs	r2, r3
   1765e:	23f0      	movs	r3, #240	; 0xf0
   17660:	051b      	lsls	r3, r3, #20
   17662:	401a      	ands	r2, r3
				| TCC_FCTRLA_BLANKVAL(cfg->blanking_cycles)
   17664:	697b      	ldr	r3, [r7, #20]
   17666:	785b      	ldrb	r3, [r3, #1]
   17668:	041b      	lsls	r3, r3, #16
   1766a:	0019      	movs	r1, r3
   1766c:	23ff      	movs	r3, #255	; 0xff
   1766e:	041b      	lsls	r3, r3, #16
   17670:	400b      	ands	r3, r1
   17672:	431a      	orrs	r2, r3
				| (cfg->restart ? TCC_FCTRLA_RESTART : 0)
   17674:	697b      	ldr	r3, [r7, #20]
   17676:	789b      	ldrb	r3, [r3, #2]
   17678:	2b00      	cmp	r3, #0
   1767a:	d001      	beq.n	17680 <_tcc_build_faults+0x84>
   1767c:	2380      	movs	r3, #128	; 0x80
   1767e:	e000      	b.n	17682 <_tcc_build_faults+0x86>
   17680:	2300      	movs	r3, #0
   17682:	431a      	orrs	r2, r3
				| (cfg->keep ? TCC_FCTRLA_KEEP : 0)
   17684:	697b      	ldr	r3, [r7, #20]
   17686:	78db      	ldrb	r3, [r3, #3]
   17688:	2b00      	cmp	r3, #0
   1768a:	d001      	beq.n	17690 <_tcc_build_faults+0x94>
   1768c:	2308      	movs	r3, #8
   1768e:	e000      	b.n	17692 <_tcc_build_faults+0x96>
   17690:	2300      	movs	r3, #0
   17692:	431a      	orrs	r2, r3
				| (cfg->qualification ? TCC_FCTRLA_QUAL : 0)
   17694:	697b      	ldr	r3, [r7, #20]
   17696:	791b      	ldrb	r3, [r3, #4]
   17698:	2b00      	cmp	r3, #0
   1769a:	d001      	beq.n	176a0 <_tcc_build_faults+0xa4>
   1769c:	2310      	movs	r3, #16
   1769e:	e000      	b.n	176a2 <_tcc_build_faults+0xa6>
   176a0:	2300      	movs	r3, #0
   176a2:	431a      	orrs	r2, r3
				| TCC_FCTRLA_SRC(cfg->source)
   176a4:	697b      	ldr	r3, [r7, #20]
   176a6:	795b      	ldrb	r3, [r3, #5]
   176a8:	0019      	movs	r1, r3
   176aa:	2303      	movs	r3, #3
   176ac:	400b      	ands	r3, r1
   176ae:	431a      	orrs	r2, r3
				| TCC_FCTRLA_BLANK(cfg->blanking)
   176b0:	697b      	ldr	r3, [r7, #20]
   176b2:	799b      	ldrb	r3, [r3, #6]
   176b4:	015b      	lsls	r3, r3, #5
   176b6:	0019      	movs	r1, r3
   176b8:	2360      	movs	r3, #96	; 0x60
   176ba:	400b      	ands	r3, r1
   176bc:	431a      	orrs	r2, r3
				| TCC_FCTRLA_HALT(cfg->halt_action)
   176be:	697b      	ldr	r3, [r7, #20]
   176c0:	79db      	ldrb	r3, [r3, #7]
   176c2:	021b      	lsls	r3, r3, #8
   176c4:	0019      	movs	r1, r3
   176c6:	23c0      	movs	r3, #192	; 0xc0
   176c8:	009b      	lsls	r3, r3, #2
   176ca:	400b      	ands	r3, r1
   176cc:	431a      	orrs	r2, r3
				| TCC_FCTRLA_CAPTURE(cfg->capture_action)
   176ce:	697b      	ldr	r3, [r7, #20]
   176d0:	7a1b      	ldrb	r3, [r3, #8]
   176d2:	031b      	lsls	r3, r3, #12
   176d4:	0019      	movs	r1, r3
   176d6:	23e0      	movs	r3, #224	; 0xe0
   176d8:	01db      	lsls	r3, r3, #7
   176da:	400b      	ands	r3, r1
   176dc:	431a      	orrs	r2, r3
				| TCC_FCTRLA_CHSEL(cfg->capture_channel);
   176de:	697b      	ldr	r3, [r7, #20]
   176e0:	7a5b      	ldrb	r3, [r3, #9]
   176e2:	029b      	lsls	r3, r3, #10
   176e4:	0019      	movs	r1, r3
   176e6:	23c0      	movs	r3, #192	; 0xc0
   176e8:	011b      	lsls	r3, r3, #4
   176ea:	400b      	ands	r3, r1
		fault = TCC_FCTRLA_FILTERVAL(cfg->filter_value)
   176ec:	4313      	orrs	r3, r2
   176ee:	613b      	str	r3, [r7, #16]
		value_buffer[i] = fault;
   176f0:	69fb      	ldr	r3, [r7, #28]
   176f2:	009b      	lsls	r3, r3, #2
   176f4:	687a      	ldr	r2, [r7, #4]
   176f6:	18d3      	adds	r3, r2, r3
   176f8:	693a      	ldr	r2, [r7, #16]
   176fa:	601a      	str	r2, [r3, #0]
	for (i = 0; i < TCC_NUM_FAULTS; i ++) {
   176fc:	69fb      	ldr	r3, [r7, #28]
   176fe:	3301      	adds	r3, #1
   17700:	61fb      	str	r3, [r7, #28]
   17702:	69fb      	ldr	r3, [r7, #28]
   17704:	2b01      	cmp	r3, #1
   17706:	dd8d      	ble.n	17624 <_tcc_build_faults+0x28>
	}
	return STATUS_OK;
   17708:	2300      	movs	r3, #0
}
   1770a:	0018      	movs	r0, r3
   1770c:	46bd      	mov	sp, r7
   1770e:	b008      	add	sp, #32
   17710:	bd80      	pop	{r7, pc}
   17712:	46c0      	nop			; (mov r8, r8)
   17714:	00026098 	.word	0x00026098

00017718 <_tcc_build_drvctrl>:
 */
static inline enum status_code _tcc_build_drvctrl(
		const uint8_t module_index,
		const struct tcc_config *const config,
		uint32_t *value_buffer)
{
   17718:	b580      	push	{r7, lr}
   1771a:	b088      	sub	sp, #32
   1771c:	af00      	add	r7, sp, #0
   1771e:	60b9      	str	r1, [r7, #8]
   17720:	607a      	str	r2, [r7, #4]
   17722:	230f      	movs	r3, #15
   17724:	18fb      	adds	r3, r7, r3
   17726:	1c02      	adds	r2, r0, #0
   17728:	701a      	strb	r2, [r3, #0]
	uint32_t i;
	uint8_t ow_num = _tcc_ow_nums[module_index];
   1772a:	230f      	movs	r3, #15
   1772c:	18fb      	adds	r3, r7, r3
   1772e:	781a      	ldrb	r2, [r3, #0]
   17730:	2317      	movs	r3, #23
   17732:	18fb      	adds	r3, r7, r3
   17734:	492d      	ldr	r1, [pc, #180]	; (177ec <_tcc_build_drvctrl+0xd4>)
   17736:	5c8a      	ldrb	r2, [r1, r2]
   17738:	701a      	strb	r2, [r3, #0]
	uint32_t drvctrl;

	drvctrl = 0;
   1773a:	2300      	movs	r3, #0
   1773c:	61bb      	str	r3, [r7, #24]

	for (i = 0; i < TCC_NUM_WAVE_OUTPUTS; i ++) {
   1773e:	2300      	movs	r3, #0
   17740:	61fb      	str	r3, [r7, #28]
   17742:	e048      	b.n	177d6 <_tcc_build_drvctrl+0xbe>
		if (config->wave_ext.invert[i]) {
   17744:	68ba      	ldr	r2, [r7, #8]
   17746:	2150      	movs	r1, #80	; 0x50
   17748:	69fb      	ldr	r3, [r7, #28]
   1774a:	18d3      	adds	r3, r2, r3
   1774c:	185b      	adds	r3, r3, r1
   1774e:	781b      	ldrb	r3, [r3, #0]
   17750:	2b00      	cmp	r3, #0
   17752:	d010      	beq.n	17776 <_tcc_build_drvctrl+0x5e>
			if (i >= ow_num) {
   17754:	2317      	movs	r3, #23
   17756:	18fb      	adds	r3, r7, r3
   17758:	781a      	ldrb	r2, [r3, #0]
   1775a:	69fb      	ldr	r3, [r7, #28]
   1775c:	429a      	cmp	r2, r3
   1775e:	d801      	bhi.n	17764 <_tcc_build_drvctrl+0x4c>
				return STATUS_ERR_INVALID_ARG;
   17760:	2317      	movs	r3, #23
   17762:	e03f      	b.n	177e4 <_tcc_build_drvctrl+0xcc>
			}
			drvctrl |= (TCC_DRVCTRL_INVEN0 << i);
   17764:	2380      	movs	r3, #128	; 0x80
   17766:	025a      	lsls	r2, r3, #9
   17768:	69fb      	ldr	r3, [r7, #28]
   1776a:	409a      	lsls	r2, r3
   1776c:	0013      	movs	r3, r2
   1776e:	001a      	movs	r2, r3
   17770:	69bb      	ldr	r3, [r7, #24]
   17772:	4313      	orrs	r3, r2
   17774:	61bb      	str	r3, [r7, #24]
		}
		if (config->wave_ext.non_recoverable_fault[i].output !=
   17776:	68ba      	ldr	r2, [r7, #8]
   17778:	69fb      	ldr	r3, [r7, #28]
   1777a:	331c      	adds	r3, #28
   1777c:	005b      	lsls	r3, r3, #1
   1777e:	18d3      	adds	r3, r2, r3
   17780:	3309      	adds	r3, #9
   17782:	781b      	ldrb	r3, [r3, #0]
   17784:	2b00      	cmp	r3, #0
   17786:	d023      	beq.n	177d0 <_tcc_build_drvctrl+0xb8>
			TCC_FAULT_STATE_OUTPUT_OFF) {
			if (i >= ow_num) {
   17788:	2317      	movs	r3, #23
   1778a:	18fb      	adds	r3, r7, r3
   1778c:	781a      	ldrb	r2, [r3, #0]
   1778e:	69fb      	ldr	r3, [r7, #28]
   17790:	429a      	cmp	r2, r3
   17792:	d801      	bhi.n	17798 <_tcc_build_drvctrl+0x80>
				return STATUS_ERR_INVALID_ARG;
   17794:	2317      	movs	r3, #23
   17796:	e025      	b.n	177e4 <_tcc_build_drvctrl+0xcc>
			}
			if (config->wave_ext.non_recoverable_fault[i].output ==
   17798:	68ba      	ldr	r2, [r7, #8]
   1779a:	69fb      	ldr	r3, [r7, #28]
   1779c:	331c      	adds	r3, #28
   1779e:	005b      	lsls	r3, r3, #1
   177a0:	18d3      	adds	r3, r2, r3
   177a2:	3309      	adds	r3, #9
   177a4:	781b      	ldrb	r3, [r3, #0]
   177a6:	2b02      	cmp	r3, #2
   177a8:	d10a      	bne.n	177c0 <_tcc_build_drvctrl+0xa8>
				TCC_FAULT_STATE_OUTPUT_1) {
				drvctrl |= (TCC_DRVCTRL_NRE0 | TCC_DRVCTRL_NRV0) << i;
   177aa:	2302      	movs	r3, #2
   177ac:	33ff      	adds	r3, #255	; 0xff
   177ae:	001a      	movs	r2, r3
   177b0:	69fb      	ldr	r3, [r7, #28]
   177b2:	409a      	lsls	r2, r3
   177b4:	0013      	movs	r3, r2
   177b6:	001a      	movs	r2, r3
   177b8:	69bb      	ldr	r3, [r7, #24]
   177ba:	4313      	orrs	r3, r2
   177bc:	61bb      	str	r3, [r7, #24]
   177be:	e007      	b.n	177d0 <_tcc_build_drvctrl+0xb8>
			} else {
				drvctrl |= (TCC_DRVCTRL_NRE0) << i;
   177c0:	2201      	movs	r2, #1
   177c2:	69fb      	ldr	r3, [r7, #28]
   177c4:	409a      	lsls	r2, r3
   177c6:	0013      	movs	r3, r2
   177c8:	001a      	movs	r2, r3
   177ca:	69bb      	ldr	r3, [r7, #24]
   177cc:	4313      	orrs	r3, r2
   177ce:	61bb      	str	r3, [r7, #24]
	for (i = 0; i < TCC_NUM_WAVE_OUTPUTS; i ++) {
   177d0:	69fb      	ldr	r3, [r7, #28]
   177d2:	3301      	adds	r3, #1
   177d4:	61fb      	str	r3, [r7, #28]
   177d6:	69fb      	ldr	r3, [r7, #28]
   177d8:	2b07      	cmp	r3, #7
   177da:	d9b3      	bls.n	17744 <_tcc_build_drvctrl+0x2c>
			}
		}
	}
	*value_buffer = drvctrl;
   177dc:	687b      	ldr	r3, [r7, #4]
   177de:	69ba      	ldr	r2, [r7, #24]
   177e0:	601a      	str	r2, [r3, #0]
	return STATUS_OK;
   177e2:	2300      	movs	r3, #0
}
   177e4:	0018      	movs	r0, r3
   177e6:	46bd      	mov	sp, r7
   177e8:	b008      	add	sp, #32
   177ea:	bd80      	pop	{r7, pc}
   177ec:	0002609c 	.word	0x0002609c

000177f0 <_tcc_build_waves>:
 */
static inline enum status_code _tcc_build_waves(
		const uint8_t module_index,
		const struct tcc_config *const config,
		uint32_t *value_buffer)
{
   177f0:	b580      	push	{r7, lr}
   177f2:	b088      	sub	sp, #32
   177f4:	af00      	add	r7, sp, #0
   177f6:	60b9      	str	r1, [r7, #8]
   177f8:	607a      	str	r2, [r7, #4]
   177fa:	230f      	movs	r3, #15
   177fc:	18fb      	adds	r3, r7, r3
   177fe:	1c02      	adds	r2, r0, #0
   17800:	701a      	strb	r2, [r3, #0]
	int n;

	uint8_t cc_num = _tcc_cc_nums[module_index];
   17802:	230f      	movs	r3, #15
   17804:	18fb      	adds	r3, r7, r3
   17806:	781a      	ldrb	r2, [r3, #0]
   17808:	2317      	movs	r3, #23
   1780a:	18fb      	adds	r3, r7, r3
   1780c:	491d      	ldr	r1, [pc, #116]	; (17884 <_tcc_build_waves+0x94>)
   1780e:	5c8a      	ldrb	r2, [r1, r2]
   17810:	701a      	strb	r2, [r3, #0]
	struct tcc_match_wave_config const *wav_cfg = &config->compare;
   17812:	68bb      	ldr	r3, [r7, #8]
   17814:	3310      	adds	r3, #16
   17816:	613b      	str	r3, [r7, #16]

	uint32_t wave;

	wave = TCC_WAVE_RAMP(wav_cfg->wave_ramp) |
   17818:	693b      	ldr	r3, [r7, #16]
   1781a:	7a5b      	ldrb	r3, [r3, #9]
   1781c:	011b      	lsls	r3, r3, #4
   1781e:	001a      	movs	r2, r3
   17820:	2330      	movs	r3, #48	; 0x30
   17822:	401a      	ands	r2, r3
			TCC_WAVE_WAVEGEN(wav_cfg->wave_generation);
   17824:	693b      	ldr	r3, [r7, #16]
   17826:	7a1b      	ldrb	r3, [r3, #8]
   17828:	0019      	movs	r1, r3
   1782a:	2307      	movs	r3, #7
   1782c:	400b      	ands	r3, r1
	wave = TCC_WAVE_RAMP(wav_cfg->wave_ramp) |
   1782e:	4313      	orrs	r3, r2
   17830:	61bb      	str	r3, [r7, #24]

	for (n = 0; n < TCC_NUM_CHANNELS; n++) {
   17832:	2300      	movs	r3, #0
   17834:	61fb      	str	r3, [r7, #28]
   17836:	e01a      	b.n	1786e <_tcc_build_waves+0x7e>
		if (wav_cfg->wave_polarity[n]) {
   17838:	693a      	ldr	r2, [r7, #16]
   1783a:	69fb      	ldr	r3, [r7, #28]
   1783c:	18d3      	adds	r3, r2, r3
   1783e:	3304      	adds	r3, #4
   17840:	781b      	ldrb	r3, [r3, #0]
   17842:	2b00      	cmp	r3, #0
   17844:	d010      	beq.n	17868 <_tcc_build_waves+0x78>
			if (n >= cc_num) {
   17846:	2317      	movs	r3, #23
   17848:	18fb      	adds	r3, r7, r3
   1784a:	781a      	ldrb	r2, [r3, #0]
   1784c:	69fb      	ldr	r3, [r7, #28]
   1784e:	429a      	cmp	r2, r3
   17850:	dc01      	bgt.n	17856 <_tcc_build_waves+0x66>
				return STATUS_ERR_INVALID_ARG;
   17852:	2317      	movs	r3, #23
   17854:	e012      	b.n	1787c <_tcc_build_waves+0x8c>
			}
			wave |= (TCC_WAVE_POL0 << n);
   17856:	2380      	movs	r3, #128	; 0x80
   17858:	025a      	lsls	r2, r3, #9
   1785a:	69fb      	ldr	r3, [r7, #28]
   1785c:	409a      	lsls	r2, r3
   1785e:	0013      	movs	r3, r2
   17860:	001a      	movs	r2, r3
   17862:	69bb      	ldr	r3, [r7, #24]
   17864:	4313      	orrs	r3, r2
   17866:	61bb      	str	r3, [r7, #24]
	for (n = 0; n < TCC_NUM_CHANNELS; n++) {
   17868:	69fb      	ldr	r3, [r7, #28]
   1786a:	3301      	adds	r3, #1
   1786c:	61fb      	str	r3, [r7, #28]
   1786e:	69fb      	ldr	r3, [r7, #28]
   17870:	2b03      	cmp	r3, #3
   17872:	dde1      	ble.n	17838 <_tcc_build_waves+0x48>
		}
	}

	value_buffer[0] = wave;
   17874:	687b      	ldr	r3, [r7, #4]
   17876:	69ba      	ldr	r2, [r7, #24]
   17878:	601a      	str	r2, [r3, #0]

	return STATUS_OK;
   1787a:	2300      	movs	r3, #0
}
   1787c:	0018      	movs	r0, r3
   1787e:	46bd      	mov	sp, r7
   17880:	b008      	add	sp, #32
   17882:	bd80      	pop	{r7, pc}
   17884:	00026098 	.word	0x00026098

00017888 <tcc_init>:
 */
enum status_code tcc_init(
		struct tcc_module *const module_inst,
		Tcc *const hw,
		const struct tcc_config *const config)
{
   17888:	b590      	push	{r4, r7, lr}
   1788a:	b091      	sub	sp, #68	; 0x44
   1788c:	af00      	add	r7, sp, #0
   1788e:	60f8      	str	r0, [r7, #12]
   17890:	60b9      	str	r1, [r7, #8]
   17892:	607a      	str	r2, [r7, #4]
	Assert(hw);
	Assert(module_inst);
	Assert(config);

	/* TCC instance index */
	uint8_t module_index = _tcc_get_inst_index(hw);
   17894:	233b      	movs	r3, #59	; 0x3b
   17896:	18fc      	adds	r4, r7, r3
   17898:	68bb      	ldr	r3, [r7, #8]
   1789a:	0018      	movs	r0, r3
   1789c:	4bc4      	ldr	r3, [pc, #784]	; (17bb0 <tcc_init+0x328>)
   1789e:	4798      	blx	r3
   178a0:	0003      	movs	r3, r0
   178a2:	7023      	strb	r3, [r4, #0]

	/* Enable the user interface clock for TCC */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC,
   178a4:	233b      	movs	r3, #59	; 0x3b
   178a6:	18fb      	adds	r3, r7, r3
   178a8:	781a      	ldrb	r2, [r3, #0]
   178aa:	4bc2      	ldr	r3, [pc, #776]	; (17bb4 <tcc_init+0x32c>)
   178ac:	0092      	lsls	r2, r2, #2
   178ae:	58d3      	ldr	r3, [r2, r3]
   178b0:	0019      	movs	r1, r3
   178b2:	2002      	movs	r0, #2
   178b4:	4bc0      	ldr	r3, [pc, #768]	; (17bb8 <tcc_init+0x330>)
   178b6:	4798      	blx	r3
			_tcc_apbcmasks[module_index]);

	/* Check if it's enabled. */
	if (hw->CTRLA.reg & TCC_CTRLA_ENABLE) {
   178b8:	68bb      	ldr	r3, [r7, #8]
   178ba:	681b      	ldr	r3, [r3, #0]
   178bc:	2202      	movs	r2, #2
   178be:	4013      	ands	r3, r2
   178c0:	d001      	beq.n	178c6 <tcc_init+0x3e>
		return STATUS_ERR_DENIED;
   178c2:	231c      	movs	r3, #28
   178c4:	e1be      	b.n	17c44 <tcc_init+0x3bc>
	}
	/* Check if it's resetting */
	if (hw->CTRLA.reg & TCC_CTRLA_SWRST) {
   178c6:	68bb      	ldr	r3, [r7, #8]
   178c8:	681b      	ldr	r3, [r3, #0]
   178ca:	2201      	movs	r2, #1
   178cc:	4013      	ands	r3, r2
   178ce:	d001      	beq.n	178d4 <tcc_init+0x4c>
		return STATUS_ERR_DENIED;
   178d0:	231c      	movs	r3, #28
   178d2:	e1b7      	b.n	17c44 <tcc_init+0x3bc>
	}

	enum status_code status;

	/* Check COUNT, PER, CCx */
	uint32_t count_max  = _tcc_maxs[module_index];
   178d4:	233b      	movs	r3, #59	; 0x3b
   178d6:	18fb      	adds	r3, r7, r3
   178d8:	781a      	ldrb	r2, [r3, #0]
   178da:	4bb8      	ldr	r3, [pc, #736]	; (17bbc <tcc_init+0x334>)
   178dc:	0092      	lsls	r2, r2, #2
   178de:	58d3      	ldr	r3, [r2, r3]
   178e0:	637b      	str	r3, [r7, #52]	; 0x34

	/* Check all counter values */
	if ((config->counter.count > count_max)
   178e2:	687b      	ldr	r3, [r7, #4]
   178e4:	681a      	ldr	r2, [r3, #0]
   178e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   178e8:	429a      	cmp	r2, r3
   178ea:	d804      	bhi.n	178f6 <tcc_init+0x6e>
		|| (config->counter.period > count_max)
   178ec:	687b      	ldr	r3, [r7, #4]
   178ee:	685a      	ldr	r2, [r3, #4]
   178f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   178f2:	429a      	cmp	r2, r3
   178f4:	d901      	bls.n	178fa <tcc_init+0x72>
		) {
		return STATUS_ERR_INVALID_ARG;
   178f6:	2317      	movs	r3, #23
   178f8:	e1a4      	b.n	17c44 <tcc_init+0x3bc>
	}

	/* Check all channel values */
	for (i = 0; i < TCC_NUM_CHANNELS; i ++) {
   178fa:	2300      	movs	r3, #0
   178fc:	63fb      	str	r3, [r7, #60]	; 0x3c
   178fe:	e00e      	b.n	1791e <tcc_init+0x96>
		if ((config->compare.match[i] > count_max)
   17900:	687a      	ldr	r2, [r7, #4]
   17902:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   17904:	3306      	adds	r3, #6
   17906:	009b      	lsls	r3, r3, #2
   17908:	18d3      	adds	r3, r2, r3
   1790a:	3304      	adds	r3, #4
   1790c:	681a      	ldr	r2, [r3, #0]
   1790e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   17910:	429a      	cmp	r2, r3
   17912:	d901      	bls.n	17918 <tcc_init+0x90>
			) {
			return STATUS_ERR_INVALID_ARG;
   17914:	2317      	movs	r3, #23
   17916:	e195      	b.n	17c44 <tcc_init+0x3bc>
	for (i = 0; i < TCC_NUM_CHANNELS; i ++) {
   17918:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   1791a:	3301      	adds	r3, #1
   1791c:	63fb      	str	r3, [r7, #60]	; 0x3c
   1791e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   17920:	2b03      	cmp	r3, #3
   17922:	dded      	ble.n	17900 <tcc_init+0x78>
		}
	}

	/* Check all outputs */
	for (i = 0; i < TCC_NUM_WAVE_OUTPUTS; i ++) {
   17924:	2300      	movs	r3, #0
   17926:	63fb      	str	r3, [r7, #60]	; 0x3c
   17928:	e019      	b.n	1795e <tcc_init+0xd6>
		if (!config->pins.enable_wave_out_pin[i]) {
   1792a:	687a      	ldr	r2, [r7, #4]
   1792c:	2198      	movs	r1, #152	; 0x98
   1792e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   17930:	18d3      	adds	r3, r2, r3
   17932:	185b      	adds	r3, r3, r1
   17934:	781b      	ldrb	r3, [r3, #0]
   17936:	2201      	movs	r2, #1
   17938:	4053      	eors	r3, r2
   1793a:	b2db      	uxtb	r3, r3
   1793c:	2b00      	cmp	r3, #0
   1793e:	d10a      	bne.n	17956 <tcc_init+0xce>
			continue;
		}
		/* Output line is not supported */
		if (i >= _tcc_ow_nums[module_index]) {
   17940:	233b      	movs	r3, #59	; 0x3b
   17942:	18fb      	adds	r3, r7, r3
   17944:	781b      	ldrb	r3, [r3, #0]
   17946:	4a9e      	ldr	r2, [pc, #632]	; (17bc0 <tcc_init+0x338>)
   17948:	5cd3      	ldrb	r3, [r2, r3]
   1794a:	001a      	movs	r2, r3
   1794c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   1794e:	429a      	cmp	r2, r3
   17950:	dc02      	bgt.n	17958 <tcc_init+0xd0>
			return STATUS_ERR_INVALID_ARG;
   17952:	2317      	movs	r3, #23
   17954:	e176      	b.n	17c44 <tcc_init+0x3bc>
			continue;
   17956:	46c0      	nop			; (mov r8, r8)
	for (i = 0; i < TCC_NUM_WAVE_OUTPUTS; i ++) {
   17958:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   1795a:	3301      	adds	r3, #1
   1795c:	63fb      	str	r3, [r7, #60]	; 0x3c
   1795e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   17960:	2b07      	cmp	r3, #7
   17962:	dde2      	ble.n	1792a <tcc_init+0xa2>
		}
	}

	/* CTRLA settings */
	uint32_t ctrla = 0;
   17964:	2300      	movs	r3, #0
   17966:	62fb      	str	r3, [r7, #44]	; 0x2c
	status = _tcc_build_ctrla(module_index, config, &ctrla);
   17968:	2333      	movs	r3, #51	; 0x33
   1796a:	18fc      	adds	r4, r7, r3
   1796c:	232c      	movs	r3, #44	; 0x2c
   1796e:	18fa      	adds	r2, r7, r3
   17970:	6879      	ldr	r1, [r7, #4]
   17972:	233b      	movs	r3, #59	; 0x3b
   17974:	18fb      	adds	r3, r7, r3
   17976:	781b      	ldrb	r3, [r3, #0]
   17978:	0018      	movs	r0, r3
   1797a:	4b92      	ldr	r3, [pc, #584]	; (17bc4 <tcc_init+0x33c>)
   1797c:	4798      	blx	r3
   1797e:	0003      	movs	r3, r0
   17980:	7023      	strb	r3, [r4, #0]
	if (STATUS_OK != status) {
   17982:	2333      	movs	r3, #51	; 0x33
   17984:	18fb      	adds	r3, r7, r3
   17986:	781b      	ldrb	r3, [r3, #0]
   17988:	2b00      	cmp	r3, #0
   1798a:	d003      	beq.n	17994 <tcc_init+0x10c>
		return status;
   1798c:	2333      	movs	r3, #51	; 0x33
   1798e:	18fb      	adds	r3, r7, r3
   17990:	781b      	ldrb	r3, [r3, #0]
   17992:	e157      	b.n	17c44 <tcc_init+0x3bc>
	}

	/* CTRLB settings */
	uint8_t ctrlb;
	_tcc_build_ctrlb(module_index, config, &ctrlb);
   17994:	232b      	movs	r3, #43	; 0x2b
   17996:	18fa      	adds	r2, r7, r3
   17998:	6879      	ldr	r1, [r7, #4]
   1799a:	233b      	movs	r3, #59	; 0x3b
   1799c:	18fb      	adds	r3, r7, r3
   1799e:	781b      	ldrb	r3, [r3, #0]
   179a0:	0018      	movs	r0, r3
   179a2:	4b89      	ldr	r3, [pc, #548]	; (17bc8 <tcc_init+0x340>)
   179a4:	4798      	blx	r3

	/* FAULTs settings */
	uint32_t faults[TCC_NUM_FAULTS];

	status = _tcc_build_faults(module_index, config, faults);
   179a6:	2333      	movs	r3, #51	; 0x33
   179a8:	18fc      	adds	r4, r7, r3
   179aa:	2320      	movs	r3, #32
   179ac:	18fa      	adds	r2, r7, r3
   179ae:	6879      	ldr	r1, [r7, #4]
   179b0:	233b      	movs	r3, #59	; 0x3b
   179b2:	18fb      	adds	r3, r7, r3
   179b4:	781b      	ldrb	r3, [r3, #0]
   179b6:	0018      	movs	r0, r3
   179b8:	4b84      	ldr	r3, [pc, #528]	; (17bcc <tcc_init+0x344>)
   179ba:	4798      	blx	r3
   179bc:	0003      	movs	r3, r0
   179be:	7023      	strb	r3, [r4, #0]
	if (STATUS_OK != status) {
   179c0:	2333      	movs	r3, #51	; 0x33
   179c2:	18fb      	adds	r3, r7, r3
   179c4:	781b      	ldrb	r3, [r3, #0]
   179c6:	2b00      	cmp	r3, #0
   179c8:	d003      	beq.n	179d2 <tcc_init+0x14a>
		return status;
   179ca:	2333      	movs	r3, #51	; 0x33
   179cc:	18fb      	adds	r3, r7, r3
   179ce:	781b      	ldrb	r3, [r3, #0]
   179d0:	e138      	b.n	17c44 <tcc_init+0x3bc>
	}

	/* DRVCTRL */
	uint32_t drvctrl = 0;
   179d2:	2300      	movs	r3, #0
   179d4:	61fb      	str	r3, [r7, #28]

	status = _tcc_build_drvctrl(module_index, config, &drvctrl);
   179d6:	2333      	movs	r3, #51	; 0x33
   179d8:	18fc      	adds	r4, r7, r3
   179da:	231c      	movs	r3, #28
   179dc:	18fa      	adds	r2, r7, r3
   179de:	6879      	ldr	r1, [r7, #4]
   179e0:	233b      	movs	r3, #59	; 0x3b
   179e2:	18fb      	adds	r3, r7, r3
   179e4:	781b      	ldrb	r3, [r3, #0]
   179e6:	0018      	movs	r0, r3
   179e8:	4b79      	ldr	r3, [pc, #484]	; (17bd0 <tcc_init+0x348>)
   179ea:	4798      	blx	r3
   179ec:	0003      	movs	r3, r0
   179ee:	7023      	strb	r3, [r4, #0]
	if (STATUS_OK != status) {
   179f0:	2333      	movs	r3, #51	; 0x33
   179f2:	18fb      	adds	r3, r7, r3
   179f4:	781b      	ldrb	r3, [r3, #0]
   179f6:	2b00      	cmp	r3, #0
   179f8:	d003      	beq.n	17a02 <tcc_init+0x17a>
		return status;
   179fa:	2333      	movs	r3, #51	; 0x33
   179fc:	18fb      	adds	r3, r7, r3
   179fe:	781b      	ldrb	r3, [r3, #0]
   17a00:	e120      	b.n	17c44 <tcc_init+0x3bc>
	}

	/* WAVE */
	uint32_t waves[1];

	status = _tcc_build_waves(module_index, config, waves);
   17a02:	2333      	movs	r3, #51	; 0x33
   17a04:	18fc      	adds	r4, r7, r3
   17a06:	2318      	movs	r3, #24
   17a08:	18fa      	adds	r2, r7, r3
   17a0a:	6879      	ldr	r1, [r7, #4]
   17a0c:	233b      	movs	r3, #59	; 0x3b
   17a0e:	18fb      	adds	r3, r7, r3
   17a10:	781b      	ldrb	r3, [r3, #0]
   17a12:	0018      	movs	r0, r3
   17a14:	4b6f      	ldr	r3, [pc, #444]	; (17bd4 <tcc_init+0x34c>)
   17a16:	4798      	blx	r3
   17a18:	0003      	movs	r3, r0
   17a1a:	7023      	strb	r3, [r4, #0]
	if (STATUS_OK != status) {
   17a1c:	2333      	movs	r3, #51	; 0x33
   17a1e:	18fb      	adds	r3, r7, r3
   17a20:	781b      	ldrb	r3, [r3, #0]
   17a22:	2b00      	cmp	r3, #0
   17a24:	d003      	beq.n	17a2e <tcc_init+0x1a6>
		return status;
   17a26:	2333      	movs	r3, #51	; 0x33
   17a28:	18fb      	adds	r3, r7, r3
   17a2a:	781b      	ldrb	r3, [r3, #0]
   17a2c:	e10a      	b.n	17c44 <tcc_init+0x3bc>
	}

	/* Initialize module */
#if TCC_ASYNC
	/* Initialize parameters */
	for (i = 0; i < TCC_CALLBACK_N; i ++) {
   17a2e:	2300      	movs	r3, #0
   17a30:	63fb      	str	r3, [r7, #60]	; 0x3c
   17a32:	e009      	b.n	17a48 <tcc_init+0x1c0>
		module_inst->callback[i] = NULL;
   17a34:	68fa      	ldr	r2, [r7, #12]
   17a36:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   17a38:	009b      	lsls	r3, r3, #2
   17a3a:	18d3      	adds	r3, r2, r3
   17a3c:	3304      	adds	r3, #4
   17a3e:	2200      	movs	r2, #0
   17a40:	601a      	str	r2, [r3, #0]
	for (i = 0; i < TCC_CALLBACK_N; i ++) {
   17a42:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   17a44:	3301      	adds	r3, #1
   17a46:	63fb      	str	r3, [r7, #60]	; 0x3c
   17a48:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   17a4a:	2b0b      	cmp	r3, #11
   17a4c:	ddf2      	ble.n	17a34 <tcc_init+0x1ac>
	}
	module_inst->register_callback_mask = 0;
   17a4e:	68fb      	ldr	r3, [r7, #12]
   17a50:	2200      	movs	r2, #0
   17a52:	635a      	str	r2, [r3, #52]	; 0x34
	module_inst->enable_callback_mask = 0;
   17a54:	68fb      	ldr	r3, [r7, #12]
   17a56:	2200      	movs	r2, #0
   17a58:	639a      	str	r2, [r3, #56]	; 0x38
	_tcc_instances[module_index] = module_inst;
   17a5a:	233b      	movs	r3, #59	; 0x3b
   17a5c:	18fb      	adds	r3, r7, r3
   17a5e:	781a      	ldrb	r2, [r3, #0]
   17a60:	4b5d      	ldr	r3, [pc, #372]	; (17bd8 <tcc_init+0x350>)
   17a62:	0092      	lsls	r2, r2, #2
   17a64:	68f9      	ldr	r1, [r7, #12]
   17a66:	50d1      	str	r1, [r2, r3]
#endif

	module_inst->hw = hw;
   17a68:	68fb      	ldr	r3, [r7, #12]
   17a6a:	68ba      	ldr	r2, [r7, #8]
   17a6c:	601a      	str	r2, [r3, #0]

	module_inst->double_buffering_enabled = config->double_buffering_enabled;
   17a6e:	687b      	ldr	r3, [r7, #4]
   17a70:	22a0      	movs	r2, #160	; 0xa0
   17a72:	5c99      	ldrb	r1, [r3, r2]
   17a74:	68fb      	ldr	r3, [r7, #12]
   17a76:	223c      	movs	r2, #60	; 0x3c
   17a78:	5499      	strb	r1, [r3, r2]

	/* Setup clock for module */
	struct system_gclk_chan_config gclk_chan_config;
	system_gclk_chan_get_config_defaults(&gclk_chan_config);
   17a7a:	2314      	movs	r3, #20
   17a7c:	18fb      	adds	r3, r7, r3
   17a7e:	0018      	movs	r0, r3
   17a80:	4b56      	ldr	r3, [pc, #344]	; (17bdc <tcc_init+0x354>)
   17a82:	4798      	blx	r3
	gclk_chan_config.source_generator = config->counter.clock_source;
   17a84:	687b      	ldr	r3, [r7, #4]
   17a86:	7a9a      	ldrb	r2, [r3, #10]
   17a88:	2314      	movs	r3, #20
   17a8a:	18fb      	adds	r3, r7, r3
   17a8c:	701a      	strb	r2, [r3, #0]
	system_gclk_chan_set_config(_tcc_gclk_ids[module_index], &gclk_chan_config);
   17a8e:	233b      	movs	r3, #59	; 0x3b
   17a90:	18fb      	adds	r3, r7, r3
   17a92:	781b      	ldrb	r3, [r3, #0]
   17a94:	4a52      	ldr	r2, [pc, #328]	; (17be0 <tcc_init+0x358>)
   17a96:	5cd3      	ldrb	r3, [r2, r3]
   17a98:	2214      	movs	r2, #20
   17a9a:	18ba      	adds	r2, r7, r2
   17a9c:	0011      	movs	r1, r2
   17a9e:	0018      	movs	r0, r3
   17aa0:	4b50      	ldr	r3, [pc, #320]	; (17be4 <tcc_init+0x35c>)
   17aa2:	4798      	blx	r3
	system_gclk_chan_enable(_tcc_gclk_ids[module_index]);
   17aa4:	233b      	movs	r3, #59	; 0x3b
   17aa6:	18fb      	adds	r3, r7, r3
   17aa8:	781b      	ldrb	r3, [r3, #0]
   17aaa:	4a4d      	ldr	r2, [pc, #308]	; (17be0 <tcc_init+0x358>)
   17aac:	5cd3      	ldrb	r3, [r2, r3]
   17aae:	0018      	movs	r0, r3
   17ab0:	4b4d      	ldr	r3, [pc, #308]	; (17be8 <tcc_init+0x360>)
   17ab2:	4798      	blx	r3

	/* Initialize pins */
	struct system_pinmux_config pin_config;
	for (i = 0; i <  _tcc_ow_nums[module_index]; i ++) {
   17ab4:	2300      	movs	r3, #0
   17ab6:	63fb      	str	r3, [r7, #60]	; 0x3c
   17ab8:	e02d      	b.n	17b16 <tcc_init+0x28e>
		if (!config->pins.enable_wave_out_pin[i]) {
   17aba:	687a      	ldr	r2, [r7, #4]
   17abc:	2198      	movs	r1, #152	; 0x98
   17abe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   17ac0:	18d3      	adds	r3, r2, r3
   17ac2:	185b      	adds	r3, r3, r1
   17ac4:	781b      	ldrb	r3, [r3, #0]
   17ac6:	2201      	movs	r2, #1
   17ac8:	4053      	eors	r3, r2
   17aca:	b2db      	uxtb	r3, r3
   17acc:	2b00      	cmp	r3, #0
   17ace:	d11e      	bne.n	17b0e <tcc_init+0x286>
			continue;
		}

		system_pinmux_get_config_defaults(&pin_config);
   17ad0:	2310      	movs	r3, #16
   17ad2:	18fb      	adds	r3, r7, r3
   17ad4:	0018      	movs	r0, r3
   17ad6:	4b45      	ldr	r3, [pc, #276]	; (17bec <tcc_init+0x364>)
   17ad8:	4798      	blx	r3
		pin_config.mux_position = config->pins.wave_out_pin_mux[i];
   17ada:	687b      	ldr	r3, [r7, #4]
   17adc:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
   17ade:	321e      	adds	r2, #30
   17ae0:	0092      	lsls	r2, r2, #2
   17ae2:	58d3      	ldr	r3, [r2, r3]
   17ae4:	b2da      	uxtb	r2, r3
   17ae6:	2310      	movs	r3, #16
   17ae8:	18fb      	adds	r3, r7, r3
   17aea:	701a      	strb	r2, [r3, #0]
		pin_config.direction = SYSTEM_PINMUX_PIN_DIR_OUTPUT;
   17aec:	2310      	movs	r3, #16
   17aee:	18fb      	adds	r3, r7, r3
   17af0:	2201      	movs	r2, #1
   17af2:	705a      	strb	r2, [r3, #1]
		system_pinmux_pin_set_config(
				config->pins.wave_out_pin[i], &pin_config);
   17af4:	687b      	ldr	r3, [r7, #4]
   17af6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
   17af8:	3216      	adds	r2, #22
   17afa:	0092      	lsls	r2, r2, #2
   17afc:	58d3      	ldr	r3, [r2, r3]
		system_pinmux_pin_set_config(
   17afe:	b2db      	uxtb	r3, r3
   17b00:	2210      	movs	r2, #16
   17b02:	18ba      	adds	r2, r7, r2
   17b04:	0011      	movs	r1, r2
   17b06:	0018      	movs	r0, r3
   17b08:	4b39      	ldr	r3, [pc, #228]	; (17bf0 <tcc_init+0x368>)
   17b0a:	4798      	blx	r3
   17b0c:	e000      	b.n	17b10 <tcc_init+0x288>
			continue;
   17b0e:	46c0      	nop			; (mov r8, r8)
	for (i = 0; i <  _tcc_ow_nums[module_index]; i ++) {
   17b10:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   17b12:	3301      	adds	r3, #1
   17b14:	63fb      	str	r3, [r7, #60]	; 0x3c
   17b16:	233b      	movs	r3, #59	; 0x3b
   17b18:	18fb      	adds	r3, r7, r3
   17b1a:	781b      	ldrb	r3, [r3, #0]
   17b1c:	4a28      	ldr	r2, [pc, #160]	; (17bc0 <tcc_init+0x338>)
   17b1e:	5cd3      	ldrb	r3, [r2, r3]
   17b20:	001a      	movs	r2, r3
   17b22:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   17b24:	429a      	cmp	r2, r3
   17b26:	dcc8      	bgt.n	17aba <tcc_init+0x232>
	}

	/* Write to registers */

	hw->CTRLA.reg = ctrla;
   17b28:	6afa      	ldr	r2, [r7, #44]	; 0x2c
   17b2a:	68bb      	ldr	r3, [r7, #8]
   17b2c:	601a      	str	r2, [r3, #0]
	while (hw->SYNCBUSY.reg & TCC_SYNCBUSY_CTRLB) {
   17b2e:	46c0      	nop			; (mov r8, r8)
   17b30:	68bb      	ldr	r3, [r7, #8]
   17b32:	689b      	ldr	r3, [r3, #8]
   17b34:	2204      	movs	r2, #4
   17b36:	4013      	ands	r3, r2
   17b38:	d1fa      	bne.n	17b30 <tcc_init+0x2a8>
		/* Wait for sync */
	}

	hw->CTRLBCLR.reg = 0xFF;
   17b3a:	68bb      	ldr	r3, [r7, #8]
   17b3c:	22ff      	movs	r2, #255	; 0xff
   17b3e:	711a      	strb	r2, [r3, #4]
	while (hw->SYNCBUSY.reg & TCC_SYNCBUSY_CTRLB) {
   17b40:	46c0      	nop			; (mov r8, r8)
   17b42:	68bb      	ldr	r3, [r7, #8]
   17b44:	689b      	ldr	r3, [r3, #8]
   17b46:	2204      	movs	r2, #4
   17b48:	4013      	ands	r3, r2
   17b4a:	d1fa      	bne.n	17b42 <tcc_init+0x2ba>
		/* Wait for sync */
	}
	hw->CTRLBSET.reg = ctrlb;
   17b4c:	232b      	movs	r3, #43	; 0x2b
   17b4e:	18fb      	adds	r3, r7, r3
   17b50:	781a      	ldrb	r2, [r3, #0]
   17b52:	68bb      	ldr	r3, [r7, #8]
   17b54:	715a      	strb	r2, [r3, #5]

	hw->FCTRLA.reg = faults[0];
   17b56:	2320      	movs	r3, #32
   17b58:	18fb      	adds	r3, r7, r3
   17b5a:	681a      	ldr	r2, [r3, #0]
   17b5c:	68bb      	ldr	r3, [r7, #8]
   17b5e:	60da      	str	r2, [r3, #12]
	hw->FCTRLB.reg = faults[1];
   17b60:	2320      	movs	r3, #32
   17b62:	18fb      	adds	r3, r7, r3
   17b64:	685a      	ldr	r2, [r3, #4]
   17b66:	68bb      	ldr	r3, [r7, #8]
   17b68:	611a      	str	r2, [r3, #16]

	hw->DRVCTRL.reg = drvctrl;
   17b6a:	69fa      	ldr	r2, [r7, #28]
   17b6c:	68bb      	ldr	r3, [r7, #8]
   17b6e:	619a      	str	r2, [r3, #24]

#if (!SAML21) && (!SAMC20) && (!SAMC21) && (!SAML22) && (!SAMR30)
	while (hw->SYNCBUSY.reg & (TCC_SYNCBUSY_WAVE | TCC_SYNCBUSY_WAVEB)) {
   17b70:	46c0      	nop			; (mov r8, r8)
   17b72:	68bb      	ldr	r3, [r7, #8]
   17b74:	689b      	ldr	r3, [r3, #8]
   17b76:	4a1f      	ldr	r2, [pc, #124]	; (17bf4 <tcc_init+0x36c>)
   17b78:	4013      	ands	r3, r2
   17b7a:	d1fa      	bne.n	17b72 <tcc_init+0x2ea>
		/* Wait for sync */
	}
#endif
	hw->WAVE.reg = waves[0];
   17b7c:	69ba      	ldr	r2, [r7, #24]
   17b7e:	68bb      	ldr	r3, [r7, #8]
   17b80:	63da      	str	r2, [r3, #60]	; 0x3c

	while (hw->SYNCBUSY.reg & TCC_SYNCBUSY_COUNT) {
   17b82:	46c0      	nop			; (mov r8, r8)
   17b84:	68bb      	ldr	r3, [r7, #8]
   17b86:	689b      	ldr	r3, [r3, #8]
   17b88:	2210      	movs	r2, #16
   17b8a:	4013      	ands	r3, r2
   17b8c:	d1fa      	bne.n	17b84 <tcc_init+0x2fc>
		/* Wait for sync */
	}
	hw->COUNT.reg = config->counter.count;
   17b8e:	687b      	ldr	r3, [r7, #4]
   17b90:	681a      	ldr	r2, [r3, #0]
   17b92:	68bb      	ldr	r3, [r7, #8]
   17b94:	635a      	str	r2, [r3, #52]	; 0x34

#if (!SAML21) && (!SAMC20) && (!SAMC21) && (!SAML22) && (!SAMR30)
	while (hw->SYNCBUSY.reg & (TCC_SYNCBUSY_PER | TCC_SYNCBUSY_PERB)) {
   17b96:	46c0      	nop			; (mov r8, r8)
   17b98:	68bb      	ldr	r3, [r7, #8]
   17b9a:	689b      	ldr	r3, [r3, #8]
   17b9c:	4a16      	ldr	r2, [pc, #88]	; (17bf8 <tcc_init+0x370>)
   17b9e:	4013      	ands	r3, r2
   17ba0:	d1fa      	bne.n	17b98 <tcc_init+0x310>
		/* Wait for sync */
	}
#endif
	hw->PER.reg = (config->counter.period);
   17ba2:	687b      	ldr	r3, [r7, #4]
   17ba4:	685a      	ldr	r2, [r3, #4]
   17ba6:	68bb      	ldr	r3, [r7, #8]
   17ba8:	641a      	str	r2, [r3, #64]	; 0x40

	for (i = 0; i <  _tcc_cc_nums[module_index]; i ++) {
   17baa:	2300      	movs	r3, #0
   17bac:	63fb      	str	r3, [r7, #60]	; 0x3c
   17bae:	e03f      	b.n	17c30 <tcc_init+0x3a8>
   17bb0:	000171f1 	.word	0x000171f1
   17bb4:	00026080 	.word	0x00026080
   17bb8:	0001716d 	.word	0x0001716d
   17bbc:	0002608c 	.word	0x0002608c
   17bc0:	0002609c 	.word	0x0002609c
   17bc4:	000174fd 	.word	0x000174fd
   17bc8:	000175a1 	.word	0x000175a1
   17bcc:	000175fd 	.word	0x000175fd
   17bd0:	00017719 	.word	0x00017719
   17bd4:	000177f1 	.word	0x000177f1
   17bd8:	20005604 	.word	0x20005604
   17bdc:	00017155 	.word	0x00017155
   17be0:	0002607c 	.word	0x0002607c
   17be4:	00016d6d 	.word	0x00016d6d
   17be8:	00016db1 	.word	0x00016db1
   17bec:	000171c9 	.word	0x000171c9
   17bf0:	000170cd 	.word	0x000170cd
   17bf4:	00020040 	.word	0x00020040
   17bf8:	00040080 	.word	0x00040080
#if (!SAML21) && (!SAMC20) && (!SAMC21) && (!SAML22) && (!SAMR30)
		while (hw->SYNCBUSY.reg & (
   17bfc:	46c0      	nop			; (mov r8, r8)
   17bfe:	68bb      	ldr	r3, [r7, #8]
   17c00:	689b      	ldr	r3, [r3, #8]
			(TCC_SYNCBUSY_CC0 | TCC_SYNCBUSY_CCB0) << i)) {
   17c02:	4912      	ldr	r1, [pc, #72]	; (17c4c <tcc_init+0x3c4>)
   17c04:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
   17c06:	4091      	lsls	r1, r2
   17c08:	000a      	movs	r2, r1
		while (hw->SYNCBUSY.reg & (
   17c0a:	4013      	ands	r3, r2
   17c0c:	d1f7      	bne.n	17bfe <tcc_init+0x376>
			/* Wait for sync */
		}
#endif
		hw->CC[i].reg = (config->compare.match[i]);
   17c0e:	687a      	ldr	r2, [r7, #4]
   17c10:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   17c12:	3306      	adds	r3, #6
   17c14:	009b      	lsls	r3, r3, #2
   17c16:	18d3      	adds	r3, r2, r3
   17c18:	3304      	adds	r3, #4
   17c1a:	681a      	ldr	r2, [r3, #0]
   17c1c:	68b9      	ldr	r1, [r7, #8]
   17c1e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   17c20:	3310      	adds	r3, #16
   17c22:	009b      	lsls	r3, r3, #2
   17c24:	18cb      	adds	r3, r1, r3
   17c26:	3304      	adds	r3, #4
   17c28:	601a      	str	r2, [r3, #0]
	for (i = 0; i <  _tcc_cc_nums[module_index]; i ++) {
   17c2a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   17c2c:	3301      	adds	r3, #1
   17c2e:	63fb      	str	r3, [r7, #60]	; 0x3c
   17c30:	233b      	movs	r3, #59	; 0x3b
   17c32:	18fb      	adds	r3, r7, r3
   17c34:	781b      	ldrb	r3, [r3, #0]
   17c36:	4a06      	ldr	r2, [pc, #24]	; (17c50 <tcc_init+0x3c8>)
   17c38:	5cd3      	ldrb	r3, [r2, r3]
   17c3a:	001a      	movs	r2, r3
   17c3c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   17c3e:	429a      	cmp	r2, r3
   17c40:	dcdc      	bgt.n	17bfc <tcc_init+0x374>
	}

	return STATUS_OK;
   17c42:	2300      	movs	r3, #0
}
   17c44:	0018      	movs	r0, r3
   17c46:	46bd      	mov	sp, r7
   17c48:	b011      	add	sp, #68	; 0x44
   17c4a:	bd90      	pop	{r4, r7, pc}
   17c4c:	00080100 	.word	0x00080100
   17c50:	00026098 	.word	0x00026098

00017c54 <system_interrupt_enable>:
{
   17c54:	b580      	push	{r7, lr}
   17c56:	b082      	sub	sp, #8
   17c58:	af00      	add	r7, sp, #0
   17c5a:	0002      	movs	r2, r0
   17c5c:	1dfb      	adds	r3, r7, #7
   17c5e:	701a      	strb	r2, [r3, #0]
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
   17c60:	4b06      	ldr	r3, [pc, #24]	; (17c7c <system_interrupt_enable+0x28>)
   17c62:	1dfa      	adds	r2, r7, #7
   17c64:	7812      	ldrb	r2, [r2, #0]
   17c66:	0011      	movs	r1, r2
   17c68:	221f      	movs	r2, #31
   17c6a:	400a      	ands	r2, r1
   17c6c:	2101      	movs	r1, #1
   17c6e:	4091      	lsls	r1, r2
   17c70:	000a      	movs	r2, r1
   17c72:	601a      	str	r2, [r3, #0]
}
   17c74:	46c0      	nop			; (mov r8, r8)
   17c76:	46bd      	mov	sp, r7
   17c78:	b002      	add	sp, #8
   17c7a:	bd80      	pop	{r7, pc}
   17c7c:	e000e100 	.word	0xe000e100

00017c80 <_tcc_interrupt_get_interrupt_vector>:
 *
 * \return Interrupt vector for of the given TCC module instance.
 */
static enum system_interrupt_vector _tcc_interrupt_get_interrupt_vector(
		uint32_t inst_num)
{
   17c80:	b580      	push	{r7, lr}
   17c82:	b082      	sub	sp, #8
   17c84:	af00      	add	r7, sp, #0
   17c86:	6078      	str	r0, [r7, #4]
	static uint8_t tcc_interrupt_vectors[TCC_INST_NUM] = {
		MREPEAT(TCC_INST_NUM, _TCC_INTERRUPT_VECT_NUM, 0)
	};

	return (enum system_interrupt_vector)tcc_interrupt_vectors[inst_num];
   17c88:	4a04      	ldr	r2, [pc, #16]	; (17c9c <_tcc_interrupt_get_interrupt_vector+0x1c>)
   17c8a:	687b      	ldr	r3, [r7, #4]
   17c8c:	18d3      	adds	r3, r2, r3
   17c8e:	781b      	ldrb	r3, [r3, #0]
   17c90:	b25b      	sxtb	r3, r3
}
   17c92:	0018      	movs	r0, r3
   17c94:	46bd      	mov	sp, r7
   17c96:	b002      	add	sp, #8
   17c98:	bd80      	pop	{r7, pc}
   17c9a:	46c0      	nop			; (mov r8, r8)
   17c9c:	20000118 	.word	0x20000118

00017ca0 <tcc_register_callback>:
 */
enum status_code tcc_register_callback(
		struct tcc_module *const module,
		tcc_callback_t callback_func,
		const enum tcc_callback callback_type)
{
   17ca0:	b580      	push	{r7, lr}
   17ca2:	b084      	sub	sp, #16
   17ca4:	af00      	add	r7, sp, #0
   17ca6:	60f8      	str	r0, [r7, #12]
   17ca8:	60b9      	str	r1, [r7, #8]
   17caa:	1dfb      	adds	r3, r7, #7
   17cac:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(callback_func);

	/* Register callback function */
	module->callback[callback_type] = callback_func;
   17cae:	1dfb      	adds	r3, r7, #7
   17cb0:	781b      	ldrb	r3, [r3, #0]
   17cb2:	68fa      	ldr	r2, [r7, #12]
   17cb4:	009b      	lsls	r3, r3, #2
   17cb6:	18d3      	adds	r3, r2, r3
   17cb8:	3304      	adds	r3, #4
   17cba:	68ba      	ldr	r2, [r7, #8]
   17cbc:	601a      	str	r2, [r3, #0]

	/* Set the bit corresponding to the callback_type */
	module->register_callback_mask |= _tcc_intflag[callback_type];
   17cbe:	68fb      	ldr	r3, [r7, #12]
   17cc0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
   17cc2:	1dfb      	adds	r3, r7, #7
   17cc4:	7819      	ldrb	r1, [r3, #0]
   17cc6:	4b05      	ldr	r3, [pc, #20]	; (17cdc <tcc_register_callback+0x3c>)
   17cc8:	0089      	lsls	r1, r1, #2
   17cca:	58cb      	ldr	r3, [r1, r3]
   17ccc:	431a      	orrs	r2, r3
   17cce:	68fb      	ldr	r3, [r7, #12]
   17cd0:	635a      	str	r2, [r3, #52]	; 0x34

	return STATUS_OK;
   17cd2:	2300      	movs	r3, #0
}
   17cd4:	0018      	movs	r0, r3
   17cd6:	46bd      	mov	sp, r7
   17cd8:	b004      	add	sp, #16
   17cda:	bd80      	pop	{r7, pc}
   17cdc:	000260a0 	.word	0x000260a0

00017ce0 <tcc_enable_callback>:
 * \param[in]     callback_type Callback type given by an enum
 */
void tcc_enable_callback(
		struct tcc_module *const module,
		const enum tcc_callback callback_type)
{
   17ce0:	b580      	push	{r7, lr}
   17ce2:	b082      	sub	sp, #8
   17ce4:	af00      	add	r7, sp, #0
   17ce6:	6078      	str	r0, [r7, #4]
   17ce8:	000a      	movs	r2, r1
   17cea:	1cfb      	adds	r3, r7, #3
   17cec:	701a      	strb	r2, [r3, #0]
	Assert(module);
	Assert(module->hw);

	/* Enable interrupts for this TCC module */
	system_interrupt_enable(_tcc_interrupt_get_interrupt_vector(
			_tcc_get_inst_index(module->hw)));
   17cee:	687b      	ldr	r3, [r7, #4]
   17cf0:	681b      	ldr	r3, [r3, #0]
   17cf2:	0018      	movs	r0, r3
   17cf4:	4b0f      	ldr	r3, [pc, #60]	; (17d34 <tcc_enable_callback+0x54>)
   17cf6:	4798      	blx	r3
   17cf8:	0003      	movs	r3, r0
	system_interrupt_enable(_tcc_interrupt_get_interrupt_vector(
   17cfa:	0018      	movs	r0, r3
   17cfc:	4b0e      	ldr	r3, [pc, #56]	; (17d38 <tcc_enable_callback+0x58>)
   17cfe:	4798      	blx	r3
   17d00:	0003      	movs	r3, r0
   17d02:	0018      	movs	r0, r3
   17d04:	4b0d      	ldr	r3, [pc, #52]	; (17d3c <tcc_enable_callback+0x5c>)
   17d06:	4798      	blx	r3

	/* Enable channel or other callbacks */
	module->enable_callback_mask |= _tcc_intflag[callback_type];
   17d08:	687b      	ldr	r3, [r7, #4]
   17d0a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
   17d0c:	1cfb      	adds	r3, r7, #3
   17d0e:	7819      	ldrb	r1, [r3, #0]
   17d10:	4b0b      	ldr	r3, [pc, #44]	; (17d40 <tcc_enable_callback+0x60>)
   17d12:	0089      	lsls	r1, r1, #2
   17d14:	58cb      	ldr	r3, [r1, r3]
   17d16:	431a      	orrs	r2, r3
   17d18:	687b      	ldr	r3, [r7, #4]
   17d1a:	639a      	str	r2, [r3, #56]	; 0x38
	module->hw->INTENSET.reg = _tcc_intflag[callback_type];
   17d1c:	687b      	ldr	r3, [r7, #4]
   17d1e:	681b      	ldr	r3, [r3, #0]
   17d20:	1cfa      	adds	r2, r7, #3
   17d22:	7811      	ldrb	r1, [r2, #0]
   17d24:	4a06      	ldr	r2, [pc, #24]	; (17d40 <tcc_enable_callback+0x60>)
   17d26:	0089      	lsls	r1, r1, #2
   17d28:	588a      	ldr	r2, [r1, r2]
   17d2a:	629a      	str	r2, [r3, #40]	; 0x28
}
   17d2c:	46c0      	nop			; (mov r8, r8)
   17d2e:	46bd      	mov	sp, r7
   17d30:	b002      	add	sp, #8
   17d32:	bd80      	pop	{r7, pc}
   17d34:	000171f1 	.word	0x000171f1
   17d38:	00017c81 	.word	0x00017c81
   17d3c:	00017c55 	.word	0x00017c55
   17d40:	000260a0 	.word	0x000260a0

00017d44 <TCC0_Handler>:
		void TCC##n##_Handler(void) \
		{ \
			_tcc_interrupt_handler(n); \
		}

MREPEAT(TCC_INST_NUM, _TCC_INTERRUPT_HANDLER, 0)
   17d44:	b580      	push	{r7, lr}
   17d46:	af00      	add	r7, sp, #0
   17d48:	2000      	movs	r0, #0
   17d4a:	4b02      	ldr	r3, [pc, #8]	; (17d54 <TCC0_Handler+0x10>)
   17d4c:	4798      	blx	r3
   17d4e:	46c0      	nop			; (mov r8, r8)
   17d50:	46bd      	mov	sp, r7
   17d52:	bd80      	pop	{r7, pc}
   17d54:	00017d81 	.word	0x00017d81

00017d58 <TCC1_Handler>:
   17d58:	b580      	push	{r7, lr}
   17d5a:	af00      	add	r7, sp, #0
   17d5c:	2001      	movs	r0, #1
   17d5e:	4b02      	ldr	r3, [pc, #8]	; (17d68 <TCC1_Handler+0x10>)
   17d60:	4798      	blx	r3
   17d62:	46c0      	nop			; (mov r8, r8)
   17d64:	46bd      	mov	sp, r7
   17d66:	bd80      	pop	{r7, pc}
   17d68:	00017d81 	.word	0x00017d81

00017d6c <TCC2_Handler>:
   17d6c:	b580      	push	{r7, lr}
   17d6e:	af00      	add	r7, sp, #0
   17d70:	2002      	movs	r0, #2
   17d72:	4b02      	ldr	r3, [pc, #8]	; (17d7c <TCC2_Handler+0x10>)
   17d74:	4798      	blx	r3
   17d76:	46c0      	nop			; (mov r8, r8)
   17d78:	46bd      	mov	sp, r7
   17d7a:	bd80      	pop	{r7, pc}
   17d7c:	00017d81 	.word	0x00017d81

00017d80 <_tcc_interrupt_handler>:
 * \param[in]  module_index  ID of the TCC instance calling the interrupt
 *                           handler
 */
void _tcc_interrupt_handler(
		uint8_t module_index)
{
   17d80:	b580      	push	{r7, lr}
   17d82:	b086      	sub	sp, #24
   17d84:	af00      	add	r7, sp, #0
   17d86:	0002      	movs	r2, r0
   17d88:	1dfb      	adds	r3, r7, #7
   17d8a:	701a      	strb	r2, [r3, #0]
	int i;

	uint32_t interrupt_and_callback_status_mask;

	struct tcc_module *module =
			(struct tcc_module *)_tcc_instances[module_index];
   17d8c:	1dfb      	adds	r3, r7, #7
   17d8e:	781a      	ldrb	r2, [r3, #0]
	struct tcc_module *module =
   17d90:	4b18      	ldr	r3, [pc, #96]	; (17df4 <_tcc_interrupt_handler+0x74>)
   17d92:	0092      	lsls	r2, r2, #2
   17d94:	58d3      	ldr	r3, [r2, r3]
   17d96:	613b      	str	r3, [r7, #16]

	interrupt_and_callback_status_mask = (module->hw->INTFLAG.reg &
   17d98:	693b      	ldr	r3, [r7, #16]
   17d9a:	681b      	ldr	r3, [r3, #0]
   17d9c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
			module->register_callback_mask &
   17d9e:	693b      	ldr	r3, [r7, #16]
   17da0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
	interrupt_and_callback_status_mask = (module->hw->INTFLAG.reg &
   17da2:	401a      	ands	r2, r3
			module->enable_callback_mask);
   17da4:	693b      	ldr	r3, [r7, #16]
   17da6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
	interrupt_and_callback_status_mask = (module->hw->INTFLAG.reg &
   17da8:	4013      	ands	r3, r2
   17daa:	60fb      	str	r3, [r7, #12]

	/* Check if callback interrupt has occured */
	for (i = 0; i < TCC_CALLBACK_N; i ++) {
   17dac:	2300      	movs	r3, #0
   17dae:	617b      	str	r3, [r7, #20]
   17db0:	e019      	b.n	17de6 <_tcc_interrupt_handler+0x66>
		if (interrupt_and_callback_status_mask & _tcc_intflag[i]) {
   17db2:	4b11      	ldr	r3, [pc, #68]	; (17df8 <_tcc_interrupt_handler+0x78>)
   17db4:	697a      	ldr	r2, [r7, #20]
   17db6:	0092      	lsls	r2, r2, #2
   17db8:	58d3      	ldr	r3, [r2, r3]
   17dba:	68fa      	ldr	r2, [r7, #12]
   17dbc:	4013      	ands	r3, r2
   17dbe:	d00f      	beq.n	17de0 <_tcc_interrupt_handler+0x60>
			/* Invoke the registered and enabled callback function */
			(module->callback[i])(module);
   17dc0:	693a      	ldr	r2, [r7, #16]
   17dc2:	697b      	ldr	r3, [r7, #20]
   17dc4:	009b      	lsls	r3, r3, #2
   17dc6:	18d3      	adds	r3, r2, r3
   17dc8:	3304      	adds	r3, #4
   17dca:	681b      	ldr	r3, [r3, #0]
   17dcc:	693a      	ldr	r2, [r7, #16]
   17dce:	0010      	movs	r0, r2
   17dd0:	4798      	blx	r3
			/* Clear interrupt flag */
			module->hw->INTFLAG.reg = _tcc_intflag[i];
   17dd2:	693b      	ldr	r3, [r7, #16]
   17dd4:	681b      	ldr	r3, [r3, #0]
   17dd6:	4a08      	ldr	r2, [pc, #32]	; (17df8 <_tcc_interrupt_handler+0x78>)
   17dd8:	6979      	ldr	r1, [r7, #20]
   17dda:	0089      	lsls	r1, r1, #2
   17ddc:	588a      	ldr	r2, [r1, r2]
   17dde:	62da      	str	r2, [r3, #44]	; 0x2c
	for (i = 0; i < TCC_CALLBACK_N; i ++) {
   17de0:	697b      	ldr	r3, [r7, #20]
   17de2:	3301      	adds	r3, #1
   17de4:	617b      	str	r3, [r7, #20]
   17de6:	697b      	ldr	r3, [r7, #20]
   17de8:	2b0b      	cmp	r3, #11
   17dea:	dde2      	ble.n	17db2 <_tcc_interrupt_handler+0x32>
		}
	}
}
   17dec:	46c0      	nop			; (mov r8, r8)
   17dee:	46bd      	mov	sp, r7
   17df0:	b006      	add	sp, #24
   17df2:	bd80      	pop	{r7, pc}
   17df4:	20005604 	.word	0x20005604
   17df8:	000260a0 	.word	0x000260a0

00017dfc <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
   17dfc:	b580      	push	{r7, lr}
   17dfe:	b082      	sub	sp, #8
   17e00:	af00      	add	r7, sp, #0
        uint32_t *pSrc, *pDest;

        /* Initialize the relocate segment */
        pSrc = &_etext;
   17e02:	4b2f      	ldr	r3, [pc, #188]	; (17ec0 <Reset_Handler+0xc4>)
   17e04:	607b      	str	r3, [r7, #4]
        pDest = &_srelocate;
   17e06:	4b2f      	ldr	r3, [pc, #188]	; (17ec4 <Reset_Handler+0xc8>)
   17e08:	603b      	str	r3, [r7, #0]

        if (pSrc != pDest) {
   17e0a:	687a      	ldr	r2, [r7, #4]
   17e0c:	683b      	ldr	r3, [r7, #0]
   17e0e:	429a      	cmp	r2, r3
   17e10:	d00c      	beq.n	17e2c <Reset_Handler+0x30>
                for (; pDest < &_erelocate;) {
   17e12:	e007      	b.n	17e24 <Reset_Handler+0x28>
                        *pDest++ = *pSrc++;
   17e14:	683b      	ldr	r3, [r7, #0]
   17e16:	1d1a      	adds	r2, r3, #4
   17e18:	603a      	str	r2, [r7, #0]
   17e1a:	687a      	ldr	r2, [r7, #4]
   17e1c:	1d11      	adds	r1, r2, #4
   17e1e:	6079      	str	r1, [r7, #4]
   17e20:	6812      	ldr	r2, [r2, #0]
   17e22:	601a      	str	r2, [r3, #0]
                for (; pDest < &_erelocate;) {
   17e24:	683a      	ldr	r2, [r7, #0]
   17e26:	4b28      	ldr	r3, [pc, #160]	; (17ec8 <Reset_Handler+0xcc>)
   17e28:	429a      	cmp	r2, r3
   17e2a:	d3f3      	bcc.n	17e14 <Reset_Handler+0x18>
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
   17e2c:	4b27      	ldr	r3, [pc, #156]	; (17ecc <Reset_Handler+0xd0>)
   17e2e:	603b      	str	r3, [r7, #0]
   17e30:	e004      	b.n	17e3c <Reset_Handler+0x40>
                *pDest++ = 0;
   17e32:	683b      	ldr	r3, [r7, #0]
   17e34:	1d1a      	adds	r2, r3, #4
   17e36:	603a      	str	r2, [r7, #0]
   17e38:	2200      	movs	r2, #0
   17e3a:	601a      	str	r2, [r3, #0]
        for (pDest = &_szero; pDest < &_ezero;) {
   17e3c:	683a      	ldr	r2, [r7, #0]
   17e3e:	4b24      	ldr	r3, [pc, #144]	; (17ed0 <Reset_Handler+0xd4>)
   17e40:	429a      	cmp	r2, r3
   17e42:	d3f6      	bcc.n	17e32 <Reset_Handler+0x36>
        }

        /* Set the vector table base address */
        pSrc = (uint32_t *) & _sfixed;
   17e44:	4b23      	ldr	r3, [pc, #140]	; (17ed4 <Reset_Handler+0xd8>)
   17e46:	607b      	str	r3, [r7, #4]
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
   17e48:	4b23      	ldr	r3, [pc, #140]	; (17ed8 <Reset_Handler+0xdc>)
   17e4a:	687a      	ldr	r2, [r7, #4]
   17e4c:	21ff      	movs	r1, #255	; 0xff
   17e4e:	438a      	bics	r2, r1
   17e50:	609a      	str	r2, [r3, #8]

        /* Change default QOS values to have the best performance and correct USB behaviour */
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
   17e52:	4a22      	ldr	r2, [pc, #136]	; (17edc <Reset_Handler+0xe0>)
   17e54:	2390      	movs	r3, #144	; 0x90
   17e56:	005b      	lsls	r3, r3, #1
   17e58:	2102      	movs	r1, #2
   17e5a:	50d1      	str	r1, [r2, r3]
#if defined(ID_USB)
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
   17e5c:	4a20      	ldr	r2, [pc, #128]	; (17ee0 <Reset_Handler+0xe4>)
   17e5e:	78d3      	ldrb	r3, [r2, #3]
   17e60:	2103      	movs	r1, #3
   17e62:	438b      	bics	r3, r1
   17e64:	1c19      	adds	r1, r3, #0
   17e66:	2302      	movs	r3, #2
   17e68:	430b      	orrs	r3, r1
   17e6a:	70d3      	strb	r3, [r2, #3]
        USB->DEVICE.QOSCTRL.bit.DQOS = 2;
   17e6c:	4a1c      	ldr	r2, [pc, #112]	; (17ee0 <Reset_Handler+0xe4>)
   17e6e:	78d3      	ldrb	r3, [r2, #3]
   17e70:	210c      	movs	r1, #12
   17e72:	438b      	bics	r3, r1
   17e74:	1c19      	adds	r1, r3, #0
   17e76:	2308      	movs	r3, #8
   17e78:	430b      	orrs	r3, r1
   17e7a:	70d3      	strb	r3, [r2, #3]
#endif
        DMAC->QOSCTRL.bit.DQOS = 2;
   17e7c:	4a19      	ldr	r2, [pc, #100]	; (17ee4 <Reset_Handler+0xe8>)
   17e7e:	7b93      	ldrb	r3, [r2, #14]
   17e80:	2130      	movs	r1, #48	; 0x30
   17e82:	438b      	bics	r3, r1
   17e84:	1c19      	adds	r1, r3, #0
   17e86:	2320      	movs	r3, #32
   17e88:	430b      	orrs	r3, r1
   17e8a:	7393      	strb	r3, [r2, #14]
        DMAC->QOSCTRL.bit.FQOS = 2;
   17e8c:	4a15      	ldr	r2, [pc, #84]	; (17ee4 <Reset_Handler+0xe8>)
   17e8e:	7b93      	ldrb	r3, [r2, #14]
   17e90:	210c      	movs	r1, #12
   17e92:	438b      	bics	r3, r1
   17e94:	1c19      	adds	r1, r3, #0
   17e96:	2308      	movs	r3, #8
   17e98:	430b      	orrs	r3, r1
   17e9a:	7393      	strb	r3, [r2, #14]
        DMAC->QOSCTRL.bit.WRBQOS = 2;
   17e9c:	4a11      	ldr	r2, [pc, #68]	; (17ee4 <Reset_Handler+0xe8>)
   17e9e:	7b93      	ldrb	r3, [r2, #14]
   17ea0:	2103      	movs	r1, #3
   17ea2:	438b      	bics	r3, r1
   17ea4:	1c19      	adds	r1, r3, #0
   17ea6:	2302      	movs	r3, #2
   17ea8:	430b      	orrs	r3, r1
   17eaa:	7393      	strb	r3, [r2, #14]

        /* Overwriting the default value of the NVMCTRL.CTRLB.MANW bit (errata reference 13134) */
        NVMCTRL->CTRLB.bit.MANW = 1;
   17eac:	4a0e      	ldr	r2, [pc, #56]	; (17ee8 <Reset_Handler+0xec>)
   17eae:	6853      	ldr	r3, [r2, #4]
   17eb0:	2180      	movs	r1, #128	; 0x80
   17eb2:	430b      	orrs	r3, r1
   17eb4:	6053      	str	r3, [r2, #4]

        /* Initialize the C library */
        __libc_init_array();
   17eb6:	4b0d      	ldr	r3, [pc, #52]	; (17eec <Reset_Handler+0xf0>)
   17eb8:	4798      	blx	r3

        /* Branch to main function */
        main();
   17eba:	4b0d      	ldr	r3, [pc, #52]	; (17ef0 <Reset_Handler+0xf4>)
   17ebc:	4798      	blx	r3

        /* Infinite loop */
        while (1);
   17ebe:	e7fe      	b.n	17ebe <Reset_Handler+0xc2>
   17ec0:	00026d70 	.word	0x00026d70
   17ec4:	20000000 	.word	0x20000000
   17ec8:	200002f0 	.word	0x200002f0
   17ecc:	200002f0 	.word	0x200002f0
   17ed0:	20005674 	.word	0x20005674
   17ed4:	00000000 	.word	0x00000000
   17ed8:	e000ed00 	.word	0xe000ed00
   17edc:	41007000 	.word	0x41007000
   17ee0:	41005000 	.word	0x41005000
   17ee4:	41004800 	.word	0x41004800
   17ee8:	41004000 	.word	0x41004000
   17eec:	00021775 	.word	0x00021775
   17ef0:	0001f631 	.word	0x0001f631

00017ef4 <Dummy_Handler>:
 * \brief Default interrupt handler for unused IRQs.
 */
void HardFault_HandlerC(unsigned long *hardfault_args);

void Dummy_Handler(void)
{
   17ef4:	b580      	push	{r7, lr}
   17ef6:	af00      	add	r7, sp, #0
  __asm volatile (
   17ef8:	2004      	movs	r0, #4
   17efa:	4671      	mov	r1, lr
   17efc:	4208      	tst	r0, r1
   17efe:	d002      	beq.n	17f06 <_MSP>
   17f00:	f3ef 8009 	mrs	r0, PSP
   17f04:	e001      	b.n	17f0a <_HALT>

00017f06 <_MSP>:
   17f06:	f3ef 8008 	mrs	r0, MSP

00017f0a <_HALT>:
   17f0a:	6941      	ldr	r1, [r0, #20]
   17f0c:	e004      	b.n	17f18 <HardFault_HandlerC>
   17f0e:	be00      	bkpt	0x0000
  "_HALT:              \n"
  " ldr r1,[r0,#20]  \n"
  " b HardFault_HandlerC \n"
  " bkpt #0          \n"
  );
}
   17f10:	46c0      	nop			; (mov r8, r8)
   17f12:	46bd      	mov	sp, r7
   17f14:	bd80      	pop	{r7, pc}
	...

00017f18 <HardFault_HandlerC>:

void HardFault_HandlerC(unsigned long *hardfault_args) {
   17f18:	b580      	push	{r7, lr}
   17f1a:	b090      	sub	sp, #64	; 0x40
   17f1c:	af00      	add	r7, sp, #0
   17f1e:	6078      	str	r0, [r7, #4]
	volatile unsigned long _DFSR ;
	volatile unsigned long _AFSR ;
	volatile unsigned long _BFAR ;
	volatile unsigned long _MMAR ;
	
	stacked_r0  = ((unsigned long)hardfault_args[0]) ;
   17f20:	687b      	ldr	r3, [r7, #4]
   17f22:	681b      	ldr	r3, [r3, #0]
   17f24:	63fb      	str	r3, [r7, #60]	; 0x3c
	stacked_r1  = ((unsigned long)hardfault_args[1]) ;
   17f26:	687b      	ldr	r3, [r7, #4]
   17f28:	685b      	ldr	r3, [r3, #4]
   17f2a:	63bb      	str	r3, [r7, #56]	; 0x38
	stacked_r2  = ((unsigned long)hardfault_args[2]) ;
   17f2c:	687b      	ldr	r3, [r7, #4]
   17f2e:	689b      	ldr	r3, [r3, #8]
   17f30:	637b      	str	r3, [r7, #52]	; 0x34
	stacked_r3  = ((unsigned long)hardfault_args[3]) ;
   17f32:	687b      	ldr	r3, [r7, #4]
   17f34:	68db      	ldr	r3, [r3, #12]
   17f36:	633b      	str	r3, [r7, #48]	; 0x30
	stacked_r12 = ((unsigned long)hardfault_args[4]) ;
   17f38:	687b      	ldr	r3, [r7, #4]
   17f3a:	691b      	ldr	r3, [r3, #16]
   17f3c:	62fb      	str	r3, [r7, #44]	; 0x2c
	stacked_lr  = ((unsigned long)hardfault_args[5]) ;
   17f3e:	687b      	ldr	r3, [r7, #4]
   17f40:	695b      	ldr	r3, [r3, #20]
   17f42:	62bb      	str	r3, [r7, #40]	; 0x28
	stacked_pc  = ((unsigned long)hardfault_args[6]) ;
   17f44:	687b      	ldr	r3, [r7, #4]
   17f46:	699b      	ldr	r3, [r3, #24]
   17f48:	627b      	str	r3, [r7, #36]	; 0x24
	stacked_psr = ((unsigned long)hardfault_args[7]) ;
   17f4a:	687b      	ldr	r3, [r7, #4]
   17f4c:	69db      	ldr	r3, [r3, #28]
   17f4e:	623b      	str	r3, [r7, #32]
	
	// Configurable Fault Status Register
	// Consists of MMSR, BFSR and UFSR
	_CFSR = (*((volatile unsigned long *)(0xE000ED28))) ;
   17f50:	4b0b      	ldr	r3, [pc, #44]	; (17f80 <HardFault_HandlerC+0x68>)
   17f52:	681b      	ldr	r3, [r3, #0]
   17f54:	61fb      	str	r3, [r7, #28]
	
	// Hard Fault Status Register
	_HFSR = (*((volatile unsigned long *)(0xE000ED2C))) ;
   17f56:	4b0b      	ldr	r3, [pc, #44]	; (17f84 <HardFault_HandlerC+0x6c>)
   17f58:	681b      	ldr	r3, [r3, #0]
   17f5a:	61bb      	str	r3, [r7, #24]
	
	// Debug Fault Status Register
	_DFSR = (*((volatile unsigned long *)(0xE000ED30))) ;
   17f5c:	4b0a      	ldr	r3, [pc, #40]	; (17f88 <HardFault_HandlerC+0x70>)
   17f5e:	681b      	ldr	r3, [r3, #0]
   17f60:	617b      	str	r3, [r7, #20]
	
	// Auxiliary Fault Status Register
	_AFSR = (*((volatile unsigned long *)(0xE000ED3C))) ;
   17f62:	4b0a      	ldr	r3, [pc, #40]	; (17f8c <HardFault_HandlerC+0x74>)
   17f64:	681b      	ldr	r3, [r3, #0]
   17f66:	613b      	str	r3, [r7, #16]
	
	// Read the Fault Address Registers. These may not contain valid values.
	// Check BFARVALID/MMARVALID to see if they are valid values
	// MemManage Fault Address Register
	_MMAR = (*((volatile unsigned long *)(0xE000ED34))) ;
   17f68:	4b09      	ldr	r3, [pc, #36]	; (17f90 <HardFault_HandlerC+0x78>)
   17f6a:	681b      	ldr	r3, [r3, #0]
   17f6c:	60bb      	str	r3, [r7, #8]
	// Bus Fault Address Register
	_BFAR = (*((volatile unsigned long *)(0xE000ED38))) ;
   17f6e:	4b09      	ldr	r3, [pc, #36]	; (17f94 <HardFault_HandlerC+0x7c>)
   17f70:	681b      	ldr	r3, [r3, #0]
   17f72:	60fb      	str	r3, [r7, #12]
	
	__asm("BKPT #0\n") ; // Break into the debugger
   17f74:	be00      	bkpt	0x0000
	#pragma GCC diagnostic pop
   17f76:	46c0      	nop			; (mov r8, r8)
   17f78:	46bd      	mov	sp, r7
   17f7a:	b010      	add	sp, #64	; 0x40
   17f7c:	bd80      	pop	{r7, pc}
   17f7e:	46c0      	nop			; (mov r8, r8)
   17f80:	e000ed28 	.word	0xe000ed28
   17f84:	e000ed2c 	.word	0xe000ed2c
   17f88:	e000ed30 	.word	0xe000ed30
   17f8c:	e000ed3c 	.word	0xe000ed3c
   17f90:	e000ed34 	.word	0xe000ed34
   17f94:	e000ed38 	.word	0xe000ed38

00017f98 <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
   17f98:	b580      	push	{r7, lr}
   17f9a:	b086      	sub	sp, #24
   17f9c:	af00      	add	r7, sp, #0
   17f9e:	60f8      	str	r0, [r7, #12]
   17fa0:	60b9      	str	r1, [r7, #8]
   17fa2:	607a      	str	r2, [r7, #4]
	int nChars = 0;
   17fa4:	2300      	movs	r3, #0
   17fa6:	617b      	str	r3, [r7, #20]

	if (file != 0) {
   17fa8:	68fb      	ldr	r3, [r7, #12]
   17faa:	2b00      	cmp	r3, #0
   17fac:	d012      	beq.n	17fd4 <_read+0x3c>
		return -1;
   17fae:	2301      	movs	r3, #1
   17fb0:	425b      	negs	r3, r3
   17fb2:	e013      	b.n	17fdc <_read+0x44>
	}

	for (; len > 0; --len) {
		ptr_get(stdio_base, ptr);
   17fb4:	4b0b      	ldr	r3, [pc, #44]	; (17fe4 <_read+0x4c>)
   17fb6:	681a      	ldr	r2, [r3, #0]
   17fb8:	4b0b      	ldr	r3, [pc, #44]	; (17fe8 <_read+0x50>)
   17fba:	681b      	ldr	r3, [r3, #0]
   17fbc:	68b9      	ldr	r1, [r7, #8]
   17fbe:	0018      	movs	r0, r3
   17fc0:	4790      	blx	r2
		ptr++;
   17fc2:	68bb      	ldr	r3, [r7, #8]
   17fc4:	3301      	adds	r3, #1
   17fc6:	60bb      	str	r3, [r7, #8]
		nChars++;
   17fc8:	697b      	ldr	r3, [r7, #20]
   17fca:	3301      	adds	r3, #1
   17fcc:	617b      	str	r3, [r7, #20]
	for (; len > 0; --len) {
   17fce:	687b      	ldr	r3, [r7, #4]
   17fd0:	3b01      	subs	r3, #1
   17fd2:	607b      	str	r3, [r7, #4]
   17fd4:	687b      	ldr	r3, [r7, #4]
   17fd6:	2b00      	cmp	r3, #0
   17fd8:	dcec      	bgt.n	17fb4 <_read+0x1c>
	}
	return nChars;
   17fda:	697b      	ldr	r3, [r7, #20]
}
   17fdc:	0018      	movs	r0, r3
   17fde:	46bd      	mov	sp, r7
   17fe0:	b006      	add	sp, #24
   17fe2:	bd80      	pop	{r7, pc}
   17fe4:	20005610 	.word	0x20005610
   17fe8:	20005618 	.word	0x20005618

00017fec <_write>:
int __attribute__((weak))
_write (int file, char * ptr, int len);

int __attribute__((weak))
_write (int file, char * ptr, int len)
{
   17fec:	b580      	push	{r7, lr}
   17fee:	b086      	sub	sp, #24
   17ff0:	af00      	add	r7, sp, #0
   17ff2:	60f8      	str	r0, [r7, #12]
   17ff4:	60b9      	str	r1, [r7, #8]
   17ff6:	607a      	str	r2, [r7, #4]
	int nChars = 0;
   17ff8:	2300      	movs	r3, #0
   17ffa:	617b      	str	r3, [r7, #20]

	if ((file != 1) && (file != 2) && (file!=3)) {
   17ffc:	68fb      	ldr	r3, [r7, #12]
   17ffe:	2b01      	cmp	r3, #1
   18000:	d01d      	beq.n	1803e <_write+0x52>
   18002:	68fb      	ldr	r3, [r7, #12]
   18004:	2b02      	cmp	r3, #2
   18006:	d01a      	beq.n	1803e <_write+0x52>
   18008:	68fb      	ldr	r3, [r7, #12]
   1800a:	2b03      	cmp	r3, #3
   1800c:	d017      	beq.n	1803e <_write+0x52>
		return -1;
   1800e:	2301      	movs	r3, #1
   18010:	425b      	negs	r3, r3
   18012:	e018      	b.n	18046 <_write+0x5a>
	}

	for (; len != 0; --len) {
		if (ptr_put(stdio_base, *ptr++) < 0) {
   18014:	4b0e      	ldr	r3, [pc, #56]	; (18050 <_write+0x64>)
   18016:	681a      	ldr	r2, [r3, #0]
   18018:	4b0e      	ldr	r3, [pc, #56]	; (18054 <_write+0x68>)
   1801a:	6818      	ldr	r0, [r3, #0]
   1801c:	68bb      	ldr	r3, [r7, #8]
   1801e:	1c59      	adds	r1, r3, #1
   18020:	60b9      	str	r1, [r7, #8]
   18022:	781b      	ldrb	r3, [r3, #0]
   18024:	0019      	movs	r1, r3
   18026:	4790      	blx	r2
   18028:	1e03      	subs	r3, r0, #0
   1802a:	da02      	bge.n	18032 <_write+0x46>
			return -1;
   1802c:	2301      	movs	r3, #1
   1802e:	425b      	negs	r3, r3
   18030:	e009      	b.n	18046 <_write+0x5a>
		}
		++nChars;
   18032:	697b      	ldr	r3, [r7, #20]
   18034:	3301      	adds	r3, #1
   18036:	617b      	str	r3, [r7, #20]
	for (; len != 0; --len) {
   18038:	687b      	ldr	r3, [r7, #4]
   1803a:	3b01      	subs	r3, #1
   1803c:	607b      	str	r3, [r7, #4]
   1803e:	687b      	ldr	r3, [r7, #4]
   18040:	2b00      	cmp	r3, #0
   18042:	d1e7      	bne.n	18014 <_write+0x28>
	}
	return nChars;
   18044:	697b      	ldr	r3, [r7, #20]
}
   18046:	0018      	movs	r0, r3
   18048:	46bd      	mov	sp, r7
   1804a:	b006      	add	sp, #24
   1804c:	bd80      	pop	{r7, pc}
   1804e:	46c0      	nop			; (mov r8, r8)
   18050:	20005614 	.word	0x20005614
   18054:	20005618 	.word	0x20005618

00018058 <_sbrk>:
extern void _exit(int status);
extern void _kill(int pid, int sig);
extern int _getpid(void);

extern caddr_t _sbrk(int incr)
{
   18058:	b580      	push	{r7, lr}
   1805a:	b084      	sub	sp, #16
   1805c:	af00      	add	r7, sp, #0
   1805e:	6078      	str	r0, [r7, #4]
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;

	if (heap == NULL) {
   18060:	4b0a      	ldr	r3, [pc, #40]	; (1808c <_sbrk+0x34>)
   18062:	681b      	ldr	r3, [r3, #0]
   18064:	2b00      	cmp	r3, #0
   18066:	d102      	bne.n	1806e <_sbrk+0x16>
		heap = (unsigned char *)&_end;
   18068:	4b08      	ldr	r3, [pc, #32]	; (1808c <_sbrk+0x34>)
   1806a:	4a09      	ldr	r2, [pc, #36]	; (18090 <_sbrk+0x38>)
   1806c:	601a      	str	r2, [r3, #0]
	}
	prev_heap = heap;
   1806e:	4b07      	ldr	r3, [pc, #28]	; (1808c <_sbrk+0x34>)
   18070:	681b      	ldr	r3, [r3, #0]
   18072:	60fb      	str	r3, [r7, #12]

	heap += incr;
   18074:	4b05      	ldr	r3, [pc, #20]	; (1808c <_sbrk+0x34>)
   18076:	681a      	ldr	r2, [r3, #0]
   18078:	687b      	ldr	r3, [r7, #4]
   1807a:	18d2      	adds	r2, r2, r3
   1807c:	4b03      	ldr	r3, [pc, #12]	; (1808c <_sbrk+0x34>)
   1807e:	601a      	str	r2, [r3, #0]

	return (caddr_t) prev_heap;
   18080:	68fb      	ldr	r3, [r7, #12]
}
   18082:	0018      	movs	r0, r3
   18084:	46bd      	mov	sp, r7
   18086:	b004      	add	sp, #16
   18088:	bd80      	pop	{r7, pc}
   1808a:	46c0      	nop			; (mov r8, r8)
   1808c:	20003d70 	.word	0x20003d70
   18090:	20007678 	.word	0x20007678

00018094 <_close>:
{
	return -1;
}

extern int _close(int file)
{
   18094:	b580      	push	{r7, lr}
   18096:	b082      	sub	sp, #8
   18098:	af00      	add	r7, sp, #0
   1809a:	6078      	str	r0, [r7, #4]
	return -1;
   1809c:	2301      	movs	r3, #1
   1809e:	425b      	negs	r3, r3
}
   180a0:	0018      	movs	r0, r3
   180a2:	46bd      	mov	sp, r7
   180a4:	b002      	add	sp, #8
   180a6:	bd80      	pop	{r7, pc}

000180a8 <_fstat>:

extern int _fstat(int file, struct stat *st)
{
   180a8:	b580      	push	{r7, lr}
   180aa:	b082      	sub	sp, #8
   180ac:	af00      	add	r7, sp, #0
   180ae:	6078      	str	r0, [r7, #4]
   180b0:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
   180b2:	683b      	ldr	r3, [r7, #0]
   180b4:	2280      	movs	r2, #128	; 0x80
   180b6:	0192      	lsls	r2, r2, #6
   180b8:	605a      	str	r2, [r3, #4]

	return 0;
   180ba:	2300      	movs	r3, #0
}
   180bc:	0018      	movs	r0, r3
   180be:	46bd      	mov	sp, r7
   180c0:	b002      	add	sp, #8
   180c2:	bd80      	pop	{r7, pc}

000180c4 <_isatty>:

extern int _isatty(int file)
{
   180c4:	b580      	push	{r7, lr}
   180c6:	b082      	sub	sp, #8
   180c8:	af00      	add	r7, sp, #0
   180ca:	6078      	str	r0, [r7, #4]
	return 1;
   180cc:	2301      	movs	r3, #1
}
   180ce:	0018      	movs	r0, r3
   180d0:	46bd      	mov	sp, r7
   180d2:	b002      	add	sp, #8
   180d4:	bd80      	pop	{r7, pc}

000180d6 <_lseek>:

extern int _lseek(int file, int ptr, int dir)
{
   180d6:	b580      	push	{r7, lr}
   180d8:	b084      	sub	sp, #16
   180da:	af00      	add	r7, sp, #0
   180dc:	60f8      	str	r0, [r7, #12]
   180de:	60b9      	str	r1, [r7, #8]
   180e0:	607a      	str	r2, [r7, #4]
	return 0;
   180e2:	2300      	movs	r3, #0
}
   180e4:	0018      	movs	r0, r3
   180e6:	46bd      	mov	sp, r7
   180e8:	b004      	add	sp, #16
   180ea:	bd80      	pop	{r7, pc}

000180ec <rtc_calendar_get_time_defaults>:
 *
 * \param[out] time  Time structure to initialize
 */
static inline void rtc_calendar_get_time_defaults(
		struct rtc_calendar_time *const time)
{
   180ec:	b580      	push	{r7, lr}
   180ee:	b082      	sub	sp, #8
   180f0:	af00      	add	r7, sp, #0
   180f2:	6078      	str	r0, [r7, #4]
	time->second = 0;
   180f4:	687b      	ldr	r3, [r7, #4]
   180f6:	2200      	movs	r2, #0
   180f8:	701a      	strb	r2, [r3, #0]
	time->minute = 0;
   180fa:	687b      	ldr	r3, [r7, #4]
   180fc:	2200      	movs	r2, #0
   180fe:	705a      	strb	r2, [r3, #1]
	time->hour   = 0;
   18100:	687b      	ldr	r3, [r7, #4]
   18102:	2200      	movs	r2, #0
   18104:	709a      	strb	r2, [r3, #2]
	time->pm     = 0;
   18106:	687b      	ldr	r3, [r7, #4]
   18108:	2200      	movs	r2, #0
   1810a:	70da      	strb	r2, [r3, #3]
	time->day    = 1;
   1810c:	687b      	ldr	r3, [r7, #4]
   1810e:	2201      	movs	r2, #1
   18110:	711a      	strb	r2, [r3, #4]
	time->month  = 1;
   18112:	687b      	ldr	r3, [r7, #4]
   18114:	2201      	movs	r2, #1
   18116:	715a      	strb	r2, [r3, #5]
	time->year   = 2000;
   18118:	687b      	ldr	r3, [r7, #4]
   1811a:	22fa      	movs	r2, #250	; 0xfa
   1811c:	00d2      	lsls	r2, r2, #3
   1811e:	80da      	strh	r2, [r3, #6]
}
   18120:	46c0      	nop			; (mov r8, r8)
   18122:	46bd      	mov	sp, r7
   18124:	b002      	add	sp, #8
   18126:	bd80      	pop	{r7, pc}

00018128 <rtc_calendar_get_config_defaults>:
 *  \param[out] config  Configuration structure to be initialized to default
 *                      values
 */
static inline void rtc_calendar_get_config_defaults(
		struct rtc_calendar_config *const config)
{
   18128:	b580      	push	{r7, lr}
   1812a:	b086      	sub	sp, #24
   1812c:	af00      	add	r7, sp, #0
   1812e:	6078      	str	r0, [r7, #4]
	/* Sanity check argument */
	Assert(config);

	/* Initialize and set time structure to default */
	struct rtc_calendar_time time;
	rtc_calendar_get_time_defaults(&time);
   18130:	230c      	movs	r3, #12
   18132:	18fb      	adds	r3, r7, r3
   18134:	0018      	movs	r0, r3
   18136:	4b23      	ldr	r3, [pc, #140]	; (181c4 <rtc_calendar_get_config_defaults+0x9c>)
   18138:	4798      	blx	r3

	/* Set defaults into configuration structure */
	config->prescaler           = RTC_CALENDAR_PRESCALER_DIV_1024;
   1813a:	687b      	ldr	r3, [r7, #4]
   1813c:	22a0      	movs	r2, #160	; 0xa0
   1813e:	0112      	lsls	r2, r2, #4
   18140:	801a      	strh	r2, [r3, #0]
	config->clear_on_match      = false;
   18142:	687b      	ldr	r3, [r7, #4]
   18144:	2200      	movs	r2, #0
   18146:	709a      	strb	r2, [r3, #2]
#ifdef FEATURE_RTC_CONTINUOUSLY_UPDATED
	config->continuously_update = false;
   18148:	687b      	ldr	r3, [r7, #4]
   1814a:	2200      	movs	r2, #0
   1814c:	70da      	strb	r2, [r3, #3]
#endif
	config->clock_24h           = false;
   1814e:	687b      	ldr	r3, [r7, #4]
   18150:	2200      	movs	r2, #0
   18152:	711a      	strb	r2, [r3, #4]
	config->year_init_value     = 2000;
   18154:	687b      	ldr	r3, [r7, #4]
   18156:	22fa      	movs	r2, #250	; 0xfa
   18158:	00d2      	lsls	r2, r2, #3
   1815a:	80da      	strh	r2, [r3, #6]
#if (SAML21XXXB) || (SAML22) || (SAMC20) || (SAMC21) || (SAMR30)
	config->enable_read_sync    = true;
#endif
	for (uint8_t i = 0; i < RTC_NUM_OF_ALARMS; i++) {
   1815c:	2317      	movs	r3, #23
   1815e:	18fb      	adds	r3, r7, r3
   18160:	2200      	movs	r2, #0
   18162:	701a      	strb	r2, [r3, #0]
   18164:	e025      	b.n	181b2 <rtc_calendar_get_config_defaults+0x8a>
		config->alarm[i].time = time;
   18166:	2317      	movs	r3, #23
   18168:	18fb      	adds	r3, r7, r3
   1816a:	781a      	ldrb	r2, [r3, #0]
   1816c:	6879      	ldr	r1, [r7, #4]
   1816e:	2008      	movs	r0, #8
   18170:	0013      	movs	r3, r2
   18172:	009b      	lsls	r3, r3, #2
   18174:	189b      	adds	r3, r3, r2
   18176:	005b      	lsls	r3, r3, #1
   18178:	18cb      	adds	r3, r1, r3
   1817a:	181a      	adds	r2, r3, r0
   1817c:	230c      	movs	r3, #12
   1817e:	18fb      	adds	r3, r7, r3
   18180:	0010      	movs	r0, r2
   18182:	0019      	movs	r1, r3
   18184:	2308      	movs	r3, #8
   18186:	001a      	movs	r2, r3
   18188:	4b0f      	ldr	r3, [pc, #60]	; (181c8 <rtc_calendar_get_config_defaults+0xa0>)
   1818a:	4798      	blx	r3
		config->alarm[i].mask = RTC_CALENDAR_ALARM_MASK_YEAR;
   1818c:	2317      	movs	r3, #23
   1818e:	18fb      	adds	r3, r7, r3
   18190:	781a      	ldrb	r2, [r3, #0]
   18192:	6879      	ldr	r1, [r7, #4]
   18194:	0013      	movs	r3, r2
   18196:	009b      	lsls	r3, r3, #2
   18198:	189b      	adds	r3, r3, r2
   1819a:	005b      	lsls	r3, r3, #1
   1819c:	18cb      	adds	r3, r1, r3
   1819e:	3310      	adds	r3, #16
   181a0:	2206      	movs	r2, #6
   181a2:	701a      	strb	r2, [r3, #0]
	for (uint8_t i = 0; i < RTC_NUM_OF_ALARMS; i++) {
   181a4:	2317      	movs	r3, #23
   181a6:	18fb      	adds	r3, r7, r3
   181a8:	781a      	ldrb	r2, [r3, #0]
   181aa:	2317      	movs	r3, #23
   181ac:	18fb      	adds	r3, r7, r3
   181ae:	3201      	adds	r2, #1
   181b0:	701a      	strb	r2, [r3, #0]
   181b2:	2317      	movs	r3, #23
   181b4:	18fb      	adds	r3, r7, r3
   181b6:	781b      	ldrb	r3, [r3, #0]
   181b8:	2b00      	cmp	r3, #0
   181ba:	d0d4      	beq.n	18166 <rtc_calendar_get_config_defaults+0x3e>
	}
}
   181bc:	46c0      	nop			; (mov r8, r8)
   181be:	46bd      	mov	sp, r7
   181c0:	b006      	add	sp, #24
   181c2:	bd80      	pop	{r7, pc}
   181c4:	000180ed 	.word	0x000180ed
   181c8:	000217e5 	.word	0x000217e5

000181cc <configure_rtc_calendar>:
#if (SAM0)
# include <rtc_calendar.h>
struct rtc_module rtc_instance;

static void configure_rtc_calendar(void)
{
   181cc:	b580      	push	{r7, lr}
   181ce:	b088      	sub	sp, #32
   181d0:	af00      	add	r7, sp, #0
	/* Initialize RTC in calendar mode. */
	struct rtc_calendar_config config_rtc_calendar;

	rtc_calendar_get_config_defaults(&config_rtc_calendar);
   181d2:	230c      	movs	r3, #12
   181d4:	18fb      	adds	r3, r7, r3
   181d6:	0018      	movs	r0, r3
   181d8:	4b1a      	ldr	r3, [pc, #104]	; (18244 <configure_rtc_calendar+0x78>)
   181da:	4798      	blx	r3

	struct rtc_calendar_time init_time;
	rtc_calendar_get_time_defaults(&init_time);
   181dc:	1d3b      	adds	r3, r7, #4
   181de:	0018      	movs	r0, r3
   181e0:	4b19      	ldr	r3, [pc, #100]	; (18248 <configure_rtc_calendar+0x7c>)
   181e2:	4798      	blx	r3
	init_time.year   = 2014;
   181e4:	1d3b      	adds	r3, r7, #4
   181e6:	4a19      	ldr	r2, [pc, #100]	; (1824c <configure_rtc_calendar+0x80>)
   181e8:	80da      	strh	r2, [r3, #6]
	init_time.month  = 1;
   181ea:	1d3b      	adds	r3, r7, #4
   181ec:	2201      	movs	r2, #1
   181ee:	715a      	strb	r2, [r3, #5]
	init_time.day    = 1;
   181f0:	1d3b      	adds	r3, r7, #4
   181f2:	2201      	movs	r2, #1
   181f4:	711a      	strb	r2, [r3, #4]
	init_time.hour   = 0;
   181f6:	1d3b      	adds	r3, r7, #4
   181f8:	2200      	movs	r2, #0
   181fa:	709a      	strb	r2, [r3, #2]
	init_time.minute = 0;
   181fc:	1d3b      	adds	r3, r7, #4
   181fe:	2200      	movs	r2, #0
   18200:	705a      	strb	r2, [r3, #1]
	init_time.second = 4;
   18202:	1d3b      	adds	r3, r7, #4
   18204:	2204      	movs	r2, #4
   18206:	701a      	strb	r2, [r3, #0]

	config_rtc_calendar.clock_24h     = true;
   18208:	230c      	movs	r3, #12
   1820a:	18fb      	adds	r3, r7, r3
   1820c:	2201      	movs	r2, #1
   1820e:	711a      	strb	r2, [r3, #4]
	config_rtc_calendar.alarm[0].time = init_time;
   18210:	230c      	movs	r3, #12
   18212:	18fb      	adds	r3, r7, r3
   18214:	1d3a      	adds	r2, r7, #4
   18216:	3308      	adds	r3, #8
   18218:	ca03      	ldmia	r2!, {r0, r1}
   1821a:	c303      	stmia	r3!, {r0, r1}
	config_rtc_calendar.alarm[0].mask = RTC_CALENDAR_ALARM_MASK_YEAR;
   1821c:	230c      	movs	r3, #12
   1821e:	18fb      	adds	r3, r7, r3
   18220:	2206      	movs	r2, #6
   18222:	741a      	strb	r2, [r3, #16]

	rtc_calendar_init(&rtc_instance, RTC, &config_rtc_calendar);
   18224:	230c      	movs	r3, #12
   18226:	18fa      	adds	r2, r7, r3
   18228:	4909      	ldr	r1, [pc, #36]	; (18250 <configure_rtc_calendar+0x84>)
   1822a:	4b0a      	ldr	r3, [pc, #40]	; (18254 <configure_rtc_calendar+0x88>)
   1822c:	0018      	movs	r0, r3
   1822e:	4b0a      	ldr	r3, [pc, #40]	; (18258 <configure_rtc_calendar+0x8c>)
   18230:	4798      	blx	r3

	rtc_calendar_enable(&rtc_instance);
   18232:	4b08      	ldr	r3, [pc, #32]	; (18254 <configure_rtc_calendar+0x88>)
   18234:	0018      	movs	r0, r3
   18236:	4b09      	ldr	r3, [pc, #36]	; (1825c <configure_rtc_calendar+0x90>)
   18238:	4798      	blx	r3
}
   1823a:	46c0      	nop			; (mov r8, r8)
   1823c:	46bd      	mov	sp, r7
   1823e:	b008      	add	sp, #32
   18240:	bd80      	pop	{r7, pc}
   18242:	46c0      	nop			; (mov r8, r8)
   18244:	00018129 	.word	0x00018129
   18248:	000180ed 	.word	0x000180ed
   1824c:	000007de 	.word	0x000007de
   18250:	40001400 	.word	0x40001400
   18254:	2000561c 	.word	0x2000561c
   18258:	00013d09 	.word	0x00013d09
   1825c:	00013a35 	.word	0x00013a35

00018260 <disk_initialize>:
 *
 * \return 0 or disk status in combination of DSTATUS bits
 *         (STA_NOINIT, STA_PROTECT).
 */
DSTATUS disk_initialize(BYTE drv)
{
   18260:	b590      	push	{r4, r7, lr}
   18262:	b085      	sub	sp, #20
   18264:	af00      	add	r7, sp, #0
   18266:	0002      	movs	r2, r0
   18268:	1dfb      	adds	r3, r7, #7
   1826a:	701a      	strb	r2, [r3, #0]
	/* Default RTC configuration, 24-hour mode */
	rtc_set_hour_mode(RTC, 0);
#endif

#if (SAMD20 || SAMD21 || SAMR21)
	configure_rtc_calendar();
   1826c:	4b1a      	ldr	r3, [pc, #104]	; (182d8 <disk_initialize+0x78>)
   1826e:	4798      	blx	r3
	/* USB disk with multiple LUNs */
	if (drv > LUN_ID_USB + Lun_usb_get_lun()) {
		return STA_NOINIT;
	}
#else
	if (drv > MAX_LUN) {
   18270:	1dfb      	adds	r3, r7, #7
   18272:	781b      	ldrb	r3, [r3, #0]
   18274:	2b01      	cmp	r3, #1
   18276:	d901      	bls.n	1827c <disk_initialize+0x1c>
		/* At least one of the LUN should be defined */
		return STA_NOINIT;
   18278:	2301      	movs	r3, #1
   1827a:	e029      	b.n	182d0 <disk_initialize+0x70>
	}
#endif
	/* Check LUN ready (USB disk report CTRL_BUSY then CTRL_GOOD) */
	for (i = 0; i < 2; i ++) {
   1827c:	2300      	movs	r3, #0
   1827e:	60fb      	str	r3, [r7, #12]
   18280:	e010      	b.n	182a4 <disk_initialize+0x44>
		mem_status = mem_test_unit_ready(drv);
   18282:	230b      	movs	r3, #11
   18284:	18fc      	adds	r4, r7, r3
   18286:	1dfb      	adds	r3, r7, #7
   18288:	781b      	ldrb	r3, [r3, #0]
   1828a:	0018      	movs	r0, r3
   1828c:	4b13      	ldr	r3, [pc, #76]	; (182dc <disk_initialize+0x7c>)
   1828e:	4798      	blx	r3
   18290:	0003      	movs	r3, r0
   18292:	7023      	strb	r3, [r4, #0]
		if (CTRL_BUSY != mem_status) {
   18294:	230b      	movs	r3, #11
   18296:	18fb      	adds	r3, r7, r3
   18298:	781b      	ldrb	r3, [r3, #0]
   1829a:	2b03      	cmp	r3, #3
   1829c:	d106      	bne.n	182ac <disk_initialize+0x4c>
	for (i = 0; i < 2; i ++) {
   1829e:	68fb      	ldr	r3, [r7, #12]
   182a0:	3301      	adds	r3, #1
   182a2:	60fb      	str	r3, [r7, #12]
   182a4:	68fb      	ldr	r3, [r7, #12]
   182a6:	2b01      	cmp	r3, #1
   182a8:	ddeb      	ble.n	18282 <disk_initialize+0x22>
   182aa:	e000      	b.n	182ae <disk_initialize+0x4e>
			break;
   182ac:	46c0      	nop			; (mov r8, r8)
		}
	}
	if (mem_status != CTRL_GOOD) {
   182ae:	230b      	movs	r3, #11
   182b0:	18fb      	adds	r3, r7, r3
   182b2:	781b      	ldrb	r3, [r3, #0]
   182b4:	2b00      	cmp	r3, #0
   182b6:	d001      	beq.n	182bc <disk_initialize+0x5c>
		return STA_NOINIT;
   182b8:	2301      	movs	r3, #1
   182ba:	e009      	b.n	182d0 <disk_initialize+0x70>
	}

	/* Check Write Protection Status */
	if (mem_wr_protect(drv)) {
   182bc:	1dfb      	adds	r3, r7, #7
   182be:	781b      	ldrb	r3, [r3, #0]
   182c0:	0018      	movs	r0, r3
   182c2:	4b07      	ldr	r3, [pc, #28]	; (182e0 <disk_initialize+0x80>)
   182c4:	4798      	blx	r3
   182c6:	1e03      	subs	r3, r0, #0
   182c8:	d001      	beq.n	182ce <disk_initialize+0x6e>
		return STA_PROTECT;
   182ca:	2304      	movs	r3, #4
   182cc:	e000      	b.n	182d0 <disk_initialize+0x70>
	}

	/* The memory should already be initialized */
	return 0;
   182ce:	2300      	movs	r3, #0
}
   182d0:	0018      	movs	r0, r3
   182d2:	46bd      	mov	sp, r7
   182d4:	b005      	add	sp, #20
   182d6:	bd90      	pop	{r4, r7, pc}
   182d8:	000181cd 	.word	0x000181cd
   182dc:	00012f31 	.word	0x00012f31
   182e0:	00012fe9 	.word	0x00012fe9

000182e4 <disk_status>:
 *
 * \return 0 or disk status in combination of DSTATUS bits
 *         (STA_NOINIT, STA_NODISK, STA_PROTECT).
 */
DSTATUS disk_status(BYTE drv)
{
   182e4:	b580      	push	{r7, lr}
   182e6:	b082      	sub	sp, #8
   182e8:	af00      	add	r7, sp, #0
   182ea:	0002      	movs	r2, r0
   182ec:	1dfb      	adds	r3, r7, #7
   182ee:	701a      	strb	r2, [r3, #0]
	switch (mem_test_unit_ready(drv)) {
   182f0:	1dfb      	adds	r3, r7, #7
   182f2:	781b      	ldrb	r3, [r3, #0]
   182f4:	0018      	movs	r0, r3
   182f6:	4b08      	ldr	r3, [pc, #32]	; (18318 <disk_status+0x34>)
   182f8:	4798      	blx	r3
   182fa:	1e03      	subs	r3, r0, #0
   182fc:	d002      	beq.n	18304 <disk_status+0x20>
   182fe:	2b02      	cmp	r3, #2
   18300:	d002      	beq.n	18308 <disk_status+0x24>
   18302:	e003      	b.n	1830c <disk_status+0x28>
	case CTRL_GOOD:
		return 0;
   18304:	2300      	movs	r3, #0
   18306:	e002      	b.n	1830e <disk_status+0x2a>
	case CTRL_NO_PRESENT:
		return STA_NOINIT | STA_NODISK;
   18308:	2303      	movs	r3, #3
   1830a:	e000      	b.n	1830e <disk_status+0x2a>
	default:
		return STA_NOINIT;
   1830c:	2301      	movs	r3, #1
	}
}
   1830e:	0018      	movs	r0, r3
   18310:	46bd      	mov	sp, r7
   18312:	b002      	add	sp, #8
   18314:	bd80      	pop	{r7, pc}
   18316:	46c0      	nop			; (mov r8, r8)
   18318:	00012f31 	.word	0x00012f31

0001831c <disk_read>:
 * \param count Number of sectors to read (1..255).
 *
 * \return RES_OK for success, otherwise DRESULT error code.
 */
DRESULT disk_read(BYTE drv, BYTE *buff, DWORD sector, BYTE count)
{
   1831c:	b590      	push	{r4, r7, lr}
   1831e:	b089      	sub	sp, #36	; 0x24
   18320:	af00      	add	r7, sp, #0
   18322:	60b9      	str	r1, [r7, #8]
   18324:	607a      	str	r2, [r7, #4]
   18326:	0019      	movs	r1, r3
   18328:	230f      	movs	r3, #15
   1832a:	18fb      	adds	r3, r7, r3
   1832c:	1c02      	adds	r2, r0, #0
   1832e:	701a      	strb	r2, [r3, #0]
   18330:	230e      	movs	r3, #14
   18332:	18fb      	adds	r3, r7, r3
   18334:	1c0a      	adds	r2, r1, #0
   18336:	701a      	strb	r2, [r3, #0]
#if ACCESS_MEM_TO_RAM
	uint8_t uc_sector_size = mem_sector_size(drv);
   18338:	231b      	movs	r3, #27
   1833a:	18fc      	adds	r4, r7, r3
   1833c:	230f      	movs	r3, #15
   1833e:	18fb      	adds	r3, r7, r3
   18340:	781b      	ldrb	r3, [r3, #0]
   18342:	0018      	movs	r0, r3
   18344:	4b28      	ldr	r3, [pc, #160]	; (183e8 <disk_read+0xcc>)
   18346:	4798      	blx	r3
   18348:	0003      	movs	r3, r0
   1834a:	7023      	strb	r3, [r4, #0]
	uint32_t i;
	uint32_t ul_last_sector_num;

	if (uc_sector_size == 0) {
   1834c:	231b      	movs	r3, #27
   1834e:	18fb      	adds	r3, r7, r3
   18350:	781b      	ldrb	r3, [r3, #0]
   18352:	2b00      	cmp	r3, #0
   18354:	d101      	bne.n	1835a <disk_read+0x3e>
		return RES_ERROR;
   18356:	2301      	movs	r3, #1
   18358:	e042      	b.n	183e0 <disk_read+0xc4>
	}

	/* Check valid address */
	mem_read_capacity(drv, &ul_last_sector_num);
   1835a:	2314      	movs	r3, #20
   1835c:	18fa      	adds	r2, r7, r3
   1835e:	230f      	movs	r3, #15
   18360:	18fb      	adds	r3, r7, r3
   18362:	781b      	ldrb	r3, [r3, #0]
   18364:	0011      	movs	r1, r2
   18366:	0018      	movs	r0, r3
   18368:	4b20      	ldr	r3, [pc, #128]	; (183ec <disk_read+0xd0>)
   1836a:	4798      	blx	r3
	if ((sector + count * uc_sector_size) >
   1836c:	230e      	movs	r3, #14
   1836e:	18fb      	adds	r3, r7, r3
   18370:	781b      	ldrb	r3, [r3, #0]
   18372:	221b      	movs	r2, #27
   18374:	18ba      	adds	r2, r7, r2
   18376:	7812      	ldrb	r2, [r2, #0]
   18378:	4353      	muls	r3, r2
   1837a:	001a      	movs	r2, r3
   1837c:	687b      	ldr	r3, [r7, #4]
   1837e:	18d2      	adds	r2, r2, r3
			(ul_last_sector_num + 1) * uc_sector_size) {
   18380:	697b      	ldr	r3, [r7, #20]
   18382:	3301      	adds	r3, #1
   18384:	211b      	movs	r1, #27
   18386:	1879      	adds	r1, r7, r1
   18388:	7809      	ldrb	r1, [r1, #0]
   1838a:	434b      	muls	r3, r1
	if ((sector + count * uc_sector_size) >
   1838c:	429a      	cmp	r2, r3
   1838e:	d901      	bls.n	18394 <disk_read+0x78>
		return RES_PARERR;
   18390:	2304      	movs	r3, #4
   18392:	e025      	b.n	183e0 <disk_read+0xc4>
	}

	/* Read the data */
	for (i = 0; i < count; i++) {
   18394:	2300      	movs	r3, #0
   18396:	61fb      	str	r3, [r7, #28]
   18398:	e01b      	b.n	183d2 <disk_read+0xb6>
		if (memory_2_ram(drv, sector + uc_sector_size * i,
   1839a:	231b      	movs	r3, #27
   1839c:	18fb      	adds	r3, r7, r3
   1839e:	781b      	ldrb	r3, [r3, #0]
   183a0:	69fa      	ldr	r2, [r7, #28]
   183a2:	435a      	muls	r2, r3
   183a4:	687b      	ldr	r3, [r7, #4]
   183a6:	18d1      	adds	r1, r2, r3
				buff + uc_sector_size * SECTOR_SIZE_DEFAULT * i) !=
   183a8:	231b      	movs	r3, #27
   183aa:	18fb      	adds	r3, r7, r3
   183ac:	781b      	ldrb	r3, [r3, #0]
   183ae:	69fa      	ldr	r2, [r7, #28]
   183b0:	4353      	muls	r3, r2
   183b2:	025b      	lsls	r3, r3, #9
   183b4:	68ba      	ldr	r2, [r7, #8]
   183b6:	18d2      	adds	r2, r2, r3
		if (memory_2_ram(drv, sector + uc_sector_size * i,
   183b8:	230f      	movs	r3, #15
   183ba:	18fb      	adds	r3, r7, r3
   183bc:	781b      	ldrb	r3, [r3, #0]
   183be:	0018      	movs	r0, r3
   183c0:	4b0b      	ldr	r3, [pc, #44]	; (183f0 <disk_read+0xd4>)
   183c2:	4798      	blx	r3
   183c4:	1e03      	subs	r3, r0, #0
   183c6:	d001      	beq.n	183cc <disk_read+0xb0>
				CTRL_GOOD) {
			return RES_ERROR;
   183c8:	2301      	movs	r3, #1
   183ca:	e009      	b.n	183e0 <disk_read+0xc4>
	for (i = 0; i < count; i++) {
   183cc:	69fb      	ldr	r3, [r7, #28]
   183ce:	3301      	adds	r3, #1
   183d0:	61fb      	str	r3, [r7, #28]
   183d2:	230e      	movs	r3, #14
   183d4:	18fb      	adds	r3, r7, r3
   183d6:	781a      	ldrb	r2, [r3, #0]
   183d8:	69fb      	ldr	r3, [r7, #28]
   183da:	429a      	cmp	r2, r3
   183dc:	d8dd      	bhi.n	1839a <disk_read+0x7e>
		}
	}

	return RES_OK;
   183de:	2300      	movs	r3, #0

#else
	return RES_ERROR;
#endif
}
   183e0:	0018      	movs	r0, r3
   183e2:	46bd      	mov	sp, r7
   183e4:	b009      	add	sp, #36	; 0x24
   183e6:	bd90      	pop	{r4, r7, pc}
   183e8:	00012fbd 	.word	0x00012fbd
   183ec:	00012f71 	.word	0x00012f71
   183f0:	00013031 	.word	0x00013031

000183f4 <disk_write>:
 *
 * \return RES_OK for success, otherwise DRESULT error code.
 */
#if _READONLY == 0
DRESULT disk_write(BYTE drv, BYTE const *buff, DWORD sector, BYTE count)
{
   183f4:	b590      	push	{r4, r7, lr}
   183f6:	b089      	sub	sp, #36	; 0x24
   183f8:	af00      	add	r7, sp, #0
   183fa:	60b9      	str	r1, [r7, #8]
   183fc:	607a      	str	r2, [r7, #4]
   183fe:	0019      	movs	r1, r3
   18400:	230f      	movs	r3, #15
   18402:	18fb      	adds	r3, r7, r3
   18404:	1c02      	adds	r2, r0, #0
   18406:	701a      	strb	r2, [r3, #0]
   18408:	230e      	movs	r3, #14
   1840a:	18fb      	adds	r3, r7, r3
   1840c:	1c0a      	adds	r2, r1, #0
   1840e:	701a      	strb	r2, [r3, #0]
#if ACCESS_MEM_TO_RAM
	uint8_t uc_sector_size = mem_sector_size(drv);
   18410:	231b      	movs	r3, #27
   18412:	18fc      	adds	r4, r7, r3
   18414:	230f      	movs	r3, #15
   18416:	18fb      	adds	r3, r7, r3
   18418:	781b      	ldrb	r3, [r3, #0]
   1841a:	0018      	movs	r0, r3
   1841c:	4b28      	ldr	r3, [pc, #160]	; (184c0 <disk_write+0xcc>)
   1841e:	4798      	blx	r3
   18420:	0003      	movs	r3, r0
   18422:	7023      	strb	r3, [r4, #0]
	uint32_t i;
	uint32_t ul_last_sector_num;

	if (uc_sector_size == 0) {
   18424:	231b      	movs	r3, #27
   18426:	18fb      	adds	r3, r7, r3
   18428:	781b      	ldrb	r3, [r3, #0]
   1842a:	2b00      	cmp	r3, #0
   1842c:	d101      	bne.n	18432 <disk_write+0x3e>
		return RES_ERROR;
   1842e:	2301      	movs	r3, #1
   18430:	e042      	b.n	184b8 <disk_write+0xc4>
	}

	/* Check valid address */
	mem_read_capacity(drv, &ul_last_sector_num);
   18432:	2314      	movs	r3, #20
   18434:	18fa      	adds	r2, r7, r3
   18436:	230f      	movs	r3, #15
   18438:	18fb      	adds	r3, r7, r3
   1843a:	781b      	ldrb	r3, [r3, #0]
   1843c:	0011      	movs	r1, r2
   1843e:	0018      	movs	r0, r3
   18440:	4b20      	ldr	r3, [pc, #128]	; (184c4 <disk_write+0xd0>)
   18442:	4798      	blx	r3
	if ((sector + count * uc_sector_size) >
   18444:	230e      	movs	r3, #14
   18446:	18fb      	adds	r3, r7, r3
   18448:	781b      	ldrb	r3, [r3, #0]
   1844a:	221b      	movs	r2, #27
   1844c:	18ba      	adds	r2, r7, r2
   1844e:	7812      	ldrb	r2, [r2, #0]
   18450:	4353      	muls	r3, r2
   18452:	001a      	movs	r2, r3
   18454:	687b      	ldr	r3, [r7, #4]
   18456:	18d2      	adds	r2, r2, r3
			(ul_last_sector_num + 1) * uc_sector_size) {
   18458:	697b      	ldr	r3, [r7, #20]
   1845a:	3301      	adds	r3, #1
   1845c:	211b      	movs	r1, #27
   1845e:	1879      	adds	r1, r7, r1
   18460:	7809      	ldrb	r1, [r1, #0]
   18462:	434b      	muls	r3, r1
	if ((sector + count * uc_sector_size) >
   18464:	429a      	cmp	r2, r3
   18466:	d901      	bls.n	1846c <disk_write+0x78>
		return RES_PARERR;
   18468:	2304      	movs	r3, #4
   1846a:	e025      	b.n	184b8 <disk_write+0xc4>
	}

	/* Write the data */
	for (i = 0; i < count; i++) {
   1846c:	2300      	movs	r3, #0
   1846e:	61fb      	str	r3, [r7, #28]
   18470:	e01b      	b.n	184aa <disk_write+0xb6>
		if (ram_2_memory(drv, sector + uc_sector_size * i,
   18472:	231b      	movs	r3, #27
   18474:	18fb      	adds	r3, r7, r3
   18476:	781b      	ldrb	r3, [r3, #0]
   18478:	69fa      	ldr	r2, [r7, #28]
   1847a:	435a      	muls	r2, r3
   1847c:	687b      	ldr	r3, [r7, #4]
   1847e:	18d1      	adds	r1, r2, r3
				buff + uc_sector_size * SECTOR_SIZE_DEFAULT * i) !=
   18480:	231b      	movs	r3, #27
   18482:	18fb      	adds	r3, r7, r3
   18484:	781b      	ldrb	r3, [r3, #0]
   18486:	69fa      	ldr	r2, [r7, #28]
   18488:	4353      	muls	r3, r2
   1848a:	025b      	lsls	r3, r3, #9
   1848c:	68ba      	ldr	r2, [r7, #8]
   1848e:	18d2      	adds	r2, r2, r3
		if (ram_2_memory(drv, sector + uc_sector_size * i,
   18490:	230f      	movs	r3, #15
   18492:	18fb      	adds	r3, r7, r3
   18494:	781b      	ldrb	r3, [r3, #0]
   18496:	0018      	movs	r0, r3
   18498:	4b0b      	ldr	r3, [pc, #44]	; (184c8 <disk_write+0xd4>)
   1849a:	4798      	blx	r3
   1849c:	1e03      	subs	r3, r0, #0
   1849e:	d001      	beq.n	184a4 <disk_write+0xb0>
				CTRL_GOOD) {
			return RES_ERROR;
   184a0:	2301      	movs	r3, #1
   184a2:	e009      	b.n	184b8 <disk_write+0xc4>
	for (i = 0; i < count; i++) {
   184a4:	69fb      	ldr	r3, [r7, #28]
   184a6:	3301      	adds	r3, #1
   184a8:	61fb      	str	r3, [r7, #28]
   184aa:	230e      	movs	r3, #14
   184ac:	18fb      	adds	r3, r7, r3
   184ae:	781a      	ldrb	r2, [r3, #0]
   184b0:	69fb      	ldr	r3, [r7, #28]
   184b2:	429a      	cmp	r2, r3
   184b4:	d8dd      	bhi.n	18472 <disk_write+0x7e>
		}
	}

	return RES_OK;
   184b6:	2300      	movs	r3, #0

#else
	return RES_ERROR;
#endif
}
   184b8:	0018      	movs	r0, r3
   184ba:	46bd      	mov	sp, r7
   184bc:	b009      	add	sp, #36	; 0x24
   184be:	bd90      	pop	{r4, r7, pc}
   184c0:	00012fbd 	.word	0x00012fbd
   184c4:	00012f71 	.word	0x00012f71
   184c8:	00013085 	.word	0x00013085

000184cc <disk_ioctl>:
 * \param buff Buffer to send/receive control data.
 *
 * \return RES_OK for success, otherwise DRESULT error code.
 */
DRESULT disk_ioctl(BYTE drv, BYTE ctrl, void *buff)
{
   184cc:	b590      	push	{r4, r7, lr}
   184ce:	b085      	sub	sp, #20
   184d0:	af00      	add	r7, sp, #0
   184d2:	603a      	str	r2, [r7, #0]
   184d4:	1dfb      	adds	r3, r7, #7
   184d6:	1c02      	adds	r2, r0, #0
   184d8:	701a      	strb	r2, [r3, #0]
   184da:	1dbb      	adds	r3, r7, #6
   184dc:	1c0a      	adds	r2, r1, #0
   184de:	701a      	strb	r2, [r3, #0]
	DRESULT res = RES_PARERR;
   184e0:	230f      	movs	r3, #15
   184e2:	18fb      	adds	r3, r7, r3
   184e4:	2204      	movs	r2, #4
   184e6:	701a      	strb	r2, [r3, #0]

	switch (ctrl) {
   184e8:	1dbb      	adds	r3, r7, #6
   184ea:	781b      	ldrb	r3, [r3, #0]
   184ec:	2b01      	cmp	r3, #1
   184ee:	d00f      	beq.n	18510 <disk_ioctl+0x44>
   184f0:	dc02      	bgt.n	184f8 <disk_ioctl+0x2c>
   184f2:	2b00      	cmp	r3, #0
   184f4:	d044      	beq.n	18580 <disk_ioctl+0xb4>
   184f6:	e054      	b.n	185a2 <disk_ioctl+0xd6>
   184f8:	2b02      	cmp	r3, #2
   184fa:	d01a      	beq.n	18532 <disk_ioctl+0x66>
   184fc:	2b03      	cmp	r3, #3
   184fe:	d150      	bne.n	185a2 <disk_ioctl+0xd6>
	case GET_BLOCK_SIZE:
		*(DWORD *)buff = 1;
   18500:	683b      	ldr	r3, [r7, #0]
   18502:	2201      	movs	r2, #1
   18504:	601a      	str	r2, [r3, #0]
		res = RES_OK;
   18506:	230f      	movs	r3, #15
   18508:	18fb      	adds	r3, r7, r3
   1850a:	2200      	movs	r2, #0
   1850c:	701a      	strb	r2, [r3, #0]
		break;
   1850e:	e04c      	b.n	185aa <disk_ioctl+0xde>
	case GET_SECTOR_COUNT:
	{
		uint32_t ul_last_sector_num;

		/* Check valid address */
		mem_read_capacity(drv, &ul_last_sector_num);
   18510:	2308      	movs	r3, #8
   18512:	18fa      	adds	r2, r7, r3
   18514:	1dfb      	adds	r3, r7, #7
   18516:	781b      	ldrb	r3, [r3, #0]
   18518:	0011      	movs	r1, r2
   1851a:	0018      	movs	r0, r3
   1851c:	4b26      	ldr	r3, [pc, #152]	; (185b8 <disk_ioctl+0xec>)
   1851e:	4798      	blx	r3

		*(DWORD *)buff = ul_last_sector_num + 1;
   18520:	68bb      	ldr	r3, [r7, #8]
   18522:	1c5a      	adds	r2, r3, #1
   18524:	683b      	ldr	r3, [r7, #0]
   18526:	601a      	str	r2, [r3, #0]

		res = RES_OK;
   18528:	230f      	movs	r3, #15
   1852a:	18fb      	adds	r3, r7, r3
   1852c:	2200      	movs	r2, #0
   1852e:	701a      	strb	r2, [r3, #0]
	}
	break;
   18530:	e03b      	b.n	185aa <disk_ioctl+0xde>

	/* Get sectors on the disk (WORD) */
	case GET_SECTOR_SIZE:
	{
		uint8_t uc_sector_size = mem_sector_size(drv);
   18532:	230e      	movs	r3, #14
   18534:	18fc      	adds	r4, r7, r3
   18536:	1dfb      	adds	r3, r7, #7
   18538:	781b      	ldrb	r3, [r3, #0]
   1853a:	0018      	movs	r0, r3
   1853c:	4b1f      	ldr	r3, [pc, #124]	; (185bc <disk_ioctl+0xf0>)
   1853e:	4798      	blx	r3
   18540:	0003      	movs	r3, r0
   18542:	7023      	strb	r3, [r4, #0]

		if ((uc_sector_size != SECTOR_SIZE_512) &&
   18544:	230e      	movs	r3, #14
   18546:	18fb      	adds	r3, r7, r3
   18548:	781b      	ldrb	r3, [r3, #0]
   1854a:	2b01      	cmp	r3, #1
   1854c:	d010      	beq.n	18570 <disk_ioctl+0xa4>
   1854e:	230e      	movs	r3, #14
   18550:	18fb      	adds	r3, r7, r3
   18552:	781b      	ldrb	r3, [r3, #0]
   18554:	2b02      	cmp	r3, #2
   18556:	d00b      	beq.n	18570 <disk_ioctl+0xa4>
				(uc_sector_size != SECTOR_SIZE_1024) &&
   18558:	230e      	movs	r3, #14
   1855a:	18fb      	adds	r3, r7, r3
   1855c:	781b      	ldrb	r3, [r3, #0]
   1855e:	2b04      	cmp	r3, #4
   18560:	d006      	beq.n	18570 <disk_ioctl+0xa4>
				(uc_sector_size != SECTOR_SIZE_2048) &&
   18562:	230e      	movs	r3, #14
   18564:	18fb      	adds	r3, r7, r3
   18566:	781b      	ldrb	r3, [r3, #0]
   18568:	2b08      	cmp	r3, #8
   1856a:	d001      	beq.n	18570 <disk_ioctl+0xa4>
				(uc_sector_size != SECTOR_SIZE_4096)) {
			/* The sector size is not supported by the FatFS */
			return RES_ERROR;
   1856c:	2301      	movs	r3, #1
   1856e:	e01f      	b.n	185b0 <disk_ioctl+0xe4>
		}

		*(U8 *)buff = uc_sector_size * SECTOR_SIZE_DEFAULT;
   18570:	683b      	ldr	r3, [r7, #0]
   18572:	2200      	movs	r2, #0
   18574:	701a      	strb	r2, [r3, #0]

		res = RES_OK;
   18576:	230f      	movs	r3, #15
   18578:	18fb      	adds	r3, r7, r3
   1857a:	2200      	movs	r2, #0
   1857c:	701a      	strb	r2, [r3, #0]
	}
	break;
   1857e:	e014      	b.n	185aa <disk_ioctl+0xde>

	/* Make sure that data has been written */
	case CTRL_SYNC:
		if (mem_test_unit_ready(drv) == CTRL_GOOD) {
   18580:	1dfb      	adds	r3, r7, #7
   18582:	781b      	ldrb	r3, [r3, #0]
   18584:	0018      	movs	r0, r3
   18586:	4b0e      	ldr	r3, [pc, #56]	; (185c0 <disk_ioctl+0xf4>)
   18588:	4798      	blx	r3
   1858a:	1e03      	subs	r3, r0, #0
   1858c:	d104      	bne.n	18598 <disk_ioctl+0xcc>
			res = RES_OK;
   1858e:	230f      	movs	r3, #15
   18590:	18fb      	adds	r3, r7, r3
   18592:	2200      	movs	r2, #0
   18594:	701a      	strb	r2, [r3, #0]
		} else {
			res = RES_NOTRDY;
		}
		break;
   18596:	e008      	b.n	185aa <disk_ioctl+0xde>
			res = RES_NOTRDY;
   18598:	230f      	movs	r3, #15
   1859a:	18fb      	adds	r3, r7, r3
   1859c:	2203      	movs	r2, #3
   1859e:	701a      	strb	r2, [r3, #0]
		break;
   185a0:	e003      	b.n	185aa <disk_ioctl+0xde>

	default:
		res = RES_PARERR;
   185a2:	230f      	movs	r3, #15
   185a4:	18fb      	adds	r3, r7, r3
   185a6:	2204      	movs	r2, #4
   185a8:	701a      	strb	r2, [r3, #0]
	}

	return res;
   185aa:	230f      	movs	r3, #15
   185ac:	18fb      	adds	r3, r7, r3
   185ae:	781b      	ldrb	r3, [r3, #0]
}
   185b0:	0018      	movs	r0, r3
   185b2:	46bd      	mov	sp, r7
   185b4:	b005      	add	sp, #20
   185b6:	bd90      	pop	{r4, r7, pc}
   185b8:	00012f71 	.word	0x00012f71
   185bc:	00012fbd 	.word	0x00012fbd
   185c0:	00012f31 	.word	0x00012f31

000185c4 <get_fattime>:
 * bit4:0    Second (0..29)
 *
 * \return Current time.
 */
uint32_t get_fattime(void)
{
   185c4:	b580      	push	{r7, lr}
   185c6:	b084      	sub	sp, #16
   185c8:	af00      	add	r7, sp, #0
	uint32_t ul_time;
	struct rtc_calendar_time current_time;

	/* Retrieve date and time */
	rtc_calendar_get_time(&rtc_instance, &current_time);
   185ca:	1d3a      	adds	r2, r7, #4
   185cc:	4b12      	ldr	r3, [pc, #72]	; (18618 <get_fattime+0x54>)
   185ce:	0011      	movs	r1, r2
   185d0:	0018      	movs	r0, r3
   185d2:	4b12      	ldr	r3, [pc, #72]	; (1861c <get_fattime+0x58>)
   185d4:	4798      	blx	r3

	ul_time = ((current_time.year - 1980) << 25)
   185d6:	1d3b      	adds	r3, r7, #4
   185d8:	88db      	ldrh	r3, [r3, #6]
   185da:	4a11      	ldr	r2, [pc, #68]	; (18620 <get_fattime+0x5c>)
   185dc:	4694      	mov	ip, r2
   185de:	4463      	add	r3, ip
   185e0:	065a      	lsls	r2, r3, #25
			| (current_time.month << 21)
   185e2:	1d3b      	adds	r3, r7, #4
   185e4:	795b      	ldrb	r3, [r3, #5]
   185e6:	055b      	lsls	r3, r3, #21
   185e8:	431a      	orrs	r2, r3
			| (current_time.day << 16)
   185ea:	1d3b      	adds	r3, r7, #4
   185ec:	791b      	ldrb	r3, [r3, #4]
   185ee:	041b      	lsls	r3, r3, #16
   185f0:	431a      	orrs	r2, r3
			| (current_time.hour << 11)
   185f2:	1d3b      	adds	r3, r7, #4
   185f4:	789b      	ldrb	r3, [r3, #2]
   185f6:	02db      	lsls	r3, r3, #11
   185f8:	431a      	orrs	r2, r3
			| (current_time.minute << 5)
   185fa:	1d3b      	adds	r3, r7, #4
   185fc:	785b      	ldrb	r3, [r3, #1]
   185fe:	015b      	lsls	r3, r3, #5
   18600:	4313      	orrs	r3, r2
			| ((current_time.second >> 1) << 0);
   18602:	1d3a      	adds	r2, r7, #4
   18604:	7812      	ldrb	r2, [r2, #0]
   18606:	0852      	lsrs	r2, r2, #1
   18608:	b2d2      	uxtb	r2, r2
   1860a:	4313      	orrs	r3, r2
	ul_time = ((current_time.year - 1980) << 25)
   1860c:	60fb      	str	r3, [r7, #12]

	return ul_time;
   1860e:	68fb      	ldr	r3, [r7, #12]
}
   18610:	0018      	movs	r0, r3
   18612:	46bd      	mov	sp, r7
   18614:	b004      	add	sp, #16
   18616:	bd80      	pop	{r7, pc}
   18618:	2000561c 	.word	0x2000561c
   1861c:	00013d9d 	.word	0x00013d9d
   18620:	fffff844 	.word	0xfffff844

00018624 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
   18624:	b580      	push	{r7, lr}
   18626:	b086      	sub	sp, #24
   18628:	af00      	add	r7, sp, #0
   1862a:	60f8      	str	r0, [r7, #12]
   1862c:	60b9      	str	r1, [r7, #8]
   1862e:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
   18630:	68fb      	ldr	r3, [r7, #12]
   18632:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
   18634:	68bb      	ldr	r3, [r7, #8]
   18636:	613b      	str	r3, [r7, #16]
		*(int*)d = *(int*)s;
		d += sizeof(int); s += sizeof(int);
		cnt -= sizeof(int);
	}
#endif
	while (cnt--)
   18638:	e007      	b.n	1864a <mem_cpy+0x26>
		*d++ = *s++;
   1863a:	697b      	ldr	r3, [r7, #20]
   1863c:	1c5a      	adds	r2, r3, #1
   1863e:	617a      	str	r2, [r7, #20]
   18640:	693a      	ldr	r2, [r7, #16]
   18642:	1c51      	adds	r1, r2, #1
   18644:	6139      	str	r1, [r7, #16]
   18646:	7812      	ldrb	r2, [r2, #0]
   18648:	701a      	strb	r2, [r3, #0]
	while (cnt--)
   1864a:	687b      	ldr	r3, [r7, #4]
   1864c:	1e5a      	subs	r2, r3, #1
   1864e:	607a      	str	r2, [r7, #4]
   18650:	2b00      	cmp	r3, #0
   18652:	d1f2      	bne.n	1863a <mem_cpy+0x16>
}
   18654:	46c0      	nop			; (mov r8, r8)
   18656:	46bd      	mov	sp, r7
   18658:	b006      	add	sp, #24
   1865a:	bd80      	pop	{r7, pc}

0001865c <mem_set>:

/* Fill memory */
static
void mem_set (void* dst, int val, UINT cnt) {
   1865c:	b580      	push	{r7, lr}
   1865e:	b086      	sub	sp, #24
   18660:	af00      	add	r7, sp, #0
   18662:	60f8      	str	r0, [r7, #12]
   18664:	60b9      	str	r1, [r7, #8]
   18666:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
   18668:	68fb      	ldr	r3, [r7, #12]
   1866a:	617b      	str	r3, [r7, #20]

	while (cnt--)
   1866c:	e005      	b.n	1867a <mem_set+0x1e>
		*d++ = (BYTE)val;
   1866e:	697b      	ldr	r3, [r7, #20]
   18670:	1c5a      	adds	r2, r3, #1
   18672:	617a      	str	r2, [r7, #20]
   18674:	68ba      	ldr	r2, [r7, #8]
   18676:	b2d2      	uxtb	r2, r2
   18678:	701a      	strb	r2, [r3, #0]
	while (cnt--)
   1867a:	687b      	ldr	r3, [r7, #4]
   1867c:	1e5a      	subs	r2, r3, #1
   1867e:	607a      	str	r2, [r7, #4]
   18680:	2b00      	cmp	r3, #0
   18682:	d1f4      	bne.n	1866e <mem_set+0x12>
}
   18684:	46c0      	nop			; (mov r8, r8)
   18686:	46bd      	mov	sp, r7
   18688:	b006      	add	sp, #24
   1868a:	bd80      	pop	{r7, pc}

0001868c <mem_cmp>:

/* Compare memory to memory */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {
   1868c:	b580      	push	{r7, lr}
   1868e:	b088      	sub	sp, #32
   18690:	af00      	add	r7, sp, #0
   18692:	60f8      	str	r0, [r7, #12]
   18694:	60b9      	str	r1, [r7, #8]
   18696:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
   18698:	68fb      	ldr	r3, [r7, #12]
   1869a:	61fb      	str	r3, [r7, #28]
   1869c:	68bb      	ldr	r3, [r7, #8]
   1869e:	61bb      	str	r3, [r7, #24]
	int r = 0;
   186a0:	2300      	movs	r3, #0
   186a2:	617b      	str	r3, [r7, #20]

	while (cnt-- && (r = *d++ - *s++) == 0) ;
   186a4:	46c0      	nop			; (mov r8, r8)
   186a6:	687b      	ldr	r3, [r7, #4]
   186a8:	1e5a      	subs	r2, r3, #1
   186aa:	607a      	str	r2, [r7, #4]
   186ac:	2b00      	cmp	r3, #0
   186ae:	d00d      	beq.n	186cc <mem_cmp+0x40>
   186b0:	69fb      	ldr	r3, [r7, #28]
   186b2:	1c5a      	adds	r2, r3, #1
   186b4:	61fa      	str	r2, [r7, #28]
   186b6:	781b      	ldrb	r3, [r3, #0]
   186b8:	0019      	movs	r1, r3
   186ba:	69bb      	ldr	r3, [r7, #24]
   186bc:	1c5a      	adds	r2, r3, #1
   186be:	61ba      	str	r2, [r7, #24]
   186c0:	781b      	ldrb	r3, [r3, #0]
   186c2:	1acb      	subs	r3, r1, r3
   186c4:	617b      	str	r3, [r7, #20]
   186c6:	697b      	ldr	r3, [r7, #20]
   186c8:	2b00      	cmp	r3, #0
   186ca:	d0ec      	beq.n	186a6 <mem_cmp+0x1a>
	return r;
   186cc:	697b      	ldr	r3, [r7, #20]
}
   186ce:	0018      	movs	r0, r3
   186d0:	46bd      	mov	sp, r7
   186d2:	b008      	add	sp, #32
   186d4:	bd80      	pop	{r7, pc}

000186d6 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {
   186d6:	b580      	push	{r7, lr}
   186d8:	b082      	sub	sp, #8
   186da:	af00      	add	r7, sp, #0
   186dc:	6078      	str	r0, [r7, #4]
   186de:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
   186e0:	e002      	b.n	186e8 <chk_chr+0x12>
   186e2:	687b      	ldr	r3, [r7, #4]
   186e4:	3301      	adds	r3, #1
   186e6:	607b      	str	r3, [r7, #4]
   186e8:	687b      	ldr	r3, [r7, #4]
   186ea:	781b      	ldrb	r3, [r3, #0]
   186ec:	2b00      	cmp	r3, #0
   186ee:	d005      	beq.n	186fc <chk_chr+0x26>
   186f0:	687b      	ldr	r3, [r7, #4]
   186f2:	781b      	ldrb	r3, [r3, #0]
   186f4:	001a      	movs	r2, r3
   186f6:	683b      	ldr	r3, [r7, #0]
   186f8:	429a      	cmp	r2, r3
   186fa:	d1f2      	bne.n	186e2 <chk_chr+0xc>
	return *str;
   186fc:	687b      	ldr	r3, [r7, #4]
   186fe:	781b      	ldrb	r3, [r3, #0]
}
   18700:	0018      	movs	r0, r3
   18702:	46bd      	mov	sp, r7
   18704:	b002      	add	sp, #8
   18706:	bd80      	pop	{r7, pc}

00018708 <move_window>:
static
FRESULT move_window (
	FATFS *fs,		/* File system object */
	DWORD sector	/* Sector number to make appearance in the fs->win[] */
)					/* Move to zero only writes back dirty window */
{
   18708:	b590      	push	{r4, r7, lr}
   1870a:	b085      	sub	sp, #20
   1870c:	af00      	add	r7, sp, #0
   1870e:	6078      	str	r0, [r7, #4]
   18710:	6039      	str	r1, [r7, #0]
	DWORD wsect;


	wsect = fs->winsect;
   18712:	687b      	ldr	r3, [r7, #4]
   18714:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   18716:	60fb      	str	r3, [r7, #12]
	if (wsect != sector) {	/* Changed current window */
   18718:	68fa      	ldr	r2, [r7, #12]
   1871a:	683b      	ldr	r3, [r7, #0]
   1871c:	429a      	cmp	r2, r3
   1871e:	d04e      	beq.n	187be <move_window+0xb6>
#if !_FS_READONLY
		if (fs->wflag) {	/* Write back dirty window if needed */
   18720:	687b      	ldr	r3, [r7, #4]
   18722:	791b      	ldrb	r3, [r3, #4]
   18724:	2b00      	cmp	r3, #0
   18726:	d037      	beq.n	18798 <move_window+0x90>
			if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK)
   18728:	687b      	ldr	r3, [r7, #4]
   1872a:	7858      	ldrb	r0, [r3, #1]
   1872c:	687b      	ldr	r3, [r7, #4]
   1872e:	3330      	adds	r3, #48	; 0x30
   18730:	0019      	movs	r1, r3
   18732:	68fa      	ldr	r2, [r7, #12]
   18734:	2301      	movs	r3, #1
   18736:	4c24      	ldr	r4, [pc, #144]	; (187c8 <move_window+0xc0>)
   18738:	47a0      	blx	r4
   1873a:	1e03      	subs	r3, r0, #0
   1873c:	d001      	beq.n	18742 <move_window+0x3a>
				return FR_DISK_ERR;
   1873e:	2301      	movs	r3, #1
   18740:	e03e      	b.n	187c0 <move_window+0xb8>
			fs->wflag = 0;
   18742:	687b      	ldr	r3, [r7, #4]
   18744:	2200      	movs	r2, #0
   18746:	711a      	strb	r2, [r3, #4]
			if (wsect < (fs->fatbase + fs->fsize)) {	/* In FAT area */
   18748:	687b      	ldr	r3, [r7, #4]
   1874a:	6a1a      	ldr	r2, [r3, #32]
   1874c:	687b      	ldr	r3, [r7, #4]
   1874e:	69db      	ldr	r3, [r3, #28]
   18750:	18d2      	adds	r2, r2, r3
   18752:	68fb      	ldr	r3, [r7, #12]
   18754:	429a      	cmp	r2, r3
   18756:	d91f      	bls.n	18798 <move_window+0x90>
				BYTE nf;
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
   18758:	230b      	movs	r3, #11
   1875a:	18fb      	adds	r3, r7, r3
   1875c:	687a      	ldr	r2, [r7, #4]
   1875e:	78d2      	ldrb	r2, [r2, #3]
   18760:	701a      	strb	r2, [r3, #0]
   18762:	e014      	b.n	1878e <move_window+0x86>
					wsect += fs->fsize;
   18764:	687b      	ldr	r3, [r7, #4]
   18766:	69db      	ldr	r3, [r3, #28]
   18768:	68fa      	ldr	r2, [r7, #12]
   1876a:	18d3      	adds	r3, r2, r3
   1876c:	60fb      	str	r3, [r7, #12]
					disk_write(fs->drv, fs->win, wsect, 1);
   1876e:	687b      	ldr	r3, [r7, #4]
   18770:	7858      	ldrb	r0, [r3, #1]
   18772:	687b      	ldr	r3, [r7, #4]
   18774:	3330      	adds	r3, #48	; 0x30
   18776:	0019      	movs	r1, r3
   18778:	68fa      	ldr	r2, [r7, #12]
   1877a:	2301      	movs	r3, #1
   1877c:	4c12      	ldr	r4, [pc, #72]	; (187c8 <move_window+0xc0>)
   1877e:	47a0      	blx	r4
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
   18780:	230b      	movs	r3, #11
   18782:	18fb      	adds	r3, r7, r3
   18784:	781a      	ldrb	r2, [r3, #0]
   18786:	230b      	movs	r3, #11
   18788:	18fb      	adds	r3, r7, r3
   1878a:	3a01      	subs	r2, #1
   1878c:	701a      	strb	r2, [r3, #0]
   1878e:	230b      	movs	r3, #11
   18790:	18fb      	adds	r3, r7, r3
   18792:	781b      	ldrb	r3, [r3, #0]
   18794:	2b01      	cmp	r3, #1
   18796:	d8e5      	bhi.n	18764 <move_window+0x5c>
				}
			}
		}
#endif
		if (sector) {
   18798:	683b      	ldr	r3, [r7, #0]
   1879a:	2b00      	cmp	r3, #0
   1879c:	d00f      	beq.n	187be <move_window+0xb6>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK)
   1879e:	687b      	ldr	r3, [r7, #4]
   187a0:	7858      	ldrb	r0, [r3, #1]
   187a2:	687b      	ldr	r3, [r7, #4]
   187a4:	3330      	adds	r3, #48	; 0x30
   187a6:	0019      	movs	r1, r3
   187a8:	683a      	ldr	r2, [r7, #0]
   187aa:	2301      	movs	r3, #1
   187ac:	4c07      	ldr	r4, [pc, #28]	; (187cc <move_window+0xc4>)
   187ae:	47a0      	blx	r4
   187b0:	1e03      	subs	r3, r0, #0
   187b2:	d001      	beq.n	187b8 <move_window+0xb0>
				return FR_DISK_ERR;
   187b4:	2301      	movs	r3, #1
   187b6:	e003      	b.n	187c0 <move_window+0xb8>
			fs->winsect = sector;
   187b8:	687b      	ldr	r3, [r7, #4]
   187ba:	683a      	ldr	r2, [r7, #0]
   187bc:	62da      	str	r2, [r3, #44]	; 0x2c
		}
	}

	return FR_OK;
   187be:	2300      	movs	r3, #0
}
   187c0:	0018      	movs	r0, r3
   187c2:	46bd      	mov	sp, r7
   187c4:	b005      	add	sp, #20
   187c6:	bd90      	pop	{r4, r7, pc}
   187c8:	000183f5 	.word	0x000183f5
   187cc:	0001831d 	.word	0x0001831d

000187d0 <sync>:
#if !_FS_READONLY
static
FRESULT sync (	/* FR_OK: successful, FR_DISK_ERR: failed */
	FATFS *fs	/* File system object */
)
{
   187d0:	b590      	push	{r4, r7, lr}
   187d2:	b085      	sub	sp, #20
   187d4:	af00      	add	r7, sp, #0
   187d6:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = move_window(fs, 0);
   187d8:	230f      	movs	r3, #15
   187da:	18fc      	adds	r4, r7, r3
   187dc:	687b      	ldr	r3, [r7, #4]
   187de:	2100      	movs	r1, #0
   187e0:	0018      	movs	r0, r3
   187e2:	4b52      	ldr	r3, [pc, #328]	; (1892c <sync+0x15c>)
   187e4:	4798      	blx	r3
   187e6:	0003      	movs	r3, r0
   187e8:	7023      	strb	r3, [r4, #0]
	if (res == FR_OK) {
   187ea:	230f      	movs	r3, #15
   187ec:	18fb      	adds	r3, r7, r3
   187ee:	781b      	ldrb	r3, [r3, #0]
   187f0:	2b00      	cmp	r3, #0
   187f2:	d000      	beq.n	187f6 <sync+0x26>
   187f4:	e093      	b.n	1891e <sync+0x14e>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag) {
   187f6:	687b      	ldr	r3, [r7, #4]
   187f8:	781b      	ldrb	r3, [r3, #0]
   187fa:	2b03      	cmp	r3, #3
   187fc:	d000      	beq.n	18800 <sync+0x30>
   187fe:	e081      	b.n	18904 <sync+0x134>
   18800:	687b      	ldr	r3, [r7, #4]
   18802:	795b      	ldrb	r3, [r3, #5]
   18804:	2b00      	cmp	r3, #0
   18806:	d07d      	beq.n	18904 <sync+0x134>
			fs->winsect = 0;
   18808:	687b      	ldr	r3, [r7, #4]
   1880a:	2200      	movs	r2, #0
   1880c:	62da      	str	r2, [r3, #44]	; 0x2c
			/* Create FSInfo structure */
			mem_set(fs->win, 0, 512);
   1880e:	687b      	ldr	r3, [r7, #4]
   18810:	3330      	adds	r3, #48	; 0x30
   18812:	0018      	movs	r0, r3
   18814:	2380      	movs	r3, #128	; 0x80
   18816:	009b      	lsls	r3, r3, #2
   18818:	001a      	movs	r2, r3
   1881a:	2100      	movs	r1, #0
   1881c:	4b44      	ldr	r3, [pc, #272]	; (18930 <sync+0x160>)
   1881e:	4798      	blx	r3
			ST_WORD(fs->win+BS_55AA, 0xAA55);
   18820:	687b      	ldr	r3, [r7, #4]
   18822:	4a44      	ldr	r2, [pc, #272]	; (18934 <sync+0x164>)
   18824:	2155      	movs	r1, #85	; 0x55
   18826:	5499      	strb	r1, [r3, r2]
   18828:	687b      	ldr	r3, [r7, #4]
   1882a:	4a43      	ldr	r2, [pc, #268]	; (18938 <sync+0x168>)
   1882c:	21aa      	movs	r1, #170	; 0xaa
   1882e:	5499      	strb	r1, [r3, r2]
			ST_DWORD(fs->win+FSI_LeadSig, 0x41615252);
   18830:	687b      	ldr	r3, [r7, #4]
   18832:	2230      	movs	r2, #48	; 0x30
   18834:	2152      	movs	r1, #82	; 0x52
   18836:	5499      	strb	r1, [r3, r2]
   18838:	687b      	ldr	r3, [r7, #4]
   1883a:	2231      	movs	r2, #49	; 0x31
   1883c:	2152      	movs	r1, #82	; 0x52
   1883e:	5499      	strb	r1, [r3, r2]
   18840:	687b      	ldr	r3, [r7, #4]
   18842:	2232      	movs	r2, #50	; 0x32
   18844:	2161      	movs	r1, #97	; 0x61
   18846:	5499      	strb	r1, [r3, r2]
   18848:	687b      	ldr	r3, [r7, #4]
   1884a:	2233      	movs	r2, #51	; 0x33
   1884c:	2141      	movs	r1, #65	; 0x41
   1884e:	5499      	strb	r1, [r3, r2]
			ST_DWORD(fs->win+FSI_StrucSig, 0x61417272);
   18850:	687a      	ldr	r2, [r7, #4]
   18852:	2385      	movs	r3, #133	; 0x85
   18854:	009b      	lsls	r3, r3, #2
   18856:	2172      	movs	r1, #114	; 0x72
   18858:	54d1      	strb	r1, [r2, r3]
   1885a:	687b      	ldr	r3, [r7, #4]
   1885c:	4a37      	ldr	r2, [pc, #220]	; (1893c <sync+0x16c>)
   1885e:	2172      	movs	r1, #114	; 0x72
   18860:	5499      	strb	r1, [r3, r2]
   18862:	687b      	ldr	r3, [r7, #4]
   18864:	4a36      	ldr	r2, [pc, #216]	; (18940 <sync+0x170>)
   18866:	2141      	movs	r1, #65	; 0x41
   18868:	5499      	strb	r1, [r3, r2]
   1886a:	687b      	ldr	r3, [r7, #4]
   1886c:	4a35      	ldr	r2, [pc, #212]	; (18944 <sync+0x174>)
   1886e:	2161      	movs	r1, #97	; 0x61
   18870:	5499      	strb	r1, [r3, r2]
			ST_DWORD(fs->win+FSI_Free_Count, fs->free_clust);
   18872:	687b      	ldr	r3, [r7, #4]
   18874:	691b      	ldr	r3, [r3, #16]
   18876:	b2d9      	uxtb	r1, r3
   18878:	687a      	ldr	r2, [r7, #4]
   1887a:	2386      	movs	r3, #134	; 0x86
   1887c:	009b      	lsls	r3, r3, #2
   1887e:	54d1      	strb	r1, [r2, r3]
   18880:	687b      	ldr	r3, [r7, #4]
   18882:	691b      	ldr	r3, [r3, #16]
   18884:	b29b      	uxth	r3, r3
   18886:	0a1b      	lsrs	r3, r3, #8
   18888:	b29b      	uxth	r3, r3
   1888a:	b2d9      	uxtb	r1, r3
   1888c:	687b      	ldr	r3, [r7, #4]
   1888e:	4a2e      	ldr	r2, [pc, #184]	; (18948 <sync+0x178>)
   18890:	5499      	strb	r1, [r3, r2]
   18892:	687b      	ldr	r3, [r7, #4]
   18894:	691b      	ldr	r3, [r3, #16]
   18896:	0c1b      	lsrs	r3, r3, #16
   18898:	b2d9      	uxtb	r1, r3
   1889a:	687b      	ldr	r3, [r7, #4]
   1889c:	4a2b      	ldr	r2, [pc, #172]	; (1894c <sync+0x17c>)
   1889e:	5499      	strb	r1, [r3, r2]
   188a0:	687b      	ldr	r3, [r7, #4]
   188a2:	691b      	ldr	r3, [r3, #16]
   188a4:	0e1b      	lsrs	r3, r3, #24
   188a6:	b2d9      	uxtb	r1, r3
   188a8:	687b      	ldr	r3, [r7, #4]
   188aa:	4a29      	ldr	r2, [pc, #164]	; (18950 <sync+0x180>)
   188ac:	5499      	strb	r1, [r3, r2]
			ST_DWORD(fs->win+FSI_Nxt_Free, fs->last_clust);
   188ae:	687b      	ldr	r3, [r7, #4]
   188b0:	68db      	ldr	r3, [r3, #12]
   188b2:	b2d9      	uxtb	r1, r3
   188b4:	687a      	ldr	r2, [r7, #4]
   188b6:	2387      	movs	r3, #135	; 0x87
   188b8:	009b      	lsls	r3, r3, #2
   188ba:	54d1      	strb	r1, [r2, r3]
   188bc:	687b      	ldr	r3, [r7, #4]
   188be:	68db      	ldr	r3, [r3, #12]
   188c0:	b29b      	uxth	r3, r3
   188c2:	0a1b      	lsrs	r3, r3, #8
   188c4:	b29b      	uxth	r3, r3
   188c6:	b2d9      	uxtb	r1, r3
   188c8:	687b      	ldr	r3, [r7, #4]
   188ca:	4a22      	ldr	r2, [pc, #136]	; (18954 <sync+0x184>)
   188cc:	5499      	strb	r1, [r3, r2]
   188ce:	687b      	ldr	r3, [r7, #4]
   188d0:	68db      	ldr	r3, [r3, #12]
   188d2:	0c1b      	lsrs	r3, r3, #16
   188d4:	b2d9      	uxtb	r1, r3
   188d6:	687b      	ldr	r3, [r7, #4]
   188d8:	4a1f      	ldr	r2, [pc, #124]	; (18958 <sync+0x188>)
   188da:	5499      	strb	r1, [r3, r2]
   188dc:	687b      	ldr	r3, [r7, #4]
   188de:	68db      	ldr	r3, [r3, #12]
   188e0:	0e1b      	lsrs	r3, r3, #24
   188e2:	b2d9      	uxtb	r1, r3
   188e4:	687b      	ldr	r3, [r7, #4]
   188e6:	4a1d      	ldr	r2, [pc, #116]	; (1895c <sync+0x18c>)
   188e8:	5499      	strb	r1, [r3, r2]
			/* Write it into the FSInfo sector */
			disk_write(fs->drv, fs->win, fs->fsi_sector, 1);
   188ea:	687b      	ldr	r3, [r7, #4]
   188ec:	7858      	ldrb	r0, [r3, #1]
   188ee:	687b      	ldr	r3, [r7, #4]
   188f0:	3330      	adds	r3, #48	; 0x30
   188f2:	0019      	movs	r1, r3
   188f4:	687b      	ldr	r3, [r7, #4]
   188f6:	695a      	ldr	r2, [r3, #20]
   188f8:	2301      	movs	r3, #1
   188fa:	4c19      	ldr	r4, [pc, #100]	; (18960 <sync+0x190>)
   188fc:	47a0      	blx	r4
			fs->fsi_flag = 0;
   188fe:	687b      	ldr	r3, [r7, #4]
   18900:	2200      	movs	r2, #0
   18902:	715a      	strb	r2, [r3, #5]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK)
   18904:	687b      	ldr	r3, [r7, #4]
   18906:	785b      	ldrb	r3, [r3, #1]
   18908:	2200      	movs	r2, #0
   1890a:	2100      	movs	r1, #0
   1890c:	0018      	movs	r0, r3
   1890e:	4b15      	ldr	r3, [pc, #84]	; (18964 <sync+0x194>)
   18910:	4798      	blx	r3
   18912:	1e03      	subs	r3, r0, #0
   18914:	d003      	beq.n	1891e <sync+0x14e>
			res = FR_DISK_ERR;
   18916:	230f      	movs	r3, #15
   18918:	18fb      	adds	r3, r7, r3
   1891a:	2201      	movs	r2, #1
   1891c:	701a      	strb	r2, [r3, #0]
	}

	return res;
   1891e:	230f      	movs	r3, #15
   18920:	18fb      	adds	r3, r7, r3
   18922:	781b      	ldrb	r3, [r3, #0]
}
   18924:	0018      	movs	r0, r3
   18926:	46bd      	mov	sp, r7
   18928:	b005      	add	sp, #20
   1892a:	bd90      	pop	{r4, r7, pc}
   1892c:	00018709 	.word	0x00018709
   18930:	0001865d 	.word	0x0001865d
   18934:	0000022e 	.word	0x0000022e
   18938:	0000022f 	.word	0x0000022f
   1893c:	00000215 	.word	0x00000215
   18940:	00000216 	.word	0x00000216
   18944:	00000217 	.word	0x00000217
   18948:	00000219 	.word	0x00000219
   1894c:	0000021a 	.word	0x0000021a
   18950:	0000021b 	.word	0x0000021b
   18954:	0000021d 	.word	0x0000021d
   18958:	0000021e 	.word	0x0000021e
   1895c:	0000021f 	.word	0x0000021f
   18960:	000183f5 	.word	0x000183f5
   18964:	000184cd 	.word	0x000184cd

00018968 <clust2sect>:

static DWORD clust2sect (	/* !=0: Sector number, 0: Failed - invalid cluster# */
	FATFS *fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
   18968:	b580      	push	{r7, lr}
   1896a:	b082      	sub	sp, #8
   1896c:	af00      	add	r7, sp, #0
   1896e:	6078      	str	r0, [r7, #4]
   18970:	6039      	str	r1, [r7, #0]
	clst -= 2;
   18972:	683b      	ldr	r3, [r7, #0]
   18974:	3b02      	subs	r3, #2
   18976:	603b      	str	r3, [r7, #0]
	if (clst >= (fs->n_fatent - 2)) return 0;		/* Invalid cluster# */
   18978:	687b      	ldr	r3, [r7, #4]
   1897a:	699b      	ldr	r3, [r3, #24]
   1897c:	1e9a      	subs	r2, r3, #2
   1897e:	683b      	ldr	r3, [r7, #0]
   18980:	429a      	cmp	r2, r3
   18982:	d801      	bhi.n	18988 <clust2sect+0x20>
   18984:	2300      	movs	r3, #0
   18986:	e007      	b.n	18998 <clust2sect+0x30>
	return clst * fs->csize + fs->database;
   18988:	687b      	ldr	r3, [r7, #4]
   1898a:	789b      	ldrb	r3, [r3, #2]
   1898c:	001a      	movs	r2, r3
   1898e:	683b      	ldr	r3, [r7, #0]
   18990:	435a      	muls	r2, r3
   18992:	687b      	ldr	r3, [r7, #4]
   18994:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   18996:	18d3      	adds	r3, r2, r3
}
   18998:	0018      	movs	r0, r3
   1899a:	46bd      	mov	sp, r7
   1899c:	b002      	add	sp, #8
   1899e:	bd80      	pop	{r7, pc}

000189a0 <get_fat>:

static DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, Else:Cluster status */
	FATFS *fs,	/* File system object */
	DWORD clst	/* Cluster# to get the link information */
)
{
   189a0:	b580      	push	{r7, lr}
   189a2:	b086      	sub	sp, #24
   189a4:	af00      	add	r7, sp, #0
   189a6:	6078      	str	r0, [r7, #4]
   189a8:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	BYTE *p;


	if (clst < 2 || clst >= fs->n_fatent)	/* Chack range */
   189aa:	683b      	ldr	r3, [r7, #0]
   189ac:	2b01      	cmp	r3, #1
   189ae:	d904      	bls.n	189ba <get_fat+0x1a>
   189b0:	687b      	ldr	r3, [r7, #4]
   189b2:	699a      	ldr	r2, [r3, #24]
   189b4:	683b      	ldr	r3, [r7, #0]
   189b6:	429a      	cmp	r2, r3
   189b8:	d801      	bhi.n	189be <get_fat+0x1e>
		return 1;
   189ba:	2301      	movs	r3, #1
   189bc:	e09f      	b.n	18afe <get_fat+0x15e>

	switch (fs->fs_type) {
   189be:	687b      	ldr	r3, [r7, #4]
   189c0:	781b      	ldrb	r3, [r3, #0]
   189c2:	2b02      	cmp	r3, #2
   189c4:	d048      	beq.n	18a58 <get_fat+0xb8>
   189c6:	2b03      	cmp	r3, #3
   189c8:	d067      	beq.n	18a9a <get_fat+0xfa>
   189ca:	2b01      	cmp	r3, #1
   189cc:	d000      	beq.n	189d0 <get_fat+0x30>
   189ce:	e094      	b.n	18afa <get_fat+0x15a>
	case FS_FAT12 :
		bc = (UINT)clst; bc += bc / 2;
   189d0:	683b      	ldr	r3, [r7, #0]
   189d2:	617b      	str	r3, [r7, #20]
   189d4:	697b      	ldr	r3, [r7, #20]
   189d6:	085b      	lsrs	r3, r3, #1
   189d8:	697a      	ldr	r2, [r7, #20]
   189da:	18d3      	adds	r3, r2, r3
   189dc:	617b      	str	r3, [r7, #20]
		if (move_window(fs, fs->fatbase + (bc / SS(fs)))) break;
   189de:	687b      	ldr	r3, [r7, #4]
   189e0:	6a1a      	ldr	r2, [r3, #32]
   189e2:	697b      	ldr	r3, [r7, #20]
   189e4:	0a5b      	lsrs	r3, r3, #9
   189e6:	18d2      	adds	r2, r2, r3
   189e8:	687b      	ldr	r3, [r7, #4]
   189ea:	0011      	movs	r1, r2
   189ec:	0018      	movs	r0, r3
   189ee:	4b46      	ldr	r3, [pc, #280]	; (18b08 <get_fat+0x168>)
   189f0:	4798      	blx	r3
   189f2:	1e03      	subs	r3, r0, #0
   189f4:	d000      	beq.n	189f8 <get_fat+0x58>
   189f6:	e079      	b.n	18aec <get_fat+0x14c>
		wc = fs->win[bc % SS(fs)]; bc++;
   189f8:	697b      	ldr	r3, [r7, #20]
   189fa:	05db      	lsls	r3, r3, #23
   189fc:	0ddb      	lsrs	r3, r3, #23
   189fe:	687a      	ldr	r2, [r7, #4]
   18a00:	2130      	movs	r1, #48	; 0x30
   18a02:	18d3      	adds	r3, r2, r3
   18a04:	185b      	adds	r3, r3, r1
   18a06:	781b      	ldrb	r3, [r3, #0]
   18a08:	613b      	str	r3, [r7, #16]
   18a0a:	697b      	ldr	r3, [r7, #20]
   18a0c:	3301      	adds	r3, #1
   18a0e:	617b      	str	r3, [r7, #20]
		if (move_window(fs, fs->fatbase + (bc / SS(fs)))) break;
   18a10:	687b      	ldr	r3, [r7, #4]
   18a12:	6a1a      	ldr	r2, [r3, #32]
   18a14:	697b      	ldr	r3, [r7, #20]
   18a16:	0a5b      	lsrs	r3, r3, #9
   18a18:	18d2      	adds	r2, r2, r3
   18a1a:	687b      	ldr	r3, [r7, #4]
   18a1c:	0011      	movs	r1, r2
   18a1e:	0018      	movs	r0, r3
   18a20:	4b39      	ldr	r3, [pc, #228]	; (18b08 <get_fat+0x168>)
   18a22:	4798      	blx	r3
   18a24:	1e03      	subs	r3, r0, #0
   18a26:	d163      	bne.n	18af0 <get_fat+0x150>
		wc |= fs->win[bc % SS(fs)] << 8;
   18a28:	697b      	ldr	r3, [r7, #20]
   18a2a:	05db      	lsls	r3, r3, #23
   18a2c:	0ddb      	lsrs	r3, r3, #23
   18a2e:	687a      	ldr	r2, [r7, #4]
   18a30:	2130      	movs	r1, #48	; 0x30
   18a32:	18d3      	adds	r3, r2, r3
   18a34:	185b      	adds	r3, r3, r1
   18a36:	781b      	ldrb	r3, [r3, #0]
   18a38:	021b      	lsls	r3, r3, #8
   18a3a:	001a      	movs	r2, r3
   18a3c:	693b      	ldr	r3, [r7, #16]
   18a3e:	4313      	orrs	r3, r2
   18a40:	613b      	str	r3, [r7, #16]
		return (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
   18a42:	683b      	ldr	r3, [r7, #0]
   18a44:	2201      	movs	r2, #1
   18a46:	4013      	ands	r3, r2
   18a48:	d002      	beq.n	18a50 <get_fat+0xb0>
   18a4a:	693b      	ldr	r3, [r7, #16]
   18a4c:	091b      	lsrs	r3, r3, #4
   18a4e:	e056      	b.n	18afe <get_fat+0x15e>
   18a50:	693b      	ldr	r3, [r7, #16]
   18a52:	051b      	lsls	r3, r3, #20
   18a54:	0d1b      	lsrs	r3, r3, #20
   18a56:	e052      	b.n	18afe <get_fat+0x15e>

	case FS_FAT16 :
		if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)))) break;
   18a58:	687b      	ldr	r3, [r7, #4]
   18a5a:	6a1a      	ldr	r2, [r3, #32]
   18a5c:	683b      	ldr	r3, [r7, #0]
   18a5e:	0a1b      	lsrs	r3, r3, #8
   18a60:	18d2      	adds	r2, r2, r3
   18a62:	687b      	ldr	r3, [r7, #4]
   18a64:	0011      	movs	r1, r2
   18a66:	0018      	movs	r0, r3
   18a68:	4b27      	ldr	r3, [pc, #156]	; (18b08 <get_fat+0x168>)
   18a6a:	4798      	blx	r3
   18a6c:	1e03      	subs	r3, r0, #0
   18a6e:	d141      	bne.n	18af4 <get_fat+0x154>
		p = &fs->win[clst * 2 % SS(fs)];
   18a70:	683b      	ldr	r3, [r7, #0]
   18a72:	005a      	lsls	r2, r3, #1
   18a74:	23ff      	movs	r3, #255	; 0xff
   18a76:	005b      	lsls	r3, r3, #1
   18a78:	4013      	ands	r3, r2
   18a7a:	3330      	adds	r3, #48	; 0x30
   18a7c:	687a      	ldr	r2, [r7, #4]
   18a7e:	18d3      	adds	r3, r2, r3
   18a80:	60fb      	str	r3, [r7, #12]
		return LD_WORD(p);
   18a82:	68fb      	ldr	r3, [r7, #12]
   18a84:	3301      	adds	r3, #1
   18a86:	781b      	ldrb	r3, [r3, #0]
   18a88:	021b      	lsls	r3, r3, #8
   18a8a:	b21a      	sxth	r2, r3
   18a8c:	68fb      	ldr	r3, [r7, #12]
   18a8e:	781b      	ldrb	r3, [r3, #0]
   18a90:	b21b      	sxth	r3, r3
   18a92:	4313      	orrs	r3, r2
   18a94:	b21b      	sxth	r3, r3
   18a96:	b29b      	uxth	r3, r3
   18a98:	e031      	b.n	18afe <get_fat+0x15e>

	case FS_FAT32 :
		if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)))) break;
   18a9a:	687b      	ldr	r3, [r7, #4]
   18a9c:	6a1a      	ldr	r2, [r3, #32]
   18a9e:	683b      	ldr	r3, [r7, #0]
   18aa0:	09db      	lsrs	r3, r3, #7
   18aa2:	18d2      	adds	r2, r2, r3
   18aa4:	687b      	ldr	r3, [r7, #4]
   18aa6:	0011      	movs	r1, r2
   18aa8:	0018      	movs	r0, r3
   18aaa:	4b17      	ldr	r3, [pc, #92]	; (18b08 <get_fat+0x168>)
   18aac:	4798      	blx	r3
   18aae:	1e03      	subs	r3, r0, #0
   18ab0:	d122      	bne.n	18af8 <get_fat+0x158>
		p = &fs->win[clst * 4 % SS(fs)];
   18ab2:	683b      	ldr	r3, [r7, #0]
   18ab4:	009a      	lsls	r2, r3, #2
   18ab6:	23fe      	movs	r3, #254	; 0xfe
   18ab8:	005b      	lsls	r3, r3, #1
   18aba:	4013      	ands	r3, r2
   18abc:	3330      	adds	r3, #48	; 0x30
   18abe:	687a      	ldr	r2, [r7, #4]
   18ac0:	18d3      	adds	r3, r2, r3
   18ac2:	60fb      	str	r3, [r7, #12]
		return LD_DWORD(p) & 0x0FFFFFFF;
   18ac4:	68fb      	ldr	r3, [r7, #12]
   18ac6:	3303      	adds	r3, #3
   18ac8:	781b      	ldrb	r3, [r3, #0]
   18aca:	061a      	lsls	r2, r3, #24
   18acc:	68fb      	ldr	r3, [r7, #12]
   18ace:	3302      	adds	r3, #2
   18ad0:	781b      	ldrb	r3, [r3, #0]
   18ad2:	041b      	lsls	r3, r3, #16
   18ad4:	4313      	orrs	r3, r2
   18ad6:	68fa      	ldr	r2, [r7, #12]
   18ad8:	3201      	adds	r2, #1
   18ada:	7812      	ldrb	r2, [r2, #0]
   18adc:	0212      	lsls	r2, r2, #8
   18ade:	4313      	orrs	r3, r2
   18ae0:	68fa      	ldr	r2, [r7, #12]
   18ae2:	7812      	ldrb	r2, [r2, #0]
   18ae4:	4313      	orrs	r3, r2
   18ae6:	011b      	lsls	r3, r3, #4
   18ae8:	091b      	lsrs	r3, r3, #4
   18aea:	e008      	b.n	18afe <get_fat+0x15e>
		if (move_window(fs, fs->fatbase + (bc / SS(fs)))) break;
   18aec:	46c0      	nop			; (mov r8, r8)
   18aee:	e004      	b.n	18afa <get_fat+0x15a>
		if (move_window(fs, fs->fatbase + (bc / SS(fs)))) break;
   18af0:	46c0      	nop			; (mov r8, r8)
   18af2:	e002      	b.n	18afa <get_fat+0x15a>
		if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)))) break;
   18af4:	46c0      	nop			; (mov r8, r8)
   18af6:	e000      	b.n	18afa <get_fat+0x15a>
		if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)))) break;
   18af8:	46c0      	nop			; (mov r8, r8)
	}

	return 0xFFFFFFFF;	/* An error occurred at the disk I/O layer */
   18afa:	2301      	movs	r3, #1
   18afc:	425b      	negs	r3, r3
}
   18afe:	0018      	movs	r0, r3
   18b00:	46bd      	mov	sp, r7
   18b02:	b006      	add	sp, #24
   18b04:	bd80      	pop	{r7, pc}
   18b06:	46c0      	nop			; (mov r8, r8)
   18b08:	00018709 	.word	0x00018709

00018b0c <put_fat>:
static FRESULT put_fat (
	FATFS *fs,	/* File system object */
	DWORD clst,	/* Cluster# to be changed in range of 2 to fs->n_fatent - 1 */
	DWORD val	/* New value to mark the cluster */
)
{
   18b0c:	b590      	push	{r4, r7, lr}
   18b0e:	b089      	sub	sp, #36	; 0x24
   18b10:	af00      	add	r7, sp, #0
   18b12:	60f8      	str	r0, [r7, #12]
   18b14:	60b9      	str	r1, [r7, #8]
   18b16:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res;


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
   18b18:	68bb      	ldr	r3, [r7, #8]
   18b1a:	2b01      	cmp	r3, #1
   18b1c:	d904      	bls.n	18b28 <put_fat+0x1c>
   18b1e:	68fb      	ldr	r3, [r7, #12]
   18b20:	699a      	ldr	r2, [r3, #24]
   18b22:	68bb      	ldr	r3, [r7, #8]
   18b24:	429a      	cmp	r2, r3
   18b26:	d804      	bhi.n	18b32 <put_fat+0x26>
		res = FR_INT_ERR;
   18b28:	231f      	movs	r3, #31
   18b2a:	18fb      	adds	r3, r7, r3
   18b2c:	2202      	movs	r2, #2
   18b2e:	701a      	strb	r2, [r3, #0]
   18b30:	e100      	b.n	18d34 <put_fat+0x228>

	} else {
		switch (fs->fs_type) {
   18b32:	68fb      	ldr	r3, [r7, #12]
   18b34:	781b      	ldrb	r3, [r3, #0]
   18b36:	2b02      	cmp	r3, #2
   18b38:	d100      	bne.n	18b3c <put_fat+0x30>
   18b3a:	e078      	b.n	18c2e <put_fat+0x122>
   18b3c:	2b03      	cmp	r3, #3
   18b3e:	d100      	bne.n	18b42 <put_fat+0x36>
   18b40:	e09e      	b.n	18c80 <put_fat+0x174>
   18b42:	2b01      	cmp	r3, #1
   18b44:	d000      	beq.n	18b48 <put_fat+0x3c>
   18b46:	e0e6      	b.n	18d16 <put_fat+0x20a>
		case FS_FAT12 :
			bc = clst; bc += bc / 2;
   18b48:	68bb      	ldr	r3, [r7, #8]
   18b4a:	61bb      	str	r3, [r7, #24]
   18b4c:	69bb      	ldr	r3, [r7, #24]
   18b4e:	085b      	lsrs	r3, r3, #1
   18b50:	69ba      	ldr	r2, [r7, #24]
   18b52:	18d3      	adds	r3, r2, r3
   18b54:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
   18b56:	68fb      	ldr	r3, [r7, #12]
   18b58:	6a1a      	ldr	r2, [r3, #32]
   18b5a:	69bb      	ldr	r3, [r7, #24]
   18b5c:	0a5b      	lsrs	r3, r3, #9
   18b5e:	18d2      	adds	r2, r2, r3
   18b60:	231f      	movs	r3, #31
   18b62:	18fc      	adds	r4, r7, r3
   18b64:	68fb      	ldr	r3, [r7, #12]
   18b66:	0011      	movs	r1, r2
   18b68:	0018      	movs	r0, r3
   18b6a:	4b76      	ldr	r3, [pc, #472]	; (18d44 <put_fat+0x238>)
   18b6c:	4798      	blx	r3
   18b6e:	0003      	movs	r3, r0
   18b70:	7023      	strb	r3, [r4, #0]
			if (res != FR_OK) break;
   18b72:	231f      	movs	r3, #31
   18b74:	18fb      	adds	r3, r7, r3
   18b76:	781b      	ldrb	r3, [r3, #0]
   18b78:	2b00      	cmp	r3, #0
   18b7a:	d000      	beq.n	18b7e <put_fat+0x72>
   18b7c:	e0d0      	b.n	18d20 <put_fat+0x214>
			p = &fs->win[bc % SS(fs)];
   18b7e:	69bb      	ldr	r3, [r7, #24]
   18b80:	05db      	lsls	r3, r3, #23
   18b82:	0ddb      	lsrs	r3, r3, #23
   18b84:	3330      	adds	r3, #48	; 0x30
   18b86:	68fa      	ldr	r2, [r7, #12]
   18b88:	18d3      	adds	r3, r2, r3
   18b8a:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
   18b8c:	68bb      	ldr	r3, [r7, #8]
   18b8e:	2201      	movs	r2, #1
   18b90:	4013      	ands	r3, r2
   18b92:	d00d      	beq.n	18bb0 <put_fat+0xa4>
   18b94:	697b      	ldr	r3, [r7, #20]
   18b96:	781b      	ldrb	r3, [r3, #0]
   18b98:	b25b      	sxtb	r3, r3
   18b9a:	220f      	movs	r2, #15
   18b9c:	4013      	ands	r3, r2
   18b9e:	b25a      	sxtb	r2, r3
   18ba0:	687b      	ldr	r3, [r7, #4]
   18ba2:	b2db      	uxtb	r3, r3
   18ba4:	011b      	lsls	r3, r3, #4
   18ba6:	b25b      	sxtb	r3, r3
   18ba8:	4313      	orrs	r3, r2
   18baa:	b25b      	sxtb	r3, r3
   18bac:	b2db      	uxtb	r3, r3
   18bae:	e001      	b.n	18bb4 <put_fat+0xa8>
   18bb0:	687b      	ldr	r3, [r7, #4]
   18bb2:	b2db      	uxtb	r3, r3
   18bb4:	697a      	ldr	r2, [r7, #20]
   18bb6:	7013      	strb	r3, [r2, #0]
			bc++;
   18bb8:	69bb      	ldr	r3, [r7, #24]
   18bba:	3301      	adds	r3, #1
   18bbc:	61bb      	str	r3, [r7, #24]
			fs->wflag = 1;
   18bbe:	68fb      	ldr	r3, [r7, #12]
   18bc0:	2201      	movs	r2, #1
   18bc2:	711a      	strb	r2, [r3, #4]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
   18bc4:	68fb      	ldr	r3, [r7, #12]
   18bc6:	6a1a      	ldr	r2, [r3, #32]
   18bc8:	69bb      	ldr	r3, [r7, #24]
   18bca:	0a5b      	lsrs	r3, r3, #9
   18bcc:	18d2      	adds	r2, r2, r3
   18bce:	231f      	movs	r3, #31
   18bd0:	18fc      	adds	r4, r7, r3
   18bd2:	68fb      	ldr	r3, [r7, #12]
   18bd4:	0011      	movs	r1, r2
   18bd6:	0018      	movs	r0, r3
   18bd8:	4b5a      	ldr	r3, [pc, #360]	; (18d44 <put_fat+0x238>)
   18bda:	4798      	blx	r3
   18bdc:	0003      	movs	r3, r0
   18bde:	7023      	strb	r3, [r4, #0]
			if (res != FR_OK) break;
   18be0:	231f      	movs	r3, #31
   18be2:	18fb      	adds	r3, r7, r3
   18be4:	781b      	ldrb	r3, [r3, #0]
   18be6:	2b00      	cmp	r3, #0
   18be8:	d000      	beq.n	18bec <put_fat+0xe0>
   18bea:	e09b      	b.n	18d24 <put_fat+0x218>
			p = &fs->win[bc % SS(fs)];
   18bec:	69bb      	ldr	r3, [r7, #24]
   18bee:	05db      	lsls	r3, r3, #23
   18bf0:	0ddb      	lsrs	r3, r3, #23
   18bf2:	3330      	adds	r3, #48	; 0x30
   18bf4:	68fa      	ldr	r2, [r7, #12]
   18bf6:	18d3      	adds	r3, r2, r3
   18bf8:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
   18bfa:	68bb      	ldr	r3, [r7, #8]
   18bfc:	2201      	movs	r2, #1
   18bfe:	4013      	ands	r3, r2
   18c00:	d003      	beq.n	18c0a <put_fat+0xfe>
   18c02:	687b      	ldr	r3, [r7, #4]
   18c04:	091b      	lsrs	r3, r3, #4
   18c06:	b2db      	uxtb	r3, r3
   18c08:	e00e      	b.n	18c28 <put_fat+0x11c>
   18c0a:	697b      	ldr	r3, [r7, #20]
   18c0c:	781b      	ldrb	r3, [r3, #0]
   18c0e:	b25b      	sxtb	r3, r3
   18c10:	220f      	movs	r2, #15
   18c12:	4393      	bics	r3, r2
   18c14:	b25a      	sxtb	r2, r3
   18c16:	687b      	ldr	r3, [r7, #4]
   18c18:	0a1b      	lsrs	r3, r3, #8
   18c1a:	b25b      	sxtb	r3, r3
   18c1c:	210f      	movs	r1, #15
   18c1e:	400b      	ands	r3, r1
   18c20:	b25b      	sxtb	r3, r3
   18c22:	4313      	orrs	r3, r2
   18c24:	b25b      	sxtb	r3, r3
   18c26:	b2db      	uxtb	r3, r3
   18c28:	697a      	ldr	r2, [r7, #20]
   18c2a:	7013      	strb	r3, [r2, #0]
			break;
   18c2c:	e07f      	b.n	18d2e <put_fat+0x222>

		case FS_FAT16 :
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
   18c2e:	68fb      	ldr	r3, [r7, #12]
   18c30:	6a1a      	ldr	r2, [r3, #32]
   18c32:	68bb      	ldr	r3, [r7, #8]
   18c34:	0a1b      	lsrs	r3, r3, #8
   18c36:	18d2      	adds	r2, r2, r3
   18c38:	231f      	movs	r3, #31
   18c3a:	18fc      	adds	r4, r7, r3
   18c3c:	68fb      	ldr	r3, [r7, #12]
   18c3e:	0011      	movs	r1, r2
   18c40:	0018      	movs	r0, r3
   18c42:	4b40      	ldr	r3, [pc, #256]	; (18d44 <put_fat+0x238>)
   18c44:	4798      	blx	r3
   18c46:	0003      	movs	r3, r0
   18c48:	7023      	strb	r3, [r4, #0]
			if (res != FR_OK) break;
   18c4a:	231f      	movs	r3, #31
   18c4c:	18fb      	adds	r3, r7, r3
   18c4e:	781b      	ldrb	r3, [r3, #0]
   18c50:	2b00      	cmp	r3, #0
   18c52:	d169      	bne.n	18d28 <put_fat+0x21c>
			p = &fs->win[clst * 2 % SS(fs)];
   18c54:	68bb      	ldr	r3, [r7, #8]
   18c56:	005a      	lsls	r2, r3, #1
   18c58:	23ff      	movs	r3, #255	; 0xff
   18c5a:	005b      	lsls	r3, r3, #1
   18c5c:	4013      	ands	r3, r2
   18c5e:	3330      	adds	r3, #48	; 0x30
   18c60:	68fa      	ldr	r2, [r7, #12]
   18c62:	18d3      	adds	r3, r2, r3
   18c64:	617b      	str	r3, [r7, #20]
			ST_WORD(p, (WORD)val);
   18c66:	687b      	ldr	r3, [r7, #4]
   18c68:	b2da      	uxtb	r2, r3
   18c6a:	697b      	ldr	r3, [r7, #20]
   18c6c:	701a      	strb	r2, [r3, #0]
   18c6e:	697b      	ldr	r3, [r7, #20]
   18c70:	3301      	adds	r3, #1
   18c72:	687a      	ldr	r2, [r7, #4]
   18c74:	b292      	uxth	r2, r2
   18c76:	0a12      	lsrs	r2, r2, #8
   18c78:	b292      	uxth	r2, r2
   18c7a:	b2d2      	uxtb	r2, r2
   18c7c:	701a      	strb	r2, [r3, #0]
			break;
   18c7e:	e056      	b.n	18d2e <put_fat+0x222>

		case FS_FAT32 :
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
   18c80:	68fb      	ldr	r3, [r7, #12]
   18c82:	6a1a      	ldr	r2, [r3, #32]
   18c84:	68bb      	ldr	r3, [r7, #8]
   18c86:	09db      	lsrs	r3, r3, #7
   18c88:	18d2      	adds	r2, r2, r3
   18c8a:	231f      	movs	r3, #31
   18c8c:	18fc      	adds	r4, r7, r3
   18c8e:	68fb      	ldr	r3, [r7, #12]
   18c90:	0011      	movs	r1, r2
   18c92:	0018      	movs	r0, r3
   18c94:	4b2b      	ldr	r3, [pc, #172]	; (18d44 <put_fat+0x238>)
   18c96:	4798      	blx	r3
   18c98:	0003      	movs	r3, r0
   18c9a:	7023      	strb	r3, [r4, #0]
			if (res != FR_OK) break;
   18c9c:	231f      	movs	r3, #31
   18c9e:	18fb      	adds	r3, r7, r3
   18ca0:	781b      	ldrb	r3, [r3, #0]
   18ca2:	2b00      	cmp	r3, #0
   18ca4:	d142      	bne.n	18d2c <put_fat+0x220>
			p = &fs->win[clst * 4 % SS(fs)];
   18ca6:	68bb      	ldr	r3, [r7, #8]
   18ca8:	009a      	lsls	r2, r3, #2
   18caa:	23fe      	movs	r3, #254	; 0xfe
   18cac:	005b      	lsls	r3, r3, #1
   18cae:	4013      	ands	r3, r2
   18cb0:	3330      	adds	r3, #48	; 0x30
   18cb2:	68fa      	ldr	r2, [r7, #12]
   18cb4:	18d3      	adds	r3, r2, r3
   18cb6:	617b      	str	r3, [r7, #20]
			val |= LD_DWORD(p) & 0xF0000000;
   18cb8:	697b      	ldr	r3, [r7, #20]
   18cba:	3303      	adds	r3, #3
   18cbc:	781b      	ldrb	r3, [r3, #0]
   18cbe:	061a      	lsls	r2, r3, #24
   18cc0:	697b      	ldr	r3, [r7, #20]
   18cc2:	3302      	adds	r3, #2
   18cc4:	781b      	ldrb	r3, [r3, #0]
   18cc6:	041b      	lsls	r3, r3, #16
   18cc8:	4313      	orrs	r3, r2
   18cca:	697a      	ldr	r2, [r7, #20]
   18ccc:	3201      	adds	r2, #1
   18cce:	7812      	ldrb	r2, [r2, #0]
   18cd0:	0212      	lsls	r2, r2, #8
   18cd2:	4313      	orrs	r3, r2
   18cd4:	697a      	ldr	r2, [r7, #20]
   18cd6:	7812      	ldrb	r2, [r2, #0]
   18cd8:	4313      	orrs	r3, r2
   18cda:	0f1b      	lsrs	r3, r3, #28
   18cdc:	071b      	lsls	r3, r3, #28
   18cde:	687a      	ldr	r2, [r7, #4]
   18ce0:	4313      	orrs	r3, r2
   18ce2:	607b      	str	r3, [r7, #4]
			ST_DWORD(p, val);
   18ce4:	687b      	ldr	r3, [r7, #4]
   18ce6:	b2da      	uxtb	r2, r3
   18ce8:	697b      	ldr	r3, [r7, #20]
   18cea:	701a      	strb	r2, [r3, #0]
   18cec:	697b      	ldr	r3, [r7, #20]
   18cee:	3301      	adds	r3, #1
   18cf0:	687a      	ldr	r2, [r7, #4]
   18cf2:	b292      	uxth	r2, r2
   18cf4:	0a12      	lsrs	r2, r2, #8
   18cf6:	b292      	uxth	r2, r2
   18cf8:	b2d2      	uxtb	r2, r2
   18cfa:	701a      	strb	r2, [r3, #0]
   18cfc:	697b      	ldr	r3, [r7, #20]
   18cfe:	3302      	adds	r3, #2
   18d00:	687a      	ldr	r2, [r7, #4]
   18d02:	0c12      	lsrs	r2, r2, #16
   18d04:	b2d2      	uxtb	r2, r2
   18d06:	701a      	strb	r2, [r3, #0]
   18d08:	697b      	ldr	r3, [r7, #20]
   18d0a:	3303      	adds	r3, #3
   18d0c:	687a      	ldr	r2, [r7, #4]
   18d0e:	0e12      	lsrs	r2, r2, #24
   18d10:	b2d2      	uxtb	r2, r2
   18d12:	701a      	strb	r2, [r3, #0]
			break;
   18d14:	e00b      	b.n	18d2e <put_fat+0x222>

		default :
			res = FR_INT_ERR;
   18d16:	231f      	movs	r3, #31
   18d18:	18fb      	adds	r3, r7, r3
   18d1a:	2202      	movs	r2, #2
   18d1c:	701a      	strb	r2, [r3, #0]
   18d1e:	e006      	b.n	18d2e <put_fat+0x222>
			if (res != FR_OK) break;
   18d20:	46c0      	nop			; (mov r8, r8)
   18d22:	e004      	b.n	18d2e <put_fat+0x222>
			if (res != FR_OK) break;
   18d24:	46c0      	nop			; (mov r8, r8)
   18d26:	e002      	b.n	18d2e <put_fat+0x222>
			if (res != FR_OK) break;
   18d28:	46c0      	nop			; (mov r8, r8)
   18d2a:	e000      	b.n	18d2e <put_fat+0x222>
			if (res != FR_OK) break;
   18d2c:	46c0      	nop			; (mov r8, r8)
		}
		fs->wflag = 1;
   18d2e:	68fb      	ldr	r3, [r7, #12]
   18d30:	2201      	movs	r2, #1
   18d32:	711a      	strb	r2, [r3, #4]
	}

	return res;
   18d34:	231f      	movs	r3, #31
   18d36:	18fb      	adds	r3, r7, r3
   18d38:	781b      	ldrb	r3, [r3, #0]
}
   18d3a:	0018      	movs	r0, r3
   18d3c:	46bd      	mov	sp, r7
   18d3e:	b009      	add	sp, #36	; 0x24
   18d40:	bd90      	pop	{r4, r7, pc}
   18d42:	46c0      	nop			; (mov r8, r8)
   18d44:	00018709 	.word	0x00018709

00018d48 <remove_chain>:
static
FRESULT remove_chain (
	FATFS *fs,			/* File system object */
	DWORD clst			/* Cluster# to remove a chain from */
)
{
   18d48:	b590      	push	{r4, r7, lr}
   18d4a:	b085      	sub	sp, #20
   18d4c:	af00      	add	r7, sp, #0
   18d4e:	6078      	str	r0, [r7, #4]
   18d50:	6039      	str	r1, [r7, #0]
	DWORD nxt;
#if _USE_ERASE
	DWORD scl = clst, ecl = clst, resion[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
   18d52:	683b      	ldr	r3, [r7, #0]
   18d54:	2b01      	cmp	r3, #1
   18d56:	d904      	bls.n	18d62 <remove_chain+0x1a>
   18d58:	687b      	ldr	r3, [r7, #4]
   18d5a:	699a      	ldr	r2, [r3, #24]
   18d5c:	683b      	ldr	r3, [r7, #0]
   18d5e:	429a      	cmp	r2, r3
   18d60:	d804      	bhi.n	18d6c <remove_chain+0x24>
		res = FR_INT_ERR;
   18d62:	230f      	movs	r3, #15
   18d64:	18fb      	adds	r3, r7, r3
   18d66:	2202      	movs	r2, #2
   18d68:	701a      	strb	r2, [r3, #0]
   18d6a:	e045      	b.n	18df8 <remove_chain+0xb0>

	} else {
		res = FR_OK;
   18d6c:	230f      	movs	r3, #15
   18d6e:	18fb      	adds	r3, r7, r3
   18d70:	2200      	movs	r2, #0
   18d72:	701a      	strb	r2, [r3, #0]
		while (clst < fs->n_fatent) {			/* Not a last link? */
   18d74:	e037      	b.n	18de6 <remove_chain+0x9e>
			nxt = get_fat(fs, clst);			/* Get cluster status */
   18d76:	683a      	ldr	r2, [r7, #0]
   18d78:	687b      	ldr	r3, [r7, #4]
   18d7a:	0011      	movs	r1, r2
   18d7c:	0018      	movs	r0, r3
   18d7e:	4b22      	ldr	r3, [pc, #136]	; (18e08 <remove_chain+0xc0>)
   18d80:	4798      	blx	r3
   18d82:	0003      	movs	r3, r0
   18d84:	60bb      	str	r3, [r7, #8]
			if (nxt == 0) break;				/* Empty cluster? */
   18d86:	68bb      	ldr	r3, [r7, #8]
   18d88:	2b00      	cmp	r3, #0
   18d8a:	d032      	beq.n	18df2 <remove_chain+0xaa>
			if (nxt == 1) { res = FR_INT_ERR; break; }	/* Internal error? */
   18d8c:	68bb      	ldr	r3, [r7, #8]
   18d8e:	2b01      	cmp	r3, #1
   18d90:	d104      	bne.n	18d9c <remove_chain+0x54>
   18d92:	230f      	movs	r3, #15
   18d94:	18fb      	adds	r3, r7, r3
   18d96:	2202      	movs	r2, #2
   18d98:	701a      	strb	r2, [r3, #0]
   18d9a:	e02d      	b.n	18df8 <remove_chain+0xb0>
			if (nxt == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }	/* Disk error? */
   18d9c:	68bb      	ldr	r3, [r7, #8]
   18d9e:	3301      	adds	r3, #1
   18da0:	d104      	bne.n	18dac <remove_chain+0x64>
   18da2:	230f      	movs	r3, #15
   18da4:	18fb      	adds	r3, r7, r3
   18da6:	2201      	movs	r2, #1
   18da8:	701a      	strb	r2, [r3, #0]
   18daa:	e025      	b.n	18df8 <remove_chain+0xb0>
			res = put_fat(fs, clst, 0);			/* Mark the cluster "empty" */
   18dac:	230f      	movs	r3, #15
   18dae:	18fc      	adds	r4, r7, r3
   18db0:	6839      	ldr	r1, [r7, #0]
   18db2:	687b      	ldr	r3, [r7, #4]
   18db4:	2200      	movs	r2, #0
   18db6:	0018      	movs	r0, r3
   18db8:	4b14      	ldr	r3, [pc, #80]	; (18e0c <remove_chain+0xc4>)
   18dba:	4798      	blx	r3
   18dbc:	0003      	movs	r3, r0
   18dbe:	7023      	strb	r3, [r4, #0]
			if (res != FR_OK) break;
   18dc0:	230f      	movs	r3, #15
   18dc2:	18fb      	adds	r3, r7, r3
   18dc4:	781b      	ldrb	r3, [r3, #0]
   18dc6:	2b00      	cmp	r3, #0
   18dc8:	d115      	bne.n	18df6 <remove_chain+0xae>
			if (fs->free_clust != 0xFFFFFFFF) {	/* Update FSInfo */
   18dca:	687b      	ldr	r3, [r7, #4]
   18dcc:	691b      	ldr	r3, [r3, #16]
   18dce:	3301      	adds	r3, #1
   18dd0:	d007      	beq.n	18de2 <remove_chain+0x9a>
				fs->free_clust++;
   18dd2:	687b      	ldr	r3, [r7, #4]
   18dd4:	691b      	ldr	r3, [r3, #16]
   18dd6:	1c5a      	adds	r2, r3, #1
   18dd8:	687b      	ldr	r3, [r7, #4]
   18dda:	611a      	str	r2, [r3, #16]
				fs->fsi_flag = 1;
   18ddc:	687b      	ldr	r3, [r7, #4]
   18dde:	2201      	movs	r2, #1
   18de0:	715a      	strb	r2, [r3, #5]
				resion[1] = clust2sect(fs, ecl) + fs->csize - 1;	/* End sector */
				disk_ioctl(fs->drv, CTRL_ERASE_SECTOR, resion);		/* Erase the block */
				scl = ecl = nxt;
			}
#endif
			clst = nxt;	/* Next cluster */
   18de2:	68bb      	ldr	r3, [r7, #8]
   18de4:	603b      	str	r3, [r7, #0]
		while (clst < fs->n_fatent) {			/* Not a last link? */
   18de6:	687b      	ldr	r3, [r7, #4]
   18de8:	699a      	ldr	r2, [r3, #24]
   18dea:	683b      	ldr	r3, [r7, #0]
   18dec:	429a      	cmp	r2, r3
   18dee:	d8c2      	bhi.n	18d76 <remove_chain+0x2e>
   18df0:	e002      	b.n	18df8 <remove_chain+0xb0>
			if (nxt == 0) break;				/* Empty cluster? */
   18df2:	46c0      	nop			; (mov r8, r8)
   18df4:	e000      	b.n	18df8 <remove_chain+0xb0>
			if (res != FR_OK) break;
   18df6:	46c0      	nop			; (mov r8, r8)
		}
	}

	return res;
   18df8:	230f      	movs	r3, #15
   18dfa:	18fb      	adds	r3, r7, r3
   18dfc:	781b      	ldrb	r3, [r3, #0]
}
   18dfe:	0018      	movs	r0, r3
   18e00:	46bd      	mov	sp, r7
   18e02:	b005      	add	sp, #20
   18e04:	bd90      	pop	{r4, r7, pc}
   18e06:	46c0      	nop			; (mov r8, r8)
   18e08:	000189a1 	.word	0x000189a1
   18e0c:	00018b0d 	.word	0x00018b0d

00018e10 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	FATFS *fs,			/* File system object */
	DWORD clst			/* Cluster# to stretch. 0 means create a new chain. */
)
{
   18e10:	b590      	push	{r4, r7, lr}
   18e12:	b087      	sub	sp, #28
   18e14:	af00      	add	r7, sp, #0
   18e16:	6078      	str	r0, [r7, #4]
   18e18:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;


	if (clst == 0) {		/* Create a new chain */
   18e1a:	683b      	ldr	r3, [r7, #0]
   18e1c:	2b00      	cmp	r3, #0
   18e1e:	d10d      	bne.n	18e3c <create_chain+0x2c>
		scl = fs->last_clust;			/* Get suggested start point */
   18e20:	687b      	ldr	r3, [r7, #4]
   18e22:	68db      	ldr	r3, [r3, #12]
   18e24:	613b      	str	r3, [r7, #16]
		if (!scl || scl >= fs->n_fatent) scl = 1;
   18e26:	693b      	ldr	r3, [r7, #16]
   18e28:	2b00      	cmp	r3, #0
   18e2a:	d004      	beq.n	18e36 <create_chain+0x26>
   18e2c:	687b      	ldr	r3, [r7, #4]
   18e2e:	699a      	ldr	r2, [r3, #24]
   18e30:	693b      	ldr	r3, [r7, #16]
   18e32:	429a      	cmp	r2, r3
   18e34:	d818      	bhi.n	18e68 <create_chain+0x58>
   18e36:	2301      	movs	r3, #1
   18e38:	613b      	str	r3, [r7, #16]
   18e3a:	e015      	b.n	18e68 <create_chain+0x58>
	}
	else {					/* Stretch the current chain */
		cs = get_fat(fs, clst);			/* Check the cluster status */
   18e3c:	683a      	ldr	r2, [r7, #0]
   18e3e:	687b      	ldr	r3, [r7, #4]
   18e40:	0011      	movs	r1, r2
   18e42:	0018      	movs	r0, r3
   18e44:	4b3e      	ldr	r3, [pc, #248]	; (18f40 <create_chain+0x130>)
   18e46:	4798      	blx	r3
   18e48:	0003      	movs	r3, r0
   18e4a:	60bb      	str	r3, [r7, #8]
		if (cs < 2) return 1;			/* It is an invalid cluster */
   18e4c:	68bb      	ldr	r3, [r7, #8]
   18e4e:	2b01      	cmp	r3, #1
   18e50:	d801      	bhi.n	18e56 <create_chain+0x46>
   18e52:	2301      	movs	r3, #1
   18e54:	e070      	b.n	18f38 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
   18e56:	687b      	ldr	r3, [r7, #4]
   18e58:	699a      	ldr	r2, [r3, #24]
   18e5a:	68bb      	ldr	r3, [r7, #8]
   18e5c:	429a      	cmp	r2, r3
   18e5e:	d901      	bls.n	18e64 <create_chain+0x54>
   18e60:	68bb      	ldr	r3, [r7, #8]
   18e62:	e069      	b.n	18f38 <create_chain+0x128>
		scl = clst;
   18e64:	683b      	ldr	r3, [r7, #0]
   18e66:	613b      	str	r3, [r7, #16]
	}

	ncl = scl;				/* Start cluster */
   18e68:	693b      	ldr	r3, [r7, #16]
   18e6a:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl++;							/* Next cluster */
   18e6c:	697b      	ldr	r3, [r7, #20]
   18e6e:	3301      	adds	r3, #1
   18e70:	617b      	str	r3, [r7, #20]
		if (ncl >= fs->n_fatent) {		/* Wrap around */
   18e72:	687b      	ldr	r3, [r7, #4]
   18e74:	699a      	ldr	r2, [r3, #24]
   18e76:	697b      	ldr	r3, [r7, #20]
   18e78:	429a      	cmp	r2, r3
   18e7a:	d807      	bhi.n	18e8c <create_chain+0x7c>
			ncl = 2;
   18e7c:	2302      	movs	r3, #2
   18e7e:	617b      	str	r3, [r7, #20]
			if (ncl > scl) return 0;	/* No free cluster */
   18e80:	697a      	ldr	r2, [r7, #20]
   18e82:	693b      	ldr	r3, [r7, #16]
   18e84:	429a      	cmp	r2, r3
   18e86:	d901      	bls.n	18e8c <create_chain+0x7c>
   18e88:	2300      	movs	r3, #0
   18e8a:	e055      	b.n	18f38 <create_chain+0x128>
		}
		cs = get_fat(fs, ncl);			/* Get the cluster status */
   18e8c:	697a      	ldr	r2, [r7, #20]
   18e8e:	687b      	ldr	r3, [r7, #4]
   18e90:	0011      	movs	r1, r2
   18e92:	0018      	movs	r0, r3
   18e94:	4b2a      	ldr	r3, [pc, #168]	; (18f40 <create_chain+0x130>)
   18e96:	4798      	blx	r3
   18e98:	0003      	movs	r3, r0
   18e9a:	60bb      	str	r3, [r7, #8]
		if (cs == 0) break;				/* Found a free cluster */
   18e9c:	68bb      	ldr	r3, [r7, #8]
   18e9e:	2b00      	cmp	r3, #0
   18ea0:	d00d      	beq.n	18ebe <create_chain+0xae>
		if (cs == 0xFFFFFFFF || cs == 1)/* An error occurred */
   18ea2:	68bb      	ldr	r3, [r7, #8]
   18ea4:	3301      	adds	r3, #1
   18ea6:	d002      	beq.n	18eae <create_chain+0x9e>
   18ea8:	68bb      	ldr	r3, [r7, #8]
   18eaa:	2b01      	cmp	r3, #1
   18eac:	d101      	bne.n	18eb2 <create_chain+0xa2>
			return cs;
   18eae:	68bb      	ldr	r3, [r7, #8]
   18eb0:	e042      	b.n	18f38 <create_chain+0x128>
		if (ncl == scl) return 0;		/* No free cluster */
   18eb2:	697a      	ldr	r2, [r7, #20]
   18eb4:	693b      	ldr	r3, [r7, #16]
   18eb6:	429a      	cmp	r2, r3
   18eb8:	d1d8      	bne.n	18e6c <create_chain+0x5c>
   18eba:	2300      	movs	r3, #0
   18ebc:	e03c      	b.n	18f38 <create_chain+0x128>
		if (cs == 0) break;				/* Found a free cluster */
   18ebe:	46c0      	nop			; (mov r8, r8)
	}

	res = put_fat(fs, ncl, 0x0FFFFFFF);	/* Mark the new cluster "last link" */
   18ec0:	230f      	movs	r3, #15
   18ec2:	18fc      	adds	r4, r7, r3
   18ec4:	4a1f      	ldr	r2, [pc, #124]	; (18f44 <create_chain+0x134>)
   18ec6:	6979      	ldr	r1, [r7, #20]
   18ec8:	687b      	ldr	r3, [r7, #4]
   18eca:	0018      	movs	r0, r3
   18ecc:	4b1e      	ldr	r3, [pc, #120]	; (18f48 <create_chain+0x138>)
   18ece:	4798      	blx	r3
   18ed0:	0003      	movs	r3, r0
   18ed2:	7023      	strb	r3, [r4, #0]
	if (res == FR_OK && clst != 0) {
   18ed4:	230f      	movs	r3, #15
   18ed6:	18fb      	adds	r3, r7, r3
   18ed8:	781b      	ldrb	r3, [r3, #0]
   18eda:	2b00      	cmp	r3, #0
   18edc:	d10c      	bne.n	18ef8 <create_chain+0xe8>
   18ede:	683b      	ldr	r3, [r7, #0]
   18ee0:	2b00      	cmp	r3, #0
   18ee2:	d009      	beq.n	18ef8 <create_chain+0xe8>
		res = put_fat(fs, clst, ncl);	/* Link it to the previous one if needed */
   18ee4:	230f      	movs	r3, #15
   18ee6:	18fc      	adds	r4, r7, r3
   18ee8:	697a      	ldr	r2, [r7, #20]
   18eea:	6839      	ldr	r1, [r7, #0]
   18eec:	687b      	ldr	r3, [r7, #4]
   18eee:	0018      	movs	r0, r3
   18ef0:	4b15      	ldr	r3, [pc, #84]	; (18f48 <create_chain+0x138>)
   18ef2:	4798      	blx	r3
   18ef4:	0003      	movs	r3, r0
   18ef6:	7023      	strb	r3, [r4, #0]
	}
	if (res == FR_OK) {
   18ef8:	230f      	movs	r3, #15
   18efa:	18fb      	adds	r3, r7, r3
   18efc:	781b      	ldrb	r3, [r3, #0]
   18efe:	2b00      	cmp	r3, #0
   18f00:	d10f      	bne.n	18f22 <create_chain+0x112>
		fs->last_clust = ncl;			/* Update FSINFO */
   18f02:	687b      	ldr	r3, [r7, #4]
   18f04:	697a      	ldr	r2, [r7, #20]
   18f06:	60da      	str	r2, [r3, #12]
		if (fs->free_clust != 0xFFFFFFFF) {
   18f08:	687b      	ldr	r3, [r7, #4]
   18f0a:	691b      	ldr	r3, [r3, #16]
   18f0c:	3301      	adds	r3, #1
   18f0e:	d012      	beq.n	18f36 <create_chain+0x126>
			fs->free_clust--;
   18f10:	687b      	ldr	r3, [r7, #4]
   18f12:	691b      	ldr	r3, [r3, #16]
   18f14:	1e5a      	subs	r2, r3, #1
   18f16:	687b      	ldr	r3, [r7, #4]
   18f18:	611a      	str	r2, [r3, #16]
			fs->fsi_flag = 1;
   18f1a:	687b      	ldr	r3, [r7, #4]
   18f1c:	2201      	movs	r2, #1
   18f1e:	715a      	strb	r2, [r3, #5]
   18f20:	e009      	b.n	18f36 <create_chain+0x126>
		}
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;
   18f22:	230f      	movs	r3, #15
   18f24:	18fb      	adds	r3, r7, r3
   18f26:	781b      	ldrb	r3, [r3, #0]
   18f28:	2b01      	cmp	r3, #1
   18f2a:	d102      	bne.n	18f32 <create_chain+0x122>
   18f2c:	2301      	movs	r3, #1
   18f2e:	425b      	negs	r3, r3
   18f30:	e000      	b.n	18f34 <create_chain+0x124>
   18f32:	2301      	movs	r3, #1
   18f34:	617b      	str	r3, [r7, #20]
	}

	return ncl;		/* Return new cluster number or error code */
   18f36:	697b      	ldr	r3, [r7, #20]
}
   18f38:	0018      	movs	r0, r3
   18f3a:	46bd      	mov	sp, r7
   18f3c:	b007      	add	sp, #28
   18f3e:	bd90      	pop	{r4, r7, pc}
   18f40:	000189a1 	.word	0x000189a1
   18f44:	0fffffff 	.word	0x0fffffff
   18f48:	00018b0d 	.word	0x00018b0d

00018f4c <dir_sdi>:
static
FRESULT dir_sdi (
	DIR *dj,		/* Pointer to directory object */
	WORD idx		/* Directory index number */
)
{
   18f4c:	b580      	push	{r7, lr}
   18f4e:	b084      	sub	sp, #16
   18f50:	af00      	add	r7, sp, #0
   18f52:	6078      	str	r0, [r7, #4]
   18f54:	000a      	movs	r2, r1
   18f56:	1cbb      	adds	r3, r7, #2
   18f58:	801a      	strh	r2, [r3, #0]
	DWORD clst;
	WORD ic;


	dj->index = idx;
   18f5a:	687b      	ldr	r3, [r7, #4]
   18f5c:	1cba      	adds	r2, r7, #2
   18f5e:	8812      	ldrh	r2, [r2, #0]
   18f60:	80da      	strh	r2, [r3, #6]
	clst = dj->sclust;
   18f62:	687b      	ldr	r3, [r7, #4]
   18f64:	689b      	ldr	r3, [r3, #8]
   18f66:	60fb      	str	r3, [r7, #12]
	if (clst == 1 || clst >= dj->fs->n_fatent)	/* Check start cluster range */
   18f68:	68fb      	ldr	r3, [r7, #12]
   18f6a:	2b01      	cmp	r3, #1
   18f6c:	d005      	beq.n	18f7a <dir_sdi+0x2e>
   18f6e:	687b      	ldr	r3, [r7, #4]
   18f70:	681b      	ldr	r3, [r3, #0]
   18f72:	699a      	ldr	r2, [r3, #24]
   18f74:	68fb      	ldr	r3, [r7, #12]
   18f76:	429a      	cmp	r2, r3
   18f78:	d801      	bhi.n	18f7e <dir_sdi+0x32>
		return FR_INT_ERR;
   18f7a:	2302      	movs	r3, #2
   18f7c:	e075      	b.n	1906a <dir_sdi+0x11e>
	if (!clst && dj->fs->fs_type == FS_FAT32)	/* Replace cluster# 0 with root cluster# if in FAT32 */
   18f7e:	68fb      	ldr	r3, [r7, #12]
   18f80:	2b00      	cmp	r3, #0
   18f82:	d108      	bne.n	18f96 <dir_sdi+0x4a>
   18f84:	687b      	ldr	r3, [r7, #4]
   18f86:	681b      	ldr	r3, [r3, #0]
   18f88:	781b      	ldrb	r3, [r3, #0]
   18f8a:	2b03      	cmp	r3, #3
   18f8c:	d103      	bne.n	18f96 <dir_sdi+0x4a>
		clst = dj->fs->dirbase;
   18f8e:	687b      	ldr	r3, [r7, #4]
   18f90:	681b      	ldr	r3, [r3, #0]
   18f92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   18f94:	60fb      	str	r3, [r7, #12]

	if (clst == 0) {	/* Static table (root-dir in FAT12/16) */
   18f96:	68fb      	ldr	r3, [r7, #12]
   18f98:	2b00      	cmp	r3, #0
   18f9a:	d116      	bne.n	18fca <dir_sdi+0x7e>
		dj->clust = clst;
   18f9c:	687b      	ldr	r3, [r7, #4]
   18f9e:	68fa      	ldr	r2, [r7, #12]
   18fa0:	60da      	str	r2, [r3, #12]
		if (idx >= dj->fs->n_rootdir)		/* Index is out of range */
   18fa2:	687b      	ldr	r3, [r7, #4]
   18fa4:	681b      	ldr	r3, [r3, #0]
   18fa6:	891b      	ldrh	r3, [r3, #8]
   18fa8:	1cba      	adds	r2, r7, #2
   18faa:	8812      	ldrh	r2, [r2, #0]
   18fac:	429a      	cmp	r2, r3
   18fae:	d301      	bcc.n	18fb4 <dir_sdi+0x68>
			return FR_INT_ERR;
   18fb0:	2302      	movs	r3, #2
   18fb2:	e05a      	b.n	1906a <dir_sdi+0x11e>
		dj->sect = dj->fs->dirbase + idx / (SS(dj->fs) / SZ_DIR);	/* Sector# */
   18fb4:	687b      	ldr	r3, [r7, #4]
   18fb6:	681b      	ldr	r3, [r3, #0]
   18fb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   18fba:	1cba      	adds	r2, r7, #2
   18fbc:	8812      	ldrh	r2, [r2, #0]
   18fbe:	0912      	lsrs	r2, r2, #4
   18fc0:	b292      	uxth	r2, r2
   18fc2:	189a      	adds	r2, r3, r2
   18fc4:	687b      	ldr	r3, [r7, #4]
   18fc6:	611a      	str	r2, [r3, #16]
   18fc8:	e042      	b.n	19050 <dir_sdi+0x104>
	}
	else {				/* Dynamic table (sub-dirs or root-dir in FAT32) */
		ic = SS(dj->fs) / SZ_DIR * dj->fs->csize;	/* Entries per cluster */
   18fca:	687b      	ldr	r3, [r7, #4]
   18fcc:	681b      	ldr	r3, [r3, #0]
   18fce:	789b      	ldrb	r3, [r3, #2]
   18fd0:	b29a      	uxth	r2, r3
   18fd2:	230a      	movs	r3, #10
   18fd4:	18fb      	adds	r3, r7, r3
   18fd6:	0112      	lsls	r2, r2, #4
   18fd8:	801a      	strh	r2, [r3, #0]
		while (idx >= ic) {	/* Follow cluster chain */
   18fda:	e020      	b.n	1901e <dir_sdi+0xd2>
			clst = get_fat(dj->fs, clst);				/* Get next cluster */
   18fdc:	687b      	ldr	r3, [r7, #4]
   18fde:	681b      	ldr	r3, [r3, #0]
   18fe0:	68fa      	ldr	r2, [r7, #12]
   18fe2:	0011      	movs	r1, r2
   18fe4:	0018      	movs	r0, r3
   18fe6:	4b23      	ldr	r3, [pc, #140]	; (19074 <dir_sdi+0x128>)
   18fe8:	4798      	blx	r3
   18fea:	0003      	movs	r3, r0
   18fec:	60fb      	str	r3, [r7, #12]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
   18fee:	68fb      	ldr	r3, [r7, #12]
   18ff0:	3301      	adds	r3, #1
   18ff2:	d101      	bne.n	18ff8 <dir_sdi+0xac>
   18ff4:	2301      	movs	r3, #1
   18ff6:	e038      	b.n	1906a <dir_sdi+0x11e>
			if (clst < 2 || clst >= dj->fs->n_fatent)	/* Reached to end of table or int error */
   18ff8:	68fb      	ldr	r3, [r7, #12]
   18ffa:	2b01      	cmp	r3, #1
   18ffc:	d905      	bls.n	1900a <dir_sdi+0xbe>
   18ffe:	687b      	ldr	r3, [r7, #4]
   19000:	681b      	ldr	r3, [r3, #0]
   19002:	699a      	ldr	r2, [r3, #24]
   19004:	68fb      	ldr	r3, [r7, #12]
   19006:	429a      	cmp	r2, r3
   19008:	d801      	bhi.n	1900e <dir_sdi+0xc2>
				return FR_INT_ERR;
   1900a:	2302      	movs	r3, #2
   1900c:	e02d      	b.n	1906a <dir_sdi+0x11e>
			idx -= ic;
   1900e:	1cbb      	adds	r3, r7, #2
   19010:	1cb9      	adds	r1, r7, #2
   19012:	220a      	movs	r2, #10
   19014:	18ba      	adds	r2, r7, r2
   19016:	8809      	ldrh	r1, [r1, #0]
   19018:	8812      	ldrh	r2, [r2, #0]
   1901a:	1a8a      	subs	r2, r1, r2
   1901c:	801a      	strh	r2, [r3, #0]
		while (idx >= ic) {	/* Follow cluster chain */
   1901e:	1cba      	adds	r2, r7, #2
   19020:	230a      	movs	r3, #10
   19022:	18fb      	adds	r3, r7, r3
   19024:	8812      	ldrh	r2, [r2, #0]
   19026:	881b      	ldrh	r3, [r3, #0]
   19028:	429a      	cmp	r2, r3
   1902a:	d2d7      	bcs.n	18fdc <dir_sdi+0x90>
		}
		dj->clust = clst;
   1902c:	687b      	ldr	r3, [r7, #4]
   1902e:	68fa      	ldr	r2, [r7, #12]
   19030:	60da      	str	r2, [r3, #12]
		dj->sect = clust2sect(dj->fs, clst) + idx / (SS(dj->fs) / SZ_DIR);	/* Sector# */
   19032:	687b      	ldr	r3, [r7, #4]
   19034:	681b      	ldr	r3, [r3, #0]
   19036:	68fa      	ldr	r2, [r7, #12]
   19038:	0011      	movs	r1, r2
   1903a:	0018      	movs	r0, r3
   1903c:	4b0e      	ldr	r3, [pc, #56]	; (19078 <dir_sdi+0x12c>)
   1903e:	4798      	blx	r3
   19040:	0002      	movs	r2, r0
   19042:	1cbb      	adds	r3, r7, #2
   19044:	881b      	ldrh	r3, [r3, #0]
   19046:	091b      	lsrs	r3, r3, #4
   19048:	b29b      	uxth	r3, r3
   1904a:	18d2      	adds	r2, r2, r3
   1904c:	687b      	ldr	r3, [r7, #4]
   1904e:	611a      	str	r2, [r3, #16]
	}

	dj->dir = dj->fs->win + (idx % (SS(dj->fs) / SZ_DIR)) * SZ_DIR;	/* Ptr to the entry in the sector */
   19050:	687b      	ldr	r3, [r7, #4]
   19052:	681b      	ldr	r3, [r3, #0]
   19054:	3330      	adds	r3, #48	; 0x30
   19056:	001a      	movs	r2, r3
   19058:	1cbb      	adds	r3, r7, #2
   1905a:	881b      	ldrh	r3, [r3, #0]
   1905c:	210f      	movs	r1, #15
   1905e:	400b      	ands	r3, r1
   19060:	015b      	lsls	r3, r3, #5
   19062:	18d2      	adds	r2, r2, r3
   19064:	687b      	ldr	r3, [r7, #4]
   19066:	615a      	str	r2, [r3, #20]

	return FR_OK;	/* Seek succeeded */
   19068:	2300      	movs	r3, #0
}
   1906a:	0018      	movs	r0, r3
   1906c:	46bd      	mov	sp, r7
   1906e:	b004      	add	sp, #16
   19070:	bd80      	pop	{r7, pc}
   19072:	46c0      	nop			; (mov r8, r8)
   19074:	000189a1 	.word	0x000189a1
   19078:	00018969 	.word	0x00018969

0001907c <dir_next>:
static
FRESULT dir_next (	/* FR_OK:Succeeded, FR_NO_FILE:End of table, FR_DENIED:EOT and could not stretch */
	DIR *dj,		/* Pointer to directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
   1907c:	b590      	push	{r4, r7, lr}
   1907e:	b085      	sub	sp, #20
   19080:	af00      	add	r7, sp, #0
   19082:	6078      	str	r0, [r7, #4]
   19084:	6039      	str	r1, [r7, #0]
	DWORD clst;
	WORD i;


	stretch = stretch;		/* To suppress warning on read-only cfg. */
	i = dj->index + 1;
   19086:	687b      	ldr	r3, [r7, #4]
   19088:	88da      	ldrh	r2, [r3, #6]
   1908a:	2308      	movs	r3, #8
   1908c:	18fb      	adds	r3, r7, r3
   1908e:	3201      	adds	r2, #1
   19090:	801a      	strh	r2, [r3, #0]
	if (!i || !dj->sect)	/* Report EOT when index has reached 65535 */
   19092:	2308      	movs	r3, #8
   19094:	18fb      	adds	r3, r7, r3
   19096:	881b      	ldrh	r3, [r3, #0]
   19098:	2b00      	cmp	r3, #0
   1909a:	d003      	beq.n	190a4 <dir_next+0x28>
   1909c:	687b      	ldr	r3, [r7, #4]
   1909e:	691b      	ldr	r3, [r3, #16]
   190a0:	2b00      	cmp	r3, #0
   190a2:	d101      	bne.n	190a8 <dir_next+0x2c>
		return FR_NO_FILE;
   190a4:	2304      	movs	r3, #4
   190a6:	e0d2      	b.n	1924e <dir_next+0x1d2>

	if (!(i % (SS(dj->fs) / SZ_DIR))) {	/* Sector changed? */
   190a8:	2308      	movs	r3, #8
   190aa:	18fb      	adds	r3, r7, r3
   190ac:	881b      	ldrh	r3, [r3, #0]
   190ae:	220f      	movs	r2, #15
   190b0:	4013      	ands	r3, r2
   190b2:	b29b      	uxth	r3, r3
   190b4:	2b00      	cmp	r3, #0
   190b6:	d000      	beq.n	190ba <dir_next+0x3e>
   190b8:	e0b6      	b.n	19228 <dir_next+0x1ac>
		dj->sect++;					/* Next sector */
   190ba:	687b      	ldr	r3, [r7, #4]
   190bc:	691b      	ldr	r3, [r3, #16]
   190be:	1c5a      	adds	r2, r3, #1
   190c0:	687b      	ldr	r3, [r7, #4]
   190c2:	611a      	str	r2, [r3, #16]

		if (dj->clust == 0) {	/* Static table */
   190c4:	687b      	ldr	r3, [r7, #4]
   190c6:	68db      	ldr	r3, [r3, #12]
   190c8:	2b00      	cmp	r3, #0
   190ca:	d10a      	bne.n	190e2 <dir_next+0x66>
			if (i >= dj->fs->n_rootdir)	/* Report EOT when end of table */
   190cc:	687b      	ldr	r3, [r7, #4]
   190ce:	681b      	ldr	r3, [r3, #0]
   190d0:	891b      	ldrh	r3, [r3, #8]
   190d2:	2208      	movs	r2, #8
   190d4:	18ba      	adds	r2, r7, r2
   190d6:	8812      	ldrh	r2, [r2, #0]
   190d8:	429a      	cmp	r2, r3
   190da:	d200      	bcs.n	190de <dir_next+0x62>
   190dc:	e0a4      	b.n	19228 <dir_next+0x1ac>
				return FR_NO_FILE;
   190de:	2304      	movs	r3, #4
   190e0:	e0b5      	b.n	1924e <dir_next+0x1d2>
		}
		else {					/* Dynamic table */
			if (((i / (SS(dj->fs) / SZ_DIR)) & (dj->fs->csize - 1)) == 0) {	/* Cluster changed? */
   190e2:	2308      	movs	r3, #8
   190e4:	18fb      	adds	r3, r7, r3
   190e6:	881b      	ldrh	r3, [r3, #0]
   190e8:	091b      	lsrs	r3, r3, #4
   190ea:	b29b      	uxth	r3, r3
   190ec:	001a      	movs	r2, r3
   190ee:	687b      	ldr	r3, [r7, #4]
   190f0:	681b      	ldr	r3, [r3, #0]
   190f2:	789b      	ldrb	r3, [r3, #2]
   190f4:	3b01      	subs	r3, #1
   190f6:	4013      	ands	r3, r2
   190f8:	d000      	beq.n	190fc <dir_next+0x80>
   190fa:	e095      	b.n	19228 <dir_next+0x1ac>
				clst = get_fat(dj->fs, dj->clust);				/* Get next cluster */
   190fc:	687b      	ldr	r3, [r7, #4]
   190fe:	681a      	ldr	r2, [r3, #0]
   19100:	687b      	ldr	r3, [r7, #4]
   19102:	68db      	ldr	r3, [r3, #12]
   19104:	0019      	movs	r1, r3
   19106:	0010      	movs	r0, r2
   19108:	4b53      	ldr	r3, [pc, #332]	; (19258 <dir_next+0x1dc>)
   1910a:	4798      	blx	r3
   1910c:	0003      	movs	r3, r0
   1910e:	60fb      	str	r3, [r7, #12]
				if (clst <= 1) return FR_INT_ERR;
   19110:	68fb      	ldr	r3, [r7, #12]
   19112:	2b01      	cmp	r3, #1
   19114:	d801      	bhi.n	1911a <dir_next+0x9e>
   19116:	2302      	movs	r3, #2
   19118:	e099      	b.n	1924e <dir_next+0x1d2>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
   1911a:	68fb      	ldr	r3, [r7, #12]
   1911c:	3301      	adds	r3, #1
   1911e:	d101      	bne.n	19124 <dir_next+0xa8>
   19120:	2301      	movs	r3, #1
   19122:	e094      	b.n	1924e <dir_next+0x1d2>
				if (clst >= dj->fs->n_fatent) {					/* When it reached end of dynamic table */
   19124:	687b      	ldr	r3, [r7, #4]
   19126:	681b      	ldr	r3, [r3, #0]
   19128:	699a      	ldr	r2, [r3, #24]
   1912a:	68fb      	ldr	r3, [r7, #12]
   1912c:	429a      	cmp	r2, r3
   1912e:	d900      	bls.n	19132 <dir_next+0xb6>
   19130:	e06d      	b.n	1920e <dir_next+0x192>
#if !_FS_READONLY
					BYTE c;
					if (!stretch) return FR_NO_FILE;			/* When do not stretch, report EOT */
   19132:	683b      	ldr	r3, [r7, #0]
   19134:	2b00      	cmp	r3, #0
   19136:	d101      	bne.n	1913c <dir_next+0xc0>
   19138:	2304      	movs	r3, #4
   1913a:	e088      	b.n	1924e <dir_next+0x1d2>
					clst = create_chain(dj->fs, dj->clust);		/* Stretch cluster chain */
   1913c:	687b      	ldr	r3, [r7, #4]
   1913e:	681a      	ldr	r2, [r3, #0]
   19140:	687b      	ldr	r3, [r7, #4]
   19142:	68db      	ldr	r3, [r3, #12]
   19144:	0019      	movs	r1, r3
   19146:	0010      	movs	r0, r2
   19148:	4b44      	ldr	r3, [pc, #272]	; (1925c <dir_next+0x1e0>)
   1914a:	4798      	blx	r3
   1914c:	0003      	movs	r3, r0
   1914e:	60fb      	str	r3, [r7, #12]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
   19150:	68fb      	ldr	r3, [r7, #12]
   19152:	2b00      	cmp	r3, #0
   19154:	d101      	bne.n	1915a <dir_next+0xde>
   19156:	2307      	movs	r3, #7
   19158:	e079      	b.n	1924e <dir_next+0x1d2>
					if (clst == 1) return FR_INT_ERR;
   1915a:	68fb      	ldr	r3, [r7, #12]
   1915c:	2b01      	cmp	r3, #1
   1915e:	d101      	bne.n	19164 <dir_next+0xe8>
   19160:	2302      	movs	r3, #2
   19162:	e074      	b.n	1924e <dir_next+0x1d2>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
   19164:	68fb      	ldr	r3, [r7, #12]
   19166:	3301      	adds	r3, #1
   19168:	d101      	bne.n	1916e <dir_next+0xf2>
   1916a:	2301      	movs	r3, #1
   1916c:	e06f      	b.n	1924e <dir_next+0x1d2>
					/* Clean-up stretched table */
					if (move_window(dj->fs, 0)) return FR_DISK_ERR;	/* Flush active window */
   1916e:	687b      	ldr	r3, [r7, #4]
   19170:	681b      	ldr	r3, [r3, #0]
   19172:	2100      	movs	r1, #0
   19174:	0018      	movs	r0, r3
   19176:	4b3a      	ldr	r3, [pc, #232]	; (19260 <dir_next+0x1e4>)
   19178:	4798      	blx	r3
   1917a:	1e03      	subs	r3, r0, #0
   1917c:	d001      	beq.n	19182 <dir_next+0x106>
   1917e:	2301      	movs	r3, #1
   19180:	e065      	b.n	1924e <dir_next+0x1d2>
					mem_set(dj->fs->win, 0, SS(dj->fs));			/* Clear window buffer */
   19182:	687b      	ldr	r3, [r7, #4]
   19184:	681b      	ldr	r3, [r3, #0]
   19186:	3330      	adds	r3, #48	; 0x30
   19188:	0018      	movs	r0, r3
   1918a:	2380      	movs	r3, #128	; 0x80
   1918c:	009b      	lsls	r3, r3, #2
   1918e:	001a      	movs	r2, r3
   19190:	2100      	movs	r1, #0
   19192:	4b34      	ldr	r3, [pc, #208]	; (19264 <dir_next+0x1e8>)
   19194:	4798      	blx	r3
					dj->fs->winsect = clust2sect(dj->fs, clst);	/* Cluster start sector */
   19196:	687b      	ldr	r3, [r7, #4]
   19198:	681c      	ldr	r4, [r3, #0]
   1919a:	687b      	ldr	r3, [r7, #4]
   1919c:	681b      	ldr	r3, [r3, #0]
   1919e:	68fa      	ldr	r2, [r7, #12]
   191a0:	0011      	movs	r1, r2
   191a2:	0018      	movs	r0, r3
   191a4:	4b30      	ldr	r3, [pc, #192]	; (19268 <dir_next+0x1ec>)
   191a6:	4798      	blx	r3
   191a8:	0003      	movs	r3, r0
   191aa:	62e3      	str	r3, [r4, #44]	; 0x2c
					for (c = 0; c < dj->fs->csize; c++) {		/* Fill the new cluster with 0 */
   191ac:	230b      	movs	r3, #11
   191ae:	18fb      	adds	r3, r7, r3
   191b0:	2200      	movs	r2, #0
   191b2:	701a      	strb	r2, [r3, #0]
   191b4:	e019      	b.n	191ea <dir_next+0x16e>
						dj->fs->wflag = 1;
   191b6:	687b      	ldr	r3, [r7, #4]
   191b8:	681b      	ldr	r3, [r3, #0]
   191ba:	2201      	movs	r2, #1
   191bc:	711a      	strb	r2, [r3, #4]
						if (move_window(dj->fs, 0)) return FR_DISK_ERR;
   191be:	687b      	ldr	r3, [r7, #4]
   191c0:	681b      	ldr	r3, [r3, #0]
   191c2:	2100      	movs	r1, #0
   191c4:	0018      	movs	r0, r3
   191c6:	4b26      	ldr	r3, [pc, #152]	; (19260 <dir_next+0x1e4>)
   191c8:	4798      	blx	r3
   191ca:	1e03      	subs	r3, r0, #0
   191cc:	d001      	beq.n	191d2 <dir_next+0x156>
   191ce:	2301      	movs	r3, #1
   191d0:	e03d      	b.n	1924e <dir_next+0x1d2>
						dj->fs->winsect++;
   191d2:	687b      	ldr	r3, [r7, #4]
   191d4:	681b      	ldr	r3, [r3, #0]
   191d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   191d8:	3201      	adds	r2, #1
   191da:	62da      	str	r2, [r3, #44]	; 0x2c
					for (c = 0; c < dj->fs->csize; c++) {		/* Fill the new cluster with 0 */
   191dc:	230b      	movs	r3, #11
   191de:	18fb      	adds	r3, r7, r3
   191e0:	781a      	ldrb	r2, [r3, #0]
   191e2:	230b      	movs	r3, #11
   191e4:	18fb      	adds	r3, r7, r3
   191e6:	3201      	adds	r2, #1
   191e8:	701a      	strb	r2, [r3, #0]
   191ea:	687b      	ldr	r3, [r7, #4]
   191ec:	681b      	ldr	r3, [r3, #0]
   191ee:	789b      	ldrb	r3, [r3, #2]
   191f0:	220b      	movs	r2, #11
   191f2:	18ba      	adds	r2, r7, r2
   191f4:	7812      	ldrb	r2, [r2, #0]
   191f6:	429a      	cmp	r2, r3
   191f8:	d3dd      	bcc.n	191b6 <dir_next+0x13a>
					}
					dj->fs->winsect -= c;						/* Rewind window address */
   191fa:	687b      	ldr	r3, [r7, #4]
   191fc:	681b      	ldr	r3, [r3, #0]
   191fe:	687a      	ldr	r2, [r7, #4]
   19200:	6812      	ldr	r2, [r2, #0]
   19202:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
   19204:	220b      	movs	r2, #11
   19206:	18ba      	adds	r2, r7, r2
   19208:	7812      	ldrb	r2, [r2, #0]
   1920a:	1a8a      	subs	r2, r1, r2
   1920c:	62da      	str	r2, [r3, #44]	; 0x2c
#else
					return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dj->clust = clst;				/* Initialize data for new cluster */
   1920e:	687b      	ldr	r3, [r7, #4]
   19210:	68fa      	ldr	r2, [r7, #12]
   19212:	60da      	str	r2, [r3, #12]
				dj->sect = clust2sect(dj->fs, clst);
   19214:	687b      	ldr	r3, [r7, #4]
   19216:	681b      	ldr	r3, [r3, #0]
   19218:	68fa      	ldr	r2, [r7, #12]
   1921a:	0011      	movs	r1, r2
   1921c:	0018      	movs	r0, r3
   1921e:	4b12      	ldr	r3, [pc, #72]	; (19268 <dir_next+0x1ec>)
   19220:	4798      	blx	r3
   19222:	0002      	movs	r2, r0
   19224:	687b      	ldr	r3, [r7, #4]
   19226:	611a      	str	r2, [r3, #16]
			}
		}
	}

	dj->index = i;
   19228:	687b      	ldr	r3, [r7, #4]
   1922a:	2208      	movs	r2, #8
   1922c:	18ba      	adds	r2, r7, r2
   1922e:	8812      	ldrh	r2, [r2, #0]
   19230:	80da      	strh	r2, [r3, #6]
	dj->dir = dj->fs->win + (i % (SS(dj->fs) / SZ_DIR)) * SZ_DIR;
   19232:	687b      	ldr	r3, [r7, #4]
   19234:	681b      	ldr	r3, [r3, #0]
   19236:	3330      	adds	r3, #48	; 0x30
   19238:	001a      	movs	r2, r3
   1923a:	2308      	movs	r3, #8
   1923c:	18fb      	adds	r3, r7, r3
   1923e:	881b      	ldrh	r3, [r3, #0]
   19240:	210f      	movs	r1, #15
   19242:	400b      	ands	r3, r1
   19244:	015b      	lsls	r3, r3, #5
   19246:	18d2      	adds	r2, r2, r3
   19248:	687b      	ldr	r3, [r7, #4]
   1924a:	615a      	str	r2, [r3, #20]

	return FR_OK;
   1924c:	2300      	movs	r3, #0
}
   1924e:	0018      	movs	r0, r3
   19250:	46bd      	mov	sp, r7
   19252:	b005      	add	sp, #20
   19254:	bd90      	pop	{r4, r7, pc}
   19256:	46c0      	nop			; (mov r8, r8)
   19258:	000189a1 	.word	0x000189a1
   1925c:	00018e11 	.word	0x00018e11
   19260:	00018709 	.word	0x00018709
   19264:	0001865d 	.word	0x0001865d
   19268:	00018969 	.word	0x00018969

0001926c <cmp_lfn>:
static
int cmp_lfn (			/* 1:Matched, 0:Not matched */
	WCHAR *lfnbuf,		/* Pointer to the LFN to be compared */
	BYTE *dir			/* Pointer to the directory entry containing a part of LFN */
)
{
   1926c:	b590      	push	{r4, r7, lr}
   1926e:	b087      	sub	sp, #28
   19270:	af00      	add	r7, sp, #0
   19272:	6078      	str	r0, [r7, #4]
   19274:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	i = ((dir[LDIR_Ord] & ~LLE) - 1) * 13;	/* Get offset in the LFN buffer */
   19276:	683b      	ldr	r3, [r7, #0]
   19278:	781b      	ldrb	r3, [r3, #0]
   1927a:	001a      	movs	r2, r3
   1927c:	2340      	movs	r3, #64	; 0x40
   1927e:	439a      	bics	r2, r3
   19280:	0013      	movs	r3, r2
   19282:	1e5a      	subs	r2, r3, #1
   19284:	0013      	movs	r3, r2
   19286:	005b      	lsls	r3, r3, #1
   19288:	189b      	adds	r3, r3, r2
   1928a:	009b      	lsls	r3, r3, #2
   1928c:	189b      	adds	r3, r3, r2
   1928e:	617b      	str	r3, [r7, #20]
	s = 0; wc = 1;
   19290:	2300      	movs	r3, #0
   19292:	613b      	str	r3, [r7, #16]
   19294:	230e      	movs	r3, #14
   19296:	18fb      	adds	r3, r7, r3
   19298:	2201      	movs	r2, #1
   1929a:	801a      	strh	r2, [r3, #0]
	do {
		uc = LD_WORD(dir+LfnOfs[s]);	/* Pick an LFN character from the entry */
   1929c:	4a31      	ldr	r2, [pc, #196]	; (19364 <cmp_lfn+0xf8>)
   1929e:	693b      	ldr	r3, [r7, #16]
   192a0:	18d3      	adds	r3, r2, r3
   192a2:	781b      	ldrb	r3, [r3, #0]
   192a4:	3301      	adds	r3, #1
   192a6:	683a      	ldr	r2, [r7, #0]
   192a8:	18d3      	adds	r3, r2, r3
   192aa:	781b      	ldrb	r3, [r3, #0]
   192ac:	021b      	lsls	r3, r3, #8
   192ae:	b21a      	sxth	r2, r3
   192b0:	492c      	ldr	r1, [pc, #176]	; (19364 <cmp_lfn+0xf8>)
   192b2:	693b      	ldr	r3, [r7, #16]
   192b4:	18cb      	adds	r3, r1, r3
   192b6:	781b      	ldrb	r3, [r3, #0]
   192b8:	0019      	movs	r1, r3
   192ba:	683b      	ldr	r3, [r7, #0]
   192bc:	185b      	adds	r3, r3, r1
   192be:	781b      	ldrb	r3, [r3, #0]
   192c0:	b21b      	sxth	r3, r3
   192c2:	4313      	orrs	r3, r2
   192c4:	b21a      	sxth	r2, r3
   192c6:	230c      	movs	r3, #12
   192c8:	18fb      	adds	r3, r7, r3
   192ca:	801a      	strh	r2, [r3, #0]
		if (wc) {	/* Last char has not been processed */
   192cc:	230e      	movs	r3, #14
   192ce:	18fb      	adds	r3, r7, r3
   192d0:	881b      	ldrh	r3, [r3, #0]
   192d2:	2b00      	cmp	r3, #0
   192d4:	d01f      	beq.n	19316 <cmp_lfn+0xaa>
			wc = ff_wtoupper(uc);		/* Convert it to upper case */
   192d6:	230e      	movs	r3, #14
   192d8:	18fc      	adds	r4, r7, r3
   192da:	230c      	movs	r3, #12
   192dc:	18fb      	adds	r3, r7, r3
   192de:	881b      	ldrh	r3, [r3, #0]
   192e0:	0018      	movs	r0, r3
   192e2:	4b21      	ldr	r3, [pc, #132]	; (19368 <cmp_lfn+0xfc>)
   192e4:	4798      	blx	r3
   192e6:	0003      	movs	r3, r0
   192e8:	8023      	strh	r3, [r4, #0]
			if (i >= _MAX_LFN || wc != ff_wtoupper(lfnbuf[i++]))	/* Compare it */
   192ea:	697b      	ldr	r3, [r7, #20]
   192ec:	2bfe      	cmp	r3, #254	; 0xfe
   192ee:	d810      	bhi.n	19312 <cmp_lfn+0xa6>
   192f0:	697b      	ldr	r3, [r7, #20]
   192f2:	1c5a      	adds	r2, r3, #1
   192f4:	617a      	str	r2, [r7, #20]
   192f6:	005b      	lsls	r3, r3, #1
   192f8:	687a      	ldr	r2, [r7, #4]
   192fa:	18d3      	adds	r3, r2, r3
   192fc:	881b      	ldrh	r3, [r3, #0]
   192fe:	0018      	movs	r0, r3
   19300:	4b19      	ldr	r3, [pc, #100]	; (19368 <cmp_lfn+0xfc>)
   19302:	4798      	blx	r3
   19304:	0003      	movs	r3, r0
   19306:	001a      	movs	r2, r3
   19308:	230e      	movs	r3, #14
   1930a:	18fb      	adds	r3, r7, r3
   1930c:	881b      	ldrh	r3, [r3, #0]
   1930e:	4293      	cmp	r3, r2
   19310:	d009      	beq.n	19326 <cmp_lfn+0xba>
				return 0;				/* Not matched */
   19312:	2300      	movs	r3, #0
   19314:	e022      	b.n	1935c <cmp_lfn+0xf0>
		} else {
			if (uc != 0xFFFF) return 0;	/* Check filler */
   19316:	230c      	movs	r3, #12
   19318:	18fb      	adds	r3, r7, r3
   1931a:	881b      	ldrh	r3, [r3, #0]
   1931c:	4a13      	ldr	r2, [pc, #76]	; (1936c <cmp_lfn+0x100>)
   1931e:	4293      	cmp	r3, r2
   19320:	d001      	beq.n	19326 <cmp_lfn+0xba>
   19322:	2300      	movs	r3, #0
   19324:	e01a      	b.n	1935c <cmp_lfn+0xf0>
		}
	} while (++s < 13);				/* Repeat until all chars in the entry are checked */
   19326:	693b      	ldr	r3, [r7, #16]
   19328:	3301      	adds	r3, #1
   1932a:	613b      	str	r3, [r7, #16]
   1932c:	693b      	ldr	r3, [r7, #16]
   1932e:	2b0c      	cmp	r3, #12
   19330:	d9b4      	bls.n	1929c <cmp_lfn+0x30>

	if ((dir[LDIR_Ord] & LLE) && wc && lfnbuf[i])	/* Last segment matched but different length */
   19332:	683b      	ldr	r3, [r7, #0]
   19334:	781b      	ldrb	r3, [r3, #0]
   19336:	001a      	movs	r2, r3
   19338:	2340      	movs	r3, #64	; 0x40
   1933a:	4013      	ands	r3, r2
   1933c:	d00d      	beq.n	1935a <cmp_lfn+0xee>
   1933e:	230e      	movs	r3, #14
   19340:	18fb      	adds	r3, r7, r3
   19342:	881b      	ldrh	r3, [r3, #0]
   19344:	2b00      	cmp	r3, #0
   19346:	d008      	beq.n	1935a <cmp_lfn+0xee>
   19348:	697b      	ldr	r3, [r7, #20]
   1934a:	005b      	lsls	r3, r3, #1
   1934c:	687a      	ldr	r2, [r7, #4]
   1934e:	18d3      	adds	r3, r2, r3
   19350:	881b      	ldrh	r3, [r3, #0]
   19352:	2b00      	cmp	r3, #0
   19354:	d001      	beq.n	1935a <cmp_lfn+0xee>
		return 0;
   19356:	2300      	movs	r3, #0
   19358:	e000      	b.n	1935c <cmp_lfn+0xf0>

	return 1;						/* The part of LFN matched */
   1935a:	2301      	movs	r3, #1
}
   1935c:	0018      	movs	r0, r3
   1935e:	46bd      	mov	sp, r7
   19360:	b007      	add	sp, #28
   19362:	bd90      	pop	{r4, r7, pc}
   19364:	000260d0 	.word	0x000260d0
   19368:	0001b319 	.word	0x0001b319
   1936c:	0000ffff 	.word	0x0000ffff

00019370 <fit_lfn>:
	const WCHAR *lfnbuf,	/* Pointer to the LFN buffer */
	BYTE *dir,				/* Pointer to the directory entry */
	BYTE ord,				/* LFN order (1-20) */
	BYTE sum				/* SFN sum */
)
{
   19370:	b580      	push	{r7, lr}
   19372:	b088      	sub	sp, #32
   19374:	af00      	add	r7, sp, #0
   19376:	60f8      	str	r0, [r7, #12]
   19378:	60b9      	str	r1, [r7, #8]
   1937a:	0019      	movs	r1, r3
   1937c:	1dfb      	adds	r3, r7, #7
   1937e:	701a      	strb	r2, [r3, #0]
   19380:	1dbb      	adds	r3, r7, #6
   19382:	1c0a      	adds	r2, r1, #0
   19384:	701a      	strb	r2, [r3, #0]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set check sum */
   19386:	68bb      	ldr	r3, [r7, #8]
   19388:	330d      	adds	r3, #13
   1938a:	1dba      	adds	r2, r7, #6
   1938c:	7812      	ldrb	r2, [r2, #0]
   1938e:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
   19390:	68bb      	ldr	r3, [r7, #8]
   19392:	330b      	adds	r3, #11
   19394:	220f      	movs	r2, #15
   19396:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
   19398:	68bb      	ldr	r3, [r7, #8]
   1939a:	330c      	adds	r3, #12
   1939c:	2200      	movs	r2, #0
   1939e:	701a      	strb	r2, [r3, #0]
	ST_WORD(dir+LDIR_FstClusLO, 0);
   193a0:	68bb      	ldr	r3, [r7, #8]
   193a2:	331a      	adds	r3, #26
   193a4:	2200      	movs	r2, #0
   193a6:	701a      	strb	r2, [r3, #0]
   193a8:	68bb      	ldr	r3, [r7, #8]
   193aa:	331b      	adds	r3, #27
   193ac:	2200      	movs	r2, #0
   193ae:	701a      	strb	r2, [r3, #0]

	i = (ord - 1) * 13;				/* Get offset in the LFN buffer */
   193b0:	1dfb      	adds	r3, r7, #7
   193b2:	781b      	ldrb	r3, [r3, #0]
   193b4:	1e5a      	subs	r2, r3, #1
   193b6:	0013      	movs	r3, r2
   193b8:	005b      	lsls	r3, r3, #1
   193ba:	189b      	adds	r3, r3, r2
   193bc:	009b      	lsls	r3, r3, #2
   193be:	189b      	adds	r3, r3, r2
   193c0:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
   193c2:	2316      	movs	r3, #22
   193c4:	18fb      	adds	r3, r7, r3
   193c6:	2200      	movs	r2, #0
   193c8:	801a      	strh	r2, [r3, #0]
   193ca:	2300      	movs	r3, #0
   193cc:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfnbuf[i++];	/* Get an effective char */
   193ce:	2316      	movs	r3, #22
   193d0:	18fb      	adds	r3, r7, r3
   193d2:	881b      	ldrh	r3, [r3, #0]
   193d4:	4a28      	ldr	r2, [pc, #160]	; (19478 <fit_lfn+0x108>)
   193d6:	4293      	cmp	r3, r2
   193d8:	d009      	beq.n	193ee <fit_lfn+0x7e>
   193da:	69fb      	ldr	r3, [r7, #28]
   193dc:	1c5a      	adds	r2, r3, #1
   193de:	61fa      	str	r2, [r7, #28]
   193e0:	005b      	lsls	r3, r3, #1
   193e2:	68fa      	ldr	r2, [r7, #12]
   193e4:	18d2      	adds	r2, r2, r3
   193e6:	2316      	movs	r3, #22
   193e8:	18fb      	adds	r3, r7, r3
   193ea:	8812      	ldrh	r2, [r2, #0]
   193ec:	801a      	strh	r2, [r3, #0]
		ST_WORD(dir+LfnOfs[s], wc);	/* Put it */
   193ee:	4a23      	ldr	r2, [pc, #140]	; (1947c <fit_lfn+0x10c>)
   193f0:	69bb      	ldr	r3, [r7, #24]
   193f2:	18d3      	adds	r3, r2, r3
   193f4:	781b      	ldrb	r3, [r3, #0]
   193f6:	001a      	movs	r2, r3
   193f8:	68bb      	ldr	r3, [r7, #8]
   193fa:	189b      	adds	r3, r3, r2
   193fc:	2216      	movs	r2, #22
   193fe:	18ba      	adds	r2, r7, r2
   19400:	8812      	ldrh	r2, [r2, #0]
   19402:	b2d2      	uxtb	r2, r2
   19404:	701a      	strb	r2, [r3, #0]
   19406:	4a1d      	ldr	r2, [pc, #116]	; (1947c <fit_lfn+0x10c>)
   19408:	69bb      	ldr	r3, [r7, #24]
   1940a:	18d3      	adds	r3, r2, r3
   1940c:	781b      	ldrb	r3, [r3, #0]
   1940e:	3301      	adds	r3, #1
   19410:	68ba      	ldr	r2, [r7, #8]
   19412:	18d3      	adds	r3, r2, r3
   19414:	2216      	movs	r2, #22
   19416:	18ba      	adds	r2, r7, r2
   19418:	8812      	ldrh	r2, [r2, #0]
   1941a:	0a12      	lsrs	r2, r2, #8
   1941c:	b292      	uxth	r2, r2
   1941e:	b2d2      	uxtb	r2, r2
   19420:	701a      	strb	r2, [r3, #0]
		if (!wc) wc = 0xFFFF;		/* Padding chars following last char */
   19422:	2316      	movs	r3, #22
   19424:	18fb      	adds	r3, r7, r3
   19426:	881b      	ldrh	r3, [r3, #0]
   19428:	2b00      	cmp	r3, #0
   1942a:	d104      	bne.n	19436 <fit_lfn+0xc6>
   1942c:	2316      	movs	r3, #22
   1942e:	18fb      	adds	r3, r7, r3
   19430:	2201      	movs	r2, #1
   19432:	4252      	negs	r2, r2
   19434:	801a      	strh	r2, [r3, #0]
	} while (++s < 13);
   19436:	69bb      	ldr	r3, [r7, #24]
   19438:	3301      	adds	r3, #1
   1943a:	61bb      	str	r3, [r7, #24]
   1943c:	69bb      	ldr	r3, [r7, #24]
   1943e:	2b0c      	cmp	r3, #12
   19440:	d9c5      	bls.n	193ce <fit_lfn+0x5e>
	if (wc == 0xFFFF || !lfnbuf[i]) ord |= LLE;	/* Bottom LFN part is the start of LFN sequence */
   19442:	2316      	movs	r3, #22
   19444:	18fb      	adds	r3, r7, r3
   19446:	881b      	ldrh	r3, [r3, #0]
   19448:	4a0b      	ldr	r2, [pc, #44]	; (19478 <fit_lfn+0x108>)
   1944a:	4293      	cmp	r3, r2
   1944c:	d006      	beq.n	1945c <fit_lfn+0xec>
   1944e:	69fb      	ldr	r3, [r7, #28]
   19450:	005b      	lsls	r3, r3, #1
   19452:	68fa      	ldr	r2, [r7, #12]
   19454:	18d3      	adds	r3, r2, r3
   19456:	881b      	ldrh	r3, [r3, #0]
   19458:	2b00      	cmp	r3, #0
   1945a:	d105      	bne.n	19468 <fit_lfn+0xf8>
   1945c:	1dfb      	adds	r3, r7, #7
   1945e:	1dfa      	adds	r2, r7, #7
   19460:	7812      	ldrb	r2, [r2, #0]
   19462:	2140      	movs	r1, #64	; 0x40
   19464:	430a      	orrs	r2, r1
   19466:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
   19468:	68bb      	ldr	r3, [r7, #8]
   1946a:	1dfa      	adds	r2, r7, #7
   1946c:	7812      	ldrb	r2, [r2, #0]
   1946e:	701a      	strb	r2, [r3, #0]
}
   19470:	46c0      	nop			; (mov r8, r8)
   19472:	46bd      	mov	sp, r7
   19474:	b008      	add	sp, #32
   19476:	bd80      	pop	{r7, pc}
   19478:	0000ffff 	.word	0x0000ffff
   1947c:	000260d0 	.word	0x000260d0

00019480 <gen_numname>:
	BYTE *dst,			/* Pointer to generated SFN */
	const BYTE *src,	/* Pointer to source SFN to be modified */
	const WCHAR *lfn,	/* Pointer to LFN */
	WORD seq			/* Sequence number */
)
{
   19480:	b580      	push	{r7, lr}
   19482:	b08a      	sub	sp, #40	; 0x28
   19484:	af00      	add	r7, sp, #0
   19486:	60f8      	str	r0, [r7, #12]
   19488:	60b9      	str	r1, [r7, #8]
   1948a:	607a      	str	r2, [r7, #4]
   1948c:	001a      	movs	r2, r3
   1948e:	1cbb      	adds	r3, r7, #2
   19490:	801a      	strh	r2, [r3, #0]
	BYTE ns[8], c;
	UINT i, j;


	mem_cpy(dst, src, 11);
   19492:	68b9      	ldr	r1, [r7, #8]
   19494:	68fb      	ldr	r3, [r7, #12]
   19496:	220b      	movs	r2, #11
   19498:	0018      	movs	r0, r3
   1949a:	4b38      	ldr	r3, [pc, #224]	; (1957c <gen_numname+0xfc>)
   1949c:	4798      	blx	r3

	if (seq > 5) {	/* On many collisions, generate a hash number instead of sequential number */
   1949e:	1cbb      	adds	r3, r7, #2
   194a0:	881b      	ldrh	r3, [r3, #0]
   194a2:	2b05      	cmp	r3, #5
   194a4:	d911      	bls.n	194ca <gen_numname+0x4a>
		do seq = (seq >> 1) + (seq << 15) + (WORD)*lfn++; while (*lfn);
   194a6:	1cbb      	adds	r3, r7, #2
   194a8:	881b      	ldrh	r3, [r3, #0]
   194aa:	b29a      	uxth	r2, r3
   194ac:	0852      	lsrs	r2, r2, #1
   194ae:	03db      	lsls	r3, r3, #15
   194b0:	4313      	orrs	r3, r2
   194b2:	b299      	uxth	r1, r3
   194b4:	687b      	ldr	r3, [r7, #4]
   194b6:	1c9a      	adds	r2, r3, #2
   194b8:	607a      	str	r2, [r7, #4]
   194ba:	881a      	ldrh	r2, [r3, #0]
   194bc:	1cbb      	adds	r3, r7, #2
   194be:	188a      	adds	r2, r1, r2
   194c0:	801a      	strh	r2, [r3, #0]
   194c2:	687b      	ldr	r3, [r7, #4]
   194c4:	881b      	ldrh	r3, [r3, #0]
   194c6:	2b00      	cmp	r3, #0
   194c8:	d1ed      	bne.n	194a6 <gen_numname+0x26>
	}

	/* itoa (hexdecimal) */
	i = 7;
   194ca:	2307      	movs	r3, #7
   194cc:	623b      	str	r3, [r7, #32]
	do {
		c = (seq % 16) + '0';
   194ce:	1cbb      	adds	r3, r7, #2
   194d0:	881b      	ldrh	r3, [r3, #0]
   194d2:	b2db      	uxtb	r3, r3
   194d4:	220f      	movs	r2, #15
   194d6:	4013      	ands	r3, r2
   194d8:	b2da      	uxtb	r2, r3
   194da:	2327      	movs	r3, #39	; 0x27
   194dc:	18fb      	adds	r3, r7, r3
   194de:	3230      	adds	r2, #48	; 0x30
   194e0:	701a      	strb	r2, [r3, #0]
		if (c > '9') c += 7;
   194e2:	2327      	movs	r3, #39	; 0x27
   194e4:	18fb      	adds	r3, r7, r3
   194e6:	781b      	ldrb	r3, [r3, #0]
   194e8:	2b39      	cmp	r3, #57	; 0x39
   194ea:	d906      	bls.n	194fa <gen_numname+0x7a>
   194ec:	2327      	movs	r3, #39	; 0x27
   194ee:	18fb      	adds	r3, r7, r3
   194f0:	2227      	movs	r2, #39	; 0x27
   194f2:	18ba      	adds	r2, r7, r2
   194f4:	7812      	ldrb	r2, [r2, #0]
   194f6:	3207      	adds	r2, #7
   194f8:	701a      	strb	r2, [r3, #0]
		ns[i--] = c;
   194fa:	6a3b      	ldr	r3, [r7, #32]
   194fc:	1e5a      	subs	r2, r3, #1
   194fe:	623a      	str	r2, [r7, #32]
   19500:	2214      	movs	r2, #20
   19502:	18ba      	adds	r2, r7, r2
   19504:	2127      	movs	r1, #39	; 0x27
   19506:	1879      	adds	r1, r7, r1
   19508:	7809      	ldrb	r1, [r1, #0]
   1950a:	54d1      	strb	r1, [r2, r3]
		seq /= 16;
   1950c:	1cbb      	adds	r3, r7, #2
   1950e:	1cba      	adds	r2, r7, #2
   19510:	8812      	ldrh	r2, [r2, #0]
   19512:	0912      	lsrs	r2, r2, #4
   19514:	801a      	strh	r2, [r3, #0]
	} while (seq);
   19516:	1cbb      	adds	r3, r7, #2
   19518:	881b      	ldrh	r3, [r3, #0]
   1951a:	2b00      	cmp	r3, #0
   1951c:	d1d7      	bne.n	194ce <gen_numname+0x4e>
	ns[i] = '~';
   1951e:	2314      	movs	r3, #20
   19520:	18fa      	adds	r2, r7, r3
   19522:	6a3b      	ldr	r3, [r7, #32]
   19524:	18d3      	adds	r3, r2, r3
   19526:	227e      	movs	r2, #126	; 0x7e
   19528:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
   1952a:	2300      	movs	r3, #0
   1952c:	61fb      	str	r3, [r7, #28]
   1952e:	e002      	b.n	19536 <gen_numname+0xb6>
   19530:	69fb      	ldr	r3, [r7, #28]
   19532:	3301      	adds	r3, #1
   19534:	61fb      	str	r3, [r7, #28]
   19536:	69fa      	ldr	r2, [r7, #28]
   19538:	6a3b      	ldr	r3, [r7, #32]
   1953a:	429a      	cmp	r2, r3
   1953c:	d205      	bcs.n	1954a <gen_numname+0xca>
   1953e:	68fa      	ldr	r2, [r7, #12]
   19540:	69fb      	ldr	r3, [r7, #28]
   19542:	18d3      	adds	r3, r2, r3
   19544:	781b      	ldrb	r3, [r3, #0]
   19546:	2b20      	cmp	r3, #32
   19548:	d1f2      	bne.n	19530 <gen_numname+0xb0>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
   1954a:	69fb      	ldr	r3, [r7, #28]
   1954c:	1c5a      	adds	r2, r3, #1
   1954e:	61fa      	str	r2, [r7, #28]
   19550:	68fa      	ldr	r2, [r7, #12]
   19552:	18d2      	adds	r2, r2, r3
   19554:	6a3b      	ldr	r3, [r7, #32]
   19556:	2b07      	cmp	r3, #7
   19558:	d806      	bhi.n	19568 <gen_numname+0xe8>
   1955a:	6a3b      	ldr	r3, [r7, #32]
   1955c:	1c59      	adds	r1, r3, #1
   1955e:	6239      	str	r1, [r7, #32]
   19560:	2114      	movs	r1, #20
   19562:	1879      	adds	r1, r7, r1
   19564:	5ccb      	ldrb	r3, [r1, r3]
   19566:	e000      	b.n	1956a <gen_numname+0xea>
   19568:	2320      	movs	r3, #32
   1956a:	7013      	strb	r3, [r2, #0]
	} while (j < 8);
   1956c:	69fb      	ldr	r3, [r7, #28]
   1956e:	2b07      	cmp	r3, #7
   19570:	d9eb      	bls.n	1954a <gen_numname+0xca>
}
   19572:	46c0      	nop			; (mov r8, r8)
   19574:	46bd      	mov	sp, r7
   19576:	b00a      	add	sp, #40	; 0x28
   19578:	bd80      	pop	{r7, pc}
   1957a:	46c0      	nop			; (mov r8, r8)
   1957c:	00018625 	.word	0x00018625

00019580 <sum_sfn>:
#if _USE_LFN
static
BYTE sum_sfn (
	const BYTE *dir		/* Ptr to directory entry */
)
{
   19580:	b580      	push	{r7, lr}
   19582:	b084      	sub	sp, #16
   19584:	af00      	add	r7, sp, #0
   19586:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
   19588:	230f      	movs	r3, #15
   1958a:	18fb      	adds	r3, r7, r3
   1958c:	2200      	movs	r2, #0
   1958e:	701a      	strb	r2, [r3, #0]
	UINT n = 11;
   19590:	230b      	movs	r3, #11
   19592:	60bb      	str	r3, [r7, #8]

	do sum = (sum >> 1) + (sum << 7) + *dir++; while (--n);
   19594:	230f      	movs	r3, #15
   19596:	18fb      	adds	r3, r7, r3
   19598:	781b      	ldrb	r3, [r3, #0]
   1959a:	b2da      	uxtb	r2, r3
   1959c:	0852      	lsrs	r2, r2, #1
   1959e:	01db      	lsls	r3, r3, #7
   195a0:	4313      	orrs	r3, r2
   195a2:	b2d9      	uxtb	r1, r3
   195a4:	687b      	ldr	r3, [r7, #4]
   195a6:	1c5a      	adds	r2, r3, #1
   195a8:	607a      	str	r2, [r7, #4]
   195aa:	781a      	ldrb	r2, [r3, #0]
   195ac:	230f      	movs	r3, #15
   195ae:	18fb      	adds	r3, r7, r3
   195b0:	188a      	adds	r2, r1, r2
   195b2:	701a      	strb	r2, [r3, #0]
   195b4:	68bb      	ldr	r3, [r7, #8]
   195b6:	3b01      	subs	r3, #1
   195b8:	60bb      	str	r3, [r7, #8]
   195ba:	68bb      	ldr	r3, [r7, #8]
   195bc:	2b00      	cmp	r3, #0
   195be:	d1e9      	bne.n	19594 <sum_sfn+0x14>
	return sum;
   195c0:	230f      	movs	r3, #15
   195c2:	18fb      	adds	r3, r7, r3
   195c4:	781b      	ldrb	r3, [r3, #0]
}
   195c6:	0018      	movs	r0, r3
   195c8:	46bd      	mov	sp, r7
   195ca:	b004      	add	sp, #16
   195cc:	bd80      	pop	{r7, pc}
	...

000195d0 <dir_find>:

static
FRESULT dir_find (
	DIR *dj			/* Pointer to the directory object linked to the file name */
)
{
   195d0:	b590      	push	{r4, r7, lr}
   195d2:	b087      	sub	sp, #28
   195d4:	af00      	add	r7, sp, #0
   195d6:	6078      	str	r0, [r7, #4]
	BYTE c, *dir;
#if _USE_LFN
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dj, 0);			/* Rewind directory object */
   195d8:	2317      	movs	r3, #23
   195da:	18fc      	adds	r4, r7, r3
   195dc:	687b      	ldr	r3, [r7, #4]
   195de:	2100      	movs	r1, #0
   195e0:	0018      	movs	r0, r3
   195e2:	4b74      	ldr	r3, [pc, #464]	; (197b4 <dir_find+0x1e4>)
   195e4:	4798      	blx	r3
   195e6:	0003      	movs	r3, r0
   195e8:	7023      	strb	r3, [r4, #0]
	if (res != FR_OK) return res;
   195ea:	2317      	movs	r3, #23
   195ec:	18fb      	adds	r3, r7, r3
   195ee:	781b      	ldrb	r3, [r3, #0]
   195f0:	2b00      	cmp	r3, #0
   195f2:	d003      	beq.n	195fc <dir_find+0x2c>
   195f4:	2317      	movs	r3, #23
   195f6:	18fb      	adds	r3, r7, r3
   195f8:	781b      	ldrb	r3, [r3, #0]
   195fa:	e0d6      	b.n	197aa <dir_find+0x1da>

#if _USE_LFN
	ord = sum = 0xFF;
   195fc:	2314      	movs	r3, #20
   195fe:	18fb      	adds	r3, r7, r3
   19600:	22ff      	movs	r2, #255	; 0xff
   19602:	701a      	strb	r2, [r3, #0]
   19604:	2315      	movs	r3, #21
   19606:	18fb      	adds	r3, r7, r3
   19608:	2214      	movs	r2, #20
   1960a:	18ba      	adds	r2, r7, r2
   1960c:	7812      	ldrb	r2, [r2, #0]
   1960e:	701a      	strb	r2, [r3, #0]
#endif
	do {
		res = move_window(dj->fs, dj->sect);
   19610:	687b      	ldr	r3, [r7, #4]
   19612:	681a      	ldr	r2, [r3, #0]
   19614:	687b      	ldr	r3, [r7, #4]
   19616:	691b      	ldr	r3, [r3, #16]
   19618:	2117      	movs	r1, #23
   1961a:	187c      	adds	r4, r7, r1
   1961c:	0019      	movs	r1, r3
   1961e:	0010      	movs	r0, r2
   19620:	4b65      	ldr	r3, [pc, #404]	; (197b8 <dir_find+0x1e8>)
   19622:	4798      	blx	r3
   19624:	0003      	movs	r3, r0
   19626:	7023      	strb	r3, [r4, #0]
		if (res != FR_OK) break;
   19628:	2317      	movs	r3, #23
   1962a:	18fb      	adds	r3, r7, r3
   1962c:	781b      	ldrb	r3, [r3, #0]
   1962e:	2b00      	cmp	r3, #0
   19630:	d000      	beq.n	19634 <dir_find+0x64>
   19632:	e0b2      	b.n	1979a <dir_find+0x1ca>
		dir = dj->dir;					/* Ptr to the directory entry of current index */
   19634:	687b      	ldr	r3, [r7, #4]
   19636:	695b      	ldr	r3, [r3, #20]
   19638:	613b      	str	r3, [r7, #16]
		c = dir[DIR_Name];
   1963a:	2316      	movs	r3, #22
   1963c:	18fb      	adds	r3, r7, r3
   1963e:	693a      	ldr	r2, [r7, #16]
   19640:	7812      	ldrb	r2, [r2, #0]
   19642:	701a      	strb	r2, [r3, #0]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
   19644:	2316      	movs	r3, #22
   19646:	18fb      	adds	r3, r7, r3
   19648:	781b      	ldrb	r3, [r3, #0]
   1964a:	2b00      	cmp	r3, #0
   1964c:	d104      	bne.n	19658 <dir_find+0x88>
   1964e:	2317      	movs	r3, #23
   19650:	18fb      	adds	r3, r7, r3
   19652:	2204      	movs	r2, #4
   19654:	701a      	strb	r2, [r3, #0]
   19656:	e0a5      	b.n	197a4 <dir_find+0x1d4>
#if _USE_LFN	/* LFN configuration */
		a = dir[DIR_Attr] & AM_MASK;
   19658:	693b      	ldr	r3, [r7, #16]
   1965a:	330b      	adds	r3, #11
   1965c:	781a      	ldrb	r2, [r3, #0]
   1965e:	230f      	movs	r3, #15
   19660:	18fb      	adds	r3, r7, r3
   19662:	213f      	movs	r1, #63	; 0x3f
   19664:	400a      	ands	r2, r1
   19666:	701a      	strb	r2, [r3, #0]
		if (c == DDE || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
   19668:	2316      	movs	r3, #22
   1966a:	18fb      	adds	r3, r7, r3
   1966c:	781b      	ldrb	r3, [r3, #0]
   1966e:	2be5      	cmp	r3, #229	; 0xe5
   19670:	d00a      	beq.n	19688 <dir_find+0xb8>
   19672:	230f      	movs	r3, #15
   19674:	18fb      	adds	r3, r7, r3
   19676:	781b      	ldrb	r3, [r3, #0]
   19678:	2208      	movs	r2, #8
   1967a:	4013      	ands	r3, r2
   1967c:	d009      	beq.n	19692 <dir_find+0xc2>
   1967e:	230f      	movs	r3, #15
   19680:	18fb      	adds	r3, r7, r3
   19682:	781b      	ldrb	r3, [r3, #0]
   19684:	2b0f      	cmp	r3, #15
   19686:	d004      	beq.n	19692 <dir_find+0xc2>
			ord = 0xFF;
   19688:	2315      	movs	r3, #21
   1968a:	18fb      	adds	r3, r7, r3
   1968c:	22ff      	movs	r2, #255	; 0xff
   1968e:	701a      	strb	r2, [r3, #0]
   19690:	e073      	b.n	1977a <dir_find+0x1aa>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
   19692:	230f      	movs	r3, #15
   19694:	18fb      	adds	r3, r7, r3
   19696:	781b      	ldrb	r3, [r3, #0]
   19698:	2b0f      	cmp	r3, #15
   1969a:	d145      	bne.n	19728 <dir_find+0x158>
				if (dj->lfn) {
   1969c:	687b      	ldr	r3, [r7, #4]
   1969e:	69db      	ldr	r3, [r3, #28]
   196a0:	2b00      	cmp	r3, #0
   196a2:	d100      	bne.n	196a6 <dir_find+0xd6>
   196a4:	e069      	b.n	1977a <dir_find+0x1aa>
					if (c & LLE) {		/* Is it start of LFN sequence? */
   196a6:	2316      	movs	r3, #22
   196a8:	18fb      	adds	r3, r7, r3
   196aa:	781b      	ldrb	r3, [r3, #0]
   196ac:	2240      	movs	r2, #64	; 0x40
   196ae:	4013      	ands	r3, r2
   196b0:	d016      	beq.n	196e0 <dir_find+0x110>
						sum = dir[LDIR_Chksum];
   196b2:	2314      	movs	r3, #20
   196b4:	18fb      	adds	r3, r7, r3
   196b6:	693a      	ldr	r2, [r7, #16]
   196b8:	7b52      	ldrb	r2, [r2, #13]
   196ba:	701a      	strb	r2, [r3, #0]
						c &= ~LLE; ord = c;	/* LFN start order */
   196bc:	2316      	movs	r3, #22
   196be:	18fb      	adds	r3, r7, r3
   196c0:	2216      	movs	r2, #22
   196c2:	18ba      	adds	r2, r7, r2
   196c4:	7812      	ldrb	r2, [r2, #0]
   196c6:	2140      	movs	r1, #64	; 0x40
   196c8:	438a      	bics	r2, r1
   196ca:	701a      	strb	r2, [r3, #0]
   196cc:	2315      	movs	r3, #21
   196ce:	18fb      	adds	r3, r7, r3
   196d0:	2216      	movs	r2, #22
   196d2:	18ba      	adds	r2, r7, r2
   196d4:	7812      	ldrb	r2, [r2, #0]
   196d6:	701a      	strb	r2, [r3, #0]
						dj->lfn_idx = dj->index;
   196d8:	687b      	ldr	r3, [r7, #4]
   196da:	88da      	ldrh	r2, [r3, #6]
   196dc:	687b      	ldr	r3, [r7, #4]
   196de:	841a      	strh	r2, [r3, #32]
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dir[LDIR_Chksum] && cmp_lfn(dj->lfn, dir)) ? ord - 1 : 0xFF;
   196e0:	2316      	movs	r3, #22
   196e2:	18fa      	adds	r2, r7, r3
   196e4:	2315      	movs	r3, #21
   196e6:	18fb      	adds	r3, r7, r3
   196e8:	7812      	ldrb	r2, [r2, #0]
   196ea:	781b      	ldrb	r3, [r3, #0]
   196ec:	429a      	cmp	r2, r3
   196ee:	d116      	bne.n	1971e <dir_find+0x14e>
   196f0:	693b      	ldr	r3, [r7, #16]
   196f2:	330d      	adds	r3, #13
   196f4:	781b      	ldrb	r3, [r3, #0]
   196f6:	2214      	movs	r2, #20
   196f8:	18ba      	adds	r2, r7, r2
   196fa:	7812      	ldrb	r2, [r2, #0]
   196fc:	429a      	cmp	r2, r3
   196fe:	d10e      	bne.n	1971e <dir_find+0x14e>
   19700:	687b      	ldr	r3, [r7, #4]
   19702:	69db      	ldr	r3, [r3, #28]
   19704:	693a      	ldr	r2, [r7, #16]
   19706:	0011      	movs	r1, r2
   19708:	0018      	movs	r0, r3
   1970a:	4b2c      	ldr	r3, [pc, #176]	; (197bc <dir_find+0x1ec>)
   1970c:	4798      	blx	r3
   1970e:	1e03      	subs	r3, r0, #0
   19710:	d005      	beq.n	1971e <dir_find+0x14e>
   19712:	2315      	movs	r3, #21
   19714:	18fb      	adds	r3, r7, r3
   19716:	781b      	ldrb	r3, [r3, #0]
   19718:	3b01      	subs	r3, #1
   1971a:	b2da      	uxtb	r2, r3
   1971c:	e000      	b.n	19720 <dir_find+0x150>
   1971e:	22ff      	movs	r2, #255	; 0xff
   19720:	2315      	movs	r3, #21
   19722:	18fb      	adds	r3, r7, r3
   19724:	701a      	strb	r2, [r3, #0]
   19726:	e028      	b.n	1977a <dir_find+0x1aa>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dir)) break;	/* LFN matched? */
   19728:	2315      	movs	r3, #21
   1972a:	18fb      	adds	r3, r7, r3
   1972c:	781b      	ldrb	r3, [r3, #0]
   1972e:	2b00      	cmp	r3, #0
   19730:	d10a      	bne.n	19748 <dir_find+0x178>
   19732:	693b      	ldr	r3, [r7, #16]
   19734:	0018      	movs	r0, r3
   19736:	4b22      	ldr	r3, [pc, #136]	; (197c0 <dir_find+0x1f0>)
   19738:	4798      	blx	r3
   1973a:	0003      	movs	r3, r0
   1973c:	001a      	movs	r2, r3
   1973e:	2314      	movs	r3, #20
   19740:	18fb      	adds	r3, r7, r3
   19742:	781b      	ldrb	r3, [r3, #0]
   19744:	4293      	cmp	r3, r2
   19746:	d02a      	beq.n	1979e <dir_find+0x1ce>
				ord = 0xFF; dj->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
   19748:	2315      	movs	r3, #21
   1974a:	18fb      	adds	r3, r7, r3
   1974c:	22ff      	movs	r2, #255	; 0xff
   1974e:	701a      	strb	r2, [r3, #0]
   19750:	687b      	ldr	r3, [r7, #4]
   19752:	2201      	movs	r2, #1
   19754:	4252      	negs	r2, r2
   19756:	841a      	strh	r2, [r3, #32]
				if (!(dj->fn[NS] & NS_LOSS) && !mem_cmp(dir, dj->fn, 11)) break;	/* SFN matched? */
   19758:	687b      	ldr	r3, [r7, #4]
   1975a:	699b      	ldr	r3, [r3, #24]
   1975c:	330b      	adds	r3, #11
   1975e:	781b      	ldrb	r3, [r3, #0]
   19760:	001a      	movs	r2, r3
   19762:	2301      	movs	r3, #1
   19764:	4013      	ands	r3, r2
   19766:	d108      	bne.n	1977a <dir_find+0x1aa>
   19768:	687b      	ldr	r3, [r7, #4]
   1976a:	6999      	ldr	r1, [r3, #24]
   1976c:	693b      	ldr	r3, [r7, #16]
   1976e:	220b      	movs	r2, #11
   19770:	0018      	movs	r0, r3
   19772:	4b14      	ldr	r3, [pc, #80]	; (197c4 <dir_find+0x1f4>)
   19774:	4798      	blx	r3
   19776:	1e03      	subs	r3, r0, #0
   19778:	d013      	beq.n	197a2 <dir_find+0x1d2>
		}
#else		/* Non LFN configuration */
		if (!(dir[DIR_Attr] & AM_VOL) && !mem_cmp(dir, dj->fn, 11)) /* Is it a valid entry? */
			break;
#endif
		res = dir_next(dj, 0);		/* Next entry */
   1977a:	2317      	movs	r3, #23
   1977c:	18fc      	adds	r4, r7, r3
   1977e:	687b      	ldr	r3, [r7, #4]
   19780:	2100      	movs	r1, #0
   19782:	0018      	movs	r0, r3
   19784:	4b10      	ldr	r3, [pc, #64]	; (197c8 <dir_find+0x1f8>)
   19786:	4798      	blx	r3
   19788:	0003      	movs	r3, r0
   1978a:	7023      	strb	r3, [r4, #0]
	} while (res == FR_OK);
   1978c:	2317      	movs	r3, #23
   1978e:	18fb      	adds	r3, r7, r3
   19790:	781b      	ldrb	r3, [r3, #0]
   19792:	2b00      	cmp	r3, #0
   19794:	d100      	bne.n	19798 <dir_find+0x1c8>
   19796:	e73b      	b.n	19610 <dir_find+0x40>
   19798:	e004      	b.n	197a4 <dir_find+0x1d4>
		if (res != FR_OK) break;
   1979a:	46c0      	nop			; (mov r8, r8)
   1979c:	e002      	b.n	197a4 <dir_find+0x1d4>
				if (!ord && sum == sum_sfn(dir)) break;	/* LFN matched? */
   1979e:	46c0      	nop			; (mov r8, r8)
   197a0:	e000      	b.n	197a4 <dir_find+0x1d4>
				if (!(dj->fn[NS] & NS_LOSS) && !mem_cmp(dir, dj->fn, 11)) break;	/* SFN matched? */
   197a2:	46c0      	nop			; (mov r8, r8)

	return res;
   197a4:	2317      	movs	r3, #23
   197a6:	18fb      	adds	r3, r7, r3
   197a8:	781b      	ldrb	r3, [r3, #0]
}
   197aa:	0018      	movs	r0, r3
   197ac:	46bd      	mov	sp, r7
   197ae:	b007      	add	sp, #28
   197b0:	bd90      	pop	{r4, r7, pc}
   197b2:	46c0      	nop			; (mov r8, r8)
   197b4:	00018f4d 	.word	0x00018f4d
   197b8:	00018709 	.word	0x00018709
   197bc:	0001926d 	.word	0x0001926d
   197c0:	00019581 	.word	0x00019581
   197c4:	0001868d 	.word	0x0001868d
   197c8:	0001907d 	.word	0x0001907d

000197cc <dir_register>:
#if !_FS_READONLY
static
FRESULT dir_register (	/* FR_OK:Successful, FR_DENIED:No free entry or too many SFN collision, FR_DISK_ERR:Disk error */
	DIR *dj				/* Target directory with object name to be created */
)
{
   197cc:	b590      	push	{r4, r7, lr}
   197ce:	b08d      	sub	sp, #52	; 0x34
   197d0:	af00      	add	r7, sp, #0
   197d2:	6078      	str	r0, [r7, #4]
	WORD n, ne, is;
	BYTE sn[12], *fn, sum;
	WCHAR *lfn;


	fn = dj->fn; lfn = dj->lfn;
   197d4:	687b      	ldr	r3, [r7, #4]
   197d6:	699b      	ldr	r3, [r3, #24]
   197d8:	627b      	str	r3, [r7, #36]	; 0x24
   197da:	687b      	ldr	r3, [r7, #4]
   197dc:	69db      	ldr	r3, [r3, #28]
   197de:	623b      	str	r3, [r7, #32]
	mem_cpy(sn, fn, 12);
   197e0:	6a79      	ldr	r1, [r7, #36]	; 0x24
   197e2:	230c      	movs	r3, #12
   197e4:	18fb      	adds	r3, r7, r3
   197e6:	220c      	movs	r2, #12
   197e8:	0018      	movs	r0, r3
   197ea:	4bc8      	ldr	r3, [pc, #800]	; (19b0c <dir_register+0x340>)
   197ec:	4798      	blx	r3

	if (_FS_RPATH && (sn[NS] & NS_DOT))		/* Cannot create dot entry */
		return FR_INVALID_NAME;

	if (sn[NS] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
   197ee:	230c      	movs	r3, #12
   197f0:	18fb      	adds	r3, r7, r3
   197f2:	7adb      	ldrb	r3, [r3, #11]
   197f4:	001a      	movs	r2, r3
   197f6:	2301      	movs	r3, #1
   197f8:	4013      	ands	r3, r2
   197fa:	d048      	beq.n	1988e <dir_register+0xc2>
		fn[NS] = 0; dj->lfn = 0;			/* Find only SFN */
   197fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   197fe:	330b      	adds	r3, #11
   19800:	2200      	movs	r2, #0
   19802:	701a      	strb	r2, [r3, #0]
   19804:	687b      	ldr	r3, [r7, #4]
   19806:	2200      	movs	r2, #0
   19808:	61da      	str	r2, [r3, #28]
		for (n = 1; n < 100; n++) {
   1980a:	232c      	movs	r3, #44	; 0x2c
   1980c:	18fb      	adds	r3, r7, r3
   1980e:	2201      	movs	r2, #1
   19810:	801a      	strh	r2, [r3, #0]
   19812:	e01c      	b.n	1984e <dir_register+0x82>
			gen_numname(fn, sn, lfn, n);	/* Generate a numbered name */
   19814:	232c      	movs	r3, #44	; 0x2c
   19816:	18fb      	adds	r3, r7, r3
   19818:	881b      	ldrh	r3, [r3, #0]
   1981a:	6a3a      	ldr	r2, [r7, #32]
   1981c:	210c      	movs	r1, #12
   1981e:	1879      	adds	r1, r7, r1
   19820:	6a78      	ldr	r0, [r7, #36]	; 0x24
   19822:	4cbb      	ldr	r4, [pc, #748]	; (19b10 <dir_register+0x344>)
   19824:	47a0      	blx	r4
			res = dir_find(dj);				/* Check if the name collides with existing SFN */
   19826:	232f      	movs	r3, #47	; 0x2f
   19828:	18fc      	adds	r4, r7, r3
   1982a:	687b      	ldr	r3, [r7, #4]
   1982c:	0018      	movs	r0, r3
   1982e:	4bb9      	ldr	r3, [pc, #740]	; (19b14 <dir_register+0x348>)
   19830:	4798      	blx	r3
   19832:	0003      	movs	r3, r0
   19834:	7023      	strb	r3, [r4, #0]
			if (res != FR_OK) break;
   19836:	232f      	movs	r3, #47	; 0x2f
   19838:	18fb      	adds	r3, r7, r3
   1983a:	781b      	ldrb	r3, [r3, #0]
   1983c:	2b00      	cmp	r3, #0
   1983e:	d10c      	bne.n	1985a <dir_register+0x8e>
		for (n = 1; n < 100; n++) {
   19840:	232c      	movs	r3, #44	; 0x2c
   19842:	18fb      	adds	r3, r7, r3
   19844:	881a      	ldrh	r2, [r3, #0]
   19846:	232c      	movs	r3, #44	; 0x2c
   19848:	18fb      	adds	r3, r7, r3
   1984a:	3201      	adds	r2, #1
   1984c:	801a      	strh	r2, [r3, #0]
   1984e:	232c      	movs	r3, #44	; 0x2c
   19850:	18fb      	adds	r3, r7, r3
   19852:	881b      	ldrh	r3, [r3, #0]
   19854:	2b63      	cmp	r3, #99	; 0x63
   19856:	d9dd      	bls.n	19814 <dir_register+0x48>
   19858:	e000      	b.n	1985c <dir_register+0x90>
			if (res != FR_OK) break;
   1985a:	46c0      	nop			; (mov r8, r8)
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
   1985c:	232c      	movs	r3, #44	; 0x2c
   1985e:	18fb      	adds	r3, r7, r3
   19860:	881b      	ldrh	r3, [r3, #0]
   19862:	2b64      	cmp	r3, #100	; 0x64
   19864:	d101      	bne.n	1986a <dir_register+0x9e>
   19866:	2307      	movs	r3, #7
   19868:	e14c      	b.n	19b04 <dir_register+0x338>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
   1986a:	232f      	movs	r3, #47	; 0x2f
   1986c:	18fb      	adds	r3, r7, r3
   1986e:	781b      	ldrb	r3, [r3, #0]
   19870:	2b04      	cmp	r3, #4
   19872:	d003      	beq.n	1987c <dir_register+0xb0>
   19874:	232f      	movs	r3, #47	; 0x2f
   19876:	18fb      	adds	r3, r7, r3
   19878:	781b      	ldrb	r3, [r3, #0]
   1987a:	e143      	b.n	19b04 <dir_register+0x338>
		fn[NS] = sn[NS]; dj->lfn = lfn;
   1987c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1987e:	330b      	adds	r3, #11
   19880:	220c      	movs	r2, #12
   19882:	18ba      	adds	r2, r7, r2
   19884:	7ad2      	ldrb	r2, [r2, #11]
   19886:	701a      	strb	r2, [r3, #0]
   19888:	687b      	ldr	r3, [r7, #4]
   1988a:	6a3a      	ldr	r2, [r7, #32]
   1988c:	61da      	str	r2, [r3, #28]
	}

	if (sn[NS] & NS_LFN) {			/* When LFN is to be created, reserve an SFN + LFN entries. */
   1988e:	230c      	movs	r3, #12
   19890:	18fb      	adds	r3, r7, r3
   19892:	7adb      	ldrb	r3, [r3, #11]
   19894:	001a      	movs	r2, r3
   19896:	2302      	movs	r3, #2
   19898:	4013      	ands	r3, r2
   1989a:	d023      	beq.n	198e4 <dir_register+0x118>
		for (ne = 0; lfn[ne]; ne++) ;
   1989c:	232a      	movs	r3, #42	; 0x2a
   1989e:	18fb      	adds	r3, r7, r3
   198a0:	2200      	movs	r2, #0
   198a2:	801a      	strh	r2, [r3, #0]
   198a4:	e006      	b.n	198b4 <dir_register+0xe8>
   198a6:	232a      	movs	r3, #42	; 0x2a
   198a8:	18fb      	adds	r3, r7, r3
   198aa:	881a      	ldrh	r2, [r3, #0]
   198ac:	232a      	movs	r3, #42	; 0x2a
   198ae:	18fb      	adds	r3, r7, r3
   198b0:	3201      	adds	r2, #1
   198b2:	801a      	strh	r2, [r3, #0]
   198b4:	232a      	movs	r3, #42	; 0x2a
   198b6:	18fb      	adds	r3, r7, r3
   198b8:	881b      	ldrh	r3, [r3, #0]
   198ba:	005b      	lsls	r3, r3, #1
   198bc:	6a3a      	ldr	r2, [r7, #32]
   198be:	18d3      	adds	r3, r2, r3
   198c0:	881b      	ldrh	r3, [r3, #0]
   198c2:	2b00      	cmp	r3, #0
   198c4:	d1ef      	bne.n	198a6 <dir_register+0xda>
		ne = (ne + 25) / 13;
   198c6:	232a      	movs	r3, #42	; 0x2a
   198c8:	18fb      	adds	r3, r7, r3
   198ca:	881b      	ldrh	r3, [r3, #0]
   198cc:	3319      	adds	r3, #25
   198ce:	001a      	movs	r2, r3
   198d0:	4b91      	ldr	r3, [pc, #580]	; (19b18 <dir_register+0x34c>)
   198d2:	210d      	movs	r1, #13
   198d4:	0010      	movs	r0, r2
   198d6:	4798      	blx	r3
   198d8:	0003      	movs	r3, r0
   198da:	001a      	movs	r2, r3
   198dc:	232a      	movs	r3, #42	; 0x2a
   198de:	18fb      	adds	r3, r7, r3
   198e0:	801a      	strh	r2, [r3, #0]
   198e2:	e003      	b.n	198ec <dir_register+0x120>
	} else {						/* Otherwise reserve only an SFN entry. */
		ne = 1;
   198e4:	232a      	movs	r3, #42	; 0x2a
   198e6:	18fb      	adds	r3, r7, r3
   198e8:	2201      	movs	r2, #1
   198ea:	801a      	strh	r2, [r3, #0]
	}

	/* Reserve contiguous entries */
	res = dir_sdi(dj, 0);
   198ec:	232f      	movs	r3, #47	; 0x2f
   198ee:	18fc      	adds	r4, r7, r3
   198f0:	687b      	ldr	r3, [r7, #4]
   198f2:	2100      	movs	r1, #0
   198f4:	0018      	movs	r0, r3
   198f6:	4b89      	ldr	r3, [pc, #548]	; (19b1c <dir_register+0x350>)
   198f8:	4798      	blx	r3
   198fa:	0003      	movs	r3, r0
   198fc:	7023      	strb	r3, [r4, #0]
	if (res != FR_OK) return res;
   198fe:	232f      	movs	r3, #47	; 0x2f
   19900:	18fb      	adds	r3, r7, r3
   19902:	781b      	ldrb	r3, [r3, #0]
   19904:	2b00      	cmp	r3, #0
   19906:	d003      	beq.n	19910 <dir_register+0x144>
   19908:	232f      	movs	r3, #47	; 0x2f
   1990a:	18fb      	adds	r3, r7, r3
   1990c:	781b      	ldrb	r3, [r3, #0]
   1990e:	e0f9      	b.n	19b04 <dir_register+0x338>
	n = is = 0;
   19910:	2328      	movs	r3, #40	; 0x28
   19912:	18fb      	adds	r3, r7, r3
   19914:	2200      	movs	r2, #0
   19916:	801a      	strh	r2, [r3, #0]
   19918:	232c      	movs	r3, #44	; 0x2c
   1991a:	18fb      	adds	r3, r7, r3
   1991c:	2228      	movs	r2, #40	; 0x28
   1991e:	18ba      	adds	r2, r7, r2
   19920:	8812      	ldrh	r2, [r2, #0]
   19922:	801a      	strh	r2, [r3, #0]
	do {
		res = move_window(dj->fs, dj->sect);
   19924:	687b      	ldr	r3, [r7, #4]
   19926:	681a      	ldr	r2, [r3, #0]
   19928:	687b      	ldr	r3, [r7, #4]
   1992a:	691b      	ldr	r3, [r3, #16]
   1992c:	212f      	movs	r1, #47	; 0x2f
   1992e:	187c      	adds	r4, r7, r1
   19930:	0019      	movs	r1, r3
   19932:	0010      	movs	r0, r2
   19934:	4b7a      	ldr	r3, [pc, #488]	; (19b20 <dir_register+0x354>)
   19936:	4798      	blx	r3
   19938:	0003      	movs	r3, r0
   1993a:	7023      	strb	r3, [r4, #0]
		if (res != FR_OK) break;
   1993c:	232f      	movs	r3, #47	; 0x2f
   1993e:	18fb      	adds	r3, r7, r3
   19940:	781b      	ldrb	r3, [r3, #0]
   19942:	2b00      	cmp	r3, #0
   19944:	d13c      	bne.n	199c0 <dir_register+0x1f4>
		c = *dj->dir;				/* Check the entry status */
   19946:	687b      	ldr	r3, [r7, #4]
   19948:	695a      	ldr	r2, [r3, #20]
   1994a:	231f      	movs	r3, #31
   1994c:	18fb      	adds	r3, r7, r3
   1994e:	7812      	ldrb	r2, [r2, #0]
   19950:	701a      	strb	r2, [r3, #0]
		if (c == DDE || c == 0) {	/* Is it a blank entry? */
   19952:	231f      	movs	r3, #31
   19954:	18fb      	adds	r3, r7, r3
   19956:	781b      	ldrb	r3, [r3, #0]
   19958:	2be5      	cmp	r3, #229	; 0xe5
   1995a:	d004      	beq.n	19966 <dir_register+0x19a>
   1995c:	231f      	movs	r3, #31
   1995e:	18fb      	adds	r3, r7, r3
   19960:	781b      	ldrb	r3, [r3, #0]
   19962:	2b00      	cmp	r3, #0
   19964:	d119      	bne.n	1999a <dir_register+0x1ce>
			if (n == 0) is = dj->index;	/* First index of the contiguous entry */
   19966:	232c      	movs	r3, #44	; 0x2c
   19968:	18fb      	adds	r3, r7, r3
   1996a:	881b      	ldrh	r3, [r3, #0]
   1996c:	2b00      	cmp	r3, #0
   1996e:	d104      	bne.n	1997a <dir_register+0x1ae>
   19970:	2328      	movs	r3, #40	; 0x28
   19972:	18fb      	adds	r3, r7, r3
   19974:	687a      	ldr	r2, [r7, #4]
   19976:	88d2      	ldrh	r2, [r2, #6]
   19978:	801a      	strh	r2, [r3, #0]
			if (++n == ne) break;	/* A contiguous entry that required count is found */
   1997a:	232c      	movs	r3, #44	; 0x2c
   1997c:	18fb      	adds	r3, r7, r3
   1997e:	222c      	movs	r2, #44	; 0x2c
   19980:	18ba      	adds	r2, r7, r2
   19982:	8812      	ldrh	r2, [r2, #0]
   19984:	3201      	adds	r2, #1
   19986:	801a      	strh	r2, [r3, #0]
   19988:	232c      	movs	r3, #44	; 0x2c
   1998a:	18fa      	adds	r2, r7, r3
   1998c:	232a      	movs	r3, #42	; 0x2a
   1998e:	18fb      	adds	r3, r7, r3
   19990:	8812      	ldrh	r2, [r2, #0]
   19992:	881b      	ldrh	r3, [r3, #0]
   19994:	429a      	cmp	r2, r3
   19996:	d104      	bne.n	199a2 <dir_register+0x1d6>
   19998:	e013      	b.n	199c2 <dir_register+0x1f6>
		} else {
			n = 0;					/* Not a blank entry. Restart to search */
   1999a:	232c      	movs	r3, #44	; 0x2c
   1999c:	18fb      	adds	r3, r7, r3
   1999e:	2200      	movs	r2, #0
   199a0:	801a      	strh	r2, [r3, #0]
		}
		res = dir_next(dj, 1);		/* Next entry with table stretch */
   199a2:	232f      	movs	r3, #47	; 0x2f
   199a4:	18fc      	adds	r4, r7, r3
   199a6:	687b      	ldr	r3, [r7, #4]
   199a8:	2101      	movs	r1, #1
   199aa:	0018      	movs	r0, r3
   199ac:	4b5d      	ldr	r3, [pc, #372]	; (19b24 <dir_register+0x358>)
   199ae:	4798      	blx	r3
   199b0:	0003      	movs	r3, r0
   199b2:	7023      	strb	r3, [r4, #0]
	} while (res == FR_OK);
   199b4:	232f      	movs	r3, #47	; 0x2f
   199b6:	18fb      	adds	r3, r7, r3
   199b8:	781b      	ldrb	r3, [r3, #0]
   199ba:	2b00      	cmp	r3, #0
   199bc:	d0b2      	beq.n	19924 <dir_register+0x158>
   199be:	e000      	b.n	199c2 <dir_register+0x1f6>
		if (res != FR_OK) break;
   199c0:	46c0      	nop			; (mov r8, r8)

	if (res == FR_OK && ne > 1) {	/* Initialize LFN entry if needed */
   199c2:	232f      	movs	r3, #47	; 0x2f
   199c4:	18fb      	adds	r3, r7, r3
   199c6:	781b      	ldrb	r3, [r3, #0]
   199c8:	2b00      	cmp	r3, #0
   199ca:	d163      	bne.n	19a94 <dir_register+0x2c8>
   199cc:	232a      	movs	r3, #42	; 0x2a
   199ce:	18fb      	adds	r3, r7, r3
   199d0:	881b      	ldrh	r3, [r3, #0]
   199d2:	2b01      	cmp	r3, #1
   199d4:	d95e      	bls.n	19a94 <dir_register+0x2c8>
		res = dir_sdi(dj, is);
   199d6:	232f      	movs	r3, #47	; 0x2f
   199d8:	18fc      	adds	r4, r7, r3
   199da:	2328      	movs	r3, #40	; 0x28
   199dc:	18fb      	adds	r3, r7, r3
   199de:	881a      	ldrh	r2, [r3, #0]
   199e0:	687b      	ldr	r3, [r7, #4]
   199e2:	0011      	movs	r1, r2
   199e4:	0018      	movs	r0, r3
   199e6:	4b4d      	ldr	r3, [pc, #308]	; (19b1c <dir_register+0x350>)
   199e8:	4798      	blx	r3
   199ea:	0003      	movs	r3, r0
   199ec:	7023      	strb	r3, [r4, #0]
		if (res == FR_OK) {
   199ee:	232f      	movs	r3, #47	; 0x2f
   199f0:	18fb      	adds	r3, r7, r3
   199f2:	781b      	ldrb	r3, [r3, #0]
   199f4:	2b00      	cmp	r3, #0
   199f6:	d14d      	bne.n	19a94 <dir_register+0x2c8>
			sum = sum_sfn(dj->fn);	/* Sum of the SFN tied to the LFN */
   199f8:	687b      	ldr	r3, [r7, #4]
   199fa:	699b      	ldr	r3, [r3, #24]
   199fc:	221e      	movs	r2, #30
   199fe:	18bc      	adds	r4, r7, r2
   19a00:	0018      	movs	r0, r3
   19a02:	4b49      	ldr	r3, [pc, #292]	; (19b28 <dir_register+0x35c>)
   19a04:	4798      	blx	r3
   19a06:	0003      	movs	r3, r0
   19a08:	7023      	strb	r3, [r4, #0]
			ne--;
   19a0a:	232a      	movs	r3, #42	; 0x2a
   19a0c:	18fb      	adds	r3, r7, r3
   19a0e:	881a      	ldrh	r2, [r3, #0]
   19a10:	232a      	movs	r3, #42	; 0x2a
   19a12:	18fb      	adds	r3, r7, r3
   19a14:	3a01      	subs	r2, #1
   19a16:	801a      	strh	r2, [r3, #0]
			do {					/* Store LFN entries in bottom first */
				res = move_window(dj->fs, dj->sect);
   19a18:	687b      	ldr	r3, [r7, #4]
   19a1a:	681a      	ldr	r2, [r3, #0]
   19a1c:	687b      	ldr	r3, [r7, #4]
   19a1e:	691b      	ldr	r3, [r3, #16]
   19a20:	212f      	movs	r1, #47	; 0x2f
   19a22:	187c      	adds	r4, r7, r1
   19a24:	0019      	movs	r1, r3
   19a26:	0010      	movs	r0, r2
   19a28:	4b3d      	ldr	r3, [pc, #244]	; (19b20 <dir_register+0x354>)
   19a2a:	4798      	blx	r3
   19a2c:	0003      	movs	r3, r0
   19a2e:	7023      	strb	r3, [r4, #0]
				if (res != FR_OK) break;
   19a30:	232f      	movs	r3, #47	; 0x2f
   19a32:	18fb      	adds	r3, r7, r3
   19a34:	781b      	ldrb	r3, [r3, #0]
   19a36:	2b00      	cmp	r3, #0
   19a38:	d12b      	bne.n	19a92 <dir_register+0x2c6>
				fit_lfn(dj->lfn, dj->dir, (BYTE)ne, sum);
   19a3a:	687b      	ldr	r3, [r7, #4]
   19a3c:	69d8      	ldr	r0, [r3, #28]
   19a3e:	687b      	ldr	r3, [r7, #4]
   19a40:	6959      	ldr	r1, [r3, #20]
   19a42:	232a      	movs	r3, #42	; 0x2a
   19a44:	18fb      	adds	r3, r7, r3
   19a46:	881b      	ldrh	r3, [r3, #0]
   19a48:	b2da      	uxtb	r2, r3
   19a4a:	231e      	movs	r3, #30
   19a4c:	18fb      	adds	r3, r7, r3
   19a4e:	781b      	ldrb	r3, [r3, #0]
   19a50:	4c36      	ldr	r4, [pc, #216]	; (19b2c <dir_register+0x360>)
   19a52:	47a0      	blx	r4
				dj->fs->wflag = 1;
   19a54:	687b      	ldr	r3, [r7, #4]
   19a56:	681b      	ldr	r3, [r3, #0]
   19a58:	2201      	movs	r2, #1
   19a5a:	711a      	strb	r2, [r3, #4]
				res = dir_next(dj, 0);	/* Next entry */
   19a5c:	232f      	movs	r3, #47	; 0x2f
   19a5e:	18fc      	adds	r4, r7, r3
   19a60:	687b      	ldr	r3, [r7, #4]
   19a62:	2100      	movs	r1, #0
   19a64:	0018      	movs	r0, r3
   19a66:	4b2f      	ldr	r3, [pc, #188]	; (19b24 <dir_register+0x358>)
   19a68:	4798      	blx	r3
   19a6a:	0003      	movs	r3, r0
   19a6c:	7023      	strb	r3, [r4, #0]
			} while (res == FR_OK && --ne);
   19a6e:	232f      	movs	r3, #47	; 0x2f
   19a70:	18fb      	adds	r3, r7, r3
   19a72:	781b      	ldrb	r3, [r3, #0]
   19a74:	2b00      	cmp	r3, #0
   19a76:	d10d      	bne.n	19a94 <dir_register+0x2c8>
   19a78:	232a      	movs	r3, #42	; 0x2a
   19a7a:	18fb      	adds	r3, r7, r3
   19a7c:	222a      	movs	r2, #42	; 0x2a
   19a7e:	18ba      	adds	r2, r7, r2
   19a80:	8812      	ldrh	r2, [r2, #0]
   19a82:	3a01      	subs	r2, #1
   19a84:	801a      	strh	r2, [r3, #0]
   19a86:	232a      	movs	r3, #42	; 0x2a
   19a88:	18fb      	adds	r3, r7, r3
   19a8a:	881b      	ldrh	r3, [r3, #0]
   19a8c:	2b00      	cmp	r3, #0
   19a8e:	d1c3      	bne.n	19a18 <dir_register+0x24c>
   19a90:	e000      	b.n	19a94 <dir_register+0x2c8>
				if (res != FR_OK) break;
   19a92:	46c0      	nop			; (mov r8, r8)
			res = dir_next(dj, 1);			/* Next entry with table stretch */
		} while (res == FR_OK);
	}
#endif

	if (res == FR_OK) {		/* Initialize the SFN entry */
   19a94:	232f      	movs	r3, #47	; 0x2f
   19a96:	18fb      	adds	r3, r7, r3
   19a98:	781b      	ldrb	r3, [r3, #0]
   19a9a:	2b00      	cmp	r3, #0
   19a9c:	d12f      	bne.n	19afe <dir_register+0x332>
		res = move_window(dj->fs, dj->sect);
   19a9e:	687b      	ldr	r3, [r7, #4]
   19aa0:	681a      	ldr	r2, [r3, #0]
   19aa2:	687b      	ldr	r3, [r7, #4]
   19aa4:	691b      	ldr	r3, [r3, #16]
   19aa6:	212f      	movs	r1, #47	; 0x2f
   19aa8:	187c      	adds	r4, r7, r1
   19aaa:	0019      	movs	r1, r3
   19aac:	0010      	movs	r0, r2
   19aae:	4b1c      	ldr	r3, [pc, #112]	; (19b20 <dir_register+0x354>)
   19ab0:	4798      	blx	r3
   19ab2:	0003      	movs	r3, r0
   19ab4:	7023      	strb	r3, [r4, #0]
		if (res == FR_OK) {
   19ab6:	232f      	movs	r3, #47	; 0x2f
   19ab8:	18fb      	adds	r3, r7, r3
   19aba:	781b      	ldrb	r3, [r3, #0]
   19abc:	2b00      	cmp	r3, #0
   19abe:	d11e      	bne.n	19afe <dir_register+0x332>
			dir = dj->dir;
   19ac0:	687b      	ldr	r3, [r7, #4]
   19ac2:	695b      	ldr	r3, [r3, #20]
   19ac4:	61bb      	str	r3, [r7, #24]
			mem_set(dir, 0, SZ_DIR);	/* Clean the entry */
   19ac6:	69bb      	ldr	r3, [r7, #24]
   19ac8:	2220      	movs	r2, #32
   19aca:	2100      	movs	r1, #0
   19acc:	0018      	movs	r0, r3
   19ace:	4b18      	ldr	r3, [pc, #96]	; (19b30 <dir_register+0x364>)
   19ad0:	4798      	blx	r3
			mem_cpy(dir, dj->fn, 11);	/* Put SFN */
   19ad2:	687b      	ldr	r3, [r7, #4]
   19ad4:	6999      	ldr	r1, [r3, #24]
   19ad6:	69bb      	ldr	r3, [r7, #24]
   19ad8:	220b      	movs	r2, #11
   19ada:	0018      	movs	r0, r3
   19adc:	4b0b      	ldr	r3, [pc, #44]	; (19b0c <dir_register+0x340>)
   19ade:	4798      	blx	r3
#if _USE_LFN
			dir[DIR_NTres] = *(dj->fn+NS) & (NS_BODY | NS_EXT);	/* Put NT flag */
   19ae0:	69bb      	ldr	r3, [r7, #24]
   19ae2:	330c      	adds	r3, #12
   19ae4:	001a      	movs	r2, r3
   19ae6:	687b      	ldr	r3, [r7, #4]
   19ae8:	699b      	ldr	r3, [r3, #24]
   19aea:	330b      	adds	r3, #11
   19aec:	781b      	ldrb	r3, [r3, #0]
   19aee:	2118      	movs	r1, #24
   19af0:	400b      	ands	r3, r1
   19af2:	b2db      	uxtb	r3, r3
   19af4:	7013      	strb	r3, [r2, #0]
#endif
			dj->fs->wflag = 1;
   19af6:	687b      	ldr	r3, [r7, #4]
   19af8:	681b      	ldr	r3, [r3, #0]
   19afa:	2201      	movs	r2, #1
   19afc:	711a      	strb	r2, [r3, #4]
		}
	}

	return res;
   19afe:	232f      	movs	r3, #47	; 0x2f
   19b00:	18fb      	adds	r3, r7, r3
   19b02:	781b      	ldrb	r3, [r3, #0]
}
   19b04:	0018      	movs	r0, r3
   19b06:	46bd      	mov	sp, r7
   19b08:	b00d      	add	sp, #52	; 0x34
   19b0a:	bd90      	pop	{r4, r7, pc}
   19b0c:	00018625 	.word	0x00018625
   19b10:	00019481 	.word	0x00019481
   19b14:	000195d1 	.word	0x000195d1
   19b18:	0001f955 	.word	0x0001f955
   19b1c:	00018f4d 	.word	0x00018f4d
   19b20:	00018709 	.word	0x00018709
   19b24:	0001907d 	.word	0x0001907d
   19b28:	00019581 	.word	0x00019581
   19b2c:	00019371 	.word	0x00019371
   19b30:	0001865d 	.word	0x0001865d

00019b34 <create_name>:
static
FRESULT create_name (
	DIR *dj,			/* Pointer to the directory object */
	const TCHAR **path	/* Pointer to pointer to the segment in the path string */
)
{
   19b34:	b590      	push	{r4, r7, lr}
   19b36:	b08b      	sub	sp, #44	; 0x2c
   19b38:	af00      	add	r7, sp, #0
   19b3a:	6078      	str	r0, [r7, #4]
   19b3c:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	for (p = *path; *p == '/' || *p == '\\'; p++) ;	/* Strip duplicated separator */
   19b3e:	683b      	ldr	r3, [r7, #0]
   19b40:	681b      	ldr	r3, [r3, #0]
   19b42:	613b      	str	r3, [r7, #16]
   19b44:	e002      	b.n	19b4c <create_name+0x18>
   19b46:	693b      	ldr	r3, [r7, #16]
   19b48:	3301      	adds	r3, #1
   19b4a:	613b      	str	r3, [r7, #16]
   19b4c:	693b      	ldr	r3, [r7, #16]
   19b4e:	781b      	ldrb	r3, [r3, #0]
   19b50:	2b2f      	cmp	r3, #47	; 0x2f
   19b52:	d0f8      	beq.n	19b46 <create_name+0x12>
   19b54:	693b      	ldr	r3, [r7, #16]
   19b56:	781b      	ldrb	r3, [r3, #0]
   19b58:	2b5c      	cmp	r3, #92	; 0x5c
   19b5a:	d0f4      	beq.n	19b46 <create_name+0x12>
	lfn = dj->lfn;
   19b5c:	687b      	ldr	r3, [r7, #4]
   19b5e:	69db      	ldr	r3, [r3, #28]
   19b60:	60fb      	str	r3, [r7, #12]
	si = di = 0;
   19b62:	2300      	movs	r3, #0
   19b64:	617b      	str	r3, [r7, #20]
   19b66:	697b      	ldr	r3, [r7, #20]
   19b68:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
   19b6a:	69bb      	ldr	r3, [r7, #24]
   19b6c:	1c5a      	adds	r2, r3, #1
   19b6e:	61ba      	str	r2, [r7, #24]
   19b70:	693a      	ldr	r2, [r7, #16]
   19b72:	18d3      	adds	r3, r2, r3
   19b74:	781a      	ldrb	r2, [r3, #0]
   19b76:	2324      	movs	r3, #36	; 0x24
   19b78:	18fb      	adds	r3, r7, r3
   19b7a:	801a      	strh	r2, [r3, #0]
		if (w < ' ' || w == '/' || w == '\\') break;	/* Break on end of segment */
   19b7c:	2324      	movs	r3, #36	; 0x24
   19b7e:	18fb      	adds	r3, r7, r3
   19b80:	881b      	ldrh	r3, [r3, #0]
   19b82:	2b1f      	cmp	r3, #31
   19b84:	d944      	bls.n	19c10 <create_name+0xdc>
   19b86:	2324      	movs	r3, #36	; 0x24
   19b88:	18fb      	adds	r3, r7, r3
   19b8a:	881b      	ldrh	r3, [r3, #0]
   19b8c:	2b2f      	cmp	r3, #47	; 0x2f
   19b8e:	d03f      	beq.n	19c10 <create_name+0xdc>
   19b90:	2324      	movs	r3, #36	; 0x24
   19b92:	18fb      	adds	r3, r7, r3
   19b94:	881b      	ldrh	r3, [r3, #0]
   19b96:	2b5c      	cmp	r3, #92	; 0x5c
   19b98:	d03a      	beq.n	19c10 <create_name+0xdc>
		if (di >= _MAX_LFN)				/* Reject too long name */
   19b9a:	697b      	ldr	r3, [r7, #20]
   19b9c:	2bfe      	cmp	r3, #254	; 0xfe
   19b9e:	d901      	bls.n	19ba4 <create_name+0x70>
			return FR_INVALID_NAME;
   19ba0:	2306      	movs	r3, #6
   19ba2:	e1e7      	b.n	19f74 <create_name+0x440>
#if !_LFN_UNICODE
		w &= 0xFF;
   19ba4:	2324      	movs	r3, #36	; 0x24
   19ba6:	18fb      	adds	r3, r7, r3
   19ba8:	2224      	movs	r2, #36	; 0x24
   19baa:	18ba      	adds	r2, r7, r2
   19bac:	8812      	ldrh	r2, [r2, #0]
   19bae:	21ff      	movs	r1, #255	; 0xff
   19bb0:	400a      	ands	r2, r1
   19bb2:	801a      	strh	r2, [r3, #0]
			b = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(b))
				return FR_INVALID_NAME;	/* Reject invalid sequence */
			w = (w << 8) + b;			/* Create a DBC */
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
   19bb4:	2324      	movs	r3, #36	; 0x24
   19bb6:	18fc      	adds	r4, r7, r3
   19bb8:	2324      	movs	r3, #36	; 0x24
   19bba:	18fb      	adds	r3, r7, r3
   19bbc:	881b      	ldrh	r3, [r3, #0]
   19bbe:	2101      	movs	r1, #1
   19bc0:	0018      	movs	r0, r3
   19bc2:	4bba      	ldr	r3, [pc, #744]	; (19eac <create_name+0x378>)
   19bc4:	4798      	blx	r3
   19bc6:	0003      	movs	r3, r0
   19bc8:	8023      	strh	r3, [r4, #0]
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
   19bca:	2324      	movs	r3, #36	; 0x24
   19bcc:	18fb      	adds	r3, r7, r3
   19bce:	881b      	ldrh	r3, [r3, #0]
   19bd0:	2b00      	cmp	r3, #0
   19bd2:	d101      	bne.n	19bd8 <create_name+0xa4>
   19bd4:	2306      	movs	r3, #6
   19bd6:	e1cd      	b.n	19f74 <create_name+0x440>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) /* Reject illegal chars for LFN */
   19bd8:	2324      	movs	r3, #36	; 0x24
   19bda:	18fb      	adds	r3, r7, r3
   19bdc:	881b      	ldrh	r3, [r3, #0]
   19bde:	2b7f      	cmp	r3, #127	; 0x7f
   19be0:	d80b      	bhi.n	19bfa <create_name+0xc6>
   19be2:	2324      	movs	r3, #36	; 0x24
   19be4:	18fb      	adds	r3, r7, r3
   19be6:	881a      	ldrh	r2, [r3, #0]
   19be8:	4bb1      	ldr	r3, [pc, #708]	; (19eb0 <create_name+0x37c>)
   19bea:	0011      	movs	r1, r2
   19bec:	0018      	movs	r0, r3
   19bee:	4bb1      	ldr	r3, [pc, #708]	; (19eb4 <create_name+0x380>)
   19bf0:	4798      	blx	r3
   19bf2:	1e03      	subs	r3, r0, #0
   19bf4:	d001      	beq.n	19bfa <create_name+0xc6>
			return FR_INVALID_NAME;
   19bf6:	2306      	movs	r3, #6
   19bf8:	e1bc      	b.n	19f74 <create_name+0x440>
		lfn[di++] = w;					/* Store the Unicode char */
   19bfa:	697b      	ldr	r3, [r7, #20]
   19bfc:	1c5a      	adds	r2, r3, #1
   19bfe:	617a      	str	r2, [r7, #20]
   19c00:	005b      	lsls	r3, r3, #1
   19c02:	68fa      	ldr	r2, [r7, #12]
   19c04:	18d3      	adds	r3, r2, r3
   19c06:	2224      	movs	r2, #36	; 0x24
   19c08:	18ba      	adds	r2, r7, r2
   19c0a:	8812      	ldrh	r2, [r2, #0]
   19c0c:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
   19c0e:	e7ac      	b.n	19b6a <create_name+0x36>
	}
	*path = &p[si];						/* Return pointer to the next segment */
   19c10:	693a      	ldr	r2, [r7, #16]
   19c12:	69bb      	ldr	r3, [r7, #24]
   19c14:	18d2      	adds	r2, r2, r3
   19c16:	683b      	ldr	r3, [r7, #0]
   19c18:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of path */
   19c1a:	2324      	movs	r3, #36	; 0x24
   19c1c:	18fb      	adds	r3, r7, r3
   19c1e:	881b      	ldrh	r3, [r3, #0]
   19c20:	2b1f      	cmp	r3, #31
   19c22:	d801      	bhi.n	19c28 <create_name+0xf4>
   19c24:	2204      	movs	r2, #4
   19c26:	e000      	b.n	19c2a <create_name+0xf6>
   19c28:	2200      	movs	r2, #0
   19c2a:	2326      	movs	r3, #38	; 0x26
   19c2c:	18fb      	adds	r3, r7, r3
   19c2e:	701a      	strb	r2, [r3, #0]
			dj->fn[i] = (i < di) ? '.' : ' ';
		dj->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Strip trailing spaces and dots */
   19c30:	e017      	b.n	19c62 <create_name+0x12e>
		w = lfn[di-1];
   19c32:	697b      	ldr	r3, [r7, #20]
   19c34:	4aa0      	ldr	r2, [pc, #640]	; (19eb8 <create_name+0x384>)
   19c36:	4694      	mov	ip, r2
   19c38:	4463      	add	r3, ip
   19c3a:	005b      	lsls	r3, r3, #1
   19c3c:	68fa      	ldr	r2, [r7, #12]
   19c3e:	18d2      	adds	r2, r2, r3
   19c40:	2324      	movs	r3, #36	; 0x24
   19c42:	18fb      	adds	r3, r7, r3
   19c44:	8812      	ldrh	r2, [r2, #0]
   19c46:	801a      	strh	r2, [r3, #0]
		if (w != ' ' && w != '.') break;
   19c48:	2324      	movs	r3, #36	; 0x24
   19c4a:	18fb      	adds	r3, r7, r3
   19c4c:	881b      	ldrh	r3, [r3, #0]
   19c4e:	2b20      	cmp	r3, #32
   19c50:	d004      	beq.n	19c5c <create_name+0x128>
   19c52:	2324      	movs	r3, #36	; 0x24
   19c54:	18fb      	adds	r3, r7, r3
   19c56:	881b      	ldrh	r3, [r3, #0]
   19c58:	2b2e      	cmp	r3, #46	; 0x2e
   19c5a:	d106      	bne.n	19c6a <create_name+0x136>
		di--;
   19c5c:	697b      	ldr	r3, [r7, #20]
   19c5e:	3b01      	subs	r3, #1
   19c60:	617b      	str	r3, [r7, #20]
	while (di) {						/* Strip trailing spaces and dots */
   19c62:	697b      	ldr	r3, [r7, #20]
   19c64:	2b00      	cmp	r3, #0
   19c66:	d1e4      	bne.n	19c32 <create_name+0xfe>
   19c68:	e000      	b.n	19c6c <create_name+0x138>
		if (w != ' ' && w != '.') break;
   19c6a:	46c0      	nop			; (mov r8, r8)
	}
	if (!di) return FR_INVALID_NAME;	/* Reject nul string */
   19c6c:	697b      	ldr	r3, [r7, #20]
   19c6e:	2b00      	cmp	r3, #0
   19c70:	d101      	bne.n	19c76 <create_name+0x142>
   19c72:	2306      	movs	r3, #6
   19c74:	e17e      	b.n	19f74 <create_name+0x440>

	lfn[di] = 0;						/* LFN is created */
   19c76:	697b      	ldr	r3, [r7, #20]
   19c78:	005b      	lsls	r3, r3, #1
   19c7a:	68fa      	ldr	r2, [r7, #12]
   19c7c:	18d3      	adds	r3, r2, r3
   19c7e:	2200      	movs	r2, #0
   19c80:	801a      	strh	r2, [r3, #0]

	/* Create SFN in directory form */
	mem_set(dj->fn, ' ', 11);
   19c82:	687b      	ldr	r3, [r7, #4]
   19c84:	699b      	ldr	r3, [r3, #24]
   19c86:	220b      	movs	r2, #11
   19c88:	2120      	movs	r1, #32
   19c8a:	0018      	movs	r0, r3
   19c8c:	4b8b      	ldr	r3, [pc, #556]	; (19ebc <create_name+0x388>)
   19c8e:	4798      	blx	r3
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
   19c90:	2300      	movs	r3, #0
   19c92:	61bb      	str	r3, [r7, #24]
   19c94:	e002      	b.n	19c9c <create_name+0x168>
   19c96:	69bb      	ldr	r3, [r7, #24]
   19c98:	3301      	adds	r3, #1
   19c9a:	61bb      	str	r3, [r7, #24]
   19c9c:	69bb      	ldr	r3, [r7, #24]
   19c9e:	005b      	lsls	r3, r3, #1
   19ca0:	68fa      	ldr	r2, [r7, #12]
   19ca2:	18d3      	adds	r3, r2, r3
   19ca4:	881b      	ldrh	r3, [r3, #0]
   19ca6:	2b20      	cmp	r3, #32
   19ca8:	d0f5      	beq.n	19c96 <create_name+0x162>
   19caa:	69bb      	ldr	r3, [r7, #24]
   19cac:	005b      	lsls	r3, r3, #1
   19cae:	68fa      	ldr	r2, [r7, #12]
   19cb0:	18d3      	adds	r3, r2, r3
   19cb2:	881b      	ldrh	r3, [r3, #0]
   19cb4:	2b2e      	cmp	r3, #46	; 0x2e
   19cb6:	d0ee      	beq.n	19c96 <create_name+0x162>
	if (si) cf |= NS_LOSS | NS_LFN;
   19cb8:	69bb      	ldr	r3, [r7, #24]
   19cba:	2b00      	cmp	r3, #0
   19cbc:	d00b      	beq.n	19cd6 <create_name+0x1a2>
   19cbe:	2326      	movs	r3, #38	; 0x26
   19cc0:	18fb      	adds	r3, r7, r3
   19cc2:	2226      	movs	r2, #38	; 0x26
   19cc4:	18ba      	adds	r2, r7, r2
   19cc6:	7812      	ldrb	r2, [r2, #0]
   19cc8:	2103      	movs	r1, #3
   19cca:	430a      	orrs	r2, r1
   19ccc:	701a      	strb	r2, [r3, #0]
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
   19cce:	e002      	b.n	19cd6 <create_name+0x1a2>
   19cd0:	697b      	ldr	r3, [r7, #20]
   19cd2:	3b01      	subs	r3, #1
   19cd4:	617b      	str	r3, [r7, #20]
   19cd6:	697b      	ldr	r3, [r7, #20]
   19cd8:	2b00      	cmp	r3, #0
   19cda:	d009      	beq.n	19cf0 <create_name+0x1bc>
   19cdc:	697b      	ldr	r3, [r7, #20]
   19cde:	4a76      	ldr	r2, [pc, #472]	; (19eb8 <create_name+0x384>)
   19ce0:	4694      	mov	ip, r2
   19ce2:	4463      	add	r3, ip
   19ce4:	005b      	lsls	r3, r3, #1
   19ce6:	68fa      	ldr	r2, [r7, #12]
   19ce8:	18d3      	adds	r3, r2, r3
   19cea:	881b      	ldrh	r3, [r3, #0]
   19cec:	2b2e      	cmp	r3, #46	; 0x2e
   19cee:	d1ef      	bne.n	19cd0 <create_name+0x19c>

	b = i = 0; ni = 8;
   19cf0:	2300      	movs	r3, #0
   19cf2:	623b      	str	r3, [r7, #32]
   19cf4:	2327      	movs	r3, #39	; 0x27
   19cf6:	18fb      	adds	r3, r7, r3
   19cf8:	2200      	movs	r2, #0
   19cfa:	701a      	strb	r2, [r3, #0]
   19cfc:	2308      	movs	r3, #8
   19cfe:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN char */
   19d00:	69bb      	ldr	r3, [r7, #24]
   19d02:	1c5a      	adds	r2, r3, #1
   19d04:	61ba      	str	r2, [r7, #24]
   19d06:	005b      	lsls	r3, r3, #1
   19d08:	68fa      	ldr	r2, [r7, #12]
   19d0a:	18d2      	adds	r2, r2, r3
   19d0c:	2324      	movs	r3, #36	; 0x24
   19d0e:	18fb      	adds	r3, r7, r3
   19d10:	8812      	ldrh	r2, [r2, #0]
   19d12:	801a      	strh	r2, [r3, #0]
		if (!w) break;					/* Break on end of the LFN */
   19d14:	2324      	movs	r3, #36	; 0x24
   19d16:	18fb      	adds	r3, r7, r3
   19d18:	881b      	ldrh	r3, [r3, #0]
   19d1a:	2b00      	cmp	r3, #0
   19d1c:	d100      	bne.n	19d20 <create_name+0x1ec>
   19d1e:	e0c3      	b.n	19ea8 <create_name+0x374>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
   19d20:	2324      	movs	r3, #36	; 0x24
   19d22:	18fb      	adds	r3, r7, r3
   19d24:	881b      	ldrh	r3, [r3, #0]
   19d26:	2b20      	cmp	r3, #32
   19d28:	d008      	beq.n	19d3c <create_name+0x208>
   19d2a:	2324      	movs	r3, #36	; 0x24
   19d2c:	18fb      	adds	r3, r7, r3
   19d2e:	881b      	ldrh	r3, [r3, #0]
   19d30:	2b2e      	cmp	r3, #46	; 0x2e
   19d32:	d10c      	bne.n	19d4e <create_name+0x21a>
   19d34:	69ba      	ldr	r2, [r7, #24]
   19d36:	697b      	ldr	r3, [r7, #20]
   19d38:	429a      	cmp	r2, r3
   19d3a:	d008      	beq.n	19d4e <create_name+0x21a>
			cf |= NS_LOSS | NS_LFN; continue;
   19d3c:	2326      	movs	r3, #38	; 0x26
   19d3e:	18fb      	adds	r3, r7, r3
   19d40:	2226      	movs	r2, #38	; 0x26
   19d42:	18ba      	adds	r2, r7, r2
   19d44:	7812      	ldrb	r2, [r2, #0]
   19d46:	2103      	movs	r1, #3
   19d48:	430a      	orrs	r2, r1
   19d4a:	701a      	strb	r2, [r3, #0]
   19d4c:	e0ab      	b.n	19ea6 <create_name+0x372>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
   19d4e:	6a3a      	ldr	r2, [r7, #32]
   19d50:	69fb      	ldr	r3, [r7, #28]
   19d52:	429a      	cmp	r2, r3
   19d54:	d203      	bcs.n	19d5e <create_name+0x22a>
   19d56:	69ba      	ldr	r2, [r7, #24]
   19d58:	697b      	ldr	r3, [r7, #20]
   19d5a:	429a      	cmp	r2, r3
   19d5c:	d12a      	bne.n	19db4 <create_name+0x280>
			if (ni == 11) {				/* Long extension */
   19d5e:	69fb      	ldr	r3, [r7, #28]
   19d60:	2b0b      	cmp	r3, #11
   19d62:	d108      	bne.n	19d76 <create_name+0x242>
				cf |= NS_LOSS | NS_LFN; break;
   19d64:	2326      	movs	r3, #38	; 0x26
   19d66:	18fb      	adds	r3, r7, r3
   19d68:	2226      	movs	r2, #38	; 0x26
   19d6a:	18ba      	adds	r2, r7, r2
   19d6c:	7812      	ldrb	r2, [r2, #0]
   19d6e:	2103      	movs	r1, #3
   19d70:	430a      	orrs	r2, r1
   19d72:	701a      	strb	r2, [r3, #0]
   19d74:	e0a9      	b.n	19eca <create_name+0x396>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
   19d76:	69ba      	ldr	r2, [r7, #24]
   19d78:	697b      	ldr	r3, [r7, #20]
   19d7a:	429a      	cmp	r2, r3
   19d7c:	d007      	beq.n	19d8e <create_name+0x25a>
   19d7e:	2326      	movs	r3, #38	; 0x26
   19d80:	18fb      	adds	r3, r7, r3
   19d82:	2226      	movs	r2, #38	; 0x26
   19d84:	18ba      	adds	r2, r7, r2
   19d86:	7812      	ldrb	r2, [r2, #0]
   19d88:	2103      	movs	r1, #3
   19d8a:	430a      	orrs	r2, r1
   19d8c:	701a      	strb	r2, [r3, #0]
			if (si > di) break;			/* No extension */
   19d8e:	69ba      	ldr	r2, [r7, #24]
   19d90:	697b      	ldr	r3, [r7, #20]
   19d92:	429a      	cmp	r2, r3
   19d94:	d900      	bls.n	19d98 <create_name+0x264>
   19d96:	e097      	b.n	19ec8 <create_name+0x394>
			si = di; i = 8; ni = 11;	/* Enter extension section */
   19d98:	697b      	ldr	r3, [r7, #20]
   19d9a:	61bb      	str	r3, [r7, #24]
   19d9c:	2308      	movs	r3, #8
   19d9e:	623b      	str	r3, [r7, #32]
   19da0:	230b      	movs	r3, #11
   19da2:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
   19da4:	2327      	movs	r3, #39	; 0x27
   19da6:	18fb      	adds	r3, r7, r3
   19da8:	2227      	movs	r2, #39	; 0x27
   19daa:	18ba      	adds	r2, r7, r2
   19dac:	7812      	ldrb	r2, [r2, #0]
   19dae:	0092      	lsls	r2, r2, #2
   19db0:	701a      	strb	r2, [r3, #0]
   19db2:	e078      	b.n	19ea6 <create_name+0x372>
		}

		if (w >= 0x80) {				/* Non ASCII char */
   19db4:	2324      	movs	r3, #36	; 0x24
   19db6:	18fb      	adds	r3, r7, r3
   19db8:	881b      	ldrh	r3, [r3, #0]
   19dba:	2b7f      	cmp	r3, #127	; 0x7f
   19dbc:	d920      	bls.n	19e00 <create_name+0x2cc>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
   19dbe:	2324      	movs	r3, #36	; 0x24
   19dc0:	18fc      	adds	r4, r7, r3
   19dc2:	2324      	movs	r3, #36	; 0x24
   19dc4:	18fb      	adds	r3, r7, r3
   19dc6:	881b      	ldrh	r3, [r3, #0]
   19dc8:	2100      	movs	r1, #0
   19dca:	0018      	movs	r0, r3
   19dcc:	4b37      	ldr	r3, [pc, #220]	; (19eac <create_name+0x378>)
   19dce:	4798      	blx	r3
   19dd0:	0003      	movs	r3, r0
   19dd2:	8023      	strh	r3, [r4, #0]
			if (w) w = excvt[w - 0x80];	/* Convert extended char to upper (SBCS) */
   19dd4:	2324      	movs	r3, #36	; 0x24
   19dd6:	18fb      	adds	r3, r7, r3
   19dd8:	881b      	ldrh	r3, [r3, #0]
   19dda:	2b00      	cmp	r3, #0
   19ddc:	d008      	beq.n	19df0 <create_name+0x2bc>
   19dde:	2324      	movs	r3, #36	; 0x24
   19de0:	18fb      	adds	r3, r7, r3
   19de2:	881b      	ldrh	r3, [r3, #0]
   19de4:	3b80      	subs	r3, #128	; 0x80
   19de6:	4a36      	ldr	r2, [pc, #216]	; (19ec0 <create_name+0x38c>)
   19de8:	5cd2      	ldrb	r2, [r2, r3]
   19dea:	2324      	movs	r3, #36	; 0x24
   19dec:	18fb      	adds	r3, r7, r3
   19dee:	801a      	strh	r2, [r3, #0]
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
   19df0:	2326      	movs	r3, #38	; 0x26
   19df2:	18fb      	adds	r3, r7, r3
   19df4:	2226      	movs	r2, #38	; 0x26
   19df6:	18ba      	adds	r2, r7, r2
   19df8:	7812      	ldrb	r2, [r2, #0]
   19dfa:	2102      	movs	r1, #2
   19dfc:	430a      	orrs	r2, r1
   19dfe:	701a      	strb	r2, [r3, #0]
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dj->fn[i++] = (BYTE)(w >> 8);
		} else {						/* Single byte char */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal chars for SFN */
   19e00:	2324      	movs	r3, #36	; 0x24
   19e02:	18fb      	adds	r3, r7, r3
   19e04:	881b      	ldrh	r3, [r3, #0]
   19e06:	2b00      	cmp	r3, #0
   19e08:	d009      	beq.n	19e1e <create_name+0x2ea>
   19e0a:	2324      	movs	r3, #36	; 0x24
   19e0c:	18fb      	adds	r3, r7, r3
   19e0e:	881a      	ldrh	r2, [r3, #0]
   19e10:	4b2c      	ldr	r3, [pc, #176]	; (19ec4 <create_name+0x390>)
   19e12:	0011      	movs	r1, r2
   19e14:	0018      	movs	r0, r3
   19e16:	4b27      	ldr	r3, [pc, #156]	; (19eb4 <create_name+0x380>)
   19e18:	4798      	blx	r3
   19e1a:	1e03      	subs	r3, r0, #0
   19e1c:	d00c      	beq.n	19e38 <create_name+0x304>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
   19e1e:	2324      	movs	r3, #36	; 0x24
   19e20:	18fb      	adds	r3, r7, r3
   19e22:	225f      	movs	r2, #95	; 0x5f
   19e24:	801a      	strh	r2, [r3, #0]
   19e26:	2326      	movs	r3, #38	; 0x26
   19e28:	18fb      	adds	r3, r7, r3
   19e2a:	2226      	movs	r2, #38	; 0x26
   19e2c:	18ba      	adds	r2, r7, r2
   19e2e:	7812      	ldrb	r2, [r2, #0]
   19e30:	2103      	movs	r1, #3
   19e32:	430a      	orrs	r2, r1
   19e34:	701a      	strb	r2, [r3, #0]
   19e36:	e02b      	b.n	19e90 <create_name+0x35c>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
   19e38:	2324      	movs	r3, #36	; 0x24
   19e3a:	18fb      	adds	r3, r7, r3
   19e3c:	881b      	ldrh	r3, [r3, #0]
   19e3e:	2b40      	cmp	r3, #64	; 0x40
   19e40:	d90d      	bls.n	19e5e <create_name+0x32a>
   19e42:	2324      	movs	r3, #36	; 0x24
   19e44:	18fb      	adds	r3, r7, r3
   19e46:	881b      	ldrh	r3, [r3, #0]
   19e48:	2b5a      	cmp	r3, #90	; 0x5a
   19e4a:	d808      	bhi.n	19e5e <create_name+0x32a>
					b |= 2;
   19e4c:	2327      	movs	r3, #39	; 0x27
   19e4e:	18fb      	adds	r3, r7, r3
   19e50:	2227      	movs	r2, #39	; 0x27
   19e52:	18ba      	adds	r2, r7, r2
   19e54:	7812      	ldrb	r2, [r2, #0]
   19e56:	2102      	movs	r1, #2
   19e58:	430a      	orrs	r2, r1
   19e5a:	701a      	strb	r2, [r3, #0]
   19e5c:	e018      	b.n	19e90 <create_name+0x35c>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
   19e5e:	2324      	movs	r3, #36	; 0x24
   19e60:	18fb      	adds	r3, r7, r3
   19e62:	881b      	ldrh	r3, [r3, #0]
   19e64:	2b60      	cmp	r3, #96	; 0x60
   19e66:	d913      	bls.n	19e90 <create_name+0x35c>
   19e68:	2324      	movs	r3, #36	; 0x24
   19e6a:	18fb      	adds	r3, r7, r3
   19e6c:	881b      	ldrh	r3, [r3, #0]
   19e6e:	2b7a      	cmp	r3, #122	; 0x7a
   19e70:	d80e      	bhi.n	19e90 <create_name+0x35c>
						b |= 1; w -= 0x20;
   19e72:	2327      	movs	r3, #39	; 0x27
   19e74:	18fb      	adds	r3, r7, r3
   19e76:	2227      	movs	r2, #39	; 0x27
   19e78:	18ba      	adds	r2, r7, r2
   19e7a:	7812      	ldrb	r2, [r2, #0]
   19e7c:	2101      	movs	r1, #1
   19e7e:	430a      	orrs	r2, r1
   19e80:	701a      	strb	r2, [r3, #0]
   19e82:	2324      	movs	r3, #36	; 0x24
   19e84:	18fb      	adds	r3, r7, r3
   19e86:	2224      	movs	r2, #36	; 0x24
   19e88:	18ba      	adds	r2, r7, r2
   19e8a:	8812      	ldrh	r2, [r2, #0]
   19e8c:	3a20      	subs	r2, #32
   19e8e:	801a      	strh	r2, [r3, #0]
					}
				}
			}
		}
		dj->fn[i++] = (BYTE)w;
   19e90:	687b      	ldr	r3, [r7, #4]
   19e92:	699a      	ldr	r2, [r3, #24]
   19e94:	6a3b      	ldr	r3, [r7, #32]
   19e96:	1c59      	adds	r1, r3, #1
   19e98:	6239      	str	r1, [r7, #32]
   19e9a:	18d3      	adds	r3, r2, r3
   19e9c:	2224      	movs	r2, #36	; 0x24
   19e9e:	18ba      	adds	r2, r7, r2
   19ea0:	8812      	ldrh	r2, [r2, #0]
   19ea2:	b2d2      	uxtb	r2, r2
   19ea4:	701a      	strb	r2, [r3, #0]
		w = lfn[si++];					/* Get an LFN char */
   19ea6:	e72b      	b.n	19d00 <create_name+0x1cc>
		if (!w) break;					/* Break on end of the LFN */
   19ea8:	46c0      	nop			; (mov r8, r8)
   19eaa:	e00e      	b.n	19eca <create_name+0x396>
   19eac:	0001b26d 	.word	0x0001b26d
   19eb0:	000260e0 	.word	0x000260e0
   19eb4:	000186d7 	.word	0x000186d7
   19eb8:	7fffffff 	.word	0x7fffffff
   19ebc:	0001865d 	.word	0x0001865d
   19ec0:	00026128 	.word	0x00026128
   19ec4:	000260ec 	.word	0x000260ec
			if (si > di) break;			/* No extension */
   19ec8:	46c0      	nop			; (mov r8, r8)
	}

	if (dj->fn[0] == DDE) dj->fn[0] = NDDE;	/* If the first char collides with deleted mark, replace it with 0x05 */
   19eca:	687b      	ldr	r3, [r7, #4]
   19ecc:	699b      	ldr	r3, [r3, #24]
   19ece:	781b      	ldrb	r3, [r3, #0]
   19ed0:	2be5      	cmp	r3, #229	; 0xe5
   19ed2:	d103      	bne.n	19edc <create_name+0x3a8>
   19ed4:	687b      	ldr	r3, [r7, #4]
   19ed6:	699b      	ldr	r3, [r3, #24]
   19ed8:	2205      	movs	r2, #5
   19eda:	701a      	strb	r2, [r3, #0]

	if (ni == 8) b <<= 2;
   19edc:	69fb      	ldr	r3, [r7, #28]
   19ede:	2b08      	cmp	r3, #8
   19ee0:	d106      	bne.n	19ef0 <create_name+0x3bc>
   19ee2:	2327      	movs	r3, #39	; 0x27
   19ee4:	18fb      	adds	r3, r7, r3
   19ee6:	2227      	movs	r2, #39	; 0x27
   19ee8:	18ba      	adds	r2, r7, r2
   19eea:	7812      	ldrb	r2, [r2, #0]
   19eec:	0092      	lsls	r2, r2, #2
   19eee:	701a      	strb	r2, [r3, #0]
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03)	/* Create LFN entry when there are composite capitals */
   19ef0:	2327      	movs	r3, #39	; 0x27
   19ef2:	18fb      	adds	r3, r7, r3
   19ef4:	781b      	ldrb	r3, [r3, #0]
   19ef6:	220c      	movs	r2, #12
   19ef8:	4013      	ands	r3, r2
   19efa:	2b0c      	cmp	r3, #12
   19efc:	d006      	beq.n	19f0c <create_name+0x3d8>
   19efe:	2327      	movs	r3, #39	; 0x27
   19f00:	18fb      	adds	r3, r7, r3
   19f02:	781b      	ldrb	r3, [r3, #0]
   19f04:	2203      	movs	r2, #3
   19f06:	4013      	ands	r3, r2
   19f08:	2b03      	cmp	r3, #3
   19f0a:	d107      	bne.n	19f1c <create_name+0x3e8>
		cf |= NS_LFN;
   19f0c:	2326      	movs	r3, #38	; 0x26
   19f0e:	18fb      	adds	r3, r7, r3
   19f10:	2226      	movs	r2, #38	; 0x26
   19f12:	18ba      	adds	r2, r7, r2
   19f14:	7812      	ldrb	r2, [r2, #0]
   19f16:	2102      	movs	r1, #2
   19f18:	430a      	orrs	r2, r1
   19f1a:	701a      	strb	r2, [r3, #0]
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended char, NT flags are created */
   19f1c:	2326      	movs	r3, #38	; 0x26
   19f1e:	18fb      	adds	r3, r7, r3
   19f20:	781b      	ldrb	r3, [r3, #0]
   19f22:	2202      	movs	r2, #2
   19f24:	4013      	ands	r3, r2
   19f26:	d11d      	bne.n	19f64 <create_name+0x430>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
   19f28:	2327      	movs	r3, #39	; 0x27
   19f2a:	18fb      	adds	r3, r7, r3
   19f2c:	781b      	ldrb	r3, [r3, #0]
   19f2e:	2203      	movs	r2, #3
   19f30:	4013      	ands	r3, r2
   19f32:	2b01      	cmp	r3, #1
   19f34:	d107      	bne.n	19f46 <create_name+0x412>
   19f36:	2326      	movs	r3, #38	; 0x26
   19f38:	18fb      	adds	r3, r7, r3
   19f3a:	2226      	movs	r2, #38	; 0x26
   19f3c:	18ba      	adds	r2, r7, r2
   19f3e:	7812      	ldrb	r2, [r2, #0]
   19f40:	2110      	movs	r1, #16
   19f42:	430a      	orrs	r2, r1
   19f44:	701a      	strb	r2, [r3, #0]
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
   19f46:	2327      	movs	r3, #39	; 0x27
   19f48:	18fb      	adds	r3, r7, r3
   19f4a:	781b      	ldrb	r3, [r3, #0]
   19f4c:	220c      	movs	r2, #12
   19f4e:	4013      	ands	r3, r2
   19f50:	2b04      	cmp	r3, #4
   19f52:	d107      	bne.n	19f64 <create_name+0x430>
   19f54:	2326      	movs	r3, #38	; 0x26
   19f56:	18fb      	adds	r3, r7, r3
   19f58:	2226      	movs	r2, #38	; 0x26
   19f5a:	18ba      	adds	r2, r7, r2
   19f5c:	7812      	ldrb	r2, [r2, #0]
   19f5e:	2108      	movs	r1, #8
   19f60:	430a      	orrs	r2, r1
   19f62:	701a      	strb	r2, [r3, #0]
	}

	dj->fn[NS] = cf;	/* SFN is created */
   19f64:	687b      	ldr	r3, [r7, #4]
   19f66:	699b      	ldr	r3, [r3, #24]
   19f68:	330b      	adds	r3, #11
   19f6a:	2226      	movs	r2, #38	; 0x26
   19f6c:	18ba      	adds	r2, r7, r2
   19f6e:	7812      	ldrb	r2, [r2, #0]
   19f70:	701a      	strb	r2, [r3, #0]

	return FR_OK;
   19f72:	2300      	movs	r3, #0

	sfn[NS] = c;		/* Store NT flag, File name is created */

	return FR_OK;
#endif
}
   19f74:	0018      	movs	r0, r3
   19f76:	46bd      	mov	sp, r7
   19f78:	b00b      	add	sp, #44	; 0x2c
   19f7a:	bd90      	pop	{r4, r7, pc}

00019f7c <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR *dj,			/* Directory object to return last directory and found object */
	const TCHAR *path	/* Full-path string to find a file or directory */
)
{
   19f7c:	b590      	push	{r4, r7, lr}
   19f7e:	b085      	sub	sp, #20
   19f80:	af00      	add	r7, sp, #0
   19f82:	6078      	str	r0, [r7, #4]
   19f84:	6039      	str	r1, [r7, #0]
		path++;	dj->sclust = 0;		/* Strip it and start from the root dir */
	} else {							/* No heading separator */
		dj->sclust = dj->fs->cdir;	/* Start from the current dir */
	}
#else
	if (*path == '/' || *path == '\\')	/* Strip heading separator if exist */
   19f86:	683b      	ldr	r3, [r7, #0]
   19f88:	781b      	ldrb	r3, [r3, #0]
   19f8a:	2b2f      	cmp	r3, #47	; 0x2f
   19f8c:	d003      	beq.n	19f96 <follow_path+0x1a>
   19f8e:	683b      	ldr	r3, [r7, #0]
   19f90:	781b      	ldrb	r3, [r3, #0]
   19f92:	2b5c      	cmp	r3, #92	; 0x5c
   19f94:	d102      	bne.n	19f9c <follow_path+0x20>
		path++;
   19f96:	683b      	ldr	r3, [r7, #0]
   19f98:	3301      	adds	r3, #1
   19f9a:	603b      	str	r3, [r7, #0]
	dj->sclust = 0;						/* Start from the root dir */
   19f9c:	687b      	ldr	r3, [r7, #4]
   19f9e:	2200      	movs	r2, #0
   19fa0:	609a      	str	r2, [r3, #8]
#endif

	if ((UINT)*path < ' ') {			/* Nul path means the start directory itself */
   19fa2:	683b      	ldr	r3, [r7, #0]
   19fa4:	781b      	ldrb	r3, [r3, #0]
   19fa6:	2b1f      	cmp	r3, #31
   19fa8:	d80c      	bhi.n	19fc4 <follow_path+0x48>
		res = dir_sdi(dj, 0);
   19faa:	230f      	movs	r3, #15
   19fac:	18fc      	adds	r4, r7, r3
   19fae:	687b      	ldr	r3, [r7, #4]
   19fb0:	2100      	movs	r1, #0
   19fb2:	0018      	movs	r0, r3
   19fb4:	4b3c      	ldr	r3, [pc, #240]	; (1a0a8 <follow_path+0x12c>)
   19fb6:	4798      	blx	r3
   19fb8:	0003      	movs	r3, r0
   19fba:	7023      	strb	r3, [r4, #0]
		dj->dir = 0;
   19fbc:	687b      	ldr	r3, [r7, #4]
   19fbe:	2200      	movs	r2, #0
   19fc0:	615a      	str	r2, [r3, #20]
   19fc2:	e06a      	b.n	1a09a <follow_path+0x11e>

	} else {							/* Follow path */
		for (;;) {
			res = create_name(dj, &path);	/* Get a segment */
   19fc4:	230f      	movs	r3, #15
   19fc6:	18fc      	adds	r4, r7, r3
   19fc8:	003a      	movs	r2, r7
   19fca:	687b      	ldr	r3, [r7, #4]
   19fcc:	0011      	movs	r1, r2
   19fce:	0018      	movs	r0, r3
   19fd0:	4b36      	ldr	r3, [pc, #216]	; (1a0ac <follow_path+0x130>)
   19fd2:	4798      	blx	r3
   19fd4:	0003      	movs	r3, r0
   19fd6:	7023      	strb	r3, [r4, #0]
			if (res != FR_OK) break;
   19fd8:	230f      	movs	r3, #15
   19fda:	18fb      	adds	r3, r7, r3
   19fdc:	781b      	ldrb	r3, [r3, #0]
   19fde:	2b00      	cmp	r3, #0
   19fe0:	d154      	bne.n	1a08c <follow_path+0x110>
			res = dir_find(dj);				/* Find it */
   19fe2:	230f      	movs	r3, #15
   19fe4:	18fc      	adds	r4, r7, r3
   19fe6:	687b      	ldr	r3, [r7, #4]
   19fe8:	0018      	movs	r0, r3
   19fea:	4b31      	ldr	r3, [pc, #196]	; (1a0b0 <follow_path+0x134>)
   19fec:	4798      	blx	r3
   19fee:	0003      	movs	r3, r0
   19ff0:	7023      	strb	r3, [r4, #0]
			ns = *(dj->fn+NS);
   19ff2:	687b      	ldr	r3, [r7, #4]
   19ff4:	699a      	ldr	r2, [r3, #24]
   19ff6:	230e      	movs	r3, #14
   19ff8:	18fb      	adds	r3, r7, r3
   19ffa:	7ad2      	ldrb	r2, [r2, #11]
   19ffc:	701a      	strb	r2, [r3, #0]
			if (res != FR_OK) {				/* Failed to find the object */
   19ffe:	230f      	movs	r3, #15
   1a000:	18fb      	adds	r3, r7, r3
   1a002:	781b      	ldrb	r3, [r3, #0]
   1a004:	2b00      	cmp	r3, #0
   1a006:	d00f      	beq.n	1a028 <follow_path+0xac>
				if (res != FR_NO_FILE) break;	/* Abort if any hard error occured */
   1a008:	230f      	movs	r3, #15
   1a00a:	18fb      	adds	r3, r7, r3
   1a00c:	781b      	ldrb	r3, [r3, #0]
   1a00e:	2b04      	cmp	r3, #4
   1a010:	d13e      	bne.n	1a090 <follow_path+0x114>
				if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exit */
					dj->sclust = 0; dj->dir = 0;	/* It is the root dir */
					res = FR_OK;
					if (!(ns & NS_LAST)) continue;
				} else {							/* Could not find the object */
					if (!(ns & NS_LAST)) res = FR_NO_PATH;
   1a012:	230e      	movs	r3, #14
   1a014:	18fb      	adds	r3, r7, r3
   1a016:	781b      	ldrb	r3, [r3, #0]
   1a018:	2204      	movs	r2, #4
   1a01a:	4013      	ands	r3, r2
   1a01c:	d13a      	bne.n	1a094 <follow_path+0x118>
   1a01e:	230f      	movs	r3, #15
   1a020:	18fb      	adds	r3, r7, r3
   1a022:	2205      	movs	r2, #5
   1a024:	701a      	strb	r2, [r3, #0]
				}
				break;
   1a026:	e035      	b.n	1a094 <follow_path+0x118>
			}
			if (ns & NS_LAST) break;			/* Last segment match. Function completed. */
   1a028:	230e      	movs	r3, #14
   1a02a:	18fb      	adds	r3, r7, r3
   1a02c:	781b      	ldrb	r3, [r3, #0]
   1a02e:	2204      	movs	r2, #4
   1a030:	4013      	ands	r3, r2
   1a032:	d131      	bne.n	1a098 <follow_path+0x11c>
			dir = dj->dir;						/* There is next segment. Follow the sub directory */
   1a034:	687b      	ldr	r3, [r7, #4]
   1a036:	695b      	ldr	r3, [r3, #20]
   1a038:	60bb      	str	r3, [r7, #8]
			if (!(dir[DIR_Attr] & AM_DIR)) {	/* Cannot follow because it is a file */
   1a03a:	68bb      	ldr	r3, [r7, #8]
   1a03c:	330b      	adds	r3, #11
   1a03e:	781b      	ldrb	r3, [r3, #0]
   1a040:	001a      	movs	r2, r3
   1a042:	2310      	movs	r3, #16
   1a044:	4013      	ands	r3, r2
   1a046:	d104      	bne.n	1a052 <follow_path+0xd6>
				res = FR_NO_PATH; break;
   1a048:	230f      	movs	r3, #15
   1a04a:	18fb      	adds	r3, r7, r3
   1a04c:	2205      	movs	r2, #5
   1a04e:	701a      	strb	r2, [r3, #0]
   1a050:	e023      	b.n	1a09a <follow_path+0x11e>
			}
			dj->sclust = LD_CLUST(dir);
   1a052:	68bb      	ldr	r3, [r7, #8]
   1a054:	3315      	adds	r3, #21
   1a056:	781b      	ldrb	r3, [r3, #0]
   1a058:	021b      	lsls	r3, r3, #8
   1a05a:	b21a      	sxth	r2, r3
   1a05c:	68bb      	ldr	r3, [r7, #8]
   1a05e:	3314      	adds	r3, #20
   1a060:	781b      	ldrb	r3, [r3, #0]
   1a062:	b21b      	sxth	r3, r3
   1a064:	4313      	orrs	r3, r2
   1a066:	b21b      	sxth	r3, r3
   1a068:	b29b      	uxth	r3, r3
   1a06a:	041b      	lsls	r3, r3, #16
   1a06c:	68ba      	ldr	r2, [r7, #8]
   1a06e:	321b      	adds	r2, #27
   1a070:	7812      	ldrb	r2, [r2, #0]
   1a072:	0212      	lsls	r2, r2, #8
   1a074:	b211      	sxth	r1, r2
   1a076:	68ba      	ldr	r2, [r7, #8]
   1a078:	321a      	adds	r2, #26
   1a07a:	7812      	ldrb	r2, [r2, #0]
   1a07c:	b212      	sxth	r2, r2
   1a07e:	430a      	orrs	r2, r1
   1a080:	b212      	sxth	r2, r2
   1a082:	b292      	uxth	r2, r2
   1a084:	431a      	orrs	r2, r3
   1a086:	687b      	ldr	r3, [r7, #4]
   1a088:	609a      	str	r2, [r3, #8]
			res = create_name(dj, &path);	/* Get a segment */
   1a08a:	e79b      	b.n	19fc4 <follow_path+0x48>
			if (res != FR_OK) break;
   1a08c:	46c0      	nop			; (mov r8, r8)
   1a08e:	e004      	b.n	1a09a <follow_path+0x11e>
				if (res != FR_NO_FILE) break;	/* Abort if any hard error occured */
   1a090:	46c0      	nop			; (mov r8, r8)
   1a092:	e002      	b.n	1a09a <follow_path+0x11e>
				break;
   1a094:	46c0      	nop			; (mov r8, r8)
   1a096:	e000      	b.n	1a09a <follow_path+0x11e>
			if (ns & NS_LAST) break;			/* Last segment match. Function completed. */
   1a098:	46c0      	nop			; (mov r8, r8)
		}
	}

	return res;
   1a09a:	230f      	movs	r3, #15
   1a09c:	18fb      	adds	r3, r7, r3
   1a09e:	781b      	ldrb	r3, [r3, #0]
}
   1a0a0:	0018      	movs	r0, r3
   1a0a2:	46bd      	mov	sp, r7
   1a0a4:	b005      	add	sp, #20
   1a0a6:	bd90      	pop	{r4, r7, pc}
   1a0a8:	00018f4d 	.word	0x00018f4d
   1a0ac:	00019b35 	.word	0x00019b35
   1a0b0:	000195d1 	.word	0x000195d1

0001a0b4 <check_fs>:
static
BYTE check_fs (	/* 0:FAT-VBR, 1:Valid BR but not FAT, 2:Not a BR, 3:Disk error */
	FATFS *fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to check if it is an FAT boot record or not */
)
{
   1a0b4:	b590      	push	{r4, r7, lr}
   1a0b6:	b083      	sub	sp, #12
   1a0b8:	af00      	add	r7, sp, #0
   1a0ba:	6078      	str	r0, [r7, #4]
   1a0bc:	6039      	str	r1, [r7, #0]
	if (disk_read(fs->drv, fs->win, sect, 1) != RES_OK)	/* Load boot record */
   1a0be:	687b      	ldr	r3, [r7, #4]
   1a0c0:	7858      	ldrb	r0, [r3, #1]
   1a0c2:	687b      	ldr	r3, [r7, #4]
   1a0c4:	3330      	adds	r3, #48	; 0x30
   1a0c6:	0019      	movs	r1, r3
   1a0c8:	683a      	ldr	r2, [r7, #0]
   1a0ca:	2301      	movs	r3, #1
   1a0cc:	4c2a      	ldr	r4, [pc, #168]	; (1a178 <check_fs+0xc4>)
   1a0ce:	47a0      	blx	r4
   1a0d0:	1e03      	subs	r3, r0, #0
   1a0d2:	d001      	beq.n	1a0d8 <check_fs+0x24>
		return 3;
   1a0d4:	2303      	movs	r3, #3
   1a0d6:	e04b      	b.n	1a170 <check_fs+0xbc>
	if (LD_WORD(&fs->win[BS_55AA]) != 0xAA55)		/* Check record signature (always placed at offset 510 even if the sector size is >512) */
   1a0d8:	687b      	ldr	r3, [r7, #4]
   1a0da:	4a28      	ldr	r2, [pc, #160]	; (1a17c <check_fs+0xc8>)
   1a0dc:	4694      	mov	ip, r2
   1a0de:	4463      	add	r3, ip
   1a0e0:	3301      	adds	r3, #1
   1a0e2:	781b      	ldrb	r3, [r3, #0]
   1a0e4:	021b      	lsls	r3, r3, #8
   1a0e6:	b21a      	sxth	r2, r3
   1a0e8:	687b      	ldr	r3, [r7, #4]
   1a0ea:	4924      	ldr	r1, [pc, #144]	; (1a17c <check_fs+0xc8>)
   1a0ec:	5c5b      	ldrb	r3, [r3, r1]
   1a0ee:	b21b      	sxth	r3, r3
   1a0f0:	4313      	orrs	r3, r2
   1a0f2:	b21b      	sxth	r3, r3
   1a0f4:	4a22      	ldr	r2, [pc, #136]	; (1a180 <check_fs+0xcc>)
   1a0f6:	4293      	cmp	r3, r2
   1a0f8:	d001      	beq.n	1a0fe <check_fs+0x4a>
		return 2;
   1a0fa:	2302      	movs	r3, #2
   1a0fc:	e038      	b.n	1a170 <check_fs+0xbc>

	if ((LD_DWORD(&fs->win[BS_FilSysType]) & 0xFFFFFF) == 0x544146)	/* Check "FAT" string */
   1a0fe:	687b      	ldr	r3, [r7, #4]
   1a100:	3366      	adds	r3, #102	; 0x66
   1a102:	3303      	adds	r3, #3
   1a104:	781b      	ldrb	r3, [r3, #0]
   1a106:	061a      	lsls	r2, r3, #24
   1a108:	687b      	ldr	r3, [r7, #4]
   1a10a:	3366      	adds	r3, #102	; 0x66
   1a10c:	3302      	adds	r3, #2
   1a10e:	781b      	ldrb	r3, [r3, #0]
   1a110:	041b      	lsls	r3, r3, #16
   1a112:	4313      	orrs	r3, r2
   1a114:	687a      	ldr	r2, [r7, #4]
   1a116:	3266      	adds	r2, #102	; 0x66
   1a118:	3201      	adds	r2, #1
   1a11a:	7812      	ldrb	r2, [r2, #0]
   1a11c:	0212      	lsls	r2, r2, #8
   1a11e:	4313      	orrs	r3, r2
   1a120:	687a      	ldr	r2, [r7, #4]
   1a122:	2166      	movs	r1, #102	; 0x66
   1a124:	5c52      	ldrb	r2, [r2, r1]
   1a126:	4313      	orrs	r3, r2
   1a128:	021b      	lsls	r3, r3, #8
   1a12a:	0a1b      	lsrs	r3, r3, #8
   1a12c:	4a15      	ldr	r2, [pc, #84]	; (1a184 <check_fs+0xd0>)
   1a12e:	4293      	cmp	r3, r2
   1a130:	d101      	bne.n	1a136 <check_fs+0x82>
		return 0;
   1a132:	2300      	movs	r3, #0
   1a134:	e01c      	b.n	1a170 <check_fs+0xbc>
	if ((LD_DWORD(&fs->win[BS_FilSysType32]) & 0xFFFFFF) == 0x544146)
   1a136:	687b      	ldr	r3, [r7, #4]
   1a138:	3382      	adds	r3, #130	; 0x82
   1a13a:	3303      	adds	r3, #3
   1a13c:	781b      	ldrb	r3, [r3, #0]
   1a13e:	061a      	lsls	r2, r3, #24
   1a140:	687b      	ldr	r3, [r7, #4]
   1a142:	3382      	adds	r3, #130	; 0x82
   1a144:	3302      	adds	r3, #2
   1a146:	781b      	ldrb	r3, [r3, #0]
   1a148:	041b      	lsls	r3, r3, #16
   1a14a:	4313      	orrs	r3, r2
   1a14c:	687a      	ldr	r2, [r7, #4]
   1a14e:	3282      	adds	r2, #130	; 0x82
   1a150:	3201      	adds	r2, #1
   1a152:	7812      	ldrb	r2, [r2, #0]
   1a154:	0212      	lsls	r2, r2, #8
   1a156:	4313      	orrs	r3, r2
   1a158:	687a      	ldr	r2, [r7, #4]
   1a15a:	2182      	movs	r1, #130	; 0x82
   1a15c:	5c52      	ldrb	r2, [r2, r1]
   1a15e:	4313      	orrs	r3, r2
   1a160:	021b      	lsls	r3, r3, #8
   1a162:	0a1b      	lsrs	r3, r3, #8
   1a164:	4a07      	ldr	r2, [pc, #28]	; (1a184 <check_fs+0xd0>)
   1a166:	4293      	cmp	r3, r2
   1a168:	d101      	bne.n	1a16e <check_fs+0xba>
		return 0;
   1a16a:	2300      	movs	r3, #0
   1a16c:	e000      	b.n	1a170 <check_fs+0xbc>

	return 1;
   1a16e:	2301      	movs	r3, #1
}
   1a170:	0018      	movs	r0, r3
   1a172:	46bd      	mov	sp, r7
   1a174:	b003      	add	sp, #12
   1a176:	bd90      	pop	{r4, r7, pc}
   1a178:	0001831d 	.word	0x0001831d
   1a17c:	0000022e 	.word	0x0000022e
   1a180:	ffffaa55 	.word	0xffffaa55
   1a184:	00544146 	.word	0x00544146

0001a188 <chk_mounted>:
FRESULT chk_mounted (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR **path,	/* Pointer to pointer to the path name (drive number) */
	FATFS **rfs,		/* Pointer to pointer to the found file system object */
	BYTE chk_wp			/* !=0: Check media write protection for write access */
)
{
   1a188:	b590      	push	{r4, r7, lr}
   1a18a:	b093      	sub	sp, #76	; 0x4c
   1a18c:	af00      	add	r7, sp, #0
   1a18e:	60f8      	str	r0, [r7, #12]
   1a190:	60b9      	str	r1, [r7, #8]
   1a192:	1dfb      	adds	r3, r7, #7
   1a194:	701a      	strb	r2, [r3, #0]
	BYTE fmt, b, pi, *tbl;
	UINT vol;
	DSTATUS stat;
	DWORD bsect, fasize, tsect, sysect, nclst, szbfat;
	WORD nrsv;
	const TCHAR *p = *path;
   1a196:	68fb      	ldr	r3, [r7, #12]
   1a198:	681b      	ldr	r3, [r3, #0]
   1a19a:	62fb      	str	r3, [r7, #44]	; 0x2c
	FATFS *fs;

	/* Get logical drive number from the path name */
	vol = p[0] - '0';					/* Is there a drive number? */
   1a19c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   1a19e:	781b      	ldrb	r3, [r3, #0]
   1a1a0:	3b30      	subs	r3, #48	; 0x30
   1a1a2:	643b      	str	r3, [r7, #64]	; 0x40
	if (vol <= 9 && p[1] == ':') {		/* Found a drive number, get and strip it */
   1a1a4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   1a1a6:	2b09      	cmp	r3, #9
   1a1a8:	d80b      	bhi.n	1a1c2 <chk_mounted+0x3a>
   1a1aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   1a1ac:	3301      	adds	r3, #1
   1a1ae:	781b      	ldrb	r3, [r3, #0]
   1a1b0:	2b3a      	cmp	r3, #58	; 0x3a
   1a1b2:	d106      	bne.n	1a1c2 <chk_mounted+0x3a>
		p += 2; *path = p;				/* Return pointer to the path name */
   1a1b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   1a1b6:	3302      	adds	r3, #2
   1a1b8:	62fb      	str	r3, [r7, #44]	; 0x2c
   1a1ba:	68fb      	ldr	r3, [r7, #12]
   1a1bc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
   1a1be:	601a      	str	r2, [r3, #0]
   1a1c0:	e001      	b.n	1a1c6 <chk_mounted+0x3e>
	} else {							/* No drive number is given */
#if _FS_RPATH
		vol = CurrVol;					/* Use current drive */
#else
		vol = 0;						/* Use drive 0 */
   1a1c2:	2300      	movs	r3, #0
   1a1c4:	643b      	str	r3, [r7, #64]	; 0x40
#endif
	}

	/* Check if the file system object is valid or not */
	if (vol >= _VOLUMES) 				/* Is the drive number valid? */
   1a1c6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   1a1c8:	2b07      	cmp	r3, #7
   1a1ca:	d901      	bls.n	1a1d0 <chk_mounted+0x48>
		return FR_INVALID_DRIVE;
   1a1cc:	230b      	movs	r3, #11
   1a1ce:	e2af      	b.n	1a730 <chk_mounted+0x5a8>
	*rfs = fs = FatFs[vol];				/* Return pointer to the corresponding file system object */
   1a1d0:	4bc5      	ldr	r3, [pc, #788]	; (1a4e8 <chk_mounted+0x360>)
   1a1d2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
   1a1d4:	0092      	lsls	r2, r2, #2
   1a1d6:	58d3      	ldr	r3, [r2, r3]
   1a1d8:	62bb      	str	r3, [r7, #40]	; 0x28
   1a1da:	68bb      	ldr	r3, [r7, #8]
   1a1dc:	6aba      	ldr	r2, [r7, #40]	; 0x28
   1a1de:	601a      	str	r2, [r3, #0]
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
   1a1e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1a1e2:	2b00      	cmp	r3, #0
   1a1e4:	d101      	bne.n	1a1ea <chk_mounted+0x62>
   1a1e6:	230c      	movs	r3, #12
   1a1e8:	e2a2      	b.n	1a730 <chk_mounted+0x5a8>

	ENTER_FF(fs);						/* Lock file system */

	if (fs->fs_type) {					/* If the logical drive has been mounted */
   1a1ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1a1ec:	781b      	ldrb	r3, [r3, #0]
   1a1ee:	2b00      	cmp	r3, #0
   1a1f0:	d01c      	beq.n	1a22c <chk_mounted+0xa4>
		stat = disk_status(fs->drv);
   1a1f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1a1f4:	785b      	ldrb	r3, [r3, #1]
   1a1f6:	2227      	movs	r2, #39	; 0x27
   1a1f8:	18bc      	adds	r4, r7, r2
   1a1fa:	0018      	movs	r0, r3
   1a1fc:	4bbb      	ldr	r3, [pc, #748]	; (1a4ec <chk_mounted+0x364>)
   1a1fe:	4798      	blx	r3
   1a200:	0003      	movs	r3, r0
   1a202:	7023      	strb	r3, [r4, #0]
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized (has not been changed), */
   1a204:	2327      	movs	r3, #39	; 0x27
   1a206:	18fb      	adds	r3, r7, r3
   1a208:	781b      	ldrb	r3, [r3, #0]
   1a20a:	2201      	movs	r2, #1
   1a20c:	4013      	ands	r3, r2
   1a20e:	d10d      	bne.n	1a22c <chk_mounted+0xa4>
			if (!_FS_READONLY && chk_wp && (stat & STA_PROTECT))	/* Check write protection if needed */
   1a210:	1dfb      	adds	r3, r7, #7
   1a212:	781b      	ldrb	r3, [r3, #0]
   1a214:	2b00      	cmp	r3, #0
   1a216:	d007      	beq.n	1a228 <chk_mounted+0xa0>
   1a218:	2327      	movs	r3, #39	; 0x27
   1a21a:	18fb      	adds	r3, r7, r3
   1a21c:	781b      	ldrb	r3, [r3, #0]
   1a21e:	2204      	movs	r2, #4
   1a220:	4013      	ands	r3, r2
   1a222:	d001      	beq.n	1a228 <chk_mounted+0xa0>
				return FR_WRITE_PROTECTED;
   1a224:	230a      	movs	r3, #10
   1a226:	e283      	b.n	1a730 <chk_mounted+0x5a8>
			return FR_OK;				/* The file system object is valid */
   1a228:	2300      	movs	r3, #0
   1a22a:	e281      	b.n	1a730 <chk_mounted+0x5a8>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
   1a22c:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1a22e:	2200      	movs	r2, #0
   1a230:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
   1a232:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   1a234:	b2da      	uxtb	r2, r3
   1a236:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1a238:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize low level disk I/O layer */
   1a23a:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1a23c:	785b      	ldrb	r3, [r3, #1]
   1a23e:	2227      	movs	r2, #39	; 0x27
   1a240:	18bc      	adds	r4, r7, r2
   1a242:	0018      	movs	r0, r3
   1a244:	4baa      	ldr	r3, [pc, #680]	; (1a4f0 <chk_mounted+0x368>)
   1a246:	4798      	blx	r3
   1a248:	0003      	movs	r3, r0
   1a24a:	7023      	strb	r3, [r4, #0]
	if (stat & STA_NOINIT)				/* Check if the initialization succeeded */
   1a24c:	2327      	movs	r3, #39	; 0x27
   1a24e:	18fb      	adds	r3, r7, r3
   1a250:	781b      	ldrb	r3, [r3, #0]
   1a252:	2201      	movs	r2, #1
   1a254:	4013      	ands	r3, r2
   1a256:	d001      	beq.n	1a25c <chk_mounted+0xd4>
		return FR_NOT_READY;			/* Failed to initialize due to no media or hard error */
   1a258:	2303      	movs	r3, #3
   1a25a:	e269      	b.n	1a730 <chk_mounted+0x5a8>
	if (!_FS_READONLY && chk_wp && (stat & STA_PROTECT))	/* Check disk write protection if needed */
   1a25c:	1dfb      	adds	r3, r7, #7
   1a25e:	781b      	ldrb	r3, [r3, #0]
   1a260:	2b00      	cmp	r3, #0
   1a262:	d007      	beq.n	1a274 <chk_mounted+0xec>
   1a264:	2327      	movs	r3, #39	; 0x27
   1a266:	18fb      	adds	r3, r7, r3
   1a268:	781b      	ldrb	r3, [r3, #0]
   1a26a:	2204      	movs	r2, #4
   1a26c:	4013      	ands	r3, r2
   1a26e:	d001      	beq.n	1a274 <chk_mounted+0xec>
		return FR_WRITE_PROTECTED;
   1a270:	230a      	movs	r3, #10
   1a272:	e25d      	b.n	1a730 <chk_mounted+0x5a8>
#if _MAX_SS != 512						/* Get disk sector size (variable sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &fs->ssize) != RES_OK)
		return FR_DISK_ERR;
#endif
	/* Search FAT partition on the drive. Supports only generic partitionings, FDISK and SFD. */
	fmt = check_fs(fs, bsect = 0);		/* Load sector 0 and check if it is an FAT-VBR (in SFD) */
   1a274:	2300      	movs	r3, #0
   1a276:	63fb      	str	r3, [r7, #60]	; 0x3c
   1a278:	2347      	movs	r3, #71	; 0x47
   1a27a:	18fc      	adds	r4, r7, r3
   1a27c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
   1a27e:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1a280:	0011      	movs	r1, r2
   1a282:	0018      	movs	r0, r3
   1a284:	4b9b      	ldr	r3, [pc, #620]	; (1a4f4 <chk_mounted+0x36c>)
   1a286:	4798      	blx	r3
   1a288:	0003      	movs	r3, r0
   1a28a:	7023      	strb	r3, [r4, #0]
	if (LD2PT(vol) && !fmt) fmt = 1;	/* Force non-SFD if the volume is forced partition */
	if (fmt == 1) {						/* Not an FAT-VBR, the physical drive can be partitioned */
   1a28c:	2347      	movs	r3, #71	; 0x47
   1a28e:	18fb      	adds	r3, r7, r3
   1a290:	781b      	ldrb	r3, [r3, #0]
   1a292:	2b01      	cmp	r3, #1
   1a294:	d13b      	bne.n	1a30e <chk_mounted+0x186>
		/* Check the partition listed in the partition table */
		pi = LD2PT(vol);
   1a296:	2346      	movs	r3, #70	; 0x46
   1a298:	18fb      	adds	r3, r7, r3
   1a29a:	2200      	movs	r2, #0
   1a29c:	701a      	strb	r2, [r3, #0]
		if (pi) pi--;
   1a29e:	2346      	movs	r3, #70	; 0x46
   1a2a0:	18fb      	adds	r3, r7, r3
   1a2a2:	781b      	ldrb	r3, [r3, #0]
   1a2a4:	2b00      	cmp	r3, #0
   1a2a6:	d006      	beq.n	1a2b6 <chk_mounted+0x12e>
   1a2a8:	2346      	movs	r3, #70	; 0x46
   1a2aa:	18fb      	adds	r3, r7, r3
   1a2ac:	781a      	ldrb	r2, [r3, #0]
   1a2ae:	2346      	movs	r3, #70	; 0x46
   1a2b0:	18fb      	adds	r3, r7, r3
   1a2b2:	3a01      	subs	r2, #1
   1a2b4:	701a      	strb	r2, [r3, #0]
		tbl = &fs->win[MBR_Table + pi * SZ_PTE];/* Partition table */
   1a2b6:	2346      	movs	r3, #70	; 0x46
   1a2b8:	18fb      	adds	r3, r7, r3
   1a2ba:	781b      	ldrb	r3, [r3, #0]
   1a2bc:	011b      	lsls	r3, r3, #4
   1a2be:	33bf      	adds	r3, #191	; 0xbf
   1a2c0:	33ff      	adds	r3, #255	; 0xff
   1a2c2:	3330      	adds	r3, #48	; 0x30
   1a2c4:	6aba      	ldr	r2, [r7, #40]	; 0x28
   1a2c6:	18d3      	adds	r3, r2, r3
   1a2c8:	623b      	str	r3, [r7, #32]
		if (tbl[4]) {						/* Is the partition existing? */
   1a2ca:	6a3b      	ldr	r3, [r7, #32]
   1a2cc:	3304      	adds	r3, #4
   1a2ce:	781b      	ldrb	r3, [r3, #0]
   1a2d0:	2b00      	cmp	r3, #0
   1a2d2:	d01c      	beq.n	1a30e <chk_mounted+0x186>
			bsect = LD_DWORD(&tbl[8]);		/* Partition offset in LBA */
   1a2d4:	6a3b      	ldr	r3, [r7, #32]
   1a2d6:	330b      	adds	r3, #11
   1a2d8:	781b      	ldrb	r3, [r3, #0]
   1a2da:	061a      	lsls	r2, r3, #24
   1a2dc:	6a3b      	ldr	r3, [r7, #32]
   1a2de:	330a      	adds	r3, #10
   1a2e0:	781b      	ldrb	r3, [r3, #0]
   1a2e2:	041b      	lsls	r3, r3, #16
   1a2e4:	4313      	orrs	r3, r2
   1a2e6:	6a3a      	ldr	r2, [r7, #32]
   1a2e8:	3209      	adds	r2, #9
   1a2ea:	7812      	ldrb	r2, [r2, #0]
   1a2ec:	0212      	lsls	r2, r2, #8
   1a2ee:	4313      	orrs	r3, r2
   1a2f0:	6a3a      	ldr	r2, [r7, #32]
   1a2f2:	3208      	adds	r2, #8
   1a2f4:	7812      	ldrb	r2, [r2, #0]
   1a2f6:	4313      	orrs	r3, r2
   1a2f8:	63fb      	str	r3, [r7, #60]	; 0x3c
			fmt = check_fs(fs, bsect);		/* Check the partition */
   1a2fa:	2347      	movs	r3, #71	; 0x47
   1a2fc:	18fc      	adds	r4, r7, r3
   1a2fe:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
   1a300:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1a302:	0011      	movs	r1, r2
   1a304:	0018      	movs	r0, r3
   1a306:	4b7b      	ldr	r3, [pc, #492]	; (1a4f4 <chk_mounted+0x36c>)
   1a308:	4798      	blx	r3
   1a30a:	0003      	movs	r3, r0
   1a30c:	7023      	strb	r3, [r4, #0]
		}
	}
	if (fmt == 3) return FR_DISK_ERR;
   1a30e:	2347      	movs	r3, #71	; 0x47
   1a310:	18fb      	adds	r3, r7, r3
   1a312:	781b      	ldrb	r3, [r3, #0]
   1a314:	2b03      	cmp	r3, #3
   1a316:	d101      	bne.n	1a31c <chk_mounted+0x194>
   1a318:	2301      	movs	r3, #1
   1a31a:	e209      	b.n	1a730 <chk_mounted+0x5a8>
	if (fmt) return FR_NO_FILESYSTEM;		/* No FAT volume is found */
   1a31c:	2347      	movs	r3, #71	; 0x47
   1a31e:	18fb      	adds	r3, r7, r3
   1a320:	781b      	ldrb	r3, [r3, #0]
   1a322:	2b00      	cmp	r3, #0
   1a324:	d001      	beq.n	1a32a <chk_mounted+0x1a2>
   1a326:	230d      	movs	r3, #13
   1a328:	e202      	b.n	1a730 <chk_mounted+0x5a8>

	/* An FAT volume is found. Following code initializes the file system object */

	if (LD_WORD(fs->win+BPB_BytsPerSec) != SS(fs))		/* (BPB_BytsPerSec must be equal to the physical sector size) */
   1a32a:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1a32c:	223c      	movs	r2, #60	; 0x3c
   1a32e:	5c9b      	ldrb	r3, [r3, r2]
   1a330:	021b      	lsls	r3, r3, #8
   1a332:	b21a      	sxth	r2, r3
   1a334:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1a336:	213b      	movs	r1, #59	; 0x3b
   1a338:	5c5b      	ldrb	r3, [r3, r1]
   1a33a:	b21b      	sxth	r3, r3
   1a33c:	4313      	orrs	r3, r2
   1a33e:	b21a      	sxth	r2, r3
   1a340:	2380      	movs	r3, #128	; 0x80
   1a342:	009b      	lsls	r3, r3, #2
   1a344:	429a      	cmp	r2, r3
   1a346:	d001      	beq.n	1a34c <chk_mounted+0x1c4>
		return FR_NO_FILESYSTEM;
   1a348:	230d      	movs	r3, #13
   1a34a:	e1f1      	b.n	1a730 <chk_mounted+0x5a8>

	fasize = LD_WORD(fs->win+BPB_FATSz16);				/* Number of sectors per FAT */
   1a34c:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1a34e:	2247      	movs	r2, #71	; 0x47
   1a350:	5c9b      	ldrb	r3, [r3, r2]
   1a352:	021b      	lsls	r3, r3, #8
   1a354:	b21a      	sxth	r2, r3
   1a356:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1a358:	2146      	movs	r1, #70	; 0x46
   1a35a:	5c5b      	ldrb	r3, [r3, r1]
   1a35c:	b21b      	sxth	r3, r3
   1a35e:	4313      	orrs	r3, r2
   1a360:	b21b      	sxth	r3, r3
   1a362:	b29b      	uxth	r3, r3
   1a364:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fasize) fasize = LD_DWORD(fs->win+BPB_FATSz32);
   1a366:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   1a368:	2b00      	cmp	r3, #0
   1a36a:	d112      	bne.n	1a392 <chk_mounted+0x20a>
   1a36c:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1a36e:	2257      	movs	r2, #87	; 0x57
   1a370:	5c9b      	ldrb	r3, [r3, r2]
   1a372:	061a      	lsls	r2, r3, #24
   1a374:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1a376:	2156      	movs	r1, #86	; 0x56
   1a378:	5c5b      	ldrb	r3, [r3, r1]
   1a37a:	041b      	lsls	r3, r3, #16
   1a37c:	4313      	orrs	r3, r2
   1a37e:	6aba      	ldr	r2, [r7, #40]	; 0x28
   1a380:	2155      	movs	r1, #85	; 0x55
   1a382:	5c52      	ldrb	r2, [r2, r1]
   1a384:	0212      	lsls	r2, r2, #8
   1a386:	4313      	orrs	r3, r2
   1a388:	6aba      	ldr	r2, [r7, #40]	; 0x28
   1a38a:	2154      	movs	r1, #84	; 0x54
   1a38c:	5c52      	ldrb	r2, [r2, r1]
   1a38e:	4313      	orrs	r3, r2
   1a390:	63bb      	str	r3, [r7, #56]	; 0x38
	fs->fsize = fasize;
   1a392:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1a394:	6bba      	ldr	r2, [r7, #56]	; 0x38
   1a396:	61da      	str	r2, [r3, #28]

	fs->n_fats = b = fs->win[BPB_NumFATs];				/* Number of FAT copies */
   1a398:	231f      	movs	r3, #31
   1a39a:	18fb      	adds	r3, r7, r3
   1a39c:	6aba      	ldr	r2, [r7, #40]	; 0x28
   1a39e:	2140      	movs	r1, #64	; 0x40
   1a3a0:	5c52      	ldrb	r2, [r2, r1]
   1a3a2:	701a      	strb	r2, [r3, #0]
   1a3a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1a3a6:	221f      	movs	r2, #31
   1a3a8:	18ba      	adds	r2, r7, r2
   1a3aa:	7812      	ldrb	r2, [r2, #0]
   1a3ac:	70da      	strb	r2, [r3, #3]
	if (b != 1 && b != 2) return FR_NO_FILESYSTEM;		/* (Must be 1 or 2) */
   1a3ae:	231f      	movs	r3, #31
   1a3b0:	18fb      	adds	r3, r7, r3
   1a3b2:	781b      	ldrb	r3, [r3, #0]
   1a3b4:	2b01      	cmp	r3, #1
   1a3b6:	d006      	beq.n	1a3c6 <chk_mounted+0x23e>
   1a3b8:	231f      	movs	r3, #31
   1a3ba:	18fb      	adds	r3, r7, r3
   1a3bc:	781b      	ldrb	r3, [r3, #0]
   1a3be:	2b02      	cmp	r3, #2
   1a3c0:	d001      	beq.n	1a3c6 <chk_mounted+0x23e>
   1a3c2:	230d      	movs	r3, #13
   1a3c4:	e1b4      	b.n	1a730 <chk_mounted+0x5a8>
	fasize *= b;										/* Number of sectors for FAT area */
   1a3c6:	231f      	movs	r3, #31
   1a3c8:	18fb      	adds	r3, r7, r3
   1a3ca:	781a      	ldrb	r2, [r3, #0]
   1a3cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   1a3ce:	4353      	muls	r3, r2
   1a3d0:	63bb      	str	r3, [r7, #56]	; 0x38

	fs->csize = b = fs->win[BPB_SecPerClus];			/* Number of sectors per cluster */
   1a3d2:	231f      	movs	r3, #31
   1a3d4:	18fb      	adds	r3, r7, r3
   1a3d6:	6aba      	ldr	r2, [r7, #40]	; 0x28
   1a3d8:	213d      	movs	r1, #61	; 0x3d
   1a3da:	5c52      	ldrb	r2, [r2, r1]
   1a3dc:	701a      	strb	r2, [r3, #0]
   1a3de:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1a3e0:	221f      	movs	r2, #31
   1a3e2:	18ba      	adds	r2, r7, r2
   1a3e4:	7812      	ldrb	r2, [r2, #0]
   1a3e6:	709a      	strb	r2, [r3, #2]
	if (!b || (b & (b - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
   1a3e8:	231f      	movs	r3, #31
   1a3ea:	18fb      	adds	r3, r7, r3
   1a3ec:	781b      	ldrb	r3, [r3, #0]
   1a3ee:	2b00      	cmp	r3, #0
   1a3f0:	d008      	beq.n	1a404 <chk_mounted+0x27c>
   1a3f2:	231f      	movs	r3, #31
   1a3f4:	18fb      	adds	r3, r7, r3
   1a3f6:	781b      	ldrb	r3, [r3, #0]
   1a3f8:	221f      	movs	r2, #31
   1a3fa:	18ba      	adds	r2, r7, r2
   1a3fc:	7812      	ldrb	r2, [r2, #0]
   1a3fe:	3a01      	subs	r2, #1
   1a400:	4013      	ands	r3, r2
   1a402:	d001      	beq.n	1a408 <chk_mounted+0x280>
   1a404:	230d      	movs	r3, #13
   1a406:	e193      	b.n	1a730 <chk_mounted+0x5a8>

	fs->n_rootdir = LD_WORD(fs->win+BPB_RootEntCnt);	/* Number of root directory entries */
   1a408:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1a40a:	2242      	movs	r2, #66	; 0x42
   1a40c:	5c9b      	ldrb	r3, [r3, r2]
   1a40e:	021b      	lsls	r3, r3, #8
   1a410:	b21a      	sxth	r2, r3
   1a412:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1a414:	2141      	movs	r1, #65	; 0x41
   1a416:	5c5b      	ldrb	r3, [r3, r1]
   1a418:	b21b      	sxth	r3, r3
   1a41a:	4313      	orrs	r3, r2
   1a41c:	b21b      	sxth	r3, r3
   1a41e:	b29a      	uxth	r2, r3
   1a420:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1a422:	811a      	strh	r2, [r3, #8]
	if (fs->n_rootdir % (SS(fs) / SZ_DIR)) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be sector aligned) */
   1a424:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1a426:	891b      	ldrh	r3, [r3, #8]
   1a428:	220f      	movs	r2, #15
   1a42a:	4013      	ands	r3, r2
   1a42c:	b29b      	uxth	r3, r3
   1a42e:	2b00      	cmp	r3, #0
   1a430:	d001      	beq.n	1a436 <chk_mounted+0x2ae>
   1a432:	230d      	movs	r3, #13
   1a434:	e17c      	b.n	1a730 <chk_mounted+0x5a8>

	tsect = LD_WORD(fs->win+BPB_TotSec16);				/* Number of sectors on the volume */
   1a436:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1a438:	2244      	movs	r2, #68	; 0x44
   1a43a:	5c9b      	ldrb	r3, [r3, r2]
   1a43c:	021b      	lsls	r3, r3, #8
   1a43e:	b21a      	sxth	r2, r3
   1a440:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1a442:	2143      	movs	r1, #67	; 0x43
   1a444:	5c5b      	ldrb	r3, [r3, r1]
   1a446:	b21b      	sxth	r3, r3
   1a448:	4313      	orrs	r3, r2
   1a44a:	b21b      	sxth	r3, r3
   1a44c:	b29b      	uxth	r3, r3
   1a44e:	637b      	str	r3, [r7, #52]	; 0x34
	if (!tsect) tsect = LD_DWORD(fs->win+BPB_TotSec32);
   1a450:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   1a452:	2b00      	cmp	r3, #0
   1a454:	d112      	bne.n	1a47c <chk_mounted+0x2f4>
   1a456:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1a458:	2253      	movs	r2, #83	; 0x53
   1a45a:	5c9b      	ldrb	r3, [r3, r2]
   1a45c:	061a      	lsls	r2, r3, #24
   1a45e:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1a460:	2152      	movs	r1, #82	; 0x52
   1a462:	5c5b      	ldrb	r3, [r3, r1]
   1a464:	041b      	lsls	r3, r3, #16
   1a466:	4313      	orrs	r3, r2
   1a468:	6aba      	ldr	r2, [r7, #40]	; 0x28
   1a46a:	2151      	movs	r1, #81	; 0x51
   1a46c:	5c52      	ldrb	r2, [r2, r1]
   1a46e:	0212      	lsls	r2, r2, #8
   1a470:	4313      	orrs	r3, r2
   1a472:	6aba      	ldr	r2, [r7, #40]	; 0x28
   1a474:	2150      	movs	r1, #80	; 0x50
   1a476:	5c52      	ldrb	r2, [r2, r1]
   1a478:	4313      	orrs	r3, r2
   1a47a:	637b      	str	r3, [r7, #52]	; 0x34

	nrsv = LD_WORD(fs->win+BPB_RsvdSecCnt);				/* Number of reserved sectors */
   1a47c:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1a47e:	223f      	movs	r2, #63	; 0x3f
   1a480:	5c9b      	ldrb	r3, [r3, r2]
   1a482:	021b      	lsls	r3, r3, #8
   1a484:	b21a      	sxth	r2, r3
   1a486:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1a488:	213e      	movs	r1, #62	; 0x3e
   1a48a:	5c5b      	ldrb	r3, [r3, r1]
   1a48c:	b21b      	sxth	r3, r3
   1a48e:	4313      	orrs	r3, r2
   1a490:	b21a      	sxth	r2, r3
   1a492:	231c      	movs	r3, #28
   1a494:	18fb      	adds	r3, r7, r3
   1a496:	801a      	strh	r2, [r3, #0]
	if (!nrsv) return FR_NO_FILESYSTEM;					/* (BPB_RsvdSecCnt must not be 0) */
   1a498:	231c      	movs	r3, #28
   1a49a:	18fb      	adds	r3, r7, r3
   1a49c:	881b      	ldrh	r3, [r3, #0]
   1a49e:	2b00      	cmp	r3, #0
   1a4a0:	d101      	bne.n	1a4a6 <chk_mounted+0x31e>
   1a4a2:	230d      	movs	r3, #13
   1a4a4:	e144      	b.n	1a730 <chk_mounted+0x5a8>

	/* Determine the FAT sub type */
	sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZ_DIR);	/* RSV+FAT+DIR */
   1a4a6:	231c      	movs	r3, #28
   1a4a8:	18fb      	adds	r3, r7, r3
   1a4aa:	881a      	ldrh	r2, [r3, #0]
   1a4ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   1a4ae:	18d3      	adds	r3, r2, r3
   1a4b0:	6aba      	ldr	r2, [r7, #40]	; 0x28
   1a4b2:	8912      	ldrh	r2, [r2, #8]
   1a4b4:	0912      	lsrs	r2, r2, #4
   1a4b6:	b292      	uxth	r2, r2
   1a4b8:	189b      	adds	r3, r3, r2
   1a4ba:	61bb      	str	r3, [r7, #24]
	if (tsect < sysect) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
   1a4bc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
   1a4be:	69bb      	ldr	r3, [r7, #24]
   1a4c0:	429a      	cmp	r2, r3
   1a4c2:	d201      	bcs.n	1a4c8 <chk_mounted+0x340>
   1a4c4:	230d      	movs	r3, #13
   1a4c6:	e133      	b.n	1a730 <chk_mounted+0x5a8>
	nclst = (tsect - sysect) / fs->csize;				/* Number of clusters */
   1a4c8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
   1a4ca:	69bb      	ldr	r3, [r7, #24]
   1a4cc:	1ad2      	subs	r2, r2, r3
   1a4ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1a4d0:	789b      	ldrb	r3, [r3, #2]
   1a4d2:	0019      	movs	r1, r3
   1a4d4:	4b08      	ldr	r3, [pc, #32]	; (1a4f8 <chk_mounted+0x370>)
   1a4d6:	0010      	movs	r0, r2
   1a4d8:	4798      	blx	r3
   1a4da:	0003      	movs	r3, r0
   1a4dc:	617b      	str	r3, [r7, #20]
	if (!nclst) return FR_NO_FILESYSTEM;				/* (Invalid volume size) */
   1a4de:	697b      	ldr	r3, [r7, #20]
   1a4e0:	2b00      	cmp	r3, #0
   1a4e2:	d10b      	bne.n	1a4fc <chk_mounted+0x374>
   1a4e4:	230d      	movs	r3, #13
   1a4e6:	e123      	b.n	1a730 <chk_mounted+0x5a8>
   1a4e8:	20003d74 	.word	0x20003d74
   1a4ec:	000182e5 	.word	0x000182e5
   1a4f0:	00018261 	.word	0x00018261
   1a4f4:	0001a0b5 	.word	0x0001a0b5
   1a4f8:	0001f841 	.word	0x0001f841
	fmt = FS_FAT12;
   1a4fc:	2347      	movs	r3, #71	; 0x47
   1a4fe:	18fb      	adds	r3, r7, r3
   1a500:	2201      	movs	r2, #1
   1a502:	701a      	strb	r2, [r3, #0]
	if (nclst >= MIN_FAT16) fmt = FS_FAT16;
   1a504:	697b      	ldr	r3, [r7, #20]
   1a506:	4a8c      	ldr	r2, [pc, #560]	; (1a738 <chk_mounted+0x5b0>)
   1a508:	4293      	cmp	r3, r2
   1a50a:	d903      	bls.n	1a514 <chk_mounted+0x38c>
   1a50c:	2347      	movs	r3, #71	; 0x47
   1a50e:	18fb      	adds	r3, r7, r3
   1a510:	2202      	movs	r2, #2
   1a512:	701a      	strb	r2, [r3, #0]
	if (nclst >= MIN_FAT32) fmt = FS_FAT32;
   1a514:	697b      	ldr	r3, [r7, #20]
   1a516:	4a89      	ldr	r2, [pc, #548]	; (1a73c <chk_mounted+0x5b4>)
   1a518:	4293      	cmp	r3, r2
   1a51a:	d903      	bls.n	1a524 <chk_mounted+0x39c>
   1a51c:	2347      	movs	r3, #71	; 0x47
   1a51e:	18fb      	adds	r3, r7, r3
   1a520:	2203      	movs	r2, #3
   1a522:	701a      	strb	r2, [r3, #0]

	/* Boundaries and Limits */
	fs->n_fatent = nclst + 2;							/* Number of FAT entries */
   1a524:	697b      	ldr	r3, [r7, #20]
   1a526:	1c9a      	adds	r2, r3, #2
   1a528:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1a52a:	619a      	str	r2, [r3, #24]
	fs->database = bsect + sysect;						/* Data start sector */
   1a52c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
   1a52e:	69bb      	ldr	r3, [r7, #24]
   1a530:	18d2      	adds	r2, r2, r3
   1a532:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1a534:	629a      	str	r2, [r3, #40]	; 0x28
	fs->fatbase = bsect + nrsv; 						/* FAT start sector */
   1a536:	231c      	movs	r3, #28
   1a538:	18fb      	adds	r3, r7, r3
   1a53a:	881a      	ldrh	r2, [r3, #0]
   1a53c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   1a53e:	18d2      	adds	r2, r2, r3
   1a540:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1a542:	621a      	str	r2, [r3, #32]
	if (fmt == FS_FAT32) {
   1a544:	2347      	movs	r3, #71	; 0x47
   1a546:	18fb      	adds	r3, r7, r3
   1a548:	781b      	ldrb	r3, [r3, #0]
   1a54a:	2b03      	cmp	r3, #3
   1a54c:	d11e      	bne.n	1a58c <chk_mounted+0x404>
		if (fs->n_rootdir) return FR_NO_FILESYSTEM;		/* (BPB_RootEntCnt must be 0) */
   1a54e:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1a550:	891b      	ldrh	r3, [r3, #8]
   1a552:	2b00      	cmp	r3, #0
   1a554:	d001      	beq.n	1a55a <chk_mounted+0x3d2>
   1a556:	230d      	movs	r3, #13
   1a558:	e0ea      	b.n	1a730 <chk_mounted+0x5a8>
		fs->dirbase = LD_DWORD(fs->win+BPB_RootClus);	/* Root directory start cluster */
   1a55a:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1a55c:	225f      	movs	r2, #95	; 0x5f
   1a55e:	5c9b      	ldrb	r3, [r3, r2]
   1a560:	061a      	lsls	r2, r3, #24
   1a562:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1a564:	215e      	movs	r1, #94	; 0x5e
   1a566:	5c5b      	ldrb	r3, [r3, r1]
   1a568:	041b      	lsls	r3, r3, #16
   1a56a:	4313      	orrs	r3, r2
   1a56c:	6aba      	ldr	r2, [r7, #40]	; 0x28
   1a56e:	215d      	movs	r1, #93	; 0x5d
   1a570:	5c52      	ldrb	r2, [r2, r1]
   1a572:	0212      	lsls	r2, r2, #8
   1a574:	4313      	orrs	r3, r2
   1a576:	6aba      	ldr	r2, [r7, #40]	; 0x28
   1a578:	215c      	movs	r1, #92	; 0x5c
   1a57a:	5c52      	ldrb	r2, [r2, r1]
   1a57c:	431a      	orrs	r2, r3
   1a57e:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1a580:	625a      	str	r2, [r3, #36]	; 0x24
		szbfat = fs->n_fatent * 4;						/* (Required FAT size) */
   1a582:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1a584:	699b      	ldr	r3, [r3, #24]
   1a586:	009b      	lsls	r3, r3, #2
   1a588:	633b      	str	r3, [r7, #48]	; 0x30
   1a58a:	e020      	b.n	1a5ce <chk_mounted+0x446>
	} else {
		if (!fs->n_rootdir)	return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must not be 0) */
   1a58c:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1a58e:	891b      	ldrh	r3, [r3, #8]
   1a590:	2b00      	cmp	r3, #0
   1a592:	d101      	bne.n	1a598 <chk_mounted+0x410>
   1a594:	230d      	movs	r3, #13
   1a596:	e0cb      	b.n	1a730 <chk_mounted+0x5a8>
		fs->dirbase = fs->fatbase + fasize;				/* Root directory start sector */
   1a598:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1a59a:	6a1a      	ldr	r2, [r3, #32]
   1a59c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   1a59e:	18d2      	adds	r2, r2, r3
   1a5a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1a5a2:	625a      	str	r2, [r3, #36]	; 0x24
		szbfat = (fmt == FS_FAT16) ?					/* (Required FAT size) */
			fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
   1a5a4:	2347      	movs	r3, #71	; 0x47
   1a5a6:	18fb      	adds	r3, r7, r3
   1a5a8:	781b      	ldrb	r3, [r3, #0]
   1a5aa:	2b02      	cmp	r3, #2
   1a5ac:	d103      	bne.n	1a5b6 <chk_mounted+0x42e>
   1a5ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1a5b0:	699b      	ldr	r3, [r3, #24]
   1a5b2:	005b      	lsls	r3, r3, #1
   1a5b4:	e00a      	b.n	1a5cc <chk_mounted+0x444>
   1a5b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1a5b8:	699a      	ldr	r2, [r3, #24]
   1a5ba:	0013      	movs	r3, r2
   1a5bc:	005b      	lsls	r3, r3, #1
   1a5be:	189b      	adds	r3, r3, r2
   1a5c0:	085a      	lsrs	r2, r3, #1
   1a5c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1a5c4:	699b      	ldr	r3, [r3, #24]
   1a5c6:	2101      	movs	r1, #1
   1a5c8:	400b      	ands	r3, r1
   1a5ca:	18d3      	adds	r3, r2, r3
		szbfat = (fmt == FS_FAT16) ?					/* (Required FAT size) */
   1a5cc:	633b      	str	r3, [r7, #48]	; 0x30
	}
	if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs))	/* (BPB_FATSz must not be less than required) */
   1a5ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1a5d0:	69da      	ldr	r2, [r3, #28]
   1a5d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   1a5d4:	495a      	ldr	r1, [pc, #360]	; (1a740 <chk_mounted+0x5b8>)
   1a5d6:	468c      	mov	ip, r1
   1a5d8:	4463      	add	r3, ip
   1a5da:	0a5b      	lsrs	r3, r3, #9
   1a5dc:	429a      	cmp	r2, r3
   1a5de:	d201      	bcs.n	1a5e4 <chk_mounted+0x45c>
		return FR_NO_FILESYSTEM;
   1a5e0:	230d      	movs	r3, #13
   1a5e2:	e0a5      	b.n	1a730 <chk_mounted+0x5a8>

#if !_FS_READONLY
	/* Initialize cluster allocation information */
	fs->free_clust = 0xFFFFFFFF;
   1a5e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1a5e6:	2201      	movs	r2, #1
   1a5e8:	4252      	negs	r2, r2
   1a5ea:	611a      	str	r2, [r3, #16]
	fs->last_clust = 0;
   1a5ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1a5ee:	2200      	movs	r2, #0
   1a5f0:	60da      	str	r2, [r3, #12]

	/* Get fsinfo if available */
	if (fmt == FS_FAT32) {
   1a5f2:	2347      	movs	r3, #71	; 0x47
   1a5f4:	18fb      	adds	r3, r7, r3
   1a5f6:	781b      	ldrb	r3, [r3, #0]
   1a5f8:	2b03      	cmp	r3, #3
   1a5fa:	d000      	beq.n	1a5fe <chk_mounted+0x476>
   1a5fc:	e082      	b.n	1a704 <chk_mounted+0x57c>
	 	fs->fsi_flag = 0;
   1a5fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1a600:	2200      	movs	r2, #0
   1a602:	715a      	strb	r2, [r3, #5]
		fs->fsi_sector = bsect + LD_WORD(fs->win+BPB_FSInfo);
   1a604:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1a606:	2261      	movs	r2, #97	; 0x61
   1a608:	5c9b      	ldrb	r3, [r3, r2]
   1a60a:	021b      	lsls	r3, r3, #8
   1a60c:	b21a      	sxth	r2, r3
   1a60e:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1a610:	2160      	movs	r1, #96	; 0x60
   1a612:	5c5b      	ldrb	r3, [r3, r1]
   1a614:	b21b      	sxth	r3, r3
   1a616:	4313      	orrs	r3, r2
   1a618:	b21b      	sxth	r3, r3
   1a61a:	b29b      	uxth	r3, r3
   1a61c:	001a      	movs	r2, r3
   1a61e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   1a620:	18d2      	adds	r2, r2, r3
   1a622:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1a624:	615a      	str	r2, [r3, #20]
		if (disk_read(fs->drv, fs->win, fs->fsi_sector, 1) == RES_OK &&
   1a626:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1a628:	7858      	ldrb	r0, [r3, #1]
   1a62a:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1a62c:	3330      	adds	r3, #48	; 0x30
   1a62e:	0019      	movs	r1, r3
   1a630:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1a632:	695a      	ldr	r2, [r3, #20]
   1a634:	2301      	movs	r3, #1
   1a636:	4c43      	ldr	r4, [pc, #268]	; (1a744 <chk_mounted+0x5bc>)
   1a638:	47a0      	blx	r4
   1a63a:	1e03      	subs	r3, r0, #0
   1a63c:	d162      	bne.n	1a704 <chk_mounted+0x57c>
			LD_WORD(fs->win+BS_55AA) == 0xAA55 &&
   1a63e:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1a640:	4a41      	ldr	r2, [pc, #260]	; (1a748 <chk_mounted+0x5c0>)
   1a642:	5c9b      	ldrb	r3, [r3, r2]
   1a644:	021b      	lsls	r3, r3, #8
   1a646:	b21a      	sxth	r2, r3
   1a648:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1a64a:	4940      	ldr	r1, [pc, #256]	; (1a74c <chk_mounted+0x5c4>)
   1a64c:	5c5b      	ldrb	r3, [r3, r1]
   1a64e:	b21b      	sxth	r3, r3
   1a650:	4313      	orrs	r3, r2
   1a652:	b21b      	sxth	r3, r3
		if (disk_read(fs->drv, fs->win, fs->fsi_sector, 1) == RES_OK &&
   1a654:	4a3e      	ldr	r2, [pc, #248]	; (1a750 <chk_mounted+0x5c8>)
   1a656:	4293      	cmp	r3, r2
   1a658:	d154      	bne.n	1a704 <chk_mounted+0x57c>
			LD_DWORD(fs->win+FSI_LeadSig) == 0x41615252 &&
   1a65a:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1a65c:	2233      	movs	r2, #51	; 0x33
   1a65e:	5c9b      	ldrb	r3, [r3, r2]
   1a660:	061a      	lsls	r2, r3, #24
   1a662:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1a664:	2132      	movs	r1, #50	; 0x32
   1a666:	5c5b      	ldrb	r3, [r3, r1]
   1a668:	041b      	lsls	r3, r3, #16
   1a66a:	4313      	orrs	r3, r2
   1a66c:	6aba      	ldr	r2, [r7, #40]	; 0x28
   1a66e:	2131      	movs	r1, #49	; 0x31
   1a670:	5c52      	ldrb	r2, [r2, r1]
   1a672:	0212      	lsls	r2, r2, #8
   1a674:	4313      	orrs	r3, r2
   1a676:	6aba      	ldr	r2, [r7, #40]	; 0x28
   1a678:	2130      	movs	r1, #48	; 0x30
   1a67a:	5c52      	ldrb	r2, [r2, r1]
   1a67c:	4313      	orrs	r3, r2
			LD_WORD(fs->win+BS_55AA) == 0xAA55 &&
   1a67e:	4a35      	ldr	r2, [pc, #212]	; (1a754 <chk_mounted+0x5cc>)
   1a680:	4293      	cmp	r3, r2
   1a682:	d13f      	bne.n	1a704 <chk_mounted+0x57c>
			LD_DWORD(fs->win+FSI_StrucSig) == 0x61417272) {
   1a684:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1a686:	4a34      	ldr	r2, [pc, #208]	; (1a758 <chk_mounted+0x5d0>)
   1a688:	5c9b      	ldrb	r3, [r3, r2]
   1a68a:	061a      	lsls	r2, r3, #24
   1a68c:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1a68e:	4933      	ldr	r1, [pc, #204]	; (1a75c <chk_mounted+0x5d4>)
   1a690:	5c5b      	ldrb	r3, [r3, r1]
   1a692:	041b      	lsls	r3, r3, #16
   1a694:	4313      	orrs	r3, r2
   1a696:	6aba      	ldr	r2, [r7, #40]	; 0x28
   1a698:	4931      	ldr	r1, [pc, #196]	; (1a760 <chk_mounted+0x5d8>)
   1a69a:	5c52      	ldrb	r2, [r2, r1]
   1a69c:	0212      	lsls	r2, r2, #8
   1a69e:	4313      	orrs	r3, r2
   1a6a0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
   1a6a2:	2285      	movs	r2, #133	; 0x85
   1a6a4:	0092      	lsls	r2, r2, #2
   1a6a6:	5c8a      	ldrb	r2, [r1, r2]
   1a6a8:	4313      	orrs	r3, r2
			LD_DWORD(fs->win+FSI_LeadSig) == 0x41615252 &&
   1a6aa:	4a2e      	ldr	r2, [pc, #184]	; (1a764 <chk_mounted+0x5dc>)
   1a6ac:	4293      	cmp	r3, r2
   1a6ae:	d129      	bne.n	1a704 <chk_mounted+0x57c>
				fs->last_clust = LD_DWORD(fs->win+FSI_Nxt_Free);
   1a6b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1a6b2:	4a2d      	ldr	r2, [pc, #180]	; (1a768 <chk_mounted+0x5e0>)
   1a6b4:	5c9b      	ldrb	r3, [r3, r2]
   1a6b6:	061a      	lsls	r2, r3, #24
   1a6b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1a6ba:	492c      	ldr	r1, [pc, #176]	; (1a76c <chk_mounted+0x5e4>)
   1a6bc:	5c5b      	ldrb	r3, [r3, r1]
   1a6be:	041b      	lsls	r3, r3, #16
   1a6c0:	4313      	orrs	r3, r2
   1a6c2:	6aba      	ldr	r2, [r7, #40]	; 0x28
   1a6c4:	492a      	ldr	r1, [pc, #168]	; (1a770 <chk_mounted+0x5e8>)
   1a6c6:	5c52      	ldrb	r2, [r2, r1]
   1a6c8:	0212      	lsls	r2, r2, #8
   1a6ca:	4313      	orrs	r3, r2
   1a6cc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
   1a6ce:	2287      	movs	r2, #135	; 0x87
   1a6d0:	0092      	lsls	r2, r2, #2
   1a6d2:	5c8a      	ldrb	r2, [r1, r2]
   1a6d4:	431a      	orrs	r2, r3
   1a6d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1a6d8:	60da      	str	r2, [r3, #12]
				fs->free_clust = LD_DWORD(fs->win+FSI_Free_Count);
   1a6da:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1a6dc:	4a25      	ldr	r2, [pc, #148]	; (1a774 <chk_mounted+0x5ec>)
   1a6de:	5c9b      	ldrb	r3, [r3, r2]
   1a6e0:	061a      	lsls	r2, r3, #24
   1a6e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1a6e4:	4924      	ldr	r1, [pc, #144]	; (1a778 <chk_mounted+0x5f0>)
   1a6e6:	5c5b      	ldrb	r3, [r3, r1]
   1a6e8:	041b      	lsls	r3, r3, #16
   1a6ea:	4313      	orrs	r3, r2
   1a6ec:	6aba      	ldr	r2, [r7, #40]	; 0x28
   1a6ee:	4923      	ldr	r1, [pc, #140]	; (1a77c <chk_mounted+0x5f4>)
   1a6f0:	5c52      	ldrb	r2, [r2, r1]
   1a6f2:	0212      	lsls	r2, r2, #8
   1a6f4:	4313      	orrs	r3, r2
   1a6f6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
   1a6f8:	2286      	movs	r2, #134	; 0x86
   1a6fa:	0092      	lsls	r2, r2, #2
   1a6fc:	5c8a      	ldrb	r2, [r1, r2]
   1a6fe:	431a      	orrs	r2, r3
   1a700:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1a702:	611a      	str	r2, [r3, #16]
		}
	}
#endif
	fs->fs_type = fmt;		/* FAT sub-type */
   1a704:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1a706:	2247      	movs	r2, #71	; 0x47
   1a708:	18ba      	adds	r2, r7, r2
   1a70a:	7812      	ldrb	r2, [r2, #0]
   1a70c:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
   1a70e:	4b1c      	ldr	r3, [pc, #112]	; (1a780 <chk_mounted+0x5f8>)
   1a710:	881b      	ldrh	r3, [r3, #0]
   1a712:	3301      	adds	r3, #1
   1a714:	b29a      	uxth	r2, r3
   1a716:	4b1a      	ldr	r3, [pc, #104]	; (1a780 <chk_mounted+0x5f8>)
   1a718:	801a      	strh	r2, [r3, #0]
   1a71a:	4b19      	ldr	r3, [pc, #100]	; (1a780 <chk_mounted+0x5f8>)
   1a71c:	881a      	ldrh	r2, [r3, #0]
   1a71e:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1a720:	80da      	strh	r2, [r3, #6]
	fs->winsect = 0;		/* Invalidate sector cache */
   1a722:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1a724:	2200      	movs	r2, #0
   1a726:	62da      	str	r2, [r3, #44]	; 0x2c
	fs->wflag = 0;
   1a728:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1a72a:	2200      	movs	r2, #0
   1a72c:	711a      	strb	r2, [r3, #4]
#endif
#if _FS_SHARE				/* Clear file lock semaphores */
	clear_lock(fs);
#endif

	return FR_OK;
   1a72e:	2300      	movs	r3, #0
}
   1a730:	0018      	movs	r0, r3
   1a732:	46bd      	mov	sp, r7
   1a734:	b013      	add	sp, #76	; 0x4c
   1a736:	bd90      	pop	{r4, r7, pc}
   1a738:	00000ff5 	.word	0x00000ff5
   1a73c:	0000fff5 	.word	0x0000fff5
   1a740:	000001ff 	.word	0x000001ff
   1a744:	0001831d 	.word	0x0001831d
   1a748:	0000022f 	.word	0x0000022f
   1a74c:	0000022e 	.word	0x0000022e
   1a750:	ffffaa55 	.word	0xffffaa55
   1a754:	41615252 	.word	0x41615252
   1a758:	00000217 	.word	0x00000217
   1a75c:	00000216 	.word	0x00000216
   1a760:	00000215 	.word	0x00000215
   1a764:	61417272 	.word	0x61417272
   1a768:	0000021f 	.word	0x0000021f
   1a76c:	0000021e 	.word	0x0000021e
   1a770:	0000021d 	.word	0x0000021d
   1a774:	0000021b 	.word	0x0000021b
   1a778:	0000021a 	.word	0x0000021a
   1a77c:	00000219 	.word	0x00000219
   1a780:	20003d94 	.word	0x20003d94

0001a784 <validate>:
static
FRESULT validate (	/* FR_OK(0): The object is valid, !=0: Invalid */
	FATFS *fs,		/* Pointer to the file system object */
	WORD id			/* Member id of the target object to be checked */
)
{
   1a784:	b580      	push	{r7, lr}
   1a786:	b082      	sub	sp, #8
   1a788:	af00      	add	r7, sp, #0
   1a78a:	6078      	str	r0, [r7, #4]
   1a78c:	000a      	movs	r2, r1
   1a78e:	1cbb      	adds	r3, r7, #2
   1a790:	801a      	strh	r2, [r3, #0]
	if (!fs || !fs->fs_type || fs->id != id)
   1a792:	687b      	ldr	r3, [r7, #4]
   1a794:	2b00      	cmp	r3, #0
   1a796:	d009      	beq.n	1a7ac <validate+0x28>
   1a798:	687b      	ldr	r3, [r7, #4]
   1a79a:	781b      	ldrb	r3, [r3, #0]
   1a79c:	2b00      	cmp	r3, #0
   1a79e:	d005      	beq.n	1a7ac <validate+0x28>
   1a7a0:	687b      	ldr	r3, [r7, #4]
   1a7a2:	88db      	ldrh	r3, [r3, #6]
   1a7a4:	1cba      	adds	r2, r7, #2
   1a7a6:	8812      	ldrh	r2, [r2, #0]
   1a7a8:	429a      	cmp	r2, r3
   1a7aa:	d001      	beq.n	1a7b0 <validate+0x2c>
		return FR_INVALID_OBJECT;
   1a7ac:	2309      	movs	r3, #9
   1a7ae:	e00c      	b.n	1a7ca <validate+0x46>

	ENTER_FF(fs);		/* Lock file system */

	if (disk_status(fs->drv) & STA_NOINIT)
   1a7b0:	687b      	ldr	r3, [r7, #4]
   1a7b2:	785b      	ldrb	r3, [r3, #1]
   1a7b4:	0018      	movs	r0, r3
   1a7b6:	4b07      	ldr	r3, [pc, #28]	; (1a7d4 <validate+0x50>)
   1a7b8:	4798      	blx	r3
   1a7ba:	0003      	movs	r3, r0
   1a7bc:	001a      	movs	r2, r3
   1a7be:	2301      	movs	r3, #1
   1a7c0:	4013      	ands	r3, r2
   1a7c2:	d001      	beq.n	1a7c8 <validate+0x44>
		return FR_NOT_READY;
   1a7c4:	2303      	movs	r3, #3
   1a7c6:	e000      	b.n	1a7ca <validate+0x46>

	return FR_OK;
   1a7c8:	2300      	movs	r3, #0
}
   1a7ca:	0018      	movs	r0, r3
   1a7cc:	46bd      	mov	sp, r7
   1a7ce:	b002      	add	sp, #8
   1a7d0:	bd80      	pop	{r7, pc}
   1a7d2:	46c0      	nop			; (mov r8, r8)
   1a7d4:	000182e5 	.word	0x000182e5

0001a7d8 <f_mount>:

FRESULT f_mount (
	BYTE vol,		/* Logical drive number to be mounted/unmounted */
	FATFS *fs		/* Pointer to new file system object (NULL for unmount)*/
)
{
   1a7d8:	b580      	push	{r7, lr}
   1a7da:	b084      	sub	sp, #16
   1a7dc:	af00      	add	r7, sp, #0
   1a7de:	0002      	movs	r2, r0
   1a7e0:	6039      	str	r1, [r7, #0]
   1a7e2:	1dfb      	adds	r3, r7, #7
   1a7e4:	701a      	strb	r2, [r3, #0]
	FATFS *rfs;


	if (vol >= _VOLUMES)		/* Check if the drive number is valid */
   1a7e6:	1dfb      	adds	r3, r7, #7
   1a7e8:	781b      	ldrb	r3, [r3, #0]
   1a7ea:	2b07      	cmp	r3, #7
   1a7ec:	d901      	bls.n	1a7f2 <f_mount+0x1a>
		return FR_INVALID_DRIVE;
   1a7ee:	230b      	movs	r3, #11
   1a7f0:	e018      	b.n	1a824 <f_mount+0x4c>
	rfs = FatFs[vol];			/* Get current fs object */
   1a7f2:	1dfb      	adds	r3, r7, #7
   1a7f4:	781a      	ldrb	r2, [r3, #0]
   1a7f6:	4b0d      	ldr	r3, [pc, #52]	; (1a82c <f_mount+0x54>)
   1a7f8:	0092      	lsls	r2, r2, #2
   1a7fa:	58d3      	ldr	r3, [r2, r3]
   1a7fc:	60fb      	str	r3, [r7, #12]

	if (rfs) {
   1a7fe:	68fb      	ldr	r3, [r7, #12]
   1a800:	2b00      	cmp	r3, #0
   1a802:	d002      	beq.n	1a80a <f_mount+0x32>
		clear_lock(rfs);
#endif
#if _FS_REENTRANT				/* Discard sync object of the current volume */
		if (!ff_del_syncobj(rfs->sobj)) return FR_INT_ERR;
#endif
		rfs->fs_type = 0;		/* Clear old fs object */
   1a804:	68fb      	ldr	r3, [r7, #12]
   1a806:	2200      	movs	r2, #0
   1a808:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
   1a80a:	683b      	ldr	r3, [r7, #0]
   1a80c:	2b00      	cmp	r3, #0
   1a80e:	d002      	beq.n	1a816 <f_mount+0x3e>
		fs->fs_type = 0;		/* Clear new fs object */
   1a810:	683b      	ldr	r3, [r7, #0]
   1a812:	2200      	movs	r2, #0
   1a814:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT				/* Create sync object for the new volume */
		if (!ff_cre_syncobj(vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;			/* Register new fs object */
   1a816:	1dfb      	adds	r3, r7, #7
   1a818:	781a      	ldrb	r2, [r3, #0]
   1a81a:	4b04      	ldr	r3, [pc, #16]	; (1a82c <f_mount+0x54>)
   1a81c:	0092      	lsls	r2, r2, #2
   1a81e:	6839      	ldr	r1, [r7, #0]
   1a820:	50d1      	str	r1, [r2, r3]

	return FR_OK;
   1a822:	2300      	movs	r3, #0
}
   1a824:	0018      	movs	r0, r3
   1a826:	46bd      	mov	sp, r7
   1a828:	b004      	add	sp, #16
   1a82a:	bd80      	pop	{r7, pc}
   1a82c:	20003d74 	.word	0x20003d74

0001a830 <f_open>:
FRESULT f_open (
	FIL *fp,			/* Pointer to the blank file object */
	const TCHAR *path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
   1a830:	b590      	push	{r4, r7, lr}
   1a832:	4ce5      	ldr	r4, [pc, #916]	; (1abc8 <f_open+0x398>)
   1a834:	44a5      	add	sp, r4
   1a836:	af00      	add	r7, sp, #0
   1a838:	60f8      	str	r0, [r7, #12]
   1a83a:	60b9      	str	r1, [r7, #8]
   1a83c:	4be3      	ldr	r3, [pc, #908]	; (1abcc <f_open+0x39c>)
   1a83e:	2194      	movs	r1, #148	; 0x94
   1a840:	0089      	lsls	r1, r1, #2
   1a842:	468c      	mov	ip, r1
   1a844:	44bc      	add	ip, r7
   1a846:	4463      	add	r3, ip
   1a848:	701a      	strb	r2, [r3, #0]
	DIR dj;
	BYTE *dir;
	DEF_NAMEBUF;


	fp->fs = 0;			/* Clear file object */
   1a84a:	68fb      	ldr	r3, [r7, #12]
   1a84c:	2200      	movs	r2, #0
   1a84e:	601a      	str	r2, [r3, #0]

#if !_FS_READONLY
	mode &= FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW;
   1a850:	4bde      	ldr	r3, [pc, #888]	; (1abcc <f_open+0x39c>)
   1a852:	2294      	movs	r2, #148	; 0x94
   1a854:	0092      	lsls	r2, r2, #2
   1a856:	4694      	mov	ip, r2
   1a858:	44bc      	add	ip, r7
   1a85a:	4463      	add	r3, ip
   1a85c:	4adb      	ldr	r2, [pc, #876]	; (1abcc <f_open+0x39c>)
   1a85e:	2194      	movs	r1, #148	; 0x94
   1a860:	0089      	lsls	r1, r1, #2
   1a862:	468c      	mov	ip, r1
   1a864:	44bc      	add	ip, r7
   1a866:	4462      	add	r2, ip
   1a868:	7812      	ldrb	r2, [r2, #0]
   1a86a:	211f      	movs	r1, #31
   1a86c:	400a      	ands	r2, r1
   1a86e:	701a      	strb	r2, [r3, #0]
	res = chk_mounted(&path, &dj.fs, (BYTE)(mode & ~FA_READ));
   1a870:	4bd6      	ldr	r3, [pc, #856]	; (1abcc <f_open+0x39c>)
   1a872:	2294      	movs	r2, #148	; 0x94
   1a874:	0092      	lsls	r2, r2, #2
   1a876:	4694      	mov	ip, r2
   1a878:	44bc      	add	ip, r7
   1a87a:	4463      	add	r3, ip
   1a87c:	781b      	ldrb	r3, [r3, #0]
   1a87e:	2201      	movs	r2, #1
   1a880:	4393      	bics	r3, r2
   1a882:	b2da      	uxtb	r2, r3
   1a884:	4bd2      	ldr	r3, [pc, #840]	; (1abd0 <f_open+0x3a0>)
   1a886:	18fc      	adds	r4, r7, r3
   1a888:	2387      	movs	r3, #135	; 0x87
   1a88a:	009b      	lsls	r3, r3, #2
   1a88c:	18f9      	adds	r1, r7, r3
   1a88e:	2308      	movs	r3, #8
   1a890:	18fb      	adds	r3, r7, r3
   1a892:	0018      	movs	r0, r3
   1a894:	4bcf      	ldr	r3, [pc, #828]	; (1abd4 <f_open+0x3a4>)
   1a896:	4798      	blx	r3
   1a898:	0003      	movs	r3, r0
   1a89a:	7023      	strb	r3, [r4, #0]
#else
	mode &= FA_READ;
	res = chk_mounted(&path, &dj.fs, 0);
#endif
	INIT_BUF(dj);
   1a89c:	2387      	movs	r3, #135	; 0x87
   1a89e:	009b      	lsls	r3, r3, #2
   1a8a0:	18fb      	adds	r3, r7, r3
   1a8a2:	2284      	movs	r2, #132	; 0x84
   1a8a4:	0092      	lsls	r2, r2, #2
   1a8a6:	18ba      	adds	r2, r7, r2
   1a8a8:	619a      	str	r2, [r3, #24]
   1a8aa:	2387      	movs	r3, #135	; 0x87
   1a8ac:	009b      	lsls	r3, r3, #2
   1a8ae:	18fb      	adds	r3, r7, r3
   1a8b0:	2210      	movs	r2, #16
   1a8b2:	18ba      	adds	r2, r7, r2
   1a8b4:	61da      	str	r2, [r3, #28]
	if (res == FR_OK)
   1a8b6:	4bc6      	ldr	r3, [pc, #792]	; (1abd0 <f_open+0x3a0>)
   1a8b8:	18fb      	adds	r3, r7, r3
   1a8ba:	781b      	ldrb	r3, [r3, #0]
   1a8bc:	2b00      	cmp	r3, #0
   1a8be:	d10b      	bne.n	1a8d8 <f_open+0xa8>
		res = follow_path(&dj, path);	/* Follow the file path */
   1a8c0:	68ba      	ldr	r2, [r7, #8]
   1a8c2:	4bc3      	ldr	r3, [pc, #780]	; (1abd0 <f_open+0x3a0>)
   1a8c4:	18fc      	adds	r4, r7, r3
   1a8c6:	2387      	movs	r3, #135	; 0x87
   1a8c8:	009b      	lsls	r3, r3, #2
   1a8ca:	18fb      	adds	r3, r7, r3
   1a8cc:	0011      	movs	r1, r2
   1a8ce:	0018      	movs	r0, r3
   1a8d0:	4bc1      	ldr	r3, [pc, #772]	; (1abd8 <f_open+0x3a8>)
   1a8d2:	4798      	blx	r3
   1a8d4:	0003      	movs	r3, r0
   1a8d6:	7023      	strb	r3, [r4, #0]
	dir = dj.dir;
   1a8d8:	2387      	movs	r3, #135	; 0x87
   1a8da:	009b      	lsls	r3, r3, #2
   1a8dc:	18fb      	adds	r3, r7, r3
   1a8de:	695b      	ldr	r3, [r3, #20]
   1a8e0:	2292      	movs	r2, #146	; 0x92
   1a8e2:	0092      	lsls	r2, r2, #2
   1a8e4:	18ba      	adds	r2, r7, r2
   1a8e6:	6013      	str	r3, [r2, #0]

#if !_FS_READONLY	/* R/W configuration */
	if (res == FR_OK) {
   1a8e8:	4bb9      	ldr	r3, [pc, #740]	; (1abd0 <f_open+0x3a0>)
   1a8ea:	18fb      	adds	r3, r7, r3
   1a8ec:	781b      	ldrb	r3, [r3, #0]
   1a8ee:	2b00      	cmp	r3, #0
   1a8f0:	d109      	bne.n	1a906 <f_open+0xd6>
		if (!dir)	/* Current dir itself */
   1a8f2:	2392      	movs	r3, #146	; 0x92
   1a8f4:	009b      	lsls	r3, r3, #2
   1a8f6:	18fb      	adds	r3, r7, r3
   1a8f8:	681b      	ldr	r3, [r3, #0]
   1a8fa:	2b00      	cmp	r3, #0
   1a8fc:	d103      	bne.n	1a906 <f_open+0xd6>
			res = FR_INVALID_NAME;
   1a8fe:	4bb4      	ldr	r3, [pc, #720]	; (1abd0 <f_open+0x3a0>)
   1a900:	18fb      	adds	r3, r7, r3
   1a902:	2206      	movs	r2, #6
   1a904:	701a      	strb	r2, [r3, #0]
		else
			res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
#endif
	}
	/* Create or Open a file */
	if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
   1a906:	4bb1      	ldr	r3, [pc, #708]	; (1abcc <f_open+0x39c>)
   1a908:	2294      	movs	r2, #148	; 0x94
   1a90a:	0092      	lsls	r2, r2, #2
   1a90c:	4694      	mov	ip, r2
   1a90e:	44bc      	add	ip, r7
   1a910:	4463      	add	r3, ip
   1a912:	781b      	ldrb	r3, [r3, #0]
   1a914:	221c      	movs	r2, #28
   1a916:	4013      	ands	r3, r2
   1a918:	d100      	bne.n	1a91c <f_open+0xec>
   1a91a:	e141      	b.n	1aba0 <f_open+0x370>
		DWORD dw, cl;

		if (res != FR_OK) {					/* No file, create new */
   1a91c:	4bac      	ldr	r3, [pc, #688]	; (1abd0 <f_open+0x3a0>)
   1a91e:	18fb      	adds	r3, r7, r3
   1a920:	781b      	ldrb	r3, [r3, #0]
   1a922:	2b00      	cmp	r3, #0
   1a924:	d027      	beq.n	1a976 <f_open+0x146>
			if (res == FR_NO_FILE)			/* There is no file to open, create a new entry */
   1a926:	4baa      	ldr	r3, [pc, #680]	; (1abd0 <f_open+0x3a0>)
   1a928:	18fb      	adds	r3, r7, r3
   1a92a:	781b      	ldrb	r3, [r3, #0]
   1a92c:	2b04      	cmp	r3, #4
   1a92e:	d109      	bne.n	1a944 <f_open+0x114>
#if _FS_SHARE
				res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
#else
				res = dir_register(&dj);
   1a930:	4ba7      	ldr	r3, [pc, #668]	; (1abd0 <f_open+0x3a0>)
   1a932:	18fc      	adds	r4, r7, r3
   1a934:	2387      	movs	r3, #135	; 0x87
   1a936:	009b      	lsls	r3, r3, #2
   1a938:	18fb      	adds	r3, r7, r3
   1a93a:	0018      	movs	r0, r3
   1a93c:	4ba7      	ldr	r3, [pc, #668]	; (1abdc <f_open+0x3ac>)
   1a93e:	4798      	blx	r3
   1a940:	0003      	movs	r3, r0
   1a942:	7023      	strb	r3, [r4, #0]
#endif
			mode |= FA_CREATE_ALWAYS;		/* File is created */
   1a944:	4ba1      	ldr	r3, [pc, #644]	; (1abcc <f_open+0x39c>)
   1a946:	2294      	movs	r2, #148	; 0x94
   1a948:	0092      	lsls	r2, r2, #2
   1a94a:	4694      	mov	ip, r2
   1a94c:	44bc      	add	ip, r7
   1a94e:	4463      	add	r3, ip
   1a950:	4a9e      	ldr	r2, [pc, #632]	; (1abcc <f_open+0x39c>)
   1a952:	2194      	movs	r1, #148	; 0x94
   1a954:	0089      	lsls	r1, r1, #2
   1a956:	468c      	mov	ip, r1
   1a958:	44bc      	add	ip, r7
   1a95a:	4462      	add	r2, ip
   1a95c:	7812      	ldrb	r2, [r2, #0]
   1a95e:	2108      	movs	r1, #8
   1a960:	430a      	orrs	r2, r1
   1a962:	701a      	strb	r2, [r3, #0]
			dir = dj.dir;					/* New entry */
   1a964:	2387      	movs	r3, #135	; 0x87
   1a966:	009b      	lsls	r3, r3, #2
   1a968:	18fb      	adds	r3, r7, r3
   1a96a:	695b      	ldr	r3, [r3, #20]
   1a96c:	2292      	movs	r2, #146	; 0x92
   1a96e:	0092      	lsls	r2, r2, #2
   1a970:	18ba      	adds	r2, r7, r2
   1a972:	6013      	str	r3, [r2, #0]
   1a974:	e01c      	b.n	1a9b0 <f_open+0x180>
		}
		else {								/* Any object is already existing */
			if (dir[DIR_Attr] & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
   1a976:	2392      	movs	r3, #146	; 0x92
   1a978:	009b      	lsls	r3, r3, #2
   1a97a:	18fb      	adds	r3, r7, r3
   1a97c:	681b      	ldr	r3, [r3, #0]
   1a97e:	330b      	adds	r3, #11
   1a980:	781b      	ldrb	r3, [r3, #0]
   1a982:	001a      	movs	r2, r3
   1a984:	2311      	movs	r3, #17
   1a986:	4013      	ands	r3, r2
   1a988:	d004      	beq.n	1a994 <f_open+0x164>
				res = FR_DENIED;
   1a98a:	4b91      	ldr	r3, [pc, #580]	; (1abd0 <f_open+0x3a0>)
   1a98c:	18fb      	adds	r3, r7, r3
   1a98e:	2207      	movs	r2, #7
   1a990:	701a      	strb	r2, [r3, #0]
   1a992:	e00d      	b.n	1a9b0 <f_open+0x180>
			} else {
				if (mode & FA_CREATE_NEW)	/* Cannot create as new file */
   1a994:	4b8d      	ldr	r3, [pc, #564]	; (1abcc <f_open+0x39c>)
   1a996:	2294      	movs	r2, #148	; 0x94
   1a998:	0092      	lsls	r2, r2, #2
   1a99a:	4694      	mov	ip, r2
   1a99c:	44bc      	add	ip, r7
   1a99e:	4463      	add	r3, ip
   1a9a0:	781b      	ldrb	r3, [r3, #0]
   1a9a2:	2204      	movs	r2, #4
   1a9a4:	4013      	ands	r3, r2
   1a9a6:	d003      	beq.n	1a9b0 <f_open+0x180>
					res = FR_EXIST;
   1a9a8:	4b89      	ldr	r3, [pc, #548]	; (1abd0 <f_open+0x3a0>)
   1a9aa:	18fb      	adds	r3, r7, r3
   1a9ac:	2208      	movs	r2, #8
   1a9ae:	701a      	strb	r2, [r3, #0]
			}
		}
		if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
   1a9b0:	4b87      	ldr	r3, [pc, #540]	; (1abd0 <f_open+0x3a0>)
   1a9b2:	18fb      	adds	r3, r7, r3
   1a9b4:	781b      	ldrb	r3, [r3, #0]
   1a9b6:	2b00      	cmp	r3, #0
   1a9b8:	d000      	beq.n	1a9bc <f_open+0x18c>
   1a9ba:	e12f      	b.n	1ac1c <f_open+0x3ec>
   1a9bc:	4b83      	ldr	r3, [pc, #524]	; (1abcc <f_open+0x39c>)
   1a9be:	2294      	movs	r2, #148	; 0x94
   1a9c0:	0092      	lsls	r2, r2, #2
   1a9c2:	4694      	mov	ip, r2
   1a9c4:	44bc      	add	ip, r7
   1a9c6:	4463      	add	r3, ip
   1a9c8:	781b      	ldrb	r3, [r3, #0]
   1a9ca:	2208      	movs	r2, #8
   1a9cc:	4013      	ands	r3, r2
   1a9ce:	d100      	bne.n	1a9d2 <f_open+0x1a2>
   1a9d0:	e124      	b.n	1ac1c <f_open+0x3ec>
			dw = get_fattime();					/* Created time */
   1a9d2:	4b83      	ldr	r3, [pc, #524]	; (1abe0 <f_open+0x3b0>)
   1a9d4:	4798      	blx	r3
   1a9d6:	0003      	movs	r3, r0
   1a9d8:	2291      	movs	r2, #145	; 0x91
   1a9da:	0092      	lsls	r2, r2, #2
   1a9dc:	18ba      	adds	r2, r7, r2
   1a9de:	6013      	str	r3, [r2, #0]
			ST_DWORD(dir+DIR_CrtTime, dw);
   1a9e0:	2392      	movs	r3, #146	; 0x92
   1a9e2:	009b      	lsls	r3, r3, #2
   1a9e4:	18fb      	adds	r3, r7, r3
   1a9e6:	681b      	ldr	r3, [r3, #0]
   1a9e8:	330e      	adds	r3, #14
   1a9ea:	2291      	movs	r2, #145	; 0x91
   1a9ec:	0092      	lsls	r2, r2, #2
   1a9ee:	18ba      	adds	r2, r7, r2
   1a9f0:	6812      	ldr	r2, [r2, #0]
   1a9f2:	b2d2      	uxtb	r2, r2
   1a9f4:	701a      	strb	r2, [r3, #0]
   1a9f6:	2392      	movs	r3, #146	; 0x92
   1a9f8:	009b      	lsls	r3, r3, #2
   1a9fa:	18fb      	adds	r3, r7, r3
   1a9fc:	681b      	ldr	r3, [r3, #0]
   1a9fe:	330f      	adds	r3, #15
   1aa00:	2291      	movs	r2, #145	; 0x91
   1aa02:	0092      	lsls	r2, r2, #2
   1aa04:	18ba      	adds	r2, r7, r2
   1aa06:	6812      	ldr	r2, [r2, #0]
   1aa08:	b292      	uxth	r2, r2
   1aa0a:	0a12      	lsrs	r2, r2, #8
   1aa0c:	b292      	uxth	r2, r2
   1aa0e:	b2d2      	uxtb	r2, r2
   1aa10:	701a      	strb	r2, [r3, #0]
   1aa12:	2392      	movs	r3, #146	; 0x92
   1aa14:	009b      	lsls	r3, r3, #2
   1aa16:	18fb      	adds	r3, r7, r3
   1aa18:	681b      	ldr	r3, [r3, #0]
   1aa1a:	3310      	adds	r3, #16
   1aa1c:	2291      	movs	r2, #145	; 0x91
   1aa1e:	0092      	lsls	r2, r2, #2
   1aa20:	18ba      	adds	r2, r7, r2
   1aa22:	6812      	ldr	r2, [r2, #0]
   1aa24:	0c12      	lsrs	r2, r2, #16
   1aa26:	b2d2      	uxtb	r2, r2
   1aa28:	701a      	strb	r2, [r3, #0]
   1aa2a:	2392      	movs	r3, #146	; 0x92
   1aa2c:	009b      	lsls	r3, r3, #2
   1aa2e:	18fb      	adds	r3, r7, r3
   1aa30:	681b      	ldr	r3, [r3, #0]
   1aa32:	3311      	adds	r3, #17
   1aa34:	2291      	movs	r2, #145	; 0x91
   1aa36:	0092      	lsls	r2, r2, #2
   1aa38:	18ba      	adds	r2, r7, r2
   1aa3a:	6812      	ldr	r2, [r2, #0]
   1aa3c:	0e12      	lsrs	r2, r2, #24
   1aa3e:	b2d2      	uxtb	r2, r2
   1aa40:	701a      	strb	r2, [r3, #0]
			dir[DIR_Attr] = 0;					/* Reset attribute */
   1aa42:	2392      	movs	r3, #146	; 0x92
   1aa44:	009b      	lsls	r3, r3, #2
   1aa46:	18fb      	adds	r3, r7, r3
   1aa48:	681b      	ldr	r3, [r3, #0]
   1aa4a:	330b      	adds	r3, #11
   1aa4c:	2200      	movs	r2, #0
   1aa4e:	701a      	strb	r2, [r3, #0]
			ST_DWORD(dir+DIR_FileSize, 0);		/* size = 0 */
   1aa50:	2392      	movs	r3, #146	; 0x92
   1aa52:	009b      	lsls	r3, r3, #2
   1aa54:	18fb      	adds	r3, r7, r3
   1aa56:	681b      	ldr	r3, [r3, #0]
   1aa58:	331c      	adds	r3, #28
   1aa5a:	2200      	movs	r2, #0
   1aa5c:	701a      	strb	r2, [r3, #0]
   1aa5e:	2392      	movs	r3, #146	; 0x92
   1aa60:	009b      	lsls	r3, r3, #2
   1aa62:	18fb      	adds	r3, r7, r3
   1aa64:	681b      	ldr	r3, [r3, #0]
   1aa66:	331d      	adds	r3, #29
   1aa68:	2200      	movs	r2, #0
   1aa6a:	701a      	strb	r2, [r3, #0]
   1aa6c:	2392      	movs	r3, #146	; 0x92
   1aa6e:	009b      	lsls	r3, r3, #2
   1aa70:	18fb      	adds	r3, r7, r3
   1aa72:	681b      	ldr	r3, [r3, #0]
   1aa74:	331e      	adds	r3, #30
   1aa76:	2200      	movs	r2, #0
   1aa78:	701a      	strb	r2, [r3, #0]
   1aa7a:	2392      	movs	r3, #146	; 0x92
   1aa7c:	009b      	lsls	r3, r3, #2
   1aa7e:	18fb      	adds	r3, r7, r3
   1aa80:	681b      	ldr	r3, [r3, #0]
   1aa82:	331f      	adds	r3, #31
   1aa84:	2200      	movs	r2, #0
   1aa86:	701a      	strb	r2, [r3, #0]
			cl = LD_CLUST(dir);					/* Get start cluster */
   1aa88:	2392      	movs	r3, #146	; 0x92
   1aa8a:	009b      	lsls	r3, r3, #2
   1aa8c:	18fb      	adds	r3, r7, r3
   1aa8e:	681b      	ldr	r3, [r3, #0]
   1aa90:	3315      	adds	r3, #21
   1aa92:	781b      	ldrb	r3, [r3, #0]
   1aa94:	021b      	lsls	r3, r3, #8
   1aa96:	b21a      	sxth	r2, r3
   1aa98:	2392      	movs	r3, #146	; 0x92
   1aa9a:	009b      	lsls	r3, r3, #2
   1aa9c:	18fb      	adds	r3, r7, r3
   1aa9e:	681b      	ldr	r3, [r3, #0]
   1aaa0:	3314      	adds	r3, #20
   1aaa2:	781b      	ldrb	r3, [r3, #0]
   1aaa4:	b21b      	sxth	r3, r3
   1aaa6:	4313      	orrs	r3, r2
   1aaa8:	b21b      	sxth	r3, r3
   1aaaa:	b29b      	uxth	r3, r3
   1aaac:	041b      	lsls	r3, r3, #16
   1aaae:	2292      	movs	r2, #146	; 0x92
   1aab0:	0092      	lsls	r2, r2, #2
   1aab2:	18ba      	adds	r2, r7, r2
   1aab4:	6812      	ldr	r2, [r2, #0]
   1aab6:	321b      	adds	r2, #27
   1aab8:	7812      	ldrb	r2, [r2, #0]
   1aaba:	0212      	lsls	r2, r2, #8
   1aabc:	b211      	sxth	r1, r2
   1aabe:	2292      	movs	r2, #146	; 0x92
   1aac0:	0092      	lsls	r2, r2, #2
   1aac2:	18ba      	adds	r2, r7, r2
   1aac4:	6812      	ldr	r2, [r2, #0]
   1aac6:	321a      	adds	r2, #26
   1aac8:	7812      	ldrb	r2, [r2, #0]
   1aaca:	b212      	sxth	r2, r2
   1aacc:	430a      	orrs	r2, r1
   1aace:	b212      	sxth	r2, r2
   1aad0:	b292      	uxth	r2, r2
   1aad2:	4313      	orrs	r3, r2
   1aad4:	2290      	movs	r2, #144	; 0x90
   1aad6:	0092      	lsls	r2, r2, #2
   1aad8:	18ba      	adds	r2, r7, r2
   1aada:	6013      	str	r3, [r2, #0]
			ST_CLUST(dir, 0);					/* cluster = 0 */
   1aadc:	2392      	movs	r3, #146	; 0x92
   1aade:	009b      	lsls	r3, r3, #2
   1aae0:	18fb      	adds	r3, r7, r3
   1aae2:	681b      	ldr	r3, [r3, #0]
   1aae4:	331a      	adds	r3, #26
   1aae6:	2200      	movs	r2, #0
   1aae8:	701a      	strb	r2, [r3, #0]
   1aaea:	2392      	movs	r3, #146	; 0x92
   1aaec:	009b      	lsls	r3, r3, #2
   1aaee:	18fb      	adds	r3, r7, r3
   1aaf0:	681b      	ldr	r3, [r3, #0]
   1aaf2:	331b      	adds	r3, #27
   1aaf4:	2200      	movs	r2, #0
   1aaf6:	701a      	strb	r2, [r3, #0]
   1aaf8:	2392      	movs	r3, #146	; 0x92
   1aafa:	009b      	lsls	r3, r3, #2
   1aafc:	18fb      	adds	r3, r7, r3
   1aafe:	681b      	ldr	r3, [r3, #0]
   1ab00:	3314      	adds	r3, #20
   1ab02:	2200      	movs	r2, #0
   1ab04:	701a      	strb	r2, [r3, #0]
   1ab06:	2392      	movs	r3, #146	; 0x92
   1ab08:	009b      	lsls	r3, r3, #2
   1ab0a:	18fb      	adds	r3, r7, r3
   1ab0c:	681b      	ldr	r3, [r3, #0]
   1ab0e:	3315      	adds	r3, #21
   1ab10:	2200      	movs	r2, #0
   1ab12:	701a      	strb	r2, [r3, #0]
			dj.fs->wflag = 1;
   1ab14:	2387      	movs	r3, #135	; 0x87
   1ab16:	009b      	lsls	r3, r3, #2
   1ab18:	18fb      	adds	r3, r7, r3
   1ab1a:	681b      	ldr	r3, [r3, #0]
   1ab1c:	2201      	movs	r2, #1
   1ab1e:	711a      	strb	r2, [r3, #4]
			if (cl) {							/* Remove the cluster chain if exist */
   1ab20:	2390      	movs	r3, #144	; 0x90
   1ab22:	009b      	lsls	r3, r3, #2
   1ab24:	18fb      	adds	r3, r7, r3
   1ab26:	681b      	ldr	r3, [r3, #0]
   1ab28:	2b00      	cmp	r3, #0
   1ab2a:	d100      	bne.n	1ab2e <f_open+0x2fe>
   1ab2c:	e076      	b.n	1ac1c <f_open+0x3ec>
				dw = dj.fs->winsect;
   1ab2e:	2387      	movs	r3, #135	; 0x87
   1ab30:	009b      	lsls	r3, r3, #2
   1ab32:	18fb      	adds	r3, r7, r3
   1ab34:	681b      	ldr	r3, [r3, #0]
   1ab36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   1ab38:	2291      	movs	r2, #145	; 0x91
   1ab3a:	0092      	lsls	r2, r2, #2
   1ab3c:	18ba      	adds	r2, r7, r2
   1ab3e:	6013      	str	r3, [r2, #0]
				res = remove_chain(dj.fs, cl);
   1ab40:	2387      	movs	r3, #135	; 0x87
   1ab42:	009b      	lsls	r3, r3, #2
   1ab44:	18fb      	adds	r3, r7, r3
   1ab46:	681b      	ldr	r3, [r3, #0]
   1ab48:	4a21      	ldr	r2, [pc, #132]	; (1abd0 <f_open+0x3a0>)
   1ab4a:	18bc      	adds	r4, r7, r2
   1ab4c:	2290      	movs	r2, #144	; 0x90
   1ab4e:	0092      	lsls	r2, r2, #2
   1ab50:	18ba      	adds	r2, r7, r2
   1ab52:	6812      	ldr	r2, [r2, #0]
   1ab54:	0011      	movs	r1, r2
   1ab56:	0018      	movs	r0, r3
   1ab58:	4b22      	ldr	r3, [pc, #136]	; (1abe4 <f_open+0x3b4>)
   1ab5a:	4798      	blx	r3
   1ab5c:	0003      	movs	r3, r0
   1ab5e:	7023      	strb	r3, [r4, #0]
				if (res == FR_OK) {
   1ab60:	4b1b      	ldr	r3, [pc, #108]	; (1abd0 <f_open+0x3a0>)
   1ab62:	18fb      	adds	r3, r7, r3
   1ab64:	781b      	ldrb	r3, [r3, #0]
   1ab66:	2b00      	cmp	r3, #0
   1ab68:	d158      	bne.n	1ac1c <f_open+0x3ec>
					dj.fs->last_clust = cl - 1;	/* Reuse the cluster hole */
   1ab6a:	2387      	movs	r3, #135	; 0x87
   1ab6c:	009b      	lsls	r3, r3, #2
   1ab6e:	18fb      	adds	r3, r7, r3
   1ab70:	681b      	ldr	r3, [r3, #0]
   1ab72:	2290      	movs	r2, #144	; 0x90
   1ab74:	0092      	lsls	r2, r2, #2
   1ab76:	18ba      	adds	r2, r7, r2
   1ab78:	6812      	ldr	r2, [r2, #0]
   1ab7a:	3a01      	subs	r2, #1
   1ab7c:	60da      	str	r2, [r3, #12]
					res = move_window(dj.fs, dw);
   1ab7e:	2387      	movs	r3, #135	; 0x87
   1ab80:	009b      	lsls	r3, r3, #2
   1ab82:	18fb      	adds	r3, r7, r3
   1ab84:	681b      	ldr	r3, [r3, #0]
   1ab86:	4a12      	ldr	r2, [pc, #72]	; (1abd0 <f_open+0x3a0>)
   1ab88:	18bc      	adds	r4, r7, r2
   1ab8a:	2291      	movs	r2, #145	; 0x91
   1ab8c:	0092      	lsls	r2, r2, #2
   1ab8e:	18ba      	adds	r2, r7, r2
   1ab90:	6812      	ldr	r2, [r2, #0]
   1ab92:	0011      	movs	r1, r2
   1ab94:	0018      	movs	r0, r3
   1ab96:	4b14      	ldr	r3, [pc, #80]	; (1abe8 <f_open+0x3b8>)
   1ab98:	4798      	blx	r3
   1ab9a:	0003      	movs	r3, r0
   1ab9c:	7023      	strb	r3, [r4, #0]
   1ab9e:	e03d      	b.n	1ac1c <f_open+0x3ec>
				}
			}
		}
	}
	else {	/* Open an existing file */
		if (res == FR_OK) {						/* Follow succeeded */
   1aba0:	4b0b      	ldr	r3, [pc, #44]	; (1abd0 <f_open+0x3a0>)
   1aba2:	18fb      	adds	r3, r7, r3
   1aba4:	781b      	ldrb	r3, [r3, #0]
   1aba6:	2b00      	cmp	r3, #0
   1aba8:	d138      	bne.n	1ac1c <f_open+0x3ec>
			if (dir[DIR_Attr] & AM_DIR) {		/* It is a directory */
   1abaa:	2392      	movs	r3, #146	; 0x92
   1abac:	009b      	lsls	r3, r3, #2
   1abae:	18fb      	adds	r3, r7, r3
   1abb0:	681b      	ldr	r3, [r3, #0]
   1abb2:	330b      	adds	r3, #11
   1abb4:	781b      	ldrb	r3, [r3, #0]
   1abb6:	001a      	movs	r2, r3
   1abb8:	2310      	movs	r3, #16
   1abba:	4013      	ands	r3, r2
   1abbc:	d016      	beq.n	1abec <f_open+0x3bc>
				res = FR_NO_FILE;
   1abbe:	4b04      	ldr	r3, [pc, #16]	; (1abd0 <f_open+0x3a0>)
   1abc0:	18fb      	adds	r3, r7, r3
   1abc2:	2204      	movs	r2, #4
   1abc4:	701a      	strb	r2, [r3, #0]
   1abc6:	e029      	b.n	1ac1c <f_open+0x3ec>
   1abc8:	fffffdac 	.word	0xfffffdac
   1abcc:	fffffdb7 	.word	0xfffffdb7
   1abd0:	0000024f 	.word	0x0000024f
   1abd4:	0001a189 	.word	0x0001a189
   1abd8:	00019f7d 	.word	0x00019f7d
   1abdc:	000197cd 	.word	0x000197cd
   1abe0:	000185c5 	.word	0x000185c5
   1abe4:	00018d49 	.word	0x00018d49
   1abe8:	00018709 	.word	0x00018709
			} else {
				if ((mode & FA_WRITE) && (dir[DIR_Attr] & AM_RDO)) /* R/O violation */
   1abec:	4b5a      	ldr	r3, [pc, #360]	; (1ad58 <f_open+0x528>)
   1abee:	2294      	movs	r2, #148	; 0x94
   1abf0:	0092      	lsls	r2, r2, #2
   1abf2:	4694      	mov	ip, r2
   1abf4:	44bc      	add	ip, r7
   1abf6:	4463      	add	r3, ip
   1abf8:	781b      	ldrb	r3, [r3, #0]
   1abfa:	2202      	movs	r2, #2
   1abfc:	4013      	ands	r3, r2
   1abfe:	d00d      	beq.n	1ac1c <f_open+0x3ec>
   1ac00:	2392      	movs	r3, #146	; 0x92
   1ac02:	009b      	lsls	r3, r3, #2
   1ac04:	18fb      	adds	r3, r7, r3
   1ac06:	681b      	ldr	r3, [r3, #0]
   1ac08:	330b      	adds	r3, #11
   1ac0a:	781b      	ldrb	r3, [r3, #0]
   1ac0c:	001a      	movs	r2, r3
   1ac0e:	2301      	movs	r3, #1
   1ac10:	4013      	ands	r3, r2
   1ac12:	d003      	beq.n	1ac1c <f_open+0x3ec>
					res = FR_DENIED;
   1ac14:	4b51      	ldr	r3, [pc, #324]	; (1ad5c <f_open+0x52c>)
   1ac16:	18fb      	adds	r3, r7, r3
   1ac18:	2207      	movs	r2, #7
   1ac1a:	701a      	strb	r2, [r3, #0]
			}
		}
	}
	if (res == FR_OK) {
   1ac1c:	4b4f      	ldr	r3, [pc, #316]	; (1ad5c <f_open+0x52c>)
   1ac1e:	18fb      	adds	r3, r7, r3
   1ac20:	781b      	ldrb	r3, [r3, #0]
   1ac22:	2b00      	cmp	r3, #0
   1ac24:	d126      	bne.n	1ac74 <f_open+0x444>
		if (mode & FA_CREATE_ALWAYS)			/* Set file change flag if created or overwritten */
   1ac26:	4b4c      	ldr	r3, [pc, #304]	; (1ad58 <f_open+0x528>)
   1ac28:	2294      	movs	r2, #148	; 0x94
   1ac2a:	0092      	lsls	r2, r2, #2
   1ac2c:	4694      	mov	ip, r2
   1ac2e:	44bc      	add	ip, r7
   1ac30:	4463      	add	r3, ip
   1ac32:	781b      	ldrb	r3, [r3, #0]
   1ac34:	2208      	movs	r2, #8
   1ac36:	4013      	ands	r3, r2
   1ac38:	d00f      	beq.n	1ac5a <f_open+0x42a>
			mode |= FA__WRITTEN;
   1ac3a:	4b47      	ldr	r3, [pc, #284]	; (1ad58 <f_open+0x528>)
   1ac3c:	2294      	movs	r2, #148	; 0x94
   1ac3e:	0092      	lsls	r2, r2, #2
   1ac40:	4694      	mov	ip, r2
   1ac42:	44bc      	add	ip, r7
   1ac44:	4463      	add	r3, ip
   1ac46:	4a44      	ldr	r2, [pc, #272]	; (1ad58 <f_open+0x528>)
   1ac48:	2194      	movs	r1, #148	; 0x94
   1ac4a:	0089      	lsls	r1, r1, #2
   1ac4c:	468c      	mov	ip, r1
   1ac4e:	44bc      	add	ip, r7
   1ac50:	4462      	add	r2, ip
   1ac52:	7812      	ldrb	r2, [r2, #0]
   1ac54:	2120      	movs	r1, #32
   1ac56:	430a      	orrs	r2, r1
   1ac58:	701a      	strb	r2, [r3, #0]
		fp->dir_sect = dj.fs->winsect;			/* Pointer to the directory entry */
   1ac5a:	2387      	movs	r3, #135	; 0x87
   1ac5c:	009b      	lsls	r3, r3, #2
   1ac5e:	18fb      	adds	r3, r7, r3
   1ac60:	681b      	ldr	r3, [r3, #0]
   1ac62:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1ac64:	68fb      	ldr	r3, [r7, #12]
   1ac66:	61da      	str	r2, [r3, #28]
		fp->dir_ptr = dir;
   1ac68:	68fb      	ldr	r3, [r7, #12]
   1ac6a:	2292      	movs	r2, #146	; 0x92
   1ac6c:	0092      	lsls	r2, r2, #2
   1ac6e:	18ba      	adds	r2, r7, r2
   1ac70:	6812      	ldr	r2, [r2, #0]
   1ac72:	621a      	str	r2, [r3, #32]
		}
	}
#endif
	FREE_BUF();

	if (res == FR_OK) {
   1ac74:	4b39      	ldr	r3, [pc, #228]	; (1ad5c <f_open+0x52c>)
   1ac76:	18fb      	adds	r3, r7, r3
   1ac78:	781b      	ldrb	r3, [r3, #0]
   1ac7a:	2b00      	cmp	r3, #0
   1ac7c:	d163      	bne.n	1ad46 <f_open+0x516>
		fp->flag = mode;					/* File access mode */
   1ac7e:	68fb      	ldr	r3, [r7, #12]
   1ac80:	4a35      	ldr	r2, [pc, #212]	; (1ad58 <f_open+0x528>)
   1ac82:	2194      	movs	r1, #148	; 0x94
   1ac84:	0089      	lsls	r1, r1, #2
   1ac86:	468c      	mov	ip, r1
   1ac88:	44bc      	add	ip, r7
   1ac8a:	4462      	add	r2, ip
   1ac8c:	7812      	ldrb	r2, [r2, #0]
   1ac8e:	719a      	strb	r2, [r3, #6]
		fp->sclust = LD_CLUST(dir);			/* File start cluster */
   1ac90:	2392      	movs	r3, #146	; 0x92
   1ac92:	009b      	lsls	r3, r3, #2
   1ac94:	18fb      	adds	r3, r7, r3
   1ac96:	681b      	ldr	r3, [r3, #0]
   1ac98:	3315      	adds	r3, #21
   1ac9a:	781b      	ldrb	r3, [r3, #0]
   1ac9c:	021b      	lsls	r3, r3, #8
   1ac9e:	b21a      	sxth	r2, r3
   1aca0:	2392      	movs	r3, #146	; 0x92
   1aca2:	009b      	lsls	r3, r3, #2
   1aca4:	18fb      	adds	r3, r7, r3
   1aca6:	681b      	ldr	r3, [r3, #0]
   1aca8:	3314      	adds	r3, #20
   1acaa:	781b      	ldrb	r3, [r3, #0]
   1acac:	b21b      	sxth	r3, r3
   1acae:	4313      	orrs	r3, r2
   1acb0:	b21b      	sxth	r3, r3
   1acb2:	b29b      	uxth	r3, r3
   1acb4:	041b      	lsls	r3, r3, #16
   1acb6:	2292      	movs	r2, #146	; 0x92
   1acb8:	0092      	lsls	r2, r2, #2
   1acba:	18ba      	adds	r2, r7, r2
   1acbc:	6812      	ldr	r2, [r2, #0]
   1acbe:	321b      	adds	r2, #27
   1acc0:	7812      	ldrb	r2, [r2, #0]
   1acc2:	0212      	lsls	r2, r2, #8
   1acc4:	b211      	sxth	r1, r2
   1acc6:	2292      	movs	r2, #146	; 0x92
   1acc8:	0092      	lsls	r2, r2, #2
   1acca:	18ba      	adds	r2, r7, r2
   1accc:	6812      	ldr	r2, [r2, #0]
   1acce:	321a      	adds	r2, #26
   1acd0:	7812      	ldrb	r2, [r2, #0]
   1acd2:	b212      	sxth	r2, r2
   1acd4:	430a      	orrs	r2, r1
   1acd6:	b212      	sxth	r2, r2
   1acd8:	b292      	uxth	r2, r2
   1acda:	431a      	orrs	r2, r3
   1acdc:	68fb      	ldr	r3, [r7, #12]
   1acde:	611a      	str	r2, [r3, #16]
		fp->fsize = LD_DWORD(dir+DIR_FileSize);	/* File size */
   1ace0:	2392      	movs	r3, #146	; 0x92
   1ace2:	009b      	lsls	r3, r3, #2
   1ace4:	18fb      	adds	r3, r7, r3
   1ace6:	681b      	ldr	r3, [r3, #0]
   1ace8:	331f      	adds	r3, #31
   1acea:	781b      	ldrb	r3, [r3, #0]
   1acec:	061a      	lsls	r2, r3, #24
   1acee:	2392      	movs	r3, #146	; 0x92
   1acf0:	009b      	lsls	r3, r3, #2
   1acf2:	18fb      	adds	r3, r7, r3
   1acf4:	681b      	ldr	r3, [r3, #0]
   1acf6:	331e      	adds	r3, #30
   1acf8:	781b      	ldrb	r3, [r3, #0]
   1acfa:	041b      	lsls	r3, r3, #16
   1acfc:	4313      	orrs	r3, r2
   1acfe:	2292      	movs	r2, #146	; 0x92
   1ad00:	0092      	lsls	r2, r2, #2
   1ad02:	18ba      	adds	r2, r7, r2
   1ad04:	6812      	ldr	r2, [r2, #0]
   1ad06:	321d      	adds	r2, #29
   1ad08:	7812      	ldrb	r2, [r2, #0]
   1ad0a:	0212      	lsls	r2, r2, #8
   1ad0c:	4313      	orrs	r3, r2
   1ad0e:	2292      	movs	r2, #146	; 0x92
   1ad10:	0092      	lsls	r2, r2, #2
   1ad12:	18ba      	adds	r2, r7, r2
   1ad14:	6812      	ldr	r2, [r2, #0]
   1ad16:	321c      	adds	r2, #28
   1ad18:	7812      	ldrb	r2, [r2, #0]
   1ad1a:	431a      	orrs	r2, r3
   1ad1c:	68fb      	ldr	r3, [r7, #12]
   1ad1e:	60da      	str	r2, [r3, #12]
		fp->fptr = 0;						/* File pointer */
   1ad20:	68fb      	ldr	r3, [r7, #12]
   1ad22:	2200      	movs	r2, #0
   1ad24:	609a      	str	r2, [r3, #8]
		fp->dsect = 0;
   1ad26:	68fb      	ldr	r3, [r7, #12]
   1ad28:	2200      	movs	r2, #0
   1ad2a:	619a      	str	r2, [r3, #24]
#if _USE_FASTSEEK
		fp->cltbl = 0;						/* Normal seek mode */
#endif
		fp->fs = dj.fs; fp->id = dj.fs->id;	/* Validate file object */
   1ad2c:	2387      	movs	r3, #135	; 0x87
   1ad2e:	009b      	lsls	r3, r3, #2
   1ad30:	18fb      	adds	r3, r7, r3
   1ad32:	681a      	ldr	r2, [r3, #0]
   1ad34:	68fb      	ldr	r3, [r7, #12]
   1ad36:	601a      	str	r2, [r3, #0]
   1ad38:	2387      	movs	r3, #135	; 0x87
   1ad3a:	009b      	lsls	r3, r3, #2
   1ad3c:	18fb      	adds	r3, r7, r3
   1ad3e:	681b      	ldr	r3, [r3, #0]
   1ad40:	88da      	ldrh	r2, [r3, #6]
   1ad42:	68fb      	ldr	r3, [r7, #12]
   1ad44:	809a      	strh	r2, [r3, #4]
	}

	LEAVE_FF(dj.fs, res);
   1ad46:	4b05      	ldr	r3, [pc, #20]	; (1ad5c <f_open+0x52c>)
   1ad48:	18fb      	adds	r3, r7, r3
   1ad4a:	781b      	ldrb	r3, [r3, #0]
}
   1ad4c:	0018      	movs	r0, r3
   1ad4e:	46bd      	mov	sp, r7
   1ad50:	2395      	movs	r3, #149	; 0x95
   1ad52:	009b      	lsls	r3, r3, #2
   1ad54:	449d      	add	sp, r3
   1ad56:	bd90      	pop	{r4, r7, pc}
   1ad58:	fffffdb7 	.word	0xfffffdb7
   1ad5c:	0000024f 	.word	0x0000024f

0001ad60 <f_write>:
	FIL *fp,			/* Pointer to the file object */
	const void *buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT *bw			/* Pointer to number of bytes written */
)
{
   1ad60:	b590      	push	{r4, r7, lr}
   1ad62:	b08b      	sub	sp, #44	; 0x2c
   1ad64:	af00      	add	r7, sp, #0
   1ad66:	60f8      	str	r0, [r7, #12]
   1ad68:	60b9      	str	r1, [r7, #8]
   1ad6a:	607a      	str	r2, [r7, #4]
   1ad6c:	603b      	str	r3, [r7, #0]
	FRESULT res;
	DWORD clst, sect;
	UINT wcnt, cc;
	const BYTE *wbuff = buff;
   1ad6e:	68bb      	ldr	r3, [r7, #8]
   1ad70:	61bb      	str	r3, [r7, #24]
	BYTE csect;


	*bw = 0;	/* Initialize byte counter */
   1ad72:	683b      	ldr	r3, [r7, #0]
   1ad74:	2200      	movs	r2, #0
   1ad76:	601a      	str	r2, [r3, #0]

	res = validate(fp->fs, fp->id);			/* Check validity */
   1ad78:	68fb      	ldr	r3, [r7, #12]
   1ad7a:	681a      	ldr	r2, [r3, #0]
   1ad7c:	68fb      	ldr	r3, [r7, #12]
   1ad7e:	889b      	ldrh	r3, [r3, #4]
   1ad80:	2117      	movs	r1, #23
   1ad82:	187c      	adds	r4, r7, r1
   1ad84:	0019      	movs	r1, r3
   1ad86:	0010      	movs	r0, r2
   1ad88:	4bc3      	ldr	r3, [pc, #780]	; (1b098 <f_write+0x338>)
   1ad8a:	4798      	blx	r3
   1ad8c:	0003      	movs	r3, r0
   1ad8e:	7023      	strb	r3, [r4, #0]
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
   1ad90:	2317      	movs	r3, #23
   1ad92:	18fb      	adds	r3, r7, r3
   1ad94:	781b      	ldrb	r3, [r3, #0]
   1ad96:	2b00      	cmp	r3, #0
   1ad98:	d003      	beq.n	1ada2 <f_write+0x42>
   1ad9a:	2317      	movs	r3, #23
   1ad9c:	18fb      	adds	r3, r7, r3
   1ad9e:	781b      	ldrb	r3, [r3, #0]
   1ada0:	e176      	b.n	1b090 <f_write+0x330>
	if (fp->flag & FA__ERROR)				/* Aborted file? */
   1ada2:	68fb      	ldr	r3, [r7, #12]
   1ada4:	799b      	ldrb	r3, [r3, #6]
   1ada6:	b25b      	sxtb	r3, r3
   1ada8:	2b00      	cmp	r3, #0
   1adaa:	da01      	bge.n	1adb0 <f_write+0x50>
		LEAVE_FF(fp->fs, FR_INT_ERR);
   1adac:	2302      	movs	r3, #2
   1adae:	e16f      	b.n	1b090 <f_write+0x330>
	if (!(fp->flag & FA_WRITE))				/* Check access mode */
   1adb0:	68fb      	ldr	r3, [r7, #12]
   1adb2:	799b      	ldrb	r3, [r3, #6]
   1adb4:	001a      	movs	r2, r3
   1adb6:	2302      	movs	r3, #2
   1adb8:	4013      	ands	r3, r2
   1adba:	d101      	bne.n	1adc0 <f_write+0x60>
		LEAVE_FF(fp->fs, FR_DENIED);
   1adbc:	2307      	movs	r3, #7
   1adbe:	e167      	b.n	1b090 <f_write+0x330>
	if ((DWORD)(fp->fsize + btw) < fp->fsize) btw = 0;	/* File size cannot reach 4GB */
   1adc0:	68fb      	ldr	r3, [r7, #12]
   1adc2:	68da      	ldr	r2, [r3, #12]
   1adc4:	687b      	ldr	r3, [r7, #4]
   1adc6:	18d2      	adds	r2, r2, r3
   1adc8:	68fb      	ldr	r3, [r7, #12]
   1adca:	68db      	ldr	r3, [r3, #12]
   1adcc:	429a      	cmp	r2, r3
   1adce:	d300      	bcc.n	1add2 <f_write+0x72>
   1add0:	e146      	b.n	1b060 <f_write+0x300>
   1add2:	2300      	movs	r3, #0
   1add4:	607b      	str	r3, [r7, #4]

	for ( ;  btw;							/* Repeat until all data written */
   1add6:	e143      	b.n	1b060 <f_write+0x300>
		wbuff += wcnt, fp->fptr += wcnt, *bw += wcnt, btw -= wcnt) {
		if ((fp->fptr % SS(fp->fs)) == 0) {	/* On the sector boundary? */
   1add8:	68fb      	ldr	r3, [r7, #12]
   1adda:	689b      	ldr	r3, [r3, #8]
   1addc:	05db      	lsls	r3, r3, #23
   1adde:	0ddb      	lsrs	r3, r3, #23
   1ade0:	d000      	beq.n	1ade4 <f_write+0x84>
   1ade2:	e0f6      	b.n	1afd2 <f_write+0x272>
			csect = (BYTE)(fp->fptr / SS(fp->fs) & (fp->fs->csize - 1));	/* Sector offset in the cluster */
   1ade4:	68fb      	ldr	r3, [r7, #12]
   1ade6:	689b      	ldr	r3, [r3, #8]
   1ade8:	0a5b      	lsrs	r3, r3, #9
   1adea:	b2da      	uxtb	r2, r3
   1adec:	68fb      	ldr	r3, [r7, #12]
   1adee:	681b      	ldr	r3, [r3, #0]
   1adf0:	789b      	ldrb	r3, [r3, #2]
   1adf2:	3b01      	subs	r3, #1
   1adf4:	b2d9      	uxtb	r1, r3
   1adf6:	2316      	movs	r3, #22
   1adf8:	18fb      	adds	r3, r7, r3
   1adfa:	400a      	ands	r2, r1
   1adfc:	701a      	strb	r2, [r3, #0]
			if (!csect) {					/* On the cluster boundary? */
   1adfe:	2316      	movs	r3, #22
   1ae00:	18fb      	adds	r3, r7, r3
   1ae02:	781b      	ldrb	r3, [r3, #0]
   1ae04:	2b00      	cmp	r3, #0
   1ae06:	d140      	bne.n	1ae8a <f_write+0x12a>
				if (fp->fptr == 0) {		/* On the top of the file? */
   1ae08:	68fb      	ldr	r3, [r7, #12]
   1ae0a:	689b      	ldr	r3, [r3, #8]
   1ae0c:	2b00      	cmp	r3, #0
   1ae0e:	d111      	bne.n	1ae34 <f_write+0xd4>
					clst = fp->sclust;		/* Follow from the origin */
   1ae10:	68fb      	ldr	r3, [r7, #12]
   1ae12:	691b      	ldr	r3, [r3, #16]
   1ae14:	627b      	str	r3, [r7, #36]	; 0x24
					if (clst == 0)			/* When no cluster is allocated, */
   1ae16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1ae18:	2b00      	cmp	r3, #0
   1ae1a:	d115      	bne.n	1ae48 <f_write+0xe8>
						fp->sclust = clst = create_chain(fp->fs, 0);	/* Create a new cluster chain */
   1ae1c:	68fb      	ldr	r3, [r7, #12]
   1ae1e:	681b      	ldr	r3, [r3, #0]
   1ae20:	2100      	movs	r1, #0
   1ae22:	0018      	movs	r0, r3
   1ae24:	4b9d      	ldr	r3, [pc, #628]	; (1b09c <f_write+0x33c>)
   1ae26:	4798      	blx	r3
   1ae28:	0003      	movs	r3, r0
   1ae2a:	627b      	str	r3, [r7, #36]	; 0x24
   1ae2c:	68fb      	ldr	r3, [r7, #12]
   1ae2e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   1ae30:	611a      	str	r2, [r3, #16]
   1ae32:	e009      	b.n	1ae48 <f_write+0xe8>
#if _USE_FASTSEEK
					if (fp->cltbl)
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
					else
#endif
						clst = create_chain(fp->fs, fp->clust);	/* Follow or stretch cluster chain on the FAT */
   1ae34:	68fb      	ldr	r3, [r7, #12]
   1ae36:	681a      	ldr	r2, [r3, #0]
   1ae38:	68fb      	ldr	r3, [r7, #12]
   1ae3a:	695b      	ldr	r3, [r3, #20]
   1ae3c:	0019      	movs	r1, r3
   1ae3e:	0010      	movs	r0, r2
   1ae40:	4b96      	ldr	r3, [pc, #600]	; (1b09c <f_write+0x33c>)
   1ae42:	4798      	blx	r3
   1ae44:	0003      	movs	r3, r0
   1ae46:	627b      	str	r3, [r7, #36]	; 0x24
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
   1ae48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1ae4a:	2b00      	cmp	r3, #0
   1ae4c:	d100      	bne.n	1ae50 <f_write+0xf0>
   1ae4e:	e10c      	b.n	1b06a <f_write+0x30a>
				if (clst == 1) ABORT(fp->fs, FR_INT_ERR);
   1ae50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1ae52:	2b01      	cmp	r3, #1
   1ae54:	d109      	bne.n	1ae6a <f_write+0x10a>
   1ae56:	68fb      	ldr	r3, [r7, #12]
   1ae58:	799b      	ldrb	r3, [r3, #6]
   1ae5a:	2280      	movs	r2, #128	; 0x80
   1ae5c:	4252      	negs	r2, r2
   1ae5e:	4313      	orrs	r3, r2
   1ae60:	b2da      	uxtb	r2, r3
   1ae62:	68fb      	ldr	r3, [r7, #12]
   1ae64:	719a      	strb	r2, [r3, #6]
   1ae66:	2302      	movs	r3, #2
   1ae68:	e112      	b.n	1b090 <f_write+0x330>
				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
   1ae6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1ae6c:	3301      	adds	r3, #1
   1ae6e:	d109      	bne.n	1ae84 <f_write+0x124>
   1ae70:	68fb      	ldr	r3, [r7, #12]
   1ae72:	799b      	ldrb	r3, [r3, #6]
   1ae74:	2280      	movs	r2, #128	; 0x80
   1ae76:	4252      	negs	r2, r2
   1ae78:	4313      	orrs	r3, r2
   1ae7a:	b2da      	uxtb	r2, r3
   1ae7c:	68fb      	ldr	r3, [r7, #12]
   1ae7e:	719a      	strb	r2, [r3, #6]
   1ae80:	2301      	movs	r3, #1
   1ae82:	e105      	b.n	1b090 <f_write+0x330>
				fp->clust = clst;			/* Update current cluster */
   1ae84:	68fb      	ldr	r3, [r7, #12]
   1ae86:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   1ae88:	615a      	str	r2, [r3, #20]
			}
#if _FS_TINY
			if (fp->fs->winsect == fp->dsect && move_window(fp->fs, 0))	/* Write-back sector cache */
   1ae8a:	68fb      	ldr	r3, [r7, #12]
   1ae8c:	681b      	ldr	r3, [r3, #0]
   1ae8e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1ae90:	68fb      	ldr	r3, [r7, #12]
   1ae92:	699b      	ldr	r3, [r3, #24]
   1ae94:	429a      	cmp	r2, r3
   1ae96:	d111      	bne.n	1aebc <f_write+0x15c>
   1ae98:	68fb      	ldr	r3, [r7, #12]
   1ae9a:	681b      	ldr	r3, [r3, #0]
   1ae9c:	2100      	movs	r1, #0
   1ae9e:	0018      	movs	r0, r3
   1aea0:	4b7f      	ldr	r3, [pc, #508]	; (1b0a0 <f_write+0x340>)
   1aea2:	4798      	blx	r3
   1aea4:	1e03      	subs	r3, r0, #0
   1aea6:	d009      	beq.n	1aebc <f_write+0x15c>
				ABORT(fp->fs, FR_DISK_ERR);
   1aea8:	68fb      	ldr	r3, [r7, #12]
   1aeaa:	799b      	ldrb	r3, [r3, #6]
   1aeac:	2280      	movs	r2, #128	; 0x80
   1aeae:	4252      	negs	r2, r2
   1aeb0:	4313      	orrs	r3, r2
   1aeb2:	b2da      	uxtb	r2, r3
   1aeb4:	68fb      	ldr	r3, [r7, #12]
   1aeb6:	719a      	strb	r2, [r3, #6]
   1aeb8:	2301      	movs	r3, #1
   1aeba:	e0e9      	b.n	1b090 <f_write+0x330>
				if (disk_write(fp->fs->drv, fp->buf, fp->dsect, 1) != RES_OK)
					ABORT(fp->fs, FR_DISK_ERR);
				fp->flag &= ~FA__DIRTY;
			}
#endif
			sect = clust2sect(fp->fs, fp->clust);	/* Get current sector */
   1aebc:	68fb      	ldr	r3, [r7, #12]
   1aebe:	681a      	ldr	r2, [r3, #0]
   1aec0:	68fb      	ldr	r3, [r7, #12]
   1aec2:	695b      	ldr	r3, [r3, #20]
   1aec4:	0019      	movs	r1, r3
   1aec6:	0010      	movs	r0, r2
   1aec8:	4b76      	ldr	r3, [pc, #472]	; (1b0a4 <f_write+0x344>)
   1aeca:	4798      	blx	r3
   1aecc:	0003      	movs	r3, r0
   1aece:	613b      	str	r3, [r7, #16]
			if (!sect) ABORT(fp->fs, FR_INT_ERR);
   1aed0:	693b      	ldr	r3, [r7, #16]
   1aed2:	2b00      	cmp	r3, #0
   1aed4:	d109      	bne.n	1aeea <f_write+0x18a>
   1aed6:	68fb      	ldr	r3, [r7, #12]
   1aed8:	799b      	ldrb	r3, [r3, #6]
   1aeda:	2280      	movs	r2, #128	; 0x80
   1aedc:	4252      	negs	r2, r2
   1aede:	4313      	orrs	r3, r2
   1aee0:	b2da      	uxtb	r2, r3
   1aee2:	68fb      	ldr	r3, [r7, #12]
   1aee4:	719a      	strb	r2, [r3, #6]
   1aee6:	2302      	movs	r3, #2
   1aee8:	e0d2      	b.n	1b090 <f_write+0x330>
			sect += csect;
   1aeea:	2316      	movs	r3, #22
   1aeec:	18fb      	adds	r3, r7, r3
   1aeee:	781b      	ldrb	r3, [r3, #0]
   1aef0:	693a      	ldr	r2, [r7, #16]
   1aef2:	18d3      	adds	r3, r2, r3
   1aef4:	613b      	str	r3, [r7, #16]
			cc = btw / SS(fp->fs);			/* When remaining bytes >= sector size, */
   1aef6:	687b      	ldr	r3, [r7, #4]
   1aef8:	0a5b      	lsrs	r3, r3, #9
   1aefa:	61fb      	str	r3, [r7, #28]
			if (cc) {						/* Write maximum contiguous sectors directly */
   1aefc:	69fb      	ldr	r3, [r7, #28]
   1aefe:	2b00      	cmp	r3, #0
   1af00:	d048      	beq.n	1af94 <f_write+0x234>
				if (csect + cc > fp->fs->csize)	/* Clip at cluster boundary */
   1af02:	2316      	movs	r3, #22
   1af04:	18fb      	adds	r3, r7, r3
   1af06:	781a      	ldrb	r2, [r3, #0]
   1af08:	69fb      	ldr	r3, [r7, #28]
   1af0a:	18d2      	adds	r2, r2, r3
   1af0c:	68fb      	ldr	r3, [r7, #12]
   1af0e:	681b      	ldr	r3, [r3, #0]
   1af10:	789b      	ldrb	r3, [r3, #2]
   1af12:	429a      	cmp	r2, r3
   1af14:	d908      	bls.n	1af28 <f_write+0x1c8>
					cc = fp->fs->csize - csect;
   1af16:	68fb      	ldr	r3, [r7, #12]
   1af18:	681b      	ldr	r3, [r3, #0]
   1af1a:	789b      	ldrb	r3, [r3, #2]
   1af1c:	001a      	movs	r2, r3
   1af1e:	2316      	movs	r3, #22
   1af20:	18fb      	adds	r3, r7, r3
   1af22:	781b      	ldrb	r3, [r3, #0]
   1af24:	1ad3      	subs	r3, r2, r3
   1af26:	61fb      	str	r3, [r7, #28]
				if (disk_write(fp->fs->drv, wbuff, sect, (BYTE)cc) != RES_OK)
   1af28:	68fb      	ldr	r3, [r7, #12]
   1af2a:	681b      	ldr	r3, [r3, #0]
   1af2c:	7858      	ldrb	r0, [r3, #1]
   1af2e:	69fb      	ldr	r3, [r7, #28]
   1af30:	b2db      	uxtb	r3, r3
   1af32:	693a      	ldr	r2, [r7, #16]
   1af34:	69b9      	ldr	r1, [r7, #24]
   1af36:	4c5c      	ldr	r4, [pc, #368]	; (1b0a8 <f_write+0x348>)
   1af38:	47a0      	blx	r4
   1af3a:	1e03      	subs	r3, r0, #0
   1af3c:	d009      	beq.n	1af52 <f_write+0x1f2>
					ABORT(fp->fs, FR_DISK_ERR);
   1af3e:	68fb      	ldr	r3, [r7, #12]
   1af40:	799b      	ldrb	r3, [r3, #6]
   1af42:	2280      	movs	r2, #128	; 0x80
   1af44:	4252      	negs	r2, r2
   1af46:	4313      	orrs	r3, r2
   1af48:	b2da      	uxtb	r2, r3
   1af4a:	68fb      	ldr	r3, [r7, #12]
   1af4c:	719a      	strb	r2, [r3, #6]
   1af4e:	2301      	movs	r3, #1
   1af50:	e09e      	b.n	1b090 <f_write+0x330>
#if _FS_TINY
				if (fp->fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
   1af52:	68fb      	ldr	r3, [r7, #12]
   1af54:	681b      	ldr	r3, [r3, #0]
   1af56:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1af58:	693b      	ldr	r3, [r7, #16]
   1af5a:	1ad2      	subs	r2, r2, r3
   1af5c:	69fb      	ldr	r3, [r7, #28]
   1af5e:	429a      	cmp	r2, r3
   1af60:	d214      	bcs.n	1af8c <f_write+0x22c>
					mem_cpy(fp->fs->win, wbuff + ((fp->fs->winsect - sect) * SS(fp->fs)), SS(fp->fs));
   1af62:	68fb      	ldr	r3, [r7, #12]
   1af64:	681b      	ldr	r3, [r3, #0]
   1af66:	3330      	adds	r3, #48	; 0x30
   1af68:	0018      	movs	r0, r3
   1af6a:	68fb      	ldr	r3, [r7, #12]
   1af6c:	681b      	ldr	r3, [r3, #0]
   1af6e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1af70:	693b      	ldr	r3, [r7, #16]
   1af72:	1ad3      	subs	r3, r2, r3
   1af74:	025b      	lsls	r3, r3, #9
   1af76:	69ba      	ldr	r2, [r7, #24]
   1af78:	18d1      	adds	r1, r2, r3
   1af7a:	2380      	movs	r3, #128	; 0x80
   1af7c:	009b      	lsls	r3, r3, #2
   1af7e:	001a      	movs	r2, r3
   1af80:	4b4a      	ldr	r3, [pc, #296]	; (1b0ac <f_write+0x34c>)
   1af82:	4798      	blx	r3
					fp->fs->wflag = 0;
   1af84:	68fb      	ldr	r3, [r7, #12]
   1af86:	681b      	ldr	r3, [r3, #0]
   1af88:	2200      	movs	r2, #0
   1af8a:	711a      	strb	r2, [r3, #4]
				if (fp->dsect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fp->buf, wbuff + ((fp->dsect - sect) * SS(fp->fs)), SS(fp->fs));
					fp->flag &= ~FA__DIRTY;
				}
#endif
				wcnt = SS(fp->fs) * cc;		/* Number of bytes transferred */
   1af8c:	69fb      	ldr	r3, [r7, #28]
   1af8e:	025b      	lsls	r3, r3, #9
   1af90:	623b      	str	r3, [r7, #32]
				continue;
   1af92:	e051      	b.n	1b038 <f_write+0x2d8>
			}
#if _FS_TINY
			if (fp->fptr >= fp->fsize) {	/* Avoid silly cache filling at growing edge */
   1af94:	68fb      	ldr	r3, [r7, #12]
   1af96:	689a      	ldr	r2, [r3, #8]
   1af98:	68fb      	ldr	r3, [r7, #12]
   1af9a:	68db      	ldr	r3, [r3, #12]
   1af9c:	429a      	cmp	r2, r3
   1af9e:	d315      	bcc.n	1afcc <f_write+0x26c>
				if (move_window(fp->fs, 0)) ABORT(fp->fs, FR_DISK_ERR);
   1afa0:	68fb      	ldr	r3, [r7, #12]
   1afa2:	681b      	ldr	r3, [r3, #0]
   1afa4:	2100      	movs	r1, #0
   1afa6:	0018      	movs	r0, r3
   1afa8:	4b3d      	ldr	r3, [pc, #244]	; (1b0a0 <f_write+0x340>)
   1afaa:	4798      	blx	r3
   1afac:	1e03      	subs	r3, r0, #0
   1afae:	d009      	beq.n	1afc4 <f_write+0x264>
   1afb0:	68fb      	ldr	r3, [r7, #12]
   1afb2:	799b      	ldrb	r3, [r3, #6]
   1afb4:	2280      	movs	r2, #128	; 0x80
   1afb6:	4252      	negs	r2, r2
   1afb8:	4313      	orrs	r3, r2
   1afba:	b2da      	uxtb	r2, r3
   1afbc:	68fb      	ldr	r3, [r7, #12]
   1afbe:	719a      	strb	r2, [r3, #6]
   1afc0:	2301      	movs	r3, #1
   1afc2:	e065      	b.n	1b090 <f_write+0x330>
				fp->fs->winsect = sect;
   1afc4:	68fb      	ldr	r3, [r7, #12]
   1afc6:	681b      	ldr	r3, [r3, #0]
   1afc8:	693a      	ldr	r2, [r7, #16]
   1afca:	62da      	str	r2, [r3, #44]	; 0x2c
				if (fp->fptr < fp->fsize &&
					disk_read(fp->fs->drv, fp->buf, sect, 1) != RES_OK)
						ABORT(fp->fs, FR_DISK_ERR);
			}
#endif
			fp->dsect = sect;
   1afcc:	68fb      	ldr	r3, [r7, #12]
   1afce:	693a      	ldr	r2, [r7, #16]
   1afd0:	619a      	str	r2, [r3, #24]
		}
		wcnt = SS(fp->fs) - (fp->fptr % SS(fp->fs));/* Put partial sector into file I/O buffer */
   1afd2:	68fb      	ldr	r3, [r7, #12]
   1afd4:	689b      	ldr	r3, [r3, #8]
   1afd6:	05db      	lsls	r3, r3, #23
   1afd8:	0ddb      	lsrs	r3, r3, #23
   1afda:	2280      	movs	r2, #128	; 0x80
   1afdc:	0092      	lsls	r2, r2, #2
   1afde:	1ad3      	subs	r3, r2, r3
   1afe0:	623b      	str	r3, [r7, #32]
		if (wcnt > btw) wcnt = btw;
   1afe2:	6a3a      	ldr	r2, [r7, #32]
   1afe4:	687b      	ldr	r3, [r7, #4]
   1afe6:	429a      	cmp	r2, r3
   1afe8:	d901      	bls.n	1afee <f_write+0x28e>
   1afea:	687b      	ldr	r3, [r7, #4]
   1afec:	623b      	str	r3, [r7, #32]
#if _FS_TINY
		if (move_window(fp->fs, fp->dsect))	/* Move sector window */
   1afee:	68fb      	ldr	r3, [r7, #12]
   1aff0:	681a      	ldr	r2, [r3, #0]
   1aff2:	68fb      	ldr	r3, [r7, #12]
   1aff4:	699b      	ldr	r3, [r3, #24]
   1aff6:	0019      	movs	r1, r3
   1aff8:	0010      	movs	r0, r2
   1affa:	4b29      	ldr	r3, [pc, #164]	; (1b0a0 <f_write+0x340>)
   1affc:	4798      	blx	r3
   1affe:	1e03      	subs	r3, r0, #0
   1b000:	d009      	beq.n	1b016 <f_write+0x2b6>
			ABORT(fp->fs, FR_DISK_ERR);
   1b002:	68fb      	ldr	r3, [r7, #12]
   1b004:	799b      	ldrb	r3, [r3, #6]
   1b006:	2280      	movs	r2, #128	; 0x80
   1b008:	4252      	negs	r2, r2
   1b00a:	4313      	orrs	r3, r2
   1b00c:	b2da      	uxtb	r2, r3
   1b00e:	68fb      	ldr	r3, [r7, #12]
   1b010:	719a      	strb	r2, [r3, #6]
   1b012:	2301      	movs	r3, #1
   1b014:	e03c      	b.n	1b090 <f_write+0x330>
		mem_cpy(&fp->fs->win[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
   1b016:	68fb      	ldr	r3, [r7, #12]
   1b018:	681a      	ldr	r2, [r3, #0]
   1b01a:	68fb      	ldr	r3, [r7, #12]
   1b01c:	689b      	ldr	r3, [r3, #8]
   1b01e:	05db      	lsls	r3, r3, #23
   1b020:	0ddb      	lsrs	r3, r3, #23
   1b022:	3330      	adds	r3, #48	; 0x30
   1b024:	18d3      	adds	r3, r2, r3
   1b026:	6a3a      	ldr	r2, [r7, #32]
   1b028:	69b9      	ldr	r1, [r7, #24]
   1b02a:	0018      	movs	r0, r3
   1b02c:	4b1f      	ldr	r3, [pc, #124]	; (1b0ac <f_write+0x34c>)
   1b02e:	4798      	blx	r3
		fp->fs->wflag = 1;
   1b030:	68fb      	ldr	r3, [r7, #12]
   1b032:	681b      	ldr	r3, [r3, #0]
   1b034:	2201      	movs	r2, #1
   1b036:	711a      	strb	r2, [r3, #4]
		wbuff += wcnt, fp->fptr += wcnt, *bw += wcnt, btw -= wcnt) {
   1b038:	69ba      	ldr	r2, [r7, #24]
   1b03a:	6a3b      	ldr	r3, [r7, #32]
   1b03c:	18d3      	adds	r3, r2, r3
   1b03e:	61bb      	str	r3, [r7, #24]
   1b040:	68fb      	ldr	r3, [r7, #12]
   1b042:	689a      	ldr	r2, [r3, #8]
   1b044:	6a3b      	ldr	r3, [r7, #32]
   1b046:	18d2      	adds	r2, r2, r3
   1b048:	68fb      	ldr	r3, [r7, #12]
   1b04a:	609a      	str	r2, [r3, #8]
   1b04c:	683b      	ldr	r3, [r7, #0]
   1b04e:	681a      	ldr	r2, [r3, #0]
   1b050:	6a3b      	ldr	r3, [r7, #32]
   1b052:	18d2      	adds	r2, r2, r3
   1b054:	683b      	ldr	r3, [r7, #0]
   1b056:	601a      	str	r2, [r3, #0]
   1b058:	687a      	ldr	r2, [r7, #4]
   1b05a:	6a3b      	ldr	r3, [r7, #32]
   1b05c:	1ad3      	subs	r3, r2, r3
   1b05e:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
   1b060:	687b      	ldr	r3, [r7, #4]
   1b062:	2b00      	cmp	r3, #0
   1b064:	d000      	beq.n	1b068 <f_write+0x308>
   1b066:	e6b7      	b.n	1add8 <f_write+0x78>
   1b068:	e000      	b.n	1b06c <f_write+0x30c>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
   1b06a:	46c0      	nop			; (mov r8, r8)
		mem_cpy(&fp->buf[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
		fp->flag |= FA__DIRTY;
#endif
	}

	if (fp->fptr > fp->fsize) fp->fsize = fp->fptr;	/* Update file size if needed */
   1b06c:	68fb      	ldr	r3, [r7, #12]
   1b06e:	689a      	ldr	r2, [r3, #8]
   1b070:	68fb      	ldr	r3, [r7, #12]
   1b072:	68db      	ldr	r3, [r3, #12]
   1b074:	429a      	cmp	r2, r3
   1b076:	d903      	bls.n	1b080 <f_write+0x320>
   1b078:	68fb      	ldr	r3, [r7, #12]
   1b07a:	689a      	ldr	r2, [r3, #8]
   1b07c:	68fb      	ldr	r3, [r7, #12]
   1b07e:	60da      	str	r2, [r3, #12]
	fp->flag |= FA__WRITTEN;						/* Set file change flag */
   1b080:	68fb      	ldr	r3, [r7, #12]
   1b082:	799b      	ldrb	r3, [r3, #6]
   1b084:	2220      	movs	r2, #32
   1b086:	4313      	orrs	r3, r2
   1b088:	b2da      	uxtb	r2, r3
   1b08a:	68fb      	ldr	r3, [r7, #12]
   1b08c:	719a      	strb	r2, [r3, #6]

	LEAVE_FF(fp->fs, FR_OK);
   1b08e:	2300      	movs	r3, #0
}
   1b090:	0018      	movs	r0, r3
   1b092:	46bd      	mov	sp, r7
   1b094:	b00b      	add	sp, #44	; 0x2c
   1b096:	bd90      	pop	{r4, r7, pc}
   1b098:	0001a785 	.word	0x0001a785
   1b09c:	00018e11 	.word	0x00018e11
   1b0a0:	00018709 	.word	0x00018709
   1b0a4:	00018969 	.word	0x00018969
   1b0a8:	000183f5 	.word	0x000183f5
   1b0ac:	00018625 	.word	0x00018625

0001b0b0 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL *fp		/* Pointer to the file object */
)
{
   1b0b0:	b590      	push	{r4, r7, lr}
   1b0b2:	b087      	sub	sp, #28
   1b0b4:	af00      	add	r7, sp, #0
   1b0b6:	6078      	str	r0, [r7, #4]
	FRESULT res;
	DWORD tim;
	BYTE *dir;


	res = validate(fp->fs, fp->id);		/* Check validity of the object */
   1b0b8:	687b      	ldr	r3, [r7, #4]
   1b0ba:	681a      	ldr	r2, [r3, #0]
   1b0bc:	687b      	ldr	r3, [r7, #4]
   1b0be:	889b      	ldrh	r3, [r3, #4]
   1b0c0:	2117      	movs	r1, #23
   1b0c2:	187c      	adds	r4, r7, r1
   1b0c4:	0019      	movs	r1, r3
   1b0c6:	0010      	movs	r0, r2
   1b0c8:	4b55      	ldr	r3, [pc, #340]	; (1b220 <f_sync+0x170>)
   1b0ca:	4798      	blx	r3
   1b0cc:	0003      	movs	r3, r0
   1b0ce:	7023      	strb	r3, [r4, #0]
	if (res == FR_OK) {
   1b0d0:	2317      	movs	r3, #23
   1b0d2:	18fb      	adds	r3, r7, r3
   1b0d4:	781b      	ldrb	r3, [r3, #0]
   1b0d6:	2b00      	cmp	r3, #0
   1b0d8:	d000      	beq.n	1b0dc <f_sync+0x2c>
   1b0da:	e09a      	b.n	1b212 <f_sync+0x162>
		if (fp->flag & FA__WRITTEN) {	/* Has the file been written? */
   1b0dc:	687b      	ldr	r3, [r7, #4]
   1b0de:	799b      	ldrb	r3, [r3, #6]
   1b0e0:	001a      	movs	r2, r3
   1b0e2:	2320      	movs	r3, #32
   1b0e4:	4013      	ands	r3, r2
   1b0e6:	d100      	bne.n	1b0ea <f_sync+0x3a>
   1b0e8:	e093      	b.n	1b212 <f_sync+0x162>
					LEAVE_FF(fp->fs, FR_DISK_ERR);
				fp->flag &= ~FA__DIRTY;
			}
#endif
			/* Update the directory entry */
			res = move_window(fp->fs, fp->dir_sect);
   1b0ea:	687b      	ldr	r3, [r7, #4]
   1b0ec:	681a      	ldr	r2, [r3, #0]
   1b0ee:	687b      	ldr	r3, [r7, #4]
   1b0f0:	69db      	ldr	r3, [r3, #28]
   1b0f2:	2117      	movs	r1, #23
   1b0f4:	187c      	adds	r4, r7, r1
   1b0f6:	0019      	movs	r1, r3
   1b0f8:	0010      	movs	r0, r2
   1b0fa:	4b4a      	ldr	r3, [pc, #296]	; (1b224 <f_sync+0x174>)
   1b0fc:	4798      	blx	r3
   1b0fe:	0003      	movs	r3, r0
   1b100:	7023      	strb	r3, [r4, #0]
			if (res == FR_OK) {
   1b102:	2317      	movs	r3, #23
   1b104:	18fb      	adds	r3, r7, r3
   1b106:	781b      	ldrb	r3, [r3, #0]
   1b108:	2b00      	cmp	r3, #0
   1b10a:	d000      	beq.n	1b10e <f_sync+0x5e>
   1b10c:	e081      	b.n	1b212 <f_sync+0x162>
				dir = fp->dir_ptr;
   1b10e:	687b      	ldr	r3, [r7, #4]
   1b110:	6a1b      	ldr	r3, [r3, #32]
   1b112:	613b      	str	r3, [r7, #16]
				dir[DIR_Attr] |= AM_ARC;					/* Set archive bit */
   1b114:	693b      	ldr	r3, [r7, #16]
   1b116:	330b      	adds	r3, #11
   1b118:	693a      	ldr	r2, [r7, #16]
   1b11a:	320b      	adds	r2, #11
   1b11c:	7812      	ldrb	r2, [r2, #0]
   1b11e:	2120      	movs	r1, #32
   1b120:	430a      	orrs	r2, r1
   1b122:	b2d2      	uxtb	r2, r2
   1b124:	701a      	strb	r2, [r3, #0]
				ST_DWORD(dir+DIR_FileSize, fp->fsize);		/* Update file size */
   1b126:	693b      	ldr	r3, [r7, #16]
   1b128:	331c      	adds	r3, #28
   1b12a:	001a      	movs	r2, r3
   1b12c:	687b      	ldr	r3, [r7, #4]
   1b12e:	68db      	ldr	r3, [r3, #12]
   1b130:	b2db      	uxtb	r3, r3
   1b132:	7013      	strb	r3, [r2, #0]
   1b134:	693b      	ldr	r3, [r7, #16]
   1b136:	331d      	adds	r3, #29
   1b138:	001a      	movs	r2, r3
   1b13a:	687b      	ldr	r3, [r7, #4]
   1b13c:	68db      	ldr	r3, [r3, #12]
   1b13e:	b29b      	uxth	r3, r3
   1b140:	0a1b      	lsrs	r3, r3, #8
   1b142:	b29b      	uxth	r3, r3
   1b144:	b2db      	uxtb	r3, r3
   1b146:	7013      	strb	r3, [r2, #0]
   1b148:	693b      	ldr	r3, [r7, #16]
   1b14a:	331e      	adds	r3, #30
   1b14c:	001a      	movs	r2, r3
   1b14e:	687b      	ldr	r3, [r7, #4]
   1b150:	68db      	ldr	r3, [r3, #12]
   1b152:	0c1b      	lsrs	r3, r3, #16
   1b154:	b2db      	uxtb	r3, r3
   1b156:	7013      	strb	r3, [r2, #0]
   1b158:	693b      	ldr	r3, [r7, #16]
   1b15a:	331f      	adds	r3, #31
   1b15c:	001a      	movs	r2, r3
   1b15e:	687b      	ldr	r3, [r7, #4]
   1b160:	68db      	ldr	r3, [r3, #12]
   1b162:	0e1b      	lsrs	r3, r3, #24
   1b164:	b2db      	uxtb	r3, r3
   1b166:	7013      	strb	r3, [r2, #0]
				ST_CLUST(dir, fp->sclust);					/* Update start cluster */
   1b168:	693b      	ldr	r3, [r7, #16]
   1b16a:	331a      	adds	r3, #26
   1b16c:	001a      	movs	r2, r3
   1b16e:	687b      	ldr	r3, [r7, #4]
   1b170:	691b      	ldr	r3, [r3, #16]
   1b172:	b2db      	uxtb	r3, r3
   1b174:	7013      	strb	r3, [r2, #0]
   1b176:	693b      	ldr	r3, [r7, #16]
   1b178:	331b      	adds	r3, #27
   1b17a:	001a      	movs	r2, r3
   1b17c:	687b      	ldr	r3, [r7, #4]
   1b17e:	691b      	ldr	r3, [r3, #16]
   1b180:	b29b      	uxth	r3, r3
   1b182:	0a1b      	lsrs	r3, r3, #8
   1b184:	b29b      	uxth	r3, r3
   1b186:	b2db      	uxtb	r3, r3
   1b188:	7013      	strb	r3, [r2, #0]
   1b18a:	693b      	ldr	r3, [r7, #16]
   1b18c:	3314      	adds	r3, #20
   1b18e:	001a      	movs	r2, r3
   1b190:	687b      	ldr	r3, [r7, #4]
   1b192:	691b      	ldr	r3, [r3, #16]
   1b194:	0c1b      	lsrs	r3, r3, #16
   1b196:	b2db      	uxtb	r3, r3
   1b198:	7013      	strb	r3, [r2, #0]
   1b19a:	693b      	ldr	r3, [r7, #16]
   1b19c:	3315      	adds	r3, #21
   1b19e:	001a      	movs	r2, r3
   1b1a0:	687b      	ldr	r3, [r7, #4]
   1b1a2:	691b      	ldr	r3, [r3, #16]
   1b1a4:	0c1b      	lsrs	r3, r3, #16
   1b1a6:	b29b      	uxth	r3, r3
   1b1a8:	0a1b      	lsrs	r3, r3, #8
   1b1aa:	b29b      	uxth	r3, r3
   1b1ac:	b2db      	uxtb	r3, r3
   1b1ae:	7013      	strb	r3, [r2, #0]
				tim = get_fattime();						/* Update updated time */
   1b1b0:	4b1d      	ldr	r3, [pc, #116]	; (1b228 <f_sync+0x178>)
   1b1b2:	4798      	blx	r3
   1b1b4:	0003      	movs	r3, r0
   1b1b6:	60fb      	str	r3, [r7, #12]
				ST_DWORD(dir+DIR_WrtTime, tim);
   1b1b8:	693b      	ldr	r3, [r7, #16]
   1b1ba:	3316      	adds	r3, #22
   1b1bc:	68fa      	ldr	r2, [r7, #12]
   1b1be:	b2d2      	uxtb	r2, r2
   1b1c0:	701a      	strb	r2, [r3, #0]
   1b1c2:	693b      	ldr	r3, [r7, #16]
   1b1c4:	3317      	adds	r3, #23
   1b1c6:	68fa      	ldr	r2, [r7, #12]
   1b1c8:	b292      	uxth	r2, r2
   1b1ca:	0a12      	lsrs	r2, r2, #8
   1b1cc:	b292      	uxth	r2, r2
   1b1ce:	b2d2      	uxtb	r2, r2
   1b1d0:	701a      	strb	r2, [r3, #0]
   1b1d2:	693b      	ldr	r3, [r7, #16]
   1b1d4:	3318      	adds	r3, #24
   1b1d6:	68fa      	ldr	r2, [r7, #12]
   1b1d8:	0c12      	lsrs	r2, r2, #16
   1b1da:	b2d2      	uxtb	r2, r2
   1b1dc:	701a      	strb	r2, [r3, #0]
   1b1de:	693b      	ldr	r3, [r7, #16]
   1b1e0:	3319      	adds	r3, #25
   1b1e2:	68fa      	ldr	r2, [r7, #12]
   1b1e4:	0e12      	lsrs	r2, r2, #24
   1b1e6:	b2d2      	uxtb	r2, r2
   1b1e8:	701a      	strb	r2, [r3, #0]
				fp->flag &= ~FA__WRITTEN;
   1b1ea:	687b      	ldr	r3, [r7, #4]
   1b1ec:	799b      	ldrb	r3, [r3, #6]
   1b1ee:	2220      	movs	r2, #32
   1b1f0:	4393      	bics	r3, r2
   1b1f2:	b2da      	uxtb	r2, r3
   1b1f4:	687b      	ldr	r3, [r7, #4]
   1b1f6:	719a      	strb	r2, [r3, #6]
				fp->fs->wflag = 1;
   1b1f8:	687b      	ldr	r3, [r7, #4]
   1b1fa:	681b      	ldr	r3, [r3, #0]
   1b1fc:	2201      	movs	r2, #1
   1b1fe:	711a      	strb	r2, [r3, #4]
				res = sync(fp->fs);
   1b200:	687b      	ldr	r3, [r7, #4]
   1b202:	681b      	ldr	r3, [r3, #0]
   1b204:	2217      	movs	r2, #23
   1b206:	18bc      	adds	r4, r7, r2
   1b208:	0018      	movs	r0, r3
   1b20a:	4b08      	ldr	r3, [pc, #32]	; (1b22c <f_sync+0x17c>)
   1b20c:	4798      	blx	r3
   1b20e:	0003      	movs	r3, r0
   1b210:	7023      	strb	r3, [r4, #0]
			}
		}
	}

	LEAVE_FF(fp->fs, res);
   1b212:	2317      	movs	r3, #23
   1b214:	18fb      	adds	r3, r7, r3
   1b216:	781b      	ldrb	r3, [r3, #0]
}
   1b218:	0018      	movs	r0, r3
   1b21a:	46bd      	mov	sp, r7
   1b21c:	b007      	add	sp, #28
   1b21e:	bd90      	pop	{r4, r7, pc}
   1b220:	0001a785 	.word	0x0001a785
   1b224:	00018709 	.word	0x00018709
   1b228:	000185c5 	.word	0x000185c5
   1b22c:	000187d1 	.word	0x000187d1

0001b230 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL *fp		/* Pointer to the file object to be closed */
)
{
   1b230:	b590      	push	{r4, r7, lr}
   1b232:	b085      	sub	sp, #20
   1b234:	af00      	add	r7, sp, #0
   1b236:	6078      	str	r0, [r7, #4]
	res = validate(fs, fp->id);
	if (res == FR_OK) fp->fs = 0;	/* Discard file object */
	LEAVE_FF(fs, res);

#else
	res = f_sync(fp);		/* Flush cached data */
   1b238:	230f      	movs	r3, #15
   1b23a:	18fc      	adds	r4, r7, r3
   1b23c:	687b      	ldr	r3, [r7, #4]
   1b23e:	0018      	movs	r0, r3
   1b240:	4b09      	ldr	r3, [pc, #36]	; (1b268 <f_close+0x38>)
   1b242:	4798      	blx	r3
   1b244:	0003      	movs	r3, r0
   1b246:	7023      	strb	r3, [r4, #0]
#else
		res = dec_lock(fp->lockid);
#endif
	}
#endif
	if (res == FR_OK) fp->fs = 0;	/* Discard file object */
   1b248:	230f      	movs	r3, #15
   1b24a:	18fb      	adds	r3, r7, r3
   1b24c:	781b      	ldrb	r3, [r3, #0]
   1b24e:	2b00      	cmp	r3, #0
   1b250:	d102      	bne.n	1b258 <f_close+0x28>
   1b252:	687b      	ldr	r3, [r7, #4]
   1b254:	2200      	movs	r2, #0
   1b256:	601a      	str	r2, [r3, #0]
	return res;
   1b258:	230f      	movs	r3, #15
   1b25a:	18fb      	adds	r3, r7, r3
   1b25c:	781b      	ldrb	r3, [r3, #0]
#endif
}
   1b25e:	0018      	movs	r0, r3
   1b260:	46bd      	mov	sp, r7
   1b262:	b005      	add	sp, #20
   1b264:	bd90      	pop	{r4, r7, pc}
   1b266:	46c0      	nop			; (mov r8, r8)
   1b268:	0001b0b1 	.word	0x0001b0b1

0001b26c <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	src,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEMCP, 1: OEMCP to Unicode */
)
{
   1b26c:	b580      	push	{r7, lr}
   1b26e:	b084      	sub	sp, #16
   1b270:	af00      	add	r7, sp, #0
   1b272:	0002      	movs	r2, r0
   1b274:	6039      	str	r1, [r7, #0]
   1b276:	1dbb      	adds	r3, r7, #6
   1b278:	801a      	strh	r2, [r3, #0]
	WCHAR c;


	if (src < 0x80) {	/* ASCII */
   1b27a:	1dbb      	adds	r3, r7, #6
   1b27c:	881b      	ldrh	r3, [r3, #0]
   1b27e:	2b7f      	cmp	r3, #127	; 0x7f
   1b280:	d805      	bhi.n	1b28e <ff_convert+0x22>
		c = src;
   1b282:	230e      	movs	r3, #14
   1b284:	18fb      	adds	r3, r7, r3
   1b286:	1dba      	adds	r2, r7, #6
   1b288:	8812      	ldrh	r2, [r2, #0]
   1b28a:	801a      	strh	r2, [r3, #0]
   1b28c:	e03a      	b.n	1b304 <ff_convert+0x98>

	} else {
		if (dir) {		/* OEMCP to Unicode */
   1b28e:	683b      	ldr	r3, [r7, #0]
   1b290:	2b00      	cmp	r3, #0
   1b292:	d010      	beq.n	1b2b6 <ff_convert+0x4a>
			c = (src >= 0x100) ? 0 : Tbl[src - 0x80];
   1b294:	1dbb      	adds	r3, r7, #6
   1b296:	881b      	ldrh	r3, [r3, #0]
   1b298:	2bff      	cmp	r3, #255	; 0xff
   1b29a:	d807      	bhi.n	1b2ac <ff_convert+0x40>
   1b29c:	1dbb      	adds	r3, r7, #6
   1b29e:	881b      	ldrh	r3, [r3, #0]
   1b2a0:	3b80      	subs	r3, #128	; 0x80
   1b2a2:	001a      	movs	r2, r3
   1b2a4:	4b1b      	ldr	r3, [pc, #108]	; (1b314 <ff_convert+0xa8>)
   1b2a6:	0052      	lsls	r2, r2, #1
   1b2a8:	5ad2      	ldrh	r2, [r2, r3]
   1b2aa:	e000      	b.n	1b2ae <ff_convert+0x42>
   1b2ac:	2200      	movs	r2, #0
   1b2ae:	230e      	movs	r3, #14
   1b2b0:	18fb      	adds	r3, r7, r3
   1b2b2:	801a      	strh	r2, [r3, #0]
   1b2b4:	e026      	b.n	1b304 <ff_convert+0x98>

		} else {		/* Unicode to OEMCP */
			for (c = 0; c < 0x80; c++) {
   1b2b6:	230e      	movs	r3, #14
   1b2b8:	18fb      	adds	r3, r7, r3
   1b2ba:	2200      	movs	r2, #0
   1b2bc:	801a      	strh	r2, [r3, #0]
   1b2be:	e010      	b.n	1b2e2 <ff_convert+0x76>
				if (src == Tbl[c]) break;
   1b2c0:	230e      	movs	r3, #14
   1b2c2:	18fb      	adds	r3, r7, r3
   1b2c4:	881a      	ldrh	r2, [r3, #0]
   1b2c6:	4b13      	ldr	r3, [pc, #76]	; (1b314 <ff_convert+0xa8>)
   1b2c8:	0052      	lsls	r2, r2, #1
   1b2ca:	5ad3      	ldrh	r3, [r2, r3]
   1b2cc:	1dba      	adds	r2, r7, #6
   1b2ce:	8812      	ldrh	r2, [r2, #0]
   1b2d0:	429a      	cmp	r2, r3
   1b2d2:	d00c      	beq.n	1b2ee <ff_convert+0x82>
			for (c = 0; c < 0x80; c++) {
   1b2d4:	230e      	movs	r3, #14
   1b2d6:	18fb      	adds	r3, r7, r3
   1b2d8:	881a      	ldrh	r2, [r3, #0]
   1b2da:	230e      	movs	r3, #14
   1b2dc:	18fb      	adds	r3, r7, r3
   1b2de:	3201      	adds	r2, #1
   1b2e0:	801a      	strh	r2, [r3, #0]
   1b2e2:	230e      	movs	r3, #14
   1b2e4:	18fb      	adds	r3, r7, r3
   1b2e6:	881b      	ldrh	r3, [r3, #0]
   1b2e8:	2b7f      	cmp	r3, #127	; 0x7f
   1b2ea:	d9e9      	bls.n	1b2c0 <ff_convert+0x54>
   1b2ec:	e000      	b.n	1b2f0 <ff_convert+0x84>
				if (src == Tbl[c]) break;
   1b2ee:	46c0      	nop			; (mov r8, r8)
			}
			c = (c + 0x80) & 0xFF;
   1b2f0:	230e      	movs	r3, #14
   1b2f2:	18fb      	adds	r3, r7, r3
   1b2f4:	881b      	ldrh	r3, [r3, #0]
   1b2f6:	3380      	adds	r3, #128	; 0x80
   1b2f8:	b29a      	uxth	r2, r3
   1b2fa:	230e      	movs	r3, #14
   1b2fc:	18fb      	adds	r3, r7, r3
   1b2fe:	21ff      	movs	r1, #255	; 0xff
   1b300:	400a      	ands	r2, r1
   1b302:	801a      	strh	r2, [r3, #0]
		}
	}

	return c;
   1b304:	230e      	movs	r3, #14
   1b306:	18fb      	adds	r3, r7, r3
   1b308:	881b      	ldrh	r3, [r3, #0]
}
   1b30a:	0018      	movs	r0, r3
   1b30c:	46bd      	mov	sp, r7
   1b30e:	b004      	add	sp, #16
   1b310:	bd80      	pop	{r7, pc}
   1b312:	46c0      	nop			; (mov r8, r8)
   1b314:	000261a8 	.word	0x000261a8

0001b318 <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Upper converted character */
	WCHAR chr		/* Input character */
)
{
   1b318:	b580      	push	{r7, lr}
   1b31a:	b084      	sub	sp, #16
   1b31c:	af00      	add	r7, sp, #0
   1b31e:	0002      	movs	r2, r0
   1b320:	1dbb      	adds	r3, r7, #6
   1b322:	801a      	strh	r2, [r3, #0]
	static const WCHAR tbl_lower[] = { 0x61, 0x62, 0x63, 0x64, 0x65, 0x66, 0x67, 0x68, 0x69, 0x6A, 0x6B, 0x6C, 0x6D, 0x6E, 0x6F, 0x70, 0x71, 0x72, 0x73, 0x74, 0x75, 0x76, 0x77, 0x78, 0x79, 0x7A, 0xA1, 0x00A2, 0x00A3, 0x00A5, 0x00AC, 0x00AF, 0xE0, 0xE1, 0xE2, 0xE3, 0xE4, 0xE5, 0xE6, 0xE7, 0xE8, 0xE9, 0xEA, 0xEB, 0xEC, 0xED, 0xEE, 0xEF, 0xF0, 0xF1, 0xF2, 0xF3, 0xF4, 0xF5, 0xF6, 0xF8, 0xF9, 0xFA, 0xFB, 0xFC, 0xFD, 0xFE, 0x0FF, 0x101, 0x103, 0x105, 0x107, 0x109, 0x10B, 0x10D, 0x10F, 0x111, 0x113, 0x115, 0x117, 0x119, 0x11B, 0x11D, 0x11F, 0x121, 0x123, 0x125, 0x127, 0x129, 0x12B, 0x12D, 0x12F, 0x131, 0x133, 0x135, 0x137, 0x13A, 0x13C, 0x13E, 0x140, 0x142, 0x144, 0x146, 0x148, 0x14B, 0x14D, 0x14F, 0x151, 0x153, 0x155, 0x157, 0x159, 0x15B, 0x15D, 0x15F, 0x161, 0x163, 0x165, 0x167, 0x169, 0x16B, 0x16D, 0x16F, 0x171, 0x173, 0x175, 0x177, 0x17A, 0x17C, 0x17E, 0x192, 0x3B1, 0x3B2, 0x3B3, 0x3B4, 0x3B5, 0x3B6, 0x3B7, 0x3B8, 0x3B9, 0x3BA, 0x3BB, 0x3BC, 0x3BD, 0x3BE, 0x3BF, 0x3C0, 0x3C1, 0x3C3, 0x3C4, 0x3C5, 0x3C6, 0x3C7, 0x3C8, 0x3C9, 0x3CA, 0x430, 0x431, 0x432, 0x433, 0x434, 0x435, 0x436, 0x437, 0x438, 0x439, 0x43A, 0x43B, 0x43C, 0x43D, 0x43E, 0x43F, 0x440, 0x441, 0x442, 0x443, 0x444, 0x445, 0x446, 0x447, 0x448, 0x449, 0x44A, 0x44B, 0x44C, 0x44D, 0x44E, 0x44F, 0x451, 0x452, 0x453, 0x454, 0x455, 0x456, 0x457, 0x458, 0x459, 0x45A, 0x45B, 0x45C, 0x45E, 0x45F, 0x2170, 0x2171, 0x2172, 0x2173, 0x2174, 0x2175, 0x2176, 0x2177, 0x2178, 0x2179, 0x217A, 0x217B, 0x217C, 0x217D, 0x217E, 0x217F, 0xFF41, 0xFF42, 0xFF43, 0xFF44, 0xFF45, 0xFF46, 0xFF47, 0xFF48, 0xFF49, 0xFF4A, 0xFF4B, 0xFF4C, 0xFF4D, 0xFF4E, 0xFF4F, 0xFF50, 0xFF51, 0xFF52, 0xFF53, 0xFF54, 0xFF55, 0xFF56, 0xFF57, 0xFF58, 0xFF59, 0xFF5A, 0 };
	static const WCHAR tbl_upper[] = { 0x41, 0x42, 0x43, 0x44, 0x45, 0x46, 0x47, 0x48, 0x49, 0x4A, 0x4B, 0x4C, 0x4D, 0x4E, 0x4F, 0x50, 0x51, 0x52, 0x53, 0x54, 0x55, 0x56, 0x57, 0x58, 0x59, 0x5A, 0x21, 0xFFE0, 0xFFE1, 0xFFE5, 0xFFE2, 0xFFE3, 0xC0, 0xC1, 0xC2, 0xC3, 0xC4, 0xC5, 0xC6, 0xC7, 0xC8, 0xC9, 0xCA, 0xCB, 0xCC, 0xCD, 0xCE, 0xCF, 0xD0, 0xD1, 0xD2, 0xD3, 0xD4, 0xD5, 0xD6, 0xD8, 0xD9, 0xDA, 0xDB, 0xDC, 0xDD, 0xDE, 0x178, 0x100, 0x102, 0x104, 0x106, 0x108, 0x10A, 0x10C, 0x10E, 0x110, 0x112, 0x114, 0x116, 0x118, 0x11A, 0x11C, 0x11E, 0x120, 0x122, 0x124, 0x126, 0x128, 0x12A, 0x12C, 0x12E, 0x130, 0x132, 0x134, 0x136, 0x139, 0x13B, 0x13D, 0x13F, 0x141, 0x143, 0x145, 0x147, 0x14A, 0x14C, 0x14E, 0x150, 0x152, 0x154, 0x156, 0x158, 0x15A, 0x15C, 0x15E, 0x160, 0x162, 0x164, 0x166, 0x168, 0x16A, 0x16C, 0x16E, 0x170, 0x172, 0x174, 0x176, 0x179, 0x17B, 0x17D, 0x191, 0x391, 0x392, 0x393, 0x394, 0x395, 0x396, 0x397, 0x398, 0x399, 0x39A, 0x39B, 0x39C, 0x39D, 0x39E, 0x39F, 0x3A0, 0x3A1, 0x3A3, 0x3A4, 0x3A5, 0x3A6, 0x3A7, 0x3A8, 0x3A9, 0x3AA, 0x410, 0x411, 0x412, 0x413, 0x414, 0x415, 0x416, 0x417, 0x418, 0x419, 0x41A, 0x41B, 0x41C, 0x41D, 0x41E, 0x41F, 0x420, 0x421, 0x422, 0x423, 0x424, 0x425, 0x426, 0x427, 0x428, 0x429, 0x42A, 0x42B, 0x42C, 0x42D, 0x42E, 0x42F, 0x401, 0x402, 0x403, 0x404, 0x405, 0x406, 0x407, 0x408, 0x409, 0x40A, 0x40B, 0x40C, 0x40E, 0x40F, 0x2160, 0x2161, 0x2162, 0x2163, 0x2164, 0x2165, 0x2166, 0x2167, 0x2168, 0x2169, 0x216A, 0x216B, 0x216C, 0x216D, 0x216E, 0x216F, 0xFF21, 0xFF22, 0xFF23, 0xFF24, 0xFF25, 0xFF26, 0xFF27, 0xFF28, 0xFF29, 0xFF2A, 0xFF2B, 0xFF2C, 0xFF2D, 0xFF2E, 0xFF2F, 0xFF30, 0xFF31, 0xFF32, 0xFF33, 0xFF34, 0xFF35, 0xFF36, 0xFF37, 0xFF38, 0xFF39, 0xFF3A, 0 };
	int i;


	for (i = 0; tbl_lower[i] && chr != tbl_lower[i]; i++) ;
   1b324:	2300      	movs	r3, #0
   1b326:	60fb      	str	r3, [r7, #12]
   1b328:	e002      	b.n	1b330 <ff_wtoupper+0x18>
   1b32a:	68fb      	ldr	r3, [r7, #12]
   1b32c:	3301      	adds	r3, #1
   1b32e:	60fb      	str	r3, [r7, #12]
   1b330:	4b0f      	ldr	r3, [pc, #60]	; (1b370 <ff_wtoupper+0x58>)
   1b332:	68fa      	ldr	r2, [r7, #12]
   1b334:	0052      	lsls	r2, r2, #1
   1b336:	5ad3      	ldrh	r3, [r2, r3]
   1b338:	2b00      	cmp	r3, #0
   1b33a:	d007      	beq.n	1b34c <ff_wtoupper+0x34>
   1b33c:	4b0c      	ldr	r3, [pc, #48]	; (1b370 <ff_wtoupper+0x58>)
   1b33e:	68fa      	ldr	r2, [r7, #12]
   1b340:	0052      	lsls	r2, r2, #1
   1b342:	5ad3      	ldrh	r3, [r2, r3]
   1b344:	1dba      	adds	r2, r7, #6
   1b346:	8812      	ldrh	r2, [r2, #0]
   1b348:	429a      	cmp	r2, r3
   1b34a:	d1ee      	bne.n	1b32a <ff_wtoupper+0x12>

	return tbl_lower[i] ? tbl_upper[i] : chr;
   1b34c:	4b08      	ldr	r3, [pc, #32]	; (1b370 <ff_wtoupper+0x58>)
   1b34e:	68fa      	ldr	r2, [r7, #12]
   1b350:	0052      	lsls	r2, r2, #1
   1b352:	5ad3      	ldrh	r3, [r2, r3]
   1b354:	2b00      	cmp	r3, #0
   1b356:	d004      	beq.n	1b362 <ff_wtoupper+0x4a>
   1b358:	4b06      	ldr	r3, [pc, #24]	; (1b374 <ff_wtoupper+0x5c>)
   1b35a:	68fa      	ldr	r2, [r7, #12]
   1b35c:	0052      	lsls	r2, r2, #1
   1b35e:	5ad3      	ldrh	r3, [r2, r3]
   1b360:	e001      	b.n	1b366 <ff_wtoupper+0x4e>
   1b362:	1dbb      	adds	r3, r7, #6
   1b364:	881b      	ldrh	r3, [r3, #0]
}
   1b366:	0018      	movs	r0, r3
   1b368:	46bd      	mov	sp, r7
   1b36a:	b004      	add	sp, #16
   1b36c:	bd80      	pop	{r7, pc}
   1b36e:	46c0      	nop			; (mov r8, r8)
   1b370:	000262a8 	.word	0x000262a8
   1b374:	00026488 	.word	0x00026488

0001b378 <NewMessageData>:
int cycle(MQTTClient* c, Timer* timer);
void MQTTRun(void* parm);
int waitfor(MQTTClient* c, int packet_type, Timer* timer);


static void NewMessageData(MessageData* md, MQTTString* aTopicName, MQTTMessage* aMessage) {
   1b378:	b580      	push	{r7, lr}
   1b37a:	b084      	sub	sp, #16
   1b37c:	af00      	add	r7, sp, #0
   1b37e:	60f8      	str	r0, [r7, #12]
   1b380:	60b9      	str	r1, [r7, #8]
   1b382:	607a      	str	r2, [r7, #4]
    md->topicName = aTopicName;
   1b384:	68fb      	ldr	r3, [r7, #12]
   1b386:	68ba      	ldr	r2, [r7, #8]
   1b388:	605a      	str	r2, [r3, #4]
    md->message = aMessage;
   1b38a:	68fb      	ldr	r3, [r7, #12]
   1b38c:	687a      	ldr	r2, [r7, #4]
   1b38e:	601a      	str	r2, [r3, #0]
}
   1b390:	46c0      	nop			; (mov r8, r8)
   1b392:	46bd      	mov	sp, r7
   1b394:	b004      	add	sp, #16
   1b396:	bd80      	pop	{r7, pc}

0001b398 <getNextPacketId>:


static int getNextPacketId(MQTTClient *c) {
   1b398:	b580      	push	{r7, lr}
   1b39a:	b082      	sub	sp, #8
   1b39c:	af00      	add	r7, sp, #0
   1b39e:	6078      	str	r0, [r7, #4]
    return c->next_packetid = (c->next_packetid == MAX_PACKET_ID) ? 1 : c->next_packetid + 1;
   1b3a0:	687b      	ldr	r3, [r7, #4]
   1b3a2:	681b      	ldr	r3, [r3, #0]
   1b3a4:	4a07      	ldr	r2, [pc, #28]	; (1b3c4 <getNextPacketId+0x2c>)
   1b3a6:	4293      	cmp	r3, r2
   1b3a8:	d003      	beq.n	1b3b2 <getNextPacketId+0x1a>
   1b3aa:	687b      	ldr	r3, [r7, #4]
   1b3ac:	681b      	ldr	r3, [r3, #0]
   1b3ae:	1c5a      	adds	r2, r3, #1
   1b3b0:	e000      	b.n	1b3b4 <getNextPacketId+0x1c>
   1b3b2:	2201      	movs	r2, #1
   1b3b4:	687b      	ldr	r3, [r7, #4]
   1b3b6:	601a      	str	r2, [r3, #0]
   1b3b8:	687b      	ldr	r3, [r7, #4]
   1b3ba:	681b      	ldr	r3, [r3, #0]
}
   1b3bc:	0018      	movs	r0, r3
   1b3be:	46bd      	mov	sp, r7
   1b3c0:	b002      	add	sp, #8
   1b3c2:	bd80      	pop	{r7, pc}
   1b3c4:	0000ffff 	.word	0x0000ffff

0001b3c8 <sendPacket>:


static int sendPacket(MQTTClient* c, int length, Timer* timer)
{
   1b3c8:	b5f0      	push	{r4, r5, r6, r7, lr}
   1b3ca:	b087      	sub	sp, #28
   1b3cc:	af00      	add	r7, sp, #0
   1b3ce:	60f8      	str	r0, [r7, #12]
   1b3d0:	60b9      	str	r1, [r7, #8]
   1b3d2:	607a      	str	r2, [r7, #4]
    int rc = FAILURE, 
   1b3d4:	2301      	movs	r3, #1
   1b3d6:	425b      	negs	r3, r3
   1b3d8:	617b      	str	r3, [r7, #20]
        sent = 0;
   1b3da:	2300      	movs	r3, #0
   1b3dc:	613b      	str	r3, [r7, #16]
    
    while (sent < length && !TimerIsExpired(timer))
   1b3de:	e01a      	b.n	1b416 <sendPacket+0x4e>
    {
        rc = c->ipstack->mqttwrite(c->ipstack, &c->buf[sent], length, TimerLeftMS(timer));
   1b3e0:	68fb      	ldr	r3, [r7, #12]
   1b3e2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   1b3e4:	68dc      	ldr	r4, [r3, #12]
   1b3e6:	68fb      	ldr	r3, [r7, #12]
   1b3e8:	6d1d      	ldr	r5, [r3, #80]	; 0x50
   1b3ea:	68fb      	ldr	r3, [r7, #12]
   1b3ec:	691a      	ldr	r2, [r3, #16]
   1b3ee:	693b      	ldr	r3, [r7, #16]
   1b3f0:	18d6      	adds	r6, r2, r3
   1b3f2:	687b      	ldr	r3, [r7, #4]
   1b3f4:	0018      	movs	r0, r3
   1b3f6:	4b1a      	ldr	r3, [pc, #104]	; (1b460 <sendPacket+0x98>)
   1b3f8:	4798      	blx	r3
   1b3fa:	0003      	movs	r3, r0
   1b3fc:	68ba      	ldr	r2, [r7, #8]
   1b3fe:	0031      	movs	r1, r6
   1b400:	0028      	movs	r0, r5
   1b402:	47a0      	blx	r4
   1b404:	0003      	movs	r3, r0
   1b406:	617b      	str	r3, [r7, #20]
        if (rc < 0)  // there was an error writing the data
   1b408:	697b      	ldr	r3, [r7, #20]
   1b40a:	2b00      	cmp	r3, #0
   1b40c:	db0e      	blt.n	1b42c <sendPacket+0x64>
            break;
        sent += rc;
   1b40e:	693a      	ldr	r2, [r7, #16]
   1b410:	697b      	ldr	r3, [r7, #20]
   1b412:	18d3      	adds	r3, r2, r3
   1b414:	613b      	str	r3, [r7, #16]
    while (sent < length && !TimerIsExpired(timer))
   1b416:	693a      	ldr	r2, [r7, #16]
   1b418:	68bb      	ldr	r3, [r7, #8]
   1b41a:	429a      	cmp	r2, r3
   1b41c:	da07      	bge.n	1b42e <sendPacket+0x66>
   1b41e:	687b      	ldr	r3, [r7, #4]
   1b420:	0018      	movs	r0, r3
   1b422:	4b10      	ldr	r3, [pc, #64]	; (1b464 <sendPacket+0x9c>)
   1b424:	4798      	blx	r3
   1b426:	1e03      	subs	r3, r0, #0
   1b428:	d0da      	beq.n	1b3e0 <sendPacket+0x18>
   1b42a:	e000      	b.n	1b42e <sendPacket+0x66>
            break;
   1b42c:	46c0      	nop			; (mov r8, r8)
    }
    if (sent == length)
   1b42e:	693a      	ldr	r2, [r7, #16]
   1b430:	68bb      	ldr	r3, [r7, #8]
   1b432:	429a      	cmp	r2, r3
   1b434:	d10b      	bne.n	1b44e <sendPacket+0x86>
    {
        TimerCountdown(&c->ping_timer, c->keepAliveInterval); // record the fact that we have successfully sent the packet
   1b436:	68fb      	ldr	r3, [r7, #12]
   1b438:	3354      	adds	r3, #84	; 0x54
   1b43a:	001a      	movs	r2, r3
   1b43c:	68fb      	ldr	r3, [r7, #12]
   1b43e:	699b      	ldr	r3, [r3, #24]
   1b440:	0019      	movs	r1, r3
   1b442:	0010      	movs	r0, r2
   1b444:	4b08      	ldr	r3, [pc, #32]	; (1b468 <sendPacket+0xa0>)
   1b446:	4798      	blx	r3
        rc = SUCCESS;
   1b448:	2300      	movs	r3, #0
   1b44a:	617b      	str	r3, [r7, #20]
   1b44c:	e002      	b.n	1b454 <sendPacket+0x8c>
    }
    else
        rc = FAILURE;
   1b44e:	2301      	movs	r3, #1
   1b450:	425b      	negs	r3, r3
   1b452:	617b      	str	r3, [r7, #20]
    return rc;
   1b454:	697b      	ldr	r3, [r7, #20]
}
   1b456:	0018      	movs	r0, r3
   1b458:	46bd      	mov	sp, r7
   1b45a:	b007      	add	sp, #28
   1b45c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1b45e:	46c0      	nop			; (mov r8, r8)
   1b460:	0001c229 	.word	0x0001c229
   1b464:	0001c1ad 	.word	0x0001c1ad
   1b468:	0001c201 	.word	0x0001c201

0001b46c <MQTTClientInit>:


void MQTTClientInit(MQTTClient* c, Network* network, unsigned int command_timeout_ms,
		unsigned char* sendbuf, size_t sendbuf_size, unsigned char* readbuf, size_t readbuf_size)
{
   1b46c:	b580      	push	{r7, lr}
   1b46e:	b086      	sub	sp, #24
   1b470:	af00      	add	r7, sp, #0
   1b472:	60f8      	str	r0, [r7, #12]
   1b474:	60b9      	str	r1, [r7, #8]
   1b476:	607a      	str	r2, [r7, #4]
   1b478:	603b      	str	r3, [r7, #0]
    int i;
    c->ipstack = network;
   1b47a:	68fb      	ldr	r3, [r7, #12]
   1b47c:	68ba      	ldr	r2, [r7, #8]
   1b47e:	651a      	str	r2, [r3, #80]	; 0x50
    
    for (i = 0; i < MAX_MESSAGE_HANDLERS; ++i)
   1b480:	2300      	movs	r3, #0
   1b482:	617b      	str	r3, [r7, #20]
   1b484:	e00a      	b.n	1b49c <MQTTClientInit+0x30>
        c->messageHandlers[i].topicFilter = 0;
   1b486:	68fa      	ldr	r2, [r7, #12]
   1b488:	697b      	ldr	r3, [r7, #20]
   1b48a:	3304      	adds	r3, #4
   1b48c:	00db      	lsls	r3, r3, #3
   1b48e:	18d3      	adds	r3, r2, r3
   1b490:	3304      	adds	r3, #4
   1b492:	2200      	movs	r2, #0
   1b494:	601a      	str	r2, [r3, #0]
    for (i = 0; i < MAX_MESSAGE_HANDLERS; ++i)
   1b496:	697b      	ldr	r3, [r7, #20]
   1b498:	3301      	adds	r3, #1
   1b49a:	617b      	str	r3, [r7, #20]
   1b49c:	697b      	ldr	r3, [r7, #20]
   1b49e:	2b04      	cmp	r3, #4
   1b4a0:	ddf1      	ble.n	1b486 <MQTTClientInit+0x1a>
    c->command_timeout_ms = command_timeout_ms;
   1b4a2:	68fb      	ldr	r3, [r7, #12]
   1b4a4:	687a      	ldr	r2, [r7, #4]
   1b4a6:	605a      	str	r2, [r3, #4]
    c->buf = sendbuf;
   1b4a8:	68fb      	ldr	r3, [r7, #12]
   1b4aa:	683a      	ldr	r2, [r7, #0]
   1b4ac:	611a      	str	r2, [r3, #16]
    c->buf_size = sendbuf_size;
   1b4ae:	68fb      	ldr	r3, [r7, #12]
   1b4b0:	6a3a      	ldr	r2, [r7, #32]
   1b4b2:	609a      	str	r2, [r3, #8]
    c->readbuf = readbuf;
   1b4b4:	68fb      	ldr	r3, [r7, #12]
   1b4b6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   1b4b8:	615a      	str	r2, [r3, #20]
    c->readbuf_size = readbuf_size;
   1b4ba:	68fb      	ldr	r3, [r7, #12]
   1b4bc:	6aba      	ldr	r2, [r7, #40]	; 0x28
   1b4be:	60da      	str	r2, [r3, #12]
    c->isconnected = 0;
   1b4c0:	68fb      	ldr	r3, [r7, #12]
   1b4c2:	2200      	movs	r2, #0
   1b4c4:	621a      	str	r2, [r3, #32]
    c->ping_outstanding = 0;
   1b4c6:	68fb      	ldr	r3, [r7, #12]
   1b4c8:	2200      	movs	r2, #0
   1b4ca:	771a      	strb	r2, [r3, #28]
    c->defaultMessageHandler = NULL;
   1b4cc:	68fb      	ldr	r3, [r7, #12]
   1b4ce:	2200      	movs	r2, #0
   1b4d0:	64da      	str	r2, [r3, #76]	; 0x4c
	c->next_packetid = 1;
   1b4d2:	68fb      	ldr	r3, [r7, #12]
   1b4d4:	2201      	movs	r2, #1
   1b4d6:	601a      	str	r2, [r3, #0]
    TimerInit(&c->ping_timer);
   1b4d8:	68fb      	ldr	r3, [r7, #12]
   1b4da:	3354      	adds	r3, #84	; 0x54
   1b4dc:	0018      	movs	r0, r3
   1b4de:	4b03      	ldr	r3, [pc, #12]	; (1b4ec <MQTTClientInit+0x80>)
   1b4e0:	4798      	blx	r3
#if defined(MQTT_TASK)
	MutexInit(&c->mutex);
#endif
}
   1b4e2:	46c0      	nop			; (mov r8, r8)
   1b4e4:	46bd      	mov	sp, r7
   1b4e6:	b006      	add	sp, #24
   1b4e8:	bd80      	pop	{r7, pc}
   1b4ea:	46c0      	nop			; (mov r8, r8)
   1b4ec:	0001c251 	.word	0x0001c251

0001b4f0 <decodePacket>:


static int decodePacket(MQTTClient* c, int* value, int timeout)
{
   1b4f0:	b590      	push	{r4, r7, lr}
   1b4f2:	b08b      	sub	sp, #44	; 0x2c
   1b4f4:	af00      	add	r7, sp, #0
   1b4f6:	60f8      	str	r0, [r7, #12]
   1b4f8:	60b9      	str	r1, [r7, #8]
   1b4fa:	607a      	str	r2, [r7, #4]
    unsigned char i;
    int multiplier = 1;
   1b4fc:	2301      	movs	r3, #1
   1b4fe:	627b      	str	r3, [r7, #36]	; 0x24
    int len = 0;
   1b500:	2300      	movs	r3, #0
   1b502:	623b      	str	r3, [r7, #32]
    const int MAX_NO_OF_REMAINING_LENGTH_BYTES = 4;
   1b504:	2304      	movs	r3, #4
   1b506:	61fb      	str	r3, [r7, #28]

    *value = 0;
   1b508:	68bb      	ldr	r3, [r7, #8]
   1b50a:	2200      	movs	r2, #0
   1b50c:	601a      	str	r2, [r3, #0]
    do
    {
        int rc = MQTTPACKET_READ_ERROR;
   1b50e:	2301      	movs	r3, #1
   1b510:	425b      	negs	r3, r3
   1b512:	61bb      	str	r3, [r7, #24]

        if (++len > MAX_NO_OF_REMAINING_LENGTH_BYTES)
   1b514:	6a3b      	ldr	r3, [r7, #32]
   1b516:	3301      	adds	r3, #1
   1b518:	623b      	str	r3, [r7, #32]
   1b51a:	6a3a      	ldr	r2, [r7, #32]
   1b51c:	69fb      	ldr	r3, [r7, #28]
   1b51e:	429a      	cmp	r2, r3
   1b520:	dd03      	ble.n	1b52a <decodePacket+0x3a>
        {
            rc = MQTTPACKET_READ_ERROR; /* bad data */
   1b522:	2301      	movs	r3, #1
   1b524:	425b      	negs	r3, r3
   1b526:	61bb      	str	r3, [r7, #24]
            goto exit;
   1b528:	e026      	b.n	1b578 <decodePacket+0x88>
        }
        rc = c->ipstack->mqttread(c->ipstack, &i, 1, timeout);
   1b52a:	68fb      	ldr	r3, [r7, #12]
   1b52c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   1b52e:	689c      	ldr	r4, [r3, #8]
   1b530:	68fb      	ldr	r3, [r7, #12]
   1b532:	6d18      	ldr	r0, [r3, #80]	; 0x50
   1b534:	687b      	ldr	r3, [r7, #4]
   1b536:	2217      	movs	r2, #23
   1b538:	18b9      	adds	r1, r7, r2
   1b53a:	2201      	movs	r2, #1
   1b53c:	47a0      	blx	r4
   1b53e:	0003      	movs	r3, r0
   1b540:	61bb      	str	r3, [r7, #24]
        if (rc != 1)
   1b542:	69bb      	ldr	r3, [r7, #24]
   1b544:	2b01      	cmp	r3, #1
   1b546:	d116      	bne.n	1b576 <decodePacket+0x86>
            goto exit;
        *value += (i & 127) * multiplier;
   1b548:	68bb      	ldr	r3, [r7, #8]
   1b54a:	681a      	ldr	r2, [r3, #0]
   1b54c:	2317      	movs	r3, #23
   1b54e:	18fb      	adds	r3, r7, r3
   1b550:	781b      	ldrb	r3, [r3, #0]
   1b552:	0019      	movs	r1, r3
   1b554:	237f      	movs	r3, #127	; 0x7f
   1b556:	400b      	ands	r3, r1
   1b558:	6a79      	ldr	r1, [r7, #36]	; 0x24
   1b55a:	434b      	muls	r3, r1
   1b55c:	18d2      	adds	r2, r2, r3
   1b55e:	68bb      	ldr	r3, [r7, #8]
   1b560:	601a      	str	r2, [r3, #0]
        multiplier *= 128;
   1b562:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1b564:	01db      	lsls	r3, r3, #7
   1b566:	627b      	str	r3, [r7, #36]	; 0x24
    } while ((i & 128) != 0);
   1b568:	2317      	movs	r3, #23
   1b56a:	18fb      	adds	r3, r7, r3
   1b56c:	781b      	ldrb	r3, [r3, #0]
   1b56e:	b25b      	sxtb	r3, r3
   1b570:	2b00      	cmp	r3, #0
   1b572:	dbcc      	blt.n	1b50e <decodePacket+0x1e>
   1b574:	e000      	b.n	1b578 <decodePacket+0x88>
            goto exit;
   1b576:	46c0      	nop			; (mov r8, r8)
exit:
    return len;
   1b578:	6a3b      	ldr	r3, [r7, #32]
}
   1b57a:	0018      	movs	r0, r3
   1b57c:	46bd      	mov	sp, r7
   1b57e:	b00b      	add	sp, #44	; 0x2c
   1b580:	bd90      	pop	{r4, r7, pc}
	...

0001b584 <readPacket>:


static int readPacket(MQTTClient* c, Timer* timer)
{
   1b584:	b5f0      	push	{r4, r5, r6, r7, lr}
   1b586:	46c6      	mov	lr, r8
   1b588:	b500      	push	{lr}
   1b58a:	b086      	sub	sp, #24
   1b58c:	af00      	add	r7, sp, #0
   1b58e:	6078      	str	r0, [r7, #4]
   1b590:	6039      	str	r1, [r7, #0]
    int rc = FAILURE;
   1b592:	2301      	movs	r3, #1
   1b594:	425b      	negs	r3, r3
   1b596:	617b      	str	r3, [r7, #20]
    MQTTHeader header = {0};
   1b598:	2300      	movs	r3, #0
   1b59a:	60fb      	str	r3, [r7, #12]
    int len = 0;
   1b59c:	2300      	movs	r3, #0
   1b59e:	613b      	str	r3, [r7, #16]
    int rem_len = 0;
   1b5a0:	2300      	movs	r3, #0
   1b5a2:	60bb      	str	r3, [r7, #8]

    /* 1. read the header byte.  This has the packet type in it */
    if (c->ipstack->mqttread(c->ipstack, c->readbuf, 1, TimerLeftMS(timer)) != 1)
   1b5a4:	687b      	ldr	r3, [r7, #4]
   1b5a6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   1b5a8:	689c      	ldr	r4, [r3, #8]
   1b5aa:	687b      	ldr	r3, [r7, #4]
   1b5ac:	6d1d      	ldr	r5, [r3, #80]	; 0x50
   1b5ae:	687b      	ldr	r3, [r7, #4]
   1b5b0:	695e      	ldr	r6, [r3, #20]
   1b5b2:	683b      	ldr	r3, [r7, #0]
   1b5b4:	0018      	movs	r0, r3
   1b5b6:	4b2b      	ldr	r3, [pc, #172]	; (1b664 <readPacket+0xe0>)
   1b5b8:	4798      	blx	r3
   1b5ba:	0003      	movs	r3, r0
   1b5bc:	2201      	movs	r2, #1
   1b5be:	0031      	movs	r1, r6
   1b5c0:	0028      	movs	r0, r5
   1b5c2:	47a0      	blx	r4
   1b5c4:	0003      	movs	r3, r0
   1b5c6:	2b01      	cmp	r3, #1
   1b5c8:	d141      	bne.n	1b64e <readPacket+0xca>
        goto exit;

    len = 1;
   1b5ca:	2301      	movs	r3, #1
   1b5cc:	613b      	str	r3, [r7, #16]
    /* 2. read the remaining length.  This is variable in itself */
    decodePacket(c, &rem_len, TimerLeftMS(timer));
   1b5ce:	683b      	ldr	r3, [r7, #0]
   1b5d0:	0018      	movs	r0, r3
   1b5d2:	4b24      	ldr	r3, [pc, #144]	; (1b664 <readPacket+0xe0>)
   1b5d4:	4798      	blx	r3
   1b5d6:	0002      	movs	r2, r0
   1b5d8:	2308      	movs	r3, #8
   1b5da:	18f9      	adds	r1, r7, r3
   1b5dc:	687b      	ldr	r3, [r7, #4]
   1b5de:	0018      	movs	r0, r3
   1b5e0:	4b21      	ldr	r3, [pc, #132]	; (1b668 <readPacket+0xe4>)
   1b5e2:	4798      	blx	r3
    len += MQTTPacket_encode(c->readbuf + 1, rem_len); /* put the original remaining length back into the buffer */
   1b5e4:	687b      	ldr	r3, [r7, #4]
   1b5e6:	695b      	ldr	r3, [r3, #20]
   1b5e8:	3301      	adds	r3, #1
   1b5ea:	68ba      	ldr	r2, [r7, #8]
   1b5ec:	0011      	movs	r1, r2
   1b5ee:	0018      	movs	r0, r3
   1b5f0:	4b1e      	ldr	r3, [pc, #120]	; (1b66c <readPacket+0xe8>)
   1b5f2:	4798      	blx	r3
   1b5f4:	0002      	movs	r2, r0
   1b5f6:	693b      	ldr	r3, [r7, #16]
   1b5f8:	189b      	adds	r3, r3, r2
   1b5fa:	613b      	str	r3, [r7, #16]

    /* 3. read the rest of the buffer using a callback to supply the rest of the data */
    if (rem_len > 0 && (c->ipstack->mqttread(c->ipstack, c->readbuf + len, rem_len, TimerLeftMS(timer)) != rem_len))
   1b5fc:	68bb      	ldr	r3, [r7, #8]
   1b5fe:	2b00      	cmp	r3, #0
   1b600:	dd17      	ble.n	1b632 <readPacket+0xae>
   1b602:	687b      	ldr	r3, [r7, #4]
   1b604:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   1b606:	689c      	ldr	r4, [r3, #8]
   1b608:	687b      	ldr	r3, [r7, #4]
   1b60a:	6d1d      	ldr	r5, [r3, #80]	; 0x50
   1b60c:	687b      	ldr	r3, [r7, #4]
   1b60e:	695a      	ldr	r2, [r3, #20]
   1b610:	693b      	ldr	r3, [r7, #16]
   1b612:	18d6      	adds	r6, r2, r3
   1b614:	68bb      	ldr	r3, [r7, #8]
   1b616:	4698      	mov	r8, r3
   1b618:	683b      	ldr	r3, [r7, #0]
   1b61a:	0018      	movs	r0, r3
   1b61c:	4b11      	ldr	r3, [pc, #68]	; (1b664 <readPacket+0xe0>)
   1b61e:	4798      	blx	r3
   1b620:	0003      	movs	r3, r0
   1b622:	4642      	mov	r2, r8
   1b624:	0031      	movs	r1, r6
   1b626:	0028      	movs	r0, r5
   1b628:	47a0      	blx	r4
   1b62a:	0002      	movs	r2, r0
   1b62c:	68bb      	ldr	r3, [r7, #8]
   1b62e:	429a      	cmp	r2, r3
   1b630:	d10f      	bne.n	1b652 <readPacket+0xce>
        goto exit;

    header.byte = c->readbuf[0];
   1b632:	687b      	ldr	r3, [r7, #4]
   1b634:	695b      	ldr	r3, [r3, #20]
   1b636:	781a      	ldrb	r2, [r3, #0]
   1b638:	230c      	movs	r3, #12
   1b63a:	18fb      	adds	r3, r7, r3
   1b63c:	701a      	strb	r2, [r3, #0]
    rc = header.bits.type;
   1b63e:	230c      	movs	r3, #12
   1b640:	18fb      	adds	r3, r7, r3
   1b642:	781b      	ldrb	r3, [r3, #0]
   1b644:	061b      	lsls	r3, r3, #24
   1b646:	0f1b      	lsrs	r3, r3, #28
   1b648:	b2db      	uxtb	r3, r3
   1b64a:	617b      	str	r3, [r7, #20]
   1b64c:	e002      	b.n	1b654 <readPacket+0xd0>
        goto exit;
   1b64e:	46c0      	nop			; (mov r8, r8)
   1b650:	e000      	b.n	1b654 <readPacket+0xd0>
        goto exit;
   1b652:	46c0      	nop			; (mov r8, r8)
exit:
    return rc;
   1b654:	697b      	ldr	r3, [r7, #20]
}
   1b656:	0018      	movs	r0, r3
   1b658:	46bd      	mov	sp, r7
   1b65a:	b006      	add	sp, #24
   1b65c:	bc04      	pop	{r2}
   1b65e:	4690      	mov	r8, r2
   1b660:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1b662:	46c0      	nop			; (mov r8, r8)
   1b664:	0001c229 	.word	0x0001c229
   1b668:	0001b4f1 	.word	0x0001b4f1
   1b66c:	0001d001 	.word	0x0001d001

0001b670 <isTopicMatched>:

// assume topic filter and name is in correct format
// # can only be at end
// + and # can only be next to separator
static char isTopicMatched(char* topicFilter, MQTTString* topicName)
{
   1b670:	b580      	push	{r7, lr}
   1b672:	b086      	sub	sp, #24
   1b674:	af00      	add	r7, sp, #0
   1b676:	6078      	str	r0, [r7, #4]
   1b678:	6039      	str	r1, [r7, #0]
    char* curf = topicFilter;
   1b67a:	687b      	ldr	r3, [r7, #4]
   1b67c:	617b      	str	r3, [r7, #20]
    char* curn = topicName->lenstring.data;
   1b67e:	683b      	ldr	r3, [r7, #0]
   1b680:	689b      	ldr	r3, [r3, #8]
   1b682:	613b      	str	r3, [r7, #16]
    char* curn_end = curn + topicName->lenstring.len;
   1b684:	683b      	ldr	r3, [r7, #0]
   1b686:	685b      	ldr	r3, [r3, #4]
   1b688:	001a      	movs	r2, r3
   1b68a:	693b      	ldr	r3, [r7, #16]
   1b68c:	189b      	adds	r3, r3, r2
   1b68e:	60bb      	str	r3, [r7, #8]
    
    while (*curf && curn < curn_end)
   1b690:	e039      	b.n	1b706 <isTopicMatched+0x96>
    {
        if (*curn == '/' && *curf != '/')
   1b692:	693b      	ldr	r3, [r7, #16]
   1b694:	781b      	ldrb	r3, [r3, #0]
   1b696:	2b2f      	cmp	r3, #47	; 0x2f
   1b698:	d103      	bne.n	1b6a2 <isTopicMatched+0x32>
   1b69a:	697b      	ldr	r3, [r7, #20]
   1b69c:	781b      	ldrb	r3, [r3, #0]
   1b69e:	2b2f      	cmp	r3, #47	; 0x2f
   1b6a0:	d13a      	bne.n	1b718 <isTopicMatched+0xa8>
            break;
        if (*curf != '+' && *curf != '#' && *curf != *curn)
   1b6a2:	697b      	ldr	r3, [r7, #20]
   1b6a4:	781b      	ldrb	r3, [r3, #0]
   1b6a6:	2b2b      	cmp	r3, #43	; 0x2b
   1b6a8:	d009      	beq.n	1b6be <isTopicMatched+0x4e>
   1b6aa:	697b      	ldr	r3, [r7, #20]
   1b6ac:	781b      	ldrb	r3, [r3, #0]
   1b6ae:	2b23      	cmp	r3, #35	; 0x23
   1b6b0:	d005      	beq.n	1b6be <isTopicMatched+0x4e>
   1b6b2:	697b      	ldr	r3, [r7, #20]
   1b6b4:	781a      	ldrb	r2, [r3, #0]
   1b6b6:	693b      	ldr	r3, [r7, #16]
   1b6b8:	781b      	ldrb	r3, [r3, #0]
   1b6ba:	429a      	cmp	r2, r3
   1b6bc:	d12e      	bne.n	1b71c <isTopicMatched+0xac>
            break;
        if (*curf == '+')
   1b6be:	697b      	ldr	r3, [r7, #20]
   1b6c0:	781b      	ldrb	r3, [r3, #0]
   1b6c2:	2b2b      	cmp	r3, #43	; 0x2b
   1b6c4:	d112      	bne.n	1b6ec <isTopicMatched+0x7c>
        {   // skip until we meet the next separator, or end of string
            char* nextpos = curn + 1;
   1b6c6:	693b      	ldr	r3, [r7, #16]
   1b6c8:	3301      	adds	r3, #1
   1b6ca:	60fb      	str	r3, [r7, #12]
            while (nextpos < curn_end && *nextpos != '/')
   1b6cc:	e005      	b.n	1b6da <isTopicMatched+0x6a>
                nextpos = ++curn + 1;
   1b6ce:	693b      	ldr	r3, [r7, #16]
   1b6d0:	3301      	adds	r3, #1
   1b6d2:	613b      	str	r3, [r7, #16]
   1b6d4:	693b      	ldr	r3, [r7, #16]
   1b6d6:	3301      	adds	r3, #1
   1b6d8:	60fb      	str	r3, [r7, #12]
            while (nextpos < curn_end && *nextpos != '/')
   1b6da:	68fa      	ldr	r2, [r7, #12]
   1b6dc:	68bb      	ldr	r3, [r7, #8]
   1b6de:	429a      	cmp	r2, r3
   1b6e0:	d20b      	bcs.n	1b6fa <isTopicMatched+0x8a>
   1b6e2:	68fb      	ldr	r3, [r7, #12]
   1b6e4:	781b      	ldrb	r3, [r3, #0]
   1b6e6:	2b2f      	cmp	r3, #47	; 0x2f
   1b6e8:	d1f1      	bne.n	1b6ce <isTopicMatched+0x5e>
   1b6ea:	e006      	b.n	1b6fa <isTopicMatched+0x8a>
        }
        else if (*curf == '#')
   1b6ec:	697b      	ldr	r3, [r7, #20]
   1b6ee:	781b      	ldrb	r3, [r3, #0]
   1b6f0:	2b23      	cmp	r3, #35	; 0x23
   1b6f2:	d102      	bne.n	1b6fa <isTopicMatched+0x8a>
            curn = curn_end - 1;    // skip until end of string
   1b6f4:	68bb      	ldr	r3, [r7, #8]
   1b6f6:	3b01      	subs	r3, #1
   1b6f8:	613b      	str	r3, [r7, #16]
        curf++;
   1b6fa:	697b      	ldr	r3, [r7, #20]
   1b6fc:	3301      	adds	r3, #1
   1b6fe:	617b      	str	r3, [r7, #20]
        curn++;
   1b700:	693b      	ldr	r3, [r7, #16]
   1b702:	3301      	adds	r3, #1
   1b704:	613b      	str	r3, [r7, #16]
    while (*curf && curn < curn_end)
   1b706:	697b      	ldr	r3, [r7, #20]
   1b708:	781b      	ldrb	r3, [r3, #0]
   1b70a:	2b00      	cmp	r3, #0
   1b70c:	d007      	beq.n	1b71e <isTopicMatched+0xae>
   1b70e:	693a      	ldr	r2, [r7, #16]
   1b710:	68bb      	ldr	r3, [r7, #8]
   1b712:	429a      	cmp	r2, r3
   1b714:	d3bd      	bcc.n	1b692 <isTopicMatched+0x22>
   1b716:	e002      	b.n	1b71e <isTopicMatched+0xae>
            break;
   1b718:	46c0      	nop			; (mov r8, r8)
   1b71a:	e000      	b.n	1b71e <isTopicMatched+0xae>
            break;
   1b71c:	46c0      	nop			; (mov r8, r8)
    };
    
    return (curn == curn_end) && (*curf == '\0');
   1b71e:	693a      	ldr	r2, [r7, #16]
   1b720:	68bb      	ldr	r3, [r7, #8]
   1b722:	429a      	cmp	r2, r3
   1b724:	d105      	bne.n	1b732 <isTopicMatched+0xc2>
   1b726:	697b      	ldr	r3, [r7, #20]
   1b728:	781b      	ldrb	r3, [r3, #0]
   1b72a:	2b00      	cmp	r3, #0
   1b72c:	d101      	bne.n	1b732 <isTopicMatched+0xc2>
   1b72e:	2301      	movs	r3, #1
   1b730:	e000      	b.n	1b734 <isTopicMatched+0xc4>
   1b732:	2300      	movs	r3, #0
   1b734:	b2db      	uxtb	r3, r3
}
   1b736:	0018      	movs	r0, r3
   1b738:	46bd      	mov	sp, r7
   1b73a:	b006      	add	sp, #24
   1b73c:	bd80      	pop	{r7, pc}
	...

0001b740 <deliverMessage>:


int deliverMessage(MQTTClient* c, MQTTString* topicName, MQTTMessage* message)
{
   1b740:	b580      	push	{r7, lr}
   1b742:	b08a      	sub	sp, #40	; 0x28
   1b744:	af00      	add	r7, sp, #0
   1b746:	60f8      	str	r0, [r7, #12]
   1b748:	60b9      	str	r1, [r7, #8]
   1b74a:	607a      	str	r2, [r7, #4]
    int i;
    int rc = FAILURE;
   1b74c:	2301      	movs	r3, #1
   1b74e:	425b      	negs	r3, r3
   1b750:	623b      	str	r3, [r7, #32]

    // we have to find the right message handler - indexed by topic
    for (i = 0; i < MAX_MESSAGE_HANDLERS; ++i)
   1b752:	2300      	movs	r3, #0
   1b754:	627b      	str	r3, [r7, #36]	; 0x24
   1b756:	e044      	b.n	1b7e2 <deliverMessage+0xa2>
    {
        if (c->messageHandlers[i].topicFilter != 0 && (MQTTPacket_equals(topicName, (char*)c->messageHandlers[i].topicFilter) ||
   1b758:	68fa      	ldr	r2, [r7, #12]
   1b75a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1b75c:	3304      	adds	r3, #4
   1b75e:	00db      	lsls	r3, r3, #3
   1b760:	18d3      	adds	r3, r2, r3
   1b762:	3304      	adds	r3, #4
   1b764:	681b      	ldr	r3, [r3, #0]
   1b766:	2b00      	cmp	r3, #0
   1b768:	d038      	beq.n	1b7dc <deliverMessage+0x9c>
   1b76a:	68fa      	ldr	r2, [r7, #12]
   1b76c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1b76e:	3304      	adds	r3, #4
   1b770:	00db      	lsls	r3, r3, #3
   1b772:	18d3      	adds	r3, r2, r3
   1b774:	3304      	adds	r3, #4
   1b776:	681a      	ldr	r2, [r3, #0]
   1b778:	68bb      	ldr	r3, [r7, #8]
   1b77a:	0011      	movs	r1, r2
   1b77c:	0018      	movs	r0, r3
   1b77e:	4b28      	ldr	r3, [pc, #160]	; (1b820 <deliverMessage+0xe0>)
   1b780:	4798      	blx	r3
   1b782:	1e03      	subs	r3, r0, #0
   1b784:	d10d      	bne.n	1b7a2 <deliverMessage+0x62>
                isTopicMatched((char*)c->messageHandlers[i].topicFilter, topicName)))
   1b786:	68fa      	ldr	r2, [r7, #12]
   1b788:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1b78a:	3304      	adds	r3, #4
   1b78c:	00db      	lsls	r3, r3, #3
   1b78e:	18d3      	adds	r3, r2, r3
   1b790:	3304      	adds	r3, #4
   1b792:	681b      	ldr	r3, [r3, #0]
   1b794:	68ba      	ldr	r2, [r7, #8]
   1b796:	0011      	movs	r1, r2
   1b798:	0018      	movs	r0, r3
   1b79a:	4b22      	ldr	r3, [pc, #136]	; (1b824 <deliverMessage+0xe4>)
   1b79c:	4798      	blx	r3
   1b79e:	1e03      	subs	r3, r0, #0
        if (c->messageHandlers[i].topicFilter != 0 && (MQTTPacket_equals(topicName, (char*)c->messageHandlers[i].topicFilter) ||
   1b7a0:	d01c      	beq.n	1b7dc <deliverMessage+0x9c>
        {
            if (c->messageHandlers[i].fp != NULL)
   1b7a2:	68fa      	ldr	r2, [r7, #12]
   1b7a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1b7a6:	3304      	adds	r3, #4
   1b7a8:	00db      	lsls	r3, r3, #3
   1b7aa:	18d3      	adds	r3, r2, r3
   1b7ac:	3308      	adds	r3, #8
   1b7ae:	681b      	ldr	r3, [r3, #0]
   1b7b0:	2b00      	cmp	r3, #0
   1b7b2:	d013      	beq.n	1b7dc <deliverMessage+0x9c>
            {
                MessageData md;
                NewMessageData(&md, topicName, message);
   1b7b4:	687a      	ldr	r2, [r7, #4]
   1b7b6:	68b9      	ldr	r1, [r7, #8]
   1b7b8:	2318      	movs	r3, #24
   1b7ba:	18fb      	adds	r3, r7, r3
   1b7bc:	0018      	movs	r0, r3
   1b7be:	4b1a      	ldr	r3, [pc, #104]	; (1b828 <deliverMessage+0xe8>)
   1b7c0:	4798      	blx	r3
                c->messageHandlers[i].fp(&md);
   1b7c2:	68fa      	ldr	r2, [r7, #12]
   1b7c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1b7c6:	3304      	adds	r3, #4
   1b7c8:	00db      	lsls	r3, r3, #3
   1b7ca:	18d3      	adds	r3, r2, r3
   1b7cc:	3308      	adds	r3, #8
   1b7ce:	681b      	ldr	r3, [r3, #0]
   1b7d0:	2218      	movs	r2, #24
   1b7d2:	18ba      	adds	r2, r7, r2
   1b7d4:	0010      	movs	r0, r2
   1b7d6:	4798      	blx	r3
                rc = SUCCESS;
   1b7d8:	2300      	movs	r3, #0
   1b7da:	623b      	str	r3, [r7, #32]
    for (i = 0; i < MAX_MESSAGE_HANDLERS; ++i)
   1b7dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1b7de:	3301      	adds	r3, #1
   1b7e0:	627b      	str	r3, [r7, #36]	; 0x24
   1b7e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1b7e4:	2b04      	cmp	r3, #4
   1b7e6:	ddb7      	ble.n	1b758 <deliverMessage+0x18>
            }
        }
    }
    
    if (rc == FAILURE && c->defaultMessageHandler != NULL) 
   1b7e8:	6a3b      	ldr	r3, [r7, #32]
   1b7ea:	3301      	adds	r3, #1
   1b7ec:	d112      	bne.n	1b814 <deliverMessage+0xd4>
   1b7ee:	68fb      	ldr	r3, [r7, #12]
   1b7f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   1b7f2:	2b00      	cmp	r3, #0
   1b7f4:	d00e      	beq.n	1b814 <deliverMessage+0xd4>
    {
        MessageData md;
        NewMessageData(&md, topicName, message);
   1b7f6:	687a      	ldr	r2, [r7, #4]
   1b7f8:	68b9      	ldr	r1, [r7, #8]
   1b7fa:	2310      	movs	r3, #16
   1b7fc:	18fb      	adds	r3, r7, r3
   1b7fe:	0018      	movs	r0, r3
   1b800:	4b09      	ldr	r3, [pc, #36]	; (1b828 <deliverMessage+0xe8>)
   1b802:	4798      	blx	r3
        c->defaultMessageHandler(&md);
   1b804:	68fb      	ldr	r3, [r7, #12]
   1b806:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   1b808:	2210      	movs	r2, #16
   1b80a:	18ba      	adds	r2, r7, r2
   1b80c:	0010      	movs	r0, r2
   1b80e:	4798      	blx	r3
        rc = SUCCESS;
   1b810:	2300      	movs	r3, #0
   1b812:	623b      	str	r3, [r7, #32]
    }   
    
    return rc;
   1b814:	6a3b      	ldr	r3, [r7, #32]
}
   1b816:	0018      	movs	r0, r3
   1b818:	46bd      	mov	sp, r7
   1b81a:	b00a      	add	sp, #40	; 0x28
   1b81c:	bd80      	pop	{r7, pc}
   1b81e:	46c0      	nop			; (mov r8, r8)
   1b820:	0001d415 	.word	0x0001d415
   1b824:	0001b671 	.word	0x0001b671
   1b828:	0001b379 	.word	0x0001b379

0001b82c <keepalive>:


int keepalive(MQTTClient* c)
{
   1b82c:	b580      	push	{r7, lr}
   1b82e:	b088      	sub	sp, #32
   1b830:	af00      	add	r7, sp, #0
   1b832:	6078      	str	r0, [r7, #4]
    int rc = FAILURE;
   1b834:	2301      	movs	r3, #1
   1b836:	425b      	negs	r3, r3
   1b838:	61fb      	str	r3, [r7, #28]

    if (c->keepAliveInterval == 0)
   1b83a:	687b      	ldr	r3, [r7, #4]
   1b83c:	699b      	ldr	r3, [r3, #24]
   1b83e:	2b00      	cmp	r3, #0
   1b840:	d102      	bne.n	1b848 <keepalive+0x1c>
    {
        rc = SUCCESS;
   1b842:	2300      	movs	r3, #0
   1b844:	61fb      	str	r3, [r7, #28]
        goto exit;
   1b846:	e033      	b.n	1b8b0 <keepalive+0x84>
    }

    if (TimerIsExpired(&c->ping_timer))
   1b848:	687b      	ldr	r3, [r7, #4]
   1b84a:	3354      	adds	r3, #84	; 0x54
   1b84c:	0018      	movs	r0, r3
   1b84e:	4b1b      	ldr	r3, [pc, #108]	; (1b8bc <keepalive+0x90>)
   1b850:	4798      	blx	r3
   1b852:	1e03      	subs	r3, r0, #0
   1b854:	d02c      	beq.n	1b8b0 <keepalive+0x84>
    {
        if (!c->ping_outstanding)
   1b856:	687b      	ldr	r3, [r7, #4]
   1b858:	7f1b      	ldrb	r3, [r3, #28]
   1b85a:	2b00      	cmp	r3, #0
   1b85c:	d128      	bne.n	1b8b0 <keepalive+0x84>
        {
            Timer timer;
            TimerInit(&timer);
   1b85e:	230c      	movs	r3, #12
   1b860:	18fb      	adds	r3, r7, r3
   1b862:	0018      	movs	r0, r3
   1b864:	4b16      	ldr	r3, [pc, #88]	; (1b8c0 <keepalive+0x94>)
   1b866:	4798      	blx	r3
            TimerCountdownMS(&timer, 1000);
   1b868:	23fa      	movs	r3, #250	; 0xfa
   1b86a:	009a      	lsls	r2, r3, #2
   1b86c:	230c      	movs	r3, #12
   1b86e:	18fb      	adds	r3, r7, r3
   1b870:	0011      	movs	r1, r2
   1b872:	0018      	movs	r0, r3
   1b874:	4b13      	ldr	r3, [pc, #76]	; (1b8c4 <keepalive+0x98>)
   1b876:	4798      	blx	r3
            int len = MQTTSerialize_pingreq(c->buf, c->buf_size);
   1b878:	687b      	ldr	r3, [r7, #4]
   1b87a:	691a      	ldr	r2, [r3, #16]
   1b87c:	687b      	ldr	r3, [r7, #4]
   1b87e:	689b      	ldr	r3, [r3, #8]
   1b880:	0019      	movs	r1, r3
   1b882:	0010      	movs	r0, r2
   1b884:	4b10      	ldr	r3, [pc, #64]	; (1b8c8 <keepalive+0x9c>)
   1b886:	4798      	blx	r3
   1b888:	0003      	movs	r3, r0
   1b88a:	61bb      	str	r3, [r7, #24]
            if (len > 0 && (rc = sendPacket(c, len, &timer)) == SUCCESS) // send the ping packet
   1b88c:	69bb      	ldr	r3, [r7, #24]
   1b88e:	2b00      	cmp	r3, #0
   1b890:	dd0e      	ble.n	1b8b0 <keepalive+0x84>
   1b892:	230c      	movs	r3, #12
   1b894:	18fa      	adds	r2, r7, r3
   1b896:	69b9      	ldr	r1, [r7, #24]
   1b898:	687b      	ldr	r3, [r7, #4]
   1b89a:	0018      	movs	r0, r3
   1b89c:	4b0b      	ldr	r3, [pc, #44]	; (1b8cc <keepalive+0xa0>)
   1b89e:	4798      	blx	r3
   1b8a0:	0003      	movs	r3, r0
   1b8a2:	61fb      	str	r3, [r7, #28]
   1b8a4:	69fb      	ldr	r3, [r7, #28]
   1b8a6:	2b00      	cmp	r3, #0
   1b8a8:	d102      	bne.n	1b8b0 <keepalive+0x84>
                c->ping_outstanding = 1;
   1b8aa:	687b      	ldr	r3, [r7, #4]
   1b8ac:	2201      	movs	r2, #1
   1b8ae:	771a      	strb	r2, [r3, #28]
        }
    }

exit:
    return rc;
   1b8b0:	69fb      	ldr	r3, [r7, #28]
}
   1b8b2:	0018      	movs	r0, r3
   1b8b4:	46bd      	mov	sp, r7
   1b8b6:	b008      	add	sp, #32
   1b8b8:	bd80      	pop	{r7, pc}
   1b8ba:	46c0      	nop			; (mov r8, r8)
   1b8bc:	0001c1ad 	.word	0x0001c1ad
   1b8c0:	0001c251 	.word	0x0001c251
   1b8c4:	0001c1d9 	.word	0x0001c1d9
   1b8c8:	0001ce25 	.word	0x0001ce25
   1b8cc:	0001b3c9 	.word	0x0001b3c9

0001b8d0 <cycle>:


int cycle(MQTTClient* c, Timer* timer)
{
   1b8d0:	b5f0      	push	{r4, r5, r6, r7, lr}
   1b8d2:	b095      	sub	sp, #84	; 0x54
   1b8d4:	af06      	add	r7, sp, #24
   1b8d6:	6078      	str	r0, [r7, #4]
   1b8d8:	6039      	str	r1, [r7, #0]
    // read the socket, see what work is due
    unsigned short packet_type = readPacket(c, timer);
   1b8da:	683a      	ldr	r2, [r7, #0]
   1b8dc:	687b      	ldr	r3, [r7, #4]
   1b8de:	0011      	movs	r1, r2
   1b8e0:	0018      	movs	r0, r3
   1b8e2:	4b70      	ldr	r3, [pc, #448]	; (1baa4 <cycle+0x1d4>)
   1b8e4:	4798      	blx	r3
   1b8e6:	0002      	movs	r2, r0
   1b8e8:	232e      	movs	r3, #46	; 0x2e
   1b8ea:	18fb      	adds	r3, r7, r3
   1b8ec:	801a      	strh	r2, [r3, #0]
    
    int len = 0,
   1b8ee:	2300      	movs	r3, #0
   1b8f0:	637b      	str	r3, [r7, #52]	; 0x34
        rc = SUCCESS;
   1b8f2:	2300      	movs	r3, #0
   1b8f4:	633b      	str	r3, [r7, #48]	; 0x30

    switch (packet_type)
   1b8f6:	232e      	movs	r3, #46	; 0x2e
   1b8f8:	18fb      	adds	r3, r7, r3
   1b8fa:	881b      	ldrh	r3, [r3, #0]
   1b8fc:	2b0d      	cmp	r3, #13
   1b8fe:	d900      	bls.n	1b902 <cycle+0x32>
   1b900:	e0bd      	b.n	1ba7e <cycle+0x1ae>
   1b902:	009a      	lsls	r2, r3, #2
   1b904:	4b68      	ldr	r3, [pc, #416]	; (1baa8 <cycle+0x1d8>)
   1b906:	18d3      	adds	r3, r2, r3
   1b908:	681b      	ldr	r3, [r3, #0]
   1b90a:	469f      	mov	pc, r3
        case PUBLISH:
        {
            MQTTString topicName;
            MQTTMessage msg;
            int intQoS;
            if (MQTTDeserialize_publish(&msg.dup, &intQoS, &msg.retained, &msg.id, &topicName,
   1b90c:	687b      	ldr	r3, [r7, #4]
   1b90e:	695a      	ldr	r2, [r3, #20]
               (unsigned char**)&msg.payload, (int*)&msg.payloadlen, c->readbuf, c->readbuf_size) != 1)
   1b910:	687b      	ldr	r3, [r7, #4]
   1b912:	68db      	ldr	r3, [r3, #12]
            if (MQTTDeserialize_publish(&msg.dup, &intQoS, &msg.retained, &msg.id, &topicName,
   1b914:	001e      	movs	r6, r3
   1b916:	2310      	movs	r3, #16
   1b918:	18fb      	adds	r3, r7, r3
   1b91a:	1d1d      	adds	r5, r3, #4
   1b91c:	2310      	movs	r3, #16
   1b91e:	18fb      	adds	r3, r7, r3
   1b920:	1c5c      	adds	r4, r3, #1
   1b922:	230c      	movs	r3, #12
   1b924:	18f9      	adds	r1, r7, r3
   1b926:	2310      	movs	r3, #16
   1b928:	18fb      	adds	r3, r7, r3
   1b92a:	1c98      	adds	r0, r3, #2
   1b92c:	9604      	str	r6, [sp, #16]
   1b92e:	9203      	str	r2, [sp, #12]
   1b930:	2310      	movs	r3, #16
   1b932:	18fb      	adds	r3, r7, r3
   1b934:	330c      	adds	r3, #12
   1b936:	9302      	str	r3, [sp, #8]
   1b938:	2310      	movs	r3, #16
   1b93a:	18fb      	adds	r3, r7, r3
   1b93c:	3308      	adds	r3, #8
   1b93e:	9301      	str	r3, [sp, #4]
   1b940:	2320      	movs	r3, #32
   1b942:	18fb      	adds	r3, r7, r3
   1b944:	9300      	str	r3, [sp, #0]
   1b946:	002b      	movs	r3, r5
   1b948:	0022      	movs	r2, r4
   1b94a:	4c58      	ldr	r4, [pc, #352]	; (1baac <cycle+0x1dc>)
   1b94c:	47a0      	blx	r4
   1b94e:	0003      	movs	r3, r0
   1b950:	2b01      	cmp	r3, #1
   1b952:	d000      	beq.n	1b956 <cycle+0x86>
   1b954:	e098      	b.n	1ba88 <cycle+0x1b8>
                goto exit;
            msg.qos = (enum QoS)intQoS;
   1b956:	68fb      	ldr	r3, [r7, #12]
   1b958:	b2da      	uxtb	r2, r3
   1b95a:	2310      	movs	r3, #16
   1b95c:	18fb      	adds	r3, r7, r3
   1b95e:	701a      	strb	r2, [r3, #0]
            deliverMessage(c, &topicName, &msg);
   1b960:	2310      	movs	r3, #16
   1b962:	18fa      	adds	r2, r7, r3
   1b964:	2320      	movs	r3, #32
   1b966:	18f9      	adds	r1, r7, r3
   1b968:	687b      	ldr	r3, [r7, #4]
   1b96a:	0018      	movs	r0, r3
   1b96c:	4b50      	ldr	r3, [pc, #320]	; (1bab0 <cycle+0x1e0>)
   1b96e:	4798      	blx	r3
            if (msg.qos != QOS0)
   1b970:	2310      	movs	r3, #16
   1b972:	18fb      	adds	r3, r7, r3
   1b974:	781b      	ldrb	r3, [r3, #0]
   1b976:	2b00      	cmp	r3, #0
   1b978:	d100      	bne.n	1b97c <cycle+0xac>
   1b97a:	e07d      	b.n	1ba78 <cycle+0x1a8>
            {
                if (msg.qos == QOS1)
   1b97c:	2310      	movs	r3, #16
   1b97e:	18fb      	adds	r3, r7, r3
   1b980:	781b      	ldrb	r3, [r3, #0]
   1b982:	2b01      	cmp	r3, #1
   1b984:	d10f      	bne.n	1b9a6 <cycle+0xd6>
                    len = MQTTSerialize_ack(c->buf, c->buf_size, PUBACK, 0, msg.id);
   1b986:	687b      	ldr	r3, [r7, #4]
   1b988:	6918      	ldr	r0, [r3, #16]
   1b98a:	687b      	ldr	r3, [r7, #4]
   1b98c:	689b      	ldr	r3, [r3, #8]
   1b98e:	0019      	movs	r1, r3
   1b990:	2310      	movs	r3, #16
   1b992:	18fb      	adds	r3, r7, r3
   1b994:	889b      	ldrh	r3, [r3, #4]
   1b996:	9300      	str	r3, [sp, #0]
   1b998:	2300      	movs	r3, #0
   1b99a:	2204      	movs	r2, #4
   1b99c:	4c45      	ldr	r4, [pc, #276]	; (1bab4 <cycle+0x1e4>)
   1b99e:	47a0      	blx	r4
   1b9a0:	0003      	movs	r3, r0
   1b9a2:	637b      	str	r3, [r7, #52]	; 0x34
   1b9a4:	e013      	b.n	1b9ce <cycle+0xfe>
                else if (msg.qos == QOS2)
   1b9a6:	2310      	movs	r3, #16
   1b9a8:	18fb      	adds	r3, r7, r3
   1b9aa:	781b      	ldrb	r3, [r3, #0]
   1b9ac:	2b02      	cmp	r3, #2
   1b9ae:	d10e      	bne.n	1b9ce <cycle+0xfe>
                    len = MQTTSerialize_ack(c->buf, c->buf_size, PUBREC, 0, msg.id);
   1b9b0:	687b      	ldr	r3, [r7, #4]
   1b9b2:	6918      	ldr	r0, [r3, #16]
   1b9b4:	687b      	ldr	r3, [r7, #4]
   1b9b6:	689b      	ldr	r3, [r3, #8]
   1b9b8:	0019      	movs	r1, r3
   1b9ba:	2310      	movs	r3, #16
   1b9bc:	18fb      	adds	r3, r7, r3
   1b9be:	889b      	ldrh	r3, [r3, #4]
   1b9c0:	9300      	str	r3, [sp, #0]
   1b9c2:	2300      	movs	r3, #0
   1b9c4:	2205      	movs	r2, #5
   1b9c6:	4c3b      	ldr	r4, [pc, #236]	; (1bab4 <cycle+0x1e4>)
   1b9c8:	47a0      	blx	r4
   1b9ca:	0003      	movs	r3, r0
   1b9cc:	637b      	str	r3, [r7, #52]	; 0x34
                if (len <= 0)
   1b9ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   1b9d0:	2b00      	cmp	r3, #0
   1b9d2:	dc03      	bgt.n	1b9dc <cycle+0x10c>
                    rc = FAILURE;
   1b9d4:	2301      	movs	r3, #1
   1b9d6:	425b      	negs	r3, r3
   1b9d8:	633b      	str	r3, [r7, #48]	; 0x30
   1b9da:	e007      	b.n	1b9ec <cycle+0x11c>
                else
                    rc = sendPacket(c, len, timer);
   1b9dc:	683a      	ldr	r2, [r7, #0]
   1b9de:	6b79      	ldr	r1, [r7, #52]	; 0x34
   1b9e0:	687b      	ldr	r3, [r7, #4]
   1b9e2:	0018      	movs	r0, r3
   1b9e4:	4b34      	ldr	r3, [pc, #208]	; (1bab8 <cycle+0x1e8>)
   1b9e6:	4798      	blx	r3
   1b9e8:	0003      	movs	r3, r0
   1b9ea:	633b      	str	r3, [r7, #48]	; 0x30
                if (rc == FAILURE)
   1b9ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   1b9ee:	3301      	adds	r3, #1
   1b9f0:	d142      	bne.n	1ba78 <cycle+0x1a8>
                    goto exit; // there was a problem
   1b9f2:	46c0      	nop			; (mov r8, r8)
   1b9f4:	e049      	b.n	1ba8a <cycle+0x1ba>
        }
        case PUBREC:
        {
            unsigned short mypacketid;
            unsigned char dup, type;
            if (MQTTDeserialize_ack(&type, &dup, &mypacketid, c->readbuf, c->readbuf_size) != 1)
   1b9f6:	687b      	ldr	r3, [r7, #4]
   1b9f8:	695c      	ldr	r4, [r3, #20]
   1b9fa:	687b      	ldr	r3, [r7, #4]
   1b9fc:	68db      	ldr	r3, [r3, #12]
   1b9fe:	220a      	movs	r2, #10
   1ba00:	18ba      	adds	r2, r7, r2
   1ba02:	2109      	movs	r1, #9
   1ba04:	1879      	adds	r1, r7, r1
   1ba06:	2008      	movs	r0, #8
   1ba08:	1838      	adds	r0, r7, r0
   1ba0a:	9300      	str	r3, [sp, #0]
   1ba0c:	0023      	movs	r3, r4
   1ba0e:	4c2b      	ldr	r4, [pc, #172]	; (1babc <cycle+0x1ec>)
   1ba10:	47a0      	blx	r4
   1ba12:	0003      	movs	r3, r0
   1ba14:	2b01      	cmp	r3, #1
   1ba16:	d003      	beq.n	1ba20 <cycle+0x150>
                rc = FAILURE;
   1ba18:	2301      	movs	r3, #1
   1ba1a:	425b      	negs	r3, r3
   1ba1c:	633b      	str	r3, [r7, #48]	; 0x30
   1ba1e:	e023      	b.n	1ba68 <cycle+0x198>
            else if ((len = MQTTSerialize_ack(c->buf, c->buf_size, PUBREL, 0, mypacketid)) <= 0)
   1ba20:	687b      	ldr	r3, [r7, #4]
   1ba22:	6918      	ldr	r0, [r3, #16]
   1ba24:	687b      	ldr	r3, [r7, #4]
   1ba26:	689b      	ldr	r3, [r3, #8]
   1ba28:	0019      	movs	r1, r3
   1ba2a:	230a      	movs	r3, #10
   1ba2c:	18fb      	adds	r3, r7, r3
   1ba2e:	881b      	ldrh	r3, [r3, #0]
   1ba30:	9300      	str	r3, [sp, #0]
   1ba32:	2300      	movs	r3, #0
   1ba34:	2206      	movs	r2, #6
   1ba36:	4c1f      	ldr	r4, [pc, #124]	; (1bab4 <cycle+0x1e4>)
   1ba38:	47a0      	blx	r4
   1ba3a:	0003      	movs	r3, r0
   1ba3c:	637b      	str	r3, [r7, #52]	; 0x34
   1ba3e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   1ba40:	2b00      	cmp	r3, #0
   1ba42:	dc03      	bgt.n	1ba4c <cycle+0x17c>
                rc = FAILURE;
   1ba44:	2301      	movs	r3, #1
   1ba46:	425b      	negs	r3, r3
   1ba48:	633b      	str	r3, [r7, #48]	; 0x30
   1ba4a:	e00d      	b.n	1ba68 <cycle+0x198>
            else if ((rc = sendPacket(c, len, timer)) != SUCCESS) // send the PUBREL packet
   1ba4c:	683a      	ldr	r2, [r7, #0]
   1ba4e:	6b79      	ldr	r1, [r7, #52]	; 0x34
   1ba50:	687b      	ldr	r3, [r7, #4]
   1ba52:	0018      	movs	r0, r3
   1ba54:	4b18      	ldr	r3, [pc, #96]	; (1bab8 <cycle+0x1e8>)
   1ba56:	4798      	blx	r3
   1ba58:	0003      	movs	r3, r0
   1ba5a:	633b      	str	r3, [r7, #48]	; 0x30
   1ba5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   1ba5e:	2b00      	cmp	r3, #0
   1ba60:	d002      	beq.n	1ba68 <cycle+0x198>
                rc = FAILURE; // there was a problem
   1ba62:	2301      	movs	r3, #1
   1ba64:	425b      	negs	r3, r3
   1ba66:	633b      	str	r3, [r7, #48]	; 0x30
            if (rc == FAILURE)
   1ba68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   1ba6a:	3301      	adds	r3, #1
   1ba6c:	d106      	bne.n	1ba7c <cycle+0x1ac>
                goto exit; // there was a problem
   1ba6e:	e00c      	b.n	1ba8a <cycle+0x1ba>
            break;
        }
        case PUBCOMP:
            break;
        case PINGRESP:
            c->ping_outstanding = 0;
   1ba70:	687b      	ldr	r3, [r7, #4]
   1ba72:	2200      	movs	r2, #0
   1ba74:	771a      	strb	r2, [r3, #28]
            break;
   1ba76:	e002      	b.n	1ba7e <cycle+0x1ae>
            break;
   1ba78:	46c0      	nop			; (mov r8, r8)
   1ba7a:	e000      	b.n	1ba7e <cycle+0x1ae>
            break;
   1ba7c:	46c0      	nop			; (mov r8, r8)
    }
    keepalive(c);
   1ba7e:	687b      	ldr	r3, [r7, #4]
   1ba80:	0018      	movs	r0, r3
   1ba82:	4b0f      	ldr	r3, [pc, #60]	; (1bac0 <cycle+0x1f0>)
   1ba84:	4798      	blx	r3
   1ba86:	e000      	b.n	1ba8a <cycle+0x1ba>
                goto exit;
   1ba88:	46c0      	nop			; (mov r8, r8)
exit:
    if (rc == SUCCESS)
   1ba8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   1ba8c:	2b00      	cmp	r3, #0
   1ba8e:	d103      	bne.n	1ba98 <cycle+0x1c8>
        rc = packet_type;
   1ba90:	232e      	movs	r3, #46	; 0x2e
   1ba92:	18fb      	adds	r3, r7, r3
   1ba94:	881b      	ldrh	r3, [r3, #0]
   1ba96:	633b      	str	r3, [r7, #48]	; 0x30
    return rc;
   1ba98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
   1ba9a:	0018      	movs	r0, r3
   1ba9c:	46bd      	mov	sp, r7
   1ba9e:	b00f      	add	sp, #60	; 0x3c
   1baa0:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1baa2:	46c0      	nop			; (mov r8, r8)
   1baa4:	0001b585 	.word	0x0001b585
   1baa8:	00026668 	.word	0x00026668
   1baac:	0001ce49 	.word	0x0001ce49
   1bab0:	0001b741 	.word	0x0001b741
   1bab4:	0001d641 	.word	0x0001d641
   1bab8:	0001b3c9 	.word	0x0001b3c9
   1babc:	0001cf4d 	.word	0x0001cf4d
   1bac0:	0001b82d 	.word	0x0001b82d

0001bac4 <MQTTYield>:


int MQTTYield(MQTTClient* c, int timeout_ms)
{
   1bac4:	b580      	push	{r7, lr}
   1bac6:	b086      	sub	sp, #24
   1bac8:	af00      	add	r7, sp, #0
   1baca:	6078      	str	r0, [r7, #4]
   1bacc:	6039      	str	r1, [r7, #0]
    int rc = SUCCESS;
   1bace:	2300      	movs	r3, #0
   1bad0:	617b      	str	r3, [r7, #20]
    Timer timer;

    TimerInit(&timer);
   1bad2:	2308      	movs	r3, #8
   1bad4:	18fb      	adds	r3, r7, r3
   1bad6:	0018      	movs	r0, r3
   1bad8:	4b11      	ldr	r3, [pc, #68]	; (1bb20 <MQTTYield+0x5c>)
   1bada:	4798      	blx	r3
    TimerCountdownMS(&timer, timeout_ms);
   1badc:	683a      	ldr	r2, [r7, #0]
   1bade:	2308      	movs	r3, #8
   1bae0:	18fb      	adds	r3, r7, r3
   1bae2:	0011      	movs	r1, r2
   1bae4:	0018      	movs	r0, r3
   1bae6:	4b0f      	ldr	r3, [pc, #60]	; (1bb24 <MQTTYield+0x60>)
   1bae8:	4798      	blx	r3

	do
    {
        if (cycle(c, &timer) == FAILURE)
   1baea:	2308      	movs	r3, #8
   1baec:	18fa      	adds	r2, r7, r3
   1baee:	687b      	ldr	r3, [r7, #4]
   1baf0:	0011      	movs	r1, r2
   1baf2:	0018      	movs	r0, r3
   1baf4:	4b0c      	ldr	r3, [pc, #48]	; (1bb28 <MQTTYield+0x64>)
   1baf6:	4798      	blx	r3
   1baf8:	0003      	movs	r3, r0
   1bafa:	3301      	adds	r3, #1
   1bafc:	d103      	bne.n	1bb06 <MQTTYield+0x42>
        {
            rc = FAILURE;
   1bafe:	2301      	movs	r3, #1
   1bb00:	425b      	negs	r3, r3
   1bb02:	617b      	str	r3, [r7, #20]
            break;
   1bb04:	e006      	b.n	1bb14 <MQTTYield+0x50>
        }
	} while (!TimerIsExpired(&timer));
   1bb06:	2308      	movs	r3, #8
   1bb08:	18fb      	adds	r3, r7, r3
   1bb0a:	0018      	movs	r0, r3
   1bb0c:	4b07      	ldr	r3, [pc, #28]	; (1bb2c <MQTTYield+0x68>)
   1bb0e:	4798      	blx	r3
   1bb10:	1e03      	subs	r3, r0, #0
   1bb12:	d0ea      	beq.n	1baea <MQTTYield+0x26>
        
    return rc;
   1bb14:	697b      	ldr	r3, [r7, #20]
}
   1bb16:	0018      	movs	r0, r3
   1bb18:	46bd      	mov	sp, r7
   1bb1a:	b006      	add	sp, #24
   1bb1c:	bd80      	pop	{r7, pc}
   1bb1e:	46c0      	nop			; (mov r8, r8)
   1bb20:	0001c251 	.word	0x0001c251
   1bb24:	0001c1d9 	.word	0x0001c1d9
   1bb28:	0001b8d1 	.word	0x0001b8d1
   1bb2c:	0001c1ad 	.word	0x0001c1ad

0001bb30 <waitfor>:
}
#endif


int waitfor(MQTTClient* c, int packet_type, Timer* timer)
{
   1bb30:	b580      	push	{r7, lr}
   1bb32:	b086      	sub	sp, #24
   1bb34:	af00      	add	r7, sp, #0
   1bb36:	60f8      	str	r0, [r7, #12]
   1bb38:	60b9      	str	r1, [r7, #8]
   1bb3a:	607a      	str	r2, [r7, #4]
    int rc = FAILURE;
   1bb3c:	2301      	movs	r3, #1
   1bb3e:	425b      	negs	r3, r3
   1bb40:	617b      	str	r3, [r7, #20]
    
    do
    {
        if (TimerIsExpired(timer))
   1bb42:	687b      	ldr	r3, [r7, #4]
   1bb44:	0018      	movs	r0, r3
   1bb46:	4b0b      	ldr	r3, [pc, #44]	; (1bb74 <waitfor+0x44>)
   1bb48:	4798      	blx	r3
   1bb4a:	1e03      	subs	r3, r0, #0
   1bb4c:	d10c      	bne.n	1bb68 <waitfor+0x38>
            break; // we timed out
    }
    while ((rc = cycle(c, timer)) != packet_type);  
   1bb4e:	687a      	ldr	r2, [r7, #4]
   1bb50:	68fb      	ldr	r3, [r7, #12]
   1bb52:	0011      	movs	r1, r2
   1bb54:	0018      	movs	r0, r3
   1bb56:	4b08      	ldr	r3, [pc, #32]	; (1bb78 <waitfor+0x48>)
   1bb58:	4798      	blx	r3
   1bb5a:	0003      	movs	r3, r0
   1bb5c:	617b      	str	r3, [r7, #20]
   1bb5e:	697a      	ldr	r2, [r7, #20]
   1bb60:	68bb      	ldr	r3, [r7, #8]
   1bb62:	429a      	cmp	r2, r3
   1bb64:	d1ed      	bne.n	1bb42 <waitfor+0x12>
   1bb66:	e000      	b.n	1bb6a <waitfor+0x3a>
            break; // we timed out
   1bb68:	46c0      	nop			; (mov r8, r8)
    
    return rc;
   1bb6a:	697b      	ldr	r3, [r7, #20]
}
   1bb6c:	0018      	movs	r0, r3
   1bb6e:	46bd      	mov	sp, r7
   1bb70:	b006      	add	sp, #24
   1bb72:	bd80      	pop	{r7, pc}
   1bb74:	0001c1ad 	.word	0x0001c1ad
   1bb78:	0001b8d1 	.word	0x0001b8d1

0001bb7c <MQTTConnect>:


int MQTTConnect(MQTTClient* c, MQTTPacket_connectData* options)
{
   1bb7c:	b590      	push	{r4, r7, lr}
   1bb7e:	b09f      	sub	sp, #124	; 0x7c
   1bb80:	af00      	add	r7, sp, #0
   1bb82:	6078      	str	r0, [r7, #4]
   1bb84:	6039      	str	r1, [r7, #0]
    Timer connect_timer;
    int rc = FAILURE;
   1bb86:	2301      	movs	r3, #1
   1bb88:	425b      	negs	r3, r3
   1bb8a:	677b      	str	r3, [r7, #116]	; 0x74
    MQTTPacket_connectData default_options = MQTTPacket_connectData_initializer;
   1bb8c:	230c      	movs	r3, #12
   1bb8e:	18fa      	adds	r2, r7, r3
   1bb90:	4b41      	ldr	r3, [pc, #260]	; (1bc98 <MQTTConnect+0x11c>)
   1bb92:	0010      	movs	r0, r2
   1bb94:	0019      	movs	r1, r3
   1bb96:	2358      	movs	r3, #88	; 0x58
   1bb98:	001a      	movs	r2, r3
   1bb9a:	4b40      	ldr	r3, [pc, #256]	; (1bc9c <MQTTConnect+0x120>)
   1bb9c:	4798      	blx	r3
    int len = 0;
   1bb9e:	2300      	movs	r3, #0
   1bba0:	673b      	str	r3, [r7, #112]	; 0x70

#if defined(MQTT_TASK)
	MutexLock(&c->mutex);
#endif
	if (c->isconnected) /* don't send connect packet again if we are already connected */
   1bba2:	687b      	ldr	r3, [r7, #4]
   1bba4:	6a1b      	ldr	r3, [r3, #32]
   1bba6:	2b00      	cmp	r3, #0
   1bba8:	d166      	bne.n	1bc78 <MQTTConnect+0xfc>
		goto exit;
    
    TimerInit(&connect_timer);
   1bbaa:	2364      	movs	r3, #100	; 0x64
   1bbac:	18fb      	adds	r3, r7, r3
   1bbae:	0018      	movs	r0, r3
   1bbb0:	4b3b      	ldr	r3, [pc, #236]	; (1bca0 <MQTTConnect+0x124>)
   1bbb2:	4798      	blx	r3
    TimerCountdownMS(&connect_timer, c->command_timeout_ms);
   1bbb4:	687b      	ldr	r3, [r7, #4]
   1bbb6:	685a      	ldr	r2, [r3, #4]
   1bbb8:	2364      	movs	r3, #100	; 0x64
   1bbba:	18fb      	adds	r3, r7, r3
   1bbbc:	0011      	movs	r1, r2
   1bbbe:	0018      	movs	r0, r3
   1bbc0:	4b38      	ldr	r3, [pc, #224]	; (1bca4 <MQTTConnect+0x128>)
   1bbc2:	4798      	blx	r3

    if (options == 0)
   1bbc4:	683b      	ldr	r3, [r7, #0]
   1bbc6:	2b00      	cmp	r3, #0
   1bbc8:	d102      	bne.n	1bbd0 <MQTTConnect+0x54>
        options = &default_options; /* set default options if none were supplied */
   1bbca:	230c      	movs	r3, #12
   1bbcc:	18fb      	adds	r3, r7, r3
   1bbce:	603b      	str	r3, [r7, #0]
    
    c->keepAliveInterval = options->keepAliveInterval;
   1bbd0:	683b      	ldr	r3, [r7, #0]
   1bbd2:	8b1b      	ldrh	r3, [r3, #24]
   1bbd4:	001a      	movs	r2, r3
   1bbd6:	687b      	ldr	r3, [r7, #4]
   1bbd8:	619a      	str	r2, [r3, #24]
    TimerCountdown(&c->ping_timer, c->keepAliveInterval);
   1bbda:	687b      	ldr	r3, [r7, #4]
   1bbdc:	3354      	adds	r3, #84	; 0x54
   1bbde:	001a      	movs	r2, r3
   1bbe0:	687b      	ldr	r3, [r7, #4]
   1bbe2:	699b      	ldr	r3, [r3, #24]
   1bbe4:	0019      	movs	r1, r3
   1bbe6:	0010      	movs	r0, r2
   1bbe8:	4b2f      	ldr	r3, [pc, #188]	; (1bca8 <MQTTConnect+0x12c>)
   1bbea:	4798      	blx	r3
    if ((len = MQTTSerialize_connect(c->buf, c->buf_size, options)) <= 0)
   1bbec:	687b      	ldr	r3, [r7, #4]
   1bbee:	6918      	ldr	r0, [r3, #16]
   1bbf0:	687b      	ldr	r3, [r7, #4]
   1bbf2:	689b      	ldr	r3, [r3, #8]
   1bbf4:	0019      	movs	r1, r3
   1bbf6:	683b      	ldr	r3, [r7, #0]
   1bbf8:	001a      	movs	r2, r3
   1bbfa:	4b2c      	ldr	r3, [pc, #176]	; (1bcac <MQTTConnect+0x130>)
   1bbfc:	4798      	blx	r3
   1bbfe:	0003      	movs	r3, r0
   1bc00:	673b      	str	r3, [r7, #112]	; 0x70
   1bc02:	6f3b      	ldr	r3, [r7, #112]	; 0x70
   1bc04:	2b00      	cmp	r3, #0
   1bc06:	dd39      	ble.n	1bc7c <MQTTConnect+0x100>
        goto exit;
    if ((rc = sendPacket(c, len, &connect_timer)) != SUCCESS)  // send the connect packet
   1bc08:	2364      	movs	r3, #100	; 0x64
   1bc0a:	18fa      	adds	r2, r7, r3
   1bc0c:	6f39      	ldr	r1, [r7, #112]	; 0x70
   1bc0e:	687b      	ldr	r3, [r7, #4]
   1bc10:	0018      	movs	r0, r3
   1bc12:	4b27      	ldr	r3, [pc, #156]	; (1bcb0 <MQTTConnect+0x134>)
   1bc14:	4798      	blx	r3
   1bc16:	0003      	movs	r3, r0
   1bc18:	677b      	str	r3, [r7, #116]	; 0x74
   1bc1a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   1bc1c:	2b00      	cmp	r3, #0
   1bc1e:	d12f      	bne.n	1bc80 <MQTTConnect+0x104>
        goto exit; // there was a problem
    
    // this will be a blocking call, wait for the connack
    if (waitfor(c, CONNACK, &connect_timer) == CONNACK)
   1bc20:	2364      	movs	r3, #100	; 0x64
   1bc22:	18fa      	adds	r2, r7, r3
   1bc24:	687b      	ldr	r3, [r7, #4]
   1bc26:	2102      	movs	r1, #2
   1bc28:	0018      	movs	r0, r3
   1bc2a:	4b22      	ldr	r3, [pc, #136]	; (1bcb4 <MQTTConnect+0x138>)
   1bc2c:	4798      	blx	r3
   1bc2e:	0003      	movs	r3, r0
   1bc30:	2b02      	cmp	r3, #2
   1bc32:	d11d      	bne.n	1bc70 <MQTTConnect+0xf4>
    {
        unsigned char connack_rc = 255;
   1bc34:	230b      	movs	r3, #11
   1bc36:	18fb      	adds	r3, r7, r3
   1bc38:	22ff      	movs	r2, #255	; 0xff
   1bc3a:	701a      	strb	r2, [r3, #0]
        unsigned char sessionPresent = 0;
   1bc3c:	230a      	movs	r3, #10
   1bc3e:	18fb      	adds	r3, r7, r3
   1bc40:	2200      	movs	r2, #0
   1bc42:	701a      	strb	r2, [r3, #0]
        if (MQTTDeserialize_connack(&sessionPresent, &connack_rc, c->readbuf, c->readbuf_size) == 1)
   1bc44:	687b      	ldr	r3, [r7, #4]
   1bc46:	695a      	ldr	r2, [r3, #20]
   1bc48:	687b      	ldr	r3, [r7, #4]
   1bc4a:	68db      	ldr	r3, [r3, #12]
   1bc4c:	210b      	movs	r1, #11
   1bc4e:	1879      	adds	r1, r7, r1
   1bc50:	200a      	movs	r0, #10
   1bc52:	1838      	adds	r0, r7, r0
   1bc54:	4c18      	ldr	r4, [pc, #96]	; (1bcb8 <MQTTConnect+0x13c>)
   1bc56:	47a0      	blx	r4
   1bc58:	0003      	movs	r3, r0
   1bc5a:	2b01      	cmp	r3, #1
   1bc5c:	d104      	bne.n	1bc68 <MQTTConnect+0xec>
            rc = connack_rc;
   1bc5e:	230b      	movs	r3, #11
   1bc60:	18fb      	adds	r3, r7, r3
   1bc62:	781b      	ldrb	r3, [r3, #0]
   1bc64:	677b      	str	r3, [r7, #116]	; 0x74
   1bc66:	e00c      	b.n	1bc82 <MQTTConnect+0x106>
        else
            rc = FAILURE;
   1bc68:	2301      	movs	r3, #1
   1bc6a:	425b      	negs	r3, r3
   1bc6c:	677b      	str	r3, [r7, #116]	; 0x74
   1bc6e:	e008      	b.n	1bc82 <MQTTConnect+0x106>
    }
    else
        rc = FAILURE;
   1bc70:	2301      	movs	r3, #1
   1bc72:	425b      	negs	r3, r3
   1bc74:	677b      	str	r3, [r7, #116]	; 0x74
   1bc76:	e004      	b.n	1bc82 <MQTTConnect+0x106>
		goto exit;
   1bc78:	46c0      	nop			; (mov r8, r8)
   1bc7a:	e002      	b.n	1bc82 <MQTTConnect+0x106>
        goto exit;
   1bc7c:	46c0      	nop			; (mov r8, r8)
   1bc7e:	e000      	b.n	1bc82 <MQTTConnect+0x106>
        goto exit; // there was a problem
   1bc80:	46c0      	nop			; (mov r8, r8)
    
exit:
    if (rc == SUCCESS)
   1bc82:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   1bc84:	2b00      	cmp	r3, #0
   1bc86:	d102      	bne.n	1bc8e <MQTTConnect+0x112>
        c->isconnected = 1;
   1bc88:	687b      	ldr	r3, [r7, #4]
   1bc8a:	2201      	movs	r2, #1
   1bc8c:	621a      	str	r2, [r3, #32]

#if defined(MQTT_TASK)
	MutexUnlock(&c->mutex);
#endif

    return rc;
   1bc8e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
}
   1bc90:	0018      	movs	r0, r3
   1bc92:	46bd      	mov	sp, r7
   1bc94:	b01f      	add	sp, #124	; 0x7c
   1bc96:	bd90      	pop	{r4, r7, pc}
   1bc98:	000266a0 	.word	0x000266a0
   1bc9c:	000217e5 	.word	0x000217e5
   1bca0:	0001c251 	.word	0x0001c251
   1bca4:	0001c1d9 	.word	0x0001c1d9
   1bca8:	0001c201 	.word	0x0001c201
   1bcac:	0001ca2d 	.word	0x0001ca2d
   1bcb0:	0001b3c9 	.word	0x0001b3c9
   1bcb4:	0001bb31 	.word	0x0001bb31
   1bcb8:	0001cca9 	.word	0x0001cca9

0001bcbc <MQTTSubscribe>:


int MQTTSubscribe(MQTTClient* c, const char* topicFilter, enum QoS qos, messageHandler msgHandler)
{ 
   1bcbc:	b5b0      	push	{r4, r5, r7, lr}
   1bcbe:	b096      	sub	sp, #88	; 0x58
   1bcc0:	af04      	add	r7, sp, #16
   1bcc2:	60f8      	str	r0, [r7, #12]
   1bcc4:	60b9      	str	r1, [r7, #8]
   1bcc6:	603b      	str	r3, [r7, #0]
   1bcc8:	1dfb      	adds	r3, r7, #7
   1bcca:	701a      	strb	r2, [r3, #0]
    int rc = FAILURE;  
   1bccc:	2301      	movs	r3, #1
   1bcce:	425b      	negs	r3, r3
   1bcd0:	647b      	str	r3, [r7, #68]	; 0x44
    Timer timer;
    int len = 0;
   1bcd2:	2300      	movs	r3, #0
   1bcd4:	63fb      	str	r3, [r7, #60]	; 0x3c
    MQTTString topic = MQTTString_initializer;
   1bcd6:	2324      	movs	r3, #36	; 0x24
   1bcd8:	18fb      	adds	r3, r7, r3
   1bcda:	2200      	movs	r2, #0
   1bcdc:	601a      	str	r2, [r3, #0]
   1bcde:	2324      	movs	r3, #36	; 0x24
   1bce0:	18fb      	adds	r3, r7, r3
   1bce2:	2200      	movs	r2, #0
   1bce4:	605a      	str	r2, [r3, #4]
   1bce6:	2324      	movs	r3, #36	; 0x24
   1bce8:	18fb      	adds	r3, r7, r3
   1bcea:	2200      	movs	r2, #0
   1bcec:	609a      	str	r2, [r3, #8]
	int Qoss = (int) qos;
   1bcee:	1dfb      	adds	r3, r7, #7
   1bcf0:	781b      	ldrb	r3, [r3, #0]
   1bcf2:	623b      	str	r3, [r7, #32]
    topic.cstring = (char *)topicFilter;
   1bcf4:	2324      	movs	r3, #36	; 0x24
   1bcf6:	18fb      	adds	r3, r7, r3
   1bcf8:	68ba      	ldr	r2, [r7, #8]
   1bcfa:	601a      	str	r2, [r3, #0]
    
#if defined(MQTT_TASK)
	MutexLock(&c->mutex);
#endif
	if (!c->isconnected)
   1bcfc:	68fb      	ldr	r3, [r7, #12]
   1bcfe:	6a1b      	ldr	r3, [r3, #32]
   1bd00:	2b00      	cmp	r3, #0
   1bd02:	d100      	bne.n	1bd06 <MQTTSubscribe+0x4a>
   1bd04:	e088      	b.n	1be18 <MQTTSubscribe+0x15c>
		goto exit;

    TimerInit(&timer);
   1bd06:	2330      	movs	r3, #48	; 0x30
   1bd08:	18fb      	adds	r3, r7, r3
   1bd0a:	0018      	movs	r0, r3
   1bd0c:	4b47      	ldr	r3, [pc, #284]	; (1be2c <MQTTSubscribe+0x170>)
   1bd0e:	4798      	blx	r3
    TimerCountdownMS(&timer, c->command_timeout_ms);
   1bd10:	68fb      	ldr	r3, [r7, #12]
   1bd12:	685a      	ldr	r2, [r3, #4]
   1bd14:	2330      	movs	r3, #48	; 0x30
   1bd16:	18fb      	adds	r3, r7, r3
   1bd18:	0011      	movs	r1, r2
   1bd1a:	0018      	movs	r0, r3
   1bd1c:	4b44      	ldr	r3, [pc, #272]	; (1be30 <MQTTSubscribe+0x174>)
   1bd1e:	4798      	blx	r3
    
	len = MQTTSerialize_subscribe(c->buf, c->buf_size, 0, getNextPacketId(c), 1, &topic, (int*)&Qoss);
   1bd20:	68fb      	ldr	r3, [r7, #12]
   1bd22:	691c      	ldr	r4, [r3, #16]
   1bd24:	68fb      	ldr	r3, [r7, #12]
   1bd26:	689b      	ldr	r3, [r3, #8]
   1bd28:	001d      	movs	r5, r3
   1bd2a:	68fb      	ldr	r3, [r7, #12]
   1bd2c:	0018      	movs	r0, r3
   1bd2e:	4b41      	ldr	r3, [pc, #260]	; (1be34 <MQTTSubscribe+0x178>)
   1bd30:	4798      	blx	r3
   1bd32:	0003      	movs	r3, r0
   1bd34:	b29a      	uxth	r2, r3
   1bd36:	2320      	movs	r3, #32
   1bd38:	18fb      	adds	r3, r7, r3
   1bd3a:	9302      	str	r3, [sp, #8]
   1bd3c:	2324      	movs	r3, #36	; 0x24
   1bd3e:	18fb      	adds	r3, r7, r3
   1bd40:	9301      	str	r3, [sp, #4]
   1bd42:	2301      	movs	r3, #1
   1bd44:	9300      	str	r3, [sp, #0]
   1bd46:	0013      	movs	r3, r2
   1bd48:	2200      	movs	r2, #0
   1bd4a:	0029      	movs	r1, r5
   1bd4c:	0020      	movs	r0, r4
   1bd4e:	4c3a      	ldr	r4, [pc, #232]	; (1be38 <MQTTSubscribe+0x17c>)
   1bd50:	47a0      	blx	r4
   1bd52:	0003      	movs	r3, r0
   1bd54:	63fb      	str	r3, [r7, #60]	; 0x3c
 //   len = MQTTSerialize_subscribe(c->buf, c->buf_size, 0, getNextPacketId(c), 1, &topic, qos);
    if (len <= 0)
   1bd56:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   1bd58:	2b00      	cmp	r3, #0
   1bd5a:	dd5f      	ble.n	1be1c <MQTTSubscribe+0x160>
        goto exit;
    if ((rc = sendPacket(c, len, &timer)) != SUCCESS) // send the subscribe packet
   1bd5c:	2330      	movs	r3, #48	; 0x30
   1bd5e:	18fa      	adds	r2, r7, r3
   1bd60:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
   1bd62:	68fb      	ldr	r3, [r7, #12]
   1bd64:	0018      	movs	r0, r3
   1bd66:	4b35      	ldr	r3, [pc, #212]	; (1be3c <MQTTSubscribe+0x180>)
   1bd68:	4798      	blx	r3
   1bd6a:	0003      	movs	r3, r0
   1bd6c:	647b      	str	r3, [r7, #68]	; 0x44
   1bd6e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   1bd70:	2b00      	cmp	r3, #0
   1bd72:	d155      	bne.n	1be20 <MQTTSubscribe+0x164>
        goto exit;             // there was a problem
    
    if (waitfor(c, SUBACK, &timer) == SUBACK)      // wait for suback 
   1bd74:	2330      	movs	r3, #48	; 0x30
   1bd76:	18fa      	adds	r2, r7, r3
   1bd78:	68fb      	ldr	r3, [r7, #12]
   1bd7a:	2109      	movs	r1, #9
   1bd7c:	0018      	movs	r0, r3
   1bd7e:	4b30      	ldr	r3, [pc, #192]	; (1be40 <MQTTSubscribe+0x184>)
   1bd80:	4798      	blx	r3
   1bd82:	0003      	movs	r3, r0
   1bd84:	2b09      	cmp	r3, #9
   1bd86:	d143      	bne.n	1be10 <MQTTSubscribe+0x154>
    {
        int count = 0, grantedQoS = -1;
   1bd88:	2300      	movs	r3, #0
   1bd8a:	61fb      	str	r3, [r7, #28]
   1bd8c:	2301      	movs	r3, #1
   1bd8e:	425b      	negs	r3, r3
   1bd90:	61bb      	str	r3, [r7, #24]
        unsigned short mypacketid;
        if (MQTTDeserialize_suback(&mypacketid, 1, &count, &grantedQoS, c->readbuf, c->readbuf_size) == 1)
   1bd92:	68fb      	ldr	r3, [r7, #12]
   1bd94:	695a      	ldr	r2, [r3, #20]
   1bd96:	68fb      	ldr	r3, [r7, #12]
   1bd98:	68db      	ldr	r3, [r3, #12]
   1bd9a:	001c      	movs	r4, r3
   1bd9c:	2318      	movs	r3, #24
   1bd9e:	18fb      	adds	r3, r7, r3
   1bda0:	211c      	movs	r1, #28
   1bda2:	1879      	adds	r1, r7, r1
   1bda4:	2016      	movs	r0, #22
   1bda6:	1838      	adds	r0, r7, r0
   1bda8:	9401      	str	r4, [sp, #4]
   1bdaa:	9200      	str	r2, [sp, #0]
   1bdac:	000a      	movs	r2, r1
   1bdae:	2101      	movs	r1, #1
   1bdb0:	4c24      	ldr	r4, [pc, #144]	; (1be44 <MQTTSubscribe+0x188>)
   1bdb2:	47a0      	blx	r4
   1bdb4:	0003      	movs	r3, r0
   1bdb6:	2b01      	cmp	r3, #1
   1bdb8:	d101      	bne.n	1bdbe <MQTTSubscribe+0x102>
            rc = grantedQoS; // 0, 1, 2 or 0x80 
   1bdba:	69bb      	ldr	r3, [r7, #24]
   1bdbc:	647b      	str	r3, [r7, #68]	; 0x44
        if (rc != 0x80)
   1bdbe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   1bdc0:	2b80      	cmp	r3, #128	; 0x80
   1bdc2:	d02e      	beq.n	1be22 <MQTTSubscribe+0x166>
        {
            int i;
            for (i = 0; i < MAX_MESSAGE_HANDLERS; ++i)
   1bdc4:	2300      	movs	r3, #0
   1bdc6:	643b      	str	r3, [r7, #64]	; 0x40
   1bdc8:	e01e      	b.n	1be08 <MQTTSubscribe+0x14c>
            {
                if (c->messageHandlers[i].topicFilter == 0)
   1bdca:	68fa      	ldr	r2, [r7, #12]
   1bdcc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   1bdce:	3304      	adds	r3, #4
   1bdd0:	00db      	lsls	r3, r3, #3
   1bdd2:	18d3      	adds	r3, r2, r3
   1bdd4:	3304      	adds	r3, #4
   1bdd6:	681b      	ldr	r3, [r3, #0]
   1bdd8:	2b00      	cmp	r3, #0
   1bdda:	d112      	bne.n	1be02 <MQTTSubscribe+0x146>
                {
                    c->messageHandlers[i].topicFilter = topicFilter;
   1bddc:	68fa      	ldr	r2, [r7, #12]
   1bdde:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   1bde0:	3304      	adds	r3, #4
   1bde2:	00db      	lsls	r3, r3, #3
   1bde4:	18d3      	adds	r3, r2, r3
   1bde6:	3304      	adds	r3, #4
   1bde8:	68ba      	ldr	r2, [r7, #8]
   1bdea:	601a      	str	r2, [r3, #0]
                    c->messageHandlers[i].fp = msgHandler;
   1bdec:	68fa      	ldr	r2, [r7, #12]
   1bdee:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   1bdf0:	3304      	adds	r3, #4
   1bdf2:	00db      	lsls	r3, r3, #3
   1bdf4:	18d3      	adds	r3, r2, r3
   1bdf6:	3308      	adds	r3, #8
   1bdf8:	683a      	ldr	r2, [r7, #0]
   1bdfa:	601a      	str	r2, [r3, #0]
                    rc = 0;
   1bdfc:	2300      	movs	r3, #0
   1bdfe:	647b      	str	r3, [r7, #68]	; 0x44
                    break;
   1be00:	e00f      	b.n	1be22 <MQTTSubscribe+0x166>
            for (i = 0; i < MAX_MESSAGE_HANDLERS; ++i)
   1be02:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   1be04:	3301      	adds	r3, #1
   1be06:	643b      	str	r3, [r7, #64]	; 0x40
   1be08:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   1be0a:	2b04      	cmp	r3, #4
   1be0c:	dddd      	ble.n	1bdca <MQTTSubscribe+0x10e>
   1be0e:	e008      	b.n	1be22 <MQTTSubscribe+0x166>
                }
            }
        }
    }
    else 
        rc = FAILURE;
   1be10:	2301      	movs	r3, #1
   1be12:	425b      	negs	r3, r3
   1be14:	647b      	str	r3, [r7, #68]	; 0x44
   1be16:	e004      	b.n	1be22 <MQTTSubscribe+0x166>
		goto exit;
   1be18:	46c0      	nop			; (mov r8, r8)
   1be1a:	e002      	b.n	1be22 <MQTTSubscribe+0x166>
        goto exit;
   1be1c:	46c0      	nop			; (mov r8, r8)
   1be1e:	e000      	b.n	1be22 <MQTTSubscribe+0x166>
        goto exit;             // there was a problem
   1be20:	46c0      	nop			; (mov r8, r8)
        
exit:
#if defined(MQTT_TASK)
	MutexUnlock(&c->mutex);
#endif
    return rc;
   1be22:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
   1be24:	0018      	movs	r0, r3
   1be26:	46bd      	mov	sp, r7
   1be28:	b012      	add	sp, #72	; 0x48
   1be2a:	bdb0      	pop	{r4, r5, r7, pc}
   1be2c:	0001c251 	.word	0x0001c251
   1be30:	0001c1d9 	.word	0x0001c1d9
   1be34:	0001b399 	.word	0x0001b399
   1be38:	0001d789 	.word	0x0001d789
   1be3c:	0001b3c9 	.word	0x0001b3c9
   1be40:	0001bb31 	.word	0x0001bb31
   1be44:	0001d8d9 	.word	0x0001d8d9

0001be48 <MQTTPublish>:
    return rc;
}


int MQTTPublish(MQTTClient* c, const char* topicName, MQTTMessage* message)
{
   1be48:	b5f0      	push	{r4, r5, r6, r7, lr}
   1be4a:	46ce      	mov	lr, r9
   1be4c:	4647      	mov	r7, r8
   1be4e:	b580      	push	{r7, lr}
   1be50:	b097      	sub	sp, #92	; 0x5c
   1be52:	af08      	add	r7, sp, #32
   1be54:	60f8      	str	r0, [r7, #12]
   1be56:	60b9      	str	r1, [r7, #8]
   1be58:	607a      	str	r2, [r7, #4]
    int rc = FAILURE;
   1be5a:	2301      	movs	r3, #1
   1be5c:	425b      	negs	r3, r3
   1be5e:	637b      	str	r3, [r7, #52]	; 0x34
    Timer timer;   
    MQTTString topic = MQTTString_initializer;
   1be60:	2318      	movs	r3, #24
   1be62:	18fb      	adds	r3, r7, r3
   1be64:	2200      	movs	r2, #0
   1be66:	601a      	str	r2, [r3, #0]
   1be68:	2318      	movs	r3, #24
   1be6a:	18fb      	adds	r3, r7, r3
   1be6c:	2200      	movs	r2, #0
   1be6e:	605a      	str	r2, [r3, #4]
   1be70:	2318      	movs	r3, #24
   1be72:	18fb      	adds	r3, r7, r3
   1be74:	2200      	movs	r2, #0
   1be76:	609a      	str	r2, [r3, #8]
    topic.cstring = (char *)topicName;
   1be78:	2318      	movs	r3, #24
   1be7a:	18fb      	adds	r3, r7, r3
   1be7c:	68ba      	ldr	r2, [r7, #8]
   1be7e:	601a      	str	r2, [r3, #0]
    int len = 0;
   1be80:	2300      	movs	r3, #0
   1be82:	633b      	str	r3, [r7, #48]	; 0x30

#if defined(MQTT_TASK)
	MutexLock(&c->mutex);
#endif
	if (!c->isconnected)
   1be84:	68fb      	ldr	r3, [r7, #12]
   1be86:	6a1b      	ldr	r3, [r3, #32]
   1be88:	2b00      	cmp	r3, #0
   1be8a:	d100      	bne.n	1be8e <MQTTPublish+0x46>
   1be8c:	e0a0      	b.n	1bfd0 <MQTTPublish+0x188>
		goto exit;

    TimerInit(&timer);
   1be8e:	2324      	movs	r3, #36	; 0x24
   1be90:	18fb      	adds	r3, r7, r3
   1be92:	0018      	movs	r0, r3
   1be94:	4b55      	ldr	r3, [pc, #340]	; (1bfec <MQTTPublish+0x1a4>)
   1be96:	4798      	blx	r3
    TimerCountdownMS(&timer, c->command_timeout_ms);
   1be98:	68fb      	ldr	r3, [r7, #12]
   1be9a:	685a      	ldr	r2, [r3, #4]
   1be9c:	2324      	movs	r3, #36	; 0x24
   1be9e:	18fb      	adds	r3, r7, r3
   1bea0:	0011      	movs	r1, r2
   1bea2:	0018      	movs	r0, r3
   1bea4:	4b52      	ldr	r3, [pc, #328]	; (1bff0 <MQTTPublish+0x1a8>)
   1bea6:	4798      	blx	r3

    if (message->qos == QOS1 || message->qos == QOS2)
   1bea8:	687b      	ldr	r3, [r7, #4]
   1beaa:	781b      	ldrb	r3, [r3, #0]
   1beac:	2b01      	cmp	r3, #1
   1beae:	d003      	beq.n	1beb8 <MQTTPublish+0x70>
   1beb0:	687b      	ldr	r3, [r7, #4]
   1beb2:	781b      	ldrb	r3, [r3, #0]
   1beb4:	2b02      	cmp	r3, #2
   1beb6:	d107      	bne.n	1bec8 <MQTTPublish+0x80>
        message->id = getNextPacketId(c);
   1beb8:	68fb      	ldr	r3, [r7, #12]
   1beba:	0018      	movs	r0, r3
   1bebc:	4b4d      	ldr	r3, [pc, #308]	; (1bff4 <MQTTPublish+0x1ac>)
   1bebe:	4798      	blx	r3
   1bec0:	0003      	movs	r3, r0
   1bec2:	b29a      	uxth	r2, r3
   1bec4:	687b      	ldr	r3, [r7, #4]
   1bec6:	809a      	strh	r2, [r3, #4]
    
    len = MQTTSerialize_publish(c->buf, c->buf_size, 0, message->qos, message->retained, message->id, 
   1bec8:	68fb      	ldr	r3, [r7, #12]
   1beca:	691b      	ldr	r3, [r3, #16]
   1becc:	469c      	mov	ip, r3
   1bece:	68fb      	ldr	r3, [r7, #12]
   1bed0:	689b      	ldr	r3, [r3, #8]
   1bed2:	001d      	movs	r5, r3
   1bed4:	687b      	ldr	r3, [r7, #4]
   1bed6:	781b      	ldrb	r3, [r3, #0]
   1bed8:	001e      	movs	r6, r3
   1beda:	687b      	ldr	r3, [r7, #4]
   1bedc:	785b      	ldrb	r3, [r3, #1]
   1bede:	4698      	mov	r8, r3
   1bee0:	687b      	ldr	r3, [r7, #4]
   1bee2:	889b      	ldrh	r3, [r3, #4]
   1bee4:	4699      	mov	r9, r3
              topic, (unsigned char*)message->payload, message->payloadlen);
   1bee6:	687b      	ldr	r3, [r7, #4]
   1bee8:	689a      	ldr	r2, [r3, #8]
   1beea:	687b      	ldr	r3, [r7, #4]
   1beec:	68db      	ldr	r3, [r3, #12]
    len = MQTTSerialize_publish(c->buf, c->buf_size, 0, message->qos, message->retained, message->id, 
   1beee:	9306      	str	r3, [sp, #24]
   1bef0:	9205      	str	r2, [sp, #20]
   1bef2:	2318      	movs	r3, #24
   1bef4:	18fa      	adds	r2, r7, r3
   1bef6:	2308      	movs	r3, #8
   1bef8:	446b      	add	r3, sp
   1befa:	ca13      	ldmia	r2!, {r0, r1, r4}
   1befc:	c313      	stmia	r3!, {r0, r1, r4}
   1befe:	464b      	mov	r3, r9
   1bf00:	9301      	str	r3, [sp, #4]
   1bf02:	4643      	mov	r3, r8
   1bf04:	9300      	str	r3, [sp, #0]
   1bf06:	0033      	movs	r3, r6
   1bf08:	2200      	movs	r2, #0
   1bf0a:	0029      	movs	r1, r5
   1bf0c:	4660      	mov	r0, ip
   1bf0e:	4c3a      	ldr	r4, [pc, #232]	; (1bff8 <MQTTPublish+0x1b0>)
   1bf10:	47a0      	blx	r4
   1bf12:	0003      	movs	r3, r0
   1bf14:	633b      	str	r3, [r7, #48]	; 0x30
    if (len <= 0)
   1bf16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   1bf18:	2b00      	cmp	r3, #0
   1bf1a:	dd5b      	ble.n	1bfd4 <MQTTPublish+0x18c>
        goto exit;
    if ((rc = sendPacket(c, len, &timer)) != SUCCESS) // send the subscribe packet
   1bf1c:	2324      	movs	r3, #36	; 0x24
   1bf1e:	18fa      	adds	r2, r7, r3
   1bf20:	6b39      	ldr	r1, [r7, #48]	; 0x30
   1bf22:	68fb      	ldr	r3, [r7, #12]
   1bf24:	0018      	movs	r0, r3
   1bf26:	4b35      	ldr	r3, [pc, #212]	; (1bffc <MQTTPublish+0x1b4>)
   1bf28:	4798      	blx	r3
   1bf2a:	0003      	movs	r3, r0
   1bf2c:	637b      	str	r3, [r7, #52]	; 0x34
   1bf2e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   1bf30:	2b00      	cmp	r3, #0
   1bf32:	d151      	bne.n	1bfd8 <MQTTPublish+0x190>
        goto exit; // there was a problem
    
    if (message->qos == QOS1)
   1bf34:	687b      	ldr	r3, [r7, #4]
   1bf36:	781b      	ldrb	r3, [r3, #0]
   1bf38:	2b01      	cmp	r3, #1
   1bf3a:	d122      	bne.n	1bf82 <MQTTPublish+0x13a>
    {
        if (waitfor(c, PUBACK, &timer) == PUBACK)
   1bf3c:	2324      	movs	r3, #36	; 0x24
   1bf3e:	18fa      	adds	r2, r7, r3
   1bf40:	68fb      	ldr	r3, [r7, #12]
   1bf42:	2104      	movs	r1, #4
   1bf44:	0018      	movs	r0, r3
   1bf46:	4b2e      	ldr	r3, [pc, #184]	; (1c000 <MQTTPublish+0x1b8>)
   1bf48:	4798      	blx	r3
   1bf4a:	0003      	movs	r3, r0
   1bf4c:	2b04      	cmp	r3, #4
   1bf4e:	d114      	bne.n	1bf7a <MQTTPublish+0x132>
        {
            unsigned short mypacketid;
            unsigned char dup, type;
            if (MQTTDeserialize_ack(&type, &dup, &mypacketid, c->readbuf, c->readbuf_size) != 1)
   1bf50:	68fb      	ldr	r3, [r7, #12]
   1bf52:	695c      	ldr	r4, [r3, #20]
   1bf54:	68fb      	ldr	r3, [r7, #12]
   1bf56:	68db      	ldr	r3, [r3, #12]
   1bf58:	2216      	movs	r2, #22
   1bf5a:	18ba      	adds	r2, r7, r2
   1bf5c:	2115      	movs	r1, #21
   1bf5e:	1879      	adds	r1, r7, r1
   1bf60:	2014      	movs	r0, #20
   1bf62:	1838      	adds	r0, r7, r0
   1bf64:	9300      	str	r3, [sp, #0]
   1bf66:	0023      	movs	r3, r4
   1bf68:	4c26      	ldr	r4, [pc, #152]	; (1c004 <MQTTPublish+0x1bc>)
   1bf6a:	47a0      	blx	r4
   1bf6c:	0003      	movs	r3, r0
   1bf6e:	2b01      	cmp	r3, #1
   1bf70:	d033      	beq.n	1bfda <MQTTPublish+0x192>
                rc = FAILURE;
   1bf72:	2301      	movs	r3, #1
   1bf74:	425b      	negs	r3, r3
   1bf76:	637b      	str	r3, [r7, #52]	; 0x34
   1bf78:	e02f      	b.n	1bfda <MQTTPublish+0x192>
        }
        else
            rc = FAILURE;
   1bf7a:	2301      	movs	r3, #1
   1bf7c:	425b      	negs	r3, r3
   1bf7e:	637b      	str	r3, [r7, #52]	; 0x34
   1bf80:	e02b      	b.n	1bfda <MQTTPublish+0x192>
    }
    else if (message->qos == QOS2)
   1bf82:	687b      	ldr	r3, [r7, #4]
   1bf84:	781b      	ldrb	r3, [r3, #0]
   1bf86:	2b02      	cmp	r3, #2
   1bf88:	d127      	bne.n	1bfda <MQTTPublish+0x192>
    {
        if (waitfor(c, PUBCOMP, &timer) == PUBCOMP)
   1bf8a:	2324      	movs	r3, #36	; 0x24
   1bf8c:	18fa      	adds	r2, r7, r3
   1bf8e:	68fb      	ldr	r3, [r7, #12]
   1bf90:	2107      	movs	r1, #7
   1bf92:	0018      	movs	r0, r3
   1bf94:	4b1a      	ldr	r3, [pc, #104]	; (1c000 <MQTTPublish+0x1b8>)
   1bf96:	4798      	blx	r3
   1bf98:	0003      	movs	r3, r0
   1bf9a:	2b07      	cmp	r3, #7
   1bf9c:	d114      	bne.n	1bfc8 <MQTTPublish+0x180>
        {
            unsigned short mypacketid;
            unsigned char dup, type;
            if (MQTTDeserialize_ack(&type, &dup, &mypacketid, c->readbuf, c->readbuf_size) != 1)
   1bf9e:	68fb      	ldr	r3, [r7, #12]
   1bfa0:	695c      	ldr	r4, [r3, #20]
   1bfa2:	68fb      	ldr	r3, [r7, #12]
   1bfa4:	68db      	ldr	r3, [r3, #12]
   1bfa6:	2212      	movs	r2, #18
   1bfa8:	18ba      	adds	r2, r7, r2
   1bfaa:	2111      	movs	r1, #17
   1bfac:	1879      	adds	r1, r7, r1
   1bfae:	2010      	movs	r0, #16
   1bfb0:	1838      	adds	r0, r7, r0
   1bfb2:	9300      	str	r3, [sp, #0]
   1bfb4:	0023      	movs	r3, r4
   1bfb6:	4c13      	ldr	r4, [pc, #76]	; (1c004 <MQTTPublish+0x1bc>)
   1bfb8:	47a0      	blx	r4
   1bfba:	0003      	movs	r3, r0
   1bfbc:	2b01      	cmp	r3, #1
   1bfbe:	d00c      	beq.n	1bfda <MQTTPublish+0x192>
                rc = FAILURE;
   1bfc0:	2301      	movs	r3, #1
   1bfc2:	425b      	negs	r3, r3
   1bfc4:	637b      	str	r3, [r7, #52]	; 0x34
   1bfc6:	e008      	b.n	1bfda <MQTTPublish+0x192>
        }
        else
            rc = FAILURE;
   1bfc8:	2301      	movs	r3, #1
   1bfca:	425b      	negs	r3, r3
   1bfcc:	637b      	str	r3, [r7, #52]	; 0x34
   1bfce:	e004      	b.n	1bfda <MQTTPublish+0x192>
		goto exit;
   1bfd0:	46c0      	nop			; (mov r8, r8)
   1bfd2:	e002      	b.n	1bfda <MQTTPublish+0x192>
        goto exit;
   1bfd4:	46c0      	nop			; (mov r8, r8)
   1bfd6:	e000      	b.n	1bfda <MQTTPublish+0x192>
        goto exit; // there was a problem
   1bfd8:	46c0      	nop			; (mov r8, r8)
    
exit:
#if defined(MQTT_TASK)
	MutexUnlock(&c->mutex);
#endif
    return rc;
   1bfda:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
   1bfdc:	0018      	movs	r0, r3
   1bfde:	46bd      	mov	sp, r7
   1bfe0:	b00f      	add	sp, #60	; 0x3c
   1bfe2:	bc0c      	pop	{r2, r3}
   1bfe4:	4690      	mov	r8, r2
   1bfe6:	4699      	mov	r9, r3
   1bfe8:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1bfea:	46c0      	nop			; (mov r8, r8)
   1bfec:	0001c251 	.word	0x0001c251
   1bff0:	0001c1d9 	.word	0x0001c1d9
   1bff4:	0001b399 	.word	0x0001b399
   1bff8:	0001d4d5 	.word	0x0001d4d5
   1bffc:	0001b3c9 	.word	0x0001b3c9
   1c000:	0001bb31 	.word	0x0001bb31
   1c004:	0001cf4d 	.word	0x0001cf4d

0001c008 <MQTTDisconnect>:


int MQTTDisconnect(MQTTClient* c)
{  
   1c008:	b580      	push	{r7, lr}
   1c00a:	b088      	sub	sp, #32
   1c00c:	af00      	add	r7, sp, #0
   1c00e:	6078      	str	r0, [r7, #4]
    int rc = FAILURE;
   1c010:	2301      	movs	r3, #1
   1c012:	425b      	negs	r3, r3
   1c014:	61fb      	str	r3, [r7, #28]
    Timer timer;     // we might wait for incomplete incoming publishes to complete
    int len = 0;
   1c016:	2300      	movs	r3, #0
   1c018:	61bb      	str	r3, [r7, #24]

#if defined(MQTT_TASK)
	MutexLock(&c->mutex);
#endif
    TimerInit(&timer);
   1c01a:	230c      	movs	r3, #12
   1c01c:	18fb      	adds	r3, r7, r3
   1c01e:	0018      	movs	r0, r3
   1c020:	4b13      	ldr	r3, [pc, #76]	; (1c070 <MQTTDisconnect+0x68>)
   1c022:	4798      	blx	r3
    TimerCountdownMS(&timer, c->command_timeout_ms);
   1c024:	687b      	ldr	r3, [r7, #4]
   1c026:	685a      	ldr	r2, [r3, #4]
   1c028:	230c      	movs	r3, #12
   1c02a:	18fb      	adds	r3, r7, r3
   1c02c:	0011      	movs	r1, r2
   1c02e:	0018      	movs	r0, r3
   1c030:	4b10      	ldr	r3, [pc, #64]	; (1c074 <MQTTDisconnect+0x6c>)
   1c032:	4798      	blx	r3

	len = MQTTSerialize_disconnect(c->buf, c->buf_size);
   1c034:	687b      	ldr	r3, [r7, #4]
   1c036:	691a      	ldr	r2, [r3, #16]
   1c038:	687b      	ldr	r3, [r7, #4]
   1c03a:	689b      	ldr	r3, [r3, #8]
   1c03c:	0019      	movs	r1, r3
   1c03e:	0010      	movs	r0, r2
   1c040:	4b0d      	ldr	r3, [pc, #52]	; (1c078 <MQTTDisconnect+0x70>)
   1c042:	4798      	blx	r3
   1c044:	0003      	movs	r3, r0
   1c046:	61bb      	str	r3, [r7, #24]
    if (len > 0)
   1c048:	69bb      	ldr	r3, [r7, #24]
   1c04a:	2b00      	cmp	r3, #0
   1c04c:	dd08      	ble.n	1c060 <MQTTDisconnect+0x58>
        rc = sendPacket(c, len, &timer);            // send the disconnect packet
   1c04e:	230c      	movs	r3, #12
   1c050:	18fa      	adds	r2, r7, r3
   1c052:	69b9      	ldr	r1, [r7, #24]
   1c054:	687b      	ldr	r3, [r7, #4]
   1c056:	0018      	movs	r0, r3
   1c058:	4b08      	ldr	r3, [pc, #32]	; (1c07c <MQTTDisconnect+0x74>)
   1c05a:	4798      	blx	r3
   1c05c:	0003      	movs	r3, r0
   1c05e:	61fb      	str	r3, [r7, #28]
        
    c->isconnected = 0;
   1c060:	687b      	ldr	r3, [r7, #4]
   1c062:	2200      	movs	r2, #0
   1c064:	621a      	str	r2, [r3, #32]

#if defined(MQTT_TASK)
	MutexUnlock(&c->mutex);
#endif
    return rc;
   1c066:	69fb      	ldr	r3, [r7, #28]
}
   1c068:	0018      	movs	r0, r3
   1c06a:	46bd      	mov	sp, r7
   1c06c:	b008      	add	sp, #32
   1c06e:	bd80      	pop	{r7, pc}
   1c070:	0001c251 	.word	0x0001c251
   1c074:	0001c1d9 	.word	0x0001c1d9
   1c078:	0001ce01 	.word	0x0001ce01
   1c07c:	0001b3c9 	.word	0x0001b3c9

0001c080 <isMQTTSocket>:
static uint32_t gu32MQTTRxFIFOPtr=0;
static uint32_t gu32MQTTRxFIFOLen=0;
static char *gpcHostAddr;

static bool isMQTTSocket(SOCKET sock)
{
   1c080:	b580      	push	{r7, lr}
   1c082:	b084      	sub	sp, #16
   1c084:	af00      	add	r7, sp, #0
   1c086:	0002      	movs	r2, r0
   1c088:	1dfb      	adds	r3, r7, #7
   1c08a:	701a      	strb	r2, [r3, #0]
	unsigned int cIdx;
	struct mqtt_module *mqttInstance;
	
	for(cIdx = 0; cIdx < MQTT_MAX_CLIENTS; cIdx++)
   1c08c:	2300      	movs	r3, #0
   1c08e:	60fb      	str	r3, [r7, #12]
   1c090:	e01c      	b.n	1c0cc <isMQTTSocket+0x4c>
	{
		if(mqttClientPool[cIdx].mqtt_instance != NULL)
   1c092:	4a12      	ldr	r2, [pc, #72]	; (1c0dc <isMQTTSocket+0x5c>)
   1c094:	68fb      	ldr	r3, [r7, #12]
   1c096:	2164      	movs	r1, #100	; 0x64
   1c098:	434b      	muls	r3, r1
   1c09a:	18d3      	adds	r3, r2, r3
   1c09c:	3360      	adds	r3, #96	; 0x60
   1c09e:	681b      	ldr	r3, [r3, #0]
   1c0a0:	2b00      	cmp	r3, #0
   1c0a2:	d010      	beq.n	1c0c6 <isMQTTSocket+0x46>
		{
			mqttInstance = mqttClientPool[cIdx].mqtt_instance;
   1c0a4:	4a0d      	ldr	r2, [pc, #52]	; (1c0dc <isMQTTSocket+0x5c>)
   1c0a6:	68fb      	ldr	r3, [r7, #12]
   1c0a8:	2164      	movs	r1, #100	; 0x64
   1c0aa:	434b      	muls	r3, r1
   1c0ac:	18d3      	adds	r3, r2, r3
   1c0ae:	3360      	adds	r3, #96	; 0x60
   1c0b0:	681b      	ldr	r3, [r3, #0]
   1c0b2:	60bb      	str	r3, [r7, #8]
			if(mqttInstance->network.socket == sock)
   1c0b4:	68bb      	ldr	r3, [r7, #8]
   1c0b6:	6a1a      	ldr	r2, [r3, #32]
   1c0b8:	1dfb      	adds	r3, r7, #7
   1c0ba:	781b      	ldrb	r3, [r3, #0]
   1c0bc:	b25b      	sxtb	r3, r3
   1c0be:	429a      	cmp	r2, r3
   1c0c0:	d101      	bne.n	1c0c6 <isMQTTSocket+0x46>
				return true;
   1c0c2:	2301      	movs	r3, #1
   1c0c4:	e006      	b.n	1c0d4 <isMQTTSocket+0x54>
	for(cIdx = 0; cIdx < MQTT_MAX_CLIENTS; cIdx++)
   1c0c6:	68fb      	ldr	r3, [r7, #12]
   1c0c8:	3301      	adds	r3, #1
   1c0ca:	60fb      	str	r3, [r7, #12]
   1c0cc:	68fb      	ldr	r3, [r7, #12]
   1c0ce:	2b06      	cmp	r3, #6
   1c0d0:	d9df      	bls.n	1c092 <isMQTTSocket+0x12>
		}
	}
	return false;
   1c0d2:	2300      	movs	r3, #0
}
   1c0d4:	0018      	movs	r0, r3
   1c0d6:	46bd      	mov	sp, r7
   1c0d8:	b004      	add	sp, #16
   1c0da:	bd80      	pop	{r7, pc}
   1c0dc:	20003eb0 	.word	0x20003eb0

0001c0e0 <dnsResolveCallback>:

void dnsResolveCallback(uint8_t *hostName, uint32_t hostIp)
{
   1c0e0:	b580      	push	{r7, lr}
   1c0e2:	b082      	sub	sp, #8
   1c0e4:	af00      	add	r7, sp, #0
   1c0e6:	6078      	str	r0, [r7, #4]
   1c0e8:	6039      	str	r1, [r7, #0]
	if((gbMQTTBrokerIpresolved == false) && (!strcmp((const char *)gpcHostAddr, (const char *)hostName)))
   1c0ea:	4b0d      	ldr	r3, [pc, #52]	; (1c120 <dnsResolveCallback+0x40>)
   1c0ec:	781b      	ldrb	r3, [r3, #0]
   1c0ee:	2201      	movs	r2, #1
   1c0f0:	4053      	eors	r3, r2
   1c0f2:	b2db      	uxtb	r3, r3
   1c0f4:	2b00      	cmp	r3, #0
   1c0f6:	d00e      	beq.n	1c116 <dnsResolveCallback+0x36>
   1c0f8:	4b0a      	ldr	r3, [pc, #40]	; (1c124 <dnsResolveCallback+0x44>)
   1c0fa:	681b      	ldr	r3, [r3, #0]
   1c0fc:	687a      	ldr	r2, [r7, #4]
   1c0fe:	0011      	movs	r1, r2
   1c100:	0018      	movs	r0, r3
   1c102:	4b09      	ldr	r3, [pc, #36]	; (1c128 <dnsResolveCallback+0x48>)
   1c104:	4798      	blx	r3
   1c106:	1e03      	subs	r3, r0, #0
   1c108:	d105      	bne.n	1c116 <dnsResolveCallback+0x36>
	{
		gi32MQTTBrokerIp = hostIp;
   1c10a:	683a      	ldr	r2, [r7, #0]
   1c10c:	4b07      	ldr	r3, [pc, #28]	; (1c12c <dnsResolveCallback+0x4c>)
   1c10e:	601a      	str	r2, [r3, #0]
		gbMQTTBrokerIpresolved = true;
   1c110:	4b03      	ldr	r3, [pc, #12]	; (1c120 <dnsResolveCallback+0x40>)
   1c112:	2201      	movs	r2, #1
   1c114:	701a      	strb	r2, [r3, #0]
		#ifdef MQTT_PLATFORM_DBG
		printf("INFO >> Host IP of %s is %d.%d.%d.%d\r\n", hostName, (int)IPV4_BYTE(hostIp, 0), (int)IPV4_BYTE(hostIp, 1),
		(int)IPV4_BYTE(hostIp, 2), (int)IPV4_BYTE(hostIp, 3));
		#endif
	}
}
   1c116:	46c0      	nop			; (mov r8, r8)
   1c118:	46bd      	mov	sp, r7
   1c11a:	b002      	add	sp, #8
   1c11c:	bd80      	pop	{r7, pc}
   1c11e:	46c0      	nop			; (mov r8, r8)
   1c120:	20003da0 	.word	0x20003da0
   1c124:	20003eac 	.word	0x20003eac
   1c128:	00021b73 	.word	0x00021b73
   1c12c:	20003d98 	.word	0x20003d98

0001c130 <tcpClientSocketEventHandler>:

void tcpClientSocketEventHandler(SOCKET sock, uint8_t u8Msg, void *pvMsg)
{
   1c130:	b580      	push	{r7, lr}
   1c132:	b084      	sub	sp, #16
   1c134:	af00      	add	r7, sp, #0
   1c136:	603a      	str	r2, [r7, #0]
   1c138:	1dfb      	adds	r3, r7, #7
   1c13a:	1c02      	adds	r2, r0, #0
   1c13c:	701a      	strb	r2, [r3, #0]
   1c13e:	1dbb      	adds	r3, r7, #6
   1c140:	1c0a      	adds	r2, r1, #0
   1c142:	701a      	strb	r2, [r3, #0]
	if(isMQTTSocket(sock)) { 
   1c144:	1dfb      	adds	r3, r7, #7
   1c146:	781b      	ldrb	r3, [r3, #0]
   1c148:	b25b      	sxtb	r3, r3
   1c14a:	0018      	movs	r0, r3
   1c14c:	4b12      	ldr	r3, [pc, #72]	; (1c198 <tcpClientSocketEventHandler+0x68>)
   1c14e:	4798      	blx	r3
   1c150:	1e03      	subs	r3, r0, #0
   1c152:	d01c      	beq.n	1c18e <tcpClientSocketEventHandler+0x5e>
		switch (u8Msg) {
   1c154:	1dbb      	adds	r3, r7, #6
   1c156:	781b      	ldrb	r3, [r3, #0]
   1c158:	2b06      	cmp	r3, #6
   1c15a:	d00c      	beq.n	1c176 <tcpClientSocketEventHandler+0x46>
   1c15c:	2b07      	cmp	r3, #7
   1c15e:	d006      	beq.n	1c16e <tcpClientSocketEventHandler+0x3e>
   1c160:	2b05      	cmp	r3, #5
   1c162:	d000      	beq.n	1c166 <tcpClientSocketEventHandler+0x36>
				printf("DEBUG >> Remaining data in Rx buffer of broker socket: %d\r\n",pstrRx->u16RemainingSize);
				#endif
				gbMQTTBrokerRecvDone=true;
			}
			break;
			default: break;
   1c164:	e013      	b.n	1c18e <tcpClientSocketEventHandler+0x5e>
				gbMQTTBrokerConnected=true;
   1c166:	4b0d      	ldr	r3, [pc, #52]	; (1c19c <tcpClientSocketEventHandler+0x6c>)
   1c168:	2201      	movs	r2, #1
   1c16a:	701a      	strb	r2, [r3, #0]
			break;
   1c16c:	e00f      	b.n	1c18e <tcpClientSocketEventHandler+0x5e>
				gbMQTTBrokerSendDone=true;
   1c16e:	4b0c      	ldr	r3, [pc, #48]	; (1c1a0 <tcpClientSocketEventHandler+0x70>)
   1c170:	2201      	movs	r2, #1
   1c172:	701a      	strb	r2, [r3, #0]
			break;
   1c174:	e00b      	b.n	1c18e <tcpClientSocketEventHandler+0x5e>
				tstrSocketRecvMsg* pstrRx = (tstrSocketRecvMsg*)pvMsg;
   1c176:	683b      	ldr	r3, [r7, #0]
   1c178:	60fb      	str	r3, [r7, #12]
				gi32MQTTBrokerRxLen = pstrRx->s16BufferSize;
   1c17a:	68fb      	ldr	r3, [r7, #12]
   1c17c:	2204      	movs	r2, #4
   1c17e:	5e9b      	ldrsh	r3, [r3, r2]
   1c180:	001a      	movs	r2, r3
   1c182:	4b08      	ldr	r3, [pc, #32]	; (1c1a4 <tcpClientSocketEventHandler+0x74>)
   1c184:	601a      	str	r2, [r3, #0]
				gbMQTTBrokerRecvDone=true;
   1c186:	4b08      	ldr	r3, [pc, #32]	; (1c1a8 <tcpClientSocketEventHandler+0x78>)
   1c188:	2201      	movs	r2, #1
   1c18a:	701a      	strb	r2, [r3, #0]
			break;
   1c18c:	46c0      	nop			; (mov r8, r8)
		}
	}
}
   1c18e:	46c0      	nop			; (mov r8, r8)
   1c190:	46bd      	mov	sp, r7
   1c192:	b004      	add	sp, #16
   1c194:	bd80      	pop	{r7, pc}
   1c196:	46c0      	nop			; (mov r8, r8)
   1c198:	0001c081 	.word	0x0001c081
   1c19c:	20003da1 	.word	0x20003da1
   1c1a0:	20003da2 	.word	0x20003da2
   1c1a4:	20003d9c 	.word	0x20003d9c
   1c1a8:	20003da3 	.word	0x20003da3

0001c1ac <TimerIsExpired>:

void SysTick_Handler_MQTT(void){
	MilliTimer++;
}

char TimerIsExpired(Timer* timer) {
   1c1ac:	b580      	push	{r7, lr}
   1c1ae:	b082      	sub	sp, #8
   1c1b0:	af00      	add	r7, sp, #0
   1c1b2:	6078      	str	r0, [r7, #4]
	return xTaskCheckForTimeOut(&timer->xTimeOut, &timer->xTicksToWait) == pdTRUE;
   1c1b4:	687b      	ldr	r3, [r7, #4]
   1c1b6:	3304      	adds	r3, #4
   1c1b8:	687a      	ldr	r2, [r7, #4]
   1c1ba:	0011      	movs	r1, r2
   1c1bc:	0018      	movs	r0, r3
   1c1be:	4b05      	ldr	r3, [pc, #20]	; (1c1d4 <TimerIsExpired+0x28>)
   1c1c0:	4798      	blx	r3
   1c1c2:	0003      	movs	r3, r0
   1c1c4:	3b01      	subs	r3, #1
   1c1c6:	425a      	negs	r2, r3
   1c1c8:	4153      	adcs	r3, r2
   1c1ca:	b2db      	uxtb	r3, r3
}
   1c1cc:	0018      	movs	r0, r3
   1c1ce:	46bd      	mov	sp, r7
   1c1d0:	b002      	add	sp, #8
   1c1d2:	bd80      	pop	{r7, pc}
   1c1d4:	00009a45 	.word	0x00009a45

0001c1d8 <TimerCountdownMS>:


void TimerCountdownMS(Timer* timer, unsigned int timeout_ms) {
   1c1d8:	b580      	push	{r7, lr}
   1c1da:	b082      	sub	sp, #8
   1c1dc:	af00      	add	r7, sp, #0
   1c1de:	6078      	str	r0, [r7, #4]
   1c1e0:	6039      	str	r1, [r7, #0]
	timer->xTicksToWait = timeout_ms / portTICK_PERIOD_MS; /* convert milliseconds to ticks */
   1c1e2:	687b      	ldr	r3, [r7, #4]
   1c1e4:	683a      	ldr	r2, [r7, #0]
   1c1e6:	601a      	str	r2, [r3, #0]
	vTaskSetTimeOutState(&timer->xTimeOut); /* Record the time at which this function was entered. */
   1c1e8:	687b      	ldr	r3, [r7, #4]
   1c1ea:	3304      	adds	r3, #4
   1c1ec:	0018      	movs	r0, r3
   1c1ee:	4b03      	ldr	r3, [pc, #12]	; (1c1fc <TimerCountdownMS+0x24>)
   1c1f0:	4798      	blx	r3
}
   1c1f2:	46c0      	nop			; (mov r8, r8)
   1c1f4:	46bd      	mov	sp, r7
   1c1f6:	b002      	add	sp, #8
   1c1f8:	bd80      	pop	{r7, pc}
   1c1fa:	46c0      	nop			; (mov r8, r8)
   1c1fc:	000099d9 	.word	0x000099d9

0001c200 <TimerCountdown>:


void TimerCountdown(Timer* timer, unsigned int timeout) {
   1c200:	b580      	push	{r7, lr}
   1c202:	b082      	sub	sp, #8
   1c204:	af00      	add	r7, sp, #0
   1c206:	6078      	str	r0, [r7, #4]
   1c208:	6039      	str	r1, [r7, #0]
	TimerCountdownMS(timer, timeout * 1000);
   1c20a:	683b      	ldr	r3, [r7, #0]
   1c20c:	22fa      	movs	r2, #250	; 0xfa
   1c20e:	0092      	lsls	r2, r2, #2
   1c210:	435a      	muls	r2, r3
   1c212:	687b      	ldr	r3, [r7, #4]
   1c214:	0011      	movs	r1, r2
   1c216:	0018      	movs	r0, r3
   1c218:	4b02      	ldr	r3, [pc, #8]	; (1c224 <TimerCountdown+0x24>)
   1c21a:	4798      	blx	r3
}
   1c21c:	46c0      	nop			; (mov r8, r8)
   1c21e:	46bd      	mov	sp, r7
   1c220:	b002      	add	sp, #8
   1c222:	bd80      	pop	{r7, pc}
   1c224:	0001c1d9 	.word	0x0001c1d9

0001c228 <TimerLeftMS>:


int TimerLeftMS(Timer* timer) {
   1c228:	b580      	push	{r7, lr}
   1c22a:	b082      	sub	sp, #8
   1c22c:	af00      	add	r7, sp, #0
   1c22e:	6078      	str	r0, [r7, #4]
	xTaskCheckForTimeOut(&timer->xTimeOut, &timer->xTicksToWait); /* updates xTicksToWait to the number left */
   1c230:	687b      	ldr	r3, [r7, #4]
   1c232:	3304      	adds	r3, #4
   1c234:	687a      	ldr	r2, [r7, #4]
   1c236:	0011      	movs	r1, r2
   1c238:	0018      	movs	r0, r3
   1c23a:	4b04      	ldr	r3, [pc, #16]	; (1c24c <TimerLeftMS+0x24>)
   1c23c:	4798      	blx	r3
	return (timer->xTicksToWait < 0) ? 0 : (timer->xTicksToWait * portTICK_PERIOD_MS);
   1c23e:	687b      	ldr	r3, [r7, #4]
   1c240:	681b      	ldr	r3, [r3, #0]
}
   1c242:	0018      	movs	r0, r3
   1c244:	46bd      	mov	sp, r7
   1c246:	b002      	add	sp, #8
   1c248:	bd80      	pop	{r7, pc}
   1c24a:	46c0      	nop			; (mov r8, r8)
   1c24c:	00009a45 	.word	0x00009a45

0001c250 <TimerInit>:


void TimerInit(Timer* timer) {
   1c250:	b580      	push	{r7, lr}
   1c252:	b082      	sub	sp, #8
   1c254:	af00      	add	r7, sp, #0
   1c256:	6078      	str	r0, [r7, #4]
	timer->xTicksToWait = 0;
   1c258:	687b      	ldr	r3, [r7, #4]
   1c25a:	2200      	movs	r2, #0
   1c25c:	601a      	str	r2, [r3, #0]
	memset(&timer->xTimeOut, '\0', sizeof(timer->xTimeOut));
   1c25e:	687b      	ldr	r3, [r7, #4]
   1c260:	3304      	adds	r3, #4
   1c262:	2208      	movs	r2, #8
   1c264:	2100      	movs	r1, #0
   1c266:	0018      	movs	r0, r3
   1c268:	4b02      	ldr	r3, [pc, #8]	; (1c274 <TimerInit+0x24>)
   1c26a:	4798      	blx	r3
}
   1c26c:	46c0      	nop			; (mov r8, r8)
   1c26e:	46bd      	mov	sp, r7
   1c270:	b002      	add	sp, #8
   1c272:	bd80      	pop	{r7, pc}
   1c274:	0002181b 	.word	0x0002181b

0001c278 <WINC1500_read>:

static int WINC1500_read(Network* n, unsigned char* buffer, int len, int timeout_ms) { 
   1c278:	b590      	push	{r4, r7, lr}
   1c27a:	b085      	sub	sp, #20
   1c27c:	af00      	add	r7, sp, #0
   1c27e:	60f8      	str	r0, [r7, #12]
   1c280:	60b9      	str	r1, [r7, #8]
   1c282:	607a      	str	r2, [r7, #4]
   1c284:	603b      	str	r3, [r7, #0]
  //at times the upper layer requests for single byte of data, but network has more in rx buffer.
  //this results in callback being invoked multiple times with length 1 before returning. To prevent loss of
  //data in this process, pool data internally and give it to upper layer on request. 
  
  //temporary workaround for timer overrun 
  if(0==timeout_ms) timeout_ms=10;
   1c286:	683b      	ldr	r3, [r7, #0]
   1c288:	2b00      	cmp	r3, #0
   1c28a:	d101      	bne.n	1c290 <WINC1500_read+0x18>
   1c28c:	230a      	movs	r3, #10
   1c28e:	603b      	str	r3, [r7, #0]
  
  if(0==gu32MQTTRxFIFOLen){ //no data in internal FIFO
   1c290:	4b2c      	ldr	r3, [pc, #176]	; (1c344 <WINC1500_read+0xcc>)
   1c292:	681b      	ldr	r3, [r3, #0]
   1c294:	2b00      	cmp	r3, #0
   1c296:	d131      	bne.n	1c2fc <WINC1500_read+0x84>
	  #ifdef MQTT_PLATFORM_DBG
	  printf("DEBUG >> Requesting data from network\r\n");
	  #endif
	  gbMQTTBrokerRecvDone=false;
   1c298:	4b2b      	ldr	r3, [pc, #172]	; (1c348 <WINC1500_read+0xd0>)
   1c29a:	2200      	movs	r2, #0
   1c29c:	701a      	strb	r2, [r3, #0]
	  if (SOCK_ERR_NO_ERROR!=recv(n->socket,gcMQTTRxFIFO,MQTT_RX_POOL_SIZE,timeout_ms)){
   1c29e:	68fb      	ldr	r3, [r7, #12]
   1c2a0:	681b      	ldr	r3, [r3, #0]
   1c2a2:	b258      	sxtb	r0, r3
   1c2a4:	683c      	ldr	r4, [r7, #0]
   1c2a6:	2380      	movs	r3, #128	; 0x80
   1c2a8:	005a      	lsls	r2, r3, #1
   1c2aa:	4928      	ldr	r1, [pc, #160]	; (1c34c <WINC1500_read+0xd4>)
   1c2ac:	0023      	movs	r3, r4
   1c2ae:	4c28      	ldr	r4, [pc, #160]	; (1c350 <WINC1500_read+0xd8>)
   1c2b0:	47a0      	blx	r4
   1c2b2:	1e03      	subs	r3, r0, #0
   1c2b4:	d005      	beq.n	1c2c2 <WINC1500_read+0x4a>
		  #ifdef MQTT_PLATFORM_DBG
		  printf("ERROR >> recv failed\r\n");
		  #endif
		  return -1;
   1c2b6:	2301      	movs	r3, #1
   1c2b8:	425b      	negs	r3, r3
   1c2ba:	e03e      	b.n	1c33a <WINC1500_read+0xc2>
	  }
	  //call handle_events until we get rx callback 
	  while (false==gbMQTTBrokerRecvDone){
		  m2m_wifi_handle_events(NULL);
   1c2bc:	2000      	movs	r0, #0
   1c2be:	4b25      	ldr	r3, [pc, #148]	; (1c354 <WINC1500_read+0xdc>)
   1c2c0:	4798      	blx	r3
	  while (false==gbMQTTBrokerRecvDone){
   1c2c2:	4b21      	ldr	r3, [pc, #132]	; (1c348 <WINC1500_read+0xd0>)
   1c2c4:	781b      	ldrb	r3, [r3, #0]
   1c2c6:	2201      	movs	r2, #1
   1c2c8:	4053      	eors	r3, r2
   1c2ca:	b2db      	uxtb	r3, r3
   1c2cc:	2b00      	cmp	r3, #0
   1c2ce:	d1f5      	bne.n	1c2bc <WINC1500_read+0x44>
	  }
	  
	  //update current FIFO length
	  if(gi32MQTTBrokerRxLen>0){ //data recieved form network
   1c2d0:	4b21      	ldr	r3, [pc, #132]	; (1c358 <WINC1500_read+0xe0>)
   1c2d2:	681b      	ldr	r3, [r3, #0]
   1c2d4:	2b00      	cmp	r3, #0
   1c2d6:	dd08      	ble.n	1c2ea <WINC1500_read+0x72>
		gu32MQTTRxFIFOLen=gi32MQTTBrokerRxLen;
   1c2d8:	4b1f      	ldr	r3, [pc, #124]	; (1c358 <WINC1500_read+0xe0>)
   1c2da:	681b      	ldr	r3, [r3, #0]
   1c2dc:	001a      	movs	r2, r3
   1c2de:	4b19      	ldr	r3, [pc, #100]	; (1c344 <WINC1500_read+0xcc>)
   1c2e0:	601a      	str	r2, [r3, #0]
		gu32MQTTRxFIFOPtr=0;
   1c2e2:	4b1e      	ldr	r3, [pc, #120]	; (1c35c <WINC1500_read+0xe4>)
   1c2e4:	2200      	movs	r2, #0
   1c2e6:	601a      	str	r2, [r3, #0]
   1c2e8:	e008      	b.n	1c2fc <WINC1500_read+0x84>
    	printf("0x%x, ",gcMQTTRxFIFO[i]);
    	printf("\r\n");
	  #endif
	  }
	  else{//mostly in case of timeout
		  gu32MQTTRxFIFOLen=0;
   1c2ea:	4b16      	ldr	r3, [pc, #88]	; (1c344 <WINC1500_read+0xcc>)
   1c2ec:	2200      	movs	r2, #0
   1c2ee:	601a      	str	r2, [r3, #0]
		  gu32MQTTRxFIFOPtr=0;
   1c2f0:	4b1a      	ldr	r3, [pc, #104]	; (1c35c <WINC1500_read+0xe4>)
   1c2f2:	2200      	movs	r2, #0
   1c2f4:	601a      	str	r2, [r3, #0]
		  #ifdef MQTT_PLATFORM_DBG
		  printf("DEBUG >> no data to send. returning error code (%d)\r\n",gi32MQTTBrokerRxLen);
		  #endif
		  return gi32MQTTBrokerRxLen; //this corresponds to the error code.
   1c2f6:	4b18      	ldr	r3, [pc, #96]	; (1c358 <WINC1500_read+0xe0>)
   1c2f8:	681b      	ldr	r3, [r3, #0]
   1c2fa:	e01e      	b.n	1c33a <WINC1500_read+0xc2>
	  }
  }
  //return data to client from data present in the FIFO from previous recv()
  if(len>(int)gu32MQTTRxFIFOLen){
   1c2fc:	4b11      	ldr	r3, [pc, #68]	; (1c344 <WINC1500_read+0xcc>)
   1c2fe:	681b      	ldr	r3, [r3, #0]
   1c300:	001a      	movs	r2, r3
   1c302:	687b      	ldr	r3, [r7, #4]
   1c304:	4293      	cmp	r3, r2
   1c306:	dd02      	ble.n	1c30e <WINC1500_read+0x96>
	  #ifdef MQTT_PLATFORM_DBG
	  printf("ERROR >> unable to process read request since FIFO contains less data than requested\r\n");
	  #endif
	  return -1;
   1c308:	2301      	movs	r3, #1
   1c30a:	425b      	negs	r3, r3
   1c30c:	e015      	b.n	1c33a <WINC1500_read+0xc2>
  }
 
  memcpy((void*)buffer, (const void*)&gcMQTTRxFIFO[gu32MQTTRxFIFOPtr],len);
   1c30e:	4b13      	ldr	r3, [pc, #76]	; (1c35c <WINC1500_read+0xe4>)
   1c310:	681a      	ldr	r2, [r3, #0]
   1c312:	4b0e      	ldr	r3, [pc, #56]	; (1c34c <WINC1500_read+0xd4>)
   1c314:	18d1      	adds	r1, r2, r3
   1c316:	687a      	ldr	r2, [r7, #4]
   1c318:	68bb      	ldr	r3, [r7, #8]
   1c31a:	0018      	movs	r0, r3
   1c31c:	4b10      	ldr	r3, [pc, #64]	; (1c360 <WINC1500_read+0xe8>)
   1c31e:	4798      	blx	r3
  gu32MQTTRxFIFOLen-=len;
   1c320:	4b08      	ldr	r3, [pc, #32]	; (1c344 <WINC1500_read+0xcc>)
   1c322:	681a      	ldr	r2, [r3, #0]
   1c324:	687b      	ldr	r3, [r7, #4]
   1c326:	1ad2      	subs	r2, r2, r3
   1c328:	4b06      	ldr	r3, [pc, #24]	; (1c344 <WINC1500_read+0xcc>)
   1c32a:	601a      	str	r2, [r3, #0]
  gu32MQTTRxFIFOPtr+=len;
   1c32c:	4b0b      	ldr	r3, [pc, #44]	; (1c35c <WINC1500_read+0xe4>)
   1c32e:	681a      	ldr	r2, [r3, #0]
   1c330:	687b      	ldr	r3, [r7, #4]
   1c332:	18d2      	adds	r2, r2, r3
   1c334:	4b09      	ldr	r3, [pc, #36]	; (1c35c <WINC1500_read+0xe4>)
   1c336:	601a      	str	r2, [r3, #0]
  
  return len;
   1c338:	687b      	ldr	r3, [r7, #4]
}
   1c33a:	0018      	movs	r0, r3
   1c33c:	46bd      	mov	sp, r7
   1c33e:	b005      	add	sp, #20
   1c340:	bd90      	pop	{r4, r7, pc}
   1c342:	46c0      	nop			; (mov r8, r8)
   1c344:	20003ea8 	.word	0x20003ea8
   1c348:	20003da3 	.word	0x20003da3
   1c34c:	20003da4 	.word	0x20003da4
   1c350:	0001292d 	.word	0x0001292d
   1c354:	0000ee75 	.word	0x0000ee75
   1c358:	20003d9c 	.word	0x20003d9c
   1c35c:	20003ea4 	.word	0x20003ea4
   1c360:	000217e5 	.word	0x000217e5

0001c364 <WINC1500_write>:


static int WINC1500_write(Network* n, unsigned char* buffer, int len, int timeout_ms) {
   1c364:	b590      	push	{r4, r7, lr}
   1c366:	b085      	sub	sp, #20
   1c368:	af00      	add	r7, sp, #0
   1c36a:	60f8      	str	r0, [r7, #12]
   1c36c:	60b9      	str	r1, [r7, #8]
   1c36e:	607a      	str	r2, [r7, #4]
   1c370:	603b      	str	r3, [r7, #0]
  gbMQTTBrokerSendDone=false;
   1c372:	4b10      	ldr	r3, [pc, #64]	; (1c3b4 <WINC1500_write+0x50>)
   1c374:	2200      	movs	r2, #0
   1c376:	701a      	strb	r2, [r3, #0]
  if (SOCK_ERR_NO_ERROR!=send(n->socket,buffer,len,0)){
   1c378:	68fb      	ldr	r3, [r7, #12]
   1c37a:	681b      	ldr	r3, [r3, #0]
   1c37c:	b258      	sxtb	r0, r3
   1c37e:	687b      	ldr	r3, [r7, #4]
   1c380:	b29a      	uxth	r2, r3
   1c382:	68b9      	ldr	r1, [r7, #8]
   1c384:	2300      	movs	r3, #0
   1c386:	4c0c      	ldr	r4, [pc, #48]	; (1c3b8 <WINC1500_write+0x54>)
   1c388:	47a0      	blx	r4
   1c38a:	1e03      	subs	r3, r0, #0
   1c38c:	d005      	beq.n	1c39a <WINC1500_write+0x36>
	  #ifdef MQTT_PLATFORM_DBG
	  printf("ERROR >> send error");
	  #endif
	  return -1;
   1c38e:	2301      	movs	r3, #1
   1c390:	425b      	negs	r3, r3
   1c392:	e00a      	b.n	1c3aa <WINC1500_write+0x46>
  }
  //wait for send callback
  while (false==gbMQTTBrokerSendDone){
	  m2m_wifi_handle_events(NULL);
   1c394:	2000      	movs	r0, #0
   1c396:	4b09      	ldr	r3, [pc, #36]	; (1c3bc <WINC1500_write+0x58>)
   1c398:	4798      	blx	r3
  while (false==gbMQTTBrokerSendDone){
   1c39a:	4b06      	ldr	r3, [pc, #24]	; (1c3b4 <WINC1500_write+0x50>)
   1c39c:	781b      	ldrb	r3, [r3, #0]
   1c39e:	2201      	movs	r2, #1
   1c3a0:	4053      	eors	r3, r2
   1c3a2:	b2db      	uxtb	r3, r3
   1c3a4:	2b00      	cmp	r3, #0
   1c3a6:	d1f5      	bne.n	1c394 <WINC1500_write+0x30>
  #endif

  //TODO: figure out how to get actual send length from callback
  //this length will be updated in the callback
  //return gu32MQTTBrokerSendLen;
  return len;
   1c3a8:	687b      	ldr	r3, [r7, #4]
}
   1c3aa:	0018      	movs	r0, r3
   1c3ac:	46bd      	mov	sp, r7
   1c3ae:	b005      	add	sp, #20
   1c3b0:	bd90      	pop	{r4, r7, pc}
   1c3b2:	46c0      	nop			; (mov r8, r8)
   1c3b4:	20003da2 	.word	0x20003da2
   1c3b8:	000127c9 	.word	0x000127c9
   1c3bc:	0000ee75 	.word	0x0000ee75

0001c3c0 <WINC1500_disconnect>:


static void WINC1500_disconnect(Network* n) {
   1c3c0:	b580      	push	{r7, lr}
   1c3c2:	b082      	sub	sp, #8
   1c3c4:	af00      	add	r7, sp, #0
   1c3c6:	6078      	str	r0, [r7, #4]
	close(n->socket);
   1c3c8:	687b      	ldr	r3, [r7, #4]
   1c3ca:	681b      	ldr	r3, [r3, #0]
   1c3cc:	b25b      	sxtb	r3, r3
   1c3ce:	0018      	movs	r0, r3
   1c3d0:	4b06      	ldr	r3, [pc, #24]	; (1c3ec <WINC1500_disconnect+0x2c>)
   1c3d2:	4798      	blx	r3
	n->socket=-1;
   1c3d4:	687b      	ldr	r3, [r7, #4]
   1c3d6:	2201      	movs	r2, #1
   1c3d8:	4252      	negs	r2, r2
   1c3da:	601a      	str	r2, [r3, #0]
	gbMQTTBrokerConnected=false;
   1c3dc:	4b04      	ldr	r3, [pc, #16]	; (1c3f0 <WINC1500_disconnect+0x30>)
   1c3de:	2200      	movs	r2, #0
   1c3e0:	701a      	strb	r2, [r3, #0]
}
   1c3e2:	46c0      	nop			; (mov r8, r8)
   1c3e4:	46bd      	mov	sp, r7
   1c3e6:	b002      	add	sp, #8
   1c3e8:	bd80      	pop	{r7, pc}
   1c3ea:	46c0      	nop			; (mov r8, r8)
   1c3ec:	00012aad 	.word	0x00012aad
   1c3f0:	20003da1 	.word	0x20003da1

0001c3f4 <NetworkInit>:


void NetworkInit(Network* n) {
   1c3f4:	b580      	push	{r7, lr}
   1c3f6:	b082      	sub	sp, #8
   1c3f8:	af00      	add	r7, sp, #0
   1c3fa:	6078      	str	r0, [r7, #4]
	n->socket = -1;
   1c3fc:	687b      	ldr	r3, [r7, #4]
   1c3fe:	2201      	movs	r2, #1
   1c400:	4252      	negs	r2, r2
   1c402:	601a      	str	r2, [r3, #0]
	n->mqttread = WINC1500_read;
   1c404:	687b      	ldr	r3, [r7, #4]
   1c406:	4a06      	ldr	r2, [pc, #24]	; (1c420 <NetworkInit+0x2c>)
   1c408:	609a      	str	r2, [r3, #8]
	n->mqttwrite = WINC1500_write;
   1c40a:	687b      	ldr	r3, [r7, #4]
   1c40c:	4a05      	ldr	r2, [pc, #20]	; (1c424 <NetworkInit+0x30>)
   1c40e:	60da      	str	r2, [r3, #12]
	n->disconnect = WINC1500_disconnect;
   1c410:	687b      	ldr	r3, [r7, #4]
   1c412:	4a05      	ldr	r2, [pc, #20]	; (1c428 <NetworkInit+0x34>)
   1c414:	611a      	str	r2, [r3, #16]
}
   1c416:	46c0      	nop			; (mov r8, r8)
   1c418:	46bd      	mov	sp, r7
   1c41a:	b002      	add	sp, #8
   1c41c:	bd80      	pop	{r7, pc}
   1c41e:	46c0      	nop			; (mov r8, r8)
   1c420:	0001c279 	.word	0x0001c279
   1c424:	0001c365 	.word	0x0001c365
   1c428:	0001c3c1 	.word	0x0001c3c1

0001c42c <ConnectNetwork>:

int ConnectNetwork(Network* n, char* addr, int port, int TLSFlag){
   1c42c:	b580      	push	{r7, lr}
   1c42e:	b088      	sub	sp, #32
   1c430:	af00      	add	r7, sp, #0
   1c432:	60f8      	str	r0, [r7, #12]
   1c434:	60b9      	str	r1, [r7, #8]
   1c436:	607a      	str	r2, [r7, #4]
   1c438:	603b      	str	r3, [r7, #0]

  //Resolve Server URL.
  gbMQTTBrokerIpresolved = false;
   1c43a:	4b37      	ldr	r3, [pc, #220]	; (1c518 <ConnectNetwork+0xec>)
   1c43c:	2200      	movs	r2, #0
   1c43e:	701a      	strb	r2, [r3, #0]
  gpcHostAddr = addr;
   1c440:	4b36      	ldr	r3, [pc, #216]	; (1c51c <ConnectNetwork+0xf0>)
   1c442:	68ba      	ldr	r2, [r7, #8]
   1c444:	601a      	str	r2, [r3, #0]
  gethostbyname((uint8*)addr);
   1c446:	68bb      	ldr	r3, [r7, #8]
   1c448:	0018      	movs	r0, r3
   1c44a:	4b35      	ldr	r3, [pc, #212]	; (1c520 <ConnectNetwork+0xf4>)
   1c44c:	4798      	blx	r3
 
  //wait for resolver callback
  while (false==gbMQTTBrokerIpresolved){
   1c44e:	e002      	b.n	1c456 <ConnectNetwork+0x2a>
	  m2m_wifi_handle_events(NULL);
   1c450:	2000      	movs	r0, #0
   1c452:	4b34      	ldr	r3, [pc, #208]	; (1c524 <ConnectNetwork+0xf8>)
   1c454:	4798      	blx	r3
  while (false==gbMQTTBrokerIpresolved){
   1c456:	4b30      	ldr	r3, [pc, #192]	; (1c518 <ConnectNetwork+0xec>)
   1c458:	781b      	ldrb	r3, [r3, #0]
   1c45a:	2201      	movs	r2, #1
   1c45c:	4053      	eors	r3, r2
   1c45e:	b2db      	uxtb	r3, r3
   1c460:	2b00      	cmp	r3, #0
   1c462:	d1f5      	bne.n	1c450 <ConnectNetwork+0x24>
  }
  
  n->hostIP = gi32MQTTBrokerIp;
   1c464:	4b30      	ldr	r3, [pc, #192]	; (1c528 <ConnectNetwork+0xfc>)
   1c466:	681a      	ldr	r2, [r3, #0]
   1c468:	68fb      	ldr	r3, [r7, #12]
   1c46a:	605a      	str	r2, [r3, #4]
  
  //connect to socket
  struct sockaddr_in addr_in;
  addr_in.sin_family = AF_INET;
   1c46c:	2310      	movs	r3, #16
   1c46e:	18fb      	adds	r3, r7, r3
   1c470:	2202      	movs	r2, #2
   1c472:	801a      	strh	r2, [r3, #0]
  addr_in.sin_port = _htons(port);
   1c474:	687b      	ldr	r3, [r7, #4]
   1c476:	b29b      	uxth	r3, r3
   1c478:	021b      	lsls	r3, r3, #8
   1c47a:	b21a      	sxth	r2, r3
   1c47c:	687b      	ldr	r3, [r7, #4]
   1c47e:	b29b      	uxth	r3, r3
   1c480:	0a1b      	lsrs	r3, r3, #8
   1c482:	b29b      	uxth	r3, r3
   1c484:	b21b      	sxth	r3, r3
   1c486:	4313      	orrs	r3, r2
   1c488:	b21b      	sxth	r3, r3
   1c48a:	b29a      	uxth	r2, r3
   1c48c:	2310      	movs	r3, #16
   1c48e:	18fb      	adds	r3, r7, r3
   1c490:	805a      	strh	r2, [r3, #2]
  addr_in.sin_addr.s_addr = gi32MQTTBrokerIp;
   1c492:	4b25      	ldr	r3, [pc, #148]	; (1c528 <ConnectNetwork+0xfc>)
   1c494:	681b      	ldr	r3, [r3, #0]
   1c496:	001a      	movs	r2, r3
   1c498:	2310      	movs	r3, #16
   1c49a:	18fb      	adds	r3, r7, r3
   1c49c:	605a      	str	r2, [r3, #4]

  /* Create secure socket */ 
  if(n->socket < 0)
   1c49e:	68fb      	ldr	r3, [r7, #12]
   1c4a0:	681b      	ldr	r3, [r3, #0]
   1c4a2:	2b00      	cmp	r3, #0
   1c4a4:	da0a      	bge.n	1c4bc <ConnectNetwork+0x90>
	n->socket = socket(AF_INET, SOCK_STREAM, TLSFlag);
   1c4a6:	683b      	ldr	r3, [r7, #0]
   1c4a8:	b2db      	uxtb	r3, r3
   1c4aa:	001a      	movs	r2, r3
   1c4ac:	2101      	movs	r1, #1
   1c4ae:	2002      	movs	r0, #2
   1c4b0:	4b1e      	ldr	r3, [pc, #120]	; (1c52c <ConnectNetwork+0x100>)
   1c4b2:	4798      	blx	r3
   1c4b4:	0003      	movs	r3, r0
   1c4b6:	001a      	movs	r2, r3
   1c4b8:	68fb      	ldr	r3, [r7, #12]
   1c4ba:	601a      	str	r2, [r3, #0]
  
  /* Check if socket was created successfully */
  if (n->socket == -1) {
   1c4bc:	68fb      	ldr	r3, [r7, #12]
   1c4be:	681b      	ldr	r3, [r3, #0]
   1c4c0:	3301      	adds	r3, #1
   1c4c2:	d108      	bne.n	1c4d6 <ConnectNetwork+0xaa>
   #ifdef MQTT_PLATFORM_DBG
   printf("ERROR >> socket error.\r\n");
   #endif
   close(n->socket);
   1c4c4:	68fb      	ldr	r3, [r7, #12]
   1c4c6:	681b      	ldr	r3, [r3, #0]
   1c4c8:	b25b      	sxtb	r3, r3
   1c4ca:	0018      	movs	r0, r3
   1c4cc:	4b18      	ldr	r3, [pc, #96]	; (1c530 <ConnectNetwork+0x104>)
   1c4ce:	4798      	blx	r3
   return SOCK_ERR_INVALID;
   1c4d0:	2309      	movs	r3, #9
   1c4d2:	425b      	negs	r3, r3
   1c4d4:	e01c      	b.n	1c510 <ConnectNetwork+0xe4>
  }
  
  /* If success, connect to socket */
  if (connect(n->socket, (struct sockaddr *)&addr_in, sizeof(struct sockaddr_in)) != SOCK_ERR_NO_ERROR) {
   1c4d6:	68fb      	ldr	r3, [r7, #12]
   1c4d8:	681b      	ldr	r3, [r3, #0]
   1c4da:	b25b      	sxtb	r3, r3
   1c4dc:	2210      	movs	r2, #16
   1c4de:	18b9      	adds	r1, r7, r2
   1c4e0:	2210      	movs	r2, #16
   1c4e2:	0018      	movs	r0, r3
   1c4e4:	4b13      	ldr	r3, [pc, #76]	; (1c534 <ConnectNetwork+0x108>)
   1c4e6:	4798      	blx	r3
   1c4e8:	1e03      	subs	r3, r0, #0
   1c4ea:	d002      	beq.n	1c4f2 <ConnectNetwork+0xc6>
   #ifdef MQTT_PLATFORM_DBG  
   printf("ERROR >> connect error.\r\n");
   #endif
   return SOCK_ERR_INVALID;
   1c4ec:	2309      	movs	r3, #9
   1c4ee:	425b      	negs	r3, r3
   1c4f0:	e00e      	b.n	1c510 <ConnectNetwork+0xe4>
  }
  
  gbMQTTBrokerConnected = false;
   1c4f2:	4b11      	ldr	r3, [pc, #68]	; (1c538 <ConnectNetwork+0x10c>)
   1c4f4:	2200      	movs	r2, #0
   1c4f6:	701a      	strb	r2, [r3, #0]
  
  /*wait for SOCKET_MSG_CONNECT event */
  while(false==gbMQTTBrokerConnected){
   1c4f8:	e002      	b.n	1c500 <ConnectNetwork+0xd4>
    m2m_wifi_handle_events(NULL);
   1c4fa:	2000      	movs	r0, #0
   1c4fc:	4b09      	ldr	r3, [pc, #36]	; (1c524 <ConnectNetwork+0xf8>)
   1c4fe:	4798      	blx	r3
  while(false==gbMQTTBrokerConnected){
   1c500:	4b0d      	ldr	r3, [pc, #52]	; (1c538 <ConnectNetwork+0x10c>)
   1c502:	781b      	ldrb	r3, [r3, #0]
   1c504:	2201      	movs	r2, #1
   1c506:	4053      	eors	r3, r2
   1c508:	b2db      	uxtb	r3, r3
   1c50a:	2b00      	cmp	r3, #0
   1c50c:	d1f5      	bne.n	1c4fa <ConnectNetwork+0xce>
  
  /* Success */
  #ifdef MQTT_PLATFORM_DBG
  printf("INFO >> ConnectNetwork successful\r\n");
  #endif
  return SOCK_ERR_NO_ERROR;
   1c50e:	2300      	movs	r3, #0
   1c510:	0018      	movs	r0, r3
   1c512:	46bd      	mov	sp, r7
   1c514:	b008      	add	sp, #32
   1c516:	bd80      	pop	{r7, pc}
   1c518:	20003da0 	.word	0x20003da0
   1c51c:	20003eac 	.word	0x20003eac
   1c520:	00012cf5 	.word	0x00012cf5
   1c524:	0000ee75 	.word	0x0000ee75
   1c528:	20003d98 	.word	0x20003d98
   1c52c:	000124a1 	.word	0x000124a1
   1c530:	00012aad 	.word	0x00012aad
   1c534:	000126b5 	.word	0x000126b5
   1c538:	20003da1 	.word	0x20003da1

0001c53c <allocateClient>:

static void allocateClient(struct mqtt_module *module);
static void deAllocateClient(struct mqtt_module *module);

static void allocateClient(struct mqtt_module *module)
{
   1c53c:	b580      	push	{r7, lr}
   1c53e:	b084      	sub	sp, #16
   1c540:	af00      	add	r7, sp, #0
   1c542:	6078      	str	r0, [r7, #4]
	unsigned int cIdx;
	
	if(!module)
   1c544:	687b      	ldr	r3, [r7, #4]
   1c546:	2b00      	cmp	r3, #0
   1c548:	d022      	beq.n	1c590 <allocateClient+0x54>
		return;
		
	for(cIdx = 0; cIdx < MQTT_MAX_CLIENTS; cIdx++)
   1c54a:	2300      	movs	r3, #0
   1c54c:	60fb      	str	r3, [r7, #12]
   1c54e:	e01b      	b.n	1c588 <allocateClient+0x4c>
	{
		if(mqttClientPool[cIdx].mqtt_instance == NULL)
   1c550:	4a11      	ldr	r2, [pc, #68]	; (1c598 <allocateClient+0x5c>)
   1c552:	68fb      	ldr	r3, [r7, #12]
   1c554:	2164      	movs	r1, #100	; 0x64
   1c556:	434b      	muls	r3, r1
   1c558:	18d3      	adds	r3, r2, r3
   1c55a:	3360      	adds	r3, #96	; 0x60
   1c55c:	681b      	ldr	r3, [r3, #0]
   1c55e:	2b00      	cmp	r3, #0
   1c560:	d10f      	bne.n	1c582 <allocateClient+0x46>
		{
			mqttClientPool[cIdx].mqtt_instance = module;
   1c562:	4a0d      	ldr	r2, [pc, #52]	; (1c598 <allocateClient+0x5c>)
   1c564:	68fb      	ldr	r3, [r7, #12]
   1c566:	2164      	movs	r1, #100	; 0x64
   1c568:	434b      	muls	r3, r1
   1c56a:	18d3      	adds	r3, r2, r3
   1c56c:	3360      	adds	r3, #96	; 0x60
   1c56e:	687a      	ldr	r2, [r7, #4]
   1c570:	601a      	str	r2, [r3, #0]
			module->client = &(mqttClientPool[cIdx].client);
   1c572:	68fb      	ldr	r3, [r7, #12]
   1c574:	2264      	movs	r2, #100	; 0x64
   1c576:	435a      	muls	r2, r3
   1c578:	4b07      	ldr	r3, [pc, #28]	; (1c598 <allocateClient+0x5c>)
   1c57a:	18d2      	adds	r2, r2, r3
   1c57c:	687b      	ldr	r3, [r7, #4]
   1c57e:	61da      	str	r2, [r3, #28]
			return;
   1c580:	e007      	b.n	1c592 <allocateClient+0x56>
	for(cIdx = 0; cIdx < MQTT_MAX_CLIENTS; cIdx++)
   1c582:	68fb      	ldr	r3, [r7, #12]
   1c584:	3301      	adds	r3, #1
   1c586:	60fb      	str	r3, [r7, #12]
   1c588:	68fb      	ldr	r3, [r7, #12]
   1c58a:	2b06      	cmp	r3, #6
   1c58c:	d9e0      	bls.n	1c550 <allocateClient+0x14>
   1c58e:	e000      	b.n	1c592 <allocateClient+0x56>
		return;
   1c590:	46c0      	nop			; (mov r8, r8)
		}
	}	
}
   1c592:	46bd      	mov	sp, r7
   1c594:	b004      	add	sp, #16
   1c596:	bd80      	pop	{r7, pc}
   1c598:	20003eb0 	.word	0x20003eb0

0001c59c <mqtt_init>:
		}
	}
}

int mqtt_init(struct mqtt_module *module, struct mqtt_config *config)
{
   1c59c:	b5f0      	push	{r4, r5, r6, r7, lr}
   1c59e:	b089      	sub	sp, #36	; 0x24
   1c5a0:	af04      	add	r7, sp, #16
   1c5a2:	6078      	str	r0, [r7, #4]
   1c5a4:	6039      	str	r1, [r7, #0]
	unsigned int timeout_ms;
	
	if(NULL == module || NULL == config || NULL == config->send_buffer || NULL == config->read_buffer)
   1c5a6:	687b      	ldr	r3, [r7, #4]
   1c5a8:	2b00      	cmp	r3, #0
   1c5aa:	d00a      	beq.n	1c5c2 <mqtt_init+0x26>
   1c5ac:	683b      	ldr	r3, [r7, #0]
   1c5ae:	2b00      	cmp	r3, #0
   1c5b0:	d007      	beq.n	1c5c2 <mqtt_init+0x26>
   1c5b2:	683b      	ldr	r3, [r7, #0]
   1c5b4:	691b      	ldr	r3, [r3, #16]
   1c5b6:	2b00      	cmp	r3, #0
   1c5b8:	d003      	beq.n	1c5c2 <mqtt_init+0x26>
   1c5ba:	683b      	ldr	r3, [r7, #0]
   1c5bc:	689b      	ldr	r3, [r3, #8]
   1c5be:	2b00      	cmp	r3, #0
   1c5c0:	d102      	bne.n	1c5c8 <mqtt_init+0x2c>
		return FAILURE;
   1c5c2:	2301      	movs	r3, #1
   1c5c4:	425b      	negs	r3, r3
   1c5c6:	e034      	b.n	1c632 <mqtt_init+0x96>
		
	timeout_ms = config->keep_alive * 1000;
   1c5c8:	683b      	ldr	r3, [r7, #0]
   1c5ca:	889b      	ldrh	r3, [r3, #4]
   1c5cc:	001a      	movs	r2, r3
   1c5ce:	23fa      	movs	r3, #250	; 0xfa
   1c5d0:	009b      	lsls	r3, r3, #2
   1c5d2:	4353      	muls	r3, r2
   1c5d4:	60fb      	str	r3, [r7, #12]
	NetworkInit(&(module->network));
   1c5d6:	687b      	ldr	r3, [r7, #4]
   1c5d8:	3320      	adds	r3, #32
   1c5da:	0018      	movs	r0, r3
   1c5dc:	4b17      	ldr	r3, [pc, #92]	; (1c63c <mqtt_init+0xa0>)
   1c5de:	4798      	blx	r3
	memcpy((void *)&(module->config), config, sizeof(struct mqtt_config));
   1c5e0:	687b      	ldr	r3, [r7, #4]
   1c5e2:	3304      	adds	r3, #4
   1c5e4:	6839      	ldr	r1, [r7, #0]
   1c5e6:	2218      	movs	r2, #24
   1c5e8:	0018      	movs	r0, r3
   1c5ea:	4b15      	ldr	r3, [pc, #84]	; (1c640 <mqtt_init+0xa4>)
   1c5ec:	4798      	blx	r3
	allocateClient(module);
   1c5ee:	687b      	ldr	r3, [r7, #4]
   1c5f0:	0018      	movs	r0, r3
   1c5f2:	4b14      	ldr	r3, [pc, #80]	; (1c644 <mqtt_init+0xa8>)
   1c5f4:	4798      	blx	r3
	
	if(module->client)
   1c5f6:	687b      	ldr	r3, [r7, #4]
   1c5f8:	69db      	ldr	r3, [r3, #28]
   1c5fa:	2b00      	cmp	r3, #0
   1c5fc:	d017      	beq.n	1c62e <mqtt_init+0x92>
	{
		MQTTClientInit(module->client, &(module->network), timeout_ms, config->send_buffer, config->send_buffer_size, config->read_buffer, config->read_buffer_size);
   1c5fe:	687b      	ldr	r3, [r7, #4]
   1c600:	69d8      	ldr	r0, [r3, #28]
   1c602:	687b      	ldr	r3, [r7, #4]
   1c604:	3320      	adds	r3, #32
   1c606:	001c      	movs	r4, r3
   1c608:	683b      	ldr	r3, [r7, #0]
   1c60a:	691e      	ldr	r6, [r3, #16]
   1c60c:	683b      	ldr	r3, [r7, #0]
   1c60e:	695a      	ldr	r2, [r3, #20]
   1c610:	683b      	ldr	r3, [r7, #0]
   1c612:	6899      	ldr	r1, [r3, #8]
   1c614:	683b      	ldr	r3, [r7, #0]
   1c616:	68db      	ldr	r3, [r3, #12]
   1c618:	68fd      	ldr	r5, [r7, #12]
   1c61a:	9302      	str	r3, [sp, #8]
   1c61c:	9101      	str	r1, [sp, #4]
   1c61e:	9200      	str	r2, [sp, #0]
   1c620:	0033      	movs	r3, r6
   1c622:	002a      	movs	r2, r5
   1c624:	0021      	movs	r1, r4
   1c626:	4c08      	ldr	r4, [pc, #32]	; (1c648 <mqtt_init+0xac>)
   1c628:	47a0      	blx	r4
		return SUCCESS;
   1c62a:	2300      	movs	r3, #0
   1c62c:	e001      	b.n	1c632 <mqtt_init+0x96>
	}
	else
		return FAILURE;
   1c62e:	2301      	movs	r3, #1
   1c630:	425b      	negs	r3, r3
}
   1c632:	0018      	movs	r0, r3
   1c634:	46bd      	mov	sp, r7
   1c636:	b005      	add	sp, #20
   1c638:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1c63a:	46c0      	nop			; (mov r8, r8)
   1c63c:	0001c3f5 	.word	0x0001c3f5
   1c640:	000217e5 	.word	0x000217e5
   1c644:	0001c53d 	.word	0x0001c53d
   1c648:	0001b46d 	.word	0x0001b46d

0001c64c <mqtt_get_config_defaults>:
	else
		return FAILURE;
}

void mqtt_get_config_defaults(struct mqtt_config *const config)
{
   1c64c:	b580      	push	{r7, lr}
   1c64e:	b082      	sub	sp, #8
   1c650:	af00      	add	r7, sp, #0
   1c652:	6078      	str	r0, [r7, #4]
	config->port = 1883;
   1c654:	687b      	ldr	r3, [r7, #4]
   1c656:	4a0c      	ldr	r2, [pc, #48]	; (1c688 <mqtt_get_config_defaults+0x3c>)
   1c658:	801a      	strh	r2, [r3, #0]
	config->tls = 0;
   1c65a:	687b      	ldr	r3, [r7, #4]
   1c65c:	2200      	movs	r2, #0
   1c65e:	709a      	strb	r2, [r3, #2]
	config->keep_alive = 60;
   1c660:	687b      	ldr	r3, [r7, #4]
   1c662:	223c      	movs	r2, #60	; 0x3c
   1c664:	809a      	strh	r2, [r3, #4]
	/* Below configuration must be initialized by Application */
	config->read_buffer = NULL;
   1c666:	687b      	ldr	r3, [r7, #4]
   1c668:	2200      	movs	r2, #0
   1c66a:	609a      	str	r2, [r3, #8]
	config->send_buffer = NULL;
   1c66c:	687b      	ldr	r3, [r7, #4]
   1c66e:	2200      	movs	r2, #0
   1c670:	611a      	str	r2, [r3, #16]
	config->read_buffer_size = 0;
   1c672:	687b      	ldr	r3, [r7, #4]
   1c674:	2200      	movs	r2, #0
   1c676:	60da      	str	r2, [r3, #12]
	config->send_buffer_size = 0;
   1c678:	687b      	ldr	r3, [r7, #4]
   1c67a:	2200      	movs	r2, #0
   1c67c:	615a      	str	r2, [r3, #20]
}
   1c67e:	46c0      	nop			; (mov r8, r8)
   1c680:	46bd      	mov	sp, r7
   1c682:	b002      	add	sp, #8
   1c684:	bd80      	pop	{r7, pc}
   1c686:	46c0      	nop			; (mov r8, r8)
   1c688:	0000075b 	.word	0x0000075b

0001c68c <mqtt_register_callback>:

int mqtt_register_callback(struct mqtt_module *module, mqtt_callback_t callback)
{
   1c68c:	b580      	push	{r7, lr}
   1c68e:	b082      	sub	sp, #8
   1c690:	af00      	add	r7, sp, #0
   1c692:	6078      	str	r0, [r7, #4]
   1c694:	6039      	str	r1, [r7, #0]
	if(module)
   1c696:	687b      	ldr	r3, [r7, #4]
   1c698:	2b00      	cmp	r3, #0
   1c69a:	d004      	beq.n	1c6a6 <mqtt_register_callback+0x1a>
	{
		module->callback = callback;
   1c69c:	687b      	ldr	r3, [r7, #4]
   1c69e:	683a      	ldr	r2, [r7, #0]
   1c6a0:	601a      	str	r2, [r3, #0]
		return SUCCESS;
   1c6a2:	2300      	movs	r3, #0
   1c6a4:	e001      	b.n	1c6aa <mqtt_register_callback+0x1e>
	}
	else
		return FAILURE;
   1c6a6:	2301      	movs	r3, #1
   1c6a8:	425b      	negs	r3, r3
}
   1c6aa:	0018      	movs	r0, r3
   1c6ac:	46bd      	mov	sp, r7
   1c6ae:	b002      	add	sp, #8
   1c6b0:	bd80      	pop	{r7, pc}
	...

0001c6b4 <mqtt_socket_event_handler>:
	module->callback = NULL;
	return SUCCESS;
}

void mqtt_socket_event_handler(SOCKET sock, uint8_t msg_type, void *msg_data)
{
   1c6b4:	b580      	push	{r7, lr}
   1c6b6:	b082      	sub	sp, #8
   1c6b8:	af00      	add	r7, sp, #0
   1c6ba:	603a      	str	r2, [r7, #0]
   1c6bc:	1dfb      	adds	r3, r7, #7
   1c6be:	1c02      	adds	r2, r0, #0
   1c6c0:	701a      	strb	r2, [r3, #0]
   1c6c2:	1dbb      	adds	r3, r7, #6
   1c6c4:	1c0a      	adds	r2, r1, #0
   1c6c6:	701a      	strb	r2, [r3, #0]
	tcpClientSocketEventHandler(sock, msg_type, msg_data);
   1c6c8:	683a      	ldr	r2, [r7, #0]
   1c6ca:	1dbb      	adds	r3, r7, #6
   1c6cc:	7819      	ldrb	r1, [r3, #0]
   1c6ce:	1dfb      	adds	r3, r7, #7
   1c6d0:	781b      	ldrb	r3, [r3, #0]
   1c6d2:	b25b      	sxtb	r3, r3
   1c6d4:	0018      	movs	r0, r3
   1c6d6:	4b03      	ldr	r3, [pc, #12]	; (1c6e4 <mqtt_socket_event_handler+0x30>)
   1c6d8:	4798      	blx	r3
}
   1c6da:	46c0      	nop			; (mov r8, r8)
   1c6dc:	46bd      	mov	sp, r7
   1c6de:	b002      	add	sp, #8
   1c6e0:	bd80      	pop	{r7, pc}
   1c6e2:	46c0      	nop			; (mov r8, r8)
   1c6e4:	0001c131 	.word	0x0001c131

0001c6e8 <mqtt_socket_resolve_handler>:

void mqtt_socket_resolve_handler(uint8_t *domain_name, uint32_t server_ip)
{
   1c6e8:	b580      	push	{r7, lr}
   1c6ea:	b082      	sub	sp, #8
   1c6ec:	af00      	add	r7, sp, #0
   1c6ee:	6078      	str	r0, [r7, #4]
   1c6f0:	6039      	str	r1, [r7, #0]
	dnsResolveCallback(domain_name, server_ip);
   1c6f2:	683a      	ldr	r2, [r7, #0]
   1c6f4:	687b      	ldr	r3, [r7, #4]
   1c6f6:	0011      	movs	r1, r2
   1c6f8:	0018      	movs	r0, r3
   1c6fa:	4b03      	ldr	r3, [pc, #12]	; (1c708 <mqtt_socket_resolve_handler+0x20>)
   1c6fc:	4798      	blx	r3
}
   1c6fe:	46c0      	nop			; (mov r8, r8)
   1c700:	46bd      	mov	sp, r7
   1c702:	b002      	add	sp, #8
   1c704:	bd80      	pop	{r7, pc}
   1c706:	46c0      	nop			; (mov r8, r8)
   1c708:	0001c0e1 	.word	0x0001c0e1

0001c70c <mqtt_connect>:

int mqtt_connect(struct mqtt_module *module, const char *host)
{
   1c70c:	b590      	push	{r4, r7, lr}
   1c70e:	b085      	sub	sp, #20
   1c710:	af00      	add	r7, sp, #0
   1c712:	6078      	str	r0, [r7, #4]
   1c714:	6039      	str	r1, [r7, #0]
	union mqtt_data connResult;
	connResult.sock_connected.result = ConnectNetwork(&(module->network), (char *)host, module->config.port, module->config.tls);
   1c716:	687b      	ldr	r3, [r7, #4]
   1c718:	3320      	adds	r3, #32
   1c71a:	0018      	movs	r0, r3
   1c71c:	687b      	ldr	r3, [r7, #4]
   1c71e:	889b      	ldrh	r3, [r3, #4]
   1c720:	001a      	movs	r2, r3
   1c722:	687b      	ldr	r3, [r7, #4]
   1c724:	799b      	ldrb	r3, [r3, #6]
   1c726:	6839      	ldr	r1, [r7, #0]
   1c728:	4c09      	ldr	r4, [pc, #36]	; (1c750 <mqtt_connect+0x44>)
   1c72a:	47a0      	blx	r4
   1c72c:	0003      	movs	r3, r0
   1c72e:	60fb      	str	r3, [r7, #12]
	if(module->callback)
   1c730:	687b      	ldr	r3, [r7, #4]
   1c732:	681b      	ldr	r3, [r3, #0]
   1c734:	2b00      	cmp	r3, #0
   1c736:	d006      	beq.n	1c746 <mqtt_connect+0x3a>
		module->callback(module, MQTT_CALLBACK_SOCK_CONNECTED, &connResult);
   1c738:	687b      	ldr	r3, [r7, #4]
   1c73a:	681b      	ldr	r3, [r3, #0]
   1c73c:	220c      	movs	r2, #12
   1c73e:	18ba      	adds	r2, r7, r2
   1c740:	6878      	ldr	r0, [r7, #4]
   1c742:	2100      	movs	r1, #0
   1c744:	4798      	blx	r3
	return connResult.sock_connected.result;
   1c746:	68fb      	ldr	r3, [r7, #12]
}
   1c748:	0018      	movs	r0, r3
   1c74a:	46bd      	mov	sp, r7
   1c74c:	b005      	add	sp, #20
   1c74e:	bd90      	pop	{r4, r7, pc}
   1c750:	0001c42d 	.word	0x0001c42d

0001c754 <mqtt_connect_broker>:

int mqtt_connect_broker(struct mqtt_module *const module, uint8_t clean_session, const char *id, const char *password, const char *client_id, const char *will_topic, const char *will_msg, uint32_t will_msg_len, uint8_t will_qos, uint8_t will_retain)
{
   1c754:	b580      	push	{r7, lr}
   1c756:	b09c      	sub	sp, #112	; 0x70
   1c758:	af00      	add	r7, sp, #0
   1c75a:	60f8      	str	r0, [r7, #12]
   1c75c:	607a      	str	r2, [r7, #4]
   1c75e:	603b      	str	r3, [r7, #0]
   1c760:	230b      	movs	r3, #11
   1c762:	18fb      	adds	r3, r7, r3
   1c764:	1c0a      	adds	r2, r1, #0
   1c766:	701a      	strb	r2, [r3, #0]
	// Will Message length is not used by Paho MQTT. 
	int rc;
	union mqtt_data connBrokerResult;
	MQTTPacket_connectData connectData = MQTTPacket_connectData_initializer;
   1c768:	2310      	movs	r3, #16
   1c76a:	18fa      	adds	r2, r7, r3
   1c76c:	4b31      	ldr	r3, [pc, #196]	; (1c834 <mqtt_connect_broker+0xe0>)
   1c76e:	0010      	movs	r0, r2
   1c770:	0019      	movs	r1, r3
   1c772:	2358      	movs	r3, #88	; 0x58
   1c774:	001a      	movs	r2, r3
   1c776:	4b30      	ldr	r3, [pc, #192]	; (1c838 <mqtt_connect_broker+0xe4>)
   1c778:	4798      	blx	r3
		
	connectData.MQTTVersion = 4; //use protocol version 3.1.1
   1c77a:	2310      	movs	r3, #16
   1c77c:	18fb      	adds	r3, r7, r3
   1c77e:	2204      	movs	r2, #4
   1c780:	721a      	strb	r2, [r3, #8]
	connectData.clientID.cstring = (char *)client_id;
   1c782:	2310      	movs	r3, #16
   1c784:	18fb      	adds	r3, r7, r3
   1c786:	6fba      	ldr	r2, [r7, #120]	; 0x78
   1c788:	60da      	str	r2, [r3, #12]
	connectData.username.cstring = (char *)id;
   1c78a:	2310      	movs	r3, #16
   1c78c:	18fb      	adds	r3, r7, r3
   1c78e:	687a      	ldr	r2, [r7, #4]
   1c790:	641a      	str	r2, [r3, #64]	; 0x40
	connectData.password.cstring = (char *)password;
   1c792:	2310      	movs	r3, #16
   1c794:	18fb      	adds	r3, r7, r3
   1c796:	683a      	ldr	r2, [r7, #0]
   1c798:	64da      	str	r2, [r3, #76]	; 0x4c
	connectData.cleansession = clean_session;
   1c79a:	2310      	movs	r3, #16
   1c79c:	18fb      	adds	r3, r7, r3
   1c79e:	220b      	movs	r2, #11
   1c7a0:	18ba      	adds	r2, r7, r2
   1c7a2:	7812      	ldrb	r2, [r2, #0]
   1c7a4:	769a      	strb	r2, [r3, #26]
	connectData.will.topicName.cstring = (char *)will_topic;
   1c7a6:	2310      	movs	r3, #16
   1c7a8:	18fb      	adds	r3, r7, r3
   1c7aa:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
   1c7ac:	625a      	str	r2, [r3, #36]	; 0x24
	connectData.will.message.cstring = (char *)will_msg;
   1c7ae:	2310      	movs	r3, #16
   1c7b0:	18fb      	adds	r3, r7, r3
   1c7b2:	2280      	movs	r2, #128	; 0x80
   1c7b4:	18ba      	adds	r2, r7, r2
   1c7b6:	6812      	ldr	r2, [r2, #0]
   1c7b8:	631a      	str	r2, [r3, #48]	; 0x30
	connectData.will.retained = will_retain;
   1c7ba:	2310      	movs	r3, #16
   1c7bc:	18fb      	adds	r3, r7, r3
   1c7be:	228c      	movs	r2, #140	; 0x8c
   1c7c0:	18ba      	adds	r2, r7, r2
   1c7c2:	213c      	movs	r1, #60	; 0x3c
   1c7c4:	7812      	ldrb	r2, [r2, #0]
   1c7c6:	545a      	strb	r2, [r3, r1]
	connectData.will.qos = will_qos;
   1c7c8:	2310      	movs	r3, #16
   1c7ca:	18fb      	adds	r3, r7, r3
   1c7cc:	2288      	movs	r2, #136	; 0x88
   1c7ce:	18ba      	adds	r2, r7, r2
   1c7d0:	213d      	movs	r1, #61	; 0x3d
   1c7d2:	7812      	ldrb	r2, [r2, #0]
   1c7d4:	545a      	strb	r2, [r3, r1]
	
	if(will_topic && will_msg)
   1c7d6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
   1c7d8:	2b00      	cmp	r3, #0
   1c7da:	d008      	beq.n	1c7ee <mqtt_connect_broker+0x9a>
   1c7dc:	2380      	movs	r3, #128	; 0x80
   1c7de:	18fb      	adds	r3, r7, r3
   1c7e0:	681b      	ldr	r3, [r3, #0]
   1c7e2:	2b00      	cmp	r3, #0
   1c7e4:	d003      	beq.n	1c7ee <mqtt_connect_broker+0x9a>
		connectData.willFlag = 1;
   1c7e6:	2310      	movs	r3, #16
   1c7e8:	18fb      	adds	r3, r7, r3
   1c7ea:	2201      	movs	r2, #1
   1c7ec:	76da      	strb	r2, [r3, #27]
		
	rc = MQTTConnect(module->client, &connectData);
   1c7ee:	68fb      	ldr	r3, [r7, #12]
   1c7f0:	69db      	ldr	r3, [r3, #28]
   1c7f2:	2210      	movs	r2, #16
   1c7f4:	18ba      	adds	r2, r7, r2
   1c7f6:	0011      	movs	r1, r2
   1c7f8:	0018      	movs	r0, r3
   1c7fa:	4b10      	ldr	r3, [pc, #64]	; (1c83c <mqtt_connect_broker+0xe8>)
   1c7fc:	4798      	blx	r3
   1c7fe:	0003      	movs	r3, r0
   1c800:	66fb      	str	r3, [r7, #108]	; 0x6c
	
	connBrokerResult.connected.result = rc;
   1c802:	6efb      	ldr	r3, [r7, #108]	; 0x6c
   1c804:	b2da      	uxtb	r2, r3
   1c806:	2368      	movs	r3, #104	; 0x68
   1c808:	18fb      	adds	r3, r7, r3
   1c80a:	701a      	strb	r2, [r3, #0]
	if(module->callback)
   1c80c:	68fb      	ldr	r3, [r7, #12]
   1c80e:	681b      	ldr	r3, [r3, #0]
   1c810:	2b00      	cmp	r3, #0
   1c812:	d006      	beq.n	1c822 <mqtt_connect_broker+0xce>
		module->callback(module, MQTT_CALLBACK_CONNECTED, &connBrokerResult);
   1c814:	68fb      	ldr	r3, [r7, #12]
   1c816:	681b      	ldr	r3, [r3, #0]
   1c818:	2268      	movs	r2, #104	; 0x68
   1c81a:	18ba      	adds	r2, r7, r2
   1c81c:	68f8      	ldr	r0, [r7, #12]
   1c81e:	2101      	movs	r1, #1
   1c820:	4798      	blx	r3
	
	module->isConnected = true;
   1c822:	68fb      	ldr	r3, [r7, #12]
   1c824:	2234      	movs	r2, #52	; 0x34
   1c826:	2101      	movs	r1, #1
   1c828:	5499      	strb	r1, [r3, r2]
	return rc;
   1c82a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
}
   1c82c:	0018      	movs	r0, r3
   1c82e:	46bd      	mov	sp, r7
   1c830:	b01c      	add	sp, #112	; 0x70
   1c832:	bd80      	pop	{r7, pc}
   1c834:	000266f8 	.word	0x000266f8
   1c838:	000217e5 	.word	0x000217e5
   1c83c:	0001bb7d 	.word	0x0001bb7d

0001c840 <mqtt_disconnect>:

int mqtt_disconnect(struct mqtt_module *const module, int force_close)
{
   1c840:	b580      	push	{r7, lr}
   1c842:	b084      	sub	sp, #16
   1c844:	af00      	add	r7, sp, #0
   1c846:	6078      	str	r0, [r7, #4]
   1c848:	6039      	str	r1, [r7, #0]
	//force_close is not used by Paho MQTT
	int rc;
	union mqtt_data disconnectResult;
	
	rc = MQTTDisconnect(module->client);
   1c84a:	687b      	ldr	r3, [r7, #4]
   1c84c:	69db      	ldr	r3, [r3, #28]
   1c84e:	0018      	movs	r0, r3
   1c850:	4b0c      	ldr	r3, [pc, #48]	; (1c884 <mqtt_disconnect+0x44>)
   1c852:	4798      	blx	r3
   1c854:	0003      	movs	r3, r0
   1c856:	60fb      	str	r3, [r7, #12]
	
	disconnectResult.disconnected.reason = rc;
   1c858:	68fb      	ldr	r3, [r7, #12]
   1c85a:	60bb      	str	r3, [r7, #8]
	
	if(module->callback)
   1c85c:	687b      	ldr	r3, [r7, #4]
   1c85e:	681b      	ldr	r3, [r3, #0]
   1c860:	2b00      	cmp	r3, #0
   1c862:	d006      	beq.n	1c872 <mqtt_disconnect+0x32>
		module->callback(module, MQTT_CALLBACK_DISCONNECTED, &disconnectResult);
   1c864:	687b      	ldr	r3, [r7, #4]
   1c866:	681b      	ldr	r3, [r3, #0]
   1c868:	2208      	movs	r2, #8
   1c86a:	18ba      	adds	r2, r7, r2
   1c86c:	6878      	ldr	r0, [r7, #4]
   1c86e:	2105      	movs	r1, #5
   1c870:	4798      	blx	r3
	
	module->isConnected = false;
   1c872:	687b      	ldr	r3, [r7, #4]
   1c874:	2234      	movs	r2, #52	; 0x34
   1c876:	2100      	movs	r1, #0
   1c878:	5499      	strb	r1, [r3, r2]
	return rc;
   1c87a:	68fb      	ldr	r3, [r7, #12]
}
   1c87c:	0018      	movs	r0, r3
   1c87e:	46bd      	mov	sp, r7
   1c880:	b004      	add	sp, #16
   1c882:	bd80      	pop	{r7, pc}
   1c884:	0001c009 	.word	0x0001c009

0001c888 <mqtt_publish>:

int mqtt_publish(struct mqtt_module *const module, const char *topic, const char *msg, uint32_t msg_len, uint8_t qos, uint8_t retain)
{
   1c888:	b580      	push	{r7, lr}
   1c88a:	b08a      	sub	sp, #40	; 0x28
   1c88c:	af00      	add	r7, sp, #0
   1c88e:	60f8      	str	r0, [r7, #12]
   1c890:	60b9      	str	r1, [r7, #8]
   1c892:	607a      	str	r2, [r7, #4]
   1c894:	603b      	str	r3, [r7, #0]
	int rc;
	MQTTMessage mqttMsg;	
	
	mqttMsg.qos = qos;
   1c896:	2314      	movs	r3, #20
   1c898:	18fb      	adds	r3, r7, r3
   1c89a:	2230      	movs	r2, #48	; 0x30
   1c89c:	18ba      	adds	r2, r7, r2
   1c89e:	7812      	ldrb	r2, [r2, #0]
   1c8a0:	701a      	strb	r2, [r3, #0]
	mqttMsg.payload = (char *)msg;
   1c8a2:	2314      	movs	r3, #20
   1c8a4:	18fb      	adds	r3, r7, r3
   1c8a6:	687a      	ldr	r2, [r7, #4]
   1c8a8:	609a      	str	r2, [r3, #8]
	mqttMsg.payloadlen = (size_t)msg_len;
   1c8aa:	2314      	movs	r3, #20
   1c8ac:	18fb      	adds	r3, r7, r3
   1c8ae:	683a      	ldr	r2, [r7, #0]
   1c8b0:	60da      	str	r2, [r3, #12]
	mqttMsg.retained = retain;
   1c8b2:	2314      	movs	r3, #20
   1c8b4:	18fb      	adds	r3, r7, r3
   1c8b6:	2234      	movs	r2, #52	; 0x34
   1c8b8:	18ba      	adds	r2, r7, r2
   1c8ba:	7812      	ldrb	r2, [r2, #0]
   1c8bc:	705a      	strb	r2, [r3, #1]
	
	rc = MQTTPublish(module->client, topic, &mqttMsg);
   1c8be:	68fb      	ldr	r3, [r7, #12]
   1c8c0:	69db      	ldr	r3, [r3, #28]
   1c8c2:	2214      	movs	r2, #20
   1c8c4:	18ba      	adds	r2, r7, r2
   1c8c6:	68b9      	ldr	r1, [r7, #8]
   1c8c8:	0018      	movs	r0, r3
   1c8ca:	4b09      	ldr	r3, [pc, #36]	; (1c8f0 <mqtt_publish+0x68>)
   1c8cc:	4798      	blx	r3
   1c8ce:	0003      	movs	r3, r0
   1c8d0:	627b      	str	r3, [r7, #36]	; 0x24
	
	if(module->callback)
   1c8d2:	68fb      	ldr	r3, [r7, #12]
   1c8d4:	681b      	ldr	r3, [r3, #0]
   1c8d6:	2b00      	cmp	r3, #0
   1c8d8:	d005      	beq.n	1c8e6 <mqtt_publish+0x5e>
		module->callback(module, MQTT_CALLBACK_PUBLISHED, NULL);
   1c8da:	68fb      	ldr	r3, [r7, #12]
   1c8dc:	681b      	ldr	r3, [r3, #0]
   1c8de:	68f8      	ldr	r0, [r7, #12]
   1c8e0:	2200      	movs	r2, #0
   1c8e2:	2102      	movs	r1, #2
   1c8e4:	4798      	blx	r3
	
	return rc;
   1c8e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
   1c8e8:	0018      	movs	r0, r3
   1c8ea:	46bd      	mov	sp, r7
   1c8ec:	b00a      	add	sp, #40	; 0x28
   1c8ee:	bd80      	pop	{r7, pc}
   1c8f0:	0001be49 	.word	0x0001be49

0001c8f4 <mqtt_subscribe>:

int mqtt_subscribe(struct mqtt_module *module, const char *topic, uint8_t qos, messageHandler msgHandler)
{
   1c8f4:	b590      	push	{r4, r7, lr}
   1c8f6:	b087      	sub	sp, #28
   1c8f8:	af00      	add	r7, sp, #0
   1c8fa:	60f8      	str	r0, [r7, #12]
   1c8fc:	60b9      	str	r1, [r7, #8]
   1c8fe:	603b      	str	r3, [r7, #0]
   1c900:	1dfb      	adds	r3, r7, #7
   1c902:	701a      	strb	r2, [r3, #0]
	int rc;
	
	rc = MQTTSubscribe(module->client, topic, qos, msgHandler);
   1c904:	68fb      	ldr	r3, [r7, #12]
   1c906:	69d8      	ldr	r0, [r3, #28]
   1c908:	683c      	ldr	r4, [r7, #0]
   1c90a:	1dfb      	adds	r3, r7, #7
   1c90c:	781a      	ldrb	r2, [r3, #0]
   1c90e:	68b9      	ldr	r1, [r7, #8]
   1c910:	0023      	movs	r3, r4
   1c912:	4c09      	ldr	r4, [pc, #36]	; (1c938 <mqtt_subscribe+0x44>)
   1c914:	47a0      	blx	r4
   1c916:	0003      	movs	r3, r0
   1c918:	617b      	str	r3, [r7, #20]
	
	if(module->callback)
   1c91a:	68fb      	ldr	r3, [r7, #12]
   1c91c:	681b      	ldr	r3, [r3, #0]
   1c91e:	2b00      	cmp	r3, #0
   1c920:	d005      	beq.n	1c92e <mqtt_subscribe+0x3a>
		module->callback(module, MQTT_CALLBACK_SUBSCRIBED, NULL);	
   1c922:	68fb      	ldr	r3, [r7, #12]
   1c924:	681b      	ldr	r3, [r3, #0]
   1c926:	68f8      	ldr	r0, [r7, #12]
   1c928:	2200      	movs	r2, #0
   1c92a:	2103      	movs	r1, #3
   1c92c:	4798      	blx	r3
	
	return rc;
   1c92e:	697b      	ldr	r3, [r7, #20]
}
   1c930:	0018      	movs	r0, r3
   1c932:	46bd      	mov	sp, r7
   1c934:	b007      	add	sp, #28
   1c936:	bd90      	pop	{r4, r7, pc}
   1c938:	0001bcbd 	.word	0x0001bcbd

0001c93c <mqtt_yield>:
	
	return rc;
}

int mqtt_yield(struct mqtt_module *module, int timeout_ms)
{
   1c93c:	b580      	push	{r7, lr}
   1c93e:	b082      	sub	sp, #8
   1c940:	af00      	add	r7, sp, #0
   1c942:	6078      	str	r0, [r7, #4]
   1c944:	6039      	str	r1, [r7, #0]
	return MQTTYield(module->client, timeout_ms);
   1c946:	687b      	ldr	r3, [r7, #4]
   1c948:	69db      	ldr	r3, [r3, #28]
   1c94a:	683a      	ldr	r2, [r7, #0]
   1c94c:	0011      	movs	r1, r2
   1c94e:	0018      	movs	r0, r3
   1c950:	4b03      	ldr	r3, [pc, #12]	; (1c960 <mqtt_yield+0x24>)
   1c952:	4798      	blx	r3
   1c954:	0003      	movs	r3, r0
   1c956:	0018      	movs	r0, r3
   1c958:	46bd      	mov	sp, r7
   1c95a:	b002      	add	sp, #8
   1c95c:	bd80      	pop	{r7, pc}
   1c95e:	46c0      	nop			; (mov r8, r8)
   1c960:	0001bac5 	.word	0x0001bac5

0001c964 <MQTTSerialize_connectLength>:
  * Determines the length of the MQTT connect packet that would be produced using the supplied connect options.
  * @param options the options to be used to build the connect packet
  * @return the length of buffer needed to contain the serialized version of the packet
  */
int MQTTSerialize_connectLength(MQTTPacket_connectData* options)
{
   1c964:	b590      	push	{r4, r7, lr}
   1c966:	b085      	sub	sp, #20
   1c968:	af00      	add	r7, sp, #0
   1c96a:	6078      	str	r0, [r7, #4]
	int len = 0;
   1c96c:	2300      	movs	r3, #0
   1c96e:	60fb      	str	r3, [r7, #12]

	FUNC_ENTRY;

	if (options->MQTTVersion == 3)
   1c970:	687b      	ldr	r3, [r7, #4]
   1c972:	7a1b      	ldrb	r3, [r3, #8]
   1c974:	2b03      	cmp	r3, #3
   1c976:	d102      	bne.n	1c97e <MQTTSerialize_connectLength+0x1a>
		len = 12; /* variable depending on MQTT or MQIsdp */
   1c978:	230c      	movs	r3, #12
   1c97a:	60fb      	str	r3, [r7, #12]
   1c97c:	e005      	b.n	1c98a <MQTTSerialize_connectLength+0x26>
	else if (options->MQTTVersion == 4)
   1c97e:	687b      	ldr	r3, [r7, #4]
   1c980:	7a1b      	ldrb	r3, [r3, #8]
   1c982:	2b04      	cmp	r3, #4
   1c984:	d101      	bne.n	1c98a <MQTTSerialize_connectLength+0x26>
		len = 10;
   1c986:	230a      	movs	r3, #10
   1c988:	60fb      	str	r3, [r7, #12]

	len += MQTTstrlen(options->clientID)+2;
   1c98a:	687b      	ldr	r3, [r7, #4]
   1c98c:	68d8      	ldr	r0, [r3, #12]
   1c98e:	6919      	ldr	r1, [r3, #16]
   1c990:	695a      	ldr	r2, [r3, #20]
   1c992:	4b25      	ldr	r3, [pc, #148]	; (1ca28 <MQTTSerialize_connectLength+0xc4>)
   1c994:	4798      	blx	r3
   1c996:	0003      	movs	r3, r0
   1c998:	3302      	adds	r3, #2
   1c99a:	68fa      	ldr	r2, [r7, #12]
   1c99c:	18d3      	adds	r3, r2, r3
   1c99e:	60fb      	str	r3, [r7, #12]
	if (options->willFlag)
   1c9a0:	687b      	ldr	r3, [r7, #4]
   1c9a2:	7edb      	ldrb	r3, [r3, #27]
   1c9a4:	2b00      	cmp	r3, #0
   1c9a6:	d013      	beq.n	1c9d0 <MQTTSerialize_connectLength+0x6c>
		len += MQTTstrlen(options->will.topicName)+2 + MQTTstrlen(options->will.message)+2;
   1c9a8:	687b      	ldr	r3, [r7, #4]
   1c9aa:	6a58      	ldr	r0, [r3, #36]	; 0x24
   1c9ac:	6a99      	ldr	r1, [r3, #40]	; 0x28
   1c9ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1c9b0:	4b1d      	ldr	r3, [pc, #116]	; (1ca28 <MQTTSerialize_connectLength+0xc4>)
   1c9b2:	4798      	blx	r3
   1c9b4:	0003      	movs	r3, r0
   1c9b6:	1c9c      	adds	r4, r3, #2
   1c9b8:	687b      	ldr	r3, [r7, #4]
   1c9ba:	6b18      	ldr	r0, [r3, #48]	; 0x30
   1c9bc:	6b59      	ldr	r1, [r3, #52]	; 0x34
   1c9be:	6b9a      	ldr	r2, [r3, #56]	; 0x38
   1c9c0:	4b19      	ldr	r3, [pc, #100]	; (1ca28 <MQTTSerialize_connectLength+0xc4>)
   1c9c2:	4798      	blx	r3
   1c9c4:	0003      	movs	r3, r0
   1c9c6:	18e3      	adds	r3, r4, r3
   1c9c8:	3302      	adds	r3, #2
   1c9ca:	68fa      	ldr	r2, [r7, #12]
   1c9cc:	18d3      	adds	r3, r2, r3
   1c9ce:	60fb      	str	r3, [r7, #12]
	if (options->username.cstring || options->username.lenstring.data)
   1c9d0:	687b      	ldr	r3, [r7, #4]
   1c9d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   1c9d4:	2b00      	cmp	r3, #0
   1c9d6:	d103      	bne.n	1c9e0 <MQTTSerialize_connectLength+0x7c>
   1c9d8:	687b      	ldr	r3, [r7, #4]
   1c9da:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   1c9dc:	2b00      	cmp	r3, #0
   1c9de:	d00a      	beq.n	1c9f6 <MQTTSerialize_connectLength+0x92>
		len += MQTTstrlen(options->username)+2;
   1c9e0:	687b      	ldr	r3, [r7, #4]
   1c9e2:	6c18      	ldr	r0, [r3, #64]	; 0x40
   1c9e4:	6c59      	ldr	r1, [r3, #68]	; 0x44
   1c9e6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
   1c9e8:	4b0f      	ldr	r3, [pc, #60]	; (1ca28 <MQTTSerialize_connectLength+0xc4>)
   1c9ea:	4798      	blx	r3
   1c9ec:	0003      	movs	r3, r0
   1c9ee:	3302      	adds	r3, #2
   1c9f0:	68fa      	ldr	r2, [r7, #12]
   1c9f2:	18d3      	adds	r3, r2, r3
   1c9f4:	60fb      	str	r3, [r7, #12]
	if (options->password.cstring || options->password.lenstring.data)
   1c9f6:	687b      	ldr	r3, [r7, #4]
   1c9f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   1c9fa:	2b00      	cmp	r3, #0
   1c9fc:	d103      	bne.n	1ca06 <MQTTSerialize_connectLength+0xa2>
   1c9fe:	687b      	ldr	r3, [r7, #4]
   1ca00:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   1ca02:	2b00      	cmp	r3, #0
   1ca04:	d00a      	beq.n	1ca1c <MQTTSerialize_connectLength+0xb8>
		len += MQTTstrlen(options->password)+2;
   1ca06:	687b      	ldr	r3, [r7, #4]
   1ca08:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
   1ca0a:	6d19      	ldr	r1, [r3, #80]	; 0x50
   1ca0c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
   1ca0e:	4b06      	ldr	r3, [pc, #24]	; (1ca28 <MQTTSerialize_connectLength+0xc4>)
   1ca10:	4798      	blx	r3
   1ca12:	0003      	movs	r3, r0
   1ca14:	3302      	adds	r3, #2
   1ca16:	68fa      	ldr	r2, [r7, #12]
   1ca18:	18d3      	adds	r3, r2, r3
   1ca1a:	60fb      	str	r3, [r7, #12]

	FUNC_EXIT_RC(len);
	return len;
   1ca1c:	68fb      	ldr	r3, [r7, #12]
}
   1ca1e:	0018      	movs	r0, r3
   1ca20:	46bd      	mov	sp, r7
   1ca22:	b005      	add	sp, #20
   1ca24:	bd90      	pop	{r4, r7, pc}
   1ca26:	46c0      	nop			; (mov r8, r8)
   1ca28:	0001d3d5 	.word	0x0001d3d5

0001ca2c <MQTTSerialize_connect>:
  * @param len the length in bytes of the supplied buffer
  * @param options the options to be used to build the connect packet
  * @return serialized length, or error if 0
  */
int MQTTSerialize_connect(unsigned char* buf, int buflen, MQTTPacket_connectData* options)
{
   1ca2c:	b590      	push	{r4, r7, lr}
   1ca2e:	b08b      	sub	sp, #44	; 0x2c
   1ca30:	af00      	add	r7, sp, #0
   1ca32:	60f8      	str	r0, [r7, #12]
   1ca34:	60b9      	str	r1, [r7, #8]
   1ca36:	607a      	str	r2, [r7, #4]
	unsigned char *ptr = buf;
   1ca38:	68fb      	ldr	r3, [r7, #12]
   1ca3a:	61fb      	str	r3, [r7, #28]
	MQTTHeader header = {0};
   1ca3c:	2300      	movs	r3, #0
   1ca3e:	61bb      	str	r3, [r7, #24]
	MQTTConnectFlags flags = {0};
   1ca40:	2300      	movs	r3, #0
   1ca42:	617b      	str	r3, [r7, #20]
	int len = 0;
   1ca44:	2300      	movs	r3, #0
   1ca46:	623b      	str	r3, [r7, #32]
	int rc = -1;
   1ca48:	2301      	movs	r3, #1
   1ca4a:	425b      	negs	r3, r3
   1ca4c:	627b      	str	r3, [r7, #36]	; 0x24

	FUNC_ENTRY;
	if (MQTTPacket_len(len = MQTTSerialize_connectLength(options)) > buflen)
   1ca4e:	687b      	ldr	r3, [r7, #4]
   1ca50:	0018      	movs	r0, r3
   1ca52:	4b8c      	ldr	r3, [pc, #560]	; (1cc84 <MQTTSerialize_connect+0x258>)
   1ca54:	4798      	blx	r3
   1ca56:	0003      	movs	r3, r0
   1ca58:	623b      	str	r3, [r7, #32]
   1ca5a:	6a3b      	ldr	r3, [r7, #32]
   1ca5c:	0018      	movs	r0, r3
   1ca5e:	4b8a      	ldr	r3, [pc, #552]	; (1cc88 <MQTTSerialize_connect+0x25c>)
   1ca60:	4798      	blx	r3
   1ca62:	0002      	movs	r2, r0
   1ca64:	68bb      	ldr	r3, [r7, #8]
   1ca66:	429a      	cmp	r2, r3
   1ca68:	dd03      	ble.n	1ca72 <MQTTSerialize_connect+0x46>
	{
		rc = MQTTPACKET_BUFFER_TOO_SHORT;
   1ca6a:	2302      	movs	r3, #2
   1ca6c:	425b      	negs	r3, r3
   1ca6e:	627b      	str	r3, [r7, #36]	; 0x24
		goto exit;
   1ca70:	e103      	b.n	1cc7a <MQTTSerialize_connect+0x24e>
	}

	header.byte = 0;
   1ca72:	2318      	movs	r3, #24
   1ca74:	18fb      	adds	r3, r7, r3
   1ca76:	2200      	movs	r2, #0
   1ca78:	701a      	strb	r2, [r3, #0]
	header.bits.type = CONNECT;
   1ca7a:	2318      	movs	r3, #24
   1ca7c:	18fb      	adds	r3, r7, r3
   1ca7e:	781a      	ldrb	r2, [r3, #0]
   1ca80:	210f      	movs	r1, #15
   1ca82:	400a      	ands	r2, r1
   1ca84:	1c11      	adds	r1, r2, #0
   1ca86:	2210      	movs	r2, #16
   1ca88:	430a      	orrs	r2, r1
   1ca8a:	701a      	strb	r2, [r3, #0]
	writeChar(&ptr, header.byte); /* write header */
   1ca8c:	2318      	movs	r3, #24
   1ca8e:	18fb      	adds	r3, r7, r3
   1ca90:	781a      	ldrb	r2, [r3, #0]
   1ca92:	231c      	movs	r3, #28
   1ca94:	18fb      	adds	r3, r7, r3
   1ca96:	0011      	movs	r1, r2
   1ca98:	0018      	movs	r0, r3
   1ca9a:	4b7c      	ldr	r3, [pc, #496]	; (1cc8c <MQTTSerialize_connect+0x260>)
   1ca9c:	4798      	blx	r3

	ptr += MQTTPacket_encode(ptr, len); /* write remaining length */
   1ca9e:	69fb      	ldr	r3, [r7, #28]
   1caa0:	6a3a      	ldr	r2, [r7, #32]
   1caa2:	0011      	movs	r1, r2
   1caa4:	0018      	movs	r0, r3
   1caa6:	4b7a      	ldr	r3, [pc, #488]	; (1cc90 <MQTTSerialize_connect+0x264>)
   1caa8:	4798      	blx	r3
   1caaa:	0002      	movs	r2, r0
   1caac:	69fb      	ldr	r3, [r7, #28]
   1caae:	189b      	adds	r3, r3, r2
   1cab0:	61fb      	str	r3, [r7, #28]

	if (options->MQTTVersion == 4)
   1cab2:	687b      	ldr	r3, [r7, #4]
   1cab4:	7a1b      	ldrb	r3, [r3, #8]
   1cab6:	2b04      	cmp	r3, #4
   1cab8:	d10d      	bne.n	1cad6 <MQTTSerialize_connect+0xaa>
	{
		writeCString(&ptr, "MQTT");
   1caba:	4a76      	ldr	r2, [pc, #472]	; (1cc94 <MQTTSerialize_connect+0x268>)
   1cabc:	231c      	movs	r3, #28
   1cabe:	18fb      	adds	r3, r7, r3
   1cac0:	0011      	movs	r1, r2
   1cac2:	0018      	movs	r0, r3
   1cac4:	4b74      	ldr	r3, [pc, #464]	; (1cc98 <MQTTSerialize_connect+0x26c>)
   1cac6:	4798      	blx	r3
		writeChar(&ptr, (char) 4);
   1cac8:	231c      	movs	r3, #28
   1caca:	18fb      	adds	r3, r7, r3
   1cacc:	2104      	movs	r1, #4
   1cace:	0018      	movs	r0, r3
   1cad0:	4b6e      	ldr	r3, [pc, #440]	; (1cc8c <MQTTSerialize_connect+0x260>)
   1cad2:	4798      	blx	r3
   1cad4:	e00c      	b.n	1caf0 <MQTTSerialize_connect+0xc4>
	}
	else
	{
		writeCString(&ptr, "MQIsdp");
   1cad6:	4a71      	ldr	r2, [pc, #452]	; (1cc9c <MQTTSerialize_connect+0x270>)
   1cad8:	231c      	movs	r3, #28
   1cada:	18fb      	adds	r3, r7, r3
   1cadc:	0011      	movs	r1, r2
   1cade:	0018      	movs	r0, r3
   1cae0:	4b6d      	ldr	r3, [pc, #436]	; (1cc98 <MQTTSerialize_connect+0x26c>)
   1cae2:	4798      	blx	r3
		writeChar(&ptr, (char) 3);
   1cae4:	231c      	movs	r3, #28
   1cae6:	18fb      	adds	r3, r7, r3
   1cae8:	2103      	movs	r1, #3
   1caea:	0018      	movs	r0, r3
   1caec:	4b67      	ldr	r3, [pc, #412]	; (1cc8c <MQTTSerialize_connect+0x260>)
   1caee:	4798      	blx	r3
	}

	flags.all = 0;
   1caf0:	2314      	movs	r3, #20
   1caf2:	18fb      	adds	r3, r7, r3
   1caf4:	2200      	movs	r2, #0
   1caf6:	701a      	strb	r2, [r3, #0]
	flags.bits.cleansession = options->cleansession;
   1caf8:	687b      	ldr	r3, [r7, #4]
   1cafa:	7e9b      	ldrb	r3, [r3, #26]
   1cafc:	1c1a      	adds	r2, r3, #0
   1cafe:	2301      	movs	r3, #1
   1cb00:	4013      	ands	r3, r2
   1cb02:	b2da      	uxtb	r2, r3
   1cb04:	2314      	movs	r3, #20
   1cb06:	18fb      	adds	r3, r7, r3
   1cb08:	2101      	movs	r1, #1
   1cb0a:	400a      	ands	r2, r1
   1cb0c:	1890      	adds	r0, r2, r2
   1cb0e:	781a      	ldrb	r2, [r3, #0]
   1cb10:	2102      	movs	r1, #2
   1cb12:	438a      	bics	r2, r1
   1cb14:	1c11      	adds	r1, r2, #0
   1cb16:	1c02      	adds	r2, r0, #0
   1cb18:	430a      	orrs	r2, r1
   1cb1a:	701a      	strb	r2, [r3, #0]
	flags.bits.will = (options->willFlag) ? 1 : 0;
   1cb1c:	687b      	ldr	r3, [r7, #4]
   1cb1e:	7edb      	ldrb	r3, [r3, #27]
   1cb20:	1e5a      	subs	r2, r3, #1
   1cb22:	4193      	sbcs	r3, r2
   1cb24:	b2da      	uxtb	r2, r3
   1cb26:	2314      	movs	r3, #20
   1cb28:	18fb      	adds	r3, r7, r3
   1cb2a:	2101      	movs	r1, #1
   1cb2c:	400a      	ands	r2, r1
   1cb2e:	0090      	lsls	r0, r2, #2
   1cb30:	781a      	ldrb	r2, [r3, #0]
   1cb32:	2104      	movs	r1, #4
   1cb34:	438a      	bics	r2, r1
   1cb36:	1c11      	adds	r1, r2, #0
   1cb38:	1c02      	adds	r2, r0, #0
   1cb3a:	430a      	orrs	r2, r1
   1cb3c:	701a      	strb	r2, [r3, #0]
	if (flags.bits.will)
   1cb3e:	2314      	movs	r3, #20
   1cb40:	18fb      	adds	r3, r7, r3
   1cb42:	781b      	ldrb	r3, [r3, #0]
   1cb44:	2204      	movs	r2, #4
   1cb46:	4013      	ands	r3, r2
   1cb48:	b2db      	uxtb	r3, r3
   1cb4a:	2b00      	cmp	r3, #0
   1cb4c:	d025      	beq.n	1cb9a <MQTTSerialize_connect+0x16e>
	{
		flags.bits.willQoS = options->will.qos;
   1cb4e:	687b      	ldr	r3, [r7, #4]
   1cb50:	223d      	movs	r2, #61	; 0x3d
   1cb52:	5c9b      	ldrb	r3, [r3, r2]
   1cb54:	1c1a      	adds	r2, r3, #0
   1cb56:	2303      	movs	r3, #3
   1cb58:	4013      	ands	r3, r2
   1cb5a:	b2da      	uxtb	r2, r3
   1cb5c:	2314      	movs	r3, #20
   1cb5e:	18fb      	adds	r3, r7, r3
   1cb60:	2103      	movs	r1, #3
   1cb62:	400a      	ands	r2, r1
   1cb64:	00d0      	lsls	r0, r2, #3
   1cb66:	781a      	ldrb	r2, [r3, #0]
   1cb68:	2118      	movs	r1, #24
   1cb6a:	438a      	bics	r2, r1
   1cb6c:	1c11      	adds	r1, r2, #0
   1cb6e:	1c02      	adds	r2, r0, #0
   1cb70:	430a      	orrs	r2, r1
   1cb72:	701a      	strb	r2, [r3, #0]
		flags.bits.willRetain = options->will.retained;
   1cb74:	687b      	ldr	r3, [r7, #4]
   1cb76:	223c      	movs	r2, #60	; 0x3c
   1cb78:	5c9b      	ldrb	r3, [r3, r2]
   1cb7a:	1c1a      	adds	r2, r3, #0
   1cb7c:	2301      	movs	r3, #1
   1cb7e:	4013      	ands	r3, r2
   1cb80:	b2da      	uxtb	r2, r3
   1cb82:	2314      	movs	r3, #20
   1cb84:	18fb      	adds	r3, r7, r3
   1cb86:	2101      	movs	r1, #1
   1cb88:	400a      	ands	r2, r1
   1cb8a:	0150      	lsls	r0, r2, #5
   1cb8c:	781a      	ldrb	r2, [r3, #0]
   1cb8e:	2120      	movs	r1, #32
   1cb90:	438a      	bics	r2, r1
   1cb92:	1c11      	adds	r1, r2, #0
   1cb94:	1c02      	adds	r2, r0, #0
   1cb96:	430a      	orrs	r2, r1
   1cb98:	701a      	strb	r2, [r3, #0]
	}

	if (options->username.cstring || options->username.lenstring.data)
   1cb9a:	687b      	ldr	r3, [r7, #4]
   1cb9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   1cb9e:	2b00      	cmp	r3, #0
   1cba0:	d103      	bne.n	1cbaa <MQTTSerialize_connect+0x17e>
   1cba2:	687b      	ldr	r3, [r7, #4]
   1cba4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   1cba6:	2b00      	cmp	r3, #0
   1cba8:	d006      	beq.n	1cbb8 <MQTTSerialize_connect+0x18c>
		flags.bits.username = 1;
   1cbaa:	2314      	movs	r3, #20
   1cbac:	18fb      	adds	r3, r7, r3
   1cbae:	781a      	ldrb	r2, [r3, #0]
   1cbb0:	2180      	movs	r1, #128	; 0x80
   1cbb2:	4249      	negs	r1, r1
   1cbb4:	430a      	orrs	r2, r1
   1cbb6:	701a      	strb	r2, [r3, #0]
	if (options->password.cstring || options->password.lenstring.data)
   1cbb8:	687b      	ldr	r3, [r7, #4]
   1cbba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   1cbbc:	2b00      	cmp	r3, #0
   1cbbe:	d103      	bne.n	1cbc8 <MQTTSerialize_connect+0x19c>
   1cbc0:	687b      	ldr	r3, [r7, #4]
   1cbc2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   1cbc4:	2b00      	cmp	r3, #0
   1cbc6:	d005      	beq.n	1cbd4 <MQTTSerialize_connect+0x1a8>
		flags.bits.password = 1;
   1cbc8:	2314      	movs	r3, #20
   1cbca:	18fb      	adds	r3, r7, r3
   1cbcc:	781a      	ldrb	r2, [r3, #0]
   1cbce:	2140      	movs	r1, #64	; 0x40
   1cbd0:	430a      	orrs	r2, r1
   1cbd2:	701a      	strb	r2, [r3, #0]

	writeChar(&ptr, flags.all);
   1cbd4:	2314      	movs	r3, #20
   1cbd6:	18fb      	adds	r3, r7, r3
   1cbd8:	781a      	ldrb	r2, [r3, #0]
   1cbda:	231c      	movs	r3, #28
   1cbdc:	18fb      	adds	r3, r7, r3
   1cbde:	0011      	movs	r1, r2
   1cbe0:	0018      	movs	r0, r3
   1cbe2:	4b2a      	ldr	r3, [pc, #168]	; (1cc8c <MQTTSerialize_connect+0x260>)
   1cbe4:	4798      	blx	r3
	writeInt(&ptr, options->keepAliveInterval);
   1cbe6:	687b      	ldr	r3, [r7, #4]
   1cbe8:	8b1b      	ldrh	r3, [r3, #24]
   1cbea:	001a      	movs	r2, r3
   1cbec:	231c      	movs	r3, #28
   1cbee:	18fb      	adds	r3, r7, r3
   1cbf0:	0011      	movs	r1, r2
   1cbf2:	0018      	movs	r0, r3
   1cbf4:	4b2a      	ldr	r3, [pc, #168]	; (1cca0 <MQTTSerialize_connect+0x274>)
   1cbf6:	4798      	blx	r3
	writeMQTTString(&ptr, options->clientID);
   1cbf8:	687b      	ldr	r3, [r7, #4]
   1cbfa:	221c      	movs	r2, #28
   1cbfc:	18b8      	adds	r0, r7, r2
   1cbfe:	68d9      	ldr	r1, [r3, #12]
   1cc00:	691a      	ldr	r2, [r3, #16]
   1cc02:	695b      	ldr	r3, [r3, #20]
   1cc04:	4c27      	ldr	r4, [pc, #156]	; (1cca4 <MQTTSerialize_connect+0x278>)
   1cc06:	47a0      	blx	r4
	if (options->willFlag)
   1cc08:	687b      	ldr	r3, [r7, #4]
   1cc0a:	7edb      	ldrb	r3, [r3, #27]
   1cc0c:	2b00      	cmp	r3, #0
   1cc0e:	d00f      	beq.n	1cc30 <MQTTSerialize_connect+0x204>
	{
		writeMQTTString(&ptr, options->will.topicName);
   1cc10:	687b      	ldr	r3, [r7, #4]
   1cc12:	221c      	movs	r2, #28
   1cc14:	18b8      	adds	r0, r7, r2
   1cc16:	6a59      	ldr	r1, [r3, #36]	; 0x24
   1cc18:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   1cc1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   1cc1c:	4c21      	ldr	r4, [pc, #132]	; (1cca4 <MQTTSerialize_connect+0x278>)
   1cc1e:	47a0      	blx	r4
		writeMQTTString(&ptr, options->will.message);
   1cc20:	687b      	ldr	r3, [r7, #4]
   1cc22:	221c      	movs	r2, #28
   1cc24:	18b8      	adds	r0, r7, r2
   1cc26:	6b19      	ldr	r1, [r3, #48]	; 0x30
   1cc28:	6b5a      	ldr	r2, [r3, #52]	; 0x34
   1cc2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   1cc2c:	4c1d      	ldr	r4, [pc, #116]	; (1cca4 <MQTTSerialize_connect+0x278>)
   1cc2e:	47a0      	blx	r4
	}
	if (flags.bits.username)
   1cc30:	2314      	movs	r3, #20
   1cc32:	18fb      	adds	r3, r7, r3
   1cc34:	781b      	ldrb	r3, [r3, #0]
   1cc36:	227f      	movs	r2, #127	; 0x7f
   1cc38:	4393      	bics	r3, r2
   1cc3a:	b2db      	uxtb	r3, r3
   1cc3c:	2b00      	cmp	r3, #0
   1cc3e:	d007      	beq.n	1cc50 <MQTTSerialize_connect+0x224>
		writeMQTTString(&ptr, options->username);
   1cc40:	687b      	ldr	r3, [r7, #4]
   1cc42:	221c      	movs	r2, #28
   1cc44:	18b8      	adds	r0, r7, r2
   1cc46:	6c19      	ldr	r1, [r3, #64]	; 0x40
   1cc48:	6c5a      	ldr	r2, [r3, #68]	; 0x44
   1cc4a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   1cc4c:	4c15      	ldr	r4, [pc, #84]	; (1cca4 <MQTTSerialize_connect+0x278>)
   1cc4e:	47a0      	blx	r4
	if (flags.bits.password)
   1cc50:	2314      	movs	r3, #20
   1cc52:	18fb      	adds	r3, r7, r3
   1cc54:	781b      	ldrb	r3, [r3, #0]
   1cc56:	2240      	movs	r2, #64	; 0x40
   1cc58:	4013      	ands	r3, r2
   1cc5a:	b2db      	uxtb	r3, r3
   1cc5c:	2b00      	cmp	r3, #0
   1cc5e:	d007      	beq.n	1cc70 <MQTTSerialize_connect+0x244>
		writeMQTTString(&ptr, options->password);
   1cc60:	687b      	ldr	r3, [r7, #4]
   1cc62:	221c      	movs	r2, #28
   1cc64:	18b8      	adds	r0, r7, r2
   1cc66:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
   1cc68:	6d1a      	ldr	r2, [r3, #80]	; 0x50
   1cc6a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   1cc6c:	4c0d      	ldr	r4, [pc, #52]	; (1cca4 <MQTTSerialize_connect+0x278>)
   1cc6e:	47a0      	blx	r4

	rc = ptr - buf;
   1cc70:	69fb      	ldr	r3, [r7, #28]
   1cc72:	001a      	movs	r2, r3
   1cc74:	68fb      	ldr	r3, [r7, #12]
   1cc76:	1ad3      	subs	r3, r2, r3
   1cc78:	627b      	str	r3, [r7, #36]	; 0x24

	exit: FUNC_EXIT_RC(rc);
	return rc;
   1cc7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
   1cc7c:	0018      	movs	r0, r3
   1cc7e:	46bd      	mov	sp, r7
   1cc80:	b00b      	add	sp, #44	; 0x2c
   1cc82:	bd90      	pop	{r4, r7, pc}
   1cc84:	0001c965 	.word	0x0001c965
   1cc88:	0001d0f9 	.word	0x0001d0f9
   1cc8c:	0001d21b 	.word	0x0001d21b
   1cc90:	0001d001 	.word	0x0001d001
   1cc94:	00026750 	.word	0x00026750
   1cc98:	0001d29d 	.word	0x0001d29d
   1cc9c:	00026758 	.word	0x00026758
   1cca0:	0001d245 	.word	0x0001d245
   1cca4:	0001d2ed 	.word	0x0001d2ed

0001cca8 <MQTTDeserialize_connack>:
  * @param buf the raw buffer data, of the correct length determined by the remaining length field
  * @param len the length in bytes of the data in the supplied buffer
  * @return error code.  1 is success, 0 is failure
  */
int MQTTDeserialize_connack(unsigned char* sessionPresent, unsigned char* connack_rc, unsigned char* buf, int buflen)
{
   1cca8:	b580      	push	{r7, lr}
   1ccaa:	b08a      	sub	sp, #40	; 0x28
   1ccac:	af00      	add	r7, sp, #0
   1ccae:	60f8      	str	r0, [r7, #12]
   1ccb0:	60b9      	str	r1, [r7, #8]
   1ccb2:	607a      	str	r2, [r7, #4]
   1ccb4:	603b      	str	r3, [r7, #0]
	MQTTHeader header = {0};
   1ccb6:	2300      	movs	r3, #0
   1ccb8:	61fb      	str	r3, [r7, #28]
	unsigned char* curdata = buf;
   1ccba:	687b      	ldr	r3, [r7, #4]
   1ccbc:	61bb      	str	r3, [r7, #24]
	unsigned char* enddata = NULL;
   1ccbe:	2300      	movs	r3, #0
   1ccc0:	623b      	str	r3, [r7, #32]
	int rc = 0;
   1ccc2:	2300      	movs	r3, #0
   1ccc4:	627b      	str	r3, [r7, #36]	; 0x24
	int mylen;
	MQTTConnackFlags flags = {0};
   1ccc6:	2300      	movs	r3, #0
   1ccc8:	613b      	str	r3, [r7, #16]

	FUNC_ENTRY;
	header.byte = readChar(&curdata);
   1ccca:	2318      	movs	r3, #24
   1cccc:	18fb      	adds	r3, r7, r3
   1ccce:	0018      	movs	r0, r3
   1ccd0:	4b25      	ldr	r3, [pc, #148]	; (1cd68 <MQTTDeserialize_connack+0xc0>)
   1ccd2:	4798      	blx	r3
   1ccd4:	0003      	movs	r3, r0
   1ccd6:	001a      	movs	r2, r3
   1ccd8:	231c      	movs	r3, #28
   1ccda:	18fb      	adds	r3, r7, r3
   1ccdc:	701a      	strb	r2, [r3, #0]
	if (header.bits.type != CONNACK)
   1ccde:	231c      	movs	r3, #28
   1cce0:	18fb      	adds	r3, r7, r3
   1cce2:	781b      	ldrb	r3, [r3, #0]
   1cce4:	220f      	movs	r2, #15
   1cce6:	4393      	bics	r3, r2
   1cce8:	b2db      	uxtb	r3, r3
   1ccea:	2b20      	cmp	r3, #32
   1ccec:	d134      	bne.n	1cd58 <MQTTDeserialize_connack+0xb0>
		goto exit;

	curdata += (rc = MQTTPacket_decodeBuf(curdata, &mylen)); /* read remaining length */
   1ccee:	69bb      	ldr	r3, [r7, #24]
   1ccf0:	2214      	movs	r2, #20
   1ccf2:	18ba      	adds	r2, r7, r2
   1ccf4:	0011      	movs	r1, r2
   1ccf6:	0018      	movs	r0, r3
   1ccf8:	4b1c      	ldr	r3, [pc, #112]	; (1cd6c <MQTTDeserialize_connack+0xc4>)
   1ccfa:	4798      	blx	r3
   1ccfc:	0003      	movs	r3, r0
   1ccfe:	627b      	str	r3, [r7, #36]	; 0x24
   1cd00:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   1cd02:	69bb      	ldr	r3, [r7, #24]
   1cd04:	189b      	adds	r3, r3, r2
   1cd06:	61bb      	str	r3, [r7, #24]
	enddata = curdata + mylen;
   1cd08:	69bb      	ldr	r3, [r7, #24]
   1cd0a:	697a      	ldr	r2, [r7, #20]
   1cd0c:	189b      	adds	r3, r3, r2
   1cd0e:	623b      	str	r3, [r7, #32]
	if (enddata - curdata < 2)
   1cd10:	6a3b      	ldr	r3, [r7, #32]
   1cd12:	69ba      	ldr	r2, [r7, #24]
   1cd14:	1a9b      	subs	r3, r3, r2
   1cd16:	2b01      	cmp	r3, #1
   1cd18:	dd20      	ble.n	1cd5c <MQTTDeserialize_connack+0xb4>
		goto exit;

	flags.all = readChar(&curdata);
   1cd1a:	2318      	movs	r3, #24
   1cd1c:	18fb      	adds	r3, r7, r3
   1cd1e:	0018      	movs	r0, r3
   1cd20:	4b11      	ldr	r3, [pc, #68]	; (1cd68 <MQTTDeserialize_connack+0xc0>)
   1cd22:	4798      	blx	r3
   1cd24:	0003      	movs	r3, r0
   1cd26:	001a      	movs	r2, r3
   1cd28:	2310      	movs	r3, #16
   1cd2a:	18fb      	adds	r3, r7, r3
   1cd2c:	701a      	strb	r2, [r3, #0]
	*sessionPresent = flags.bits.sessionpresent;
   1cd2e:	2310      	movs	r3, #16
   1cd30:	18fb      	adds	r3, r7, r3
   1cd32:	781b      	ldrb	r3, [r3, #0]
   1cd34:	061b      	lsls	r3, r3, #24
   1cd36:	0fdb      	lsrs	r3, r3, #31
   1cd38:	b2db      	uxtb	r3, r3
   1cd3a:	001a      	movs	r2, r3
   1cd3c:	68fb      	ldr	r3, [r7, #12]
   1cd3e:	701a      	strb	r2, [r3, #0]
	*connack_rc = readChar(&curdata);
   1cd40:	2318      	movs	r3, #24
   1cd42:	18fb      	adds	r3, r7, r3
   1cd44:	0018      	movs	r0, r3
   1cd46:	4b08      	ldr	r3, [pc, #32]	; (1cd68 <MQTTDeserialize_connack+0xc0>)
   1cd48:	4798      	blx	r3
   1cd4a:	0003      	movs	r3, r0
   1cd4c:	001a      	movs	r2, r3
   1cd4e:	68bb      	ldr	r3, [r7, #8]
   1cd50:	701a      	strb	r2, [r3, #0]

	rc = 1;
   1cd52:	2301      	movs	r3, #1
   1cd54:	627b      	str	r3, [r7, #36]	; 0x24
   1cd56:	e002      	b.n	1cd5e <MQTTDeserialize_connack+0xb6>
		goto exit;
   1cd58:	46c0      	nop			; (mov r8, r8)
   1cd5a:	e000      	b.n	1cd5e <MQTTDeserialize_connack+0xb6>
		goto exit;
   1cd5c:	46c0      	nop			; (mov r8, r8)
exit:
	FUNC_EXIT_RC(rc);
	return rc;
   1cd5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
   1cd60:	0018      	movs	r0, r3
   1cd62:	46bd      	mov	sp, r7
   1cd64:	b00a      	add	sp, #40	; 0x28
   1cd66:	bd80      	pop	{r7, pc}
   1cd68:	0001d1ef 	.word	0x0001d1ef
   1cd6c:	0001d189 	.word	0x0001d189

0001cd70 <MQTTSerialize_zero>:
  * @param buflen the length in bytes of the supplied buffer, to avoid overruns
  * @param packettype the message type
  * @return serialized length, or error if 0
  */
int MQTTSerialize_zero(unsigned char* buf, int buflen, unsigned char packettype)
{
   1cd70:	b580      	push	{r7, lr}
   1cd72:	b088      	sub	sp, #32
   1cd74:	af00      	add	r7, sp, #0
   1cd76:	60f8      	str	r0, [r7, #12]
   1cd78:	60b9      	str	r1, [r7, #8]
   1cd7a:	1dfb      	adds	r3, r7, #7
   1cd7c:	701a      	strb	r2, [r3, #0]
	MQTTHeader header = {0};
   1cd7e:	2300      	movs	r3, #0
   1cd80:	61bb      	str	r3, [r7, #24]
	int rc = -1;
   1cd82:	2301      	movs	r3, #1
   1cd84:	425b      	negs	r3, r3
   1cd86:	61fb      	str	r3, [r7, #28]
	unsigned char *ptr = buf;
   1cd88:	68fb      	ldr	r3, [r7, #12]
   1cd8a:	617b      	str	r3, [r7, #20]

	FUNC_ENTRY;
	if (buflen < 2)
   1cd8c:	68bb      	ldr	r3, [r7, #8]
   1cd8e:	2b01      	cmp	r3, #1
   1cd90:	dc03      	bgt.n	1cd9a <MQTTSerialize_zero+0x2a>
	{
		rc = MQTTPACKET_BUFFER_TOO_SHORT;
   1cd92:	2302      	movs	r3, #2
   1cd94:	425b      	negs	r3, r3
   1cd96:	61fb      	str	r3, [r7, #28]
		goto exit;
   1cd98:	e029      	b.n	1cdee <MQTTSerialize_zero+0x7e>
	}
	header.byte = 0;
   1cd9a:	2318      	movs	r3, #24
   1cd9c:	18fb      	adds	r3, r7, r3
   1cd9e:	2200      	movs	r2, #0
   1cda0:	701a      	strb	r2, [r3, #0]
	header.bits.type = packettype;
   1cda2:	1dfb      	adds	r3, r7, #7
   1cda4:	781b      	ldrb	r3, [r3, #0]
   1cda6:	220f      	movs	r2, #15
   1cda8:	4013      	ands	r3, r2
   1cdaa:	b2da      	uxtb	r2, r3
   1cdac:	2318      	movs	r3, #24
   1cdae:	18fb      	adds	r3, r7, r3
   1cdb0:	0110      	lsls	r0, r2, #4
   1cdb2:	781a      	ldrb	r2, [r3, #0]
   1cdb4:	210f      	movs	r1, #15
   1cdb6:	400a      	ands	r2, r1
   1cdb8:	1c11      	adds	r1, r2, #0
   1cdba:	1c02      	adds	r2, r0, #0
   1cdbc:	430a      	orrs	r2, r1
   1cdbe:	701a      	strb	r2, [r3, #0]
	writeChar(&ptr, header.byte); /* write header */
   1cdc0:	2318      	movs	r3, #24
   1cdc2:	18fb      	adds	r3, r7, r3
   1cdc4:	781a      	ldrb	r2, [r3, #0]
   1cdc6:	2314      	movs	r3, #20
   1cdc8:	18fb      	adds	r3, r7, r3
   1cdca:	0011      	movs	r1, r2
   1cdcc:	0018      	movs	r0, r3
   1cdce:	4b0a      	ldr	r3, [pc, #40]	; (1cdf8 <MQTTSerialize_zero+0x88>)
   1cdd0:	4798      	blx	r3

	ptr += MQTTPacket_encode(ptr, 0); /* write remaining length */
   1cdd2:	697b      	ldr	r3, [r7, #20]
   1cdd4:	2100      	movs	r1, #0
   1cdd6:	0018      	movs	r0, r3
   1cdd8:	4b08      	ldr	r3, [pc, #32]	; (1cdfc <MQTTSerialize_zero+0x8c>)
   1cdda:	4798      	blx	r3
   1cddc:	0002      	movs	r2, r0
   1cdde:	697b      	ldr	r3, [r7, #20]
   1cde0:	189b      	adds	r3, r3, r2
   1cde2:	617b      	str	r3, [r7, #20]
	rc = ptr - buf;
   1cde4:	697b      	ldr	r3, [r7, #20]
   1cde6:	001a      	movs	r2, r3
   1cde8:	68fb      	ldr	r3, [r7, #12]
   1cdea:	1ad3      	subs	r3, r2, r3
   1cdec:	61fb      	str	r3, [r7, #28]
exit:
	FUNC_EXIT_RC(rc);
	return rc;
   1cdee:	69fb      	ldr	r3, [r7, #28]
}
   1cdf0:	0018      	movs	r0, r3
   1cdf2:	46bd      	mov	sp, r7
   1cdf4:	b008      	add	sp, #32
   1cdf6:	bd80      	pop	{r7, pc}
   1cdf8:	0001d21b 	.word	0x0001d21b
   1cdfc:	0001d001 	.word	0x0001d001

0001ce00 <MQTTSerialize_disconnect>:
  * @param buf the buffer into which the packet will be serialized
  * @param buflen the length in bytes of the supplied buffer, to avoid overruns
  * @return serialized length, or error if 0
  */
int MQTTSerialize_disconnect(unsigned char* buf, int buflen)
{
   1ce00:	b580      	push	{r7, lr}
   1ce02:	b082      	sub	sp, #8
   1ce04:	af00      	add	r7, sp, #0
   1ce06:	6078      	str	r0, [r7, #4]
   1ce08:	6039      	str	r1, [r7, #0]
	return MQTTSerialize_zero(buf, buflen, DISCONNECT);
   1ce0a:	6839      	ldr	r1, [r7, #0]
   1ce0c:	687b      	ldr	r3, [r7, #4]
   1ce0e:	220e      	movs	r2, #14
   1ce10:	0018      	movs	r0, r3
   1ce12:	4b03      	ldr	r3, [pc, #12]	; (1ce20 <MQTTSerialize_disconnect+0x20>)
   1ce14:	4798      	blx	r3
   1ce16:	0003      	movs	r3, r0
}
   1ce18:	0018      	movs	r0, r3
   1ce1a:	46bd      	mov	sp, r7
   1ce1c:	b002      	add	sp, #8
   1ce1e:	bd80      	pop	{r7, pc}
   1ce20:	0001cd71 	.word	0x0001cd71

0001ce24 <MQTTSerialize_pingreq>:
  * @param buf the buffer into which the packet will be serialized
  * @param buflen the length in bytes of the supplied buffer, to avoid overruns
  * @return serialized length, or error if 0
  */
int MQTTSerialize_pingreq(unsigned char* buf, int buflen)
{
   1ce24:	b580      	push	{r7, lr}
   1ce26:	b082      	sub	sp, #8
   1ce28:	af00      	add	r7, sp, #0
   1ce2a:	6078      	str	r0, [r7, #4]
   1ce2c:	6039      	str	r1, [r7, #0]
	return MQTTSerialize_zero(buf, buflen, PINGREQ);
   1ce2e:	6839      	ldr	r1, [r7, #0]
   1ce30:	687b      	ldr	r3, [r7, #4]
   1ce32:	220c      	movs	r2, #12
   1ce34:	0018      	movs	r0, r3
   1ce36:	4b03      	ldr	r3, [pc, #12]	; (1ce44 <MQTTSerialize_pingreq+0x20>)
   1ce38:	4798      	blx	r3
   1ce3a:	0003      	movs	r3, r0
}
   1ce3c:	0018      	movs	r0, r3
   1ce3e:	46bd      	mov	sp, r7
   1ce40:	b002      	add	sp, #8
   1ce42:	bd80      	pop	{r7, pc}
   1ce44:	0001cd71 	.word	0x0001cd71

0001ce48 <MQTTDeserialize_publish>:
  * @param buflen the length in bytes of the data in the supplied buffer
  * @return error code.  1 is success
  */
int MQTTDeserialize_publish(unsigned char* dup, int* qos, unsigned char* retained, unsigned short* packetid, MQTTString* topicName,
		unsigned char** payload, int* payloadlen, unsigned char* buf, int buflen)
{
   1ce48:	b580      	push	{r7, lr}
   1ce4a:	b08a      	sub	sp, #40	; 0x28
   1ce4c:	af00      	add	r7, sp, #0
   1ce4e:	60f8      	str	r0, [r7, #12]
   1ce50:	60b9      	str	r1, [r7, #8]
   1ce52:	607a      	str	r2, [r7, #4]
   1ce54:	603b      	str	r3, [r7, #0]
	MQTTHeader header = {0};
   1ce56:	2300      	movs	r3, #0
   1ce58:	61fb      	str	r3, [r7, #28]
	unsigned char* curdata = buf;
   1ce5a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   1ce5c:	61bb      	str	r3, [r7, #24]
	unsigned char* enddata = NULL;
   1ce5e:	2300      	movs	r3, #0
   1ce60:	623b      	str	r3, [r7, #32]
	int rc = 0;
   1ce62:	2300      	movs	r3, #0
   1ce64:	627b      	str	r3, [r7, #36]	; 0x24
	int mylen = 0;
   1ce66:	2300      	movs	r3, #0
   1ce68:	617b      	str	r3, [r7, #20]

	FUNC_ENTRY;
	header.byte = readChar(&curdata);
   1ce6a:	2318      	movs	r3, #24
   1ce6c:	18fb      	adds	r3, r7, r3
   1ce6e:	0018      	movs	r0, r3
   1ce70:	4b32      	ldr	r3, [pc, #200]	; (1cf3c <MQTTDeserialize_publish+0xf4>)
   1ce72:	4798      	blx	r3
   1ce74:	0003      	movs	r3, r0
   1ce76:	001a      	movs	r2, r3
   1ce78:	231c      	movs	r3, #28
   1ce7a:	18fb      	adds	r3, r7, r3
   1ce7c:	701a      	strb	r2, [r3, #0]
	if (header.bits.type != PUBLISH)
   1ce7e:	231c      	movs	r3, #28
   1ce80:	18fb      	adds	r3, r7, r3
   1ce82:	781b      	ldrb	r3, [r3, #0]
   1ce84:	220f      	movs	r2, #15
   1ce86:	4393      	bics	r3, r2
   1ce88:	b2db      	uxtb	r3, r3
   1ce8a:	2b30      	cmp	r3, #48	; 0x30
   1ce8c:	d150      	bne.n	1cf30 <MQTTDeserialize_publish+0xe8>
		goto exit;
	*dup = header.bits.dup;
   1ce8e:	231c      	movs	r3, #28
   1ce90:	18fb      	adds	r3, r7, r3
   1ce92:	781b      	ldrb	r3, [r3, #0]
   1ce94:	071b      	lsls	r3, r3, #28
   1ce96:	0fdb      	lsrs	r3, r3, #31
   1ce98:	b2db      	uxtb	r3, r3
   1ce9a:	001a      	movs	r2, r3
   1ce9c:	68fb      	ldr	r3, [r7, #12]
   1ce9e:	701a      	strb	r2, [r3, #0]
	*qos = header.bits.qos;
   1cea0:	231c      	movs	r3, #28
   1cea2:	18fb      	adds	r3, r7, r3
   1cea4:	781b      	ldrb	r3, [r3, #0]
   1cea6:	075b      	lsls	r3, r3, #29
   1cea8:	0f9b      	lsrs	r3, r3, #30
   1ceaa:	b2db      	uxtb	r3, r3
   1ceac:	001a      	movs	r2, r3
   1ceae:	68bb      	ldr	r3, [r7, #8]
   1ceb0:	601a      	str	r2, [r3, #0]
	*retained = header.bits.retain;
   1ceb2:	231c      	movs	r3, #28
   1ceb4:	18fb      	adds	r3, r7, r3
   1ceb6:	781b      	ldrb	r3, [r3, #0]
   1ceb8:	07db      	lsls	r3, r3, #31
   1ceba:	0fdb      	lsrs	r3, r3, #31
   1cebc:	b2db      	uxtb	r3, r3
   1cebe:	001a      	movs	r2, r3
   1cec0:	687b      	ldr	r3, [r7, #4]
   1cec2:	701a      	strb	r2, [r3, #0]

	curdata += (rc = MQTTPacket_decodeBuf(curdata, &mylen)); /* read remaining length */
   1cec4:	69bb      	ldr	r3, [r7, #24]
   1cec6:	2214      	movs	r2, #20
   1cec8:	18ba      	adds	r2, r7, r2
   1ceca:	0011      	movs	r1, r2
   1cecc:	0018      	movs	r0, r3
   1cece:	4b1c      	ldr	r3, [pc, #112]	; (1cf40 <MQTTDeserialize_publish+0xf8>)
   1ced0:	4798      	blx	r3
   1ced2:	0003      	movs	r3, r0
   1ced4:	627b      	str	r3, [r7, #36]	; 0x24
   1ced6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   1ced8:	69bb      	ldr	r3, [r7, #24]
   1ceda:	189b      	adds	r3, r3, r2
   1cedc:	61bb      	str	r3, [r7, #24]
	enddata = curdata + mylen;
   1cede:	69bb      	ldr	r3, [r7, #24]
   1cee0:	697a      	ldr	r2, [r7, #20]
   1cee2:	189b      	adds	r3, r3, r2
   1cee4:	623b      	str	r3, [r7, #32]

	if (!readMQTTLenString(topicName, &curdata, enddata) ||
   1cee6:	6a3a      	ldr	r2, [r7, #32]
   1cee8:	2318      	movs	r3, #24
   1ceea:	18f9      	adds	r1, r7, r3
   1ceec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   1ceee:	0018      	movs	r0, r3
   1cef0:	4b14      	ldr	r3, [pc, #80]	; (1cf44 <MQTTDeserialize_publish+0xfc>)
   1cef2:	4798      	blx	r3
   1cef4:	1e03      	subs	r3, r0, #0
   1cef6:	d01c      	beq.n	1cf32 <MQTTDeserialize_publish+0xea>
		enddata - curdata < 0) /* do we have enough data to read the protocol version byte? */
   1cef8:	6a3b      	ldr	r3, [r7, #32]
   1cefa:	69ba      	ldr	r2, [r7, #24]
   1cefc:	1a9b      	subs	r3, r3, r2
	if (!readMQTTLenString(topicName, &curdata, enddata) ||
   1cefe:	d418      	bmi.n	1cf32 <MQTTDeserialize_publish+0xea>
		goto exit;

	if (*qos > 0)
   1cf00:	68bb      	ldr	r3, [r7, #8]
   1cf02:	681b      	ldr	r3, [r3, #0]
   1cf04:	2b00      	cmp	r3, #0
   1cf06:	dd08      	ble.n	1cf1a <MQTTDeserialize_publish+0xd2>
		*packetid = readInt(&curdata);
   1cf08:	2318      	movs	r3, #24
   1cf0a:	18fb      	adds	r3, r7, r3
   1cf0c:	0018      	movs	r0, r3
   1cf0e:	4b0e      	ldr	r3, [pc, #56]	; (1cf48 <MQTTDeserialize_publish+0x100>)
   1cf10:	4798      	blx	r3
   1cf12:	0003      	movs	r3, r0
   1cf14:	b29a      	uxth	r2, r3
   1cf16:	683b      	ldr	r3, [r7, #0]
   1cf18:	801a      	strh	r2, [r3, #0]

	*payloadlen = enddata - curdata;
   1cf1a:	6a3b      	ldr	r3, [r7, #32]
   1cf1c:	69ba      	ldr	r2, [r7, #24]
   1cf1e:	1a9a      	subs	r2, r3, r2
   1cf20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   1cf22:	601a      	str	r2, [r3, #0]
	*payload = curdata;
   1cf24:	69ba      	ldr	r2, [r7, #24]
   1cf26:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   1cf28:	601a      	str	r2, [r3, #0]
	rc = 1;
   1cf2a:	2301      	movs	r3, #1
   1cf2c:	627b      	str	r3, [r7, #36]	; 0x24
   1cf2e:	e000      	b.n	1cf32 <MQTTDeserialize_publish+0xea>
		goto exit;
   1cf30:	46c0      	nop			; (mov r8, r8)
exit:
	FUNC_EXIT_RC(rc);
	return rc;
   1cf32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
   1cf34:	0018      	movs	r0, r3
   1cf36:	46bd      	mov	sp, r7
   1cf38:	b00a      	add	sp, #40	; 0x28
   1cf3a:	bd80      	pop	{r7, pc}
   1cf3c:	0001d1ef 	.word	0x0001d1ef
   1cf40:	0001d189 	.word	0x0001d189
   1cf44:	0001d36d 	.word	0x0001d36d
   1cf48:	0001d1bd 	.word	0x0001d1bd

0001cf4c <MQTTDeserialize_ack>:
  * @param buf the raw buffer data, of the correct length determined by the remaining length field
  * @param buflen the length in bytes of the data in the supplied buffer
  * @return error code.  1 is success, 0 is failure
  */
int MQTTDeserialize_ack(unsigned char* packettype, unsigned char* dup, unsigned short* packetid, unsigned char* buf, int buflen)
{
   1cf4c:	b580      	push	{r7, lr}
   1cf4e:	b08a      	sub	sp, #40	; 0x28
   1cf50:	af00      	add	r7, sp, #0
   1cf52:	60f8      	str	r0, [r7, #12]
   1cf54:	60b9      	str	r1, [r7, #8]
   1cf56:	607a      	str	r2, [r7, #4]
   1cf58:	603b      	str	r3, [r7, #0]
	MQTTHeader header = {0};
   1cf5a:	2300      	movs	r3, #0
   1cf5c:	61fb      	str	r3, [r7, #28]
	unsigned char* curdata = buf;
   1cf5e:	683b      	ldr	r3, [r7, #0]
   1cf60:	61bb      	str	r3, [r7, #24]
	unsigned char* enddata = NULL;
   1cf62:	2300      	movs	r3, #0
   1cf64:	623b      	str	r3, [r7, #32]
	int rc = 0;
   1cf66:	2300      	movs	r3, #0
   1cf68:	627b      	str	r3, [r7, #36]	; 0x24
	int mylen;

	FUNC_ENTRY;
	header.byte = readChar(&curdata);
   1cf6a:	2318      	movs	r3, #24
   1cf6c:	18fb      	adds	r3, r7, r3
   1cf6e:	0018      	movs	r0, r3
   1cf70:	4b20      	ldr	r3, [pc, #128]	; (1cff4 <MQTTDeserialize_ack+0xa8>)
   1cf72:	4798      	blx	r3
   1cf74:	0003      	movs	r3, r0
   1cf76:	001a      	movs	r2, r3
   1cf78:	231c      	movs	r3, #28
   1cf7a:	18fb      	adds	r3, r7, r3
   1cf7c:	701a      	strb	r2, [r3, #0]
	*dup = header.bits.dup;
   1cf7e:	231c      	movs	r3, #28
   1cf80:	18fb      	adds	r3, r7, r3
   1cf82:	781b      	ldrb	r3, [r3, #0]
   1cf84:	071b      	lsls	r3, r3, #28
   1cf86:	0fdb      	lsrs	r3, r3, #31
   1cf88:	b2db      	uxtb	r3, r3
   1cf8a:	001a      	movs	r2, r3
   1cf8c:	68bb      	ldr	r3, [r7, #8]
   1cf8e:	701a      	strb	r2, [r3, #0]
	*packettype = header.bits.type;
   1cf90:	231c      	movs	r3, #28
   1cf92:	18fb      	adds	r3, r7, r3
   1cf94:	781b      	ldrb	r3, [r3, #0]
   1cf96:	061b      	lsls	r3, r3, #24
   1cf98:	0f1b      	lsrs	r3, r3, #28
   1cf9a:	b2db      	uxtb	r3, r3
   1cf9c:	001a      	movs	r2, r3
   1cf9e:	68fb      	ldr	r3, [r7, #12]
   1cfa0:	701a      	strb	r2, [r3, #0]

	curdata += (rc = MQTTPacket_decodeBuf(curdata, &mylen)); /* read remaining length */
   1cfa2:	69bb      	ldr	r3, [r7, #24]
   1cfa4:	2214      	movs	r2, #20
   1cfa6:	18ba      	adds	r2, r7, r2
   1cfa8:	0011      	movs	r1, r2
   1cfaa:	0018      	movs	r0, r3
   1cfac:	4b12      	ldr	r3, [pc, #72]	; (1cff8 <MQTTDeserialize_ack+0xac>)
   1cfae:	4798      	blx	r3
   1cfb0:	0003      	movs	r3, r0
   1cfb2:	627b      	str	r3, [r7, #36]	; 0x24
   1cfb4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   1cfb6:	69bb      	ldr	r3, [r7, #24]
   1cfb8:	189b      	adds	r3, r3, r2
   1cfba:	61bb      	str	r3, [r7, #24]
	enddata = curdata + mylen;
   1cfbc:	69bb      	ldr	r3, [r7, #24]
   1cfbe:	697a      	ldr	r2, [r7, #20]
   1cfc0:	189b      	adds	r3, r3, r2
   1cfc2:	623b      	str	r3, [r7, #32]

	if (enddata - curdata < 2)
   1cfc4:	6a3b      	ldr	r3, [r7, #32]
   1cfc6:	69ba      	ldr	r2, [r7, #24]
   1cfc8:	1a9b      	subs	r3, r3, r2
   1cfca:	2b01      	cmp	r3, #1
   1cfcc:	dd0b      	ble.n	1cfe6 <MQTTDeserialize_ack+0x9a>
		goto exit;
	*packetid = readInt(&curdata);
   1cfce:	2318      	movs	r3, #24
   1cfd0:	18fb      	adds	r3, r7, r3
   1cfd2:	0018      	movs	r0, r3
   1cfd4:	4b09      	ldr	r3, [pc, #36]	; (1cffc <MQTTDeserialize_ack+0xb0>)
   1cfd6:	4798      	blx	r3
   1cfd8:	0003      	movs	r3, r0
   1cfda:	b29a      	uxth	r2, r3
   1cfdc:	687b      	ldr	r3, [r7, #4]
   1cfde:	801a      	strh	r2, [r3, #0]

	rc = 1;
   1cfe0:	2301      	movs	r3, #1
   1cfe2:	627b      	str	r3, [r7, #36]	; 0x24
   1cfe4:	e000      	b.n	1cfe8 <MQTTDeserialize_ack+0x9c>
		goto exit;
   1cfe6:	46c0      	nop			; (mov r8, r8)
exit:
	FUNC_EXIT_RC(rc);
	return rc;
   1cfe8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
   1cfea:	0018      	movs	r0, r3
   1cfec:	46bd      	mov	sp, r7
   1cfee:	b00a      	add	sp, #40	; 0x28
   1cff0:	bd80      	pop	{r7, pc}
   1cff2:	46c0      	nop			; (mov r8, r8)
   1cff4:	0001d1ef 	.word	0x0001d1ef
   1cff8:	0001d189 	.word	0x0001d189
   1cffc:	0001d1bd 	.word	0x0001d1bd

0001d000 <MQTTPacket_encode>:
 * @param buf the buffer into which the encoded data is written
 * @param length the length to be encoded
 * @return the number of bytes written to buffer
 */
int MQTTPacket_encode(unsigned char* buf, int length)
{
   1d000:	b580      	push	{r7, lr}
   1d002:	b084      	sub	sp, #16
   1d004:	af00      	add	r7, sp, #0
   1d006:	6078      	str	r0, [r7, #4]
   1d008:	6039      	str	r1, [r7, #0]
	int rc = 0;
   1d00a:	2300      	movs	r3, #0
   1d00c:	60fb      	str	r3, [r7, #12]

	FUNC_ENTRY;
	do
	{
		char d = length % 128;
   1d00e:	683b      	ldr	r3, [r7, #0]
   1d010:	4a17      	ldr	r2, [pc, #92]	; (1d070 <MQTTPacket_encode+0x70>)
   1d012:	4013      	ands	r3, r2
   1d014:	d504      	bpl.n	1d020 <MQTTPacket_encode+0x20>
   1d016:	3b01      	subs	r3, #1
   1d018:	2280      	movs	r2, #128	; 0x80
   1d01a:	4252      	negs	r2, r2
   1d01c:	4313      	orrs	r3, r2
   1d01e:	3301      	adds	r3, #1
   1d020:	001a      	movs	r2, r3
   1d022:	230b      	movs	r3, #11
   1d024:	18fb      	adds	r3, r7, r3
   1d026:	701a      	strb	r2, [r3, #0]
		length /= 128;
   1d028:	683b      	ldr	r3, [r7, #0]
   1d02a:	2b00      	cmp	r3, #0
   1d02c:	da00      	bge.n	1d030 <MQTTPacket_encode+0x30>
   1d02e:	337f      	adds	r3, #127	; 0x7f
   1d030:	11db      	asrs	r3, r3, #7
   1d032:	603b      	str	r3, [r7, #0]
		/* if there are more digits to encode, set the top bit of this digit */
		if (length > 0)
   1d034:	683b      	ldr	r3, [r7, #0]
   1d036:	2b00      	cmp	r3, #0
   1d038:	dd08      	ble.n	1d04c <MQTTPacket_encode+0x4c>
			d |= 0x80;
   1d03a:	230b      	movs	r3, #11
   1d03c:	18fb      	adds	r3, r7, r3
   1d03e:	220b      	movs	r2, #11
   1d040:	18ba      	adds	r2, r7, r2
   1d042:	7812      	ldrb	r2, [r2, #0]
   1d044:	2180      	movs	r1, #128	; 0x80
   1d046:	4249      	negs	r1, r1
   1d048:	430a      	orrs	r2, r1
   1d04a:	701a      	strb	r2, [r3, #0]
		buf[rc++] = d;
   1d04c:	68fb      	ldr	r3, [r7, #12]
   1d04e:	1c5a      	adds	r2, r3, #1
   1d050:	60fa      	str	r2, [r7, #12]
   1d052:	001a      	movs	r2, r3
   1d054:	687b      	ldr	r3, [r7, #4]
   1d056:	189b      	adds	r3, r3, r2
   1d058:	220b      	movs	r2, #11
   1d05a:	18ba      	adds	r2, r7, r2
   1d05c:	7812      	ldrb	r2, [r2, #0]
   1d05e:	701a      	strb	r2, [r3, #0]
	} while (length > 0);
   1d060:	683b      	ldr	r3, [r7, #0]
   1d062:	2b00      	cmp	r3, #0
   1d064:	dcd3      	bgt.n	1d00e <MQTTPacket_encode+0xe>
	FUNC_EXIT_RC(rc);
	return rc;
   1d066:	68fb      	ldr	r3, [r7, #12]
}
   1d068:	0018      	movs	r0, r3
   1d06a:	46bd      	mov	sp, r7
   1d06c:	b004      	add	sp, #16
   1d06e:	bd80      	pop	{r7, pc}
   1d070:	8000007f 	.word	0x8000007f

0001d074 <MQTTPacket_decode>:
 * @param getcharfn pointer to function to read the next character from the data source
 * @param value the decoded length returned
 * @return the number of bytes read from the socket
 */
int MQTTPacket_decode(int (*getcharfn)(unsigned char*, int), int* value)
{
   1d074:	b580      	push	{r7, lr}
   1d076:	b086      	sub	sp, #24
   1d078:	af00      	add	r7, sp, #0
   1d07a:	6078      	str	r0, [r7, #4]
   1d07c:	6039      	str	r1, [r7, #0]
	unsigned char c;
	int multiplier = 1;
   1d07e:	2301      	movs	r3, #1
   1d080:	617b      	str	r3, [r7, #20]
	int len = 0;
   1d082:	2300      	movs	r3, #0
   1d084:	613b      	str	r3, [r7, #16]
#define MAX_NO_OF_REMAINING_LENGTH_BYTES 4

	FUNC_ENTRY;
	*value = 0;
   1d086:	683b      	ldr	r3, [r7, #0]
   1d088:	2200      	movs	r2, #0
   1d08a:	601a      	str	r2, [r3, #0]
	do
	{
		int rc = MQTTPACKET_READ_ERROR;
   1d08c:	2301      	movs	r3, #1
   1d08e:	425b      	negs	r3, r3
   1d090:	60fb      	str	r3, [r7, #12]

		if (++len > MAX_NO_OF_REMAINING_LENGTH_BYTES)
   1d092:	693b      	ldr	r3, [r7, #16]
   1d094:	3301      	adds	r3, #1
   1d096:	613b      	str	r3, [r7, #16]
   1d098:	693b      	ldr	r3, [r7, #16]
   1d09a:	2b04      	cmp	r3, #4
   1d09c:	dd03      	ble.n	1d0a6 <MQTTPacket_decode+0x32>
		{
			rc = MQTTPACKET_READ_ERROR;	/* bad data */
   1d09e:	2301      	movs	r3, #1
   1d0a0:	425b      	negs	r3, r3
   1d0a2:	60fb      	str	r3, [r7, #12]
			goto exit;
   1d0a4:	e022      	b.n	1d0ec <MQTTPacket_decode+0x78>
		}
		rc = (*getcharfn)(&c, 1);
   1d0a6:	230b      	movs	r3, #11
   1d0a8:	18fa      	adds	r2, r7, r3
   1d0aa:	687b      	ldr	r3, [r7, #4]
   1d0ac:	2101      	movs	r1, #1
   1d0ae:	0010      	movs	r0, r2
   1d0b0:	4798      	blx	r3
   1d0b2:	0003      	movs	r3, r0
   1d0b4:	60fb      	str	r3, [r7, #12]
		if (rc != 1)
   1d0b6:	68fb      	ldr	r3, [r7, #12]
   1d0b8:	2b01      	cmp	r3, #1
   1d0ba:	d116      	bne.n	1d0ea <MQTTPacket_decode+0x76>
			goto exit;
		*value += (c & 127) * multiplier;
   1d0bc:	683b      	ldr	r3, [r7, #0]
   1d0be:	681a      	ldr	r2, [r3, #0]
   1d0c0:	230b      	movs	r3, #11
   1d0c2:	18fb      	adds	r3, r7, r3
   1d0c4:	781b      	ldrb	r3, [r3, #0]
   1d0c6:	0019      	movs	r1, r3
   1d0c8:	237f      	movs	r3, #127	; 0x7f
   1d0ca:	400b      	ands	r3, r1
   1d0cc:	6979      	ldr	r1, [r7, #20]
   1d0ce:	434b      	muls	r3, r1
   1d0d0:	18d2      	adds	r2, r2, r3
   1d0d2:	683b      	ldr	r3, [r7, #0]
   1d0d4:	601a      	str	r2, [r3, #0]
		multiplier *= 128;
   1d0d6:	697b      	ldr	r3, [r7, #20]
   1d0d8:	01db      	lsls	r3, r3, #7
   1d0da:	617b      	str	r3, [r7, #20]
	} while ((c & 128) != 0);
   1d0dc:	230b      	movs	r3, #11
   1d0de:	18fb      	adds	r3, r7, r3
   1d0e0:	781b      	ldrb	r3, [r3, #0]
   1d0e2:	b25b      	sxtb	r3, r3
   1d0e4:	2b00      	cmp	r3, #0
   1d0e6:	dbd1      	blt.n	1d08c <MQTTPacket_decode+0x18>
   1d0e8:	e000      	b.n	1d0ec <MQTTPacket_decode+0x78>
			goto exit;
   1d0ea:	46c0      	nop			; (mov r8, r8)
exit:
	FUNC_EXIT_RC(len);
	return len;
   1d0ec:	693b      	ldr	r3, [r7, #16]
}
   1d0ee:	0018      	movs	r0, r3
   1d0f0:	46bd      	mov	sp, r7
   1d0f2:	b006      	add	sp, #24
   1d0f4:	bd80      	pop	{r7, pc}
	...

0001d0f8 <MQTTPacket_len>:


int MQTTPacket_len(int rem_len)
{
   1d0f8:	b580      	push	{r7, lr}
   1d0fa:	b082      	sub	sp, #8
   1d0fc:	af00      	add	r7, sp, #0
   1d0fe:	6078      	str	r0, [r7, #4]
	rem_len += 1; /* header byte */
   1d100:	687b      	ldr	r3, [r7, #4]
   1d102:	3301      	adds	r3, #1
   1d104:	607b      	str	r3, [r7, #4]

	/* now remaining_length field */
	if (rem_len < 128)
   1d106:	687b      	ldr	r3, [r7, #4]
   1d108:	2b7f      	cmp	r3, #127	; 0x7f
   1d10a:	dc03      	bgt.n	1d114 <MQTTPacket_len+0x1c>
		rem_len += 1;
   1d10c:	687b      	ldr	r3, [r7, #4]
   1d10e:	3301      	adds	r3, #1
   1d110:	607b      	str	r3, [r7, #4]
   1d112:	e012      	b.n	1d13a <MQTTPacket_len+0x42>
	else if (rem_len < 16384)
   1d114:	687b      	ldr	r3, [r7, #4]
   1d116:	4a0b      	ldr	r2, [pc, #44]	; (1d144 <MQTTPacket_len+0x4c>)
   1d118:	4293      	cmp	r3, r2
   1d11a:	dc03      	bgt.n	1d124 <MQTTPacket_len+0x2c>
		rem_len += 2;
   1d11c:	687b      	ldr	r3, [r7, #4]
   1d11e:	3302      	adds	r3, #2
   1d120:	607b      	str	r3, [r7, #4]
   1d122:	e00a      	b.n	1d13a <MQTTPacket_len+0x42>
	else if (rem_len < 2097151)
   1d124:	687b      	ldr	r3, [r7, #4]
   1d126:	4a08      	ldr	r2, [pc, #32]	; (1d148 <MQTTPacket_len+0x50>)
   1d128:	4293      	cmp	r3, r2
   1d12a:	dc03      	bgt.n	1d134 <MQTTPacket_len+0x3c>
		rem_len += 3;
   1d12c:	687b      	ldr	r3, [r7, #4]
   1d12e:	3303      	adds	r3, #3
   1d130:	607b      	str	r3, [r7, #4]
   1d132:	e002      	b.n	1d13a <MQTTPacket_len+0x42>
	else
		rem_len += 4;
   1d134:	687b      	ldr	r3, [r7, #4]
   1d136:	3304      	adds	r3, #4
   1d138:	607b      	str	r3, [r7, #4]
	return rem_len;
   1d13a:	687b      	ldr	r3, [r7, #4]
}
   1d13c:	0018      	movs	r0, r3
   1d13e:	46bd      	mov	sp, r7
   1d140:	b002      	add	sp, #8
   1d142:	bd80      	pop	{r7, pc}
   1d144:	00003fff 	.word	0x00003fff
   1d148:	001ffffe 	.word	0x001ffffe

0001d14c <bufchar>:


static unsigned char* bufptr;

int bufchar(unsigned char* c, int count)
{
   1d14c:	b580      	push	{r7, lr}
   1d14e:	b084      	sub	sp, #16
   1d150:	af00      	add	r7, sp, #0
   1d152:	6078      	str	r0, [r7, #4]
   1d154:	6039      	str	r1, [r7, #0]
	int i;

	for (i = 0; i < count; ++i)
   1d156:	2300      	movs	r3, #0
   1d158:	60fb      	str	r3, [r7, #12]
   1d15a:	e00a      	b.n	1d172 <bufchar+0x26>
		*c = *bufptr++;
   1d15c:	4b09      	ldr	r3, [pc, #36]	; (1d184 <bufchar+0x38>)
   1d15e:	681b      	ldr	r3, [r3, #0]
   1d160:	1c59      	adds	r1, r3, #1
   1d162:	4a08      	ldr	r2, [pc, #32]	; (1d184 <bufchar+0x38>)
   1d164:	6011      	str	r1, [r2, #0]
   1d166:	781a      	ldrb	r2, [r3, #0]
   1d168:	687b      	ldr	r3, [r7, #4]
   1d16a:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < count; ++i)
   1d16c:	68fb      	ldr	r3, [r7, #12]
   1d16e:	3301      	adds	r3, #1
   1d170:	60fb      	str	r3, [r7, #12]
   1d172:	68fa      	ldr	r2, [r7, #12]
   1d174:	683b      	ldr	r3, [r7, #0]
   1d176:	429a      	cmp	r2, r3
   1d178:	dbf0      	blt.n	1d15c <bufchar+0x10>
	return count;
   1d17a:	683b      	ldr	r3, [r7, #0]
}
   1d17c:	0018      	movs	r0, r3
   1d17e:	46bd      	mov	sp, r7
   1d180:	b004      	add	sp, #16
   1d182:	bd80      	pop	{r7, pc}
   1d184:	2000416c 	.word	0x2000416c

0001d188 <MQTTPacket_decodeBuf>:


int MQTTPacket_decodeBuf(unsigned char* buf, int* value)
{
   1d188:	b580      	push	{r7, lr}
   1d18a:	b082      	sub	sp, #8
   1d18c:	af00      	add	r7, sp, #0
   1d18e:	6078      	str	r0, [r7, #4]
   1d190:	6039      	str	r1, [r7, #0]
	bufptr = buf;
   1d192:	4b07      	ldr	r3, [pc, #28]	; (1d1b0 <MQTTPacket_decodeBuf+0x28>)
   1d194:	687a      	ldr	r2, [r7, #4]
   1d196:	601a      	str	r2, [r3, #0]
	return MQTTPacket_decode(bufchar, value);
   1d198:	683a      	ldr	r2, [r7, #0]
   1d19a:	4b06      	ldr	r3, [pc, #24]	; (1d1b4 <MQTTPacket_decodeBuf+0x2c>)
   1d19c:	0011      	movs	r1, r2
   1d19e:	0018      	movs	r0, r3
   1d1a0:	4b05      	ldr	r3, [pc, #20]	; (1d1b8 <MQTTPacket_decodeBuf+0x30>)
   1d1a2:	4798      	blx	r3
   1d1a4:	0003      	movs	r3, r0
}
   1d1a6:	0018      	movs	r0, r3
   1d1a8:	46bd      	mov	sp, r7
   1d1aa:	b002      	add	sp, #8
   1d1ac:	bd80      	pop	{r7, pc}
   1d1ae:	46c0      	nop			; (mov r8, r8)
   1d1b0:	2000416c 	.word	0x2000416c
   1d1b4:	0001d14d 	.word	0x0001d14d
   1d1b8:	0001d075 	.word	0x0001d075

0001d1bc <readInt>:
 * Calculates an integer from two bytes read from the input buffer
 * @param pptr pointer to the input buffer - incremented by the number of bytes used & returned
 * @return the integer value calculated
 */
int readInt(unsigned char** pptr)
{
   1d1bc:	b580      	push	{r7, lr}
   1d1be:	b084      	sub	sp, #16
   1d1c0:	af00      	add	r7, sp, #0
   1d1c2:	6078      	str	r0, [r7, #4]
	unsigned char* ptr = *pptr;
   1d1c4:	687b      	ldr	r3, [r7, #4]
   1d1c6:	681b      	ldr	r3, [r3, #0]
   1d1c8:	60fb      	str	r3, [r7, #12]
	int len = 256*(*ptr) + (*(ptr+1));
   1d1ca:	68fb      	ldr	r3, [r7, #12]
   1d1cc:	781b      	ldrb	r3, [r3, #0]
   1d1ce:	021b      	lsls	r3, r3, #8
   1d1d0:	68fa      	ldr	r2, [r7, #12]
   1d1d2:	3201      	adds	r2, #1
   1d1d4:	7812      	ldrb	r2, [r2, #0]
   1d1d6:	189b      	adds	r3, r3, r2
   1d1d8:	60bb      	str	r3, [r7, #8]
	*pptr += 2;
   1d1da:	687b      	ldr	r3, [r7, #4]
   1d1dc:	681b      	ldr	r3, [r3, #0]
   1d1de:	1c9a      	adds	r2, r3, #2
   1d1e0:	687b      	ldr	r3, [r7, #4]
   1d1e2:	601a      	str	r2, [r3, #0]
	return len;
   1d1e4:	68bb      	ldr	r3, [r7, #8]
}
   1d1e6:	0018      	movs	r0, r3
   1d1e8:	46bd      	mov	sp, r7
   1d1ea:	b004      	add	sp, #16
   1d1ec:	bd80      	pop	{r7, pc}

0001d1ee <readChar>:
 * Reads one character from the input buffer.
 * @param pptr pointer to the input buffer - incremented by the number of bytes used & returned
 * @return the character read
 */
char readChar(unsigned char** pptr)
{
   1d1ee:	b580      	push	{r7, lr}
   1d1f0:	b084      	sub	sp, #16
   1d1f2:	af00      	add	r7, sp, #0
   1d1f4:	6078      	str	r0, [r7, #4]
	char c = **pptr;
   1d1f6:	687b      	ldr	r3, [r7, #4]
   1d1f8:	681a      	ldr	r2, [r3, #0]
   1d1fa:	230f      	movs	r3, #15
   1d1fc:	18fb      	adds	r3, r7, r3
   1d1fe:	7812      	ldrb	r2, [r2, #0]
   1d200:	701a      	strb	r2, [r3, #0]
	(*pptr)++;
   1d202:	687b      	ldr	r3, [r7, #4]
   1d204:	681b      	ldr	r3, [r3, #0]
   1d206:	1c5a      	adds	r2, r3, #1
   1d208:	687b      	ldr	r3, [r7, #4]
   1d20a:	601a      	str	r2, [r3, #0]
	return c;
   1d20c:	230f      	movs	r3, #15
   1d20e:	18fb      	adds	r3, r7, r3
   1d210:	781b      	ldrb	r3, [r3, #0]
}
   1d212:	0018      	movs	r0, r3
   1d214:	46bd      	mov	sp, r7
   1d216:	b004      	add	sp, #16
   1d218:	bd80      	pop	{r7, pc}

0001d21a <writeChar>:
 * Writes one character to an output buffer.
 * @param pptr pointer to the output buffer - incremented by the number of bytes used & returned
 * @param c the character to write
 */
void writeChar(unsigned char** pptr, char c)
{
   1d21a:	b580      	push	{r7, lr}
   1d21c:	b082      	sub	sp, #8
   1d21e:	af00      	add	r7, sp, #0
   1d220:	6078      	str	r0, [r7, #4]
   1d222:	000a      	movs	r2, r1
   1d224:	1cfb      	adds	r3, r7, #3
   1d226:	701a      	strb	r2, [r3, #0]
	**pptr = c;
   1d228:	687b      	ldr	r3, [r7, #4]
   1d22a:	681b      	ldr	r3, [r3, #0]
   1d22c:	1cfa      	adds	r2, r7, #3
   1d22e:	7812      	ldrb	r2, [r2, #0]
   1d230:	701a      	strb	r2, [r3, #0]
	(*pptr)++;
   1d232:	687b      	ldr	r3, [r7, #4]
   1d234:	681b      	ldr	r3, [r3, #0]
   1d236:	1c5a      	adds	r2, r3, #1
   1d238:	687b      	ldr	r3, [r7, #4]
   1d23a:	601a      	str	r2, [r3, #0]
}
   1d23c:	46c0      	nop			; (mov r8, r8)
   1d23e:	46bd      	mov	sp, r7
   1d240:	b002      	add	sp, #8
   1d242:	bd80      	pop	{r7, pc}

0001d244 <writeInt>:
 * Writes an integer as 2 bytes to an output buffer.
 * @param pptr pointer to the output buffer - incremented by the number of bytes used & returned
 * @param anInt the integer to write
 */
void writeInt(unsigned char** pptr, int anInt)
{
   1d244:	b580      	push	{r7, lr}
   1d246:	b082      	sub	sp, #8
   1d248:	af00      	add	r7, sp, #0
   1d24a:	6078      	str	r0, [r7, #4]
   1d24c:	6039      	str	r1, [r7, #0]
	**pptr = (unsigned char)(anInt / 256);
   1d24e:	687b      	ldr	r3, [r7, #4]
   1d250:	681a      	ldr	r2, [r3, #0]
   1d252:	683b      	ldr	r3, [r7, #0]
   1d254:	2b00      	cmp	r3, #0
   1d256:	da00      	bge.n	1d25a <writeInt+0x16>
   1d258:	33ff      	adds	r3, #255	; 0xff
   1d25a:	121b      	asrs	r3, r3, #8
   1d25c:	b2db      	uxtb	r3, r3
   1d25e:	7013      	strb	r3, [r2, #0]
	(*pptr)++;
   1d260:	687b      	ldr	r3, [r7, #4]
   1d262:	681b      	ldr	r3, [r3, #0]
   1d264:	1c5a      	adds	r2, r3, #1
   1d266:	687b      	ldr	r3, [r7, #4]
   1d268:	601a      	str	r2, [r3, #0]
	**pptr = (unsigned char)(anInt % 256);
   1d26a:	687b      	ldr	r3, [r7, #4]
   1d26c:	681a      	ldr	r2, [r3, #0]
   1d26e:	683b      	ldr	r3, [r7, #0]
   1d270:	4908      	ldr	r1, [pc, #32]	; (1d294 <writeInt+0x50>)
   1d272:	400b      	ands	r3, r1
   1d274:	d503      	bpl.n	1d27e <writeInt+0x3a>
   1d276:	3b01      	subs	r3, #1
   1d278:	4907      	ldr	r1, [pc, #28]	; (1d298 <writeInt+0x54>)
   1d27a:	430b      	orrs	r3, r1
   1d27c:	3301      	adds	r3, #1
   1d27e:	b2db      	uxtb	r3, r3
   1d280:	7013      	strb	r3, [r2, #0]
	(*pptr)++;
   1d282:	687b      	ldr	r3, [r7, #4]
   1d284:	681b      	ldr	r3, [r3, #0]
   1d286:	1c5a      	adds	r2, r3, #1
   1d288:	687b      	ldr	r3, [r7, #4]
   1d28a:	601a      	str	r2, [r3, #0]
}
   1d28c:	46c0      	nop			; (mov r8, r8)
   1d28e:	46bd      	mov	sp, r7
   1d290:	b002      	add	sp, #8
   1d292:	bd80      	pop	{r7, pc}
   1d294:	800000ff 	.word	0x800000ff
   1d298:	ffffff00 	.word	0xffffff00

0001d29c <writeCString>:
 * Writes a "UTF" string to an output buffer.  Converts C string to length-delimited.
 * @param pptr pointer to the output buffer - incremented by the number of bytes used & returned
 * @param string the C string to write
 */
void writeCString(unsigned char** pptr, const char* string)
{
   1d29c:	b580      	push	{r7, lr}
   1d29e:	b084      	sub	sp, #16
   1d2a0:	af00      	add	r7, sp, #0
   1d2a2:	6078      	str	r0, [r7, #4]
   1d2a4:	6039      	str	r1, [r7, #0]
	int len = strlen(string);
   1d2a6:	683b      	ldr	r3, [r7, #0]
   1d2a8:	0018      	movs	r0, r3
   1d2aa:	4b0d      	ldr	r3, [pc, #52]	; (1d2e0 <writeCString+0x44>)
   1d2ac:	4798      	blx	r3
   1d2ae:	0003      	movs	r3, r0
   1d2b0:	60fb      	str	r3, [r7, #12]
	writeInt(pptr, len);
   1d2b2:	68fa      	ldr	r2, [r7, #12]
   1d2b4:	687b      	ldr	r3, [r7, #4]
   1d2b6:	0011      	movs	r1, r2
   1d2b8:	0018      	movs	r0, r3
   1d2ba:	4b0a      	ldr	r3, [pc, #40]	; (1d2e4 <writeCString+0x48>)
   1d2bc:	4798      	blx	r3
	memcpy(*pptr, string, len);
   1d2be:	687b      	ldr	r3, [r7, #4]
   1d2c0:	681b      	ldr	r3, [r3, #0]
   1d2c2:	68fa      	ldr	r2, [r7, #12]
   1d2c4:	6839      	ldr	r1, [r7, #0]
   1d2c6:	0018      	movs	r0, r3
   1d2c8:	4b07      	ldr	r3, [pc, #28]	; (1d2e8 <writeCString+0x4c>)
   1d2ca:	4798      	blx	r3
	*pptr += len;
   1d2cc:	687b      	ldr	r3, [r7, #4]
   1d2ce:	681a      	ldr	r2, [r3, #0]
   1d2d0:	68fb      	ldr	r3, [r7, #12]
   1d2d2:	18d2      	adds	r2, r2, r3
   1d2d4:	687b      	ldr	r3, [r7, #4]
   1d2d6:	601a      	str	r2, [r3, #0]
}
   1d2d8:	46c0      	nop			; (mov r8, r8)
   1d2da:	46bd      	mov	sp, r7
   1d2dc:	b004      	add	sp, #16
   1d2de:	bd80      	pop	{r7, pc}
   1d2e0:	00021bd3 	.word	0x00021bd3
   1d2e4:	0001d245 	.word	0x0001d245
   1d2e8:	000217e5 	.word	0x000217e5

0001d2ec <writeMQTTString>:
	return len;
}


void writeMQTTString(unsigned char** pptr, MQTTString mqttstring)
{
   1d2ec:	b580      	push	{r7, lr}
   1d2ee:	b084      	sub	sp, #16
   1d2f0:	af00      	add	r7, sp, #0
   1d2f2:	60f8      	str	r0, [r7, #12]
   1d2f4:	0038      	movs	r0, r7
   1d2f6:	6001      	str	r1, [r0, #0]
   1d2f8:	6042      	str	r2, [r0, #4]
   1d2fa:	6083      	str	r3, [r0, #8]
	if (mqttstring.lenstring.len > 0)
   1d2fc:	003b      	movs	r3, r7
   1d2fe:	685b      	ldr	r3, [r3, #4]
   1d300:	2b00      	cmp	r3, #0
   1d302:	dd17      	ble.n	1d334 <writeMQTTString+0x48>
	{
		writeInt(pptr, mqttstring.lenstring.len);
   1d304:	003b      	movs	r3, r7
   1d306:	685a      	ldr	r2, [r3, #4]
   1d308:	68fb      	ldr	r3, [r7, #12]
   1d30a:	0011      	movs	r1, r2
   1d30c:	0018      	movs	r0, r3
   1d30e:	4b14      	ldr	r3, [pc, #80]	; (1d360 <writeMQTTString+0x74>)
   1d310:	4798      	blx	r3
		memcpy(*pptr, mqttstring.lenstring.data, mqttstring.lenstring.len);
   1d312:	68fb      	ldr	r3, [r7, #12]
   1d314:	6818      	ldr	r0, [r3, #0]
   1d316:	003b      	movs	r3, r7
   1d318:	6899      	ldr	r1, [r3, #8]
   1d31a:	003b      	movs	r3, r7
   1d31c:	685b      	ldr	r3, [r3, #4]
   1d31e:	001a      	movs	r2, r3
   1d320:	4b10      	ldr	r3, [pc, #64]	; (1d364 <writeMQTTString+0x78>)
   1d322:	4798      	blx	r3
		*pptr += mqttstring.lenstring.len;
   1d324:	68fb      	ldr	r3, [r7, #12]
   1d326:	681a      	ldr	r2, [r3, #0]
   1d328:	003b      	movs	r3, r7
   1d32a:	685b      	ldr	r3, [r3, #4]
   1d32c:	18d2      	adds	r2, r2, r3
   1d32e:	68fb      	ldr	r3, [r7, #12]
   1d330:	601a      	str	r2, [r3, #0]
	}
	else if (mqttstring.cstring)
		writeCString(pptr, mqttstring.cstring);
	else
		writeInt(pptr, 0);
}
   1d332:	e010      	b.n	1d356 <writeMQTTString+0x6a>
	else if (mqttstring.cstring)
   1d334:	003b      	movs	r3, r7
   1d336:	681b      	ldr	r3, [r3, #0]
   1d338:	2b00      	cmp	r3, #0
   1d33a:	d007      	beq.n	1d34c <writeMQTTString+0x60>
		writeCString(pptr, mqttstring.cstring);
   1d33c:	003b      	movs	r3, r7
   1d33e:	681a      	ldr	r2, [r3, #0]
   1d340:	68fb      	ldr	r3, [r7, #12]
   1d342:	0011      	movs	r1, r2
   1d344:	0018      	movs	r0, r3
   1d346:	4b08      	ldr	r3, [pc, #32]	; (1d368 <writeMQTTString+0x7c>)
   1d348:	4798      	blx	r3
}
   1d34a:	e004      	b.n	1d356 <writeMQTTString+0x6a>
		writeInt(pptr, 0);
   1d34c:	68fb      	ldr	r3, [r7, #12]
   1d34e:	2100      	movs	r1, #0
   1d350:	0018      	movs	r0, r3
   1d352:	4b03      	ldr	r3, [pc, #12]	; (1d360 <writeMQTTString+0x74>)
   1d354:	4798      	blx	r3
}
   1d356:	46c0      	nop			; (mov r8, r8)
   1d358:	46bd      	mov	sp, r7
   1d35a:	b004      	add	sp, #16
   1d35c:	bd80      	pop	{r7, pc}
   1d35e:	46c0      	nop			; (mov r8, r8)
   1d360:	0001d245 	.word	0x0001d245
   1d364:	000217e5 	.word	0x000217e5
   1d368:	0001d29d 	.word	0x0001d29d

0001d36c <readMQTTLenString>:
 * @param pptr pointer to the output buffer - incremented by the number of bytes used & returned
 * @param enddata pointer to the end of the data: do not read beyond
 * @return 1 if successful, 0 if not
 */
int readMQTTLenString(MQTTString* mqttstring, unsigned char** pptr, unsigned char* enddata)
{
   1d36c:	b580      	push	{r7, lr}
   1d36e:	b086      	sub	sp, #24
   1d370:	af00      	add	r7, sp, #0
   1d372:	60f8      	str	r0, [r7, #12]
   1d374:	60b9      	str	r1, [r7, #8]
   1d376:	607a      	str	r2, [r7, #4]
	int rc = 0;
   1d378:	2300      	movs	r3, #0
   1d37a:	617b      	str	r3, [r7, #20]

	FUNC_ENTRY;
	/* the first two bytes are the length of the string */
	if (enddata - (*pptr) > 1) /* enough length to read the integer? */
   1d37c:	687a      	ldr	r2, [r7, #4]
   1d37e:	68bb      	ldr	r3, [r7, #8]
   1d380:	681b      	ldr	r3, [r3, #0]
   1d382:	1ad3      	subs	r3, r2, r3
   1d384:	2b01      	cmp	r3, #1
   1d386:	dd1b      	ble.n	1d3c0 <readMQTTLenString+0x54>
	{
		mqttstring->lenstring.len = readInt(pptr); /* increments pptr to point past length */
   1d388:	68bb      	ldr	r3, [r7, #8]
   1d38a:	0018      	movs	r0, r3
   1d38c:	4b10      	ldr	r3, [pc, #64]	; (1d3d0 <readMQTTLenString+0x64>)
   1d38e:	4798      	blx	r3
   1d390:	0002      	movs	r2, r0
   1d392:	68fb      	ldr	r3, [r7, #12]
   1d394:	605a      	str	r2, [r3, #4]
		if (&(*pptr)[mqttstring->lenstring.len] <= enddata)
   1d396:	68bb      	ldr	r3, [r7, #8]
   1d398:	681a      	ldr	r2, [r3, #0]
   1d39a:	68fb      	ldr	r3, [r7, #12]
   1d39c:	685b      	ldr	r3, [r3, #4]
   1d39e:	18d2      	adds	r2, r2, r3
   1d3a0:	687b      	ldr	r3, [r7, #4]
   1d3a2:	429a      	cmp	r2, r3
   1d3a4:	d80c      	bhi.n	1d3c0 <readMQTTLenString+0x54>
		{
			mqttstring->lenstring.data = (char*)*pptr;
   1d3a6:	68bb      	ldr	r3, [r7, #8]
   1d3a8:	681a      	ldr	r2, [r3, #0]
   1d3aa:	68fb      	ldr	r3, [r7, #12]
   1d3ac:	609a      	str	r2, [r3, #8]
			*pptr += mqttstring->lenstring.len;
   1d3ae:	68bb      	ldr	r3, [r7, #8]
   1d3b0:	681a      	ldr	r2, [r3, #0]
   1d3b2:	68fb      	ldr	r3, [r7, #12]
   1d3b4:	685b      	ldr	r3, [r3, #4]
   1d3b6:	18d2      	adds	r2, r2, r3
   1d3b8:	68bb      	ldr	r3, [r7, #8]
   1d3ba:	601a      	str	r2, [r3, #0]
			rc = 1;
   1d3bc:	2301      	movs	r3, #1
   1d3be:	617b      	str	r3, [r7, #20]
		}
	}
	mqttstring->cstring = NULL;
   1d3c0:	68fb      	ldr	r3, [r7, #12]
   1d3c2:	2200      	movs	r2, #0
   1d3c4:	601a      	str	r2, [r3, #0]
	FUNC_EXIT_RC(rc);
	return rc;
   1d3c6:	697b      	ldr	r3, [r7, #20]
}
   1d3c8:	0018      	movs	r0, r3
   1d3ca:	46bd      	mov	sp, r7
   1d3cc:	b006      	add	sp, #24
   1d3ce:	bd80      	pop	{r7, pc}
   1d3d0:	0001d1bd 	.word	0x0001d1bd

0001d3d4 <MQTTstrlen>:
 * Return the length of the MQTTstring - C string if there is one, otherwise the length delimited string
 * @param mqttstring the string to return the length of
 * @return the length of the string
 */
int MQTTstrlen(MQTTString mqttstring)
{
   1d3d4:	b580      	push	{r7, lr}
   1d3d6:	b086      	sub	sp, #24
   1d3d8:	af00      	add	r7, sp, #0
   1d3da:	1d3b      	adds	r3, r7, #4
   1d3dc:	6018      	str	r0, [r3, #0]
   1d3de:	6059      	str	r1, [r3, #4]
   1d3e0:	609a      	str	r2, [r3, #8]
	int rc = 0;
   1d3e2:	2300      	movs	r3, #0
   1d3e4:	617b      	str	r3, [r7, #20]

	if (mqttstring.cstring)
   1d3e6:	1d3b      	adds	r3, r7, #4
   1d3e8:	681b      	ldr	r3, [r3, #0]
   1d3ea:	2b00      	cmp	r3, #0
   1d3ec:	d007      	beq.n	1d3fe <MQTTstrlen+0x2a>
		rc = strlen(mqttstring.cstring);
   1d3ee:	1d3b      	adds	r3, r7, #4
   1d3f0:	681b      	ldr	r3, [r3, #0]
   1d3f2:	0018      	movs	r0, r3
   1d3f4:	4b06      	ldr	r3, [pc, #24]	; (1d410 <MQTTstrlen+0x3c>)
   1d3f6:	4798      	blx	r3
   1d3f8:	0003      	movs	r3, r0
   1d3fa:	617b      	str	r3, [r7, #20]
   1d3fc:	e002      	b.n	1d404 <MQTTstrlen+0x30>
	else
		rc = mqttstring.lenstring.len;
   1d3fe:	1d3b      	adds	r3, r7, #4
   1d400:	685b      	ldr	r3, [r3, #4]
   1d402:	617b      	str	r3, [r7, #20]
	return rc;
   1d404:	697b      	ldr	r3, [r7, #20]
}
   1d406:	0018      	movs	r0, r3
   1d408:	46bd      	mov	sp, r7
   1d40a:	b006      	add	sp, #24
   1d40c:	bd80      	pop	{r7, pc}
   1d40e:	46c0      	nop			; (mov r8, r8)
   1d410:	00021bd3 	.word	0x00021bd3

0001d414 <MQTTPacket_equals>:
 * @param a the MQTTString to compare
 * @param bptr the C string to compare
 * @return boolean - equal or not
 */
int MQTTPacket_equals(MQTTString* a, char* bptr)
{
   1d414:	b580      	push	{r7, lr}
   1d416:	b086      	sub	sp, #24
   1d418:	af00      	add	r7, sp, #0
   1d41a:	6078      	str	r0, [r7, #4]
   1d41c:	6039      	str	r1, [r7, #0]
	int alen = 0,
   1d41e:	2300      	movs	r3, #0
   1d420:	617b      	str	r3, [r7, #20]
		blen = 0;
   1d422:	2300      	movs	r3, #0
   1d424:	60fb      	str	r3, [r7, #12]
	char *aptr;
	
	if (a->cstring)
   1d426:	687b      	ldr	r3, [r7, #4]
   1d428:	681b      	ldr	r3, [r3, #0]
   1d42a:	2b00      	cmp	r3, #0
   1d42c:	d00a      	beq.n	1d444 <MQTTPacket_equals+0x30>
	{
		aptr = a->cstring;
   1d42e:	687b      	ldr	r3, [r7, #4]
   1d430:	681b      	ldr	r3, [r3, #0]
   1d432:	613b      	str	r3, [r7, #16]
		alen = strlen(a->cstring);
   1d434:	687b      	ldr	r3, [r7, #4]
   1d436:	681b      	ldr	r3, [r3, #0]
   1d438:	0018      	movs	r0, r3
   1d43a:	4b12      	ldr	r3, [pc, #72]	; (1d484 <MQTTPacket_equals+0x70>)
   1d43c:	4798      	blx	r3
   1d43e:	0003      	movs	r3, r0
   1d440:	617b      	str	r3, [r7, #20]
   1d442:	e005      	b.n	1d450 <MQTTPacket_equals+0x3c>
	}
	else
	{
		aptr = a->lenstring.data;
   1d444:	687b      	ldr	r3, [r7, #4]
   1d446:	689b      	ldr	r3, [r3, #8]
   1d448:	613b      	str	r3, [r7, #16]
		alen = a->lenstring.len;
   1d44a:	687b      	ldr	r3, [r7, #4]
   1d44c:	685b      	ldr	r3, [r3, #4]
   1d44e:	617b      	str	r3, [r7, #20]
	}
	blen = strlen(bptr);
   1d450:	683b      	ldr	r3, [r7, #0]
   1d452:	0018      	movs	r0, r3
   1d454:	4b0b      	ldr	r3, [pc, #44]	; (1d484 <MQTTPacket_equals+0x70>)
   1d456:	4798      	blx	r3
   1d458:	0003      	movs	r3, r0
   1d45a:	60fb      	str	r3, [r7, #12]
	
	return (alen == blen) && (strncmp(aptr, bptr, alen) == 0);
   1d45c:	697a      	ldr	r2, [r7, #20]
   1d45e:	68fb      	ldr	r3, [r7, #12]
   1d460:	429a      	cmp	r2, r3
   1d462:	d109      	bne.n	1d478 <MQTTPacket_equals+0x64>
   1d464:	697a      	ldr	r2, [r7, #20]
   1d466:	6839      	ldr	r1, [r7, #0]
   1d468:	693b      	ldr	r3, [r7, #16]
   1d46a:	0018      	movs	r0, r3
   1d46c:	4b06      	ldr	r3, [pc, #24]	; (1d488 <MQTTPacket_equals+0x74>)
   1d46e:	4798      	blx	r3
   1d470:	1e03      	subs	r3, r0, #0
   1d472:	d101      	bne.n	1d478 <MQTTPacket_equals+0x64>
   1d474:	2301      	movs	r3, #1
   1d476:	e000      	b.n	1d47a <MQTTPacket_equals+0x66>
   1d478:	2300      	movs	r3, #0
}
   1d47a:	0018      	movs	r0, r3
   1d47c:	46bd      	mov	sp, r7
   1d47e:	b006      	add	sp, #24
   1d480:	bd80      	pop	{r7, pc}
   1d482:	46c0      	nop			; (mov r8, r8)
   1d484:	00021bd3 	.word	0x00021bd3
   1d488:	00021be1 	.word	0x00021be1

0001d48c <MQTTSerialize_publishLength>:
  * @param topicName the topic name to be used in the publish  
  * @param payloadlen the length of the payload to be sent
  * @return the length of buffer needed to contain the serialized version of the packet
  */
int MQTTSerialize_publishLength(int qos, MQTTString topicName, int payloadlen)
{
   1d48c:	b580      	push	{r7, lr}
   1d48e:	b086      	sub	sp, #24
   1d490:	af00      	add	r7, sp, #0
   1d492:	60f8      	str	r0, [r7, #12]
   1d494:	0038      	movs	r0, r7
   1d496:	6001      	str	r1, [r0, #0]
   1d498:	6042      	str	r2, [r0, #4]
   1d49a:	6083      	str	r3, [r0, #8]
	int len = 0;
   1d49c:	2300      	movs	r3, #0
   1d49e:	617b      	str	r3, [r7, #20]

	len += 2 + MQTTstrlen(topicName) + payloadlen;
   1d4a0:	003b      	movs	r3, r7
   1d4a2:	6818      	ldr	r0, [r3, #0]
   1d4a4:	6859      	ldr	r1, [r3, #4]
   1d4a6:	689a      	ldr	r2, [r3, #8]
   1d4a8:	4b09      	ldr	r3, [pc, #36]	; (1d4d0 <MQTTSerialize_publishLength+0x44>)
   1d4aa:	4798      	blx	r3
   1d4ac:	0003      	movs	r3, r0
   1d4ae:	1c9a      	adds	r2, r3, #2
   1d4b0:	6a3b      	ldr	r3, [r7, #32]
   1d4b2:	18d3      	adds	r3, r2, r3
   1d4b4:	697a      	ldr	r2, [r7, #20]
   1d4b6:	18d3      	adds	r3, r2, r3
   1d4b8:	617b      	str	r3, [r7, #20]
	if (qos > 0)
   1d4ba:	68fb      	ldr	r3, [r7, #12]
   1d4bc:	2b00      	cmp	r3, #0
   1d4be:	dd02      	ble.n	1d4c6 <MQTTSerialize_publishLength+0x3a>
		len += 2; /* packetid */
   1d4c0:	697b      	ldr	r3, [r7, #20]
   1d4c2:	3302      	adds	r3, #2
   1d4c4:	617b      	str	r3, [r7, #20]
	return len;
   1d4c6:	697b      	ldr	r3, [r7, #20]
}
   1d4c8:	0018      	movs	r0, r3
   1d4ca:	46bd      	mov	sp, r7
   1d4cc:	b006      	add	sp, #24
   1d4ce:	bd80      	pop	{r7, pc}
   1d4d0:	0001d3d5 	.word	0x0001d3d5

0001d4d4 <MQTTSerialize_publish>:
  * @param payloadlen integer - the length of the MQTT payload
  * @return the length of the serialized data.  <= 0 indicates error
  */
int MQTTSerialize_publish(unsigned char* buf, int buflen, unsigned char dup, int qos, unsigned char retained, unsigned short packetid,
		MQTTString topicName, unsigned char* payload, int payloadlen)
{
   1d4d4:	b590      	push	{r4, r7, lr}
   1d4d6:	b08b      	sub	sp, #44	; 0x2c
   1d4d8:	af02      	add	r7, sp, #8
   1d4da:	60f8      	str	r0, [r7, #12]
   1d4dc:	60b9      	str	r1, [r7, #8]
   1d4de:	603b      	str	r3, [r7, #0]
   1d4e0:	1dfb      	adds	r3, r7, #7
   1d4e2:	701a      	strb	r2, [r3, #0]
	unsigned char *ptr = buf;
   1d4e4:	68fb      	ldr	r3, [r7, #12]
   1d4e6:	617b      	str	r3, [r7, #20]
	MQTTHeader header = {0};
   1d4e8:	2300      	movs	r3, #0
   1d4ea:	613b      	str	r3, [r7, #16]
	int rem_len = 0;
   1d4ec:	2300      	movs	r3, #0
   1d4ee:	61bb      	str	r3, [r7, #24]
	int rc = 0;
   1d4f0:	2300      	movs	r3, #0
   1d4f2:	61fb      	str	r3, [r7, #28]

	FUNC_ENTRY;
	if (MQTTPacket_len(rem_len = MQTTSerialize_publishLength(qos, topicName, payloadlen)) > buflen)
   1d4f4:	2308      	movs	r3, #8
   1d4f6:	2230      	movs	r2, #48	; 0x30
   1d4f8:	4694      	mov	ip, r2
   1d4fa:	44bc      	add	ip, r7
   1d4fc:	4463      	add	r3, ip
   1d4fe:	6838      	ldr	r0, [r7, #0]
   1d500:	6cba      	ldr	r2, [r7, #72]	; 0x48
   1d502:	9200      	str	r2, [sp, #0]
   1d504:	6819      	ldr	r1, [r3, #0]
   1d506:	685a      	ldr	r2, [r3, #4]
   1d508:	689b      	ldr	r3, [r3, #8]
   1d50a:	4c46      	ldr	r4, [pc, #280]	; (1d624 <MQTTSerialize_publish+0x150>)
   1d50c:	47a0      	blx	r4
   1d50e:	0003      	movs	r3, r0
   1d510:	61bb      	str	r3, [r7, #24]
   1d512:	69bb      	ldr	r3, [r7, #24]
   1d514:	0018      	movs	r0, r3
   1d516:	4b44      	ldr	r3, [pc, #272]	; (1d628 <MQTTSerialize_publish+0x154>)
   1d518:	4798      	blx	r3
   1d51a:	0002      	movs	r2, r0
   1d51c:	68bb      	ldr	r3, [r7, #8]
   1d51e:	429a      	cmp	r2, r3
   1d520:	dd03      	ble.n	1d52a <MQTTSerialize_publish+0x56>
	{
		rc = MQTTPACKET_BUFFER_TOO_SHORT;
   1d522:	2302      	movs	r3, #2
   1d524:	425b      	negs	r3, r3
   1d526:	61fb      	str	r3, [r7, #28]
		goto exit;
   1d528:	e077      	b.n	1d61a <MQTTSerialize_publish+0x146>
	}

	header.bits.type = PUBLISH;
   1d52a:	2310      	movs	r3, #16
   1d52c:	18fb      	adds	r3, r7, r3
   1d52e:	781a      	ldrb	r2, [r3, #0]
   1d530:	210f      	movs	r1, #15
   1d532:	400a      	ands	r2, r1
   1d534:	1c11      	adds	r1, r2, #0
   1d536:	2230      	movs	r2, #48	; 0x30
   1d538:	430a      	orrs	r2, r1
   1d53a:	701a      	strb	r2, [r3, #0]
	header.bits.dup = dup;
   1d53c:	1dfb      	adds	r3, r7, #7
   1d53e:	781b      	ldrb	r3, [r3, #0]
   1d540:	2201      	movs	r2, #1
   1d542:	4013      	ands	r3, r2
   1d544:	b2da      	uxtb	r2, r3
   1d546:	2310      	movs	r3, #16
   1d548:	18fb      	adds	r3, r7, r3
   1d54a:	2101      	movs	r1, #1
   1d54c:	400a      	ands	r2, r1
   1d54e:	00d0      	lsls	r0, r2, #3
   1d550:	781a      	ldrb	r2, [r3, #0]
   1d552:	2108      	movs	r1, #8
   1d554:	438a      	bics	r2, r1
   1d556:	1c11      	adds	r1, r2, #0
   1d558:	1c02      	adds	r2, r0, #0
   1d55a:	430a      	orrs	r2, r1
   1d55c:	701a      	strb	r2, [r3, #0]
	header.bits.qos = qos;
   1d55e:	683b      	ldr	r3, [r7, #0]
   1d560:	b2db      	uxtb	r3, r3
   1d562:	1c1a      	adds	r2, r3, #0
   1d564:	2303      	movs	r3, #3
   1d566:	4013      	ands	r3, r2
   1d568:	b2da      	uxtb	r2, r3
   1d56a:	2310      	movs	r3, #16
   1d56c:	18fb      	adds	r3, r7, r3
   1d56e:	2103      	movs	r1, #3
   1d570:	400a      	ands	r2, r1
   1d572:	1890      	adds	r0, r2, r2
   1d574:	781a      	ldrb	r2, [r3, #0]
   1d576:	2106      	movs	r1, #6
   1d578:	438a      	bics	r2, r1
   1d57a:	1c11      	adds	r1, r2, #0
   1d57c:	1c02      	adds	r2, r0, #0
   1d57e:	430a      	orrs	r2, r1
   1d580:	701a      	strb	r2, [r3, #0]
	header.bits.retain = retained;
   1d582:	2330      	movs	r3, #48	; 0x30
   1d584:	18fb      	adds	r3, r7, r3
   1d586:	781b      	ldrb	r3, [r3, #0]
   1d588:	2201      	movs	r2, #1
   1d58a:	4013      	ands	r3, r2
   1d58c:	b2da      	uxtb	r2, r3
   1d58e:	2310      	movs	r3, #16
   1d590:	18fb      	adds	r3, r7, r3
   1d592:	2101      	movs	r1, #1
   1d594:	400a      	ands	r2, r1
   1d596:	0010      	movs	r0, r2
   1d598:	781a      	ldrb	r2, [r3, #0]
   1d59a:	2101      	movs	r1, #1
   1d59c:	438a      	bics	r2, r1
   1d59e:	1c11      	adds	r1, r2, #0
   1d5a0:	1c02      	adds	r2, r0, #0
   1d5a2:	430a      	orrs	r2, r1
   1d5a4:	701a      	strb	r2, [r3, #0]
	writeChar(&ptr, header.byte); /* write header */
   1d5a6:	2310      	movs	r3, #16
   1d5a8:	18fb      	adds	r3, r7, r3
   1d5aa:	781a      	ldrb	r2, [r3, #0]
   1d5ac:	2314      	movs	r3, #20
   1d5ae:	18fb      	adds	r3, r7, r3
   1d5b0:	0011      	movs	r1, r2
   1d5b2:	0018      	movs	r0, r3
   1d5b4:	4b1d      	ldr	r3, [pc, #116]	; (1d62c <MQTTSerialize_publish+0x158>)
   1d5b6:	4798      	blx	r3

	ptr += MQTTPacket_encode(ptr, rem_len); /* write remaining length */;
   1d5b8:	697b      	ldr	r3, [r7, #20]
   1d5ba:	69ba      	ldr	r2, [r7, #24]
   1d5bc:	0011      	movs	r1, r2
   1d5be:	0018      	movs	r0, r3
   1d5c0:	4b1b      	ldr	r3, [pc, #108]	; (1d630 <MQTTSerialize_publish+0x15c>)
   1d5c2:	4798      	blx	r3
   1d5c4:	0002      	movs	r2, r0
   1d5c6:	697b      	ldr	r3, [r7, #20]
   1d5c8:	189b      	adds	r3, r3, r2
   1d5ca:	617b      	str	r3, [r7, #20]

	writeMQTTString(&ptr, topicName);
   1d5cc:	2308      	movs	r3, #8
   1d5ce:	2230      	movs	r2, #48	; 0x30
   1d5d0:	4694      	mov	ip, r2
   1d5d2:	44bc      	add	ip, r7
   1d5d4:	4463      	add	r3, ip
   1d5d6:	2214      	movs	r2, #20
   1d5d8:	18b8      	adds	r0, r7, r2
   1d5da:	6819      	ldr	r1, [r3, #0]
   1d5dc:	685a      	ldr	r2, [r3, #4]
   1d5de:	689b      	ldr	r3, [r3, #8]
   1d5e0:	4c14      	ldr	r4, [pc, #80]	; (1d634 <MQTTSerialize_publish+0x160>)
   1d5e2:	47a0      	blx	r4

	if (qos > 0)
   1d5e4:	683b      	ldr	r3, [r7, #0]
   1d5e6:	2b00      	cmp	r3, #0
   1d5e8:	dd08      	ble.n	1d5fc <MQTTSerialize_publish+0x128>
		writeInt(&ptr, packetid);
   1d5ea:	2334      	movs	r3, #52	; 0x34
   1d5ec:	18fb      	adds	r3, r7, r3
   1d5ee:	881a      	ldrh	r2, [r3, #0]
   1d5f0:	2314      	movs	r3, #20
   1d5f2:	18fb      	adds	r3, r7, r3
   1d5f4:	0011      	movs	r1, r2
   1d5f6:	0018      	movs	r0, r3
   1d5f8:	4b0f      	ldr	r3, [pc, #60]	; (1d638 <MQTTSerialize_publish+0x164>)
   1d5fa:	4798      	blx	r3

	memcpy(ptr, payload, payloadlen);
   1d5fc:	697b      	ldr	r3, [r7, #20]
   1d5fe:	6cba      	ldr	r2, [r7, #72]	; 0x48
   1d600:	6c79      	ldr	r1, [r7, #68]	; 0x44
   1d602:	0018      	movs	r0, r3
   1d604:	4b0d      	ldr	r3, [pc, #52]	; (1d63c <MQTTSerialize_publish+0x168>)
   1d606:	4798      	blx	r3
	ptr += payloadlen;
   1d608:	697a      	ldr	r2, [r7, #20]
   1d60a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   1d60c:	18d3      	adds	r3, r2, r3
   1d60e:	617b      	str	r3, [r7, #20]

	rc = ptr - buf;
   1d610:	697b      	ldr	r3, [r7, #20]
   1d612:	001a      	movs	r2, r3
   1d614:	68fb      	ldr	r3, [r7, #12]
   1d616:	1ad3      	subs	r3, r2, r3
   1d618:	61fb      	str	r3, [r7, #28]

exit:
	FUNC_EXIT_RC(rc);
	return rc;
   1d61a:	69fb      	ldr	r3, [r7, #28]
}
   1d61c:	0018      	movs	r0, r3
   1d61e:	46bd      	mov	sp, r7
   1d620:	b009      	add	sp, #36	; 0x24
   1d622:	bd90      	pop	{r4, r7, pc}
   1d624:	0001d48d 	.word	0x0001d48d
   1d628:	0001d0f9 	.word	0x0001d0f9
   1d62c:	0001d21b 	.word	0x0001d21b
   1d630:	0001d001 	.word	0x0001d001
   1d634:	0001d2ed 	.word	0x0001d2ed
   1d638:	0001d245 	.word	0x0001d245
   1d63c:	000217e5 	.word	0x000217e5

0001d640 <MQTTSerialize_ack>:
  * @param dup the MQTT dup flag
  * @param packetid the MQTT packet identifier
  * @return serialized length, or error if 0
  */
int MQTTSerialize_ack(unsigned char* buf, int buflen, unsigned char packettype, unsigned char dup, unsigned short packetid)
{
   1d640:	b580      	push	{r7, lr}
   1d642:	b088      	sub	sp, #32
   1d644:	af00      	add	r7, sp, #0
   1d646:	60f8      	str	r0, [r7, #12]
   1d648:	60b9      	str	r1, [r7, #8]
   1d64a:	0019      	movs	r1, r3
   1d64c:	1dfb      	adds	r3, r7, #7
   1d64e:	701a      	strb	r2, [r3, #0]
   1d650:	1dbb      	adds	r3, r7, #6
   1d652:	1c0a      	adds	r2, r1, #0
   1d654:	701a      	strb	r2, [r3, #0]
	MQTTHeader header = {0};
   1d656:	2300      	movs	r3, #0
   1d658:	61bb      	str	r3, [r7, #24]
	int rc = 0;
   1d65a:	2300      	movs	r3, #0
   1d65c:	61fb      	str	r3, [r7, #28]
	unsigned char *ptr = buf;
   1d65e:	68fb      	ldr	r3, [r7, #12]
   1d660:	617b      	str	r3, [r7, #20]

	FUNC_ENTRY;
	if (buflen < 4)
   1d662:	68bb      	ldr	r3, [r7, #8]
   1d664:	2b03      	cmp	r3, #3
   1d666:	dc03      	bgt.n	1d670 <MQTTSerialize_ack+0x30>
	{
		rc = MQTTPACKET_BUFFER_TOO_SHORT;
   1d668:	2302      	movs	r3, #2
   1d66a:	425b      	negs	r3, r3
   1d66c:	61fb      	str	r3, [r7, #28]
		goto exit;
   1d66e:	e055      	b.n	1d71c <MQTTSerialize_ack+0xdc>
	}
	header.bits.type = packettype;
   1d670:	1dfb      	adds	r3, r7, #7
   1d672:	781b      	ldrb	r3, [r3, #0]
   1d674:	220f      	movs	r2, #15
   1d676:	4013      	ands	r3, r2
   1d678:	b2da      	uxtb	r2, r3
   1d67a:	2318      	movs	r3, #24
   1d67c:	18fb      	adds	r3, r7, r3
   1d67e:	0110      	lsls	r0, r2, #4
   1d680:	781a      	ldrb	r2, [r3, #0]
   1d682:	210f      	movs	r1, #15
   1d684:	400a      	ands	r2, r1
   1d686:	1c11      	adds	r1, r2, #0
   1d688:	1c02      	adds	r2, r0, #0
   1d68a:	430a      	orrs	r2, r1
   1d68c:	701a      	strb	r2, [r3, #0]
	header.bits.dup = dup;
   1d68e:	1dbb      	adds	r3, r7, #6
   1d690:	781b      	ldrb	r3, [r3, #0]
   1d692:	2201      	movs	r2, #1
   1d694:	4013      	ands	r3, r2
   1d696:	b2da      	uxtb	r2, r3
   1d698:	2318      	movs	r3, #24
   1d69a:	18fb      	adds	r3, r7, r3
   1d69c:	2101      	movs	r1, #1
   1d69e:	400a      	ands	r2, r1
   1d6a0:	00d0      	lsls	r0, r2, #3
   1d6a2:	781a      	ldrb	r2, [r3, #0]
   1d6a4:	2108      	movs	r1, #8
   1d6a6:	438a      	bics	r2, r1
   1d6a8:	1c11      	adds	r1, r2, #0
   1d6aa:	1c02      	adds	r2, r0, #0
   1d6ac:	430a      	orrs	r2, r1
   1d6ae:	701a      	strb	r2, [r3, #0]
	header.bits.qos = (packettype == PUBREL) ? 1 : 0;
   1d6b0:	1dfb      	adds	r3, r7, #7
   1d6b2:	781b      	ldrb	r3, [r3, #0]
   1d6b4:	3b06      	subs	r3, #6
   1d6b6:	425a      	negs	r2, r3
   1d6b8:	4153      	adcs	r3, r2
   1d6ba:	b2db      	uxtb	r3, r3
   1d6bc:	1c1a      	adds	r2, r3, #0
   1d6be:	2303      	movs	r3, #3
   1d6c0:	4013      	ands	r3, r2
   1d6c2:	b2da      	uxtb	r2, r3
   1d6c4:	2318      	movs	r3, #24
   1d6c6:	18fb      	adds	r3, r7, r3
   1d6c8:	2103      	movs	r1, #3
   1d6ca:	400a      	ands	r2, r1
   1d6cc:	1890      	adds	r0, r2, r2
   1d6ce:	781a      	ldrb	r2, [r3, #0]
   1d6d0:	2106      	movs	r1, #6
   1d6d2:	438a      	bics	r2, r1
   1d6d4:	1c11      	adds	r1, r2, #0
   1d6d6:	1c02      	adds	r2, r0, #0
   1d6d8:	430a      	orrs	r2, r1
   1d6da:	701a      	strb	r2, [r3, #0]
	writeChar(&ptr, header.byte); /* write header */
   1d6dc:	2318      	movs	r3, #24
   1d6de:	18fb      	adds	r3, r7, r3
   1d6e0:	781a      	ldrb	r2, [r3, #0]
   1d6e2:	2314      	movs	r3, #20
   1d6e4:	18fb      	adds	r3, r7, r3
   1d6e6:	0011      	movs	r1, r2
   1d6e8:	0018      	movs	r0, r3
   1d6ea:	4b0f      	ldr	r3, [pc, #60]	; (1d728 <MQTTSerialize_ack+0xe8>)
   1d6ec:	4798      	blx	r3

	ptr += MQTTPacket_encode(ptr, 2); /* write remaining length */
   1d6ee:	697b      	ldr	r3, [r7, #20]
   1d6f0:	2102      	movs	r1, #2
   1d6f2:	0018      	movs	r0, r3
   1d6f4:	4b0d      	ldr	r3, [pc, #52]	; (1d72c <MQTTSerialize_ack+0xec>)
   1d6f6:	4798      	blx	r3
   1d6f8:	0002      	movs	r2, r0
   1d6fa:	697b      	ldr	r3, [r7, #20]
   1d6fc:	189b      	adds	r3, r3, r2
   1d6fe:	617b      	str	r3, [r7, #20]
	writeInt(&ptr, packetid);
   1d700:	2328      	movs	r3, #40	; 0x28
   1d702:	18fb      	adds	r3, r7, r3
   1d704:	881a      	ldrh	r2, [r3, #0]
   1d706:	2314      	movs	r3, #20
   1d708:	18fb      	adds	r3, r7, r3
   1d70a:	0011      	movs	r1, r2
   1d70c:	0018      	movs	r0, r3
   1d70e:	4b08      	ldr	r3, [pc, #32]	; (1d730 <MQTTSerialize_ack+0xf0>)
   1d710:	4798      	blx	r3
	rc = ptr - buf;
   1d712:	697b      	ldr	r3, [r7, #20]
   1d714:	001a      	movs	r2, r3
   1d716:	68fb      	ldr	r3, [r7, #12]
   1d718:	1ad3      	subs	r3, r2, r3
   1d71a:	61fb      	str	r3, [r7, #28]
exit:
	FUNC_EXIT_RC(rc);
	return rc;
   1d71c:	69fb      	ldr	r3, [r7, #28]
}
   1d71e:	0018      	movs	r0, r3
   1d720:	46bd      	mov	sp, r7
   1d722:	b008      	add	sp, #32
   1d724:	bd80      	pop	{r7, pc}
   1d726:	46c0      	nop			; (mov r8, r8)
   1d728:	0001d21b 	.word	0x0001d21b
   1d72c:	0001d001 	.word	0x0001d001
   1d730:	0001d245 	.word	0x0001d245

0001d734 <MQTTSerialize_subscribeLength>:
  * @param count the number of topic filter strings in topicFilters
  * @param topicFilters the array of topic filter strings to be used in the publish
  * @return the length of buffer needed to contain the serialized version of the packet
  */
int MQTTSerialize_subscribeLength(int count, MQTTString topicFilters[])
{
   1d734:	b580      	push	{r7, lr}
   1d736:	b084      	sub	sp, #16
   1d738:	af00      	add	r7, sp, #0
   1d73a:	6078      	str	r0, [r7, #4]
   1d73c:	6039      	str	r1, [r7, #0]
	int i;
	int len = 2; /* packetid */
   1d73e:	2302      	movs	r3, #2
   1d740:	60bb      	str	r3, [r7, #8]

	for (i = 0; i < count; ++i)
   1d742:	2300      	movs	r3, #0
   1d744:	60fb      	str	r3, [r7, #12]
   1d746:	e014      	b.n	1d772 <MQTTSerialize_subscribeLength+0x3e>
		len += 2 + MQTTstrlen(topicFilters[i]) + 1; /* length + topic + req_qos */
   1d748:	68fa      	ldr	r2, [r7, #12]
   1d74a:	0013      	movs	r3, r2
   1d74c:	005b      	lsls	r3, r3, #1
   1d74e:	189b      	adds	r3, r3, r2
   1d750:	009b      	lsls	r3, r3, #2
   1d752:	001a      	movs	r2, r3
   1d754:	683b      	ldr	r3, [r7, #0]
   1d756:	189b      	adds	r3, r3, r2
   1d758:	6818      	ldr	r0, [r3, #0]
   1d75a:	6859      	ldr	r1, [r3, #4]
   1d75c:	689a      	ldr	r2, [r3, #8]
   1d75e:	4b09      	ldr	r3, [pc, #36]	; (1d784 <MQTTSerialize_subscribeLength+0x50>)
   1d760:	4798      	blx	r3
   1d762:	0003      	movs	r3, r0
   1d764:	3303      	adds	r3, #3
   1d766:	68ba      	ldr	r2, [r7, #8]
   1d768:	18d3      	adds	r3, r2, r3
   1d76a:	60bb      	str	r3, [r7, #8]
	for (i = 0; i < count; ++i)
   1d76c:	68fb      	ldr	r3, [r7, #12]
   1d76e:	3301      	adds	r3, #1
   1d770:	60fb      	str	r3, [r7, #12]
   1d772:	68fa      	ldr	r2, [r7, #12]
   1d774:	687b      	ldr	r3, [r7, #4]
   1d776:	429a      	cmp	r2, r3
   1d778:	dbe6      	blt.n	1d748 <MQTTSerialize_subscribeLength+0x14>
	return len;
   1d77a:	68bb      	ldr	r3, [r7, #8]
}
   1d77c:	0018      	movs	r0, r3
   1d77e:	46bd      	mov	sp, r7
   1d780:	b004      	add	sp, #16
   1d782:	bd80      	pop	{r7, pc}
   1d784:	0001d3d5 	.word	0x0001d3d5

0001d788 <MQTTSerialize_subscribe>:
  * @param requestedQoSs - array of requested QoS
  * @return the length of the serialized data.  <= 0 indicates error
  */
int MQTTSerialize_subscribe(unsigned char* buf, int buflen, unsigned char dup, unsigned short packetid, int count,
		MQTTString topicFilters[], int requestedQoSs[])
{
   1d788:	b590      	push	{r4, r7, lr}
   1d78a:	b08b      	sub	sp, #44	; 0x2c
   1d78c:	af00      	add	r7, sp, #0
   1d78e:	60f8      	str	r0, [r7, #12]
   1d790:	60b9      	str	r1, [r7, #8]
   1d792:	0019      	movs	r1, r3
   1d794:	1dfb      	adds	r3, r7, #7
   1d796:	701a      	strb	r2, [r3, #0]
   1d798:	1d3b      	adds	r3, r7, #4
   1d79a:	1c0a      	adds	r2, r1, #0
   1d79c:	801a      	strh	r2, [r3, #0]
	unsigned char *ptr = buf;
   1d79e:	68fb      	ldr	r3, [r7, #12]
   1d7a0:	61bb      	str	r3, [r7, #24]
	MQTTHeader header = {0};
   1d7a2:	2300      	movs	r3, #0
   1d7a4:	617b      	str	r3, [r7, #20]
	int rem_len = 0;
   1d7a6:	2300      	movs	r3, #0
   1d7a8:	61fb      	str	r3, [r7, #28]
	int rc = 0;
   1d7aa:	2300      	movs	r3, #0
   1d7ac:	627b      	str	r3, [r7, #36]	; 0x24
	int i = 0;
   1d7ae:	2300      	movs	r3, #0
   1d7b0:	623b      	str	r3, [r7, #32]

	FUNC_ENTRY;
	if (MQTTPacket_len(rem_len = MQTTSerialize_subscribeLength(count, topicFilters)) > buflen)
   1d7b2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
   1d7b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   1d7b6:	0011      	movs	r1, r2
   1d7b8:	0018      	movs	r0, r3
   1d7ba:	4b41      	ldr	r3, [pc, #260]	; (1d8c0 <MQTTSerialize_subscribe+0x138>)
   1d7bc:	4798      	blx	r3
   1d7be:	0003      	movs	r3, r0
   1d7c0:	61fb      	str	r3, [r7, #28]
   1d7c2:	69fb      	ldr	r3, [r7, #28]
   1d7c4:	0018      	movs	r0, r3
   1d7c6:	4b3f      	ldr	r3, [pc, #252]	; (1d8c4 <MQTTSerialize_subscribe+0x13c>)
   1d7c8:	4798      	blx	r3
   1d7ca:	0002      	movs	r2, r0
   1d7cc:	68bb      	ldr	r3, [r7, #8]
   1d7ce:	429a      	cmp	r2, r3
   1d7d0:	dd03      	ble.n	1d7da <MQTTSerialize_subscribe+0x52>
	{
		rc = MQTTPACKET_BUFFER_TOO_SHORT;
   1d7d2:	2302      	movs	r3, #2
   1d7d4:	425b      	negs	r3, r3
   1d7d6:	627b      	str	r3, [r7, #36]	; 0x24
		goto exit;
   1d7d8:	e06c      	b.n	1d8b4 <MQTTSerialize_subscribe+0x12c>
	}

	header.byte = 0;
   1d7da:	2314      	movs	r3, #20
   1d7dc:	18fb      	adds	r3, r7, r3
   1d7de:	2200      	movs	r2, #0
   1d7e0:	701a      	strb	r2, [r3, #0]
	header.bits.type = SUBSCRIBE;
   1d7e2:	2314      	movs	r3, #20
   1d7e4:	18fb      	adds	r3, r7, r3
   1d7e6:	781a      	ldrb	r2, [r3, #0]
   1d7e8:	210f      	movs	r1, #15
   1d7ea:	400a      	ands	r2, r1
   1d7ec:	1c11      	adds	r1, r2, #0
   1d7ee:	2280      	movs	r2, #128	; 0x80
   1d7f0:	4252      	negs	r2, r2
   1d7f2:	430a      	orrs	r2, r1
   1d7f4:	701a      	strb	r2, [r3, #0]
	header.bits.dup = dup;
   1d7f6:	1dfb      	adds	r3, r7, #7
   1d7f8:	781b      	ldrb	r3, [r3, #0]
   1d7fa:	2201      	movs	r2, #1
   1d7fc:	4013      	ands	r3, r2
   1d7fe:	b2da      	uxtb	r2, r3
   1d800:	2314      	movs	r3, #20
   1d802:	18fb      	adds	r3, r7, r3
   1d804:	2101      	movs	r1, #1
   1d806:	400a      	ands	r2, r1
   1d808:	00d0      	lsls	r0, r2, #3
   1d80a:	781a      	ldrb	r2, [r3, #0]
   1d80c:	2108      	movs	r1, #8
   1d80e:	438a      	bics	r2, r1
   1d810:	1c11      	adds	r1, r2, #0
   1d812:	1c02      	adds	r2, r0, #0
   1d814:	430a      	orrs	r2, r1
   1d816:	701a      	strb	r2, [r3, #0]
	header.bits.qos = 1;
   1d818:	2314      	movs	r3, #20
   1d81a:	18fb      	adds	r3, r7, r3
   1d81c:	781a      	ldrb	r2, [r3, #0]
   1d81e:	2106      	movs	r1, #6
   1d820:	438a      	bics	r2, r1
   1d822:	1c11      	adds	r1, r2, #0
   1d824:	2202      	movs	r2, #2
   1d826:	430a      	orrs	r2, r1
   1d828:	701a      	strb	r2, [r3, #0]
	writeChar(&ptr, header.byte); /* write header */
   1d82a:	2314      	movs	r3, #20
   1d82c:	18fb      	adds	r3, r7, r3
   1d82e:	781a      	ldrb	r2, [r3, #0]
   1d830:	2318      	movs	r3, #24
   1d832:	18fb      	adds	r3, r7, r3
   1d834:	0011      	movs	r1, r2
   1d836:	0018      	movs	r0, r3
   1d838:	4b23      	ldr	r3, [pc, #140]	; (1d8c8 <MQTTSerialize_subscribe+0x140>)
   1d83a:	4798      	blx	r3

	ptr += MQTTPacket_encode(ptr, rem_len); /* write remaining length */;
   1d83c:	69bb      	ldr	r3, [r7, #24]
   1d83e:	69fa      	ldr	r2, [r7, #28]
   1d840:	0011      	movs	r1, r2
   1d842:	0018      	movs	r0, r3
   1d844:	4b21      	ldr	r3, [pc, #132]	; (1d8cc <MQTTSerialize_subscribe+0x144>)
   1d846:	4798      	blx	r3
   1d848:	0002      	movs	r2, r0
   1d84a:	69bb      	ldr	r3, [r7, #24]
   1d84c:	189b      	adds	r3, r3, r2
   1d84e:	61bb      	str	r3, [r7, #24]

	writeInt(&ptr, packetid);
   1d850:	1d3b      	adds	r3, r7, #4
   1d852:	881a      	ldrh	r2, [r3, #0]
   1d854:	2318      	movs	r3, #24
   1d856:	18fb      	adds	r3, r7, r3
   1d858:	0011      	movs	r1, r2
   1d85a:	0018      	movs	r0, r3
   1d85c:	4b1c      	ldr	r3, [pc, #112]	; (1d8d0 <MQTTSerialize_subscribe+0x148>)
   1d85e:	4798      	blx	r3

	for (i = 0; i < count; ++i)
   1d860:	2300      	movs	r3, #0
   1d862:	623b      	str	r3, [r7, #32]
   1d864:	e01d      	b.n	1d8a2 <MQTTSerialize_subscribe+0x11a>
	{
		writeMQTTString(&ptr, topicFilters[i]);
   1d866:	6a3a      	ldr	r2, [r7, #32]
   1d868:	0013      	movs	r3, r2
   1d86a:	005b      	lsls	r3, r3, #1
   1d86c:	189b      	adds	r3, r3, r2
   1d86e:	009b      	lsls	r3, r3, #2
   1d870:	001a      	movs	r2, r3
   1d872:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   1d874:	189b      	adds	r3, r3, r2
   1d876:	2218      	movs	r2, #24
   1d878:	18b8      	adds	r0, r7, r2
   1d87a:	6819      	ldr	r1, [r3, #0]
   1d87c:	685a      	ldr	r2, [r3, #4]
   1d87e:	689b      	ldr	r3, [r3, #8]
   1d880:	4c14      	ldr	r4, [pc, #80]	; (1d8d4 <MQTTSerialize_subscribe+0x14c>)
   1d882:	47a0      	blx	r4
		writeChar(&ptr, requestedQoSs[i]);
   1d884:	6a3b      	ldr	r3, [r7, #32]
   1d886:	009b      	lsls	r3, r3, #2
   1d888:	6c3a      	ldr	r2, [r7, #64]	; 0x40
   1d88a:	18d3      	adds	r3, r2, r3
   1d88c:	681b      	ldr	r3, [r3, #0]
   1d88e:	b2da      	uxtb	r2, r3
   1d890:	2318      	movs	r3, #24
   1d892:	18fb      	adds	r3, r7, r3
   1d894:	0011      	movs	r1, r2
   1d896:	0018      	movs	r0, r3
   1d898:	4b0b      	ldr	r3, [pc, #44]	; (1d8c8 <MQTTSerialize_subscribe+0x140>)
   1d89a:	4798      	blx	r3
	for (i = 0; i < count; ++i)
   1d89c:	6a3b      	ldr	r3, [r7, #32]
   1d89e:	3301      	adds	r3, #1
   1d8a0:	623b      	str	r3, [r7, #32]
   1d8a2:	6a3a      	ldr	r2, [r7, #32]
   1d8a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   1d8a6:	429a      	cmp	r2, r3
   1d8a8:	dbdd      	blt.n	1d866 <MQTTSerialize_subscribe+0xde>
	}

	rc = ptr - buf;
   1d8aa:	69bb      	ldr	r3, [r7, #24]
   1d8ac:	001a      	movs	r2, r3
   1d8ae:	68fb      	ldr	r3, [r7, #12]
   1d8b0:	1ad3      	subs	r3, r2, r3
   1d8b2:	627b      	str	r3, [r7, #36]	; 0x24
exit:
	FUNC_EXIT_RC(rc);
	return rc;
   1d8b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
   1d8b6:	0018      	movs	r0, r3
   1d8b8:	46bd      	mov	sp, r7
   1d8ba:	b00b      	add	sp, #44	; 0x2c
   1d8bc:	bd90      	pop	{r4, r7, pc}
   1d8be:	46c0      	nop			; (mov r8, r8)
   1d8c0:	0001d735 	.word	0x0001d735
   1d8c4:	0001d0f9 	.word	0x0001d0f9
   1d8c8:	0001d21b 	.word	0x0001d21b
   1d8cc:	0001d001 	.word	0x0001d001
   1d8d0:	0001d245 	.word	0x0001d245
   1d8d4:	0001d2ed 	.word	0x0001d2ed

0001d8d8 <MQTTDeserialize_suback>:
  * @param buf the raw buffer data, of the correct length determined by the remaining length field
  * @param buflen the length in bytes of the data in the supplied buffer
  * @return error code.  1 is success, 0 is failure
  */
int MQTTDeserialize_suback(unsigned short* packetid, int maxcount, int* count, int grantedQoSs[], unsigned char* buf, int buflen)
{
   1d8d8:	b590      	push	{r4, r7, lr}
   1d8da:	b08b      	sub	sp, #44	; 0x2c
   1d8dc:	af00      	add	r7, sp, #0
   1d8de:	60f8      	str	r0, [r7, #12]
   1d8e0:	60b9      	str	r1, [r7, #8]
   1d8e2:	607a      	str	r2, [r7, #4]
   1d8e4:	603b      	str	r3, [r7, #0]
	MQTTHeader header = {0};
   1d8e6:	2300      	movs	r3, #0
   1d8e8:	61fb      	str	r3, [r7, #28]
	unsigned char* curdata = buf;
   1d8ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   1d8ec:	61bb      	str	r3, [r7, #24]
	unsigned char* enddata = NULL;
   1d8ee:	2300      	movs	r3, #0
   1d8f0:	623b      	str	r3, [r7, #32]
	int rc = 0;
   1d8f2:	2300      	movs	r3, #0
   1d8f4:	627b      	str	r3, [r7, #36]	; 0x24
	int mylen;

	FUNC_ENTRY;
	header.byte = readChar(&curdata);
   1d8f6:	2318      	movs	r3, #24
   1d8f8:	18fb      	adds	r3, r7, r3
   1d8fa:	0018      	movs	r0, r3
   1d8fc:	4b2c      	ldr	r3, [pc, #176]	; (1d9b0 <MQTTDeserialize_suback+0xd8>)
   1d8fe:	4798      	blx	r3
   1d900:	0003      	movs	r3, r0
   1d902:	001a      	movs	r2, r3
   1d904:	231c      	movs	r3, #28
   1d906:	18fb      	adds	r3, r7, r3
   1d908:	701a      	strb	r2, [r3, #0]
	if (header.bits.type != SUBACK)
   1d90a:	231c      	movs	r3, #28
   1d90c:	18fb      	adds	r3, r7, r3
   1d90e:	781b      	ldrb	r3, [r3, #0]
   1d910:	220f      	movs	r2, #15
   1d912:	4393      	bics	r3, r2
   1d914:	b2db      	uxtb	r3, r3
   1d916:	2b90      	cmp	r3, #144	; 0x90
   1d918:	d142      	bne.n	1d9a0 <MQTTDeserialize_suback+0xc8>
		goto exit;

	curdata += (rc = MQTTPacket_decodeBuf(curdata, &mylen)); /* read remaining length */
   1d91a:	69bb      	ldr	r3, [r7, #24]
   1d91c:	2214      	movs	r2, #20
   1d91e:	18ba      	adds	r2, r7, r2
   1d920:	0011      	movs	r1, r2
   1d922:	0018      	movs	r0, r3
   1d924:	4b23      	ldr	r3, [pc, #140]	; (1d9b4 <MQTTDeserialize_suback+0xdc>)
   1d926:	4798      	blx	r3
   1d928:	0003      	movs	r3, r0
   1d92a:	627b      	str	r3, [r7, #36]	; 0x24
   1d92c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   1d92e:	69bb      	ldr	r3, [r7, #24]
   1d930:	189b      	adds	r3, r3, r2
   1d932:	61bb      	str	r3, [r7, #24]
	enddata = curdata + mylen;
   1d934:	69bb      	ldr	r3, [r7, #24]
   1d936:	697a      	ldr	r2, [r7, #20]
   1d938:	189b      	adds	r3, r3, r2
   1d93a:	623b      	str	r3, [r7, #32]
	if (enddata - curdata < 2)
   1d93c:	6a3b      	ldr	r3, [r7, #32]
   1d93e:	69ba      	ldr	r2, [r7, #24]
   1d940:	1a9b      	subs	r3, r3, r2
   1d942:	2b01      	cmp	r3, #1
   1d944:	dd2e      	ble.n	1d9a4 <MQTTDeserialize_suback+0xcc>
		goto exit;

	*packetid = readInt(&curdata);
   1d946:	2318      	movs	r3, #24
   1d948:	18fb      	adds	r3, r7, r3
   1d94a:	0018      	movs	r0, r3
   1d94c:	4b1a      	ldr	r3, [pc, #104]	; (1d9b8 <MQTTDeserialize_suback+0xe0>)
   1d94e:	4798      	blx	r3
   1d950:	0003      	movs	r3, r0
   1d952:	b29a      	uxth	r2, r3
   1d954:	68fb      	ldr	r3, [r7, #12]
   1d956:	801a      	strh	r2, [r3, #0]

	*count = 0;
   1d958:	687b      	ldr	r3, [r7, #4]
   1d95a:	2200      	movs	r2, #0
   1d95c:	601a      	str	r2, [r3, #0]
	while (curdata < enddata)
   1d95e:	e018      	b.n	1d992 <MQTTDeserialize_suback+0xba>
	{
		if (*count > maxcount)
   1d960:	687b      	ldr	r3, [r7, #4]
   1d962:	681a      	ldr	r2, [r3, #0]
   1d964:	68bb      	ldr	r3, [r7, #8]
   1d966:	429a      	cmp	r2, r3
   1d968:	dd03      	ble.n	1d972 <MQTTDeserialize_suback+0x9a>
		{
			rc = -1;
   1d96a:	2301      	movs	r3, #1
   1d96c:	425b      	negs	r3, r3
   1d96e:	627b      	str	r3, [r7, #36]	; 0x24
			goto exit;
   1d970:	e019      	b.n	1d9a6 <MQTTDeserialize_suback+0xce>
		}
		grantedQoSs[(*count)++] = readChar(&curdata);
   1d972:	687b      	ldr	r3, [r7, #4]
   1d974:	681a      	ldr	r2, [r3, #0]
   1d976:	1c51      	adds	r1, r2, #1
   1d978:	687b      	ldr	r3, [r7, #4]
   1d97a:	6019      	str	r1, [r3, #0]
   1d97c:	0013      	movs	r3, r2
   1d97e:	009b      	lsls	r3, r3, #2
   1d980:	683a      	ldr	r2, [r7, #0]
   1d982:	18d4      	adds	r4, r2, r3
   1d984:	2318      	movs	r3, #24
   1d986:	18fb      	adds	r3, r7, r3
   1d988:	0018      	movs	r0, r3
   1d98a:	4b09      	ldr	r3, [pc, #36]	; (1d9b0 <MQTTDeserialize_suback+0xd8>)
   1d98c:	4798      	blx	r3
   1d98e:	0003      	movs	r3, r0
   1d990:	6023      	str	r3, [r4, #0]
	while (curdata < enddata)
   1d992:	69ba      	ldr	r2, [r7, #24]
   1d994:	6a3b      	ldr	r3, [r7, #32]
   1d996:	429a      	cmp	r2, r3
   1d998:	d3e2      	bcc.n	1d960 <MQTTDeserialize_suback+0x88>
	}

	rc = 1;
   1d99a:	2301      	movs	r3, #1
   1d99c:	627b      	str	r3, [r7, #36]	; 0x24
   1d99e:	e002      	b.n	1d9a6 <MQTTDeserialize_suback+0xce>
		goto exit;
   1d9a0:	46c0      	nop			; (mov r8, r8)
   1d9a2:	e000      	b.n	1d9a6 <MQTTDeserialize_suback+0xce>
		goto exit;
   1d9a4:	46c0      	nop			; (mov r8, r8)
exit:
	FUNC_EXIT_RC(rc);
	return rc;
   1d9a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
   1d9a8:	0018      	movs	r0, r3
   1d9aa:	46bd      	mov	sp, r7
   1d9ac:	b00b      	add	sp, #44	; 0x2c
   1d9ae:	bd90      	pop	{r4, r7, pc}
   1d9b0:	0001d1ef 	.word	0x0001d1ef
   1d9b4:	0001d189 	.word	0x0001d189
   1d9b8:	0001d1bd 	.word	0x0001d1bd

0001d9bc <http_client_get_config_defaults>:
 * So it needed reference to HTTP client module instance.
 */
static struct http_client_module *module_ref_inst[TCP_SOCK_MAX] = {NULL,};

void http_client_get_config_defaults(struct http_client_config *const config)
{
   1d9bc:	b580      	push	{r7, lr}
   1d9be:	b082      	sub	sp, #8
   1d9c0:	af00      	add	r7, sp, #0
   1d9c2:	6078      	str	r0, [r7, #4]
	config->port = 80;
   1d9c4:	687b      	ldr	r3, [r7, #4]
   1d9c6:	2250      	movs	r2, #80	; 0x50
   1d9c8:	801a      	strh	r2, [r3, #0]
	config->tls = 0;
   1d9ca:	687b      	ldr	r3, [r7, #4]
   1d9cc:	2200      	movs	r2, #0
   1d9ce:	709a      	strb	r2, [r3, #2]
	config->timeout = 20000;
   1d9d0:	687b      	ldr	r3, [r7, #4]
   1d9d2:	4a0b      	ldr	r2, [pc, #44]	; (1da00 <http_client_get_config_defaults+0x44>)
   1d9d4:	811a      	strh	r2, [r3, #8]
	config->timer_inst = NULL;
   1d9d6:	687b      	ldr	r3, [r7, #4]
   1d9d8:	2200      	movs	r2, #0
   1d9da:	605a      	str	r2, [r3, #4]
	config->recv_buffer = NULL;
   1d9dc:	687b      	ldr	r3, [r7, #4]
   1d9de:	2200      	movs	r2, #0
   1d9e0:	60da      	str	r2, [r3, #12]
	config->recv_buffer_size = 256;
   1d9e2:	687b      	ldr	r3, [r7, #4]
   1d9e4:	2280      	movs	r2, #128	; 0x80
   1d9e6:	0052      	lsls	r2, r2, #1
   1d9e8:	611a      	str	r2, [r3, #16]
	config->send_buffer_size = MIN_SEND_BUFFER_SIZE;
   1d9ea:	687b      	ldr	r3, [r7, #4]
   1d9ec:	2252      	movs	r2, #82	; 0x52
   1d9ee:	615a      	str	r2, [r3, #20]
	config->user_agent = DEFAULT_USER_AGENT;
   1d9f0:	687b      	ldr	r3, [r7, #4]
   1d9f2:	4a04      	ldr	r2, [pc, #16]	; (1da04 <http_client_get_config_defaults+0x48>)
   1d9f4:	619a      	str	r2, [r3, #24]
}
   1d9f6:	46c0      	nop			; (mov r8, r8)
   1d9f8:	46bd      	mov	sp, r7
   1d9fa:	b002      	add	sp, #8
   1d9fc:	bd80      	pop	{r7, pc}
   1d9fe:	46c0      	nop			; (mov r8, r8)
   1da00:	00004e20 	.word	0x00004e20
   1da04:	00026760 	.word	0x00026760

0001da08 <http_client_init>:

int http_client_init(struct http_client_module *const module, struct http_client_config *config)
{
   1da08:	b590      	push	{r4, r7, lr}
   1da0a:	b083      	sub	sp, #12
   1da0c:	af00      	add	r7, sp, #0
   1da0e:	6078      	str	r0, [r7, #4]
   1da10:	6039      	str	r1, [r7, #0]
	/* Checks the parameters. */
	if (module == NULL || config == NULL) {
   1da12:	687b      	ldr	r3, [r7, #4]
   1da14:	2b00      	cmp	r3, #0
   1da16:	d002      	beq.n	1da1e <http_client_init+0x16>
   1da18:	683b      	ldr	r3, [r7, #0]
   1da1a:	2b00      	cmp	r3, #0
   1da1c:	d102      	bne.n	1da24 <http_client_init+0x1c>
		return -EINVAL;
   1da1e:	2316      	movs	r3, #22
   1da20:	425b      	negs	r3, r3
   1da22:	e058      	b.n	1dad6 <http_client_init+0xce>
	}

	if (config->recv_buffer_size == 0) {
   1da24:	683b      	ldr	r3, [r7, #0]
   1da26:	691b      	ldr	r3, [r3, #16]
   1da28:	2b00      	cmp	r3, #0
   1da2a:	d102      	bne.n	1da32 <http_client_init+0x2a>
		return -EINVAL;
   1da2c:	2316      	movs	r3, #22
   1da2e:	425b      	negs	r3, r3
   1da30:	e051      	b.n	1dad6 <http_client_init+0xce>
	}

	if (config->timer_inst == NULL) {
   1da32:	683b      	ldr	r3, [r7, #0]
   1da34:	685b      	ldr	r3, [r3, #4]
   1da36:	2b00      	cmp	r3, #0
   1da38:	d102      	bne.n	1da40 <http_client_init+0x38>
		return -EINVAL;
   1da3a:	2316      	movs	r3, #22
   1da3c:	425b      	negs	r3, r3
   1da3e:	e04a      	b.n	1dad6 <http_client_init+0xce>
	}

	if (config->send_buffer_size < MIN_SEND_BUFFER_SIZE) {
   1da40:	683b      	ldr	r3, [r7, #0]
   1da42:	695b      	ldr	r3, [r3, #20]
   1da44:	2b51      	cmp	r3, #81	; 0x51
   1da46:	d802      	bhi.n	1da4e <http_client_init+0x46>
		return -EINVAL;
   1da48:	2316      	movs	r3, #22
   1da4a:	425b      	negs	r3, r3
   1da4c:	e043      	b.n	1dad6 <http_client_init+0xce>
	}

	memset(module, 0, sizeof(struct http_client_module));
   1da4e:	687b      	ldr	r3, [r7, #4]
   1da50:	22e8      	movs	r2, #232	; 0xe8
   1da52:	2100      	movs	r1, #0
   1da54:	0018      	movs	r0, r3
   1da56:	4b22      	ldr	r3, [pc, #136]	; (1dae0 <http_client_init+0xd8>)
   1da58:	4798      	blx	r3
	memcpy(&module->config, config, sizeof(struct http_client_config));
   1da5a:	687b      	ldr	r3, [r7, #4]
   1da5c:	3350      	adds	r3, #80	; 0x50
   1da5e:	6839      	ldr	r1, [r7, #0]
   1da60:	221c      	movs	r2, #28
   1da62:	0018      	movs	r0, r3
   1da64:	4b1f      	ldr	r3, [pc, #124]	; (1dae4 <http_client_init+0xdc>)
   1da66:	4798      	blx	r3

	/* Allocate the buffer in the heap. */
	if (module->config.recv_buffer == NULL) {
   1da68:	687b      	ldr	r3, [r7, #4]
   1da6a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
   1da6c:	2b00      	cmp	r3, #0
   1da6e:	d115      	bne.n	1da9c <http_client_init+0x94>
		module->config.recv_buffer = malloc(config->recv_buffer_size);
   1da70:	683b      	ldr	r3, [r7, #0]
   1da72:	691b      	ldr	r3, [r3, #16]
   1da74:	0018      	movs	r0, r3
   1da76:	4b1c      	ldr	r3, [pc, #112]	; (1dae8 <http_client_init+0xe0>)
   1da78:	4798      	blx	r3
   1da7a:	0003      	movs	r3, r0
   1da7c:	001a      	movs	r2, r3
   1da7e:	687b      	ldr	r3, [r7, #4]
   1da80:	65da      	str	r2, [r3, #92]	; 0x5c
		if (module->config.recv_buffer == NULL) {
   1da82:	687b      	ldr	r3, [r7, #4]
   1da84:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
   1da86:	2b00      	cmp	r3, #0
   1da88:	d102      	bne.n	1da90 <http_client_init+0x88>
			return -ENOMEM;
   1da8a:	230c      	movs	r3, #12
   1da8c:	425b      	negs	r3, r3
   1da8e:	e022      	b.n	1dad6 <http_client_init+0xce>
		}
		module->alloc_buffer = 1;
   1da90:	687b      	ldr	r3, [r7, #4]
   1da92:	2241      	movs	r2, #65	; 0x41
   1da94:	5c99      	ldrb	r1, [r3, r2]
   1da96:	2004      	movs	r0, #4
   1da98:	4301      	orrs	r1, r0
   1da9a:	5499      	strb	r1, [r3, r2]
	}

	if (config->timeout > 0) {
   1da9c:	683b      	ldr	r3, [r7, #0]
   1da9e:	891b      	ldrh	r3, [r3, #8]
   1daa0:	2b00      	cmp	r3, #0
   1daa2:	d010      	beq.n	1dac6 <http_client_init+0xbe>
		/* Enable the timer. */
		module->timer_id = sw_timer_register_callback(config->timer_inst, http_client_timer_callback, (void *)module, 0);
   1daa4:	683b      	ldr	r3, [r7, #0]
   1daa6:	6858      	ldr	r0, [r3, #4]
   1daa8:	687a      	ldr	r2, [r7, #4]
   1daaa:	4910      	ldr	r1, [pc, #64]	; (1daec <http_client_init+0xe4>)
   1daac:	2300      	movs	r3, #0
   1daae:	4c10      	ldr	r4, [pc, #64]	; (1daf0 <http_client_init+0xe8>)
   1dab0:	47a0      	blx	r4
   1dab2:	0002      	movs	r2, r0
   1dab4:	687b      	ldr	r3, [r7, #4]
   1dab6:	649a      	str	r2, [r3, #72]	; 0x48

		if (module->timer_id < 0) {
   1dab8:	687b      	ldr	r3, [r7, #4]
   1daba:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   1dabc:	2b00      	cmp	r3, #0
   1dabe:	da02      	bge.n	1dac6 <http_client_init+0xbe>
			return -ENOSPC;
   1dac0:	231c      	movs	r3, #28
   1dac2:	425b      	negs	r3, r3
   1dac4:	e007      	b.n	1dad6 <http_client_init+0xce>
		}
	}

	module->req.state = STATE_INIT;
   1dac6:	687b      	ldr	r3, [r7, #4]
   1dac8:	2200      	movs	r2, #0
   1daca:	66da      	str	r2, [r3, #108]	; 0x6c
	module->resp.state = STATE_PARSE_HEADER;
   1dacc:	687b      	ldr	r3, [r7, #4]
   1dace:	22d8      	movs	r2, #216	; 0xd8
   1dad0:	2100      	movs	r1, #0
   1dad2:	5099      	str	r1, [r3, r2]

	return 0;
   1dad4:	2300      	movs	r3, #0
}
   1dad6:	0018      	movs	r0, r3
   1dad8:	46bd      	mov	sp, r7
   1dada:	b003      	add	sp, #12
   1dadc:	bd90      	pop	{r4, r7, pc}
   1dade:	46c0      	nop			; (mov r8, r8)
   1dae0:	0002181b 	.word	0x0002181b
   1dae4:	000217e5 	.word	0x000217e5
   1dae8:	000217bd 	.word	0x000217bd
   1daec:	0001ddb9 	.word	0x0001ddb9
   1daf0:	0001f45d 	.word	0x0001f45d

0001daf4 <http_client_register_callback>:

	return 0;
}

int http_client_register_callback(struct http_client_module *const module, http_client_callback_t callback)
{
   1daf4:	b580      	push	{r7, lr}
   1daf6:	b082      	sub	sp, #8
   1daf8:	af00      	add	r7, sp, #0
   1dafa:	6078      	str	r0, [r7, #4]
   1dafc:	6039      	str	r1, [r7, #0]
	/* Checks the parameters. */
	if (module == NULL) {
   1dafe:	687b      	ldr	r3, [r7, #4]
   1db00:	2b00      	cmp	r3, #0
   1db02:	d102      	bne.n	1db0a <http_client_register_callback+0x16>
		return -EINVAL;
   1db04:	2316      	movs	r3, #22
   1db06:	425b      	negs	r3, r3
   1db08:	e003      	b.n	1db12 <http_client_register_callback+0x1e>
	}

	module->cb = callback;
   1db0a:	687b      	ldr	r3, [r7, #4]
   1db0c:	683a      	ldr	r2, [r7, #0]
   1db0e:	64da      	str	r2, [r3, #76]	; 0x4c

	return 0;
   1db10:	2300      	movs	r3, #0
}
   1db12:	0018      	movs	r0, r3
   1db14:	46bd      	mov	sp, r7
   1db16:	b002      	add	sp, #8
   1db18:	bd80      	pop	{r7, pc}
	...

0001db1c <_hwerr_to_stderr>:

/**
 * \brief change HW error type to standard error.
 */
static inline int _hwerr_to_stderr(int err)
{
   1db1c:	b580      	push	{r7, lr}
   1db1e:	b082      	sub	sp, #8
   1db20:	af00      	add	r7, sp, #0
   1db22:	6078      	str	r0, [r7, #4]
	switch (err) {
   1db24:	687b      	ldr	r3, [r7, #4]
   1db26:	330e      	adds	r3, #14
   1db28:	2b0e      	cmp	r3, #14
   1db2a:	d825      	bhi.n	1db78 <_hwerr_to_stderr+0x5c>
   1db2c:	009a      	lsls	r2, r3, #2
   1db2e:	4b18      	ldr	r3, [pc, #96]	; (1db90 <_hwerr_to_stderr+0x74>)
   1db30:	18d3      	adds	r3, r2, r3
   1db32:	681b      	ldr	r3, [r3, #0]
   1db34:	469f      	mov	pc, r3
		case 0:
			return -EIO;
   1db36:	2305      	movs	r3, #5
   1db38:	425b      	negs	r3, r3
   1db3a:	e024      	b.n	1db86 <_hwerr_to_stderr+0x6a>
		case SOCK_ERR_INVALID_ADDRESS:
			return -ENOENT;
   1db3c:	2302      	movs	r3, #2
   1db3e:	425b      	negs	r3, r3
   1db40:	e021      	b.n	1db86 <_hwerr_to_stderr+0x6a>
		case SOCK_ERR_ADDR_ALREADY_IN_USE:
			return -EADDRINUSE;
   1db42:	2370      	movs	r3, #112	; 0x70
   1db44:	425b      	negs	r3, r3
   1db46:	e01e      	b.n	1db86 <_hwerr_to_stderr+0x6a>
		case SOCK_ERR_MAX_TCP_SOCK:
		case SOCK_ERR_MAX_UDP_SOCK:
			return -ENOMEM;
   1db48:	230c      	movs	r3, #12
   1db4a:	425b      	negs	r3, r3
   1db4c:	e01b      	b.n	1db86 <_hwerr_to_stderr+0x6a>
		case SOCK_ERR_INVALID_ARG:
			return -EINVAL;
   1db4e:	2316      	movs	r3, #22
   1db50:	425b      	negs	r3, r3
   1db52:	e018      	b.n	1db86 <_hwerr_to_stderr+0x6a>
		case SOCK_ERR_MAX_LISTEN_SOCK:
			return -ENOMEM;
   1db54:	230c      	movs	r3, #12
   1db56:	425b      	negs	r3, r3
   1db58:	e015      	b.n	1db86 <_hwerr_to_stderr+0x6a>
		case SOCK_ERR_INVALID:
			return -EIO;
   1db5a:	2305      	movs	r3, #5
   1db5c:	425b      	negs	r3, r3
   1db5e:	e012      	b.n	1db86 <_hwerr_to_stderr+0x6a>
		case SOCK_ERR_ADDR_IS_REQUIRED:
			return -EDESTADDRREQ;
   1db60:	2379      	movs	r3, #121	; 0x79
   1db62:	425b      	negs	r3, r3
   1db64:	e00f      	b.n	1db86 <_hwerr_to_stderr+0x6a>
		case SOCK_ERR_CONN_ABORTED:
			return -ECONNRESET;
   1db66:	2368      	movs	r3, #104	; 0x68
   1db68:	425b      	negs	r3, r3
   1db6a:	e00c      	b.n	1db86 <_hwerr_to_stderr+0x6a>
		case SOCK_ERR_TIMEOUT:
			return -EAGAIN;
   1db6c:	230b      	movs	r3, #11
   1db6e:	425b      	negs	r3, r3
   1db70:	e009      	b.n	1db86 <_hwerr_to_stderr+0x6a>
		case SOCK_ERR_BUFFER_FULL:
			return -EBUSY; /* HW error occurred. Retry it*/
   1db72:	2310      	movs	r3, #16
   1db74:	425b      	negs	r3, r3
   1db76:	e006      	b.n	1db86 <_hwerr_to_stderr+0x6a>
		default:
			if (err < 0) {
   1db78:	687b      	ldr	r3, [r7, #4]
   1db7a:	2b00      	cmp	r3, #0
   1db7c:	da02      	bge.n	1db84 <_hwerr_to_stderr+0x68>
				return -EIO;
   1db7e:	2305      	movs	r3, #5
   1db80:	425b      	negs	r3, r3
   1db82:	e000      	b.n	1db86 <_hwerr_to_stderr+0x6a>
			}
			return 0;
   1db84:	2300      	movs	r3, #0
	}
}
   1db86:	0018      	movs	r0, r3
   1db88:	46bd      	mov	sp, r7
   1db8a:	b002      	add	sp, #8
   1db8c:	bd80      	pop	{r7, pc}
   1db8e:	46c0      	nop			; (mov r8, r8)
   1db90:	0002689c 	.word	0x0002689c

0001db94 <http_client_socket_event_handler>:

void http_client_socket_event_handler(SOCKET sock, uint8_t msg_type, void *msg_data)
{
   1db94:	b580      	push	{r7, lr}
   1db96:	b08a      	sub	sp, #40	; 0x28
   1db98:	af00      	add	r7, sp, #0
   1db9a:	603a      	str	r2, [r7, #0]
   1db9c:	1dfb      	adds	r3, r7, #7
   1db9e:	1c02      	adds	r2, r0, #0
   1dba0:	701a      	strb	r2, [r3, #0]
   1dba2:	1dbb      	adds	r3, r7, #6
   1dba4:	1c0a      	adds	r2, r1, #0
   1dba6:	701a      	strb	r2, [r3, #0]
	tstrSocketRecvMsg *msg_recv;
	int16_t send_ret;
	union http_client_data data;

	/* Find instance using the socket descriptor. */
	struct http_client_module *module = module_ref_inst[sock];
   1dba8:	1dfb      	adds	r3, r7, #7
   1dbaa:	2200      	movs	r2, #0
   1dbac:	569a      	ldrsb	r2, [r3, r2]
   1dbae:	4b4b      	ldr	r3, [pc, #300]	; (1dcdc <http_client_socket_event_handler+0x148>)
   1dbb0:	0092      	lsls	r2, r2, #2
   1dbb2:	58d3      	ldr	r3, [r2, r3]
   1dbb4:	627b      	str	r3, [r7, #36]	; 0x24
	/* If cannot found reference, This socket is not HTTP client socket. */
	if (module == NULL) {
   1dbb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1dbb8:	2b00      	cmp	r3, #0
   1dbba:	d100      	bne.n	1dbbe <http_client_socket_event_handler+0x2a>
   1dbbc:	e08a      	b.n	1dcd4 <http_client_socket_event_handler+0x140>
		return;
	}

	switch (msg_type) {
   1dbbe:	1dbb      	adds	r3, r7, #6
   1dbc0:	781b      	ldrb	r3, [r3, #0]
   1dbc2:	2b06      	cmp	r3, #6
   1dbc4:	d040      	beq.n	1dc48 <http_client_socket_event_handler+0xb4>
   1dbc6:	2b07      	cmp	r3, #7
   1dbc8:	d060      	beq.n	1dc8c <http_client_socket_event_handler+0xf8>
   1dbca:	2b05      	cmp	r3, #5
   1dbcc:	d000      	beq.n	1dbd0 <http_client_socket_event_handler+0x3c>
		}
		/* Disable sending flag. */
		module->sending = 0;
    	break;
	default:
		break;
   1dbce:	e082      	b.n	1dcd6 <http_client_socket_event_handler+0x142>
    	msg_connect = (tstrSocketConnectMsg*)msg_data;
   1dbd0:	683b      	ldr	r3, [r7, #0]
   1dbd2:	623b      	str	r3, [r7, #32]
    	data.sock_connected.result = msg_connect->s8Error;
   1dbd4:	6a3b      	ldr	r3, [r7, #32]
   1dbd6:	785b      	ldrb	r3, [r3, #1]
   1dbd8:	b25b      	sxtb	r3, r3
   1dbda:	001a      	movs	r2, r3
   1dbdc:	230c      	movs	r3, #12
   1dbde:	18fb      	adds	r3, r7, r3
   1dbe0:	601a      	str	r2, [r3, #0]
    	if (msg_connect->s8Error < 0) {
   1dbe2:	6a3b      	ldr	r3, [r7, #32]
   1dbe4:	785b      	ldrb	r3, [r3, #1]
   1dbe6:	b25b      	sxtb	r3, r3
   1dbe8:	2b00      	cmp	r3, #0
   1dbea:	da0c      	bge.n	1dc06 <http_client_socket_event_handler+0x72>
			_http_client_clear_conn(module, _hwerr_to_stderr(msg_connect->s8Error));
   1dbec:	6a3b      	ldr	r3, [r7, #32]
   1dbee:	785b      	ldrb	r3, [r3, #1]
   1dbf0:	b25b      	sxtb	r3, r3
   1dbf2:	0018      	movs	r0, r3
   1dbf4:	4b3a      	ldr	r3, [pc, #232]	; (1dce0 <http_client_socket_event_handler+0x14c>)
   1dbf6:	4798      	blx	r3
   1dbf8:	0002      	movs	r2, r0
   1dbfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1dbfc:	0011      	movs	r1, r2
   1dbfe:	0018      	movs	r0, r3
   1dc00:	4b38      	ldr	r3, [pc, #224]	; (1dce4 <http_client_socket_event_handler+0x150>)
   1dc02:	4798      	blx	r3
    	break;
   1dc04:	e067      	b.n	1dcd6 <http_client_socket_event_handler+0x142>
			if (module->cb != NULL) {
   1dc06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1dc08:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   1dc0a:	2b00      	cmp	r3, #0
   1dc0c:	d006      	beq.n	1dc1c <http_client_socket_event_handler+0x88>
				module->cb(module, HTTP_CLIENT_CALLBACK_SOCK_CONNECTED, &data);
   1dc0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1dc10:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   1dc12:	220c      	movs	r2, #12
   1dc14:	18ba      	adds	r2, r7, r2
   1dc16:	6a78      	ldr	r0, [r7, #36]	; 0x24
   1dc18:	2100      	movs	r1, #0
   1dc1a:	4798      	blx	r3
			module->req.state = STATE_REQ_SEND_HEADER;
   1dc1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1dc1e:	2203      	movs	r2, #3
   1dc20:	66da      	str	r2, [r3, #108]	; 0x6c
			sw_timer_enable_callback(module->config.timer_inst, module->timer_id, module->config.timeout);
   1dc22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1dc24:	6d58      	ldr	r0, [r3, #84]	; 0x54
   1dc26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1dc28:	6c99      	ldr	r1, [r3, #72]	; 0x48
   1dc2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1dc2c:	2258      	movs	r2, #88	; 0x58
   1dc2e:	5a9b      	ldrh	r3, [r3, r2]
   1dc30:	001a      	movs	r2, r3
   1dc32:	4b2d      	ldr	r3, [pc, #180]	; (1dce8 <http_client_socket_event_handler+0x154>)
   1dc34:	4798      	blx	r3
    		_http_client_recv_packet(module);
   1dc36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1dc38:	0018      	movs	r0, r3
   1dc3a:	4b2c      	ldr	r3, [pc, #176]	; (1dcec <http_client_socket_event_handler+0x158>)
   1dc3c:	4798      	blx	r3
			_http_client_request(module);
   1dc3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1dc40:	0018      	movs	r0, r3
   1dc42:	4b2b      	ldr	r3, [pc, #172]	; (1dcf0 <http_client_socket_event_handler+0x15c>)
   1dc44:	4798      	blx	r3
    	break;
   1dc46:	e046      	b.n	1dcd6 <http_client_socket_event_handler+0x142>
    	msg_recv = (tstrSocketRecvMsg*)msg_data;
   1dc48:	683b      	ldr	r3, [r7, #0]
   1dc4a:	61fb      	str	r3, [r7, #28]
    	if (msg_recv->s16BufferSize > 0) {
   1dc4c:	69fb      	ldr	r3, [r7, #28]
   1dc4e:	2204      	movs	r2, #4
   1dc50:	5e9b      	ldrsh	r3, [r3, r2]
   1dc52:	2b00      	cmp	r3, #0
   1dc54:	dd09      	ble.n	1dc6a <http_client_socket_event_handler+0xd6>
    		_http_client_recved_packet(module, msg_recv->s16BufferSize);
   1dc56:	69fb      	ldr	r3, [r7, #28]
   1dc58:	2204      	movs	r2, #4
   1dc5a:	5e9b      	ldrsh	r3, [r3, r2]
   1dc5c:	001a      	movs	r2, r3
   1dc5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1dc60:	0011      	movs	r1, r2
   1dc62:	0018      	movs	r0, r3
   1dc64:	4b23      	ldr	r3, [pc, #140]	; (1dcf4 <http_client_socket_event_handler+0x160>)
   1dc66:	4798      	blx	r3
   1dc68:	e00b      	b.n	1dc82 <http_client_socket_event_handler+0xee>
			_http_client_clear_conn(module, _hwerr_to_stderr(msg_recv->s16BufferSize));
   1dc6a:	69fb      	ldr	r3, [r7, #28]
   1dc6c:	2204      	movs	r2, #4
   1dc6e:	5e9b      	ldrsh	r3, [r3, r2]
   1dc70:	0018      	movs	r0, r3
   1dc72:	4b1b      	ldr	r3, [pc, #108]	; (1dce0 <http_client_socket_event_handler+0x14c>)
   1dc74:	4798      	blx	r3
   1dc76:	0002      	movs	r2, r0
   1dc78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1dc7a:	0011      	movs	r1, r2
   1dc7c:	0018      	movs	r0, r3
   1dc7e:	4b19      	ldr	r3, [pc, #100]	; (1dce4 <http_client_socket_event_handler+0x150>)
   1dc80:	4798      	blx	r3
		_http_client_recv_packet(module);
   1dc82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1dc84:	0018      	movs	r0, r3
   1dc86:	4b19      	ldr	r3, [pc, #100]	; (1dcec <http_client_socket_event_handler+0x158>)
   1dc88:	4798      	blx	r3
		break;
   1dc8a:	e024      	b.n	1dcd6 <http_client_socket_event_handler+0x142>
		send_ret = *(int16_t*)msg_data;
   1dc8c:	231a      	movs	r3, #26
   1dc8e:	18fb      	adds	r3, r7, r3
   1dc90:	683a      	ldr	r2, [r7, #0]
   1dc92:	8812      	ldrh	r2, [r2, #0]
   1dc94:	801a      	strh	r2, [r3, #0]
		if (send_ret < 0) {
   1dc96:	231a      	movs	r3, #26
   1dc98:	18fb      	adds	r3, r7, r3
   1dc9a:	2200      	movs	r2, #0
   1dc9c:	5e9b      	ldrsh	r3, [r3, r2]
   1dc9e:	2b00      	cmp	r3, #0
   1dca0:	da0d      	bge.n	1dcbe <http_client_socket_event_handler+0x12a>
			_http_client_clear_conn(module, _hwerr_to_stderr(send_ret));
   1dca2:	231a      	movs	r3, #26
   1dca4:	18fb      	adds	r3, r7, r3
   1dca6:	2200      	movs	r2, #0
   1dca8:	5e9b      	ldrsh	r3, [r3, r2]
   1dcaa:	0018      	movs	r0, r3
   1dcac:	4b0c      	ldr	r3, [pc, #48]	; (1dce0 <http_client_socket_event_handler+0x14c>)
   1dcae:	4798      	blx	r3
   1dcb0:	0002      	movs	r2, r0
   1dcb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1dcb4:	0011      	movs	r1, r2
   1dcb6:	0018      	movs	r0, r3
   1dcb8:	4b0a      	ldr	r3, [pc, #40]	; (1dce4 <http_client_socket_event_handler+0x150>)
   1dcba:	4798      	blx	r3
   1dcbc:	e003      	b.n	1dcc6 <http_client_socket_event_handler+0x132>
    		_http_client_request(module);
   1dcbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1dcc0:	0018      	movs	r0, r3
   1dcc2:	4b0b      	ldr	r3, [pc, #44]	; (1dcf0 <http_client_socket_event_handler+0x15c>)
   1dcc4:	4798      	blx	r3
		module->sending = 0;
   1dcc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1dcc8:	2241      	movs	r2, #65	; 0x41
   1dcca:	5c99      	ldrb	r1, [r3, r2]
   1dccc:	2001      	movs	r0, #1
   1dcce:	4381      	bics	r1, r0
   1dcd0:	5499      	strb	r1, [r3, r2]
    	break;
   1dcd2:	e000      	b.n	1dcd6 <http_client_socket_event_handler+0x142>
		return;
   1dcd4:	46c0      	nop			; (mov r8, r8)
	}

}
   1dcd6:	46bd      	mov	sp, r7
   1dcd8:	b00a      	add	sp, #40	; 0x28
   1dcda:	bd80      	pop	{r7, pc}
   1dcdc:	20004170 	.word	0x20004170
   1dce0:	0001db1d 	.word	0x0001db1d
   1dce4:	0001e191 	.word	0x0001e191
   1dce8:	0001f4ed 	.word	0x0001f4ed
   1dcec:	0001ea1d 	.word	0x0001ea1d
   1dcf0:	0001e2e5 	.word	0x0001e2e5
   1dcf4:	0001ea81 	.word	0x0001ea81

0001dcf8 <http_client_socket_resolve_handler>:

void http_client_socket_resolve_handler(uint8_t *doamin_name, uint32_t server_ip)
{
   1dcf8:	b580      	push	{r7, lr}
   1dcfa:	b088      	sub	sp, #32
   1dcfc:	af00      	add	r7, sp, #0
   1dcfe:	6078      	str	r0, [r7, #4]
   1dd00:	6039      	str	r1, [r7, #0]
	int i;
	struct http_client_module *module;
	struct sockaddr_in addr_in;

	for (i = 0; i < TCP_SOCK_MAX; i++) {
   1dd02:	2300      	movs	r3, #0
   1dd04:	61fb      	str	r3, [r7, #28]
   1dd06:	e048      	b.n	1dd9a <http_client_socket_resolve_handler+0xa2>
		if (module_ref_inst[i] != NULL) {
   1dd08:	4b27      	ldr	r3, [pc, #156]	; (1dda8 <http_client_socket_resolve_handler+0xb0>)
   1dd0a:	69fa      	ldr	r2, [r7, #28]
   1dd0c:	0092      	lsls	r2, r2, #2
   1dd0e:	58d3      	ldr	r3, [r2, r3]
   1dd10:	2b00      	cmp	r3, #0
   1dd12:	d03f      	beq.n	1dd94 <http_client_socket_resolve_handler+0x9c>
			module = module_ref_inst[i];
   1dd14:	4b24      	ldr	r3, [pc, #144]	; (1dda8 <http_client_socket_resolve_handler+0xb0>)
   1dd16:	69fa      	ldr	r2, [r7, #28]
   1dd18:	0092      	lsls	r2, r2, #2
   1dd1a:	58d3      	ldr	r3, [r2, r3]
   1dd1c:	61bb      	str	r3, [r7, #24]
			if (!strcmp((const char*)doamin_name, module->host) && module->req.state == STATE_TRY_SOCK_CONNECT) {
   1dd1e:	69bb      	ldr	r3, [r7, #24]
   1dd20:	1c5a      	adds	r2, r3, #1
   1dd22:	687b      	ldr	r3, [r7, #4]
   1dd24:	0011      	movs	r1, r2
   1dd26:	0018      	movs	r0, r3
   1dd28:	4b20      	ldr	r3, [pc, #128]	; (1ddac <http_client_socket_resolve_handler+0xb4>)
   1dd2a:	4798      	blx	r3
   1dd2c:	1e03      	subs	r3, r0, #0
   1dd2e:	d131      	bne.n	1dd94 <http_client_socket_resolve_handler+0x9c>
   1dd30:	69bb      	ldr	r3, [r7, #24]
   1dd32:	6edb      	ldr	r3, [r3, #108]	; 0x6c
   1dd34:	2b01      	cmp	r3, #1
   1dd36:	d12d      	bne.n	1dd94 <http_client_socket_resolve_handler+0x9c>
				if (server_ip == 0) { /* Host was not found or was not reachable. */ 
   1dd38:	683b      	ldr	r3, [r7, #0]
   1dd3a:	2b00      	cmp	r3, #0
   1dd3c:	d107      	bne.n	1dd4e <http_client_socket_resolve_handler+0x56>
					_http_client_clear_conn(module, -EHOSTUNREACH);
   1dd3e:	2376      	movs	r3, #118	; 0x76
   1dd40:	425a      	negs	r2, r3
   1dd42:	69bb      	ldr	r3, [r7, #24]
   1dd44:	0011      	movs	r1, r2
   1dd46:	0018      	movs	r0, r3
   1dd48:	4b19      	ldr	r3, [pc, #100]	; (1ddb0 <http_client_socket_resolve_handler+0xb8>)
   1dd4a:	4798      	blx	r3
					return;
   1dd4c:	e028      	b.n	1dda0 <http_client_socket_resolve_handler+0xa8>
				}
				addr_in.sin_family = AF_INET;
   1dd4e:	2308      	movs	r3, #8
   1dd50:	18fb      	adds	r3, r7, r3
   1dd52:	2202      	movs	r2, #2
   1dd54:	801a      	strh	r2, [r3, #0]
				addr_in.sin_port = _htons(module->config.port);
   1dd56:	69bb      	ldr	r3, [r7, #24]
   1dd58:	2250      	movs	r2, #80	; 0x50
   1dd5a:	5a9b      	ldrh	r3, [r3, r2]
   1dd5c:	021b      	lsls	r3, r3, #8
   1dd5e:	b21a      	sxth	r2, r3
   1dd60:	69bb      	ldr	r3, [r7, #24]
   1dd62:	2150      	movs	r1, #80	; 0x50
   1dd64:	5a5b      	ldrh	r3, [r3, r1]
   1dd66:	0a1b      	lsrs	r3, r3, #8
   1dd68:	b29b      	uxth	r3, r3
   1dd6a:	b21b      	sxth	r3, r3
   1dd6c:	4313      	orrs	r3, r2
   1dd6e:	b21b      	sxth	r3, r3
   1dd70:	b29a      	uxth	r2, r3
   1dd72:	2308      	movs	r3, #8
   1dd74:	18fb      	adds	r3, r7, r3
   1dd76:	805a      	strh	r2, [r3, #2]
				addr_in.sin_addr.s_addr = server_ip;
   1dd78:	2308      	movs	r3, #8
   1dd7a:	18fb      	adds	r3, r7, r3
   1dd7c:	683a      	ldr	r2, [r7, #0]
   1dd7e:	605a      	str	r2, [r3, #4]
				connect(module->sock, (struct sockaddr *)&addr_in, sizeof(struct sockaddr_in));
   1dd80:	69bb      	ldr	r3, [r7, #24]
   1dd82:	781b      	ldrb	r3, [r3, #0]
   1dd84:	b25b      	sxtb	r3, r3
   1dd86:	2208      	movs	r2, #8
   1dd88:	18b9      	adds	r1, r7, r2
   1dd8a:	2210      	movs	r2, #16
   1dd8c:	0018      	movs	r0, r3
   1dd8e:	4b09      	ldr	r3, [pc, #36]	; (1ddb4 <http_client_socket_resolve_handler+0xbc>)
   1dd90:	4798      	blx	r3
				return;
   1dd92:	e005      	b.n	1dda0 <http_client_socket_resolve_handler+0xa8>
	for (i = 0; i < TCP_SOCK_MAX; i++) {
   1dd94:	69fb      	ldr	r3, [r7, #28]
   1dd96:	3301      	adds	r3, #1
   1dd98:	61fb      	str	r3, [r7, #28]
   1dd9a:	69fb      	ldr	r3, [r7, #28]
   1dd9c:	2b06      	cmp	r3, #6
   1dd9e:	ddb3      	ble.n	1dd08 <http_client_socket_resolve_handler+0x10>
			}
		}
	}
}
   1dda0:	46bd      	mov	sp, r7
   1dda2:	b008      	add	sp, #32
   1dda4:	bd80      	pop	{r7, pc}
   1dda6:	46c0      	nop			; (mov r8, r8)
   1dda8:	20004170 	.word	0x20004170
   1ddac:	00021b73 	.word	0x00021b73
   1ddb0:	0001e191 	.word	0x0001e191
   1ddb4:	000126b5 	.word	0x000126b5

0001ddb8 <http_client_timer_callback>:

void http_client_timer_callback(struct sw_timer_module *const module, int timer_id, void *context, int period)
{
   1ddb8:	b580      	push	{r7, lr}
   1ddba:	b086      	sub	sp, #24
   1ddbc:	af00      	add	r7, sp, #0
   1ddbe:	60f8      	str	r0, [r7, #12]
   1ddc0:	60b9      	str	r1, [r7, #8]
   1ddc2:	607a      	str	r2, [r7, #4]
   1ddc4:	603b      	str	r3, [r7, #0]
	struct http_client_module *module_inst = (struct http_client_module *)context;
   1ddc6:	687b      	ldr	r3, [r7, #4]
   1ddc8:	617b      	str	r3, [r7, #20]

	/* Checks invalid arguments. */
	if (module_inst == NULL) {
   1ddca:	697b      	ldr	r3, [r7, #20]
   1ddcc:	2b00      	cmp	r3, #0
   1ddce:	d007      	beq.n	1dde0 <http_client_timer_callback+0x28>
		return;
	}

	_http_client_clear_conn(module_inst, -ETIME);
   1ddd0:	233e      	movs	r3, #62	; 0x3e
   1ddd2:	425a      	negs	r2, r3
   1ddd4:	697b      	ldr	r3, [r7, #20]
   1ddd6:	0011      	movs	r1, r2
   1ddd8:	0018      	movs	r0, r3
   1ddda:	4b03      	ldr	r3, [pc, #12]	; (1dde8 <http_client_timer_callback+0x30>)
   1dddc:	4798      	blx	r3
   1ddde:	e000      	b.n	1dde2 <http_client_timer_callback+0x2a>
		return;
   1dde0:	46c0      	nop			; (mov r8, r8)
}
   1dde2:	46bd      	mov	sp, r7
   1dde4:	b006      	add	sp, #24
   1dde6:	bd80      	pop	{r7, pc}
   1dde8:	0001e191 	.word	0x0001e191

0001ddec <_is_ip>:

static int _is_ip(const char *host)
{
   1ddec:	b580      	push	{r7, lr}
   1ddee:	b084      	sub	sp, #16
   1ddf0:	af00      	add	r7, sp, #0
   1ddf2:	6078      	str	r0, [r7, #4]
	uint32_t isv6 = 0;
   1ddf4:	2300      	movs	r3, #0
   1ddf6:	60fb      	str	r3, [r7, #12]
	char ch;

	while (*host != '\0') {
   1ddf8:	e03a      	b.n	1de70 <_is_ip+0x84>
		ch = *host++;
   1ddfa:	687b      	ldr	r3, [r7, #4]
   1ddfc:	1c5a      	adds	r2, r3, #1
   1ddfe:	607a      	str	r2, [r7, #4]
   1de00:	220b      	movs	r2, #11
   1de02:	18ba      	adds	r2, r7, r2
   1de04:	781b      	ldrb	r3, [r3, #0]
   1de06:	7013      	strb	r3, [r2, #0]
		if ((ch >= 'a' && ch <= 'f') || (ch >= 'A' && ch <= 'F') || ch == ':' || ch == '/') {
   1de08:	230b      	movs	r3, #11
   1de0a:	18fb      	adds	r3, r7, r3
   1de0c:	781b      	ldrb	r3, [r3, #0]
   1de0e:	2b60      	cmp	r3, #96	; 0x60
   1de10:	d904      	bls.n	1de1c <_is_ip+0x30>
   1de12:	230b      	movs	r3, #11
   1de14:	18fb      	adds	r3, r7, r3
   1de16:	781b      	ldrb	r3, [r3, #0]
   1de18:	2b66      	cmp	r3, #102	; 0x66
   1de1a:	d913      	bls.n	1de44 <_is_ip+0x58>
   1de1c:	230b      	movs	r3, #11
   1de1e:	18fb      	adds	r3, r7, r3
   1de20:	781b      	ldrb	r3, [r3, #0]
   1de22:	2b40      	cmp	r3, #64	; 0x40
   1de24:	d904      	bls.n	1de30 <_is_ip+0x44>
   1de26:	230b      	movs	r3, #11
   1de28:	18fb      	adds	r3, r7, r3
   1de2a:	781b      	ldrb	r3, [r3, #0]
   1de2c:	2b46      	cmp	r3, #70	; 0x46
   1de2e:	d909      	bls.n	1de44 <_is_ip+0x58>
   1de30:	230b      	movs	r3, #11
   1de32:	18fb      	adds	r3, r7, r3
   1de34:	781b      	ldrb	r3, [r3, #0]
   1de36:	2b3a      	cmp	r3, #58	; 0x3a
   1de38:	d004      	beq.n	1de44 <_is_ip+0x58>
   1de3a:	230b      	movs	r3, #11
   1de3c:	18fb      	adds	r3, r7, r3
   1de3e:	781b      	ldrb	r3, [r3, #0]
   1de40:	2b2f      	cmp	r3, #47	; 0x2f
   1de42:	d102      	bne.n	1de4a <_is_ip+0x5e>
			isv6 = 1;
   1de44:	2301      	movs	r3, #1
   1de46:	60fb      	str	r3, [r7, #12]
   1de48:	e012      	b.n	1de70 <_is_ip+0x84>
		} else if (ch == '.') {
   1de4a:	230b      	movs	r3, #11
   1de4c:	18fb      	adds	r3, r7, r3
   1de4e:	781b      	ldrb	r3, [r3, #0]
   1de50:	2b2e      	cmp	r3, #46	; 0x2e
   1de52:	d104      	bne.n	1de5e <_is_ip+0x72>
			if (isv6) {
   1de54:	68fb      	ldr	r3, [r7, #12]
   1de56:	2b00      	cmp	r3, #0
   1de58:	d00a      	beq.n	1de70 <_is_ip+0x84>
				return 0;
   1de5a:	2300      	movs	r3, #0
   1de5c:	e00d      	b.n	1de7a <_is_ip+0x8e>
			}
		} else if ((ch & 0x30) != 0x30) {
   1de5e:	230b      	movs	r3, #11
   1de60:	18fb      	adds	r3, r7, r3
   1de62:	781b      	ldrb	r3, [r3, #0]
   1de64:	2230      	movs	r2, #48	; 0x30
   1de66:	4013      	ands	r3, r2
   1de68:	2b30      	cmp	r3, #48	; 0x30
   1de6a:	d001      	beq.n	1de70 <_is_ip+0x84>
			return 0;
   1de6c:	2300      	movs	r3, #0
   1de6e:	e004      	b.n	1de7a <_is_ip+0x8e>
	while (*host != '\0') {
   1de70:	687b      	ldr	r3, [r7, #4]
   1de72:	781b      	ldrb	r3, [r3, #0]
   1de74:	2b00      	cmp	r3, #0
   1de76:	d1c0      	bne.n	1ddfa <_is_ip+0xe>
		}
	}
	return 1;
   1de78:	2301      	movs	r3, #1
}
   1de7a:	0018      	movs	r0, r3
   1de7c:	46bd      	mov	sp, r7
   1de7e:	b004      	add	sp, #16
   1de80:	bd80      	pop	{r7, pc}
	...

0001de84 <http_client_send_request>:

int http_client_send_request(struct http_client_module *const module, const char *url,
	enum http_method method, struct http_entity *const entity, const char *ext_header)
{
   1de84:	b5b0      	push	{r4, r5, r7, lr}
   1de86:	b08e      	sub	sp, #56	; 0x38
   1de88:	af00      	add	r7, sp, #0
   1de8a:	60f8      	str	r0, [r7, #12]
   1de8c:	60b9      	str	r1, [r7, #8]
   1de8e:	603b      	str	r3, [r7, #0]
   1de90:	1dfb      	adds	r3, r7, #7
   1de92:	701a      	strb	r2, [r3, #0]
	uint8_t flag = 0;
   1de94:	2337      	movs	r3, #55	; 0x37
   1de96:	18fb      	adds	r3, r7, r3
   1de98:	2200      	movs	r2, #0
   1de9a:	701a      	strb	r2, [r3, #0]
	struct sockaddr_in addr_in;
	const char *uri = NULL;
   1de9c:	2300      	movs	r3, #0
   1de9e:	62bb      	str	r3, [r7, #40]	; 0x28
	int i = 0, j = 0, reconnect = 0;
   1dea0:	2300      	movs	r3, #0
   1dea2:	633b      	str	r3, [r7, #48]	; 0x30
   1dea4:	2300      	movs	r3, #0
   1dea6:	62fb      	str	r3, [r7, #44]	; 0x2c
   1dea8:	2300      	movs	r3, #0
   1deaa:	627b      	str	r3, [r7, #36]	; 0x24

	if (module == NULL) {
   1deac:	68fb      	ldr	r3, [r7, #12]
   1deae:	2b00      	cmp	r3, #0
   1deb0:	d102      	bne.n	1deb8 <http_client_send_request+0x34>
		return -EINVAL;
   1deb2:	2316      	movs	r3, #22
   1deb4:	425b      	negs	r3, r3
   1deb6:	e145      	b.n	1e144 <http_client_send_request+0x2c0>
	}

	if (module->req.state > STATE_SOCK_CONNECTED) {
   1deb8:	68fb      	ldr	r3, [r7, #12]
   1deba:	6edb      	ldr	r3, [r3, #108]	; 0x6c
   1debc:	2b02      	cmp	r3, #2
   1debe:	d902      	bls.n	1dec6 <http_client_send_request+0x42>
		return -EBUSY;
   1dec0:	2310      	movs	r3, #16
   1dec2:	425b      	negs	r3, r3
   1dec4:	e13e      	b.n	1e144 <http_client_send_request+0x2c0>
	}

	/* Separate host and uri */
	if (!strncmp(url, "http://", 7)) {
   1dec6:	49a1      	ldr	r1, [pc, #644]	; (1e14c <http_client_send_request+0x2c8>)
   1dec8:	68bb      	ldr	r3, [r7, #8]
   1deca:	2207      	movs	r2, #7
   1decc:	0018      	movs	r0, r3
   1dece:	4ba0      	ldr	r3, [pc, #640]	; (1e150 <http_client_send_request+0x2cc>)
   1ded0:	4798      	blx	r3
   1ded2:	1e03      	subs	r3, r0, #0
   1ded4:	d102      	bne.n	1dedc <http_client_send_request+0x58>
		i = 7;
   1ded6:	2307      	movs	r3, #7
   1ded8:	633b      	str	r3, [r7, #48]	; 0x30
   1deda:	e009      	b.n	1def0 <http_client_send_request+0x6c>
	} else if (!strncmp(url, "https://", 8)) {
   1dedc:	499d      	ldr	r1, [pc, #628]	; (1e154 <http_client_send_request+0x2d0>)
   1dede:	68bb      	ldr	r3, [r7, #8]
   1dee0:	2208      	movs	r2, #8
   1dee2:	0018      	movs	r0, r3
   1dee4:	4b9a      	ldr	r3, [pc, #616]	; (1e150 <http_client_send_request+0x2cc>)
   1dee6:	4798      	blx	r3
   1dee8:	1e03      	subs	r3, r0, #0
   1deea:	d101      	bne.n	1def0 <http_client_send_request+0x6c>
		i = 8;
   1deec:	2308      	movs	r3, #8
   1deee:	633b      	str	r3, [r7, #48]	; 0x30
	}
	reconnect = strncmp(module->host, url + i, strlen(module->host));
   1def0:	68fb      	ldr	r3, [r7, #12]
   1def2:	1c5c      	adds	r4, r3, #1
   1def4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   1def6:	68ba      	ldr	r2, [r7, #8]
   1def8:	18d5      	adds	r5, r2, r3
   1defa:	68fb      	ldr	r3, [r7, #12]
   1defc:	3301      	adds	r3, #1
   1defe:	0018      	movs	r0, r3
   1df00:	4b95      	ldr	r3, [pc, #596]	; (1e158 <http_client_send_request+0x2d4>)
   1df02:	4798      	blx	r3
   1df04:	0003      	movs	r3, r0
   1df06:	001a      	movs	r2, r3
   1df08:	0029      	movs	r1, r5
   1df0a:	0020      	movs	r0, r4
   1df0c:	4b90      	ldr	r3, [pc, #576]	; (1e150 <http_client_send_request+0x2cc>)
   1df0e:	4798      	blx	r3
   1df10:	0003      	movs	r3, r0
   1df12:	627b      	str	r3, [r7, #36]	; 0x24

	for (; url[i] != '\0' && url[i] != '/'; i++) {
   1df14:	e00d      	b.n	1df32 <http_client_send_request+0xae>
		module->host[j++] = url[i];
   1df16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   1df18:	1c5a      	adds	r2, r3, #1
   1df1a:	62fa      	str	r2, [r7, #44]	; 0x2c
   1df1c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
   1df1e:	68b9      	ldr	r1, [r7, #8]
   1df20:	188a      	adds	r2, r1, r2
   1df22:	7811      	ldrb	r1, [r2, #0]
   1df24:	68fa      	ldr	r2, [r7, #12]
   1df26:	18d3      	adds	r3, r2, r3
   1df28:	1c0a      	adds	r2, r1, #0
   1df2a:	705a      	strb	r2, [r3, #1]
	for (; url[i] != '\0' && url[i] != '/'; i++) {
   1df2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   1df2e:	3301      	adds	r3, #1
   1df30:	633b      	str	r3, [r7, #48]	; 0x30
   1df32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   1df34:	68ba      	ldr	r2, [r7, #8]
   1df36:	18d3      	adds	r3, r2, r3
   1df38:	781b      	ldrb	r3, [r3, #0]
   1df3a:	2b00      	cmp	r3, #0
   1df3c:	d005      	beq.n	1df4a <http_client_send_request+0xc6>
   1df3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   1df40:	68ba      	ldr	r2, [r7, #8]
   1df42:	18d3      	adds	r3, r2, r3
   1df44:	781b      	ldrb	r3, [r3, #0]
   1df46:	2b2f      	cmp	r3, #47	; 0x2f
   1df48:	d1e5      	bne.n	1df16 <http_client_send_request+0x92>
	}
	module->host[j] = '\0';
   1df4a:	68fa      	ldr	r2, [r7, #12]
   1df4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   1df4e:	18d3      	adds	r3, r2, r3
   1df50:	3301      	adds	r3, #1
   1df52:	2200      	movs	r2, #0
   1df54:	701a      	strb	r2, [r3, #0]
	uri = url + i;
   1df56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   1df58:	68ba      	ldr	r2, [r7, #8]
   1df5a:	18d3      	adds	r3, r2, r3
   1df5c:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Checks the parameters. */
	if (strlen(module->host) == 0) {
   1df5e:	68fb      	ldr	r3, [r7, #12]
   1df60:	3301      	adds	r3, #1
   1df62:	781b      	ldrb	r3, [r3, #0]
   1df64:	2b00      	cmp	r3, #0
   1df66:	d102      	bne.n	1df6e <http_client_send_request+0xea>
		return -EINVAL;
   1df68:	2316      	movs	r3, #22
   1df6a:	425b      	negs	r3, r3
   1df6c:	e0ea      	b.n	1e144 <http_client_send_request+0x2c0>
	}

	if (strlen(uri) >= HTTP_MAX_URI_LENGTH) {
   1df6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1df70:	0018      	movs	r0, r3
   1df72:	4b79      	ldr	r3, [pc, #484]	; (1e158 <http_client_send_request+0x2d4>)
   1df74:	4798      	blx	r3
   1df76:	0003      	movs	r3, r0
   1df78:	2b3f      	cmp	r3, #63	; 0x3f
   1df7a:	d902      	bls.n	1df82 <http_client_send_request+0xfe>
		return -ENAMETOOLONG;
   1df7c:	235b      	movs	r3, #91	; 0x5b
   1df7e:	425b      	negs	r3, r3
   1df80:	e0e0      	b.n	1e144 <http_client_send_request+0x2c0>
	}

	if (module->req.ext_header != NULL) {
   1df82:	68fb      	ldr	r3, [r7, #12]
   1df84:	22d4      	movs	r2, #212	; 0xd4
   1df86:	589b      	ldr	r3, [r3, r2]
   1df88:	2b00      	cmp	r3, #0
   1df8a:	d005      	beq.n	1df98 <http_client_send_request+0x114>
		free(module->req.ext_header);
   1df8c:	68fb      	ldr	r3, [r7, #12]
   1df8e:	22d4      	movs	r2, #212	; 0xd4
   1df90:	589b      	ldr	r3, [r3, r2]
   1df92:	0018      	movs	r0, r3
   1df94:	4b71      	ldr	r3, [pc, #452]	; (1e15c <http_client_send_request+0x2d8>)
   1df96:	4798      	blx	r3
	}
	if (ext_header != NULL) {
   1df98:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   1df9a:	2b00      	cmp	r3, #0
   1df9c:	d010      	beq.n	1dfc0 <http_client_send_request+0x13c>
		module->req.ext_header = strdup(ext_header);
   1df9e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   1dfa0:	0018      	movs	r0, r3
   1dfa2:	4b6f      	ldr	r3, [pc, #444]	; (1e160 <http_client_send_request+0x2dc>)
   1dfa4:	4798      	blx	r3
   1dfa6:	0003      	movs	r3, r0
   1dfa8:	0019      	movs	r1, r3
   1dfaa:	68fb      	ldr	r3, [r7, #12]
   1dfac:	22d4      	movs	r2, #212	; 0xd4
   1dfae:	5099      	str	r1, [r3, r2]
		if (module->req.ext_header == NULL) {
   1dfb0:	68fb      	ldr	r3, [r7, #12]
   1dfb2:	22d4      	movs	r2, #212	; 0xd4
   1dfb4:	589b      	ldr	r3, [r3, r2]
   1dfb6:	2b00      	cmp	r3, #0
   1dfb8:	d106      	bne.n	1dfc8 <http_client_send_request+0x144>
			return -ENOMEM;
   1dfba:	230c      	movs	r3, #12
   1dfbc:	425b      	negs	r3, r3
   1dfbe:	e0c1      	b.n	1e144 <http_client_send_request+0x2c0>
		}
	} else {
		module->req.ext_header = NULL;
   1dfc0:	68fb      	ldr	r3, [r7, #12]
   1dfc2:	22d4      	movs	r2, #212	; 0xd4
   1dfc4:	2100      	movs	r1, #0
   1dfc6:	5099      	str	r1, [r3, r2]
	}

	module->sending = 0;
   1dfc8:	68fb      	ldr	r3, [r7, #12]
   1dfca:	2241      	movs	r2, #65	; 0x41
   1dfcc:	5c99      	ldrb	r1, [r3, r2]
   1dfce:	2001      	movs	r0, #1
   1dfd0:	4381      	bics	r1, r0
   1dfd2:	5499      	strb	r1, [r3, r2]
	module->recved_size = 0;
   1dfd4:	68fb      	ldr	r3, [r7, #12]
   1dfd6:	2200      	movs	r2, #0
   1dfd8:	645a      	str	r2, [r3, #68]	; 0x44
	if (uri[0] == '/') {
   1dfda:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1dfdc:	781b      	ldrb	r3, [r3, #0]
   1dfde:	2b2f      	cmp	r3, #47	; 0x2f
   1dfe0:	d107      	bne.n	1dff2 <http_client_send_request+0x16e>
		strcpy(module->req.uri, uri);
   1dfe2:	68fb      	ldr	r3, [r7, #12]
   1dfe4:	3370      	adds	r3, #112	; 0x70
   1dfe6:	6aba      	ldr	r2, [r7, #40]	; 0x28
   1dfe8:	0011      	movs	r1, r2
   1dfea:	0018      	movs	r0, r3
   1dfec:	4b5d      	ldr	r3, [pc, #372]	; (1e164 <http_client_send_request+0x2e0>)
   1dfee:	4798      	blx	r3
   1dff0:	e00f      	b.n	1e012 <http_client_send_request+0x18e>
		} else {
		module->req.uri[0] = '/';
   1dff2:	68fb      	ldr	r3, [r7, #12]
   1dff4:	2270      	movs	r2, #112	; 0x70
   1dff6:	212f      	movs	r1, #47	; 0x2f
   1dff8:	5499      	strb	r1, [r3, r2]
		if (uri[0] != 0) {
   1dffa:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1dffc:	781b      	ldrb	r3, [r3, #0]
   1dffe:	2b00      	cmp	r3, #0
   1e000:	d007      	beq.n	1e012 <http_client_send_request+0x18e>
			strcpy(module->req.uri + 1, uri);
   1e002:	68fb      	ldr	r3, [r7, #12]
   1e004:	3370      	adds	r3, #112	; 0x70
   1e006:	3301      	adds	r3, #1
   1e008:	6aba      	ldr	r2, [r7, #40]	; 0x28
   1e00a:	0011      	movs	r1, r2
   1e00c:	0018      	movs	r0, r3
   1e00e:	4b55      	ldr	r3, [pc, #340]	; (1e164 <http_client_send_request+0x2e0>)
   1e010:	4798      	blx	r3
		}
	}

	if (entity != NULL) {
   1e012:	683b      	ldr	r3, [r7, #0]
   1e014:	2b00      	cmp	r3, #0
   1e016:	d007      	beq.n	1e028 <http_client_send_request+0x1a4>
		memcpy(&module->req.entity, entity, sizeof(struct http_entity));
   1e018:	68fb      	ldr	r3, [r7, #12]
   1e01a:	33b0      	adds	r3, #176	; 0xb0
   1e01c:	6839      	ldr	r1, [r7, #0]
   1e01e:	2218      	movs	r2, #24
   1e020:	0018      	movs	r0, r3
   1e022:	4b51      	ldr	r3, [pc, #324]	; (1e168 <http_client_send_request+0x2e4>)
   1e024:	4798      	blx	r3
   1e026:	e006      	b.n	1e036 <http_client_send_request+0x1b2>
		} else {
		memset(&module->req.entity, 0, sizeof(struct http_entity));
   1e028:	68fb      	ldr	r3, [r7, #12]
   1e02a:	33b0      	adds	r3, #176	; 0xb0
   1e02c:	2218      	movs	r2, #24
   1e02e:	2100      	movs	r1, #0
   1e030:	0018      	movs	r0, r3
   1e032:	4b4e      	ldr	r3, [pc, #312]	; (1e16c <http_client_send_request+0x2e8>)
   1e034:	4798      	blx	r3
	}

	module->req.method = method;
   1e036:	68fb      	ldr	r3, [r7, #12]
   1e038:	1dfa      	adds	r2, r7, #7
   1e03a:	21c8      	movs	r1, #200	; 0xc8
   1e03c:	7812      	ldrb	r2, [r2, #0]
   1e03e:	545a      	strb	r2, [r3, r1]
	
	switch (module->req.state) {
   1e040:	68fb      	ldr	r3, [r7, #12]
   1e042:	6edb      	ldr	r3, [r3, #108]	; 0x6c
   1e044:	2b01      	cmp	r3, #1
   1e046:	d003      	beq.n	1e050 <http_client_send_request+0x1cc>
   1e048:	d316      	bcc.n	1e078 <http_client_send_request+0x1f4>
   1e04a:	2b02      	cmp	r3, #2
   1e04c:	d004      	beq.n	1e058 <http_client_send_request+0x1d4>
   1e04e:	e074      	b.n	1e13a <http_client_send_request+0x2b6>
	case STATE_TRY_SOCK_CONNECT:
		if (!reconnect) {
   1e050:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1e052:	2b00      	cmp	r3, #0
   1e054:	d100      	bne.n	1e058 <http_client_send_request+0x1d4>
   1e056:	e073      	b.n	1e140 <http_client_send_request+0x2bc>
			break; /* Currently try to connect to the same server. */
		}
	case STATE_SOCK_CONNECTED:
		if (!reconnect) {
   1e058:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1e05a:	2b00      	cmp	r3, #0
   1e05c:	d107      	bne.n	1e06e <http_client_send_request+0x1ea>
			module->req.state = STATE_REQ_SEND_HEADER;
   1e05e:	68fb      	ldr	r3, [r7, #12]
   1e060:	2203      	movs	r2, #3
   1e062:	66da      	str	r2, [r3, #108]	; 0x6c
			/* Send request immediately. */
			_http_client_request(module);
   1e064:	68fb      	ldr	r3, [r7, #12]
   1e066:	0018      	movs	r0, r3
   1e068:	4b41      	ldr	r3, [pc, #260]	; (1e170 <http_client_send_request+0x2ec>)
   1e06a:	4798      	blx	r3
			break;
   1e06c:	e069      	b.n	1e142 <http_client_send_request+0x2be>
		} else {
			/* Request to another peer. Disconnect and try connect again. */
			_http_client_clear_conn(module, 0);
   1e06e:	68fb      	ldr	r3, [r7, #12]
   1e070:	2100      	movs	r1, #0
   1e072:	0018      	movs	r0, r3
   1e074:	4b3f      	ldr	r3, [pc, #252]	; (1e174 <http_client_send_request+0x2f0>)
   1e076:	4798      	blx	r3
		}
	case STATE_INIT:
		if (module->config.tls) {
   1e078:	68fb      	ldr	r3, [r7, #12]
   1e07a:	2252      	movs	r2, #82	; 0x52
   1e07c:	5c9b      	ldrb	r3, [r3, r2]
   1e07e:	2b00      	cmp	r3, #0
   1e080:	d007      	beq.n	1e092 <http_client_send_request+0x20e>
			flag |= SOCKET_FLAGS_SSL;
   1e082:	2337      	movs	r3, #55	; 0x37
   1e084:	18fb      	adds	r3, r7, r3
   1e086:	2237      	movs	r2, #55	; 0x37
   1e088:	18ba      	adds	r2, r7, r2
   1e08a:	7812      	ldrb	r2, [r2, #0]
   1e08c:	2101      	movs	r1, #1
   1e08e:	430a      	orrs	r2, r1
   1e090:	701a      	strb	r2, [r3, #0]
		}
		module->sock = socket(AF_INET, SOCK_STREAM, flag);
   1e092:	2337      	movs	r3, #55	; 0x37
   1e094:	18fb      	adds	r3, r7, r3
   1e096:	781b      	ldrb	r3, [r3, #0]
   1e098:	001a      	movs	r2, r3
   1e09a:	2101      	movs	r1, #1
   1e09c:	2002      	movs	r0, #2
   1e09e:	4b36      	ldr	r3, [pc, #216]	; (1e178 <http_client_send_request+0x2f4>)
   1e0a0:	4798      	blx	r3
   1e0a2:	0003      	movs	r3, r0
   1e0a4:	001a      	movs	r2, r3
   1e0a6:	68fb      	ldr	r3, [r7, #12]
   1e0a8:	701a      	strb	r2, [r3, #0]
		if (module->sock >= 0) {
   1e0aa:	68fb      	ldr	r3, [r7, #12]
   1e0ac:	781b      	ldrb	r3, [r3, #0]
   1e0ae:	b25b      	sxtb	r3, r3
   1e0b0:	2b00      	cmp	r3, #0
   1e0b2:	db3f      	blt.n	1e134 <http_client_send_request+0x2b0>
			module_ref_inst[module->sock] = module;
   1e0b4:	68fb      	ldr	r3, [r7, #12]
   1e0b6:	781b      	ldrb	r3, [r3, #0]
   1e0b8:	b25b      	sxtb	r3, r3
   1e0ba:	001a      	movs	r2, r3
   1e0bc:	4b2f      	ldr	r3, [pc, #188]	; (1e17c <http_client_send_request+0x2f8>)
   1e0be:	0092      	lsls	r2, r2, #2
   1e0c0:	68f9      	ldr	r1, [r7, #12]
   1e0c2:	50d1      	str	r1, [r2, r3]
			if (_is_ip(module->host)) {
   1e0c4:	68fb      	ldr	r3, [r7, #12]
   1e0c6:	3301      	adds	r3, #1
   1e0c8:	0018      	movs	r0, r3
   1e0ca:	4b2d      	ldr	r3, [pc, #180]	; (1e180 <http_client_send_request+0x2fc>)
   1e0cc:	4798      	blx	r3
   1e0ce:	1e03      	subs	r3, r0, #0
   1e0d0:	d027      	beq.n	1e122 <http_client_send_request+0x29e>
				addr_in.sin_family = AF_INET;
   1e0d2:	2314      	movs	r3, #20
   1e0d4:	18fb      	adds	r3, r7, r3
   1e0d6:	2202      	movs	r2, #2
   1e0d8:	801a      	strh	r2, [r3, #0]
				addr_in.sin_port = _htons(module->config.port);
   1e0da:	68fb      	ldr	r3, [r7, #12]
   1e0dc:	2250      	movs	r2, #80	; 0x50
   1e0de:	5a9b      	ldrh	r3, [r3, r2]
   1e0e0:	021b      	lsls	r3, r3, #8
   1e0e2:	b21a      	sxth	r2, r3
   1e0e4:	68fb      	ldr	r3, [r7, #12]
   1e0e6:	2150      	movs	r1, #80	; 0x50
   1e0e8:	5a5b      	ldrh	r3, [r3, r1]
   1e0ea:	0a1b      	lsrs	r3, r3, #8
   1e0ec:	b29b      	uxth	r3, r3
   1e0ee:	b21b      	sxth	r3, r3
   1e0f0:	4313      	orrs	r3, r2
   1e0f2:	b21b      	sxth	r3, r3
   1e0f4:	b29a      	uxth	r2, r3
   1e0f6:	2314      	movs	r3, #20
   1e0f8:	18fb      	adds	r3, r7, r3
   1e0fa:	805a      	strh	r2, [r3, #2]
				addr_in.sin_addr.s_addr = nmi_inet_addr((char *)module->host);
   1e0fc:	68fb      	ldr	r3, [r7, #12]
   1e0fe:	3301      	adds	r3, #1
   1e100:	0018      	movs	r0, r3
   1e102:	4b20      	ldr	r3, [pc, #128]	; (1e184 <http_client_send_request+0x300>)
   1e104:	4798      	blx	r3
   1e106:	0002      	movs	r2, r0
   1e108:	2314      	movs	r3, #20
   1e10a:	18fb      	adds	r3, r7, r3
   1e10c:	605a      	str	r2, [r3, #4]
				connect(module->sock, (struct sockaddr *)&addr_in, sizeof(struct sockaddr_in));
   1e10e:	68fb      	ldr	r3, [r7, #12]
   1e110:	781b      	ldrb	r3, [r3, #0]
   1e112:	b25b      	sxtb	r3, r3
   1e114:	2214      	movs	r2, #20
   1e116:	18b9      	adds	r1, r7, r2
   1e118:	2210      	movs	r2, #16
   1e11a:	0018      	movs	r0, r3
   1e11c:	4b1a      	ldr	r3, [pc, #104]	; (1e188 <http_client_send_request+0x304>)
   1e11e:	4798      	blx	r3
   1e120:	e004      	b.n	1e12c <http_client_send_request+0x2a8>
			} else {
				gethostbyname((uint8*)module->host);
   1e122:	68fb      	ldr	r3, [r7, #12]
   1e124:	3301      	adds	r3, #1
   1e126:	0018      	movs	r0, r3
   1e128:	4b18      	ldr	r3, [pc, #96]	; (1e18c <http_client_send_request+0x308>)
   1e12a:	4798      	blx	r3
			}
			module->req.state = STATE_TRY_SOCK_CONNECT;
   1e12c:	68fb      	ldr	r3, [r7, #12]
   1e12e:	2201      	movs	r2, #1
   1e130:	66da      	str	r2, [r3, #108]	; 0x6c
		} else {
			return -ENOSPC;
		}
		break;
   1e132:	e006      	b.n	1e142 <http_client_send_request+0x2be>
			return -ENOSPC;
   1e134:	231c      	movs	r3, #28
   1e136:	425b      	negs	r3, r3
   1e138:	e004      	b.n	1e144 <http_client_send_request+0x2c0>
	default:
		/* STATE_TRY_REQ */
		/* STATE_WAIT_RESP */
		/* STATE_RECV_RESP */
		/* Session was busy. Try again later. */
		return -EAGAIN;
   1e13a:	230b      	movs	r3, #11
   1e13c:	425b      	negs	r3, r3
   1e13e:	e001      	b.n	1e144 <http_client_send_request+0x2c0>
			break; /* Currently try to connect to the same server. */
   1e140:	46c0      	nop			; (mov r8, r8)
	}

	return 0;
   1e142:	2300      	movs	r3, #0
}
   1e144:	0018      	movs	r0, r3
   1e146:	46bd      	mov	sp, r7
   1e148:	b00e      	add	sp, #56	; 0x38
   1e14a:	bdb0      	pop	{r4, r5, r7, pc}
   1e14c:	0002676c 	.word	0x0002676c
   1e150:	00021be1 	.word	0x00021be1
   1e154:	00026774 	.word	0x00026774
   1e158:	00021bd3 	.word	0x00021bd3
   1e15c:	000217d1 	.word	0x000217d1
   1e160:	00021b99 	.word	0x00021b99
   1e164:	00021b87 	.word	0x00021b87
   1e168:	000217e5 	.word	0x000217e5
   1e16c:	0002181b 	.word	0x0002181b
   1e170:	0001e2e5 	.word	0x0001e2e5
   1e174:	0001e191 	.word	0x0001e191
   1e178:	000124a1 	.word	0x000124a1
   1e17c:	20004170 	.word	0x20004170
   1e180:	0001dded 	.word	0x0001dded
   1e184:	00012bed 	.word	0x00012bed
   1e188:	000126b5 	.word	0x000126b5
   1e18c:	00012cf5 	.word	0x00012cf5

0001e190 <_http_client_clear_conn>:

	return 0;
}

void _http_client_clear_conn(struct http_client_module *const module, int reason)
{
   1e190:	b580      	push	{r7, lr}
   1e192:	b086      	sub	sp, #24
   1e194:	af00      	add	r7, sp, #0
   1e196:	6078      	str	r0, [r7, #4]
   1e198:	6039      	str	r1, [r7, #0]
	union http_client_data data;

	if (module->req.entity.close) {
   1e19a:	687b      	ldr	r3, [r7, #4]
   1e19c:	22c0      	movs	r2, #192	; 0xc0
   1e19e:	589b      	ldr	r3, [r3, r2]
   1e1a0:	2b00      	cmp	r3, #0
   1e1a2:	d007      	beq.n	1e1b4 <_http_client_clear_conn+0x24>
		module->req.entity.close(module->req.entity.priv_data);
   1e1a4:	687b      	ldr	r3, [r7, #4]
   1e1a6:	22c0      	movs	r2, #192	; 0xc0
   1e1a8:	589b      	ldr	r3, [r3, r2]
   1e1aa:	687a      	ldr	r2, [r7, #4]
   1e1ac:	21c4      	movs	r1, #196	; 0xc4
   1e1ae:	5852      	ldr	r2, [r2, r1]
   1e1b0:	0010      	movs	r0, r2
   1e1b2:	4798      	blx	r3
	}

	memset(&module->req.entity, 0, sizeof(struct http_entity));
   1e1b4:	687b      	ldr	r3, [r7, #4]
   1e1b6:	33b0      	adds	r3, #176	; 0xb0
   1e1b8:	2218      	movs	r2, #24
   1e1ba:	2100      	movs	r1, #0
   1e1bc:	0018      	movs	r0, r3
   1e1be:	4b24      	ldr	r3, [pc, #144]	; (1e250 <_http_client_clear_conn+0xc0>)
   1e1c0:	4798      	blx	r3

	if (module->req.state >= STATE_TRY_SOCK_CONNECT) {
   1e1c2:	687b      	ldr	r3, [r7, #4]
   1e1c4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
   1e1c6:	2b00      	cmp	r3, #0
   1e1c8:	d005      	beq.n	1e1d6 <_http_client_clear_conn+0x46>
		close(module->sock);
   1e1ca:	687b      	ldr	r3, [r7, #4]
   1e1cc:	781b      	ldrb	r3, [r3, #0]
   1e1ce:	b25b      	sxtb	r3, r3
   1e1d0:	0018      	movs	r0, r3
   1e1d2:	4b20      	ldr	r3, [pc, #128]	; (1e254 <_http_client_clear_conn+0xc4>)
   1e1d4:	4798      	blx	r3
	}

	module_ref_inst[module->sock] = NULL;
   1e1d6:	687b      	ldr	r3, [r7, #4]
   1e1d8:	781b      	ldrb	r3, [r3, #0]
   1e1da:	b25b      	sxtb	r3, r3
   1e1dc:	001a      	movs	r2, r3
   1e1de:	4b1e      	ldr	r3, [pc, #120]	; (1e258 <_http_client_clear_conn+0xc8>)
   1e1e0:	0092      	lsls	r2, r2, #2
   1e1e2:	2100      	movs	r1, #0
   1e1e4:	50d1      	str	r1, [r2, r3]
	memset(&module->req, 0, sizeof(struct http_client_req));
   1e1e6:	687b      	ldr	r3, [r7, #4]
   1e1e8:	336c      	adds	r3, #108	; 0x6c
   1e1ea:	226c      	movs	r2, #108	; 0x6c
   1e1ec:	2100      	movs	r1, #0
   1e1ee:	0018      	movs	r0, r3
   1e1f0:	4b17      	ldr	r3, [pc, #92]	; (1e250 <_http_client_clear_conn+0xc0>)
   1e1f2:	4798      	blx	r3
	memset(&module->resp, 0, sizeof(struct http_client_resp));
   1e1f4:	687b      	ldr	r3, [r7, #4]
   1e1f6:	33d8      	adds	r3, #216	; 0xd8
   1e1f8:	2210      	movs	r2, #16
   1e1fa:	2100      	movs	r1, #0
   1e1fc:	0018      	movs	r0, r3
   1e1fe:	4b14      	ldr	r3, [pc, #80]	; (1e250 <_http_client_clear_conn+0xc0>)
   1e200:	4798      	blx	r3
	module->req.state = STATE_INIT;
   1e202:	687b      	ldr	r3, [r7, #4]
   1e204:	2200      	movs	r2, #0
   1e206:	66da      	str	r2, [r3, #108]	; 0x6c
	module->resp.state = STATE_PARSE_HEADER;
   1e208:	687b      	ldr	r3, [r7, #4]
   1e20a:	22d8      	movs	r2, #216	; 0xd8
   1e20c:	2100      	movs	r1, #0
   1e20e:	5099      	str	r1, [r3, r2]

	module->sending = 0;
   1e210:	687b      	ldr	r3, [r7, #4]
   1e212:	2241      	movs	r2, #65	; 0x41
   1e214:	5c99      	ldrb	r1, [r3, r2]
   1e216:	2001      	movs	r0, #1
   1e218:	4381      	bics	r1, r0
   1e21a:	5499      	strb	r1, [r3, r2]
	module->permanent = 0;
   1e21c:	687b      	ldr	r3, [r7, #4]
   1e21e:	2241      	movs	r2, #65	; 0x41
   1e220:	5c99      	ldrb	r1, [r3, r2]
   1e222:	2002      	movs	r0, #2
   1e224:	4381      	bics	r1, r0
   1e226:	5499      	strb	r1, [r3, r2]
	data.disconnected.reason = reason;
   1e228:	230c      	movs	r3, #12
   1e22a:	18fb      	adds	r3, r7, r3
   1e22c:	683a      	ldr	r2, [r7, #0]
   1e22e:	601a      	str	r2, [r3, #0]
	if (module->cb) {
   1e230:	687b      	ldr	r3, [r7, #4]
   1e232:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   1e234:	2b00      	cmp	r3, #0
   1e236:	d006      	beq.n	1e246 <_http_client_clear_conn+0xb6>
		module->cb(module, HTTP_CLIENT_CALLBACK_DISCONNECTED, &data);
   1e238:	687b      	ldr	r3, [r7, #4]
   1e23a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   1e23c:	220c      	movs	r2, #12
   1e23e:	18ba      	adds	r2, r7, r2
   1e240:	6878      	ldr	r0, [r7, #4]
   1e242:	2104      	movs	r1, #4
   1e244:	4798      	blx	r3
	}
}
   1e246:	46c0      	nop			; (mov r8, r8)
   1e248:	46bd      	mov	sp, r7
   1e24a:	b006      	add	sp, #24
   1e24c:	bd80      	pop	{r7, pc}
   1e24e:	46c0      	nop			; (mov r8, r8)
   1e250:	0002181b 	.word	0x0002181b
   1e254:	00012aad 	.word	0x00012aad
   1e258:	20004170 	.word	0x20004170

0001e25c <_http_client_send_wait>:

int _http_client_send_wait(void *_module, char *buffer, size_t buffer_len)
{
   1e25c:	b590      	push	{r4, r7, lr}
   1e25e:	b087      	sub	sp, #28
   1e260:	af00      	add	r7, sp, #0
   1e262:	60f8      	str	r0, [r7, #12]
   1e264:	60b9      	str	r1, [r7, #8]
   1e266:	607a      	str	r2, [r7, #4]
	int result;
	struct http_client_module *const module = (struct http_client_module *const)_module;
   1e268:	68fb      	ldr	r3, [r7, #12]
   1e26a:	617b      	str	r3, [r7, #20]
	
	module->sending = 1;
   1e26c:	697b      	ldr	r3, [r7, #20]
   1e26e:	2241      	movs	r2, #65	; 0x41
   1e270:	5c99      	ldrb	r1, [r3, r2]
   1e272:	2001      	movs	r0, #1
   1e274:	4301      	orrs	r1, r0
   1e276:	5499      	strb	r1, [r3, r2]

	if ((result = send(module->sock, (void*)buffer, buffer_len, 0)) < 0) {
   1e278:	697b      	ldr	r3, [r7, #20]
   1e27a:	2000      	movs	r0, #0
   1e27c:	5618      	ldrsb	r0, [r3, r0]
   1e27e:	687b      	ldr	r3, [r7, #4]
   1e280:	b29a      	uxth	r2, r3
   1e282:	68b9      	ldr	r1, [r7, #8]
   1e284:	2300      	movs	r3, #0
   1e286:	4c14      	ldr	r4, [pc, #80]	; (1e2d8 <_http_client_send_wait+0x7c>)
   1e288:	47a0      	blx	r4
   1e28a:	0003      	movs	r3, r0
   1e28c:	613b      	str	r3, [r7, #16]
   1e28e:	693b      	ldr	r3, [r7, #16]
   1e290:	2b00      	cmp	r3, #0
   1e292:	da0f      	bge.n	1e2b4 <_http_client_send_wait+0x58>
		module->sending = 0;
   1e294:	697b      	ldr	r3, [r7, #20]
   1e296:	2241      	movs	r2, #65	; 0x41
   1e298:	5c99      	ldrb	r1, [r3, r2]
   1e29a:	2001      	movs	r0, #1
   1e29c:	4381      	bics	r1, r0
   1e29e:	5499      	strb	r1, [r3, r2]
		return result;
   1e2a0:	693b      	ldr	r3, [r7, #16]
   1e2a2:	e014      	b.n	1e2ce <_http_client_send_wait+0x72>
	}
	while (module->sending == 1 && module->req.state > STATE_SOCK_CONNECTED){
		m2m_wifi_handle_events(NULL);
   1e2a4:	2000      	movs	r0, #0
   1e2a6:	4b0d      	ldr	r3, [pc, #52]	; (1e2dc <_http_client_send_wait+0x80>)
   1e2a8:	4798      	blx	r3
		sw_timer_task(module->config.timer_inst);
   1e2aa:	697b      	ldr	r3, [r7, #20]
   1e2ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   1e2ae:	0018      	movs	r0, r3
   1e2b0:	4b0b      	ldr	r3, [pc, #44]	; (1e2e0 <_http_client_send_wait+0x84>)
   1e2b2:	4798      	blx	r3
	while (module->sending == 1 && module->req.state > STATE_SOCK_CONNECTED){
   1e2b4:	697b      	ldr	r3, [r7, #20]
   1e2b6:	2241      	movs	r2, #65	; 0x41
   1e2b8:	5c9b      	ldrb	r3, [r3, r2]
   1e2ba:	2201      	movs	r2, #1
   1e2bc:	4013      	ands	r3, r2
   1e2be:	b2db      	uxtb	r3, r3
   1e2c0:	2b00      	cmp	r3, #0
   1e2c2:	d003      	beq.n	1e2cc <_http_client_send_wait+0x70>
   1e2c4:	697b      	ldr	r3, [r7, #20]
   1e2c6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
   1e2c8:	2b02      	cmp	r3, #2
   1e2ca:	d8eb      	bhi.n	1e2a4 <_http_client_send_wait+0x48>
	}

	return 0;
   1e2cc:	2300      	movs	r3, #0
}
   1e2ce:	0018      	movs	r0, r3
   1e2d0:	46bd      	mov	sp, r7
   1e2d2:	b007      	add	sp, #28
   1e2d4:	bd90      	pop	{r4, r7, pc}
   1e2d6:	46c0      	nop			; (mov r8, r8)
   1e2d8:	000127c9 	.word	0x000127c9
   1e2dc:	0000ee75 	.word	0x0000ee75
   1e2e0:	0001f569 	.word	0x0001f569

0001e2e4 <_http_client_request>:

void _http_client_request(struct http_client_module *const module)
{
   1e2e4:	b5f0      	push	{r4, r5, r6, r7, lr}
   1e2e6:	46c6      	mov	lr, r8
   1e2e8:	b500      	push	{lr}
   1e2ea:	b0a0      	sub	sp, #128	; 0x80
   1e2ec:	af02      	add	r7, sp, #8
   1e2ee:	61f8      	str	r0, [r7, #28]
   1e2f0:	4668      	mov	r0, sp
   1e2f2:	61b8      	str	r0, [r7, #24]
	struct stream_writer writer;
	int size;
	int result;
	char length[11];
	char *ptr;
	const char CH_LUT[] = {'0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'a', 'b', 'c', 'd', 'e', 'f'};
   1e2f4:	2318      	movs	r3, #24
   1e2f6:	2218      	movs	r2, #24
   1e2f8:	18ba      	adds	r2, r7, r2
   1e2fa:	18d0      	adds	r0, r2, r3
   1e2fc:	4bbd      	ldr	r3, [pc, #756]	; (1e5f4 <_http_client_request+0x310>)
   1e2fe:	469c      	mov	ip, r3
   1e300:	4663      	mov	r3, ip
   1e302:	cb16      	ldmia	r3!, {r1, r2, r4}
   1e304:	c016      	stmia	r0!, {r1, r2, r4}
   1e306:	469c      	mov	ip, r3
   1e308:	4663      	mov	r3, ip
   1e30a:	681b      	ldr	r3, [r3, #0]
   1e30c:	469c      	mov	ip, r3
   1e30e:	4663      	mov	r3, ip
   1e310:	6003      	str	r3, [r0, #0]
	struct http_entity * entity;
	union http_client_data data;
#define HTTP_CHUNKED_MAX_LENGTH 3 /*TCP MTU is 1400(0x578) */
	char buffer[module->config.send_buffer_size];
   1e312:	69f8      	ldr	r0, [r7, #28]
   1e314:	6e40      	ldr	r0, [r0, #100]	; 0x64
   1e316:	4684      	mov	ip, r0
   1e318:	2301      	movs	r3, #1
   1e31a:	425b      	negs	r3, r3
   1e31c:	4698      	mov	r8, r3
   1e31e:	44c4      	add	ip, r8
   1e320:	4663      	mov	r3, ip
   1e322:	66fb      	str	r3, [r7, #108]	; 0x6c
   1e324:	6038      	str	r0, [r7, #0]
   1e326:	2300      	movs	r3, #0
   1e328:	607b      	str	r3, [r7, #4]
   1e32a:	6839      	ldr	r1, [r7, #0]
   1e32c:	687a      	ldr	r2, [r7, #4]
   1e32e:	000b      	movs	r3, r1
   1e330:	0f5b      	lsrs	r3, r3, #29
   1e332:	469c      	mov	ip, r3
   1e334:	0013      	movs	r3, r2
   1e336:	00db      	lsls	r3, r3, #3
   1e338:	617b      	str	r3, [r7, #20]
   1e33a:	4663      	mov	r3, ip
   1e33c:	697c      	ldr	r4, [r7, #20]
   1e33e:	431c      	orrs	r4, r3
   1e340:	617c      	str	r4, [r7, #20]
   1e342:	000b      	movs	r3, r1
   1e344:	00db      	lsls	r3, r3, #3
   1e346:	613b      	str	r3, [r7, #16]
   1e348:	0005      	movs	r5, r0
   1e34a:	2200      	movs	r2, #0
   1e34c:	0016      	movs	r6, r2
   1e34e:	0f6a      	lsrs	r2, r5, #29
   1e350:	00f3      	lsls	r3, r6, #3
   1e352:	60fb      	str	r3, [r7, #12]
   1e354:	68fb      	ldr	r3, [r7, #12]
   1e356:	4313      	orrs	r3, r2
   1e358:	60fb      	str	r3, [r7, #12]
   1e35a:	00eb      	lsls	r3, r5, #3
   1e35c:	60bb      	str	r3, [r7, #8]
   1e35e:	1dc3      	adds	r3, r0, #7
   1e360:	08db      	lsrs	r3, r3, #3
   1e362:	00db      	lsls	r3, r3, #3
   1e364:	466a      	mov	r2, sp
   1e366:	1ad3      	subs	r3, r2, r3
   1e368:	469d      	mov	sp, r3
   1e36a:	ab02      	add	r3, sp, #8
   1e36c:	3300      	adds	r3, #0
   1e36e:	66bb      	str	r3, [r7, #104]	; 0x68

	if (module == NULL) {
   1e370:	69fb      	ldr	r3, [r7, #28]
   1e372:	2b00      	cmp	r3, #0
   1e374:	d100      	bne.n	1e378 <_http_client_request+0x94>
   1e376:	e346      	b.n	1ea06 <_http_client_request+0x722>
		return;
	}

	if (module->sending != 0) {
   1e378:	69fb      	ldr	r3, [r7, #28]
   1e37a:	2241      	movs	r2, #65	; 0x41
   1e37c:	5c9b      	ldrb	r3, [r3, r2]
   1e37e:	2201      	movs	r2, #1
   1e380:	4013      	ands	r3, r2
   1e382:	b2db      	uxtb	r3, r3
   1e384:	2b00      	cmp	r3, #0
   1e386:	d000      	beq.n	1e38a <_http_client_request+0xa6>
   1e388:	e33f      	b.n	1ea0a <_http_client_request+0x726>
		/* Device is busy. */
		return;
	}

	entity = &module->req.entity;
   1e38a:	69fb      	ldr	r3, [r7, #28]
   1e38c:	33b0      	adds	r3, #176	; 0xb0
   1e38e:	667b      	str	r3, [r7, #100]	; 0x64

	switch (module->req.state) {
   1e390:	69fb      	ldr	r3, [r7, #28]
   1e392:	6edb      	ldr	r3, [r3, #108]	; 0x6c
   1e394:	2b03      	cmp	r3, #3
   1e396:	d003      	beq.n	1e3a0 <_http_client_request+0xbc>
   1e398:	2b04      	cmp	r3, #4
   1e39a:	d100      	bne.n	1e39e <_http_client_request+0xba>
   1e39c:	e1b3      	b.n	1e706 <_http_client_request+0x422>
		}

		break;
	default:
		/* Invalid status. */
		break;
   1e39e:	e32f      	b.n	1ea00 <_http_client_request+0x71c>
		module->req.content_length = 0;
   1e3a0:	69fb      	ldr	r3, [r7, #28]
   1e3a2:	22cc      	movs	r2, #204	; 0xcc
   1e3a4:	2100      	movs	r1, #0
   1e3a6:	5099      	str	r1, [r3, r2]
		module->req.sent_length = 0;
   1e3a8:	69fb      	ldr	r3, [r7, #28]
   1e3aa:	22d0      	movs	r2, #208	; 0xd0
   1e3ac:	2100      	movs	r1, #0
   1e3ae:	5099      	str	r1, [r3, r2]
		stream_writer_init(&writer, buffer, module->config.send_buffer_size, _http_client_send_wait, (void *)module);
   1e3b0:	6eb9      	ldr	r1, [r7, #104]	; 0x68
   1e3b2:	69fb      	ldr	r3, [r7, #28]
   1e3b4:	6e5a      	ldr	r2, [r3, #100]	; 0x64
   1e3b6:	4c90      	ldr	r4, [pc, #576]	; (1e5f8 <_http_client_request+0x314>)
   1e3b8:	2334      	movs	r3, #52	; 0x34
   1e3ba:	2018      	movs	r0, #24
   1e3bc:	1838      	adds	r0, r7, r0
   1e3be:	18c0      	adds	r0, r0, r3
   1e3c0:	69fb      	ldr	r3, [r7, #28]
   1e3c2:	9300      	str	r3, [sp, #0]
   1e3c4:	0023      	movs	r3, r4
   1e3c6:	4c8d      	ldr	r4, [pc, #564]	; (1e5fc <_http_client_request+0x318>)
   1e3c8:	47a0      	blx	r4
		if (module->req.method == HTTP_METHOD_GET) {
   1e3ca:	69fb      	ldr	r3, [r7, #28]
   1e3cc:	22c8      	movs	r2, #200	; 0xc8
   1e3ce:	5c9b      	ldrb	r3, [r3, r2]
   1e3d0:	2b01      	cmp	r3, #1
   1e3d2:	d10a      	bne.n	1e3ea <_http_client_request+0x106>
			stream_writer_send_buffer(&writer, "GET ", 4);
   1e3d4:	498a      	ldr	r1, [pc, #552]	; (1e600 <_http_client_request+0x31c>)
   1e3d6:	2334      	movs	r3, #52	; 0x34
   1e3d8:	2218      	movs	r2, #24
   1e3da:	4694      	mov	ip, r2
   1e3dc:	44bc      	add	ip, r7
   1e3de:	4463      	add	r3, ip
   1e3e0:	2204      	movs	r2, #4
   1e3e2:	0018      	movs	r0, r3
   1e3e4:	4b87      	ldr	r3, [pc, #540]	; (1e604 <_http_client_request+0x320>)
   1e3e6:	4798      	blx	r3
   1e3e8:	e04e      	b.n	1e488 <_http_client_request+0x1a4>
		} else if (module->req.method == HTTP_METHOD_POST) {
   1e3ea:	69fb      	ldr	r3, [r7, #28]
   1e3ec:	22c8      	movs	r2, #200	; 0xc8
   1e3ee:	5c9b      	ldrb	r3, [r3, r2]
   1e3f0:	2b02      	cmp	r3, #2
   1e3f2:	d10a      	bne.n	1e40a <_http_client_request+0x126>
			stream_writer_send_buffer(&writer, "POST ", 5);
   1e3f4:	4984      	ldr	r1, [pc, #528]	; (1e608 <_http_client_request+0x324>)
   1e3f6:	2334      	movs	r3, #52	; 0x34
   1e3f8:	2218      	movs	r2, #24
   1e3fa:	4694      	mov	ip, r2
   1e3fc:	44bc      	add	ip, r7
   1e3fe:	4463      	add	r3, ip
   1e400:	2205      	movs	r2, #5
   1e402:	0018      	movs	r0, r3
   1e404:	4b7f      	ldr	r3, [pc, #508]	; (1e604 <_http_client_request+0x320>)
   1e406:	4798      	blx	r3
   1e408:	e03e      	b.n	1e488 <_http_client_request+0x1a4>
		} else if (module->req.method == HTTP_METHOD_DELETE) {
   1e40a:	69fb      	ldr	r3, [r7, #28]
   1e40c:	22c8      	movs	r2, #200	; 0xc8
   1e40e:	5c9b      	ldrb	r3, [r3, r2]
   1e410:	2b03      	cmp	r3, #3
   1e412:	d10a      	bne.n	1e42a <_http_client_request+0x146>
			stream_writer_send_buffer(&writer, "DELETE ", 7);
   1e414:	497d      	ldr	r1, [pc, #500]	; (1e60c <_http_client_request+0x328>)
   1e416:	2334      	movs	r3, #52	; 0x34
   1e418:	2218      	movs	r2, #24
   1e41a:	4694      	mov	ip, r2
   1e41c:	44bc      	add	ip, r7
   1e41e:	4463      	add	r3, ip
   1e420:	2207      	movs	r2, #7
   1e422:	0018      	movs	r0, r3
   1e424:	4b77      	ldr	r3, [pc, #476]	; (1e604 <_http_client_request+0x320>)
   1e426:	4798      	blx	r3
   1e428:	e02e      	b.n	1e488 <_http_client_request+0x1a4>
		} else if (module->req.method == HTTP_METHOD_PUT) {
   1e42a:	69fb      	ldr	r3, [r7, #28]
   1e42c:	22c8      	movs	r2, #200	; 0xc8
   1e42e:	5c9b      	ldrb	r3, [r3, r2]
   1e430:	2b04      	cmp	r3, #4
   1e432:	d10a      	bne.n	1e44a <_http_client_request+0x166>
			stream_writer_send_buffer(&writer, "PUT ", 4);
   1e434:	4976      	ldr	r1, [pc, #472]	; (1e610 <_http_client_request+0x32c>)
   1e436:	2334      	movs	r3, #52	; 0x34
   1e438:	2218      	movs	r2, #24
   1e43a:	4694      	mov	ip, r2
   1e43c:	44bc      	add	ip, r7
   1e43e:	4463      	add	r3, ip
   1e440:	2204      	movs	r2, #4
   1e442:	0018      	movs	r0, r3
   1e444:	4b6f      	ldr	r3, [pc, #444]	; (1e604 <_http_client_request+0x320>)
   1e446:	4798      	blx	r3
   1e448:	e01e      	b.n	1e488 <_http_client_request+0x1a4>
		} else if (module->req.method == HTTP_METHOD_OPTIONS) {
   1e44a:	69fb      	ldr	r3, [r7, #28]
   1e44c:	22c8      	movs	r2, #200	; 0xc8
   1e44e:	5c9b      	ldrb	r3, [r3, r2]
   1e450:	2b05      	cmp	r3, #5
   1e452:	d10a      	bne.n	1e46a <_http_client_request+0x186>
			stream_writer_send_buffer(&writer, "OPTIONS ", 8);
   1e454:	496f      	ldr	r1, [pc, #444]	; (1e614 <_http_client_request+0x330>)
   1e456:	2334      	movs	r3, #52	; 0x34
   1e458:	2218      	movs	r2, #24
   1e45a:	4694      	mov	ip, r2
   1e45c:	44bc      	add	ip, r7
   1e45e:	4463      	add	r3, ip
   1e460:	2208      	movs	r2, #8
   1e462:	0018      	movs	r0, r3
   1e464:	4b67      	ldr	r3, [pc, #412]	; (1e604 <_http_client_request+0x320>)
   1e466:	4798      	blx	r3
   1e468:	e00e      	b.n	1e488 <_http_client_request+0x1a4>
		} else if (module->req.method == HTTP_METHOD_HEAD) {
   1e46a:	69fb      	ldr	r3, [r7, #28]
   1e46c:	22c8      	movs	r2, #200	; 0xc8
   1e46e:	5c9b      	ldrb	r3, [r3, r2]
   1e470:	2b06      	cmp	r3, #6
   1e472:	d109      	bne.n	1e488 <_http_client_request+0x1a4>
			stream_writer_send_buffer(&writer, "HEAD ", 5);
   1e474:	4968      	ldr	r1, [pc, #416]	; (1e618 <_http_client_request+0x334>)
   1e476:	2334      	movs	r3, #52	; 0x34
   1e478:	2218      	movs	r2, #24
   1e47a:	4694      	mov	ip, r2
   1e47c:	44bc      	add	ip, r7
   1e47e:	4463      	add	r3, ip
   1e480:	2205      	movs	r2, #5
   1e482:	0018      	movs	r0, r3
   1e484:	4b5f      	ldr	r3, [pc, #380]	; (1e604 <_http_client_request+0x320>)
   1e486:	4798      	blx	r3
		stream_writer_send_buffer(&writer, module->req.uri, strlen(module->req.uri));
   1e488:	69fb      	ldr	r3, [r7, #28]
   1e48a:	3370      	adds	r3, #112	; 0x70
   1e48c:	001c      	movs	r4, r3
   1e48e:	69fb      	ldr	r3, [r7, #28]
   1e490:	3370      	adds	r3, #112	; 0x70
   1e492:	0018      	movs	r0, r3
   1e494:	4b61      	ldr	r3, [pc, #388]	; (1e61c <_http_client_request+0x338>)
   1e496:	4798      	blx	r3
   1e498:	0002      	movs	r2, r0
   1e49a:	2334      	movs	r3, #52	; 0x34
   1e49c:	2118      	movs	r1, #24
   1e49e:	468c      	mov	ip, r1
   1e4a0:	44bc      	add	ip, r7
   1e4a2:	4463      	add	r3, ip
   1e4a4:	0021      	movs	r1, r4
   1e4a6:	0018      	movs	r0, r3
   1e4a8:	4b56      	ldr	r3, [pc, #344]	; (1e604 <_http_client_request+0x320>)
   1e4aa:	4798      	blx	r3
		stream_writer_send_buffer(&writer, " "HTTP_PROTO_NAME"\r\n", strlen(" "HTTP_PROTO_NAME"\r\n"));
   1e4ac:	495c      	ldr	r1, [pc, #368]	; (1e620 <_http_client_request+0x33c>)
   1e4ae:	2334      	movs	r3, #52	; 0x34
   1e4b0:	2218      	movs	r2, #24
   1e4b2:	4694      	mov	ip, r2
   1e4b4:	44bc      	add	ip, r7
   1e4b6:	4463      	add	r3, ip
   1e4b8:	220b      	movs	r2, #11
   1e4ba:	0018      	movs	r0, r3
   1e4bc:	4b51      	ldr	r3, [pc, #324]	; (1e604 <_http_client_request+0x320>)
   1e4be:	4798      	blx	r3
		stream_writer_send_buffer(&writer, "User-Agent: ", strlen("User-agent: "));
   1e4c0:	4958      	ldr	r1, [pc, #352]	; (1e624 <_http_client_request+0x340>)
   1e4c2:	2334      	movs	r3, #52	; 0x34
   1e4c4:	2218      	movs	r2, #24
   1e4c6:	4694      	mov	ip, r2
   1e4c8:	44bc      	add	ip, r7
   1e4ca:	4463      	add	r3, ip
   1e4cc:	220c      	movs	r2, #12
   1e4ce:	0018      	movs	r0, r3
   1e4d0:	4b4c      	ldr	r3, [pc, #304]	; (1e604 <_http_client_request+0x320>)
   1e4d2:	4798      	blx	r3
		stream_writer_send_buffer(&writer, (char *)module->config.user_agent, strlen(module->config.user_agent));
   1e4d4:	69fb      	ldr	r3, [r7, #28]
   1e4d6:	6e9c      	ldr	r4, [r3, #104]	; 0x68
   1e4d8:	69fb      	ldr	r3, [r7, #28]
   1e4da:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   1e4dc:	0018      	movs	r0, r3
   1e4de:	4b4f      	ldr	r3, [pc, #316]	; (1e61c <_http_client_request+0x338>)
   1e4e0:	4798      	blx	r3
   1e4e2:	0002      	movs	r2, r0
   1e4e4:	2334      	movs	r3, #52	; 0x34
   1e4e6:	2118      	movs	r1, #24
   1e4e8:	468c      	mov	ip, r1
   1e4ea:	44bc      	add	ip, r7
   1e4ec:	4463      	add	r3, ip
   1e4ee:	0021      	movs	r1, r4
   1e4f0:	0018      	movs	r0, r3
   1e4f2:	4b44      	ldr	r3, [pc, #272]	; (1e604 <_http_client_request+0x320>)
   1e4f4:	4798      	blx	r3
		stream_writer_send_buffer(&writer, "\r\n", strlen("\r\n"));
   1e4f6:	494c      	ldr	r1, [pc, #304]	; (1e628 <_http_client_request+0x344>)
   1e4f8:	2334      	movs	r3, #52	; 0x34
   1e4fa:	2218      	movs	r2, #24
   1e4fc:	4694      	mov	ip, r2
   1e4fe:	44bc      	add	ip, r7
   1e500:	4463      	add	r3, ip
   1e502:	2202      	movs	r2, #2
   1e504:	0018      	movs	r0, r3
   1e506:	4b3f      	ldr	r3, [pc, #252]	; (1e604 <_http_client_request+0x320>)
   1e508:	4798      	blx	r3
		stream_writer_send_buffer(&writer, "Host: ", strlen("Host: "));
   1e50a:	4948      	ldr	r1, [pc, #288]	; (1e62c <_http_client_request+0x348>)
   1e50c:	2334      	movs	r3, #52	; 0x34
   1e50e:	2218      	movs	r2, #24
   1e510:	4694      	mov	ip, r2
   1e512:	44bc      	add	ip, r7
   1e514:	4463      	add	r3, ip
   1e516:	2206      	movs	r2, #6
   1e518:	0018      	movs	r0, r3
   1e51a:	4b3a      	ldr	r3, [pc, #232]	; (1e604 <_http_client_request+0x320>)
   1e51c:	4798      	blx	r3
		stream_writer_send_buffer(&writer, module->host, strlen(module->host));
   1e51e:	69fb      	ldr	r3, [r7, #28]
   1e520:	1c5c      	adds	r4, r3, #1
   1e522:	69fb      	ldr	r3, [r7, #28]
   1e524:	3301      	adds	r3, #1
   1e526:	0018      	movs	r0, r3
   1e528:	4b3c      	ldr	r3, [pc, #240]	; (1e61c <_http_client_request+0x338>)
   1e52a:	4798      	blx	r3
   1e52c:	0002      	movs	r2, r0
   1e52e:	2334      	movs	r3, #52	; 0x34
   1e530:	2118      	movs	r1, #24
   1e532:	468c      	mov	ip, r1
   1e534:	44bc      	add	ip, r7
   1e536:	4463      	add	r3, ip
   1e538:	0021      	movs	r1, r4
   1e53a:	0018      	movs	r0, r3
   1e53c:	4b31      	ldr	r3, [pc, #196]	; (1e604 <_http_client_request+0x320>)
   1e53e:	4798      	blx	r3
		stream_writer_send_buffer(&writer, "\r\n", strlen("\r\n"));
   1e540:	4939      	ldr	r1, [pc, #228]	; (1e628 <_http_client_request+0x344>)
   1e542:	2334      	movs	r3, #52	; 0x34
   1e544:	2218      	movs	r2, #24
   1e546:	4694      	mov	ip, r2
   1e548:	44bc      	add	ip, r7
   1e54a:	4463      	add	r3, ip
   1e54c:	2202      	movs	r2, #2
   1e54e:	0018      	movs	r0, r3
   1e550:	4b2c      	ldr	r3, [pc, #176]	; (1e604 <_http_client_request+0x320>)
   1e552:	4798      	blx	r3
		stream_writer_send_buffer(&writer, "Connection: Keep-Alive\r\n", strlen("Connection: Keep-Alive\r\n"));
   1e554:	4936      	ldr	r1, [pc, #216]	; (1e630 <_http_client_request+0x34c>)
   1e556:	2334      	movs	r3, #52	; 0x34
   1e558:	2218      	movs	r2, #24
   1e55a:	4694      	mov	ip, r2
   1e55c:	44bc      	add	ip, r7
   1e55e:	4463      	add	r3, ip
   1e560:	2218      	movs	r2, #24
   1e562:	0018      	movs	r0, r3
   1e564:	4b27      	ldr	r3, [pc, #156]	; (1e604 <_http_client_request+0x320>)
   1e566:	4798      	blx	r3
		stream_writer_send_buffer(&writer, "Accept-Encoding: \r\n", strlen("Accept-Encoding: \r\n"));
   1e568:	4932      	ldr	r1, [pc, #200]	; (1e634 <_http_client_request+0x350>)
   1e56a:	2334      	movs	r3, #52	; 0x34
   1e56c:	2218      	movs	r2, #24
   1e56e:	4694      	mov	ip, r2
   1e570:	44bc      	add	ip, r7
   1e572:	4463      	add	r3, ip
   1e574:	2213      	movs	r2, #19
   1e576:	0018      	movs	r0, r3
   1e578:	4b22      	ldr	r3, [pc, #136]	; (1e604 <_http_client_request+0x320>)
   1e57a:	4798      	blx	r3
		stream_writer_send_buffer(&writer, "Accept-Charset: utf-8\r\n", strlen("Accept-Charset: utf-8\r\n"));
   1e57c:	492e      	ldr	r1, [pc, #184]	; (1e638 <_http_client_request+0x354>)
   1e57e:	2334      	movs	r3, #52	; 0x34
   1e580:	2218      	movs	r2, #24
   1e582:	4694      	mov	ip, r2
   1e584:	44bc      	add	ip, r7
   1e586:	4463      	add	r3, ip
   1e588:	2217      	movs	r2, #23
   1e58a:	0018      	movs	r0, r3
   1e58c:	4b1d      	ldr	r3, [pc, #116]	; (1e604 <_http_client_request+0x320>)
   1e58e:	4798      	blx	r3
		if (entity->read != NULL) {
   1e590:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   1e592:	68db      	ldr	r3, [r3, #12]
   1e594:	2b00      	cmp	r3, #0
   1e596:	d100      	bne.n	1e59a <_http_client_request+0x2b6>
   1e598:	e088      	b.n	1e6ac <_http_client_request+0x3c8>
			if (entity->is_chunked) {
   1e59a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   1e59c:	781b      	ldrb	r3, [r3, #0]
   1e59e:	2b00      	cmp	r3, #0
   1e5a0:	d00f      	beq.n	1e5c2 <_http_client_request+0x2de>
				module->req.content_length = -1;
   1e5a2:	69fb      	ldr	r3, [r7, #28]
   1e5a4:	21cc      	movs	r1, #204	; 0xcc
   1e5a6:	2201      	movs	r2, #1
   1e5a8:	4252      	negs	r2, r2
   1e5aa:	505a      	str	r2, [r3, r1]
				stream_writer_send_buffer(&writer, "Transfer-Encoding: chunked\r\n", strlen("Transfer-Encoding: chunked\r\n"));
   1e5ac:	4923      	ldr	r1, [pc, #140]	; (1e63c <_http_client_request+0x358>)
   1e5ae:	2334      	movs	r3, #52	; 0x34
   1e5b0:	2218      	movs	r2, #24
   1e5b2:	4694      	mov	ip, r2
   1e5b4:	44bc      	add	ip, r7
   1e5b6:	4463      	add	r3, ip
   1e5b8:	221c      	movs	r2, #28
   1e5ba:	0018      	movs	r0, r3
   1e5bc:	4b11      	ldr	r3, [pc, #68]	; (1e604 <_http_client_request+0x320>)
   1e5be:	4798      	blx	r3
   1e5c0:	e074      	b.n	1e6ac <_http_client_request+0x3c8>
			} else if(entity->get_contents_length) {
   1e5c2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   1e5c4:	689b      	ldr	r3, [r3, #8]
   1e5c6:	2b00      	cmp	r3, #0
   1e5c8:	d070      	beq.n	1e6ac <_http_client_request+0x3c8>
				module->req.content_length = entity->get_contents_length(entity->priv_data);
   1e5ca:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   1e5cc:	689a      	ldr	r2, [r3, #8]
   1e5ce:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   1e5d0:	695b      	ldr	r3, [r3, #20]
   1e5d2:	0018      	movs	r0, r3
   1e5d4:	4790      	blx	r2
   1e5d6:	0001      	movs	r1, r0
   1e5d8:	69fb      	ldr	r3, [r7, #28]
   1e5da:	22cc      	movs	r2, #204	; 0xcc
   1e5dc:	5099      	str	r1, [r3, r2]
				if (module->req.content_length < 0) {
   1e5de:	69fb      	ldr	r3, [r7, #28]
   1e5e0:	22cc      	movs	r2, #204	; 0xcc
   1e5e2:	589b      	ldr	r3, [r3, r2]
   1e5e4:	2b00      	cmp	r3, #0
   1e5e6:	da2b      	bge.n	1e640 <_http_client_request+0x35c>
					module->req.content_length = 0;
   1e5e8:	69fb      	ldr	r3, [r7, #28]
   1e5ea:	22cc      	movs	r2, #204	; 0xcc
   1e5ec:	2100      	movs	r1, #0
   1e5ee:	5099      	str	r1, [r3, r2]
   1e5f0:	e05c      	b.n	1e6ac <_http_client_request+0x3c8>
   1e5f2:	46c0      	nop			; (mov r8, r8)
   1e5f4:	0002685c 	.word	0x0002685c
   1e5f8:	0001e25d 	.word	0x0001e25d
   1e5fc:	0001f1c5 	.word	0x0001f1c5
   1e600:	00026780 	.word	0x00026780
   1e604:	0001f245 	.word	0x0001f245
   1e608:	00026788 	.word	0x00026788
   1e60c:	00026790 	.word	0x00026790
   1e610:	00026798 	.word	0x00026798
   1e614:	000267a0 	.word	0x000267a0
   1e618:	000267ac 	.word	0x000267ac
   1e61c:	00021bd3 	.word	0x00021bd3
   1e620:	000267b4 	.word	0x000267b4
   1e624:	000267c0 	.word	0x000267c0
   1e628:	000267d0 	.word	0x000267d0
   1e62c:	000267d4 	.word	0x000267d4
   1e630:	000267dc 	.word	0x000267dc
   1e634:	000267f8 	.word	0x000267f8
   1e638:	0002680c 	.word	0x0002680c
   1e63c:	00026824 	.word	0x00026824
					sprintf(length, "%u", (unsigned int)module->req.content_length);
   1e640:	69fb      	ldr	r3, [r7, #28]
   1e642:	22cc      	movs	r2, #204	; 0xcc
   1e644:	589b      	ldr	r3, [r3, r2]
   1e646:	001a      	movs	r2, r3
   1e648:	49e0      	ldr	r1, [pc, #896]	; (1e9cc <_http_client_request+0x6e8>)
   1e64a:	2328      	movs	r3, #40	; 0x28
   1e64c:	2018      	movs	r0, #24
   1e64e:	4684      	mov	ip, r0
   1e650:	44bc      	add	ip, r7
   1e652:	4463      	add	r3, ip
   1e654:	0018      	movs	r0, r3
   1e656:	4bde      	ldr	r3, [pc, #888]	; (1e9d0 <_http_client_request+0x6ec>)
   1e658:	4798      	blx	r3
					stream_writer_send_buffer(&writer, "Content-Length: ", strlen("Content-Length: "));
   1e65a:	49de      	ldr	r1, [pc, #888]	; (1e9d4 <_http_client_request+0x6f0>)
   1e65c:	2334      	movs	r3, #52	; 0x34
   1e65e:	2218      	movs	r2, #24
   1e660:	4694      	mov	ip, r2
   1e662:	44bc      	add	ip, r7
   1e664:	4463      	add	r3, ip
   1e666:	2210      	movs	r2, #16
   1e668:	0018      	movs	r0, r3
   1e66a:	4bdb      	ldr	r3, [pc, #876]	; (1e9d8 <_http_client_request+0x6f4>)
   1e66c:	4798      	blx	r3
					stream_writer_send_buffer(&writer, length, strlen(length));
   1e66e:	2328      	movs	r3, #40	; 0x28
   1e670:	2218      	movs	r2, #24
   1e672:	4694      	mov	ip, r2
   1e674:	44bc      	add	ip, r7
   1e676:	4463      	add	r3, ip
   1e678:	0018      	movs	r0, r3
   1e67a:	4bd8      	ldr	r3, [pc, #864]	; (1e9dc <_http_client_request+0x6f8>)
   1e67c:	4798      	blx	r3
   1e67e:	0002      	movs	r2, r0
   1e680:	2328      	movs	r3, #40	; 0x28
   1e682:	2118      	movs	r1, #24
   1e684:	1879      	adds	r1, r7, r1
   1e686:	18c9      	adds	r1, r1, r3
   1e688:	2334      	movs	r3, #52	; 0x34
   1e68a:	2018      	movs	r0, #24
   1e68c:	4684      	mov	ip, r0
   1e68e:	44bc      	add	ip, r7
   1e690:	4463      	add	r3, ip
   1e692:	0018      	movs	r0, r3
   1e694:	4bd0      	ldr	r3, [pc, #832]	; (1e9d8 <_http_client_request+0x6f4>)
   1e696:	4798      	blx	r3
					stream_writer_send_buffer(&writer, "\r\n", strlen("\r\n"));
   1e698:	49d1      	ldr	r1, [pc, #836]	; (1e9e0 <_http_client_request+0x6fc>)
   1e69a:	2334      	movs	r3, #52	; 0x34
   1e69c:	2218      	movs	r2, #24
   1e69e:	4694      	mov	ip, r2
   1e6a0:	44bc      	add	ip, r7
   1e6a2:	4463      	add	r3, ip
   1e6a4:	2202      	movs	r2, #2
   1e6a6:	0018      	movs	r0, r3
   1e6a8:	4bcb      	ldr	r3, [pc, #812]	; (1e9d8 <_http_client_request+0x6f4>)
   1e6aa:	4798      	blx	r3
		if (module->req.ext_header != NULL ) {
   1e6ac:	69fb      	ldr	r3, [r7, #28]
   1e6ae:	22d4      	movs	r2, #212	; 0xd4
   1e6b0:	589b      	ldr	r3, [r3, r2]
   1e6b2:	2b00      	cmp	r3, #0
   1e6b4:	d012      	beq.n	1e6dc <_http_client_request+0x3f8>
				module->req.ext_header,
   1e6b6:	69fb      	ldr	r3, [r7, #28]
   1e6b8:	22d4      	movs	r2, #212	; 0xd4
   1e6ba:	589c      	ldr	r4, [r3, r2]
				strlen(module->req.ext_header));
   1e6bc:	69fb      	ldr	r3, [r7, #28]
   1e6be:	22d4      	movs	r2, #212	; 0xd4
   1e6c0:	589b      	ldr	r3, [r3, r2]
			stream_writer_send_buffer(&writer,
   1e6c2:	0018      	movs	r0, r3
   1e6c4:	4bc5      	ldr	r3, [pc, #788]	; (1e9dc <_http_client_request+0x6f8>)
   1e6c6:	4798      	blx	r3
   1e6c8:	0002      	movs	r2, r0
   1e6ca:	2334      	movs	r3, #52	; 0x34
   1e6cc:	2118      	movs	r1, #24
   1e6ce:	468c      	mov	ip, r1
   1e6d0:	44bc      	add	ip, r7
   1e6d2:	4463      	add	r3, ip
   1e6d4:	0021      	movs	r1, r4
   1e6d6:	0018      	movs	r0, r3
   1e6d8:	4bbf      	ldr	r3, [pc, #764]	; (1e9d8 <_http_client_request+0x6f4>)
   1e6da:	4798      	blx	r3
		stream_writer_send_buffer(&writer, "\r\n", strlen("\r\n"));
   1e6dc:	49c0      	ldr	r1, [pc, #768]	; (1e9e0 <_http_client_request+0x6fc>)
   1e6de:	2334      	movs	r3, #52	; 0x34
   1e6e0:	2218      	movs	r2, #24
   1e6e2:	4694      	mov	ip, r2
   1e6e4:	44bc      	add	ip, r7
   1e6e6:	4463      	add	r3, ip
   1e6e8:	2202      	movs	r2, #2
   1e6ea:	0018      	movs	r0, r3
   1e6ec:	4bba      	ldr	r3, [pc, #744]	; (1e9d8 <_http_client_request+0x6f4>)
   1e6ee:	4798      	blx	r3
		stream_writer_send_remain(&writer);
   1e6f0:	2334      	movs	r3, #52	; 0x34
   1e6f2:	2218      	movs	r2, #24
   1e6f4:	4694      	mov	ip, r2
   1e6f6:	44bc      	add	ip, r7
   1e6f8:	4463      	add	r3, ip
   1e6fa:	0018      	movs	r0, r3
   1e6fc:	4bb9      	ldr	r3, [pc, #740]	; (1e9e4 <_http_client_request+0x700>)
   1e6fe:	4798      	blx	r3
		module->req.state = STATE_REQ_SEND_ENTITY;
   1e700:	69fb      	ldr	r3, [r7, #28]
   1e702:	2204      	movs	r2, #4
   1e704:	66da      	str	r2, [r3, #108]	; 0x6c
		if (module->req.content_length < 0 && entity->read) {
   1e706:	69fb      	ldr	r3, [r7, #28]
   1e708:	22cc      	movs	r2, #204	; 0xcc
   1e70a:	589b      	ldr	r3, [r3, r2]
   1e70c:	2b00      	cmp	r3, #0
   1e70e:	db00      	blt.n	1e712 <_http_client_request+0x42e>
   1e710:	e0c6      	b.n	1e8a0 <_http_client_request+0x5bc>
   1e712:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   1e714:	68db      	ldr	r3, [r3, #12]
   1e716:	2b00      	cmp	r3, #0
   1e718:	d100      	bne.n	1e71c <_http_client_request+0x438>
   1e71a:	e0c1      	b.n	1e8a0 <_http_client_request+0x5bc>
			size = entity->read(entity->priv_data, buffer + HTTP_CHUNKED_MAX_LENGTH + 2,
   1e71c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   1e71e:	68dc      	ldr	r4, [r3, #12]
   1e720:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   1e722:	6958      	ldr	r0, [r3, #20]
   1e724:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   1e726:	1d59      	adds	r1, r3, #5
				module->config.send_buffer_size - HTTP_CHUNKED_MAX_LENGTH - 4, module->req.sent_length);
   1e728:	69fb      	ldr	r3, [r7, #28]
   1e72a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
			size = entity->read(entity->priv_data, buffer + HTTP_CHUNKED_MAX_LENGTH + 2,
   1e72c:	1fdd      	subs	r5, r3, #7
				module->config.send_buffer_size - HTTP_CHUNKED_MAX_LENGTH - 4, module->req.sent_length);
   1e72e:	69fb      	ldr	r3, [r7, #28]
   1e730:	22d0      	movs	r2, #208	; 0xd0
   1e732:	589b      	ldr	r3, [r3, r2]
			size = entity->read(entity->priv_data, buffer + HTTP_CHUNKED_MAX_LENGTH + 2,
   1e734:	002a      	movs	r2, r5
   1e736:	47a0      	blx	r4
   1e738:	0003      	movs	r3, r0
   1e73a:	677b      	str	r3, [r7, #116]	; 0x74
			if (size < 0) {
   1e73c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   1e73e:	2b00      	cmp	r3, #0
   1e740:	da01      	bge.n	1e746 <_http_client_request+0x462>
				size = 0;
   1e742:	2300      	movs	r3, #0
   1e744:	677b      	str	r3, [r7, #116]	; 0x74
			buffer[HTTP_CHUNKED_MAX_LENGTH + 1] = '\n';
   1e746:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   1e748:	220a      	movs	r2, #10
   1e74a:	711a      	strb	r2, [r3, #4]
			buffer[HTTP_CHUNKED_MAX_LENGTH] = '\r';
   1e74c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   1e74e:	220d      	movs	r2, #13
   1e750:	70da      	strb	r2, [r3, #3]
			buffer[size + HTTP_CHUNKED_MAX_LENGTH + 2] = '\r';
   1e752:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   1e754:	3305      	adds	r3, #5
   1e756:	6eba      	ldr	r2, [r7, #104]	; 0x68
   1e758:	210d      	movs	r1, #13
   1e75a:	54d1      	strb	r1, [r2, r3]
			buffer[size + HTTP_CHUNKED_MAX_LENGTH + 3] = '\n';
   1e75c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   1e75e:	3306      	adds	r3, #6
   1e760:	6eba      	ldr	r2, [r7, #104]	; 0x68
   1e762:	210a      	movs	r1, #10
   1e764:	54d1      	strb	r1, [r2, r3]
			if (size >= 0) {
   1e766:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   1e768:	2b00      	cmp	r3, #0
   1e76a:	db14      	blt.n	1e796 <_http_client_request+0x4b2>
				ptr = buffer + 2;
   1e76c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   1e76e:	3302      	adds	r3, #2
   1e770:	673b      	str	r3, [r7, #112]	; 0x70
				*ptr = CH_LUT[size % 16];
   1e772:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   1e774:	4a9c      	ldr	r2, [pc, #624]	; (1e9e8 <_http_client_request+0x704>)
   1e776:	4013      	ands	r3, r2
   1e778:	d504      	bpl.n	1e784 <_http_client_request+0x4a0>
   1e77a:	3b01      	subs	r3, #1
   1e77c:	2210      	movs	r2, #16
   1e77e:	4252      	negs	r2, r2
   1e780:	4313      	orrs	r3, r2
   1e782:	3301      	adds	r3, #1
   1e784:	001a      	movs	r2, r3
   1e786:	2318      	movs	r3, #24
   1e788:	2118      	movs	r1, #24
   1e78a:	468c      	mov	ip, r1
   1e78c:	44bc      	add	ip, r7
   1e78e:	4463      	add	r3, ip
   1e790:	5c9a      	ldrb	r2, [r3, r2]
   1e792:	6f3b      	ldr	r3, [r7, #112]	; 0x70
   1e794:	701a      	strb	r2, [r3, #0]
			if (size >= 0x10) {
   1e796:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   1e798:	2b0f      	cmp	r3, #15
   1e79a:	dd19      	ble.n	1e7d0 <_http_client_request+0x4ec>
				ptr = buffer + 1;
   1e79c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   1e79e:	3301      	adds	r3, #1
   1e7a0:	673b      	str	r3, [r7, #112]	; 0x70
				*ptr = CH_LUT[(size / 0x10) % 16];
   1e7a2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   1e7a4:	2b00      	cmp	r3, #0
   1e7a6:	da00      	bge.n	1e7aa <_http_client_request+0x4c6>
   1e7a8:	330f      	adds	r3, #15
   1e7aa:	111b      	asrs	r3, r3, #4
   1e7ac:	001a      	movs	r2, r3
   1e7ae:	4b8e      	ldr	r3, [pc, #568]	; (1e9e8 <_http_client_request+0x704>)
   1e7b0:	4013      	ands	r3, r2
   1e7b2:	d504      	bpl.n	1e7be <_http_client_request+0x4da>
   1e7b4:	3b01      	subs	r3, #1
   1e7b6:	2210      	movs	r2, #16
   1e7b8:	4252      	negs	r2, r2
   1e7ba:	4313      	orrs	r3, r2
   1e7bc:	3301      	adds	r3, #1
   1e7be:	001a      	movs	r2, r3
   1e7c0:	2318      	movs	r3, #24
   1e7c2:	2118      	movs	r1, #24
   1e7c4:	468c      	mov	ip, r1
   1e7c6:	44bc      	add	ip, r7
   1e7c8:	4463      	add	r3, ip
   1e7ca:	5c9a      	ldrb	r2, [r3, r2]
   1e7cc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
   1e7ce:	701a      	strb	r2, [r3, #0]
			if (size >= 0x100) {
   1e7d0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   1e7d2:	2bff      	cmp	r3, #255	; 0xff
   1e7d4:	dd18      	ble.n	1e808 <_http_client_request+0x524>
				ptr = buffer;
   1e7d6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   1e7d8:	673b      	str	r3, [r7, #112]	; 0x70
				*ptr = CH_LUT[(size / 0x100) % 16];
   1e7da:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   1e7dc:	2b00      	cmp	r3, #0
   1e7de:	da00      	bge.n	1e7e2 <_http_client_request+0x4fe>
   1e7e0:	33ff      	adds	r3, #255	; 0xff
   1e7e2:	121b      	asrs	r3, r3, #8
   1e7e4:	001a      	movs	r2, r3
   1e7e6:	4b80      	ldr	r3, [pc, #512]	; (1e9e8 <_http_client_request+0x704>)
   1e7e8:	4013      	ands	r3, r2
   1e7ea:	d504      	bpl.n	1e7f6 <_http_client_request+0x512>
   1e7ec:	3b01      	subs	r3, #1
   1e7ee:	2210      	movs	r2, #16
   1e7f0:	4252      	negs	r2, r2
   1e7f2:	4313      	orrs	r3, r2
   1e7f4:	3301      	adds	r3, #1
   1e7f6:	001a      	movs	r2, r3
   1e7f8:	2318      	movs	r3, #24
   1e7fa:	2118      	movs	r1, #24
   1e7fc:	468c      	mov	ip, r1
   1e7fe:	44bc      	add	ip, r7
   1e800:	4463      	add	r3, ip
   1e802:	5c9a      	ldrb	r2, [r3, r2]
   1e804:	6f3b      	ldr	r3, [r7, #112]	; 0x70
   1e806:	701a      	strb	r2, [r3, #0]
			if ((result = send(module->sock, (void*)ptr, ptr + HTTP_CHUNKED_MAX_LENGTH - buffer + size + 4, 0)) < 0) {	
   1e808:	69fb      	ldr	r3, [r7, #28]
   1e80a:	2000      	movs	r0, #0
   1e80c:	5618      	ldrsb	r0, [r3, r0]
   1e80e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
   1e810:	3303      	adds	r3, #3
   1e812:	001a      	movs	r2, r3
   1e814:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   1e816:	1ad3      	subs	r3, r2, r3
   1e818:	b29a      	uxth	r2, r3
   1e81a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   1e81c:	b29b      	uxth	r3, r3
   1e81e:	18d3      	adds	r3, r2, r3
   1e820:	b29b      	uxth	r3, r3
   1e822:	3304      	adds	r3, #4
   1e824:	b29a      	uxth	r2, r3
   1e826:	6f39      	ldr	r1, [r7, #112]	; 0x70
   1e828:	2300      	movs	r3, #0
   1e82a:	4c70      	ldr	r4, [pc, #448]	; (1e9ec <_http_client_request+0x708>)
   1e82c:	47a0      	blx	r4
   1e82e:	0003      	movs	r3, r0
   1e830:	663b      	str	r3, [r7, #96]	; 0x60
   1e832:	6e3b      	ldr	r3, [r7, #96]	; 0x60
   1e834:	2b00      	cmp	r3, #0
   1e836:	da07      	bge.n	1e848 <_http_client_request+0x564>
				_http_client_clear_conn(module, -EIO);
   1e838:	2305      	movs	r3, #5
   1e83a:	425a      	negs	r2, r3
   1e83c:	69fb      	ldr	r3, [r7, #28]
   1e83e:	0011      	movs	r1, r2
   1e840:	0018      	movs	r0, r3
   1e842:	4b6b      	ldr	r3, [pc, #428]	; (1e9f0 <_http_client_request+0x70c>)
   1e844:	4798      	blx	r3
				return;
   1e846:	e0e1      	b.n	1ea0c <_http_client_request+0x728>
			module->req.sent_length += size;
   1e848:	69fb      	ldr	r3, [r7, #28]
   1e84a:	22d0      	movs	r2, #208	; 0xd0
   1e84c:	589a      	ldr	r2, [r3, r2]
   1e84e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   1e850:	18d2      	adds	r2, r2, r3
   1e852:	69fb      	ldr	r3, [r7, #28]
   1e854:	21d0      	movs	r1, #208	; 0xd0
   1e856:	505a      	str	r2, [r3, r1]
			if(size == 0) {
   1e858:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   1e85a:	2b00      	cmp	r3, #0
   1e85c:	d000      	beq.n	1e860 <_http_client_request+0x57c>
   1e85e:	e0c9      	b.n	1e9f4 <_http_client_request+0x710>
				if (module->req.entity.close) {
   1e860:	69fb      	ldr	r3, [r7, #28]
   1e862:	22c0      	movs	r2, #192	; 0xc0
   1e864:	589b      	ldr	r3, [r3, r2]
   1e866:	2b00      	cmp	r3, #0
   1e868:	d007      	beq.n	1e87a <_http_client_request+0x596>
					module->req.entity.close(module->req.entity.priv_data);
   1e86a:	69fb      	ldr	r3, [r7, #28]
   1e86c:	22c0      	movs	r2, #192	; 0xc0
   1e86e:	589b      	ldr	r3, [r3, r2]
   1e870:	69fa      	ldr	r2, [r7, #28]
   1e872:	21c4      	movs	r1, #196	; 0xc4
   1e874:	5852      	ldr	r2, [r2, r1]
   1e876:	0010      	movs	r0, r2
   1e878:	4798      	blx	r3
				module->req.state = STATE_SOCK_CONNECTED;
   1e87a:	69fb      	ldr	r3, [r7, #28]
   1e87c:	2202      	movs	r2, #2
   1e87e:	66da      	str	r2, [r3, #108]	; 0x6c
				if (module->cb) {
   1e880:	69fb      	ldr	r3, [r7, #28]
   1e882:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   1e884:	2b00      	cmp	r3, #0
   1e886:	d100      	bne.n	1e88a <_http_client_request+0x5a6>
   1e888:	e0b5      	b.n	1e9f6 <_http_client_request+0x712>
					module->cb(module, HTTP_CLIENT_CALLBACK_REQUESTED, &data);
   1e88a:	69fb      	ldr	r3, [r7, #28]
   1e88c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   1e88e:	220c      	movs	r2, #12
   1e890:	2118      	movs	r1, #24
   1e892:	468c      	mov	ip, r1
   1e894:	44bc      	add	ip, r7
   1e896:	4462      	add	r2, ip
   1e898:	69f8      	ldr	r0, [r7, #28]
   1e89a:	2101      	movs	r1, #1
   1e89c:	4798      	blx	r3
				break;
   1e89e:	e0aa      	b.n	1e9f6 <_http_client_request+0x712>
		} else if (module->req.content_length > 0 && entity->read) {
   1e8a0:	69fb      	ldr	r3, [r7, #28]
   1e8a2:	22cc      	movs	r2, #204	; 0xcc
   1e8a4:	589b      	ldr	r3, [r3, r2]
   1e8a6:	2b00      	cmp	r3, #0
   1e8a8:	dc00      	bgt.n	1e8ac <_http_client_request+0x5c8>
   1e8aa:	e07c      	b.n	1e9a6 <_http_client_request+0x6c2>
   1e8ac:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   1e8ae:	68db      	ldr	r3, [r3, #12]
   1e8b0:	2b00      	cmp	r3, #0
   1e8b2:	d100      	bne.n	1e8b6 <_http_client_request+0x5d2>
   1e8b4:	e077      	b.n	1e9a6 <_http_client_request+0x6c2>
			if (module->req.sent_length >= module->req.content_length) {
   1e8b6:	69fb      	ldr	r3, [r7, #28]
   1e8b8:	22d0      	movs	r2, #208	; 0xd0
   1e8ba:	589a      	ldr	r2, [r3, r2]
   1e8bc:	69fb      	ldr	r3, [r7, #28]
   1e8be:	21cc      	movs	r1, #204	; 0xcc
   1e8c0:	585b      	ldr	r3, [r3, r1]
   1e8c2:	429a      	cmp	r2, r3
   1e8c4:	db1f      	blt.n	1e906 <_http_client_request+0x622>
				if (module->req.entity.close) {
   1e8c6:	69fb      	ldr	r3, [r7, #28]
   1e8c8:	22c0      	movs	r2, #192	; 0xc0
   1e8ca:	589b      	ldr	r3, [r3, r2]
   1e8cc:	2b00      	cmp	r3, #0
   1e8ce:	d007      	beq.n	1e8e0 <_http_client_request+0x5fc>
					module->req.entity.close(module->req.entity.priv_data);
   1e8d0:	69fb      	ldr	r3, [r7, #28]
   1e8d2:	22c0      	movs	r2, #192	; 0xc0
   1e8d4:	589b      	ldr	r3, [r3, r2]
   1e8d6:	69fa      	ldr	r2, [r7, #28]
   1e8d8:	21c4      	movs	r1, #196	; 0xc4
   1e8da:	5852      	ldr	r2, [r2, r1]
   1e8dc:	0010      	movs	r0, r2
   1e8de:	4798      	blx	r3
				module->req.state = STATE_SOCK_CONNECTED;
   1e8e0:	69fb      	ldr	r3, [r7, #28]
   1e8e2:	2202      	movs	r2, #2
   1e8e4:	66da      	str	r2, [r3, #108]	; 0x6c
				if (module->cb) {
   1e8e6:	69fb      	ldr	r3, [r7, #28]
   1e8e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   1e8ea:	2b00      	cmp	r3, #0
   1e8ec:	d100      	bne.n	1e8f0 <_http_client_request+0x60c>
   1e8ee:	e084      	b.n	1e9fa <_http_client_request+0x716>
					module->cb(module, HTTP_CLIENT_CALLBACK_REQUESTED, &data);
   1e8f0:	69fb      	ldr	r3, [r7, #28]
   1e8f2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   1e8f4:	220c      	movs	r2, #12
   1e8f6:	2118      	movs	r1, #24
   1e8f8:	468c      	mov	ip, r1
   1e8fa:	44bc      	add	ip, r7
   1e8fc:	4462      	add	r2, ip
   1e8fe:	69f8      	ldr	r0, [r7, #28]
   1e900:	2101      	movs	r1, #1
   1e902:	4798      	blx	r3
				break;
   1e904:	e079      	b.n	1e9fa <_http_client_request+0x716>
			size = entity->read(entity->priv_data, buffer, module->config.send_buffer_size, module->req.sent_length);
   1e906:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   1e908:	68dc      	ldr	r4, [r3, #12]
   1e90a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   1e90c:	6958      	ldr	r0, [r3, #20]
   1e90e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
   1e910:	69fb      	ldr	r3, [r7, #28]
   1e912:	6e5d      	ldr	r5, [r3, #100]	; 0x64
   1e914:	69fb      	ldr	r3, [r7, #28]
   1e916:	22d0      	movs	r2, #208	; 0xd0
   1e918:	589b      	ldr	r3, [r3, r2]
   1e91a:	002a      	movs	r2, r5
   1e91c:	47a0      	blx	r4
   1e91e:	0003      	movs	r3, r0
   1e920:	677b      	str	r3, [r7, #116]	; 0x74
			if (size < 0) {
   1e922:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   1e924:	2b00      	cmp	r3, #0
   1e926:	da0d      	bge.n	1e944 <_http_client_request+0x660>
				_http_client_clear_conn(module, (size == 0)?-EBADMSG:-EIO);
   1e928:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   1e92a:	2b00      	cmp	r3, #0
   1e92c:	d102      	bne.n	1e934 <_http_client_request+0x650>
   1e92e:	234d      	movs	r3, #77	; 0x4d
   1e930:	425b      	negs	r3, r3
   1e932:	e001      	b.n	1e938 <_http_client_request+0x654>
   1e934:	2305      	movs	r3, #5
   1e936:	425b      	negs	r3, r3
   1e938:	69fa      	ldr	r2, [r7, #28]
   1e93a:	0019      	movs	r1, r3
   1e93c:	0010      	movs	r0, r2
   1e93e:	4b2c      	ldr	r3, [pc, #176]	; (1e9f0 <_http_client_request+0x70c>)
   1e940:	4798      	blx	r3
			if (size < 0) {
   1e942:	e057      	b.n	1e9f4 <_http_client_request+0x710>
				if (size > module->req.content_length - module->req.sent_length) {
   1e944:	69fb      	ldr	r3, [r7, #28]
   1e946:	22cc      	movs	r2, #204	; 0xcc
   1e948:	589a      	ldr	r2, [r3, r2]
   1e94a:	69fb      	ldr	r3, [r7, #28]
   1e94c:	21d0      	movs	r1, #208	; 0xd0
   1e94e:	585b      	ldr	r3, [r3, r1]
   1e950:	1ad2      	subs	r2, r2, r3
   1e952:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   1e954:	429a      	cmp	r2, r3
   1e956:	da07      	bge.n	1e968 <_http_client_request+0x684>
					size = module->req.content_length - module->req.sent_length;
   1e958:	69fb      	ldr	r3, [r7, #28]
   1e95a:	22cc      	movs	r2, #204	; 0xcc
   1e95c:	589a      	ldr	r2, [r3, r2]
   1e95e:	69fb      	ldr	r3, [r7, #28]
   1e960:	21d0      	movs	r1, #208	; 0xd0
   1e962:	585b      	ldr	r3, [r3, r1]
   1e964:	1ad3      	subs	r3, r2, r3
   1e966:	677b      	str	r3, [r7, #116]	; 0x74
				if ((result = send(module->sock, (void*)buffer, size, 0)) < 0) {
   1e968:	69fb      	ldr	r3, [r7, #28]
   1e96a:	2000      	movs	r0, #0
   1e96c:	5618      	ldrsb	r0, [r3, r0]
   1e96e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
   1e970:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   1e972:	b29a      	uxth	r2, r3
   1e974:	2300      	movs	r3, #0
   1e976:	4c1d      	ldr	r4, [pc, #116]	; (1e9ec <_http_client_request+0x708>)
   1e978:	47a0      	blx	r4
   1e97a:	0003      	movs	r3, r0
   1e97c:	663b      	str	r3, [r7, #96]	; 0x60
   1e97e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
   1e980:	2b00      	cmp	r3, #0
   1e982:	da07      	bge.n	1e994 <_http_client_request+0x6b0>
					_http_client_clear_conn(module, -EIO);
   1e984:	2305      	movs	r3, #5
   1e986:	425a      	negs	r2, r3
   1e988:	69fb      	ldr	r3, [r7, #28]
   1e98a:	0011      	movs	r1, r2
   1e98c:	0018      	movs	r0, r3
   1e98e:	4b18      	ldr	r3, [pc, #96]	; (1e9f0 <_http_client_request+0x70c>)
   1e990:	4798      	blx	r3
					return;
   1e992:	e03b      	b.n	1ea0c <_http_client_request+0x728>
				module->req.sent_length += size;
   1e994:	69fb      	ldr	r3, [r7, #28]
   1e996:	22d0      	movs	r2, #208	; 0xd0
   1e998:	589a      	ldr	r2, [r3, r2]
   1e99a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   1e99c:	18d2      	adds	r2, r2, r3
   1e99e:	69fb      	ldr	r3, [r7, #28]
   1e9a0:	21d0      	movs	r1, #208	; 0xd0
   1e9a2:	505a      	str	r2, [r3, r1]
			if (size < 0) {
   1e9a4:	e026      	b.n	1e9f4 <_http_client_request+0x710>
			module->req.state = STATE_SOCK_CONNECTED;
   1e9a6:	69fb      	ldr	r3, [r7, #28]
   1e9a8:	2202      	movs	r2, #2
   1e9aa:	66da      	str	r2, [r3, #108]	; 0x6c
			if (module->cb) {
   1e9ac:	69fb      	ldr	r3, [r7, #28]
   1e9ae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   1e9b0:	2b00      	cmp	r3, #0
   1e9b2:	d024      	beq.n	1e9fe <_http_client_request+0x71a>
				module->cb(module, HTTP_CLIENT_CALLBACK_REQUESTED, &data);
   1e9b4:	69fb      	ldr	r3, [r7, #28]
   1e9b6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   1e9b8:	220c      	movs	r2, #12
   1e9ba:	2118      	movs	r1, #24
   1e9bc:	468c      	mov	ip, r1
   1e9be:	44bc      	add	ip, r7
   1e9c0:	4462      	add	r2, ip
   1e9c2:	69f8      	ldr	r0, [r7, #28]
   1e9c4:	2101      	movs	r1, #1
   1e9c6:	4798      	blx	r3
			break;
   1e9c8:	e019      	b.n	1e9fe <_http_client_request+0x71a>
   1e9ca:	46c0      	nop			; (mov r8, r8)
   1e9cc:	00026844 	.word	0x00026844
   1e9d0:	00021ad9 	.word	0x00021ad9
   1e9d4:	00026848 	.word	0x00026848
   1e9d8:	0001f245 	.word	0x0001f245
   1e9dc:	00021bd3 	.word	0x00021bd3
   1e9e0:	000267d0 	.word	0x000267d0
   1e9e4:	0001f281 	.word	0x0001f281
   1e9e8:	8000000f 	.word	0x8000000f
   1e9ec:	000127c9 	.word	0x000127c9
   1e9f0:	0001e191 	.word	0x0001e191
		break;
   1e9f4:	e004      	b.n	1ea00 <_http_client_request+0x71c>
				break;
   1e9f6:	46c0      	nop			; (mov r8, r8)
   1e9f8:	e002      	b.n	1ea00 <_http_client_request+0x71c>
				break;
   1e9fa:	46c0      	nop			; (mov r8, r8)
   1e9fc:	e000      	b.n	1ea00 <_http_client_request+0x71c>
			break;
   1e9fe:	46c0      	nop			; (mov r8, r8)
   1ea00:	69bb      	ldr	r3, [r7, #24]
   1ea02:	469d      	mov	sp, r3
   1ea04:	e004      	b.n	1ea10 <_http_client_request+0x72c>
		return;
   1ea06:	46c0      	nop			; (mov r8, r8)
   1ea08:	e000      	b.n	1ea0c <_http_client_request+0x728>
		return;
   1ea0a:	46c0      	nop			; (mov r8, r8)
   1ea0c:	69bb      	ldr	r3, [r7, #24]
   1ea0e:	469d      	mov	sp, r3
	}
}
   1ea10:	46bd      	mov	sp, r7
   1ea12:	b01e      	add	sp, #120	; 0x78
   1ea14:	bc04      	pop	{r2}
   1ea16:	4690      	mov	r8, r2
   1ea18:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1ea1a:	46c0      	nop			; (mov r8, r8)

0001ea1c <_http_client_recv_packet>:

void _http_client_recv_packet(struct http_client_module *const module)
{
   1ea1c:	b590      	push	{r4, r7, lr}
   1ea1e:	b083      	sub	sp, #12
   1ea20:	af00      	add	r7, sp, #0
   1ea22:	6078      	str	r0, [r7, #4]
	if (module == NULL) {
   1ea24:	687b      	ldr	r3, [r7, #4]
   1ea26:	2b00      	cmp	r3, #0
   1ea28:	d021      	beq.n	1ea6e <_http_client_recv_packet+0x52>
		return;
	}
	
	if (module->recved_size >= module->config.recv_buffer_size) {
   1ea2a:	687b      	ldr	r3, [r7, #4]
   1ea2c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
   1ea2e:	687b      	ldr	r3, [r7, #4]
   1ea30:	6e1b      	ldr	r3, [r3, #96]	; 0x60
   1ea32:	429a      	cmp	r2, r3
   1ea34:	d307      	bcc.n	1ea46 <_http_client_recv_packet+0x2a>
		/* Has not enough memory. */
		_http_client_clear_conn(module, -EOVERFLOW);
   1ea36:	238b      	movs	r3, #139	; 0x8b
   1ea38:	425a      	negs	r2, r3
   1ea3a:	687b      	ldr	r3, [r7, #4]
   1ea3c:	0011      	movs	r1, r2
   1ea3e:	0018      	movs	r0, r3
   1ea40:	4b0d      	ldr	r3, [pc, #52]	; (1ea78 <_http_client_recv_packet+0x5c>)
   1ea42:	4798      	blx	r3
		return;
   1ea44:	e014      	b.n	1ea70 <_http_client_recv_packet+0x54>
	/*
	while (recv(module->sock,
		module->config.recv_buffer + module->recved_size,
		module->config.recv_buffer_size - module->recved_size, 0) != 0);
	*/
	recv(module->sock,
   1ea46:	687b      	ldr	r3, [r7, #4]
   1ea48:	2000      	movs	r0, #0
   1ea4a:	5618      	ldrsb	r0, [r3, r0]
		module->config.recv_buffer + module->recved_size,
   1ea4c:	687b      	ldr	r3, [r7, #4]
   1ea4e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
   1ea50:	687b      	ldr	r3, [r7, #4]
   1ea52:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   1ea54:	18d1      	adds	r1, r2, r3
		module->config.recv_buffer_size - module->recved_size, 0);
   1ea56:	687b      	ldr	r3, [r7, #4]
   1ea58:	6e1b      	ldr	r3, [r3, #96]	; 0x60
	recv(module->sock,
   1ea5a:	b29a      	uxth	r2, r3
		module->config.recv_buffer_size - module->recved_size, 0);
   1ea5c:	687b      	ldr	r3, [r7, #4]
   1ea5e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
	recv(module->sock,
   1ea60:	b29b      	uxth	r3, r3
   1ea62:	1ad3      	subs	r3, r2, r3
   1ea64:	b29a      	uxth	r2, r3
   1ea66:	2300      	movs	r3, #0
   1ea68:	4c04      	ldr	r4, [pc, #16]	; (1ea7c <_http_client_recv_packet+0x60>)
   1ea6a:	47a0      	blx	r4
   1ea6c:	e000      	b.n	1ea70 <_http_client_recv_packet+0x54>
		return;
   1ea6e:	46c0      	nop			; (mov r8, r8)
}
   1ea70:	46bd      	mov	sp, r7
   1ea72:	b003      	add	sp, #12
   1ea74:	bd90      	pop	{r4, r7, pc}
   1ea76:	46c0      	nop			; (mov r8, r8)
   1ea78:	0001e191 	.word	0x0001e191
   1ea7c:	0001292d 	.word	0x0001292d

0001ea80 <_http_client_recved_packet>:

void _http_client_recved_packet(struct http_client_module *const module, int read_len)
{
   1ea80:	b580      	push	{r7, lr}
   1ea82:	b082      	sub	sp, #8
   1ea84:	af00      	add	r7, sp, #0
   1ea86:	6078      	str	r0, [r7, #4]
   1ea88:	6039      	str	r1, [r7, #0]
	module->recved_size += read_len;
   1ea8a:	687b      	ldr	r3, [r7, #4]
   1ea8c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
   1ea8e:	683b      	ldr	r3, [r7, #0]
   1ea90:	18d2      	adds	r2, r2, r3
   1ea92:	687b      	ldr	r3, [r7, #4]
   1ea94:	645a      	str	r2, [r3, #68]	; 0x44
	if (module->config.timeout > 0) {
   1ea96:	687b      	ldr	r3, [r7, #4]
   1ea98:	2258      	movs	r2, #88	; 0x58
   1ea9a:	5a9b      	ldrh	r3, [r3, r2]
   1ea9c:	2b00      	cmp	r3, #0
   1ea9e:	d007      	beq.n	1eab0 <_http_client_recved_packet+0x30>
		sw_timer_disable_callback(module->config.timer_inst, module->timer_id);
   1eaa0:	687b      	ldr	r3, [r7, #4]
   1eaa2:	6d5a      	ldr	r2, [r3, #84]	; 0x54
   1eaa4:	687b      	ldr	r3, [r7, #4]
   1eaa6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   1eaa8:	0019      	movs	r1, r3
   1eaaa:	0010      	movs	r0, r2
   1eaac:	4b06      	ldr	r3, [pc, #24]	; (1eac8 <_http_client_recved_packet+0x48>)
   1eaae:	4798      	blx	r3
	}

	/* Recursive function call can be occurred overflow. */
	while(_http_client_handle_response(module) != 0);
   1eab0:	46c0      	nop			; (mov r8, r8)
   1eab2:	687b      	ldr	r3, [r7, #4]
   1eab4:	0018      	movs	r0, r3
   1eab6:	4b05      	ldr	r3, [pc, #20]	; (1eacc <_http_client_recved_packet+0x4c>)
   1eab8:	4798      	blx	r3
   1eaba:	1e03      	subs	r3, r0, #0
   1eabc:	d1f9      	bne.n	1eab2 <_http_client_recved_packet+0x32>
}
   1eabe:	46c0      	nop			; (mov r8, r8)
   1eac0:	46bd      	mov	sp, r7
   1eac2:	b002      	add	sp, #8
   1eac4:	bd80      	pop	{r7, pc}
   1eac6:	46c0      	nop			; (mov r8, r8)
   1eac8:	0001f53d 	.word	0x0001f53d
   1eacc:	0001ead1 	.word	0x0001ead1

0001ead0 <_http_client_handle_response>:

int _http_client_handle_response(struct http_client_module *const module)
{
   1ead0:	b580      	push	{r7, lr}
   1ead2:	b082      	sub	sp, #8
   1ead4:	af00      	add	r7, sp, #0
   1ead6:	6078      	str	r0, [r7, #4]
	switch(module->resp.state) {
   1ead8:	687b      	ldr	r3, [r7, #4]
   1eada:	22d8      	movs	r2, #216	; 0xd8
   1eadc:	589b      	ldr	r3, [r3, r2]
   1eade:	2b00      	cmp	r3, #0
   1eae0:	d002      	beq.n	1eae8 <_http_client_handle_response+0x18>
   1eae2:	2b01      	cmp	r3, #1
   1eae4:	d006      	beq.n	1eaf4 <_http_client_handle_response+0x24>
   1eae6:	e00b      	b.n	1eb00 <_http_client_handle_response+0x30>
	case STATE_PARSE_HEADER:
		return _http_client_handle_header(module);
   1eae8:	687b      	ldr	r3, [r7, #4]
   1eaea:	0018      	movs	r0, r3
   1eaec:	4b07      	ldr	r3, [pc, #28]	; (1eb0c <_http_client_handle_response+0x3c>)
   1eaee:	4798      	blx	r3
   1eaf0:	0003      	movs	r3, r0
   1eaf2:	e006      	b.n	1eb02 <_http_client_handle_response+0x32>
	case STATE_PARSE_ENTITY:
		return _http_client_handle_entity(module);
   1eaf4:	687b      	ldr	r3, [r7, #4]
   1eaf6:	0018      	movs	r0, r3
   1eaf8:	4b05      	ldr	r3, [pc, #20]	; (1eb10 <_http_client_handle_response+0x40>)
   1eafa:	4798      	blx	r3
   1eafc:	0003      	movs	r3, r0
   1eafe:	e000      	b.n	1eb02 <_http_client_handle_response+0x32>
	}
	return 0;
   1eb00:	2300      	movs	r3, #0
}
   1eb02:	0018      	movs	r0, r3
   1eb04:	46bd      	mov	sp, r7
   1eb06:	b002      	add	sp, #8
   1eb08:	bd80      	pop	{r7, pc}
   1eb0a:	46c0      	nop			; (mov r8, r8)
   1eb0c:	0001eb15 	.word	0x0001eb15
   1eb10:	0001efcd 	.word	0x0001efcd

0001eb14 <_http_client_handle_header>:

int _http_client_handle_header(struct http_client_module *const module)
{
   1eb14:	b590      	push	{r4, r7, lr}
   1eb16:	b08b      	sub	sp, #44	; 0x2c
   1eb18:	af00      	add	r7, sp, #0
   1eb1a:	6078      	str	r0, [r7, #4]
	/* New line character only used in this function. So variable registered in the code region. */
	static const char *new_line = "\r\n";

	//TODO : header filter

	for (ptr = module->config.recv_buffer ; ; ) {
   1eb1c:	687b      	ldr	r3, [r7, #4]
   1eb1e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
   1eb20:	627b      	str	r3, [r7, #36]	; 0x24
		ptr_line_end = strstr(ptr, new_line);
   1eb22:	4b9a      	ldr	r3, [pc, #616]	; (1ed8c <_http_client_handle_header+0x278>)
   1eb24:	681a      	ldr	r2, [r3, #0]
   1eb26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1eb28:	0011      	movs	r1, r2
   1eb2a:	0018      	movs	r0, r3
   1eb2c:	4b98      	ldr	r3, [pc, #608]	; (1ed90 <_http_client_handle_header+0x27c>)
   1eb2e:	4798      	blx	r3
   1eb30:	0003      	movs	r3, r0
   1eb32:	61bb      	str	r3, [r7, #24]
		if (ptr_line_end == NULL || ptr_line_end >= module->config.recv_buffer + module->recved_size) {
   1eb34:	69bb      	ldr	r3, [r7, #24]
   1eb36:	2b00      	cmp	r3, #0
   1eb38:	d007      	beq.n	1eb4a <_http_client_handle_header+0x36>
   1eb3a:	687b      	ldr	r3, [r7, #4]
   1eb3c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
   1eb3e:	687b      	ldr	r3, [r7, #4]
   1eb40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   1eb42:	18d2      	adds	r2, r2, r3
   1eb44:	69bb      	ldr	r3, [r7, #24]
   1eb46:	429a      	cmp	r2, r3
   1eb48:	d807      	bhi.n	1eb5a <_http_client_handle_header+0x46>
			/* not enough buffer. */
			_http_client_move_buffer(module, ptr);
   1eb4a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   1eb4c:	687b      	ldr	r3, [r7, #4]
   1eb4e:	0011      	movs	r1, r2
   1eb50:	0018      	movs	r0, r3
   1eb52:	4b90      	ldr	r3, [pc, #576]	; (1ed94 <_http_client_handle_header+0x280>)
   1eb54:	4798      	blx	r3
			return 0;
   1eb56:	2300      	movs	r3, #0
   1eb58:	e114      	b.n	1ed84 <_http_client_handle_header+0x270>
		}

		if (!strncmp(ptr, new_line, strlen(new_line))) {
   1eb5a:	4b8c      	ldr	r3, [pc, #560]	; (1ed8c <_http_client_handle_header+0x278>)
   1eb5c:	681c      	ldr	r4, [r3, #0]
   1eb5e:	4b8b      	ldr	r3, [pc, #556]	; (1ed8c <_http_client_handle_header+0x278>)
   1eb60:	681b      	ldr	r3, [r3, #0]
   1eb62:	0018      	movs	r0, r3
   1eb64:	4b8c      	ldr	r3, [pc, #560]	; (1ed98 <_http_client_handle_header+0x284>)
   1eb66:	4798      	blx	r3
   1eb68:	0002      	movs	r2, r0
   1eb6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1eb6c:	0021      	movs	r1, r4
   1eb6e:	0018      	movs	r0, r3
   1eb70:	4b8a      	ldr	r3, [pc, #552]	; (1ed9c <_http_client_handle_header+0x288>)
   1eb72:	4798      	blx	r3
   1eb74:	1e03      	subs	r3, r0, #0
   1eb76:	d15d      	bne.n	1ec34 <_http_client_handle_header+0x120>
			/* Move remain data to forward part of buffer. */
			_http_client_move_buffer(module, ptr + strlen(new_line));
   1eb78:	4b84      	ldr	r3, [pc, #528]	; (1ed8c <_http_client_handle_header+0x278>)
   1eb7a:	681b      	ldr	r3, [r3, #0]
   1eb7c:	0018      	movs	r0, r3
   1eb7e:	4b86      	ldr	r3, [pc, #536]	; (1ed98 <_http_client_handle_header+0x284>)
   1eb80:	4798      	blx	r3
   1eb82:	0002      	movs	r2, r0
   1eb84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1eb86:	189a      	adds	r2, r3, r2
   1eb88:	687b      	ldr	r3, [r7, #4]
   1eb8a:	0011      	movs	r1, r2
   1eb8c:	0018      	movs	r0, r3
   1eb8e:	4b81      	ldr	r3, [pc, #516]	; (1ed94 <_http_client_handle_header+0x280>)
   1eb90:	4798      	blx	r3

			/* Check validation first. */
			if (module->cb && module->resp.response_code) {
   1eb92:	687b      	ldr	r3, [r7, #4]
   1eb94:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   1eb96:	2b00      	cmp	r3, #0
   1eb98:	d046      	beq.n	1ec28 <_http_client_handle_header+0x114>
   1eb9a:	687b      	ldr	r3, [r7, #4]
   1eb9c:	22e4      	movs	r2, #228	; 0xe4
   1eb9e:	5a9b      	ldrh	r3, [r3, r2]
   1eba0:	2b00      	cmp	r3, #0
   1eba2:	d041      	beq.n	1ec28 <_http_client_handle_header+0x114>
				/* Chunked transfer */
				if (module->resp.content_length < 0) {
   1eba4:	687b      	ldr	r3, [r7, #4]
   1eba6:	22dc      	movs	r2, #220	; 0xdc
   1eba8:	589b      	ldr	r3, [r3, r2]
   1ebaa:	2b00      	cmp	r3, #0
   1ebac:	da19      	bge.n	1ebe2 <_http_client_handle_header+0xce>
					data.recv_response.response_code = module->resp.response_code;
   1ebae:	687b      	ldr	r3, [r7, #4]
   1ebb0:	22e4      	movs	r2, #228	; 0xe4
   1ebb2:	5a9a      	ldrh	r2, [r3, r2]
   1ebb4:	230c      	movs	r3, #12
   1ebb6:	18fb      	adds	r3, r7, r3
   1ebb8:	801a      	strh	r2, [r3, #0]
					data.recv_response.is_chunked = 1;
   1ebba:	230c      	movs	r3, #12
   1ebbc:	18fb      	adds	r3, r7, r3
   1ebbe:	2201      	movs	r2, #1
   1ebc0:	709a      	strb	r2, [r3, #2]
					module->resp.read_length = 0;
   1ebc2:	687b      	ldr	r3, [r7, #4]
   1ebc4:	22e0      	movs	r2, #224	; 0xe0
   1ebc6:	2100      	movs	r1, #0
   1ebc8:	5099      	str	r1, [r3, r2]
					data.recv_response.content = NULL;
   1ebca:	230c      	movs	r3, #12
   1ebcc:	18fb      	adds	r3, r7, r3
   1ebce:	2200      	movs	r2, #0
   1ebd0:	609a      	str	r2, [r3, #8]
					module->cb(module, HTTP_CLIENT_CALLBACK_RECV_RESPONSE, &data);
   1ebd2:	687b      	ldr	r3, [r7, #4]
   1ebd4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   1ebd6:	220c      	movs	r2, #12
   1ebd8:	18ba      	adds	r2, r7, r2
   1ebda:	6878      	ldr	r0, [r7, #4]
   1ebdc:	2102      	movs	r1, #2
   1ebde:	4798      	blx	r3
   1ebe0:	e022      	b.n	1ec28 <_http_client_handle_header+0x114>
				} else if (module->resp.content_length > (int)module->config.recv_buffer_size) {
   1ebe2:	687b      	ldr	r3, [r7, #4]
   1ebe4:	22dc      	movs	r2, #220	; 0xdc
   1ebe6:	589a      	ldr	r2, [r3, r2]
   1ebe8:	687b      	ldr	r3, [r7, #4]
   1ebea:	6e1b      	ldr	r3, [r3, #96]	; 0x60
   1ebec:	429a      	cmp	r2, r3
   1ebee:	dd1b      	ble.n	1ec28 <_http_client_handle_header+0x114>
					/* Entity is bigger than receive buffer. Sending the buffer to user like chunked transfer. */
					data.recv_response.response_code = module->resp.response_code;
   1ebf0:	687b      	ldr	r3, [r7, #4]
   1ebf2:	22e4      	movs	r2, #228	; 0xe4
   1ebf4:	5a9a      	ldrh	r2, [r3, r2]
   1ebf6:	230c      	movs	r3, #12
   1ebf8:	18fb      	adds	r3, r7, r3
   1ebfa:	801a      	strh	r2, [r3, #0]
					data.recv_response.content_length = module->resp.content_length;
   1ebfc:	687b      	ldr	r3, [r7, #4]
   1ebfe:	22dc      	movs	r2, #220	; 0xdc
   1ec00:	589b      	ldr	r3, [r3, r2]
   1ec02:	001a      	movs	r2, r3
   1ec04:	230c      	movs	r3, #12
   1ec06:	18fb      	adds	r3, r7, r3
   1ec08:	605a      	str	r2, [r3, #4]
					data.recv_response.content = NULL;
   1ec0a:	230c      	movs	r3, #12
   1ec0c:	18fb      	adds	r3, r7, r3
   1ec0e:	2200      	movs	r2, #0
   1ec10:	609a      	str	r2, [r3, #8]
					module->resp.read_length = 0;
   1ec12:	687b      	ldr	r3, [r7, #4]
   1ec14:	22e0      	movs	r2, #224	; 0xe0
   1ec16:	2100      	movs	r1, #0
   1ec18:	5099      	str	r1, [r3, r2]
					module->cb(module, HTTP_CLIENT_CALLBACK_RECV_RESPONSE, &data);
   1ec1a:	687b      	ldr	r3, [r7, #4]
   1ec1c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   1ec1e:	220c      	movs	r2, #12
   1ec20:	18ba      	adds	r2, r7, r2
   1ec22:	6878      	ldr	r0, [r7, #4]
   1ec24:	2102      	movs	r1, #2
   1ec26:	4798      	blx	r3
				}
			}

			module->resp.state = STATE_PARSE_ENTITY;
   1ec28:	687b      	ldr	r3, [r7, #4]
   1ec2a:	22d8      	movs	r2, #216	; 0xd8
   1ec2c:	2101      	movs	r1, #1
   1ec2e:	5099      	str	r1, [r3, r2]
			return 1;
   1ec30:	2301      	movs	r3, #1
   1ec32:	e0a7      	b.n	1ed84 <_http_client_handle_header+0x270>
		} else if (!strncmp(ptr, "Content-Length: ", strlen("Content-Length: "))) {
   1ec34:	495a      	ldr	r1, [pc, #360]	; (1eda0 <_http_client_handle_header+0x28c>)
   1ec36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1ec38:	2210      	movs	r2, #16
   1ec3a:	0018      	movs	r0, r3
   1ec3c:	4b57      	ldr	r3, [pc, #348]	; (1ed9c <_http_client_handle_header+0x288>)
   1ec3e:	4798      	blx	r3
   1ec40:	1e03      	subs	r3, r0, #0
   1ec42:	d109      	bne.n	1ec58 <_http_client_handle_header+0x144>
			module->resp.content_length = atoi(ptr + strlen("Content-Length: "));
   1ec44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1ec46:	3310      	adds	r3, #16
   1ec48:	0018      	movs	r0, r3
   1ec4a:	4b56      	ldr	r3, [pc, #344]	; (1eda4 <_http_client_handle_header+0x290>)
   1ec4c:	4798      	blx	r3
   1ec4e:	0001      	movs	r1, r0
   1ec50:	687b      	ldr	r3, [r7, #4]
   1ec52:	22dc      	movs	r2, #220	; 0xdc
   1ec54:	5099      	str	r1, [r3, r2]
   1ec56:	e08b      	b.n	1ed70 <_http_client_handle_header+0x25c>
		} else if (!strncmp(ptr, "Transfer-Encoding: ", strlen("Transfer-Encoding: "))) {
   1ec58:	4953      	ldr	r1, [pc, #332]	; (1eda8 <_http_client_handle_header+0x294>)
   1ec5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1ec5c:	2213      	movs	r2, #19
   1ec5e:	0018      	movs	r0, r3
   1ec60:	4b4e      	ldr	r3, [pc, #312]	; (1ed9c <_http_client_handle_header+0x288>)
   1ec62:	4798      	blx	r3
   1ec64:	1e03      	subs	r3, r0, #0
   1ec66:	d127      	bne.n	1ecb8 <_http_client_handle_header+0x1a4>
			/* Currently does not support gzip or deflate encoding. If received this header, disconnect session immediately*/
			char *type_ptr = ptr + strlen("Transfer-Encoding: ");
   1ec68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1ec6a:	3313      	adds	r3, #19
   1ec6c:	623b      	str	r3, [r7, #32]
			for (; ptr_line_end > type_ptr; type_ptr++) {
   1ec6e:	e01e      	b.n	1ecae <_http_client_handle_header+0x19a>
				if (*type_ptr == ' ') {
   1ec70:	6a3b      	ldr	r3, [r7, #32]
   1ec72:	781b      	ldrb	r3, [r3, #0]
   1ec74:	2b20      	cmp	r3, #32
   1ec76:	d103      	bne.n	1ec80 <_http_client_handle_header+0x16c>
			for (; ptr_line_end > type_ptr; type_ptr++) {
   1ec78:	6a3b      	ldr	r3, [r7, #32]
   1ec7a:	3301      	adds	r3, #1
   1ec7c:	623b      	str	r3, [r7, #32]
   1ec7e:	e016      	b.n	1ecae <_http_client_handle_header+0x19a>
					continue;
				} else if (*type_ptr == 'C' || *type_ptr == 'c') {
   1ec80:	6a3b      	ldr	r3, [r7, #32]
   1ec82:	781b      	ldrb	r3, [r3, #0]
   1ec84:	2b43      	cmp	r3, #67	; 0x43
   1ec86:	d003      	beq.n	1ec90 <_http_client_handle_header+0x17c>
   1ec88:	6a3b      	ldr	r3, [r7, #32]
   1ec8a:	781b      	ldrb	r3, [r3, #0]
   1ec8c:	2b63      	cmp	r3, #99	; 0x63
   1ec8e:	d105      	bne.n	1ec9c <_http_client_handle_header+0x188>
					/* Chunked transfer */
					module->req.content_length = -1;
   1ec90:	687b      	ldr	r3, [r7, #4]
   1ec92:	21cc      	movs	r1, #204	; 0xcc
   1ec94:	2201      	movs	r2, #1
   1ec96:	4252      	negs	r2, r2
   1ec98:	505a      	str	r2, [r3, r1]
				} else {
					_http_client_clear_conn(module, -ENOTSUP);
					return 0;
				}
				break;
   1ec9a:	e069      	b.n	1ed70 <_http_client_handle_header+0x25c>
					_http_client_clear_conn(module, -ENOTSUP);
   1ec9c:	2386      	movs	r3, #134	; 0x86
   1ec9e:	425a      	negs	r2, r3
   1eca0:	687b      	ldr	r3, [r7, #4]
   1eca2:	0011      	movs	r1, r2
   1eca4:	0018      	movs	r0, r3
   1eca6:	4b41      	ldr	r3, [pc, #260]	; (1edac <_http_client_handle_header+0x298>)
   1eca8:	4798      	blx	r3
					return 0;
   1ecaa:	2300      	movs	r3, #0
   1ecac:	e06a      	b.n	1ed84 <_http_client_handle_header+0x270>
			for (; ptr_line_end > type_ptr; type_ptr++) {
   1ecae:	69ba      	ldr	r2, [r7, #24]
   1ecb0:	6a3b      	ldr	r3, [r7, #32]
   1ecb2:	429a      	cmp	r2, r3
   1ecb4:	d8dc      	bhi.n	1ec70 <_http_client_handle_header+0x15c>
   1ecb6:	e05b      	b.n	1ed70 <_http_client_handle_header+0x25c>
			}
		} else if (!strncmp(ptr, "Connection: ", strlen("Connection: "))) {
   1ecb8:	493d      	ldr	r1, [pc, #244]	; (1edb0 <_http_client_handle_header+0x29c>)
   1ecba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1ecbc:	220c      	movs	r2, #12
   1ecbe:	0018      	movs	r0, r3
   1ecc0:	4b36      	ldr	r3, [pc, #216]	; (1ed9c <_http_client_handle_header+0x288>)
   1ecc2:	4798      	blx	r3
   1ecc4:	1e03      	subs	r3, r0, #0
   1ecc6:	d126      	bne.n	1ed16 <_http_client_handle_header+0x202>
			char *type_ptr = ptr + strlen("Connection: ");
   1ecc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1ecca:	330c      	adds	r3, #12
   1eccc:	61fb      	str	r3, [r7, #28]
			for (; ptr_line_end > type_ptr; type_ptr++) {
   1ecce:	e01d      	b.n	1ed0c <_http_client_handle_header+0x1f8>
				if (*type_ptr == ' ') {
   1ecd0:	69fb      	ldr	r3, [r7, #28]
   1ecd2:	781b      	ldrb	r3, [r3, #0]
   1ecd4:	2b20      	cmp	r3, #32
   1ecd6:	d103      	bne.n	1ece0 <_http_client_handle_header+0x1cc>
			for (; ptr_line_end > type_ptr; type_ptr++) {
   1ecd8:	69fb      	ldr	r3, [r7, #28]
   1ecda:	3301      	adds	r3, #1
   1ecdc:	61fb      	str	r3, [r7, #28]
   1ecde:	e015      	b.n	1ed0c <_http_client_handle_header+0x1f8>
					continue;
				} else if (*type_ptr == 'K' || *type_ptr == 'k') {
   1ece0:	69fb      	ldr	r3, [r7, #28]
   1ece2:	781b      	ldrb	r3, [r3, #0]
   1ece4:	2b4b      	cmp	r3, #75	; 0x4b
   1ece6:	d003      	beq.n	1ecf0 <_http_client_handle_header+0x1dc>
   1ece8:	69fb      	ldr	r3, [r7, #28]
   1ecea:	781b      	ldrb	r3, [r3, #0]
   1ecec:	2b6b      	cmp	r3, #107	; 0x6b
   1ecee:	d106      	bne.n	1ecfe <_http_client_handle_header+0x1ea>
					module->permanent = 1;
   1ecf0:	687b      	ldr	r3, [r7, #4]
   1ecf2:	2241      	movs	r2, #65	; 0x41
   1ecf4:	5c99      	ldrb	r1, [r3, r2]
   1ecf6:	2002      	movs	r0, #2
   1ecf8:	4301      	orrs	r1, r0
   1ecfa:	5499      	strb	r1, [r3, r2]
				} else {
					module->permanent = 0;
				}
				break;
   1ecfc:	e038      	b.n	1ed70 <_http_client_handle_header+0x25c>
					module->permanent = 0;
   1ecfe:	687b      	ldr	r3, [r7, #4]
   1ed00:	2241      	movs	r2, #65	; 0x41
   1ed02:	5c99      	ldrb	r1, [r3, r2]
   1ed04:	2002      	movs	r0, #2
   1ed06:	4381      	bics	r1, r0
   1ed08:	5499      	strb	r1, [r3, r2]
				break;
   1ed0a:	e031      	b.n	1ed70 <_http_client_handle_header+0x25c>
			for (; ptr_line_end > type_ptr; type_ptr++) {
   1ed0c:	69ba      	ldr	r2, [r7, #24]
   1ed0e:	69fb      	ldr	r3, [r7, #28]
   1ed10:	429a      	cmp	r2, r3
   1ed12:	d8dd      	bhi.n	1ecd0 <_http_client_handle_header+0x1bc>
   1ed14:	e02c      	b.n	1ed70 <_http_client_handle_header+0x25c>
			}
		} else if (!strncmp(ptr, "HTTP/", 5)) {
   1ed16:	4927      	ldr	r1, [pc, #156]	; (1edb4 <_http_client_handle_header+0x2a0>)
   1ed18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1ed1a:	2205      	movs	r2, #5
   1ed1c:	0018      	movs	r0, r3
   1ed1e:	4b1f      	ldr	r3, [pc, #124]	; (1ed9c <_http_client_handle_header+0x288>)
   1ed20:	4798      	blx	r3
   1ed22:	1e03      	subs	r3, r0, #0
   1ed24:	d124      	bne.n	1ed70 <_http_client_handle_header+0x25c>
			module->resp.response_code = atoi(ptr + 9); /* HTTP/{Ver} {Code} {Desc} : HTTP/1.1 200 OK */
   1ed26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1ed28:	3309      	adds	r3, #9
   1ed2a:	0018      	movs	r0, r3
   1ed2c:	4b1d      	ldr	r3, [pc, #116]	; (1eda4 <_http_client_handle_header+0x290>)
   1ed2e:	4798      	blx	r3
   1ed30:	0003      	movs	r3, r0
   1ed32:	b299      	uxth	r1, r3
   1ed34:	687b      	ldr	r3, [r7, #4]
   1ed36:	22e4      	movs	r2, #228	; 0xe4
   1ed38:	5299      	strh	r1, [r3, r2]
			/* Initializing the variables */
			module->resp.content_length = 0;
   1ed3a:	687b      	ldr	r3, [r7, #4]
   1ed3c:	22dc      	movs	r2, #220	; 0xdc
   1ed3e:	2100      	movs	r1, #0
   1ed40:	5099      	str	r1, [r3, r2]
			/* persistent connection is turn on in the HTTP 1.1 or above version of protocols. */  
			if (ptr [5] > '1' || ptr[7] > '0') {
   1ed42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1ed44:	3305      	adds	r3, #5
   1ed46:	781b      	ldrb	r3, [r3, #0]
   1ed48:	2b31      	cmp	r3, #49	; 0x31
   1ed4a:	d804      	bhi.n	1ed56 <_http_client_handle_header+0x242>
   1ed4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1ed4e:	3307      	adds	r3, #7
   1ed50:	781b      	ldrb	r3, [r3, #0]
   1ed52:	2b30      	cmp	r3, #48	; 0x30
   1ed54:	d906      	bls.n	1ed64 <_http_client_handle_header+0x250>
				module->permanent = 1;
   1ed56:	687b      	ldr	r3, [r7, #4]
   1ed58:	2241      	movs	r2, #65	; 0x41
   1ed5a:	5c99      	ldrb	r1, [r3, r2]
   1ed5c:	2002      	movs	r0, #2
   1ed5e:	4301      	orrs	r1, r0
   1ed60:	5499      	strb	r1, [r3, r2]
   1ed62:	e005      	b.n	1ed70 <_http_client_handle_header+0x25c>
			} else {
				module->permanent = 0;
   1ed64:	687b      	ldr	r3, [r7, #4]
   1ed66:	2241      	movs	r2, #65	; 0x41
   1ed68:	5c99      	ldrb	r1, [r3, r2]
   1ed6a:	2002      	movs	r0, #2
   1ed6c:	4381      	bics	r1, r0
   1ed6e:	5499      	strb	r1, [r3, r2]
			}
		}

		ptr = ptr_line_end + strlen(new_line);
   1ed70:	4b06      	ldr	r3, [pc, #24]	; (1ed8c <_http_client_handle_header+0x278>)
   1ed72:	681b      	ldr	r3, [r3, #0]
   1ed74:	0018      	movs	r0, r3
   1ed76:	4b08      	ldr	r3, [pc, #32]	; (1ed98 <_http_client_handle_header+0x284>)
   1ed78:	4798      	blx	r3
   1ed7a:	0002      	movs	r2, r0
   1ed7c:	69bb      	ldr	r3, [r7, #24]
   1ed7e:	189b      	adds	r3, r3, r2
   1ed80:	627b      	str	r3, [r7, #36]	; 0x24
		ptr_line_end = strstr(ptr, new_line);
   1ed82:	e6ce      	b.n	1eb22 <_http_client_handle_header+0xe>
	}
}
   1ed84:	0018      	movs	r0, r3
   1ed86:	46bd      	mov	sp, r7
   1ed88:	b00b      	add	sp, #44	; 0x2c
   1ed8a:	bd90      	pop	{r4, r7, pc}
   1ed8c:	2000011c 	.word	0x2000011c
   1ed90:	00021c51 	.word	0x00021c51
   1ed94:	0001f179 	.word	0x0001f179
   1ed98:	00021bd3 	.word	0x00021bd3
   1ed9c:	00021be1 	.word	0x00021be1
   1eda0:	00026848 	.word	0x00026848
   1eda4:	00021769 	.word	0x00021769
   1eda8:	0002686c 	.word	0x0002686c
   1edac:	0001e191 	.word	0x0001e191
   1edb0:	00026880 	.word	0x00026880
   1edb4:	00026890 	.word	0x00026890

0001edb8 <_http_client_read_chuked_entity>:

static void _http_client_read_chuked_entity(struct http_client_module *const module)
{
   1edb8:	b580      	push	{r7, lr}
   1edba:	b088      	sub	sp, #32
   1edbc:	af00      	add	r7, sp, #0
   1edbe:	6078      	str	r0, [r7, #4]
	/* In chunked mode, read_length variable is means to remain data in the chunk. */
	union http_client_data data;
	int length = (int)module->recved_size;
   1edc0:	687b      	ldr	r3, [r7, #4]
   1edc2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   1edc4:	61fb      	str	r3, [r7, #28]
	int extension = 0;
   1edc6:	2300      	movs	r3, #0
   1edc8:	61bb      	str	r3, [r7, #24]
	char *buffer= module->config.recv_buffer;
   1edca:	687b      	ldr	r3, [r7, #4]
   1edcc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
   1edce:	617b      	str	r3, [r7, #20]

	do {
		if (module->resp.read_length >= 0) {
   1edd0:	687b      	ldr	r3, [r7, #4]
   1edd2:	22e0      	movs	r2, #224	; 0xe0
   1edd4:	589b      	ldr	r3, [r3, r2]
   1edd6:	2b00      	cmp	r3, #0
   1edd8:	db71      	blt.n	1eebe <_http_client_read_chuked_entity+0x106>
			if (module->resp.read_length == 0) {
   1edda:	687b      	ldr	r3, [r7, #4]
   1eddc:	22e0      	movs	r2, #224	; 0xe0
   1edde:	589b      	ldr	r3, [r3, r2]
   1ede0:	2b00      	cmp	r3, #0
   1ede2:	d134      	bne.n	1ee4e <_http_client_read_chuked_entity+0x96>
				/* Complete to receive the buffer. */
				module->resp.state = STATE_PARSE_HEADER;
   1ede4:	687b      	ldr	r3, [r7, #4]
   1ede6:	22d8      	movs	r2, #216	; 0xd8
   1ede8:	2100      	movs	r1, #0
   1edea:	5099      	str	r1, [r3, r2]
				module->resp.response_code = 0;
   1edec:	687b      	ldr	r3, [r7, #4]
   1edee:	22e4      	movs	r2, #228	; 0xe4
   1edf0:	2100      	movs	r1, #0
   1edf2:	5299      	strh	r1, [r3, r2]
				data.recv_chunked_data.is_complete = 1;
   1edf4:	2308      	movs	r3, #8
   1edf6:	18fb      	adds	r3, r7, r3
   1edf8:	2201      	movs	r2, #1
   1edfa:	721a      	strb	r2, [r3, #8]
				data.recv_chunked_data.length = 0;
   1edfc:	2308      	movs	r3, #8
   1edfe:	18fb      	adds	r3, r7, r3
   1ee00:	2200      	movs	r2, #0
   1ee02:	601a      	str	r2, [r3, #0]
				data.recv_chunked_data.data = NULL;
   1ee04:	2308      	movs	r3, #8
   1ee06:	18fb      	adds	r3, r7, r3
   1ee08:	2200      	movs	r2, #0
   1ee0a:	605a      	str	r2, [r3, #4]
				if (module->cb) {
   1ee0c:	687b      	ldr	r3, [r7, #4]
   1ee0e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   1ee10:	2b00      	cmp	r3, #0
   1ee12:	d006      	beq.n	1ee22 <_http_client_read_chuked_entity+0x6a>
					module->cb(module, HTTP_CLIENT_CALLBACK_RECV_CHUNKED_DATA, &data);
   1ee14:	687b      	ldr	r3, [r7, #4]
   1ee16:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   1ee18:	2208      	movs	r2, #8
   1ee1a:	18ba      	adds	r2, r7, r2
   1ee1c:	6878      	ldr	r0, [r7, #4]
   1ee1e:	2103      	movs	r1, #3
   1ee20:	4798      	blx	r3
				}
				if (module->permanent == 0) {
   1ee22:	687b      	ldr	r3, [r7, #4]
   1ee24:	2241      	movs	r2, #65	; 0x41
   1ee26:	5c9b      	ldrb	r3, [r3, r2]
   1ee28:	2202      	movs	r2, #2
   1ee2a:	4013      	ands	r3, r2
   1ee2c:	b2db      	uxtb	r3, r3
   1ee2e:	2b00      	cmp	r3, #0
   1ee30:	d105      	bne.n	1ee3e <_http_client_read_chuked_entity+0x86>
					/* This server was not supported keep alive. */
					_http_client_clear_conn(module, 0);
   1ee32:	687b      	ldr	r3, [r7, #4]
   1ee34:	2100      	movs	r1, #0
   1ee36:	0018      	movs	r0, r3
   1ee38:	4b62      	ldr	r3, [pc, #392]	; (1efc4 <_http_client_read_chuked_entity+0x20c>)
   1ee3a:	4798      	blx	r3
					return;
   1ee3c:	e0bf      	b.n	1efbe <_http_client_read_chuked_entity+0x206>
				}
				_http_client_move_buffer(module, buffer + 2);
   1ee3e:	697b      	ldr	r3, [r7, #20]
   1ee40:	1c9a      	adds	r2, r3, #2
   1ee42:	687b      	ldr	r3, [r7, #4]
   1ee44:	0011      	movs	r1, r2
   1ee46:	0018      	movs	r0, r3
   1ee48:	4b5f      	ldr	r3, [pc, #380]	; (1efc8 <_http_client_read_chuked_entity+0x210>)
   1ee4a:	4798      	blx	r3
   1ee4c:	e0b2      	b.n	1efb4 <_http_client_read_chuked_entity+0x1fc>
			} else if (module->resp.read_length <= length) {
   1ee4e:	687b      	ldr	r3, [r7, #4]
   1ee50:	22e0      	movs	r2, #224	; 0xe0
   1ee52:	589a      	ldr	r2, [r3, r2]
   1ee54:	69fb      	ldr	r3, [r7, #28]
   1ee56:	429a      	cmp	r2, r3
   1ee58:	dd00      	ble.n	1ee5c <_http_client_read_chuked_entity+0xa4>
   1ee5a:	e0ab      	b.n	1efb4 <_http_client_read_chuked_entity+0x1fc>
				data.recv_chunked_data.length = module->resp.read_length;
   1ee5c:	687b      	ldr	r3, [r7, #4]
   1ee5e:	22e0      	movs	r2, #224	; 0xe0
   1ee60:	589b      	ldr	r3, [r3, r2]
   1ee62:	001a      	movs	r2, r3
   1ee64:	2308      	movs	r3, #8
   1ee66:	18fb      	adds	r3, r7, r3
   1ee68:	601a      	str	r2, [r3, #0]
				data.recv_chunked_data.data = buffer;
   1ee6a:	2308      	movs	r3, #8
   1ee6c:	18fb      	adds	r3, r7, r3
   1ee6e:	697a      	ldr	r2, [r7, #20]
   1ee70:	605a      	str	r2, [r3, #4]
				data.recv_chunked_data.is_complete = 0;
   1ee72:	2308      	movs	r3, #8
   1ee74:	18fb      	adds	r3, r7, r3
   1ee76:	2200      	movs	r2, #0
   1ee78:	721a      	strb	r2, [r3, #8]

				if (module->cb) {
   1ee7a:	687b      	ldr	r3, [r7, #4]
   1ee7c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   1ee7e:	2b00      	cmp	r3, #0
   1ee80:	d006      	beq.n	1ee90 <_http_client_read_chuked_entity+0xd8>
					module->cb(module, HTTP_CLIENT_CALLBACK_RECV_CHUNKED_DATA, &data);
   1ee82:	687b      	ldr	r3, [r7, #4]
   1ee84:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   1ee86:	2208      	movs	r2, #8
   1ee88:	18ba      	adds	r2, r7, r2
   1ee8a:	6878      	ldr	r0, [r7, #4]
   1ee8c:	2103      	movs	r1, #3
   1ee8e:	4798      	blx	r3
				}
				/* Last two character in the chunk is '\r\n'. */
				_http_client_move_buffer(module, buffer + module->resp.read_length + 2 /* sizeof newline character */);
   1ee90:	687b      	ldr	r3, [r7, #4]
   1ee92:	22e0      	movs	r2, #224	; 0xe0
   1ee94:	589b      	ldr	r3, [r3, r2]
   1ee96:	3302      	adds	r3, #2
   1ee98:	697a      	ldr	r2, [r7, #20]
   1ee9a:	18d2      	adds	r2, r2, r3
   1ee9c:	687b      	ldr	r3, [r7, #4]
   1ee9e:	0011      	movs	r1, r2
   1eea0:	0018      	movs	r0, r3
   1eea2:	4b49      	ldr	r3, [pc, #292]	; (1efc8 <_http_client_read_chuked_entity+0x210>)
   1eea4:	4798      	blx	r3
				length = (int)module->recved_size;
   1eea6:	687b      	ldr	r3, [r7, #4]
   1eea8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   1eeaa:	61fb      	str	r3, [r7, #28]
				buffer = module->config.recv_buffer;
   1eeac:	687b      	ldr	r3, [r7, #4]
   1eeae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
   1eeb0:	617b      	str	r3, [r7, #20]
				module->resp.read_length = -1;
   1eeb2:	687b      	ldr	r3, [r7, #4]
   1eeb4:	21e0      	movs	r1, #224	; 0xe0
   1eeb6:	2201      	movs	r2, #1
   1eeb8:	4252      	negs	r2, r2
   1eeba:	505a      	str	r2, [r3, r1]
   1eebc:	e07a      	b.n	1efb4 <_http_client_read_chuked_entity+0x1fc>
			}
		} else {
			/* Read chunked length. */
			module->resp.read_length = 0;
   1eebe:	687b      	ldr	r3, [r7, #4]
   1eec0:	22e0      	movs	r2, #224	; 0xe0
   1eec2:	2100      	movs	r1, #0
   1eec4:	5099      	str	r1, [r3, r2]
			for (; length > 0; buffer++, length--) {
   1eec6:	e05a      	b.n	1ef7e <_http_client_read_chuked_entity+0x1c6>
				if (*buffer == '\n') {
   1eec8:	697b      	ldr	r3, [r7, #20]
   1eeca:	781b      	ldrb	r3, [r3, #0]
   1eecc:	2b0a      	cmp	r3, #10
   1eece:	d106      	bne.n	1eede <_http_client_read_chuked_entity+0x126>
					buffer++;
   1eed0:	697b      	ldr	r3, [r7, #20]
   1eed2:	3301      	adds	r3, #1
   1eed4:	617b      	str	r3, [r7, #20]
					length--;
   1eed6:	69fb      	ldr	r3, [r7, #28]
   1eed8:	3b01      	subs	r3, #1
   1eeda:	61fb      	str	r3, [r7, #28]
					break;
   1eedc:	e052      	b.n	1ef84 <_http_client_read_chuked_entity+0x1cc>
				}
				if (extension != 0) {
   1eede:	69bb      	ldr	r3, [r7, #24]
   1eee0:	2b00      	cmp	r3, #0
   1eee2:	d145      	bne.n	1ef70 <_http_client_read_chuked_entity+0x1b8>
					continue;
				}
				if (*buffer >= '0' && *buffer <= '9') {
   1eee4:	697b      	ldr	r3, [r7, #20]
   1eee6:	781b      	ldrb	r3, [r3, #0]
   1eee8:	2b2f      	cmp	r3, #47	; 0x2f
   1eeea:	d910      	bls.n	1ef0e <_http_client_read_chuked_entity+0x156>
   1eeec:	697b      	ldr	r3, [r7, #20]
   1eeee:	781b      	ldrb	r3, [r3, #0]
   1eef0:	2b39      	cmp	r3, #57	; 0x39
   1eef2:	d80c      	bhi.n	1ef0e <_http_client_read_chuked_entity+0x156>
					module->resp.read_length = module->resp.read_length * 0x10 + *buffer - '0';
   1eef4:	687b      	ldr	r3, [r7, #4]
   1eef6:	22e0      	movs	r2, #224	; 0xe0
   1eef8:	589b      	ldr	r3, [r3, r2]
   1eefa:	011b      	lsls	r3, r3, #4
   1eefc:	697a      	ldr	r2, [r7, #20]
   1eefe:	7812      	ldrb	r2, [r2, #0]
   1ef00:	189b      	adds	r3, r3, r2
   1ef02:	3b30      	subs	r3, #48	; 0x30
   1ef04:	001a      	movs	r2, r3
   1ef06:	687b      	ldr	r3, [r7, #4]
   1ef08:	21e0      	movs	r1, #224	; 0xe0
   1ef0a:	505a      	str	r2, [r3, r1]
   1ef0c:	e031      	b.n	1ef72 <_http_client_read_chuked_entity+0x1ba>
				} else if (*buffer >= 'a' && *buffer <= 'f') {
   1ef0e:	697b      	ldr	r3, [r7, #20]
   1ef10:	781b      	ldrb	r3, [r3, #0]
   1ef12:	2b60      	cmp	r3, #96	; 0x60
   1ef14:	d910      	bls.n	1ef38 <_http_client_read_chuked_entity+0x180>
   1ef16:	697b      	ldr	r3, [r7, #20]
   1ef18:	781b      	ldrb	r3, [r3, #0]
   1ef1a:	2b66      	cmp	r3, #102	; 0x66
   1ef1c:	d80c      	bhi.n	1ef38 <_http_client_read_chuked_entity+0x180>
					module->resp.read_length = module->resp.read_length * 0x10 + *buffer - 'a';
   1ef1e:	687b      	ldr	r3, [r7, #4]
   1ef20:	22e0      	movs	r2, #224	; 0xe0
   1ef22:	589b      	ldr	r3, [r3, r2]
   1ef24:	011b      	lsls	r3, r3, #4
   1ef26:	697a      	ldr	r2, [r7, #20]
   1ef28:	7812      	ldrb	r2, [r2, #0]
   1ef2a:	189b      	adds	r3, r3, r2
   1ef2c:	3b61      	subs	r3, #97	; 0x61
   1ef2e:	001a      	movs	r2, r3
   1ef30:	687b      	ldr	r3, [r7, #4]
   1ef32:	21e0      	movs	r1, #224	; 0xe0
   1ef34:	505a      	str	r2, [r3, r1]
   1ef36:	e01c      	b.n	1ef72 <_http_client_read_chuked_entity+0x1ba>
				} else if (*buffer >= 'A' && *buffer <= 'F') {
   1ef38:	697b      	ldr	r3, [r7, #20]
   1ef3a:	781b      	ldrb	r3, [r3, #0]
   1ef3c:	2b40      	cmp	r3, #64	; 0x40
   1ef3e:	d910      	bls.n	1ef62 <_http_client_read_chuked_entity+0x1aa>
   1ef40:	697b      	ldr	r3, [r7, #20]
   1ef42:	781b      	ldrb	r3, [r3, #0]
   1ef44:	2b46      	cmp	r3, #70	; 0x46
   1ef46:	d80c      	bhi.n	1ef62 <_http_client_read_chuked_entity+0x1aa>
					module->resp.read_length = module->resp.read_length * 0x10 + *buffer - 'A';
   1ef48:	687b      	ldr	r3, [r7, #4]
   1ef4a:	22e0      	movs	r2, #224	; 0xe0
   1ef4c:	589b      	ldr	r3, [r3, r2]
   1ef4e:	011b      	lsls	r3, r3, #4
   1ef50:	697a      	ldr	r2, [r7, #20]
   1ef52:	7812      	ldrb	r2, [r2, #0]
   1ef54:	189b      	adds	r3, r3, r2
   1ef56:	3b41      	subs	r3, #65	; 0x41
   1ef58:	001a      	movs	r2, r3
   1ef5a:	687b      	ldr	r3, [r7, #4]
   1ef5c:	21e0      	movs	r1, #224	; 0xe0
   1ef5e:	505a      	str	r2, [r3, r1]
   1ef60:	e007      	b.n	1ef72 <_http_client_read_chuked_entity+0x1ba>
				} else if (*buffer == ';') {
   1ef62:	697b      	ldr	r3, [r7, #20]
   1ef64:	781b      	ldrb	r3, [r3, #0]
   1ef66:	2b3b      	cmp	r3, #59	; 0x3b
   1ef68:	d103      	bne.n	1ef72 <_http_client_read_chuked_entity+0x1ba>
					extension = 1;
   1ef6a:	2301      	movs	r3, #1
   1ef6c:	61bb      	str	r3, [r7, #24]
   1ef6e:	e000      	b.n	1ef72 <_http_client_read_chuked_entity+0x1ba>
					continue;
   1ef70:	46c0      	nop			; (mov r8, r8)
			for (; length > 0; buffer++, length--) {
   1ef72:	697b      	ldr	r3, [r7, #20]
   1ef74:	3301      	adds	r3, #1
   1ef76:	617b      	str	r3, [r7, #20]
   1ef78:	69fb      	ldr	r3, [r7, #28]
   1ef7a:	3b01      	subs	r3, #1
   1ef7c:	61fb      	str	r3, [r7, #28]
   1ef7e:	69fb      	ldr	r3, [r7, #28]
   1ef80:	2b00      	cmp	r3, #0
   1ef82:	dca1      	bgt.n	1eec8 <_http_client_read_chuked_entity+0x110>
				}
			}

			if (module->resp.read_length > (int)module->config.recv_buffer_size) {
   1ef84:	687b      	ldr	r3, [r7, #4]
   1ef86:	22e0      	movs	r2, #224	; 0xe0
   1ef88:	589a      	ldr	r2, [r3, r2]
   1ef8a:	687b      	ldr	r3, [r7, #4]
   1ef8c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
   1ef8e:	429a      	cmp	r2, r3
   1ef90:	dd07      	ble.n	1efa2 <_http_client_read_chuked_entity+0x1ea>
				/* Chunked size is too big. */
				/* Through exception. */
				_http_client_clear_conn(module, -EOVERFLOW);
   1ef92:	238b      	movs	r3, #139	; 0x8b
   1ef94:	425a      	negs	r2, r3
   1ef96:	687b      	ldr	r3, [r7, #4]
   1ef98:	0011      	movs	r1, r2
   1ef9a:	0018      	movs	r0, r3
   1ef9c:	4b09      	ldr	r3, [pc, #36]	; (1efc4 <_http_client_read_chuked_entity+0x20c>)
   1ef9e:	4798      	blx	r3
				return;
   1efa0:	e00d      	b.n	1efbe <_http_client_read_chuked_entity+0x206>
			}

			if (length  == 0) {
   1efa2:	69fb      	ldr	r3, [r7, #28]
   1efa4:	2b00      	cmp	r3, #0
   1efa6:	d105      	bne.n	1efb4 <_http_client_read_chuked_entity+0x1fc>
				/* currently not received packet yet. */
				module->resp.read_length = -1;
   1efa8:	687b      	ldr	r3, [r7, #4]
   1efaa:	21e0      	movs	r1, #224	; 0xe0
   1efac:	2201      	movs	r2, #1
   1efae:	4252      	negs	r2, r2
   1efb0:	505a      	str	r2, [r3, r1]
				return;
   1efb2:	e004      	b.n	1efbe <_http_client_read_chuked_entity+0x206>
			}
		}
	} while(module->recved_size > 0);
   1efb4:	687b      	ldr	r3, [r7, #4]
   1efb6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   1efb8:	2b00      	cmp	r3, #0
   1efba:	d000      	beq.n	1efbe <_http_client_read_chuked_entity+0x206>
   1efbc:	e708      	b.n	1edd0 <_http_client_read_chuked_entity+0x18>
}
   1efbe:	46bd      	mov	sp, r7
   1efc0:	b008      	add	sp, #32
   1efc2:	bd80      	pop	{r7, pc}
   1efc4:	0001e191 	.word	0x0001e191
   1efc8:	0001f179 	.word	0x0001f179

0001efcc <_http_client_handle_entity>:

int _http_client_handle_entity(struct http_client_module *const module)
{
   1efcc:	b580      	push	{r7, lr}
   1efce:	b086      	sub	sp, #24
   1efd0:	af00      	add	r7, sp, #0
   1efd2:	6078      	str	r0, [r7, #4]
	union http_client_data data;
	char *buffer = module->config.recv_buffer;
   1efd4:	687b      	ldr	r3, [r7, #4]
   1efd6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
   1efd8:	617b      	str	r3, [r7, #20]

	/* If data size is lesser than buffer size, read all buffer and retransmission it to application. */
	if (module->resp.content_length >= 0 && module->resp.content_length <= (int)module->config.recv_buffer_size) {
   1efda:	687b      	ldr	r3, [r7, #4]
   1efdc:	22dc      	movs	r2, #220	; 0xdc
   1efde:	589b      	ldr	r3, [r3, r2]
   1efe0:	2b00      	cmp	r3, #0
   1efe2:	db58      	blt.n	1f096 <_http_client_handle_entity+0xca>
   1efe4:	687b      	ldr	r3, [r7, #4]
   1efe6:	22dc      	movs	r2, #220	; 0xdc
   1efe8:	589a      	ldr	r2, [r3, r2]
   1efea:	687b      	ldr	r3, [r7, #4]
   1efec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
   1efee:	429a      	cmp	r2, r3
   1eff0:	dc51      	bgt.n	1f096 <_http_client_handle_entity+0xca>
		if ((int)module->recved_size >= module->resp.content_length) {
   1eff2:	687b      	ldr	r3, [r7, #4]
   1eff4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   1eff6:	0019      	movs	r1, r3
   1eff8:	687b      	ldr	r3, [r7, #4]
   1effa:	22dc      	movs	r2, #220	; 0xdc
   1effc:	589b      	ldr	r3, [r3, r2]
   1effe:	4299      	cmp	r1, r3
   1f000:	da00      	bge.n	1f004 <_http_client_handle_entity+0x38>
   1f002:	e0a9      	b.n	1f158 <_http_client_handle_entity+0x18c>
			if (module->cb && module->resp.response_code) {
   1f004:	687b      	ldr	r3, [r7, #4]
   1f006:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   1f008:	2b00      	cmp	r3, #0
   1f00a:	d020      	beq.n	1f04e <_http_client_handle_entity+0x82>
   1f00c:	687b      	ldr	r3, [r7, #4]
   1f00e:	22e4      	movs	r2, #228	; 0xe4
   1f010:	5a9b      	ldrh	r3, [r3, r2]
   1f012:	2b00      	cmp	r3, #0
   1f014:	d01b      	beq.n	1f04e <_http_client_handle_entity+0x82>
				data.recv_response.response_code = module->resp.response_code;
   1f016:	687b      	ldr	r3, [r7, #4]
   1f018:	22e4      	movs	r2, #228	; 0xe4
   1f01a:	5a9a      	ldrh	r2, [r3, r2]
   1f01c:	2308      	movs	r3, #8
   1f01e:	18fb      	adds	r3, r7, r3
   1f020:	801a      	strh	r2, [r3, #0]
				data.recv_response.is_chunked = 0;
   1f022:	2308      	movs	r3, #8
   1f024:	18fb      	adds	r3, r7, r3
   1f026:	2200      	movs	r2, #0
   1f028:	709a      	strb	r2, [r3, #2]
				data.recv_response.content_length = module->resp.content_length;
   1f02a:	687b      	ldr	r3, [r7, #4]
   1f02c:	22dc      	movs	r2, #220	; 0xdc
   1f02e:	589b      	ldr	r3, [r3, r2]
   1f030:	001a      	movs	r2, r3
   1f032:	2308      	movs	r3, #8
   1f034:	18fb      	adds	r3, r7, r3
   1f036:	605a      	str	r2, [r3, #4]
				data.recv_response.content = buffer;
   1f038:	2308      	movs	r3, #8
   1f03a:	18fb      	adds	r3, r7, r3
   1f03c:	697a      	ldr	r2, [r7, #20]
   1f03e:	609a      	str	r2, [r3, #8]
				module->cb(module, HTTP_CLIENT_CALLBACK_RECV_RESPONSE, &data);
   1f040:	687b      	ldr	r3, [r7, #4]
   1f042:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   1f044:	2208      	movs	r2, #8
   1f046:	18ba      	adds	r2, r7, r2
   1f048:	6878      	ldr	r0, [r7, #4]
   1f04a:	2102      	movs	r1, #2
   1f04c:	4798      	blx	r3
			}
			module->resp.state = STATE_PARSE_HEADER;
   1f04e:	687b      	ldr	r3, [r7, #4]
   1f050:	22d8      	movs	r2, #216	; 0xd8
   1f052:	2100      	movs	r1, #0
   1f054:	5099      	str	r1, [r3, r2]
			module->resp.response_code = 0;
   1f056:	687b      	ldr	r3, [r7, #4]
   1f058:	22e4      	movs	r2, #228	; 0xe4
   1f05a:	2100      	movs	r1, #0
   1f05c:	5299      	strh	r1, [r3, r2]
			
			if (module->permanent == 0) {
   1f05e:	687b      	ldr	r3, [r7, #4]
   1f060:	2241      	movs	r2, #65	; 0x41
   1f062:	5c9b      	ldrb	r3, [r3, r2]
   1f064:	2202      	movs	r2, #2
   1f066:	4013      	ands	r3, r2
   1f068:	b2db      	uxtb	r3, r3
   1f06a:	2b00      	cmp	r3, #0
   1f06c:	d105      	bne.n	1f07a <_http_client_handle_entity+0xae>
				/* This server was not supported keep alive. */
				_http_client_clear_conn(module, 0);
   1f06e:	687b      	ldr	r3, [r7, #4]
   1f070:	2100      	movs	r1, #0
   1f072:	0018      	movs	r0, r3
   1f074:	4b3b      	ldr	r3, [pc, #236]	; (1f164 <_http_client_handle_entity+0x198>)
   1f076:	4798      	blx	r3
		if ((int)module->recved_size >= module->resp.content_length) {
   1f078:	e06e      	b.n	1f158 <_http_client_handle_entity+0x18c>
			} else {
				_http_client_move_buffer(module, buffer + module->resp.content_length);
   1f07a:	687b      	ldr	r3, [r7, #4]
   1f07c:	22dc      	movs	r2, #220	; 0xdc
   1f07e:	589b      	ldr	r3, [r3, r2]
   1f080:	001a      	movs	r2, r3
   1f082:	697b      	ldr	r3, [r7, #20]
   1f084:	189a      	adds	r2, r3, r2
   1f086:	687b      	ldr	r3, [r7, #4]
   1f088:	0011      	movs	r1, r2
   1f08a:	0018      	movs	r0, r3
   1f08c:	4b36      	ldr	r3, [pc, #216]	; (1f168 <_http_client_handle_entity+0x19c>)
   1f08e:	4798      	blx	r3
				return module->recved_size;
   1f090:	687b      	ldr	r3, [r7, #4]
   1f092:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   1f094:	e061      	b.n	1f15a <_http_client_handle_entity+0x18e>
			}
		}
		/* else, buffer was not received enough size yet. */
	} else {
		if (module->resp.content_length >= 0) {
   1f096:	687b      	ldr	r3, [r7, #4]
   1f098:	22dc      	movs	r2, #220	; 0xdc
   1f09a:	589b      	ldr	r3, [r3, r2]
   1f09c:	2b00      	cmp	r3, #0
   1f09e:	db57      	blt.n	1f150 <_http_client_handle_entity+0x184>
			data.recv_chunked_data.length = module->recved_size;
   1f0a0:	687b      	ldr	r3, [r7, #4]
   1f0a2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
   1f0a4:	2308      	movs	r3, #8
   1f0a6:	18fb      	adds	r3, r7, r3
   1f0a8:	601a      	str	r2, [r3, #0]
			data.recv_chunked_data.data = buffer;
   1f0aa:	2308      	movs	r3, #8
   1f0ac:	18fb      	adds	r3, r7, r3
   1f0ae:	697a      	ldr	r2, [r7, #20]
   1f0b0:	605a      	str	r2, [r3, #4]
			module->resp.read_length += (int)module->recved_size;
   1f0b2:	687b      	ldr	r3, [r7, #4]
   1f0b4:	22e0      	movs	r2, #224	; 0xe0
   1f0b6:	589a      	ldr	r2, [r3, r2]
   1f0b8:	687b      	ldr	r3, [r7, #4]
   1f0ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   1f0bc:	18d2      	adds	r2, r2, r3
   1f0be:	687b      	ldr	r3, [r7, #4]
   1f0c0:	21e0      	movs	r1, #224	; 0xe0
   1f0c2:	505a      	str	r2, [r3, r1]
			if (module->resp.content_length <= module->resp.read_length) {
   1f0c4:	687b      	ldr	r3, [r7, #4]
   1f0c6:	22dc      	movs	r2, #220	; 0xdc
   1f0c8:	589a      	ldr	r2, [r3, r2]
   1f0ca:	687b      	ldr	r3, [r7, #4]
   1f0cc:	21e0      	movs	r1, #224	; 0xe0
   1f0ce:	585b      	ldr	r3, [r3, r1]
   1f0d0:	429a      	cmp	r2, r3
   1f0d2:	dc0c      	bgt.n	1f0ee <_http_client_handle_entity+0x122>
				/* Complete to receive the buffer. */
				module->resp.state = STATE_PARSE_HEADER;
   1f0d4:	687b      	ldr	r3, [r7, #4]
   1f0d6:	22d8      	movs	r2, #216	; 0xd8
   1f0d8:	2100      	movs	r1, #0
   1f0da:	5099      	str	r1, [r3, r2]
				module->resp.response_code = 0;
   1f0dc:	687b      	ldr	r3, [r7, #4]
   1f0de:	22e4      	movs	r2, #228	; 0xe4
   1f0e0:	2100      	movs	r1, #0
   1f0e2:	5299      	strh	r1, [r3, r2]
				data.recv_chunked_data.is_complete = 1;
   1f0e4:	2308      	movs	r3, #8
   1f0e6:	18fb      	adds	r3, r7, r3
   1f0e8:	2201      	movs	r2, #1
   1f0ea:	721a      	strb	r2, [r3, #8]
   1f0ec:	e003      	b.n	1f0f6 <_http_client_handle_entity+0x12a>
			} else {
				data.recv_chunked_data.is_complete = 0;
   1f0ee:	2308      	movs	r3, #8
   1f0f0:	18fb      	adds	r3, r7, r3
   1f0f2:	2200      	movs	r2, #0
   1f0f4:	721a      	strb	r2, [r3, #8]
			}

			if (module->cb) {
   1f0f6:	687b      	ldr	r3, [r7, #4]
   1f0f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   1f0fa:	2b00      	cmp	r3, #0
   1f0fc:	d006      	beq.n	1f10c <_http_client_handle_entity+0x140>
				module->cb(module, HTTP_CLIENT_CALLBACK_RECV_CHUNKED_DATA, &data);
   1f0fe:	687b      	ldr	r3, [r7, #4]
   1f100:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   1f102:	2208      	movs	r2, #8
   1f104:	18ba      	adds	r2, r7, r2
   1f106:	6878      	ldr	r0, [r7, #4]
   1f108:	2103      	movs	r1, #3
   1f10a:	4798      	blx	r3
			}
			
			if (data.recv_chunked_data.is_complete == 1) {
   1f10c:	2308      	movs	r3, #8
   1f10e:	18fb      	adds	r3, r7, r3
   1f110:	7a1b      	ldrb	r3, [r3, #8]
   1f112:	2b01      	cmp	r3, #1
   1f114:	d112      	bne.n	1f13c <_http_client_handle_entity+0x170>
				if (module->permanent == 0) {
   1f116:	687b      	ldr	r3, [r7, #4]
   1f118:	2241      	movs	r2, #65	; 0x41
   1f11a:	5c9b      	ldrb	r3, [r3, r2]
   1f11c:	2202      	movs	r2, #2
   1f11e:	4013      	ands	r3, r2
   1f120:	b2db      	uxtb	r3, r3
   1f122:	2b00      	cmp	r3, #0
   1f124:	d10a      	bne.n	1f13c <_http_client_handle_entity+0x170>
					/* This server was not supported keep alive. */
					printf("1\r\n");
   1f126:	4b11      	ldr	r3, [pc, #68]	; (1f16c <_http_client_handle_entity+0x1a0>)
   1f128:	0018      	movs	r0, r3
   1f12a:	4b11      	ldr	r3, [pc, #68]	; (1f170 <_http_client_handle_entity+0x1a4>)
   1f12c:	4798      	blx	r3
					_http_client_clear_conn(module, 0);
   1f12e:	687b      	ldr	r3, [r7, #4]
   1f130:	2100      	movs	r1, #0
   1f132:	0018      	movs	r0, r3
   1f134:	4b0b      	ldr	r3, [pc, #44]	; (1f164 <_http_client_handle_entity+0x198>)
   1f136:	4798      	blx	r3
					return 0;
   1f138:	2300      	movs	r3, #0
   1f13a:	e00e      	b.n	1f15a <_http_client_handle_entity+0x18e>
				}
			}
			_http_client_move_buffer(module, buffer + module->recved_size);
   1f13c:	687b      	ldr	r3, [r7, #4]
   1f13e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   1f140:	697a      	ldr	r2, [r7, #20]
   1f142:	18d2      	adds	r2, r2, r3
   1f144:	687b      	ldr	r3, [r7, #4]
   1f146:	0011      	movs	r1, r2
   1f148:	0018      	movs	r0, r3
   1f14a:	4b07      	ldr	r3, [pc, #28]	; (1f168 <_http_client_handle_entity+0x19c>)
   1f14c:	4798      	blx	r3
   1f14e:	e003      	b.n	1f158 <_http_client_handle_entity+0x18c>
		} else {
			_http_client_read_chuked_entity(module);
   1f150:	687b      	ldr	r3, [r7, #4]
   1f152:	0018      	movs	r0, r3
   1f154:	4b07      	ldr	r3, [pc, #28]	; (1f174 <_http_client_handle_entity+0x1a8>)
   1f156:	4798      	blx	r3
		}
	}

	return 0;
   1f158:	2300      	movs	r3, #0
}
   1f15a:	0018      	movs	r0, r3
   1f15c:	46bd      	mov	sp, r7
   1f15e:	b006      	add	sp, #24
   1f160:	bd80      	pop	{r7, pc}
   1f162:	46c0      	nop			; (mov r8, r8)
   1f164:	0001e191 	.word	0x0001e191
   1f168:	0001f179 	.word	0x0001f179
   1f16c:	00026898 	.word	0x00026898
   1f170:	00021a3d 	.word	0x00021a3d
   1f174:	0001edb9 	.word	0x0001edb9

0001f178 <_http_client_move_buffer>:

void _http_client_move_buffer(struct http_client_module *const module, char *base)
{
   1f178:	b580      	push	{r7, lr}
   1f17a:	b084      	sub	sp, #16
   1f17c:	af00      	add	r7, sp, #0
   1f17e:	6078      	str	r0, [r7, #4]
   1f180:	6039      	str	r1, [r7, #0]
	char *buffer = module->config.recv_buffer;
   1f182:	687b      	ldr	r3, [r7, #4]
   1f184:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
   1f186:	60fb      	str	r3, [r7, #12]
	int remain = (int)module->recved_size - (int)base + (int)buffer;
   1f188:	687b      	ldr	r3, [r7, #4]
   1f18a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   1f18c:	001a      	movs	r2, r3
   1f18e:	683b      	ldr	r3, [r7, #0]
   1f190:	1ad2      	subs	r2, r2, r3
   1f192:	68fb      	ldr	r3, [r7, #12]
   1f194:	18d3      	adds	r3, r2, r3
   1f196:	60bb      	str	r3, [r7, #8]

	if (remain > 0) {
   1f198:	68bb      	ldr	r3, [r7, #8]
   1f19a:	2b00      	cmp	r3, #0
   1f19c:	dd09      	ble.n	1f1b2 <_http_client_move_buffer+0x3a>
		memmove(buffer, base, remain);
   1f19e:	68ba      	ldr	r2, [r7, #8]
   1f1a0:	6839      	ldr	r1, [r7, #0]
   1f1a2:	68fb      	ldr	r3, [r7, #12]
   1f1a4:	0018      	movs	r0, r3
   1f1a6:	4b06      	ldr	r3, [pc, #24]	; (1f1c0 <_http_client_move_buffer+0x48>)
   1f1a8:	4798      	blx	r3
		module->recved_size = remain;
   1f1aa:	68ba      	ldr	r2, [r7, #8]
   1f1ac:	687b      	ldr	r3, [r7, #4]
   1f1ae:	645a      	str	r2, [r3, #68]	; 0x44
	} else {
		module->recved_size = 0;
	}
}
   1f1b0:	e002      	b.n	1f1b8 <_http_client_move_buffer+0x40>
		module->recved_size = 0;
   1f1b2:	687b      	ldr	r3, [r7, #4]
   1f1b4:	2200      	movs	r2, #0
   1f1b6:	645a      	str	r2, [r3, #68]	; 0x44
}
   1f1b8:	46c0      	nop			; (mov r8, r8)
   1f1ba:	46bd      	mov	sp, r7
   1f1bc:	b004      	add	sp, #16
   1f1be:	bd80      	pop	{r7, pc}
   1f1c0:	000217f7 	.word	0x000217f7

0001f1c4 <stream_writer_init>:
#include <asf.h>
#include <string.h>
#include "iot/stream_writer.h"

void stream_writer_init(struct stream_writer * writer, char *buffer, size_t max_length, stream_writer_write_func_t func, void *priv_data)
{
   1f1c4:	b580      	push	{r7, lr}
   1f1c6:	b084      	sub	sp, #16
   1f1c8:	af00      	add	r7, sp, #0
   1f1ca:	60f8      	str	r0, [r7, #12]
   1f1cc:	60b9      	str	r1, [r7, #8]
   1f1ce:	607a      	str	r2, [r7, #4]
   1f1d0:	603b      	str	r3, [r7, #0]
	writer->max_size = max_length;
   1f1d2:	68fb      	ldr	r3, [r7, #12]
   1f1d4:	687a      	ldr	r2, [r7, #4]
   1f1d6:	601a      	str	r2, [r3, #0]
	writer->buffer = buffer;
   1f1d8:	68fb      	ldr	r3, [r7, #12]
   1f1da:	68ba      	ldr	r2, [r7, #8]
   1f1dc:	611a      	str	r2, [r3, #16]
	writer->written = 0;
   1f1de:	68fb      	ldr	r3, [r7, #12]
   1f1e0:	2200      	movs	r2, #0
   1f1e2:	605a      	str	r2, [r3, #4]
	writer->write_func = func;
   1f1e4:	68fb      	ldr	r3, [r7, #12]
   1f1e6:	683a      	ldr	r2, [r7, #0]
   1f1e8:	609a      	str	r2, [r3, #8]
	writer->priv_data = priv_data;
   1f1ea:	68fb      	ldr	r3, [r7, #12]
   1f1ec:	69ba      	ldr	r2, [r7, #24]
   1f1ee:	60da      	str	r2, [r3, #12]
}
   1f1f0:	46c0      	nop			; (mov r8, r8)
   1f1f2:	46bd      	mov	sp, r7
   1f1f4:	b004      	add	sp, #16
   1f1f6:	bd80      	pop	{r7, pc}

0001f1f8 <stream_writer_send_8>:

void stream_writer_send_8(struct stream_writer * writer, int8_t value)
{
   1f1f8:	b580      	push	{r7, lr}
   1f1fa:	b084      	sub	sp, #16
   1f1fc:	af00      	add	r7, sp, #0
   1f1fe:	6078      	str	r0, [r7, #4]
   1f200:	000a      	movs	r2, r1
   1f202:	1cfb      	adds	r3, r7, #3
   1f204:	701a      	strb	r2, [r3, #0]
	int remain = writer->max_size - writer->written;
   1f206:	687b      	ldr	r3, [r7, #4]
   1f208:	681a      	ldr	r2, [r3, #0]
   1f20a:	687b      	ldr	r3, [r7, #4]
   1f20c:	685b      	ldr	r3, [r3, #4]
   1f20e:	1ad3      	subs	r3, r2, r3
   1f210:	60fb      	str	r3, [r7, #12]
	
	if (remain < 1) {
   1f212:	68fb      	ldr	r3, [r7, #12]
   1f214:	2b00      	cmp	r3, #0
   1f216:	dc03      	bgt.n	1f220 <stream_writer_send_8+0x28>
		stream_writer_send_remain(writer);
   1f218:	687b      	ldr	r3, [r7, #4]
   1f21a:	0018      	movs	r0, r3
   1f21c:	4b08      	ldr	r3, [pc, #32]	; (1f240 <stream_writer_send_8+0x48>)
   1f21e:	4798      	blx	r3
	}
	
	writer->buffer[writer->written++] = (char)value;
   1f220:	687b      	ldr	r3, [r7, #4]
   1f222:	6919      	ldr	r1, [r3, #16]
   1f224:	687b      	ldr	r3, [r7, #4]
   1f226:	685b      	ldr	r3, [r3, #4]
   1f228:	1c58      	adds	r0, r3, #1
   1f22a:	687a      	ldr	r2, [r7, #4]
   1f22c:	6050      	str	r0, [r2, #4]
   1f22e:	18cb      	adds	r3, r1, r3
   1f230:	1cfa      	adds	r2, r7, #3
   1f232:	7812      	ldrb	r2, [r2, #0]
   1f234:	701a      	strb	r2, [r3, #0]
}
   1f236:	46c0      	nop			; (mov r8, r8)
   1f238:	46bd      	mov	sp, r7
   1f23a:	b004      	add	sp, #16
   1f23c:	bd80      	pop	{r7, pc}
   1f23e:	46c0      	nop			; (mov r8, r8)
   1f240:	0001f281 	.word	0x0001f281

0001f244 <stream_writer_send_buffer>:
	stream_writer_send_8(writer, (value >> 16) & 0xFF);
	stream_writer_send_8(writer, (value >> 24) & 0xFF);
}

void stream_writer_send_buffer(struct stream_writer * writer, const char *buffer, size_t length)
{
   1f244:	b580      	push	{r7, lr}
   1f246:	b084      	sub	sp, #16
   1f248:	af00      	add	r7, sp, #0
   1f24a:	60f8      	str	r0, [r7, #12]
   1f24c:	60b9      	str	r1, [r7, #8]
   1f24e:	607a      	str	r2, [r7, #4]
	for (; length > 0; length--, buffer++) {
   1f250:	e00d      	b.n	1f26e <stream_writer_send_buffer+0x2a>
		stream_writer_send_8(writer, *buffer);
   1f252:	68bb      	ldr	r3, [r7, #8]
   1f254:	781b      	ldrb	r3, [r3, #0]
   1f256:	b25a      	sxtb	r2, r3
   1f258:	68fb      	ldr	r3, [r7, #12]
   1f25a:	0011      	movs	r1, r2
   1f25c:	0018      	movs	r0, r3
   1f25e:	4b07      	ldr	r3, [pc, #28]	; (1f27c <stream_writer_send_buffer+0x38>)
   1f260:	4798      	blx	r3
	for (; length > 0; length--, buffer++) {
   1f262:	687b      	ldr	r3, [r7, #4]
   1f264:	3b01      	subs	r3, #1
   1f266:	607b      	str	r3, [r7, #4]
   1f268:	68bb      	ldr	r3, [r7, #8]
   1f26a:	3301      	adds	r3, #1
   1f26c:	60bb      	str	r3, [r7, #8]
   1f26e:	687b      	ldr	r3, [r7, #4]
   1f270:	2b00      	cmp	r3, #0
   1f272:	d1ee      	bne.n	1f252 <stream_writer_send_buffer+0xe>
	}
}
   1f274:	46c0      	nop			; (mov r8, r8)
   1f276:	46bd      	mov	sp, r7
   1f278:	b004      	add	sp, #16
   1f27a:	bd80      	pop	{r7, pc}
   1f27c:	0001f1f9 	.word	0x0001f1f9

0001f280 <stream_writer_send_remain>:

void stream_writer_send_remain(struct stream_writer * writer)
{
   1f280:	b590      	push	{r4, r7, lr}
   1f282:	b083      	sub	sp, #12
   1f284:	af00      	add	r7, sp, #0
   1f286:	6078      	str	r0, [r7, #4]
	if(writer->written > 0) {
   1f288:	687b      	ldr	r3, [r7, #4]
   1f28a:	685b      	ldr	r3, [r3, #4]
   1f28c:	2b00      	cmp	r3, #0
   1f28e:	d00c      	beq.n	1f2aa <stream_writer_send_remain+0x2a>
		writer->write_func(writer->priv_data, writer->buffer, writer->written);
   1f290:	687b      	ldr	r3, [r7, #4]
   1f292:	689c      	ldr	r4, [r3, #8]
   1f294:	687b      	ldr	r3, [r7, #4]
   1f296:	68d8      	ldr	r0, [r3, #12]
   1f298:	687b      	ldr	r3, [r7, #4]
   1f29a:	6919      	ldr	r1, [r3, #16]
   1f29c:	687b      	ldr	r3, [r7, #4]
   1f29e:	685b      	ldr	r3, [r3, #4]
   1f2a0:	001a      	movs	r2, r3
   1f2a2:	47a0      	blx	r4
		writer->written = 0;
   1f2a4:	687b      	ldr	r3, [r7, #4]
   1f2a6:	2200      	movs	r2, #0
   1f2a8:	605a      	str	r2, [r3, #4]
	}
}
   1f2aa:	46c0      	nop			; (mov r8, r8)
   1f2ac:	46bd      	mov	sp, r7
   1f2ae:	b003      	add	sp, #12
   1f2b0:	bd90      	pop	{r4, r7, pc}
	...

0001f2b4 <system_cpu_clock_get_hz>:
{
   1f2b4:	b580      	push	{r7, lr}
   1f2b6:	af00      	add	r7, sp, #0
	return (system_gclk_gen_get_hz(GCLK_GENERATOR_0) >> PM->CPUSEL.reg);
   1f2b8:	2000      	movs	r0, #0
   1f2ba:	4b05      	ldr	r3, [pc, #20]	; (1f2d0 <system_cpu_clock_get_hz+0x1c>)
   1f2bc:	4798      	blx	r3
   1f2be:	0002      	movs	r2, r0
   1f2c0:	4b04      	ldr	r3, [pc, #16]	; (1f2d4 <system_cpu_clock_get_hz+0x20>)
   1f2c2:	7a1b      	ldrb	r3, [r3, #8]
   1f2c4:	b2db      	uxtb	r3, r3
   1f2c6:	40da      	lsrs	r2, r3
   1f2c8:	0013      	movs	r3, r2
}
   1f2ca:	0018      	movs	r0, r3
   1f2cc:	46bd      	mov	sp, r7
   1f2ce:	bd80      	pop	{r7, pc}
   1f2d0:	00016c95 	.word	0x00016c95
   1f2d4:	40000400 	.word	0x40000400

0001f2d8 <tcc_enable>:
 *
 * \param[in]  module_inst   Pointer to the software module instance struct
 */
static inline void tcc_enable(
		const struct tcc_module *const module_inst)
{
   1f2d8:	b580      	push	{r7, lr}
   1f2da:	b084      	sub	sp, #16
   1f2dc:	af00      	add	r7, sp, #0
   1f2de:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	Tcc *const tcc_module = module_inst->hw;
   1f2e0:	687b      	ldr	r3, [r7, #4]
   1f2e2:	681b      	ldr	r3, [r3, #0]
   1f2e4:	60fb      	str	r3, [r7, #12]

	while (tcc_module->SYNCBUSY.reg & TCC_SYNCBUSY_ENABLE) {
   1f2e6:	46c0      	nop			; (mov r8, r8)
   1f2e8:	68fb      	ldr	r3, [r7, #12]
   1f2ea:	689b      	ldr	r3, [r3, #8]
   1f2ec:	2202      	movs	r2, #2
   1f2ee:	4013      	ands	r3, r2
   1f2f0:	d1fa      	bne.n	1f2e8 <tcc_enable+0x10>
		/* Wait for sync */
	}

	/* Enable the TCC module */
	tcc_module->CTRLA.reg |= TCC_CTRLA_ENABLE;
   1f2f2:	68fb      	ldr	r3, [r7, #12]
   1f2f4:	681b      	ldr	r3, [r3, #0]
   1f2f6:	2202      	movs	r2, #2
   1f2f8:	431a      	orrs	r2, r3
   1f2fa:	68fb      	ldr	r3, [r7, #12]
   1f2fc:	601a      	str	r2, [r3, #0]
}
   1f2fe:	46c0      	nop			; (mov r8, r8)
   1f300:	46bd      	mov	sp, r7
   1f302:	b004      	add	sp, #16
   1f304:	bd80      	pop	{r7, pc}
	...

0001f308 <sw_timer_tcc_callback>:
 *
 * \param[in] module Instance of the TCC.
 */
#if (SAMD21)
static void sw_timer_tcc_callback(struct tcc_module *const module)
{
   1f308:	b580      	push	{r7, lr}
   1f30a:	b082      	sub	sp, #8
   1f30c:	af00      	add	r7, sp, #0
   1f30e:	6078      	str	r0, [r7, #4]
	sw_timer_tick++;
   1f310:	4b04      	ldr	r3, [pc, #16]	; (1f324 <sw_timer_tcc_callback+0x1c>)
   1f312:	681b      	ldr	r3, [r3, #0]
   1f314:	1c5a      	adds	r2, r3, #1
   1f316:	4b03      	ldr	r3, [pc, #12]	; (1f324 <sw_timer_tcc_callback+0x1c>)
   1f318:	601a      	str	r2, [r3, #0]
}
   1f31a:	46c0      	nop			; (mov r8, r8)
   1f31c:	46bd      	mov	sp, r7
   1f31e:	b002      	add	sp, #8
   1f320:	bd80      	pop	{r7, pc}
   1f322:	46c0      	nop			; (mov r8, r8)
   1f324:	2000418c 	.word	0x2000418c

0001f328 <sw_timer_get_config_defaults>:
}

#endif

void sw_timer_get_config_defaults(struct sw_timer_config *const config)
{
   1f328:	b580      	push	{r7, lr}
   1f32a:	b082      	sub	sp, #8
   1f32c:	af00      	add	r7, sp, #0
   1f32e:	6078      	str	r0, [r7, #4]
	Assert(config);

	config->accuracy = 100;
   1f330:	687b      	ldr	r3, [r7, #4]
   1f332:	2264      	movs	r2, #100	; 0x64
   1f334:	805a      	strh	r2, [r3, #2]
	config->tcc_dev = 0;
   1f336:	687b      	ldr	r3, [r7, #4]
   1f338:	2200      	movs	r2, #0
   1f33a:	701a      	strb	r2, [r3, #0]
	config->tcc_callback_channel = 0;
   1f33c:	687b      	ldr	r3, [r7, #4]
   1f33e:	2200      	movs	r2, #0
   1f340:	705a      	strb	r2, [r3, #1]
}
   1f342:	46c0      	nop			; (mov r8, r8)
   1f344:	46bd      	mov	sp, r7
   1f346:	b002      	add	sp, #8
   1f348:	bd80      	pop	{r7, pc}
	...

0001f34c <sw_timer_init>:

void sw_timer_init(struct sw_timer_module *const module_inst, struct sw_timer_config *const config)
{
   1f34c:	b590      	push	{r4, r7, lr}
   1f34e:	b0b1      	sub	sp, #196	; 0xc4
   1f350:	af00      	add	r7, sp, #0
   1f352:	6078      	str	r0, [r7, #4]
   1f354:	6039      	str	r1, [r7, #0]
#if (SAMD21)
	struct tcc_config tcc_conf;
	struct tcc_module *tcc_module;
	Tcc *hw[] = TCC_INSTS;
   1f356:	230c      	movs	r3, #12
   1f358:	18fb      	adds	r3, r7, r3
   1f35a:	4a2e      	ldr	r2, [pc, #184]	; (1f414 <sw_timer_init+0xc8>)
   1f35c:	ca13      	ldmia	r2!, {r0, r1, r4}
   1f35e:	c313      	stmia	r3!, {r0, r1, r4}
	Assert(module_inst);
	Assert(config);
	Assert(config->tcc_dev < TCC_INST_NUM);
	Assert(config->tcc_callback_channel < TCC_NUM_CHANNELS);

	module_inst->accuracy = config->accuracy;
   1f360:	683b      	ldr	r3, [r7, #0]
   1f362:	885b      	ldrh	r3, [r3, #2]
   1f364:	001a      	movs	r2, r3
   1f366:	687b      	ldr	r3, [r7, #4]
   1f368:	655a      	str	r2, [r3, #84]	; 0x54
#if (SAMD21)
	/* Start the TCC module. */
	tcc_module = &module_inst->tcc_inst;
   1f36a:	687b      	ldr	r3, [r7, #4]
   1f36c:	3314      	adds	r3, #20
   1f36e:	22bc      	movs	r2, #188	; 0xbc
   1f370:	18ba      	adds	r2, r7, r2
   1f372:	6013      	str	r3, [r2, #0]
	tcc_get_config_defaults(&tcc_conf, hw[config->tcc_dev]);
   1f374:	683b      	ldr	r3, [r7, #0]
   1f376:	781b      	ldrb	r3, [r3, #0]
   1f378:	001a      	movs	r2, r3
   1f37a:	230c      	movs	r3, #12
   1f37c:	18fb      	adds	r3, r7, r3
   1f37e:	0092      	lsls	r2, r2, #2
   1f380:	58d2      	ldr	r2, [r2, r3]
   1f382:	2318      	movs	r3, #24
   1f384:	18fb      	adds	r3, r7, r3
   1f386:	0011      	movs	r1, r2
   1f388:	0018      	movs	r0, r3
   1f38a:	4b23      	ldr	r3, [pc, #140]	; (1f418 <sw_timer_init+0xcc>)
   1f38c:	4798      	blx	r3
	tcc_conf.counter.period = system_cpu_clock_get_hz() / (64 * 1000 / config->accuracy);
   1f38e:	4b23      	ldr	r3, [pc, #140]	; (1f41c <sw_timer_init+0xd0>)
   1f390:	4798      	blx	r3
   1f392:	0004      	movs	r4, r0
   1f394:	683b      	ldr	r3, [r7, #0]
   1f396:	885b      	ldrh	r3, [r3, #2]
   1f398:	001a      	movs	r2, r3
   1f39a:	4b21      	ldr	r3, [pc, #132]	; (1f420 <sw_timer_init+0xd4>)
   1f39c:	0011      	movs	r1, r2
   1f39e:	22fa      	movs	r2, #250	; 0xfa
   1f3a0:	0210      	lsls	r0, r2, #8
   1f3a2:	4798      	blx	r3
   1f3a4:	0003      	movs	r3, r0
   1f3a6:	001a      	movs	r2, r3
   1f3a8:	4b1e      	ldr	r3, [pc, #120]	; (1f424 <sw_timer_init+0xd8>)
   1f3aa:	0011      	movs	r1, r2
   1f3ac:	0020      	movs	r0, r4
   1f3ae:	4798      	blx	r3
   1f3b0:	0003      	movs	r3, r0
   1f3b2:	001a      	movs	r2, r3
   1f3b4:	2318      	movs	r3, #24
   1f3b6:	18fb      	adds	r3, r7, r3
   1f3b8:	605a      	str	r2, [r3, #4]
	tcc_conf.counter.clock_prescaler = TCC_CLOCK_PRESCALER_DIV64;
   1f3ba:	2318      	movs	r3, #24
   1f3bc:	18fb      	adds	r3, r7, r3
   1f3be:	2205      	movs	r2, #5
   1f3c0:	72da      	strb	r2, [r3, #11]
	tcc_init(tcc_module, hw[config->tcc_dev], &tcc_conf);
   1f3c2:	683b      	ldr	r3, [r7, #0]
   1f3c4:	781b      	ldrb	r3, [r3, #0]
   1f3c6:	001a      	movs	r2, r3
   1f3c8:	230c      	movs	r3, #12
   1f3ca:	18fb      	adds	r3, r7, r3
   1f3cc:	0092      	lsls	r2, r2, #2
   1f3ce:	58d1      	ldr	r1, [r2, r3]
   1f3d0:	2318      	movs	r3, #24
   1f3d2:	18fa      	adds	r2, r7, r3
   1f3d4:	23bc      	movs	r3, #188	; 0xbc
   1f3d6:	18fb      	adds	r3, r7, r3
   1f3d8:	681b      	ldr	r3, [r3, #0]
   1f3da:	0018      	movs	r0, r3
   1f3dc:	4b12      	ldr	r3, [pc, #72]	; (1f428 <sw_timer_init+0xdc>)
   1f3de:	4798      	blx	r3
	tcc_register_callback(tcc_module, sw_timer_tcc_callback, config->tcc_callback_channel + TCC_CALLBACK_CHANNEL_0);
   1f3e0:	683b      	ldr	r3, [r7, #0]
   1f3e2:	785b      	ldrb	r3, [r3, #1]
   1f3e4:	3308      	adds	r3, #8
   1f3e6:	b2da      	uxtb	r2, r3
   1f3e8:	4910      	ldr	r1, [pc, #64]	; (1f42c <sw_timer_init+0xe0>)
   1f3ea:	23bc      	movs	r3, #188	; 0xbc
   1f3ec:	18fb      	adds	r3, r7, r3
   1f3ee:	681b      	ldr	r3, [r3, #0]
   1f3f0:	0018      	movs	r0, r3
   1f3f2:	4b0f      	ldr	r3, [pc, #60]	; (1f430 <sw_timer_init+0xe4>)
   1f3f4:	4798      	blx	r3
	tcc_enable_callback(tcc_module, config->tcc_callback_channel + TCC_CALLBACK_CHANNEL_0);
   1f3f6:	683b      	ldr	r3, [r7, #0]
   1f3f8:	785b      	ldrb	r3, [r3, #1]
   1f3fa:	3308      	adds	r3, #8
   1f3fc:	b2da      	uxtb	r2, r3
   1f3fe:	23bc      	movs	r3, #188	; 0xbc
   1f400:	18fb      	adds	r3, r7, r3
   1f402:	681b      	ldr	r3, [r3, #0]
   1f404:	0011      	movs	r1, r2
   1f406:	0018      	movs	r0, r3
   1f408:	4b0a      	ldr	r3, [pc, #40]	; (1f434 <sw_timer_init+0xe8>)
   1f40a:	4798      	blx	r3

	ul_previous_time = rtt_read_timer_value(RTT);
	while (ul_previous_time == rtt_read_timer_value(RTT)) {
	}
#endif
}
   1f40c:	46c0      	nop			; (mov r8, r8)
   1f40e:	46bd      	mov	sp, r7
   1f410:	b031      	add	sp, #196	; 0xc4
   1f412:	bd90      	pop	{r4, r7, pc}
   1f414:	000268d8 	.word	0x000268d8
   1f418:	0001722d 	.word	0x0001722d
   1f41c:	0001f2b5 	.word	0x0001f2b5
   1f420:	0001f955 	.word	0x0001f955
   1f424:	0001f841 	.word	0x0001f841
   1f428:	00017889 	.word	0x00017889
   1f42c:	0001f309 	.word	0x0001f309
   1f430:	00017ca1 	.word	0x00017ca1
   1f434:	00017ce1 	.word	0x00017ce1

0001f438 <sw_timer_enable>:

void sw_timer_enable(struct sw_timer_module *const module_inst)
{
   1f438:	b580      	push	{r7, lr}
   1f43a:	b084      	sub	sp, #16
   1f43c:	af00      	add	r7, sp, #0
   1f43e:	6078      	str	r0, [r7, #4]
	struct tcc_module *tcc_module;
#endif

	Assert(module_inst);
#if (SAMD21)
	tcc_module = &module_inst->tcc_inst;
   1f440:	687b      	ldr	r3, [r7, #4]
   1f442:	3314      	adds	r3, #20
   1f444:	60fb      	str	r3, [r7, #12]

	tcc_enable(tcc_module);
   1f446:	68fb      	ldr	r3, [r7, #12]
   1f448:	0018      	movs	r0, r3
   1f44a:	4b03      	ldr	r3, [pc, #12]	; (1f458 <sw_timer_enable+0x20>)
   1f44c:	4798      	blx	r3
	NVIC_ClearPendingIRQ(RTT_IRQn);
	NVIC_SetPriority(RTT_IRQn, 0);
	NVIC_EnableIRQ(RTT_IRQn);
	rtt_enable_interrupt(RTT, RTT_MR_RTTINCIEN);
#endif
}
   1f44e:	46c0      	nop			; (mov r8, r8)
   1f450:	46bd      	mov	sp, r7
   1f452:	b004      	add	sp, #16
   1f454:	bd80      	pop	{r7, pc}
   1f456:	46c0      	nop			; (mov r8, r8)
   1f458:	0001f2d9 	.word	0x0001f2d9

0001f45c <sw_timer_register_callback>:
#endif
}

int sw_timer_register_callback(struct sw_timer_module *const module_inst,
		sw_timer_callback_t callback, void *context, uint32_t period)
{
   1f45c:	b580      	push	{r7, lr}
   1f45e:	b086      	sub	sp, #24
   1f460:	af00      	add	r7, sp, #0
   1f462:	60f8      	str	r0, [r7, #12]
   1f464:	60b9      	str	r1, [r7, #8]
   1f466:	607a      	str	r2, [r7, #4]
   1f468:	603b      	str	r3, [r7, #0]
	int index;
	struct sw_timer_handle *handler;

	Assert(module_inst);

	for (index = 0; index < CONF_SW_TIMER_COUNT; index++) {
   1f46a:	2300      	movs	r3, #0
   1f46c:	617b      	str	r3, [r7, #20]
   1f46e:	e032      	b.n	1f4d6 <sw_timer_register_callback+0x7a>
		if (module_inst->handler[index].used == 0) {
   1f470:	68f9      	ldr	r1, [r7, #12]
   1f472:	697a      	ldr	r2, [r7, #20]
   1f474:	0013      	movs	r3, r2
   1f476:	009b      	lsls	r3, r3, #2
   1f478:	189b      	adds	r3, r3, r2
   1f47a:	009b      	lsls	r3, r3, #2
   1f47c:	5c5b      	ldrb	r3, [r3, r1]
   1f47e:	07db      	lsls	r3, r3, #31
   1f480:	0fdb      	lsrs	r3, r3, #31
   1f482:	b2db      	uxtb	r3, r3
   1f484:	2b00      	cmp	r3, #0
   1f486:	d123      	bne.n	1f4d0 <sw_timer_register_callback+0x74>
			handler = &module_inst->handler[index];
   1f488:	697a      	ldr	r2, [r7, #20]
   1f48a:	0013      	movs	r3, r2
   1f48c:	009b      	lsls	r3, r3, #2
   1f48e:	189b      	adds	r3, r3, r2
   1f490:	009b      	lsls	r3, r3, #2
   1f492:	68fa      	ldr	r2, [r7, #12]
   1f494:	18d3      	adds	r3, r2, r3
   1f496:	613b      	str	r3, [r7, #16]
			handler->callback = callback;
   1f498:	693b      	ldr	r3, [r7, #16]
   1f49a:	68ba      	ldr	r2, [r7, #8]
   1f49c:	605a      	str	r2, [r3, #4]
			handler->callback_enable = 0;
   1f49e:	693b      	ldr	r3, [r7, #16]
   1f4a0:	781a      	ldrb	r2, [r3, #0]
   1f4a2:	2102      	movs	r1, #2
   1f4a4:	438a      	bics	r2, r1
   1f4a6:	701a      	strb	r2, [r3, #0]
			handler->context = context;
   1f4a8:	693b      	ldr	r3, [r7, #16]
   1f4aa:	687a      	ldr	r2, [r7, #4]
   1f4ac:	609a      	str	r2, [r3, #8]
			handler->period = period / module_inst->accuracy;
   1f4ae:	68fb      	ldr	r3, [r7, #12]
   1f4b0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
   1f4b2:	4b0d      	ldr	r3, [pc, #52]	; (1f4e8 <sw_timer_register_callback+0x8c>)
   1f4b4:	0011      	movs	r1, r2
   1f4b6:	6838      	ldr	r0, [r7, #0]
   1f4b8:	4798      	blx	r3
   1f4ba:	0003      	movs	r3, r0
   1f4bc:	001a      	movs	r2, r3
   1f4be:	693b      	ldr	r3, [r7, #16]
   1f4c0:	60da      	str	r2, [r3, #12]
			handler->used = 1;
   1f4c2:	693b      	ldr	r3, [r7, #16]
   1f4c4:	781a      	ldrb	r2, [r3, #0]
   1f4c6:	2101      	movs	r1, #1
   1f4c8:	430a      	orrs	r2, r1
   1f4ca:	701a      	strb	r2, [r3, #0]
			return index;
   1f4cc:	697b      	ldr	r3, [r7, #20]
   1f4ce:	e007      	b.n	1f4e0 <sw_timer_register_callback+0x84>
	for (index = 0; index < CONF_SW_TIMER_COUNT; index++) {
   1f4d0:	697b      	ldr	r3, [r7, #20]
   1f4d2:	3301      	adds	r3, #1
   1f4d4:	617b      	str	r3, [r7, #20]
   1f4d6:	697b      	ldr	r3, [r7, #20]
   1f4d8:	2b00      	cmp	r3, #0
   1f4da:	ddc9      	ble.n	1f470 <sw_timer_register_callback+0x14>
		}
	}
	return -1;
   1f4dc:	2301      	movs	r3, #1
   1f4de:	425b      	negs	r3, r3
}
   1f4e0:	0018      	movs	r0, r3
   1f4e2:	46bd      	mov	sp, r7
   1f4e4:	b006      	add	sp, #24
   1f4e6:	bd80      	pop	{r7, pc}
   1f4e8:	0001f841 	.word	0x0001f841

0001f4ec <sw_timer_enable_callback>:

	handler->used = 0;
}

void sw_timer_enable_callback(struct sw_timer_module *const module_inst, int timer_id, uint32_t delay)
{
   1f4ec:	b580      	push	{r7, lr}
   1f4ee:	b086      	sub	sp, #24
   1f4f0:	af00      	add	r7, sp, #0
   1f4f2:	60f8      	str	r0, [r7, #12]
   1f4f4:	60b9      	str	r1, [r7, #8]
   1f4f6:	607a      	str	r2, [r7, #4]
	struct sw_timer_handle *handler;

	Assert(module_inst);
	Assert((timer_id >= 0 && timer_id < CONF_SW_TIMER_COUNT));

	handler = &module_inst->handler[timer_id];
   1f4f8:	68ba      	ldr	r2, [r7, #8]
   1f4fa:	0013      	movs	r3, r2
   1f4fc:	009b      	lsls	r3, r3, #2
   1f4fe:	189b      	adds	r3, r3, r2
   1f500:	009b      	lsls	r3, r3, #2
   1f502:	68fa      	ldr	r2, [r7, #12]
   1f504:	18d3      	adds	r3, r2, r3
   1f506:	617b      	str	r3, [r7, #20]

	handler->callback_enable = 1;
   1f508:	697b      	ldr	r3, [r7, #20]
   1f50a:	781a      	ldrb	r2, [r3, #0]
   1f50c:	2102      	movs	r1, #2
   1f50e:	430a      	orrs	r2, r1
   1f510:	701a      	strb	r2, [r3, #0]
	handler->expire_time = sw_timer_tick + (delay / module_inst->accuracy);
   1f512:	68fb      	ldr	r3, [r7, #12]
   1f514:	6d5a      	ldr	r2, [r3, #84]	; 0x54
   1f516:	4b07      	ldr	r3, [pc, #28]	; (1f534 <sw_timer_enable_callback+0x48>)
   1f518:	0011      	movs	r1, r2
   1f51a:	6878      	ldr	r0, [r7, #4]
   1f51c:	4798      	blx	r3
   1f51e:	0003      	movs	r3, r0
   1f520:	001a      	movs	r2, r3
   1f522:	4b05      	ldr	r3, [pc, #20]	; (1f538 <sw_timer_enable_callback+0x4c>)
   1f524:	681b      	ldr	r3, [r3, #0]
   1f526:	18d2      	adds	r2, r2, r3
   1f528:	697b      	ldr	r3, [r7, #20]
   1f52a:	611a      	str	r2, [r3, #16]
}
   1f52c:	46c0      	nop			; (mov r8, r8)
   1f52e:	46bd      	mov	sp, r7
   1f530:	b006      	add	sp, #24
   1f532:	bd80      	pop	{r7, pc}
   1f534:	0001f841 	.word	0x0001f841
   1f538:	2000418c 	.word	0x2000418c

0001f53c <sw_timer_disable_callback>:

void sw_timer_disable_callback(struct sw_timer_module *const module_inst, int timer_id)
{
   1f53c:	b580      	push	{r7, lr}
   1f53e:	b084      	sub	sp, #16
   1f540:	af00      	add	r7, sp, #0
   1f542:	6078      	str	r0, [r7, #4]
   1f544:	6039      	str	r1, [r7, #0]
	struct sw_timer_handle *handler;

	Assert(module_inst);
	Assert((timer_id >= 0 && timer_id < CONF_SW_TIMER_COUNT));

	handler = &module_inst->handler[timer_id];
   1f546:	683a      	ldr	r2, [r7, #0]
   1f548:	0013      	movs	r3, r2
   1f54a:	009b      	lsls	r3, r3, #2
   1f54c:	189b      	adds	r3, r3, r2
   1f54e:	009b      	lsls	r3, r3, #2
   1f550:	687a      	ldr	r2, [r7, #4]
   1f552:	18d3      	adds	r3, r2, r3
   1f554:	60fb      	str	r3, [r7, #12]

	handler->callback_enable = 0;
   1f556:	68fb      	ldr	r3, [r7, #12]
   1f558:	781a      	ldrb	r2, [r3, #0]
   1f55a:	2102      	movs	r1, #2
   1f55c:	438a      	bics	r2, r1
   1f55e:	701a      	strb	r2, [r3, #0]
}
   1f560:	46c0      	nop			; (mov r8, r8)
   1f562:	46bd      	mov	sp, r7
   1f564:	b004      	add	sp, #16
   1f566:	bd80      	pop	{r7, pc}

0001f568 <sw_timer_task>:

void sw_timer_task(struct sw_timer_module *const module_inst)
{
   1f568:	b590      	push	{r4, r7, lr}
   1f56a:	b085      	sub	sp, #20
   1f56c:	af00      	add	r7, sp, #0
   1f56e:	6078      	str	r0, [r7, #4]
	int index;
	struct sw_timer_handle *handler;

	Assert(module_inst);

	for (index = 0; index < CONF_SW_TIMER_COUNT; index++) {
   1f570:	2300      	movs	r3, #0
   1f572:	60fb      	str	r3, [r7, #12]
   1f574:	e053      	b.n	1f61e <sw_timer_task+0xb6>
		if (module_inst->handler[index].used && module_inst->handler[index].callback_enable) {
   1f576:	6879      	ldr	r1, [r7, #4]
   1f578:	68fa      	ldr	r2, [r7, #12]
   1f57a:	0013      	movs	r3, r2
   1f57c:	009b      	lsls	r3, r3, #2
   1f57e:	189b      	adds	r3, r3, r2
   1f580:	009b      	lsls	r3, r3, #2
   1f582:	5c5b      	ldrb	r3, [r3, r1]
   1f584:	07db      	lsls	r3, r3, #31
   1f586:	0fdb      	lsrs	r3, r3, #31
   1f588:	b2db      	uxtb	r3, r3
   1f58a:	2b00      	cmp	r3, #0
   1f58c:	d044      	beq.n	1f618 <sw_timer_task+0xb0>
   1f58e:	6879      	ldr	r1, [r7, #4]
   1f590:	68fa      	ldr	r2, [r7, #12]
   1f592:	0013      	movs	r3, r2
   1f594:	009b      	lsls	r3, r3, #2
   1f596:	189b      	adds	r3, r3, r2
   1f598:	009b      	lsls	r3, r3, #2
   1f59a:	5c5b      	ldrb	r3, [r3, r1]
   1f59c:	079b      	lsls	r3, r3, #30
   1f59e:	0fdb      	lsrs	r3, r3, #31
   1f5a0:	b2db      	uxtb	r3, r3
   1f5a2:	2b00      	cmp	r3, #0
   1f5a4:	d038      	beq.n	1f618 <sw_timer_task+0xb0>
			handler = &module_inst->handler[index];
   1f5a6:	68fa      	ldr	r2, [r7, #12]
   1f5a8:	0013      	movs	r3, r2
   1f5aa:	009b      	lsls	r3, r3, #2
   1f5ac:	189b      	adds	r3, r3, r2
   1f5ae:	009b      	lsls	r3, r3, #2
   1f5b0:	687a      	ldr	r2, [r7, #4]
   1f5b2:	18d3      	adds	r3, r2, r3
   1f5b4:	60bb      	str	r3, [r7, #8]
			if ((int)(handler->expire_time - sw_timer_tick) < 0 && handler->busy == 0) {
   1f5b6:	68bb      	ldr	r3, [r7, #8]
   1f5b8:	691a      	ldr	r2, [r3, #16]
   1f5ba:	4b1c      	ldr	r3, [pc, #112]	; (1f62c <sw_timer_task+0xc4>)
   1f5bc:	681b      	ldr	r3, [r3, #0]
   1f5be:	1ad3      	subs	r3, r2, r3
   1f5c0:	d52a      	bpl.n	1f618 <sw_timer_task+0xb0>
   1f5c2:	68bb      	ldr	r3, [r7, #8]
   1f5c4:	781b      	ldrb	r3, [r3, #0]
   1f5c6:	2204      	movs	r2, #4
   1f5c8:	4013      	ands	r3, r2
   1f5ca:	b2db      	uxtb	r3, r3
   1f5cc:	2b00      	cmp	r3, #0
   1f5ce:	d123      	bne.n	1f618 <sw_timer_task+0xb0>
				/* Enter critical section. */
				handler->busy = 1;
   1f5d0:	68bb      	ldr	r3, [r7, #8]
   1f5d2:	781a      	ldrb	r2, [r3, #0]
   1f5d4:	2104      	movs	r1, #4
   1f5d6:	430a      	orrs	r2, r1
   1f5d8:	701a      	strb	r2, [r3, #0]
				/* Timer was expired. */
				if (handler->period > 0) {
   1f5da:	68bb      	ldr	r3, [r7, #8]
   1f5dc:	68db      	ldr	r3, [r3, #12]
   1f5de:	2b00      	cmp	r3, #0
   1f5e0:	d007      	beq.n	1f5f2 <sw_timer_task+0x8a>
					handler->expire_time = sw_timer_tick + handler->period;
   1f5e2:	68bb      	ldr	r3, [r7, #8]
   1f5e4:	68da      	ldr	r2, [r3, #12]
   1f5e6:	4b11      	ldr	r3, [pc, #68]	; (1f62c <sw_timer_task+0xc4>)
   1f5e8:	681b      	ldr	r3, [r3, #0]
   1f5ea:	18d2      	adds	r2, r2, r3
   1f5ec:	68bb      	ldr	r3, [r7, #8]
   1f5ee:	611a      	str	r2, [r3, #16]
   1f5f0:	e004      	b.n	1f5fc <sw_timer_task+0x94>
				} else {
					/* One shot. */
					handler->callback_enable = 0;
   1f5f2:	68bb      	ldr	r3, [r7, #8]
   1f5f4:	781a      	ldrb	r2, [r3, #0]
   1f5f6:	2102      	movs	r1, #2
   1f5f8:	438a      	bics	r2, r1
   1f5fa:	701a      	strb	r2, [r3, #0]
				}
				/* Call callback function. */
				handler->callback(module_inst, index, handler->context, handler->period);
   1f5fc:	68bb      	ldr	r3, [r7, #8]
   1f5fe:	685c      	ldr	r4, [r3, #4]
   1f600:	68bb      	ldr	r3, [r7, #8]
   1f602:	689a      	ldr	r2, [r3, #8]
   1f604:	68bb      	ldr	r3, [r7, #8]
   1f606:	68db      	ldr	r3, [r3, #12]
   1f608:	68f9      	ldr	r1, [r7, #12]
   1f60a:	6878      	ldr	r0, [r7, #4]
   1f60c:	47a0      	blx	r4
				/* Leave critical section. */
				handler->busy = 0;
   1f60e:	68bb      	ldr	r3, [r7, #8]
   1f610:	781a      	ldrb	r2, [r3, #0]
   1f612:	2104      	movs	r1, #4
   1f614:	438a      	bics	r2, r1
   1f616:	701a      	strb	r2, [r3, #0]
	for (index = 0; index < CONF_SW_TIMER_COUNT; index++) {
   1f618:	68fb      	ldr	r3, [r7, #12]
   1f61a:	3301      	adds	r3, #1
   1f61c:	60fb      	str	r3, [r7, #12]
   1f61e:	68fb      	ldr	r3, [r7, #12]
   1f620:	2b00      	cmp	r3, #0
   1f622:	dda8      	ble.n	1f576 <sw_timer_task+0xe>
			}
		}
	}
}
   1f624:	46c0      	nop			; (mov r8, r8)
   1f626:	46bd      	mov	sp, r7
   1f628:	b005      	add	sp, #20
   1f62a:	bd90      	pop	{r4, r7, pc}
   1f62c:	2000418c 	.word	0x2000418c

0001f630 <main>:
 * @brief Main application function.
 * Application entry point.
 * @return int
 */
int main(void)
{
   1f630:	b580      	push	{r7, lr}
   1f632:	af00      	add	r7, sp, #0
    /* Initialize the board. */
    system_init();
   1f634:	4b06      	ldr	r3, [pc, #24]	; (1f650 <main+0x20>)
   1f636:	4798      	blx	r3

    /* Initialize the UART console. */
    InitializeSerialConsole();
   1f638:	4b06      	ldr	r3, [pc, #24]	; (1f654 <main+0x24>)
   1f63a:	4798      	blx	r3

    // Initialize trace capabilities
    vTraceEnable(TRC_START);
   1f63c:	2001      	movs	r0, #1
   1f63e:	4b06      	ldr	r3, [pc, #24]	; (1f658 <main+0x28>)
   1f640:	4798      	blx	r3
    // Start FreeRTOS scheduler
    vTaskStartScheduler();
   1f642:	4b06      	ldr	r3, [pc, #24]	; (1f65c <main+0x2c>)
   1f644:	4798      	blx	r3

    return 0;  // Will not get here
   1f646:	2300      	movs	r3, #0
}
   1f648:	0018      	movs	r0, r3
   1f64a:	46bd      	mov	sp, r7
   1f64c:	bd80      	pop	{r7, pc}
   1f64e:	46c0      	nop			; (mov r8, r8)
   1f650:	00017121 	.word	0x00017121
   1f654:	0000ac29 	.word	0x0000ac29
   1f658:	000052f5 	.word	0x000052f5
   1f65c:	00009281 	.word	0x00009281

0001f660 <vApplicationDaemonTaskStartupHook>:
 *					here will be called before other tasks are initilized.
 * @param[in]        None
 * @return           None
 */
void vApplicationDaemonTaskStartupHook(void)
{
   1f660:	b580      	push	{r7, lr}
   1f662:	b082      	sub	sp, #8
   1f664:	af00      	add	r7, sp, #0
    SerialConsoleWriteString("\r\n\r\n-----ESE516 Main Program-----\r\n");
   1f666:	4b22      	ldr	r3, [pc, #136]	; (1f6f0 <vApplicationDaemonTaskStartupHook+0x90>)
   1f668:	0018      	movs	r0, r3
   1f66a:	4b22      	ldr	r3, [pc, #136]	; (1f6f4 <vApplicationDaemonTaskStartupHook+0x94>)
   1f66c:	4798      	blx	r3

    // Initialize HW that needs FreeRTOS Initialization
    SerialConsoleWriteString("\r\n\r\nInitialize HW...\r\n");
   1f66e:	4b22      	ldr	r3, [pc, #136]	; (1f6f8 <vApplicationDaemonTaskStartupHook+0x98>)
   1f670:	0018      	movs	r0, r3
   1f672:	4b20      	ldr	r3, [pc, #128]	; (1f6f4 <vApplicationDaemonTaskStartupHook+0x94>)
   1f674:	4798      	blx	r3
    if (I2cInitializeDriver() != STATUS_OK) {
   1f676:	4b21      	ldr	r3, [pc, #132]	; (1f6fc <vApplicationDaemonTaskStartupHook+0x9c>)
   1f678:	4798      	blx	r3
   1f67a:	1e03      	subs	r3, r0, #0
   1f67c:	d004      	beq.n	1f688 <vApplicationDaemonTaskStartupHook+0x28>
        SerialConsoleWriteString("Error initializing I2C Driver!\r\n");
   1f67e:	4b20      	ldr	r3, [pc, #128]	; (1f700 <vApplicationDaemonTaskStartupHook+0xa0>)
   1f680:	0018      	movs	r0, r3
   1f682:	4b1c      	ldr	r3, [pc, #112]	; (1f6f4 <vApplicationDaemonTaskStartupHook+0x94>)
   1f684:	4798      	blx	r3
   1f686:	e003      	b.n	1f690 <vApplicationDaemonTaskStartupHook+0x30>
    } else {
        SerialConsoleWriteString("Initialized I2C Driver!\r\n");
   1f688:	4b1e      	ldr	r3, [pc, #120]	; (1f704 <vApplicationDaemonTaskStartupHook+0xa4>)
   1f68a:	0018      	movs	r0, r3
   1f68c:	4b19      	ldr	r3, [pc, #100]	; (1f6f4 <vApplicationDaemonTaskStartupHook+0x94>)
   1f68e:	4798      	blx	r3
    }

    // Initialize IMU HW
    uint8_t whoAmI = 0x00;
   1f690:	1dfb      	adds	r3, r7, #7
   1f692:	2200      	movs	r2, #0
   1f694:	701a      	strb	r2, [r3, #0]
    lsm6dso_device_id_get(GetImuStruct(), &whoAmI);
   1f696:	4b1c      	ldr	r3, [pc, #112]	; (1f708 <vApplicationDaemonTaskStartupHook+0xa8>)
   1f698:	4798      	blx	r3
   1f69a:	0002      	movs	r2, r0
   1f69c:	1dfb      	adds	r3, r7, #7
   1f69e:	0019      	movs	r1, r3
   1f6a0:	0010      	movs	r0, r2
   1f6a2:	4b1a      	ldr	r3, [pc, #104]	; (1f70c <vApplicationDaemonTaskStartupHook+0xac>)
   1f6a4:	4798      	blx	r3
    if(whoAmI == LSM6DSO_ID){
   1f6a6:	1dfb      	adds	r3, r7, #7
   1f6a8:	781b      	ldrb	r3, [r3, #0]
   1f6aa:	2b6c      	cmp	r3, #108	; 0x6c
   1f6ac:	d111      	bne.n	1f6d2 <vApplicationDaemonTaskStartupHook+0x72>
        SerialConsoleWriteString("Found the Correct IMU\r\n");
   1f6ae:	4b18      	ldr	r3, [pc, #96]	; (1f710 <vApplicationDaemonTaskStartupHook+0xb0>)
   1f6b0:	0018      	movs	r0, r3
   1f6b2:	4b10      	ldr	r3, [pc, #64]	; (1f6f4 <vApplicationDaemonTaskStartupHook+0x94>)
   1f6b4:	4798      	blx	r3
        if(InitImu() == 0){
   1f6b6:	4b17      	ldr	r3, [pc, #92]	; (1f714 <vApplicationDaemonTaskStartupHook+0xb4>)
   1f6b8:	4798      	blx	r3
   1f6ba:	1e03      	subs	r3, r0, #0
   1f6bc:	d104      	bne.n	1f6c8 <vApplicationDaemonTaskStartupHook+0x68>
            SerialConsoleWriteString("Initialized IMU!\r\n");
   1f6be:	4b16      	ldr	r3, [pc, #88]	; (1f718 <vApplicationDaemonTaskStartupHook+0xb8>)
   1f6c0:	0018      	movs	r0, r3
   1f6c2:	4b0c      	ldr	r3, [pc, #48]	; (1f6f4 <vApplicationDaemonTaskStartupHook+0x94>)
   1f6c4:	4798      	blx	r3
   1f6c6:	e008      	b.n	1f6da <vApplicationDaemonTaskStartupHook+0x7a>
        }
        else{
            SerialConsoleWriteString("Unable to Initialize IMU!!!\r\n");
   1f6c8:	4b14      	ldr	r3, [pc, #80]	; (1f71c <vApplicationDaemonTaskStartupHook+0xbc>)
   1f6ca:	0018      	movs	r0, r3
   1f6cc:	4b09      	ldr	r3, [pc, #36]	; (1f6f4 <vApplicationDaemonTaskStartupHook+0x94>)
   1f6ce:	4798      	blx	r3
   1f6d0:	e003      	b.n	1f6da <vApplicationDaemonTaskStartupHook+0x7a>
        }
    }
    else{
        SerialConsoleWriteString("Could not find IMU!!!\r\n");
   1f6d2:	4b13      	ldr	r3, [pc, #76]	; (1f720 <vApplicationDaemonTaskStartupHook+0xc0>)
   1f6d4:	0018      	movs	r0, r3
   1f6d6:	4b07      	ldr	r3, [pc, #28]	; (1f6f4 <vApplicationDaemonTaskStartupHook+0x94>)
   1f6d8:	4798      	blx	r3
    }

    StartTasks();
   1f6da:	4b12      	ldr	r3, [pc, #72]	; (1f724 <vApplicationDaemonTaskStartupHook+0xc4>)
   1f6dc:	4798      	blx	r3

    vTaskSuspend(daemonTaskHandle);
   1f6de:	4b12      	ldr	r3, [pc, #72]	; (1f728 <vApplicationDaemonTaskStartupHook+0xc8>)
   1f6e0:	681b      	ldr	r3, [r3, #0]
   1f6e2:	0018      	movs	r0, r3
   1f6e4:	4b11      	ldr	r3, [pc, #68]	; (1f72c <vApplicationDaemonTaskStartupHook+0xcc>)
   1f6e6:	4798      	blx	r3
}
   1f6e8:	46c0      	nop			; (mov r8, r8)
   1f6ea:	46bd      	mov	sp, r7
   1f6ec:	b002      	add	sp, #8
   1f6ee:	bd80      	pop	{r7, pc}
   1f6f0:	000268e4 	.word	0x000268e4
   1f6f4:	0000ac99 	.word	0x0000ac99
   1f6f8:	00026908 	.word	0x00026908
   1f6fc:	000018c1 	.word	0x000018c1
   1f700:	00026920 	.word	0x00026920
   1f704:	00026944 	.word	0x00026944
   1f708:	00002afd 	.word	0x00002afd
   1f70c:	00002631 	.word	0x00002631
   1f710:	00026960 	.word	0x00026960
   1f714:	00002b0d 	.word	0x00002b0d
   1f718:	00026978 	.word	0x00026978
   1f71c:	0002698c 	.word	0x0002698c
   1f720:	000269ac 	.word	0x000269ac
   1f724:	0001f731 	.word	0x0001f731
   1f728:	20004194 	.word	0x20004194
   1f72c:	00009125 	.word	0x00009125

0001f730 <StartTasks>:
 * @details
 * @param[in]        None
 * @return           None
 */
static void StartTasks(void)
{
   1f730:	b590      	push	{r4, r7, lr}
   1f732:	b083      	sub	sp, #12
   1f734:	af02      	add	r7, sp, #8
    snprintf(bufferPrint, 64, "Heap before starting tasks: %d\r\n", xPortGetFreeHeapSize());
   1f736:	4b26      	ldr	r3, [pc, #152]	; (1f7d0 <StartTasks+0xa0>)
   1f738:	4798      	blx	r3
   1f73a:	0003      	movs	r3, r0
   1f73c:	4a25      	ldr	r2, [pc, #148]	; (1f7d4 <StartTasks+0xa4>)
   1f73e:	4826      	ldr	r0, [pc, #152]	; (1f7d8 <StartTasks+0xa8>)
   1f740:	2140      	movs	r1, #64	; 0x40
   1f742:	4c26      	ldr	r4, [pc, #152]	; (1f7dc <StartTasks+0xac>)
   1f744:	47a0      	blx	r4
    SerialConsoleWriteString(bufferPrint);
   1f746:	4b24      	ldr	r3, [pc, #144]	; (1f7d8 <StartTasks+0xa8>)
   1f748:	0018      	movs	r0, r3
   1f74a:	4b25      	ldr	r3, [pc, #148]	; (1f7e0 <StartTasks+0xb0>)
   1f74c:	4798      	blx	r3

    // Initialize Tasks here

    if (xTaskCreate(vCommandConsoleTask, "CLI_TASK", CLI_TASK_SIZE, NULL, CLI_PRIORITY, &cliTaskHandle) != pdPASS) {
   1f74e:	23c8      	movs	r3, #200	; 0xc8
   1f750:	005a      	lsls	r2, r3, #1
   1f752:	4924      	ldr	r1, [pc, #144]	; (1f7e4 <StartTasks+0xb4>)
   1f754:	4824      	ldr	r0, [pc, #144]	; (1f7e8 <StartTasks+0xb8>)
   1f756:	4b25      	ldr	r3, [pc, #148]	; (1f7ec <StartTasks+0xbc>)
   1f758:	9301      	str	r3, [sp, #4]
   1f75a:	2304      	movs	r3, #4
   1f75c:	9300      	str	r3, [sp, #0]
   1f75e:	2300      	movs	r3, #0
   1f760:	4c23      	ldr	r4, [pc, #140]	; (1f7f0 <StartTasks+0xc0>)
   1f762:	47a0      	blx	r4
   1f764:	0003      	movs	r3, r0
   1f766:	2b01      	cmp	r3, #1
   1f768:	d003      	beq.n	1f772 <StartTasks+0x42>
        SerialConsoleWriteString("ERR: CLI task could not be initialized!\r\n");
   1f76a:	4b22      	ldr	r3, [pc, #136]	; (1f7f4 <StartTasks+0xc4>)
   1f76c:	0018      	movs	r0, r3
   1f76e:	4b1c      	ldr	r3, [pc, #112]	; (1f7e0 <StartTasks+0xb0>)
   1f770:	4798      	blx	r3
    }

    snprintf(bufferPrint, 64, "Heap after starting CLI: %d\r\n", xPortGetFreeHeapSize());
   1f772:	4b17      	ldr	r3, [pc, #92]	; (1f7d0 <StartTasks+0xa0>)
   1f774:	4798      	blx	r3
   1f776:	0003      	movs	r3, r0
   1f778:	4a1f      	ldr	r2, [pc, #124]	; (1f7f8 <StartTasks+0xc8>)
   1f77a:	4817      	ldr	r0, [pc, #92]	; (1f7d8 <StartTasks+0xa8>)
   1f77c:	2140      	movs	r1, #64	; 0x40
   1f77e:	4c17      	ldr	r4, [pc, #92]	; (1f7dc <StartTasks+0xac>)
   1f780:	47a0      	blx	r4
    SerialConsoleWriteString(bufferPrint);
   1f782:	4b15      	ldr	r3, [pc, #84]	; (1f7d8 <StartTasks+0xa8>)
   1f784:	0018      	movs	r0, r3
   1f786:	4b16      	ldr	r3, [pc, #88]	; (1f7e0 <StartTasks+0xb0>)
   1f788:	4798      	blx	r3

    if (xTaskCreate(vWifiTask, "WIFI_TASK", WIFI_TASK_SIZE, NULL, WIFI_PRIORITY, &wifiTaskHandle) != pdPASS) {
   1f78a:	23fa      	movs	r3, #250	; 0xfa
   1f78c:	009a      	lsls	r2, r3, #2
   1f78e:	491b      	ldr	r1, [pc, #108]	; (1f7fc <StartTasks+0xcc>)
   1f790:	481b      	ldr	r0, [pc, #108]	; (1f800 <StartTasks+0xd0>)
   1f792:	4b1c      	ldr	r3, [pc, #112]	; (1f804 <StartTasks+0xd4>)
   1f794:	9301      	str	r3, [sp, #4]
   1f796:	2303      	movs	r3, #3
   1f798:	9300      	str	r3, [sp, #0]
   1f79a:	2300      	movs	r3, #0
   1f79c:	4c14      	ldr	r4, [pc, #80]	; (1f7f0 <StartTasks+0xc0>)
   1f79e:	47a0      	blx	r4
   1f7a0:	0003      	movs	r3, r0
   1f7a2:	2b01      	cmp	r3, #1
   1f7a4:	d003      	beq.n	1f7ae <StartTasks+0x7e>
        SerialConsoleWriteString("ERR: WIFI task could not be initialized!\r\n");
   1f7a6:	4b18      	ldr	r3, [pc, #96]	; (1f808 <StartTasks+0xd8>)
   1f7a8:	0018      	movs	r0, r3
   1f7aa:	4b0d      	ldr	r3, [pc, #52]	; (1f7e0 <StartTasks+0xb0>)
   1f7ac:	4798      	blx	r3
    }
    snprintf(bufferPrint, 64, "Heap after starting WIFI: %d\r\n", xPortGetFreeHeapSize());
   1f7ae:	4b08      	ldr	r3, [pc, #32]	; (1f7d0 <StartTasks+0xa0>)
   1f7b0:	4798      	blx	r3
   1f7b2:	0003      	movs	r3, r0
   1f7b4:	4a15      	ldr	r2, [pc, #84]	; (1f80c <StartTasks+0xdc>)
   1f7b6:	4808      	ldr	r0, [pc, #32]	; (1f7d8 <StartTasks+0xa8>)
   1f7b8:	2140      	movs	r1, #64	; 0x40
   1f7ba:	4c08      	ldr	r4, [pc, #32]	; (1f7dc <StartTasks+0xac>)
   1f7bc:	47a0      	blx	r4
    SerialConsoleWriteString(bufferPrint);
   1f7be:	4b06      	ldr	r3, [pc, #24]	; (1f7d8 <StartTasks+0xa8>)
   1f7c0:	0018      	movs	r0, r3
   1f7c2:	4b07      	ldr	r3, [pc, #28]	; (1f7e0 <StartTasks+0xb0>)
   1f7c4:	4798      	blx	r3
}
   1f7c6:	46c0      	nop			; (mov r8, r8)
   1f7c8:	46bd      	mov	sp, r7
   1f7ca:	b001      	add	sp, #4
   1f7cc:	bd90      	pop	{r4, r7, pc}
   1f7ce:	46c0      	nop			; (mov r8, r8)
   1f7d0:	00007261 	.word	0x00007261
   1f7d4:	000269c4 	.word	0x000269c4
   1f7d8:	20005630 	.word	0x20005630
   1f7dc:	00021a75 	.word	0x00021a75
   1f7e0:	0000ac99 	.word	0x0000ac99
   1f7e4:	000269e8 	.word	0x000269e8
   1f7e8:	00000e71 	.word	0x00000e71
   1f7ec:	20004190 	.word	0x20004190
   1f7f0:	00008ca9 	.word	0x00008ca9
   1f7f4:	000269f4 	.word	0x000269f4
   1f7f8:	00026a20 	.word	0x00026a20
   1f7fc:	00026a40 	.word	0x00026a40
   1f800:	0000412d 	.word	0x0000412d
   1f804:	20004198 	.word	0x20004198
   1f808:	00026a4c 	.word	0x00026a4c
   1f80c:	00026a78 	.word	0x00026a78

0001f810 <vApplicationMallocFailedHook>:

void vApplicationMallocFailedHook(void)
{
   1f810:	b580      	push	{r7, lr}
   1f812:	af00      	add	r7, sp, #0
    SerialConsoleWriteString("Error on memory allocation on FREERTOS!\r\n");
   1f814:	4b02      	ldr	r3, [pc, #8]	; (1f820 <vApplicationMallocFailedHook+0x10>)
   1f816:	0018      	movs	r0, r3
   1f818:	4b02      	ldr	r3, [pc, #8]	; (1f824 <vApplicationMallocFailedHook+0x14>)
   1f81a:	4798      	blx	r3
    while (1)
   1f81c:	e7fe      	b.n	1f81c <vApplicationMallocFailedHook+0xc>
   1f81e:	46c0      	nop			; (mov r8, r8)
   1f820:	00026a98 	.word	0x00026a98
   1f824:	0000ac99 	.word	0x0000ac99

0001f828 <vApplicationStackOverflowHook>:
        ;
}

void vApplicationStackOverflowHook(void)
{
   1f828:	b580      	push	{r7, lr}
   1f82a:	af00      	add	r7, sp, #0
    SerialConsoleWriteString("Error on stack overflow on FREERTOS!\r\n");
   1f82c:	4b02      	ldr	r3, [pc, #8]	; (1f838 <vApplicationStackOverflowHook+0x10>)
   1f82e:	0018      	movs	r0, r3
   1f830:	4b02      	ldr	r3, [pc, #8]	; (1f83c <vApplicationStackOverflowHook+0x14>)
   1f832:	4798      	blx	r3
    while (1)
   1f834:	e7fe      	b.n	1f834 <vApplicationStackOverflowHook+0xc>
   1f836:	46c0      	nop			; (mov r8, r8)
   1f838:	00026ac4 	.word	0x00026ac4
   1f83c:	0000ac99 	.word	0x0000ac99

0001f840 <__udivsi3>:
   1f840:	2200      	movs	r2, #0
   1f842:	0843      	lsrs	r3, r0, #1
   1f844:	428b      	cmp	r3, r1
   1f846:	d374      	bcc.n	1f932 <__udivsi3+0xf2>
   1f848:	0903      	lsrs	r3, r0, #4
   1f84a:	428b      	cmp	r3, r1
   1f84c:	d35f      	bcc.n	1f90e <__udivsi3+0xce>
   1f84e:	0a03      	lsrs	r3, r0, #8
   1f850:	428b      	cmp	r3, r1
   1f852:	d344      	bcc.n	1f8de <__udivsi3+0x9e>
   1f854:	0b03      	lsrs	r3, r0, #12
   1f856:	428b      	cmp	r3, r1
   1f858:	d328      	bcc.n	1f8ac <__udivsi3+0x6c>
   1f85a:	0c03      	lsrs	r3, r0, #16
   1f85c:	428b      	cmp	r3, r1
   1f85e:	d30d      	bcc.n	1f87c <__udivsi3+0x3c>
   1f860:	22ff      	movs	r2, #255	; 0xff
   1f862:	0209      	lsls	r1, r1, #8
   1f864:	ba12      	rev	r2, r2
   1f866:	0c03      	lsrs	r3, r0, #16
   1f868:	428b      	cmp	r3, r1
   1f86a:	d302      	bcc.n	1f872 <__udivsi3+0x32>
   1f86c:	1212      	asrs	r2, r2, #8
   1f86e:	0209      	lsls	r1, r1, #8
   1f870:	d065      	beq.n	1f93e <__udivsi3+0xfe>
   1f872:	0b03      	lsrs	r3, r0, #12
   1f874:	428b      	cmp	r3, r1
   1f876:	d319      	bcc.n	1f8ac <__udivsi3+0x6c>
   1f878:	e000      	b.n	1f87c <__udivsi3+0x3c>
   1f87a:	0a09      	lsrs	r1, r1, #8
   1f87c:	0bc3      	lsrs	r3, r0, #15
   1f87e:	428b      	cmp	r3, r1
   1f880:	d301      	bcc.n	1f886 <__udivsi3+0x46>
   1f882:	03cb      	lsls	r3, r1, #15
   1f884:	1ac0      	subs	r0, r0, r3
   1f886:	4152      	adcs	r2, r2
   1f888:	0b83      	lsrs	r3, r0, #14
   1f88a:	428b      	cmp	r3, r1
   1f88c:	d301      	bcc.n	1f892 <__udivsi3+0x52>
   1f88e:	038b      	lsls	r3, r1, #14
   1f890:	1ac0      	subs	r0, r0, r3
   1f892:	4152      	adcs	r2, r2
   1f894:	0b43      	lsrs	r3, r0, #13
   1f896:	428b      	cmp	r3, r1
   1f898:	d301      	bcc.n	1f89e <__udivsi3+0x5e>
   1f89a:	034b      	lsls	r3, r1, #13
   1f89c:	1ac0      	subs	r0, r0, r3
   1f89e:	4152      	adcs	r2, r2
   1f8a0:	0b03      	lsrs	r3, r0, #12
   1f8a2:	428b      	cmp	r3, r1
   1f8a4:	d301      	bcc.n	1f8aa <__udivsi3+0x6a>
   1f8a6:	030b      	lsls	r3, r1, #12
   1f8a8:	1ac0      	subs	r0, r0, r3
   1f8aa:	4152      	adcs	r2, r2
   1f8ac:	0ac3      	lsrs	r3, r0, #11
   1f8ae:	428b      	cmp	r3, r1
   1f8b0:	d301      	bcc.n	1f8b6 <__udivsi3+0x76>
   1f8b2:	02cb      	lsls	r3, r1, #11
   1f8b4:	1ac0      	subs	r0, r0, r3
   1f8b6:	4152      	adcs	r2, r2
   1f8b8:	0a83      	lsrs	r3, r0, #10
   1f8ba:	428b      	cmp	r3, r1
   1f8bc:	d301      	bcc.n	1f8c2 <__udivsi3+0x82>
   1f8be:	028b      	lsls	r3, r1, #10
   1f8c0:	1ac0      	subs	r0, r0, r3
   1f8c2:	4152      	adcs	r2, r2
   1f8c4:	0a43      	lsrs	r3, r0, #9
   1f8c6:	428b      	cmp	r3, r1
   1f8c8:	d301      	bcc.n	1f8ce <__udivsi3+0x8e>
   1f8ca:	024b      	lsls	r3, r1, #9
   1f8cc:	1ac0      	subs	r0, r0, r3
   1f8ce:	4152      	adcs	r2, r2
   1f8d0:	0a03      	lsrs	r3, r0, #8
   1f8d2:	428b      	cmp	r3, r1
   1f8d4:	d301      	bcc.n	1f8da <__udivsi3+0x9a>
   1f8d6:	020b      	lsls	r3, r1, #8
   1f8d8:	1ac0      	subs	r0, r0, r3
   1f8da:	4152      	adcs	r2, r2
   1f8dc:	d2cd      	bcs.n	1f87a <__udivsi3+0x3a>
   1f8de:	09c3      	lsrs	r3, r0, #7
   1f8e0:	428b      	cmp	r3, r1
   1f8e2:	d301      	bcc.n	1f8e8 <__udivsi3+0xa8>
   1f8e4:	01cb      	lsls	r3, r1, #7
   1f8e6:	1ac0      	subs	r0, r0, r3
   1f8e8:	4152      	adcs	r2, r2
   1f8ea:	0983      	lsrs	r3, r0, #6
   1f8ec:	428b      	cmp	r3, r1
   1f8ee:	d301      	bcc.n	1f8f4 <__udivsi3+0xb4>
   1f8f0:	018b      	lsls	r3, r1, #6
   1f8f2:	1ac0      	subs	r0, r0, r3
   1f8f4:	4152      	adcs	r2, r2
   1f8f6:	0943      	lsrs	r3, r0, #5
   1f8f8:	428b      	cmp	r3, r1
   1f8fa:	d301      	bcc.n	1f900 <__udivsi3+0xc0>
   1f8fc:	014b      	lsls	r3, r1, #5
   1f8fe:	1ac0      	subs	r0, r0, r3
   1f900:	4152      	adcs	r2, r2
   1f902:	0903      	lsrs	r3, r0, #4
   1f904:	428b      	cmp	r3, r1
   1f906:	d301      	bcc.n	1f90c <__udivsi3+0xcc>
   1f908:	010b      	lsls	r3, r1, #4
   1f90a:	1ac0      	subs	r0, r0, r3
   1f90c:	4152      	adcs	r2, r2
   1f90e:	08c3      	lsrs	r3, r0, #3
   1f910:	428b      	cmp	r3, r1
   1f912:	d301      	bcc.n	1f918 <__udivsi3+0xd8>
   1f914:	00cb      	lsls	r3, r1, #3
   1f916:	1ac0      	subs	r0, r0, r3
   1f918:	4152      	adcs	r2, r2
   1f91a:	0883      	lsrs	r3, r0, #2
   1f91c:	428b      	cmp	r3, r1
   1f91e:	d301      	bcc.n	1f924 <__udivsi3+0xe4>
   1f920:	008b      	lsls	r3, r1, #2
   1f922:	1ac0      	subs	r0, r0, r3
   1f924:	4152      	adcs	r2, r2
   1f926:	0843      	lsrs	r3, r0, #1
   1f928:	428b      	cmp	r3, r1
   1f92a:	d301      	bcc.n	1f930 <__udivsi3+0xf0>
   1f92c:	004b      	lsls	r3, r1, #1
   1f92e:	1ac0      	subs	r0, r0, r3
   1f930:	4152      	adcs	r2, r2
   1f932:	1a41      	subs	r1, r0, r1
   1f934:	d200      	bcs.n	1f938 <__udivsi3+0xf8>
   1f936:	4601      	mov	r1, r0
   1f938:	4152      	adcs	r2, r2
   1f93a:	4610      	mov	r0, r2
   1f93c:	4770      	bx	lr
   1f93e:	e7ff      	b.n	1f940 <__udivsi3+0x100>
   1f940:	b501      	push	{r0, lr}
   1f942:	2000      	movs	r0, #0
   1f944:	f000 f8f0 	bl	1fb28 <__aeabi_idiv0>
   1f948:	bd02      	pop	{r1, pc}
   1f94a:	46c0      	nop			; (mov r8, r8)

0001f94c <__aeabi_uidivmod>:
   1f94c:	2900      	cmp	r1, #0
   1f94e:	d0f7      	beq.n	1f940 <__udivsi3+0x100>
   1f950:	e776      	b.n	1f840 <__udivsi3>
   1f952:	4770      	bx	lr

0001f954 <__divsi3>:
   1f954:	4603      	mov	r3, r0
   1f956:	430b      	orrs	r3, r1
   1f958:	d47f      	bmi.n	1fa5a <__divsi3+0x106>
   1f95a:	2200      	movs	r2, #0
   1f95c:	0843      	lsrs	r3, r0, #1
   1f95e:	428b      	cmp	r3, r1
   1f960:	d374      	bcc.n	1fa4c <__divsi3+0xf8>
   1f962:	0903      	lsrs	r3, r0, #4
   1f964:	428b      	cmp	r3, r1
   1f966:	d35f      	bcc.n	1fa28 <__divsi3+0xd4>
   1f968:	0a03      	lsrs	r3, r0, #8
   1f96a:	428b      	cmp	r3, r1
   1f96c:	d344      	bcc.n	1f9f8 <__divsi3+0xa4>
   1f96e:	0b03      	lsrs	r3, r0, #12
   1f970:	428b      	cmp	r3, r1
   1f972:	d328      	bcc.n	1f9c6 <__divsi3+0x72>
   1f974:	0c03      	lsrs	r3, r0, #16
   1f976:	428b      	cmp	r3, r1
   1f978:	d30d      	bcc.n	1f996 <__divsi3+0x42>
   1f97a:	22ff      	movs	r2, #255	; 0xff
   1f97c:	0209      	lsls	r1, r1, #8
   1f97e:	ba12      	rev	r2, r2
   1f980:	0c03      	lsrs	r3, r0, #16
   1f982:	428b      	cmp	r3, r1
   1f984:	d302      	bcc.n	1f98c <__divsi3+0x38>
   1f986:	1212      	asrs	r2, r2, #8
   1f988:	0209      	lsls	r1, r1, #8
   1f98a:	d065      	beq.n	1fa58 <__divsi3+0x104>
   1f98c:	0b03      	lsrs	r3, r0, #12
   1f98e:	428b      	cmp	r3, r1
   1f990:	d319      	bcc.n	1f9c6 <__divsi3+0x72>
   1f992:	e000      	b.n	1f996 <__divsi3+0x42>
   1f994:	0a09      	lsrs	r1, r1, #8
   1f996:	0bc3      	lsrs	r3, r0, #15
   1f998:	428b      	cmp	r3, r1
   1f99a:	d301      	bcc.n	1f9a0 <__divsi3+0x4c>
   1f99c:	03cb      	lsls	r3, r1, #15
   1f99e:	1ac0      	subs	r0, r0, r3
   1f9a0:	4152      	adcs	r2, r2
   1f9a2:	0b83      	lsrs	r3, r0, #14
   1f9a4:	428b      	cmp	r3, r1
   1f9a6:	d301      	bcc.n	1f9ac <__divsi3+0x58>
   1f9a8:	038b      	lsls	r3, r1, #14
   1f9aa:	1ac0      	subs	r0, r0, r3
   1f9ac:	4152      	adcs	r2, r2
   1f9ae:	0b43      	lsrs	r3, r0, #13
   1f9b0:	428b      	cmp	r3, r1
   1f9b2:	d301      	bcc.n	1f9b8 <__divsi3+0x64>
   1f9b4:	034b      	lsls	r3, r1, #13
   1f9b6:	1ac0      	subs	r0, r0, r3
   1f9b8:	4152      	adcs	r2, r2
   1f9ba:	0b03      	lsrs	r3, r0, #12
   1f9bc:	428b      	cmp	r3, r1
   1f9be:	d301      	bcc.n	1f9c4 <__divsi3+0x70>
   1f9c0:	030b      	lsls	r3, r1, #12
   1f9c2:	1ac0      	subs	r0, r0, r3
   1f9c4:	4152      	adcs	r2, r2
   1f9c6:	0ac3      	lsrs	r3, r0, #11
   1f9c8:	428b      	cmp	r3, r1
   1f9ca:	d301      	bcc.n	1f9d0 <__divsi3+0x7c>
   1f9cc:	02cb      	lsls	r3, r1, #11
   1f9ce:	1ac0      	subs	r0, r0, r3
   1f9d0:	4152      	adcs	r2, r2
   1f9d2:	0a83      	lsrs	r3, r0, #10
   1f9d4:	428b      	cmp	r3, r1
   1f9d6:	d301      	bcc.n	1f9dc <__divsi3+0x88>
   1f9d8:	028b      	lsls	r3, r1, #10
   1f9da:	1ac0      	subs	r0, r0, r3
   1f9dc:	4152      	adcs	r2, r2
   1f9de:	0a43      	lsrs	r3, r0, #9
   1f9e0:	428b      	cmp	r3, r1
   1f9e2:	d301      	bcc.n	1f9e8 <__divsi3+0x94>
   1f9e4:	024b      	lsls	r3, r1, #9
   1f9e6:	1ac0      	subs	r0, r0, r3
   1f9e8:	4152      	adcs	r2, r2
   1f9ea:	0a03      	lsrs	r3, r0, #8
   1f9ec:	428b      	cmp	r3, r1
   1f9ee:	d301      	bcc.n	1f9f4 <__divsi3+0xa0>
   1f9f0:	020b      	lsls	r3, r1, #8
   1f9f2:	1ac0      	subs	r0, r0, r3
   1f9f4:	4152      	adcs	r2, r2
   1f9f6:	d2cd      	bcs.n	1f994 <__divsi3+0x40>
   1f9f8:	09c3      	lsrs	r3, r0, #7
   1f9fa:	428b      	cmp	r3, r1
   1f9fc:	d301      	bcc.n	1fa02 <__divsi3+0xae>
   1f9fe:	01cb      	lsls	r3, r1, #7
   1fa00:	1ac0      	subs	r0, r0, r3
   1fa02:	4152      	adcs	r2, r2
   1fa04:	0983      	lsrs	r3, r0, #6
   1fa06:	428b      	cmp	r3, r1
   1fa08:	d301      	bcc.n	1fa0e <__divsi3+0xba>
   1fa0a:	018b      	lsls	r3, r1, #6
   1fa0c:	1ac0      	subs	r0, r0, r3
   1fa0e:	4152      	adcs	r2, r2
   1fa10:	0943      	lsrs	r3, r0, #5
   1fa12:	428b      	cmp	r3, r1
   1fa14:	d301      	bcc.n	1fa1a <__divsi3+0xc6>
   1fa16:	014b      	lsls	r3, r1, #5
   1fa18:	1ac0      	subs	r0, r0, r3
   1fa1a:	4152      	adcs	r2, r2
   1fa1c:	0903      	lsrs	r3, r0, #4
   1fa1e:	428b      	cmp	r3, r1
   1fa20:	d301      	bcc.n	1fa26 <__divsi3+0xd2>
   1fa22:	010b      	lsls	r3, r1, #4
   1fa24:	1ac0      	subs	r0, r0, r3
   1fa26:	4152      	adcs	r2, r2
   1fa28:	08c3      	lsrs	r3, r0, #3
   1fa2a:	428b      	cmp	r3, r1
   1fa2c:	d301      	bcc.n	1fa32 <__divsi3+0xde>
   1fa2e:	00cb      	lsls	r3, r1, #3
   1fa30:	1ac0      	subs	r0, r0, r3
   1fa32:	4152      	adcs	r2, r2
   1fa34:	0883      	lsrs	r3, r0, #2
   1fa36:	428b      	cmp	r3, r1
   1fa38:	d301      	bcc.n	1fa3e <__divsi3+0xea>
   1fa3a:	008b      	lsls	r3, r1, #2
   1fa3c:	1ac0      	subs	r0, r0, r3
   1fa3e:	4152      	adcs	r2, r2
   1fa40:	0843      	lsrs	r3, r0, #1
   1fa42:	428b      	cmp	r3, r1
   1fa44:	d301      	bcc.n	1fa4a <__divsi3+0xf6>
   1fa46:	004b      	lsls	r3, r1, #1
   1fa48:	1ac0      	subs	r0, r0, r3
   1fa4a:	4152      	adcs	r2, r2
   1fa4c:	1a41      	subs	r1, r0, r1
   1fa4e:	d200      	bcs.n	1fa52 <__divsi3+0xfe>
   1fa50:	4601      	mov	r1, r0
   1fa52:	4152      	adcs	r2, r2
   1fa54:	4610      	mov	r0, r2
   1fa56:	4770      	bx	lr
   1fa58:	e05d      	b.n	1fb16 <__divsi3+0x1c2>
   1fa5a:	0fca      	lsrs	r2, r1, #31
   1fa5c:	d000      	beq.n	1fa60 <__divsi3+0x10c>
   1fa5e:	4249      	negs	r1, r1
   1fa60:	1003      	asrs	r3, r0, #32
   1fa62:	d300      	bcc.n	1fa66 <__divsi3+0x112>
   1fa64:	4240      	negs	r0, r0
   1fa66:	4053      	eors	r3, r2
   1fa68:	2200      	movs	r2, #0
   1fa6a:	469c      	mov	ip, r3
   1fa6c:	0903      	lsrs	r3, r0, #4
   1fa6e:	428b      	cmp	r3, r1
   1fa70:	d32d      	bcc.n	1face <__divsi3+0x17a>
   1fa72:	0a03      	lsrs	r3, r0, #8
   1fa74:	428b      	cmp	r3, r1
   1fa76:	d312      	bcc.n	1fa9e <__divsi3+0x14a>
   1fa78:	22fc      	movs	r2, #252	; 0xfc
   1fa7a:	0189      	lsls	r1, r1, #6
   1fa7c:	ba12      	rev	r2, r2
   1fa7e:	0a03      	lsrs	r3, r0, #8
   1fa80:	428b      	cmp	r3, r1
   1fa82:	d30c      	bcc.n	1fa9e <__divsi3+0x14a>
   1fa84:	0189      	lsls	r1, r1, #6
   1fa86:	1192      	asrs	r2, r2, #6
   1fa88:	428b      	cmp	r3, r1
   1fa8a:	d308      	bcc.n	1fa9e <__divsi3+0x14a>
   1fa8c:	0189      	lsls	r1, r1, #6
   1fa8e:	1192      	asrs	r2, r2, #6
   1fa90:	428b      	cmp	r3, r1
   1fa92:	d304      	bcc.n	1fa9e <__divsi3+0x14a>
   1fa94:	0189      	lsls	r1, r1, #6
   1fa96:	d03a      	beq.n	1fb0e <__divsi3+0x1ba>
   1fa98:	1192      	asrs	r2, r2, #6
   1fa9a:	e000      	b.n	1fa9e <__divsi3+0x14a>
   1fa9c:	0989      	lsrs	r1, r1, #6
   1fa9e:	09c3      	lsrs	r3, r0, #7
   1faa0:	428b      	cmp	r3, r1
   1faa2:	d301      	bcc.n	1faa8 <__divsi3+0x154>
   1faa4:	01cb      	lsls	r3, r1, #7
   1faa6:	1ac0      	subs	r0, r0, r3
   1faa8:	4152      	adcs	r2, r2
   1faaa:	0983      	lsrs	r3, r0, #6
   1faac:	428b      	cmp	r3, r1
   1faae:	d301      	bcc.n	1fab4 <__divsi3+0x160>
   1fab0:	018b      	lsls	r3, r1, #6
   1fab2:	1ac0      	subs	r0, r0, r3
   1fab4:	4152      	adcs	r2, r2
   1fab6:	0943      	lsrs	r3, r0, #5
   1fab8:	428b      	cmp	r3, r1
   1faba:	d301      	bcc.n	1fac0 <__divsi3+0x16c>
   1fabc:	014b      	lsls	r3, r1, #5
   1fabe:	1ac0      	subs	r0, r0, r3
   1fac0:	4152      	adcs	r2, r2
   1fac2:	0903      	lsrs	r3, r0, #4
   1fac4:	428b      	cmp	r3, r1
   1fac6:	d301      	bcc.n	1facc <__divsi3+0x178>
   1fac8:	010b      	lsls	r3, r1, #4
   1faca:	1ac0      	subs	r0, r0, r3
   1facc:	4152      	adcs	r2, r2
   1face:	08c3      	lsrs	r3, r0, #3
   1fad0:	428b      	cmp	r3, r1
   1fad2:	d301      	bcc.n	1fad8 <__divsi3+0x184>
   1fad4:	00cb      	lsls	r3, r1, #3
   1fad6:	1ac0      	subs	r0, r0, r3
   1fad8:	4152      	adcs	r2, r2
   1fada:	0883      	lsrs	r3, r0, #2
   1fadc:	428b      	cmp	r3, r1
   1fade:	d301      	bcc.n	1fae4 <__divsi3+0x190>
   1fae0:	008b      	lsls	r3, r1, #2
   1fae2:	1ac0      	subs	r0, r0, r3
   1fae4:	4152      	adcs	r2, r2
   1fae6:	d2d9      	bcs.n	1fa9c <__divsi3+0x148>
   1fae8:	0843      	lsrs	r3, r0, #1
   1faea:	428b      	cmp	r3, r1
   1faec:	d301      	bcc.n	1faf2 <__divsi3+0x19e>
   1faee:	004b      	lsls	r3, r1, #1
   1faf0:	1ac0      	subs	r0, r0, r3
   1faf2:	4152      	adcs	r2, r2
   1faf4:	1a41      	subs	r1, r0, r1
   1faf6:	d200      	bcs.n	1fafa <__divsi3+0x1a6>
   1faf8:	4601      	mov	r1, r0
   1fafa:	4663      	mov	r3, ip
   1fafc:	4152      	adcs	r2, r2
   1fafe:	105b      	asrs	r3, r3, #1
   1fb00:	4610      	mov	r0, r2
   1fb02:	d301      	bcc.n	1fb08 <__divsi3+0x1b4>
   1fb04:	4240      	negs	r0, r0
   1fb06:	2b00      	cmp	r3, #0
   1fb08:	d500      	bpl.n	1fb0c <__divsi3+0x1b8>
   1fb0a:	4249      	negs	r1, r1
   1fb0c:	4770      	bx	lr
   1fb0e:	4663      	mov	r3, ip
   1fb10:	105b      	asrs	r3, r3, #1
   1fb12:	d300      	bcc.n	1fb16 <__divsi3+0x1c2>
   1fb14:	4240      	negs	r0, r0
   1fb16:	b501      	push	{r0, lr}
   1fb18:	2000      	movs	r0, #0
   1fb1a:	f000 f805 	bl	1fb28 <__aeabi_idiv0>
   1fb1e:	bd02      	pop	{r1, pc}

0001fb20 <__aeabi_idivmod>:
   1fb20:	2900      	cmp	r1, #0
   1fb22:	d0f8      	beq.n	1fb16 <__divsi3+0x1c2>
   1fb24:	e716      	b.n	1f954 <__divsi3>
   1fb26:	4770      	bx	lr

0001fb28 <__aeabi_idiv0>:
   1fb28:	4770      	bx	lr
   1fb2a:	46c0      	nop			; (mov r8, r8)

0001fb2c <__aeabi_lmul>:
   1fb2c:	b5f0      	push	{r4, r5, r6, r7, lr}
   1fb2e:	46ce      	mov	lr, r9
   1fb30:	4647      	mov	r7, r8
   1fb32:	0415      	lsls	r5, r2, #16
   1fb34:	0c2d      	lsrs	r5, r5, #16
   1fb36:	002e      	movs	r6, r5
   1fb38:	b580      	push	{r7, lr}
   1fb3a:	0407      	lsls	r7, r0, #16
   1fb3c:	0c14      	lsrs	r4, r2, #16
   1fb3e:	0c3f      	lsrs	r7, r7, #16
   1fb40:	4699      	mov	r9, r3
   1fb42:	0c03      	lsrs	r3, r0, #16
   1fb44:	437e      	muls	r6, r7
   1fb46:	435d      	muls	r5, r3
   1fb48:	4367      	muls	r7, r4
   1fb4a:	4363      	muls	r3, r4
   1fb4c:	197f      	adds	r7, r7, r5
   1fb4e:	0c34      	lsrs	r4, r6, #16
   1fb50:	19e4      	adds	r4, r4, r7
   1fb52:	469c      	mov	ip, r3
   1fb54:	42a5      	cmp	r5, r4
   1fb56:	d903      	bls.n	1fb60 <__aeabi_lmul+0x34>
   1fb58:	2380      	movs	r3, #128	; 0x80
   1fb5a:	025b      	lsls	r3, r3, #9
   1fb5c:	4698      	mov	r8, r3
   1fb5e:	44c4      	add	ip, r8
   1fb60:	464b      	mov	r3, r9
   1fb62:	4351      	muls	r1, r2
   1fb64:	4343      	muls	r3, r0
   1fb66:	0436      	lsls	r6, r6, #16
   1fb68:	0c36      	lsrs	r6, r6, #16
   1fb6a:	0c25      	lsrs	r5, r4, #16
   1fb6c:	0424      	lsls	r4, r4, #16
   1fb6e:	4465      	add	r5, ip
   1fb70:	19a4      	adds	r4, r4, r6
   1fb72:	1859      	adds	r1, r3, r1
   1fb74:	1949      	adds	r1, r1, r5
   1fb76:	0020      	movs	r0, r4
   1fb78:	bc0c      	pop	{r2, r3}
   1fb7a:	4690      	mov	r8, r2
   1fb7c:	4699      	mov	r9, r3
   1fb7e:	bdf0      	pop	{r4, r5, r6, r7, pc}

0001fb80 <__aeabi_fmul>:
   1fb80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1fb82:	4657      	mov	r7, sl
   1fb84:	464e      	mov	r6, r9
   1fb86:	4645      	mov	r5, r8
   1fb88:	46de      	mov	lr, fp
   1fb8a:	b5e0      	push	{r5, r6, r7, lr}
   1fb8c:	0247      	lsls	r7, r0, #9
   1fb8e:	0046      	lsls	r6, r0, #1
   1fb90:	4688      	mov	r8, r1
   1fb92:	0a7f      	lsrs	r7, r7, #9
   1fb94:	0e36      	lsrs	r6, r6, #24
   1fb96:	0fc4      	lsrs	r4, r0, #31
   1fb98:	2e00      	cmp	r6, #0
   1fb9a:	d047      	beq.n	1fc2c <__aeabi_fmul+0xac>
   1fb9c:	2eff      	cmp	r6, #255	; 0xff
   1fb9e:	d024      	beq.n	1fbea <__aeabi_fmul+0x6a>
   1fba0:	00fb      	lsls	r3, r7, #3
   1fba2:	2780      	movs	r7, #128	; 0x80
   1fba4:	04ff      	lsls	r7, r7, #19
   1fba6:	431f      	orrs	r7, r3
   1fba8:	2300      	movs	r3, #0
   1fbaa:	4699      	mov	r9, r3
   1fbac:	469a      	mov	sl, r3
   1fbae:	3e7f      	subs	r6, #127	; 0x7f
   1fbb0:	4643      	mov	r3, r8
   1fbb2:	025d      	lsls	r5, r3, #9
   1fbb4:	0058      	lsls	r0, r3, #1
   1fbb6:	0fdb      	lsrs	r3, r3, #31
   1fbb8:	0a6d      	lsrs	r5, r5, #9
   1fbba:	0e00      	lsrs	r0, r0, #24
   1fbbc:	4698      	mov	r8, r3
   1fbbe:	d043      	beq.n	1fc48 <__aeabi_fmul+0xc8>
   1fbc0:	28ff      	cmp	r0, #255	; 0xff
   1fbc2:	d03b      	beq.n	1fc3c <__aeabi_fmul+0xbc>
   1fbc4:	00eb      	lsls	r3, r5, #3
   1fbc6:	2580      	movs	r5, #128	; 0x80
   1fbc8:	2200      	movs	r2, #0
   1fbca:	04ed      	lsls	r5, r5, #19
   1fbcc:	431d      	orrs	r5, r3
   1fbce:	387f      	subs	r0, #127	; 0x7f
   1fbd0:	1836      	adds	r6, r6, r0
   1fbd2:	1c73      	adds	r3, r6, #1
   1fbd4:	4641      	mov	r1, r8
   1fbd6:	469b      	mov	fp, r3
   1fbd8:	464b      	mov	r3, r9
   1fbda:	4061      	eors	r1, r4
   1fbdc:	4313      	orrs	r3, r2
   1fbde:	2b0f      	cmp	r3, #15
   1fbe0:	d864      	bhi.n	1fcac <__aeabi_fmul+0x12c>
   1fbe2:	4875      	ldr	r0, [pc, #468]	; (1fdb8 <__aeabi_fmul+0x238>)
   1fbe4:	009b      	lsls	r3, r3, #2
   1fbe6:	58c3      	ldr	r3, [r0, r3]
   1fbe8:	469f      	mov	pc, r3
   1fbea:	2f00      	cmp	r7, #0
   1fbec:	d142      	bne.n	1fc74 <__aeabi_fmul+0xf4>
   1fbee:	2308      	movs	r3, #8
   1fbf0:	4699      	mov	r9, r3
   1fbf2:	3b06      	subs	r3, #6
   1fbf4:	26ff      	movs	r6, #255	; 0xff
   1fbf6:	469a      	mov	sl, r3
   1fbf8:	e7da      	b.n	1fbb0 <__aeabi_fmul+0x30>
   1fbfa:	4641      	mov	r1, r8
   1fbfc:	2a02      	cmp	r2, #2
   1fbfe:	d028      	beq.n	1fc52 <__aeabi_fmul+0xd2>
   1fc00:	2a03      	cmp	r2, #3
   1fc02:	d100      	bne.n	1fc06 <__aeabi_fmul+0x86>
   1fc04:	e0ce      	b.n	1fda4 <__aeabi_fmul+0x224>
   1fc06:	2a01      	cmp	r2, #1
   1fc08:	d000      	beq.n	1fc0c <__aeabi_fmul+0x8c>
   1fc0a:	e0ac      	b.n	1fd66 <__aeabi_fmul+0x1e6>
   1fc0c:	4011      	ands	r1, r2
   1fc0e:	2000      	movs	r0, #0
   1fc10:	2200      	movs	r2, #0
   1fc12:	b2cc      	uxtb	r4, r1
   1fc14:	0240      	lsls	r0, r0, #9
   1fc16:	05d2      	lsls	r2, r2, #23
   1fc18:	0a40      	lsrs	r0, r0, #9
   1fc1a:	07e4      	lsls	r4, r4, #31
   1fc1c:	4310      	orrs	r0, r2
   1fc1e:	4320      	orrs	r0, r4
   1fc20:	bc3c      	pop	{r2, r3, r4, r5}
   1fc22:	4690      	mov	r8, r2
   1fc24:	4699      	mov	r9, r3
   1fc26:	46a2      	mov	sl, r4
   1fc28:	46ab      	mov	fp, r5
   1fc2a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1fc2c:	2f00      	cmp	r7, #0
   1fc2e:	d115      	bne.n	1fc5c <__aeabi_fmul+0xdc>
   1fc30:	2304      	movs	r3, #4
   1fc32:	4699      	mov	r9, r3
   1fc34:	3b03      	subs	r3, #3
   1fc36:	2600      	movs	r6, #0
   1fc38:	469a      	mov	sl, r3
   1fc3a:	e7b9      	b.n	1fbb0 <__aeabi_fmul+0x30>
   1fc3c:	20ff      	movs	r0, #255	; 0xff
   1fc3e:	2202      	movs	r2, #2
   1fc40:	2d00      	cmp	r5, #0
   1fc42:	d0c5      	beq.n	1fbd0 <__aeabi_fmul+0x50>
   1fc44:	2203      	movs	r2, #3
   1fc46:	e7c3      	b.n	1fbd0 <__aeabi_fmul+0x50>
   1fc48:	2d00      	cmp	r5, #0
   1fc4a:	d119      	bne.n	1fc80 <__aeabi_fmul+0x100>
   1fc4c:	2000      	movs	r0, #0
   1fc4e:	2201      	movs	r2, #1
   1fc50:	e7be      	b.n	1fbd0 <__aeabi_fmul+0x50>
   1fc52:	2401      	movs	r4, #1
   1fc54:	22ff      	movs	r2, #255	; 0xff
   1fc56:	400c      	ands	r4, r1
   1fc58:	2000      	movs	r0, #0
   1fc5a:	e7db      	b.n	1fc14 <__aeabi_fmul+0x94>
   1fc5c:	0038      	movs	r0, r7
   1fc5e:	f001 fd65 	bl	2172c <__clzsi2>
   1fc62:	2676      	movs	r6, #118	; 0x76
   1fc64:	1f43      	subs	r3, r0, #5
   1fc66:	409f      	lsls	r7, r3
   1fc68:	2300      	movs	r3, #0
   1fc6a:	4276      	negs	r6, r6
   1fc6c:	1a36      	subs	r6, r6, r0
   1fc6e:	4699      	mov	r9, r3
   1fc70:	469a      	mov	sl, r3
   1fc72:	e79d      	b.n	1fbb0 <__aeabi_fmul+0x30>
   1fc74:	230c      	movs	r3, #12
   1fc76:	4699      	mov	r9, r3
   1fc78:	3b09      	subs	r3, #9
   1fc7a:	26ff      	movs	r6, #255	; 0xff
   1fc7c:	469a      	mov	sl, r3
   1fc7e:	e797      	b.n	1fbb0 <__aeabi_fmul+0x30>
   1fc80:	0028      	movs	r0, r5
   1fc82:	f001 fd53 	bl	2172c <__clzsi2>
   1fc86:	1f43      	subs	r3, r0, #5
   1fc88:	409d      	lsls	r5, r3
   1fc8a:	2376      	movs	r3, #118	; 0x76
   1fc8c:	425b      	negs	r3, r3
   1fc8e:	1a18      	subs	r0, r3, r0
   1fc90:	2200      	movs	r2, #0
   1fc92:	e79d      	b.n	1fbd0 <__aeabi_fmul+0x50>
   1fc94:	2080      	movs	r0, #128	; 0x80
   1fc96:	2400      	movs	r4, #0
   1fc98:	03c0      	lsls	r0, r0, #15
   1fc9a:	22ff      	movs	r2, #255	; 0xff
   1fc9c:	e7ba      	b.n	1fc14 <__aeabi_fmul+0x94>
   1fc9e:	003d      	movs	r5, r7
   1fca0:	4652      	mov	r2, sl
   1fca2:	e7ab      	b.n	1fbfc <__aeabi_fmul+0x7c>
   1fca4:	003d      	movs	r5, r7
   1fca6:	0021      	movs	r1, r4
   1fca8:	4652      	mov	r2, sl
   1fcaa:	e7a7      	b.n	1fbfc <__aeabi_fmul+0x7c>
   1fcac:	0c3b      	lsrs	r3, r7, #16
   1fcae:	469c      	mov	ip, r3
   1fcb0:	042a      	lsls	r2, r5, #16
   1fcb2:	0c12      	lsrs	r2, r2, #16
   1fcb4:	0c2b      	lsrs	r3, r5, #16
   1fcb6:	0014      	movs	r4, r2
   1fcb8:	4660      	mov	r0, ip
   1fcba:	4665      	mov	r5, ip
   1fcbc:	043f      	lsls	r7, r7, #16
   1fcbe:	0c3f      	lsrs	r7, r7, #16
   1fcc0:	437c      	muls	r4, r7
   1fcc2:	4342      	muls	r2, r0
   1fcc4:	435d      	muls	r5, r3
   1fcc6:	437b      	muls	r3, r7
   1fcc8:	0c27      	lsrs	r7, r4, #16
   1fcca:	189b      	adds	r3, r3, r2
   1fccc:	18ff      	adds	r7, r7, r3
   1fcce:	42ba      	cmp	r2, r7
   1fcd0:	d903      	bls.n	1fcda <__aeabi_fmul+0x15a>
   1fcd2:	2380      	movs	r3, #128	; 0x80
   1fcd4:	025b      	lsls	r3, r3, #9
   1fcd6:	469c      	mov	ip, r3
   1fcd8:	4465      	add	r5, ip
   1fcda:	0424      	lsls	r4, r4, #16
   1fcdc:	043a      	lsls	r2, r7, #16
   1fcde:	0c24      	lsrs	r4, r4, #16
   1fce0:	1912      	adds	r2, r2, r4
   1fce2:	0193      	lsls	r3, r2, #6
   1fce4:	1e5c      	subs	r4, r3, #1
   1fce6:	41a3      	sbcs	r3, r4
   1fce8:	0c3f      	lsrs	r7, r7, #16
   1fcea:	0e92      	lsrs	r2, r2, #26
   1fcec:	197d      	adds	r5, r7, r5
   1fcee:	431a      	orrs	r2, r3
   1fcf0:	01ad      	lsls	r5, r5, #6
   1fcf2:	4315      	orrs	r5, r2
   1fcf4:	012b      	lsls	r3, r5, #4
   1fcf6:	d504      	bpl.n	1fd02 <__aeabi_fmul+0x182>
   1fcf8:	2301      	movs	r3, #1
   1fcfa:	465e      	mov	r6, fp
   1fcfc:	086a      	lsrs	r2, r5, #1
   1fcfe:	401d      	ands	r5, r3
   1fd00:	4315      	orrs	r5, r2
   1fd02:	0032      	movs	r2, r6
   1fd04:	327f      	adds	r2, #127	; 0x7f
   1fd06:	2a00      	cmp	r2, #0
   1fd08:	dd25      	ble.n	1fd56 <__aeabi_fmul+0x1d6>
   1fd0a:	076b      	lsls	r3, r5, #29
   1fd0c:	d004      	beq.n	1fd18 <__aeabi_fmul+0x198>
   1fd0e:	230f      	movs	r3, #15
   1fd10:	402b      	ands	r3, r5
   1fd12:	2b04      	cmp	r3, #4
   1fd14:	d000      	beq.n	1fd18 <__aeabi_fmul+0x198>
   1fd16:	3504      	adds	r5, #4
   1fd18:	012b      	lsls	r3, r5, #4
   1fd1a:	d503      	bpl.n	1fd24 <__aeabi_fmul+0x1a4>
   1fd1c:	0032      	movs	r2, r6
   1fd1e:	4b27      	ldr	r3, [pc, #156]	; (1fdbc <__aeabi_fmul+0x23c>)
   1fd20:	3280      	adds	r2, #128	; 0x80
   1fd22:	401d      	ands	r5, r3
   1fd24:	2afe      	cmp	r2, #254	; 0xfe
   1fd26:	dc94      	bgt.n	1fc52 <__aeabi_fmul+0xd2>
   1fd28:	2401      	movs	r4, #1
   1fd2a:	01a8      	lsls	r0, r5, #6
   1fd2c:	0a40      	lsrs	r0, r0, #9
   1fd2e:	b2d2      	uxtb	r2, r2
   1fd30:	400c      	ands	r4, r1
   1fd32:	e76f      	b.n	1fc14 <__aeabi_fmul+0x94>
   1fd34:	2080      	movs	r0, #128	; 0x80
   1fd36:	03c0      	lsls	r0, r0, #15
   1fd38:	4207      	tst	r7, r0
   1fd3a:	d007      	beq.n	1fd4c <__aeabi_fmul+0x1cc>
   1fd3c:	4205      	tst	r5, r0
   1fd3e:	d105      	bne.n	1fd4c <__aeabi_fmul+0x1cc>
   1fd40:	4328      	orrs	r0, r5
   1fd42:	0240      	lsls	r0, r0, #9
   1fd44:	0a40      	lsrs	r0, r0, #9
   1fd46:	4644      	mov	r4, r8
   1fd48:	22ff      	movs	r2, #255	; 0xff
   1fd4a:	e763      	b.n	1fc14 <__aeabi_fmul+0x94>
   1fd4c:	4338      	orrs	r0, r7
   1fd4e:	0240      	lsls	r0, r0, #9
   1fd50:	0a40      	lsrs	r0, r0, #9
   1fd52:	22ff      	movs	r2, #255	; 0xff
   1fd54:	e75e      	b.n	1fc14 <__aeabi_fmul+0x94>
   1fd56:	2401      	movs	r4, #1
   1fd58:	1aa3      	subs	r3, r4, r2
   1fd5a:	2b1b      	cmp	r3, #27
   1fd5c:	dd05      	ble.n	1fd6a <__aeabi_fmul+0x1ea>
   1fd5e:	400c      	ands	r4, r1
   1fd60:	2200      	movs	r2, #0
   1fd62:	2000      	movs	r0, #0
   1fd64:	e756      	b.n	1fc14 <__aeabi_fmul+0x94>
   1fd66:	465e      	mov	r6, fp
   1fd68:	e7cb      	b.n	1fd02 <__aeabi_fmul+0x182>
   1fd6a:	002a      	movs	r2, r5
   1fd6c:	2020      	movs	r0, #32
   1fd6e:	40da      	lsrs	r2, r3
   1fd70:	1ac3      	subs	r3, r0, r3
   1fd72:	409d      	lsls	r5, r3
   1fd74:	002b      	movs	r3, r5
   1fd76:	1e5d      	subs	r5, r3, #1
   1fd78:	41ab      	sbcs	r3, r5
   1fd7a:	4313      	orrs	r3, r2
   1fd7c:	075a      	lsls	r2, r3, #29
   1fd7e:	d004      	beq.n	1fd8a <__aeabi_fmul+0x20a>
   1fd80:	220f      	movs	r2, #15
   1fd82:	401a      	ands	r2, r3
   1fd84:	2a04      	cmp	r2, #4
   1fd86:	d000      	beq.n	1fd8a <__aeabi_fmul+0x20a>
   1fd88:	3304      	adds	r3, #4
   1fd8a:	015a      	lsls	r2, r3, #5
   1fd8c:	d504      	bpl.n	1fd98 <__aeabi_fmul+0x218>
   1fd8e:	2401      	movs	r4, #1
   1fd90:	2201      	movs	r2, #1
   1fd92:	400c      	ands	r4, r1
   1fd94:	2000      	movs	r0, #0
   1fd96:	e73d      	b.n	1fc14 <__aeabi_fmul+0x94>
   1fd98:	2401      	movs	r4, #1
   1fd9a:	019b      	lsls	r3, r3, #6
   1fd9c:	0a58      	lsrs	r0, r3, #9
   1fd9e:	400c      	ands	r4, r1
   1fda0:	2200      	movs	r2, #0
   1fda2:	e737      	b.n	1fc14 <__aeabi_fmul+0x94>
   1fda4:	2080      	movs	r0, #128	; 0x80
   1fda6:	2401      	movs	r4, #1
   1fda8:	03c0      	lsls	r0, r0, #15
   1fdaa:	4328      	orrs	r0, r5
   1fdac:	0240      	lsls	r0, r0, #9
   1fdae:	0a40      	lsrs	r0, r0, #9
   1fdb0:	400c      	ands	r4, r1
   1fdb2:	22ff      	movs	r2, #255	; 0xff
   1fdb4:	e72e      	b.n	1fc14 <__aeabi_fmul+0x94>
   1fdb6:	46c0      	nop			; (mov r8, r8)
   1fdb8:	00026aec 	.word	0x00026aec
   1fdbc:	f7ffffff 	.word	0xf7ffffff

0001fdc0 <__aeabi_f2iz>:
   1fdc0:	0241      	lsls	r1, r0, #9
   1fdc2:	0043      	lsls	r3, r0, #1
   1fdc4:	0fc2      	lsrs	r2, r0, #31
   1fdc6:	0a49      	lsrs	r1, r1, #9
   1fdc8:	0e1b      	lsrs	r3, r3, #24
   1fdca:	2000      	movs	r0, #0
   1fdcc:	2b7e      	cmp	r3, #126	; 0x7e
   1fdce:	dd0d      	ble.n	1fdec <__aeabi_f2iz+0x2c>
   1fdd0:	2b9d      	cmp	r3, #157	; 0x9d
   1fdd2:	dc0c      	bgt.n	1fdee <__aeabi_f2iz+0x2e>
   1fdd4:	2080      	movs	r0, #128	; 0x80
   1fdd6:	0400      	lsls	r0, r0, #16
   1fdd8:	4301      	orrs	r1, r0
   1fdda:	2b95      	cmp	r3, #149	; 0x95
   1fddc:	dc0a      	bgt.n	1fdf4 <__aeabi_f2iz+0x34>
   1fdde:	2096      	movs	r0, #150	; 0x96
   1fde0:	1ac3      	subs	r3, r0, r3
   1fde2:	40d9      	lsrs	r1, r3
   1fde4:	4248      	negs	r0, r1
   1fde6:	2a00      	cmp	r2, #0
   1fde8:	d100      	bne.n	1fdec <__aeabi_f2iz+0x2c>
   1fdea:	0008      	movs	r0, r1
   1fdec:	4770      	bx	lr
   1fdee:	4b03      	ldr	r3, [pc, #12]	; (1fdfc <__aeabi_f2iz+0x3c>)
   1fdf0:	18d0      	adds	r0, r2, r3
   1fdf2:	e7fb      	b.n	1fdec <__aeabi_f2iz+0x2c>
   1fdf4:	3b96      	subs	r3, #150	; 0x96
   1fdf6:	4099      	lsls	r1, r3
   1fdf8:	e7f4      	b.n	1fde4 <__aeabi_f2iz+0x24>
   1fdfa:	46c0      	nop			; (mov r8, r8)
   1fdfc:	7fffffff 	.word	0x7fffffff

0001fe00 <__aeabi_i2f>:
   1fe00:	b570      	push	{r4, r5, r6, lr}
   1fe02:	2800      	cmp	r0, #0
   1fe04:	d030      	beq.n	1fe68 <__aeabi_i2f+0x68>
   1fe06:	17c3      	asrs	r3, r0, #31
   1fe08:	18c4      	adds	r4, r0, r3
   1fe0a:	405c      	eors	r4, r3
   1fe0c:	0fc5      	lsrs	r5, r0, #31
   1fe0e:	0020      	movs	r0, r4
   1fe10:	f001 fc8c 	bl	2172c <__clzsi2>
   1fe14:	239e      	movs	r3, #158	; 0x9e
   1fe16:	1a1b      	subs	r3, r3, r0
   1fe18:	2b96      	cmp	r3, #150	; 0x96
   1fe1a:	dc0d      	bgt.n	1fe38 <__aeabi_i2f+0x38>
   1fe1c:	2296      	movs	r2, #150	; 0x96
   1fe1e:	1ad2      	subs	r2, r2, r3
   1fe20:	4094      	lsls	r4, r2
   1fe22:	002a      	movs	r2, r5
   1fe24:	0264      	lsls	r4, r4, #9
   1fe26:	0a64      	lsrs	r4, r4, #9
   1fe28:	b2db      	uxtb	r3, r3
   1fe2a:	0264      	lsls	r4, r4, #9
   1fe2c:	05db      	lsls	r3, r3, #23
   1fe2e:	0a60      	lsrs	r0, r4, #9
   1fe30:	07d2      	lsls	r2, r2, #31
   1fe32:	4318      	orrs	r0, r3
   1fe34:	4310      	orrs	r0, r2
   1fe36:	bd70      	pop	{r4, r5, r6, pc}
   1fe38:	2b99      	cmp	r3, #153	; 0x99
   1fe3a:	dc19      	bgt.n	1fe70 <__aeabi_i2f+0x70>
   1fe3c:	2299      	movs	r2, #153	; 0x99
   1fe3e:	1ad2      	subs	r2, r2, r3
   1fe40:	2a00      	cmp	r2, #0
   1fe42:	dd29      	ble.n	1fe98 <__aeabi_i2f+0x98>
   1fe44:	4094      	lsls	r4, r2
   1fe46:	0022      	movs	r2, r4
   1fe48:	4c14      	ldr	r4, [pc, #80]	; (1fe9c <__aeabi_i2f+0x9c>)
   1fe4a:	4014      	ands	r4, r2
   1fe4c:	0751      	lsls	r1, r2, #29
   1fe4e:	d004      	beq.n	1fe5a <__aeabi_i2f+0x5a>
   1fe50:	210f      	movs	r1, #15
   1fe52:	400a      	ands	r2, r1
   1fe54:	2a04      	cmp	r2, #4
   1fe56:	d000      	beq.n	1fe5a <__aeabi_i2f+0x5a>
   1fe58:	3404      	adds	r4, #4
   1fe5a:	0162      	lsls	r2, r4, #5
   1fe5c:	d413      	bmi.n	1fe86 <__aeabi_i2f+0x86>
   1fe5e:	01a4      	lsls	r4, r4, #6
   1fe60:	0a64      	lsrs	r4, r4, #9
   1fe62:	b2db      	uxtb	r3, r3
   1fe64:	002a      	movs	r2, r5
   1fe66:	e7e0      	b.n	1fe2a <__aeabi_i2f+0x2a>
   1fe68:	2200      	movs	r2, #0
   1fe6a:	2300      	movs	r3, #0
   1fe6c:	2400      	movs	r4, #0
   1fe6e:	e7dc      	b.n	1fe2a <__aeabi_i2f+0x2a>
   1fe70:	2205      	movs	r2, #5
   1fe72:	0021      	movs	r1, r4
   1fe74:	1a12      	subs	r2, r2, r0
   1fe76:	40d1      	lsrs	r1, r2
   1fe78:	22b9      	movs	r2, #185	; 0xb9
   1fe7a:	1ad2      	subs	r2, r2, r3
   1fe7c:	4094      	lsls	r4, r2
   1fe7e:	1e62      	subs	r2, r4, #1
   1fe80:	4194      	sbcs	r4, r2
   1fe82:	430c      	orrs	r4, r1
   1fe84:	e7da      	b.n	1fe3c <__aeabi_i2f+0x3c>
   1fe86:	4b05      	ldr	r3, [pc, #20]	; (1fe9c <__aeabi_i2f+0x9c>)
   1fe88:	002a      	movs	r2, r5
   1fe8a:	401c      	ands	r4, r3
   1fe8c:	239f      	movs	r3, #159	; 0x9f
   1fe8e:	01a4      	lsls	r4, r4, #6
   1fe90:	1a1b      	subs	r3, r3, r0
   1fe92:	0a64      	lsrs	r4, r4, #9
   1fe94:	b2db      	uxtb	r3, r3
   1fe96:	e7c8      	b.n	1fe2a <__aeabi_i2f+0x2a>
   1fe98:	0022      	movs	r2, r4
   1fe9a:	e7d5      	b.n	1fe48 <__aeabi_i2f+0x48>
   1fe9c:	fbffffff 	.word	0xfbffffff

0001fea0 <__aeabi_dadd>:
   1fea0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1fea2:	4645      	mov	r5, r8
   1fea4:	46de      	mov	lr, fp
   1fea6:	4657      	mov	r7, sl
   1fea8:	464e      	mov	r6, r9
   1feaa:	030c      	lsls	r4, r1, #12
   1feac:	b5e0      	push	{r5, r6, r7, lr}
   1feae:	004e      	lsls	r6, r1, #1
   1feb0:	0fc9      	lsrs	r1, r1, #31
   1feb2:	4688      	mov	r8, r1
   1feb4:	000d      	movs	r5, r1
   1feb6:	0a61      	lsrs	r1, r4, #9
   1feb8:	0f44      	lsrs	r4, r0, #29
   1feba:	430c      	orrs	r4, r1
   1febc:	00c7      	lsls	r7, r0, #3
   1febe:	0319      	lsls	r1, r3, #12
   1fec0:	0058      	lsls	r0, r3, #1
   1fec2:	0fdb      	lsrs	r3, r3, #31
   1fec4:	469b      	mov	fp, r3
   1fec6:	0a4b      	lsrs	r3, r1, #9
   1fec8:	0f51      	lsrs	r1, r2, #29
   1feca:	430b      	orrs	r3, r1
   1fecc:	0d76      	lsrs	r6, r6, #21
   1fece:	0d40      	lsrs	r0, r0, #21
   1fed0:	0019      	movs	r1, r3
   1fed2:	00d2      	lsls	r2, r2, #3
   1fed4:	45d8      	cmp	r8, fp
   1fed6:	d100      	bne.n	1feda <__aeabi_dadd+0x3a>
   1fed8:	e0ae      	b.n	20038 <__aeabi_dadd+0x198>
   1feda:	1a35      	subs	r5, r6, r0
   1fedc:	2d00      	cmp	r5, #0
   1fede:	dc00      	bgt.n	1fee2 <__aeabi_dadd+0x42>
   1fee0:	e0f6      	b.n	200d0 <__aeabi_dadd+0x230>
   1fee2:	2800      	cmp	r0, #0
   1fee4:	d10f      	bne.n	1ff06 <__aeabi_dadd+0x66>
   1fee6:	4313      	orrs	r3, r2
   1fee8:	d100      	bne.n	1feec <__aeabi_dadd+0x4c>
   1feea:	e0db      	b.n	200a4 <__aeabi_dadd+0x204>
   1feec:	1e6b      	subs	r3, r5, #1
   1feee:	2b00      	cmp	r3, #0
   1fef0:	d000      	beq.n	1fef4 <__aeabi_dadd+0x54>
   1fef2:	e137      	b.n	20164 <__aeabi_dadd+0x2c4>
   1fef4:	1aba      	subs	r2, r7, r2
   1fef6:	4297      	cmp	r7, r2
   1fef8:	41bf      	sbcs	r7, r7
   1fefa:	1a64      	subs	r4, r4, r1
   1fefc:	427f      	negs	r7, r7
   1fefe:	1be4      	subs	r4, r4, r7
   1ff00:	2601      	movs	r6, #1
   1ff02:	0017      	movs	r7, r2
   1ff04:	e024      	b.n	1ff50 <__aeabi_dadd+0xb0>
   1ff06:	4bc6      	ldr	r3, [pc, #792]	; (20220 <__aeabi_dadd+0x380>)
   1ff08:	429e      	cmp	r6, r3
   1ff0a:	d04d      	beq.n	1ffa8 <__aeabi_dadd+0x108>
   1ff0c:	2380      	movs	r3, #128	; 0x80
   1ff0e:	041b      	lsls	r3, r3, #16
   1ff10:	4319      	orrs	r1, r3
   1ff12:	2d38      	cmp	r5, #56	; 0x38
   1ff14:	dd00      	ble.n	1ff18 <__aeabi_dadd+0x78>
   1ff16:	e107      	b.n	20128 <__aeabi_dadd+0x288>
   1ff18:	2d1f      	cmp	r5, #31
   1ff1a:	dd00      	ble.n	1ff1e <__aeabi_dadd+0x7e>
   1ff1c:	e138      	b.n	20190 <__aeabi_dadd+0x2f0>
   1ff1e:	2020      	movs	r0, #32
   1ff20:	1b43      	subs	r3, r0, r5
   1ff22:	469a      	mov	sl, r3
   1ff24:	000b      	movs	r3, r1
   1ff26:	4650      	mov	r0, sl
   1ff28:	4083      	lsls	r3, r0
   1ff2a:	4699      	mov	r9, r3
   1ff2c:	0013      	movs	r3, r2
   1ff2e:	4648      	mov	r0, r9
   1ff30:	40eb      	lsrs	r3, r5
   1ff32:	4318      	orrs	r0, r3
   1ff34:	0003      	movs	r3, r0
   1ff36:	4650      	mov	r0, sl
   1ff38:	4082      	lsls	r2, r0
   1ff3a:	1e50      	subs	r0, r2, #1
   1ff3c:	4182      	sbcs	r2, r0
   1ff3e:	40e9      	lsrs	r1, r5
   1ff40:	431a      	orrs	r2, r3
   1ff42:	1aba      	subs	r2, r7, r2
   1ff44:	1a61      	subs	r1, r4, r1
   1ff46:	4297      	cmp	r7, r2
   1ff48:	41a4      	sbcs	r4, r4
   1ff4a:	0017      	movs	r7, r2
   1ff4c:	4264      	negs	r4, r4
   1ff4e:	1b0c      	subs	r4, r1, r4
   1ff50:	0223      	lsls	r3, r4, #8
   1ff52:	d562      	bpl.n	2001a <__aeabi_dadd+0x17a>
   1ff54:	0264      	lsls	r4, r4, #9
   1ff56:	0a65      	lsrs	r5, r4, #9
   1ff58:	2d00      	cmp	r5, #0
   1ff5a:	d100      	bne.n	1ff5e <__aeabi_dadd+0xbe>
   1ff5c:	e0df      	b.n	2011e <__aeabi_dadd+0x27e>
   1ff5e:	0028      	movs	r0, r5
   1ff60:	f001 fbe4 	bl	2172c <__clzsi2>
   1ff64:	0003      	movs	r3, r0
   1ff66:	3b08      	subs	r3, #8
   1ff68:	2b1f      	cmp	r3, #31
   1ff6a:	dd00      	ble.n	1ff6e <__aeabi_dadd+0xce>
   1ff6c:	e0d2      	b.n	20114 <__aeabi_dadd+0x274>
   1ff6e:	2220      	movs	r2, #32
   1ff70:	003c      	movs	r4, r7
   1ff72:	1ad2      	subs	r2, r2, r3
   1ff74:	409d      	lsls	r5, r3
   1ff76:	40d4      	lsrs	r4, r2
   1ff78:	409f      	lsls	r7, r3
   1ff7a:	4325      	orrs	r5, r4
   1ff7c:	429e      	cmp	r6, r3
   1ff7e:	dd00      	ble.n	1ff82 <__aeabi_dadd+0xe2>
   1ff80:	e0c4      	b.n	2010c <__aeabi_dadd+0x26c>
   1ff82:	1b9e      	subs	r6, r3, r6
   1ff84:	1c73      	adds	r3, r6, #1
   1ff86:	2b1f      	cmp	r3, #31
   1ff88:	dd00      	ble.n	1ff8c <__aeabi_dadd+0xec>
   1ff8a:	e0f1      	b.n	20170 <__aeabi_dadd+0x2d0>
   1ff8c:	2220      	movs	r2, #32
   1ff8e:	0038      	movs	r0, r7
   1ff90:	0029      	movs	r1, r5
   1ff92:	1ad2      	subs	r2, r2, r3
   1ff94:	40d8      	lsrs	r0, r3
   1ff96:	4091      	lsls	r1, r2
   1ff98:	4097      	lsls	r7, r2
   1ff9a:	002c      	movs	r4, r5
   1ff9c:	4301      	orrs	r1, r0
   1ff9e:	1e78      	subs	r0, r7, #1
   1ffa0:	4187      	sbcs	r7, r0
   1ffa2:	40dc      	lsrs	r4, r3
   1ffa4:	2600      	movs	r6, #0
   1ffa6:	430f      	orrs	r7, r1
   1ffa8:	077b      	lsls	r3, r7, #29
   1ffaa:	d009      	beq.n	1ffc0 <__aeabi_dadd+0x120>
   1ffac:	230f      	movs	r3, #15
   1ffae:	403b      	ands	r3, r7
   1ffb0:	2b04      	cmp	r3, #4
   1ffb2:	d005      	beq.n	1ffc0 <__aeabi_dadd+0x120>
   1ffb4:	1d3b      	adds	r3, r7, #4
   1ffb6:	42bb      	cmp	r3, r7
   1ffb8:	41bf      	sbcs	r7, r7
   1ffba:	427f      	negs	r7, r7
   1ffbc:	19e4      	adds	r4, r4, r7
   1ffbe:	001f      	movs	r7, r3
   1ffc0:	0223      	lsls	r3, r4, #8
   1ffc2:	d52c      	bpl.n	2001e <__aeabi_dadd+0x17e>
   1ffc4:	4b96      	ldr	r3, [pc, #600]	; (20220 <__aeabi_dadd+0x380>)
   1ffc6:	3601      	adds	r6, #1
   1ffc8:	429e      	cmp	r6, r3
   1ffca:	d100      	bne.n	1ffce <__aeabi_dadd+0x12e>
   1ffcc:	e09a      	b.n	20104 <__aeabi_dadd+0x264>
   1ffce:	4645      	mov	r5, r8
   1ffd0:	4b94      	ldr	r3, [pc, #592]	; (20224 <__aeabi_dadd+0x384>)
   1ffd2:	08ff      	lsrs	r7, r7, #3
   1ffd4:	401c      	ands	r4, r3
   1ffd6:	0760      	lsls	r0, r4, #29
   1ffd8:	0576      	lsls	r6, r6, #21
   1ffda:	0264      	lsls	r4, r4, #9
   1ffdc:	4307      	orrs	r7, r0
   1ffde:	0b24      	lsrs	r4, r4, #12
   1ffe0:	0d76      	lsrs	r6, r6, #21
   1ffe2:	2100      	movs	r1, #0
   1ffe4:	0324      	lsls	r4, r4, #12
   1ffe6:	0b23      	lsrs	r3, r4, #12
   1ffe8:	0d0c      	lsrs	r4, r1, #20
   1ffea:	4a8f      	ldr	r2, [pc, #572]	; (20228 <__aeabi_dadd+0x388>)
   1ffec:	0524      	lsls	r4, r4, #20
   1ffee:	431c      	orrs	r4, r3
   1fff0:	4014      	ands	r4, r2
   1fff2:	0533      	lsls	r3, r6, #20
   1fff4:	4323      	orrs	r3, r4
   1fff6:	005b      	lsls	r3, r3, #1
   1fff8:	07ed      	lsls	r5, r5, #31
   1fffa:	085b      	lsrs	r3, r3, #1
   1fffc:	432b      	orrs	r3, r5
   1fffe:	0038      	movs	r0, r7
   20000:	0019      	movs	r1, r3
   20002:	bc3c      	pop	{r2, r3, r4, r5}
   20004:	4690      	mov	r8, r2
   20006:	4699      	mov	r9, r3
   20008:	46a2      	mov	sl, r4
   2000a:	46ab      	mov	fp, r5
   2000c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   2000e:	4664      	mov	r4, ip
   20010:	4304      	orrs	r4, r0
   20012:	d100      	bne.n	20016 <__aeabi_dadd+0x176>
   20014:	e211      	b.n	2043a <__aeabi_dadd+0x59a>
   20016:	0004      	movs	r4, r0
   20018:	4667      	mov	r7, ip
   2001a:	077b      	lsls	r3, r7, #29
   2001c:	d1c6      	bne.n	1ffac <__aeabi_dadd+0x10c>
   2001e:	4645      	mov	r5, r8
   20020:	0760      	lsls	r0, r4, #29
   20022:	08ff      	lsrs	r7, r7, #3
   20024:	4307      	orrs	r7, r0
   20026:	08e4      	lsrs	r4, r4, #3
   20028:	4b7d      	ldr	r3, [pc, #500]	; (20220 <__aeabi_dadd+0x380>)
   2002a:	429e      	cmp	r6, r3
   2002c:	d030      	beq.n	20090 <__aeabi_dadd+0x1f0>
   2002e:	0324      	lsls	r4, r4, #12
   20030:	0576      	lsls	r6, r6, #21
   20032:	0b24      	lsrs	r4, r4, #12
   20034:	0d76      	lsrs	r6, r6, #21
   20036:	e7d4      	b.n	1ffe2 <__aeabi_dadd+0x142>
   20038:	1a33      	subs	r3, r6, r0
   2003a:	469a      	mov	sl, r3
   2003c:	2b00      	cmp	r3, #0
   2003e:	dd78      	ble.n	20132 <__aeabi_dadd+0x292>
   20040:	2800      	cmp	r0, #0
   20042:	d031      	beq.n	200a8 <__aeabi_dadd+0x208>
   20044:	4876      	ldr	r0, [pc, #472]	; (20220 <__aeabi_dadd+0x380>)
   20046:	4286      	cmp	r6, r0
   20048:	d0ae      	beq.n	1ffa8 <__aeabi_dadd+0x108>
   2004a:	2080      	movs	r0, #128	; 0x80
   2004c:	0400      	lsls	r0, r0, #16
   2004e:	4301      	orrs	r1, r0
   20050:	4653      	mov	r3, sl
   20052:	2b38      	cmp	r3, #56	; 0x38
   20054:	dc00      	bgt.n	20058 <__aeabi_dadd+0x1b8>
   20056:	e0e9      	b.n	2022c <__aeabi_dadd+0x38c>
   20058:	430a      	orrs	r2, r1
   2005a:	1e51      	subs	r1, r2, #1
   2005c:	418a      	sbcs	r2, r1
   2005e:	2100      	movs	r1, #0
   20060:	19d2      	adds	r2, r2, r7
   20062:	42ba      	cmp	r2, r7
   20064:	41bf      	sbcs	r7, r7
   20066:	1909      	adds	r1, r1, r4
   20068:	427c      	negs	r4, r7
   2006a:	0017      	movs	r7, r2
   2006c:	190c      	adds	r4, r1, r4
   2006e:	0223      	lsls	r3, r4, #8
   20070:	d5d3      	bpl.n	2001a <__aeabi_dadd+0x17a>
   20072:	4b6b      	ldr	r3, [pc, #428]	; (20220 <__aeabi_dadd+0x380>)
   20074:	3601      	adds	r6, #1
   20076:	429e      	cmp	r6, r3
   20078:	d100      	bne.n	2007c <__aeabi_dadd+0x1dc>
   2007a:	e13a      	b.n	202f2 <__aeabi_dadd+0x452>
   2007c:	2001      	movs	r0, #1
   2007e:	4b69      	ldr	r3, [pc, #420]	; (20224 <__aeabi_dadd+0x384>)
   20080:	401c      	ands	r4, r3
   20082:	087b      	lsrs	r3, r7, #1
   20084:	4007      	ands	r7, r0
   20086:	431f      	orrs	r7, r3
   20088:	07e0      	lsls	r0, r4, #31
   2008a:	4307      	orrs	r7, r0
   2008c:	0864      	lsrs	r4, r4, #1
   2008e:	e78b      	b.n	1ffa8 <__aeabi_dadd+0x108>
   20090:	0023      	movs	r3, r4
   20092:	433b      	orrs	r3, r7
   20094:	d100      	bne.n	20098 <__aeabi_dadd+0x1f8>
   20096:	e1cb      	b.n	20430 <__aeabi_dadd+0x590>
   20098:	2280      	movs	r2, #128	; 0x80
   2009a:	0312      	lsls	r2, r2, #12
   2009c:	4314      	orrs	r4, r2
   2009e:	0324      	lsls	r4, r4, #12
   200a0:	0b24      	lsrs	r4, r4, #12
   200a2:	e79e      	b.n	1ffe2 <__aeabi_dadd+0x142>
   200a4:	002e      	movs	r6, r5
   200a6:	e77f      	b.n	1ffa8 <__aeabi_dadd+0x108>
   200a8:	0008      	movs	r0, r1
   200aa:	4310      	orrs	r0, r2
   200ac:	d100      	bne.n	200b0 <__aeabi_dadd+0x210>
   200ae:	e0b4      	b.n	2021a <__aeabi_dadd+0x37a>
   200b0:	1e58      	subs	r0, r3, #1
   200b2:	2800      	cmp	r0, #0
   200b4:	d000      	beq.n	200b8 <__aeabi_dadd+0x218>
   200b6:	e0de      	b.n	20276 <__aeabi_dadd+0x3d6>
   200b8:	18ba      	adds	r2, r7, r2
   200ba:	42ba      	cmp	r2, r7
   200bc:	419b      	sbcs	r3, r3
   200be:	1864      	adds	r4, r4, r1
   200c0:	425b      	negs	r3, r3
   200c2:	18e4      	adds	r4, r4, r3
   200c4:	0017      	movs	r7, r2
   200c6:	2601      	movs	r6, #1
   200c8:	0223      	lsls	r3, r4, #8
   200ca:	d5a6      	bpl.n	2001a <__aeabi_dadd+0x17a>
   200cc:	2602      	movs	r6, #2
   200ce:	e7d5      	b.n	2007c <__aeabi_dadd+0x1dc>
   200d0:	2d00      	cmp	r5, #0
   200d2:	d16e      	bne.n	201b2 <__aeabi_dadd+0x312>
   200d4:	1c70      	adds	r0, r6, #1
   200d6:	0540      	lsls	r0, r0, #21
   200d8:	0d40      	lsrs	r0, r0, #21
   200da:	2801      	cmp	r0, #1
   200dc:	dc00      	bgt.n	200e0 <__aeabi_dadd+0x240>
   200de:	e0f9      	b.n	202d4 <__aeabi_dadd+0x434>
   200e0:	1ab8      	subs	r0, r7, r2
   200e2:	4684      	mov	ip, r0
   200e4:	4287      	cmp	r7, r0
   200e6:	4180      	sbcs	r0, r0
   200e8:	1ae5      	subs	r5, r4, r3
   200ea:	4240      	negs	r0, r0
   200ec:	1a2d      	subs	r5, r5, r0
   200ee:	0228      	lsls	r0, r5, #8
   200f0:	d400      	bmi.n	200f4 <__aeabi_dadd+0x254>
   200f2:	e089      	b.n	20208 <__aeabi_dadd+0x368>
   200f4:	1bd7      	subs	r7, r2, r7
   200f6:	42ba      	cmp	r2, r7
   200f8:	4192      	sbcs	r2, r2
   200fa:	1b1c      	subs	r4, r3, r4
   200fc:	4252      	negs	r2, r2
   200fe:	1aa5      	subs	r5, r4, r2
   20100:	46d8      	mov	r8, fp
   20102:	e729      	b.n	1ff58 <__aeabi_dadd+0xb8>
   20104:	4645      	mov	r5, r8
   20106:	2400      	movs	r4, #0
   20108:	2700      	movs	r7, #0
   2010a:	e76a      	b.n	1ffe2 <__aeabi_dadd+0x142>
   2010c:	4c45      	ldr	r4, [pc, #276]	; (20224 <__aeabi_dadd+0x384>)
   2010e:	1af6      	subs	r6, r6, r3
   20110:	402c      	ands	r4, r5
   20112:	e749      	b.n	1ffa8 <__aeabi_dadd+0x108>
   20114:	003d      	movs	r5, r7
   20116:	3828      	subs	r0, #40	; 0x28
   20118:	4085      	lsls	r5, r0
   2011a:	2700      	movs	r7, #0
   2011c:	e72e      	b.n	1ff7c <__aeabi_dadd+0xdc>
   2011e:	0038      	movs	r0, r7
   20120:	f001 fb04 	bl	2172c <__clzsi2>
   20124:	3020      	adds	r0, #32
   20126:	e71d      	b.n	1ff64 <__aeabi_dadd+0xc4>
   20128:	430a      	orrs	r2, r1
   2012a:	1e51      	subs	r1, r2, #1
   2012c:	418a      	sbcs	r2, r1
   2012e:	2100      	movs	r1, #0
   20130:	e707      	b.n	1ff42 <__aeabi_dadd+0xa2>
   20132:	2b00      	cmp	r3, #0
   20134:	d000      	beq.n	20138 <__aeabi_dadd+0x298>
   20136:	e0f3      	b.n	20320 <__aeabi_dadd+0x480>
   20138:	1c70      	adds	r0, r6, #1
   2013a:	0543      	lsls	r3, r0, #21
   2013c:	0d5b      	lsrs	r3, r3, #21
   2013e:	2b01      	cmp	r3, #1
   20140:	dc00      	bgt.n	20144 <__aeabi_dadd+0x2a4>
   20142:	e0ad      	b.n	202a0 <__aeabi_dadd+0x400>
   20144:	4b36      	ldr	r3, [pc, #216]	; (20220 <__aeabi_dadd+0x380>)
   20146:	4298      	cmp	r0, r3
   20148:	d100      	bne.n	2014c <__aeabi_dadd+0x2ac>
   2014a:	e0d1      	b.n	202f0 <__aeabi_dadd+0x450>
   2014c:	18ba      	adds	r2, r7, r2
   2014e:	42ba      	cmp	r2, r7
   20150:	41bf      	sbcs	r7, r7
   20152:	1864      	adds	r4, r4, r1
   20154:	427f      	negs	r7, r7
   20156:	19e4      	adds	r4, r4, r7
   20158:	07e7      	lsls	r7, r4, #31
   2015a:	0852      	lsrs	r2, r2, #1
   2015c:	4317      	orrs	r7, r2
   2015e:	0864      	lsrs	r4, r4, #1
   20160:	0006      	movs	r6, r0
   20162:	e721      	b.n	1ffa8 <__aeabi_dadd+0x108>
   20164:	482e      	ldr	r0, [pc, #184]	; (20220 <__aeabi_dadd+0x380>)
   20166:	4285      	cmp	r5, r0
   20168:	d100      	bne.n	2016c <__aeabi_dadd+0x2cc>
   2016a:	e093      	b.n	20294 <__aeabi_dadd+0x3f4>
   2016c:	001d      	movs	r5, r3
   2016e:	e6d0      	b.n	1ff12 <__aeabi_dadd+0x72>
   20170:	0029      	movs	r1, r5
   20172:	3e1f      	subs	r6, #31
   20174:	40f1      	lsrs	r1, r6
   20176:	2b20      	cmp	r3, #32
   20178:	d100      	bne.n	2017c <__aeabi_dadd+0x2dc>
   2017a:	e08d      	b.n	20298 <__aeabi_dadd+0x3f8>
   2017c:	2240      	movs	r2, #64	; 0x40
   2017e:	1ad3      	subs	r3, r2, r3
   20180:	409d      	lsls	r5, r3
   20182:	432f      	orrs	r7, r5
   20184:	1e7d      	subs	r5, r7, #1
   20186:	41af      	sbcs	r7, r5
   20188:	2400      	movs	r4, #0
   2018a:	430f      	orrs	r7, r1
   2018c:	2600      	movs	r6, #0
   2018e:	e744      	b.n	2001a <__aeabi_dadd+0x17a>
   20190:	002b      	movs	r3, r5
   20192:	0008      	movs	r0, r1
   20194:	3b20      	subs	r3, #32
   20196:	40d8      	lsrs	r0, r3
   20198:	0003      	movs	r3, r0
   2019a:	2d20      	cmp	r5, #32
   2019c:	d100      	bne.n	201a0 <__aeabi_dadd+0x300>
   2019e:	e07d      	b.n	2029c <__aeabi_dadd+0x3fc>
   201a0:	2040      	movs	r0, #64	; 0x40
   201a2:	1b45      	subs	r5, r0, r5
   201a4:	40a9      	lsls	r1, r5
   201a6:	430a      	orrs	r2, r1
   201a8:	1e51      	subs	r1, r2, #1
   201aa:	418a      	sbcs	r2, r1
   201ac:	2100      	movs	r1, #0
   201ae:	431a      	orrs	r2, r3
   201b0:	e6c7      	b.n	1ff42 <__aeabi_dadd+0xa2>
   201b2:	2e00      	cmp	r6, #0
   201b4:	d050      	beq.n	20258 <__aeabi_dadd+0x3b8>
   201b6:	4e1a      	ldr	r6, [pc, #104]	; (20220 <__aeabi_dadd+0x380>)
   201b8:	42b0      	cmp	r0, r6
   201ba:	d057      	beq.n	2026c <__aeabi_dadd+0x3cc>
   201bc:	2680      	movs	r6, #128	; 0x80
   201be:	426b      	negs	r3, r5
   201c0:	4699      	mov	r9, r3
   201c2:	0436      	lsls	r6, r6, #16
   201c4:	4334      	orrs	r4, r6
   201c6:	464b      	mov	r3, r9
   201c8:	2b38      	cmp	r3, #56	; 0x38
   201ca:	dd00      	ble.n	201ce <__aeabi_dadd+0x32e>
   201cc:	e0d6      	b.n	2037c <__aeabi_dadd+0x4dc>
   201ce:	2b1f      	cmp	r3, #31
   201d0:	dd00      	ble.n	201d4 <__aeabi_dadd+0x334>
   201d2:	e135      	b.n	20440 <__aeabi_dadd+0x5a0>
   201d4:	2620      	movs	r6, #32
   201d6:	1af5      	subs	r5, r6, r3
   201d8:	0026      	movs	r6, r4
   201da:	40ae      	lsls	r6, r5
   201dc:	46b2      	mov	sl, r6
   201de:	003e      	movs	r6, r7
   201e0:	40de      	lsrs	r6, r3
   201e2:	46ac      	mov	ip, r5
   201e4:	0035      	movs	r5, r6
   201e6:	4656      	mov	r6, sl
   201e8:	432e      	orrs	r6, r5
   201ea:	4665      	mov	r5, ip
   201ec:	40af      	lsls	r7, r5
   201ee:	1e7d      	subs	r5, r7, #1
   201f0:	41af      	sbcs	r7, r5
   201f2:	40dc      	lsrs	r4, r3
   201f4:	4337      	orrs	r7, r6
   201f6:	1bd7      	subs	r7, r2, r7
   201f8:	42ba      	cmp	r2, r7
   201fa:	4192      	sbcs	r2, r2
   201fc:	1b0c      	subs	r4, r1, r4
   201fe:	4252      	negs	r2, r2
   20200:	1aa4      	subs	r4, r4, r2
   20202:	0006      	movs	r6, r0
   20204:	46d8      	mov	r8, fp
   20206:	e6a3      	b.n	1ff50 <__aeabi_dadd+0xb0>
   20208:	4664      	mov	r4, ip
   2020a:	4667      	mov	r7, ip
   2020c:	432c      	orrs	r4, r5
   2020e:	d000      	beq.n	20212 <__aeabi_dadd+0x372>
   20210:	e6a2      	b.n	1ff58 <__aeabi_dadd+0xb8>
   20212:	2500      	movs	r5, #0
   20214:	2600      	movs	r6, #0
   20216:	2700      	movs	r7, #0
   20218:	e706      	b.n	20028 <__aeabi_dadd+0x188>
   2021a:	001e      	movs	r6, r3
   2021c:	e6c4      	b.n	1ffa8 <__aeabi_dadd+0x108>
   2021e:	46c0      	nop			; (mov r8, r8)
   20220:	000007ff 	.word	0x000007ff
   20224:	ff7fffff 	.word	0xff7fffff
   20228:	800fffff 	.word	0x800fffff
   2022c:	2b1f      	cmp	r3, #31
   2022e:	dc63      	bgt.n	202f8 <__aeabi_dadd+0x458>
   20230:	2020      	movs	r0, #32
   20232:	1ac3      	subs	r3, r0, r3
   20234:	0008      	movs	r0, r1
   20236:	4098      	lsls	r0, r3
   20238:	469c      	mov	ip, r3
   2023a:	4683      	mov	fp, r0
   2023c:	4653      	mov	r3, sl
   2023e:	0010      	movs	r0, r2
   20240:	40d8      	lsrs	r0, r3
   20242:	0003      	movs	r3, r0
   20244:	4658      	mov	r0, fp
   20246:	4318      	orrs	r0, r3
   20248:	4663      	mov	r3, ip
   2024a:	409a      	lsls	r2, r3
   2024c:	1e53      	subs	r3, r2, #1
   2024e:	419a      	sbcs	r2, r3
   20250:	4653      	mov	r3, sl
   20252:	4302      	orrs	r2, r0
   20254:	40d9      	lsrs	r1, r3
   20256:	e703      	b.n	20060 <__aeabi_dadd+0x1c0>
   20258:	0026      	movs	r6, r4
   2025a:	433e      	orrs	r6, r7
   2025c:	d006      	beq.n	2026c <__aeabi_dadd+0x3cc>
   2025e:	43eb      	mvns	r3, r5
   20260:	4699      	mov	r9, r3
   20262:	2b00      	cmp	r3, #0
   20264:	d0c7      	beq.n	201f6 <__aeabi_dadd+0x356>
   20266:	4e94      	ldr	r6, [pc, #592]	; (204b8 <__aeabi_dadd+0x618>)
   20268:	42b0      	cmp	r0, r6
   2026a:	d1ac      	bne.n	201c6 <__aeabi_dadd+0x326>
   2026c:	000c      	movs	r4, r1
   2026e:	0017      	movs	r7, r2
   20270:	0006      	movs	r6, r0
   20272:	46d8      	mov	r8, fp
   20274:	e698      	b.n	1ffa8 <__aeabi_dadd+0x108>
   20276:	4b90      	ldr	r3, [pc, #576]	; (204b8 <__aeabi_dadd+0x618>)
   20278:	459a      	cmp	sl, r3
   2027a:	d00b      	beq.n	20294 <__aeabi_dadd+0x3f4>
   2027c:	4682      	mov	sl, r0
   2027e:	e6e7      	b.n	20050 <__aeabi_dadd+0x1b0>
   20280:	2800      	cmp	r0, #0
   20282:	d000      	beq.n	20286 <__aeabi_dadd+0x3e6>
   20284:	e09e      	b.n	203c4 <__aeabi_dadd+0x524>
   20286:	0018      	movs	r0, r3
   20288:	4310      	orrs	r0, r2
   2028a:	d100      	bne.n	2028e <__aeabi_dadd+0x3ee>
   2028c:	e0e9      	b.n	20462 <__aeabi_dadd+0x5c2>
   2028e:	001c      	movs	r4, r3
   20290:	0017      	movs	r7, r2
   20292:	46d8      	mov	r8, fp
   20294:	4e88      	ldr	r6, [pc, #544]	; (204b8 <__aeabi_dadd+0x618>)
   20296:	e687      	b.n	1ffa8 <__aeabi_dadd+0x108>
   20298:	2500      	movs	r5, #0
   2029a:	e772      	b.n	20182 <__aeabi_dadd+0x2e2>
   2029c:	2100      	movs	r1, #0
   2029e:	e782      	b.n	201a6 <__aeabi_dadd+0x306>
   202a0:	0023      	movs	r3, r4
   202a2:	433b      	orrs	r3, r7
   202a4:	2e00      	cmp	r6, #0
   202a6:	d000      	beq.n	202aa <__aeabi_dadd+0x40a>
   202a8:	e0ab      	b.n	20402 <__aeabi_dadd+0x562>
   202aa:	2b00      	cmp	r3, #0
   202ac:	d100      	bne.n	202b0 <__aeabi_dadd+0x410>
   202ae:	e0e7      	b.n	20480 <__aeabi_dadd+0x5e0>
   202b0:	000b      	movs	r3, r1
   202b2:	4313      	orrs	r3, r2
   202b4:	d100      	bne.n	202b8 <__aeabi_dadd+0x418>
   202b6:	e677      	b.n	1ffa8 <__aeabi_dadd+0x108>
   202b8:	18ba      	adds	r2, r7, r2
   202ba:	42ba      	cmp	r2, r7
   202bc:	41bf      	sbcs	r7, r7
   202be:	1864      	adds	r4, r4, r1
   202c0:	427f      	negs	r7, r7
   202c2:	19e4      	adds	r4, r4, r7
   202c4:	0223      	lsls	r3, r4, #8
   202c6:	d400      	bmi.n	202ca <__aeabi_dadd+0x42a>
   202c8:	e0f2      	b.n	204b0 <__aeabi_dadd+0x610>
   202ca:	4b7c      	ldr	r3, [pc, #496]	; (204bc <__aeabi_dadd+0x61c>)
   202cc:	0017      	movs	r7, r2
   202ce:	401c      	ands	r4, r3
   202d0:	0006      	movs	r6, r0
   202d2:	e669      	b.n	1ffa8 <__aeabi_dadd+0x108>
   202d4:	0020      	movs	r0, r4
   202d6:	4338      	orrs	r0, r7
   202d8:	2e00      	cmp	r6, #0
   202da:	d1d1      	bne.n	20280 <__aeabi_dadd+0x3e0>
   202dc:	2800      	cmp	r0, #0
   202de:	d15b      	bne.n	20398 <__aeabi_dadd+0x4f8>
   202e0:	001c      	movs	r4, r3
   202e2:	4314      	orrs	r4, r2
   202e4:	d100      	bne.n	202e8 <__aeabi_dadd+0x448>
   202e6:	e0a8      	b.n	2043a <__aeabi_dadd+0x59a>
   202e8:	001c      	movs	r4, r3
   202ea:	0017      	movs	r7, r2
   202ec:	46d8      	mov	r8, fp
   202ee:	e65b      	b.n	1ffa8 <__aeabi_dadd+0x108>
   202f0:	0006      	movs	r6, r0
   202f2:	2400      	movs	r4, #0
   202f4:	2700      	movs	r7, #0
   202f6:	e697      	b.n	20028 <__aeabi_dadd+0x188>
   202f8:	4650      	mov	r0, sl
   202fa:	000b      	movs	r3, r1
   202fc:	3820      	subs	r0, #32
   202fe:	40c3      	lsrs	r3, r0
   20300:	4699      	mov	r9, r3
   20302:	4653      	mov	r3, sl
   20304:	2b20      	cmp	r3, #32
   20306:	d100      	bne.n	2030a <__aeabi_dadd+0x46a>
   20308:	e095      	b.n	20436 <__aeabi_dadd+0x596>
   2030a:	2340      	movs	r3, #64	; 0x40
   2030c:	4650      	mov	r0, sl
   2030e:	1a1b      	subs	r3, r3, r0
   20310:	4099      	lsls	r1, r3
   20312:	430a      	orrs	r2, r1
   20314:	1e51      	subs	r1, r2, #1
   20316:	418a      	sbcs	r2, r1
   20318:	464b      	mov	r3, r9
   2031a:	2100      	movs	r1, #0
   2031c:	431a      	orrs	r2, r3
   2031e:	e69f      	b.n	20060 <__aeabi_dadd+0x1c0>
   20320:	2e00      	cmp	r6, #0
   20322:	d130      	bne.n	20386 <__aeabi_dadd+0x4e6>
   20324:	0026      	movs	r6, r4
   20326:	433e      	orrs	r6, r7
   20328:	d067      	beq.n	203fa <__aeabi_dadd+0x55a>
   2032a:	43db      	mvns	r3, r3
   2032c:	469a      	mov	sl, r3
   2032e:	2b00      	cmp	r3, #0
   20330:	d01c      	beq.n	2036c <__aeabi_dadd+0x4cc>
   20332:	4e61      	ldr	r6, [pc, #388]	; (204b8 <__aeabi_dadd+0x618>)
   20334:	42b0      	cmp	r0, r6
   20336:	d060      	beq.n	203fa <__aeabi_dadd+0x55a>
   20338:	4653      	mov	r3, sl
   2033a:	2b38      	cmp	r3, #56	; 0x38
   2033c:	dd00      	ble.n	20340 <__aeabi_dadd+0x4a0>
   2033e:	e096      	b.n	2046e <__aeabi_dadd+0x5ce>
   20340:	2b1f      	cmp	r3, #31
   20342:	dd00      	ble.n	20346 <__aeabi_dadd+0x4a6>
   20344:	e09f      	b.n	20486 <__aeabi_dadd+0x5e6>
   20346:	2620      	movs	r6, #32
   20348:	1af3      	subs	r3, r6, r3
   2034a:	0026      	movs	r6, r4
   2034c:	409e      	lsls	r6, r3
   2034e:	469c      	mov	ip, r3
   20350:	46b3      	mov	fp, r6
   20352:	4653      	mov	r3, sl
   20354:	003e      	movs	r6, r7
   20356:	40de      	lsrs	r6, r3
   20358:	0033      	movs	r3, r6
   2035a:	465e      	mov	r6, fp
   2035c:	431e      	orrs	r6, r3
   2035e:	4663      	mov	r3, ip
   20360:	409f      	lsls	r7, r3
   20362:	1e7b      	subs	r3, r7, #1
   20364:	419f      	sbcs	r7, r3
   20366:	4653      	mov	r3, sl
   20368:	40dc      	lsrs	r4, r3
   2036a:	4337      	orrs	r7, r6
   2036c:	18bf      	adds	r7, r7, r2
   2036e:	4297      	cmp	r7, r2
   20370:	4192      	sbcs	r2, r2
   20372:	1864      	adds	r4, r4, r1
   20374:	4252      	negs	r2, r2
   20376:	18a4      	adds	r4, r4, r2
   20378:	0006      	movs	r6, r0
   2037a:	e678      	b.n	2006e <__aeabi_dadd+0x1ce>
   2037c:	4327      	orrs	r7, r4
   2037e:	1e7c      	subs	r4, r7, #1
   20380:	41a7      	sbcs	r7, r4
   20382:	2400      	movs	r4, #0
   20384:	e737      	b.n	201f6 <__aeabi_dadd+0x356>
   20386:	4e4c      	ldr	r6, [pc, #304]	; (204b8 <__aeabi_dadd+0x618>)
   20388:	42b0      	cmp	r0, r6
   2038a:	d036      	beq.n	203fa <__aeabi_dadd+0x55a>
   2038c:	2680      	movs	r6, #128	; 0x80
   2038e:	425b      	negs	r3, r3
   20390:	0436      	lsls	r6, r6, #16
   20392:	469a      	mov	sl, r3
   20394:	4334      	orrs	r4, r6
   20396:	e7cf      	b.n	20338 <__aeabi_dadd+0x498>
   20398:	0018      	movs	r0, r3
   2039a:	4310      	orrs	r0, r2
   2039c:	d100      	bne.n	203a0 <__aeabi_dadd+0x500>
   2039e:	e603      	b.n	1ffa8 <__aeabi_dadd+0x108>
   203a0:	1ab8      	subs	r0, r7, r2
   203a2:	4684      	mov	ip, r0
   203a4:	4567      	cmp	r7, ip
   203a6:	41ad      	sbcs	r5, r5
   203a8:	1ae0      	subs	r0, r4, r3
   203aa:	426d      	negs	r5, r5
   203ac:	1b40      	subs	r0, r0, r5
   203ae:	0205      	lsls	r5, r0, #8
   203b0:	d400      	bmi.n	203b4 <__aeabi_dadd+0x514>
   203b2:	e62c      	b.n	2000e <__aeabi_dadd+0x16e>
   203b4:	1bd7      	subs	r7, r2, r7
   203b6:	42ba      	cmp	r2, r7
   203b8:	4192      	sbcs	r2, r2
   203ba:	1b1c      	subs	r4, r3, r4
   203bc:	4252      	negs	r2, r2
   203be:	1aa4      	subs	r4, r4, r2
   203c0:	46d8      	mov	r8, fp
   203c2:	e5f1      	b.n	1ffa8 <__aeabi_dadd+0x108>
   203c4:	0018      	movs	r0, r3
   203c6:	4310      	orrs	r0, r2
   203c8:	d100      	bne.n	203cc <__aeabi_dadd+0x52c>
   203ca:	e763      	b.n	20294 <__aeabi_dadd+0x3f4>
   203cc:	08f8      	lsrs	r0, r7, #3
   203ce:	0767      	lsls	r7, r4, #29
   203d0:	4307      	orrs	r7, r0
   203d2:	2080      	movs	r0, #128	; 0x80
   203d4:	08e4      	lsrs	r4, r4, #3
   203d6:	0300      	lsls	r0, r0, #12
   203d8:	4204      	tst	r4, r0
   203da:	d008      	beq.n	203ee <__aeabi_dadd+0x54e>
   203dc:	08dd      	lsrs	r5, r3, #3
   203de:	4205      	tst	r5, r0
   203e0:	d105      	bne.n	203ee <__aeabi_dadd+0x54e>
   203e2:	08d2      	lsrs	r2, r2, #3
   203e4:	0759      	lsls	r1, r3, #29
   203e6:	4311      	orrs	r1, r2
   203e8:	000f      	movs	r7, r1
   203ea:	002c      	movs	r4, r5
   203ec:	46d8      	mov	r8, fp
   203ee:	0f7b      	lsrs	r3, r7, #29
   203f0:	00e4      	lsls	r4, r4, #3
   203f2:	431c      	orrs	r4, r3
   203f4:	00ff      	lsls	r7, r7, #3
   203f6:	4e30      	ldr	r6, [pc, #192]	; (204b8 <__aeabi_dadd+0x618>)
   203f8:	e5d6      	b.n	1ffa8 <__aeabi_dadd+0x108>
   203fa:	000c      	movs	r4, r1
   203fc:	0017      	movs	r7, r2
   203fe:	0006      	movs	r6, r0
   20400:	e5d2      	b.n	1ffa8 <__aeabi_dadd+0x108>
   20402:	2b00      	cmp	r3, #0
   20404:	d038      	beq.n	20478 <__aeabi_dadd+0x5d8>
   20406:	000b      	movs	r3, r1
   20408:	4313      	orrs	r3, r2
   2040a:	d100      	bne.n	2040e <__aeabi_dadd+0x56e>
   2040c:	e742      	b.n	20294 <__aeabi_dadd+0x3f4>
   2040e:	08f8      	lsrs	r0, r7, #3
   20410:	0767      	lsls	r7, r4, #29
   20412:	4307      	orrs	r7, r0
   20414:	2080      	movs	r0, #128	; 0x80
   20416:	08e4      	lsrs	r4, r4, #3
   20418:	0300      	lsls	r0, r0, #12
   2041a:	4204      	tst	r4, r0
   2041c:	d0e7      	beq.n	203ee <__aeabi_dadd+0x54e>
   2041e:	08cb      	lsrs	r3, r1, #3
   20420:	4203      	tst	r3, r0
   20422:	d1e4      	bne.n	203ee <__aeabi_dadd+0x54e>
   20424:	08d2      	lsrs	r2, r2, #3
   20426:	0749      	lsls	r1, r1, #29
   20428:	4311      	orrs	r1, r2
   2042a:	000f      	movs	r7, r1
   2042c:	001c      	movs	r4, r3
   2042e:	e7de      	b.n	203ee <__aeabi_dadd+0x54e>
   20430:	2700      	movs	r7, #0
   20432:	2400      	movs	r4, #0
   20434:	e5d5      	b.n	1ffe2 <__aeabi_dadd+0x142>
   20436:	2100      	movs	r1, #0
   20438:	e76b      	b.n	20312 <__aeabi_dadd+0x472>
   2043a:	2500      	movs	r5, #0
   2043c:	2700      	movs	r7, #0
   2043e:	e5f3      	b.n	20028 <__aeabi_dadd+0x188>
   20440:	464e      	mov	r6, r9
   20442:	0025      	movs	r5, r4
   20444:	3e20      	subs	r6, #32
   20446:	40f5      	lsrs	r5, r6
   20448:	464b      	mov	r3, r9
   2044a:	002e      	movs	r6, r5
   2044c:	2b20      	cmp	r3, #32
   2044e:	d02d      	beq.n	204ac <__aeabi_dadd+0x60c>
   20450:	2540      	movs	r5, #64	; 0x40
   20452:	1aed      	subs	r5, r5, r3
   20454:	40ac      	lsls	r4, r5
   20456:	4327      	orrs	r7, r4
   20458:	1e7c      	subs	r4, r7, #1
   2045a:	41a7      	sbcs	r7, r4
   2045c:	2400      	movs	r4, #0
   2045e:	4337      	orrs	r7, r6
   20460:	e6c9      	b.n	201f6 <__aeabi_dadd+0x356>
   20462:	2480      	movs	r4, #128	; 0x80
   20464:	2500      	movs	r5, #0
   20466:	0324      	lsls	r4, r4, #12
   20468:	4e13      	ldr	r6, [pc, #76]	; (204b8 <__aeabi_dadd+0x618>)
   2046a:	2700      	movs	r7, #0
   2046c:	e5dc      	b.n	20028 <__aeabi_dadd+0x188>
   2046e:	4327      	orrs	r7, r4
   20470:	1e7c      	subs	r4, r7, #1
   20472:	41a7      	sbcs	r7, r4
   20474:	2400      	movs	r4, #0
   20476:	e779      	b.n	2036c <__aeabi_dadd+0x4cc>
   20478:	000c      	movs	r4, r1
   2047a:	0017      	movs	r7, r2
   2047c:	4e0e      	ldr	r6, [pc, #56]	; (204b8 <__aeabi_dadd+0x618>)
   2047e:	e593      	b.n	1ffa8 <__aeabi_dadd+0x108>
   20480:	000c      	movs	r4, r1
   20482:	0017      	movs	r7, r2
   20484:	e590      	b.n	1ffa8 <__aeabi_dadd+0x108>
   20486:	4656      	mov	r6, sl
   20488:	0023      	movs	r3, r4
   2048a:	3e20      	subs	r6, #32
   2048c:	40f3      	lsrs	r3, r6
   2048e:	4699      	mov	r9, r3
   20490:	4653      	mov	r3, sl
   20492:	2b20      	cmp	r3, #32
   20494:	d00e      	beq.n	204b4 <__aeabi_dadd+0x614>
   20496:	2340      	movs	r3, #64	; 0x40
   20498:	4656      	mov	r6, sl
   2049a:	1b9b      	subs	r3, r3, r6
   2049c:	409c      	lsls	r4, r3
   2049e:	4327      	orrs	r7, r4
   204a0:	1e7c      	subs	r4, r7, #1
   204a2:	41a7      	sbcs	r7, r4
   204a4:	464b      	mov	r3, r9
   204a6:	2400      	movs	r4, #0
   204a8:	431f      	orrs	r7, r3
   204aa:	e75f      	b.n	2036c <__aeabi_dadd+0x4cc>
   204ac:	2400      	movs	r4, #0
   204ae:	e7d2      	b.n	20456 <__aeabi_dadd+0x5b6>
   204b0:	0017      	movs	r7, r2
   204b2:	e5b2      	b.n	2001a <__aeabi_dadd+0x17a>
   204b4:	2400      	movs	r4, #0
   204b6:	e7f2      	b.n	2049e <__aeabi_dadd+0x5fe>
   204b8:	000007ff 	.word	0x000007ff
   204bc:	ff7fffff 	.word	0xff7fffff

000204c0 <__aeabi_ddiv>:
   204c0:	b5f0      	push	{r4, r5, r6, r7, lr}
   204c2:	4657      	mov	r7, sl
   204c4:	4645      	mov	r5, r8
   204c6:	46de      	mov	lr, fp
   204c8:	464e      	mov	r6, r9
   204ca:	b5e0      	push	{r5, r6, r7, lr}
   204cc:	004c      	lsls	r4, r1, #1
   204ce:	030e      	lsls	r6, r1, #12
   204d0:	b087      	sub	sp, #28
   204d2:	4683      	mov	fp, r0
   204d4:	4692      	mov	sl, r2
   204d6:	001d      	movs	r5, r3
   204d8:	4680      	mov	r8, r0
   204da:	0b36      	lsrs	r6, r6, #12
   204dc:	0d64      	lsrs	r4, r4, #21
   204de:	0fcf      	lsrs	r7, r1, #31
   204e0:	2c00      	cmp	r4, #0
   204e2:	d04f      	beq.n	20584 <__aeabi_ddiv+0xc4>
   204e4:	4b6f      	ldr	r3, [pc, #444]	; (206a4 <__aeabi_ddiv+0x1e4>)
   204e6:	429c      	cmp	r4, r3
   204e8:	d035      	beq.n	20556 <__aeabi_ddiv+0x96>
   204ea:	2380      	movs	r3, #128	; 0x80
   204ec:	0f42      	lsrs	r2, r0, #29
   204ee:	041b      	lsls	r3, r3, #16
   204f0:	00f6      	lsls	r6, r6, #3
   204f2:	4313      	orrs	r3, r2
   204f4:	4333      	orrs	r3, r6
   204f6:	4699      	mov	r9, r3
   204f8:	00c3      	lsls	r3, r0, #3
   204fa:	4698      	mov	r8, r3
   204fc:	4b6a      	ldr	r3, [pc, #424]	; (206a8 <__aeabi_ddiv+0x1e8>)
   204fe:	2600      	movs	r6, #0
   20500:	469c      	mov	ip, r3
   20502:	2300      	movs	r3, #0
   20504:	4464      	add	r4, ip
   20506:	9303      	str	r3, [sp, #12]
   20508:	032b      	lsls	r3, r5, #12
   2050a:	0b1b      	lsrs	r3, r3, #12
   2050c:	469b      	mov	fp, r3
   2050e:	006b      	lsls	r3, r5, #1
   20510:	0fed      	lsrs	r5, r5, #31
   20512:	4650      	mov	r0, sl
   20514:	0d5b      	lsrs	r3, r3, #21
   20516:	9501      	str	r5, [sp, #4]
   20518:	d05e      	beq.n	205d8 <__aeabi_ddiv+0x118>
   2051a:	4a62      	ldr	r2, [pc, #392]	; (206a4 <__aeabi_ddiv+0x1e4>)
   2051c:	4293      	cmp	r3, r2
   2051e:	d053      	beq.n	205c8 <__aeabi_ddiv+0x108>
   20520:	465a      	mov	r2, fp
   20522:	00d1      	lsls	r1, r2, #3
   20524:	2280      	movs	r2, #128	; 0x80
   20526:	0f40      	lsrs	r0, r0, #29
   20528:	0412      	lsls	r2, r2, #16
   2052a:	4302      	orrs	r2, r0
   2052c:	430a      	orrs	r2, r1
   2052e:	4693      	mov	fp, r2
   20530:	4652      	mov	r2, sl
   20532:	00d1      	lsls	r1, r2, #3
   20534:	4a5c      	ldr	r2, [pc, #368]	; (206a8 <__aeabi_ddiv+0x1e8>)
   20536:	4694      	mov	ip, r2
   20538:	2200      	movs	r2, #0
   2053a:	4463      	add	r3, ip
   2053c:	0038      	movs	r0, r7
   2053e:	4068      	eors	r0, r5
   20540:	4684      	mov	ip, r0
   20542:	9002      	str	r0, [sp, #8]
   20544:	1ae4      	subs	r4, r4, r3
   20546:	4316      	orrs	r6, r2
   20548:	2e0f      	cmp	r6, #15
   2054a:	d900      	bls.n	2054e <__aeabi_ddiv+0x8e>
   2054c:	e0b4      	b.n	206b8 <__aeabi_ddiv+0x1f8>
   2054e:	4b57      	ldr	r3, [pc, #348]	; (206ac <__aeabi_ddiv+0x1ec>)
   20550:	00b6      	lsls	r6, r6, #2
   20552:	599b      	ldr	r3, [r3, r6]
   20554:	469f      	mov	pc, r3
   20556:	0003      	movs	r3, r0
   20558:	4333      	orrs	r3, r6
   2055a:	4699      	mov	r9, r3
   2055c:	d16c      	bne.n	20638 <__aeabi_ddiv+0x178>
   2055e:	2300      	movs	r3, #0
   20560:	4698      	mov	r8, r3
   20562:	3302      	adds	r3, #2
   20564:	2608      	movs	r6, #8
   20566:	9303      	str	r3, [sp, #12]
   20568:	e7ce      	b.n	20508 <__aeabi_ddiv+0x48>
   2056a:	46cb      	mov	fp, r9
   2056c:	4641      	mov	r1, r8
   2056e:	9a03      	ldr	r2, [sp, #12]
   20570:	9701      	str	r7, [sp, #4]
   20572:	2a02      	cmp	r2, #2
   20574:	d165      	bne.n	20642 <__aeabi_ddiv+0x182>
   20576:	9b01      	ldr	r3, [sp, #4]
   20578:	4c4a      	ldr	r4, [pc, #296]	; (206a4 <__aeabi_ddiv+0x1e4>)
   2057a:	469c      	mov	ip, r3
   2057c:	2300      	movs	r3, #0
   2057e:	2200      	movs	r2, #0
   20580:	4698      	mov	r8, r3
   20582:	e06b      	b.n	2065c <__aeabi_ddiv+0x19c>
   20584:	0003      	movs	r3, r0
   20586:	4333      	orrs	r3, r6
   20588:	4699      	mov	r9, r3
   2058a:	d04e      	beq.n	2062a <__aeabi_ddiv+0x16a>
   2058c:	2e00      	cmp	r6, #0
   2058e:	d100      	bne.n	20592 <__aeabi_ddiv+0xd2>
   20590:	e1bc      	b.n	2090c <__aeabi_ddiv+0x44c>
   20592:	0030      	movs	r0, r6
   20594:	f001 f8ca 	bl	2172c <__clzsi2>
   20598:	0003      	movs	r3, r0
   2059a:	3b0b      	subs	r3, #11
   2059c:	2b1c      	cmp	r3, #28
   2059e:	dd00      	ble.n	205a2 <__aeabi_ddiv+0xe2>
   205a0:	e1ac      	b.n	208fc <__aeabi_ddiv+0x43c>
   205a2:	221d      	movs	r2, #29
   205a4:	1ad3      	subs	r3, r2, r3
   205a6:	465a      	mov	r2, fp
   205a8:	0001      	movs	r1, r0
   205aa:	40da      	lsrs	r2, r3
   205ac:	3908      	subs	r1, #8
   205ae:	408e      	lsls	r6, r1
   205b0:	0013      	movs	r3, r2
   205b2:	4333      	orrs	r3, r6
   205b4:	4699      	mov	r9, r3
   205b6:	465b      	mov	r3, fp
   205b8:	408b      	lsls	r3, r1
   205ba:	4698      	mov	r8, r3
   205bc:	2300      	movs	r3, #0
   205be:	4c3c      	ldr	r4, [pc, #240]	; (206b0 <__aeabi_ddiv+0x1f0>)
   205c0:	2600      	movs	r6, #0
   205c2:	1a24      	subs	r4, r4, r0
   205c4:	9303      	str	r3, [sp, #12]
   205c6:	e79f      	b.n	20508 <__aeabi_ddiv+0x48>
   205c8:	4651      	mov	r1, sl
   205ca:	465a      	mov	r2, fp
   205cc:	4311      	orrs	r1, r2
   205ce:	d129      	bne.n	20624 <__aeabi_ddiv+0x164>
   205d0:	2200      	movs	r2, #0
   205d2:	4693      	mov	fp, r2
   205d4:	3202      	adds	r2, #2
   205d6:	e7b1      	b.n	2053c <__aeabi_ddiv+0x7c>
   205d8:	4659      	mov	r1, fp
   205da:	4301      	orrs	r1, r0
   205dc:	d01e      	beq.n	2061c <__aeabi_ddiv+0x15c>
   205de:	465b      	mov	r3, fp
   205e0:	2b00      	cmp	r3, #0
   205e2:	d100      	bne.n	205e6 <__aeabi_ddiv+0x126>
   205e4:	e19e      	b.n	20924 <__aeabi_ddiv+0x464>
   205e6:	4658      	mov	r0, fp
   205e8:	f001 f8a0 	bl	2172c <__clzsi2>
   205ec:	0003      	movs	r3, r0
   205ee:	3b0b      	subs	r3, #11
   205f0:	2b1c      	cmp	r3, #28
   205f2:	dd00      	ble.n	205f6 <__aeabi_ddiv+0x136>
   205f4:	e18f      	b.n	20916 <__aeabi_ddiv+0x456>
   205f6:	0002      	movs	r2, r0
   205f8:	4659      	mov	r1, fp
   205fa:	3a08      	subs	r2, #8
   205fc:	4091      	lsls	r1, r2
   205fe:	468b      	mov	fp, r1
   20600:	211d      	movs	r1, #29
   20602:	1acb      	subs	r3, r1, r3
   20604:	4651      	mov	r1, sl
   20606:	40d9      	lsrs	r1, r3
   20608:	000b      	movs	r3, r1
   2060a:	4659      	mov	r1, fp
   2060c:	430b      	orrs	r3, r1
   2060e:	4651      	mov	r1, sl
   20610:	469b      	mov	fp, r3
   20612:	4091      	lsls	r1, r2
   20614:	4b26      	ldr	r3, [pc, #152]	; (206b0 <__aeabi_ddiv+0x1f0>)
   20616:	2200      	movs	r2, #0
   20618:	1a1b      	subs	r3, r3, r0
   2061a:	e78f      	b.n	2053c <__aeabi_ddiv+0x7c>
   2061c:	2300      	movs	r3, #0
   2061e:	2201      	movs	r2, #1
   20620:	469b      	mov	fp, r3
   20622:	e78b      	b.n	2053c <__aeabi_ddiv+0x7c>
   20624:	4651      	mov	r1, sl
   20626:	2203      	movs	r2, #3
   20628:	e788      	b.n	2053c <__aeabi_ddiv+0x7c>
   2062a:	2300      	movs	r3, #0
   2062c:	4698      	mov	r8, r3
   2062e:	3301      	adds	r3, #1
   20630:	2604      	movs	r6, #4
   20632:	2400      	movs	r4, #0
   20634:	9303      	str	r3, [sp, #12]
   20636:	e767      	b.n	20508 <__aeabi_ddiv+0x48>
   20638:	2303      	movs	r3, #3
   2063a:	46b1      	mov	r9, r6
   2063c:	9303      	str	r3, [sp, #12]
   2063e:	260c      	movs	r6, #12
   20640:	e762      	b.n	20508 <__aeabi_ddiv+0x48>
   20642:	2a03      	cmp	r2, #3
   20644:	d100      	bne.n	20648 <__aeabi_ddiv+0x188>
   20646:	e25c      	b.n	20b02 <__aeabi_ddiv+0x642>
   20648:	9b01      	ldr	r3, [sp, #4]
   2064a:	2a01      	cmp	r2, #1
   2064c:	d000      	beq.n	20650 <__aeabi_ddiv+0x190>
   2064e:	e1e4      	b.n	20a1a <__aeabi_ddiv+0x55a>
   20650:	4013      	ands	r3, r2
   20652:	469c      	mov	ip, r3
   20654:	2300      	movs	r3, #0
   20656:	2400      	movs	r4, #0
   20658:	2200      	movs	r2, #0
   2065a:	4698      	mov	r8, r3
   2065c:	2100      	movs	r1, #0
   2065e:	0312      	lsls	r2, r2, #12
   20660:	0b13      	lsrs	r3, r2, #12
   20662:	0d0a      	lsrs	r2, r1, #20
   20664:	0512      	lsls	r2, r2, #20
   20666:	431a      	orrs	r2, r3
   20668:	0523      	lsls	r3, r4, #20
   2066a:	4c12      	ldr	r4, [pc, #72]	; (206b4 <__aeabi_ddiv+0x1f4>)
   2066c:	4640      	mov	r0, r8
   2066e:	4022      	ands	r2, r4
   20670:	4313      	orrs	r3, r2
   20672:	4662      	mov	r2, ip
   20674:	005b      	lsls	r3, r3, #1
   20676:	07d2      	lsls	r2, r2, #31
   20678:	085b      	lsrs	r3, r3, #1
   2067a:	4313      	orrs	r3, r2
   2067c:	0019      	movs	r1, r3
   2067e:	b007      	add	sp, #28
   20680:	bc3c      	pop	{r2, r3, r4, r5}
   20682:	4690      	mov	r8, r2
   20684:	4699      	mov	r9, r3
   20686:	46a2      	mov	sl, r4
   20688:	46ab      	mov	fp, r5
   2068a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   2068c:	2300      	movs	r3, #0
   2068e:	2280      	movs	r2, #128	; 0x80
   20690:	469c      	mov	ip, r3
   20692:	0312      	lsls	r2, r2, #12
   20694:	4698      	mov	r8, r3
   20696:	4c03      	ldr	r4, [pc, #12]	; (206a4 <__aeabi_ddiv+0x1e4>)
   20698:	e7e0      	b.n	2065c <__aeabi_ddiv+0x19c>
   2069a:	2300      	movs	r3, #0
   2069c:	4c01      	ldr	r4, [pc, #4]	; (206a4 <__aeabi_ddiv+0x1e4>)
   2069e:	2200      	movs	r2, #0
   206a0:	4698      	mov	r8, r3
   206a2:	e7db      	b.n	2065c <__aeabi_ddiv+0x19c>
   206a4:	000007ff 	.word	0x000007ff
   206a8:	fffffc01 	.word	0xfffffc01
   206ac:	00026b2c 	.word	0x00026b2c
   206b0:	fffffc0d 	.word	0xfffffc0d
   206b4:	800fffff 	.word	0x800fffff
   206b8:	45d9      	cmp	r9, fp
   206ba:	d900      	bls.n	206be <__aeabi_ddiv+0x1fe>
   206bc:	e139      	b.n	20932 <__aeabi_ddiv+0x472>
   206be:	d100      	bne.n	206c2 <__aeabi_ddiv+0x202>
   206c0:	e134      	b.n	2092c <__aeabi_ddiv+0x46c>
   206c2:	2300      	movs	r3, #0
   206c4:	4646      	mov	r6, r8
   206c6:	464d      	mov	r5, r9
   206c8:	469a      	mov	sl, r3
   206ca:	3c01      	subs	r4, #1
   206cc:	465b      	mov	r3, fp
   206ce:	0e0a      	lsrs	r2, r1, #24
   206d0:	021b      	lsls	r3, r3, #8
   206d2:	431a      	orrs	r2, r3
   206d4:	020b      	lsls	r3, r1, #8
   206d6:	0c17      	lsrs	r7, r2, #16
   206d8:	9303      	str	r3, [sp, #12]
   206da:	0413      	lsls	r3, r2, #16
   206dc:	0c1b      	lsrs	r3, r3, #16
   206de:	0039      	movs	r1, r7
   206e0:	0028      	movs	r0, r5
   206e2:	4690      	mov	r8, r2
   206e4:	9301      	str	r3, [sp, #4]
   206e6:	f7ff f8ab 	bl	1f840 <__udivsi3>
   206ea:	0002      	movs	r2, r0
   206ec:	9b01      	ldr	r3, [sp, #4]
   206ee:	4683      	mov	fp, r0
   206f0:	435a      	muls	r2, r3
   206f2:	0028      	movs	r0, r5
   206f4:	0039      	movs	r1, r7
   206f6:	4691      	mov	r9, r2
   206f8:	f7ff f928 	bl	1f94c <__aeabi_uidivmod>
   206fc:	0c35      	lsrs	r5, r6, #16
   206fe:	0409      	lsls	r1, r1, #16
   20700:	430d      	orrs	r5, r1
   20702:	45a9      	cmp	r9, r5
   20704:	d90d      	bls.n	20722 <__aeabi_ddiv+0x262>
   20706:	465b      	mov	r3, fp
   20708:	4445      	add	r5, r8
   2070a:	3b01      	subs	r3, #1
   2070c:	45a8      	cmp	r8, r5
   2070e:	d900      	bls.n	20712 <__aeabi_ddiv+0x252>
   20710:	e13a      	b.n	20988 <__aeabi_ddiv+0x4c8>
   20712:	45a9      	cmp	r9, r5
   20714:	d800      	bhi.n	20718 <__aeabi_ddiv+0x258>
   20716:	e137      	b.n	20988 <__aeabi_ddiv+0x4c8>
   20718:	2302      	movs	r3, #2
   2071a:	425b      	negs	r3, r3
   2071c:	469c      	mov	ip, r3
   2071e:	4445      	add	r5, r8
   20720:	44e3      	add	fp, ip
   20722:	464b      	mov	r3, r9
   20724:	1aeb      	subs	r3, r5, r3
   20726:	0039      	movs	r1, r7
   20728:	0018      	movs	r0, r3
   2072a:	9304      	str	r3, [sp, #16]
   2072c:	f7ff f888 	bl	1f840 <__udivsi3>
   20730:	9b01      	ldr	r3, [sp, #4]
   20732:	0005      	movs	r5, r0
   20734:	4343      	muls	r3, r0
   20736:	0039      	movs	r1, r7
   20738:	9804      	ldr	r0, [sp, #16]
   2073a:	4699      	mov	r9, r3
   2073c:	f7ff f906 	bl	1f94c <__aeabi_uidivmod>
   20740:	0433      	lsls	r3, r6, #16
   20742:	0409      	lsls	r1, r1, #16
   20744:	0c1b      	lsrs	r3, r3, #16
   20746:	430b      	orrs	r3, r1
   20748:	4599      	cmp	r9, r3
   2074a:	d909      	bls.n	20760 <__aeabi_ddiv+0x2a0>
   2074c:	4443      	add	r3, r8
   2074e:	1e6a      	subs	r2, r5, #1
   20750:	4598      	cmp	r8, r3
   20752:	d900      	bls.n	20756 <__aeabi_ddiv+0x296>
   20754:	e11a      	b.n	2098c <__aeabi_ddiv+0x4cc>
   20756:	4599      	cmp	r9, r3
   20758:	d800      	bhi.n	2075c <__aeabi_ddiv+0x29c>
   2075a:	e117      	b.n	2098c <__aeabi_ddiv+0x4cc>
   2075c:	3d02      	subs	r5, #2
   2075e:	4443      	add	r3, r8
   20760:	464a      	mov	r2, r9
   20762:	1a9b      	subs	r3, r3, r2
   20764:	465a      	mov	r2, fp
   20766:	0412      	lsls	r2, r2, #16
   20768:	432a      	orrs	r2, r5
   2076a:	9903      	ldr	r1, [sp, #12]
   2076c:	4693      	mov	fp, r2
   2076e:	0c10      	lsrs	r0, r2, #16
   20770:	0c0a      	lsrs	r2, r1, #16
   20772:	4691      	mov	r9, r2
   20774:	0409      	lsls	r1, r1, #16
   20776:	465a      	mov	r2, fp
   20778:	0c09      	lsrs	r1, r1, #16
   2077a:	464e      	mov	r6, r9
   2077c:	000d      	movs	r5, r1
   2077e:	0412      	lsls	r2, r2, #16
   20780:	0c12      	lsrs	r2, r2, #16
   20782:	4345      	muls	r5, r0
   20784:	9105      	str	r1, [sp, #20]
   20786:	4351      	muls	r1, r2
   20788:	4372      	muls	r2, r6
   2078a:	4370      	muls	r0, r6
   2078c:	1952      	adds	r2, r2, r5
   2078e:	0c0e      	lsrs	r6, r1, #16
   20790:	18b2      	adds	r2, r6, r2
   20792:	4295      	cmp	r5, r2
   20794:	d903      	bls.n	2079e <__aeabi_ddiv+0x2de>
   20796:	2580      	movs	r5, #128	; 0x80
   20798:	026d      	lsls	r5, r5, #9
   2079a:	46ac      	mov	ip, r5
   2079c:	4460      	add	r0, ip
   2079e:	0c15      	lsrs	r5, r2, #16
   207a0:	0409      	lsls	r1, r1, #16
   207a2:	0412      	lsls	r2, r2, #16
   207a4:	0c09      	lsrs	r1, r1, #16
   207a6:	1828      	adds	r0, r5, r0
   207a8:	1852      	adds	r2, r2, r1
   207aa:	4283      	cmp	r3, r0
   207ac:	d200      	bcs.n	207b0 <__aeabi_ddiv+0x2f0>
   207ae:	e0ce      	b.n	2094e <__aeabi_ddiv+0x48e>
   207b0:	d100      	bne.n	207b4 <__aeabi_ddiv+0x2f4>
   207b2:	e0c8      	b.n	20946 <__aeabi_ddiv+0x486>
   207b4:	1a1d      	subs	r5, r3, r0
   207b6:	4653      	mov	r3, sl
   207b8:	1a9e      	subs	r6, r3, r2
   207ba:	45b2      	cmp	sl, r6
   207bc:	4192      	sbcs	r2, r2
   207be:	4252      	negs	r2, r2
   207c0:	1aab      	subs	r3, r5, r2
   207c2:	469a      	mov	sl, r3
   207c4:	4598      	cmp	r8, r3
   207c6:	d100      	bne.n	207ca <__aeabi_ddiv+0x30a>
   207c8:	e117      	b.n	209fa <__aeabi_ddiv+0x53a>
   207ca:	0039      	movs	r1, r7
   207cc:	0018      	movs	r0, r3
   207ce:	f7ff f837 	bl	1f840 <__udivsi3>
   207d2:	9b01      	ldr	r3, [sp, #4]
   207d4:	0005      	movs	r5, r0
   207d6:	4343      	muls	r3, r0
   207d8:	0039      	movs	r1, r7
   207da:	4650      	mov	r0, sl
   207dc:	9304      	str	r3, [sp, #16]
   207de:	f7ff f8b5 	bl	1f94c <__aeabi_uidivmod>
   207e2:	9804      	ldr	r0, [sp, #16]
   207e4:	040b      	lsls	r3, r1, #16
   207e6:	0c31      	lsrs	r1, r6, #16
   207e8:	4319      	orrs	r1, r3
   207ea:	4288      	cmp	r0, r1
   207ec:	d909      	bls.n	20802 <__aeabi_ddiv+0x342>
   207ee:	4441      	add	r1, r8
   207f0:	1e6b      	subs	r3, r5, #1
   207f2:	4588      	cmp	r8, r1
   207f4:	d900      	bls.n	207f8 <__aeabi_ddiv+0x338>
   207f6:	e107      	b.n	20a08 <__aeabi_ddiv+0x548>
   207f8:	4288      	cmp	r0, r1
   207fa:	d800      	bhi.n	207fe <__aeabi_ddiv+0x33e>
   207fc:	e104      	b.n	20a08 <__aeabi_ddiv+0x548>
   207fe:	3d02      	subs	r5, #2
   20800:	4441      	add	r1, r8
   20802:	9b04      	ldr	r3, [sp, #16]
   20804:	1acb      	subs	r3, r1, r3
   20806:	0018      	movs	r0, r3
   20808:	0039      	movs	r1, r7
   2080a:	9304      	str	r3, [sp, #16]
   2080c:	f7ff f818 	bl	1f840 <__udivsi3>
   20810:	9b01      	ldr	r3, [sp, #4]
   20812:	4682      	mov	sl, r0
   20814:	4343      	muls	r3, r0
   20816:	0039      	movs	r1, r7
   20818:	9804      	ldr	r0, [sp, #16]
   2081a:	9301      	str	r3, [sp, #4]
   2081c:	f7ff f896 	bl	1f94c <__aeabi_uidivmod>
   20820:	9801      	ldr	r0, [sp, #4]
   20822:	040b      	lsls	r3, r1, #16
   20824:	0431      	lsls	r1, r6, #16
   20826:	0c09      	lsrs	r1, r1, #16
   20828:	4319      	orrs	r1, r3
   2082a:	4288      	cmp	r0, r1
   2082c:	d90d      	bls.n	2084a <__aeabi_ddiv+0x38a>
   2082e:	4653      	mov	r3, sl
   20830:	4441      	add	r1, r8
   20832:	3b01      	subs	r3, #1
   20834:	4588      	cmp	r8, r1
   20836:	d900      	bls.n	2083a <__aeabi_ddiv+0x37a>
   20838:	e0e8      	b.n	20a0c <__aeabi_ddiv+0x54c>
   2083a:	4288      	cmp	r0, r1
   2083c:	d800      	bhi.n	20840 <__aeabi_ddiv+0x380>
   2083e:	e0e5      	b.n	20a0c <__aeabi_ddiv+0x54c>
   20840:	2302      	movs	r3, #2
   20842:	425b      	negs	r3, r3
   20844:	469c      	mov	ip, r3
   20846:	4441      	add	r1, r8
   20848:	44e2      	add	sl, ip
   2084a:	9b01      	ldr	r3, [sp, #4]
   2084c:	042d      	lsls	r5, r5, #16
   2084e:	1ace      	subs	r6, r1, r3
   20850:	4651      	mov	r1, sl
   20852:	4329      	orrs	r1, r5
   20854:	9d05      	ldr	r5, [sp, #20]
   20856:	464f      	mov	r7, r9
   20858:	002a      	movs	r2, r5
   2085a:	040b      	lsls	r3, r1, #16
   2085c:	0c08      	lsrs	r0, r1, #16
   2085e:	0c1b      	lsrs	r3, r3, #16
   20860:	435a      	muls	r2, r3
   20862:	4345      	muls	r5, r0
   20864:	437b      	muls	r3, r7
   20866:	4378      	muls	r0, r7
   20868:	195b      	adds	r3, r3, r5
   2086a:	0c17      	lsrs	r7, r2, #16
   2086c:	18fb      	adds	r3, r7, r3
   2086e:	429d      	cmp	r5, r3
   20870:	d903      	bls.n	2087a <__aeabi_ddiv+0x3ba>
   20872:	2580      	movs	r5, #128	; 0x80
   20874:	026d      	lsls	r5, r5, #9
   20876:	46ac      	mov	ip, r5
   20878:	4460      	add	r0, ip
   2087a:	0c1d      	lsrs	r5, r3, #16
   2087c:	0412      	lsls	r2, r2, #16
   2087e:	041b      	lsls	r3, r3, #16
   20880:	0c12      	lsrs	r2, r2, #16
   20882:	1828      	adds	r0, r5, r0
   20884:	189b      	adds	r3, r3, r2
   20886:	4286      	cmp	r6, r0
   20888:	d200      	bcs.n	2088c <__aeabi_ddiv+0x3cc>
   2088a:	e093      	b.n	209b4 <__aeabi_ddiv+0x4f4>
   2088c:	d100      	bne.n	20890 <__aeabi_ddiv+0x3d0>
   2088e:	e08e      	b.n	209ae <__aeabi_ddiv+0x4ee>
   20890:	2301      	movs	r3, #1
   20892:	4319      	orrs	r1, r3
   20894:	4ba0      	ldr	r3, [pc, #640]	; (20b18 <__aeabi_ddiv+0x658>)
   20896:	18e3      	adds	r3, r4, r3
   20898:	2b00      	cmp	r3, #0
   2089a:	dc00      	bgt.n	2089e <__aeabi_ddiv+0x3de>
   2089c:	e099      	b.n	209d2 <__aeabi_ddiv+0x512>
   2089e:	074a      	lsls	r2, r1, #29
   208a0:	d000      	beq.n	208a4 <__aeabi_ddiv+0x3e4>
   208a2:	e09e      	b.n	209e2 <__aeabi_ddiv+0x522>
   208a4:	465a      	mov	r2, fp
   208a6:	01d2      	lsls	r2, r2, #7
   208a8:	d506      	bpl.n	208b8 <__aeabi_ddiv+0x3f8>
   208aa:	465a      	mov	r2, fp
   208ac:	4b9b      	ldr	r3, [pc, #620]	; (20b1c <__aeabi_ddiv+0x65c>)
   208ae:	401a      	ands	r2, r3
   208b0:	2380      	movs	r3, #128	; 0x80
   208b2:	4693      	mov	fp, r2
   208b4:	00db      	lsls	r3, r3, #3
   208b6:	18e3      	adds	r3, r4, r3
   208b8:	4a99      	ldr	r2, [pc, #612]	; (20b20 <__aeabi_ddiv+0x660>)
   208ba:	4293      	cmp	r3, r2
   208bc:	dd68      	ble.n	20990 <__aeabi_ddiv+0x4d0>
   208be:	2301      	movs	r3, #1
   208c0:	9a02      	ldr	r2, [sp, #8]
   208c2:	4c98      	ldr	r4, [pc, #608]	; (20b24 <__aeabi_ddiv+0x664>)
   208c4:	401a      	ands	r2, r3
   208c6:	2300      	movs	r3, #0
   208c8:	4694      	mov	ip, r2
   208ca:	4698      	mov	r8, r3
   208cc:	2200      	movs	r2, #0
   208ce:	e6c5      	b.n	2065c <__aeabi_ddiv+0x19c>
   208d0:	2280      	movs	r2, #128	; 0x80
   208d2:	464b      	mov	r3, r9
   208d4:	0312      	lsls	r2, r2, #12
   208d6:	4213      	tst	r3, r2
   208d8:	d00a      	beq.n	208f0 <__aeabi_ddiv+0x430>
   208da:	465b      	mov	r3, fp
   208dc:	4213      	tst	r3, r2
   208de:	d106      	bne.n	208ee <__aeabi_ddiv+0x42e>
   208e0:	431a      	orrs	r2, r3
   208e2:	0312      	lsls	r2, r2, #12
   208e4:	0b12      	lsrs	r2, r2, #12
   208e6:	46ac      	mov	ip, r5
   208e8:	4688      	mov	r8, r1
   208ea:	4c8e      	ldr	r4, [pc, #568]	; (20b24 <__aeabi_ddiv+0x664>)
   208ec:	e6b6      	b.n	2065c <__aeabi_ddiv+0x19c>
   208ee:	464b      	mov	r3, r9
   208f0:	431a      	orrs	r2, r3
   208f2:	0312      	lsls	r2, r2, #12
   208f4:	0b12      	lsrs	r2, r2, #12
   208f6:	46bc      	mov	ip, r7
   208f8:	4c8a      	ldr	r4, [pc, #552]	; (20b24 <__aeabi_ddiv+0x664>)
   208fa:	e6af      	b.n	2065c <__aeabi_ddiv+0x19c>
   208fc:	0003      	movs	r3, r0
   208fe:	465a      	mov	r2, fp
   20900:	3b28      	subs	r3, #40	; 0x28
   20902:	409a      	lsls	r2, r3
   20904:	2300      	movs	r3, #0
   20906:	4691      	mov	r9, r2
   20908:	4698      	mov	r8, r3
   2090a:	e657      	b.n	205bc <__aeabi_ddiv+0xfc>
   2090c:	4658      	mov	r0, fp
   2090e:	f000 ff0d 	bl	2172c <__clzsi2>
   20912:	3020      	adds	r0, #32
   20914:	e640      	b.n	20598 <__aeabi_ddiv+0xd8>
   20916:	0003      	movs	r3, r0
   20918:	4652      	mov	r2, sl
   2091a:	3b28      	subs	r3, #40	; 0x28
   2091c:	409a      	lsls	r2, r3
   2091e:	2100      	movs	r1, #0
   20920:	4693      	mov	fp, r2
   20922:	e677      	b.n	20614 <__aeabi_ddiv+0x154>
   20924:	f000 ff02 	bl	2172c <__clzsi2>
   20928:	3020      	adds	r0, #32
   2092a:	e65f      	b.n	205ec <__aeabi_ddiv+0x12c>
   2092c:	4588      	cmp	r8, r1
   2092e:	d200      	bcs.n	20932 <__aeabi_ddiv+0x472>
   20930:	e6c7      	b.n	206c2 <__aeabi_ddiv+0x202>
   20932:	464b      	mov	r3, r9
   20934:	07de      	lsls	r6, r3, #31
   20936:	085d      	lsrs	r5, r3, #1
   20938:	4643      	mov	r3, r8
   2093a:	085b      	lsrs	r3, r3, #1
   2093c:	431e      	orrs	r6, r3
   2093e:	4643      	mov	r3, r8
   20940:	07db      	lsls	r3, r3, #31
   20942:	469a      	mov	sl, r3
   20944:	e6c2      	b.n	206cc <__aeabi_ddiv+0x20c>
   20946:	2500      	movs	r5, #0
   20948:	4592      	cmp	sl, r2
   2094a:	d300      	bcc.n	2094e <__aeabi_ddiv+0x48e>
   2094c:	e733      	b.n	207b6 <__aeabi_ddiv+0x2f6>
   2094e:	9e03      	ldr	r6, [sp, #12]
   20950:	4659      	mov	r1, fp
   20952:	46b4      	mov	ip, r6
   20954:	44e2      	add	sl, ip
   20956:	45b2      	cmp	sl, r6
   20958:	41ad      	sbcs	r5, r5
   2095a:	426d      	negs	r5, r5
   2095c:	4445      	add	r5, r8
   2095e:	18eb      	adds	r3, r5, r3
   20960:	3901      	subs	r1, #1
   20962:	4598      	cmp	r8, r3
   20964:	d207      	bcs.n	20976 <__aeabi_ddiv+0x4b6>
   20966:	4298      	cmp	r0, r3
   20968:	d900      	bls.n	2096c <__aeabi_ddiv+0x4ac>
   2096a:	e07f      	b.n	20a6c <__aeabi_ddiv+0x5ac>
   2096c:	d100      	bne.n	20970 <__aeabi_ddiv+0x4b0>
   2096e:	e0bc      	b.n	20aea <__aeabi_ddiv+0x62a>
   20970:	1a1d      	subs	r5, r3, r0
   20972:	468b      	mov	fp, r1
   20974:	e71f      	b.n	207b6 <__aeabi_ddiv+0x2f6>
   20976:	4598      	cmp	r8, r3
   20978:	d1fa      	bne.n	20970 <__aeabi_ddiv+0x4b0>
   2097a:	9d03      	ldr	r5, [sp, #12]
   2097c:	4555      	cmp	r5, sl
   2097e:	d9f2      	bls.n	20966 <__aeabi_ddiv+0x4a6>
   20980:	4643      	mov	r3, r8
   20982:	468b      	mov	fp, r1
   20984:	1a1d      	subs	r5, r3, r0
   20986:	e716      	b.n	207b6 <__aeabi_ddiv+0x2f6>
   20988:	469b      	mov	fp, r3
   2098a:	e6ca      	b.n	20722 <__aeabi_ddiv+0x262>
   2098c:	0015      	movs	r5, r2
   2098e:	e6e7      	b.n	20760 <__aeabi_ddiv+0x2a0>
   20990:	465a      	mov	r2, fp
   20992:	08c9      	lsrs	r1, r1, #3
   20994:	0752      	lsls	r2, r2, #29
   20996:	430a      	orrs	r2, r1
   20998:	055b      	lsls	r3, r3, #21
   2099a:	4690      	mov	r8, r2
   2099c:	0d5c      	lsrs	r4, r3, #21
   2099e:	465a      	mov	r2, fp
   209a0:	2301      	movs	r3, #1
   209a2:	9902      	ldr	r1, [sp, #8]
   209a4:	0252      	lsls	r2, r2, #9
   209a6:	4019      	ands	r1, r3
   209a8:	0b12      	lsrs	r2, r2, #12
   209aa:	468c      	mov	ip, r1
   209ac:	e656      	b.n	2065c <__aeabi_ddiv+0x19c>
   209ae:	2b00      	cmp	r3, #0
   209b0:	d100      	bne.n	209b4 <__aeabi_ddiv+0x4f4>
   209b2:	e76f      	b.n	20894 <__aeabi_ddiv+0x3d4>
   209b4:	4446      	add	r6, r8
   209b6:	1e4a      	subs	r2, r1, #1
   209b8:	45b0      	cmp	r8, r6
   209ba:	d929      	bls.n	20a10 <__aeabi_ddiv+0x550>
   209bc:	0011      	movs	r1, r2
   209be:	4286      	cmp	r6, r0
   209c0:	d000      	beq.n	209c4 <__aeabi_ddiv+0x504>
   209c2:	e765      	b.n	20890 <__aeabi_ddiv+0x3d0>
   209c4:	9a03      	ldr	r2, [sp, #12]
   209c6:	4293      	cmp	r3, r2
   209c8:	d000      	beq.n	209cc <__aeabi_ddiv+0x50c>
   209ca:	e761      	b.n	20890 <__aeabi_ddiv+0x3d0>
   209cc:	e762      	b.n	20894 <__aeabi_ddiv+0x3d4>
   209ce:	2101      	movs	r1, #1
   209d0:	4249      	negs	r1, r1
   209d2:	2001      	movs	r0, #1
   209d4:	1ac2      	subs	r2, r0, r3
   209d6:	2a38      	cmp	r2, #56	; 0x38
   209d8:	dd21      	ble.n	20a1e <__aeabi_ddiv+0x55e>
   209da:	9b02      	ldr	r3, [sp, #8]
   209dc:	4003      	ands	r3, r0
   209de:	469c      	mov	ip, r3
   209e0:	e638      	b.n	20654 <__aeabi_ddiv+0x194>
   209e2:	220f      	movs	r2, #15
   209e4:	400a      	ands	r2, r1
   209e6:	2a04      	cmp	r2, #4
   209e8:	d100      	bne.n	209ec <__aeabi_ddiv+0x52c>
   209ea:	e75b      	b.n	208a4 <__aeabi_ddiv+0x3e4>
   209ec:	000a      	movs	r2, r1
   209ee:	1d11      	adds	r1, r2, #4
   209f0:	4291      	cmp	r1, r2
   209f2:	4192      	sbcs	r2, r2
   209f4:	4252      	negs	r2, r2
   209f6:	4493      	add	fp, r2
   209f8:	e754      	b.n	208a4 <__aeabi_ddiv+0x3e4>
   209fa:	4b47      	ldr	r3, [pc, #284]	; (20b18 <__aeabi_ddiv+0x658>)
   209fc:	18e3      	adds	r3, r4, r3
   209fe:	2b00      	cmp	r3, #0
   20a00:	dde5      	ble.n	209ce <__aeabi_ddiv+0x50e>
   20a02:	2201      	movs	r2, #1
   20a04:	4252      	negs	r2, r2
   20a06:	e7f2      	b.n	209ee <__aeabi_ddiv+0x52e>
   20a08:	001d      	movs	r5, r3
   20a0a:	e6fa      	b.n	20802 <__aeabi_ddiv+0x342>
   20a0c:	469a      	mov	sl, r3
   20a0e:	e71c      	b.n	2084a <__aeabi_ddiv+0x38a>
   20a10:	42b0      	cmp	r0, r6
   20a12:	d839      	bhi.n	20a88 <__aeabi_ddiv+0x5c8>
   20a14:	d06e      	beq.n	20af4 <__aeabi_ddiv+0x634>
   20a16:	0011      	movs	r1, r2
   20a18:	e73a      	b.n	20890 <__aeabi_ddiv+0x3d0>
   20a1a:	9302      	str	r3, [sp, #8]
   20a1c:	e73a      	b.n	20894 <__aeabi_ddiv+0x3d4>
   20a1e:	2a1f      	cmp	r2, #31
   20a20:	dc3c      	bgt.n	20a9c <__aeabi_ddiv+0x5dc>
   20a22:	2320      	movs	r3, #32
   20a24:	1a9b      	subs	r3, r3, r2
   20a26:	000c      	movs	r4, r1
   20a28:	4658      	mov	r0, fp
   20a2a:	4099      	lsls	r1, r3
   20a2c:	4098      	lsls	r0, r3
   20a2e:	1e4b      	subs	r3, r1, #1
   20a30:	4199      	sbcs	r1, r3
   20a32:	465b      	mov	r3, fp
   20a34:	40d4      	lsrs	r4, r2
   20a36:	40d3      	lsrs	r3, r2
   20a38:	4320      	orrs	r0, r4
   20a3a:	4308      	orrs	r0, r1
   20a3c:	001a      	movs	r2, r3
   20a3e:	0743      	lsls	r3, r0, #29
   20a40:	d009      	beq.n	20a56 <__aeabi_ddiv+0x596>
   20a42:	230f      	movs	r3, #15
   20a44:	4003      	ands	r3, r0
   20a46:	2b04      	cmp	r3, #4
   20a48:	d005      	beq.n	20a56 <__aeabi_ddiv+0x596>
   20a4a:	0001      	movs	r1, r0
   20a4c:	1d08      	adds	r0, r1, #4
   20a4e:	4288      	cmp	r0, r1
   20a50:	419b      	sbcs	r3, r3
   20a52:	425b      	negs	r3, r3
   20a54:	18d2      	adds	r2, r2, r3
   20a56:	0213      	lsls	r3, r2, #8
   20a58:	d53a      	bpl.n	20ad0 <__aeabi_ddiv+0x610>
   20a5a:	2301      	movs	r3, #1
   20a5c:	9a02      	ldr	r2, [sp, #8]
   20a5e:	2401      	movs	r4, #1
   20a60:	401a      	ands	r2, r3
   20a62:	2300      	movs	r3, #0
   20a64:	4694      	mov	ip, r2
   20a66:	4698      	mov	r8, r3
   20a68:	2200      	movs	r2, #0
   20a6a:	e5f7      	b.n	2065c <__aeabi_ddiv+0x19c>
   20a6c:	2102      	movs	r1, #2
   20a6e:	4249      	negs	r1, r1
   20a70:	468c      	mov	ip, r1
   20a72:	9d03      	ldr	r5, [sp, #12]
   20a74:	44e3      	add	fp, ip
   20a76:	46ac      	mov	ip, r5
   20a78:	44e2      	add	sl, ip
   20a7a:	45aa      	cmp	sl, r5
   20a7c:	41ad      	sbcs	r5, r5
   20a7e:	426d      	negs	r5, r5
   20a80:	4445      	add	r5, r8
   20a82:	18ed      	adds	r5, r5, r3
   20a84:	1a2d      	subs	r5, r5, r0
   20a86:	e696      	b.n	207b6 <__aeabi_ddiv+0x2f6>
   20a88:	1e8a      	subs	r2, r1, #2
   20a8a:	9903      	ldr	r1, [sp, #12]
   20a8c:	004d      	lsls	r5, r1, #1
   20a8e:	428d      	cmp	r5, r1
   20a90:	4189      	sbcs	r1, r1
   20a92:	4249      	negs	r1, r1
   20a94:	4441      	add	r1, r8
   20a96:	1876      	adds	r6, r6, r1
   20a98:	9503      	str	r5, [sp, #12]
   20a9a:	e78f      	b.n	209bc <__aeabi_ddiv+0x4fc>
   20a9c:	201f      	movs	r0, #31
   20a9e:	4240      	negs	r0, r0
   20aa0:	1ac3      	subs	r3, r0, r3
   20aa2:	4658      	mov	r0, fp
   20aa4:	40d8      	lsrs	r0, r3
   20aa6:	0003      	movs	r3, r0
   20aa8:	2a20      	cmp	r2, #32
   20aaa:	d028      	beq.n	20afe <__aeabi_ddiv+0x63e>
   20aac:	2040      	movs	r0, #64	; 0x40
   20aae:	465d      	mov	r5, fp
   20ab0:	1a82      	subs	r2, r0, r2
   20ab2:	4095      	lsls	r5, r2
   20ab4:	4329      	orrs	r1, r5
   20ab6:	1e4a      	subs	r2, r1, #1
   20ab8:	4191      	sbcs	r1, r2
   20aba:	4319      	orrs	r1, r3
   20abc:	2307      	movs	r3, #7
   20abe:	2200      	movs	r2, #0
   20ac0:	400b      	ands	r3, r1
   20ac2:	d009      	beq.n	20ad8 <__aeabi_ddiv+0x618>
   20ac4:	230f      	movs	r3, #15
   20ac6:	2200      	movs	r2, #0
   20ac8:	400b      	ands	r3, r1
   20aca:	0008      	movs	r0, r1
   20acc:	2b04      	cmp	r3, #4
   20ace:	d1bd      	bne.n	20a4c <__aeabi_ddiv+0x58c>
   20ad0:	0001      	movs	r1, r0
   20ad2:	0753      	lsls	r3, r2, #29
   20ad4:	0252      	lsls	r2, r2, #9
   20ad6:	0b12      	lsrs	r2, r2, #12
   20ad8:	08c9      	lsrs	r1, r1, #3
   20ada:	4319      	orrs	r1, r3
   20adc:	2301      	movs	r3, #1
   20ade:	4688      	mov	r8, r1
   20ae0:	9902      	ldr	r1, [sp, #8]
   20ae2:	2400      	movs	r4, #0
   20ae4:	4019      	ands	r1, r3
   20ae6:	468c      	mov	ip, r1
   20ae8:	e5b8      	b.n	2065c <__aeabi_ddiv+0x19c>
   20aea:	4552      	cmp	r2, sl
   20aec:	d8be      	bhi.n	20a6c <__aeabi_ddiv+0x5ac>
   20aee:	468b      	mov	fp, r1
   20af0:	2500      	movs	r5, #0
   20af2:	e660      	b.n	207b6 <__aeabi_ddiv+0x2f6>
   20af4:	9d03      	ldr	r5, [sp, #12]
   20af6:	429d      	cmp	r5, r3
   20af8:	d3c6      	bcc.n	20a88 <__aeabi_ddiv+0x5c8>
   20afa:	0011      	movs	r1, r2
   20afc:	e762      	b.n	209c4 <__aeabi_ddiv+0x504>
   20afe:	2500      	movs	r5, #0
   20b00:	e7d8      	b.n	20ab4 <__aeabi_ddiv+0x5f4>
   20b02:	2280      	movs	r2, #128	; 0x80
   20b04:	465b      	mov	r3, fp
   20b06:	0312      	lsls	r2, r2, #12
   20b08:	431a      	orrs	r2, r3
   20b0a:	9b01      	ldr	r3, [sp, #4]
   20b0c:	0312      	lsls	r2, r2, #12
   20b0e:	0b12      	lsrs	r2, r2, #12
   20b10:	469c      	mov	ip, r3
   20b12:	4688      	mov	r8, r1
   20b14:	4c03      	ldr	r4, [pc, #12]	; (20b24 <__aeabi_ddiv+0x664>)
   20b16:	e5a1      	b.n	2065c <__aeabi_ddiv+0x19c>
   20b18:	000003ff 	.word	0x000003ff
   20b1c:	feffffff 	.word	0xfeffffff
   20b20:	000007fe 	.word	0x000007fe
   20b24:	000007ff 	.word	0x000007ff

00020b28 <__aeabi_dmul>:
   20b28:	b5f0      	push	{r4, r5, r6, r7, lr}
   20b2a:	4657      	mov	r7, sl
   20b2c:	4645      	mov	r5, r8
   20b2e:	46de      	mov	lr, fp
   20b30:	464e      	mov	r6, r9
   20b32:	b5e0      	push	{r5, r6, r7, lr}
   20b34:	030c      	lsls	r4, r1, #12
   20b36:	4698      	mov	r8, r3
   20b38:	004e      	lsls	r6, r1, #1
   20b3a:	0b23      	lsrs	r3, r4, #12
   20b3c:	b087      	sub	sp, #28
   20b3e:	0007      	movs	r7, r0
   20b40:	4692      	mov	sl, r2
   20b42:	469b      	mov	fp, r3
   20b44:	0d76      	lsrs	r6, r6, #21
   20b46:	0fcd      	lsrs	r5, r1, #31
   20b48:	2e00      	cmp	r6, #0
   20b4a:	d06b      	beq.n	20c24 <__aeabi_dmul+0xfc>
   20b4c:	4b6d      	ldr	r3, [pc, #436]	; (20d04 <__aeabi_dmul+0x1dc>)
   20b4e:	429e      	cmp	r6, r3
   20b50:	d035      	beq.n	20bbe <__aeabi_dmul+0x96>
   20b52:	2480      	movs	r4, #128	; 0x80
   20b54:	465b      	mov	r3, fp
   20b56:	0f42      	lsrs	r2, r0, #29
   20b58:	0424      	lsls	r4, r4, #16
   20b5a:	00db      	lsls	r3, r3, #3
   20b5c:	4314      	orrs	r4, r2
   20b5e:	431c      	orrs	r4, r3
   20b60:	00c3      	lsls	r3, r0, #3
   20b62:	4699      	mov	r9, r3
   20b64:	4b68      	ldr	r3, [pc, #416]	; (20d08 <__aeabi_dmul+0x1e0>)
   20b66:	46a3      	mov	fp, r4
   20b68:	469c      	mov	ip, r3
   20b6a:	2300      	movs	r3, #0
   20b6c:	2700      	movs	r7, #0
   20b6e:	4466      	add	r6, ip
   20b70:	9302      	str	r3, [sp, #8]
   20b72:	4643      	mov	r3, r8
   20b74:	031c      	lsls	r4, r3, #12
   20b76:	005a      	lsls	r2, r3, #1
   20b78:	0fdb      	lsrs	r3, r3, #31
   20b7a:	4650      	mov	r0, sl
   20b7c:	0b24      	lsrs	r4, r4, #12
   20b7e:	0d52      	lsrs	r2, r2, #21
   20b80:	4698      	mov	r8, r3
   20b82:	d100      	bne.n	20b86 <__aeabi_dmul+0x5e>
   20b84:	e076      	b.n	20c74 <__aeabi_dmul+0x14c>
   20b86:	4b5f      	ldr	r3, [pc, #380]	; (20d04 <__aeabi_dmul+0x1dc>)
   20b88:	429a      	cmp	r2, r3
   20b8a:	d06d      	beq.n	20c68 <__aeabi_dmul+0x140>
   20b8c:	2380      	movs	r3, #128	; 0x80
   20b8e:	0f41      	lsrs	r1, r0, #29
   20b90:	041b      	lsls	r3, r3, #16
   20b92:	430b      	orrs	r3, r1
   20b94:	495c      	ldr	r1, [pc, #368]	; (20d08 <__aeabi_dmul+0x1e0>)
   20b96:	00e4      	lsls	r4, r4, #3
   20b98:	468c      	mov	ip, r1
   20b9a:	431c      	orrs	r4, r3
   20b9c:	00c3      	lsls	r3, r0, #3
   20b9e:	2000      	movs	r0, #0
   20ba0:	4462      	add	r2, ip
   20ba2:	4641      	mov	r1, r8
   20ba4:	18b6      	adds	r6, r6, r2
   20ba6:	4069      	eors	r1, r5
   20ba8:	1c72      	adds	r2, r6, #1
   20baa:	9101      	str	r1, [sp, #4]
   20bac:	4694      	mov	ip, r2
   20bae:	4307      	orrs	r7, r0
   20bb0:	2f0f      	cmp	r7, #15
   20bb2:	d900      	bls.n	20bb6 <__aeabi_dmul+0x8e>
   20bb4:	e0b0      	b.n	20d18 <__aeabi_dmul+0x1f0>
   20bb6:	4a55      	ldr	r2, [pc, #340]	; (20d0c <__aeabi_dmul+0x1e4>)
   20bb8:	00bf      	lsls	r7, r7, #2
   20bba:	59d2      	ldr	r2, [r2, r7]
   20bbc:	4697      	mov	pc, r2
   20bbe:	465b      	mov	r3, fp
   20bc0:	4303      	orrs	r3, r0
   20bc2:	4699      	mov	r9, r3
   20bc4:	d000      	beq.n	20bc8 <__aeabi_dmul+0xa0>
   20bc6:	e087      	b.n	20cd8 <__aeabi_dmul+0x1b0>
   20bc8:	2300      	movs	r3, #0
   20bca:	469b      	mov	fp, r3
   20bcc:	3302      	adds	r3, #2
   20bce:	2708      	movs	r7, #8
   20bd0:	9302      	str	r3, [sp, #8]
   20bd2:	e7ce      	b.n	20b72 <__aeabi_dmul+0x4a>
   20bd4:	4642      	mov	r2, r8
   20bd6:	9201      	str	r2, [sp, #4]
   20bd8:	2802      	cmp	r0, #2
   20bda:	d067      	beq.n	20cac <__aeabi_dmul+0x184>
   20bdc:	2803      	cmp	r0, #3
   20bde:	d100      	bne.n	20be2 <__aeabi_dmul+0xba>
   20be0:	e20e      	b.n	21000 <__aeabi_dmul+0x4d8>
   20be2:	2801      	cmp	r0, #1
   20be4:	d000      	beq.n	20be8 <__aeabi_dmul+0xc0>
   20be6:	e162      	b.n	20eae <__aeabi_dmul+0x386>
   20be8:	2300      	movs	r3, #0
   20bea:	2400      	movs	r4, #0
   20bec:	2200      	movs	r2, #0
   20bee:	4699      	mov	r9, r3
   20bf0:	9901      	ldr	r1, [sp, #4]
   20bf2:	4001      	ands	r1, r0
   20bf4:	b2cd      	uxtb	r5, r1
   20bf6:	2100      	movs	r1, #0
   20bf8:	0312      	lsls	r2, r2, #12
   20bfa:	0d0b      	lsrs	r3, r1, #20
   20bfc:	0b12      	lsrs	r2, r2, #12
   20bfe:	051b      	lsls	r3, r3, #20
   20c00:	4313      	orrs	r3, r2
   20c02:	4a43      	ldr	r2, [pc, #268]	; (20d10 <__aeabi_dmul+0x1e8>)
   20c04:	0524      	lsls	r4, r4, #20
   20c06:	4013      	ands	r3, r2
   20c08:	431c      	orrs	r4, r3
   20c0a:	0064      	lsls	r4, r4, #1
   20c0c:	07ed      	lsls	r5, r5, #31
   20c0e:	0864      	lsrs	r4, r4, #1
   20c10:	432c      	orrs	r4, r5
   20c12:	4648      	mov	r0, r9
   20c14:	0021      	movs	r1, r4
   20c16:	b007      	add	sp, #28
   20c18:	bc3c      	pop	{r2, r3, r4, r5}
   20c1a:	4690      	mov	r8, r2
   20c1c:	4699      	mov	r9, r3
   20c1e:	46a2      	mov	sl, r4
   20c20:	46ab      	mov	fp, r5
   20c22:	bdf0      	pop	{r4, r5, r6, r7, pc}
   20c24:	4303      	orrs	r3, r0
   20c26:	4699      	mov	r9, r3
   20c28:	d04f      	beq.n	20cca <__aeabi_dmul+0x1a2>
   20c2a:	465b      	mov	r3, fp
   20c2c:	2b00      	cmp	r3, #0
   20c2e:	d100      	bne.n	20c32 <__aeabi_dmul+0x10a>
   20c30:	e189      	b.n	20f46 <__aeabi_dmul+0x41e>
   20c32:	4658      	mov	r0, fp
   20c34:	f000 fd7a 	bl	2172c <__clzsi2>
   20c38:	0003      	movs	r3, r0
   20c3a:	3b0b      	subs	r3, #11
   20c3c:	2b1c      	cmp	r3, #28
   20c3e:	dd00      	ble.n	20c42 <__aeabi_dmul+0x11a>
   20c40:	e17a      	b.n	20f38 <__aeabi_dmul+0x410>
   20c42:	221d      	movs	r2, #29
   20c44:	1ad3      	subs	r3, r2, r3
   20c46:	003a      	movs	r2, r7
   20c48:	0001      	movs	r1, r0
   20c4a:	465c      	mov	r4, fp
   20c4c:	40da      	lsrs	r2, r3
   20c4e:	3908      	subs	r1, #8
   20c50:	408c      	lsls	r4, r1
   20c52:	0013      	movs	r3, r2
   20c54:	408f      	lsls	r7, r1
   20c56:	4323      	orrs	r3, r4
   20c58:	469b      	mov	fp, r3
   20c5a:	46b9      	mov	r9, r7
   20c5c:	2300      	movs	r3, #0
   20c5e:	4e2d      	ldr	r6, [pc, #180]	; (20d14 <__aeabi_dmul+0x1ec>)
   20c60:	2700      	movs	r7, #0
   20c62:	1a36      	subs	r6, r6, r0
   20c64:	9302      	str	r3, [sp, #8]
   20c66:	e784      	b.n	20b72 <__aeabi_dmul+0x4a>
   20c68:	4653      	mov	r3, sl
   20c6a:	4323      	orrs	r3, r4
   20c6c:	d12a      	bne.n	20cc4 <__aeabi_dmul+0x19c>
   20c6e:	2400      	movs	r4, #0
   20c70:	2002      	movs	r0, #2
   20c72:	e796      	b.n	20ba2 <__aeabi_dmul+0x7a>
   20c74:	4653      	mov	r3, sl
   20c76:	4323      	orrs	r3, r4
   20c78:	d020      	beq.n	20cbc <__aeabi_dmul+0x194>
   20c7a:	2c00      	cmp	r4, #0
   20c7c:	d100      	bne.n	20c80 <__aeabi_dmul+0x158>
   20c7e:	e157      	b.n	20f30 <__aeabi_dmul+0x408>
   20c80:	0020      	movs	r0, r4
   20c82:	f000 fd53 	bl	2172c <__clzsi2>
   20c86:	0003      	movs	r3, r0
   20c88:	3b0b      	subs	r3, #11
   20c8a:	2b1c      	cmp	r3, #28
   20c8c:	dd00      	ble.n	20c90 <__aeabi_dmul+0x168>
   20c8e:	e149      	b.n	20f24 <__aeabi_dmul+0x3fc>
   20c90:	211d      	movs	r1, #29
   20c92:	1acb      	subs	r3, r1, r3
   20c94:	4651      	mov	r1, sl
   20c96:	0002      	movs	r2, r0
   20c98:	40d9      	lsrs	r1, r3
   20c9a:	4653      	mov	r3, sl
   20c9c:	3a08      	subs	r2, #8
   20c9e:	4094      	lsls	r4, r2
   20ca0:	4093      	lsls	r3, r2
   20ca2:	430c      	orrs	r4, r1
   20ca4:	4a1b      	ldr	r2, [pc, #108]	; (20d14 <__aeabi_dmul+0x1ec>)
   20ca6:	1a12      	subs	r2, r2, r0
   20ca8:	2000      	movs	r0, #0
   20caa:	e77a      	b.n	20ba2 <__aeabi_dmul+0x7a>
   20cac:	2501      	movs	r5, #1
   20cae:	9b01      	ldr	r3, [sp, #4]
   20cb0:	4c14      	ldr	r4, [pc, #80]	; (20d04 <__aeabi_dmul+0x1dc>)
   20cb2:	401d      	ands	r5, r3
   20cb4:	2300      	movs	r3, #0
   20cb6:	2200      	movs	r2, #0
   20cb8:	4699      	mov	r9, r3
   20cba:	e79c      	b.n	20bf6 <__aeabi_dmul+0xce>
   20cbc:	2400      	movs	r4, #0
   20cbe:	2200      	movs	r2, #0
   20cc0:	2001      	movs	r0, #1
   20cc2:	e76e      	b.n	20ba2 <__aeabi_dmul+0x7a>
   20cc4:	4653      	mov	r3, sl
   20cc6:	2003      	movs	r0, #3
   20cc8:	e76b      	b.n	20ba2 <__aeabi_dmul+0x7a>
   20cca:	2300      	movs	r3, #0
   20ccc:	469b      	mov	fp, r3
   20cce:	3301      	adds	r3, #1
   20cd0:	2704      	movs	r7, #4
   20cd2:	2600      	movs	r6, #0
   20cd4:	9302      	str	r3, [sp, #8]
   20cd6:	e74c      	b.n	20b72 <__aeabi_dmul+0x4a>
   20cd8:	2303      	movs	r3, #3
   20cda:	4681      	mov	r9, r0
   20cdc:	270c      	movs	r7, #12
   20cde:	9302      	str	r3, [sp, #8]
   20ce0:	e747      	b.n	20b72 <__aeabi_dmul+0x4a>
   20ce2:	2280      	movs	r2, #128	; 0x80
   20ce4:	2300      	movs	r3, #0
   20ce6:	2500      	movs	r5, #0
   20ce8:	0312      	lsls	r2, r2, #12
   20cea:	4699      	mov	r9, r3
   20cec:	4c05      	ldr	r4, [pc, #20]	; (20d04 <__aeabi_dmul+0x1dc>)
   20cee:	e782      	b.n	20bf6 <__aeabi_dmul+0xce>
   20cf0:	465c      	mov	r4, fp
   20cf2:	464b      	mov	r3, r9
   20cf4:	9802      	ldr	r0, [sp, #8]
   20cf6:	e76f      	b.n	20bd8 <__aeabi_dmul+0xb0>
   20cf8:	465c      	mov	r4, fp
   20cfa:	464b      	mov	r3, r9
   20cfc:	9501      	str	r5, [sp, #4]
   20cfe:	9802      	ldr	r0, [sp, #8]
   20d00:	e76a      	b.n	20bd8 <__aeabi_dmul+0xb0>
   20d02:	46c0      	nop			; (mov r8, r8)
   20d04:	000007ff 	.word	0x000007ff
   20d08:	fffffc01 	.word	0xfffffc01
   20d0c:	00026b6c 	.word	0x00026b6c
   20d10:	800fffff 	.word	0x800fffff
   20d14:	fffffc0d 	.word	0xfffffc0d
   20d18:	464a      	mov	r2, r9
   20d1a:	4649      	mov	r1, r9
   20d1c:	0c17      	lsrs	r7, r2, #16
   20d1e:	0c1a      	lsrs	r2, r3, #16
   20d20:	041b      	lsls	r3, r3, #16
   20d22:	0c1b      	lsrs	r3, r3, #16
   20d24:	0408      	lsls	r0, r1, #16
   20d26:	0019      	movs	r1, r3
   20d28:	0c00      	lsrs	r0, r0, #16
   20d2a:	4341      	muls	r1, r0
   20d2c:	0015      	movs	r5, r2
   20d2e:	4688      	mov	r8, r1
   20d30:	0019      	movs	r1, r3
   20d32:	437d      	muls	r5, r7
   20d34:	4379      	muls	r1, r7
   20d36:	9503      	str	r5, [sp, #12]
   20d38:	4689      	mov	r9, r1
   20d3a:	0029      	movs	r1, r5
   20d3c:	0015      	movs	r5, r2
   20d3e:	4345      	muls	r5, r0
   20d40:	444d      	add	r5, r9
   20d42:	9502      	str	r5, [sp, #8]
   20d44:	4645      	mov	r5, r8
   20d46:	0c2d      	lsrs	r5, r5, #16
   20d48:	46aa      	mov	sl, r5
   20d4a:	9d02      	ldr	r5, [sp, #8]
   20d4c:	4455      	add	r5, sl
   20d4e:	45a9      	cmp	r9, r5
   20d50:	d906      	bls.n	20d60 <__aeabi_dmul+0x238>
   20d52:	468a      	mov	sl, r1
   20d54:	2180      	movs	r1, #128	; 0x80
   20d56:	0249      	lsls	r1, r1, #9
   20d58:	4689      	mov	r9, r1
   20d5a:	44ca      	add	sl, r9
   20d5c:	4651      	mov	r1, sl
   20d5e:	9103      	str	r1, [sp, #12]
   20d60:	0c29      	lsrs	r1, r5, #16
   20d62:	9104      	str	r1, [sp, #16]
   20d64:	4641      	mov	r1, r8
   20d66:	0409      	lsls	r1, r1, #16
   20d68:	042d      	lsls	r5, r5, #16
   20d6a:	0c09      	lsrs	r1, r1, #16
   20d6c:	4688      	mov	r8, r1
   20d6e:	0029      	movs	r1, r5
   20d70:	0c25      	lsrs	r5, r4, #16
   20d72:	0424      	lsls	r4, r4, #16
   20d74:	4441      	add	r1, r8
   20d76:	0c24      	lsrs	r4, r4, #16
   20d78:	9105      	str	r1, [sp, #20]
   20d7a:	0021      	movs	r1, r4
   20d7c:	4341      	muls	r1, r0
   20d7e:	4688      	mov	r8, r1
   20d80:	0021      	movs	r1, r4
   20d82:	4379      	muls	r1, r7
   20d84:	468a      	mov	sl, r1
   20d86:	4368      	muls	r0, r5
   20d88:	4641      	mov	r1, r8
   20d8a:	4450      	add	r0, sl
   20d8c:	4681      	mov	r9, r0
   20d8e:	0c08      	lsrs	r0, r1, #16
   20d90:	4448      	add	r0, r9
   20d92:	436f      	muls	r7, r5
   20d94:	4582      	cmp	sl, r0
   20d96:	d903      	bls.n	20da0 <__aeabi_dmul+0x278>
   20d98:	2180      	movs	r1, #128	; 0x80
   20d9a:	0249      	lsls	r1, r1, #9
   20d9c:	4689      	mov	r9, r1
   20d9e:	444f      	add	r7, r9
   20da0:	0c01      	lsrs	r1, r0, #16
   20da2:	4689      	mov	r9, r1
   20da4:	0039      	movs	r1, r7
   20da6:	4449      	add	r1, r9
   20da8:	9102      	str	r1, [sp, #8]
   20daa:	4641      	mov	r1, r8
   20dac:	040f      	lsls	r7, r1, #16
   20dae:	9904      	ldr	r1, [sp, #16]
   20db0:	0c3f      	lsrs	r7, r7, #16
   20db2:	4688      	mov	r8, r1
   20db4:	0400      	lsls	r0, r0, #16
   20db6:	19c0      	adds	r0, r0, r7
   20db8:	4480      	add	r8, r0
   20dba:	4641      	mov	r1, r8
   20dbc:	9104      	str	r1, [sp, #16]
   20dbe:	4659      	mov	r1, fp
   20dc0:	0c0f      	lsrs	r7, r1, #16
   20dc2:	0409      	lsls	r1, r1, #16
   20dc4:	0c09      	lsrs	r1, r1, #16
   20dc6:	4688      	mov	r8, r1
   20dc8:	4359      	muls	r1, r3
   20dca:	468a      	mov	sl, r1
   20dcc:	0039      	movs	r1, r7
   20dce:	4351      	muls	r1, r2
   20dd0:	4689      	mov	r9, r1
   20dd2:	4641      	mov	r1, r8
   20dd4:	434a      	muls	r2, r1
   20dd6:	4651      	mov	r1, sl
   20dd8:	0c09      	lsrs	r1, r1, #16
   20dda:	468b      	mov	fp, r1
   20ddc:	437b      	muls	r3, r7
   20dde:	18d2      	adds	r2, r2, r3
   20de0:	445a      	add	r2, fp
   20de2:	4293      	cmp	r3, r2
   20de4:	d903      	bls.n	20dee <__aeabi_dmul+0x2c6>
   20de6:	2380      	movs	r3, #128	; 0x80
   20de8:	025b      	lsls	r3, r3, #9
   20dea:	469b      	mov	fp, r3
   20dec:	44d9      	add	r9, fp
   20dee:	4651      	mov	r1, sl
   20df0:	0409      	lsls	r1, r1, #16
   20df2:	0c09      	lsrs	r1, r1, #16
   20df4:	468a      	mov	sl, r1
   20df6:	4641      	mov	r1, r8
   20df8:	4361      	muls	r1, r4
   20dfa:	437c      	muls	r4, r7
   20dfc:	0c13      	lsrs	r3, r2, #16
   20dfe:	0412      	lsls	r2, r2, #16
   20e00:	444b      	add	r3, r9
   20e02:	4452      	add	r2, sl
   20e04:	46a1      	mov	r9, r4
   20e06:	468a      	mov	sl, r1
   20e08:	003c      	movs	r4, r7
   20e0a:	4641      	mov	r1, r8
   20e0c:	436c      	muls	r4, r5
   20e0e:	434d      	muls	r5, r1
   20e10:	4651      	mov	r1, sl
   20e12:	444d      	add	r5, r9
   20e14:	0c0f      	lsrs	r7, r1, #16
   20e16:	197d      	adds	r5, r7, r5
   20e18:	45a9      	cmp	r9, r5
   20e1a:	d903      	bls.n	20e24 <__aeabi_dmul+0x2fc>
   20e1c:	2180      	movs	r1, #128	; 0x80
   20e1e:	0249      	lsls	r1, r1, #9
   20e20:	4688      	mov	r8, r1
   20e22:	4444      	add	r4, r8
   20e24:	9f04      	ldr	r7, [sp, #16]
   20e26:	9903      	ldr	r1, [sp, #12]
   20e28:	46b8      	mov	r8, r7
   20e2a:	4441      	add	r1, r8
   20e2c:	468b      	mov	fp, r1
   20e2e:	4583      	cmp	fp, r0
   20e30:	4180      	sbcs	r0, r0
   20e32:	4241      	negs	r1, r0
   20e34:	4688      	mov	r8, r1
   20e36:	4651      	mov	r1, sl
   20e38:	0408      	lsls	r0, r1, #16
   20e3a:	042f      	lsls	r7, r5, #16
   20e3c:	0c00      	lsrs	r0, r0, #16
   20e3e:	183f      	adds	r7, r7, r0
   20e40:	4658      	mov	r0, fp
   20e42:	9902      	ldr	r1, [sp, #8]
   20e44:	1810      	adds	r0, r2, r0
   20e46:	4689      	mov	r9, r1
   20e48:	4290      	cmp	r0, r2
   20e4a:	4192      	sbcs	r2, r2
   20e4c:	444f      	add	r7, r9
   20e4e:	46ba      	mov	sl, r7
   20e50:	4252      	negs	r2, r2
   20e52:	4699      	mov	r9, r3
   20e54:	4693      	mov	fp, r2
   20e56:	44c2      	add	sl, r8
   20e58:	44d1      	add	r9, sl
   20e5a:	44cb      	add	fp, r9
   20e5c:	428f      	cmp	r7, r1
   20e5e:	41bf      	sbcs	r7, r7
   20e60:	45c2      	cmp	sl, r8
   20e62:	4189      	sbcs	r1, r1
   20e64:	4599      	cmp	r9, r3
   20e66:	419b      	sbcs	r3, r3
   20e68:	4593      	cmp	fp, r2
   20e6a:	4192      	sbcs	r2, r2
   20e6c:	427f      	negs	r7, r7
   20e6e:	4249      	negs	r1, r1
   20e70:	0c2d      	lsrs	r5, r5, #16
   20e72:	4252      	negs	r2, r2
   20e74:	430f      	orrs	r7, r1
   20e76:	425b      	negs	r3, r3
   20e78:	4313      	orrs	r3, r2
   20e7a:	197f      	adds	r7, r7, r5
   20e7c:	18ff      	adds	r7, r7, r3
   20e7e:	465b      	mov	r3, fp
   20e80:	193c      	adds	r4, r7, r4
   20e82:	0ddb      	lsrs	r3, r3, #23
   20e84:	9a05      	ldr	r2, [sp, #20]
   20e86:	0264      	lsls	r4, r4, #9
   20e88:	431c      	orrs	r4, r3
   20e8a:	0243      	lsls	r3, r0, #9
   20e8c:	4313      	orrs	r3, r2
   20e8e:	1e5d      	subs	r5, r3, #1
   20e90:	41ab      	sbcs	r3, r5
   20e92:	465a      	mov	r2, fp
   20e94:	0dc0      	lsrs	r0, r0, #23
   20e96:	4303      	orrs	r3, r0
   20e98:	0252      	lsls	r2, r2, #9
   20e9a:	4313      	orrs	r3, r2
   20e9c:	01e2      	lsls	r2, r4, #7
   20e9e:	d556      	bpl.n	20f4e <__aeabi_dmul+0x426>
   20ea0:	2001      	movs	r0, #1
   20ea2:	085a      	lsrs	r2, r3, #1
   20ea4:	4003      	ands	r3, r0
   20ea6:	4313      	orrs	r3, r2
   20ea8:	07e2      	lsls	r2, r4, #31
   20eaa:	4313      	orrs	r3, r2
   20eac:	0864      	lsrs	r4, r4, #1
   20eae:	485a      	ldr	r0, [pc, #360]	; (21018 <__aeabi_dmul+0x4f0>)
   20eb0:	4460      	add	r0, ip
   20eb2:	2800      	cmp	r0, #0
   20eb4:	dd4d      	ble.n	20f52 <__aeabi_dmul+0x42a>
   20eb6:	075a      	lsls	r2, r3, #29
   20eb8:	d009      	beq.n	20ece <__aeabi_dmul+0x3a6>
   20eba:	220f      	movs	r2, #15
   20ebc:	401a      	ands	r2, r3
   20ebe:	2a04      	cmp	r2, #4
   20ec0:	d005      	beq.n	20ece <__aeabi_dmul+0x3a6>
   20ec2:	1d1a      	adds	r2, r3, #4
   20ec4:	429a      	cmp	r2, r3
   20ec6:	419b      	sbcs	r3, r3
   20ec8:	425b      	negs	r3, r3
   20eca:	18e4      	adds	r4, r4, r3
   20ecc:	0013      	movs	r3, r2
   20ece:	01e2      	lsls	r2, r4, #7
   20ed0:	d504      	bpl.n	20edc <__aeabi_dmul+0x3b4>
   20ed2:	2080      	movs	r0, #128	; 0x80
   20ed4:	4a51      	ldr	r2, [pc, #324]	; (2101c <__aeabi_dmul+0x4f4>)
   20ed6:	00c0      	lsls	r0, r0, #3
   20ed8:	4014      	ands	r4, r2
   20eda:	4460      	add	r0, ip
   20edc:	4a50      	ldr	r2, [pc, #320]	; (21020 <__aeabi_dmul+0x4f8>)
   20ede:	4290      	cmp	r0, r2
   20ee0:	dd00      	ble.n	20ee4 <__aeabi_dmul+0x3bc>
   20ee2:	e6e3      	b.n	20cac <__aeabi_dmul+0x184>
   20ee4:	2501      	movs	r5, #1
   20ee6:	08db      	lsrs	r3, r3, #3
   20ee8:	0762      	lsls	r2, r4, #29
   20eea:	431a      	orrs	r2, r3
   20eec:	0264      	lsls	r4, r4, #9
   20eee:	9b01      	ldr	r3, [sp, #4]
   20ef0:	4691      	mov	r9, r2
   20ef2:	0b22      	lsrs	r2, r4, #12
   20ef4:	0544      	lsls	r4, r0, #21
   20ef6:	0d64      	lsrs	r4, r4, #21
   20ef8:	401d      	ands	r5, r3
   20efa:	e67c      	b.n	20bf6 <__aeabi_dmul+0xce>
   20efc:	2280      	movs	r2, #128	; 0x80
   20efe:	4659      	mov	r1, fp
   20f00:	0312      	lsls	r2, r2, #12
   20f02:	4211      	tst	r1, r2
   20f04:	d008      	beq.n	20f18 <__aeabi_dmul+0x3f0>
   20f06:	4214      	tst	r4, r2
   20f08:	d106      	bne.n	20f18 <__aeabi_dmul+0x3f0>
   20f0a:	4322      	orrs	r2, r4
   20f0c:	0312      	lsls	r2, r2, #12
   20f0e:	0b12      	lsrs	r2, r2, #12
   20f10:	4645      	mov	r5, r8
   20f12:	4699      	mov	r9, r3
   20f14:	4c43      	ldr	r4, [pc, #268]	; (21024 <__aeabi_dmul+0x4fc>)
   20f16:	e66e      	b.n	20bf6 <__aeabi_dmul+0xce>
   20f18:	465b      	mov	r3, fp
   20f1a:	431a      	orrs	r2, r3
   20f1c:	0312      	lsls	r2, r2, #12
   20f1e:	0b12      	lsrs	r2, r2, #12
   20f20:	4c40      	ldr	r4, [pc, #256]	; (21024 <__aeabi_dmul+0x4fc>)
   20f22:	e668      	b.n	20bf6 <__aeabi_dmul+0xce>
   20f24:	0003      	movs	r3, r0
   20f26:	4654      	mov	r4, sl
   20f28:	3b28      	subs	r3, #40	; 0x28
   20f2a:	409c      	lsls	r4, r3
   20f2c:	2300      	movs	r3, #0
   20f2e:	e6b9      	b.n	20ca4 <__aeabi_dmul+0x17c>
   20f30:	f000 fbfc 	bl	2172c <__clzsi2>
   20f34:	3020      	adds	r0, #32
   20f36:	e6a6      	b.n	20c86 <__aeabi_dmul+0x15e>
   20f38:	0003      	movs	r3, r0
   20f3a:	3b28      	subs	r3, #40	; 0x28
   20f3c:	409f      	lsls	r7, r3
   20f3e:	2300      	movs	r3, #0
   20f40:	46bb      	mov	fp, r7
   20f42:	4699      	mov	r9, r3
   20f44:	e68a      	b.n	20c5c <__aeabi_dmul+0x134>
   20f46:	f000 fbf1 	bl	2172c <__clzsi2>
   20f4a:	3020      	adds	r0, #32
   20f4c:	e674      	b.n	20c38 <__aeabi_dmul+0x110>
   20f4e:	46b4      	mov	ip, r6
   20f50:	e7ad      	b.n	20eae <__aeabi_dmul+0x386>
   20f52:	2501      	movs	r5, #1
   20f54:	1a2a      	subs	r2, r5, r0
   20f56:	2a38      	cmp	r2, #56	; 0x38
   20f58:	dd06      	ble.n	20f68 <__aeabi_dmul+0x440>
   20f5a:	9b01      	ldr	r3, [sp, #4]
   20f5c:	2400      	movs	r4, #0
   20f5e:	401d      	ands	r5, r3
   20f60:	2300      	movs	r3, #0
   20f62:	2200      	movs	r2, #0
   20f64:	4699      	mov	r9, r3
   20f66:	e646      	b.n	20bf6 <__aeabi_dmul+0xce>
   20f68:	2a1f      	cmp	r2, #31
   20f6a:	dc21      	bgt.n	20fb0 <__aeabi_dmul+0x488>
   20f6c:	2520      	movs	r5, #32
   20f6e:	0020      	movs	r0, r4
   20f70:	1aad      	subs	r5, r5, r2
   20f72:	001e      	movs	r6, r3
   20f74:	40ab      	lsls	r3, r5
   20f76:	40a8      	lsls	r0, r5
   20f78:	40d6      	lsrs	r6, r2
   20f7a:	1e5d      	subs	r5, r3, #1
   20f7c:	41ab      	sbcs	r3, r5
   20f7e:	4330      	orrs	r0, r6
   20f80:	4318      	orrs	r0, r3
   20f82:	40d4      	lsrs	r4, r2
   20f84:	0743      	lsls	r3, r0, #29
   20f86:	d009      	beq.n	20f9c <__aeabi_dmul+0x474>
   20f88:	230f      	movs	r3, #15
   20f8a:	4003      	ands	r3, r0
   20f8c:	2b04      	cmp	r3, #4
   20f8e:	d005      	beq.n	20f9c <__aeabi_dmul+0x474>
   20f90:	0003      	movs	r3, r0
   20f92:	1d18      	adds	r0, r3, #4
   20f94:	4298      	cmp	r0, r3
   20f96:	419b      	sbcs	r3, r3
   20f98:	425b      	negs	r3, r3
   20f9a:	18e4      	adds	r4, r4, r3
   20f9c:	0223      	lsls	r3, r4, #8
   20f9e:	d521      	bpl.n	20fe4 <__aeabi_dmul+0x4bc>
   20fa0:	2501      	movs	r5, #1
   20fa2:	9b01      	ldr	r3, [sp, #4]
   20fa4:	2401      	movs	r4, #1
   20fa6:	401d      	ands	r5, r3
   20fa8:	2300      	movs	r3, #0
   20faa:	2200      	movs	r2, #0
   20fac:	4699      	mov	r9, r3
   20fae:	e622      	b.n	20bf6 <__aeabi_dmul+0xce>
   20fb0:	251f      	movs	r5, #31
   20fb2:	0021      	movs	r1, r4
   20fb4:	426d      	negs	r5, r5
   20fb6:	1a28      	subs	r0, r5, r0
   20fb8:	40c1      	lsrs	r1, r0
   20fba:	0008      	movs	r0, r1
   20fbc:	2a20      	cmp	r2, #32
   20fbe:	d01d      	beq.n	20ffc <__aeabi_dmul+0x4d4>
   20fc0:	355f      	adds	r5, #95	; 0x5f
   20fc2:	1aaa      	subs	r2, r5, r2
   20fc4:	4094      	lsls	r4, r2
   20fc6:	4323      	orrs	r3, r4
   20fc8:	1e5c      	subs	r4, r3, #1
   20fca:	41a3      	sbcs	r3, r4
   20fcc:	2507      	movs	r5, #7
   20fce:	4303      	orrs	r3, r0
   20fd0:	401d      	ands	r5, r3
   20fd2:	2200      	movs	r2, #0
   20fd4:	2d00      	cmp	r5, #0
   20fd6:	d009      	beq.n	20fec <__aeabi_dmul+0x4c4>
   20fd8:	220f      	movs	r2, #15
   20fda:	2400      	movs	r4, #0
   20fdc:	401a      	ands	r2, r3
   20fde:	0018      	movs	r0, r3
   20fe0:	2a04      	cmp	r2, #4
   20fe2:	d1d6      	bne.n	20f92 <__aeabi_dmul+0x46a>
   20fe4:	0003      	movs	r3, r0
   20fe6:	0765      	lsls	r5, r4, #29
   20fe8:	0264      	lsls	r4, r4, #9
   20fea:	0b22      	lsrs	r2, r4, #12
   20fec:	08db      	lsrs	r3, r3, #3
   20fee:	432b      	orrs	r3, r5
   20ff0:	2501      	movs	r5, #1
   20ff2:	4699      	mov	r9, r3
   20ff4:	9b01      	ldr	r3, [sp, #4]
   20ff6:	2400      	movs	r4, #0
   20ff8:	401d      	ands	r5, r3
   20ffa:	e5fc      	b.n	20bf6 <__aeabi_dmul+0xce>
   20ffc:	2400      	movs	r4, #0
   20ffe:	e7e2      	b.n	20fc6 <__aeabi_dmul+0x49e>
   21000:	2280      	movs	r2, #128	; 0x80
   21002:	2501      	movs	r5, #1
   21004:	0312      	lsls	r2, r2, #12
   21006:	4322      	orrs	r2, r4
   21008:	9901      	ldr	r1, [sp, #4]
   2100a:	0312      	lsls	r2, r2, #12
   2100c:	0b12      	lsrs	r2, r2, #12
   2100e:	400d      	ands	r5, r1
   21010:	4699      	mov	r9, r3
   21012:	4c04      	ldr	r4, [pc, #16]	; (21024 <__aeabi_dmul+0x4fc>)
   21014:	e5ef      	b.n	20bf6 <__aeabi_dmul+0xce>
   21016:	46c0      	nop			; (mov r8, r8)
   21018:	000003ff 	.word	0x000003ff
   2101c:	feffffff 	.word	0xfeffffff
   21020:	000007fe 	.word	0x000007fe
   21024:	000007ff 	.word	0x000007ff

00021028 <__aeabi_dsub>:
   21028:	b5f0      	push	{r4, r5, r6, r7, lr}
   2102a:	4646      	mov	r6, r8
   2102c:	46d6      	mov	lr, sl
   2102e:	464f      	mov	r7, r9
   21030:	030c      	lsls	r4, r1, #12
   21032:	b5c0      	push	{r6, r7, lr}
   21034:	0fcd      	lsrs	r5, r1, #31
   21036:	004e      	lsls	r6, r1, #1
   21038:	0a61      	lsrs	r1, r4, #9
   2103a:	0f44      	lsrs	r4, r0, #29
   2103c:	430c      	orrs	r4, r1
   2103e:	00c1      	lsls	r1, r0, #3
   21040:	0058      	lsls	r0, r3, #1
   21042:	0d40      	lsrs	r0, r0, #21
   21044:	4684      	mov	ip, r0
   21046:	468a      	mov	sl, r1
   21048:	000f      	movs	r7, r1
   2104a:	0319      	lsls	r1, r3, #12
   2104c:	0f50      	lsrs	r0, r2, #29
   2104e:	0a49      	lsrs	r1, r1, #9
   21050:	4301      	orrs	r1, r0
   21052:	48c6      	ldr	r0, [pc, #792]	; (2136c <__aeabi_dsub+0x344>)
   21054:	0d76      	lsrs	r6, r6, #21
   21056:	46a8      	mov	r8, r5
   21058:	0fdb      	lsrs	r3, r3, #31
   2105a:	00d2      	lsls	r2, r2, #3
   2105c:	4584      	cmp	ip, r0
   2105e:	d100      	bne.n	21062 <__aeabi_dsub+0x3a>
   21060:	e0d8      	b.n	21214 <__aeabi_dsub+0x1ec>
   21062:	2001      	movs	r0, #1
   21064:	4043      	eors	r3, r0
   21066:	42ab      	cmp	r3, r5
   21068:	d100      	bne.n	2106c <__aeabi_dsub+0x44>
   2106a:	e0a6      	b.n	211ba <__aeabi_dsub+0x192>
   2106c:	4660      	mov	r0, ip
   2106e:	1a35      	subs	r5, r6, r0
   21070:	2d00      	cmp	r5, #0
   21072:	dc00      	bgt.n	21076 <__aeabi_dsub+0x4e>
   21074:	e105      	b.n	21282 <__aeabi_dsub+0x25a>
   21076:	2800      	cmp	r0, #0
   21078:	d110      	bne.n	2109c <__aeabi_dsub+0x74>
   2107a:	000b      	movs	r3, r1
   2107c:	4313      	orrs	r3, r2
   2107e:	d100      	bne.n	21082 <__aeabi_dsub+0x5a>
   21080:	e0d7      	b.n	21232 <__aeabi_dsub+0x20a>
   21082:	1e6b      	subs	r3, r5, #1
   21084:	2b00      	cmp	r3, #0
   21086:	d000      	beq.n	2108a <__aeabi_dsub+0x62>
   21088:	e14b      	b.n	21322 <__aeabi_dsub+0x2fa>
   2108a:	4653      	mov	r3, sl
   2108c:	1a9f      	subs	r7, r3, r2
   2108e:	45ba      	cmp	sl, r7
   21090:	4180      	sbcs	r0, r0
   21092:	1a64      	subs	r4, r4, r1
   21094:	4240      	negs	r0, r0
   21096:	1a24      	subs	r4, r4, r0
   21098:	2601      	movs	r6, #1
   2109a:	e01e      	b.n	210da <__aeabi_dsub+0xb2>
   2109c:	4bb3      	ldr	r3, [pc, #716]	; (2136c <__aeabi_dsub+0x344>)
   2109e:	429e      	cmp	r6, r3
   210a0:	d048      	beq.n	21134 <__aeabi_dsub+0x10c>
   210a2:	2380      	movs	r3, #128	; 0x80
   210a4:	041b      	lsls	r3, r3, #16
   210a6:	4319      	orrs	r1, r3
   210a8:	2d38      	cmp	r5, #56	; 0x38
   210aa:	dd00      	ble.n	210ae <__aeabi_dsub+0x86>
   210ac:	e119      	b.n	212e2 <__aeabi_dsub+0x2ba>
   210ae:	2d1f      	cmp	r5, #31
   210b0:	dd00      	ble.n	210b4 <__aeabi_dsub+0x8c>
   210b2:	e14c      	b.n	2134e <__aeabi_dsub+0x326>
   210b4:	2320      	movs	r3, #32
   210b6:	000f      	movs	r7, r1
   210b8:	1b5b      	subs	r3, r3, r5
   210ba:	0010      	movs	r0, r2
   210bc:	409a      	lsls	r2, r3
   210be:	409f      	lsls	r7, r3
   210c0:	40e8      	lsrs	r0, r5
   210c2:	1e53      	subs	r3, r2, #1
   210c4:	419a      	sbcs	r2, r3
   210c6:	40e9      	lsrs	r1, r5
   210c8:	4307      	orrs	r7, r0
   210ca:	4317      	orrs	r7, r2
   210cc:	4653      	mov	r3, sl
   210ce:	1bdf      	subs	r7, r3, r7
   210d0:	1a61      	subs	r1, r4, r1
   210d2:	45ba      	cmp	sl, r7
   210d4:	41a4      	sbcs	r4, r4
   210d6:	4264      	negs	r4, r4
   210d8:	1b0c      	subs	r4, r1, r4
   210da:	0223      	lsls	r3, r4, #8
   210dc:	d400      	bmi.n	210e0 <__aeabi_dsub+0xb8>
   210de:	e0c5      	b.n	2126c <__aeabi_dsub+0x244>
   210e0:	0264      	lsls	r4, r4, #9
   210e2:	0a65      	lsrs	r5, r4, #9
   210e4:	2d00      	cmp	r5, #0
   210e6:	d100      	bne.n	210ea <__aeabi_dsub+0xc2>
   210e8:	e0f6      	b.n	212d8 <__aeabi_dsub+0x2b0>
   210ea:	0028      	movs	r0, r5
   210ec:	f000 fb1e 	bl	2172c <__clzsi2>
   210f0:	0003      	movs	r3, r0
   210f2:	3b08      	subs	r3, #8
   210f4:	2b1f      	cmp	r3, #31
   210f6:	dd00      	ble.n	210fa <__aeabi_dsub+0xd2>
   210f8:	e0e9      	b.n	212ce <__aeabi_dsub+0x2a6>
   210fa:	2220      	movs	r2, #32
   210fc:	003c      	movs	r4, r7
   210fe:	1ad2      	subs	r2, r2, r3
   21100:	409d      	lsls	r5, r3
   21102:	40d4      	lsrs	r4, r2
   21104:	409f      	lsls	r7, r3
   21106:	4325      	orrs	r5, r4
   21108:	429e      	cmp	r6, r3
   2110a:	dd00      	ble.n	2110e <__aeabi_dsub+0xe6>
   2110c:	e0db      	b.n	212c6 <__aeabi_dsub+0x29e>
   2110e:	1b9e      	subs	r6, r3, r6
   21110:	1c73      	adds	r3, r6, #1
   21112:	2b1f      	cmp	r3, #31
   21114:	dd00      	ble.n	21118 <__aeabi_dsub+0xf0>
   21116:	e10a      	b.n	2132e <__aeabi_dsub+0x306>
   21118:	2220      	movs	r2, #32
   2111a:	0038      	movs	r0, r7
   2111c:	1ad2      	subs	r2, r2, r3
   2111e:	0029      	movs	r1, r5
   21120:	4097      	lsls	r7, r2
   21122:	002c      	movs	r4, r5
   21124:	4091      	lsls	r1, r2
   21126:	40d8      	lsrs	r0, r3
   21128:	1e7a      	subs	r2, r7, #1
   2112a:	4197      	sbcs	r7, r2
   2112c:	40dc      	lsrs	r4, r3
   2112e:	2600      	movs	r6, #0
   21130:	4301      	orrs	r1, r0
   21132:	430f      	orrs	r7, r1
   21134:	077b      	lsls	r3, r7, #29
   21136:	d009      	beq.n	2114c <__aeabi_dsub+0x124>
   21138:	230f      	movs	r3, #15
   2113a:	403b      	ands	r3, r7
   2113c:	2b04      	cmp	r3, #4
   2113e:	d005      	beq.n	2114c <__aeabi_dsub+0x124>
   21140:	1d3b      	adds	r3, r7, #4
   21142:	42bb      	cmp	r3, r7
   21144:	41bf      	sbcs	r7, r7
   21146:	427f      	negs	r7, r7
   21148:	19e4      	adds	r4, r4, r7
   2114a:	001f      	movs	r7, r3
   2114c:	0223      	lsls	r3, r4, #8
   2114e:	d525      	bpl.n	2119c <__aeabi_dsub+0x174>
   21150:	4b86      	ldr	r3, [pc, #536]	; (2136c <__aeabi_dsub+0x344>)
   21152:	3601      	adds	r6, #1
   21154:	429e      	cmp	r6, r3
   21156:	d100      	bne.n	2115a <__aeabi_dsub+0x132>
   21158:	e0af      	b.n	212ba <__aeabi_dsub+0x292>
   2115a:	4b85      	ldr	r3, [pc, #532]	; (21370 <__aeabi_dsub+0x348>)
   2115c:	2501      	movs	r5, #1
   2115e:	401c      	ands	r4, r3
   21160:	4643      	mov	r3, r8
   21162:	0762      	lsls	r2, r4, #29
   21164:	08ff      	lsrs	r7, r7, #3
   21166:	0264      	lsls	r4, r4, #9
   21168:	0576      	lsls	r6, r6, #21
   2116a:	4317      	orrs	r7, r2
   2116c:	0b24      	lsrs	r4, r4, #12
   2116e:	0d76      	lsrs	r6, r6, #21
   21170:	401d      	ands	r5, r3
   21172:	2100      	movs	r1, #0
   21174:	0324      	lsls	r4, r4, #12
   21176:	0b23      	lsrs	r3, r4, #12
   21178:	0d0c      	lsrs	r4, r1, #20
   2117a:	4a7e      	ldr	r2, [pc, #504]	; (21374 <__aeabi_dsub+0x34c>)
   2117c:	0524      	lsls	r4, r4, #20
   2117e:	431c      	orrs	r4, r3
   21180:	4014      	ands	r4, r2
   21182:	0533      	lsls	r3, r6, #20
   21184:	4323      	orrs	r3, r4
   21186:	005b      	lsls	r3, r3, #1
   21188:	07ed      	lsls	r5, r5, #31
   2118a:	085b      	lsrs	r3, r3, #1
   2118c:	432b      	orrs	r3, r5
   2118e:	0038      	movs	r0, r7
   21190:	0019      	movs	r1, r3
   21192:	bc1c      	pop	{r2, r3, r4}
   21194:	4690      	mov	r8, r2
   21196:	4699      	mov	r9, r3
   21198:	46a2      	mov	sl, r4
   2119a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   2119c:	2501      	movs	r5, #1
   2119e:	4643      	mov	r3, r8
   211a0:	0762      	lsls	r2, r4, #29
   211a2:	08ff      	lsrs	r7, r7, #3
   211a4:	4317      	orrs	r7, r2
   211a6:	08e4      	lsrs	r4, r4, #3
   211a8:	401d      	ands	r5, r3
   211aa:	4b70      	ldr	r3, [pc, #448]	; (2136c <__aeabi_dsub+0x344>)
   211ac:	429e      	cmp	r6, r3
   211ae:	d036      	beq.n	2121e <__aeabi_dsub+0x1f6>
   211b0:	0324      	lsls	r4, r4, #12
   211b2:	0576      	lsls	r6, r6, #21
   211b4:	0b24      	lsrs	r4, r4, #12
   211b6:	0d76      	lsrs	r6, r6, #21
   211b8:	e7db      	b.n	21172 <__aeabi_dsub+0x14a>
   211ba:	4663      	mov	r3, ip
   211bc:	1af3      	subs	r3, r6, r3
   211be:	2b00      	cmp	r3, #0
   211c0:	dc00      	bgt.n	211c4 <__aeabi_dsub+0x19c>
   211c2:	e094      	b.n	212ee <__aeabi_dsub+0x2c6>
   211c4:	4660      	mov	r0, ip
   211c6:	2800      	cmp	r0, #0
   211c8:	d035      	beq.n	21236 <__aeabi_dsub+0x20e>
   211ca:	4868      	ldr	r0, [pc, #416]	; (2136c <__aeabi_dsub+0x344>)
   211cc:	4286      	cmp	r6, r0
   211ce:	d0b1      	beq.n	21134 <__aeabi_dsub+0x10c>
   211d0:	2780      	movs	r7, #128	; 0x80
   211d2:	043f      	lsls	r7, r7, #16
   211d4:	4339      	orrs	r1, r7
   211d6:	2b38      	cmp	r3, #56	; 0x38
   211d8:	dc00      	bgt.n	211dc <__aeabi_dsub+0x1b4>
   211da:	e0fd      	b.n	213d8 <__aeabi_dsub+0x3b0>
   211dc:	430a      	orrs	r2, r1
   211de:	0017      	movs	r7, r2
   211e0:	2100      	movs	r1, #0
   211e2:	1e7a      	subs	r2, r7, #1
   211e4:	4197      	sbcs	r7, r2
   211e6:	4457      	add	r7, sl
   211e8:	4557      	cmp	r7, sl
   211ea:	4180      	sbcs	r0, r0
   211ec:	1909      	adds	r1, r1, r4
   211ee:	4244      	negs	r4, r0
   211f0:	190c      	adds	r4, r1, r4
   211f2:	0223      	lsls	r3, r4, #8
   211f4:	d53a      	bpl.n	2126c <__aeabi_dsub+0x244>
   211f6:	4b5d      	ldr	r3, [pc, #372]	; (2136c <__aeabi_dsub+0x344>)
   211f8:	3601      	adds	r6, #1
   211fa:	429e      	cmp	r6, r3
   211fc:	d100      	bne.n	21200 <__aeabi_dsub+0x1d8>
   211fe:	e14b      	b.n	21498 <__aeabi_dsub+0x470>
   21200:	2201      	movs	r2, #1
   21202:	4b5b      	ldr	r3, [pc, #364]	; (21370 <__aeabi_dsub+0x348>)
   21204:	401c      	ands	r4, r3
   21206:	087b      	lsrs	r3, r7, #1
   21208:	4017      	ands	r7, r2
   2120a:	431f      	orrs	r7, r3
   2120c:	07e2      	lsls	r2, r4, #31
   2120e:	4317      	orrs	r7, r2
   21210:	0864      	lsrs	r4, r4, #1
   21212:	e78f      	b.n	21134 <__aeabi_dsub+0x10c>
   21214:	0008      	movs	r0, r1
   21216:	4310      	orrs	r0, r2
   21218:	d000      	beq.n	2121c <__aeabi_dsub+0x1f4>
   2121a:	e724      	b.n	21066 <__aeabi_dsub+0x3e>
   2121c:	e721      	b.n	21062 <__aeabi_dsub+0x3a>
   2121e:	0023      	movs	r3, r4
   21220:	433b      	orrs	r3, r7
   21222:	d100      	bne.n	21226 <__aeabi_dsub+0x1fe>
   21224:	e1b9      	b.n	2159a <__aeabi_dsub+0x572>
   21226:	2280      	movs	r2, #128	; 0x80
   21228:	0312      	lsls	r2, r2, #12
   2122a:	4314      	orrs	r4, r2
   2122c:	0324      	lsls	r4, r4, #12
   2122e:	0b24      	lsrs	r4, r4, #12
   21230:	e79f      	b.n	21172 <__aeabi_dsub+0x14a>
   21232:	002e      	movs	r6, r5
   21234:	e77e      	b.n	21134 <__aeabi_dsub+0x10c>
   21236:	0008      	movs	r0, r1
   21238:	4310      	orrs	r0, r2
   2123a:	d100      	bne.n	2123e <__aeabi_dsub+0x216>
   2123c:	e0ca      	b.n	213d4 <__aeabi_dsub+0x3ac>
   2123e:	1e58      	subs	r0, r3, #1
   21240:	4684      	mov	ip, r0
   21242:	2800      	cmp	r0, #0
   21244:	d000      	beq.n	21248 <__aeabi_dsub+0x220>
   21246:	e0e7      	b.n	21418 <__aeabi_dsub+0x3f0>
   21248:	4452      	add	r2, sl
   2124a:	4552      	cmp	r2, sl
   2124c:	4180      	sbcs	r0, r0
   2124e:	1864      	adds	r4, r4, r1
   21250:	4240      	negs	r0, r0
   21252:	1824      	adds	r4, r4, r0
   21254:	0017      	movs	r7, r2
   21256:	2601      	movs	r6, #1
   21258:	0223      	lsls	r3, r4, #8
   2125a:	d507      	bpl.n	2126c <__aeabi_dsub+0x244>
   2125c:	2602      	movs	r6, #2
   2125e:	e7cf      	b.n	21200 <__aeabi_dsub+0x1d8>
   21260:	4664      	mov	r4, ip
   21262:	432c      	orrs	r4, r5
   21264:	d100      	bne.n	21268 <__aeabi_dsub+0x240>
   21266:	e1b3      	b.n	215d0 <__aeabi_dsub+0x5a8>
   21268:	002c      	movs	r4, r5
   2126a:	4667      	mov	r7, ip
   2126c:	077b      	lsls	r3, r7, #29
   2126e:	d000      	beq.n	21272 <__aeabi_dsub+0x24a>
   21270:	e762      	b.n	21138 <__aeabi_dsub+0x110>
   21272:	0763      	lsls	r3, r4, #29
   21274:	08ff      	lsrs	r7, r7, #3
   21276:	431f      	orrs	r7, r3
   21278:	2501      	movs	r5, #1
   2127a:	4643      	mov	r3, r8
   2127c:	08e4      	lsrs	r4, r4, #3
   2127e:	401d      	ands	r5, r3
   21280:	e793      	b.n	211aa <__aeabi_dsub+0x182>
   21282:	2d00      	cmp	r5, #0
   21284:	d178      	bne.n	21378 <__aeabi_dsub+0x350>
   21286:	1c75      	adds	r5, r6, #1
   21288:	056d      	lsls	r5, r5, #21
   2128a:	0d6d      	lsrs	r5, r5, #21
   2128c:	2d01      	cmp	r5, #1
   2128e:	dc00      	bgt.n	21292 <__aeabi_dsub+0x26a>
   21290:	e0f2      	b.n	21478 <__aeabi_dsub+0x450>
   21292:	4650      	mov	r0, sl
   21294:	1a80      	subs	r0, r0, r2
   21296:	4582      	cmp	sl, r0
   21298:	41bf      	sbcs	r7, r7
   2129a:	1a65      	subs	r5, r4, r1
   2129c:	427f      	negs	r7, r7
   2129e:	1bed      	subs	r5, r5, r7
   212a0:	4684      	mov	ip, r0
   212a2:	0228      	lsls	r0, r5, #8
   212a4:	d400      	bmi.n	212a8 <__aeabi_dsub+0x280>
   212a6:	e08c      	b.n	213c2 <__aeabi_dsub+0x39a>
   212a8:	4650      	mov	r0, sl
   212aa:	1a17      	subs	r7, r2, r0
   212ac:	42ba      	cmp	r2, r7
   212ae:	4192      	sbcs	r2, r2
   212b0:	1b0c      	subs	r4, r1, r4
   212b2:	4255      	negs	r5, r2
   212b4:	1b65      	subs	r5, r4, r5
   212b6:	4698      	mov	r8, r3
   212b8:	e714      	b.n	210e4 <__aeabi_dsub+0xbc>
   212ba:	2501      	movs	r5, #1
   212bc:	4643      	mov	r3, r8
   212be:	2400      	movs	r4, #0
   212c0:	401d      	ands	r5, r3
   212c2:	2700      	movs	r7, #0
   212c4:	e755      	b.n	21172 <__aeabi_dsub+0x14a>
   212c6:	4c2a      	ldr	r4, [pc, #168]	; (21370 <__aeabi_dsub+0x348>)
   212c8:	1af6      	subs	r6, r6, r3
   212ca:	402c      	ands	r4, r5
   212cc:	e732      	b.n	21134 <__aeabi_dsub+0x10c>
   212ce:	003d      	movs	r5, r7
   212d0:	3828      	subs	r0, #40	; 0x28
   212d2:	4085      	lsls	r5, r0
   212d4:	2700      	movs	r7, #0
   212d6:	e717      	b.n	21108 <__aeabi_dsub+0xe0>
   212d8:	0038      	movs	r0, r7
   212da:	f000 fa27 	bl	2172c <__clzsi2>
   212de:	3020      	adds	r0, #32
   212e0:	e706      	b.n	210f0 <__aeabi_dsub+0xc8>
   212e2:	430a      	orrs	r2, r1
   212e4:	0017      	movs	r7, r2
   212e6:	2100      	movs	r1, #0
   212e8:	1e7a      	subs	r2, r7, #1
   212ea:	4197      	sbcs	r7, r2
   212ec:	e6ee      	b.n	210cc <__aeabi_dsub+0xa4>
   212ee:	2b00      	cmp	r3, #0
   212f0:	d000      	beq.n	212f4 <__aeabi_dsub+0x2cc>
   212f2:	e0e5      	b.n	214c0 <__aeabi_dsub+0x498>
   212f4:	1c73      	adds	r3, r6, #1
   212f6:	469c      	mov	ip, r3
   212f8:	055b      	lsls	r3, r3, #21
   212fa:	0d5b      	lsrs	r3, r3, #21
   212fc:	2b01      	cmp	r3, #1
   212fe:	dc00      	bgt.n	21302 <__aeabi_dsub+0x2da>
   21300:	e09f      	b.n	21442 <__aeabi_dsub+0x41a>
   21302:	4b1a      	ldr	r3, [pc, #104]	; (2136c <__aeabi_dsub+0x344>)
   21304:	459c      	cmp	ip, r3
   21306:	d100      	bne.n	2130a <__aeabi_dsub+0x2e2>
   21308:	e0c5      	b.n	21496 <__aeabi_dsub+0x46e>
   2130a:	4452      	add	r2, sl
   2130c:	4552      	cmp	r2, sl
   2130e:	4180      	sbcs	r0, r0
   21310:	1864      	adds	r4, r4, r1
   21312:	4240      	negs	r0, r0
   21314:	1824      	adds	r4, r4, r0
   21316:	07e7      	lsls	r7, r4, #31
   21318:	0852      	lsrs	r2, r2, #1
   2131a:	4317      	orrs	r7, r2
   2131c:	0864      	lsrs	r4, r4, #1
   2131e:	4666      	mov	r6, ip
   21320:	e708      	b.n	21134 <__aeabi_dsub+0x10c>
   21322:	4812      	ldr	r0, [pc, #72]	; (2136c <__aeabi_dsub+0x344>)
   21324:	4285      	cmp	r5, r0
   21326:	d100      	bne.n	2132a <__aeabi_dsub+0x302>
   21328:	e085      	b.n	21436 <__aeabi_dsub+0x40e>
   2132a:	001d      	movs	r5, r3
   2132c:	e6bc      	b.n	210a8 <__aeabi_dsub+0x80>
   2132e:	0029      	movs	r1, r5
   21330:	3e1f      	subs	r6, #31
   21332:	40f1      	lsrs	r1, r6
   21334:	2b20      	cmp	r3, #32
   21336:	d100      	bne.n	2133a <__aeabi_dsub+0x312>
   21338:	e07f      	b.n	2143a <__aeabi_dsub+0x412>
   2133a:	2240      	movs	r2, #64	; 0x40
   2133c:	1ad3      	subs	r3, r2, r3
   2133e:	409d      	lsls	r5, r3
   21340:	432f      	orrs	r7, r5
   21342:	1e7d      	subs	r5, r7, #1
   21344:	41af      	sbcs	r7, r5
   21346:	2400      	movs	r4, #0
   21348:	430f      	orrs	r7, r1
   2134a:	2600      	movs	r6, #0
   2134c:	e78e      	b.n	2126c <__aeabi_dsub+0x244>
   2134e:	002b      	movs	r3, r5
   21350:	000f      	movs	r7, r1
   21352:	3b20      	subs	r3, #32
   21354:	40df      	lsrs	r7, r3
   21356:	2d20      	cmp	r5, #32
   21358:	d071      	beq.n	2143e <__aeabi_dsub+0x416>
   2135a:	2340      	movs	r3, #64	; 0x40
   2135c:	1b5d      	subs	r5, r3, r5
   2135e:	40a9      	lsls	r1, r5
   21360:	430a      	orrs	r2, r1
   21362:	1e51      	subs	r1, r2, #1
   21364:	418a      	sbcs	r2, r1
   21366:	2100      	movs	r1, #0
   21368:	4317      	orrs	r7, r2
   2136a:	e6af      	b.n	210cc <__aeabi_dsub+0xa4>
   2136c:	000007ff 	.word	0x000007ff
   21370:	ff7fffff 	.word	0xff7fffff
   21374:	800fffff 	.word	0x800fffff
   21378:	2e00      	cmp	r6, #0
   2137a:	d03e      	beq.n	213fa <__aeabi_dsub+0x3d2>
   2137c:	4eb3      	ldr	r6, [pc, #716]	; (2164c <__aeabi_dsub+0x624>)
   2137e:	45b4      	cmp	ip, r6
   21380:	d045      	beq.n	2140e <__aeabi_dsub+0x3e6>
   21382:	2680      	movs	r6, #128	; 0x80
   21384:	0436      	lsls	r6, r6, #16
   21386:	426d      	negs	r5, r5
   21388:	4334      	orrs	r4, r6
   2138a:	2d38      	cmp	r5, #56	; 0x38
   2138c:	dd00      	ble.n	21390 <__aeabi_dsub+0x368>
   2138e:	e0a8      	b.n	214e2 <__aeabi_dsub+0x4ba>
   21390:	2d1f      	cmp	r5, #31
   21392:	dd00      	ble.n	21396 <__aeabi_dsub+0x36e>
   21394:	e11f      	b.n	215d6 <__aeabi_dsub+0x5ae>
   21396:	2620      	movs	r6, #32
   21398:	0027      	movs	r7, r4
   2139a:	4650      	mov	r0, sl
   2139c:	1b76      	subs	r6, r6, r5
   2139e:	40b7      	lsls	r7, r6
   213a0:	40e8      	lsrs	r0, r5
   213a2:	4307      	orrs	r7, r0
   213a4:	4650      	mov	r0, sl
   213a6:	40b0      	lsls	r0, r6
   213a8:	1e46      	subs	r6, r0, #1
   213aa:	41b0      	sbcs	r0, r6
   213ac:	40ec      	lsrs	r4, r5
   213ae:	4338      	orrs	r0, r7
   213b0:	1a17      	subs	r7, r2, r0
   213b2:	42ba      	cmp	r2, r7
   213b4:	4192      	sbcs	r2, r2
   213b6:	1b0c      	subs	r4, r1, r4
   213b8:	4252      	negs	r2, r2
   213ba:	1aa4      	subs	r4, r4, r2
   213bc:	4666      	mov	r6, ip
   213be:	4698      	mov	r8, r3
   213c0:	e68b      	b.n	210da <__aeabi_dsub+0xb2>
   213c2:	4664      	mov	r4, ip
   213c4:	4667      	mov	r7, ip
   213c6:	432c      	orrs	r4, r5
   213c8:	d000      	beq.n	213cc <__aeabi_dsub+0x3a4>
   213ca:	e68b      	b.n	210e4 <__aeabi_dsub+0xbc>
   213cc:	2500      	movs	r5, #0
   213ce:	2600      	movs	r6, #0
   213d0:	2700      	movs	r7, #0
   213d2:	e6ea      	b.n	211aa <__aeabi_dsub+0x182>
   213d4:	001e      	movs	r6, r3
   213d6:	e6ad      	b.n	21134 <__aeabi_dsub+0x10c>
   213d8:	2b1f      	cmp	r3, #31
   213da:	dc60      	bgt.n	2149e <__aeabi_dsub+0x476>
   213dc:	2720      	movs	r7, #32
   213de:	1af8      	subs	r0, r7, r3
   213e0:	000f      	movs	r7, r1
   213e2:	4684      	mov	ip, r0
   213e4:	4087      	lsls	r7, r0
   213e6:	0010      	movs	r0, r2
   213e8:	40d8      	lsrs	r0, r3
   213ea:	4307      	orrs	r7, r0
   213ec:	4660      	mov	r0, ip
   213ee:	4082      	lsls	r2, r0
   213f0:	1e50      	subs	r0, r2, #1
   213f2:	4182      	sbcs	r2, r0
   213f4:	40d9      	lsrs	r1, r3
   213f6:	4317      	orrs	r7, r2
   213f8:	e6f5      	b.n	211e6 <__aeabi_dsub+0x1be>
   213fa:	0026      	movs	r6, r4
   213fc:	4650      	mov	r0, sl
   213fe:	4306      	orrs	r6, r0
   21400:	d005      	beq.n	2140e <__aeabi_dsub+0x3e6>
   21402:	43ed      	mvns	r5, r5
   21404:	2d00      	cmp	r5, #0
   21406:	d0d3      	beq.n	213b0 <__aeabi_dsub+0x388>
   21408:	4e90      	ldr	r6, [pc, #576]	; (2164c <__aeabi_dsub+0x624>)
   2140a:	45b4      	cmp	ip, r6
   2140c:	d1bd      	bne.n	2138a <__aeabi_dsub+0x362>
   2140e:	000c      	movs	r4, r1
   21410:	0017      	movs	r7, r2
   21412:	4666      	mov	r6, ip
   21414:	4698      	mov	r8, r3
   21416:	e68d      	b.n	21134 <__aeabi_dsub+0x10c>
   21418:	488c      	ldr	r0, [pc, #560]	; (2164c <__aeabi_dsub+0x624>)
   2141a:	4283      	cmp	r3, r0
   2141c:	d00b      	beq.n	21436 <__aeabi_dsub+0x40e>
   2141e:	4663      	mov	r3, ip
   21420:	e6d9      	b.n	211d6 <__aeabi_dsub+0x1ae>
   21422:	2d00      	cmp	r5, #0
   21424:	d000      	beq.n	21428 <__aeabi_dsub+0x400>
   21426:	e096      	b.n	21556 <__aeabi_dsub+0x52e>
   21428:	0008      	movs	r0, r1
   2142a:	4310      	orrs	r0, r2
   2142c:	d100      	bne.n	21430 <__aeabi_dsub+0x408>
   2142e:	e0e2      	b.n	215f6 <__aeabi_dsub+0x5ce>
   21430:	000c      	movs	r4, r1
   21432:	0017      	movs	r7, r2
   21434:	4698      	mov	r8, r3
   21436:	4e85      	ldr	r6, [pc, #532]	; (2164c <__aeabi_dsub+0x624>)
   21438:	e67c      	b.n	21134 <__aeabi_dsub+0x10c>
   2143a:	2500      	movs	r5, #0
   2143c:	e780      	b.n	21340 <__aeabi_dsub+0x318>
   2143e:	2100      	movs	r1, #0
   21440:	e78e      	b.n	21360 <__aeabi_dsub+0x338>
   21442:	0023      	movs	r3, r4
   21444:	4650      	mov	r0, sl
   21446:	4303      	orrs	r3, r0
   21448:	2e00      	cmp	r6, #0
   2144a:	d000      	beq.n	2144e <__aeabi_dsub+0x426>
   2144c:	e0a8      	b.n	215a0 <__aeabi_dsub+0x578>
   2144e:	2b00      	cmp	r3, #0
   21450:	d100      	bne.n	21454 <__aeabi_dsub+0x42c>
   21452:	e0de      	b.n	21612 <__aeabi_dsub+0x5ea>
   21454:	000b      	movs	r3, r1
   21456:	4313      	orrs	r3, r2
   21458:	d100      	bne.n	2145c <__aeabi_dsub+0x434>
   2145a:	e66b      	b.n	21134 <__aeabi_dsub+0x10c>
   2145c:	4452      	add	r2, sl
   2145e:	4552      	cmp	r2, sl
   21460:	4180      	sbcs	r0, r0
   21462:	1864      	adds	r4, r4, r1
   21464:	4240      	negs	r0, r0
   21466:	1824      	adds	r4, r4, r0
   21468:	0017      	movs	r7, r2
   2146a:	0223      	lsls	r3, r4, #8
   2146c:	d400      	bmi.n	21470 <__aeabi_dsub+0x448>
   2146e:	e6fd      	b.n	2126c <__aeabi_dsub+0x244>
   21470:	4b77      	ldr	r3, [pc, #476]	; (21650 <__aeabi_dsub+0x628>)
   21472:	4666      	mov	r6, ip
   21474:	401c      	ands	r4, r3
   21476:	e65d      	b.n	21134 <__aeabi_dsub+0x10c>
   21478:	0025      	movs	r5, r4
   2147a:	4650      	mov	r0, sl
   2147c:	4305      	orrs	r5, r0
   2147e:	2e00      	cmp	r6, #0
   21480:	d1cf      	bne.n	21422 <__aeabi_dsub+0x3fa>
   21482:	2d00      	cmp	r5, #0
   21484:	d14f      	bne.n	21526 <__aeabi_dsub+0x4fe>
   21486:	000c      	movs	r4, r1
   21488:	4314      	orrs	r4, r2
   2148a:	d100      	bne.n	2148e <__aeabi_dsub+0x466>
   2148c:	e0a0      	b.n	215d0 <__aeabi_dsub+0x5a8>
   2148e:	000c      	movs	r4, r1
   21490:	0017      	movs	r7, r2
   21492:	4698      	mov	r8, r3
   21494:	e64e      	b.n	21134 <__aeabi_dsub+0x10c>
   21496:	4666      	mov	r6, ip
   21498:	2400      	movs	r4, #0
   2149a:	2700      	movs	r7, #0
   2149c:	e685      	b.n	211aa <__aeabi_dsub+0x182>
   2149e:	001f      	movs	r7, r3
   214a0:	0008      	movs	r0, r1
   214a2:	3f20      	subs	r7, #32
   214a4:	40f8      	lsrs	r0, r7
   214a6:	0007      	movs	r7, r0
   214a8:	2b20      	cmp	r3, #32
   214aa:	d100      	bne.n	214ae <__aeabi_dsub+0x486>
   214ac:	e08e      	b.n	215cc <__aeabi_dsub+0x5a4>
   214ae:	2040      	movs	r0, #64	; 0x40
   214b0:	1ac3      	subs	r3, r0, r3
   214b2:	4099      	lsls	r1, r3
   214b4:	430a      	orrs	r2, r1
   214b6:	1e51      	subs	r1, r2, #1
   214b8:	418a      	sbcs	r2, r1
   214ba:	2100      	movs	r1, #0
   214bc:	4317      	orrs	r7, r2
   214be:	e692      	b.n	211e6 <__aeabi_dsub+0x1be>
   214c0:	2e00      	cmp	r6, #0
   214c2:	d114      	bne.n	214ee <__aeabi_dsub+0x4c6>
   214c4:	0026      	movs	r6, r4
   214c6:	4650      	mov	r0, sl
   214c8:	4306      	orrs	r6, r0
   214ca:	d062      	beq.n	21592 <__aeabi_dsub+0x56a>
   214cc:	43db      	mvns	r3, r3
   214ce:	2b00      	cmp	r3, #0
   214d0:	d15c      	bne.n	2158c <__aeabi_dsub+0x564>
   214d2:	1887      	adds	r7, r0, r2
   214d4:	4297      	cmp	r7, r2
   214d6:	4192      	sbcs	r2, r2
   214d8:	1864      	adds	r4, r4, r1
   214da:	4252      	negs	r2, r2
   214dc:	18a4      	adds	r4, r4, r2
   214de:	4666      	mov	r6, ip
   214e0:	e687      	b.n	211f2 <__aeabi_dsub+0x1ca>
   214e2:	4650      	mov	r0, sl
   214e4:	4320      	orrs	r0, r4
   214e6:	1e44      	subs	r4, r0, #1
   214e8:	41a0      	sbcs	r0, r4
   214ea:	2400      	movs	r4, #0
   214ec:	e760      	b.n	213b0 <__aeabi_dsub+0x388>
   214ee:	4e57      	ldr	r6, [pc, #348]	; (2164c <__aeabi_dsub+0x624>)
   214f0:	45b4      	cmp	ip, r6
   214f2:	d04e      	beq.n	21592 <__aeabi_dsub+0x56a>
   214f4:	2680      	movs	r6, #128	; 0x80
   214f6:	0436      	lsls	r6, r6, #16
   214f8:	425b      	negs	r3, r3
   214fa:	4334      	orrs	r4, r6
   214fc:	2b38      	cmp	r3, #56	; 0x38
   214fe:	dd00      	ble.n	21502 <__aeabi_dsub+0x4da>
   21500:	e07f      	b.n	21602 <__aeabi_dsub+0x5da>
   21502:	2b1f      	cmp	r3, #31
   21504:	dd00      	ble.n	21508 <__aeabi_dsub+0x4e0>
   21506:	e08b      	b.n	21620 <__aeabi_dsub+0x5f8>
   21508:	2620      	movs	r6, #32
   2150a:	0027      	movs	r7, r4
   2150c:	4650      	mov	r0, sl
   2150e:	1af6      	subs	r6, r6, r3
   21510:	40b7      	lsls	r7, r6
   21512:	40d8      	lsrs	r0, r3
   21514:	4307      	orrs	r7, r0
   21516:	4650      	mov	r0, sl
   21518:	40b0      	lsls	r0, r6
   2151a:	1e46      	subs	r6, r0, #1
   2151c:	41b0      	sbcs	r0, r6
   2151e:	4307      	orrs	r7, r0
   21520:	40dc      	lsrs	r4, r3
   21522:	18bf      	adds	r7, r7, r2
   21524:	e7d6      	b.n	214d4 <__aeabi_dsub+0x4ac>
   21526:	000d      	movs	r5, r1
   21528:	4315      	orrs	r5, r2
   2152a:	d100      	bne.n	2152e <__aeabi_dsub+0x506>
   2152c:	e602      	b.n	21134 <__aeabi_dsub+0x10c>
   2152e:	4650      	mov	r0, sl
   21530:	1a80      	subs	r0, r0, r2
   21532:	4582      	cmp	sl, r0
   21534:	41bf      	sbcs	r7, r7
   21536:	1a65      	subs	r5, r4, r1
   21538:	427f      	negs	r7, r7
   2153a:	1bed      	subs	r5, r5, r7
   2153c:	4684      	mov	ip, r0
   2153e:	0228      	lsls	r0, r5, #8
   21540:	d400      	bmi.n	21544 <__aeabi_dsub+0x51c>
   21542:	e68d      	b.n	21260 <__aeabi_dsub+0x238>
   21544:	4650      	mov	r0, sl
   21546:	1a17      	subs	r7, r2, r0
   21548:	42ba      	cmp	r2, r7
   2154a:	4192      	sbcs	r2, r2
   2154c:	1b0c      	subs	r4, r1, r4
   2154e:	4252      	negs	r2, r2
   21550:	1aa4      	subs	r4, r4, r2
   21552:	4698      	mov	r8, r3
   21554:	e5ee      	b.n	21134 <__aeabi_dsub+0x10c>
   21556:	000d      	movs	r5, r1
   21558:	4315      	orrs	r5, r2
   2155a:	d100      	bne.n	2155e <__aeabi_dsub+0x536>
   2155c:	e76b      	b.n	21436 <__aeabi_dsub+0x40e>
   2155e:	4650      	mov	r0, sl
   21560:	0767      	lsls	r7, r4, #29
   21562:	08c0      	lsrs	r0, r0, #3
   21564:	4307      	orrs	r7, r0
   21566:	2080      	movs	r0, #128	; 0x80
   21568:	08e4      	lsrs	r4, r4, #3
   2156a:	0300      	lsls	r0, r0, #12
   2156c:	4204      	tst	r4, r0
   2156e:	d007      	beq.n	21580 <__aeabi_dsub+0x558>
   21570:	08cd      	lsrs	r5, r1, #3
   21572:	4205      	tst	r5, r0
   21574:	d104      	bne.n	21580 <__aeabi_dsub+0x558>
   21576:	002c      	movs	r4, r5
   21578:	4698      	mov	r8, r3
   2157a:	08d7      	lsrs	r7, r2, #3
   2157c:	0749      	lsls	r1, r1, #29
   2157e:	430f      	orrs	r7, r1
   21580:	0f7b      	lsrs	r3, r7, #29
   21582:	00e4      	lsls	r4, r4, #3
   21584:	431c      	orrs	r4, r3
   21586:	00ff      	lsls	r7, r7, #3
   21588:	4e30      	ldr	r6, [pc, #192]	; (2164c <__aeabi_dsub+0x624>)
   2158a:	e5d3      	b.n	21134 <__aeabi_dsub+0x10c>
   2158c:	4e2f      	ldr	r6, [pc, #188]	; (2164c <__aeabi_dsub+0x624>)
   2158e:	45b4      	cmp	ip, r6
   21590:	d1b4      	bne.n	214fc <__aeabi_dsub+0x4d4>
   21592:	000c      	movs	r4, r1
   21594:	0017      	movs	r7, r2
   21596:	4666      	mov	r6, ip
   21598:	e5cc      	b.n	21134 <__aeabi_dsub+0x10c>
   2159a:	2700      	movs	r7, #0
   2159c:	2400      	movs	r4, #0
   2159e:	e5e8      	b.n	21172 <__aeabi_dsub+0x14a>
   215a0:	2b00      	cmp	r3, #0
   215a2:	d039      	beq.n	21618 <__aeabi_dsub+0x5f0>
   215a4:	000b      	movs	r3, r1
   215a6:	4313      	orrs	r3, r2
   215a8:	d100      	bne.n	215ac <__aeabi_dsub+0x584>
   215aa:	e744      	b.n	21436 <__aeabi_dsub+0x40e>
   215ac:	08c0      	lsrs	r0, r0, #3
   215ae:	0767      	lsls	r7, r4, #29
   215b0:	4307      	orrs	r7, r0
   215b2:	2080      	movs	r0, #128	; 0x80
   215b4:	08e4      	lsrs	r4, r4, #3
   215b6:	0300      	lsls	r0, r0, #12
   215b8:	4204      	tst	r4, r0
   215ba:	d0e1      	beq.n	21580 <__aeabi_dsub+0x558>
   215bc:	08cb      	lsrs	r3, r1, #3
   215be:	4203      	tst	r3, r0
   215c0:	d1de      	bne.n	21580 <__aeabi_dsub+0x558>
   215c2:	08d7      	lsrs	r7, r2, #3
   215c4:	0749      	lsls	r1, r1, #29
   215c6:	430f      	orrs	r7, r1
   215c8:	001c      	movs	r4, r3
   215ca:	e7d9      	b.n	21580 <__aeabi_dsub+0x558>
   215cc:	2100      	movs	r1, #0
   215ce:	e771      	b.n	214b4 <__aeabi_dsub+0x48c>
   215d0:	2500      	movs	r5, #0
   215d2:	2700      	movs	r7, #0
   215d4:	e5e9      	b.n	211aa <__aeabi_dsub+0x182>
   215d6:	002e      	movs	r6, r5
   215d8:	0027      	movs	r7, r4
   215da:	3e20      	subs	r6, #32
   215dc:	40f7      	lsrs	r7, r6
   215de:	2d20      	cmp	r5, #32
   215e0:	d02f      	beq.n	21642 <__aeabi_dsub+0x61a>
   215e2:	2640      	movs	r6, #64	; 0x40
   215e4:	1b75      	subs	r5, r6, r5
   215e6:	40ac      	lsls	r4, r5
   215e8:	4650      	mov	r0, sl
   215ea:	4320      	orrs	r0, r4
   215ec:	1e44      	subs	r4, r0, #1
   215ee:	41a0      	sbcs	r0, r4
   215f0:	2400      	movs	r4, #0
   215f2:	4338      	orrs	r0, r7
   215f4:	e6dc      	b.n	213b0 <__aeabi_dsub+0x388>
   215f6:	2480      	movs	r4, #128	; 0x80
   215f8:	2500      	movs	r5, #0
   215fa:	0324      	lsls	r4, r4, #12
   215fc:	4e13      	ldr	r6, [pc, #76]	; (2164c <__aeabi_dsub+0x624>)
   215fe:	2700      	movs	r7, #0
   21600:	e5d3      	b.n	211aa <__aeabi_dsub+0x182>
   21602:	4650      	mov	r0, sl
   21604:	4320      	orrs	r0, r4
   21606:	0007      	movs	r7, r0
   21608:	1e78      	subs	r0, r7, #1
   2160a:	4187      	sbcs	r7, r0
   2160c:	2400      	movs	r4, #0
   2160e:	18bf      	adds	r7, r7, r2
   21610:	e760      	b.n	214d4 <__aeabi_dsub+0x4ac>
   21612:	000c      	movs	r4, r1
   21614:	0017      	movs	r7, r2
   21616:	e58d      	b.n	21134 <__aeabi_dsub+0x10c>
   21618:	000c      	movs	r4, r1
   2161a:	0017      	movs	r7, r2
   2161c:	4e0b      	ldr	r6, [pc, #44]	; (2164c <__aeabi_dsub+0x624>)
   2161e:	e589      	b.n	21134 <__aeabi_dsub+0x10c>
   21620:	001e      	movs	r6, r3
   21622:	0027      	movs	r7, r4
   21624:	3e20      	subs	r6, #32
   21626:	40f7      	lsrs	r7, r6
   21628:	2b20      	cmp	r3, #32
   2162a:	d00c      	beq.n	21646 <__aeabi_dsub+0x61e>
   2162c:	2640      	movs	r6, #64	; 0x40
   2162e:	1af3      	subs	r3, r6, r3
   21630:	409c      	lsls	r4, r3
   21632:	4650      	mov	r0, sl
   21634:	4320      	orrs	r0, r4
   21636:	1e44      	subs	r4, r0, #1
   21638:	41a0      	sbcs	r0, r4
   2163a:	4307      	orrs	r7, r0
   2163c:	2400      	movs	r4, #0
   2163e:	18bf      	adds	r7, r7, r2
   21640:	e748      	b.n	214d4 <__aeabi_dsub+0x4ac>
   21642:	2400      	movs	r4, #0
   21644:	e7d0      	b.n	215e8 <__aeabi_dsub+0x5c0>
   21646:	2400      	movs	r4, #0
   21648:	e7f3      	b.n	21632 <__aeabi_dsub+0x60a>
   2164a:	46c0      	nop			; (mov r8, r8)
   2164c:	000007ff 	.word	0x000007ff
   21650:	ff7fffff 	.word	0xff7fffff

00021654 <__aeabi_d2iz>:
   21654:	b530      	push	{r4, r5, lr}
   21656:	4d13      	ldr	r5, [pc, #76]	; (216a4 <__aeabi_d2iz+0x50>)
   21658:	030a      	lsls	r2, r1, #12
   2165a:	004b      	lsls	r3, r1, #1
   2165c:	0b12      	lsrs	r2, r2, #12
   2165e:	0d5b      	lsrs	r3, r3, #21
   21660:	0fc9      	lsrs	r1, r1, #31
   21662:	2400      	movs	r4, #0
   21664:	42ab      	cmp	r3, r5
   21666:	dd10      	ble.n	2168a <__aeabi_d2iz+0x36>
   21668:	4c0f      	ldr	r4, [pc, #60]	; (216a8 <__aeabi_d2iz+0x54>)
   2166a:	42a3      	cmp	r3, r4
   2166c:	dc0f      	bgt.n	2168e <__aeabi_d2iz+0x3a>
   2166e:	2480      	movs	r4, #128	; 0x80
   21670:	4d0e      	ldr	r5, [pc, #56]	; (216ac <__aeabi_d2iz+0x58>)
   21672:	0364      	lsls	r4, r4, #13
   21674:	4322      	orrs	r2, r4
   21676:	1aed      	subs	r5, r5, r3
   21678:	2d1f      	cmp	r5, #31
   2167a:	dd0b      	ble.n	21694 <__aeabi_d2iz+0x40>
   2167c:	480c      	ldr	r0, [pc, #48]	; (216b0 <__aeabi_d2iz+0x5c>)
   2167e:	1ac3      	subs	r3, r0, r3
   21680:	40da      	lsrs	r2, r3
   21682:	4254      	negs	r4, r2
   21684:	2900      	cmp	r1, #0
   21686:	d100      	bne.n	2168a <__aeabi_d2iz+0x36>
   21688:	0014      	movs	r4, r2
   2168a:	0020      	movs	r0, r4
   2168c:	bd30      	pop	{r4, r5, pc}
   2168e:	4b09      	ldr	r3, [pc, #36]	; (216b4 <__aeabi_d2iz+0x60>)
   21690:	18cc      	adds	r4, r1, r3
   21692:	e7fa      	b.n	2168a <__aeabi_d2iz+0x36>
   21694:	4c08      	ldr	r4, [pc, #32]	; (216b8 <__aeabi_d2iz+0x64>)
   21696:	40e8      	lsrs	r0, r5
   21698:	46a4      	mov	ip, r4
   2169a:	4463      	add	r3, ip
   2169c:	409a      	lsls	r2, r3
   2169e:	4302      	orrs	r2, r0
   216a0:	e7ef      	b.n	21682 <__aeabi_d2iz+0x2e>
   216a2:	46c0      	nop			; (mov r8, r8)
   216a4:	000003fe 	.word	0x000003fe
   216a8:	0000041d 	.word	0x0000041d
   216ac:	00000433 	.word	0x00000433
   216b0:	00000413 	.word	0x00000413
   216b4:	7fffffff 	.word	0x7fffffff
   216b8:	fffffbed 	.word	0xfffffbed

000216bc <__aeabi_ui2d>:
   216bc:	b510      	push	{r4, lr}
   216be:	1e04      	subs	r4, r0, #0
   216c0:	d028      	beq.n	21714 <__aeabi_ui2d+0x58>
   216c2:	f000 f833 	bl	2172c <__clzsi2>
   216c6:	4b15      	ldr	r3, [pc, #84]	; (2171c <__aeabi_ui2d+0x60>)
   216c8:	4a15      	ldr	r2, [pc, #84]	; (21720 <__aeabi_ui2d+0x64>)
   216ca:	1a1b      	subs	r3, r3, r0
   216cc:	1ad2      	subs	r2, r2, r3
   216ce:	2a1f      	cmp	r2, #31
   216d0:	dd15      	ble.n	216fe <__aeabi_ui2d+0x42>
   216d2:	4a14      	ldr	r2, [pc, #80]	; (21724 <__aeabi_ui2d+0x68>)
   216d4:	1ad2      	subs	r2, r2, r3
   216d6:	4094      	lsls	r4, r2
   216d8:	2200      	movs	r2, #0
   216da:	0324      	lsls	r4, r4, #12
   216dc:	055b      	lsls	r3, r3, #21
   216de:	0b24      	lsrs	r4, r4, #12
   216e0:	0d5b      	lsrs	r3, r3, #21
   216e2:	2100      	movs	r1, #0
   216e4:	0010      	movs	r0, r2
   216e6:	0324      	lsls	r4, r4, #12
   216e8:	0d0a      	lsrs	r2, r1, #20
   216ea:	0b24      	lsrs	r4, r4, #12
   216ec:	0512      	lsls	r2, r2, #20
   216ee:	4322      	orrs	r2, r4
   216f0:	4c0d      	ldr	r4, [pc, #52]	; (21728 <__aeabi_ui2d+0x6c>)
   216f2:	051b      	lsls	r3, r3, #20
   216f4:	4022      	ands	r2, r4
   216f6:	4313      	orrs	r3, r2
   216f8:	005b      	lsls	r3, r3, #1
   216fa:	0859      	lsrs	r1, r3, #1
   216fc:	bd10      	pop	{r4, pc}
   216fe:	0021      	movs	r1, r4
   21700:	4091      	lsls	r1, r2
   21702:	000a      	movs	r2, r1
   21704:	210b      	movs	r1, #11
   21706:	1a08      	subs	r0, r1, r0
   21708:	40c4      	lsrs	r4, r0
   2170a:	055b      	lsls	r3, r3, #21
   2170c:	0324      	lsls	r4, r4, #12
   2170e:	0b24      	lsrs	r4, r4, #12
   21710:	0d5b      	lsrs	r3, r3, #21
   21712:	e7e6      	b.n	216e2 <__aeabi_ui2d+0x26>
   21714:	2300      	movs	r3, #0
   21716:	2400      	movs	r4, #0
   21718:	2200      	movs	r2, #0
   2171a:	e7e2      	b.n	216e2 <__aeabi_ui2d+0x26>
   2171c:	0000041e 	.word	0x0000041e
   21720:	00000433 	.word	0x00000433
   21724:	00000413 	.word	0x00000413
   21728:	800fffff 	.word	0x800fffff

0002172c <__clzsi2>:
   2172c:	211c      	movs	r1, #28
   2172e:	2301      	movs	r3, #1
   21730:	041b      	lsls	r3, r3, #16
   21732:	4298      	cmp	r0, r3
   21734:	d301      	bcc.n	2173a <__clzsi2+0xe>
   21736:	0c00      	lsrs	r0, r0, #16
   21738:	3910      	subs	r1, #16
   2173a:	0a1b      	lsrs	r3, r3, #8
   2173c:	4298      	cmp	r0, r3
   2173e:	d301      	bcc.n	21744 <__clzsi2+0x18>
   21740:	0a00      	lsrs	r0, r0, #8
   21742:	3908      	subs	r1, #8
   21744:	091b      	lsrs	r3, r3, #4
   21746:	4298      	cmp	r0, r3
   21748:	d301      	bcc.n	2174e <__clzsi2+0x22>
   2174a:	0900      	lsrs	r0, r0, #4
   2174c:	3904      	subs	r1, #4
   2174e:	a202      	add	r2, pc, #8	; (adr r2, 21758 <__clzsi2+0x2c>)
   21750:	5c10      	ldrb	r0, [r2, r0]
   21752:	1840      	adds	r0, r0, r1
   21754:	4770      	bx	lr
   21756:	46c0      	nop			; (mov r8, r8)
   21758:	02020304 	.word	0x02020304
   2175c:	01010101 	.word	0x01010101
	...

00021768 <atoi>:
   21768:	b510      	push	{r4, lr}
   2176a:	220a      	movs	r2, #10
   2176c:	2100      	movs	r1, #0
   2176e:	f000 fb0d 	bl	21d8c <strtol>
   21772:	bd10      	pop	{r4, pc}

00021774 <__libc_init_array>:
   21774:	b570      	push	{r4, r5, r6, lr}
   21776:	2600      	movs	r6, #0
   21778:	4d0c      	ldr	r5, [pc, #48]	; (217ac <__libc_init_array+0x38>)
   2177a:	4c0d      	ldr	r4, [pc, #52]	; (217b0 <__libc_init_array+0x3c>)
   2177c:	1b64      	subs	r4, r4, r5
   2177e:	10a4      	asrs	r4, r4, #2
   21780:	42a6      	cmp	r6, r4
   21782:	d109      	bne.n	21798 <__libc_init_array+0x24>
   21784:	2600      	movs	r6, #0
   21786:	f005 fae3 	bl	26d50 <_init>
   2178a:	4d0a      	ldr	r5, [pc, #40]	; (217b4 <__libc_init_array+0x40>)
   2178c:	4c0a      	ldr	r4, [pc, #40]	; (217b8 <__libc_init_array+0x44>)
   2178e:	1b64      	subs	r4, r4, r5
   21790:	10a4      	asrs	r4, r4, #2
   21792:	42a6      	cmp	r6, r4
   21794:	d105      	bne.n	217a2 <__libc_init_array+0x2e>
   21796:	bd70      	pop	{r4, r5, r6, pc}
   21798:	00b3      	lsls	r3, r6, #2
   2179a:	58eb      	ldr	r3, [r5, r3]
   2179c:	4798      	blx	r3
   2179e:	3601      	adds	r6, #1
   217a0:	e7ee      	b.n	21780 <__libc_init_array+0xc>
   217a2:	00b3      	lsls	r3, r6, #2
   217a4:	58eb      	ldr	r3, [r5, r3]
   217a6:	4798      	blx	r3
   217a8:	3601      	adds	r6, #1
   217aa:	e7f2      	b.n	21792 <__libc_init_array+0x1e>
   217ac:	00026d5c 	.word	0x00026d5c
   217b0:	00026d5c 	.word	0x00026d5c
   217b4:	00026d5c 	.word	0x00026d5c
   217b8:	00026d60 	.word	0x00026d60

000217bc <malloc>:
   217bc:	b510      	push	{r4, lr}
   217be:	4b03      	ldr	r3, [pc, #12]	; (217cc <malloc+0x10>)
   217c0:	0001      	movs	r1, r0
   217c2:	6818      	ldr	r0, [r3, #0]
   217c4:	f000 f87c 	bl	218c0 <_malloc_r>
   217c8:	bd10      	pop	{r4, pc}
   217ca:	46c0      	nop			; (mov r8, r8)
   217cc:	20000120 	.word	0x20000120

000217d0 <free>:
   217d0:	b510      	push	{r4, lr}
   217d2:	4b03      	ldr	r3, [pc, #12]	; (217e0 <free+0x10>)
   217d4:	0001      	movs	r1, r0
   217d6:	6818      	ldr	r0, [r3, #0]
   217d8:	f000 f828 	bl	2182c <_free_r>
   217dc:	bd10      	pop	{r4, pc}
   217de:	46c0      	nop			; (mov r8, r8)
   217e0:	20000120 	.word	0x20000120

000217e4 <memcpy>:
   217e4:	2300      	movs	r3, #0
   217e6:	b510      	push	{r4, lr}
   217e8:	429a      	cmp	r2, r3
   217ea:	d100      	bne.n	217ee <memcpy+0xa>
   217ec:	bd10      	pop	{r4, pc}
   217ee:	5ccc      	ldrb	r4, [r1, r3]
   217f0:	54c4      	strb	r4, [r0, r3]
   217f2:	3301      	adds	r3, #1
   217f4:	e7f8      	b.n	217e8 <memcpy+0x4>

000217f6 <memmove>:
   217f6:	b510      	push	{r4, lr}
   217f8:	4288      	cmp	r0, r1
   217fa:	d902      	bls.n	21802 <memmove+0xc>
   217fc:	188b      	adds	r3, r1, r2
   217fe:	4298      	cmp	r0, r3
   21800:	d308      	bcc.n	21814 <memmove+0x1e>
   21802:	2300      	movs	r3, #0
   21804:	429a      	cmp	r2, r3
   21806:	d007      	beq.n	21818 <memmove+0x22>
   21808:	5ccc      	ldrb	r4, [r1, r3]
   2180a:	54c4      	strb	r4, [r0, r3]
   2180c:	3301      	adds	r3, #1
   2180e:	e7f9      	b.n	21804 <memmove+0xe>
   21810:	5c8b      	ldrb	r3, [r1, r2]
   21812:	5483      	strb	r3, [r0, r2]
   21814:	3a01      	subs	r2, #1
   21816:	d2fb      	bcs.n	21810 <memmove+0x1a>
   21818:	bd10      	pop	{r4, pc}

0002181a <memset>:
   2181a:	0003      	movs	r3, r0
   2181c:	1882      	adds	r2, r0, r2
   2181e:	4293      	cmp	r3, r2
   21820:	d100      	bne.n	21824 <memset+0xa>
   21822:	4770      	bx	lr
   21824:	7019      	strb	r1, [r3, #0]
   21826:	3301      	adds	r3, #1
   21828:	e7f9      	b.n	2181e <memset+0x4>
	...

0002182c <_free_r>:
   2182c:	b570      	push	{r4, r5, r6, lr}
   2182e:	0005      	movs	r5, r0
   21830:	2900      	cmp	r1, #0
   21832:	d010      	beq.n	21856 <_free_r+0x2a>
   21834:	1f0c      	subs	r4, r1, #4
   21836:	6823      	ldr	r3, [r4, #0]
   21838:	2b00      	cmp	r3, #0
   2183a:	da00      	bge.n	2183e <_free_r+0x12>
   2183c:	18e4      	adds	r4, r4, r3
   2183e:	0028      	movs	r0, r5
   21840:	f000 fdd8 	bl	223f4 <__malloc_lock>
   21844:	4a1d      	ldr	r2, [pc, #116]	; (218bc <_free_r+0x90>)
   21846:	6813      	ldr	r3, [r2, #0]
   21848:	2b00      	cmp	r3, #0
   2184a:	d105      	bne.n	21858 <_free_r+0x2c>
   2184c:	6063      	str	r3, [r4, #4]
   2184e:	6014      	str	r4, [r2, #0]
   21850:	0028      	movs	r0, r5
   21852:	f000 fdd0 	bl	223f6 <__malloc_unlock>
   21856:	bd70      	pop	{r4, r5, r6, pc}
   21858:	42a3      	cmp	r3, r4
   2185a:	d909      	bls.n	21870 <_free_r+0x44>
   2185c:	6821      	ldr	r1, [r4, #0]
   2185e:	1860      	adds	r0, r4, r1
   21860:	4283      	cmp	r3, r0
   21862:	d1f3      	bne.n	2184c <_free_r+0x20>
   21864:	6818      	ldr	r0, [r3, #0]
   21866:	685b      	ldr	r3, [r3, #4]
   21868:	1841      	adds	r1, r0, r1
   2186a:	6021      	str	r1, [r4, #0]
   2186c:	e7ee      	b.n	2184c <_free_r+0x20>
   2186e:	0013      	movs	r3, r2
   21870:	685a      	ldr	r2, [r3, #4]
   21872:	2a00      	cmp	r2, #0
   21874:	d001      	beq.n	2187a <_free_r+0x4e>
   21876:	42a2      	cmp	r2, r4
   21878:	d9f9      	bls.n	2186e <_free_r+0x42>
   2187a:	6819      	ldr	r1, [r3, #0]
   2187c:	1858      	adds	r0, r3, r1
   2187e:	42a0      	cmp	r0, r4
   21880:	d10b      	bne.n	2189a <_free_r+0x6e>
   21882:	6820      	ldr	r0, [r4, #0]
   21884:	1809      	adds	r1, r1, r0
   21886:	1858      	adds	r0, r3, r1
   21888:	6019      	str	r1, [r3, #0]
   2188a:	4282      	cmp	r2, r0
   2188c:	d1e0      	bne.n	21850 <_free_r+0x24>
   2188e:	6810      	ldr	r0, [r2, #0]
   21890:	6852      	ldr	r2, [r2, #4]
   21892:	1841      	adds	r1, r0, r1
   21894:	6019      	str	r1, [r3, #0]
   21896:	605a      	str	r2, [r3, #4]
   21898:	e7da      	b.n	21850 <_free_r+0x24>
   2189a:	42a0      	cmp	r0, r4
   2189c:	d902      	bls.n	218a4 <_free_r+0x78>
   2189e:	230c      	movs	r3, #12
   218a0:	602b      	str	r3, [r5, #0]
   218a2:	e7d5      	b.n	21850 <_free_r+0x24>
   218a4:	6821      	ldr	r1, [r4, #0]
   218a6:	1860      	adds	r0, r4, r1
   218a8:	4282      	cmp	r2, r0
   218aa:	d103      	bne.n	218b4 <_free_r+0x88>
   218ac:	6810      	ldr	r0, [r2, #0]
   218ae:	6852      	ldr	r2, [r2, #4]
   218b0:	1841      	adds	r1, r0, r1
   218b2:	6021      	str	r1, [r4, #0]
   218b4:	6062      	str	r2, [r4, #4]
   218b6:	605c      	str	r4, [r3, #4]
   218b8:	e7ca      	b.n	21850 <_free_r+0x24>
   218ba:	46c0      	nop			; (mov r8, r8)
   218bc:	2000419c 	.word	0x2000419c

000218c0 <_malloc_r>:
   218c0:	2303      	movs	r3, #3
   218c2:	b570      	push	{r4, r5, r6, lr}
   218c4:	1ccd      	adds	r5, r1, #3
   218c6:	439d      	bics	r5, r3
   218c8:	3508      	adds	r5, #8
   218ca:	0006      	movs	r6, r0
   218cc:	2d0c      	cmp	r5, #12
   218ce:	d21e      	bcs.n	2190e <_malloc_r+0x4e>
   218d0:	250c      	movs	r5, #12
   218d2:	42a9      	cmp	r1, r5
   218d4:	d81d      	bhi.n	21912 <_malloc_r+0x52>
   218d6:	0030      	movs	r0, r6
   218d8:	f000 fd8c 	bl	223f4 <__malloc_lock>
   218dc:	4a25      	ldr	r2, [pc, #148]	; (21974 <_malloc_r+0xb4>)
   218de:	6814      	ldr	r4, [r2, #0]
   218e0:	0021      	movs	r1, r4
   218e2:	2900      	cmp	r1, #0
   218e4:	d119      	bne.n	2191a <_malloc_r+0x5a>
   218e6:	4c24      	ldr	r4, [pc, #144]	; (21978 <_malloc_r+0xb8>)
   218e8:	6823      	ldr	r3, [r4, #0]
   218ea:	2b00      	cmp	r3, #0
   218ec:	d103      	bne.n	218f6 <_malloc_r+0x36>
   218ee:	0030      	movs	r0, r6
   218f0:	f000 f8ae 	bl	21a50 <_sbrk_r>
   218f4:	6020      	str	r0, [r4, #0]
   218f6:	0029      	movs	r1, r5
   218f8:	0030      	movs	r0, r6
   218fa:	f000 f8a9 	bl	21a50 <_sbrk_r>
   218fe:	1c43      	adds	r3, r0, #1
   21900:	d12c      	bne.n	2195c <_malloc_r+0x9c>
   21902:	230c      	movs	r3, #12
   21904:	0030      	movs	r0, r6
   21906:	6033      	str	r3, [r6, #0]
   21908:	f000 fd75 	bl	223f6 <__malloc_unlock>
   2190c:	e003      	b.n	21916 <_malloc_r+0x56>
   2190e:	2d00      	cmp	r5, #0
   21910:	dadf      	bge.n	218d2 <_malloc_r+0x12>
   21912:	230c      	movs	r3, #12
   21914:	6033      	str	r3, [r6, #0]
   21916:	2000      	movs	r0, #0
   21918:	bd70      	pop	{r4, r5, r6, pc}
   2191a:	680b      	ldr	r3, [r1, #0]
   2191c:	1b5b      	subs	r3, r3, r5
   2191e:	d41a      	bmi.n	21956 <_malloc_r+0x96>
   21920:	2b0b      	cmp	r3, #11
   21922:	d903      	bls.n	2192c <_malloc_r+0x6c>
   21924:	600b      	str	r3, [r1, #0]
   21926:	18cc      	adds	r4, r1, r3
   21928:	6025      	str	r5, [r4, #0]
   2192a:	e003      	b.n	21934 <_malloc_r+0x74>
   2192c:	428c      	cmp	r4, r1
   2192e:	d10e      	bne.n	2194e <_malloc_r+0x8e>
   21930:	6863      	ldr	r3, [r4, #4]
   21932:	6013      	str	r3, [r2, #0]
   21934:	0030      	movs	r0, r6
   21936:	f000 fd5e 	bl	223f6 <__malloc_unlock>
   2193a:	0020      	movs	r0, r4
   2193c:	2207      	movs	r2, #7
   2193e:	300b      	adds	r0, #11
   21940:	1d23      	adds	r3, r4, #4
   21942:	4390      	bics	r0, r2
   21944:	1ac3      	subs	r3, r0, r3
   21946:	d0e7      	beq.n	21918 <_malloc_r+0x58>
   21948:	425a      	negs	r2, r3
   2194a:	50e2      	str	r2, [r4, r3]
   2194c:	e7e4      	b.n	21918 <_malloc_r+0x58>
   2194e:	684b      	ldr	r3, [r1, #4]
   21950:	6063      	str	r3, [r4, #4]
   21952:	000c      	movs	r4, r1
   21954:	e7ee      	b.n	21934 <_malloc_r+0x74>
   21956:	000c      	movs	r4, r1
   21958:	6849      	ldr	r1, [r1, #4]
   2195a:	e7c2      	b.n	218e2 <_malloc_r+0x22>
   2195c:	2303      	movs	r3, #3
   2195e:	1cc4      	adds	r4, r0, #3
   21960:	439c      	bics	r4, r3
   21962:	42a0      	cmp	r0, r4
   21964:	d0e0      	beq.n	21928 <_malloc_r+0x68>
   21966:	1a21      	subs	r1, r4, r0
   21968:	0030      	movs	r0, r6
   2196a:	f000 f871 	bl	21a50 <_sbrk_r>
   2196e:	1c43      	adds	r3, r0, #1
   21970:	d1da      	bne.n	21928 <_malloc_r+0x68>
   21972:	e7c6      	b.n	21902 <_malloc_r+0x42>
   21974:	2000419c 	.word	0x2000419c
   21978:	200041a0 	.word	0x200041a0

0002197c <_puts_r>:
   2197c:	b570      	push	{r4, r5, r6, lr}
   2197e:	0005      	movs	r5, r0
   21980:	000e      	movs	r6, r1
   21982:	2800      	cmp	r0, #0
   21984:	d004      	beq.n	21990 <_puts_r+0x14>
   21986:	6983      	ldr	r3, [r0, #24]
   21988:	2b00      	cmp	r3, #0
   2198a:	d101      	bne.n	21990 <_puts_r+0x14>
   2198c:	f000 fc0e 	bl	221ac <__sinit>
   21990:	69ab      	ldr	r3, [r5, #24]
   21992:	68ac      	ldr	r4, [r5, #8]
   21994:	2b00      	cmp	r3, #0
   21996:	d102      	bne.n	2199e <_puts_r+0x22>
   21998:	0028      	movs	r0, r5
   2199a:	f000 fc07 	bl	221ac <__sinit>
   2199e:	4b24      	ldr	r3, [pc, #144]	; (21a30 <_puts_r+0xb4>)
   219a0:	429c      	cmp	r4, r3
   219a2:	d10f      	bne.n	219c4 <_puts_r+0x48>
   219a4:	686c      	ldr	r4, [r5, #4]
   219a6:	89a3      	ldrh	r3, [r4, #12]
   219a8:	071b      	lsls	r3, r3, #28
   219aa:	d502      	bpl.n	219b2 <_puts_r+0x36>
   219ac:	6923      	ldr	r3, [r4, #16]
   219ae:	2b00      	cmp	r3, #0
   219b0:	d120      	bne.n	219f4 <_puts_r+0x78>
   219b2:	0021      	movs	r1, r4
   219b4:	0028      	movs	r0, r5
   219b6:	f000 fa8b 	bl	21ed0 <__swsetup_r>
   219ba:	2800      	cmp	r0, #0
   219bc:	d01a      	beq.n	219f4 <_puts_r+0x78>
   219be:	2001      	movs	r0, #1
   219c0:	4240      	negs	r0, r0
   219c2:	bd70      	pop	{r4, r5, r6, pc}
   219c4:	4b1b      	ldr	r3, [pc, #108]	; (21a34 <_puts_r+0xb8>)
   219c6:	429c      	cmp	r4, r3
   219c8:	d101      	bne.n	219ce <_puts_r+0x52>
   219ca:	68ac      	ldr	r4, [r5, #8]
   219cc:	e7eb      	b.n	219a6 <_puts_r+0x2a>
   219ce:	4b1a      	ldr	r3, [pc, #104]	; (21a38 <_puts_r+0xbc>)
   219d0:	429c      	cmp	r4, r3
   219d2:	d1e8      	bne.n	219a6 <_puts_r+0x2a>
   219d4:	68ec      	ldr	r4, [r5, #12]
   219d6:	e7e6      	b.n	219a6 <_puts_r+0x2a>
   219d8:	3b01      	subs	r3, #1
   219da:	3601      	adds	r6, #1
   219dc:	60a3      	str	r3, [r4, #8]
   219de:	2b00      	cmp	r3, #0
   219e0:	da04      	bge.n	219ec <_puts_r+0x70>
   219e2:	69a2      	ldr	r2, [r4, #24]
   219e4:	4293      	cmp	r3, r2
   219e6:	db16      	blt.n	21a16 <_puts_r+0x9a>
   219e8:	290a      	cmp	r1, #10
   219ea:	d014      	beq.n	21a16 <_puts_r+0x9a>
   219ec:	6823      	ldr	r3, [r4, #0]
   219ee:	1c5a      	adds	r2, r3, #1
   219f0:	6022      	str	r2, [r4, #0]
   219f2:	7019      	strb	r1, [r3, #0]
   219f4:	7831      	ldrb	r1, [r6, #0]
   219f6:	68a3      	ldr	r3, [r4, #8]
   219f8:	2900      	cmp	r1, #0
   219fa:	d1ed      	bne.n	219d8 <_puts_r+0x5c>
   219fc:	3b01      	subs	r3, #1
   219fe:	60a3      	str	r3, [r4, #8]
   21a00:	2b00      	cmp	r3, #0
   21a02:	da0f      	bge.n	21a24 <_puts_r+0xa8>
   21a04:	0022      	movs	r2, r4
   21a06:	310a      	adds	r1, #10
   21a08:	0028      	movs	r0, r5
   21a0a:	f000 fa0b 	bl	21e24 <__swbuf_r>
   21a0e:	1c43      	adds	r3, r0, #1
   21a10:	d0d5      	beq.n	219be <_puts_r+0x42>
   21a12:	200a      	movs	r0, #10
   21a14:	e7d5      	b.n	219c2 <_puts_r+0x46>
   21a16:	0022      	movs	r2, r4
   21a18:	0028      	movs	r0, r5
   21a1a:	f000 fa03 	bl	21e24 <__swbuf_r>
   21a1e:	1c43      	adds	r3, r0, #1
   21a20:	d1e8      	bne.n	219f4 <_puts_r+0x78>
   21a22:	e7cc      	b.n	219be <_puts_r+0x42>
   21a24:	200a      	movs	r0, #10
   21a26:	6823      	ldr	r3, [r4, #0]
   21a28:	1c5a      	adds	r2, r3, #1
   21a2a:	6022      	str	r2, [r4, #0]
   21a2c:	7018      	strb	r0, [r3, #0]
   21a2e:	e7c8      	b.n	219c2 <_puts_r+0x46>
   21a30:	00026bd0 	.word	0x00026bd0
   21a34:	00026bf0 	.word	0x00026bf0
   21a38:	00026bb0 	.word	0x00026bb0

00021a3c <puts>:
   21a3c:	b510      	push	{r4, lr}
   21a3e:	4b03      	ldr	r3, [pc, #12]	; (21a4c <puts+0x10>)
   21a40:	0001      	movs	r1, r0
   21a42:	6818      	ldr	r0, [r3, #0]
   21a44:	f7ff ff9a 	bl	2197c <_puts_r>
   21a48:	bd10      	pop	{r4, pc}
   21a4a:	46c0      	nop			; (mov r8, r8)
   21a4c:	20000120 	.word	0x20000120

00021a50 <_sbrk_r>:
   21a50:	2300      	movs	r3, #0
   21a52:	b570      	push	{r4, r5, r6, lr}
   21a54:	4c06      	ldr	r4, [pc, #24]	; (21a70 <_sbrk_r+0x20>)
   21a56:	0005      	movs	r5, r0
   21a58:	0008      	movs	r0, r1
   21a5a:	6023      	str	r3, [r4, #0]
   21a5c:	f7f6 fafc 	bl	18058 <_sbrk>
   21a60:	1c43      	adds	r3, r0, #1
   21a62:	d103      	bne.n	21a6c <_sbrk_r+0x1c>
   21a64:	6823      	ldr	r3, [r4, #0]
   21a66:	2b00      	cmp	r3, #0
   21a68:	d000      	beq.n	21a6c <_sbrk_r+0x1c>
   21a6a:	602b      	str	r3, [r5, #0]
   21a6c:	bd70      	pop	{r4, r5, r6, pc}
   21a6e:	46c0      	nop			; (mov r8, r8)
   21a70:	20005670 	.word	0x20005670

00021a74 <sniprintf>:
   21a74:	b40c      	push	{r2, r3}
   21a76:	b530      	push	{r4, r5, lr}
   21a78:	4b16      	ldr	r3, [pc, #88]	; (21ad4 <sniprintf+0x60>)
   21a7a:	b09d      	sub	sp, #116	; 0x74
   21a7c:	1e0c      	subs	r4, r1, #0
   21a7e:	681d      	ldr	r5, [r3, #0]
   21a80:	da08      	bge.n	21a94 <sniprintf+0x20>
   21a82:	238b      	movs	r3, #139	; 0x8b
   21a84:	2001      	movs	r0, #1
   21a86:	602b      	str	r3, [r5, #0]
   21a88:	4240      	negs	r0, r0
   21a8a:	b01d      	add	sp, #116	; 0x74
   21a8c:	bc30      	pop	{r4, r5}
   21a8e:	bc08      	pop	{r3}
   21a90:	b002      	add	sp, #8
   21a92:	4718      	bx	r3
   21a94:	2382      	movs	r3, #130	; 0x82
   21a96:	a902      	add	r1, sp, #8
   21a98:	009b      	lsls	r3, r3, #2
   21a9a:	818b      	strh	r3, [r1, #12]
   21a9c:	2300      	movs	r3, #0
   21a9e:	9002      	str	r0, [sp, #8]
   21aa0:	6108      	str	r0, [r1, #16]
   21aa2:	429c      	cmp	r4, r3
   21aa4:	d000      	beq.n	21aa8 <sniprintf+0x34>
   21aa6:	1e63      	subs	r3, r4, #1
   21aa8:	608b      	str	r3, [r1, #8]
   21aaa:	614b      	str	r3, [r1, #20]
   21aac:	2301      	movs	r3, #1
   21aae:	425b      	negs	r3, r3
   21ab0:	81cb      	strh	r3, [r1, #14]
   21ab2:	9a20      	ldr	r2, [sp, #128]	; 0x80
   21ab4:	ab21      	add	r3, sp, #132	; 0x84
   21ab6:	0028      	movs	r0, r5
   21ab8:	9301      	str	r3, [sp, #4]
   21aba:	f000 fcff 	bl	224bc <_svfiprintf_r>
   21abe:	1c43      	adds	r3, r0, #1
   21ac0:	da01      	bge.n	21ac6 <sniprintf+0x52>
   21ac2:	238b      	movs	r3, #139	; 0x8b
   21ac4:	602b      	str	r3, [r5, #0]
   21ac6:	2c00      	cmp	r4, #0
   21ac8:	d0df      	beq.n	21a8a <sniprintf+0x16>
   21aca:	2300      	movs	r3, #0
   21acc:	9a02      	ldr	r2, [sp, #8]
   21ace:	7013      	strb	r3, [r2, #0]
   21ad0:	e7db      	b.n	21a8a <sniprintf+0x16>
   21ad2:	46c0      	nop			; (mov r8, r8)
   21ad4:	20000120 	.word	0x20000120

00021ad8 <siprintf>:
   21ad8:	b40e      	push	{r1, r2, r3}
   21ada:	b510      	push	{r4, lr}
   21adc:	b09d      	sub	sp, #116	; 0x74
   21ade:	a902      	add	r1, sp, #8
   21ae0:	9002      	str	r0, [sp, #8]
   21ae2:	6108      	str	r0, [r1, #16]
   21ae4:	480b      	ldr	r0, [pc, #44]	; (21b14 <siprintf+0x3c>)
   21ae6:	2482      	movs	r4, #130	; 0x82
   21ae8:	6088      	str	r0, [r1, #8]
   21aea:	6148      	str	r0, [r1, #20]
   21aec:	2001      	movs	r0, #1
   21aee:	4240      	negs	r0, r0
   21af0:	ab1f      	add	r3, sp, #124	; 0x7c
   21af2:	81c8      	strh	r0, [r1, #14]
   21af4:	4808      	ldr	r0, [pc, #32]	; (21b18 <siprintf+0x40>)
   21af6:	cb04      	ldmia	r3!, {r2}
   21af8:	00a4      	lsls	r4, r4, #2
   21afa:	6800      	ldr	r0, [r0, #0]
   21afc:	9301      	str	r3, [sp, #4]
   21afe:	818c      	strh	r4, [r1, #12]
   21b00:	f000 fcdc 	bl	224bc <_svfiprintf_r>
   21b04:	2300      	movs	r3, #0
   21b06:	9a02      	ldr	r2, [sp, #8]
   21b08:	7013      	strb	r3, [r2, #0]
   21b0a:	b01d      	add	sp, #116	; 0x74
   21b0c:	bc10      	pop	{r4}
   21b0e:	bc08      	pop	{r3}
   21b10:	b003      	add	sp, #12
   21b12:	4718      	bx	r3
   21b14:	7fffffff 	.word	0x7fffffff
   21b18:	20000120 	.word	0x20000120

00021b1c <strcasecmp>:
   21b1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   21b1e:	0007      	movs	r7, r0
   21b20:	000e      	movs	r6, r1
   21b22:	783c      	ldrb	r4, [r7, #0]
   21b24:	f000 fbda 	bl	222dc <__locale_ctype_ptr>
   21b28:	2203      	movs	r2, #3
   21b2a:	1900      	adds	r0, r0, r4
   21b2c:	7843      	ldrb	r3, [r0, #1]
   21b2e:	4013      	ands	r3, r2
   21b30:	2b01      	cmp	r3, #1
   21b32:	d100      	bne.n	21b36 <strcasecmp+0x1a>
   21b34:	3420      	adds	r4, #32
   21b36:	7835      	ldrb	r5, [r6, #0]
   21b38:	f000 fbd0 	bl	222dc <__locale_ctype_ptr>
   21b3c:	2203      	movs	r2, #3
   21b3e:	1940      	adds	r0, r0, r5
   21b40:	7843      	ldrb	r3, [r0, #1]
   21b42:	4013      	ands	r3, r2
   21b44:	2b01      	cmp	r3, #1
   21b46:	d100      	bne.n	21b4a <strcasecmp+0x2e>
   21b48:	3520      	adds	r5, #32
   21b4a:	1b60      	subs	r0, r4, r5
   21b4c:	d103      	bne.n	21b56 <strcasecmp+0x3a>
   21b4e:	3701      	adds	r7, #1
   21b50:	3601      	adds	r6, #1
   21b52:	2d00      	cmp	r5, #0
   21b54:	d1e5      	bne.n	21b22 <strcasecmp+0x6>
   21b56:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00021b58 <strcat>:
   21b58:	0002      	movs	r2, r0
   21b5a:	b510      	push	{r4, lr}
   21b5c:	7813      	ldrb	r3, [r2, #0]
   21b5e:	2b00      	cmp	r3, #0
   21b60:	d105      	bne.n	21b6e <strcat+0x16>
   21b62:	5ccc      	ldrb	r4, [r1, r3]
   21b64:	54d4      	strb	r4, [r2, r3]
   21b66:	3301      	adds	r3, #1
   21b68:	2c00      	cmp	r4, #0
   21b6a:	d1fa      	bne.n	21b62 <strcat+0xa>
   21b6c:	bd10      	pop	{r4, pc}
   21b6e:	3201      	adds	r2, #1
   21b70:	e7f4      	b.n	21b5c <strcat+0x4>

00021b72 <strcmp>:
   21b72:	7802      	ldrb	r2, [r0, #0]
   21b74:	780b      	ldrb	r3, [r1, #0]
   21b76:	2a00      	cmp	r2, #0
   21b78:	d003      	beq.n	21b82 <strcmp+0x10>
   21b7a:	3001      	adds	r0, #1
   21b7c:	3101      	adds	r1, #1
   21b7e:	429a      	cmp	r2, r3
   21b80:	d0f7      	beq.n	21b72 <strcmp>
   21b82:	1ad0      	subs	r0, r2, r3
   21b84:	4770      	bx	lr

00021b86 <strcpy>:
   21b86:	1c03      	adds	r3, r0, #0
   21b88:	780a      	ldrb	r2, [r1, #0]
   21b8a:	3101      	adds	r1, #1
   21b8c:	701a      	strb	r2, [r3, #0]
   21b8e:	3301      	adds	r3, #1
   21b90:	2a00      	cmp	r2, #0
   21b92:	d1f9      	bne.n	21b88 <strcpy+0x2>
   21b94:	4770      	bx	lr
	...

00021b98 <strdup>:
   21b98:	b510      	push	{r4, lr}
   21b9a:	4b03      	ldr	r3, [pc, #12]	; (21ba8 <strdup+0x10>)
   21b9c:	0001      	movs	r1, r0
   21b9e:	6818      	ldr	r0, [r3, #0]
   21ba0:	f000 f804 	bl	21bac <_strdup_r>
   21ba4:	bd10      	pop	{r4, pc}
   21ba6:	46c0      	nop			; (mov r8, r8)
   21ba8:	20000120 	.word	0x20000120

00021bac <_strdup_r>:
   21bac:	b570      	push	{r4, r5, r6, lr}
   21bae:	0005      	movs	r5, r0
   21bb0:	0008      	movs	r0, r1
   21bb2:	000e      	movs	r6, r1
   21bb4:	f000 f80d 	bl	21bd2 <strlen>
   21bb8:	1c44      	adds	r4, r0, #1
   21bba:	0021      	movs	r1, r4
   21bbc:	0028      	movs	r0, r5
   21bbe:	f7ff fe7f 	bl	218c0 <_malloc_r>
   21bc2:	1e05      	subs	r5, r0, #0
   21bc4:	d003      	beq.n	21bce <_strdup_r+0x22>
   21bc6:	0022      	movs	r2, r4
   21bc8:	0031      	movs	r1, r6
   21bca:	f7ff fe0b 	bl	217e4 <memcpy>
   21bce:	0028      	movs	r0, r5
   21bd0:	bd70      	pop	{r4, r5, r6, pc}

00021bd2 <strlen>:
   21bd2:	2300      	movs	r3, #0
   21bd4:	5cc2      	ldrb	r2, [r0, r3]
   21bd6:	3301      	adds	r3, #1
   21bd8:	2a00      	cmp	r2, #0
   21bda:	d1fb      	bne.n	21bd4 <strlen+0x2>
   21bdc:	1e58      	subs	r0, r3, #1
   21bde:	4770      	bx	lr

00021be0 <strncmp>:
   21be0:	2300      	movs	r3, #0
   21be2:	b530      	push	{r4, r5, lr}
   21be4:	429a      	cmp	r2, r3
   21be6:	d00a      	beq.n	21bfe <strncmp+0x1e>
   21be8:	3a01      	subs	r2, #1
   21bea:	5cc4      	ldrb	r4, [r0, r3]
   21bec:	5ccd      	ldrb	r5, [r1, r3]
   21bee:	42ac      	cmp	r4, r5
   21bf0:	d104      	bne.n	21bfc <strncmp+0x1c>
   21bf2:	429a      	cmp	r2, r3
   21bf4:	d002      	beq.n	21bfc <strncmp+0x1c>
   21bf6:	3301      	adds	r3, #1
   21bf8:	2c00      	cmp	r4, #0
   21bfa:	d1f6      	bne.n	21bea <strncmp+0xa>
   21bfc:	1b63      	subs	r3, r4, r5
   21bfe:	0018      	movs	r0, r3
   21c00:	bd30      	pop	{r4, r5, pc}

00021c02 <strncpy>:
   21c02:	b570      	push	{r4, r5, r6, lr}
   21c04:	0004      	movs	r4, r0
   21c06:	2a00      	cmp	r2, #0
   21c08:	d100      	bne.n	21c0c <strncpy+0xa>
   21c0a:	bd70      	pop	{r4, r5, r6, pc}
   21c0c:	780d      	ldrb	r5, [r1, #0]
   21c0e:	1e56      	subs	r6, r2, #1
   21c10:	1c63      	adds	r3, r4, #1
   21c12:	7025      	strb	r5, [r4, #0]
   21c14:	3101      	adds	r1, #1
   21c16:	2d00      	cmp	r5, #0
   21c18:	d105      	bne.n	21c26 <strncpy+0x24>
   21c1a:	18a4      	adds	r4, r4, r2
   21c1c:	429c      	cmp	r4, r3
   21c1e:	d0f4      	beq.n	21c0a <strncpy+0x8>
   21c20:	701d      	strb	r5, [r3, #0]
   21c22:	3301      	adds	r3, #1
   21c24:	e7fa      	b.n	21c1c <strncpy+0x1a>
   21c26:	001c      	movs	r4, r3
   21c28:	0032      	movs	r2, r6
   21c2a:	e7ec      	b.n	21c06 <strncpy+0x4>

00021c2c <strrchr>:
   21c2c:	b570      	push	{r4, r5, r6, lr}
   21c2e:	000d      	movs	r5, r1
   21c30:	2400      	movs	r4, #0
   21c32:	2900      	cmp	r1, #0
   21c34:	d105      	bne.n	21c42 <strrchr+0x16>
   21c36:	f000 ff19 	bl	22a6c <strchr>
   21c3a:	0004      	movs	r4, r0
   21c3c:	e006      	b.n	21c4c <strrchr+0x20>
   21c3e:	001c      	movs	r4, r3
   21c40:	1c58      	adds	r0, r3, #1
   21c42:	0029      	movs	r1, r5
   21c44:	f000 ff12 	bl	22a6c <strchr>
   21c48:	1e03      	subs	r3, r0, #0
   21c4a:	d1f8      	bne.n	21c3e <strrchr+0x12>
   21c4c:	0020      	movs	r0, r4
   21c4e:	bd70      	pop	{r4, r5, r6, pc}

00021c50 <strstr>:
   21c50:	b510      	push	{r4, lr}
   21c52:	0002      	movs	r2, r0
   21c54:	7800      	ldrb	r0, [r0, #0]
   21c56:	2800      	cmp	r0, #0
   21c58:	d104      	bne.n	21c64 <strstr+0x14>
   21c5a:	7809      	ldrb	r1, [r1, #0]
   21c5c:	2900      	cmp	r1, #0
   21c5e:	d00d      	beq.n	21c7c <strstr+0x2c>
   21c60:	bd10      	pop	{r4, pc}
   21c62:	3201      	adds	r2, #1
   21c64:	7810      	ldrb	r0, [r2, #0]
   21c66:	2800      	cmp	r0, #0
   21c68:	d0fa      	beq.n	21c60 <strstr+0x10>
   21c6a:	2300      	movs	r3, #0
   21c6c:	5cc8      	ldrb	r0, [r1, r3]
   21c6e:	2800      	cmp	r0, #0
   21c70:	d004      	beq.n	21c7c <strstr+0x2c>
   21c72:	5cd4      	ldrb	r4, [r2, r3]
   21c74:	4284      	cmp	r4, r0
   21c76:	d1f4      	bne.n	21c62 <strstr+0x12>
   21c78:	3301      	adds	r3, #1
   21c7a:	e7f7      	b.n	21c6c <strstr+0x1c>
   21c7c:	0010      	movs	r0, r2
   21c7e:	e7ef      	b.n	21c60 <strstr+0x10>

00021c80 <_strtol_l.isra.0>:
   21c80:	b5f0      	push	{r4, r5, r6, r7, lr}
   21c82:	001f      	movs	r7, r3
   21c84:	000e      	movs	r6, r1
   21c86:	b087      	sub	sp, #28
   21c88:	9005      	str	r0, [sp, #20]
   21c8a:	9103      	str	r1, [sp, #12]
   21c8c:	9202      	str	r2, [sp, #8]
   21c8e:	980c      	ldr	r0, [sp, #48]	; 0x30
   21c90:	7834      	ldrb	r4, [r6, #0]
   21c92:	f000 fb20 	bl	222d6 <__locale_ctype_ptr_l>
   21c96:	2208      	movs	r2, #8
   21c98:	1900      	adds	r0, r0, r4
   21c9a:	7843      	ldrb	r3, [r0, #1]
   21c9c:	1c75      	adds	r5, r6, #1
   21c9e:	4013      	ands	r3, r2
   21ca0:	d10c      	bne.n	21cbc <_strtol_l.isra.0+0x3c>
   21ca2:	2c2d      	cmp	r4, #45	; 0x2d
   21ca4:	d10c      	bne.n	21cc0 <_strtol_l.isra.0+0x40>
   21ca6:	3301      	adds	r3, #1
   21ca8:	782c      	ldrb	r4, [r5, #0]
   21caa:	9301      	str	r3, [sp, #4]
   21cac:	1cb5      	adds	r5, r6, #2
   21cae:	2f00      	cmp	r7, #0
   21cb0:	d00c      	beq.n	21ccc <_strtol_l.isra.0+0x4c>
   21cb2:	2f10      	cmp	r7, #16
   21cb4:	d114      	bne.n	21ce0 <_strtol_l.isra.0+0x60>
   21cb6:	2c30      	cmp	r4, #48	; 0x30
   21cb8:	d00a      	beq.n	21cd0 <_strtol_l.isra.0+0x50>
   21cba:	e011      	b.n	21ce0 <_strtol_l.isra.0+0x60>
   21cbc:	002e      	movs	r6, r5
   21cbe:	e7e6      	b.n	21c8e <_strtol_l.isra.0+0xe>
   21cc0:	9301      	str	r3, [sp, #4]
   21cc2:	2c2b      	cmp	r4, #43	; 0x2b
   21cc4:	d1f3      	bne.n	21cae <_strtol_l.isra.0+0x2e>
   21cc6:	782c      	ldrb	r4, [r5, #0]
   21cc8:	1cb5      	adds	r5, r6, #2
   21cca:	e7f0      	b.n	21cae <_strtol_l.isra.0+0x2e>
   21ccc:	2c30      	cmp	r4, #48	; 0x30
   21cce:	d12f      	bne.n	21d30 <_strtol_l.isra.0+0xb0>
   21cd0:	2220      	movs	r2, #32
   21cd2:	782b      	ldrb	r3, [r5, #0]
   21cd4:	4393      	bics	r3, r2
   21cd6:	2b58      	cmp	r3, #88	; 0x58
   21cd8:	d151      	bne.n	21d7e <_strtol_l.isra.0+0xfe>
   21cda:	2710      	movs	r7, #16
   21cdc:	786c      	ldrb	r4, [r5, #1]
   21cde:	3502      	adds	r5, #2
   21ce0:	9b01      	ldr	r3, [sp, #4]
   21ce2:	4a29      	ldr	r2, [pc, #164]	; (21d88 <_strtol_l.isra.0+0x108>)
   21ce4:	0039      	movs	r1, r7
   21ce6:	189e      	adds	r6, r3, r2
   21ce8:	0030      	movs	r0, r6
   21cea:	f7fd fe2f 	bl	1f94c <__aeabi_uidivmod>
   21cee:	0030      	movs	r0, r6
   21cf0:	9104      	str	r1, [sp, #16]
   21cf2:	0039      	movs	r1, r7
   21cf4:	f7fd fda4 	bl	1f840 <__udivsi3>
   21cf8:	2101      	movs	r1, #1
   21cfa:	2300      	movs	r3, #0
   21cfc:	4249      	negs	r1, r1
   21cfe:	0002      	movs	r2, r0
   21d00:	468c      	mov	ip, r1
   21d02:	0018      	movs	r0, r3
   21d04:	0021      	movs	r1, r4
   21d06:	3930      	subs	r1, #48	; 0x30
   21d08:	2909      	cmp	r1, #9
   21d0a:	d813      	bhi.n	21d34 <_strtol_l.isra.0+0xb4>
   21d0c:	000c      	movs	r4, r1
   21d0e:	42a7      	cmp	r7, r4
   21d10:	dd1c      	ble.n	21d4c <_strtol_l.isra.0+0xcc>
   21d12:	1c59      	adds	r1, r3, #1
   21d14:	d009      	beq.n	21d2a <_strtol_l.isra.0+0xaa>
   21d16:	4663      	mov	r3, ip
   21d18:	4282      	cmp	r2, r0
   21d1a:	d306      	bcc.n	21d2a <_strtol_l.isra.0+0xaa>
   21d1c:	d102      	bne.n	21d24 <_strtol_l.isra.0+0xa4>
   21d1e:	9904      	ldr	r1, [sp, #16]
   21d20:	42a1      	cmp	r1, r4
   21d22:	db02      	blt.n	21d2a <_strtol_l.isra.0+0xaa>
   21d24:	2301      	movs	r3, #1
   21d26:	4378      	muls	r0, r7
   21d28:	1820      	adds	r0, r4, r0
   21d2a:	782c      	ldrb	r4, [r5, #0]
   21d2c:	3501      	adds	r5, #1
   21d2e:	e7e9      	b.n	21d04 <_strtol_l.isra.0+0x84>
   21d30:	270a      	movs	r7, #10
   21d32:	e7d5      	b.n	21ce0 <_strtol_l.isra.0+0x60>
   21d34:	0021      	movs	r1, r4
   21d36:	3941      	subs	r1, #65	; 0x41
   21d38:	2919      	cmp	r1, #25
   21d3a:	d801      	bhi.n	21d40 <_strtol_l.isra.0+0xc0>
   21d3c:	3c37      	subs	r4, #55	; 0x37
   21d3e:	e7e6      	b.n	21d0e <_strtol_l.isra.0+0x8e>
   21d40:	0021      	movs	r1, r4
   21d42:	3961      	subs	r1, #97	; 0x61
   21d44:	2919      	cmp	r1, #25
   21d46:	d801      	bhi.n	21d4c <_strtol_l.isra.0+0xcc>
   21d48:	3c57      	subs	r4, #87	; 0x57
   21d4a:	e7e0      	b.n	21d0e <_strtol_l.isra.0+0x8e>
   21d4c:	1c5a      	adds	r2, r3, #1
   21d4e:	d108      	bne.n	21d62 <_strtol_l.isra.0+0xe2>
   21d50:	9a05      	ldr	r2, [sp, #20]
   21d52:	3323      	adds	r3, #35	; 0x23
   21d54:	6013      	str	r3, [r2, #0]
   21d56:	9b02      	ldr	r3, [sp, #8]
   21d58:	0030      	movs	r0, r6
   21d5a:	2b00      	cmp	r3, #0
   21d5c:	d10b      	bne.n	21d76 <_strtol_l.isra.0+0xf6>
   21d5e:	b007      	add	sp, #28
   21d60:	bdf0      	pop	{r4, r5, r6, r7, pc}
   21d62:	9a01      	ldr	r2, [sp, #4]
   21d64:	2a00      	cmp	r2, #0
   21d66:	d000      	beq.n	21d6a <_strtol_l.isra.0+0xea>
   21d68:	4240      	negs	r0, r0
   21d6a:	9a02      	ldr	r2, [sp, #8]
   21d6c:	2a00      	cmp	r2, #0
   21d6e:	d0f6      	beq.n	21d5e <_strtol_l.isra.0+0xde>
   21d70:	9a03      	ldr	r2, [sp, #12]
   21d72:	2b00      	cmp	r3, #0
   21d74:	d000      	beq.n	21d78 <_strtol_l.isra.0+0xf8>
   21d76:	1e6a      	subs	r2, r5, #1
   21d78:	9b02      	ldr	r3, [sp, #8]
   21d7a:	601a      	str	r2, [r3, #0]
   21d7c:	e7ef      	b.n	21d5e <_strtol_l.isra.0+0xde>
   21d7e:	2430      	movs	r4, #48	; 0x30
   21d80:	2f00      	cmp	r7, #0
   21d82:	d1ad      	bne.n	21ce0 <_strtol_l.isra.0+0x60>
   21d84:	3708      	adds	r7, #8
   21d86:	e7ab      	b.n	21ce0 <_strtol_l.isra.0+0x60>
   21d88:	7fffffff 	.word	0x7fffffff

00021d8c <strtol>:
   21d8c:	b537      	push	{r0, r1, r2, r4, r5, lr}
   21d8e:	0013      	movs	r3, r2
   21d90:	4a06      	ldr	r2, [pc, #24]	; (21dac <strtol+0x20>)
   21d92:	0005      	movs	r5, r0
   21d94:	6810      	ldr	r0, [r2, #0]
   21d96:	6a04      	ldr	r4, [r0, #32]
   21d98:	2c00      	cmp	r4, #0
   21d9a:	d100      	bne.n	21d9e <strtol+0x12>
   21d9c:	4c04      	ldr	r4, [pc, #16]	; (21db0 <strtol+0x24>)
   21d9e:	000a      	movs	r2, r1
   21da0:	9400      	str	r4, [sp, #0]
   21da2:	0029      	movs	r1, r5
   21da4:	f7ff ff6c 	bl	21c80 <_strtol_l.isra.0>
   21da8:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
   21daa:	46c0      	nop			; (mov r8, r8)
   21dac:	20000120 	.word	0x20000120
   21db0:	20000184 	.word	0x20000184

00021db4 <_vsniprintf_r>:
   21db4:	b530      	push	{r4, r5, lr}
   21db6:	0014      	movs	r4, r2
   21db8:	b09b      	sub	sp, #108	; 0x6c
   21dba:	0005      	movs	r5, r0
   21dbc:	001a      	movs	r2, r3
   21dbe:	2c00      	cmp	r4, #0
   21dc0:	da05      	bge.n	21dce <_vsniprintf_r+0x1a>
   21dc2:	238b      	movs	r3, #139	; 0x8b
   21dc4:	6003      	str	r3, [r0, #0]
   21dc6:	2001      	movs	r0, #1
   21dc8:	4240      	negs	r0, r0
   21dca:	b01b      	add	sp, #108	; 0x6c
   21dcc:	bd30      	pop	{r4, r5, pc}
   21dce:	2382      	movs	r3, #130	; 0x82
   21dd0:	4668      	mov	r0, sp
   21dd2:	009b      	lsls	r3, r3, #2
   21dd4:	8183      	strh	r3, [r0, #12]
   21dd6:	2300      	movs	r3, #0
   21dd8:	9100      	str	r1, [sp, #0]
   21dda:	9104      	str	r1, [sp, #16]
   21ddc:	429c      	cmp	r4, r3
   21dde:	d000      	beq.n	21de2 <_vsniprintf_r+0x2e>
   21de0:	1e63      	subs	r3, r4, #1
   21de2:	9302      	str	r3, [sp, #8]
   21de4:	9305      	str	r3, [sp, #20]
   21de6:	2301      	movs	r3, #1
   21de8:	4669      	mov	r1, sp
   21dea:	425b      	negs	r3, r3
   21dec:	81cb      	strh	r3, [r1, #14]
   21dee:	0028      	movs	r0, r5
   21df0:	9b1e      	ldr	r3, [sp, #120]	; 0x78
   21df2:	f000 fb63 	bl	224bc <_svfiprintf_r>
   21df6:	1c43      	adds	r3, r0, #1
   21df8:	da01      	bge.n	21dfe <_vsniprintf_r+0x4a>
   21dfa:	238b      	movs	r3, #139	; 0x8b
   21dfc:	602b      	str	r3, [r5, #0]
   21dfe:	2c00      	cmp	r4, #0
   21e00:	d0e3      	beq.n	21dca <_vsniprintf_r+0x16>
   21e02:	2300      	movs	r3, #0
   21e04:	9a00      	ldr	r2, [sp, #0]
   21e06:	7013      	strb	r3, [r2, #0]
   21e08:	e7df      	b.n	21dca <_vsniprintf_r+0x16>
	...

00021e0c <vsniprintf>:
   21e0c:	b507      	push	{r0, r1, r2, lr}
   21e0e:	9300      	str	r3, [sp, #0]
   21e10:	0013      	movs	r3, r2
   21e12:	000a      	movs	r2, r1
   21e14:	0001      	movs	r1, r0
   21e16:	4802      	ldr	r0, [pc, #8]	; (21e20 <vsniprintf+0x14>)
   21e18:	6800      	ldr	r0, [r0, #0]
   21e1a:	f7ff ffcb 	bl	21db4 <_vsniprintf_r>
   21e1e:	bd0e      	pop	{r1, r2, r3, pc}
   21e20:	20000120 	.word	0x20000120

00021e24 <__swbuf_r>:
   21e24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   21e26:	0005      	movs	r5, r0
   21e28:	000e      	movs	r6, r1
   21e2a:	0014      	movs	r4, r2
   21e2c:	2800      	cmp	r0, #0
   21e2e:	d004      	beq.n	21e3a <__swbuf_r+0x16>
   21e30:	6983      	ldr	r3, [r0, #24]
   21e32:	2b00      	cmp	r3, #0
   21e34:	d101      	bne.n	21e3a <__swbuf_r+0x16>
   21e36:	f000 f9b9 	bl	221ac <__sinit>
   21e3a:	4b22      	ldr	r3, [pc, #136]	; (21ec4 <__swbuf_r+0xa0>)
   21e3c:	429c      	cmp	r4, r3
   21e3e:	d12d      	bne.n	21e9c <__swbuf_r+0x78>
   21e40:	686c      	ldr	r4, [r5, #4]
   21e42:	69a3      	ldr	r3, [r4, #24]
   21e44:	60a3      	str	r3, [r4, #8]
   21e46:	89a3      	ldrh	r3, [r4, #12]
   21e48:	071b      	lsls	r3, r3, #28
   21e4a:	d531      	bpl.n	21eb0 <__swbuf_r+0x8c>
   21e4c:	6923      	ldr	r3, [r4, #16]
   21e4e:	2b00      	cmp	r3, #0
   21e50:	d02e      	beq.n	21eb0 <__swbuf_r+0x8c>
   21e52:	6823      	ldr	r3, [r4, #0]
   21e54:	6922      	ldr	r2, [r4, #16]
   21e56:	b2f7      	uxtb	r7, r6
   21e58:	1a98      	subs	r0, r3, r2
   21e5a:	6963      	ldr	r3, [r4, #20]
   21e5c:	b2f6      	uxtb	r6, r6
   21e5e:	4298      	cmp	r0, r3
   21e60:	db05      	blt.n	21e6e <__swbuf_r+0x4a>
   21e62:	0021      	movs	r1, r4
   21e64:	0028      	movs	r0, r5
   21e66:	f000 f933 	bl	220d0 <_fflush_r>
   21e6a:	2800      	cmp	r0, #0
   21e6c:	d126      	bne.n	21ebc <__swbuf_r+0x98>
   21e6e:	68a3      	ldr	r3, [r4, #8]
   21e70:	3001      	adds	r0, #1
   21e72:	3b01      	subs	r3, #1
   21e74:	60a3      	str	r3, [r4, #8]
   21e76:	6823      	ldr	r3, [r4, #0]
   21e78:	1c5a      	adds	r2, r3, #1
   21e7a:	6022      	str	r2, [r4, #0]
   21e7c:	701f      	strb	r7, [r3, #0]
   21e7e:	6963      	ldr	r3, [r4, #20]
   21e80:	4298      	cmp	r0, r3
   21e82:	d004      	beq.n	21e8e <__swbuf_r+0x6a>
   21e84:	89a3      	ldrh	r3, [r4, #12]
   21e86:	07db      	lsls	r3, r3, #31
   21e88:	d51a      	bpl.n	21ec0 <__swbuf_r+0x9c>
   21e8a:	2e0a      	cmp	r6, #10
   21e8c:	d118      	bne.n	21ec0 <__swbuf_r+0x9c>
   21e8e:	0021      	movs	r1, r4
   21e90:	0028      	movs	r0, r5
   21e92:	f000 f91d 	bl	220d0 <_fflush_r>
   21e96:	2800      	cmp	r0, #0
   21e98:	d012      	beq.n	21ec0 <__swbuf_r+0x9c>
   21e9a:	e00f      	b.n	21ebc <__swbuf_r+0x98>
   21e9c:	4b0a      	ldr	r3, [pc, #40]	; (21ec8 <__swbuf_r+0xa4>)
   21e9e:	429c      	cmp	r4, r3
   21ea0:	d101      	bne.n	21ea6 <__swbuf_r+0x82>
   21ea2:	68ac      	ldr	r4, [r5, #8]
   21ea4:	e7cd      	b.n	21e42 <__swbuf_r+0x1e>
   21ea6:	4b09      	ldr	r3, [pc, #36]	; (21ecc <__swbuf_r+0xa8>)
   21ea8:	429c      	cmp	r4, r3
   21eaa:	d1ca      	bne.n	21e42 <__swbuf_r+0x1e>
   21eac:	68ec      	ldr	r4, [r5, #12]
   21eae:	e7c8      	b.n	21e42 <__swbuf_r+0x1e>
   21eb0:	0021      	movs	r1, r4
   21eb2:	0028      	movs	r0, r5
   21eb4:	f000 f80c 	bl	21ed0 <__swsetup_r>
   21eb8:	2800      	cmp	r0, #0
   21eba:	d0ca      	beq.n	21e52 <__swbuf_r+0x2e>
   21ebc:	2601      	movs	r6, #1
   21ebe:	4276      	negs	r6, r6
   21ec0:	0030      	movs	r0, r6
   21ec2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   21ec4:	00026bd0 	.word	0x00026bd0
   21ec8:	00026bf0 	.word	0x00026bf0
   21ecc:	00026bb0 	.word	0x00026bb0

00021ed0 <__swsetup_r>:
   21ed0:	4b36      	ldr	r3, [pc, #216]	; (21fac <__swsetup_r+0xdc>)
   21ed2:	b570      	push	{r4, r5, r6, lr}
   21ed4:	681d      	ldr	r5, [r3, #0]
   21ed6:	0006      	movs	r6, r0
   21ed8:	000c      	movs	r4, r1
   21eda:	2d00      	cmp	r5, #0
   21edc:	d005      	beq.n	21eea <__swsetup_r+0x1a>
   21ede:	69ab      	ldr	r3, [r5, #24]
   21ee0:	2b00      	cmp	r3, #0
   21ee2:	d102      	bne.n	21eea <__swsetup_r+0x1a>
   21ee4:	0028      	movs	r0, r5
   21ee6:	f000 f961 	bl	221ac <__sinit>
   21eea:	4b31      	ldr	r3, [pc, #196]	; (21fb0 <__swsetup_r+0xe0>)
   21eec:	429c      	cmp	r4, r3
   21eee:	d10f      	bne.n	21f10 <__swsetup_r+0x40>
   21ef0:	686c      	ldr	r4, [r5, #4]
   21ef2:	230c      	movs	r3, #12
   21ef4:	5ee2      	ldrsh	r2, [r4, r3]
   21ef6:	b293      	uxth	r3, r2
   21ef8:	0719      	lsls	r1, r3, #28
   21efa:	d42d      	bmi.n	21f58 <__swsetup_r+0x88>
   21efc:	06d9      	lsls	r1, r3, #27
   21efe:	d411      	bmi.n	21f24 <__swsetup_r+0x54>
   21f00:	2309      	movs	r3, #9
   21f02:	2001      	movs	r0, #1
   21f04:	6033      	str	r3, [r6, #0]
   21f06:	3337      	adds	r3, #55	; 0x37
   21f08:	4313      	orrs	r3, r2
   21f0a:	81a3      	strh	r3, [r4, #12]
   21f0c:	4240      	negs	r0, r0
   21f0e:	bd70      	pop	{r4, r5, r6, pc}
   21f10:	4b28      	ldr	r3, [pc, #160]	; (21fb4 <__swsetup_r+0xe4>)
   21f12:	429c      	cmp	r4, r3
   21f14:	d101      	bne.n	21f1a <__swsetup_r+0x4a>
   21f16:	68ac      	ldr	r4, [r5, #8]
   21f18:	e7eb      	b.n	21ef2 <__swsetup_r+0x22>
   21f1a:	4b27      	ldr	r3, [pc, #156]	; (21fb8 <__swsetup_r+0xe8>)
   21f1c:	429c      	cmp	r4, r3
   21f1e:	d1e8      	bne.n	21ef2 <__swsetup_r+0x22>
   21f20:	68ec      	ldr	r4, [r5, #12]
   21f22:	e7e6      	b.n	21ef2 <__swsetup_r+0x22>
   21f24:	075b      	lsls	r3, r3, #29
   21f26:	d513      	bpl.n	21f50 <__swsetup_r+0x80>
   21f28:	6b61      	ldr	r1, [r4, #52]	; 0x34
   21f2a:	2900      	cmp	r1, #0
   21f2c:	d008      	beq.n	21f40 <__swsetup_r+0x70>
   21f2e:	0023      	movs	r3, r4
   21f30:	3344      	adds	r3, #68	; 0x44
   21f32:	4299      	cmp	r1, r3
   21f34:	d002      	beq.n	21f3c <__swsetup_r+0x6c>
   21f36:	0030      	movs	r0, r6
   21f38:	f7ff fc78 	bl	2182c <_free_r>
   21f3c:	2300      	movs	r3, #0
   21f3e:	6363      	str	r3, [r4, #52]	; 0x34
   21f40:	2224      	movs	r2, #36	; 0x24
   21f42:	89a3      	ldrh	r3, [r4, #12]
   21f44:	4393      	bics	r3, r2
   21f46:	81a3      	strh	r3, [r4, #12]
   21f48:	2300      	movs	r3, #0
   21f4a:	6063      	str	r3, [r4, #4]
   21f4c:	6923      	ldr	r3, [r4, #16]
   21f4e:	6023      	str	r3, [r4, #0]
   21f50:	2308      	movs	r3, #8
   21f52:	89a2      	ldrh	r2, [r4, #12]
   21f54:	4313      	orrs	r3, r2
   21f56:	81a3      	strh	r3, [r4, #12]
   21f58:	6923      	ldr	r3, [r4, #16]
   21f5a:	2b00      	cmp	r3, #0
   21f5c:	d10b      	bne.n	21f76 <__swsetup_r+0xa6>
   21f5e:	21a0      	movs	r1, #160	; 0xa0
   21f60:	2280      	movs	r2, #128	; 0x80
   21f62:	89a3      	ldrh	r3, [r4, #12]
   21f64:	0089      	lsls	r1, r1, #2
   21f66:	0092      	lsls	r2, r2, #2
   21f68:	400b      	ands	r3, r1
   21f6a:	4293      	cmp	r3, r2
   21f6c:	d003      	beq.n	21f76 <__swsetup_r+0xa6>
   21f6e:	0021      	movs	r1, r4
   21f70:	0030      	movs	r0, r6
   21f72:	f000 f9e9 	bl	22348 <__smakebuf_r>
   21f76:	2301      	movs	r3, #1
   21f78:	89a2      	ldrh	r2, [r4, #12]
   21f7a:	4013      	ands	r3, r2
   21f7c:	d011      	beq.n	21fa2 <__swsetup_r+0xd2>
   21f7e:	2300      	movs	r3, #0
   21f80:	60a3      	str	r3, [r4, #8]
   21f82:	6963      	ldr	r3, [r4, #20]
   21f84:	425b      	negs	r3, r3
   21f86:	61a3      	str	r3, [r4, #24]
   21f88:	2000      	movs	r0, #0
   21f8a:	6923      	ldr	r3, [r4, #16]
   21f8c:	4283      	cmp	r3, r0
   21f8e:	d1be      	bne.n	21f0e <__swsetup_r+0x3e>
   21f90:	230c      	movs	r3, #12
   21f92:	5ee2      	ldrsh	r2, [r4, r3]
   21f94:	0613      	lsls	r3, r2, #24
   21f96:	d5ba      	bpl.n	21f0e <__swsetup_r+0x3e>
   21f98:	2340      	movs	r3, #64	; 0x40
   21f9a:	4313      	orrs	r3, r2
   21f9c:	81a3      	strh	r3, [r4, #12]
   21f9e:	3801      	subs	r0, #1
   21fa0:	e7b5      	b.n	21f0e <__swsetup_r+0x3e>
   21fa2:	0792      	lsls	r2, r2, #30
   21fa4:	d400      	bmi.n	21fa8 <__swsetup_r+0xd8>
   21fa6:	6963      	ldr	r3, [r4, #20]
   21fa8:	60a3      	str	r3, [r4, #8]
   21faa:	e7ed      	b.n	21f88 <__swsetup_r+0xb8>
   21fac:	20000120 	.word	0x20000120
   21fb0:	00026bd0 	.word	0x00026bd0
   21fb4:	00026bf0 	.word	0x00026bf0
   21fb8:	00026bb0 	.word	0x00026bb0

00021fbc <__sflush_r>:
   21fbc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   21fbe:	898a      	ldrh	r2, [r1, #12]
   21fc0:	0005      	movs	r5, r0
   21fc2:	000c      	movs	r4, r1
   21fc4:	0713      	lsls	r3, r2, #28
   21fc6:	d460      	bmi.n	2208a <__sflush_r+0xce>
   21fc8:	684b      	ldr	r3, [r1, #4]
   21fca:	2b00      	cmp	r3, #0
   21fcc:	dc04      	bgt.n	21fd8 <__sflush_r+0x1c>
   21fce:	6c0b      	ldr	r3, [r1, #64]	; 0x40
   21fd0:	2b00      	cmp	r3, #0
   21fd2:	dc01      	bgt.n	21fd8 <__sflush_r+0x1c>
   21fd4:	2000      	movs	r0, #0
   21fd6:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
   21fd8:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
   21fda:	2f00      	cmp	r7, #0
   21fdc:	d0fa      	beq.n	21fd4 <__sflush_r+0x18>
   21fde:	2300      	movs	r3, #0
   21fe0:	682e      	ldr	r6, [r5, #0]
   21fe2:	602b      	str	r3, [r5, #0]
   21fe4:	2380      	movs	r3, #128	; 0x80
   21fe6:	015b      	lsls	r3, r3, #5
   21fe8:	401a      	ands	r2, r3
   21fea:	d034      	beq.n	22056 <__sflush_r+0x9a>
   21fec:	6d60      	ldr	r0, [r4, #84]	; 0x54
   21fee:	89a3      	ldrh	r3, [r4, #12]
   21ff0:	075b      	lsls	r3, r3, #29
   21ff2:	d506      	bpl.n	22002 <__sflush_r+0x46>
   21ff4:	6863      	ldr	r3, [r4, #4]
   21ff6:	1ac0      	subs	r0, r0, r3
   21ff8:	6b63      	ldr	r3, [r4, #52]	; 0x34
   21ffa:	2b00      	cmp	r3, #0
   21ffc:	d001      	beq.n	22002 <__sflush_r+0x46>
   21ffe:	6c23      	ldr	r3, [r4, #64]	; 0x40
   22000:	1ac0      	subs	r0, r0, r3
   22002:	0002      	movs	r2, r0
   22004:	6a21      	ldr	r1, [r4, #32]
   22006:	2300      	movs	r3, #0
   22008:	0028      	movs	r0, r5
   2200a:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
   2200c:	47b8      	blx	r7
   2200e:	89a1      	ldrh	r1, [r4, #12]
   22010:	1c43      	adds	r3, r0, #1
   22012:	d106      	bne.n	22022 <__sflush_r+0x66>
   22014:	682b      	ldr	r3, [r5, #0]
   22016:	2b1d      	cmp	r3, #29
   22018:	d831      	bhi.n	2207e <__sflush_r+0xc2>
   2201a:	4a2c      	ldr	r2, [pc, #176]	; (220cc <__sflush_r+0x110>)
   2201c:	40da      	lsrs	r2, r3
   2201e:	07d3      	lsls	r3, r2, #31
   22020:	d52d      	bpl.n	2207e <__sflush_r+0xc2>
   22022:	2300      	movs	r3, #0
   22024:	6063      	str	r3, [r4, #4]
   22026:	6923      	ldr	r3, [r4, #16]
   22028:	6023      	str	r3, [r4, #0]
   2202a:	04cb      	lsls	r3, r1, #19
   2202c:	d505      	bpl.n	2203a <__sflush_r+0x7e>
   2202e:	1c43      	adds	r3, r0, #1
   22030:	d102      	bne.n	22038 <__sflush_r+0x7c>
   22032:	682b      	ldr	r3, [r5, #0]
   22034:	2b00      	cmp	r3, #0
   22036:	d100      	bne.n	2203a <__sflush_r+0x7e>
   22038:	6560      	str	r0, [r4, #84]	; 0x54
   2203a:	6b61      	ldr	r1, [r4, #52]	; 0x34
   2203c:	602e      	str	r6, [r5, #0]
   2203e:	2900      	cmp	r1, #0
   22040:	d0c8      	beq.n	21fd4 <__sflush_r+0x18>
   22042:	0023      	movs	r3, r4
   22044:	3344      	adds	r3, #68	; 0x44
   22046:	4299      	cmp	r1, r3
   22048:	d002      	beq.n	22050 <__sflush_r+0x94>
   2204a:	0028      	movs	r0, r5
   2204c:	f7ff fbee 	bl	2182c <_free_r>
   22050:	2000      	movs	r0, #0
   22052:	6360      	str	r0, [r4, #52]	; 0x34
   22054:	e7bf      	b.n	21fd6 <__sflush_r+0x1a>
   22056:	2301      	movs	r3, #1
   22058:	6a21      	ldr	r1, [r4, #32]
   2205a:	0028      	movs	r0, r5
   2205c:	47b8      	blx	r7
   2205e:	1c43      	adds	r3, r0, #1
   22060:	d1c5      	bne.n	21fee <__sflush_r+0x32>
   22062:	682b      	ldr	r3, [r5, #0]
   22064:	2b00      	cmp	r3, #0
   22066:	d0c2      	beq.n	21fee <__sflush_r+0x32>
   22068:	2b1d      	cmp	r3, #29
   2206a:	d001      	beq.n	22070 <__sflush_r+0xb4>
   2206c:	2b16      	cmp	r3, #22
   2206e:	d101      	bne.n	22074 <__sflush_r+0xb8>
   22070:	602e      	str	r6, [r5, #0]
   22072:	e7af      	b.n	21fd4 <__sflush_r+0x18>
   22074:	2340      	movs	r3, #64	; 0x40
   22076:	89a2      	ldrh	r2, [r4, #12]
   22078:	4313      	orrs	r3, r2
   2207a:	81a3      	strh	r3, [r4, #12]
   2207c:	e7ab      	b.n	21fd6 <__sflush_r+0x1a>
   2207e:	2340      	movs	r3, #64	; 0x40
   22080:	430b      	orrs	r3, r1
   22082:	2001      	movs	r0, #1
   22084:	81a3      	strh	r3, [r4, #12]
   22086:	4240      	negs	r0, r0
   22088:	e7a5      	b.n	21fd6 <__sflush_r+0x1a>
   2208a:	690f      	ldr	r7, [r1, #16]
   2208c:	2f00      	cmp	r7, #0
   2208e:	d0a1      	beq.n	21fd4 <__sflush_r+0x18>
   22090:	680b      	ldr	r3, [r1, #0]
   22092:	600f      	str	r7, [r1, #0]
   22094:	1bdb      	subs	r3, r3, r7
   22096:	9301      	str	r3, [sp, #4]
   22098:	2300      	movs	r3, #0
   2209a:	0792      	lsls	r2, r2, #30
   2209c:	d100      	bne.n	220a0 <__sflush_r+0xe4>
   2209e:	694b      	ldr	r3, [r1, #20]
   220a0:	60a3      	str	r3, [r4, #8]
   220a2:	9b01      	ldr	r3, [sp, #4]
   220a4:	2b00      	cmp	r3, #0
   220a6:	dc00      	bgt.n	220aa <__sflush_r+0xee>
   220a8:	e794      	b.n	21fd4 <__sflush_r+0x18>
   220aa:	9b01      	ldr	r3, [sp, #4]
   220ac:	003a      	movs	r2, r7
   220ae:	6a21      	ldr	r1, [r4, #32]
   220b0:	0028      	movs	r0, r5
   220b2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
   220b4:	47b0      	blx	r6
   220b6:	2800      	cmp	r0, #0
   220b8:	dc03      	bgt.n	220c2 <__sflush_r+0x106>
   220ba:	2340      	movs	r3, #64	; 0x40
   220bc:	89a2      	ldrh	r2, [r4, #12]
   220be:	4313      	orrs	r3, r2
   220c0:	e7df      	b.n	22082 <__sflush_r+0xc6>
   220c2:	9b01      	ldr	r3, [sp, #4]
   220c4:	183f      	adds	r7, r7, r0
   220c6:	1a1b      	subs	r3, r3, r0
   220c8:	9301      	str	r3, [sp, #4]
   220ca:	e7ea      	b.n	220a2 <__sflush_r+0xe6>
   220cc:	20400001 	.word	0x20400001

000220d0 <_fflush_r>:
   220d0:	690b      	ldr	r3, [r1, #16]
   220d2:	b570      	push	{r4, r5, r6, lr}
   220d4:	0005      	movs	r5, r0
   220d6:	000c      	movs	r4, r1
   220d8:	2b00      	cmp	r3, #0
   220da:	d101      	bne.n	220e0 <_fflush_r+0x10>
   220dc:	2000      	movs	r0, #0
   220de:	bd70      	pop	{r4, r5, r6, pc}
   220e0:	2800      	cmp	r0, #0
   220e2:	d004      	beq.n	220ee <_fflush_r+0x1e>
   220e4:	6983      	ldr	r3, [r0, #24]
   220e6:	2b00      	cmp	r3, #0
   220e8:	d101      	bne.n	220ee <_fflush_r+0x1e>
   220ea:	f000 f85f 	bl	221ac <__sinit>
   220ee:	4b0b      	ldr	r3, [pc, #44]	; (2211c <_fflush_r+0x4c>)
   220f0:	429c      	cmp	r4, r3
   220f2:	d109      	bne.n	22108 <_fflush_r+0x38>
   220f4:	686c      	ldr	r4, [r5, #4]
   220f6:	220c      	movs	r2, #12
   220f8:	5ea3      	ldrsh	r3, [r4, r2]
   220fa:	2b00      	cmp	r3, #0
   220fc:	d0ee      	beq.n	220dc <_fflush_r+0xc>
   220fe:	0021      	movs	r1, r4
   22100:	0028      	movs	r0, r5
   22102:	f7ff ff5b 	bl	21fbc <__sflush_r>
   22106:	e7ea      	b.n	220de <_fflush_r+0xe>
   22108:	4b05      	ldr	r3, [pc, #20]	; (22120 <_fflush_r+0x50>)
   2210a:	429c      	cmp	r4, r3
   2210c:	d101      	bne.n	22112 <_fflush_r+0x42>
   2210e:	68ac      	ldr	r4, [r5, #8]
   22110:	e7f1      	b.n	220f6 <_fflush_r+0x26>
   22112:	4b04      	ldr	r3, [pc, #16]	; (22124 <_fflush_r+0x54>)
   22114:	429c      	cmp	r4, r3
   22116:	d1ee      	bne.n	220f6 <_fflush_r+0x26>
   22118:	68ec      	ldr	r4, [r5, #12]
   2211a:	e7ec      	b.n	220f6 <_fflush_r+0x26>
   2211c:	00026bd0 	.word	0x00026bd0
   22120:	00026bf0 	.word	0x00026bf0
   22124:	00026bb0 	.word	0x00026bb0

00022128 <_cleanup_r>:
   22128:	b510      	push	{r4, lr}
   2212a:	4902      	ldr	r1, [pc, #8]	; (22134 <_cleanup_r+0xc>)
   2212c:	f000 f8b2 	bl	22294 <_fwalk_reent>
   22130:	bd10      	pop	{r4, pc}
   22132:	46c0      	nop			; (mov r8, r8)
   22134:	000220d1 	.word	0x000220d1

00022138 <std.isra.0>:
   22138:	2300      	movs	r3, #0
   2213a:	b510      	push	{r4, lr}
   2213c:	0004      	movs	r4, r0
   2213e:	6003      	str	r3, [r0, #0]
   22140:	6043      	str	r3, [r0, #4]
   22142:	6083      	str	r3, [r0, #8]
   22144:	8181      	strh	r1, [r0, #12]
   22146:	6643      	str	r3, [r0, #100]	; 0x64
   22148:	81c2      	strh	r2, [r0, #14]
   2214a:	6103      	str	r3, [r0, #16]
   2214c:	6143      	str	r3, [r0, #20]
   2214e:	6183      	str	r3, [r0, #24]
   22150:	0019      	movs	r1, r3
   22152:	2208      	movs	r2, #8
   22154:	305c      	adds	r0, #92	; 0x5c
   22156:	f7ff fb60 	bl	2181a <memset>
   2215a:	4b05      	ldr	r3, [pc, #20]	; (22170 <std.isra.0+0x38>)
   2215c:	6224      	str	r4, [r4, #32]
   2215e:	6263      	str	r3, [r4, #36]	; 0x24
   22160:	4b04      	ldr	r3, [pc, #16]	; (22174 <std.isra.0+0x3c>)
   22162:	62a3      	str	r3, [r4, #40]	; 0x28
   22164:	4b04      	ldr	r3, [pc, #16]	; (22178 <std.isra.0+0x40>)
   22166:	62e3      	str	r3, [r4, #44]	; 0x2c
   22168:	4b04      	ldr	r3, [pc, #16]	; (2217c <std.isra.0+0x44>)
   2216a:	6323      	str	r3, [r4, #48]	; 0x30
   2216c:	bd10      	pop	{r4, pc}
   2216e:	46c0      	nop			; (mov r8, r8)
   22170:	000229d5 	.word	0x000229d5
   22174:	000229fd 	.word	0x000229fd
   22178:	00022a35 	.word	0x00022a35
   2217c:	00022a61 	.word	0x00022a61

00022180 <__sfmoreglue>:
   22180:	b570      	push	{r4, r5, r6, lr}
   22182:	2568      	movs	r5, #104	; 0x68
   22184:	1e4a      	subs	r2, r1, #1
   22186:	4355      	muls	r5, r2
   22188:	000e      	movs	r6, r1
   2218a:	0029      	movs	r1, r5
   2218c:	3174      	adds	r1, #116	; 0x74
   2218e:	f7ff fb97 	bl	218c0 <_malloc_r>
   22192:	1e04      	subs	r4, r0, #0
   22194:	d008      	beq.n	221a8 <__sfmoreglue+0x28>
   22196:	2100      	movs	r1, #0
   22198:	002a      	movs	r2, r5
   2219a:	6001      	str	r1, [r0, #0]
   2219c:	6046      	str	r6, [r0, #4]
   2219e:	300c      	adds	r0, #12
   221a0:	60a0      	str	r0, [r4, #8]
   221a2:	3268      	adds	r2, #104	; 0x68
   221a4:	f7ff fb39 	bl	2181a <memset>
   221a8:	0020      	movs	r0, r4
   221aa:	bd70      	pop	{r4, r5, r6, pc}

000221ac <__sinit>:
   221ac:	6983      	ldr	r3, [r0, #24]
   221ae:	b513      	push	{r0, r1, r4, lr}
   221b0:	0004      	movs	r4, r0
   221b2:	2b00      	cmp	r3, #0
   221b4:	d128      	bne.n	22208 <__sinit+0x5c>
   221b6:	6483      	str	r3, [r0, #72]	; 0x48
   221b8:	64c3      	str	r3, [r0, #76]	; 0x4c
   221ba:	6503      	str	r3, [r0, #80]	; 0x50
   221bc:	4b13      	ldr	r3, [pc, #76]	; (2220c <__sinit+0x60>)
   221be:	4a14      	ldr	r2, [pc, #80]	; (22210 <__sinit+0x64>)
   221c0:	681b      	ldr	r3, [r3, #0]
   221c2:	6282      	str	r2, [r0, #40]	; 0x28
   221c4:	9301      	str	r3, [sp, #4]
   221c6:	4298      	cmp	r0, r3
   221c8:	d101      	bne.n	221ce <__sinit+0x22>
   221ca:	2301      	movs	r3, #1
   221cc:	6183      	str	r3, [r0, #24]
   221ce:	0020      	movs	r0, r4
   221d0:	f000 f820 	bl	22214 <__sfp>
   221d4:	6060      	str	r0, [r4, #4]
   221d6:	0020      	movs	r0, r4
   221d8:	f000 f81c 	bl	22214 <__sfp>
   221dc:	60a0      	str	r0, [r4, #8]
   221de:	0020      	movs	r0, r4
   221e0:	f000 f818 	bl	22214 <__sfp>
   221e4:	2200      	movs	r2, #0
   221e6:	60e0      	str	r0, [r4, #12]
   221e8:	2104      	movs	r1, #4
   221ea:	6860      	ldr	r0, [r4, #4]
   221ec:	f7ff ffa4 	bl	22138 <std.isra.0>
   221f0:	2201      	movs	r2, #1
   221f2:	2109      	movs	r1, #9
   221f4:	68a0      	ldr	r0, [r4, #8]
   221f6:	f7ff ff9f 	bl	22138 <std.isra.0>
   221fa:	2202      	movs	r2, #2
   221fc:	2112      	movs	r1, #18
   221fe:	68e0      	ldr	r0, [r4, #12]
   22200:	f7ff ff9a 	bl	22138 <std.isra.0>
   22204:	2301      	movs	r3, #1
   22206:	61a3      	str	r3, [r4, #24]
   22208:	bd13      	pop	{r0, r1, r4, pc}
   2220a:	46c0      	nop			; (mov r8, r8)
   2220c:	00026bac 	.word	0x00026bac
   22210:	00022129 	.word	0x00022129

00022214 <__sfp>:
   22214:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   22216:	4b1e      	ldr	r3, [pc, #120]	; (22290 <__sfp+0x7c>)
   22218:	0007      	movs	r7, r0
   2221a:	681e      	ldr	r6, [r3, #0]
   2221c:	69b3      	ldr	r3, [r6, #24]
   2221e:	2b00      	cmp	r3, #0
   22220:	d102      	bne.n	22228 <__sfp+0x14>
   22222:	0030      	movs	r0, r6
   22224:	f7ff ffc2 	bl	221ac <__sinit>
   22228:	3648      	adds	r6, #72	; 0x48
   2222a:	68b4      	ldr	r4, [r6, #8]
   2222c:	6873      	ldr	r3, [r6, #4]
   2222e:	3b01      	subs	r3, #1
   22230:	d504      	bpl.n	2223c <__sfp+0x28>
   22232:	6833      	ldr	r3, [r6, #0]
   22234:	2b00      	cmp	r3, #0
   22236:	d007      	beq.n	22248 <__sfp+0x34>
   22238:	6836      	ldr	r6, [r6, #0]
   2223a:	e7f6      	b.n	2222a <__sfp+0x16>
   2223c:	220c      	movs	r2, #12
   2223e:	5ea5      	ldrsh	r5, [r4, r2]
   22240:	2d00      	cmp	r5, #0
   22242:	d00d      	beq.n	22260 <__sfp+0x4c>
   22244:	3468      	adds	r4, #104	; 0x68
   22246:	e7f2      	b.n	2222e <__sfp+0x1a>
   22248:	2104      	movs	r1, #4
   2224a:	0038      	movs	r0, r7
   2224c:	f7ff ff98 	bl	22180 <__sfmoreglue>
   22250:	6030      	str	r0, [r6, #0]
   22252:	2800      	cmp	r0, #0
   22254:	d1f0      	bne.n	22238 <__sfp+0x24>
   22256:	230c      	movs	r3, #12
   22258:	0004      	movs	r4, r0
   2225a:	603b      	str	r3, [r7, #0]
   2225c:	0020      	movs	r0, r4
   2225e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   22260:	2301      	movs	r3, #1
   22262:	0020      	movs	r0, r4
   22264:	425b      	negs	r3, r3
   22266:	81e3      	strh	r3, [r4, #14]
   22268:	3302      	adds	r3, #2
   2226a:	81a3      	strh	r3, [r4, #12]
   2226c:	6665      	str	r5, [r4, #100]	; 0x64
   2226e:	6025      	str	r5, [r4, #0]
   22270:	60a5      	str	r5, [r4, #8]
   22272:	6065      	str	r5, [r4, #4]
   22274:	6125      	str	r5, [r4, #16]
   22276:	6165      	str	r5, [r4, #20]
   22278:	61a5      	str	r5, [r4, #24]
   2227a:	2208      	movs	r2, #8
   2227c:	0029      	movs	r1, r5
   2227e:	305c      	adds	r0, #92	; 0x5c
   22280:	f7ff facb 	bl	2181a <memset>
   22284:	6365      	str	r5, [r4, #52]	; 0x34
   22286:	63a5      	str	r5, [r4, #56]	; 0x38
   22288:	64a5      	str	r5, [r4, #72]	; 0x48
   2228a:	64e5      	str	r5, [r4, #76]	; 0x4c
   2228c:	e7e6      	b.n	2225c <__sfp+0x48>
   2228e:	46c0      	nop			; (mov r8, r8)
   22290:	00026bac 	.word	0x00026bac

00022294 <_fwalk_reent>:
   22294:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   22296:	0004      	movs	r4, r0
   22298:	0007      	movs	r7, r0
   2229a:	2600      	movs	r6, #0
   2229c:	9101      	str	r1, [sp, #4]
   2229e:	3448      	adds	r4, #72	; 0x48
   222a0:	2c00      	cmp	r4, #0
   222a2:	d101      	bne.n	222a8 <_fwalk_reent+0x14>
   222a4:	0030      	movs	r0, r6
   222a6:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
   222a8:	6863      	ldr	r3, [r4, #4]
   222aa:	68a5      	ldr	r5, [r4, #8]
   222ac:	9300      	str	r3, [sp, #0]
   222ae:	9b00      	ldr	r3, [sp, #0]
   222b0:	3b01      	subs	r3, #1
   222b2:	9300      	str	r3, [sp, #0]
   222b4:	d501      	bpl.n	222ba <_fwalk_reent+0x26>
   222b6:	6824      	ldr	r4, [r4, #0]
   222b8:	e7f2      	b.n	222a0 <_fwalk_reent+0xc>
   222ba:	89ab      	ldrh	r3, [r5, #12]
   222bc:	2b01      	cmp	r3, #1
   222be:	d908      	bls.n	222d2 <_fwalk_reent+0x3e>
   222c0:	220e      	movs	r2, #14
   222c2:	5eab      	ldrsh	r3, [r5, r2]
   222c4:	3301      	adds	r3, #1
   222c6:	d004      	beq.n	222d2 <_fwalk_reent+0x3e>
   222c8:	0029      	movs	r1, r5
   222ca:	0038      	movs	r0, r7
   222cc:	9b01      	ldr	r3, [sp, #4]
   222ce:	4798      	blx	r3
   222d0:	4306      	orrs	r6, r0
   222d2:	3568      	adds	r5, #104	; 0x68
   222d4:	e7eb      	b.n	222ae <_fwalk_reent+0x1a>

000222d6 <__locale_ctype_ptr_l>:
   222d6:	30ec      	adds	r0, #236	; 0xec
   222d8:	6800      	ldr	r0, [r0, #0]
   222da:	4770      	bx	lr

000222dc <__locale_ctype_ptr>:
   222dc:	4b04      	ldr	r3, [pc, #16]	; (222f0 <__locale_ctype_ptr+0x14>)
   222de:	681b      	ldr	r3, [r3, #0]
   222e0:	6a1b      	ldr	r3, [r3, #32]
   222e2:	2b00      	cmp	r3, #0
   222e4:	d100      	bne.n	222e8 <__locale_ctype_ptr+0xc>
   222e6:	4b03      	ldr	r3, [pc, #12]	; (222f4 <__locale_ctype_ptr+0x18>)
   222e8:	33ec      	adds	r3, #236	; 0xec
   222ea:	6818      	ldr	r0, [r3, #0]
   222ec:	4770      	bx	lr
   222ee:	46c0      	nop			; (mov r8, r8)
   222f0:	20000120 	.word	0x20000120
   222f4:	20000184 	.word	0x20000184

000222f8 <__swhatbuf_r>:
   222f8:	b570      	push	{r4, r5, r6, lr}
   222fa:	000e      	movs	r6, r1
   222fc:	001d      	movs	r5, r3
   222fe:	230e      	movs	r3, #14
   22300:	5ec9      	ldrsh	r1, [r1, r3]
   22302:	b090      	sub	sp, #64	; 0x40
   22304:	0014      	movs	r4, r2
   22306:	2900      	cmp	r1, #0
   22308:	da07      	bge.n	2231a <__swhatbuf_r+0x22>
   2230a:	2300      	movs	r3, #0
   2230c:	602b      	str	r3, [r5, #0]
   2230e:	89b3      	ldrh	r3, [r6, #12]
   22310:	061b      	lsls	r3, r3, #24
   22312:	d411      	bmi.n	22338 <__swhatbuf_r+0x40>
   22314:	2380      	movs	r3, #128	; 0x80
   22316:	00db      	lsls	r3, r3, #3
   22318:	e00f      	b.n	2233a <__swhatbuf_r+0x42>
   2231a:	aa01      	add	r2, sp, #4
   2231c:	f000 fbe6 	bl	22aec <_fstat_r>
   22320:	2800      	cmp	r0, #0
   22322:	dbf2      	blt.n	2230a <__swhatbuf_r+0x12>
   22324:	22f0      	movs	r2, #240	; 0xf0
   22326:	9b02      	ldr	r3, [sp, #8]
   22328:	0212      	lsls	r2, r2, #8
   2232a:	4013      	ands	r3, r2
   2232c:	4a05      	ldr	r2, [pc, #20]	; (22344 <__swhatbuf_r+0x4c>)
   2232e:	189b      	adds	r3, r3, r2
   22330:	425a      	negs	r2, r3
   22332:	4153      	adcs	r3, r2
   22334:	602b      	str	r3, [r5, #0]
   22336:	e7ed      	b.n	22314 <__swhatbuf_r+0x1c>
   22338:	2340      	movs	r3, #64	; 0x40
   2233a:	2000      	movs	r0, #0
   2233c:	6023      	str	r3, [r4, #0]
   2233e:	b010      	add	sp, #64	; 0x40
   22340:	bd70      	pop	{r4, r5, r6, pc}
   22342:	46c0      	nop			; (mov r8, r8)
   22344:	ffffe000 	.word	0xffffe000

00022348 <__smakebuf_r>:
   22348:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   2234a:	2602      	movs	r6, #2
   2234c:	898b      	ldrh	r3, [r1, #12]
   2234e:	0005      	movs	r5, r0
   22350:	000c      	movs	r4, r1
   22352:	4233      	tst	r3, r6
   22354:	d006      	beq.n	22364 <__smakebuf_r+0x1c>
   22356:	0023      	movs	r3, r4
   22358:	3347      	adds	r3, #71	; 0x47
   2235a:	6023      	str	r3, [r4, #0]
   2235c:	6123      	str	r3, [r4, #16]
   2235e:	2301      	movs	r3, #1
   22360:	6163      	str	r3, [r4, #20]
   22362:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
   22364:	ab01      	add	r3, sp, #4
   22366:	466a      	mov	r2, sp
   22368:	f7ff ffc6 	bl	222f8 <__swhatbuf_r>
   2236c:	9900      	ldr	r1, [sp, #0]
   2236e:	0007      	movs	r7, r0
   22370:	0028      	movs	r0, r5
   22372:	f7ff faa5 	bl	218c0 <_malloc_r>
   22376:	2800      	cmp	r0, #0
   22378:	d108      	bne.n	2238c <__smakebuf_r+0x44>
   2237a:	220c      	movs	r2, #12
   2237c:	5ea3      	ldrsh	r3, [r4, r2]
   2237e:	059a      	lsls	r2, r3, #22
   22380:	d4ef      	bmi.n	22362 <__smakebuf_r+0x1a>
   22382:	2203      	movs	r2, #3
   22384:	4393      	bics	r3, r2
   22386:	431e      	orrs	r6, r3
   22388:	81a6      	strh	r6, [r4, #12]
   2238a:	e7e4      	b.n	22356 <__smakebuf_r+0xe>
   2238c:	4b0f      	ldr	r3, [pc, #60]	; (223cc <__smakebuf_r+0x84>)
   2238e:	62ab      	str	r3, [r5, #40]	; 0x28
   22390:	2380      	movs	r3, #128	; 0x80
   22392:	89a2      	ldrh	r2, [r4, #12]
   22394:	6020      	str	r0, [r4, #0]
   22396:	4313      	orrs	r3, r2
   22398:	81a3      	strh	r3, [r4, #12]
   2239a:	9b00      	ldr	r3, [sp, #0]
   2239c:	6120      	str	r0, [r4, #16]
   2239e:	6163      	str	r3, [r4, #20]
   223a0:	9b01      	ldr	r3, [sp, #4]
   223a2:	2b00      	cmp	r3, #0
   223a4:	d00d      	beq.n	223c2 <__smakebuf_r+0x7a>
   223a6:	230e      	movs	r3, #14
   223a8:	5ee1      	ldrsh	r1, [r4, r3]
   223aa:	0028      	movs	r0, r5
   223ac:	f000 fbb0 	bl	22b10 <_isatty_r>
   223b0:	2800      	cmp	r0, #0
   223b2:	d006      	beq.n	223c2 <__smakebuf_r+0x7a>
   223b4:	2203      	movs	r2, #3
   223b6:	89a3      	ldrh	r3, [r4, #12]
   223b8:	4393      	bics	r3, r2
   223ba:	001a      	movs	r2, r3
   223bc:	2301      	movs	r3, #1
   223be:	4313      	orrs	r3, r2
   223c0:	81a3      	strh	r3, [r4, #12]
   223c2:	89a0      	ldrh	r0, [r4, #12]
   223c4:	4338      	orrs	r0, r7
   223c6:	81a0      	strh	r0, [r4, #12]
   223c8:	e7cb      	b.n	22362 <__smakebuf_r+0x1a>
   223ca:	46c0      	nop			; (mov r8, r8)
   223cc:	00022129 	.word	0x00022129

000223d0 <__ascii_mbtowc>:
   223d0:	b082      	sub	sp, #8
   223d2:	2900      	cmp	r1, #0
   223d4:	d100      	bne.n	223d8 <__ascii_mbtowc+0x8>
   223d6:	a901      	add	r1, sp, #4
   223d8:	1e10      	subs	r0, r2, #0
   223da:	d006      	beq.n	223ea <__ascii_mbtowc+0x1a>
   223dc:	2b00      	cmp	r3, #0
   223de:	d006      	beq.n	223ee <__ascii_mbtowc+0x1e>
   223e0:	7813      	ldrb	r3, [r2, #0]
   223e2:	600b      	str	r3, [r1, #0]
   223e4:	7810      	ldrb	r0, [r2, #0]
   223e6:	1e43      	subs	r3, r0, #1
   223e8:	4198      	sbcs	r0, r3
   223ea:	b002      	add	sp, #8
   223ec:	4770      	bx	lr
   223ee:	2002      	movs	r0, #2
   223f0:	4240      	negs	r0, r0
   223f2:	e7fa      	b.n	223ea <__ascii_mbtowc+0x1a>

000223f4 <__malloc_lock>:
   223f4:	4770      	bx	lr

000223f6 <__malloc_unlock>:
   223f6:	4770      	bx	lr

000223f8 <__ssputs_r>:
   223f8:	b5f0      	push	{r4, r5, r6, r7, lr}
   223fa:	688e      	ldr	r6, [r1, #8]
   223fc:	b085      	sub	sp, #20
   223fe:	0007      	movs	r7, r0
   22400:	000c      	movs	r4, r1
   22402:	9203      	str	r2, [sp, #12]
   22404:	9301      	str	r3, [sp, #4]
   22406:	429e      	cmp	r6, r3
   22408:	d839      	bhi.n	2247e <__ssputs_r+0x86>
   2240a:	2390      	movs	r3, #144	; 0x90
   2240c:	898a      	ldrh	r2, [r1, #12]
   2240e:	00db      	lsls	r3, r3, #3
   22410:	421a      	tst	r2, r3
   22412:	d034      	beq.n	2247e <__ssputs_r+0x86>
   22414:	2503      	movs	r5, #3
   22416:	6909      	ldr	r1, [r1, #16]
   22418:	6823      	ldr	r3, [r4, #0]
   2241a:	1a5b      	subs	r3, r3, r1
   2241c:	9302      	str	r3, [sp, #8]
   2241e:	6963      	ldr	r3, [r4, #20]
   22420:	9802      	ldr	r0, [sp, #8]
   22422:	435d      	muls	r5, r3
   22424:	0feb      	lsrs	r3, r5, #31
   22426:	195d      	adds	r5, r3, r5
   22428:	9b01      	ldr	r3, [sp, #4]
   2242a:	106d      	asrs	r5, r5, #1
   2242c:	3301      	adds	r3, #1
   2242e:	181b      	adds	r3, r3, r0
   22430:	42ab      	cmp	r3, r5
   22432:	d900      	bls.n	22436 <__ssputs_r+0x3e>
   22434:	001d      	movs	r5, r3
   22436:	0553      	lsls	r3, r2, #21
   22438:	d532      	bpl.n	224a0 <__ssputs_r+0xa8>
   2243a:	0029      	movs	r1, r5
   2243c:	0038      	movs	r0, r7
   2243e:	f7ff fa3f 	bl	218c0 <_malloc_r>
   22442:	1e06      	subs	r6, r0, #0
   22444:	d109      	bne.n	2245a <__ssputs_r+0x62>
   22446:	230c      	movs	r3, #12
   22448:	603b      	str	r3, [r7, #0]
   2244a:	2340      	movs	r3, #64	; 0x40
   2244c:	2001      	movs	r0, #1
   2244e:	89a2      	ldrh	r2, [r4, #12]
   22450:	4240      	negs	r0, r0
   22452:	4313      	orrs	r3, r2
   22454:	81a3      	strh	r3, [r4, #12]
   22456:	b005      	add	sp, #20
   22458:	bdf0      	pop	{r4, r5, r6, r7, pc}
   2245a:	9a02      	ldr	r2, [sp, #8]
   2245c:	6921      	ldr	r1, [r4, #16]
   2245e:	f7ff f9c1 	bl	217e4 <memcpy>
   22462:	89a3      	ldrh	r3, [r4, #12]
   22464:	4a14      	ldr	r2, [pc, #80]	; (224b8 <__ssputs_r+0xc0>)
   22466:	401a      	ands	r2, r3
   22468:	2380      	movs	r3, #128	; 0x80
   2246a:	4313      	orrs	r3, r2
   2246c:	81a3      	strh	r3, [r4, #12]
   2246e:	9b02      	ldr	r3, [sp, #8]
   22470:	6126      	str	r6, [r4, #16]
   22472:	18f6      	adds	r6, r6, r3
   22474:	6026      	str	r6, [r4, #0]
   22476:	6165      	str	r5, [r4, #20]
   22478:	9e01      	ldr	r6, [sp, #4]
   2247a:	1aed      	subs	r5, r5, r3
   2247c:	60a5      	str	r5, [r4, #8]
   2247e:	9b01      	ldr	r3, [sp, #4]
   22480:	42b3      	cmp	r3, r6
   22482:	d200      	bcs.n	22486 <__ssputs_r+0x8e>
   22484:	001e      	movs	r6, r3
   22486:	0032      	movs	r2, r6
   22488:	9903      	ldr	r1, [sp, #12]
   2248a:	6820      	ldr	r0, [r4, #0]
   2248c:	f7ff f9b3 	bl	217f6 <memmove>
   22490:	68a3      	ldr	r3, [r4, #8]
   22492:	2000      	movs	r0, #0
   22494:	1b9b      	subs	r3, r3, r6
   22496:	60a3      	str	r3, [r4, #8]
   22498:	6823      	ldr	r3, [r4, #0]
   2249a:	199e      	adds	r6, r3, r6
   2249c:	6026      	str	r6, [r4, #0]
   2249e:	e7da      	b.n	22456 <__ssputs_r+0x5e>
   224a0:	002a      	movs	r2, r5
   224a2:	0038      	movs	r0, r7
   224a4:	f000 fb65 	bl	22b72 <_realloc_r>
   224a8:	1e06      	subs	r6, r0, #0
   224aa:	d1e0      	bne.n	2246e <__ssputs_r+0x76>
   224ac:	6921      	ldr	r1, [r4, #16]
   224ae:	0038      	movs	r0, r7
   224b0:	f7ff f9bc 	bl	2182c <_free_r>
   224b4:	e7c7      	b.n	22446 <__ssputs_r+0x4e>
   224b6:	46c0      	nop			; (mov r8, r8)
   224b8:	fffffb7f 	.word	0xfffffb7f

000224bc <_svfiprintf_r>:
   224bc:	b5f0      	push	{r4, r5, r6, r7, lr}
   224be:	b09f      	sub	sp, #124	; 0x7c
   224c0:	9002      	str	r0, [sp, #8]
   224c2:	9305      	str	r3, [sp, #20]
   224c4:	898b      	ldrh	r3, [r1, #12]
   224c6:	000f      	movs	r7, r1
   224c8:	0016      	movs	r6, r2
   224ca:	061b      	lsls	r3, r3, #24
   224cc:	d511      	bpl.n	224f2 <_svfiprintf_r+0x36>
   224ce:	690b      	ldr	r3, [r1, #16]
   224d0:	2b00      	cmp	r3, #0
   224d2:	d10e      	bne.n	224f2 <_svfiprintf_r+0x36>
   224d4:	2140      	movs	r1, #64	; 0x40
   224d6:	f7ff f9f3 	bl	218c0 <_malloc_r>
   224da:	6038      	str	r0, [r7, #0]
   224dc:	6138      	str	r0, [r7, #16]
   224de:	2800      	cmp	r0, #0
   224e0:	d105      	bne.n	224ee <_svfiprintf_r+0x32>
   224e2:	230c      	movs	r3, #12
   224e4:	9a02      	ldr	r2, [sp, #8]
   224e6:	3801      	subs	r0, #1
   224e8:	6013      	str	r3, [r2, #0]
   224ea:	b01f      	add	sp, #124	; 0x7c
   224ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
   224ee:	2340      	movs	r3, #64	; 0x40
   224f0:	617b      	str	r3, [r7, #20]
   224f2:	2300      	movs	r3, #0
   224f4:	ad06      	add	r5, sp, #24
   224f6:	616b      	str	r3, [r5, #20]
   224f8:	3320      	adds	r3, #32
   224fa:	766b      	strb	r3, [r5, #25]
   224fc:	3310      	adds	r3, #16
   224fe:	76ab      	strb	r3, [r5, #26]
   22500:	0034      	movs	r4, r6
   22502:	7823      	ldrb	r3, [r4, #0]
   22504:	2b00      	cmp	r3, #0
   22506:	d147      	bne.n	22598 <_svfiprintf_r+0xdc>
   22508:	1ba3      	subs	r3, r4, r6
   2250a:	9304      	str	r3, [sp, #16]
   2250c:	d00d      	beq.n	2252a <_svfiprintf_r+0x6e>
   2250e:	1ba3      	subs	r3, r4, r6
   22510:	0032      	movs	r2, r6
   22512:	0039      	movs	r1, r7
   22514:	9802      	ldr	r0, [sp, #8]
   22516:	f7ff ff6f 	bl	223f8 <__ssputs_r>
   2251a:	1c43      	adds	r3, r0, #1
   2251c:	d100      	bne.n	22520 <_svfiprintf_r+0x64>
   2251e:	e0b5      	b.n	2268c <_svfiprintf_r+0x1d0>
   22520:	696a      	ldr	r2, [r5, #20]
   22522:	9b04      	ldr	r3, [sp, #16]
   22524:	4694      	mov	ip, r2
   22526:	4463      	add	r3, ip
   22528:	616b      	str	r3, [r5, #20]
   2252a:	7823      	ldrb	r3, [r4, #0]
   2252c:	2b00      	cmp	r3, #0
   2252e:	d100      	bne.n	22532 <_svfiprintf_r+0x76>
   22530:	e0ac      	b.n	2268c <_svfiprintf_r+0x1d0>
   22532:	2201      	movs	r2, #1
   22534:	2300      	movs	r3, #0
   22536:	4252      	negs	r2, r2
   22538:	606a      	str	r2, [r5, #4]
   2253a:	a902      	add	r1, sp, #8
   2253c:	3254      	adds	r2, #84	; 0x54
   2253e:	1852      	adds	r2, r2, r1
   22540:	3401      	adds	r4, #1
   22542:	602b      	str	r3, [r5, #0]
   22544:	60eb      	str	r3, [r5, #12]
   22546:	60ab      	str	r3, [r5, #8]
   22548:	7013      	strb	r3, [r2, #0]
   2254a:	65ab      	str	r3, [r5, #88]	; 0x58
   2254c:	4e58      	ldr	r6, [pc, #352]	; (226b0 <_svfiprintf_r+0x1f4>)
   2254e:	2205      	movs	r2, #5
   22550:	7821      	ldrb	r1, [r4, #0]
   22552:	0030      	movs	r0, r6
   22554:	f000 fb02 	bl	22b5c <memchr>
   22558:	1c62      	adds	r2, r4, #1
   2255a:	2800      	cmp	r0, #0
   2255c:	d120      	bne.n	225a0 <_svfiprintf_r+0xe4>
   2255e:	6829      	ldr	r1, [r5, #0]
   22560:	06cb      	lsls	r3, r1, #27
   22562:	d504      	bpl.n	2256e <_svfiprintf_r+0xb2>
   22564:	2353      	movs	r3, #83	; 0x53
   22566:	ae02      	add	r6, sp, #8
   22568:	3020      	adds	r0, #32
   2256a:	199b      	adds	r3, r3, r6
   2256c:	7018      	strb	r0, [r3, #0]
   2256e:	070b      	lsls	r3, r1, #28
   22570:	d504      	bpl.n	2257c <_svfiprintf_r+0xc0>
   22572:	2353      	movs	r3, #83	; 0x53
   22574:	202b      	movs	r0, #43	; 0x2b
   22576:	ae02      	add	r6, sp, #8
   22578:	199b      	adds	r3, r3, r6
   2257a:	7018      	strb	r0, [r3, #0]
   2257c:	7823      	ldrb	r3, [r4, #0]
   2257e:	2b2a      	cmp	r3, #42	; 0x2a
   22580:	d016      	beq.n	225b0 <_svfiprintf_r+0xf4>
   22582:	2000      	movs	r0, #0
   22584:	210a      	movs	r1, #10
   22586:	9b09      	ldr	r3, [sp, #36]	; 0x24
   22588:	7822      	ldrb	r2, [r4, #0]
   2258a:	3a30      	subs	r2, #48	; 0x30
   2258c:	2a09      	cmp	r2, #9
   2258e:	d955      	bls.n	2263c <_svfiprintf_r+0x180>
   22590:	2800      	cmp	r0, #0
   22592:	d015      	beq.n	225c0 <_svfiprintf_r+0x104>
   22594:	9309      	str	r3, [sp, #36]	; 0x24
   22596:	e013      	b.n	225c0 <_svfiprintf_r+0x104>
   22598:	2b25      	cmp	r3, #37	; 0x25
   2259a:	d0b5      	beq.n	22508 <_svfiprintf_r+0x4c>
   2259c:	3401      	adds	r4, #1
   2259e:	e7b0      	b.n	22502 <_svfiprintf_r+0x46>
   225a0:	2301      	movs	r3, #1
   225a2:	1b80      	subs	r0, r0, r6
   225a4:	4083      	lsls	r3, r0
   225a6:	6829      	ldr	r1, [r5, #0]
   225a8:	0014      	movs	r4, r2
   225aa:	430b      	orrs	r3, r1
   225ac:	602b      	str	r3, [r5, #0]
   225ae:	e7cd      	b.n	2254c <_svfiprintf_r+0x90>
   225b0:	9b05      	ldr	r3, [sp, #20]
   225b2:	1d18      	adds	r0, r3, #4
   225b4:	681b      	ldr	r3, [r3, #0]
   225b6:	9005      	str	r0, [sp, #20]
   225b8:	2b00      	cmp	r3, #0
   225ba:	db39      	blt.n	22630 <_svfiprintf_r+0x174>
   225bc:	9309      	str	r3, [sp, #36]	; 0x24
   225be:	0014      	movs	r4, r2
   225c0:	7823      	ldrb	r3, [r4, #0]
   225c2:	2b2e      	cmp	r3, #46	; 0x2e
   225c4:	d10b      	bne.n	225de <_svfiprintf_r+0x122>
   225c6:	7863      	ldrb	r3, [r4, #1]
   225c8:	1c62      	adds	r2, r4, #1
   225ca:	2b2a      	cmp	r3, #42	; 0x2a
   225cc:	d13e      	bne.n	2264c <_svfiprintf_r+0x190>
   225ce:	9b05      	ldr	r3, [sp, #20]
   225d0:	3402      	adds	r4, #2
   225d2:	1d1a      	adds	r2, r3, #4
   225d4:	681b      	ldr	r3, [r3, #0]
   225d6:	9205      	str	r2, [sp, #20]
   225d8:	2b00      	cmp	r3, #0
   225da:	db34      	blt.n	22646 <_svfiprintf_r+0x18a>
   225dc:	9307      	str	r3, [sp, #28]
   225de:	4e35      	ldr	r6, [pc, #212]	; (226b4 <_svfiprintf_r+0x1f8>)
   225e0:	7821      	ldrb	r1, [r4, #0]
   225e2:	2203      	movs	r2, #3
   225e4:	0030      	movs	r0, r6
   225e6:	f000 fab9 	bl	22b5c <memchr>
   225ea:	2800      	cmp	r0, #0
   225ec:	d006      	beq.n	225fc <_svfiprintf_r+0x140>
   225ee:	2340      	movs	r3, #64	; 0x40
   225f0:	1b80      	subs	r0, r0, r6
   225f2:	4083      	lsls	r3, r0
   225f4:	682a      	ldr	r2, [r5, #0]
   225f6:	3401      	adds	r4, #1
   225f8:	4313      	orrs	r3, r2
   225fa:	602b      	str	r3, [r5, #0]
   225fc:	7821      	ldrb	r1, [r4, #0]
   225fe:	2206      	movs	r2, #6
   22600:	482d      	ldr	r0, [pc, #180]	; (226b8 <_svfiprintf_r+0x1fc>)
   22602:	1c66      	adds	r6, r4, #1
   22604:	7629      	strb	r1, [r5, #24]
   22606:	f000 faa9 	bl	22b5c <memchr>
   2260a:	2800      	cmp	r0, #0
   2260c:	d046      	beq.n	2269c <_svfiprintf_r+0x1e0>
   2260e:	4b2b      	ldr	r3, [pc, #172]	; (226bc <_svfiprintf_r+0x200>)
   22610:	2b00      	cmp	r3, #0
   22612:	d12f      	bne.n	22674 <_svfiprintf_r+0x1b8>
   22614:	6829      	ldr	r1, [r5, #0]
   22616:	9b05      	ldr	r3, [sp, #20]
   22618:	2207      	movs	r2, #7
   2261a:	05c9      	lsls	r1, r1, #23
   2261c:	d528      	bpl.n	22670 <_svfiprintf_r+0x1b4>
   2261e:	189b      	adds	r3, r3, r2
   22620:	4393      	bics	r3, r2
   22622:	3308      	adds	r3, #8
   22624:	9305      	str	r3, [sp, #20]
   22626:	696b      	ldr	r3, [r5, #20]
   22628:	9a03      	ldr	r2, [sp, #12]
   2262a:	189b      	adds	r3, r3, r2
   2262c:	616b      	str	r3, [r5, #20]
   2262e:	e767      	b.n	22500 <_svfiprintf_r+0x44>
   22630:	425b      	negs	r3, r3
   22632:	60eb      	str	r3, [r5, #12]
   22634:	2302      	movs	r3, #2
   22636:	430b      	orrs	r3, r1
   22638:	602b      	str	r3, [r5, #0]
   2263a:	e7c0      	b.n	225be <_svfiprintf_r+0x102>
   2263c:	434b      	muls	r3, r1
   2263e:	3401      	adds	r4, #1
   22640:	189b      	adds	r3, r3, r2
   22642:	2001      	movs	r0, #1
   22644:	e7a0      	b.n	22588 <_svfiprintf_r+0xcc>
   22646:	2301      	movs	r3, #1
   22648:	425b      	negs	r3, r3
   2264a:	e7c7      	b.n	225dc <_svfiprintf_r+0x120>
   2264c:	2300      	movs	r3, #0
   2264e:	0014      	movs	r4, r2
   22650:	200a      	movs	r0, #10
   22652:	001a      	movs	r2, r3
   22654:	606b      	str	r3, [r5, #4]
   22656:	7821      	ldrb	r1, [r4, #0]
   22658:	3930      	subs	r1, #48	; 0x30
   2265a:	2909      	cmp	r1, #9
   2265c:	d903      	bls.n	22666 <_svfiprintf_r+0x1aa>
   2265e:	2b00      	cmp	r3, #0
   22660:	d0bd      	beq.n	225de <_svfiprintf_r+0x122>
   22662:	9207      	str	r2, [sp, #28]
   22664:	e7bb      	b.n	225de <_svfiprintf_r+0x122>
   22666:	4342      	muls	r2, r0
   22668:	3401      	adds	r4, #1
   2266a:	1852      	adds	r2, r2, r1
   2266c:	2301      	movs	r3, #1
   2266e:	e7f2      	b.n	22656 <_svfiprintf_r+0x19a>
   22670:	3307      	adds	r3, #7
   22672:	e7d5      	b.n	22620 <_svfiprintf_r+0x164>
   22674:	ab05      	add	r3, sp, #20
   22676:	9300      	str	r3, [sp, #0]
   22678:	003a      	movs	r2, r7
   2267a:	4b11      	ldr	r3, [pc, #68]	; (226c0 <_svfiprintf_r+0x204>)
   2267c:	0029      	movs	r1, r5
   2267e:	9802      	ldr	r0, [sp, #8]
   22680:	e000      	b.n	22684 <_svfiprintf_r+0x1c8>
   22682:	bf00      	nop
   22684:	9003      	str	r0, [sp, #12]
   22686:	9b03      	ldr	r3, [sp, #12]
   22688:	3301      	adds	r3, #1
   2268a:	d1cc      	bne.n	22626 <_svfiprintf_r+0x16a>
   2268c:	89bb      	ldrh	r3, [r7, #12]
   2268e:	980b      	ldr	r0, [sp, #44]	; 0x2c
   22690:	065b      	lsls	r3, r3, #25
   22692:	d400      	bmi.n	22696 <_svfiprintf_r+0x1da>
   22694:	e729      	b.n	224ea <_svfiprintf_r+0x2e>
   22696:	2001      	movs	r0, #1
   22698:	4240      	negs	r0, r0
   2269a:	e726      	b.n	224ea <_svfiprintf_r+0x2e>
   2269c:	ab05      	add	r3, sp, #20
   2269e:	9300      	str	r3, [sp, #0]
   226a0:	003a      	movs	r2, r7
   226a2:	4b07      	ldr	r3, [pc, #28]	; (226c0 <_svfiprintf_r+0x204>)
   226a4:	0029      	movs	r1, r5
   226a6:	9802      	ldr	r0, [sp, #8]
   226a8:	f000 f87a 	bl	227a0 <_printf_i>
   226ac:	e7ea      	b.n	22684 <_svfiprintf_r+0x1c8>
   226ae:	46c0      	nop			; (mov r8, r8)
   226b0:	00026c1a 	.word	0x00026c1a
   226b4:	00026c20 	.word	0x00026c20
   226b8:	00026c24 	.word	0x00026c24
   226bc:	00000000 	.word	0x00000000
   226c0:	000223f9 	.word	0x000223f9

000226c4 <_printf_common>:
   226c4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   226c6:	0015      	movs	r5, r2
   226c8:	9301      	str	r3, [sp, #4]
   226ca:	688a      	ldr	r2, [r1, #8]
   226cc:	690b      	ldr	r3, [r1, #16]
   226ce:	9000      	str	r0, [sp, #0]
   226d0:	000c      	movs	r4, r1
   226d2:	4293      	cmp	r3, r2
   226d4:	da00      	bge.n	226d8 <_printf_common+0x14>
   226d6:	0013      	movs	r3, r2
   226d8:	0022      	movs	r2, r4
   226da:	602b      	str	r3, [r5, #0]
   226dc:	3243      	adds	r2, #67	; 0x43
   226de:	7812      	ldrb	r2, [r2, #0]
   226e0:	2a00      	cmp	r2, #0
   226e2:	d001      	beq.n	226e8 <_printf_common+0x24>
   226e4:	3301      	adds	r3, #1
   226e6:	602b      	str	r3, [r5, #0]
   226e8:	6823      	ldr	r3, [r4, #0]
   226ea:	069b      	lsls	r3, r3, #26
   226ec:	d502      	bpl.n	226f4 <_printf_common+0x30>
   226ee:	682b      	ldr	r3, [r5, #0]
   226f0:	3302      	adds	r3, #2
   226f2:	602b      	str	r3, [r5, #0]
   226f4:	2706      	movs	r7, #6
   226f6:	6823      	ldr	r3, [r4, #0]
   226f8:	401f      	ands	r7, r3
   226fa:	d027      	beq.n	2274c <_printf_common+0x88>
   226fc:	0023      	movs	r3, r4
   226fe:	3343      	adds	r3, #67	; 0x43
   22700:	781b      	ldrb	r3, [r3, #0]
   22702:	1e5a      	subs	r2, r3, #1
   22704:	4193      	sbcs	r3, r2
   22706:	6822      	ldr	r2, [r4, #0]
   22708:	0692      	lsls	r2, r2, #26
   2270a:	d430      	bmi.n	2276e <_printf_common+0xaa>
   2270c:	0022      	movs	r2, r4
   2270e:	9901      	ldr	r1, [sp, #4]
   22710:	3243      	adds	r2, #67	; 0x43
   22712:	9800      	ldr	r0, [sp, #0]
   22714:	9e08      	ldr	r6, [sp, #32]
   22716:	47b0      	blx	r6
   22718:	1c43      	adds	r3, r0, #1
   2271a:	d025      	beq.n	22768 <_printf_common+0xa4>
   2271c:	2306      	movs	r3, #6
   2271e:	6820      	ldr	r0, [r4, #0]
   22720:	682a      	ldr	r2, [r5, #0]
   22722:	68e1      	ldr	r1, [r4, #12]
   22724:	4003      	ands	r3, r0
   22726:	2500      	movs	r5, #0
   22728:	2b04      	cmp	r3, #4
   2272a:	d103      	bne.n	22734 <_printf_common+0x70>
   2272c:	1a8d      	subs	r5, r1, r2
   2272e:	43eb      	mvns	r3, r5
   22730:	17db      	asrs	r3, r3, #31
   22732:	401d      	ands	r5, r3
   22734:	68a3      	ldr	r3, [r4, #8]
   22736:	6922      	ldr	r2, [r4, #16]
   22738:	4293      	cmp	r3, r2
   2273a:	dd01      	ble.n	22740 <_printf_common+0x7c>
   2273c:	1a9b      	subs	r3, r3, r2
   2273e:	18ed      	adds	r5, r5, r3
   22740:	2700      	movs	r7, #0
   22742:	42bd      	cmp	r5, r7
   22744:	d120      	bne.n	22788 <_printf_common+0xc4>
   22746:	2000      	movs	r0, #0
   22748:	e010      	b.n	2276c <_printf_common+0xa8>
   2274a:	3701      	adds	r7, #1
   2274c:	68e3      	ldr	r3, [r4, #12]
   2274e:	682a      	ldr	r2, [r5, #0]
   22750:	1a9b      	subs	r3, r3, r2
   22752:	429f      	cmp	r7, r3
   22754:	dad2      	bge.n	226fc <_printf_common+0x38>
   22756:	0022      	movs	r2, r4
   22758:	2301      	movs	r3, #1
   2275a:	3219      	adds	r2, #25
   2275c:	9901      	ldr	r1, [sp, #4]
   2275e:	9800      	ldr	r0, [sp, #0]
   22760:	9e08      	ldr	r6, [sp, #32]
   22762:	47b0      	blx	r6
   22764:	1c43      	adds	r3, r0, #1
   22766:	d1f0      	bne.n	2274a <_printf_common+0x86>
   22768:	2001      	movs	r0, #1
   2276a:	4240      	negs	r0, r0
   2276c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
   2276e:	2030      	movs	r0, #48	; 0x30
   22770:	18e1      	adds	r1, r4, r3
   22772:	3143      	adds	r1, #67	; 0x43
   22774:	7008      	strb	r0, [r1, #0]
   22776:	0021      	movs	r1, r4
   22778:	1c5a      	adds	r2, r3, #1
   2277a:	3145      	adds	r1, #69	; 0x45
   2277c:	7809      	ldrb	r1, [r1, #0]
   2277e:	18a2      	adds	r2, r4, r2
   22780:	3243      	adds	r2, #67	; 0x43
   22782:	3302      	adds	r3, #2
   22784:	7011      	strb	r1, [r2, #0]
   22786:	e7c1      	b.n	2270c <_printf_common+0x48>
   22788:	0022      	movs	r2, r4
   2278a:	2301      	movs	r3, #1
   2278c:	321a      	adds	r2, #26
   2278e:	9901      	ldr	r1, [sp, #4]
   22790:	9800      	ldr	r0, [sp, #0]
   22792:	9e08      	ldr	r6, [sp, #32]
   22794:	47b0      	blx	r6
   22796:	1c43      	adds	r3, r0, #1
   22798:	d0e6      	beq.n	22768 <_printf_common+0xa4>
   2279a:	3701      	adds	r7, #1
   2279c:	e7d1      	b.n	22742 <_printf_common+0x7e>
	...

000227a0 <_printf_i>:
   227a0:	b5f0      	push	{r4, r5, r6, r7, lr}
   227a2:	b08b      	sub	sp, #44	; 0x2c
   227a4:	9206      	str	r2, [sp, #24]
   227a6:	000a      	movs	r2, r1
   227a8:	3243      	adds	r2, #67	; 0x43
   227aa:	9307      	str	r3, [sp, #28]
   227ac:	9005      	str	r0, [sp, #20]
   227ae:	9204      	str	r2, [sp, #16]
   227b0:	7e0a      	ldrb	r2, [r1, #24]
   227b2:	000c      	movs	r4, r1
   227b4:	9b10      	ldr	r3, [sp, #64]	; 0x40
   227b6:	2a6e      	cmp	r2, #110	; 0x6e
   227b8:	d100      	bne.n	227bc <_printf_i+0x1c>
   227ba:	e08f      	b.n	228dc <_printf_i+0x13c>
   227bc:	d817      	bhi.n	227ee <_printf_i+0x4e>
   227be:	2a63      	cmp	r2, #99	; 0x63
   227c0:	d02c      	beq.n	2281c <_printf_i+0x7c>
   227c2:	d808      	bhi.n	227d6 <_printf_i+0x36>
   227c4:	2a00      	cmp	r2, #0
   227c6:	d100      	bne.n	227ca <_printf_i+0x2a>
   227c8:	e099      	b.n	228fe <_printf_i+0x15e>
   227ca:	2a58      	cmp	r2, #88	; 0x58
   227cc:	d054      	beq.n	22878 <_printf_i+0xd8>
   227ce:	0026      	movs	r6, r4
   227d0:	3642      	adds	r6, #66	; 0x42
   227d2:	7032      	strb	r2, [r6, #0]
   227d4:	e029      	b.n	2282a <_printf_i+0x8a>
   227d6:	2a64      	cmp	r2, #100	; 0x64
   227d8:	d001      	beq.n	227de <_printf_i+0x3e>
   227da:	2a69      	cmp	r2, #105	; 0x69
   227dc:	d1f7      	bne.n	227ce <_printf_i+0x2e>
   227de:	6821      	ldr	r1, [r4, #0]
   227e0:	681a      	ldr	r2, [r3, #0]
   227e2:	0608      	lsls	r0, r1, #24
   227e4:	d523      	bpl.n	2282e <_printf_i+0x8e>
   227e6:	1d11      	adds	r1, r2, #4
   227e8:	6019      	str	r1, [r3, #0]
   227ea:	6815      	ldr	r5, [r2, #0]
   227ec:	e025      	b.n	2283a <_printf_i+0x9a>
   227ee:	2a73      	cmp	r2, #115	; 0x73
   227f0:	d100      	bne.n	227f4 <_printf_i+0x54>
   227f2:	e088      	b.n	22906 <_printf_i+0x166>
   227f4:	d808      	bhi.n	22808 <_printf_i+0x68>
   227f6:	2a6f      	cmp	r2, #111	; 0x6f
   227f8:	d029      	beq.n	2284e <_printf_i+0xae>
   227fa:	2a70      	cmp	r2, #112	; 0x70
   227fc:	d1e7      	bne.n	227ce <_printf_i+0x2e>
   227fe:	2220      	movs	r2, #32
   22800:	6809      	ldr	r1, [r1, #0]
   22802:	430a      	orrs	r2, r1
   22804:	6022      	str	r2, [r4, #0]
   22806:	e003      	b.n	22810 <_printf_i+0x70>
   22808:	2a75      	cmp	r2, #117	; 0x75
   2280a:	d020      	beq.n	2284e <_printf_i+0xae>
   2280c:	2a78      	cmp	r2, #120	; 0x78
   2280e:	d1de      	bne.n	227ce <_printf_i+0x2e>
   22810:	0022      	movs	r2, r4
   22812:	2178      	movs	r1, #120	; 0x78
   22814:	3245      	adds	r2, #69	; 0x45
   22816:	7011      	strb	r1, [r2, #0]
   22818:	4a6c      	ldr	r2, [pc, #432]	; (229cc <_printf_i+0x22c>)
   2281a:	e030      	b.n	2287e <_printf_i+0xde>
   2281c:	000e      	movs	r6, r1
   2281e:	681a      	ldr	r2, [r3, #0]
   22820:	3642      	adds	r6, #66	; 0x42
   22822:	1d11      	adds	r1, r2, #4
   22824:	6019      	str	r1, [r3, #0]
   22826:	6813      	ldr	r3, [r2, #0]
   22828:	7033      	strb	r3, [r6, #0]
   2282a:	2301      	movs	r3, #1
   2282c:	e079      	b.n	22922 <_printf_i+0x182>
   2282e:	0649      	lsls	r1, r1, #25
   22830:	d5d9      	bpl.n	227e6 <_printf_i+0x46>
   22832:	1d11      	adds	r1, r2, #4
   22834:	6019      	str	r1, [r3, #0]
   22836:	2300      	movs	r3, #0
   22838:	5ed5      	ldrsh	r5, [r2, r3]
   2283a:	2d00      	cmp	r5, #0
   2283c:	da03      	bge.n	22846 <_printf_i+0xa6>
   2283e:	232d      	movs	r3, #45	; 0x2d
   22840:	9a04      	ldr	r2, [sp, #16]
   22842:	426d      	negs	r5, r5
   22844:	7013      	strb	r3, [r2, #0]
   22846:	4b62      	ldr	r3, [pc, #392]	; (229d0 <_printf_i+0x230>)
   22848:	270a      	movs	r7, #10
   2284a:	9303      	str	r3, [sp, #12]
   2284c:	e02f      	b.n	228ae <_printf_i+0x10e>
   2284e:	6820      	ldr	r0, [r4, #0]
   22850:	6819      	ldr	r1, [r3, #0]
   22852:	0605      	lsls	r5, r0, #24
   22854:	d503      	bpl.n	2285e <_printf_i+0xbe>
   22856:	1d08      	adds	r0, r1, #4
   22858:	6018      	str	r0, [r3, #0]
   2285a:	680d      	ldr	r5, [r1, #0]
   2285c:	e005      	b.n	2286a <_printf_i+0xca>
   2285e:	0640      	lsls	r0, r0, #25
   22860:	d5f9      	bpl.n	22856 <_printf_i+0xb6>
   22862:	680d      	ldr	r5, [r1, #0]
   22864:	1d08      	adds	r0, r1, #4
   22866:	6018      	str	r0, [r3, #0]
   22868:	b2ad      	uxth	r5, r5
   2286a:	4b59      	ldr	r3, [pc, #356]	; (229d0 <_printf_i+0x230>)
   2286c:	2708      	movs	r7, #8
   2286e:	9303      	str	r3, [sp, #12]
   22870:	2a6f      	cmp	r2, #111	; 0x6f
   22872:	d018      	beq.n	228a6 <_printf_i+0x106>
   22874:	270a      	movs	r7, #10
   22876:	e016      	b.n	228a6 <_printf_i+0x106>
   22878:	3145      	adds	r1, #69	; 0x45
   2287a:	700a      	strb	r2, [r1, #0]
   2287c:	4a54      	ldr	r2, [pc, #336]	; (229d0 <_printf_i+0x230>)
   2287e:	9203      	str	r2, [sp, #12]
   22880:	681a      	ldr	r2, [r3, #0]
   22882:	6821      	ldr	r1, [r4, #0]
   22884:	1d10      	adds	r0, r2, #4
   22886:	6018      	str	r0, [r3, #0]
   22888:	6815      	ldr	r5, [r2, #0]
   2288a:	0608      	lsls	r0, r1, #24
   2288c:	d522      	bpl.n	228d4 <_printf_i+0x134>
   2288e:	07cb      	lsls	r3, r1, #31
   22890:	d502      	bpl.n	22898 <_printf_i+0xf8>
   22892:	2320      	movs	r3, #32
   22894:	4319      	orrs	r1, r3
   22896:	6021      	str	r1, [r4, #0]
   22898:	2710      	movs	r7, #16
   2289a:	2d00      	cmp	r5, #0
   2289c:	d103      	bne.n	228a6 <_printf_i+0x106>
   2289e:	2320      	movs	r3, #32
   228a0:	6822      	ldr	r2, [r4, #0]
   228a2:	439a      	bics	r2, r3
   228a4:	6022      	str	r2, [r4, #0]
   228a6:	0023      	movs	r3, r4
   228a8:	2200      	movs	r2, #0
   228aa:	3343      	adds	r3, #67	; 0x43
   228ac:	701a      	strb	r2, [r3, #0]
   228ae:	6863      	ldr	r3, [r4, #4]
   228b0:	60a3      	str	r3, [r4, #8]
   228b2:	2b00      	cmp	r3, #0
   228b4:	db5c      	blt.n	22970 <_printf_i+0x1d0>
   228b6:	2204      	movs	r2, #4
   228b8:	6821      	ldr	r1, [r4, #0]
   228ba:	4391      	bics	r1, r2
   228bc:	6021      	str	r1, [r4, #0]
   228be:	2d00      	cmp	r5, #0
   228c0:	d158      	bne.n	22974 <_printf_i+0x1d4>
   228c2:	9e04      	ldr	r6, [sp, #16]
   228c4:	2b00      	cmp	r3, #0
   228c6:	d064      	beq.n	22992 <_printf_i+0x1f2>
   228c8:	0026      	movs	r6, r4
   228ca:	9b03      	ldr	r3, [sp, #12]
   228cc:	3642      	adds	r6, #66	; 0x42
   228ce:	781b      	ldrb	r3, [r3, #0]
   228d0:	7033      	strb	r3, [r6, #0]
   228d2:	e05e      	b.n	22992 <_printf_i+0x1f2>
   228d4:	0648      	lsls	r0, r1, #25
   228d6:	d5da      	bpl.n	2288e <_printf_i+0xee>
   228d8:	b2ad      	uxth	r5, r5
   228da:	e7d8      	b.n	2288e <_printf_i+0xee>
   228dc:	6809      	ldr	r1, [r1, #0]
   228de:	681a      	ldr	r2, [r3, #0]
   228e0:	0608      	lsls	r0, r1, #24
   228e2:	d505      	bpl.n	228f0 <_printf_i+0x150>
   228e4:	1d11      	adds	r1, r2, #4
   228e6:	6019      	str	r1, [r3, #0]
   228e8:	6813      	ldr	r3, [r2, #0]
   228ea:	6962      	ldr	r2, [r4, #20]
   228ec:	601a      	str	r2, [r3, #0]
   228ee:	e006      	b.n	228fe <_printf_i+0x15e>
   228f0:	0649      	lsls	r1, r1, #25
   228f2:	d5f7      	bpl.n	228e4 <_printf_i+0x144>
   228f4:	1d11      	adds	r1, r2, #4
   228f6:	6019      	str	r1, [r3, #0]
   228f8:	6813      	ldr	r3, [r2, #0]
   228fa:	8aa2      	ldrh	r2, [r4, #20]
   228fc:	801a      	strh	r2, [r3, #0]
   228fe:	2300      	movs	r3, #0
   22900:	9e04      	ldr	r6, [sp, #16]
   22902:	6123      	str	r3, [r4, #16]
   22904:	e054      	b.n	229b0 <_printf_i+0x210>
   22906:	681a      	ldr	r2, [r3, #0]
   22908:	1d11      	adds	r1, r2, #4
   2290a:	6019      	str	r1, [r3, #0]
   2290c:	6816      	ldr	r6, [r2, #0]
   2290e:	2100      	movs	r1, #0
   22910:	6862      	ldr	r2, [r4, #4]
   22912:	0030      	movs	r0, r6
   22914:	f000 f922 	bl	22b5c <memchr>
   22918:	2800      	cmp	r0, #0
   2291a:	d001      	beq.n	22920 <_printf_i+0x180>
   2291c:	1b80      	subs	r0, r0, r6
   2291e:	6060      	str	r0, [r4, #4]
   22920:	6863      	ldr	r3, [r4, #4]
   22922:	6123      	str	r3, [r4, #16]
   22924:	2300      	movs	r3, #0
   22926:	9a04      	ldr	r2, [sp, #16]
   22928:	7013      	strb	r3, [r2, #0]
   2292a:	e041      	b.n	229b0 <_printf_i+0x210>
   2292c:	6923      	ldr	r3, [r4, #16]
   2292e:	0032      	movs	r2, r6
   22930:	9906      	ldr	r1, [sp, #24]
   22932:	9805      	ldr	r0, [sp, #20]
   22934:	9d07      	ldr	r5, [sp, #28]
   22936:	47a8      	blx	r5
   22938:	1c43      	adds	r3, r0, #1
   2293a:	d043      	beq.n	229c4 <_printf_i+0x224>
   2293c:	6823      	ldr	r3, [r4, #0]
   2293e:	2500      	movs	r5, #0
   22940:	079b      	lsls	r3, r3, #30
   22942:	d40f      	bmi.n	22964 <_printf_i+0x1c4>
   22944:	9b09      	ldr	r3, [sp, #36]	; 0x24
   22946:	68e0      	ldr	r0, [r4, #12]
   22948:	4298      	cmp	r0, r3
   2294a:	da3d      	bge.n	229c8 <_printf_i+0x228>
   2294c:	0018      	movs	r0, r3
   2294e:	e03b      	b.n	229c8 <_printf_i+0x228>
   22950:	0022      	movs	r2, r4
   22952:	2301      	movs	r3, #1
   22954:	3219      	adds	r2, #25
   22956:	9906      	ldr	r1, [sp, #24]
   22958:	9805      	ldr	r0, [sp, #20]
   2295a:	9e07      	ldr	r6, [sp, #28]
   2295c:	47b0      	blx	r6
   2295e:	1c43      	adds	r3, r0, #1
   22960:	d030      	beq.n	229c4 <_printf_i+0x224>
   22962:	3501      	adds	r5, #1
   22964:	68e3      	ldr	r3, [r4, #12]
   22966:	9a09      	ldr	r2, [sp, #36]	; 0x24
   22968:	1a9b      	subs	r3, r3, r2
   2296a:	429d      	cmp	r5, r3
   2296c:	dbf0      	blt.n	22950 <_printf_i+0x1b0>
   2296e:	e7e9      	b.n	22944 <_printf_i+0x1a4>
   22970:	2d00      	cmp	r5, #0
   22972:	d0a9      	beq.n	228c8 <_printf_i+0x128>
   22974:	9e04      	ldr	r6, [sp, #16]
   22976:	0028      	movs	r0, r5
   22978:	0039      	movs	r1, r7
   2297a:	f7fc ffe7 	bl	1f94c <__aeabi_uidivmod>
   2297e:	9b03      	ldr	r3, [sp, #12]
   22980:	3e01      	subs	r6, #1
   22982:	5c5b      	ldrb	r3, [r3, r1]
   22984:	0028      	movs	r0, r5
   22986:	7033      	strb	r3, [r6, #0]
   22988:	0039      	movs	r1, r7
   2298a:	f7fc ff59 	bl	1f840 <__udivsi3>
   2298e:	1e05      	subs	r5, r0, #0
   22990:	d1f1      	bne.n	22976 <_printf_i+0x1d6>
   22992:	2f08      	cmp	r7, #8
   22994:	d109      	bne.n	229aa <_printf_i+0x20a>
   22996:	6823      	ldr	r3, [r4, #0]
   22998:	07db      	lsls	r3, r3, #31
   2299a:	d506      	bpl.n	229aa <_printf_i+0x20a>
   2299c:	6863      	ldr	r3, [r4, #4]
   2299e:	6922      	ldr	r2, [r4, #16]
   229a0:	4293      	cmp	r3, r2
   229a2:	dc02      	bgt.n	229aa <_printf_i+0x20a>
   229a4:	2330      	movs	r3, #48	; 0x30
   229a6:	3e01      	subs	r6, #1
   229a8:	7033      	strb	r3, [r6, #0]
   229aa:	9b04      	ldr	r3, [sp, #16]
   229ac:	1b9b      	subs	r3, r3, r6
   229ae:	6123      	str	r3, [r4, #16]
   229b0:	9b07      	ldr	r3, [sp, #28]
   229b2:	aa09      	add	r2, sp, #36	; 0x24
   229b4:	9300      	str	r3, [sp, #0]
   229b6:	0021      	movs	r1, r4
   229b8:	9b06      	ldr	r3, [sp, #24]
   229ba:	9805      	ldr	r0, [sp, #20]
   229bc:	f7ff fe82 	bl	226c4 <_printf_common>
   229c0:	1c43      	adds	r3, r0, #1
   229c2:	d1b3      	bne.n	2292c <_printf_i+0x18c>
   229c4:	2001      	movs	r0, #1
   229c6:	4240      	negs	r0, r0
   229c8:	b00b      	add	sp, #44	; 0x2c
   229ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
   229cc:	00026c3c 	.word	0x00026c3c
   229d0:	00026c2b 	.word	0x00026c2b

000229d4 <__sread>:
   229d4:	b570      	push	{r4, r5, r6, lr}
   229d6:	000c      	movs	r4, r1
   229d8:	250e      	movs	r5, #14
   229da:	5f49      	ldrsh	r1, [r1, r5]
   229dc:	f000 f8f0 	bl	22bc0 <_read_r>
   229e0:	2800      	cmp	r0, #0
   229e2:	db03      	blt.n	229ec <__sread+0x18>
   229e4:	6d63      	ldr	r3, [r4, #84]	; 0x54
   229e6:	181b      	adds	r3, r3, r0
   229e8:	6563      	str	r3, [r4, #84]	; 0x54
   229ea:	bd70      	pop	{r4, r5, r6, pc}
   229ec:	89a3      	ldrh	r3, [r4, #12]
   229ee:	4a02      	ldr	r2, [pc, #8]	; (229f8 <__sread+0x24>)
   229f0:	4013      	ands	r3, r2
   229f2:	81a3      	strh	r3, [r4, #12]
   229f4:	e7f9      	b.n	229ea <__sread+0x16>
   229f6:	46c0      	nop			; (mov r8, r8)
   229f8:	ffffefff 	.word	0xffffefff

000229fc <__swrite>:
   229fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   229fe:	001f      	movs	r7, r3
   22a00:	898b      	ldrh	r3, [r1, #12]
   22a02:	0005      	movs	r5, r0
   22a04:	000c      	movs	r4, r1
   22a06:	0016      	movs	r6, r2
   22a08:	05db      	lsls	r3, r3, #23
   22a0a:	d505      	bpl.n	22a18 <__swrite+0x1c>
   22a0c:	230e      	movs	r3, #14
   22a0e:	5ec9      	ldrsh	r1, [r1, r3]
   22a10:	2200      	movs	r2, #0
   22a12:	2302      	movs	r3, #2
   22a14:	f000 f88e 	bl	22b34 <_lseek_r>
   22a18:	89a3      	ldrh	r3, [r4, #12]
   22a1a:	4a05      	ldr	r2, [pc, #20]	; (22a30 <__swrite+0x34>)
   22a1c:	0028      	movs	r0, r5
   22a1e:	4013      	ands	r3, r2
   22a20:	81a3      	strh	r3, [r4, #12]
   22a22:	0032      	movs	r2, r6
   22a24:	230e      	movs	r3, #14
   22a26:	5ee1      	ldrsh	r1, [r4, r3]
   22a28:	003b      	movs	r3, r7
   22a2a:	f000 f839 	bl	22aa0 <_write_r>
   22a2e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   22a30:	ffffefff 	.word	0xffffefff

00022a34 <__sseek>:
   22a34:	b570      	push	{r4, r5, r6, lr}
   22a36:	000c      	movs	r4, r1
   22a38:	250e      	movs	r5, #14
   22a3a:	5f49      	ldrsh	r1, [r1, r5]
   22a3c:	f000 f87a 	bl	22b34 <_lseek_r>
   22a40:	89a3      	ldrh	r3, [r4, #12]
   22a42:	1c42      	adds	r2, r0, #1
   22a44:	d103      	bne.n	22a4e <__sseek+0x1a>
   22a46:	4a05      	ldr	r2, [pc, #20]	; (22a5c <__sseek+0x28>)
   22a48:	4013      	ands	r3, r2
   22a4a:	81a3      	strh	r3, [r4, #12]
   22a4c:	bd70      	pop	{r4, r5, r6, pc}
   22a4e:	2280      	movs	r2, #128	; 0x80
   22a50:	0152      	lsls	r2, r2, #5
   22a52:	4313      	orrs	r3, r2
   22a54:	81a3      	strh	r3, [r4, #12]
   22a56:	6560      	str	r0, [r4, #84]	; 0x54
   22a58:	e7f8      	b.n	22a4c <__sseek+0x18>
   22a5a:	46c0      	nop			; (mov r8, r8)
   22a5c:	ffffefff 	.word	0xffffefff

00022a60 <__sclose>:
   22a60:	b510      	push	{r4, lr}
   22a62:	230e      	movs	r3, #14
   22a64:	5ec9      	ldrsh	r1, [r1, r3]
   22a66:	f000 f82f 	bl	22ac8 <_close_r>
   22a6a:	bd10      	pop	{r4, pc}

00022a6c <strchr>:
   22a6c:	b2c9      	uxtb	r1, r1
   22a6e:	7803      	ldrb	r3, [r0, #0]
   22a70:	2b00      	cmp	r3, #0
   22a72:	d004      	beq.n	22a7e <strchr+0x12>
   22a74:	4299      	cmp	r1, r3
   22a76:	d100      	bne.n	22a7a <strchr+0xe>
   22a78:	4770      	bx	lr
   22a7a:	3001      	adds	r0, #1
   22a7c:	e7f7      	b.n	22a6e <strchr+0x2>
   22a7e:	424b      	negs	r3, r1
   22a80:	4159      	adcs	r1, r3
   22a82:	4249      	negs	r1, r1
   22a84:	4008      	ands	r0, r1
   22a86:	e7f7      	b.n	22a78 <strchr+0xc>

00022a88 <__ascii_wctomb>:
   22a88:	1e0b      	subs	r3, r1, #0
   22a8a:	d004      	beq.n	22a96 <__ascii_wctomb+0xe>
   22a8c:	2aff      	cmp	r2, #255	; 0xff
   22a8e:	d904      	bls.n	22a9a <__ascii_wctomb+0x12>
   22a90:	238a      	movs	r3, #138	; 0x8a
   22a92:	6003      	str	r3, [r0, #0]
   22a94:	3b8b      	subs	r3, #139	; 0x8b
   22a96:	0018      	movs	r0, r3
   22a98:	4770      	bx	lr
   22a9a:	700a      	strb	r2, [r1, #0]
   22a9c:	2301      	movs	r3, #1
   22a9e:	e7fa      	b.n	22a96 <__ascii_wctomb+0xe>

00022aa0 <_write_r>:
   22aa0:	b570      	push	{r4, r5, r6, lr}
   22aa2:	0005      	movs	r5, r0
   22aa4:	0008      	movs	r0, r1
   22aa6:	0011      	movs	r1, r2
   22aa8:	2200      	movs	r2, #0
   22aaa:	4c06      	ldr	r4, [pc, #24]	; (22ac4 <_write_r+0x24>)
   22aac:	6022      	str	r2, [r4, #0]
   22aae:	001a      	movs	r2, r3
   22ab0:	f7f5 fa9c 	bl	17fec <_write>
   22ab4:	1c43      	adds	r3, r0, #1
   22ab6:	d103      	bne.n	22ac0 <_write_r+0x20>
   22ab8:	6823      	ldr	r3, [r4, #0]
   22aba:	2b00      	cmp	r3, #0
   22abc:	d000      	beq.n	22ac0 <_write_r+0x20>
   22abe:	602b      	str	r3, [r5, #0]
   22ac0:	bd70      	pop	{r4, r5, r6, pc}
   22ac2:	46c0      	nop			; (mov r8, r8)
   22ac4:	20005670 	.word	0x20005670

00022ac8 <_close_r>:
   22ac8:	2300      	movs	r3, #0
   22aca:	b570      	push	{r4, r5, r6, lr}
   22acc:	4c06      	ldr	r4, [pc, #24]	; (22ae8 <_close_r+0x20>)
   22ace:	0005      	movs	r5, r0
   22ad0:	0008      	movs	r0, r1
   22ad2:	6023      	str	r3, [r4, #0]
   22ad4:	f7f5 fade 	bl	18094 <_close>
   22ad8:	1c43      	adds	r3, r0, #1
   22ada:	d103      	bne.n	22ae4 <_close_r+0x1c>
   22adc:	6823      	ldr	r3, [r4, #0]
   22ade:	2b00      	cmp	r3, #0
   22ae0:	d000      	beq.n	22ae4 <_close_r+0x1c>
   22ae2:	602b      	str	r3, [r5, #0]
   22ae4:	bd70      	pop	{r4, r5, r6, pc}
   22ae6:	46c0      	nop			; (mov r8, r8)
   22ae8:	20005670 	.word	0x20005670

00022aec <_fstat_r>:
   22aec:	2300      	movs	r3, #0
   22aee:	b570      	push	{r4, r5, r6, lr}
   22af0:	4c06      	ldr	r4, [pc, #24]	; (22b0c <_fstat_r+0x20>)
   22af2:	0005      	movs	r5, r0
   22af4:	0008      	movs	r0, r1
   22af6:	0011      	movs	r1, r2
   22af8:	6023      	str	r3, [r4, #0]
   22afa:	f7f5 fad5 	bl	180a8 <_fstat>
   22afe:	1c43      	adds	r3, r0, #1
   22b00:	d103      	bne.n	22b0a <_fstat_r+0x1e>
   22b02:	6823      	ldr	r3, [r4, #0]
   22b04:	2b00      	cmp	r3, #0
   22b06:	d000      	beq.n	22b0a <_fstat_r+0x1e>
   22b08:	602b      	str	r3, [r5, #0]
   22b0a:	bd70      	pop	{r4, r5, r6, pc}
   22b0c:	20005670 	.word	0x20005670

00022b10 <_isatty_r>:
   22b10:	2300      	movs	r3, #0
   22b12:	b570      	push	{r4, r5, r6, lr}
   22b14:	4c06      	ldr	r4, [pc, #24]	; (22b30 <_isatty_r+0x20>)
   22b16:	0005      	movs	r5, r0
   22b18:	0008      	movs	r0, r1
   22b1a:	6023      	str	r3, [r4, #0]
   22b1c:	f7f5 fad2 	bl	180c4 <_isatty>
   22b20:	1c43      	adds	r3, r0, #1
   22b22:	d103      	bne.n	22b2c <_isatty_r+0x1c>
   22b24:	6823      	ldr	r3, [r4, #0]
   22b26:	2b00      	cmp	r3, #0
   22b28:	d000      	beq.n	22b2c <_isatty_r+0x1c>
   22b2a:	602b      	str	r3, [r5, #0]
   22b2c:	bd70      	pop	{r4, r5, r6, pc}
   22b2e:	46c0      	nop			; (mov r8, r8)
   22b30:	20005670 	.word	0x20005670

00022b34 <_lseek_r>:
   22b34:	b570      	push	{r4, r5, r6, lr}
   22b36:	0005      	movs	r5, r0
   22b38:	0008      	movs	r0, r1
   22b3a:	0011      	movs	r1, r2
   22b3c:	2200      	movs	r2, #0
   22b3e:	4c06      	ldr	r4, [pc, #24]	; (22b58 <_lseek_r+0x24>)
   22b40:	6022      	str	r2, [r4, #0]
   22b42:	001a      	movs	r2, r3
   22b44:	f7f5 fac7 	bl	180d6 <_lseek>
   22b48:	1c43      	adds	r3, r0, #1
   22b4a:	d103      	bne.n	22b54 <_lseek_r+0x20>
   22b4c:	6823      	ldr	r3, [r4, #0]
   22b4e:	2b00      	cmp	r3, #0
   22b50:	d000      	beq.n	22b54 <_lseek_r+0x20>
   22b52:	602b      	str	r3, [r5, #0]
   22b54:	bd70      	pop	{r4, r5, r6, pc}
   22b56:	46c0      	nop			; (mov r8, r8)
   22b58:	20005670 	.word	0x20005670

00022b5c <memchr>:
   22b5c:	b2c9      	uxtb	r1, r1
   22b5e:	1882      	adds	r2, r0, r2
   22b60:	4290      	cmp	r0, r2
   22b62:	d101      	bne.n	22b68 <memchr+0xc>
   22b64:	2000      	movs	r0, #0
   22b66:	4770      	bx	lr
   22b68:	7803      	ldrb	r3, [r0, #0]
   22b6a:	428b      	cmp	r3, r1
   22b6c:	d0fb      	beq.n	22b66 <memchr+0xa>
   22b6e:	3001      	adds	r0, #1
   22b70:	e7f6      	b.n	22b60 <memchr+0x4>

00022b72 <_realloc_r>:
   22b72:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   22b74:	0007      	movs	r7, r0
   22b76:	000d      	movs	r5, r1
   22b78:	0016      	movs	r6, r2
   22b7a:	2900      	cmp	r1, #0
   22b7c:	d105      	bne.n	22b8a <_realloc_r+0x18>
   22b7e:	0011      	movs	r1, r2
   22b80:	f7fe fe9e 	bl	218c0 <_malloc_r>
   22b84:	0004      	movs	r4, r0
   22b86:	0020      	movs	r0, r4
   22b88:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   22b8a:	2a00      	cmp	r2, #0
   22b8c:	d103      	bne.n	22b96 <_realloc_r+0x24>
   22b8e:	f7fe fe4d 	bl	2182c <_free_r>
   22b92:	0034      	movs	r4, r6
   22b94:	e7f7      	b.n	22b86 <_realloc_r+0x14>
   22b96:	f000 f827 	bl	22be8 <_malloc_usable_size_r>
   22b9a:	002c      	movs	r4, r5
   22b9c:	4286      	cmp	r6, r0
   22b9e:	d9f2      	bls.n	22b86 <_realloc_r+0x14>
   22ba0:	0031      	movs	r1, r6
   22ba2:	0038      	movs	r0, r7
   22ba4:	f7fe fe8c 	bl	218c0 <_malloc_r>
   22ba8:	1e04      	subs	r4, r0, #0
   22baa:	d0ec      	beq.n	22b86 <_realloc_r+0x14>
   22bac:	0029      	movs	r1, r5
   22bae:	0032      	movs	r2, r6
   22bb0:	f7fe fe18 	bl	217e4 <memcpy>
   22bb4:	0029      	movs	r1, r5
   22bb6:	0038      	movs	r0, r7
   22bb8:	f7fe fe38 	bl	2182c <_free_r>
   22bbc:	e7e3      	b.n	22b86 <_realloc_r+0x14>
	...

00022bc0 <_read_r>:
   22bc0:	b570      	push	{r4, r5, r6, lr}
   22bc2:	0005      	movs	r5, r0
   22bc4:	0008      	movs	r0, r1
   22bc6:	0011      	movs	r1, r2
   22bc8:	2200      	movs	r2, #0
   22bca:	4c06      	ldr	r4, [pc, #24]	; (22be4 <_read_r+0x24>)
   22bcc:	6022      	str	r2, [r4, #0]
   22bce:	001a      	movs	r2, r3
   22bd0:	f7f5 f9e2 	bl	17f98 <_read>
   22bd4:	1c43      	adds	r3, r0, #1
   22bd6:	d103      	bne.n	22be0 <_read_r+0x20>
   22bd8:	6823      	ldr	r3, [r4, #0]
   22bda:	2b00      	cmp	r3, #0
   22bdc:	d000      	beq.n	22be0 <_read_r+0x20>
   22bde:	602b      	str	r3, [r5, #0]
   22be0:	bd70      	pop	{r4, r5, r6, pc}
   22be2:	46c0      	nop			; (mov r8, r8)
   22be4:	20005670 	.word	0x20005670

00022be8 <_malloc_usable_size_r>:
   22be8:	1f0b      	subs	r3, r1, #4
   22bea:	681b      	ldr	r3, [r3, #0]
   22bec:	1f18      	subs	r0, r3, #4
   22bee:	2b00      	cmp	r3, #0
   22bf0:	da01      	bge.n	22bf6 <_malloc_usable_size_r+0xe>
   22bf2:	580b      	ldr	r3, [r1, r0]
   22bf4:	18c0      	adds	r0, r0, r3
   22bf6:	4770      	bx	lr

00022bf8 <pcWelcomeMessage>:
   22bf8:	7246 6565 5452 534f 4320 494c 0d2e 540a     FreeRTOS CLI...T
   22c08:	7079 2065 6548 706c 7420 206f 6976 7765     ype Help to view
   22c18:	6120 6c20 7369 2074 666f 7220 6765 7369      a list of regis
   22c28:	6574 6572 2064 6f63 6d6d 6e61 7364 0d2e     tered commands..
   22c38:	000a 0000 7766 0000 7766 203a 6f44 6e77     ....fw..fw: Down
   22c48:	6f6c 6461 6120 6620 6c69 2065 6e61 2064     load a file and 
   22c58:	6570 6672 726f 206d 6e61 4620 2057 7075     perform an FW up
   22c68:	6164 6574 0a0d 0000 6572 6573 0074 0000     date....reset...
   22c78:	6572 6573 3a74 5220 7365 7465 2073 6874     reset: Resets th
   22c88:	2065 6564 6976 6563 0a0d 0000 3269 0063     e device....i2c.
   22c98:	3269 3a63 5320 6163 736e 4920 4332 6220     i2c: Scans I2C b
   22ca8:	7375 0a0d 0000 0000 6576 7372 6f69 006e     us......version.
   22cb8:	6576 7372 6f69 3a6e 5020 6972 746e 2073     version: Prints 
   22cc8:	6874 2065 6966 6d72 6177 6572 7620 7265     the firmware ver
   22cd8:	6973 6e6f 0d2e 000a 6974 6b63 0073 0000     sion....ticks...
   22ce8:	6974 6b63 3a73 5020 6972 746e 2073 6874     ticks: Prints th
   22cf8:	2065 756e 626d 7265 6f20 2066 6974 6b63     e number of tick
   22d08:	2073 6973 636e 2065 6874 2065 6373 6568     s since the sche
   22d18:	7564 656c 2072 7473 7261 6574 2e64 0a0d     duler started...
   22d28:	0000 0000 6d69 0075 6d69 3a75 5020 6972     ....imu.imu: Pri
   22d38:	746e 2073 3031 3030 7320 6d61 6c70 7365     nts 1000 samples
   22d48:	6f20 2066 6361 6563 656c 6172 6974 6e6f      of acceleration
   22d58:	202e 0a0d 0000 0000 6c63 0073 6c63 3a73     . ......cls.cls:
   22d68:	4320 656c 7261 2073 6874 2065 6574 6d72      Clears the term
   22d78:	6e69 6c61 7320 7263 6565 0d6e 000a 0000     inal screen.....
   22d88:	6f43 6c75 2064 6f6e 2074 6c61 6f6c 6163     Could not alloca
   22d98:	6574 7320 6d65 7061 6f68 6572 0a0d 0000     te semaphore....
   22da8:	0a0d 0000 616f 0000 6325 325b 0d4b 003e     ....oa..%c[2K.>.
   22db8:	2008 0008 6325 325b 004a 0000 2e30 2e30     . ..%c[2J...0.0.
   22dc8:	0031 0000 6946 6d72 6177 6572 5620 7265     1...Firmware Ver
   22dd8:	6973 6e6f 203a 7325 0a0d 0000 6954 6b63     sion: %s....Tick
   22de8:	2073 6973 636e 2065 7473 7261 3a74 2520     s since start: %
   22df8:	756c 0a0d 0000 0000 2030 3120 2020 2032     lu......0  1  2 
   22e08:	3320 2020 2034 3520 2020 2036 3720 2020      3  4  5  6  7  
   22e18:	2038 3920 2020 2061 6220 2020 2063 6420     8  9  a  b  c  d
   22e28:	2020 2065 6620 0a0d 0000 0000 3025 7832       e  f......%02x
   22e38:	203a 0000 2058 0000 7841 203a 6425 202c     : ..X ..Ax: %d, 
   22e48:	7941 203a 6425 202c 7a41 203a 6425 0a0d     Ay: %d, Az: %d..
   22e58:	0000 0000                                   ....

00022e5c <xOTAUCommand>:
   22e5c:	2c3c 0002 2c40 0002 123d 0000 0000 0000     <,..@,..=.......

00022e6c <xResetCommand>:
   22e6c:	2c70 0002 2c78 0002 125d 0000 0000 0000     p,..x,..].......

00022e7c <xI2cScan>:
   22e7c:	2c94 0002 2c98 0002 12e5 0000 0000 0000     .,...,..........

00022e8c <xVersionCommand>:
   22e8c:	2cb0 0002 2cb8 0002 127d 0000 0000 0000     .,...,..}.......

00022e9c <xTicksCommand>:
   22e9c:	2ce0 0002 2ce8 0002 12ad 0000 0000 0000     .,...,..........

00022eac <xGetIMUDataCommand>:
   22eac:	2d2c 0002 2d30 0002 1411 0000 0000 0000     ,-..0-..........

00022ebc <xClearScreen>:
   22ebc:	2d60 0002 2d64 0002 11f5 0000 0000 0000     `-..d-..........

00022ecc <main_mqtt_broker>:
   22ecc:	7262 6b6f 7265 682e 7669 6d65 2e71 6f63     broker.hivemq.co
   22edc:	006d 0000 3025 6433 0000 0000 7473 7261     m...%03d....star
   22eec:	5f74 6f64 6e77 6f6c 6461 203a 4d4d 2043     t_download: MMC 
   22efc:	7473 726f 6761 2065 6f6e 2074 6572 6461     storage not read
   22f0c:	2e79 0a0d 0000 0000 7473 7261 5f74 6f64     y.......start_do
   22f1c:	6e77 6f6c 6461 203a 6957 462d 2069 7369     wnload: Wi-Fi is
   22f2c:	6e20 746f 6320 6e6f 656e 7463 6465 0d2e      not connected..
   22f3c:	000a 0000 7473 7261 5f74 6f64 6e77 6f6c     ....start_downlo
   22f4c:	6461 203a 6572 7571 7365 2074 7369 7320     ad: request is s
   22f5c:	6e65 2074 6c61 6572 6461 2e79 0a0d 0000     ent already.....
   22f6c:	7473 7261 5f74 6f64 6e77 6f6c 6461 203a     start_download: 
   22f7c:	7572 6e6e 6e69 2067 6f64 6e77 6f6c 6461     running download
   22f8c:	6120 726c 6165 7964 0d2e 000a 7473 7261      already....star
   22f9c:	5f74 6f64 6e77 6f6c 6461 203a 6573 646e     t_download: send
   22fac:	6e69 2067 5448 5054 7220 7165 6575 7473     ing HTTP request
   22fbc:	2e2e 0d2e 000a 0000 7468 7074 2f3a 322f     ........http://2
   22fcc:	2e30 3332 2e31 3032 2e35 3032 2f33 6f49     0.231.205.203/Io
   22fdc:	2e54 6470 0066 0000 7473 726f 5f65 6966     T.pdf...store_fi
   22fec:	656c 705f 6361 656b 3a74 6520 706d 7974     le_packet: empty
   22ffc:	6420 7461 2e61 0a0d 0000 0000 7473 726f      data.......stor
   2300c:	5f65 6966 656c 705f 6361 656b 3a74 6620     e_file_packet: f
   2301c:	6c69 2065 616e 656d 6920 2073 6e69 6176     ile name is inva
   2302c:	696c 2e64 4420 776f 6c6e 616f 2064 6163     lid. Download ca
   2303c:	636e 6c65 6465 0d2e 000a 0000 7473 726f     nceled......stor
   2304c:	5f65 6966 656c 705f 6361 656b 3a74 6320     e_file_packet: c
   2305c:	6572 7461 6e69 2067 6966 656c 5b20 7325     reating file [%s
   2306c:	0d5d 000a 7473 726f 5f65 6966 656c 705f     ]...store_file_p
   2307c:	6361 656b 3a74 6620 6c69 2065 7263 6165     acket: file crea
   2308c:	6974 6e6f 6520 7272 726f 2021 6572 3a74     tion error! ret:
   2309c:	6425 0a0d 0000 0000 7473 726f 5f65 6966     %d......store_fi
   230ac:	656c 705f 6361 656b 3a74 6620 6c69 2065     le_packet: file 
   230bc:	7277 7469 2065 7265 6f72 2c72 6420 776f     write error, dow
   230cc:	6c6e 616f 2064 6163 636e 6c65 6465 0d2e     nload canceled..
   230dc:	000a 0000 7473 726f 5f65 6966 656c 705f     ....store_file_p
   230ec:	6361 656b 3a74 7220 6365 6965 6576 5b64     acket: received[
   230fc:	6c25 5d75 202c 6966 656c 7320 7a69 5b65     %lu], file size[
   2310c:	6c25 5d75 0a0d 0000 7473 726f 5f65 6966     %lu]....store_fi
   2311c:	656c 705f 6361 656b 3a74 6620 6c69 2065     le_packet: file 
   2312c:	6f64 6e77 6f6c 6461 6465 7320 6375 6563     downloaded succe
   2313c:	7373 7566 6c6c 2e79 0a0d 0000 7468 7074     ssfully.....http
   2314c:	635f 696c 6e65 5f74 6163 6c6c 6162 6b63     _client_callback
   2315c:	203a 5448 5054 6320 696c 6e65 2074 6f73     : HTTP client so
   2316c:	6b63 7465 6320 6e6f 656e 7463 6465 0d2e     cket connected..
   2317c:	000a 0000 7468 7074 635f 696c 6e65 5f74     ....http_client_
   2318c:	6163 6c6c 6162 6b63 203a 6572 7571 7365     callback: reques
   2319c:	2074 6f63 706d 656c 6574 2e64 0a0d 0000     t completed.....
   231ac:	7468 7074 635f 696c 6e65 5f74 6163 6c6c     http_client_call
   231bc:	6162 6b63 203a 6572 6563 7669 6465 7220     back: received r
   231cc:	7365 6f70 736e 2065 7525 6420 7461 2061     esponse %u data 
   231dc:	6973 657a 2520 0d75 000a 0000 7468 7074     size %u.....http
   231ec:	635f 696c 6e65 5f74 6163 6c6c 6162 6b63     _client_callback
   231fc:	203a 6964 6373 6e6f 656e 7463 6f69 206e     : disconnection 
   2320c:	6572 7361 6e6f 253a 0d64 000a 6572 6f73     reason:%d...reso
   2321c:	766c 5f65 6263 203a 7325 4920 2050 6461     lve_cb: %s IP ad
   2322c:	7264 7365 2073 7369 2520 2e64 6425 252e     dress is %d.%d.%
   2323c:	2e64 6425 0a0d 0a0d 0000 0000 6977 6966     d.%d........wifi
   2324c:	635f 3a62 4d20 4d32 575f 4649 5f49 4f43     _cb: M2M_WIFI_CO
   2325c:	4e4e 4345 4554 0d44 000a 0000 6977 6966     NNECTED.....wifi
   2326c:	635f 3a62 4d20 4d32 575f 4649 5f49 4944     _cb: M2M_WIFI_DI
   2327c:	4353 4e4f 454e 5443 4445 0a0d 0000 0000     SCONNECTED......
   2328c:	7564 6b6e 6e69 616b 6b6d 6168 006f 0000     dunkinkamkhao...
   2329c:	6854 6572 2065 754d 6b73 7465 6565 7372     Three Musketeers
   232ac:	0000 0000 6977 6966 635f 3a62 4920 2050     ....wifi_cb: IP 
   232bc:	6461 7264 7365 2073 7369 2520 2e75 7525     address is %u.%u
   232cc:	252e 2e75 7525 0a0d 0000 0000 7245 6f72     .%u.%u......Erro
   232dc:	2072 6f63 6e6e 6365 6974 676e 7420 206f     r connecting to 
   232ec:	514d 5454 4220 6f72 656b 2172 0a0d 0000     MQTT Broker!....
   232fc:	6e69 7469 735f 6f74 6172 6567 203a 6c70     init_storage: pl
   2330c:	6165 6573 7020 756c 2067 6e61 5320 2f44     ease plug an SD/
   2331c:	4d4d 2043 6163 6472 6920 206e 6c73 746f     MMC card in slot
   2332c:	2e2e 0d2e 000a 0000 6e69 7469 735f 6f74     ........init_sto
   2333c:	6172 6567 203a 4453 4320 7261 2064 6e69     rage: SD Card in
   2334c:	7473 6c61 206c 6166 6c69 6465 0d2e 000a     stall failed....
   2335c:	6e69 7469 735f 6f74 6172 6567 203a 7274     init_storage: tr
   2336c:	2079 6e75 6c70 6775 6120 646e 7220 2d65     y unplug and re-
   2337c:	6c70 6775 7420 6568 6320 7261 2e64 0a0d     plug the card...
   2338c:	0000 0000 6e69 7469 735f 6f74 6172 6567     ....init_storage
   2339c:	203a 6f6d 6e75 6974 676e 5320 2044 6163     : mounting SD ca
   233ac:	6472 2e2e 0d2e 000a 6e69 7469 735f 6f74     rd......init_sto
   233bc:	6172 6567 203a 4453 6320 7261 2064 6f6d     rage: SD card mo
   233cc:	6e75 2074 6166 6c69 6465 2021 7228 7365     unt failed! (res
   233dc:	2520 2964 0a0d 0000 6e69 7469 735f 6f74      %d)....init_sto
   233ec:	6172 6567 203a 4453 6320 7261 2064 6f6d     rage: SD card mo
   233fc:	6e75 2074 4b4f 0d2e 000a 0000 6f63 666e     unt OK......conf
   2340c:	6769 7275 5f65 7468 7074 635f 696c 6e65     igure_http_clien
   2341c:	3a74 4820 5454 2050 6c63 6569 746e 6920     t: HTTP client i
   2342c:	696e 6974 6c61 7a69 7461 6f69 206e 6166     nitialization fa
   2343c:	6c69 6465 2021 7228 7365 2520 2964 0a0d     iled! (res %d)..
   2344c:	0000 0000 0a0d 2520 2a2e 0073 6772 2862     ...... %.*s.rgb(
   2345c:	0000 0000 0a0d 4752 2042 6425 2520 2064     ......RGB %d %d 
   2346c:	6425 0a0d 0000 0000 227b 6167 656d 3a22     %d......{"game":
   2347c:	005b 0000 0a0d 6147 656d 6d20 7365 6173     [.....Game messa
   2348c:	6567 7220 6365 6965 6576 2164 0a0d 0000     ge received!....
   2349c:	2e25 732a 0000 0000 0a0d 6150 7372 6465     %.*s......Parsed
   234ac:	4320 6d6f 616d 646e 203a 0000 6425 002c      Command: ..%d,.
   234bc:	0a0d 6147 656d 6d20 7365 6173 6567 7220     ..Game message r
   234cc:	6365 6965 6576 2064 7562 2074 6f6e 2074     eceived but not 
   234dc:	6e75 6564 7372 6f74 646f 0d21 000a 0000     understood!.....
   234ec:	0a0d 4d49 2055 6f74 6970 2063 6572 6563     ..IMU topic rece
   234fc:	7669 6465 0d21 000a 0a0d 6944 7473 6e61     ived!.....Distan
   2350c:	6563 7420 706f 6369 7220 6365 6965 6576     ce topic receive
   2351c:	2164 0a0d 0000 0000 3e20 203e 0000 0000     d!...... >> ....
   2352c:	3150 4c5f 4445 455f 4553 3135 5f36 3054     P1_LED_ESE516_T0
   2353c:	0000 0000 6166 736c 0065 0000 7274 6575     ....false...true
   2354c:	0000 0000 0a0d 6f43 6e6e 6365 6974 676e     ......Connecting
   2355c:	7420 206f 7242 6b6f 7265 2e2e 002e 0000      to Broker......
   2356c:	7242 4a73 4e42 6f56 4251 376c 0000 0000     BrsJBNVoQBl7....
   2357c:	7472 7974 626f 6a65 0000 0000 514d 5454     rttyobej....MQTT
   2358c:	2020 7245 6f72 2072 202d 4f4e 2054 6f43       Error - NOT Co
   2359c:	6e6e 6365 6574 2064 6f74 6220 6f72 656b     nnected to broke
   235ac:	0d72 000a 514d 5454 4320 6e6f 656e 7463     r...MQTT Connect
   235bc:	6465 7420 206f 7262 6b6f 7265 0a0d 0000     ed to broker....
   235cc:	6f43 6e6e 6365 2074 6166 6c69 7420 206f     Connect fail to 
   235dc:	6573 7672 7265 2528 2973 2021 6572 7274     server(%s)! retr
   235ec:	2079 7469 6120 7475 6d6f 7461 6369 6c61     y it automatical
   235fc:	796c 0d2e 000a 0000 3150 475f 4d41 5f45     ly......P1_GAME_
   2360c:	5345 3545 3631 545f 0030 0000 3150 495f     ESE516_T0...P1_I
   2361c:	554d 455f 4553 3135 5f36 3054 0000 0000     MU_ESE516_T0....
   2362c:	514d 5454 4320 6e6f 656e 7463 6465 0a0d     MQTT Connected..
   2363c:	0000 0000 514d 5454 6220 6f72 656b 2072     ....MQTT broker 
   2364c:	6564 6c63 6e69 2065 6f79 7275 6120 6363     decline your acc
   2365c:	7365 2173 6520 7272 726f 6320 646f 2065     ess! error code 
   2366c:	6425 0a0d 0000 0000 514d 5454 6420 7369     %d......MQTT dis
   2367c:	6f63 6e6e 6365 6574 0d64 000a 514d 5454     connected...MQTT
   2368c:	6920 696e 6974 6c61 7a69 7461 6f69 206e      initialization 
   2369c:	6166 6c69 6465 202e 7245 6f72 2072 6f63     failed. Error co
   236ac:	6564 6920 2073 2528 2964 0a0d 0000 0000     de is (%d)......
   236bc:	514d 5454 7220 6765 7369 6574 2072 6163     MQTT register ca
   236cc:	6c6c 6162 6b63 6620 6961 656c 2e64 4520     llback failed. E
   236dc:	7272 726f 6320 646f 2065 7369 2820 6425     rror code is (%d
   236ec:	0d29 000a 227b 2264 7b3a 7422 6d65 2270     )...{"d":{"temp"
   236fc:	253a 7d64 007d 0000 465b 4941 5d4c 7220     :%d}}...[FAIL] r
   2370c:	7365 2520 0d64 000a 6c46 6761 2e41 7874     es %d...FlagA.tx
   2371c:	2074 6461 6564 2164 0a0d 0000 3a30 6c46     t added!....0:Fl
   2372c:	6761 2e41 7874 0074 6f43 6e6e 6365 6574     agA.txt.Connecte
   2373c:	2064 6f74 4d20 5451 2054 7242 6b6f 7265     d to MQTT Broker
   2374c:	0d21 000a 227b 6d69 7875 3a22 6425 202c     !...{"imux":%d, 
   2375c:	6922 756d 2279 203a 6425 202c 6922 756d     "imuy": %d, "imu
   2376c:	227a 203a 6425 007d 6425 0000 7d5d 0000     z": %d}.%d..]}..
   2377c:	0a0d 0000 3250 475f 4d41 5f45 5345 3545     ....P2_GAME_ESE5
   2378c:	3631 545f 0030 0000 5245 4f52 2052 6e49     16_T0...ERROR In
   2379c:	7469 6169 696c 697a 676e 5720 6669 2069     itializing Wifi 
   237ac:	6144 6174 7120 6575 6575 2173 0a0d 0000     Data queues!....
   237bc:	5345 3545 3631 2d20 5720 6669 2069 6e49     ESE516 - Wifi In
   237cc:	7469 4320 646f 0d65 000a 0000 616d 6e69     it Code.....main
   237dc:	203a 326d 5f6d 6977 6966 695f 696e 2074     : m2m_wifi_init 
   237ec:	6163 6c6c 6520 7272 726f 2021 7228 7365     call error! (res
   237fc:	2520 2964 0a0d 0000 616d 6e69 203a 6f63      %d)....main: co
   2380c:	6e6e 6365 6974 676e 7420 206f 6957 6946     nnecting to WiFi
   2381c:	4120 2050 7325 2e2e 0d2e 000a 3150 545f      AP %s......P1_T
   2382c:	4d45 4550 4152 5554 4552 455f 4553 3135     EMPERATURE_ESE51
   2383c:	5f36 3054 0000 0000 514d 5454 7320 6e65     6_T0....MQTT sen
   2384c:	2064 7325 0a0d 0000 32f8 0000 3304 0000     d %s.....2...3..
   2385c:	3316 0000 336c 0000 338c 0000 6568 706c     .3..l3...3..help
   2386c:	0000 0000 0a0d 6568 706c 0d3a 200a 694c     ......help:.. Li
   2387c:	7473 2073 6c61 206c 6874 2065 6572 6967     sts all the regi
   2388c:	7473 7265 6465 6320 6d6f 616d 646e 0d73     stered commands.
   2389c:	0d0a 000a 6e49 6f63 7272 6365 2074 6f63     ....Incorrect co
   238ac:	6d6d 6e61 2064 6170 6172 656d 6574 2872     mmand parameter(
   238bc:	2973 202e 4520 746e 7265 2220 6568 706c     s).  Enter "help
   238cc:	2022 6f74 7620 6569 2077 2061 696c 7473     " to view a list
   238dc:	6f20 2066 7661 6961 616c 6c62 2065 6f63      of available co
   238ec:	6d6d 6e61 7364 0d2e 0d0a 000a 6f43 6d6d     mmands......Comm
   238fc:	6e61 2064 6f6e 2074 6572 6f63 6e67 7369     and not recognis
   2390c:	6465 202e 4520 746e 7265 2720 6568 706c     ed.  Enter 'help
   2391c:	2027 6f74 7620 6569 2077 2061 696c 7473     ' to view a list
   2392c:	6f20 2066 7661 6961 616c 6c62 2065 6f63      of available co
   2393c:	6d6d 6e61 7364 0d2e 0d0a 000a               mmands......

00023948 <xHelpCommand>:
   23948:	3868 0002 3870 0002 4f09 0000 0000 0000     h8..p8...O......
   23958:	5476 6172 6563 6e45 6261 656c 5428 4352     vTraceEnable(TRC
   23968:	535f 4154 5452 415f 4157 5449 485f 534f     _START_AWAIT_HOS
   23978:	2954 6e20 746f 6120 6c6c 776f 6465 6920     T) not allowed i
   23988:	206e 6e53 7061 6873 746f 6d20 646f 0065     n Snapshot mode.
   23998:	6e55 7865 6570 7463 6465 6120 6772 6d75     Unexpected argum
   239a8:	6e65 2074 6f74 7620 7254 6361 4565 616e     ent to vTraceEna
   239b8:	6c62 2065 7328 616e 7370 6f68 2074 6f6d     ble (snapshot mo
   239c8:	6564 0029 7a54 7443 6c72 0000 6f4e 2074     de).TzCtrl..Not 
   239d8:	6e65 756f 6867 5420 5341 204b 6168 646e     enough TASK hand
   239e8:	656c 2073 202d 6e69 7263 6165 6573 5420     les - increase T
   239f8:	4352 435f 4746 4e5f 4154 4b53 6920 206e     RC_CFG_NTASK in 
   23a08:	7274 5363 616e 7370 6f68 4374 6e6f 6966     trcSnapshotConfi
   23a18:	2e67 0068 6f4e 2074 6e65 756f 6867 4920     g.h.Not enough I
   23a28:	5253 6820 6e61 6c64 7365 2d20 6920 636e     SR handles - inc
   23a38:	6572 7361 2065 5254 5f43 4643 5f47 494e     rease TRC_CFG_NI
   23a48:	5253 6920 206e 7274 5363 616e 7370 6f68     SR in trcSnapsho
   23a58:	4374 6e6f 6966 2e67 0068 0000 6f4e 2074     tConfig.h...Not 
   23a68:	6e65 756f 6867 5320 4d45 5041 4f48 4552     enough SEMAPHORE
   23a78:	6820 6e61 6c64 7365 2d20 6920 636e 6572      handles - incre
   23a88:	7361 2065 5254 5f43 4643 5f47 534e 4d45     ase TRC_CFG_NSEM
   23a98:	5041 4f48 4552 6920 206e 7274 5363 616e     APHORE in trcSna
   23aa8:	7370 6f68 4374 6e6f 6966 2e67 0068 0000     pshotConfig.h...
   23ab8:	6f4e 2074 6e65 756f 6867 4d20 5455 5845     Not enough MUTEX
   23ac8:	6820 6e61 6c64 7365 2d20 6920 636e 6572      handles - incre
   23ad8:	7361 2065 5254 5f43 4643 5f47 4d4e 5455     ase TRC_CFG_NMUT
   23ae8:	5845 6920 206e 7274 5363 616e 7370 6f68     EX in trcSnapsho
   23af8:	4374 6e6f 6966 2e67 0068 0000 6f4e 2074     tConfig.h...Not 
   23b08:	6e65 756f 6867 5120 4555 4555 6820 6e61     enough QUEUE han
   23b18:	6c64 7365 2d20 6920 636e 6572 7361 2065     dles - increase 
   23b28:	5254 5f43 4643 5f47 514e 4555 4555 6920     TRC_CFG_NQUEUE i
   23b38:	206e 7274 5363 616e 7370 6f68 4374 6e6f     n trcSnapshotCon
   23b48:	6966 2e67 0068 0000 6f4e 2074 6e65 756f     fig.h...Not enou
   23b58:	6867 5420 4d49 5245 6820 6e61 6c64 7365     gh TIMER handles
   23b68:	2d20 6920 636e 6572 7361 2065 5254 5f43      - increase TRC_
   23b78:	4643 5f47 544e 4d49 5245 6920 206e 7274     CFG_NTIMER in tr
   23b88:	5363 616e 7370 6f68 4374 6e6f 6966 2e67     cSnapshotConfig.
   23b98:	0068 0000 6f4e 2074 6e65 756f 6867 4520     h...Not enough E
   23ba8:	4556 544e 5247 554f 2050 6168 646e 656c     VENTGROUP handle
   23bb8:	2073 202d 6e69 7263 6165 6573 5420 4352     s - increase TRC
   23bc8:	435f 4746 4e5f 5645 4e45 4754 4f52 5055     _CFG_NEVENTGROUP
   23bd8:	6920 206e 7274 5363 616e 7370 6f68 4374      in trcSnapshotC
   23be8:	6e6f 6966 2e67 0068 6f4e 2074 6e65 756f     onfig.h.Not enou
   23bf8:	6867 5320 5254 4145 424d 4655 4546 2052     gh STREAMBUFFER 
   23c08:	6168 646e 656c 2073 202d 6e69 7263 6165     handles - increa
   23c18:	6573 5420 4352 435f 4746 4e5f 5453 4552     se TRC_CFG_NSTRE
   23c28:	4d41 5542 4646 5245 6920 206e 7274 5363     AMBUFFER in trcS
   23c38:	616e 7370 6f68 4374 6e6f 6966 2e67 0068     napshotConfig.h.
   23c48:	6f4e 2074 6e65 756f 6867 4d20 5345 4153     Not enough MESSA
   23c58:	4547 5542 4646 5245 6820 6e61 6c64 7365     GEBUFFER handles
   23c68:	2d20 6920 636e 6572 7361 2065 5254 5f43      - increase TRC_
   23c78:	4643 5f47 4d4e 5345 4153 4547 5542 4646     CFG_NMESSAGEBUFF
   23c88:	5245 6920 206e 7274 5363 616e 7370 6f68     ER in trcSnapsho
   23c98:	4374 6e6f 6966 2e67 0068 0000 7370 547a     tConfig.h...pszT
   23ca8:	6172 6563 6547 4574 7272 726f 6148 646e     raceGetErrorHand
   23cb8:	656c 3a73 4920 766e 6c61 6469 6f20 6a62     les: Invalid obj
   23cc8:	6365 6374 616c 7373 0021 0000 562e 0000     ectclass!....V..
   23cd8:	5626 0000 562a 0000 561e 0000 5622 0000     &V..*V...V.."V..
   23ce8:	5632 0000 5636 0000 563a 0000 563e 0000     2V..6V..:V..>V..
   23cf8:	5254 4341 5f45 5341 4553 5452 203a 6552     TRACE_ASSERT: Re
   23d08:	6f63 6472 7265 6e20 746f 6920 696e 6974     corder not initi
   23d18:	6c61 7a69 6465 202e 7355 2065 5476 6172     alized. Use vTra
   23d28:	6563 6e45 6261 656c 2928 6920 736e 6574     ceEnable() inste
   23d38:	6461 0021 7328 6174 7472 7075 0029 0000     ad!.(startup)...
   23d48:	5254 4341 5f45 5341 4553 5452 203a 6552     TRACE_ASSERT: Re
   23d58:	6f63 6472 7265 6e20 746f 6920 696e 6974     corder not initi
   23d68:	6c61 7a69 6465 202c 6163 6c6c 7620 7254     alized, call vTr
   23d78:	6361 4565 616e 6c62 2865 2029 6966 7372     aceEnable() firs
   23d88:	2174 0000 5254 4341 5f45 5341 4553 5452     t!..TRACE_ASSERT
   23d98:	203a 5478 6172 6563 6553 4974 5253 7250     : xTraceSetISRPr
   23da8:	706f 7265 6974 7365 203a 6e49 6176 696c     operties: Invali
   23db8:	2064 6176 756c 2065 6f66 2072 6168 646e     d value for hand
   23dc8:	656c 0000 5254 4341 5f45 5341 4553 5452     le..TRACE_ASSERT
   23dd8:	203a 5478 6172 6563 6553 4974 5253 7250     : xTraceSetISRPr
   23de8:	706f 7265 6974 7365 203a 616e 656d 3d20     operties: name =
   23df8:	203d 554e 4c4c 0000 5476 6172 6563 7453     = NULL..vTraceSt
   23e08:	726f 4965 5253 6542 6967 206e 202d 6572     oreISRBegin - re
   23e18:	6f63 6472 7265 6220 7375 2179 5320 6565     corder busy! See
   23e28:	6320 646f 2065 6f63 6d6d 6e65 2e74 0000      code comment...
   23e38:	5254 4341 5f45 5341 4553 5452 203a 5476     TRACE_ASSERT: vT
   23e48:	6172 6563 7453 726f 4965 5253 6542 6967     raceStoreISRBegi
   23e58:	3a6e 4920 766e 6c61 6469 4920 5253 6820     n: Invalid ISR h
   23e68:	6e61 6c64 2065 4e28 4c55 294c 0000 0000     andle (NULL)....
   23e78:	5254 4341 5f45 5341 4553 5452 203a 5476     TRACE_ASSERT: vT
   23e88:	6172 6563 7453 726f 4965 5253 6542 6967     raceStoreISRBegi
   23e98:	3a6e 4920 766e 6c61 6469 4920 5253 6820     n: Invalid ISR h
   23ea8:	6e61 6c64 2065 3e28 4e20 5349 2952 0000     andle (> NISR)..
   23eb8:	6f54 206f 616d 796e 6e20 7365 6574 2064     Too many nested 
   23ec8:	6e69 6574 7272 7075 7374 0021 5476 6172     interrupts!.vTra
   23ed8:	6563 7453 726f 4965 5253 6e45 2064 202d     ceStoreISREnd - 
   23ee8:	6572 6f63 6472 7265 6220 7375 2179 5320     recorder busy! S
   23ef8:	6565 6320 646f 2065 6f63 6d6d 6e65 2e74     ee code comment.
   23f08:	0000 0000 6e55 616d 6374 6568 2064 6163     ....Unmatched ca
   23f18:	6c6c 7420 206f 5476 6172 6563 7453 726f     ll to vTraceStor
   23f28:	4965 5253 6e45 2064 6e28 5349 6152 7463     eISREnd (nISRact
   23f38:	7669 2065 3d3d 3020 202c 7865 6570 7463     ive == 0, expect
   23f48:	6465 3e20 3020 0029 5254 4341 5f45 5341     ed > 0).TRACE_AS
   23f58:	4553 5452 203a 7277 7469 4965 746e 3a38     SERT: writeInt8:
   23f68:	6220 6675 6566 2072 3d3d 4e20 4c55 004c      buffer == NULL.
   23f78:	5254 4341 5f45 5341 4553 5452 203a 7277     TRACE_ASSERT: wr
   23f88:	7469 4965 746e 3631 203a 7562 6666 7265     iteInt16: buffer
   23f98:	3d20 203d 554e 4c4c 0000 0000 5254 4341      == NULL....TRAC
   23fa8:	5f45 5341 4553 5452 203a 7277 7469 4965     E_ASSERT: writeI
   23fb8:	746e 3233 203a 7562 6666 7265 3d20 203d     nt32: buffer == 
   23fc8:	554e 4c4c 0000 0000 5476 6172 6563 7250     NULL....vTracePr
   23fd8:	6e69 4674 2d20 5420 6f6f 6d20 6e61 2079     intF - Too many 
   23fe8:	7261 7567 656d 746e 2c73 6d20 7861 3120     arguments, max 1
   23ff8:	2035 6c61 6f6c 6577 2164 0000 5476 6172     5 allowed!..vTra
   24008:	6563 7250 6e69 4674 2d20 5420 6f6f 6c20     cePrintF - Too l
   24018:	7261 6567 6120 6772 6d75 6e65 7374 202c     arge arguments, 
   24028:	616d 2078 3233 6220 7479 2065 6c61 6f6c     max 32 byte allo
   24038:	6577 2164 0000 0000 5254 4341 5f45 5341     wed!....TRACE_AS
   24048:	4553 5452 203a 5476 6172 6563 5056 6972     SERT: vTraceVPri
   24058:	746e 3a46 6620 726f 616d 5374 7274 3d20     ntF: formatStr =
   24068:	203d 554e 4c4c 0000 5254 4341 5f45 5341     = NULL..TRACE_AS
   24078:	4553 5452 203a 5478 6172 6563 6552 6967     SERT: xTraceRegi
   24088:	7473 7265 7453 6972 676e 203a 616c 6562     sterString: labe
   24098:	206c 3d3d 4e20 4c55 004c 0000 5254 4341     l == NULL...TRAC
   240a8:	5f45 5341 4553 5452 203a 7270 5476 6172     E_ASSERT: prvTra
   240b8:	6563 7453 726f 5465 7361 526b 6165 7964     ceStoreTaskReady
   240c8:	203a 6e49 6176 696c 2064 6176 756c 2065     : Invalid value 
   240d8:	6f66 2072 6168 646e 656c 0000 6552 6f63     for handle..Reco
   240e8:	6472 7265 6220 7375 2079 202d 6968 6867     rder busy - high
   240f8:	7020 6972 726f 7469 2079 5349 2052 7375      priority ISR us
   24108:	6e69 2067 7973 6373 6c61 3f6c 2820 2931     ing syscall? (1)
   24118:	0000 0000 5254 4341 5f45 5341 4553 5452     ....TRACE_ASSERT
   24128:	203a 7270 5476 6172 6563 7453 726f 4c65     : prvTraceStoreL
   24138:	776f 6f50 6577 3a72 4920 766e 6c61 6469     owPower: Invalid
   24148:	6620 616c 2067 6176 756c 0065 5254 4341      flag value.TRAC
   24158:	5f45 5341 4553 5452 203a 7270 5476 6172     E_ASSERT: prvTra
   24168:	6563 7453 726f 4b65 7265 656e 436c 6c61     ceStoreKernelCal
   24178:	3a6c 6520 6f63 6564 3e20 203d 7830 4646     l: ecode >= 0xFF
   24188:	0000 0000 5254 4341 5f45 5341 4553 5452     ....TRACE_ASSERT
   24198:	203a 7270 5476 6172 6563 7453 726f 4b65     : prvTraceStoreK
   241a8:	7265 656e 436c 6c61 3a6c 6f20 6a62 6365     ernelCall: objec
   241b8:	4374 616c 7373 3e20 203d 5254 4341 5f45     tClass >= TRACE_
   241c8:	434e 414c 5353 5345 0000 0000 5254 4341     NCLASSES....TRAC
   241d8:	5f45 5341 4553 5452 203a 7270 5476 6172     E_ASSERT: prvTra
   241e8:	6563 7453 726f 4b65 7265 656e 436c 6c61     ceStoreKernelCal
   241f8:	3a6c 4920 766e 6c61 6469 7620 6c61 6575     l: Invalid value
   24208:	6620 726f 6f20 6a62 6365 4e74 6d75 6562      for objectNumbe
   24218:	0072 0000 6552 6f63 6472 7265 6220 7375     r...Recorder bus
   24228:	2079 202d 6968 6867 7020 6972 726f 7469     y - high priorit
   24238:	2079 5349 2052 7375 6e69 2067 7973 6373     y ISR using sysc
   24248:	6c61 3f6c 2820 2932 0000 0000 5254 4341     all? (2)....TRAC
   24258:	5f45 5341 4553 5452 203a 7270 5476 6172     E_ASSERT: prvTra
   24268:	6563 7453 726f 4b65 7265 656e 436c 6c61     ceStoreKernelCal
   24278:	576c 7469 5068 7261 6d61 203a 7665 6374     lWithParam: evtc
   24288:	646f 2065 3d3e 3020 4678 0046 5254 4341     ode >= 0xFF.TRAC
   24298:	5f45 5341 4553 5452 203a 7270 5476 6172     E_ASSERT: prvTra
   242a8:	6563 7453 726f 4b65 7265 656e 436c 6c61     ceStoreKernelCal
   242b8:	576c 7469 5068 7261 6d61 203a 626f 656a     lWithParam: obje
   242c8:	7463 6c43 7361 2073 3d3e 5420 4152 4543     ctClass >= TRACE
   242d8:	4e5f 4c43 5341 4553 0053 0000 5254 4341     _NCLASSES...TRAC
   242e8:	5f45 5341 4553 5452 203a 7270 5476 6172     E_ASSERT: prvTra
   242f8:	6563 7453 726f 4b65 7265 656e 436c 6c61     ceStoreKernelCal
   24308:	576c 7469 5068 7261 6d61 203a 6e49 6176     lWithParam: Inva
   24318:	696c 2064 6176 756c 2065 6f66 2072 626f     lid value for ob
   24328:	656a 7463 754e 626d 7265 0000 6552 6f63     jectNumber..Reco
   24338:	6472 7265 6220 7375 2079 202d 6968 6867     rder busy - high
   24348:	7020 6972 726f 7469 2079 5349 2052 7375      priority ISR us
   24358:	6e69 2067 7973 6373 6c61 3f6c 2820 2933     ing syscall? (3)
   24368:	0000 0000 5254 4341 5f45 5341 4553 5452     ....TRACE_ASSERT
   24378:	203a 7270 5476 6172 6563 6547 5074 7261     : prvTraceGetPar
   24388:	6d61 203a 6e49 6176 696c 2064 6176 756c     am: Invalid valu
   24398:	2065 6f66 2072 6170 6172 5f6d 616d 0078     e for param_max.
   243a8:	5254 4341 5f45 5341 4553 5452 203a 7270     TRACE_ASSERT: pr
   243b8:	5476 6172 6563 7453 726f 4b65 7265 656e     vTraceStoreKerne
   243c8:	436c 6c61 576c 7469 4e68 6d75 7265 6369     lCallWithNumeric
   243d8:	6150 6172 4f6d 6c6e 3a79 4920 766e 6c61     ParamOnly: Inval
   243e8:	6469 7620 6c61 6575 6620 726f 6520 7476     id value for evt
   243f8:	6f63 6564 0000 0000 6552 6f63 6472 7265     code....Recorder
   24408:	6220 7375 2079 202d 6968 6867 7020 6972      busy - high pri
   24418:	726f 7469 2079 5349 2052 7375 6e69 2067     ority ISR using 
   24428:	7973 6373 6c61 3f6c 2820 2934 0000 0000     syscall? (4)....
   24438:	5254 4341 5f45 5341 4553 5452 203a 7270     TRACE_ASSERT: pr
   24448:	5476 6172 6563 7453 726f 5465 7361 736b     vTraceStoreTasks
   24458:	6977 6374 3a68 4920 766e 6c61 6469 7620     witch: Invalid v
   24468:	6c61 6575 6620 726f 7420 7361 5f6b 6168     alue for task_ha
   24478:	646e 656c 0000 0000 5254 4341 5f45 5341     ndle....TRACE_AS
   24488:	4553 5452 203a 7270 5476 6172 6563 7453     SERT: prvTraceSt
   24498:	726f 4f65 6a62 6365 4e74 6d61 4f65 436e     oreObjectNameOnC
   244a8:	6f6c 6573 7645 6e65 3a74 6f20 6a62 6365     loseEvent: objec
   244b8:	6374 616c 7373 3e20 203d 5254 4341 5f45     tclass >= TRACE_
   244c8:	434e 414c 5353 5345 0000 0000 5254 4341     NCLASSES....TRAC
   244d8:	5f45 5341 4553 5452 203a 7270 5476 6172     E_ASSERT: prvTra
   244e8:	6563 7453 726f 4f65 6a62 6365 4e74 6d61     ceStoreObjectNam
   244f8:	4f65 436e 6f6c 6573 7645 6e65 3a74 4920     eOnCloseEvent: I
   24508:	766e 6c61 6469 7620 6c61 6575 6620 726f     nvalid value for
   24518:	6820 6e61 6c64 0065 5254 4341 5f45 5341      handle.TRACE_AS
   24528:	4553 5452 203a 7270 5476 6172 6563 7453     SERT: prvTraceSt
   24538:	726f 4f65 6a62 6365 5074 6f72 6570 7472     oreObjectPropert
   24548:	6569 4f73 436e 6f6c 6573 7645 6e65 3a74     iesOnCloseEvent:
   24558:	6f20 6a62 6365 6374 616c 7373 3e20 203d      objectclass >= 
   24568:	5254 4341 5f45 434e 414c 5353 5345 0000     TRACE_NCLASSES..
   24578:	5254 4341 5f45 5341 4553 5452 203a 7270     TRACE_ASSERT: pr
   24588:	5476 6172 6563 7453 726f 4f65 6a62 6365     vTraceStoreObjec
   24598:	5074 6f72 6570 7472 6569 4f73 436e 6f6c     tPropertiesOnClo
   245a8:	6573 7645 6e65 3a74 4920 766e 6c61 6469     seEvent: Invalid
   245b8:	7620 6c61 6575 6620 726f 6820 6e61 6c64      value for handl
   245c8:	0065 0000 5254 4341 5f45 5341 4553 5452     e...TRACE_ASSERT
   245d8:	203a 7270 5476 6172 6563 6553 5074 6972     : prvTraceSetPri
   245e8:	726f 7469 5079 6f72 6570 7472 3a79 6f20     orityProperty: o
   245f8:	6a62 6365 6374 616c 7373 3e20 203d 5254     bjectclass >= TR
   24608:	4341 5f45 434e 414c 5353 5345 0000 0000     ACE_NCLASSES....
   24618:	5254 4341 5f45 5341 4553 5452 203a 7270     TRACE_ASSERT: pr
   24628:	5476 6172 6563 6553 5074 6972 726f 7469     vTraceSetPriorit
   24638:	5079 6f72 6570 7472 3a79 4920 766e 6c61     yProperty: Inval
   24648:	6469 7620 6c61 6575 6620 726f 6920 0064     id value for id.
   24658:	5254 4341 5f45 5341 4553 5452 203a 7270     TRACE_ASSERT: pr
   24668:	5476 6172 6563 6547 5074 6972 726f 7469     vTraceGetPriorit
   24678:	5079 6f72 6570 7472 3a79 6f20 6a62 6365     yProperty: objec
   24688:	6374 616c 7373 3e20 203d 5254 4341 5f45     tclass >= TRACE_
   24698:	434e 414c 5353 5345 0000 0000 5254 4341     NCLASSES....TRAC
   246a8:	5f45 5341 4553 5452 203a 7270 5476 6172     E_ASSERT: prvTra
   246b8:	6563 6547 5074 6972 726f 7469 5079 6f72     ceGetPriorityPro
   246c8:	6570 7472 3a79 4920 766e 6c61 6469 7620     perty: Invalid v
   246d8:	6c61 6575 6620 726f 6920 0064 5254 4341     alue for id.TRAC
   246e8:	5f45 5341 4553 5452 203a 7270 5476 6172     E_ASSERT: prvTra
   246f8:	6563 6553 4f74 6a62 6365 5374 6174 6574     ceSetObjectState
   24708:	203a 626f 656a 7463 6c63 7361 2073 3d3e     : objectclass >=
   24718:	5420 4152 4543 4e5f 4c43 5341 4553 0053      TRACE_NCLASSES.
   24728:	5254 4341 5f45 5341 4553 5452 203a 7270     TRACE_ASSERT: pr
   24738:	5476 6172 6563 6553 4f74 6a62 6365 5374     vTraceSetObjectS
   24748:	6174 6574 203a 6e49 6176 696c 2064 6176     tate: Invalid va
   24758:	756c 2065 6f66 2072 6469 0000 5254 4341     lue for id..TRAC
   24768:	5f45 5341 4553 5452 203a 7270 5476 6172     E_ASSERT: prvTra
   24778:	6563 6547 4f74 6a62 6365 5374 6174 6574     ceGetObjectState
   24788:	203a 626f 656a 7463 6c63 7361 2073 3d3e     : objectclass >=
   24798:	5420 4152 4543 4e5f 4c43 5341 4553 0053      TRACE_NCLASSES.
   247a8:	5254 4341 5f45 5341 4553 5452 203a 7270     TRACE_ASSERT: pr
   247b8:	5476 6172 6563 6547 4f74 6a62 6365 5374     vTraceGetObjectS
   247c8:	6174 6574 203a 6e49 6176 696c 2064 6176     tate: Invalid va
   247d8:	756c 2065 6f66 2072 6469 0000 5254 4341     lue for id..TRAC
   247e8:	5f45 5341 4553 5452 203a 7270 5476 6172     E_ASSERT: prvTra
   247f8:	6563 6553 5474 7361 496b 736e 6174 636e     ceSetTaskInstanc
   24808:	4665 6e69 7369 6568 3a64 4920 766e 6c61     eFinished: Inval
   24818:	6469 7620 6c61 6575 6620 726f 6820 6e61     id value for han
   24828:	6c64 0065 7254 6361 2065 6552 6f63 6472     dle.Trace Record
   24838:	7265 4420 6d65 006f 7441 6574 706d 2074     er Demo.Attempt 
   24848:	6f74 6920 646e 7865 6f20 7475 6973 6564     to index outside
   24858:	6520 6576 746e 6220 6675 6566 2172 0000      event buffer!..
   24868:	5254 4341 5f45 5341 4553 5452 203a 6975     TRACE_ASSERT: ui
   24878:	6e49 6564 4f78 4f66 6a62 6365 3a74 4920     IndexOfObject: I
   24888:	766e 6c61 6469 7620 6c61 6575 6620 726f     nvalid value for
   24898:	6f20 6a62 6365 6374 616c 7373 0000 0000      objectclass....
   248a8:	5254 4341 5f45 5341 4553 5452 203a 6975     TRACE_ASSERT: ui
   248b8:	6e49 6564 4f78 4f66 6a62 6365 3a74 4920     IndexOfObject: I
   248c8:	766e 6c61 6469 7620 6c61 6575 6620 726f     nvalid value for
   248d8:	6f20 6a62 6365 6874 6e61 6c64 0065 0000      objecthandle...
   248e8:	624f 656a 7463 7420 6261 656c 6c20 6f6f     Object table loo
   248f8:	756b 2070 6977 6874 6920 766e 6c61 6469     kup with invalid
   24908:	6f20 6a62 6365 2074 6168 646e 656c 6f20      object handle o
   24918:	2072 626f 656a 7463 6320 616c 7373 0021     r object class!.
   24928:	5254 4341 5f45 5341 4553 5452 203a 7270     TRACE_ASSERT: pr
   24938:	5476 6172 6563 6547 4f74 6a62 6365 4874     vTraceGetObjectH
   24948:	6e61 6c64 3a65 4920 766e 6c61 6469 7620     andle: Invalid v
   24958:	6c61 6575 6620 726f 6f20 6a62 6365 6374     alue for objectc
   24968:	616c 7373 0000 0000 5254 4341 5f45 5341     lass....TRACE_AS
   24978:	4553 5452 203a 7270 5476 6172 6563 7246     SERT: prvTraceFr
   24988:	6565 624f 656a 7463 6148 646e 656c 203a     eeObjectHandle: 
   24998:	6e49 6176 696c 2064 6176 756c 2065 6f66     Invalid value fo
   249a8:	2072 626f 656a 7463 6c63 7361 0073 0000     r objectclass...
   249b8:	5254 4341 5f45 5341 4553 5452 203a 7270     TRACE_ASSERT: pr
   249c8:	5476 6172 6563 7246 6565 624f 656a 7463     vTraceFreeObject
   249d8:	6148 646e 656c 203a 6e49 6176 696c 2064     Handle: Invalid 
   249e8:	6176 756c 2065 6f66 2072 6168 646e 656c     value for handle
   249f8:	0000 0000 7441 6574 706d 2074 6f74 6620     ....Attempt to f
   24a08:	6572 2065 6f6d 6572 6820 6e61 6c64 7365     ree more handles
   24a18:	7420 6168 206e 6c61 6f6c 6163 6574 2164      than allocated!
   24a28:	0000 0000 5254 4341 5f45 5341 4553 5452     ....TRACE_ASSERT
   24a38:	203a 7270 5476 6172 6563 6553 4f74 6a62     : prvTraceSetObj
   24a48:	6365 4e74 6d61 3a65 6e20 6d61 2065 3d3d     ectName: name ==
   24a58:	4e20 4c55 004c 0000 6c49 656c 6167 206c      NULL...Illegal 
   24a68:	626f 656a 7463 6320 616c 7373 6920 206e     object class in 
   24a78:	7270 5476 6172 6563 6553 4f74 6a62 6365     prvTraceSetObjec
   24a88:	4e74 6d61 0065 0000 6c49 656c 6167 206c     tName...Illegal 
   24a98:	6168 646e 656c 2820 2930 6920 206e 7270     handle (0) in pr
   24aa8:	5476 6172 6563 6553 4f74 6a62 6365 4e74     vTraceSetObjectN
   24ab8:	6d61 2e65 0000 0000 5254 4341 5f45 5341     ame.....TRACE_AS
   24ac8:	4553 5452 203a 7270 5476 6172 6563 704f     SERT: prvTraceOp
   24ad8:	6e65 7953 626d 6c6f 203a 616e 656d 3d20     enSymbol: name =
   24ae8:	203d 554e 4c4c 0000 5254 4341 5f45 5341     = NULL..TRACE_AS
   24af8:	4553 5452 203a 7270 4376 6568 6b63 6144     SERT: prvCheckDa
   24b08:	6174 6f54 6542 764f 7265 7277 7469 6574     taToBeOverwritte
   24b18:	466e 726f 754d 746c 4569 746e 7972 7645     nForMultiEntryEv
   24b28:	6e65 7374 203a 6f6e 4566 746e 6972 7365     ents: nofEntries
   24b38:	6f54 6843 6365 206b 3d3d 3020 0000 0000     ToCheck == 0....
   24b48:	5254 4341 5f45 5341 4553 5452 203a 7270     TRACE_ASSERT: pr
   24b58:	5476 6172 6563 6547 4474 5354 203a 6e49     vTraceGetDTS: In
   24b68:	6176 696c 2064 6176 756c 2065 6f66 2072     valid value for 
   24b78:	6170 6172 5f6d 616d 4478 5354 0000 0000     param_maxDTS....
   24b88:	6142 2064 6170 6172 5f6d 616d 4478 5354     Bad param_maxDTS
   24b98:	6920 206e 7270 5476 6172 6563 6547 4474      in prvTraceGetD
   24ba8:	5354 0000 5254 4341 5f45 5341 4553 5452     TS..TRACE_ASSERT
   24bb8:	203a 7270 5476 6172 6563 6f4c 6b6f 7075     : prvTraceLookup
   24bc8:	7953 626d 6c6f 6154 6c62 4565 746e 7972     SymbolTableEntry
   24bd8:	203a 616e 656d 3d20 203d 554e 4c4c 0000     : name == NULL..
   24be8:	5254 4341 5f45 5341 4553 5452 203a 7270     TRACE_ASSERT: pr
   24bf8:	5476 6172 6563 6f4c 6b6f 7075 7953 626d     vTraceLookupSymb
   24c08:	6c6f 6154 6c62 4565 746e 7972 203a 656c     olTableEntry: le
   24c18:	206e 3d3d 3020 0000 5254 4341 5f45 5341     n == 0..TRACE_AS
   24c28:	4553 5452 203a 7270 5476 6172 6563 7243     SERT: prvTraceCr
   24c38:	6165 6574 7953 626d 6c6f 6154 6c62 4565     eateSymbolTableE
   24c48:	746e 7972 203a 616e 656d 3d20 203d 554e     ntry: name == NU
   24c58:	4c4c 0000 5254 4341 5f45 5341 4553 5452     LL..TRACE_ASSERT
   24c68:	203a 7270 5476 6172 6563 7243 6165 6574     : prvTraceCreate
   24c78:	7953 626d 6c6f 6154 6c62 4565 746e 7972     SymbolTableEntry
   24c88:	203a 656c 206e 3d3d 3020 0000 7953 626d     : len == 0..Symb
   24c98:	6c6f 7420 6261 656c 6620 6c75 2e6c 4920     ol table full. I
   24ca8:	636e 6572 7361 2065 5254 5f43 4643 5f47     ncrease TRC_CFG_
   24cb8:	5953 424d 4c4f 545f 4241 454c 535f 5a49     SYMBOL_TABLE_SIZ
   24cc8:	2045 6e69 7420 6372 6f43 666e 6769 682e     E in trcConfig.h
   24cd8:	0000 0000 5254 4341 5f45 5341 4553 5452     ....TRACE_ASSERT
   24ce8:	203a 7270 5476 6172 6563 6547 4374 6568     : prvTraceGetChe
   24cf8:	6b63 7573 3a6d 7020 616e 656d 3d20 203d     cksum: pname == 
   24d08:	554e 4c4c 0000 0000 5254 4341 5f45 5341     NULL....TRACE_AS
   24d18:	4553 5452 203a 7270 5476 6172 6563 6547     SERT: prvTraceGe
   24d28:	4374 6568 6b63 7573 3a6d 7020 7263 2063     tChecksum: pcrc 
   24d38:	3d3d 4e20 4c55 004c 5254 4341 5f45 5341     == NULL.TRACE_AS
   24d48:	4553 5452 203a 7270 5476 6172 6563 6547     SERT: prvTraceGe
   24d58:	4374 6568 6b63 7573 3a6d 7020 656c 676e     tChecksum: pleng
   24d68:	6874 3d20 203d 554e 4c4c 0000 4449 454c     th == NULL..IDLE
   24d78:	0000 0000 6d54 2072 7653 0063 a6cc 0000     ....Tmr Svc.....
   24d88:	a6cc 0000 a6cc 0000 a75a 0000 a724 0000     ........Z...$...
   24d98:	a74e 0000 a6cc 0000 a6cc 0000 a75a 0000     N...........Z...
   24da8:	a724 0000                                   $...

00024dac <sd_mmc_trans_units>:
   24dac:	000a 0000 0064 0000 03e8 0000 2710 0000     ....d........'..
	...

00024dc8 <sd_trans_multipliers>:
   24dc8:	0000 0000 000a 0000 000c 0000 000d 0000     ................
   24dd8:	000f 0000 0014 0000 0019 0000 001e 0000     ................
   24de8:	0023 0000 0028 0000 002d 0000 0032 0000     #...(...-...2...
   24df8:	0037 0000 003c 0000 0046 0000 0050 0000     7...<...F...P...

00024e08 <mmc_trans_multipliers>:
   24e08:	0000 0000 000a 0000 000c 0000 000d 0000     ................
   24e18:	000f 0000 0014 0000 001a 0000 001e 0000     ................
   24e28:	0023 0000 0028 0000 002d 0000 0034 0000     #...(...-...4...
   24e38:	0037 0000 003c 0000 0046 0000 0050 0000     7...<...F...P...
   24e48:	4128 5050 2829 5245 2952 255b 5d73 255b     (APP)(ERR)[%s][%
   24e58:	5d64 0000 6e69 6176 696c 6564 6920 636f     d]..invalide ioc
   24e68:	746c 6320 646d 000a 000d 0000               lt cmd......

00024e74 <__FUNCTION__.16824>:
   24e74:	6d6e 625f 7375 695f 636f 6c74 0000 0000     nm_bus_ioctl....
   24e84:	4128 5050 2829 4e49 4f46 0029 6c53 776f     (APP)(INFO).Slow
   24e94:	6e69 2067 6f64 6e77 2e2e 0a2e 0000 0000     ing down........
   24ea4:	000d 0000 4128 5050 2829 5245 2952 255b     ....(APP)(ERR)[%
   24eb4:	5d73 255b 5d64 0000 4828 4649 4629 6961     s][%d]..(HIF)Fai
   24ec4:	206c 6f74 7720 6b61 7075 7420 6568 6320     l to wakup the c
   24ed4:	6968 0a70 0000 0000 6828 6669 2029 4957     hip.....(hif) WI
   24ee4:	4946 485f 534f 5f54 4352 5f56 5443 4c52     FI_HOST_RCV_CTRL
   24ef4:	315f 6220 7375 6620 6961 0a6c 0000 0000     _1 bus fail.....
   24f04:	6828 6669 2029 6461 7264 7365 2073 7562     (hif) address bu
   24f14:	2073 6166 6c69 000a 6828 6669 2029 6f43     s fail..(hif) Co
   24f24:	7272 7075 6574 2064 6170 6b63 7465 5320     rrupted packet S
   24f34:	7a69 2065 203d 7525 3c20 204c 203d 7525     ize = %u <L = %u
   24f44:	202c 2047 203d 7525 202c 504f 3d20 2520     , G = %u, OP = %
   24f54:	3230 3e58 000a 0000 4957 4946 6320 6c61     02X>....WIFI cal
   24f64:	626c 6361 206b 7369 6e20 746f 7220 6765     lback is not reg
   24f74:	7369 6574 6572 0a64 0000 0000 6353 6b6f     istered.....Scok
   24f84:	7465 6320 6c61 626c 6361 206b 7369 6e20     et callback is n
   24f94:	746f 7220 6765 7369 6574 6572 0a64 0000     ot registered...
   24fa4:	744f 2061 6163 6c6c 6162 6b63 6920 2073     Ota callback is 
   24fb4:	6f6e 2074 6572 6967 7473 7265 6465 000a     not registered..
   24fc4:	7243 7079 6f74 6320 6c61 626c 6361 206b     Crypto callback 
   24fd4:	7369 6e20 746f 7220 6765 7369 6574 6572     is not registere
   24fe4:	0a64 0000 6953 6d67 2061 6163 6c6c 6162     d...Sigma callba
   24ff4:	6b63 6920 2073 6f6e 2074 6572 6967 7473     ck is not regist
   25004:	7265 6465 000a 0000 6828 6669 2029 6e69     ered....(hif) in
   25014:	6176 696c 2064 7267 756f 2070 4449 000a     valid group ID..
   25024:	6828 6669 2029 6f68 7473 6120 7070 6420     (hif) host app d
   25034:	6469 276e 2074 6573 2074 5852 4420 6e6f     idn't set RX Don
   25044:	2065 253c 3e75 253c 3e58 000a 6828 6669     e <%u><%X>..(hif
   25054:	2029 7257 6e6f 2067 6953 657a 000a 0000     ) Wrong Size....
   25064:	6828 6669 2029 6146 736c 2065 6e69 6574     (hif) False inte
   25074:	7272 7075 2074 6c25 0078 0000 6828 6669     rrupt %lx...(hif
   25084:	2029 6146 6c69 7420 206f 6552 6461 6920     ) Fail to Read i
   25094:	746e 7265 7572 7470 7220 6765 000a 0000     nterrupt reg....
   250a4:	4828 4649 2029 6146 6c69 7420 206f 6168     (HIF) Fail to ha
   250b4:	646e 656c 6920 746e 7265 7572 7470 2520     ndle interrupt %
   250c4:	2064 7274 2079 6741 6961 2e6e 0a2e 0000     d try Again.....
   250d4:	6820 6669 725f 6365 6965 6576 203a 6e49      hif_receive: In
   250e4:	6176 696c 2064 7261 7567 656d 746e 000a     valid argument..
   250f4:	5041 2050 6552 7571 7365 6574 2064 6953     APP Requested Si
   25104:	657a 6920 2073 616c 6772 7265 7420 6168     ze is larger tha
   25114:	206e 6874 2065 6572 6963 6576 2064 7562     n the recived bu
   25124:	6666 7265 7320 7a69 2065 253c 3e75 253c     ffer size <%u><%
   25134:	756c 0a3e 0000 0000 5041 2050 6552 7571     lu>.....APP Requ
   25144:	7365 6574 2064 6441 7264 7365 2073 6562     ested Address be
   25154:	6f79 646e 7420 6568 7220 6365 7669 6465     yond the recived
   25164:	6220 6675 6566 2072 6461 7264 7365 2073      buffer address 
   25174:	6e61 2064 656c 676e 6874 000a 5247 2070     and length..GRp 
   25184:	203f 6425 000a 0000 e86c 0000 e83c 0000     ? %d....l...<...
   25194:	e834 0000 e84c 0000 e844 0000 e864 0000     4...L...D...d...
   251a4:	e854 0000 e85c 0000                         T...\...

000251ac <__FUNCTION__.17692>:
   251ac:	6968 5f66 6573 646e 0000 0000               hif_send....

000251b8 <__FUNCTION__.17702>:
   251b8:	6968 5f66 7369 0072                         hif_isr.

000251c0 <__FUNCTION__.17711>:
   251c0:	6968 5f66 6168 646e 656c 695f 7273 0000     hif_handle_isr..

000251d0 <__FUNCTION__.17723>:
   251d0:	6968 5f66 6572 6563 7669 0065               hif_receive.

000251dc <__FUNCTION__.17739>:
   251dc:	6968 5f66 6572 6967 7473 7265 635f 0062     hif_register_cb.
   251ec:	4128 5050 2829 4e49 4f46 0029 6f43 666e     (APP)(INFO).Conf
   251fc:	696c 7463 6465 4920 2050 2022 7525 252e     licted IP " %u.%
   2520c:	2e75 7525 252e 2075 2022 000a 000d 0000     u.%u.%u " ......
   2521c:	4128 5050 2829 5245 2952 255b 5d73 255b     (APP)(ERR)[%s][%
   2522c:	5d64 0000 4552 2051 6f4e 2074 6564 6966     d]..REQ Not defi
   2523c:	656e 2064 6425 000a 4e49 4156 494c 2044     ned %d..INVALID 
   2524c:	4f50 4e49 4554 0a52 0000 0000 4e49 4156     POINTER.....INVA
   2525c:	494c 2044 5353 4449 000a 0000 4e49 4156     LID SSID....INVA
   2526c:	494c 2044 4843 000a 4e49 4156 494c 2044     LID CH..INVALID 
   2527c:	4844 5043 5320 5245 4556 2052 5049 000a     DHCP SERVER IP..
   2528c:	4e49 4156 494c 2044 454b 2059 4e49 4544     INVALID KEY INDE
   2529c:	0a58 0000 4e49 4156 494c 2044 454b 2059     X...INVALID KEY 
   252ac:	5453 4952 474e 5320 5a49 0a45 0000 0000     STRING SIZE.....
   252bc:	4e49 4156 494c 2044 454b 2059 4953 455a     INVALID KEY SIZE
   252cc:	000a 0000 4e49 4156 494c 2044 5057 2041     ....INVALID WPA 
   252dc:	454b 2059 4953 455a 000a 0000 4e49 4156     KEY SIZE....INVA
   252ec:	494c 2044 5541 4854 4e45 4954 4143 4954     LID AUTHENTICATI
   252fc:	4e4f 4d20 444f 0a45 0000 0000 4e49 4156     ON MODE.....INVA
   2530c:	494c 2044 6f4e 6f20 2066 6373 6e61 7320     LID No of scan s
   2531c:	6f6c 7374 2021 6425 000a 0000 4e49 4156     lots! %d....INVA
   2532c:	494c 2044 6373 6e61 7320 6f6c 2074 6974     LID scan slot ti
   2533c:	656d 2021 6425 000a 4e49 4156 494c 2044     me! %d..INVALID 
   2534c:	6f4e 6f20 2066 7270 626f 2065 6572 7571     No of probe requ
   2535c:	7365 7374 7020 7265 7320 6163 206e 6c73     ests per scan sl
   2536c:	746f 2520 0a64 0000 4e49 4156 494c 2044     ot %d...INVALID 
   2537c:	5352 4953 7420 7268 7365 6f68 646c 2520     RSSI threshold %
   2538c:	2064 000a 6946 6d72 6177 6572 7620 7265     d ..Firmware ver
   2539c:	2020 3a20 2520 2e75 7525 252e 2075 7653        : %u.%u.%u Sv
   253ac:	726e 7665 2520 0a75 0000 0000 6946 6d72     nrev %u.....Firm
   253bc:	6177 6572 4220 6975 646c 2520 2073 6954     ware Build %s Ti
   253cc:	656d 2520 0a73 0000 6946 6d72 6177 6572     me %s...Firmware
   253dc:	4d20 6e69 6420 6972 6576 2072 6576 2072      Min driver ver 
   253ec:	203a 7525 252e 2e75 7525 000a 7244 7669     : %u.%u.%u..Driv
   253fc:	7265 7620 7265 203a 7525 252e 2e75 7525     er ver: %u.%u.%u
   2540c:	000a 0000 3431 303a 3a33 3431 0000 0000     ....14:03:14....
   2541c:	614d 2072 3831 3220 3230 0034 7244 7669     Mar 18 2024.Driv
   2542c:	7265 6220 6975 746c 6120 2074 7325 2509     er built at %s.%
   2543c:	0a73 0000 694d 6d73 7461 6863 4620 7269     s...Mismatch Fir
   2544c:	616d 7277 2065 6556 7372 6f69 0a6e 0000     mawre Version...
   2545c:	654b 2079 7369 6e20 746f 7620 6c61 6469     Key is not valid
   2546c:	000a 0000 6e49 6176 696c 2064 654b 0a79     ....Invalid Key.
   2547c:	0000 0000 5353 4449 4c20 4e45 4920 564e     ....SSID LEN INV
   2548c:	4c41 4449 000a 0000 4843 4920 564e 4c41     ALID....CH INVAL
   2549c:	4449 000a 6e49 6176 696c 2064 6557 2070     ID..Invalid Wep 
   254ac:	656b 2079 6e69 6564 2078 6425 000a 0000     key index %d....
   254bc:	6e49 6176 696c 2064 6557 2070 656b 2079     Invalid Wep key 
   254cc:	656c 676e 6874 2520 0a64 0000 6e49 6f63     length %d...Inco
   254dc:	7272 6365 2074 5350 204b 656b 2079 656c     rrect PSK key le
   254ec:	676e 6874 000a 0000 6e75 6564 6966 656e     ngth....undefine
   254fc:	2064 6573 2063 7974 6570 000a 505f 5f53     d sec type.._PS_
   2550c:	4553 5652 5245 205f 7369 6e20 746f 6420     SERVER_ is not d
   2551c:	6665 6e69 6465 000a 694c 7473 6e65 6320     efined..Listen c
   2552c:	6168 6e6e 6c65 7320 6f68 6c75 2064 6e6f     hannel should on
   2553c:	796c 6220 2065 324d 5f4d 4957 4946 435f     ly be M2M_WIFI_C
   2554c:	5f48 2f31 2f36 3131 0a20 0000 4f50 4557     H_1/6/11 ...POWE
   2555c:	2052 4153 4556 2520 0a64 0000 4e49 4156     R SAVE %d...INVA
   2556c:	494c 2044 4f44 414d 4e49 4e20 4d41 0a45     LID DOMAIN NAME.
   2557c:	0000 0000 5250 474e 4220 6675 6566 2072     ....PRNG Buffer 
   2558c:	7865 6563 6465 6465 6d20 7861 6d69 6d75     exceeded maximum
   2559c:	7320 7a69 2065 6425 6f20 2072 554e 4c4c      size %d or NULL
   255ac:	4220 6675 6566 0a72 0000 0000                Buffer.....

000255b8 <__FUNCTION__.17674>:
   255b8:	326d 5f6d 6977 6966 635f 0062               m2m_wifi_cb.

000255c4 <__FUNCTION__.17703>:
   255c4:	326d 5f6d 6977 6966 695f 696e 0074 0000     m2m_wifi_init...

000255d4 <__FUNCTION__.17734>:
   255d4:	326d 5f6d 6977 6966 635f 6e6f 656e 7463     m2m_wifi_connect
   255e4:	735f 0063 4128 5050 2829 5245 2952 255b     _sc.(APP)(ERR)[%
   255f4:	5d73 255b 5d64 0000 7542 2073 7265 6f72     s][%d]..Bus erro
   25604:	2072 3528 2e29 6425 2520 786c 000a 0000     r (5).%d %lx....
   25614:	000d 0000 6146 6c69 6465 7420 206f 6177     ....Failed to wa
   25624:	756b 2070 6874 2065 6863 7069 000a 0000     kup the chip....
   25634:	4128 5050 2829 4e49 4f46 0029 7244 7669     (APP)(INFO).Driv
   25644:	7265 6556 4972 666e 3a6f 3020 2578 3830     erVerInfo: 0x%08
   25654:	786c 000a 6166 6c69 6465 7420 206f 6564     lx..failed to de
   25664:	692d 696e 6974 6c61 7a69 0a65 0000 0000     -initialize.....

00025674 <__FUNCTION__.17531>:
   25674:	6863 7069 775f 6b61 0065 0000               chip_wake...

00025680 <__FUNCTION__.17580>:
   25680:	6863 7069 645f 6965 696e 0074 4128 5050     chip_deinit.(APP
   25690:	2829 5245 2952 255b 5d73 255b 5d64 0000     )(ERR)[%s][%d]..
   256a0:	6e5b 696d 7320 6174 7472 3a5d 6620 6961     [nmi start]: fai
   256b0:	206c 6e69 7469 6220 7375 000a 000d 0000     l init bus......
   256c0:	4128 5050 2829 4e49 4f46 0029 6843 7069     (APP)(INFO).Chip
   256d0:	4920 2044 6c25 0a78 0000 0000 6166 6c69      ID %lx.....fail
   256e0:	6465 7420 206f 6e65 6261 656c 6920 746e     ed to enable int
   256f0:	7265 7572 7470 2e73 0a2e 0000 6e5b 696d     errupts.....[nmi
   25700:	7320 6f74 5d70 203a 6863 7069 645f 6965      stop]: chip_dei
   25710:	696e 2074 6166 6c69 000a 0000 6e5b 696d     nit fail....[nmi
   25720:	7320 6f74 5d70 203a 5053 2049 6c66 7361      stop]: SPI flas
   25730:	2068 6964 6173 6c62 2065 6166 6c69 000a     h disable fail..
   25740:	6e5b 696d 7320 6f74 5d70 203a 6166 6c69     [nmi stop]: fail
   25750:	6920 696e 2074 7562 0a73 0000                init bus...

0002575c <__FUNCTION__.17578>:
   2575c:	6d6e 645f 7672 695f 696e 0074               nm_drv_init.

00025768 <__FUNCTION__.17585>:
   25768:	6d6e 645f 7672 645f 6965 696e 0074 0000     nm_drv_deinit...

00025778 <crc7_syndrome_table>:
   25778:	0900 1b12 2d24 3f36 4148 535a 656c 777e     ....$-6?HAZSle~w
   25788:	1019 020b 343d 262f 5851 4a43 7c75 6e67     ....=4/&QXCJu|gn
   25798:	3b32 2920 1f16 0d04 737a 6168 575e 454c     2; )....zsha^WLE
   257a8:	222b 3039 060f 141d 6a63 7871 4e47 5c55     +"90....cjqxGNU\
   257b8:	6d64 7f76 4940 5b52 252c 373e 0108 131a     dmv.@IR[,%>7....
   257c8:	747d 666f 5059 424b 3c35 2e27 1811 0a03     }tofYPKB5<'.....
   257d8:	5f56 4d44 7b72 6960 171e 050c 333a 2128     V_DMr{`i....:3(!
   257e8:	464f 545d 626b 7079 0e07 1c15 2a23 3831     OF]Tkbyp....#*18
   257f8:	4841 5a53 6c65 7e77 0009 121b 242d 363f     AHSZelw~....-$?6
   25808:	5158 434a 757c 676e 1910 0b02 3d34 2f26     XQJC|ung....4=&/
   25818:	7a73 6861 5e57 4c45 323b 2029 161f 040d     szahW^EL;2) ....
   25828:	636a 7178 474e 555c 2b22 3930 0f06 1d14     jcxqNG\U"+09....
   25838:	2c25 3e37 0801 1a13 646d 767f 4049 525b     %,7>....md.vI@[R
   25848:	353c 272e 1118 030a 7d74 6f66 5950 4b42     <5.'....t}foPYBK
   25858:	1e17 0c05 3a33 2821 565f 444d 727b 6069     ....3:!(_VMD{ri`
   25868:	070e 151c 232a 3138 4f46 5d54 6b62 7970     ....*#81FOT]bkpy
   25878:	4128 5050 2829 5245 2952 255b 5d73 255b     (APP)(ERR)[%s][%
   25888:	5d64 0000 6e5b 696d 7320 6970 3a5d 4620     d]..[nmi spi]: F
   25898:	6961 656c 2064 6d63 2064 7277 7469 2c65     ailed cmd write,
   258a8:	6220 7375 6520 7272 726f 2e2e 0a2e 0000      bus error......
   258b8:	000d 0000 6e5b 696d 7320 6970 3a5d 4620     ....[nmi spi]: F
   258c8:	6961 656c 2064 7562 2073 7265 6f72 2e72     ailed bus error.
   258d8:	2e2e 000a 6e5b 696d 7320 6970 3a5d 4620     ....[nmi spi]: F
   258e8:	6961 656c 2064 6164 6174 7220 7365 6f70     ailed data respo
   258f8:	736e 2065 6572 6461 202c 7825 2520 2078     nse read, %x %x 
   25908:	7825 000a 6e5b 696d 7320 6970 3a5d 4620     %x..[nmi spi]: F
   25918:	6961 656c 2064 6d63 2064 6572 7073 6e6f     ailed cmd respon
   25928:	6573 7220 6165 2c64 6220 7375 6520 7272     se read, bus err
   25938:	726f 2e2e 0a2e 0000 6e5b 696d 7320 6970     or......[nmi spi
   25948:	3a5d 7320 6970 6220 6675 6566 2072 6973     ]: spi buffer si
   25958:	657a 7420 6f6f 7320 616d 6c6c 2820 6425     ze too small (%d
   25968:	2029 2528 2964 000a 6e5b 696d 7320 6970     ) (%d)..[nmi spi
   25978:	3a5d 4620 6961 656c 2064 6d63 2064 6572     ]: Failed cmd re
   25988:	7073 6e6f 6573 202c 6d63 2064 2528 3230     sponse, cmd (%02
   25998:	2978 202c 6572 7073 2820 3025 7832 0a29     x), resp (%02x).
   259a8:	0000 0000 6e5b 696d 7320 6970 3a5d 4620     ....[nmi spi]: F
   259b8:	6961 656c 2064 6d63 2064 7473 7461 2065     ailed cmd state 
   259c8:	6572 7073 6e6f 6573 7320 6174 6574 2820     response state (
   259d8:	3025 7832 0a29 0000 6e5b 696d 7320 6970     %02x)...[nmi spi
   259e8:	3a5d 4520 7272 726f 202c 6164 6174 7220     ]: Error, data r
   259f8:	6165 2064 6572 7073 6e6f 6573 2820 3025     ead response (%0
   25a08:	7832 0a29 0000 0000 6e5b 696d 7320 6970     2x).....[nmi spi
   25a18:	3a5d 6220 6675 6566 2072 766f 7265 7572     ]: buffer overru
   25a28:	206e 6877 6e65 7220 6165 6964 676e 6420     n when reading d
   25a38:	7461 2e61 000a 0000 6e5b 696d 7320 6970     ata.....[nmi spi
   25a48:	3a5d 6220 6675 6566 2072 766f 7265 7572     ]: buffer overru
   25a58:	206e 6877 6e65 7220 6165 6964 676e 6320     n when reading c
   25a68:	6372 0a2e 0000 0000 6e5b 696d 7320 6970     rc......[nmi spi
   25a78:	3a5d 4620 6961 656c 2064 6164 6174 6220     ]: Failed data b
   25a88:	6f6c 6b63 7220 6165 2c64 6220 7375 6520     lock read, bus e
   25a98:	7272 726f 2e2e 0a2e 0000 0000 6e5b 696d     rror........[nmi
   25aa8:	7320 6970 3a5d 4620 6961 656c 2064 6164      spi]: Failed da
   25ab8:	6174 6220 6f6c 6b63 6320 6372 7220 6165     ta block crc rea
   25ac8:	2c64 6220 7375 6520 7272 726f 2e2e 0a2e     d, bus error....
   25ad8:	0000 0000 6e5b 696d 7320 6970 3a5d 4620     ....[nmi spi]: F
   25ae8:	6961 656c 2064 6164 6174 7220 7365 6f70     ailed data respo
   25af8:	736e 2065 6572 6461 202c 7562 2073 7265     nse read, bus er
   25b08:	6f72 2e72 2e2e 000a 6e5b 696d 7320 6970     ror.....[nmi spi
   25b18:	3a5d 4620 6961 656c 2064 6164 6174 7220     ]: Failed data r
   25b28:	7365 6f70 736e 2065 6572 6461 2e2e 282e     esponse read...(
   25b38:	3025 7832 0a29 0000 6e5b 696d 7320 6970     %02x)...[nmi spi
   25b48:	3a5d 4620 6961 656c 2064 6164 6174 6220     ]: Failed data b
   25b58:	6f6c 6b63 6320 646d 7720 6972 6574 202c     lock cmd write, 
   25b68:	7562 2073 7265 6f72 2e72 2e2e 000a 0000     bus error.......
   25b78:	6e5b 696d 7320 6970 3a5d 4620 6961 656c     [nmi spi]: Faile
   25b88:	2064 6164 6174 6220 6f6c 6b63 7720 6972     d data block wri
   25b98:	6574 202c 7562 2073 7265 6f72 2e72 2e2e     te, bus error...
   25ba8:	000a 0000 6e5b 696d 7320 6970 3a5d 4620     ....[nmi spi]: F
   25bb8:	6961 656c 2064 6164 6174 6220 6f6c 6b63     ailed data block
   25bc8:	6320 6372 7720 6972 6574 202c 7562 2073      crc write, bus 
   25bd8:	7265 6f72 2e72 2e2e 000a 0000 6e5b 696d     error.......[nmi
   25be8:	7320 6970 3a5d 4620 6961 656c 2064 6d63      spi]: Failed cm
   25bf8:	2c64 7720 6972 6574 7220 6765 2820 3025     d, write reg (%0
   25c08:	7838 2e29 2e2e 000a 6552 6573 2074 6e61     8x).....Reset an
   25c18:	2064 6572 7274 2079 6425 2520 786c 2520     d retry %d %lx %
   25c28:	786c 000a 6e5b 696d 7320 6970 3a5d 4620     lx..[nmi spi]: F
   25c38:	6961 656c 2064 6d63 2c64 7720 6972 6574     ailed cmd, write
   25c48:	6220 6f6c 6b63 2820 3025 7838 2e29 2e2e      block (%08x)...
   25c58:	000a 0000 6e5b 696d 7320 6970 3a5d 4620     ....[nmi spi]: F
   25c68:	6961 656c 2064 6c62 636f 206b 6164 6174     ailed block data
   25c78:	7720 6972 6574 2e2e 0a2e 0000 6552 6573      write......Rese
   25c88:	2074 6e61 2064 6572 7274 2079 6425 2520     t and retry %d %
   25c98:	786c 2520 0a64 0000 6e5b 696d 7320 6970     lx %d...[nmi spi
   25ca8:	3a5d 4620 6961 656c 2064 6d63 2c64 7220     ]: Failed cmd, r
   25cb8:	6165 2064 6572 2067 2528 3830 2978 2e2e     ead reg (%08x)..
   25cc8:	0a2e 0000 6552 6573 2074 6e61 2064 6572     ....Reset and re
   25cd8:	7274 2079 6425 2520 786c 000a 6e5b 696d     try %d %lx..[nmi
   25ce8:	7320 6970 3a5d 4620 6961 656c 2064 6d63      spi]: Failed cm
   25cf8:	2c64 7220 6165 2064 6c62 636f 206b 2528     d, read block (%
   25d08:	3830 2978 2e2e 0a2e 0000 0000 6e5b 696d     08x)........[nmi
   25d18:	7320 6970 3a5d 4620 6961 656c 2064 6e69      spi]: Failed in
   25d28:	6574 6e72 6c61 7220 6165 2064 7270 746f     ternal read prot
   25d38:	636f 6c6f 7720 7469 2068 5243 2043 6e6f     ocol with CRC on
   25d48:	202c 6572 7974 6972 676e 7720 7469 2068     , retyring with 
   25d58:	5243 2043 666f 2e66 2e2e 000a 6e5b 696d     CRC off.....[nmi
   25d68:	7320 6970 3a5d 4620 6961 656c 2064 6e69      spi]: Failed in
   25d78:	6574 6e72 6c61 7220 6165 2064 7270 746f     ternal read prot
   25d88:	636f 6c6f 2e2e 0a2e 0000 0000 6e5b 696d     ocol........[nmi
   25d98:	7320 6970 3a5d 4620 6961 656c 2064 6e69      spi]: Failed in
   25da8:	6574 6e72 6c61 7720 6972 6574 7020 6f72     ternal write pro
   25db8:	6f74 6f63 206c 6572 2e67 2e2e 000a 0000     tocol reg.......
   25dc8:	6e5b 696d 7320 6970 3a5d 4620 6961 206c     [nmi spi]: Fail 
   25dd8:	6d63 2064 6572 6461 6320 6968 2070 6469     cmd read chip id
   25de8:	2e2e 0a2e 0000 0000 0494 0001 0494 0001     ................
   25df8:	0524 0001 03e8 0001 042e 0001 0450 0001     $...........P...
   25e08:	04d6 0001 04d6 0001 0590 0001 03bc 0001     ................
   25e18:	05ea 0001 05ea 0001 05ea 0001 05ea 0001     ................
   25e28:	0472 0001 09f4 0001 09f4 0001 0a7c 0001     r...........|...
   25e38:	0958 0001 099a 0001 09b8 0001 0a32 0001     X...........2...
   25e48:	0a32 0001 0ade 0001 0930 0001 0b2e 0001     2.......0.......
   25e58:	0b2e 0001 0b2e 0001 0b2e 0001 09d6 0001     ................

00025e68 <__FUNCTION__.16853>:
   25e68:	7073 5f69 6d63 0064                         spi_cmd.

00025e70 <__FUNCTION__.16860>:
   25e70:	7073 5f69 6164 6174 725f 7073 0000 0000     spi_data_rsp....

00025e80 <__FUNCTION__.16869>:
   25e80:	7073 5f69 6d63 5f64 7372 0070               spi_cmd_rsp.

00025e8c <__FUNCTION__.16902>:
   25e8c:	7073 5f69 6d63 5f64 6f63 706d 656c 6574     spi_cmd_complete
   25e9c:	0000 0000                                   ....

00025ea0 <__FUNCTION__.16948>:
   25ea0:	7073 5f69 6164 6174 775f 6972 6574 0000     spi_data_write..

00025eb0 <__FUNCTION__.16960>:
   25eb0:	7073 5f69 7277 7469 5f65 6572 0067 0000     spi_write_reg...

00025ec0 <__FUNCTION__.16971>:
   25ec0:	6d6e 735f 6970 775f 6972 6574 0000 0000     nm_spi_write....

00025ed0 <__FUNCTION__.16983>:
   25ed0:	7073 5f69 6572 6461 725f 6765 0000 0000     spi_read_reg....

00025ee0 <__FUNCTION__.16994>:
   25ee0:	6d6e 735f 6970 725f 6165 0064               nm_spi_read.

00025eec <__FUNCTION__.17015>:
   25eec:	6d6e 735f 6970 695f 696e 0074 4128 5050     nm_spi_init.(APP
   25efc:	2829 4e49 4f46 0029 4528 5252 2952 7543     )(INFO).(ERRR)Cu
   25f0c:	7272 6e65 2074 253c 3e64 000a 000d 0000     rrent <%d>......
   25f1c:	6f53 6b63 7465 2520 2064 6573 7373 6f69     Socket %d sessio
   25f2c:	206e 4449 3d20 2520 0d64 000a 6f53 6b63     n ID = %d...Sock
   25f3c:	7420 206f 6564 656c 6574 3c20 6425 0a3e      to delete <%d>.
   25f4c:	0000 0000 4128 5050 2829 5245 2952 255b     ....(APP)(ERR)[%
   25f5c:	5d73 255b 5d64 0000 4e53 2049 7845 6563     s][%d]..SNI Exce
   25f6c:	6465 2073 614d 2078 654c 676e 6874 000a     eds Max Length..
   25f7c:	6e55 6e6b 776f 206e 5353 204c 6f53 6b63     Unknown SSL Sock
   25f8c:	7465 4f20 7470 6f69 206e 6425 000a 0000     et Option %d....
   25f9c:	6f4e 2074 5353 204c 6f53 6b63 7465 000a     Not SSL Socket..
   25fac:	5322 2f44 4d4d 2043 6143 6472 5320 6f6c     "SD/MMC Card Slo
   25fbc:	2074 2230 0000 0000                         t 0"....

00025fc4 <lun_desc>:
   25fc4:	c0f1 0000 c149 0000 c195 0000 c1e1 0000     ....I...........
   25fd4:	c211 0000 c295 0000 c325 0000 5fac 0002     ........%...._..
   25fe4:	0800 4200 0c00 4200 1000 4200 1400 4200     ...B...B...B...B
   25ff4:	1800 4200 1c00 4200 0a09 0c0b 0e0d 0000     ...B...B........
   26004:	6412 0001 648c 0001 648c 0001 6430 0001     .d...d...d..0d..
   26014:	642a 0001 6436 0001 6418 0001 643c 0001     *d..6d...d..<d..
   26024:	6472 0001 6674 0001 66c4 0001 66c4 0001     rd..tf...f...f..
   26034:	66c0 0001 6666 0001 6686 0001 6656 0001     .f..ff...f..Vf..
   26044:	6698 0001 66aa 0001 6712 0001 6740 0001     .f...f...g..@g..
   26054:	6740 0001 673c 0001 670c 0001 6718 0001     @g..<g...g...g..
   26064:	6706 0001 671e 0001 6724 0001               .g...g..$g..

00026070 <tcc_modules>:
   26070:	2000 4200 2400 4200 2800 4200               . .B.$.B.(.B

0002607c <_tcc_gclk_ids>:
   2607c:	1a1a 001b                                   ....

00026080 <_tcc_apbcmasks>:
   26080:	0100 0000 0200 0000 0400 0000               ............

0002608c <_tcc_maxs>:
   2608c:	ffff 00ff ffff 00ff ffff 0000               ............

00026098 <_tcc_cc_nums>:
   26098:	0204 0002                                   ....

0002609c <_tcc_ow_nums>:
   2609c:	0408 0002                                   ....

000260a0 <_tcc_intflag>:
   260a0:	0001 0000 0002 0000 0004 0000 0008 0000     ................
   260b0:	1000 0000 2000 0000 4000 0000 8000 0000     ..... ...@......
   260c0:	0000 0001 0000 0002 0000 0004 0000 0008     ................

000260d0 <LfnOfs>:
   260d0:	0301 0705 0e09 1210 1614 1c18 001e 0000     ................
   260e0:	2a22 3c3a 3f3e 7f7c 0000 0000 2c2b 3d3b     "*:<>?|.....+,;=
   260f0:	5d5b 0000 feeb 4d90 4453 534f 2e35 0030     [].....MSDOS5.0.
   26100:	4f4e 4e20 4d41 2045 2020 4620 5441 3233     NO NAME    FAT32
   26110:	2020 0020 4f4e 4e20 4d41 2045 2020 4620        .NO NAME    F
   26120:	5441 2020 2020 0020                         AT     .

00026128 <excvt.4558>:
   26128:	9a80 b690 b78e 808f d3d2 d8d4 ded7 8f8e     ................
   26138:	9290 e292 e399 ebea 9959 9d9a 9d9c 9f9e     ........Y.......
   26148:	d6b5 e9e0 a5a5 a7a6 a9a8 abaa 21ac afae     .............!..
   26158:	b1b0 b3b2 b5b4 b7b6 b9b8 bbba bdbc bfbe     ................
   26168:	c1c0 c3c2 c5c4 c7c7 c9c8 cbca cdcc cfce     ................
   26178:	d1d0 d3d2 d5d4 d7d6 d9d8 dbda dddc dfde     ................
   26188:	e1e0 e3e2 e5e5 e7e6 e9e7 ebea eded efee     ................
   26198:	f1f0 f3f2 f5f4 f7f6 f9f8 fbfa fdfc fffe     ................

000261a8 <Tbl>:
   261a8:	00c7 00fc 00e9 00e2 00e4 00e0 00e5 00e7     ................
   261b8:	00ea 00eb 00e8 00ef 00ee 00ec 00c4 00c5     ................
   261c8:	00c9 00e6 00c6 00f4 00f6 00f2 00fb 00f9     ................
   261d8:	00ff 00d6 00dc 00f8 00a3 00d8 00d7 0192     ................
   261e8:	00e1 00ed 00f3 00fa 00f1 00d1 00aa 00ba     ................
   261f8:	00bf 00ae 00ac 00bd 00bc 00a1 00ab 00bb     ................
   26208:	2591 2592 2593 2502 2524 00c1 00c2 00c0     .%.%.%.%$%......
   26218:	00a9 2563 2551 2557 255d 00a2 00a5 2510     ..c%Q%W%]%.....%
   26228:	2514 2534 252c 251c 2500 253c 00e3 00c3     .%4%,%.%.%<%....
   26238:	255a 2554 2569 2566 2560 2550 256c 00a4     Z%T%i%f%`%P%l%..
   26248:	00f0 00d0 00ca 00cb 00c8 0131 00cd 00ce     ..........1.....
   26258:	00cf 2518 250c 2588 2584 00a6 00cc 2580     ...%.%.%.%.....%
   26268:	00d3 00df 00d4 00d2 00f5 00d5 00b5 00fe     ................
   26278:	00de 00da 00db 00d9 00fd 00dd 00af 00b4     ................
   26288:	00ad 00b1 2017 00be 00b6 00a7 00f7 00b8     ..... ..........
   26298:	00b0 00a8 00b7 00b9 00b3 00b2 25a0 00a0     .............%..

000262a8 <tbl_lower.4308>:
   262a8:	0061 0062 0063 0064 0065 0066 0067 0068     a.b.c.d.e.f.g.h.
   262b8:	0069 006a 006b 006c 006d 006e 006f 0070     i.j.k.l.m.n.o.p.
   262c8:	0071 0072 0073 0074 0075 0076 0077 0078     q.r.s.t.u.v.w.x.
   262d8:	0079 007a 00a1 00a2 00a3 00a5 00ac 00af     y.z.............
   262e8:	00e0 00e1 00e2 00e3 00e4 00e5 00e6 00e7     ................
   262f8:	00e8 00e9 00ea 00eb 00ec 00ed 00ee 00ef     ................
   26308:	00f0 00f1 00f2 00f3 00f4 00f5 00f6 00f8     ................
   26318:	00f9 00fa 00fb 00fc 00fd 00fe 00ff 0101     ................
   26328:	0103 0105 0107 0109 010b 010d 010f 0111     ................
   26338:	0113 0115 0117 0119 011b 011d 011f 0121     ..............!.
   26348:	0123 0125 0127 0129 012b 012d 012f 0131     #.%.'.).+.-./.1.
   26358:	0133 0135 0137 013a 013c 013e 0140 0142     3.5.7.:.<.>.@.B.
   26368:	0144 0146 0148 014b 014d 014f 0151 0153     D.F.H.K.M.O.Q.S.
   26378:	0155 0157 0159 015b 015d 015f 0161 0163     U.W.Y.[.]._.a.c.
   26388:	0165 0167 0169 016b 016d 016f 0171 0173     e.g.i.k.m.o.q.s.
   26398:	0175 0177 017a 017c 017e 0192 03b1 03b2     u.w.z.|.~.......
   263a8:	03b3 03b4 03b5 03b6 03b7 03b8 03b9 03ba     ................
   263b8:	03bb 03bc 03bd 03be 03bf 03c0 03c1 03c3     ................
   263c8:	03c4 03c5 03c6 03c7 03c8 03c9 03ca 0430     ..............0.
   263d8:	0431 0432 0433 0434 0435 0436 0437 0438     1.2.3.4.5.6.7.8.
   263e8:	0439 043a 043b 043c 043d 043e 043f 0440     9.:.;.<.=.>.?.@.
   263f8:	0441 0442 0443 0444 0445 0446 0447 0448     A.B.C.D.E.F.G.H.
   26408:	0449 044a 044b 044c 044d 044e 044f 0451     I.J.K.L.M.N.O.Q.
   26418:	0452 0453 0454 0455 0456 0457 0458 0459     R.S.T.U.V.W.X.Y.
   26428:	045a 045b 045c 045e 045f 2170 2171 2172     Z.[.\.^._.p!q!r!
   26438:	2173 2174 2175 2176 2177 2178 2179 217a     s!t!u!v!w!x!y!z!
   26448:	217b 217c 217d 217e 217f ff41 ff42 ff43     {!|!}!~!.!A.B.C.
   26458:	ff44 ff45 ff46 ff47 ff48 ff49 ff4a ff4b     D.E.F.G.H.I.J.K.
   26468:	ff4c ff4d ff4e ff4f ff50 ff51 ff52 ff53     L.M.N.O.P.Q.R.S.
   26478:	ff54 ff55 ff56 ff57 ff58 ff59 ff5a 0000     T.U.V.W.X.Y.Z...

00026488 <tbl_upper.4309>:
   26488:	0041 0042 0043 0044 0045 0046 0047 0048     A.B.C.D.E.F.G.H.
   26498:	0049 004a 004b 004c 004d 004e 004f 0050     I.J.K.L.M.N.O.P.
   264a8:	0051 0052 0053 0054 0055 0056 0057 0058     Q.R.S.T.U.V.W.X.
   264b8:	0059 005a 0021 ffe0 ffe1 ffe5 ffe2 ffe3     Y.Z.!...........
   264c8:	00c0 00c1 00c2 00c3 00c4 00c5 00c6 00c7     ................
   264d8:	00c8 00c9 00ca 00cb 00cc 00cd 00ce 00cf     ................
   264e8:	00d0 00d1 00d2 00d3 00d4 00d5 00d6 00d8     ................
   264f8:	00d9 00da 00db 00dc 00dd 00de 0178 0100     ............x...
   26508:	0102 0104 0106 0108 010a 010c 010e 0110     ................
   26518:	0112 0114 0116 0118 011a 011c 011e 0120     .............. .
   26528:	0122 0124 0126 0128 012a 012c 012e 0130     ".$.&.(.*.,...0.
   26538:	0132 0134 0136 0139 013b 013d 013f 0141     2.4.6.9.;.=.?.A.
   26548:	0143 0145 0147 014a 014c 014e 0150 0152     C.E.G.J.L.N.P.R.
   26558:	0154 0156 0158 015a 015c 015e 0160 0162     T.V.X.Z.\.^.`.b.
   26568:	0164 0166 0168 016a 016c 016e 0170 0172     d.f.h.j.l.n.p.r.
   26578:	0174 0176 0179 017b 017d 0191 0391 0392     t.v.y.{.}.......
   26588:	0393 0394 0395 0396 0397 0398 0399 039a     ................
   26598:	039b 039c 039d 039e 039f 03a0 03a1 03a3     ................
   265a8:	03a4 03a5 03a6 03a7 03a8 03a9 03aa 0410     ................
   265b8:	0411 0412 0413 0414 0415 0416 0417 0418     ................
   265c8:	0419 041a 041b 041c 041d 041e 041f 0420     .............. .
   265d8:	0421 0422 0423 0424 0425 0426 0427 0428     !.".#.$.%.&.'.(.
   265e8:	0429 042a 042b 042c 042d 042e 042f 0401     ).*.+.,.-.../...
   265f8:	0402 0403 0404 0405 0406 0407 0408 0409     ................
   26608:	040a 040b 040c 040e 040f 2160 2161 2162     ..........`!a!b!
   26618:	2163 2164 2165 2166 2167 2168 2169 216a     c!d!e!f!g!h!i!j!
   26628:	216b 216c 216d 216e 216f ff21 ff22 ff23     k!l!m!n!o!!.".#.
   26638:	ff24 ff25 ff26 ff27 ff28 ff29 ff2a ff2b     $.%.&.'.(.).*.+.
   26648:	ff2c ff2d ff2e ff2f ff30 ff31 ff32 ff33     ,.-.../.0.1.2.3.
   26658:	ff34 ff35 ff36 ff37 ff38 ff39 ff3a 0000     4.5.6.7.8.9.:...
   26668:	ba7e 0001 ba7e 0001 ba7e 0001 b90c 0001     ~...~...~.......
   26678:	ba7e 0001 b9f6 0001 ba7e 0001 ba7e 0001     ~.......~...~...
   26688:	ba7e 0001 ba7e 0001 ba7e 0001 ba7e 0001     ~...~...~...~...
   26698:	ba7e 0001 ba70 0001 514d 4354 0000 0000     ~...p...MQTC....
   266a8:	0004 0000 0000 0000 0000 0000 0000 0000     ................
   266b8:	003c 0001 514d 5754 0000 0000 0000 0000     <...MQTW........
	...
   266f8:	514d 4354 0000 0000 0004 0000 0000 0000     MQTC............
	...
   26710:	003c 0001 514d 5754 0000 0000 0000 0000     <...MQTW........
	...
   26750:	514d 5454 0000 0000 514d 7349 7064 0000     MQTT....MQIsdp..
   26760:	7461 656d 2f6c 2e31 2e30 0032 7468 7074     atmel/1.0.2.http
   26770:	2f3a 002f 7468 7074 3a73 2f2f 0000 0000     ://.https://....
   26780:	4547 2054 0000 0000 4f50 5453 0020 0000     GET ....POST ...
   26790:	4544 454c 4554 0020 5550 2054 0000 0000     DELETE .PUT ....
   267a0:	504f 4954 4e4f 2053 0000 0000 4548 4441     OPTIONS ....HEAD
   267b0:	0020 0000 4820 5454 2f50 2e31 0d31 000a      ... HTTP/1.1...
   267c0:	7355 7265 412d 6567 746e 203a 0000 0000     User-Agent: ....
   267d0:	0a0d 0000 6f48 7473 203a 0000 6f43 6e6e     ....Host: ..Conn
   267e0:	6365 6974 6e6f 203a 654b 7065 412d 696c     ection: Keep-Ali
   267f0:	6576 0a0d 0000 0000 6341 6563 7470 452d     ve......Accept-E
   26800:	636e 646f 6e69 3a67 0d20 000a 6341 6563     ncoding: ...Acce
   26810:	7470 432d 6168 7372 7465 203a 7475 2d66     pt-Charset: utf-
   26820:	0d38 000a 7254 6e61 6673 7265 452d 636e     8...Transfer-Enc
   26830:	646f 6e69 3a67 6320 7568 6b6e 6465 0a0d     oding: chunked..
   26840:	0000 0000 7525 0000 6f43 746e 6e65 2d74     ....%u..Content-
   26850:	654c 676e 6874 203a 0000 0000 3130 3332     Length: ....0123
   26860:	3534 3736 3938 6261 6463 6665 7254 6e61     456789abcdefTran
   26870:	6673 7265 452d 636e 646f 6e69 3a67 0020     sfer-Encoding: .
   26880:	6f43 6e6e 6365 6974 6e6f 203a 0000 0000     Connection: ....
   26890:	5448 5054 002f 0000 0d31 0000 db72 0001     HTTP/...1...r...
   268a0:	db6c 0001 db66 0001 db60 0001 db78 0001     l...f...`...x...
   268b0:	db5a 0001 db78 0001 db54 0001 db4e 0001     Z...x...T...N...
   268c0:	db78 0001 db48 0001 db48 0001 db42 0001     x...H...H...B...
   268d0:	db3c 0001 db36 0001 2000 4200 2400 4200     <...6.... .B.$.B
   268e0:	2800 4200 0a0d 0a0d 2d2d 2d2d 452d 4553     .(.B....-----ESE
   268f0:	3135 2036 614d 6e69 5020 6f72 7267 6d61     516 Main Program
   26900:	2d2d 2d2d 0d2d 000a 0a0d 0a0d 6e49 7469     -----.......Init
   26910:	6169 696c 657a 4820 2e57 2e2e 0a0d 0000     ialize HW.......
   26920:	7245 6f72 2072 6e69 7469 6169 696c 697a     Error initializi
   26930:	676e 4920 4332 4420 6972 6576 2172 0a0d     ng I2C Driver!..
   26940:	0000 0000 6e49 7469 6169 696c 657a 2064     ....Initialized 
   26950:	3249 2043 7244 7669 7265 0d21 000a 0000     I2C Driver!.....
   26960:	6f46 6e75 2064 6874 2065 6f43 7272 6365     Found the Correc
   26970:	2074 4d49 0d55 000a 6e49 7469 6169 696c     t IMU...Initiali
   26980:	657a 2064 4d49 2155 0a0d 0000 6e55 6261     zed IMU!....Unab
   26990:	656c 7420 206f 6e49 7469 6169 696c 657a     le to Initialize
   269a0:	4920 554d 2121 0d21 000a 0000 6f43 6c75      IMU!!!.....Coul
   269b0:	2064 6f6e 2074 6966 646e 4920 554d 2121     d not find IMU!!
   269c0:	0d21 000a 6548 7061 6220 6665 726f 2065     !...Heap before 
   269d0:	7473 7261 6974 676e 7420 7361 736b 203a     starting tasks: 
   269e0:	6425 0a0d 0000 0000 4c43 5f49 4154 4b53     %d......CLI_TASK
   269f0:	0000 0000 5245 3a52 4320 494c 7420 7361     ....ERR: CLI tas
   26a00:	206b 6f63 6c75 2064 6f6e 2074 6562 6920     k could not be i
   26a10:	696e 6974 6c61 7a69 6465 0d21 000a 0000     nitialized!.....
   26a20:	6548 7061 6120 7466 7265 7320 6174 7472     Heap after start
   26a30:	6e69 2067 4c43 3a49 2520 0d64 000a 0000     ing CLI: %d.....
   26a40:	4957 4946 545f 5341 004b 0000 5245 3a52     WIFI_TASK...ERR:
   26a50:	5720 4649 2049 6174 6b73 6320 756f 646c      WIFI task could
   26a60:	6e20 746f 6220 2065 6e69 7469 6169 696c      not be initiali
   26a70:	657a 2164 0a0d 0000 6548 7061 6120 7466     zed!....Heap aft
   26a80:	7265 7320 6174 7472 6e69 2067 4957 4946     er starting WIFI
   26a90:	203a 6425 0a0d 0000 7245 6f72 2072 6e6f     : %d....Error on
   26aa0:	6d20 6d65 726f 2079 6c61 6f6c 6163 6974      memory allocati
   26ab0:	6e6f 6f20 206e 5246 4545 5452 534f 0d21     on on FREERTOS!.
   26ac0:	000a 0000 7245 6f72 2072 6e6f 7320 6174     ....Error on sta
   26ad0:	6b63 6f20 6576 6672 6f6c 2077 6e6f 4620     ck overflow on F
   26ae0:	4552 5245 4f54 2153 0a0d 0000 fcac 0001     REERTOS!........
   26af0:	fbfc 0001 fbfc 0001 fbfa 0001 fc9e 0001     ................
   26b00:	fc9e 0001 fc94 0001 fbfa 0001 fc9e 0001     ................
   26b10:	fc94 0001 fc9e 0001 fbfa 0001 fca4 0001     ................
   26b20:	fca4 0001 fca4 0001 fd34 0001 06b8 0002     ........4.......
   26b30:	069a 0002 0654 0002 0572 0002 0654 0002     ....T...r...T...
   26b40:	068c 0002 0654 0002 0572 0002 069a 0002     ....T...r.......
   26b50:	069a 0002 068c 0002 0572 0002 056a 0002     ........r...j...
   26b60:	056a 0002 056a 0002 08d0 0002 0d18 0002     j...j...........
   26b70:	0bd8 0002 0bd8 0002 0bd4 0002 0cf0 0002     ................
   26b80:	0cf0 0002 0ce2 0002 0bd4 0002 0cf0 0002     ................
   26b90:	0ce2 0002 0cf0 0002 0bd4 0002 0cf8 0002     ................
   26ba0:	0cf8 0002 0cf8 0002 0efc 0002               ............

00026bac <_global_impure_ptr>:
   26bac:	0124 2000                                   $.. 

00026bb0 <__sf_fake_stderr>:
	...

00026bd0 <__sf_fake_stdin>:
	...

00026bf0 <__sf_fake_stdout>:
	...
   26c10:	0043 4f50 4953 0058 002e 2d23 2b30 0020     C.POSIX...#-0+ .
   26c20:	6c68 004c 6665 4567 4746 3000 3231 3433     hlL.efgEFG.01234
   26c30:	3635 3837 4139 4342 4544 0046 3130 3332     56789ABCDEF.0123
   26c40:	3534 3736 3938 6261 6463 6665 0000               456789abcdef.

00026c4d <_ctype_>:
   26c4d:	2000 2020 2020 2020 2020 2828 2828 2028     .         ((((( 
   26c5d:	2020 2020 2020 2020 2020 2020 2020 2020                     
   26c6d:	8820 1010 1010 1010 1010 1010 1010 1010      ...............
   26c7d:	0410 0404 0404 0404 0404 1004 1010 1010     ................
   26c8d:	1010 4141 4141 4141 0101 0101 0101 0101     ..AAAAAA........
   26c9d:	0101 0101 0101 0101 0101 0101 1010 1010     ................
   26cad:	1010 4242 4242 4242 0202 0202 0202 0202     ..BBBBBB........
   26cbd:	0202 0202 0202 0202 0202 0202 1010 1010     ................
   26ccd:	0020 0000 0000 0000 0000 0000 0000 0000      ...............
	...

00026d50 <_init>:
   26d50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   26d52:	46c0      	nop			; (mov r8, r8)
   26d54:	bcf8      	pop	{r3, r4, r5, r6, r7}
   26d56:	bc08      	pop	{r3}
   26d58:	469e      	mov	lr, r3
   26d5a:	4770      	bx	lr

00026d5c <__init_array_start>:
   26d5c:	000000dd 	.word	0x000000dd

00026d60 <_fini>:
   26d60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   26d62:	46c0      	nop			; (mov r8, r8)
   26d64:	bcf8      	pop	{r3, r4, r5, r6, r7}
   26d66:	bc08      	pop	{r3}
   26d68:	469e      	mov	lr, r3
   26d6a:	4770      	bx	lr

00026d6c <__fini_array_start>:
   26d6c:	000000b5 	.word	0x000000b5
